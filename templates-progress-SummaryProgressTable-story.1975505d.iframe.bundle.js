/*! For license information please see templates-progress-SummaryProgressTable-story.1975505d.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5786],{"./src/templates/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/progress/BubbleBadge.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AssessmentBadge=AssessmentBadge,exports.BadgeType=void 0,exports.KeepWorkingBadge=KeepWorkingBadge,exports.default=BubbleBadge;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_utils=__webpack_require__("./src/utils.js"),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BadgeType=exports.BadgeType=(0,_utils.makeEnum)("assessment","keepWorking");function BubbleBadge(_ref){var badgeType=_ref.badgeType,bubbleSize=_ref.bubbleSize,bubbleShape=_ref.bubbleShape;return[_BubbleFactory.BubbleSize.full,_BubbleFactory.BubbleSize.letter].includes(bubbleSize)?badgeType===BadgeType.assessment?AssessmentBubbleBadge(bubbleShape):badgeType===BadgeType.keepWorking?KeepWorkingBubbleBadge(bubbleSize):null:null}function AssessmentBubbleBadge(bubbleShape){var bubblePositioning=bubbleShape===_BubbleFactory.BubbleShape.diamond?styles.diamondBubblePosition:styles.bubblePosition;return _react.default.createElement("div",{style:bubblePositioning},_react.default.createElement(AssessmentBadge,null))}function KeepWorkingBubbleBadge(bubbleSize){var isSmall=bubbleSize===_BubbleFactory.BubbleSize.letter,bubblePositioning=isSmall?styles.keepWorkingSmallBadgePosition:styles.keepWorkingBadgePosition;return _react.default.createElement("div",{style:bubblePositioning},_react.default.createElement(KeepWorkingBadge,{isSmall}))}function KeepWorkingBadge(_ref2){var isSmall=_ref2.isSmall,style=_ref2.style,badgeSize=isSmall?styles.keepWorkingBadgeSmallSize:styles.keepWorkingBadgeFullSize;return _react.default.createElement("div",{style:_objectSpread(_objectSpread(_objectSpread({},styles.keepWorkingBadge),badgeSize),style)})}function AssessmentBadge(){return _react.default.createElement("span",{className:"fa-stack",style:styles.container},_react.default.createElement(_FontAwesome.default,{icon:"circle",className:"fa-stack-2x",style:styles.purple}),_react.default.createElement(_FontAwesome.default,{icon:"circle-thin",className:"fa-stack-2x",style:styles.white}),_react.default.createElement(_FontAwesome.default,{icon:"check",className:"fa-stack-1x",style:styles.white}))}BubbleBadge.propTypes={badgeType:_propTypes.default.oneOf(Object.values(BadgeType)).isRequired,bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired,bubbleShape:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleShape)).isRequired},AssessmentBubbleBadge.propTypes={bubbleShape:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleShape)).isRequired},KeepWorkingBubbleBadge.propTypes={bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired},KeepWorkingBadge.propTypes={isSmall:_propTypes.default.bool,style:_propTypes.default.object},AssessmentBadge.propTypes={hasWhiteBorder:_propTypes.default.bool,style:_propTypes.default.object};var styles={container:{fontSize:10},bubblePosition:{position:"absolute",top:-7,right:-7},diamondBubblePosition:{position:"absolute",top:-13,right:-17},purple:{color:_color.default.purple},white:{color:_color.default.white},keepWorkingSmallBadgePosition:{position:"absolute",top:-2,right:-2},keepWorkingBadgePosition:{position:"absolute",top:0,right:-2},keepWorkingBadge:{borderRadius:"50%",backgroundColor:_color.default.red},keepWorkingBadgeFullSize:{width:10,height:10},keepWorkingBadgeSmallSize:{width:7,height:7}}},"./src/templates/progress/FocusAreaIndicator.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var styles={main:{display:"inline-block",position:"absolute",right:0,top:0,whiteSpace:"nowrap"},arrowContainer:{display:"inline-block",position:"relative",top:10},leftArrow:{display:"inline-block",width:0,height:0,borderStyle:"solid",borderWidth:"17px 20px 17px",borderColor:"transparent ".concat(_color.default.cyan," transparent transparent")},focusArea:{display:"inline-block",backgroundColor:_color.default.cyan,color:_color.default.white,height:34,lineHeight:"34px",position:"relative",top:-3},text:{display:"inline-block"},focusAreaIcon:{display:"inline-block",color:_color.default.white,lineHeight:"13px",padding:5,marginLeft:5,marginRight:5,borderRadius:4,":hover":{backgroundColor:_color.default.default_blue}}};exports.default=(0,_radium.default)((function FocusAreaIndicator(){return _react.default.createElement("div",{style:styles.main},_react.default.createElement("div",{style:styles.arrowContainer},_react.default.createElement("div",{style:styles.leftArrow})),_react.default.createElement("div",{style:styles.focusArea},_react.default.createElement("div",{style:styles.text},"Focus Area"),_react.default.createElement("a",{href:window.location.pathname+"/preview-assignments"},_react.default.createElement("div",{style:styles.focusAreaIcon,"data-tip":!0,"data-for":"focus-area"},_react.default.createElement(_FontAwesome.default,{icon:"pencil"})))),_react.default.createElement(_reactTooltip.default,{id:"focus-area",role:"tooltip",effect:"solid"},"Click to change your focus area."))}));module.exports=exports.default},"./src/templates/progress/ProgressBubble.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressBubble=exports.default=function(_React$Component){function ProgressBubble(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"onClickLevel",(function(){_this.props.onClick&&_this.props.onClick(_this.props.level)})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBubble,_React$Component);var _proto=ProgressBubble.prototype;return _proto.isClickable=function isClickable(){var _this$props=this.props,disabled=_this$props.disabled,level=_this$props.level,onClick=_this$props.onClick;return!(disabled||!level.url&&!onClick)},_proto.getUrl=function getUrl(){var _this$props2=this.props,onClick=_this$props2.onClick,level=_this$props2.level,selectedSectionId=_this$props2.selectedSectionId,selectedStudentId=_this$props2.selectedStudentId;return onClick?null:(0,_BubbleFactory.getBubbleUrl)(level.url,selectedStudentId,selectedSectionId,!0)},_proto.renderBubbleBadge=function renderBubbleBadge(bubbleShape,bubbleSize){var _this$props3=this.props,level=_this$props3.level,smallBubble=_this$props3.smallBubble,hideAssessmentBadge=_this$props3.hideAssessmentBadge,hasKeepWorkingFeedback=level.teacherFeedbackReviewState===_types.ReviewStates.keepWorking;if(((0,_progressHelpers.isLevelAssessment)(level)&&!hideAssessmentBadge||hasKeepWorkingFeedback)&&!smallBubble)return _react.default.createElement(_BubbleBadge.default,{badgeType:hasKeepWorkingFeedback?_BubbleBadge.BadgeType.keepWorking:_BubbleBadge.BadgeType.assessment,bubbleSize,bubbleShape})},_proto.createBubbleElement=function createBubbleElement(){var _this$props4=this.props,level=_this$props4.level,smallBubble=_this$props4.smallBubble,hideToolTips=_this$props4.hideToolTips,bubbleSize=smallBubble?_BubbleFactory.BubbleSize.dot:_BubbleFactory.BubbleSize.full,content=(0,_BubbleFactory.getBubbleContent)(level.isLocked,level.isUnplugged,level.bonus,level.paired,level.bubbleText||level.letter||level.levelNumber,bubbleSize),bubbleShape=(0,_BubbleFactory.getBubbleShape)(level.isUnplugged&&!smallBubble,level.isConceptLevel),bubble=_react.default.createElement(_BubbleFactory.BasicBubble,{shape:bubbleShape,size:bubbleSize,progressStyle:(0,_progressStyles.levelProgressStyle)(level.status,level.kind),classNames:(0,_BubbleFactory.getBubbleClassNames)(this.isClickable())},content,this.renderBubbleBadge(bubbleShape,bubbleSize));return hideToolTips?bubble:_react.default.createElement(_BubbleFactory.BubbleTooltip,{level},bubble)},_proto.render=function render(){var level=this.props.level,levelID=level.bubbleText||level.letter||level.levelNumber,lessonName=this.props.lessonName,description=_locale.default.progressBubbleDescription({levelID});return lessonName&&(description=_locale.default.progressBubbleDescriptionWithLesson({levelID,lessonName})),this.isClickable()?_react.default.createElement(_BubbleFactory.BubbleLink,{url:this.getUrl(),onClick:this.onClickLevel,a11y_description:description},this.createBubbleElement()):this.createBubbleElement()},ProgressBubble}(_react.default.Component);_defineProperty(ProgressBubble,"propTypes",{level:_progressTypes.levelWithProgressType.isRequired,disabled:_propTypes.default.bool.isRequired,smallBubble:_propTypes.default.bool,selectedSectionId:_propTypes.default.number,selectedStudentId:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),hideToolTips:_propTypes.default.bool,onClick:_propTypes.default.func,hideAssessmentBadge:_propTypes.default.bool,lessonName:_propTypes.default.string}),module.exports=exports.default},"./src/templates/progress/ProgressBubbleSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressBubbleSet=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_ProgressBubble=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubble.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressBubbleSet=function(_React$Component){function ProgressBubbleSet(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"renderBubble",(function(level,index,isSublevel){var _this$props=_this.props,levels=_this$props.levels,selectedSectionId=_this$props.selectedSectionId,selectedStudentId=_this$props.selectedStudentId,isRtl=_this$props.isRtl,backgroundFirstStyle=isRtl?styles.backgroundLast:styles.backgroundFirst,backgroundLastStyle=isRtl?styles.backgroundFirst:styles.backgroundLast,backgroundStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.background),level.isConceptLevel&&styles.backgroundDiamond),isSublevel&&styles.backgroundSublevel),level.isUnplugged&&styles.backgroundPill),!isSublevel&&0===index&&backgroundFirstStyle),!isSublevel&&!level.sublevels&&index===levels.length-1&&backgroundLastStyle),containerStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.container),level.isUnplugged&&styles.pillContainer),level.isConceptLevel&&styles.diamondContainer),isSublevel&&styles.containerSublevel);return _react.default.createElement("div",{style:styles.withBackground,key:index},_react.default.createElement("div",{style:backgroundStyleProp}),_react.default.createElement("div",{style:containerStyleProp},_react.default.createElement(_ProgressBubble.default,{level,disabled:_this.props.disabled,smallBubble:isSublevel,selectedSectionId,selectedStudentId,hideToolTips:_this.props.hideToolTips,onClick:_this.props.onBubbleClick,lessonName:_this.props.lessonName})))})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBubbleSet,_React$Component),ProgressBubbleSet.prototype.render=function render(){var _this2=this,_this$props2=this.props,levels=_this$props2.levels,style=_this$props2.style,showSublevels=_this$props2.showSublevels;return _react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),style)},levels.map((function(level,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(level,index,!1),showSublevels&&level.sublevels&&level.sublevels.map((function(sublevel,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(sublevel,index,!0))})))})))},ProgressBubbleSet}(_react.default.Component);_defineProperty(ProgressBubbleSet,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,style:_propTypes.default.object,selectedSectionId:_propTypes.default.number,selectedStudentId:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),hideToolTips:_propTypes.default.bool,lessonExtrasEnabled:_propTypes.default.bool,showSublevels:_propTypes.default.bool,onBubbleClick:_propTypes.default.func,lessonName:_propTypes.default.string,isRtl:_propTypes.default.bool});var styles={main:{position:"relative",display:"inline-block"},withBackground:{display:"inline-block",position:"relative"},background:{height:10,backgroundColor:_color.default.lighter_gray,position:"absolute",left:0,right:0,top:(_progressStyles.DOT_SIZE+4+6-10)/2},backgroundDiamond:{top:(_progressStyles.DIAMOND_DOT_SIZE+4+12-10)/2},backgroundPill:{top:15},backgroundSublevel:{top:9},backgroundFirst:{left:15},backgroundLast:{right:15},container:{position:"relative"},containerSublevel:{top:5},diamondContainer:{height:36},pillContainer:{marginRight:2,height:37}};exports.UnconnectedProgressBubbleSet=ProgressBubbleSet,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressBubbleSet))},"./src/templates/progress/SummaryProgressRow.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.styles=exports.default=exports.UnconnectedSummaryProgressRow=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_FocusAreaIndicator=_interopRequireDefault(__webpack_require__("./src/templates/progress/FocusAreaIndicator.jsx")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function SummaryProgressRow(_ref){var dark=_ref.dark,lesson=_ref.lesson,levels=_ref.levels,lessonIsHiddenForStudents=_ref.lessonIsHiddenForStudents,lessonIsLockedForUser=_ref.lessonIsLockedForUser,lessonIsLockedForAllStudents=_ref.lessonIsLockedForAllStudents,viewAs=_ref.viewAs;if(lessonIsHiddenForStudents&&viewAs===_viewAsRedux.ViewType.Participant)return null;var isLockedForUser=lessonIsLockedForUser(lesson,levels,viewAs),isLockedForSection=lessonIsLockedForAllStudents(lesson.id),showAsLocked=isLockedForUser||isLockedForSection,lessonTitle=lesson.name;lesson.lessonNumber&&(lessonTitle=lesson.lessonNumber+". "+lessonTitle);var displayDashedBorder=lessonIsHiddenForStudents||showAsLocked,titleTooltipId=_lodash.default.uniqueId(),lockedTooltipId=_lodash.default.uniqueId();return _react.default.createElement("tr",{id:"summary-progress-row-".concat(lesson.lessonNumber),className:"uitest-summary-progress-row",style:_objectSpread(_objectSpread({},dark?styles.darkRow:styles.lightRow),displayDashedBorder&&styles.dashedBorder)},_react.default.createElement("td",{style:_objectSpread(_objectSpread({},styles.col1),isLockedForUser&&styles.fadedCol)},_react.default.createElement("div",{style:styles.colText},lessonIsHiddenForStudents&&_react.default.createElement(_FontAwesome.default,{icon:"eye-slash",style:styles.icon}),lesson.lockable&&_react.default.createElement("span",{"data-tip":!0,"data-for":lockedTooltipId},_react.default.createElement(_FontAwesome.default,{icon:showAsLocked?"lock":"unlock",style:_objectSpread(_objectSpread({},styles.icon),!showAsLocked&&styles.unlockedIcon)}),!showAsLocked&&viewAs===_viewAsRedux.ViewType.Instructor&&_react.default.createElement(_reactTooltip.default,{id:lockedTooltipId,role:"tooltip",wrapper:"span",effect:"solid"},_locale.default.lockAssessmentLong())),_react.default.createElement("span",{"data-tip":!0,"data-for":titleTooltipId,"aria-describedby":titleTooltipId},lessonTitle,_react.default.createElement(_reactTooltip.default,{id:titleTooltipId,role:"tooltip",wrapper:"span",effect:"solid"},lesson.name)))),_react.default.createElement("td",{style:_objectSpread(_objectSpread({},styles.col2),isLockedForUser&&styles.fadedCol)},0===levels.length?_locale.default.lessonContainsNoLevels():_react.default.createElement(_ProgressBubbleSet.default,{levels,disabled:isLockedForUser,style:lesson.isFocusArea?styles.focusAreaMargin:void 0,lessonName:lesson.name}),lesson.isFocusArea&&_react.default.createElement(_FocusAreaIndicator.default,null)))}SummaryProgressRow.propTypes={dark:_propTypes.default.bool.isRequired,lesson:_progressTypes.lessonType.isRequired,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,viewAs:_propTypes.default.oneOf(Object.keys(_viewAsRedux.ViewType)),lessonIsHiddenForStudents:_propTypes.default.bool.isRequired,lessonIsLockedForUser:_propTypes.default.func.isRequired,lessonIsLockedForAllStudents:_propTypes.default.func.isRequired};var styles=exports.styles={lightRow:{backgroundColor:_color.default.table_light_row},darkRow:{backgroundColor:_color.default.table_dark_row},dashedBorder:{borderStyle:"dashed",borderWidth:2},col1:{width:200,minWidth:200,maxWidth:200,lineHeight:"52px",color:_color.default.charcoal,letterSpacing:-.11,whiteSpace:"nowrap",paddingLeft:20,paddingRight:20,borderRightWidth:1,borderRightColor:_color.default.border_light_gray,borderRightStyle:"solid"},col2:{position:"relative",width:"100%",paddingLeft:20,paddingRight:20},fadedCol:{opacity:.6},colText:_objectSpread(_objectSpread({color:_color.default.charcoal},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:12,overflow:"hidden",textOverflow:"ellipsis"}),icon:{marginRight:5,fontSize:12,color:_color.default.cyan},unlockedIcon:{color:_color.default.orange},focusAreaMargin:{marginRight:130},opaque:{opacity:1}};exports.UnconnectedSummaryProgressRow=SummaryProgressRow,exports.default=(0,_reactRedux.connect)((function(state,ownProps){return{viewAs:state.viewAs,lessonIsHiddenForStudents:!(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,_viewAsRedux.ViewType.Participant),lessonIsLockedForUser:function lessonIsLockedForUser(lesson,levels,viewAs){return(0,_progressHelpers.lessonIsLockedForUser)(lesson,levels,state,viewAs)},lessonIsLockedForAllStudents:function lessonIsLockedForAllStudents(lessonId){return(0,_progressHelpers.lessonIsLockedForAllStudents)(lessonId,state)}}}))(SummaryProgressRow)},"./src/templates/progress/SummaryProgressTable.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedSummaryProgressTable=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_SummaryProgressRow=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/SummaryProgressRow.jsx")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var SummaryProgressTable=function(_React$Component){function SummaryProgressTable(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SummaryProgressTable,_React$Component),SummaryProgressTable.prototype.render=function render(){var _this=this,minimal=this.props.minimal,_this$props$groupedLe=this.props.groupedLesson,lessons=_this$props$groupedLe.lessons,levelsByLesson=_this$props$groupedLe.levelsByLesson;if(lessons.length!==levelsByLesson.length)throw new Error("Inconsistent number of lessons");return _react.default.createElement("table",{className:"uitest-summary-progress-table",style:styles.table},!minimal&&_react.default.createElement("thead",null,_react.default.createElement("tr",{style:styles.headerRow},_react.default.createElement("td",{style:_SummaryProgressRow.styles.col1},_react.default.createElement("div",{style:_SummaryProgressRow.styles.colText},_locale.default.lessonName())),_react.default.createElement("td",{style:_SummaryProgressRow.styles.col2},_react.default.createElement("div",{style:_SummaryProgressRow.styles.colText},_locale.default.progress())))),_react.default.createElement("tbody",null,lessons.map((function(lesson,index){return{unfilteredIndex:index,lesson}})).filter((function(item){return _this.props.lessonIsVisible(item.lesson)})).map((function(item,filteredIndex){return _react.default.createElement(_SummaryProgressRow.default,{key:item.unfilteredIndex,levels:levelsByLesson[item.unfilteredIndex],lesson:item.lesson,dark:filteredIndex%2==1})}))))},SummaryProgressTable}(_react.default.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SummaryProgressTable,"propTypes",{groupedLesson:_progressTypes.groupedLessonsType.isRequired,minimal:_propTypes.default.bool,lessonIsVisible:_propTypes.default.func.isRequired});var styles={table:{borderWidth:1,borderStyle:"solid",borderLeftColor:_color.default.border_gray,borderTopColor:_color.default.border_gray,borderBottomColor:_color.default.border_light_gray,borderRightColor:_color.default.border_light_gray},headerRow:{backgroundColor:_color.default.table_header}};exports.UnconnectedSummaryProgressTable=SummaryProgressTable,exports.default=(0,_reactRedux.connect)((function(state){return{lessonIsVisible:function lessonIsVisible(lesson){return(0,_progressHelpers.lessonIsVisible)(lesson,state,state.viewAs)}}}))(SummaryProgressTable)},"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=exports.fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)},fakeLevels=(exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))},exports.fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))}),fakeProgressForLevels=exports.fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress},randomNumberUpTo100=(exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})},exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})},function randomNumberUpTo100(){return Math.floor(100*Math.random())}),lessonId=1,fakeLessonWithLevels=exports.fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)},fakeStudents=exports.fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))},fakeUnitData=exports.fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},fakeStudentLevelProgress=exports.fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress},fakeStudentLastUpdate=exports.fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate},fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/progress/SummaryProgressTable.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithFocusArea=exports.UnpluggedLesson=exports.UnlockedLessonCurrentSectionAsInstructor=exports.ThirdRowHiddenAsParticipant=exports.ThirdLessonHiddenAsInstructor=exports.Simple=exports.SecondLessonHiddenAsParticipant=exports.SecondLessonHiddenAsInstructor=exports.LockedLessonCurrentSectionAsInstructor=exports.LockedLessonAsParticipant=exports.LockedHiddenLessonAsInstructor=exports.ForPeerReviews=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_SummaryProgressTable=__webpack_require__("./src/templates/progress/SummaryProgressTable.jsx"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js"),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}exports.default={component:_SummaryProgressTable.UnconnectedSummaryProgressTable};var defaultProps={groupedLesson:{lessons:[(0,_progressTestHelpers.fakeLesson)("Jigsaw",1,!1,1),(0,_progressTestHelpers.fakeLesson)("Maze",2,!1,2),(0,_progressTestHelpers.fakeLesson)("Artist",3,!1,3),(0,_progressTestHelpers.fakeLesson)("Something",4,!1,4)],levelsByLesson:[[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevels)(1)[0]),{},{name:"First progression"})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,2).map((function(level){return _objectSpread(_objectSpread({},level),{},{progression:"Second Progression"})}))),[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevels)(1)[0]),{},{name:"Last progression"})]),(0,_progressTestHelpers.fakeLevels)(2),(0,_progressTestHelpers.fakeLevels)(2),(0,_progressTestHelpers.fakeLevels)(2)]},viewAs:_viewAsRedux.ViewType.Participant,lessonIsVisible:function lessonIsVisible(){return!0}},Template=function Template(args){var store=args.store,props=args.props;return _react.default.createElement(_reactRedux.Provider,{store},_react.default.createElement(_SummaryProgressTable.UnconnectedSummaryProgressTable,props))};(exports.Simple=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,null),props:defaultProps},(exports.WithFocusArea=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,null),props:_objectSpread(_objectSpread({},defaultProps),{},{groupedLesson:{lessons:defaultProps.groupedLesson.lessons.map((function(lesson,index){return _objectSpread(_objectSpread({},lesson),{},{isFocusArea:1===index})})),levelsByLesson:defaultProps.groupedLesson.levelsByLesson.map((function(levels,index){return 1===index?(0,_progressTestHelpers.fakeLevels)(8):levels}))},lessonIsVisible:function lessonIsVisible(){return!0}})},(exports.ForPeerReviews=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,null),props:{groupedLesson:{lessons:[{id:-1,isFocusArea:!1,lockable:!1,name:"You must complete 3 reviews for this unit"}],levelsByLesson:[[{id:"-1",name:"Link to submitted review",status:_sharedConstants.LevelStatus.perfect,isLocked:!1,url:"/peer_reviews/1",levelNumber:1},{id:"-1",name:"Review a new submission",status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,url:"/pull-review",levelNumber:2},{id:"-1",icon:"fa-lock",name:"Reviews unavailable at this time",status:_sharedConstants.LevelStatus.not_tried,isLocked:!0,url:"",levelNumber:3}]]},lessonIsVisible:function lessonIsVisible(){return!0}}},(exports.SecondLessonHiddenAsInstructor=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,"2"),props:_objectSpread(_objectSpread({},defaultProps),{},{viewAs:_viewAsRedux.ViewType.Instructor,lessonIsVisible:function lessonIsVisible(lesson,viewAs){return 2!==lesson.id||viewAs===_viewAsRedux.ViewType.Instructor}})},(exports.ThirdLessonHiddenAsInstructor=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,"3"),props:_objectSpread(_objectSpread({},defaultProps),{},{viewAs:_viewAsRedux.ViewType.Instructor,lessonIsVisible:function lessonIsVisible(lesson,viewAs){return 3!==lesson.id||viewAs===_viewAsRedux.ViewType.Instructor}})},(exports.SecondLessonHiddenAsParticipant=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Participant,"2"),props:_objectSpread(_objectSpread({},defaultProps),{},{lessonIsVisible:function lessonIsVisible(lesson,viewAs){return 2!==lesson.id||viewAs===_viewAsRedux.ViewType.Instructor}})},(exports.ThirdRowHiddenAsParticipant=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Participant,"3"),props:_objectSpread(_objectSpread({},defaultProps),{},{lessonIsVisible:function lessonIsVisible(lesson,viewAs){return 3!==lesson.id||viewAs===_viewAsRedux.ViewType.Instructor}})},(exports.LockedLessonCurrentSectionAsInstructor=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithLockedLesson)(_viewAsRedux.ViewType.Instructor,!0),props:_objectSpread(_objectSpread({},defaultProps),{},{groupedLesson:{lessons:[(0,_progressTestHelpers.fakeLesson)("Jigsaw",1,!1,1),(0,_progressTestHelpers.fakeLesson)("Assessment One",2,!0),(0,_progressTestHelpers.fakeLesson)("Artist",3,!1,2)],levelsByLesson:[(0,_progressTestHelpers.fakeLevels)(3),(0,_progressTestHelpers.fakeLevels)(4),(0,_progressTestHelpers.fakeLevels)(2)]},viewAs:_viewAsRedux.ViewType.Instructor})},(exports.LockedLessonAsParticipant=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithLockedLesson)(_viewAsRedux.ViewType.Participant),props:_objectSpread(_objectSpread({},defaultProps),{},{groupedLesson:{lessons:[(0,_progressTestHelpers.fakeLesson)("Jigsaw",1,!1,1),(0,_progressTestHelpers.fakeLesson)("Assessment One",2,!0),(0,_progressTestHelpers.fakeLesson)("Artist",3,!1,2)],levelsByLesson:[(0,_progressTestHelpers.fakeLevels)(3),(0,_progressTestHelpers.fakeLevels)(4).map((function(level){return _objectSpread(_objectSpread({},level),{},{isLocked:!0})})),(0,_progressTestHelpers.fakeLevels)(2)]}})},(exports.UnlockedLessonCurrentSectionAsInstructor=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithLockedLesson)(_viewAsRedux.ViewType.Instructor,!0),props:_objectSpread(_objectSpread({},defaultProps),{},{groupedLesson:{lessons:[(0,_progressTestHelpers.fakeLesson)("Jigsaw",1,!1,1),(0,_progressTestHelpers.fakeLesson)("Assessment One",2,!0),(0,_progressTestHelpers.fakeLesson)("Artist",3,!1,2)],levelsByLesson:[(0,_progressTestHelpers.fakeLevels)(3),(0,_progressTestHelpers.fakeLevels)(4),(0,_progressTestHelpers.fakeLevels)(2)]},viewAs:_viewAsRedux.ViewType.Instructor,lessonIsVisible:function lessonIsVisible(){return!0}})},(exports.LockedHiddenLessonAsInstructor=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,"2"),props:_objectSpread(_objectSpread({},defaultProps),{},{groupedLesson:{lessons:[(0,_progressTestHelpers.fakeLesson)("Jigsaw",1,!1,1),(0,_progressTestHelpers.fakeLesson)("Assessment One",2,!0),(0,_progressTestHelpers.fakeLesson)("Artist",3,!1,2)],levelsByLesson:[(0,_progressTestHelpers.fakeLevels)(3),(0,_progressTestHelpers.fakeLevels)(4),(0,_progressTestHelpers.fakeLevels)(2)]},viewAs:_viewAsRedux.ViewType.Instructor,lessonIsVisible:function lessonIsVisible(lesson,viewAs){return 2!==lesson.id||viewAs===_viewAsRedux.ViewType.Instructor}})},(exports.UnpluggedLesson=Template.bind({})).args={store:(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,null),props:_objectSpread(_objectSpread({},defaultProps),{},{groupedLesson:{lessons:[(0,_progressTestHelpers.fakeLesson)("Lesson with Unplugged",1,!1,1)],levelsByLesson:[[(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(3)))]}})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLXByb2dyZXNzLVN1bW1hcnlQcm9ncmVzc1RhYmxlLXN0b3J5LjE3MmUxNzU4LmlmcmFtZS5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijt5UEFFQSxJQUFBQSxXQUFBQyx1QkFBQUMsb0JBQUEsdUNBQ0FDLE9BQUFGLHVCQUFBQyxvQkFBQSxrQ0FDQUUsUUFBQUgsdUJBQUFDLG9CQUFBLG9DQUF1QkcsVUFBQSw2QkFKdkIsU0FBQUosdUJBQUFLLEtBQUEsT0FBQUEsS0FBQUEsSUFBQUMsV0FBQUQsSUFBQSxTQUFBQSxJQUFBLFVBQUFFLFdBQUEsT0FBQUEsU0FBQUMsT0FBQUMsT0FBQUQsT0FBQUMsT0FBQUMsT0FBQSxTQUFBQyxRQUFBLFFBQUFDLEVBQUEsRUFBQUEsRUFBQUMsVUFBQUMsT0FBQUYsSUFBQSxLQUFBRyxPQUFBRixVQUFBRCxHQUFBLFFBQUFJLE9BQUFELE9BQUFQLE9BQUFTLFVBQUFDLGVBQUFDLEtBQUFKLE9BQUFDLE9BQUFMLE9BQUFLLEtBQUFELE9BQUFDLEtBQUEsUUFBQUwsTUFBQSxFQUFBSixTQUFBYSxNQUFBLEtBQUFQLFVBQUEsVUFBQVEseUJBQUFOLE9BQUFPLFVBQUEsU0FBQVAsT0FBQSxhQUFBQyxJQUFBSixFQUFBRCxPQUFBLFNBQUFZLDhCQUFBUixPQUFBTyxVQUFBLFNBQUFQLE9BQUEsYUFBQUMsSUFBQUosRUFBQUQsT0FBQSxHQUFBYSxXQUFBaEIsT0FBQWlCLEtBQUFWLFFBQUEsSUFBQUgsRUFBQSxFQUFBQSxFQUFBWSxXQUFBVixPQUFBRixJQUFBSSxJQUFBUSxXQUFBWixHQUFBVSxTQUFBSSxRQUFBVixNQUFBLElBQUFMLE9BQUFLLEtBQUFELE9BQUFDLE1BQUEsT0FBQUwsTUFBQSxDQUFBWSxDQUFBUixPQUFBTyxVQUFBLEdBQUFkLE9BQUFtQixzQkFBQSxLQUFBQyxpQkFBQXBCLE9BQUFtQixzQkFBQVosUUFBQSxJQUFBSCxFQUFBLEVBQUFBLEVBQUFnQixpQkFBQWQsT0FBQUYsSUFBQUksSUFBQVksaUJB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Q3hEdlIsTUFBSzRCLGNBQUFBLGNBQUEsR0FDQTZmLGNBQVksSUFDZmhPLGNBQWUsQ0FDYkMsUUFBUyxFQUFDLEVBQUFtQixxQkFBQUEsWUFBVyx3QkFBeUIsR0FBRyxFQUFPLElBQ3hEbEIsZUFBZ0IsQ0FBQyxFQUFDLEVBQUFvQixxQkFBQUEsV0FBVSxDQUFDN0osYUFBYSxLQUFNL0ssT0FBQXVnQixvQkFBSyxFQUFBdEwscUJBQUFBLFlBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL0ZvbnRBd2Vzb21lLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL0J1YmJsZUJhZGdlLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL0ZvY3VzQXJlYUluZGljYXRvci5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9Qcm9ncmVzc0J1YmJsZS5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9Qcm9ncmVzc0J1YmJsZVNldC5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9TdW1tYXJ5UHJvZ3Jlc3NSb3cuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvU3VtbWFyeVByb2dyZXNzVGFibGUuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvcHJvZ3Jlc3NUZXN0SGVscGVycy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL1N1bW1hcnlQcm9ncmVzc1RhYmxlLnN0b3J5LmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGZpbGUgZm9udC1hd2Vzb21lIGhlbHBlciBjb21wb25lbnQuICovXG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKiBHaXZlbiBhbiBpY29uIG5hbWUsIHJlbmRlciB0aGUgaWNvbiB1c2luZyBhbiA8aT4gdGFnIGluIHR5cGljYWwgZm9udC1hd2Vzb21lXG4gKiBmYXNoaW9uLiAgUmVxdWlyZXMgZm9udC1hd2Vzb21lIHRvIGJlIGF2YWlsYWJsZSBvbiB0aGUgcGFnZS5cbiAqIFNlZSBodHRwOi8vZm9udGF3ZXNvbWUuaW8vaWNvbnMvIHRvIGxvb2sgdXAgc3VwcG9ydGVkIGljb24gbmFtZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZvbnRBd2Vzb21lKHtpY29uLCBjbGFzc05hbWUsIHRpdGxlLCAuLi5wcm9wc30pIHtcbiAgY29uc3QgbmV3UHJvcHMgPSBfLmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGBmYSBmYS0ke2ljb259ICR7Y2xhc3NOYW1lID8gY2xhc3NOYW1lIDogJyd9YCxcbiAgfSk7XG4gIHJldHVybiA8aSB7Li4ubmV3UHJvcHN9IHRpdGxlPXt0aXRsZX0gLz47XG59XG5cbkZvbnRBd2Vzb21lLnByb3BUeXBlcyA9IHtcbiAgaWNvbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBUaXRsZSBzaG91bGQgYmUgdXNlZCBmb3Igc2VtYW50aWMgaWNvbnMuIElmIG5vdCBnaXZlbiwgdGhlIHNjcmVlbnJlYWRlciB3aWxsIG5vdCByZWFkIHRoZSBpY29uXG4gIC8vIFNlZSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9kb2NzL3dlYi9kaWctZGVlcGVyL2FjY2Vzc2liaWxpdHkjaWNvbnMtdXNlZC1hcy1zZW1hbnRpYy1lbGVtZW50c1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcbmltcG9ydCBGb250QXdlc29tZSBmcm9tICcuLi9Gb250QXdlc29tZSc7XG5pbXBvcnQge21ha2VFbnVtfSBmcm9tICdAY2RvL2FwcHMvdXRpbHMnO1xuaW1wb3J0IHtCdWJibGVTaXplLCBCdWJibGVTaGFwZX0gZnJvbSAnLi9CdWJibGVGYWN0b3J5JztcblxuZXhwb3J0IGNvbnN0IEJhZGdlVHlwZSA9IG1ha2VFbnVtKCdhc3Nlc3NtZW50JywgJ2tlZXBXb3JraW5nJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJ1YmJsZUJhZGdlKHtiYWRnZVR5cGUsIGJ1YmJsZVNpemUsIGJ1YmJsZVNoYXBlfSkge1xuICBjb25zdCBjYW5IYXZlQmFkZ2UgPSBbQnViYmxlU2l6ZS5mdWxsLCBCdWJibGVTaXplLmxldHRlcl07XG4gIGlmICghY2FuSGF2ZUJhZGdlLmluY2x1ZGVzKGJ1YmJsZVNpemUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoYmFkZ2VUeXBlID09PSBCYWRnZVR5cGUuYXNzZXNzbWVudCkge1xuICAgIHJldHVybiBBc3Nlc3NtZW50QnViYmxlQmFkZ2UoYnViYmxlU2hhcGUpO1xuICB9IGVsc2UgaWYgKGJhZGdlVHlwZSA9PT0gQmFkZ2VUeXBlLmtlZXBXb3JraW5nKSB7XG4gICAgcmV0dXJuIEtlZXBXb3JraW5nQnViYmxlQmFkZ2UoYnViYmxlU2l6ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbkJ1YmJsZUJhZGdlLnByb3BUeXBlcyA9IHtcbiAgYmFkZ2VUeXBlOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LnZhbHVlcyhCYWRnZVR5cGUpKS5pc1JlcXVpcmVkLFxuICBidWJibGVTaXplOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LnZhbHVlcyhCdWJibGVTaXplKSkuaXNSZXF1aXJlZCxcbiAgYnViYmxlU2hhcGU6IFByb3BUeXBlcy5vbmVPZihPYmplY3QudmFsdWVzKEJ1YmJsZVNoYXBlKSkuaXNSZXF1aXJlZCxcbn07XG5cbmZ1bmN0aW9uIEFzc2Vzc21lbnRCdWJibGVCYWRnZShidWJibGVTaGFwZSkge1xuICBjb25zdCBidWJibGVQb3NpdGlvbmluZyA9XG4gICAgYnViYmxlU2hhcGUgPT09IEJ1YmJsZVNoYXBlLmRpYW1vbmRcbiAgICAgID8gc3R5bGVzLmRpYW1vbmRCdWJibGVQb3NpdGlvblxuICAgICAgOiBzdHlsZXMuYnViYmxlUG9zaXRpb247XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXtidWJibGVQb3NpdGlvbmluZ30+XG4gICAgICA8QXNzZXNzbWVudEJhZGdlIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5Bc3Nlc3NtZW50QnViYmxlQmFkZ2UucHJvcFR5cGVzID0ge1xuICBidWJibGVTaGFwZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoQnViYmxlU2hhcGUpKS5pc1JlcXVpcmVkLFxufTtcblxuZnVuY3Rpb24gS2VlcFdvcmtpbmdCdWJibGVCYWRnZShidWJibGVTaXplKSB7XG4gIGNvbnN0IGlzU21hbGwgPSBidWJibGVTaXplID09PSBCdWJibGVTaXplLmxldHRlcjtcblxuICBjb25zdCBidWJibGVQb3NpdGlvbmluZyA9IGlzU21hbGxcbiAgICA/IHN0eWxlcy5rZWVwV29ya2luZ1NtYWxsQmFkZ2VQb3NpdGlvblxuICAgIDogc3R5bGVzLmtlZXBXb3JraW5nQmFkZ2VQb3NpdGlvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e2J1YmJsZVBvc2l0aW9uaW5nfT5cbiAgICAgIDxLZWVwV29ya2luZ0JhZGdlIGlzU21hbGw9e2lzU21hbGx9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5LZWVwV29ya2luZ0J1YmJsZUJhZGdlLnByb3BUeXBlcyA9IHtcbiAgYnViYmxlU2l6ZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoQnViYmxlU2l6ZSkpLmlzUmVxdWlyZWQsXG59O1xuXG4vLyBLZWVwV29ya2luZ0JhZGdlIGlzIGV4cG9ydGVkIGJlY2F1c2UgaXQgaXMgYWxzbyB1c2VkIGluZGVwZW5kZW50bHkgb2Zcbi8vIHRoZSBwcm9ncmVzcyBidWJibGVcbmV4cG9ydCBmdW5jdGlvbiBLZWVwV29ya2luZ0JhZGdlKHtpc1NtYWxsLCBzdHlsZX0pIHtcbiAgY29uc3QgYmFkZ2VTaXplID0gaXNTbWFsbFxuICAgID8gc3R5bGVzLmtlZXBXb3JraW5nQmFkZ2VTbWFsbFNpemVcbiAgICA6IHN0eWxlcy5rZWVwV29ya2luZ0JhZGdlRnVsbFNpemU7XG5cbiAgcmV0dXJuIDxkaXYgc3R5bGU9e3suLi5zdHlsZXMua2VlcFdvcmtpbmdCYWRnZSwgLi4uYmFkZ2VTaXplLCAuLi5zdHlsZX19IC8+O1xufVxuS2VlcFdvcmtpbmdCYWRnZS5wcm9wVHlwZXMgPSB7XG4gIGlzU21hbGw6IFByb3BUeXBlcy5ib29sLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbi8vIEFzc2Vzc21lbnRCYWRnZSBpcyBleHBvcnRlZCBmb3IgdGVzdHNcbmV4cG9ydCBmdW5jdGlvbiBBc3Nlc3NtZW50QmFkZ2UoKSB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPVwiZmEtc3RhY2tcIiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8Rm9udEF3ZXNvbWVcbiAgICAgICAgaWNvbj1cImNpcmNsZVwiXG4gICAgICAgIGNsYXNzTmFtZT1cImZhLXN0YWNrLTJ4XCJcbiAgICAgICAgc3R5bGU9e3N0eWxlcy5wdXJwbGV9XG4gICAgICAvPlxuICAgICAgPEZvbnRBd2Vzb21lXG4gICAgICAgIGljb249XCJjaXJjbGUtdGhpblwiXG4gICAgICAgIGNsYXNzTmFtZT1cImZhLXN0YWNrLTJ4XCJcbiAgICAgICAgc3R5bGU9e3N0eWxlcy53aGl0ZX1cbiAgICAgIC8+XG4gICAgICA8Rm9udEF3ZXNvbWUgaWNvbj1cImNoZWNrXCIgY2xhc3NOYW1lPVwiZmEtc3RhY2stMXhcIiBzdHlsZT17c3R5bGVzLndoaXRlfSAvPlxuICAgIDwvc3Bhbj5cbiAgKTtcbn1cbkFzc2Vzc21lbnRCYWRnZS5wcm9wVHlwZXMgPSB7XG4gIGhhc1doaXRlQm9yZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZvbnRTaXplOiAxMCxcbiAgfSxcbiAgYnViYmxlUG9zaXRpb246IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IC03LFxuICAgIHJpZ2h0OiAtNyxcbiAgfSxcbiAgZGlhbW9uZEJ1YmJsZVBvc2l0aW9uOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAtMTMsXG4gICAgcmlnaHQ6IC0xNyxcbiAgfSxcbiAgcHVycGxlOiB7XG4gICAgY29sb3I6IGNvbG9yLnB1cnBsZSxcbiAgfSxcbiAgd2hpdGU6IHtcbiAgICBjb2xvcjogY29sb3Iud2hpdGUsXG4gIH0sXG4gIGtlZXBXb3JraW5nU21hbGxCYWRnZVBvc2l0aW9uOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAtMixcbiAgICByaWdodDogLTIsXG4gIH0sXG4gIGtlZXBXb3JraW5nQmFkZ2VQb3NpdGlvbjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgICByaWdodDogLTIsXG4gIH0sXG4gIGtlZXBXb3JraW5nQmFkZ2U6IHtcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IucmVkLFxuICB9LFxuICBrZWVwV29ya2luZ0JhZGdlRnVsbFNpemU6IHtcbiAgICB3aWR0aDogMTAsXG4gICAgaGVpZ2h0OiAxMCxcbiAgfSxcbiAga2VlcFdvcmtpbmdCYWRnZVNtYWxsU2l6ZToge1xuICAgIHdpZHRoOiA3LFxuICAgIGhlaWdodDogNyxcbiAgfSxcbn07XG4iLCIvKipcbiAqIEEgY29tcG9uZW50IHRoYXQgYWRkcyBhIHJpYmJvbiB0byB0aGUgc2lkZSBvZiB5b3VyIHJvdyB0byBpbmRpY2F0ZSB0aGF0IGl0IGlzXG4gKiBhIGZvY3VzIGFyZWEuIE5vdGU6IFRoaXMgaXMgRW5nbGlzaCBvbmx5LlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnO1xuaW1wb3J0IEZvbnRBd2Vzb21lIGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvRm9udEF3ZXNvbWUnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBtYWluOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB9LFxuICBhcnJvd0NvbnRhaW5lcjoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHRvcDogMTAsXG4gIH0sXG4gIGxlZnRBcnJvdzoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJXaWR0aDogJzE3cHggMjBweCAxN3B4JyxcbiAgICBib3JkZXJDb2xvcjogYHRyYW5zcGFyZW50ICR7Y29sb3IuY3lhbn0gdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnRgLFxuICB9LFxuICBmb2N1c0FyZWE6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmN5YW4sXG4gICAgY29sb3I6IGNvbG9yLndoaXRlLFxuICAgIGhlaWdodDogMzQsXG4gICAgbGluZUhlaWdodDogJzM0cHgnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHRvcDogLTMsXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgfSxcbiAgZm9jdXNBcmVhSWNvbjoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIGNvbG9yOiBjb2xvci53aGl0ZSxcbiAgICBsaW5lSGVpZ2h0OiAnMTNweCcsXG4gICAgcGFkZGluZzogNSxcbiAgICBtYXJnaW5MZWZ0OiA1LFxuICAgIG1hcmdpblJpZ2h0OiA1LFxuICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAnOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5kZWZhdWx0X2JsdWUsXG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEZvY3VzQXJlYUluZGljYXRvciA9ICgpID0+IChcbiAgPGRpdiBzdHlsZT17c3R5bGVzLm1haW59PlxuICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5hcnJvd0NvbnRhaW5lcn0+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMubGVmdEFycm93fSAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5mb2N1c0FyZWF9PlxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHR9PkZvY3VzIEFyZWE8L2Rpdj5cbiAgICAgIDxhIGhyZWY9e3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICcvcHJldmlldy1hc3NpZ25tZW50cyd9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuZm9jdXNBcmVhSWNvbn0gZGF0YS10aXAgZGF0YS1mb3I9XCJmb2N1cy1hcmVhXCI+XG4gICAgICAgICAgPEZvbnRBd2Vzb21lIGljb249XCJwZW5jaWxcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgICA8UmVhY3RUb29sdGlwIGlkPVwiZm9jdXMtYXJlYVwiIHJvbGU9XCJ0b29sdGlwXCIgZWZmZWN0PVwic29saWRcIj5cbiAgICAgIENsaWNrIHRvIGNoYW5nZSB5b3VyIGZvY3VzIGFyZWEuXG4gICAgPC9SZWFjdFRvb2x0aXA+XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaXVtKEZvY3VzQXJlYUluZGljYXRvcik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7aXNMZXZlbEFzc2Vzc21lbnR9IGZyb20gJy4vcHJvZ3Jlc3NIZWxwZXJzJztcbmltcG9ydCB7bGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlfSBmcm9tICcuL3Byb2dyZXNzVHlwZXMnO1xuaW1wb3J0IHtcbiAgQmFzaWNCdWJibGUsXG4gIEJ1YmJsZUxpbmssXG4gIEJ1YmJsZVNpemUsXG4gIEJ1YmJsZVRvb2x0aXAsXG4gIGdldEJ1YmJsZUNsYXNzTmFtZXMsXG4gIGdldEJ1YmJsZUNvbnRlbnQsXG4gIGdldEJ1YmJsZVNoYXBlLFxuICBnZXRCdWJibGVVcmwsXG59IGZyb20gJy4vQnViYmxlRmFjdG9yeSc7XG5pbXBvcnQge2xldmVsUHJvZ3Jlc3NTdHlsZX0gZnJvbSAnLi9wcm9ncmVzc1N0eWxlcyc7XG5pbXBvcnQge1Jldmlld1N0YXRlc30gZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9mZWVkYmFjay90eXBlcyc7XG5pbXBvcnQgQnViYmxlQmFkZ2UsIHtCYWRnZVR5cGV9IGZyb20gJy4vQnViYmxlQmFkZ2UnO1xuaW1wb3J0IGkxOG4gZnJvbSAnQGNkby9sb2NhbGUnO1xuXG4vKipcbiAqIEEgUHJvZ3Jlc3NCdWJibGUgcmVwcmVzZW50cyBwcm9ncmVzcyBmb3IgYSBzcGVjaWZpYyBsZXZlbC4gSXQgY2FuIGJlIGEgY2lyY2xlXG4gKiBvciBhIGRpYW1vbmQgKG9yIGEgcGlsbCBpbiB0aGUgY2FzZSBvZiB1bnBsdWdnZWQgbGV2ZWxzKSwgYW5kIGl0IGNhbiBiZSBiaWdcbiAqIG9yIHNtYWxsLiBUaGUgZmlsbCBhbmQgb3V0bGluZSBjaGFuZ2UgZGVwZW5kaW5nIG9uIHRoZSBsZXZlbCBzdGF0dXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzQnViYmxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsZXZlbDogbGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlLmlzUmVxdWlyZWQsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgc21hbGxCdWJibGU6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdGVkU2VjdGlvbklkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHNlbGVjdGVkU3R1ZGVudElkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgIF0pLFxuICAgIGhpZGVUb29sVGlwczogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLy8gV2UgaGF2ZSB0aGUgYWJpbGl0eSB0byBoaWRlIHRoZSBhc3Nlc3NtZW50IGNoZWNrbWFyayBiYWRnZSBiZWNhdXNlXG4gICAgLy8gaXQncyB2aXN1YWxseSBjbHV0dGVyaW5nIGluIHBsYWNlcyBsaWtlIHRoZSB0ZWFjaGVyIHBhbmVsIGFuZCBwcm9ncmVzcyB0YWJsZVxuICAgIGhpZGVBc3Nlc3NtZW50QmFkZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIGxlc3Nvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgaXNDbGlja2FibGUoKSB7XG4gICAgY29uc3Qge2Rpc2FibGVkLCBsZXZlbCwgb25DbGlja30gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAhZGlzYWJsZWQgJiYgKCEhbGV2ZWwudXJsIHx8ICEhb25DbGljayk7XG4gIH1cblxuICBvbkNsaWNrTGV2ZWwgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DbGljaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMubGV2ZWwpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogb25DbGljayB0YWtlcyBwcmlvcml0eSBvdmVyIHVybCwgc28gaWYgd2UgaGF2ZSBvbkNsaWNrLCByZXR1cm4gbnVsbFxuICAgKi9cbiAgZ2V0VXJsKCkge1xuICAgIGNvbnN0IHtvbkNsaWNrLCBsZXZlbCwgc2VsZWN0ZWRTZWN0aW9uSWQsIHNlbGVjdGVkU3R1ZGVudElkfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIG9uQ2xpY2tcbiAgICAgID8gbnVsbFxuICAgICAgOiBnZXRCdWJibGVVcmwobGV2ZWwudXJsLCBzZWxlY3RlZFN0dWRlbnRJZCwgc2VsZWN0ZWRTZWN0aW9uSWQsIHRydWUpO1xuICB9XG5cbiAgcmVuZGVyQnViYmxlQmFkZ2UoYnViYmxlU2hhcGUsIGJ1YmJsZVNpemUpIHtcbiAgICBjb25zdCB7bGV2ZWwsIHNtYWxsQnViYmxlLCBoaWRlQXNzZXNzbWVudEJhZGdlfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBoYXNLZWVwV29ya2luZ0ZlZWRiYWNrID1cbiAgICAgIGxldmVsLnRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlID09PSBSZXZpZXdTdGF0ZXMua2VlcFdvcmtpbmc7XG5cbiAgICBjb25zdCBkaXNwbGF5QXNzZXNzbWVudEJhZGdlID1cbiAgICAgIGlzTGV2ZWxBc3Nlc3NtZW50KGxldmVsKSAmJiAhaGlkZUFzc2Vzc21lbnRCYWRnZTtcblxuICAgIGlmICgoZGlzcGxheUFzc2Vzc21lbnRCYWRnZSB8fCBoYXNLZWVwV29ya2luZ0ZlZWRiYWNrKSAmJiAhc21hbGxCdWJibGUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxCdWJibGVCYWRnZVxuICAgICAgICAgIGJhZGdlVHlwZT17XG4gICAgICAgICAgICBoYXNLZWVwV29ya2luZ0ZlZWRiYWNrXG4gICAgICAgICAgICAgID8gQmFkZ2VUeXBlLmtlZXBXb3JraW5nXG4gICAgICAgICAgICAgIDogQmFkZ2VUeXBlLmFzc2Vzc21lbnRcbiAgICAgICAgICB9XG4gICAgICAgICAgYnViYmxlU2l6ZT17YnViYmxlU2l6ZX1cbiAgICAgICAgICBidWJibGVTaGFwZT17YnViYmxlU2hhcGV9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUJ1YmJsZUVsZW1lbnQoKSB7XG4gICAgY29uc3Qge2xldmVsLCBzbWFsbEJ1YmJsZSwgaGlkZVRvb2xUaXBzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYnViYmxlU2l6ZSA9IHNtYWxsQnViYmxlID8gQnViYmxlU2l6ZS5kb3QgOiBCdWJibGVTaXplLmZ1bGw7XG5cbiAgICBjb25zdCBjb250ZW50ID0gZ2V0QnViYmxlQ29udGVudChcbiAgICAgIGxldmVsLmlzTG9ja2VkLFxuICAgICAgbGV2ZWwuaXNVbnBsdWdnZWQsXG4gICAgICBsZXZlbC5ib251cyxcbiAgICAgIGxldmVsLnBhaXJlZCxcbiAgICAgIGxldmVsLmJ1YmJsZVRleHQgfHwgbGV2ZWwubGV0dGVyIHx8IGxldmVsLmxldmVsTnVtYmVyLFxuICAgICAgYnViYmxlU2l6ZVxuICAgICk7XG5cbiAgICBjb25zdCBidWJibGVTaGFwZSA9IGdldEJ1YmJsZVNoYXBlKFxuICAgICAgLy8gb3ZlcnJpZGUgcGlsbCBzaGFwZSBmb3Igc21hbGwgYnViYmxlc1xuICAgICAgbGV2ZWwuaXNVbnBsdWdnZWQgJiYgIXNtYWxsQnViYmxlLFxuICAgICAgbGV2ZWwuaXNDb25jZXB0TGV2ZWxcbiAgICApO1xuXG4gICAgY29uc3QgYnViYmxlID0gKFxuICAgICAgPEJhc2ljQnViYmxlXG4gICAgICAgIHNoYXBlPXtidWJibGVTaGFwZX1cbiAgICAgICAgc2l6ZT17YnViYmxlU2l6ZX1cbiAgICAgICAgcHJvZ3Jlc3NTdHlsZT17bGV2ZWxQcm9ncmVzc1N0eWxlKGxldmVsLnN0YXR1cywgbGV2ZWwua2luZCl9XG4gICAgICAgIGNsYXNzTmFtZXM9e2dldEJ1YmJsZUNsYXNzTmFtZXModGhpcy5pc0NsaWNrYWJsZSgpKX1cbiAgICAgID5cbiAgICAgICAge2NvbnRlbnR9XG4gICAgICAgIHt0aGlzLnJlbmRlckJ1YmJsZUJhZGdlKGJ1YmJsZVNoYXBlLCBidWJibGVTaXplKX1cbiAgICAgIDwvQmFzaWNCdWJibGU+XG4gICAgKTtcblxuICAgIGlmIChoaWRlVG9vbFRpcHMpIHtcbiAgICAgIHJldHVybiBidWJibGU7XG4gICAgfVxuICAgIHJldHVybiA8QnViYmxlVG9vbHRpcCBsZXZlbD17bGV2ZWx9PntidWJibGV9PC9CdWJibGVUb29sdGlwPjtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBsZXZlbCA9IHRoaXMucHJvcHMubGV2ZWw7XG4gICAgY29uc3QgbGV2ZWxJRCA9IGxldmVsLmJ1YmJsZVRleHQgfHwgbGV2ZWwubGV0dGVyIHx8IGxldmVsLmxldmVsTnVtYmVyO1xuICAgIGNvbnN0IGxlc3Nvbk5hbWUgPSB0aGlzLnByb3BzLmxlc3Nvbk5hbWU7XG4gICAgbGV0IGRlc2NyaXB0aW9uID0gaTE4bi5wcm9ncmVzc0J1YmJsZURlc2NyaXB0aW9uKHtcbiAgICAgIGxldmVsSUQ6IGxldmVsSUQsXG4gICAgfSk7XG4gICAgaWYgKGxlc3Nvbk5hbWUpIHtcbiAgICAgIGRlc2NyaXB0aW9uID0gaTE4bi5wcm9ncmVzc0J1YmJsZURlc2NyaXB0aW9uV2l0aExlc3Nvbih7XG4gICAgICAgIGxldmVsSUQ6IGxldmVsSUQsXG4gICAgICAgIGxlc3Nvbk5hbWU6IGxlc3Nvbk5hbWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNDbGlja2FibGUoKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEJ1YmJsZUxpbmtcbiAgICAgICAgICB1cmw9e3RoaXMuZ2V0VXJsKCl9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrTGV2ZWx9XG4gICAgICAgICAgYTExeV9kZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5jcmVhdGVCdWJibGVFbGVtZW50KCl9XG4gICAgICAgIDwvQnViYmxlTGluaz5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUJ1YmJsZUVsZW1lbnQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQW4gb3JkZXJlZCBzZXQgb2YgcHJvZ3Jlc3MgYnViYmxlcy5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG5pbXBvcnQgUHJvZ3Jlc3NCdWJibGUgZnJvbSAnLi9Qcm9ncmVzc0J1YmJsZSc7XG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuaW1wb3J0IHtsZXZlbFdpdGhQcm9ncmVzc1R5cGV9IGZyb20gJy4vcHJvZ3Jlc3NUeXBlcyc7XG5pbXBvcnQge0RPVF9TSVpFLCBESUFNT05EX0RPVF9TSVpFfSBmcm9tICcuL3Byb2dyZXNzU3R5bGVzJztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG4vLyBEZXByZWNhdGVkIGluIGZhdm9yIG9mIFByb2dyZXNzVGFibGVEZXRhaWxDZWxsXG4vLyBjb21wb25lbnQgd2lsbCBiZSByZW1vdmVkIGFzIHBhcnQgb2YgaHR0cHM6Ly9jb2RlZG90b3JnLmF0bGFzc2lhbi5uZXQvYnJvd3NlL0xQLTE2MDZcbmNsYXNzIFByb2dyZXNzQnViYmxlU2V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsZXZlbHM6IFByb3BUeXBlcy5hcnJheU9mKGxldmVsV2l0aFByb2dyZXNzVHlwZSkuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZWxlY3RlZFNlY3Rpb25JZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzZWxlY3RlZFN0dWRlbnRJZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICBdKSxcbiAgICBoaWRlVG9vbFRpcHM6IFByb3BUeXBlcy5ib29sLFxuICAgIGxlc3NvbkV4dHJhc0VuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dTdWJsZXZlbHM6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uQnViYmxlQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxlc3Nvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLy8gUmVkdXhcbiAgICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgcmVuZGVyQnViYmxlID0gKGxldmVsLCBpbmRleCwgaXNTdWJsZXZlbCkgPT4ge1xuICAgIGNvbnN0IHtsZXZlbHMsIHNlbGVjdGVkU2VjdGlvbklkLCBzZWxlY3RlZFN0dWRlbnRJZCwgaXNSdGx9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIEFkanVzdCBiYWNrZ3JvdW5kIHN0eWxlcyBpZiBsb2NhbGUgaXMgUlRMXG4gICAgY29uc3QgYmFja2dyb3VuZEZpcnN0U3R5bGUgPSBpc1J0bFxuICAgICAgPyBzdHlsZXMuYmFja2dyb3VuZExhc3RcbiAgICAgIDogc3R5bGVzLmJhY2tncm91bmRGaXJzdDtcbiAgICBjb25zdCBiYWNrZ3JvdW5kTGFzdFN0eWxlID0gaXNSdGxcbiAgICAgID8gc3R5bGVzLmJhY2tncm91bmRGaXJzdFxuICAgICAgOiBzdHlsZXMuYmFja2dyb3VuZExhc3Q7XG5cbiAgICBjb25zdCBiYWNrZ3JvdW5kU3R5bGVQcm9wID0ge1xuICAgICAgLi4uc3R5bGVzLmJhY2tncm91bmQsXG4gICAgICAuLi4obGV2ZWwuaXNDb25jZXB0TGV2ZWwgJiYgc3R5bGVzLmJhY2tncm91bmREaWFtb25kKSxcbiAgICAgIC4uLihpc1N1YmxldmVsICYmIHN0eWxlcy5iYWNrZ3JvdW5kU3VibGV2ZWwpLFxuICAgICAgLi4uKGxldmVsLmlzVW5wbHVnZ2VkICYmIHN0eWxlcy5iYWNrZ3JvdW5kUGlsbCksXG4gICAgICAuLi4oIWlzU3VibGV2ZWwgJiYgaW5kZXggPT09IDAgJiYgYmFja2dyb3VuZEZpcnN0U3R5bGUpLFxuICAgICAgLi4uKCFpc1N1YmxldmVsICYmXG4gICAgICAgICFsZXZlbC5zdWJsZXZlbHMgJiZcbiAgICAgICAgaW5kZXggPT09IGxldmVscy5sZW5ndGggLSAxICYmXG4gICAgICAgIGJhY2tncm91bmRMYXN0U3R5bGUpLFxuICAgIH07XG5cbiAgICBjb25zdCBjb250YWluZXJTdHlsZVByb3AgPSB7XG4gICAgICAuLi5zdHlsZXMuY29udGFpbmVyLFxuICAgICAgLi4uKGxldmVsLmlzVW5wbHVnZ2VkICYmIHN0eWxlcy5waWxsQ29udGFpbmVyKSxcbiAgICAgIC4uLihsZXZlbC5pc0NvbmNlcHRMZXZlbCAmJiBzdHlsZXMuZGlhbW9uZENvbnRhaW5lciksXG4gICAgICAuLi4oaXNTdWJsZXZlbCAmJiBzdHlsZXMuY29udGFpbmVyU3VibGV2ZWwpLFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLndpdGhCYWNrZ3JvdW5kfSBrZXk9e2luZGV4fT5cbiAgICAgICAgPGRpdiBzdHlsZT17YmFja2dyb3VuZFN0eWxlUHJvcH0gLz5cbiAgICAgICAgPGRpdiBzdHlsZT17Y29udGFpbmVyU3R5bGVQcm9wfT5cbiAgICAgICAgICA8UHJvZ3Jlc3NCdWJibGVcbiAgICAgICAgICAgIGxldmVsPXtsZXZlbH1cbiAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfVxuICAgICAgICAgICAgc21hbGxCdWJibGU9e2lzU3VibGV2ZWx9XG4gICAgICAgICAgICBzZWxlY3RlZFNlY3Rpb25JZD17c2VsZWN0ZWRTZWN0aW9uSWR9XG4gICAgICAgICAgICBzZWxlY3RlZFN0dWRlbnRJZD17c2VsZWN0ZWRTdHVkZW50SWR9XG4gICAgICAgICAgICBoaWRlVG9vbFRpcHM9e3RoaXMucHJvcHMuaGlkZVRvb2xUaXBzfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkJ1YmJsZUNsaWNrfVxuICAgICAgICAgICAgbGVzc29uTmFtZT17dGhpcy5wcm9wcy5sZXNzb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xldmVscywgc3R5bGUsIHNob3dTdWJsZXZlbHN9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17ey4uLnN0eWxlcy5tYWluLCAuLi5zdHlsZX19PlxuICAgICAgICB7bGV2ZWxzLm1hcCgobGV2ZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJCdWJibGUobGV2ZWwsIGluZGV4LCBmYWxzZSl9XG4gICAgICAgICAgICAgIHtzaG93U3VibGV2ZWxzICYmXG4gICAgICAgICAgICAgICAgbGV2ZWwuc3VibGV2ZWxzICYmXG4gICAgICAgICAgICAgICAgbGV2ZWwuc3VibGV2ZWxzLm1hcCgoc3VibGV2ZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJCdWJibGUoc3VibGV2ZWwsIGluZGV4LCB0cnVlKX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBtYWluOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIH0sXG4gIHdpdGhCYWNrZ3JvdW5kOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIH0sXG4gIGJhY2tncm91bmQ6IHtcbiAgICBoZWlnaHQ6IDEwLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IubGlnaHRlcl9ncmF5LFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgLy8gZG90IHNpemUsIHBsdXMgYm9yZGVycywgcGx1cyBtYXJnaW4sIG1pbnVzIG91ciBoZWlnaHQgb2YgXCJiYWNrZ3JvdW5kXCJcbiAgICB0b3A6IChET1RfU0laRSArIDQgKyA2IC0gMTApIC8gMixcbiAgfSxcbiAgYmFja2dyb3VuZERpYW1vbmQ6IHtcbiAgICB0b3A6IChESUFNT05EX0RPVF9TSVpFICsgNCArIDEyIC0gMTApIC8gMixcbiAgfSxcbiAgYmFja2dyb3VuZFBpbGw6IHtcbiAgICAvLyBwaWxsIGhhcyBoZWlnaHQgb2YgMTgsIGJvcmRlciBvZiAyLCBwYWRkaW5nIG9mIDYsIG1hcmdpbiBvZiAzXG4gICAgdG9wOiAoMTggKyA0ICsgMTIgKyA2IC0gMTApIC8gMixcbiAgfSxcbiAgYmFja2dyb3VuZFN1YmxldmVsOiB7XG4gICAgdG9wOiA5LFxuICB9LFxuICBiYWNrZ3JvdW5kRmlyc3Q6IHtcbiAgICBsZWZ0OiAxNSxcbiAgfSxcbiAgYmFja2dyb3VuZExhc3Q6IHtcbiAgICByaWdodDogMTUsXG4gIH0sXG4gIGNvbnRhaW5lcjoge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB9LFxuICBjb250YWluZXJTdWJsZXZlbDoge1xuICAgIHRvcDogNSxcbiAgfSxcbiAgZGlhbW9uZENvbnRhaW5lcjoge1xuICAgIC8vIEhlaWdodCBuZWVkZWQgb25seSBieSBJRSB0byBnZXQgZGlhbW9uZHMgdG8gbGluZSB1cCBwcm9wZXJseVxuICAgIGhlaWdodDogMzYsXG4gIH0sXG4gIHBpbGxDb250YWluZXI6IHtcbiAgICBtYXJnaW5SaWdodDogMixcbiAgICAvLyBIZWlnaHQgbmVlZGVkIG9ubHkgYnkgSUUgdG8gZ2V0IHBpbGwgdG8gbGluZSB1cCBwcm9wZXJseVxuICAgIGhlaWdodDogMzcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVW5jb25uZWN0ZWRQcm9ncmVzc0J1YmJsZVNldCA9IFByb2dyZXNzQnViYmxlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHN0YXRlID0+ICh7XG4gIGlzUnRsOiBzdGF0ZS5pc1J0bCxcbn0pKShSYWRpdW0oUHJvZ3Jlc3NCdWJibGVTZXQpKTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcbmltcG9ydCBSZWFjdFRvb2x0aXAgZnJvbSAncmVhY3QtdG9vbHRpcCc7XG5pbXBvcnQgUHJvZ3Jlc3NCdWJibGVTZXQgZnJvbSAnLi9Qcm9ncmVzc0J1YmJsZVNldCc7XG5pbXBvcnQgRm9udEF3ZXNvbWUgZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9Gb250QXdlc29tZSc7XG5pbXBvcnQge2xldmVsV2l0aFByb2dyZXNzVHlwZSwgbGVzc29uVHlwZX0gZnJvbSAnLi9wcm9ncmVzc1R5cGVzJztcbmltcG9ydCB7Vmlld1R5cGV9IGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby92aWV3QXNSZWR1eCc7XG5pbXBvcnQgRm9jdXNBcmVhSW5kaWNhdG9yIGZyb20gJy4vRm9jdXNBcmVhSW5kaWNhdG9yJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgaTE4biBmcm9tICdAY2RvL2xvY2FsZSc7XG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7XG4gIGxlc3NvbklzTG9ja2VkRm9yQWxsU3R1ZGVudHMsXG4gIGxlc3NvbklzTG9ja2VkRm9yVXNlcixcbiAgbGVzc29uSXNWaXNpYmxlLFxufSBmcm9tICcuL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQgZm9udENvbnN0YW50cyBmcm9tICdAY2RvL2FwcHMvZm9udENvbnN0YW50cyc7XG5cbmZ1bmN0aW9uIFN1bW1hcnlQcm9ncmVzc1Jvdyh7XG4gIGRhcmssXG4gIGxlc3NvbixcbiAgbGV2ZWxzLFxuICBsZXNzb25Jc0hpZGRlbkZvclN0dWRlbnRzLFxuICBsZXNzb25Jc0xvY2tlZEZvclVzZXIsXG4gIGxlc3NvbklzTG9ja2VkRm9yQWxsU3R1ZGVudHMsXG4gIHZpZXdBcyxcbn0pIHtcbiAgLy8gVGhlIHBhcmVudCBjb21wb25lbnQgZmlsdGVycyBvdXQgaGlkZGVuIFN1bW1hcnlQcm9ncmVzc1Jvd3MgZnJvbSB0aGUgc3R1ZGVudCB2aWV3LFxuICAvLyB0aGlzIGNoZWNrIGlzIGp1c3QgdG8gZW5zdXJlIGl0IHdvbid0IGJlIHJlbmRlcmVkIGlmIGl0IHNob3VsZCBiZSBoaWRkZW4gZm9yIHN0dWRlbnRzXG4gIGlmIChsZXNzb25Jc0hpZGRlbkZvclN0dWRlbnRzICYmIHZpZXdBcyA9PT0gVmlld1R5cGUuUGFydGljaXBhbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGlzTG9ja2VkRm9yVXNlciA9IGxlc3NvbklzTG9ja2VkRm9yVXNlcihsZXNzb24sIGxldmVscywgdmlld0FzKTtcbiAgY29uc3QgaXNMb2NrZWRGb3JTZWN0aW9uID0gbGVzc29uSXNMb2NrZWRGb3JBbGxTdHVkZW50cyhsZXNzb24uaWQpO1xuICBjb25zdCBzaG93QXNMb2NrZWQgPSBpc0xvY2tlZEZvclVzZXIgfHwgaXNMb2NrZWRGb3JTZWN0aW9uO1xuXG4gIGxldCBsZXNzb25UaXRsZSA9IGxlc3Nvbi5uYW1lO1xuICBpZiAobGVzc29uLmxlc3Nvbk51bWJlcikge1xuICAgIGxlc3NvblRpdGxlID0gbGVzc29uLmxlc3Nvbk51bWJlciArICcuICcgKyBsZXNzb25UaXRsZTtcbiAgfVxuXG4gIGNvbnN0IGRpc3BsYXlEYXNoZWRCb3JkZXIgPSBsZXNzb25Jc0hpZGRlbkZvclN0dWRlbnRzIHx8IHNob3dBc0xvY2tlZDtcblxuICBjb25zdCB0aXRsZVRvb2x0aXBJZCA9IF8udW5pcXVlSWQoKTtcbiAgY29uc3QgbG9ja2VkVG9vbHRpcElkID0gXy51bmlxdWVJZCgpO1xuXG4gIHJldHVybiAoXG4gICAgPHRyXG4gICAgICBpZD17YHN1bW1hcnktcHJvZ3Jlc3Mtcm93LSR7bGVzc29uLmxlc3Nvbk51bWJlcn1gfVxuICAgICAgY2xhc3NOYW1lPVwidWl0ZXN0LXN1bW1hcnktcHJvZ3Jlc3Mtcm93XCJcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLihkYXJrID8gc3R5bGVzLmRhcmtSb3cgOiBzdHlsZXMubGlnaHRSb3cpLFxuICAgICAgICAuLi4oZGlzcGxheURhc2hlZEJvcmRlciAmJiBzdHlsZXMuZGFzaGVkQm9yZGVyKSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPHRkXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgLi4uc3R5bGVzLmNvbDEsXG4gICAgICAgICAgLi4uKGlzTG9ja2VkRm9yVXNlciAmJiBzdHlsZXMuZmFkZWRDb2wpLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29sVGV4dH0+XG4gICAgICAgICAge2xlc3NvbklzSGlkZGVuRm9yU3R1ZGVudHMgJiYgKFxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lIGljb249XCJleWUtc2xhc2hcIiBzdHlsZT17c3R5bGVzLmljb259IC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7bGVzc29uLmxvY2thYmxlICYmIChcbiAgICAgICAgICAgIDxzcGFuIGRhdGEtdGlwIGRhdGEtZm9yPXtsb2NrZWRUb29sdGlwSWR9PlxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVcbiAgICAgICAgICAgICAgICBpY29uPXtzaG93QXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJ31cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmljb24sXG4gICAgICAgICAgICAgICAgICAuLi4oIXNob3dBc0xvY2tlZCAmJiBzdHlsZXMudW5sb2NrZWRJY29uKSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7IXNob3dBc0xvY2tlZCAmJiB2aWV3QXMgPT09IFZpZXdUeXBlLkluc3RydWN0b3IgJiYgKFxuICAgICAgICAgICAgICAgIDxSZWFjdFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgIGlkPXtsb2NrZWRUb29sdGlwSWR9XG4gICAgICAgICAgICAgICAgICByb2xlPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgICB3cmFwcGVyPVwic3BhblwiXG4gICAgICAgICAgICAgICAgICBlZmZlY3Q9XCJzb2xpZFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2kxOG4ubG9ja0Fzc2Vzc21lbnRMb25nKCl9XG4gICAgICAgICAgICAgICAgPC9SZWFjdFRvb2x0aXA+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICAgIGRhdGEtZm9yPXt0aXRsZVRvb2x0aXBJZH1cbiAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9e3RpdGxlVG9vbHRpcElkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb25UaXRsZX1cbiAgICAgICAgICAgIDxSZWFjdFRvb2x0aXBcbiAgICAgICAgICAgICAgaWQ9e3RpdGxlVG9vbHRpcElkfVxuICAgICAgICAgICAgICByb2xlPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgIHdyYXBwZXI9XCJzcGFuXCJcbiAgICAgICAgICAgICAgZWZmZWN0PVwic29saWRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7bGVzc29uLm5hbWV9XG4gICAgICAgICAgICA8L1JlYWN0VG9vbHRpcD5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZFxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIC4uLnN0eWxlcy5jb2wyLFxuICAgICAgICAgIC4uLihpc0xvY2tlZEZvclVzZXIgJiYgc3R5bGVzLmZhZGVkQ29sKSxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge2xldmVscy5sZW5ndGggPT09IDAgPyAoXG4gICAgICAgICAgaTE4bi5sZXNzb25Db250YWluc05vTGV2ZWxzKClcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UHJvZ3Jlc3NCdWJibGVTZXRcbiAgICAgICAgICAgIGxldmVscz17bGV2ZWxzfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9ja2VkRm9yVXNlcn1cbiAgICAgICAgICAgIHN0eWxlPXtsZXNzb24uaXNGb2N1c0FyZWEgPyBzdHlsZXMuZm9jdXNBcmVhTWFyZ2luIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgbGVzc29uTmFtZT17bGVzc29uLm5hbWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge2xlc3Nvbi5pc0ZvY3VzQXJlYSAmJiA8Rm9jdXNBcmVhSW5kaWNhdG9yIC8+fVxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufVxuXG5TdW1tYXJ5UHJvZ3Jlc3NSb3cucHJvcFR5cGVzID0ge1xuICBkYXJrOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBsZXNzb246IGxlc3NvblR5cGUuaXNSZXF1aXJlZCxcbiAgbGV2ZWxzOiBQcm9wVHlwZXMuYXJyYXlPZihsZXZlbFdpdGhQcm9ncmVzc1R5cGUpLmlzUmVxdWlyZWQsXG5cbiAgLy8gZnJvbSByZWR1eFxuICB2aWV3QXM6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhWaWV3VHlwZSkpLFxuICBsZXNzb25Jc0hpZGRlbkZvclN0dWRlbnRzOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBsZXNzb25Jc0xvY2tlZEZvclVzZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGxlc3NvbklzTG9ja2VkRm9yQWxsU3R1ZGVudHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVzID0ge1xuICBsaWdodFJvdzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IudGFibGVfbGlnaHRfcm93LFxuICB9LFxuICBkYXJrUm93OiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci50YWJsZV9kYXJrX3JvdyxcbiAgfSxcbiAgZGFzaGVkQm9yZGVyOiB7XG4gICAgYm9yZGVyU3R5bGU6ICdkYXNoZWQnLFxuICAgIGJvcmRlcldpZHRoOiAyLFxuICB9LFxuICBjb2wxOiB7XG4gICAgd2lkdGg6IDIwMCxcbiAgICBtaW5XaWR0aDogMjAwLFxuICAgIG1heFdpZHRoOiAyMDAsXG4gICAgbGluZUhlaWdodDogJzUycHgnLFxuICAgIGNvbG9yOiBjb2xvci5jaGFyY29hbCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAtMC4xMSxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICBwYWRkaW5nTGVmdDogMjAsXG4gICAgcGFkZGluZ1JpZ2h0OiAyMCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiAxLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IGNvbG9yLmJvcmRlcl9saWdodF9ncmF5LFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6ICdzb2xpZCcsXG4gIH0sXG4gIGNvbDI6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHBhZGRpbmdMZWZ0OiAyMCxcbiAgICBwYWRkaW5nUmlnaHQ6IDIwLFxuICB9LFxuICAvLyBXaGVuIHdlIHNldCBvdXIgb3BhY2l0eSBvbiB0aGUgcm93IGVsZW1lbnQgaW5zdGVhZCBvZiBvbiBpbmRpdmlkdWFsIHRkcyxcbiAgLy8gdGhlcmUgYXJlIHdlaXJkIGludGVyYWN0aW9ucyB3aXRoIG91ciB0b29sdGlwcyBpbiBDaHJvbWUsIGFuZCBib3JkZXJzIGVuZFxuICAvLyB1cCBkaXNhcHBlYXJpbmcuXG4gIGZhZGVkQ29sOiB7XG4gICAgb3BhY2l0eTogMC42LFxuICB9LFxuICBjb2xUZXh0OiB7XG4gICAgY29sb3I6IGNvbG9yLmNoYXJjb2FsLFxuICAgIC4uLmZvbnRDb25zdGFudHNbJ21haW4tZm9udC1zZW1pLWJvbGQnXSxcbiAgICBmb250U2l6ZTogMTIsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgfSxcbiAgaWNvbjoge1xuICAgIG1hcmdpblJpZ2h0OiA1LFxuICAgIGZvbnRTaXplOiAxMixcbiAgICBjb2xvcjogY29sb3IuY3lhbixcbiAgfSxcbiAgdW5sb2NrZWRJY29uOiB7XG4gICAgY29sb3I6IGNvbG9yLm9yYW5nZSxcbiAgfSxcbiAgZm9jdXNBcmVhTWFyZ2luOiB7XG4gICAgLy8gT3VyIGZvY3VzIGFyZWEgaW5kaWNhdG9yIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC4gQWRkIGEgbWFyZ2luIHdoZW4gaXQnc1xuICAgIC8vIHRoZXJlIHNvIHRoYXQgaXQgd29udCBvdmVybGFwIGRvdHMuXG4gICAgbWFyZ2luUmlnaHQ6IDEzMCxcbiAgfSxcbiAgb3BhcXVlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFN1bW1hcnlQcm9ncmVzc1JvdyA9IFN1bW1hcnlQcm9ncmVzc1JvdztcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKHN0YXRlLCBvd25Qcm9wcykgPT4gKHtcbiAgdmlld0FzOiBzdGF0ZS52aWV3QXMsXG4gIGxlc3NvbklzSGlkZGVuRm9yU3R1ZGVudHM6ICFsZXNzb25Jc1Zpc2libGUoXG4gICAgb3duUHJvcHMubGVzc29uLFxuICAgIHN0YXRlLFxuICAgIFZpZXdUeXBlLlBhcnRpY2lwYW50XG4gICksXG4gIGxlc3NvbklzTG9ja2VkRm9yVXNlcjogKGxlc3NvbiwgbGV2ZWxzLCB2aWV3QXMpID0+XG4gICAgbGVzc29uSXNMb2NrZWRGb3JVc2VyKGxlc3NvbiwgbGV2ZWxzLCBzdGF0ZSwgdmlld0FzKSxcbiAgbGVzc29uSXNMb2NrZWRGb3JBbGxTdHVkZW50czogbGVzc29uSWQgPT5cbiAgICBsZXNzb25Jc0xvY2tlZEZvckFsbFN0dWRlbnRzKGxlc3NvbklkLCBzdGF0ZSksXG59KSkoU3VtbWFyeVByb2dyZXNzUm93KTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcbmltcG9ydCB7Z3JvdXBlZExlc3NvbnNUeXBlfSBmcm9tICcuL3Byb2dyZXNzVHlwZXMnO1xuaW1wb3J0IFN1bW1hcnlQcm9ncmVzc1Jvdywge3N0eWxlcyBhcyByb3dTdHlsZXN9IGZyb20gJy4vU3VtbWFyeVByb2dyZXNzUm93JztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtsZXNzb25Jc1Zpc2libGV9IGZyb20gJy4vcHJvZ3Jlc3NIZWxwZXJzJztcblxuY2xhc3MgU3VtbWFyeVByb2dyZXNzVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGdyb3VwZWRMZXNzb246IGdyb3VwZWRMZXNzb25zVHlwZS5pc1JlcXVpcmVkLFxuICAgIG1pbmltYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLy8gcmVkdXggcHJvdmlkZWRcbiAgICBsZXNzb25Jc1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHttaW5pbWFsfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2xlc3NvbnMsIGxldmVsc0J5TGVzc29ufSA9IHRoaXMucHJvcHMuZ3JvdXBlZExlc3NvbjtcblxuICAgIGlmIChsZXNzb25zLmxlbmd0aCAhPT0gbGV2ZWxzQnlMZXNzb24ubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29uc2lzdGVudCBudW1iZXIgb2YgbGVzc29ucycpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwidWl0ZXN0LXN1bW1hcnktcHJvZ3Jlc3MtdGFibGVcIiBzdHlsZT17c3R5bGVzLnRhYmxlfT5cbiAgICAgICAgeyFtaW5pbWFsICYmIChcbiAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICA8dHIgc3R5bGU9e3N0eWxlcy5oZWFkZXJSb3d9PlxuICAgICAgICAgICAgICA8dGQgc3R5bGU9e3Jvd1N0eWxlcy5jb2wxfT5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtyb3dTdHlsZXMuY29sVGV4dH0+e2kxOG4ubGVzc29uTmFtZSgpfTwvZGl2PlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8dGQgc3R5bGU9e3Jvd1N0eWxlcy5jb2wyfT5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtyb3dTdHlsZXMuY29sVGV4dH0+e2kxOG4ucHJvZ3Jlc3MoKX08L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgKX1cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8qRmlsdGVyIG91ciBsZXNzb25zIHRvIHRob3NlIHRoYXQgd2lsbCBiZSByZW5kZXJlZCwgYW5kIHRoZW4gbWFrZVxuICAgICAgICAgICAgZXZlcnkgb3RoZXIgKHJlbWFpbmluZykgb25lIGRhcmsgKi9cbiAgICAgICAgICAgIGxlc3NvbnNcbiAgICAgICAgICAgICAgLm1hcCgobGVzc29uLCBpbmRleCkgPT4gKHt1bmZpbHRlcmVkSW5kZXg6IGluZGV4LCBsZXNzb259KSlcbiAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IHRoaXMucHJvcHMubGVzc29uSXNWaXNpYmxlKGl0ZW0ubGVzc29uKSlcbiAgICAgICAgICAgICAgLm1hcCgoaXRlbSwgZmlsdGVyZWRJbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdW1tYXJ5UHJvZ3Jlc3NSb3dcbiAgICAgICAgICAgICAgICAgIGtleT17aXRlbS51bmZpbHRlcmVkSW5kZXh9XG4gICAgICAgICAgICAgICAgICBsZXZlbHM9e2xldmVsc0J5TGVzc29uW2l0ZW0udW5maWx0ZXJlZEluZGV4XX1cbiAgICAgICAgICAgICAgICAgIGxlc3Nvbj17aXRlbS5sZXNzb259XG4gICAgICAgICAgICAgICAgICBkYXJrPXtmaWx0ZXJlZEluZGV4ICUgMiA9PT0gMX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApKVxuICAgICAgICAgIH1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHRhYmxlOiB7XG4gICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyTGVmdENvbG9yOiBjb2xvci5ib3JkZXJfZ3JheSxcbiAgICBib3JkZXJUb3BDb2xvcjogY29sb3IuYm9yZGVyX2dyYXksXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IGNvbG9yLmJvcmRlcl9saWdodF9ncmF5LFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IGNvbG9yLmJvcmRlcl9saWdodF9ncmF5LFxuICB9LFxuICBoZWFkZXJSb3c6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLnRhYmxlX2hlYWRlcixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFN1bW1hcnlQcm9ncmVzc1RhYmxlID0gU3VtbWFyeVByb2dyZXNzVGFibGU7XG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHN0YXRlID0+ICh7XG4gIGxlc3NvbklzVmlzaWJsZTogbGVzc29uID0+IGxlc3NvbklzVmlzaWJsZShsZXNzb24sIHN0YXRlLCBzdGF0ZS52aWV3QXMpLFxufSkpKFN1bW1hcnlQcm9ncmVzc1RhYmxlKTtcbiIsIi8qKlxuICogVGhpcyBpcyBhIHNldCBvZiBoZWxwZXJzIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSB0ZXN0IGxldmVsL2xlc3NvbiBjb250ZW50LlxuICogSXQgbGl2ZXMgaW4gc3JjIGJlY2F1c2UgaXQncyB1c2VkIGJ5IGJvdGggc3RvcnkgZmlsZXMgYW5kIHRlc3QgZmlsZXMsIGFuZCBpdFxuICogYmV0dGVyIHRvIGhhdmUgdGVzdCByZXF1aXJlIGhlbHBlcnMgZnJvbSBzcmMsIHRoZW4gc3RvcnkgZmlsZXMgaW4gc3JjIHJlYWNoXG4gKiBpbnRvIHRlc3QuXG4gKi9cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7TGV2ZWxTdGF0dXN9IGZyb20gJ0BjZG8vZ2VuZXJhdGVkLXNjcmlwdHMvc2hhcmVkQ29uc3RhbnRzJztcbmltcG9ydCB7XG4gIGxldmVsUHJvZ3Jlc3NGcm9tU2VydmVyLFxuICBsZXNzb25Qcm9ncmVzc0ZvclNlY3Rpb24sXG59IGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvcHJvZ3Jlc3NIZWxwZXJzJztcbmltcG9ydCB7Y3JlYXRlU3RvcmV9IGZyb20gJ3JlZHV4JztcbmltcG9ydCBJbW11dGFibGUgZnJvbSAnaW1tdXRhYmxlJztcblxuZXhwb3J0IGNvbnN0IGZha2VMZXNzb24gPSAoXG4gIG5hbWUsXG4gIGlkLFxuICBsb2NrYWJsZSA9IGZhbHNlLFxuICBsZXNzb25OdW1iZXIgPSB1bmRlZmluZWQsXG4gIGxlc3NvblN0YXJ0VXJsID0gJ2NvZGUub3JnJyxcbiAgbGV2ZWxzID0gW11cbikgPT4gKHtcbiAgbmFtZSxcbiAgaWQsXG4gIGxvY2thYmxlLFxuICBsZXNzb25OdW1iZXIsXG4gIGxlc3NvblN0YXJ0VXJsLFxuICBpc0ZvY3VzQXJlYTogZmFsc2UsXG4gIGxldmVscyxcbn0pO1xuXG5leHBvcnQgY29uc3QgZmFrZUxldmVsID0gKG92ZXJyaWRlcyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxldmVsTnVtYmVyID0gb3ZlcnJpZGVzLmxldmVsTnVtYmVyIHx8IDE7XG4gIGNvbnN0IGlkID0gKG92ZXJyaWRlcy5pZCB8fCBsZXZlbE51bWJlcikudG9TdHJpbmcoKTtcbiAgZGVsZXRlIG92ZXJyaWRlcy5pZDtcbiAgcmV0dXJuIHtcbiAgICBpZDogaWQsXG4gICAgc3RhdHVzOiBMZXZlbFN0YXR1cy5ub3RfdHJpZWQsXG4gICAgaXNMb2NrZWQ6IGZhbHNlLFxuICAgIGxldmVsTnVtYmVyOiBsZXZlbE51bWJlcixcbiAgICBidWJibGVUZXh0OiBsZXZlbE51bWJlci50b1N0cmluZygpLFxuICAgIHVybDogYC9sZXZlbCR7bGV2ZWxOdW1iZXJ9YCxcbiAgICBuYW1lOiBgTGV2ZWwgJHtsZXZlbE51bWJlcn1gLFxuICAgIGlzVW5wbHVnZ2VkOiBmYWxzZSxcbiAgICAuLi5vdmVycmlkZXMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZUxldmVsV2l0aFN1YkxldmVscyA9IChcbiAgbnVtU3VibGV2ZWxzLFxuICBzdGFydExldmVsID0gMSxcbiAgb3ZlcnJpZGVzID0ge31cbikgPT4ge1xuICBjb25zdCBzdWJsZXZlbHMgPSBfLnJhbmdlKG51bVN1YmxldmVscykubWFwKGluZGV4ID0+IHtcbiAgICBjb25zdCBvdmVycmlkZURhdGEgPSB7XG4gICAgICBpZDogaW5kZXggKyBzdGFydExldmVsLFxuICAgICAgbGV2ZWxOdW1iZXI6IGluZGV4ICsgc3RhcnRMZXZlbCxcbiAgICB9O1xuICAgIHJldHVybiBmYWtlTGV2ZWwob3ZlcnJpZGVEYXRhKTtcbiAgfSk7XG4gIHJldHVybiBmYWtlTGV2ZWwoe1xuICAgIHN1YmxldmVsczogc3VibGV2ZWxzLFxuICAgIGlkOiBzdGFydExldmVsICsgbnVtU3VibGV2ZWxzLFxuICAgIGxldmVsTnVtYmVyOiBzdGFydExldmVsICsgbnVtU3VibGV2ZWxzLFxuICAgIC4uLm92ZXJyaWRlcyxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZUxldmVscyA9IChudW1MZXZlbHMsIHtzdGFydExldmVsID0gMSwgbmFtZWQgPSB0cnVlfSA9IHt9KSA9PlxuICBfLnJhbmdlKG51bUxldmVscykubWFwKGluZGV4ID0+IHtcbiAgICBsZXQgb3ZlcnJpZGVEYXRhID0ge1xuICAgICAgaWQ6IGluZGV4ICsgc3RhcnRMZXZlbCxcbiAgICAgIGxldmVsTnVtYmVyOiBpbmRleCArIHN0YXJ0TGV2ZWwsXG4gICAgfTtcbiAgICBpZiAoIW5hbWVkKSB7XG4gICAgICBvdmVycmlkZURhdGFbJ25hbWUnXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGZha2VMZXZlbChvdmVycmlkZURhdGEpO1xuICB9KTtcblxuZXhwb3J0IGNvbnN0IGZha2VQcm9ncmVzc0ZvckxldmVscyA9IChcbiAgbGV2ZWxzLFxuICBzdGF0dXMgPSBMZXZlbFN0YXR1cy5ub3RfdHJpZWQsXG4gIHNlcnZlclByb2dyZXNzT3ZlcnJpZGVzID0ge31cbikgPT4ge1xuICBjb25zdCBwcm9ncmVzcyA9IHt9O1xuICBsZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgcHJvZ3Jlc3NbbGV2ZWwuaWRdID0gbGV2ZWxQcm9ncmVzc0Zyb21TZXJ2ZXIoe1xuICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAuLi5zZXJ2ZXJQcm9ncmVzc092ZXJyaWRlcyxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBwcm9ncmVzcztcbn07XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgc2hlbGwgb2YgYSByZWR1eCBzdG9yZSB3aXRoIHRoZSBwcm92aWRlZCBsZXNzb25JZCBiZWluZyBoaWRkZW5cbiAqIEBwYXJhbSB7Vmlld1R5cGV9IHZpZXdBc1xuICogQHBhcmFtIHtudW1iZXI/fSBsZXNzb25JZCAtIExlc3NvbiB0byBoaWRlIChvciBudWxsIGlmIG5vbmUpXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24gPSAodmlld0FzLCBsZXNzb25JZCkgPT4ge1xuICBjb25zdCBzZWN0aW9uSWQgPSAxMTtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKHN0YXRlID0+IHN0YXRlLCB7XG4gICAgbGVzc29uTG9jazoge1xuICAgICAgbGVzc29uc0J5U2VjdGlvbklkOiB7XG4gICAgICAgIFtzZWN0aW9uSWRdOiB7fSxcbiAgICAgIH0sXG4gICAgICBsb2NrYWJsZUF1dGhvcml6ZWQ6IGZhbHNlLFxuICAgICAgbG9ja2FibGVBdXRob3JpemVkTG9hZGVkOiB0cnVlLFxuICAgICAgbGVzc29uc0J5U2VjdGlvbklkTG9hZGVkOiB0cnVlLFxuICAgIH0sXG4gICAgdmlld0FzOiB2aWV3QXMsXG4gICAgdGVhY2hlclNlY3Rpb25zOiB7XG4gICAgICBzZWN0aW9uSWRzOiBbc2VjdGlvbklkXSxcbiAgICAgIHNlY3Rpb25zQXJlTG9hZGVkOiB0cnVlLFxuICAgICAgc2VjdGlvbnM6IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHtcbiAgICAgICAgICBpZDogMTEsXG4gICAgICAgICAgbmFtZTogJ3Rlc3Qgc2VjdGlvbicsXG4gICAgICAgICAgbGVzc29uX2V4dHJhczogdHJ1ZSxcbiAgICAgICAgICBwYWlyaW5nX2FsbG93ZWQ6IHRydWUsXG4gICAgICAgICAgc3R1ZGVudENvdW50OiA0LFxuICAgICAgICAgIGNvZGU6ICdUUUdTSlInLFxuICAgICAgICAgIHByb3ZpZGVyTWFuYWdlZDogZmFsc2UsXG4gICAgICAgICAgbGVzc29uczoge30sXG4gICAgICAgICAgdHRzQXV0b3BsYXlFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBsZXNzb25FeHRyYXM6IGZhbHNlLFxuICAgICAgICAgIHBhaXJpbmdBbGxvd2VkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkU2VjdGlvbklkOiBzZWN0aW9uSWQsXG4gICAgfSxcbiAgICBoaWRkZW5MZXNzb246IEltbXV0YWJsZS5mcm9tSlMoe1xuICAgICAgbGVzc29uc0J5U2VjdGlvbjoge1xuICAgICAgICBbc2VjdGlvbklkXToge1tsZXNzb25JZF06IHRydWV9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBwcm9ncmVzczoge1xuICAgICAgc2NyaXB0TmFtZTogJ3NjcmlwdC1uYW1lJyxcbiAgICAgIHNjcmlwdElkOiAxNyxcbiAgICAgIHVuaXRQcm9ncmVzc0hhc0xvYWRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIGN1cnJlbnRVc2VyOiB7XG4gICAgICB1c2VySWQ6IDEsXG4gICAgfSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIHNoZWxsIG9mIGEgcmVkdXggc3RvcmUgd2l0aCB0aGUgcHJvdmlkZWQgbGVzc29uSWQgYmVpbmcgaGlkZGVuXG4gKiBAcGFyYW0ge1ZpZXdUeXBlfSB2aWV3QXNcbiAqIEBwYXJhbSB7bnVtYmVyP30gbGVzc29uSWQgLSBMZXNzb24gdG8gaGlkZSAob3IgbnVsbCBpZiBub25lKVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU3RvcmVXaXRoTG9ja2VkTGVzc29uID0gKFxuICB2aWV3QXMsXG4gIGxvY2thYmxlQXV0aG9yaXplZCA9IGZhbHNlXG4pID0+IHtcbiAgY29uc3Qgc2VjdGlvbklkID0gMTE7XG4gIHJldHVybiBjcmVhdGVTdG9yZShzdGF0ZSA9PiBzdGF0ZSwge1xuICAgIGxlc3NvbkxvY2s6IHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZDoge1xuICAgICAgICBbc2VjdGlvbklkXToge30sXG4gICAgICB9LFxuICAgICAgbGVzc29uc0J5U2VjdGlvbklkTG9hZGVkOiB0cnVlLFxuICAgICAgbG9ja2FibGVBdXRob3JpemVkOiBsb2NrYWJsZUF1dGhvcml6ZWQsXG4gICAgICBsb2NrYWJsZUF1dGhvcml6ZWRMb2FkZWQ6IHRydWUsXG4gICAgfSxcbiAgICB2aWV3QXM6IHZpZXdBcyxcbiAgICB0ZWFjaGVyU2VjdGlvbnM6IHtcbiAgICAgIHNlbGVjdGVkU2VjdGlvbklkOiBzZWN0aW9uSWQsXG4gICAgfSxcbiAgICBoaWRkZW5MZXNzb246IEltbXV0YWJsZS5mcm9tSlMoe1xuICAgICAgbGVzc29uc0J5U2VjdGlvbjoge1xuICAgICAgICBbc2VjdGlvbklkXToge1tsZXNzb25JZF06IHRydWV9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBwcm9ncmVzczoge1xuICAgICAgdW5pdFByb2dyZXNzSGFzTG9hZGVkOiB0cnVlLFxuICAgIH0sXG4gICAgY3VycmVudFVzZXI6IHtcbiAgICAgIHVzZXJJZDogMSxcbiAgICB9LFxuICB9KTtcbn07XG5cbmNvbnN0IHJhbmRvbU51bWJlclVwVG8xMDAgPSAoKSA9PiB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApO1xufTtcblxubGV0IGxlc3NvbklkID0gMTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXNzb25XaXRoTGV2ZWxzID0gKG92ZXJyaWRlRmllbGRzID0ge30sIGxldmVsQ291bnQgPSAxKSA9PiB7XG4gIGNvbnN0IHBvc2l0aW9uID0gb3ZlcnJpZGVGaWVsZHMucG9zaXRpb24gfHwgcmFuZG9tTnVtYmVyVXBUbzEwMCgpO1xuICByZXR1cm4ge1xuICAgIGlkOiBsZXNzb25JZCsrLFxuICAgIG5hbWU6IGBMZXNzb24gLSAke3Bvc2l0aW9ufWAsXG4gICAgdGl0bGU6IGBMZXNzb24gJHtwb3NpdGlvbn06IExlc3NvbiAtICR7cG9zaXRpb259YCxcbiAgICBsb2NrYWJsZTogZmFsc2UsXG4gICAgcmVsYXRpdmVfcG9zaXRpb246IHBvc2l0aW9uLFxuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICBsZXZlbHM6IGZha2VMZXZlbHMobGV2ZWxDb3VudCksXG4gICAgLi4ub3ZlcnJpZGVGaWVsZHMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVN0dWRlbnRzID0gc3R1ZGVudENvdW50ID0+IHtcbiAgcmV0dXJuIEFycmF5KHN0dWRlbnRDb3VudClcbiAgICAuZmlsbCgpXG4gICAgLm1hcCgoXywgaSkgPT4gKHtcbiAgICAgIGlkOiBpLFxuICAgICAgbmFtZTogYHN0dWRlbnQtJHtpfWAsXG4gICAgICBmYW1pbHlOYW1lOiBgc3R1ZGVudC0ke3N0dWRlbnRDb3VudCAtIGl9YCxcbiAgICB9KSk7XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVVuaXREYXRhID0gKG92ZXJyaWRlRmllbGRzID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogMSxcbiAgICBuYW1lOiAnY3NkMS0yMDIwJyxcbiAgICB0aXRsZTogJ0NTRCBVbml0IDEgLSBQcm9ibGVtIFNvbHZpbmcgYW5kIENvbXB1dGluZyAoMjAtMjEpJyxcbiAgICBjc2Y6IGZhbHNlLFxuICAgIGlzQ3NkOiB0cnVlLFxuICAgIGlzQ3NwOiBmYWxzZSxcbiAgICBsZXNzb25zOiBbXSxcbiAgICAuLi5vdmVycmlkZUZpZWxkcyxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmYWtlU3R1ZGVudExldmVsUHJvZ3Jlc3MgPSAoXG4gIGxldmVscyxcbiAgc3R1ZGVudHMsXG4gIHNlcnZlclByb2dyZXNzT3ZlcnJpZGVzID0ge31cbikgPT4ge1xuICBjb25zdCBwcm9ncmVzc09uTGVzc29ucyA9IGZha2VQcm9ncmVzc0ZvckxldmVscyhcbiAgICBsZXZlbHMsXG4gICAgc2VydmVyUHJvZ3Jlc3NPdmVycmlkZXMuc3RhdHVzLFxuICAgIHNlcnZlclByb2dyZXNzT3ZlcnJpZGVzXG4gICk7XG5cbiAgY29uc3Qgc3R1ZGVudFByb2dyZXNzID0ge307XG4gIHN0dWRlbnRzLmZvckVhY2goc3R1ZGVudCA9PiB7XG4gICAgc3R1ZGVudFByb2dyZXNzW3N0dWRlbnQuaWRdID0gcHJvZ3Jlc3NPbkxlc3NvbnM7XG4gIH0pO1xuXG4gIHJldHVybiBzdHVkZW50UHJvZ3Jlc3M7XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVN0dWRlbnRMYXN0VXBkYXRlID0gc3R1ZGVudHMgPT4ge1xuICBjb25zdCBzdHVkZW50TGFzdFVwZGF0ZSA9IHt9O1xuICBzdHVkZW50cy5mb3JFYWNoKHN0dWRlbnQgPT4ge1xuICAgIHN0dWRlbnRMYXN0VXBkYXRlW3N0dWRlbnQuaWRdID0gRGF0ZS5ub3coKTtcbiAgfSk7XG4gIHJldHVybiBzdHVkZW50TGFzdFVwZGF0ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBmYWtlU3R1ZGVudExhc3RVcGRhdGVCeVNjcmlwdCA9IChzY3JpcHREYXRhLCBzdHVkZW50cykgPT4ge1xuICByZXR1cm4ge1tzY3JpcHREYXRhLmlkXTogZmFrZVN0dWRlbnRMYXN0VXBkYXRlKHN0dWRlbnRzKX07XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVByb2dyZXNzVGFibGVSZWR1eEluaXRpYWxTdGF0ZSA9IChcbiAgbGVzc29ucyxcbiAgc2NyaXB0RGF0YSxcbiAgc3R1ZGVudHMgPSBmYWtlU3R1ZGVudHMoMilcbikgPT4ge1xuICBpZiAoIWxlc3NvbnMpIHtcbiAgICBjb25zdCBsZXNzb24xID0gZmFrZUxlc3NvbldpdGhMZXZlbHMoe3Bvc2l0aW9uOiAxLCBsZXZlbHM6IGZha2VMZXZlbHMoMSl9KTtcbiAgICBjb25zdCBsZXNzb24yID0gZmFrZUxlc3NvbldpdGhMZXZlbHMoe3Bvc2l0aW9uOiAyLCBsZXZlbHM6IGZha2VMZXZlbHMoMil9KTtcbiAgICBsZXNzb25zID0gW2xlc3NvbjEsIGxlc3NvbjJdO1xuICB9XG4gIGlmICghc2NyaXB0RGF0YSkge1xuICAgIHNjcmlwdERhdGEgPSBmYWtlVW5pdERhdGEoe2xlc3NvbnM6IGxlc3NvbnN9KTtcbiAgfVxuICBjb25zdCBsZXZlbFByb2dyZXNzRGF0YSA9IGZha2VTdHVkZW50TGV2ZWxQcm9ncmVzcyhcbiAgICBzY3JpcHREYXRhLmxlc3NvbnNbMF0ubGV2ZWxzLFxuICAgIHN0dWRlbnRzXG4gICk7XG5cbiAgY29uc3Qgc2VjdGlvbklkID0gcmFuZG9tTnVtYmVyVXBUbzEwMCgpO1xuXG4gIHJldHVybiB7XG4gICAgY3VycmVudFVzZXI6IHtcbiAgICAgIGlzU29ydGVkQnlGYW1pbHlOYW1lOiBmYWxzZSxcbiAgICB9LFxuICAgIHByb2dyZXNzOiB7XG4gICAgICBsZXNzb25Hcm91cHM6IFtdLFxuICAgICAgbGVzc29uczogbGVzc29ucyxcbiAgICAgIGZvY3VzQXJlYUxlc3NvbklkczogW10sXG4gICAgICBkZWVwZXJMZWFybmluZ0NvdXJzZTogZmFsc2UsXG4gICAgfSxcbiAgICB0ZWFjaGVyU2VjdGlvbnM6IHtcbiAgICAgIHNlY3Rpb25zOiBbe2lkOiBzZWN0aW9uSWR9XSxcbiAgICAgIHNlbGVjdGVkU2VjdGlvbklkOiBzZWN0aW9uSWQsXG4gICAgICBzZWxlY3RlZFN0dWRlbnRzOiBzdHVkZW50cyxcbiAgICB9LFxuICAgIHNlY3Rpb25Qcm9ncmVzczoge1xuICAgICAgdW5pdERhdGFCeVVuaXQ6IHtbc2NyaXB0RGF0YS5pZF06IHNjcmlwdERhdGF9LFxuICAgICAgc3R1ZGVudExldmVsUHJvZ3Jlc3NCeVVuaXQ6IHtcbiAgICAgICAgW3NjcmlwdERhdGEuaWRdOiBsZXZlbFByb2dyZXNzRGF0YSxcbiAgICAgIH0sXG4gICAgICBzdHVkZW50TGVzc29uUHJvZ3Jlc3NCeVVuaXQ6IHtcbiAgICAgICAgW3NjcmlwdERhdGEuaWRdOiBsZXNzb25Qcm9ncmVzc0ZvclNlY3Rpb24oXG4gICAgICAgICAgbGV2ZWxQcm9ncmVzc0RhdGEsXG4gICAgICAgICAgc2NyaXB0RGF0YS5sZXNzb25zXG4gICAgICAgICksXG4gICAgICB9LFxuICAgICAgc3R1ZGVudExhc3RVcGRhdGVCeVVuaXQ6IGZha2VTdHVkZW50TGFzdFVwZGF0ZUJ5U2NyaXB0KFxuICAgICAgICBzY3JpcHREYXRhLFxuICAgICAgICBzdHVkZW50c1xuICAgICAgKSxcbiAgICAgIGxlc3Nvbk9mSW50ZXJlc3Q6IDEsXG4gICAgfSxcbiAgICB1bml0U2VsZWN0aW9uOiB7c2NyaXB0SWQ6IHNjcmlwdERhdGEuaWR9LFxuICAgIGxvY2FsZXM6IHtsb2NhbGVDb2RlOiAnZW4tVVMnfSxcbiAgfTtcbn07XG4iLCIvKiFcblx0Q29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG5cdExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG5cdGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cdHZhciBuYXRpdmVDb2RlU3RyaW5nID0gJ1tuYXRpdmUgY29kZV0nO1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGlmIChhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKGFyZy50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAmJiAhYXJnLnRvU3RyaW5nLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ1tuYXRpdmUgY29kZV0nKSkge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB0aHVuazsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7VW5jb25uZWN0ZWRTdW1tYXJ5UHJvZ3Jlc3NUYWJsZSBhcyBTdW1tYXJ5UHJvZ3Jlc3NUYWJsZX0gZnJvbSAnLi9TdW1tYXJ5UHJvZ3Jlc3NUYWJsZSc7XG5pbXBvcnQge0xldmVsU3RhdHVzfSBmcm9tICdAY2RvL2dlbmVyYXRlZC1zY3JpcHRzL3NoYXJlZENvbnN0YW50cyc7XG5pbXBvcnQge1ZpZXdUeXBlfSBmcm9tICdAY2RvL2FwcHMvY29kZS1zdHVkaW8vdmlld0FzUmVkdXgnO1xuaW1wb3J0IHtcbiAgZmFrZUxlc3NvbixcbiAgZmFrZUxldmVscyxcbiAgZmFrZUxldmVsLFxuICBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24sXG4gIGNyZWF0ZVN0b3JlV2l0aExvY2tlZExlc3Nvbixcbn0gZnJvbSAnLi9wcm9ncmVzc1Rlc3RIZWxwZXJzJztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnQ6IFN1bW1hcnlQcm9ncmVzc1RhYmxlLFxufTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBncm91cGVkTGVzc29uOiB7XG4gICAgbGVzc29uczogW1xuICAgICAgZmFrZUxlc3NvbignSmlnc2F3JywgMSwgZmFsc2UsIDEpLFxuICAgICAgZmFrZUxlc3NvbignTWF6ZScsIDIsIGZhbHNlLCAyKSxcbiAgICAgIGZha2VMZXNzb24oJ0FydGlzdCcsIDMsIGZhbHNlLCAzKSxcbiAgICAgIGZha2VMZXNzb24oJ1NvbWV0aGluZycsIDQsIGZhbHNlLCA0KSxcbiAgICBdLFxuICAgIGxldmVsc0J5TGVzc29uOiBbXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5mYWtlTGV2ZWxzKDEpWzBdLFxuICAgICAgICAgIG5hbWU6ICdGaXJzdCBwcm9ncmVzc2lvbicsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLmZha2VMZXZlbHMoNSwgMikubWFwKGxldmVsID0+ICh7XG4gICAgICAgICAgLi4ubGV2ZWwsXG4gICAgICAgICAgcHJvZ3Jlc3Npb246ICdTZWNvbmQgUHJvZ3Jlc3Npb24nLFxuICAgICAgICB9KSksXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5mYWtlTGV2ZWxzKDEpWzBdLFxuICAgICAgICAgIG5hbWU6ICdMYXN0IHByb2dyZXNzaW9uJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBmYWtlTGV2ZWxzKDIpLFxuICAgICAgZmFrZUxldmVscygyKSxcbiAgICAgIGZha2VMZXZlbHMoMiksXG4gICAgXSxcbiAgfSxcbiAgdmlld0FzOiBWaWV3VHlwZS5QYXJ0aWNpcGFudCxcbiAgbGVzc29uSXNWaXNpYmxlOiAoKSA9PiB0cnVlLFxufTtcblxuY29uc3QgVGVtcGxhdGUgPSBhcmdzID0+IHtcbiAgY29uc3Qge3N0b3JlLCBwcm9wc30gPSBhcmdzO1xuXG4gIHJldHVybiAoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8U3VtbWFyeVByb2dyZXNzVGFibGUgey4uLnByb3BzfSAvPlxuICAgIDwvUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgU2ltcGxlID0gVGVtcGxhdGUuYmluZCh7fSk7XG5TaW1wbGUuYXJncyA9IHtcbiAgc3RvcmU6IGNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbihWaWV3VHlwZS5JbnN0cnVjdG9yLCBudWxsKSxcbiAgcHJvcHM6IGRlZmF1bHRQcm9wcyxcbn07XG5cbmV4cG9ydCBjb25zdCBXaXRoRm9jdXNBcmVhID0gVGVtcGxhdGUuYmluZCh7fSk7XG5XaXRoRm9jdXNBcmVhLmFyZ3MgPSB7XG4gIHN0b3JlOiBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24oVmlld1R5cGUuSW5zdHJ1Y3RvciwgbnVsbCksXG4gIHByb3BzOiB7XG4gICAgLi4uZGVmYXVsdFByb3BzLFxuICAgIGdyb3VwZWRMZXNzb246IHtcbiAgICAgIGxlc3NvbnM6IGRlZmF1bHRQcm9wcy5ncm91cGVkTGVzc29uLmxlc3NvbnMubWFwKChsZXNzb24sIGluZGV4KSA9PiAoe1xuICAgICAgICAuLi5sZXNzb24sXG4gICAgICAgIGlzRm9jdXNBcmVhOiBpbmRleCA9PT0gMSxcbiAgICAgIH0pKSxcbiAgICAgIGxldmVsc0J5TGVzc29uOiBkZWZhdWx0UHJvcHMuZ3JvdXBlZExlc3Nvbi5sZXZlbHNCeUxlc3Nvbi5tYXAoXG4gICAgICAgIChsZXZlbHMsIGluZGV4KSA9PiAoaW5kZXggPT09IDEgPyBmYWtlTGV2ZWxzKDgpIDogbGV2ZWxzKVxuICAgICAgKSxcbiAgICB9LFxuICAgIGxlc3NvbklzVmlzaWJsZTogKCkgPT4gdHJ1ZSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBGb3JQZWVyUmV2aWV3cyA9IFRlbXBsYXRlLmJpbmQoe30pO1xuRm9yUGVlclJldmlld3MuYXJncyA9IHtcbiAgc3RvcmU6IGNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbihWaWV3VHlwZS5JbnN0cnVjdG9yLCBudWxsKSxcbiAgcHJvcHM6IHtcbiAgICBncm91cGVkTGVzc29uOiB7XG4gICAgICBsZXNzb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogLTEsXG4gICAgICAgICAgaXNGb2N1c0FyZWE6IGZhbHNlLFxuICAgICAgICAgIGxvY2thYmxlOiBmYWxzZSxcbiAgICAgICAgICBuYW1lOiAnWW91IG11c3QgY29tcGxldGUgMyByZXZpZXdzIGZvciB0aGlzIHVuaXQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGxldmVsc0J5TGVzc29uOiBbXG4gICAgICAgIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJy0xJyxcbiAgICAgICAgICAgIG5hbWU6ICdMaW5rIHRvIHN1Ym1pdHRlZCByZXZpZXcnLFxuICAgICAgICAgICAgc3RhdHVzOiBMZXZlbFN0YXR1cy5wZXJmZWN0LFxuICAgICAgICAgICAgaXNMb2NrZWQ6IGZhbHNlLFxuICAgICAgICAgICAgdXJsOiAnL3BlZXJfcmV2aWV3cy8xJyxcbiAgICAgICAgICAgIGxldmVsTnVtYmVyOiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICctMScsXG4gICAgICAgICAgICBuYW1lOiAnUmV2aWV3IGEgbmV3IHN1Ym1pc3Npb24nLFxuICAgICAgICAgICAgc3RhdHVzOiBMZXZlbFN0YXR1cy5ub3RfdHJpZWQsXG4gICAgICAgICAgICBpc0xvY2tlZDogZmFsc2UsXG4gICAgICAgICAgICB1cmw6ICcvcHVsbC1yZXZpZXcnLFxuICAgICAgICAgICAgbGV2ZWxOdW1iZXI6IDIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJy0xJyxcbiAgICAgICAgICAgIGljb246ICdmYS1sb2NrJyxcbiAgICAgICAgICAgIG5hbWU6ICdSZXZpZXdzIHVuYXZhaWxhYmxlIGF0IHRoaXMgdGltZScsXG4gICAgICAgICAgICBzdGF0dXM6IExldmVsU3RhdHVzLm5vdF90cmllZCxcbiAgICAgICAgICAgIGlzTG9ja2VkOiB0cnVlLFxuICAgICAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgICAgIGxldmVsTnVtYmVyOiAzLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgbGVzc29uSXNWaXNpYmxlOiAoKSA9PiB0cnVlLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IFNlY29uZExlc3NvbkhpZGRlbkFzSW5zdHJ1Y3RvciA9IFRlbXBsYXRlLmJpbmQoe30pO1xuU2Vjb25kTGVzc29uSGlkZGVuQXNJbnN0cnVjdG9yLmFyZ3MgPSB7XG4gIHN0b3JlOiBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24oVmlld1R5cGUuSW5zdHJ1Y3RvciwgJzInKSxcbiAgcHJvcHM6IHtcbiAgICAuLi5kZWZhdWx0UHJvcHMsXG4gICAgdmlld0FzOiBWaWV3VHlwZS5JbnN0cnVjdG9yLFxuICAgIGxlc3NvbklzVmlzaWJsZTogKGxlc3Nvbiwgdmlld0FzKSA9PlxuICAgICAgbGVzc29uLmlkICE9PSAyIHx8IHZpZXdBcyA9PT0gVmlld1R5cGUuSW5zdHJ1Y3RvcixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBUaGlyZExlc3NvbkhpZGRlbkFzSW5zdHJ1Y3RvciA9IFRlbXBsYXRlLmJpbmQoe30pO1xuVGhpcmRMZXNzb25IaWRkZW5Bc0luc3RydWN0b3IuYXJncyA9IHtcbiAgc3RvcmU6IGNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbihWaWV3VHlwZS5JbnN0cnVjdG9yLCAnMycpLFxuICBwcm9wczoge1xuICAgIC4uLmRlZmF1bHRQcm9wcyxcbiAgICB2aWV3QXM6IFZpZXdUeXBlLkluc3RydWN0b3IsXG4gICAgbGVzc29uSXNWaXNpYmxlOiAobGVzc29uLCB2aWV3QXMpID0+XG4gICAgICBsZXNzb24uaWQgIT09IDMgfHwgdmlld0FzID09PSBWaWV3VHlwZS5JbnN0cnVjdG9yLFxuICB9LFxufTtcblxuLy8gUm93IDIgc2hvdWxkIG5vdCBiZSB2aXNpYmxlLlxuZXhwb3J0IGNvbnN0IFNlY29uZExlc3NvbkhpZGRlbkFzUGFydGljaXBhbnQgPSBUZW1wbGF0ZS5iaW5kKHt9KTtcblNlY29uZExlc3NvbkhpZGRlbkFzUGFydGljaXBhbnQuYXJncyA9IHtcbiAgc3RvcmU6IGNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbihWaWV3VHlwZS5QYXJ0aWNpcGFudCwgJzInKSxcbiAgcHJvcHM6IHtcbiAgICAuLi5kZWZhdWx0UHJvcHMsXG4gICAgbGVzc29uSXNWaXNpYmxlOiAobGVzc29uLCB2aWV3QXMpID0+XG4gICAgICBsZXNzb24uaWQgIT09IDIgfHwgdmlld0FzID09PSBWaWV3VHlwZS5JbnN0cnVjdG9yLFxuICB9LFxufTtcblxuLy8gUm93IDMgc2hvdWxkIG5vdCBiZSB2aXNpYmxlLCBncmF5IHN0aWxsIGV2ZXJ5IG90aGVyIHJvdy5cbmV4cG9ydCBjb25zdCBUaGlyZFJvd0hpZGRlbkFzUGFydGljaXBhbnQgPSBUZW1wbGF0ZS5iaW5kKHt9KTtcblRoaXJkUm93SGlkZGVuQXNQYXJ0aWNpcGFudC5hcmdzID0ge1xuICBzdG9yZTogY3JlYXRlU3RvcmVXaXRoSGlkZGVuTGVzc29uKFZpZXdUeXBlLlBhcnRpY2lwYW50LCAnMycpLFxuICBwcm9wczoge1xuICAgIC4uLmRlZmF1bHRQcm9wcyxcbiAgICBsZXNzb25Jc1Zpc2libGU6IChsZXNzb24sIHZpZXdBcykgPT5cbiAgICAgIGxlc3Nvbi5pZCAhPT0gMyB8fCB2aWV3QXMgPT09IFZpZXdUeXBlLkluc3RydWN0b3IsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgTG9ja2VkTGVzc29uQ3VycmVudFNlY3Rpb25Bc0luc3RydWN0b3IgPSBUZW1wbGF0ZS5iaW5kKHt9KTtcbkxvY2tlZExlc3NvbkN1cnJlbnRTZWN0aW9uQXNJbnN0cnVjdG9yLmFyZ3MgPSB7XG4gIHN0b3JlOiBjcmVhdGVTdG9yZVdpdGhMb2NrZWRMZXNzb24oVmlld1R5cGUuSW5zdHJ1Y3RvciwgdHJ1ZSksXG4gIHByb3BzOiB7XG4gICAgLi4uZGVmYXVsdFByb3BzLFxuICAgIGdyb3VwZWRMZXNzb246IHtcbiAgICAgIGxlc3NvbnM6IFtcbiAgICAgICAgZmFrZUxlc3NvbignSmlnc2F3JywgMSwgZmFsc2UsIDEpLFxuICAgICAgICBmYWtlTGVzc29uKCdBc3Nlc3NtZW50IE9uZScsIDIsIHRydWUpLFxuICAgICAgICBmYWtlTGVzc29uKCdBcnRpc3QnLCAzLCBmYWxzZSwgMiksXG4gICAgICBdLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtmYWtlTGV2ZWxzKDMpLCBmYWtlTGV2ZWxzKDQpLCBmYWtlTGV2ZWxzKDIpXSxcbiAgICB9LFxuICAgIHZpZXdBczogVmlld1R5cGUuSW5zdHJ1Y3RvcixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBMb2NrZWRMZXNzb25Bc1BhcnRpY2lwYW50ID0gVGVtcGxhdGUuYmluZCh7fSk7XG5Mb2NrZWRMZXNzb25Bc1BhcnRpY2lwYW50LmFyZ3MgPSB7XG4gIHN0b3JlOiBjcmVhdGVTdG9yZVdpdGhMb2NrZWRMZXNzb24oVmlld1R5cGUuUGFydGljaXBhbnQpLFxuICBwcm9wczoge1xuICAgIC4uLmRlZmF1bHRQcm9wcyxcbiAgICBncm91cGVkTGVzc29uOiB7XG4gICAgICBsZXNzb25zOiBbXG4gICAgICAgIGZha2VMZXNzb24oJ0ppZ3NhdycsIDEsIGZhbHNlLCAxKSxcbiAgICAgICAgZmFrZUxlc3NvbignQXNzZXNzbWVudCBPbmUnLCAyLCB0cnVlKSxcbiAgICAgICAgZmFrZUxlc3NvbignQXJ0aXN0JywgMywgZmFsc2UsIDIpLFxuICAgICAgXSxcbiAgICAgIGxldmVsc0J5TGVzc29uOiBbXG4gICAgICAgIGZha2VMZXZlbHMoMyksXG4gICAgICAgIGZha2VMZXZlbHMoNCkubWFwKGxldmVsID0+ICh7XG4gICAgICAgICAgLi4ubGV2ZWwsXG4gICAgICAgICAgaXNMb2NrZWQ6IHRydWUsXG4gICAgICAgIH0pKSxcbiAgICAgICAgZmFrZUxldmVscygyKSxcbiAgICAgIF0sXG4gICAgfSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmxvY2tlZExlc3NvbkN1cnJlbnRTZWN0aW9uQXNJbnN0cnVjdG9yID0gVGVtcGxhdGUuYmluZCh7fSk7XG5VbmxvY2tlZExlc3NvbkN1cnJlbnRTZWN0aW9uQXNJbnN0cnVjdG9yLmFyZ3MgPSB7XG4gIHN0b3JlOiBjcmVhdGVTdG9yZVdpdGhMb2NrZWRMZXNzb24oVmlld1R5cGUuSW5zdHJ1Y3RvciwgdHJ1ZSksXG4gIHByb3BzOiB7XG4gICAgLi4uZGVmYXVsdFByb3BzLFxuICAgIGdyb3VwZWRMZXNzb246IHtcbiAgICAgIGxlc3NvbnM6IFtcbiAgICAgICAgZmFrZUxlc3NvbignSmlnc2F3JywgMSwgZmFsc2UsIDEpLFxuICAgICAgICBmYWtlTGVzc29uKCdBc3Nlc3NtZW50IE9uZScsIDIsIHRydWUpLFxuICAgICAgICBmYWtlTGVzc29uKCdBcnRpc3QnLCAzLCBmYWxzZSwgMiksXG4gICAgICBdLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtmYWtlTGV2ZWxzKDMpLCBmYWtlTGV2ZWxzKDQpLCBmYWtlTGV2ZWxzKDIpXSxcbiAgICB9LFxuICAgIHZpZXdBczogVmlld1R5cGUuSW5zdHJ1Y3RvcixcbiAgICBsZXNzb25Jc1Zpc2libGU6ICgpID0+IHRydWUsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgTG9ja2VkSGlkZGVuTGVzc29uQXNJbnN0cnVjdG9yID0gVGVtcGxhdGUuYmluZCh7fSk7XG5Mb2NrZWRIaWRkZW5MZXNzb25Bc0luc3RydWN0b3IuYXJncyA9IHtcbiAgc3RvcmU6IGNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbihWaWV3VHlwZS5JbnN0cnVjdG9yLCAnMicpLFxuICBwcm9wczoge1xuICAgIC4uLmRlZmF1bHRQcm9wcyxcbiAgICBncm91cGVkTGVzc29uOiB7XG4gICAgICBsZXNzb25zOiBbXG4gICAgICAgIGZha2VMZXNzb24oJ0ppZ3NhdycsIDEsIGZhbHNlLCAxKSxcbiAgICAgICAgZmFrZUxlc3NvbignQXNzZXNzbWVudCBPbmUnLCAyLCB0cnVlKSxcbiAgICAgICAgZmFrZUxlc3NvbignQXJ0aXN0JywgMywgZmFsc2UsIDIpLFxuICAgICAgXSxcbiAgICAgIGxldmVsc0J5TGVzc29uOiBbZmFrZUxldmVscygzKSwgZmFrZUxldmVscyg0KSwgZmFrZUxldmVscygyKV0sXG4gICAgfSxcbiAgICB2aWV3QXM6IFZpZXdUeXBlLkluc3RydWN0b3IsXG4gICAgbGVzc29uSXNWaXNpYmxlOiAobGVzc29uLCB2aWV3QXMpID0+XG4gICAgICBsZXNzb24uaWQgIT09IDIgfHwgdmlld0FzID09PSBWaWV3VHlwZS5JbnN0cnVjdG9yLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IFVucGx1Z2dlZExlc3NvbiA9IFRlbXBsYXRlLmJpbmQoe30pO1xuVW5wbHVnZ2VkTGVzc29uLmFyZ3MgPSB7XG4gIHN0b3JlOiBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24oVmlld1R5cGUuSW5zdHJ1Y3RvciwgbnVsbCksXG4gIHByb3BzOiB7XG4gICAgLi4uZGVmYXVsdFByb3BzLFxuICAgIGdyb3VwZWRMZXNzb246IHtcbiAgICAgIGxlc3NvbnM6IFtmYWtlTGVzc29uKCdMZXNzb24gd2l0aCBVbnBsdWdnZWQnLCAxLCBmYWxzZSwgMSldLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtbZmFrZUxldmVsKHtpc1VucGx1Z2dlZDogdHJ1ZX0pLCAuLi5mYWtlTGV2ZWxzKDMpXV0sXG4gICAgfSxcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX2xvZGFzaCIsIl9leGNsdWRlZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlS2V5cyIsImtleXMiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRm9udEF3ZXNvbWUiLCJfcmVmIiwiaWNvbiIsImNsYXNzTmFtZSIsInRpdGxlIiwicHJvcHMiLCJuZXdQcm9wcyIsIl8iLCJjb25jYXQiLCJjcmVhdGVFbGVtZW50IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfY29sb3IiLCJfRm9udEF3ZXNvbWUiLCJfdXRpbHMiLCJfQnViYmxlRmFjdG9yeSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIm93bktleXMiLCJlIiwiciIsInQiLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsIl9vYmplY3RTcHJlYWQiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQmFkZ2VUeXBlIiwibWFrZUVudW0iLCJCdWJibGVCYWRnZSIsImJhZGdlVHlwZSIsImJ1YmJsZVNpemUiLCJidWJibGVTaGFwZSIsIkJ1YmJsZVNpemUiLCJmdWxsIiwibGV0dGVyIiwiaW5jbHVkZXMiLCJhc3Nlc3NtZW50IiwiQXNzZXNzbWVudEJ1YmJsZUJhZGdlIiwia2VlcFdvcmtpbmciLCJLZWVwV29ya2luZ0J1YmJsZUJhZGdlIiwiYnViYmxlUG9zaXRpb25pbmciLCJCdWJibGVTaGFwZSIsImRpYW1vbmQiLCJzdHlsZXMiLCJkaWFtb25kQnViYmxlUG9zaXRpb24iLCJidWJibGVQb3NpdGlvbiIsInN0eWxlIiwiQXNzZXNzbWVudEJhZGdlIiwiaXNTbWFsbCIsImtlZXBXb3JraW5nU21hbGxCYWRnZVBvc2l0aW9uIiwia2VlcFdvcmtpbmdCYWRnZVBvc2l0aW9uIiwiS2VlcFdvcmtpbmdCYWRnZSIsIl9yZWYyIiwiYmFkZ2VTaXplIiwia2VlcFdvcmtpbmdCYWRnZVNtYWxsU2l6ZSIsImtlZXBXb3JraW5nQmFkZ2VGdWxsU2l6ZSIsImtlZXBXb3JraW5nQmFkZ2UiLCJjb250YWluZXIiLCJwdXJwbGUiLCJ3aGl0ZSIsIm9uZU9mIiwidmFsdWVzIiwiYm9vbCIsIm9iamVjdCIsImhhc1doaXRlQm9yZGVyIiwiZm9udFNpemUiLCJwb3NpdGlvbiIsInRvcCIsInJpZ2h0IiwiY29sb3IiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJyZWQiLCJ3aWR0aCIsImhlaWdodCIsIl9yYWRpdW0iLCJfcmVhY3RUb29sdGlwIiwibWFpbiIsImRpc3BsYXkiLCJ3aGl0ZVNwYWNlIiwiYXJyb3dDb250YWluZXIiLCJsZWZ0QXJyb3ciLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJjeWFuIiwiZm9jdXNBcmVhIiwibGluZUhlaWdodCIsInRleHQiLCJmb2N1c0FyZWFJY29uIiwicGFkZGluZyIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsImRlZmF1bHRfYmx1ZSIsIlJhZGl1bSIsIkZvY3VzQXJlYUluZGljYXRvciIsImhyZWYiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiaWQiLCJyb2xlIiwiZWZmZWN0IiwiX3Byb2dyZXNzSGVscGVycyIsIl9wcm9ncmVzc1R5cGVzIiwiX3Byb2dyZXNzU3R5bGVzIiwiX3R5cGVzIiwiX0J1YmJsZUJhZGdlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsInUiLCJzZXQiLCJfbG9jYWxlIiwiV2Vha01hcCIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJzZXRQcm90b3R5cGVPZiIsIlByb2dyZXNzQnViYmxlIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJvbkNsaWNrIiwibGV2ZWwiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9wcm90byIsImlzQ2xpY2thYmxlIiwiX3RoaXMkcHJvcHMiLCJ0aGlzIiwiZGlzYWJsZWQiLCJ1cmwiLCJnZXRVcmwiLCJfdGhpcyRwcm9wczIiLCJzZWxlY3RlZFNlY3Rpb25JZCIsInNlbGVjdGVkU3R1ZGVudElkIiwiZ2V0QnViYmxlVXJsIiwicmVuZGVyQnViYmxlQmFkZ2UiLCJfdGhpcyRwcm9wczMiLCJzbWFsbEJ1YmJsZSIsImhpZGVBc3Nlc3NtZW50QmFkZ2UiLCJoYXNLZWVwV29ya2luZ0ZlZWRiYWNrIiwidGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGUiLCJSZXZpZXdTdGF0ZXMiLCJpc0xldmVsQXNzZXNzbWVudCIsImNyZWF0ZUJ1YmJsZUVsZW1lbnQiLCJfdGhpcyRwcm9wczQiLCJoaWRlVG9vbFRpcHMiLCJkb3QiLCJjb250ZW50IiwiZ2V0QnViYmxlQ29udGVudCIsImlzTG9ja2VkIiwiaXNVbnBsdWdnZWQiLCJib251cyIsInBhaXJlZCIsImJ1YmJsZVRleHQiLCJsZXZlbE51bWJlciIsImdldEJ1YmJsZVNoYXBlIiwiaXNDb25jZXB0TGV2ZWwiLCJidWJibGUiLCJCYXNpY0J1YmJsZSIsInNoYXBlIiwic2l6ZSIsInByb2dyZXNzU3R5bGUiLCJsZXZlbFByb2dyZXNzU3R5bGUiLCJzdGF0dXMiLCJraW5kIiwiY2xhc3NOYW1lcyIsImdldEJ1YmJsZUNsYXNzTmFtZXMiLCJCdWJibGVUb29sdGlwIiwicmVuZGVyIiwibGV2ZWxJRCIsImxlc3Nvbk5hbWUiLCJkZXNjcmlwdGlvbiIsImkxOG4iLCJwcm9ncmVzc0J1YmJsZURlc2NyaXB0aW9uIiwicHJvZ3Jlc3NCdWJibGVEZXNjcmlwdGlvbldpdGhMZXNzb24iLCJCdWJibGVMaW5rIiwib25DbGlja0xldmVsIiwiYTExeV9kZXNjcmlwdGlvbiIsIlJlYWN0IiwiQ29tcG9uZW50IiwibGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlIiwibnVtYmVyIiwib25lT2ZUeXBlIiwiZnVuYyIsIl9Qcm9ncmVzc0J1YmJsZSIsIl9yZWFjdFJlZHV4IiwiUHJvZ3Jlc3NCdWJibGVTZXQiLCJpbmRleCIsImlzU3VibGV2ZWwiLCJsZXZlbHMiLCJpc1J0bCIsImJhY2tncm91bmRGaXJzdFN0eWxlIiwiYmFja2dyb3VuZExhc3QiLCJiYWNrZ3JvdW5kRmlyc3QiLCJiYWNrZ3JvdW5kTGFzdFN0eWxlIiwiYmFja2dyb3VuZFN0eWxlUHJvcCIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kRGlhbW9uZCIsImJhY2tncm91bmRTdWJsZXZlbCIsImJhY2tncm91bmRQaWxsIiwic3VibGV2ZWxzIiwiY29udGFpbmVyU3R5bGVQcm9wIiwicGlsbENvbnRhaW5lciIsImRpYW1vbmRDb250YWluZXIiLCJjb250YWluZXJTdWJsZXZlbCIsIndpdGhCYWNrZ3JvdW5kIiwib25CdWJibGVDbGljayIsIl90aGlzMiIsInNob3dTdWJsZXZlbHMiLCJtYXAiLCJyZW5kZXJCdWJibGUiLCJzdWJsZXZlbCIsImFycmF5T2YiLCJsZXNzb25FeHRyYXNFbmFibGVkIiwibGlnaHRlcl9ncmF5IiwibGVmdCIsIkRPVF9TSVpFIiwiRElBTU9ORF9ET1RfU0laRSIsImNvbm5lY3QiLCJzdGF0ZSIsIl9Qcm9ncmVzc0J1YmJsZVNldCIsIl92aWV3QXNSZWR1eCIsIl9Gb2N1c0FyZWFJbmRpY2F0b3IiLCJfZm9udENvbnN0YW50cyIsIlN1bW1hcnlQcm9ncmVzc1JvdyIsImRhcmsiLCJsZXNzb24iLCJsZXNzb25Jc0hpZGRlbkZvclN0dWRlbnRzIiwibGVzc29uSXNMb2NrZWRGb3JVc2VyIiwibGVzc29uSXNMb2NrZWRGb3JBbGxTdHVkZW50cyIsInZpZXdBcyIsIlZpZXdUeXBlIiwiUGFydGljaXBhbnQiLCJpc0xvY2tlZEZvclVzZXIiLCJpc0xvY2tlZEZvclNlY3Rpb24iLCJzaG93QXNMb2NrZWQiLCJsZXNzb25UaXRsZSIsIm5hbWUiLCJsZXNzb25OdW1iZXIiLCJkaXNwbGF5RGFzaGVkQm9yZGVyIiwidGl0bGVUb29sdGlwSWQiLCJ1bmlxdWVJZCIsImxvY2tlZFRvb2x0aXBJZCIsImRhcmtSb3ciLCJsaWdodFJvdyIsImRhc2hlZEJvcmRlciIsImNvbDEiLCJmYWRlZENvbCIsImNvbFRleHQiLCJsb2NrYWJsZSIsInVubG9ja2VkSWNvbiIsIkluc3RydWN0b3IiLCJ3cmFwcGVyIiwibG9ja0Fzc2Vzc21lbnRMb25nIiwiY29sMiIsImxlc3NvbkNvbnRhaW5zTm9MZXZlbHMiLCJpc0ZvY3VzQXJlYSIsImZvY3VzQXJlYU1hcmdpbiIsInVuZGVmaW5lZCIsImxlc3NvblR5cGUiLCJ0YWJsZV9saWdodF9yb3ciLCJ0YWJsZV9kYXJrX3JvdyIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJjaGFyY29hbCIsImxldHRlclNwYWNpbmciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyX2xpZ2h0X2dyYXkiLCJib3JkZXJSaWdodFN0eWxlIiwib3BhY2l0eSIsImZvbnRDb25zdGFudHMiLCJvdmVyZmxvdyIsInRleHRPdmVyZmxvdyIsIm9yYW5nZSIsIm9wYXF1ZSIsIm93blByb3BzIiwibGVzc29uSXNWaXNpYmxlIiwibGVzc29uSWQiLCJfU3VtbWFyeVByb2dyZXNzUm93IiwiU3VtbWFyeVByb2dyZXNzVGFibGUiLCJtaW5pbWFsIiwiX3RoaXMkcHJvcHMkZ3JvdXBlZExlIiwiZ3JvdXBlZExlc3NvbiIsImxlc3NvbnMiLCJsZXZlbHNCeUxlc3NvbiIsIkVycm9yIiwidGFibGUiLCJoZWFkZXJSb3ciLCJyb3dTdHlsZXMiLCJwcm9ncmVzcyIsInVuZmlsdGVyZWRJbmRleCIsIml0ZW0iLCJmaWx0ZXJlZEluZGV4IiwiZ3JvdXBlZExlc3NvbnNUeXBlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyX2dyYXkiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwidGFibGVfaGVhZGVyIiwiX3NoYXJlZENvbnN0YW50cyIsIl9yZWR1eCIsIl9pbW11dGFibGUiLCJmYWtlTGVzc29uIiwibGVzc29uU3RhcnRVcmwiLCJmYWtlTGV2ZWwiLCJvdmVycmlkZXMiLCJ0b1N0cmluZyIsIkxldmVsU3RhdHVzIiwibm90X3RyaWVkIiwiZmFrZUxldmVscyIsImZha2VMZXZlbFdpdGhTdWJMZXZlbHMiLCJudW1TdWJsZXZlbHMiLCJzdGFydExldmVsIiwicmFuZ2UiLCJudW1MZXZlbHMiLCJfcmVmJHN0YXJ0TGV2ZWwiLCJfcmVmJG5hbWVkIiwibmFtZWQiLCJvdmVycmlkZURhdGEiLCJmYWtlUHJvZ3Jlc3NGb3JMZXZlbHMiLCJzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlcyIsImxldmVsUHJvZ3Jlc3NGcm9tU2VydmVyIiwicmFuZG9tTnVtYmVyVXBUbzEwMCIsImNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbiIsImNyZWF0ZVN0b3JlIiwibGVzc29uTG9jayIsImxlc3NvbnNCeVNlY3Rpb25JZCIsImxvY2thYmxlQXV0aG9yaXplZCIsImxvY2thYmxlQXV0aG9yaXplZExvYWRlZCIsImxlc3NvbnNCeVNlY3Rpb25JZExvYWRlZCIsInRlYWNoZXJTZWN0aW9ucyIsInNlY3Rpb25JZHMiLCJzZWN0aW9uc0FyZUxvYWRlZCIsInNlY3Rpb25zIiwibGVzc29uX2V4dHJhcyIsInBhaXJpbmdfYWxsb3dlZCIsInN0dWRlbnRDb3VudCIsImNvZGUiLCJwcm92aWRlck1hbmFnZWQiLCJ0dHNBdXRvcGxheUVuYWJsZWQiLCJsZXNzb25FeHRyYXMiLCJwYWlyaW5nQWxsb3dlZCIsImhpZGRlbkxlc3NvbiIsIkltbXV0YWJsZSIsImZyb21KUyIsImxlc3NvbnNCeVNlY3Rpb24iLCJzY3JpcHROYW1lIiwic2NyaXB0SWQiLCJ1bml0UHJvZ3Jlc3NIYXNMb2FkZWQiLCJjdXJyZW50VXNlciIsInVzZXJJZCIsImNyZWF0ZVN0b3JlV2l0aExvY2tlZExlc3NvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImZha2VMZXNzb25XaXRoTGV2ZWxzIiwib3ZlcnJpZGVGaWVsZHMiLCJsZXZlbENvdW50IiwicmVsYXRpdmVfcG9zaXRpb24iLCJmYWtlU3R1ZGVudHMiLCJmaWxsIiwiZmFtaWx5TmFtZSIsImZha2VVbml0RGF0YSIsImNzZiIsImlzQ3NkIiwiaXNDc3AiLCJmYWtlU3R1ZGVudExldmVsUHJvZ3Jlc3MiLCJzdHVkZW50cyIsInByb2dyZXNzT25MZXNzb25zIiwic3R1ZGVudFByb2dyZXNzIiwic3R1ZGVudCIsImZha2VTdHVkZW50TGFzdFVwZGF0ZSIsInN0dWRlbnRMYXN0VXBkYXRlIiwiRGF0ZSIsIm5vdyIsImZha2VTdHVkZW50TGFzdFVwZGF0ZUJ5U2NyaXB0Iiwic2NyaXB0RGF0YSIsImZha2VQcm9ncmVzc1RhYmxlUmVkdXhJbml0aWFsU3RhdGUiLCJsZXZlbFByb2dyZXNzRGF0YSIsInNlY3Rpb25JZCIsImlzU29ydGVkQnlGYW1pbHlOYW1lIiwibGVzc29uR3JvdXBzIiwiZm9jdXNBcmVhTGVzc29uSWRzIiwiZGVlcGVyTGVhcm5pbmdDb3Vyc2UiLCJzZWxlY3RlZFN0dWRlbnRzIiwic2VjdGlvblByb2dyZXNzIiwidW5pdERhdGFCeVVuaXQiLCJzdHVkZW50TGV2ZWxQcm9ncmVzc0J5VW5pdCIsInN0dWRlbnRMZXNzb25Qcm9ncmVzc0J5VW5pdCIsImxlc3NvblByb2dyZXNzRm9yU2VjdGlvbiIsInN0dWRlbnRMYXN0VXBkYXRlQnlVbml0IiwibGVzc29uT2ZJbnRlcmVzdCIsInVuaXRTZWxlY3Rpb24iLCJsb2NhbGVzIiwibG9jYWxlQ29kZSIsImhhc093biIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwiaXNBcnJheSIsImlubmVyIiwiam9pbiIsImRlZmF1bHQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJkaXNwYXRjaCIsImdldFN0YXRlIiwibmV4dCIsImFjdGlvbiIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnRCeVNlbGVjdG9yIiwiaW5zZXJ0IiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImluc2VydFN0eWxlRWxlbWVudCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9TdW1tYXJ5UHJvZ3Jlc3NUYWJsZSIsIl9wcm9ncmVzc1Rlc3RIZWxwZXJzIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsImZyb20iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJzbGljZSIsInRlc3QiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJsZW4iLCJhcnIyIiwiY29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwicHJvZ3Jlc3Npb24iLCJUZW1wbGF0ZSIsInN0b3JlIiwiUHJvdmlkZXIiLCJVbmNvbm5lY3RlZFN1bW1hcnlQcm9ncmVzc1RhYmxlIiwicGVyZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=