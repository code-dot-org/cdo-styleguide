/*! For license information please see templates-certificates-GraduateToNextLevel-story.a4ed87d9.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5925],{"./src/templates/certificates/GraduateToNextLevel.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_congratsNextLevelActivityCards=__webpack_require__("./src/templates/certificates/congratsNextLevelActivityCards.js"),_VerticalImageResourceCard=_interopRequireDefault(__webpack_require__("./src/templates/VerticalImageResourceCard.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var GraduateToNextLevel=function GraduateToNextLevel(_ref){var scriptName=_ref.scriptName,courseTitle=_ref.courseTitle,courseDesc=_ref.courseDesc,courseInfo=_congratsNextLevelActivityCards.nextLevelCourseCards.find((function(courseCard){return scriptName&&scriptName.includes(courseCard.scriptName)}))||_congratsNextLevelActivityCards.defaultNextLevelCourseCard;return _react.default.createElement(_react.default.Fragment,null,_react.default.createElement("div",{id:"next-level-block"},_react.default.createElement("h1",{id:"next-level-title"},_locale.default.congratsNextLevelHeading()),_react.default.createElement(_VerticalImageResourceCard.default,{id:"course-card-".concat(courseInfo.scriptName),title:courseTitle||_locale.default.introToAppLabTitle(),description:courseDesc||_locale.default.introToAppLabDesc(),link:courseInfo.link,image:courseInfo.image,buttonText:courseInfo.buttonText,hasAdjustableHeight:!0})))};GraduateToNextLevel.propTypes={scriptName:_propTypes.default.string,courseTitle:_propTypes.default.string,courseDesc:_propTypes.default.string};exports.default=GraduateToNextLevel;module.exports=exports.default},"./src/templates/certificates/congratsNextLevelActivityCards.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.nextLevelCourseCards=exports.defaultNextLevelCourseCard=void 0;var _locale=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./src/util/locale-do-not-import.js"));var Course2={scriptName:"course2",link:"/s/course2",image:"course2",buttonText:_locale.default.viewCourse()},Course3={scriptName:"course3",link:"/s/course3",image:"course3",buttonText:_locale.default.viewCourse()},Course4={scriptName:"course4",link:"/s/course4",image:"course4",buttonText:_locale.default.viewCourse()},Applab={scriptName:"applab-intro",link:"/s/applab-intro/reset",image:"applab-tutorial",buttonText:_locale.default.applabTutorialButton()},CourseB={scriptName:"courseb",link:"/s/courseb",image:"courseB",buttonText:_locale.default.viewCourse()},CourseC={scriptName:"coursec",link:"/s/coursec",image:"courseC",buttonText:_locale.default.viewCourse()},CourseD={scriptName:"coursed",link:"/s/coursed",image:"courseD",buttonText:_locale.default.viewCourse()},CourseE={scriptName:"coursee",link:"/s/coursee",image:"courseE",buttonText:_locale.default.viewCourse()},CourseF={scriptName:"coursef",link:"/s/coursef",image:"courseF",buttonText:_locale.default.viewCourse()};exports.nextLevelCourseCards=[Course2,Course3,Course4,Applab,CourseB,CourseC,CourseD,CourseE,CourseF],exports.defaultNextLevelCourseCard=Applab},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/certificates/GraduateToNextLevel.story.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DefaultCard=exports.CourseF=exports.CourseE=exports.CourseD=exports.CourseC=exports.CourseB=exports.Course4=exports.Course3=exports.Course2=exports.AppLabIntro=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_GraduateToNextLevel=_interopRequireDefault(__webpack_require__("./src/templates/certificates/GraduateToNextLevel.jsx")),_decorators=__webpack_require__("./.storybook/decorators.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}exports.default={title:"Congrats/GraduateToNextLevel",component:_GraduateToNextLevel.default};var Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store:(0,_decorators.reduxStore)()},_react.default.createElement(_GraduateToNextLevel.default,_extends({courseDesc:"Ready for the next level? Students will do lots of things and use their brains to solve even more complex problems. By the end of this course, students will be able to do more things. Recommended for lots of grades."},args)))};(exports.DefaultCard=Template.bind({})).args={courseDesc:void 0},(exports.Course2=Template.bind({})).args={scriptName:"course2",courseTitle:"Course 2"},(exports.Course3=Template.bind({})).args={scriptName:"course3",courseTitle:"Course 3"},(exports.Course4=Template.bind({})).args={scriptName:"course4",courseTitle:"Course 4"},(exports.CourseB=Template.bind({})).args={scriptName:"courseb-2022",courseTitle:"Course B"},(exports.CourseC=Template.bind({})).args={scriptName:"coursec-2022",courseTitle:"Course C"},(exports.CourseD=Template.bind({})).args={scriptName:"coursed-2022",courseTitle:"Course D"},(exports.CourseE=Template.bind({})).args={scriptName:"coursee-2022",courseTitle:"Course E"},(exports.CourseF=Template.bind({})).args={scriptName:"coursef-2022",courseTitle:"Course F"},(exports.AppLabIntro=Template.bind({})).args={scriptName:"applab-intro",courseTitle:"App Lab Intro"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,