"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4341],{"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];throw Error("[Immer] minified error nr: "+n+(t.length?" "+t.map((function(n){return"'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(n){return!!n&&!!n[Q]}function t(n){var r;return!!n&&(function(n){if(!n||"object"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return t===Object||"function"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!(null===(r=n.constructor)||void 0===r?void 0:r[L])||s(n)||v(n))}function e(t){return r(t)||n(23,t),t[Q].t}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&"symbol"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?n.add(t):n[r]=t}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)||(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0)),n}function h(){n(2)}function y(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r)}function _(){return U}function j(n,r){r&&(b("Patches"),n.u=[],n.s=[],n.v=r)}function O(n){g(n),n.p.forEach(S),n.p=null}function g(n){n===U&&(U=n.l)}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b("ES5").S(e,r,o),o?(i[Q].P&&(O(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b("Patches").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o,u=o,a=!1;3===e.i&&(u=new Set(o),o.clear(),a=!0),i(u,(function(r,i){return A(n,e,o,r,i,t,a)})),x(n,o,!1),t&&n.u&&b("Patches").N(e,t,n.u,n.s)}return e.o}function A(e,i,o,a,c,s,v){if(r(c)){var p=M(e,c,s&&i&&3!==i.i&&!u(i.R,a)?s.concat(a):void 0);if(f(o,a,p),!r(p))return;e.m=!1}else v&&o.add(c);if(t(c)&&!y(c)){if(!e.h.D&&e._<1)return;M(e,c),i&&i.A.l||x(e,c)}}function x(n,r,t){void 0===t&&(t=!1),!n.l&&n.h.D&&n.m&&d(r,t)}function z(n,r){var t=n[Q];return(t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function k(n){n.P||(n.P=!0,n.l&&k(n.l))}function E(n){n.o||(n.o=l(n.t))}function N(n,r,t){var e=s(r)?b("MapSet").F(r,t):v(r)?b("MapSet").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,R:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b("ES5").J(r,t);return(t?t.A:_()).p.push(e),e}function R(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b("ES5").K(u)))return u.t;u.I=!0,e=D(r,c),u.I=!1}else e=D(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t))})),3===c?new Set(e):e}(e)}function D(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function F(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return en.get(r,n)},set:function(r){var t=this[Q];en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t)}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return!0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return!0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}var s={};m("ES5",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,""+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,R:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&"object"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.R,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)))})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t))}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MiddlewareArray:()=>MiddlewareArray,SHOULD_AUTOBATCH:()=>SHOULD_AUTOBATCH,TaskAbortError:()=>TaskAbortError,__DO_NOT_USE__ActionTypes:()=>redux.__DO_NOT_USE__ActionTypes,addListener:()=>addListener,applyMiddleware:()=>redux.applyMiddleware,autoBatchEnhancer:()=>autoBatchEnhancer,bindActionCreators:()=>redux.bindActionCreators,clearAllListeners:()=>clearAllListeners,combineReducers:()=>redux.combineReducers,compose:()=>redux.compose,configureStore:()=>configureStore,createAction:()=>createAction,createAsyncThunk:()=>createAsyncThunk,createDraftSafeSelector:()=>createDraftSafeSelector,createEntityAdapter:()=>createEntityAdapter,createImmutableStateInvariantMiddleware:()=>createImmutableStateInvariantMiddleware,createListenerMiddleware:()=>createListenerMiddleware,createNextState:()=>immer_esm,createReducer:()=>createReducer,createSelector:()=>createSelector,createSerializableStateInvariantMiddleware:()=>createSerializableStateInvariantMiddleware,createSlice:()=>createSlice,createStore:()=>redux.createStore,current:()=>R,findNonSerializableValue:()=>findNonSerializableValue,freeze:()=>d,getDefaultMiddleware:()=>getDefaultMiddleware,getType:()=>getType,isAllOf:()=>isAllOf,isAnyOf:()=>isAnyOf,isAsyncThunkAction:()=>isAsyncThunkAction,isDraft:()=>r,isFulfilled:()=>isFulfilled,isImmutableDefault:()=>isImmutableDefault,isPending:()=>isPending,isPlain:()=>isPlain,isPlainObject:()=>isPlainObject,isRejected:()=>isRejected,isRejectedWithValue:()=>isRejectedWithValue,legacy_createStore:()=>redux.legacy_createStore,miniSerializeError:()=>miniSerializeError,nanoid:()=>nanoid,original:()=>e,prepareAutoBatched:()=>prepareAutoBatched,removeListener:()=>removeListener,unwrapResult:()=>unwrapResult});var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",Z=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=N(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.R[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return!0;E(n),k(n)}return n.o[r]===t&&(void 0!==t||r in n.o)||Number.isNaN(t)&&Number.isNaN(n.o[r])||(n.o[r]=t,n.R[r]=!0),!0},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.R[r]=!1,E(n),k(n)):delete n.R[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),on.deleteProperty=function(r,t){return on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.D=!0,this.produce=function(r,i,o){if("function"==typeof r&&"function"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if("function"!=typeof i&&n(6),void 0!==o&&"function"!=typeof o&&n(7),t(r)){var c=w(e),s=N(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?O(c):g(c)}return"undefined"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||"object"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.D&&d(f,!0),o){var p=[],l=[];b("Patches").M(r,f,p,l),o(p,l)}return f}n(21,r)},this.produceWithPatches=function(n,r){if("function"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=R(e));var i=w(this),o=N(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(r,t){var i=(r&&r[Q]).A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.D=n},i.setUseProxies=function(r){r&&!B&&n(20),this.g=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b("Patches").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce;an.produceWithPatches.bind(an),an.setAutoFreeze.bind(an),an.setUseProxies.bind(an),an.applyPatches.bind(an),an.createDraft.bind(an),an.finishDraft.bind(an);const immer_esm=fn;var redux=__webpack_require__("./node_modules/redux/es/redux.js"),NOT_FOUND="NOT_FOUND";var defaultEqualityCheck=function defaultEqualityCheck(a,b){return a===b};function defaultMemoize(func,equalityCheckOrOptions){var providedOptions="object"==typeof equalityCheckOrOptions?equalityCheckOrOptions:{equalityCheck:equalityCheckOrOptions},_providedOptions$equa=providedOptions.equalityCheck,equalityCheck=void 0===_providedOptions$equa?defaultEqualityCheck:_providedOptions$equa,_providedOptions$maxS=providedOptions.maxSize,maxSize=void 0===_providedOptions$maxS?1:_providedOptions$maxS,resultEqualityCheck=providedOptions.resultEqualityCheck,comparator=function createCacheKeyComparator(equalityCheck){return function areArgumentsShallowlyEqual(prev,next){if(null===prev||null===next||prev.length!==next.length)return!1;for(var length=prev.length,i=0;i<length;i++)if(!equalityCheck(prev[i],next[i]))return!1;return!0}}(equalityCheck),cache=1===maxSize?function createSingletonCache(equals){var entry;return{get:function get(key){return entry&&equals(entry.key,key)?entry.value:NOT_FOUND},put:function put(key,value){entry={key,value}},getEntries:function getEntries(){return entry?[entry]:[]},clear:function clear(){entry=void 0}}}(comparator):function createLruCache(maxSize,equals){var entries=[];function get(key){var cacheIndex=entries.findIndex((function(entry){return equals(key,entry.key)}));if(cacheIndex>-1){var entry=entries[cacheIndex];return cacheIndex>0&&(entries.splice(cacheIndex,1),entries.unshift(entry)),entry.value}return NOT_FOUND}return{get,put:function put(key,value){get(key)===NOT_FOUND&&(entries.unshift({key,value}),entries.length>maxSize&&entries.pop())},getEntries:function getEntries(){return entries},clear:function clear(){entries=[]}}}(maxSize,comparator);function memoized(){var value=cache.get(arguments);if(value===NOT_FOUND){if(value=func.apply(null,arguments),resultEqualityCheck){var matchingEntry=cache.getEntries().find((function(entry){return resultEqualityCheck(entry.value,value)}));matchingEntry&&(value=matchingEntry.value)}cache.put(arguments,value)}return value}return memoized.clearCache=function(){return cache.clear()},memoized}function createSelectorCreator(memoize){for(var _len=arguments.length,memoizeOptionsFromArgs=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)memoizeOptionsFromArgs[_key-1]=arguments[_key];return function createSelector(){for(var _len2=arguments.length,funcs=new Array(_len2),_key2=0;_key2<_len2;_key2++)funcs[_key2]=arguments[_key2];var _lastResult,_recomputations=0,directlyPassedOptions={memoizeOptions:void 0},resultFunc=funcs.pop();if("object"==typeof resultFunc&&(directlyPassedOptions=resultFunc,resultFunc=funcs.pop()),"function"!=typeof resultFunc)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof resultFunc+"]");var _directlyPassedOption2=directlyPassedOptions.memoizeOptions,memoizeOptions=void 0===_directlyPassedOption2?memoizeOptionsFromArgs:_directlyPassedOption2,finalMemoizeOptions=Array.isArray(memoizeOptions)?memoizeOptions:[memoizeOptions],dependencies=function getDependencies(funcs){var dependencies=Array.isArray(funcs[0])?funcs[0]:funcs;if(!dependencies.every((function(dep){return"function"==typeof dep}))){var dependencyTypes=dependencies.map((function(dep){return"function"==typeof dep?"function "+(dep.name||"unnamed")+"()":typeof dep})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+dependencyTypes+"]")}return dependencies}(funcs),memoizedResultFunc=memoize.apply(void 0,[function recomputationWrapper(){return _recomputations++,resultFunc.apply(null,arguments)}].concat(finalMemoizeOptions)),selector=memoize((function dependenciesChecker(){for(var params=[],length=dependencies.length,i=0;i<length;i++)params.push(dependencies[i].apply(null,arguments));return _lastResult=memoizedResultFunc.apply(null,params)}));return Object.assign(selector,{resultFunc,memoizedResultFunc,dependencies,lastResult:function lastResult(){return _lastResult},recomputations:function recomputations(){return _recomputations},resetRecomputations:function resetRecomputations(){return _recomputations=0}}),selector}}var createSelector=createSelectorCreator(defaultMemoize);function createThunkMiddleware(extraArgument){return function middleware(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware;const es=thunk;__webpack_require__("./node_modules/process/browser.js");var extendStatics,__extends=(extendStatics=function(d,b){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)Object.prototype.hasOwnProperty.call(b,p)&&(d[p]=b[p])},extendStatics(d,b)},function(d,b){if("function"!=typeof b&&null!==b)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}),__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__spreadArray=function(to,from){for(var i=0,il=from.length,j=to.length;i<il;i++,j++)to[j]=from[i];return to},__defProp=Object.defineProperty,__defProps=Object.defineProperties,__getOwnPropDescs=Object.getOwnPropertyDescriptors,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=function(obj,key,value){return key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value},__spreadValues=function(a,b){for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var _i=0,_c=__getOwnPropSymbols(b);_i<_c.length;_i++){prop=_c[_i];__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop])}return a},__spreadProps=function(a,b){return __defProps(a,__getOwnPropDescs(b))},__async=function(__this,__arguments,generator){return new Promise((function(resolve,reject){var fulfilled=function(value){try{step(generator.next(value))}catch(e){reject(e)}},rejected=function(value){try{step(generator.throw(value))}catch(e){reject(e)}},step=function(x){return x.done?resolve(x.value):Promise.resolve(x.value).then(fulfilled,rejected)};step((generator=generator.apply(__this,__arguments)).next())}))},createDraftSafeSelector=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];var selector=createSelector.apply(void 0,args);return function(value){for(var rest=[],_i=1;_i<arguments.length;_i++)rest[_i-1]=arguments[_i];return selector.apply(void 0,__spreadArray([r(value)?R(value):value],rest))}},composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?redux.compose:redux.compose.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;function isPlainObject(value){if("object"!=typeof value||null===value)return!1;var proto=Object.getPrototypeOf(value);if(null===proto)return!0;for(var baseProto=proto;null!==Object.getPrototypeOf(baseProto);)baseProto=Object.getPrototypeOf(baseProto);return proto===baseProto}var MiddlewareArray=function(_super){function MiddlewareArray(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];var _this=_super.apply(this,args)||this;return Object.setPrototypeOf(_this,MiddlewareArray.prototype),_this}return __extends(MiddlewareArray,_super),Object.defineProperty(MiddlewareArray,Symbol.species,{get:function(){return MiddlewareArray},enumerable:!1,configurable:!0}),MiddlewareArray.prototype.concat=function(){for(var arr=[],_i=0;_i<arguments.length;_i++)arr[_i]=arguments[_i];return _super.prototype.concat.apply(this,arr)},MiddlewareArray.prototype.prepend=function(){for(var arr=[],_i=0;_i<arguments.length;_i++)arr[_i]=arguments[_i];return 1===arr.length&&Array.isArray(arr[0])?new(MiddlewareArray.bind.apply(MiddlewareArray,__spreadArray([void 0],arr[0].concat(this)))):new(MiddlewareArray.bind.apply(MiddlewareArray,__spreadArray([void 0],arr.concat(this))))},MiddlewareArray}(Array);function freezeDraftable(val){return t(val)?immer_esm(val,(function(){})):val}function isImmutableDefault(value){return"object"!=typeof value||null==value||Object.isFrozen(value)}function createImmutableStateInvariantMiddleware(options){return void 0===options&&(options={}),function(){return function(next){return function(action){return next(action)}}}}function isPlain(val){var type=typeof val;return null==val||"string"===type||"boolean"===type||"number"===type||Array.isArray(val)||isPlainObject(val)}function findNonSerializableValue(value,path,isSerializable,getEntries,ignoredPaths,cache){var foundNestedSerializable;if(void 0===path&&(path=""),void 0===isSerializable&&(isSerializable=isPlain),void 0===ignoredPaths&&(ignoredPaths=[]),!isSerializable(value))return{keyPath:path||"<root>",value};if("object"!=typeof value||null===value)return!1;if(null==cache?void 0:cache.has(value))return!1;for(var entries=null!=getEntries?getEntries(value):Object.entries(value),hasIgnoredPaths=ignoredPaths.length>0,_loop_2=function(key,nestedValue){var nestedPath=path?path+"."+key:key;if(hasIgnoredPaths&&ignoredPaths.some((function(ignored){return ignored instanceof RegExp?ignored.test(nestedPath):nestedPath===ignored})))return"continue";return isSerializable(nestedValue)?"object"==typeof nestedValue&&(foundNestedSerializable=findNonSerializableValue(nestedValue,nestedPath,isSerializable,getEntries,ignoredPaths,cache))?{value:foundNestedSerializable}:void 0:{value:{keyPath:nestedPath,value:nestedValue}}},_i=0,entries_1=entries;_i<entries_1.length;_i++){var _c=entries_1[_i],state_2=_loop_2(_c[0],_c[1]);if("object"==typeof state_2)return state_2.value}return cache&&isNestedFrozen(value)&&cache.add(value),!1}function isNestedFrozen(value){if(!Object.isFrozen(value))return!1;for(var _i=0,_c=Object.values(value);_i<_c.length;_i++){var nestedValue=_c[_i];if("object"==typeof nestedValue&&null!==nestedValue&&!isNestedFrozen(nestedValue))return!1}return!0}function createSerializableStateInvariantMiddleware(options){return void 0===options&&(options={}),function(){return function(next){return function(action){return next(action)}}}}function getDefaultMiddleware(options){void 0===options&&(options={});var _c=options.thunk,thunk=void 0===_c||_c,middlewareArray=(options.immutableCheck,options.serializableCheck,new MiddlewareArray);return thunk&&(!function isBoolean(x){return"boolean"==typeof x}(thunk)?middlewareArray.push(es.withExtraArgument(thunk.extraArgument)):middlewareArray.push(es)),middlewareArray}var IS_PRODUCTION=!0;function configureStore(options){var rootReducer,curriedGetDefaultMiddleware=function curryGetDefaultMiddleware(){return function curriedGetDefaultMiddleware(options){return getDefaultMiddleware(options)}}(),_c=options||{},_d=_c.reducer,reducer=void 0===_d?void 0:_d,_e=_c.middleware,middleware=void 0===_e?curriedGetDefaultMiddleware():_e,_f=_c.devTools,devTools=void 0===_f||_f,_g=_c.preloadedState,preloadedState=void 0===_g?void 0:_g,_h=_c.enhancers,enhancers=void 0===_h?void 0:_h;if("function"==typeof reducer)rootReducer=reducer;else{if(!isPlainObject(reducer))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');rootReducer=(0,redux.combineReducers)(reducer)}var finalMiddleware=middleware;if("function"==typeof finalMiddleware&&(finalMiddleware=finalMiddleware(curriedGetDefaultMiddleware),!IS_PRODUCTION&&!Array.isArray(finalMiddleware)))throw new Error("when using a middleware builder function, an array of middleware must be returned");if(!IS_PRODUCTION&&finalMiddleware.some((function(item){return"function"!=typeof item})))throw new Error("each middleware provided to configureStore must be a function");var middlewareEnhancer=redux.applyMiddleware.apply(void 0,finalMiddleware),finalCompose=redux.compose;devTools&&(finalCompose=composeWithDevTools(__spreadValues({trace:!IS_PRODUCTION},"object"==typeof devTools&&devTools)));var storeEnhancers=[middlewareEnhancer];Array.isArray(enhancers)?storeEnhancers=__spreadArray([middlewareEnhancer],enhancers):"function"==typeof enhancers&&(storeEnhancers=enhancers(storeEnhancers));var composedEnhancer=finalCompose.apply(void 0,storeEnhancers);return(0,redux.createStore)(rootReducer,preloadedState,composedEnhancer)}function createAction(type,prepareAction){function actionCreator(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];if(prepareAction){var prepared=prepareAction.apply(void 0,args);if(!prepared)throw new Error("prepareAction did not return an object");return __spreadValues(__spreadValues({type,payload:prepared.payload},"meta"in prepared&&{meta:prepared.meta}),"error"in prepared&&{error:prepared.error})}return{type,payload:args[0]}}return actionCreator.toString=function(){return""+type},actionCreator.type=type,actionCreator.match=function(action){return action.type===type},actionCreator}function isValidKey(key){return["type","payload","error","meta"].indexOf(key)>-1}function getType(actionCreator){return""+actionCreator}function executeReducerBuilderCallback(builderCallback){var defaultCaseReducer,actionsMap={},actionMatchers=[],builder={addCase:function(typeOrActionCreator,reducer){var type="string"==typeof typeOrActionCreator?typeOrActionCreator:typeOrActionCreator.type;if(type in actionsMap)throw new Error("addCase cannot be called with two reducers for the same action type");return actionsMap[type]=reducer,builder},addMatcher:function(matcher,reducer){return actionMatchers.push({matcher,reducer}),builder},addDefaultCase:function(reducer){return defaultCaseReducer=reducer,builder}};return builderCallback(builder),[actionsMap,actionMatchers,defaultCaseReducer]}function createReducer(initialState,mapOrBuilderCallback,actionMatchers,defaultCaseReducer){void 0===actionMatchers&&(actionMatchers=[]);var getInitialState,_c="function"==typeof mapOrBuilderCallback?executeReducerBuilderCallback(mapOrBuilderCallback):[mapOrBuilderCallback,actionMatchers,defaultCaseReducer],actionsMap=_c[0],finalActionMatchers=_c[1],finalDefaultCaseReducer=_c[2];if(function isStateFunction(x){return"function"==typeof x}(initialState))getInitialState=function(){return freezeDraftable(initialState())};else{var frozenInitialState_1=freezeDraftable(initialState);getInitialState=function(){return frozenInitialState_1}}function reducer(state,action){void 0===state&&(state=getInitialState());var caseReducers=__spreadArray([actionsMap[action.type]],finalActionMatchers.filter((function(_c){return(0,_c.matcher)(action)})).map((function(_c){return _c.reducer})));return 0===caseReducers.filter((function(cr){return!!cr})).length&&(caseReducers=[finalDefaultCaseReducer]),caseReducers.reduce((function(previousState,caseReducer){if(caseReducer){var result;if(r(previousState))return void 0===(result=caseReducer(previousState,action))?previousState:result;if(t(previousState))return immer_esm(previousState,(function(draft){return caseReducer(draft,action)}));if(void 0===(result=caseReducer(previousState,action))){if(null===previousState)return previousState;throw Error("A case reducer on a non-draftable value must not return undefined")}return result}return previousState}),state)}return reducer.getInitialState=getInitialState,reducer}function createSlice(options){var name=options.name;if(!name)throw new Error("`name` is a required option for createSlice");var _reducer,initialState="function"==typeof options.initialState?options.initialState:freezeDraftable(options.initialState),reducers=options.reducers||{},reducerNames=Object.keys(reducers),sliceCaseReducersByName={},sliceCaseReducersByType={},actionCreators={};function buildReducer(){var _c="function"==typeof options.extraReducers?executeReducerBuilderCallback(options.extraReducers):[options.extraReducers],_d=_c[0],extraReducers=void 0===_d?{}:_d,_e=_c[1],actionMatchers=void 0===_e?[]:_e,_f=_c[2],defaultCaseReducer=void 0===_f?void 0:_f,finalCaseReducers=__spreadValues(__spreadValues({},extraReducers),sliceCaseReducersByType);return createReducer(initialState,(function(builder){for(var key in finalCaseReducers)builder.addCase(key,finalCaseReducers[key]);for(var _i=0,actionMatchers_1=actionMatchers;_i<actionMatchers_1.length;_i++){var m=actionMatchers_1[_i];builder.addMatcher(m.matcher,m.reducer)}defaultCaseReducer&&builder.addDefaultCase(defaultCaseReducer)}))}return reducerNames.forEach((function(reducerName){var caseReducer,prepareCallback,maybeReducerWithPrepare=reducers[reducerName],type=function getType2(slice,actionKey){return slice+"/"+actionKey}(name,reducerName);"reducer"in maybeReducerWithPrepare?(caseReducer=maybeReducerWithPrepare.reducer,prepareCallback=maybeReducerWithPrepare.prepare):caseReducer=maybeReducerWithPrepare,sliceCaseReducersByName[reducerName]=caseReducer,sliceCaseReducersByType[type]=caseReducer,actionCreators[reducerName]=prepareCallback?createAction(type,prepareCallback):createAction(type)})),{name,reducer:function(state,action){return _reducer||(_reducer=buildReducer()),_reducer(state,action)},actions:actionCreators,caseReducers:sliceCaseReducersByName,getInitialState:function(){return _reducer||(_reducer=buildReducer()),_reducer.getInitialState()}}}function createStateOperator(mutator){return function operation(state,arg){function isPayloadActionArgument(arg2){return function isFSA(action){return isPlainObject(action)&&"string"==typeof action.type&&Object.keys(action).every(isValidKey)}(arg2)}var runMutator=function(draft){isPayloadActionArgument(arg)?mutator(arg.payload,draft):mutator(arg,draft)};return r(state)?(runMutator(state),state):immer_esm(state,runMutator)}}function selectIdValue(entity,selectId){return selectId(entity)}function ensureEntitiesArray(entities){return Array.isArray(entities)||(entities=Object.values(entities)),entities}function splitAddedUpdatedEntities(newEntities,selectId,state){for(var added=[],updated=[],_i=0,newEntities_1=newEntities=ensureEntitiesArray(newEntities);_i<newEntities_1.length;_i++){var entity=newEntities_1[_i],id=selectIdValue(entity,selectId);id in state.entities?updated.push({id,changes:entity}):added.push(entity)}return[added,updated]}function createUnsortedStateAdapter(selectId){function addOneMutably(entity,state){var key=selectIdValue(entity,selectId);key in state.entities||(state.ids.push(key),state.entities[key]=entity)}function addManyMutably(newEntities,state){for(var _i=0,newEntities_2=newEntities=ensureEntitiesArray(newEntities);_i<newEntities_2.length;_i++){addOneMutably(newEntities_2[_i],state)}}function setOneMutably(entity,state){var key=selectIdValue(entity,selectId);key in state.entities||state.ids.push(key),state.entities[key]=entity}function removeManyMutably(keys,state){var didMutate=!1;keys.forEach((function(key){key in state.entities&&(delete state.entities[key],didMutate=!0)})),didMutate&&(state.ids=state.ids.filter((function(id){return id in state.entities})))}function updateManyMutably(updates,state){var newKeys={},updatesPerEntity={};if(updates.forEach((function(update){update.id in state.entities&&(updatesPerEntity[update.id]={id:update.id,changes:__spreadValues(__spreadValues({},updatesPerEntity[update.id]?updatesPerEntity[update.id].changes:null),update.changes)})})),(updates=Object.values(updatesPerEntity)).length>0){var didMutateIds=updates.filter((function(update){return function takeNewKey(keys,update,state){var original2=state.entities[update.id],updated=Object.assign({},original2,update.changes),newKey=selectIdValue(updated,selectId),hasNewKey=newKey!==update.id;return hasNewKey&&(keys[update.id]=newKey,delete state.entities[update.id]),state.entities[newKey]=updated,hasNewKey}(newKeys,update,state)})).length>0;didMutateIds&&(state.ids=Object.keys(state.entities))}}function upsertManyMutably(newEntities,state){var _c=splitAddedUpdatedEntities(newEntities,selectId,state),added=_c[0];updateManyMutably(_c[1],state),addManyMutably(added,state)}return{removeAll:(mutator=function removeAllMutably(state){Object.assign(state,{ids:[],entities:{}})},operator=createStateOperator((function(_,state){return mutator(state)})),function operation(state){return operator(state,void 0)}),addOne:createStateOperator(addOneMutably),addMany:createStateOperator(addManyMutably),setOne:createStateOperator(setOneMutably),setMany:createStateOperator((function setManyMutably(newEntities,state){for(var _i=0,newEntities_3=newEntities=ensureEntitiesArray(newEntities);_i<newEntities_3.length;_i++){setOneMutably(newEntities_3[_i],state)}})),setAll:createStateOperator((function setAllMutably(newEntities,state){newEntities=ensureEntitiesArray(newEntities),state.ids=[],state.entities={},addManyMutably(newEntities,state)})),updateOne:createStateOperator((function updateOneMutably(update,state){return updateManyMutably([update],state)})),updateMany:createStateOperator(updateManyMutably),upsertOne:createStateOperator((function upsertOneMutably(entity,state){return upsertManyMutably([entity],state)})),upsertMany:createStateOperator(upsertManyMutably),removeOne:createStateOperator((function removeOneMutably(key,state){return removeManyMutably([key],state)})),removeMany:createStateOperator(removeManyMutably)};var mutator,operator}function createEntityAdapter(options){void 0===options&&(options={});var _c=__spreadValues({sortComparer:!1,selectId:function(instance){return instance.id}},options),selectId=_c.selectId,sortComparer=_c.sortComparer,stateFactory=function createInitialStateFactory(){return{getInitialState:function getInitialState(additionalState){return void 0===additionalState&&(additionalState={}),Object.assign({ids:[],entities:{}},additionalState)}}}(),selectorsFactory=function createSelectorsFactory(){return{getSelectors:function getSelectors(selectState){var selectIds=function(state){return state.ids},selectEntities=function(state){return state.entities},selectAll=createDraftSafeSelector(selectIds,selectEntities,(function(ids,entities){return ids.map((function(id){return entities[id]}))})),selectId=function(_,id){return id},selectById=function(entities,id){return entities[id]},selectTotal=createDraftSafeSelector(selectIds,(function(ids){return ids.length}));if(!selectState)return{selectIds,selectEntities,selectAll,selectTotal,selectById:createDraftSafeSelector(selectEntities,selectId,selectById)};var selectGlobalizedEntities=createDraftSafeSelector(selectState,selectEntities);return{selectIds:createDraftSafeSelector(selectState,selectIds),selectEntities:selectGlobalizedEntities,selectAll:createDraftSafeSelector(selectState,selectAll),selectTotal:createDraftSafeSelector(selectState,selectTotal),selectById:createDraftSafeSelector(selectGlobalizedEntities,selectId,selectById)}}}}(),stateAdapter=sortComparer?function createSortedStateAdapter(selectId,sort){var _c=createUnsortedStateAdapter(selectId);function addManyMutably(newEntities,state){var models=(newEntities=ensureEntitiesArray(newEntities)).filter((function(model){return!(selectIdValue(model,selectId)in state.entities)}));0!==models.length&&merge(models,state)}function setManyMutably(newEntities,state){0!==(newEntities=ensureEntitiesArray(newEntities)).length&&merge(newEntities,state)}function updateManyMutably(updates,state){for(var appliedUpdates=!1,_i=0,updates_1=updates;_i<updates_1.length;_i++){var update=updates_1[_i],entity=state.entities[update.id];if(entity){appliedUpdates=!0,Object.assign(entity,update.changes);var newId=selectId(entity);update.id!==newId&&(delete state.entities[update.id],state.entities[newId]=entity)}}appliedUpdates&&resortEntities(state)}function upsertManyMutably(newEntities,state){var _c=splitAddedUpdatedEntities(newEntities,selectId,state),added=_c[0];updateManyMutably(_c[1],state),addManyMutably(added,state)}function merge(models,state){models.forEach((function(model){state.entities[selectId(model)]=model})),resortEntities(state)}function resortEntities(state){var allEntities=Object.values(state.entities);allEntities.sort(sort);var newSortedIds=allEntities.map(selectId);(function areArraysEqual(a,b){if(a.length!==b.length)return!1;for(var i=0;i<a.length&&i<b.length;i++)if(a[i]!==b[i])return!1;return!0})(state.ids,newSortedIds)||(state.ids=newSortedIds)}return{removeOne:_c.removeOne,removeMany:_c.removeMany,removeAll:_c.removeAll,addOne:createStateOperator((function addOneMutably(entity,state){return addManyMutably([entity],state)})),updateOne:createStateOperator((function updateOneMutably(update,state){return updateManyMutably([update],state)})),upsertOne:createStateOperator((function upsertOneMutably(entity,state){return upsertManyMutably([entity],state)})),setOne:createStateOperator((function setOneMutably(entity,state){return setManyMutably([entity],state)})),setMany:createStateOperator(setManyMutably),setAll:createStateOperator((function setAllMutably(newEntities,state){newEntities=ensureEntitiesArray(newEntities),state.entities={},state.ids=[],addManyMutably(newEntities,state)})),addMany:createStateOperator(addManyMutably),updateMany:createStateOperator(updateManyMutably),upsertMany:createStateOperator(upsertManyMutably)}}(selectId,sortComparer):createUnsortedStateAdapter(selectId);return __spreadValues(__spreadValues(__spreadValues({selectId,sortComparer},stateFactory),selectorsFactory),stateAdapter)}var nanoid=function(size){void 0===size&&(size=21);for(var id="",i=size;i--;)id+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return id},commonProperties=["name","message","stack","code"],RejectWithValue=function RejectWithValue(payload,meta){this.payload=payload,this.meta=meta},FulfillWithMeta=function FulfillWithMeta(payload,meta){this.payload=payload,this.meta=meta},miniSerializeError=function(value){if("object"==typeof value&&null!==value){for(var simpleError={},_i=0,commonProperties_1=commonProperties;_i<commonProperties_1.length;_i++){var property=commonProperties_1[_i];"string"==typeof value[property]&&(simpleError[property]=value[property])}return simpleError}return{message:String(value)}},createAsyncThunk=function(){function createAsyncThunk2(typePrefix,payloadCreator,options){var fulfilled=createAction(typePrefix+"/fulfilled",(function(payload,requestId,arg,meta){return{payload,meta:__spreadProps(__spreadValues({},meta||{}),{arg,requestId,requestStatus:"fulfilled"})}})),pending=createAction(typePrefix+"/pending",(function(requestId,arg,meta){return{payload:void 0,meta:__spreadProps(__spreadValues({},meta||{}),{arg,requestId,requestStatus:"pending"})}})),rejected=createAction(typePrefix+"/rejected",(function(error,requestId,arg,payload,meta){return{payload,error:(options&&options.serializeError||miniSerializeError)(error||"Rejected"),meta:__spreadProps(__spreadValues({},meta||{}),{arg,requestId,rejectedWithValue:!!payload,requestStatus:"rejected",aborted:"AbortError"===(null==error?void 0:error.name),condition:"ConditionError"===(null==error?void 0:error.name)})}})),AC="undefined"!=typeof AbortController?AbortController:function(){function class_1(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return class_1.prototype.abort=function(){0},class_1}();return Object.assign((function actionCreator(arg){return function(dispatch,getState,extra){var abortReason,requestId=(null==options?void 0:options.idGenerator)?options.idGenerator(arg):nanoid(),abortController=new AC;function abort(reason){abortReason=reason,abortController.abort()}var promise2=function(){return __async(this,null,(function(){var _a,_b,finalAction,conditionResult,abortedPromise,err_1;return __generator(this,(function(_c){switch(_c.label){case 0:return _c.trys.push([0,4,,5]),function isThenable(value){return null!==value&&"object"==typeof value&&"function"==typeof value.then}(conditionResult=null==(_a=null==options?void 0:options.condition)?void 0:_a.call(options,arg,{getState,extra}))?[4,conditionResult]:[3,2];case 1:conditionResult=_c.sent(),_c.label=2;case 2:if(!1===conditionResult||abortController.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return!0,abortedPromise=new Promise((function(_,reject){return abortController.signal.addEventListener("abort",(function(){return reject({name:"AbortError",message:abortReason||"Aborted"})}))})),dispatch(pending(requestId,arg,null==(_b=null==options?void 0:options.getPendingMeta)?void 0:_b.call(options,{requestId,arg},{getState,extra}))),[4,Promise.race([abortedPromise,Promise.resolve(payloadCreator(arg,{dispatch,getState,extra,requestId,signal:abortController.signal,abort,rejectWithValue:function(value,meta){return new RejectWithValue(value,meta)},fulfillWithValue:function(value,meta){return new FulfillWithMeta(value,meta)}})).then((function(result){if(result instanceof RejectWithValue)throw result;return result instanceof FulfillWithMeta?fulfilled(result.payload,requestId,arg,result.meta):fulfilled(result,requestId,arg)}))])];case 3:return finalAction=_c.sent(),[3,5];case 4:return err_1=_c.sent(),finalAction=err_1 instanceof RejectWithValue?rejected(null,requestId,arg,err_1.payload,err_1.meta):rejected(err_1,requestId,arg),[3,5];case 5:return options&&!options.dispatchConditionRejection&&rejected.match(finalAction)&&finalAction.meta.condition||dispatch(finalAction),[2,finalAction]}}))}))}();return Object.assign(promise2,{abort,requestId,arg,unwrap:function(){return promise2.then(unwrapResult)}})}}),{pending,rejected,fulfilled,typePrefix})}return createAsyncThunk2.withTypes=function(){return createAsyncThunk2},createAsyncThunk2}();function unwrapResult(action){if(action.meta&&action.meta.rejectedWithValue)throw action.payload;if(action.error)throw action.error;return action.payload}var matches=function(matcher,action){return function(v){return v&&"function"==typeof v.match}(matcher)?matcher.match(action):matcher(action)};function isAnyOf(){for(var matchers=[],_i=0;_i<arguments.length;_i++)matchers[_i]=arguments[_i];return function(action){return matchers.some((function(matcher){return matches(matcher,action)}))}}function isAllOf(){for(var matchers=[],_i=0;_i<arguments.length;_i++)matchers[_i]=arguments[_i];return function(action){return matchers.every((function(matcher){return matches(matcher,action)}))}}function hasExpectedRequestMetadata(action,validStatus){if(!action||!action.meta)return!1;var hasValidRequestId="string"==typeof action.meta.requestId,hasValidRequestStatus=validStatus.indexOf(action.meta.requestStatus)>-1;return hasValidRequestId&&hasValidRequestStatus}function isAsyncThunkArray(a){return"function"==typeof a[0]&&"pending"in a[0]&&"fulfilled"in a[0]&&"rejected"in a[0]}function isPending(){for(var asyncThunks=[],_i=0;_i<arguments.length;_i++)asyncThunks[_i]=arguments[_i];return 0===asyncThunks.length?function(action){return hasExpectedRequestMetadata(action,["pending"])}:isAsyncThunkArray(asyncThunks)?function(action){var matchers=asyncThunks.map((function(asyncThunk){return asyncThunk.pending}));return isAnyOf.apply(void 0,matchers)(action)}:isPending()(asyncThunks[0])}function isRejected(){for(var asyncThunks=[],_i=0;_i<arguments.length;_i++)asyncThunks[_i]=arguments[_i];return 0===asyncThunks.length?function(action){return hasExpectedRequestMetadata(action,["rejected"])}:isAsyncThunkArray(asyncThunks)?function(action){var matchers=asyncThunks.map((function(asyncThunk){return asyncThunk.rejected}));return isAnyOf.apply(void 0,matchers)(action)}:isRejected()(asyncThunks[0])}function isRejectedWithValue(){for(var asyncThunks=[],_i=0;_i<arguments.length;_i++)asyncThunks[_i]=arguments[_i];var hasFlag=function(action){return action&&action.meta&&action.meta.rejectedWithValue};return 0===asyncThunks.length||isAsyncThunkArray(asyncThunks)?function(action){return isAllOf(isRejected.apply(void 0,asyncThunks),hasFlag)(action)}:isRejectedWithValue()(asyncThunks[0])}function isFulfilled(){for(var asyncThunks=[],_i=0;_i<arguments.length;_i++)asyncThunks[_i]=arguments[_i];return 0===asyncThunks.length?function(action){return hasExpectedRequestMetadata(action,["fulfilled"])}:isAsyncThunkArray(asyncThunks)?function(action){var matchers=asyncThunks.map((function(asyncThunk){return asyncThunk.fulfilled}));return isAnyOf.apply(void 0,matchers)(action)}:isFulfilled()(asyncThunks[0])}function isAsyncThunkAction(){for(var asyncThunks=[],_i=0;_i<arguments.length;_i++)asyncThunks[_i]=arguments[_i];return 0===asyncThunks.length?function(action){return hasExpectedRequestMetadata(action,["pending","fulfilled","rejected"])}:isAsyncThunkArray(asyncThunks)?function(action){for(var matchers=[],_i=0,asyncThunks_1=asyncThunks;_i<asyncThunks_1.length;_i++){var asyncThunk=asyncThunks_1[_i];matchers.push(asyncThunk.pending,asyncThunk.rejected,asyncThunk.fulfilled)}return isAnyOf.apply(void 0,matchers)(action)}:isAsyncThunkAction()(asyncThunks[0])}var assertFunction=function(func,expected){if("function"!=typeof func)throw new TypeError(expected+" is not a function")},noop=function(){},catchRejection=function(promise2,onError){return void 0===onError&&(onError=noop),promise2.catch(onError),promise2},addAbortSignalListener=function(abortSignal,callback){return abortSignal.addEventListener("abort",callback,{once:!0}),function(){return abortSignal.removeEventListener("abort",callback)}},abortControllerWithReason=function(abortController,reason){var signal=abortController.signal;signal.aborted||("reason"in signal||Object.defineProperty(signal,"reason",{enumerable:!0,value:reason,configurable:!0,writable:!0}),abortController.abort(reason))},listenerCancelled="listener-cancelled",listenerCompleted="listener-completed",TaskAbortError=function TaskAbortError(code){this.code=code,this.name="TaskAbortError",this.message="task cancelled (reason: "+code+")"},validateActive=function(signal){if(signal.aborted)throw new TaskAbortError(signal.reason)};function raceWithSignal(signal,promise2){var cleanup=noop;return new Promise((function(resolve,reject){var notifyRejection=function(){return reject(new TaskAbortError(signal.reason))};signal.aborted?notifyRejection():(cleanup=addAbortSignalListener(signal,notifyRejection),promise2.finally((function(){return cleanup()})).then(resolve,reject))})).finally((function(){cleanup=noop}))}var createPause=function(signal){return function(promise2){return catchRejection(raceWithSignal(signal,promise2).then((function(output){return validateActive(signal),output})))}},createDelay=function(signal){var pause=createPause(signal);return function(timeoutMs){return pause(new Promise((function(resolve){return setTimeout(resolve,timeoutMs)})))}},redux_toolkit_esm_assign=Object.assign,INTERNAL_NIL_TOKEN={},alm="listenerMiddleware",createFork=function(parentAbortSignal){return function(taskExecutor){assertFunction(taskExecutor,"taskExecutor");var controller,childAbortController=new AbortController;controller=childAbortController,addAbortSignalListener(parentAbortSignal,(function(){return abortControllerWithReason(controller,parentAbortSignal.reason)}));var task2,cleanUp,result=(task2=function(){return __async(void 0,null,(function(){var result2;return __generator(this,(function(_c){switch(_c.label){case 0:return validateActive(parentAbortSignal),validateActive(childAbortController.signal),[4,taskExecutor({pause:createPause(childAbortController.signal),delay:createDelay(childAbortController.signal),signal:childAbortController.signal})];case 1:return result2=_c.sent(),validateActive(childAbortController.signal),[2,result2]}}))}))},cleanUp=function(){return abortControllerWithReason(childAbortController,"task-completed")},__async(void 0,null,(function(){var error_1;return __generator(this,(function(_c){switch(_c.label){case 0:return _c.trys.push([0,3,4,5]),[4,Promise.resolve()];case 1:return _c.sent(),[4,task2()];case 2:return[2,{status:"ok",value:_c.sent()}];case 3:return[2,{status:(error_1=_c.sent())instanceof TaskAbortError?"cancelled":"rejected",error:error_1}];case 4:return null==cleanUp||cleanUp(),[7];case 5:return[2]}}))})));return{result:createPause(parentAbortSignal)(result),cancel:function(){abortControllerWithReason(childAbortController,"task-cancelled")}}}},createTakePattern=function(startListening,signal){return function(predicate,timeout){return catchRejection(function(predicate,timeout){return __async(void 0,null,(function(){var unsubscribe,tuplePromise,promises,output;return __generator(this,(function(_c){switch(_c.label){case 0:validateActive(signal),unsubscribe=function(){},tuplePromise=new Promise((function(resolve,reject){var stopListening=startListening({predicate,effect:function(action,listenerApi){listenerApi.unsubscribe(),resolve([action,listenerApi.getState(),listenerApi.getOriginalState()])}});unsubscribe=function(){stopListening(),reject()}})),promises=[tuplePromise],null!=timeout&&promises.push(new Promise((function(resolve){return setTimeout(resolve,timeout,null)}))),_c.label=1;case 1:return _c.trys.push([1,,3,4]),[4,raceWithSignal(signal,Promise.race(promises))];case 2:return output=_c.sent(),validateActive(signal),[2,output];case 3:return unsubscribe(),[7];case 4:return[2]}}))}))}(predicate,timeout))}},getListenerEntryPropsFrom=function(options){var type=options.type,actionCreator=options.actionCreator,matcher=options.matcher,predicate=options.predicate,effect=options.effect;if(type)predicate=createAction(type).match;else if(actionCreator)type=actionCreator.type,predicate=actionCreator.match;else if(matcher)predicate=matcher;else if(!predicate)throw new Error("Creating or removing a listener requires one of the known fields for matching an action");return assertFunction(effect,"options.listener"),{predicate,type,effect}},createListenerEntry=function(options){var _c=getListenerEntryPropsFrom(options),type=_c.type,predicate=_c.predicate,effect=_c.effect;return{id:nanoid(),effect,type,predicate,pending:new Set,unsubscribe:function(){throw new Error("Unsubscribe not initialized")}}},cancelActiveListeners=function(entry){entry.pending.forEach((function(controller){abortControllerWithReason(controller,listenerCancelled)}))},createClearListenerMiddleware=function(listenerMap){return function(){listenerMap.forEach(cancelActiveListeners),listenerMap.clear()}},safelyNotifyError=function(errorHandler,errorToNotify,errorInfo){try{errorHandler(errorToNotify,errorInfo)}catch(errorHandlerError){setTimeout((function(){throw errorHandlerError}),0)}},addListener=createAction(alm+"/add"),clearAllListeners=createAction(alm+"/removeAll"),removeListener=createAction(alm+"/remove"),defaultErrorHandler=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];console.error.apply(console,__spreadArray([alm+"/error"],args))};function createListenerMiddleware(middlewareOptions){var _this=this;void 0===middlewareOptions&&(middlewareOptions={});var listenerMap=new Map,extra=middlewareOptions.extra,_c=middlewareOptions.onError,onError=void 0===_c?defaultErrorHandler:_c;assertFunction(onError,"onError");var findListenerEntry=function(comparator){for(var _i=0,_c=Array.from(listenerMap.values());_i<_c.length;_i++){var entry=_c[_i];if(comparator(entry))return entry}},startListening=function(options){var entry=findListenerEntry((function(existingEntry){return existingEntry.effect===options.effect}));return entry||(entry=createListenerEntry(options)),function(entry){return entry.unsubscribe=function(){return listenerMap.delete(entry.id)},listenerMap.set(entry.id,entry),function(cancelOptions){entry.unsubscribe(),(null==cancelOptions?void 0:cancelOptions.cancelActive)&&cancelActiveListeners(entry)}}(entry)},stopListening=function(options){var _c=getListenerEntryPropsFrom(options),type=_c.type,effect=_c.effect,predicate=_c.predicate,entry=findListenerEntry((function(entry2){return("string"==typeof type?entry2.type===type:entry2.predicate===predicate)&&entry2.effect===effect}));return entry&&(entry.unsubscribe(),options.cancelActive&&cancelActiveListeners(entry)),!!entry},notifyListener=function(entry,action,api,getOriginalState){return __async(_this,null,(function(){var internalTaskController,take,listenerError_1;return __generator(this,(function(_c){switch(_c.label){case 0:internalTaskController=new AbortController,take=createTakePattern(startListening,internalTaskController.signal),_c.label=1;case 1:return _c.trys.push([1,3,4,5]),entry.pending.add(internalTaskController),[4,Promise.resolve(entry.effect(action,redux_toolkit_esm_assign({},api,{getOriginalState,condition:function(predicate,timeout){return take(predicate,timeout).then(Boolean)},take,delay:createDelay(internalTaskController.signal),pause:createPause(internalTaskController.signal),extra,signal:internalTaskController.signal,fork:createFork(internalTaskController.signal),unsubscribe:entry.unsubscribe,subscribe:function(){listenerMap.set(entry.id,entry)},cancelActiveListeners:function(){entry.pending.forEach((function(controller,_,set){controller!==internalTaskController&&(abortControllerWithReason(controller,listenerCancelled),set.delete(controller))}))}})))];case 2:return _c.sent(),[3,5];case 3:return(listenerError_1=_c.sent())instanceof TaskAbortError||safelyNotifyError(onError,listenerError_1,{raisedBy:"effect"}),[3,5];case 4:return abortControllerWithReason(internalTaskController,listenerCompleted),entry.pending.delete(internalTaskController),[7];case 5:return[2]}}))}))},clearListenerMiddleware=createClearListenerMiddleware(listenerMap);return{middleware:function(api){return function(next){return function(action){if(addListener.match(action))return startListening(action.payload);if(!clearAllListeners.match(action)){if(removeListener.match(action))return stopListening(action.payload);var result,originalState=api.getState(),getOriginalState=function(){if(originalState===INTERNAL_NIL_TOKEN)throw new Error(alm+": getOriginalState can only be called synchronously");return originalState};try{if(result=next(action),listenerMap.size>0)for(var currentState=api.getState(),listenerEntries=Array.from(listenerMap.values()),_i=0,listenerEntries_1=listenerEntries;_i<listenerEntries_1.length;_i++){var entry=listenerEntries_1[_i],runListener=!1;try{runListener=entry.predicate(action,currentState,originalState)}catch(predicateError){runListener=!1,safelyNotifyError(onError,predicateError,{raisedBy:"predicate"})}runListener&&notifyListener(entry,action,api,getOriginalState)}}finally{originalState=INTERNAL_NIL_TOKEN}return result}clearListenerMiddleware()}}},startListening,stopListening,clearListeners:clearListenerMiddleware}}var promise,SHOULD_AUTOBATCH="RTK_autoBatch",prepareAutoBatched=function(){return function(payload){var _c;return{payload,meta:(_c={},_c[SHOULD_AUTOBATCH]=!0,_c)}}},queueMicrotaskShim="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:globalThis):function(cb){return(promise||(promise=Promise.resolve())).then(cb).catch((function(err){return setTimeout((function(){throw err}),0)}))},createQueueWithTimer=function(timeout){return function(notify){setTimeout(notify,timeout)}},rAF="undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:createQueueWithTimer(10),autoBatchEnhancer=function(options){return void 0===options&&(options={type:"raf"}),function(next){return function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];var store=next.apply(void 0,args),notifying=!0,shouldNotifyAtEndOfTick=!1,notificationQueued=!1,listeners=new Set,queueCallback="tick"===options.type?queueMicrotaskShim:"raf"===options.type?rAF:"callback"===options.type?options.queueNotification:createQueueWithTimer(options.timeout),notifyListeners=function(){notificationQueued=!1,shouldNotifyAtEndOfTick&&(shouldNotifyAtEndOfTick=!1,listeners.forEach((function(l){return l()})))};return Object.assign({},store,{subscribe:function(listener2){var unsubscribe=store.subscribe((function(){return notifying&&listener2()}));return listeners.add(listener2),function(){unsubscribe(),listeners.delete(listener2)}},dispatch:function(action){var _a;try{return notifying=!(null==(_a=null==action?void 0:action.meta)?void 0:_a[SHOULD_AUTOBATCH]),(shouldNotifyAtEndOfTick=!notifying)&&(notificationQueued||(notificationQueued=!0,queueCallback(notifyListeners))),store.dispatch(action)}finally{notifying=!0}}})}}};F()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,