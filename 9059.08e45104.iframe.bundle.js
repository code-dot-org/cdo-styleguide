/*! For license information please see 9059.08e45104.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9059],{"./node_modules/css-loader/dist/runtime/api.js":module=>{module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/react-router-dom/dist/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AbortedDeferredError:()=>AbortedDeferredError,Await:()=>Await,BrowserRouter:()=>BrowserRouter,Form:()=>Form,HashRouter:()=>HashRouter,Link:()=>Link,MemoryRouter:()=>MemoryRouter,NavLink:()=>NavLink,Navigate:()=>Navigate,NavigationType:()=>Action,Outlet:()=>Outlet,Route:()=>Route,Router:()=>Router,RouterProvider:()=>dist_RouterProvider,Routes:()=>Routes,ScrollRestoration:()=>ScrollRestoration,UNSAFE_DataRouterContext:()=>DataRouterContext,UNSAFE_DataRouterStateContext:()=>DataRouterStateContext,UNSAFE_ErrorResponseImpl:()=>ErrorResponseImpl,UNSAFE_FetchersContext:()=>FetchersContext,UNSAFE_LocationContext:()=>LocationContext,UNSAFE_NavigationContext:()=>NavigationContext,UNSAFE_RouteContext:()=>RouteContext,UNSAFE_ViewTransitionContext:()=>ViewTransitionContext,UNSAFE_useRouteId:()=>useRouteId,UNSAFE_useScrollRestoration:()=>useScrollRestoration,createBrowserRouter:()=>createBrowserRouter,createHashRouter:()=>createHashRouter,createMemoryRouter:()=>createMemoryRouter,createPath:()=>createPath,createRoutesFromChildren:()=>createRoutesFromChildren,createRoutesFromElements:()=>createRoutesFromChildren,createSearchParams:()=>createSearchParams,defer:()=>defer,generatePath:()=>generatePath,isRouteErrorResponse:()=>isRouteErrorResponse,json:()=>json,matchPath:()=>matchPath,matchRoutes:()=>matchRoutes,parsePath:()=>parsePath,redirect:()=>redirect,redirectDocument:()=>redirectDocument,renderMatches:()=>renderMatches,replace:()=>replace,resolvePath:()=>resolvePath,unstable_HistoryRouter:()=>HistoryRouter,unstable_usePrompt:()=>usePrompt,unstable_useViewTransitionState:()=>useViewTransitionState,useActionData:()=>useActionData,useAsyncError:()=>useAsyncError,useAsyncValue:()=>useAsyncValue,useBeforeUnload:()=>useBeforeUnload,useBlocker:()=>useBlocker,useFetcher:()=>useFetcher,useFetchers:()=>useFetchers,useFormAction:()=>useFormAction,useHref:()=>useHref,useInRouterContext:()=>useInRouterContext,useLinkClickHandler:()=>useLinkClickHandler,useLoaderData:()=>useLoaderData,useLocation:()=>useLocation,useMatch:()=>useMatch,useMatches:()=>useMatches,useNavigate:()=>useNavigate,useNavigation:()=>useNavigation,useNavigationType:()=>useNavigationType,useOutlet:()=>useOutlet,useOutletContext:()=>useOutletContext,useParams:()=>useParams,useResolvedPath:()=>useResolvedPath,useRevalidator:()=>useRevalidator,useRouteError:()=>useRouteError,useRouteLoaderData:()=>useRouteLoaderData,useRoutes:()=>useRoutes,useSearchParams:()=>useSearchParams,useSubmit:()=>useSubmit});var Action,react=__webpack_require__("./node_modules/react/index.js"),react_namespaceObject=__webpack_require__.t(react,2),react_dom=__webpack_require__("./node_modules/react-dom/index.js"),react_dom_namespaceObject=__webpack_require__.t(react_dom,2);function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}!function(Action){Action.Pop="POP",Action.Push="PUSH",Action.Replace="REPLACE"}(Action||(Action={}));const PopStateEventType="popstate";function createMemoryHistory(options){void 0===options&&(options={});let entries,{initialEntries=["/"],initialIndex,v5Compat=!1}=options;entries=initialEntries.map(((entry,index)=>createMemoryLocation(entry,"string"==typeof entry?null:entry.state,0===index?"default":void 0)));let index=clampIndex(null==initialIndex?entries.length-1:initialIndex),action=Action.Pop,listener=null;function clampIndex(n){return Math.min(Math.max(n,0),entries.length-1)}function getCurrentLocation(){return entries[index]}function createMemoryLocation(to,state,key){void 0===state&&(state=null);let location=createLocation(entries?getCurrentLocation().pathname:"/",to,state,key);return warning("/"===location.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(to)),location}function createHref(to){return"string"==typeof to?to:createPath(to)}return{get index(){return index},get action(){return action},get location(){return getCurrentLocation()},createHref,createURL:to=>new URL(createHref(to),"http://localhost"),encodeLocation(to){let path="string"==typeof to?parsePath(to):to;return{pathname:path.pathname||"",search:path.search||"",hash:path.hash||""}},push(to,state){action=Action.Push;let nextLocation=createMemoryLocation(to,state);index+=1,entries.splice(index,entries.length,nextLocation),v5Compat&&listener&&listener({action,location:nextLocation,delta:1})},replace(to,state){action=Action.Replace;let nextLocation=createMemoryLocation(to,state);entries[index]=nextLocation,v5Compat&&listener&&listener({action,location:nextLocation,delta:0})},go(delta){action=Action.Pop;let nextIndex=clampIndex(index+delta),nextLocation=entries[nextIndex];index=nextIndex,listener&&listener({action,location:nextLocation,delta})},listen:fn=>(listener=fn,()=>{listener=null})}}function createBrowserHistory(options){return void 0===options&&(options={}),getUrlBasedHistory((function createBrowserLocation(window,globalHistory){let{pathname,search,hash}=window.location;return createLocation("",{pathname,search,hash},globalHistory.state&&globalHistory.state.usr||null,globalHistory.state&&globalHistory.state.key||"default")}),(function createBrowserHref(window,to){return"string"==typeof to?to:createPath(to)}),null,options)}function createHashHistory(options){return void 0===options&&(options={}),getUrlBasedHistory((function createHashLocation(window,globalHistory){let{pathname="/",search="",hash=""}=parsePath(window.location.hash.substr(1));return pathname.startsWith("/")||pathname.startsWith(".")||(pathname="/"+pathname),createLocation("",{pathname,search,hash},globalHistory.state&&globalHistory.state.usr||null,globalHistory.state&&globalHistory.state.key||"default")}),(function createHashHref(window,to){let base=window.document.querySelector("base"),href="";if(base&&base.getAttribute("href")){let url=window.location.href,hashIndex=url.indexOf("#");href=-1===hashIndex?url:url.slice(0,hashIndex)}return href+"#"+("string"==typeof to?to:createPath(to))}),(function validateHashLocation(location,to){warning("/"===location.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(to)+")")}),options)}function invariant(value,message){if(!1===value||null==value)throw new Error(message)}function warning(cond,message){if(!cond){"undefined"!=typeof console&&console.warn(message);try{throw new Error(message)}catch(e){}}}function getHistoryState(location,index){return{usr:location.state,key:location.key,idx:index}}function createLocation(current,to,state,key){return void 0===state&&(state=null),_extends({pathname:"string"==typeof current?current:current.pathname,search:"",hash:""},"string"==typeof to?parsePath(to):to,{state,key:to&&to.key||key||Math.random().toString(36).substr(2,8)})}function createPath(_ref){let{pathname="/",search="",hash=""}=_ref;return search&&"?"!==search&&(pathname+="?"===search.charAt(0)?search:"?"+search),hash&&"#"!==hash&&(pathname+="#"===hash.charAt(0)?hash:"#"+hash),pathname}function parsePath(path){let parsedPath={};if(path){let hashIndex=path.indexOf("#");hashIndex>=0&&(parsedPath.hash=path.substr(hashIndex),path=path.substr(0,hashIndex));let searchIndex=path.indexOf("?");searchIndex>=0&&(parsedPath.search=path.substr(searchIndex),path=path.substr(0,searchIndex)),path&&(parsedPath.pathname=path)}return parsedPath}function getUrlBasedHistory(getLocation,createHref,validateLocation,options){void 0===options&&(options={});let{window=document.defaultView,v5Compat=!1}=options,globalHistory=window.history,action=Action.Pop,listener=null,index=getIndex();function getIndex(){return(globalHistory.state||{idx:null}).idx}function handlePop(){action=Action.Pop;let nextIndex=getIndex(),delta=null==nextIndex?null:nextIndex-index;index=nextIndex,listener&&listener({action,location:history.location,delta})}function createURL(to){let base="null"!==window.location.origin?window.location.origin:window.location.href,href="string"==typeof to?to:createPath(to);return href=href.replace(/ $/,"%20"),invariant(base,"No window.location.(origin|href) available to create URL for href: "+href),new URL(href,base)}null==index&&(index=0,globalHistory.replaceState(_extends({},globalHistory.state,{idx:index}),""));let history={get action(){return action},get location(){return getLocation(window,globalHistory)},listen(fn){if(listener)throw new Error("A history only accepts one active listener");return window.addEventListener(PopStateEventType,handlePop),listener=fn,()=>{window.removeEventListener(PopStateEventType,handlePop),listener=null}},createHref:to=>createHref(window,to),createURL,encodeLocation(to){let url=createURL(to);return{pathname:url.pathname,search:url.search,hash:url.hash}},push:function push(to,state){action=Action.Push;let location=createLocation(history.location,to,state);validateLocation&&validateLocation(location,to),index=getIndex()+1;let historyState=getHistoryState(location,index),url=history.createHref(location);try{globalHistory.pushState(historyState,"",url)}catch(error){if(error instanceof DOMException&&"DataCloneError"===error.name)throw error;window.location.assign(url)}v5Compat&&listener&&listener({action,location:history.location,delta:1})},replace:function replace(to,state){action=Action.Replace;let location=createLocation(history.location,to,state);validateLocation&&validateLocation(location,to),index=getIndex();let historyState=getHistoryState(location,index),url=history.createHref(location);globalHistory.replaceState(historyState,"",url),v5Compat&&listener&&listener({action,location:history.location,delta:0})},go:n=>globalHistory.go(n)};return history}var ResultType;!function(ResultType){ResultType.data="data",ResultType.deferred="deferred",ResultType.redirect="redirect",ResultType.error="error"}(ResultType||(ResultType={}));const immutableRouteKeys=new Set(["lazy","caseSensitive","path","id","index","children"]);function convertRoutesToDataRoutes(routes,mapRouteProperties,parentPath,manifest){return void 0===parentPath&&(parentPath=[]),void 0===manifest&&(manifest={}),routes.map(((route,index)=>{let treePath=[...parentPath,String(index)],id="string"==typeof route.id?route.id:treePath.join("-");if(invariant(!0!==route.index||!route.children,"Cannot specify children on an index route"),invariant(!manifest[id],'Found a route id collision on id "'+id+"\".  Route id's must be globally unique within Data Router usages"),function isIndexRoute(route){return!0===route.index}(route)){let indexRoute=_extends({},route,mapRouteProperties(route),{id});return manifest[id]=indexRoute,indexRoute}{let pathOrLayoutRoute=_extends({},route,mapRouteProperties(route),{id,children:void 0});return manifest[id]=pathOrLayoutRoute,route.children&&(pathOrLayoutRoute.children=convertRoutesToDataRoutes(route.children,mapRouteProperties,treePath,manifest)),pathOrLayoutRoute}}))}function matchRoutes(routes,locationArg,basename){return void 0===basename&&(basename="/"),matchRoutesImpl(routes,locationArg,basename,!1)}function matchRoutesImpl(routes,locationArg,basename,allowPartial){let pathname=stripBasename(("string"==typeof locationArg?parsePath(locationArg):locationArg).pathname||"/",basename);if(null==pathname)return null;let branches=flattenRoutes(routes);!function rankRouteBranches(branches){branches.sort(((a,b)=>a.score!==b.score?b.score-a.score:function compareIndexes(a,b){let siblings=a.length===b.length&&a.slice(0,-1).every(((n,i)=>n===b[i]));return siblings?a[a.length-1]-b[b.length-1]:0}(a.routesMeta.map((meta=>meta.childrenIndex)),b.routesMeta.map((meta=>meta.childrenIndex)))))}(branches);let matches=null;for(let i=0;null==matches&&i<branches.length;++i){let decoded=decodePath(pathname);matches=matchRouteBranch(branches[i],decoded,allowPartial)}return matches}function convertRouteMatchToUiMatch(match,loaderData){let{route,pathname,params}=match;return{id:route.id,pathname,params,data:loaderData[route.id],handle:route.handle}}function flattenRoutes(routes,branches,parentsMeta,parentPath){void 0===branches&&(branches=[]),void 0===parentsMeta&&(parentsMeta=[]),void 0===parentPath&&(parentPath="");let flattenRoute=(route,index,relativePath)=>{let meta={relativePath:void 0===relativePath?route.path||"":relativePath,caseSensitive:!0===route.caseSensitive,childrenIndex:index,route};meta.relativePath.startsWith("/")&&(invariant(meta.relativePath.startsWith(parentPath),'Absolute route path "'+meta.relativePath+'" nested under path "'+parentPath+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),meta.relativePath=meta.relativePath.slice(parentPath.length));let path=joinPaths([parentPath,meta.relativePath]),routesMeta=parentsMeta.concat(meta);route.children&&route.children.length>0&&(invariant(!0!==route.index,'Index routes must not have child routes. Please remove all child routes from route path "'+path+'".'),flattenRoutes(route.children,branches,routesMeta,path)),(null!=route.path||route.index)&&branches.push({path,score:computeScore(path,route.index),routesMeta})};return routes.forEach(((route,index)=>{var _route$path;if(""!==route.path&&null!=(_route$path=route.path)&&_route$path.includes("?"))for(let exploded of explodeOptionalSegments(route.path))flattenRoute(route,index,exploded);else flattenRoute(route,index)})),branches}function explodeOptionalSegments(path){let segments=path.split("/");if(0===segments.length)return[];let[first,...rest]=segments,isOptional=first.endsWith("?"),required=first.replace(/\?$/,"");if(0===rest.length)return isOptional?[required,""]:[required];let restExploded=explodeOptionalSegments(rest.join("/")),result=[];return result.push(...restExploded.map((subpath=>""===subpath?required:[required,subpath].join("/")))),isOptional&&result.push(...restExploded),result.map((exploded=>path.startsWith("/")&&""===exploded?"/":exploded))}const paramRe=/^:[\w-]+$/,dynamicSegmentValue=3,indexRouteValue=2,emptySegmentValue=1,staticSegmentValue=10,splatPenalty=-2,isSplat=s=>"*"===s;function computeScore(path,index){let segments=path.split("/"),initialScore=segments.length;return segments.some(isSplat)&&(initialScore+=splatPenalty),index&&(initialScore+=indexRouteValue),segments.filter((s=>!isSplat(s))).reduce(((score,segment)=>score+(paramRe.test(segment)?dynamicSegmentValue:""===segment?emptySegmentValue:staticSegmentValue)),initialScore)}function matchRouteBranch(branch,pathname,allowPartial){void 0===allowPartial&&(allowPartial=!1);let{routesMeta}=branch,matchedParams={},matchedPathname="/",matches=[];for(let i=0;i<routesMeta.length;++i){let meta=routesMeta[i],end=i===routesMeta.length-1,remainingPathname="/"===matchedPathname?pathname:pathname.slice(matchedPathname.length)||"/",match=matchPath({path:meta.relativePath,caseSensitive:meta.caseSensitive,end},remainingPathname),route=meta.route;if(!match&&end&&allowPartial&&!routesMeta[routesMeta.length-1].route.index&&(match=matchPath({path:meta.relativePath,caseSensitive:meta.caseSensitive,end:!1},remainingPathname)),!match)return null;Object.assign(matchedParams,match.params),matches.push({params:matchedParams,pathname:joinPaths([matchedPathname,match.pathname]),pathnameBase:normalizePathname(joinPaths([matchedPathname,match.pathnameBase])),route}),"/"!==match.pathnameBase&&(matchedPathname=joinPaths([matchedPathname,match.pathnameBase]))}return matches}function generatePath(originalPath,params){void 0===params&&(params={});let path=originalPath;path.endsWith("*")&&"*"!==path&&!path.endsWith("/*")&&(warning(!1,'Route path "'+path+'" will be treated as if it were "'+path.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+path.replace(/\*$/,"/*")+'".'),path=path.replace(/\*$/,"/*"));const prefix=path.startsWith("/")?"/":"",stringify=p=>null==p?"":"string"==typeof p?p:String(p);return prefix+path.split(/\/+/).map(((segment,index,array)=>{if(index===array.length-1&&"*"===segment){return stringify(params["*"])}const keyMatch=segment.match(/^:([\w-]+)(\??)$/);if(keyMatch){const[,key,optional]=keyMatch;let param=params[key];return invariant("?"===optional||null!=param,'Missing ":'+key+'" param'),stringify(param)}return segment.replace(/\?$/g,"")})).filter((segment=>!!segment)).join("/")}function matchPath(pattern,pathname){"string"==typeof pattern&&(pattern={path:pattern,caseSensitive:!1,end:!0});let[matcher,compiledParams]=function compilePath(path,caseSensitive,end){void 0===caseSensitive&&(caseSensitive=!1);void 0===end&&(end=!0);warning("*"===path||!path.endsWith("*")||path.endsWith("/*"),'Route path "'+path+'" will be treated as if it were "'+path.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+path.replace(/\*$/,"/*")+'".');let params=[],regexpSource="^"+path.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((_,paramName,isOptional)=>(params.push({paramName,isOptional:null!=isOptional}),isOptional?"/?([^\\/]+)?":"/([^\\/]+)")));path.endsWith("*")?(params.push({paramName:"*"}),regexpSource+="*"===path||"/*"===path?"(.*)$":"(?:\\/(.+)|\\/*)$"):end?regexpSource+="\\/*$":""!==path&&"/"!==path&&(regexpSource+="(?:(?=\\/|$))");let matcher=new RegExp(regexpSource,caseSensitive?void 0:"i");return[matcher,params]}(pattern.path,pattern.caseSensitive,pattern.end),match=pathname.match(matcher);if(!match)return null;let matchedPathname=match[0],pathnameBase=matchedPathname.replace(/(.)\/+$/,"$1"),captureGroups=match.slice(1);return{params:compiledParams.reduce(((memo,_ref,index)=>{let{paramName,isOptional}=_ref;if("*"===paramName){let splatValue=captureGroups[index]||"";pathnameBase=matchedPathname.slice(0,matchedPathname.length-splatValue.length).replace(/(.)\/+$/,"$1")}const value=captureGroups[index];return memo[paramName]=isOptional&&!value?void 0:(value||"").replace(/%2F/g,"/"),memo}),{}),pathname:matchedPathname,pathnameBase,pattern}}function decodePath(value){try{return value.split("/").map((v=>decodeURIComponent(v).replace(/\//g,"%2F"))).join("/")}catch(error){return warning(!1,'The URL path "'+value+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+error+")."),value}}function stripBasename(pathname,basename){if("/"===basename)return pathname;if(!pathname.toLowerCase().startsWith(basename.toLowerCase()))return null;let startIndex=basename.endsWith("/")?basename.length-1:basename.length,nextChar=pathname.charAt(startIndex);return nextChar&&"/"!==nextChar?null:pathname.slice(startIndex)||"/"}function resolvePath(to,fromPathname){void 0===fromPathname&&(fromPathname="/");let{pathname:toPathname,search="",hash=""}="string"==typeof to?parsePath(to):to,pathname=toPathname?toPathname.startsWith("/")?toPathname:function resolvePathname(relativePath,fromPathname){let segments=fromPathname.replace(/\/+$/,"").split("/");return relativePath.split("/").forEach((segment=>{".."===segment?segments.length>1&&segments.pop():"."!==segment&&segments.push(segment)})),segments.length>1?segments.join("/"):"/"}(toPathname,fromPathname):fromPathname;return{pathname,search:normalizeSearch(search),hash:normalizeHash(hash)}}function getInvalidPathError(char,field,dest,path){return"Cannot include a '"+char+"' character in a manually specified `to."+field+"` field ["+JSON.stringify(path)+"].  Please separate it out to the `to."+dest+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function getPathContributingMatches(matches){return matches.filter(((match,index)=>0===index||match.route.path&&match.route.path.length>0))}function getResolveToMatches(matches,v7_relativeSplatPath){let pathMatches=getPathContributingMatches(matches);return v7_relativeSplatPath?pathMatches.map(((match,idx)=>idx===pathMatches.length-1?match.pathname:match.pathnameBase)):pathMatches.map((match=>match.pathnameBase))}function resolveTo(toArg,routePathnames,locationPathname,isPathRelative){let to;void 0===isPathRelative&&(isPathRelative=!1),"string"==typeof toArg?to=parsePath(toArg):(to=_extends({},toArg),invariant(!to.pathname||!to.pathname.includes("?"),getInvalidPathError("?","pathname","search",to)),invariant(!to.pathname||!to.pathname.includes("#"),getInvalidPathError("#","pathname","hash",to)),invariant(!to.search||!to.search.includes("#"),getInvalidPathError("#","search","hash",to)));let from,isEmptyPath=""===toArg||""===to.pathname,toPathname=isEmptyPath?"/":to.pathname;if(null==toPathname)from=locationPathname;else{let routePathnameIndex=routePathnames.length-1;if(!isPathRelative&&toPathname.startsWith("..")){let toSegments=toPathname.split("/");for(;".."===toSegments[0];)toSegments.shift(),routePathnameIndex-=1;to.pathname=toSegments.join("/")}from=routePathnameIndex>=0?routePathnames[routePathnameIndex]:"/"}let path=resolvePath(to,from),hasExplicitTrailingSlash=toPathname&&"/"!==toPathname&&toPathname.endsWith("/"),hasCurrentTrailingSlash=(isEmptyPath||"."===toPathname)&&locationPathname.endsWith("/");return path.pathname.endsWith("/")||!hasExplicitTrailingSlash&&!hasCurrentTrailingSlash||(path.pathname+="/"),path}const joinPaths=paths=>paths.join("/").replace(/\/\/+/g,"/"),normalizePathname=pathname=>pathname.replace(/\/+$/,"").replace(/^\/*/,"/"),normalizeSearch=search=>search&&"?"!==search?search.startsWith("?")?search:"?"+search:"",normalizeHash=hash=>hash&&"#"!==hash?hash.startsWith("#")?hash:"#"+hash:"",json=function json(data,init){void 0===init&&(init={});let responseInit="number"==typeof init?{status:init}:init,headers=new Headers(responseInit.headers);return headers.has("Content-Type")||headers.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(data),_extends({},responseInit,{headers}))};class AbortedDeferredError extends Error{}class DeferredData{constructor(data,responseInit){let reject;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],invariant(data&&"object"==typeof data&&!Array.isArray(data),"defer() only accepts plain objects"),this.abortPromise=new Promise(((_,r)=>reject=r)),this.controller=new AbortController;let onAbort=()=>reject(new AbortedDeferredError("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",onAbort),this.controller.signal.addEventListener("abort",onAbort),this.data=Object.entries(data).reduce(((acc,_ref2)=>{let[key,value]=_ref2;return Object.assign(acc,{[key]:this.trackPromise(key,value)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=responseInit}trackPromise(key,value){if(!(value instanceof Promise))return value;this.deferredKeys.push(key),this.pendingKeysSet.add(key);let promise=Promise.race([value,this.abortPromise]).then((data=>this.onSettle(promise,key,void 0,data)),(error=>this.onSettle(promise,key,error)));return promise.catch((()=>{})),Object.defineProperty(promise,"_tracked",{get:()=>!0}),promise}onSettle(promise,key,error,data){if(this.controller.signal.aborted&&error instanceof AbortedDeferredError)return this.unlistenAbortSignal(),Object.defineProperty(promise,"_error",{get:()=>error}),Promise.reject(error);if(this.pendingKeysSet.delete(key),this.done&&this.unlistenAbortSignal(),void 0===error&&void 0===data){let undefinedError=new Error('Deferred data for key "'+key+'" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');return Object.defineProperty(promise,"_error",{get:()=>undefinedError}),this.emit(!1,key),Promise.reject(undefinedError)}return void 0===data?(Object.defineProperty(promise,"_error",{get:()=>error}),this.emit(!1,key),Promise.reject(error)):(Object.defineProperty(promise,"_data",{get:()=>data}),this.emit(!1,key),data)}emit(aborted,settledKey){this.subscribers.forEach((subscriber=>subscriber(aborted,settledKey)))}subscribe(fn){return this.subscribers.add(fn),()=>this.subscribers.delete(fn)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((v,k)=>this.pendingKeysSet.delete(k))),this.emit(!0)}async resolveData(signal){let aborted=!1;if(!this.done){let onAbort=()=>this.cancel();signal.addEventListener("abort",onAbort),aborted=await new Promise((resolve=>{this.subscribe((aborted=>{signal.removeEventListener("abort",onAbort),(aborted||this.done)&&resolve(aborted)}))}))}return aborted}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return invariant(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((acc,_ref3)=>{let[key,value]=_ref3;return Object.assign(acc,{[key]:unwrapTrackedPromise(value)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function unwrapTrackedPromise(value){if(!function isTrackedPromise(value){return value instanceof Promise&&!0===value._tracked}(value))return value;if(value._error)throw value._error;return value._data}const defer=function defer(data,init){return void 0===init&&(init={}),new DeferredData(data,"number"==typeof init?{status:init}:init)},redirect=function redirect(url,init){void 0===init&&(init=302);let responseInit=init;"number"==typeof responseInit?responseInit={status:responseInit}:void 0===responseInit.status&&(responseInit.status=302);let headers=new Headers(responseInit.headers);return headers.set("Location",url),new Response(null,_extends({},responseInit,{headers}))},redirectDocument=(url,init)=>{let response=redirect(url,init);return response.headers.set("X-Remix-Reload-Document","true"),response},replace=(url,init)=>{let response=redirect(url,init);return response.headers.set("X-Remix-Replace","true"),response};class ErrorResponseImpl{constructor(status,statusText,data,internal){void 0===internal&&(internal=!1),this.status=status,this.statusText=statusText||"",this.internal=internal,data instanceof Error?(this.data=data.toString(),this.error=data):this.data=data}}function isRouteErrorResponse(error){return null!=error&&"number"==typeof error.status&&"string"==typeof error.statusText&&"boolean"==typeof error.internal&&"data"in error}const validMutationMethodsArr=["post","put","patch","delete"],validMutationMethods=new Set(validMutationMethodsArr),validRequestMethodsArr=["get",...validMutationMethodsArr],validRequestMethods=new Set(validRequestMethodsArr),redirectStatusCodes=new Set([301,302,303,307,308]),redirectPreserveMethodStatusCodes=new Set([307,308]),IDLE_NAVIGATION={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},IDLE_FETCHER={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},IDLE_BLOCKER={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ABSOLUTE_URL_REGEX=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,defaultMapRouteProperties=route=>({hasErrorBoundary:Boolean(route.hasErrorBoundary)}),TRANSITIONS_STORAGE_KEY="remix-router-transitions";function createRouter(init){const routerWindow=init.window?init.window:"undefined"!=typeof window?window:void 0,isBrowser=void 0!==routerWindow&&void 0!==routerWindow.document&&void 0!==routerWindow.document.createElement,isServer=!isBrowser;let mapRouteProperties;if(invariant(init.routes.length>0,"You must provide a non-empty routes array to createRouter"),init.mapRouteProperties)mapRouteProperties=init.mapRouteProperties;else if(init.detectErrorBoundary){let detectErrorBoundary=init.detectErrorBoundary;mapRouteProperties=route=>({hasErrorBoundary:detectErrorBoundary(route)})}else mapRouteProperties=defaultMapRouteProperties;let inFlightDataRoutes,initialized,router,manifest={},dataRoutes=convertRoutesToDataRoutes(init.routes,mapRouteProperties,void 0,manifest),basename=init.basename||"/",dataStrategyImpl=init.unstable_dataStrategy||defaultDataStrategy,patchRoutesOnMissImpl=init.unstable_patchRoutesOnMiss,future=_extends({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,v7_skipActionErrorRevalidation:!1},init.future),unlistenHistory=null,subscribers=new Set,savedScrollPositions=null,getScrollRestorationKey=null,getScrollPosition=null,initialScrollRestored=null!=init.hydrationData,initialMatches=matchRoutes(dataRoutes,init.history.location,basename),initialErrors=null;if(null==initialMatches&&!patchRoutesOnMissImpl){let error=getInternalRouterError(404,{pathname:init.history.location.pathname}),{matches,route}=getShortCircuitMatches(dataRoutes);initialMatches=matches,initialErrors={[route.id]:error}}if(initialMatches&&!init.hydrationData){checkFogOfWar(initialMatches,dataRoutes,init.history.location.pathname).active&&(initialMatches=null)}if(initialMatches)if(initialMatches.some((m=>m.route.lazy)))initialized=!1;else if(initialMatches.some((m=>m.route.loader)))if(future.v7_partialHydration){let loaderData=init.hydrationData?init.hydrationData.loaderData:null,errors=init.hydrationData?init.hydrationData.errors:null,isRouteInitialized=m=>!m.route.loader||("function"!=typeof m.route.loader||!0!==m.route.loader.hydrate)&&(loaderData&&void 0!==loaderData[m.route.id]||errors&&void 0!==errors[m.route.id]);if(errors){let idx=initialMatches.findIndex((m=>void 0!==errors[m.route.id]));initialized=initialMatches.slice(0,idx+1).every(isRouteInitialized)}else initialized=initialMatches.every(isRouteInitialized)}else initialized=null!=init.hydrationData;else initialized=!0;else if(initialized=!1,initialMatches=[],future.v7_partialHydration){let fogOfWar=checkFogOfWar(null,dataRoutes,init.history.location.pathname);fogOfWar.active&&fogOfWar.matches&&(initialMatches=fogOfWar.matches)}let pendingNavigationController,state={historyAction:init.history.action,location:init.history.location,matches:initialMatches,initialized,navigation:IDLE_NAVIGATION,restoreScrollPosition:null==init.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:init.hydrationData&&init.hydrationData.loaderData||{},actionData:init.hydrationData&&init.hydrationData.actionData||null,errors:init.hydrationData&&init.hydrationData.errors||initialErrors,fetchers:new Map,blockers:new Map},pendingAction=Action.Pop,pendingPreventScrollReset=!1,pendingViewTransitionEnabled=!1,appliedViewTransitions=new Map,removePageHideEventListener=null,isUninterruptedRevalidation=!1,isRevalidationRequired=!1,cancelledDeferredRoutes=[],cancelledFetcherLoads=new Set,fetchControllers=new Map,incrementingLoadId=0,pendingNavigationLoadId=-1,fetchReloadIds=new Map,fetchRedirectIds=new Set,fetchLoadMatches=new Map,activeFetchers=new Map,deletedFetchers=new Set,activeDeferreds=new Map,blockerFunctions=new Map,pendingPatchRoutes=new Map,ignoreNextHistoryUpdate=!1;function updateState(newState,opts){void 0===opts&&(opts={}),state=_extends({},state,newState);let completedFetchers=[],deletedFetchersKeys=[];future.v7_fetcherPersist&&state.fetchers.forEach(((fetcher,key)=>{"idle"===fetcher.state&&(deletedFetchers.has(key)?deletedFetchersKeys.push(key):completedFetchers.push(key))})),[...subscribers].forEach((subscriber=>subscriber(state,{deletedFetchers:deletedFetchersKeys,unstable_viewTransitionOpts:opts.viewTransitionOpts,unstable_flushSync:!0===opts.flushSync}))),future.v7_fetcherPersist&&(completedFetchers.forEach((key=>state.fetchers.delete(key))),deletedFetchersKeys.forEach((key=>deleteFetcher(key))))}function completeNavigation(location,newState,_temp){var _location$state,_location$state2;let actionData,{flushSync}=void 0===_temp?{}:_temp,isActionReload=null!=state.actionData&&null!=state.navigation.formMethod&&isMutationMethod(state.navigation.formMethod)&&"loading"===state.navigation.state&&!0!==(null==(_location$state=location.state)?void 0:_location$state._isRedirect);actionData=newState.actionData?Object.keys(newState.actionData).length>0?newState.actionData:null:isActionReload?state.actionData:null;let loaderData=newState.loaderData?mergeLoaderData(state.loaderData,newState.loaderData,newState.matches||[],newState.errors):state.loaderData,blockers=state.blockers;blockers.size>0&&(blockers=new Map(blockers),blockers.forEach(((_,k)=>blockers.set(k,IDLE_BLOCKER))));let viewTransitionOpts,preventScrollReset=!0===pendingPreventScrollReset||null!=state.navigation.formMethod&&isMutationMethod(state.navigation.formMethod)&&!0!==(null==(_location$state2=location.state)?void 0:_location$state2._isRedirect);if(inFlightDataRoutes&&(dataRoutes=inFlightDataRoutes,inFlightDataRoutes=void 0),isUninterruptedRevalidation||pendingAction===Action.Pop||(pendingAction===Action.Push?init.history.push(location,location.state):pendingAction===Action.Replace&&init.history.replace(location,location.state)),pendingAction===Action.Pop){let priorPaths=appliedViewTransitions.get(state.location.pathname);priorPaths&&priorPaths.has(location.pathname)?viewTransitionOpts={currentLocation:state.location,nextLocation:location}:appliedViewTransitions.has(location.pathname)&&(viewTransitionOpts={currentLocation:location,nextLocation:state.location})}else if(pendingViewTransitionEnabled){let toPaths=appliedViewTransitions.get(state.location.pathname);toPaths?toPaths.add(location.pathname):(toPaths=new Set([location.pathname]),appliedViewTransitions.set(state.location.pathname,toPaths)),viewTransitionOpts={currentLocation:state.location,nextLocation:location}}updateState(_extends({},newState,{actionData,loaderData,historyAction:pendingAction,location,initialized:!0,navigation:IDLE_NAVIGATION,revalidation:"idle",restoreScrollPosition:getSavedScrollPosition(location,newState.matches||state.matches),preventScrollReset,blockers}),{viewTransitionOpts,flushSync:!0===flushSync}),pendingAction=Action.Pop,pendingPreventScrollReset=!1,pendingViewTransitionEnabled=!1,isUninterruptedRevalidation=!1,isRevalidationRequired=!1,cancelledDeferredRoutes=[]}async function startNavigation(historyAction,location,opts){pendingNavigationController&&pendingNavigationController.abort(),pendingNavigationController=null,pendingAction=historyAction,isUninterruptedRevalidation=!0===(opts&&opts.startUninterruptedRevalidation),function saveScrollPosition(location,matches){if(savedScrollPositions&&getScrollPosition){let key=getScrollKey(location,matches);savedScrollPositions[key]=getScrollPosition()}}(state.location,state.matches),pendingPreventScrollReset=!0===(opts&&opts.preventScrollReset),pendingViewTransitionEnabled=!0===(opts&&opts.enableViewTransition);let routesToUse=inFlightDataRoutes||dataRoutes,loadingNavigation=opts&&opts.overrideNavigation,matches=matchRoutes(routesToUse,location,basename),flushSync=!0===(opts&&opts.flushSync),fogOfWar=checkFogOfWar(matches,routesToUse,location.pathname);if(fogOfWar.active&&fogOfWar.matches&&(matches=fogOfWar.matches),!matches){let{error,notFoundMatches,route}=handleNavigational404(location.pathname);return void completeNavigation(location,{matches:notFoundMatches,loaderData:{},errors:{[route.id]:error}},{flushSync})}if(state.initialized&&!isRevalidationRequired&&function isHashChangeOnly(a,b){if(a.pathname!==b.pathname||a.search!==b.search)return!1;if(""===a.hash)return""!==b.hash;if(a.hash===b.hash)return!0;if(""!==b.hash)return!0;return!1}(state.location,location)&&!(opts&&opts.submission&&isMutationMethod(opts.submission.formMethod)))return void completeNavigation(location,{matches},{flushSync});pendingNavigationController=new AbortController;let pendingActionResult,request=createClientSideRequest(init.history,location,pendingNavigationController.signal,opts&&opts.submission);if(opts&&opts.pendingError)pendingActionResult=[findNearestBoundary(matches).route.id,{type:ResultType.error,error:opts.pendingError}];else if(opts&&opts.submission&&isMutationMethod(opts.submission.formMethod)){let actionResult=await async function handleAction(request,location,submission,matches,isFogOfWar,opts){void 0===opts&&(opts={});interruptActiveLoads();let result,navigation=function getSubmittingNavigation(location,submission){let navigation={state:"submitting",location,formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text};return navigation}(location,submission);if(updateState({navigation},{flushSync:!0===opts.flushSync}),isFogOfWar){let discoverResult=await discoverRoutes(matches,location.pathname,request.signal);if("aborted"===discoverResult.type)return{shortCircuited:!0};if("error"===discoverResult.type){let{boundaryId,error}=handleDiscoverRouteError(location.pathname,discoverResult);return{matches:discoverResult.partialMatches,pendingActionResult:[boundaryId,{type:ResultType.error,error}]}}if(!discoverResult.matches){let{notFoundMatches,error,route}=handleNavigational404(location.pathname);return{matches:notFoundMatches,pendingActionResult:[route.id,{type:ResultType.error,error}]}}matches=discoverResult.matches}let actionMatch=getTargetMatch(matches,location);if(actionMatch.route.action||actionMatch.route.lazy){if(result=(await callDataStrategy("action",request,[actionMatch],matches))[0],request.signal.aborted)return{shortCircuited:!0}}else result={type:ResultType.error,error:getInternalRouterError(405,{method:request.method,pathname:location.pathname,routeId:actionMatch.route.id})};if(isRedirectResult(result)){let replace;if(opts&&null!=opts.replace)replace=opts.replace;else{replace=normalizeRedirectLocation(result.response.headers.get("Location"),new URL(request.url),basename)===state.location.pathname+state.location.search}return await startRedirectNavigation(request,result,{submission,replace}),{shortCircuited:!0}}if(isDeferredResult(result))throw getInternalRouterError(400,{type:"defer-action"});if(isErrorResult(result)){let boundaryMatch=findNearestBoundary(matches,actionMatch.route.id);return!0!==(opts&&opts.replace)&&(pendingAction=Action.Push),{matches,pendingActionResult:[boundaryMatch.route.id,result]}}return{matches,pendingActionResult:[actionMatch.route.id,result]}}(request,location,opts.submission,matches,fogOfWar.active,{replace:opts.replace,flushSync});if(actionResult.shortCircuited)return;if(actionResult.pendingActionResult){let[routeId,result]=actionResult.pendingActionResult;if(isErrorResult(result)&&isRouteErrorResponse(result.error)&&404===result.error.status)return pendingNavigationController=null,void completeNavigation(location,{matches:actionResult.matches,loaderData:{},errors:{[routeId]:result.error}})}matches=actionResult.matches||matches,pendingActionResult=actionResult.pendingActionResult,loadingNavigation=getLoadingNavigation(location,opts.submission),flushSync=!1,fogOfWar.active=!1,request=createClientSideRequest(init.history,request.url,request.signal)}let{shortCircuited,matches:updatedMatches,loaderData,errors}=await async function handleLoaders(request,location,matches,isFogOfWar,overrideNavigation,submission,fetcherSubmission,replace,initialHydration,flushSync,pendingActionResult){let loadingNavigation=overrideNavigation||getLoadingNavigation(location,submission),activeSubmission=submission||fetcherSubmission||getSubmissionFromNavigation(loadingNavigation),shouldUpdateNavigationState=!(isUninterruptedRevalidation||future.v7_partialHydration&&initialHydration);if(isFogOfWar){if(shouldUpdateNavigationState){let actionData=getUpdatedActionData(pendingActionResult);updateState(_extends({navigation:loadingNavigation},void 0!==actionData?{actionData}:{}),{flushSync})}let discoverResult=await discoverRoutes(matches,location.pathname,request.signal);if("aborted"===discoverResult.type)return{shortCircuited:!0};if("error"===discoverResult.type){let{boundaryId,error}=handleDiscoverRouteError(location.pathname,discoverResult);return{matches:discoverResult.partialMatches,loaderData:{},errors:{[boundaryId]:error}}}if(!discoverResult.matches){let{error,notFoundMatches,route}=handleNavigational404(location.pathname);return{matches:notFoundMatches,loaderData:{},errors:{[route.id]:error}}}matches=discoverResult.matches}let routesToUse=inFlightDataRoutes||dataRoutes,[matchesToLoad,revalidatingFetchers]=getMatchesToLoad(init.history,state,matches,activeSubmission,location,future.v7_partialHydration&&!0===initialHydration,future.v7_skipActionErrorRevalidation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,deletedFetchers,fetchLoadMatches,fetchRedirectIds,routesToUse,basename,pendingActionResult);if(cancelActiveDeferreds((routeId=>!(matches&&matches.some((m=>m.route.id===routeId)))||matchesToLoad&&matchesToLoad.some((m=>m.route.id===routeId)))),pendingNavigationLoadId=++incrementingLoadId,0===matchesToLoad.length&&0===revalidatingFetchers.length){let updatedFetchers=markFetchRedirectsDone();return completeNavigation(location,_extends({matches,loaderData:{},errors:pendingActionResult&&isErrorResult(pendingActionResult[1])?{[pendingActionResult[0]]:pendingActionResult[1].error}:null},getActionDataForCommit(pendingActionResult),updatedFetchers?{fetchers:new Map(state.fetchers)}:{}),{flushSync}),{shortCircuited:!0}}if(shouldUpdateNavigationState){let updates={};if(!isFogOfWar){updates.navigation=loadingNavigation;let actionData=getUpdatedActionData(pendingActionResult);void 0!==actionData&&(updates.actionData=actionData)}revalidatingFetchers.length>0&&(updates.fetchers=function getUpdatedRevalidatingFetchers(revalidatingFetchers){return revalidatingFetchers.forEach((rf=>{let fetcher=state.fetchers.get(rf.key),revalidatingFetcher=getLoadingFetcher(void 0,fetcher?fetcher.data:void 0);state.fetchers.set(rf.key,revalidatingFetcher)})),new Map(state.fetchers)}(revalidatingFetchers)),updateState(updates,{flushSync})}revalidatingFetchers.forEach((rf=>{fetchControllers.has(rf.key)&&abortFetcher(rf.key),rf.controller&&fetchControllers.set(rf.key,rf.controller)}));let abortPendingFetchRevalidations=()=>revalidatingFetchers.forEach((f=>abortFetcher(f.key)));pendingNavigationController&&pendingNavigationController.signal.addEventListener("abort",abortPendingFetchRevalidations);let{loaderResults,fetcherResults}=await callLoadersAndMaybeResolveData(state.matches,matches,matchesToLoad,revalidatingFetchers,request);if(request.signal.aborted)return{shortCircuited:!0};pendingNavigationController&&pendingNavigationController.signal.removeEventListener("abort",abortPendingFetchRevalidations);revalidatingFetchers.forEach((rf=>fetchControllers.delete(rf.key)));let redirect=findRedirect([...loaderResults,...fetcherResults]);if(redirect){if(redirect.idx>=matchesToLoad.length){let fetcherKey=revalidatingFetchers[redirect.idx-matchesToLoad.length].key;fetchRedirectIds.add(fetcherKey)}return await startRedirectNavigation(request,redirect.result,{replace}),{shortCircuited:!0}}let{loaderData,errors}=processLoaderData(state,matches,matchesToLoad,loaderResults,pendingActionResult,revalidatingFetchers,fetcherResults,activeDeferreds);activeDeferreds.forEach(((deferredData,routeId)=>{deferredData.subscribe((aborted=>{(aborted||deferredData.done)&&activeDeferreds.delete(routeId)}))})),future.v7_partialHydration&&initialHydration&&state.errors&&Object.entries(state.errors).filter((_ref2=>{let[id]=_ref2;return!matchesToLoad.some((m=>m.route.id===id))})).forEach((_ref3=>{let[routeId,error]=_ref3;errors=Object.assign(errors||{},{[routeId]:error})}));let updatedFetchers=markFetchRedirectsDone(),didAbortFetchLoads=abortStaleFetchLoads(pendingNavigationLoadId),shouldUpdateFetchers=updatedFetchers||didAbortFetchLoads||revalidatingFetchers.length>0;return _extends({matches,loaderData,errors},shouldUpdateFetchers?{fetchers:new Map(state.fetchers)}:{})}(request,location,matches,fogOfWar.active,loadingNavigation,opts&&opts.submission,opts&&opts.fetcherSubmission,opts&&opts.replace,opts&&!0===opts.initialHydration,flushSync,pendingActionResult);shortCircuited||(pendingNavigationController=null,completeNavigation(location,_extends({matches:updatedMatches||matches},getActionDataForCommit(pendingActionResult),{loaderData,errors})))}function getUpdatedActionData(pendingActionResult){return pendingActionResult&&!isErrorResult(pendingActionResult[1])?{[pendingActionResult[0]]:pendingActionResult[1].data}:state.actionData?0===Object.keys(state.actionData).length?null:state.actionData:void 0}async function startRedirectNavigation(request,redirect,_temp2){let{submission,fetcherSubmission,replace}=void 0===_temp2?{}:_temp2;redirect.response.headers.has("X-Remix-Revalidate")&&(isRevalidationRequired=!0);let location=redirect.response.headers.get("Location");invariant(location,"Expected a Location header on the redirect Response"),location=normalizeRedirectLocation(location,new URL(request.url),basename);let redirectLocation=createLocation(state.location,location,{_isRedirect:!0});if(isBrowser){let isDocumentReload=!1;if(redirect.response.headers.has("X-Remix-Reload-Document"))isDocumentReload=!0;else if(ABSOLUTE_URL_REGEX.test(location)){const url=init.history.createURL(location);isDocumentReload=url.origin!==routerWindow.location.origin||null==stripBasename(url.pathname,basename)}if(isDocumentReload)return void(replace?routerWindow.location.replace(location):routerWindow.location.assign(location))}pendingNavigationController=null;let redirectHistoryAction=!0===replace||redirect.response.headers.has("X-Remix-Replace")?Action.Replace:Action.Push,{formMethod,formAction,formEncType}=state.navigation;!submission&&!fetcherSubmission&&formMethod&&formAction&&formEncType&&(submission=getSubmissionFromNavigation(state.navigation));let activeSubmission=submission||fetcherSubmission;if(redirectPreserveMethodStatusCodes.has(redirect.response.status)&&activeSubmission&&isMutationMethod(activeSubmission.formMethod))await startNavigation(redirectHistoryAction,redirectLocation,{submission:_extends({},activeSubmission,{formAction:location}),preventScrollReset:pendingPreventScrollReset});else{let overrideNavigation=getLoadingNavigation(redirectLocation,submission);await startNavigation(redirectHistoryAction,redirectLocation,{overrideNavigation,fetcherSubmission,preventScrollReset:pendingPreventScrollReset})}}async function callDataStrategy(type,request,matchesToLoad,matches){try{let results=await callDataStrategyImpl(dataStrategyImpl,type,request,matchesToLoad,matches,manifest,mapRouteProperties);return await Promise.all(results.map(((result,i)=>{if(isRedirectHandlerResult(result)){let response=result.result;return{type:ResultType.redirect,response:normalizeRelativeRoutingRedirectResponse(response,request,matchesToLoad[i].route.id,matches,basename,future.v7_relativeSplatPath)}}return convertHandlerResultToDataResult(result)})))}catch(e){return matchesToLoad.map((()=>({type:ResultType.error,error:e})))}}async function callLoadersAndMaybeResolveData(currentMatches,matches,matchesToLoad,fetchersToLoad,request){let[loaderResults,...fetcherResults]=await Promise.all([matchesToLoad.length?callDataStrategy("loader",request,matchesToLoad,matches):[],...fetchersToLoad.map((f=>{if(f.matches&&f.match&&f.controller){return callDataStrategy("loader",createClientSideRequest(init.history,f.path,f.controller.signal),[f.match],f.matches).then((r=>r[0]))}return Promise.resolve({type:ResultType.error,error:getInternalRouterError(404,{pathname:f.path})})}))]);return await Promise.all([resolveDeferredResults(currentMatches,matchesToLoad,loaderResults,loaderResults.map((()=>request.signal)),!1,state.loaderData),resolveDeferredResults(currentMatches,fetchersToLoad.map((f=>f.match)),fetcherResults,fetchersToLoad.map((f=>f.controller?f.controller.signal:null)),!0)]),{loaderResults,fetcherResults}}function interruptActiveLoads(){isRevalidationRequired=!0,cancelledDeferredRoutes.push(...cancelActiveDeferreds()),fetchLoadMatches.forEach(((_,key)=>{fetchControllers.has(key)&&(cancelledFetcherLoads.add(key),abortFetcher(key))}))}function updateFetcherState(key,fetcher,opts){void 0===opts&&(opts={}),state.fetchers.set(key,fetcher),updateState({fetchers:new Map(state.fetchers)},{flushSync:!0===(opts&&opts.flushSync)})}function setFetcherError(key,routeId,error,opts){void 0===opts&&(opts={});let boundaryMatch=findNearestBoundary(state.matches,routeId);deleteFetcher(key),updateState({errors:{[boundaryMatch.route.id]:error},fetchers:new Map(state.fetchers)},{flushSync:!0===(opts&&opts.flushSync)})}function getFetcher(key){return future.v7_fetcherPersist&&(activeFetchers.set(key,(activeFetchers.get(key)||0)+1),deletedFetchers.has(key)&&deletedFetchers.delete(key)),state.fetchers.get(key)||IDLE_FETCHER}function deleteFetcher(key){let fetcher=state.fetchers.get(key);!fetchControllers.has(key)||fetcher&&"loading"===fetcher.state&&fetchReloadIds.has(key)||abortFetcher(key),fetchLoadMatches.delete(key),fetchReloadIds.delete(key),fetchRedirectIds.delete(key),deletedFetchers.delete(key),cancelledFetcherLoads.delete(key),state.fetchers.delete(key)}function abortFetcher(key){let controller=fetchControllers.get(key);invariant(controller,"Expected fetch controller: "+key),controller.abort(),fetchControllers.delete(key)}function markFetchersDone(keys){for(let key of keys){let doneFetcher=getDoneFetcher(getFetcher(key).data);state.fetchers.set(key,doneFetcher)}}function markFetchRedirectsDone(){let doneKeys=[],updatedFetchers=!1;for(let key of fetchRedirectIds){let fetcher=state.fetchers.get(key);invariant(fetcher,"Expected fetcher: "+key),"loading"===fetcher.state&&(fetchRedirectIds.delete(key),doneKeys.push(key),updatedFetchers=!0)}return markFetchersDone(doneKeys),updatedFetchers}function abortStaleFetchLoads(landedId){let yeetedKeys=[];for(let[key,id]of fetchReloadIds)if(id<landedId){let fetcher=state.fetchers.get(key);invariant(fetcher,"Expected fetcher: "+key),"loading"===fetcher.state&&(abortFetcher(key),fetchReloadIds.delete(key),yeetedKeys.push(key))}return markFetchersDone(yeetedKeys),yeetedKeys.length>0}function deleteBlocker(key){state.blockers.delete(key),blockerFunctions.delete(key)}function updateBlocker(key,newBlocker){let blocker=state.blockers.get(key)||IDLE_BLOCKER;invariant("unblocked"===blocker.state&&"blocked"===newBlocker.state||"blocked"===blocker.state&&"blocked"===newBlocker.state||"blocked"===blocker.state&&"proceeding"===newBlocker.state||"blocked"===blocker.state&&"unblocked"===newBlocker.state||"proceeding"===blocker.state&&"unblocked"===newBlocker.state,"Invalid blocker state transition: "+blocker.state+" -> "+newBlocker.state);let blockers=new Map(state.blockers);blockers.set(key,newBlocker),updateState({blockers})}function shouldBlockNavigation(_ref4){let{currentLocation,nextLocation,historyAction}=_ref4;if(0===blockerFunctions.size)return;blockerFunctions.size>1&&warning(!1,"A router only supports one blocker at a time");let entries=Array.from(blockerFunctions.entries()),[blockerKey,blockerFunction]=entries[entries.length-1],blocker=state.blockers.get(blockerKey);return blocker&&"proceeding"===blocker.state?void 0:blockerFunction({currentLocation,nextLocation,historyAction})?blockerKey:void 0}function handleNavigational404(pathname){let error=getInternalRouterError(404,{pathname}),routesToUse=inFlightDataRoutes||dataRoutes,{matches,route}=getShortCircuitMatches(routesToUse);return cancelActiveDeferreds(),{notFoundMatches:matches,route,error}}function handleDiscoverRouteError(pathname,discoverResult){return{boundaryId:findNearestBoundary(discoverResult.partialMatches).route.id,error:getInternalRouterError(400,{type:"route-discovery",pathname,message:null!=discoverResult.error&&"message"in discoverResult.error?discoverResult.error:String(discoverResult.error)})}}function cancelActiveDeferreds(predicate){let cancelledRouteIds=[];return activeDeferreds.forEach(((dfd,routeId)=>{predicate&&!predicate(routeId)||(dfd.cancel(),cancelledRouteIds.push(routeId),activeDeferreds.delete(routeId))})),cancelledRouteIds}function getScrollKey(location,matches){if(getScrollRestorationKey){return getScrollRestorationKey(location,matches.map((m=>convertRouteMatchToUiMatch(m,state.loaderData))))||location.key}return location.key}function getSavedScrollPosition(location,matches){if(savedScrollPositions){let key=getScrollKey(location,matches),y=savedScrollPositions[key];if("number"==typeof y)return y}return null}function checkFogOfWar(matches,routesToUse,pathname){if(patchRoutesOnMissImpl){if(!matches){return{active:!0,matches:matchRoutesImpl(routesToUse,pathname,basename,!0)||[]}}{let leafRoute=matches[matches.length-1].route;if(leafRoute.path&&("*"===leafRoute.path||leafRoute.path.endsWith("/*"))){return{active:!0,matches:matchRoutesImpl(routesToUse,pathname,basename,!0)}}}}return{active:!1,matches:null}}async function discoverRoutes(matches,pathname,signal){let partialMatches=matches,route=partialMatches.length>0?partialMatches[partialMatches.length-1].route:null;for(;;){let isNonHMR=null==inFlightDataRoutes,routesToUse=inFlightDataRoutes||dataRoutes;try{await loadLazyRouteChildren(patchRoutesOnMissImpl,pathname,partialMatches,routesToUse,manifest,mapRouteProperties,pendingPatchRoutes,signal)}catch(e){return{type:"error",error:e,partialMatches}}finally{isNonHMR&&(dataRoutes=[...dataRoutes])}if(signal.aborted)return{type:"aborted"};let newMatches=matchRoutes(routesToUse,pathname,basename),matchedSplat=!1;if(newMatches){let leafRoute=newMatches[newMatches.length-1].route;if(leafRoute.index)return{type:"success",matches:newMatches};if(leafRoute.path&&leafRoute.path.length>0){if("*"!==leafRoute.path)return{type:"success",matches:newMatches};matchedSplat=!0}}let newPartialMatches=matchRoutesImpl(routesToUse,pathname,basename,!0);if(!newPartialMatches||partialMatches.map((m=>m.route.id)).join("-")===newPartialMatches.map((m=>m.route.id)).join("-"))return{type:"success",matches:matchedSplat?newMatches:null};if(partialMatches=newPartialMatches,route=partialMatches[partialMatches.length-1].route,"*"===route.path)return{type:"success",matches:partialMatches}}}return router={get basename(){return basename},get future(){return future},get state(){return state},get routes(){return dataRoutes},get window(){return routerWindow},initialize:function initialize(){if(unlistenHistory=init.history.listen((_ref=>{let{action:historyAction,location,delta}=_ref;if(ignoreNextHistoryUpdate)return void(ignoreNextHistoryUpdate=!1);warning(0===blockerFunctions.size||null!=delta,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let blockerKey=shouldBlockNavigation({currentLocation:state.location,nextLocation:location,historyAction});return blockerKey&&null!=delta?(ignoreNextHistoryUpdate=!0,init.history.go(-1*delta),void updateBlocker(blockerKey,{state:"blocked",location,proceed(){updateBlocker(blockerKey,{state:"proceeding",proceed:void 0,reset:void 0,location}),init.history.go(delta)},reset(){let blockers=new Map(state.blockers);blockers.set(blockerKey,IDLE_BLOCKER),updateState({blockers})}})):startNavigation(historyAction,location)})),isBrowser){!function restoreAppliedTransitions(_window,transitions){try{let sessionPositions=_window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);if(sessionPositions){let json=JSON.parse(sessionPositions);for(let[k,v]of Object.entries(json||{}))v&&Array.isArray(v)&&transitions.set(k,new Set(v||[]))}}catch(e){}}(routerWindow,appliedViewTransitions);let _saveAppliedTransitions=()=>function persistAppliedTransitions(_window,transitions){if(transitions.size>0){let json={};for(let[k,v]of transitions)json[k]=[...v];try{_window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY,JSON.stringify(json))}catch(error){warning(!1,"Failed to save applied view transitions in sessionStorage ("+error+").")}}}(routerWindow,appliedViewTransitions);routerWindow.addEventListener("pagehide",_saveAppliedTransitions),removePageHideEventListener=()=>routerWindow.removeEventListener("pagehide",_saveAppliedTransitions)}return state.initialized||startNavigation(Action.Pop,state.location,{initialHydration:!0}),router},subscribe:function subscribe(fn){return subscribers.add(fn),()=>subscribers.delete(fn)},enableScrollRestoration:function enableScrollRestoration(positions,getPosition,getKey){if(savedScrollPositions=positions,getScrollPosition=getPosition,getScrollRestorationKey=getKey||null,!initialScrollRestored&&state.navigation===IDLE_NAVIGATION){initialScrollRestored=!0;let y=getSavedScrollPosition(state.location,state.matches);null!=y&&updateState({restoreScrollPosition:y})}return()=>{savedScrollPositions=null,getScrollPosition=null,getScrollRestorationKey=null}},navigate:async function navigate(to,opts){if("number"==typeof to)return void init.history.go(to);let normalizedPath=normalizeTo(state.location,state.matches,basename,future.v7_prependBasename,to,future.v7_relativeSplatPath,null==opts?void 0:opts.fromRouteId,null==opts?void 0:opts.relative),{path,submission,error}=normalizeNavigateOptions(future.v7_normalizeFormMethod,!1,normalizedPath,opts),currentLocation=state.location,nextLocation=createLocation(state.location,path,opts&&opts.state);nextLocation=_extends({},nextLocation,init.history.encodeLocation(nextLocation));let userReplace=opts&&null!=opts.replace?opts.replace:void 0,historyAction=Action.Push;!0===userReplace?historyAction=Action.Replace:!1===userReplace||null!=submission&&isMutationMethod(submission.formMethod)&&submission.formAction===state.location.pathname+state.location.search&&(historyAction=Action.Replace);let preventScrollReset=opts&&"preventScrollReset"in opts?!0===opts.preventScrollReset:void 0,flushSync=!0===(opts&&opts.unstable_flushSync),blockerKey=shouldBlockNavigation({currentLocation,nextLocation,historyAction});if(!blockerKey)return await startNavigation(historyAction,nextLocation,{submission,pendingError:error,preventScrollReset,replace:opts&&opts.replace,enableViewTransition:opts&&opts.unstable_viewTransition,flushSync});updateBlocker(blockerKey,{state:"blocked",location:nextLocation,proceed(){updateBlocker(blockerKey,{state:"proceeding",proceed:void 0,reset:void 0,location:nextLocation}),navigate(to,opts)},reset(){let blockers=new Map(state.blockers);blockers.set(blockerKey,IDLE_BLOCKER),updateState({blockers})}})},fetch:function fetch(key,routeId,href,opts){if(isServer)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");fetchControllers.has(key)&&abortFetcher(key);let flushSync=!0===(opts&&opts.unstable_flushSync),routesToUse=inFlightDataRoutes||dataRoutes,normalizedPath=normalizeTo(state.location,state.matches,basename,future.v7_prependBasename,href,future.v7_relativeSplatPath,routeId,null==opts?void 0:opts.relative),matches=matchRoutes(routesToUse,normalizedPath,basename),fogOfWar=checkFogOfWar(matches,routesToUse,normalizedPath);if(fogOfWar.active&&fogOfWar.matches&&(matches=fogOfWar.matches),!matches)return void setFetcherError(key,routeId,getInternalRouterError(404,{pathname:normalizedPath}),{flushSync});let{path,submission,error}=normalizeNavigateOptions(future.v7_normalizeFormMethod,!0,normalizedPath,opts);if(error)return void setFetcherError(key,routeId,error,{flushSync});let match=getTargetMatch(matches,path);pendingPreventScrollReset=!0===(opts&&opts.preventScrollReset),submission&&isMutationMethod(submission.formMethod)?async function handleFetcherAction(key,routeId,path,match,requestMatches,isFogOfWar,flushSync,submission){function detectAndHandle405Error(m){if(!m.route.action&&!m.route.lazy){let error=getInternalRouterError(405,{method:submission.formMethod,pathname:path,routeId});return setFetcherError(key,routeId,error,{flushSync}),!0}return!1}if(interruptActiveLoads(),fetchLoadMatches.delete(key),!isFogOfWar&&detectAndHandle405Error(match))return;let existingFetcher=state.fetchers.get(key);updateFetcherState(key,function getSubmittingFetcher(submission,existingFetcher){let fetcher={state:"submitting",formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text,data:existingFetcher?existingFetcher.data:void 0};return fetcher}(submission,existingFetcher),{flushSync});let abortController=new AbortController,fetchRequest=createClientSideRequest(init.history,path,abortController.signal,submission);if(isFogOfWar){let discoverResult=await discoverRoutes(requestMatches,path,fetchRequest.signal);if("aborted"===discoverResult.type)return;if("error"===discoverResult.type){let{error}=handleDiscoverRouteError(path,discoverResult);return void setFetcherError(key,routeId,error,{flushSync})}if(!discoverResult.matches)return void setFetcherError(key,routeId,getInternalRouterError(404,{pathname:path}),{flushSync});if(detectAndHandle405Error(match=getTargetMatch(requestMatches=discoverResult.matches,path)))return}fetchControllers.set(key,abortController);let originatingLoadId=incrementingLoadId,actionResults=await callDataStrategy("action",fetchRequest,[match],requestMatches),actionResult=actionResults[0];if(fetchRequest.signal.aborted)return void(fetchControllers.get(key)===abortController&&fetchControllers.delete(key));if(future.v7_fetcherPersist&&deletedFetchers.has(key)){if(isRedirectResult(actionResult)||isErrorResult(actionResult))return void updateFetcherState(key,getDoneFetcher(void 0))}else{if(isRedirectResult(actionResult))return fetchControllers.delete(key),pendingNavigationLoadId>originatingLoadId?void updateFetcherState(key,getDoneFetcher(void 0)):(fetchRedirectIds.add(key),updateFetcherState(key,getLoadingFetcher(submission)),startRedirectNavigation(fetchRequest,actionResult,{fetcherSubmission:submission}));if(isErrorResult(actionResult))return void setFetcherError(key,routeId,actionResult.error)}if(isDeferredResult(actionResult))throw getInternalRouterError(400,{type:"defer-action"});let nextLocation=state.navigation.location||state.location,revalidationRequest=createClientSideRequest(init.history,nextLocation,abortController.signal),routesToUse=inFlightDataRoutes||dataRoutes,matches="idle"!==state.navigation.state?matchRoutes(routesToUse,state.navigation.location,basename):state.matches;invariant(matches,"Didn't find any matches after fetcher action");let loadId=++incrementingLoadId;fetchReloadIds.set(key,loadId);let loadFetcher=getLoadingFetcher(submission,actionResult.data);state.fetchers.set(key,loadFetcher);let[matchesToLoad,revalidatingFetchers]=getMatchesToLoad(init.history,state,matches,submission,nextLocation,!1,future.v7_skipActionErrorRevalidation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,deletedFetchers,fetchLoadMatches,fetchRedirectIds,routesToUse,basename,[match.route.id,actionResult]);revalidatingFetchers.filter((rf=>rf.key!==key)).forEach((rf=>{let staleKey=rf.key,existingFetcher=state.fetchers.get(staleKey),revalidatingFetcher=getLoadingFetcher(void 0,existingFetcher?existingFetcher.data:void 0);state.fetchers.set(staleKey,revalidatingFetcher),fetchControllers.has(staleKey)&&abortFetcher(staleKey),rf.controller&&fetchControllers.set(staleKey,rf.controller)})),updateState({fetchers:new Map(state.fetchers)});let abortPendingFetchRevalidations=()=>revalidatingFetchers.forEach((rf=>abortFetcher(rf.key)));abortController.signal.addEventListener("abort",abortPendingFetchRevalidations);let{loaderResults,fetcherResults}=await callLoadersAndMaybeResolveData(state.matches,matches,matchesToLoad,revalidatingFetchers,revalidationRequest);if(abortController.signal.aborted)return;abortController.signal.removeEventListener("abort",abortPendingFetchRevalidations),fetchReloadIds.delete(key),fetchControllers.delete(key),revalidatingFetchers.forEach((r=>fetchControllers.delete(r.key)));let redirect=findRedirect([...loaderResults,...fetcherResults]);if(redirect){if(redirect.idx>=matchesToLoad.length){let fetcherKey=revalidatingFetchers[redirect.idx-matchesToLoad.length].key;fetchRedirectIds.add(fetcherKey)}return startRedirectNavigation(revalidationRequest,redirect.result)}let{loaderData,errors}=processLoaderData(state,state.matches,matchesToLoad,loaderResults,void 0,revalidatingFetchers,fetcherResults,activeDeferreds);if(state.fetchers.has(key)){let doneFetcher=getDoneFetcher(actionResult.data);state.fetchers.set(key,doneFetcher)}abortStaleFetchLoads(loadId),"loading"===state.navigation.state&&loadId>pendingNavigationLoadId?(invariant(pendingAction,"Expected pending action"),pendingNavigationController&&pendingNavigationController.abort(),completeNavigation(state.navigation.location,{matches,loaderData,errors,fetchers:new Map(state.fetchers)})):(updateState({errors,loaderData:mergeLoaderData(state.loaderData,loaderData,matches,errors),fetchers:new Map(state.fetchers)}),isRevalidationRequired=!1)}(key,routeId,path,match,matches,fogOfWar.active,flushSync,submission):(fetchLoadMatches.set(key,{routeId,path}),async function handleFetcherLoader(key,routeId,path,match,matches,isFogOfWar,flushSync,submission){let existingFetcher=state.fetchers.get(key);updateFetcherState(key,getLoadingFetcher(submission,existingFetcher?existingFetcher.data:void 0),{flushSync});let abortController=new AbortController,fetchRequest=createClientSideRequest(init.history,path,abortController.signal);if(isFogOfWar){let discoverResult=await discoverRoutes(matches,path,fetchRequest.signal);if("aborted"===discoverResult.type)return;if("error"===discoverResult.type){let{error}=handleDiscoverRouteError(path,discoverResult);return void setFetcherError(key,routeId,error,{flushSync})}if(!discoverResult.matches)return void setFetcherError(key,routeId,getInternalRouterError(404,{pathname:path}),{flushSync});match=getTargetMatch(matches=discoverResult.matches,path)}fetchControllers.set(key,abortController);let originatingLoadId=incrementingLoadId,results=await callDataStrategy("loader",fetchRequest,[match],matches),result=results[0];isDeferredResult(result)&&(result=await resolveDeferredData(result,fetchRequest.signal,!0)||result);fetchControllers.get(key)===abortController&&fetchControllers.delete(key);if(fetchRequest.signal.aborted)return;if(deletedFetchers.has(key))return void updateFetcherState(key,getDoneFetcher(void 0));if(isRedirectResult(result))return pendingNavigationLoadId>originatingLoadId?void updateFetcherState(key,getDoneFetcher(void 0)):(fetchRedirectIds.add(key),void await startRedirectNavigation(fetchRequest,result));if(isErrorResult(result))return void setFetcherError(key,routeId,result.error);invariant(!isDeferredResult(result),"Unhandled fetcher deferred data"),updateFetcherState(key,getDoneFetcher(result.data))}(key,routeId,path,match,matches,fogOfWar.active,flushSync,submission))},revalidate:function revalidate(){interruptActiveLoads(),updateState({revalidation:"loading"}),"submitting"!==state.navigation.state&&("idle"!==state.navigation.state?startNavigation(pendingAction||state.historyAction,state.navigation.location,{overrideNavigation:state.navigation}):startNavigation(state.historyAction,state.location,{startUninterruptedRevalidation:!0}))},createHref:to=>init.history.createHref(to),encodeLocation:to=>init.history.encodeLocation(to),getFetcher,deleteFetcher:function deleteFetcherAndUpdateState(key){if(future.v7_fetcherPersist){let count=(activeFetchers.get(key)||0)-1;count<=0?(activeFetchers.delete(key),deletedFetchers.add(key)):activeFetchers.set(key,count)}else deleteFetcher(key);updateState({fetchers:new Map(state.fetchers)})},dispose:function dispose(){unlistenHistory&&unlistenHistory(),removePageHideEventListener&&removePageHideEventListener(),subscribers.clear(),pendingNavigationController&&pendingNavigationController.abort(),state.fetchers.forEach(((_,key)=>deleteFetcher(key))),state.blockers.forEach(((_,key)=>deleteBlocker(key)))},getBlocker:function getBlocker(key,fn){let blocker=state.blockers.get(key)||IDLE_BLOCKER;return blockerFunctions.get(key)!==fn&&blockerFunctions.set(key,fn),blocker},deleteBlocker,patchRoutes:function patchRoutes(routeId,children){let isNonHMR=null==inFlightDataRoutes;patchRoutesImpl(routeId,children,inFlightDataRoutes||dataRoutes,manifest,mapRouteProperties),isNonHMR&&(dataRoutes=[...dataRoutes],updateState({}))},_internalFetchControllers:fetchControllers,_internalActiveDeferreds:activeDeferreds,_internalSetRoutes:function _internalSetRoutes(newRoutes){manifest={},inFlightDataRoutes=convertRoutesToDataRoutes(newRoutes,mapRouteProperties,void 0,manifest)}},router}Symbol("deferred");function normalizeTo(location,matches,basename,prependBasename,to,v7_relativeSplatPath,fromRouteId,relative){let contextualMatches,activeRouteMatch;if(fromRouteId){contextualMatches=[];for(let match of matches)if(contextualMatches.push(match),match.route.id===fromRouteId){activeRouteMatch=match;break}}else contextualMatches=matches,activeRouteMatch=matches[matches.length-1];let path=resolveTo(to||".",getResolveToMatches(contextualMatches,v7_relativeSplatPath),stripBasename(location.pathname,basename)||location.pathname,"path"===relative);return null==to&&(path.search=location.search,path.hash=location.hash),null!=to&&""!==to&&"."!==to||!activeRouteMatch||!activeRouteMatch.route.index||hasNakedIndexQuery(path.search)||(path.search=path.search?path.search.replace(/^\?/,"?index&"):"?index"),prependBasename&&"/"!==basename&&(path.pathname="/"===path.pathname?basename:joinPaths([basename,path.pathname])),createPath(path)}function normalizeNavigateOptions(normalizeFormMethod,isFetcher,path,opts){if(!opts||!function isSubmissionNavigation(opts){return null!=opts&&("formData"in opts&&null!=opts.formData||"body"in opts&&void 0!==opts.body)}(opts))return{path};if(opts.formMethod&&!isValidMethod(opts.formMethod))return{path,error:getInternalRouterError(405,{method:opts.formMethod})};let searchParams,formData,getInvalidBodyError=()=>({path,error:getInternalRouterError(400,{type:"invalid-body"})}),rawFormMethod=opts.formMethod||"get",formMethod=normalizeFormMethod?rawFormMethod.toUpperCase():rawFormMethod.toLowerCase(),formAction=stripHashFromPath(path);if(void 0!==opts.body){if("text/plain"===opts.formEncType){if(!isMutationMethod(formMethod))return getInvalidBodyError();let text="string"==typeof opts.body?opts.body:opts.body instanceof FormData||opts.body instanceof URLSearchParams?Array.from(opts.body.entries()).reduce(((acc,_ref5)=>{let[name,value]=_ref5;return""+acc+name+"="+value+"\n"}),""):String(opts.body);return{path,submission:{formMethod,formAction,formEncType:opts.formEncType,formData:void 0,json:void 0,text}}}if("application/json"===opts.formEncType){if(!isMutationMethod(formMethod))return getInvalidBodyError();try{let json="string"==typeof opts.body?JSON.parse(opts.body):opts.body;return{path,submission:{formMethod,formAction,formEncType:opts.formEncType,formData:void 0,json,text:void 0}}}catch(e){return getInvalidBodyError()}}}if(invariant("function"==typeof FormData,"FormData is not available in this environment"),opts.formData)searchParams=convertFormDataToSearchParams(opts.formData),formData=opts.formData;else if(opts.body instanceof FormData)searchParams=convertFormDataToSearchParams(opts.body),formData=opts.body;else if(opts.body instanceof URLSearchParams)searchParams=opts.body,formData=convertSearchParamsToFormData(searchParams);else if(null==opts.body)searchParams=new URLSearchParams,formData=new FormData;else try{searchParams=new URLSearchParams(opts.body),formData=convertSearchParamsToFormData(searchParams)}catch(e){return getInvalidBodyError()}let submission={formMethod,formAction,formEncType:opts&&opts.formEncType||"application/x-www-form-urlencoded",formData,json:void 0,text:void 0};if(isMutationMethod(submission.formMethod))return{path,submission};let parsedPath=parsePath(path);return isFetcher&&parsedPath.search&&hasNakedIndexQuery(parsedPath.search)&&searchParams.append("index",""),parsedPath.search="?"+searchParams,{path:createPath(parsedPath),submission}}function getLoaderMatchesUntilBoundary(matches,boundaryId){let boundaryMatches=matches;if(boundaryId){let index=matches.findIndex((m=>m.route.id===boundaryId));index>=0&&(boundaryMatches=matches.slice(0,index))}return boundaryMatches}function getMatchesToLoad(history,state,matches,submission,location,isInitialLoad,skipActionErrorRevalidation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,deletedFetchers,fetchLoadMatches,fetchRedirectIds,routesToUse,basename,pendingActionResult){let actionResult=pendingActionResult?isErrorResult(pendingActionResult[1])?pendingActionResult[1].error:pendingActionResult[1].data:void 0,currentUrl=history.createURL(state.location),nextUrl=history.createURL(location),boundaryId=pendingActionResult&&isErrorResult(pendingActionResult[1])?pendingActionResult[0]:void 0,boundaryMatches=boundaryId?getLoaderMatchesUntilBoundary(matches,boundaryId):matches,actionStatus=pendingActionResult?pendingActionResult[1].statusCode:void 0,shouldSkipRevalidation=skipActionErrorRevalidation&&actionStatus&&actionStatus>=400,navigationMatches=boundaryMatches.filter(((match,index)=>{let{route}=match;if(route.lazy)return!0;if(null==route.loader)return!1;if(isInitialLoad)return!("function"==typeof route.loader&&!route.loader.hydrate)||void 0===state.loaderData[route.id]&&(!state.errors||void 0===state.errors[route.id]);if(function isNewLoader(currentLoaderData,currentMatch,match){let isNew=!currentMatch||match.route.id!==currentMatch.route.id,isMissingData=void 0===currentLoaderData[match.route.id];return isNew||isMissingData}(state.loaderData,state.matches[index],match)||cancelledDeferredRoutes.some((id=>id===match.route.id)))return!0;let currentRouteMatch=state.matches[index],nextRouteMatch=match;return shouldRevalidateLoader(match,_extends({currentUrl,currentParams:currentRouteMatch.params,nextUrl,nextParams:nextRouteMatch.params},submission,{actionResult,actionStatus,defaultShouldRevalidate:!shouldSkipRevalidation&&(isRevalidationRequired||currentUrl.pathname+currentUrl.search===nextUrl.pathname+nextUrl.search||currentUrl.search!==nextUrl.search||isNewRouteInstance(currentRouteMatch,nextRouteMatch))}))})),revalidatingFetchers=[];return fetchLoadMatches.forEach(((f,key)=>{if(isInitialLoad||!matches.some((m=>m.route.id===f.routeId))||deletedFetchers.has(key))return;let fetcherMatches=matchRoutes(routesToUse,f.path,basename);if(!fetcherMatches)return void revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:null,match:null,controller:null});let fetcher=state.fetchers.get(key),fetcherMatch=getTargetMatch(fetcherMatches,f.path),shouldRevalidate=!1;fetchRedirectIds.has(key)?shouldRevalidate=!1:cancelledFetcherLoads.has(key)?(cancelledFetcherLoads.delete(key),shouldRevalidate=!0):shouldRevalidate=fetcher&&"idle"!==fetcher.state&&void 0===fetcher.data?isRevalidationRequired:shouldRevalidateLoader(fetcherMatch,_extends({currentUrl,currentParams:state.matches[state.matches.length-1].params,nextUrl,nextParams:matches[matches.length-1].params},submission,{actionResult,actionStatus,defaultShouldRevalidate:!shouldSkipRevalidation&&isRevalidationRequired})),shouldRevalidate&&revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:fetcherMatches,match:fetcherMatch,controller:new AbortController})})),[navigationMatches,revalidatingFetchers]}function isNewRouteInstance(currentMatch,match){let currentPath=currentMatch.route.path;return currentMatch.pathname!==match.pathname||null!=currentPath&&currentPath.endsWith("*")&&currentMatch.params["*"]!==match.params["*"]}function shouldRevalidateLoader(loaderMatch,arg){if(loaderMatch.route.shouldRevalidate){let routeChoice=loaderMatch.route.shouldRevalidate(arg);if("boolean"==typeof routeChoice)return routeChoice}return arg.defaultShouldRevalidate}async function loadLazyRouteChildren(patchRoutesOnMissImpl,path,matches,routes,manifest,mapRouteProperties,pendingRouteChildren,signal){let key=[path,...matches.map((m=>m.route.id))].join("-");try{let pending=pendingRouteChildren.get(key);pending||(pending=patchRoutesOnMissImpl({path,matches,patch:(routeId,children)=>{signal.aborted||patchRoutesImpl(routeId,children,routes,manifest,mapRouteProperties)}}),pendingRouteChildren.set(key,pending)),pending&&function isPromise(val){return"object"==typeof val&&null!=val&&"then"in val}(pending)&&await pending}finally{pendingRouteChildren.delete(key)}}function patchRoutesImpl(routeId,children,routesToUse,manifest,mapRouteProperties){if(routeId){var _route$children;let route=manifest[routeId];invariant(route,"No route found to patch children into: routeId = "+routeId);let dataChildren=convertRoutesToDataRoutes(children,mapRouteProperties,[routeId,"patch",String((null==(_route$children=route.children)?void 0:_route$children.length)||"0")],manifest);route.children?route.children.push(...dataChildren):route.children=dataChildren}else{let dataChildren=convertRoutesToDataRoutes(children,mapRouteProperties,["patch",String(routesToUse.length||"0")],manifest);routesToUse.push(...dataChildren)}}async function loadLazyRouteModule(route,mapRouteProperties,manifest){if(!route.lazy)return;let lazyRoute=await route.lazy();if(!route.lazy)return;let routeToUpdate=manifest[route.id];invariant(routeToUpdate,"No route found in manifest");let routeUpdates={};for(let lazyRouteProperty in lazyRoute){let isPropertyStaticallyDefined=void 0!==routeToUpdate[lazyRouteProperty]&&"hasErrorBoundary"!==lazyRouteProperty;warning(!isPropertyStaticallyDefined,'Route "'+routeToUpdate.id+'" has a static property "'+lazyRouteProperty+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+lazyRouteProperty+'" will be ignored.'),isPropertyStaticallyDefined||immutableRouteKeys.has(lazyRouteProperty)||(routeUpdates[lazyRouteProperty]=lazyRoute[lazyRouteProperty])}Object.assign(routeToUpdate,routeUpdates),Object.assign(routeToUpdate,_extends({},mapRouteProperties(routeToUpdate),{lazy:void 0}))}function defaultDataStrategy(opts){return Promise.all(opts.matches.map((m=>m.resolve())))}async function callDataStrategyImpl(dataStrategyImpl,type,request,matchesToLoad,matches,manifest,mapRouteProperties,requestContext){let routeIdsToLoad=matchesToLoad.reduce(((acc,m)=>acc.add(m.route.id)),new Set),loadedMatches=new Set,results=await dataStrategyImpl({matches:matches.map((match=>{let shouldLoad=routeIdsToLoad.has(match.route.id);return _extends({},match,{shouldLoad,resolve:handlerOverride=>(loadedMatches.add(match.route.id),shouldLoad?async function callLoaderOrAction(type,request,match,manifest,mapRouteProperties,handlerOverride,staticContext){let result,onReject,runHandler=handler=>{let reject,abortPromise=new Promise(((_,r)=>reject=r));onReject=()=>reject(),request.signal.addEventListener("abort",onReject);let handlerPromise,actualHandler=ctx=>"function"!=typeof handler?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+type+'" [routeId: '+match.route.id+"]")):handler({request,params:match.params,context:staticContext},...void 0!==ctx?[ctx]:[]);return handlerPromise=handlerOverride?handlerOverride((ctx=>actualHandler(ctx))):(async()=>{try{return{type:"data",result:await actualHandler()}}catch(e){return{type:"error",result:e}}})(),Promise.race([handlerPromise,abortPromise])};try{let handler=match.route[type];if(match.route.lazy)if(handler){let handlerError,[value]=await Promise.all([runHandler(handler).catch((e=>{handlerError=e})),loadLazyRouteModule(match.route,mapRouteProperties,manifest)]);if(void 0!==handlerError)throw handlerError;result=value}else{if(await loadLazyRouteModule(match.route,mapRouteProperties,manifest),handler=match.route[type],!handler){if("action"===type){let url=new URL(request.url),pathname=url.pathname+url.search;throw getInternalRouterError(405,{method:request.method,pathname,routeId:match.route.id})}return{type:ResultType.data,result:void 0}}result=await runHandler(handler)}else{if(!handler){let url=new URL(request.url);throw getInternalRouterError(404,{pathname:url.pathname+url.search})}result=await runHandler(handler)}invariant(void 0!==result.result,"You defined "+("action"===type?"an action":"a loader")+' for route "'+match.route.id+"\" but didn't return anything from your `"+type+"` function. Please return a value or `null`.")}catch(e){return{type:ResultType.error,result:e}}finally{onReject&&request.signal.removeEventListener("abort",onReject)}return result}(type,request,match,manifest,mapRouteProperties,handlerOverride,requestContext):Promise.resolve({type:ResultType.data,result:void 0}))})})),request,params:matches[0].params,context:requestContext});return matches.forEach((m=>invariant(loadedMatches.has(m.route.id),'`match.resolve()` was not called for route id "'+m.route.id+'". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.'))),results.filter(((_,i)=>routeIdsToLoad.has(matches[i].route.id)))}async function convertHandlerResultToDataResult(handlerResult){let{result,type}=handlerResult;if(isResponse(result)){let data;try{let contentType=result.headers.get("Content-Type");data=contentType&&/\bapplication\/json\b/.test(contentType)?null==result.body?null:await result.json():await result.text()}catch(e){return{type:ResultType.error,error:e}}return type===ResultType.error?{type:ResultType.error,error:new ErrorResponseImpl(result.status,result.statusText,data),statusCode:result.status,headers:result.headers}:{type:ResultType.data,data,statusCode:result.status,headers:result.headers}}if(type===ResultType.error){if(isDataWithResponseInit(result)){var _result$init2,_result$init;if(result.data instanceof Error)return{type:ResultType.error,error:result.data,statusCode:null==(_result$init=result.init)?void 0:_result$init.status};result=new ErrorResponseImpl((null==(_result$init2=result.init)?void 0:_result$init2.status)||500,void 0,result.data)}return{type:ResultType.error,error:result,statusCode:isRouteErrorResponse(result)?result.status:void 0}}var _result$init3,_result$init4,_result$init5,_result$init6;return function isDeferredData(value){let deferred=value;return deferred&&"object"==typeof deferred&&"object"==typeof deferred.data&&"function"==typeof deferred.subscribe&&"function"==typeof deferred.cancel&&"function"==typeof deferred.resolveData}(result)?{type:ResultType.deferred,deferredData:result,statusCode:null==(_result$init3=result.init)?void 0:_result$init3.status,headers:(null==(_result$init4=result.init)?void 0:_result$init4.headers)&&new Headers(result.init.headers)}:isDataWithResponseInit(result)?{type:ResultType.data,data:result.data,statusCode:null==(_result$init5=result.init)?void 0:_result$init5.status,headers:null!=(_result$init6=result.init)&&_result$init6.headers?new Headers(result.init.headers):void 0}:{type:ResultType.data,data:result}}function normalizeRelativeRoutingRedirectResponse(response,request,routeId,matches,basename,v7_relativeSplatPath){let location=response.headers.get("Location");if(invariant(location,"Redirects returned/thrown from loaders/actions must have a Location header"),!ABSOLUTE_URL_REGEX.test(location)){let trimmedMatches=matches.slice(0,matches.findIndex((m=>m.route.id===routeId))+1);location=normalizeTo(new URL(request.url),trimmedMatches,basename,!0,location,v7_relativeSplatPath),response.headers.set("Location",location)}return response}function normalizeRedirectLocation(location,currentUrl,basename){if(ABSOLUTE_URL_REGEX.test(location)){let normalizedLocation=location,url=normalizedLocation.startsWith("//")?new URL(currentUrl.protocol+normalizedLocation):new URL(normalizedLocation),isSameBasename=null!=stripBasename(url.pathname,basename);if(url.origin===currentUrl.origin&&isSameBasename)return url.pathname+url.search+url.hash}return location}function createClientSideRequest(history,location,signal,submission){let url=history.createURL(stripHashFromPath(location)).toString(),init={signal};if(submission&&isMutationMethod(submission.formMethod)){let{formMethod,formEncType}=submission;init.method=formMethod.toUpperCase(),"application/json"===formEncType?(init.headers=new Headers({"Content-Type":formEncType}),init.body=JSON.stringify(submission.json)):"text/plain"===formEncType?init.body=submission.text:"application/x-www-form-urlencoded"===formEncType&&submission.formData?init.body=convertFormDataToSearchParams(submission.formData):init.body=submission.formData}return new Request(url,init)}function convertFormDataToSearchParams(formData){let searchParams=new URLSearchParams;for(let[key,value]of formData.entries())searchParams.append(key,"string"==typeof value?value:value.name);return searchParams}function convertSearchParamsToFormData(searchParams){let formData=new FormData;for(let[key,value]of searchParams.entries())formData.append(key,value);return formData}function processRouteLoaderData(matches,matchesToLoad,results,pendingActionResult,activeDeferreds,skipLoaderErrorBubbling){let statusCode,loaderData={},errors=null,foundError=!1,loaderHeaders={},pendingError=pendingActionResult&&isErrorResult(pendingActionResult[1])?pendingActionResult[1].error:void 0;return results.forEach(((result,index)=>{let id=matchesToLoad[index].route.id;if(invariant(!isRedirectResult(result),"Cannot handle redirect results in processLoaderData"),isErrorResult(result)){let error=result.error;if(void 0!==pendingError&&(error=pendingError,pendingError=void 0),errors=errors||{},skipLoaderErrorBubbling)errors[id]=error;else{let boundaryMatch=findNearestBoundary(matches,id);null==errors[boundaryMatch.route.id]&&(errors[boundaryMatch.route.id]=error)}loaderData[id]=void 0,foundError||(foundError=!0,statusCode=isRouteErrorResponse(result.error)?result.error.status:500),result.headers&&(loaderHeaders[id]=result.headers)}else isDeferredResult(result)?(activeDeferreds.set(id,result.deferredData),loaderData[id]=result.deferredData.data,null==result.statusCode||200===result.statusCode||foundError||(statusCode=result.statusCode),result.headers&&(loaderHeaders[id]=result.headers)):(loaderData[id]=result.data,result.statusCode&&200!==result.statusCode&&!foundError&&(statusCode=result.statusCode),result.headers&&(loaderHeaders[id]=result.headers))})),void 0!==pendingError&&pendingActionResult&&(errors={[pendingActionResult[0]]:pendingError},loaderData[pendingActionResult[0]]=void 0),{loaderData,errors,statusCode:statusCode||200,loaderHeaders}}function processLoaderData(state,matches,matchesToLoad,results,pendingActionResult,revalidatingFetchers,fetcherResults,activeDeferreds){let{loaderData,errors}=processRouteLoaderData(matches,matchesToLoad,results,pendingActionResult,activeDeferreds,!1);for(let index=0;index<revalidatingFetchers.length;index++){let{key,match,controller}=revalidatingFetchers[index];invariant(void 0!==fetcherResults&&void 0!==fetcherResults[index],"Did not find corresponding fetcher result");let result=fetcherResults[index];if(!controller||!controller.signal.aborted)if(isErrorResult(result)){let boundaryMatch=findNearestBoundary(state.matches,null==match?void 0:match.route.id);errors&&errors[boundaryMatch.route.id]||(errors=_extends({},errors,{[boundaryMatch.route.id]:result.error})),state.fetchers.delete(key)}else if(isRedirectResult(result))invariant(!1,"Unhandled fetcher revalidation redirect");else if(isDeferredResult(result))invariant(!1,"Unhandled fetcher deferred data");else{let doneFetcher=getDoneFetcher(result.data);state.fetchers.set(key,doneFetcher)}}return{loaderData,errors}}function mergeLoaderData(loaderData,newLoaderData,matches,errors){let mergedLoaderData=_extends({},newLoaderData);for(let match of matches){let id=match.route.id;if(newLoaderData.hasOwnProperty(id)?void 0!==newLoaderData[id]&&(mergedLoaderData[id]=newLoaderData[id]):void 0!==loaderData[id]&&match.route.loader&&(mergedLoaderData[id]=loaderData[id]),errors&&errors.hasOwnProperty(id))break}return mergedLoaderData}function getActionDataForCommit(pendingActionResult){return pendingActionResult?isErrorResult(pendingActionResult[1])?{actionData:{}}:{actionData:{[pendingActionResult[0]]:pendingActionResult[1].data}}:{}}function findNearestBoundary(matches,routeId){return(routeId?matches.slice(0,matches.findIndex((m=>m.route.id===routeId))+1):[...matches]).reverse().find((m=>!0===m.route.hasErrorBoundary))||matches[0]}function getShortCircuitMatches(routes){let route=1===routes.length?routes[0]:routes.find((r=>r.index||!r.path||"/"===r.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route}],route}}function getInternalRouterError(status,_temp5){let{pathname,routeId,method,type,message}=void 0===_temp5?{}:_temp5,statusText="Unknown Server Error",errorMessage="Unknown @remix-run/router error";return 400===status?(statusText="Bad Request","route-discovery"===type?errorMessage='Unable to match URL "'+pathname+'" - the `unstable_patchRoutesOnMiss()` function threw the following error:\n'+message:method&&pathname&&routeId?errorMessage="You made a "+method+' request to "'+pathname+'" but did not provide a `loader` for route "'+routeId+'", so there is no way to handle the request.':"defer-action"===type?errorMessage="defer() is not supported in actions":"invalid-body"===type&&(errorMessage="Unable to encode submission body")):403===status?(statusText="Forbidden",errorMessage='Route "'+routeId+'" does not match URL "'+pathname+'"'):404===status?(statusText="Not Found",errorMessage='No route matches URL "'+pathname+'"'):405===status&&(statusText="Method Not Allowed",method&&pathname&&routeId?errorMessage="You made a "+method.toUpperCase()+' request to "'+pathname+'" but did not provide an `action` for route "'+routeId+'", so there is no way to handle the request.':method&&(errorMessage='Invalid request method "'+method.toUpperCase()+'"')),new ErrorResponseImpl(status||500,statusText,new Error(errorMessage),!0)}function findRedirect(results){for(let i=results.length-1;i>=0;i--){let result=results[i];if(isRedirectResult(result))return{result,idx:i}}}function stripHashFromPath(path){return createPath(_extends({},"string"==typeof path?parsePath(path):path,{hash:""}))}function isRedirectHandlerResult(result){return isResponse(result.result)&&redirectStatusCodes.has(result.result.status)}function isDeferredResult(result){return result.type===ResultType.deferred}function isErrorResult(result){return result.type===ResultType.error}function isRedirectResult(result){return(result&&result.type)===ResultType.redirect}function isDataWithResponseInit(value){return"object"==typeof value&&null!=value&&"type"in value&&"data"in value&&"init"in value&&"DataWithResponseInit"===value.type}function isResponse(value){return null!=value&&"number"==typeof value.status&&"string"==typeof value.statusText&&"object"==typeof value.headers&&void 0!==value.body}function isValidMethod(method){return validRequestMethods.has(method.toLowerCase())}function isMutationMethod(method){return validMutationMethods.has(method.toLowerCase())}async function resolveDeferredResults(currentMatches,matchesToLoad,results,signals,isFetcher,currentLoaderData){for(let index=0;index<results.length;index++){let result=results[index],match=matchesToLoad[index];if(!match)continue;let currentMatch=currentMatches.find((m=>m.route.id===match.route.id)),isRevalidatingLoader=null!=currentMatch&&!isNewRouteInstance(currentMatch,match)&&void 0!==(currentLoaderData&&currentLoaderData[match.route.id]);if(isDeferredResult(result)&&(isFetcher||isRevalidatingLoader)){let signal=signals[index];invariant(signal,"Expected an AbortSignal for revalidating fetcher deferred result"),await resolveDeferredData(result,signal,isFetcher).then((result=>{result&&(results[index]=result||results[index])}))}}}async function resolveDeferredData(result,signal,unwrap){if(void 0===unwrap&&(unwrap=!1),!await result.deferredData.resolveData(signal)){if(unwrap)try{return{type:ResultType.data,data:result.deferredData.unwrappedData}}catch(e){return{type:ResultType.error,error:e}}return{type:ResultType.data,data:result.deferredData.data}}}function hasNakedIndexQuery(search){return new URLSearchParams(search).getAll("index").some((v=>""===v))}function getTargetMatch(matches,location){let search="string"==typeof location?parsePath(location).search:location.search;if(matches[matches.length-1].route.index&&hasNakedIndexQuery(search||""))return matches[matches.length-1];let pathMatches=getPathContributingMatches(matches);return pathMatches[pathMatches.length-1]}function getSubmissionFromNavigation(navigation){let{formMethod,formAction,formEncType,text,formData,json}=navigation;if(formMethod&&formAction&&formEncType)return null!=text?{formMethod,formAction,formEncType,formData:void 0,json:void 0,text}:null!=formData?{formMethod,formAction,formEncType,formData,json:void 0,text:void 0}:void 0!==json?{formMethod,formAction,formEncType,formData:void 0,json,text:void 0}:void 0}function getLoadingNavigation(location,submission){if(submission){return{state:"loading",location,formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text}}return{state:"loading",location,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function getLoadingFetcher(submission,data){if(submission){return{state:"loading",formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text,data}}return{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data}}function getDoneFetcher(data){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data}}function dist_extends(){return dist_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},dist_extends.apply(this,arguments)}const DataRouterContext=react.createContext(null);const DataRouterStateContext=react.createContext(null);const AwaitContext=react.createContext(null);const NavigationContext=react.createContext(null);const LocationContext=react.createContext(null);const RouteContext=react.createContext({outlet:null,matches:[],isDataRoute:!1});const RouteErrorContext=react.createContext(null);function useHref(to,_temp){let{relative}=void 0===_temp?{}:_temp;useInRouterContext()||invariant(!1);let{basename,navigator}=react.useContext(NavigationContext),{hash,pathname,search}=useResolvedPath(to,{relative}),joinedPathname=pathname;return"/"!==basename&&(joinedPathname="/"===pathname?basename:joinPaths([basename,pathname])),navigator.createHref({pathname:joinedPathname,search,hash})}function useInRouterContext(){return null!=react.useContext(LocationContext)}function useLocation(){return useInRouterContext()||invariant(!1),react.useContext(LocationContext).location}function useNavigationType(){return react.useContext(LocationContext).navigationType}function useMatch(pattern){useInRouterContext()||invariant(!1);let{pathname}=useLocation();return react.useMemo((()=>matchPath(pattern,decodePath(pathname))),[pathname,pattern])}function useIsomorphicLayoutEffect(cb){react.useContext(NavigationContext).static||react.useLayoutEffect(cb)}function useNavigate(){let{isDataRoute}=react.useContext(RouteContext);return isDataRoute?function useNavigateStable(){let{router}=useDataRouterContext(DataRouterHook.UseNavigateStable),id=useCurrentRouteId(DataRouterStateHook.UseNavigateStable),activeRef=react.useRef(!1);return useIsomorphicLayoutEffect((()=>{activeRef.current=!0})),react.useCallback((function(to,options){void 0===options&&(options={}),activeRef.current&&("number"==typeof to?router.navigate(to):router.navigate(to,dist_extends({fromRouteId:id},options)))}),[router,id])}():function useNavigateUnstable(){useInRouterContext()||invariant(!1);let dataRouterContext=react.useContext(DataRouterContext),{basename,future,navigator}=react.useContext(NavigationContext),{matches}=react.useContext(RouteContext),{pathname:locationPathname}=useLocation(),routePathnamesJson=JSON.stringify(getResolveToMatches(matches,future.v7_relativeSplatPath)),activeRef=react.useRef(!1);return useIsomorphicLayoutEffect((()=>{activeRef.current=!0})),react.useCallback((function(to,options){if(void 0===options&&(options={}),!activeRef.current)return;if("number"==typeof to)return void navigator.go(to);let path=resolveTo(to,JSON.parse(routePathnamesJson),locationPathname,"path"===options.relative);null==dataRouterContext&&"/"!==basename&&(path.pathname="/"===path.pathname?basename:joinPaths([basename,path.pathname])),(options.replace?navigator.replace:navigator.push)(path,options.state,options)}),[basename,navigator,routePathnamesJson,locationPathname,dataRouterContext])}()}const OutletContext=react.createContext(null);function useOutletContext(){return react.useContext(OutletContext)}function useOutlet(context){let outlet=react.useContext(RouteContext).outlet;return outlet?react.createElement(OutletContext.Provider,{value:context},outlet):outlet}function useParams(){let{matches}=react.useContext(RouteContext),routeMatch=matches[matches.length-1];return routeMatch?routeMatch.params:{}}function useResolvedPath(to,_temp2){let{relative}=void 0===_temp2?{}:_temp2,{future}=react.useContext(NavigationContext),{matches}=react.useContext(RouteContext),{pathname:locationPathname}=useLocation(),routePathnamesJson=JSON.stringify(getResolveToMatches(matches,future.v7_relativeSplatPath));return react.useMemo((()=>resolveTo(to,JSON.parse(routePathnamesJson),locationPathname,"path"===relative)),[to,routePathnamesJson,locationPathname,relative])}function useRoutes(routes,locationArg){return useRoutesImpl(routes,locationArg)}function useRoutesImpl(routes,locationArg,dataRouterState,future){useInRouterContext()||invariant(!1);let{navigator}=react.useContext(NavigationContext),{matches:parentMatches}=react.useContext(RouteContext),routeMatch=parentMatches[parentMatches.length-1],parentParams=routeMatch?routeMatch.params:{},parentPathnameBase=(routeMatch&&routeMatch.pathname,routeMatch?routeMatch.pathnameBase:"/");routeMatch&&routeMatch.route;let location,locationFromContext=useLocation();if(locationArg){var _parsedLocationArg$pa;let parsedLocationArg="string"==typeof locationArg?parsePath(locationArg):locationArg;"/"===parentPathnameBase||(null==(_parsedLocationArg$pa=parsedLocationArg.pathname)?void 0:_parsedLocationArg$pa.startsWith(parentPathnameBase))||invariant(!1),location=parsedLocationArg}else location=locationFromContext;let pathname=location.pathname||"/",remainingPathname=pathname;if("/"!==parentPathnameBase){let parentSegments=parentPathnameBase.replace(/^\//,"").split("/");remainingPathname="/"+pathname.replace(/^\//,"").split("/").slice(parentSegments.length).join("/")}let matches=matchRoutes(routes,{pathname:remainingPathname});let renderedMatches=_renderMatches(matches&&matches.map((match=>Object.assign({},match,{params:Object.assign({},parentParams,match.params),pathname:joinPaths([parentPathnameBase,navigator.encodeLocation?navigator.encodeLocation(match.pathname).pathname:match.pathname]),pathnameBase:"/"===match.pathnameBase?parentPathnameBase:joinPaths([parentPathnameBase,navigator.encodeLocation?navigator.encodeLocation(match.pathnameBase).pathname:match.pathnameBase])}))),parentMatches,dataRouterState,future);return locationArg&&renderedMatches?react.createElement(LocationContext.Provider,{value:{location:dist_extends({pathname:"/",search:"",hash:"",state:null,key:"default"},location),navigationType:Action.Pop}},renderedMatches):renderedMatches}function DefaultErrorComponent(){let error=useRouteError(),message=isRouteErrorResponse(error)?error.status+" "+error.statusText:error instanceof Error?error.message:JSON.stringify(error),stack=error instanceof Error?error.stack:null,preStyles={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return react.createElement(react.Fragment,null,react.createElement("h2",null,"Unexpected Application Error!"),react.createElement("h3",{style:{fontStyle:"italic"}},message),stack?react.createElement("pre",{style:preStyles},stack):null,null)}const defaultErrorElement=react.createElement(DefaultErrorComponent,null);class RenderErrorBoundary extends react.Component{constructor(props){super(props),this.state={location:props.location,revalidation:props.revalidation,error:props.error}}static getDerivedStateFromError(error){return{error}}static getDerivedStateFromProps(props,state){return state.location!==props.location||"idle"!==state.revalidation&&"idle"===props.revalidation?{error:props.error,location:props.location,revalidation:props.revalidation}:{error:void 0!==props.error?props.error:state.error,location:state.location,revalidation:props.revalidation||state.revalidation}}componentDidCatch(error,errorInfo){console.error("React Router caught the following error during render",error,errorInfo)}render(){return void 0!==this.state.error?react.createElement(RouteContext.Provider,{value:this.props.routeContext},react.createElement(RouteErrorContext.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function RenderedRoute(_ref){let{routeContext,match,children}=_ref,dataRouterContext=react.useContext(DataRouterContext);return dataRouterContext&&dataRouterContext.static&&dataRouterContext.staticContext&&(match.route.errorElement||match.route.ErrorBoundary)&&(dataRouterContext.staticContext._deepestRenderedBoundaryId=match.route.id),react.createElement(RouteContext.Provider,{value:routeContext},children)}function _renderMatches(matches,parentMatches,dataRouterState,future){var _dataRouterState;if(void 0===parentMatches&&(parentMatches=[]),void 0===dataRouterState&&(dataRouterState=null),void 0===future&&(future=null),null==matches){var _future;if(!dataRouterState)return null;if(dataRouterState.errors)matches=dataRouterState.matches;else{if(!(null!=(_future=future)&&_future.v7_partialHydration&&0===parentMatches.length&&!dataRouterState.initialized&&dataRouterState.matches.length>0))return null;matches=dataRouterState.matches}}let renderedMatches=matches,errors=null==(_dataRouterState=dataRouterState)?void 0:_dataRouterState.errors;if(null!=errors){let errorIndex=renderedMatches.findIndex((m=>m.route.id&&void 0!==(null==errors?void 0:errors[m.route.id])));errorIndex>=0||invariant(!1),renderedMatches=renderedMatches.slice(0,Math.min(renderedMatches.length,errorIndex+1))}let renderFallback=!1,fallbackIndex=-1;if(dataRouterState&&future&&future.v7_partialHydration)for(let i=0;i<renderedMatches.length;i++){let match=renderedMatches[i];if((match.route.HydrateFallback||match.route.hydrateFallbackElement)&&(fallbackIndex=i),match.route.id){let{loaderData,errors}=dataRouterState,needsToRunLoader=match.route.loader&&void 0===loaderData[match.route.id]&&(!errors||void 0===errors[match.route.id]);if(match.route.lazy||needsToRunLoader){renderFallback=!0,renderedMatches=fallbackIndex>=0?renderedMatches.slice(0,fallbackIndex+1):[renderedMatches[0]];break}}}return renderedMatches.reduceRight(((outlet,match,index)=>{let error,shouldRenderHydrateFallback=!1,errorElement=null,hydrateFallbackElement=null;dataRouterState&&(error=errors&&match.route.id?errors[match.route.id]:void 0,errorElement=match.route.errorElement||defaultErrorElement,renderFallback&&(fallbackIndex<0&&0===index?(!function warningOnce(key,cond,message){cond||alreadyWarned[key]||(alreadyWarned[key]=!0)}("route-fallback",!1),shouldRenderHydrateFallback=!0,hydrateFallbackElement=null):fallbackIndex===index&&(shouldRenderHydrateFallback=!0,hydrateFallbackElement=match.route.hydrateFallbackElement||null)));let matches=parentMatches.concat(renderedMatches.slice(0,index+1)),getChildren=()=>{let children;return children=error?errorElement:shouldRenderHydrateFallback?hydrateFallbackElement:match.route.Component?react.createElement(match.route.Component,null):match.route.element?match.route.element:outlet,react.createElement(RenderedRoute,{match,routeContext:{outlet,matches,isDataRoute:null!=dataRouterState},children})};return dataRouterState&&(match.route.ErrorBoundary||match.route.errorElement||0===index)?react.createElement(RenderErrorBoundary,{location:dataRouterState.location,revalidation:dataRouterState.revalidation,component:errorElement,error,children:getChildren(),routeContext:{outlet:null,matches,isDataRoute:!0}}):getChildren()}),null)}var DataRouterHook=function(DataRouterHook){return DataRouterHook.UseBlocker="useBlocker",DataRouterHook.UseRevalidator="useRevalidator",DataRouterHook.UseNavigateStable="useNavigate",DataRouterHook}(DataRouterHook||{}),DataRouterStateHook=function(DataRouterStateHook){return DataRouterStateHook.UseBlocker="useBlocker",DataRouterStateHook.UseLoaderData="useLoaderData",DataRouterStateHook.UseActionData="useActionData",DataRouterStateHook.UseRouteError="useRouteError",DataRouterStateHook.UseNavigation="useNavigation",DataRouterStateHook.UseRouteLoaderData="useRouteLoaderData",DataRouterStateHook.UseMatches="useMatches",DataRouterStateHook.UseRevalidator="useRevalidator",DataRouterStateHook.UseNavigateStable="useNavigate",DataRouterStateHook.UseRouteId="useRouteId",DataRouterStateHook}(DataRouterStateHook||{});function useDataRouterContext(hookName){let ctx=react.useContext(DataRouterContext);return ctx||invariant(!1),ctx}function useDataRouterState(hookName){let state=react.useContext(DataRouterStateContext);return state||invariant(!1),state}function useCurrentRouteId(hookName){let route=function useRouteContext(hookName){let route=react.useContext(RouteContext);return route||invariant(!1),route}(),thisRoute=route.matches[route.matches.length-1];return thisRoute.route.id||invariant(!1),thisRoute.route.id}function useRouteId(){return useCurrentRouteId(DataRouterStateHook.UseRouteId)}function useNavigation(){return useDataRouterState(DataRouterStateHook.UseNavigation).navigation}function useRevalidator(){let dataRouterContext=useDataRouterContext(DataRouterHook.UseRevalidator),state=useDataRouterState(DataRouterStateHook.UseRevalidator);return react.useMemo((()=>({revalidate:dataRouterContext.router.revalidate,state:state.revalidation})),[dataRouterContext.router.revalidate,state.revalidation])}function useMatches(){let{matches,loaderData}=useDataRouterState(DataRouterStateHook.UseMatches);return react.useMemo((()=>matches.map((m=>convertRouteMatchToUiMatch(m,loaderData)))),[matches,loaderData])}function useLoaderData(){let state=useDataRouterState(DataRouterStateHook.UseLoaderData),routeId=useCurrentRouteId(DataRouterStateHook.UseLoaderData);if(!state.errors||null==state.errors[routeId])return state.loaderData[routeId];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+routeId+")")}function useRouteLoaderData(routeId){return useDataRouterState(DataRouterStateHook.UseRouteLoaderData).loaderData[routeId]}function useActionData(){let state=useDataRouterState(DataRouterStateHook.UseActionData),routeId=useCurrentRouteId(DataRouterStateHook.UseLoaderData);return state.actionData?state.actionData[routeId]:void 0}function useRouteError(){var _state$errors;let error=react.useContext(RouteErrorContext),state=useDataRouterState(DataRouterStateHook.UseRouteError),routeId=useCurrentRouteId(DataRouterStateHook.UseRouteError);return void 0!==error?error:null==(_state$errors=state.errors)?void 0:_state$errors[routeId]}function useAsyncValue(){let value=react.useContext(AwaitContext);return null==value?void 0:value._data}function useAsyncError(){let value=react.useContext(AwaitContext);return null==value?void 0:value._error}let blockerId=0;function useBlocker(shouldBlock){let{router,basename}=useDataRouterContext(DataRouterHook.UseBlocker),state=useDataRouterState(DataRouterStateHook.UseBlocker),[blockerKey,setBlockerKey]=react.useState(""),blockerFunction=react.useCallback((arg=>{if("function"!=typeof shouldBlock)return!!shouldBlock;if("/"===basename)return shouldBlock(arg);let{currentLocation,nextLocation,historyAction}=arg;return shouldBlock({currentLocation:dist_extends({},currentLocation,{pathname:stripBasename(currentLocation.pathname,basename)||currentLocation.pathname}),nextLocation:dist_extends({},nextLocation,{pathname:stripBasename(nextLocation.pathname,basename)||nextLocation.pathname}),historyAction})}),[basename,shouldBlock]);return react.useEffect((()=>{let key=String(++blockerId);return setBlockerKey(key),()=>router.deleteBlocker(key)}),[router]),react.useEffect((()=>{""!==blockerKey&&router.getBlocker(blockerKey,blockerFunction)}),[router,blockerKey,blockerFunction]),blockerKey&&state.blockers.has(blockerKey)?state.blockers.get(blockerKey):IDLE_BLOCKER}const alreadyWarned={};const startTransitionImpl=react_namespaceObject.startTransition;function MemoryRouter(_ref3){let{basename,children,initialEntries,initialIndex,future}=_ref3,historyRef=react.useRef();null==historyRef.current&&(historyRef.current=createMemoryHistory({initialEntries,initialIndex,v5Compat:!0}));let history=historyRef.current,[state,setStateImpl]=react.useState({action:history.action,location:history.location}),{v7_startTransition}=future||{},setState=react.useCallback((newState=>{v7_startTransition&&startTransitionImpl?startTransitionImpl((()=>setStateImpl(newState))):setStateImpl(newState)}),[setStateImpl,v7_startTransition]);return react.useLayoutEffect((()=>history.listen(setState)),[history,setState]),react.createElement(Router,{basename,children,location:state.location,navigationType:state.action,navigator:history,future})}function Navigate(_ref4){let{to,replace,state,relative}=_ref4;useInRouterContext()||invariant(!1);let{future,static:isStatic}=react.useContext(NavigationContext),{matches}=react.useContext(RouteContext),{pathname:locationPathname}=useLocation(),navigate=useNavigate(),path=resolveTo(to,getResolveToMatches(matches,future.v7_relativeSplatPath),locationPathname,"path"===relative),jsonPath=JSON.stringify(path);return react.useEffect((()=>navigate(JSON.parse(jsonPath),{replace,state,relative})),[navigate,jsonPath,relative,replace,state]),null}function Outlet(props){return useOutlet(props.context)}function Route(_props){invariant(!1)}function Router(_ref5){let{basename:basenameProp="/",children=null,location:locationProp,navigationType=Action.Pop,navigator,static:staticProp=!1,future}=_ref5;useInRouterContext()&&invariant(!1);let basename=basenameProp.replace(/^\/*/,"/"),navigationContext=react.useMemo((()=>({basename,navigator,static:staticProp,future:dist_extends({v7_relativeSplatPath:!1},future)})),[basename,future,navigator,staticProp]);"string"==typeof locationProp&&(locationProp=parsePath(locationProp));let{pathname="/",search="",hash="",state=null,key="default"}=locationProp,locationContext=react.useMemo((()=>{let trailingPathname=stripBasename(pathname,basename);return null==trailingPathname?null:{location:{pathname:trailingPathname,search,hash,state,key},navigationType}}),[basename,pathname,search,hash,state,key,navigationType]);return null==locationContext?null:react.createElement(NavigationContext.Provider,{value:navigationContext},react.createElement(LocationContext.Provider,{children,value:locationContext}))}function Routes(_ref6){let{children,location}=_ref6;return useRoutes(createRoutesFromChildren(children),location)}function Await(_ref7){let{children,errorElement,resolve}=_ref7;return react.createElement(AwaitErrorBoundary,{resolve,errorElement},react.createElement(ResolveAwait,null,children))}var AwaitRenderStatus=function(AwaitRenderStatus){return AwaitRenderStatus[AwaitRenderStatus.pending=0]="pending",AwaitRenderStatus[AwaitRenderStatus.success=1]="success",AwaitRenderStatus[AwaitRenderStatus.error=2]="error",AwaitRenderStatus}(AwaitRenderStatus||{});const neverSettledPromise=new Promise((()=>{}));class AwaitErrorBoundary extends react.Component{constructor(props){super(props),this.state={error:null}}static getDerivedStateFromError(error){return{error}}componentDidCatch(error,errorInfo){console.error("<Await> caught the following error during render",error,errorInfo)}render(){let{children,errorElement,resolve}=this.props,promise=null,status=AwaitRenderStatus.pending;if(resolve instanceof Promise)if(this.state.error){status=AwaitRenderStatus.error;let renderError=this.state.error;promise=Promise.reject().catch((()=>{})),Object.defineProperty(promise,"_tracked",{get:()=>!0}),Object.defineProperty(promise,"_error",{get:()=>renderError})}else resolve._tracked?(promise=resolve,status="_error"in promise?AwaitRenderStatus.error:"_data"in promise?AwaitRenderStatus.success:AwaitRenderStatus.pending):(status=AwaitRenderStatus.pending,Object.defineProperty(resolve,"_tracked",{get:()=>!0}),promise=resolve.then((data=>Object.defineProperty(resolve,"_data",{get:()=>data})),(error=>Object.defineProperty(resolve,"_error",{get:()=>error}))));else status=AwaitRenderStatus.success,promise=Promise.resolve(),Object.defineProperty(promise,"_tracked",{get:()=>!0}),Object.defineProperty(promise,"_data",{get:()=>resolve});if(status===AwaitRenderStatus.error&&promise._error instanceof AbortedDeferredError)throw neverSettledPromise;if(status===AwaitRenderStatus.error&&!errorElement)throw promise._error;if(status===AwaitRenderStatus.error)return react.createElement(AwaitContext.Provider,{value:promise,children:errorElement});if(status===AwaitRenderStatus.success)return react.createElement(AwaitContext.Provider,{value:promise,children});throw promise}}function ResolveAwait(_ref8){let{children}=_ref8,data=useAsyncValue(),toRender="function"==typeof children?children(data):children;return react.createElement(react.Fragment,null,toRender)}function createRoutesFromChildren(children,parentPath){void 0===parentPath&&(parentPath=[]);let routes=[];return react.Children.forEach(children,((element,index)=>{if(!react.isValidElement(element))return;let treePath=[...parentPath,index];if(element.type===react.Fragment)return void routes.push.apply(routes,createRoutesFromChildren(element.props.children,treePath));element.type!==Route&&invariant(!1),element.props.index&&element.props.children&&invariant(!1);let route={id:element.props.id||treePath.join("-"),caseSensitive:element.props.caseSensitive,element:element.props.element,Component:element.props.Component,index:element.props.index,path:element.props.path,loader:element.props.loader,action:element.props.action,errorElement:element.props.errorElement,ErrorBoundary:element.props.ErrorBoundary,hasErrorBoundary:null!=element.props.ErrorBoundary||null!=element.props.errorElement,shouldRevalidate:element.props.shouldRevalidate,handle:element.props.handle,lazy:element.props.lazy};element.props.children&&(route.children=createRoutesFromChildren(element.props.children,treePath)),routes.push(route)})),routes}function renderMatches(matches){return _renderMatches(matches)}function mapRouteProperties(route){let updates={hasErrorBoundary:null!=route.ErrorBoundary||null!=route.errorElement};return route.Component&&Object.assign(updates,{element:react.createElement(route.Component),Component:void 0}),route.HydrateFallback&&Object.assign(updates,{hydrateFallbackElement:react.createElement(route.HydrateFallback),HydrateFallback:void 0}),route.ErrorBoundary&&Object.assign(updates,{errorElement:react.createElement(route.ErrorBoundary),ErrorBoundary:void 0}),updates}function createMemoryRouter(routes,opts){return createRouter({basename:null==opts?void 0:opts.basename,future:dist_extends({},null==opts?void 0:opts.future,{v7_prependBasename:!0}),history:createMemoryHistory({initialEntries:null==opts?void 0:opts.initialEntries,initialIndex:null==opts?void 0:opts.initialIndex}),hydrationData:null==opts?void 0:opts.hydrationData,routes,mapRouteProperties,unstable_dataStrategy:null==opts?void 0:opts.unstable_dataStrategy,unstable_patchRoutesOnMiss:null==opts?void 0:opts.unstable_patchRoutesOnMiss}).initialize()}function react_router_dom_dist_extends(){return react_router_dom_dist_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},react_router_dom_dist_extends.apply(this,arguments)}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}const defaultMethod="get",defaultEncType="application/x-www-form-urlencoded";function isHtmlElement(object){return null!=object&&"string"==typeof object.tagName}function createSearchParams(init){return void 0===init&&(init=""),new URLSearchParams("string"==typeof init||Array.isArray(init)||init instanceof URLSearchParams?init:Object.keys(init).reduce(((memo,key)=>{let value=init[key];return memo.concat(Array.isArray(value)?value.map((v=>[key,v])):[[key,value]])}),[]))}let _formDataSupportsSubmitter=null;const supportedFormEncTypes=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function getFormEncType(encType){return null==encType||supportedFormEncTypes.has(encType)?encType:null}function getFormSubmissionInfo(target,basename){let method,action,encType,formData,body;if(function isFormElement(object){return isHtmlElement(object)&&"form"===object.tagName.toLowerCase()}(target)){let attr=target.getAttribute("action");action=attr?stripBasename(attr,basename):null,method=target.getAttribute("method")||defaultMethod,encType=getFormEncType(target.getAttribute("enctype"))||defaultEncType,formData=new FormData(target)}else if(function isButtonElement(object){return isHtmlElement(object)&&"button"===object.tagName.toLowerCase()}(target)||function isInputElement(object){return isHtmlElement(object)&&"input"===object.tagName.toLowerCase()}(target)&&("submit"===target.type||"image"===target.type)){let form=target.form;if(null==form)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let attr=target.getAttribute("formaction")||form.getAttribute("action");if(action=attr?stripBasename(attr,basename):null,method=target.getAttribute("formmethod")||form.getAttribute("method")||defaultMethod,encType=getFormEncType(target.getAttribute("formenctype"))||getFormEncType(form.getAttribute("enctype"))||defaultEncType,formData=new FormData(form,target),!function isFormDataSubmitterSupported(){if(null===_formDataSupportsSubmitter)try{new FormData(document.createElement("form"),0),_formDataSupportsSubmitter=!1}catch(e){_formDataSupportsSubmitter=!0}return _formDataSupportsSubmitter}()){let{name,type,value}=target;if("image"===type){let prefix=name?name+".":"";formData.append(prefix+"x","0"),formData.append(prefix+"y","0")}else name&&formData.append(name,value)}}else{if(isHtmlElement(target))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');method=defaultMethod,action=null,encType=defaultEncType,body=target}return formData&&"text/plain"===encType&&(body=formData,formData=void 0),{action,method:method.toLowerCase(),encType,formData,body}}const _excluded=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],_excluded2=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"],_excluded3=["fetcherKey","navigate","reloadDocument","replace","state","method","action","onSubmit","relative","preventScrollReset","unstable_viewTransition"];try{window.__reactRouterVersion="6"}catch(e){}function createBrowserRouter(routes,opts){return createRouter({basename:null==opts?void 0:opts.basename,future:react_router_dom_dist_extends({},null==opts?void 0:opts.future,{v7_prependBasename:!0}),history:createBrowserHistory({window:null==opts?void 0:opts.window}),hydrationData:(null==opts?void 0:opts.hydrationData)||parseHydrationData(),routes,mapRouteProperties,unstable_dataStrategy:null==opts?void 0:opts.unstable_dataStrategy,unstable_patchRoutesOnMiss:null==opts?void 0:opts.unstable_patchRoutesOnMiss,window:null==opts?void 0:opts.window}).initialize()}function createHashRouter(routes,opts){return createRouter({basename:null==opts?void 0:opts.basename,future:react_router_dom_dist_extends({},null==opts?void 0:opts.future,{v7_prependBasename:!0}),history:createHashHistory({window:null==opts?void 0:opts.window}),hydrationData:(null==opts?void 0:opts.hydrationData)||parseHydrationData(),routes,mapRouteProperties,unstable_dataStrategy:null==opts?void 0:opts.unstable_dataStrategy,unstable_patchRoutesOnMiss:null==opts?void 0:opts.unstable_patchRoutesOnMiss,window:null==opts?void 0:opts.window}).initialize()}function parseHydrationData(){var _window;let state=null==(_window=window)?void 0:_window.__staticRouterHydrationData;return state&&state.errors&&(state=react_router_dom_dist_extends({},state,{errors:deserializeErrors(state.errors)})),state}function deserializeErrors(errors){if(!errors)return null;let entries=Object.entries(errors),serialized={};for(let[key,val]of entries)if(val&&"RouteErrorResponse"===val.__type)serialized[key]=new ErrorResponseImpl(val.status,val.statusText,val.data,!0===val.internal);else if(val&&"Error"===val.__type){if(val.__subType){let ErrorConstructor=window[val.__subType];if("function"==typeof ErrorConstructor)try{let error=new ErrorConstructor(val.message);error.stack="",serialized[key]=error}catch(e){}}if(null==serialized[key]){let error=new Error(val.message);error.stack="",serialized[key]=error}}else serialized[key]=val;return serialized}const ViewTransitionContext=react.createContext({isTransitioning:!1});const FetchersContext=react.createContext(new Map);const dist_startTransitionImpl=react_namespaceObject.startTransition,flushSyncImpl=react_dom_namespaceObject.flushSync,useIdImpl=react_namespaceObject.useId;function flushSyncSafe(cb){flushSyncImpl?flushSyncImpl(cb):cb()}class Deferred{constructor(){this.status="pending",this.promise=new Promise(((resolve,reject)=>{this.resolve=value=>{"pending"===this.status&&(this.status="resolved",resolve(value))},this.reject=reason=>{"pending"===this.status&&(this.status="rejected",reject(reason))}}))}}function dist_RouterProvider(_ref){let{fallbackElement,router,future}=_ref,[state,setStateImpl]=react.useState(router.state),[pendingState,setPendingState]=react.useState(),[vtContext,setVtContext]=react.useState({isTransitioning:!1}),[renderDfd,setRenderDfd]=react.useState(),[transition,setTransition]=react.useState(),[interruption,setInterruption]=react.useState(),fetcherData=react.useRef(new Map),{v7_startTransition}=future||{},optInStartTransition=react.useCallback((cb=>{v7_startTransition?function startTransitionSafe(cb){dist_startTransitionImpl?dist_startTransitionImpl(cb):cb()}(cb):cb()}),[v7_startTransition]),setState=react.useCallback(((newState,_ref2)=>{let{deletedFetchers,unstable_flushSync:flushSync,unstable_viewTransitionOpts:viewTransitionOpts}=_ref2;deletedFetchers.forEach((key=>fetcherData.current.delete(key))),newState.fetchers.forEach(((fetcher,key)=>{void 0!==fetcher.data&&fetcherData.current.set(key,fetcher.data)}));let isViewTransitionUnavailable=null==router.window||null==router.window.document||"function"!=typeof router.window.document.startViewTransition;if(viewTransitionOpts&&!isViewTransitionUnavailable){if(flushSync){flushSyncSafe((()=>{transition&&(renderDfd&&renderDfd.resolve(),transition.skipTransition()),setVtContext({isTransitioning:!0,flushSync:!0,currentLocation:viewTransitionOpts.currentLocation,nextLocation:viewTransitionOpts.nextLocation})}));let t=router.window.document.startViewTransition((()=>{flushSyncSafe((()=>setStateImpl(newState)))}));return t.finished.finally((()=>{flushSyncSafe((()=>{setRenderDfd(void 0),setTransition(void 0),setPendingState(void 0),setVtContext({isTransitioning:!1})}))})),void flushSyncSafe((()=>setTransition(t)))}transition?(renderDfd&&renderDfd.resolve(),transition.skipTransition(),setInterruption({state:newState,currentLocation:viewTransitionOpts.currentLocation,nextLocation:viewTransitionOpts.nextLocation})):(setPendingState(newState),setVtContext({isTransitioning:!0,flushSync:!1,currentLocation:viewTransitionOpts.currentLocation,nextLocation:viewTransitionOpts.nextLocation}))}else flushSync?flushSyncSafe((()=>setStateImpl(newState))):optInStartTransition((()=>setStateImpl(newState)))}),[router.window,transition,renderDfd,fetcherData,optInStartTransition]);react.useLayoutEffect((()=>router.subscribe(setState)),[router,setState]),react.useEffect((()=>{vtContext.isTransitioning&&!vtContext.flushSync&&setRenderDfd(new Deferred)}),[vtContext]),react.useEffect((()=>{if(renderDfd&&pendingState&&router.window){let newState=pendingState,renderPromise=renderDfd.promise,transition=router.window.document.startViewTransition((async()=>{optInStartTransition((()=>setStateImpl(newState))),await renderPromise}));transition.finished.finally((()=>{setRenderDfd(void 0),setTransition(void 0),setPendingState(void 0),setVtContext({isTransitioning:!1})})),setTransition(transition)}}),[optInStartTransition,pendingState,renderDfd,router.window]),react.useEffect((()=>{renderDfd&&pendingState&&state.location.key===pendingState.location.key&&renderDfd.resolve()}),[renderDfd,transition,state.location,pendingState]),react.useEffect((()=>{!vtContext.isTransitioning&&interruption&&(setPendingState(interruption.state),setVtContext({isTransitioning:!0,flushSync:!1,currentLocation:interruption.currentLocation,nextLocation:interruption.nextLocation}),setInterruption(void 0))}),[vtContext.isTransitioning,interruption]),react.useEffect((()=>{}),[]);let navigator=react.useMemo((()=>({createHref:router.createHref,encodeLocation:router.encodeLocation,go:n=>router.navigate(n),push:(to,state,opts)=>router.navigate(to,{state,preventScrollReset:null==opts?void 0:opts.preventScrollReset}),replace:(to,state,opts)=>router.navigate(to,{replace:!0,state,preventScrollReset:null==opts?void 0:opts.preventScrollReset})})),[router]),basename=router.basename||"/",dataRouterContext=react.useMemo((()=>({router,navigator,static:!1,basename})),[router,navigator,basename]),routerFuture=react.useMemo((()=>({v7_relativeSplatPath:router.future.v7_relativeSplatPath})),[router.future.v7_relativeSplatPath]);return react.createElement(react.Fragment,null,react.createElement(DataRouterContext.Provider,{value:dataRouterContext},react.createElement(DataRouterStateContext.Provider,{value:state},react.createElement(FetchersContext.Provider,{value:fetcherData.current},react.createElement(ViewTransitionContext.Provider,{value:vtContext},react.createElement(Router,{basename,location:state.location,navigationType:state.historyAction,navigator,future:routerFuture},state.initialized||router.future.v7_partialHydration?react.createElement(MemoizedDataRoutes,{routes:router.routes,future:router.future,state}):fallbackElement))))),null)}const MemoizedDataRoutes=react.memo(dist_DataRoutes);function dist_DataRoutes(_ref3){let{routes,future,state}=_ref3;return useRoutesImpl(routes,void 0,state,future)}function BrowserRouter(_ref4){let{basename,children,future,window}=_ref4,historyRef=react.useRef();null==historyRef.current&&(historyRef.current=createBrowserHistory({window,v5Compat:!0}));let history=historyRef.current,[state,setStateImpl]=react.useState({action:history.action,location:history.location}),{v7_startTransition}=future||{},setState=react.useCallback((newState=>{v7_startTransition&&dist_startTransitionImpl?dist_startTransitionImpl((()=>setStateImpl(newState))):setStateImpl(newState)}),[setStateImpl,v7_startTransition]);return react.useLayoutEffect((()=>history.listen(setState)),[history,setState]),react.createElement(Router,{basename,children,location:state.location,navigationType:state.action,navigator:history,future})}function HashRouter(_ref5){let{basename,children,future,window}=_ref5,historyRef=react.useRef();null==historyRef.current&&(historyRef.current=createHashHistory({window,v5Compat:!0}));let history=historyRef.current,[state,setStateImpl]=react.useState({action:history.action,location:history.location}),{v7_startTransition}=future||{},setState=react.useCallback((newState=>{v7_startTransition&&dist_startTransitionImpl?dist_startTransitionImpl((()=>setStateImpl(newState))):setStateImpl(newState)}),[setStateImpl,v7_startTransition]);return react.useLayoutEffect((()=>history.listen(setState)),[history,setState]),react.createElement(Router,{basename,children,location:state.location,navigationType:state.action,navigator:history,future})}function HistoryRouter(_ref6){let{basename,children,future,history}=_ref6,[state,setStateImpl]=react.useState({action:history.action,location:history.location}),{v7_startTransition}=future||{},setState=react.useCallback((newState=>{v7_startTransition&&dist_startTransitionImpl?dist_startTransitionImpl((()=>setStateImpl(newState))):setStateImpl(newState)}),[setStateImpl,v7_startTransition]);return react.useLayoutEffect((()=>history.listen(setState)),[history,setState]),react.createElement(Router,{basename,children,location:state.location,navigationType:state.action,navigator:history,future})}const isBrowser="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,dist_ABSOLUTE_URL_REGEX=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Link=react.forwardRef((function LinkWithRef(_ref7,ref){let absoluteHref,{onClick,relative,reloadDocument,replace,state,target,to,preventScrollReset,unstable_viewTransition}=_ref7,rest=_objectWithoutPropertiesLoose(_ref7,_excluded),{basename}=react.useContext(NavigationContext),isExternal=!1;if("string"==typeof to&&dist_ABSOLUTE_URL_REGEX.test(to)&&(absoluteHref=to,isBrowser))try{let currentUrl=new URL(window.location.href),targetUrl=to.startsWith("//")?new URL(currentUrl.protocol+to):new URL(to),path=stripBasename(targetUrl.pathname,basename);targetUrl.origin===currentUrl.origin&&null!=path?to=path+targetUrl.search+targetUrl.hash:isExternal=!0}catch(e){}let href=useHref(to,{relative}),internalOnClick=useLinkClickHandler(to,{replace,state,target,preventScrollReset,relative,unstable_viewTransition});return react.createElement("a",react_router_dom_dist_extends({},rest,{href:absoluteHref||href,onClick:isExternal||reloadDocument?onClick:function handleClick(event){onClick&&onClick(event),event.defaultPrevented||internalOnClick(event)},ref,target}))}));const NavLink=react.forwardRef((function NavLinkWithRef(_ref8,ref){let{"aria-current":ariaCurrentProp="page",caseSensitive=!1,className:classNameProp="",end=!1,style:styleProp,to,unstable_viewTransition,children}=_ref8,rest=_objectWithoutPropertiesLoose(_ref8,_excluded2),path=useResolvedPath(to,{relative:rest.relative}),location=useLocation(),routerState=react.useContext(DataRouterStateContext),{navigator,basename}=react.useContext(NavigationContext),isTransitioning=null!=routerState&&useViewTransitionState(path)&&!0===unstable_viewTransition,toPathname=navigator.encodeLocation?navigator.encodeLocation(path).pathname:path.pathname,locationPathname=location.pathname,nextLocationPathname=routerState&&routerState.navigation&&routerState.navigation.location?routerState.navigation.location.pathname:null;caseSensitive||(locationPathname=locationPathname.toLowerCase(),nextLocationPathname=nextLocationPathname?nextLocationPathname.toLowerCase():null,toPathname=toPathname.toLowerCase()),nextLocationPathname&&basename&&(nextLocationPathname=stripBasename(nextLocationPathname,basename)||nextLocationPathname);const endSlashPosition="/"!==toPathname&&toPathname.endsWith("/")?toPathname.length-1:toPathname.length;let className,isActive=locationPathname===toPathname||!end&&locationPathname.startsWith(toPathname)&&"/"===locationPathname.charAt(endSlashPosition),isPending=null!=nextLocationPathname&&(nextLocationPathname===toPathname||!end&&nextLocationPathname.startsWith(toPathname)&&"/"===nextLocationPathname.charAt(toPathname.length)),renderProps={isActive,isPending,isTransitioning},ariaCurrent=isActive?ariaCurrentProp:void 0;className="function"==typeof classNameProp?classNameProp(renderProps):[classNameProp,isActive?"active":null,isPending?"pending":null,isTransitioning?"transitioning":null].filter(Boolean).join(" ");let style="function"==typeof styleProp?styleProp(renderProps):styleProp;return react.createElement(Link,react_router_dom_dist_extends({},rest,{"aria-current":ariaCurrent,className,ref,style,to,unstable_viewTransition}),"function"==typeof children?children(renderProps):children)}));const Form=react.forwardRef(((_ref9,forwardedRef)=>{let{fetcherKey,navigate,reloadDocument,replace,state,method=defaultMethod,action,onSubmit,relative,preventScrollReset,unstable_viewTransition}=_ref9,props=_objectWithoutPropertiesLoose(_ref9,_excluded3),submit=useSubmit(),formAction=useFormAction(action,{relative}),formMethod="get"===method.toLowerCase()?"get":"post";return react.createElement("form",react_router_dom_dist_extends({ref:forwardedRef,method:formMethod,action:formAction,onSubmit:reloadDocument?onSubmit:event=>{if(onSubmit&&onSubmit(event),event.defaultPrevented)return;event.preventDefault();let submitter=event.nativeEvent.submitter,submitMethod=(null==submitter?void 0:submitter.getAttribute("formmethod"))||method;submit(submitter||event.currentTarget,{fetcherKey,method:submitMethod,navigate,replace,state,relative,preventScrollReset,unstable_viewTransition})}},props))}));function ScrollRestoration(_ref10){let{getKey,storageKey}=_ref10;return useScrollRestoration({getKey,storageKey}),null}var dist_DataRouterHook,dist_DataRouterStateHook;function dist_useDataRouterContext(hookName){let ctx=react.useContext(DataRouterContext);return ctx||invariant(!1),ctx}function dist_useDataRouterState(hookName){let state=react.useContext(DataRouterStateContext);return state||invariant(!1),state}function useLinkClickHandler(to,_temp){let{target,replace:replaceProp,state,preventScrollReset,relative,unstable_viewTransition}=void 0===_temp?{}:_temp,navigate=useNavigate(),location=useLocation(),path=useResolvedPath(to,{relative});return react.useCallback((event=>{if(function shouldProcessLinkClick(event,target){return!(0!==event.button||target&&"_self"!==target||function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey)}(event))}(event,target)){event.preventDefault();let replace=void 0!==replaceProp?replaceProp:createPath(location)===createPath(path);navigate(to,{replace,state,preventScrollReset,relative,unstable_viewTransition})}}),[location,navigate,path,replaceProp,state,target,to,preventScrollReset,relative,unstable_viewTransition])}function useSearchParams(defaultInit){let defaultSearchParamsRef=react.useRef(createSearchParams(defaultInit)),hasSetSearchParamsRef=react.useRef(!1),location=useLocation(),searchParams=react.useMemo((()=>function getSearchParamsForLocation(locationSearch,defaultSearchParams){let searchParams=createSearchParams(locationSearch);return defaultSearchParams&&defaultSearchParams.forEach(((_,key)=>{searchParams.has(key)||defaultSearchParams.getAll(key).forEach((value=>{searchParams.append(key,value)}))})),searchParams}(location.search,hasSetSearchParamsRef.current?null:defaultSearchParamsRef.current)),[location.search]),navigate=useNavigate(),setSearchParams=react.useCallback(((nextInit,navigateOptions)=>{const newSearchParams=createSearchParams("function"==typeof nextInit?nextInit(searchParams):nextInit);hasSetSearchParamsRef.current=!0,navigate("?"+newSearchParams,navigateOptions)}),[navigate,searchParams]);return[searchParams,setSearchParams]}(function(DataRouterHook){DataRouterHook.UseScrollRestoration="useScrollRestoration",DataRouterHook.UseSubmit="useSubmit",DataRouterHook.UseSubmitFetcher="useSubmitFetcher",DataRouterHook.UseFetcher="useFetcher",DataRouterHook.useViewTransitionState="useViewTransitionState"})(dist_DataRouterHook||(dist_DataRouterHook={})),function(DataRouterStateHook){DataRouterStateHook.UseFetcher="useFetcher",DataRouterStateHook.UseFetchers="useFetchers",DataRouterStateHook.UseScrollRestoration="useScrollRestoration"}(dist_DataRouterStateHook||(dist_DataRouterStateHook={}));let fetcherId=0,getUniqueFetcherId=()=>"__"+String(++fetcherId)+"__";function useSubmit(){let{router}=dist_useDataRouterContext(dist_DataRouterHook.UseSubmit),{basename}=react.useContext(NavigationContext),currentRouteId=useRouteId();return react.useCallback((function(target,options){void 0===options&&(options={}),function validateClientSideSubmission(){if("undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.")}();let{action,method,encType,formData,body}=getFormSubmissionInfo(target,basename);if(!1===options.navigate){let key=options.fetcherKey||getUniqueFetcherId();router.fetch(key,currentRouteId,options.action||action,{preventScrollReset:options.preventScrollReset,formData,body,formMethod:options.method||method,formEncType:options.encType||encType,unstable_flushSync:options.unstable_flushSync})}else router.navigate(options.action||action,{preventScrollReset:options.preventScrollReset,formData,body,formMethod:options.method||method,formEncType:options.encType||encType,replace:options.replace,state:options.state,fromRouteId:currentRouteId,unstable_flushSync:options.unstable_flushSync,unstable_viewTransition:options.unstable_viewTransition})}),[router,basename,currentRouteId])}function useFormAction(action,_temp2){let{relative}=void 0===_temp2?{}:_temp2,{basename}=react.useContext(NavigationContext),routeContext=react.useContext(RouteContext);routeContext||invariant(!1);let[match]=routeContext.matches.slice(-1),path=react_router_dom_dist_extends({},useResolvedPath(action||".",{relative})),location=useLocation();if(null==action){path.search=location.search;let params=new URLSearchParams(path.search);params.has("index")&&""===params.get("index")&&(params.delete("index"),path.search=params.toString()?"?"+params.toString():"")}return action&&"."!==action||!match.route.index||(path.search=path.search?path.search.replace(/^\?/,"?index&"):"?index"),"/"!==basename&&(path.pathname="/"===path.pathname?basename:joinPaths([basename,path.pathname])),createPath(path)}function useFetcher(_temp3){var _route$matches;let{key}=void 0===_temp3?{}:_temp3,{router}=dist_useDataRouterContext(dist_DataRouterHook.UseFetcher),state=dist_useDataRouterState(dist_DataRouterStateHook.UseFetcher),fetcherData=react.useContext(FetchersContext),route=react.useContext(RouteContext),routeId=null==(_route$matches=route.matches[route.matches.length-1])?void 0:_route$matches.route.id;fetcherData||invariant(!1),route||invariant(!1),null==routeId&&invariant(!1);let defaultKey=useIdImpl?useIdImpl():"",[fetcherKey,setFetcherKey]=react.useState(key||defaultKey);key&&key!==fetcherKey?setFetcherKey(key):fetcherKey||setFetcherKey(getUniqueFetcherId()),react.useEffect((()=>(router.getFetcher(fetcherKey),()=>{router.deleteFetcher(fetcherKey)})),[router,fetcherKey]);let load=react.useCallback(((href,opts)=>{routeId||invariant(!1),router.fetch(fetcherKey,routeId,href,opts)}),[fetcherKey,routeId,router]),submitImpl=useSubmit(),submit=react.useCallback(((target,opts)=>{submitImpl(target,react_router_dom_dist_extends({},opts,{navigate:!1,fetcherKey}))}),[fetcherKey,submitImpl]),FetcherForm=react.useMemo((()=>react.forwardRef(((props,ref)=>react.createElement(Form,react_router_dom_dist_extends({},props,{navigate:!1,fetcherKey,ref}))))),[fetcherKey]),fetcher=state.fetchers.get(fetcherKey)||IDLE_FETCHER,data=fetcherData.get(fetcherKey);return react.useMemo((()=>react_router_dom_dist_extends({Form:FetcherForm,submit,load},fetcher,{data})),[FetcherForm,submit,load,fetcher,data])}function useFetchers(){let state=dist_useDataRouterState(dist_DataRouterStateHook.UseFetchers);return Array.from(state.fetchers.entries()).map((_ref11=>{let[key,fetcher]=_ref11;return react_router_dom_dist_extends({},fetcher,{key})}))}const SCROLL_RESTORATION_STORAGE_KEY="react-router-scroll-positions";let savedScrollPositions={};function useScrollRestoration(_temp4){let{getKey,storageKey}=void 0===_temp4?{}:_temp4,{router}=dist_useDataRouterContext(dist_DataRouterHook.UseScrollRestoration),{restoreScrollPosition,preventScrollReset}=dist_useDataRouterState(dist_DataRouterStateHook.UseScrollRestoration),{basename}=react.useContext(NavigationContext),location=useLocation(),matches=useMatches(),navigation=useNavigation();react.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function usePageHide(callback,options){let{capture}=options||{};react.useEffect((()=>{let opts=null!=capture?{capture}:void 0;return window.addEventListener("pagehide",callback,opts),()=>{window.removeEventListener("pagehide",callback,opts)}}),[callback,capture])}(react.useCallback((()=>{if("idle"===navigation.state){let key=(getKey?getKey(location,matches):null)||location.key;savedScrollPositions[key]=window.scrollY}try{sessionStorage.setItem(storageKey||SCROLL_RESTORATION_STORAGE_KEY,JSON.stringify(savedScrollPositions))}catch(error){}window.history.scrollRestoration="auto"}),[storageKey,getKey,navigation.state,location,matches])),"undefined"!=typeof document&&(react.useLayoutEffect((()=>{try{let sessionPositions=sessionStorage.getItem(storageKey||SCROLL_RESTORATION_STORAGE_KEY);sessionPositions&&(savedScrollPositions=JSON.parse(sessionPositions))}catch(e){}}),[storageKey]),react.useLayoutEffect((()=>{let getKeyWithoutBasename=getKey&&"/"!==basename?(location,matches)=>getKey(react_router_dom_dist_extends({},location,{pathname:stripBasename(location.pathname,basename)||location.pathname}),matches):getKey,disableScrollRestoration=null==router?void 0:router.enableScrollRestoration(savedScrollPositions,(()=>window.scrollY),getKeyWithoutBasename);return()=>disableScrollRestoration&&disableScrollRestoration()}),[router,basename,getKey]),react.useLayoutEffect((()=>{if(!1!==restoreScrollPosition)if("number"!=typeof restoreScrollPosition){if(location.hash){let el=document.getElementById(decodeURIComponent(location.hash.slice(1)));if(el)return void el.scrollIntoView()}!0!==preventScrollReset&&window.scrollTo(0,0)}else window.scrollTo(0,restoreScrollPosition)}),[location,restoreScrollPosition,preventScrollReset]))}function useBeforeUnload(callback,options){let{capture}=options||{};react.useEffect((()=>{let opts=null!=capture?{capture}:void 0;return window.addEventListener("beforeunload",callback,opts),()=>{window.removeEventListener("beforeunload",callback,opts)}}),[callback,capture])}function usePrompt(_ref12){let{when,message}=_ref12,blocker=useBlocker(when);react.useEffect((()=>{if("blocked"===blocker.state){window.confirm(message)?setTimeout(blocker.proceed,0):blocker.reset()}}),[blocker,message]),react.useEffect((()=>{"blocked"!==blocker.state||when||blocker.reset()}),[blocker,when])}function useViewTransitionState(to,opts){void 0===opts&&(opts={});let vtContext=react.useContext(ViewTransitionContext);null==vtContext&&invariant(!1);let{basename}=dist_useDataRouterContext(dist_DataRouterHook.useViewTransitionState),path=useResolvedPath(to,{relative:opts.relative});if(!vtContext.isTransitioning)return!1;let currentPath=stripBasename(vtContext.currentLocation.pathname,basename)||vtContext.currentLocation.pathname,nextPath=stripBasename(vtContext.nextLocation.pathname,basename)||vtContext.nextLocation.pathname;return null!=matchPath(path.pathname,nextPath)||null!=matchPath(path.pathname,currentPath)}},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,