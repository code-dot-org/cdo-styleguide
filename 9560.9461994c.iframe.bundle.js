/*! For license information please see 9560.9461994c.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9560],{"./src/constants.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.TestResults=exports.TOOLBOX_EDIT_MODE=exports.SVG_NS=exports.START_BLOCKS=exports.ResultType=exports.Position=exports.NOTIFICATION_ALERT_TYPE=exports.KeyCodes=exports.HarvesterTerminationValue=exports.DEPRECATED_PROJECT_TYPES=exports.CIPHER=exports.BeeTerminationValue=exports.BASE_DIALOG_WIDTH=exports.ALPHABET=void 0;exports.ResultType={UNSET:0,SUCCESS:1,FAILURE:-1,TIMEOUT:2,ERROR:-2},exports.TestResults={NO_TESTS_RUN:-1,GENERIC_FAIL:0,EMPTY_BLOCK_FAIL:1,TOO_FEW_BLOCKS_FAIL:2,LEVEL_INCOMPLETE_FAIL:3,MISSING_BLOCK_UNFINISHED:4,EXTRA_TOP_BLOCKS_FAIL:5,RUNTIME_ERROR_FAIL:6,SYNTAX_ERROR_FAIL:7,MISSING_BLOCK_FINISHED:10,APP_SPECIFIC_FAIL:11,EMPTY_FUNCTION_BLOCK_FAIL:12,UNUSED_PARAM:13,UNUSED_FUNCTION:14,PARAM_INPUT_UNATTACHED:15,INCOMPLETE_BLOCK_IN_FUNCTION:16,QUESTION_MARKS_IN_NUMBER_FIELD:17,EMPTY_FUNCTIONAL_BLOCK:18,EXAMPLE_FAILED:19,NESTED_FOR_SAME_VARIABLE:-2,EMPTY_FUNCTION_NAME:-3,MISSING_RECOMMENDED_BLOCK_UNFINISHED:-4,EXTRA_FUNCTION_FAIL:-5,LOCAL_FUNCTION_FAIL:-6,GENERIC_LINT_FAIL:-7,LOG_CONDITION_FAIL:-8,BLOCK_LIMIT_FAIL:-9,FREE_PLAY_UNCHANGED_FAIL:-10,UNSUBMITTED_ATTEMPT:-50,SKIPPED:-100,TEACHER_FEEDBACK_KEEP_WORKING:-110,LEVEL_STARTED:-150,MINIMUM_PASS_RESULT:20,TOO_MANY_BLOCKS_FAIL:20,APP_SPECIFIC_ACCEPTABLE_FAIL:21,MISSING_RECOMMENDED_BLOCK_FINISHED:22,MINIMUM_OPTIMAL_RESULT:30,FREE_PLAY:30,PASS_WITH_EXTRA_TOP_BLOCKS:31,APP_SPECIFIC_IMPERFECT_PASS:32,EDIT_BLOCKS:70,MANUAL_PASS:90,ALL_PASS:100,CONTAINED_LEVEL_RESULT:101,BETTER_THAN_IDEAL:102,SUBMITTED_RESULT:1e3,REVIEW_REJECTED_RESULT:1500,REVIEW_ACCEPTED_RESULT:2e3},exports.BeeTerminationValue={FAILURE:!1,SUCCESS:!0,INFINITE_LOOP:1/0,NOT_AT_FLOWER:1,FLOWER_EMPTY:2,NOT_AT_HONEYCOMB:3,HONEYCOMB_FULL:4,UNCHECKED_CLOUD:5,UNCHECKED_PURPLE:6,INSUFFICIENT_NECTAR:7,INSUFFICIENT_HONEY:8,DID_NOT_COLLECT_EVERYTHING:9},exports.HarvesterTerminationValue={WRONG_CROP:1,EMPTY_CROP:2,DID_NOT_COLLECT_EVERYTHING:3},exports.KeyCodes={BACKSPACE:8,ENTER:13,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,COPY:67,PASTE:86,DELETE:127},exports.Position={OUTTOPOUTLEFT:1,OUTTOPLEFT:2,OUTTOPCENTER:3,OUTTOPRIGHT:4,OUTTOPOUTRIGHT:5,TOPOUTLEFT:6,TOPLEFT:7,TOPCENTER:8,TOPRIGHT:9,TOPOUTRIGHT:10,MIDDLEOUTLEFT:11,MIDDLELEFT:12,MIDDLECENTER:13,MIDDLERIGHT:14,MIDDLEOUTRIGHT:15,BOTTOMOUTLEFT:16,BOTTOMLEFT:17,BOTTOMCENTER:18,BOTTOMRIGHT:19,BOTTOMOUTRIGHT:20,OUTBOTTOMOUTLEFT:21,OUTBOTTOMLEFT:22,OUTBOTTOMCENTER:23,OUTBOTTOMRIGHT:24,OUTBOTTOMOUTRIGHT:25},exports.SVG_NS="http://www.w3.org/2000/svg",exports.ALPHABET="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",exports.CIPHER="Iq61F8kiaUHPGcsY7DgX4yAu3LwtWhnCmeR5pVrJoKfQZMx0BSdlOjEv2TbN9z",exports.BASE_DIALOG_WIDTH=700,exports.TOOLBOX_EDIT_MODE="toolbox_blocks",exports.NOTIFICATION_ALERT_TYPE="notification",exports.START_BLOCKS="start_blocks",exports.DEPRECATED_PROJECT_TYPES=["algebra_game","calc","eval"]},"./src/dcdo.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DCDO=void 0;var _getScriptData=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/util/getScriptData.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}var DCDO=exports.DCDO=function(){function DCDO(){var configs=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.configs=configs}var _proto=DCDO.prototype;return _proto.get=function get(key){var defaultValue=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return key&&key in this.configs?this.configs[key]:defaultValue},_proto.set=function set(key,value){key&&(this.configs[key]=value)},_proto.reset=function reset(){this.configs={}},DCDO}(),configs={};(0,_getScriptData.hasScriptData)("script[data-dcdo]")&&(configs=(0,_getScriptData.default)("dcdo"));exports.default=new DCDO(configs)},"./src/imageUtils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.URIFromImageData=function URIFromImageData(imageData){var canvas=document.createElement("canvas");return canvas.width=imageData.width,canvas.height=imageData.height,canvas.getContext("2d").putImageData(imageData,0,0),canvas.toDataURL()},exports.blobToDataURI=function blobToDataURI(blob,onComplete){var fileReader=new FileReader;fileReader.onload=function(e){return onComplete(e.target.result)},fileReader.readAsDataURL(blob)},exports.canvasToBlob=canvasToBlob,exports.dataURIFromURI=function dataURIFromURI(_x){return _dataURIFromURI.apply(this,arguments)},exports.dataURIToBlob=function dataURIToBlob(_x2){return _dataURIToBlob.apply(this,arguments)},exports.dataURIToFramedBlob=function dataURIToFramedBlob(dataURI,callback){var frame=new Image,imageData=new Image;imageData.src=dataURI,frame.onload=function(){var canvas=document.createElement("canvas");canvas.width=frame.width,canvas.height=frame.height;var ctx=canvas.getContext("2d");ctx.drawImage(frame,0,0),ctx.drawImage(imageData,175,52,154,154),canvas.toBlob&&canvas.toBlob(callback)},frame.src=_blank_sharing_drawing.default},exports.dataURIToSourceSize=function dataURIToSourceSize(dataURI){return toImage(dataURI).then((function(image){return{x:image.width,y:image.height}}))},exports.downloadBlobAsPng=function downloadBlobAsPng(blob){var filename=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"image.png",download=document.createElement("a");download.href=URL.createObjectURL(blob),download.download=filename,download.click()},exports.fetchURLAsBlob=function fetchURLAsBlob(url,onComplete){var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="blob",xhr.onload=function(e){200===e.target.status?onComplete(null,e.target.response):onComplete(new Error("URL ".concat(url," responded with code ").concat(e.target.status)))},xhr.onerror=function(e){return onComplete(new Error("Error ".concat(e.target.status," occurred while receiving the document.")))},xhr.send()},exports.svgToDataURI=function svgToDataURI(svg){var imageType=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"image/png",options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return new Promise((function(resolve){Promise.all([__webpack_require__.e(6767),__webpack_require__.e(2867)]).then(__webpack_require__.t.bind(__webpack_require__,"./src/util/svgelement-polyfill.js",23)).then((function(){svg.toDataURL(imageType,_objectSpread(_objectSpread({},options),{},{callback:resolve}))}))}))},exports.toCanvas=toCanvas,exports.toImage=toImage,exports.toImageData=function toImageData(_x5){return _toImageData.apply(this,arguments)};var _blank_sharing_drawing=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./static/turtle/blank_sharing_drawing.png"));function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function define(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==_typeof(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function value(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(_typeof(e)+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function reset(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function stop(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function dispatchException(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function abrupt(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function complete(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function finish(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function _catch(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function delegateYield(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _dataURIFromURI(){return(_dataURIFromURI=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(uri){var canvas;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.next=2,toCanvas(uri);case 2:return canvas=_context.sent,_context.abrupt("return",canvas.toDataURL());case 4:case"end":return _context.stop()}}),_callee)})))).apply(this,arguments)}function canvasToBlob(canvas){return new Promise((function(resolve){canvas.toBlob(resolve)}))}function _dataURIToBlob(){return(_dataURIToBlob=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(uri){var canvas;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return _context2.next=2,toCanvas(uri);case 2:return canvas=_context2.sent,_context2.next=5,canvasToBlob(canvas);case 5:return _context2.abrupt("return",_context2.sent);case 6:case"end":return _context2.stop()}}),_callee2)})))).apply(this,arguments)}function toImage(_x3){return _toImage.apply(this,arguments)}function _toImage(){return(_toImage=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(input){var src,cleanup;return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:if(!(input instanceof HTMLImageElement)){_context3.next=2;break}return _context3.abrupt("return",input);case 2:if(cleanup=function cleanup(){},!(input instanceof Blob)){_context3.next=8;break}src=URL.createObjectURL(input),cleanup=function cleanup(){return URL.revokeObjectURL(input)},_context3.next=13;break;case 8:if("string"!=typeof input){_context3.next=12;break}src=input,_context3.next=13;break;case 12:throw new Error("Unable to convert input to image");case 13:return _context3.abrupt("return",new Promise((function(resolve,reject){var image=new Image;image.onload=function(){cleanup(),resolve(image)},image.onerror=function(err){cleanup(),reject(err)},image.src=src})));case 14:case"end":return _context3.stop()}}),_callee3)})))).apply(this,arguments)}function toCanvas(_x4){return _toCanvas.apply(this,arguments)}function _toCanvas(){return(_toCanvas=_asyncToGenerator(_regeneratorRuntime().mark((function _callee4(input){var image,canvas;return _regeneratorRuntime().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:if(!(input instanceof HTMLCanvasElement)){_context4.next=2;break}return _context4.abrupt("return",input);case 2:return _context4.prev=2,_context4.next=5,toImage(input);case 5:return image=_context4.sent,(canvas=document.createElement("canvas")).width=image.width,canvas.height=image.height,canvas.getContext("2d").drawImage(image,0,0),_context4.abrupt("return",canvas);case 14:throw _context4.prev=14,_context4.t0=_context4.catch(2),new Error("Unable to convert input to canvas: "+_context4.t0);case 17:case"end":return _context4.stop()}}),_callee4,null,[[2,14]])})))).apply(this,arguments)}function _toImageData(){return(_toImageData=_asyncToGenerator(_regeneratorRuntime().mark((function _callee5(input){var canvas;return _regeneratorRuntime().wrap((function _callee5$(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:if(!(input instanceof ImageData)){_context5.next=2;break}return _context5.abrupt("return",input);case 2:return _context5.prev=2,_context5.next=5,toCanvas(input);case 5:return canvas=_context5.sent,_context5.abrupt("return",canvas.getContext("2d").getImageData(0,0,canvas.width,canvas.height));case 9:throw _context5.prev=9,_context5.t0=_context5.catch(2),new Error("Unable to convert input to ImageData: "+_context5.t0);case 12:case"end":return _context5.stop()}}),_callee5,null,[[2,9]])})))).apply(this,arguments)}},"./src/polyfills.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var _wgxpath=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/wgxpath/wgxpath.install.js"));HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function value(callback,type,quality){for(var binStr=atob(this.toDataURL(type,quality).split(",")[1]),arr=new Uint8Array(binStr.length),i=0;i<binStr.length;i++)arr[i]=binStr.charCodeAt(i);callback(new Blob([arr],{type:type||"image/png"}))}}),void 0===SVGElement.prototype.getElementsByClassName&&(SVGElement.prototype.getElementsByClassName=function(className){return this.querySelectorAll("."+className)}),document.evaluate||_wgxpath.default.install(window)},"./src/util/experiments.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _jsCookie=_interopRequireDefault(__webpack_require__("./node_modules/js-cookie/src/js.cookie.js")),_dcdo=_interopRequireDefault(__webpack_require__("./src/dcdo.js")),_utils=__webpack_require__("./src/utils.js"),_trackEvent=_interopRequireDefault(__webpack_require__("./src/util/trackEvent.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var queryString=__webpack_require__("./node_modules/query-string/index.js"),experiments=module.exports;exports.default=experiments;experiments.REDUX_LOGGING="reduxLogging",experiments.SCHOOL_AUTOCOMPLETE_DROPDOWN_NEW_SEARCH="schoolAutocompleteDropdownNewSearch",experiments.SHOW_UNPUBLISHED_FIREBASE_TABLES="showUnpublishedFirebaseTables",experiments.TEACHER_DASHBOARD_SECTION_BUTTONS="teacher-dashboard-section-buttons",experiments.TEACHER_DASHBOARD_SECTION_BUTTONS_ALTERNATE_TEXT="teacher-dashboard-section-buttons-alternate-text",experiments.FINISH_DIALOG_METRICS="finish-dialog-metrics",experiments.I18N_TRACKING="frontend-i18n-tracking",experiments.TIME_SPENT="time-spent",experiments.BYPASS_DIALOG_POPUP="bypass-dialog-popup",experiments.SPECIAL_TOPIC="special-topic",experiments.OPT_IN_EMAIL_REG_PARTNER="optInEmailRegPartner",experiments.BACKGROUNDS_AND_UPLOAD="backgroundsTab",experiments.SECTION_SETUP_REFRESH="sectionSetupRefresh",experiments.GENDER_FEATURE_ENABLED="gender",experiments.CPA_EXPERIENCE="cpa_experience",experiments.AI_RUBRICS="ai-rubrics",experiments.NON_AI_RUBRICS="non-ai-rubrics",experiments.AI_TUTOR_ACCESS="ai-tutor",experiments.GOOGLE_BLOCKLY="google_blockly",experiments.SPRITE_LAB_DOCS="sl_docs",experiments.KEYBOARD_NAVIGATION="blockly_keyboard",experiments.SECTION_PROGRESS_V2="section_progress_v2",experiments.BIG_PLAYSPACE="bigPlayspace",experiments.NEW_SIGN_UP_FLOW="new_sign_up_flow",experiments.BUBBLE_DIALOG="bubbleDialog",experiments.getQueryString_=function(){return window.location.search},experiments.getStoredExperiments_=function(){var experimentsCookie=_jsCookie.default.get("_experiments"+window.cookieEnvSuffix),userExperiments=experimentsCookie?JSON.parse(decodeURIComponent(experimentsCookie)).map((function(name){return{key:name}})):[];try{var jsonList=localStorage.getItem("experimentsList"),storedExperiments=jsonList?JSON.parse(jsonList):[],now=Date.now(),enabledExperiments=storedExperiments.filter((function(experiment){return experiment.key&&(void 0===experiment.expiration||experiment.expiration>now)}));return enabledExperiments.length<storedExperiments.length&&(0,_utils.trySetLocalStorage)("experimentsList",JSON.stringify(enabledExperiments)),userExperiments.concat(enabledExperiments)}catch(e){return userExperiments}},experiments.getEnabledExperiments=function(){return this.getStoredExperiments_().map((function(experiment){return experiment.key}))},experiments.setEnabled=function(key,shouldEnable){var expiration=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,allEnabled=this.getStoredExperiments_(),experimentIndex=allEnabled.findIndex((function(experiment){return experiment.key===key}));if(shouldEnable)experimentIndex<0?(allEnabled.push({key,expiration}),(0,_trackEvent.default)("experiments","enable",key)):allEnabled[experimentIndex].expiration=expiration;else{if(!(experimentIndex>=0))return;allEnabled.splice(experimentIndex,1),(0,_trackEvent.default)("experiments","disable",key)}(0,_utils.trySetLocalStorage)("experimentsList",JSON.stringify(allEnabled))},experiments.isEnabledAllowingQueryString=function(key){return!!queryString.parse(this.getQueryString_())[key]||experiments.isEnabled(key)},experiments.isEnabled=function(key){var enabled=this.getStoredExperiments_().some((function(experiment){return experiment.key===key}))||!!(window.appOptions&&window.appOptions.experiments&&window.appOptions.experiments.includes(key));enabled=enabled||!!_dcdo.default.get(key,!1);var query=queryString.parse(this.getQueryString_()),enableQuery=query.enableExperiments,disableQuery=query.disableExperiments,tempEnableQuery=query.tempEnableExperiments;enableQuery&&(enableQuery.split(",").indexOf(key)>=0&&(enabled=!0,this.setEnabled(key,!0)));disableQuery&&(disableQuery.split(",").indexOf(key)>=0&&(enabled=!1,this.setEnabled(key,!1)));if(tempEnableQuery){var expirationDate=new Date;expirationDate.setHours(expirationDate.getHours()+12);var expiration=expirationDate.getTime();tempEnableQuery.split(",").indexOf(key)>=0&&(enabled=!0,this.setEnabled(key,!0,expiration))}return enabled},module.exports=exports.default},"./src/util/getScriptData.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function getScriptData(name){name=name.toLowerCase();var script=document.querySelector("script[data-".concat(name,"]"));try{return JSON.parse(script.dataset[name])}catch(e){throw console.error("Failed to parse script data for script",name),e}},exports.hasScriptData=function hasScriptData(name){return!!document.querySelector(name)}},"./src/util/i18nStringTracker.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function localeWithI18nStringTracker(locale,source){if(!_experiments.default.isEnabled(_experiments.default.I18N_TRACKING))return locale;var localeWithTracker={};return Object.keys(locale).forEach((function(stringKey,index){localeWithTracker[stringKey]=function(d){var value=locale[stringKey](d);return function log(stringKey,source){if(!stringKey||!source)return;(0,_i18nStringTrackerWorker.getI18nStringTrackerWorker)().log(stringKey,source)}(stringKey,source),value}})),localeWithTracker};var _experiments=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./src/util/experiments.js")),_i18nStringTrackerWorker=__webpack_require__("./src/util/i18nStringTrackerWorker.js");module.exports=exports.default},"./src/util/i18nStringTrackerWorker.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getI18nStringTrackerWorker=function getI18nStringTrackerWorker(){return new I18nStringTrackerWorker},__webpack_require__("./node_modules/whatwg-fetch/fetch.js");var I18nStringTrackerWorker=function(){function I18nStringTrackerWorker(){var instance=this.constructor.instance;if(instance)return instance;this.constructor.instance=this,this.buffer={}}var _proto=I18nStringTrackerWorker.prototype;return _proto.log=function log(stringKey,source){var _this=this;stringKey&&source&&(this.buffer[source]=this.buffer[source]||new Set,this.buffer[source].add("".concat(source,".").concat(stringKey)),this.pendingFlush||(this.pendingFlush=setTimeout((function(){return _this.flush()}),3e3)))},_proto.flush=function flush(){if(0!==Object.keys(this.buffer).length){var records=this.buffer;this.buffer={},this.pendingFlush=null,0===Math.floor(100*Math.random())&&function sendRecords(records){var locationOrigin=window.location.origin;locationOrigin||(locationOrigin=window.location.protocol+"//"+window.location.hostname+(window.location.port?":"+window.location.port:""));var url=locationOrigin+window.location.pathname;Object.keys(records).forEach((function(source){for(var stringKeys=Array.from(records[source]),i=0;i<stringKeys.length;i+=RECORD_LIMIT){var stringKeyBatch=stringKeys.slice(i,RECORD_LIMIT);fetch("/i18n/track_string_usage",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url,source,string_keys:stringKeyBatch})})}}))}(records)}},I18nStringTrackerWorker}(),RECORD_LIMIT=500},"./src/util/locale-do-not-import.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var _i18nStringTracker=_interopRequireDefault(__webpack_require__("./src/util/i18nStringTracker.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var locale=(0,_interopRequireDefault(__webpack_require__("./src/util/safeLoadLocale.js")).default)("common_locale");locale=(0,_i18nStringTracker.default)(locale,"common"),module.exports=locale},"./src/util/safeLoadLocale.js":(module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function safeLoadLocale(localeKey){return window.locales&&window.locales[localeKey]?window.locales[localeKey]:(console.warn("Translations must be loaded into the global scope before access. Falling back on an empty translation object. This page may break due to missing translations."),{})},module.exports=exports.default},"./src/util/trackEvent.js":(module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function trackEvent(){var _window;return void 0;(_window=window).trackEvent.apply(_window,arguments)},module.exports=exports.default},"./src/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.bisect=function bisect(array,conditional){var positive=array.filter((function(x){return conditional(x)})),negative=array.filter((function(x){return!conditional(x)}));return[positive,negative]},exports.calculateOffsetCoordinates=function calculateOffsetCoordinates(element,clientX,clientY){var rect=element.getBoundingClientRect();return{x:Math.round((clientX-rect.left)*element.offsetWidth/rect.width),y:Math.round((clientY-rect.top)*element.offsetHeight/rect.height)}},exports.cloneWithoutFunctions=function cloneWithoutFunctions(object){return JSON.parse(JSON.stringify(object))},exports.createEvent=function createEvent(type){var customEvent,bubbles=arguments.length>1&&void 0!==arguments[1]&&arguments[1],cancelable=arguments.length>2&&void 0!==arguments[2]&&arguments[2];try{customEvent=new Event(type,{bubbles,cancelable})}catch(e){(customEvent=document.createEvent("Event")).initEvent(type,bubbles,cancelable)}return customEvent},exports.createHiddenPrintWindow=function createHiddenPrintWindow(src){(0,_imageUtils.dataURIFromURI)(src).then((function(data){var iframe=(0,_jquery.default)('<iframe style="position: absolute; visibility: hidden;"></iframe>');iframe.appendTo("body"),iframe[0].contentWindow.document.write('<img src="'.concat(data,'" style="border: 1px solid #000;" onload="if (document.execCommand(\'print\', false, null)) {  } else { window.print(); }"/>'))}))},exports.createUuid=function createUuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){var r=16*Math.random()|0;return("x"===c?r:3&r|8).toString(16)}))},exports.currentLocation=currentLocation,exports.deepMergeConcatArrays=function deepMergeConcatArrays(baseObject,overrides){return _immutable.default.fromJS(baseObject).mergeWith((function deepConcatMerger(a,b){var isList=_immutable.default.List.isList;return isList(a)&&isList(b)?a.concat(b):a&&a.mergeWith?a.mergeWith(deepConcatMerger,b):b}),overrides).toJS()},exports.ellipsify=function ellipsify(inputText,maxLength){if(inputText&&inputText.length>maxLength)return inputText.substr(0,maxLength-3)+"...";return inputText||""},exports.escapeHtml=function escapeHtml(unsafe){return unsafe?unsafe.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\//g,"&#47;"):""},exports.escapeText=function escapeText(text){var escapedText=text.toString(),lines=(escapedText=(escapedText=(escapedText=(escapedText=escapedText.replace(/&/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;")).replace(/ {2}/g," &nbsp;")).split("\n"),first=lines[0],rest=lines.slice(1);0===first.length&&lines.length>1&&(first="<br>");return first+rest.map((function(line){return"<div>"+(line.length?line:"<br>")+"</div>"})).join("")},exports.executeIfConditional=function executeIfConditional(conditional,fn){return function(){if(conditional())return fn.apply(this,arguments)}},exports.extend=function extend(defaults,options){var finalOptions=exports.shallowCopy(defaults);for(var prop in options)finalOptions[prop]=options[prop];return finalOptions},exports.fetchSignedCookies=function fetchSignedCookies(){var buster=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return fetch("/dashboardapi/sign_cookies".concat(buster?"?bust=".concat(Date.now()):""),{credentials:"same-origin"})},exports.findExplicitlySetBlockIds=function findExplicitlySetBlockIds(){var appOptions=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(!appOptions||!appOptions.level)return[];for(var explicitlySetIds=new Set,_i=0,_blockSources=["startBlocks","toolbox"];_i<_blockSources.length;_i++){var _appOptions$level,levelProperty=_blockSources[_i],xmlString=null===(_appOptions$level=appOptions.level)||void 0===_appOptions$level?void 0:_appOptions$level[levelProperty];try{if(!xmlString)break;(new DOMParser).parseFromString(xmlString,"text/xml").querySelectorAll("block").forEach((function(blockElement){var idAttribute=blockElement.getAttribute("id");idAttribute&&explicitlySetIds.add(idAttribute)}))}catch(error){console.error("Error parsing XML for ".concat(levelProperty,":"),error)}}return explicitlySetIds},exports.findProfanity=void 0,exports.fireResizeEvent=function fireResizeEvent(){var ev=document.createEvent("Event");ev.initEvent("resize",!0,!0),window.dispatchEvent(ev)},exports.flatten=function flatten(array){return array.reduce((function(flat,toFlatten){return flat.concat(Array.isArray(toFlatten)?flatten(toFlatten):toFlatten)}),[])},exports.getAlphanumericId=function getAlphanumericId(){for(var validCharacters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",id=[],i=0;i<16;i++)id.push(validCharacters.charAt(Math.floor(62*Math.random())));return id.join("")},exports.getEnvironment=getEnvironment,exports.getTabId=function getTabId(){var tabId=tryGetSessionStorage("tabId",!1);if(tabId)return tabId;return trySetSessionStorage("tabId",Math.random()+""),tryGetSessionStorage("tabId",!1)},exports.hashString=function hashString(str){return(0,_md.default)(str)},exports.interpolateColors=function interpolateColors(from,to,value){var fromRGB=new _rgbcolor.default(from),toRGB=new _rgbcolor.default(to),r=Math.round(fromRGB.r*(1-value)+toRGB.r*value),g=Math.round(fromRGB.g*(1-value)+toRGB.g*value),b=Math.round(fromRGB.b*(1-value)+toRGB.b*value);return"rgb(".concat(r,", ").concat(g,", ").concat(b,")")},exports.isBlank=function isBlank(str){return!(str&&""!==str.trim())},exports.isDevelopmentEnvironment=function isDevelopmentEnvironment(){return getEnvironment()===Environments.development},exports.isInfiniteRecursionError=function isInfiniteRecursionError(err){if(err instanceof RangeError&&/^Maximum call stack size exceeded/.test(err.message))return!0;if("undefined"!=typeof InternalError&&err instanceof InternalError&&"too much recursion"===err.message)return!0;if(err instanceof Error&&"Out of stack space"===err.message)return!0;return!1},exports.isProductionEnvironment=function isProductionEnvironment(){return getEnvironment()===Environments.production},exports.isStagingEnvironment=function isStagingEnvironment(){return getEnvironment()===Environments.staging},exports.isSubsequence=function isSubsequence(sequence,subsequence){var superIndex=0,subIndex=0;for(;subIndex<subsequence.length;){for(;superIndex<sequence.length&&subsequence[subIndex]!==sequence[superIndex];)superIndex++;if(superIndex>=sequence.length)return!1;subIndex++,superIndex++}return!0},exports.isTestEnvironment=function isTestEnvironment(){return getEnvironment()===Environments.test},exports.levenshtein=function levenshtein(a,b){if(!a||!b)return(a||b).length;for(var matrix=[],i=0;i<=b.length;i++)if(matrix[i]=[i],0!==i)for(var j=0;j<=a.length;j++)matrix[0][j]=j,0!==j&&(matrix[i][j]=b.charAt(i-1)===a.charAt(j-1)?matrix[i-1][j-1]:Math.min(matrix[i-1][j-1]+1,matrix[i][j-1]+1,matrix[i-1][j]+1));return matrix[b.length][a.length]},exports.linkWithQueryParams=function linkWithQueryParams(link){var queryParams=window.location.search||"";return link+queryParams},exports.makeEnum=function makeEnum(){for(var key,result={},i=0;i<arguments.length;i++){if(result[key=String(arguments[i])])throw new Error('Key "'+key+'" occurred twice while constructing enum');result[key]=key}Object.freeze&&Object.freeze(result);return result},exports.mod=function mod(number,mod){return(number%mod+mod)%mod},exports.navigateToHref=function navigateToHref(href){window.location.href=href},exports.normalize=function normalize(vector){var mag=Math.sqrt(vector.x*vector.x+vector.y*vector.y);if(0===mag)return vector;return{x:vector.x/mag,y:vector.y/mag}},exports.quote=function quote(str){return'"'+str+'"'},exports.randomKey=function randomKey(obj){return randomValue(Object.keys(obj))},exports.randomValue=randomValue,exports.range=function range(start,end){for(var ints=[],i=start;i<=end;i++)ints.push(i);return ints},exports.reload=function reload(){window.location.reload()},exports.resetAniGif=function resetAniGif(element){if(!element)return;var src=element.src;element.src="#",setTimeout((function(){return element.src=src}),0)},exports.shallowCopy=function shallowCopy(source){var result={};for(var prop in source)result[prop]=source[prop];return result},exports.showGenericQtip=showGenericQtip,exports.showUnusedBlockQtip=function showUnusedBlockQtip(targetElement){var msg=__webpack_require__("./src/util/locale-do-not-import.js"),title=msg.unattachedBlockTipTitle(),message=msg.unattachedBlockTipBody();showGenericQtip(targetElement,title,message,{my:"bottom left",at:"top right"})},exports.stringToChunks=function stringToChunks(str,maxLength){var delimiter=arguments.length>2&&void 0!==arguments[2]?arguments[2]:" ";return str.split(delimiter).reduce((function(acc,val){var lastVal="";return acc[acc.length-1].length+val.length<maxLength&&(lastVal=acc.pop()+delimiter),lastVal+=val,acc.push(lastVal.trim()),acc}),[""])},exports.stringifyQueryParams=function stringifyQueryParams(params){if(!params)return"";var keys=Object.keys(params);if(!keys.length)return"";return"?"+keys.map((function(key){return"".concat(key,"=").concat(params[key])})).join("&")},exports.stripEncapsulatingDoubleQuotes=void 0,exports.stripQuotes=function stripQuotes(inputString){return inputString.replace(/["']/g,"")},exports.tooltipifyVocabulary=function tooltipifyVocabulary(){(0,_jquery.default)(".vocab").each((function(){(0,_jquery.default)(this).tooltip({placement:"bottom"})}))},exports.tryGetLocalStorage=function tryGetLocalStorage(key,defaultValue){if(void 0===defaultValue)throw"tryGetLocalStorage requires defaultValue";var returnValue=defaultValue;try{returnValue=localStorage.getItem(key)}catch(e){}return returnValue},exports.tryGetSessionStorage=tryGetSessionStorage,exports.trySetLocalStorage=function trySetLocalStorage(item,value){try{return localStorage.setItem(item,value),!0}catch(e){return!1}},exports.trySetSessionStorage=trySetSessionStorage,exports.unescapeText=function unescapeText(text){var cleanedText=text;return cleanedText=(cleanedText=(cleanedText=(cleanedText=(cleanedText=(cleanedText=cleanedText.replace(/(?!^)<div[^>]*>/gi,"\n")).replace(/<[^>]+>/gi,"")).replace(/&nbsp;/gi," ")).replace(/&gt;/gi,">")).replace(/&lt;/gi,"<")).replace(/&amp;/gi,"&")},exports.valueOr=function valueOr(val,defaultVal){return void 0===val?defaultVal:val},exports.windowOpen=function windowOpen(){var _window;return(_window=window).open.apply(_window,arguments)},exports.wrapNumberValidatorsForLevelBuilder=function wrapNumberValidatorsForLevelBuilder(){var nonNeg=Blockly.FieldTextInput.nonnegativeIntegerValidator,numVal=Blockly.FieldTextInput.numberValidator;Blockly.FieldTextInput.nonnegativeIntegerValidator=function(text){return"???"===text?text:nonNeg(text)},Blockly.FieldTextInput.numberValidator=function(text){return"???"===text?text:numVal(text)}},exports.xFromPosition=function xFromPosition(position){var containerWidth=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,spriteWidth=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;switch(position){case _constants.Position.OUTTOPOUTLEFT:case _constants.Position.TOPOUTLEFT:case _constants.Position.MIDDLEOUTLEFT:case _constants.Position.BOTTOMOUTLEFT:case _constants.Position.OUTBOTTOMOUTLEFT:return-spriteWidth;case _constants.Position.OUTTOPLEFT:case _constants.Position.TOPLEFT:case _constants.Position.MIDDLELEFT:case _constants.Position.BOTTOMLEFT:case _constants.Position.OUTBOTTOMLEFT:return 0;case _constants.Position.OUTTOPCENTER:case _constants.Position.TOPCENTER:case _constants.Position.MIDDLECENTER:case _constants.Position.BOTTOMCENTER:case _constants.Position.OUTBOTTOMCENTER:return(containerWidth-spriteWidth)/2;case _constants.Position.OUTTOPRIGHT:case _constants.Position.TOPRIGHT:case _constants.Position.MIDDLERIGHT:case _constants.Position.BOTTOMRIGHT:case _constants.Position.OUTBOTTOMRIGHT:return containerWidth-spriteWidth;case _constants.Position.OUTTOPOUTRIGHT:case _constants.Position.TOPOUTRIGHT:case _constants.Position.MIDDLEOUTRIGHT:case _constants.Position.BOTTOMOUTRIGHT:case _constants.Position.OUTBOTTOMOUTRIGHT:return containerWidth}},exports.yFromPosition=function yFromPosition(position){var containerHeight=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,spriteHeight=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;switch(position){case _constants.Position.OUTTOPOUTLEFT:case _constants.Position.OUTTOPLEFT:case _constants.Position.OUTTOPCENTER:case _constants.Position.OUTTOPRIGHT:case _constants.Position.OUTTOPOUTRIGHT:return-spriteHeight;case _constants.Position.TOPOUTLEFT:case _constants.Position.TOPLEFT:case _constants.Position.TOPCENTER:case _constants.Position.TOPRIGHT:case _constants.Position.TOPOUTRIGHT:return 0;case _constants.Position.MIDDLEOUTLEFT:case _constants.Position.MIDDLELEFT:case _constants.Position.MIDDLECENTER:case _constants.Position.MIDDLERIGHT:case _constants.Position.MIDDLEOUTRIGHT:return(containerHeight-spriteHeight)/2;case _constants.Position.BOTTOMOUTLEFT:case _constants.Position.BOTTOMLEFT:case _constants.Position.BOTTOMCENTER:case _constants.Position.BOTTOMRIGHT:case _constants.Position.BOTTOMOUTRIGHT:return containerHeight-spriteHeight;case _constants.Position.OUTBOTTOMOUTLEFT:case _constants.Position.OUTBOTTOMLEFT:case _constants.Position.OUTBOTTOMCENTER:case _constants.Position.OUTBOTTOMRIGHT:case _constants.Position.OUTBOTTOMOUTRIGHT:return containerHeight}};var _immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_md=_interopRequireDefault(__webpack_require__("./node_modules/md5/md5.js")),_rgbcolor=_interopRequireDefault(__webpack_require__("./node_modules/rgbcolor/index.js")),_constants=__webpack_require__("./src/constants.js"),_imageUtils=__webpack_require__("./src/imageUtils.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}__webpack_require__("./src/polyfills.js");exports.stripEncapsulatingDoubleQuotes=function stripEncapsulatingDoubleQuotes(inputString){return inputString.replace(/^"(.*)"$/,"$1")};function randomValue(values){return values[Math.floor(Math.random()*values.length)]}function showGenericQtip(targetElement,title,message,position){(0,_jquery.default)(targetElement).qtip({content:{text:"\n        <h4>".concat(title,"</h4>\n        <p>").concat(message,"</p>\n      "),title:{button:(0,_jquery.default)('<div class="tooltip-x-close"/>')}},position,style:{classes:"cdo-qtips",tip:{width:20,height:20}},hide:{event:"unfocus"},show:!1}).qtip("show")}function tryGetSessionStorage(key,defaultValue){if(void 0===defaultValue)throw"tryGetSessionStorage requires defaultValue";var returnValue=defaultValue;try{returnValue=sessionStorage.getItem(key)}catch(e){}return returnValue}function trySetSessionStorage(item,value){try{return sessionStorage.setItem(item,value),!0}catch(e){if("QuotaExceededError"!==e.name)throw e;return!1}}function currentLocation(){return window.location}Function.prototype.inherits=function(parent){this.prototype=Object.create(parent.prototype),this.prototype.constructor=this,this.superPrototype=parent.prototype};exports.findProfanity=function findProfanity(text,locale){var authenticityToken=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,request={url:"/profanity/find",method:"POST",contentType:"application/json;charset=UTF-8",data:JSON.stringify({text,locale})};return authenticityToken&&(request.headers={"X-CSRF-Token":authenticityToken}),_jquery.default.ajax(request)};var Environments={production:"production",levelbuilder:"levelbuilder",test:"test",staging:"staging",adhoc:"adhoc",development:"development",unknown:"unknown"};function getEnvironment(){var hostname=currentLocation().hostname;return hostname.includes("adhoc")?Environments.adhoc:hostname.includes("test")?Environments.test:hostname.includes("levelbuilder")?Environments.levelbuilder:hostname.includes("staging")?Environments.staging:hostname.includes("localhost")||hostname.includes("127.0.0.1")?Environments.development:"code.org"===hostname||"studio.code.org"===hostname?Environments.production:Environments.unknown}},"./static/turtle/blank_sharing_drawing.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"blank_sharing_drawingwp0045715723f5808287c6c2c9a54f5d87.png"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,