/*! For license information please see templates-sectionProgress-progressTables-ProgressTableLevelBubble-story.d6ebf9ce.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1954],{"./src/templates/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/progress/BubbleBadge.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AssessmentBadge=AssessmentBadge,exports.BadgeType=void 0,exports.KeepWorkingBadge=KeepWorkingBadge,exports.default=BubbleBadge;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_utils=__webpack_require__("./src/utils.js"),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BadgeType=exports.BadgeType=(0,_utils.makeEnum)("assessment","keepWorking");function BubbleBadge(_ref){var badgeType=_ref.badgeType,bubbleSize=_ref.bubbleSize,bubbleShape=_ref.bubbleShape;return[_BubbleFactory.BubbleSize.full,_BubbleFactory.BubbleSize.letter].includes(bubbleSize)?badgeType===BadgeType.assessment?AssessmentBubbleBadge(bubbleShape):badgeType===BadgeType.keepWorking?KeepWorkingBubbleBadge(bubbleSize):null:null}function AssessmentBubbleBadge(bubbleShape){var bubblePositioning=bubbleShape===_BubbleFactory.BubbleShape.diamond?styles.diamondBubblePosition:styles.bubblePosition;return _react.default.createElement("div",{style:bubblePositioning},_react.default.createElement(AssessmentBadge,null))}function KeepWorkingBubbleBadge(bubbleSize){var isSmall=bubbleSize===_BubbleFactory.BubbleSize.letter,bubblePositioning=isSmall?styles.keepWorkingSmallBadgePosition:styles.keepWorkingBadgePosition;return _react.default.createElement("div",{style:bubblePositioning},_react.default.createElement(KeepWorkingBadge,{isSmall}))}function KeepWorkingBadge(_ref2){var isSmall=_ref2.isSmall,style=_ref2.style,badgeSize=isSmall?styles.keepWorkingBadgeSmallSize:styles.keepWorkingBadgeFullSize;return _react.default.createElement("div",{style:_objectSpread(_objectSpread(_objectSpread({},styles.keepWorkingBadge),badgeSize),style)})}function AssessmentBadge(){return _react.default.createElement("span",{className:"fa-stack",style:styles.container},_react.default.createElement(_FontAwesome.default,{icon:"circle",className:"fa-stack-2x",style:styles.purple}),_react.default.createElement(_FontAwesome.default,{icon:"circle-thin",className:"fa-stack-2x",style:styles.white}),_react.default.createElement(_FontAwesome.default,{icon:"check",className:"fa-stack-1x",style:styles.white}))}BubbleBadge.propTypes={badgeType:_propTypes.default.oneOf(Object.values(BadgeType)).isRequired,bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired,bubbleShape:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleShape)).isRequired},AssessmentBubbleBadge.propTypes={bubbleShape:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleShape)).isRequired},KeepWorkingBubbleBadge.propTypes={bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired},KeepWorkingBadge.propTypes={isSmall:_propTypes.default.bool,style:_propTypes.default.object},AssessmentBadge.propTypes={hasWhiteBorder:_propTypes.default.bool,style:_propTypes.default.object};var styles={container:{fontSize:10},bubblePosition:{position:"absolute",top:-7,right:-7},diamondBubblePosition:{position:"absolute",top:-13,right:-17},purple:{color:_color.default.purple},white:{color:_color.default.white},keepWorkingSmallBadgePosition:{position:"absolute",top:-2,right:-2},keepWorkingBadgePosition:{position:"absolute",top:0,right:-2},keepWorkingBadge:{borderRadius:"50%",backgroundColor:_color.default.red},keepWorkingBadgeFullSize:{width:10,height:10},keepWorkingBadgeSmallSize:{width:7,height:7}}},"./src/templates/sectionProgress/progressTables/ProgressTableLevelBubble.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_CachedElement=_interopRequireDefault(__webpack_require__("./src/util/CachedElement.jsx")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressTableLevelBubble=exports.default=function(_React$PureComponent){function ProgressTableLevelBubble(props){var _this;return(_this=_React$PureComponent.call(this,props)||this).createBubbleElement=_this.createBubbleElement.bind(_this),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressTableLevelBubble,_React$PureComponent);var _proto=ProgressTableLevelBubble.prototype;return _proto.render=function render(){return _react.default.createElement(_BubbleFactory.BubbleLink,{url:this.props.url},_react.default.createElement(_CachedElement.default,{elementType:"BasicBubble",cacheKey:this.getCacheKey(),createElement:this.createBubbleElement}))},_proto.shouldShowKeepWorkingBadge=function shouldShowKeepWorkingBadge(){return[_types.ReviewStates.keepWorking,_types.ReviewStates.awaitingReview].includes(this.props.reviewState)},_proto.createBubbleElement=function createBubbleElement(){var _this$props=this.props,levelStatus=_this$props.levelStatus,levelKind=_this$props.levelKind,isLocked=_this$props.isLocked,isUnplugged=_this$props.isUnplugged,isConcept=_this$props.isConcept,isBonus=_this$props.isBonus,isPaired=_this$props.isPaired,title=_this$props.title,bubbleSize=_this$props.bubbleSize,content=(0,_BubbleFactory.getBubbleContent)(isLocked,isUnplugged,isBonus,isPaired,title,bubbleSize);return this.renderBasicBubble((0,_BubbleFactory.getBubbleShape)(isUnplugged,isConcept),bubbleSize,(0,_progressStyles.levelProgressStyle)(levelStatus,levelKind),content,this.shouldShowKeepWorkingBadge())},_proto.renderBasicBubble=function renderBasicBubble(shape,size,progressStyle,content,showKeepWorkingBadge){return _react.default.createElement(_BubbleFactory.BasicBubble,{shape,size,progressStyle,classNames:(0,_BubbleFactory.getBubbleClassNames)(!0)},content,showKeepWorkingBadge&&_react.default.createElement(_BubbleBadge.default,{badgeType:_BubbleBadge.BadgeType.keepWorking,bubbleSize:size,bubbleShape:shape}))},_proto.getCacheKey=function getCacheKey(){var _this$props2=this.props,isLocked=_this$props2.isLocked,levelStatus=_this$props2.levelStatus,levelKind=_this$props2.levelKind,isUnplugged=_this$props2.isUnplugged,isConcept=_this$props2.isConcept,isBonus=_this$props2.isBonus,isPaired=_this$props2.isPaired,title=_this$props2.title,bubbleSize=_this$props2.bubbleSize,statusString="sts=".concat(levelStatus);if(levelKind===_sharedConstants.LevelKind.assessment&&(statusString="asmt:".concat(statusString)),bubbleSize===_BubbleFactory.BubbleSize.letter){var badge=this.shouldShowKeepWorkingBadge()?"&bdg":"";return"ltr:ttl=".concat(title,"&").concat(statusString).concat(badge)}if(isUnplugged)return"unp:".concat(statusString);var shapeString="shp=".concat((0,_BubbleFactory.getBubbleShape)(isUnplugged,isConcept)),strings=[isLocked?"lkd:":isPaired?"prd:":isBonus?"bns:":title?"ttl=".concat(title):null,shapeString,statusString];return this.shouldShowKeepWorkingBadge()&&strings.push("bdg"),strings.join("&")},ProgressTableLevelBubble}(_react.default.PureComponent);_defineProperty(ProgressTableLevelBubble,"propTypes",{levelStatus:_propTypes.default.string,levelKind:_propTypes.default.string,isLocked:_propTypes.default.bool,isUnplugged:_propTypes.default.bool,isConcept:_propTypes.default.bool,isBonus:_propTypes.default.bool,isPaired:_propTypes.default.bool,bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired,title:_propTypes.default.string,url:_propTypes.default.string,reviewState:_propTypes.default.oneOf(Object.keys(_types.ReviewStates))}),_defineProperty(ProgressTableLevelBubble,"defaultProps",{bubbleSize:_BubbleFactory.BubbleSize.full}),module.exports=exports.default},"./src/util/CachedElement.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=CachedElement,exports.unitTestExports=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_server=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/server.browser.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function CachedElement(_ref){var elementType=_ref.elementType,cacheKey=_ref.cacheKey,createElement=_ref.createElement,htmlCache=elementsHtmlCache[elementType]||{},elementHtml=htmlCache[cacheKey];return elementHtml||(elementHtml=function createHtml(element){return _server.default.renderToStaticMarkup(element)}(createElement()),htmlCache[cacheKey]=elementHtml,elementsHtmlCache[elementType]=htmlCache),_react.default.createElement("div",{dangerouslySetInnerHTML:{__html:elementHtml}})}CachedElement.propTypes={elementType:_propTypes.default.string.isRequired,cacheKey:_propTypes.default.string.isRequired,createElement:_propTypes.default.func.isRequired};var elementsHtmlCache={};exports.unitTestExports={clearElementsCache:function clearElementsCache(){Object.keys(elementsHtmlCache).forEach((function(key){delete elementsHtmlCache[key]}))},elementsHtmlCache}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/sectionProgress/progressTables/ProgressTableLevelBubble.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnpluggedBubbleStatus=exports.PairedBubbleStatus=exports.LockedBubble=exports.LetterBubbles=exports.DotBubbles=exports.ConceptBubbleStatus=exports.BubbleStatus=exports.BonusBubbleStatus=exports.AssessmentBubbleStatus=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_ProgressTableLevelBubble=_interopRequireDefault(__webpack_require__("./src/templates/sectionProgress/progressTables/ProgressTableLevelBubble.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var statuses=[_sharedConstants.LevelStatus.not_tried,_sharedConstants.LevelStatus.attempted,_sharedConstants.LevelStatus.passed,_sharedConstants.LevelStatus.perfect],assessmentStatuses=[_sharedConstants.LevelStatus.not_tried,_sharedConstants.LevelStatus.attempted,_sharedConstants.LevelStatus.submitted,_sharedConstants.LevelStatus.completed_assessment,_sharedConstants.LevelStatus.perfect],wrapperStyle={width:200,height:50,backgroundColor:_color.default.background_gray,display:"flex",alignItems:"center",justifyContent:"center"},SingleTemplate=function SingleTemplate(args){return _react.default.createElement("div",{style:wrapperStyle},_react.default.createElement(_ProgressTableLevelBubble.default,args))},LockedBubble=exports.LockedBubble=SingleTemplate.bind({});LockedBubble.args={levelStatus:_sharedConstants.LevelStatus.not_tried,levelKind:_sharedConstants.LevelKind.level,isLocked:!0,title:"3",url:"/foo/bar"},LockedBubble.argTypes={levelStatus:{control:"select",options:statuses}},(exports.BubbleStatus=SingleTemplate.bind({})).args={levelStatus:_sharedConstants.LevelStatus.not_tried,levelKind:_sharedConstants.LevelKind.level,title:"3",url:"/foo/bar"},(exports.ConceptBubbleStatus=SingleTemplate.bind({})).args={levelStatus:_sharedConstants.LevelStatus.not_tried,levelKind:_sharedConstants.LevelKind.level,title:"3",url:"/foo/bar",isConcept:!0};var AssessmentBubbleStatus=exports.AssessmentBubbleStatus=SingleTemplate.bind({});AssessmentBubbleStatus.args={levelStatus:_sharedConstants.LevelStatus.not_tried,levelKind:_sharedConstants.LevelKind.assessment,title:"3",url:"/foo/bar"},AssessmentBubbleStatus.argTypes={levelStatus:{control:"select",options:assessmentStatuses}},(exports.BonusBubbleStatus=SingleTemplate.bind({})).args={levelStatus:_sharedConstants.LevelStatus.not_tried,levelKind:_sharedConstants.LevelKind.level,title:"3",url:"/foo/bar",isBonus:!0};var pairedBubbleStatuses=[].concat(statuses).slice(1),PairedBubbleStatus=exports.PairedBubbleStatus=SingleTemplate.bind({});PairedBubbleStatus.args={levelStatus:pairedBubbleStatuses[0],levelKind:_sharedConstants.LevelKind.level,title:"3",url:"/foo/bar",isPaired:!0},PairedBubbleStatus.argTypes={levelStatus:{control:"select",options:pairedBubbleStatuses}},(exports.UnpluggedBubbleStatus=SingleTemplate.bind({})).args={levelStatus:_sharedConstants.LevelStatus.not_tried,levelKind:_sharedConstants.LevelKind.level,title:"3",url:"/foo/bar",isUnplugged:!0},(exports.LetterBubbles=function LetterBubbles(){return _react.default.createElement("div",{style:_objectSpread(_objectSpread({},wrapperStyle),{},{width:null,height:null})},_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:_sharedConstants.LevelStatus.perfect,bubbleSize:_BubbleFactory.BubbleSize.letter,title:"a",url:"/foo/bar",key:1}),_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:_sharedConstants.LevelStatus.attempted,bubbleSize:_BubbleFactory.BubbleSize.letter,title:"b",url:"/foo/bar",key:2}),_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:_sharedConstants.LevelStatus.not_tried,bubbleSize:_BubbleFactory.BubbleSize.letter,title:"c",url:"/foo/bar",key:3}))}).argTypes={},(exports.DotBubbles=function DotBubbles(){return _react.default.createElement("div",{style:_objectSpread(_objectSpread({},wrapperStyle),{},{width:null,height:null})},_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:_sharedConstants.LevelStatus.perfect,isConcept:!0,bubbleSize:_BubbleFactory.BubbleSize.dot,title:"a",url:"/foo/bar",key:1}),_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:_sharedConstants.LevelStatus.attempted,bubbleSize:_BubbleFactory.BubbleSize.dot,title:"b",url:"/foo/bar",key:2}),_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:_sharedConstants.LevelStatus.not_tried,bubbleSize:_BubbleFactory.BubbleSize.dot,title:"c",url:"/foo/bar",key:3}))}).argTypes={};exports.default={component:_ProgressTableLevelBubble.default,argTypes:{levelStatus:{control:"select",options:statuses}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,