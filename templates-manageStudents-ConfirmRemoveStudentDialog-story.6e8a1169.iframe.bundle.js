/*! For license information please see templates-manageStudents-ConfirmRemoveStudentDialog-story.6e8a1169.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5632],{"./src/lib/util/urlHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.metaTagDescription=exports.RELEASE_OR_DELETE_RECORDS_EXPLANATION=exports.ADD_A_PERSONAL_LOGIN_HELP_URL=void 0,exports.pegasus=function pegasus(relativeUrl){if(window.dashboard&&window.dashboard.CODE_ORG_URL)return window.dashboard.CODE_ORG_URL+relativeUrl;return relativeUrl},exports.setPegasusOrigin=function setPegasusOrigin(origin){window.dashboard=window.dashboard||{},window.dashboard.CODE_ORG_URL=origin},exports.setStudioOrigin=function setStudioOrigin(origin){window.pegasus=window.pegasus||{},window.pegasus.STUDIO_URL=origin},exports.studio=function studio(relativeUrl){if(window.pegasus&&window.pegasus.STUDIO_URL)return window.pegasus.STUDIO_URL+relativeUrl;return relativeUrl};var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}exports.metaTagDescription=_lodash.default.memoize((function(relativeUrl){return fetch(relativeUrl).then((function(response){return Promise.all([response.status,response.text()])})).then((function(_ref){var _ref2=_slicedToArray(_ref,2),status=_ref2[0],text=_ref2[1];return status<200||status>=300?relativeUrl:(0,_jquery.default)(text).filter("meta[name='description']").attr("content")||relativeUrl})).catch((function(error){return relativeUrl}))})),exports.ADD_A_PERSONAL_LOGIN_HELP_URL="https://support.code.org/hc/en-us/articles/115001475131-Adding-a-personal-login-to-a-teacher-created-account",exports.RELEASE_OR_DELETE_RECORDS_EXPLANATION="https://support.code.org/hc/en-us/articles/360015983631"},"./src/sharedComponents/SystemDialog/ConfirmCancelFooter.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ConfirmCancelFooter=exports.default=function(_React$Component){function ConfirmCancelFooter(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ConfirmCancelFooter,_React$Component),ConfirmCancelFooter.prototype.render=function render(){var _this$props=this.props,onConfirm=_this$props.onConfirm,onCancel=_this$props.onCancel,confirmText=_this$props.confirmText,cancelText=_this$props.cancelText,confirmColor=_this$props.confirmColor,cancelColor=_this$props.cancelColor,disableConfirm=_this$props.disableConfirm,disableCancel=_this$props.disableCancel,tabIndex=_this$props.tabIndex,children=_this$props.children;return _react.default.createElement("div",{style},_react.default.createElement(_Button.default,{__useDeprecatedTag:!0,onClick:onConfirm,text:confirmText,color:confirmColor,disabled:disableConfirm,tabIndex,style:buttonStyle}),_react.default.createElement("span",{style:messageStyle},children),_react.default.createElement(_Button.default,{__useDeprecatedTag:!0,onClick:onCancel,text:cancelText,color:cancelColor,disabled:disableCancel,tabIndex,style:buttonStyle}))},ConfirmCancelFooter}(_react.default.Component);_defineProperty(ConfirmCancelFooter,"propTypes",{onConfirm:_propTypes.default.func.isRequired,onCancel:_propTypes.default.func.isRequired,confirmText:_Button.default.propTypes.text,cancelText:_Button.default.propTypes.text,confirmColor:_Button.default.propTypes.color.isRequired,cancelColor:_Button.default.propTypes.color.isRequired,disableConfirm:_propTypes.default.bool,disableCancel:_propTypes.default.bool,tabIndex:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),children:_propTypes.default.any}),_defineProperty(ConfirmCancelFooter,"defaultProps",{confirmText:_locale.default.dialogOK(),cancelText:_locale.default.cancel(),confirmColor:_Button.default.ButtonColor.brandSecondaryDefault,cancelColor:_Button.default.ButtonColor.gray});var style={display:"flex",flexDirection:"row-reverse",alignItems:"flex-end",justifyContent:"space-between",borderStyle:"solid",borderColor:_color.default.lighter_gray,borderTopWidth:1,borderBottomWidth:0,borderRightWidth:0,borderLeftWidth:0,paddingTop:10,marginTop:10},messageStyle={display:"inline-block",lineHeight:"34px",textAlign:"right",verticalAlign:"top",marginLeft:"1em",marginRight:"1em",flexGrow:1},buttonStyle={flexShrink:0};module.exports=exports.default},"./src/sharedComponents/SystemDialog/Field.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_utils=__webpack_require__("./src/utils.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_defineProperty(exports.default=function(_React$Component){function Field(props){var _this;return(_this=_React$Component.call(this,props)||this).uniqueId=(0,_utils.createUuid)(),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(Field,_React$Component),Field.prototype.render=function render(){var _this$props=this.props,label=_this$props.label,labelDetails=_this$props.labelDetails,error=_this$props.error,children=_this$props.children,style=_this$props.style;return _react.default.createElement("div",{style:_objectSpread({marginBottom:15},style)},(label||labelDetails)&&_react.default.createElement("label",{htmlFor:this.uniqueId,style:{display:"block",color:_color.default.charcoal}},label&&_react.default.createElement("span",{style:{fontWeight:"bold",marginRight:"1em"}},label),labelDetails&&_react.default.createElement("span",null,labelDetails)),_react.default.cloneElement(children,{id:this.uniqueId}),error&&_react.default.createElement(FieldError,null,error))},Field}(_react.default.Component),"propTypes",{label:_propTypes.default.string,labelDetails:_propTypes.default.node,error:_propTypes.default.any,children:_propTypes.default.element.isRequired,style:_propTypes.default.object});var FieldError=function FieldError(_ref){var children=_ref.children;return _react.default.createElement("div",{style:{color:_color.default.red,fontStyle:"italic"}},children)};FieldError.propTypes={children:_propTypes.default.string},module.exports=exports.default},"./src/sharedComponents/SystemDialog/Header.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_defineProperty(exports.default=function(_React$Component){function Header(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(Header,_React$Component),Header.prototype.render=function render(){var computedStyle=_objectSpread(_objectSpread({},style),this.props.hideBorder&&{borderBottomWidth:0,paddingBottom:5});return _react.default.createElement("h1",{style:computedStyle},this.props.text)},Header}(_react.default.Component),"propTypes",{text:_propTypes.default.string.isRequired,hideBorder:_propTypes.default.bool});var style=_objectSpread(_objectSpread({fontSize:16,lineHeight:"20px",color:_color.default.charcoal},_fontConstants.default["main-font-semi-bold"]),{},{borderStyle:"solid",borderColor:_color.default.lighter_gray,borderTopWidth:0,borderBottomWidth:1,borderRightWidth:0,borderLeftWidth:0,paddingBottom:10,paddingTop:0,paddingLeft:0,paddingRight:0,marginBottom:10,marginTop:10});module.exports=exports.default},"./src/sharedComponents/SystemDialog/SystemDialog.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"ConfirmCancelFooter",{enumerable:!0,get:function get(){return _ConfirmCancelFooter.default}}),Object.defineProperty(exports,"Field",{enumerable:!0,get:function get(){return _Field.default}}),Object.defineProperty(exports,"Header",{enumerable:!0,get:function get(){return _Header.default}});var _ConfirmCancelFooter=_interopRequireDefault(__webpack_require__("./src/sharedComponents/SystemDialog/ConfirmCancelFooter.jsx")),_Field=_interopRequireDefault(__webpack_require__("./src/sharedComponents/SystemDialog/Field.jsx")),_Header=_interopRequireDefault(__webpack_require__("./src/sharedComponents/SystemDialog/Header.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}},"./src/templates/BaseDialog.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_constants=__webpack_require__("./src/constants.js"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BaseDialog=exports.default=function(_React$Component){function BaseDialog(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"handleKeyDown",(function(event){"Escape"===event.key&&_this.closeDialog(),_this.props.handleKeyDown&&_this.props.handleKeyDown(event)})),_defineProperty(_this,"closeDialog",(function(){!_this.props.uncloseable&&_this.props.handleClose&&(_this.props.handleClose(),_this.props.soundPlayer&&_this.props.soundPlayer.stopAllAudio())})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(BaseDialog,_React$Component);var _proto=BaseDialog.prototype;return _proto.componentDidMount=function componentDidMount(){this.focusDialog()},_proto.componentDidUpdate=function componentDidUpdate(){this.focusDialog()},_proto.getTabbableElements=function getTabbableElements(){return[].slice.call(this.refs.dialog.querySelectorAll("a,button,input"))},_proto.focusDialog=function focusDialog(){var descendantIsActive=document.activeElement&&this.refs.dialog&&this.refs.dialog.contains(document.activeElement);this.props.isOpen&&!descendantIsActive&&this.refs.dialog.focus()},_proto.render=function render(){if(!this.props.isOpen&&!this.props.hideBackdrop)return _react.default.createElement("div",null);var bodyStyle,modalBodyStyle,xCloseStyle;this.props.fullWidth&&(bodyStyle=_objectSpread(_objectSpread({},bodyStyle),{},{width:"90%",marginLeft:"-45%"})),this.props.fullHeight&&(bodyStyle=_objectSpread(_objectSpread({},bodyStyle),{},{height:"80%"}),modalBodyStyle=_objectSpread(_objectSpread({},modalBodyStyle),{},{boxSizing:"border-box"}));var wrapperClassNames="",modalClassNames="modal",modalBodyClassNames="modal-body",overflowX=this.props.overflow||"hidden",overflowY=this.props.overflow||(this.props.fixedHeight||this.props.fullHeight?"hidden":"auto");this.props.useUpdatedStyles?(wrapperClassNames="dashboard-styles",modalBodyClassNames="",modalBodyStyle={background:"#fff",height:this.props.fixedHeight,maxHeight:!this.props.fixedHeight&&"85vh",overflowX,overflowY,borderRadius:4},this.props.useFlexbox&&(modalBodyStyle=_objectSpread(_objectSpread({},modalBodyStyle),{},{display:"flex",flexDirection:"column"})),bodyStyle=_objectSpread(_objectSpread({},bodyStyle),{},{width:this.props.fixedWidth||_constants.BASE_DIALOG_WIDTH,marginLeft:-this.props.fixedWidth/2||-350})):this.props.noModalStyles&&(modalClassNames="",modalBodyClassNames=""),bodyStyle=_objectSpread(_objectSpread(_objectSpread({},bodyStyle),this.props.hideBackdrop&&{position:"initial",marginLeft:0}),this.props.style),xCloseStyle={position:"absolute",top:0,insetInlineEnd:0,padding:0,color:_color.default.neutral_dark30,cursor:"pointer",fontSize:24,border:"none"},modalBodyClassNames=[modalBodyClassNames,this.props.bodyClassName].filter((function(className){return!!className})).join(" ");var body=_react.default.createElement("div",{style:bodyStyle,tabIndex:"-1",className:modalClassNames,ref:"dialog",onKeyDown:this.handleKeyDown},_react.default.createElement("div",{style:modalBodyStyle,id:this.props.bodyId,className:modalBodyClassNames},!this.props.uncloseable&&!this.props.hideCloseButton&&_react.default.createElement(_Button.default,{id:"x-close",onClick:this.closeDialog,icon:"fa-solid fa-xmark",style:xCloseStyle,color:"white","aria-label":_locale.default.closeDialog()}),this.props.children));return this.props.hideBackdrop?body:_react.default.createElement("div",{className:wrapperClassNames},_react.default.createElement("div",{className:"modal-backdrop",style:this.props.backdropStyle,onClick:this.closeDialog}),body)},BaseDialog}(_react.default.Component);_defineProperty(BaseDialog,"propTypes",{isOpen:_propTypes.default.bool,handleClose:_propTypes.default.func,uncloseable:_propTypes.default.bool,hideCloseButton:_propTypes.default.bool,handleKeyDown:_propTypes.default.func,hideBackdrop:_propTypes.default.bool,fullWidth:_propTypes.default.bool,fullHeight:_propTypes.default.bool,useUpdatedStyles:_propTypes.default.bool,noModalStyles:_propTypes.default.bool,children:_propTypes.default.node,fixedWidth:_propTypes.default.number,fixedHeight:_propTypes.default.number,useFlexbox:_propTypes.default.bool,bodyId:_propTypes.default.string,bodyClassName:_propTypes.default.string,style:_propTypes.default.object,soundPlayer:_propTypes.default.object,overflow:_propTypes.default.string,backdropStyle:_propTypes.default.object}),module.exports=exports.default},"./src/templates/SafeMarkdown.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _redactableMarkdown=_interopRequireDefault(__webpack_require__("./node_modules/@code-dot-org/redactable-markdown/dist/main.js")),_remarkPlugins=__webpack_require__("./node_modules/@code-dot-org/remark-plugins/src/index.js"),_github=_interopRequireDefault(__webpack_require__("./node_modules/hast-util-sanitize/lib/github.json")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_rehypeRaw=_interopRequireDefault(__webpack_require__("./node_modules/rehype-raw/index.js")),_rehypeReact=_interopRequireDefault(__webpack_require__("./node_modules/rehype-react/index.js")),_rehypeSanitize=_interopRequireDefault(__webpack_require__("./node_modules/rehype-sanitize/index.js")),_remarkRehype=_interopRequireDefault(__webpack_require__("./node_modules/remark-rehype/index.js")),_unified=_interopRequireDefault(__webpack_require__("./node_modules/unified/index.js")),_externalLinks=_interopRequireDefault(__webpack_require__("./src/templates/plugins/externalLinks.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var SafeMarkdown=function(_React$Component){function SafeMarkdown(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SafeMarkdown,_React$Component),SafeMarkdown.prototype.render=function render(){var processor=this.props.openExternalLinksInNewTab?markdownToReactExternalLinks:markdownToReact,rendered=Object(processor.processSync(this.props.markdown).result),markdownProps={};return this.props.className&&(markdownProps.className=this.props.className),rendered&&"div"===rendered.type&&!Object.keys(markdownProps).length?rendered:_react.default.createElement("div",markdownProps,rendered)},SafeMarkdown}(_react.default.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SafeMarkdown,"propTypes",{markdown:_propTypes.default.string.isRequired,openExternalLinksInNewTab:_propTypes.default.bool,className:_propTypes.default.string});var schema=Object.assign({},_github.default);schema.attributes.img.push("height","width"),schema.tagNames.push("span"),schema.attributes.span=["dataUrl","className"],schema.attributes["*"].push("style","className"),schema.attributes.b=["dataId"],schema.clobber=[];var blocklyTags=["block","functional_input","mutation","next","statement","title","field","value","xml"];schema.tagNames=schema.tagNames.concat(blocklyTags);var blocklyComponentWrappers={};blocklyTags.forEach((function(tag){schema.attributes[tag]=["block_text","id","inline","name","type"],blocklyComponentWrappers[tag]=function(props){var BlocklyElement=tag;return _react.default.createElement(BlocklyElement,_extends({is:tag},props))}}));var markdownToReact=(0,_unified.default)().use(_redactableMarkdown.default.getParser()).use([_remarkPlugins.clickableText,_remarkPlugins.expandableImages,_remarkPlugins.visualCodeBlock,_remarkPlugins.xmlAsTopLevelBlock,_remarkPlugins.details]).use(_remarkRehype.default,{allowDangerousHtml:!0}).use(_rehypeRaw.default).use(_rehypeSanitize.default,schema).use(_rehypeReact.default,{createElement:_react.default.createElement,components:blocklyComponentWrappers}),markdownToReactExternalLinks=markdownToReact().use(_externalLinks.default,{links:"all"});exports.default=SafeMarkdown;module.exports=exports.default},"./src/templates/manageStudents/ConfirmRemoveStudentDialog.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.MINIMUM_TEST_PROPS=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_urlHelpers=__webpack_require__("./src/lib/util/urlHelpers.js"),_SafeMarkdown=_interopRequireDefault(__webpack_require__("./src/templates/SafeMarkdown.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_SystemDialog=__webpack_require__("./src/sharedComponents/SystemDialog/SystemDialog.jsx"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_BaseDialog=_interopRequireDefault(__webpack_require__("./src/templates/BaseDialog.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.MINIMUM_TEST_PROPS={isOpen:!0,studentName:"Clark Kent",onConfirm:function onConfirm(){},onCancel:function onCancel(){}};var propsFromBaseDialog=["isOpen","hideBackdrop"];_defineProperty(exports.default=function(_React$Component){function ConfirmRemoveStudentDialog(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ConfirmRemoveStudentDialog,_React$Component);var _proto=ConfirmRemoveStudentDialog.prototype;return _proto.headerText=function headerText(){var _this$props=this.props,studentName=_this$props.studentName;return _this$props.hasEverSignedIn?_locale.default.removeStudentAndRecordsHeader({studentName}):_locale.default.removeUnusedStudentHeader({studentName})},_proto.render=function render(){var _this$props2=this.props,disabled=_this$props2.disabled,hasEverSignedIn=_this$props2.hasEverSignedIn,dependsOnThisSectionForLogin=_this$props2.dependsOnThisSectionForLogin,onConfirm=_this$props2.onConfirm,onCancel=_this$props2.onCancel;return _react.default.createElement(_BaseDialog.default,_extends({},_lodash.default.pick(this.props,propsFromBaseDialog),{useUpdatedStyles:!0,handleClose:onCancel}),_react.default.createElement("div",{style:styles.container},_react.default.createElement(_SystemDialog.Header,{text:this.headerText(),hideBorder:!hasEverSignedIn}),hasEverSignedIn&&_react.default.createElement("div",null,_react.default.createElement(_SafeMarkdown.default,{markdown:_locale.default.removeStudentBody1()}),_react.default.createElement("p",null,_react.default.createElement("a",{href:_urlHelpers.RELEASE_OR_DELETE_RECORDS_EXPLANATION,target:"_blank",rel:"noopener noreferrer"},_locale.default.learnMore())),dependsOnThisSectionForLogin&&_react.default.createElement("div",null,_react.default.createElement("p",null,_locale.default.removeStudentBody2()),_react.default.createElement(_Button.default,{__useDeprecatedTag:!0,text:_locale.default.removeStudentSendHomeInstructions(),target:"_blank",rel:"noopener noreferrer",href:_urlHelpers.ADD_A_PERSONAL_LOGIN_HELP_URL,color:_Button.default.ButtonColor.blue,size:_Button.default.ButtonSize.large,style:styles.sendHomeInstructionsButton,tabIndex:"1"}))),_react.default.createElement(_SystemDialog.ConfirmCancelFooter,{confirmText:_locale.default.removeStudent(),confirmColor:_Button.default.ButtonColor.red,onConfirm,onCancel,disableConfirm:!!disabled,disableCancel:!!disabled,tabIndex:"1"})))},ConfirmRemoveStudentDialog}(_react.default.Component),"propTypes",_objectSpread(_objectSpread({},_lodash.default.pick(_BaseDialog.default.propTypes,propsFromBaseDialog)),{},{disabled:_propTypes.default.bool,studentName:_propTypes.default.string.isRequired,hasEverSignedIn:_propTypes.default.bool,dependsOnThisSectionForLogin:_propTypes.default.bool,onConfirm:_propTypes.default.func.isRequired,onCancel:_propTypes.default.func.isRequired}));var styles={container:{margin:20,color:_color.default.charcoal},sendHomeInstructionsButton:{display:"block",textAlign:"center",marginBottom:"1em"}}},"./src/templates/plugins/externalLinks.js":(__unused_webpack_module,exports)=>{"use strict";function isExternalLink(url){return!/https?:\/\/([^.]+\.)*code.org(:[0-9]+)?\//.test(function fullyQualified(path){return(a=a||document.createElement("a")).href=path,a.href}(url))}var a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function externalLinks(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},tokenizers=this.Parser.prototype.inlineTokenizers,original=tokenizers.link,all="all"===options.links;tokenizers.link=function(eat,value,silent){var link=original.call(this,eat,value,silent);if(link&&"link"===link.type&&(all||isExternalLink(link.url))){link.data=link.data||{},link.data.hProperties=link.data.hProperties||{};var props=link.data.hProperties;props.target=props.target||"_blank",props.rel="noreferrer noopener"}return link},tokenizers.link.locator=original.locator},exports.isExternalLink=isExternalLink},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/manageStudents/ConfirmRemoveStudentDialog.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.SectionSignedInStudent=exports.NeverSignedInStudent=exports.EverSignedInStudent=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_ConfirmRemoveStudentDialog=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/manageStudents/ConfirmRemoveStudentDialog.jsx"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}exports.default={title:"ManageStudents/ConfirmRemoveStudentsDialog",component:_ConfirmRemoveStudentDialog.default};var Template=function Template(args){return _react.default.createElement(_ConfirmRemoveStudentDialog.default,_extends({},_ConfirmRemoveStudentDialog.MINIMUM_TEST_PROPS,{hideBackdrop:!0},args))};(exports.NeverSignedInStudent=Template.bind({})).args={hasEverSignedIn:!1},(exports.EverSignedInStudent=Template.bind({})).args={hasEverSignedIn:!0},(exports.SectionSignedInStudent=Template.bind({})).args={hasEverSignedIn:!0,dependsOnThisSectionForLogin:!0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLW1hbmFnZVN0dWRlbnRzLUNvbmZpcm1SZW1vdmVTdHVkZW50RGlhbG9nLXN0b3J5LmVmNmI2ODQwLmlmcmFtZS5idW5kbGUuanMiLCJtYXBwaW5ncyI6IjtpWEFZTyxTQUFTQSxRQUFRQyxhQUN0QixHQUFJQyxPQUFPQyxXQUFhRCxPQUFPQyxVQUFVQyxhQUN2QyxPQUFPRixPQUFPQyxVQUFVQyxhQUFlSCxZQUV6QyxPQUFPQSxXQUNULDJCQVFPLFNBQVNJLGlCQUFpQkMsUUFDL0JKLE9BQU9DLFVBQVlELE9BQU9DLFdBQWEsQ0FBQyxFQUN4Q0QsT0FBT0MsVUFBVUMsYUFBZUUsTUFDbEMsMEJBd0JPLFNBQVNDLGdCQUFnQkQsUUFDOUJKLE9BQU9GLFFBQVVFLE9BQU9GLFNBQVcsQ0FBQyxFQUNwQ0UsT0FBT0YsUUFBUVEsV0FBYUYsTUFDOUIsaUJBaEJPLFNBQVNHLE9BQU9SLGFBQ3JCLEdBQUlDLE9BQU9GLFNBQVdFLE9BQU9GLFFBQVFRLFdBQ25DLE9BQU9OLE9BQU9GLFFBQVFRLFdBQWFQLFlBRXJDLE9BQU9BLFdBQ1QsRUE1Q0EsSUFBQVMsUUFBQUMsdUJBQUFDLG9CQUFBLHlDQUNBQyxRQUFBRix1QkFBQUMsb0JBQUEsb0NBQXVCLFNBQUFELHVCQUFBRyxLQUFBLE9BQUFBLEtBQUFBLElBQUFDLFdBQUFELElBQUEsU0FBQUEsSUFBQSxVQUFBRSxlQUFBQyxJQUFBQyxHQUFBLGdCQUFBQyxnQkFBQUYsS0FBQSxHQUFBRyxNQUFBQyxRQUFBSixLQUFBLE9BQUFBLEdBQUEsQ0FBQUUsQ0FBQUYsTUFBQSxTQUFBSyxzQkFBQUMsRUFBQUMsR0FBQSxJQUFBQyxFQUFBLE1BQUFGLEVBQUEseUJBQUFHLFFBQUFILEVBQUFHLE9BQUFDLFdBQUFKLEVBQUEsdUJBQUFFLEVBQUEsS0FBQUcsRUFBQUMsRUFBQVgsRUFBQVksRUFBQUMsRUFBQSxHQUFBQyxHQUFBLEVBQUFDLEdBQUEsU0FBQWYsR0FBQU8sRUFBQUEsRUFBQVMsS0FBQVgsSUFBQVksS0FB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Y0FBQ3dXLDRCQUFBLFFBQTBCck0sU0FBQSxHQUNyQitNLDRCQUFBQSxtQkFBa0IsQ0FDdEJqUSxjQUFjLEdBQ1Z4QixNQUNKLEdBRzZCckosUUFBQUEscUJBQUc2YSxTQUFTcFosS0FBSyxDQUFDLElBQzlCNEgsS0FBTyxDQUMxQitILGlCQUFpQixJQUdhcFIsUUFBQUEsb0JBQUc2YSxTQUFTcFosS0FBSyxDQUFDLElBQzlCNEgsS0FBTyxDQUN6QitILGlCQUFpQixJQUdnQnBSLFFBQUFBLHVCQUFHNmEsU0FBU3BaLEtBQUssQ0FBQyxJQUM5QjRILEtBQU8sQ0FDNUIrSCxpQkFBaUIsRUFDakJJLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy9saWIvdXRpbC91cmxIZWxwZXJzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy9zaGFyZWRDb21wb25lbnRzL1N5c3RlbURpYWxvZy9Db25maXJtQ2FuY2VsRm9vdGVyLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvc2hhcmVkQ29tcG9uZW50cy9TeXN0ZW1EaWFsb2cvRmllbGQuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy9zaGFyZWRDb21wb25lbnRzL1N5c3RlbURpYWxvZy9IZWFkZXIuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy9zaGFyZWRDb21wb25lbnRzL1N5c3RlbURpYWxvZy9TeXN0ZW1EaWFsb2cuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvQmFzZURpYWxvZy5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9TYWZlTWFya2Rvd24uanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvbWFuYWdlU3R1ZGVudHMvQ29uZmlybVJlbW92ZVN0dWRlbnREaWFsb2cuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcGx1Z2lucy9leHRlcm5hbExpbmtzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvbWFuYWdlU3R1ZGVudHMvQ29uZmlybVJlbW92ZVN0dWRlbnREaWFsb2cuc3RvcnkuanN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG4vKipcbiAqIEF0dGVtcHQgdG8gY29uc3RydWN0IGFuIGFic29sdXRlIFBlZ2FzdXMgdXJsICh0aGF0IGlzLFxuICogc3RhcnRpbmcgd2l0aCBodHRwczovL2NvZGUub3JnIG9yIHRoZSBhcHByb3ByaWF0ZVxuICogZXF1aXZhbGVudCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQpIGZyb20gYSBnaXZlblxuICogcmVsYXRpdmUgdXJsLiAgSWYgd2UncmUgYWxyZWFkeSBvbiBwZWdhc3VzIHdlJ2xsXG4gKiBqdXN0IHJldHVybiB0aGUgcmVsYXRpdmUgdXJsLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVXJsIC0gc2hvdWxkIHN0YXJ0IHdpdGggYVxuICogICBsZWFkaW5nIHNsYXNoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVnYXN1cyhyZWxhdGl2ZVVybCkge1xuICBpZiAod2luZG93LmRhc2hib2FyZCAmJiB3aW5kb3cuZGFzaGJvYXJkLkNPREVfT1JHX1VSTCkge1xuICAgIHJldHVybiB3aW5kb3cuZGFzaGJvYXJkLkNPREVfT1JHX1VSTCArIHJlbGF0aXZlVXJsO1xuICB9XG4gIHJldHVybiByZWxhdGl2ZVVybDtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBnbG9iYWwgVVJMIHByZWZpeCBmb3IgcGVnYXN1c1xuICogKGUuZy4gXCJodHRwczovL2NvZGUub3JnXCIpIGFsbG93aW5nIHRoZSBwZWdhc3VzKClcbiAqIG1ldGhvZCBhYm92ZSB0byBnZW5lcmF0ZSBhYnNvbHV0ZSBVUkxzLlxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UGVnYXN1c09yaWdpbihvcmlnaW4pIHtcbiAgd2luZG93LmRhc2hib2FyZCA9IHdpbmRvdy5kYXNoYm9hcmQgfHwge307XG4gIHdpbmRvdy5kYXNoYm9hcmQuQ09ERV9PUkdfVVJMID0gb3JpZ2luO1xufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY29uc3RydWN0IGFuIGFic29sdXRlIFN0dWRpbyB1cmwgKHRoYXQgaXMsXG4gKiBzdGFydGluZyB3aXRoIGh0dHBzOi8vc3R1ZGlvLmNvZGUub3JnIG9yIHRoZSBhcHByb3ByaWF0ZVxuICogZXF1aXZhbGVudCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQpIGZyb20gYSBnaXZlblxuICogcmVsYXRpdmUgdXJsLiAgSWYgd2UncmUgYWxyZWFkeSBvbiBkYXNoYm9hcmQgd2UnbGxcbiAqIGp1c3QgcmV0dXJuIHRoZSByZWxhdGl2ZSB1cmwuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVcmwgLSBzaG91bGQgc3RhcnQgd2l0aCBhXG4gKiAgIGxlYWRpbmcgc2xhc2guXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHVkaW8ocmVsYXRpdmVVcmwpIHtcbiAgaWYgKHdpbmRvdy5wZWdhc3VzICYmIHdpbmRvdy5wZWdhc3VzLlNUVURJT19VUkwpIHtcbiAgICByZXR1cm4gd2luZG93LnBlZ2FzdXMuU1RVRElPX1VSTCArIHJlbGF0aXZlVXJsO1xuICB9XG4gIHJldHVybiByZWxhdGl2ZVVybDtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBnbG9iYWwgVVJMIHByZWZpeCBmb3IgY29kZSBzdHVkaW9cbiAqIChlLmcuIFwiaHR0cHM6Ly9zdHVkaW8uY29kZS5vcmdcIikgYWxsb3dpbmcgdGhlIHN0dWRpbygpXG4gKiBtZXRob2QgYWJvdmUgdG8gZ2VuZXJhdGUgYWJzb2x1dGUgVVJMcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFN0dWRpb09yaWdpbihvcmlnaW4pIHtcbiAgd2luZG93LnBlZ2FzdXMgPSB3aW5kb3cucGVnYXN1cyB8fCB7fTtcbiAgd2luZG93LnBlZ2FzdXMuU1RVRElPX1VSTCA9IG9yaWdpbjtcbn1cblxuLyoqXG4gKiBGZXRjaCB0aGUgbWV0YSBkZXNjcmlwdGlvbiB0YWcgZnJvbSB0aGUgc3BlY2lmaWVkIHVybFxuICogTWVtb2l6ZSBzbyB0aGF0IHdlIG9ubHkgcmVxdWVzdCBvbmNlIHBlciByZWxhdGl2ZSB1cmwuXG4gKi9cbmV4cG9ydCBjb25zdCBtZXRhVGFnRGVzY3JpcHRpb24gPSBfLm1lbW9pemUocmVsYXRpdmVVcmwgPT4ge1xuICByZXR1cm4gZmV0Y2gocmVsYXRpdmVVcmwpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gUHJvbWlzZS5hbGwoW3Jlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudGV4dCgpXSkpXG4gICAgLnRoZW4oKFtzdGF0dXMsIHRleHRdKSA9PiB7XG4gICAgICAvLyBDYXRjaCBmZXRjaCdzIDQwMCBlcnJvcnNcbiAgICAgIGlmIChzdGF0dXMgPCAyMDAgfHwgc3RhdHVzID49IDMwMCkge1xuICAgICAgICByZXR1cm4gcmVsYXRpdmVVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtZXRhVGFnID0gJCh0ZXh0KVxuICAgICAgICAgIC5maWx0ZXIoXCJtZXRhW25hbWU9J2Rlc2NyaXB0aW9uJ11cIilcbiAgICAgICAgICAuYXR0cignY29udGVudCcpO1xuICAgICAgICAvLyBSZXR1cm4gdXJsIGlmIHRoZXJlIHdhcyBubyBkZXNjcmlwdGlvbiBtZXRhIHRhZ1xuICAgICAgICByZXR1cm4gbWV0YVRhZyB8fCByZWxhdGl2ZVVybDtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiByZWxhdGl2ZVVybCk7XG59KTtcblxuZXhwb3J0IGNvbnN0IEFERF9BX1BFUlNPTkFMX0xPR0lOX0hFTFBfVVJMID1cbiAgJ2h0dHBzOi8vc3VwcG9ydC5jb2RlLm9yZy9oYy9lbi11cy9hcnRpY2xlcy8xMTUwMDE0NzUxMzEtQWRkaW5nLWEtcGVyc29uYWwtbG9naW4tdG8tYS10ZWFjaGVyLWNyZWF0ZWQtYWNjb3VudCc7XG5leHBvcnQgY29uc3QgUkVMRUFTRV9PUl9ERUxFVEVfUkVDT1JEU19FWFBMQU5BVElPTiA9XG4gICdodHRwczovL3N1cHBvcnQuY29kZS5vcmcvaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDE1OTgzNjMxJztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BjZG8vYXBwcy9sZWdhY3lTaGFyZWRDb21wb25lbnRzL0J1dHRvbic7XG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuaW1wb3J0IGkxOG4gZnJvbSAnQGNkby9sb2NhbGUnO1xuXG4vKipcbiAqIEZvb3RlciBmb3IgYSBcIlN5c3RlbVwiIGRpYWxvZyBzdHlsZSB1c2VkIG9uIGFjY291bnQgcGFnZXMuXG4gKiBBbHdheXMgaGFzIGFuIE9LIGJ1dHRvbiBhbmQgYSBDYW5jZWwgYnV0dG9uIChPSyB0ZXh0IGNhbiBiZSBjdXN0b21pemVkKS5cbiAqIEJ1dHRvbnMgY2FuIGJlIGRpc2FibGVkLlxuICogQW55IGNoaWxkcmVuIGFyZSByZW5kZXJlZCBpbiBhIG1lc3NhZ2UgYXJlYSB0byB0aGUgbGVmdCBvZiB0aGUgT0sgYnV0dG9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25maXJtQ2FuY2VsRm9vdGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkNvbmZpcm06IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlybVRleHQ6IEJ1dHRvbi5wcm9wVHlwZXMudGV4dCxcbiAgICBjYW5jZWxUZXh0OiBCdXR0b24ucHJvcFR5cGVzLnRleHQsXG4gICAgY29uZmlybUNvbG9yOiBCdXR0b24ucHJvcFR5cGVzLmNvbG9yLmlzUmVxdWlyZWQsXG4gICAgY2FuY2VsQ29sb3I6IEJ1dHRvbi5wcm9wVHlwZXMuY29sb3IuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlQ29uZmlybTogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZUNhbmNlbDogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGNvbmZpcm1UZXh0OiBpMThuLmRpYWxvZ09LKCksXG4gICAgY2FuY2VsVGV4dDogaTE4bi5jYW5jZWwoKSxcbiAgICBjb25maXJtQ29sb3I6IEJ1dHRvbi5CdXR0b25Db2xvci5icmFuZFNlY29uZGFyeURlZmF1bHQsXG4gICAgY2FuY2VsQ29sb3I6IEJ1dHRvbi5CdXR0b25Db2xvci5ncmF5LFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBvbkNvbmZpcm0sXG4gICAgICBvbkNhbmNlbCxcbiAgICAgIGNvbmZpcm1UZXh0LFxuICAgICAgY2FuY2VsVGV4dCxcbiAgICAgIGNvbmZpcm1Db2xvcixcbiAgICAgIGNhbmNlbENvbG9yLFxuICAgICAgZGlzYWJsZUNvbmZpcm0sXG4gICAgICBkaXNhYmxlQ2FuY2VsLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICBjaGlsZHJlbixcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGV9PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgX191c2VEZXByZWNhdGVkVGFnXG4gICAgICAgICAgb25DbGljaz17b25Db25maXJtfVxuICAgICAgICAgIHRleHQ9e2NvbmZpcm1UZXh0fVxuICAgICAgICAgIGNvbG9yPXtjb25maXJtQ29sb3J9XG4gICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVDb25maXJtfVxuICAgICAgICAgIHRhYkluZGV4PXt0YWJJbmRleH1cbiAgICAgICAgICBzdHlsZT17YnV0dG9uU3R5bGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxzcGFuIHN0eWxlPXttZXNzYWdlU3R5bGV9PntjaGlsZHJlbn08L3NwYW4+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBfX3VzZURlcHJlY2F0ZWRUYWdcbiAgICAgICAgICBvbkNsaWNrPXtvbkNhbmNlbH1cbiAgICAgICAgICB0ZXh0PXtjYW5jZWxUZXh0fVxuICAgICAgICAgIGNvbG9yPXtjYW5jZWxDb2xvcn1cbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZUNhbmNlbH1cbiAgICAgICAgICB0YWJJbmRleD17dGFiSW5kZXh9XG4gICAgICAgICAgc3R5bGU9e2J1dHRvblN0eWxlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZSA9IHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnLFxuICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYm9yZGVyQ29sb3I6IGNvbG9yLmxpZ2h0ZXJfZ3JheSxcbiAgYm9yZGVyVG9wV2lkdGg6IDEsXG4gIGJvcmRlckJvdHRvbVdpZHRoOiAwLFxuICBib3JkZXJSaWdodFdpZHRoOiAwLFxuICBib3JkZXJMZWZ0V2lkdGg6IDAsXG4gIHBhZGRpbmdUb3A6IDEwLFxuICBtYXJnaW5Ub3A6IDEwLFxufTtcblxuY29uc3QgbWVzc2FnZVN0eWxlID0ge1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgbGluZUhlaWdodDogJzM0cHgnLFxuICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICBtYXJnaW5MZWZ0OiAnMWVtJyxcbiAgbWFyZ2luUmlnaHQ6ICcxZW0nLFxuICBmbGV4R3JvdzogMSxcbn07XG5cbmNvbnN0IGJ1dHRvblN0eWxlID0ge1xuICBmbGV4U2hyaW5rOiAwLFxufTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuXG5pbXBvcnQge2NyZWF0ZVV1aWR9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBGaWVsZCB3cmFwcGVyIGZvciBhIFwiU3lzdGVtXCIgZGlhbG9nIHN0eWxlLlxuICpcbiAqIENhbiBiZSBnaXZlbiBhbnkgKG9yIG5vbmUpIG9mIGEgbGFiZWwsIGxhYmVsRGV0YWlscywgYW5kL29yIGVycm9yIC0gYWxsXG4gKiBwbGFpbiB0ZXh0LiAgVGhleSdsbCBiZSBmb3JtYXR0ZWQgcHJvcGVybHkgYW5kIHdyYXAgdGhlIGZpZWxkIGFzIG5lZWRlZC5cbiAqIFRha2VzIGEgc2luZ2xlIGNoaWxkLCB3aGljaCBzaG91bGQgYmUgYSBmb3JtIGNvbnRyb2xcbiAqIFdpbGwgYXV0b21hdGljYWxseSBzZXQgYW4gaWQgb24gdGhlIGlucHV0IGVsZW1lbnQgdG8gYmluZCB0aGUgbGFiZWwgdG8gaXRcbiAqIHByb3Blcmx5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFiZWxEZXRhaWxzOiBQcm9wVHlwZXMubm9kZSxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmFueSxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnVuaXF1ZUlkID0gY3JlYXRlVXVpZCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtsYWJlbCwgbGFiZWxEZXRhaWxzLCBlcnJvciwgY2hpbGRyZW4sIHN0eWxlfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDE1LFxuICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7KGxhYmVsIHx8IGxhYmVsRGV0YWlscykgJiYgKFxuICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgaHRtbEZvcj17dGhpcy51bmlxdWVJZH1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgIGNvbG9yOiBjb2xvci5jaGFyY29hbCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xhYmVsICYmIChcbiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3tmb250V2VpZ2h0OiAnYm9sZCcsIG1hcmdpblJpZ2h0OiAnMWVtJ319PlxuICAgICAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtsYWJlbERldGFpbHMgJiYgPHNwYW4+e2xhYmVsRGV0YWlsc308L3NwYW4+fVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICl9XG4gICAgICAgIHtSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtpZDogdGhpcy51bmlxdWVJZH0pfVxuICAgICAgICB7ZXJyb3IgJiYgPEZpZWxkRXJyb3I+e2Vycm9yfTwvRmllbGRFcnJvcj59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IEZpZWxkRXJyb3IgPSAoe2NoaWxkcmVufSkgPT4gKFxuICA8ZGl2XG4gICAgc3R5bGU9e3tcbiAgICAgIGNvbG9yOiBjb2xvci5yZWQsXG4gICAgICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICAgIH19XG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcbkZpZWxkRXJyb3IucHJvcFR5cGVzID0ge2NoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nfTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgZm9udENvbnN0YW50cyBmcm9tICdAY2RvL2FwcHMvZm9udENvbnN0YW50cyc7XG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuXG4vKipcbiAqIEhlYWRlciBmb3IgYSBcIlN5c3RlbVwiIGRpYWxvZyBzdHlsZSB1c2VkIG9uIGFjY291bnQgcGFnZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGhpZGVCb3JkZXI6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0ge1xuICAgICAgLi4uc3R5bGUsXG4gICAgICAuLi4odGhpcy5wcm9wcy5oaWRlQm9yZGVyICYmIHtcbiAgICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDUsXG4gICAgICB9KSxcbiAgICB9O1xuICAgIHJldHVybiA8aDEgc3R5bGU9e2NvbXB1dGVkU3R5bGV9Pnt0aGlzLnByb3BzLnRleHR9PC9oMT47XG4gIH1cbn1cblxuY29uc3Qgc3R5bGUgPSB7XG4gIGZvbnRTaXplOiAxNixcbiAgbGluZUhlaWdodDogJzIwcHgnLFxuICBjb2xvcjogY29sb3IuY2hhcmNvYWwsXG4gIC4uLmZvbnRDb25zdGFudHNbJ21haW4tZm9udC1zZW1pLWJvbGQnXSxcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIGJvcmRlckNvbG9yOiBjb2xvci5saWdodGVyX2dyYXksXG4gIGJvcmRlclRvcFdpZHRoOiAwLFxuICBib3JkZXJCb3R0b21XaWR0aDogMSxcbiAgYm9yZGVyUmlnaHRXaWR0aDogMCxcbiAgYm9yZGVyTGVmdFdpZHRoOiAwLFxuICBwYWRkaW5nQm90dG9tOiAxMCxcbiAgcGFkZGluZ1RvcDogMCxcbiAgcGFkZGluZ0xlZnQ6IDAsXG4gIHBhZGRpbmdSaWdodDogMCxcbiAgbWFyZ2luQm90dG9tOiAxMCxcbiAgbWFyZ2luVG9wOiAxMCxcbn07XG4iLCJpbXBvcnQgQ29uZmlybUNhbmNlbEZvb3RlciBmcm9tICcuL0NvbmZpcm1DYW5jZWxGb290ZXInO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlcic7XG5leHBvcnQge0hlYWRlciwgRmllbGQsIENvbmZpcm1DYW5jZWxGb290ZXJ9O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnQGNkby9hcHBzL2xlZ2FjeVNoYXJlZENvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcblxuaW1wb3J0IHtCQVNFX0RJQUxPR19XSURUSH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBjb2xvciBmcm9tICcuLi91dGlsL2NvbG9yJztcblxuLyoqXG4gKiBCYXNlRGlhbG9nXG4gKiBBIGdlbmVyaWMgbW9kYWwgZGlhbG9nIHRoYXQgaGFzIGFuIHgtY2xvc2UgaW4gdGhlIHVwcGVyIHJpZ2h0LCBhbmQgYVxuICogc2VtaS10cmFuc3BhcmVudCBiYWNrZHJvcC4gQ2FuIGJlIGNsb3NlZCBieSBjbGlja2luZyB0aGUgeCwgY2xpY2tpbmcgdGhlXG4gKiBiYWNrZHJvcCwgb3IgcHJlc3NpbmcgZXNjLlxuICpcbiAqIFRvIHVzZSBhIHN0eWxlZCB2ZXJzaW9uIG9mIHRoaXMgY29tcG9uZW50IHRoYXQgZm9sbG93cyBvdXIgc3R5bGUgZ3VpZGUsXG4gKiB1c2UgU3R5bGl6ZWRCYXNlRGlhbG9nLmpzeC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZURpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYW5kbGVDbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdW5jbG9zZWFibGU6IFByb3BUeXBlcy5ib29sLFxuICAgIGhpZGVDbG9zZUJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLy8gRm9yIHVzZSBpbiByZWFjdC1zdG9yeWJvb2s7IGFsbG93cyByZW5kZXJpbmcgZGlhbG9nIGlubGluZSBpbiBzdG9yeSB0YWJsZXMuXG4gICAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAgIGZ1bGxIZWlnaHQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHVzZVVwZGF0ZWRTdHlsZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIG5vTW9kYWxTdHlsZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmaXhlZFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGZpeGVkSGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHVzZUZsZXhib3g6IFByb3BUeXBlcy5ib29sLFxuICAgIGJvZHlJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBib2R5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNvdW5kUGxheWVyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG92ZXJmbG93OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8vIFRlbXBvcmFyeSBwcm9wIHVudGlsIEFuaW1hdGlvblBpY2tlckJvZHkgaXMgcmVkZXNpZ25lZFxuICAgIGJhY2tkcm9wU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5mb2N1c0RpYWxvZygpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuZm9jdXNEaWFsb2coKTtcbiAgfVxuXG4gIGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVLZXlEb3duICYmIHRoaXMucHJvcHMuaGFuZGxlS2V5RG93bihldmVudCk7XG4gIH07XG5cbiAgY2xvc2VEaWFsb2cgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnVuY2xvc2VhYmxlICYmIHRoaXMucHJvcHMuaGFuZGxlQ2xvc2UpIHtcbiAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2xvc2UoKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLnNvdW5kUGxheWVyKSB7XG4gICAgICAgIHRoaXMucHJvcHMuc291bmRQbGF5ZXIuc3RvcEFsbEF1ZGlvKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKiBAcmV0dXJucyB7QXJyYXkuPEVsZW1lbnQ+fSAqL1xuICBnZXRUYWJiYWJsZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKHRoaXMucmVmcy5kaWFsb2cucXVlcnlTZWxlY3RvckFsbCgnYSxidXR0b24saW5wdXQnKSk7XG4gIH1cblxuICBmb2N1c0RpYWxvZygpIHtcbiAgICAvLyBEb24ndCBzdGVhbCBmb2N1cyBpZiB0aGUgYWN0aXZlIGVsZW1lbnQgaXMgYWxyZWFkeSBhIGRlc2NlbmRhbnQgb2YgdGhlXG4gICAgLy8gZGlhbG9nIC0gcHJldmVudHMgZm9jdXMgbG9zcyBvbiB1cGRhdGVzIG9mIG9wZW4gQmFzZURpYWxvZyBjb21wb25lbnRzLlxuICAgIGNvbnN0IGRlc2NlbmRhbnRJc0FjdGl2ZSA9XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG4gICAgICB0aGlzLnJlZnMuZGlhbG9nICYmXG4gICAgICB0aGlzLnJlZnMuZGlhbG9nLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgIGlmICh0aGlzLnByb3BzLmlzT3BlbiAmJiAhZGVzY2VuZGFudElzQWN0aXZlKSB7XG4gICAgICB0aGlzLnJlZnMuZGlhbG9nLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5pc09wZW4gJiYgIXRoaXMucHJvcHMuaGlkZUJhY2tkcm9wKSB7XG4gICAgICByZXR1cm4gPGRpdiAvPjtcbiAgICB9XG5cbiAgICBsZXQgYm9keVN0eWxlLCBtb2RhbEJvZHlTdHlsZSwgeENsb3NlU3R5bGU7XG4gICAgaWYgKHRoaXMucHJvcHMuZnVsbFdpZHRoKSB7XG4gICAgICBib2R5U3R5bGUgPSB7XG4gICAgICAgIC4uLmJvZHlTdHlsZSxcbiAgICAgICAgd2lkdGg6ICc5MCUnLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnLTQ1JScsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5mdWxsSGVpZ2h0KSB7XG4gICAgICBib2R5U3R5bGUgPSB7XG4gICAgICAgIC4uLmJvZHlTdHlsZSxcbiAgICAgICAgaGVpZ2h0OiAnODAlJyxcbiAgICAgIH07XG4gICAgICBtb2RhbEJvZHlTdHlsZSA9IHtcbiAgICAgICAgLi4ubW9kYWxCb2R5U3R5bGUsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgd3JhcHBlckNsYXNzTmFtZXMgPSAnJztcbiAgICBsZXQgbW9kYWxDbGFzc05hbWVzID0gJ21vZGFsJztcbiAgICBsZXQgbW9kYWxCb2R5Q2xhc3NOYW1lcyA9ICdtb2RhbC1ib2R5JztcbiAgICBsZXQgbW9kYWxCYWNrZHJvcENsYXNzTmFtZXMgPSAnbW9kYWwtYmFja2Ryb3AnO1xuICAgIGNvbnN0IG92ZXJmbG93WCA9IHRoaXMucHJvcHMub3ZlcmZsb3cgfHwgJ2hpZGRlbic7XG4gICAgY29uc3Qgb3ZlcmZsb3dZID1cbiAgICAgIHRoaXMucHJvcHMub3ZlcmZsb3cgfHxcbiAgICAgICh0aGlzLnByb3BzLmZpeGVkSGVpZ2h0IHx8IHRoaXMucHJvcHMuZnVsbEhlaWdodCA/ICdoaWRkZW4nIDogJ2F1dG8nKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnVzZVVwZGF0ZWRTdHlsZXMpIHtcbiAgICAgIHdyYXBwZXJDbGFzc05hbWVzID0gJ2Rhc2hib2FyZC1zdHlsZXMnO1xuICAgICAgbW9kYWxCb2R5Q2xhc3NOYW1lcyA9ICcnO1xuICAgICAgbW9kYWxCb2R5U3R5bGUgPSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmZpeGVkSGVpZ2h0LFxuICAgICAgICBtYXhIZWlnaHQ6ICF0aGlzLnByb3BzLmZpeGVkSGVpZ2h0ICYmICc4NXZoJyxcbiAgICAgICAgb3ZlcmZsb3dYOiBvdmVyZmxvd1gsXG4gICAgICAgIG92ZXJmbG93WTogb3ZlcmZsb3dZLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMucHJvcHMudXNlRmxleGJveCkge1xuICAgICAgICBtb2RhbEJvZHlTdHlsZSA9IHtcbiAgICAgICAgICAuLi5tb2RhbEJvZHlTdHlsZSxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBib2R5U3R5bGUgPSB7XG4gICAgICAgIC4uLmJvZHlTdHlsZSxcbiAgICAgICAgd2lkdGg6IHRoaXMucHJvcHMuZml4ZWRXaWR0aCB8fCBCQVNFX0RJQUxPR19XSURUSCxcbiAgICAgICAgbWFyZ2luTGVmdDogLXRoaXMucHJvcHMuZml4ZWRXaWR0aCAvIDIgfHwgLTM1MCxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm5vTW9kYWxTdHlsZXMpIHtcbiAgICAgIG1vZGFsQ2xhc3NOYW1lcyA9ICcnO1xuICAgICAgbW9kYWxCb2R5Q2xhc3NOYW1lcyA9ICcnO1xuICAgIH1cblxuICAgIGJvZHlTdHlsZSA9IHtcbiAgICAgIC4uLmJvZHlTdHlsZSxcbiAgICAgIC4uLih0aGlzLnByb3BzLmhpZGVCYWNrZHJvcCAmJiB7XG4gICAgICAgIHBvc2l0aW9uOiAnaW5pdGlhbCcsXG4gICAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICB9KSxcbiAgICAgIC4uLnRoaXMucHJvcHMuc3R5bGUsXG4gICAgfTtcbiAgICB4Q2xvc2VTdHlsZSA9IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgaW5zZXRJbmxpbmVFbmQ6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgY29sb3I6IGNvbG9yLm5ldXRyYWxfZGFyazMwLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBmb250U2l6ZTogMjQsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICB9O1xuXG4gICAgbW9kYWxCb2R5Q2xhc3NOYW1lcyA9IFttb2RhbEJvZHlDbGFzc05hbWVzLCB0aGlzLnByb3BzLmJvZHlDbGFzc05hbWVdXG4gICAgICAuZmlsdGVyKGNsYXNzTmFtZSA9PiAhIWNsYXNzTmFtZSlcbiAgICAgIC5qb2luKCcgJyk7XG5cbiAgICBsZXQgYm9keSA9IChcbiAgICAgIDxkaXZcbiAgICAgICAgc3R5bGU9e2JvZHlTdHlsZX1cbiAgICAgICAgdGFiSW5kZXg9XCItMVwiXG4gICAgICAgIGNsYXNzTmFtZT17bW9kYWxDbGFzc05hbWVzfVxuICAgICAgICByZWY9XCJkaWFsb2dcIlxuICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlPXttb2RhbEJvZHlTdHlsZX1cbiAgICAgICAgICBpZD17dGhpcy5wcm9wcy5ib2R5SWR9XG4gICAgICAgICAgY2xhc3NOYW1lPXttb2RhbEJvZHlDbGFzc05hbWVzfVxuICAgICAgICA+XG4gICAgICAgICAgeyF0aGlzLnByb3BzLnVuY2xvc2VhYmxlICYmICF0aGlzLnByb3BzLmhpZGVDbG9zZUJ1dHRvbiAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGlkPVwieC1jbG9zZVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuY2xvc2VEaWFsb2d9XG4gICAgICAgICAgICAgIGljb249XCJmYS1zb2xpZCBmYS14bWFya1wiXG4gICAgICAgICAgICAgIHN0eWxlPXt4Q2xvc2VTdHlsZX1cbiAgICAgICAgICAgICAgY29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9e2kxOG4uY2xvc2VEaWFsb2coKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaGlkZUJhY2tkcm9wKSB7XG4gICAgICByZXR1cm4gYm9keTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc05hbWVzfT5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17bW9kYWxCYWNrZHJvcENsYXNzTmFtZXN9XG4gICAgICAgICAgc3R5bGU9e3RoaXMucHJvcHMuYmFja2Ryb3BTdHlsZX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsb3NlRGlhbG9nfVxuICAgICAgICAvPlxuICAgICAgICB7Ym9keX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBQcm9jZXNzb3IgZnJvbSAnQGNvZGUtZG90LW9yZy9yZWRhY3RhYmxlLW1hcmtkb3duJztcbmltcG9ydCB7XG4gIGRldGFpbHMsXG4gIGNsaWNrYWJsZVRleHQsXG4gIGV4cGFuZGFibGVJbWFnZXMsXG4gIHZpc3VhbENvZGVCbG9jayxcbiAgeG1sQXNUb3BMZXZlbEJsb2NrLFxufSBmcm9tICdAY29kZS1kb3Qtb3JnL3JlbWFyay1wbHVnaW5zJztcbmltcG9ydCBkZWZhdWx0U2FuaXRpemF0aW9uU2NoZW1hIGZyb20gJ2hhc3QtdXRpbC1zYW5pdGl6ZS9saWIvZ2l0aHViLmpzb24nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVoeXBlUmF3IGZyb20gJ3JlaHlwZS1yYXcnO1xuaW1wb3J0IHJlaHlwZVJlYWN0IGZyb20gJ3JlaHlwZS1yZWFjdCc7XG5pbXBvcnQgcmVoeXBlU2FuaXRpemUgZnJvbSAncmVoeXBlLXNhbml0aXplJztcbmltcG9ydCByZW1hcmtSZWh5cGUgZnJvbSAncmVtYXJrLXJlaHlwZSc7XG5pbXBvcnQgdW5pZmllZCBmcm9tICd1bmlmaWVkJztcblxuaW1wb3J0IGV4dGVybmFsTGlua3MgZnJvbSAnLi9wbHVnaW5zL2V4dGVybmFsTGlua3MnO1xuXG4vKipcbiAqIEJhc2ljIGNvbXBvbmVudCBmb3IgcmVuZGVyaW5nIGEgbWFya2Rvd24gc3RyaW5nIGFzIEhUTUwsIHdpdGggc2FuaXRpemF0aW9uLlxuICogQ2FuIHNhZmVseSByZW5kZXIgbWFya2Rvd24gZXZlbiBmcm9tIHVudHJ1c3RlZCBzb3VyY2VzLCB3aXRob3V0IHBvdGVudGlhbGx5XG4gKiBleHBvc2luZyB1cyB0byBhbiBYU1MgaW5qZWN0aW9uLlxuICovXG5jbGFzcyBTYWZlTWFya2Rvd24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1hcmtkb3duOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3BlbkV4dGVybmFsTGlua3NJbk5ld1RhYjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBXZSBvbmx5IG9wZW4gZXh0ZXJuYWwgbGlua3MgaW4gYSBuZXcgdGFiIGlmIGl0J3MgZXhwbGljaXRseSBzcGVjaWZpZWRcbiAgICAvLyB0aGF0IHdlIGRvIHNvOyB0aGlzIGlzIGFic29sdXRlbHkgbm90IHNvbWV0aGluZyB3ZSB3YW50IHRvIGRvIGFzIGFcbiAgICAvLyBnZW5lcmFsIHByYWN0aWNlLCBidXQgdW5mb3J0dW5hdGVseSB0aGVyZSBhcmUgc29tZSBzaXR1YXRpb25zIGluIHdoaWNoXG4gICAgLy8gaXQgaXMgY3VycmVudGx5IGEgcmVxdWlyZW1lbnQuXG4gICAgY29uc3QgcHJvY2Vzc29yID0gdGhpcy5wcm9wcy5vcGVuRXh0ZXJuYWxMaW5rc0luTmV3VGFiXG4gICAgICA/IG1hcmtkb3duVG9SZWFjdEV4dGVybmFsTGlua3NcbiAgICAgIDogbWFya2Rvd25Ub1JlYWN0O1xuXG4gICAgY29uc3QgcmVuZGVyZWQgPSBPYmplY3QocHJvY2Vzc29yLnByb2Nlc3NTeW5jKHRoaXMucHJvcHMubWFya2Rvd24pLnJlc3VsdCk7XG5cbiAgICBjb25zdCBtYXJrZG93blByb3BzID0ge307XG4gICAgaWYgKHRoaXMucHJvcHMuY2xhc3NOYW1lKSB7XG4gICAgICBtYXJrZG93blByb3BzLmNsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuICAgIH1cbiAgICAvLyByZWh5cGUtcmVhY3Qgd2lsbCBvbmx5IHdyYXAgdGhlIGNvbXBpbGVkIG1hcmtkb3duIGluIGEgPGRpdj4gdGFnXG4gICAgLy8gaWYgaXQgbmVlZHMgdG8gKGllLCBpZiB0aGVyZSB3b3VsZCBvdGhlcndpc2UgYmUgbXVsdGlwbGUgZWxlbWVudHNcbiAgICAvLyByZXR1cm5lZCkgb3Igd2UncmUgYXNzaWduaW5nIHByb3BzLiBXZSBwcmVmZXIgY29uc2lzdGVuY3kgb3ZlciBmbGV4aWJpbGl0eSxcbiAgICAvLyBzbyBoZXJlIHdlIHdyYXAgdGhlIHJlc3VsdCBpbiBhIGRpdiBpZiBpdCB3YXNuJ3QgYWxyZWFkeVxuICAgIGlmIChcbiAgICAgIHJlbmRlcmVkICYmXG4gICAgICByZW5kZXJlZC50eXBlID09PSAnZGl2JyAmJlxuICAgICAgIU9iamVjdC5rZXlzKG1hcmtkb3duUHJvcHMpLmxlbmd0aFxuICAgICkge1xuICAgICAgcmV0dXJuIHJlbmRlcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gPGRpdiB7Li4ubWFya2Rvd25Qcm9wc30+e3JlbmRlcmVkfTwvZGl2PjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY3JlYXRlIGN1c3RvbSBzYW5pdGl6YXRpb24gc2NoZW1hIGFzIHBlclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N5bnRheC10cmVlL2hhc3QtdXRpbC1zYW5pdGl6ZSNzY2hlbWFcbi8vIHRvIHN1cHBvcnQgb3VyIGN1c3RvbSBzeW50YXhlc1xuY29uc3Qgc2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNhbml0aXphdGlvblNjaGVtYSk7XG5cbi8vIFdlIHVzZSBhIF9sb3RfIG9mIGltYWdlIGZvcm1hdHRpbmcgc3R1ZmYgaW4gb3VyXG4vLyBpbnN0cnVjdGlvbnMsIHBhcnRpY3VsYXJseSBpbiBDU1BcbnNjaGVtYS5hdHRyaWJ1dGVzLmltZy5wdXNoKCdoZWlnaHQnLCAnd2lkdGgnKTtcblxuLy8gQWRkIHN1cHBvcnQgZm9yIGV4cGFuZGFibGVJbWFnZXNcbnNjaGVtYS50YWdOYW1lcy5wdXNoKCdzcGFuJyk7XG5zY2hlbWEuYXR0cmlidXRlcy5zcGFuID0gWydkYXRhVXJsJywgJ2NsYXNzTmFtZSddO1xuXG4vLyBBZGQgc3VwcG9ydCBmb3IgaW5saW5lIHN0eWxlcyAoZ3Jvc3MpXG4vLyBUT0RPIHJlcGxhY2UgYWxsIGlubGluZSBzdHlsZXMgaW4gb3VyIGN1cnJpY3VsdW0gY29udGVudCB3aXRoXG4vLyBzZW1hbnRpY2FsbHktc2lnbmlmaWNhbnQgY29udGVudFxuc2NoZW1hLmF0dHJpYnV0ZXNbJyonXS5wdXNoKCdzdHlsZScsICdjbGFzc05hbWUnKTtcblxuLy8gQ2xpY2thYmxlVGV4dCB1c2VzIGRhdGEtaWQgb24gYSBib2xkIHRhZy5cbnNjaGVtYS5hdHRyaWJ1dGVzWydiJ10gPSBbJ2RhdGFJZCddO1xuXG4vLyBBZGQgc3VwcG9ydCBmb3IgQmxvY2tseSBYTUxcbnNjaGVtYS5jbG9iYmVyID0gW107XG5jb25zdCBibG9ja2x5VGFncyA9IFtcbiAgJ2Jsb2NrJyxcbiAgJ2Z1bmN0aW9uYWxfaW5wdXQnLFxuICAnbXV0YXRpb24nLFxuICAnbmV4dCcsXG4gICdzdGF0ZW1lbnQnLFxuICAndGl0bGUnLFxuICAnZmllbGQnLFxuICAndmFsdWUnLFxuICAneG1sJyxcbl07XG5zY2hlbWEudGFnTmFtZXMgPSBzY2hlbWEudGFnTmFtZXMuY29uY2F0KGJsb2NrbHlUYWdzKTtcbmxldCBibG9ja2x5Q29tcG9uZW50V3JhcHBlcnMgPSB7fTtcbmJsb2NrbHlUYWdzLmZvckVhY2godGFnID0+IHtcbiAgc2NoZW1hLmF0dHJpYnV0ZXNbdGFnXSA9IFsnYmxvY2tfdGV4dCcsICdpZCcsICdpbmxpbmUnLCAnbmFtZScsICd0eXBlJ107XG5cbiAgLy8gQ3JlYXRlIGEgUmVhY3QgY29tcG9uZW50IHRvIHdyYXAgZWFjaCBCbG9ja2x5IHRhZy4gU2luY2UgdGhlc2UgZWxlbWVudHMgdWx0aW1hdGVseVxuICAvLyByZW5kZXIgYXMgUmVhY3QgY29tcG9uZW50cywgY3JlYXRpbmcgYSB3cmFwcGVyIG1ha2VzIHRoZW0gdmFsaWQgKHdoZXJlYXMgPHhtbD5cbiAgLy8gaXMgbm90IGEgdmFsaWQgUmVhY3QgdGFnKS5cbiAgYmxvY2tseUNvbXBvbmVudFdyYXBwZXJzW3RhZ10gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBjb25zdCBCbG9ja2x5RWxlbWVudCA9IHRhZztcbiAgICAvLyBUaGUgXCJpc1wiIGF0dHJpYnV0ZSBwcmV2ZW50cyBSZWFjdCBmcm9tIHdhcm5pbmcgYWJvdXQgdW5yZWNvZ25pemVkIHRhZ3M6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMTE4NCNpc3N1ZWNvbW1lbnQtMzM1OTQyNDM5XG4gICAgcmV0dXJuIDxCbG9ja2x5RWxlbWVudCBpcz17dGFnfSB7Li4ucHJvcHN9IC8+O1xuICB9O1xufSk7XG5jb25zdCBtYXJrZG93blRvUmVhY3QgPSB1bmlmaWVkKClcbiAgLnVzZShQcm9jZXNzb3IuZ2V0UGFyc2VyKCkpXG4gIC8vIGluY2x1ZGUgY3VzdG9tIHBsdWdpbnNcbiAgLnVzZShbXG4gICAgY2xpY2thYmxlVGV4dCxcbiAgICBleHBhbmRhYmxlSW1hZ2VzLFxuICAgIHZpc3VhbENvZGVCbG9jayxcbiAgICB4bWxBc1RvcExldmVsQmxvY2ssXG4gICAgZGV0YWlscyxcbiAgXSlcbiAgLy8gY29udmVydCBtYXJrZG93biB0byBhbiBIVE1MIEFic3RyYWN0IFN5bnRheCBUcmVlIChIQVNUKVxuICAudXNlKHJlbWFya1JlaHlwZSwge1xuICAgIC8vIGluY2x1ZGUgYW55IHJhdyBIVE1MIGluIHRoZSBtYXJrZG93biBhcyByYXcgSFRNTCBub2RlcyBpbiB0aGUgSEFTVFxuICAgIGFsbG93RGFuZ2Vyb3VzSHRtbDogdHJ1ZSxcbiAgfSlcbiAgLy8gcGFyc2UgdGhlIHJhdyBIVE1MIG5vZGVzIGluIHRoZSBIQVNUIHRvIGFjdHVhbCBIQVNUIG5vZGVzXG4gIC51c2UocmVoeXBlUmF3KVxuICAvLyBzYW5pdGl6ZSB0aGUgSEFTVFxuICAudXNlKHJlaHlwZVNhbml0aXplLCBzY2hlbWEpXG4gIC8vIGNvbnZlcnQgdGhlIEhBU1QgdG8gUmVhY3RcbiAgLnVzZShyZWh5cGVSZWFjdCwge1xuICAgIGNyZWF0ZUVsZW1lbnQ6IFJlYWN0LmNyZWF0ZUVsZW1lbnQsXG4gICAgLy8gVXNlIFJlYWN0IGNvbXBvbmVudCB3cmFwcGVycyBmb3IgQmxvY2tseSBYTUwgZWxlbWVudHMgdG8gcHJldmVudFxuICAgIC8vIFJlYWN0IGZyb20gd2FybmluZyB1cyBhYm91dCBpbnZhbGlkIGNvbXBvbmVudHMuXG4gICAgY29tcG9uZW50czogYmxvY2tseUNvbXBvbmVudFdyYXBwZXJzLFxuICB9KTtcblxuY29uc3QgbWFya2Rvd25Ub1JlYWN0RXh0ZXJuYWxMaW5rcyA9IG1hcmtkb3duVG9SZWFjdCgpLnVzZShleHRlcm5hbExpbmtzLCB7XG4gIGxpbmtzOiAnYWxsJyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTYWZlTWFya2Rvd247XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnQGNkby9hcHBzL2xlZ2FjeVNoYXJlZENvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCB7XG4gIEFERF9BX1BFUlNPTkFMX0xPR0lOX0hFTFBfVVJMLFxuICBSRUxFQVNFX09SX0RFTEVURV9SRUNPUkRTX0VYUExBTkFUSU9OLFxufSBmcm9tICdAY2RvL2FwcHMvbGliL3V0aWwvdXJsSGVscGVycyc7XG5pbXBvcnQgU2FmZU1hcmtkb3duIGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvU2FmZU1hcmtkb3duJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcblxuaW1wb3J0IHtcbiAgSGVhZGVyLFxuICBDb25maXJtQ2FuY2VsRm9vdGVyLFxufSBmcm9tICcuLi8uLi9zaGFyZWRDb21wb25lbnRzL1N5c3RlbURpYWxvZy9TeXN0ZW1EaWFsb2cnO1xuaW1wb3J0IGNvbG9yIGZyb20gJy4uLy4uL3V0aWwvY29sb3InO1xuaW1wb3J0IEJhc2VEaWFsb2cgZnJvbSAnLi4vQmFzZURpYWxvZyc7XG5cbi8vIEEgc3R1YiBzZXQgb2Ygb3RoZXJ3aXNlLXJlcXVpcmVkIHByb3BzIGZvciB1c2UgaW4gc3RvcmllcyBhbmQgdW5pdCB0ZXN0cy5cbmV4cG9ydCBjb25zdCBNSU5JTVVNX1RFU1RfUFJPUFMgPSB7XG4gIGlzT3BlbjogdHJ1ZSxcbiAgc3R1ZGVudE5hbWU6ICdDbGFyayBLZW50JyxcbiAgb25Db25maXJtOiAoKSA9PiB7fSxcbiAgb25DYW5jZWw6ICgpID0+IHt9LFxufTtcblxuLy8gVGhpcyBzZXQgb2YgcHJvcHMgd2lsbCBiZSAnaW5oZXJpdGVkJyBmcm9tIEJhc2VEaWFsb2cgYW5kIGF1dG9tYXRpY2FsbHlcbi8vIHBhc3NlZCB0aHJvdWdoIHRvIGl0LlxuY29uc3QgcHJvcHNGcm9tQmFzZURpYWxvZyA9IFsnaXNPcGVuJywgJ2hpZGVCYWNrZHJvcCddO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25maXJtUmVtb3ZlU3R1ZGVudERpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLi4uXy5waWNrKEJhc2VEaWFsb2cucHJvcFR5cGVzLCBwcm9wc0Zyb21CYXNlRGlhbG9nKSxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R1ZGVudE5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBoYXNFdmVyU2lnbmVkSW46IFByb3BUeXBlcy5ib29sLFxuICAgIGRlcGVuZHNPblRoaXNTZWN0aW9uRm9yTG9naW46IFByb3BUeXBlcy5ib29sLFxuICAgIG9uQ29uZmlybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBoZWFkZXJUZXh0KCkge1xuICAgIGNvbnN0IHtzdHVkZW50TmFtZSwgaGFzRXZlclNpZ25lZElufSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGhhc0V2ZXJTaWduZWRJblxuICAgICAgPyBpMThuLnJlbW92ZVN0dWRlbnRBbmRSZWNvcmRzSGVhZGVyKHtzdHVkZW50TmFtZX0pXG4gICAgICA6IGkxOG4ucmVtb3ZlVW51c2VkU3R1ZGVudEhlYWRlcih7c3R1ZGVudE5hbWV9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGhhc0V2ZXJTaWduZWRJbixcbiAgICAgIGRlcGVuZHNPblRoaXNTZWN0aW9uRm9yTG9naW4sXG4gICAgICBvbkNvbmZpcm0sXG4gICAgICBvbkNhbmNlbCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2VEaWFsb2dcbiAgICAgICAgey4uLl8ucGljayh0aGlzLnByb3BzLCBwcm9wc0Zyb21CYXNlRGlhbG9nKX1cbiAgICAgICAgdXNlVXBkYXRlZFN0eWxlc1xuICAgICAgICBoYW5kbGVDbG9zZT17b25DYW5jZWx9XG4gICAgICA+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICAgIDxIZWFkZXIgdGV4dD17dGhpcy5oZWFkZXJUZXh0KCl9IGhpZGVCb3JkZXI9eyFoYXNFdmVyU2lnbmVkSW59IC8+XG4gICAgICAgICAge2hhc0V2ZXJTaWduZWRJbiAmJiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8U2FmZU1hcmtkb3duIG1hcmtkb3duPXtpMThuLnJlbW92ZVN0dWRlbnRCb2R5MSgpfSAvPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgaHJlZj17UkVMRUFTRV9PUl9ERUxFVEVfUkVDT1JEU19FWFBMQU5BVElPTn1cbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7aTE4bi5sZWFybk1vcmUoKX1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAge2RlcGVuZHNPblRoaXNTZWN0aW9uRm9yTG9naW4gJiYgKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8cD57aTE4bi5yZW1vdmVTdHVkZW50Qm9keTIoKX08L3A+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIF9fdXNlRGVwcmVjYXRlZFRhZ1xuICAgICAgICAgICAgICAgICAgICB0ZXh0PXtpMThuLnJlbW92ZVN0dWRlbnRTZW5kSG9tZUluc3RydWN0aW9ucygpfVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj17QUREX0FfUEVSU09OQUxfTE9HSU5fSEVMUF9VUkx9XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPXtCdXR0b24uQnV0dG9uQ29sb3IuYmx1ZX1cbiAgICAgICAgICAgICAgICAgICAgc2l6ZT17QnV0dG9uLkJ1dHRvblNpemUubGFyZ2V9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc2VuZEhvbWVJbnN0cnVjdGlvbnNCdXR0b259XG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PVwiMVwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8Q29uZmlybUNhbmNlbEZvb3RlclxuICAgICAgICAgICAgY29uZmlybVRleHQ9e2kxOG4ucmVtb3ZlU3R1ZGVudCgpfVxuICAgICAgICAgICAgY29uZmlybUNvbG9yPXtCdXR0b24uQnV0dG9uQ29sb3IucmVkfVxuICAgICAgICAgICAgb25Db25maXJtPXtvbkNvbmZpcm19XG4gICAgICAgICAgICBvbkNhbmNlbD17b25DYW5jZWx9XG4gICAgICAgICAgICBkaXNhYmxlQ29uZmlybT17ISFkaXNhYmxlZH1cbiAgICAgICAgICAgIGRpc2FibGVDYW5jZWw9eyEhZGlzYWJsZWR9XG4gICAgICAgICAgICB0YWJJbmRleD1cIjFcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9CYXNlRGlhbG9nPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBtYXJnaW46IDIwLFxuICAgIGNvbG9yOiBjb2xvci5jaGFyY29hbCxcbiAgfSxcbiAgc2VuZEhvbWVJbnN0cnVjdGlvbnNCdXR0b246IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgbWFyZ2luQm90dG9tOiAnMWVtJyxcbiAgfSxcbn07XG4iLCIvKipcbiAqIE9wZW4gZXh0ZXJuYWwgbGlua3MgaW4gYSBuZXcgdGFiLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlcm5hbExpbmtzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBQYXJzZXIgPSB0aGlzLlBhcnNlcjtcbiAgY29uc3QgdG9rZW5pemVycyA9IFBhcnNlci5wcm90b3R5cGUuaW5saW5lVG9rZW5pemVycztcbiAgY29uc3Qgb3JpZ2luYWwgPSB0b2tlbml6ZXJzLmxpbms7XG4gIGNvbnN0IGFsbCA9IG9wdGlvbnMubGlua3MgPT09ICdhbGwnO1xuXG4gIHRva2VuaXplcnMubGluayA9IGZ1bmN0aW9uIChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgICBjb25zdCBsaW5rID0gb3JpZ2luYWwuY2FsbCh0aGlzLCBlYXQsIHZhbHVlLCBzaWxlbnQpO1xuICAgIGlmIChsaW5rICYmIGxpbmsudHlwZSA9PT0gJ2xpbmsnICYmIChhbGwgfHwgaXNFeHRlcm5hbExpbmsobGluay51cmwpKSkge1xuICAgICAgbGluay5kYXRhID0gbGluay5kYXRhIHx8IHt9O1xuICAgICAgbGluay5kYXRhLmhQcm9wZXJ0aWVzID0gbGluay5kYXRhLmhQcm9wZXJ0aWVzIHx8IHt9O1xuXG4gICAgICBjb25zdCBwcm9wcyA9IGxpbmsuZGF0YS5oUHJvcGVydGllcztcbiAgICAgIHByb3BzLnRhcmdldCA9IHByb3BzLnRhcmdldCB8fCAnX2JsYW5rJztcbiAgICAgIHByb3BzLnJlbCA9ICdub3JlZmVycmVyIG5vb3BlbmVyJztcbiAgICB9XG5cbiAgICByZXR1cm4gbGluaztcbiAgfTtcbiAgdG9rZW5pemVycy5saW5rLmxvY2F0b3IgPSBvcmlnaW5hbC5sb2NhdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFeHRlcm5hbExpbmsodXJsKSB7XG4gIHJldHVybiAhL2h0dHBzPzpcXC9cXC8oW14uXStcXC4pKmNvZGUub3JnKDpbMC05XSspP1xcLy8udGVzdChmdWxseVF1YWxpZmllZCh1cmwpKTtcbn1cblxubGV0IGE7XG5mdW5jdGlvbiBmdWxseVF1YWxpZmllZChwYXRoKSB7XG4gIGEgPSBhIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgYS5ocmVmID0gcGF0aDtcbiAgcmV0dXJuIGEuaHJlZjtcbn1cbiIsIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIG5hdGl2ZUNvZGVTdHJpbmcgPSAnW25hdGl2ZSBjb2RlXSc7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENvbmZpcm1SZW1vdmVTdHVkZW50RGlhbG9nLCB7XG4gIE1JTklNVU1fVEVTVF9QUk9QUyxcbn0gZnJvbSAnLi9Db25maXJtUmVtb3ZlU3R1ZGVudERpYWxvZyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdNYW5hZ2VTdHVkZW50cy9Db25maXJtUmVtb3ZlU3R1ZGVudHNEaWFsb2cnLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHN0b3J5Ym9vay9uby10aXRsZS1wcm9wZXJ0eS1pbi1tZXRhXG4gIGNvbXBvbmVudDogQ29uZmlybVJlbW92ZVN0dWRlbnREaWFsb2csXG59O1xuXG5jb25zdCBUZW1wbGF0ZSA9IGFyZ3MgPT4gKFxuICA8Q29uZmlybVJlbW92ZVN0dWRlbnREaWFsb2dcbiAgICB7Li4uTUlOSU1VTV9URVNUX1BST1BTfVxuICAgIGhpZGVCYWNrZHJvcD17dHJ1ZX1cbiAgICB7Li4uYXJnc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBOZXZlclNpZ25lZEluU3R1ZGVudCA9IFRlbXBsYXRlLmJpbmQoe30pO1xuTmV2ZXJTaWduZWRJblN0dWRlbnQuYXJncyA9IHtcbiAgaGFzRXZlclNpZ25lZEluOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBFdmVyU2lnbmVkSW5TdHVkZW50ID0gVGVtcGxhdGUuYmluZCh7fSk7XG5FdmVyU2lnbmVkSW5TdHVkZW50LmFyZ3MgPSB7XG4gIGhhc0V2ZXJTaWduZWRJbjogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uU2lnbmVkSW5TdHVkZW50ID0gVGVtcGxhdGUuYmluZCh7fSk7XG5TZWN0aW9uU2lnbmVkSW5TdHVkZW50LmFyZ3MgPSB7XG4gIGhhc0V2ZXJTaWduZWRJbjogdHJ1ZSxcbiAgZGVwZW5kc09uVGhpc1NlY3Rpb25Gb3JMb2dpbjogdHJ1ZSxcbn07XG4iXSwibmFtZXMiOlsicGVnYXN1cyIsInJlbGF0aXZlVXJsIiwid2luZG93IiwiZGFzaGJvYXJkIiwiQ09ERV9PUkdfVVJMIiwic2V0UGVnYXN1c09yaWdpbiIsIm9yaWdpbiIsInNldFN0dWRpb09yaWdpbiIsIlNUVURJT19VUkwiLCJzdHVkaW8iLCJfanF1ZXJ5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9kYXNoIiwib2JqIiwiX19lc01vZHVsZSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIkFycmF5IiwiaXNBcnJheSIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsInIiLCJsIiwidCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZSIsIm4iLCJ1IiwiYSIsImYiLCJvIiwiY2FsbCIsIm5leHQiLCJPYmplY3QiLCJkb25lIiwicHVzaCIsInZhbHVlIiwibGVuZ3RoIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfbm9uSXRlcmFibGVSZXN0IiwiVHlwZUVycm9yIiwibGVuIiwiYXJyMiIsImV4cG9ydHMiLCJfIiwibWVtb2l6ZSIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwiUHJvbWlzZSIsImFsbCIsInN0YXR1cyIsInRleHQiLCJfcmVmIiwiX3JlZjIiLCIkIiwiZmlsdGVyIiwiYXR0ciIsImVycm9yIiwiX3Byb3BUeXBlcyIsIl9yZWFjdCIsIl9CdXR0b24iLCJfY29sb3IiLCJfbG9jYWxlIiwiX3R5cGVvZiIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfdG9Qcm9wZXJ0eUtleSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiTnVtYmVyIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25maXJtQ2FuY2VsRm9vdGVyIiwiX1JlYWN0JENvbXBvbmVudCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJyZW5kZXIiLCJfdGhpcyRwcm9wcyIsInRoaXMiLCJwcm9wcyIsIm9uQ29uZmlybSIsIm9uQ2FuY2VsIiwiY29uZmlybVRleHQiLCJjYW5jZWxUZXh0IiwiY29uZmlybUNvbG9yIiwiY2FuY2VsQ29sb3IiLCJkaXNhYmxlQ29uZmlybSIsImRpc2FibGVDYW5jZWwiLCJ0YWJJbmRleCIsImNoaWxkcmVuIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiX191c2VEZXByZWNhdGVkVGFnIiwib25DbGljayIsImNvbG9yIiwiZGlzYWJsZWQiLCJidXR0b25TdHlsZSIsIm1lc3NhZ2VTdHlsZSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJCdXR0b24iLCJwcm9wVHlwZXMiLCJib29sIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwiYW55IiwiaTE4biIsImRpYWxvZ09LIiwiY2FuY2VsIiwiQnV0dG9uQ29sb3IiLCJicmFuZFNlY29uZGFyeURlZmF1bHQiLCJncmF5IiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJib3JkZXJTdHlsZSIsImJvcmRlckNvbG9yIiwibGlnaHRlcl9ncmF5IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJwYWRkaW5nVG9wIiwibWFyZ2luVG9wIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJtb2R1bGUiLCJfdXRpbHMiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJGaWVsZCIsIl90aGlzIiwidW5pcXVlSWQiLCJjcmVhdGVVdWlkIiwibGFiZWwiLCJsYWJlbERldGFpbHMiLCJtYXJnaW5Cb3R0b20iLCJodG1sRm9yIiwiY2hhcmNvYWwiLCJmb250V2VpZ2h0IiwiY2xvbmVFbGVtZW50IiwiaWQiLCJGaWVsZEVycm9yIiwibm9kZSIsImVsZW1lbnQiLCJvYmplY3QiLCJyZWQiLCJmb250U3R5bGUiLCJfZm9udENvbnN0YW50cyIsIkhlYWRlciIsImNvbXB1dGVkU3R5bGUiLCJoaWRlQm9yZGVyIiwicGFkZGluZ0JvdHRvbSIsImZvbnRTaXplIiwiZm9udENvbnN0YW50cyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiX0NvbmZpcm1DYW5jZWxGb290ZXIiLCJfRmllbGQiLCJfSGVhZGVyIiwiX2NvbnN0YW50cyIsIkJhc2VEaWFsb2ciLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJjb25jYXQiLCJldmVudCIsImNsb3NlRGlhbG9nIiwiaGFuZGxlS2V5RG93biIsInVuY2xvc2VhYmxlIiwiaGFuZGxlQ2xvc2UiLCJzb3VuZFBsYXllciIsInN0b3BBbGxBdWRpbyIsIl9wcm90byIsImNvbXBvbmVudERpZE1vdW50IiwiZm9jdXNEaWFsb2ciLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRUYWJiYWJsZUVsZW1lbnRzIiwicmVmcyIsImRpYWxvZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkZXNjZW5kYW50SXNBY3RpdmUiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJjb250YWlucyIsImlzT3BlbiIsImZvY3VzIiwiaGlkZUJhY2tkcm9wIiwiYm9keVN0eWxlIiwibW9kYWxCb2R5U3R5bGUiLCJ4Q2xvc2VTdHlsZSIsImZ1bGxXaWR0aCIsIndpZHRoIiwiZnVsbEhlaWdodCIsImhlaWdodCIsImJveFNpemluZyIsIndyYXBwZXJDbGFzc05hbWVzIiwibW9kYWxDbGFzc05hbWVzIiwibW9kYWxCb2R5Q2xhc3NOYW1lcyIsIm92ZXJmbG93WCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dZIiwiZml4ZWRIZWlnaHQiLCJ1c2VVcGRhdGVkU3R5bGVzIiwiYmFja2dyb3VuZCIsIm1heEhlaWdodCIsImJvcmRlclJhZGl1cyIsInVzZUZsZXhib3giLCJmaXhlZFdpZHRoIiwiQkFTRV9ESUFMT0dfV0lEVEgiLCJub01vZGFsU3R5bGVzIiwicG9zaXRpb24iLCJ0b3AiLCJpbnNldElubGluZUVuZCIsInBhZGRpbmciLCJuZXV0cmFsX2RhcmszMCIsImN1cnNvciIsImJvcmRlciIsImJvZHlDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJqb2luIiwiYm9keSIsInJlZiIsIm9uS2V5RG93biIsImJvZHlJZCIsImhpZGVDbG9zZUJ1dHRvbiIsImljb24iLCJiYWNrZHJvcFN0eWxlIiwiX3JlZGFjdGFibGVNYXJrZG93biIsIl9yZW1hcmtQbHVnaW5zIiwiX2dpdGh1YiIsIl9yZWh5cGVSYXciLCJfcmVoeXBlUmVhY3QiLCJfcmVoeXBlU2FuaXRpemUiLCJfcmVtYXJrUmVoeXBlIiwiX3VuaWZpZWQiLCJfZXh0ZXJuYWxMaW5rcyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJTYWZlTWFya2Rvd24iLCJwcm9jZXNzb3IiLCJvcGVuRXh0ZXJuYWxMaW5rc0luTmV3VGFiIiwibWFya2Rvd25Ub1JlYWN0RXh0ZXJuYWxMaW5rcyIsIm1hcmtkb3duVG9SZWFjdCIsInJlbmRlcmVkIiwicHJvY2Vzc1N5bmMiLCJtYXJrZG93biIsInJlc3VsdCIsIm1hcmtkb3duUHJvcHMiLCJ0eXBlIiwic2NoZW1hIiwiZGVmYXVsdFNhbml0aXphdGlvblNjaGVtYSIsImF0dHJpYnV0ZXMiLCJpbWciLCJ0YWdOYW1lcyIsInNwYW4iLCJjbG9iYmVyIiwiYmxvY2tseVRhZ3MiLCJibG9ja2x5Q29tcG9uZW50V3JhcHBlcnMiLCJ0YWciLCJCbG9ja2x5RWxlbWVudCIsImlzIiwidW5pZmllZCIsInVzZSIsIlByb2Nlc3NvciIsImdldFBhcnNlciIsImNsaWNrYWJsZVRleHQiLCJleHBhbmRhYmxlSW1hZ2VzIiwidmlzdWFsQ29kZUJsb2NrIiwieG1sQXNUb3BMZXZlbEJsb2NrIiwiZGV0YWlscyIsInJlbWFya1JlaHlwZSIsImFsbG93RGFuZ2Vyb3VzSHRtbCIsInJlaHlwZVJhdyIsInJlaHlwZVNhbml0aXplIiwicmVoeXBlUmVhY3QiLCJjb21wb25lbnRzIiwiZXh0ZXJuYWxMaW5rcyIsImxpbmtzIiwiX3VybEhlbHBlcnMiLCJfU2FmZU1hcmtkb3duIiwiX1N5c3RlbURpYWxvZyIsIl9CYXNlRGlhbG9nIiwic3R1ZGVudE5hbWUiLCJwcm9wc0Zyb21CYXNlRGlhbG9nIiwiQ29uZmlybVJlbW92ZVN0dWRlbnREaWFsb2ciLCJoZWFkZXJUZXh0IiwiaGFzRXZlclNpZ25lZEluIiwicmVtb3ZlU3R1ZGVudEFuZFJlY29yZHNIZWFkZXIiLCJyZW1vdmVVbnVzZWRTdHVkZW50SGVhZGVyIiwiX3RoaXMkcHJvcHMyIiwiZGVwZW5kc09uVGhpc1NlY3Rpb25Gb3JMb2dpbiIsInBpY2siLCJzdHlsZXMiLCJjb250YWluZXIiLCJyZW1vdmVTdHVkZW50Qm9keTEiLCJocmVmIiwiUkVMRUFTRV9PUl9ERUxFVEVfUkVDT1JEU19FWFBMQU5BVElPTiIsInJlbCIsImxlYXJuTW9yZSIsInJlbW92ZVN0dWRlbnRCb2R5MiIsInJlbW92ZVN0dWRlbnRTZW5kSG9tZUluc3RydWN0aW9ucyIsIkFERF9BX1BFUlNPTkFMX0xPR0lOX0hFTFBfVVJMIiwiYmx1ZSIsInNpemUiLCJCdXR0b25TaXplIiwibGFyZ2UiLCJzZW5kSG9tZUluc3RydWN0aW9uc0J1dHRvbiIsInJlbW92ZVN0dWRlbnQiLCJtYXJnaW4iLCJpc0V4dGVybmFsTGluayIsInVybCIsImZ1bGx5UXVhbGlmaWVkIiwicGF0aCIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJ0b2tlbml6ZXJzIiwiUGFyc2VyIiwiaW5saW5lVG9rZW5pemVycyIsIm9yaWdpbmFsIiwibGluayIsImVhdCIsInNpbGVudCIsImRhdGEiLCJoUHJvcGVydGllcyIsImxvY2F0b3IiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFyZ1R5cGUiLCJpbm5lciIsImluY2x1ZGVzIiwiZGVmYXVsdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImVyciIsIkVycm9yIiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJzeW1ib2wiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0QnlTZWxlY3RvciIsImluc2VydCIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9Db25maXJtUmVtb3ZlU3R1ZGVudERpYWxvZyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiaGFzIiwiZ2V0Iiwic2V0IiwiV2Vha01hcCIsInRpdGxlIiwiY29tcG9uZW50IiwiVGVtcGxhdGUiLCJNSU5JTVVNX1RFU1RfUFJPUFMiXSwic291cmNlUm9vdCI6IiJ9