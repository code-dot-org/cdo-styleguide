"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[7202],{"./src/redux.js":(module,exports,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStore=function getStore(){reduxStore||(reduxStore=createStoreWithReducers(),_experiments.default.isEnabled("reduxGlobalStore")&&(window.reduxStore=reduxStore));return reduxStore},exports.hasReducer=function hasReducer(key){return!!globalReducers[key]},exports.registerReducers=function registerReducers(reducers){for(var key in reducers){var existingReducer=globalReducers[key];if(existingReducer&&existingReducer!==reducers[key])throw new Error('reducer with key "'.concat(key,'" already registered!'))}Object.assign(globalReducers,reducers),reduxStore&&reduxStore.replaceReducer(redux.combineReducers(globalReducers))};_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js"));var reduxStore,_experiments=_interopRequireDefault(__webpack_require__("./src/util/experiments.js")),redux=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/redux/es/redux.js")),_reduxThunk=_interopRequireDefault(__webpack_require__("./node_modules/redux-thunk/lib/index.js")),_toolkit=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var globalReducers={};function createStoreWithReducers(){return function createStore(reducer,initialState){_experiments.default.isEnabled(_experiments.default.REDUX_LOGGING);0;return(0,_toolkit.configureStore)({reducer,preloadedState:initialState,middleware:[_reduxThunk.default],devTools:!1})}(Object.keys(globalReducers).length>0?globalReducers:function(s){return s})}module.exports.createStoreWithReducers=createStoreWithReducers},"./src/templates/policy_compliance/ParentalPermissionModal/index.story.tsx":function(__unused_webpack_module,exports,__webpack_require__){var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);var desc=Object.getOwnPropertyDescriptor(m,k);desc&&!("get"in desc?!m.__esModule:desc.writable||desc.configurable)||(desc={enumerable:!0,get:function(){return m[k]}}),Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,v){o.default=v}),__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.prototype.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);return __setModuleDefault(result,mod),result},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.UpdateRequestForm=exports.NewRequestForm=void 0;var react_1=__importDefault(__webpack_require__("./node_modules/react/index.js")),react_redux_1=__webpack_require__("./node_modules/react-redux/es/index.js"),sinon_1=__importDefault(__webpack_require__("./node_modules/sinon/lib/sinon.js")),redux_1=__webpack_require__("./src/redux.js"),currentUserRedux_1=__importStar(__webpack_require__("./src/templates/currentUserRedux.js")),_1=__importDefault(__webpack_require__("./src/templates/policy_compliance/ParentalPermissionModal/index.tsx")),store=(0,redux_1.getStore)();(0,redux_1.registerReducers)({currentUser:currentUserRedux_1.default}),store.dispatch((0,currentUserRedux_1.setInitialData)({id:1,child_account_compliance_state:"l"})),exports.default={component:_1.default,decorators:[function(Story){return react_1.default.createElement(react_redux_1.Provider,{store},react_1.default.createElement(Story,null))}]};var spy=sinon_1.default.spy(),Template=function(state){return void 0===state&&(state={}),react_1.default.useReducer.restore&&react_1.default.useReducer.restore(),sinon_1.default.stub(react_1.default,"useReducer").returns([state,spy]),react_1.default.createElement(_1.default,{lockoutDate:(new Date).toISOString()})};exports.NewRequestForm=function(){return Template({parentalPermissionRequest:null})};exports.UpdateRequestForm=function(){var state={parentalPermissionRequest:{parent_email:"parent@email.com",requested_at:(new Date).toISOString()}};return Template(state)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,