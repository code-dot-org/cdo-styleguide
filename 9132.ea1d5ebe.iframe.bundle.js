(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9132],{"./node_modules/aws-sdk/lib/api_loader.js":module=>{function apiLoader(svc,version){if(!apiLoader.services.hasOwnProperty(svc))throw new Error("InvalidService: Failed to load api for "+svc);return apiLoader.services[svc][version]}apiLoader.services={},module.exports=apiLoader},"./node_modules/aws-sdk/lib/config.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var PromisesDependency,AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");__webpack_require__("./node_modules/aws-sdk/lib/credentials.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"),AWS.Config=AWS.util.inherit({constructor:function Config(options){void 0===options&&(options={}),options=this.extractCredentials(options),AWS.util.each.call(this,this.keys,(function(key,value){this.set(key,options[key],value)}))},getCredentials:function getCredentials(callback){var self=this;function finish(err){callback(err,err?null:self.credentials)}function credError(msg,err){return new AWS.util.error(err||new Error,{code:"CredentialsError",message:msg,name:"CredentialsError"})}self.credentials?"function"==typeof self.credentials.get?function getAsyncCredentials(){self.credentials.get((function(err){err&&(err=credError("Could not load credentials from "+self.credentials.constructor.name,err)),finish(err)}))}():function getStaticCredentials(){var err=null;self.credentials.accessKeyId&&self.credentials.secretAccessKey||(err=credError("Missing credentials")),finish(err)}():self.credentialProvider?self.credentialProvider.resolve((function(err,creds){err&&(err=credError("Could not load credentials from any providers",err)),self.credentials=creds,finish(err)})):finish(credError("No credentials to load"))},getToken:function getToken(callback){var self=this;function finish(err){callback(err,err?null:self.token)}function tokenError(msg,err){return new AWS.util.error(err||new Error,{code:"TokenError",message:msg,name:"TokenError"})}self.token?"function"==typeof self.token.get?function getAsyncToken(){self.token.get((function(err){err&&(err=tokenError("Could not load token from "+self.token.constructor.name,err)),finish(err)}))}():function getStaticToken(){var err=null;self.token.token||(err=tokenError("Missing token")),finish(err)}():self.tokenProvider?self.tokenProvider.resolve((function(err,token){err&&(err=tokenError("Could not load token from any providers",err)),self.token=token,finish(err)})):finish(tokenError("No token to load"))},update:function update(options,allowUnknownKeys){allowUnknownKeys=allowUnknownKeys||!1,options=this.extractCredentials(options),AWS.util.each.call(this,options,(function(key,value){(allowUnknownKeys||Object.prototype.hasOwnProperty.call(this.keys,key)||AWS.Service.hasService(key))&&this.set(key,value)}))},loadFromPath:function loadFromPath(path){this.clear();var options=JSON.parse(AWS.util.readFileSync(path)),fileSystemCreds=new AWS.FileSystemCredentials(path),chain=new AWS.CredentialProviderChain;return chain.providers.unshift(fileSystemCreds),chain.resolve((function(err,creds){if(err)throw err;options.credentials=creds})),this.constructor(options),this},clear:function clear(){AWS.util.each.call(this,this.keys,(function(key){delete this[key]})),this.set("credentials",void 0),this.set("credentialProvider",void 0)},set:function set(property,value,defaultValue){void 0===value?(void 0===defaultValue&&(defaultValue=this.keys[property]),this[property]="function"==typeof defaultValue?defaultValue.call(this):defaultValue):"httpOptions"===property&&this[property]?this[property]=AWS.util.merge(this[property],value):this[property]=value},keys:{credentials:null,credentialProvider:null,region:null,logger:null,apiVersions:{},apiVersion:null,endpoint:void 0,httpOptions:{timeout:12e4},maxRetries:void 0,maxRedirects:10,paramValidation:!0,sslEnabled:!0,s3ForcePathStyle:!1,s3BucketEndpoint:!1,s3DisableBodySigning:!0,s3UsEast1RegionalEndpoint:"legacy",s3UseArnRegion:void 0,computeChecksums:!0,convertResponseTypes:!0,correctClockSkew:!1,customUserAgent:null,dynamoDbCrc32:!0,systemClockOffset:0,signatureVersion:null,signatureCache:!0,retryDelayOptions:{},useAccelerateEndpoint:!1,clientSideMonitoring:!1,endpointDiscoveryEnabled:void 0,endpointCacheSize:1e3,hostPrefixEnabled:!0,stsRegionalEndpoints:"legacy",useFipsEndpoint:!1,useDualstackEndpoint:!1,token:null},extractCredentials:function extractCredentials(options){return options.accessKeyId&&options.secretAccessKey&&((options=AWS.util.copy(options)).credentials=new AWS.Credentials(options)),options},setPromisesDependency:function setPromisesDependency(dep){PromisesDependency=dep,null===dep&&"function"==typeof Promise&&(PromisesDependency=Promise);var constructors=[AWS.Request,AWS.Credentials,AWS.CredentialProviderChain];AWS.S3&&(constructors.push(AWS.S3),AWS.S3.ManagedUpload&&constructors.push(AWS.S3.ManagedUpload)),AWS.util.addPromises(constructors,PromisesDependency)},getPromisesDependency:function getPromisesDependency(){return PromisesDependency}}),AWS.config=new AWS.Config},"./node_modules/aws-sdk/lib/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS={util:__webpack_require__("./node_modules/aws-sdk/lib/util.js")};({}).toString(),module.exports=AWS,AWS.util.update(AWS,{VERSION:"2.1231.0",Signers:{},Protocol:{Json:__webpack_require__("./node_modules/aws-sdk/lib/protocol/json.js"),Query:__webpack_require__("./node_modules/aws-sdk/lib/protocol/query.js"),Rest:__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest.js"),RestJson:__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest_json.js"),RestXml:__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest_xml.js")},XML:{Builder:__webpack_require__("./node_modules/aws-sdk/lib/xml/builder.js"),Parser:null},JSON:{Builder:__webpack_require__("./node_modules/aws-sdk/lib/json/builder.js"),Parser:__webpack_require__("./node_modules/aws-sdk/lib/json/parser.js")},Model:{Api:__webpack_require__("./node_modules/aws-sdk/lib/model/api.js"),Operation:__webpack_require__("./node_modules/aws-sdk/lib/model/operation.js"),Shape:__webpack_require__("./node_modules/aws-sdk/lib/model/shape.js"),Paginator:__webpack_require__("./node_modules/aws-sdk/lib/model/paginator.js"),ResourceWaiter:__webpack_require__("./node_modules/aws-sdk/lib/model/resource_waiter.js")},apiLoader:__webpack_require__("./node_modules/aws-sdk/lib/api_loader.js"),EndpointCache:__webpack_require__("./node_modules/aws-sdk/vendor/endpoint-cache/index.js").k}),__webpack_require__("./node_modules/aws-sdk/lib/sequential_executor.js"),__webpack_require__("./node_modules/aws-sdk/lib/service.js"),__webpack_require__("./node_modules/aws-sdk/lib/config.js"),__webpack_require__("./node_modules/aws-sdk/lib/http.js"),__webpack_require__("./node_modules/aws-sdk/lib/event_listeners.js"),__webpack_require__("./node_modules/aws-sdk/lib/request.js"),__webpack_require__("./node_modules/aws-sdk/lib/response.js"),__webpack_require__("./node_modules/aws-sdk/lib/resource_waiter.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/request_signer.js"),__webpack_require__("./node_modules/aws-sdk/lib/param_validator.js"),AWS.events=new AWS.SequentialExecutor,AWS.util.memoizedProperty(AWS,"endpointCache",(function(){return new AWS.EndpointCache(AWS.config.endpointCacheSize)}),!0)},"./node_modules/aws-sdk/lib/credentials.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");AWS.Credentials=AWS.util.inherit({constructor:function Credentials(){if(AWS.util.hideProperties(this,["secretAccessKey"]),this.expired=!1,this.expireTime=null,this.refreshCallbacks=[],1===arguments.length&&"object"==typeof arguments[0]){var creds=arguments[0].credentials||arguments[0];this.accessKeyId=creds.accessKeyId,this.secretAccessKey=creds.secretAccessKey,this.sessionToken=creds.sessionToken}else this.accessKeyId=arguments[0],this.secretAccessKey=arguments[1],this.sessionToken=arguments[2]},expiryWindow:15,needsRefresh:function needsRefresh(){var currentTime=AWS.util.date.getDate().getTime(),adjustedTime=new Date(currentTime+1e3*this.expiryWindow);return!!(this.expireTime&&adjustedTime>this.expireTime)||(this.expired||!this.accessKeyId||!this.secretAccessKey)},get:function get(callback){var self=this;this.needsRefresh()?this.refresh((function(err){err||(self.expired=!1),callback&&callback(err)})):callback&&callback()},refresh:function refresh(callback){this.expired=!1,callback()},coalesceRefresh:function coalesceRefresh(callback,sync){var self=this;1===self.refreshCallbacks.push(callback)&&self.load((function onLoad(err){AWS.util.arrayEach(self.refreshCallbacks,(function(callback){sync?callback(err):AWS.util.defer((function(){callback(err)}))})),self.refreshCallbacks.length=0}))},load:function load(callback){callback()}}),AWS.Credentials.addPromisesToClass=function addPromisesToClass(PromiseDependency){this.prototype.getPromise=AWS.util.promisifyMethod("get",PromiseDependency),this.prototype.refreshPromise=AWS.util.promisifyMethod("refresh",PromiseDependency)},AWS.Credentials.deletePromisesFromClass=function deletePromisesFromClass(){delete this.prototype.getPromise,delete this.prototype.refreshPromise},AWS.util.addPromises(AWS.Credentials)},"./node_modules/aws-sdk/lib/credentials/credential_provider_chain.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");AWS.CredentialProviderChain=AWS.util.inherit(AWS.Credentials,{constructor:function CredentialProviderChain(providers){this.providers=providers||AWS.CredentialProviderChain.defaultProviders.slice(0),this.resolveCallbacks=[]},resolve:function resolve(callback){var self=this;if(0===self.providers.length)return callback(new Error("No providers")),self;if(1===self.resolveCallbacks.push(callback)){var index=0,providers=self.providers.slice(0);!function resolveNext(err,creds){if(!err&&creds||index===providers.length)return AWS.util.arrayEach(self.resolveCallbacks,(function(callback){callback(err,creds)})),void(self.resolveCallbacks.length=0);var provider=providers[index++];(creds="function"==typeof provider?provider.call():provider).get?creds.get((function(getErr){resolveNext(getErr,getErr?null:creds)})):resolveNext(null,creds)}()}return self}}),AWS.CredentialProviderChain.defaultProviders=[],AWS.CredentialProviderChain.addPromisesToClass=function addPromisesToClass(PromiseDependency){this.prototype.resolvePromise=AWS.util.promisifyMethod("resolve",PromiseDependency)},AWS.CredentialProviderChain.deletePromisesFromClass=function deletePromisesFromClass(){delete this.prototype.resolvePromise},AWS.util.addPromises(AWS.CredentialProviderChain)},"./node_modules/aws-sdk/lib/discover_endpoint.js":(module,__unused_webpack_exports,__webpack_require__)=>{var process=__webpack_require__("./node_modules/process/browser.js"),AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),endpointDiscoveryEnabledEnvs=["AWS_ENABLE_ENDPOINT_DISCOVERY","AWS_ENDPOINT_DISCOVERY_ENABLED"];function getCacheKey(request){var service=request.service,api=service.api||{},identifiers=(api.operations,{});return service.config.region&&(identifiers.region=service.config.region),api.serviceId&&(identifiers.serviceId=api.serviceId),service.config.credentials.accessKeyId&&(identifiers.accessKeyId=service.config.credentials.accessKeyId),identifiers}function marshallCustomIdentifiersHelper(result,params,shape){shape&&null!=params&&"structure"===shape.type&&shape.required&&shape.required.length>0&&util.arrayEach(shape.required,(function(name){var memberShape=shape.members[name];if(!0===memberShape.endpointDiscoveryId){var locationName=memberShape.isLocationName?memberShape.name:name;result[locationName]=String(params[name])}else marshallCustomIdentifiersHelper(result,params[name],memberShape)}))}function marshallCustomIdentifiers(request,shape){var identifiers={};return marshallCustomIdentifiersHelper(identifiers,request.params,shape),identifiers}function optionalDiscoverEndpoint(request){var service=request.service,api=service.api,operationModel=api.operations?api.operations[request.operation]:void 0,identifiers=marshallCustomIdentifiers(request,operationModel?operationModel.input:void 0),cacheKey=getCacheKey(request);Object.keys(identifiers).length>0&&(cacheKey=util.update(cacheKey,identifiers),operationModel&&(cacheKey.operation=operationModel.name));var endpoints=AWS.endpointCache.get(cacheKey);if(!endpoints||1!==endpoints.length||""!==endpoints[0].Address)if(endpoints&&endpoints.length>0)request.httpRequest.updateEndpoint(endpoints[0].Address);else{var endpointRequest=service.makeRequest(api.endpointOperation,{Operation:operationModel.name,Identifiers:identifiers});addApiVersionHeader(endpointRequest),endpointRequest.removeListener("validate",AWS.EventListeners.Core.VALIDATE_PARAMETERS),endpointRequest.removeListener("retry",AWS.EventListeners.Core.RETRY_CHECK),AWS.endpointCache.put(cacheKey,[{Address:"",CachePeriodInMinutes:1}]),endpointRequest.send((function(err,data){data&&data.Endpoints?AWS.endpointCache.put(cacheKey,data.Endpoints):err&&AWS.endpointCache.put(cacheKey,[{Address:"",CachePeriodInMinutes:1}])}))}}var requestQueue={};function requiredDiscoverEndpoint(request,done){var service=request.service,api=service.api,operationModel=api.operations?api.operations[request.operation]:void 0,inputShape=operationModel?operationModel.input:void 0,identifiers=marshallCustomIdentifiers(request,inputShape),cacheKey=getCacheKey(request);Object.keys(identifiers).length>0&&(cacheKey=util.update(cacheKey,identifiers),operationModel&&(cacheKey.operation=operationModel.name));var cacheKeyStr=AWS.EndpointCache.getKeyString(cacheKey),endpoints=AWS.endpointCache.get(cacheKeyStr);if(endpoints&&1===endpoints.length&&""===endpoints[0].Address)return requestQueue[cacheKeyStr]||(requestQueue[cacheKeyStr]=[]),void requestQueue[cacheKeyStr].push({request,callback:done});if(endpoints&&endpoints.length>0)request.httpRequest.updateEndpoint(endpoints[0].Address),done();else{var endpointRequest=service.makeRequest(api.endpointOperation,{Operation:operationModel.name,Identifiers:identifiers});endpointRequest.removeListener("validate",AWS.EventListeners.Core.VALIDATE_PARAMETERS),addApiVersionHeader(endpointRequest),AWS.endpointCache.put(cacheKeyStr,[{Address:"",CachePeriodInMinutes:60}]),endpointRequest.send((function(err,data){if(err){if(request.response.error=util.error(err,{retryable:!1}),AWS.endpointCache.remove(cacheKey),requestQueue[cacheKeyStr]){var pendingRequests=requestQueue[cacheKeyStr];util.arrayEach(pendingRequests,(function(requestContext){requestContext.request.response.error=util.error(err,{retryable:!1}),requestContext.callback()})),delete requestQueue[cacheKeyStr]}}else if(data&&(AWS.endpointCache.put(cacheKeyStr,data.Endpoints),request.httpRequest.updateEndpoint(data.Endpoints[0].Address),requestQueue[cacheKeyStr])){pendingRequests=requestQueue[cacheKeyStr];util.arrayEach(pendingRequests,(function(requestContext){requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address),requestContext.callback()})),delete requestQueue[cacheKeyStr]}done()}))}}function addApiVersionHeader(endpointRequest){var apiVersion=endpointRequest.service.api.apiVersion;apiVersion&&!endpointRequest.httpRequest.headers["x-amz-api-version"]&&(endpointRequest.httpRequest.headers["x-amz-api-version"]=apiVersion)}function invalidateCachedEndpoints(response){var error=response.error,httpResponse=response.httpResponse;if(error&&("InvalidEndpointException"===error.code||421===httpResponse.statusCode)){var request=response.request,operations=request.service.api.operations||{},identifiers=marshallCustomIdentifiers(request,operations[request.operation]?operations[request.operation].input:void 0),cacheKey=getCacheKey(request);Object.keys(identifiers).length>0&&(cacheKey=util.update(cacheKey,identifiers),operations[request.operation]&&(cacheKey.operation=operations[request.operation].name)),AWS.endpointCache.remove(cacheKey)}}function isFalsy(value){return["false","0"].indexOf(value)>=0}module.exports={discoverEndpoint:function discoverEndpoint(request,done){var service=request.service||{};if(function hasCustomEndpoint(client){if(client._originalConfig&&client._originalConfig.endpoint&&!0===client._originalConfig.endpointDiscoveryEnabled)throw util.error(new Error,{code:"ConfigurationException",message:"Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."});var svcConfig=AWS.config[client.serviceIdentifier]||{};return Boolean(AWS.config.endpoint||svcConfig.endpoint||client._originalConfig&&client._originalConfig.endpoint)}(service)||request.isPresigned())return done();var operationModel=(service.api.operations||{})[request.operation],isEndpointDiscoveryRequired=operationModel?operationModel.endpointDiscoveryRequired:"NULL",isEnabled=function resolveEndpointDiscoveryConfig(request){var service=request.service||{};if(void 0!==service.config.endpointDiscoveryEnabled)return service.config.endpointDiscoveryEnabled;if(!util.isBrowser()){for(var i=0;i<endpointDiscoveryEnabledEnvs.length;i++){var env=endpointDiscoveryEnabledEnvs[i];if(Object.prototype.hasOwnProperty.call(process.env,env)){if(""===process.env[env]||void 0===process.env[env])throw util.error(new Error,{code:"ConfigurationException",message:"environmental variable "+env+" cannot be set to nothing"});return!isFalsy(process.env[env])}}var configFile={};try{configFile=AWS.util.iniLoader?AWS.util.iniLoader.loadFrom({isConfig:!0,filename:process.env[AWS.util.sharedConfigFileEnv]}):{}}catch(e){}var sharedFileConfig=configFile[process.env.AWS_PROFILE||AWS.util.defaultProfile]||{};if(Object.prototype.hasOwnProperty.call(sharedFileConfig,"endpoint_discovery_enabled")){if(void 0===sharedFileConfig.endpoint_discovery_enabled)throw util.error(new Error,{code:"ConfigurationException",message:"config file entry 'endpoint_discovery_enabled' cannot be set to nothing"});return!isFalsy(sharedFileConfig.endpoint_discovery_enabled)}}}(request),hasRequiredEndpointDiscovery=service.api.hasRequiredEndpointDiscovery;switch((isEnabled||hasRequiredEndpointDiscovery)&&request.httpRequest.appendToUserAgent("endpoint-discovery"),isEndpointDiscoveryRequired){case"OPTIONAL":(isEnabled||hasRequiredEndpointDiscovery)&&(optionalDiscoverEndpoint(request),request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",invalidateCachedEndpoints)),done();break;case"REQUIRED":if(!1===isEnabled){request.response.error=util.error(new Error,{code:"ConfigurationException",message:"Endpoint Discovery is disabled but "+service.api.className+"."+request.operation+"() requires it. Please check your configurations."}),done();break}request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",invalidateCachedEndpoints),requiredDiscoverEndpoint(request,done);break;default:done()}},requiredDiscoverEndpoint,optionalDiscoverEndpoint,marshallCustomIdentifiers,getCacheKey,invalidateCachedEndpoint:invalidateCachedEndpoints}},"./node_modules/aws-sdk/lib/event_listeners.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var process=__webpack_require__("./node_modules/process/browser.js"),AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),SequentialExecutor=__webpack_require__("./node_modules/aws-sdk/lib/sequential_executor.js"),DISCOVER_ENDPOINT=__webpack_require__("./node_modules/aws-sdk/lib/discover_endpoint.js").discoverEndpoint;AWS.EventListeners={Core:{}},AWS.EventListeners={Core:(new SequentialExecutor).addNamedListeners((function(add,addAsync){addAsync("VALIDATE_CREDENTIALS","validate",(function VALIDATE_CREDENTIALS(req,done){if(!req.service.api.signatureVersion&&!req.service.config.signatureVersion)return done();req.service.config.getCredentials((function(err){err&&(req.response.error=AWS.util.error(err,{code:"CredentialsError",message:"Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1"})),done()}))})),add("VALIDATE_REGION","validate",(function VALIDATE_REGION(req){if(!req.service.isGlobalEndpoint){var dnsHostRegex=new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);req.service.config.region?dnsHostRegex.test(req.service.config.region)||(req.response.error=AWS.util.error(new Error,{code:"ConfigError",message:"Invalid region in config"})):req.response.error=AWS.util.error(new Error,{code:"ConfigError",message:"Missing region in config"})}})),add("BUILD_IDEMPOTENCY_TOKENS","validate",(function BUILD_IDEMPOTENCY_TOKENS(req){if(req.service.api.operations){var operation=req.service.api.operations[req.operation];if(operation){var idempotentMembers=operation.idempotentMembers;if(idempotentMembers.length){for(var params=AWS.util.copy(req.params),i=0,iLen=idempotentMembers.length;i<iLen;i++)params[idempotentMembers[i]]||(params[idempotentMembers[i]]=AWS.util.uuid.v4());req.params=params}}}})),add("VALIDATE_PARAMETERS","validate",(function VALIDATE_PARAMETERS(req){if(req.service.api.operations){var rules=req.service.api.operations[req.operation].input,validation=req.service.config.paramValidation;new AWS.ParamValidator(validation).validate(rules,req.params)}})),add("COMPUTE_CHECKSUM","afterBuild",(function COMPUTE_CHECKSUM(req){if(req.service.api.operations){var operation=req.service.api.operations[req.operation];if(operation){var body=req.httpRequest.body,isNonStreamingPayload=body&&(AWS.util.Buffer.isBuffer(body)||"string"==typeof body),headers=req.httpRequest.headers;if(operation.httpChecksumRequired&&req.service.config.computeChecksums&&isNonStreamingPayload&&!headers["Content-MD5"]){var md5=AWS.util.crypto.md5(body,"base64");headers["Content-MD5"]=md5}}}})),addAsync("COMPUTE_SHA256","afterBuild",(function COMPUTE_SHA256(req,done){if(req.haltHandlersOnError(),req.service.api.operations){var operation=req.service.api.operations[req.operation],authtype=operation?operation.authtype:"";if(!req.service.api.signatureVersion&&!authtype&&!req.service.config.signatureVersion)return done();if(req.service.getSignerClass(req)===AWS.Signers.V4){var body=req.httpRequest.body||"";if(authtype.indexOf("unsigned-body")>=0)return req.httpRequest.headers["X-Amz-Content-Sha256"]="UNSIGNED-PAYLOAD",done();AWS.util.computeSha256(body,(function(err,sha){err?done(err):(req.httpRequest.headers["X-Amz-Content-Sha256"]=sha,done())}))}else done()}})),add("SET_CONTENT_LENGTH","afterBuild",(function SET_CONTENT_LENGTH(req){var authtype=function getOperationAuthtype(req){if(!req.service.api.operations)return"";var operation=req.service.api.operations[req.operation];return operation?operation.authtype:""}(req),payloadMember=AWS.util.getRequestPayloadShape(req);if(void 0===req.httpRequest.headers["Content-Length"])try{var length=AWS.util.string.byteLength(req.httpRequest.body);req.httpRequest.headers["Content-Length"]=length}catch(err){if(payloadMember&&payloadMember.isStreaming){if(payloadMember.requiresLength)throw err;if(authtype.indexOf("unsigned-body")>=0)return void(req.httpRequest.headers["Transfer-Encoding"]="chunked");throw err}throw err}})),add("SET_HTTP_HOST","afterBuild",(function SET_HTTP_HOST(req){req.httpRequest.headers.Host=req.httpRequest.endpoint.host})),add("SET_TRACE_ID","afterBuild",(function SET_TRACE_ID(req){if(AWS.util.isNode()&&!Object.hasOwnProperty.call(req.httpRequest.headers,"X-Amzn-Trace-Id")){var functionName=process.env.AWS_LAMBDA_FUNCTION_NAME,traceId=process.env._X_AMZN_TRACE_ID;"string"==typeof functionName&&functionName.length>0&&"string"==typeof traceId&&traceId.length>0&&(req.httpRequest.headers["X-Amzn-Trace-Id"]=traceId)}})),add("RESTART","restart",(function RESTART(){var err=this.response.error;err&&err.retryable&&(this.httpRequest=new AWS.HttpRequest(this.service.endpoint,this.service.region),this.response.retryCount<this.service.config.maxRetries?this.response.retryCount++:this.response.error=null)}));addAsync("DISCOVER_ENDPOINT","sign",DISCOVER_ENDPOINT,!0),addAsync("SIGN","sign",(function SIGN(req,done){var service=req.service,operation=(req.service.api.operations||{})[req.operation],authtype=operation?operation.authtype:"";if(!service.api.signatureVersion&&!authtype&&!service.config.signatureVersion)return done();"bearer"===authtype||"bearer"===service.config.signatureVersion?service.config.getToken((function(err,token){if(err)return req.response.error=err,done();try{new(service.getSignerClass(req))(req.httpRequest).addAuthorization(token)}catch(e){req.response.error=e}done()})):service.config.getCredentials((function(err,credentials){if(err)return req.response.error=err,done();try{var date=service.getSkewCorrectedDate(),signer=new(service.getSignerClass(req))(req.httpRequest,service.getSigningName(req),{signatureCache:service.config.signatureCache,operation,signatureVersion:service.api.signatureVersion});signer.setServiceClientId(service._clientId),delete req.httpRequest.headers.Authorization,delete req.httpRequest.headers.Date,delete req.httpRequest.headers["X-Amz-Date"],signer.addAuthorization(credentials,date),req.signedAt=date}catch(e){req.response.error=e}done()}))})),add("VALIDATE_RESPONSE","validateResponse",(function VALIDATE_RESPONSE(resp){this.service.successfulResponse(resp,this)?(resp.data={},resp.error=null):(resp.data=null,resp.error=AWS.util.error(new Error,{code:"UnknownError",message:"An unknown error occurred."}))})),add("ERROR","error",(function ERROR(err,resp){var headers=resp.httpResponse.headers,queryErrorCode=headers?headers["x-amzn-query-error"]:void 0;queryErrorCode&&(resp.error.code=queryErrorCode.split(";")[0])}),!0),addAsync("SEND","send",(function SEND(resp,done){function callback(httpResp){resp.httpResponse.stream=httpResp;var stream=resp.request.httpRequest.stream,service=resp.request.service,api=service.api,operationName=resp.request.operation,operation=api.operations[operationName]||{};httpResp.on("headers",(function onHeaders(statusCode,headers,statusMessage){if(resp.request.emit("httpHeaders",[statusCode,headers,resp,statusMessage]),!resp.httpResponse.streaming)if(2===AWS.HttpClient.streamsApiVersion){if(operation.hasEventOutput&&service.successfulResponse(resp))return resp.request.emit("httpDone"),void done();httpResp.on("readable",(function onReadable(){var data=httpResp.read();null!==data&&resp.request.emit("httpData",[data,resp])}))}else httpResp.on("data",(function onData(data){resp.request.emit("httpData",[data,resp])}))})),httpResp.on("end",(function onEnd(){if(!stream||!stream.didCallback){if(2===AWS.HttpClient.streamsApiVersion&&operation.hasEventOutput&&service.successfulResponse(resp))return;resp.request.emit("httpDone"),done()}}))}function error(err){if("RequestAbortedError"!==err.code){var errCode="TimeoutError"===err.code?err.code:"NetworkingError";err=AWS.util.error(err,{code:errCode,region:resp.request.httpRequest.region,hostname:resp.request.httpRequest.endpoint.hostname,retryable:!0})}resp.error=err,resp.request.emit("httpError",[resp.error,resp],(function(){done()}))}function executeSend(){var http=AWS.HttpClient.getInstance(),httpOptions=resp.request.service.config.httpOptions||{};try{!function progress(httpResp){httpResp.on("sendProgress",(function onSendProgress(value){resp.request.emit("httpUploadProgress",[value,resp])})),httpResp.on("receiveProgress",(function onReceiveProgress(value){resp.request.emit("httpDownloadProgress",[value,resp])}))}(http.handleRequest(resp.request.httpRequest,httpOptions,callback,error))}catch(err){error(err)}}resp.httpResponse._abortCallback=done,resp.error=null,resp.data=null,(resp.request.service.getSkewCorrectedDate()-this.signedAt)/1e3>=600?this.emit("sign",[this],(function(err){err?done(err):executeSend()})):executeSend()})),add("HTTP_HEADERS","httpHeaders",(function HTTP_HEADERS(statusCode,headers,resp,statusMessage){resp.httpResponse.statusCode=statusCode,resp.httpResponse.statusMessage=statusMessage,resp.httpResponse.headers=headers,resp.httpResponse.body=AWS.util.buffer.toBuffer(""),resp.httpResponse.buffers=[],resp.httpResponse.numBytes=0;var dateHeader=headers.date||headers.Date,service=resp.request.service;if(dateHeader){var serverTime=Date.parse(dateHeader);service.config.correctClockSkew&&service.isClockSkewed(serverTime)&&service.applyClockOffset(serverTime)}})),add("HTTP_DATA","httpData",(function HTTP_DATA(chunk,resp){if(chunk){if(AWS.util.isNode()){resp.httpResponse.numBytes+=chunk.length;var total=resp.httpResponse.headers["content-length"],progress={loaded:resp.httpResponse.numBytes,total};resp.request.emit("httpDownloadProgress",[progress,resp])}resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk))}})),add("HTTP_DONE","httpDone",(function HTTP_DONE(resp){if(resp.httpResponse.buffers&&resp.httpResponse.buffers.length>0){var body=AWS.util.buffer.concat(resp.httpResponse.buffers);resp.httpResponse.body=body}delete resp.httpResponse.numBytes,delete resp.httpResponse.buffers})),add("FINALIZE_ERROR","retry",(function FINALIZE_ERROR(resp){resp.httpResponse.statusCode&&(resp.error.statusCode=resp.httpResponse.statusCode,void 0===resp.error.retryable&&(resp.error.retryable=this.service.retryableError(resp.error,this)))})),add("INVALIDATE_CREDENTIALS","retry",(function INVALIDATE_CREDENTIALS(resp){if(resp.error)switch(resp.error.code){case"RequestExpired":case"ExpiredTokenException":case"ExpiredToken":resp.error.retryable=!0,resp.request.service.config.credentials.expired=!0}})),add("EXPIRED_SIGNATURE","retry",(function EXPIRED_SIGNATURE(resp){var err=resp.error;err&&"string"==typeof err.code&&"string"==typeof err.message&&err.code.match(/Signature/)&&err.message.match(/expired/)&&(resp.error.retryable=!0)})),add("CLOCK_SKEWED","retry",(function CLOCK_SKEWED(resp){resp.error&&this.service.clockSkewError(resp.error)&&this.service.config.correctClockSkew&&(resp.error.retryable=!0)})),add("REDIRECT","retry",(function REDIRECT(resp){resp.error&&resp.error.statusCode>=300&&resp.error.statusCode<400&&resp.httpResponse.headers.location&&(this.httpRequest.endpoint=new AWS.Endpoint(resp.httpResponse.headers.location),this.httpRequest.headers.Host=this.httpRequest.endpoint.host,resp.error.redirect=!0,resp.error.retryable=!0)})),add("RETRY_CHECK","retry",(function RETRY_CHECK(resp){resp.error&&(resp.error.redirect&&resp.redirectCount<resp.maxRedirects?resp.error.retryDelay=0:resp.retryCount<resp.maxRetries&&(resp.error.retryDelay=this.service.retryDelays(resp.retryCount,resp.error)||0))})),addAsync("RESET_RETRY_STATE","afterRetry",(function RESET_RETRY_STATE(resp,done){var delay,willRetry=!1;resp.error&&(delay=resp.error.retryDelay||0,resp.error.retryable&&resp.retryCount<resp.maxRetries?(resp.retryCount++,willRetry=!0):resp.error.redirect&&resp.redirectCount<resp.maxRedirects&&(resp.redirectCount++,willRetry=!0)),willRetry&&delay>=0?(resp.error=null,setTimeout(done,delay)):done()}))})),CorePost:(new SequentialExecutor).addNamedListeners((function(add){add("EXTRACT_REQUEST_ID","extractData",AWS.util.extractRequestId),add("EXTRACT_REQUEST_ID","extractError",AWS.util.extractRequestId),add("ENOTFOUND_ERROR","httpError",(function ENOTFOUND_ERROR(err){if("NetworkingError"===err.code&&function isDNSError(err){return"ENOTFOUND"===err.errno||"number"==typeof err.errno&&"function"==typeof AWS.util.getSystemErrorName&&["EAI_NONAME","EAI_NODATA"].indexOf(AWS.util.getSystemErrorName(err.errno)>=0)}(err)){var message="Inaccessible host: `"+err.hostname+"' at port `"+err.port+"'. This service may not be available in the `"+err.region+"' region.";this.response.error=AWS.util.error(new Error(message),{code:"UnknownEndpoint",region:err.region,hostname:err.hostname,retryable:!0,originalError:err})}}))})),Logger:(new SequentialExecutor).addNamedListeners((function(add){add("LOG_REQUEST","complete",(function LOG_REQUEST(resp){var req=resp.request,logger=req.service.config.logger;if(logger){var line=function buildMessage(){var delta=(resp.request.service.getSkewCorrectedDate().getTime()-req.startTime.getTime())/1e3,ansi=!!logger.isTTY,status=resp.httpResponse.statusCode,censoredParams=req.params;req.service.api.operations&&req.service.api.operations[req.operation]&&req.service.api.operations[req.operation].input&&(censoredParams=filterSensitiveLog(req.service.api.operations[req.operation].input,req.params));var params=__webpack_require__("./node_modules/util/util.js").inspect(censoredParams,!0,null),message="";return ansi&&(message+="[33m"),message+="[AWS "+req.service.serviceIdentifier+" "+status,message+=" "+delta.toString()+"s "+resp.retryCount+" retries]",ansi&&(message+="[0;1m"),message+=" "+AWS.util.string.lowerFirst(req.operation),message+="("+params+")",ansi&&(message+="[0m"),message}();"function"==typeof logger.log?logger.log(line):"function"==typeof logger.write&&logger.write(line+"\n")}function filterSensitiveLog(inputShape,shape){if(!shape)return shape;if(inputShape.isSensitive)return"***SensitiveInformation***";switch(inputShape.type){case"structure":var struct={};return AWS.util.each(shape,(function(subShapeName,subShape){Object.prototype.hasOwnProperty.call(inputShape.members,subShapeName)?struct[subShapeName]=filterSensitiveLog(inputShape.members[subShapeName],subShape):struct[subShapeName]=subShape})),struct;case"list":var list=[];return AWS.util.arrayEach(shape,(function(subShape,index){list.push(filterSensitiveLog(inputShape.member,subShape))})),list;case"map":var map={};return AWS.util.each(shape,(function(key,value){map[key]=filterSensitiveLog(inputShape.value,value)})),map;default:return shape}}}))})),Json:(new SequentialExecutor).addNamedListeners((function(add){var svc=__webpack_require__("./node_modules/aws-sdk/lib/protocol/json.js");add("BUILD","build",svc.buildRequest),add("EXTRACT_DATA","extractData",svc.extractData),add("EXTRACT_ERROR","extractError",svc.extractError)})),Rest:(new SequentialExecutor).addNamedListeners((function(add){var svc=__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest.js");add("BUILD","build",svc.buildRequest),add("EXTRACT_DATA","extractData",svc.extractData),add("EXTRACT_ERROR","extractError",svc.extractError)})),RestJson:(new SequentialExecutor).addNamedListeners((function(add){var svc=__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest_json.js");add("BUILD","build",svc.buildRequest),add("EXTRACT_DATA","extractData",svc.extractData),add("EXTRACT_ERROR","extractError",svc.extractError),add("UNSET_CONTENT_LENGTH","afterBuild",svc.unsetContentLength)})),RestXml:(new SequentialExecutor).addNamedListeners((function(add){var svc=__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest_xml.js");add("BUILD","build",svc.buildRequest),add("EXTRACT_DATA","extractData",svc.extractData),add("EXTRACT_ERROR","extractError",svc.extractError)})),Query:(new SequentialExecutor).addNamedListeners((function(add){var svc=__webpack_require__("./node_modules/aws-sdk/lib/protocol/query.js");add("BUILD","build",svc.buildRequest),add("EXTRACT_DATA","extractData",svc.extractData),add("EXTRACT_ERROR","extractError",svc.extractError)}))}},"./node_modules/aws-sdk/lib/http.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit;AWS.Endpoint=inherit({constructor:function Endpoint(endpoint,config){if(AWS.util.hideProperties(this,["slashes","auth","hash","search","query"]),null==endpoint)throw new Error("Invalid endpoint: "+endpoint);if("string"!=typeof endpoint)return AWS.util.copy(endpoint);endpoint.match(/^http/)||(endpoint=((config&&void 0!==config.sslEnabled?config.sslEnabled:AWS.config.sslEnabled)?"https":"http")+"://"+endpoint);AWS.util.update(this,AWS.util.urlParse(endpoint)),this.port?this.port=parseInt(this.port,10):this.port="https:"===this.protocol?443:80}}),AWS.HttpRequest=inherit({constructor:function HttpRequest(endpoint,region){endpoint=new AWS.Endpoint(endpoint),this.method="POST",this.path=endpoint.path||"/",this.headers={},this.body="",this.endpoint=endpoint,this.region=region,this._userAgent="",this.setUserAgent()},setUserAgent:function setUserAgent(){this._userAgent=this.headers[this.getUserAgentHeaderName()]=AWS.util.userAgent()},getUserAgentHeaderName:function getUserAgentHeaderName(){return(AWS.util.isBrowser()?"X-Amz-":"")+"User-Agent"},appendToUserAgent:function appendToUserAgent(agentPartial){"string"==typeof agentPartial&&agentPartial&&(this._userAgent+=" "+agentPartial),this.headers[this.getUserAgentHeaderName()]=this._userAgent},getUserAgent:function getUserAgent(){return this._userAgent},pathname:function pathname(){return this.path.split("?",1)[0]},search:function search(){var query=this.path.split("?",2)[1];return query?(query=AWS.util.queryStringParse(query),AWS.util.queryParamsToString(query)):""},updateEndpoint:function updateEndpoint(endpointStr){var newEndpoint=new AWS.Endpoint(endpointStr);this.endpoint=newEndpoint,this.path=newEndpoint.path||"/",this.headers.Host&&(this.headers.Host=newEndpoint.host)}}),AWS.HttpResponse=inherit({constructor:function HttpResponse(){this.statusCode=void 0,this.headers={},this.body=void 0,this.streaming=!1,this.stream=null},createUnbufferedStream:function createUnbufferedStream(){return this.streaming=!0,this.stream}}),AWS.HttpClient=inherit({}),AWS.HttpClient.getInstance=function getInstance(){return void 0===this.singleton&&(this.singleton=new this),this.singleton}},"./node_modules/aws-sdk/lib/json/builder.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js");function JsonBuilder(){}function translate(value,shape){if(shape&&null!=value)switch(shape.type){case"structure":return function translateStructure(structure,shape){if(shape.isDocument)return structure;var struct={};return util.each(structure,(function(name,value){var memberShape=shape.members[name];if(memberShape){if("body"!==memberShape.location)return;var locationName=memberShape.isLocationName?memberShape.name:name,result=translate(value,memberShape);void 0!==result&&(struct[locationName]=result)}})),struct}(value,shape);case"map":return function translateMap(map,shape){var out={};return util.each(map,(function(key,value){var result=translate(value,shape.value);void 0!==result&&(out[key]=result)})),out}(value,shape);case"list":return function translateList(list,shape){var out=[];return util.arrayEach(list,(function(value){var result=translate(value,shape.member);void 0!==result&&out.push(result)})),out}(value,shape);default:return function translateScalar(value,shape){return shape.toWireFormat(value)}(value,shape)}}JsonBuilder.prototype.build=function(value,shape){return JSON.stringify(translate(value,shape))},module.exports=JsonBuilder},"./node_modules/aws-sdk/lib/json/parser.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js");function JsonParser(){}function translate(value,shape){if(shape&&void 0!==value)switch(shape.type){case"structure":return function translateStructure(structure,shape){if(null==structure)return;if(shape.isDocument)return structure;var struct={},shapeMembers=shape.members;return util.each(shapeMembers,(function(name,memberShape){var locationName=memberShape.isLocationName?memberShape.name:name;if(Object.prototype.hasOwnProperty.call(structure,locationName)){var result=translate(structure[locationName],memberShape);void 0!==result&&(struct[name]=result)}})),struct}(value,shape);case"map":return function translateMap(map,shape){if(null==map)return;var out={};return util.each(map,(function(key,value){var result=translate(value,shape.value);out[key]=void 0===result?null:result})),out}(value,shape);case"list":return function translateList(list,shape){if(null==list)return;var out=[];return util.arrayEach(list,(function(value){var result=translate(value,shape.member);void 0===result?out.push(null):out.push(result)})),out}(value,shape);default:return function translateScalar(value,shape){return shape.toType(value)}(value,shape)}}JsonParser.prototype.parse=function(value,shape){return translate(JSON.parse(value),shape)},module.exports=JsonParser},"./node_modules/aws-sdk/lib/model/api.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Collection=__webpack_require__("./node_modules/aws-sdk/lib/model/collection.js"),Operation=__webpack_require__("./node_modules/aws-sdk/lib/model/operation.js"),Shape=__webpack_require__("./node_modules/aws-sdk/lib/model/shape.js"),Paginator=__webpack_require__("./node_modules/aws-sdk/lib/model/paginator.js"),ResourceWaiter=__webpack_require__("./node_modules/aws-sdk/lib/model/resource_waiter.js"),metadata=__webpack_require__("./node_modules/aws-sdk/apis/metadata.json"),util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),property=util.property,memoizedProperty=util.memoizedProperty;module.exports=function Api(api,options){var self=this;api=api||{},(options=options||{}).api=this,api.metadata=api.metadata||{};var serviceIdentifier=options.serviceIdentifier;delete options.serviceIdentifier,property(this,"isApi",!0,!1),property(this,"apiVersion",api.metadata.apiVersion),property(this,"endpointPrefix",api.metadata.endpointPrefix),property(this,"signingName",api.metadata.signingName),property(this,"globalEndpoint",api.metadata.globalEndpoint),property(this,"signatureVersion",api.metadata.signatureVersion),property(this,"jsonVersion",api.metadata.jsonVersion),property(this,"targetPrefix",api.metadata.targetPrefix),property(this,"protocol",api.metadata.protocol),property(this,"timestampFormat",api.metadata.timestampFormat),property(this,"xmlNamespaceUri",api.metadata.xmlNamespace),property(this,"abbreviation",api.metadata.serviceAbbreviation),property(this,"fullName",api.metadata.serviceFullName),property(this,"serviceId",api.metadata.serviceId),serviceIdentifier&&metadata[serviceIdentifier]&&property(this,"xmlNoDefaultLists",metadata[serviceIdentifier].xmlNoDefaultLists,!1),memoizedProperty(this,"className",(function(){var name=api.metadata.serviceAbbreviation||api.metadata.serviceFullName;return name?("ElasticLoadBalancing"===(name=name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g,""))&&(name="ELB"),name):null})),property(this,"operations",new Collection(api.operations,options,(function(name,operation){return new Operation(name,operation,options)}),util.string.lowerFirst,(function addEndpointOperation(name,operation){!0===operation.endpointoperation&&property(self,"endpointOperation",util.string.lowerFirst(name)),operation.endpointdiscovery&&!self.hasRequiredEndpointDiscovery&&property(self,"hasRequiredEndpointDiscovery",!0===operation.endpointdiscovery.required)}))),property(this,"shapes",new Collection(api.shapes,options,(function(name,shape){return Shape.create(shape,options)}))),property(this,"paginators",new Collection(api.paginators,options,(function(name,paginator){return new Paginator(name,paginator,options)}))),property(this,"waiters",new Collection(api.waiters,options,(function(name,waiter){return new ResourceWaiter(name,waiter,options)}),util.string.lowerFirst)),options.documentation&&(property(this,"documentation",api.documentation),property(this,"documentationUrl",api.documentationUrl))}},"./node_modules/aws-sdk/lib/model/collection.js":(module,__unused_webpack_exports,__webpack_require__)=>{var memoizedProperty=__webpack_require__("./node_modules/aws-sdk/lib/util.js").memoizedProperty;function memoize(name,value,factory,nameTr){memoizedProperty(this,nameTr(name),(function(){return factory(name,value)}))}module.exports=function Collection(iterable,options,factory,nameTr,callback){for(var id in nameTr=nameTr||String,iterable)Object.prototype.hasOwnProperty.call(iterable,id)&&(memoize.call(this,id,iterable[id],factory,nameTr),callback&&callback(id,iterable[id]))}},"./node_modules/aws-sdk/lib/model/operation.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Shape=__webpack_require__("./node_modules/aws-sdk/lib/model/shape.js"),util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),property=util.property,memoizedProperty=util.memoizedProperty;module.exports=function Operation(name,operation,options){var self=this;options=options||{},property(this,"name",operation.name||name),property(this,"api",options.api,!1),operation.http=operation.http||{},property(this,"endpoint",operation.endpoint),property(this,"httpMethod",operation.http.method||"POST"),property(this,"httpPath",operation.http.requestUri||"/"),property(this,"authtype",operation.authtype||""),property(this,"endpointDiscoveryRequired",operation.endpointdiscovery?operation.endpointdiscovery.required?"REQUIRED":"OPTIONAL":"NULL");var httpChecksumRequired=operation.httpChecksumRequired||operation.httpChecksum&&operation.httpChecksum.requestChecksumRequired;property(this,"httpChecksumRequired",httpChecksumRequired,!1),memoizedProperty(this,"input",(function(){return operation.input?Shape.create(operation.input,options):new Shape.create({type:"structure"},options)})),memoizedProperty(this,"output",(function(){return operation.output?Shape.create(operation.output,options):new Shape.create({type:"structure"},options)})),memoizedProperty(this,"errors",(function(){var list=[];if(!operation.errors)return null;for(var i=0;i<operation.errors.length;i++)list.push(Shape.create(operation.errors[i],options));return list})),memoizedProperty(this,"paginator",(function(){return options.api.paginators[name]})),options.documentation&&(property(this,"documentation",operation.documentation),property(this,"documentationUrl",operation.documentationUrl)),memoizedProperty(this,"idempotentMembers",(function(){var idempotentMembers=[],input=self.input,members=input.members;if(!input.members)return idempotentMembers;for(var name in members)members.hasOwnProperty(name)&&!0===members[name].isIdempotent&&idempotentMembers.push(name);return idempotentMembers})),memoizedProperty(this,"hasEventOutput",(function(){return function hasEventStream(topLevelShape){var members=topLevelShape.members,payload=topLevelShape.payload;if(!topLevelShape.members)return!1;if(payload){return members[payload].isEventStream}for(var name in members)if(!members.hasOwnProperty(name)&&!0===members[name].isEventStream)return!0;return!1}(self.output)}))}},"./node_modules/aws-sdk/lib/model/paginator.js":(module,__unused_webpack_exports,__webpack_require__)=>{var property=__webpack_require__("./node_modules/aws-sdk/lib/util.js").property;module.exports=function Paginator(name,paginator){property(this,"inputToken",paginator.input_token),property(this,"limitKey",paginator.limit_key),property(this,"moreResults",paginator.more_results),property(this,"outputToken",paginator.output_token),property(this,"resultKey",paginator.result_key)}},"./node_modules/aws-sdk/lib/model/resource_waiter.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),property=util.property;module.exports=function ResourceWaiter(name,waiter,options){options=options||{},property(this,"name",name),property(this,"api",options.api,!1),waiter.operation&&property(this,"operation",util.string.lowerFirst(waiter.operation));var self=this;["type","description","delay","maxAttempts","acceptors"].forEach((function(key){var value=waiter[key];value&&property(self,key,value)}))}},"./node_modules/aws-sdk/lib/model/shape.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Collection=__webpack_require__("./node_modules/aws-sdk/lib/model/collection.js"),util=__webpack_require__("./node_modules/aws-sdk/lib/util.js");function property(obj,name,value){null!=value&&util.property.apply(this,arguments)}function memoizedProperty(obj,name){obj.constructor.prototype[name]||util.memoizedProperty.apply(this,arguments)}function Shape(shape,options,memberName){options=options||{},property(this,"shape",shape.shape),property(this,"api",options.api,!1),property(this,"type",shape.type),property(this,"enum",shape.enum),property(this,"min",shape.min),property(this,"max",shape.max),property(this,"pattern",shape.pattern),property(this,"location",shape.location||this.location||"body"),property(this,"name",this.name||shape.xmlName||shape.queryName||shape.locationName||memberName),property(this,"isStreaming",shape.streaming||this.isStreaming||!1),property(this,"requiresLength",shape.requiresLength,!1),property(this,"isComposite",shape.isComposite||!1),property(this,"isShape",!0,!1),property(this,"isQueryName",Boolean(shape.queryName),!1),property(this,"isLocationName",Boolean(shape.locationName),!1),property(this,"isIdempotent",!0===shape.idempotencyToken),property(this,"isJsonValue",!0===shape.jsonvalue),property(this,"isSensitive",!0===shape.sensitive||shape.prototype&&!0===shape.prototype.sensitive),property(this,"isEventStream",Boolean(shape.eventstream),!1),property(this,"isEvent",Boolean(shape.event),!1),property(this,"isEventPayload",Boolean(shape.eventpayload),!1),property(this,"isEventHeader",Boolean(shape.eventheader),!1),property(this,"isTimestampFormatSet",Boolean(shape.timestampFormat)||shape.prototype&&!0===shape.prototype.isTimestampFormatSet,!1),property(this,"endpointDiscoveryId",Boolean(shape.endpointdiscoveryid),!1),property(this,"hostLabel",Boolean(shape.hostLabel),!1),options.documentation&&(property(this,"documentation",shape.documentation),property(this,"documentationUrl",shape.documentationUrl)),shape.xmlAttribute&&property(this,"isXmlAttribute",shape.xmlAttribute||!1),property(this,"defaultValue",null),this.toWireFormat=function(value){return null==value?"":value},this.toType=function(value){return value}}function CompositeShape(shape){Shape.apply(this,arguments),property(this,"isComposite",!0),shape.flattened&&property(this,"flattened",shape.flattened||!1)}function StructureShape(shape,options){var self=this,requiredMap=null,firstInit=!this.isShape;CompositeShape.apply(this,arguments),firstInit&&(property(this,"defaultValue",(function(){return{}})),property(this,"members",{}),property(this,"memberNames",[]),property(this,"required",[]),property(this,"isRequired",(function(){return!1})),property(this,"isDocument",Boolean(shape.document))),shape.members&&(property(this,"members",new Collection(shape.members,options,(function(name,member){return Shape.create(member,options,name)}))),memoizedProperty(this,"memberNames",(function(){return shape.xmlOrder||Object.keys(shape.members)})),shape.event&&(memoizedProperty(this,"eventPayloadMemberName",(function(){for(var members=self.members,memberNames=self.memberNames,i=0,iLen=memberNames.length;i<iLen;i++)if(members[memberNames[i]].isEventPayload)return memberNames[i]})),memoizedProperty(this,"eventHeaderMemberNames",(function(){for(var members=self.members,memberNames=self.memberNames,eventHeaderMemberNames=[],i=0,iLen=memberNames.length;i<iLen;i++)members[memberNames[i]].isEventHeader&&eventHeaderMemberNames.push(memberNames[i]);return eventHeaderMemberNames})))),shape.required&&(property(this,"required",shape.required),property(this,"isRequired",(function(name){if(!requiredMap){requiredMap={};for(var i=0;i<shape.required.length;i++)requiredMap[shape.required[i]]=!0}return requiredMap[name]}),!1,!0)),property(this,"resultWrapper",shape.resultWrapper||null),shape.payload&&property(this,"payload",shape.payload),"string"==typeof shape.xmlNamespace?property(this,"xmlNamespaceUri",shape.xmlNamespace):"object"==typeof shape.xmlNamespace&&(property(this,"xmlNamespacePrefix",shape.xmlNamespace.prefix),property(this,"xmlNamespaceUri",shape.xmlNamespace.uri))}function ListShape(shape,options){var self=this,firstInit=!this.isShape;if(CompositeShape.apply(this,arguments),firstInit&&property(this,"defaultValue",(function(){return[]})),shape.member&&memoizedProperty(this,"member",(function(){return Shape.create(shape.member,options)})),this.flattened){var oldName=this.name;memoizedProperty(this,"name",(function(){return self.member.name||oldName}))}}function MapShape(shape,options){var firstInit=!this.isShape;CompositeShape.apply(this,arguments),firstInit&&(property(this,"defaultValue",(function(){return{}})),property(this,"key",Shape.create({type:"string"},options)),property(this,"value",Shape.create({type:"string"},options))),shape.key&&memoizedProperty(this,"key",(function(){return Shape.create(shape.key,options)})),shape.value&&memoizedProperty(this,"value",(function(){return Shape.create(shape.value,options)}))}function StringShape(){Shape.apply(this,arguments);var nullLessProtocols=["rest-xml","query","ec2"];this.toType=function(value){return value=this.api&&nullLessProtocols.indexOf(this.api.protocol)>-1?value||"":value,this.isJsonValue?JSON.parse(value):value&&"function"==typeof value.toString?value.toString():value},this.toWireFormat=function(value){return this.isJsonValue?JSON.stringify(value):value}}function BinaryShape(){Shape.apply(this,arguments),this.toType=function(value){var buf=util.base64.decode(value);if(this.isSensitive&&util.isNode()&&"function"==typeof util.Buffer.alloc){var secureBuf=util.Buffer.alloc(buf.length,buf);buf.fill(0),buf=secureBuf}return buf},this.toWireFormat=util.base64.encode}function Base64Shape(){BinaryShape.apply(this,arguments)}function BooleanShape(){Shape.apply(this,arguments),this.toType=function(value){return"boolean"==typeof value?value:null==value?null:"true"===value}}Shape.normalizedTypes={character:"string",double:"float",long:"integer",short:"integer",biginteger:"integer",bigdecimal:"float",blob:"binary"},Shape.types={structure:StructureShape,list:ListShape,map:MapShape,boolean:BooleanShape,timestamp:function TimestampShape(shape){var self=this;if(Shape.apply(this,arguments),shape.timestampFormat)property(this,"timestampFormat",shape.timestampFormat);else if(self.isTimestampFormatSet&&this.timestampFormat)property(this,"timestampFormat",this.timestampFormat);else if("header"===this.location)property(this,"timestampFormat","rfc822");else if("querystring"===this.location)property(this,"timestampFormat","iso8601");else if(this.api)switch(this.api.protocol){case"json":case"rest-json":property(this,"timestampFormat","unixTimestamp");break;case"rest-xml":case"query":case"ec2":property(this,"timestampFormat","iso8601")}this.toType=function(value){return null==value?null:"function"==typeof value.toUTCString?value:"string"==typeof value||"number"==typeof value?util.date.parseTimestamp(value):null},this.toWireFormat=function(value){return util.date.format(value,self.timestampFormat)}},float:function FloatShape(){Shape.apply(this,arguments),this.toType=function(value){return null==value?null:parseFloat(value)},this.toWireFormat=this.toType},integer:function IntegerShape(){Shape.apply(this,arguments),this.toType=function(value){return null==value?null:parseInt(value,10)},this.toWireFormat=this.toType},string:StringShape,base64:Base64Shape,binary:BinaryShape},Shape.resolve=function resolve(shape,options){if(shape.shape){var refShape=options.api.shapes[shape.shape];if(!refShape)throw new Error("Cannot find shape reference: "+shape.shape);return refShape}return null},Shape.create=function create(shape,options,memberName){if(shape.isShape)return shape;var refShape=Shape.resolve(shape,options);if(refShape){var filteredKeys=Object.keys(shape);options.documentation||(filteredKeys=filteredKeys.filter((function(name){return!name.match(/documentation/)})));var InlineShape=function(){refShape.constructor.call(this,shape,options,memberName)};return InlineShape.prototype=refShape,new InlineShape}shape.type||(shape.members?shape.type="structure":shape.member?shape.type="list":shape.key?shape.type="map":shape.type="string");var origType=shape.type;if(Shape.normalizedTypes[shape.type]&&(shape.type=Shape.normalizedTypes[shape.type]),Shape.types[shape.type])return new Shape.types[shape.type](shape,options,memberName);throw new Error("Unrecognized shape type: "+origType)},Shape.shapes={StructureShape,ListShape,MapShape,StringShape,BooleanShape,Base64Shape},module.exports=Shape},"./node_modules/aws-sdk/lib/param_validator.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");AWS.ParamValidator=AWS.util.inherit({constructor:function ParamValidator(validation){!0!==validation&&void 0!==validation||(validation={min:!0}),this.validation=validation},validate:function validate(shape,params,context){if(this.errors=[],this.validateMember(shape,params||{},context||"params"),this.errors.length>1){var msg=this.errors.join("\n* ");throw msg="There were "+this.errors.length+" validation errors:\n* "+msg,AWS.util.error(new Error(msg),{code:"MultipleValidationErrors",errors:this.errors})}if(1===this.errors.length)throw this.errors[0];return!0},fail:function fail(code,message){this.errors.push(AWS.util.error(new Error(message),{code}))},validateStructure:function validateStructure(shape,params,context){if(shape.isDocument)return!0;var paramName;this.validateType(params,context,["object"],"structure");for(var i=0;shape.required&&i<shape.required.length;i++){var value=params[paramName=shape.required[i]];null==value&&this.fail("MissingRequiredParameter","Missing required key '"+paramName+"' in "+context)}for(paramName in params)if(Object.prototype.hasOwnProperty.call(params,paramName)){var paramValue=params[paramName],memberShape=shape.members[paramName];if(void 0!==memberShape){var memberContext=[context,paramName].join(".");this.validateMember(memberShape,paramValue,memberContext)}else null!=paramValue&&this.fail("UnexpectedParameter","Unexpected key '"+paramName+"' found in "+context)}return!0},validateMember:function validateMember(shape,param,context){switch(shape.type){case"structure":return this.validateStructure(shape,param,context);case"list":return this.validateList(shape,param,context);case"map":return this.validateMap(shape,param,context);default:return this.validateScalar(shape,param,context)}},validateList:function validateList(shape,params,context){if(this.validateType(params,context,[Array])){this.validateRange(shape,params.length,context,"list member count");for(var i=0;i<params.length;i++)this.validateMember(shape.member,params[i],context+"["+i+"]")}},validateMap:function validateMap(shape,params,context){if(this.validateType(params,context,["object"],"map")){var mapCount=0;for(var param in params)Object.prototype.hasOwnProperty.call(params,param)&&(this.validateMember(shape.key,param,context+"[key='"+param+"']"),this.validateMember(shape.value,params[param],context+"['"+param+"']"),mapCount++);this.validateRange(shape,mapCount,context,"map member count")}},validateScalar:function validateScalar(shape,value,context){switch(shape.type){case null:case void 0:case"string":return this.validateString(shape,value,context);case"base64":case"binary":return this.validatePayload(value,context);case"integer":case"float":return this.validateNumber(shape,value,context);case"boolean":return this.validateType(value,context,["boolean"]);case"timestamp":return this.validateType(value,context,[Date,/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/,"number"],"Date object, ISO-8601 string, or a UNIX timestamp");default:return this.fail("UnkownType","Unhandled type "+shape.type+" for "+context)}},validateString:function validateString(shape,value,context){var validTypes=["string"];shape.isJsonValue&&(validTypes=validTypes.concat(["number","object","boolean"])),null!==value&&this.validateType(value,context,validTypes)&&(this.validateEnum(shape,value,context),this.validateRange(shape,value.length,context,"string length"),this.validatePattern(shape,value,context),this.validateUri(shape,value,context))},validateUri:function validateUri(shape,value,context){"uri"===shape.location&&0===value.length&&this.fail("UriParameterError",'Expected uri parameter to have length >= 1, but found "'+value+'" for '+context)},validatePattern:function validatePattern(shape,value,context){this.validation.pattern&&void 0!==shape.pattern&&(new RegExp(shape.pattern).test(value)||this.fail("PatternMatchError",'Provided value "'+value+'" does not match regex pattern /'+shape.pattern+"/ for "+context))},validateRange:function validateRange(shape,value,context,descriptor){this.validation.min&&void 0!==shape.min&&value<shape.min&&this.fail("MinRangeError","Expected "+descriptor+" >= "+shape.min+", but found "+value+" for "+context),this.validation.max&&void 0!==shape.max&&value>shape.max&&this.fail("MaxRangeError","Expected "+descriptor+" <= "+shape.max+", but found "+value+" for "+context)},validateEnum:function validateRange(shape,value,context){this.validation.enum&&void 0!==shape.enum&&-1===shape.enum.indexOf(value)&&this.fail("EnumError","Found string value of "+value+", but expected "+shape.enum.join("|")+" for "+context)},validateType:function validateType(value,context,acceptedTypes,type){if(null==value)return!1;for(var foundInvalidType=!1,i=0;i<acceptedTypes.length;i++){if("string"==typeof acceptedTypes[i]){if(typeof value===acceptedTypes[i])return!0}else if(acceptedTypes[i]instanceof RegExp){if((value||"").toString().match(acceptedTypes[i]))return!0}else{if(value instanceof acceptedTypes[i])return!0;if(AWS.util.isType(value,acceptedTypes[i]))return!0;type||foundInvalidType||(acceptedTypes=acceptedTypes.slice()),acceptedTypes[i]=AWS.util.typeName(acceptedTypes[i])}foundInvalidType=!0}var acceptedType=type;acceptedType||(acceptedType=acceptedTypes.join(", ").replace(/,([^,]+)$/,", or$1"));var vowel=acceptedType.match(/^[aeiou]/i)?"n":"";return this.fail("InvalidParameterType","Expected "+context+" to be a"+vowel+" "+acceptedType),!1},validateNumber:function validateNumber(shape,value,context){if(null!=value){if("string"==typeof value){var castedValue=parseFloat(value);castedValue.toString()===value&&(value=castedValue)}this.validateType(value,context,["number"])&&this.validateRange(shape,value,context,"numeric value")}},validatePayload:function validatePayload(value,context){if(null!=value&&"string"!=typeof value&&(!value||"number"!=typeof value.byteLength)){if(AWS.util.isNode()){var Stream=AWS.util.stream.Stream;if(AWS.util.Buffer.isBuffer(value)||value instanceof Stream)return}else if(void 0!==typeof Blob&&value instanceof Blob)return;var types=["Buffer","Stream","File","Blob","ArrayBuffer","DataView"];if(value)for(var i=0;i<types.length;i++){if(AWS.util.isType(value,types[i]))return;if(AWS.util.typeName(value.constructor)===types[i])return}this.fail("InvalidParameterType","Expected "+context+" to be a string, Buffer, Stream, Blob, or typed array object")}}})},"./node_modules/aws-sdk/lib/protocol/helpers.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");module.exports={populateHostPrefix:function populateHostPrefix(request){if(!request.service.config.hostPrefixEnabled)return request;var operationModel=request.service.api.operations[request.operation];if(function hasEndpointDiscover(request){var api=request.service.api,operationModel=api.operations[request.operation],isEndpointOperation=api.endpointOperation&&api.endpointOperation===util.string.lowerFirst(operationModel.name);return"NULL"!==operationModel.endpointDiscoveryRequired||!0===isEndpointOperation}(request))return request;if(operationModel.endpoint&&operationModel.endpoint.hostPrefix){var hostPrefix=function expandHostPrefix(hostPrefixNotation,params,shape){return util.each(shape.members,(function(name,member){if(!0===member.hostLabel){if("string"!=typeof params[name]||""===params[name])throw util.error(new Error,{message:"Parameter "+name+" should be a non-empty string.",code:"InvalidParameter"});var regex=new RegExp("\\{"+name+"\\}","g");hostPrefixNotation=hostPrefixNotation.replace(regex,params[name])}})),hostPrefixNotation}(operationModel.endpoint.hostPrefix,request.params,operationModel.input);!function prependEndpointPrefix(endpoint,prefix){endpoint.host&&(endpoint.host=prefix+endpoint.host);endpoint.hostname&&(endpoint.hostname=prefix+endpoint.hostname)}(request.httpRequest.endpoint,hostPrefix),function validateHostname(hostname){var labels=hostname.split("."),hostPattern=/^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;util.arrayEach(labels,(function(label){if(!label.length||label.length<1||label.length>63)throw util.error(new Error,{code:"ValidationError",message:"Hostname label length should be between 1 to 63 characters, inclusive."});if(!hostPattern.test(label))throw AWS.util.error(new Error,{code:"ValidationError",message:label+" is not hostname compatible."})}))}(request.httpRequest.endpoint.hostname)}return request}}},"./node_modules/aws-sdk/lib/protocol/json.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),JsonBuilder=__webpack_require__("./node_modules/aws-sdk/lib/json/builder.js"),JsonParser=__webpack_require__("./node_modules/aws-sdk/lib/json/parser.js"),populateHostPrefix=__webpack_require__("./node_modules/aws-sdk/lib/protocol/helpers.js").populateHostPrefix;module.exports={buildRequest:function buildRequest(req){var httpRequest=req.httpRequest,api=req.service.api,target=api.targetPrefix+"."+api.operations[req.operation].name,version=api.jsonVersion||"1.0",input=api.operations[req.operation].input,builder=new JsonBuilder;1===version&&(version="1.0"),httpRequest.body=builder.build(req.params||{},input),httpRequest.headers["Content-Type"]="application/x-amz-json-"+version,httpRequest.headers["X-Amz-Target"]=target,populateHostPrefix(req)},extractError:function extractError(resp){var error={},httpResponse=resp.httpResponse;if(error.code=httpResponse.headers["x-amzn-errortype"]||"UnknownError","string"==typeof error.code&&(error.code=error.code.split(":")[0]),httpResponse.body.length>0)try{var e=JSON.parse(httpResponse.body.toString()),code=e.__type||e.code||e.Code;code&&(error.code=code.split("#").pop()),"RequestEntityTooLarge"===error.code?error.message="Request body must be less than 1 MB":error.message=e.message||e.Message||null}catch(e){error.statusCode=httpResponse.statusCode,error.message=httpResponse.statusMessage}else error.statusCode=httpResponse.statusCode,error.message=httpResponse.statusCode.toString();resp.error=util.error(new Error,error)},extractData:function extractData(resp){var body=resp.httpResponse.body.toString()||"{}";if(!1===resp.request.service.config.convertResponseTypes)resp.data=JSON.parse(body);else{var shape=resp.request.service.api.operations[resp.request.operation].output||{},parser=new JsonParser;resp.data=parser.parse(body,shape)}}}},"./node_modules/aws-sdk/lib/protocol/query.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),QueryParamSerializer=__webpack_require__("./node_modules/aws-sdk/lib/query/query_param_serializer.js"),Shape=__webpack_require__("./node_modules/aws-sdk/lib/model/shape.js"),populateHostPrefix=__webpack_require__("./node_modules/aws-sdk/lib/protocol/helpers.js").populateHostPrefix;module.exports={buildRequest:function buildRequest(req){var operation=req.service.api.operations[req.operation],httpRequest=req.httpRequest;httpRequest.headers["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8",httpRequest.params={Version:req.service.api.apiVersion,Action:operation.name},(new QueryParamSerializer).serialize(req.params,operation.input,(function(name,value){httpRequest.params[name]=value})),httpRequest.body=util.queryParamsToString(httpRequest.params),populateHostPrefix(req)},extractError:function extractError(resp){var data,body=resp.httpResponse.body.toString();if(body.match("<UnknownOperationException"))data={Code:"UnknownOperation",Message:"Unknown operation "+resp.request.operation};else try{data=(new AWS.XML.Parser).parse(body)}catch(e){data={Code:resp.httpResponse.statusCode,Message:resp.httpResponse.statusMessage}}data.requestId&&!resp.requestId&&(resp.requestId=data.requestId),data.Errors&&(data=data.Errors),data.Error&&(data=data.Error),data.Code?resp.error=util.error(new Error,{code:data.Code,message:data.Message}):resp.error=util.error(new Error,{code:resp.httpResponse.statusCode,message:null})},extractData:function extractData(resp){var req=resp.request,shape=req.service.api.operations[req.operation].output||{},origRules=shape;if(origRules.resultWrapper){var tmp=Shape.create({type:"structure"});tmp.members[origRules.resultWrapper]=shape,tmp.memberNames=[origRules.resultWrapper],util.property(shape,"name",shape.resultWrapper),shape=tmp}var parser=new AWS.XML.Parser;if(shape&&shape.members&&!shape.members._XAMZRequestId){var requestIdShape=Shape.create({type:"string"},{api:{protocol:"query"}},"requestId");shape.members._XAMZRequestId=requestIdShape}var data=parser.parse(resp.httpResponse.body.toString(),shape);resp.requestId=data._XAMZRequestId||data.requestId,data._XAMZRequestId&&delete data._XAMZRequestId,origRules.resultWrapper&&data[origRules.resultWrapper]&&(util.update(data,data[origRules.resultWrapper]),delete data[origRules.resultWrapper]),resp.data=data}}},"./node_modules/aws-sdk/lib/protocol/rest.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),populateHostPrefix=__webpack_require__("./node_modules/aws-sdk/lib/protocol/helpers.js").populateHostPrefix;function generateURI(endpointPath,operationPath,input,params){var uri=[endpointPath,operationPath].join("/");uri=uri.replace(/\/+/g,"/");var queryString={},queryStringSet=!1;if(util.each(input.members,(function(name,member){var paramValue=params[name];if(null!=paramValue)if("uri"===member.location){var regex=new RegExp("\\{"+member.name+"(\\+)?\\}");uri=uri.replace(regex,(function(_,plus){return(plus?util.uriEscapePath:util.uriEscape)(String(paramValue))}))}else"querystring"===member.location&&(queryStringSet=!0,"list"===member.type?queryString[member.name]=paramValue.map((function(val){return util.uriEscape(member.member.toWireFormat(val).toString())})):"map"===member.type?util.each(paramValue,(function(key,value){Array.isArray(value)?queryString[key]=value.map((function(val){return util.uriEscape(String(val))})):queryString[key]=util.uriEscape(String(value))})):queryString[member.name]=util.uriEscape(member.toWireFormat(paramValue).toString()))})),queryStringSet){uri+=uri.indexOf("?")>=0?"&":"?";var parts=[];util.arrayEach(Object.keys(queryString).sort(),(function(key){Array.isArray(queryString[key])||(queryString[key]=[queryString[key]]);for(var i=0;i<queryString[key].length;i++)parts.push(util.uriEscape(String(key))+"="+queryString[key][i])})),uri+=parts.join("&")}return uri}module.exports={buildRequest:function buildRequest(req){!function populateMethod(req){req.httpRequest.method=req.service.api.operations[req.operation].httpMethod}(req),function populateURI(req){var operation=req.service.api.operations[req.operation],input=operation.input,uri=generateURI(req.httpRequest.endpoint.path,operation.httpPath,input,req.params);req.httpRequest.path=uri}(req),function populateHeaders(req){var operation=req.service.api.operations[req.operation];util.each(operation.input.members,(function(name,member){var value=req.params[name];null!=value&&("headers"===member.location&&"map"===member.type?util.each(value,(function(key,memberValue){req.httpRequest.headers[member.name+key]=memberValue})):"header"===member.location&&(value=member.toWireFormat(value).toString(),member.isJsonValue&&(value=util.base64.encode(value)),req.httpRequest.headers[member.name]=value))}))}(req),populateHostPrefix(req)},extractError:function extractError(){},extractData:function extractData(resp){var req=resp.request,data={},r=resp.httpResponse,output=req.service.api.operations[req.operation].output,headers={};util.each(r.headers,(function(k,v){headers[k.toLowerCase()]=v})),util.each(output.members,(function(name,member){var header=(member.name||name).toLowerCase();if("headers"===member.location&&"map"===member.type){data[name]={};var location=member.isLocationName?member.name:"",pattern=new RegExp("^"+location+"(.+)","i");util.each(r.headers,(function(k,v){var result=k.match(pattern);null!==result&&(data[name][result[1]]=v)}))}else if("header"===member.location){if(void 0!==headers[header]){var value=member.isJsonValue?util.base64.decode(headers[header]):headers[header];data[name]=member.toType(value)}}else"statusCode"===member.location&&(data[name]=parseInt(r.statusCode,10))})),resp.data=data},generateURI}},"./node_modules/aws-sdk/lib/protocol/rest_json.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),Rest=__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest.js"),Json=__webpack_require__("./node_modules/aws-sdk/lib/protocol/json.js"),JsonBuilder=__webpack_require__("./node_modules/aws-sdk/lib/json/builder.js"),JsonParser=__webpack_require__("./node_modules/aws-sdk/lib/json/parser.js"),METHODS_WITHOUT_BODY=["GET","HEAD","DELETE"];function applyContentTypeHeader(req,isBinary){if(!req.httpRequest.headers["Content-Type"]){var type=isBinary?"binary/octet-stream":"application/json";req.httpRequest.headers["Content-Type"]=type}}module.exports={buildRequest:function buildRequest(req){Rest.buildRequest(req),METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method)<0&&function populateBody(req){var builder=new JsonBuilder,input=req.service.api.operations[req.operation].input;if(input.payload){var params,payloadShape=input.members[input.payload];params=req.params[input.payload],"structure"===payloadShape.type?(req.httpRequest.body=builder.build(params||{},payloadShape),applyContentTypeHeader(req)):void 0!==params&&(req.httpRequest.body=params,("binary"===payloadShape.type||payloadShape.isStreaming)&&applyContentTypeHeader(req,!0))}else req.httpRequest.body=builder.build(req.params,input),applyContentTypeHeader(req)}(req)},extractError:function extractError(resp){Json.extractError(resp)},extractData:function extractData(resp){Rest.extractData(resp);var req=resp.request,operation=req.service.api.operations[req.operation],rules=req.service.api.operations[req.operation].output||{};if(operation.hasEventOutput,rules.payload){var payloadMember=rules.members[rules.payload],body=resp.httpResponse.body;if(payloadMember.isEventStream)parser=new JsonParser,resp.data[payload]=util.createEventStream(2===AWS.HttpClient.streamsApiVersion?resp.httpResponse.stream:body,parser,payloadMember);else if("structure"===payloadMember.type||"list"===payloadMember.type){var parser=new JsonParser;resp.data[rules.payload]=parser.parse(body,payloadMember)}else"binary"===payloadMember.type||payloadMember.isStreaming?resp.data[rules.payload]=body:resp.data[rules.payload]=payloadMember.toType(body)}else{var data=resp.data;Json.extractData(resp),resp.data=util.merge(data,resp.data)}},unsetContentLength:function unsetContentLength(req){void 0===util.getRequestPayloadShape(req)&&METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method)>=0&&delete req.httpRequest.headers["Content-Length"]}}},"./node_modules/aws-sdk/lib/protocol/rest_xml.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),Rest=__webpack_require__("./node_modules/aws-sdk/lib/protocol/rest.js");module.exports={buildRequest:function buildRequest(req){Rest.buildRequest(req),["GET","HEAD"].indexOf(req.httpRequest.method)<0&&function populateBody(req){var input=req.service.api.operations[req.operation].input,builder=new AWS.XML.Builder,params=req.params,payload=input.payload;if(payload){var payloadMember=input.members[payload];if(void 0===(params=params[payload]))return;if("structure"===payloadMember.type){var rootElement=payloadMember.name;req.httpRequest.body=builder.toXML(params,payloadMember,rootElement,!0)}else req.httpRequest.body=params}else req.httpRequest.body=builder.toXML(params,input,input.name||input.shape||util.string.upperFirst(req.operation)+"Request")}(req)},extractError:function extractError(resp){var data;Rest.extractError(resp);try{data=(new AWS.XML.Parser).parse(resp.httpResponse.body.toString())}catch(e){data={Code:resp.httpResponse.statusCode,Message:resp.httpResponse.statusMessage}}data.Errors&&(data=data.Errors),data.Error&&(data=data.Error),data.Code?resp.error=util.error(new Error,{code:data.Code,message:data.Message}):resp.error=util.error(new Error,{code:resp.httpResponse.statusCode,message:null})},extractData:function extractData(resp){var parser;Rest.extractData(resp);var req=resp.request,body=resp.httpResponse.body,operation=req.service.api.operations[req.operation],output=operation.output,payload=(operation.hasEventOutput,output.payload);if(payload){var payloadMember=output.members[payload];payloadMember.isEventStream?(parser=new AWS.XML.Parser,resp.data[payload]=util.createEventStream(2===AWS.HttpClient.streamsApiVersion?resp.httpResponse.stream:resp.httpResponse.body,parser,payloadMember)):"structure"===payloadMember.type?(parser=new AWS.XML.Parser,resp.data[payload]=parser.parse(body.toString(),payloadMember)):"binary"===payloadMember.type||payloadMember.isStreaming?resp.data[payload]=body:resp.data[payload]=payloadMember.toType(body)}else if(body.length>0){var data=(parser=new AWS.XML.Parser).parse(body.toString(),output);util.update(resp.data,data)}}}},"./node_modules/aws-sdk/lib/query/query_param_serializer.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js");function QueryParamSerializer(){}function ucfirst(shape){return shape.isQueryName||"ec2"!==shape.api.protocol?shape.name:shape.name[0].toUpperCase()+shape.name.substr(1)}function serializeStructure(prefix,struct,rules,fn){util.each(rules.members,(function(name,member){var value=struct[name];if(null!=value){var memberName=ucfirst(member);serializeMember(memberName=prefix?prefix+"."+memberName:memberName,value,member,fn)}}))}function serializeMember(name,value,rules,fn){null!=value&&("structure"===rules.type?serializeStructure(name,value,rules,fn):"list"===rules.type?function serializeList(name,list,rules,fn){var memberRules=rules.member||{};0!==list.length?util.arrayEach(list,(function(v,n){var suffix="."+(n+1);if("ec2"===rules.api.protocol)suffix+="";else if(rules.flattened){if(memberRules.name){var parts=name.split(".");parts.pop(),parts.push(ucfirst(memberRules)),name=parts.join(".")}}else suffix="."+(memberRules.name?memberRules.name:"member")+suffix;serializeMember(name+suffix,v,memberRules,fn)})):fn.call(this,name,null)}(name,value,rules,fn):"map"===rules.type?function serializeMap(name,map,rules,fn){var i=1;util.each(map,(function(key,value){var position=(rules.flattened?".":".entry.")+i+++".",keyName=position+(rules.key.name||"key"),valueName=position+(rules.value.name||"value");serializeMember(name+keyName,key,rules.key,fn),serializeMember(name+valueName,value,rules.value,fn)}))}(name,value,rules,fn):fn(name,rules.toWireFormat(value).toString()))}QueryParamSerializer.prototype.serialize=function(params,shape,fn){serializeStructure("",params,shape,fn)},module.exports=QueryParamSerializer},"./node_modules/aws-sdk/lib/region/utils.js":module=>{module.exports={isFipsRegion:function isFipsRegion(region){return"string"==typeof region&&(region.startsWith("fips-")||region.endsWith("-fips"))},isGlobalRegion:function isGlobalRegion(region){return"string"==typeof region&&["aws-global","aws-us-gov-global"].includes(region)},getRealRegion:function getRealRegion(region){return["fips-aws-global","aws-fips","aws-global"].includes(region)?"us-east-1":["fips-aws-us-gov-global","aws-us-gov-global"].includes(region)?"us-gov-west-1":region.replace(/fips-(dkr-|prod-)?|-fips/,"")}}},"./node_modules/aws-sdk/lib/region_config.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),regionConfig=__webpack_require__("./node_modules/aws-sdk/lib/region_config_data.json");function applyConfig(service,config){util.each(config,(function(key,value){"globalEndpoint"!==key&&(void 0!==service.config[key]&&null!==service.config[key]||(service.config[key]=value))}))}module.exports={configureEndpoint:function configureEndpoint(service){for(var keys=function derivedKeys(service){var region=service.config.region,regionPrefix=function generateRegionPrefix(region){if(!region)return null;var parts=region.split("-");return parts.length<3?null:parts.slice(0,parts.length-2).join("-")+"-*"}(region),endpointPrefix=service.api.endpointPrefix;return[[region,endpointPrefix],[regionPrefix,endpointPrefix],[region,"*"],[regionPrefix,"*"],["*",endpointPrefix],["*","*"]].map((function(item){return item[0]&&item[1]?item.join("/"):null}))}(service),useFipsEndpoint=service.config.useFipsEndpoint,useDualstackEndpoint=service.config.useDualstackEndpoint,i=0;i<keys.length;i++){var key=keys[i];if(key){var rules=useFipsEndpoint?useDualstackEndpoint?regionConfig.dualstackFipsRules:regionConfig.fipsRules:useDualstackEndpoint?regionConfig.dualstackRules:regionConfig.rules;if(Object.prototype.hasOwnProperty.call(rules,key)){var config=rules[key];return"string"==typeof config&&(config=regionConfig.patterns[config]),service.isGlobalEndpoint=!!config.globalEndpoint,config.signingRegion&&(service.signingRegion=config.signingRegion),config.signatureVersion||(config.signatureVersion="v4"),void applyConfig(service,config)}}}},getEndpointSuffix:function getEndpointSuffix(region){for(var regionRegexes={"^(us|eu|ap|sa|ca|me)\\-\\w+\\-\\d+$":"amazonaws.com","^cn\\-\\w+\\-\\d+$":"amazonaws.com.cn","^us\\-gov\\-\\w+\\-\\d+$":"amazonaws.com","^us\\-iso\\-\\w+\\-\\d+$":"c2s.ic.gov","^us\\-isob\\-\\w+\\-\\d+$":"sc2s.sgov.gov"},regexes=Object.keys(regionRegexes),i=0;i<regexes.length;i++){var regionPattern=RegExp(regexes[i]),dnsSuffix=regionRegexes[regexes[i]];if(regionPattern.test(region))return dnsSuffix}return"amazonaws.com"}}},"./node_modules/aws-sdk/lib/request.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var process=__webpack_require__("./node_modules/process/browser.js"),AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),AcceptorStateMachine=__webpack_require__("./node_modules/aws-sdk/lib/state_machine.js"),inherit=AWS.util.inherit,domain=AWS.util.domain,jmespath=__webpack_require__("./node_modules/jmespath/jmespath.js"),hardErrorStates={success:1,error:1,complete:1};var fsm=new AcceptorStateMachine;fsm.setupStates=function(){var transition=function(_,done){var self=this;self._haltHandlersOnError=!1,self.emit(self._asm.currentState,(function(err){if(err)if(function isTerminalState(machine){return Object.prototype.hasOwnProperty.call(hardErrorStates,machine._asm.currentState)}(self)){if(!(domain&&self.domain instanceof domain.Domain))throw err;err.domainEmitter=self,err.domain=self.domain,err.domainThrown=!1,self.domain.emit("error",err)}else self.response.error=err,done(err);else done(self.response.error)}))};this.addState("validate","build","error",transition),this.addState("build","afterBuild","restart",transition),this.addState("afterBuild","sign","restart",transition),this.addState("sign","send","retry",transition),this.addState("retry","afterRetry","afterRetry",transition),this.addState("afterRetry","sign","error",transition),this.addState("send","validateResponse","retry",transition),this.addState("validateResponse","extractData","extractError",transition),this.addState("extractError","extractData","retry",transition),this.addState("extractData","success","retry",transition),this.addState("restart","build","error",transition),this.addState("success","complete","complete",transition),this.addState("error","complete","complete",transition),this.addState("complete",null,null,transition)},fsm.setupStates(),AWS.Request=inherit({constructor:function Request(service,operation,params){var endpoint=service.endpoint,region=service.config.region,customUserAgent=service.config.customUserAgent;service.signingRegion?region=service.signingRegion:service.isGlobalEndpoint&&(region="us-east-1"),this.domain=domain&&domain.active,this.service=service,this.operation=operation,this.params=params||{},this.httpRequest=new AWS.HttpRequest(endpoint,region),this.httpRequest.appendToUserAgent(customUserAgent),this.startTime=service.getSkewCorrectedDate(),this.response=new AWS.Response(this),this._asm=new AcceptorStateMachine(fsm.states,"validate"),this._haltHandlersOnError=!1,AWS.SequentialExecutor.call(this),this.emit=this.emitEvent},send:function send(callback){return callback&&(this.httpRequest.appendToUserAgent("callback"),this.on("complete",(function(resp){callback.call(resp,resp.error,resp.data)}))),this.runTo(),this.response},build:function build(callback){return this.runTo("send",callback)},runTo:function runTo(state,done){return this._asm.runTo(state,done,this),this},abort:function abort(){return this.removeAllListeners("validateResponse"),this.removeAllListeners("extractError"),this.on("validateResponse",(function addAbortedError(resp){resp.error=AWS.util.error(new Error("Request aborted by user"),{code:"RequestAbortedError",retryable:!1})})),this.httpRequest.stream&&!this.httpRequest.stream.didCallback&&(this.httpRequest.stream.abort(),this.httpRequest._abortCallback?this.httpRequest._abortCallback():this.removeAllListeners("send")),this},eachPage:function eachPage(callback){callback=AWS.util.fn.makeAsync(callback,3),this.on("complete",(function wrappedCallback(response){callback.call(response,response.error,response.data,(function(result){!1!==result&&(response.hasNextPage()?response.nextPage().on("complete",wrappedCallback).send():callback.call(response,null,null,AWS.util.fn.noop))}))})).send()},eachItem:function eachItem(callback){var self=this;this.eachPage((function wrappedCallback(err,data){if(err)return callback(err,null);if(null===data)return callback(null,null);var resultKey=self.service.paginationConfig(self.operation).resultKey;Array.isArray(resultKey)&&(resultKey=resultKey[0]);var items=jmespath.search(data,resultKey),continueIteration=!0;return AWS.util.arrayEach(items,(function(item){if(!1===(continueIteration=callback(null,item)))return AWS.util.abort})),continueIteration}))},isPageable:function isPageable(){return!!this.service.paginationConfig(this.operation)},createReadStream:function createReadStream(){var streams=AWS.util.stream,req=this,stream=null;return 2===AWS.HttpClient.streamsApiVersion?(stream=new streams.PassThrough,process.nextTick((function(){req.send()}))):((stream=new streams.Stream).readable=!0,stream.sent=!1,stream.on("newListener",(function(event){stream.sent||"data"!==event||(stream.sent=!0,process.nextTick((function(){req.send()})))}))),this.on("error",(function(err){stream.emit("error",err)})),this.on("httpHeaders",(function streamHeaders(statusCode,headers,resp){if(statusCode<300){req.removeListener("httpData",AWS.EventListeners.Core.HTTP_DATA),req.removeListener("httpError",AWS.EventListeners.Core.HTTP_ERROR),req.on("httpError",(function streamHttpError(error){resp.error=error,resp.error.retryable=!1}));var expectedLen,shouldCheckContentLength=!1;if("HEAD"!==req.httpRequest.method&&(expectedLen=parseInt(headers["content-length"],10)),void 0!==expectedLen&&!isNaN(expectedLen)&&expectedLen>=0){shouldCheckContentLength=!0;var receivedLen=0}var checkContentLengthAndEmit=function checkContentLengthAndEmit(){shouldCheckContentLength&&receivedLen!==expectedLen?stream.emit("error",AWS.util.error(new Error("Stream content length mismatch. Received "+receivedLen+" of "+expectedLen+" bytes."),{code:"StreamContentLengthMismatch"})):2===AWS.HttpClient.streamsApiVersion?stream.end():stream.emit("end")},httpStream=resp.httpResponse.createUnbufferedStream();if(2===AWS.HttpClient.streamsApiVersion)if(shouldCheckContentLength){var lengthAccumulator=new streams.PassThrough;lengthAccumulator._write=function(chunk){return chunk&&chunk.length&&(receivedLen+=chunk.length),streams.PassThrough.prototype._write.apply(this,arguments)},lengthAccumulator.on("end",checkContentLengthAndEmit),stream.on("error",(function(err){shouldCheckContentLength=!1,httpStream.unpipe(lengthAccumulator),lengthAccumulator.emit("end"),lengthAccumulator.end()})),httpStream.pipe(lengthAccumulator).pipe(stream,{end:!1})}else httpStream.pipe(stream);else shouldCheckContentLength&&httpStream.on("data",(function(arg){arg&&arg.length&&(receivedLen+=arg.length)})),httpStream.on("data",(function(arg){stream.emit("data",arg)})),httpStream.on("end",checkContentLengthAndEmit);httpStream.on("error",(function(err){shouldCheckContentLength=!1,stream.emit("error",err)}))}})),stream},emitEvent:function emit(eventName,args,done){"function"==typeof args&&(done=args,args=null),done||(done=function(){}),args||(args=this.eventParameters(eventName,this.response)),AWS.SequentialExecutor.prototype.emit.call(this,eventName,args,(function(err){err&&(this.response.error=err),done.call(this,err)}))},eventParameters:function eventParameters(eventName){switch(eventName){case"restart":case"validate":case"sign":case"build":case"afterValidate":case"afterBuild":return[this];case"error":return[this.response.error,this.response];default:return[this.response]}},presign:function presign(expires,callback){return callback||"function"!=typeof expires||(callback=expires,expires=null),(new AWS.Signers.Presign).sign(this.toGet(),expires,callback)},isPresigned:function isPresigned(){return Object.prototype.hasOwnProperty.call(this.httpRequest.headers,"presigned-expires")},toUnauthenticated:function toUnauthenticated(){return this._unAuthenticated=!0,this.removeListener("validate",AWS.EventListeners.Core.VALIDATE_CREDENTIALS),this.removeListener("sign",AWS.EventListeners.Core.SIGN),this},toGet:function toGet(){return"query"!==this.service.api.protocol&&"ec2"!==this.service.api.protocol||(this.removeListener("build",this.buildAsGet),this.addListener("build",this.buildAsGet)),this},buildAsGet:function buildAsGet(request){request.httpRequest.method="GET",request.httpRequest.path=request.service.endpoint.path+"?"+request.httpRequest.body,request.httpRequest.body="",delete request.httpRequest.headers["Content-Length"],delete request.httpRequest.headers["Content-Type"]},haltHandlersOnError:function haltHandlersOnError(){this._haltHandlersOnError=!0}}),AWS.Request.addPromisesToClass=function addPromisesToClass(PromiseDependency){this.prototype.promise=function promise(){var self=this;return this.httpRequest.appendToUserAgent("promise"),new PromiseDependency((function(resolve,reject){self.on("complete",(function(resp){resp.error?reject(resp.error):resolve(Object.defineProperty(resp.data||{},"$response",{value:resp}))})),self.runTo()}))}},AWS.Request.deletePromisesFromClass=function deletePromisesFromClass(){delete this.prototype.promise},AWS.util.addPromises(AWS.Request),AWS.util.mixin(AWS.Request,AWS.SequentialExecutor)},"./node_modules/aws-sdk/lib/resource_waiter.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit,jmespath=__webpack_require__("./node_modules/jmespath/jmespath.js");function CHECK_ACCEPTORS(resp){var waiter=resp.request._waiter,acceptors=waiter.config.acceptors,acceptorMatched=!1,state="retry";acceptors.forEach((function(acceptor){if(!acceptorMatched){var matcher=waiter.matchers[acceptor.matcher];matcher&&matcher(resp,acceptor.expected,acceptor.argument)&&(acceptorMatched=!0,state=acceptor.state)}})),!acceptorMatched&&resp.error&&(state="failure"),"success"===state?waiter.setSuccess(resp):waiter.setError(resp,"retry"===state)}AWS.ResourceWaiter=inherit({constructor:function constructor(service,state){this.service=service,this.state=state,this.loadWaiterConfig(this.state)},service:null,state:null,config:null,matchers:{path:function(resp,expected,argument){try{var result=jmespath.search(resp.data,argument)}catch(err){return!1}return jmespath.strictDeepEqual(result,expected)},pathAll:function(resp,expected,argument){try{var results=jmespath.search(resp.data,argument)}catch(err){return!1}Array.isArray(results)||(results=[results]);var numResults=results.length;if(!numResults)return!1;for(var ind=0;ind<numResults;ind++)if(!jmespath.strictDeepEqual(results[ind],expected))return!1;return!0},pathAny:function(resp,expected,argument){try{var results=jmespath.search(resp.data,argument)}catch(err){return!1}Array.isArray(results)||(results=[results]);for(var numResults=results.length,ind=0;ind<numResults;ind++)if(jmespath.strictDeepEqual(results[ind],expected))return!0;return!1},status:function(resp,expected){var statusCode=resp.httpResponse.statusCode;return"number"==typeof statusCode&&statusCode===expected},error:function(resp,expected){return"string"==typeof expected&&resp.error?expected===resp.error.code:expected===!!resp.error}},listeners:(new AWS.SequentialExecutor).addNamedListeners((function(add){add("RETRY_CHECK","retry",(function(resp){var waiter=resp.request._waiter;resp.error&&"ResourceNotReady"===resp.error.code&&(resp.error.retryDelay=1e3*(waiter.config.delay||0))})),add("CHECK_OUTPUT","extractData",CHECK_ACCEPTORS),add("CHECK_ERROR","extractError",CHECK_ACCEPTORS)})),wait:function wait(params,callback){"function"==typeof params&&(callback=params,params=void 0),params&&params.$waiter&&("number"==typeof(params=AWS.util.copy(params)).$waiter.delay&&(this.config.delay=params.$waiter.delay),"number"==typeof params.$waiter.maxAttempts&&(this.config.maxAttempts=params.$waiter.maxAttempts),delete params.$waiter);var request=this.service.makeRequest(this.config.operation,params);return request._waiter=this,request.response.maxRetries=this.config.maxAttempts,request.addListeners(this.listeners),callback&&request.send(callback),request},setSuccess:function setSuccess(resp){resp.error=null,resp.data=resp.data||{},resp.request.removeAllListeners("extractData")},setError:function setError(resp,retryable){resp.data=null,resp.error=AWS.util.error(resp.error||new Error,{code:"ResourceNotReady",message:"Resource is not in the state "+this.state,retryable})},loadWaiterConfig:function loadWaiterConfig(state){if(!this.service.api.waiters[state])throw new AWS.util.error(new Error,{code:"StateNotFoundError",message:"State "+state+" not found."});this.config=AWS.util.copy(this.service.api.waiters[state])}})},"./node_modules/aws-sdk/lib/response.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit,jmespath=__webpack_require__("./node_modules/jmespath/jmespath.js");AWS.Response=inherit({constructor:function Response(request){this.request=request,this.data=null,this.error=null,this.retryCount=0,this.redirectCount=0,this.httpResponse=new AWS.HttpResponse,request&&(this.maxRetries=request.service.numRetries(),this.maxRedirects=request.service.config.maxRedirects)},nextPage:function nextPage(callback){var config,service=this.request.service,operation=this.request.operation;try{config=service.paginationConfig(operation,!0)}catch(e){this.error=e}if(!this.hasNextPage()){if(callback)callback(this.error,null);else if(this.error)throw this.error;return null}var params=AWS.util.copy(this.request.params);if(this.nextPageTokens){var inputTokens=config.inputToken;"string"==typeof inputTokens&&(inputTokens=[inputTokens]);for(var i=0;i<inputTokens.length;i++)params[inputTokens[i]]=this.nextPageTokens[i];return service.makeRequest(this.request.operation,params,callback)}return callback?callback(null,null):null},hasNextPage:function hasNextPage(){return this.cacheNextPageTokens(),!!this.nextPageTokens||void 0===this.nextPageTokens&&void 0},cacheNextPageTokens:function cacheNextPageTokens(){if(Object.prototype.hasOwnProperty.call(this,"nextPageTokens"))return this.nextPageTokens;this.nextPageTokens=void 0;var config=this.request.service.paginationConfig(this.request.operation);if(!config)return this.nextPageTokens;if(this.nextPageTokens=null,config.moreResults&&!jmespath.search(this.data,config.moreResults))return this.nextPageTokens;var exprs=config.outputToken;return"string"==typeof exprs&&(exprs=[exprs]),AWS.util.arrayEach.call(this,exprs,(function(expr){var output=jmespath.search(this.data,expr);output&&(this.nextPageTokens=this.nextPageTokens||[],this.nextPageTokens.push(output))})),this.nextPageTokens}})},"./node_modules/aws-sdk/lib/sequential_executor.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");AWS.SequentialExecutor=AWS.util.inherit({constructor:function SequentialExecutor(){this._events={}},listeners:function listeners(eventName){return this._events[eventName]?this._events[eventName].slice(0):[]},on:function on(eventName,listener,toHead){return this._events[eventName]?toHead?this._events[eventName].unshift(listener):this._events[eventName].push(listener):this._events[eventName]=[listener],this},onAsync:function onAsync(eventName,listener,toHead){return listener._isAsync=!0,this.on(eventName,listener,toHead)},removeListener:function removeListener(eventName,listener){var listeners=this._events[eventName];if(listeners){for(var length=listeners.length,position=-1,i=0;i<length;++i)listeners[i]===listener&&(position=i);position>-1&&listeners.splice(position,1)}return this},removeAllListeners:function removeAllListeners(eventName){return eventName?delete this._events[eventName]:this._events={},this},emit:function emit(eventName,eventArgs,doneCallback){doneCallback||(doneCallback=function(){});var listeners=this.listeners(eventName),count=listeners.length;return this.callListeners(listeners,eventArgs,doneCallback),count>0},callListeners:function callListeners(listeners,args,doneCallback,prevError){var self=this,error=prevError||null;function callNextListener(err){if(err&&(error=AWS.util.error(error||new Error,err),self._haltHandlersOnError))return doneCallback.call(self,error);self.callListeners(listeners,args,doneCallback,error)}for(;listeners.length>0;){var listener=listeners.shift();if(listener._isAsync)return void listener.apply(self,args.concat([callNextListener]));try{listener.apply(self,args)}catch(err){error=AWS.util.error(error||new Error,err)}if(error&&self._haltHandlersOnError)return void doneCallback.call(self,error)}doneCallback.call(self,error)},addListeners:function addListeners(listeners){var self=this;return listeners._events&&(listeners=listeners._events),AWS.util.each(listeners,(function(event,callbacks){"function"==typeof callbacks&&(callbacks=[callbacks]),AWS.util.arrayEach(callbacks,(function(callback){self.on(event,callback)}))})),self},addNamedListener:function addNamedListener(name,eventName,callback,toHead){return this[name]=callback,this.addListener(eventName,callback,toHead),this},addNamedAsyncListener:function addNamedAsyncListener(name,eventName,callback,toHead){return callback._isAsync=!0,this.addNamedListener(name,eventName,callback,toHead)},addNamedListeners:function addNamedListeners(callback){var self=this;return callback((function(){self.addNamedListener.apply(self,arguments)}),(function(){self.addNamedAsyncListener.apply(self,arguments)})),this}}),AWS.SequentialExecutor.prototype.addListener=AWS.SequentialExecutor.prototype.on,module.exports=AWS.SequentialExecutor},"./node_modules/aws-sdk/lib/service.js":(module,__unused_webpack_exports,__webpack_require__)=>{var process=__webpack_require__("./node_modules/process/browser.js"),AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),Api=__webpack_require__("./node_modules/aws-sdk/lib/model/api.js"),regionConfig=__webpack_require__("./node_modules/aws-sdk/lib/region_config.js"),inherit=AWS.util.inherit,clientCount=0,region_utils=__webpack_require__("./node_modules/aws-sdk/lib/region/utils.js");AWS.Service=inherit({constructor:function Service(config){if(!this.loadServiceClass)throw AWS.util.error(new Error,"Service must be constructed with `new' operator");if(config){if(config.region){var region=config.region;region_utils.isFipsRegion(region)&&(config.region=region_utils.getRealRegion(region),config.useFipsEndpoint=!0),region_utils.isGlobalRegion(region)&&(config.region=region_utils.getRealRegion(region))}"boolean"==typeof config.useDualstack&&"boolean"!=typeof config.useDualstackEndpoint&&(config.useDualstackEndpoint=config.useDualstack)}var ServiceClass=this.loadServiceClass(config||{});if(ServiceClass){var originalConfig=AWS.util.copy(config),svc=new ServiceClass(config);return Object.defineProperty(svc,"_originalConfig",{get:function(){return originalConfig},enumerable:!1,configurable:!0}),svc._clientId=++clientCount,svc}this.initialize(config)},initialize:function initialize(config){var svcConfig=AWS.config[this.serviceIdentifier];if(this.config=new AWS.Config(AWS.config),svcConfig&&this.config.update(svcConfig,!0),config&&this.config.update(config,!0),this.validateService(),this.config.endpoint||regionConfig.configureEndpoint(this),this.config.endpoint=this.endpointFromTemplate(this.config.endpoint),this.setEndpoint(this.config.endpoint),AWS.SequentialExecutor.call(this),AWS.Service.addDefaultMonitoringListeners(this),(this.config.clientSideMonitoring||AWS.Service._clientSideMonitoring)&&this.publisher){var publisher=this.publisher;this.addNamedListener("PUBLISH_API_CALL","apiCall",(function PUBLISH_API_CALL(event){process.nextTick((function(){publisher.eventHandler(event)}))})),this.addNamedListener("PUBLISH_API_ATTEMPT","apiCallAttempt",(function PUBLISH_API_ATTEMPT(event){process.nextTick((function(){publisher.eventHandler(event)}))}))}},validateService:function validateService(){},loadServiceClass:function loadServiceClass(serviceConfig){var config=serviceConfig;if(AWS.util.isEmpty(this.api)){if(config.apiConfig)return AWS.Service.defineServiceApi(this.constructor,config.apiConfig);if(this.constructor.services){(config=new AWS.Config(AWS.config)).update(serviceConfig,!0);var version=config.apiVersions[this.constructor.serviceIdentifier];return version=version||config.apiVersion,this.getLatestServiceClass(version)}return null}return null},getLatestServiceClass:function getLatestServiceClass(version){return version=this.getLatestServiceVersion(version),null===this.constructor.services[version]&&AWS.Service.defineServiceApi(this.constructor,version),this.constructor.services[version]},getLatestServiceVersion:function getLatestServiceVersion(version){if(!this.constructor.services||0===this.constructor.services.length)throw new Error("No services defined on "+this.constructor.serviceIdentifier);if(version?AWS.util.isType(version,Date)&&(version=AWS.util.date.iso8601(version).split("T")[0]):version="latest",Object.hasOwnProperty(this.constructor.services,version))return version;for(var keys=Object.keys(this.constructor.services).sort(),selectedVersion=null,i=keys.length-1;i>=0;i--)if("*"!==keys[i][keys[i].length-1]&&(selectedVersion=keys[i]),keys[i].substr(0,10)<=version)return selectedVersion;throw new Error("Could not find "+this.constructor.serviceIdentifier+" API to satisfy version constraint `"+version+"'")},api:{},defaultRetryCount:3,customizeRequests:function customizeRequests(callback){if(callback){if("function"!=typeof callback)throw new Error("Invalid callback type '"+typeof callback+"' provided in customizeRequests");this.customRequestHandler=callback}else this.customRequestHandler=null},makeRequest:function makeRequest(operation,params,callback){if("function"==typeof params&&(callback=params,params=null),params=params||{},this.config.params){var rules=this.api.operations[operation];rules&&(params=AWS.util.copy(params),AWS.util.each(this.config.params,(function(key,value){rules.input.members[key]&&(void 0!==params[key]&&null!==params[key]||(params[key]=value))})))}var request=new AWS.Request(this,operation,params);return this.addAllRequestListeners(request),this.attachMonitoringEmitter(request),callback&&request.send(callback),request},makeUnauthenticatedRequest:function makeUnauthenticatedRequest(operation,params,callback){"function"==typeof params&&(callback=params,params={});var request=this.makeRequest(operation,params).toUnauthenticated();return callback?request.send(callback):request},waitFor:function waitFor(state,params,callback){return new AWS.ResourceWaiter(this,state).wait(params,callback)},addAllRequestListeners:function addAllRequestListeners(request){for(var list=[AWS.events,AWS.EventListeners.Core,this.serviceInterface(),AWS.EventListeners.CorePost],i=0;i<list.length;i++)list[i]&&request.addListeners(list[i]);this.config.paramValidation||request.removeListener("validate",AWS.EventListeners.Core.VALIDATE_PARAMETERS),this.config.logger&&request.addListeners(AWS.EventListeners.Logger),this.setupRequestListeners(request),"function"==typeof this.constructor.prototype.customRequestHandler&&this.constructor.prototype.customRequestHandler(request),Object.prototype.hasOwnProperty.call(this,"customRequestHandler")&&"function"==typeof this.customRequestHandler&&this.customRequestHandler(request)},apiCallEvent:function apiCallEvent(request){var api=request.service.api.operations[request.operation],monitoringEvent={Type:"ApiCall",Api:api?api.name:request.operation,Version:1,Service:request.service.api.serviceId||request.service.api.endpointPrefix,Region:request.httpRequest.region,MaxRetriesExceeded:0,UserAgent:request.httpRequest.getUserAgent()},response=request.response;if(response.httpResponse.statusCode&&(monitoringEvent.FinalHttpStatusCode=response.httpResponse.statusCode),response.error){var error=response.error;response.httpResponse.statusCode>299?(error.code&&(monitoringEvent.FinalAwsException=error.code),error.message&&(monitoringEvent.FinalAwsExceptionMessage=error.message)):((error.code||error.name)&&(monitoringEvent.FinalSdkException=error.code||error.name),error.message&&(monitoringEvent.FinalSdkExceptionMessage=error.message))}return monitoringEvent},apiAttemptEvent:function apiAttemptEvent(request){var api=request.service.api.operations[request.operation],monitoringEvent={Type:"ApiCallAttempt",Api:api?api.name:request.operation,Version:1,Service:request.service.api.serviceId||request.service.api.endpointPrefix,Fqdn:request.httpRequest.endpoint.hostname,UserAgent:request.httpRequest.getUserAgent()},response=request.response;return response.httpResponse.statusCode&&(monitoringEvent.HttpStatusCode=response.httpResponse.statusCode),!request._unAuthenticated&&request.service.config.credentials&&request.service.config.credentials.accessKeyId&&(monitoringEvent.AccessKey=request.service.config.credentials.accessKeyId),response.httpResponse.headers?(request.httpRequest.headers["x-amz-security-token"]&&(monitoringEvent.SessionToken=request.httpRequest.headers["x-amz-security-token"]),response.httpResponse.headers["x-amzn-requestid"]&&(monitoringEvent.XAmznRequestId=response.httpResponse.headers["x-amzn-requestid"]),response.httpResponse.headers["x-amz-request-id"]&&(monitoringEvent.XAmzRequestId=response.httpResponse.headers["x-amz-request-id"]),response.httpResponse.headers["x-amz-id-2"]&&(monitoringEvent.XAmzId2=response.httpResponse.headers["x-amz-id-2"]),monitoringEvent):monitoringEvent},attemptFailEvent:function attemptFailEvent(request){var monitoringEvent=this.apiAttemptEvent(request),response=request.response,error=response.error;return response.httpResponse.statusCode>299?(error.code&&(monitoringEvent.AwsException=error.code),error.message&&(monitoringEvent.AwsExceptionMessage=error.message)):((error.code||error.name)&&(monitoringEvent.SdkException=error.code||error.name),error.message&&(monitoringEvent.SdkExceptionMessage=error.message)),monitoringEvent},attachMonitoringEmitter:function attachMonitoringEmitter(request){var attemptTimestamp,attemptStartRealTime,attemptLatency,callStartRealTime,region,callTimestamp,attemptCount=0,self=this;request.on("validate",(function(){callStartRealTime=AWS.util.realClock.now(),callTimestamp=Date.now()}),true),request.on("sign",(function(){attemptStartRealTime=AWS.util.realClock.now(),attemptTimestamp=Date.now(),region=request.httpRequest.region,attemptCount++}),true),request.on("validateResponse",(function(){attemptLatency=Math.round(AWS.util.realClock.now()-attemptStartRealTime)})),request.addNamedListener("API_CALL_ATTEMPT","success",(function API_CALL_ATTEMPT(){var apiAttemptEvent=self.apiAttemptEvent(request);apiAttemptEvent.Timestamp=attemptTimestamp,apiAttemptEvent.AttemptLatency=attemptLatency>=0?attemptLatency:0,apiAttemptEvent.Region=region,self.emit("apiCallAttempt",[apiAttemptEvent])})),request.addNamedListener("API_CALL_ATTEMPT_RETRY","retry",(function API_CALL_ATTEMPT_RETRY(){var apiAttemptEvent=self.attemptFailEvent(request);apiAttemptEvent.Timestamp=attemptTimestamp,attemptLatency=attemptLatency||Math.round(AWS.util.realClock.now()-attemptStartRealTime),apiAttemptEvent.AttemptLatency=attemptLatency>=0?attemptLatency:0,apiAttemptEvent.Region=region,self.emit("apiCallAttempt",[apiAttemptEvent])})),request.addNamedListener("API_CALL","complete",(function API_CALL(){var apiCallEvent=self.apiCallEvent(request);if(apiCallEvent.AttemptCount=attemptCount,!(apiCallEvent.AttemptCount<=0)){apiCallEvent.Timestamp=callTimestamp;var latency=Math.round(AWS.util.realClock.now()-callStartRealTime);apiCallEvent.Latency=latency>=0?latency:0;var response=request.response;response.error&&response.error.retryable&&"number"==typeof response.retryCount&&"number"==typeof response.maxRetries&&response.retryCount>=response.maxRetries&&(apiCallEvent.MaxRetriesExceeded=1),self.emit("apiCall",[apiCallEvent])}}))},setupRequestListeners:function setupRequestListeners(request){},getSigningName:function getSigningName(){return this.api.signingName||this.api.endpointPrefix},getSignerClass:function getSignerClass(request){var version,operation=null,authtype="";request&&(authtype=(operation=(request.service.api.operations||{})[request.operation]||null)?operation.authtype:"");return version=this.config.signatureVersion?this.config.signatureVersion:"v4"===authtype||"v4-unsigned-body"===authtype?"v4":"bearer"===authtype?"bearer":this.api.signatureVersion,AWS.Signers.RequestSigner.getVersion(version)},serviceInterface:function serviceInterface(){switch(this.api.protocol){case"ec2":case"query":return AWS.EventListeners.Query;case"json":return AWS.EventListeners.Json;case"rest-json":return AWS.EventListeners.RestJson;case"rest-xml":return AWS.EventListeners.RestXml}if(this.api.protocol)throw new Error("Invalid service `protocol' "+this.api.protocol+" in API config")},successfulResponse:function successfulResponse(resp){return resp.httpResponse.statusCode<300},numRetries:function numRetries(){return void 0!==this.config.maxRetries?this.config.maxRetries:this.defaultRetryCount},retryDelays:function retryDelays(retryCount,err){return AWS.util.calculateRetryDelay(retryCount,this.config.retryDelayOptions,err)},retryableError:function retryableError(error){return!!this.timeoutError(error)||(!!this.networkingError(error)||(!!this.expiredCredentialsError(error)||(!!this.throttledError(error)||error.statusCode>=500)))},networkingError:function networkingError(error){return"NetworkingError"===error.code},timeoutError:function timeoutError(error){return"TimeoutError"===error.code},expiredCredentialsError:function expiredCredentialsError(error){return"ExpiredTokenException"===error.code},clockSkewError:function clockSkewError(error){switch(error.code){case"RequestTimeTooSkewed":case"RequestExpired":case"InvalidSignatureException":case"SignatureDoesNotMatch":case"AuthFailure":case"RequestInTheFuture":return!0;default:return!1}},getSkewCorrectedDate:function getSkewCorrectedDate(){return new Date(Date.now()+this.config.systemClockOffset)},applyClockOffset:function applyClockOffset(newServerTime){newServerTime&&(this.config.systemClockOffset=newServerTime-Date.now())},isClockSkewed:function isClockSkewed(newServerTime){if(newServerTime)return Math.abs(this.getSkewCorrectedDate().getTime()-newServerTime)>=3e5},throttledError:function throttledError(error){if(429===error.statusCode)return!0;switch(error.code){case"ProvisionedThroughputExceededException":case"Throttling":case"ThrottlingException":case"RequestLimitExceeded":case"RequestThrottled":case"RequestThrottledException":case"TooManyRequestsException":case"TransactionInProgressException":case"EC2ThrottledException":return!0;default:return!1}},endpointFromTemplate:function endpointFromTemplate(endpoint){if("string"!=typeof endpoint)return endpoint;var e=endpoint;return e=(e=(e=e.replace(/\{service\}/g,this.api.endpointPrefix)).replace(/\{region\}/g,this.config.region)).replace(/\{scheme\}/g,this.config.sslEnabled?"https":"http")},setEndpoint:function setEndpoint(endpoint){this.endpoint=new AWS.Endpoint(endpoint,this.config)},paginationConfig:function paginationConfig(operation,throwException){var paginator=this.api.operations[operation].paginator;if(!paginator){if(throwException){var e=new Error;throw AWS.util.error(e,"No pagination configuration for "+operation)}return null}return paginator}}),AWS.util.update(AWS.Service,{defineMethods:function defineMethods(svc){AWS.util.each(svc.prototype.api.operations,(function iterator(method){svc.prototype[method]||("none"===svc.prototype.api.operations[method].authtype?svc.prototype[method]=function(params,callback){return this.makeUnauthenticatedRequest(method,params,callback)}:svc.prototype[method]=function(params,callback){return this.makeRequest(method,params,callback)})}))},defineService:function defineService(serviceIdentifier,versions,features){AWS.Service._serviceMap[serviceIdentifier]=!0,Array.isArray(versions)||(features=versions,versions=[]);var svc=inherit(AWS.Service,features||{});if("string"==typeof serviceIdentifier){AWS.Service.addVersions(svc,versions);var identifier=svc.serviceIdentifier||serviceIdentifier;svc.serviceIdentifier=identifier}else svc.prototype.api=serviceIdentifier,AWS.Service.defineMethods(svc);if(AWS.SequentialExecutor.call(this.prototype),!this.prototype.publisher&&AWS.util.clientSideMonitoring){var Publisher=AWS.util.clientSideMonitoring.Publisher,publisherConfig=(0,AWS.util.clientSideMonitoring.configProvider)();this.prototype.publisher=new Publisher(publisherConfig),publisherConfig.enabled&&(AWS.Service._clientSideMonitoring=!0)}return AWS.SequentialExecutor.call(svc.prototype),AWS.Service.addDefaultMonitoringListeners(svc.prototype),svc},addVersions:function addVersions(svc,versions){Array.isArray(versions)||(versions=[versions]),svc.services=svc.services||{};for(var i=0;i<versions.length;i++)void 0===svc.services[versions[i]]&&(svc.services[versions[i]]=null);svc.apiVersions=Object.keys(svc.services).sort()},defineServiceApi:function defineServiceApi(superclass,version,apiConfig){var svc=inherit(superclass,{serviceIdentifier:superclass.serviceIdentifier});function setApi(api){api.isApi?svc.prototype.api=api:svc.prototype.api=new Api(api,{serviceIdentifier:superclass.serviceIdentifier})}if("string"==typeof version){if(apiConfig)setApi(apiConfig);else try{setApi(AWS.apiLoader(superclass.serviceIdentifier,version))}catch(err){throw AWS.util.error(err,{message:"Could not find API configuration "+superclass.serviceIdentifier+"-"+version})}Object.prototype.hasOwnProperty.call(superclass.services,version)||(superclass.apiVersions=superclass.apiVersions.concat(version).sort()),superclass.services[version]=svc}else setApi(version);return AWS.Service.defineMethods(svc),svc},hasService:function(identifier){return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap,identifier)},addDefaultMonitoringListeners:function addDefaultMonitoringListeners(attachOn){attachOn.addNamedListener("MONITOR_EVENTS_BUBBLE","apiCallAttempt",(function EVENTS_BUBBLE(event){var baseClass=Object.getPrototypeOf(attachOn);baseClass._events&&baseClass.emit("apiCallAttempt",[event])})),attachOn.addNamedListener("CALL_EVENTS_BUBBLE","apiCall",(function CALL_EVENTS_BUBBLE(event){var baseClass=Object.getPrototypeOf(attachOn);baseClass._events&&baseClass.emit("apiCall",[event])}))},_serviceMap:{}}),AWS.util.mixin(AWS.Service,AWS.SequentialExecutor),module.exports=AWS.Service},"./node_modules/aws-sdk/lib/signers/bearer.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");AWS.Signers.Bearer=AWS.util.inherit(AWS.Signers.RequestSigner,{constructor:function Bearer(request){AWS.Signers.RequestSigner.call(this,request)},addAuthorization:function addAuthorization(token){this.request.httpRequest.headers.Authorization="Bearer "+token.token}})},"./node_modules/aws-sdk/lib/signers/presign.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit,expiresHeader="presigned-expires";function signedUrlBuilder(request){var expires=request.httpRequest.headers[expiresHeader],signerClass=request.service.getSignerClass(request);if(delete request.httpRequest.headers["User-Agent"],delete request.httpRequest.headers["X-Amz-User-Agent"],signerClass===AWS.Signers.V4){if(expires>604800){throw AWS.util.error(new Error,{code:"InvalidExpiryTime",message:"Presigning does not support expiry time greater than a week with SigV4 signing.",retryable:!1})}request.httpRequest.headers[expiresHeader]=expires}else{if(signerClass!==AWS.Signers.S3)throw AWS.util.error(new Error,{message:"Presigning only supports S3 or SigV4 signing.",code:"UnsupportedSigner",retryable:!1});var now=request.service?request.service.getSkewCorrectedDate():AWS.util.date.getDate();request.httpRequest.headers[expiresHeader]=parseInt(AWS.util.date.unixTimestamp(now)+expires,10).toString()}}function signedUrlSigner(request){var endpoint=request.httpRequest.endpoint,parsedUrl=AWS.util.urlParse(request.httpRequest.path),queryParams={};parsedUrl.search&&(queryParams=AWS.util.queryStringParse(parsedUrl.search.substr(1)));var auth=request.httpRequest.headers.Authorization.split(" ");if("AWS"===auth[0])auth=auth[1].split(":"),queryParams.Signature=auth.pop(),queryParams.AWSAccessKeyId=auth.join(":"),AWS.util.each(request.httpRequest.headers,(function(key,value){key===expiresHeader&&(key="Expires"),0===key.indexOf("x-amz-meta-")&&(delete queryParams[key],key=key.toLowerCase()),queryParams[key]=value})),delete request.httpRequest.headers[expiresHeader],delete queryParams.Authorization,delete queryParams.Host;else if("AWS4-HMAC-SHA256"===auth[0]){auth.shift();var signature=auth.join(" ").match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];queryParams["X-Amz-Signature"]=signature,delete queryParams.Expires}endpoint.pathname=parsedUrl.pathname,endpoint.search=AWS.util.queryParamsToString(queryParams)}AWS.Signers.Presign=inherit({sign:function sign(request,expireTime,callback){if(request.httpRequest.headers[expiresHeader]=expireTime||3600,request.on("build",signedUrlBuilder),request.on("sign",signedUrlSigner),request.removeListener("afterBuild",AWS.EventListeners.Core.SET_CONTENT_LENGTH),request.removeListener("afterBuild",AWS.EventListeners.Core.COMPUTE_SHA256),request.emit("beforePresign",[request]),!callback){if(request.build(),request.response.error)throw request.response.error;return AWS.util.urlFormat(request.httpRequest.endpoint)}request.build((function(){this.response.error?callback(this.response.error):callback(null,AWS.util.urlFormat(request.httpRequest.endpoint))}))}}),module.exports=AWS.Signers.Presign},"./node_modules/aws-sdk/lib/signers/request_signer.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit;AWS.Signers.RequestSigner=inherit({constructor:function RequestSigner(request){this.request=request},setServiceClientId:function setServiceClientId(id){this.serviceClientId=id},getServiceClientId:function getServiceClientId(){return this.serviceClientId}}),AWS.Signers.RequestSigner.getVersion=function getVersion(version){switch(version){case"v2":return AWS.Signers.V2;case"v3":return AWS.Signers.V3;case"s3v4":case"v4":return AWS.Signers.V4;case"s3":return AWS.Signers.S3;case"v3https":return AWS.Signers.V3Https;case"bearer":return AWS.Signers.Bearer}throw new Error("Unknown signing version "+version)},__webpack_require__("./node_modules/aws-sdk/lib/signers/v2.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/v3.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/v3https.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/v4.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/s3.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/presign.js"),__webpack_require__("./node_modules/aws-sdk/lib/signers/bearer.js")},"./node_modules/aws-sdk/lib/signers/s3.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit;AWS.Signers.S3=inherit(AWS.Signers.RequestSigner,{subResources:{acl:1,accelerate:1,analytics:1,cors:1,lifecycle:1,delete:1,inventory:1,location:1,logging:1,metrics:1,notification:1,partNumber:1,policy:1,requestPayment:1,replication:1,restore:1,tagging:1,torrent:1,uploadId:1,uploads:1,versionId:1,versioning:1,versions:1,website:1},responseHeaders:{"response-content-type":1,"response-content-language":1,"response-expires":1,"response-cache-control":1,"response-content-disposition":1,"response-content-encoding":1},addAuthorization:function addAuthorization(credentials,date){this.request.headers["presigned-expires"]||(this.request.headers["X-Amz-Date"]=AWS.util.date.rfc822(date)),credentials.sessionToken&&(this.request.headers["x-amz-security-token"]=credentials.sessionToken);var signature=this.sign(credentials.secretAccessKey,this.stringToSign()),auth="AWS "+credentials.accessKeyId+":"+signature;this.request.headers.Authorization=auth},stringToSign:function stringToSign(){var r=this.request,parts=[];parts.push(r.method),parts.push(r.headers["Content-MD5"]||""),parts.push(r.headers["Content-Type"]||""),parts.push(r.headers["presigned-expires"]||"");var headers=this.canonicalizedAmzHeaders();return headers&&parts.push(headers),parts.push(this.canonicalizedResource()),parts.join("\n")},canonicalizedAmzHeaders:function canonicalizedAmzHeaders(){var amzHeaders=[];AWS.util.each(this.request.headers,(function(name){name.match(/^x-amz-/i)&&amzHeaders.push(name)})),amzHeaders.sort((function(a,b){return a.toLowerCase()<b.toLowerCase()?-1:1}));var parts=[];return AWS.util.arrayEach.call(this,amzHeaders,(function(name){parts.push(name.toLowerCase()+":"+String(this.request.headers[name]))})),parts.join("\n")},canonicalizedResource:function canonicalizedResource(){var r=this.request,parts=r.path.split("?"),path=parts[0],querystring=parts[1],resource="";if(r.virtualHostedBucket&&(resource+="/"+r.virtualHostedBucket),resource+=path,querystring){var resources=[];AWS.util.arrayEach.call(this,querystring.split("&"),(function(param){var name=param.split("=")[0],value=param.split("=")[1];if(this.subResources[name]||this.responseHeaders[name]){var subresource={name};void 0!==value&&(this.subResources[name]?subresource.value=value:subresource.value=decodeURIComponent(value)),resources.push(subresource)}})),resources.sort((function(a,b){return a.name<b.name?-1:1})),resources.length&&(querystring=[],AWS.util.arrayEach(resources,(function(res){void 0===res.value?querystring.push(res.name):querystring.push(res.name+"="+res.value)})),resource+="?"+querystring.join("&"))}return resource},sign:function sign(secret,string){return AWS.util.crypto.hmac(secret,string,"base64","sha1")}}),module.exports=AWS.Signers.S3},"./node_modules/aws-sdk/lib/signers/v2.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit;AWS.Signers.V2=inherit(AWS.Signers.RequestSigner,{addAuthorization:function addAuthorization(credentials,date){date||(date=AWS.util.date.getDate());var r=this.request;r.params.Timestamp=AWS.util.date.iso8601(date),r.params.SignatureVersion="2",r.params.SignatureMethod="HmacSHA256",r.params.AWSAccessKeyId=credentials.accessKeyId,credentials.sessionToken&&(r.params.SecurityToken=credentials.sessionToken),delete r.params.Signature,r.params.Signature=this.signature(credentials),r.body=AWS.util.queryParamsToString(r.params),r.headers["Content-Length"]=r.body.length},signature:function signature(credentials){return AWS.util.crypto.hmac(credentials.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function stringToSign(){var parts=[];return parts.push(this.request.method),parts.push(this.request.endpoint.host.toLowerCase()),parts.push(this.request.pathname()),parts.push(AWS.util.queryParamsToString(this.request.params)),parts.join("\n")}}),module.exports=AWS.Signers.V2},"./node_modules/aws-sdk/lib/signers/v3.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit;AWS.Signers.V3=inherit(AWS.Signers.RequestSigner,{addAuthorization:function addAuthorization(credentials,date){var datetime=AWS.util.date.rfc822(date);this.request.headers["X-Amz-Date"]=datetime,credentials.sessionToken&&(this.request.headers["x-amz-security-token"]=credentials.sessionToken),this.request.headers["X-Amzn-Authorization"]=this.authorization(credentials,datetime)},authorization:function authorization(credentials){return"AWS3 AWSAccessKeyId="+credentials.accessKeyId+",Algorithm=HmacSHA256,SignedHeaders="+this.signedHeaders()+",Signature="+this.signature(credentials)},signedHeaders:function signedHeaders(){var headers=[];return AWS.util.arrayEach(this.headersToSign(),(function iterator(h){headers.push(h.toLowerCase())})),headers.sort().join(";")},canonicalHeaders:function canonicalHeaders(){var headers=this.request.headers,parts=[];return AWS.util.arrayEach(this.headersToSign(),(function iterator(h){parts.push(h.toLowerCase().trim()+":"+String(headers[h]).trim())})),parts.sort().join("\n")+"\n"},headersToSign:function headersToSign(){var headers=[];return AWS.util.each(this.request.headers,(function iterator(k){("Host"===k||"Content-Encoding"===k||k.match(/^X-Amz/i))&&headers.push(k)})),headers},signature:function signature(credentials){return AWS.util.crypto.hmac(credentials.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function stringToSign(){var parts=[];return parts.push(this.request.method),parts.push("/"),parts.push(""),parts.push(this.canonicalHeaders()),parts.push(this.request.body),AWS.util.crypto.sha256(parts.join("\n"))}}),module.exports=AWS.Signers.V3},"./node_modules/aws-sdk/lib/signers/v3https.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),inherit=AWS.util.inherit;__webpack_require__("./node_modules/aws-sdk/lib/signers/v3.js"),AWS.Signers.V3Https=inherit(AWS.Signers.V3,{authorization:function authorization(credentials){return"AWS3-HTTPS AWSAccessKeyId="+credentials.accessKeyId+",Algorithm=HmacSHA256,Signature="+this.signature(credentials)},stringToSign:function stringToSign(){return this.request.headers["X-Amz-Date"]}}),module.exports=AWS.Signers.V3Https},"./node_modules/aws-sdk/lib/signers/v4.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),v4Credentials=__webpack_require__("./node_modules/aws-sdk/lib/signers/v4_credentials.js"),inherit=AWS.util.inherit;AWS.Signers.V4=inherit(AWS.Signers.RequestSigner,{constructor:function V4(request,serviceName,options){AWS.Signers.RequestSigner.call(this,request),this.serviceName=serviceName,options=options||{},this.signatureCache="boolean"!=typeof options.signatureCache||options.signatureCache,this.operation=options.operation,this.signatureVersion=options.signatureVersion},algorithm:"AWS4-HMAC-SHA256",addAuthorization:function addAuthorization(credentials,date){var datetime=AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g,"");this.isPresigned()?this.updateForPresigned(credentials,datetime):this.addHeaders(credentials,datetime),this.request.headers.Authorization=this.authorization(credentials,datetime)},addHeaders:function addHeaders(credentials,datetime){this.request.headers["X-Amz-Date"]=datetime,credentials.sessionToken&&(this.request.headers["x-amz-security-token"]=credentials.sessionToken)},updateForPresigned:function updateForPresigned(credentials,datetime){var credString=this.credentialString(datetime),qs={"X-Amz-Date":datetime,"X-Amz-Algorithm":this.algorithm,"X-Amz-Credential":credentials.accessKeyId+"/"+credString,"X-Amz-Expires":this.request.headers["presigned-expires"],"X-Amz-SignedHeaders":this.signedHeaders()};credentials.sessionToken&&(qs["X-Amz-Security-Token"]=credentials.sessionToken),this.request.headers["Content-Type"]&&(qs["Content-Type"]=this.request.headers["Content-Type"]),this.request.headers["Content-MD5"]&&(qs["Content-MD5"]=this.request.headers["Content-MD5"]),this.request.headers["Cache-Control"]&&(qs["Cache-Control"]=this.request.headers["Cache-Control"]),AWS.util.each.call(this,this.request.headers,(function(key,value){if("presigned-expires"!==key&&this.isSignableHeader(key)){var lowerKey=key.toLowerCase();0===lowerKey.indexOf("x-amz-meta-")?qs[lowerKey]=value:0===lowerKey.indexOf("x-amz-")&&(qs[key]=value)}}));var sep=this.request.path.indexOf("?")>=0?"&":"?";this.request.path+=sep+AWS.util.queryParamsToString(qs)},authorization:function authorization(credentials,datetime){var parts=[],credString=this.credentialString(datetime);return parts.push(this.algorithm+" Credential="+credentials.accessKeyId+"/"+credString),parts.push("SignedHeaders="+this.signedHeaders()),parts.push("Signature="+this.signature(credentials,datetime)),parts.join(", ")},signature:function signature(credentials,datetime){var signingKey=v4Credentials.getSigningKey(credentials,datetime.substr(0,8),this.request.region,this.serviceName,this.signatureCache);return AWS.util.crypto.hmac(signingKey,this.stringToSign(datetime),"hex")},stringToSign:function stringToSign(datetime){var parts=[];return parts.push("AWS4-HMAC-SHA256"),parts.push(datetime),parts.push(this.credentialString(datetime)),parts.push(this.hexEncodedHash(this.canonicalString())),parts.join("\n")},canonicalString:function canonicalString(){var parts=[],pathname=this.request.pathname();return"s3"!==this.serviceName&&"s3v4"!==this.signatureVersion&&(pathname=AWS.util.uriEscapePath(pathname)),parts.push(this.request.method),parts.push(pathname),parts.push(this.request.search()),parts.push(this.canonicalHeaders()+"\n"),parts.push(this.signedHeaders()),parts.push(this.hexEncodedBodyHash()),parts.join("\n")},canonicalHeaders:function canonicalHeaders(){var headers=[];AWS.util.each.call(this,this.request.headers,(function(key,item){headers.push([key,item])})),headers.sort((function(a,b){return a[0].toLowerCase()<b[0].toLowerCase()?-1:1}));var parts=[];return AWS.util.arrayEach.call(this,headers,(function(item){var key=item[0].toLowerCase();if(this.isSignableHeader(key)){var value=item[1];if(null==value||"function"!=typeof value.toString)throw AWS.util.error(new Error("Header "+key+" contains invalid value"),{code:"InvalidHeader"});parts.push(key+":"+this.canonicalHeaderValues(value.toString()))}})),parts.join("\n")},canonicalHeaderValues:function canonicalHeaderValues(values){return values.replace(/\s+/g," ").replace(/^\s+|\s+$/g,"")},signedHeaders:function signedHeaders(){var keys=[];return AWS.util.each.call(this,this.request.headers,(function(key){key=key.toLowerCase(),this.isSignableHeader(key)&&keys.push(key)})),keys.sort().join(";")},credentialString:function credentialString(datetime){return v4Credentials.createScope(datetime.substr(0,8),this.request.region,this.serviceName)},hexEncodedHash:function hash(string){return AWS.util.crypto.sha256(string,"hex")},hexEncodedBodyHash:function hexEncodedBodyHash(){var request=this.request;return this.isPresigned()&&["s3","s3-object-lambda"].indexOf(this.serviceName)>-1&&!request.body?"UNSIGNED-PAYLOAD":request.headers["X-Amz-Content-Sha256"]?request.headers["X-Amz-Content-Sha256"]:this.hexEncodedHash(this.request.body||"")},unsignableHeaders:["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id"],isSignableHeader:function isSignableHeader(key){return 0===key.toLowerCase().indexOf("x-amz-")||this.unsignableHeaders.indexOf(key)<0},isPresigned:function isPresigned(){return!!this.request.headers["presigned-expires"]}}),module.exports=AWS.Signers.V4},"./node_modules/aws-sdk/lib/signers/v4_credentials.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),cachedSecret={},cacheQueue=[],v4Identifier="aws4_request";module.exports={createScope:function createScope(date,region,serviceName){return[date.substr(0,8),region,serviceName,v4Identifier].join("/")},getSigningKey:function getSigningKey(credentials,date,region,service,shouldCache){var cacheKey=[AWS.util.crypto.hmac(credentials.secretAccessKey,credentials.accessKeyId,"base64"),date,region,service].join("_");if((shouldCache=!1!==shouldCache)&&cacheKey in cachedSecret)return cachedSecret[cacheKey];var kDate=AWS.util.crypto.hmac("AWS4"+credentials.secretAccessKey,date,"buffer"),kRegion=AWS.util.crypto.hmac(kDate,region,"buffer"),kService=AWS.util.crypto.hmac(kRegion,service,"buffer"),signingKey=AWS.util.crypto.hmac(kService,v4Identifier,"buffer");return shouldCache&&(cachedSecret[cacheKey]=signingKey,cacheQueue.push(cacheKey),cacheQueue.length>50&&delete cachedSecret[cacheQueue.shift()]),signingKey},emptyCache:function emptyCache(){cachedSecret={},cacheQueue=[]}}},"./node_modules/aws-sdk/lib/state_machine.js":module=>{function AcceptorStateMachine(states,state){this.currentState=state||null,this.states=states||{}}AcceptorStateMachine.prototype.runTo=function runTo(finalState,done,bindObject,inputError){"function"==typeof finalState&&(inputError=bindObject,bindObject=done,done=finalState,finalState=null);var self=this,state=self.states[self.currentState];state.fn.call(bindObject||self,inputError,(function(err){if(err){if(!state.fail)return done?done.call(bindObject,err):null;self.currentState=state.fail}else{if(!state.accept)return done?done.call(bindObject):null;self.currentState=state.accept}if(self.currentState===finalState)return done?done.call(bindObject,err):null;self.runTo(finalState,done,bindObject,err)}))},AcceptorStateMachine.prototype.addState=function addState(name,acceptState,failState,fn){return"function"==typeof acceptState?(fn=acceptState,acceptState=null,failState=null):"function"==typeof failState&&(fn=failState,failState=null),this.currentState||(this.currentState=name),this.states[name]={accept:acceptState,fail:failState,fn},this},module.exports=AcceptorStateMachine},"./node_modules/aws-sdk/lib/util.js":(module,__unused_webpack_exports,__webpack_require__)=>{var AWS,process=__webpack_require__("./node_modules/process/browser.js"),util={environment:"nodejs",engine:function engine(){if(util.isBrowser()&&"undefined"!=typeof navigator)return navigator.userAgent;var engine=process.platform+"/"+process.version;return process.env.AWS_EXECUTION_ENV&&(engine+=" exec-env/"+process.env.AWS_EXECUTION_ENV),engine},userAgent:function userAgent(){var name=util.environment,agent="aws-sdk-"+name+"/"+__webpack_require__("./node_modules/aws-sdk/lib/core.js").VERSION;return"nodejs"===name&&(agent+=" "+util.engine()),agent},uriEscape:function uriEscape(string){var output=encodeURIComponent(string);return output=(output=output.replace(/[^A-Za-z0-9_.~\-%]+/g,escape)).replace(/[*]/g,(function(ch){return"%"+ch.charCodeAt(0).toString(16).toUpperCase()}))},uriEscapePath:function uriEscapePath(string){var parts=[];return util.arrayEach(string.split("/"),(function(part){parts.push(util.uriEscape(part))})),parts.join("/")},urlParse:function urlParse(url){return util.url.parse(url)},urlFormat:function urlFormat(url){return util.url.format(url)},queryStringParse:function queryStringParse(qs){return util.querystring.parse(qs)},queryParamsToString:function queryParamsToString(params){var items=[],escape=util.uriEscape,sortedKeys=Object.keys(params).sort();return util.arrayEach(sortedKeys,(function(name){var value=params[name],ename=escape(name),result=ename+"=";if(Array.isArray(value)){var vals=[];util.arrayEach(value,(function(item){vals.push(escape(item))})),result=ename+"="+vals.sort().join("&"+ename+"=")}else null!=value&&(result=ename+"="+escape(value));items.push(result)})),items.join("&")},readFileSync:function readFileSync(path){return util.isBrowser()?null:__webpack_require__("?cebb").readFileSync(path,"utf-8")},base64:{encode:function encode64(string){if("number"==typeof string)throw util.error(new Error("Cannot base64 encode number "+string));return null==string?string:util.buffer.toBuffer(string).toString("base64")},decode:function decode64(string){if("number"==typeof string)throw util.error(new Error("Cannot base64 decode number "+string));return null==string?string:util.buffer.toBuffer(string,"base64")}},buffer:{toBuffer:function(data,encoding){return"function"==typeof util.Buffer.from&&util.Buffer.from!==Uint8Array.from?util.Buffer.from(data,encoding):new util.Buffer(data,encoding)},alloc:function(size,fill,encoding){if("number"!=typeof size)throw new Error("size passed to alloc must be a number.");if("function"==typeof util.Buffer.alloc)return util.Buffer.alloc(size,fill,encoding);var buf=new util.Buffer(size);return void 0!==fill&&"function"==typeof buf.fill&&buf.fill(fill,void 0,void 0,encoding),buf},toStream:function toStream(buffer){util.Buffer.isBuffer(buffer)||(buffer=util.buffer.toBuffer(buffer));var readable=new util.stream.Readable,pos=0;return readable._read=function(size){if(pos>=buffer.length)return readable.push(null);var end=pos+size;end>buffer.length&&(end=buffer.length),readable.push(buffer.slice(pos,end)),pos=end},readable},concat:function(buffers){var buffer,i,length=0,offset=0;for(i=0;i<buffers.length;i++)length+=buffers[i].length;for(buffer=util.buffer.alloc(length),i=0;i<buffers.length;i++)buffers[i].copy(buffer,offset),offset+=buffers[i].length;return buffer}},string:{byteLength:function byteLength(string){if(null==string)return 0;if("string"==typeof string&&(string=util.buffer.toBuffer(string)),"number"==typeof string.byteLength)return string.byteLength;if("number"==typeof string.length)return string.length;if("number"==typeof string.size)return string.size;if("string"==typeof string.path)return __webpack_require__("?cebb").lstatSync(string.path).size;throw util.error(new Error("Cannot determine length of "+string),{object:string})},upperFirst:function upperFirst(string){return string[0].toUpperCase()+string.substr(1)},lowerFirst:function lowerFirst(string){return string[0].toLowerCase()+string.substr(1)}},ini:{parse:function string(ini){var currentSection,map={};return util.arrayEach(ini.split(/\r?\n/),(function(line){if("["===(line=line.split(/(^|\s)[;#]/)[0].trim())[0]&&"]"===line[line.length-1]){if("__proto__"===(currentSection=line.substring(1,line.length-1))||"__proto__"===currentSection.split(/\s/)[1])throw util.error(new Error("Cannot load profile name '"+currentSection+"' from shared ini file."))}else if(currentSection){var indexOfEqualsSign=line.indexOf("="),end=line.length-1;if(-1!==indexOfEqualsSign&&0!==indexOfEqualsSign&&indexOfEqualsSign!==end){var name=line.substring(0,indexOfEqualsSign).trim(),value=line.substring(indexOfEqualsSign+1).trim();map[currentSection]=map[currentSection]||{},map[currentSection][name]=value}}})),map}},fn:{noop:function(){},callback:function(err){if(err)throw err},makeAsync:function makeAsync(fn,expectedArgs){return expectedArgs&&expectedArgs<=fn.length?fn:function(){var args=Array.prototype.slice.call(arguments,0);args.pop()(fn.apply(null,args))}}},date:{getDate:function getDate(){return AWS||(AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js")),AWS.config.systemClockOffset?new Date((new Date).getTime()+AWS.config.systemClockOffset):new Date},iso8601:function iso8601(date){return void 0===date&&(date=util.date.getDate()),date.toISOString().replace(/\.\d{3}Z$/,"Z")},rfc822:function rfc822(date){return void 0===date&&(date=util.date.getDate()),date.toUTCString()},unixTimestamp:function unixTimestamp(date){return void 0===date&&(date=util.date.getDate()),date.getTime()/1e3},from:function format(date){return"number"==typeof date?new Date(1e3*date):new Date(date)},format:function format(date,formatter){return formatter||(formatter="iso8601"),util.date[formatter](util.date.from(date))},parseTimestamp:function parseTimestamp(value){if("number"==typeof value)return new Date(1e3*value);if(value.match(/^\d+$/))return new Date(1e3*value);if(value.match(/^\d{4}/))return new Date(value);if(value.match(/^\w{3},/))return new Date(value);throw util.error(new Error("unhandled timestamp format: "+value),{code:"TimestampParserError"})}},crypto:{crc32Table:[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],crc32:function crc32(data){var tbl=util.crypto.crc32Table,crc=~0;"string"==typeof data&&(data=util.buffer.toBuffer(data));for(var i=0;i<data.length;i++){crc=crc>>>8^tbl[255&(crc^data.readUInt8(i))]}return~crc>>>0},hmac:function hmac(key,string,digest,fn){return digest||(digest="binary"),"buffer"===digest&&(digest=void 0),fn||(fn="sha256"),"string"==typeof string&&(string=util.buffer.toBuffer(string)),util.crypto.lib.createHmac(fn,key).update(string).digest(digest)},md5:function md5(data,digest,callback){return util.crypto.hash("md5",data,digest,callback)},sha256:function sha256(data,digest,callback){return util.crypto.hash("sha256",data,digest,callback)},hash:function(algorithm,data,digest,callback){var hash=util.crypto.createHash(algorithm);digest||(digest="binary"),"buffer"===digest&&(digest=void 0),"string"==typeof data&&(data=util.buffer.toBuffer(data));var sliceFn=util.arraySliceFn(data),isBuffer=util.Buffer.isBuffer(data);if(util.isBrowser()&&"undefined"!=typeof ArrayBuffer&&data&&data.buffer instanceof ArrayBuffer&&(isBuffer=!0),callback&&"object"==typeof data&&"function"==typeof data.on&&!isBuffer)data.on("data",(function(chunk){hash.update(chunk)})),data.on("error",(function(err){callback(err)})),data.on("end",(function(){callback(null,hash.digest(digest))}));else{if(!callback||!sliceFn||isBuffer||"undefined"==typeof FileReader){util.isBrowser()&&"object"==typeof data&&!isBuffer&&(data=new util.Buffer(new Uint8Array(data)));var out=hash.update(data).digest(digest);return callback&&callback(null,out),out}var index=0,reader=new FileReader;reader.onerror=function(){callback(new Error("Failed to read data."))},reader.onload=function(){var buf=new util.Buffer(new Uint8Array(reader.result));hash.update(buf),index+=buf.length,reader._continueReading()},reader._continueReading=function(){if(index>=data.size)callback(null,hash.digest(digest));else{var back=index+524288;back>data.size&&(back=data.size),reader.readAsArrayBuffer(sliceFn.call(data,index,back))}},reader._continueReading()}},toHex:function toHex(data){for(var out=[],i=0;i<data.length;i++)out.push(("0"+data.charCodeAt(i).toString(16)).substr(-2,2));return out.join("")},createHash:function createHash(algorithm){return util.crypto.lib.createHash(algorithm)}},abort:{},each:function each(object,iterFunction){for(var key in object){if(Object.prototype.hasOwnProperty.call(object,key))if(iterFunction.call(this,key,object[key])===util.abort)break}},arrayEach:function arrayEach(array,iterFunction){for(var idx in array){if(Object.prototype.hasOwnProperty.call(array,idx))if(iterFunction.call(this,array[idx],parseInt(idx,10))===util.abort)break}},update:function update(obj1,obj2){return util.each(obj2,(function iterator(key,item){obj1[key]=item})),obj1},merge:function merge(obj1,obj2){return util.update(util.copy(obj1),obj2)},copy:function copy(object){if(null==object)return object;var dupe={};for(var key in object)dupe[key]=object[key];return dupe},isEmpty:function isEmpty(obj){for(var prop in obj)if(Object.prototype.hasOwnProperty.call(obj,prop))return!1;return!0},arraySliceFn:function arraySliceFn(obj){var fn=obj.slice||obj.webkitSlice||obj.mozSlice;return"function"==typeof fn?fn:null},isType:function isType(obj,type){return"function"==typeof type&&(type=util.typeName(type)),Object.prototype.toString.call(obj)==="[object "+type+"]"},typeName:function typeName(type){if(Object.prototype.hasOwnProperty.call(type,"name"))return type.name;var str=type.toString(),match=str.match(/^\s*function (.+)\(/);return match?match[1]:str},error:function error(err,options){var originalError=null;return"string"==typeof err.message&&""!==err.message&&("string"==typeof options||options&&options.message)&&((originalError=util.copy(err)).message=err.message),err.message=err.message||null,"string"==typeof options?err.message=options:"object"==typeof options&&null!==options&&(util.update(err,options),options.message&&(err.message=options.message),(options.code||options.name)&&(err.code=options.code||options.name),options.stack&&(err.stack=options.stack)),"function"==typeof Object.defineProperty&&(Object.defineProperty(err,"name",{writable:!0,enumerable:!1}),Object.defineProperty(err,"message",{enumerable:!0})),err.name=String(options&&options.name||err.name||err.code||"Error"),err.time=new Date,originalError&&(err.originalError=originalError),err},inherit:function inherit(klass,features){var newObject=null;if(void 0===features)features=klass,klass=Object,newObject={};else{var ctor=function ConstructorWrapper(){};ctor.prototype=klass.prototype,newObject=new ctor}return features.constructor===Object&&(features.constructor=function(){if(klass!==Object)return klass.apply(this,arguments)}),features.constructor.prototype=newObject,util.update(features.constructor.prototype,features),features.constructor.__super__=klass,features.constructor},mixin:function mixin(){for(var klass=arguments[0],i=1;i<arguments.length;i++)for(var prop in arguments[i].prototype){var fn=arguments[i].prototype[prop];"constructor"!==prop&&(klass.prototype[prop]=fn)}return klass},hideProperties:function hideProperties(obj,props){"function"==typeof Object.defineProperty&&util.arrayEach(props,(function(key){Object.defineProperty(obj,key,{enumerable:!1,writable:!0,configurable:!0})}))},property:function property(obj,name,value,enumerable,isValue){var opts={configurable:!0,enumerable:void 0===enumerable||enumerable};"function"!=typeof value||isValue?(opts.value=value,opts.writable=!0):opts.get=value,Object.defineProperty(obj,name,opts)},memoizedProperty:function memoizedProperty(obj,name,get,enumerable){var cachedValue=null;util.property(obj,name,(function(){return null===cachedValue&&(cachedValue=get()),cachedValue}),enumerable)},hoistPayloadMember:function hoistPayloadMember(resp){var req=resp.request,operationName=req.operation,operation=req.service.api.operations[operationName],output=operation.output;if(output.payload&&!operation.hasEventOutput){var payloadMember=output.members[output.payload],responsePayload=resp.data[output.payload];"structure"===payloadMember.type&&util.each(responsePayload,(function(key,value){util.property(resp.data,key,value,!1)}))}},computeSha256:function computeSha256(body,done){if(util.isNode()){var Stream=util.stream.Stream,fs=__webpack_require__("?cebb");if("function"==typeof Stream&&body instanceof Stream){if("string"!=typeof body.path)return done(new Error("Non-file stream objects are not supported with SigV4"));var settings={};"number"==typeof body.start&&(settings.start=body.start),"number"==typeof body.end&&(settings.end=body.end),body=fs.createReadStream(body.path,settings)}}util.crypto.sha256(body,"hex",(function(err,sha){err?done(err):done(null,sha)}))},isClockSkewed:function isClockSkewed(serverTime){if(serverTime)return util.property(AWS.config,"isClockSkewed",Math.abs((new Date).getTime()-serverTime)>=3e5,!1),AWS.config.isClockSkewed},applyClockOffset:function applyClockOffset(serverTime){serverTime&&(AWS.config.systemClockOffset=serverTime-(new Date).getTime())},extractRequestId:function extractRequestId(resp){var requestId=resp.httpResponse.headers["x-amz-request-id"]||resp.httpResponse.headers["x-amzn-requestid"];!requestId&&resp.data&&resp.data.ResponseMetadata&&(requestId=resp.data.ResponseMetadata.RequestId),requestId&&(resp.requestId=requestId),resp.error&&(resp.error.requestId=requestId)},addPromises:function addPromises(constructors,PromiseDependency){var deletePromises=!1;void 0===PromiseDependency&&AWS&&AWS.config&&(PromiseDependency=AWS.config.getPromisesDependency()),void 0===PromiseDependency&&"undefined"!=typeof Promise&&(PromiseDependency=Promise),"function"!=typeof PromiseDependency&&(deletePromises=!0),Array.isArray(constructors)||(constructors=[constructors]);for(var ind=0;ind<constructors.length;ind++){var constructor=constructors[ind];deletePromises?constructor.deletePromisesFromClass&&constructor.deletePromisesFromClass():constructor.addPromisesToClass&&constructor.addPromisesToClass(PromiseDependency)}},promisifyMethod:function promisifyMethod(methodName,PromiseDependency){return function promise(){var self=this,args=Array.prototype.slice.call(arguments);return new PromiseDependency((function(resolve,reject){args.push((function(err,data){err?reject(err):resolve(data)})),self[methodName].apply(self,args)}))}},isDualstackAvailable:function isDualstackAvailable(service){if(!service)return!1;var metadata=__webpack_require__("./node_modules/aws-sdk/apis/metadata.json");return"string"!=typeof service&&(service=service.serviceIdentifier),!("string"!=typeof service||!metadata.hasOwnProperty(service))&&!!metadata[service].dualstackAvailable},calculateRetryDelay:function calculateRetryDelay(retryCount,retryDelayOptions,err){retryDelayOptions||(retryDelayOptions={});var customBackoff=retryDelayOptions.customBackoff||null;if("function"==typeof customBackoff)return customBackoff(retryCount,err);var base="number"==typeof retryDelayOptions.base?retryDelayOptions.base:100;return Math.random()*(Math.pow(2,retryCount)*base)},handleRequestWithRetries:function handleRequestWithRetries(httpRequest,options,cb){options||(options={});var http=AWS.HttpClient.getInstance(),httpOptions=options.httpOptions||{},retryCount=0,errCallback=function(err){var maxRetries=options.maxRetries||0;if(err&&"TimeoutError"===err.code&&(err.retryable=!0),err&&err.retryable&&retryCount<maxRetries){var delay=util.calculateRetryDelay(retryCount,options.retryDelayOptions,err);if(delay>=0)return retryCount++,void setTimeout(sendRequest,delay+(err.retryAfter||0))}cb(err)},sendRequest=function(){var data="";http.handleRequest(httpRequest,httpOptions,(function(httpResponse){httpResponse.on("data",(function(chunk){data+=chunk.toString()})),httpResponse.on("end",(function(){var statusCode=httpResponse.statusCode;if(statusCode<300)cb(null,data);else{var retryAfter=1e3*parseInt(httpResponse.headers["retry-after"],10)||0,err=util.error(new Error,{statusCode,retryable:statusCode>=500||429===statusCode});retryAfter&&err.retryable&&(err.retryAfter=retryAfter),errCallback(err)}}))}),errCallback)};AWS.util.defer(sendRequest)},uuid:{v4:function uuidV4(){return __webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/index.js").v4()}},convertPayloadToString:function convertPayloadToString(resp){var req=resp.request,operation=req.operation,rules=req.service.api.operations[operation].output||{};rules.payload&&resp.data[rules.payload]&&(resp.data[rules.payload]=resp.data[rules.payload].toString())},defer:function defer(callback){"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick(callback):"function"==typeof setImmediate?setImmediate(callback):setTimeout(callback,0)},getRequestPayloadShape:function getRequestPayloadShape(req){var operations=req.service.api.operations;if(operations){var operation=(operations||{})[req.operation];if(operation&&operation.input&&operation.input.payload)return operation.input.members[operation.input.payload]}},getProfilesFromSharedConfig:function getProfilesFromSharedConfig(iniLoader,filename){var profiles={},profilesFromConfig={};if(process.env[util.configOptInEnv])profilesFromConfig=iniLoader.loadFrom({isConfig:!0,filename:process.env[util.sharedConfigFileEnv]});var profilesFromCreds={};try{profilesFromCreds=iniLoader.loadFrom({filename:filename||process.env[util.configOptInEnv]&&process.env[util.sharedCredentialsFileEnv]})}catch(error){if(!process.env[util.configOptInEnv])throw error}for(var i=0,profileNames=Object.keys(profilesFromConfig);i<profileNames.length;i++)profiles[profileNames[i]]=objectAssign(profiles[profileNames[i]]||{},profilesFromConfig[profileNames[i]]);for(i=0,profileNames=Object.keys(profilesFromCreds);i<profileNames.length;i++)profiles[profileNames[i]]=objectAssign(profiles[profileNames[i]]||{},profilesFromCreds[profileNames[i]]);return profiles;function objectAssign(target,source){for(var i=0,keys=Object.keys(source);i<keys.length;i++)target[keys[i]]=source[keys[i]];return target}},ARN:{validate:function validateARN(str){return str&&0===str.indexOf("arn:")&&str.split(":").length>=6},parse:function parseARN(arn){var matched=arn.split(":");return{partition:matched[1],service:matched[2],region:matched[3],accountId:matched[4],resource:matched.slice(5).join(":")}},build:function buildARN(arnObject){if(void 0===arnObject.service||void 0===arnObject.region||void 0===arnObject.accountId||void 0===arnObject.resource)throw util.error(new Error("Input ARN object is invalid"));return"arn:"+(arnObject.partition||"aws")+":"+arnObject.service+":"+arnObject.region+":"+arnObject.accountId+":"+arnObject.resource}},defaultProfile:"default",configOptInEnv:"AWS_SDK_LOAD_CONFIG",sharedCredentialsFileEnv:"AWS_SHARED_CREDENTIALS_FILE",sharedConfigFileEnv:"AWS_CONFIG_FILE",imdsDisabledEnv:"AWS_EC2_METADATA_DISABLED"};module.exports=util},"./node_modules/aws-sdk/lib/xml/builder.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),XmlNode=__webpack_require__("./node_modules/aws-sdk/lib/xml/xml-node.js").XmlNode,XmlText=__webpack_require__("./node_modules/aws-sdk/lib/xml/xml-text.js").XmlText;function XmlBuilder(){}function serialize(xml,value,shape){switch(shape.type){case"structure":return function serializeStructure(xml,params,shape){util.arrayEach(shape.memberNames,(function(memberName){var memberShape=shape.members[memberName];if("body"===memberShape.location){var value=params[memberName],name=memberShape.name;if(null!=value)if(memberShape.isXmlAttribute)xml.addAttribute(name,value);else if(memberShape.flattened)serialize(xml,value,memberShape);else{var element=new XmlNode(name);xml.addChildNode(element),applyNamespaces(element,memberShape),serialize(element,value,memberShape)}}}))}(xml,value,shape);case"map":return function serializeMap(xml,map,shape){var xmlKey=shape.key.name||"key",xmlValue=shape.value.name||"value";util.each(map,(function(key,value){var entry=new XmlNode(shape.flattened?shape.name:"entry");xml.addChildNode(entry);var entryKey=new XmlNode(xmlKey),entryValue=new XmlNode(xmlValue);entry.addChildNode(entryKey),entry.addChildNode(entryValue),serialize(entryKey,key,shape.key),serialize(entryValue,value,shape.value)}))}(xml,value,shape);case"list":return function serializeList(xml,list,shape){shape.flattened?util.arrayEach(list,(function(value){var name=shape.member.name||shape.name,element=new XmlNode(name);xml.addChildNode(element),serialize(element,value,shape.member)})):util.arrayEach(list,(function(value){var name=shape.member.name||"member",element=new XmlNode(name);xml.addChildNode(element),serialize(element,value,shape.member)}))}(xml,value,shape);default:return function serializeScalar(xml,value,shape){xml.addChildNode(new XmlText(shape.toWireFormat(value)))}(xml,value,shape)}}function applyNamespaces(xml,shape,isRoot){var uri,prefix="xmlns";shape.xmlNamespaceUri?(uri=shape.xmlNamespaceUri,shape.xmlNamespacePrefix&&(prefix+=":"+shape.xmlNamespacePrefix)):isRoot&&shape.api.xmlNamespaceUri&&(uri=shape.api.xmlNamespaceUri),uri&&xml.addAttribute(prefix,uri)}XmlBuilder.prototype.toXML=function(params,shape,rootElement,noEmpty){var xml=new XmlNode(rootElement);return applyNamespaces(xml,shape,!0),serialize(xml,params,shape),xml.children.length>0||noEmpty?xml.toString():""},module.exports=XmlBuilder},"./node_modules/aws-sdk/lib/xml/escape-attribute.js":module=>{module.exports={escapeAttribute:function escapeAttribute(value){return value.replace(/&/g,"&amp;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")}}},"./node_modules/aws-sdk/lib/xml/escape-element.js":module=>{module.exports={escapeElement:function escapeElement(value){return value.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#x0D;").replace(/\n/g,"&#x0A;").replace(/\u0085/g,"&#x85;").replace(/\u2028/,"&#x2028;")}}},"./node_modules/aws-sdk/lib/xml/xml-node.js":(module,__unused_webpack_exports,__webpack_require__)=>{var escapeAttribute=__webpack_require__("./node_modules/aws-sdk/lib/xml/escape-attribute.js").escapeAttribute;function XmlNode(name,children){void 0===children&&(children=[]),this.name=name,this.children=children,this.attributes={}}XmlNode.prototype.addAttribute=function(name,value){return this.attributes[name]=value,this},XmlNode.prototype.addChildNode=function(child){return this.children.push(child),this},XmlNode.prototype.removeAttribute=function(name){return delete this.attributes[name],this},XmlNode.prototype.toString=function(){for(var hasChildren=Boolean(this.children.length),xmlText="<"+this.name,attributes=this.attributes,i=0,attributeNames=Object.keys(attributes);i<attributeNames.length;i++){var attributeName=attributeNames[i],attribute=attributes[attributeName];null!=attribute&&(xmlText+=" "+attributeName+'="'+escapeAttribute(""+attribute)+'"')}return xmlText+(hasChildren?">"+this.children.map((function(c){return c.toString()})).join("")+"</"+this.name+">":"/>")},module.exports={XmlNode}},"./node_modules/aws-sdk/lib/xml/xml-text.js":(module,__unused_webpack_exports,__webpack_require__)=>{var escapeElement=__webpack_require__("./node_modules/aws-sdk/lib/xml/escape-element.js").escapeElement;function XmlText(value){this.value=value}XmlText.prototype.toString=function(){return escapeElement(""+this.value)},module.exports={XmlText}},"./node_modules/aws-sdk/node_modules/uuid/dist/bytesToUuid.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;for(var byteToHex=[],i=0;i<256;++i)byteToHex[i]=(i+256).toString(16).substr(1);var _default=function bytesToUuid(buf,offset){var i=offset||0,bth=byteToHex;return[bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],"-",bth[buf[i++]],bth[buf[i++]],"-",bth[buf[i++]],bth[buf[i++]],"-",bth[buf[i++]],bth[buf[i++]],"-",bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]]].join("")};exports.default=_default},"./node_modules/aws-sdk/node_modules/uuid/dist/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"v4",{enumerable:!0,get:function(){return _v3.default}});var _v=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/v1.js")),_v2=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/v3.js")),_v3=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/v4.js")),_v4=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/v5.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}},"./node_modules/aws-sdk/node_modules/uuid/dist/md5-browser.js":(__unused_webpack_module,exports)=>{"use strict";function safeAdd(x,y){var lsw=(65535&x)+(65535&y);return(x>>16)+(y>>16)+(lsw>>16)<<16|65535&lsw}function md5cmn(q,a,b,x,s,t){return safeAdd(function bitRotateLeft(num,cnt){return num<<cnt|num>>>32-cnt}(safeAdd(safeAdd(a,q),safeAdd(x,t)),s),b)}function md5ff(a,b,c,d,x,s,t){return md5cmn(b&c|~b&d,a,b,x,s,t)}function md5gg(a,b,c,d,x,s,t){return md5cmn(b&d|c&~d,a,b,x,s,t)}function md5hh(a,b,c,d,x,s,t){return md5cmn(b^c^d,a,b,x,s,t)}function md5ii(a,b,c,d,x,s,t){return md5cmn(c^(b|~d),a,b,x,s,t)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=function md5(bytes){if("string"==typeof bytes){var msg=unescape(encodeURIComponent(bytes));bytes=new Array(msg.length);for(var i=0;i<msg.length;i++)bytes[i]=msg.charCodeAt(i)}return function md5ToHexEncodedArray(input){var i,x,hex,output=[],length32=32*input.length,hexTab="0123456789abcdef";for(i=0;i<length32;i+=8)x=input[i>>5]>>>i%32&255,hex=parseInt(hexTab.charAt(x>>>4&15)+hexTab.charAt(15&x),16),output.push(hex);return output}(function wordsToMd5(x,len){var i,olda,oldb,oldc,oldd;x[len>>5]|=128<<len%32,x[14+(len+64>>>9<<4)]=len;var a=1732584193,b=-271733879,c=-1732584194,d=271733878;for(i=0;i<x.length;i+=16)olda=a,oldb=b,oldc=c,oldd=d,a=md5ff(a,b,c,d,x[i],7,-680876936),d=md5ff(d,a,b,c,x[i+1],12,-389564586),c=md5ff(c,d,a,b,x[i+2],17,606105819),b=md5ff(b,c,d,a,x[i+3],22,-1044525330),a=md5ff(a,b,c,d,x[i+4],7,-176418897),d=md5ff(d,a,b,c,x[i+5],12,1200080426),c=md5ff(c,d,a,b,x[i+6],17,-1473231341),b=md5ff(b,c,d,a,x[i+7],22,-45705983),a=md5ff(a,b,c,d,x[i+8],7,1770035416),d=md5ff(d,a,b,c,x[i+9],12,-1958414417),c=md5ff(c,d,a,b,x[i+10],17,-42063),b=md5ff(b,c,d,a,x[i+11],22,-1990404162),a=md5ff(a,b,c,d,x[i+12],7,1804603682),d=md5ff(d,a,b,c,x[i+13],12,-40341101),c=md5ff(c,d,a,b,x[i+14],17,-1502002290),a=md5gg(a,b=md5ff(b,c,d,a,x[i+15],22,1236535329),c,d,x[i+1],5,-165796510),d=md5gg(d,a,b,c,x[i+6],9,-1069501632),c=md5gg(c,d,a,b,x[i+11],14,643717713),b=md5gg(b,c,d,a,x[i],20,-373897302),a=md5gg(a,b,c,d,x[i+5],5,-701558691),d=md5gg(d,a,b,c,x[i+10],9,38016083),c=md5gg(c,d,a,b,x[i+15],14,-660478335),b=md5gg(b,c,d,a,x[i+4],20,-405537848),a=md5gg(a,b,c,d,x[i+9],5,568446438),d=md5gg(d,a,b,c,x[i+14],9,-1019803690),c=md5gg(c,d,a,b,x[i+3],14,-187363961),b=md5gg(b,c,d,a,x[i+8],20,1163531501),a=md5gg(a,b,c,d,x[i+13],5,-1444681467),d=md5gg(d,a,b,c,x[i+2],9,-51403784),c=md5gg(c,d,a,b,x[i+7],14,1735328473),a=md5hh(a,b=md5gg(b,c,d,a,x[i+12],20,-1926607734),c,d,x[i+5],4,-378558),d=md5hh(d,a,b,c,x[i+8],11,-2022574463),c=md5hh(c,d,a,b,x[i+11],16,1839030562),b=md5hh(b,c,d,a,x[i+14],23,-35309556),a=md5hh(a,b,c,d,x[i+1],4,-1530992060),d=md5hh(d,a,b,c,x[i+4],11,1272893353),c=md5hh(c,d,a,b,x[i+7],16,-155497632),b=md5hh(b,c,d,a,x[i+10],23,-1094730640),a=md5hh(a,b,c,d,x[i+13],4,681279174),d=md5hh(d,a,b,c,x[i],11,-358537222),c=md5hh(c,d,a,b,x[i+3],16,-722521979),b=md5hh(b,c,d,a,x[i+6],23,76029189),a=md5hh(a,b,c,d,x[i+9],4,-640364487),d=md5hh(d,a,b,c,x[i+12],11,-421815835),c=md5hh(c,d,a,b,x[i+15],16,530742520),a=md5ii(a,b=md5hh(b,c,d,a,x[i+2],23,-995338651),c,d,x[i],6,-198630844),d=md5ii(d,a,b,c,x[i+7],10,1126891415),c=md5ii(c,d,a,b,x[i+14],15,-1416354905),b=md5ii(b,c,d,a,x[i+5],21,-57434055),a=md5ii(a,b,c,d,x[i+12],6,1700485571),d=md5ii(d,a,b,c,x[i+3],10,-1894986606),c=md5ii(c,d,a,b,x[i+10],15,-1051523),b=md5ii(b,c,d,a,x[i+1],21,-2054922799),a=md5ii(a,b,c,d,x[i+8],6,1873313359),d=md5ii(d,a,b,c,x[i+15],10,-30611744),c=md5ii(c,d,a,b,x[i+6],15,-1560198380),b=md5ii(b,c,d,a,x[i+13],21,1309151649),a=md5ii(a,b,c,d,x[i+4],6,-145523070),d=md5ii(d,a,b,c,x[i+11],10,-1120210379),c=md5ii(c,d,a,b,x[i+2],15,718787259),b=md5ii(b,c,d,a,x[i+9],21,-343485551),a=safeAdd(a,olda),b=safeAdd(b,oldb),c=safeAdd(c,oldc),d=safeAdd(d,oldd);return[a,b,c,d]}(function bytesToWords(input){var i,output=[];for(output[(input.length>>2)-1]=void 0,i=0;i<output.length;i+=1)output[i]=0;var length8=8*input.length;for(i=0;i<length8;i+=8)output[i>>5]|=(255&input[i/8])<<i%32;return output}(bytes),8*bytes.length))};exports.default=_default},"./node_modules/aws-sdk/node_modules/uuid/dist/rng-browser.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function rng(){if(!getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)};var getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),rnds8=new Uint8Array(16)},"./node_modules/aws-sdk/node_modules/uuid/dist/sha1-browser.js":(__unused_webpack_module,exports)=>{"use strict";function f(s,x,y,z){switch(s){case 0:return x&y^~x&z;case 1:case 3:return x^y^z;case 2:return x&y^x&z^y&z}}function ROTL(x,n){return x<<n|x>>>32-n}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=function sha1(bytes){var K=[1518500249,1859775393,2400959708,3395469782],H=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof bytes){var msg=unescape(encodeURIComponent(bytes));bytes=new Array(msg.length);for(var i=0;i<msg.length;i++)bytes[i]=msg.charCodeAt(i)}bytes.push(128);var l=bytes.length/4+2,N=Math.ceil(l/16),M=new Array(N);for(i=0;i<N;i++){M[i]=new Array(16);for(var j=0;j<16;j++)M[i][j]=bytes[64*i+4*j]<<24|bytes[64*i+4*j+1]<<16|bytes[64*i+4*j+2]<<8|bytes[64*i+4*j+3]}for(M[N-1][14]=8*(bytes.length-1)/Math.pow(2,32),M[N-1][14]=Math.floor(M[N-1][14]),M[N-1][15]=8*(bytes.length-1)&4294967295,i=0;i<N;i++){for(var W=new Array(80),t=0;t<16;t++)W[t]=M[i][t];for(t=16;t<80;t++)W[t]=ROTL(W[t-3]^W[t-8]^W[t-14]^W[t-16],1);var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4];for(t=0;t<80;t++){var s=Math.floor(t/20),T=ROTL(a,5)+f(s,b,c,d)+e+K[s]+W[t]>>>0;e=d,d=c,c=ROTL(b,30)>>>0,b=a,a=T}H[0]=H[0]+a>>>0,H[1]=H[1]+b>>>0,H[2]=H[2]+c>>>0,H[3]=H[3]+d>>>0,H[4]=H[4]+e>>>0}return[H[0]>>24&255,H[0]>>16&255,H[0]>>8&255,255&H[0],H[1]>>24&255,H[1]>>16&255,H[1]>>8&255,255&H[1],H[2]>>24&255,H[2]>>16&255,H[2]>>8&255,255&H[2],H[3]>>24&255,H[3]>>16&255,H[3]>>8&255,255&H[3],H[4]>>24&255,H[4]>>16&255,H[4]>>8&255,255&H[4]]};exports.default=_default},"./node_modules/aws-sdk/node_modules/uuid/dist/v1.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _nodeId,_clockseq,_rng=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/rng-browser.js")),_bytesToUuid=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/bytesToUuid.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _lastMSecs=0,_lastNSecs=0;var _default=function v1(options,buf,offset){var i=buf&&offset||0,b=buf||[],node=(options=options||{}).node||_nodeId,clockseq=void 0!==options.clockseq?options.clockseq:_clockseq;if(null==node||null==clockseq){var seedBytes=options.random||(options.rng||_rng.default)();null==node&&(node=_nodeId=[1|seedBytes[0],seedBytes[1],seedBytes[2],seedBytes[3],seedBytes[4],seedBytes[5]]),null==clockseq&&(clockseq=_clockseq=16383&(seedBytes[6]<<8|seedBytes[7]))}var msecs=void 0!==options.msecs?options.msecs:(new Date).getTime(),nsecs=void 0!==options.nsecs?options.nsecs:_lastNSecs+1,dt=msecs-_lastMSecs+(nsecs-_lastNSecs)/1e4;if(dt<0&&void 0===options.clockseq&&(clockseq=clockseq+1&16383),(dt<0||msecs>_lastMSecs)&&void 0===options.nsecs&&(nsecs=0),nsecs>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");_lastMSecs=msecs,_lastNSecs=nsecs,_clockseq=clockseq;var tl=(1e4*(268435455&(msecs+=122192928e5))+nsecs)%4294967296;b[i++]=tl>>>24&255,b[i++]=tl>>>16&255,b[i++]=tl>>>8&255,b[i++]=255&tl;var tmh=msecs/4294967296*1e4&268435455;b[i++]=tmh>>>8&255,b[i++]=255&tmh,b[i++]=tmh>>>24&15|16,b[i++]=tmh>>>16&255,b[i++]=clockseq>>>8|128,b[i++]=255&clockseq;for(var n=0;n<6;++n)b[i+n]=node[n];return buf||(0,_bytesToUuid.default)(b)};exports.default=_default},"./node_modules/aws-sdk/node_modules/uuid/dist/v3.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _v=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/v35.js")),_md=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/md5-browser.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=(0,_v.default)("v3",48,_md.default);exports.default=_default},"./node_modules/aws-sdk/node_modules/uuid/dist/v35.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function _default(name,version,hashfunc){var generateUUID=function(value,namespace,buf,offset){var off=buf&&offset||0;if("string"==typeof value&&(value=function stringToBytes(str){str=unescape(encodeURIComponent(str));for(var bytes=new Array(str.length),i=0;i<str.length;i++)bytes[i]=str.charCodeAt(i);return bytes}(value)),"string"==typeof namespace&&(namespace=function uuidToBytes(uuid){var bytes=[];return uuid.replace(/[a-fA-F0-9]{2}/g,(function(hex){bytes.push(parseInt(hex,16))})),bytes}(namespace)),!Array.isArray(value))throw TypeError("value must be an array of bytes");if(!Array.isArray(namespace)||16!==namespace.length)throw TypeError("namespace must be uuid string or an Array of 16 byte values");var bytes=hashfunc(namespace.concat(value));if(bytes[6]=15&bytes[6]|version,bytes[8]=63&bytes[8]|128,buf)for(var idx=0;idx<16;++idx)buf[off+idx]=bytes[idx];return buf||(0,_bytesToUuid.default)(bytes)};try{generateUUID.name=name}catch(err){}return generateUUID.DNS=DNS,generateUUID.URL=URL,generateUUID},exports.URL=exports.DNS=void 0;var _bytesToUuid=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/bytesToUuid.js"));const DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8";exports.DNS=DNS;const URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8";exports.URL=URL},"./node_modules/aws-sdk/node_modules/uuid/dist/v4.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _rng=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/rng-browser.js")),_bytesToUuid=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/bytesToUuid.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=function v4(options,buf,offset){var i=buf&&offset||0;"string"==typeof options&&(buf="binary"===options?new Array(16):null,options=null);var rnds=(options=options||{}).random||(options.rng||_rng.default)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf)for(var ii=0;ii<16;++ii)buf[i+ii]=rnds[ii];return buf||(0,_bytesToUuid.default)(rnds)};exports.default=_default},"./node_modules/aws-sdk/node_modules/uuid/dist/v5.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _v=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/v35.js")),_sha=_interopRequireDefault(__webpack_require__("./node_modules/aws-sdk/node_modules/uuid/dist/sha1-browser.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=(0,_v.default)("v5",80,_sha.default);exports.default=_default},"./node_modules/aws-sdk/vendor/endpoint-cache/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var LRU_1=__webpack_require__("./node_modules/aws-sdk/vendor/endpoint-cache/utils/LRU.js"),EndpointCache=function(){function EndpointCache(maxSize){void 0===maxSize&&(maxSize=1e3),this.maxSize=maxSize,this.cache=new LRU_1.LRUCache(maxSize)}return Object.defineProperty(EndpointCache.prototype,"size",{get:function(){return this.cache.length},enumerable:!0,configurable:!0}),EndpointCache.prototype.put=function(key,value){var keyString="string"!=typeof key?EndpointCache.getKeyString(key):key,endpointRecord=this.populateValue(value);this.cache.put(keyString,endpointRecord)},EndpointCache.prototype.get=function(key){var keyString="string"!=typeof key?EndpointCache.getKeyString(key):key,now=Date.now(),records=this.cache.get(keyString);if(records){for(var i=records.length-1;i>=0;i--){records[i].Expire<now&&records.splice(i,1)}if(0===records.length)return void this.cache.remove(keyString)}return records},EndpointCache.getKeyString=function(key){for(var identifiers=[],identifierNames=Object.keys(key).sort(),i=0;i<identifierNames.length;i++){var identifierName=identifierNames[i];void 0!==key[identifierName]&&identifiers.push(key[identifierName])}return identifiers.join(" ")},EndpointCache.prototype.populateValue=function(endpoints){var now=Date.now();return endpoints.map((function(endpoint){return{Address:endpoint.Address||"",Expire:now+60*(endpoint.CachePeriodInMinutes||1)*1e3}}))},EndpointCache.prototype.empty=function(){this.cache.empty()},EndpointCache.prototype.remove=function(key){var keyString="string"!=typeof key?EndpointCache.getKeyString(key):key;this.cache.remove(keyString)},EndpointCache}();exports.k=EndpointCache},"./node_modules/aws-sdk/vendor/endpoint-cache/utils/LRU.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var LinkedListNode=function LinkedListNode(key,value){this.key=key,this.value=value},LRUCache=function(){function LRUCache(size){if(this.nodeMap={},this.size=0,"number"!=typeof size||size<1)throw new Error("Cache size can only be positive number");this.sizeLimit=size}return Object.defineProperty(LRUCache.prototype,"length",{get:function(){return this.size},enumerable:!0,configurable:!0}),LRUCache.prototype.prependToList=function(node){this.headerNode?(this.headerNode.prev=node,node.next=this.headerNode):this.tailNode=node,this.headerNode=node,this.size++},LRUCache.prototype.removeFromTail=function(){if(this.tailNode){var node=this.tailNode,prevNode=node.prev;return prevNode&&(prevNode.next=void 0),node.prev=void 0,this.tailNode=prevNode,this.size--,node}},LRUCache.prototype.detachFromList=function(node){this.headerNode===node&&(this.headerNode=node.next),this.tailNode===node&&(this.tailNode=node.prev),node.prev&&(node.prev.next=node.next),node.next&&(node.next.prev=node.prev),node.next=void 0,node.prev=void 0,this.size--},LRUCache.prototype.get=function(key){if(this.nodeMap[key]){var node=this.nodeMap[key];return this.detachFromList(node),this.prependToList(node),node.value}},LRUCache.prototype.remove=function(key){if(this.nodeMap[key]){var node=this.nodeMap[key];this.detachFromList(node),delete this.nodeMap[key]}},LRUCache.prototype.put=function(key,value){if(this.nodeMap[key])this.remove(key);else if(this.size===this.sizeLimit){var key_1=this.removeFromTail().key;delete this.nodeMap[key_1]}var newNode=new LinkedListNode(key,value);this.nodeMap[key]=newNode,this.prependToList(newNode)},LRUCache.prototype.empty=function(){for(var keys=Object.keys(this.nodeMap),i=0;i<keys.length;i++){var key=keys[i],node=this.nodeMap[key];this.detachFromList(node),delete this.nodeMap[key]}},LRUCache}();exports.LRUCache=LRUCache},"./node_modules/jmespath/jmespath.js":(__unused_webpack_module,exports)=>{!function(exports){"use strict";function isArray(obj){return null!==obj&&"[object Array]"===Object.prototype.toString.call(obj)}function isObject(obj){return null!==obj&&"[object Object]"===Object.prototype.toString.call(obj)}function strictDeepEqual(first,second){if(first===second)return!0;if(Object.prototype.toString.call(first)!==Object.prototype.toString.call(second))return!1;if(!0===isArray(first)){if(first.length!==second.length)return!1;for(var i=0;i<first.length;i++)if(!1===strictDeepEqual(first[i],second[i]))return!1;return!0}if(!0===isObject(first)){var keysSeen={};for(var key in first)if(hasOwnProperty.call(first,key)){if(!1===strictDeepEqual(first[key],second[key]))return!1;keysSeen[key]=!0}for(var key2 in second)if(hasOwnProperty.call(second,key2)&&!0!==keysSeen[key2])return!1;return!0}return!1}function isFalse(obj){if(""===obj||!1===obj||null===obj)return!0;if(isArray(obj)&&0===obj.length)return!0;if(isObject(obj)){for(var key in obj)if(obj.hasOwnProperty(key))return!1;return!0}return!1}var trimLeft;trimLeft="function"==typeof String.prototype.trimLeft?function(str){return str.trimLeft()}:function(str){return str.match(/^\s*(.*)/)[1]};var TYPE_NUMBER=0,TYPE_ANY=1,TYPE_STRING=2,TYPE_ARRAY=3,TYPE_OBJECT=4,TYPE_EXPREF=6,TYPE_ARRAY_NUMBER=8,TYPE_ARRAY_STRING=9,TYPE_NAME_TABLE={0:"number",1:"any",2:"string",3:"array",4:"object",5:"boolean",6:"expression",7:"null",8:"Array<number>",9:"Array<string>"},basicTokens={".":"Dot","*":"Star",",":"Comma",":":"Colon","{":"Lbrace","}":"Rbrace","]":"Rbracket","(":"Lparen",")":"Rparen","@":"Current"},operatorStartToken={"<":!0,">":!0,"=":!0,"!":!0},skipChars={" ":!0,"\t":!0,"\n":!0};function isNum(ch){return ch>="0"&&ch<="9"||"-"===ch}function Lexer(){}Lexer.prototype={tokenize:function(stream){var start,identifier,token,ch,tokens=[];for(this._current=0;this._current<stream.length;)if((ch=stream[this._current])>="a"&&ch<="z"||ch>="A"&&ch<="Z"||"_"===ch)start=this._current,identifier=this._consumeUnquotedIdentifier(stream),tokens.push({type:"UnquotedIdentifier",value:identifier,start});else if(void 0!==basicTokens[stream[this._current]])tokens.push({type:basicTokens[stream[this._current]],value:stream[this._current],start:this._current}),this._current++;else if(isNum(stream[this._current]))token=this._consumeNumber(stream),tokens.push(token);else if("["===stream[this._current])token=this._consumeLBracket(stream),tokens.push(token);else if('"'===stream[this._current])start=this._current,identifier=this._consumeQuotedIdentifier(stream),tokens.push({type:"QuotedIdentifier",value:identifier,start});else if("'"===stream[this._current])start=this._current,identifier=this._consumeRawStringLiteral(stream),tokens.push({type:"Literal",value:identifier,start});else if("`"===stream[this._current]){start=this._current;var literal=this._consumeLiteral(stream);tokens.push({type:"Literal",value:literal,start})}else if(void 0!==operatorStartToken[stream[this._current]])tokens.push(this._consumeOperator(stream));else if(void 0!==skipChars[stream[this._current]])this._current++;else if("&"===stream[this._current])start=this._current,this._current++,"&"===stream[this._current]?(this._current++,tokens.push({type:"And",value:"&&",start})):tokens.push({type:"Expref",value:"&",start});else{if("|"!==stream[this._current]){var error=new Error("Unknown character:"+stream[this._current]);throw error.name="LexerError",error}start=this._current,this._current++,"|"===stream[this._current]?(this._current++,tokens.push({type:"Or",value:"||",start})):tokens.push({type:"Pipe",value:"|",start})}return tokens},_consumeUnquotedIdentifier:function(stream){var ch,start=this._current;for(this._current++;this._current<stream.length&&((ch=stream[this._current])>="a"&&ch<="z"||ch>="A"&&ch<="Z"||ch>="0"&&ch<="9"||"_"===ch);)this._current++;return stream.slice(start,this._current)},_consumeQuotedIdentifier:function(stream){var start=this._current;this._current++;for(var maxLength=stream.length;'"'!==stream[this._current]&&this._current<maxLength;){var current=this._current;"\\"!==stream[current]||"\\"!==stream[current+1]&&'"'!==stream[current+1]?current++:current+=2,this._current=current}return this._current++,JSON.parse(stream.slice(start,this._current))},_consumeRawStringLiteral:function(stream){var start=this._current;this._current++;for(var maxLength=stream.length;"'"!==stream[this._current]&&this._current<maxLength;){var current=this._current;"\\"!==stream[current]||"\\"!==stream[current+1]&&"'"!==stream[current+1]?current++:current+=2,this._current=current}return this._current++,stream.slice(start+1,this._current-1).replace("\\'","'")},_consumeNumber:function(stream){var start=this._current;this._current++;for(var maxLength=stream.length;isNum(stream[this._current])&&this._current<maxLength;)this._current++;return{type:"Number",value:parseInt(stream.slice(start,this._current)),start}},_consumeLBracket:function(stream){var start=this._current;return this._current++,"?"===stream[this._current]?(this._current++,{type:"Filter",value:"[?",start}):"]"===stream[this._current]?(this._current++,{type:"Flatten",value:"[]",start}):{type:"Lbracket",value:"[",start}},_consumeOperator:function(stream){var start=this._current,startingChar=stream[start];return this._current++,"!"===startingChar?"="===stream[this._current]?(this._current++,{type:"NE",value:"!=",start}):{type:"Not",value:"!",start}:"<"===startingChar?"="===stream[this._current]?(this._current++,{type:"LTE",value:"<=",start}):{type:"LT",value:"<",start}:">"===startingChar?"="===stream[this._current]?(this._current++,{type:"GTE",value:">=",start}):{type:"GT",value:">",start}:"="===startingChar&&"="===stream[this._current]?(this._current++,{type:"EQ",value:"==",start}):void 0},_consumeLiteral:function(stream){this._current++;for(var literal,start=this._current,maxLength=stream.length;"`"!==stream[this._current]&&this._current<maxLength;){var current=this._current;"\\"!==stream[current]||"\\"!==stream[current+1]&&"`"!==stream[current+1]?current++:current+=2,this._current=current}var literalString=trimLeft(stream.slice(start,this._current));return literalString=literalString.replace("\\`","`"),literal=this._looksLikeJSON(literalString)?JSON.parse(literalString):JSON.parse('"'+literalString+'"'),this._current++,literal},_looksLikeJSON:function(literalString){if(""===literalString)return!1;if('[{"'.indexOf(literalString[0])>=0)return!0;if(["true","false","null"].indexOf(literalString)>=0)return!0;if(!("-0123456789".indexOf(literalString[0])>=0))return!1;try{return JSON.parse(literalString),!0}catch(ex){return!1}}};var bindingPower={};function Parser(){}function TreeInterpreter(runtime){this.runtime=runtime}function Runtime(interpreter){this._interpreter=interpreter,this.functionTable={abs:{_func:this._functionAbs,_signature:[{types:[TYPE_NUMBER]}]},avg:{_func:this._functionAvg,_signature:[{types:[TYPE_ARRAY_NUMBER]}]},ceil:{_func:this._functionCeil,_signature:[{types:[TYPE_NUMBER]}]},contains:{_func:this._functionContains,_signature:[{types:[TYPE_STRING,TYPE_ARRAY]},{types:[TYPE_ANY]}]},ends_with:{_func:this._functionEndsWith,_signature:[{types:[TYPE_STRING]},{types:[TYPE_STRING]}]},floor:{_func:this._functionFloor,_signature:[{types:[TYPE_NUMBER]}]},length:{_func:this._functionLength,_signature:[{types:[TYPE_STRING,TYPE_ARRAY,TYPE_OBJECT]}]},map:{_func:this._functionMap,_signature:[{types:[TYPE_EXPREF]},{types:[TYPE_ARRAY]}]},max:{_func:this._functionMax,_signature:[{types:[TYPE_ARRAY_NUMBER,TYPE_ARRAY_STRING]}]},merge:{_func:this._functionMerge,_signature:[{types:[TYPE_OBJECT],variadic:!0}]},max_by:{_func:this._functionMaxBy,_signature:[{types:[TYPE_ARRAY]},{types:[TYPE_EXPREF]}]},sum:{_func:this._functionSum,_signature:[{types:[TYPE_ARRAY_NUMBER]}]},starts_with:{_func:this._functionStartsWith,_signature:[{types:[TYPE_STRING]},{types:[TYPE_STRING]}]},min:{_func:this._functionMin,_signature:[{types:[TYPE_ARRAY_NUMBER,TYPE_ARRAY_STRING]}]},min_by:{_func:this._functionMinBy,_signature:[{types:[TYPE_ARRAY]},{types:[TYPE_EXPREF]}]},type:{_func:this._functionType,_signature:[{types:[TYPE_ANY]}]},keys:{_func:this._functionKeys,_signature:[{types:[TYPE_OBJECT]}]},values:{_func:this._functionValues,_signature:[{types:[TYPE_OBJECT]}]},sort:{_func:this._functionSort,_signature:[{types:[TYPE_ARRAY_STRING,TYPE_ARRAY_NUMBER]}]},sort_by:{_func:this._functionSortBy,_signature:[{types:[TYPE_ARRAY]},{types:[TYPE_EXPREF]}]},join:{_func:this._functionJoin,_signature:[{types:[TYPE_STRING]},{types:[TYPE_ARRAY_STRING]}]},reverse:{_func:this._functionReverse,_signature:[{types:[TYPE_STRING,TYPE_ARRAY]}]},to_array:{_func:this._functionToArray,_signature:[{types:[TYPE_ANY]}]},to_string:{_func:this._functionToString,_signature:[{types:[TYPE_ANY]}]},to_number:{_func:this._functionToNumber,_signature:[{types:[TYPE_ANY]}]},not_null:{_func:this._functionNotNull,_signature:[{types:[TYPE_ANY],variadic:!0}]}}}bindingPower.EOF=0,bindingPower.UnquotedIdentifier=0,bindingPower.QuotedIdentifier=0,bindingPower.Rbracket=0,bindingPower.Rparen=0,bindingPower.Comma=0,bindingPower.Rbrace=0,bindingPower.Number=0,bindingPower.Current=0,bindingPower.Expref=0,bindingPower.Pipe=1,bindingPower.Or=2,bindingPower.And=3,bindingPower.EQ=5,bindingPower.GT=5,bindingPower.LT=5,bindingPower.GTE=5,bindingPower.LTE=5,bindingPower.NE=5,bindingPower.Flatten=9,bindingPower.Star=20,bindingPower.Filter=21,bindingPower.Dot=40,bindingPower.Not=45,bindingPower.Lbrace=50,bindingPower.Lbracket=55,bindingPower.Lparen=60,Parser.prototype={parse:function(expression){this._loadTokens(expression),this.index=0;var ast=this.expression(0);if("EOF"!==this._lookahead(0)){var t=this._lookaheadToken(0),error=new Error("Unexpected token type: "+t.type+", value: "+t.value);throw error.name="ParserError",error}return ast},_loadTokens:function(expression){var tokens=(new Lexer).tokenize(expression);tokens.push({type:"EOF",value:"",start:expression.length}),this.tokens=tokens},expression:function(rbp){var leftToken=this._lookaheadToken(0);this._advance();for(var left=this.nud(leftToken),currentToken=this._lookahead(0);rbp<bindingPower[currentToken];)this._advance(),left=this.led(currentToken,left),currentToken=this._lookahead(0);return left},_lookahead:function(number){return this.tokens[this.index+number].type},_lookaheadToken:function(number){return this.tokens[this.index+number]},_advance:function(){this.index++},nud:function(token){var right,expression;switch(token.type){case"Literal":return{type:"Literal",value:token.value};case"UnquotedIdentifier":return{type:"Field",name:token.value};case"QuotedIdentifier":var node={type:"Field",name:token.value};if("Lparen"===this._lookahead(0))throw new Error("Quoted identifier not allowed for function names.");return node;case"Not":return{type:"NotExpression",children:[right=this.expression(bindingPower.Not)]};case"Star":return right=null,{type:"ValueProjection",children:[{type:"Identity"},right="Rbracket"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(bindingPower.Star)]};case"Filter":return this.led(token.type,{type:"Identity"});case"Lbrace":return this._parseMultiselectHash();case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[{type:"Identity"}]},right=this._parseProjectionRHS(bindingPower.Flatten)]};case"Lbracket":return"Number"===this._lookahead(0)||"Colon"===this._lookahead(0)?(right=this._parseIndexExpression(),this._projectIfSlice({type:"Identity"},right)):"Star"===this._lookahead(0)&&"Rbracket"===this._lookahead(1)?(this._advance(),this._advance(),{type:"Projection",children:[{type:"Identity"},right=this._parseProjectionRHS(bindingPower.Star)]}):this._parseMultiselectList();case"Current":return{type:"Current"};case"Expref":return{type:"ExpressionReference",children:[expression=this.expression(bindingPower.Expref)]};case"Lparen":for(var args=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(expression={type:"Current"},this._advance()):expression=this.expression(0),args.push(expression);return this._match("Rparen"),args[0];default:this._errorToken(token)}},led:function(tokenName,left){var right;switch(tokenName){case"Dot":var rbp=bindingPower.Dot;return"Star"!==this._lookahead(0)?{type:"Subexpression",children:[left,right=this._parseDotRHS(rbp)]}:(this._advance(),{type:"ValueProjection",children:[left,right=this._parseProjectionRHS(rbp)]});case"Pipe":return{type:"Pipe",children:[left,right=this.expression(bindingPower.Pipe)]};case"Or":return{type:"OrExpression",children:[left,right=this.expression(bindingPower.Or)]};case"And":return{type:"AndExpression",children:[left,right=this.expression(bindingPower.And)]};case"Lparen":for(var expression,name=left.name,args=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(expression={type:"Current"},this._advance()):expression=this.expression(0),"Comma"===this._lookahead(0)&&this._match("Comma"),args.push(expression);return this._match("Rparen"),{type:"Function",name,children:args};case"Filter":var condition=this.expression(0);return this._match("Rbracket"),{type:"FilterProjection",children:[left,right="Flatten"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(bindingPower.Filter),condition]};case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[left]},this._parseProjectionRHS(bindingPower.Flatten)]};case"EQ":case"NE":case"GT":case"GTE":case"LT":case"LTE":return this._parseComparator(left,tokenName);case"Lbracket":var token=this._lookaheadToken(0);return"Number"===token.type||"Colon"===token.type?(right=this._parseIndexExpression(),this._projectIfSlice(left,right)):(this._match("Star"),this._match("Rbracket"),{type:"Projection",children:[left,right=this._parseProjectionRHS(bindingPower.Star)]});default:this._errorToken(this._lookaheadToken(0))}},_match:function(tokenType){if(this._lookahead(0)!==tokenType){var t=this._lookaheadToken(0),error=new Error("Expected "+tokenType+", got: "+t.type);throw error.name="ParserError",error}this._advance()},_errorToken:function(token){var error=new Error("Invalid token ("+token.type+'): "'+token.value+'"');throw error.name="ParserError",error},_parseIndexExpression:function(){if("Colon"===this._lookahead(0)||"Colon"===this._lookahead(1))return this._parseSliceExpression();var node={type:"Index",value:this._lookaheadToken(0).value};return this._advance(),this._match("Rbracket"),node},_projectIfSlice:function(left,right){var indexExpr={type:"IndexExpression",children:[left,right]};return"Slice"===right.type?{type:"Projection",children:[indexExpr,this._parseProjectionRHS(bindingPower.Star)]}:indexExpr},_parseSliceExpression:function(){for(var parts=[null,null,null],index=0,currentToken=this._lookahead(0);"Rbracket"!==currentToken&&index<3;){if("Colon"===currentToken)index++,this._advance();else{if("Number"!==currentToken){var t=this._lookahead(0),error=new Error("Syntax error, unexpected token: "+t.value+"("+t.type+")");throw error.name="Parsererror",error}parts[index]=this._lookaheadToken(0).value,this._advance()}currentToken=this._lookahead(0)}return this._match("Rbracket"),{type:"Slice",children:parts}},_parseComparator:function(left,comparator){return{type:"Comparator",name:comparator,children:[left,this.expression(bindingPower[comparator])]}},_parseDotRHS:function(rbp){var lookahead=this._lookahead(0);return["UnquotedIdentifier","QuotedIdentifier","Star"].indexOf(lookahead)>=0?this.expression(rbp):"Lbracket"===lookahead?(this._match("Lbracket"),this._parseMultiselectList()):"Lbrace"===lookahead?(this._match("Lbrace"),this._parseMultiselectHash()):void 0},_parseProjectionRHS:function(rbp){var right;if(bindingPower[this._lookahead(0)]<10)right={type:"Identity"};else if("Lbracket"===this._lookahead(0))right=this.expression(rbp);else if("Filter"===this._lookahead(0))right=this.expression(rbp);else{if("Dot"!==this._lookahead(0)){var t=this._lookaheadToken(0),error=new Error("Sytanx error, unexpected token: "+t.value+"("+t.type+")");throw error.name="ParserError",error}this._match("Dot"),right=this._parseDotRHS(rbp)}return right},_parseMultiselectList:function(){for(var expressions=[];"Rbracket"!==this._lookahead(0);){var expression=this.expression(0);if(expressions.push(expression),"Comma"===this._lookahead(0)&&(this._match("Comma"),"Rbracket"===this._lookahead(0)))throw new Error("Unexpected token Rbracket")}return this._match("Rbracket"),{type:"MultiSelectList",children:expressions}},_parseMultiselectHash:function(){for(var keyToken,keyName,node,pairs=[],identifierTypes=["UnquotedIdentifier","QuotedIdentifier"];;){if(keyToken=this._lookaheadToken(0),identifierTypes.indexOf(keyToken.type)<0)throw new Error("Expecting an identifier token, got: "+keyToken.type);if(keyName=keyToken.value,this._advance(),this._match("Colon"),node={type:"KeyValuePair",name:keyName,value:this.expression(0)},pairs.push(node),"Comma"===this._lookahead(0))this._match("Comma");else if("Rbrace"===this._lookahead(0)){this._match("Rbrace");break}}return{type:"MultiSelectHash",children:pairs}}},TreeInterpreter.prototype={search:function(node,value){return this.visit(node,value)},visit:function(node,value){var matched,current,result,first,second,field,left,collected,i;switch(node.type){case"Field":return null!==value&&isObject(value)?void 0===(field=value[node.name])?null:field:null;case"Subexpression":for(result=this.visit(node.children[0],value),i=1;i<node.children.length;i++)if(null===(result=this.visit(node.children[1],result)))return null;return result;case"IndexExpression":return left=this.visit(node.children[0],value),this.visit(node.children[1],left);case"Index":if(!isArray(value))return null;var index=node.value;return index<0&&(index=value.length+index),void 0===(result=value[index])&&(result=null),result;case"Slice":if(!isArray(value))return null;var sliceParams=node.children.slice(0),computed=this.computeSliceParams(value.length,sliceParams),start=computed[0],stop=computed[1],step=computed[2];if(result=[],step>0)for(i=start;i<stop;i+=step)result.push(value[i]);else for(i=start;i>stop;i+=step)result.push(value[i]);return result;case"Projection":var base=this.visit(node.children[0],value);if(!isArray(base))return null;for(collected=[],i=0;i<base.length;i++)null!==(current=this.visit(node.children[1],base[i]))&&collected.push(current);return collected;case"ValueProjection":if(!isObject(base=this.visit(node.children[0],value)))return null;collected=[];var values=function objValues(obj){for(var keys=Object.keys(obj),values=[],i=0;i<keys.length;i++)values.push(obj[keys[i]]);return values}(base);for(i=0;i<values.length;i++)null!==(current=this.visit(node.children[1],values[i]))&&collected.push(current);return collected;case"FilterProjection":if(!isArray(base=this.visit(node.children[0],value)))return null;var filtered=[],finalResults=[];for(i=0;i<base.length;i++)isFalse(matched=this.visit(node.children[2],base[i]))||filtered.push(base[i]);for(var j=0;j<filtered.length;j++)null!==(current=this.visit(node.children[1],filtered[j]))&&finalResults.push(current);return finalResults;case"Comparator":switch(first=this.visit(node.children[0],value),second=this.visit(node.children[1],value),node.name){case"EQ":result=strictDeepEqual(first,second);break;case"NE":result=!strictDeepEqual(first,second);break;case"GT":result=first>second;break;case"GTE":result=first>=second;break;case"LT":result=first<second;break;case"LTE":result=first<=second;break;default:throw new Error("Unknown comparator: "+node.name)}return result;case"Flatten":var original=this.visit(node.children[0],value);if(!isArray(original))return null;var merged=[];for(i=0;i<original.length;i++)isArray(current=original[i])?merged.push.apply(merged,current):merged.push(current);return merged;case"Identity":case"Current":return value;case"MultiSelectList":if(null===value)return null;for(collected=[],i=0;i<node.children.length;i++)collected.push(this.visit(node.children[i],value));return collected;case"MultiSelectHash":if(null===value)return null;var child;for(collected={},i=0;i<node.children.length;i++)collected[(child=node.children[i]).name]=this.visit(child.value,value);return collected;case"OrExpression":return isFalse(matched=this.visit(node.children[0],value))&&(matched=this.visit(node.children[1],value)),matched;case"AndExpression":return!0===isFalse(first=this.visit(node.children[0],value))?first:this.visit(node.children[1],value);case"NotExpression":return isFalse(first=this.visit(node.children[0],value));case"Literal":return node.value;case"Pipe":return left=this.visit(node.children[0],value),this.visit(node.children[1],left);case"Function":var resolvedArgs=[];for(i=0;i<node.children.length;i++)resolvedArgs.push(this.visit(node.children[i],value));return this.runtime.callFunction(node.name,resolvedArgs);case"ExpressionReference":var refNode=node.children[0];return refNode.jmespathType="Expref",refNode;default:throw new Error("Unknown node type: "+node.type)}},computeSliceParams:function(arrayLength,sliceParams){var start=sliceParams[0],stop=sliceParams[1],step=sliceParams[2],computed=[null,null,null];if(null===step)step=1;else if(0===step){var error=new Error("Invalid slice, step cannot be 0");throw error.name="RuntimeError",error}var stepValueNegative=step<0;return start=null===start?stepValueNegative?arrayLength-1:0:this.capSliceRange(arrayLength,start,step),stop=null===stop?stepValueNegative?-1:arrayLength:this.capSliceRange(arrayLength,stop,step),computed[0]=start,computed[1]=stop,computed[2]=step,computed},capSliceRange:function(arrayLength,actualValue,step){return actualValue<0?(actualValue+=arrayLength)<0&&(actualValue=step<0?-1:0):actualValue>=arrayLength&&(actualValue=step<0?arrayLength-1:arrayLength),actualValue}},Runtime.prototype={callFunction:function(name,resolvedArgs){var functionEntry=this.functionTable[name];if(void 0===functionEntry)throw new Error("Unknown function: "+name+"()");return this._validateArgs(name,resolvedArgs,functionEntry._signature),functionEntry._func.call(this,resolvedArgs)},_validateArgs:function(name,args,signature){var pluralized,currentSpec,actualType,typeMatched;if(signature[signature.length-1].variadic){if(args.length<signature.length)throw pluralized=1===signature.length?" argument":" arguments",new Error("ArgumentError: "+name+"() takes at least"+signature.length+pluralized+" but received "+args.length)}else if(args.length!==signature.length)throw pluralized=1===signature.length?" argument":" arguments",new Error("ArgumentError: "+name+"() takes "+signature.length+pluralized+" but received "+args.length);for(var i=0;i<signature.length;i++){typeMatched=!1,currentSpec=signature[i].types,actualType=this._getTypeName(args[i]);for(var j=0;j<currentSpec.length;j++)if(this._typeMatches(actualType,currentSpec[j],args[i])){typeMatched=!0;break}if(!typeMatched){var expected=currentSpec.map((function(typeIdentifier){return TYPE_NAME_TABLE[typeIdentifier]})).join(",");throw new Error("TypeError: "+name+"() expected argument "+(i+1)+" to be type "+expected+" but received type "+TYPE_NAME_TABLE[actualType]+" instead.")}}},_typeMatches:function(actual,expected,argValue){if(expected===TYPE_ANY)return!0;if(expected!==TYPE_ARRAY_STRING&&expected!==TYPE_ARRAY_NUMBER&&expected!==TYPE_ARRAY)return actual===expected;if(expected===TYPE_ARRAY)return actual===TYPE_ARRAY;if(actual===TYPE_ARRAY){var subtype;expected===TYPE_ARRAY_NUMBER?subtype=TYPE_NUMBER:expected===TYPE_ARRAY_STRING&&(subtype=TYPE_STRING);for(var i=0;i<argValue.length;i++)if(!this._typeMatches(this._getTypeName(argValue[i]),subtype,argValue[i]))return!1;return!0}},_getTypeName:function(obj){switch(Object.prototype.toString.call(obj)){case"[object String]":return TYPE_STRING;case"[object Number]":return TYPE_NUMBER;case"[object Array]":return TYPE_ARRAY;case"[object Boolean]":return 5;case"[object Null]":return 7;case"[object Object]":return"Expref"===obj.jmespathType?TYPE_EXPREF:TYPE_OBJECT}},_functionStartsWith:function(resolvedArgs){return 0===resolvedArgs[0].lastIndexOf(resolvedArgs[1])},_functionEndsWith:function(resolvedArgs){var searchStr=resolvedArgs[0],suffix=resolvedArgs[1];return-1!==searchStr.indexOf(suffix,searchStr.length-suffix.length)},_functionReverse:function(resolvedArgs){if(this._getTypeName(resolvedArgs[0])===TYPE_STRING){for(var originalStr=resolvedArgs[0],reversedStr="",i=originalStr.length-1;i>=0;i--)reversedStr+=originalStr[i];return reversedStr}var reversedArray=resolvedArgs[0].slice(0);return reversedArray.reverse(),reversedArray},_functionAbs:function(resolvedArgs){return Math.abs(resolvedArgs[0])},_functionCeil:function(resolvedArgs){return Math.ceil(resolvedArgs[0])},_functionAvg:function(resolvedArgs){for(var sum=0,inputArray=resolvedArgs[0],i=0;i<inputArray.length;i++)sum+=inputArray[i];return sum/inputArray.length},_functionContains:function(resolvedArgs){return resolvedArgs[0].indexOf(resolvedArgs[1])>=0},_functionFloor:function(resolvedArgs){return Math.floor(resolvedArgs[0])},_functionLength:function(resolvedArgs){return isObject(resolvedArgs[0])?Object.keys(resolvedArgs[0]).length:resolvedArgs[0].length},_functionMap:function(resolvedArgs){for(var mapped=[],interpreter=this._interpreter,exprefNode=resolvedArgs[0],elements=resolvedArgs[1],i=0;i<elements.length;i++)mapped.push(interpreter.visit(exprefNode,elements[i]));return mapped},_functionMerge:function(resolvedArgs){for(var merged={},i=0;i<resolvedArgs.length;i++){var current=resolvedArgs[i];for(var key in current)merged[key]=current[key]}return merged},_functionMax:function(resolvedArgs){if(resolvedArgs[0].length>0){if(this._getTypeName(resolvedArgs[0][0])===TYPE_NUMBER)return Math.max.apply(Math,resolvedArgs[0]);for(var elements=resolvedArgs[0],maxElement=elements[0],i=1;i<elements.length;i++)maxElement.localeCompare(elements[i])<0&&(maxElement=elements[i]);return maxElement}return null},_functionMin:function(resolvedArgs){if(resolvedArgs[0].length>0){if(this._getTypeName(resolvedArgs[0][0])===TYPE_NUMBER)return Math.min.apply(Math,resolvedArgs[0]);for(var elements=resolvedArgs[0],minElement=elements[0],i=1;i<elements.length;i++)elements[i].localeCompare(minElement)<0&&(minElement=elements[i]);return minElement}return null},_functionSum:function(resolvedArgs){for(var sum=0,listToSum=resolvedArgs[0],i=0;i<listToSum.length;i++)sum+=listToSum[i];return sum},_functionType:function(resolvedArgs){switch(this._getTypeName(resolvedArgs[0])){case TYPE_NUMBER:return"number";case TYPE_STRING:return"string";case TYPE_ARRAY:return"array";case TYPE_OBJECT:return"object";case 5:return"boolean";case TYPE_EXPREF:return"expref";case 7:return"null"}},_functionKeys:function(resolvedArgs){return Object.keys(resolvedArgs[0])},_functionValues:function(resolvedArgs){for(var obj=resolvedArgs[0],keys=Object.keys(obj),values=[],i=0;i<keys.length;i++)values.push(obj[keys[i]]);return values},_functionJoin:function(resolvedArgs){var joinChar=resolvedArgs[0];return resolvedArgs[1].join(joinChar)},_functionToArray:function(resolvedArgs){return this._getTypeName(resolvedArgs[0])===TYPE_ARRAY?resolvedArgs[0]:[resolvedArgs[0]]},_functionToString:function(resolvedArgs){return this._getTypeName(resolvedArgs[0])===TYPE_STRING?resolvedArgs[0]:JSON.stringify(resolvedArgs[0])},_functionToNumber:function(resolvedArgs){var convertedValue,typeName=this._getTypeName(resolvedArgs[0]);return typeName===TYPE_NUMBER?resolvedArgs[0]:typeName!==TYPE_STRING||(convertedValue=+resolvedArgs[0],isNaN(convertedValue))?null:convertedValue},_functionNotNull:function(resolvedArgs){for(var i=0;i<resolvedArgs.length;i++)if(7!==this._getTypeName(resolvedArgs[i]))return resolvedArgs[i];return null},_functionSort:function(resolvedArgs){var sortedArray=resolvedArgs[0].slice(0);return sortedArray.sort(),sortedArray},_functionSortBy:function(resolvedArgs){var sortedArray=resolvedArgs[0].slice(0);if(0===sortedArray.length)return sortedArray;var interpreter=this._interpreter,exprefNode=resolvedArgs[1],requiredType=this._getTypeName(interpreter.visit(exprefNode,sortedArray[0]));if([TYPE_NUMBER,TYPE_STRING].indexOf(requiredType)<0)throw new Error("TypeError");for(var that=this,decorated=[],i=0;i<sortedArray.length;i++)decorated.push([i,sortedArray[i]]);decorated.sort((function(a,b){var exprA=interpreter.visit(exprefNode,a[1]),exprB=interpreter.visit(exprefNode,b[1]);if(that._getTypeName(exprA)!==requiredType)throw new Error("TypeError: expected "+requiredType+", received "+that._getTypeName(exprA));if(that._getTypeName(exprB)!==requiredType)throw new Error("TypeError: expected "+requiredType+", received "+that._getTypeName(exprB));return exprA>exprB?1:exprA<exprB?-1:a[0]-b[0]}));for(var j=0;j<decorated.length;j++)sortedArray[j]=decorated[j][1];return sortedArray},_functionMaxBy:function(resolvedArgs){for(var maxRecord,current,exprefNode=resolvedArgs[1],resolvedArray=resolvedArgs[0],keyFunction=this.createKeyFunction(exprefNode,[TYPE_NUMBER,TYPE_STRING]),maxNumber=-1/0,i=0;i<resolvedArray.length;i++)(current=keyFunction(resolvedArray[i]))>maxNumber&&(maxNumber=current,maxRecord=resolvedArray[i]);return maxRecord},_functionMinBy:function(resolvedArgs){for(var minRecord,current,exprefNode=resolvedArgs[1],resolvedArray=resolvedArgs[0],keyFunction=this.createKeyFunction(exprefNode,[TYPE_NUMBER,TYPE_STRING]),minNumber=1/0,i=0;i<resolvedArray.length;i++)(current=keyFunction(resolvedArray[i]))<minNumber&&(minNumber=current,minRecord=resolvedArray[i]);return minRecord},createKeyFunction:function(exprefNode,allowedTypes){var that=this,interpreter=this._interpreter;return function(x){var current=interpreter.visit(exprefNode,x);if(allowedTypes.indexOf(that._getTypeName(current))<0){var msg="TypeError: expected one of "+allowedTypes+", received "+that._getTypeName(current);throw new Error(msg)}return current}}},exports.tokenize=function tokenize(stream){return(new Lexer).tokenize(stream)},exports.compile=function compile(stream){return(new Parser).parse(stream)},exports.search=function search(data,expression){var parser=new Parser,runtime=new Runtime,interpreter=new TreeInterpreter(runtime);runtime._interpreter=interpreter;var node=parser.parse(expression);return interpreter.search(node,data)},exports.strictDeepEqual=strictDeepEqual}(exports)},"./node_modules/aws-sdk/apis/metadata.json":module=>{"use strict";module.exports=JSON.parse('{"acm":{"name":"ACM","cors":true},"apigateway":{"name":"APIGateway","cors":true},"applicationautoscaling":{"prefix":"application-autoscaling","name":"ApplicationAutoScaling","cors":true},"appstream":{"name":"AppStream"},"autoscaling":{"name":"AutoScaling","cors":true},"batch":{"name":"Batch"},"budgets":{"name":"Budgets"},"clouddirectory":{"name":"CloudDirectory","versions":["2016-05-10*"]},"cloudformation":{"name":"CloudFormation","cors":true},"cloudfront":{"name":"CloudFront","versions":["2013-05-12*","2013-11-11*","2014-05-31*","2014-10-21*","2014-11-06*","2015-04-17*","2015-07-27*","2015-09-17*","2016-01-13*","2016-01-28*","2016-08-01*","2016-08-20*","2016-09-07*","2016-09-29*","2016-11-25*","2017-03-25*","2017-10-30*","2018-06-18*","2018-11-05*","2019-03-26*"],"cors":true},"cloudhsm":{"name":"CloudHSM","cors":true},"cloudsearch":{"name":"CloudSearch"},"cloudsearchdomain":{"name":"CloudSearchDomain"},"cloudtrail":{"name":"CloudTrail","cors":true},"cloudwatch":{"prefix":"monitoring","name":"CloudWatch","cors":true},"cloudwatchevents":{"prefix":"events","name":"CloudWatchEvents","versions":["2014-02-03*"],"cors":true},"cloudwatchlogs":{"prefix":"logs","name":"CloudWatchLogs","cors":true},"codebuild":{"name":"CodeBuild","cors":true},"codecommit":{"name":"CodeCommit","cors":true},"codedeploy":{"name":"CodeDeploy","cors":true},"codepipeline":{"name":"CodePipeline","cors":true},"cognitoidentity":{"prefix":"cognito-identity","name":"CognitoIdentity","cors":true},"cognitoidentityserviceprovider":{"prefix":"cognito-idp","name":"CognitoIdentityServiceProvider","cors":true},"cognitosync":{"prefix":"cognito-sync","name":"CognitoSync","cors":true},"configservice":{"prefix":"config","name":"ConfigService","cors":true},"cur":{"name":"CUR","cors":true},"datapipeline":{"name":"DataPipeline"},"devicefarm":{"name":"DeviceFarm","cors":true},"directconnect":{"name":"DirectConnect","cors":true},"directoryservice":{"prefix":"ds","name":"DirectoryService"},"discovery":{"name":"Discovery"},"dms":{"name":"DMS"},"dynamodb":{"name":"DynamoDB","cors":true},"dynamodbstreams":{"prefix":"streams.dynamodb","name":"DynamoDBStreams","cors":true},"ec2":{"name":"EC2","versions":["2013-06-15*","2013-10-15*","2014-02-01*","2014-05-01*","2014-06-15*","2014-09-01*","2014-10-01*","2015-03-01*","2015-04-15*","2015-10-01*","2016-04-01*","2016-09-15*"],"cors":true},"ecr":{"name":"ECR","cors":true},"ecs":{"name":"ECS","cors":true},"efs":{"prefix":"elasticfilesystem","name":"EFS","cors":true},"elasticache":{"name":"ElastiCache","versions":["2012-11-15*","2014-03-24*","2014-07-15*","2014-09-30*"],"cors":true},"elasticbeanstalk":{"name":"ElasticBeanstalk","cors":true},"elb":{"prefix":"elasticloadbalancing","name":"ELB","cors":true},"elbv2":{"prefix":"elasticloadbalancingv2","name":"ELBv2","cors":true},"emr":{"prefix":"elasticmapreduce","name":"EMR","cors":true},"es":{"name":"ES"},"elastictranscoder":{"name":"ElasticTranscoder","cors":true},"firehose":{"name":"Firehose","cors":true},"gamelift":{"name":"GameLift","cors":true},"glacier":{"name":"Glacier"},"health":{"name":"Health"},"iam":{"name":"IAM","cors":true},"importexport":{"name":"ImportExport"},"inspector":{"name":"Inspector","versions":["2015-08-18*"],"cors":true},"iot":{"name":"Iot","cors":true},"iotdata":{"prefix":"iot-data","name":"IotData","cors":true},"kinesis":{"name":"Kinesis","cors":true},"kinesisanalytics":{"name":"KinesisAnalytics"},"kms":{"name":"KMS","cors":true},"lambda":{"name":"Lambda","cors":true},"lexruntime":{"prefix":"runtime.lex","name":"LexRuntime","cors":true},"lightsail":{"name":"Lightsail"},"machinelearning":{"name":"MachineLearning","cors":true},"marketplacecommerceanalytics":{"name":"MarketplaceCommerceAnalytics","cors":true},"marketplacemetering":{"prefix":"meteringmarketplace","name":"MarketplaceMetering"},"mturk":{"prefix":"mturk-requester","name":"MTurk","cors":true},"mobileanalytics":{"name":"MobileAnalytics","cors":true},"opsworks":{"name":"OpsWorks","cors":true},"opsworkscm":{"name":"OpsWorksCM"},"organizations":{"name":"Organizations"},"pinpoint":{"name":"Pinpoint"},"polly":{"name":"Polly","cors":true},"rds":{"name":"RDS","versions":["2014-09-01*"],"cors":true},"redshift":{"name":"Redshift","cors":true},"rekognition":{"name":"Rekognition","cors":true},"resourcegroupstaggingapi":{"name":"ResourceGroupsTaggingAPI"},"route53":{"name":"Route53","cors":true},"route53domains":{"name":"Route53Domains","cors":true},"s3":{"name":"S3","dualstackAvailable":true,"cors":true},"s3control":{"name":"S3Control","dualstackAvailable":true,"xmlNoDefaultLists":true},"servicecatalog":{"name":"ServiceCatalog","cors":true},"ses":{"prefix":"email","name":"SES","cors":true},"shield":{"name":"Shield"},"simpledb":{"prefix":"sdb","name":"SimpleDB"},"sms":{"name":"SMS"},"snowball":{"name":"Snowball"},"sns":{"name":"SNS","cors":true},"sqs":{"name":"SQS","cors":true},"ssm":{"name":"SSM","cors":true},"storagegateway":{"name":"StorageGateway","cors":true},"stepfunctions":{"prefix":"states","name":"StepFunctions"},"sts":{"name":"STS","cors":true},"support":{"name":"Support"},"swf":{"name":"SWF"},"xray":{"name":"XRay","cors":true},"waf":{"name":"WAF","cors":true},"wafregional":{"prefix":"waf-regional","name":"WAFRegional"},"workdocs":{"name":"WorkDocs","cors":true},"workspaces":{"name":"WorkSpaces"},"codestar":{"name":"CodeStar"},"lexmodelbuildingservice":{"prefix":"lex-models","name":"LexModelBuildingService","cors":true},"marketplaceentitlementservice":{"prefix":"entitlement.marketplace","name":"MarketplaceEntitlementService"},"athena":{"name":"Athena","cors":true},"greengrass":{"name":"Greengrass"},"dax":{"name":"DAX"},"migrationhub":{"prefix":"AWSMigrationHub","name":"MigrationHub"},"cloudhsmv2":{"name":"CloudHSMV2","cors":true},"glue":{"name":"Glue"},"mobile":{"name":"Mobile"},"pricing":{"name":"Pricing","cors":true},"costexplorer":{"prefix":"ce","name":"CostExplorer","cors":true},"mediaconvert":{"name":"MediaConvert"},"medialive":{"name":"MediaLive"},"mediapackage":{"name":"MediaPackage"},"mediastore":{"name":"MediaStore"},"mediastoredata":{"prefix":"mediastore-data","name":"MediaStoreData","cors":true},"appsync":{"name":"AppSync"},"guardduty":{"name":"GuardDuty"},"mq":{"name":"MQ"},"comprehend":{"name":"Comprehend","cors":true},"iotjobsdataplane":{"prefix":"iot-jobs-data","name":"IoTJobsDataPlane"},"kinesisvideoarchivedmedia":{"prefix":"kinesis-video-archived-media","name":"KinesisVideoArchivedMedia","cors":true},"kinesisvideomedia":{"prefix":"kinesis-video-media","name":"KinesisVideoMedia","cors":true},"kinesisvideo":{"name":"KinesisVideo","cors":true},"sagemakerruntime":{"prefix":"runtime.sagemaker","name":"SageMakerRuntime"},"sagemaker":{"name":"SageMaker"},"translate":{"name":"Translate","cors":true},"resourcegroups":{"prefix":"resource-groups","name":"ResourceGroups","cors":true},"alexaforbusiness":{"name":"AlexaForBusiness"},"cloud9":{"name":"Cloud9"},"serverlessapplicationrepository":{"prefix":"serverlessrepo","name":"ServerlessApplicationRepository"},"servicediscovery":{"name":"ServiceDiscovery"},"workmail":{"name":"WorkMail"},"autoscalingplans":{"prefix":"autoscaling-plans","name":"AutoScalingPlans"},"transcribeservice":{"prefix":"transcribe","name":"TranscribeService"},"connect":{"name":"Connect","cors":true},"acmpca":{"prefix":"acm-pca","name":"ACMPCA"},"fms":{"name":"FMS"},"secretsmanager":{"name":"SecretsManager","cors":true},"iotanalytics":{"name":"IoTAnalytics","cors":true},"iot1clickdevicesservice":{"prefix":"iot1click-devices","name":"IoT1ClickDevicesService"},"iot1clickprojects":{"prefix":"iot1click-projects","name":"IoT1ClickProjects"},"pi":{"name":"PI"},"neptune":{"name":"Neptune"},"mediatailor":{"name":"MediaTailor"},"eks":{"name":"EKS"},"macie":{"name":"Macie"},"dlm":{"name":"DLM"},"signer":{"name":"Signer"},"chime":{"name":"Chime"},"pinpointemail":{"prefix":"pinpoint-email","name":"PinpointEmail"},"ram":{"name":"RAM"},"route53resolver":{"name":"Route53Resolver"},"pinpointsmsvoice":{"prefix":"sms-voice","name":"PinpointSMSVoice"},"quicksight":{"name":"QuickSight"},"rdsdataservice":{"prefix":"rds-data","name":"RDSDataService"},"amplify":{"name":"Amplify"},"datasync":{"name":"DataSync"},"robomaker":{"name":"RoboMaker"},"transfer":{"name":"Transfer"},"globalaccelerator":{"name":"GlobalAccelerator"},"comprehendmedical":{"name":"ComprehendMedical","cors":true},"kinesisanalyticsv2":{"name":"KinesisAnalyticsV2"},"mediaconnect":{"name":"MediaConnect"},"fsx":{"name":"FSx"},"securityhub":{"name":"SecurityHub"},"appmesh":{"name":"AppMesh","versions":["2018-10-01*"]},"licensemanager":{"prefix":"license-manager","name":"LicenseManager"},"kafka":{"name":"Kafka"},"apigatewaymanagementapi":{"name":"ApiGatewayManagementApi"},"apigatewayv2":{"name":"ApiGatewayV2"},"docdb":{"name":"DocDB"},"backup":{"name":"Backup"},"worklink":{"name":"WorkLink"},"textract":{"name":"Textract"},"managedblockchain":{"name":"ManagedBlockchain"},"mediapackagevod":{"prefix":"mediapackage-vod","name":"MediaPackageVod"},"groundstation":{"name":"GroundStation"},"iotthingsgraph":{"name":"IoTThingsGraph"},"iotevents":{"name":"IoTEvents"},"ioteventsdata":{"prefix":"iotevents-data","name":"IoTEventsData"},"personalize":{"name":"Personalize","cors":true},"personalizeevents":{"prefix":"personalize-events","name":"PersonalizeEvents","cors":true},"personalizeruntime":{"prefix":"personalize-runtime","name":"PersonalizeRuntime","cors":true},"applicationinsights":{"prefix":"application-insights","name":"ApplicationInsights"},"servicequotas":{"prefix":"service-quotas","name":"ServiceQuotas"},"ec2instanceconnect":{"prefix":"ec2-instance-connect","name":"EC2InstanceConnect"},"eventbridge":{"name":"EventBridge"},"lakeformation":{"name":"LakeFormation"},"forecastservice":{"prefix":"forecast","name":"ForecastService","cors":true},"forecastqueryservice":{"prefix":"forecastquery","name":"ForecastQueryService","cors":true},"qldb":{"name":"QLDB"},"qldbsession":{"prefix":"qldb-session","name":"QLDBSession"},"workmailmessageflow":{"name":"WorkMailMessageFlow"},"codestarnotifications":{"prefix":"codestar-notifications","name":"CodeStarNotifications"},"savingsplans":{"name":"SavingsPlans"},"sso":{"name":"SSO"},"ssooidc":{"prefix":"sso-oidc","name":"SSOOIDC"},"marketplacecatalog":{"prefix":"marketplace-catalog","name":"MarketplaceCatalog"},"dataexchange":{"name":"DataExchange"},"sesv2":{"name":"SESV2"},"migrationhubconfig":{"prefix":"migrationhub-config","name":"MigrationHubConfig"},"connectparticipant":{"name":"ConnectParticipant"},"appconfig":{"name":"AppConfig"},"iotsecuretunneling":{"name":"IoTSecureTunneling"},"wafv2":{"name":"WAFV2"},"elasticinference":{"prefix":"elastic-inference","name":"ElasticInference"},"imagebuilder":{"name":"Imagebuilder"},"schemas":{"name":"Schemas"},"accessanalyzer":{"name":"AccessAnalyzer"},"codegurureviewer":{"prefix":"codeguru-reviewer","name":"CodeGuruReviewer"},"codeguruprofiler":{"name":"CodeGuruProfiler"},"computeoptimizer":{"prefix":"compute-optimizer","name":"ComputeOptimizer"},"frauddetector":{"name":"FraudDetector"},"kendra":{"name":"Kendra"},"networkmanager":{"name":"NetworkManager"},"outposts":{"name":"Outposts"},"augmentedairuntime":{"prefix":"sagemaker-a2i-runtime","name":"AugmentedAIRuntime"},"ebs":{"name":"EBS"},"kinesisvideosignalingchannels":{"prefix":"kinesis-video-signaling","name":"KinesisVideoSignalingChannels","cors":true},"detective":{"name":"Detective"},"codestarconnections":{"prefix":"codestar-connections","name":"CodeStarconnections"},"synthetics":{"name":"Synthetics"},"iotsitewise":{"name":"IoTSiteWise"},"macie2":{"name":"Macie2"},"codeartifact":{"name":"CodeArtifact"},"honeycode":{"name":"Honeycode"},"ivs":{"name":"IVS"},"braket":{"name":"Braket"},"identitystore":{"name":"IdentityStore"},"appflow":{"name":"Appflow"},"redshiftdata":{"prefix":"redshift-data","name":"RedshiftData"},"ssoadmin":{"prefix":"sso-admin","name":"SSOAdmin"},"timestreamquery":{"prefix":"timestream-query","name":"TimestreamQuery"},"timestreamwrite":{"prefix":"timestream-write","name":"TimestreamWrite"},"s3outposts":{"name":"S3Outposts"},"databrew":{"name":"DataBrew"},"servicecatalogappregistry":{"prefix":"servicecatalog-appregistry","name":"ServiceCatalogAppRegistry"},"networkfirewall":{"prefix":"network-firewall","name":"NetworkFirewall"},"mwaa":{"name":"MWAA"},"amplifybackend":{"name":"AmplifyBackend"},"appintegrations":{"name":"AppIntegrations"},"connectcontactlens":{"prefix":"connect-contact-lens","name":"ConnectContactLens"},"devopsguru":{"prefix":"devops-guru","name":"DevOpsGuru"},"ecrpublic":{"prefix":"ecr-public","name":"ECRPUBLIC"},"lookoutvision":{"name":"LookoutVision"},"sagemakerfeaturestoreruntime":{"prefix":"sagemaker-featurestore-runtime","name":"SageMakerFeatureStoreRuntime"},"customerprofiles":{"prefix":"customer-profiles","name":"CustomerProfiles"},"auditmanager":{"name":"AuditManager"},"emrcontainers":{"prefix":"emr-containers","name":"EMRcontainers"},"healthlake":{"name":"HealthLake"},"sagemakeredge":{"prefix":"sagemaker-edge","name":"SagemakerEdge"},"amp":{"name":"Amp"},"greengrassv2":{"name":"GreengrassV2"},"iotdeviceadvisor":{"name":"IotDeviceAdvisor"},"iotfleethub":{"name":"IoTFleetHub"},"iotwireless":{"name":"IoTWireless"},"location":{"name":"Location","cors":true},"wellarchitected":{"name":"WellArchitected"},"lexmodelsv2":{"prefix":"models.lex.v2","name":"LexModelsV2"},"lexruntimev2":{"prefix":"runtime.lex.v2","name":"LexRuntimeV2","cors":true},"fis":{"name":"Fis"},"lookoutmetrics":{"name":"LookoutMetrics"},"mgn":{"name":"Mgn"},"lookoutequipment":{"name":"LookoutEquipment"},"nimble":{"name":"Nimble"},"finspace":{"name":"Finspace"},"finspacedata":{"prefix":"finspace-data","name":"Finspacedata"},"ssmcontacts":{"prefix":"ssm-contacts","name":"SSMContacts"},"ssmincidents":{"prefix":"ssm-incidents","name":"SSMIncidents"},"applicationcostprofiler":{"name":"ApplicationCostProfiler"},"apprunner":{"name":"AppRunner"},"proton":{"name":"Proton"},"route53recoverycluster":{"prefix":"route53-recovery-cluster","name":"Route53RecoveryCluster"},"route53recoverycontrolconfig":{"prefix":"route53-recovery-control-config","name":"Route53RecoveryControlConfig"},"route53recoveryreadiness":{"prefix":"route53-recovery-readiness","name":"Route53RecoveryReadiness"},"chimesdkidentity":{"prefix":"chime-sdk-identity","name":"ChimeSDKIdentity"},"chimesdkmessaging":{"prefix":"chime-sdk-messaging","name":"ChimeSDKMessaging"},"snowdevicemanagement":{"prefix":"snow-device-management","name":"SnowDeviceManagement"},"memorydb":{"name":"MemoryDB"},"opensearch":{"name":"OpenSearch"},"kafkaconnect":{"name":"KafkaConnect"},"voiceid":{"prefix":"voice-id","name":"VoiceID"},"wisdom":{"name":"Wisdom"},"account":{"name":"Account"},"cloudcontrol":{"name":"CloudControl"},"grafana":{"name":"Grafana"},"panorama":{"name":"Panorama"},"chimesdkmeetings":{"prefix":"chime-sdk-meetings","name":"ChimeSDKMeetings"},"resiliencehub":{"name":"Resiliencehub"},"migrationhubstrategy":{"name":"MigrationHubStrategy"},"appconfigdata":{"name":"AppConfigData"},"drs":{"name":"Drs"},"migrationhubrefactorspaces":{"prefix":"migration-hub-refactor-spaces","name":"MigrationHubRefactorSpaces"},"evidently":{"name":"Evidently"},"inspector2":{"name":"Inspector2"},"rbin":{"name":"Rbin"},"rum":{"name":"RUM"},"backupgateway":{"prefix":"backup-gateway","name":"BackupGateway"},"iottwinmaker":{"name":"IoTTwinMaker"},"workspacesweb":{"prefix":"workspaces-web","name":"WorkSpacesWeb"},"amplifyuibuilder":{"name":"AmplifyUIBuilder"},"keyspaces":{"name":"Keyspaces"},"billingconductor":{"name":"Billingconductor"},"gamesparks":{"name":"GameSparks"},"pinpointsmsvoicev2":{"prefix":"pinpoint-sms-voice-v2","name":"PinpointSMSVoiceV2"},"ivschat":{"name":"Ivschat"},"chimesdkmediapipelines":{"prefix":"chime-sdk-media-pipelines","name":"ChimeSDKMediaPipelines"},"emrserverless":{"prefix":"emr-serverless","name":"EMRServerless"},"m2":{"name":"M2"},"connectcampaigns":{"name":"ConnectCampaigns"},"redshiftserverless":{"prefix":"redshift-serverless","name":"RedshiftServerless"},"rolesanywhere":{"name":"RolesAnywhere"},"licensemanagerusersubscriptions":{"prefix":"license-manager-user-subscriptions","name":"LicenseManagerUserSubscriptions"},"backupstorage":{"name":"BackupStorage"},"privatenetworks":{"name":"PrivateNetworks"},"supportapp":{"prefix":"support-app","name":"SupportApp"},"controltower":{"name":"ControlTower"},"iotfleetwise":{"name":"IoTFleetWise"},"migrationhuborchestrator":{"name":"MigrationHubOrchestrator"},"connectcases":{"name":"ConnectCases"}}')},"./node_modules/aws-sdk/lib/region_config_data.json":module=>{"use strict";module.exports=JSON.parse('{"rules":{"*/*":{"endpoint":"{service}.{region}.amazonaws.com"},"cn-*/*":{"endpoint":"{service}.{region}.amazonaws.com.cn"},"us-iso-*/*":"usIso","us-isob-*/*":"usIsob","*/budgets":"globalSSL","*/cloudfront":"globalSSL","*/sts":"globalSSL","*/importexport":{"endpoint":"{service}.amazonaws.com","signatureVersion":"v2","globalEndpoint":true},"*/route53":"globalSSL","cn-*/route53":{"endpoint":"{service}.amazonaws.com.cn","globalEndpoint":true,"signingRegion":"cn-northwest-1"},"us-gov-*/route53":"globalGovCloud","us-iso-*/route53":{"endpoint":"{service}.c2s.ic.gov","globalEndpoint":true,"signingRegion":"us-iso-east-1"},"us-isob-*/route53":{"endpoint":"{service}.sc2s.sgov.gov","globalEndpoint":true,"signingRegion":"us-isob-east-1"},"*/waf":"globalSSL","*/iam":"globalSSL","cn-*/iam":{"endpoint":"{service}.cn-north-1.amazonaws.com.cn","globalEndpoint":true,"signingRegion":"cn-north-1"},"us-gov-*/iam":"globalGovCloud","us-gov-*/sts":{"endpoint":"{service}.{region}.amazonaws.com"},"us-gov-west-1/s3":"s3signature","us-west-1/s3":"s3signature","us-west-2/s3":"s3signature","eu-west-1/s3":"s3signature","ap-southeast-1/s3":"s3signature","ap-southeast-2/s3":"s3signature","ap-northeast-1/s3":"s3signature","sa-east-1/s3":"s3signature","us-east-1/s3":{"endpoint":"{service}.amazonaws.com","signatureVersion":"s3"},"us-east-1/sdb":{"endpoint":"{service}.amazonaws.com","signatureVersion":"v2"},"*/sdb":{"endpoint":"{service}.{region}.amazonaws.com","signatureVersion":"v2"}},"fipsRules":{"*/*":"fipsStandard","us-gov-*/*":"fipsStandard","us-iso-*/*":{"endpoint":"{service}-fips.{region}.c2s.ic.gov"},"us-iso-*/dms":"usIso","us-isob-*/*":{"endpoint":"{service}-fips.{region}.sc2s.sgov.gov"},"us-isob-*/dms":"usIsob","cn-*/*":{"endpoint":"{service}-fips.{region}.amazonaws.com.cn"},"*/api.ecr":"fips.api.ecr","*/api.sagemaker":"fips.api.sagemaker","*/batch":"fipsDotPrefix","*/eks":"fipsDotPrefix","*/models.lex":"fips.models.lex","*/runtime.lex":"fips.runtime.lex","*/runtime.sagemaker":{"endpoint":"runtime-fips.sagemaker.{region}.amazonaws.com"},"*/iam":"fipsWithoutRegion","*/route53":"fipsWithoutRegion","*/transcribe":"fipsDotPrefix","*/waf":"fipsWithoutRegion","us-gov-*/transcribe":"fipsDotPrefix","us-gov-*/api.ecr":"fips.api.ecr","us-gov-*/api.sagemaker":"fips.api.sagemaker","us-gov-*/models.lex":"fips.models.lex","us-gov-*/runtime.lex":"fips.runtime.lex","us-gov-*/acm-pca":"fipsWithServiceOnly","us-gov-*/batch":"fipsWithServiceOnly","us-gov-*/config":"fipsWithServiceOnly","us-gov-*/eks":"fipsWithServiceOnly","us-gov-*/elasticmapreduce":"fipsWithServiceOnly","us-gov-*/identitystore":"fipsWithServiceOnly","us-gov-*/dynamodb":"fipsWithServiceOnly","us-gov-*/elasticloadbalancing":"fipsWithServiceOnly","us-gov-*/guardduty":"fipsWithServiceOnly","us-gov-*/monitoring":"fipsWithServiceOnly","us-gov-*/resource-groups":"fipsWithServiceOnly","us-gov-*/runtime.sagemaker":"fipsWithServiceOnly","us-gov-*/servicecatalog-appregistry":"fipsWithServiceOnly","us-gov-*/servicequotas":"fipsWithServiceOnly","us-gov-*/ssm":"fipsWithServiceOnly","us-gov-*/sts":"fipsWithServiceOnly","us-gov-*/support":"fipsWithServiceOnly","us-gov-west-1/states":"fipsWithServiceOnly","us-iso-east-1/elasticfilesystem":{"endpoint":"elasticfilesystem-fips.{region}.c2s.ic.gov"},"us-gov-west-1/organizations":"fipsWithServiceOnly","us-gov-west-1/route53":{"endpoint":"route53.us-gov.amazonaws.com"}},"dualstackRules":{"*/*":{"endpoint":"{service}.{region}.api.aws"},"cn-*/*":{"endpoint":"{service}.{region}.api.amazonwebservices.com.cn"},"*/s3":"dualstackLegacy","cn-*/s3":"dualstackLegacyCn","*/s3-control":"dualstackLegacy","cn-*/s3-control":"dualstackLegacyCn","ap-south-1/ec2":"dualstackLegacyEc2","eu-west-1/ec2":"dualstackLegacyEc2","sa-east-1/ec2":"dualstackLegacyEc2","us-east-1/ec2":"dualstackLegacyEc2","us-east-2/ec2":"dualstackLegacyEc2","us-west-2/ec2":"dualstackLegacyEc2"},"dualstackFipsRules":{"*/*":{"endpoint":"{service}-fips.{region}.api.aws"},"cn-*/*":{"endpoint":"{service}-fips.{region}.api.amazonwebservices.com.cn"},"*/s3":"dualstackFipsLegacy","cn-*/s3":"dualstackFipsLegacyCn","*/s3-control":"dualstackFipsLegacy","cn-*/s3-control":"dualstackFipsLegacyCn"},"patterns":{"globalSSL":{"endpoint":"https://{service}.amazonaws.com","globalEndpoint":true,"signingRegion":"us-east-1"},"globalGovCloud":{"endpoint":"{service}.us-gov.amazonaws.com","globalEndpoint":true,"signingRegion":"us-gov-west-1"},"s3signature":{"endpoint":"{service}.{region}.amazonaws.com","signatureVersion":"s3"},"usIso":{"endpoint":"{service}.{region}.c2s.ic.gov"},"usIsob":{"endpoint":"{service}.{region}.sc2s.sgov.gov"},"fipsStandard":{"endpoint":"{service}-fips.{region}.amazonaws.com"},"fipsDotPrefix":{"endpoint":"fips.{service}.{region}.amazonaws.com"},"fipsWithoutRegion":{"endpoint":"{service}-fips.amazonaws.com"},"fips.api.ecr":{"endpoint":"ecr-fips.{region}.amazonaws.com"},"fips.api.sagemaker":{"endpoint":"api-fips.sagemaker.{region}.amazonaws.com"},"fips.models.lex":{"endpoint":"models-fips.lex.{region}.amazonaws.com"},"fips.runtime.lex":{"endpoint":"runtime-fips.lex.{region}.amazonaws.com"},"fipsWithServiceOnly":{"endpoint":"{service}.{region}.amazonaws.com"},"dualstackLegacy":{"endpoint":"{service}.dualstack.{region}.amazonaws.com"},"dualstackLegacyCn":{"endpoint":"{service}.dualstack.{region}.amazonaws.com.cn"},"dualstackFipsLegacy":{"endpoint":"{service}-fips.dualstack.{region}.amazonaws.com"},"dualstackFipsLegacyCn":{"endpoint":"{service}-fips.dualstack.{region}.amazonaws.com.cn"},"dualstackLegacyEc2":{"endpoint":"api.ec2.{region}.aws"}}}')}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,