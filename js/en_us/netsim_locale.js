
(window.locales = window.locales || {}).netsim_locale = {
  a_and_b: function(d) { return "A/B"; },
  addPacket: function(d) { return "Add Packet"; },
  addRoom: function(d) { return "Add Room"; },
  addRouter: function(d) { return "Add Router"; },
  addRouterToLobbyError: function(d) { return "Could not create a new router. Please try again."; },
  appendCountToTitle: function(d) { return d.title + " (" + d.count + ")"; },
  alertPartnerDisconnected: function(d) { return "Your partner disconnected"; },
  alertConnectionRefused: function(d) { return "The partner you were trying to connect to has connected to someone else"; },
  alertConnectionReset: function(d) { return "The simulation was restarted.  Returning to the lobby..."; },
  ascii: function(d) { return "ASCII"; },
  autoDnsUsageMessage: function(d) { return "Automatic DNS Node\nUsage: GET hostname [hostname [hostname ...]]"; },
  binary: function(d) { return "Binary"; },
  bitCounter: function(d) { return d.x + "/" + d.y + " bits"; },
  bits: function(d) { return "Bits"; },
  buttonAccept: function(d) { return "Accept"; },
  buttonCancel: function(d) { return "Cancel"; },
  buttonFull: function(d) { return "Full"; },
  buttonJoin: function(d) { return "Join"; },
  clear: function(d) { return "Clear"; },
  collapse: function(d) { return "Collapse"; },
  connect: function(d) { return "Connect"; },
  connected: function(d) { return "Connected"; },
  connectedToNodeName: function(d) { return "Connected to " + d.nodeName; },
  connectingToNodeName: function(d) { return "Connecting to " + d.nodeName; },
  connectToANode: function(d) { return "Connect to a Node"; },
  connectToAPeer: function(d) { return "Connect to a Peer"; },
  connectToARoom: function(d) { return "Connect to a Room"; },
  connectToARouter: function(d) { return "Connect to a Router"; },
  continueButton: function(d) { return "Finished! " + d.caret; },
  createMyClientNodeError: function(d) { return "Could not connect to the simulation at this time. Please try again."; },
  decimal: function(d) { return "Decimal"; },
  defaultNodeName: function(d) { return "[New Node]"; },
  disconnectButton: function(d) { return d.caret + " Disconnect"; },
  disconnected: function(d) { return "Disconnected"; },
  dns: function(d) { return "DNS"; },
  dnsMode: function(d) { return "DNS Mode"; },
  dnsMode_AUTOMATIC: function(d) { return "Automatic"; },
  dnsMode_MANUAL: function(d) { return "Manual"; },
  dnsMode_NONE: function(d) { return "None"; },
  dropdownPickOne: function(d) { return "-- PICK ONE --"; },
  encoding: function(d) { return "Encoding"; },
  expand: function(d) { return "Expand"; },
  from: function(d) { return "From"; },
  hex: function(d) { return "Hex"; },
  hexadecimal: function(d) { return "Hexadecimal"; },
  incomingConnectionRequests: function(d) { return "Incoming connection requests"; },
  infinity: function(d) { return "Infinity"; },
  instructions: function(d) { return "Instructions"; },
  joinSection: function(d) { return "Join Section"; },
  lobby: function(d) { return "Lobby"; },
  lobbyForShard: function(d) { return "Lobby for " + d.shard; },
  lobbyInstructionsForPeers: function(d) { return "Find your partner in the list to the right and click the 'Join' button next to their name to create an outgoing connection request."; },
  lobbyInstructionsForRooms: function(d) { return "Click the 'Join' button next to any room to be added to the room.  Create a new room to join by clicking the 'Add Room' button."; },
  lobbyInstructionsForRouters: function(d) { return "Click the 'Join' button next to any router to be added to the router. Create a new router to join by clicking the 'Add Router' button."; },
  lobbyInstructionsGeneral: function(d) { return "Connect with a router or a peer to begin using the simulator."; },
  lobbyIsEmpty: function(d) { return "Nobody's here yet."; },
  lobbyStatusWaitingForOther: function(d) { return "Waiting for " + d.otherName + " to connect... (" + d.otherStatus + ")"; },
  lobbyStatusWaitingForYou: function(d) { return "Waiting for you..."; },
  logBrowserButton: function(d) { return "Log Browser"; },
  logBrowserHeader: function(d) { return "All Router Logs"; },
  logBrowserHeader_all: function(d) { return "All Router Logs"; },
  logBrowserHeader_mine: function(d) { return "My Router Logs"; },
  logBrowserHeader_sentByAnyone: function(d) { return "sent by anyone"; },
  logBrowserHeader_sentByName: function(d) { return "sent by " + d.name; },
  logBrowserHeader_showAllTraffic: function(d) { return "show all traffic"; },
  logBrowserHeader_showMyTraffic: function(d) { return "show my traffic"; },
  logBrowserHeader_showTrafficFromMe: function(d) { return "show traffic from me"; },
  logBrowserHeader_showTrafficToMe: function(d) { return "show traffic to me"; },
  logBrowserHeader_teacherView: function(d) { return "Teacher View"; },
  logBrowserHeader_toggleAll: function(d) { return "show all routers"; },
  logBrowserHeader_toggleMine: function(d) { return "show my router"; },
  logBrowserHeader_trafficFromAddress: function(d) { return " - Traffic From " + d.address; },
  logBrowserHeader_trafficToAddress: function(d) { return " - Traffic To " + d.address; },
  logBrowserHeader_trafficToAndFromAddress: function(d) { return " - Traffic To and From " + d.address; },
  logStatus_dropped: function(d) { return "Dropped"; },
  logStatus_success: function(d) { return "Success"; },
  loggedByNode: function(d) { return "Logged By"; },
  markAsRead: function(d) { return "Mark as read"; },
  message: function(d) { return "Message"; },
  myDevice: function(d) { return "My Device"; },
  myName: function(d) { return "My Name"; },
  myPrivateNetwork: function(d) { return "My Private Network"; },
  mySection: function(d) { return "My Section"; },
  number: function(d) { return "Number"; },
  numBitsPerPacket: function(d) { return d.numBits + " bits per packet"; },
  numBitsPerChunk: function(d) { return d.numBits + " bits per chunk"; },
  notConnected: function(d) { return "In lobby"; },
  onBeforeUnloadWarning: function(d) { return "You will be disconnected from the simulation."; },
  outgoingConnectionRequests: function(d) { return "Outgoing connection requests"; },
  _of_: function(d) { return " of "; },
  packet: function(d) { return "Packet"; },
  packetInfo: function(d) { return "Packet Info"; },
  pickASection: function(d) { return "Pick a Section"; },
  readWire: function(d) { return "Read Wire"; },
  receiveBits: function(d) { return "Receive Bits"; },
  receivedMessageLog: function(d) { return "Received Message Log"; },
  removePacket: function(d) { return "Remove Packet"; },
  roomStatus: function(d) { return d.connectedClients + ". Room for " + d.remainingSpace + " more."; },
  roomStatusFull: function(d) { return d.connectedClients + "."; },
  roomStatusNoConnections: function(d) { return "Up to " + d.maximumClients + " people may join."; },
  roomNumberX: function(d) { return "Room " + d.x; },
  router: function(d) { return "Router"; },
  routerLimitReachedError: function(d) { return "Router limit reached."; },
  routerStatus: function(d) { return "Connected to " + d.connectedClients + ".  Room for " + d.remainingSpace + " more."; },
  routerStatusFull: function(d) { return "Connected to " + d.connectedClients + ". No more room."; },
  routerStatusNoConnections: function(d) { return "Nobody connected yet.  Connect up to " + d.maximumClients + " people."; },
  routerTab_bandwidth: function(d) { return "Bandwidth"; },
  routerTab_memory: function(d) { return "Memory"; },
  routerTab_stats: function(d) { return "Stats"; },
  routerTab_logs: function(d) { return "Logs"; },
  routerNumberX: function(d) { return "Router " + d.x; },
  send: function(d) { return "Send"; },
  sendAMessage: function(d) { return "Send a Message"; },
  sendBits: function(d) { return "Send Bits"; },
  sendMessageError: function(d) { return "Message could not be sent. Please try again."; },
  sentBitsLog: function(d) { return "Sent Bits Log"; },
  sentMessageLog: function(d) { return "Sent Message Log"; },
  setName: function(d) { return "Set Name"; },
  setWire: function(d) { return "Set Wire"; },
  setWireToValue: function(d) { return "Set Wire to " + d.value; },
  shardResetButton: function(d) { return "Reset Simulation"; },
  shardResetConfirmation: function(d) { return "This will kick everyone out and reset all data for the class. Are you sure?"; },
  shardResetError: function(d) { return "You do not have permission to perform that action."; },
  shareThisNetwork: function(d) { return "Share this network"; },
  showingFirstXLogEntries: function(d) { return "Showing first " + d.x + " log entries.  Sort/filter to see more."; },
  size: function(d) { return "Size"; },
  status: function(d) { return "Status"; },
  teacherLogButton: function(d) { return "Teacher View"; },
  time: function(d) { return "Time"; },
  to: function(d) { return "To"; },
  unknownNode: function(d) { return "Unknown Node"; },
  unlimited: function(d) { return "Unlimited"; },
  waitingForNodeToConnect: function(d) { return "Waiting for " + d.node + " to connect..."; },
  workspaceHeader: function(d) { return "Internet Simulator"; },
  xOfYPackets: function(d) { return d.x + " of " + d.y; },
  xSecondPerPulse: function(d) { return d.x + " second per pulse"; },
  xSecondsPerPulse: function(d) { return d.x + " seconds per pulse"; },
  x_Gbps: function(d) { return d.x + "Gbps"; },
  x_Mbps: function(d) { return d.x + "Mbps"; },
  x_Kbps: function(d) { return d.x + "Kbps"; },
  x_bps: function(d) { return d.x + "bps"; },
  x_GBytes: function(d) { return d.x + "GB"; },
  x_MBytes: function(d) { return d.x + "MB"; },
  x_KBytes: function(d) { return d.x + "KB"; },
  x_Bytes: function(d) { return d.x + "B"; },
  x_bits: function(d) { return d.x + "b"; }
};