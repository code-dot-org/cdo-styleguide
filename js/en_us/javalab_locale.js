var en_us = function(n, ord
) {
  var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n,
      n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
  if (ord) return (n10 == 1 && n100 != 11) ? 'one'
      : (n10 == 2 && n100 != 12) ? 'two'
      : (n10 == 3 && n100 != 13) ? 'few'
      : 'other';
  return (n == 1 && v0) ? 'one' : 'other';
};
var plural = function (value, offset, lcfunc, data, isOrdinal) {
  if ({}.hasOwnProperty.call(data, value)) return data[value];
  if (offset) value -= offset;
  var key = lcfunc(value, isOrdinal);
  return key in data ? data[key] : data.other;
};

(window.locales = window.locales || {}).javalab_locale = {
  abortedTestResult: function(d) { return d.className + " > " + d.methodName + " ABORTED"; },
  addAComment: function(d) { return "Add a comment"; },
  addACommentToReview: function(d) { return "Add a comment to the review"; },
  authorizerNearLimit: function(d) { return "You have run your code too many times in the last " + d.lockoutPeriod + ". You have " + d.attemptsLeft + " attempts left before your account will be permanently locked and you will be unable to run Java code. Please wait 15 minutes before trying again."; },
  authorizerNearLimitTemporary: function(d) { return "You have run your code too many times in the last " + d.lockoutPeriod + ". You have " + d.attemptsLeft + " attempts left. Become a verified teacher to access a much higher quota for yourself and your students.\nLearn more about [how to become a verified teacher](https://support.code.org/hc/en-us/articles/115001550131-How-to-Become-a-Verified-Teacher).\nLearn [why teacher verification is needed](https://support.code.org/hc/en-us/articles/6104078305549-Teacher-Verification-and-CSA).\n"; },
  authorizerTokenUsed: function(d) { return "You are attempting to reuse a token that has already run your code. Please check that you are on a secure network before trying again. If you believe this message is in error, contact support@code.org."; },
  authorLabel: function(d) { return "author"; },
  allFilesCompile: function(d) { return "All Files Compile!"; },
  backpackFileNameConflictWarning: function(d) { return "Saving will overwrite an existing file in your backpack"; },
  backpackLabel: function(d) { return "Backpack"; },
  backpackListLoadError: function(d) { return "An error occurred loading your backpack. Try again."; },
  backpackListLoadErrorMessageCommitDialog: function(d) { return "Try closing and reopening this dialog."; },
  backpackErrorTitle: function(d) { return "An error occurred"; },
  backpackSaveErrorMessage: function(d) { return "Please try again"; },
  cancel: function(d) { return "Cancel"; },
  clearConsole: function(d) { return "Clear Console"; },
  classroomBlocked: function(d) { return "Your section has run their code too many times and has been locked. Ask your teacher to contact support@code.org to unlock your section."; },
  classNotFound: function(d) { return "Error: one or more of your Java files are missing a class definition."; },
  closeReview: function(d) { return "Close review"; },
  codeEditingDisabled: function(d) { return "Code editing is disabled while your project is in review"; },
  codeReviewForStudent: function(d) { return "Code Review for " + d.student; },
  codeReviewDisabledMessage: function(d) { return "Code review is disabled. Your teacher must place you in a code review group to enable this feature."; },
  codeReviewForYou: function(d) { return "Your Code Review"; },
  codeReviewingPeer: function(d) { return "Code Reviewing " + d.peerName; },
  commentProfanityFound: function(d) { return "Your comment contains inappropriate language, so it will not be saved. Please update your comment to remove the " + plural(d.wordCount, 0, en_us, { one: "word", other: "words" }) + " \"" + d.words + "\"."; },
  commentUpdateError: function(d) { return "There was an error processing your request, please try again."; },
  commit: function(d) { return "Commit"; },
  commitAndSave: function(d) { return "Commit & Save"; },
  commitCode: function(d) { return "Commit Code"; },
  commitNotes: function(d) { return "Commit Notes"; },
  commitNotesPlaceholder: function(d) { return "Enter notes about this commit here..."; },
  compilationSuccess: function(d) { return "Compilation successful."; },
  compiled: function(d) { return "Compiled!"; },
  compileFailed: function(d) { return "Compile Failed."; },
  compilerError: function(d) { return "We couldn't compile your program. Look for bugs in your program and try again."; },
  compiling: function(d) { return "Compiling..."; },
  compilingProgram: function(d) { return "'Compiling program..."; },
  connecting: function(d) { return "Connecting..."; },
  console: function(d) { return "Console"; },
  create: function(d) { return "Create"; },
  created: function(d) { return "Created"; },
  createNewFile: function(d) { return "Create new file"; },
  "delete": function(d) { return "Delete"; },
  deleteFileConfirmation: function(d) { return "Are you sure you want to delete " + d.filename + "?"; },
  duplicateProjectFilenameError: function(d) { return "Filename " + d.filename + " is already in use in this project. Please choose a different name"; },
  duplicateSupportFilenameError: function(d) { return "Filename " + d.filename + " is already in use in this level's support code. Please choose a different name"; },
  disabledPeerReviewMessage: function(d) { return "Enable peer review to allow other students in your group to leave comments on your project."; },
  displayThemeDarkMode: function(d) { return "dark mode"; },
  displayThemeLightMode: function(d) { return "light mode"; },
  editor: function(d) { return "Editor"; },
  editingDisabledUnderReview: function(d) { return "Editing is disabled while your project is under review."; },
  emptyBackpackMessage: function(d) { return "Files saved to your backpack will appear here."; },
  enablePeerReview: function(d) { return "Enable Peer Review"; },
  errorJavabuilderConnectionGeneral: function(d) { return "We hit an error connecting to our server. Try again."; },
  errorLoadingClassmates: function(d) { return "There was an error loading the list of your classmates. Please try again."; },
  errorMediaImageLoadError: function(d) { return "There was an error loading the image."; },
  errorNeighborhoodInvalidGrid: function(d) { return "There was an error loading the neighborhood level. Please contact us at support@code.org, and be sure to include the URL to this page in your message."; },
  errorNeighborhoodInvalidDirection: function(d) { return "The direction provided is not a recognized. Supported directions are \"north\", \"south\", \"east\", and \"west\"."; },
  errorNeighborhoodGetSquareFailed: function(d) { return "The square specified isn't on the grid."; },
  errorNeighborhoodInvalidColor: function(d) { return "The provided color name is not recognized. Refer to the documentation to see what color names are supprted."; },
  errorNeighborhoodInvalidLocation: function(d) { return "The location specified isn't on the grid."; },
  errorNeighborhoodInvalidMove: function(d) { return "Painter tried to move off the grid or into an obstacle."; },
  errorNeighborhoodInvalidPaintLocation: function(d) { return "Painter tried to paint off the grid or over an obstacle."; },
  errorNoJavaFiles: function(d) { return "The files you have provided do not include any .java files, or are all empty."; },
  errorPeerReviewDisabled: function(d) { return "Peer Review has been disabled on this project."; },
  errorProjectNotEditedYet: function(d) { return "This project has not been edited yet. The code will need to be edited before it can run."; },
  errorSoundInvalidAudioFileFormat: function(d) { return "The sound file provided is in an unsupported format. Only WAV is supported at this time."; },
  errorSoundMissingAudioData: function(d) { return "The sound file provided did not have any audio data."; },
  errorTheaterDuplicatePlayCommand: function(d) { return "The play() method can only be called once per execution of the program."; },
  errorTheaterInvalidShape: function(d) { return "A shape needs to contain an even number of values to represent (x,y) coordinates, and must include at least 4 values."; },
  errorTheaterVideoTooLarge: function(d) { return "Your video is too large. Please decrease the number of frames in your video and try again."; },
  errorTheaterVideoTooLong: function(d) { return "Your video exceeded the maximum playback time. Please decrease the length of your video and try again."; },
  exceptionMessage: function(d) { return "[EXCEPTION] " + d.message; },
  exceptionThrown: function(d) { return "[EXCEPTION] " + d.exceptionName + " was thrown"; },
  failedTestResult: function(d) { return d.className + " > " + d.methodName + " FAILED"; },
  feedbackBeginning: function(d) { return "This is the beginning of feedback for your project."; },
  feedbackBeginningPeer: function(d) { return "This is the beginning of feedback for " + d.peerName + "'s project."; },
  illegalMethodAccess: function(d) { return "You tried to access a method that is blocked by our security policy.\n" + d.cause; },
  fileDeleteConfirm: function(d) { return "Are you sure you want to delete the following files from your backpack? This action can't be undone."; },
  fileDeleteError: function(d) { return "We encountered an error deleting one or more of your files. Please try again. Files unable to be deleted:"; },
  fileImportError: function(d) { return "One or more file names are reserved by Java Lab and cannot be imported into this project. Files unable to be imported:"; },
  fileImportServerError: function(d) { return "We encountered an error importing one or more of your files. Please try again. Files unable to be imported:"; },
  fileImportWarning: function(d) { return "You have one or more duplicate file names between this project and your selected backpack files. Duplicate file names are:"; },
  fileImportWarningConfirm: function(d) { return "Do you want to replace these files with the files from your backpack?"; },
  fileLoadError: function(d) { return "There was an error loading the file " + d.filename + "."; },
  fileNotFoundException: function(d) { return "Your code threw a FileNotFoundException while running for file name: " + d.causeMessage; },
  genericError: function(d) { return "Error"; },
  genericSaveErrorTitle: function(d) { return "Save error"; },
  genericErrorMessage: function(d) { return "Please try again"; },
  import: function(d) { return "Import"; },
  includeFiles: function(d) { return "Include Files"; },
  insertCode: function(d) { return "Insert code"; },
  inStartSourcesMode: function(d) { return "You are editing start sources."; },
  internalCompilerException: function(d) { return "Oops. We hit an error on our side while compiling your program. Try running it again. If this error continues, contact us at support@code.org. Be sure to include the connection ID " + d.connectionId + " in your message."; },
  internalException: function(d) { return "Oops. We hit an error on our side. Try running your program again. If this error continues, contact us at support@code.org. Be sure to include the connection ID " + d.connectionId + " in your message."; },
  internalRuntimeException: function(d) { return "Oops. We hit an error on our side while running your program. Try running it again. If this error continues, contact us at support@code.org. Be sure to include the connection ID " + d.connectionId + " in your message."; },
  invalidJavaFilename: function(d) { return "Invalid file name. Java file names cannot have spaces."; },
  invalidJavaFilenameFormat: function(d) { return "Invalid file name. A Java file name must be in the format 'ClassName.java'."; },
  invalidMainMethod: function(d) { return "There was an error in your main method. Make sure your main method is public, static, has a void return type, and has only one argument (String[] args)."; },
  generatingProgress: function(d) { return d.progressTime + " seconds generated..."; },
  javaExtensionMissing: function(d) { return "Invalid file name. File names must end in '.java'."; },
  javabuilderInvalidClassError: function(d) { return d.causeMessage + " is not supported by Java Lab."; },
  javabuilderJavaFilenameError: function(d) { return "Java file: " + d.causeMessage + " has an invalid file name. Java file names cannot contain spaces or special characters."; },
  javabuilderMissingFilenameError: function(d) { return "One or more of your project files are missing file names."; },
  makeStarter: function(d) { return "Make starter file"; },
  makeSupport: function(d) { return "Make support file"; },
  makeValidation: function(d) { return "Make validation file"; },
  markComplete: function(d) { return "Mark Complete"; },
  markIncomplete: function(d) { return "Mark Incomplete"; },
  missingFilenameError: function(d) { return "File name cannot be blank."; },
  moveLeft: function(d) { return "Move left"; },
  moveRight: function(d) { return "Move right"; },
  newFile: function(d) { return "New File"; },
  noCodeReviewComments: function(d) { return "Comments from your teacher will appear here."; },
  noCodeReviewUntilStudentEditsCode: function(d) { return "You cannot leave comments until the project owner has modified the default code and clicked the \"Run\" button"; },
  noFeedbackGiven: function(d) { return "No feedback was given."; },
  noMainMethod: function(d) { return "Error: your program does not contain a main method."; },
  noOtherReviews: function(d) { return "No other projects are ready for review yet."; },
  noteWorthy: function(d) { return "Note:"; },
  noTestsFound: function(d) { return "No tests found."; },
  onlyVisibleToYou: function(d) { return "teacher comments are only visible to you"; },
  openedDate: function(d) { return "opened " + d.date; },
  programCompleted: function(d) { return "Program completed."; },
  programEndedUnexpectedly: function(d) { return "Your program stopped unexpectedly. We may be out of capacity to run your program, or you may be having network issues. Please check your network connection and try again."; },
  programStopped: function(d) { return "Program stopped."; },
  refresh: function(d) { return "Refresh"; },
  rename: function(d) { return "Rename"; },
  renameFile: function(d) { return "Rename the file"; },
  replace: function(d) { return "Replace"; },
  reviewClassmateProject: function(d) { return "Review a classmate’s project..."; },
  returnToMyProject: function(d) { return "Return to my project"; },
  running: function(d) { return "Running..."; },
  runningProjectTests: function(d) { return "Running your project's tests..."; },
  runningValidation: function(d) { return "Running level tests..."; },
  runtimeError: function(d) { return "Your code hit an exception while it was running.\n" + d.cause; },
  saveToBackpack: function(d) { return "Save to Backpack"; },
  saving: function(d) { return "Saving..."; },
  sendingVideo: function(d) { return "Sending video. Total length: " + d.totalTime + " seconds."; },
  startingPainter: function(d) { return "Starting painter."; },
  startReview: function(d) { return "Start Review"; },
  startSourcesTemplateWarning: function(d) { return "WARNING: You are editing start sources for a level with a template. Start sources should be defined on the template."; },
  submit: function(d) { return "Submit"; },
  successfulTestResult: function(d) { return d.className + " > " + d.methodName + " SUCCEEDED"; },
  switchToDisplayTheme: function(d) { return "Switch to " + d.displayTheme; },
  testsNotPassing: function(d) { return "You need to pass all tests before you can finish the level."; },
  textSize: function(d) { return "Text size"; },
  timeoutWarning: function(d) { return "Warning: your project will stop running in 15 seconds."; },
  timeout: function(d) { return "Your project has stopped."; },
  twoMainMethods: function(d) { return "Error: Your code can only have one main method. We found at least two classes with main methods."; },
  teacherLabel: function(d) { return "teacher"; },
  togglePeerReviewError: function(d) { return "Error enabling/disabling peer review, please try again."; },
  unauthorizedJavabuilderConnectionNotLoggedIn: function(d) { return "You need to be logged in to run your code in Java Lab. Log in and try again."; },
  unauthorizedJavabuilderConnectionTeacher: function(d) { return "To run your code in Java Lab, you need to become \"verified\" or join a CSA section owned by a verified teacher. Please see [this article](https://support.code.org/hc/en-us/articles/115001550131) for details on how to become verified."; },
  unauthorizedJavabuilderConnectionStudent: function(d) { return "To run your code in Java Lab, you need to be assigned to a CSA section and your teacher needs to be \"verified.\" Ask your teacher for help and try again. Your teacher can find more details in [this article.](https://support.code.org/hc/en-us/articles/115001550131)"; },
  unknownError: function(d) { return "Oops. We hit an error on our side. Try running your program again. If this error continues, contact us at support@code.org. Be sure to include the connection ID " + d.connectionId + " in your message.\n" + d.type; },
  unsupportedMiniAppMessage: function(d) { return "Level type mismatch: " + d.miniAppType + " projects are not supported on a non-" + d.miniAppType + " level."; },
  userBlocked: function(d) { return "You have run your code too many times and your account has been locked. Contact support@code.org to unlock your account."; },
  verificationDialogMessage: function(d) { return "Java usage is limited for new users. Verified teachers have access to a much higher quota for themselves and their students without any additional checks. You can learn why verification is needed on [this blog page.](" + d.blogUrl + ")"; },
  verificationHeaderMessage: function(d) { return "Please confirm you're human"; },
  verificationRequiredMessage: function(d) { return "Verification required: please confirm you're human."; },
  verificationSuccessful: function(d) { return "Verification successful!"; },
  verificationIncomplete: function(d) { return "Verification was not completed. Please run your program to try again."; },
  userBlockedTemporary: function(d) { return "You have reached the limit of the number of times you can run Java code in 24 hours. Become a verified teacher to access a much higher quota for yourself and your students.\nLearn more about [how to become a verified teacher](https://support.code.org/hc/en-us/articles/115001550131-How-to-Become-a-Verified-Teacher).\nLearn [why teacher verification is needed](https://support.code.org/hc/en-us/articles/6104078305549-Teacher-Verification-and-CSA).\nIf you believe this message is in error, contact support@code.org."; },
  waitingForServer: function(d) { return "Waiting for a response..."; },
  youHaveProjectsToReview: function(d) { return "You have projects to review..."; },
  yourPeer: function(d) { return "your peer"; }
};