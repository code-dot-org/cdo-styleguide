var en_us = function(n, ord
) {
  var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n,
      n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
  if (ord) return (n10 == 1 && n100 != 11) ? 'one'
      : (n10 == 2 && n100 != 12) ? 'two'
      : (n10 == 3 && n100 != 13) ? 'few'
      : 'other';
  return (n == 1 && v0) ? 'one' : 'other';
};
var number = function (value, name, offset) {
  if (!offset) return value;
  if (isNaN(value)) throw new Error("Can't apply offset:" + offset + ' to argument `' + name + '` with non-numerical value ' + JSON.stringify(value) + '.');
  return value - offset;
};
var plural = function (value, offset, lcfunc, data, isOrdinal) {
  if ({}.hasOwnProperty.call(data, value)) return data[value];
  if (offset) value -= offset;
  var key = lcfunc(value, isOrdinal);
  return key in data ? data[key] : data.other;
};

(window.locales = window.locales || {}).craft_locale = {
  absolute: function(d) { return "absolute"; },
  agentGenericFailureMessage: function(d) { return "Keep coding! Remember to use The Agent to help."; },
  agentTooFewBlocksFailureMessage: function(d) { return "Try adding just one block at a time to get The Agent to the right spot."; },
  at: function(d) { return "at"; },
  agentDiamondPathCongrats: function(d) { return "Congratulations, you found the diamond path! You have collected " + plural(d.count, 0, en_us, { one: "1 diamond", other: number(d.count, "count") + " diamonds" }) + " so far!"; },
  blockActionAdd: function(d) { return "add"; },
  blockActionAttack: function(d) { return "attack"; },
  blockActionClone: function(d) { return "clone blocks"; },
  blockActionCloneFiltered: function(d) { return "clone only"; },
  blockActionCollect: function(d) { return "collect"; },
  blockActionCollectAll: function(d) { return "collect all"; },
  blockActionDestroyEntity: function(d) { return "disappear"; },
  blockActionDetect: function(d) { return "detect"; },
  blockActionDetectRedstone: function(d) { return "detect redstone"; },
  blockActionDrop: function(d) { return "drop"; },
  blockActionDropAll: function(d) { return "drop all"; },
  blockActionExecute: function(d) { return "execute command"; },
  blockActionExplodeEntity: function(d) { return "explode"; },
  blockActionFill: function(d) { return "fill from"; },
  blockActionFlashEntity: function(d) { return "flash"; },
  blockActionGetItemCount: function(d) { return "get item count"; },
  blockActionGetItemCountInSlotNumber: function(d) { return "get item count in slot number"; },
  blockActionGetItemDetail: function(d) { return "get item detail"; },
  blockActionGetItemDetailInSlotNumber: function(d) { return "get item detail in slot number"; },
  blockActionGetItemSpace: function(d) { return "get item space"; },
  blockActionGetItemSpaceInSlotNumber: function(d) { return "get item space in slot number"; },
  blockActionGive: function(d) { return "give"; },
  blockActionInspect: function(d) { return "inspect"; },
  blockActionInspectData: function(d) { return "inspect data"; },
  blockActionKill: function(d) { return "kill target"; },
  blockActionMove: function(d) { return "move"; },
  blockActionMoveAway: function(d) { return "move away from"; },
  blockActionMoveForward: function(d) { return "move forward"; },
  blockActionMoveRandom: function(d) { return "move random"; },
  blockActionMoveTo: function(d) { return "move to"; },
  blockActionMoveToward: function(d) { return "move a step toward"; },
  blockActionPlaySound: function(d) { return "play sound"; },
  blockActionRepeat: function(d) { return "repeat"; },
  blockActionRepeatRandom: function(d) { return "repeat random"; },
  blockActionSetBlock: function(d) { return "set block to"; },
  blockActionSpawn: function(d) { return "spawn"; },
  blockActionSummon: function(d) { return "summon"; },
  blockActionTeleport: function(d) { return "teleport target"; },
  blockActionTeleportToPlayer: function(d) { return "teleport to player"; },
  blockActionTestForBlock: function(d) { return "tests whether a block type"; },
  blockActionTestForBlocks: function(d) { return "tests whether the pattern between"; },
  blockActionToScore: function(d) { return "to score"; },
  blockActionTransfer: function(d) { return "transfer"; },
  blockActionWait: function(d) { return "wait"; },
  blockActionWith: function(d) { return "with"; },
  blockData: function(d) { return "block data"; },
  blockDestroyBlock: function(d) { return "destroy block"; },
  blockIf: function(d) { return "if"; },
  blockIfLavaAhead: function(d) { return "if lava ahead"; },
  blockIs: function(d) { return "is"; },
  blockMove: function(d) { return "move"; },
  blockMoveBackward: function(d) { return "move backward"; },
  blockMoveForward: function(d) { return "move forward"; },
  blockPlace: function(d) { return "place"; },
  blockPlaceTorch: function(d) { return "place torch"; },
  blockPlaceXAheadAhead: function(d) { return "ahead"; },
  blockPlaceXAheadPlace: function(d) { return "place"; },
  blockPlaceXPlace: function(d) { return "place"; },
  blockPlantCrop: function(d) { return "plant crop"; },
  blockShear: function(d) { return "shear"; },
  blockTill: function(d) { return "till"; },
  blockTillSoil: function(d) { return "till soil"; },
  blockTurn: function(d) { return "turn"; },
  blockTurnLeft: function(d) { return "turn left"; },
  blockTurnRight: function(d) { return "turn right"; },
  blockType: function(d) { return "block type"; },
  blockTypeBedrock: function(d) { return "bedrock"; },
  blockTypeBricks: function(d) { return "bricks"; },
  blockTypeClay: function(d) { return "clay"; },
  blockTypeClayHardened: function(d) { return "hardened clay"; },
  blockTypeCobblestone: function(d) { return "cobblestone"; },
  blockTypeDirt: function(d) { return "dirt"; },
  blockTypeDirtCoarse: function(d) { return "coarse dirt"; },
  blockTypeDoorIron: function(d) { return "iron door"; },
  blockTypeEmpty: function(d) { return "empty"; },
  blockTypeFarmlandWet: function(d) { return "farmland"; },
  blockTypeGlass: function(d) { return "glass"; },
  blockTypeGlowstone: function(d) { return "glowstone"; },
  blockTypeGrass: function(d) { return "grass"; },
  blockTypeGravel: function(d) { return "gravel"; },
  blockTypeIce: function(d) { return "ice"; },
  blockTypeLava: function(d) { return "lava"; },
  blockTypeLogAcacia: function(d) { return "acacia log"; },
  blockTypeLogBirch: function(d) { return "birch log"; },
  blockTypeLogJungle: function(d) { return "jungle log"; },
  blockTypeLogOak: function(d) { return "oak log"; },
  blockTypeLogSpruce: function(d) { return "spruce log"; },
  blockTypeNetherBrick: function(d) { return "nether brick"; },
  blockTypeNetherrack: function(d) { return "netherrack"; },
  blockTypeOreCoal: function(d) { return "coal ore"; },
  blockTypeOreDiamond: function(d) { return "diamond ore"; },
  blockTypeOreEmerald: function(d) { return "emerald ore"; },
  blockTypeOreGold: function(d) { return "gold ore"; },
  blockTypeOreIron: function(d) { return "iron ore"; },
  blockTypeOreLapis: function(d) { return "lapis ore"; },
  blockTypeOreRedstone: function(d) { return "redstone ore"; },
  blockTypePlanksAcacia: function(d) { return "acacia planks"; },
  blockTypePlanksBirch: function(d) { return "birch planks"; },
  blockTypePlanksJungle: function(d) { return "jungle planks"; },
  blockTypePlanksOak: function(d) { return "oak planks"; },
  blockTypePlanksSpruce: function(d) { return "spruce planks"; },
  blockTypePressurePlateUp: function(d) { return "pressure plate"; },
  blockTypeRail: function(d) { return "rail"; },
  blockTypeRailsRedstoneTorch: function(d) { return "redstone torch"; },
  blockTypeRedstoneWire: function(d) { return "redstone wire"; },
  blockTypeSand: function(d) { return "sand"; },
  blockTypeSandstone: function(d) { return "sandstone"; },
  blockTypeSnow: function(d) { return "snow"; },
  blockTypeStone: function(d) { return "stone"; },
  blockTypeTnt: function(d) { return "tnt"; },
  blockTypeTree: function(d) { return "tree"; },
  blockTypeWater: function(d) { return "water"; },
  blockTypeWool: function(d) { return "wool"; },
  blockTypeWoolBlue: function(d) { return "blue wool"; },
  blockTypeWoolMagenta: function(d) { return "magenta wool"; },
  blockTypeWoolOrange: function(d) { return "orange wool"; },
  blockTypeWoolPink: function(d) { return "pink wool"; },
  blockTypeWoolRed: function(d) { return "red wool"; },
  blockTypeWoolYellow: function(d) { return "yellow wool"; },
  blockWhileXAheadAhead: function(d) { return "ahead"; },
  blockWhileXAheadDo: function(d) { return "do"; },
  blockWhileXAheadWhile: function(d) { return "while"; },
  cancel: function(d) { return "Cancel"; },
  cloneMode: function(d) { return "clone mode"; },
  cloneModeForce: function(d) { return "force"; },
  cloneModeMove: function(d) { return "move"; },
  cloneModeNormal: function(d) { return "normal"; },
  connectToCodeConnection: function(d) { return "To run this project in Minecraft: Education Edition, please use the Code Connection application."; },
  destination: function(d) { return "destination"; },
  directionBack: function(d) { return "back"; },
  directionDown: function(d) { return "down"; },
  directionForward: function(d) { return "forward"; },
  directionLeft: function(d) { return "left"; },
  directionMiddle: function(d) { return "middle"; },
  directionRight: function(d) { return "right"; },
  directionUp: function(d) { return "up"; },
  downloadButton: function(d) { return "Download"; },
  entityType: function(d) { return "entity type"; },
  entityTypeChicken: function(d) { return "chicken"; },
  entityTypeCow: function(d) { return "cow"; },
  entityTypeCreeper: function(d) { return "creeper"; },
  entityTypeIronGolem: function(d) { return "iron golem"; },
  entityTypePlayer: function(d) { return "player"; },
  entityTypeSheep: function(d) { return "sheep"; },
  entityTypeZombie: function(d) { return "zombie"; },
  eventTypeWhenAttacked: function(d) { return "when attacked"; },
  eventTypeWhenDay: function(d) { return "when day"; },
  eventTypeWhenNight: function(d) { return "when night"; },
  eventTypeWhenRun: function(d) { return "when run"; },
  eventTypeWhenSpawned: function(d) { return "when spawned"; },
  eventTypeWhenTouched: function(d) { return "when touched"; },
  eventTypeWhenUsed: function(d) { return "when used"; },
  forever: function(d) { return "forever"; },
  from: function(d) { return "from"; },
  generatedCodeDescription: function(d) { return "By dragging and placing blocks in this puzzle, you've created a set of instructions in a computer language called Javascript. This code tells computers what to display on the screen. Everything you see and do in Minecraft also starts with lines of computer code like these."; },
  getdataof: function(d) { return "get data of"; },
  getnameof: function(d) { return "get name of"; },
  houseSelectChooseFloorPlan: function(d) { return "Choose the floor plan for your house."; },
  houseSelectEasy: function(d) { return "Easy"; },
  houseSelectHard: function(d) { return "Hard"; },
  houseSelectLetsBuild: function(d) { return "Let's build a house."; },
  houseSelectMedium: function(d) { return "Medium"; },
  import: function(d) { return "Import"; },
  importShareLinkBody: function(d) { return "Type your Hour of Code share link here and click \"Import\" to copy your code into Minecraft"; },
  importShareLinkHeader: function(d) { return "Import a share link"; },
  inSlotNumber: function(d) { return "in slot number"; },
  itemTypeBlock: function(d) { return "block"; },
  itemTypeDecoration: function(d) { return "decoration"; },
  itemTypeMiscellaneous: function(d) { return "miscellaneous"; },
  itemTypeTool: function(d) { return "tool"; },
  items: function(d) { return "item(s)"; },
  itemsOfBlockType: function(d) { return "item(s) of block type"; },
  level10FailureMessage: function(d) { return "Cover up the lava to walk across, then mine two of the iron blocks on the other side."; },
  level11FailureMessage: function(d) { return "Make sure to place cobblestone ahead if there is lava ahead. This will let you safely mine this row of resources."; },
  level12FailureMessage: function(d) { return "Be sure to mine 3 redstone blocks. This combines what you learned from building your house and using \"if\" statements to avoid falling in lava."; },
  level13FailureMessage: function(d) { return "Place \"rail\" along the dirt path leading from your door to the edge of the map."; },
  level1FailureMessage: function(d) { return "You need to use commands to walk to the sheep."; },
  level1TooFewBlocksMessage: function(d) { return "Try using more commands to walk to the sheep."; },
  level2FailureMessage: function(d) { return "To chop down a tree, walk to its trunk and use the \"destroy block\" command."; },
  level2TooFewBlocksMessage: function(d) { return "Try using more commands to chop down the tree. Walk to its trunk and use the \"destroy block\" command."; },
  level3FailureMessage: function(d) { return "To gather wool from both sheep, walk to each one and use the \"shear\" command. Remember to use turn commands to reach the sheep."; },
  level3TooFewBlocksMessage: function(d) { return "Try using more commands to gather wool from both sheep. Walk to each one and use the \"shear\" command."; },
  level4FailureMessage: function(d) { return "You must use the \"destroy block\" command on each of the three tree trunks."; },
  level5FailureMessage: function(d) { return "Place your blocks on the dirt outline to build a wall. The pink \"repeat\" command will run commands placed inside it, like \"place block\" and \"move forward\"."; },
  level6FailureMessage: function(d) { return "Place blocks on the dirt outline of the house to complete the puzzle."; },
  level7FailureMessage: function(d) { return "Use the \"plant\" command to place crops on each patch of dark tilled soil."; },
  level8FailureMessage: function(d) { return "If you touch a creeper it will explode. Sneak around them and enter your house."; },
  level9FailureMessage: function(d) { return "Don't forget to place at least 2 torches to light your way AND mine at least 2 coal."; },
  maskMode: function(d) { return "mask mode"; },
  maskModeMasked: function(d) { return "masked"; },
  maskModeReplace: function(d) { return "replace"; },
  minecraftBlock: function(d) { return "block"; },
  minecraftNotConnected: function(d) { return "Minecraft not connected"; },
  miniBlockBricks: function(d) { return "bricks"; },
  miniBlockBucketLava: function(d) { return "lava bucket"; },
  miniBlockBucketWater: function(d) { return "water bucket"; },
  miniBlockCarrots: function(d) { return "carrots"; },
  miniBlockCoal: function(d) { return "coal"; },
  miniBlockCobblestone: function(d) { return "cobblestone"; },
  miniBlockDiamond: function(d) { return "diamond"; },
  miniBlockDirt: function(d) { return "dirt"; },
  miniBlockDirtCoarse: function(d) { return "coarse dirt"; },
  miniBlockEgg: function(d) { return "egg"; },
  miniBlockEmerald: function(d) { return "emerald"; },
  miniBlockGravel: function(d) { return "gravel"; },
  miniBlockGunPowder: function(d) { return "gunpowder"; },
  miniBlockIngotGold: function(d) { return "gold ingot"; },
  miniBlockIngotIron: function(d) { return "iron ingot"; },
  miniBlockLapisLazuli: function(d) { return "lapis lazuli"; },
  miniBlockLogAcacia: function(d) { return "acacia log"; },
  miniBlockLogBirch: function(d) { return "birch log"; },
  miniBlockLogJungle: function(d) { return "jungle log"; },
  miniBlockLogOak: function(d) { return "oak log"; },
  miniBlockLogSpruce: function(d) { return "spruce log"; },
  miniBlockMilk: function(d) { return "milk"; },
  miniBlockPlanksAcacia: function(d) { return "acacia planks"; },
  miniBlockPlanksBirch: function(d) { return "birch planks"; },
  miniBlockPlanksJungle: function(d) { return "jungle planks"; },
  miniBlockPlanksOak: function(d) { return "oak planks"; },
  miniBlockPlanksSpruce: function(d) { return "spruce planks"; },
  miniBlockPoppy: function(d) { return "poppy"; },
  miniBlockPotato: function(d) { return "potato"; },
  miniBlockRedstoneDust: function(d) { return "redstone dust"; },
  miniBlockSand: function(d) { return "sand"; },
  miniBlockSandstone: function(d) { return "sandstone"; },
  miniBlockSheep: function(d) { return "sheep"; },
  miniBlockWheat: function(d) { return "wheat"; },
  miniBlockWool: function(d) { return "wool"; },
  nextLevelMsg: function(d) { return "Puzzle " + d.puzzleNumber + " completed. Congratulations!"; },
  oldBlockHandling: function(d) { return "old block at"; },
  oldBlockHandlingsDestroy: function(d) { return "destroy"; },
  oldBlockHandlingsKeep: function(d) { return "keep"; },
  oldBlockHandlingsReplace: function(d) { return "replace"; },
  onBehalfOf: function(d) { return "on behalf of"; },
  playerSelectChooseCharacter: function(d) { return "Choose your character."; },
  playerSelectChooseSelectButton: function(d) { return "Select"; },
  playerSelectLetsGetStarted: function(d) { return "Let's get started."; },
  quantity: function(d) { return "quantity"; },
  reinfFeedbackMsg: function(d) { return "You can press \"Keep Playing\" to go back to playing your game."; },
  relative: function(d) { return "relative"; },
  runAgent: function(d) { return "Run Agent"; },
  score: function(d) { return "Score"; },
  seconds: function(d) { return "second(s)"; },
  selectChooseButton: function(d) { return "Select"; },
  soundTypeBump: function(d) { return "bump"; },
  soundTypeChickenBawk: function(d) { return "chicken cluck"; },
  soundTypeChickenHurt: function(d) { return "chicken hurt"; },
  soundTypeCollectedBlock: function(d) { return "block collect"; },
  soundTypeCowHuff: function(d) { return "cow huff"; },
  soundTypeCowHurt: function(d) { return "cow hurt"; },
  soundTypeCowMoo: function(d) { return "cow moo"; },
  soundTypeCowMooLong: function(d) { return "cow mooo"; },
  soundTypeCreeperHiss: function(d) { return "creeper hiss"; },
  soundTypeDig_wood1: function(d) { return "wood break"; },
  soundTypeDoorOpen: function(d) { return "door open"; },
  soundTypeExplode: function(d) { return "explode"; },
  soundTypeFailure: function(d) { return "level failure"; },
  soundTypeFall: function(d) { return "fall"; },
  soundTypeFizz: function(d) { return "fizz"; },
  soundTypeFuse: function(d) { return "fuse"; },
  soundTypeIronGolemHit: function(d) { return "iron golem hit"; },
  soundTypeMetalWhack: function(d) { return "metal whack"; },
  soundTypeMinecart: function(d) { return "minecart"; },
  soundTypePlaceBlock: function(d) { return "block place"; },
  soundTypePunch: function(d) { return "punch"; },
  soundTypeSheepBaa: function(d) { return "sheep baa"; },
  soundTypeStepFarmland: function(d) { return "step farmland"; },
  soundTypeStepGrass: function(d) { return "step grass"; },
  soundTypeStepGravel: function(d) { return "step gravel"; },
  soundTypeStepStone: function(d) { return "step stone"; },
  soundTypeStepWood: function(d) { return "step wood"; },
  soundTypeSuccess: function(d) { return "level success"; },
  soundTypeZombieBrains: function(d) { return "zombie moan"; },
  soundTypeZombieGroan: function(d) { return "zombie growl"; },
  soundTypeZombieHurt: function(d) { return "zombie hurt"; },
  target: function(d) { return "target"; },
  testModeAll: function(d) { return "all"; },
  testModeMasked: function(d) { return "masked"; },
  tileData: function(d) { return "tile data"; },
  timeDay: function(d) { return "day"; },
  timeLong: function(d) { return "long"; },
  timeMedium: function(d) { return "medium"; },
  timeNight: function(d) { return "night"; },
  timeRandom: function(d) { return "random"; },
  timeSet: function(d) { return "set time to"; },
  timeShort: function(d) { return "short"; },
  timeVeryLong: function(d) { return "very long"; },
  timeVeryShort: function(d) { return "very short"; },
  to: function(d) { return "to"; },
  toSlotNumber: function(d) { return "to slot number"; },
  tooManyBlocksFail: function(d) { return "Puzzle " + d.puzzleNumber + " completed. Congratulations! It is also possible to complete it with " + plural(d.numBlocks, 0, en_us, { one: "1 block", other: number(d.numBlocks, "numBlocks") + " blocks" }) + "."; },
  turnRandom: function(d) { return "turn random"; },
  useArrowKeys: function(d) { return "You don't need to add any blocks! Move with the arrows, and press the space bar or tap the game board to use items."; },
  weather: function(d) { return "weather"; },
  weatherTypeClear: function(d) { return "clear"; },
  weatherTypeRain: function(d) { return "rain"; },
  weatherTypeThunder: function(d) { return "thunder"; }
};