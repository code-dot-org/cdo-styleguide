(window.locales=window.locales||{}).applab_locale={addEventHeader:function(e){return"Click a link below to add a function to your code that will be called when the event is triggered."},catActions:function(e){return"Actions"},catControl:function(e){return"Loops"},catEvents:function(e){return"Events"},catLogic:function(e){return"Logic"},catMath:function(e){return"Math"},catProcedures:function(e){return"Functions"},catText:function(e){return"Text"},catVariables:function(e){return"Variables"},columnDoesNotExistError:function(e){return'You tried to get a column called "'+e.columnName+'" from a table called "'+e.tableName+"\", but that column doesn't exist. "},connectToBoard:function(e){return"Connect to Board"},confirmClearTable:function(e){return"Do you really want to delete all data from this table? You cannot undo this action."},confirmImportOverwrite:function(e){return"Importing this file will overwrite the existing data in this table. Are you sure you want to continue?"},container:function(e){return"create container"},containerTooltip:function(e){return"Creates a division container and sets its inner HTML."},designToolboxDescription:function(e){return"Drag the elements into your app!"},designToolboxHeader:function(e){return"Design Toolbox"},designWorkspaceDescription:function(e){return"Click on an element or choose it from the dropdown below to edit its properties. Create code in Events."},designWorkspaceHeader:function(e){return"Workspace"},designWorkspace_copyToScreenButton:function(e){return"Copy to screen"},designWorkspace_eventInsertButton:function(e){return"Insert and show code"},designWorkspace_makeDefaultButton:function(e){return"Make Default"},designWorkspace_restoreThemeButton:function(e){return"Apply Theme"},designWorkspace_eventsTab:function(e){return"EVENTS"},designWorkspace_propertiesTab:function(e){return"PROPERTIES"},designElement_button:function(e){return"Button"},designElement_button_clickEventDesc:function(e){return"Triggered when the button is clicked with a mouse or tapped on a screen."},designElement_canvas:function(e){return"Canvas"},designElement_canvas_clickEventDesc:function(e){return"Triggered when the canvas is clicked with a mouse or tapped on a screen."},designElement_chart:function(e){return"Chart"},designElement_chart_drawEvent:function(e){return"drawChart"},designElement_chart_drawEventDesc:function(e){return"Draws the chart using data you provide."},designElement_chart_drawFromRecordsEvent:function(e){return"drawChartFromRecords"},designElement_chart_drawFromRecordsEventDesc:function(e){return"Draws the chart using App Lab's table data storage."},designElement_checkbox:function(e){return"Checkbox"},designElement_checkbox_changeEventDesc:function(e){return"Triggered when the checkbox state changes both from checked to unchecked and unchecked to checked."},designElement_dropdown:function(e){return"Dropdown"},designElement_dropdown_changeEventDesc:function(e){return"Triggered every time an option is selected from the dropdown."},designElement_image:function(e){return"Image"},designElement_image_clickEventDesc:function(e){return"Triggered when the image is clicked with a mouse or tapped on a screen."},designElement_label:function(e){return"Label"},designElement_label_clickEventDesc:function(e){return"Triggered when the label is clicked with a mouse or tapped on a screen."},designElement_photoSelect:function(e){return"Photo Select"},designElementPhotoSelectClickName:function(e){return"Change"},designElementPhotoSelectClickDescription:function(e){return"Triggered when a photo is selected."},designElement_radioButton:function(e){return"Radio Button"},designElement_radioButton_changeEventDesc:function(e){return"Triggered when the radio button state changes both from selected to de-selected, and from de-selected to selected."},designElement_screen:function(e){return"Screen"},designElement_screen_clickEventDesc:function(e){return"Triggered when the screen is clicked with a mouse or tapped on a screen."},designElement_screen_keyEventDesc:function(e){return"Triggered when a key is pressed."},designElement_slider:function(e){return"Slider"},designElement_slider_inputEventDesc:function(e){return"Triggered whenever the value of the slider is modified."},designElement_textArea:function(e){return"Text Area"},designElement_textArea_changeEventDesc:function(e){return"Triggered when the text area loses focus if the text has changed."},designElement_textInput:function(e){return"Text Input"},designElement_textInput_changeEventDesc:function(e){return"Triggered when the text input loses focus if the text has changed."},designElement_textInput_inputEventDesc:function(e){return"Triggered immediately every time the text input contents change."},designElementEvent_change:function(e){return"Change"},designElementEvent_click:function(e){return"Click"},designElementEvent_input:function(e){return"Input"},designElementEvent_key:function(e){return"Key"},designElementProperty_backgroundColor:function(e){return"background color"},designElementProperty_borderColor:function(e){return"border color"},designElementProperty_borderRadiusPx:function(e){return"border radius (px)"},designElementProperty_borderWidthPx:function(e){return"border width (px)"},designElementProperty_checked:function(e){return"checked"},designElementProperty_fitImage:function(e){return"fit image"},designElementProperty_fitImage_contain:function(e){return"contain"},designElementProperty_fitImage_cover:function(e){return"cover"},designElementProperty_fitImage_fill:function(e){return"fill"},designElementProperty_fitImage_none:function(e){return"none"},designElementProperty_fontFamily:function(e){return"font family"},designElementProperty_fontSizePx:function(e){return"font size (px)"},designElementProperty_groupId:function(e){return"group id"},designElementProperty_heightPx:function(e){return"height (px)"},designElementProperty_hidden:function(e){return"hidden"},designElementProperty_iconColor:function(e){return"icon color"},designElementProperty_iconSizePx:function(e){return"icon size (px)"},designElementProperty_id:function(e){return"id"},designElementProperty_image:function(e){return"image"},designElementProperty_index:function(e){return"index"},designElementProperty_maximumValue:function(e){return"maximum value"},designElementProperty_minimumValue:function(e){return"minimum value"},designElementProperty_options:function(e){return"options"},designElementProperty_placeholder:function(e){return"placeholder"},designElementProperty_readOnly:function(e){return"read only"},designElementProperty_stepSize:function(e){return"step size"},designElementProperty_text:function(e){return"text"},designElementProperty_textAlignment:function(e){return"text alignment"},designElementProperty_textAlignment_center:function(e){return"center"},designElementProperty_textAlignment_justify:function(e){return"justify"},designElementProperty_textAlignment_left:function(e){return"left"},designElementProperty_textAlignment_right:function(e){return"right"},designElementProperty_textColor:function(e){return"text color"},designElementProperty_value:function(e){return"value"},designElementProperty_widthPx:function(e){return"width (px)"},designElementProperty_xPositionPx:function(e){return"x position (px)"},designElementProperty_yPositionPx:function(e){return"y position (px)"},designElementProperty_zOrder:function(e){return"depth"},designElementProperty_zOrder_backButton:function(e){return"Send to Back"},designElementProperty_zOrder_backwardButton:function(e){return"Send Backward"},designElementProperty_zOrder_forwardButton:function(e){return"Send Forward"},designElementProperty_zOrder_frontButton:function(e){return"Send Front"},designElementTheme:function(e){return"Theme"},designElementTheme_area51:function(e){return"Area 51"},designElementTheme_blueAndGold:function(e){return"Blue and Gold"},designElementTheme_blueSteel:function(e){return"Blue Steel"},designElementTheme_bubblegum:function(e){return"Bubblegum"},designElementTheme_berryPatch:function(e){return"Berry Patch"},designElementTheme_cherryVanilla:function(e){return"Cherry Vanilla"},designElementTheme_citrus:function(e){return"Citrus"},designElementTheme_classic:function(e){return"Classic"},designElementTheme_coralReef:function(e){return"Coral Reef"},designElementTheme_crushedVelvet:function(e){return"Crushed Velvet"},designElementTheme_cucumber:function(e){return"Cucumber"},designElementTheme_darkscheme:function(e){return"Darkscheme"},designElementTheme_default:function(e){return"Default"},designElementTheme_forest:function(e){return"Forest"},designElementTheme_glowInTheDark:function(e){return"Glow in the Dark"},designElementTheme_ketchupAndMustard:function(e){return"Ketchup and Mustard"},designElementTheme_lavender:function(e){return"Lavender"},designElementTheme_lemonade:function(e){return"Lemonade"},designElementTheme_millennial:function(e){return"Millennial"},designElementTheme_mintChip:function(e){return"Mint Chip"},designElementTheme_orange:function(e){return"Orange"},designElementTheme_pastel:function(e){return"Pastel"},designElementTheme_peachy:function(e){return"Peachy"},designElementTheme_polar:function(e){return"Polar"},designElementTheme_playtime:function(e){return"Playtime"},designElementTheme_robot:function(e){return"Robot"},designElementTheme_twoTone:function(e){return"Two Tone"},designElementTheme_underTheSea:function(e){return"Under the Sea"},designElementTheme_watermelon:function(e){return"Watermelon"},dropletBlock_appendItem_description:function(e){return"Append the item to the end of the array."},dropletBlock_appendItem_param0_description:function(e){return"The array to be modified."},dropletBlock_appendItem_param1_description:function(e){return"The item to add to the end of the array."},dropletBlock_arcLeft_description:function(e){return"Moves the turtle forward and to the left in a smooth, circular arc."},dropletBlock_arcLeft_param0_description:function(e){return"The angle along the circle to move."},dropletBlock_arcLeft_param1_description:function(e){return"The radius of the circle that is placed left of the turtle. Must be >= 0."},dropletBlock_arcRight_description:function(e){return"Moves the turtle forward and to the right in a smooth, circular arc."},dropletBlock_arcRight_param0_description:function(e){return"The angle along the circle to move."},dropletBlock_arcRight_param1_description:function(e){return"The radius of the circle that is placed right of the turtle. Must be >= 0."},dropletBlock_button_description:function(e){return"Creates a button on the screen displaying the text provided and referenced by the given id at default location (0,0)."},dropletBlock_button_param0_description:function(e){return"A unique identifier for the button. The id is used for referencing the created button. For example, to assign event handlers."},dropletBlock_button_param1_description:function(e){return"The text displayed within the button."},dropletBlock_checkbox_description:function(e){return"Create a checkbox and assign it an element id"},dropletBlock_checkbox_param0_description:function(e){return"A unique identifier for the checkbox. The id is used for referencing the created checkbox. For example, to assign event handlers."},dropletBlock_checkbox_param1_description:function(e){return"The initial value of the checkbox."},dropletBlock_circle_description:function(e){return"Draw a circle on the active  canvas with the specified coordinates for center (x, y) and radius."},dropletBlock_circle_param0_description:function(e){return"The x position in pixels of the center of the circle."},dropletBlock_circle_param1_description:function(e){return"The y position in pixels of the center of the circle."},dropletBlock_circle_param2_description:function(e){return"The radius of the circle, in pixels."},dropletBlock_clearCanvas_description:function(e){return"Clear all data on the active canvas"},dropletBlock_clearInterval_description:function(e){return"Clear an existing interval timer by passing in the value returned from setInterval()"},dropletBlock_clearInterval_param0:function(e){return"interval"},dropletBlock_clearInterval_param0_description:function(e){return"The value returned by the setInterval function to clear."},dropletBlock_clearTimeout_description:function(e){return"Clear an existing timer by passing in the value returned from setTimeout()"},dropletBlock_clearTimeout_param0:function(e){return"timeout"},dropletBlock_clearTimeout_param0_description:function(e){return"The value returned by the setTimeout function to cancel."},"dropletBlock_console.log_description":function(e){return"Displays the string or variable in the console display"},"dropletBlock_console.log_param0":function(e){return"message"},"dropletBlock_console.log_param0_description":function(e){return"The message string to display in the console."},"dropletBlock_console.clear_description":function(e){return"Clears the console display"},dropletBlock_container_description:function(e){return"Create a division container with the specified element id, and optionally set its inner HTML"},dropletBlock_createCanvas_description:function(e){return"Create a canvas with the specified id, and optionally set width and height dimensions."},dropletBlock_createCanvas_param0_description:function(e){return"The id of the new canvas element."},dropletBlock_createCanvas_param1_description:function(e){return"The horizontal width in pixels of the rectangle."},dropletBlock_createCanvas_param2_description:function(e){return"The vertical height in pixels of the rectangle."},dropletBlock_createRecord_description:function(e){return"Using App Lab's table data storage, creates a record with a unique id in the table name provided, and calls the callback function when the action is finished."},dropletBlock_createRecord_param0_description:function(e){return"The name of the table the record should be added to. A table with the specified name gets created if it doesn't exist."},dropletBlock_createRecord_param1_description:function(e){return"The record data."},dropletBlock_createRecord_param2_description:function(e){return"A callback function that is asynchronously called when the call to createRecord() is finished."},dropletBlock_declareAssign_list_abd_description:function(e){return"Declare a variable and assigns an array to it with the given initial values"},dropletBlock_declareAssign_list_abd_signatureOverride:function(e){return"Declare and assign an array to a variable"},dropletBlock_declareAssign_str_hello_world_description:function(e){return"Declare a variable and assign a string to it"},dropletBlock_declareAssign_str_hello_world_signatureOverride:function(e){return"Declare and assign a string to a variable"},dropletBlock_deleteElement_description:function(e){return"Delete the element with the specified id."},dropletBlock_deleteElement_param0_description:function(e){return"The id of the element to delete."},dropletBlock_deleteRecord_description:function(e){return"Using App Lab's table data storage, deletes the provided record in the table with the specified name. The record is an object that must be uniquely identified with its id field. When the call is completed, the callback function is called."},dropletBlock_deleteRecord_param0_description:function(e){return"The name of the table from which the records should be searched and read."},dropletBlock_deleteRecord_param1_description:function(e){return"The record data."},dropletBlock_deleteRecord_param2_description:function(e){return"A callback function that is asynchronously called when the call to deleteRecord() is finished."},dropletBlock_dot_description:function(e){return"Draws a dot centered at the turtle's location with the specified radius."},dropletBlock_dot_param0_description:function(e){return"The radius of the dot to draw."},dropletBlock_drawChart_description:function(e){return"Draws a chart to the specified chart element using the data provided."},dropletBlock_drawChart_param0_description:function(e){return"The chart id."},dropletBlock_drawChart_param1_description:function(e){return"The chart type ('bar', 'line', 'pie', or 'scatter')."},dropletBlock_drawChart_param2_description:function(e){return"The chart data."},dropletBlock_drawChart_param3:function(e){return"options"},dropletBlock_drawChart_param3_description:function(e){return"Optional. Display options for the chart."},dropletBlock_drawChart_param4:function(e){return"callback"},dropletBlock_drawChart_param4_description:function(e){return"Optional. The callback function that is asynchronously called when the call to drawChart() is finished."},dropletBlock_drawChartFromRecords_description:function(e){return"Draws a chart to the specified chart element using data retrieved from the specified table."},dropletBlock_drawChartFromRecords_param0_description:function(e){return"The chart id."},dropletBlock_drawChartFromRecords_param1_description:function(e){return"The chart type ('bar', 'line', 'pie', or 'scatter')."},dropletBlock_drawChartFromRecords_param2_description:function(e){return"The name of the table to retrieve records from."},dropletBlock_drawChartFromRecords_param3_description:function(e){return"An array of column names."},dropletBlock_drawChartFromRecords_param4:function(e){return"options"},dropletBlock_drawChartFromRecords_param4_description:function(e){return"Optional. Display options for the chart."},dropletBlock_drawChartFromRecords_param5:function(e){return"callback"},dropletBlock_drawChartFromRecords_param5_description:function(e){return"Optional. The callback function that is asynchronously called when the call to drawChartFromRecords() is finished."},dropletBlock_drawImage_description:function(e){return"Draws the specified image or canvas element onto the active canvas at the specified position, and optionally scales the element to the specified width and height"},dropletBlock_drawImage_param0:function(e){return"id"},dropletBlock_drawImage_param0_description:function(e){return"The x position in pixels of the upper left corner of the image to draw."},dropletBlock_drawImage_param1:function(e){return"x"},dropletBlock_drawImage_param1_description:function(e){return"The x position in pixels of the upper left corner of the image to draw."},dropletBlock_drawImage_param2:function(e){return"y"},dropletBlock_drawImage_param2_description:function(e){return"The y position in pixels of the upper left corner of the image to draw."},dropletBlock_drawImage_param3:function(e){return"width"},dropletBlock_drawImage_param4:function(e){return"height"},dropletBlock_drawImageURL_description:function(e){return"Draws the image at the specific URL onto the active canvas element."},dropletBlock_drawImageURL_param0_description:function(e){return"The URL to an image. Can be an project asset name or external URL."},dropletBlock_dropdown_description:function(e){return"Create a dropdown, assign it an element id, and populate it with a list of items"},dropletBlock_dropdown_signatureOverride:function(e){return"dropdown(id, option1, option2, ..., optionX)"},dropletBlock_getAlpha_description:function(e){return"Returns the amount of alpha (opacity) (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data."},dropletBlock_getAlpha_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_getAlpha_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_getAlpha_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_getAttribute_description:function(e){return"Gets the given attribute"},dropletBlock_getBlue_description:function(e){return"Gets the amount of blue (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data."},dropletBlock_getBlue_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_getBlue_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_getBlue_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_getChecked_description:function(e){return"Get the state of a checkbox or radio button"},dropletBlock_getChecked_param0_description:function(e){return"The id of the specified element."},dropletBlock_getDirection_description:function(e){return"Returns the current direction that the turtle is facing. 0 degrees is pointing up."},dropletBlock_getGreen_description:function(e){return"Gets the amount of green (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data."},dropletBlock_getGreen_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_getGreen_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_getGreen_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_getImageData_description:function(e){return"Returns an object representing the image data captured from the canvas with the rectangle specified by x, y, width, and height."},dropletBlock_getImageData_param0_description:function(e){return"The x position in pixels to start the capture."},dropletBlock_getImageData_param1_description:function(e){return"The y position in pixels to start the capture."},dropletBlock_getImageData_param2_description:function(e){return"The width of the bounding rectangle to capture the image data."},dropletBlock_getImageData_param3_description:function(e){return"The height of the bounding rectangle to capture the image data."},dropletBlock_getImageURL_description:function(e){return"Get the URL for the provided image element id"},dropletBlock_getImageURL_param0_description:function(e){return"The id of the image element."},dropletBlock_getKeyValue_description:function(e){return"Retrieves the value stored at the provided key name in App Lab's key/value data storage. The value is returned as a parameter to callback function when the retrieval is finished."},dropletBlock_getKeyValue_param0_description:function(e){return"The name of the key to be retrieved."},dropletBlock_getKeyValue_param1_description:function(e){return"A callback function that is asynchronously called when the call to getKeyValue is finished."},dropletBlock_getKeyValueSync_description:function(e){return"Retrieves the value stored at the provided key name in App Lab's key/value data storage."},dropletBlock_getKeyValueSync_param0:function(e){return"key"},dropletBlock_getKeyValueSync_param0_description:function(e){return"The name of the key to be retrieved."},dropletBlock_getNumber_description:function(e){return"Get the number value from the specified element"},dropletBlock_getNumber_param0_description:function(e){return"The id of the specified element."},dropletBlock_getRed_description:function(e){return"Gets the amount of red (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data."},dropletBlock_getRed_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_getRed_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_getRed_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_getText_description:function(e){return"Get the text from the specified element"},dropletBlock_getText_param0_description:function(e){return"The id of the specified element."},dropletBlock_getUserId_description:function(e){return"Gets a unique identifier for the current user of this app."},dropletBlock_getXPosition_description:function(e){return"Get the x position of the specified element."},dropletBlock_getXPosition_param0_description:function(e){return"The id of the specified element."},dropletBlock_getX_description:function(e){return"Gets the current x coordinate in pixels of the turtle."},dropletBlock_getYPosition_description:function(e){return"Get the y position of the specified element."},dropletBlock_getYPosition_param0_description:function(e){return"The id of the specified element."},dropletBlock_getY_description:function(e){return"Gets the current y coordinate in pixels of the turtle."},dropletBlock_hideElement_description:function(e){return"Hides the element with the provided id so it is not shown on the screen."},dropletBlock_hideElement_param0_description:function(e){return"The id of the element to hide."},dropletBlock_hide_description:function(e){return"Makes the turtle invisible at its current location."},dropletBlock_imageUploadButton_description:function(e){return"Create an image upload button and assign it an element id"},dropletBlock_image_description:function(e){return"Displays the image from the provided url on the screen."},dropletBlock_image_param0_description:function(e){return"The id of the image element."},dropletBlock_image_param1_description:function(e){return"The source URL of the image to be displayed on screen."},dropletBlock_includes_description:function(e){return"Returns true if searchValue is found within the string"},dropletBlock_includes_param0:function(e){return"searchValue"},dropletBlock_includes_param0_description:function(e){return"The string to search for."},dropletBlock_indexOf_description:function(e){return"Returns the position of the first occurrence of searchValue within the string"},dropletBlock_indexOf_param0:function(e){return"searchValue"},dropletBlock_indexOf_param0_description:function(e){return"The string to search for."},dropletBlock_innerHTML_description:function(e){return"Set the inner HTML for the element with the specified id"},dropletBlock_insertItem_description:function(e){return"Insert the item into the array at the specified position."},dropletBlock_insertItem_param0_description:function(e){return"The array to be modified."},dropletBlock_insertItem_param1_description:function(e){return"The position to insert the item into the array."},dropletBlock_insertItem_param2_description:function(e){return"The item to insert into the array."},dropletBlock_length_description:function(e){return"The length of the string"},dropletBlock_line_description:function(e){return"Draws a line on the active canvas from x1, y1 to x2, y2."},dropletBlock_line_param0_description:function(e){return"The x position in pixels of the beginning of the line."},dropletBlock_line_param1_description:function(e){return"The y position in pixels of the beginning of the line."},dropletBlock_line_param2_description:function(e){return"The x position in pixels of the end of the line."},dropletBlock_line_param3_description:function(e){return"The y position in pixels of the end of the line."},dropletBlock_listLength_description:function(e){return"The length of the array"},dropletBlock_listLength_signatureOverride:function(e){return"[list].length"},dropletBlock_moveBackward_description:function(e){return"Moves the turtle backward a given number of pixels from the current direction."},dropletBlock_moveBackward_param0_description:function(e){return"The number of pixels to move the turtle back in its current direction. If not provided, the turtle will move back 25 pixels."},dropletBlock_moveForward_description:function(e){return"Moves the turtle forward a given number of pixels in the current direction."},dropletBlock_moveForward_param0_description:function(e){return"The number of pixels to move the turtle forward in its current direction. If not provided, the turtle will move forward 25 pixels."},dropletBlock_moveTo_description:function(e){return"Moves the turtle to a specific (x,y) position on the screen."},dropletBlock_moveTo_param0_description:function(e){return"The x coordinate on the screen to move the turtle."},dropletBlock_moveTo_param1_description:function(e){return"The y coordinate on the screen to move the turtle."},dropletBlock_move_description:function(e){return"Moves the turtle by adding x pixels to the turtle's current x position and y pixels to the turtle's current y position."},dropletBlock_move_param0_description:function(e){return"The number of pixels to move the turtle right."},dropletBlock_move_param1_description:function(e){return"The number of pixels to move the turtle down."},dropletBlock_onEvent_description:function(e){return"Executes the callback code when a specific event type occurs for the specified UI element id."},dropletBlock_onEvent_param0_description:function(e){return"The ID of the UI control to which this function applies."},dropletBlock_onEvent_param1_description:function(e){return"The type of event to respond to."},dropletBlock_onEvent_param2_description:function(e){return"A function to execute."},dropletBlock_onRecordEvent_description:function(e){return"Executes the callback function code when a create, update, or delete event occurs inside the specified table."},dropletBlock_onRecordEvent_param0_description:function(e){return"The name of the table to which this event handler applies."},dropletBlock_onRecordEvent_param1_description:function(e){return"The callback function executed in response to a create, update, or delete event in the specified table."},dropletBlock_onRecordEvent_param2_description:function(e){return"Optional. Specifies whether a create event should also fire for each record that is already in the table."},dropletBlock_penColor_description:function(e){return"Sets the color of the pen used by the turtle for drawing lines and dots."},dropletBlock_penColor_param0_description:function(e){return"The color of the line left behind the turtle as it moves."},dropletBlock_penDown_description:function(e){return"Puts the pen down so the turtle draws a line behind it as it moves."},dropletBlock_penRGB_description:function(e){return"Using RGBA values, sets the color of the pen used by the turtle for drawing lines and dots."},dropletBlock_penRGB_param0_description:function(e){return"The amount of red (0-255) in the pen used by the turtle for drawing lines and dots."},dropletBlock_penRGB_param1_description:function(e){return"The amount of green (0-255) in the pen used by the turtle for drawing lines and dots."},dropletBlock_penRGB_param2_description:function(e){return"The amount of blue (0-255) in the pen used by the turtle for drawing lines and dots."},dropletBlock_penRGB_param3:function(e){return"a"},dropletBlock_penRGB_param3_description:function(e){return"Optional. The opacity, a number between 0.0 (fully transparent) and 1.0 (fully opaque), of the color used by the turtle for drawing lines and dots. Default is 1.0."},dropletBlock_penUp_description:function(e){return"Picks the pen up so the turtle does not draw a line as it moves."},dropletBlock_penWidth_description:function(e){return"Sets the width of the line in pixels that the turtle draws behind it as it moves."},dropletBlock_penWidth_param0_description:function(e){return"The diameter of the circles drawn behind the turtle as it moves."},dropletBlock_putImageData_description:function(e){return"Puts the input image data onto the current canvas element starting at position x, y."},dropletBlock_putImageData_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_putImageData_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image to place the data on the canvas."},dropletBlock_putImageData_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image to place the data on the canvas."},dropletBlock_radioButton_description:function(e){return"Creates a radio button and assigns it to a group for choosing from a predefined set of options. Only one radio button in a group can be selected at a time"},dropletBlock_radioButton_param0_description:function(e){return"A unique identifier for the radio button. The id is used for referencing the radio button control. For example, to assign event handlers."},dropletBlock_radioButton_param1_description:function(e){return"Whether the radio button is initially checked."},dropletBlock_radioButton_param2:function(e){return"group"},dropletBlock_radioButton_param2_description:function(e){return"The group that the radio button is associated with. Only one button in a group can be checked at a time."},dropletBlock_readRecords_description:function(e){return"Using App Lab's table data storage, reads the records from the provided table name that match the specified search terms. When the call is completed, the callback function is called and is passed the array of records."},dropletBlock_readRecords_param0_description:function(e){return"The name of the table from which the records should be searched and read."},dropletBlock_readRecords_param1_description:function(e){return"The search terms."},dropletBlock_readRecords_param2_description:function(e){return"A callback function that is asynchronously called when the call to readRecords() is finished."},dropletBlock_rect_description:function(e){return"Draws a rectangle onto the active canvas positioned at upperLeftX and upperLeftY, and size width and height."},dropletBlock_rect_param0_description:function(e){return"The x position in pixels of the upper left corner of the rectangle."},dropletBlock_rect_param1_description:function(e){return"The y position in pixels of the upper left corner of the rectangle."},dropletBlock_rect_param2_description:function(e){return"The horizontal width in pixels of the rectangle."},dropletBlock_rect_param3_description:function(e){return"The vertical height in pixels of the rectangle."},dropletBlock_removeItem_description:function(e){return"Remove the item at the specified position from the array."},dropletBlock_removeItem_param0_description:function(e){return"The array to be modified."},dropletBlock_removeItem_param1_description:function(e){return"The position of the item to remove from the array."},dropletBlock_setActiveCanvas_description:function(e){return"Change the active canvas to the canvas with the specified id (other canvas commands only affect the active canvas)."},dropletBlock_setActiveCanvas_param0_description:function(e){return"The id of the canvas element to activate."},dropletBlock_setAlpha_description:function(e){return"Sets the amount of alpha (opacity) (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data."},dropletBlock_setAlpha_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_setAlpha_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_setAlpha_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_setAlpha_param3:function(e){return"alphaValue"},dropletBlock_setAlpha_param3_description:function(e){return"The amount of alpha (opacity) (from 0 to 255) to set in the pixel."},dropletBlock_setBlue_description:function(e){return"Sets the amount of blue (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data to the blueValue input amount."},dropletBlock_setBlue_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_setBlue_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_setBlue_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_setBlue_param3:function(e){return"blueValue"},dropletBlock_setBlue_param3_description:function(e){return"The amount of blue (from 0 to 255) to set in the pixel."},dropletBlock_setChecked_description:function(e){return"Set the state of a checkbox or radio button"},dropletBlock_setChecked_param0:function(e){return"id"},dropletBlock_setChecked_param1:function(e){return"checked"},dropletBlock_setFillColor_description:function(e){return"Set the fill color for the active canvas."},dropletBlock_setFillColor_param0_description:function(e){return"The color name or hex value representing the color."},dropletBlock_setGreen_description:function(e){return"Sets the amount of green (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data to the greenValue input amount."},dropletBlock_setGreen_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_setGreen_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_setGreen_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_setGreen_param3:function(e){return"greenValue"},dropletBlock_setGreen_param3_description:function(e){return"The amount of green (from 0 to 255) to set in the pixel."},dropletBlock_setImageURL_description:function(e){return"Sets the URL for the provided image element id."},dropletBlock_setImageURL_param0_description:function(e){return"The id of the image element."},dropletBlock_setImageURL_param1_description:function(e){return"TThe source URL of the image to be displayed on screen."},dropletBlock_setInterval_description:function(e){return"Execute the callback function code every time a certain number of milliseconds has elapsed, until canceled."},dropletBlock_setInterval_param0_description:function(e){return"A function to execute."},dropletBlock_setInterval_param1_description:function(e){return"The number of milliseconds between each execution of the function."},dropletBlock_setKeyValue_description:function(e){return"Stores a key/value pair in App Lab's key/value data storage, and calls the callback function when the action is finished."},dropletBlock_setKeyValue_param0_description:function(e){return"The name of the key to be stored."},dropletBlock_setKeyValue_param1_description:function(e){return"The data to be stored."},dropletBlock_setKeyValue_param2_description:function(e){return"A callback function that is asynchronously called when the call to setKeyValue is finished."},dropletBlock_setKeyValueSync_description:function(e){return"Stores a key/value pair in App Lab's key/value data storage."},dropletBlock_setKeyValueSync_param0:function(e){return"key"},dropletBlock_setKeyValueSync_param0_description:function(e){return"The name of the key to be stored."},dropletBlock_setKeyValueSync_param1:function(e){return"value"},dropletBlock_setKeyValueSync_param1_description:function(e){return"The data to be stored."},dropletBlock_setNumber_description:function(e){return"Set the number value for the specified element"},dropletBlock_setNumber_param0_description:function(e){return"The id of the specified element."},dropletBlock_setNumber_param1_description:function(e){return"The number value to display."},dropletBlock_setParent_description:function(e){return"Set an element to become a child of a parent element"},dropletBlock_setPosition_description:function(e){return"Positions the specified element at an x,y screen coordinate, and optionally sets a new width and height for the element."},dropletBlock_setPosition_param0_description:function(e){return"The id of the specified element."},dropletBlock_setPosition_param1_description:function(e){return"The x coordinate on the screen to move the element to."},dropletBlock_setPosition_param2_description:function(e){return"The y coordinate on the screen to move the element to."},dropletBlock_setPosition_param3_description:function(e){return"Optional. The width to set the element to, in pixels."},dropletBlock_setPosition_param4_description:function(e){return"Optional. The height to set the element to, in pixels."},dropletBlock_setRGB_description:function(e){return"Sets the RGB color values (ranging from 0 to 255) of the pixel located at the given x and y position in the given image data to the input red, green, blue amounts."},dropletBlock_setRGB_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_setRGB_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_setRGB_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_setRGB_param3:function(e){return"red"},dropletBlock_setRGB_param3_description:function(e){return"The amount of red (from 0 to 255) to set in the pixel."},dropletBlock_setRGB_param4:function(e){return"green"},dropletBlock_setRGB_param4_description:function(e){return"The amount of green (from 0 to 255) to set in the pixel."},dropletBlock_setRGB_param5:function(e){return"blue"},dropletBlock_setRGB_param5_description:function(e){return"The amount of blue (from 0 to 255) to set in the pixel."},dropletBlock_setRGB_param6:function(e){return"alpha"},dropletBlock_setRGB_param6_description:function(e){return"Optional. The amount of opacity (from 0 to 255) to set in the pixel. Defaults to 255 (full opacity)."},dropletBlock_setRed_description:function(e){return"Sets the amount of red (ranging from 0 to 255) in the color of the pixel located at the given x and y position in the given image data to the redValue input amount."},dropletBlock_setRed_param0_description:function(e){return"The image data object that describes data captured from a canvas element (use [getImageData()])."},dropletBlock_setRed_param1_description:function(e){return"The x position in pixels starting from the upper left corner of image."},dropletBlock_setRed_param2_description:function(e){return"The y position in pixels starting from the upper left corner of image."},dropletBlock_setRed_param3:function(e){return"redValue"},dropletBlock_setRed_param3_description:function(e){return"The amount of red (from 0 to 255) to set in the pixel."},dropletBlock_setScreen_description:function(e){return"Sets the screen to the given screenId."},dropletBlock_setScreen_param0_description:function(e){return"The unique identifier for the screen. Must begin with a letter, contain no spaces, and may contain letters, digits, - and _."},dropletBlock_setSize_description:function(e){return"Sets the width and height for the specified element."},dropletBlock_setSize_param0_description:function(e){return"The id of the specified element."},dropletBlock_setSize_param1_description:function(e){return"The width to set the element to, in pixels."},dropletBlock_setSize_param2_description:function(e){return"The height to set the element to, in pixels."},dropletBlock_setProperty_description:function(e){return"Sets a property to a new value for the specified element."},dropletBlock_setProperty_param0_description:function(e){return"The id of the specified element."},dropletBlock_setProperty_param1_description:function(e){return"The property to change."},dropletBlock_setProperty_param2_description:function(e){return"The new property value."},dropletBlock_setStrokeColor_description:function(e){return"Set the stroke color for the active canvas."},dropletBlock_setStrokeColor_param0_description:function(e){return"The color name or hex value representing the color."},dropletBlock_setStrokeWidth_description:function(e){return"Set the line width for the active canvas."},dropletBlock_setStrokeWidth_param0_description:function(e){return"The width in pixels with which to draw lines, circles, and rectangles."},dropletBlock_setStyle_description:function(e){return"Add CSS style text to an element"},dropletBlock_setText_description:function(e){return"Set the text for the specified element"},dropletBlock_setText_param0_description:function(e){return"The id of the specified element."},dropletBlock_setText_param1_description:function(e){return"The text to display."},dropletBlock_setTimeout_description:function(e){return"Set a timer and execute code when that number of milliseconds has elapsed"},dropletBlock_setTimeout_param0_description:function(e){return"A function to execute."},dropletBlock_setTimeout_param1_description:function(e){return"The number of milliseconds to wait before executing the function."},dropletBlock_showElement_description:function(e){return"Shows the element with the provided id."},dropletBlock_showElement_param0_description:function(e){return"The id of the element to show."},dropletBlock_show_description:function(e){return"Makes the turtle visible at its current location."},dropletBlock_speed_description:function(e){return"Sets the speed for the app's execution, which includes the turtle's speed."},dropletBlock_speed_param0_description:function(e){return"The speed of the app's execution in the range of (1-100)."},dropletBlock_startWebRequest_description:function(e){return"Request data from the internet and execute code when the request is complete."},dropletBlock_startWebRequest_param0_description:function(e){return"The web address of a service that returns data."},dropletBlock_startWebRequest_param1_description:function(e){return"A callback function to execute."},dropletBlock_substring_description:function(e){return"Returns a string extracted between the start and end positions of the original string"},dropletBlock_substring_param0:function(e){return"start"},dropletBlock_substring_param0_description:function(e){return"The position to start the extraction."},dropletBlock_substring_param1:function(e){return"end"},dropletBlock_substring_param1_description:function(e){return"The position (up to, but not including) to stop the extraction."},dropletBlock_textInput_description:function(e){return"Create a text input and assign it an element id"},dropletBlock_textInput_param0_description:function(e){return"A unique identifier for the input control. The id is used for referencing the created input. For example, to assign event handlers."},dropletBlock_textInput_param1_description:function(e){return"The value to display for the input."},dropletBlock_textLabel_description:function(e){return"Creates a text label on the screen displaying the text provided and referenced by the given id at default location (0,0)."},dropletBlock_textLabel_param0_description:function(e){return"A unique identifier for the label control. The id is used for referencing the created label. For example, to assign event handlers."},dropletBlock_textLabel_param1_description:function(e){return"The value to display for the label."},dropletBlock_toLowerCase_description:function(e){return"Converts the original string to use all lowercase letters and returns it as a new string"},dropletBlock_toUpperCase_description:function(e){return"Converts the original string to use all uppercase letters and returns it as a new string"},dropletBlock_turnLeft_description:function(e){return"Rotates the turtle left by the specified angle. The turtle’s position remains the same."},dropletBlock_turnLeft_param0_description:function(e){return"The angle to turn left."},dropletBlock_turnRight_description:function(e){return"Rotates the turtle right by the specified angle. The turtle’s position remains the same."},dropletBlock_turnRight_param0_description:function(e){return"The angle to turn right."},dropletBlock_turnTo_description:function(e){return"Changes the turtle's direction to a specific angle. 0 is up, 90 is right, 180 is down, and 270 is left."},dropletBlock_turnTo_param0_description:function(e){return"The new angle to set the turtle's direction to."},dropletBlock_updateRecord_description:function(e){return"Using App Lab's table data storage, updates the provided record in the table with the specified name. The record must be uniquely identified with its id field. When the call is completed, the callback function is called."},dropletBlock_updateRecord_param0_description:function(e){return"The name of the table from which the records should be searched and read."},dropletBlock_updateRecord_param1_description:function(e){return"The record data."},dropletBlock_updateRecord_param2_description:function(e){return"A callback function that is asynchronously called when the call to updateRecord() is finished."},dropletBlock_write_description:function(e){return"Appends the specified text to the bottom of the document. The text can also be formatted as HTML."},dropletBlock_write_param0_description:function(e){return"The text or HTML you want appended to the bottom of your application"},finalLevel:function(e){return"Congratulations! You have solved the final puzzle."},foundDevices:function(e){return"Did not find a usable device on a serial port.\n\nFound devices: "+e.deviceList},legacy:function(e){return"(Legacy)"},makeMyOwnApp:function(e){return"Make my own app"},makerCheckPluggedIn:function(e){return"Make sure your board is plugged in."},makerSupportedBrowsers:function(e){return"the Chrome or Edge browser."},makerLevelRequires:function(e){return"This level requires that you use"},makerRunWithoutBoard:function(e){return"Run Without Board"},makerSetupAcceptPrompt:function(e){return"If a prompt asking for permission for Code Studio to connect to the Chrome App pops up, click Accept."},makerSetupAdafruitWindowsDrivers:function(e){return"If your board is plugged in, you may be missing the **Adafruit Windows Drivers**. Follow the instructions [on this page](https://learn.adafruit.com/adafruit-feather-32u4-basic-proto/using-with-arduino-ide#install-drivers-windows-only) to install the drivers and try again."},makerSetupAppInstalled:function(e){return"Chrome App installed"},makerSetupBoardBadResponse:function(e){return"We detected that your board doesn't have the correct software installed to work with Code.org."},makerSetupBrowserTitle:function(e){return"Code.org Browser"},makerSetupBrowserSupported:function(e){return"Using a supported browser"},makerSetupCheck:function(e){return"Setup Check"},makerSetupCheckInternetConnection:function(e){return"Please make sure you are connected to the internet, and [https://downloads.code.org](https://downloads.code.org/index.html) is reachable from your network."},makerSetupChromebook:function(e){return"Maker Toolkit works on Chromebooks without any installations or extensions. You should be able to plug in your board and get started right away!"},makerSetupChromebookHistoricalNote:function(e){return"Previously, we required the installation of the Code.org Serial Connector to use the Maker Toolkit with Chromebooks. This is no longer needed. If you have the Code.org Serial Connector installed, you may uninstall it if you wish. We will be removing it from the Chrome Web Store at the end of November. This will not affect your experience with the Maker Toolkit and requires no action from you."},makerSetupChromebookPage:function(e){return"Open this page (["+e.makerSetupPage+"]("+e.makerSetupPage+")) on your Chromebook."},makerSetupCircuitPlaygroundDescription:function(e){return"The Adafruit [Circuit Playground Express](https://www.adafruit.com/product/3399) (and the older [Circuit Playground Classic](https://www.adafruit.com/product/3000)) is a programmable circuit board with various sensors and components and includes 10 color LEDs along with a mini-speaker."},makerSetupCircuitPlaygroundImageAltText:function(e){return"The Circuit Playground board is a circular circuit board with a USB connector at the top rim, 14 connection pins along the rim, 10 LED lights, two buttons and multiple sensors."},makerSetupCircuitPlaygroundTitle:function(e){return"The Circuit Playground"},makerSetupConnectWithWebSerial:function(e){return"The Circuit Playground and micro:bit connect directly to computers while using Google Chrome or Microsoft Edge browsers."},makerSetupDownloadProblem:function(e){return"There was a problem getting your download link."},makerSetupFetchingVersion:function(e){return"Getting the latest version..."},makerSetupFollowInstructions:function(e){return"Follow the instructions given by the interactive setup checklist."},makerSetupGeneralDescription:function(e){return"In the Code.org [standalone Maker units](https://code.org/maker) and the Physical Computing unit in [Computer Science Discoveries](https://code.org/educate/csd) students use the Circuit Playground or micro:bit connected to their computers via USB to allow for online curriculum integration and interactive debugging of programs.\n\nPlease follow the instructions below to connect your board to Code.org."},makerSetupGeneralTitle:function(e){return"Welcome Makers!"},makerSetupInstallSerialConnector:function(e){return"Please install the [Code.org Serial Connector Chrome App]("+e.webstoreURL+")."},makerSetupInstallFirmataCP:function(e){return"You should make sure it has the right firmware sketch installed. You can install the Firmata sketch [for Circuit Playground Express boards with these instructions]("+e.firmataURLExpress+") and [for Circuit Playground Classic boards with these instructions]("+e.firmataURLClassic+")."},makerSetupInstallFirmataMB:function(e){return'You can update your micro:bit by clicking on the "Update micro:bit" button below. After you press the button, a window should pop up with a row that includes "micro:bit". Select that row and then click the "Connect" button.'},makerSetupInstallFirmataOther:function(e){return"You should make sure it has the right firmware sketch installed. You can install the Firmata sketch [for Circuit Playground Express boards with these instructions]("+e.firmataURLExpress+") and [for Circuit Playground Classic boards with these instructions]("+e.firmataURLClassic+"). You can install the Firmata sketch [for micro:bit with these instructions]("+e.firmataURLMB+")"},makerSetupInstructions:function(e){return"Setup Instructions"},makerSetupLinuxAddDialout:function(e){return"If you don't belong to 'dialout', you'll want to add yourself to that group:"},makerSetupLinuxAlternative:function(e){return"Alternative Installers"},makerSetupLinuxAlternativeInstall:function(e){return"[Install from source](https://github.com/code-dot-org/browser)"},makerSetupLinuxGroupsCheck:function(e){return"From your terminal, check which groups you belong to:"},makerSetupLinuxRestart:function(e){return"You may need to restart your computer for changes to take effect."},makerSetupLinuxSerialport:function(e){return"We didn't have permission to open the serialport. Please make sure you are a member of the 'dialout' group."},makerSetupMicrobitDescription:function(e){return"The [micro:bit](https://microbit.org/) is a circuit board designed by the BBC with various sensors (such as an accelerometer) and components and includes a five-by-five array of programmable LEDs."},makerSetupMicrobitFirmataTransferring:function(e){return"Please wait while the updated file is being transferred to the connected micro-bit. Do not disconnect the micro-bit or close this window during this process."},makerSetupMicrobitFirmataUpdateSuccess:function(e){return"Your micro:bit has been updated!"},makerSetupClickRedetect:function(e){return'Click on the "re-detect" button above'},makerSetupConfirmConnection:function(e){return"to confirm you can now connect to the board successfully."},makerSetupMicrobitImageAltText:function(e){return"The micro:bit board is a rectangular circuit board with a USB connector on top, one button on each side, five connection pins on the bottom and a set of five-by-five LED lights in the middle."},makerSetupMicrobitSupportArticle:function(e){return"For more information on how to resolve this error, check out our troubleshooting guide by clicking [here](https://support.code.org/hc/en-us/articles/13937009908877)."},makerSetupMicrobitTitle:function(e){return"The micro:bit"},makerSetupPlugInBoard:function(e){return"Plug in your board to start using it with App Lab!"},makerSetupPlugInBoardCheck:function(e){return"We couldn't detect a Circuit Playground or micro:bit board. Make sure your board is plugged in, and click: "},makerSetupRedetect:function(e){return'Once it is installed, come back to this page and click the "re-detect" button, above.'},makerSetupPageTitle:function(e){return"Maker Toolkit IT Setup"},makerSetupUnsupportedBrowser:function(e){return"Your current browser is not supported at this time. Please install the latest version of [Google Chrome](https://www.google.com/chrome/browser)."},makerSetupUpdateMBFirmata:function(e){return"Update micro:bit"},makerSetupUpdateMBFirmataDescription:function(e){return"Update micro:bit with latest version of Firmata"},makerSetupVerifyComponents:function(e){return"Oh no! Something unexpected went wrong while verifying the board components."},makerSetupWebSerialConnectToComputer:function(e){return"Connect the board to your computer."},makerSetupWebSerialConnectToBoardButton:function(e){return"Press the “Connect to Board” button below."},makerSetupWebSerialWindowConnect:function(e){return'A window should pop up with a row that includes "Circuit Playground" or "micro:bit". Select that row, then click "Connect".'},makerSetupWebSerialSuccessfulConnection:function(e){return"You should see several green checkmarks below. When full connected, the Circuit Playground will display a sequence of green lights and emit a series of beeps, and the micro:bit will show a short animation."},makerSetupWebSerialSupportArticle:function(e){return"If you have any issues, please refer to our [WebSerial Support Article](https://support.code.org/hc/en-us/articles/9953258694669)."},makerSetupWindows7Drivers:function(e){return"(Windows 7) Install the [Adafruit Windows drivers](https://learn.adafruit.com/adafruit-feather-32u4-basic-proto/using-with-arduino-ide#install-drivers-windows-only)."},makerTryAgain:function(e){return"Try Again"},makerWaitingForConnect:function(e){return"Waiting for board to connect..."},manageAssets:function(e){return"Click to view or update your images and sounds."},nextLevel:function(e){return"Congratulations! You have completed this puzzle."},no:function(e){return"No"},note:function(e){return"Note"},numBlocksNeeded:function(e){return"This puzzle can be solved with %1 blocks."},redetect:function(e){return"re-detect"},reinfFeedbackMsg:function(e){return"Are you finished? With App Lab, you're in control - it's up to you to check your work and decide when you're done."},repeatForever:function(e){return"repeat forever"},repeatDo:function(e){return"do"},repeatForeverTooltip:function(e){return"Execute the actions in this block repeatedly while the app is running."},selectScreen:function(e){return"Select which screen you would like to edit."},shareApplabTwitter:function(e){return"Check out the app I made. I wrote it myself with @codeorg"},shareApplabTwitterDonor:function(e){return"Check out the app I made. (Thanks "+e.donor+" for supporting @codeorg)"},shareGame:function(e){return"Share your app:"},tableDoesNotExistError:function(e){return'You tried to read records from a table called "'+e.tableName+"\" but that table doesn't exist in this app"},tryAgainText:function(e){return"Keep working"},viewData:function(e){return"View Data"},yes:function(e){return"Yes"}};