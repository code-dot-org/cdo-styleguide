
(window.locales = window.locales || {}).music_locale = {
  blockly_blockNewTrackAtStart: function(d) { return "new track " + d.name; },
  blockly_blockNewTrackAtStartTooltip: function(d) { return "new track"; },
  blockly_blockNewTrackAtMeasure: function(d) { return "new track " + d.track + " at " + d.measure; },
  blockly_blockNewTrackAtMeasureTooltip: function(d) { return "new track at measure"; },
  blockly_blockNewTrackOnTrigger: function(d) { return "new track " + d.track + " when " + d.trigger + " triggered"; },
  blockly_blockNewTrackOnTriggerTooltip: function(d) { return "new track on trigger"; },
  blockly_blockPlayChord: function(d) { return "play notes " + d.chord; },
  blockly_blockPlayChordTooltip: function(d) { return "play notes"; },
  blockly_blockPlaySound: function(d) { return "play " + d.sound; },
  blockly_blockPlaySoundTooltip: function(d) { return "play sound"; },
  blockly_blockPlaySoundAtMeasure: function(d) { return "play " + d.sound + " at " + d.measure; },
  blockly_blockPlaySoundAtMeasureTooltip: function(d) { return "play sound"; },
  blockly_blockPlaySoundsRandom: function(d) { return "play random"; },
  blockly_blockPlaySoundsRandomTooltip: function(d) { return "play sounds randomly"; },
  blockly_blockPlaySoundsSequential: function(d) { return "play sequential"; },
  blockly_blockPlaySoundsSequentialTooltip: function(d) { return "play sounds sequentially"; },
  blockly_blockPlaySoundsTogether: function(d) { return "play together"; },
  blockly_blockPlaySoundsTogetherTooltip: function(d) { return "play sounds together"; },
  blockly_blockPlayPattern: function(d) { return "play drums " + d.pattern; },
  blockly_blockPlayPatternTooltip: function(d) { return "play drums"; },
  blockly_blockRest: function(d) { return "rest for " + d.duration; },
  blockly_blockRestTooltip: function(d) { return "rest"; },
  blockly_blockSetLocationNextMeasure: function(d) { return "go to next measure"; },
  blockly_blockSetLocationNextMeasureTooltip: function(d) { return "go to next measure"; },
  blockly_blockSetEffect: function(d) { return "set " + d.effect + " to " + d.value; },
  blockly_blockSetEffectTooltip: function(d) { return "set effect"; },
  blockly_blockTriggered: function(d) { return d.trigger + " triggered " + d.when; },
  blockly_blockTriggeredTooltip: function(d) { return "at trigger"; },
  blockly_blockTriggeredAt: function(d) { return d.trigger + " triggered at " + d.time; },
  blockly_blockTriggeredAtTooltip: function(d) { return "at trigger"; },
  blockly_blockWhenRun: function(d) { return "when run"; },
  blockly_blockWhenRunTooltip: function(d) { return "when run"; },
  blockly_fieldRestHalfBeat: function(d) { return "Â½ beat"; },
  blockly_fieldRestOneBeat: function(d) { return "1 beat"; },
  blockly_fieldRestBeats: function(d) { return d.num + " beats"; },
  blockly_fieldRestOneMeasure: function(d) { return "1 measure"; },
  blockly_fieldRestMeasures: function(d) { return d.num + " measures"; },
  blockly_fieldTriggerStartImmediately: function(d) { return "immediately"; },
  blockly_fieldTriggerStartNextBeat: function(d) { return "at next beat"; },
  blockly_fieldTriggerStartNextMeasure: function(d) { return "at next measure"; },
  blockly_functionNamePlaceholder: function(d) { return "my function"; },
  blockly_toolboxCategoryControl: function(d) { return "Control"; },
  blockly_toolboxCategoryEffects: function(d) { return "Effects"; },
  blockly_toolboxCategoryEvents: function(d) { return "Events"; },
  blockly_toolboxCategoryFunctions: function(d) { return "Functions"; },
  blockly_toolboxCategoryLogic: function(d) { return "Logic"; },
  blockly_toolboxCategoryMath: function(d) { return "Math"; },
  blockly_toolboxCategoryPlay: function(d) { return "Sounds"; },
  blockly_toolboxCategorySimple: function(d) { return "Simple"; },
  blockly_toolboxCategoryTracks: function(d) { return "Tracks"; },
  blockly_toolboxCategoryVariables: function(d) { return "Variables"; },
  builtWithMusicLab: function(d) { return "Built with Music Lab"; },
  control: function(d) { return "Control"; },
  chordArpeggioUp: function(d) { return "Arpeggio Up"; },
  chordArpeggioDown: function(d) { return "Arpeggio Down"; },
  chordArpeggioRandom: function(d) { return "Arpeggio Random"; },
  chordTogether: function(d) { return "Together"; },
  feedback: function(d) { return "Feedback"; },
  share: function(d) { return "Share"; },
  shareComingSoon: function(d) { return "Sharing is under construction. Check back soon."; },
  startOver: function(d) { return "Start Over"; },
  upload: function(d) { return "Upload"; },
  panelHeaderInstructions: function(d) { return "Instructions"; },
  panelHeaderWorkspace: function(d) { return "Workspace"; },
  panelHeaderControls: function(d) { return "Controls"; },
  panelHeaderTimeline: function(d) { return "Timeline"; },
  skip: function(d) { return "Skip"; },
  "continue": function(d) { return "Continue"; },
  undo: function(d) { return "Undo"; },
  redo: function(d) { return "Redo"; },
  soundsFilterPacks: function(d) { return "Packs"; },
  soundsFilterSounds: function(d) { return "Sounds"; },
  soundsFilterAll: function(d) { return "All"; },
  soundsFilterBeats: function(d) { return "Beats"; },
  soundsFilterBass: function(d) { return "Bass"; },
  soundsFilterLeads: function(d) { return "Leads"; },
  soundsFilterEffects: function(d) { return "Effects"; },
  soundsFilterVocals: function(d) { return "Vocals"; },
  packDialogTitle: function(d) { return "Choose a featured track"; },
  packDialogBody: function(d) { return "Level up your mix by adding sounds from a featured track."; },
  effectsLabelsFull: function(d) { return "Full"; },
  effectsLabelsHigh: function(d) { return "High"; },
  effectsLabelsMedium: function(d) { return "Medium"; },
  effectsLabelsLow: function(d) { return "Low"; },
  effectsLabelsOff: function(d) { return "Off"; },
  effectsLabelsVolume: function(d) { return "Volume"; },
  effectsLabelsDelay: function(d) { return "Delay"; },
  effectsLabelsFilter: function(d) { return "Filter"; }
};