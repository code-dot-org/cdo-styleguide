
(window.locales = window.locales || {}).spritelab_locale = {
  addAdditionalPrompts: function(d) { return "Your program didn't create enough prompts."; },
  addAtTimeEvent: function(d) { return "Add this block to your workspace:\n<XML><block type=\"gamelab_atTime\"><title name=\"UNIT\">\"seconds\"</title><value name=\"N\"><block type=\"math_number\"><title name=\"NUM\">???</title></block></value></block></XML>"; },
  addJoinBlocks: function(d) { return "You are printing the exact text you entered. Try adding some other text to it using the join blocks."; },
  addPrintBlock: function(d) { return "You need to add a print block to your code: \n <xml><block type=\"gamelab_printText\"><value name=\"TEXT\"><block type=\"text\"><title name=\"TEXT\"></title></block></value></block></xml>"; },
  addPrompt: function(d) { return "You need to add the prompt block to your code: \n <xml><block type=\"gamelab_setPrompt\"><value name=\"QUESTION\"><block type=\"text\" can_disconnect_from_parent=\"false\"><title name=\"TEXT\">...</title></block></value><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">???</title></block></value></block></xml>"; },
  addPromptWithChoices: function(d) { return "You need to add the prompt block to your code: \n <xml><block type=\"gamelab_setPromptWithChoices\"></block></xml>"; },
  addSpaces: function(d) { return "The printed message is missing some spaces. Can you figure out where to add them?"; },
  addText: function(d) { return "Add some text to your screen with a print block: \n <xml><block type=\"gamelab_printText\"><value name=\"TEXT\"><block type=\"text\"><title name=\"TEXT\"></title></block></value></block></xml>"; },
  addTitleScreen: function(d) { return "You need to add a title screen to your project."; },
  addWhenTouchesEvent: function(d) { return "You need to have a `when touches` block for any of your sprites that will touch. \n<xml><block type=\"gamelab_checkTouching\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue alien\"</title></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"pink alien\"</title></block></value></block></xml>"; },
  addWhenTouchesEventToMakePetGrow: function(d) { return "Add a `when touching` event block and make your pet grow when it eats."; },
  allBehaviors: function(d) { return "Make sure all sprites have a behavior."; },
  allSayBlocks: function(d) { return "Make sure each sprite uses a `say` block. \n<xml><block type=\"gamelab_spriteSay\"><title name=\"SPEECH\">Hello, world!</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></value></block></xml>"; },
  answerPrompt: function(d) { return "Don't forget to type something into your prompt!"; },
  answerPromptWithChoices: function(d) { return "Your prompt should give the user three choices. Don't forget to answer your prompts after running your program!"; },
  atLeastOneSpriteStillMoving: function(d) { return "At least one of your sprites was still moving. Make sure you have a `stops everything` block for each sprite."; },
  bananaUnchanged: function(d) { return "Use a `set size` block to make the banana sprite bigger. Use a size over 100. \n <xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"face_banana_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">150</title></block></value></block></xml>"; },
  behaviorBeforeClick: function(d) { return "Your sprite began a behavior too soon. Move it underneath the event block. \n<xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue alien\"</title></block></value></block></xml>"; },
  behaviorNotStopped: function(d) { return "Your sprite started a new behavior but did not stop the old behavior. Make sure this block is connected to your code. \n<xml><block type=\"gamelab_removeAllBehaviors\" id=\"stopAll\"><value name=\"SPRITE\"<block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"birdside_04_1\"</title></block></value></block></xml>"; },
  behaviorsIncreased: function(d) { return "Your sprite didn't stop any behaviors. To stop an old behavior, use this block. \n <xml><block type=\"gamelab_removeBehaviorSimple\"><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"creature_18_1\"</title></block></value></block></xml>"; },
  bottomLeft: function(d) { return "Move one of your sprites into the bottom left of the screen using <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":100,\"y\":100}</title></block></xml>"; },
  bottomRight: function(d) { return "Move one of your sprites into the bottom right of the screen using <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":300,\"y\":100}</title></block></xml>"; },
  butterflyDidntMove: function(d) { return "The butterfly sprite didn't move. Try a different behavior."; },
  butterflyDidntMoveXY: function(d) { return "The butterfly didn't wander. Try a different behavior."; },
  cardAddPrompt: function(d) { return "Your program needs to ask the user at least one question. \n Your next step is to add a prompt. For example, you can can ask for the reader's name. Rename the variable to something that will help you remember what information is being stored. \n <xml><block type=\"gamelab_setPrompt\"><value name=\"QUESTION\"><block type=\"text\" can_disconnect_from_parent=\"false\"><title name=\"TEXT\">Who is this card for?</title></block></value><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">name</title></block></value></block></xml>"; },
  cardAddtext: function(d) { return "Now that your prompt is setup, you can use print blocks to have the chatbot respond to the user: \n <xml><block type=\"gamelab_printText\"><value name=\"TEXT\"><block type=\"text\"><title name=\"TEXT\"></title></block></value></block></xml>"; },
  cardAnswerPrompt: function(d) { return "Don't forget to type something into your prompt."; },
  cardExplore: function(d) { return "You've completed the requirements for the project, but keep going if you can. Ask the user additional questions or get creative with behaviors, backgrounds, and sounds. Click \"Keep Playing\" to make changes to your code and run it again. Press \"Continue\" to move on and finish your project."; },
  cardNoBehavior: function(d) { return "Your prompt is working. If it is doing what you expected, you can give your sprites behaviors to bring your project to life. Try using different behaviors with events to make your project more interactive."; },
  cardNoSprites: function(d) { return "Your prompt is working. If it is doing what you expected, you can start adding sprites to your project. Add tasty snacks, gifts or fun holiday images."; },
  cardPrintVariable: function(d) { return "It seems like the chatbot is responding, but it didn't print what you typed into the prompt. Make sure the right **variable** label is connected to your `print` block."; },
  cardPrintWhenAnswered: function(d) { return "Right now you are only printing text once. Make sure a `print` block is under a `when answered` block. \n <xml><block type=\"gamelab_whenPromptAnswered\"><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">name</title></block></value></block></xml>"; },
  cardTitleVariable: function(d) { return "It looks like you added a title screen to your program, but it didn't include text from the prompt."; },
  changeBackground: function(d) { return "The background was not changed."; },
  changeClickedSpriteBehavior: function(d) { return "All of your sprites changed behaviors instead of just the one that was clicked. Try using the `clicked sprite` block found inside your event block. \n <xml><block type=\"gamelab_spriteClicked\">\n  <field name=\"CONDITION\">\"when\"</field>\n  <value name=\"SPRITE\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"face_croissant_1\"</field>\n    </block>\n  </value>\n  <next>\n    <block type=\"gamelab_addBehaviorSimple\">\n      <value name=\"SPRITE\">\n        <block type=\"gamelab_clickedSpritePointer\"></block>\n      </value>\n      <value name=\"BEHAVIOR\">\n        <block type=\"gamelab_behavior_get\">\n          <mutation></mutation>\n          <field name=\"VAR\" id=\"spinning right\">spinning right</field>\n        </block>\n      </value>\n    </block>\n  </next>\n</block></xml>"; },
  changeColorTouchedOnly: function(d) { return "All of your sprites changed color instead of just the one that was touched. Try using the `object sprite` block found inside your event block to randomly change the single sprite's color.\n<xml><block type=\"gamelab_checkTouching\">\n  <field name=\"CONDITION\">\"when\"</field>\n  <value name=\"SPRITE1\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"sticker_12_1\"</field>\n    </block>\n  </value>\n  <value name=\"SPRITE2\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"cuteanimals_sheep\"</field>\n    </block>\n  </value>\n  <next>\n    <block type=\"gamelab_setTint\">\n      <value name=\"THIS\">\n        <block type=\"gamelab_objectSpritePointer\"></block>\n      </value>\n      <value name=\"COLOR\">\n        <block type=\"gamelab_randomColor\"></block>\n      </value>\n    </block>\n  </next>\n</block></xml>"; },
  changeColorWhenKeyPressed: function(d) { return "A sprite should change color. Add this block to your new event: \n<XML><block type=\"gamelab_setTint\"><value name=\"THIS\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue alien\"</title></block></value><value name=\"COLOR\"><block type=\"colour_picker\"><title name=\"COLOUR\">#ff0000</title></block></value></block></XML>"; },
  changeLocation: function(d) { return "Use the pin on the location block to move your sprite. <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":200,\"y\":200}</title></block></xml>"; },
  changeOrSetCostume: function(d) { return "None of your sprites changed costumes."; },
  changeOrSetCostumeEvent: function(d) { return "Make sure to use an event to change a sprite's costume."; },
  changeOrSetCostumeUseClicked: function(d) { return "All of your sprites changed costumes instead of just the one that was clicked. Try using the `clicked sprite` block found inside your event block. \n<xml>\n<block type=\"gamelab_spriteClicked\" miniflyout=\"open\">\n  <field name=\"CONDITION\">\"when\"</field>\n  <value name=\"SPRITE\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"face_cupcake_1\"</field>\n    </block>\n  </value>\n  <next>\n    <block type=\"gamelab_setAnimation\">\n      <field name=\"ANIMATION\">\"face_birthdaycake_1\"</field>\n      <value name=\"THIS\">\n        <block type=\"gamelab_clickedSpritePointer\"></block>\n      </value>\n    </block>\n  </next>\n</block>\n</xml>"; },
  changeOrSetSize: function(d) { return "None of your sprites changed size."; },
  changeSpriteBehaviorsWhenClicked: function(d) { return "A sprite needs to change behavior when it is clicked. \n <xml><block type=\"gamelab_spriteClicked\">\n  <field name=\"CONDITION\">\"when\"</field>\n  <value name=\"SPRITE\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"face_croissant_1\"</field>\n    </block>\n  </value>\n  <next>\n    <block type=\"gamelab_addBehaviorSimple\">\n      <value name=\"SPRITE\">\n        <block type=\"gamelab_clickedSpritePointer\"></block>\n      </value>\n      <value name=\"BEHAVIOR\">\n        <block type=\"gamelab_behavior_get\">\n          <mutation></mutation>\n          <field name=\"VAR\" id=\"spinning right\">spinning right</field>\n        </block>\n      </value>\n    </block>\n  </next>\n</block></xml>"; },
  changeSpriteBehaviorsWhenTouch: function(d) { return "A sprite needs to change behavior when two sprites touch."; },
  changeVariableBlock: function(d) { return "Use the `change by` block to change the value stored in your variable. This block should go under an event block. \n<xml><block type=\"math_change\">\n      <title name=\"VAR\">count</title>\n      <value name=\"DELTA\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n    </block></xml>"; },
  chatbotAddPrompt: function(d) { return "Your next step is to add a prompt. The question is what you want the chatbot to ask. You can rename the variable to something that will help you remember what information is being stored. \n <xml><block type=\"gamelab_setPrompt\"><value name=\"QUESTION\"><block type=\"text\" can_disconnect_from_parent=\"false\"><title name=\"TEXT\">What is your name?</title></block></value><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">name</title></block></value></block></xml>"; },
  chatbotAddtext: function(d) { return "Now that your prompt is setup, you can use print blocks to have the chatbot respond to the user: \n <xml><block type=\"gamelab_printText\"><value name=\"TEXT\"><block type=\"text\"><title name=\"TEXT\"></title></block></value></block></xml>"; },
  chatbotAnswerPrompt: function(d) { return "Don't forget to type something in your prompt. What should the user say to answer the chatbot's question?"; },
  chatbotExplore: function(d) { return "You've completed the requirements for the project, but keep going if you can. Make the chatbot ask additional questions or get creative with behaviors, backgrounds, and sounds. Click \"Keep Playing\" to make changes to your code and run it again. Press \"Continue\" to move on and finish your project."; },
  chatbotNoBehavior: function(d) { return "Your chatbot is working. If your prompts are working the way you wanted, you can give your sprites behaviors to bring your project to life. Try using different behaviors with events to make your project more interactive."; },
  chatbotNoSprites: function(d) { return "Your chatbot is working. If your prompts are working the way you wanted, you can start adding sprites to your project. Add a robot to represent the chatbot, or choose anything else."; },
  chatbotPrintVariable: function(d) { return "It seems like the chatbot is responding, but it didn't print what you typed into the prompt. Make sure the right **variable** label is connected to your `print` block."; },
  chatbotPrintWhenAnswered: function(d) { return "Right now you are only printing text once. Make sure a `print` block is under a `when answered` block. This will make it seem like the chatbot is waiting for you to answer before responding. \n <xml><block type=\"gamelab_whenPromptAnswered\"><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">name</title></block></value></block></xml>"; },
  chatbotTitleVariable: function(d) { return "It looks like you added a title screen to your program, but it didn't include text from the prompt."; },
  chooseSound: function(d) { return "You need to choose a sound from the drop-down menu. \n<xml><block type=\"gamelab_playSound\"><title name=\"SOUND\">Choose</title></block></xml>"; },
  clickAllSprites: function(d) { return "Make sure to click on each sprite after pressing *\"Run\"*."; },
  clickAnySprite: function(d) { return "Make sure to click on any sprite after pressing *\"Run\"*."; },
  clickButNoEvent: function(d) { return "You clicked a sprite but your code didn't detect the event. Make sure you have a `when clicked` event block and that you have chosen the correct sprite costume.\n<xml><block type=\"gamelab_spriteClicked\">\n  <field name=\"CONDITION\">\"when\"</field>\n  <value name=\"SPRITE\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"spacebattle_12\"</field>\n    </block>\n  </value>\n</block></xml>"; },
  clickButNoPrint: function(d) { return "You clicked a sprite but no text was printed. Add a `print` block under your `when clicked` event block."; },
  clickButNoSay: function(d) { return "You clicked a sprite but the sprite didn't say anything. Add a `say` block under your `when clicked` event block. \n<xml><block type=\"gamelab_spriteSay\"><title name=\"SPEECH\">Hello, world!</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></value></block></xml>"; },
  clickButNoSpeech: function(d) { return "You clicked a sprite but none of the sprites said anything. Add the `say` block under your `when clicked` event block. \n<xml><block type=\"gamelab_spriteSay\"><title name=\"SPEECH\">Hello, world!</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></value></block></xml>"; },
  clicked: function(d) { return "clicked"; },
  clickedSprite: function(d) { return "clicked sprite"; },
  clickNewSprite: function(d) { return "Make sure you click on your new sprite and that it also has a `when clicked` event block in your workspace."; },
  cloudDidntMove: function(d) { return "The cloud sprite didn't move. Try a different behavior."; },
  cloudOnlyMovedY: function(d) { return "The cloud moved up and down but not left and right. Try a different behavior."; },
  colorChangedBeforeKeyPress: function(d) { return "Your sprite changed color at the wrong time. Move the `change color` block under a `when key pressed` block."; },
  createAtLeastThreeSprites: function(d) { return "You need to make more sprites. Make at least three sprites under the `when run` block."; },
  createAtLeastTwoSprites: function(d) { return "You need to have two sprites. Make two sprites under the `when run` block."; },
  createDraggableSprite: function(d) { return "Your pet's food sprite needs to begin the `being draggable` behavior. \n <xml><block type=\"gamelab_addBehaviorSimple\"><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"face_carrot_1\"</title></block></value><value name=\"BEHAVIOR\"><block type=\"gamelab_draggable\"></block></value></block></xml>"; },
  createNewSprite: function(d) { return "Don't forget to make a new sprite."; },
  createNotDraggableSPrite: function(d) { return "Only the food sprite should be draggable. Remove the behavior from your pet."; },
  createTwoDraggableSprites: function(d) { return "Your pet's food and friend sprite need to begin the `being draggable` behavior."; },
  createVariable: function(d) { return "You need to set a variable. \n<xml>\n<block type=\"variables_set\">\n    <title name=\"VAR\">counter</title>\n    <value name=\"VALUE\">\n      <block type=\"math_number\">\n        <title name=\"NUM\">0</title>\n      </block>\n    </value>\n  </block>\n  </xml>"; },
  "cscAdaptationsAddAnotherBehavior ": function(d) { return "Make sure to add another <code style=\"color:black; background-color:#5ED5DD\">sprite begins</code> block."; },
  cscAdaptationsAddAnotherBehaviorBeforeNewEvent: function(d) { return "Make sure you have two behaviors for your sprite before adding the new <code style=\"color:black; background-color:#6AF36C\">when right pressed</code> event block."; },
  cscAdaptationsAddBeginsTraveling: function(d) { return "Make sure you add a <code style=\"color:black; background-color:#5ED5DD\">sprite begins traveling</code> block to your code."; },
  cscAdaptationsAllSpritesTravel: function(d) { return "Make sure you remove the single elephant sprite in the <code style=\"color:black; background-color:#5ED5DD\">sprite begins traveling</code> block and replace it with the <code style=\"color:black; background-color:#F79EA5\">all sprites</code> block"; },
  cscAdaptationsBuffaloCostume: function(d) { return "Make sure to select the buffalo costume in your behavior block."; },
  cscAdaptationsBugStopsBehavior: function(d) { return "Your sprite didn’t stop any behaviors."; },
  cscAdaptationsChangeBehaviorType: function(d) { return "Choose a different <code style=\"color:black; background-color:#6AF36C\">behavior</code> for your sprite."; },
  cscAdaptationsChangeFirefliesCostume: function(d) { return "Make sure the fireflies change costume when the down arrow key is pressed."; },
  cscAdaptationsChangeGiraffeCostume: function(d) { return "Make sure the giraffe sprite changes costume when the up arrow key is pressed."; },
  cscAdaptationsChangeOctopusCostume: function(d) { return "Make sure the octopus sprite changes costume when the event is triggered. \n<xml><block type=\"gamelab_checkTouching\"><field name=\"CONDITION\">\"when\"</field><value name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><field name=\"ANIMATION\">\"octopus_red\"</field></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><field name=\"ANIMATION\">\"underseadeco_34\"</field></block></value><next><block type=\"gamelab_setAnimation\"><field name=\"ANIMATION\">\"octopus_green\"</field><value name=\"THIS\"><block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\"><field name=\"ANIMATION\">\"octopus_red\"</field></block></value></block></next></block></xml>"; },
  cscAdaptationsChangeSpriteBehaviorWhenClicked: function(d) { return "Make sure you click your sprite to change its behavior. \n \n<xml><block type=\"gamelab_spriteClicked\"><field name=\"CONDITION\">\"when\"</field>  <value name=\"SPRITE\"> <block type=\"gamelab_allSpritesWithAnimation\">  <field name=\"ANIMATION\">\"ladybug2\"</field> </block>  </value>  <next> <block type=\"adaptations_toggleBehaviorSimple\">  <field name=\"TOGGLE\">\"stops\"</field>  <value name=\"SPRITE\"> <block type=\"gamelab_allSpritesWithAnimation\"> <field name=\"ANIMATION\">\"ladybug2\"</field>  </block>  </value>  <value name=\"BEHAVIOR\">  <block type=\"adaptations_adaptationBehaviors\"> <field name=\"BEHAVIOR\">new Behavior(spinning_right, [])</field>  </block>  </value>  </block>  </next></block></xml>"; },
  cscAdaptationsDaytimeFireflies: function(d) { return "Make sure to set the firefly sprites to the correct costume at the beginning of the scene."; },
  cscAdaptationsDown: function(d) { return "Make sure you have the `when down pressed` event block in your workspace. Press the down arrow key to make the fireflies light up."; },
  cscAdaptationsEditDanceActions: function(d) { return "You need to click \"edit\" on the dance behavior and then add 2 or 3 \"Action\" blocks of your choice to the dance behavior."; },
  cscAdaptationsEditFlyingBlockEast: function(d) { return "Try clicking the \"edit\" on the flying behavior to make the bird fly East."; },
  cscAdaptationsEditFlyingBlockSpeed: function(d) { return "Try clicking the \"edit\" on the flying behavior to make the falcon sprite fly faster."; },
  cscAdaptationsEditSpinRightAll: function(d) { return "Try clicking on the \"edit\" on the spinning right behavior. This is where you will remove the single urchin sprite and replace it with an <code style=\"color:black; background-color:#F79EA5\">all sprites</code> block."; },
  cscAdaptationsMatchBackgroundSprite: function(d) { return "Make sure your background and sprite costume match so the bunny blends into its environment."; },
  cscAdaptationsMigrateNorthWhenUpPressed: function(d) { return "Make sure you add a behavior to make the butterflies migrate north when the up key is pressed."; },
  cscAdaptationsMigrateSouthWhenDownPressed: function(d) { return "Make sure you add a behavior to make the butterflies migrate south when the down key is pressed."; },
  cscAdaptationsMissingFireflies: function(d) { return "Make sure to have the fireflies appear at the beginning of the scene."; },
  cscAdaptationsMissingGiraffe: function(d) { return "Make sure to have a giraffe sprite appear at the beginning of the scene."; },
  cscAdaptationsMissingOctopus: function(d) { return "Make sure to have an octopus sprite appear at the beginning of the scene."; },
  cscAdaptationsMoveOctopusToPlant: function(d) { return "Don't forget to use the arrow keys to move your octopus to touch the plant so that it changes costume to blend in."; },
  cscAdaptationsNeedWhenClicked: function(d) { return "It looks like you added a behavior but forgot to add a <code style=\"color:black; background-color:#6AF36C\">when sprite clicked</code> block first. Make sure to add the behavior block after the event block."; },
  cscAdaptationsNight: function(d) { return "Make sure to add a nighttime background under the <code style=\"color:black; background-color:#6AF36C\">when arrow pressed</code> block."; },
  cscAdaptationsOctopusNoBehavior: function(d) { return "Your octopus sprite needs a `moving with arrow keys` behavior."; },
  cscAdaptationsOctopusPlantColor: function(d) { return "Make sure your octopus costume changes to the same color as the plant it touches."; },
  cscAdaptationsOctopusTouchNoCostumeChange: function(d) { return "Your octopus sprite touched a plant but its costume didn't change."; },
  cscAdaptationsOctopusTouchPlant: function(d) { return "Make sure the octopus sprite touches a plant."; },
  cscAdaptationsOnlyOneDanceAction: function(d) { return "Make sure to add 2 different actions to your dance behavior."; },
  cscAdaptationsRightArrowKey: function(d) { return "Make sure to press an arrow key after pressing *\"Run\"*. You can click the orange buttons under the play area or press the keys on your keyboard."; },
  cscAdaptationsSetBackground: function(d) { return "Make sure to set a background."; },
  cscAdaptationsSetBehavior: function(d) { return "Make sure you set the sprite's behavior after setting the sprite's size."; },
  cscAdaptationsSetFastSpeed: function(d) { return "Make sure you set the cheetah sprite speed to fast."; },
  cscAdaptationsSetSlowSpeed: function(d) { return "Make sure you set the turtle sprite speed to slow."; },
  cscAdaptationsSetSpriteSize: function(d) { return "Make sure you set the sprite size under the new  <code style=\"color:black; background-color:#6AF36C\">when fish created</code> event."; },
  cscAdaptationsShortGiraffe: function(d) { return "Make sure your sprite costume is set to the short giraffe under `when run`."; },
  cscAdaptationsSize: function(d) { return "Use a `set size` block to resize your sprite. \n \n<xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"elephant_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">150</title></block></value></block></xml>"; },
  cscAdaptationsTooManyGiraffes: function(d) { return "Make sure to have only one giraffe sprite appear at the beginning of the scene."; },
  cscAdaptationsTooManyOctopuses: function(d) { return "Make sure to have only one octopus sprite appear at the beginning of the scene."; },
  cscAdaptationsUp: function(d) { return "Press the up arrow key to show the adaptation."; },
  cscAdaptationsUpAndEvent: function(d) { return "Make sure you have the `when up pressed` event block in your workspace. Press the up arrow key to show the adaptation."; },
  cscAdaptationsUpDownArrowKey: function(d) { return "Make sure to press the Up and Down arrow keys after pressing *\"Run\"*. You can click the orange buttons under the play area or press the keys on your keyboard."; },
  cscAdaptationsWhenRightPressed: function(d) { return "Make sure to add the  <code style=\"color:black; background-color:#6AF36C\">when right pressed</code> block with a new behavior for the sprite."; },
  cscAdaptationsWhenTouchEvent: function(d) { return "Make sure to add a `when touches` block for your sprites that will touch.\n<xml>\n<block type=\"gamelab_checkTouching\">\n  <field name=\"CONDITION\">\"when\"</field>\n  <value name=\"SPRITE1\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"octopus_red\"</field>\n    </block>\n  </value>\n  <value name=\"SPRITE2\">\n    <block type=\"gamelab_allSpritesWithAnimation\" can_disconnect_from_parent=\"false\">\n      <field name=\"ANIMATION\">\"underseadeco_34\"</field>\n    </block>\n  </value>\n</block>\n</xml>"; },
  cscBookcoverAddEventBlock: function(d) { return "Add a 'when up arrow clicked' event block"; },
  cscBookcoverAddOnclickBlock: function(d) { return "Be sure to add an event block for when the sprite is clicked."; },
  cscBookcoverChangeSize: function(d) { return "Both your sprites are the same size.\nMake sure to use a `set sprite size` block to change one of their sizes."; },
  cscBookcoverClickNoSpeech: function(d) { return "You clicked on Hank, but he's not saying anything.\nUse the `sprite say` block to have your two sprites talk to each other."; },
  cscBookcoverClickUpArrowKey: function(d) { return "You need to click the up arrow key!"; },
  cscBookcoverMatchSpriteSpeech: function(d) { return "Make sure all your sprite costumes match."; },
  cscBookcoverMissingPrintInPromptEvent: function(d) { return "You answered the prompt, but nothing printed to the screen.\nMake sure to add a `print` block under the `when prompt answered` event block"; },
  cscBookcoverMissingPrompt: function(d) { return "You clicked a sprite, but it didn't have a prompt.\nYou need to add a prompt block to your workspace."; },
  cscBookcoverNoAuthor: function(d) { return "Remember to use the `set subheading` block and add the author for your book cover."; },
  cscBookcoverNoClick: function(d) { return "You need to click on the sprite in order to see what it says."; },
  cscBookcoverNoPromptAnswered: function(d) { return "Make sure to click the sprite and answer the prompt to see what happens."; },
  cscBookcoverNoTitle: function(d) { return "Remember to use the `set heading` block and add the title of your book."; },
  cscBookcoverPressUpArrow: function(d) { return "You need to press the up arrow key to print out your summary."; },
  cscBookcoverPrintAfterUp: function(d) { return "Your sprite didn't say anything when you pressed the up arrow. \nMake sure to add a `print` block under the `when up pressed` event block."; },
  cscBookcoverPrintNotInEvent: function(d) { return "You added a print block to your code, but you didn't attach it to an event block.\nMake sure the print block is attached under a `when prompt answered` event block."; },
  cscBookcoverPromptNotInEvent: function(d) { return "You added a prompt block to your code, but you didn't attach it to an event block.\nMake sure the prompt block is attached under a `when sprite clicked` event block."; },
  cscBookcoverRemovedSprite: function(d) { return "You may have accidentally removed one of the sprites from the screen.\nUse a `make new sprite` block to add it back."; },
  cscBookcoverSameCostume: function(d) { return "You created another sprite, but gave it the same costume. Use the costume dropdown to change the sprite costume to something else!"; },
  cscBookcoverSecondSprite: function(d) { return "You still only have one sprite.\nUse a `make new sprite` block to create a new sprite for them to talk to."; },
  cscBookcoverSecondSpriteNoSpeech: function(d) { return "You created another sprite, but it's not saying anything.\nUse the `sprite say` block to have your two sprites talk to each other."; },
  cscBookcoverUpAndEvent: function(d) { return "Make sure you have the `when up pressed` event block in your workspace. Press the up arrow key to print out your summary."; },
  cscEcosystemFishingSeasonBehavior: function(d) { return "The boat's behavior didn't change for fishing season."; },
  cscEcosystemsBoatCatchFish: function(d) { return "Make sure to code the boat to catch the fish."; },
  cscEcosystemsBoatInFishingZone: function(d) { return "Your boat should move within the fishing zone."; },
  cscEcosystemsCatchSpriteWhenTouch: function(d) { return "The boat needs to catch the fish."; },
  cscEcosystemsChangeBackground: function(d) { return "The background didn't change to fishing season."; },
  cscEcosystemsEatSpriteWhenTouch: function(d) { return "The fish needs to eat the algae."; },
  cscEcosystemsFishEatAlgae: function(d) { return "Make sure to code the fish to eat the algae."; },
  cscEcosystemsFishingLimitIsFive: function(d) { return "You need to set the fishing limit to 5."; },
  cscEcosystemsFrogs: function(d) { return "It looks like there are still not any frogs. Change the number on `make new frog sprites` to something more than 0."; },
  cscEcosystemsIfJustRightAlgae: function(d) { return "Make sure to add a conditional block to your code. If there is the right amount of algae then the sick coral heals."; },
  cscEcosystemsIfTooLittleAlgae: function(d) { return "Make sure to add a conditional block to your code. If there is too little algae then the fish leave the area."; },
  cscEcosystemsIfTooMuchAlgae: function(d) { return "Make sure to add a conditional block to your code. If there is too much algae then the healthy coral turns sick."; },
  cscEcosystemsIncreaseFishCaught: function(d) { return "You need to change the `fishCaught` variable by 1."; },
  cscEcosystemsIncreaseFishCaughtByOne: function(d) { return "Each time the boat catches a fish, the number of fish should increase by exactly 1."; },
  cscEcosystemsNoFishingSeasonBehavior: function(d) { return "The boat's behavior wasn't changed."; },
  cscEcosystemsPolarBear: function(d) { return "It looks like the polar bear is still too small. Change the number on `set bear size` to something more than 30."; },
  cscEcosystemsReachedFishingLimit: function(d) { return "When the boat reaches its fishing limit it should stop catching fish."; },
  cscEcosystemsSayFishCaught: function(d) { return "The boat doesn't say how many fish it has caught."; },
  cscEcosystemsSetFishCaught: function(d) { return "You're missing the `fishCaught` variable."; },
  cscEcosystemsSetFishCaughtToZero: function(d) { return "At the start of your code, the number of fish caught should be set to 0."; },
  cscEcosystemsSpeed: function(d) { return "It looks like the rabbits are not moving. Change the number on `set bunny speed` to something more than 0."; },
  cscEcosystemsTooFewParrots: function(d) { return "The ecosystem needs least one parrot."; },
  cscEcosystemsTooMany: function(d) { return "It looks like there are still too many parrots."; },
  cscFunctionsClickNoSay: function(d) { return "You clicked a sprite, but it didn't say anything yet.\nUse the `sprite say` block to have your sprite say something"; },
  cscFunctionsClickSprite: function(d) { return "Make sure to click the sprite to see what the function does!"; },
  cscFunctionsNoFunctionBlock: function(d) { return "Make sure to add a function block to your code!"; },
  cscFunctionsNotInEvent: function(d) { return "You added a function block to your code, but not to your event.\nMake sure to add your function block under the `when sprite clicked` event"; },
  cscLandmarkAddAnotherSprite: function(d) { return "You're missing another landmark. Use a new sprite block with a different costume than the first."; },
  cscLandmarkBackgroundStoryteller: function(d) { return "Make sure to change the background when you visit a storyteller."; },
  cscLandmarkBehavior: function(d) { return "Use a behavior to make your guide move with the arrow keys."; },
  cscLandmarkChangeCostume: function(d) { return "Use a new sprite block with a different costume than the first."; },
  cscLandmarkGoldenGateBridge: function(d) { return "Make sure one of your sprites is the Golden Gate Bridge."; },
  cscLandmarkGoldenGateBridgeLeft: function(d) { return "The Golden Gate Bridge is in the wrong place - it should be in California on the left side of the map."; },
  cscLandmarkMissingEvent: function(d) { return "Make sure to add in your event block and say block. Then use the arrow keys to move the tour guide to the landmarks."; },
  cscLandmarkMostRecent: function(d) { return "Move your character so they touch the most recent landmark."; },
  cscLandmarkMoveAllSprites: function(d) { return "Make sure to move all your sprites to a new location! Use the pin on the location block to move your sprite. <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":200,\"y\":200}</title></block></xml>"; },
  cscLandmarkStatueOfLiberty: function(d) { return "Make sure one of your sprites is the Statue of Liberty."; },
  cscLandmarkStatueOfLibertyUpperRight: function(d) { return "The Statue of Liberty is in the wrong place - it should be in New York in the upper-right corner of the map."; },
  cscLandmarkStorytellerMissingSay: function(d) { return "Make sure the storyteller says something when you visit them."; },
  cscLandmarkThreeSprites: function(d) { return "Make sure you have at least 3 sprites in your scene. You can use the `create sprite` block to make new sprites."; },
  cscLandmarkTouchAllSprites: function(d) { return "Use the arrow keys to move the tour guide to both of the landmarks."; },
  cscLandmarkTouchButNoSpeech: function(d) { return "It looks like your sprite reached a landmark, but now it needs to say something! Add a speech block to your event to make your sprite says something."; },
  cscLandmarkVisitAllStorytellers: function(d) { return "Make sure to visit all 3 storytellers and to hear what they have to say."; },
  cscParticlesCompleteAllChemTouches: function(d) { return "Make sure you go through all of the steps of this experiment: First, look at the particles of the lemon juice under the microscope, then cause the chemical change with the baking soda, and finally look at the particles of the new substance under the microscope"; },
  cscParticlesCompleteAllTouches: function(d) { return "Make sure you go through all of the steps of this experiment. First, look at the particles of the water under the microscope, then change the state of the water with the flame, and finally look at the particles of the “empty” glass under the microscope"; },
  cscParticlesIncorrectMatter: function(d) { return "Make sure you selected the correct state of matter for both particles in your new substance."; },
  cscParticlesNoChangedSubstanceToMicroscope: function(d) { return "It looks like you have added code but still need to test it by changing the lemon juice and then dragging the changed substance over to the microscocpe"; },
  cscParticlesNoEmptyGlassToMicroscope: function(d) { return "It looks like you have added code but still need to test it by heating the glass of water and then dragging the \"empty\" glass over to the microscocpe"; },
  cscParticlesNoLabSetupBlock: function(d) { return "Make sure you add the LabSetup block to your program."; },
  cscParticlesNoLemonJuiceToMicroscope: function(d) { return "It looks like you have added code but still need to test it by dragging the glass of lemon juice over to the microscope."; },
  cscParticlesNoParticleBlockOnEvent: function(d) { return "It looks like you added an event but still need to add the particle behavior to this event."; },
  cscParticlesNoTouchWaterToMicroscope: function(d) { return "It looks like you have added code but still need to test it by dragging the glass of water over to the microscope."; },
  cscParticlesWrongMatterType: function(d) { return "Make sure you selected the correct state of matter!"; },
  debugBehaviors: function(d) { return "You have a mistake related to behaviors."; },
  debugEvents: function(d) { return "You have a mistake related to events."; },
  debugGroups: function(d) { return "You have a mistake related to groups of sprites."; },
  debugMovement: function(d) { return "The sprite didn't move."; },
  debugProps: function(d) { return "You have a mistake related to sprite properties."; },
  debugSprites: function(d) { return "You have a mistake related to sprites."; },
  debugVariables: function(d) { return "You have a mistake related to variables."; },
  didntMoveDown: function(d) { return "Your sprite did not move down."; },
  didntMoveLeft: function(d) { return "Your sprite did not move left."; },
  didntMoveRight: function(d) { return "Your sprite did not move right."; },
  didntMoveUp: function(d) { return "Your sprite did not move up."; },
  didntPressKey: function(d) { return "Make sure to press an arrow key after pressing *\"Run\"*. You can click the orange buttons under the play area or press the keys on your keyboard."; },
  eventNotDetected: function(d) { return "The event wasn't detected. Make sure you have the correct event blocks in your workspace and that you have chosen the correct *costume* in each block of code. \n <xml><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></xml>"; },
  eventsOneChange: function(d) { return "Your sprite changed, but only once. Test your program by pressing the key a few times, and make sure to use the correct block. \n <xml><block type=\"gamelab_changePropBy\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"creature_10_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">10</title></block></value></block></xml>"; },
  eventsWrongBehaviors: function(d) { return "Your sprite should have exactly 3 behaviors. Try moving the `stops everything` block to a different place in your code."; },
  foodNotTouchPet: function(d) { return "Drag your food sprite so it touches your pet sprite."; },
  genericBonusSuccess: function(d) { return "Great job! You've finished the level, including the extra challenge!"; },
  genericExplore: function(d) { return "Good! Click \"Keep Playing\" to make changes to your code and run it again. Press \"Continue\" when you are ready for the next challenge."; },
  genericReplay: function(d) { return "Make sure to replay your program multiple times before continuing."; },
  genericSuccess: function(d) { return "You've finished the level! Press Continue to go on."; },
  growAndShrink: function(d) { return "Your sprite needs to shrink and grow."; },
  haikuBlock: function(d) { return "The haiku didn't show up. If you have already added the block, check the variable labels in your code carefully and make sure all prompts were answered."; },
  hideTitleScreen: function(d) { return "You added a title screen but it never went away. Use the `hide title screen` block under an event block, like `at 3 seconds` or `when up pressed`."; },
  keyPressButNoEvent: function(d) { return "Make sure this block is in your workspace: \n<XML><block type=\"gamelab_keyPressed\"><title name=\"CONDITION\">\"when\"</title><title name=\"KEY\">\"up\"</title></block></XML>"; },
  madlibAddPrompt: function(d) { return "Your next step is to add a prompt. For example, you can can ask for an \"object\" or an \"adjective\". Rename the variable to something that will help you remember what information is being stored. \n <xml><block type=\"gamelab_setPrompt\"><value name=\"QUESTION\"><block type=\"text\" can_disconnect_from_parent=\"false\"><title name=\"TEXT\">Enter a food:</title></block></value><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">food</title></block></value></block></xml>"; },
  madlibAddtext: function(d) { return "Now that your prompt is setup, you can use print blocks to have the chatbot respond to the user: \n <xml><block type=\"gamelab_printText\"><value name=\"TEXT\"><block type=\"text\"><title name=\"TEXT\"></title></block></value></block></xml>"; },
  madlibAnswerPrompt: function(d) { return "Don't forget to type something into your prompt."; },
  madlibExplore: function(d) { return "You've completed the requirements for the project, but keep going if you can. Ask the user additional questions or get creative with behaviors, backgrounds, and sounds. Click \"Keep Playing\" to make changes to your code and run it again. Press \"Continue\" to move on and finish your project."; },
  madlibNoBehavior: function(d) { return "Your prompt is working. If it is doing what you expected, you can give your sprites behaviors to bring your project to life. Try using different behaviors with events to make your project more interactive."; },
  madlibNoSprites: function(d) { return "Your prompt is working. If it is doing what you expected, you can start adding sprites to your project. What is your story or poem about?"; },
  madlibPrintVariable: function(d) { return "It seems like the chatbot is responding, but it didn't print what you typed into the prompt. Make sure the right **variable** label is connected to your `print` block."; },
  madlibPrintWhenAnswered: function(d) { return "Right now you are only printing text once. Make sure a `print` block is under a `when answered` block. \n <xml><block type=\"gamelab_whenPromptAnswered\"><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">food</title></block></value></block></xml>"; },
  madlibTitleVariable: function(d) { return "It looks like you added a title screen to your program, but it didn't include text from the prompt."; },
  makeSpritesWithEvent: function(d) { return "You need to make more sprites when the event is detected."; },
  moreSprites: function(d) { return "You need to make more sprites."; },
  moveAndSpeak: function(d) { return "Make sure the speech block is connected under the `when up pressed` event block."; },
  moveBothWays: function(d) { return "Your sprite should move one way, and then the other."; },
  moveOnlyClickedSpriteWithBehavior: function(d) { return "All of the sprites moved instead of just the one that was clicked. Try using the `clicked sprite` block with a `sprite begins` block. Make sure to choose a behavior that will make the sprite move!"; },
  moveSpriteByDrag: function(d) { return "Your code looks great! To drag your sprite, click on it while the program runs."; },
  moveSpriteLocation: function(d) { return "Your sprites are in the same location. Move one of your sprites using the `location` block. \n<xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":200,\"y\":200}</title></block></xml>"; },
  "new": function(d) { return "new"; },
  newSprite: function(d) { return "new sprite"; },
  noBehavior: function(d) { return "Your sprite needs a behavior."; },
  noNewBehavior: function(d) { return "Your sprite didn't begin a new behavior."; },
  noPropChangeKeyPressed: function(d) { return "You pressed a key but the sprite didn't change. Make sure the `change size` block is under the event block."; },
  noSecondCostumeForCollector: function(d) { return "All of your sprites had the same costume. Make sure you aren't removing too many sprites."; },
  noSound: function(d) { return "You need to play a sound."; },
  noSpeech: function(d) { return "Your sprite didn't say anything yet."; },
  noSprites: function(d) { return "You need to make a sprite."; },
  noSpriteStoppedMoving: function(d) { return "None of your sprites have stopped moving. Connect a `stops everything` block under the new event block."; },
  noTitleScreen: function(d) { return "No title screen was displayed."; },
  noVarUse: function(d) { return "You need to use the variable from your prompt in the text you put on the screen."; },
  object: function(d) { return "object"; },
  objectSprite: function(d) { return "object sprite"; },
  outbreakChangeHealthy: function(d) { return "Try changing the number of monster sprites."; },
  outbreakChangeSize: function(d) { return "Try setting all sprites to a different size."; },
  outbreakClickHealthy: function(d) { return "No healthy monsters were wearing masks. Click the sprites after pressing *\"Run\"* and make sure you have the right code:\n <xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"healthy\"</title></block></value><next><block type=\"gamelab_setAnimation\"><title name=\"ANIMATION\">\"healthy_mask\"</title><value name=\"THIS\"><block type=\"gamelab_clickedSpritePointer\"></block></value></block></next></block></xml>"; },
  outbreakClickSick: function(d) { return "No sick monsters were wearing masks. Click the sprites after pressing *\"Run\"* and make sure you have the right code:\n <xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"sick\"</title></block></value><next><block type=\"gamelab_setAnimation\"><title name=\"ANIMATION\">\"sick_mask\"</title><value name=\"THIS\"><block type=\"gamelab_clickedSpritePointer\"></block></value></block></next></block></xml>"; },
  outbreakCostumeTab: function(d) { return "Click the `Costumes` tab above the play area to add a new sprite costume to your project."; },
  outbreakMakeHealthySprites: function(d) { return "Use this block to create your healthy monster sprites:\n <xml><block type=\"gamelab_makeNumSprites\"><title name=\"ANIMATION_NAME\">\"healthy\"</title><value name=\"NUM\"><block type=\"math_number\"><title name=\"NUM\">10</title></block></value></block></xml>"; },
  outbreakMakeUnhealthySprite: function(d) { return "Now create at least one sick monster sprite using\n <xml><block type=\"gamelab_makeNumSprites\"><title name=\"ANIMATION_NAME\">\"sick\"</title><value name=\"NUM\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></xml>"; },
  outbreakNoneRecovering: function(d) { return "Make sure to use a `sprite begins recovering` block *after* the `make new sprites` block:\n <xml><block type=\"gamelab_makeNumSprites\"><title name=\"ANIMATION_NAME\">\"sick\"</title><value name=\"NUM\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value><next><block type=\"gamelab_addBehaviorSimple\"><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"sick\"</title></block></value><value name=\"BEHAVIOR\"><block type=\"gamelab_behavior_get\"><mutation></mutation><title name=\"VAR\">recovering</title></block></value></block></next></block></xml>"; },
  outbreakOneRecovering: function(d) { return "Make sure to use a `sprite begins recovering` block below the `when touches` event:\n <xml><block type=\"gamelab_checkTouching\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"healthy\"</title></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"sick\"</title></block></value><next><block type=\"gamelab_setAnimation\"><title name=\"ANIMATION\">\"sick\"</title><value name=\"THIS\"><block type=\"gamelab_subjectSpritePointer\"></block></value><next><block type=\"gamelab_addBehaviorSimple\"><value name=\"SPRITE\"><block type=\"gamelab_subjectSpritePointer\"></block></value><value name=\"BEHAVIOR\"><block type=\"gamelab_behavior_get\"><mutation></mutation><title name=\"VAR\">recovering</title></block></value></block></next></block></next></block></xml>"; },
  outbreakRecovering: function(d) { return "Make sure to use a `sprite begins recovering` block below your `when touches` event blocks:\n <xml><block type=\"gamelab_addBehaviorSimple\"> <value name=\"SPRITE\"> <block type=\"gamelab_allSpritesWithAnimation\"> <title name=\"ANIMATION\">\"sick\"</title> </block> </value> <value name=\"BEHAVIOR\"> <block type=\"gamelab_behavior_get\"> <mutation></mutation> <title name=\"VAR\">recovering</title> </block> </value> </block></xml>"; },
  outbreakReplaySuccess: function(d) { return "Make sure to replay the simulation multiple times before continuing."; },
  outbreakSetSizeBlock: function(d) { return "Your sprites are too big. Set the size of the sprites to 50 (or less) with <xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_getAllSprites\"/></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">50</title></block></value></block></xml>.  This block goes *after* you make your sprites."; },
  outbreakSubjectPointer: function(d) { return "Fill the empty spot in the `change costume` block with the subject block.\n <xml><block type=\"gamelab_checkTouching\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"healthy\"</title></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"sick\"</title></block></value><next><block type=\"gamelab_setAnimation\"><title name=\"ANIMATION\">\"sick\"</title><value name=\"THIS\"><block type=\"gamelab_subjectSpritePointer\"></block></value></block></next></block></xml>"; },
  outbreakSuccess: function(d) { return "You've finished the level. When you are ready for the next challenge, press Continue."; },
  outbreakUseCostume: function(d) { return "Your new sprite costume didn't show up in your simulation. Click the lightbulb if you would like a hint."; },
  outbreakWander: function(d) { return "Your sprites need to move. Make all sprite begin wandering with <xml><block type=\"gamelab_addBehaviorSimple\" uservisible=\"false\"><value name=\"SPRITE\"><block type=\"gamelab_getAllSprites\"></block></value><value name=\"BEHAVIOR\"><block type=\"gamelab_behavior_get\"><mutation></mutation><title name=\"VAR\">wandering</title></block></value></block></xml>. This block goes *after* you make your sprites."; },
  petNotGrowOnTouch: function(d) { return "Your food and pet touched, but your pet did not grow. Add the `change size` block to the `when touching` event block for your food and pet."; },
  playerBehavior: function(d) { return "Give the sprite a behavior that matches the kind of movement you'd like to have. \n <xml><block type=\"gamelab_addBehaviorSimple\">\n  <value name=\"SPRITE\">\n    <block type=\"gamelab_allSpritesWithAnimation\">\n      <field name=\"ANIMATION\">\"bunny2_1\"</field>\n    </block>\n  </value>\n  <value name=\"BEHAVIOR\">\n    <block type=\"gamelab_playerBehaviors\">\n      <field name=\"BEHAVIOR\">new Behavior(moving_with_arrow_keys, [])</field>\n    </block>\n  </value>\n</block></xml>"; },
  printMoreText: function(d) { return "This is a good start. Keep adding more text to finish the level."; },
  printVariable: function(d) { return "You printed text at the right time, but it didn't print what you typed into the prompt. Make sure the right **variable** label is connected to your `print` block."; },
  printWhenAnswered: function(d) { return "You printed text, but not at the right time. Make sure the `print` block is under a `when answered` block: <xml><block type=\"gamelab_whenPromptAnswered\"><value name=\"VAR\"><block type=\"variables_get\" can_disconnect_from_parent=\"false\"><title name=\"VAR\">???</title></block></value></block></xml>"; },
  printWithEvent: function(d) { return "Make sure a `print` block is under an event block, like `at 3 seconds` or `when up pressed`."; },
  promptExplore: function(d) { return "Good! Did everything work how you expected? Press \"Keep Playing\" to make changes or \"Continue\" to move on."; },
  reinfFeedbackMsg: function(d) { return "You're finished! Click \"Continue\" to move on to the next level."; },
  removeOnlyClickedSprite: function(d) { return "All of the sprites were removed instead of just the one that was clicked. Try using the `clicked sprite` block with the `remove` block."; },
  removeOnlyTouchedSprite: function(d) { return "All of the sprites were removed instead of just the one that was touched. Try using the `subject sprite` or `object sprite` block with the `remove` block."; },
  removeSpriteWhenClicked: function(d) { return "A sprite needs to be removed when it is clicked."; },
  removeSpriteWhenTouch: function(d) { return "A sprite needs to be removed when another sprite touches it."; },
  renameVariable: function(d) { return "Choose a different label for your variable. Click on `???` and rename it to something else, like `count` or `score`."; },
  sayBlock: function(d) { return "Type something for the sprite to say in a `say` block. \n<xml><block type=\"gamelab_spriteSay\"><title name=\"SPEECH\">Hello, world!</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></value></block></xml>"; },
  sayBlockEmpty: function(d) { return "You used a `say` block, but the sprite didn't say anything. Make sure you include some text for the sprite to say."; },
  saySprite: function(d) { return "The sprite didn't say anything."; },
  sayUseClicked: function(d) { return "All of the sprites spoke instead of just the one that was clicked. Try using the `clicked sprite` block inside your event block."; },
  sayVariable: function(d) { return "Make the sprite say the value of your variable. Be sure the label matches your code. \n <xml><block type=\"gamelab_spriteSayTime\">\n    <value name=\"SPRITE\">\n      <block type=\"gamelab_allSpritesWithAnimation\">\n        <field name=\"ANIMATION\">\"purple bunny\"</field>\n      </block>\n    </value>\n    <value name=\"TEXT1\">\n      <block type=\"variables_get\">\n        <field name=\"VAR\">count</field>\n      </block>\n    </value>\n    <value name=\"NUM\">\n      <block type=\"math_number\">\n        <field name=\"NUM\">4</field>\n      </block>\n    </value>\n  </block></xml>"; },
  secondClickButNoPrint: function(d) { return "You clicked on more than one sprite but no text was printed. Add a `print` block under each `when clicked` event block."; },
  secondClickButNoSpeech: function(d) { return "You clicked on more than one sprite but one of your clicks didn't cause a sprite to say anything. Add a `say` block under each `when clicked` event. \n<xml><block type=\"gamelab_spriteSay\"><title name=\"SPEECH\">Hello, world!</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></value></block></xml>"; },
  setSecondSpriteSize: function(d) { return "Use a `set size` block to change the size of the sprite. Use a size other than 100. \n <xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"flower2_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">50</title></block></value></block></xml>"; },
  shareGame: function(d) { return "Share your game:"; },
  shipBadPosition: function(d) { return "Use the location block to move the ship closer to the top of the screen. <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":100,\"y\":275}</title></block></xml>"; },
  shipStayedInBounds: function(d) { return "Your sprite should move off of the screen. Try using a behavior like \"moving east\"."; },
  singleSpriteNotClicked: function(d) { return "Make sure that you click on a sprite and that you have the right events in your workspace. \n<xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title></block></xml>"; },
  spinBeforeClick: function(d) { return "Your sprite was spinning before you clicked on it. Make sure that your spin behavior is connected to this event block. \n<xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue alien\"</title></block></value></block></xml>"; },
  spinBothWays: function(d) { return "Your sprite needs to spin both left and right, at different times."; },
  spriteDidntRotate: function(d) { return "Your sprite did not spin. Try a different behavior"; },
  spritelabFeedbackAliensNotInLine: function(d) { return "Your three alien sprites need to be arranged in a horizontal line (within 50 pixels)."; },
  spritelabFeedbackAstronautMoveToCorner: function(d) { return "The astronaut sprite needs to move to one of the four corners."; },
  spritelabFeedbackBlueAlienBehavior: function(d) { return "Your blue alien needs to start a new behavior."; },
  spritelabFeedbackChangeBackgroundColor: function(d) { return "You need to change the background to something other than white."; },
  spritelabFeedbackClickSprite: function(d) { return "Make sure to click on your sprite after pressing *\"Run\"*."; },
  spritelabFeedbackClickSprites: function(d) { return "Make sure to click on your sprites after pressing *\"Run\"*."; },
  spritelabFeedbackCreateFishWithBehavior: function(d) { return "You need to make at least one fish sprite and give it a behavior."; },
  spritelabFeedbackCreateThreeAliens: function(d) { return "You need to create a blue alien, a pink alien, and a yellow alien."; },
  spritelabFeedbackCreateTwoDifferentSprites: function(d) { return "You need two sprites with different costumes."; },
  spritelabFeedbackCreateTwoSprites: function(d) { return "You need to create exactly two sprites."; },
  spritelabFeedbackDifferentStarRotation: function(d) { return "Sprites with both star costumes need to rotate the same amount."; },
  spriteLabFeedbackGiveFishBehavior: function(d) { return "You need to give your fish a behavior."; },
  spritelabFeedbackGiveSecondSpriteBehavior: function(d) { return "Your second sprite needs a behavior."; },
  spritelabFeedbackMoveFishLeftRight: function(d) { return "Your fish sprite needs to move left or right. Try changing its behavior."; },
  spritelabFeedbackMoveUpNotDown: function(d) { return "Your sprite needs to move up (north) instead of down (south)."; },
  spritelabFeedbackNeedAlienStopBehavior: function(d) { return "Your alien sprites need to stop all their behaviors."; },
  spritelabFeedbackNoAlienColor: function(d) { return "At least one of your aliens did not change color."; },
  spritelabFeedbackPinkAlienBehavior: function(d) { return "Your pink alien sprite did not start a behavior."; },
  spritelabFeedbackRobotFasterThanRover: function(d) { return "The robot reached the right side of the screen before the rover."; },
  spritelabFeedbackThreeSpritesWithCostumes: function(d) { return "You need to create three sprites with different costumes."; },
  spritelabFeedbackTwoSpritesWithCostumes: function(d) { return "Your two sprites need different costumes."; },
  spritelabFeedbackTwoSpritesWithCostumesAndBehaviors: function(d) { return "You need to create two sprites with different costumes that each have a behavior."; },
  spritelabFeedbackUseCostume: function(d) { return "You need to use at least one costume."; },
  spritelabFeedbackUseFishCostume: function(d) { return "You need to use at least one fish costume."; },
  spritelabFeedbackUseSpinningBehavior: function(d) { return "Your sprite needs to start spinning. Try changing its behavior."; },
  spritelabFeedbackYellowAlienBehavior: function(d) { return "The yellow alien did not start its behavior."; },
  spriteMovedTooSoon: function(d) { return "The sprite moved too soon. Try moving the behavior underneath a <xml><block type=\"gamelab_atTime\"><title name=\"UNIT\">\"seconds\"</title><value name=\"N\"><block type=\"math_number\"><title name=\"NUM\">8</title></block></value></block></xml> block."; },
  spriteNotClicked: function(d) { return "Make sure that you click on each sprite and that you have the right events in your workspace. \n<xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title></block></xml>"; },
  spriteNotClickedWithBlockXML: function(d) { return "Make sure that you click on the sprite and that you have the right event in your workspace. \n<xml><block type=\"gamelab_spriteClicked\"><title name=\"CONDITION\">\"when\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue alien\"</title></block></value></block></xml>"; },
  spriteSayDown: function(d) { return "Your sprite didn't say anything when you pressed the down arrow."; },
  spriteSayUp: function(d) { return "Your sprite didn't say anything when you pressed the up arrow."; },
  spritesNeedSameCostumes: function(d) { return "Make sure all sprites have the same costume."; },
  spritesNeedUniqueCostumes: function(d) { return "Make sure all sprites have different costumes."; },
  spritesNotDefaultSize: function(d) { return "Your sprites should only change size when they are clicked. Make sure the `change size` block is connected to a `when clicked` event block."; },
  spritesNotTouch: function(d) { return "Make sure your sprites touch at some point."; },
  startBehaviorWhenClicked: function(d) { return "Your new sprite needs to start a behavior when it is clicked."; },
  starterSprites: function(d) { return "It looks like you removed a sprite. You can add it back or reset your program using the Version History button below."; },
  startingSpritesShouldNotTouch: function(d) { return "To start, make sure none of your sprites are touching. Use the pin on the location block to give them different locations."; },
  startSpriteBehaviors: function(d) { return "Make sure your sprites have behaviors before 5 seconds. Do you need to click on your sprites to make them start?"; },
  strawberryUnchanged: function(d) { return "Use a `set size` block to make the strawberry sprites smaller. Use a size under 100. \n <xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"face_strawberry_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">50</title></block></value></block></xml>"; },
  subject: function(d) { return "subject"; },
  subjectSprite: function(d) { return "subject sprite"; },
  subtitleVariable: function(d) { return "The subtitle of your title screen didn't include text from the prompt."; },
  sunDidntRotate: function(d) { return "The sun sprite didn't spin. Try a different behavior."; },
  thirdClickButNoPrint: function(d) { return "You clicked on more than two sprites but no text was printed. Add a `print` block under each `when clicked` event block."; },
  thirdClickButNoSpeech: function(d) { return "You clicked on more than two sprites but one of your clicks didn't cause a sprite to say anything. Add a `say` block under each `when clicked` event block. \n<xml><block type=\"gamelab_spriteSay\"><title name=\"SPEECH\">Hello, world!</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"default\"</title></block></value></block></xml>"; },
  titleVariable: function(d) { return "Your title screen didn't include text from the prompt."; },
  tooManySprites: function(d) { return "You had too many sprites. Only create the sprites you need according to the instructions above."; },
  topLeft: function(d) { return "Move one of your sprites into the top left of the screen using <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":100,\"y\":300}</title></block></xml>"; },
  topRight: function(d) { return "Move one of your sprites into the top right of the screen using <xml><block type=\"gamelab_location_picker\"><title name=\"LOCATION\">{\"x\":300,\"y\":300}</title></block></xml>"; },
  useColorVariable: function(d) { return "Use the variable to set the background color when the prompt is answered."; },
  useSetpropBlock: function(d) { return "Use a `set size` block to resize your sprite. \n <xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"face_strawberry_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">50</title></block></value></block></xml>"; },
  useTwoAtTimeBlocks: function(d) { return "Your program should have two `at seconds` event blocks. The first event will be used to make more sprites and the second event will end the game.\n *To pass this level, try setting each event block to 10 seconds or fewer.*\n<xml><block type=\"gamelab_atTime\">\n  <field name=\"UNIT\">\"seconds\"</field>\n  <value name=\"N\">\n    <block type=\"math_number\">\n      <field name=\"NUM\">3</field>\n    </block>\n  </value>\n</block><block type=\"gamelab_atTime\">\n  <field name=\"UNIT\">\"seconds\"</field>\n  <value name=\"N\">\n    <block type=\"math_number\">\n      <field name=\"NUM\">10</field>\n    </block>\n  </value>\n</block></xml>"; },
  useTwoSetpropBlocks: function(d) { return "Use a `set size` block for each of your sprites. \n <xml><block type=\"gamelab_setProp\"><title name=\"PROPERTY\">\"scale\"</title><value name=\"SPRITE\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"flower2_1\"</title></block></value><value name=\"VAL\"><block type=\"math_number\"><title name=\"NUM\">50</title></block></value></block></xml>"; },
  whenToWhile: function(d) { return "Your sprite is moving in all directions, but not smoothly. Change `when` to `while` in each event block. \n <xml><block type=\"gamelab_keyPressed\"><title name=\"CONDITION\">while</title><title name=\"KEY\">???</title></block></xml>"; },
  workspaceAlertError: function(d) { return "Your program stopped because of a problem: " + d.error; },
  changeWandering: function(d) { return "Change the behavior to something new!"; },
  oneWanderingSprite: function(d) { return "Make sure at least one sprite has the wandering behavior."; },
  oneArrowKeysSprite: function(d) { return "Make sure at least one sprite has the behavior that makes it move with your arrow keys."; },
  soundTouch: function(d) { return "Make sure a sound plays when two sprites touch."; },
  touchCostume: function(d) { return "Make sure your sprite's costume changes when it touches another sprite."; },
  variableBubbles: function(d) { return "Make sure to display your variable on screen."; },
  variableSetValue: function(d) { return "You need to set the value of your variable."; },
  variableChangeValue: function(d) { return "The value of your variable didn't change."; },
  variableIncreaseValue: function(d) { return "The value of your variable didn't increase."; },
  gameDesignMissingDoEffectConditional: function(d) { return "Be sure to add a `do effect` block inside the condition `if score = 3`."; },
  gameDesignEffectInsideConditional: function(d) { return "The effect happened every time you clicked. Make sure to nest the `do effect` block inside an if block that checks for a changing score."; },
  variableBubblesTwo: function(d) { return "Make sure to display two variables on screen."; },
  variableSetValueTwo: function(d) { return "You need to set the value of both your variables."; },
  variableDecreaseValue: function(d) { return "The value of your variable didn't decrease."; },
  gameDesignPlayToWin: function(d) { return "Make sure to get all the collectibles in order to win."; },
  gameDesignSetSpriteType: function(d) { return "Make sure to set the sprite type to player or environment."; },
  gameDesignTouchEnvironment: function(d) { return "Try making your player bump into the environment around it."; },
  gameDesignNoPlayerSprite: function(d) { return "You need to make a player sprite."; },
  gameDesignEventNoJump: function(d) { return "Make sure your player jumps when you press a key."; },
  gameDesignMissingType: function(d) { return "You need to add another block so the monster can land on the green platforms:\n<xml><block xmlns=\"https://developers.google.com/blockly/xml\" type=\"GameDev_setGroup\">\n  <field name=\"GROUP\">\"walls\"</field>\n  <value name=\"SPRITE\">\n    <block type=\"gamelab_allSpritesWithAnimation\">\n      <field name=\"ANIMATION\">\"ground_grass\"</field>\n    </block>\n  </value>\n</block>\n</xml>"; },
  gameDesignNeedMoreCostumes: function(d) { return "You need to add at least 3 different `make new sprite` blocks in your program. Your program should have a player, environment, and collectibles."; },
  gameDesignMissingSpriteCostumes: function(d) { return "You need to add at least 3 sprites for the player to collect. Make sure  to not set them as player or environment."; },
  gameDesignWhenTouchingEvent: function(d) { return "Make sure to add a `when sprite touches` event block in your code. Then make your player touch the collectible sprites."; },
  gameDesignTouchEventSpriteNotRemoved: function(d) { return "Your player sprite touched the collectible but didn't remove it. Make sure to add a `remove object` block under your event."; },
  gameDesignPlayerTouchVariableNotChanged: function(d) { return "Your variable needs to increase when the player sprite touches a collectible item."; },
  gameDesignSetSpriteTypeToPlayer: function(d) { return "You need to set a sprite's type to player."; },
  gameDesignPressUp: function(d) { return "Make sure to press the up arrow key after pressing *\"Run\"*. You can click the orange buttons under the play area or press the keys on your keyboard."; }
};