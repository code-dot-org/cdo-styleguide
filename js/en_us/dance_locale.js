
(window.locales = window.locales || {}).dance_locale = {
  clickToRunDanceParty: function(d) { return "Click to run Dance Party"; },
  danceAiFeedbackAiBlockNoParameters: function(d) { return "⚠️ Choose three emojis for A.I. to generate the effect."; },
  danceAiFeedbackAiBlockInWorkspaceWithNoParameters: function(d) { return "⚠️ There is an <code style=\"color:white; background-color:#566064\">A.I. generate effect</code> block without emojis chosen. Choose three emojis for A.I. to generate the effect"; },
  danceAiFeedbackAiBlockNotConnectedSetup: function(d) { return "⚠️ Connect the <code style=\"color:white; background-color:#566064\">A.I. generate effect</code> block to the <code style=\"color:white; background-color:#FFBD46\">setup</code> block."; },
  danceAiFeedbackAiBlockNoParametersOnEvent: function(d) { return "⚠️ The effect didn't change after 2 measures. Choose three emojis for A.I. to generate the effect."; },
  danceAiFeedbackConnectPressUpArrowEvent: function(d) { return "⚠️ Press the up arrow ▲ button after pressing <code style=\"color:white; background-color:#FFBD46\">Run</code>."; },
  danceAiFeedbackCustomize: function(d) { return "⚠️ You need to change the effect A.I. generates. You can either regenerate the effect, customize the code A.I. writes, or start over with new emojis."; },
  danceAiFeedbackEffectChangeAfterMeasures: function(d) { return "⚠️ Connect the <code style=\"color:white; background-color:#566064\">A.I. generate effect</code> block to the <code style=\"color:white; background-color:#00bc3e\">at 2 Measures</code> event."; },
  danceAiFeedbackKeyPress: function(d) { return "⚠️ You pressed a key, but your dancer didn't do a new move."; },
  danceAiFeedbackKeyPressRightOrLeft: function(d) { return "⚠️ Make sure to press the right or left arrow while your dance is running."; },
  danceAiFeedbackMatchDancer: function(d) { return "⚠️ You must have the same dancer selected in the <code style=\"color:white; background-color:#b2353f\">make a new dancer</code> block and the <code style=\"color:white; background-color:#7435b2\">dancers do dance move</code> block."; },
  danceAiFeedbackNeedNewDancer: function(d) { return "⚠️ You need to make a dancer."; },
  danceAiFeedbackNewMove: function(d) { return "⚠️ You need to add a block to make the dancer do a new move."; },
  danceAiFeedbackNoAiBlock: function(d) { return "⚠️ Add the <code style=\"color:white; background-color:#566064\">A.I. generate effect</code> block to setup."; },
  danceAiFeedbackNoNewMove: function(d) { return "⚠️ Your dancer didn't do a new move. Keep trying!"; },
  danceAiFeedbackSequence: function(d) { return "⚠️ Check the order of your blocks. The <code style=\"color:white; background-color:#b2353f\">make a new dancer</code> block must be placed before the <code style=\"color:white; background-color:#7435b2\">dancers do dance move</code> block."; },
  danceAiModalHeading: function(d) { return "generate " + d.input + " effect"; },
  danceAiModalChooseEmoji: function(d) { return "Choose three emojis."; },
  danceAiModalGenerateButton: function(d) { return "Generate"; },
  danceAiModalFinding2: function(d) { return "A.I. is finding the best effect for your emojis."; },
  danceAiModalGenerating2: function(d) { return "A.I. thinks this is the best effect for your emojis."; },
  danceAiModalEffectButton: function(d) { return "Effect"; },
  danceAiModalEffect2: function(d) { return "A.I. thinks this is the best effect for your emojis and generated the code!"; },
  danceAiModalUseEffectButton: function(d) { return "Use effect"; },
  danceAiModalCodeButton: function(d) { return "Code"; },
  danceAiModalCode2: function(d) { return "A.I. generated this code to create the effect!"; },
  danceAiModalUseCodeButton: function(d) { return "Use code"; },
  danceAiModalStartOverButton: function(d) { return "Start over"; },
  danceAiModalExplanationButton: function(d) { return "Learn more"; },
  danceAiModalRegenerateButton: function(d) { return "Regenerate"; },
  danceAiModalExplanationFive: function(d) { return "Each emoji contributed to A.I.'s decision. Here are five possible effects and the calculations that A.I. made."; },
  danceAiModalExplanation2: function(d) { return "Each emoji contributed to A.I.'s decision.\nHere are possible effects and the calculations that A.I. made."; },
  danceAiModalBack: function(d) { return "Back"; },
  danceAiModalClose: function(d) { return "Close"; },
  danceAiModalBotAlt: function(d) { return "A.I."; },
  danceAiModalBotBeamAlt: function(d) { return "A.I. Beam"; },
  danceFeedbackDidntPress: function(d) { return "Make sure to press the arrows while your dance is running."; },
  danceFeedbackKeepCoding: function(d) { return "Keep coding! Something's not quite right yet."; },
  danceFeedbackKeyEvent: function(d) { return "Make sure you attach some code to the <xml></block><block type=\"Dancelab_whenKey\"><title name=\"KEY\">\"up\"</title></block></xml> block and press the key while your dance is running."; },
  danceFeedbackNeedBackup: function(d) { return "You need to create a group of backup dancers with the <xml><block type=\"Dancelab_makeNewDanceSpriteGroup\"><title name=\"N\">10</title><title name=\"COSTUME\">\"UNICORN\"</title><title name=\"LAYOUT\">\"circle\"</title></block></xml> block."; },
  danceFeedbackNeedDifferentDance: function(d) { return "You need to use a different dance."; },
  danceFeedbackNeedEveryTwoMeasures: function(d) { return "Make sure you are using the `every 2 measures` block"; },
  danceFeedbackNeedLead: function(d) { return "You also need to create one lead dancer with the <xml><block type=\"Dancelab_makeAnonymousDanceSprite\"><title name=\"COSTUME\">???</title><title name=\"LOCATION\">{x: 200, y: 200}</title></block></xml> block."; },
  danceFeedbackNeedMakeANewDancer: function(d) { return "Use the `make a new` block to create a second dancer."; },
  danceFeedbackNeedNewDancer: function(d) { return "You need to make a dancer."; },
  danceFeedbackNeedTwoDancers: function(d) { return "You need to make two dancers."; },
  danceFeedbackNoBackground: function(d) { return "You need to add a background effect."; },
  danceFeedbackNoDancers: function(d) { return "You have no dancers."; },
  danceFeedbackOnlyOneDancerMoved: function(d) { return "Only one of your dancers moved."; },
  danceFeedbackPressedKey: function(d) { return "You pressed a key, but your dancer didn't respond."; },
  danceFeedbackSetSize: function(d) { return "You need to change the size of at least one dancer after the music starts."; },
  danceFeedbackStartNewMove: function(d) { return "Your dancer wasn't doing a new move after the fourth measure."; },
  danceFeedbackTooManyDancers: function(d) { return "Be careful! If you put `make a new` block inside `every 2 measures`, you will create a lot of dancers."; },
  danceFeedbackUseSetSize: function(d) { return "Use the `set backup_dancer2 size` block to make that dancer smaller."; },
  danceFeedbackUseSetTint: function(d) { return "Use the `set tint` block to change a dancer's tint."; },
  danceFeedbackUseStartMapping: function(d) { return "Try adding the <xml><block type=\"Dancelab_startMapping\"><title name=\"SPRITE\">right_unicorn</title><title name=\"PROPERTY\">\"scale\"</title><title name=\"RANGE\">\"bass\"</title></block></xml> block to your program."; },
  dancePartyLoading: function(d) { return "Dance character dancing while Dance Party loads."; },
  danceSongNoLongerSupported: function(d) { return "Code.org has added new hit songs to Dance Party, but the original song chosen on this project is no longer supported by Code.org."; },
  measure: function(d) { return "Measure:"; }
};