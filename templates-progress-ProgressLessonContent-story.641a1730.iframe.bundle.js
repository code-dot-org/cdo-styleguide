/*! For license information please see templates-progress-ProgressLessonContent-story.641a1730.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8523],{"./.storybook/decorators.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{reduxStore:()=>reduxStore});var redux__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/redux/es/redux.js"),redux_thunk__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/redux-thunk/lib/index.js"),_cdo_apps_code_studio_isRtlRedux__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/code-studio/isRtlRedux.js"),_cdo_apps_code_studio_responsiveRedux__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/code-studio/responsiveRedux.js");const reduxStore=(reducers={},state={})=>(0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)((0,redux__WEBPACK_IMPORTED_MODULE_3__.combineReducers)({isRtl:_cdo_apps_code_studio_isRtlRedux__WEBPACK_IMPORTED_MODULE_1__.default,responsive:_cdo_apps_code_studio_responsiveRedux__WEBPACK_IMPORTED_MODULE_2__.default,...reducers}),state,(0,redux__WEBPACK_IMPORTED_MODULE_3__.applyMiddleware)(redux_thunk__WEBPACK_IMPORTED_MODULE_0__.default))},"./src/code-studio/isRtlRedux.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function locale(){var state=arguments.length>0&&void 0!==arguments[0]&&arguments[0],action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RTL)return action.isRtl;return state},exports.isRtlFromDOM=isRtlFromDOM,exports.setRtlFromDOM=exports.setRtl=void 0;var SET_RTL="isRtl/SET_RTL",setRtl=exports.setRtl=function setRtl(isRtl){return{type:SET_RTL,isRtl}};exports.setRtlFromDOM=function setRtlFromDOM(){return setRtl(isRtlFromDOM())};function isRtlFromDOM(){var head=document.getElementsByTagName("head")[0];if(head&&head.parentElement){var dir=head.parentElement.getAttribute("dir");return!(!dir||"rtl"!==dir.toLowerCase())}return!1}},"./src/code-studio/progressReduxSelectors.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.progressionsFromLevels=exports.nextLevelId=exports.levelsForLessonId=exports.levelsByLesson=exports.levelCount=exports.lessons=exports.lessonExtrasUrl=exports.isPerfect=exports.hasLockableLessons=exports.hasGroups=exports.groupedLessons=exports.getProgressLevelType=exports.getLevelPropertiesPath=exports.currentLevelIndex=exports.__testonly__=exports.ProgressLevelType=void 0;var _lodash=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/lodash/lodash.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_constants=__webpack_require__("./src/constants.js"),_activityUtils=__webpack_require__("./src/code-studio/activityUtils.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.hasLockableLessons=function hasLockableLessons(state){return state.lessons.some((function(lesson){return lesson.lockable}))},exports.hasGroups=function hasGroups(state){return Object.keys(groupedLessons(state)).length>1};var lessonFromLessonAtIndex=function lessonFromLessonAtIndex(state,lessonIndex){return _objectSpread(_objectSpread({},lessonFromLesson(state.lessons[lessonIndex])),{},{isFocusArea:state.focusAreaLessonIds.includes(state.lessons[lessonIndex].id)})},lessonFromLesson=function lessonFromLesson(lesson){return _lodash.default.pick(lesson,["name","id","lockable","lessonNumber","lessonStartUrl","lesson_plan_html_url","lesson_feedback_url","student_lesson_plan_html_url","description_student","description_teacher"])},peerReviewLesson=(exports.lessons=function lessons(state){return state.lessons.map((function(_,index){return lessonFromLessonAtIndex(state,index)}))},function peerReviewLesson(state){return _objectSpread(_objectSpread({},lessonFromLesson(state.peerReviewLessonInfo)),{},{id:-1,lockable:!1,isFocusArea:!1})}),peerReviewLevels=function peerReviewLevels(state){return state.peerReviewLessonInfo.levels.map((function(level,index){return _objectSpread(_objectSpread({},level),{},{id:(-1).toString(),isLocked:level.locked,status:level.status||_sharedConstants.LevelStatus.not_tried,levelNumber:index+1})}))},ProgressLevelType=exports.ProgressLevelType={SCRIPT_LEVEL:"script_level",LEVEL:"level"},getProgressLevelType=exports.getProgressLevelType=function getProgressLevelType(state){return state.progress.lessons?ProgressLevelType.SCRIPT_LEVEL:state.progress.currentLevelId?ProgressLevelType.LEVEL:void 0},levelWithProgress=(exports.getLevelPropertiesPath=function getLevelPropertiesPath(state){if(state.progress.lessons){var _state$progress$lesso,scriptName=state.progress.scriptName,lessonPosition=null===(_state$progress$lesso=state.progress.lessons)||void 0===_state$progress$lesso?void 0:_state$progress$lesso.find((function(lesson){return lesson.id===state.progress.currentLessonId})).relative_position,levelNumber=levelsForLessonId(state.progress,state.progress.currentLessonId).findIndex((function(level){return level.isCurrentLevel}))+1;return"/s/".concat(scriptName,"/lessons/").concat(lessonPosition,"/levels/").concat(levelNumber,"/level_properties")}if(null!==state.progress.currentLevelId){var levelId=state.progress.currentLevelId;return"/levels/".concat(levelId,"/level_properties")}},function levelWithProgress(_ref,level,isLockable){var _levelProgress,_level$ids,levelResults=_ref.levelResults,unitProgress=_ref.unitProgress,_ref$levelPairing=_ref.levelPairing,levelPairing=void 0===_ref$levelPairing?{}:_ref$levelPairing,currentLevelId=_ref.currentLevelId,normalizedLevel=(0,_progressHelpers.processedLevel)(level);level.ids&&(normalizedLevel.id=function bestResultLevelId(levelIds,progressData){if(1===levelIds.length)return levelIds[0];var attemptedIds=levelIds.filter((function(id){return progressData[id]}));if(0===attemptedIds.length)return levelIds[0];var bestId=attemptedIds[0],bestResult=progressData[bestId];return attemptedIds.forEach((function(id){var result=progressData[id];result>bestResult&&(bestId=id,bestResult=result)})),bestId}(level.ids,levelResults));var status=_sharedConstants.LevelStatus.not_tried,locked=isLockable,teacherFeedbackReviewState=null,levelProgress=unitProgress[normalizedLevel.id];null!==(_levelProgress=levelProgress)&&void 0!==_levelProgress&&_levelProgress.pages&&(levelProgress=levelProgress.pages[normalizedLevel.pageNumber-1]),levelProgress?(status=levelProgress.status,locked=levelProgress.locked,teacherFeedbackReviewState=levelProgress.teacherFeedbackReviewState):level.kind!==_sharedConstants.LevelKind.assessment&&(status=(0,_activityUtils.activityCssClass)(levelResults[normalizedLevel.id]));var isCurrent=normalizedLevel.id===currentLevelId||!(null===(_level$ids=level.ids)||void 0===_level$ids||!_level$ids.includes[currentLevelId]);return _objectSpread(_objectSpread({},normalizedLevel),{},{status,isCurrentLevel:isCurrent,paired:levelPairing[level.activeId],isLocked:locked,teacherFeedbackReviewState})}),levelsByLesson=exports.levelsByLesson=function levelsByLesson(_ref2){var lessons=_ref2.lessons,levelResults=_ref2.levelResults,unitProgress=_ref2.unitProgress,levelPairing=_ref2.levelPairing,currentLevelId=_ref2.currentLevelId;return lessons.map((function(lesson){return lesson.levels.map((function(level){var statusLevel=levelWithProgress({levelResults,unitProgress,levelPairing,currentLevelId},level,lesson.lockable);return statusLevel.sublevels&&(statusLevel.sublevels=level.sublevels.map((function(sublevel){return levelWithProgress({levelResults,unitProgress,levelPairing,currentLevelId},sublevel,lesson.lockable)}))),statusLevel}))}))},levelsForLessonId=exports.levelsForLessonId=function levelsForLessonId(state,lessonId){var _state$lessons,lesson=null===(_state$lessons=state.lessons)||void 0===_state$lessons?void 0:_state$lessons.find((function(lesson){return lesson.id===lessonId}));return null==lesson?void 0:lesson.levels.map((function(level){return levelWithProgress(state,level,lesson.lockable)}))},groupedLessons=(exports.currentLevelIndex=function currentLevelIndex(state){return getProgressLevelType(state)===ProgressLevelType.LEVEL?0:getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL?levelsForLessonId(state.progress,state.progress.currentLessonId).findIndex((function(level){return level.isCurrentLevel})):void 0},exports.nextLevelId=function nextLevelId(state){if(getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL){var levels=levelsForLessonId(state.progress,state.progress.currentLessonId),currentLevelIndex=levels.findIndex((function(level){return level.isCurrentLevel}));if(currentLevelIndex!==levels.length-1)return levels[currentLevelIndex+1].id}},exports.levelCount=function levelCount(state){return getProgressLevelType(state)===ProgressLevelType.LEVEL?1:getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL?levelsForLessonId(state.progress,state.progress.currentLessonId).length:0},exports.lessonExtrasUrl=function lessonExtrasUrl(state,lessonId){return state.lessonExtrasEnabled?state.lessons.find((function(lesson){return lesson.id===lessonId})).lesson_extras_level_url:""},exports.isPerfect=function isPerfect(state,levelId){return!!state.levelResults&&state.levelResults[levelId]>=_constants.TestResults.MINIMUM_OPTIMAL_RESULT},exports.groupedLessons=function groupedLessons(state){var includeBonusLevels=arguments.length>1&&void 0!==arguments[1]&&arguments[1],byGroup={},allLevels=levelsByLesson(state);return state.lessonGroups.forEach((function(lessonGroup){byGroup[lessonGroup.display_name]={lessonGroup:{id:lessonGroup.id,userFacing:lessonGroup.user_facing,displayName:lessonGroup.display_name,description:lessonGroup.description,bigQuestions:lessonGroup.big_questions},lessons:[],levelsByLesson:[]}})),state.lessons.forEach((function(lesson,index){var group=lesson.lesson_group_display_name,lessonAtIndex=lessonFromLessonAtIndex(state,index),lessonLevels=allLevels[index];includeBonusLevels||(lessonLevels=lessonLevels.filter((function(level){return!level.bonus}))),byGroup[group]&&(byGroup[group].lessons.push(lessonAtIndex),byGroup[group].levelsByLesson.push(lessonLevels))})),state.peerReviewLessonInfo&&(byGroup[state.peerReviewLessonInfo.lesson_group_display_name]={group:state.peerReviewLessonInfo.lesson_group_display_name,lessonGroup:{id:null,displayName:state.peerReviewLessonInfo.lesson_group_display_name,description:null,bigQuestions:null},lessons:[peerReviewLesson(state)],levelsByLesson:[peerReviewLevels(state)]}),_lodash.default.values(byGroup)});exports.progressionsFromLevels=function progressionsFromLevels(levels){var progressions=[];if(0===levels.length)return progressions;var currentProgression={start:0,name:levels[0].progression||levels[0].name,displayName:levels[0].progressionDisplayName||levels[0].name,levels:[levels[0]]};return levels.slice(1).forEach((function(level,index){(level.progression||level.name)===currentProgression.name?currentProgression.levels.push(level):(progressions.push(currentProgression),currentProgression={start:index+1,name:level.progression||level.name,displayName:level.progressionDisplayName||level.name,levels:[level]})})),progressions.push(currentProgression),progressions};exports.__testonly__={}},"./src/code-studio/responsiveRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ResponsiveSize=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RESPONSIVE_SIZE&&state.responsiveSize!==action.responsiveSize)return _objectSpread(_objectSpread({},state),{},{responsiveSize:action.responsiveSize});return state},exports.getResponsiveBreakpoint=getResponsiveBreakpoint,exports.setResponsiveSize=void 0;var _utils=__webpack_require__("./src/utils.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_RESPONSIVE_SIZE="responsive/SET_RESPONSIVE_SIZE",ResponsiveSize=(exports.setResponsiveSize=function setResponsiveSize(responsiveSize){return{type:SET_RESPONSIVE_SIZE,responsiveSize}},exports.ResponsiveSize=(0,_utils.makeEnum)("lg","md","sm","xs")),Breakpoints=[{breakpoint:992,responsiveSize:ResponsiveSize.lg},{breakpoint:720,responsiveSize:ResponsiveSize.md},{breakpoint:650,responsiveSize:ResponsiveSize.sm},{breakpoint:0,responsiveSize:ResponsiveSize.xs}];function getResponsiveBreakpoint(width){var responsiveSize=Breakpoints.find((function(_ref){var breakpoint=_ref.breakpoint;return width>breakpoint}));return void 0===responsiveSize?(console.error("No responsive size found for width ".concat(width,", defaulting to xs")),ResponsiveSize.xs):responsiveSize.responsiveSize}var initialState={responsiveSize:getResponsiveBreakpoint(window.innerWidth)}},"./src/templates/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=exports.fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)},fakeLevels=(exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))},exports.fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))}),fakeProgressForLevels=exports.fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress},randomNumberUpTo100=(exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})},exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})},function randomNumberUpTo100(){return Math.floor(100*Math.random())}),lessonId=1,fakeLessonWithLevels=exports.fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)},fakeStudents=exports.fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))},fakeUnitData=exports.fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},fakeStudentLevelProgress=exports.fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress},fakeStudentLastUpdate=exports.fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate},fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/progress/ProgressLessonContent.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithUnpluggedLesson=exports.WithNoNamedLevels=exports.WithNamedUnpluggedLesson=exports.ProgressLessonExample=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_decorators=__webpack_require__("./.storybook/decorators.js"),_ProgressLessonContent=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonContent.jsx")),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}exports.default={component:_ProgressLessonContent.default};var Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store:(0,_decorators.reduxStore)()},_react.default.createElement(_ProgressLessonContent.default,_extends({disabled:!1},args)))};(exports.ProgressLessonExample=Template.bind({})).args={levels:(0,_progressTestHelpers.fakeLevels)(5).map((function(level,index){return _objectSpread(_objectSpread({},level),{},{status:1===index?_sharedConstants.LevelStatus.perfect:_sharedConstants.LevelStatus.not_tried,name:"Progression"})}))},(exports.WithUnpluggedLesson=Template.bind({})).args={levels:[(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5))).map((function(level){return _objectSpread(_objectSpread({},level),{},{name:"Progression"})}))},(exports.WithNamedUnpluggedLesson=Template.bind({})).args={levels:[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})),{},{name:"Fun unplugged/named level"})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,{named:!1})))},(exports.WithNoNamedLevels=Template.bind({})).args={levels:[_objectSpread({},(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0,name:void 0}))].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,{named:!1})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,