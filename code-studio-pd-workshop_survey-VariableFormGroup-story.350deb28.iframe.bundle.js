(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[695],{"./src/code-studio/pd/form_components/ButtonList.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.otherString=exports.default=exports.ButtonList=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_utils=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/utils.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.otherString="Other:";var ButtonList=function(_React$Component){function ButtonList(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this),"handleChange",(function(event){var value;if("radio"===_this.props.type)value=event.target.value;else if("check"===_this.props.type){var currentSelection=new Set(_this.props.selectedItems);event.target.checked?currentSelection.add(event.target.value):currentSelection.delete(event.target.value),value=currentSelection.size>0?Array.from(currentSelection):null}_this.props.onChange(_defineProperty({},_this.props.groupName,value))})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ButtonList,_React$Component);var _proto=ButtonList.prototype;return _proto.handleAnswerInputChange=function handleAnswerInputChange(answer,event){answer.onInputChange(event.target.value)},_proto.renderInputComponents=function renderInputComponents(){var _this2=this,InputComponent={radio:_reactBootstrap.Radio,check:_reactBootstrap.Checkbox}[this.props.type],answers=this.props.answers;return this.props.includeOther&&(answers=_lodash.default.concat(answers,{answerText:"Other:",inputId:"".concat(this.props.groupName,"_other")})),answers.map((function(answer,i){var _utils$normalizeAnswe=_utils.default.normalizeAnswer(answer),answerText=_utils$normalizeAnswe.answerText,answerValue=_utils$normalizeAnswe.answerValue,checked="radio"===_this2.props.type?_this2.props.selectedItems===answerValue:!!(_this2.props.selectedItems&&_this2.props.selectedItems.indexOf(answerValue)>=0);return _react.default.createElement(InputComponent,{value:answerValue,label:answerText,key:i,name:_this2.props.groupName,onChange:_this2.props.onChange?_this2.handleChange:void 0,checked:_this2.props.onChange?checked:void 0},"object"===_typeof(answer)&&void 0===answer.answerValue?_react.default.createElement("div",null,_react.default.createElement("span",{style:styles.inputLabel},answerText)," ",_react.default.createElement("input",{type:"text",value:answer.onInputChange?answer.inputValue||"":void 0,id:answer.inputId,maxLength:"200",onChange:answer.onInputChange?_this2.handleAnswerInputChange.bind(_this2,answer):void 0})):answerText)}))},_proto.render=function render(){var validationState=this.props.validationState;this.props.errorText&&(validationState="error");var columnCount=this.props.columnCount?this.props.columnCount:1;return _react.default.createElement(_reactBootstrap.FormGroup,{id:this.props.groupName,controlId:this.props.groupName,validationState},_react.default.createElement(_reactBootstrap.ControlLabel,null,this.props.label,this.props.required&&_react.default.createElement("span",{style:{color:"red"}}," *")),_react.default.createElement(_reactBootstrap.FormGroup,{style:{columnCount}},this.renderInputComponents()),this.props.errorText&&_react.default.createElement(_reactBootstrap.HelpBlock,null,this.props.errorText),!this.props.suppressLineBreak&&_react.default.createElement("br",null))},ButtonList}(_react.default.Component);exports.ButtonList=ButtonList,_defineProperty(ButtonList,"propTypes",{type:_propTypes.default.oneOf(["radio","check"]).isRequired,label:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.element]).isRequired,groupName:_propTypes.default.string.isRequired,answers:_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.shape({answerText:_propTypes.default.string.isRequired,inputId:_propTypes.default.string,inputValue:_propTypes.default.string,onInputChange:_propTypes.default.func}),_propTypes.default.shape({answerText:_propTypes.default.string.isRequired,answerValue:_propTypes.default.string.isRequired})])).isRequired,includeOther:_propTypes.default.bool,onChange:_propTypes.default.func,selectedItems:_propTypes.default.oneOfType([_propTypes.default.array,_propTypes.default.string]),required:_propTypes.default.bool,validationState:_propTypes.default.string,errorText:_propTypes.default.string,columnCount:_propTypes.default.number,suppressLineBreak:_propTypes.default.bool}),_defineProperty(ButtonList,"defaultProps",{suppressLineBreak:!1});var styles={inputLabel:{verticalAlign:"top",marginRight:15}},_default=ButtonList;exports.default=_default},"./src/code-studio/pd/form_components/FieldGroup.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_excluded=["id","validationState","errorMessage","label","required","onChange","children","labelWidth","controlWidth","inlineControl"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var REQUIRED=_react.default.createElement("span",{style:{color:"red"}}," *"),FieldGroup=function(_React$Component){function FieldGroup(props){var _this;return(_this=_React$Component.call(this,props)||this).handleChange=_this.handleChange.bind(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this)),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FieldGroup,_React$Component);var _proto=FieldGroup.prototype;return _proto.handleChange=function handleChange(event){var value=event.target.value;("number"!==this.props.type||value.match(/^$|^-?[0-9]*\.?[0-9]*$/))&&this.props.onChange&&this.props.onChange(_defineProperty({},this.props.id,value))},_proto.renderControl=function renderControl(controlWidth,children,props){var updatedProps=_objectSpread(_objectSpread({},props),{},{type:"number"===props.type?"text":props.type});return _react.default.createElement(_reactBootstrap.Col,controlWidth,_react.default.createElement(_reactBootstrap.FormControl,_extends({onChange:this.handleChange},updatedProps),children))},_proto.render=function render(){var _this$props=this.props,id=_this$props.id,validationState=_this$props.validationState,errorMessage=_this$props.errorMessage,label=_this$props.label,required=_this$props.required,children=(_this$props.onChange,_this$props.children),labelWidth=_this$props.labelWidth,controlWidth=_this$props.controlWidth,inlineControl=_this$props.inlineControl,props=_objectWithoutProperties(_this$props,_excluded);return _react.default.createElement(_reactBootstrap.FormGroup,{controlId:id,validationState},_react.default.createElement(_reactBootstrap.Row,null,_react.default.createElement(_reactBootstrap.Col,labelWidth,_react.default.createElement(_reactBootstrap.ControlLabel,null,label,required&&REQUIRED)),inlineControl&&this.renderControl(controlWidth,children,props)),!inlineControl&&_react.default.createElement(_reactBootstrap.Row,null,this.renderControl(controlWidth,children,props)),_react.default.createElement(_reactBootstrap.HelpBlock,null,errorMessage))},FieldGroup}(_react.default.Component);exports.default=FieldGroup,FieldGroup.defaultProps={labelWidth:{md:12},controlWidth:{md:12}},FieldGroup.propTypes={id:_propTypes.default.string.isRequired,type:_propTypes.default.string,label:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.element]).isRequired,required:_propTypes.default.bool,validationState:_propTypes.default.string,errorMessage:_propTypes.default.string,children:_propTypes.default.arrayOf(_propTypes.default.node),onChange:_propTypes.default.func,labelWidth:_propTypes.default.object,controlWidth:_propTypes.default.object,inlineControl:_propTypes.default.bool},module.exports=exports.default},"./src/code-studio/pd/form_components/utils.js":module=>{module.exports={},module.exports.normalizeAnswer=function(answer){var answerText="string"==typeof answer?answer:answer.answerText;return{answerText,answerValue:"string"==typeof answer?answer:answer.answerValue||answerText}}},"./src/code-studio/pd/reactBootstrapStoryDecorator.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js"));exports.default=function _default(story){return _react.default.createElement("div",{id:"application-container"},story())},module.exports=exports.default},"./src/code-studio/pd/workshop_survey/VariableFormGroup.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ButtonList=__webpack_require__("./src/code-studio/pd/form_components/ButtonList.jsx"),_FieldGroup=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/FieldGroup.jsx")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var questionPropType=_propTypes.default.shape({label:_propTypes.default.string.isRequired,name:_propTypes.default.string.isRequired,required:_propTypes.default.bool,type:_propTypes.default.oneOf(["single_select","multi_select","free_response","radio","check"]).isRequired,values:_propTypes.default.arrayOf(_propTypes.default.string)}),ColumnVariableQuestion=function(_React$Component){function ColumnVariableQuestion(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_assertThisInitialized(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this),"buildColumn",(function(selectedValue){var key="".concat(_this.props.question.name,"[").concat(selectedValue,"]"),type=_this.props.question.type;"single_select"===_this.props.question.type?type="radio":"multi_select"===_this.props.question.type&&(type="check");var validationState,selected=_this.props.data&&_this.props.data[key];return selected&&"check"===type&&(selected=[selected]),_this.props.errors&&_this.props.errors.includes(key)&&(validationState="error"),_react.default.createElement("td",{key},_react.default.createElement(_reactBootstrap.FormGroup,{controlId:key,validationState},_react.default.createElement(_ButtonList.ButtonList,{answers:_this.props.question.values,groupName:key,label:"",type,selectedItems:selected,onChange:_this.props.onChange})))})),_this}return _inheritsLoose(ColumnVariableQuestion,_React$Component),ColumnVariableQuestion.prototype.render=function render(){return _react.default.createElement("tr",null,_react.default.createElement("td",{style:styles.tdLabel},_react.default.createElement(_reactBootstrap.ControlLabel,null,this.props.question.label,this.props.question.required&&_react.default.createElement("span",{className:"form-required-field"}," *"))),this.props.selectedValues.map(this.buildColumn))},ColumnVariableQuestion}(_react.default.Component);_defineProperty(ColumnVariableQuestion,"propTypes",{selectedValues:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,question:questionPropType,onChange:_propTypes.default.func,data:_propTypes.default.object,errors:_propTypes.default.arrayOf(_propTypes.default.string)});var RowVariableQuestion=function(_React$Component2){function RowVariableQuestion(){for(var _this2,_len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];return _defineProperty(_assertThisInitialized(_this2=_React$Component2.call.apply(_React$Component2,[this].concat(args))||this),"buildRow",(function(selectedValue){var validationState,label=_this2.props.question.label.replace("{value}",selectedValue),key="".concat(_this2.props.question.name,"[").concat(selectedValue,"]");return _this2.props.errors&&_this2.props.errors.includes(key)&&(validationState="error"),_react.default.createElement(_FieldGroup.default,{key,id:key,label,validationState,required:_this2.props.question.required,componentClass:"textarea",name:key,rows:4,value:_this2.props.data&&_this2.props.data[key],onChange:_this2.props.onChange})})),_this2}return _inheritsLoose(RowVariableQuestion,_React$Component2),RowVariableQuestion.prototype.render=function render(){return _react.default.createElement("div",null,this.props.selectedValues.map(this.buildRow))},RowVariableQuestion}(_react.default.Component);_defineProperty(RowVariableQuestion,"propTypes",{selectedValues:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,question:questionPropType,onChange:_propTypes.default.func,data:_propTypes.default.object,errors:_propTypes.default.arrayOf(_propTypes.default.string)});var VariableFormGroup=function(_React$Component3){function VariableFormGroup(props){var _this3;_defineProperty(_assertThisInitialized(_this3=_React$Component3.call(this,props)||this),"setSelected",(function(values){_this3.props.onChange&&_this3.props.onChange(values),_this3.setState({selected:values[_this3.props.sourceName]})}));var selected=[];return _this3.hasSingleSourceValue()?selected=[props.sourceValues[0]]:props.data&&props.data[props.sourceName]&&(selected=props.data[props.sourceName]),_this3.state={selected},_this3}_inheritsLoose(VariableFormGroup,_React$Component3);var _proto3=VariableFormGroup.prototype;return _proto3.UNSAFE_componentWillMount=function UNSAFE_componentWillMount(){this.hasSingleSourceValue()&&this.props.onChange&&this.props.onChange(_defineProperty({},this.props.sourceName,this.state.selected))},_proto3.hasNoSourceValues=function hasNoSourceValues(){return 0===this.props.sourceValues.length},_proto3.hasSingleSourceValue=function hasSingleSourceValue(){return 1===this.props.sourceValues.length},_proto3.render=function render(){var columnQuestions,_this4=this;if(this.hasNoSourceValues())return _react.default.createElement(_reactBootstrap.FormGroup,null);columnQuestions=this.state.selected.length<1?_react.default.createElement("tr",null,_react.default.createElement("td",{style:styles.tdLabel,className:"warning"},_react.default.createElement(_reactBootstrap.ControlLabel,null,_react.default.createElement(_reactBootstrap.FormControl.Static,null,"Please select one or more answers from the question above.",_react.default.createElement("span",{className:"form-required-field"}," *"))))):this.props.columnVariableQuestions.map((function(question){return _react.default.createElement(ColumnVariableQuestion,{key:question.name,question,selectedValues:_this4.state.selected,data:_this4.props.data,errors:_this4.props.errors,onChange:_this4.props.onChange})}));var validationState,rowQuestions=this.props.rowVariableQuestions.map((function(question){return _react.default.createElement(RowVariableQuestion,{key:question.name,question,selectedValues:_this4.state.selected,data:_this4.props.data,errors:_this4.props.errors,onChange:_this4.props.onChange})})),thStyle={width:"".concat(100/(this.state.selected.length+1),"%"),backgroundColor:"#00b2c0",color:"white"};return this.props.errors&&this.props.errors.includes(this.props.sourceName)&&(validationState="error"),_react.default.createElement(_reactBootstrap.FormGroup,{validationState,controlId:this.props.sourceName},this.hasSingleSourceValue()?_react.default.createElement("input",{type:"hidden",name:this.props.sourceName,value:this.props.sourceValues[0]}):_react.default.createElement(_ButtonList.ButtonList,{answers:this.props.sourceValues,groupName:this.props.sourceName,label:this.props.sourceLabel,onChange:this.setSelected,selectedItems:this.state.selected,required:!0,type:"check"}),columnQuestions.length>0&&_react.default.createElement(_reactBootstrap.Table,{striped:!0,bordered:!0},_react.default.createElement("thead",null,_react.default.createElement("tr",null,_react.default.createElement("th",{style:thStyle}),this.state.selected.map((function(value){return _react.default.createElement("th",{key:value,style:thStyle},_react.default.createElement("label",null,value))})))),_react.default.createElement("tbody",null,columnQuestions)),rowQuestions)},VariableFormGroup}(_react.default.Component);exports.default=VariableFormGroup,_defineProperty(VariableFormGroup,"propTypes",{sourceLabel:_propTypes.default.string.isRequired,sourceName:_propTypes.default.string.isRequired,sourceValues:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,columnVariableQuestions:_propTypes.default.arrayOf(questionPropType),rowVariableQuestions:_propTypes.default.arrayOf(questionPropType),onChange:_propTypes.default.func,data:_propTypes.default.object,errors:_propTypes.default.arrayOf(_propTypes.default.string)}),_defineProperty(VariableFormGroup,"defaultProps",{columnVariableQuestions:[],rowVariableQuestions:[]});var styles={tdLabel:{padding:15,verticalAlign:"inherit"}};module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/code-studio/pd/workshop_survey/VariableFormGroup.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.BasicUncontrolledVariableFormGroup=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_VariableFormGroup=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/workshop_survey/VariableFormGroup.jsx")),_reactBootstrapStoryDecorator=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/reactBootstrapStoryDecorator.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default={component:_VariableFormGroup.default,decorators:[_reactBootstrapStoryDecorator.default]};exports.default=_default;var BasicUncontrolledVariableFormGroup=function Template(args){return _react.default.createElement(_VariableFormGroup.default,args)}.bind({});exports.BasicUncontrolledVariableFormGroup=BasicUncontrolledVariableFormGroup,BasicUncontrolledVariableFormGroup.args={sourceLabel:"Who should go on the away mission?",sourceName:"roster",sourceValues:["an essential member of the bridge crew","an absolutely valueless redshirt","someone whose actual job is to go on away missions"],columnVariableQuestions:[{label:"is this person qualified for the mission?",name:"qualified",required:!0,type:"radio",values:["Yes","Not remotely"]},{label:"can the ship afford to risk this person's life?",name:"risk",required:!0,type:"radio",values:["Yes","We would all literally die without them"]}],rowVariableQuestions:[{label:"why are you selecing {value} for this mission?",name:"why",required:!1,type:"free_response"}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,