/*! For license information please see 2168.82c686f1.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[2168],{"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/react-csv/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-csv/lib/index.js")},"./node_modules/react-csv/lib/components/Download.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_core=__webpack_require__("./node_modules/react-csv/lib/core.js"),_metaProps=__webpack_require__("./node_modules/react-csv/lib/metaProps.js");var CSVDownload=function(_React$Component){function CSVDownload(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CSVDownload);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(CSVDownload.__proto__||Object.getPrototypeOf(CSVDownload)).call(this,props));return _this.state={},_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(CSVDownload,_React$Component),_createClass(CSVDownload,[{key:"buildURI",value:function buildURI(){return _core.buildURI.apply(void 0,arguments)}},{key:"componentDidMount",value:function componentDidMount(){var _props=this.props,data=_props.data,headers=_props.headers,separator=_props.separator,enclosingCharacter=_props.enclosingCharacter,uFEFF=_props.uFEFF,target=_props.target,specs=_props.specs,replace=_props.replace;this.state.page=window.open(this.buildURI(data,uFEFF,headers,separator,enclosingCharacter),target,specs,replace)}},{key:"getWindow",value:function getWindow(){return this.state.page}},{key:"render",value:function render(){return null}}]),CSVDownload}(_react2.default.Component);CSVDownload.defaultProps=Object.assign(_metaProps.defaultProps,{target:"_blank"}),CSVDownload.propTypes=_metaProps.propTypes,exports.default=CSVDownload},"./node_modules/react-csv/lib/components/Link.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_core=__webpack_require__("./node_modules/react-csv/lib/core.js"),_metaProps=__webpack_require__("./node_modules/react-csv/lib/metaProps.js");var CSVLink=function(_React$Component){function CSVLink(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CSVLink);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(CSVLink.__proto__||Object.getPrototypeOf(CSVLink)).call(this,props));return _this.buildURI=_this.buildURI.bind(_this),_this.state={href:""},_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(CSVLink,_React$Component),_createClass(CSVLink,[{key:"componentDidMount",value:function componentDidMount(){var _props=this.props,data=_props.data,headers=_props.headers,separator=_props.separator,uFEFF=_props.uFEFF,enclosingCharacter=_props.enclosingCharacter;this.setState({href:this.buildURI(data,uFEFF,headers,separator,enclosingCharacter)})}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){if(this.props!==prevProps){var _props2=this.props,data=_props2.data,headers=_props2.headers,separator=_props2.separator,uFEFF=_props2.uFEFF;this.setState({href:this.buildURI(data,uFEFF,headers,separator)})}}},{key:"buildURI",value:function buildURI(){return _core.buildURI.apply(void 0,arguments)}},{key:"handleLegacy",value:function handleLegacy(event){if(window.navigator.msSaveOrOpenBlob){event.preventDefault();var _props3=this.props,data=_props3.data,headers=_props3.headers,separator=_props3.separator,filename=_props3.filename,enclosingCharacter=_props3.enclosingCharacter,uFEFF=_props3.uFEFF,blob=new Blob([uFEFF?"\ufeff":"",(0,_core.toCSV)(data,headers,separator,enclosingCharacter)]);return window.navigator.msSaveBlob(blob,filename),!1}}},{key:"handleAsyncClick",value:function handleAsyncClick(event){var _this2=this;this.props.onClick(event,(function done(proceed){!1!==proceed?_this2.handleLegacy(event):event.preventDefault()}))}},{key:"handleSyncClick",value:function handleSyncClick(event){!1===this.props.onClick(event)?event.preventDefault():this.handleLegacy(event)}},{key:"handleClick",value:function handleClick(){var _this3=this;return function(event){if("function"==typeof _this3.props.onClick)return _this3.props.asyncOnClick?_this3.handleAsyncClick(event):_this3.handleSyncClick(event);_this3.handleLegacy(event)}}},{key:"render",value:function render(){var _this4=this,_props4=this.props,filename=(_props4.data,_props4.headers,_props4.separator,_props4.filename),children=(_props4.uFEFF,_props4.children),rest=(_props4.onClick,_props4.asyncOnClick,_props4.enclosingCharacter,function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props4,["data","headers","separator","filename","uFEFF","children","onClick","asyncOnClick","enclosingCharacter"]));return _react2.default.createElement("a",_extends({download:filename},rest,{ref:function ref(link){return _this4.link=link},target:"_self",href:this.state.href,onClick:this.handleClick()}),children)}}]),CSVLink}(_react2.default.Component);CSVLink.defaultProps=_metaProps.defaultProps,CSVLink.propTypes=_metaProps.propTypes,exports.default=CSVLink},"./node_modules/react-csv/lib/core.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}var isSafari=exports.isSafari=function isSafari(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},isJsons=exports.isJsons=function isJsons(array){return Array.isArray(array)&&array.every((function(row){return"object"===(void 0===row?"undefined":_typeof(row))&&!(row instanceof Array)}))},isArrays=exports.isArrays=function isArrays(array){return Array.isArray(array)&&array.every((function(row){return Array.isArray(row)}))},jsonsHeaders=exports.jsonsHeaders=function jsonsHeaders(array){return Array.from(array.map((function(json){return Object.keys(json)})).reduce((function(a,b){return new Set([].concat(_toConsumableArray(a),_toConsumableArray(b)))}),[]))},jsons2arrays=exports.jsons2arrays=function jsons2arrays(jsons,headers){var headerLabels=headers=headers||jsonsHeaders(jsons),headerKeys=headers;isJsons(headers)&&(headerLabels=headers.map((function(header){return header.label})),headerKeys=headers.map((function(header){return header.key})));var data=jsons.map((function(object){return headerKeys.map((function(header){return getHeaderValue(header,object)}))}));return[headerLabels].concat(_toConsumableArray(data))},getHeaderValue=exports.getHeaderValue=function getHeaderValue(property,obj){var foundValue=property.replace(/\[([^\]]+)]/g,".$1").split(".").reduce((function(o,p,i,arr){if(void 0!==o[p])return o[p];arr.splice(1)}),obj);return void 0===foundValue?property in obj?obj[property]:"":foundValue},elementOrEmpty=exports.elementOrEmpty=function elementOrEmpty(element){return element||0===element?element:""},joiner=exports.joiner=function joiner(data){var separator=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",",enclosingCharacter=arguments.length>2&&void 0!==arguments[2]?arguments[2]:'"';return data.filter((function(e){return e})).map((function(row){return row.map((function(element){return elementOrEmpty(element)})).map((function(column){return""+enclosingCharacter+column+enclosingCharacter})).join(separator)})).join("\n")},arrays2csv=exports.arrays2csv=function arrays2csv(data,headers,separator,enclosingCharacter){return joiner(headers?[headers].concat(_toConsumableArray(data)):data,separator,enclosingCharacter)},jsons2csv=exports.jsons2csv=function jsons2csv(data,headers,separator,enclosingCharacter){return joiner(jsons2arrays(data,headers),separator,enclosingCharacter)},string2csv=exports.string2csv=function string2csv(data,headers,separator,enclosingCharacter){return headers?headers.join(separator)+"\n"+data:data},toCSV=exports.toCSV=function toCSV(data,headers,separator,enclosingCharacter){if(isJsons(data))return jsons2csv(data,headers,separator,enclosingCharacter);if(isArrays(data))return arrays2csv(data,headers,separator,enclosingCharacter);if("string"==typeof data)return string2csv(data,headers,separator);throw new TypeError('Data should be a "String", "Array of arrays" OR "Array of objects" ')};exports.buildURI=function buildURI(data,uFEFF,headers,separator,enclosingCharacter){var csv=toCSV(data,headers,separator,enclosingCharacter),type=isSafari()?"application/csv":"text/csv",blob=new Blob([uFEFF?"\ufeff":"",csv],{type}),dataURI="data:"+type+";charset=utf-8,"+(uFEFF?"\ufeff":"")+csv,URL=window.URL||window.webkitURL;return void 0===URL.createObjectURL?dataURI:URL.createObjectURL(blob)}},"./node_modules/react-csv/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CSVLink=exports.CSVDownload=void 0;var _Download2=_interopRequireDefault(__webpack_require__("./node_modules/react-csv/lib/components/Download.js")),_Link2=_interopRequireDefault(__webpack_require__("./node_modules/react-csv/lib/components/Link.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.CSVDownload=_Download2.default,exports.CSVLink=_Link2.default},"./node_modules/react-csv/lib/metaProps.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PropsNotForwarded=exports.defaultProps=exports.propTypes=void 0;(function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}})(__webpack_require__("./node_modules/react/index.js"));var _propTypes=__webpack_require__("./node_modules/prop-types/index.js");exports.propTypes={data:(0,_propTypes.oneOfType)([_propTypes.string,_propTypes.array]).isRequired,headers:_propTypes.array,target:_propTypes.string,separator:_propTypes.string,filename:_propTypes.string,uFEFF:_propTypes.bool,onClick:_propTypes.func,asyncOnClick:_propTypes.bool},exports.defaultProps={separator:",",filename:"generatedBy_react-csv.csv",uFEFF:!0,asyncOnClick:!1},exports.PropsNotForwarded=["data","headers"]},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,