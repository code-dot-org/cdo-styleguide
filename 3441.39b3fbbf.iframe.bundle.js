(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[3441],{"./src/code-studio/clientState.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var _utils=__webpack_require__("./src/utils.js"),_activityUtils=__webpack_require__("./src/code-studio/activityUtils.js"),sessionStorage=window.sessionStorage,clientState=module.exports={};function levelProgressByScript(){var progressJson=sessionStorage.getItem("progress");try{return progressJson?JSON.parse(progressJson):{}}catch(e){return{}}}function recordVisualElementSeen(visualElementType,visualElementId){var elementSeen,elementSeenJson=sessionStorage.getItem(visualElementType)||"{}";try{(elementSeen=JSON.parse(elementSeenJson))[visualElementId]=!0,(0,_utils.trySetSessionStorage)(visualElementType,JSON.stringify(elementSeen))}catch(e){(elementSeen={})[visualElementId]=!0,(0,_utils.trySetSessionStorage)(visualElementType,JSON.stringify(elementSeen))}}function hasSeenVisualElement(visualElementType,visualElementId){var elementSeenJson=sessionStorage.getItem(visualElementType)||"{}";try{return!0===JSON.parse(elementSeenJson)[visualElementId]}catch(e){return!1}}function createKey(scriptName,levelId,prefix){return(prefix?prefix+"_":"")+scriptName+"_"+levelId}clientState.queryParams=__webpack_require__("./src/code-studio/utils.js").queryParams,clientState.EXPIRY_DAYS=365,clientState.MAXIMUM_CACHABLE_RESULT=999,clientState.reset=function(){try{sessionStorage.clear()}catch(e){}},clientState.clearProgress=function(){sessionStorage.removeItem("progress"),sessionStorage.removeItem("lines"),function removeItemsWithPrefix(sessionStorage,prefix){Object.keys(sessionStorage).filter((function(key){return key.startsWith(prefix)})).forEach((function(key){return sessionStorage.removeItem(key)}))}(sessionStorage,"source_")},clientState.sourceForLevel=function(scriptName,levelId,timestamp){var data=sessionStorage.getItem(createKey(scriptName,levelId,"source"));if(data){var parsed;try{parsed=JSON.parse(data)}catch(e){return}if(!timestamp||parsed.timestamp>timestamp)return parsed.source}},clientState.writeSourceForLevel=function(scriptName,levelId,timestamp,source){void 0!==source&&(0,_utils.trySetSessionStorage)(createKey(scriptName,levelId,"source"),JSON.stringify({source,timestamp}))},clientState.trackProgress=function(scriptName,levelId,testResult){if(testResult&&!(testResult>clientState.MAXIMUM_CACHABLE_RESULT)){var progressData=levelProgressByScript();progressData[scriptName]||(progressData[scriptName]={});var savedResult=progressData[scriptName][levelId]||0,mergedResult=(0,_activityUtils.mergeActivityResult)(savedResult,testResult);mergedResult!==savedResult&&(progressData[scriptName][levelId]=mergedResult,(0,_utils.trySetSessionStorage)("progress",JSON.stringify(progressData)))}},clientState.levelProgress=function(scriptName){return levelProgressByScript()[scriptName]||{}},clientState.hasSeenVideo=function(videoId){return hasSeenVisualElement("video",videoId)},clientState.recordVideoSeen=function(videoId){recordVisualElementSeen("video",videoId)},clientState.hasSeenCallout=function(calloutId){return hasSeenVisualElement("callout",calloutId)},clientState.recordCalloutSeen=function(calloutId){recordVisualElementSeen("callout",calloutId)}},"./src/code-studio/isRtlRedux.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function locale(){var state=arguments.length>0&&void 0!==arguments[0]&&arguments[0],action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RTL)return action.isRtl;return state},exports.isRtlFromDOM=isRtlFromDOM,exports.setRtlFromDOM=exports.setRtl=void 0;var SET_RTL="isRtl/SET_RTL",setRtl=exports.setRtl=function setRtl(isRtl){return{type:SET_RTL,isRtl}};exports.setRtlFromDOM=function setRtlFromDOM(){return setRtl(isRtlFromDOM())};function isRtlFromDOM(){var head=document.getElementsByTagName("head")[0];if(head&&head.parentElement){var dir=head.parentElement.getAttribute("dir");return!(!dir||"rtl"!==dir.toLowerCase())}return!1}},"./src/code-studio/url_test.js":module=>{module.exports=function testImageAccess(url){var element,successCallback=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},failureCallback=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},timeoutMs=arguments.length>3&&void 0!==arguments[3]?arguments[3]:5e3,videoElement=arguments.length>4&&void 0!==arguments[4]&&arguments[4];element=videoElement?document.createElement("video"):new Image;var called=!1;function finish(callback){return function(){called||(called=!0,window.clearTimeout(timeout),callback())}}var timeout=window.setTimeout(finish(failureCallback),timeoutMs);element.onerror=finish(failureCallback),videoElement?element.ondurationchange=finish(successCallback):element.onload=finish(successCallback),element.src=url,window.testImages=window.testImages||[],window.testImages.push(element)}},"./src/commonStyles.js":(module,__unused_webpack_exports,__webpack_require__)=>{var commonStyles=module.exports,styleConstants=__webpack_require__("./src/styleConstants.js"),color=__webpack_require__("./src/util/color.js");commonStyles.hidden={display:"none"},commonStyles.purpleHeader={height:styleConstants["workspace-headers-height"],backgroundColor:color.purple,color:color.white,overflowY:"hidden",WebkitUserSelect:"none",MozUserSelect:"none",msUserSelect:"none",userSelect:"none"},commonStyles.purpleHeaderUnfocused={backgroundColor:color.lighter_purple,color:color.neutral_white},commonStyles.teacherBlueHeader={backgroundColor:color.cyan,color:color.lightest_cyan},commonStyles.teacherHeaderUnfocused={color:color.dark_charcoal},commonStyles.minecraftHeader={backgroundColor:"#3b3b3b",color:color.white},commonStyles.button={paddingTop:5,paddingBottom:5,fontSize:14},commonStyles.bubble={color:color.black,marginBottom:10,position:"relative",cursor:"pointer"}},"./src/dom.js":(__unused_webpack_module,exports)=>{exports.addReadyListener=function(callback){"complete"===document.readyState?setTimeout(callback,1):window.addEventListener("load",callback,!1)},exports.getTouchEventName=function(eventName){var key,isIE11Touch=window.navigator.pointerEnabled,isIE10Touch=window.navigator.msPointerEnabled;if(isIE11Touch?key="ie11":isIE10Touch?key="ie10":!(isIE11Touch||isIE10Touch)&&(key="standard"),key&&TOUCH_MAP[eventName])return TOUCH_MAP[eventName][key]};var addEvent=function addEvent(element,eventName,handler){var suppressTouchDefault=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],boundEvents={},bindEvent=function bindEvent(type,eventName,handler){element.addEventListener(eventName,handler,!1),boundEvents[type]={name:eventName,handler}},unbindEvent=function unbindEvent(type){var eventInfo=boundEvents[type];eventInfo&&(element.removeEventListener(eventInfo.name,eventInfo.handler),delete boundEvents[type])};bindEvent("click",eventName,handler);var touchEvent=exports.getTouchEventName(eventName);return touchEvent&&bindEvent("touch",touchEvent,(function(e){suppressTouchDefault&&e.preventDefault();["pointerdown","MSPointerDown","pointermove","MSPointerMove","pointerup","MSPointerUp"].includes(touchEvent)&&unbindEvent("click"),null==handler||handler.call(this,e)})),function(){unbindEvent("click"),unbindEvent("touch")}};exports.addMouseDownTouchEvent=function(element,handler){return addEvent(element,"mousedown",handler)},exports.addMouseUpTouchEvent=function(element,handler){return addEvent(element,"mouseup",handler,!(arguments.length>2&&void 0!==arguments[2])||arguments[2])},exports.addMouseMoveTouchEvent=function(element,handler){return addEvent(element,"mousemove",handler)},exports.addClickTouchEvent=function(element,handler){return addEvent(element,"click",handler)};var TOUCH_MAP={click:{standard:"touchstart",ie10:"MSPointerDown",ie11:"pointerdown"},mousedown:{standard:"touchstart",ie10:"MSPointerDown",ie11:"pointerdown"},mouseup:{standard:"touchend",ie10:"MSPointerUp",ie11:"pointerup"},mousemove:{standard:"touchmove",ie10:"MSPointerMove",ie11:"pointermove"}};exports.TOUCH_MAP=TOUCH_MAP,exports.isMobile=function(){return/Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile/.test(window.navigator.userAgent)},exports.isWindowsTouch=function(){return/MSIE.*Touch/.test(window.navigator.userAgent)},exports.isAndroid=function(){return/Android/.test(window.navigator.userAgent)},exports.isIOS=function(){return/iP(hone|od|ad)/.test(window.navigator.userAgent)},exports.isIPad=function(){return/iPad/i.test(window.navigator.userAgent)}},"./src/redux/authoredHints.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:authoredHintsInitialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===ENQUEUE_HINTS){var _bisect2=function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,_utils.bisect)(action.hints,(function(hint){return-1!==action.hintsUsedIds.indexOf(hint.hintId)})),2),seen=_bisect2[0],unseen=_bisect2[1];return Object.assign({},state,{unseenHints:state.unseenHints.concat(unseen),seenHints:state.seenHints.concat(seen)})}if(action.type===SHOW_NEXT_HINT){var nextHint=Object.assign({},state.unseenHints[0],{alreadySeen:!0});return Object.assign({},state,{unseenHints:state.unseenHints.slice(1),seenHints:state.seenHints.concat([nextHint])})}if(action.type===DISPLAY_MISSING_BLOCK_HINTS){var seenHints=state.seenHints.filter((function(seenHint){return"contextual"!==seenHint.hintType||action.hints.some((function(newHint){return seenHint.hintId===newHint.hintId}))})),newHintsToEnqueue=action.hints.filter((function(newHint){return state.seenHints.every((function(seenHint){return newHint.hintId!==seenHint.hintId}))})),unseenNonContextualHints=state.unseenHints.filter((function(hint){return"contextual"!==hint.hintType})),newUnseenHints=newHintsToEnqueue.filter((function(hint){return!hint.alreadySeen})).concat(unseenNonContextualHints),newSeenHints=seenHints.concat(newHintsToEnqueue.filter((function(hint){return hint.alreadySeen})));return Object.assign({},state,{unseenHints:newUnseenHints,seenHints:newSeenHints})}return state},exports.showNextHint=exports.enqueueHints=exports.displayMissingBlockHints=void 0;var _utils=__webpack_require__("./src/utils.js");function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var ENQUEUE_HINTS="authoredHints/ENQUEUE_HINTS",SHOW_NEXT_HINT="authoredHints/SHOW_NEXT_HINT",DISPLAY_MISSING_BLOCK_HINTS="authoredHints/DISPLAY_MISSING_BLOCK_HINTS",authoredHintsInitialState={seenHints:[],unseenHints:[]};exports.enqueueHints=function enqueueHints(hints,hintsUsedIds){return{type:ENQUEUE_HINTS,hints,hintsUsedIds}},exports.showNextHint=function showNextHint(){return{type:SHOW_NEXT_HINT}},exports.displayMissingBlockHints=function displayMissingBlockHints(hints){return{type:DISPLAY_MISSING_BLOCK_HINTS,hints}}},"./src/redux/feedback.js":(__unused_webpack_module,exports)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SHOW_FEEDBACK){var displayingShareControls=action.displayingShareControls;return _objectSpread(_objectSpread({},state),{},{displayingFeedback:!0,displayingShareControls})}if(action.type===HIDE_FEEDBACK)return _objectSpread(_objectSpread({},state),{},{displayingFeedback:!1});if(action.type===SET_BLOCK_LIMIT){var blockLimit=action.blockLimit;return _objectSpread(_objectSpread({},state),{},{blockLimit})}if(action.type===SET_FEEDBACK_DATA){var isChallenge=action.isChallenge,isPerfect=action.isPerfect,blocksUsed=action.blocksUsed,displayFunometer=action.displayFunometer,studentCode=action.studentCode,feedbackImage=action.feedbackImage;return _objectSpread(_objectSpread({},state),{},{isChallenge,isPerfect,blocksUsed,displayFunometer,studentCode,feedbackImage})}if(action.type===SET_ACHIEVEMENTS){var achievements=action.achievements;return _objectSpread(_objectSpread({},state),{},{achievements})}return state},exports.showFeedback=exports.setFeedbackData=exports.setBlockLimit=exports.setAchievements=exports.hideFeedback=void 0;var SHOW_FEEDBACK="feedback/show_feedback",HIDE_FEEDBACK="feedback/hide_feedback",SET_ACHIEVEMENTS="feedback/set_achievemnts",SET_BLOCK_LIMIT="feedback/set_block_limit",SET_FEEDBACK_DATA="feedback/set_data",initialState={displayingFeedback:!1,displayingCode:!1,displayingShareControls:!1,isChallenge:!1,isPerfect:!0,blocksUsed:0,blockLimit:void 0,achievements:[],displayFunometer:!0,studentCode:{message:"",code:""},feedbackImage:null};exports.showFeedback=function showFeedback(){return{type:SHOW_FEEDBACK,displayingShareControls:arguments.length>0&&void 0!==arguments[0]&&arguments[0]}},exports.hideFeedback=function hideFeedback(){return{type:HIDE_FEEDBACK}},exports.setBlockLimit=function setBlockLimit(blockLimit){return{type:SET_BLOCK_LIMIT,blockLimit}},exports.setFeedbackData=function setFeedbackData(props){return _objectSpread({type:SET_FEEDBACK_DATA},props)},exports.setAchievements=function setAchievements(achievements){return{type:SET_ACHIEVEMENTS,achievements}}},"./src/redux/instructions.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_objectSpread({},instructionsInitialState),action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_CONSTANTS){if(state.shortInstructions||state.longInstructions)throw new Error("instructions constants already set");var noInstructionsWhenCollapsed=action.noInstructionsWhenCollapsed,shortInstructions=action.shortInstructions,shortInstructions2=action.shortInstructions2,longInstructions=action.longInstructions,dynamicInstructions=action.dynamicInstructions,hasContainedLevels=action.hasContainedLevels,overlayVisible=action.overlayVisible,teacherMarkdown=action.teacherMarkdown,levelVideos=action.levelVideos,mapReference=action.mapReference,referenceLinks=action.referenceLinks,muteBackgroundMusic=action.muteBackgroundMusic,unmuteBackgroundMusic=action.unmuteBackgroundMusic,programmingEnvironment=action.programmingEnvironment,isCollapsed=state.isCollapsed;return longInstructions||hasContainedLevels||(isCollapsed=!0),Object.assign({},state,{noInstructionsWhenCollapsed,shortInstructions,shortInstructions2,longInstructions,dynamicInstructions,teacherMarkdown,hasContainedLevels,overlayVisible,isCollapsed,levelVideos,mapReference,referenceLinks,muteBackgroundMusic,unmuteBackgroundMusic,programmingEnvironment})}if(action.type===TOGGLE_INSTRUCTIONS_COLLAPSED)return Object.assign({},state,{isCollapsed:!state.isCollapsed});if(action.type===SET_INSTRUCTIONS_RENDERED_HEIGHT&&state.allowResize)return Object.assign({},state,{renderedHeight:action.height,expandedHeight:state.isCollapsed?state.expandedHeight:action.height});if(action.type===SET_INSTRUCTIONS_MAX_HEIGHT_NEEDED&&state.allowResize)return Object.assign({},state,{maxNeededHeight:action.maxNeededHeight});if(action.type===SET_INSTRUCTIONS_MAX_HEIGHT_AVAILABLE&&action.maxAvailableHeight!==state.maxAvailableHeight&&state.allowResize)return Object.assign({},state,{maxAvailableHeight:action.maxAvailableHeight,renderedHeight:Math.min(action.maxAvailableHeight,state.renderedHeight),expandedHeight:Math.min(action.maxAvailableHeight,state.expandedHeight)});if(action.type===SET_ALLOW_INSTRUCTIONS_RESIZE)return _objectSpread(_objectSpread({},state),{},{allowResize:action.allowResize});if(action.type===SET_HAS_AUTHORED_HINTS)return Object.assign({},state,{hasAuthoredHints:action.hasAuthoredHints});if(action.type===SET_TTS_AUTOPLAY_ENABLED_FOR_LEVEL)return Object.assign({},state,{ttsAutoplayEnabledForLevel:action.ttsAutoplayEnabledForLevel});if(action.type===SET_CODE_REVIEW_ENABLED_FOR_LEVEL)return Object.assign({},state,{codeReviewEnabledForLevel:action.codeReviewEnabledForLevel});if(action.type===SET_FEEDBACK)return Object.assign({},state,{feedback:action.feedback});if(action.type===HIDE_OVERLAY)return state.dynamicInstructionsDismissCallback&&state.dynamicInstructionsDismissCallback(),Object.assign({},state,{overlayVisible:!1});if(action.type===SET_DYNAMIC_INSTRUCTIONS_DEFAULTS)return Object.assign({},state,{dynamicInstructionsDefaults:action.dynamicInstructionsDefaults});if(action.type===SET_DYNAMIC_INSTRUCTIONS_KEY)return Object.assign({},state,{dynamicInstructionsKey:action.dynamicInstructionsKey,overlayVisible:action.options&&action.options.showOverlay});if(action.type===SET_DYNAMIC_INSTRUCTIONS_DISMISS_CALLBACK)return Object.assign({},state,{dynamicInstructionsDismissCallback:action.dynamicInstructionsDismissCallback});if(action.type===SET_TA_RUBRIC)return Object.assign({},state,{taRubric:action.taRubric});return state},exports.determineInstructionsConstants=void 0,exports.getDynamicInstructions=function getDynamicInstructions(state){if(!state.dynamicInstructionsDefaults&&!state.dynamicInstructions)return;return _objectSpread(_objectSpread({},state.dynamicInstructionsDefaults),state.dynamicInstructions&&JSON.parse(state.dynamicInstructions))},exports.toggleInstructionsCollapsed=exports.substituteInstructionImages=exports.setTtsAutoplayEnabledForLevel=exports.setTaRubric=exports.setInstructionsRenderedHeight=exports.setInstructionsMaxHeightNeeded=exports.setInstructionsMaxHeightAvailable=exports.setInstructionsConstants=exports.setHasAuthoredHints=exports.setFeedback=exports.setDynamicInstructionsOverlayDismissCallback=exports.setDynamicInstructionsKey=exports.setDynamicInstructionsDefaults=exports.setCodeReviewEnabledForLevel=exports.setAllowInstructionsResize=exports.hideOverlay=void 0;var _utils=__webpack_require__("./src/utils.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_CONSTANTS="instructions/SET_CONSTANTS",TOGGLE_INSTRUCTIONS_COLLAPSED="instructions/TOGGLE_INSTRUCTIONS_COLLAPSED",SET_INSTRUCTIONS_RENDERED_HEIGHT="instructions/SET_INSTRUCTIONS_RENDERED_HEIGHT",SET_INSTRUCTIONS_MAX_HEIGHT_NEEDED="instructions/SET_INSTRUCTIONS_MAX_HEIGHT_NEEDED",SET_INSTRUCTIONS_MAX_HEIGHT_AVAILABLE="instructions/SET_INSTRUCTIONS_MAX_HEIGHT_AVAILABLE",SET_ALLOW_INSTRUCTIONS_RESIZE="instructions/SET_ALLOW_INSTRUCTIONS_RESIZE",SET_HAS_AUTHORED_HINTS="instructions/SET_HAS_AUTHORED_HINTS",SET_FEEDBACK="instructions/SET_FEEDBACK",HIDE_OVERLAY="instructions/HIDE_OVERLAY",SET_DYNAMIC_INSTRUCTIONS_DEFAULTS="instructions/SET_DYNAMIC_INSTRUCTIONS_DEFAULTS",SET_DYNAMIC_INSTRUCTIONS_KEY="instructions/SET_DYNAMIC_INSTRUCTIONS_KEY",SET_DYNAMIC_INSTRUCTIONS_DISMISS_CALLBACK="instructions/SET_DYNAMIC_INSTRUCTIONS_DISMISS_CALLBACK",SET_TTS_AUTOPLAY_ENABLED_FOR_LEVEL="instructions/SET_TTS_AUTOPLAY_ENABLED_FOR_LEVEL",SET_CODE_REVIEW_ENABLED_FOR_LEVEL="instructions/SET_CODE_REVIEW_ENABLED_FOR_LEVEL",SET_TA_RUBRIC="instructions/SET_TA_RUBRIC",instructionsInitialState={noInstructionsWhenCollapsed:!1,shortInstructions:void 0,shortInstructions2:void 0,longInstructions:void 0,dynamicInstructions:void 0,dynamicInstructionsDefaults:void 0,dynamicInstructionsKey:void 0,teacherMarkdown:void 0,hasContainedLevels:!1,isCollapsed:!1,renderedHeight:0,expandedHeight:0,maxNeededHeight:1/0,maxAvailableHeight:1/0,allowResize:!0,hasAuthoredHints:!1,ttsAutoplayEnabledForLevel:!1,codeReviewEnabledForLevel:!1,overlayVisible:!1,levelVideos:[],mapReference:void 0,referenceLinks:[],muteBackgroundMusic:function muteBackgroundMusic(){},unmuteBackgroundMusic:function unmuteBackgroundMusic(){},programmingEnvironment:null,taRubric:null};exports.setInstructionsConstants=function setInstructionsConstants(_ref){var noInstructionsWhenCollapsed=_ref.noInstructionsWhenCollapsed,shortInstructions=_ref.shortInstructions,shortInstructions2=_ref.shortInstructions2,longInstructions=_ref.longInstructions,dynamicInstructions=_ref.dynamicInstructions,hasContainedLevels=_ref.hasContainedLevels,overlayVisible=_ref.overlayVisible,teacherMarkdown=_ref.teacherMarkdown,levelVideos=_ref.levelVideos,mapReference=_ref.mapReference,referenceLinks=_ref.referenceLinks,muteBackgroundMusic=_ref.muteBackgroundMusic,unmuteBackgroundMusic=_ref.unmuteBackgroundMusic,programmingEnvironment=_ref.programmingEnvironment;return{type:SET_CONSTANTS,noInstructionsWhenCollapsed,shortInstructions,shortInstructions2,longInstructions,dynamicInstructions,hasContainedLevels,overlayVisible,teacherMarkdown,levelVideos,mapReference,referenceLinks,muteBackgroundMusic,unmuteBackgroundMusic,programmingEnvironment}},exports.setInstructionsRenderedHeight=function setInstructionsRenderedHeight(height){return{type:SET_INSTRUCTIONS_RENDERED_HEIGHT,height}},exports.toggleInstructionsCollapsed=function toggleInstructionsCollapsed(){return{type:TOGGLE_INSTRUCTIONS_COLLAPSED}},exports.setInstructionsMaxHeightNeeded=function setInstructionsMaxHeightNeeded(height){return{type:SET_INSTRUCTIONS_MAX_HEIGHT_NEEDED,maxNeededHeight:height}},exports.setInstructionsMaxHeightAvailable=function setInstructionsMaxHeightAvailable(height){return{type:SET_INSTRUCTIONS_MAX_HEIGHT_AVAILABLE,maxAvailableHeight:height}},exports.setAllowInstructionsResize=function setAllowInstructionsResize(allowResize){return{type:SET_ALLOW_INSTRUCTIONS_RESIZE,allowResize}},exports.setHasAuthoredHints=function setHasAuthoredHints(hasAuthoredHints){return{type:SET_HAS_AUTHORED_HINTS,hasAuthoredHints}},exports.setTtsAutoplayEnabledForLevel=function setTtsAutoplayEnabledForLevel(ttsAutoplayEnabledForLevel){return{type:SET_TTS_AUTOPLAY_ENABLED_FOR_LEVEL,ttsAutoplayEnabledForLevel}},exports.setCodeReviewEnabledForLevel=function setCodeReviewEnabledForLevel(codeReviewEnabledForLevel){return{type:SET_CODE_REVIEW_ENABLED_FOR_LEVEL,codeReviewEnabledForLevel}},exports.setFeedback=function setFeedback(feedback){return{type:SET_FEEDBACK,feedback}},exports.hideOverlay=function hideOverlay(){return{type:HIDE_OVERLAY}},exports.setDynamicInstructionsDefaults=function setDynamicInstructionsDefaults(dynamicInstructionsDefaults){return{type:SET_DYNAMIC_INSTRUCTIONS_DEFAULTS,dynamicInstructionsDefaults}},exports.setDynamicInstructionsKey=function setDynamicInstructionsKey(dynamicInstructionsKey,options){return{type:SET_DYNAMIC_INSTRUCTIONS_KEY,dynamicInstructionsKey,options}},exports.setDynamicInstructionsOverlayDismissCallback=function setDynamicInstructionsOverlayDismissCallback(dynamicInstructionsDismissCallback){return{type:SET_DYNAMIC_INSTRUCTIONS_DISMISS_CALLBACK,dynamicInstructionsDismissCallback}},exports.setTaRubric=function setTaRubric(taRubric){return{type:SET_TA_RUBRIC,taRubric}};var substituteInstructionImages=exports.substituteInstructionImages=function substituteInstructionImages(htmlText,substitutions){if(!htmlText)return htmlText;for(var prop in substitutions){var imageUrl=substitutions[prop],substitutionHtml='<span class="instructionsImageContainer">'+'<img src="'.concat(imageUrl,'" class="instructionsImage"/>')+"</span>",re=new RegExp("\\["+prop+"\\]","g");htmlText=htmlText.replace(re,substitutionHtml)}return htmlText};exports.determineInstructionsConstants=function determineInstructionsConstants(config){var shortInstructions2,level=config.level,noInstructionsWhenCollapsed=config.noInstructionsWhenCollapsed,hasContainedLevels=config.hasContainedLevels,teacherMarkdown=config.teacherMarkdown,muteBackgroundMusic=config.muteBackgroundMusic,unmuteBackgroundMusic=config.unmuteBackgroundMusic,instructions2=level.instructions2,inputOutputTable=level.inputOutputTable,levelVideos=level.levelVideos,mapReference=level.mapReference,referenceLinks=level.referenceLinks,programmingEnvironment=level.programmingEnvironment,longInstructions=level.longInstructions,shortInstructions=level.shortInstructions,dynamicInstructions=level.dynamicInstructions;noInstructionsWhenCollapsed?(shortInstructions&&!longInstructions&&(longInstructions=shortInstructions),shortInstructions=void 0):(shortInstructions2=instructions2,shortInstructions===longInstructions&&(longInstructions=void 0),inputOutputTable&&(longInstructions=longInstructions||shortInstructions),config.skin.instructions2ImageSubstitutions&&(longInstructions=substituteInstructionImages(longInstructions,config.skin.instructions2ImageSubstitutions),shortInstructions=substituteInstructionImages(shortInstructions,config.skin.instructions2ImageSubstitutions),shortInstructions2=substituteInstructionImages(shortInstructions2,config.skin.instructions2ImageSubstitutions)),config.skin.replaceInstructions&&(longInstructions=config.skin.replaceInstructions(longInstructions),shortInstructions=config.skin.replaceInstructions(shortInstructions)));var hasInstructionsToShow=shortInstructions||longInstructions,overlaySeen=(0,_utils.tryGetLocalStorage)("instructionsOverlaySeenOnce",!1),shouldShowOverlay=hasInstructionsToShow&&!hasContainedLevels&&(config.level.instructionsImportant||1===config.levelPosition||!overlaySeen);return shouldShowOverlay&&(0,_utils.trySetLocalStorage)("instructionsOverlaySeenOnce",!0),{noInstructionsWhenCollapsed:!!noInstructionsWhenCollapsed,overlayVisible:!!shouldShowOverlay,shortInstructions,shortInstructions2,longInstructions,dynamicInstructions,teacherMarkdown,hasContainedLevels,levelVideos,mapReference,referenceLinks,muteBackgroundMusic,unmuteBackgroundMusic,programmingEnvironment}}},"./src/redux/instructionsDialog.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.closeDialog=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===OPEN_DIALOG){if(!0===state.open)throw new Error("dialog is already open");return{open:!0,imgOnly:action.imgOnly,imgUrl:action.imgUrl}}if(action.type===CLOSE_DIALOG){if(!1===state.open)throw new Error("dialog is already closed");return{open:!1}}return state},exports.openDialog=void 0;var OPEN_DIALOG="instructionsDialog/OPEN_DIALOG",CLOSE_DIALOG="instructionsDialog/CLOSE_DIALOG",initialState={open:!1,imgOnly:!1};exports.openDialog=function openDialog(_ref){var imgOnly=_ref.imgOnly,imgUrl=_ref.imgUrl;return{type:OPEN_DIALOG,imgOnly,imgUrl}},exports.closeDialog=function closeDialog(){return{type:CLOSE_DIALOG}}},"./src/redux/pageConstants.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_PAGE_CONSTANTS)return Object.keys(action.props).forEach((function(key){if(!ALLOWED_KEYS.has(key))throw new Error('Property "'.concat(key,'" may not be set using the ').concat(action.type," action."));if(state[key]!==initialState[key]&&state[key]!==action.props[key])throw new Error("Can't change value of key \"".concat(key,'".'))})),_.assign({},state,action.props);return state},exports.setPageConstants=function setPageConstants(props){return{type:SET_PAGE_CONSTANTS,props}};var _=__webpack_require__("./node_modules/lodash/lodash.js"),SET_PAGE_CONSTANTS="pageConstants/SET_PAGE_CONSTANTS",ALLOWED_KEYS=new Set(["skinId","showNextHint","ttsShortInstructionsUrl","ttsLongInstructionsUrl","assetUrl","canHaveFeedbackReviewState","exampleSolutions","isViewingAsInstructorInTraining","channelId","codeOwnersName","hasDataMode","hasDesignMode","inStartBlocksMode","inToolboxBlocksMode","isChallengeLevel","isEmbedView","isResponsive","isIframeEmbed","isReadOnlyWorkspace","isCodeReviewing","isViewingOwnProject","hasBackgroundMusic","displayNotStartedBanner","displayOldVersionBanner","isShareView","isProjectLevel","isSubmittable","isSubmitted","noInstructionsWhenCollapsed","puzzleNumber","lessonTotal","showDebugButtons","showDebugConsole","showDebugWatch","showDebugSlider","debugConsoleDisabled","showMakerToggle","locale","hasContainedLevels","isDroplet","isBlockly","isBramble","isMinecraft","runButtonText","visualizationHasPadding","visualizationInWorkspace","hideCoordinateOverlay","hideSource","hideRunButton","hideResetButton","playspacePhoneFrame","noVisualization","pinWorkspaceToBottom","smallStaticAvatar","failureAvatar","aniGifURL","inputOutputTable","showAnimationMode","startInAnimationTab","allAnimationsSingleFrame","nonResponsiveVisualizationColumnWidth","is13Plus","isSignedIn","isEditingStartSources","userId","isK1","textToSpeechEnabled","documentationUrl","appType","nextLevelUrl","currentScriptLevelUrl","isProjectTemplateLevel","showProjectTemplateWorkspaceIcon","serverLevelId","serverProjectLevelId","serverScriptId","exportApp","widgetMode","librariesEnabled","validationEnabled","aiEnabled","aiModelId","aiModelName","isCurriculumLevel","recaptchaSiteKey"]),initialState={assetUrl:function assetUrl(){}}},"./src/redux/runState.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function reducer(state,action){if(state=state||initialState,action.type===SET_IS_RUNNING)return _lodash.default.assign({},state,{isRunning:action.isRunning,isDebuggerPaused:!1!==action.isRunning&&state.isDebuggerPaused,isDebuggingSprites:!1!==action.isRunning&&state.isDebuggingSprites});if(action.type===SET_IS_EDIT_WHILE_RUN)return _lodash.default.assign({},state,{isEditWhileRun:action.isEditWhileRun});if(action.type===SET_IS_DEBUGGER_PAUSED)return _lodash.default.assign({},state,{isRunning:!!action.isDebuggerPaused||state.isRunning,isDebuggerPaused:action.isDebuggerPaused,nextStep:action.nextStep});if(action.type===SET_STEP_SPEED&&"number"==typeof action.stepSpeed)return _lodash.default.assign({},state,{stepSpeed:action.stepSpeed});if(action.type===SET_AWAITING_CONTAINED_RESPONSE&&state.awaitingContainedResponse!==action.awaitingContainedResponse)return _objectSpread(_objectSpread({},state),{},{awaitingContainedResponse:action.awaitingContainedResponse});if(action.type===SET_IS_DEBUGGING_SPRITES&&state.isRunning)return _objectSpread(_objectSpread({},state),{},{isDebuggingSprites:action.isDebuggingSprites});return state},exports.setStepSpeed=exports.setIsRunning=exports.setIsEditWhileRun=exports.setIsDebuggingSprites=exports.setIsDebuggerPaused=exports.setAwaitingContainedResponse=void 0;var _lodash=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/lodash/lodash.js"));function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_IS_RUNNING="runState/SET_IS_RUNNING",SET_IS_EDIT_WHILE_RUN="runState/SET_IS_EDIT_WHILE_RUN",SET_IS_DEBUGGER_PAUSED="runState/SET_IS_DEBUGGER_PAUSED",SET_STEP_SPEED="runState/SET_STEP_SPEED",SET_AWAITING_CONTAINED_RESPONSE="runState/SET_AWAITING_CONTAINED_RESPONSE",SET_IS_DEBUGGING_SPRITES="runState/SET_IS_DEBUGGING_SPRITES",initialState={isRunning:!1,isEditWhileRun:!1,isDebuggerPaused:!1,nextStep:null,stepSpeed:1,isDebuggingSprites:!1,awaitingContainedResponse:!1};exports.setIsRunning=function setIsRunning(isRunning){return{type:SET_IS_RUNNING,isRunning}},exports.setIsEditWhileRun=function setIsEditWhileRun(isEditWhileRun){return{type:SET_IS_EDIT_WHILE_RUN,isEditWhileRun}},exports.setIsDebuggerPaused=function setIsDebuggerPaused(isDebuggerPaused,nextStep){return{type:SET_IS_DEBUGGER_PAUSED,isDebuggerPaused,nextStep}},exports.setStepSpeed=function setStepSpeed(stepSpeed){return{type:SET_STEP_SPEED,stepSpeed}},exports.setAwaitingContainedResponse=function setAwaitingContainedResponse(awaitingContainedResponse){return{type:SET_AWAITING_CONTAINED_RESPONSE,awaitingContainedResponse}},exports.setIsDebuggingSprites=function setIsDebuggingSprites(isDebuggingSprites){return{type:SET_IS_DEBUGGING_SPRITES,isDebuggingSprites}}},"./src/redux/studioAppActivity.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:studioAppActivityInitialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_START_IDLE)return Object.assign({},state,{isIdle:!0,idleStart:(new Date).getTime()});if(action.type===SET_END_IDLE){if(state.idleStart){var newIdleTime=state.idleTimeSinceLastReport+timeSinceIdleStart(state);return Object.assign({},state,{isIdle:!1,idleTimeSinceLastReport:newIdleTime})}return state}if(action.type===RESET_IDLE_TIME){var idleStart=state.isIdle?(new Date).getTime():null;return Object.assign({},state,{idleTimeSinceLastReport:0,idleStart})}return state},exports.setStartIdle=exports.setEndIdle=exports.resetIdleTime=exports.getIdleTimeSinceLastReport=void 0;var SET_START_IDLE="studioAppActivity/SET_START_IDLE",SET_END_IDLE="studioAppActivity/SET_END_IDLE",RESET_IDLE_TIME="studioAppActivity/RESET_IDLE_TIME",studioAppActivityInitialState={idleTimeSinceLastReport:0,idleStart:null,isIdle:!1};var timeSinceIdleStart=function timeSinceIdleStart(state){return(new Date).getTime()-state.idleStart};exports.setStartIdle=function setStartIdle(){return{type:SET_START_IDLE}},exports.setEndIdle=function setEndIdle(){return{type:SET_END_IDLE}},exports.resetIdleTime=function resetIdleTime(){return{type:RESET_IDLE_TIME}},exports.getIdleTimeSinceLastReport=function getIdleTimeSinceLastReport(state){return state.isIdle?state.idleTimeSinceLastReport+timeSinceIdleStart(state):state.idleTimeSinceLastReport}},"./src/redux/watchedExpressions.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.add=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:watchedExpressionsInitialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===ADD_EXPRESSION){var expression=action.expression,uuid=(0,_utils.createUuid)();return state.push(_immutable.default.Map({expression,uuid}))}if(action.type===UPDATE_VALUE){var value=action.value,_expression=action.expression;return state.map((function(e){return e.get("expression")===_expression?_immutable.default.Map({lastValue:value,expression:_expression,uuid:e.get("uuid")}):e}))}if(action.type===REMOVE_EXPRESSION)return state.filter((function(e){return e.get("expression")!==action.expression}));return state},exports.update=exports.remove=void 0;var _immutable=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_utils=__webpack_require__("./src/utils.js");var ADD_EXPRESSION="watchedExpressions/ADD_EXPRESSION",REMOVE_EXPRESSION="watchedExpressions/REMOVE_EXPRESSION",UPDATE_VALUE="watchedExpressions/UPDATE_VALUE",watchedExpressionsInitialState=_immutable.default.List();exports.add=function add(expression){return{type:ADD_EXPRESSION,expression}},exports.remove=function remove(expression){return{type:REMOVE_EXPRESSION,expression}},exports.update=function update(expression,value){return{type:UPDATE_VALUE,expression,value}}},"./src/templates/EnhancedSafeMarkdown.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedExpandableImagesWrapper=exports.ExpandableImagesWrapper=exports.ClickableTextWrapper=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_instructionsDialog=__webpack_require__("./src/redux/instructionsDialog.js"),_SafeMarkdown=_interopRequireDefault(__webpack_require__("./src/templates/SafeMarkdown.jsx")),_expandableImages=__webpack_require__("./src/templates/utils/expandableImages.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var UnconnectedExpandableImagesWrapper=exports.UnconnectedExpandableImagesWrapper=function(_React$Component){function UnconnectedExpandableImagesWrapper(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(UnconnectedExpandableImagesWrapper,_React$Component);var _proto=UnconnectedExpandableImagesWrapper.prototype;return _proto.componentDidMount=function componentDidMount(){this.postRenderHook()},_proto.componentDidUpdate=function componentDidUpdate(prevProps){this.postRenderHook()},_proto.postRenderHook=function postRenderHook(){var thisNode=_reactDom.default.findDOMNode(this);(0,_expandableImages.renderExpandableImages)(thisNode,this.props.showImageDialog)},_proto.render=function render(){return this.props.children},UnconnectedExpandableImagesWrapper}(_react.default.Component);_defineProperty(UnconnectedExpandableImagesWrapper,"propTypes",{showImageDialog:_propTypes.default.func.isRequired,children:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node),_propTypes.default.node]).isRequired});var ExpandableImagesWrapper=exports.ExpandableImagesWrapper=(0,_reactRedux.connect)(null,(function(dispatch){return{showImageDialog:function showImageDialog(imgUrl){dispatch((0,_instructionsDialog.openDialog)({imgOnly:!0,imgUrl}))}}}))(UnconnectedExpandableImagesWrapper),ClickableTextWrapper=exports.ClickableTextWrapper=function(_React$Component2){function ClickableTextWrapper(){return _React$Component2.apply(this,arguments)||this}_inheritsLoose(ClickableTextWrapper,_React$Component2);var _proto2=ClickableTextWrapper.prototype;return _proto2.componentDidMount=function componentDidMount(){this.postRenderHook()},_proto2.componentDidUpdate=function componentDidUpdate(prevProps){this.postRenderHook()},_proto2.postRenderHook=function postRenderHook(){var thisNode=_reactDom.default.findDOMNode(this);this.renderClickableText(thisNode)},_proto2.renderClickableText=function renderClickableText(node){var _this=this;node.querySelectorAll("b.clickable-text").forEach((function(clickableText,index){var id=clickableText.dataset.id,extraClass=" clickable-text-with-glow clickable-text-".concat(index);clickableText.className.includes(extraClass)||(clickableText.className+=extraClass),clickableText.onclick=function(){return _this.props.handleInstructionsTextClick(id)}}))},_proto2.render=function render(){return this.props.children},ClickableTextWrapper}(_react.default.Component);_defineProperty(ClickableTextWrapper,"propTypes",{handleInstructionsTextClick:_propTypes.default.func.isRequired,children:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node),_propTypes.default.node]).isRequired}),_defineProperty(exports.default=function(_React$Component3){function EnhancedSafeMarkdown(){return _React$Component3.apply(this,arguments)||this}return _inheritsLoose(EnhancedSafeMarkdown,_React$Component3),EnhancedSafeMarkdown.prototype.render=function render(){var result=_react.default.createElement(_SafeMarkdown.default,{markdown:this.props.markdown,openExternalLinksInNewTab:this.props.openExternalLinksInNewTab,className:this.props.className});return this.props.expandableImages&&(result=_react.default.createElement(ExpandableImagesWrapper,null,result)),this.props.handleInstructionsTextClick&&(result=_react.default.createElement(ClickableTextWrapper,{handleInstructionsTextClick:this.props.handleInstructionsTextClick},result)),result},EnhancedSafeMarkdown}(_react.default.Component),"propTypes",{markdown:_propTypes.default.string.isRequired,openExternalLinksInNewTab:_propTypes.default.bool,expandableImages:_propTypes.default.bool,className:_propTypes.default.string,handleInstructionsTextClick:_propTypes.default.func})},"./src/templates/LegacyButton.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.style=exports.default=exports.BUTTON_TYPES=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_excluded=["type","children","size"],_excluded2=["arrow"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var style=exports.style={base:{borderWidth:1,borderStyle:"solid",minWidth:100,marginTop:0,marginBottom:0,marginLeft:0,marginRight:0,":hover":{boxShadow:"2px 2px 5px rgba(0, 0, 0, 0.3)"}},large:{fontSize:35,lineHeight:"normal",paddingLeft:14,paddingRight:14},arrow:{base:{position:"relative",height:116,textAlign:"left",display:"inline-block"},left:{paddingLeft:58},right:{paddingRight:58}},arrowHead:{base:{position:"absolute",width:0,height:0,borderColor:"transparent",borderWidth:58,borderStyle:"solid"},left:function left(color){return{left:-48,borderRightColor:color}},right:function right(color){return{right:-48,borderLeftColor:color}}}};style.withArrow={base:{position:"relative",top:(116-style.base.borderWidth-20-44)/2,marginTop:0,marginBottom:0,marginLeft:0,marginRight:0,":hover":{boxShadow:"none"}},left:{paddingLeft:0},right:{paddingRight:0}};var BUTTON_TYPES=exports.BUTTON_TYPES={default:{style:{backgroundColor:_color.default.white,borderColor:_color.default.charcoal,color:_color.default.charcoal}},cancel:{style:{backgroundColor:_color.default.neutral_white,borderWidth:2,borderStyle:"solid",borderColor:_color.default.neutral_dark,color:_color.default.neutral_dark,":hover":{backgroundColor:_color.default.neutral_dark20,boxShadow:"none"},":focus":{backgroundColor:_color.default.neutral_dark20,boxShadow:"none"}}},primary:{style:{backgroundColor:_color.default.brand_secondary_default,borderColor:_color.default.brand_secondary_default,color:_color.default.neutral_white,":hover":{backgroundColor:_color.default.brand_secondary_dark,borderColor:_color.default.brand_secondary_dark,boxShadow:"none"}}},legacyPrimary:{style:{backgroundColor:_color.default.orange,borderColor:_color.default.orange,color:_color.default.neutral_white}},danger:{style:{backgroundColor:_color.default.product_negative_default,borderColor:_color.default.product_negative_default,color:_color.default.neutral_white,":hover":{backgroundColor:_color.default.product_negative_dark,borderColor:_color.default.product_negative_dark,boxShadow:"none"}}},action:{style:{backgroundColor:_color.default.purple,borderColor:_color.default.purple,color:_color.default.white}}},BaseButton=(0,_radium.default)((function BaseButton(_ref){var type=_ref.type,children=_ref.children,size=_ref.size,props=_objectWithoutProperties(_ref,_excluded),sizeStyle=style[size||"normal"],config=BUTTON_TYPES[type],styleArray=[style.base,config.style,sizeStyle];return _react.default.createElement("button",_extends({type:"button"},props,{style:[styleArray,props.style]}),children)}));BaseButton.propTypes={type:_propTypes.default.oneOf(Object.keys(BUTTON_TYPES)),children:_propTypes.default.node,size:_propTypes.default.oneOf(["normal","large"])};var ArrowButton=(0,_radium.default)((function ArrowButton(_ref2){var arrow=_ref2.arrow,props=_objectWithoutProperties(_ref2,_excluded2),config=BUTTON_TYPES[props.type];return _react.default.createElement("div",{style:[style.arrow.base,style.arrow[arrow],props.style]},_react.default.createElement("div",{style:[style.arrowHead.base,style.arrowHead[arrow](config.style.backgroundColor)]}),_react.default.createElement(BaseButton,_extends({},props,{style:[style.withArrow.base,style.withArrow[arrow]]})))}));ArrowButton.propTypes=Object.assign({},BaseButton.propTypes,{arrow:_propTypes.default.oneOf(["left","right"]).isRequired});var LegacyButton=(0,_radium.default)((function Button(props){return props.arrow?_react.default.createElement(ArrowButton,props):_react.default.createElement(BaseButton,props)}));LegacyButton.propTypes=Object.assign({},BaseButton.propTypes,{arrow:_propTypes.default.oneOf(["left","right"])});exports.default=LegacyButton},"./src/templates/Lightbulb.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var Lightbulb=exports.default=function(_React$Component){function Lightbulb(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(Lightbulb,_React$Component),Lightbulb.prototype.render=function render(){var bulbDisplay,numberCircle,countDisplay;if(this.props.isMinecraft){var href=this.props.lit?"iVBORw0KGgoAAAANSUhEUgAAAAsAAAAOCAYAAAD5YeaVAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAACzSURBVHjalJExDsIwDEW/GzbYG4m5A505BzuH6cQpEGdg6TlYWLp0rpSOiHZrZIaGCsfNwJcsR8mT/fVDkGJokToAYNdVyO1ZkqZcuEyA+RHgFsgOc3EL9s2ykQT4K3Oau68BKkCmxAYp+VpdZfhDCh7GSfS1WITvYZyw2waHwS8A+k4mu7+g7x/RqEJEF4tdV/H7dWf2DcefpNK43gjAM5SUgq21yTQU7JxLwmvGOfX+GQDlKDxFgn7+bgAAAABJRU5ErkJggg==":"iVBORw0KGgoAAAANSUhEUgAAAAsAAAAOCAYAAAD5YeaVAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AsRFQUQP8g1cwAAAKpJREFUKM+VkbENxCAMRR+nK1JHAmWCZIVMkWHZAyktmSCioKbzVRfBGYr7jRF+sj8fQytBy6gDIN579n1vSOfcw71qcF1Xcs5Ya7HWknMmpfRsNDVYa9s2AGKMzPOMc443A8UY1d2LP6TgUkpTe7E0vkspTNME8PgFzHeyOY6D67qaSTXYsyXeeznPU1JK8vtJKo0QAiGE7gMVvCzLMA0F3/c9hHvGZdT/APfyQc3umPvfAAAAAElFTkSuQmCC";bulbDisplay=_react.default.createElement("g",{className:this.props.shouldAnimate?"animate-hint":""},_react.default.createElement("image",{width:"450",height:"450",x:"80",y:"140",className:"pixelated",xlinkHref:"data:image/png;base64,"+href}))}else bulbDisplay=_react.default.createElement("g",{className:this.props.shouldAnimate?"animate-hint":""},_react.default.createElement("g",{transform:this.props.isRtl?"translate(0,200) scale(10.0,10.0)":"translate(245,200) scale(10.0,10.0)"},_react.default.createElement("path",{d:"M22 33H8.25C7.39062 30.3359 5.67188 27.9297 3.95312 25.6094C3.52344 25.0078 3.09375 24.4062 2.66406 23.8047C0.945312 21.3125 0 18.3906 0 15.125C0 6.78906 6.70312 0 15.125 0C23.4609 0 30.25 6.78906 30.25 15.2109C30.25 18.3906 29.2188 21.3125 27.5 23.8047C27.0703 24.4062 26.6406 25.0078 26.2109 25.6094C24.4922 27.9297 22.7734 30.3359 22 33ZM15.125 44C11.2578 44 8.25 40.9922 8.25 37.125V35.75H22V37.125C22 40.9922 18.9062 44 15.125 44ZM8.25 15.125C8.25 11.3438 11.2578 8.25 15.125 8.25C15.8125 8.25 16.5 7.64844 16.5 6.875C16.5 6.1875 15.8125 5.5 15.125 5.5C9.79688 5.5 5.5 9.88281 5.5 15.125C5.5 15.8984 6.10156 16.5 6.875 16.5C7.5625 16.5 8.25 15.8984 8.25 15.125Z",fill:"#1892E3"}),_react.default.createElement("path",{d:"M8.25 15.125C8.25 11.3438 11.2578 8.25 15.125 8.25C15.8125 8.25 16.5 7.64844 16.5 6.875C16.5 6.1875 15.8125 5.5 15.125 5.5C9.79688 5.5 5.5 9.88281 5.5 15.125C5.5 15.8984 6.10156 16.5 6.875 16.5C7.5625 16.5 8.25 15.8984 8.25 15.125Z",fill:"#1892E3"}),_react.default.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M13.75 6.875C14.4375 6.875 15.125 7.5625 15.125 8.33594C15.125 9.02344 14.4375 9.625 13.75 9.625C11.4297 9.625 9.625 11.5156 9.625 13.75C9.625 14.5234 8.9375 15.125 8.25 15.125C7.47656 15.125 6.875 14.5234 6.875 13.75C6.875 9.96875 9.88281 6.875 13.75 6.875Z",fill:"white"})));if(this.props.lit&&this.props.count){var countText=this.props.count>9?"9+":this.props.count;this.props.isMinecraft?countDisplay=_react.default.createElement("g",null,_react.default.createElement("text",{id:"hintCount",x:"400",y:"700",style:styles.countMinecraft},countText)):(countDisplay=_react.default.createElement("g",null,_react.default.createElement("text",{id:"hintCount",x:this.props.isRtl?"380":"495",y:"380",style:styles.count},countText)),numberCircle=_react.default.createElement("g",{className:this.props.shouldAnimate?"animate-hint":""},_react.default.createElement("circle",{cx:this.props.isRtl?"315":"565",cy:"310",r:"125",fill:_color.default.white,stroke:_color.default.blockly_flyout_gray,strokeWidth:"16"})))}return _react.default.createElement("svg",{width:this.props.size,height:this.props.size,style:this.props.style,viewBox:"0 0 612 792"},bulbDisplay,numberCircle,countDisplay)},Lightbulb}(_react.default.Component);_defineProperty(Lightbulb,"propTypes",{shouldAnimate:_propTypes.default.bool,count:_propTypes.default.number,lit:_propTypes.default.bool,size:_propTypes.default.number,style:_propTypes.default.object,isMinecraft:_propTypes.default.bool,isRtl:_propTypes.default.bool}),_defineProperty(Lightbulb,"defaultProps",{shouldAnimate:!1,count:0,lit:!0,size:40,style:{}});var styles={count:{fontWeight:"bold",fontSize:"200px",fill:_color.default.light_info_500,fontFamily:"Verdana, Geneva, sans-serif"},countMinecraft:{fontWeight:"bold",fontSize:"400px",fill:_color.default.white,stroke:_color.default.black,strokeWidth:"30px",fontFamily:"Verdana, Geneva, sans-serif"}};module.exports=exports.default},"./src/templates/instructions/AniGifPreview.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ImagePreview=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_instructionsDialog=__webpack_require__("./src/redux/instructionsDialog.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var ImagePreviewUnwrapped=function(_React$Component){function ImagePreviewUnwrapped(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ImagePreviewUnwrapped,_React$Component),ImagePreviewUnwrapped.prototype.render=function render(){return _react.default.createElement("div",{id:"ani-gif-preview-wrapper",style:styles.wrapper},_react.default.createElement("div",{id:"ani-gif-preview",style:[styles.aniGifPreview(this.props.url),this.props.noVisualization&&styles.bigPreview],onClick:this.props.showInstructionsDialog}))},ImagePreviewUnwrapped}(_react.default.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(ImagePreviewUnwrapped,"propTypes",{url:_propTypes.default.string.isRequired,showInstructionsDialog:_propTypes.default.func.isRequired,noVisualization:_propTypes.default.bool.isRequired});var styles={wrapper:{display:"inline-block",position:"relative"},aniGifPreview:function aniGifPreview(url){return{cursor:"pointer",backgroundImage:"url('".concat(url,"')")}},bigPreview:{width:240,height:180,backgroundSize:"240px 180px"}},ImagePreview=exports.ImagePreview=(0,_radium.default)(ImagePreviewUnwrapped);exports.default=(0,_reactRedux.connect)((function(state){return{url:state.pageConstants.aniGifURL,noVisualization:state.pageConstants.noVisualization}}),(function(dispatch){return{showInstructionsDialog:function showInstructionsDialog(){dispatch((0,_instructionsDialog.openDialog)({imgOnly:!0}))}}}))(ImagePreview)},"./src/templates/instructions/ExampleImage.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=ExampleImage;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ExampleImage(_ref){var src=_ref.src;return _react.default.createElement("img",{style:styles.img,src,alt:""})}ExampleImage.propTypes={src:_propTypes.default.string.isRequired};var styles={img:{boxShadow:"0 10px 13px -11px ".concat(_color.default.black),border:"2px solid ".concat(_color.default.light_gray),borderRadius:25,boxSizing:"border-box"}};module.exports=exports.default},"./src/templates/instructions/ImmersiveReaderButton.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _immersiveReaderSdk=__webpack_require__("./node_modules/@microsoft/immersive-reader-sdk/lib/immersive-reader-sdk.js"),_classnames=_interopRequireDefault(__webpack_require__("./node_modules/classnames/index.js")),_jsCookie=_interopRequireDefault(__webpack_require__("./node_modules/js-cookie/src/js.cookie.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_immersive_reader=_interopRequireDefault(__webpack_require__("./src/util/immersive_reader.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var ImmersiveReaderButton=function(_Component){function ImmersiveReaderButton(){return _Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ImmersiveReaderButton,_Component);var _proto=ImmersiveReaderButton.prototype;return _proto.componentDidMount=function componentDidMount(){this.shouldRender()&&!this.renderButtonsCalled&&((0,_immersiveReaderSdk.renderButtons)({elements:[this.container]}),this.renderButtonsCalled=!0)},_proto.handleKeyDown=function handleKeyDown(event,locale,title,text){"Enter"!==event.key&&" "!==event.key||((0,_immersive_reader.default)(locale,title,text),event.preventDefault())},_proto.render=function render(){var _this=this,_this$props=this.props,title=_this$props.title,text=_this$props.text,hasRoundBorders=_this$props.hasRoundBorders,isLegacyStyles=_this$props.isLegacyStyles,locale=_jsCookie.default.get("language_")||"en-US";return this.shouldRender()?_react.default.createElement("div",{tabIndex:0,role:"button",ref:function ref(el){return _this.container=el},className:(0,_classnames.default)("immersive-reader-button",isLegacyStyles&&"immersive-reader-button-legacy-styles"),"data-button-style":"icon",style:{borderRadius:hasRoundBorders?4:"4px 0 0 4px"},"data-locale":locale,onClick:function onClick(){(0,_immersive_reader.default)(locale,title,text)},onKeyDown:function onKeyDown(e){return _this.handleKeyDown(e,locale,title,text)}}):null},_proto.shouldRender=function shouldRender(){return!!this.props.text},ImmersiveReaderButton}(_react.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(ImmersiveReaderButton,"propTypes",{title:_propTypes.default.string,text:_propTypes.default.string,hasRoundBorders:_propTypes.default.bool,isLegacyStyles:_propTypes.default.bool});exports.default=ImmersiveReaderButton;module.exports=exports.default},"./src/templates/instructions/InputOutputTable.jsx":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var InputOutputTable=function InputOutputTable(props){return _react.default.createElement("div",null,_react.default.createElement("table",null,_react.default.createElement("tbody",null,_react.default.createElement("tr",null,_react.default.createElement("th",null,"Input"),_react.default.createElement("th",null,"Output")),props.data.map((function(item,index){return _react.default.createElement("tr",{key:index},_react.default.createElement("td",null,item[0]),_react.default.createElement("td",null,item[1]))})))))};InputOutputTable.propTypes={data:_propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.number)).isRequired},module.exports=InputOutputTable},"./src/templates/instructions/Instructions.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_AniGifPreview=_interopRequireDefault(__webpack_require__("./src/templates/instructions/AniGifPreview.jsx")),_ExampleImage=_interopRequireDefault(__webpack_require__("./src/templates/instructions/ExampleImage.jsx")),_ImmersiveReaderButton=_interopRequireDefault(__webpack_require__("./src/templates/instructions/ImmersiveReaderButton.jsx")),_InputOutputTable=_interopRequireDefault(__webpack_require__("./src/templates/instructions/InputOutputTable.jsx")),_MarkdownInstructions=_interopRequireDefault(__webpack_require__("./src/templates/instructions/MarkdownInstructions.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(exports.default=function(_React$Component){function Instructions(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(Instructions,_React$Component),Instructions.prototype.render=function render(){var _this$props=this.props,inTopPane=_this$props.inTopPane,instructions=_this$props.instructions,onResize=_this$props.onResize,isBlockly=_this$props.isBlockly,isImmersiveButtonHasRoundBorders=_this$props.isImmersiveButtonHasRoundBorders,isLegacyImmersiveStyles=_this$props.isLegacyImmersiveStyles,noInstructionsWhenCollapsed=_this$props.noInstructionsWhenCollapsed,inputOutputTable=_this$props.inputOutputTable,imgURL=_this$props.imgURL,authoredHints=_this$props.authoredHints;return _react.default.createElement("div",{style:inTopPane?styles.inTopPane:styles.notInTopPane},instructions&&_react.default.createElement(_react.default.Fragment,null,_react.default.createElement(_ImmersiveReaderButton.default,{title:_locale.default.instructions(),text:instructions,hasRoundBorders:isImmersiveButtonHasRoundBorders,isLegacyStyles:isLegacyImmersiveStyles}),_react.default.createElement(_MarkdownInstructions.default,{markdown:instructions,onResize,inTopPane,isBlockly,noInstructionsWhenCollapsed})),inputOutputTable&&_react.default.createElement(_InputOutputTable.default,{data:inputOutputTable}),imgURL&&!inTopPane&&_react.default.createElement(_ExampleImage.default,{src:imgURL}),imgURL&&inTopPane&&_react.default.createElement(_AniGifPreview.default,null),authoredHints)},Instructions}(_react.default.Component),"propTypes",{instructions:_propTypes.default.string,imgURL:_propTypes.default.string,authoredHints:_propTypes.default.element,inputOutputTable:_propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.number)),inTopPane:_propTypes.default.bool,onResize:_propTypes.default.func,isBlockly:_propTypes.default.bool,isImmersiveButtonHasRoundBorders:_propTypes.default.bool,isLegacyImmersiveStyles:_propTypes.default.bool,noInstructionsWhenCollapsed:_propTypes.default.bool});var styles={inTopPane:{overflow:"hidden"},notInTopPane:{overflow:"auto"}};module.exports=exports.default},"./src/templates/instructions/MarkdownInstructions.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_EnhancedSafeMarkdown=_interopRequireDefault(__webpack_require__("./src/templates/EnhancedSafeMarkdown.jsx")),_utils=__webpack_require__("./src/templates/instructions/utils.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var MarkdownInstructions=function(_React$Component){function MarkdownInstructions(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(MarkdownInstructions,_React$Component);var _proto=MarkdownInstructions.prototype;return _proto.componentDidMount=function componentDidMount(){this.configureMarkdown_()},_proto.componentDidUpdate=function componentDidUpdate(prevProps){prevProps.markdown!==this.props.markdown&&this.configureMarkdown_()},_proto.componentWillUnmount=function componentWillUnmount(){var detailsDOM=(0,_jquery.default)(_reactDom.default.findDOMNode(this)).find("details");detailsDOM.details&&detailsDOM.off("toggle.details.TopInstructions")},_proto.configureMarkdown_=function configureMarkdown_(){var _this=this;if(this.props.onResize){var thisNode=_reactDom.default.findDOMNode(this),detailsDOM=(0,_jquery.default)(thisNode).find("details");detailsDOM.details&&(detailsDOM.details(),detailsDOM.on({"toggle.details.TopInstructions":function toggleDetailsTopInstructions(){_this.props.onResize()}})),this.props.isBlockly&&Blockly.BlockSpace.onMainBlockSpaceCreated((function(){(0,_utils.convertXmlToBlockly)(_reactDom.default.findDOMNode(_this)),_this.props.onResize()})),(0,_jquery.default)(thisNode).find("img").load(this.props.onResize)}},_proto.render=function render(){var _this$props=this.props,inTopPane=_this$props.inTopPane,markdown=_this$props.markdown,canCollapse=!this.props.noInstructionsWhenCollapsed;return _react.default.createElement("div",{className:"instructions-markdown",style:[styles.standard,inTopPane&&styles.inTopPane,inTopPane&&canCollapse&&styles.inTopPaneCanCollapse]},_react.default.createElement(_EnhancedSafeMarkdown.default,{markdown,expandableImages:!0}))},MarkdownInstructions}(_react.default.Component);_defineProperty(MarkdownInstructions,"propTypes",{markdown:_propTypes.default.string.isRequired,noInstructionsWhenCollapsed:_propTypes.default.bool,onResize:_propTypes.default.func,inTopPane:_propTypes.default.bool,isBlockly:_propTypes.default.bool,showImageDialog:_propTypes.default.func}),_defineProperty(MarkdownInstructions,"defaultProps",{noInstructionsWhenCollapsed:!1});var styles={standard:{marginBottom:35,paddingTop:19},inTopPane:{marginTop:10,marginBottom:10,paddingTop:0},inTopPaneCanCollapse:{marginTop:0,marginBottom:0}};exports.default=(0,_radium.default)(MarkdownInstructions);module.exports=exports.default},"./src/templates/instructions/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.convertXmlToBlockly=function convertXmlToBlockly(xmlContainer,isRtl){Array.from(xmlContainer.getElementsByClassName("readonly-block-space-container")).forEach((function(container){return container.remove()}));var xmls=xmlContainer.getElementsByTagName("xml");Array.prototype.forEach.call(xmls,(function(xml){if(!xml.getElementsByTagName("svg").length){!function removeCommentNodes(root){var commentWalker=document.createTreeWalker(root,NodeFilter.SHOW_COMMENT,{acceptNode:function acceptNode(node){return NodeFilter.FILTER_ACCEPT}},!1),last=commentWalker.nextNode();if(last){for(;commentWalker.nextNode();)last.remove(),last=commentWalker.currentNode;last.remove()}}(xml);var inline="P"===xml.parentNode.tagName,blockSpaceContainer=document.createElement(inline?"span":"div");blockSpaceContainer.classList.add("readonly-block-space-container"),inline&&(blockSpaceContainer.style.display="inline-block"),xml.parentNode.insertBefore(blockSpaceContainer,xml),xml.style.display="none";var blockSpace=Blockly.createEmbeddedWorkspace(blockSpaceContainer,xml,{noScrolling:!0,inline,rtl:isRtl}),withPadding=!inline,metrics=blockSpace.getMetrics();Blockly.addChangeListener(blockSpace,(function(){var oldHeight=metrics.contentHeight,oldWidth=metrics.contentWidth,newHeight=blockSpace.getMetrics().contentHeight,newWidth=blockSpace.getMetrics().contentWidth;newHeight===oldHeight&&newWidth===oldWidth||(shrinkBlockSpaceContainer(blockSpace,withPadding),metrics=blockSpace.getMetrics())})),shrinkBlockSpaceContainer(blockSpace,withPadding)}}))},exports.getOuterHeight=function getOuterHeight(component){var includeMargin=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_jquery.default)(_reactDom.default.findDOMNode(component)).outerHeight(includeMargin)},exports.hasInstructions=function hasInstructions(shortInstructions,longInstructions,hasContainedLevels){return!!(shortInstructions||longInstructions||hasContainedLevels)},exports.scrollBy=function scrollBy(element,deltaY){var animate=arguments.length>2&&void 0!==arguments[2]?arguments[2]:400,newScrollTop=element.scrollTop+deltaY;scrollTo(element,newScrollTop,animate)},exports.scrollTo=scrollTo,exports.shouldDisplayChatTips=function shouldDisplayChatTips(skinId){switch(skinId){case"jigsaw":case"infinity":case"anna":case"elsa":case"craft":case"hoc2015":case"hoc2015x":return!1;default:return!0}},exports.shrinkBlockSpaceContainer=shrinkBlockSpaceContainer;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function scrollTo(element,scrollTop){var animate=arguments.length>2&&void 0!==arguments[2]?arguments[2]:400;if(animate){var $elem=(0,_jquery.default)(element);$elem.is(":animated")||$elem.animate({scrollTop},animate)}else element.scrollTop=scrollTop}function shrinkBlockSpaceContainer(blockSpace,withPadding){var container=blockSpace.getContainer(),metrics=blockSpace.getMetrics(),height=metrics.contentHeight,width=metrics.contentWidth;withPadding&&(height+=2*metrics.contentTop,width+=metrics.contentLeft),container.style.height=height+"px",container.style.width=width+"px",Blockly.cdoUtils.workspaceSvgResize(blockSpace)}},"./src/templates/utils/expandableImages.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.renderExpandableImages=function renderExpandableImages(node,showImageDialog){for(var expandableImages=node.querySelectorAll(".expandable-image"),_loop=function _loop(){var expandableImg=expandableImages[i];_reactDom.default.render(_react.default.createElement(_AniGifPreview.ImagePreview,{url:expandableImg.dataset.url,noVisualization:!1,showInstructionsDialog:function showInstructionsDialog(){return showImageDialog(expandableImg.dataset.url)}}),expandableImg)},i=0;i<expandableImages.length;i++)_loop()};var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_AniGifPreview=__webpack_require__("./src/templates/instructions/AniGifPreview.jsx");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}},"./src/util/immersive_reader.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function handleLaunchImmersiveReader(locale,title,text){(function getTokenAndSubdomainAsync(){return new Promise((function(resolve,reject){$.ajax({url:"/api/immersive_reader_token",type:"GET",success:function success(data){data.error?reject(data.error):resolve(data)}})}))})().then((function(response){var token=response.token,subdomain=response.subdomain,data={title,chunks:[{content:sanitizeText(text),lang:locale}]};(0,_immersiveReaderSdk.launchAsync)(token,subdomain,data,{uiZIndex:2113})})).catch((function(error){console.error(error)}))};var _immersiveReaderSdk=__webpack_require__("./node_modules/@microsoft/immersive-reader-sdk/lib/immersive-reader-sdk.js");function sanitizeText(text){return text?text=(text=text.replace(/<[^>]*>/g,"")).replace(/[`*]/g,""):text}module.exports=exports.default},"./src/redux/blockly.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.setFailedToGenerateCode=exports.setHasIncompatibleSources=void 0;var blocklySlice=(0,__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js").createSlice)({name:"blockly",initialState:{hasIncompatibleSources:!1,failedToGenerateCode:!1},reducers:{setHasIncompatibleSources:function(state,action){state.hasIncompatibleSources=action.payload},setFailedToGenerateCode:function(state,action){state.failedToGenerateCode=action.payload}}});exports.setHasIncompatibleSources=(_a=blocklySlice.actions).setHasIncompatibleSources,exports.setFailedToGenerateCode=_a.setFailedToGenerateCode,exports.default=blocklySlice.reducer},"./src/redux/layout.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getVisualizationScale=exports.setVisualizationScale=void 0;var toolkit_1=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),layoutSlice=(0,toolkit_1.createSlice)({name:"layout",initialState:{visualizationScale:null},reducers:{setVisualizationScale:function(state,action){state.visualizationScale=action.payload}}});exports.setVisualizationScale=layoutSlice.actions.setVisualizationScale;exports.getVisualizationScale=(0,toolkit_1.createSelector)((function(state){return state.layout}),(function(state){return null==state?void 0:state.visualizationScale})),exports.default=layoutSlice.reducer}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,