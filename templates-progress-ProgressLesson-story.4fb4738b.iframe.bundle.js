"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4632],{"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.ts");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=exports.fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)},fakeLevels=(exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))},exports.fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))}),fakeProgressForLevels=exports.fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress},randomNumberUpTo100=(exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})},exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})},function randomNumberUpTo100(){return Math.floor(100*Math.random())}),lessonId=1,fakeLessonWithLevels=exports.fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)},fakeStudents=exports.fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))},fakeUnitData=exports.fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},fakeStudentLevelProgress=exports.fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress},fakeStudentLastUpdate=exports.fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate},fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./src/templates/progress/ProgressLesson.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithFocusArea=exports.UnlockedLockableLesson=exports.UnlockedLessonAsVerifiedInstructor=exports.LockedLessonSignedOut=exports.LockedLessonAsVerifiedInstructor=exports.LockedLessonAsUnverifiedInstructor=exports.LockedLessonAsParticipant=exports.HiddenAsParticipant=exports.HiddenAsInstructor=exports.ForPeerReviews=exports.Default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_hiddenLessonRedux=_interopRequireDefault(__webpack_require__("./src/code-studio/hiddenLessonRedux.js")),_lessonLockRedux=_interopRequireDefault(__webpack_require__("./src/code-studio/lessonLockRedux.js")),_progressRedux=_interopRequireDefault(__webpack_require__("./src/code-studio/progressRedux.ts")),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_teacherSectionsRedux=_interopRequireDefault(__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.ts"),_ProgressLesson=__webpack_require__("./src/templates/progress/ProgressLesson.jsx"),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}exports.default={component:_ProgressLesson.UnconnectedProgressLesson};var defaultProps={lesson:(0,_progressTestHelpers.fakeLesson)("Maze",1),levels:[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevels)(1)[0]),{},{name:"First progression"})].concat(function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,_progressTestHelpers.fakeLevels)(5,{startLevel:2}).map((function(level){return _objectSpread(_objectSpread({},level),{},{progression:"Second Progression"})}))),[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevels)(1)[0]),{},{name:"Last progression"})]),viewAs:_viewAsRedux.ViewType.Instructor,isVisible:!0,isLockedForUser:!1,isLockedForAllStudents:!1,lockableAuthorized:!0,lockableAuthorizedLoaded:!0,hiddenForStudents:!1,lockStatusLoaded:!0},store=(0,_redux.createStore)((0,_redux.combineReducers)({teacherSections:_teacherSectionsRedux.default,progress:_progressRedux.default,hiddenLesson:_hiddenLessonRedux.default,lessonLock:_lessonLockRedux.default}),{progress:{lessonGroups:[],lessons:[{levels:[]}],focusAreaLessonIds:[],isSummaryView:!1,deeperLearningCourse:!1,scriptName:"script-name",scriptId:17},teacherSections:{sectionsAreLoaded:!0,sections:{},sectionIds:[]},hiddenLesson:{},lessonLock:{}}),Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store},_react.default.createElement(_ProgressLesson.UnconnectedProgressLesson,_extends({},defaultProps,args)))};exports.Default=Template.bind({});(exports.WithFocusArea=Template.bind({})).args={lesson:_objectSpread(_objectSpread({},defaultProps.lesson),{},{isFocusArea:!0})},(exports.ForPeerReviews=Template.bind({})).args={viewAs:_viewAsRedux.ViewType.Participant,currentLessonId:-1,lesson:{id:-1,isFocusArea:!1,lockable:!1,name:"You must complete 4 reviews for this unit"},levels:[{id:"-1",name:"Link to submitted review",status:_sharedConstants.LevelStatus.perfect,isLocked:!1,url:"/peer_reviews/1",levelNumber:1},{id:"-1",name:"Review a new submission",status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,url:"/pull-review",levelNumber:2},{id:"-1",icon:"fa-lock",name:"Reviews unavailable at this time",status:_sharedConstants.LevelStatus.not_tried,isLocked:!0,url:"",levelNumber:3},{id:"-1",icon:"fa-lock",name:"Reviews unavailable at this time",status:_sharedConstants.LevelStatus.not_tried,isLocked:!0,url:"",levelNumber:4}]},(exports.HiddenAsInstructor=Template.bind({})).args={isVisible:!0},(exports.HiddenAsParticipant=Template.bind({})).args={hiddenForStudents:!0,isVisible:!0},(exports.LockedLessonAsVerifiedInstructor=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Assessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForAllStudents:!0},(exports.UnlockedLessonAsVerifiedInstructor=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForAllStudents:!1},(exports.LockedLessonAsUnverifiedInstructor=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForUser:!0,lockableAuthorized:!1},(exports.LockedLessonSignedOut=Template.bind({})).args={viewAs:_viewAsRedux.ViewType.Participant,lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForUser:!0},(exports.LockedLessonAsParticipant=Template.bind({})).args={viewAs:_viewAsRedux.ViewType.Participant,lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}).map((function(level){return _objectSpread(_objectSpread({},level),{},{isLocked:!0})})),isLockedForUser:!0},(exports.UnlockedLockableLesson=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}).map((function(level){return _objectSpread(_objectSpread({},level),{},{status:_sharedConstants.LevelStatus.not_tried})}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,