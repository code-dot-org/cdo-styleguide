/*! For license information please see 1067.d9a58e64.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1067],{"./node_modules/aws-sdk/clients/cognitoidentity.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/aws-sdk/lib/browser_loader.js");var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),Service=AWS.Service,apiLoader=AWS.apiLoader;apiLoader.services.cognitoidentity={},AWS.CognitoIdentity=Service.defineService("cognitoidentity",["2014-06-30"]),Object.defineProperty(apiLoader.services.cognitoidentity,"2014-06-30",{get:function get(){var model=__webpack_require__("./node_modules/aws-sdk/apis/cognito-identity-2014-06-30.min.json");return model.paginators=__webpack_require__("./node_modules/aws-sdk/apis/cognito-identity-2014-06-30.paginators.json").X,model},enumerable:!0,configurable:!0}),module.exports=AWS.CognitoIdentity},"./node_modules/aws-sdk/clients/firehose.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/aws-sdk/lib/browser_loader.js");var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),Service=AWS.Service,apiLoader=AWS.apiLoader;apiLoader.services.firehose={},AWS.Firehose=Service.defineService("firehose",["2015-08-04"]),Object.defineProperty(apiLoader.services.firehose,"2015-08-04",{get:function get(){var model=__webpack_require__("./node_modules/aws-sdk/apis/firehose-2015-08-04.min.json");return model.paginators=__webpack_require__("./node_modules/aws-sdk/apis/firehose-2015-08-04.paginators.json").X,model},enumerable:!0,configurable:!0}),module.exports=AWS.Firehose},"./node_modules/aws-sdk/clients/sts.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/aws-sdk/lib/browser_loader.js");var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),Service=AWS.Service,apiLoader=AWS.apiLoader;apiLoader.services.sts={},AWS.STS=Service.defineService("sts",["2011-06-15"]),__webpack_require__("./node_modules/aws-sdk/lib/services/sts.js"),Object.defineProperty(apiLoader.services.sts,"2011-06-15",{get:function get(){var model=__webpack_require__("./node_modules/aws-sdk/apis/sts-2011-06-15.min.json");return model.paginators=__webpack_require__("./node_modules/aws-sdk/apis/sts-2011-06-15.paginators.json").X,model},enumerable:!0,configurable:!0}),module.exports=AWS.STS},"./node_modules/aws-sdk/lib/browserCryptoLib.js":(module,exports,__webpack_require__)=>{var Hmac=__webpack_require__("./node_modules/aws-sdk/lib/browserHmac.js"),Md5=__webpack_require__("./node_modules/aws-sdk/lib/browserMd5.js"),Sha1=__webpack_require__("./node_modules/aws-sdk/lib/browserSha1.js"),Sha256=__webpack_require__("./node_modules/aws-sdk/lib/browserSha256.js");module.exports={createHash:function createHash(alg){if("md5"===(alg=alg.toLowerCase()))return new Md5;if("sha256"===alg)return new Sha256;if("sha1"===alg)return new Sha1;throw new Error("Hash algorithm "+alg+" is not supported in the browser SDK")},createHmac:function createHmac(alg,key){if("md5"===(alg=alg.toLowerCase()))return new Hmac(Md5,key);if("sha256"===alg)return new Hmac(Sha256,key);if("sha1"===alg)return new Hmac(Sha1,key);throw new Error("HMAC algorithm "+alg+" is not supported in the browser SDK")},createSign:function(){throw new Error("createSign is not implemented in the browser")}}},"./node_modules/aws-sdk/lib/browserHashUtils.js":(module,exports,__webpack_require__)=>{var Buffer=__webpack_require__("./node_modules/aws-sdk/node_modules/buffer/index.js").hp;"undefined"!=typeof ArrayBuffer&&void 0===ArrayBuffer.isView&&(ArrayBuffer.isView=function(arg){return viewStrings.indexOf(Object.prototype.toString.call(arg))>-1});var viewStrings=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","[object DataView]"];module.exports={isEmptyData:function isEmptyData(data){return"string"==typeof data?0===data.length:0===data.byteLength},convertToBuffer:function convertToBuffer(data){return"string"==typeof data&&(data=new Buffer(data,"utf8")),ArrayBuffer.isView(data)?new Uint8Array(data.buffer,data.byteOffset,data.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(data)}}},"./node_modules/aws-sdk/lib/browserHmac.js":(module,exports,__webpack_require__)=>{var hashUtils=__webpack_require__("./node_modules/aws-sdk/lib/browserHashUtils.js");function Hmac(hashCtor,secret){this.hash=new hashCtor,this.outer=new hashCtor;var inner=function bufferFromSecret(hashCtor,secret){var input=hashUtils.convertToBuffer(secret);if(input.byteLength>hashCtor.BLOCK_SIZE){var bufferHash=new hashCtor;bufferHash.update(input),input=bufferHash.digest()}var buffer=new Uint8Array(hashCtor.BLOCK_SIZE);return buffer.set(input),buffer}(hashCtor,secret),outer=new Uint8Array(hashCtor.BLOCK_SIZE);outer.set(inner);for(var i=0;i<hashCtor.BLOCK_SIZE;i++)inner[i]^=54,outer[i]^=92;this.hash.update(inner),this.outer.update(outer);for(i=0;i<inner.byteLength;i++)inner[i]=0}module.exports=Hmac,Hmac.prototype.update=function(toHash){if(hashUtils.isEmptyData(toHash)||this.error)return this;try{this.hash.update(hashUtils.convertToBuffer(toHash))}catch(e){this.error=e}return this},Hmac.prototype.digest=function(encoding){return this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest(encoding)}},"./node_modules/aws-sdk/lib/browserMd5.js":(module,exports,__webpack_require__)=>{var hashUtils=__webpack_require__("./node_modules/aws-sdk/lib/browserHashUtils.js"),Buffer=__webpack_require__("./node_modules/aws-sdk/node_modules/buffer/index.js").hp;function Md5(){this.state=[1732584193,4023233417,2562383102,271733878],this.buffer=new DataView(new ArrayBuffer(64)),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}function cmn(q,a,b,x,s,t){return((a=(a+q&4294967295)+(x+t&4294967295)&4294967295)<<s|a>>>32-s)+b&4294967295}function ff(a,b,c,d,x,s,t){return cmn(b&c|~b&d,a,b,x,s,t)}function gg(a,b,c,d,x,s,t){return cmn(b&d|c&~d,a,b,x,s,t)}function hh(a,b,c,d,x,s,t){return cmn(b^c^d,a,b,x,s,t)}function ii(a,b,c,d,x,s,t){return cmn(c^(b|~d),a,b,x,s,t)}module.exports=Md5,Md5.BLOCK_SIZE=64,Md5.prototype.update=function(sourceData){if(hashUtils.isEmptyData(sourceData))return this;if(this.finished)throw new Error("Attempted to update an already finished hash.");var data=hashUtils.convertToBuffer(sourceData),position=0,byteLength=data.byteLength;for(this.bytesHashed+=byteLength;byteLength>0;)this.buffer.setUint8(this.bufferLength++,data[position++]),byteLength--,64===this.bufferLength&&(this.hashBuffer(),this.bufferLength=0);return this},Md5.prototype.digest=function(encoding){if(!this.finished){var buffer=this.buffer,undecoratedLength=this.bufferLength,bitsHashed=8*this.bytesHashed;if(buffer.setUint8(this.bufferLength++,128),undecoratedLength%64>=56){for(var i=this.bufferLength;i<64;i++)buffer.setUint8(i,0);this.hashBuffer(),this.bufferLength=0}for(i=this.bufferLength;i<56;i++)buffer.setUint8(i,0);buffer.setUint32(56,bitsHashed>>>0,!0),buffer.setUint32(60,Math.floor(bitsHashed/4294967296),!0),this.hashBuffer(),this.finished=!0}var out=new DataView(new ArrayBuffer(16));for(i=0;i<4;i++)out.setUint32(4*i,this.state[i],!0);var buff=new Buffer(out.buffer,out.byteOffset,out.byteLength);return encoding?buff.toString(encoding):buff},Md5.prototype.hashBuffer=function(){var buffer=this.buffer,state=this.state,a=state[0],b=state[1],c=state[2],d=state[3];a=ff(a,b,c,d,buffer.getUint32(0,!0),7,3614090360),d=ff(d,a,b,c,buffer.getUint32(4,!0),12,3905402710),c=ff(c,d,a,b,buffer.getUint32(8,!0),17,606105819),b=ff(b,c,d,a,buffer.getUint32(12,!0),22,3250441966),a=ff(a,b,c,d,buffer.getUint32(16,!0),7,4118548399),d=ff(d,a,b,c,buffer.getUint32(20,!0),12,1200080426),c=ff(c,d,a,b,buffer.getUint32(24,!0),17,2821735955),b=ff(b,c,d,a,buffer.getUint32(28,!0),22,4249261313),a=ff(a,b,c,d,buffer.getUint32(32,!0),7,1770035416),d=ff(d,a,b,c,buffer.getUint32(36,!0),12,2336552879),c=ff(c,d,a,b,buffer.getUint32(40,!0),17,4294925233),b=ff(b,c,d,a,buffer.getUint32(44,!0),22,2304563134),a=ff(a,b,c,d,buffer.getUint32(48,!0),7,1804603682),d=ff(d,a,b,c,buffer.getUint32(52,!0),12,4254626195),c=ff(c,d,a,b,buffer.getUint32(56,!0),17,2792965006),a=gg(a,b=ff(b,c,d,a,buffer.getUint32(60,!0),22,1236535329),c,d,buffer.getUint32(4,!0),5,4129170786),d=gg(d,a,b,c,buffer.getUint32(24,!0),9,3225465664),c=gg(c,d,a,b,buffer.getUint32(44,!0),14,643717713),b=gg(b,c,d,a,buffer.getUint32(0,!0),20,3921069994),a=gg(a,b,c,d,buffer.getUint32(20,!0),5,3593408605),d=gg(d,a,b,c,buffer.getUint32(40,!0),9,38016083),c=gg(c,d,a,b,buffer.getUint32(60,!0),14,3634488961),b=gg(b,c,d,a,buffer.getUint32(16,!0),20,3889429448),a=gg(a,b,c,d,buffer.getUint32(36,!0),5,568446438),d=gg(d,a,b,c,buffer.getUint32(56,!0),9,3275163606),c=gg(c,d,a,b,buffer.getUint32(12,!0),14,4107603335),b=gg(b,c,d,a,buffer.getUint32(32,!0),20,1163531501),a=gg(a,b,c,d,buffer.getUint32(52,!0),5,2850285829),d=gg(d,a,b,c,buffer.getUint32(8,!0),9,4243563512),c=gg(c,d,a,b,buffer.getUint32(28,!0),14,1735328473),a=hh(a,b=gg(b,c,d,a,buffer.getUint32(48,!0),20,2368359562),c,d,buffer.getUint32(20,!0),4,4294588738),d=hh(d,a,b,c,buffer.getUint32(32,!0),11,2272392833),c=hh(c,d,a,b,buffer.getUint32(44,!0),16,1839030562),b=hh(b,c,d,a,buffer.getUint32(56,!0),23,4259657740),a=hh(a,b,c,d,buffer.getUint32(4,!0),4,2763975236),d=hh(d,a,b,c,buffer.getUint32(16,!0),11,1272893353),c=hh(c,d,a,b,buffer.getUint32(28,!0),16,4139469664),b=hh(b,c,d,a,buffer.getUint32(40,!0),23,3200236656),a=hh(a,b,c,d,buffer.getUint32(52,!0),4,681279174),d=hh(d,a,b,c,buffer.getUint32(0,!0),11,3936430074),c=hh(c,d,a,b,buffer.getUint32(12,!0),16,3572445317),b=hh(b,c,d,a,buffer.getUint32(24,!0),23,76029189),a=hh(a,b,c,d,buffer.getUint32(36,!0),4,3654602809),d=hh(d,a,b,c,buffer.getUint32(48,!0),11,3873151461),c=hh(c,d,a,b,buffer.getUint32(60,!0),16,530742520),a=ii(a,b=hh(b,c,d,a,buffer.getUint32(8,!0),23,3299628645),c,d,buffer.getUint32(0,!0),6,4096336452),d=ii(d,a,b,c,buffer.getUint32(28,!0),10,1126891415),c=ii(c,d,a,b,buffer.getUint32(56,!0),15,2878612391),b=ii(b,c,d,a,buffer.getUint32(20,!0),21,4237533241),a=ii(a,b,c,d,buffer.getUint32(48,!0),6,1700485571),d=ii(d,a,b,c,buffer.getUint32(12,!0),10,2399980690),c=ii(c,d,a,b,buffer.getUint32(40,!0),15,4293915773),b=ii(b,c,d,a,buffer.getUint32(4,!0),21,2240044497),a=ii(a,b,c,d,buffer.getUint32(32,!0),6,1873313359),d=ii(d,a,b,c,buffer.getUint32(60,!0),10,4264355552),c=ii(c,d,a,b,buffer.getUint32(24,!0),15,2734768916),b=ii(b,c,d,a,buffer.getUint32(52,!0),21,1309151649),a=ii(a,b,c,d,buffer.getUint32(16,!0),6,4149444226),d=ii(d,a,b,c,buffer.getUint32(44,!0),10,3174756917),c=ii(c,d,a,b,buffer.getUint32(8,!0),15,718787259),b=ii(b,c,d,a,buffer.getUint32(36,!0),21,3951481745),state[0]=a+state[0]&4294967295,state[1]=b+state[1]&4294967295,state[2]=c+state[2]&4294967295,state[3]=d+state[3]&4294967295}},"./node_modules/aws-sdk/lib/browserSha1.js":(module,exports,__webpack_require__)=>{var Buffer=__webpack_require__("./node_modules/aws-sdk/node_modules/buffer/index.js").hp,hashUtils=__webpack_require__("./node_modules/aws-sdk/lib/browserHashUtils.js");new Uint32Array([1518500249,1859775393,-1894007588,-899497514]),Math.pow(2,53);function Sha1(){this.h0=1732584193,this.h1=4023233417,this.h2=2562383102,this.h3=271733878,this.h4=3285377520,this.block=new Uint32Array(80),this.offset=0,this.shift=24,this.totalLength=0}module.exports=Sha1,Sha1.BLOCK_SIZE=64,Sha1.prototype.update=function(data){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(hashUtils.isEmptyData(data))return this;var length=(data=hashUtils.convertToBuffer(data)).length;this.totalLength+=8*length;for(var i=0;i<length;i++)this.write(data[i]);return this},Sha1.prototype.write=function write(byte){this.block[this.offset]|=(255&byte)<<this.shift,this.shift?this.shift-=8:(this.offset++,this.shift=24),16===this.offset&&this.processBlock()},Sha1.prototype.digest=function(encoding){this.write(128),(this.offset>14||14===this.offset&&this.shift<24)&&this.processBlock(),this.offset=14,this.shift=24,this.write(0),this.write(0),this.write(this.totalLength>0xffffffffff?this.totalLength/1099511627776:0),this.write(this.totalLength>4294967295?this.totalLength/4294967296:0);for(var s=24;s>=0;s-=8)this.write(this.totalLength>>s);var out=new Buffer(20),outView=new DataView(out.buffer);return outView.setUint32(0,this.h0,!1),outView.setUint32(4,this.h1,!1),outView.setUint32(8,this.h2,!1),outView.setUint32(12,this.h3,!1),outView.setUint32(16,this.h4,!1),encoding?out.toString(encoding):out},Sha1.prototype.processBlock=function processBlock(){for(var i=16;i<80;i++){var w=this.block[i-3]^this.block[i-8]^this.block[i-14]^this.block[i-16];this.block[i]=w<<1|w>>>31}var f,k,a=this.h0,b=this.h1,c=this.h2,d=this.h3,e=this.h4;for(i=0;i<80;i++){i<20?(f=d^b&(c^d),k=1518500249):i<40?(f=b^c^d,k=1859775393):i<60?(f=b&c|d&(b|c),k=2400959708):(f=b^c^d,k=3395469782);var temp=(a<<5|a>>>27)+f+e+k+(0|this.block[i]);e=d,d=c,c=b<<30|b>>>2,b=a,a=temp}for(this.h0=this.h0+a|0,this.h1=this.h1+b|0,this.h2=this.h2+c|0,this.h3=this.h3+d|0,this.h4=this.h4+e|0,this.offset=0,i=0;i<16;i++)this.block[i]=0}},"./node_modules/aws-sdk/lib/browserSha256.js":(module,exports,__webpack_require__)=>{var Buffer=__webpack_require__("./node_modules/aws-sdk/node_modules/buffer/index.js").hp,hashUtils=__webpack_require__("./node_modules/aws-sdk/lib/browserHashUtils.js"),KEY=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),MAX_HASHABLE_LENGTH=Math.pow(2,53)-1;function Sha256(){this.state=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}module.exports=Sha256,Sha256.BLOCK_SIZE=64,Sha256.prototype.update=function(data){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(hashUtils.isEmptyData(data))return this;var position=0,byteLength=(data=hashUtils.convertToBuffer(data)).byteLength;if(this.bytesHashed+=byteLength,8*this.bytesHashed>MAX_HASHABLE_LENGTH)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;byteLength>0;)this.buffer[this.bufferLength++]=data[position++],byteLength--,64===this.bufferLength&&(this.hashBuffer(),this.bufferLength=0);return this},Sha256.prototype.digest=function(encoding){if(!this.finished){var bitsHashed=8*this.bytesHashed,bufferView=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),undecoratedLength=this.bufferLength;if(bufferView.setUint8(this.bufferLength++,128),undecoratedLength%64>=56){for(var i=this.bufferLength;i<64;i++)bufferView.setUint8(i,0);this.hashBuffer(),this.bufferLength=0}for(i=this.bufferLength;i<56;i++)bufferView.setUint8(i,0);bufferView.setUint32(56,Math.floor(bitsHashed/4294967296),!0),bufferView.setUint32(60,bitsHashed),this.hashBuffer(),this.finished=!0}var out=new Buffer(32);for(i=0;i<8;i++)out[4*i]=this.state[i]>>>24&255,out[4*i+1]=this.state[i]>>>16&255,out[4*i+2]=this.state[i]>>>8&255,out[4*i+3]=this.state[i]>>>0&255;return encoding?out.toString(encoding):out},Sha256.prototype.hashBuffer=function(){for(var buffer=this.buffer,state=this.state,state0=state[0],state1=state[1],state2=state[2],state3=state[3],state4=state[4],state5=state[5],state6=state[6],state7=state[7],i=0;i<64;i++){if(i<16)this.temp[i]=(255&buffer[4*i])<<24|(255&buffer[4*i+1])<<16|(255&buffer[4*i+2])<<8|255&buffer[4*i+3];else{var u=this.temp[i-2],t1_1=(u>>>17|u<<15)^(u>>>19|u<<13)^u>>>10,t2_1=((u=this.temp[i-15])>>>7|u<<25)^(u>>>18|u<<14)^u>>>3;this.temp[i]=(t1_1+this.temp[i-7]|0)+(t2_1+this.temp[i-16]|0)}var t1=(((state4>>>6|state4<<26)^(state4>>>11|state4<<21)^(state4>>>25|state4<<7))+(state4&state5^~state4&state6)|0)+(state7+(KEY[i]+this.temp[i]|0)|0)|0,t2=((state0>>>2|state0<<30)^(state0>>>13|state0<<19)^(state0>>>22|state0<<10))+(state0&state1^state0&state2^state1&state2)|0;state7=state6,state6=state5,state5=state4,state4=state3+t1|0,state3=state2,state2=state1,state1=state0,state0=t1+t2|0}state[0]+=state0,state[1]+=state1,state[2]+=state2,state[3]+=state3,state[4]+=state4,state[5]+=state5,state[6]+=state6,state[7]+=state7}},"./node_modules/aws-sdk/lib/browser_loader.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js");util.crypto.lib=__webpack_require__("./node_modules/aws-sdk/lib/browserCryptoLib.js"),util.Buffer=__webpack_require__("./node_modules/aws-sdk/node_modules/buffer/index.js").hp,util.url=__webpack_require__("./node_modules/aws-sdk/node_modules/url/url.js"),util.querystring=__webpack_require__("./node_modules/querystring/index.js"),util.realClock=__webpack_require__("./node_modules/aws-sdk/lib/realclock/browserClock.js"),util.environment="js",util.createEventStream=__webpack_require__("./node_modules/aws-sdk/lib/event-stream/buffered-create-event-stream.js").createEventStream,util.isBrowser=function(){return!0},util.isNode=function(){return!1};var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");if(module.exports=AWS,__webpack_require__("./node_modules/aws-sdk/lib/credentials.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/temporary_credentials.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/web_identity_credentials.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js"),__webpack_require__("./node_modules/aws-sdk/lib/credentials/saml_credentials.js"),AWS.XML.Parser=__webpack_require__("./node_modules/aws-sdk/lib/xml/browser_parser.js"),__webpack_require__("./node_modules/aws-sdk/lib/http/xhr.js"),void 0===process)var process={browser:!0}},"./node_modules/aws-sdk/lib/config_regional_endpoint.js":(module,__unused_webpack_exports,__webpack_require__)=>{var process=__webpack_require__("./node_modules/process/browser.js"),AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js");function validateRegionalEndpointsFlagValue(configValue,errorOptions){if("string"==typeof configValue){if(["legacy","regional"].indexOf(configValue.toLowerCase())>=0)return configValue.toLowerCase();throw AWS.util.error(new Error,errorOptions)}}module.exports=function resolveRegionalEndpointsFlag(originalConfig,options){var resolved;if((originalConfig=originalConfig||{})[options.clientConfig]&&(resolved=validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig],{code:"InvalidConfiguration",message:'invalid "'+options.clientConfig+'" configuration. Expect "legacy"  or "regional". Got "'+originalConfig[options.clientConfig]+'".'})))return resolved;if(!AWS.util.isNode())return resolved;if(Object.prototype.hasOwnProperty.call(process.env,options.env)&&(resolved=validateRegionalEndpointsFlagValue(process.env[options.env],{code:"InvalidEnvironmentalVariable",message:"invalid "+options.env+' environmental variable. Expect "legacy"  or "regional". Got "'+process.env[options.env]+'".'})))return resolved;var profile={};try{profile=AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader)[process.env.AWS_PROFILE||AWS.util.defaultProfile]}catch(e){}return profile&&Object.prototype.hasOwnProperty.call(profile,options.sharedConfig)&&(resolved=validateRegionalEndpointsFlagValue(profile[options.sharedConfig],{code:"InvalidConfiguration",message:"invalid "+options.sharedConfig+' profile config. Expect "legacy"  or "regional". Got "'+profile[options.sharedConfig]+'".'})),resolved}},"./node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),STS=__webpack_require__("./node_modules/aws-sdk/clients/sts.js");AWS.ChainableTemporaryCredentials=AWS.util.inherit(AWS.Credentials,{constructor:function ChainableTemporaryCredentials(options){AWS.Credentials.call(this),options=options||{},this.errorCode="ChainableTemporaryCredentialsProviderFailure",this.expired=!0,this.tokenCodeFn=null;var params=AWS.util.copy(options.params)||{};if(params.RoleArn&&(params.RoleSessionName=params.RoleSessionName||"temporary-credentials"),params.SerialNumber){if(!options.tokenCodeFn||"function"!=typeof options.tokenCodeFn)throw new AWS.util.error(new Error("tokenCodeFn must be a function when params.SerialNumber is given"),{code:this.errorCode});this.tokenCodeFn=options.tokenCodeFn}var config=AWS.util.merge({params,credentials:options.masterCredentials||AWS.config.credentials},options.stsConfig||{});this.service=new STS(config)},refresh:function refresh(callback){this.coalesceRefresh(callback||AWS.util.fn.callback)},load:function load(callback){var self=this,operation=self.service.config.params.RoleArn?"assumeRole":"getSessionToken";this.getTokenCode((function(err,tokenCode){var params={};err?callback(err):(tokenCode&&(params.TokenCode=tokenCode),self.service[operation](params,(function(err,data){err||self.service.credentialsFrom(data,self),callback(err)})))}))},getTokenCode:function getTokenCode(callback){var self=this;this.tokenCodeFn?this.tokenCodeFn(this.service.config.params.SerialNumber,(function(err,token){if(err){var message=err;return err instanceof Error&&(message=err.message),void callback(AWS.util.error(new Error("Error fetching MFA token: "+message),{code:self.errorCode}))}callback(null,token)})):callback(null)}})},"./node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),CognitoIdentity=__webpack_require__("./node_modules/aws-sdk/clients/cognitoidentity.js"),STS=__webpack_require__("./node_modules/aws-sdk/clients/sts.js");AWS.CognitoIdentityCredentials=AWS.util.inherit(AWS.Credentials,{localStorageKey:{id:"aws.cognito.identity-id.",providers:"aws.cognito.identity-providers."},constructor:function CognitoIdentityCredentials(params,clientConfig){AWS.Credentials.call(this),this.expired=!0,this.params=params,this.data=null,this._identityId=null,this._clientConfig=AWS.util.copy(clientConfig||{}),this.loadCachedId();var self=this;Object.defineProperty(this,"identityId",{get:function(){return self.loadCachedId(),self._identityId||self.params.IdentityId},set:function(identityId){self._identityId=identityId}})},refresh:function refresh(callback){this.coalesceRefresh(callback||AWS.util.fn.callback)},load:function load(callback){var self=this;self.createClients(),self.data=null,self._identityId=null,self.getId((function(err){err?(self.clearIdOnNotAuthorized(err),callback(err)):self.params.RoleArn?self.getCredentialsFromSTS(callback):self.getCredentialsForIdentity(callback)}))},clearCachedId:function clearCache(){this._identityId=null,delete this.params.IdentityId;var poolId=this.params.IdentityPoolId,loginId=this.params.LoginId||"";delete this.storage[this.localStorageKey.id+poolId+loginId],delete this.storage[this.localStorageKey.providers+poolId+loginId]},clearIdOnNotAuthorized:function clearIdOnNotAuthorized(err){"NotAuthorizedException"==err.code&&this.clearCachedId()},getId:function getId(callback){var self=this;if("string"==typeof self.params.IdentityId)return callback(null,self.params.IdentityId);self.cognito.getId((function(err,data){!err&&data.IdentityId?(self.params.IdentityId=data.IdentityId,callback(null,data.IdentityId)):callback(err)}))},loadCredentials:function loadCredentials(data,credentials){data&&credentials&&(credentials.expired=!1,credentials.accessKeyId=data.Credentials.AccessKeyId,credentials.secretAccessKey=data.Credentials.SecretKey,credentials.sessionToken=data.Credentials.SessionToken,credentials.expireTime=data.Credentials.Expiration)},getCredentialsForIdentity:function getCredentialsForIdentity(callback){var self=this;self.cognito.getCredentialsForIdentity((function(err,data){err?self.clearIdOnNotAuthorized(err):(self.cacheId(data),self.data=data,self.loadCredentials(self.data,self)),callback(err)}))},getCredentialsFromSTS:function getCredentialsFromSTS(callback){var self=this;self.cognito.getOpenIdToken((function(err,data){err?(self.clearIdOnNotAuthorized(err),callback(err)):(self.cacheId(data),self.params.WebIdentityToken=data.Token,self.webIdentityCredentials.refresh((function(webErr){webErr||(self.data=self.webIdentityCredentials.data,self.sts.credentialsFrom(self.data,self)),callback(webErr)})))}))},loadCachedId:function loadCachedId(){if(AWS.util.isBrowser()&&!this.params.IdentityId){var id=this.getStorage("id");if(id&&this.params.Logins){var actualProviders=Object.keys(this.params.Logins);0!==(this.getStorage("providers")||"").split(",").filter((function(n){return-1!==actualProviders.indexOf(n)})).length&&(this.params.IdentityId=id)}else id&&(this.params.IdentityId=id)}},createClients:function(){var clientConfig=this._clientConfig;if(this.webIdentityCredentials=this.webIdentityCredentials||new AWS.WebIdentityCredentials(this.params,clientConfig),!this.cognito){var cognitoConfig=AWS.util.merge({},clientConfig);cognitoConfig.params=this.params,this.cognito=new CognitoIdentity(cognitoConfig)}this.sts=this.sts||new STS(clientConfig)},cacheId:function cacheId(data){this._identityId=data.IdentityId,this.params.IdentityId=this._identityId,AWS.util.isBrowser()&&(this.setStorage("id",data.IdentityId),this.params.Logins&&this.setStorage("providers",Object.keys(this.params.Logins).join(",")))},getStorage:function getStorage(key){return this.storage[this.localStorageKey[key]+this.params.IdentityPoolId+(this.params.LoginId||"")]},setStorage:function setStorage(key,val){try{this.storage[this.localStorageKey[key]+this.params.IdentityPoolId+(this.params.LoginId||"")]=val}catch(_){}},storage:function(){try{var storage=AWS.util.isBrowser()&&null!==window.localStorage&&"object"==typeof window.localStorage?window.localStorage:{};return storage["aws.test-storage"]="foobar",delete storage["aws.test-storage"],storage}catch(_){return{}}}()})},"./node_modules/aws-sdk/lib/credentials/saml_credentials.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),STS=__webpack_require__("./node_modules/aws-sdk/clients/sts.js");AWS.SAMLCredentials=AWS.util.inherit(AWS.Credentials,{constructor:function SAMLCredentials(params){AWS.Credentials.call(this),this.expired=!0,this.params=params},refresh:function refresh(callback){this.coalesceRefresh(callback||AWS.util.fn.callback)},load:function load(callback){var self=this;self.createClients(),self.service.assumeRoleWithSAML((function(err,data){err||self.service.credentialsFrom(data,self),callback(err)}))},createClients:function(){this.service=this.service||new STS({params:this.params})}})},"./node_modules/aws-sdk/lib/credentials/temporary_credentials.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),STS=__webpack_require__("./node_modules/aws-sdk/clients/sts.js");AWS.TemporaryCredentials=AWS.util.inherit(AWS.Credentials,{constructor:function TemporaryCredentials(params,masterCredentials){AWS.Credentials.call(this),this.loadMasterCredentials(masterCredentials),this.expired=!0,this.params=params||{},this.params.RoleArn&&(this.params.RoleSessionName=this.params.RoleSessionName||"temporary-credentials")},refresh:function refresh(callback){this.coalesceRefresh(callback||AWS.util.fn.callback)},load:function load(callback){var self=this;self.createClients(),self.masterCredentials.get((function(){self.service.config.credentials=self.masterCredentials,(self.params.RoleArn?self.service.assumeRole:self.service.getSessionToken).call(self.service,(function(err,data){err||self.service.credentialsFrom(data,self),callback(err)}))}))},loadMasterCredentials:function loadMasterCredentials(masterCredentials){for(this.masterCredentials=masterCredentials||AWS.config.credentials;this.masterCredentials.masterCredentials;)this.masterCredentials=this.masterCredentials.masterCredentials;"function"!=typeof this.masterCredentials.get&&(this.masterCredentials=new AWS.Credentials(this.masterCredentials))},createClients:function(){this.service=this.service||new STS({params:this.params})}})},"./node_modules/aws-sdk/lib/credentials/web_identity_credentials.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),STS=__webpack_require__("./node_modules/aws-sdk/clients/sts.js");AWS.WebIdentityCredentials=AWS.util.inherit(AWS.Credentials,{constructor:function WebIdentityCredentials(params,clientConfig){AWS.Credentials.call(this),this.expired=!0,this.params=params,this.params.RoleSessionName=this.params.RoleSessionName||"web-identity",this.data=null,this._clientConfig=AWS.util.copy(clientConfig||{})},refresh:function refresh(callback){this.coalesceRefresh(callback||AWS.util.fn.callback)},load:function load(callback){var self=this;self.createClients(),self.service.assumeRoleWithWebIdentity((function(err,data){self.data=null,err||(self.data=data,self.service.credentialsFrom(data,self)),callback(err)}))},createClients:function(){if(!this.service){var stsConfig=AWS.util.merge({},this._clientConfig);stsConfig.params=this.params,this.service=new STS(stsConfig)}}})},"./node_modules/aws-sdk/lib/event-stream/buffered-create-event-stream.js":(module,__unused_webpack_exports,__webpack_require__)=>{var eventMessageChunker=__webpack_require__("./node_modules/aws-sdk/lib/event-stream/event-message-chunker.js").eventMessageChunker,parseEvent=__webpack_require__("./node_modules/aws-sdk/lib/event-stream/parse-event.js").parseEvent;module.exports={createEventStream:function createEventStream(body,parser,model){for(var eventMessages=eventMessageChunker(body),events=[],i=0;i<eventMessages.length;i++)events.push(parseEvent(parser,eventMessages[i],model));return events}}},"./node_modules/aws-sdk/lib/event-stream/event-message-chunker.js":module=>{module.exports={eventMessageChunker:function eventMessageChunker(buffer){for(var messages=[],offset=0;offset<buffer.length;){var totalLength=buffer.readInt32BE(offset),message=buffer.slice(offset,totalLength+offset);offset+=totalLength,messages.push(message)}return messages}}},"./node_modules/aws-sdk/lib/event-stream/int64.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/core.js").util,toBuffer=util.buffer.toBuffer;function Int64(bytes){if(8!==bytes.length)throw new Error("Int64 buffers must be exactly 8 bytes");util.Buffer.isBuffer(bytes)||(bytes=toBuffer(bytes)),this.bytes=bytes}function negate(bytes){for(var i=0;i<8;i++)bytes[i]^=255;for(i=7;i>-1&&(bytes[i]++,0===bytes[i]);i--);}Int64.fromNumber=function(number){if(number>0x8000000000000000||number<-0x8000000000000000)throw new Error(number+" is too large (or, if negative, too small) to represent as an Int64");for(var bytes=new Uint8Array(8),i=7,remaining=Math.abs(Math.round(number));i>-1&&remaining>0;i--,remaining/=256)bytes[i]=remaining;return number<0&&negate(bytes),new Int64(bytes)},Int64.prototype.valueOf=function(){var bytes=this.bytes.slice(0),negative=128&bytes[0];return negative&&negate(bytes),parseInt(bytes.toString("hex"),16)*(negative?-1:1)},Int64.prototype.toString=function(){return String(this.valueOf())},module.exports={Int64}},"./node_modules/aws-sdk/lib/event-stream/parse-event.js":(module,__unused_webpack_exports,__webpack_require__)=>{var parseMessage=__webpack_require__("./node_modules/aws-sdk/lib/event-stream/parse-message.js").parseMessage;module.exports={parseEvent:function parseEvent(parser,message,shape){var parsedMessage=parseMessage(message),messageType=parsedMessage.headers[":message-type"];if(messageType){if("error"===messageType.value)throw function parseError(message){var errorCode=message.headers[":error-code"],errorMessage=message.headers[":error-message"],error=new Error(errorMessage.value||errorMessage);return error.code=error.name=errorCode.value||errorCode,error}(parsedMessage);if("event"!==messageType.value)return}var eventType=parsedMessage.headers[":event-type"],eventModel=shape.members[eventType.value];if(eventModel){var result={},eventPayloadMemberName=eventModel.eventPayloadMemberName;if(eventPayloadMemberName){var payloadShape=eventModel.members[eventPayloadMemberName];"binary"===payloadShape.type?result[eventPayloadMemberName]=parsedMessage.body:result[eventPayloadMemberName]=parser.parse(parsedMessage.body.toString(),payloadShape)}for(var eventHeaderNames=eventModel.eventHeaderMemberNames,i=0;i<eventHeaderNames.length;i++){var name=eventHeaderNames[i];parsedMessage.headers[name]&&(result[name]=eventModel.members[name].toType(parsedMessage.headers[name].value))}var output={};return output[eventType.value]=result,output}}}},"./node_modules/aws-sdk/lib/event-stream/parse-message.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Int64=__webpack_require__("./node_modules/aws-sdk/lib/event-stream/int64.js").Int64,splitMessage=__webpack_require__("./node_modules/aws-sdk/lib/event-stream/split-message.js").splitMessage,BOOLEAN_TAG="boolean",BYTE_TAG="byte",SHORT_TAG="short",INT_TAG="integer",LONG_TAG="long",BINARY_TAG="binary",STRING_TAG="string",TIMESTAMP_TAG="timestamp",UUID_TAG="uuid";function parseHeaders(headers){for(var out={},position=0;position<headers.length;){var nameLength=headers.readUInt8(position++),name=headers.slice(position,position+nameLength).toString();switch(position+=nameLength,headers.readUInt8(position++)){case 0:out[name]={type:BOOLEAN_TAG,value:!0};break;case 1:out[name]={type:BOOLEAN_TAG,value:!1};break;case 2:out[name]={type:BYTE_TAG,value:headers.readInt8(position++)};break;case 3:out[name]={type:SHORT_TAG,value:headers.readInt16BE(position)},position+=2;break;case 4:out[name]={type:INT_TAG,value:headers.readInt32BE(position)},position+=4;break;case 5:out[name]={type:LONG_TAG,value:new Int64(headers.slice(position,position+8))},position+=8;break;case 6:var binaryLength=headers.readUInt16BE(position);position+=2,out[name]={type:BINARY_TAG,value:headers.slice(position,position+binaryLength)},position+=binaryLength;break;case 7:var stringLength=headers.readUInt16BE(position);position+=2,out[name]={type:STRING_TAG,value:headers.slice(position,position+stringLength).toString()},position+=stringLength;break;case 8:out[name]={type:TIMESTAMP_TAG,value:new Date(new Int64(headers.slice(position,position+8)).valueOf())},position+=8;break;case 9:var uuidChars=headers.slice(position,position+16).toString("hex");position+=16,out[name]={type:UUID_TAG,value:uuidChars.substr(0,8)+"-"+uuidChars.substr(8,4)+"-"+uuidChars.substr(12,4)+"-"+uuidChars.substr(16,4)+"-"+uuidChars.substr(20)};break;default:throw new Error("Unrecognized header type tag")}}return out}module.exports={parseMessage:function parseMessage(message){var parsed=splitMessage(message);return{headers:parseHeaders(parsed.headers),body:parsed.body}}}},"./node_modules/aws-sdk/lib/event-stream/split-message.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/core.js").util,toBuffer=util.buffer.toBuffer;module.exports={splitMessage:function splitMessage(message){if(util.Buffer.isBuffer(message)||(message=toBuffer(message)),message.length<16)throw new Error("Provided message too short to accommodate event stream message overhead");if(message.length!==message.readUInt32BE(0))throw new Error("Reported message length does not match received message length");var expectedPreludeChecksum=message.readUInt32BE(8);if(expectedPreludeChecksum!==util.crypto.crc32(message.slice(0,8)))throw new Error("The prelude checksum specified in the message ("+expectedPreludeChecksum+") does not match the calculated CRC32 checksum.");var expectedMessageChecksum=message.readUInt32BE(message.length-4);if(expectedMessageChecksum!==util.crypto.crc32(message.slice(0,message.length-4)))throw new Error("The message checksum did not match the expected value of "+expectedMessageChecksum);var headersEnd=12+message.readUInt32BE(4);return{headers:message.slice(12,headersEnd),body:message.slice(headersEnd,message.length-4)}}}},"./node_modules/aws-sdk/lib/http/xhr.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),EventEmitter=__webpack_require__("./node_modules/aws-sdk/node_modules/events/events.js").EventEmitter;__webpack_require__("./node_modules/aws-sdk/lib/http.js"),AWS.XHRClient=AWS.util.inherit({handleRequest:function handleRequest(httpRequest,httpOptions,callback,errCallback){var self=this,endpoint=httpRequest.endpoint,emitter=new EventEmitter,href=endpoint.protocol+"//"+endpoint.hostname;80!==endpoint.port&&443!==endpoint.port&&(href+=":"+endpoint.port),href+=httpRequest.path;var xhr=new XMLHttpRequest,headersEmitted=!1;httpRequest.stream=xhr,xhr.addEventListener("readystatechange",(function(){try{if(0===xhr.status)return}catch(e){return}this.readyState>=this.HEADERS_RECEIVED&&!headersEmitted&&(emitter.statusCode=xhr.status,emitter.headers=self.parseHeaders(xhr.getAllResponseHeaders()),emitter.emit("headers",emitter.statusCode,emitter.headers,xhr.statusText),headersEmitted=!0),this.readyState===this.DONE&&self.finishRequest(xhr,emitter)}),!1),xhr.upload.addEventListener("progress",(function(evt){emitter.emit("sendProgress",evt)})),xhr.addEventListener("progress",(function(evt){emitter.emit("receiveProgress",evt)}),!1),xhr.addEventListener("timeout",(function(){errCallback(AWS.util.error(new Error("Timeout"),{code:"TimeoutError"}))}),!1),xhr.addEventListener("error",(function(){errCallback(AWS.util.error(new Error("Network Failure"),{code:"NetworkingError"}))}),!1),xhr.addEventListener("abort",(function(){errCallback(AWS.util.error(new Error("Request aborted"),{code:"RequestAbortedError"}))}),!1),callback(emitter),xhr.open(httpRequest.method,href,!1!==httpOptions.xhrAsync),AWS.util.each(httpRequest.headers,(function(key,value){"Content-Length"!==key&&"User-Agent"!==key&&"Host"!==key&&xhr.setRequestHeader(key,value)})),httpOptions.timeout&&!1!==httpOptions.xhrAsync&&(xhr.timeout=httpOptions.timeout),httpOptions.xhrWithCredentials&&(xhr.withCredentials=!0);try{xhr.responseType="arraybuffer"}catch(e){}try{httpRequest.body?xhr.send(httpRequest.body):xhr.send()}catch(err){if(!httpRequest.body||"object"!=typeof httpRequest.body.buffer)throw err;xhr.send(httpRequest.body.buffer)}return emitter},parseHeaders:function parseHeaders(rawHeaders){var headers={};return AWS.util.arrayEach(rawHeaders.split(/\r?\n/),(function(line){var key=line.split(":",1)[0],value=line.substring(key.length+2);key.length>0&&(headers[key.toLowerCase()]=value)})),headers},finishRequest:function finishRequest(xhr,emitter){var buffer;if("arraybuffer"===xhr.responseType&&xhr.response){var ab=xhr.response;buffer=new AWS.util.Buffer(ab.byteLength);for(var view=new Uint8Array(ab),i=0;i<buffer.length;++i)buffer[i]=view[i]}try{buffer||"string"!=typeof xhr.responseText||(buffer=new AWS.util.Buffer(xhr.responseText))}catch(e){}buffer&&emitter.emit("data",buffer),emitter.emit("end")}}),AWS.HttpClient.prototype=AWS.XHRClient.prototype,AWS.HttpClient.streamsApiVersion=1},"./node_modules/aws-sdk/lib/realclock/browserClock.js":module=>{module.exports={now:function now(){return"undefined"!=typeof performance&&"function"==typeof performance.now?performance.now():Date.now()}}},"./node_modules/aws-sdk/lib/services/sts.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var AWS=__webpack_require__("./node_modules/aws-sdk/lib/core.js"),resolveRegionalEndpointsFlag=__webpack_require__("./node_modules/aws-sdk/lib/config_regional_endpoint.js");AWS.util.update(AWS.STS.prototype,{credentialsFrom:function credentialsFrom(data,credentials){return data?(credentials||(credentials=new AWS.TemporaryCredentials),credentials.expired=!1,credentials.accessKeyId=data.Credentials.AccessKeyId,credentials.secretAccessKey=data.Credentials.SecretAccessKey,credentials.sessionToken=data.Credentials.SessionToken,credentials.expireTime=data.Credentials.Expiration,credentials):null},assumeRoleWithWebIdentity:function assumeRoleWithWebIdentity(params,callback){return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity",params,callback)},assumeRoleWithSAML:function assumeRoleWithSAML(params,callback){return this.makeUnauthenticatedRequest("assumeRoleWithSAML",params,callback)},setupRequestListeners:function setupRequestListeners(request){request.addListener("validate",this.optInRegionalEndpoint,!0)},optInRegionalEndpoint:function optInRegionalEndpoint(req){var service=req.service,config=service.config;if(config.stsRegionalEndpoints=resolveRegionalEndpointsFlag(service._originalConfig,{env:"AWS_STS_REGIONAL_ENDPOINTS",sharedConfig:"sts_regional_endpoints",clientConfig:"stsRegionalEndpoints"}),"regional"===config.stsRegionalEndpoints&&service.isGlobalEndpoint){if(!config.region)throw AWS.util.error(new Error,{code:"ConfigError",message:"Missing region in config"});var insertPoint=config.endpoint.indexOf(".amazonaws.com"),regionalEndpoint=config.endpoint.substring(0,insertPoint)+"."+config.region+config.endpoint.substring(insertPoint);req.httpRequest.updateEndpoint(regionalEndpoint),req.httpRequest.region=config.region}}})},"./node_modules/aws-sdk/lib/xml/browser_parser.js":(module,__unused_webpack_exports,__webpack_require__)=>{var util=__webpack_require__("./node_modules/aws-sdk/lib/util.js"),Shape=__webpack_require__("./node_modules/aws-sdk/lib/model/shape.js");function DomXmlParser(){}function getElementByTagName(xml,tag){for(var elements=xml.getElementsByTagName(tag),i=0,iLen=elements.length;i<iLen;i++)if(elements[i].parentNode===xml)return elements[i]}function parseXml(xml,shape){switch(shape||(shape={}),shape.type){case"structure":return parseStructure(xml,shape);case"map":return function parseMap(xml,shape){var data={},xmlKey=shape.key.name||"key",xmlValue=shape.value.name||"value",tagName=shape.flattened?shape.name:"entry",child=xml.firstElementChild;for(;child;){if(child.nodeName===tagName){var key=getElementByTagName(child,xmlKey).textContent,value=getElementByTagName(child,xmlValue);data[key]=parseXml(value,shape.value)}child=child.nextElementSibling}return data}(xml,shape);case"list":return function parseList(xml,shape){var data=[],tagName=shape.flattened?shape.name:shape.member.name||"member",child=xml.firstElementChild;for(;child;)child.nodeName===tagName&&data.push(parseXml(child,shape.member)),child=child.nextElementSibling;return data}(xml,shape);case void 0:case null:return function parseUnknown(xml){if(null==xml)return"";if(!xml.firstElementChild)return null===xml.parentNode.parentNode?{}:0===xml.childNodes.length?"":xml.textContent;var shape={type:"structure",members:{}},child=xml.firstElementChild;for(;child;){var tag=child.nodeName;Object.prototype.hasOwnProperty.call(shape.members,tag)?shape.members[tag].type="list":shape.members[tag]={name:tag},child=child.nextElementSibling}return parseStructure(xml,shape)}(xml);default:return function parseScalar(xml,shape){if(xml.getAttribute){var encoding=xml.getAttribute("encoding");"base64"===encoding&&(shape=new Shape.create({type:encoding}))}var text=xml.textContent;""===text&&(text=null);return"function"==typeof shape.toType?shape.toType(text):text}(xml,shape)}}function parseStructure(xml,shape){var data={};return null===xml||util.each(shape.members,(function(memberName,memberShape){if(memberShape.isXmlAttribute){if(Object.prototype.hasOwnProperty.call(xml.attributes,memberShape.name)){var value=xml.attributes[memberShape.name].value;data[memberName]=parseXml({textContent:value},memberShape)}}else{var xmlChild=memberShape.flattened?xml:getElementByTagName(xml,memberShape.name);xmlChild?data[memberName]=parseXml(xmlChild,memberShape):memberShape.flattened||"list"!==memberShape.type||shape.api.xmlNoDefaultLists||(data[memberName]=memberShape.defaultValue)}})),data}DomXmlParser.prototype.parse=function(xml,shape){if(""===xml.replace(/^\s+/,""))return{};var result,error;try{if(window.DOMParser){try{result=(new DOMParser).parseFromString(xml,"text/xml")}catch(syntaxError){throw util.error(new Error("Parse error in document"),{originalError:syntaxError,code:"XMLParserError",retryable:!0})}if(null===result.documentElement)throw util.error(new Error("Cannot parse empty document."),{code:"XMLParserError",retryable:!0});var isError=result.getElementsByTagName("parsererror")[0];if(isError&&(isError.parentNode===result||"body"===isError.parentNode.nodeName||isError.parentNode.parentNode===result||"body"===isError.parentNode.parentNode.nodeName)){var errorElement=isError.getElementsByTagName("div")[0]||isError;throw util.error(new Error(errorElement.textContent||"Parser error in document"),{code:"XMLParserError",retryable:!0})}}else{if(!window.ActiveXObject)throw new Error("Cannot load XML parser");if((result=new window.ActiveXObject("Microsoft.XMLDOM")).async=!1,!result.loadXML(xml))throw util.error(new Error("Parse error in document"),{code:"XMLParserError",retryable:!0})}}catch(e){error=e}if(result&&result.documentElement&&!error){var data=parseXml(result.documentElement,shape),metadata=getElementByTagName(result.documentElement,"ResponseMetadata");return metadata&&(data.ResponseMetadata=parseXml(metadata,{})),data}if(error)throw util.error(error||new Error,{code:"XMLParserError",retryable:!0});return{}},module.exports=DomXmlParser},"./node_modules/aws-sdk/node_modules/base64-js/index.js":(__unused_webpack_module,exports)=>{"use strict";exports.byteLength=function byteLength(b64){return 3*b64.length/4-placeHoldersCount(b64)},exports.toByteArray=function toByteArray(b64){var i,j,l,tmp,placeHolders,arr,len=b64.length;placeHolders=placeHoldersCount(b64),arr=new Arr(3*len/4-placeHolders),l=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3)tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)],arr[L++]=tmp>>16&255,arr[L++]=tmp>>8&255,arr[L++]=255&tmp;2===placeHolders?(tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4,arr[L++]=255&tmp):1===placeHolders&&(tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2,arr[L++]=tmp>>8&255,arr[L++]=255&tmp);return arr},exports.fromByteArray=function fromByteArray(uint8){for(var tmp,len=uint8.length,extraBytes=len%3,output="",parts=[],i=0,len2=len-extraBytes;i<len2;i+=16383)parts.push(encodeChunk(uint8,i,i+16383>len2?len2:i+16383));1===extraBytes?(tmp=uint8[len-1],output+=lookup[tmp>>2],output+=lookup[tmp<<4&63],output+="=="):2===extraBytes&&(tmp=(uint8[len-2]<<8)+uint8[len-1],output+=lookup[tmp>>10],output+=lookup[tmp>>4&63],output+=lookup[tmp<<2&63],output+="=");return parts.push(output),parts.join("")};for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0;i<64;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;function placeHoldersCount(b64){var len=b64.length;if(len%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===b64[len-2]?2:"="===b64[len-1]?1:0}function encodeChunk(uint8,start,end){for(var tmp,num,output=[],i=start;i<end;i+=3)tmp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2],output.push(lookup[(num=tmp)>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[63&num]);return output.join("")}revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63},"./node_modules/aws-sdk/node_modules/buffer/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var base64=__webpack_require__("./node_modules/aws-sdk/node_modules/base64-js/index.js"),ieee754=__webpack_require__("./node_modules/aws-sdk/node_modules/buffer/node_modules/ieee754/index.js"),isArray=__webpack_require__("./node_modules/isarray/index.js");function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(that,length){if(kMaxLength()<length)throw new RangeError("Invalid typed array length");return Buffer.TYPED_ARRAY_SUPPORT?(that=new Uint8Array(length)).__proto__=Buffer.prototype:(null===that&&(that=new Buffer(length)),that.length=length),that}function Buffer(arg,encodingOrOffset,length){if(!(Buffer.TYPED_ARRAY_SUPPORT||this instanceof Buffer))return new Buffer(arg,encodingOrOffset,length);if("number"==typeof arg){if("string"==typeof encodingOrOffset)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(this,arg)}return from(this,arg,encodingOrOffset,length)}function from(that,value,encodingOrOffset,length){if("number"==typeof value)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&value instanceof ArrayBuffer?function fromArrayBuffer(that,array,byteOffset,length){if(array.byteLength,byteOffset<0||array.byteLength<byteOffset)throw new RangeError("'offset' is out of bounds");if(array.byteLength<byteOffset+(length||0))throw new RangeError("'length' is out of bounds");array=void 0===byteOffset&&void 0===length?new Uint8Array(array):void 0===length?new Uint8Array(array,byteOffset):new Uint8Array(array,byteOffset,length);Buffer.TYPED_ARRAY_SUPPORT?(that=array).__proto__=Buffer.prototype:that=fromArrayLike(that,array);return that}(that,value,encodingOrOffset,length):"string"==typeof value?function fromString(that,string,encoding){"string"==typeof encoding&&""!==encoding||(encoding="utf8");if(!Buffer.isEncoding(encoding))throw new TypeError('"encoding" must be a valid string encoding');var length=0|byteLength(string,encoding);that=createBuffer(that,length);var actual=that.write(string,encoding);actual!==length&&(that=that.slice(0,actual));return that}(that,value,encodingOrOffset):function fromObject(that,obj){if(Buffer.isBuffer(obj)){var len=0|checked(obj.length);return 0===(that=createBuffer(that,len)).length||obj.copy(that,0,0,len),that}if(obj){if("undefined"!=typeof ArrayBuffer&&obj.buffer instanceof ArrayBuffer||"length"in obj)return"number"!=typeof obj.length||function isnan(val){return val!=val}(obj.length)?createBuffer(that,0):fromArrayLike(that,obj);if("Buffer"===obj.type&&isArray(obj.data))return fromArrayLike(that,obj.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(that,value)}function assertSize(size){if("number"!=typeof size)throw new TypeError('"size" argument must be a number');if(size<0)throw new RangeError('"size" argument must not be negative')}function allocUnsafe(that,size){if(assertSize(size),that=createBuffer(that,size<0?0:0|checked(size)),!Buffer.TYPED_ARRAY_SUPPORT)for(var i=0;i<size;++i)that[i]=0;return that}function fromArrayLike(that,array){var length=array.length<0?0:0|checked(array.length);that=createBuffer(that,length);for(var i=0;i<length;i+=1)that[i]=255&array[i];return that}function checked(length){if(length>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|length}function byteLength(string,encoding){if(Buffer.isBuffer(string))return string.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer))return string.byteLength;"string"!=typeof string&&(string=""+string);var len=string.length;if(0===len)return 0;for(var loweredCase=!1;;)switch(encoding){case"ascii":case"latin1":case"binary":return len;case"utf8":case"utf-8":case void 0:return utf8ToBytes(string).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*len;case"hex":return len>>>1;case"base64":return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;encoding=(""+encoding).toLowerCase(),loweredCase=!0}}function slowToString(encoding,start,end){var loweredCase=!1;if((void 0===start||start<0)&&(start=0),start>this.length)return"";if((void 0===end||end>this.length)&&(end=this.length),end<=0)return"";if((end>>>=0)<=(start>>>=0))return"";for(encoding||(encoding="utf8");;)switch(encoding){case"hex":return hexSlice(this,start,end);case"utf8":case"utf-8":return utf8Slice(this,start,end);case"ascii":return asciiSlice(this,start,end);case"latin1":case"binary":return latin1Slice(this,start,end);case"base64":return base64Slice(this,start,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase(),loweredCase=!0}}function swap(b,n,m){var i=b[n];b[n]=b[m],b[m]=i}function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){if(0===buffer.length)return-1;if("string"==typeof byteOffset?(encoding=byteOffset,byteOffset=0):byteOffset>2147483647?byteOffset=2147483647:byteOffset<-2147483648&&(byteOffset=-2147483648),byteOffset=+byteOffset,isNaN(byteOffset)&&(byteOffset=dir?0:buffer.length-1),byteOffset<0&&(byteOffset=buffer.length+byteOffset),byteOffset>=buffer.length){if(dir)return-1;byteOffset=buffer.length-1}else if(byteOffset<0){if(!dir)return-1;byteOffset=0}if("string"==typeof val&&(val=Buffer.from(val,encoding)),Buffer.isBuffer(val))return 0===val.length?-1:arrayIndexOf(buffer,val,byteOffset,encoding,dir);if("number"==typeof val)return val&=255,Buffer.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?dir?Uint8Array.prototype.indexOf.call(buffer,val,byteOffset):Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset):arrayIndexOf(buffer,[val],byteOffset,encoding,dir);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var i,indexSize=1,arrLength=arr.length,valLength=val.length;if(void 0!==encoding&&("ucs2"===(encoding=String(encoding).toLowerCase())||"ucs-2"===encoding||"utf16le"===encoding||"utf-16le"===encoding)){if(arr.length<2||val.length<2)return-1;indexSize=2,arrLength/=2,valLength/=2,byteOffset/=2}function read(buf,i){return 1===indexSize?buf[i]:buf.readUInt16BE(i*indexSize)}if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++)if(read(arr,i)===read(val,-1===foundIndex?0:i-foundIndex)){if(-1===foundIndex&&(foundIndex=i),i-foundIndex+1===valLength)return foundIndex*indexSize}else-1!==foundIndex&&(i-=i-foundIndex),foundIndex=-1}else for(byteOffset+valLength>arrLength&&(byteOffset=arrLength-valLength),i=byteOffset;i>=0;i--){for(var found=!0,j=0;j<valLength;j++)if(read(arr,i+j)!==read(val,j)){found=!1;break}if(found)return i}return-1}function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;length?(length=Number(length))>remaining&&(length=remaining):length=remaining;var strLen=string.length;if(strLen%2!=0)throw new TypeError("Invalid hex string");length>strLen/2&&(length=strLen/2);for(var i=0;i<length;++i){var parsed=parseInt(string.substr(2*i,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(function asciiToBytes(str){for(var byteArray=[],i=0;i<str.length;++i)byteArray.push(255&str.charCodeAt(i));return byteArray}(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(function utf16leToBytes(str,units){for(var c,hi,lo,byteArray=[],i=0;i<str.length&&!((units-=2)<0);++i)hi=(c=str.charCodeAt(i))>>8,lo=c%256,byteArray.push(lo),byteArray.push(hi);return byteArray}(string,buf.length-offset),buf,offset,length)}function base64Slice(buf,start,end){return 0===start&&end===buf.length?base64.fromByteArray(buf):base64.fromByteArray(buf.slice(start,end))}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);for(var res=[],i=start;i<end;){var secondByte,thirdByte,fourthByte,tempCodePoint,firstByte=buf[i],codePoint=null,bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i+bytesPerSequence<=end)switch(bytesPerSequence){case 1:firstByte<128&&(codePoint=firstByte);break;case 2:128==(192&(secondByte=buf[i+1]))&&(tempCodePoint=(31&firstByte)<<6|63&secondByte)>127&&(codePoint=tempCodePoint);break;case 3:secondByte=buf[i+1],thirdByte=buf[i+2],128==(192&secondByte)&&128==(192&thirdByte)&&(tempCodePoint=(15&firstByte)<<12|(63&secondByte)<<6|63&thirdByte)>2047&&(tempCodePoint<55296||tempCodePoint>57343)&&(codePoint=tempCodePoint);break;case 4:secondByte=buf[i+1],thirdByte=buf[i+2],fourthByte=buf[i+3],128==(192&secondByte)&&128==(192&thirdByte)&&128==(192&fourthByte)&&(tempCodePoint=(15&firstByte)<<18|(63&secondByte)<<12|(63&thirdByte)<<6|63&fourthByte)>65535&&tempCodePoint<1114112&&(codePoint=tempCodePoint)}null===codePoint?(codePoint=65533,bytesPerSequence=1):codePoint>65535&&(codePoint-=65536,res.push(codePoint>>>10&1023|55296),codePoint=56320|1023&codePoint),res.push(codePoint),i+=bytesPerSequence}return function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,codePoints);var res="",i=0;for(;i<len;)res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));return res}(res)}exports.hp=Buffer,exports.IS=50,Buffer.TYPED_ARRAY_SUPPORT=void 0!==__webpack_require__.g.TYPED_ARRAY_SUPPORT?__webpack_require__.g.TYPED_ARRAY_SUPPORT:function typedArraySupport(){try{var arr=new Uint8Array(1);return arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===arr.foo()&&"function"==typeof arr.subarray&&0===arr.subarray(1,1).byteLength}catch(e){return!1}}(),kMaxLength(),Buffer.poolSize=8192,Buffer._augment=function(arr){return arr.__proto__=Buffer.prototype,arr},Buffer.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length)},Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0})),Buffer.alloc=function(size,fill,encoding){return function alloc(that,size,fill,encoding){return assertSize(size),size<=0?createBuffer(that,size):void 0!==fill?"string"==typeof encoding?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill):createBuffer(that,size)}(null,size,fill,encoding)},Buffer.allocUnsafe=function(size){return allocUnsafe(null,size)},Buffer.allocUnsafeSlow=function(size){return allocUnsafe(null,size)},Buffer.isBuffer=function isBuffer(b){return!(null==b||!b._isBuffer)},Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b))throw new TypeError("Arguments must be Buffers");if(a===b)return 0;for(var x=a.length,y=b.length,i=0,len=Math.min(x,y);i<len;++i)if(a[i]!==b[i]){x=a[i],y=b[i];break}return x<y?-1:y<x?1:0},Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function concat(list,length){if(!isArray(list))throw new TypeError('"list" argument must be an Array of Buffers');if(0===list.length)return Buffer.alloc(0);var i;if(void 0===length)for(length=0,i=0;i<list.length;++i)length+=list[i].length;var buffer=Buffer.allocUnsafe(length),pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!Buffer.isBuffer(buf))throw new TypeError('"list" argument must be an Array of Buffers');buf.copy(buffer,pos),pos+=buf.length}return buffer},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var i=0;i<len;i+=2)swap(this,i,i+1);return this},Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var i=0;i<len;i+=4)swap(this,i,i+3),swap(this,i+1,i+2);return this},Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var i=0;i<len;i+=8)swap(this,i,i+7),swap(this,i+1,i+6),swap(this,i+2,i+5),swap(this,i+3,i+4);return this},Buffer.prototype.toString=function toString(){var length=0|this.length;return 0===length?"":0===arguments.length?utf8Slice(this,0,length):slowToString.apply(this,arguments)},Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");return this===b||0===Buffer.compare(this,b)},Buffer.prototype.inspect=function inspect(){var str="",max=exports.IS;return this.length>0&&(str=this.toString("hex",0,max).match(/.{2}/g).join(" "),this.length>max&&(str+=" ... ")),"<Buffer "+str+">"},Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer.isBuffer(target))throw new TypeError("Argument must be a Buffer");if(void 0===start&&(start=0),void 0===end&&(end=target?target.length:0),void 0===thisStart&&(thisStart=0),void 0===thisEnd&&(thisEnd=this.length),start<0||end>target.length||thisStart<0||thisEnd>this.length)throw new RangeError("out of range index");if(thisStart>=thisEnd&&start>=end)return 0;if(thisStart>=thisEnd)return-1;if(start>=end)return 1;if(this===target)return 0;for(var x=(thisEnd>>>=0)-(thisStart>>>=0),y=(end>>>=0)-(start>>>=0),len=Math.min(x,y),thisCopy=this.slice(thisStart,thisEnd),targetCopy=target.slice(start,end),i=0;i<len;++i)if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i],y=targetCopy[i];break}return x<y?-1:y<x?1:0},Buffer.prototype.includes=function includes(val,byteOffset,encoding){return-1!==this.indexOf(val,byteOffset,encoding)},Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,!0)},Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,!1)},Buffer.prototype.write=function write(string,offset,length,encoding){if(void 0===offset)encoding="utf8",length=this.length,offset=0;else if(void 0===length&&"string"==typeof offset)encoding=offset,length=this.length,offset=0;else{if(!isFinite(offset))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");offset|=0,isFinite(length)?(length|=0,void 0===encoding&&(encoding="utf8")):(encoding=length,length=void 0)}var remaining=this.length-offset;if((void 0===length||length>remaining)&&(length=remaining),string.length>0&&(length<0||offset<0)||offset>this.length)throw new RangeError("Attempt to write outside buffer bounds");encoding||(encoding="utf8");for(var loweredCase=!1;;)switch(encoding){case"hex":return hexWrite(this,string,offset,length);case"utf8":case"utf-8":return utf8Write(this,string,offset,length);case"ascii":return asciiWrite(this,string,offset,length);case"latin1":case"binary":return latin1Write(this,string,offset,length);case"base64":return base64Write(this,string,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase(),loweredCase=!0}},Buffer.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i)ret+=String.fromCharCode(127&buf[i]);return ret}function latin1Slice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i)ret+=String.fromCharCode(buf[i]);return ret}function hexSlice(buf,start,end){var len=buf.length;(!start||start<0)&&(start=0),(!end||end<0||end>len)&&(end=len);for(var out="",i=start;i<end;++i)out+=toHex(buf[i]);return out}function utf16leSlice(buf,start,end){for(var bytes=buf.slice(start,end),res="",i=0;i<bytes.length;i+=2)res+=String.fromCharCode(bytes[i]+256*bytes[i+1]);return res}function checkOffset(offset,ext,length){if(offset%1!=0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError("Index out of range")}function objectWriteUInt16(buf,value,offset,littleEndian){value<0&&(value=65535+value+1);for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i)buf[offset+i]=(value&255<<8*(littleEndian?i:1-i))>>>8*(littleEndian?i:1-i)}function objectWriteUInt32(buf,value,offset,littleEndian){value<0&&(value=4294967295+value+1);for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i)buf[offset+i]=value>>>8*(littleEndian?i:3-i)&255}function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){return noAssert||checkIEEE754(buf,0,offset,4),ieee754.write(buf,value,offset,littleEndian,23,4),offset+4}function writeDouble(buf,value,offset,littleEndian,noAssert){return noAssert||checkIEEE754(buf,0,offset,8),ieee754.write(buf,value,offset,littleEndian,52,8),offset+8}Buffer.prototype.slice=function slice(start,end){var newBuf,len=this.length;if((start=~~start)<0?(start+=len)<0&&(start=0):start>len&&(start=len),(end=void 0===end?len:~~end)<0?(end+=len)<0&&(end=0):end>len&&(end=len),end<start&&(end=start),Buffer.TYPED_ARRAY_SUPPORT)(newBuf=this.subarray(start,end)).__proto__=Buffer.prototype;else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,void 0);for(var i=0;i<sliceLen;++i)newBuf[i]=this[i+start]}return newBuf},Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var val=this[offset],mul=1,i=0;++i<byteLength&&(mul*=256);)val+=this[offset+i]*mul;return val},Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var val=this[offset+--byteLength],mul=1;byteLength>0&&(mul*=256);)val+=this[offset+--byteLength]*mul;return val},Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){return noAssert||checkOffset(offset,1,this.length),this[offset]},Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){return noAssert||checkOffset(offset,2,this.length),this[offset]|this[offset+1]<<8},Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){return noAssert||checkOffset(offset,2,this.length),this[offset]<<8|this[offset+1]},Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+16777216*this[offset+3]},Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),16777216*this[offset]+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])},Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var val=this[offset],mul=1,i=0;++i<byteLength&&(mul*=256);)val+=this[offset+i]*mul;return val>=(mul*=128)&&(val-=Math.pow(2,8*byteLength)),val},Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var i=byteLength,mul=1,val=this[offset+--i];i>0&&(mul*=256);)val+=this[offset+--i]*mul;return val>=(mul*=128)&&(val-=Math.pow(2,8*byteLength)),val},Buffer.prototype.readInt8=function readInt8(offset,noAssert){return noAssert||checkOffset(offset,1,this.length),128&this[offset]?-1*(255-this[offset]+1):this[offset]},Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){noAssert||checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return 32768&val?4294901760|val:val},Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){noAssert||checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return 32768&val?4294901760|val:val},Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24},Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]},Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),ieee754.read(this,offset,!0,23,4)},Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),ieee754.read(this,offset,!1,23,4)},Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){return noAssert||checkOffset(offset,8,this.length),ieee754.read(this,offset,!0,52,8)},Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){return noAssert||checkOffset(offset,8,this.length),ieee754.read(this,offset,!1,52,8)},Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){(value=+value,offset|=0,byteLength|=0,noAssert)||checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength)-1,0);var mul=1,i=0;for(this[offset]=255&value;++i<byteLength&&(mul*=256);)this[offset+i]=value/mul&255;return offset+byteLength},Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){(value=+value,offset|=0,byteLength|=0,noAssert)||checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength)-1,0);var i=byteLength-1,mul=1;for(this[offset+i]=255&value;--i>=0&&(mul*=256);)this[offset+i]=value/mul&255;return offset+byteLength},Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(value=Math.floor(value)),this[offset]=255&value,offset+1},Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=255&value,this[offset+1]=value>>>8):objectWriteUInt16(this,value,offset,!0),offset+2},Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>8,this[offset+1]=255&value):objectWriteUInt16(this,value,offset,!1),offset+2},Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset+3]=value>>>24,this[offset+2]=value>>>16,this[offset+1]=value>>>8,this[offset]=255&value):objectWriteUInt32(this,value,offset,!0),offset+4},Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>24,this[offset+1]=value>>>16,this[offset+2]=value>>>8,this[offset+3]=255&value):objectWriteUInt32(this,value,offset,!1),offset+4},Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){if(value=+value,offset|=0,!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=0,mul=1,sub=0;for(this[offset]=255&value;++i<byteLength&&(mul*=256);)value<0&&0===sub&&0!==this[offset+i-1]&&(sub=1),this[offset+i]=(value/mul|0)-sub&255;return offset+byteLength},Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){if(value=+value,offset|=0,!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=byteLength-1,mul=1,sub=0;for(this[offset+i]=255&value;--i>=0&&(mul*=256);)value<0&&0===sub&&0!==this[offset+i+1]&&(sub=1),this[offset+i]=(value/mul|0)-sub&255;return offset+byteLength},Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(value=Math.floor(value)),value<0&&(value=255+value+1),this[offset]=255&value,offset+1},Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=255&value,this[offset+1]=value>>>8):objectWriteUInt16(this,value,offset,!0),offset+2},Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>8,this[offset+1]=255&value):objectWriteUInt16(this,value,offset,!1),offset+2},Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=255&value,this[offset+1]=value>>>8,this[offset+2]=value>>>16,this[offset+3]=value>>>24):objectWriteUInt32(this,value,offset,!0),offset+4},Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,2147483647,-2147483648),value<0&&(value=4294967295+value+1),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>24,this[offset+1]=value>>>16,this[offset+2]=value>>>8,this[offset+3]=255&value):objectWriteUInt32(this,value,offset,!1),offset+4},Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,!0,noAssert)},Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,!1,noAssert)},Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,!0,noAssert)},Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,!1,noAssert)},Buffer.prototype.copy=function copy(target,targetStart,start,end){if(start||(start=0),end||0===end||(end=this.length),targetStart>=target.length&&(targetStart=target.length),targetStart||(targetStart=0),end>0&&end<start&&(end=start),end===start)return 0;if(0===target.length||0===this.length)return 0;if(targetStart<0)throw new RangeError("targetStart out of bounds");if(start<0||start>=this.length)throw new RangeError("sourceStart out of bounds");if(end<0)throw new RangeError("sourceEnd out of bounds");end>this.length&&(end=this.length),target.length-targetStart<end-start&&(end=target.length-targetStart+start);var i,len=end-start;if(this===target&&start<targetStart&&targetStart<end)for(i=len-1;i>=0;--i)target[i+targetStart]=this[i+start];else if(len<1e3||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;i<len;++i)target[i+targetStart]=this[i+start];else Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);return len},Buffer.prototype.fill=function fill(val,start,end,encoding){if("string"==typeof val){if("string"==typeof start?(encoding=start,start=0,end=this.length):"string"==typeof end&&(encoding=end,end=this.length),1===val.length){var code=val.charCodeAt(0);code<256&&(val=code)}if(void 0!==encoding&&"string"!=typeof encoding)throw new TypeError("encoding must be a string");if("string"==typeof encoding&&!Buffer.isEncoding(encoding))throw new TypeError("Unknown encoding: "+encoding)}else"number"==typeof val&&(val&=255);if(start<0||this.length<start||this.length<end)throw new RangeError("Out of range index");if(end<=start)return this;var i;if(start>>>=0,end=void 0===end?this.length:end>>>0,val||(val=0),"number"==typeof val)for(i=start;i<end;++i)this[i]=val;else{var bytes=Buffer.isBuffer(val)?val:utf8ToBytes(new Buffer(val,encoding).toString()),len=bytes.length;for(i=0;i<end-start;++i)this[i+start]=bytes[i%len]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function toHex(n){return n<16?"0"+n.toString(16):n.toString(16)}function utf8ToBytes(string,units){var codePoint;units=units||1/0;for(var length=string.length,leadSurrogate=null,bytes=[],i=0;i<length;++i){if((codePoint=string.charCodeAt(i))>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){(units-=3)>-1&&bytes.push(239,191,189);continue}if(i+1===length){(units-=3)>-1&&bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){(units-=3)>-1&&bytes.push(239,191,189),leadSurrogate=codePoint;continue}codePoint=65536+(leadSurrogate-55296<<10|codePoint-56320)}else leadSurrogate&&(units-=3)>-1&&bytes.push(239,191,189);if(leadSurrogate=null,codePoint<128){if((units-=1)<0)break;bytes.push(codePoint)}else if(codePoint<2048){if((units-=2)<0)break;bytes.push(codePoint>>6|192,63&codePoint|128)}else if(codePoint<65536){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,63&codePoint|128)}else{if(!(codePoint<1114112))throw new Error("Invalid code point");if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,63&codePoint|128)}}return bytes}function base64ToBytes(str){return base64.toByteArray(function base64clean(str){if((str=function stringtrim(str){return str.trim?str.trim():str.replace(/^\s+|\s+$/g,"")}(str).replace(INVALID_BASE64_RE,"")).length<2)return"";for(;str.length%4!=0;)str+="=";return str}(str))}function blitBuffer(src,dst,offset,length){for(var i=0;i<length&&!(i+offset>=dst.length||i>=src.length);++i)dst[i+offset]=src[i];return i}},"./node_modules/aws-sdk/node_modules/buffer/node_modules/ieee754/index.js":(__unused_webpack_module,exports)=>{exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m,eLen=8*nBytes-mLen-1,eMax=(1<<eLen)-1,eBias=eMax>>1,nBits=-7,i=isLE?nBytes-1:0,d=isLE?-1:1,s=buffer[offset+i];for(i+=d,e=s&(1<<-nBits)-1,s>>=-nBits,nBits+=eLen;nBits>0;e=256*e+buffer[offset+i],i+=d,nBits-=8);for(m=e&(1<<-nBits)-1,e>>=-nBits,nBits+=mLen;nBits>0;m=256*m+buffer[offset+i],i+=d,nBits-=8);if(0===e)e=1-eBias;else{if(e===eMax)return m?NaN:1/0*(s?-1:1);m+=Math.pow(2,mLen),e-=eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)},exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c,eLen=8*nBytes-mLen-1,eMax=(1<<eLen)-1,eBias=eMax>>1,rt=23===mLen?Math.pow(2,-24)-Math.pow(2,-77):0,i=isLE?0:nBytes-1,d=isLE?1:-1,s=value<0||0===value&&1/value<0?1:0;for(value=Math.abs(value),isNaN(value)||value===1/0?(m=isNaN(value)?1:0,e=eMax):(e=Math.floor(Math.log(value)/Math.LN2),value*(c=Math.pow(2,-e))<1&&(e--,c*=2),(value+=e+eBias>=1?rt/c:rt*Math.pow(2,1-eBias))*c>=2&&(e++,c/=2),e+eBias>=eMax?(m=0,e=eMax):e+eBias>=1?(m=(value*c-1)*Math.pow(2,mLen),e+=eBias):(m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen),e=0));mLen>=8;buffer[offset+i]=255&m,i+=d,m/=256,mLen-=8);for(e=e<<mLen|m,eLen+=mLen;eLen>0;buffer[offset+i]=255&e,i+=d,e/=256,eLen-=8);buffer[offset+i-d]|=128*s}},"./node_modules/aws-sdk/node_modules/events/events.js":module=>{function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(arg){return"function"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isUndefined(arg){return void 0===arg}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(n){if(!function isNumber(arg){return"number"==typeof arg}(n)||n<0||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this},EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(this._events||(this._events={}),"error"===type&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if((er=arguments[1])instanceof Error)throw er;var err=new Error('Uncaught, unspecified "error" event. ('+er+")");throw err.context=er,err}if(isUndefined(handler=this._events[type]))return!1;if(isFunction(handler))switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:args=Array.prototype.slice.call(arguments,1),handler.apply(this,args)}else if(isObject(handler))for(args=Array.prototype.slice.call(arguments,1),len=(listeners=handler.slice()).length,i=0;i<len;i++)listeners[i].apply(this,args);return!0},EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener),this._events[type]?isObject(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener,isObject(this._events[type])&&!this._events[type].warned&&(m=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners)&&m>0&&this._events[type].length>m&&(this._events[type].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length),"function"==typeof console.trace&&console.trace()),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError("listener must be a function");var fired=!1;function g(){this.removeListener(type,g),fired||(fired=!0,listener.apply(this,arguments))}return g.listener=listener,this.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;if(length=(list=this._events[type]).length,position=-1,list===listener||isFunction(list.listener)&&list.listener===listener)delete this._events[type],this._events.removeListener&&this.emit("removeListener",type,listener);else if(isObject(list)){for(i=length;i-- >0;)if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}if(position<0)return this;1===list.length?(list.length=0,delete this._events[type]):list.splice(position,1),this._events.removeListener&&this.emit("removeListener",type,listener)}return this},EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[type]&&delete this._events[type],this;if(0===arguments.length){for(key in this._events)"removeListener"!==key&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events={},this}if(isFunction(listeners=this._events[type]))this.removeListener(type,listeners);else if(listeners)for(;listeners.length;)this.removeListener(type,listeners[listeners.length-1]);return delete this._events[type],this},EventEmitter.prototype.listeners=function(type){return this._events&&this._events[type]?isFunction(this._events[type])?[this._events[type]]:this._events[type].slice():[]},EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;if(evlistener)return evlistener.length}return 0},EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type)}},"./node_modules/aws-sdk/node_modules/punycode/punycode.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;module=__webpack_require__.nmd(module),function(root){exports&&exports.nodeType,module&&module.nodeType;var freeGlobal="object"==typeof __webpack_require__.g&&__webpack_require__.g;freeGlobal.global!==freeGlobal&&freeGlobal.window!==freeGlobal&&freeGlobal.self;var punycode,maxInt=2147483647,base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,delimiter="-",regexPunycode=/^xn--/,regexNonASCII=/[^\x20-\x7E]/,regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,errors={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode;function error(type){throw RangeError(errors[type])}function map(array,fn){for(var length=array.length,result=[];length--;)result[length]=fn(array[length]);return result}function mapDomain(string,fn){var parts=string.split("@"),result="";return parts.length>1&&(result=parts[0]+"@",string=parts[1]),result+map((string=string.replace(regexSeparators,".")).split("."),fn).join(".")}function ucs2decode(string){for(var value,extra,output=[],counter=0,length=string.length;counter<length;)(value=string.charCodeAt(counter++))>=55296&&value<=56319&&counter<length?56320==(64512&(extra=string.charCodeAt(counter++)))?output.push(((1023&value)<<10)+(1023&extra)+65536):(output.push(value),counter--):output.push(value);return output}function ucs2encode(array){return map(array,(function(value){var output="";return value>65535&&(output+=stringFromCharCode((value-=65536)>>>10&1023|55296),value=56320|1023&value),output+=stringFromCharCode(value)})).join("")}function digitToBasic(digit,flag){return digit+22+75*(digit<26)-((0!=flag)<<5)}function adapt(delta,numPoints,firstTime){var k=0;for(delta=firstTime?floor(delta/damp):delta>>1,delta+=floor(delta/numPoints);delta>baseMinusTMin*tMax>>1;k+=base)delta=floor(delta/baseMinusTMin);return floor(k+(baseMinusTMin+1)*delta/(delta+skew))}function decode(input){var out,basic,j,index,oldi,w,k,digit,t,baseMinusT,codePoint,output=[],inputLength=input.length,i=0,n=initialN,bias=initialBias;for((basic=input.lastIndexOf(delimiter))<0&&(basic=0),j=0;j<basic;++j)input.charCodeAt(j)>=128&&error("not-basic"),output.push(input.charCodeAt(j));for(index=basic>0?basic+1:0;index<inputLength;){for(oldi=i,w=1,k=base;index>=inputLength&&error("invalid-input"),((digit=(codePoint=input.charCodeAt(index++))-48<10?codePoint-22:codePoint-65<26?codePoint-65:codePoint-97<26?codePoint-97:base)>=base||digit>floor((maxInt-i)/w))&&error("overflow"),i+=digit*w,!(digit<(t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias));k+=base)w>floor(maxInt/(baseMinusT=base-t))&&error("overflow"),w*=baseMinusT;bias=adapt(i-oldi,out=output.length+1,0==oldi),floor(i/out)>maxInt-n&&error("overflow"),n+=floor(i/out),i%=out,output.splice(i++,0,n)}return ucs2encode(output)}function encode(input){var n,delta,handledCPCount,basicLength,bias,j,m,q,k,t,currentValue,inputLength,handledCPCountPlusOne,baseMinusT,qMinusT,output=[];for(inputLength=(input=ucs2decode(input)).length,n=initialN,delta=0,bias=initialBias,j=0;j<inputLength;++j)(currentValue=input[j])<128&&output.push(stringFromCharCode(currentValue));for(handledCPCount=basicLength=output.length,basicLength&&output.push(delimiter);handledCPCount<inputLength;){for(m=maxInt,j=0;j<inputLength;++j)(currentValue=input[j])>=n&&currentValue<m&&(m=currentValue);for(m-n>floor((maxInt-delta)/(handledCPCountPlusOne=handledCPCount+1))&&error("overflow"),delta+=(m-n)*handledCPCountPlusOne,n=m,j=0;j<inputLength;++j)if((currentValue=input[j])<n&&++delta>maxInt&&error("overflow"),currentValue==n){for(q=delta,k=base;!(q<(t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias));k+=base)qMinusT=q-t,baseMinusT=base-t,output.push(stringFromCharCode(digitToBasic(t+qMinusT%baseMinusT,0))),q=floor(qMinusT/baseMinusT);output.push(stringFromCharCode(digitToBasic(q,0))),bias=adapt(delta,handledCPCountPlusOne,handledCPCount==basicLength),delta=0,++handledCPCount}++delta,++n}return output.join("")}punycode={version:"1.3.2",ucs2:{decode:ucs2decode,encode:ucs2encode},decode,encode,toASCII:function toASCII(input){return mapDomain(input,(function(string){return regexNonASCII.test(string)?"xn--"+encode(string):string}))},toUnicode:function toUnicode(input){return mapDomain(input,(function(string){return regexPunycode.test(string)?decode(string.slice(4).toLowerCase()):string}))}},void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return punycode}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/aws-sdk/node_modules/url/url.js":(__unused_webpack_module,exports,__webpack_require__)=>{var punycode=__webpack_require__("./node_modules/aws-sdk/node_modules/punycode/punycode.js");function Url(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}exports.parse=urlParse,exports.resolve=function urlResolve(source,relative){return urlParse(source,!1,!0).resolve(relative)},exports.resolveObject=function urlResolveObject(source,relative){return source?urlParse(source,!1,!0).resolveObject(relative):relative},exports.format=function urlFormat(obj){isString(obj)&&(obj=urlParse(obj));return obj instanceof Url?obj.format():Url.prototype.format.call(obj)},exports.Url=Url;var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,unwise=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),autoEscape=["'"].concat(unwise),nonHostChars=["%","/","?",";","#"].concat(autoEscape),hostEndingChars=["/","?","#"],hostnamePartPattern=/^[a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([a-z0-9A-Z_-]{0,63})(.*)$/,unsafeProtocol={javascript:!0,"javascript:":!0},hostlessProtocol={javascript:!0,"javascript:":!0},slashedProtocol={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},querystring=__webpack_require__("./node_modules/querystring/index.js");function urlParse(url,parseQueryString,slashesDenoteHost){if(url&&isObject(url)&&url instanceof Url)return url;var u=new Url;return u.parse(url,parseQueryString,slashesDenoteHost),u}function isString(arg){return"string"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isNull(arg){return null===arg}Url.prototype.parse=function(url,parseQueryString,slashesDenoteHost){if(!isString(url))throw new TypeError("Parameter 'url' must be a string, not "+typeof url);var rest=url;rest=rest.trim();var proto=protocolPattern.exec(rest);if(proto){var lowerProto=(proto=proto[0]).toLowerCase();this.protocol=lowerProto,rest=rest.substr(proto.length)}if(slashesDenoteHost||proto||rest.match(/^\/\/[^@\/]+@[^@\/]+/)){var slashes="//"===rest.substr(0,2);!slashes||proto&&hostlessProtocol[proto]||(rest=rest.substr(2),this.slashes=!0)}if(!hostlessProtocol[proto]&&(slashes||proto&&!slashedProtocol[proto])){for(var auth,atSign,hostEnd=-1,i=0;i<hostEndingChars.length;i++){-1!==(hec=rest.indexOf(hostEndingChars[i]))&&(-1===hostEnd||hec<hostEnd)&&(hostEnd=hec)}-1!==(atSign=-1===hostEnd?rest.lastIndexOf("@"):rest.lastIndexOf("@",hostEnd))&&(auth=rest.slice(0,atSign),rest=rest.slice(atSign+1),this.auth=decodeURIComponent(auth)),hostEnd=-1;for(i=0;i<nonHostChars.length;i++){var hec;-1!==(hec=rest.indexOf(nonHostChars[i]))&&(-1===hostEnd||hec<hostEnd)&&(hostEnd=hec)}-1===hostEnd&&(hostEnd=rest.length),this.host=rest.slice(0,hostEnd),rest=rest.slice(hostEnd),this.parseHost(),this.hostname=this.hostname||"";var ipv6Hostname="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!ipv6Hostname)for(var hostparts=this.hostname.split(/\./),l=(i=0,hostparts.length);i<l;i++){var part=hostparts[i];if(part&&!part.match(hostnamePartPattern)){for(var newpart="",j=0,k=part.length;j<k;j++)part.charCodeAt(j)>127?newpart+="x":newpart+=part[j];if(!newpart.match(hostnamePartPattern)){var validParts=hostparts.slice(0,i),notHost=hostparts.slice(i+1),bit=part.match(hostnamePartStart);bit&&(validParts.push(bit[1]),notHost.unshift(bit[2])),notHost.length&&(rest="/"+notHost.join(".")+rest),this.hostname=validParts.join(".");break}}}if(this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),!ipv6Hostname){var domainArray=this.hostname.split("."),newOut=[];for(i=0;i<domainArray.length;++i){var s=domainArray[i];newOut.push(s.match(/[^A-Za-z0-9_-]/)?"xn--"+punycode.encode(s):s)}this.hostname=newOut.join(".")}var p=this.port?":"+this.port:"",h=this.hostname||"";this.host=h+p,this.href+=this.host,ipv6Hostname&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==rest[0]&&(rest="/"+rest))}if(!unsafeProtocol[lowerProto])for(i=0,l=autoEscape.length;i<l;i++){var ae=autoEscape[i],esc=encodeURIComponent(ae);esc===ae&&(esc=escape(ae)),rest=rest.split(ae).join(esc)}var hash=rest.indexOf("#");-1!==hash&&(this.hash=rest.substr(hash),rest=rest.slice(0,hash));var qm=rest.indexOf("?");if(-1!==qm?(this.search=rest.substr(qm),this.query=rest.substr(qm+1),parseQueryString&&(this.query=querystring.parse(this.query)),rest=rest.slice(0,qm)):parseQueryString&&(this.search="",this.query={}),rest&&(this.pathname=rest),slashedProtocol[lowerProto]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){p=this.pathname||"",s=this.search||"";this.path=p+s}return this.href=this.format(),this},Url.prototype.format=function(){var auth=this.auth||"";auth&&(auth=(auth=encodeURIComponent(auth)).replace(/%3A/i,":"),auth+="@");var protocol=this.protocol||"",pathname=this.pathname||"",hash=this.hash||"",host=!1,query="";this.host?host=auth+this.host:this.hostname&&(host=auth+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(host+=":"+this.port)),this.query&&isObject(this.query)&&Object.keys(this.query).length&&(query=querystring.stringify(this.query));var search=this.search||query&&"?"+query||"";return protocol&&":"!==protocol.substr(-1)&&(protocol+=":"),this.slashes||(!protocol||slashedProtocol[protocol])&&!1!==host?(host="//"+(host||""),pathname&&"/"!==pathname.charAt(0)&&(pathname="/"+pathname)):host||(host=""),hash&&"#"!==hash.charAt(0)&&(hash="#"+hash),search&&"?"!==search.charAt(0)&&(search="?"+search),protocol+host+(pathname=pathname.replace(/[?#]/g,(function(match){return encodeURIComponent(match)})))+(search=search.replace("#","%23"))+hash},Url.prototype.resolve=function(relative){return this.resolveObject(urlParse(relative,!1,!0)).format()},Url.prototype.resolveObject=function(relative){if(isString(relative)){var rel=new Url;rel.parse(relative,!1,!0),relative=rel}var result=new Url;if(Object.keys(this).forEach((function(k){result[k]=this[k]}),this),result.hash=relative.hash,""===relative.href)return result.href=result.format(),result;if(relative.slashes&&!relative.protocol)return Object.keys(relative).forEach((function(k){"protocol"!==k&&(result[k]=relative[k])})),slashedProtocol[result.protocol]&&result.hostname&&!result.pathname&&(result.path=result.pathname="/"),result.href=result.format(),result;if(relative.protocol&&relative.protocol!==result.protocol){if(!slashedProtocol[relative.protocol])return Object.keys(relative).forEach((function(k){result[k]=relative[k]})),result.href=result.format(),result;if(result.protocol=relative.protocol,relative.host||hostlessProtocol[relative.protocol])result.pathname=relative.pathname;else{for(var relPath=(relative.pathname||"").split("/");relPath.length&&!(relative.host=relPath.shift()););relative.host||(relative.host=""),relative.hostname||(relative.hostname=""),""!==relPath[0]&&relPath.unshift(""),relPath.length<2&&relPath.unshift(""),result.pathname=relPath.join("/")}if(result.search=relative.search,result.query=relative.query,result.host=relative.host||"",result.auth=relative.auth,result.hostname=relative.hostname||relative.host,result.port=relative.port,result.pathname||result.search){var p=result.pathname||"",s=result.search||"";result.path=p+s}return result.slashes=result.slashes||relative.slashes,result.href=result.format(),result}var isSourceAbs=result.pathname&&"/"===result.pathname.charAt(0),isRelAbs=relative.host||relative.pathname&&"/"===relative.pathname.charAt(0),mustEndAbs=isRelAbs||isSourceAbs||result.host&&relative.pathname,removeAllDots=mustEndAbs,srcPath=result.pathname&&result.pathname.split("/")||[],psychotic=(relPath=relative.pathname&&relative.pathname.split("/")||[],result.protocol&&!slashedProtocol[result.protocol]);if(psychotic&&(result.hostname="",result.port=null,result.host&&(""===srcPath[0]?srcPath[0]=result.host:srcPath.unshift(result.host)),result.host="",relative.protocol&&(relative.hostname=null,relative.port=null,relative.host&&(""===relPath[0]?relPath[0]=relative.host:relPath.unshift(relative.host)),relative.host=null),mustEndAbs=mustEndAbs&&(""===relPath[0]||""===srcPath[0])),isRelAbs)result.host=relative.host||""===relative.host?relative.host:result.host,result.hostname=relative.hostname||""===relative.hostname?relative.hostname:result.hostname,result.search=relative.search,result.query=relative.query,srcPath=relPath;else if(relPath.length)srcPath||(srcPath=[]),srcPath.pop(),srcPath=srcPath.concat(relPath),result.search=relative.search,result.query=relative.query;else if(!function isNullOrUndefined(arg){return null==arg}(relative.search)){if(psychotic)result.hostname=result.host=srcPath.shift(),(authInHost=!!(result.host&&result.host.indexOf("@")>0)&&result.host.split("@"))&&(result.auth=authInHost.shift(),result.host=result.hostname=authInHost.shift());return result.search=relative.search,result.query=relative.query,isNull(result.pathname)&&isNull(result.search)||(result.path=(result.pathname?result.pathname:"")+(result.search?result.search:"")),result.href=result.format(),result}if(!srcPath.length)return result.pathname=null,result.search?result.path="/"+result.search:result.path=null,result.href=result.format(),result;for(var last=srcPath.slice(-1)[0],hasTrailingSlash=(result.host||relative.host)&&("."===last||".."===last)||""===last,up=0,i=srcPath.length;i>=0;i--)"."==(last=srcPath[i])?srcPath.splice(i,1):".."===last?(srcPath.splice(i,1),up++):up&&(srcPath.splice(i,1),up--);if(!mustEndAbs&&!removeAllDots)for(;up--;up)srcPath.unshift("..");!mustEndAbs||""===srcPath[0]||srcPath[0]&&"/"===srcPath[0].charAt(0)||srcPath.unshift(""),hasTrailingSlash&&"/"!==srcPath.join("/").substr(-1)&&srcPath.push("");var authInHost,isAbsolute=""===srcPath[0]||srcPath[0]&&"/"===srcPath[0].charAt(0);psychotic&&(result.hostname=result.host=isAbsolute?"":srcPath.length?srcPath.shift():"",(authInHost=!!(result.host&&result.host.indexOf("@")>0)&&result.host.split("@"))&&(result.auth=authInHost.shift(),result.host=result.hostname=authInHost.shift()));return(mustEndAbs=mustEndAbs||result.host&&srcPath.length)&&!isAbsolute&&srcPath.unshift(""),srcPath.length?result.pathname=srcPath.join("/"):(result.pathname=null,result.path=null),isNull(result.pathname)&&isNull(result.search)||(result.path=(result.pathname?result.pathname:"")+(result.search?result.search:"")),result.auth=relative.auth||result.auth,result.slashes=result.slashes||relative.slashes,result.href=result.format(),result},Url.prototype.parseHost=function(){var host=this.host,port=portPattern.exec(host);port&&(":"!==(port=port[0])&&(this.port=port.substr(1)),host=host.substr(0,host.length-port.length)),host&&(this.hostname=host)}},"./node_modules/isarray/index.js":module=>{var toString={}.toString;module.exports=Array.isArray||function(arr){return"[object Array]"==toString.call(arr)}},"./node_modules/querystring/decode.js":module=>{"use strict";function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)}module.exports=function(qs,sep,eq,options){sep=sep||"&",eq=eq||"=";var obj={};if("string"!=typeof qs||0===qs.length)return obj;var regexp=/\+/g;qs=qs.split(sep);var maxKeys=1e3;options&&"number"==typeof options.maxKeys&&(maxKeys=options.maxKeys);var len=qs.length;maxKeys>0&&len>maxKeys&&(len=maxKeys);for(var i=0;i<len;++i){var kstr,vstr,k,v,x=qs[i].replace(regexp,"%20"),idx=x.indexOf(eq);idx>=0?(kstr=x.substr(0,idx),vstr=x.substr(idx+1)):(kstr=x,vstr=""),k=decodeURIComponent(kstr),v=decodeURIComponent(vstr),hasOwnProperty(obj,k)?Array.isArray(obj[k])?obj[k].push(v):obj[k]=[obj[k],v]:obj[k]=v}return obj}},"./node_modules/querystring/encode.js":module=>{"use strict";var stringifyPrimitive=function(v){switch(typeof v){case"string":return v;case"boolean":return v?"true":"false";case"number":return isFinite(v)?v:"";default:return""}};module.exports=function(obj,sep,eq,name){return sep=sep||"&",eq=eq||"=",null===obj&&(obj=void 0),"object"==typeof obj?Object.keys(obj).map((function(k){var ks=encodeURIComponent(stringifyPrimitive(k))+eq;return Array.isArray(obj[k])?obj[k].map((function(v){return ks+encodeURIComponent(stringifyPrimitive(v))})).join(sep):ks+encodeURIComponent(stringifyPrimitive(obj[k]))})).join(sep):name?encodeURIComponent(stringifyPrimitive(name))+eq+encodeURIComponent(stringifyPrimitive(obj)):""}},"./node_modules/querystring/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";exports.decode=exports.parse=__webpack_require__("./node_modules/querystring/decode.js"),exports.encode=exports.stringify=__webpack_require__("./node_modules/querystring/encode.js")},"./node_modules/aws-sdk/apis/cognito-identity-2014-06-30.min.json":module=>{"use strict";module.exports=JSON.parse('{"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-identity","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Cognito Identity","serviceId":"Cognito Identity","signatureVersion":"v4","targetPrefix":"AWSCognitoIdentityService","uid":"cognito-identity-2014-06-30"},"operations":{"CreateIdentityPool":{"input":{"type":"structure","required":["IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"AllowClassicFlow":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S5"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S9"},"CognitoIdentityProviders":{"shape":"Sb"},"SamlProviderARNs":{"shape":"Sg"},"IdentityPoolTags":{"shape":"Sh"}}},"output":{"shape":"Sk"}},"DeleteIdentities":{"input":{"type":"structure","required":["IdentityIdsToDelete"],"members":{"IdentityIdsToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"UnprocessedIdentityIds":{"type":"list","member":{"type":"structure","members":{"IdentityId":{},"ErrorCode":{}}}}}}},"DeleteIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}}},"DescribeIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{}}},"output":{"shape":"Sv"}},"DescribeIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"shape":"Sk"}},"GetCredentialsForIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"S10"},"CustomRoleArn":{}}},"output":{"type":"structure","members":{"IdentityId":{},"Credentials":{"type":"structure","members":{"AccessKeyId":{},"SecretKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}}}},"authtype":"none"},"GetId":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"AccountId":{},"IdentityPoolId":{},"Logins":{"shape":"S10"}}},"output":{"type":"structure","members":{"IdentityId":{}}},"authtype":"none"},"GetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Roles":{"shape":"S1c"},"RoleMappings":{"shape":"S1e"}}}},"GetOpenIdToken":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"S10"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}},"authtype":"none"},"GetOpenIdTokenForDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId","Logins"],"members":{"IdentityPoolId":{},"IdentityId":{},"Logins":{"shape":"S10"},"PrincipalTags":{"shape":"S1s"},"TokenDuration":{"type":"long"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}}},"GetPrincipalTagAttributeMap":{"input":{"type":"structure","required":["IdentityPoolId","IdentityProviderName"],"members":{"IdentityPoolId":{},"IdentityProviderName":{}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"IdentityProviderName":{},"UseDefaults":{"type":"boolean"},"PrincipalTags":{"shape":"S1s"}}}},"ListIdentities":{"input":{"type":"structure","required":["IdentityPoolId","MaxResults"],"members":{"IdentityPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{},"HideDisabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Identities":{"type":"list","member":{"shape":"Sv"}},"NextToken":{}}}},"ListIdentityPools":{"input":{"type":"structure","required":["MaxResults"],"members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityPools":{"type":"list","member":{"type":"structure","members":{"IdentityPoolId":{},"IdentityPoolName":{}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sh"}}}},"LookupDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{},"IdentityId":{},"DeveloperUserIdentifier":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityId":{},"DeveloperUserIdentifierList":{"type":"list","member":{}},"NextToken":{}}}},"MergeDeveloperIdentities":{"input":{"type":"structure","required":["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],"members":{"SourceUserIdentifier":{},"DestinationUserIdentifier":{},"DeveloperProviderName":{},"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityId":{}}}},"SetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId","Roles"],"members":{"IdentityPoolId":{},"Roles":{"shape":"S1c"},"RoleMappings":{"shape":"S1e"}}}},"SetPrincipalTagAttributeMap":{"input":{"type":"structure","required":["IdentityPoolId","IdentityProviderName"],"members":{"IdentityPoolId":{},"IdentityProviderName":{},"UseDefaults":{"type":"boolean"},"PrincipalTags":{"shape":"S1s"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"IdentityProviderName":{},"UseDefaults":{"type":"boolean"},"PrincipalTags":{"shape":"S1s"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"Sh"}}},"output":{"type":"structure","members":{}}},"UnlinkDeveloperIdentity":{"input":{"type":"structure","required":["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],"members":{"IdentityId":{},"IdentityPoolId":{},"DeveloperProviderName":{},"DeveloperUserIdentifier":{}}}},"UnlinkIdentity":{"input":{"type":"structure","required":["IdentityId","Logins","LoginsToRemove"],"members":{"IdentityId":{},"Logins":{"shape":"S10"},"LoginsToRemove":{"shape":"Sw"}}},"authtype":"none"},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateIdentityPool":{"input":{"shape":"Sk"},"output":{"shape":"Sk"}}},"shapes":{"S5":{"type":"map","key":{},"value":{}},"S9":{"type":"list","member":{}},"Sb":{"type":"list","member":{"type":"structure","members":{"ProviderName":{},"ClientId":{},"ServerSideTokenCheck":{"type":"boolean"}}}},"Sg":{"type":"list","member":{}},"Sh":{"type":"map","key":{},"value":{}},"Sk":{"type":"structure","required":["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolId":{},"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"AllowClassicFlow":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S5"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S9"},"CognitoIdentityProviders":{"shape":"Sb"},"SamlProviderARNs":{"shape":"Sg"},"IdentityPoolTags":{"shape":"Sh"}}},"Sv":{"type":"structure","members":{"IdentityId":{},"Logins":{"shape":"Sw"},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"}}},"Sw":{"type":"list","member":{}},"S10":{"type":"map","key":{},"value":{}},"S1c":{"type":"map","key":{},"value":{}},"S1e":{"type":"map","key":{},"value":{"type":"structure","required":["Type"],"members":{"Type":{},"AmbiguousRoleResolution":{},"RulesConfiguration":{"type":"structure","required":["Rules"],"members":{"Rules":{"type":"list","member":{"type":"structure","required":["Claim","MatchType","Value","RoleARN"],"members":{"Claim":{},"MatchType":{},"Value":{},"RoleARN":{}}}}}}}}},"S1s":{"type":"map","key":{},"value":{}}}}')},"./node_modules/aws-sdk/apis/cognito-identity-2014-06-30.paginators.json":module=>{"use strict";module.exports=JSON.parse('{"X":{"ListIdentityPools":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"IdentityPools"}}}')},"./node_modules/aws-sdk/apis/firehose-2015-08-04.min.json":module=>{"use strict";module.exports=JSON.parse('{"version":"2.0","metadata":{"apiVersion":"2015-08-04","endpointPrefix":"firehose","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Firehose","serviceFullName":"Amazon Kinesis Firehose","serviceId":"Firehose","signatureVersion":"v4","targetPrefix":"Firehose_20150804","uid":"firehose-2015-08-04"},"operations":{"CreateDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"DeliveryStreamType":{},"KinesisStreamSourceConfiguration":{"type":"structure","required":["KinesisStreamARN","RoleARN"],"members":{"KinesisStreamARN":{},"RoleARN":{}}},"DeliveryStreamEncryptionConfigurationInput":{"shape":"S7"},"S3DestinationConfiguration":{"shape":"Sa","deprecated":true},"ExtendedS3DestinationConfiguration":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupConfiguration":{"shape":"Sa"},"DataFormatConversionConfiguration":{"shape":"Sz"},"DynamicPartitioningConfiguration":{"shape":"S1o"}}},"RedshiftDestinationConfiguration":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","Password","S3Configuration"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"S1t"},"Username":{"shape":"S1x"},"Password":{"shape":"S1y"},"RetryOptions":{"shape":"S1z"},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupConfiguration":{"shape":"Sa"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"ElasticsearchDestinationConfiguration":{"type":"structure","required":["RoleARN","IndexName","S3Configuration"],"members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S28"},"RetryOptions":{"shape":"S2b"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"},"VpcConfiguration":{"shape":"S2e"}}},"AmazonopensearchserviceDestinationConfiguration":{"type":"structure","required":["RoleARN","IndexName","S3Configuration"],"members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S2n"},"RetryOptions":{"shape":"S2q"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"},"VpcConfiguration":{"shape":"S2e"}}},"SplunkDestinationConfiguration":{"type":"structure","required":["HECEndpoint","HECEndpointType","HECToken","S3Configuration"],"members":{"HECEndpoint":{},"HECEndpointType":{},"HECToken":{},"HECAcknowledgmentTimeoutInSeconds":{"type":"integer"},"RetryOptions":{"shape":"S2y"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"HttpEndpointDestinationConfiguration":{"type":"structure","required":["EndpointConfiguration","S3Configuration"],"members":{"EndpointConfiguration":{"shape":"S32"},"BufferingHints":{"shape":"S36"},"CloudWatchLoggingOptions":{"shape":"Sl"},"RequestConfiguration":{"shape":"S39"},"ProcessingConfiguration":{"shape":"Sq"},"RoleARN":{},"RetryOptions":{"shape":"S3f"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"}}},"Tags":{"shape":"S3i"}}},"output":{"type":"structure","members":{"DeliveryStreamARN":{}}}},"DeleteDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"AllowForceDelete":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DescribeDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"Limit":{"type":"integer"},"ExclusiveStartDestinationId":{}}},"output":{"type":"structure","required":["DeliveryStreamDescription"],"members":{"DeliveryStreamDescription":{"type":"structure","required":["DeliveryStreamName","DeliveryStreamARN","DeliveryStreamStatus","DeliveryStreamType","VersionId","Destinations","HasMoreDestinations"],"members":{"DeliveryStreamName":{},"DeliveryStreamARN":{},"DeliveryStreamStatus":{},"FailureDescription":{"shape":"S3w"},"DeliveryStreamEncryptionConfiguration":{"type":"structure","members":{"KeyARN":{},"KeyType":{},"Status":{},"FailureDescription":{"shape":"S3w"}}},"DeliveryStreamType":{},"VersionId":{},"CreateTimestamp":{"type":"timestamp"},"LastUpdateTimestamp":{"type":"timestamp"},"Source":{"type":"structure","members":{"KinesisStreamSourceDescription":{"type":"structure","members":{"KinesisStreamARN":{},"RoleARN":{},"DeliveryStartTimestamp":{"type":"timestamp"}}}}},"Destinations":{"type":"list","member":{"type":"structure","required":["DestinationId"],"members":{"DestinationId":{},"S3DestinationDescription":{"shape":"S47"},"ExtendedS3DestinationDescription":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupDescription":{"shape":"S47"},"DataFormatConversionConfiguration":{"shape":"Sz"},"DynamicPartitioningConfiguration":{"shape":"S1o"}}},"RedshiftDestinationDescription":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","S3DestinationDescription"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"S1t"},"Username":{"shape":"S1x"},"RetryOptions":{"shape":"S1z"},"S3DestinationDescription":{"shape":"S47"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupDescription":{"shape":"S47"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"ElasticsearchDestinationDescription":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S28"},"RetryOptions":{"shape":"S2b"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S47"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"},"VpcConfigurationDescription":{"shape":"S4b"}}},"AmazonopensearchserviceDestinationDescription":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S2n"},"RetryOptions":{"shape":"S2q"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S47"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"},"VpcConfigurationDescription":{"shape":"S4b"}}},"SplunkDestinationDescription":{"type":"structure","members":{"HECEndpoint":{},"HECEndpointType":{},"HECToken":{},"HECAcknowledgmentTimeoutInSeconds":{"type":"integer"},"RetryOptions":{"shape":"S2y"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S47"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"HttpEndpointDestinationDescription":{"type":"structure","members":{"EndpointConfiguration":{"type":"structure","members":{"Url":{"shape":"S33"},"Name":{}}},"BufferingHints":{"shape":"S36"},"CloudWatchLoggingOptions":{"shape":"Sl"},"RequestConfiguration":{"shape":"S39"},"ProcessingConfiguration":{"shape":"Sq"},"RoleARN":{},"RetryOptions":{"shape":"S3f"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S47"}}}}}},"HasMoreDestinations":{"type":"boolean"}}}}}},"ListDeliveryStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"DeliveryStreamType":{},"ExclusiveStartDeliveryStreamName":{}}},"output":{"type":"structure","required":["DeliveryStreamNames","HasMoreDeliveryStreams"],"members":{"DeliveryStreamNames":{"type":"list","member":{}},"HasMoreDeliveryStreams":{"type":"boolean"}}}},"ListTagsForDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"ExclusiveStartTagKey":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Tags","HasMoreTags"],"members":{"Tags":{"type":"list","member":{"shape":"S3j"}},"HasMoreTags":{"type":"boolean"}}}},"PutRecord":{"input":{"type":"structure","required":["DeliveryStreamName","Record"],"members":{"DeliveryStreamName":{},"Record":{"shape":"S4p"}}},"output":{"type":"structure","required":["RecordId"],"members":{"RecordId":{},"Encrypted":{"type":"boolean"}}}},"PutRecordBatch":{"input":{"type":"structure","required":["DeliveryStreamName","Records"],"members":{"DeliveryStreamName":{},"Records":{"type":"list","member":{"shape":"S4p"}}}},"output":{"type":"structure","required":["FailedPutCount","RequestResponses"],"members":{"FailedPutCount":{"type":"integer"},"Encrypted":{"type":"boolean"},"RequestResponses":{"type":"list","member":{"type":"structure","members":{"RecordId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"StartDeliveryStreamEncryption":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"DeliveryStreamEncryptionConfigurationInput":{"shape":"S7"}}},"output":{"type":"structure","members":{}}},"StopDeliveryStreamEncryption":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{}}},"output":{"type":"structure","members":{}}},"TagDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName","Tags"],"members":{"DeliveryStreamName":{},"Tags":{"shape":"S3i"}}},"output":{"type":"structure","members":{}}},"UntagDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName","TagKeys"],"members":{"DeliveryStreamName":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateDestination":{"input":{"type":"structure","required":["DeliveryStreamName","CurrentDeliveryStreamVersionId","DestinationId"],"members":{"DeliveryStreamName":{},"CurrentDeliveryStreamVersionId":{},"DestinationId":{},"S3DestinationUpdate":{"shape":"S5a","deprecated":true},"ExtendedS3DestinationUpdate":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupUpdate":{"shape":"S5a"},"DataFormatConversionConfiguration":{"shape":"Sz"},"DynamicPartitioningConfiguration":{"shape":"S1o"}}},"RedshiftDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"S1t"},"Username":{"shape":"S1x"},"Password":{"shape":"S1y"},"RetryOptions":{"shape":"S1z"},"S3Update":{"shape":"S5a"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupUpdate":{"shape":"S5a"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"ElasticsearchDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S28"},"RetryOptions":{"shape":"S2b"},"S3Update":{"shape":"S5a"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"AmazonopensearchserviceDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S2n"},"RetryOptions":{"shape":"S2q"},"S3Update":{"shape":"S5a"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"SplunkDestinationUpdate":{"type":"structure","members":{"HECEndpoint":{},"HECEndpointType":{},"HECToken":{},"HECAcknowledgmentTimeoutInSeconds":{"type":"integer"},"RetryOptions":{"shape":"S2y"},"S3BackupMode":{},"S3Update":{"shape":"S5a"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"HttpEndpointDestinationUpdate":{"type":"structure","members":{"EndpointConfiguration":{"shape":"S32"},"BufferingHints":{"shape":"S36"},"CloudWatchLoggingOptions":{"shape":"Sl"},"RequestConfiguration":{"shape":"S39"},"ProcessingConfiguration":{"shape":"Sq"},"RoleARN":{},"RetryOptions":{"shape":"S3f"},"S3BackupMode":{},"S3Update":{"shape":"S5a"}}}}},"output":{"type":"structure","members":{}}}},"shapes":{"S7":{"type":"structure","required":["KeyType"],"members":{"KeyARN":{},"KeyType":{}}},"Sa":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"Se":{"type":"structure","members":{"SizeInMBs":{"type":"integer"},"IntervalInSeconds":{"type":"integer"}}},"Si":{"type":"structure","members":{"NoEncryptionConfig":{},"KMSEncryptionConfig":{"type":"structure","required":["AWSKMSKeyARN"],"members":{"AWSKMSKeyARN":{}}}}},"Sl":{"type":"structure","members":{"Enabled":{"type":"boolean"},"LogGroupName":{},"LogStreamName":{}}},"Sq":{"type":"structure","members":{"Enabled":{"type":"boolean"},"Processors":{"type":"list","member":{"type":"structure","required":["Type"],"members":{"Type":{},"Parameters":{"type":"list","member":{"type":"structure","required":["ParameterName","ParameterValue"],"members":{"ParameterName":{},"ParameterValue":{}}}}}}}}},"Sz":{"type":"structure","members":{"SchemaConfiguration":{"type":"structure","members":{"RoleARN":{},"CatalogId":{},"DatabaseName":{},"TableName":{},"Region":{},"VersionId":{}}},"InputFormatConfiguration":{"type":"structure","members":{"Deserializer":{"type":"structure","members":{"OpenXJsonSerDe":{"type":"structure","members":{"ConvertDotsInJsonKeysToUnderscores":{"type":"boolean"},"CaseInsensitive":{"type":"boolean"},"ColumnToJsonKeyMappings":{"type":"map","key":{},"value":{}}}},"HiveJsonSerDe":{"type":"structure","members":{"TimestampFormats":{"type":"list","member":{}}}}}}}},"OutputFormatConfiguration":{"type":"structure","members":{"Serializer":{"type":"structure","members":{"ParquetSerDe":{"type":"structure","members":{"BlockSizeBytes":{"type":"integer"},"PageSizeBytes":{"type":"integer"},"Compression":{},"EnableDictionaryCompression":{"type":"boolean"},"MaxPaddingBytes":{"type":"integer"},"WriterVersion":{}}},"OrcSerDe":{"type":"structure","members":{"StripeSizeBytes":{"type":"integer"},"BlockSizeBytes":{"type":"integer"},"RowIndexStride":{"type":"integer"},"EnablePadding":{"type":"boolean"},"PaddingTolerance":{"type":"double"},"Compression":{},"BloomFilterColumns":{"type":"list","member":{}},"BloomFilterFalsePositiveProbability":{"type":"double"},"DictionaryKeyThreshold":{"type":"double"},"FormatVersion":{}}}}}}},"Enabled":{"type":"boolean"}}},"S1o":{"type":"structure","members":{"RetryOptions":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"Enabled":{"type":"boolean"}}},"S1t":{"type":"structure","required":["DataTableName"],"members":{"DataTableName":{},"DataTableColumns":{},"CopyOptions":{}}},"S1x":{"type":"string","sensitive":true},"S1y":{"type":"string","sensitive":true},"S1z":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S28":{"type":"structure","members":{"IntervalInSeconds":{"type":"integer"},"SizeInMBs":{"type":"integer"}}},"S2b":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S2e":{"type":"structure","required":["SubnetIds","RoleARN","SecurityGroupIds"],"members":{"SubnetIds":{"shape":"S2f"},"RoleARN":{},"SecurityGroupIds":{"shape":"S2g"}}},"S2f":{"type":"list","member":{}},"S2g":{"type":"list","member":{}},"S2n":{"type":"structure","members":{"IntervalInSeconds":{"type":"integer"},"SizeInMBs":{"type":"integer"}}},"S2q":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S2y":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S32":{"type":"structure","required":["Url"],"members":{"Url":{"shape":"S33"},"Name":{},"AccessKey":{"type":"string","sensitive":true}}},"S33":{"type":"string","sensitive":true},"S36":{"type":"structure","members":{"SizeInMBs":{"type":"integer"},"IntervalInSeconds":{"type":"integer"}}},"S39":{"type":"structure","members":{"ContentEncoding":{},"CommonAttributes":{"type":"list","member":{"type":"structure","required":["AttributeName","AttributeValue"],"members":{"AttributeName":{"type":"string","sensitive":true},"AttributeValue":{"type":"string","sensitive":true}}}}}},"S3f":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S3i":{"type":"list","member":{"shape":"S3j"}},"S3j":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}},"S3w":{"type":"structure","required":["Type","Details"],"members":{"Type":{},"Details":{}}},"S47":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"S4b":{"type":"structure","required":["SubnetIds","RoleARN","SecurityGroupIds","VpcId"],"members":{"SubnetIds":{"shape":"S2f"},"RoleARN":{},"SecurityGroupIds":{"shape":"S2g"},"VpcId":{}}},"S4p":{"type":"structure","required":["Data"],"members":{"Data":{"type":"blob"}}},"S5a":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"}}}}}')},"./node_modules/aws-sdk/apis/firehose-2015-08-04.paginators.json":module=>{"use strict";module.exports={X:{}}},"./node_modules/aws-sdk/apis/sts-2011-06-15.min.json":module=>{"use strict";module.exports=JSON.parse('{"version":"2.0","metadata":{"apiVersion":"2011-06-15","endpointPrefix":"sts","globalEndpoint":"sts.amazonaws.com","protocol":"query","serviceAbbreviation":"AWS STS","serviceFullName":"AWS Security Token Service","serviceId":"STS","signatureVersion":"v4","uid":"sts-2011-06-15","xmlNamespace":"https://sts.amazonaws.com/doc/2011-06-15/"},"operations":{"AssumeRole":{"input":{"type":"structure","required":["RoleArn","RoleSessionName"],"members":{"RoleArn":{},"RoleSessionName":{},"PolicyArns":{"shape":"S4"},"Policy":{},"DurationSeconds":{"type":"integer"},"Tags":{"shape":"S8"},"TransitiveTagKeys":{"type":"list","member":{}},"ExternalId":{},"SerialNumber":{},"TokenCode":{},"SourceIdentity":{}}},"output":{"resultWrapper":"AssumeRoleResult","type":"structure","members":{"Credentials":{"shape":"Si"},"AssumedRoleUser":{"shape":"Sn"},"PackedPolicySize":{"type":"integer"},"SourceIdentity":{}}}},"AssumeRoleWithSAML":{"input":{"type":"structure","required":["RoleArn","PrincipalArn","SAMLAssertion"],"members":{"RoleArn":{},"PrincipalArn":{},"SAMLAssertion":{},"PolicyArns":{"shape":"S4"},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithSAMLResult","type":"structure","members":{"Credentials":{"shape":"Si"},"AssumedRoleUser":{"shape":"Sn"},"PackedPolicySize":{"type":"integer"},"Subject":{},"SubjectType":{},"Issuer":{},"Audience":{},"NameQualifier":{},"SourceIdentity":{}}}},"AssumeRoleWithWebIdentity":{"input":{"type":"structure","required":["RoleArn","RoleSessionName","WebIdentityToken"],"members":{"RoleArn":{},"RoleSessionName":{},"WebIdentityToken":{},"ProviderId":{},"PolicyArns":{"shape":"S4"},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithWebIdentityResult","type":"structure","members":{"Credentials":{"shape":"Si"},"SubjectFromWebIdentityToken":{},"AssumedRoleUser":{"shape":"Sn"},"PackedPolicySize":{"type":"integer"},"Provider":{},"Audience":{},"SourceIdentity":{}}}},"DecodeAuthorizationMessage":{"input":{"type":"structure","required":["EncodedMessage"],"members":{"EncodedMessage":{}}},"output":{"resultWrapper":"DecodeAuthorizationMessageResult","type":"structure","members":{"DecodedMessage":{}}}},"GetAccessKeyInfo":{"input":{"type":"structure","required":["AccessKeyId"],"members":{"AccessKeyId":{}}},"output":{"resultWrapper":"GetAccessKeyInfoResult","type":"structure","members":{"Account":{}}}},"GetCallerIdentity":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"GetCallerIdentityResult","type":"structure","members":{"UserId":{},"Account":{},"Arn":{}}}},"GetFederationToken":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Policy":{},"PolicyArns":{"shape":"S4"},"DurationSeconds":{"type":"integer"},"Tags":{"shape":"S8"}}},"output":{"resultWrapper":"GetFederationTokenResult","type":"structure","members":{"Credentials":{"shape":"Si"},"FederatedUser":{"type":"structure","required":["FederatedUserId","Arn"],"members":{"FederatedUserId":{},"Arn":{}}},"PackedPolicySize":{"type":"integer"}}}},"GetSessionToken":{"input":{"type":"structure","members":{"DurationSeconds":{"type":"integer"},"SerialNumber":{},"TokenCode":{}}},"output":{"resultWrapper":"GetSessionTokenResult","type":"structure","members":{"Credentials":{"shape":"Si"}}}}},"shapes":{"S4":{"type":"list","member":{"type":"structure","members":{"arn":{}}}},"S8":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Si":{"type":"structure","required":["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],"members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}},"Sn":{"type":"structure","required":["AssumedRoleId","Arn"],"members":{"AssumedRoleId":{},"Arn":{}}}}}')},"./node_modules/aws-sdk/apis/sts-2011-06-15.paginators.json":module=>{"use strict";module.exports={X:{}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,