"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5679],{"./src/redux/unitSelectionRedux.js":(__unused_webpack_module,exports)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}Object.defineProperty(exports,"__esModule",{value:!0}),exports.asyncLoadCoursesWithProgress=exports.START_LOADING_COURSES=exports.SET_SCRIPT=exports.SET_COURSES=exports.FINISHED_LOADING_COURSES=void 0,exports.default=function unitSelection(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_COURSES){var firstCourse=action.coursesWithProgress[0],firstUnit=firstCourse?firstCourse.units[0]:null;return _objectSpread(_objectSpread({},state),{},{coursesWithProgress:action.coursesWithProgress,scriptId:null===state.scriptId?null==firstUnit?void 0:firstUnit.id:state.scriptId})}if(action.type===SET_SCRIPT)return _objectSpread(_objectSpread({},state),{},{scriptId:action.scriptId});if(action.type===START_LOADING_COURSES)return _objectSpread(_objectSpread({},state),{},{isLoadingCoursesWithProgress:!0});if(action.type===FINISHED_LOADING_COURSES)return _objectSpread(_objectSpread({},state),{},{isLoadingCoursesWithProgress:!1});return state},exports.startLoadingCoursesWithProgress=exports.setScriptId=exports.setCoursesWithProgress=exports.getSelectedScriptName=exports.getSelectedScriptFriendlyName=exports.getSelectedScriptDescription=exports.finishedLoadingCoursesWithProgress=exports.doesCurrentCourseUseFeedback=void 0;var SET_SCRIPT=exports.SET_SCRIPT="unitSelection/SET_SCRIPT",SET_COURSES=exports.SET_COURSES="unitSelection/SET_COURSES",START_LOADING_COURSES=exports.START_LOADING_COURSES="unitSelection/START_LOADING_COURSES",FINISHED_LOADING_COURSES=exports.FINISHED_LOADING_COURSES="unitSelection/FINISHED_LOADING_COURSES",setCoursesWithProgress=(exports.setScriptId=function setScriptId(scriptId){return{type:SET_SCRIPT,scriptId}},exports.setCoursesWithProgress=function setCoursesWithProgress(coursesWithProgress){return{type:SET_COURSES,coursesWithProgress}}),startLoadingCoursesWithProgress=exports.startLoadingCoursesWithProgress=function startLoadingCoursesWithProgress(){return{type:START_LOADING_COURSES}},finishedLoadingCoursesWithProgress=exports.finishedLoadingCoursesWithProgress=function finishedLoadingCoursesWithProgress(){return{type:FINISHED_LOADING_COURSES}},getSelectedUnit=function getSelectedUnit(state){var unit,scriptId=state.unitSelection.scriptId;return scriptId?(state.unitSelection.coursesWithProgress.forEach((function(course){var tempUnit=course.units.find((function(unit){return scriptId===unit.id}));tempUnit&&(unit=tempUnit)})),unit):null},initialState=(exports.getSelectedScriptName=function getSelectedScriptName(state){return getSelectedUnit(state)?getSelectedUnit(state).key:null},exports.getSelectedScriptFriendlyName=function getSelectedScriptFriendlyName(state){return getSelectedUnit(state)?getSelectedUnit(state).name:null},exports.getSelectedScriptDescription=function getSelectedScriptDescription(state){return getSelectedUnit(state)?getSelectedUnit(state).description:null},exports.doesCurrentCourseUseFeedback=function doesCurrentCourseUseFeedback(state){var _getSelectedUnit;return!(null===(_getSelectedUnit=getSelectedUnit(state))||void 0===_getSelectedUnit||!_getSelectedUnit.is_feedback_enabled)},exports.asyncLoadCoursesWithProgress=function asyncLoadCoursesWithProgress(){return function(dispatch,getState){var state=getState(),selectedSection=state.teacherSections.sections[state.teacherSections.selectedSectionId];!state.unitSelection.isLoadingCoursesWithProgress&&selectedSection&&(dispatch(startLoadingCoursesWithProgress()),fetch("/dashboardapi/section_courses/".concat(selectedSection.id),{method:"GET",headers:{"Content-Type":"application/json; charset=utf-8"}}).then((function(response){if(!response.ok)throw new Error("Error(".concat(response.status,": ").concat(response.statusText,")"));return response.json()})).then((function(coursesWithProgress){var reorderedCourses=[].concat(_toConsumableArray(coursesWithProgress.filter((function(course){return course.id!==selectedSection.course_version_id}))),_toConsumableArray(coursesWithProgress.filter((function(course){return course.id===selectedSection.course_version_id})))).reverse();dispatch(setCoursesWithProgress(reorderedCourses)),dispatch(finishedLoadingCoursesWithProgress())})).catch((function(err){console.error(err.message),dispatch(finishedLoadingCoursesWithProgress())})))}},{scriptId:null,coursesWithProgress:[],isLoadingCoursesWithProgress:!1})},"./src/templates/sectionAssessments/sectionAssessmentsRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.currentStudentHasResponses=exports.countSubmissionsForCurrentAssessment=exports.asyncLoadAssessments=exports.QuestionType=exports.ASSESSMENT_FEEDBACK_OPTION_ID=exports.ALL_STUDENT_FILTER=void 0,exports.default=function sectionAssessments(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===_unitSelectionRedux.SET_SCRIPT)return _objectSpread(_objectSpread({},state),{},{studentId:ALL_STUDENT_FILTER,questionIndex:0});if(action.type===SET_ASSESSMENT_ID)return _objectSpread(_objectSpread({},state),{},{assessmentId:action.assessmentId,questionIndex:0,studentId:ALL_STUDENT_FILTER});if(action.type===SET_INITIAL_ASSESSMENT_ID){var assessmentId=getFirstAssessmentId(state,action.scriptId);return _objectSpread(_objectSpread({},state),{},{assessmentId})}if(action.type===SET_STUDENT_ID)return _objectSpread(_objectSpread({},state),{},{studentId:action.studentId});if(action.type===SET_QUESTION_INDEX)return _objectSpread(_objectSpread({},state),{},{questionIndex:action.questionIndex});if(action.type===SET_ASSESSMENT_RESPONSES)return _objectSpread(_objectSpread({},state),{},{assessmentResponsesByScript:_objectSpread(_objectSpread({},state.assessmentResponsesByScript),{},_defineProperty({},action.scriptId,action.assessments))});if(action.type===SET_FEEDBACK)return _objectSpread(_objectSpread({},state),{},{feedbackByScript:_objectSpread(_objectSpread({},state.feedbackByScript),{},_defineProperty({},action.scriptId,action.feedback))});if(action.type===SET_SURVEYS)return _objectSpread(_objectSpread({},state),{},{surveysByScript:_objectSpread(_objectSpread({},state.surveysByScript),{},_defineProperty({},action.scriptId,action.surveys))});if(action.type===SET_ASSESSMENTS_QUESTIONS)return _objectSpread(_objectSpread({},state),{},{assessmentQuestionsByScript:_objectSpread(_objectSpread({},state.assessmentQuestionsByScript),{},_defineProperty({},action.scriptId,action.assessments)),assessmentId:parseInt(Object.keys(action.assessments)[0])});if(action.type===START_LOADING_ASSESSMENTS)return _objectSpread(_objectSpread({},state),{},{isLoading:!0});if(action.type===FINISH_LOADING_ASSESSMENTS)return _objectSpread(_objectSpread({},state),{},{isLoading:!1});return state},exports.getAssessmentsFreeResponseResults=exports.getAssessmentResponsesForCurrentScript=exports.finishLoadingAssessments=void 0,exports.getCorrectAnswer=getCorrectAnswer,exports.inProgressFakeTimestamp=exports.getSurveyFreeResponseQuestions=exports.getStudentsMCandMatchSummaryForCurrentAssessment=exports.getStudentMatchResponsesForCurrentAssessment=exports.getStudentMCResponsesForCurrentAssessment=exports.getStudentAnswersForCurrentQuestion=exports.getMultipleChoiceSurveyResults=exports.getMultipleChoiceStructureForCurrentAssessment=exports.getMultipleChoiceSectionSummary=exports.getMatchStructureForCurrentAssessment=exports.getMatchSectionSummary=exports.getExportableSurveyData=exports.getExportableSubmissionStatusData=exports.getExportableFeedbackData=exports.getExportableData=exports.getExportableAssessmentData=exports.getCurrentScriptAssessmentList=exports.getCurrentQuestion=exports.getCurrentAssessmentQuestions=void 0,exports.indexesToAnswerString=indexesToAnswerString,exports.startLoadingAssessments=exports.setSurveys=exports.setStudentId=exports.setQuestionIndex=exports.setInitialAssessmentId=exports.setFeedback=exports.setAssessmentResponses=exports.setAssessmentQuestions=exports.setAssessmentId=exports.notStartedFakeTimestamp=exports.isCurrentScriptCSD=exports.isCurrentAssessmentSurvey=void 0;var _unitSelectionRedux=__webpack_require__("./src/redux/unitSelectionRedux.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ALL_STUDENT_FILTER=exports.ALL_STUDENT_FILTER=0,initialState={assessmentResponsesByScript:{},assessmentQuestionsByScript:{},feedbackByScript:{},surveysByScript:{},isLoading:!1,assessmentId:0,questionIndex:0,studentId:ALL_STUDENT_FILTER},QuestionType=exports.QuestionType={MULTI:"Multi",MATCH:"Match",FREE_RESPONSE:"FreeResponse"},SurveyQuestionType_MULTI="multi",SurveyQuestionType_FREE_RESPONSE="free_response",MultiAnswerStatus_CORRECT="correct",ANSWER_LETTERS=["A","B","C","D","E","F","G","H","I","J","K"],ASSESSMENT_FEEDBACK_OPTION_ID=exports.ASSESSMENT_FEEDBACK_OPTION_ID=0,inProgressFakeTimestamp=exports.inProgressFakeTimestamp=new Date("1990-01-01T20:52:05.000+00:00"),notStartedFakeTimestamp=exports.notStartedFakeTimestamp=new Date("1980-01-01T20:52:05.000+00:00"),SET_ASSESSMENT_RESPONSES="sectionAssessments/SET_ASSESSMENT_RESPONSES",SET_ASSESSMENTS_QUESTIONS="sectionAssessments/SET_ASSESSMENTS_QUESTIONS",SET_FEEDBACK="sectionAssessments/SET_FEEDBACK",SET_SURVEYS="sectionAssessments/SET_SURVEYS",START_LOADING_ASSESSMENTS="sectionAssessments/START_LOADING_ASSESSMENTS",FINISH_LOADING_ASSESSMENTS="sectionAssessments/FINISH_LOADING_ASSESSMENTS",SET_ASSESSMENT_ID="sectionAssessments/SET_ASSESSMENT_ID",SET_INITIAL_ASSESSMENT_ID="sectionAssessments/SET_INITIAL_ASSESSMENT_ID",SET_STUDENT_ID="sectionAssessments/SET_STUDENT_ID",SET_QUESTION_INDEX="sectionAssessments/SET_QUESTION_INDEX",setAssessmentResponses=exports.setAssessmentResponses=function setAssessmentResponses(scriptId,assessments){return{type:SET_ASSESSMENT_RESPONSES,scriptId,assessments}},setAssessmentQuestions=exports.setAssessmentQuestions=function setAssessmentQuestions(scriptId,assessments){return{type:SET_ASSESSMENTS_QUESTIONS,scriptId,assessments}},setFeedback=exports.setFeedback=function setFeedback(scriptId,feedback){return{type:SET_FEEDBACK,scriptId,feedback}},startLoadingAssessments=exports.startLoadingAssessments=function startLoadingAssessments(){return{type:START_LOADING_ASSESSMENTS}},finishLoadingAssessments=exports.finishLoadingAssessments=function finishLoadingAssessments(){return{type:FINISH_LOADING_ASSESSMENTS}},setInitialAssessmentId=(exports.setAssessmentId=function setAssessmentId(assessmentId){return{type:SET_ASSESSMENT_ID,assessmentId}},exports.setInitialAssessmentId=function setInitialAssessmentId(scriptId){return{type:SET_INITIAL_ASSESSMENT_ID,scriptId}}),setSurveys=(exports.setQuestionIndex=function setQuestionIndex(questionIndex){return{type:SET_QUESTION_INDEX,questionIndex}},exports.setStudentId=function setStudentId(studentId){return{type:SET_STUDENT_ID,studentId}},exports.setSurveys=function setSurveys(scriptId,surveys){return{type:SET_SURVEYS,scriptId,surveys}});exports.asyncLoadAssessments=function asyncLoadAssessments(sectionId,scriptId){return function(dispatch,getState){if(!getState().sectionAssessments.assessmentResponsesByScript[scriptId]&&scriptId&&sectionId){dispatch(startLoadingAssessments());var loadResponses=loadAssessmentResponsesFromServer(sectionId,scriptId),loadQuestions=loadAssessmentQuestionsFromServer(scriptId),loadSurveys=loadSurveysFromServer(sectionId,scriptId),loadFeedback=loadFeedbackFromServer(sectionId,scriptId);Promise.all([loadResponses,loadQuestions,loadSurveys,loadFeedback]).then((function(arrayOfValues){dispatch(setAssessmentResponses(scriptId,arrayOfValues[0])),dispatch(setAssessmentQuestions(scriptId,arrayOfValues[1])),dispatch(setFeedback(scriptId,arrayOfValues[3])),dispatch(setSurveys(scriptId,arrayOfValues[2])),dispatch(setInitialAssessmentId(scriptId)),dispatch(finishLoadingAssessments())})).catch((function(error){dispatch(finishLoadingAssessments())}))}}};exports.getCurrentScriptAssessmentList=function getCurrentScriptAssessmentList(state){var tempAssessmentList=computeScriptAssessmentList(state.sectionAssessments,state.unitSelection.scriptId);return(0,_unitSelectionRedux.doesCurrentCourseUseFeedback)(state)&&(tempAssessmentList=tempAssessmentList.concat({id:ASSESSMENT_FEEDBACK_OPTION_ID,name:"All teacher feedback in this unit"})),tempAssessmentList};var getAssessmentResponsesForCurrentScript=exports.getAssessmentResponsesForCurrentScript=function getAssessmentResponsesForCurrentScript(state){return state.sectionAssessments.assessmentResponsesByScript[state.unitSelection.scriptId]||{}},getCurrentAssessmentQuestions=exports.getCurrentAssessmentQuestions=function getCurrentAssessmentQuestions(state){return(state.sectionAssessments.assessmentQuestionsByScript[state.unitSelection.scriptId]||{})[state.sectionAssessments.assessmentId]},isCurrentAssessmentSurvey=(exports.getCurrentQuestion=function getCurrentQuestion(state){var emptyQuestion={question:"",answers:[]};if(isCurrentAssessmentSurvey(state)){var question=(state.sectionAssessments.surveysByScript[state.unitSelection.scriptId]||{})[state.sectionAssessments.assessmentId].levelgroup_results[state.sectionAssessments.questionIndex];return question?{question:question.question,answers:question.type===SurveyQuestionType_MULTI&&question.answer_texts.map((function(answer,index){return{text:answer,correct:!1,letter:ANSWER_LETTERS[index]}}))}:emptyQuestion}var assessmentQuestions=(getCurrentAssessmentQuestions(state)||{}).questions,_question=assessmentQuestions?assessmentQuestions[state.sectionAssessments.questionIndex]:null;if(!_question)return emptyQuestion;if(_question.type===QuestionType.MULTI){var answers=_question.type===QuestionType.MULTI&&(_question.answers||[]).map((function(answer,index){return _objectSpread(_objectSpread({},answer),{},{letter:ANSWER_LETTERS[index]})}));return{question:_question.question_text,answers,questionType:QuestionType.MULTI}}if(_question.type===QuestionType.FREE_RESPONSE)return{question:_question.question_text,answers:null,questionType:QuestionType.FREE_RESPONSE};if(_question.type===QuestionType.MATCH){var _answers=_question.answers.map((function(answer){return answer.text})),options=_question.options.map((function(option){return option.text}));return{question:_question.question,answers:_answers,options,questionType:QuestionType.MATCH}}},exports.getMultipleChoiceStructureForCurrentAssessment=function getMultipleChoiceStructureForCurrentAssessment(state){var assessmentsStructure=getCurrentAssessmentQuestions(state);return assessmentsStructure?assessmentsStructure.questions.filter((function(question){return question.type===QuestionType.MULTI})).map((function(question){return{id:question.level_id,question:question.question_text,questionNumber:question.question_index+1,correctAnswer:getCorrectAnswer(question.answers)}})):[]},exports.getStudentMCResponsesForCurrentAssessment=function getStudentMCResponsesForCurrentAssessment(state){var studentResponses=getAssessmentResponsesForCurrentScript(state);if(!studentResponses)return{};var studentId=state.sectionAssessments.studentId,studentObject=studentResponses[studentId];if(!studentObject)return{};var currentAssessmentId=state.sectionAssessments.assessmentId,studentAssessment=studentObject.responses_by_assessment[currentAssessmentId];return studentAssessment?{id:studentId,name:studentObject.student_name,studentResponses:studentAssessment.level_results.filter((function(answer){return answer.type===QuestionType.MULTI})).map((function(answer){return{responses:indexesToAnswerString(answer.student_result),isCorrect:answer.status===MultiAnswerStatus_CORRECT}}))}:{}},exports.getMatchStructureForCurrentAssessment=function getMatchStructureForCurrentAssessment(state){var assessmentsStructure=getCurrentAssessmentQuestions(state);return assessmentsStructure?assessmentsStructure.questions.filter((function(question){return question.type===QuestionType.MATCH})).map((function(question){return{id:question.level_id,question:question.question,questionNumber:question.question_index+1,answers:question.answers,options:question.options}})):[]},exports.getStudentMatchResponsesForCurrentAssessment=function getStudentMatchResponsesForCurrentAssessment(state){var studentResponses=getAssessmentResponsesForCurrentScript(state);if(!studentResponses)return{};var studentId=state.sectionAssessments.studentId,studentObject=studentResponses[studentId];if(!studentObject)return{};var currentAssessmentId=state.sectionAssessments.assessmentId,studentAssessment=studentObject.responses_by_assessment[currentAssessmentId];return studentAssessment?{id:studentId,name:studentObject.student_name,studentResponses:studentAssessment.level_results.filter((function(answer){return answer.type===QuestionType.MATCH})).map((function(answer){return{responses:answer.student_result}}))}:{}},exports.getStudentAnswersForCurrentQuestion=function getStudentAnswersForCurrentQuestion(state){var studentResponses=getAssessmentResponsesForCurrentScript(state);if(!studentResponses||isCurrentAssessmentSurvey(state))return[];var questionIndex=state.sectionAssessments.questionIndex,studentAnswers=[];return Object.keys(studentResponses).forEach((function(studentId){studentId=parseInt(studentId,10);var studentObject=studentResponses[studentId],currentAssessmentId=state.sectionAssessments.assessmentId,question=((studentObject.responses_by_assessment[currentAssessmentId]||{}).level_results||[])[questionIndex];question&&question.type===QuestionType.MULTI&&studentAnswers.push({id:studentId,name:studentObject.student_name,answer:question.student_result?indexesToAnswerString(question.student_result):"-",correct:"correct"===question.status})})),studentAnswers},exports.getAssessmentsFreeResponseResults=function getAssessmentsFreeResponseResults(state){var assessmentsStructure=getCurrentAssessmentQuestions(state);if(!assessmentsStructure)return[];var questionsAndResults=assessmentsStructure.questions.filter((function(question){return question.type===QuestionType.FREE_RESPONSE})).map((function(question){return{questionText:question.question_text,questionNumber:question.question_index+1,responses:[]}})),studentResponses=getAssessmentResponsesForCurrentScript(state),currentStudentsIds=Object.keys(studentResponses);if(state.sectionAssessments.studentId!==ALL_STUDENT_FILTER){if(!currentStudentHasResponses(state))return[];currentStudentsIds=[state.sectionAssessments.studentId]}return currentStudentsIds.forEach((function(studentId){studentId=parseInt(studentId,10);var studentObject=studentResponses[studentId],currentAssessmentId=state.sectionAssessments.assessmentId;((studentObject.responses_by_assessment[currentAssessmentId]||{}).level_results||[]).filter((function(result){return result.type===QuestionType.FREE_RESPONSE})).forEach((function(response,index){questionsAndResults[index]&&questionsAndResults[index].responses.push({id:studentId,name:studentObject.student_name,response:response.student_result})}))})),questionsAndResults},exports.getSurveyFreeResponseQuestions=function getSurveyFreeResponseQuestions(state){var currentSurvey=(state.sectionAssessments.surveysByScript[state.unitSelection.scriptId]||{})[state.sectionAssessments.assessmentId];return currentSurvey?currentSurvey.levelgroup_results.filter((function(question){return question.type===SurveyQuestionType_FREE_RESPONSE})).map((function(question){return{questionText:question.question,questionNumber:question.question_index+1,answers:question.results.map((function(response,index){return{index,response:response.result}}))}})):[]},exports.getMultipleChoiceSurveyResults=function getMultipleChoiceSurveyResults(state){var currentSurvey=(state.sectionAssessments.surveysByScript[state.unitSelection.scriptId]||{})[state.sectionAssessments.assessmentId];return currentSurvey?currentSurvey.levelgroup_results.filter((function(question){return question.type===SurveyQuestionType_MULTI})).map((function(question,index){for(var totalAnswered=question.results.length,answerTotals=[],i=0;i<question.answer_texts.length;i++)answerTotals[i]=0;for(var notAnswered=0,_i=0;_i<totalAnswered;_i++){var answerIndex=question.results[_i].answer_index;answerIndex>=0?answerTotals[answerIndex]++:notAnswered++}return{id:index,question:question.question,questionNumber:question.question_index+1,answers:question.answer_texts.map((function(answer,index){return{multipleChoiceOption:ANSWER_LETTERS[index],percentAnswered:Math.floor(answerTotals[index]/totalAnswered*100),text:answer}})),notAnswered:Math.floor(notAnswered/totalAnswered*100),totalAnswered}})):[]},exports.isCurrentAssessmentSurvey=function isCurrentAssessmentSurvey(state){var scriptId=state.unitSelection.scriptId,surveysStructure=state.sectionAssessments.surveysByScript[scriptId]||{},currentAssessmentId=state.sectionAssessments.assessmentId;return Object.keys(surveysStructure).includes(currentAssessmentId+"")}),getStudentsMCandMatchSummaryForCurrentAssessment=exports.getStudentsMCandMatchSummaryForCurrentAssessment=function getStudentsMCandMatchSummaryForCurrentAssessment(state){var studentResponses=getAssessmentResponsesForCurrentScript(state);if(!studentResponses)return[];var allStudentsByIds={};state.teacherSections.selectedStudents.forEach((function(student){allStudentsByIds[student.id]={student_name:student.name,responses_by_assessment:{}}})),allStudentsByIds=_objectSpread(_objectSpread({},allStudentsByIds),studentResponses);var currentStudentsIds=Object.keys(allStudentsByIds);return state.sectionAssessments.studentId!==ALL_STUDENT_FILTER&&(currentStudentsIds=[state.sectionAssessments.studentId]),currentStudentsIds.map((function(studentId){studentId=parseInt(studentId,10);var studentsObject=allStudentsByIds[studentId],currentAssessmentId=state.sectionAssessments.assessmentId,studentsAssessment=studentsObject.responses_by_assessment[currentAssessmentId];if(!studentsAssessment)return{id:studentId,name:studentsObject.student_name,isSubmitted:!1,inProgress:!1,submissionTimeStamp:notStartedFakeTimestamp};var inProgress=studentsAssessment.timestamp&&!studentsAssessment.submitted,submissionTimeStamp=inProgress?inProgressFakeTimestamp:new Date(studentsAssessment.timestamp);return{id:studentId,name:studentsObject.student_name,numMultipleChoiceCorrect:studentsAssessment.multi_correct,numMultipleChoice:studentsAssessment.multi_count,numMatchCorrect:studentsAssessment.match_correct,numMatch:studentsAssessment.match_count,inProgress,isSubmitted:studentsAssessment.submitted,submissionTimeStamp,url:studentsAssessment.url}}))},getExportableSurveyData=(exports.getExportableSubmissionStatusData=function getExportableSubmissionStatusData(state){var summaryStudentStatus=[];return getStudentsMCandMatchSummaryForCurrentAssessment(state).forEach((function(student){summaryStudentStatus.push({studentName:student.name,numMultipleChoiceCorrect:student.numMultipleChoiceCorrect,numMultipleChoice:student.numMultipleChoice,numMatchCorrect:student.numMatchCorrect,numMatch:student.numMatch,submissionTimestamp:student.submissionTimeStamp})})),summaryStudentStatus},exports.getMultipleChoiceSectionSummary=function getMultipleChoiceSectionSummary(state){var assessmentsStructure=getCurrentAssessmentQuestions(state);if(!assessmentsStructure)return[];var results=assessmentsStructure.questions.filter((function(question){return question.type===QuestionType.MULTI})).map((function(question){return{id:question.level_id,question:question.question_text,questionNumber:question.question_index+1,answers:question.answers.map((function(answer,index){return{multipleChoiceOption:ANSWER_LETTERS[index],isCorrect:answer.correct,numAnswered:0}})),totalAnswered:0,notAnswered:0}})),studentResponses=getAssessmentResponsesForCurrentScript(state);return studentResponses?(Object.keys(studentResponses).forEach((function(studentId){studentId=parseInt(studentId,10);var studentObject=studentResponses[studentId],currentAssessmentId=state.sectionAssessments.assessmentId;((studentObject.responses_by_assessment[currentAssessmentId]||{}).level_results||[]).filter((function(result){return result.type===QuestionType.MULTI})).forEach((function(response,questionIndex){results[questionIndex].totalAnswered++,"unsubmitted"===response.status?results[questionIndex].notAnswered++:(response.student_result||[]).forEach((function(answer){results[questionIndex].answers[answer].numAnswered++}))}))})),results):[]},exports.getMatchSectionSummary=function getMatchSectionSummary(state){var assessmentsStructure=getCurrentAssessmentQuestions(state);if(!assessmentsStructure)return[];var results=assessmentsStructure.questions.filter((function(question){return question.type===QuestionType.MATCH})).map((function(question){return{id:question.level_id,question:question.question,questionNumber:question.question_index+1,options:question.options.map((function(option,indexO){return{option:question.options[indexO].text,id:indexO,totalAnswered:0,notAnswered:0,answers:question.answers.map((function(answer,indexA){return{answer:question.answers[indexA].text,isCorrect:indexA===indexO,numAnswered:0}}))}}))}})),studentResponses=getAssessmentResponsesForCurrentScript(state);return studentResponses?(Object.keys(studentResponses).forEach((function(studentId){studentId=parseInt(studentId,10);var studentObject=studentResponses[studentId],currentAssessmentId=state.sectionAssessments.assessmentId;((studentObject.responses_by_assessment[currentAssessmentId]||{}).level_results||[]).filter((function(result){return result.type===QuestionType.MATCH})).forEach((function(response,questionIndex){(response.student_result||[]).forEach((function(answer,index){results[questionIndex].options[index].totalAnswered++,"unsubmitted"===response.status[index]?results[questionIndex].options[index].notAnswered++:results[questionIndex].options[index].answers[answer].numAnswered++}))}))})),results):[]},exports.countSubmissionsForCurrentAssessment=function countSubmissionsForCurrentAssessment(state){var currentAssessmentId=state.sectionAssessments.assessmentId;if(!currentAssessmentId)return 0;if(isCurrentAssessmentSurvey(state)){var currentSurvey=(state.sectionAssessments.surveysByScript[state.unitSelection.scriptId]||{})[currentAssessmentId];return currentSurvey&&0!==currentSurvey.levelgroup_results.length?currentSurvey.levelgroup_results[0].results.length:0}var studentResponses=getAssessmentResponsesForCurrentScript(state),totalSubmissions=0;return Object.values(studentResponses).forEach((function(student){Object.keys(student.responses_by_assessment).includes(currentAssessmentId+"")&&totalSubmissions++})),totalSubmissions},exports.getExportableData=function getExportableData(state){return isCurrentAssessmentSurvey(state)?getExportableSurveyData(state):getExportableAssessmentData(state)},exports.getExportableSurveyData=function getExportableSurveyData(state){for(var currentAssessmentId=state.sectionAssessments.assessmentId,currentSurvey=(state.sectionAssessments.surveysByScript[state.unitSelection.scriptId]||{})[currentAssessmentId],responses=[],i=0;i<currentSurvey.levelgroup_results.length;i++){var questionResults=currentSurvey.levelgroup_results[i],rowBase={lesson:currentSurvey.lesson_name,questionNumber:questionResults.question_index+1,questionText:questionResults.question};if(questionResults.type===SurveyQuestionType_MULTI)for(var _loop=function _loop(answerIndex){responses.push(_objectSpread(_objectSpread({},rowBase),{},{answer:questionResults.answer_texts[answerIndex],numberAnswered:questionResults.results.filter((function(result){return result.answer_index===answerIndex})).length}))},answerIndex=0;answerIndex<questionResults.answer_texts.length;answerIndex++)_loop(answerIndex);else if(questionResults.type===SurveyQuestionType_FREE_RESPONSE)for(var j=0;j<questionResults.results.length;j++)responses.push(_objectSpread(_objectSpread({},rowBase),{},{answer:questionResults.results[j].result,numberAnswered:1}))}return responses}),getExportableAssessmentData=exports.getExportableAssessmentData=function getExportableAssessmentData(state){var responses=[],currentAssessmentId=state.sectionAssessments.assessmentId,studentResponses=getAssessmentResponsesForCurrentScript(state);return Object.keys(studentResponses).forEach((function(studentId){studentId=parseInt(studentId,10);var studentObject=studentResponses[studentId],studentAssessment=studentObject.responses_by_assessment[currentAssessmentId];if(studentAssessment&&studentAssessment.level_results)for(var questionIndex=0;questionIndex<studentAssessment.level_results.length;questionIndex++){var response=studentAssessment.level_results[questionIndex];responses.push({studentName:studentObject.student_name,lesson:studentAssessment.lesson,timestamp:studentAssessment.timestamp,question:questionIndex+1,response:response.type===QuestionType.MULTI?indexesToAnswerString(response.student_result):response.student_result,correct:response.status})}})),responses},currentStudentHasResponses=(exports.getExportableFeedbackData=function getExportableFeedbackData(state){var feedback=[],feedbackForCurrentScript=state.sectionAssessments.feedbackByScript[state.unitSelection.scriptId]||{};return Object.keys(feedbackForCurrentScript).forEach((function(feedbackId){feedbackId=parseInt(feedbackId,10),feedback.push(feedbackForCurrentScript[feedbackId])})),feedback},exports.isCurrentScriptCSD=function isCurrentScriptCSD(state){return((0,_unitSelectionRedux.getSelectedScriptName)(state)||"").includes("csd")},exports.currentStudentHasResponses=function currentStudentHasResponses(state){return!!Object.prototype.hasOwnProperty.call(getAssessmentResponsesForCurrentScript(state),state.sectionAssessments.studentId)});function getCorrectAnswer(answerArr){return indexesToAnswerString(answerArr.map((function(_ref,i){return _ref.correct?i:null})).filter((function(i){return null!==i})))}function indexesToAnswerString(answerArr){return answerArr?answerArr.map((function(index){return ANSWER_LETTERS[index]})).join(", "):""}var getFirstAssessmentId=function getFirstAssessmentId(state,scriptId){return computeScriptAssessmentList(state,scriptId).map((function(a){return parseInt(a.id)}))[0]},computeScriptAssessmentList=function computeScriptAssessmentList(state,scriptId){var assessmentStructure=state.assessmentQuestionsByScript[scriptId]||{},assessments=Object.values(assessmentStructure).map((function(assessment){return{id:assessment.id,name:assessment.name}})),surveysStructure=state.surveysByScript[scriptId]||{},surveys=Object.keys(surveysStructure).map((function(surveyId){return{id:parseInt(surveyId),name:surveysStructure[surveyId].lesson_name}}));return assessments.concat(surveys)},loadAssessmentResponsesFromServer=function loadAssessmentResponsesFromServer(sectionId,scriptId){var payload={section_id:sectionId};return scriptId&&(payload.script_id=scriptId),$.ajax({url:"/dashboardapi/assessments/section_responses",method:"GET",contentType:"application/json;charset=UTF-8",data:payload})},loadAssessmentQuestionsFromServer=function loadAssessmentQuestionsFromServer(scriptId){var payload={script_id:scriptId};return $.ajax({url:"/dashboardapi/assessments",method:"GET",contentType:"application/json;charset=UTF-8",data:payload})},loadSurveysFromServer=function loadSurveysFromServer(sectionId,scriptId){var payload={script_id:scriptId,section_id:sectionId};return $.ajax({url:"/dashboardapi/assessments/section_surveys",method:"GET",contentType:"application/json;charset=UTF-8",data:payload})},loadFeedbackFromServer=function loadFeedbackFromServer(sectionId,scriptId){var payload={script_id:scriptId,section_id:sectionId};return $.ajax({url:"/dashboardapi/assessments/section_feedback",method:"GET",contentType:"application/json;charset=UTF-8",data:payload})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,