/*! For license information please see 1256.151e0ce8.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1256],{"./node_modules/css-loader/dist/cjs.js!./node_modules/react-datepicker/dist/react-datepicker.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow {\n  margin-left: -8px;\n  position: absolute;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow, .react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  box-sizing: content-box;\n  position: absolute;\n  border: 8px solid transparent;\n  height: 0;\n  width: 1px;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  content: "";\n  z-index: -1;\n  border-width: 8px;\n  left: -8px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle {\n  top: 0;\n  margin-top: -8px;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before {\n  border-top: none;\n  border-bottom-color: #f0f0f0;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before {\n  top: -1px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow {\n  bottom: 0;\n  margin-bottom: -8px;\n}\n\n.react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  border-bottom: none;\n  border-top-color: #fff;\n}\n\n.react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  bottom: -1px;\n  border-top-color: #aeaeae;\n}\n\n.react-datepicker-wrapper {\n  display: inline-block;\n}\n\n.react-datepicker {\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\n  font-size: 0.8rem;\n  background-color: #fff;\n  color: #000;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  display: inline-block;\n  position: relative;\n}\n\n.react-datepicker--time-only .react-datepicker__triangle {\n  left: 35px;\n}\n\n.react-datepicker--time-only .react-datepicker__time-container {\n  border-left: 0;\n}\n\n.react-datepicker--time-only .react-datepicker__time {\n  border-radius: 0.3rem;\n}\n\n.react-datepicker--time-only .react-datepicker__time-box {\n  border-radius: 0.3rem;\n}\n\n.react-datepicker__triangle {\n  position: absolute;\n  left: 50px;\n}\n\n.react-datepicker-popper {\n  z-index: 1;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] {\n  margin-top: 10px;\n}\n\n.react-datepicker-popper[data-placement^="top"] {\n  margin-bottom: 10px;\n}\n\n.react-datepicker-popper[data-placement^="right"] {\n  margin-left: 8px;\n}\n\n.react-datepicker-popper[data-placement^="right"] .react-datepicker__triangle {\n  left: auto;\n  right: 42px;\n}\n\n.react-datepicker-popper[data-placement^="left"] {\n  margin-right: 8px;\n}\n\n.react-datepicker-popper[data-placement^="left"] .react-datepicker__triangle {\n  left: 42px;\n  right: auto;\n}\n\n.react-datepicker__header {\n  text-align: center;\n  background-color: #f0f0f0;\n  border-bottom: 1px solid #aeaeae;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n  padding-top: 8px;\n  position: relative;\n}\n\n.react-datepicker__header--time {\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n.react-datepicker__year-dropdown-container--select,\n.react-datepicker__month-dropdown-container--select,\n.react-datepicker__month-year-dropdown-container--select,\n.react-datepicker__year-dropdown-container--scroll,\n.react-datepicker__month-dropdown-container--scroll,\n.react-datepicker__month-year-dropdown-container--scroll {\n  display: inline-block;\n  margin: 0 2px;\n}\n\n.react-datepicker__current-month,\n.react-datepicker-time__header {\n  margin-top: 0;\n  color: #000;\n  font-weight: bold;\n  font-size: 0.944rem;\n}\n\n.react-datepicker-time__header {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.react-datepicker__navigation {\n  background: none;\n  line-height: 1.7rem;\n  text-align: center;\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  width: 0;\n  padding: 0;\n  border: 0.45rem solid transparent;\n  z-index: 1;\n  height: 10px;\n  width: 10px;\n  text-indent: -999em;\n  overflow: hidden;\n}\n\n.react-datepicker__navigation--previous {\n  left: 10px;\n  border-right-color: #ccc;\n}\n\n.react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--previous--disabled, .react-datepicker__navigation--previous--disabled:hover {\n  border-right-color: #e6e6e6;\n  cursor: default;\n}\n\n.react-datepicker__navigation--next {\n  right: 10px;\n  border-left-color: #ccc;\n}\n\n.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button) {\n  right: 80px;\n}\n\n.react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--next--disabled, .react-datepicker__navigation--next--disabled:hover {\n  border-left-color: #e6e6e6;\n  cursor: default;\n}\n\n.react-datepicker__navigation--years {\n  position: relative;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__navigation--years-previous {\n  top: 4px;\n  border-top-color: #ccc;\n}\n\n.react-datepicker__navigation--years-previous:hover {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years-upcoming {\n  top: -4px;\n  border-bottom-color: #ccc;\n}\n\n.react-datepicker__navigation--years-upcoming:hover {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__month-container {\n  float: left;\n}\n\n.react-datepicker__month {\n  margin: 0.4rem;\n  text-align: center;\n}\n\n.react-datepicker__time-container {\n  float: right;\n  border-left: 1px solid #aeaeae;\n  width: 70px;\n}\n\n.react-datepicker__time-container--with-today-button {\n  display: inline;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  position: absolute;\n  right: -72px;\n  top: 0;\n}\n\n.react-datepicker__time-container .react-datepicker__time {\n  position: relative;\n  background: white;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\n  width: 70px;\n  overflow-x: hidden;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n  list-style: none;\n  margin: 0;\n  height: calc(195px + (1.7rem / 2));\n  overflow-y: scroll;\n  padding-right: 30px;\n  width: 100%;\n  box-sizing: content-box;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item {\n  padding: 5px 10px;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover {\n  cursor: pointer;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected {\n  background-color: #216ba5;\n  color: white;\n  font-weight: bold;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover {\n  background-color: #216ba5;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled {\n  color: #ccc;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover {\n  cursor: default;\n  background-color: transparent;\n}\n\n.react-datepicker__week-number {\n  color: #ccc;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable {\n  cursor: pointer;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day-names,\n.react-datepicker__week {\n  white-space: nowrap;\n}\n\n.react-datepicker__day-name,\n.react-datepicker__day,\n.react-datepicker__time-name {\n  color: #000;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__day {\n  cursor: pointer;\n}\n\n.react-datepicker__day:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day--today {\n  font-weight: bold;\n}\n\n.react-datepicker__day--highlighted {\n  border-radius: 0.3rem;\n  background-color: #3dcc4a;\n  color: #fff;\n}\n\n.react-datepicker__day--highlighted:hover {\n  background-color: #32be3f;\n}\n\n.react-datepicker__day--highlighted-custom-1 {\n  color: magenta;\n}\n\n.react-datepicker__day--highlighted-custom-2 {\n  color: green;\n}\n\n.react-datepicker__day--selected, .react-datepicker__day--in-selecting-range, .react-datepicker__day--in-range {\n  border-radius: 0.3rem;\n  background-color: #216ba5;\n  color: #fff;\n}\n\n.react-datepicker__day--selected:hover, .react-datepicker__day--in-selecting-range:hover, .react-datepicker__day--in-range:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--keyboard-selected {\n  border-radius: 0.3rem;\n  background-color: #2a87d0;\n  color: #fff;\n}\n\n.react-datepicker__day--keyboard-selected:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range) {\n  background-color: rgba(33, 107, 165, 0.5);\n}\n\n.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range) {\n  background-color: #f0f0f0;\n  color: #000;\n}\n\n.react-datepicker__day--disabled {\n  cursor: default;\n  color: #ccc;\n}\n\n.react-datepicker__day--disabled:hover {\n  background-color: transparent;\n}\n\n.react-datepicker__input-container {\n  position: relative;\n  display: inline-block;\n}\n\n.react-datepicker__year-read-view,\n.react-datepicker__month-read-view,\n.react-datepicker__month-year-read-view {\n  border: 1px solid transparent;\n  border-radius: 0.3rem;\n}\n\n.react-datepicker__year-read-view:hover,\n.react-datepicker__month-read-view:hover,\n.react-datepicker__month-year-read-view:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow {\n  border-top-color: #ccc;\n  float: right;\n  margin-left: 20px;\n  top: 8px;\n  position: relative;\n  border-width: 0.45rem;\n}\n\n.react-datepicker__year-dropdown,\n.react-datepicker__month-dropdown,\n.react-datepicker__month-year-dropdown {\n  background-color: #f0f0f0;\n  position: absolute;\n  width: 50%;\n  left: 25%;\n  top: 30px;\n  z-index: 1;\n  text-align: center;\n  border-radius: 0.3rem;\n  border: 1px solid #aeaeae;\n}\n\n.react-datepicker__year-dropdown:hover,\n.react-datepicker__month-dropdown:hover,\n.react-datepicker__month-year-dropdown:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-dropdown--scrollable,\n.react-datepicker__month-dropdown--scrollable,\n.react-datepicker__month-year-dropdown--scrollable {\n  height: 150px;\n  overflow-y: scroll;\n}\n\n.react-datepicker__year-option,\n.react-datepicker__month-option,\n.react-datepicker__month-year-option {\n  line-height: 20px;\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__year-option:first-of-type,\n.react-datepicker__month-option:first-of-type,\n.react-datepicker__month-year-option:first-of-type {\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:last-of-type,\n.react-datepicker__month-option:last-of-type,\n.react-datepicker__month-year-option:last-of-type {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border-bottom-left-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:hover,\n.react-datepicker__month-option:hover,\n.react-datepicker__month-year-option:hover {\n  background-color: #ccc;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-option--selected,\n.react-datepicker__month-option--selected,\n.react-datepicker__month-year-option--selected {\n  position: absolute;\n  left: 15px;\n}\n\n.react-datepicker__close-icon {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  outline: 0;\n  padding: 0;\n  vertical-align: middle;\n  position: absolute;\n  height: 16px;\n  width: 16px;\n  top: 25%;\n  right: 7px;\n}\n\n.react-datepicker__close-icon::after {\n  background-color: #216ba5;\n  border-radius: 50%;\n  bottom: 0;\n  box-sizing: border-box;\n  color: #fff;\n  content: "\\00d7";\n  cursor: pointer;\n  font-size: 12px;\n  height: 16px;\n  width: 16px;\n  line-height: 1;\n  margin: -8px auto 0;\n  padding: 2px;\n  position: absolute;\n  right: 0px;\n  text-align: center;\n}\n\n.react-datepicker__today-button {\n  background: #f0f0f0;\n  border-top: 1px solid #aeaeae;\n  cursor: pointer;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0;\n  clear: left;\n}\n\n.react-datepicker__portal {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  left: 0;\n  top: 0;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  z-index: 2147483647;\n}\n\n.react-datepicker__portal .react-datepicker__day-name,\n.react-datepicker__portal .react-datepicker__day,\n.react-datepicker__portal .react-datepicker__time-name {\n  width: 3rem;\n  line-height: 3rem;\n}\n\n@media (max-width: 400px), (max-height: 550px) {\n  .react-datepicker__portal .react-datepicker__day-name,\n  .react-datepicker__portal .react-datepicker__day,\n  .react-datepicker__portal .react-datepicker__time-name {\n    width: 2rem;\n    line-height: 2rem;\n  }\n}\n\n.react-datepicker__portal .react-datepicker__current-month,\n.react-datepicker__portal .react-datepicker-time__header {\n  font-size: 1.44rem;\n}\n\n.react-datepicker__portal .react-datepicker__navigation {\n  border: 0.81rem solid transparent;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous {\n  border-right-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous--disabled, .react-datepicker__portal .react-datepicker__navigation--previous--disabled:hover {\n  border-right-color: #e6e6e6;\n  cursor: default;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next {\n  border-left-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next--disabled, .react-datepicker__portal .react-datepicker__navigation--next--disabled:hover {\n  border-left-color: #e6e6e6;\n  cursor: default;\n}\n',"",{version:3,sources:["webpack://./node_modules/react-datepicker/dist/react-datepicker.css"],names:[],mappings:"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",sourcesContent:['.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow {\n  margin-left: -8px;\n  position: absolute;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow, .react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  box-sizing: content-box;\n  position: absolute;\n  border: 8px solid transparent;\n  height: 0;\n  width: 1px;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  content: "";\n  z-index: -1;\n  border-width: 8px;\n  left: -8px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle {\n  top: 0;\n  margin-top: -8px;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before {\n  border-top: none;\n  border-bottom-color: #f0f0f0;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] .react-datepicker__triangle::before {\n  top: -1px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow {\n  bottom: 0;\n  margin-bottom: -8px;\n}\n\n.react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow, .react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  border-bottom: none;\n  border-top-color: #fff;\n}\n\n.react-datepicker-popper[data-placement^="top"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before,\n.react-datepicker__month-year-read-view--down-arrow::before {\n  bottom: -1px;\n  border-top-color: #aeaeae;\n}\n\n.react-datepicker-wrapper {\n  display: inline-block;\n}\n\n.react-datepicker {\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\n  font-size: 0.8rem;\n  background-color: #fff;\n  color: #000;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  display: inline-block;\n  position: relative;\n}\n\n.react-datepicker--time-only .react-datepicker__triangle {\n  left: 35px;\n}\n\n.react-datepicker--time-only .react-datepicker__time-container {\n  border-left: 0;\n}\n\n.react-datepicker--time-only .react-datepicker__time {\n  border-radius: 0.3rem;\n}\n\n.react-datepicker--time-only .react-datepicker__time-box {\n  border-radius: 0.3rem;\n}\n\n.react-datepicker__triangle {\n  position: absolute;\n  left: 50px;\n}\n\n.react-datepicker-popper {\n  z-index: 1;\n}\n\n.react-datepicker-popper[data-placement^="bottom"] {\n  margin-top: 10px;\n}\n\n.react-datepicker-popper[data-placement^="top"] {\n  margin-bottom: 10px;\n}\n\n.react-datepicker-popper[data-placement^="right"] {\n  margin-left: 8px;\n}\n\n.react-datepicker-popper[data-placement^="right"] .react-datepicker__triangle {\n  left: auto;\n  right: 42px;\n}\n\n.react-datepicker-popper[data-placement^="left"] {\n  margin-right: 8px;\n}\n\n.react-datepicker-popper[data-placement^="left"] .react-datepicker__triangle {\n  left: 42px;\n  right: auto;\n}\n\n.react-datepicker__header {\n  text-align: center;\n  background-color: #f0f0f0;\n  border-bottom: 1px solid #aeaeae;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n  padding-top: 8px;\n  position: relative;\n}\n\n.react-datepicker__header--time {\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n.react-datepicker__year-dropdown-container--select,\n.react-datepicker__month-dropdown-container--select,\n.react-datepicker__month-year-dropdown-container--select,\n.react-datepicker__year-dropdown-container--scroll,\n.react-datepicker__month-dropdown-container--scroll,\n.react-datepicker__month-year-dropdown-container--scroll {\n  display: inline-block;\n  margin: 0 2px;\n}\n\n.react-datepicker__current-month,\n.react-datepicker-time__header {\n  margin-top: 0;\n  color: #000;\n  font-weight: bold;\n  font-size: 0.944rem;\n}\n\n.react-datepicker-time__header {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.react-datepicker__navigation {\n  background: none;\n  line-height: 1.7rem;\n  text-align: center;\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  width: 0;\n  padding: 0;\n  border: 0.45rem solid transparent;\n  z-index: 1;\n  height: 10px;\n  width: 10px;\n  text-indent: -999em;\n  overflow: hidden;\n}\n\n.react-datepicker__navigation--previous {\n  left: 10px;\n  border-right-color: #ccc;\n}\n\n.react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--previous--disabled, .react-datepicker__navigation--previous--disabled:hover {\n  border-right-color: #e6e6e6;\n  cursor: default;\n}\n\n.react-datepicker__navigation--next {\n  right: 10px;\n  border-left-color: #ccc;\n}\n\n.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button) {\n  right: 80px;\n}\n\n.react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--next--disabled, .react-datepicker__navigation--next--disabled:hover {\n  border-left-color: #e6e6e6;\n  cursor: default;\n}\n\n.react-datepicker__navigation--years {\n  position: relative;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__navigation--years-previous {\n  top: 4px;\n  border-top-color: #ccc;\n}\n\n.react-datepicker__navigation--years-previous:hover {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years-upcoming {\n  top: -4px;\n  border-bottom-color: #ccc;\n}\n\n.react-datepicker__navigation--years-upcoming:hover {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__month-container {\n  float: left;\n}\n\n.react-datepicker__month {\n  margin: 0.4rem;\n  text-align: center;\n}\n\n.react-datepicker__time-container {\n  float: right;\n  border-left: 1px solid #aeaeae;\n  width: 70px;\n}\n\n.react-datepicker__time-container--with-today-button {\n  display: inline;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  position: absolute;\n  right: -72px;\n  top: 0;\n}\n\n.react-datepicker__time-container .react-datepicker__time {\n  position: relative;\n  background: white;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\n  width: 70px;\n  overflow-x: hidden;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n  list-style: none;\n  margin: 0;\n  height: calc(195px + (1.7rem / 2));\n  overflow-y: scroll;\n  padding-right: 30px;\n  width: 100%;\n  box-sizing: content-box;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item {\n  padding: 5px 10px;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover {\n  cursor: pointer;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected {\n  background-color: #216ba5;\n  color: white;\n  font-weight: bold;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover {\n  background-color: #216ba5;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled {\n  color: #ccc;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover {\n  cursor: default;\n  background-color: transparent;\n}\n\n.react-datepicker__week-number {\n  color: #ccc;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable {\n  cursor: pointer;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day-names,\n.react-datepicker__week {\n  white-space: nowrap;\n}\n\n.react-datepicker__day-name,\n.react-datepicker__day,\n.react-datepicker__time-name {\n  color: #000;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__day {\n  cursor: pointer;\n}\n\n.react-datepicker__day:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day--today {\n  font-weight: bold;\n}\n\n.react-datepicker__day--highlighted {\n  border-radius: 0.3rem;\n  background-color: #3dcc4a;\n  color: #fff;\n}\n\n.react-datepicker__day--highlighted:hover {\n  background-color: #32be3f;\n}\n\n.react-datepicker__day--highlighted-custom-1 {\n  color: magenta;\n}\n\n.react-datepicker__day--highlighted-custom-2 {\n  color: green;\n}\n\n.react-datepicker__day--selected, .react-datepicker__day--in-selecting-range, .react-datepicker__day--in-range {\n  border-radius: 0.3rem;\n  background-color: #216ba5;\n  color: #fff;\n}\n\n.react-datepicker__day--selected:hover, .react-datepicker__day--in-selecting-range:hover, .react-datepicker__day--in-range:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--keyboard-selected {\n  border-radius: 0.3rem;\n  background-color: #2a87d0;\n  color: #fff;\n}\n\n.react-datepicker__day--keyboard-selected:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range) {\n  background-color: rgba(33, 107, 165, 0.5);\n}\n\n.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range) {\n  background-color: #f0f0f0;\n  color: #000;\n}\n\n.react-datepicker__day--disabled {\n  cursor: default;\n  color: #ccc;\n}\n\n.react-datepicker__day--disabled:hover {\n  background-color: transparent;\n}\n\n.react-datepicker__input-container {\n  position: relative;\n  display: inline-block;\n}\n\n.react-datepicker__year-read-view,\n.react-datepicker__month-read-view,\n.react-datepicker__month-year-read-view {\n  border: 1px solid transparent;\n  border-radius: 0.3rem;\n}\n\n.react-datepicker__year-read-view:hover,\n.react-datepicker__month-read-view:hover,\n.react-datepicker__month-year-read-view:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow {\n  border-top-color: #ccc;\n  float: right;\n  margin-left: 20px;\n  top: 8px;\n  position: relative;\n  border-width: 0.45rem;\n}\n\n.react-datepicker__year-dropdown,\n.react-datepicker__month-dropdown,\n.react-datepicker__month-year-dropdown {\n  background-color: #f0f0f0;\n  position: absolute;\n  width: 50%;\n  left: 25%;\n  top: 30px;\n  z-index: 1;\n  text-align: center;\n  border-radius: 0.3rem;\n  border: 1px solid #aeaeae;\n}\n\n.react-datepicker__year-dropdown:hover,\n.react-datepicker__month-dropdown:hover,\n.react-datepicker__month-year-dropdown:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-dropdown--scrollable,\n.react-datepicker__month-dropdown--scrollable,\n.react-datepicker__month-year-dropdown--scrollable {\n  height: 150px;\n  overflow-y: scroll;\n}\n\n.react-datepicker__year-option,\n.react-datepicker__month-option,\n.react-datepicker__month-year-option {\n  line-height: 20px;\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__year-option:first-of-type,\n.react-datepicker__month-option:first-of-type,\n.react-datepicker__month-year-option:first-of-type {\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:last-of-type,\n.react-datepicker__month-option:last-of-type,\n.react-datepicker__month-year-option:last-of-type {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border-bottom-left-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:hover,\n.react-datepicker__month-option:hover,\n.react-datepicker__month-year-option:hover {\n  background-color: #ccc;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-option--selected,\n.react-datepicker__month-option--selected,\n.react-datepicker__month-year-option--selected {\n  position: absolute;\n  left: 15px;\n}\n\n.react-datepicker__close-icon {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  outline: 0;\n  padding: 0;\n  vertical-align: middle;\n  position: absolute;\n  height: 16px;\n  width: 16px;\n  top: 25%;\n  right: 7px;\n}\n\n.react-datepicker__close-icon::after {\n  background-color: #216ba5;\n  border-radius: 50%;\n  bottom: 0;\n  box-sizing: border-box;\n  color: #fff;\n  content: "\\00d7";\n  cursor: pointer;\n  font-size: 12px;\n  height: 16px;\n  width: 16px;\n  line-height: 1;\n  margin: -8px auto 0;\n  padding: 2px;\n  position: absolute;\n  right: 0px;\n  text-align: center;\n}\n\n.react-datepicker__today-button {\n  background: #f0f0f0;\n  border-top: 1px solid #aeaeae;\n  cursor: pointer;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0;\n  clear: left;\n}\n\n.react-datepicker__portal {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  left: 0;\n  top: 0;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  z-index: 2147483647;\n}\n\n.react-datepicker__portal .react-datepicker__day-name,\n.react-datepicker__portal .react-datepicker__day,\n.react-datepicker__portal .react-datepicker__time-name {\n  width: 3rem;\n  line-height: 3rem;\n}\n\n@media (max-width: 400px), (max-height: 550px) {\n  .react-datepicker__portal .react-datepicker__day-name,\n  .react-datepicker__portal .react-datepicker__day,\n  .react-datepicker__portal .react-datepicker__time-name {\n    width: 2rem;\n    line-height: 2rem;\n  }\n}\n\n.react-datepicker__portal .react-datepicker__current-month,\n.react-datepicker__portal .react-datepicker-time__header {\n  font-size: 1.44rem;\n}\n\n.react-datepicker__portal .react-datepicker__navigation {\n  border: 0.81rem solid transparent;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous {\n  border-right-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous--disabled, .react-datepicker__portal .react-datepicker__navigation--previous--disabled:hover {\n  border-right-color: #e6e6e6;\n  cursor: default;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next {\n  border-left-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next--disabled, .react-datepicker__portal .react-datepicker__navigation--next--disabled:hover {\n  border-left-color: #e6e6e6;\n  cursor: default;\n}\n'],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/react-datepicker/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CalendarContainer:()=>CalendarContainer,default:()=>es});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),classnames=__webpack_require__("./node_modules/react-datepicker/node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react_dom=__webpack_require__("./node_modules/react-dom/index.js");function isNodeFound(current,componentNode,ignoreClass){return current===componentNode||(current.correspondingElement?current.correspondingElement.classList.contains(ignoreClass):current.classList.contains(ignoreClass))}var passiveEventSupport,uid=function autoInc(seed){return void 0===seed&&(seed=0),function(){return++seed}}(),handlersMap={},enabledInstances={},touchEvents=["touchstart","touchmove"];function getEventHandlerOptions(instance,eventName){var handlerOptions=null;return-1!==touchEvents.indexOf(eventName)&&passiveEventSupport&&(handlerOptions={passive:!instance.props.preventDefault}),handlerOptions}const react_onclickoutside_es=function onClickOutsideHOC(WrappedComponent,config){var _class,_temp;return _temp=_class=function(_Component){function onClickOutside(props){var _this;return(_this=_Component.call(this,props)||this).__outsideClickHandler=function(event){if("function"!=typeof _this.__clickOutsideHandlerProp){var instance=_this.getInstance();if("function"!=typeof instance.props.handleClickOutside){if("function"!=typeof instance.handleClickOutside)throw new Error("WrappedComponent lacks a handleClickOutside(event) function for processing outside click events.");instance.handleClickOutside(event)}else instance.props.handleClickOutside(event)}else _this.__clickOutsideHandlerProp(event)},_this.enableOnClickOutside=function(){if("undefined"!=typeof document&&!enabledInstances[_this._uid]){void 0===passiveEventSupport&&(passiveEventSupport=function testPassiveEventSupport(){if("undefined"!=typeof window&&"function"==typeof window.addEventListener){var passive=!1,options=Object.defineProperty({},"passive",{get:function get(){passive=!0}}),noop=function noop(){};return window.addEventListener("testPassiveEventSupport",noop,options),window.removeEventListener("testPassiveEventSupport",noop,options),passive}}()),enabledInstances[_this._uid]=!0;var events=_this.props.eventTypes;events.forEach||(events=[events]),handlersMap[_this._uid]=function(event){_this.props.disableOnClickOutside||null!==_this.componentNode&&(_this.props.preventDefault&&event.preventDefault(),_this.props.stopPropagation&&event.stopPropagation(),_this.props.excludeScrollbar&&function clickedScrollbar(evt){return document.documentElement.clientWidth<=evt.clientX||document.documentElement.clientHeight<=evt.clientY}(event)||function findHighest(current,componentNode,ignoreClass){if(current===componentNode)return!0;for(;current.parentNode;){if(isNodeFound(current,componentNode,ignoreClass))return!0;current=current.parentNode}return current}(event.target,_this.componentNode,_this.props.outsideClickIgnoreClass)===document&&_this.__outsideClickHandler(event))},events.forEach((function(eventName){document.addEventListener(eventName,handlersMap[_this._uid],getEventHandlerOptions(_this,eventName))}))}},_this.disableOnClickOutside=function(){delete enabledInstances[_this._uid];var fn=handlersMap[_this._uid];if(fn&&"undefined"!=typeof document){var events=_this.props.eventTypes;events.forEach||(events=[events]),events.forEach((function(eventName){return document.removeEventListener(eventName,fn,getEventHandlerOptions(_this,eventName))})),delete handlersMap[_this._uid]}},_this.getRef=function(ref){return _this.instanceRef=ref},_this._uid=uid(),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,subClass.__proto__=superClass}(onClickOutside,_Component);var _proto=onClickOutside.prototype;return _proto.getInstance=function getInstance(){if(!WrappedComponent.prototype.isReactComponent)return this;var ref=this.instanceRef;return ref.getInstance?ref.getInstance():ref},_proto.componentDidMount=function componentDidMount(){if("undefined"!=typeof document&&document.createElement){var instance=this.getInstance();if(config&&"function"==typeof config.handleClickOutside&&(this.__clickOutsideHandlerProp=config.handleClickOutside(instance),"function"!=typeof this.__clickOutsideHandlerProp))throw new Error("WrappedComponent lacks a function for processing outside click events specified by the handleClickOutside config option.");this.componentNode=(0,react_dom.findDOMNode)(this.getInstance()),this.enableOnClickOutside()}},_proto.componentDidUpdate=function componentDidUpdate(){this.componentNode=(0,react_dom.findDOMNode)(this.getInstance())},_proto.componentWillUnmount=function componentWillUnmount(){this.disableOnClickOutside()},_proto.render=function render(){var _props=this.props,props=(_props.excludeScrollbar,function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}(_props,["excludeScrollbar"]));return WrappedComponent.prototype.isReactComponent?props.ref=this.getRef:props.wrappedRef=this.getRef,props.disableOnClickOutside=this.disableOnClickOutside,props.enableOnClickOutside=this.enableOnClickOutside,(0,react.createElement)(WrappedComponent,props)},onClickOutside}(react.Component),_class.displayName="OnClickOutside("+(WrappedComponent.displayName||WrappedComponent.name||"Component")+")",_class.defaultProps={eventTypes:["mousedown","touchstart"],excludeScrollbar:config&&config.excludeScrollbar||!1,outsideClickIgnoreClass:"ignore-react-onclickoutside",preventDefault:!1,stopPropagation:!1},_class.getClass=function(){return WrappedComponent.getClass?WrappedComponent.getClass():WrappedComponent},_temp};var moment=__webpack_require__("./node_modules/moment/moment.js"),moment_default=__webpack_require__.n(moment),_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var Manager=function(_Component){function Manager(){var _ref,_temp,_this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Manager);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Manager.__proto__||Object.getPrototypeOf(Manager)).call.apply(_ref,[this].concat(args))),_this._setTargetNode=function(node){_this._targetNode=node},_this._getTargetNode=function(){return _this._targetNode},_possibleConstructorReturn(_this,_temp)}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Manager,_Component),_createClass(Manager,[{key:"getChildContext",value:function getChildContext(){return{popperManager:{setTargetNode:this._setTargetNode,getTargetNode:this._getTargetNode}}}},{key:"render",value:function render(){var _props=this.props,tag=_props.tag,children=_props.children,restProps=function Manager_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props,["tag","children"]);return!1!==tag?(0,react.createElement)(tag,restProps,children):children}}]),Manager}(react.Component);Manager.childContextTypes={popperManager:prop_types_default().object.isRequired},Manager.propTypes={tag:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().bool]),children:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func])},Manager.defaultProps={tag:"div"};const lib_Manager=Manager;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};var Target=function Target(props,context){var _props$component=props.component,component=void 0===_props$component?"div":_props$component,innerRef=props.innerRef,children=props.children,restProps=function Target_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(props,["component","innerRef","children"]),popperManager=context.popperManager,targetRef=function targetRef(node){popperManager.setTargetNode(node),"function"==typeof innerRef&&innerRef(node)};if("function"==typeof children)return children({targetProps:{ref:targetRef},restProps});var componentProps=_extends({},restProps);return"string"==typeof component?componentProps.ref=targetRef:componentProps.innerRef=targetRef,(0,react.createElement)(component,componentProps,children)};Target.contextTypes={popperManager:prop_types_default().object.isRequired},Target.propTypes={component:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func]),innerRef:prop_types_default().func,children:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func])};const lib_Target=Target;for(var isBrowser="undefined"!=typeof window&&"undefined"!=typeof document,longerTimeoutBrowsers=["Edge","Trident","Firefox"],timeoutDuration=0,i=0;i<longerTimeoutBrowsers.length;i+=1)if(isBrowser&&navigator.userAgent.indexOf(longerTimeoutBrowsers[i])>=0){timeoutDuration=1;break}var debounce=isBrowser&&window.Promise?function microtaskDebounce(fn){var called=!1;return function(){called||(called=!0,window.Promise.resolve().then((function(){called=!1,fn()})))}}:function taskDebounce(fn){var scheduled=!1;return function(){scheduled||(scheduled=!0,setTimeout((function(){scheduled=!1,fn()}),timeoutDuration))}};function isFunction(functionToCheck){return functionToCheck&&"[object Function]"==={}.toString.call(functionToCheck)}function getStyleComputedProperty(element,property){if(1!==element.nodeType)return[];var css=getComputedStyle(element,null);return property?css[property]:css}function getParentNode(element){return"HTML"===element.nodeName?element:element.parentNode||element.host}function getScrollParent(element){if(!element)return document.body;switch(element.nodeName){case"HTML":case"BODY":return element.ownerDocument.body;case"#document":return element.body}var _getStyleComputedProp=getStyleComputedProperty(element),overflow=_getStyleComputedProp.overflow,overflowX=_getStyleComputedProp.overflowX,overflowY=_getStyleComputedProp.overflowY;return/(auto|scroll|overlay)/.test(overflow+overflowY+overflowX)?element:getScrollParent(getParentNode(element))}var isIE11=isBrowser&&!(!window.MSInputMethodContext||!document.documentMode),isIE10=isBrowser&&/MSIE 10/.test(navigator.userAgent);function isIE(version){return 11===version?isIE11:10===version?isIE10:isIE11||isIE10}function getOffsetParent(element){if(!element)return document.documentElement;for(var noOffsetParent=isIE(10)?document.body:null,offsetParent=element.offsetParent;offsetParent===noOffsetParent&&element.nextElementSibling;)offsetParent=(element=element.nextElementSibling).offsetParent;var nodeName=offsetParent&&offsetParent.nodeName;return nodeName&&"BODY"!==nodeName&&"HTML"!==nodeName?-1!==["TD","TABLE"].indexOf(offsetParent.nodeName)&&"static"===getStyleComputedProperty(offsetParent,"position")?getOffsetParent(offsetParent):offsetParent:element?element.ownerDocument.documentElement:document.documentElement}function getRoot(node){return null!==node.parentNode?getRoot(node.parentNode):node}function findCommonOffsetParent(element1,element2){if(!(element1&&element1.nodeType&&element2&&element2.nodeType))return document.documentElement;var order=element1.compareDocumentPosition(element2)&Node.DOCUMENT_POSITION_FOLLOWING,start=order?element1:element2,end=order?element2:element1,range=document.createRange();range.setStart(start,0),range.setEnd(end,0);var commonAncestorContainer=range.commonAncestorContainer;if(element1!==commonAncestorContainer&&element2!==commonAncestorContainer||start.contains(end))return function isOffsetContainer(element){var nodeName=element.nodeName;return"BODY"!==nodeName&&("HTML"===nodeName||getOffsetParent(element.firstElementChild)===element)}(commonAncestorContainer)?commonAncestorContainer:getOffsetParent(commonAncestorContainer);var element1root=getRoot(element1);return element1root.host?findCommonOffsetParent(element1root.host,element2):findCommonOffsetParent(element1,getRoot(element2).host)}function getScroll(element){var upperSide="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",nodeName=element.nodeName;if("BODY"===nodeName||"HTML"===nodeName){var html=element.ownerDocument.documentElement;return(element.ownerDocument.scrollingElement||html)[upperSide]}return element[upperSide]}function getBordersSize(styles,axis){var sideA="x"===axis?"Left":"Top",sideB="Left"===sideA?"Right":"Bottom";return parseFloat(styles["border"+sideA+"Width"],10)+parseFloat(styles["border"+sideB+"Width"],10)}function getSize(axis,body,html,computedStyle){return Math.max(body["offset"+axis],body["scroll"+axis],html["client"+axis],html["offset"+axis],html["scroll"+axis],isIE(10)?html["offset"+axis]+computedStyle["margin"+("Height"===axis?"Top":"Left")]+computedStyle["margin"+("Height"===axis?"Bottom":"Right")]:0)}function getWindowSizes(){var body=document.body,html=document.documentElement,computedStyle=isIE(10)&&getComputedStyle(html);return{height:getSize("Height",body,html,computedStyle),width:getSize("Width",body,html,computedStyle)}}var createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),defineProperty=function(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj},popper_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};function getClientRect(offsets){return popper_extends({},offsets,{right:offsets.left+offsets.width,bottom:offsets.top+offsets.height})}function getBoundingClientRect(element){var rect={};try{if(isIE(10)){rect=element.getBoundingClientRect();var scrollTop=getScroll(element,"top"),scrollLeft=getScroll(element,"left");rect.top+=scrollTop,rect.left+=scrollLeft,rect.bottom+=scrollTop,rect.right+=scrollLeft}else rect=element.getBoundingClientRect()}catch(e){}var result={left:rect.left,top:rect.top,width:rect.right-rect.left,height:rect.bottom-rect.top},sizes="HTML"===element.nodeName?getWindowSizes():{},width=sizes.width||element.clientWidth||result.right-result.left,height=sizes.height||element.clientHeight||result.bottom-result.top,horizScrollbar=element.offsetWidth-width,vertScrollbar=element.offsetHeight-height;if(horizScrollbar||vertScrollbar){var styles=getStyleComputedProperty(element);horizScrollbar-=getBordersSize(styles,"x"),vertScrollbar-=getBordersSize(styles,"y"),result.width-=horizScrollbar,result.height-=vertScrollbar}return getClientRect(result)}function getOffsetRectRelativeToArbitraryNode(children,parent){var fixedPosition=arguments.length>2&&void 0!==arguments[2]&&arguments[2],isIE10=isIE(10),isHTML="HTML"===parent.nodeName,childrenRect=getBoundingClientRect(children),parentRect=getBoundingClientRect(parent),scrollParent=getScrollParent(children),styles=getStyleComputedProperty(parent),borderTopWidth=parseFloat(styles.borderTopWidth,10),borderLeftWidth=parseFloat(styles.borderLeftWidth,10);fixedPosition&&"HTML"===parent.nodeName&&(parentRect.top=Math.max(parentRect.top,0),parentRect.left=Math.max(parentRect.left,0));var offsets=getClientRect({top:childrenRect.top-parentRect.top-borderTopWidth,left:childrenRect.left-parentRect.left-borderLeftWidth,width:childrenRect.width,height:childrenRect.height});if(offsets.marginTop=0,offsets.marginLeft=0,!isIE10&&isHTML){var marginTop=parseFloat(styles.marginTop,10),marginLeft=parseFloat(styles.marginLeft,10);offsets.top-=borderTopWidth-marginTop,offsets.bottom-=borderTopWidth-marginTop,offsets.left-=borderLeftWidth-marginLeft,offsets.right-=borderLeftWidth-marginLeft,offsets.marginTop=marginTop,offsets.marginLeft=marginLeft}return(isIE10&&!fixedPosition?parent.contains(scrollParent):parent===scrollParent&&"BODY"!==scrollParent.nodeName)&&(offsets=function includeScroll(rect,element){var subtract=arguments.length>2&&void 0!==arguments[2]&&arguments[2],scrollTop=getScroll(element,"top"),scrollLeft=getScroll(element,"left"),modifier=subtract?-1:1;return rect.top+=scrollTop*modifier,rect.bottom+=scrollTop*modifier,rect.left+=scrollLeft*modifier,rect.right+=scrollLeft*modifier,rect}(offsets,parent)),offsets}function isFixed(element){var nodeName=element.nodeName;return"BODY"!==nodeName&&"HTML"!==nodeName&&("fixed"===getStyleComputedProperty(element,"position")||isFixed(getParentNode(element)))}function getFixedPositionOffsetParent(element){if(!element||!element.parentElement||isIE())return document.documentElement;for(var el=element.parentElement;el&&"none"===getStyleComputedProperty(el,"transform");)el=el.parentElement;return el||document.documentElement}function getBoundaries(popper,reference,padding,boundariesElement){var fixedPosition=arguments.length>4&&void 0!==arguments[4]&&arguments[4],boundaries={top:0,left:0},offsetParent=fixedPosition?getFixedPositionOffsetParent(popper):findCommonOffsetParent(popper,reference);if("viewport"===boundariesElement)boundaries=function getViewportOffsetRectRelativeToArtbitraryNode(element){var excludeScroll=arguments.length>1&&void 0!==arguments[1]&&arguments[1],html=element.ownerDocument.documentElement,relativeOffset=getOffsetRectRelativeToArbitraryNode(element,html),width=Math.max(html.clientWidth,window.innerWidth||0),height=Math.max(html.clientHeight,window.innerHeight||0),scrollTop=excludeScroll?0:getScroll(html),scrollLeft=excludeScroll?0:getScroll(html,"left");return getClientRect({top:scrollTop-relativeOffset.top+relativeOffset.marginTop,left:scrollLeft-relativeOffset.left+relativeOffset.marginLeft,width,height})}(offsetParent,fixedPosition);else{var boundariesNode=void 0;"scrollParent"===boundariesElement?"BODY"===(boundariesNode=getScrollParent(getParentNode(reference))).nodeName&&(boundariesNode=popper.ownerDocument.documentElement):boundariesNode="window"===boundariesElement?popper.ownerDocument.documentElement:boundariesElement;var offsets=getOffsetRectRelativeToArbitraryNode(boundariesNode,offsetParent,fixedPosition);if("HTML"!==boundariesNode.nodeName||isFixed(offsetParent))boundaries=offsets;else{var _getWindowSizes=getWindowSizes(),height=_getWindowSizes.height,width=_getWindowSizes.width;boundaries.top+=offsets.top-offsets.marginTop,boundaries.bottom=height+offsets.top,boundaries.left+=offsets.left-offsets.marginLeft,boundaries.right=width+offsets.left}}return boundaries.left+=padding,boundaries.top+=padding,boundaries.right-=padding,boundaries.bottom-=padding,boundaries}function computeAutoPlacement(placement,refRect,popper,reference,boundariesElement){var padding=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===placement.indexOf("auto"))return placement;var boundaries=getBoundaries(popper,reference,padding,boundariesElement),rects={top:{width:boundaries.width,height:refRect.top-boundaries.top},right:{width:boundaries.right-refRect.right,height:boundaries.height},bottom:{width:boundaries.width,height:boundaries.bottom-refRect.bottom},left:{width:refRect.left-boundaries.left,height:boundaries.height}},sortedAreas=Object.keys(rects).map((function(key){return popper_extends({key},rects[key],{area:(_ref=rects[key],_ref.width*_ref.height)});var _ref})).sort((function(a,b){return b.area-a.area})),filteredAreas=sortedAreas.filter((function(_ref2){var width=_ref2.width,height=_ref2.height;return width>=popper.clientWidth&&height>=popper.clientHeight})),computedPlacement=filteredAreas.length>0?filteredAreas[0].key:sortedAreas[0].key,variation=placement.split("-")[1];return computedPlacement+(variation?"-"+variation:"")}function getReferenceOffsets(state,popper,reference){var fixedPosition=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return getOffsetRectRelativeToArbitraryNode(reference,fixedPosition?getFixedPositionOffsetParent(popper):findCommonOffsetParent(popper,reference),fixedPosition)}function getOuterSizes(element){var styles=getComputedStyle(element),x=parseFloat(styles.marginTop)+parseFloat(styles.marginBottom),y=parseFloat(styles.marginLeft)+parseFloat(styles.marginRight);return{width:element.offsetWidth+y,height:element.offsetHeight+x}}function getOppositePlacement(placement){var hash={left:"right",right:"left",bottom:"top",top:"bottom"};return placement.replace(/left|right|bottom|top/g,(function(matched){return hash[matched]}))}function getPopperOffsets(popper,referenceOffsets,placement){placement=placement.split("-")[0];var popperRect=getOuterSizes(popper),popperOffsets={width:popperRect.width,height:popperRect.height},isHoriz=-1!==["right","left"].indexOf(placement),mainSide=isHoriz?"top":"left",secondarySide=isHoriz?"left":"top",measurement=isHoriz?"height":"width",secondaryMeasurement=isHoriz?"width":"height";return popperOffsets[mainSide]=referenceOffsets[mainSide]+referenceOffsets[measurement]/2-popperRect[measurement]/2,popperOffsets[secondarySide]=placement===secondarySide?referenceOffsets[secondarySide]-popperRect[secondaryMeasurement]:referenceOffsets[getOppositePlacement(secondarySide)],popperOffsets}function find(arr,check){return Array.prototype.find?arr.find(check):arr.filter(check)[0]}function runModifiers(modifiers,data,ends){return(void 0===ends?modifiers:modifiers.slice(0,function findIndex(arr,prop,value){if(Array.prototype.findIndex)return arr.findIndex((function(cur){return cur[prop]===value}));var match=find(arr,(function(obj){return obj[prop]===value}));return arr.indexOf(match)}(modifiers,"name",ends))).forEach((function(modifier){modifier.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var fn=modifier.function||modifier.fn;modifier.enabled&&isFunction(fn)&&(data.offsets.popper=getClientRect(data.offsets.popper),data.offsets.reference=getClientRect(data.offsets.reference),data=fn(data,modifier))})),data}function update(){if(!this.state.isDestroyed){var data={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};data.offsets.reference=getReferenceOffsets(this.state,this.popper,this.reference,this.options.positionFixed),data.placement=computeAutoPlacement(this.options.placement,data.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),data.originalPlacement=data.placement,data.positionFixed=this.options.positionFixed,data.offsets.popper=getPopperOffsets(this.popper,data.offsets.reference,data.placement),data.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",data=runModifiers(this.modifiers,data),this.state.isCreated?this.options.onUpdate(data):(this.state.isCreated=!0,this.options.onCreate(data))}}function isModifierEnabled(modifiers,modifierName){return modifiers.some((function(_ref){var name=_ref.name;return _ref.enabled&&name===modifierName}))}function getSupportedPropertyName(property){for(var prefixes=[!1,"ms","Webkit","Moz","O"],upperProp=property.charAt(0).toUpperCase()+property.slice(1),i=0;i<prefixes.length;i++){var prefix=prefixes[i],toCheck=prefix?""+prefix+upperProp:property;if(void 0!==document.body.style[toCheck])return toCheck}return null}function destroy(){return this.state.isDestroyed=!0,isModifierEnabled(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[getSupportedPropertyName("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function getWindow(element){var ownerDocument=element.ownerDocument;return ownerDocument?ownerDocument.defaultView:window}function attachToScrollParents(scrollParent,event,callback,scrollParents){var isBody="BODY"===scrollParent.nodeName,target=isBody?scrollParent.ownerDocument.defaultView:scrollParent;target.addEventListener(event,callback,{passive:!0}),isBody||attachToScrollParents(getScrollParent(target.parentNode),event,callback,scrollParents),scrollParents.push(target)}function setupEventListeners(reference,options,state,updateBound){state.updateBound=updateBound,getWindow(reference).addEventListener("resize",state.updateBound,{passive:!0});var scrollElement=getScrollParent(reference);return attachToScrollParents(scrollElement,"scroll",state.updateBound,state.scrollParents),state.scrollElement=scrollElement,state.eventsEnabled=!0,state}function enableEventListeners(){this.state.eventsEnabled||(this.state=setupEventListeners(this.reference,this.options,this.state,this.scheduleUpdate))}function disableEventListeners(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function removeEventListeners(reference,state){return getWindow(reference).removeEventListener("resize",state.updateBound),state.scrollParents.forEach((function(target){target.removeEventListener("scroll",state.updateBound)})),state.updateBound=null,state.scrollParents=[],state.scrollElement=null,state.eventsEnabled=!1,state}(this.reference,this.state))}function isNumeric(n){return""!==n&&!isNaN(parseFloat(n))&&isFinite(n)}function setStyles(element,styles){Object.keys(styles).forEach((function(prop){var unit="";-1!==["width","height","top","right","bottom","left"].indexOf(prop)&&isNumeric(styles[prop])&&(unit="px"),element.style[prop]=styles[prop]+unit}))}function isModifierRequired(modifiers,requestingName,requestedName){var requesting=find(modifiers,(function(_ref){return _ref.name===requestingName})),isRequired=!!requesting&&modifiers.some((function(modifier){return modifier.name===requestedName&&modifier.enabled&&modifier.order<requesting.order}));if(!isRequired){var _requesting="`"+requestingName+"`",requested="`"+requestedName+"`";console.warn(requested+" modifier is required by "+_requesting+" modifier in order to work, be sure to include it before "+_requesting+"!")}return isRequired}var placements=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],validPlacements=placements.slice(3);function clockwise(placement){var counter=arguments.length>1&&void 0!==arguments[1]&&arguments[1],index=validPlacements.indexOf(placement),arr=validPlacements.slice(index+1).concat(validPlacements.slice(0,index));return counter?arr.reverse():arr}var BEHAVIORS_FLIP="flip",BEHAVIORS_CLOCKWISE="clockwise",BEHAVIORS_COUNTERCLOCKWISE="counterclockwise";function parseOffset(offset,popperOffsets,referenceOffsets,basePlacement){var offsets=[0,0],useHeight=-1!==["right","left"].indexOf(basePlacement),fragments=offset.split(/(\+|\-)/).map((function(frag){return frag.trim()})),divider=fragments.indexOf(find(fragments,(function(frag){return-1!==frag.search(/,|\s/)})));fragments[divider]&&-1===fragments[divider].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var splitRegex=/\s*,\s*|\s+/,ops=-1!==divider?[fragments.slice(0,divider).concat([fragments[divider].split(splitRegex)[0]]),[fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider+1))]:[fragments];return ops=ops.map((function(op,index){var measurement=(1===index?!useHeight:useHeight)?"height":"width",mergeWithPrevious=!1;return op.reduce((function(a,b){return""===a[a.length-1]&&-1!==["+","-"].indexOf(b)?(a[a.length-1]=b,mergeWithPrevious=!0,a):mergeWithPrevious?(a[a.length-1]+=b,mergeWithPrevious=!1,a):a.concat(b)}),[]).map((function(str){return function toValue(str,measurement,popperOffsets,referenceOffsets){var split=str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),value=+split[1],unit=split[2];if(!value)return str;if(0===unit.indexOf("%")){return getClientRect("%p"===unit?popperOffsets:referenceOffsets)[measurement]/100*value}if("vh"===unit||"vw"===unit)return("vh"===unit?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*value;return value}(str,measurement,popperOffsets,referenceOffsets)}))})),ops.forEach((function(op,index){op.forEach((function(frag,index2){isNumeric(frag)&&(offsets[index]+=frag*("-"===op[index2-1]?-1:1))}))})),offsets}var modifiers={shift:{order:100,enabled:!0,fn:function shift(data){var placement=data.placement,basePlacement=placement.split("-")[0],shiftvariation=placement.split("-")[1];if(shiftvariation){var _data$offsets=data.offsets,reference=_data$offsets.reference,popper=_data$offsets.popper,isVertical=-1!==["bottom","top"].indexOf(basePlacement),side=isVertical?"left":"top",measurement=isVertical?"width":"height",shiftOffsets={start:defineProperty({},side,reference[side]),end:defineProperty({},side,reference[side]+reference[measurement]-popper[measurement])};data.offsets.popper=popper_extends({},popper,shiftOffsets[shiftvariation])}return data}},offset:{order:200,enabled:!0,fn:function offset(data,_ref){var offset=_ref.offset,placement=data.placement,_data$offsets=data.offsets,popper=_data$offsets.popper,reference=_data$offsets.reference,basePlacement=placement.split("-")[0],offsets=void 0;return offsets=isNumeric(+offset)?[+offset,0]:parseOffset(offset,popper,reference,basePlacement),"left"===basePlacement?(popper.top+=offsets[0],popper.left-=offsets[1]):"right"===basePlacement?(popper.top+=offsets[0],popper.left+=offsets[1]):"top"===basePlacement?(popper.left+=offsets[0],popper.top-=offsets[1]):"bottom"===basePlacement&&(popper.left+=offsets[0],popper.top+=offsets[1]),data.popper=popper,data},offset:0},preventOverflow:{order:300,enabled:!0,fn:function preventOverflow(data,options){var boundariesElement=options.boundariesElement||getOffsetParent(data.instance.popper);data.instance.reference===boundariesElement&&(boundariesElement=getOffsetParent(boundariesElement));var transformProp=getSupportedPropertyName("transform"),popperStyles=data.instance.popper.style,top=popperStyles.top,left=popperStyles.left,transform=popperStyles[transformProp];popperStyles.top="",popperStyles.left="",popperStyles[transformProp]="";var boundaries=getBoundaries(data.instance.popper,data.instance.reference,options.padding,boundariesElement,data.positionFixed);popperStyles.top=top,popperStyles.left=left,popperStyles[transformProp]=transform,options.boundaries=boundaries;var order=options.priority,popper=data.offsets.popper,check={primary:function primary(placement){var value=popper[placement];return popper[placement]<boundaries[placement]&&!options.escapeWithReference&&(value=Math.max(popper[placement],boundaries[placement])),defineProperty({},placement,value)},secondary:function secondary(placement){var mainSide="right"===placement?"left":"top",value=popper[mainSide];return popper[placement]>boundaries[placement]&&!options.escapeWithReference&&(value=Math.min(popper[mainSide],boundaries[placement]-("right"===placement?popper.width:popper.height))),defineProperty({},mainSide,value)}};return order.forEach((function(placement){var side=-1!==["left","top"].indexOf(placement)?"primary":"secondary";popper=popper_extends({},popper,check[side](placement))})),data.offsets.popper=popper,data},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function keepTogether(data){var _data$offsets=data.offsets,popper=_data$offsets.popper,reference=_data$offsets.reference,placement=data.placement.split("-")[0],floor=Math.floor,isVertical=-1!==["top","bottom"].indexOf(placement),side=isVertical?"right":"bottom",opSide=isVertical?"left":"top",measurement=isVertical?"width":"height";return popper[side]<floor(reference[opSide])&&(data.offsets.popper[opSide]=floor(reference[opSide])-popper[measurement]),popper[opSide]>floor(reference[side])&&(data.offsets.popper[opSide]=floor(reference[side])),data}},arrow:{order:500,enabled:!0,fn:function arrow(data,options){var _data$offsets$arrow;if(!isModifierRequired(data.instance.modifiers,"arrow","keepTogether"))return data;var arrowElement=options.element;if("string"==typeof arrowElement){if(!(arrowElement=data.instance.popper.querySelector(arrowElement)))return data}else if(!data.instance.popper.contains(arrowElement))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),data;var placement=data.placement.split("-")[0],_data$offsets=data.offsets,popper=_data$offsets.popper,reference=_data$offsets.reference,isVertical=-1!==["left","right"].indexOf(placement),len=isVertical?"height":"width",sideCapitalized=isVertical?"Top":"Left",side=sideCapitalized.toLowerCase(),altSide=isVertical?"left":"top",opSide=isVertical?"bottom":"right",arrowElementSize=getOuterSizes(arrowElement)[len];reference[opSide]-arrowElementSize<popper[side]&&(data.offsets.popper[side]-=popper[side]-(reference[opSide]-arrowElementSize)),reference[side]+arrowElementSize>popper[opSide]&&(data.offsets.popper[side]+=reference[side]+arrowElementSize-popper[opSide]),data.offsets.popper=getClientRect(data.offsets.popper);var center=reference[side]+reference[len]/2-arrowElementSize/2,css=getStyleComputedProperty(data.instance.popper),popperMarginSide=parseFloat(css["margin"+sideCapitalized],10),popperBorderSide=parseFloat(css["border"+sideCapitalized+"Width"],10),sideValue=center-data.offsets.popper[side]-popperMarginSide-popperBorderSide;return sideValue=Math.max(Math.min(popper[len]-arrowElementSize,sideValue),0),data.arrowElement=arrowElement,data.offsets.arrow=(defineProperty(_data$offsets$arrow={},side,Math.round(sideValue)),defineProperty(_data$offsets$arrow,altSide,""),_data$offsets$arrow),data},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function flip(data,options){if(isModifierEnabled(data.instance.modifiers,"inner"))return data;if(data.flipped&&data.placement===data.originalPlacement)return data;var boundaries=getBoundaries(data.instance.popper,data.instance.reference,options.padding,options.boundariesElement,data.positionFixed),placement=data.placement.split("-")[0],placementOpposite=getOppositePlacement(placement),variation=data.placement.split("-")[1]||"",flipOrder=[];switch(options.behavior){case BEHAVIORS_FLIP:flipOrder=[placement,placementOpposite];break;case BEHAVIORS_CLOCKWISE:flipOrder=clockwise(placement);break;case BEHAVIORS_COUNTERCLOCKWISE:flipOrder=clockwise(placement,!0);break;default:flipOrder=options.behavior}return flipOrder.forEach((function(step,index){if(placement!==step||flipOrder.length===index+1)return data;placement=data.placement.split("-")[0],placementOpposite=getOppositePlacement(placement);var popperOffsets=data.offsets.popper,refOffsets=data.offsets.reference,floor=Math.floor,overlapsRef="left"===placement&&floor(popperOffsets.right)>floor(refOffsets.left)||"right"===placement&&floor(popperOffsets.left)<floor(refOffsets.right)||"top"===placement&&floor(popperOffsets.bottom)>floor(refOffsets.top)||"bottom"===placement&&floor(popperOffsets.top)<floor(refOffsets.bottom),overflowsLeft=floor(popperOffsets.left)<floor(boundaries.left),overflowsRight=floor(popperOffsets.right)>floor(boundaries.right),overflowsTop=floor(popperOffsets.top)<floor(boundaries.top),overflowsBottom=floor(popperOffsets.bottom)>floor(boundaries.bottom),overflowsBoundaries="left"===placement&&overflowsLeft||"right"===placement&&overflowsRight||"top"===placement&&overflowsTop||"bottom"===placement&&overflowsBottom,isVertical=-1!==["top","bottom"].indexOf(placement),flippedVariation=!!options.flipVariations&&(isVertical&&"start"===variation&&overflowsLeft||isVertical&&"end"===variation&&overflowsRight||!isVertical&&"start"===variation&&overflowsTop||!isVertical&&"end"===variation&&overflowsBottom);(overlapsRef||overflowsBoundaries||flippedVariation)&&(data.flipped=!0,(overlapsRef||overflowsBoundaries)&&(placement=flipOrder[index+1]),flippedVariation&&(variation=function getOppositeVariation(variation){return"end"===variation?"start":"start"===variation?"end":variation}(variation)),data.placement=placement+(variation?"-"+variation:""),data.offsets.popper=popper_extends({},data.offsets.popper,getPopperOffsets(data.instance.popper,data.offsets.reference,data.placement)),data=runModifiers(data.instance.modifiers,data,"flip"))})),data},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function inner(data){var placement=data.placement,basePlacement=placement.split("-")[0],_data$offsets=data.offsets,popper=_data$offsets.popper,reference=_data$offsets.reference,isHoriz=-1!==["left","right"].indexOf(basePlacement),subtractLength=-1===["top","left"].indexOf(basePlacement);return popper[isHoriz?"left":"top"]=reference[basePlacement]-(subtractLength?popper[isHoriz?"width":"height"]:0),data.placement=getOppositePlacement(placement),data.offsets.popper=getClientRect(popper),data}},hide:{order:800,enabled:!0,fn:function hide(data){if(!isModifierRequired(data.instance.modifiers,"hide","preventOverflow"))return data;var refRect=data.offsets.reference,bound=find(data.instance.modifiers,(function(modifier){return"preventOverflow"===modifier.name})).boundaries;if(refRect.bottom<bound.top||refRect.left>bound.right||refRect.top>bound.bottom||refRect.right<bound.left){if(!0===data.hide)return data;data.hide=!0,data.attributes["x-out-of-boundaries"]=""}else{if(!1===data.hide)return data;data.hide=!1,data.attributes["x-out-of-boundaries"]=!1}return data}},computeStyle:{order:850,enabled:!0,fn:function computeStyle(data,options){var x=options.x,y=options.y,popper=data.offsets.popper,legacyGpuAccelerationOption=find(data.instance.modifiers,(function(modifier){return"applyStyle"===modifier.name})).gpuAcceleration;void 0!==legacyGpuAccelerationOption&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var gpuAcceleration=void 0!==legacyGpuAccelerationOption?legacyGpuAccelerationOption:options.gpuAcceleration,offsetParentRect=getBoundingClientRect(getOffsetParent(data.instance.popper)),styles={position:popper.position},offsets={left:Math.floor(popper.left),top:Math.round(popper.top),bottom:Math.round(popper.bottom),right:Math.floor(popper.right)},sideA="bottom"===x?"top":"bottom",sideB="right"===y?"left":"right",prefixedProperty=getSupportedPropertyName("transform"),left=void 0,top=void 0;if(top="bottom"===sideA?-offsetParentRect.height+offsets.bottom:offsets.top,left="right"===sideB?-offsetParentRect.width+offsets.right:offsets.left,gpuAcceleration&&prefixedProperty)styles[prefixedProperty]="translate3d("+left+"px, "+top+"px, 0)",styles[sideA]=0,styles[sideB]=0,styles.willChange="transform";else{var invertTop="bottom"===sideA?-1:1,invertLeft="right"===sideB?-1:1;styles[sideA]=top*invertTop,styles[sideB]=left*invertLeft,styles.willChange=sideA+", "+sideB}var attributes={"x-placement":data.placement};return data.attributes=popper_extends({},attributes,data.attributes),data.styles=popper_extends({},styles,data.styles),data.arrowStyles=popper_extends({},data.offsets.arrow,data.arrowStyles),data},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function applyStyle(data){return setStyles(data.instance.popper,data.styles),function setAttributes(element,attributes){Object.keys(attributes).forEach((function(prop){!1!==attributes[prop]?element.setAttribute(prop,attributes[prop]):element.removeAttribute(prop)}))}(data.instance.popper,data.attributes),data.arrowElement&&Object.keys(data.arrowStyles).length&&setStyles(data.arrowElement,data.arrowStyles),data},onLoad:function applyStyleOnLoad(reference,popper,options,modifierOptions,state){var referenceOffsets=getReferenceOffsets(state,popper,reference,options.positionFixed),placement=computeAutoPlacement(options.placement,referenceOffsets,popper,reference,options.modifiers.flip.boundariesElement,options.modifiers.flip.padding);return popper.setAttribute("x-placement",placement),setStyles(popper,{position:options.positionFixed?"fixed":"absolute"}),options},gpuAcceleration:void 0}},Defaults={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function onCreate(){},onUpdate:function onUpdate(){},modifiers},Popper=function(){function Popper(reference,popper){var _this=this,options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Popper),this.scheduleUpdate=function(){return requestAnimationFrame(_this.update)},this.update=debounce(this.update.bind(this)),this.options=popper_extends({},Popper.Defaults,options),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=reference&&reference.jquery?reference[0]:reference,this.popper=popper&&popper.jquery?popper[0]:popper,this.options.modifiers={},Object.keys(popper_extends({},Popper.Defaults.modifiers,options.modifiers)).forEach((function(name){_this.options.modifiers[name]=popper_extends({},Popper.Defaults.modifiers[name]||{},options.modifiers?options.modifiers[name]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(name){return popper_extends({name},_this.options.modifiers[name])})).sort((function(a,b){return a.order-b.order})),this.modifiers.forEach((function(modifierOptions){modifierOptions.enabled&&isFunction(modifierOptions.onLoad)&&modifierOptions.onLoad(_this.reference,_this.popper,_this.options,modifierOptions,_this.state)})),this.update();var eventsEnabled=this.options.eventsEnabled;eventsEnabled&&this.enableEventListeners(),this.state.eventsEnabled=eventsEnabled}return createClass(Popper,[{key:"update",value:function update$$1(){return update.call(this)}},{key:"destroy",value:function destroy$$1(){return destroy.call(this)}},{key:"enableEventListeners",value:function enableEventListeners$$1(){return enableEventListeners.call(this)}},{key:"disableEventListeners",value:function disableEventListeners$$1(){return disableEventListeners.call(this)}}]),Popper}();Popper.Utils=("undefined"!=typeof window?window:__webpack_require__.g).PopperUtils,Popper.placements=placements,Popper.Defaults=Defaults;const popper=Popper;var Popper_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},Popper_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function Popper_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var Popper_placements=popper.placements,Popper_Popper=function(_Component){function Popper(){var _ref,_temp,_this;!function Popper_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Popper);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=Popper_possibleConstructorReturn(this,(_ref=Popper.__proto__||Object.getPrototypeOf(Popper)).call.apply(_ref,[this].concat(args))),_this.state={},_this._setArrowNode=function(node){_this._arrowNode=node},_this._getTargetNode=function(){if(_this.props.target)return _this.props.target;if(!_this.context.popperManager||!_this.context.popperManager.getTargetNode())throw new Error("Target missing. Popper must be given a target from the Popper Manager, or as a prop.");return _this.context.popperManager.getTargetNode()},_this._getOffsets=function(data){return Object.keys(data.offsets).map((function(key){return data.offsets[key]}))},_this._isDataDirty=function(data){return!_this.state.data||JSON.stringify(_this._getOffsets(_this.state.data))!==JSON.stringify(_this._getOffsets(data))},_this._updateStateModifier={enabled:!0,order:900,fn:function fn(data){return _this._isDataDirty(data)&&_this.setState({data}),data}},_this._getPopperStyle=function(){var data=_this.state.data;return _this._popper&&data?Popper_extends({position:data.offsets.popper.position},data.styles):{position:"absolute",pointerEvents:"none",opacity:0}},_this._getPopperPlacement=function(){return _this.state.data?_this.state.data.placement:void 0},_this._getPopperHide=function(){return _this.state.data&&_this.state.data.hide?"":void 0},_this._getArrowStyle=function(){if(_this.state.data&&_this.state.data.offsets.arrow){var _this$state$data$offs=_this.state.data.offsets.arrow;return{top:_this$state$data$offs.top,left:_this$state$data$offs.left}}return{}},_this._handlePopperRef=function(node){_this._popperNode=node,node?_this._createPopper():_this._destroyPopper(),_this.props.innerRef&&_this.props.innerRef(node)},_this._scheduleUpdate=function(){_this._popper&&_this._popper.scheduleUpdate()},Popper_possibleConstructorReturn(_this,_temp)}return function Popper_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Popper,_Component),Popper_createClass(Popper,[{key:"getChildContext",value:function getChildContext(){return{popper:{setArrowNode:this._setArrowNode,getArrowStyle:this._getArrowStyle}}}},{key:"componentDidUpdate",value:function componentDidUpdate(lastProps){lastProps.placement===this.props.placement&&lastProps.eventsEnabled===this.props.eventsEnabled&&lastProps.target===this.props.target||(this._destroyPopper(),this._createPopper()),lastProps.children!==this.props.children&&this._scheduleUpdate()}},{key:"componentWillUnmount",value:function componentWillUnmount(){this._destroyPopper()}},{key:"_createPopper",value:function _createPopper(){var _this2=this,_props=this.props,placement=_props.placement,eventsEnabled=_props.eventsEnabled,modifiers=Popper_extends({},this.props.modifiers,{applyStyle:{enabled:!1},updateState:this._updateStateModifier});this._arrowNode&&(modifiers.arrow=Popper_extends({},this.props.modifiers.arrow||{},{element:this._arrowNode})),this._popper=new popper(this._getTargetNode(),this._popperNode,{placement,eventsEnabled,modifiers}),setTimeout((function(){return _this2._scheduleUpdate()}))}},{key:"_destroyPopper",value:function _destroyPopper(){this._popper&&this._popper.destroy()}},{key:"render",value:function render(){var _props2=this.props,component=_props2.component,children=(_props2.innerRef,_props2.placement,_props2.eventsEnabled,_props2.modifiers,_props2.children),restProps=function Popper_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props2,["component","innerRef","placement","eventsEnabled","modifiers","children"]),popperStyle=this._getPopperStyle(),popperPlacement=this._getPopperPlacement(),popperHide=this._getPopperHide();if("function"==typeof children)return children({popperProps:{ref:this._handlePopperRef,style:popperStyle,"data-placement":popperPlacement,"data-x-out-of-boundaries":popperHide},restProps,scheduleUpdate:this._scheduleUpdate});var componentProps=Popper_extends({},restProps,{style:Popper_extends({},restProps.style,popperStyle),"data-placement":popperPlacement,"data-x-out-of-boundaries":popperHide});return"string"==typeof component?componentProps.ref=this._handlePopperRef:componentProps.innerRef=this._handlePopperRef,(0,react.createElement)(component,componentProps,children)}}]),Popper}(react.Component);Popper_Popper.contextTypes={popperManager:prop_types_default().object},Popper_Popper.childContextTypes={popper:prop_types_default().object.isRequired},Popper_Popper.propTypes={component:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func]),innerRef:prop_types_default().func,placement:prop_types_default().oneOf(Popper_placements),eventsEnabled:prop_types_default().bool,modifiers:prop_types_default().object,children:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func]),target:prop_types_default().oneOfType([prop_types_default().instanceOf("undefined"!=typeof Element?Element:Object),prop_types_default().shape({getBoundingClientRect:prop_types_default().func.isRequired,clientWidth:prop_types_default().number.isRequired,clientHeight:prop_types_default().number.isRequired})])},Popper_Popper.defaultProps={component:"div",placement:"bottom",eventsEnabled:!0,modifiers:{}};const lib_Popper=Popper_Popper;var Arrow_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};var Arrow=function Arrow(props,context){var _props$component=props.component,component=void 0===_props$component?"span":_props$component,innerRef=props.innerRef,children=props.children,restProps=function Arrow_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(props,["component","innerRef","children"]),popper=context.popper,arrowRef=function arrowRef(node){popper.setArrowNode(node),"function"==typeof innerRef&&innerRef(node)},arrowStyle=popper.getArrowStyle();if("function"==typeof children)return children({arrowProps:{ref:arrowRef,style:arrowStyle},restProps});var componentProps=Arrow_extends({},restProps,{style:Arrow_extends({},arrowStyle,restProps.style)});return"string"==typeof component?componentProps.ref=arrowRef:componentProps.innerRef=arrowRef,(0,react.createElement)(component,componentProps,children)};Arrow.contextTypes={popper:prop_types_default().object.isRequired},Arrow.propTypes={component:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func]),innerRef:prop_types_default().func,children:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().func])};var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},es_classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")},es_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),inherits=function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)},possibleConstructorReturn=function(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call};function generateYears(year,noOfYear,minDate,maxDate){for(var list=[],i=0;i<2*noOfYear+1;i++){var newYear=year+noOfYear-i,isInRange=!0;minDate&&(isInRange=minDate.year()<=newYear),maxDate&&isInRange&&(isInRange=maxDate.year()>=newYear),isInRange&&list.push(newYear)}return list}var YearDropdownOptions=function(_React$Component){function YearDropdownOptions(props){es_classCallCheck(this,YearDropdownOptions);var _this=possibleConstructorReturn(this,_React$Component.call(this,props));_this.renderOptions=function(){var selectedYear=_this.props.year,options=_this.state.yearsList.map((function(year){return react.createElement("div",{className:selectedYear===year?"react-datepicker__year-option react-datepicker__year-option--selected_year":"react-datepicker__year-option",key:year,ref:year,onClick:_this.onChange.bind(_this,year)},selectedYear===year?react.createElement("span",{className:"react-datepicker__year-option--selected"},"✓"):"",year)})),minYear=_this.props.minDate?_this.props.minDate.year():null,maxYear=_this.props.maxDate?_this.props.maxDate.year():null;return maxYear&&_this.state.yearsList.find((function(year){return year===maxYear}))||options.unshift(react.createElement("div",{className:"react-datepicker__year-option",ref:"upcoming",key:"upcoming",onClick:_this.incrementYears},react.createElement("a",{className:"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming"}))),minYear&&_this.state.yearsList.find((function(year){return year===minYear}))||options.push(react.createElement("div",{className:"react-datepicker__year-option",ref:"previous",key:"previous",onClick:_this.decrementYears},react.createElement("a",{className:"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous"}))),options},_this.onChange=function(year){_this.props.onChange(year)},_this.handleClickOutside=function(){_this.props.onCancel()},_this.shiftYears=function(amount){var years=_this.state.yearsList.map((function(year){return year+amount}));_this.setState({yearsList:years})},_this.incrementYears=function(){return _this.shiftYears(1)},_this.decrementYears=function(){return _this.shiftYears(-1)};var yearDropdownItemNumber=props.yearDropdownItemNumber,scrollableYearDropdown=props.scrollableYearDropdown,noOfYear=yearDropdownItemNumber||(scrollableYearDropdown?10:5);return _this.state={yearsList:generateYears(_this.props.year,noOfYear,_this.props.minDate,_this.props.maxDate)},_this}return inherits(YearDropdownOptions,_React$Component),YearDropdownOptions.prototype.render=function render(){var dropdownClass=classnames_default()({"react-datepicker__year-dropdown":!0,"react-datepicker__year-dropdown--scrollable":this.props.scrollableYearDropdown});return react.createElement("div",{className:dropdownClass},this.renderOptions())},YearDropdownOptions}(react.Component);YearDropdownOptions.propTypes={minDate:prop_types_default().object,maxDate:prop_types_default().object,onCancel:prop_types_default().func.isRequired,onChange:prop_types_default().func.isRequired,scrollableYearDropdown:prop_types_default().bool,year:prop_types_default().number.isRequired,yearDropdownItemNumber:prop_types_default().number};var dayOfWeekCodes={1:"mon",2:"tue",3:"wed",4:"thu",5:"fri",6:"sat",7:"sun"};function set$1(date,unit,to){return date.set(unit,to)}function add(date,amount,unit){return date.add(amount,unit)}function subtract(date,amount,unit){return date.subtract(amount,unit)}function get$1(date,unit){return date.get(unit)}function getStartOf(date,unit){return date.startOf(unit)}function newDate(point){return moment_default()(point)}function now(maybeFixedUtcOffset){return null==maybeFixedUtcOffset?newDate():function newDateWithOffset(utcOffset){return moment_default()().utc().utcOffset(utcOffset)}(maybeFixedUtcOffset)}function cloneDate(date){return date.clone()}function isMoment(date){return moment_default().isMoment(date)}function formatDate(date,format){return date.format(format)}function setTime(date,_ref3){var hour=_ref3.hour,minute=_ref3.minute,second=_ref3.second;return date.set({hour,minute,second}),date}function setMonth(date,month){return set$1(date,"month",month)}function setYear(date,year){return set$1(date,"year",year)}function getSecond(date){return get$1(date,"second")}function getMinute(date){return get$1(date,"minute")}function getHour(date){return get$1(date,"hour")}function getMonth(date){return get$1(date,"month")}function getYear(date){return get$1(date,"year")}function getDate(date){return get$1(date,"date")}function getStartOfWeek(date){return getStartOf(date,"week")}function getStartOfMonth(date){return getStartOf(date,"month")}function addMinutes(date,amount){return add(date,amount,"minutes")}function addDays(date,amount){return add(date,amount,"days")}function addWeeks(date,amount){return add(date,amount,"weeks")}function addMonths(date,amount){return add(date,amount,"months")}function subtractMonths(date,amount){return subtract(date,amount,"months")}function isBefore(date1,date2){return date1.isBefore(date2)}function isAfter(date1,date2){return date1.isAfter(date2)}function isSameYear(date1,date2){return date1&&date2?date1.isSame(date2,"year"):!date1&&!date2}function isSameMonth(date1,date2){return date1&&date2?date1.isSame(date2,"month"):!date1&&!date2}function isSameDay(moment1,moment2){return moment1&&moment2?moment1.isSame(moment2,"day"):!moment1&&!moment2}function isDayInRange(day,startDate,endDate){var before=startDate.clone().startOf("day").subtract(1,"seconds"),after=endDate.clone().startOf("day").add(1,"seconds");return day.clone().startOf("day").isBetween(before,after)}function localizeDate(date,locale){return date.clone().locale(locale||moment_default().locale())}function isDayDisabled(day){var _ref4=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},minDate=_ref4.minDate,maxDate=_ref4.maxDate,excludeDates=_ref4.excludeDates,includeDates=_ref4.includeDates,filterDate=_ref4.filterDate;return minDate&&day.isBefore(minDate,"day")||maxDate&&day.isAfter(maxDate,"day")||excludeDates&&excludeDates.some((function(excludeDate){return isSameDay(day,excludeDate)}))||includeDates&&!includeDates.some((function(includeDate){return isSameDay(day,includeDate)}))||filterDate&&!filterDate(day.clone())||!1}function isTimeDisabled(time,disabledTimes){for(var l=disabledTimes.length,i=0;i<l;i++)if(disabledTimes[i].get("hours")===time.get("hours")&&disabledTimes[i].get("minutes")===time.get("minutes"))return!0;return!1}function isTimeInDisabledRange(time,_ref5){var minTime=_ref5.minTime,maxTime=_ref5.maxTime;if(!minTime||!maxTime)throw new Error("Both minTime and maxTime props required");var base=moment_default()().hours(0).minutes(0).seconds(0),baseTime=base.clone().hours(time.get("hours")).minutes(time.get("minutes")),min=base.clone().hours(minTime.get("hours")).minutes(minTime.get("minutes")),max=base.clone().hours(maxTime.get("hours")).minutes(maxTime.get("minutes"));return!(baseTime.isSameOrAfter(min)&&baseTime.isSameOrBefore(max))}function getEffectiveMinDate(_ref8){var minDate=_ref8.minDate,includeDates=_ref8.includeDates;return includeDates&&minDate?moment_default().min(includeDates.filter((function(includeDate){return minDate.isSameOrBefore(includeDate,"day")}))):includeDates?moment_default().min(includeDates):minDate}function getEffectiveMaxDate(_ref9){var maxDate=_ref9.maxDate,includeDates=_ref9.includeDates;return includeDates&&maxDate?moment_default().max(includeDates.filter((function(includeDate){return maxDate.isSameOrAfter(includeDate,"day")}))):includeDates?moment_default().max(includeDates):maxDate}function getHightLightDaysMap(){for(var highlightDates=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],defaultClassName=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"react-datepicker__day--highlighted",dateClasses=new Map,i=0,len=highlightDates.length;i<len;i++){var obj=highlightDates[i];if(isMoment(obj)){var key=obj.format("MM.DD.YYYY"),classNamesArr=dateClasses.get(key)||[];classNamesArr.includes(defaultClassName)||(classNamesArr.push(defaultClassName),dateClasses.set(key,classNamesArr))}else if("object"===(void 0===obj?"undefined":_typeof(obj))){var keys=Object.keys(obj),className=keys[0],arrOfMoments=obj[keys[0]];if("string"==typeof className&&arrOfMoments.constructor===Array)for(var k=0,_len=arrOfMoments.length;k<_len;k++){var _key=arrOfMoments[k].format("MM.DD.YYYY"),_classNamesArr=dateClasses.get(_key)||[];_classNamesArr.includes(className)||(_classNamesArr.push(className),dateClasses.set(_key,_classNamesArr))}}}return dateClasses}function timesToInjectAfter(startOfDay,currentTime,currentMultiplier,intervals,injectedTimes){for(var date,amount,l=injectedTimes.length,times=[],i=0;i<l;i++){var injectedTime=addMinutes((date=cloneDate(startOfDay),amount=getHour(injectedTimes[i]),add(date,amount,"hours")),getMinute(injectedTimes[i])),nextTime=addMinutes(cloneDate(startOfDay),(currentMultiplier+1)*intervals);injectedTime.isBetween(currentTime,nextTime)&&times.push(injectedTimes[i])}return times}var WrappedYearDropdownOptions=react_onclickoutside_es(YearDropdownOptions),YearDropdown=function(_React$Component){function YearDropdown(){var _temp,_this;es_classCallCheck(this,YearDropdown);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.state={dropdownVisible:!1},_this.renderSelectOptions=function(){for(var minYear=_this.props.minDate?getYear(_this.props.minDate):1900,maxYear=_this.props.maxDate?getYear(_this.props.maxDate):2100,options=[],i=minYear;i<=maxYear;i++)options.push(react.createElement("option",{key:i,value:i},i));return options},_this.onSelectChange=function(e){_this.onChange(e.target.value)},_this.renderSelectMode=function(){return react.createElement("select",{value:_this.props.year,className:"react-datepicker__year-select",onChange:_this.onSelectChange},_this.renderSelectOptions())},_this.renderReadView=function(visible){return react.createElement("div",{key:"read",style:{visibility:visible?"visible":"hidden"},className:"react-datepicker__year-read-view",onClick:function onClick(event){return _this.toggleDropdown(event)}},react.createElement("span",{className:"react-datepicker__year-read-view--down-arrow"}),react.createElement("span",{className:"react-datepicker__year-read-view--selected-year"},_this.props.year))},_this.renderDropdown=function(){return react.createElement(WrappedYearDropdownOptions,{key:"dropdown",ref:"options",year:_this.props.year,onChange:_this.onChange,onCancel:_this.toggleDropdown,minDate:_this.props.minDate,maxDate:_this.props.maxDate,scrollableYearDropdown:_this.props.scrollableYearDropdown,yearDropdownItemNumber:_this.props.yearDropdownItemNumber})},_this.renderScrollMode=function(){var dropdownVisible=_this.state.dropdownVisible,result=[_this.renderReadView(!dropdownVisible)];return dropdownVisible&&result.unshift(_this.renderDropdown()),result},_this.onChange=function(year){_this.toggleDropdown(),year!==_this.props.year&&_this.props.onChange(year)},_this.toggleDropdown=function(event){_this.setState({dropdownVisible:!_this.state.dropdownVisible},(function(){_this.props.adjustDateOnChange&&_this.handleYearChange(_this.props.date,event)}))},_this.handleYearChange=function(date,event){_this.onSelect(date,event),_this.setOpen()},_this.onSelect=function(date,event){_this.props.onSelect&&_this.props.onSelect(date,event)},_this.setOpen=function(){_this.props.setOpen&&_this.props.setOpen(!0)},possibleConstructorReturn(_this,_temp)}return inherits(YearDropdown,_React$Component),YearDropdown.prototype.render=function render(){var renderedDropdown=void 0;switch(this.props.dropdownMode){case"scroll":renderedDropdown=this.renderScrollMode();break;case"select":renderedDropdown=this.renderSelectMode()}return react.createElement("div",{className:"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--"+this.props.dropdownMode},renderedDropdown)},YearDropdown}(react.Component);YearDropdown.propTypes={adjustDateOnChange:prop_types_default().bool,dropdownMode:prop_types_default().oneOf(["scroll","select"]).isRequired,maxDate:prop_types_default().object,minDate:prop_types_default().object,onChange:prop_types_default().func.isRequired,scrollableYearDropdown:prop_types_default().bool,year:prop_types_default().number.isRequired,yearDropdownItemNumber:prop_types_default().number,date:prop_types_default().object,onSelect:prop_types_default().func,setOpen:prop_types_default().func};var MonthDropdownOptions=function(_React$Component){function MonthDropdownOptions(){var _temp,_this;es_classCallCheck(this,MonthDropdownOptions);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.renderOptions=function(){return _this.props.monthNames.map((function(month,i){return react.createElement("div",{className:_this.props.month===i?"react-datepicker__month-option --selected_month":"react-datepicker__month-option",key:month,ref:month,onClick:_this.onChange.bind(_this,i)},_this.props.month===i?react.createElement("span",{className:"react-datepicker__month-option--selected"},"✓"):"",month)}))},_this.onChange=function(month){return _this.props.onChange(month)},_this.handleClickOutside=function(){return _this.props.onCancel()},possibleConstructorReturn(_this,_temp)}return inherits(MonthDropdownOptions,_React$Component),MonthDropdownOptions.prototype.render=function render(){return react.createElement("div",{className:"react-datepicker__month-dropdown"},this.renderOptions())},MonthDropdownOptions}(react.Component);MonthDropdownOptions.propTypes={onCancel:prop_types_default().func.isRequired,onChange:prop_types_default().func.isRequired,month:prop_types_default().number.isRequired,monthNames:prop_types_default().arrayOf(prop_types_default().string.isRequired).isRequired};var WrappedMonthDropdownOptions=react_onclickoutside_es(MonthDropdownOptions),MonthDropdown=function(_React$Component){function MonthDropdown(){var _temp,_this;es_classCallCheck(this,MonthDropdown);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.state={dropdownVisible:!1},_this.renderSelectOptions=function(monthNames){return monthNames.map((function(M,i){return react.createElement("option",{key:i,value:i},M)}))},_this.renderSelectMode=function(monthNames){return react.createElement("select",{value:_this.props.month,className:"react-datepicker__month-select",onChange:function onChange(e){return _this.onChange(e.target.value)}},_this.renderSelectOptions(monthNames))},_this.renderReadView=function(visible,monthNames){return react.createElement("div",{key:"read",style:{visibility:visible?"visible":"hidden"},className:"react-datepicker__month-read-view",onClick:_this.toggleDropdown},react.createElement("span",{className:"react-datepicker__month-read-view--down-arrow"}),react.createElement("span",{className:"react-datepicker__month-read-view--selected-month"},monthNames[_this.props.month]))},_this.renderDropdown=function(monthNames){return react.createElement(WrappedMonthDropdownOptions,{key:"dropdown",ref:"options",month:_this.props.month,monthNames,onChange:_this.onChange,onCancel:_this.toggleDropdown})},_this.renderScrollMode=function(monthNames){var dropdownVisible=_this.state.dropdownVisible,result=[_this.renderReadView(!dropdownVisible,monthNames)];return dropdownVisible&&result.unshift(_this.renderDropdown(monthNames)),result},_this.onChange=function(month){_this.toggleDropdown(),month!==_this.props.month&&_this.props.onChange(month)},_this.toggleDropdown=function(){return _this.setState({dropdownVisible:!_this.state.dropdownVisible})},possibleConstructorReturn(_this,_temp)}return inherits(MonthDropdown,_React$Component),MonthDropdown.prototype.render=function render(){var _this2=this,localeData=function getLocaleDataForLocale(locale){return moment_default().localeData(locale)}(this.props.locale),monthNames=[0,1,2,3,4,5,6,7,8,9,10,11].map(this.props.useShortMonthInDropdown?function(M){return function getMonthShortInLocale(locale,date){return locale.monthsShort(date)}(localeData,newDate({M}))}:function(M){return function getMonthInLocale(locale,date,format){return locale.months(date,format)}(localeData,newDate({M}),_this2.props.dateFormat)}),renderedDropdown=void 0;switch(this.props.dropdownMode){case"scroll":renderedDropdown=this.renderScrollMode(monthNames);break;case"select":renderedDropdown=this.renderSelectMode(monthNames)}return react.createElement("div",{className:"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--"+this.props.dropdownMode},renderedDropdown)},MonthDropdown}(react.Component);function generateMonthYears(minDate,maxDate){for(var list=[],currDate=getStartOfMonth(cloneDate(minDate)),lastDate=getStartOfMonth(cloneDate(maxDate));!isAfter(currDate,lastDate);)list.push(cloneDate(currDate)),addMonths(currDate,1);return list}MonthDropdown.propTypes={dropdownMode:prop_types_default().oneOf(["scroll","select"]).isRequired,locale:prop_types_default().string,dateFormat:prop_types_default().string.isRequired,month:prop_types_default().number.isRequired,onChange:prop_types_default().func.isRequired,useShortMonthInDropdown:prop_types_default().bool};var MonthYearDropdownOptions=function(_React$Component){function MonthYearDropdownOptions(props){es_classCallCheck(this,MonthYearDropdownOptions);var _this=possibleConstructorReturn(this,_React$Component.call(this,props));return _this.renderOptions=function(){return _this.state.monthYearsList.map((function(monthYear){var monthYearPoint=monthYear.valueOf(),isSameMonthYear=isSameYear(_this.props.date,monthYear)&&isSameMonth(_this.props.date,monthYear);return react.createElement("div",{className:isSameMonthYear?"react-datepicker__month-year-option --selected_month-year":"react-datepicker__month-year-option",key:monthYearPoint,ref:monthYearPoint,onClick:_this.onChange.bind(_this,monthYearPoint)},isSameMonthYear?react.createElement("span",{className:"react-datepicker__month-year-option--selected"},"✓"):"",formatDate(monthYear,_this.props.dateFormat))}))},_this.onChange=function(monthYear){return _this.props.onChange(monthYear)},_this.handleClickOutside=function(){_this.props.onCancel()},_this.state={monthYearsList:generateMonthYears(_this.props.minDate,_this.props.maxDate)},_this}return inherits(MonthYearDropdownOptions,_React$Component),MonthYearDropdownOptions.prototype.render=function render(){var dropdownClass=classnames_default()({"react-datepicker__month-year-dropdown":!0,"react-datepicker__month-year-dropdown--scrollable":this.props.scrollableMonthYearDropdown});return react.createElement("div",{className:dropdownClass},this.renderOptions())},MonthYearDropdownOptions}(react.Component);MonthYearDropdownOptions.propTypes={minDate:prop_types_default().object.isRequired,maxDate:prop_types_default().object.isRequired,onCancel:prop_types_default().func.isRequired,onChange:prop_types_default().func.isRequired,scrollableMonthYearDropdown:prop_types_default().bool,date:prop_types_default().object.isRequired,dateFormat:prop_types_default().string.isRequired};var WrappedMonthYearDropdownOptions=react_onclickoutside_es(MonthYearDropdownOptions),MonthYearDropdown=function(_React$Component){function MonthYearDropdown(){var _temp,_this;es_classCallCheck(this,MonthYearDropdown);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.state={dropdownVisible:!1},_this.renderSelectOptions=function(){for(var currDate=getStartOfMonth(localizeDate(_this.props.minDate,_this.props.locale)),lastDate=getStartOfMonth(localizeDate(_this.props.maxDate,_this.props.locale)),options=[];!isAfter(currDate,lastDate);){var timepoint=currDate.valueOf();options.push(react.createElement("option",{key:timepoint,value:timepoint},formatDate(currDate,_this.props.dateFormat))),addMonths(currDate,1)}return options},_this.onSelectChange=function(e){_this.onChange(e.target.value)},_this.renderSelectMode=function(){return react.createElement("select",{value:getStartOfMonth(_this.props.date).valueOf(),className:"react-datepicker__month-year-select",onChange:_this.onSelectChange},_this.renderSelectOptions())},_this.renderReadView=function(visible){var yearMonth=formatDate(localizeDate(newDate(_this.props.date),_this.props.locale),_this.props.dateFormat);return react.createElement("div",{key:"read",style:{visibility:visible?"visible":"hidden"},className:"react-datepicker__month-year-read-view",onClick:function onClick(event){return _this.toggleDropdown(event)}},react.createElement("span",{className:"react-datepicker__month-year-read-view--down-arrow"}),react.createElement("span",{className:"react-datepicker__month-year-read-view--selected-month-year"},yearMonth))},_this.renderDropdown=function(){return react.createElement(WrappedMonthYearDropdownOptions,{key:"dropdown",ref:"options",date:_this.props.date,dateFormat:_this.props.dateFormat,onChange:_this.onChange,onCancel:_this.toggleDropdown,minDate:localizeDate(_this.props.minDate,_this.props.locale),maxDate:localizeDate(_this.props.maxDate,_this.props.locale),scrollableMonthYearDropdown:_this.props.scrollableMonthYearDropdown})},_this.renderScrollMode=function(){var dropdownVisible=_this.state.dropdownVisible,result=[_this.renderReadView(!dropdownVisible)];return dropdownVisible&&result.unshift(_this.renderDropdown()),result},_this.onChange=function(monthYearPoint){_this.toggleDropdown();var changedDate=newDate(parseInt(monthYearPoint));isSameYear(_this.props.date,changedDate)&&isSameMonth(_this.props.date,changedDate)||_this.props.onChange(changedDate)},_this.toggleDropdown=function(){return _this.setState({dropdownVisible:!_this.state.dropdownVisible})},possibleConstructorReturn(_this,_temp)}return inherits(MonthYearDropdown,_React$Component),MonthYearDropdown.prototype.render=function render(){var renderedDropdown=void 0;switch(this.props.dropdownMode){case"scroll":renderedDropdown=this.renderScrollMode();break;case"select":renderedDropdown=this.renderSelectMode()}return react.createElement("div",{className:"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--"+this.props.dropdownMode},renderedDropdown)},MonthYearDropdown}(react.Component);MonthYearDropdown.propTypes={dropdownMode:prop_types_default().oneOf(["scroll","select"]).isRequired,dateFormat:prop_types_default().string.isRequired,locale:prop_types_default().string,maxDate:prop_types_default().object.isRequired,minDate:prop_types_default().object.isRequired,date:prop_types_default().object.isRequired,onChange:prop_types_default().func.isRequired,scrollableMonthYearDropdown:prop_types_default().bool};var Day=function(_React$Component){function Day(){var _temp,_this;es_classCallCheck(this,Day);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.handleClick=function(event){!_this.isDisabled()&&_this.props.onClick&&_this.props.onClick(event)},_this.handleMouseEnter=function(event){!_this.isDisabled()&&_this.props.onMouseEnter&&_this.props.onMouseEnter(event)},_this.isSameDay=function(other){return isSameDay(_this.props.day,other)},_this.isKeyboardSelected=function(){return!_this.props.inline&&!_this.isSameDay(_this.props.selected)&&_this.isSameDay(_this.props.preSelection)},_this.isDisabled=function(){return isDayDisabled(_this.props.day,_this.props)},_this.getHighLightedClass=function(defaultClassName){var _this$props=_this.props,day=_this$props.day,highlightDates=_this$props.highlightDates;if(!highlightDates)return!1;var dayStr=day.format("MM.DD.YYYY");return highlightDates.get(dayStr)},_this.isInRange=function(){var _this$props2=_this.props,day=_this$props2.day,startDate=_this$props2.startDate,endDate=_this$props2.endDate;return!(!startDate||!endDate)&&isDayInRange(day,startDate,endDate)},_this.isInSelectingRange=function(){var _this$props3=_this.props,day=_this$props3.day,selectsStart=_this$props3.selectsStart,selectsEnd=_this$props3.selectsEnd,selectingDate=_this$props3.selectingDate,startDate=_this$props3.startDate,endDate=_this$props3.endDate;return!(!selectsStart&&!selectsEnd||!selectingDate||_this.isDisabled())&&(selectsStart&&endDate&&selectingDate.isSameOrBefore(endDate)?isDayInRange(day,selectingDate,endDate):!!(selectsEnd&&startDate&&selectingDate.isSameOrAfter(startDate))&&isDayInRange(day,startDate,selectingDate))},_this.isSelectingRangeStart=function(){if(!_this.isInSelectingRange())return!1;var _this$props4=_this.props,day=_this$props4.day,selectingDate=_this$props4.selectingDate,startDate=_this$props4.startDate;return isSameDay(day,_this$props4.selectsStart?selectingDate:startDate)},_this.isSelectingRangeEnd=function(){if(!_this.isInSelectingRange())return!1;var _this$props5=_this.props,day=_this$props5.day,selectingDate=_this$props5.selectingDate,endDate=_this$props5.endDate;return isSameDay(day,_this$props5.selectsEnd?selectingDate:endDate)},_this.isRangeStart=function(){var _this$props6=_this.props,day=_this$props6.day,startDate=_this$props6.startDate,endDate=_this$props6.endDate;return!(!startDate||!endDate)&&isSameDay(startDate,day)},_this.isRangeEnd=function(){var _this$props7=_this.props,day=_this$props7.day,startDate=_this$props7.startDate,endDate=_this$props7.endDate;return!(!startDate||!endDate)&&isSameDay(endDate,day)},_this.isWeekend=function(){var weekday=function getDay(date){return get$1(date,"day")}(_this.props.day);return 0===weekday||6===weekday},_this.isOutsideMonth=function(){return void 0!==_this.props.month&&_this.props.month!==getMonth(_this.props.day)},_this.getClassNames=function(date){var dayClassName=_this.props.dayClassName?_this.props.dayClassName(date):void 0;return classnames_default()("react-datepicker__day",dayClassName,"react-datepicker__day--"+function getDayOfWeekCode(day){return dayOfWeekCodes[day.isoWeekday()]}(_this.props.day),{"react-datepicker__day--disabled":_this.isDisabled(),"react-datepicker__day--selected":_this.isSameDay(_this.props.selected),"react-datepicker__day--keyboard-selected":_this.isKeyboardSelected(),"react-datepicker__day--range-start":_this.isRangeStart(),"react-datepicker__day--range-end":_this.isRangeEnd(),"react-datepicker__day--in-range":_this.isInRange(),"react-datepicker__day--in-selecting-range":_this.isInSelectingRange(),"react-datepicker__day--selecting-range-start":_this.isSelectingRangeStart(),"react-datepicker__day--selecting-range-end":_this.isSelectingRangeEnd(),"react-datepicker__day--today":_this.isSameDay(now(_this.props.utcOffset)),"react-datepicker__day--weekend":_this.isWeekend(),"react-datepicker__day--outside-month":_this.isOutsideMonth()},_this.getHighLightedClass("react-datepicker__day--highlighted"))},possibleConstructorReturn(_this,_temp)}return inherits(Day,_React$Component),Day.prototype.render=function render(){return react.createElement("div",{className:this.getClassNames(this.props.day),onClick:this.handleClick,onMouseEnter:this.handleMouseEnter,"aria-label":"day-"+getDate(this.props.day),role:"option"},getDate(this.props.day))},Day}(react.Component);Day.propTypes={day:prop_types_default().object.isRequired,dayClassName:prop_types_default().func,endDate:prop_types_default().object,highlightDates:prop_types_default().instanceOf(Map),inline:prop_types_default().bool,month:prop_types_default().number,onClick:prop_types_default().func,onMouseEnter:prop_types_default().func,preSelection:prop_types_default().object,selected:prop_types_default().object,selectingDate:prop_types_default().object,selectsEnd:prop_types_default().bool,selectsStart:prop_types_default().bool,startDate:prop_types_default().object,utcOffset:prop_types_default().number};var WeekNumber=function(_React$Component){function WeekNumber(){var _temp,_this;es_classCallCheck(this,WeekNumber);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.handleClick=function(event){_this.props.onClick&&_this.props.onClick(event)},possibleConstructorReturn(_this,_temp)}return inherits(WeekNumber,_React$Component),WeekNumber.prototype.render=function render(){var weekNumberClasses={"react-datepicker__week-number":!0,"react-datepicker__week-number--clickable":!!this.props.onClick};return react.createElement("div",{className:classnames_default()(weekNumberClasses),"aria-label":"week-"+this.props.weekNumber,onClick:this.handleClick},this.props.weekNumber)},WeekNumber}(react.Component);WeekNumber.propTypes={weekNumber:prop_types_default().number.isRequired,onClick:prop_types_default().func};var Week=function(_React$Component){function Week(){var _temp,_this;es_classCallCheck(this,Week);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.handleDayClick=function(day,event){_this.props.onDayClick&&_this.props.onDayClick(day,event)},_this.handleDayMouseEnter=function(day){_this.props.onDayMouseEnter&&_this.props.onDayMouseEnter(day)},_this.handleWeekClick=function(day,weekNumber,event){"function"==typeof _this.props.onWeekSelect&&_this.props.onWeekSelect(day,weekNumber,event)},_this.formatWeekNumber=function(startOfWeek){return _this.props.formatWeekNumber?_this.props.formatWeekNumber(startOfWeek):function getWeek(date){return get$1(date,"week")}(startOfWeek)},_this.renderDays=function(){var startOfWeek=getStartOfWeek(cloneDate(_this.props.day)),days=[],weekNumber=_this.formatWeekNumber(startOfWeek);if(_this.props.showWeekNumber){var onClickAction=_this.props.onWeekSelect?_this.handleWeekClick.bind(_this,startOfWeek,weekNumber):void 0;days.push(react.createElement(WeekNumber,{key:"W",weekNumber,onClick:onClickAction}))}return days.concat([0,1,2,3,4,5,6].map((function(offset){var day=addDays(cloneDate(startOfWeek),offset);return react.createElement(Day,{key:offset,day,month:_this.props.month,onClick:_this.handleDayClick.bind(_this,day),onMouseEnter:_this.handleDayMouseEnter.bind(_this,day),minDate:_this.props.minDate,maxDate:_this.props.maxDate,excludeDates:_this.props.excludeDates,includeDates:_this.props.includeDates,inline:_this.props.inline,highlightDates:_this.props.highlightDates,selectingDate:_this.props.selectingDate,filterDate:_this.props.filterDate,preSelection:_this.props.preSelection,selected:_this.props.selected,selectsStart:_this.props.selectsStart,selectsEnd:_this.props.selectsEnd,startDate:_this.props.startDate,endDate:_this.props.endDate,dayClassName:_this.props.dayClassName,utcOffset:_this.props.utcOffset})})))},possibleConstructorReturn(_this,_temp)}return inherits(Week,_React$Component),Week.prototype.render=function render(){return react.createElement("div",{className:"react-datepicker__week"},this.renderDays())},Week}(react.Component);Week.propTypes={day:prop_types_default().object.isRequired,dayClassName:prop_types_default().func,endDate:prop_types_default().object,excludeDates:prop_types_default().array,filterDate:prop_types_default().func,formatWeekNumber:prop_types_default().func,highlightDates:prop_types_default().instanceOf(Map),includeDates:prop_types_default().array,inline:prop_types_default().bool,maxDate:prop_types_default().object,minDate:prop_types_default().object,month:prop_types_default().number,onDayClick:prop_types_default().func,onDayMouseEnter:prop_types_default().func,onWeekSelect:prop_types_default().func,preSelection:prop_types_default().object,selected:prop_types_default().object,selectingDate:prop_types_default().object,selectsEnd:prop_types_default().bool,selectsStart:prop_types_default().bool,showWeekNumber:prop_types_default().bool,startDate:prop_types_default().object,utcOffset:prop_types_default().number};var Month=function(_React$Component){function Month(){var _temp,_this;es_classCallCheck(this,Month);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.handleDayClick=function(day,event){_this.props.onDayClick&&_this.props.onDayClick(day,event)},_this.handleDayMouseEnter=function(day){_this.props.onDayMouseEnter&&_this.props.onDayMouseEnter(day)},_this.handleMouseLeave=function(){_this.props.onMouseLeave&&_this.props.onMouseLeave()},_this.isWeekInMonth=function(startOfWeek){var day=_this.props.day,endOfWeek=addDays(cloneDate(startOfWeek),6);return isSameMonth(startOfWeek,day)||isSameMonth(endOfWeek,day)},_this.renderWeeks=function(){for(var weeks=[],isFixedHeight=_this.props.fixedHeight,currentWeekStart=getStartOfWeek(getStartOfMonth(cloneDate(_this.props.day))),i=0,breakAfterNextPush=!1;weeks.push(react.createElement(Week,{key:i,day:currentWeekStart,month:getMonth(_this.props.day),onDayClick:_this.handleDayClick,onDayMouseEnter:_this.handleDayMouseEnter,onWeekSelect:_this.props.onWeekSelect,formatWeekNumber:_this.props.formatWeekNumber,minDate:_this.props.minDate,maxDate:_this.props.maxDate,excludeDates:_this.props.excludeDates,includeDates:_this.props.includeDates,inline:_this.props.inline,highlightDates:_this.props.highlightDates,selectingDate:_this.props.selectingDate,filterDate:_this.props.filterDate,preSelection:_this.props.preSelection,selected:_this.props.selected,selectsStart:_this.props.selectsStart,selectsEnd:_this.props.selectsEnd,showWeekNumber:_this.props.showWeekNumbers,startDate:_this.props.startDate,endDate:_this.props.endDate,dayClassName:_this.props.dayClassName,utcOffset:_this.props.utcOffset})),!breakAfterNextPush;){i++,currentWeekStart=addWeeks(cloneDate(currentWeekStart),1);var isFixedAndFinalWeek=isFixedHeight&&i>=6,isNonFixedAndOutOfMonth=!isFixedHeight&&!_this.isWeekInMonth(currentWeekStart);if(isFixedAndFinalWeek||isNonFixedAndOutOfMonth){if(!_this.props.peekNextMonth)break;breakAfterNextPush=!0}}return weeks},_this.getClassNames=function(){var _this$props=_this.props,selectingDate=_this$props.selectingDate,selectsStart=_this$props.selectsStart,selectsEnd=_this$props.selectsEnd;return classnames_default()("react-datepicker__month",{"react-datepicker__month--selecting-range":selectingDate&&(selectsStart||selectsEnd)})},possibleConstructorReturn(_this,_temp)}return inherits(Month,_React$Component),Month.prototype.render=function render(){return react.createElement("div",{className:this.getClassNames(),onMouseLeave:this.handleMouseLeave,role:"listbox"},this.renderWeeks())},Month}(react.Component);Month.propTypes={day:prop_types_default().object.isRequired,dayClassName:prop_types_default().func,endDate:prop_types_default().object,excludeDates:prop_types_default().array,filterDate:prop_types_default().func,fixedHeight:prop_types_default().bool,formatWeekNumber:prop_types_default().func,highlightDates:prop_types_default().instanceOf(Map),includeDates:prop_types_default().array,inline:prop_types_default().bool,maxDate:prop_types_default().object,minDate:prop_types_default().object,onDayClick:prop_types_default().func,onDayMouseEnter:prop_types_default().func,onMouseLeave:prop_types_default().func,onWeekSelect:prop_types_default().func,peekNextMonth:prop_types_default().bool,preSelection:prop_types_default().object,selected:prop_types_default().object,selectingDate:prop_types_default().object,selectsEnd:prop_types_default().bool,selectsStart:prop_types_default().bool,showWeekNumbers:prop_types_default().bool,startDate:prop_types_default().object,utcOffset:prop_types_default().number};var Time=function(_React$Component){function Time(){var _temp,_this;es_classCallCheck(this,Time);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.handleClick=function(time){(_this.props.minTime||_this.props.maxTime)&&isTimeInDisabledRange(time,_this.props)||_this.props.excludeTimes&&isTimeDisabled(time,_this.props.excludeTimes)||_this.props.includeTimes&&!isTimeDisabled(time,_this.props.includeTimes)||_this.props.onChange(time)},_this.liClasses=function(time,currH,currM){var classes=["react-datepicker__time-list-item"];return currH===getHour(time)&&currM===getMinute(time)&&classes.push("react-datepicker__time-list-item--selected"),((_this.props.minTime||_this.props.maxTime)&&isTimeInDisabledRange(time,_this.props)||_this.props.excludeTimes&&isTimeDisabled(time,_this.props.excludeTimes)||_this.props.includeTimes&&!isTimeDisabled(time,_this.props.includeTimes))&&classes.push("react-datepicker__time-list-item--disabled"),_this.props.injectTimes&&(60*getHour(time)+getMinute(time))%_this.props.intervals!=0&&classes.push("react-datepicker__time-list-item--injected"),classes.join(" ")},_this.renderTimes=function(){for(var times=[],format=_this.props.format?_this.props.format:"hh:mm A",intervals=_this.props.intervals,activeTime=_this.props.selected?_this.props.selected:newDate(),currH=getHour(activeTime),currM=getMinute(activeTime),base=function getStartOfDay(date){return getStartOf(date,"day")}(newDate()),multiplier=1440/intervals,sortedInjectTimes=_this.props.injectTimes&&_this.props.injectTimes.sort((function(a,b){return a-b})),i=0;i<multiplier;i++){var currentTime=addMinutes(cloneDate(base),i*intervals);if(times.push(currentTime),sortedInjectTimes){var timesToInject=timesToInjectAfter(base,currentTime,i,intervals,sortedInjectTimes);times=times.concat(timesToInject)}}return times.map((function(time,i){return react.createElement("li",{key:i,onClick:_this.handleClick.bind(_this,time),className:_this.liClasses(time,currH,currM)},formatDate(time,format))}))},possibleConstructorReturn(_this,_temp)}return inherits(Time,_React$Component),Time.prototype.componentDidMount=function componentDidMount(){var multiplier=60/this.props.intervals,currH=this.props.selected?getHour(this.props.selected):getHour(newDate());this.list.scrollTop=multiplier*currH*30},Time.prototype.render=function render(){var _this2=this,height=null;return this.props.monthRef&&(height=this.props.monthRef.clientHeight-39),react.createElement("div",{className:"react-datepicker__time-container "+(this.props.todayButton?"react-datepicker__time-container--with-today-button":"")},react.createElement("div",{className:"react-datepicker__header react-datepicker__header--time"},react.createElement("div",{className:"react-datepicker-time__header"},this.props.timeCaption)),react.createElement("div",{className:"react-datepicker__time"},react.createElement("div",{className:"react-datepicker__time-box"},react.createElement("ul",{className:"react-datepicker__time-list",ref:function ref(list){_this2.list=list},style:height?{height}:{}},this.renderTimes.bind(this)()))))},es_createClass(Time,null,[{key:"defaultProps",get:function get$$1(){return{intervals:30,onTimeChange:function onTimeChange(){},todayButton:null,timeCaption:"Time"}}}]),Time}(react.Component);function CalendarContainer(_ref){var className=_ref.className,children=_ref.children;return react.createElement("div",{className},react.createElement("div",{className:"react-datepicker__triangle"}),children)}Time.propTypes={format:prop_types_default().string,includeTimes:prop_types_default().array,intervals:prop_types_default().number,selected:prop_types_default().object,onChange:prop_types_default().func,todayButton:prop_types_default().string,minTime:prop_types_default().object,maxTime:prop_types_default().object,excludeTimes:prop_types_default().array,monthRef:prop_types_default().object,timeCaption:prop_types_default().string,injectTimes:prop_types_default().array},CalendarContainer.propTypes={className:prop_types_default().string,children:prop_types_default().node};var DROPDOWN_FOCUS_CLASSNAMES=["react-datepicker__year-select","react-datepicker__month-select","react-datepicker__month-year-select"],Calendar=function(_React$Component){function Calendar(props){es_classCallCheck(this,Calendar);var _this=possibleConstructorReturn(this,_React$Component.call(this,props));return _this.handleClickOutside=function(event){_this.props.onClickOutside(event)},_this.handleDropdownFocus=function(event){(function isDropdownSelect(){var classNames=((arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).className||"").split(/\s+/);return DROPDOWN_FOCUS_CLASSNAMES.some((function(testClassname){return classNames.indexOf(testClassname)>=0}))})(event.target)&&_this.props.onDropdownFocus()},_this.getDateInView=function(){var _this$props=_this.props,preSelection=_this$props.preSelection,selected=_this$props.selected,openToDate=_this$props.openToDate,utcOffset=_this$props.utcOffset,minDate=getEffectiveMinDate(_this.props),maxDate=getEffectiveMaxDate(_this.props),current=now(utcOffset),initialDate=openToDate||selected||preSelection;return initialDate||(minDate&&isBefore(current,minDate)?minDate:maxDate&&isAfter(current,maxDate)?maxDate:current)},_this.localizeDate=function(date){return localizeDate(date,_this.props.locale)},_this.increaseMonth=function(){_this.setState({date:addMonths(cloneDate(_this.state.date),1)},(function(){return _this.handleMonthChange(_this.state.date)}))},_this.decreaseMonth=function(){_this.setState({date:subtractMonths(cloneDate(_this.state.date),1)},(function(){return _this.handleMonthChange(_this.state.date)}))},_this.handleDayClick=function(day,event){return _this.props.onSelect(day,event)},_this.handleDayMouseEnter=function(day){return _this.setState({selectingDate:day})},_this.handleMonthMouseLeave=function(){return _this.setState({selectingDate:null})},_this.handleYearChange=function(date){_this.props.onYearChange&&_this.props.onYearChange(date)},_this.handleMonthChange=function(date){_this.props.onMonthChange&&_this.props.onMonthChange(date),_this.props.adjustDateOnChange&&(_this.props.onSelect&&_this.props.onSelect(date),_this.props.setOpen&&_this.props.setOpen(!0))},_this.handleMonthYearChange=function(date){_this.handleYearChange(date),_this.handleMonthChange(date)},_this.changeYear=function(year){_this.setState({date:setYear(cloneDate(_this.state.date),year)},(function(){return _this.handleYearChange(_this.state.date)}))},_this.changeMonth=function(month){_this.setState({date:setMonth(cloneDate(_this.state.date),month)},(function(){return _this.handleMonthChange(_this.state.date)}))},_this.changeMonthYear=function(monthYear){_this.setState({date:setYear(setMonth(cloneDate(_this.state.date),getMonth(monthYear)),getYear(monthYear))},(function(){return _this.handleMonthYearChange(_this.state.date)}))},_this.header=function(){var startOfWeek=getStartOfWeek(cloneDate(arguments.length>0&&void 0!==arguments[0]?arguments[0]:_this.state.date)),dayNames=[];return _this.props.showWeekNumbers&&dayNames.push(react.createElement("div",{key:"W",className:"react-datepicker__day-name"},_this.props.weekLabel||"#")),dayNames.concat([0,1,2,3,4,5,6].map((function(offset){var day=addDays(cloneDate(startOfWeek),offset),localeData=function getLocaleData(date){return date.localeData()}(day),weekDayName=_this.formatWeekday(localeData,day);return react.createElement("div",{key:offset,className:"react-datepicker__day-name"},weekDayName)})))},_this.formatWeekday=function(localeData,day){return _this.props.formatWeekDay?function getFormattedWeekdayInLocale(locale,date,formatFunc){return formatFunc(locale.weekdays(date))}(localeData,day,_this.props.formatWeekDay):_this.props.useWeekdaysShort?function getWeekdayShortInLocale(locale,date){return locale.weekdaysShort(date)}(localeData,day):function getWeekdayMinInLocale(locale,date){return locale.weekdaysMin(date)}(localeData,day)},_this.renderPreviousMonthButton=function(){var allPrevDaysDisabled=function allDaysDisabledBefore(day,unit){var _ref6=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},minDate=_ref6.minDate,includeDates=_ref6.includeDates,dateBefore=day.clone().subtract(1,unit);return minDate&&dateBefore.isBefore(minDate,unit)||includeDates&&includeDates.every((function(includeDate){return dateBefore.isBefore(includeDate,unit)}))||!1}(_this.state.date,"month",_this.props);if((_this.props.forceShowMonthNavigation||_this.props.showDisabledMonthNavigation||!allPrevDaysDisabled)&&!_this.props.showTimeSelectOnly){var classes=["react-datepicker__navigation","react-datepicker__navigation--previous"],clickHandler=_this.decreaseMonth;return allPrevDaysDisabled&&_this.props.showDisabledMonthNavigation&&(classes.push("react-datepicker__navigation--previous--disabled"),clickHandler=null),react.createElement("button",{type:"button",className:classes.join(" "),onClick:clickHandler},_this.props.previousMonthButtonLabel)}},_this.renderNextMonthButton=function(){var allNextDaysDisabled=function allDaysDisabledAfter(day,unit){var _ref7=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},maxDate=_ref7.maxDate,includeDates=_ref7.includeDates,dateAfter=day.clone().add(1,unit);return maxDate&&dateAfter.isAfter(maxDate,unit)||includeDates&&includeDates.every((function(includeDate){return dateAfter.isAfter(includeDate,unit)}))||!1}(_this.state.date,"month",_this.props);if((_this.props.forceShowMonthNavigation||_this.props.showDisabledMonthNavigation||!allNextDaysDisabled)&&!_this.props.showTimeSelectOnly){var classes=["react-datepicker__navigation","react-datepicker__navigation--next"];_this.props.showTimeSelect&&classes.push("react-datepicker__navigation--next--with-time"),_this.props.todayButton&&classes.push("react-datepicker__navigation--next--with-today-button");var clickHandler=_this.increaseMonth;return allNextDaysDisabled&&_this.props.showDisabledMonthNavigation&&(classes.push("react-datepicker__navigation--next--disabled"),clickHandler=null),react.createElement("button",{type:"button",className:classes.join(" "),onClick:clickHandler},_this.props.nextMonthButtonLabel)}},_this.renderCurrentMonth=function(){var date=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_this.state.date,classes=["react-datepicker__current-month"];return _this.props.showYearDropdown&&classes.push("react-datepicker__current-month--hasYearDropdown"),_this.props.showMonthDropdown&&classes.push("react-datepicker__current-month--hasMonthDropdown"),_this.props.showMonthYearDropdown&&classes.push("react-datepicker__current-month--hasMonthYearDropdown"),react.createElement("div",{className:classes.join(" ")},formatDate(date,_this.props.dateFormat))},_this.renderYearDropdown=function(){var overrideHide=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(_this.props.showYearDropdown&&!overrideHide)return react.createElement(YearDropdown,{adjustDateOnChange:_this.props.adjustDateOnChange,date:_this.state.date,onSelect:_this.props.onSelect,setOpen:_this.props.setOpen,dropdownMode:_this.props.dropdownMode,onChange:_this.changeYear,minDate:_this.props.minDate,maxDate:_this.props.maxDate,year:getYear(_this.state.date),scrollableYearDropdown:_this.props.scrollableYearDropdown,yearDropdownItemNumber:_this.props.yearDropdownItemNumber})},_this.renderMonthDropdown=function(){var overrideHide=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(_this.props.showMonthDropdown&&!overrideHide)return react.createElement(MonthDropdown,{dropdownMode:_this.props.dropdownMode,locale:_this.props.locale,dateFormat:_this.props.dateFormat,onChange:_this.changeMonth,month:getMonth(_this.state.date),useShortMonthInDropdown:_this.props.useShortMonthInDropdown})},_this.renderMonthYearDropdown=function(){var overrideHide=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(_this.props.showMonthYearDropdown&&!overrideHide)return react.createElement(MonthYearDropdown,{dropdownMode:_this.props.dropdownMode,locale:_this.props.locale,dateFormat:_this.props.dateFormat,onChange:_this.changeMonthYear,minDate:_this.props.minDate,maxDate:_this.props.maxDate,date:_this.state.date,scrollableMonthYearDropdown:_this.props.scrollableMonthYearDropdown})},_this.renderTodayButton=function(){if(_this.props.todayButton&&!_this.props.showTimeSelectOnly)return react.createElement("div",{className:"react-datepicker__today-button",onClick:function onClick(e){return _this.props.onSelect(function getStartOfDate(date){return getStartOf(date,"date")}(now(_this.props.utcOffset)),e)}},_this.props.todayButton)},_this.renderMonths=function(){if(!_this.props.showTimeSelectOnly){for(var monthList=[],i=0;i<_this.props.monthsShown;++i){var monthDate=addMonths(cloneDate(_this.state.date),i),monthKey="month-"+i;monthList.push(react.createElement("div",{key:monthKey,ref:function ref(div){_this.monthContainer=div},className:"react-datepicker__month-container"},react.createElement("div",{className:"react-datepicker__header"},_this.renderCurrentMonth(monthDate),react.createElement("div",{className:"react-datepicker__header__dropdown react-datepicker__header__dropdown--"+_this.props.dropdownMode,onFocus:_this.handleDropdownFocus},_this.renderMonthDropdown(0!==i),_this.renderMonthYearDropdown(0!==i),_this.renderYearDropdown(0!==i)),react.createElement("div",{className:"react-datepicker__day-names"},_this.header(monthDate))),react.createElement(Month,{day:monthDate,dayClassName:_this.props.dayClassName,onDayClick:_this.handleDayClick,onDayMouseEnter:_this.handleDayMouseEnter,onMouseLeave:_this.handleMonthMouseLeave,onWeekSelect:_this.props.onWeekSelect,formatWeekNumber:_this.props.formatWeekNumber,minDate:_this.props.minDate,maxDate:_this.props.maxDate,excludeDates:_this.props.excludeDates,highlightDates:_this.props.highlightDates,selectingDate:_this.state.selectingDate,includeDates:_this.props.includeDates,inline:_this.props.inline,fixedHeight:_this.props.fixedHeight,filterDate:_this.props.filterDate,preSelection:_this.props.preSelection,selected:_this.props.selected,selectsStart:_this.props.selectsStart,selectsEnd:_this.props.selectsEnd,showWeekNumbers:_this.props.showWeekNumbers,startDate:_this.props.startDate,endDate:_this.props.endDate,peekNextMonth:_this.props.peekNextMonth,utcOffset:_this.props.utcOffset})))}return monthList}},_this.renderTimeSection=function(){if(_this.props.showTimeSelect)return react.createElement(Time,{selected:_this.props.selected,onChange:_this.props.onTimeChange,format:_this.props.timeFormat,includeTimes:_this.props.includeTimes,intervals:_this.props.timeIntervals,minTime:_this.props.minTime,maxTime:_this.props.maxTime,excludeTimes:_this.props.excludeTimes,timeCaption:_this.props.timeCaption,todayButton:_this.props.todayButton,showMonthDropdown:_this.props.showMonthDropdown,showMonthYearDropdown:_this.props.showMonthYearDropdown,showYearDropdown:_this.props.showYearDropdown,withPortal:_this.props.withPortal,monthRef:_this.state.monthContainer,injectTimes:_this.props.injectTimes})},_this.state={date:_this.localizeDate(_this.getDateInView()),selectingDate:null,monthContainer:_this.monthContainer},_this}return inherits(Calendar,_React$Component),es_createClass(Calendar,null,[{key:"defaultProps",get:function get$$1(){var _ref;return(_ref={onDropdownFocus:function onDropdownFocus(){},monthsShown:1,forceShowMonthNavigation:!1,timeCaption:"Time",previousMonthButtonLabel:"Previous Month"}).previousMonthButtonLabel="Next Month",_ref}}]),Calendar.prototype.componentDidMount=function componentDidMount(){var _this2=this;this.props.showTimeSelect&&(this.assignMonthContainer=void _this2.setState({monthContainer:_this2.monthContainer}))},Calendar.prototype.componentDidUpdate=function componentDidUpdate(prevProps){this.props.preSelection&&!isSameDay(this.props.preSelection,prevProps.preSelection)?this.setState({date:this.localizeDate(this.props.preSelection)}):this.props.openToDate&&!isSameDay(this.props.openToDate,prevProps.openToDate)&&this.setState({date:this.localizeDate(this.props.openToDate)})},Calendar.prototype.render=function render(){var Container=this.props.container||CalendarContainer;return react.createElement(Container,{className:classnames_default()("react-datepicker",this.props.className,{"react-datepicker--time-only":this.props.showTimeSelectOnly})},this.renderPreviousMonthButton(),this.renderNextMonthButton(),this.renderMonths(),this.renderTodayButton(),this.renderTimeSection(),this.props.children)},Calendar}(react.Component);Calendar.propTypes={adjustDateOnChange:prop_types_default().bool,className:prop_types_default().string,children:prop_types_default().node,container:prop_types_default().func,dateFormat:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().array]).isRequired,dayClassName:prop_types_default().func,dropdownMode:prop_types_default().oneOf(["scroll","select"]),endDate:prop_types_default().object,excludeDates:prop_types_default().array,filterDate:prop_types_default().func,fixedHeight:prop_types_default().bool,formatWeekNumber:prop_types_default().func,highlightDates:prop_types_default().instanceOf(Map),includeDates:prop_types_default().array,includeTimes:prop_types_default().array,injectTimes:prop_types_default().array,inline:prop_types_default().bool,locale:prop_types_default().string,maxDate:prop_types_default().object,minDate:prop_types_default().object,monthsShown:prop_types_default().number,onClickOutside:prop_types_default().func.isRequired,onMonthChange:prop_types_default().func,onYearChange:prop_types_default().func,forceShowMonthNavigation:prop_types_default().bool,onDropdownFocus:prop_types_default().func,onSelect:prop_types_default().func.isRequired,onWeekSelect:prop_types_default().func,showTimeSelect:prop_types_default().bool,showTimeSelectOnly:prop_types_default().bool,timeFormat:prop_types_default().string,timeIntervals:prop_types_default().number,onTimeChange:prop_types_default().func,minTime:prop_types_default().object,maxTime:prop_types_default().object,excludeTimes:prop_types_default().array,timeCaption:prop_types_default().string,openToDate:prop_types_default().object,peekNextMonth:prop_types_default().bool,scrollableYearDropdown:prop_types_default().bool,scrollableMonthYearDropdown:prop_types_default().bool,preSelection:prop_types_default().object,selected:prop_types_default().object,selectsEnd:prop_types_default().bool,selectsStart:prop_types_default().bool,showMonthDropdown:prop_types_default().bool,showMonthYearDropdown:prop_types_default().bool,showWeekNumbers:prop_types_default().bool,showYearDropdown:prop_types_default().bool,startDate:prop_types_default().object,todayButton:prop_types_default().string,useWeekdaysShort:prop_types_default().bool,formatWeekDay:prop_types_default().func,withPortal:prop_types_default().bool,utcOffset:prop_types_default().number,weekLabel:prop_types_default().string,yearDropdownItemNumber:prop_types_default().number,setOpen:prop_types_default().func,useShortMonthInDropdown:prop_types_default().bool,showDisabledMonthNavigation:prop_types_default().bool,previousMonthButtonLabel:prop_types_default().string,nextMonthButtonLabel:prop_types_default().string};var popperPlacementPositions=["auto","auto-left","auto-right","bottom","bottom-end","bottom-start","left","left-end","left-start","right","right-end","right-start","top","top-end","top-start"],PopperComponent=function(_React$Component){function PopperComponent(){return es_classCallCheck(this,PopperComponent),possibleConstructorReturn(this,_React$Component.apply(this,arguments))}return inherits(PopperComponent,_React$Component),PopperComponent.prototype.render=function render(){var _props=this.props,className=_props.className,hidePopper=_props.hidePopper,popperComponent=_props.popperComponent,popperModifiers=_props.popperModifiers,popperPlacement=_props.popperPlacement,targetComponent=_props.targetComponent,popper=void 0;if(!hidePopper){var classes=classnames_default()("react-datepicker-popper",className);popper=react.createElement(lib_Popper,{className:classes,modifiers:popperModifiers,placement:popperPlacement},popperComponent)}return this.props.popperContainer&&(popper=react.createElement(this.props.popperContainer,{},popper)),react.createElement(lib_Manager,null,react.createElement(lib_Target,{className:"react-datepicker-wrapper"},targetComponent),popper)},es_createClass(PopperComponent,null,[{key:"defaultProps",get:function get$$1(){return{hidePopper:!0,popperModifiers:{preventOverflow:{enabled:!0,escapeWithReference:!0,boundariesElement:"viewport"}},popperPlacement:"bottom-start"}}}]),PopperComponent}(react.Component);PopperComponent.propTypes={className:prop_types_default().string,hidePopper:prop_types_default().bool,popperComponent:prop_types_default().element,popperModifiers:prop_types_default().object,popperPlacement:prop_types_default().oneOf(popperPlacementPositions),popperContainer:prop_types_default().func,targetComponent:prop_types_default().element};var WrappedCalendar=react_onclickoutside_es(Calendar);var DatePicker=function(_React$Component){function DatePicker(props){es_classCallCheck(this,DatePicker);var _this=possibleConstructorReturn(this,_React$Component.call(this,props));return _this.getPreSelection=function(){return _this.props.openToDate?newDate(_this.props.openToDate):_this.props.selectsEnd&&_this.props.startDate?newDate(_this.props.startDate):_this.props.selectsStart&&_this.props.endDate?newDate(_this.props.endDate):now(_this.props.utcOffset)},_this.calcInitialState=function(){var defaultPreSelection=_this.getPreSelection(),minDate=getEffectiveMinDate(_this.props),maxDate=getEffectiveMaxDate(_this.props),boundedPreSelection=minDate&&isBefore(defaultPreSelection,minDate)?minDate:maxDate&&isAfter(defaultPreSelection,maxDate)?maxDate:defaultPreSelection;return{open:_this.props.startOpen||!1,preventFocus:!1,preSelection:_this.props.selected?newDate(_this.props.selected):boundedPreSelection,highlightDates:getHightLightDaysMap(_this.props.highlightDates),focused:!1}},_this.clearPreventFocusTimeout=function(){_this.preventFocusTimeout&&clearTimeout(_this.preventFocusTimeout)},_this.setFocus=function(){_this.input&&_this.input.focus&&_this.input.focus()},_this.setOpen=function(open){_this.setState({open,preSelection:open&&_this.state.open?_this.state.preSelection:_this.calcInitialState().preSelection,lastPreSelectChange:PRESELECT_CHANGE_VIA_NAVIGATE})},_this.handleFocus=function(event){_this.state.preventFocus||(_this.props.onFocus(event),_this.props.preventOpenOnFocus||_this.props.readOnly||_this.setOpen(!0)),_this.setState({focused:!0})},_this.cancelFocusInput=function(){clearTimeout(_this.inputFocusTimeout),_this.inputFocusTimeout=null},_this.deferFocusInput=function(){_this.cancelFocusInput(),_this.inputFocusTimeout=setTimeout((function(){return _this.setFocus()}),1)},_this.handleDropdownFocus=function(){_this.cancelFocusInput()},_this.handleBlur=function(event){_this.state.open&&!_this.props.withPortal?_this.deferFocusInput():_this.props.onBlur(event),_this.setState({focused:!1})},_this.handleCalendarClickOutside=function(event){_this.props.inline||_this.setOpen(!1),_this.props.onClickOutside(event),_this.props.withPortal&&event.preventDefault()},_this.handleChange=function(){for(var _len=arguments.length,allArgs=Array(_len),_key=0;_key<_len;_key++)allArgs[_key]=arguments[_key];var event=allArgs[0];if(!_this.props.onChangeRaw||(_this.props.onChangeRaw.apply(_this,allArgs),"function"==typeof event.isDefaultPrevented&&!event.isDefaultPrevented())){_this.setState({inputValue:event.target.value,lastPreSelectChange:PRESELECT_CHANGE_VIA_INPUT});var date=function parseDate(value,_ref){var dateFormat=_ref.dateFormat,locale=_ref.locale,m=moment_default()(value,dateFormat,locale||moment_default().locale(),!0);return m.isValid()?m:null}(event.target.value,_this.props);!date&&event.target.value||_this.setSelected(date,event,!0)}},_this.handleSelect=function(date,event){_this.setState({preventFocus:!0},(function(){return _this.preventFocusTimeout=setTimeout((function(){return _this.setState({preventFocus:!1})}),50),_this.preventFocusTimeout})),_this.setSelected(date,event),!_this.props.shouldCloseOnSelect||_this.props.showTimeSelect?_this.setPreSelection(date):_this.props.inline||_this.setOpen(!1)},_this.setSelected=function(date,event,keepInput){var changedDate=date;if(null===changedDate||!isDayDisabled(changedDate,_this.props)){if(!isSameDay(_this.props.selected,changedDate)||_this.props.allowSameDay){if(null!==changedDate){if(_this.props.selected){var selected=_this.props.selected;keepInput&&(selected=newDate(changedDate)),changedDate=setTime(newDate(changedDate),{hour:getHour(selected),minute:getMinute(selected),second:getSecond(selected)})}_this.props.inline||_this.setState({preSelection:changedDate})}_this.props.onChange(changedDate,event)}_this.props.onSelect(changedDate,event),keepInput||_this.setState({inputValue:null})}},_this.setPreSelection=function(date){(!(void 0!==_this.props.minDate&&void 0!==_this.props.maxDate)||!date||isDayInRange(date,_this.props.minDate,_this.props.maxDate))&&_this.setState({preSelection:date})},_this.handleTimeChange=function(time){var changedDate=setTime(cloneDate(_this.props.selected?_this.props.selected:_this.getPreSelection()),{hour:getHour(time),minute:getMinute(time)});_this.setState({preSelection:changedDate}),_this.props.onChange(changedDate),_this.setOpen(!1),_this.setState({inputValue:null})},_this.onInputClick=function(){_this.props.disabled||_this.props.readOnly||_this.setOpen(!0)},_this.onInputKeyDown=function(event){_this.props.onKeyDown(event);var eventKey=event.key;if(_this.state.open||_this.props.inline||_this.props.preventOpenOnFocus){var copy=newDate(_this.state.preSelection);if("Enter"===eventKey)event.preventDefault(),(isMoment(_this.state.preSelection)||function isDate(date){return moment_default().isDate(date)}(_this.state.preSelection))&&_this.state.lastPreSelectChange===PRESELECT_CHANGE_VIA_NAVIGATE?(_this.handleSelect(copy,event),!_this.props.shouldCloseOnSelect&&_this.setPreSelection(copy)):_this.setOpen(!1);else if("Escape"===eventKey)event.preventDefault(),_this.setOpen(!1);else if("Tab"===eventKey)_this.setOpen(!1);else if(!_this.props.disabledKeyboardNavigation){var newSelection=void 0;switch(eventKey){case"ArrowLeft":newSelection=function subtractDays(date,amount){return subtract(date,amount,"days")}(copy,1);break;case"ArrowRight":newSelection=addDays(copy,1);break;case"ArrowUp":newSelection=function subtractWeeks(date,amount){return subtract(date,amount,"weeks")}(copy,1);break;case"ArrowDown":newSelection=addWeeks(copy,1);break;case"PageUp":newSelection=subtractMonths(copy,1);break;case"PageDown":newSelection=addMonths(copy,1);break;case"Home":newSelection=function subtractYears(date,amount){return subtract(date,amount,"years")}(copy,1);break;case"End":newSelection=function addYears(date,amount){return add(date,amount,"years")}(copy,1)}if(!newSelection)return;event.preventDefault(),_this.setState({lastPreSelectChange:PRESELECT_CHANGE_VIA_NAVIGATE}),_this.props.adjustDateOnChange&&_this.setSelected(newSelection),_this.setPreSelection(newSelection)}}else"ArrowDown"!==eventKey&&"ArrowUp"!==eventKey||_this.onInputClick()},_this.onClearClick=function(event){event&&event.preventDefault&&event.preventDefault(),_this.props.onChange(null,event),_this.setState({inputValue:null})},_this.clear=function(){_this.onClearClick()},_this.renderCalendar=function(){return _this.props.inline||_this.state.open&&!_this.props.disabled&&!_this.props.readOnly?react.createElement(WrappedCalendar,{ref:function ref(elem){_this.calendar=elem},locale:_this.props.locale,adjustDateOnChange:_this.props.adjustDateOnChange,setOpen:_this.setOpen,dateFormat:_this.props.dateFormatCalendar,useWeekdaysShort:_this.props.useWeekdaysShort,formatWeekDay:_this.props.formatWeekDay,dropdownMode:_this.props.dropdownMode,selected:_this.props.selected,preSelection:_this.state.preSelection,onSelect:_this.handleSelect,onWeekSelect:_this.props.onWeekSelect,openToDate:_this.props.openToDate,minDate:_this.props.minDate,maxDate:_this.props.maxDate,selectsStart:_this.props.selectsStart,selectsEnd:_this.props.selectsEnd,startDate:_this.props.startDate,endDate:_this.props.endDate,excludeDates:_this.props.excludeDates,filterDate:_this.props.filterDate,onClickOutside:_this.handleCalendarClickOutside,formatWeekNumber:_this.props.formatWeekNumber,highlightDates:_this.state.highlightDates,includeDates:_this.props.includeDates,includeTimes:_this.props.includeTimes,injectTimes:_this.props.injectTimes,inline:_this.props.inline,peekNextMonth:_this.props.peekNextMonth,showMonthDropdown:_this.props.showMonthDropdown,useShortMonthInDropdown:_this.props.useShortMonthInDropdown,showMonthYearDropdown:_this.props.showMonthYearDropdown,showWeekNumbers:_this.props.showWeekNumbers,showYearDropdown:_this.props.showYearDropdown,withPortal:_this.props.withPortal,forceShowMonthNavigation:_this.props.forceShowMonthNavigation,showDisabledMonthNavigation:_this.props.showDisabledMonthNavigation,scrollableYearDropdown:_this.props.scrollableYearDropdown,scrollableMonthYearDropdown:_this.props.scrollableMonthYearDropdown,todayButton:_this.props.todayButton,weekLabel:_this.props.weekLabel,utcOffset:_this.props.utcOffset,outsideClickIgnoreClass:"react-datepicker-ignore-onclickoutside",fixedHeight:_this.props.fixedHeight,monthsShown:_this.props.monthsShown,onDropdownFocus:_this.handleDropdownFocus,onMonthChange:_this.props.onMonthChange,onYearChange:_this.props.onYearChange,dayClassName:_this.props.dayClassName,showTimeSelect:_this.props.showTimeSelect,showTimeSelectOnly:_this.props.showTimeSelectOnly,onTimeChange:_this.handleTimeChange,timeFormat:_this.props.timeFormat,timeIntervals:_this.props.timeIntervals,minTime:_this.props.minTime,maxTime:_this.props.maxTime,excludeTimes:_this.props.excludeTimes,timeCaption:_this.props.timeCaption,className:_this.props.calendarClassName,container:_this.props.calendarContainer,yearDropdownItemNumber:_this.props.yearDropdownItemNumber,previousMonthButtonLabel:_this.props.previousMonthButtonLabel,nextMonthButtonLabel:_this.props.nextMonthButtonLabel},_this.props.children):null},_this.renderDateInput=function(){var _classnames,_React$cloneElement,className=classnames_default()(_this.props.className,((_classnames={})["react-datepicker-ignore-onclickoutside"]=_this.state.open,_classnames)),customInput=_this.props.customInput||react.createElement("input",{type:"text"}),customInputRef=_this.props.customInputRef||"ref",inputValue="string"==typeof _this.props.value?_this.props.value:"string"==typeof _this.state.inputValue?_this.state.inputValue:function safeDateFormat(date,_ref2){var dateFormat=_ref2.dateFormat,locale=_ref2.locale;return date&&date.clone().locale(locale||moment_default().locale()).format(Array.isArray(dateFormat)?dateFormat[0]:dateFormat)||""}(_this.props.selected,_this.props);return react.cloneElement(customInput,((_React$cloneElement={})[customInputRef]=function(input){_this.input=input},_React$cloneElement.value=inputValue,_React$cloneElement.onBlur=_this.handleBlur,_React$cloneElement.onChange=_this.handleChange,_React$cloneElement.onClick=_this.onInputClick,_React$cloneElement.onFocus=_this.handleFocus,_React$cloneElement.onKeyDown=_this.onInputKeyDown,_React$cloneElement.id=_this.props.id,_React$cloneElement.name=_this.props.name,_React$cloneElement.autoFocus=_this.props.autoFocus,_React$cloneElement.placeholder=_this.props.placeholderText,_React$cloneElement.disabled=_this.props.disabled,_React$cloneElement.autoComplete=_this.props.autoComplete,_React$cloneElement.className=className,_React$cloneElement.title=_this.props.title,_React$cloneElement.readOnly=_this.props.readOnly,_React$cloneElement.required=_this.props.required,_React$cloneElement.tabIndex=_this.props.tabIndex,_React$cloneElement))},_this.renderClearButton=function(){return _this.props.isClearable&&null!=_this.props.selected?react.createElement("button",{type:"button",className:"react-datepicker__close-icon",onClick:_this.onClearClick,title:_this.props.clearButtonTitle,tabIndex:-1}):null},_this.state=_this.calcInitialState(),_this}return inherits(DatePicker,_React$Component),es_createClass(DatePicker,null,[{key:"defaultProps",get:function get$$1(){return{allowSameDay:!1,dateFormat:"L",dateFormatCalendar:"MMMM YYYY",onChange:function onChange(){},disabled:!1,disabledKeyboardNavigation:!1,dropdownMode:"scroll",onFocus:function onFocus(){},onBlur:function onBlur(){},onKeyDown:function onKeyDown(){},onSelect:function onSelect(){},onClickOutside:function onClickOutside$$1(){},onMonthChange:function onMonthChange(){},preventOpenOnFocus:!1,onYearChange:function onYearChange(){},monthsShown:1,readOnly:!1,withPortal:!1,shouldCloseOnSelect:!0,showTimeSelect:!1,timeIntervals:30,timeCaption:"Time",previousMonthButtonLabel:"Previous Month",nextMonthButtonLabel:"Next month"}}}]),DatePicker.prototype.componentDidUpdate=function componentDidUpdate(prevProps,prevState){prevProps.inline&&function hasPreSelectionChanged(date1,date2){return date1&&date2?getMonth(date1)!==getMonth(date2)||getYear(date1)!==getYear(date2):date1!==date2}(prevProps.selected,this.props.selected)&&this.setPreSelection(this.props.selected),prevProps.highlightDates!==this.props.highlightDates&&this.setState({highlightDates:getHightLightDaysMap(this.props.highlightDates)}),!prevState.focused&&function hasSelectionChanged(date1,date2){return!(!date1||!date2||function equals(date1,date2){return date1.isSame(date2)}(date1,date2))}(prevProps.selected,this.props.selected)&&this.setState({inputValue:null})},DatePicker.prototype.componentWillUnmount=function componentWillUnmount(){this.clearPreventFocusTimeout()},DatePicker.prototype.render=function render(){var calendar=this.renderCalendar();return this.props.inline&&!this.props.withPortal?calendar:this.props.withPortal?react.createElement("div",null,this.props.inline?null:react.createElement("div",{className:"react-datepicker__input-container"},this.renderDateInput(),this.renderClearButton()),this.state.open||this.props.inline?react.createElement("div",{className:"react-datepicker__portal"},calendar):null):react.createElement(PopperComponent,{className:this.props.popperClassName,hidePopper:!this.state.open||this.props.disabled||this.props.readOnly,popperModifiers:this.props.popperModifiers,targetComponent:react.createElement("div",{className:"react-datepicker__input-container"},this.renderDateInput(),this.renderClearButton()),popperContainer:this.props.popperContainer,popperComponent:calendar,popperPlacement:this.props.popperPlacement})},DatePicker}(react.Component);DatePicker.propTypes={adjustDateOnChange:prop_types_default().bool,allowSameDay:prop_types_default().bool,autoComplete:prop_types_default().string,autoFocus:prop_types_default().bool,calendarClassName:prop_types_default().string,calendarContainer:prop_types_default().func,children:prop_types_default().node,className:prop_types_default().string,customInput:prop_types_default().element,customInputRef:prop_types_default().string,dateFormat:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().array]),dateFormatCalendar:prop_types_default().string,dayClassName:prop_types_default().func,disabled:prop_types_default().bool,disabledKeyboardNavigation:prop_types_default().bool,dropdownMode:prop_types_default().oneOf(["scroll","select"]).isRequired,endDate:prop_types_default().object,excludeDates:prop_types_default().array,filterDate:prop_types_default().func,fixedHeight:prop_types_default().bool,formatWeekNumber:prop_types_default().func,highlightDates:prop_types_default().array,id:prop_types_default().string,includeDates:prop_types_default().array,includeTimes:prop_types_default().array,injectTimes:prop_types_default().array,inline:prop_types_default().bool,isClearable:prop_types_default().bool,locale:prop_types_default().string,maxDate:prop_types_default().object,minDate:prop_types_default().object,monthsShown:prop_types_default().number,name:prop_types_default().string,onBlur:prop_types_default().func,onChange:prop_types_default().func.isRequired,onSelect:prop_types_default().func,onWeekSelect:prop_types_default().func,onClickOutside:prop_types_default().func,onChangeRaw:prop_types_default().func,onFocus:prop_types_default().func,onKeyDown:prop_types_default().func,onMonthChange:prop_types_default().func,onYearChange:prop_types_default().func,openToDate:prop_types_default().object,peekNextMonth:prop_types_default().bool,placeholderText:prop_types_default().string,popperContainer:prop_types_default().func,popperClassName:prop_types_default().string,popperModifiers:prop_types_default().object,popperPlacement:prop_types_default().oneOf(popperPlacementPositions),preventOpenOnFocus:prop_types_default().bool,readOnly:prop_types_default().bool,required:prop_types_default().bool,scrollableYearDropdown:prop_types_default().bool,scrollableMonthYearDropdown:prop_types_default().bool,selected:prop_types_default().object,selectsEnd:prop_types_default().bool,selectsStart:prop_types_default().bool,showMonthDropdown:prop_types_default().bool,showMonthYearDropdown:prop_types_default().bool,showWeekNumbers:prop_types_default().bool,showYearDropdown:prop_types_default().bool,forceShowMonthNavigation:prop_types_default().bool,showDisabledMonthNavigation:prop_types_default().bool,startDate:prop_types_default().object,startOpen:prop_types_default().bool,tabIndex:prop_types_default().number,timeCaption:prop_types_default().string,title:prop_types_default().string,todayButton:prop_types_default().string,useWeekdaysShort:prop_types_default().bool,formatWeekDay:prop_types_default().func,utcOffset:prop_types_default().number,value:prop_types_default().string,weekLabel:prop_types_default().string,withPortal:prop_types_default().bool,yearDropdownItemNumber:prop_types_default().number,shouldCloseOnSelect:prop_types_default().bool,showTimeSelect:prop_types_default().bool,showTimeSelectOnly:prop_types_default().bool,timeFormat:prop_types_default().string,timeIntervals:prop_types_default().number,minTime:prop_types_default().object,maxTime:prop_types_default().object,excludeTimes:prop_types_default().array,useShortMonthInDropdown:prop_types_default().bool,clearButtonTitle:prop_types_default().string,previousMonthButtonLabel:prop_types_default().string,nextMonthButtonLabel:prop_types_default().string};var PRESELECT_CHANGE_VIA_INPUT="input",PRESELECT_CHANGE_VIA_NAVIGATE="navigate";const es=DatePicker},"./node_modules/react-datepicker/node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg))classes.push(classNames.apply(null,arg));else if("object"===argType)for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}return classes.join(" ")}module.exports?module.exports=classNames:void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/react-datepicker/dist/react-datepicker.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__),_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__),_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__),_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__),_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__),_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__),_css_loader_dist_cjs_js_react_datepicker_css__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/react-datepicker/dist/react-datepicker.css"),options={};options.styleTagTransform=_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default(),options.setAttributes=_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default(),options.insert=_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null,"head"),options.domAPI=_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default(),options.insertStyleElement=_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_react_datepicker_css__WEBPACK_IMPORTED_MODULE_6__.A,options);const __WEBPACK_DEFAULT_EXPORT__=_css_loader_dist_cjs_js_react_datepicker_css__WEBPACK_IMPORTED_MODULE_6__.A&&_css_loader_dist_cjs_js_react_datepicker_css__WEBPACK_IMPORTED_MODULE_6__.A.locals?_css_loader_dist_cjs_js_react_datepicker_css__WEBPACK_IMPORTED_MODULE_6__.A.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Szh6QixjQUM5QixHQUFJQSxhQUFhRyxXQUNmSCxhQUFhRyxXQUFXQyxRQUFVbDBCLFFBQzdCLENBQ0wsS0FBTzh6QixhQUFhSyxZQUNsQkwsYUFBYXRvQixZQUFZc29CLGFBQWFLLFlBR3hDTCxhQUFhRixZQUFZbjhCLFNBQVMyOEIsZUFBZXAwQixLQUNuRCxDQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVwaWNrZXIvZGlzdC9yZWFjdC1kYXRlcGlja2VyLmNzcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcGlja2VyL25vZGVfbW9kdWxlcy9yZWFjdC1vbmNsaWNrb3V0c2lkZS9kaXN0L3JlYWN0LW9uY2xpY2tvdXRzaWRlLmVzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9saWIvVGFyZ2V0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL1BvcHBlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9BcnJvdy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzPzlkZjkiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1kb3duLWFycm93IHtcXG4gIG1hcmdpbi1sZWZ0OiAtOHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1kb3duLWFycm93LCAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSwgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdzo6YmVmb3JlLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlcjogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgaGVpZ2h0OiAwO1xcbiAgd2lkdGg6IDFweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlLCAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93OjpiZWZvcmUsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1kb3duLWFycm93OjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICB6LWluZGV4OiAtMTtcXG4gIGJvcmRlci13aWR0aDogOHB4O1xcbiAgbGVmdDogLThweDtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNhZWFlYWU7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSB7XFxuICB0b3A6IDA7XFxuICBtYXJnaW4tdG9wOiAtOHB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlIHtcXG4gIGJvcmRlci10b3A6IG5vbmU7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjZjBmMGYwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSB7XFxuICB0b3A6IC0xcHg7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYWVhZWFlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyB7XFxuICBib3R0b206IDA7XFxuICBtYXJnaW4tYm90dG9tOiAtOHB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdywgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdzo6YmVmb3JlLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdzo6YmVmb3JlLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSB7XFxuICBib3R0b206IC0xcHg7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYWVhZWFlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXIge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogIzAwMDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNhZWFlYWU7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHkgLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlIHtcXG4gIGxlZnQ6IDM1cHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHkgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyIHtcXG4gIGJvcmRlci1sZWZ0OiAwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci0tdGltZS1vbmx5IC5yZWFjdC1kYXRlcGlja2VyX190aW1lIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItLXRpbWUtb25seSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3gge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogNTBweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIHtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0ge1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiA0MnB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0ge1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xcbiAgbGVmdDogNDJweDtcXG4gIHJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FlYWVhZTtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuM3JlbTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjNyZW07XFxuICBwYWRkaW5nLXRvcDogOHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS10aW1lIHtcXG4gIHBhZGRpbmctYm90dG9tOiA4cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyLS1zZWxlY3QsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duLWNvbnRhaW5lci0tc2VsZWN0LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tc2VsZWN0LFxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tc2Nyb2xsLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bi1jb250YWluZXItLXNjcm9sbCxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93bi1jb250YWluZXItLXNjcm9sbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW46IDAgMnB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aCxcXG4ucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDAuOTQ0cmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjdyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwcHg7XFxuICB3aWR0aDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDAuNDVyZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICB6LWluZGV4OiAxO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgd2lkdGg6IDEwcHg7XFxuICB0ZXh0LWluZGVudDogLTk5OWVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzIHtcXG4gIGxlZnQ6IDEwcHg7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNjY2M7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91czpob3ZlciB7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNiM2IzYjM7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91cy0tZGlzYWJsZWQsIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91cy0tZGlzYWJsZWQ6aG92ZXIge1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjZTZlNmU2O1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dCB7XFxuICByaWdodDogMTBweDtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0td2l0aC10aW1lOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0td2l0aC10b2RheS1idXR0b24pIHtcXG4gIHJpZ2h0OiA4MHB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dDpob3ZlciB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2IzYjNiMztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLWRpc2FibGVkLCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0tZGlzYWJsZWQ6aG92ZXIge1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6ICNlNmU2ZTY7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMge1xcbiAgdG9wOiA0cHg7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXM6aG92ZXIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2IzYjNiMztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzLXVwY29taW5nIHtcXG4gIHRvcDogLTRweDtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNjY2M7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZzpob3ZlciB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtY29udGFpbmVyIHtcXG4gIGZsb2F0OiBsZWZ0O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgge1xcbiAgbWFyZ2luOiAwLjRyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciB7XFxuICBmbG9hdDogcmlnaHQ7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNhZWFlYWU7XFxuICB3aWR0aDogNzBweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyLS13aXRoLXRvZGF5LWJ1dHRvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYWVhZWFlO1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IC03MnB4O1xcbiAgdG9wOiAwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3gge1xcbiAgd2lkdGg6IDcwcHg7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyIC5yZWFjdC1kYXRlcGlja2VyX190aW1lIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWJveCB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3Qge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIGhlaWdodDogY2FsYygxOTVweCArICgxLjdyZW0gLyAyKSk7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyIC5yZWFjdC1kYXRlcGlja2VyX190aW1lIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWJveCB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QgbGkucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0ge1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1zZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE2YmE1O1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1zZWxlY3RlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE2YmE1O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtYm94IHVsLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdCBsaS5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbS0tZGlzYWJsZWQge1xcbiAgY29sb3I6ICNjY2M7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1kaXNhYmxlZDpob3ZlciB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyIHtcXG4gIGNvbG9yOiAjY2NjO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEuN3JlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjdyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW46IDAuMTY2cmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXIucmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXItLWNsaWNrYWJsZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci5yZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci0tY2xpY2thYmxlOmhvdmVyIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXMsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWsge1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lLFxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXksXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbmFtZSB7XFxuICBjb2xvcjogIzAwMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxLjdyZW07XFxuICBsaW5lLWhlaWdodDogMS43cmVtO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luOiAwLjE2NnJlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXk6aG92ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0tdG9kYXkge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZGNjNGE7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMyYmUzZjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQtY3VzdG9tLTEge1xcbiAgY29sb3I6IG1hZ2VudGE7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkLWN1c3RvbS0yIHtcXG4gIGNvbG9yOiBncmVlbjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0ZWQsIC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2Uge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxNmJhNTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RlZDpob3ZlciwgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlOmhvdmVyLCAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWQ1ZDkwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1rZXlib2FyZC1zZWxlY3RlZCB7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmE4N2QwO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWtleWJvYXJkLXNlbGVjdGVkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDVkOTA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2UpIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMzMsIDEwNywgMTY1LCAwLjUpO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLXNlbGVjdGluZy1yYW5nZSAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbiAgY29sb3I6ICMwMDA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIGNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1kaXNhYmxlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldyB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3OmhvdmVyLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXc6aG92ZXIsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3OmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXc6aG92ZXIgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXc6aG92ZXIgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvdyB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3cge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2NjYztcXG4gIGZsb2F0OiByaWdodDtcXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xcbiAgdG9wOiA4cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXItd2lkdGg6IDAuNDVyZW07XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bixcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93biB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDUwJTtcXG4gIGxlZnQ6IDI1JTtcXG4gIHRvcDogMzBweDtcXG4gIHotaW5kZXg6IDE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYWVhZWFlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bjpob3ZlcixcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd246aG92ZXIsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi0tc2Nyb2xsYWJsZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24tLXNjcm9sbGFibGUsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tLXNjcm9sbGFibGUge1xcbiAgaGVpZ2h0OiAxNTBweDtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb24sXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uIHtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246Zmlyc3Qtb2YtdHlwZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmZpcnN0LW9mLXR5cGUsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uOmZpcnN0LW9mLXR5cGUge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4zcmVtO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uOmxhc3Qtb2YtdHlwZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmxhc3Qtb2YtdHlwZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb246bGFzdC1vZi10eXBlIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246aG92ZXIsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbjpob3ZlcixcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uOmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb246aG92ZXIgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzLXVwY29taW5nIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNiM2IzYjM7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvbjpob3ZlciAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbjpob3ZlciAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uOmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy1wcmV2aW91cyB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb24tLXNlbGVjdGVkLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbi0tc2VsZWN0ZWQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMTVweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2Nsb3NlLWljb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvdXRsaW5lOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IDE2cHg7XFxuICB3aWR0aDogMTZweDtcXG4gIHRvcDogMjUlO1xcbiAgcmlnaHQ6IDdweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2Nsb3NlLWljb246OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTZiYTU7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3R0b206IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgY29sb3I6ICNmZmY7XFxuICBjb250ZW50OiBcXFwiXFxcXDAwZDdcXFwiO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgd2lkdGg6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIG1hcmdpbjogLThweCBhdXRvIDA7XFxuICBwYWRkaW5nOiAycHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdG9kYXktYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FlYWVhZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogNXB4IDA7XFxuICBjbGVhcjogbGVmdDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjgpO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB6LWluZGV4OiAyMTQ3NDgzNjQ3O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXksXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1uYW1lIHtcXG4gIHdpZHRoOiAzcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDNyZW07XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCksIChtYXgtaGVpZ2h0OiA1NTBweCkge1xcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWUsXFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXksXFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLW5hbWUge1xcbiAgICB3aWR0aDogMnJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDJyZW07XFxuICB9XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xcbiAgZm9udC1zaXplOiAxLjQ0cmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uIHtcXG4gIGJvcmRlcjogMC44MXJlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tcHJldmlvdXMge1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91czpob3ZlciB7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNiM2IzYjM7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzLS1kaXNhYmxlZCwgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tcHJldmlvdXMtLWRpc2FibGVkOmhvdmVyIHtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2U2ZTZlNjtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dCB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2NjYztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dDpob3ZlciB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2IzYjNiMztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0tZGlzYWJsZWQsIC5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLWRpc2FibGVkOmhvdmVyIHtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjZTZlNmU2O1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7RUFHRSxpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCOztBQUVBOzs7OztFQUtFLHVCQUF1QjtFQUN2QixrQkFBa0I7RUFDbEIsNkJBQTZCO0VBQzdCLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7OztFQUdFLFdBQVc7RUFDWCxXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLFVBQVU7RUFDViw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRSxNQUFNO0VBQ04sZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLFNBQVM7RUFDVCw0QkFBNEI7QUFDOUI7O0FBRUE7OztFQUdFLFNBQVM7RUFDVCxtQkFBbUI7QUFDckI7O0FBRUE7Ozs7O0VBS0UsbUJBQW1CO0VBQ25CLHNCQUFzQjtBQUN4Qjs7QUFFQTs7O0VBR0UsWUFBWTtFQUNaLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLDJEQUEyRDtFQUMzRCxpQkFBaUI7RUFDakIsc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCx5QkFBeUI7RUFDekIscUJBQXFCO0VBQ3JCLHFCQUFxQjtFQUNyQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UscUJB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LG1CQUFtQjtBQUNyQjs7QUFFQTs7O0VBR0UsV0FBVztFQUNYLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFOzs7SUFHRSxXQUFXO0lBQ1gsaUJBQWlCO0VBQ25CO0FBQ0Y7O0FBRUE7O0VBRUUsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0Usd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsMkJBQTJCO0VBQzNCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSwwQkFBMEI7RUFDMUIsZUFBZTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1kb3duLWFycm93IHtcXG4gIG1hcmdpbi1sZWZ0OiAtOHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1kb3duLWFycm93LCAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSwgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdzo6YmVmb3JlLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlcjogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgaGVpZ2h0OiAwO1xcbiAgd2lkdGg6IDFweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlLCAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93OjpiZWZvcmUsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1kb3duLWFycm93OjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICB6LWluZGV4OiAtMTtcXG4gIGJvcmRlci13aWR0aDogOHB4O1xcbiAgbGVmdDogLThweDtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNhZWFlYWU7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSB7XFxuICB0b3A6IDA7XFxuICBtYXJnaW4tdG9wOiAtOHB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlIHtcXG4gIGJvcmRlci10b3A6IG5vbmU7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjZjBmMGYwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSB7XFxuICB0b3A6IC0xcHg7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYWVhZWFlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyB7XFxuICBib3R0b206IDA7XFxuICBtYXJnaW4tYm90dG9tOiAtOHB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdywgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdzo6YmVmb3JlLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjpiZWZvcmUsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdzo6YmVmb3JlLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3c6OmJlZm9yZSB7XFxuICBib3R0b206IC0xcHg7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYWVhZWFlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXIge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogIzAwMDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNhZWFlYWU7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHkgLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlIHtcXG4gIGxlZnQ6IDM1cHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHkgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyIHtcXG4gIGJvcmRlci1sZWZ0OiAwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci0tdGltZS1vbmx5IC5yZWFjdC1kYXRlcGlja2VyX190aW1lIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItLXRpbWUtb25seSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3gge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogNTBweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInRvcFxcXCJdIHtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0ge1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiA0MnB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0ge1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xcbiAgbGVmdDogNDJweDtcXG4gIHJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FlYWVhZTtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuM3JlbTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjNyZW07XFxuICBwYWRkaW5nLXRvcDogOHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS10aW1lIHtcXG4gIHBhZGRpbmctYm90dG9tOiA4cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyLS1zZWxlY3QsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duLWNvbnRhaW5lci0tc2VsZWN0LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tc2VsZWN0LFxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tc2Nyb2xsLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bi1jb250YWluZXItLXNjcm9sbCxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93bi1jb250YWluZXItLXNjcm9sbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW46IDAgMnB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aCxcXG4ucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDAuOTQ0cmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjdyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwcHg7XFxuICB3aWR0aDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDAuNDVyZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICB6LWluZGV4OiAxO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgd2lkdGg6IDEwcHg7XFxuICB0ZXh0LWluZGVudDogLTk5OWVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzIHtcXG4gIGxlZnQ6IDEwcHg7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNjY2M7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91czpob3ZlciB7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNiM2IzYjM7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91cy0tZGlzYWJsZWQsIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91cy0tZGlzYWJsZWQ6aG92ZXIge1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjZTZlNmU2O1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dCB7XFxuICByaWdodDogMTBweDtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0td2l0aC10aW1lOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0td2l0aC10b2RheS1idXR0b24pIHtcXG4gIHJpZ2h0OiA4MHB4O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dDpob3ZlciB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2IzYjNiMztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLWRpc2FibGVkLCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0tZGlzYWJsZWQ6aG92ZXIge1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6ICNlNmU2ZTY7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMge1xcbiAgdG9wOiA0cHg7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXM6aG92ZXIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2IzYjNiMztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzLXVwY29taW5nIHtcXG4gIHRvcDogLTRweDtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNjY2M7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZzpob3ZlciB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtY29udGFpbmVyIHtcXG4gIGZsb2F0OiBsZWZ0O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgge1xcbiAgbWFyZ2luOiAwLjRyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciB7XFxuICBmbG9hdDogcmlnaHQ7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNhZWFlYWU7XFxuICB3aWR0aDogNzBweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyLS13aXRoLXRvZGF5LWJ1dHRvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYWVhZWFlO1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IC03MnB4O1xcbiAgdG9wOiAwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3gge1xcbiAgd2lkdGg6IDcwcHg7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyIC5yZWFjdC1kYXRlcGlja2VyX190aW1lIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWJveCB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3Qge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIGhlaWdodDogY2FsYygxOTVweCArICgxLjdyZW0gLyAyKSk7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyIC5yZWFjdC1kYXRlcGlja2VyX190aW1lIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWJveCB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QgbGkucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0ge1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1zZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE2YmE1O1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1zZWxlY3RlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE2YmE1O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtYm94IHVsLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdCBsaS5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbS0tZGlzYWJsZWQge1xcbiAgY29sb3I6ICNjY2M7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3ggdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0IGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1kaXNhYmxlZDpob3ZlciB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyIHtcXG4gIGNvbG9yOiAjY2NjO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEuN3JlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjdyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW46IDAuMTY2cmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXIucmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXItLWNsaWNrYWJsZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci5yZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci0tY2xpY2thYmxlOmhvdmVyIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXMsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWsge1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lLFxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXksXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbmFtZSB7XFxuICBjb2xvcjogIzAwMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxLjdyZW07XFxuICBsaW5lLWhlaWdodDogMS43cmVtO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luOiAwLjE2NnJlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXk6aG92ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0tdG9kYXkge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZGNjNGE7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMyYmUzZjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQtY3VzdG9tLTEge1xcbiAgY29sb3I6IG1hZ2VudGE7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkLWN1c3RvbS0yIHtcXG4gIGNvbG9yOiBncmVlbjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0ZWQsIC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2Uge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxNmJhNTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RlZDpob3ZlciwgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlOmhvdmVyLCAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWQ1ZDkwO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1rZXlib2FyZC1zZWxlY3RlZCB7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmE4N2QwO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWtleWJvYXJkLXNlbGVjdGVkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDVkOTA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2UpIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMzMsIDEwNywgMTY1LCAwLjUpO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLXNlbGVjdGluZy1yYW5nZSAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbiAgY29sb3I6ICMwMDA7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIGNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1kaXNhYmxlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldyB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3OmhvdmVyLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXc6aG92ZXIsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3OmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXc6aG92ZXIgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3OmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXc6aG92ZXIgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvdyB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3csXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3cge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2NjYztcXG4gIGZsb2F0OiByaWdodDtcXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xcbiAgdG9wOiA4cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXItd2lkdGg6IDAuNDVyZW07XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bixcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93biB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDUwJTtcXG4gIGxlZnQ6IDI1JTtcXG4gIHRvcDogMzBweDtcXG4gIHotaW5kZXg6IDE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYWVhZWFlO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bjpob3ZlcixcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd246aG92ZXIsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi0tc2Nyb2xsYWJsZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24tLXNjcm9sbGFibGUsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tLXNjcm9sbGFibGUge1xcbiAgaGVpZ2h0OiAxNTBweDtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb24sXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uIHtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246Zmlyc3Qtb2YtdHlwZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmZpcnN0LW9mLXR5cGUsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uOmZpcnN0LW9mLXR5cGUge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4zcmVtO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uOmxhc3Qtb2YtdHlwZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmxhc3Qtb2YtdHlwZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb246bGFzdC1vZi10eXBlIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246aG92ZXIsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbjpob3ZlcixcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uOmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZyxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb246aG92ZXIgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzLXVwY29taW5nIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNiM2IzYjM7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvbjpob3ZlciAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbjpob3ZlciAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uOmhvdmVyIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy1wcmV2aW91cyB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb24tLXNlbGVjdGVkLFxcbi5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbi0tc2VsZWN0ZWQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMTVweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2Nsb3NlLWljb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvdXRsaW5lOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IDE2cHg7XFxuICB3aWR0aDogMTZweDtcXG4gIHRvcDogMjUlO1xcbiAgcmlnaHQ6IDdweDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX2Nsb3NlLWljb246OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTZiYTU7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3R0b206IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgY29sb3I6ICNmZmY7XFxuICBjb250ZW50OiBcXFwiXFxcXDAwZDdcXFwiO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgd2lkdGg6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIG1hcmdpbjogLThweCBhdXRvIDA7XFxuICBwYWRkaW5nOiAycHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fdG9kYXktYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FlYWVhZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogNXB4IDA7XFxuICBjbGVhcjogbGVmdDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjgpO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB6LWluZGV4OiAyMTQ3NDgzNjQ3O1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZSxcXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXksXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1uYW1lIHtcXG4gIHdpZHRoOiAzcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDNyZW07XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCksIChtYXgtaGVpZ2h0OiA1NTBweCkge1xcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWUsXFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXksXFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLW5hbWUge1xcbiAgICB3aWR0aDogMnJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDJyZW07XFxuICB9XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgsXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xcbiAgZm9udC1zaXplOiAxLjQ0cmVtO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uIHtcXG4gIGJvcmRlcjogMC44MXJlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tcHJldmlvdXMge1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4ucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91czpob3ZlciB7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNiM2IzYjM7XFxufVxcblxcbi5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzLS1kaXNhYmxlZCwgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tcHJldmlvdXMtLWRpc2FibGVkOmhvdmVyIHtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2U2ZTZlNjtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dCB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2NjYztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dDpob3ZlciB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2IzYjNiMztcXG59XFxuXFxuLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0tZGlzYWJsZWQsIC5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLWRpc2FibGVkOmhvdmVyIHtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjZTZlNmU2O1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBzb21lIERPTSBub2RlIGlzIG91ciBDb21wb25lbnQncyBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGVGb3VuZChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykge1xuICBpZiAoY3VycmVudCA9PT0gY29tcG9uZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFNWRyA8dXNlLz4gZWxlbWVudHMgZG8gbm90IHRlY2huaWNhbGx5IHJlc2lkZSBpbiB0aGUgcmVuZGVyZWQgRE9NLCBzb1xuICAvLyB0aGV5IGRvIG5vdCBoYXZlIGNsYXNzTGlzdCBkaXJlY3RseSwgYnV0IHRoZXkgb2ZmZXIgYSBsaW5rIHRvIHRoZWlyXG4gIC8vIGNvcnJlc3BvbmRpbmcgZWxlbWVudCwgd2hpY2ggY2FuIGhhdmUgY2xhc3NMaXN0LiBUaGlzIGV4dHJhIGNoZWNrIGlzIGZvclxuICAvLyB0aGF0IGNhc2UuXG4gIC8vIFNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvc3RydWN0Lmh0bWwjSW50ZXJmYWNlU1ZHVXNlRWxlbWVudFxuICAvLyBEaXNjdXNzaW9uOiBodHRwczovL2dpdGh1Yi5jb20vUG9tYXgvcmVhY3Qtb25jbGlja291dHNpZGUvcHVsbC8xN1xuXG5cbiAgaWYgKGN1cnJlbnQuY29ycmVzcG9uZGluZ0VsZW1lbnQpIHtcbiAgICByZXR1cm4gY3VycmVudC5jb3JyZXNwb25kaW5nRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoaWdub3JlQ2xhc3MpO1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGlnbm9yZUNsYXNzKTtcbn1cbi8qKlxuICogVHJ5IHRvIGZpbmQgb3VyIG5vZGUgaW4gYSBoaWVyYXJjaHkgb2Ygbm9kZXMsIHJldHVybmluZyB0aGUgZG9jdW1lbnRcbiAqIG5vZGUgYXMgaGlnaGVzdCBub2RlIGlmIG91ciBub2RlIGlzIG5vdCBmb3VuZCBpbiB0aGUgcGF0aCB1cC5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykge1xuICBpZiAoY3VycmVudCA9PT0gY29tcG9uZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIHNvdXJjZT1sb2NhbCB0aGVuIHRoaXMgZXZlbnQgY2FtZSBmcm9tICdzb21ld2hlcmUnXG4gIC8vIGluc2lkZSBhbmQgc2hvdWxkIGJlIGlnbm9yZWQuIFdlIGNvdWxkIGhhbmRsZSB0aGlzIHdpdGhcbiAgLy8gYSBsYXllcmVkIGFwcHJvYWNoLCB0b28sIGJ1dCB0aGF0IHJlcXVpcmVzIGdvaW5nIGJhY2sgdG9cbiAgLy8gdGhpbmtpbmcgaW4gdGVybXMgb2YgRG9tIG5vZGUgbmVzdGluZywgcnVubmluZyBjb3VudGVyXG4gIC8vIHRvIFJlYWN0J3MgJ3lvdSBzaG91bGRuJ3QgY2FyZSBhYm91dCB0aGUgRE9NJyBwaGlsb3NvcGh5LlxuXG5cbiAgd2hpbGUgKGN1cnJlbnQucGFyZW50Tm9kZSkge1xuICAgIGlmIChpc05vZGVGb3VuZChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gY3VycmVudDtcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc2Nyb2xsYmFyIHdhcyBjbGlja2VkXG4gKi9cblxuZnVuY3Rpb24gY2xpY2tlZFNjcm9sbGJhcihldnQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSBldnQuY2xpZW50WCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDw9IGV2dC5jbGllbnRZO1xufVxuXG4vLyBpZGVhbGx5IHdpbGwgZ2V0IHJlcGxhY2VkIHdpdGggZXh0ZXJuYWwgZGVwXG4vLyB3aGVuIHJhZnJleC9kZXRlY3QtcGFzc2l2ZS1ldmVudHMjNCBhbmQgcmFmcmV4L2RldGVjdC1wYXNzaXZlLWV2ZW50cyM1IGdldCBtZXJnZWQgaW5cbnZhciB0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCA9IGZ1bmN0aW9uIHRlc3RQYXNzaXZlRXZlbnRTdXBwb3J0KCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhc3NpdmUgPSBmYWxzZTtcbiAgdmFyIG9wdGlvbnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcGFzc2l2ZSA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVFdmVudFN1cHBvcnQnLCBub29wLCBvcHRpb25zKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlRXZlbnRTdXBwb3J0Jywgbm9vcCwgb3B0aW9ucyk7XG4gIHJldHVybiBwYXNzaXZlO1xufTtcblxuZnVuY3Rpb24gYXV0b0luYyhzZWVkKSB7XG4gIGlmIChzZWVkID09PSB2b2lkIDApIHtcbiAgICBzZWVkID0gMDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxudmFyIHVpZCA9IGF1dG9JbmMoKTtcblxudmFyIHBhc3NpdmVFdmVudFN1cHBvcnQ7XG52YXIgaGFuZGxlcnNNYXAgPSB7fTtcbnZhciBlbmFibGVkSW5zdGFuY2VzID0ge307XG52YXIgdG91Y2hFdmVudHMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJ107XG52YXIgSUdOT1JFX0NMQVNTX05BTUUgPSAnaWdub3JlLXJlYWN0LW9uY2xpY2tvdXRzaWRlJztcbi8qKlxuICogT3B0aW9ucyBmb3IgYWRkRXZlbnRIYW5kbGVyIGFuZCByZW1vdmVFdmVudEhhbmRsZXJcbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudEhhbmRsZXJPcHRpb25zKGluc3RhbmNlLCBldmVudE5hbWUpIHtcbiAgdmFyIGhhbmRsZXJPcHRpb25zID0gbnVsbDtcbiAgdmFyIGlzVG91Y2hFdmVudCA9IHRvdWNoRXZlbnRzLmluZGV4T2YoZXZlbnROYW1lKSAhPT0gLTE7XG5cbiAgaWYgKGlzVG91Y2hFdmVudCAmJiBwYXNzaXZlRXZlbnRTdXBwb3J0KSB7XG4gICAgaGFuZGxlck9wdGlvbnMgPSB7XG4gICAgICBwYXNzaXZlOiAhaW5zdGFuY2UucHJvcHMucHJldmVudERlZmF1bHRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZXJPcHRpb25zO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyB0aGUgSE9DIGZ1bmN0aW9uIHRoYXQgeW91J2xsIHVzZVxuICogaW4gb3JkZXIgdG8gaW1wYXJ0IG9uT3V0c2lkZUNsaWNrIGxpc3RlbmluZyB0byBhblxuICogYXJiaXRyYXJ5IGNvbXBvbmVudC4gSXQgZ2V0cyBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGVcbiAqIGJvb3RzdHJhcHBpbmcgY29kZSB0byB5aWVsZCBhbiBpbnN0YW5jZSBvZiB0aGVcbiAqIG9uQ2xpY2tPdXRzaWRlSE9DIGZ1bmN0aW9uIGRlZmluZWQgaW5zaWRlIHNldHVwSE9DKCkuXG4gKi9cblxuXG5mdW5jdGlvbiBvbkNsaWNrT3V0c2lkZUhPQyhXcmFwcGVkQ29tcG9uZW50LCBjb25maWcpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKG9uQ2xpY2tPdXRzaWRlLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuXG4gICAgICBfdGhpcy5fX291dHNpZGVDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5fX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXMuX19jbGlja091dHNpZGVIYW5kbGVyUHJvcChldmVudCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBfdGhpcy5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UucHJvcHMuaGFuZGxlQ2xpY2tPdXRzaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaW5zdGFuY2UucHJvcHMuaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmhhbmRsZUNsaWNrT3V0c2lkZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3RhbmNlLmhhbmRsZUNsaWNrT3V0c2lkZShldmVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcmFwcGVkQ29tcG9uZW50IGxhY2tzIGEgaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KSBmdW5jdGlvbiBmb3IgcHJvY2Vzc2luZyBvdXRzaWRlIGNsaWNrIGV2ZW50cy4nKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLmVuYWJsZU9uQ2xpY2tPdXRzaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyB8fCBlbmFibGVkSW5zdGFuY2VzW190aGlzLl91aWRdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXNzaXZlRXZlbnRTdXBwb3J0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHBhc3NpdmVFdmVudFN1cHBvcnQgPSB0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5hYmxlZEluc3RhbmNlc1tfdGhpcy5fdWlkXSA9IHRydWU7XG4gICAgICAgIHZhciBldmVudHMgPSBfdGhpcy5wcm9wcy5ldmVudFR5cGVzO1xuXG4gICAgICAgIGlmICghZXZlbnRzLmZvckVhY2gpIHtcbiAgICAgICAgICBldmVudHMgPSBbZXZlbnRzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhbmRsZXJzTWFwW190aGlzLl91aWRdID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmRpc2FibGVPbkNsaWNrT3V0c2lkZSkgcmV0dXJuO1xuICAgICAgICAgIGlmIChfdGhpcy5jb21wb25lbnROb2RlID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmV4Y2x1ZGVTY3JvbGxiYXIgJiYgY2xpY2tlZFNjcm9sbGJhcihldmVudCkpIHJldHVybjtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgIGlmIChmaW5kSGlnaGVzdChjdXJyZW50LCBfdGhpcy5jb21wb25lbnROb2RlLCBfdGhpcy5wcm9wcy5vdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcykgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuX19vdXRzaWRlQ2xpY2tIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfTtcblxuICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJzTWFwW190aGlzLl91aWRdLCBnZXRFdmVudEhhbmRsZXJPcHRpb25zKF90aGlzLCBldmVudE5hbWUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5kaXNhYmxlT25DbGlja091dHNpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSBlbmFibGVkSW5zdGFuY2VzW190aGlzLl91aWRdO1xuICAgICAgICB2YXIgZm4gPSBoYW5kbGVyc01hcFtfdGhpcy5fdWlkXTtcblxuICAgICAgICBpZiAoZm4gJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBldmVudHMgPSBfdGhpcy5wcm9wcy5ldmVudFR5cGVzO1xuXG4gICAgICAgICAgaWYgKCFldmVudHMuZm9yRWFjaCkge1xuICAgICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbiwgZ2V0RXZlbnRIYW5kbGVyT3B0aW9ucyhfdGhpcywgZXZlbnROYW1lKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlIGhhbmRsZXJzTWFwW190aGlzLl91aWRdO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5nZXRSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pbnN0YW5jZVJlZiA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl91aWQgPSB1aWQoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBXcmFwcGVkQ29tcG9uZW50J3MgaW5zdGFuY2UuXG4gICAgICovXG5cblxuICAgIHZhciBfcHJvdG8gPSBvbkNsaWNrT3V0c2lkZS5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRJbnN0YW5jZSgpIHtcbiAgICAgIGlmICghV3JhcHBlZENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IHRoaXMuaW5zdGFuY2VSZWY7XG4gICAgICByZXR1cm4gcmVmLmdldEluc3RhbmNlID8gcmVmLmdldEluc3RhbmNlKCkgOiByZWY7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBjbGljayBsaXN0ZW5lcnMgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQsXG4gICAgICogbGlua2VkIHRvIHRoaXMgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAgICovXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAvLyBJZiB3ZSBhcmUgaW4gYW4gZW52aXJvbm1lbnQgd2l0aG91dCBhIERPTSBzdWNoXG4gICAgICAvLyBhcyBzaGFsbG93IHJlbmRlcmluZyBvciBzbmFwc2hvdHMgdGhlbiB3ZSBleGl0XG4gICAgICAvLyBlYXJseSB0byBwcmV2ZW50IGFueSB1bmhhbmRsZWQgZXJyb3JzIGJlaW5nIHRocm93bi5cbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICFkb2N1bWVudC5jcmVhdGVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICBpZiAoY29uZmlnICYmIHR5cGVvZiBjb25maWcuaGFuZGxlQ2xpY2tPdXRzaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX19jbGlja091dHNpZGVIYW5kbGVyUHJvcCA9IGNvbmZpZy5oYW5kbGVDbGlja091dHNpZGUoaW5zdGFuY2UpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcmFwcGVkQ29tcG9uZW50IGxhY2tzIGEgZnVuY3Rpb24gZm9yIHByb2Nlc3Npbmcgb3V0c2lkZSBjbGljayBldmVudHMgc3BlY2lmaWVkIGJ5IHRoZSBoYW5kbGVDbGlja091dHNpZGUgY29uZmlnIG9wdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXBvbmVudE5vZGUgPSBmaW5kRE9NTm9kZSh0aGlzLmdldEluc3RhbmNlKCkpO1xuICAgICAgdGhpcy5lbmFibGVPbkNsaWNrT3V0c2lkZSgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5jb21wb25lbnROb2RlID0gZmluZERPTU5vZGUodGhpcy5nZXRJbnN0YW5jZSgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgZG9jdW1lbnQncyBldmVudCBsaXN0ZW5lcnMgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgICovXG5cblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kaXNhYmxlT25DbGlja091dHNpZGUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbiBiZSBjYWxsZWQgdG8gZXhwbGljaXRseSBlbmFibGUgZXZlbnQgbGlzdGVuaW5nXG4gICAgICogZm9yIGNsaWNrcyBhbmQgdG91Y2hlcyBvdXRzaWRlIG9mIHRoaXMgZWxlbWVudC5cbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogUGFzcy10aHJvdWdoIHJlbmRlclxuICAgICAqL1xuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGV4Y2x1ZGVTY3JvbGxiYXIgPSBfcHJvcHMuZXhjbHVkZVNjcm9sbGJhcixcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImV4Y2x1ZGVTY3JvbGxiYXJcIl0pO1xuXG4gICAgICBpZiAoV3JhcHBlZENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgICAgICBwcm9wcy5yZWYgPSB0aGlzLmdldFJlZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BzLndyYXBwZWRSZWYgPSB0aGlzLmdldFJlZjtcbiAgICAgIH1cblxuICAgICAgcHJvcHMuZGlzYWJsZU9uQ2xpY2tPdXRzaWRlID0gdGhpcy5kaXNhYmxlT25DbGlja091dHNpZGU7XG4gICAgICBwcm9wcy5lbmFibGVPbkNsaWNrT3V0c2lkZSA9IHRoaXMuZW5hYmxlT25DbGlja091dHNpZGU7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBwcm9wcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBvbkNsaWNrT3V0c2lkZTtcbiAgfShDb21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBcIk9uQ2xpY2tPdXRzaWRlKFwiICsgKFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiLCBfY2xhc3MuZGVmYXVsdFByb3BzID0ge1xuICAgIGV2ZW50VHlwZXM6IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSxcbiAgICBleGNsdWRlU2Nyb2xsYmFyOiBjb25maWcgJiYgY29uZmlnLmV4Y2x1ZGVTY3JvbGxiYXIgfHwgZmFsc2UsXG4gICAgb3V0c2lkZUNsaWNrSWdub3JlQ2xhc3M6IElHTk9SRV9DTEFTU19OQU1FLFxuICAgIHByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgICBzdG9wUHJvcGFnYXRpb246IGZhbHNlXG4gIH0sIF9jbGFzcy5nZXRDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gV3JhcHBlZENvbXBvbmVudC5nZXRDbGFzcyA/IFdyYXBwZWRDb21wb25lbnQuZ2V0Q2xhc3MoKSA6IFdyYXBwZWRDb21wb25lbnQ7XG4gIH0sIF90ZW1wO1xufVxuXG5leHBvcnQgeyBJR05PUkVfQ0xBU1NfTkFNRSB9O1xuZXhwb3J0IGRlZmF1bHQgb25DbGlja091dHNpZGVIT0M7XG4iLCJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIE1hbmFnZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWFuYWdlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWFuYWdlcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFuYWdlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTWFuYWdlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1hbmFnZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5fc2V0VGFyZ2V0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5fdGFyZ2V0Tm9kZSA9IG5vZGU7XG4gICAgfSwgX3RoaXMuX2dldFRhcmdldE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX3RhcmdldE5vZGU7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWFuYWdlciwgW3tcbiAgICBrZXk6ICdnZXRDaGlsZENvbnRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3BwZXJNYW5hZ2VyOiB7XG4gICAgICAgICAgc2V0VGFyZ2V0Tm9kZTogdGhpcy5fc2V0VGFyZ2V0Tm9kZSxcbiAgICAgICAgICBnZXRUYXJnZXROb2RlOiB0aGlzLl9nZXRUYXJnZXROb2RlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdGFnID0gX3Byb3BzLnRhZyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3RhZycsICdjaGlsZHJlbiddKTtcblxuICAgICAgaWYgKHRhZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnLCByZXN0UHJvcHMsIGNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFuYWdlcjtcbn0oQ29tcG9uZW50KTtcblxuTWFuYWdlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcG9wcGVyTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTWFuYWdlci5wcm9wVHlwZXMgPSB7XG4gIHRhZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTWFuYWdlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ2Rpdidcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWFuYWdlcjsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgVGFyZ2V0ID0gZnVuY3Rpb24gVGFyZ2V0KHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdW5kZWZpbmVkID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFsnY29tcG9uZW50JywgJ2lubmVyUmVmJywgJ2NoaWxkcmVuJ10pO1xuXG4gIHZhciBwb3BwZXJNYW5hZ2VyID0gY29udGV4dC5wb3BwZXJNYW5hZ2VyO1xuXG4gIHZhciB0YXJnZXRSZWYgPSBmdW5jdGlvbiB0YXJnZXRSZWYobm9kZSkge1xuICAgIHBvcHBlck1hbmFnZXIuc2V0VGFyZ2V0Tm9kZShub2RlKTtcbiAgICBpZiAodHlwZW9mIGlubmVyUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbm5lclJlZihub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciB0YXJnZXRQcm9wcyA9IHsgcmVmOiB0YXJnZXRSZWYgfTtcbiAgICByZXR1cm4gY2hpbGRyZW4oeyB0YXJnZXRQcm9wczogdGFyZ2V0UHJvcHMsIHJlc3RQcm9wczogcmVzdFByb3BzIH0pO1xuICB9XG5cbiAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIHJlc3RQcm9wcyk7XG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgY29tcG9uZW50UHJvcHMucmVmID0gdGFyZ2V0UmVmO1xuICB9IGVsc2Uge1xuICAgIGNvbXBvbmVudFByb3BzLmlubmVyUmVmID0gdGFyZ2V0UmVmO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgY2hpbGRyZW4pO1xufTtcblxuVGFyZ2V0LmNvbnRleHRUeXBlcyA9IHtcbiAgcG9wcGVyTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5UYXJnZXQucHJvcFR5cGVzID0ge1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFyZ2V0OyIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTQuM1xuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IGh0bWxbJ29mZnNldCcgKyBheGlzXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoKSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMoKSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIGJvdW5kYXJpZXMubGVmdCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IHBhZGRpbmc7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3kgdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgb25VcGRhdGUgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgLy8gQXZvaWQgYmx1cnJ5IHRleHQgYnkgdXNpbmcgZnVsbCBwaXhlbCBpbnRlZ2Vycy5cbiAgLy8gRm9yIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcsIHRvcC9ib3R0b20gcHJlZmVycyByb3VuZGVkXG4gIC8vIHZhbHVlcywgd2hpbGUgbGVmdC9yaWdodCBwcmVmZXJzIGZsb29yZWQgdmFsdWVzLlxuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiBNYXRoLmZsb29yKHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IE1hdGgucm91bmQocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiBNYXRoLnJvdW5kKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBNYXRoLmZsb29yKHBvcHBlci5yaWdodClcbiAgfTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVjdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLXJpZ2h0YCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0bGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgaGVpZ2h0LlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gTW9yZSBvbiB0aGlzIFtyZWFkaW5nIHRoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIgdGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgaGFzIGFsd2F5cyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLCBjYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNob3RoZXJzXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXhwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gYXNzdXJlIGl0IHRvIHBvaW50IHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcywgeW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVjdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLlxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLFxuICAgICAqIHRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdSBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9ucyB1c2VkIGJ5IFBvcHBlci5qc1xuICogdGhpcyBvYmplY3QgZ2V0IHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhpcyBvYmplY3QsIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50XG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTBcbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUG9wcGVySlMgZnJvbSAncG9wcGVyLmpzJztcblxuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gUG9wcGVySlMucGxhY2VtZW50cztcblxudmFyIFBvcHBlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3BwZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcHBlcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBQb3BwZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3BwZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHt9LCBfdGhpcy5fc2V0QXJyb3dOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLl9hcnJvd05vZGUgPSBub2RlO1xuICAgIH0sIF90aGlzLl9nZXRUYXJnZXROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnRhcmdldCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMudGFyZ2V0O1xuICAgICAgfSBlbHNlIGlmICghX3RoaXMuY29udGV4dC5wb3BwZXJNYW5hZ2VyIHx8ICFfdGhpcy5jb250ZXh0LnBvcHBlck1hbmFnZXIuZ2V0VGFyZ2V0Tm9kZSgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG1pc3NpbmcuIFBvcHBlciBtdXN0IGJlIGdpdmVuIGEgdGFyZ2V0IGZyb20gdGhlIFBvcHBlciBNYW5hZ2VyLCBvciBhcyBhIHByb3AuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMuY29udGV4dC5wb3BwZXJNYW5hZ2VyLmdldFRhcmdldE5vZGUoKTtcbiAgICB9LCBfdGhpcy5fZ2V0T2Zmc2V0cyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YS5vZmZzZXRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gZGF0YS5vZmZzZXRzW2tleV07XG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5faXNEYXRhRGlydHkgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KF90aGlzLl9nZXRPZmZzZXRzKF90aGlzLnN0YXRlLmRhdGEpKSAhPT0gSlNPTi5zdHJpbmdpZnkoX3RoaXMuX2dldE9mZnNldHMoZGF0YSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX3VwZGF0ZVN0YXRlTW9kaWZpZXIgPSB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgb3JkZXI6IDkwMCxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihkYXRhKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNEYXRhRGlydHkoZGF0YSkpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGRhdGE6IGRhdGEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX2dldFBvcHBlclN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGEgPSBfdGhpcy5zdGF0ZS5kYXRhO1xuXG5cbiAgICAgIGlmICghX3RoaXMuX3BvcHBlciB8fCAhZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHBvc2l0aW9uOiBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uXG4gICAgICB9LCBkYXRhLnN0eWxlcyk7XG4gICAgfSwgX3RoaXMuX2dldFBvcHBlclBsYWNlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zdGF0ZS5kYXRhID8gX3RoaXMuc3RhdGUuZGF0YS5wbGFjZW1lbnQgOiB1bmRlZmluZWQ7XG4gICAgfSwgX3RoaXMuX2dldFBvcHBlckhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gISFfdGhpcy5zdGF0ZS5kYXRhICYmIF90aGlzLnN0YXRlLmRhdGEuaGlkZSA/ICcnIDogdW5kZWZpbmVkO1xuICAgIH0sIF90aGlzLl9nZXRBcnJvd1N0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5kYXRhIHx8ICFfdGhpcy5zdGF0ZS5kYXRhLm9mZnNldHMuYXJyb3cpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF90aGlzJHN0YXRlJGRhdGEkb2ZmcyA9IF90aGlzLnN0YXRlLmRhdGEub2Zmc2V0cy5hcnJvdyxcbiAgICAgICAgICAgIHRvcCA9IF90aGlzJHN0YXRlJGRhdGEkb2Zmcy50b3AsXG4gICAgICAgICAgICBsZWZ0ID0gX3RoaXMkc3RhdGUkZGF0YSRvZmZzLmxlZnQ7XG5cbiAgICAgICAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5faGFuZGxlUG9wcGVyUmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLl9wb3BwZXJOb2RlID0gbm9kZTtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIF90aGlzLl9jcmVhdGVQb3BwZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9kZXN0cm95UG9wcGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMuaW5uZXJSZWYpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuaW5uZXJSZWYobm9kZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX3NjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX3BvcHBlciAmJiBfdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvcHBlcjoge1xuICAgICAgICAgIHNldEFycm93Tm9kZTogdGhpcy5fc2V0QXJyb3dOb2RlLFxuICAgICAgICAgIGdldEFycm93U3R5bGU6IHRoaXMuX2dldEFycm93U3R5bGVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUobGFzdFByb3BzKSB7XG4gICAgICBpZiAobGFzdFByb3BzLnBsYWNlbWVudCAhPT0gdGhpcy5wcm9wcy5wbGFjZW1lbnQgfHwgbGFzdFByb3BzLmV2ZW50c0VuYWJsZWQgIT09IHRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCB8fCBsYXN0UHJvcHMudGFyZ2V0ICE9PSB0aGlzLnByb3BzLnRhcmdldCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95UG9wcGVyKCk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVBvcHBlcigpO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RQcm9wcy5jaGlsZHJlbiAhPT0gdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICB0aGlzLl9zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLl9kZXN0cm95UG9wcGVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2NyZWF0ZVBvcHBlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVQb3BwZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzLnBsYWNlbWVudCxcbiAgICAgICAgICBldmVudHNFbmFibGVkID0gX3Byb3BzLmV2ZW50c0VuYWJsZWQ7XG5cbiAgICAgIHZhciBtb2RpZmllcnMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5tb2RpZmllcnMsIHtcbiAgICAgICAgYXBwbHlTdHlsZTogeyBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICB1cGRhdGVTdGF0ZTogdGhpcy5fdXBkYXRlU3RhdGVNb2RpZmllclxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5fYXJyb3dOb2RlKSB7XG4gICAgICAgIG1vZGlmaWVycy5hcnJvdyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLm1vZGlmaWVycy5hcnJvdyB8fCB7fSwge1xuICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuX2Fycm93Tm9kZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXJKUyh0aGlzLl9nZXRUYXJnZXROb2RlKCksIHRoaXMuX3BvcHBlck5vZGUsIHtcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgIGV2ZW50c0VuYWJsZWQ6IGV2ZW50c0VuYWJsZWQsXG4gICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gICAgICB9KTtcblxuICAgICAgLy8gVE9ETzogbG9vayBpbnRvIHNldFRpbWVvdXQgc2NoZWR1bGVVcGRhdGUgY2FsbCwgd2l0aG91dCBpdCwgdGhlIHBvcHBlciB3aWxsIG5vdCBwb3NpdGlvbiBwcm9wZXJseSBvbiBjcmVhdGlvblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX3NjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveVBvcHBlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95UG9wcGVyKCkge1xuICAgICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMyLmNvbXBvbmVudCxcbiAgICAgICAgICBpbm5lclJlZiA9IF9wcm9wczIuaW5uZXJSZWYsXG4gICAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzMi5wbGFjZW1lbnQsXG4gICAgICAgICAgZXZlbnRzRW5hYmxlZCA9IF9wcm9wczIuZXZlbnRzRW5hYmxlZCxcbiAgICAgICAgICBtb2RpZmllcnMgPSBfcHJvcHMyLm1vZGlmaWVycyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnY29tcG9uZW50JywgJ2lubmVyUmVmJywgJ3BsYWNlbWVudCcsICdldmVudHNFbmFibGVkJywgJ21vZGlmaWVycycsICdjaGlsZHJlbiddKTtcblxuICAgICAgdmFyIHBvcHBlclN0eWxlID0gdGhpcy5fZ2V0UG9wcGVyU3R5bGUoKTtcbiAgICAgIHZhciBwb3BwZXJQbGFjZW1lbnQgPSB0aGlzLl9nZXRQb3BwZXJQbGFjZW1lbnQoKTtcbiAgICAgIHZhciBwb3BwZXJIaWRlID0gdGhpcy5fZ2V0UG9wcGVySGlkZSgpO1xuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBwb3BwZXJQcm9wcyA9IHtcbiAgICAgICAgICByZWY6IHRoaXMuX2hhbmRsZVBvcHBlclJlZixcbiAgICAgICAgICBzdHlsZTogcG9wcGVyU3R5bGUsXG4gICAgICAgICAgJ2RhdGEtcGxhY2VtZW50JzogcG9wcGVyUGxhY2VtZW50LFxuICAgICAgICAgICdkYXRhLXgtb3V0LW9mLWJvdW5kYXJpZXMnOiBwb3BwZXJIaWRlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICAgICAgcG9wcGVyUHJvcHM6IHBvcHBlclByb3BzLFxuICAgICAgICAgIHJlc3RQcm9wczogcmVzdFByb3BzLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlOiB0aGlzLl9zY2hlZHVsZVVwZGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHJlc3RQcm9wcy5zdHlsZSwgcG9wcGVyU3R5bGUpLFxuICAgICAgICAnZGF0YS1wbGFjZW1lbnQnOiBwb3BwZXJQbGFjZW1lbnQsXG4gICAgICAgICdkYXRhLXgtb3V0LW9mLWJvdW5kYXJpZXMnOiBwb3BwZXJIaWRlXG4gICAgICB9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbXBvbmVudFByb3BzLnJlZiA9IHRoaXMuX2hhbmRsZVBvcHBlclJlZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBvbmVudFByb3BzLmlubmVyUmVmID0gdGhpcy5faGFuZGxlUG9wcGVyUmVmO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcHBlcjtcbn0oQ29tcG9uZW50KTtcblxuUG9wcGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcG9wcGVyTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblBvcHBlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcG9wcGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Qb3BwZXIucHJvcFR5cGVzID0ge1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLmZ1bmMsXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKHBsYWNlbWVudHMpLFxuICBldmVudHNFbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgbW9kaWZpZXJzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIHRhcmdldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gIC8vIHRoZSBmb2xsb3dpbmcgY2hlY2sgaXMgbmVlZGVkIGZvciBTU1JcbiAgUHJvcFR5cGVzLmluc3RhbmNlT2YodHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gRWxlbWVudCA6IE9iamVjdCksIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsaWVudFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgY2xpZW50SGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSldKVxufTtcblBvcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG4gIG1vZGlmaWVyczoge31cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBBcnJvdyA9IGZ1bmN0aW9uIEFycm93KHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdW5kZWZpbmVkID8gJ3NwYW4nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ2NvbXBvbmVudCcsICdpbm5lclJlZicsICdjaGlsZHJlbiddKTtcblxuICB2YXIgcG9wcGVyID0gY29udGV4dC5wb3BwZXI7XG5cbiAgdmFyIGFycm93UmVmID0gZnVuY3Rpb24gYXJyb3dSZWYobm9kZSkge1xuICAgIHBvcHBlci5zZXRBcnJvd05vZGUobm9kZSk7XG4gICAgaWYgKHR5cGVvZiBpbm5lclJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5uZXJSZWYobm9kZSk7XG4gICAgfVxuICB9O1xuICB2YXIgYXJyb3dTdHlsZSA9IHBvcHBlci5nZXRBcnJvd1N0eWxlKCk7XG5cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBhcnJvd1Byb3BzID0ge1xuICAgICAgcmVmOiBhcnJvd1JlZixcbiAgICAgIHN0eWxlOiBhcnJvd1N0eWxlXG4gICAgfTtcbiAgICByZXR1cm4gY2hpbGRyZW4oeyBhcnJvd1Byb3BzOiBhcnJvd1Byb3BzLCByZXN0UHJvcHM6IHJlc3RQcm9wcyB9KTtcbiAgfVxuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0UHJvcHMsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIGFycm93U3R5bGUsIHJlc3RQcm9wcy5zdHlsZSlcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgY29tcG9uZW50UHJvcHMucmVmID0gYXJyb3dSZWY7XG4gIH0gZWxzZSB7XG4gICAgY29tcG9uZW50UHJvcHMuaW5uZXJSZWYgPSBhcnJvd1JlZjtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIGNoaWxkcmVuKTtcbn07XG5cbkFycm93LmNvbnRleHRUeXBlcyA9IHtcbiAgcG9wcGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbkFycm93LnByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFycm93OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb25DbGlja091dHNpZGUgZnJvbSAncmVhY3Qtb25jbGlja291dHNpZGUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgTWFuYWdlciwgUG9wcGVyLCBUYXJnZXQgfSBmcm9tICdyZWFjdC1wb3BwZXInO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxuXG5cblxuXG5cblxuXG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxuXG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVllYXJzKHllYXIsIG5vT2ZZZWFyLCBtaW5EYXRlLCBtYXhEYXRlKSB7XG4gIHZhciBsaXN0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMiAqIG5vT2ZZZWFyICsgMTsgaSsrKSB7XG4gICAgdmFyIG5ld1llYXIgPSB5ZWFyICsgbm9PZlllYXIgLSBpO1xuICAgIHZhciBpc0luUmFuZ2UgPSB0cnVlO1xuXG4gICAgaWYgKG1pbkRhdGUpIHtcbiAgICAgIGlzSW5SYW5nZSA9IG1pbkRhdGUueWVhcigpIDw9IG5ld1llYXI7XG4gICAgfVxuXG4gICAgaWYgKG1heERhdGUgJiYgaXNJblJhbmdlKSB7XG4gICAgICBpc0luUmFuZ2UgPSBtYXhEYXRlLnllYXIoKSA+PSBuZXdZZWFyO1xuICAgIH1cblxuICAgIGlmIChpc0luUmFuZ2UpIHtcbiAgICAgIGxpc3QucHVzaChuZXdZZWFyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGlzdDtcbn1cblxudmFyIFllYXJEcm9wZG93bk9wdGlvbnMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhZZWFyRHJvcGRvd25PcHRpb25zLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBZZWFyRHJvcGRvd25PcHRpb25zKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgWWVhckRyb3Bkb3duT3B0aW9ucyk7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMucmVuZGVyT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxlY3RlZFllYXIgPSBfdGhpcy5wcm9wcy55ZWFyO1xuICAgICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5zdGF0ZS55ZWFyc0xpc3QubWFwKGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBzZWxlY3RlZFllYXIgPT09IHllYXIgPyBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uIHJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uLS1zZWxlY3RlZF95ZWFyXCIgOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uXCIsXG4gICAgICAgICAgICBrZXk6IHllYXIsXG4gICAgICAgICAgICByZWY6IHllYXIsXG4gICAgICAgICAgICBvbkNsaWNrOiBfdGhpcy5vbkNoYW5nZS5iaW5kKF90aGlzLCB5ZWFyKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VsZWN0ZWRZZWFyID09PSB5ZWFyID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkXCIgfSxcbiAgICAgICAgICAgIFwiXFx1MjcxM1wiXG4gICAgICAgICAgKSA6IFwiXCIsXG4gICAgICAgICAgeWVhclxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBtaW5ZZWFyID0gX3RoaXMucHJvcHMubWluRGF0ZSA/IF90aGlzLnByb3BzLm1pbkRhdGUueWVhcigpIDogbnVsbDtcbiAgICAgIHZhciBtYXhZZWFyID0gX3RoaXMucHJvcHMubWF4RGF0ZSA/IF90aGlzLnByb3BzLm1heERhdGUueWVhcigpIDogbnVsbDtcblxuICAgICAgaWYgKCFtYXhZZWFyIHx8ICFfdGhpcy5zdGF0ZS55ZWFyc0xpc3QuZmluZChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4geWVhciA9PT0gbWF4WWVhcjtcbiAgICAgIH0pKSB7XG4gICAgICAgIG9wdGlvbnMudW5zaGlmdChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uXCIsXG4gICAgICAgICAgICByZWY6IFwidXBjb21pbmdcIixcbiAgICAgICAgICAgIGtleTogXCJ1cGNvbWluZ1wiLFxuICAgICAgICAgICAgb25DbGljazogX3RoaXMuaW5jcmVtZW50WWVhcnNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24gcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMgcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtdXBjb21pbmdcIiB9KVxuICAgICAgICApKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtaW5ZZWFyIHx8ICFfdGhpcy5zdGF0ZS55ZWFyc0xpc3QuZmluZChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4geWVhciA9PT0gbWluWWVhcjtcbiAgICAgIH0pKSB7XG4gICAgICAgIG9wdGlvbnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uXCIsXG4gICAgICAgICAgICByZWY6IFwicHJldmlvdXNcIixcbiAgICAgICAgICAgIGtleTogXCJwcmV2aW91c1wiLFxuICAgICAgICAgICAgb25DbGljazogX3RoaXMuZGVjcmVtZW50WWVhcnNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24gcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMgcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXNcIiB9KVxuICAgICAgICApKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfTtcblxuICAgIF90aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHllYXIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGlja091dHNpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zaGlmdFllYXJzID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgdmFyIHllYXJzID0gX3RoaXMuc3RhdGUueWVhcnNMaXN0Lm1hcChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4geWVhciArIGFtb3VudDtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHllYXJzTGlzdDogeWVhcnNcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5pbmNyZW1lbnRZZWFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zaGlmdFllYXJzKDEpO1xuICAgIH07XG5cbiAgICBfdGhpcy5kZWNyZW1lbnRZZWFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zaGlmdFllYXJzKC0xKTtcbiAgICB9O1xuXG4gICAgdmFyIHllYXJEcm9wZG93bkl0ZW1OdW1iZXIgPSBwcm9wcy55ZWFyRHJvcGRvd25JdGVtTnVtYmVyLFxuICAgICAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duID0gcHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93bjtcblxuICAgIHZhciBub09mWWVhciA9IHllYXJEcm9wZG93bkl0ZW1OdW1iZXIgfHwgKHNjcm9sbGFibGVZZWFyRHJvcGRvd24gPyAxMCA6IDUpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB5ZWFyc0xpc3Q6IGdlbmVyYXRlWWVhcnMoX3RoaXMucHJvcHMueWVhciwgbm9PZlllYXIsIF90aGlzLnByb3BzLm1pbkRhdGUsIF90aGlzLnByb3BzLm1heERhdGUpXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBZZWFyRHJvcGRvd25PcHRpb25zLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGRyb3Bkb3duQ2xhc3MgPSBjbGFzc25hbWVzKHtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93blwiOiB0cnVlLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLS1zY3JvbGxhYmxlXCI6IHRoaXMucHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93blxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBjbGFzc05hbWU6IGRyb3Bkb3duQ2xhc3MgfSxcbiAgICAgIHRoaXMucmVuZGVyT3B0aW9ucygpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gWWVhckRyb3Bkb3duT3B0aW9ucztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuWWVhckRyb3Bkb3duT3B0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIG1pbkRhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2Nyb2xsYWJsZVllYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIHllYXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgeWVhckRyb3Bkb3duSXRlbU51bWJlcjogUHJvcFR5cGVzLm51bWJlclxufTtcblxudmFyIGRheU9mV2Vla0NvZGVzID0ge1xuICAxOiBcIm1vblwiLFxuICAyOiBcInR1ZVwiLFxuICAzOiBcIndlZFwiLFxuICA0OiBcInRodVwiLFxuICA1OiBcImZyaVwiLFxuICA2OiBcInNhdFwiLFxuICA3OiBcInN1blwiXG59O1xuXG4vLyBUaGVzZSBmdW5jdGlvbnMgYXJlIG5vdCBleHBvcnRlZCBzb1xuLy8gdGhhdCB3ZSBhdm9pZCBtYWdpYyBzdHJpbmdzIGxpa2UgJ2RheXMnXG5mdW5jdGlvbiBzZXQkMShkYXRlLCB1bml0LCB0bykge1xuICByZXR1cm4gZGF0ZS5zZXQodW5pdCwgdG8pO1xufVxuXG5mdW5jdGlvbiBhZGQoZGF0ZSwgYW1vdW50LCB1bml0KSB7XG4gIHJldHVybiBkYXRlLmFkZChhbW91bnQsIHVuaXQpO1xufVxuXG5mdW5jdGlvbiBzdWJ0cmFjdChkYXRlLCBhbW91bnQsIHVuaXQpIHtcbiAgcmV0dXJuIGRhdGUuc3VidHJhY3QoYW1vdW50LCB1bml0KTtcbn1cblxuZnVuY3Rpb24gZ2V0JDEoZGF0ZSwgdW5pdCkge1xuICByZXR1cm4gZGF0ZS5nZXQodW5pdCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXJ0T2YoZGF0ZSwgdW5pdCkge1xuICByZXR1cm4gZGF0ZS5zdGFydE9mKHVuaXQpO1xufVxuXG4vLyAqKiBEYXRlIENvbnN0cnVjdG9ycyAqKlxuXG5mdW5jdGlvbiBuZXdEYXRlKHBvaW50KSB7XG4gIHJldHVybiBtb21lbnQocG9pbnQpO1xufVxuXG5mdW5jdGlvbiBuZXdEYXRlV2l0aE9mZnNldCh1dGNPZmZzZXQpIHtcbiAgcmV0dXJuIG1vbWVudCgpLnV0YygpLnV0Y09mZnNldCh1dGNPZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBub3cobWF5YmVGaXhlZFV0Y09mZnNldCkge1xuICBpZiAobWF5YmVGaXhlZFV0Y09mZnNldCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ld0RhdGUoKTtcbiAgfVxuICByZXR1cm4gbmV3RGF0ZVdpdGhPZmZzZXQobWF5YmVGaXhlZFV0Y09mZnNldCk7XG59XG5cbmZ1bmN0aW9uIGNsb25lRGF0ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLmNsb25lKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZSh2YWx1ZSwgX3JlZikge1xuICB2YXIgZGF0ZUZvcm1hdCA9IF9yZWYuZGF0ZUZvcm1hdCxcbiAgICAgIGxvY2FsZSA9IF9yZWYubG9jYWxlO1xuXG4gIHZhciBtID0gbW9tZW50KHZhbHVlLCBkYXRlRm9ybWF0LCBsb2NhbGUgfHwgbW9tZW50LmxvY2FsZSgpLCB0cnVlKTtcbiAgcmV0dXJuIG0uaXNWYWxpZCgpID8gbSA6IG51bGw7XG59XG5cbi8vICoqIERhdGUgXCJSZWZsZWN0aW9uXCIgKipcblxuZnVuY3Rpb24gaXNNb21lbnQoZGF0ZSkge1xuICByZXR1cm4gbW9tZW50LmlzTW9tZW50KGRhdGUpO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZGF0ZSkge1xuICByZXR1cm4gbW9tZW50LmlzRGF0ZShkYXRlKTtcbn1cblxuLy8gKiogRGF0ZSBGb3JtYXR0aW5nICoqXG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0KSB7XG4gIHJldHVybiBkYXRlLmZvcm1hdChmb3JtYXQpO1xufVxuXG5mdW5jdGlvbiBzYWZlRGF0ZUZvcm1hdChkYXRlLCBfcmVmMikge1xuICB2YXIgZGF0ZUZvcm1hdCA9IF9yZWYyLmRhdGVGb3JtYXQsXG4gICAgICBsb2NhbGUgPSBfcmVmMi5sb2NhbGU7XG5cbiAgcmV0dXJuIGRhdGUgJiYgZGF0ZS5jbG9uZSgpLmxvY2FsZShsb2NhbGUgfHwgbW9tZW50LmxvY2FsZSgpKS5mb3JtYXQoQXJyYXkuaXNBcnJheShkYXRlRm9ybWF0KSA/IGRhdGVGb3JtYXRbMF0gOiBkYXRlRm9ybWF0KSB8fCBcIlwiO1xufVxuXG4vLyAqKiBEYXRlIFNldHRlcnMgKipcblxuZnVuY3Rpb24gc2V0VGltZShkYXRlLCBfcmVmMykge1xuICB2YXIgaG91ciA9IF9yZWYzLmhvdXIsXG4gICAgICBtaW51dGUgPSBfcmVmMy5taW51dGUsXG4gICAgICBzZWNvbmQgPSBfcmVmMy5zZWNvbmQ7XG5cbiAgZGF0ZS5zZXQoeyBob3VyOiBob3VyLCBtaW51dGU6IG1pbnV0ZSwgc2Vjb25kOiBzZWNvbmQgfSk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBzZXRNb250aChkYXRlLCBtb250aCkge1xuICByZXR1cm4gc2V0JDEoZGF0ZSwgXCJtb250aFwiLCBtb250aCk7XG59XG5cbmZ1bmN0aW9uIHNldFllYXIoZGF0ZSwgeWVhcikge1xuICByZXR1cm4gc2V0JDEoZGF0ZSwgXCJ5ZWFyXCIsIHllYXIpO1xufVxuXG5cblxuLy8gKiogRGF0ZSBHZXR0ZXJzICoqXG5cbmZ1bmN0aW9uIGdldFNlY29uZChkYXRlKSB7XG4gIHJldHVybiBnZXQkMShkYXRlLCBcInNlY29uZFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWludXRlKGRhdGUpIHtcbiAgcmV0dXJuIGdldCQxKGRhdGUsIFwibWludXRlXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRIb3VyKGRhdGUpIHtcbiAgcmV0dXJuIGdldCQxKGRhdGUsIFwiaG91clwiKTtcbn1cblxuLy8gUmV0dXJucyBkYXkgb2Ygd2Vla1xuZnVuY3Rpb24gZ2V0RGF5KGRhdGUpIHtcbiAgcmV0dXJuIGdldCQxKGRhdGUsIFwiZGF5XCIpO1xufVxuXG5mdW5jdGlvbiBnZXRXZWVrKGRhdGUpIHtcbiAgcmV0dXJuIGdldCQxKGRhdGUsIFwid2Vla1wiKTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9udGgoZGF0ZSkge1xuICByZXR1cm4gZ2V0JDEoZGF0ZSwgXCJtb250aFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0WWVhcihkYXRlKSB7XG4gIHJldHVybiBnZXQkMShkYXRlLCBcInllYXJcIik7XG59XG5cbi8vIFJldHVybnMgZGF5IG9mIG1vbnRoXG5mdW5jdGlvbiBnZXREYXRlKGRhdGUpIHtcbiAgcmV0dXJuIGdldCQxKGRhdGUsIFwiZGF0ZVwiKTtcbn1cblxuXG5cbmZ1bmN0aW9uIGdldERheU9mV2Vla0NvZGUoZGF5KSB7XG4gIHJldHVybiBkYXlPZldlZWtDb2Rlc1tkYXkuaXNvV2Vla2RheSgpXTtcbn1cblxuLy8gKioqIFN0YXJ0IG9mICoqKlxuXG5mdW5jdGlvbiBnZXRTdGFydE9mRGF5KGRhdGUpIHtcbiAgcmV0dXJuIGdldFN0YXJ0T2YoZGF0ZSwgXCJkYXlcIik7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXJ0T2ZXZWVrKGRhdGUpIHtcbiAgcmV0dXJuIGdldFN0YXJ0T2YoZGF0ZSwgXCJ3ZWVrXCIpO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRPZk1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIGdldFN0YXJ0T2YoZGF0ZSwgXCJtb250aFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhcnRPZkRhdGUoZGF0ZSkge1xuICByZXR1cm4gZ2V0U3RhcnRPZihkYXRlLCBcImRhdGVcIik7XG59XG5cbi8vICoqKiBFbmQgb2YgKioqXG5cblxuXG5cblxuLy8gKiogRGF0ZSBNYXRoICoqXG5cbi8vICoqKiBBZGRpdGlvbiAqKipcblxuZnVuY3Rpb24gYWRkTWludXRlcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZChkYXRlLCBhbW91bnQsIFwibWludXRlc1wiKTtcbn1cblxuZnVuY3Rpb24gYWRkSG91cnMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGQoZGF0ZSwgYW1vdW50LCBcImhvdXJzXCIpO1xufVxuXG5mdW5jdGlvbiBhZGREYXlzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkKGRhdGUsIGFtb3VudCwgXCJkYXlzXCIpO1xufVxuXG5mdW5jdGlvbiBhZGRXZWVrcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZChkYXRlLCBhbW91bnQsIFwid2Vla3NcIik7XG59XG5cbmZ1bmN0aW9uIGFkZE1vbnRocyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZChkYXRlLCBhbW91bnQsIFwibW9udGhzXCIpO1xufVxuXG5mdW5jdGlvbiBhZGRZZWFycyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZChkYXRlLCBhbW91bnQsIFwieWVhcnNcIik7XG59XG5cbi8vICoqKiBTdWJ0cmFjdGlvbiAqKipcbmZ1bmN0aW9uIHN1YnRyYWN0RGF5cyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIHN1YnRyYWN0KGRhdGUsIGFtb3VudCwgXCJkYXlzXCIpO1xufVxuXG5mdW5jdGlvbiBzdWJ0cmFjdFdlZWtzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gc3VidHJhY3QoZGF0ZSwgYW1vdW50LCBcIndlZWtzXCIpO1xufVxuXG5mdW5jdGlvbiBzdWJ0cmFjdE1vbnRocyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIHN1YnRyYWN0KGRhdGUsIGFtb3VudCwgXCJtb250aHNcIik7XG59XG5cbmZ1bmN0aW9uIHN1YnRyYWN0WWVhcnMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBzdWJ0cmFjdChkYXRlLCBhbW91bnQsIFwieWVhcnNcIik7XG59XG5cbi8vICoqIERhdGUgQ29tcGFyaXNvbiAqKlxuXG5mdW5jdGlvbiBpc0JlZm9yZShkYXRlMSwgZGF0ZTIpIHtcbiAgcmV0dXJuIGRhdGUxLmlzQmVmb3JlKGRhdGUyKTtcbn1cblxuZnVuY3Rpb24gaXNBZnRlcihkYXRlMSwgZGF0ZTIpIHtcbiAgcmV0dXJuIGRhdGUxLmlzQWZ0ZXIoZGF0ZTIpO1xufVxuXG5mdW5jdGlvbiBlcXVhbHMoZGF0ZTEsIGRhdGUyKSB7XG4gIHJldHVybiBkYXRlMS5pc1NhbWUoZGF0ZTIpO1xufVxuXG5mdW5jdGlvbiBpc1NhbWVZZWFyKGRhdGUxLCBkYXRlMikge1xuICBpZiAoZGF0ZTEgJiYgZGF0ZTIpIHtcbiAgICByZXR1cm4gZGF0ZTEuaXNTYW1lKGRhdGUyLCBcInllYXJcIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICFkYXRlMSAmJiAhZGF0ZTI7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lTW9udGgoZGF0ZTEsIGRhdGUyKSB7XG4gIGlmIChkYXRlMSAmJiBkYXRlMikge1xuICAgIHJldHVybiBkYXRlMS5pc1NhbWUoZGF0ZTIsIFwibW9udGhcIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICFkYXRlMSAmJiAhZGF0ZTI7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lRGF5KG1vbWVudDEsIG1vbWVudDIpIHtcbiAgaWYgKG1vbWVudDEgJiYgbW9tZW50Mikge1xuICAgIHJldHVybiBtb21lbnQxLmlzU2FtZShtb21lbnQyLCBcImRheVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gIW1vbWVudDEgJiYgIW1vbWVudDI7XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIGlzRGF5SW5SYW5nZShkYXksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuICB2YXIgYmVmb3JlID0gc3RhcnREYXRlLmNsb25lKCkuc3RhcnRPZihcImRheVwiKS5zdWJ0cmFjdCgxLCBcInNlY29uZHNcIik7XG4gIHZhciBhZnRlciA9IGVuZERhdGUuY2xvbmUoKS5zdGFydE9mKFwiZGF5XCIpLmFkZCgxLCBcInNlY29uZHNcIik7XG4gIHJldHVybiBkYXkuY2xvbmUoKS5zdGFydE9mKFwiZGF5XCIpLmlzQmV0d2VlbihiZWZvcmUsIGFmdGVyKTtcbn1cblxuLy8gKioqIERpZmZpbmcgKioqXG5cblxuXG4vLyAqKiBEYXRlIExvY2FsaXphdGlvbiAqKlxuXG5mdW5jdGlvbiBsb2NhbGl6ZURhdGUoZGF0ZSwgbG9jYWxlKSB7XG4gIHJldHVybiBkYXRlLmNsb25lKCkubG9jYWxlKGxvY2FsZSB8fCBtb21lbnQubG9jYWxlKCkpO1xufVxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBnZXRMb2NhbGVEYXRhKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUubG9jYWxlRGF0YSgpO1xufVxuXG5mdW5jdGlvbiBnZXRMb2NhbGVEYXRhRm9yTG9jYWxlKGxvY2FsZSkge1xuICByZXR1cm4gbW9tZW50LmxvY2FsZURhdGEobG9jYWxlKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkV2Vla2RheUluTG9jYWxlKGxvY2FsZSwgZGF0ZSwgZm9ybWF0RnVuYykge1xuICByZXR1cm4gZm9ybWF0RnVuYyhsb2NhbGUud2Vla2RheXMoZGF0ZSkpO1xufVxuXG5mdW5jdGlvbiBnZXRXZWVrZGF5TWluSW5Mb2NhbGUobG9jYWxlLCBkYXRlKSB7XG4gIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW4oZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGdldFdlZWtkYXlTaG9ydEluTG9jYWxlKGxvY2FsZSwgZGF0ZSkge1xuICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnQoZGF0ZSk7XG59XG5cbi8vIFRPRE8gd2hhdCBpcyB0aGlzIGZvcm1hdCBleGFjdGx5P1xuZnVuY3Rpb24gZ2V0TW9udGhJbkxvY2FsZShsb2NhbGUsIGRhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gbG9jYWxlLm1vbnRocyhkYXRlLCBmb3JtYXQpO1xufVxuXG5mdW5jdGlvbiBnZXRNb250aFNob3J0SW5Mb2NhbGUobG9jYWxlLCBkYXRlKSB7XG4gIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnQoZGF0ZSk7XG59XG5cbi8vICoqIFV0aWxzIGZvciBzb21lIGNvbXBvbmVudHMgKipcblxuZnVuY3Rpb24gaXNEYXlEaXNhYmxlZChkYXkpIHtcbiAgdmFyIF9yZWY0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIG1pbkRhdGUgPSBfcmVmNC5taW5EYXRlLFxuICAgICAgbWF4RGF0ZSA9IF9yZWY0Lm1heERhdGUsXG4gICAgICBleGNsdWRlRGF0ZXMgPSBfcmVmNC5leGNsdWRlRGF0ZXMsXG4gICAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmNC5pbmNsdWRlRGF0ZXMsXG4gICAgICBmaWx0ZXJEYXRlID0gX3JlZjQuZmlsdGVyRGF0ZTtcblxuICByZXR1cm4gbWluRGF0ZSAmJiBkYXkuaXNCZWZvcmUobWluRGF0ZSwgXCJkYXlcIikgfHwgbWF4RGF0ZSAmJiBkYXkuaXNBZnRlcihtYXhEYXRlLCBcImRheVwiKSB8fCBleGNsdWRlRGF0ZXMgJiYgZXhjbHVkZURhdGVzLnNvbWUoZnVuY3Rpb24gKGV4Y2x1ZGVEYXRlKSB7XG4gICAgcmV0dXJuIGlzU2FtZURheShkYXksIGV4Y2x1ZGVEYXRlKTtcbiAgfSkgfHwgaW5jbHVkZURhdGVzICYmICFpbmNsdWRlRGF0ZXMuc29tZShmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICByZXR1cm4gaXNTYW1lRGF5KGRheSwgaW5jbHVkZURhdGUpO1xuICB9KSB8fCBmaWx0ZXJEYXRlICYmICFmaWx0ZXJEYXRlKGRheS5jbG9uZSgpKSB8fCBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUaW1lRGlzYWJsZWQodGltZSwgZGlzYWJsZWRUaW1lcykge1xuICB2YXIgbCA9IGRpc2FibGVkVGltZXMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChkaXNhYmxlZFRpbWVzW2ldLmdldChcImhvdXJzXCIpID09PSB0aW1lLmdldChcImhvdXJzXCIpICYmIGRpc2FibGVkVGltZXNbaV0uZ2V0KFwibWludXRlc1wiKSA9PT0gdGltZS5nZXQoXCJtaW51dGVzXCIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVGltZUluRGlzYWJsZWRSYW5nZSh0aW1lLCBfcmVmNSkge1xuICB2YXIgbWluVGltZSA9IF9yZWY1Lm1pblRpbWUsXG4gICAgICBtYXhUaW1lID0gX3JlZjUubWF4VGltZTtcblxuICBpZiAoIW1pblRpbWUgfHwgIW1heFRpbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb3RoIG1pblRpbWUgYW5kIG1heFRpbWUgcHJvcHMgcmVxdWlyZWRcIik7XG4gIH1cblxuICB2YXIgYmFzZSA9IG1vbWVudCgpLmhvdXJzKDApLm1pbnV0ZXMoMCkuc2Vjb25kcygwKTtcbiAgdmFyIGJhc2VUaW1lID0gYmFzZS5jbG9uZSgpLmhvdXJzKHRpbWUuZ2V0KFwiaG91cnNcIikpLm1pbnV0ZXModGltZS5nZXQoXCJtaW51dGVzXCIpKTtcbiAgdmFyIG1pbiA9IGJhc2UuY2xvbmUoKS5ob3VycyhtaW5UaW1lLmdldChcImhvdXJzXCIpKS5taW51dGVzKG1pblRpbWUuZ2V0KFwibWludXRlc1wiKSk7XG4gIHZhciBtYXggPSBiYXNlLmNsb25lKCkuaG91cnMobWF4VGltZS5nZXQoXCJob3Vyc1wiKSkubWludXRlcyhtYXhUaW1lLmdldChcIm1pbnV0ZXNcIikpO1xuXG4gIHJldHVybiAhKGJhc2VUaW1lLmlzU2FtZU9yQWZ0ZXIobWluKSAmJiBiYXNlVGltZS5pc1NhbWVPckJlZm9yZShtYXgpKTtcbn1cblxuZnVuY3Rpb24gYWxsRGF5c0Rpc2FibGVkQmVmb3JlKGRheSwgdW5pdCkge1xuICB2YXIgX3JlZjYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgbWluRGF0ZSA9IF9yZWY2Lm1pbkRhdGUsXG4gICAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmNi5pbmNsdWRlRGF0ZXM7XG5cbiAgdmFyIGRhdGVCZWZvcmUgPSBkYXkuY2xvbmUoKS5zdWJ0cmFjdCgxLCB1bml0KTtcbiAgcmV0dXJuIG1pbkRhdGUgJiYgZGF0ZUJlZm9yZS5pc0JlZm9yZShtaW5EYXRlLCB1bml0KSB8fCBpbmNsdWRlRGF0ZXMgJiYgaW5jbHVkZURhdGVzLmV2ZXJ5KGZ1bmN0aW9uIChpbmNsdWRlRGF0ZSkge1xuICAgIHJldHVybiBkYXRlQmVmb3JlLmlzQmVmb3JlKGluY2x1ZGVEYXRlLCB1bml0KTtcbiAgfSkgfHwgZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFsbERheXNEaXNhYmxlZEFmdGVyKGRheSwgdW5pdCkge1xuICB2YXIgX3JlZjcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgbWF4RGF0ZSA9IF9yZWY3Lm1heERhdGUsXG4gICAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmNy5pbmNsdWRlRGF0ZXM7XG5cbiAgdmFyIGRhdGVBZnRlciA9IGRheS5jbG9uZSgpLmFkZCgxLCB1bml0KTtcbiAgcmV0dXJuIG1heERhdGUgJiYgZGF0ZUFmdGVyLmlzQWZ0ZXIobWF4RGF0ZSwgdW5pdCkgfHwgaW5jbHVkZURhdGVzICYmIGluY2x1ZGVEYXRlcy5ldmVyeShmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICByZXR1cm4gZGF0ZUFmdGVyLmlzQWZ0ZXIoaW5jbHVkZURhdGUsIHVuaXQpO1xuICB9KSB8fCBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RWZmZWN0aXZlTWluRGF0ZShfcmVmOCkge1xuICB2YXIgbWluRGF0ZSA9IF9yZWY4Lm1pbkRhdGUsXG4gICAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmOC5pbmNsdWRlRGF0ZXM7XG5cbiAgaWYgKGluY2x1ZGVEYXRlcyAmJiBtaW5EYXRlKSB7XG4gICAgcmV0dXJuIG1vbWVudC5taW4oaW5jbHVkZURhdGVzLmZpbHRlcihmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICAgIHJldHVybiBtaW5EYXRlLmlzU2FtZU9yQmVmb3JlKGluY2x1ZGVEYXRlLCBcImRheVwiKTtcbiAgICB9KSk7XG4gIH0gZWxzZSBpZiAoaW5jbHVkZURhdGVzKSB7XG4gICAgcmV0dXJuIG1vbWVudC5taW4oaW5jbHVkZURhdGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWluRGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFZmZlY3RpdmVNYXhEYXRlKF9yZWY5KSB7XG4gIHZhciBtYXhEYXRlID0gX3JlZjkubWF4RGF0ZSxcbiAgICAgIGluY2x1ZGVEYXRlcyA9IF9yZWY5LmluY2x1ZGVEYXRlcztcblxuICBpZiAoaW5jbHVkZURhdGVzICYmIG1heERhdGUpIHtcbiAgICByZXR1cm4gbW9tZW50Lm1heChpbmNsdWRlRGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChpbmNsdWRlRGF0ZSkge1xuICAgICAgcmV0dXJuIG1heERhdGUuaXNTYW1lT3JBZnRlcihpbmNsdWRlRGF0ZSwgXCJkYXlcIik7XG4gICAgfSkpO1xuICB9IGVsc2UgaWYgKGluY2x1ZGVEYXRlcykge1xuICAgIHJldHVybiBtb21lbnQubWF4KGluY2x1ZGVEYXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1heERhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SGlnaHRMaWdodERheXNNYXAoKSB7XG4gIHZhciBoaWdobGlnaHREYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHZhciBkZWZhdWx0Q2xhc3NOYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWRcIjtcblxuICB2YXIgZGF0ZUNsYXNzZXMgPSBuZXcgTWFwKCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBoaWdobGlnaHREYXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBvYmogPSBoaWdobGlnaHREYXRlc1tpXTtcbiAgICBpZiAoaXNNb21lbnQob2JqKSkge1xuICAgICAgdmFyIGtleSA9IG9iai5mb3JtYXQoXCJNTS5ERC5ZWVlZXCIpO1xuICAgICAgdmFyIGNsYXNzTmFtZXNBcnIgPSBkYXRlQ2xhc3Nlcy5nZXQoa2V5KSB8fCBbXTtcbiAgICAgIGlmICghY2xhc3NOYW1lc0Fyci5pbmNsdWRlcyhkZWZhdWx0Q2xhc3NOYW1lKSkge1xuICAgICAgICBjbGFzc05hbWVzQXJyLnB1c2goZGVmYXVsdENsYXNzTmFtZSk7XG4gICAgICAgIGRhdGVDbGFzc2VzLnNldChrZXksIGNsYXNzTmFtZXNBcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGtleXNbMF07XG4gICAgICB2YXIgYXJyT2ZNb21lbnRzID0gb2JqW2tleXNbMF1dO1xuICAgICAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgYXJyT2ZNb21lbnRzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICBmb3IgKHZhciBrID0gMCwgX2xlbiA9IGFyck9mTW9tZW50cy5sZW5ndGg7IGsgPCBfbGVuOyBrKyspIHtcbiAgICAgICAgICB2YXIgX2tleSA9IGFyck9mTW9tZW50c1trXS5mb3JtYXQoXCJNTS5ERC5ZWVlZXCIpO1xuICAgICAgICAgIHZhciBfY2xhc3NOYW1lc0FyciA9IGRhdGVDbGFzc2VzLmdldChfa2V5KSB8fCBbXTtcbiAgICAgICAgICBpZiAoIV9jbGFzc05hbWVzQXJyLmluY2x1ZGVzKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgIF9jbGFzc05hbWVzQXJyLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIGRhdGVDbGFzc2VzLnNldChfa2V5LCBfY2xhc3NOYW1lc0Fycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVDbGFzc2VzO1xufVxuXG5mdW5jdGlvbiB0aW1lc1RvSW5qZWN0QWZ0ZXIoc3RhcnRPZkRheSwgY3VycmVudFRpbWUsIGN1cnJlbnRNdWx0aXBsaWVyLCBpbnRlcnZhbHMsIGluamVjdGVkVGltZXMpIHtcbiAgdmFyIGwgPSBpbmplY3RlZFRpbWVzLmxlbmd0aDtcbiAgdmFyIHRpbWVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGluamVjdGVkVGltZSA9IGFkZE1pbnV0ZXMoYWRkSG91cnMoY2xvbmVEYXRlKHN0YXJ0T2ZEYXkpLCBnZXRIb3VyKGluamVjdGVkVGltZXNbaV0pKSwgZ2V0TWludXRlKGluamVjdGVkVGltZXNbaV0pKTtcbiAgICB2YXIgbmV4dFRpbWUgPSBhZGRNaW51dGVzKGNsb25lRGF0ZShzdGFydE9mRGF5KSwgKGN1cnJlbnRNdWx0aXBsaWVyICsgMSkgKiBpbnRlcnZhbHMpO1xuXG4gICAgaWYgKGluamVjdGVkVGltZS5pc0JldHdlZW4oY3VycmVudFRpbWUsIG5leHRUaW1lKSkge1xuICAgICAgdGltZXMucHVzaChpbmplY3RlZFRpbWVzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGltZXM7XG59XG5cbnZhciBXcmFwcGVkWWVhckRyb3Bkb3duT3B0aW9ucyA9IG9uQ2xpY2tPdXRzaWRlKFllYXJEcm9wZG93bk9wdGlvbnMpO1xuXG52YXIgWWVhckRyb3Bkb3duID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgaW5oZXJpdHMoWWVhckRyb3Bkb3duLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBZZWFyRHJvcGRvd24oKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFllYXJEcm9wZG93bik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRyb3Bkb3duVmlzaWJsZTogZmFsc2VcbiAgICB9LCBfdGhpcy5yZW5kZXJTZWxlY3RPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1pblllYXIgPSBfdGhpcy5wcm9wcy5taW5EYXRlID8gZ2V0WWVhcihfdGhpcy5wcm9wcy5taW5EYXRlKSA6IDE5MDA7XG4gICAgICB2YXIgbWF4WWVhciA9IF90aGlzLnByb3BzLm1heERhdGUgPyBnZXRZZWFyKF90aGlzLnByb3BzLm1heERhdGUpIDogMjEwMDtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSBtaW5ZZWFyOyBpIDw9IG1heFllYXI7IGkrKykge1xuICAgICAgICBvcHRpb25zLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcIm9wdGlvblwiLFxuICAgICAgICAgIHsga2V5OiBpLCB2YWx1ZTogaSB9LFxuICAgICAgICAgIGlcbiAgICAgICAgKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9LCBfdGhpcy5vblNlbGVjdENoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgfSwgX3RoaXMucmVuZGVyU2VsZWN0TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcInNlbGVjdFwiLFxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IF90aGlzLnByb3BzLnllYXIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItc2VsZWN0XCIsXG4gICAgICAgICAgb25DaGFuZ2U6IF90aGlzLm9uU2VsZWN0Q2hhbmdlXG4gICAgICAgIH0sXG4gICAgICAgIF90aGlzLnJlbmRlclNlbGVjdE9wdGlvbnMoKVxuICAgICAgKTtcbiAgICB9LCBfdGhpcy5yZW5kZXJSZWFkVmlldyA9IGZ1bmN0aW9uICh2aXNpYmxlKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIGtleTogXCJyZWFkXCIsXG4gICAgICAgICAgc3R5bGU6IHsgdmlzaWJpbGl0eTogdmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIiB9LFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlld1wiLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50b2dnbGVEcm9wZG93bihldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvd1wiIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1zZWxlY3RlZC15ZWFyXCIgfSxcbiAgICAgICAgICBfdGhpcy5wcm9wcy55ZWFyXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSwgX3RoaXMucmVuZGVyRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkWWVhckRyb3Bkb3duT3B0aW9ucywge1xuICAgICAgICBrZXk6IFwiZHJvcGRvd25cIixcbiAgICAgICAgcmVmOiBcIm9wdGlvbnNcIixcbiAgICAgICAgeWVhcjogX3RoaXMucHJvcHMueWVhcixcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLm9uQ2hhbmdlLFxuICAgICAgICBvbkNhbmNlbDogX3RoaXMudG9nZ2xlRHJvcGRvd24sXG4gICAgICAgIG1pbkRhdGU6IF90aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgIG1heERhdGU6IF90aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgIHNjcm9sbGFibGVZZWFyRHJvcGRvd246IF90aGlzLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd24sXG4gICAgICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI6IF90aGlzLnByb3BzLnllYXJEcm9wZG93bkl0ZW1OdW1iZXJcbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLnJlbmRlclNjcm9sbE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZHJvcGRvd25WaXNpYmxlID0gX3RoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gW190aGlzLnJlbmRlclJlYWRWaWV3KCFkcm9wZG93blZpc2libGUpXTtcbiAgICAgIGlmIChkcm9wZG93blZpc2libGUpIHtcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQoX3RoaXMucmVuZGVyRHJvcGRvd24oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIF90aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgIF90aGlzLnRvZ2dsZURyb3Bkb3duKCk7XG4gICAgICBpZiAoeWVhciA9PT0gX3RoaXMucHJvcHMueWVhcikgcmV0dXJuO1xuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoeWVhcik7XG4gICAgfSwgX3RoaXMudG9nZ2xlRHJvcGRvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJvcGRvd25WaXNpYmxlOiAhX3RoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVZZWFyQ2hhbmdlKF90aGlzLnByb3BzLmRhdGUsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlWWVhckNoYW5nZSA9IGZ1bmN0aW9uIChkYXRlLCBldmVudCkge1xuICAgICAgX3RoaXMub25TZWxlY3QoZGF0ZSwgZXZlbnQpO1xuICAgICAgX3RoaXMuc2V0T3BlbigpO1xuICAgIH0sIF90aGlzLm9uU2VsZWN0ID0gZnVuY3Rpb24gKGRhdGUsIGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25TZWxlY3QpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoZGF0ZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLnNldE9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2V0T3Blbikge1xuICAgICAgICBfdGhpcy5wcm9wcy5zZXRPcGVuKHRydWUpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBZZWFyRHJvcGRvd24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcmVuZGVyZWREcm9wZG93biA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZHJvcGRvd25Nb2RlKSB7XG4gICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNjcm9sbE1vZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNlbGVjdE1vZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi1jb250YWluZXIgcmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi1jb250YWluZXItLVwiICsgdGhpcy5wcm9wcy5kcm9wZG93bk1vZGVcbiAgICAgIH0sXG4gICAgICByZW5kZXJlZERyb3Bkb3duXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gWWVhckRyb3Bkb3duO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5ZZWFyRHJvcGRvd24ucHJvcFR5cGVzID0ge1xuICBhZGp1c3REYXRlT25DaGFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICBkcm9wZG93bk1vZGU6IFByb3BUeXBlcy5vbmVPZihbXCJzY3JvbGxcIiwgXCJzZWxlY3RcIl0pLmlzUmVxdWlyZWQsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1pbkRhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgeWVhcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICBkYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIHNldE9wZW46IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgTW9udGhEcm9wZG93bk9wdGlvbnMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhNb250aERyb3Bkb3duT3B0aW9ucywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9udGhEcm9wZG93bk9wdGlvbnMoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbnRoRHJvcGRvd25PcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnJlbmRlck9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMubW9udGhOYW1lcy5tYXAoZnVuY3Rpb24gKG1vbnRoLCBpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5wcm9wcy5tb250aCA9PT0gaSA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uIC0tc2VsZWN0ZWRfbW9udGhcIiA6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uXCIsXG4gICAgICAgICAgICBrZXk6IG1vbnRoLFxuICAgICAgICAgICAgcmVmOiBtb250aCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLm9uQ2hhbmdlLmJpbmQoX3RoaXMsIGkpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBfdGhpcy5wcm9wcy5tb250aCA9PT0gaSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbi0tc2VsZWN0ZWRcIiB9LFxuICAgICAgICAgICAgXCJcXHUyNzEzXCJcbiAgICAgICAgICApIDogXCJcIixcbiAgICAgICAgICBtb250aFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSwgX3RoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vbkNoYW5nZShtb250aCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uQ2FuY2VsKCk7XG4gICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1vbnRoRHJvcGRvd25PcHRpb25zLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd25cIiB9LFxuICAgICAgdGhpcy5yZW5kZXJPcHRpb25zKClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNb250aERyb3Bkb3duT3B0aW9ucztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9udGhEcm9wZG93bk9wdGlvbnMucHJvcFR5cGVzID0ge1xuICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1vbnRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG1vbnRoTmFtZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCkuaXNSZXF1aXJlZFxufTtcblxudmFyIFdyYXBwZWRNb250aERyb3Bkb3duT3B0aW9ucyA9IG9uQ2xpY2tPdXRzaWRlKE1vbnRoRHJvcGRvd25PcHRpb25zKTtcblxudmFyIE1vbnRoRHJvcGRvd24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhNb250aERyb3Bkb3duLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb250aERyb3Bkb3duKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBNb250aERyb3Bkb3duKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgZHJvcGRvd25WaXNpYmxlOiBmYWxzZVxuICAgIH0sIF90aGlzLnJlbmRlclNlbGVjdE9wdGlvbnMgPSBmdW5jdGlvbiAobW9udGhOYW1lcykge1xuICAgICAgcmV0dXJuIG1vbnRoTmFtZXMubWFwKGZ1bmN0aW9uIChNLCBpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwib3B0aW9uXCIsXG4gICAgICAgICAgeyBrZXk6IGksIHZhbHVlOiBpIH0sXG4gICAgICAgICAgTVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSwgX3RoaXMucmVuZGVyU2VsZWN0TW9kZSA9IGZ1bmN0aW9uIChtb250aE5hbWVzKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBfdGhpcy5wcm9wcy5tb250aCxcbiAgICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtc2VsZWN0XCIsXG4gICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfdGhpcy5yZW5kZXJTZWxlY3RPcHRpb25zKG1vbnRoTmFtZXMpXG4gICAgICApO1xuICAgIH0sIF90aGlzLnJlbmRlclJlYWRWaWV3ID0gZnVuY3Rpb24gKHZpc2libGUsIG1vbnRoTmFtZXMpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiBcInJlYWRcIixcbiAgICAgICAgICBzdHlsZTogeyB2aXNpYmlsaXR5OiB2aXNpYmxlID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiIH0sXG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlld1wiLFxuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLnRvZ2dsZURyb3Bkb3duXG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tZG93bi1hcnJvd1wiIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tc2VsZWN0ZWQtbW9udGhcIiB9LFxuICAgICAgICAgIG1vbnRoTmFtZXNbX3RoaXMucHJvcHMubW9udGhdXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSwgX3RoaXMucmVuZGVyRHJvcGRvd24gPSBmdW5jdGlvbiAobW9udGhOYW1lcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZE1vbnRoRHJvcGRvd25PcHRpb25zLCB7XG4gICAgICAgIGtleTogXCJkcm9wZG93blwiLFxuICAgICAgICByZWY6IFwib3B0aW9uc1wiLFxuICAgICAgICBtb250aDogX3RoaXMucHJvcHMubW9udGgsXG4gICAgICAgIG1vbnRoTmFtZXM6IG1vbnRoTmFtZXMsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgb25DYW5jZWw6IF90aGlzLnRvZ2dsZURyb3Bkb3duXG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5yZW5kZXJTY3JvbGxNb2RlID0gZnVuY3Rpb24gKG1vbnRoTmFtZXMpIHtcbiAgICAgIHZhciBkcm9wZG93blZpc2libGUgPSBfdGhpcy5zdGF0ZS5kcm9wZG93blZpc2libGU7XG5cbiAgICAgIHZhciByZXN1bHQgPSBbX3RoaXMucmVuZGVyUmVhZFZpZXcoIWRyb3Bkb3duVmlzaWJsZSwgbW9udGhOYW1lcyldO1xuICAgICAgaWYgKGRyb3Bkb3duVmlzaWJsZSkge1xuICAgICAgICByZXN1bHQudW5zaGlmdChfdGhpcy5yZW5kZXJEcm9wZG93bihtb250aE5hbWVzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIF90aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICBfdGhpcy50b2dnbGVEcm9wZG93bigpO1xuICAgICAgaWYgKG1vbnRoICE9PSBfdGhpcy5wcm9wcy5tb250aCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShtb250aCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMudG9nZ2xlRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkcm9wZG93blZpc2libGU6ICFfdGhpcy5zdGF0ZS5kcm9wZG93blZpc2libGVcbiAgICAgIH0pO1xuICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNb250aERyb3Bkb3duLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgbG9jYWxlRGF0YSA9IGdldExvY2FsZURhdGFGb3JMb2NhbGUodGhpcy5wcm9wcy5sb2NhbGUpO1xuICAgIHZhciBtb250aE5hbWVzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV0ubWFwKHRoaXMucHJvcHMudXNlU2hvcnRNb250aEluRHJvcGRvd24gPyBmdW5jdGlvbiAoTSkge1xuICAgICAgcmV0dXJuIGdldE1vbnRoU2hvcnRJbkxvY2FsZShsb2NhbGVEYXRhLCBuZXdEYXRlKHsgTTogTSB9KSk7XG4gICAgfSA6IGZ1bmN0aW9uIChNKSB7XG4gICAgICByZXR1cm4gZ2V0TW9udGhJbkxvY2FsZShsb2NhbGVEYXRhLCBuZXdEYXRlKHsgTTogTSB9KSwgX3RoaXMyLnByb3BzLmRhdGVGb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgdmFyIHJlbmRlcmVkRHJvcGRvd24gPSB2b2lkIDA7XG4gICAgc3dpdGNoICh0aGlzLnByb3BzLmRyb3Bkb3duTW9kZSkge1xuICAgICAgY2FzZSBcInNjcm9sbFwiOlxuICAgICAgICByZW5kZXJlZERyb3Bkb3duID0gdGhpcy5yZW5kZXJTY3JvbGxNb2RlKG1vbnRoTmFtZXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2VsZWN0TW9kZShtb250aE5hbWVzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24tY29udGFpbmVyIHJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duLWNvbnRhaW5lci0tXCIgKyB0aGlzLnByb3BzLmRyb3Bkb3duTW9kZVxuICAgICAgfSxcbiAgICAgIHJlbmRlcmVkRHJvcGRvd25cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNb250aERyb3Bkb3duO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb250aERyb3Bkb3duLnByb3BUeXBlcyA9IHtcbiAgZHJvcGRvd25Nb2RlOiBQcm9wVHlwZXMub25lT2YoW1wic2Nyb2xsXCIsIFwic2VsZWN0XCJdKS5pc1JlcXVpcmVkLFxuICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRhdGVGb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbW9udGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVNb250aFllYXJzKG1pbkRhdGUsIG1heERhdGUpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICB2YXIgY3VyckRhdGUgPSBnZXRTdGFydE9mTW9udGgoY2xvbmVEYXRlKG1pbkRhdGUpKTtcbiAgdmFyIGxhc3REYXRlID0gZ2V0U3RhcnRPZk1vbnRoKGNsb25lRGF0ZShtYXhEYXRlKSk7XG5cbiAgd2hpbGUgKCFpc0FmdGVyKGN1cnJEYXRlLCBsYXN0RGF0ZSkpIHtcbiAgICBsaXN0LnB1c2goY2xvbmVEYXRlKGN1cnJEYXRlKSk7XG5cbiAgICBhZGRNb250aHMoY3VyckRhdGUsIDEpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbnZhciBNb250aFllYXJEcm9wZG93bk9wdGlvbnMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhNb250aFllYXJEcm9wZG93bk9wdGlvbnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucyhwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucyk7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMucmVuZGVyT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zdGF0ZS5tb250aFllYXJzTGlzdC5tYXAoZnVuY3Rpb24gKG1vbnRoWWVhcikge1xuICAgICAgICB2YXIgbW9udGhZZWFyUG9pbnQgPSBtb250aFllYXIudmFsdWVPZigpO1xuXG4gICAgICAgIHZhciBpc1NhbWVNb250aFllYXIgPSBpc1NhbWVZZWFyKF90aGlzLnByb3BzLmRhdGUsIG1vbnRoWWVhcikgJiYgaXNTYW1lTW9udGgoX3RoaXMucHJvcHMuZGF0ZSwgbW9udGhZZWFyKTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogaXNTYW1lTW9udGhZZWFyID8gXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbiAtLXNlbGVjdGVkX21vbnRoLXllYXJcIiA6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb25cIixcbiAgICAgICAgICAgIGtleTogbW9udGhZZWFyUG9pbnQsXG4gICAgICAgICAgICByZWY6IG1vbnRoWWVhclBvaW50LFxuICAgICAgICAgICAgb25DbGljazogX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcywgbW9udGhZZWFyUG9pbnQpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc1NhbWVNb250aFllYXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbi0tc2VsZWN0ZWRcIiB9LFxuICAgICAgICAgICAgXCJcXHUyNzEzXCJcbiAgICAgICAgICApIDogXCJcIixcbiAgICAgICAgICBmb3JtYXREYXRlKG1vbnRoWWVhciwgX3RoaXMucHJvcHMuZGF0ZUZvcm1hdClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChtb250aFllYXIpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vbkNoYW5nZShtb250aFllYXIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGlja091dHNpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vbnRoWWVhcnNMaXN0OiBnZW5lcmF0ZU1vbnRoWWVhcnMoX3RoaXMucHJvcHMubWluRGF0ZSwgX3RoaXMucHJvcHMubWF4RGF0ZSlcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIE1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBkcm9wZG93bkNsYXNzID0gY2xhc3NuYW1lcyh7XG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd25cIjogdHJ1ZSxcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93bi0tc2Nyb2xsYWJsZVwiOiB0aGlzLnByb3BzLnNjcm9sbGFibGVNb250aFllYXJEcm9wZG93blxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBjbGFzc05hbWU6IGRyb3Bkb3duQ2xhc3MgfSxcbiAgICAgIHRoaXMucmVuZGVyT3B0aW9ucygpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTW9udGhZZWFyRHJvcGRvd25PcHRpb25zO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb250aFllYXJEcm9wZG93bk9wdGlvbnMucHJvcFR5cGVzID0ge1xuICBtaW5EYXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBkYXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGRhdGVGb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufTtcblxudmFyIFdyYXBwZWRNb250aFllYXJEcm9wZG93bk9wdGlvbnMgPSBvbkNsaWNrT3V0c2lkZShNb250aFllYXJEcm9wZG93bk9wdGlvbnMpO1xuXG52YXIgTW9udGhZZWFyRHJvcGRvd24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhNb250aFllYXJEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9udGhZZWFyRHJvcGRvd24oKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbnRoWWVhckRyb3Bkb3duKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgZHJvcGRvd25WaXNpYmxlOiBmYWxzZVxuICAgIH0sIF90aGlzLnJlbmRlclNlbGVjdE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VyckRhdGUgPSBnZXRTdGFydE9mTW9udGgobG9jYWxpemVEYXRlKF90aGlzLnByb3BzLm1pbkRhdGUsIF90aGlzLnByb3BzLmxvY2FsZSkpO1xuICAgICAgdmFyIGxhc3REYXRlID0gZ2V0U3RhcnRPZk1vbnRoKGxvY2FsaXplRGF0ZShfdGhpcy5wcm9wcy5tYXhEYXRlLCBfdGhpcy5wcm9wcy5sb2NhbGUpKTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKCFpc0FmdGVyKGN1cnJEYXRlLCBsYXN0RGF0ZSkpIHtcbiAgICAgICAgdmFyIHRpbWVwb2ludCA9IGN1cnJEYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgb3B0aW9ucy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJvcHRpb25cIixcbiAgICAgICAgICB7IGtleTogdGltZXBvaW50LCB2YWx1ZTogdGltZXBvaW50IH0sXG4gICAgICAgICAgZm9ybWF0RGF0ZShjdXJyRGF0ZSwgX3RoaXMucHJvcHMuZGF0ZUZvcm1hdClcbiAgICAgICAgKSk7XG5cbiAgICAgICAgYWRkTW9udGhzKGN1cnJEYXRlLCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSwgX3RoaXMub25TZWxlY3RDaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMub25DaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xuICAgIH0sIF90aGlzLnJlbmRlclNlbGVjdE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBnZXRTdGFydE9mTW9udGgoX3RoaXMucHJvcHMuZGF0ZSkudmFsdWVPZigpLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXNlbGVjdFwiLFxuICAgICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vblNlbGVjdENoYW5nZVxuICAgICAgICB9LFxuICAgICAgICBfdGhpcy5yZW5kZXJTZWxlY3RPcHRpb25zKClcbiAgICAgICk7XG4gICAgfSwgX3RoaXMucmVuZGVyUmVhZFZpZXcgPSBmdW5jdGlvbiAodmlzaWJsZSkge1xuICAgICAgdmFyIHllYXJNb250aCA9IGZvcm1hdERhdGUobG9jYWxpemVEYXRlKG5ld0RhdGUoX3RoaXMucHJvcHMuZGF0ZSksIF90aGlzLnByb3BzLmxvY2FsZSksIF90aGlzLnByb3BzLmRhdGVGb3JtYXQpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIGtleTogXCJyZWFkXCIsXG4gICAgICAgICAgc3R5bGU6IHsgdmlzaWJpbGl0eTogdmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIiB9LFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlld1wiLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50b2dnbGVEcm9wZG93bihldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvd1wiIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1zZWxlY3RlZC1tb250aC15ZWFyXCIgfSxcbiAgICAgICAgICB5ZWFyTW9udGhcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9LCBfdGhpcy5yZW5kZXJEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRNb250aFllYXJEcm9wZG93bk9wdGlvbnMsIHtcbiAgICAgICAga2V5OiBcImRyb3Bkb3duXCIsXG4gICAgICAgIHJlZjogXCJvcHRpb25zXCIsXG4gICAgICAgIGRhdGU6IF90aGlzLnByb3BzLmRhdGUsXG4gICAgICAgIGRhdGVGb3JtYXQ6IF90aGlzLnByb3BzLmRhdGVGb3JtYXQsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgb25DYW5jZWw6IF90aGlzLnRvZ2dsZURyb3Bkb3duLFxuICAgICAgICBtaW5EYXRlOiBsb2NhbGl6ZURhdGUoX3RoaXMucHJvcHMubWluRGF0ZSwgX3RoaXMucHJvcHMubG9jYWxlKSxcbiAgICAgICAgbWF4RGF0ZTogbG9jYWxpemVEYXRlKF90aGlzLnByb3BzLm1heERhdGUsIF90aGlzLnByb3BzLmxvY2FsZSksXG4gICAgICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duXG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5yZW5kZXJTY3JvbGxNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRyb3Bkb3duVmlzaWJsZSA9IF90aGlzLnN0YXRlLmRyb3Bkb3duVmlzaWJsZTtcblxuICAgICAgdmFyIHJlc3VsdCA9IFtfdGhpcy5yZW5kZXJSZWFkVmlldyghZHJvcGRvd25WaXNpYmxlKV07XG4gICAgICBpZiAoZHJvcGRvd25WaXNpYmxlKSB7XG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KF90aGlzLnJlbmRlckRyb3Bkb3duKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCBfdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChtb250aFllYXJQb2ludCkge1xuICAgICAgX3RoaXMudG9nZ2xlRHJvcGRvd24oKTtcblxuICAgICAgdmFyIGNoYW5nZWREYXRlID0gbmV3RGF0ZShwYXJzZUludChtb250aFllYXJQb2ludCkpO1xuXG4gICAgICBpZiAoaXNTYW1lWWVhcihfdGhpcy5wcm9wcy5kYXRlLCBjaGFuZ2VkRGF0ZSkgJiYgaXNTYW1lTW9udGgoX3RoaXMucHJvcHMuZGF0ZSwgY2hhbmdlZERhdGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoY2hhbmdlZERhdGUpO1xuICAgIH0sIF90aGlzLnRvZ2dsZURyb3Bkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJvcGRvd25WaXNpYmxlOiAhX3RoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlXG4gICAgICB9KTtcbiAgICB9LCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTW9udGhZZWFyRHJvcGRvd24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcmVuZGVyZWREcm9wZG93biA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZHJvcGRvd25Nb2RlKSB7XG4gICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNjcm9sbE1vZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNlbGVjdE1vZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93bi1jb250YWluZXIgcmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93bi1jb250YWluZXItLVwiICsgdGhpcy5wcm9wcy5kcm9wZG93bk1vZGVcbiAgICAgIH0sXG4gICAgICByZW5kZXJlZERyb3Bkb3duXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTW9udGhZZWFyRHJvcGRvd247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vbnRoWWVhckRyb3Bkb3duLnByb3BUeXBlcyA9IHtcbiAgZHJvcGRvd25Nb2RlOiBQcm9wVHlwZXMub25lT2YoW1wic2Nyb2xsXCIsIFwic2VsZWN0XCJdKS5pc1JlcXVpcmVkLFxuICBkYXRlRm9ybWF0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWF4RGF0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBtaW5EYXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGRhdGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2xcbn07XG5cbnZhciBEYXkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhEYXksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERheSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF5KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLmlzRGlzYWJsZWQoKSAmJiBfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuaXNEaXNhYmxlZCgpICYmIF90aGlzLnByb3BzLm9uTW91c2VFbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmlzU2FtZURheSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgcmV0dXJuIGlzU2FtZURheShfdGhpcy5wcm9wcy5kYXksIG90aGVyKTtcbiAgICB9LCBfdGhpcy5pc0tleWJvYXJkU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLnByb3BzLmlubGluZSAmJiAhX3RoaXMuaXNTYW1lRGF5KF90aGlzLnByb3BzLnNlbGVjdGVkKSAmJiBfdGhpcy5pc1NhbWVEYXkoX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uKTtcbiAgICB9LCBfdGhpcy5pc0Rpc2FibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlzRGF5RGlzYWJsZWQoX3RoaXMucHJvcHMuZGF5LCBfdGhpcy5wcm9wcyk7XG4gICAgfSwgX3RoaXMuZ2V0SGlnaExpZ2h0ZWRDbGFzcyA9IGZ1bmN0aW9uIChkZWZhdWx0Q2xhc3NOYW1lKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkYXkgPSBfdGhpcyRwcm9wcy5kYXksXG4gICAgICAgICAgaGlnaGxpZ2h0RGF0ZXMgPSBfdGhpcyRwcm9wcy5oaWdobGlnaHREYXRlcztcblxuXG4gICAgICBpZiAoIWhpZ2hsaWdodERhdGVzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gTG9va2luZyBmb3IgY2xhc3NOYW1lIGluIHRoZSBNYXAgb2YgeydkYXkgc3RyaW5nLCAnY2xhc3NOYW1lJ31cbiAgICAgIHZhciBkYXlTdHIgPSBkYXkuZm9ybWF0KFwiTU0uREQuWVlZWVwiKTtcbiAgICAgIHJldHVybiBoaWdobGlnaHREYXRlcy5nZXQoZGF5U3RyKTtcbiAgICB9LCBfdGhpcy5pc0luUmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMyLmRheSxcbiAgICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczIuc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczIuZW5kRGF0ZTtcblxuICAgICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzRGF5SW5SYW5nZShkYXksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gICAgfSwgX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRheSA9IF90aGlzJHByb3BzMy5kYXksXG4gICAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHMzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgICBzZWxlY3RzRW5kID0gX3RoaXMkcHJvcHMzLnNlbGVjdHNFbmQsXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZSA9IF90aGlzJHByb3BzMy5zZWxlY3RpbmdEYXRlLFxuICAgICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzMy5zdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMy5lbmREYXRlO1xuXG5cbiAgICAgIGlmICghKHNlbGVjdHNTdGFydCB8fCBzZWxlY3RzRW5kKSB8fCAhc2VsZWN0aW5nRGF0ZSB8fCBfdGhpcy5pc0Rpc2FibGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0c1N0YXJ0ICYmIGVuZERhdGUgJiYgc2VsZWN0aW5nRGF0ZS5pc1NhbWVPckJlZm9yZShlbmREYXRlKSkge1xuICAgICAgICByZXR1cm4gaXNEYXlJblJhbmdlKGRheSwgc2VsZWN0aW5nRGF0ZSwgZW5kRGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RzRW5kICYmIHN0YXJ0RGF0ZSAmJiBzZWxlY3RpbmdEYXRlLmlzU2FtZU9yQWZ0ZXIoc3RhcnREYXRlKSkge1xuICAgICAgICByZXR1cm4gaXNEYXlJblJhbmdlKGRheSwgc3RhcnREYXRlLCBzZWxlY3RpbmdEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIF90aGlzLmlzU2VsZWN0aW5nUmFuZ2VTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM0LmRheSxcbiAgICAgICAgICBzZWxlY3RpbmdEYXRlID0gX3RoaXMkcHJvcHM0LnNlbGVjdGluZ0RhdGUsXG4gICAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM0LnN0YXJ0RGF0ZSxcbiAgICAgICAgICBzZWxlY3RzU3RhcnQgPSBfdGhpcyRwcm9wczQuc2VsZWN0c1N0YXJ0O1xuXG5cbiAgICAgIGlmIChzZWxlY3RzU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZURheShkYXksIHNlbGVjdGluZ0RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZURheShkYXksIHN0YXJ0RGF0ZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaXNTZWxlY3RpbmdSYW5nZUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM1LmRheSxcbiAgICAgICAgICBzZWxlY3RpbmdEYXRlID0gX3RoaXMkcHJvcHM1LnNlbGVjdGluZ0RhdGUsXG4gICAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzNS5lbmREYXRlLFxuICAgICAgICAgIHNlbGVjdHNFbmQgPSBfdGhpcyRwcm9wczUuc2VsZWN0c0VuZDtcblxuXG4gICAgICBpZiAoc2VsZWN0c0VuZCkge1xuICAgICAgICByZXR1cm4gaXNTYW1lRGF5KGRheSwgc2VsZWN0aW5nRGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNTYW1lRGF5KGRheSwgZW5kRGF0ZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaXNSYW5nZVN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRheSA9IF90aGlzJHByb3BzNi5kYXksXG4gICAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM2LnN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM2LmVuZERhdGU7XG5cbiAgICAgIGlmICghc3RhcnREYXRlIHx8ICFlbmREYXRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1NhbWVEYXkoc3RhcnREYXRlLCBkYXkpO1xuICAgIH0sIF90aGlzLmlzUmFuZ2VFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM3LmRheSxcbiAgICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczcuc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZTtcblxuICAgICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU2FtZURheShlbmREYXRlLCBkYXkpO1xuICAgIH0sIF90aGlzLmlzV2Vla2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB3ZWVrZGF5ID0gZ2V0RGF5KF90aGlzLnByb3BzLmRheSk7XG4gICAgICByZXR1cm4gd2Vla2RheSA9PT0gMCB8fCB3ZWVrZGF5ID09PSA2O1xuICAgIH0sIF90aGlzLmlzT3V0c2lkZU1vbnRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm1vbnRoICE9PSB1bmRlZmluZWQgJiYgX3RoaXMucHJvcHMubW9udGggIT09IGdldE1vbnRoKF90aGlzLnByb3BzLmRheSk7XG4gICAgfSwgX3RoaXMuZ2V0Q2xhc3NOYW1lcyA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICB2YXIgZGF5Q2xhc3NOYW1lID0gX3RoaXMucHJvcHMuZGF5Q2xhc3NOYW1lID8gX3RoaXMucHJvcHMuZGF5Q2xhc3NOYW1lKGRhdGUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGNsYXNzbmFtZXMoXCJyZWFjdC1kYXRlcGlja2VyX19kYXlcIiwgZGF5Q2xhc3NOYW1lLCBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tXCIgKyBnZXREYXlPZldlZWtDb2RlKF90aGlzLnByb3BzLmRheSksIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkXCI6IF90aGlzLmlzRGlzYWJsZWQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXNlbGVjdGVkXCI6IF90aGlzLmlzU2FtZURheShfdGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1rZXlib2FyZC1zZWxlY3RlZFwiOiBfdGhpcy5pc0tleWJvYXJkU2VsZWN0ZWQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzUmFuZ2VTdGFydCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tcmFuZ2UtZW5kXCI6IF90aGlzLmlzUmFuZ2VFbmQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXJhbmdlXCI6IF90aGlzLmlzSW5SYW5nZSgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlXCI6IF90aGlzLmlzSW5TZWxlY3RpbmdSYW5nZSgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0aW5nLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzU2VsZWN0aW5nUmFuZ2VTdGFydCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0aW5nLXJhbmdlLWVuZFwiOiBfdGhpcy5pc1NlbGVjdGluZ1JhbmdlRW5kKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS10b2RheVwiOiBfdGhpcy5pc1NhbWVEYXkobm93KF90aGlzLnByb3BzLnV0Y09mZnNldCkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0td2Vla2VuZFwiOiBfdGhpcy5pc1dlZWtlbmQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLW91dHNpZGUtbW9udGhcIjogX3RoaXMuaXNPdXRzaWRlTW9udGgoKVxuICAgICAgfSwgX3RoaXMuZ2V0SGlnaExpZ2h0ZWRDbGFzcyhcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWRcIikpO1xuICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBEYXkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5nZXRDbGFzc05hbWVzKHRoaXMucHJvcHMuZGF5KSxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBcImRheS1cIiArIGdldERhdGUodGhpcy5wcm9wcy5kYXkpLFxuICAgICAgICByb2xlOiBcIm9wdGlvblwiXG4gICAgICB9LFxuICAgICAgZ2V0RGF0ZSh0aGlzLnByb3BzLmRheSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEYXk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRheS5wcm9wVHlwZXMgPSB7XG4gIGRheTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBkYXlDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuICBlbmREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBoaWdobGlnaHREYXRlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKSxcbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgbW9udGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBwcmVTZWxlY3Rpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZWxlY3RpbmdEYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZWxlY3RzRW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2VsZWN0c1N0YXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RhcnREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICB1dGNPZmZzZXQ6IFByb3BUeXBlcy5udW1iZXJcbn07XG5cbnZhciBXZWVrTnVtYmVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgaW5oZXJpdHMoV2Vla051bWJlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gV2Vla051bWJlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2Vla051bWJlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFdlZWtOdW1iZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgd2Vla051bWJlckNsYXNzZXMgPSB7XG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyXCI6IHRydWUsXG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyLS1jbGlja2FibGVcIjogISF0aGlzLnByb3BzLm9uQ2xpY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKHdlZWtOdW1iZXJDbGFzc2VzKSxcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IFwid2Vlay1cIiArIHRoaXMucHJvcHMud2Vla051bWJlcixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSxcbiAgICAgIHRoaXMucHJvcHMud2Vla051bWJlclxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFdlZWtOdW1iZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbldlZWtOdW1iZXIucHJvcFR5cGVzID0ge1xuICB3ZWVrTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgV2VlayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFdlZWssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdlZWsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdlZWspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlRGF5Q2xpY2sgPSBmdW5jdGlvbiAoZGF5LCBldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRGF5Q2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25EYXlDbGljayhkYXksIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVEYXlNb3VzZUVudGVyID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXIoZGF5KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVXZWVrQ2xpY2sgPSBmdW5jdGlvbiAoZGF5LCB3ZWVrTnVtYmVyLCBldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5vbldlZWtTZWxlY3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbldlZWtTZWxlY3QoZGF5LCB3ZWVrTnVtYmVyLCBldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuZm9ybWF0V2Vla051bWJlciA9IGZ1bmN0aW9uIChzdGFydE9mV2Vlaykge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIoc3RhcnRPZldlZWspO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldFdlZWsoc3RhcnRPZldlZWspO1xuICAgIH0sIF90aGlzLnJlbmRlckRheXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RhcnRPZldlZWsgPSBnZXRTdGFydE9mV2VlayhjbG9uZURhdGUoX3RoaXMucHJvcHMuZGF5KSk7XG4gICAgICB2YXIgZGF5cyA9IFtdO1xuICAgICAgdmFyIHdlZWtOdW1iZXIgPSBfdGhpcy5mb3JtYXRXZWVrTnVtYmVyKHN0YXJ0T2ZXZWVrKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcikge1xuICAgICAgICB2YXIgb25DbGlja0FjdGlvbiA9IF90aGlzLnByb3BzLm9uV2Vla1NlbGVjdCA/IF90aGlzLmhhbmRsZVdlZWtDbGljay5iaW5kKF90aGlzLCBzdGFydE9mV2Vlaywgd2Vla051bWJlcikgOiB1bmRlZmluZWQ7XG4gICAgICAgIGRheXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFdlZWtOdW1iZXIsIHsga2V5OiBcIldcIiwgd2Vla051bWJlcjogd2Vla051bWJlciwgb25DbGljazogb25DbGlja0FjdGlvbiB9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF5cy5jb25jYXQoWzAsIDEsIDIsIDMsIDQsIDUsIDZdLm1hcChmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHZhciBkYXkgPSBhZGREYXlzKGNsb25lRGF0ZShzdGFydE9mV2VlayksIG9mZnNldCk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERheSwge1xuICAgICAgICAgIGtleTogb2Zmc2V0LFxuICAgICAgICAgIGRheTogZGF5LFxuICAgICAgICAgIG1vbnRoOiBfdGhpcy5wcm9wcy5tb250aCxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpcy5oYW5kbGVEYXlDbGljay5iaW5kKF90aGlzLCBkYXkpLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogX3RoaXMuaGFuZGxlRGF5TW91c2VFbnRlci5iaW5kKF90aGlzLCBkYXkpLFxuICAgICAgICAgIG1pbkRhdGU6IF90aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgICAgbWF4RGF0ZTogX3RoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICAgICBleGNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmV4Y2x1ZGVEYXRlcyxcbiAgICAgICAgICBpbmNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmluY2x1ZGVEYXRlcyxcbiAgICAgICAgICBpbmxpbmU6IF90aGlzLnByb3BzLmlubGluZSxcbiAgICAgICAgICBoaWdobGlnaHREYXRlczogX3RoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXMsXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZTogX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICBmaWx0ZXJEYXRlOiBfdGhpcy5wcm9wcy5maWx0ZXJEYXRlLFxuICAgICAgICAgIHByZVNlbGVjdGlvbjogX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uLFxuICAgICAgICAgIHNlbGVjdGVkOiBfdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICBzZWxlY3RzU3RhcnQ6IF90aGlzLnByb3BzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgICBzZWxlY3RzRW5kOiBfdGhpcy5wcm9wcy5zZWxlY3RzRW5kLFxuICAgICAgICAgIHN0YXJ0RGF0ZTogX3RoaXMucHJvcHMuc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IF90aGlzLnByb3BzLmVuZERhdGUsXG4gICAgICAgICAgZGF5Q2xhc3NOYW1lOiBfdGhpcy5wcm9wcy5kYXlDbGFzc05hbWUsXG4gICAgICAgICAgdXRjT2Zmc2V0OiBfdGhpcy5wcm9wcy51dGNPZmZzZXRcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFdlZWsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrXCIgfSxcbiAgICAgIHRoaXMucmVuZGVyRGF5cygpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gV2Vlaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuV2Vlay5wcm9wVHlwZXMgPSB7XG4gIGRheTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBkYXlDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuICBlbmREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBleGNsdWRlRGF0ZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgZmlsdGVyRGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcm1hdFdlZWtOdW1iZXI6IFByb3BUeXBlcy5mdW5jLFxuICBoaWdobGlnaHREYXRlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKSxcbiAgaW5jbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1pbkRhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1vbnRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBvbkRheUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25EYXlNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25XZWVrU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgcHJlU2VsZWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0aW5nRGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0c0VuZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbGVjdHNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dXZWVrTnVtYmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RhcnREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICB1dGNPZmZzZXQ6IFByb3BUeXBlcy5udW1iZXJcbn07XG5cbnZhciBGSVhFRF9IRUlHSFRfU1RBTkRBUkRfV0VFS19DT1VOVCA9IDY7XG5cbnZhciBNb250aCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKE1vbnRoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb250aCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9udGgpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlRGF5Q2xpY2sgPSBmdW5jdGlvbiAoZGF5LCBldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRGF5Q2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25EYXlDbGljayhkYXksIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVEYXlNb3VzZUVudGVyID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXIoZGF5KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5pc1dlZWtJbk1vbnRoID0gZnVuY3Rpb24gKHN0YXJ0T2ZXZWVrKSB7XG4gICAgICB2YXIgZGF5ID0gX3RoaXMucHJvcHMuZGF5O1xuICAgICAgdmFyIGVuZE9mV2VlayA9IGFkZERheXMoY2xvbmVEYXRlKHN0YXJ0T2ZXZWVrKSwgNik7XG4gICAgICByZXR1cm4gaXNTYW1lTW9udGgoc3RhcnRPZldlZWssIGRheSkgfHwgaXNTYW1lTW9udGgoZW5kT2ZXZWVrLCBkYXkpO1xuICAgIH0sIF90aGlzLnJlbmRlcldlZWtzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdlZWtzID0gW107XG4gICAgICB2YXIgaXNGaXhlZEhlaWdodCA9IF90aGlzLnByb3BzLmZpeGVkSGVpZ2h0O1xuICAgICAgdmFyIGN1cnJlbnRXZWVrU3RhcnQgPSBnZXRTdGFydE9mV2VlayhnZXRTdGFydE9mTW9udGgoY2xvbmVEYXRlKF90aGlzLnByb3BzLmRheSkpKTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBicmVha0FmdGVyTmV4dFB1c2ggPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgd2Vla3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFdlZWssIHtcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgZGF5OiBjdXJyZW50V2Vla1N0YXJ0LFxuICAgICAgICAgIG1vbnRoOiBnZXRNb250aChfdGhpcy5wcm9wcy5kYXkpLFxuICAgICAgICAgIG9uRGF5Q2xpY2s6IF90aGlzLmhhbmRsZURheUNsaWNrLFxuICAgICAgICAgIG9uRGF5TW91c2VFbnRlcjogX3RoaXMuaGFuZGxlRGF5TW91c2VFbnRlcixcbiAgICAgICAgICBvbldlZWtTZWxlY3Q6IF90aGlzLnByb3BzLm9uV2Vla1NlbGVjdCxcbiAgICAgICAgICBmb3JtYXRXZWVrTnVtYmVyOiBfdGhpcy5wcm9wcy5mb3JtYXRXZWVrTnVtYmVyLFxuICAgICAgICAgIG1pbkRhdGU6IF90aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgICAgbWF4RGF0ZTogX3RoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICAgICBleGNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmV4Y2x1ZGVEYXRlcyxcbiAgICAgICAgICBpbmNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmluY2x1ZGVEYXRlcyxcbiAgICAgICAgICBpbmxpbmU6IF90aGlzLnByb3BzLmlubGluZSxcbiAgICAgICAgICBoaWdobGlnaHREYXRlczogX3RoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXMsXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZTogX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICBmaWx0ZXJEYXRlOiBfdGhpcy5wcm9wcy5maWx0ZXJEYXRlLFxuICAgICAgICAgIHByZVNlbGVjdGlvbjogX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uLFxuICAgICAgICAgIHNlbGVjdGVkOiBfdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICBzZWxlY3RzU3RhcnQ6IF90aGlzLnByb3BzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgICBzZWxlY3RzRW5kOiBfdGhpcy5wcm9wcy5zZWxlY3RzRW5kLFxuICAgICAgICAgIHNob3dXZWVrTnVtYmVyOiBfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMsXG4gICAgICAgICAgc3RhcnREYXRlOiBfdGhpcy5wcm9wcy5zdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogX3RoaXMucHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgICBkYXlDbGFzc05hbWU6IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZSxcbiAgICAgICAgICB1dGNPZmZzZXQ6IF90aGlzLnByb3BzLnV0Y09mZnNldFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKGJyZWFrQWZ0ZXJOZXh0UHVzaCkgYnJlYWs7XG5cbiAgICAgICAgaSsrO1xuICAgICAgICBjdXJyZW50V2Vla1N0YXJ0ID0gYWRkV2Vla3MoY2xvbmVEYXRlKGN1cnJlbnRXZWVrU3RhcnQpLCAxKTtcblxuICAgICAgICAvLyBJZiBvbmUgb2YgdGhlc2UgY29uZGl0aW9ucyBpcyB0cnVlLCB3ZSB3aWxsIGVpdGhlciBicmVhayBvbiB0aGlzIHdlZWtcbiAgICAgICAgLy8gb3IgYnJlYWsgb24gdGhlIG5leHQgd2Vla1xuICAgICAgICB2YXIgaXNGaXhlZEFuZEZpbmFsV2VlayA9IGlzRml4ZWRIZWlnaHQgJiYgaSA+PSBGSVhFRF9IRUlHSFRfU1RBTkRBUkRfV0VFS19DT1VOVDtcbiAgICAgICAgdmFyIGlzTm9uRml4ZWRBbmRPdXRPZk1vbnRoID0gIWlzRml4ZWRIZWlnaHQgJiYgIV90aGlzLmlzV2Vla0luTW9udGgoY3VycmVudFdlZWtTdGFydCk7XG5cbiAgICAgICAgaWYgKGlzRml4ZWRBbmRGaW5hbFdlZWsgfHwgaXNOb25GaXhlZEFuZE91dE9mTW9udGgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMucGVla05leHRNb250aCkge1xuICAgICAgICAgICAgYnJlYWtBZnRlck5leHRQdXNoID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3ZWVrcztcbiAgICB9LCBfdGhpcy5nZXRDbGFzc05hbWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZSA9IF90aGlzJHByb3BzLnNlbGVjdGluZ0RhdGUsXG4gICAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHMuc2VsZWN0c1N0YXJ0LFxuICAgICAgICAgIHNlbGVjdHNFbmQgPSBfdGhpcyRwcm9wcy5zZWxlY3RzRW5kO1xuXG4gICAgICByZXR1cm4gY2xhc3NuYW1lcyhcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoXCIsIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC0tc2VsZWN0aW5nLXJhbmdlXCI6IHNlbGVjdGluZ0RhdGUgJiYgKHNlbGVjdHNTdGFydCB8fCBzZWxlY3RzRW5kKVxuICAgICAgfSk7XG4gICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1vbnRoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3NOYW1lcygpLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgcm9sZTogXCJsaXN0Ym94XCJcbiAgICAgIH0sXG4gICAgICB0aGlzLnJlbmRlcldlZWtzKClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNb250aDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9udGgucHJvcFR5cGVzID0ge1xuICBkYXk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgZGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgZW5kRGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZXhjbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGZpbHRlckRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICBmaXhlZEhlaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcm1hdFdlZWtOdW1iZXI6IFByb3BUeXBlcy5mdW5jLFxuICBoaWdobGlnaHREYXRlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKSxcbiAgaW5jbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1pbkRhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uRGF5Q2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRheU1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBvbldlZWtTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBwZWVrTmV4dE1vbnRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgcHJlU2VsZWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0aW5nRGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0c0VuZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbGVjdHNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dXZWVrTnVtYmVyczogUHJvcFR5cGVzLmJvb2wsXG4gIHN0YXJ0RGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgdXRjT2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyXG59O1xuXG52YXIgVGltZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFRpbWUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRpbWUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgaWYgKChfdGhpcy5wcm9wcy5taW5UaW1lIHx8IF90aGlzLnByb3BzLm1heFRpbWUpICYmIGlzVGltZUluRGlzYWJsZWRSYW5nZSh0aW1lLCBfdGhpcy5wcm9wcykgfHwgX3RoaXMucHJvcHMuZXhjbHVkZVRpbWVzICYmIGlzVGltZURpc2FibGVkKHRpbWUsIF90aGlzLnByb3BzLmV4Y2x1ZGVUaW1lcykgfHwgX3RoaXMucHJvcHMuaW5jbHVkZVRpbWVzICYmICFpc1RpbWVEaXNhYmxlZCh0aW1lLCBfdGhpcy5wcm9wcy5pbmNsdWRlVGltZXMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UodGltZSk7XG4gICAgfSwgX3RoaXMubGlDbGFzc2VzID0gZnVuY3Rpb24gKHRpbWUsIGN1cnJILCBjdXJyTSkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbVwiXTtcblxuICAgICAgaWYgKGN1cnJIID09PSBnZXRIb3VyKHRpbWUpICYmIGN1cnJNID09PSBnZXRNaW51dGUodGltZSkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0tLXNlbGVjdGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKChfdGhpcy5wcm9wcy5taW5UaW1lIHx8IF90aGlzLnByb3BzLm1heFRpbWUpICYmIGlzVGltZUluRGlzYWJsZWRSYW5nZSh0aW1lLCBfdGhpcy5wcm9wcykgfHwgX3RoaXMucHJvcHMuZXhjbHVkZVRpbWVzICYmIGlzVGltZURpc2FibGVkKHRpbWUsIF90aGlzLnByb3BzLmV4Y2x1ZGVUaW1lcykgfHwgX3RoaXMucHJvcHMuaW5jbHVkZVRpbWVzICYmICFpc1RpbWVEaXNhYmxlZCh0aW1lLCBfdGhpcy5wcm9wcy5pbmNsdWRlVGltZXMpKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1kaXNhYmxlZFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5pbmplY3RUaW1lcyAmJiAoZ2V0SG91cih0aW1lKSAqIDYwICsgZ2V0TWludXRlKHRpbWUpKSAlIF90aGlzLnByb3BzLmludGVydmFscyAhPT0gMCkge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbS0taW5qZWN0ZWRcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oXCIgXCIpO1xuICAgIH0sIF90aGlzLnJlbmRlclRpbWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRpbWVzID0gW107XG4gICAgICB2YXIgZm9ybWF0ID0gX3RoaXMucHJvcHMuZm9ybWF0ID8gX3RoaXMucHJvcHMuZm9ybWF0IDogXCJoaDptbSBBXCI7XG4gICAgICB2YXIgaW50ZXJ2YWxzID0gX3RoaXMucHJvcHMuaW50ZXJ2YWxzO1xuICAgICAgdmFyIGFjdGl2ZVRpbWUgPSBfdGhpcy5wcm9wcy5zZWxlY3RlZCA/IF90aGlzLnByb3BzLnNlbGVjdGVkIDogbmV3RGF0ZSgpO1xuICAgICAgdmFyIGN1cnJIID0gZ2V0SG91cihhY3RpdmVUaW1lKTtcbiAgICAgIHZhciBjdXJyTSA9IGdldE1pbnV0ZShhY3RpdmVUaW1lKTtcbiAgICAgIHZhciBiYXNlID0gZ2V0U3RhcnRPZkRheShuZXdEYXRlKCkpO1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSAxNDQwIC8gaW50ZXJ2YWxzO1xuICAgICAgdmFyIHNvcnRlZEluamVjdFRpbWVzID0gX3RoaXMucHJvcHMuaW5qZWN0VGltZXMgJiYgX3RoaXMucHJvcHMuaW5qZWN0VGltZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICB9KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlwbGllcjsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IGFkZE1pbnV0ZXMoY2xvbmVEYXRlKGJhc2UpLCBpICogaW50ZXJ2YWxzKTtcbiAgICAgICAgdGltZXMucHVzaChjdXJyZW50VGltZSk7XG5cbiAgICAgICAgaWYgKHNvcnRlZEluamVjdFRpbWVzKSB7XG4gICAgICAgICAgdmFyIHRpbWVzVG9JbmplY3QgPSB0aW1lc1RvSW5qZWN0QWZ0ZXIoYmFzZSwgY3VycmVudFRpbWUsIGksIGludGVydmFscywgc29ydGVkSW5qZWN0VGltZXMpO1xuICAgICAgICAgIHRpbWVzID0gdGltZXMuY29uY2F0KHRpbWVzVG9JbmplY3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aW1lcy5tYXAoZnVuY3Rpb24gKHRpbWUsIGkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX3RoaXMsIHRpbWUpLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5saUNsYXNzZXModGltZSwgY3VyckgsIGN1cnJNKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9ybWF0RGF0ZSh0aW1lLCBmb3JtYXQpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgVGltZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBjb2RlIHRvIGVuc3VyZSBzZWxlY3RlZCB0aW1lIHdpbGwgYWx3YXlzIGJlIGluIGZvY3VzIHdpdGhpbiB0aW1lIHdpbmRvdyB3aGVuIGl0IGZpcnN0IGFwcGVhcnNcbiAgICB2YXIgbXVsdGlwbGllciA9IDYwIC8gdGhpcy5wcm9wcy5pbnRlcnZhbHM7XG4gICAgdmFyIGN1cnJIID0gdGhpcy5wcm9wcy5zZWxlY3RlZCA/IGdldEhvdXIodGhpcy5wcm9wcy5zZWxlY3RlZCkgOiBnZXRIb3VyKG5ld0RhdGUoKSk7XG4gICAgdGhpcy5saXN0LnNjcm9sbFRvcCA9IDMwICogKG11bHRpcGxpZXIgKiBjdXJySCk7XG4gIH07XG5cbiAgVGltZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGhlaWdodCA9IG51bGw7XG4gICAgaWYgKHRoaXMucHJvcHMubW9udGhSZWYpIHtcbiAgICAgIGhlaWdodCA9IHRoaXMucHJvcHMubW9udGhSZWYuY2xpZW50SGVpZ2h0IC0gMzk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIgXCIgKyAodGhpcy5wcm9wcy50b2RheUJ1dHRvbiA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXItLXdpdGgtdG9kYXktYnV0dG9uXCIgOiBcIlwiKVxuICAgICAgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlciByZWFjdC1kYXRlcGlja2VyX19oZWFkZXItLXRpbWVcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXJcIiB9LFxuICAgICAgICAgIHRoaXMucHJvcHMudGltZUNhcHRpb25cbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWVcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3hcIiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3RcIixcbiAgICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobGlzdCkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5saXN0ID0gbGlzdDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3R5bGU6IGhlaWdodCA/IHsgaGVpZ2h0OiBoZWlnaHQgfSA6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJUaW1lcy5iaW5kKHRoaXMpKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIGNyZWF0ZUNsYXNzKFRpbWUsIG51bGwsIFt7XG4gICAga2V5OiBcImRlZmF1bHRQcm9wc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZXJ2YWxzOiAzMCxcbiAgICAgICAgb25UaW1lQ2hhbmdlOiBmdW5jdGlvbiBvblRpbWVDaGFuZ2UoKSB7fSxcbiAgICAgICAgdG9kYXlCdXR0b246IG51bGwsXG4gICAgICAgIHRpbWVDYXB0aW9uOiBcIlRpbWVcIlxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRpbWU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRpbWUucHJvcFR5cGVzID0ge1xuICBmb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGluY2x1ZGVUaW1lczogUHJvcFR5cGVzLmFycmF5LFxuICBpbnRlcnZhbHM6IFByb3BUeXBlcy5udW1iZXIsXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHRvZGF5QnV0dG9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtaW5UaW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBtYXhUaW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBleGNsdWRlVGltZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgbW9udGhSZWY6IFByb3BUeXBlcy5vYmplY3QsXG4gIHRpbWVDYXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbmplY3RUaW1lczogUHJvcFR5cGVzLmFycmF5XG59O1xuXG5mdW5jdGlvbiBDYWxlbmRhckNvbnRhaW5lcihfcmVmKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBcImRpdlwiLFxuICAgIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlXCIgfSksXG4gICAgY2hpbGRyZW5cbiAgKTtcbn1cblxuQ2FsZW5kYXJDb250YWluZXIucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxudmFyIERST1BET1dOX0ZPQ1VTX0NMQVNTTkFNRVMgPSBbXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXNlbGVjdFwiLCBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXNlbGVjdFwiLCBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItc2VsZWN0XCJdO1xuXG52YXIgaXNEcm9wZG93blNlbGVjdCA9IGZ1bmN0aW9uIGlzRHJvcGRvd25TZWxlY3QoKSB7XG4gIHZhciBlbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgY2xhc3NOYW1lcyA9IChlbGVtZW50LmNsYXNzTmFtZSB8fCBcIlwiKS5zcGxpdCgvXFxzKy8pO1xuICByZXR1cm4gRFJPUERPV05fRk9DVVNfQ0xBU1NOQU1FUy5zb21lKGZ1bmN0aW9uICh0ZXN0Q2xhc3NuYW1lKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuaW5kZXhPZih0ZXN0Q2xhc3NuYW1lKSA+PSAwO1xuICB9KTtcbn07XG5cbnZhciBDYWxlbmRhciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKENhbGVuZGFyLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgY3JlYXRlQ2xhc3MoQ2FsZW5kYXIsIG51bGwsIFt7XG4gICAga2V5OiBcImRlZmF1bHRQcm9wc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgICBvbkRyb3Bkb3duRm9jdXM6IGZ1bmN0aW9uIG9uRHJvcGRvd25Gb2N1cygpIHt9LFxuICAgICAgICBtb250aHNTaG93bjogMSxcbiAgICAgICAgZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgICAgdGltZUNhcHRpb246IFwiVGltZVwiLFxuICAgICAgICBwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw6IFwiUHJldmlvdXMgTW9udGhcIlxuICAgICAgfSwgX3JlZltcInByZXZpb3VzTW9udGhCdXR0b25MYWJlbFwiXSA9IFwiTmV4dCBNb250aFwiLCBfcmVmO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIENhbGVuZGFyKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FsZW5kYXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMucHJvcHMub25DbGlja091dHNpZGUoZXZlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEcm9wZG93bkZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoaXNEcm9wZG93blNlbGVjdChldmVudC50YXJnZXQpKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRHJvcGRvd25Gb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5nZXREYXRlSW5WaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcHJlU2VsZWN0aW9uID0gX3RoaXMkcHJvcHMucHJlU2VsZWN0aW9uLFxuICAgICAgICAgIHNlbGVjdGVkID0gX3RoaXMkcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgb3BlblRvRGF0ZSA9IF90aGlzJHByb3BzLm9wZW5Ub0RhdGUsXG4gICAgICAgICAgdXRjT2Zmc2V0ID0gX3RoaXMkcHJvcHMudXRjT2Zmc2V0O1xuXG4gICAgICB2YXIgbWluRGF0ZSA9IGdldEVmZmVjdGl2ZU1pbkRhdGUoX3RoaXMucHJvcHMpO1xuICAgICAgdmFyIG1heERhdGUgPSBnZXRFZmZlY3RpdmVNYXhEYXRlKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBjdXJyZW50ID0gbm93KHV0Y09mZnNldCk7XG4gICAgICB2YXIgaW5pdGlhbERhdGUgPSBvcGVuVG9EYXRlIHx8IHNlbGVjdGVkIHx8IHByZVNlbGVjdGlvbjtcbiAgICAgIGlmIChpbml0aWFsRGF0ZSkge1xuICAgICAgICByZXR1cm4gaW5pdGlhbERhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobWluRGF0ZSAmJiBpc0JlZm9yZShjdXJyZW50LCBtaW5EYXRlKSkge1xuICAgICAgICAgIHJldHVybiBtaW5EYXRlO1xuICAgICAgICB9IGVsc2UgaWYgKG1heERhdGUgJiYgaXNBZnRlcihjdXJyZW50LCBtYXhEYXRlKSkge1xuICAgICAgICAgIHJldHVybiBtYXhEYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9O1xuXG4gICAgX3RoaXMubG9jYWxpemVEYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZURhdGUoZGF0ZSwgX3RoaXMucHJvcHMubG9jYWxlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaW5jcmVhc2VNb250aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZTogYWRkTW9udGhzKGNsb25lRGF0ZShfdGhpcy5zdGF0ZS5kYXRlKSwgMSlcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vbnRoQ2hhbmdlKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmRlY3JlYXNlTW9udGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRhdGU6IHN1YnRyYWN0TW9udGhzKGNsb25lRGF0ZShfdGhpcy5zdGF0ZS5kYXRlKSwgMSlcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vbnRoQ2hhbmdlKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZURheUNsaWNrID0gZnVuY3Rpb24gKGRheSwgZXZlbnQpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vblNlbGVjdChkYXksIGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRGF5TW91c2VFbnRlciA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGluZ0RhdGU6IGRheSB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW9udGhNb3VzZUxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgc2VsZWN0aW5nRGF0ZTogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlWWVhckNoYW5nZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25ZZWFyQ2hhbmdlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uWWVhckNoYW5nZShkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW9udGhDaGFuZ2UgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb250aENoYW5nZShkYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uU2VsZWN0KSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNldE9wZW4pIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5zZXRPcGVuKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vbnRoWWVhckNoYW5nZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBfdGhpcy5oYW5kbGVZZWFyQ2hhbmdlKGRhdGUpO1xuICAgICAgX3RoaXMuaGFuZGxlTW9udGhDaGFuZ2UoZGF0ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNoYW5nZVllYXIgPSBmdW5jdGlvbiAoeWVhcikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXRlOiBzZXRZZWFyKGNsb25lRGF0ZShfdGhpcy5zdGF0ZS5kYXRlKSwgeWVhcilcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVllYXJDaGFuZ2UoX3RoaXMuc3RhdGUuZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY2hhbmdlTW9udGggPSBmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZTogc2V0TW9udGgoY2xvbmVEYXRlKF90aGlzLnN0YXRlLmRhdGUpLCBtb250aClcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vbnRoQ2hhbmdlKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNoYW5nZU1vbnRoWWVhciA9IGZ1bmN0aW9uIChtb250aFllYXIpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZTogc2V0WWVhcihzZXRNb250aChjbG9uZURhdGUoX3RoaXMuc3RhdGUuZGF0ZSksIGdldE1vbnRoKG1vbnRoWWVhcikpLCBnZXRZZWFyKG1vbnRoWWVhcikpXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVNb250aFllYXJDaGFuZ2UoX3RoaXMuc3RhdGUuZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF90aGlzLnN0YXRlLmRhdGU7XG5cbiAgICAgIHZhciBzdGFydE9mV2VlayA9IGdldFN0YXJ0T2ZXZWVrKGNsb25lRGF0ZShkYXRlKSk7XG4gICAgICB2YXIgZGF5TmFtZXMgPSBbXTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMpIHtcbiAgICAgICAgZGF5TmFtZXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBrZXk6IFwiV1wiLCBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVcIiB9LFxuICAgICAgICAgIF90aGlzLnByb3BzLndlZWtMYWJlbCB8fCBcIiNcIlxuICAgICAgICApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXlOYW1lcy5jb25jYXQoWzAsIDEsIDIsIDMsIDQsIDUsIDZdLm1hcChmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHZhciBkYXkgPSBhZGREYXlzKGNsb25lRGF0ZShzdGFydE9mV2VlayksIG9mZnNldCk7XG4gICAgICAgIHZhciBsb2NhbGVEYXRhID0gZ2V0TG9jYWxlRGF0YShkYXkpO1xuICAgICAgICB2YXIgd2Vla0RheU5hbWUgPSBfdGhpcy5mb3JtYXRXZWVrZGF5KGxvY2FsZURhdGEsIGRheSk7XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IGtleTogb2Zmc2V0LCBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVcIiB9LFxuICAgICAgICAgIHdlZWtEYXlOYW1lXG4gICAgICAgICk7XG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIF90aGlzLmZvcm1hdFdlZWtkYXkgPSBmdW5jdGlvbiAobG9jYWxlRGF0YSwgZGF5KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZm9ybWF0V2Vla0RheSkge1xuICAgICAgICByZXR1cm4gZ2V0Rm9ybWF0dGVkV2Vla2RheUluTG9jYWxlKGxvY2FsZURhdGEsIGRheSwgX3RoaXMucHJvcHMuZm9ybWF0V2Vla0RheSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMudXNlV2Vla2RheXNTaG9ydCA/IGdldFdlZWtkYXlTaG9ydEluTG9jYWxlKGxvY2FsZURhdGEsIGRheSkgOiBnZXRXZWVrZGF5TWluSW5Mb2NhbGUobG9jYWxlRGF0YSwgZGF5KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyUHJldmlvdXNNb250aEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhbGxQcmV2RGF5c0Rpc2FibGVkID0gYWxsRGF5c0Rpc2FibGVkQmVmb3JlKF90aGlzLnN0YXRlLmRhdGUsIFwibW9udGhcIiwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLmZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbiAmJiAhX3RoaXMucHJvcHMuc2hvd0Rpc2FibGVkTW9udGhOYXZpZ2F0aW9uICYmIGFsbFByZXZEYXlzRGlzYWJsZWQgfHwgX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzZXMgPSBbXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uXCIsIFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tcHJldmlvdXNcIl07XG5cbiAgICAgIHZhciBjbGlja0hhbmRsZXIgPSBfdGhpcy5kZWNyZWFzZU1vbnRoO1xuXG4gICAgICBpZiAoYWxsUHJldkRheXNEaXNhYmxlZCAmJiBfdGhpcy5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tcHJldmlvdXMtLWRpc2FibGVkXCIpO1xuICAgICAgICBjbGlja0hhbmRsZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmpvaW4oXCIgXCIpLFxuICAgICAgICAgIG9uQ2xpY2s6IGNsaWNrSGFuZGxlclxuICAgICAgICB9LFxuICAgICAgICBfdGhpcy5wcm9wcy5wcmV2aW91c01vbnRoQnV0dG9uTGFiZWxcbiAgICAgICk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlck5leHRNb250aEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhbGxOZXh0RGF5c0Rpc2FibGVkID0gYWxsRGF5c0Rpc2FibGVkQWZ0ZXIoX3RoaXMuc3RhdGUuZGF0ZSwgXCJtb250aFwiLCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uICYmICFfdGhpcy5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24gJiYgYWxsTmV4dERheXNEaXNhYmxlZCB8fCBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NlcyA9IFtcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb25cIiwgXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1uZXh0XCJdO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0KSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLXdpdGgtdGltZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy50b2RheUJ1dHRvbikge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1uZXh0LS13aXRoLXRvZGF5LWJ1dHRvblwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsaWNrSGFuZGxlciA9IF90aGlzLmluY3JlYXNlTW9udGg7XG5cbiAgICAgIGlmIChhbGxOZXh0RGF5c0Rpc2FibGVkICYmIF90aGlzLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbikge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1uZXh0LS1kaXNhYmxlZFwiKTtcbiAgICAgICAgY2xpY2tIYW5kbGVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5qb2luKFwiIFwiKSxcbiAgICAgICAgICBvbkNsaWNrOiBjbGlja0hhbmRsZXJcbiAgICAgICAgfSxcbiAgICAgICAgX3RoaXMucHJvcHMubmV4dE1vbnRoQnV0dG9uTGFiZWxcbiAgICAgICk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckN1cnJlbnRNb250aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBfdGhpcy5zdGF0ZS5kYXRlO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IFtcInJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGhcIl07XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93WWVhckRyb3Bkb3duKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgtLWhhc1llYXJEcm9wZG93blwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93TW9udGhEcm9wZG93bikge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19jdXJyZW50LW1vbnRoLS1oYXNNb250aERyb3Bkb3duXCIpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dNb250aFllYXJEcm9wZG93bikge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19jdXJyZW50LW1vbnRoLS1oYXNNb250aFllYXJEcm9wZG93blwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogY2xhc3Nlcy5qb2luKFwiIFwiKSB9LFxuICAgICAgICBmb3JtYXREYXRlKGRhdGUsIF90aGlzLnByb3BzLmRhdGVGb3JtYXQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJZZWFyRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3ZlcnJpZGVIaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG93WWVhckRyb3Bkb3duIHx8IG92ZXJyaWRlSGlkZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChZZWFyRHJvcGRvd24sIHtcbiAgICAgICAgYWRqdXN0RGF0ZU9uQ2hhbmdlOiBfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UsXG4gICAgICAgIGRhdGU6IF90aGlzLnN0YXRlLmRhdGUsXG4gICAgICAgIG9uU2VsZWN0OiBfdGhpcy5wcm9wcy5vblNlbGVjdCxcbiAgICAgICAgc2V0T3BlbjogX3RoaXMucHJvcHMuc2V0T3BlbixcbiAgICAgICAgZHJvcGRvd25Nb2RlOiBfdGhpcy5wcm9wcy5kcm9wZG93bk1vZGUsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5jaGFuZ2VZZWFyLFxuICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBfdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICB5ZWFyOiBnZXRZZWFyKF90aGlzLnN0YXRlLmRhdGUpLFxuICAgICAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zY3JvbGxhYmxlWWVhckRyb3Bkb3duLFxuICAgICAgICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBfdGhpcy5wcm9wcy55ZWFyRHJvcGRvd25JdGVtTnVtYmVyXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyTW9udGhEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdmVycmlkZUhpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLnNob3dNb250aERyb3Bkb3duIHx8IG92ZXJyaWRlSGlkZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNb250aERyb3Bkb3duLCB7XG4gICAgICAgIGRyb3Bkb3duTW9kZTogX3RoaXMucHJvcHMuZHJvcGRvd25Nb2RlLFxuICAgICAgICBsb2NhbGU6IF90aGlzLnByb3BzLmxvY2FsZSxcbiAgICAgICAgZGF0ZUZvcm1hdDogX3RoaXMucHJvcHMuZGF0ZUZvcm1hdCxcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLmNoYW5nZU1vbnRoLFxuICAgICAgICBtb250aDogZ2V0TW9udGgoX3RoaXMuc3RhdGUuZGF0ZSksXG4gICAgICAgIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duOiBfdGhpcy5wcm9wcy51c2VTaG9ydE1vbnRoSW5Ecm9wZG93blxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlck1vbnRoWWVhckRyb3Bkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG92ZXJyaWRlSGlkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhckRyb3Bkb3duIHx8IG92ZXJyaWRlSGlkZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNb250aFllYXJEcm9wZG93biwge1xuICAgICAgICBkcm9wZG93bk1vZGU6IF90aGlzLnByb3BzLmRyb3Bkb3duTW9kZSxcbiAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICAgIGRhdGVGb3JtYXQ6IF90aGlzLnByb3BzLmRhdGVGb3JtYXQsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5jaGFuZ2VNb250aFllYXIsXG4gICAgICAgIG1pbkRhdGU6IF90aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgIG1heERhdGU6IF90aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgIGRhdGU6IF90aGlzLnN0YXRlLmRhdGUsXG4gICAgICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyVG9kYXlCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLnRvZGF5QnV0dG9uIHx8IF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX190b2RheS1idXR0b25cIixcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vblNlbGVjdChnZXRTdGFydE9mRGF0ZShub3coX3RoaXMucHJvcHMudXRjT2Zmc2V0KSksIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3RoaXMucHJvcHMudG9kYXlCdXR0b25cbiAgICAgICk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlck1vbnRocyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9udGhMaXN0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLnByb3BzLm1vbnRoc1Nob3duOyArK2kpIHtcbiAgICAgICAgdmFyIG1vbnRoRGF0ZSA9IGFkZE1vbnRocyhjbG9uZURhdGUoX3RoaXMuc3RhdGUuZGF0ZSksIGkpO1xuICAgICAgICB2YXIgbW9udGhLZXkgPSBcIm1vbnRoLVwiICsgaTtcbiAgICAgICAgbW9udGhMaXN0LnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtleTogbW9udGhLZXksXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihkaXYpIHtcbiAgICAgICAgICAgICAgX3RoaXMubW9udGhDb250YWluZXIgPSBkaXY7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWNvbnRhaW5lclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlclwiIH0sXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJDdXJyZW50TW9udGgobW9udGhEYXRlKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyX19kcm9wZG93biByZWFjdC1kYXRlcGlja2VyX19oZWFkZXJfX2Ryb3Bkb3duLS1cIiArIF90aGlzLnByb3BzLmRyb3Bkb3duTW9kZSxcbiAgICAgICAgICAgICAgICBvbkZvY3VzOiBfdGhpcy5oYW5kbGVEcm9wZG93bkZvY3VzXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF90aGlzLnJlbmRlck1vbnRoRHJvcGRvd24oaSAhPT0gMCksXG4gICAgICAgICAgICAgIF90aGlzLnJlbmRlck1vbnRoWWVhckRyb3Bkb3duKGkgIT09IDApLFxuICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJZZWFyRHJvcGRvd24oaSAhPT0gMClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXNcIiB9LFxuICAgICAgICAgICAgICBfdGhpcy5oZWFkZXIobW9udGhEYXRlKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb250aCwge1xuICAgICAgICAgICAgZGF5OiBtb250aERhdGUsXG4gICAgICAgICAgICBkYXlDbGFzc05hbWU6IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZSxcbiAgICAgICAgICAgIG9uRGF5Q2xpY2s6IF90aGlzLmhhbmRsZURheUNsaWNrLFxuICAgICAgICAgICAgb25EYXlNb3VzZUVudGVyOiBfdGhpcy5oYW5kbGVEYXlNb3VzZUVudGVyLFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiBfdGhpcy5oYW5kbGVNb250aE1vdXNlTGVhdmUsXG4gICAgICAgICAgICBvbldlZWtTZWxlY3Q6IF90aGlzLnByb3BzLm9uV2Vla1NlbGVjdCxcbiAgICAgICAgICAgIGZvcm1hdFdlZWtOdW1iZXI6IF90aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIsXG4gICAgICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICAgICAgbWF4RGF0ZTogX3RoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICAgICAgIGV4Y2x1ZGVEYXRlczogX3RoaXMucHJvcHMuZXhjbHVkZURhdGVzLFxuICAgICAgICAgICAgaGlnaGxpZ2h0RGF0ZXM6IF90aGlzLnByb3BzLmhpZ2hsaWdodERhdGVzLFxuICAgICAgICAgICAgc2VsZWN0aW5nRGF0ZTogX3RoaXMuc3RhdGUuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICAgIGluY2x1ZGVEYXRlczogX3RoaXMucHJvcHMuaW5jbHVkZURhdGVzLFxuICAgICAgICAgICAgaW5saW5lOiBfdGhpcy5wcm9wcy5pbmxpbmUsXG4gICAgICAgICAgICBmaXhlZEhlaWdodDogX3RoaXMucHJvcHMuZml4ZWRIZWlnaHQsXG4gICAgICAgICAgICBmaWx0ZXJEYXRlOiBfdGhpcy5wcm9wcy5maWx0ZXJEYXRlLFxuICAgICAgICAgICAgcHJlU2VsZWN0aW9uOiBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sXG4gICAgICAgICAgICBzZWxlY3RlZDogX3RoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgICBzZWxlY3RzU3RhcnQ6IF90aGlzLnByb3BzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgICAgIHNlbGVjdHNFbmQ6IF90aGlzLnByb3BzLnNlbGVjdHNFbmQsXG4gICAgICAgICAgICBzaG93V2Vla051bWJlcnM6IF90aGlzLnByb3BzLnNob3dXZWVrTnVtYmVycyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogX3RoaXMucHJvcHMuc3RhcnREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZTogX3RoaXMucHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgICAgIHBlZWtOZXh0TW9udGg6IF90aGlzLnByb3BzLnBlZWtOZXh0TW9udGgsXG4gICAgICAgICAgICB1dGNPZmZzZXQ6IF90aGlzLnByb3BzLnV0Y09mZnNldFxuICAgICAgICAgIH0pXG4gICAgICAgICkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1vbnRoTGlzdDtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyVGltZVNlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZSwge1xuICAgICAgICAgIHNlbGVjdGVkOiBfdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICBvbkNoYW5nZTogX3RoaXMucHJvcHMub25UaW1lQ2hhbmdlLFxuICAgICAgICAgIGZvcm1hdDogX3RoaXMucHJvcHMudGltZUZvcm1hdCxcbiAgICAgICAgICBpbmNsdWRlVGltZXM6IF90aGlzLnByb3BzLmluY2x1ZGVUaW1lcyxcbiAgICAgICAgICBpbnRlcnZhbHM6IF90aGlzLnByb3BzLnRpbWVJbnRlcnZhbHMsXG4gICAgICAgICAgbWluVGltZTogX3RoaXMucHJvcHMubWluVGltZSxcbiAgICAgICAgICBtYXhUaW1lOiBfdGhpcy5wcm9wcy5tYXhUaW1lLFxuICAgICAgICAgIGV4Y2x1ZGVUaW1lczogX3RoaXMucHJvcHMuZXhjbHVkZVRpbWVzLFxuICAgICAgICAgIHRpbWVDYXB0aW9uOiBfdGhpcy5wcm9wcy50aW1lQ2FwdGlvbixcbiAgICAgICAgICB0b2RheUJ1dHRvbjogX3RoaXMucHJvcHMudG9kYXlCdXR0b24sXG4gICAgICAgICAgc2hvd01vbnRoRHJvcGRvd246IF90aGlzLnByb3BzLnNob3dNb250aERyb3Bkb3duLFxuICAgICAgICAgIHNob3dNb250aFllYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhckRyb3Bkb3duLFxuICAgICAgICAgIHNob3dZZWFyRHJvcGRvd246IF90aGlzLnByb3BzLnNob3dZZWFyRHJvcGRvd24sXG4gICAgICAgICAgd2l0aFBvcnRhbDogX3RoaXMucHJvcHMud2l0aFBvcnRhbCxcbiAgICAgICAgICBtb250aFJlZjogX3RoaXMuc3RhdGUubW9udGhDb250YWluZXIsXG4gICAgICAgICAgaW5qZWN0VGltZXM6IF90aGlzLnByb3BzLmluamVjdFRpbWVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGU6IF90aGlzLmxvY2FsaXplRGF0ZShfdGhpcy5nZXREYXRlSW5WaWV3KCkpLFxuICAgICAgc2VsZWN0aW5nRGF0ZTogbnVsbCxcbiAgICAgIG1vbnRoQ29udGFpbmVyOiBfdGhpcy5tb250aENvbnRhaW5lclxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQ2FsZW5kYXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAvLyBtb250aENvbnRhaW5lciBoZWlnaHQgaXMgbmVlZGVkIGluIHRpbWUgY29tcG9uZW50XG4gICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBoZWlnaHQgZm9yIHRoZSB1bCBpbiB0aGUgdGltZSBjb21wb25lbnRcbiAgICAvLyBzZXRTdGF0ZSBoZXJlIHNvIGhlaWdodCBpcyBnaXZlbiBhZnRlciBmaW5hbCBjb21wb25lbnRcbiAgICAvLyBsYXlvdXQgaXMgcmVuZGVyZWRcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCkge1xuICAgICAgdGhpcy5hc3NpZ25Nb250aENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgbW9udGhDb250YWluZXI6IF90aGlzMi5tb250aENvbnRhaW5lciB9KTtcbiAgICAgIH0oKTtcbiAgICB9XG4gIH07XG5cbiAgQ2FsZW5kYXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24gJiYgIWlzU2FtZURheSh0aGlzLnByb3BzLnByZVNlbGVjdGlvbiwgcHJldlByb3BzLnByZVNlbGVjdGlvbikpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXRlOiB0aGlzLmxvY2FsaXplRGF0ZSh0aGlzLnByb3BzLnByZVNlbGVjdGlvbilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5vcGVuVG9EYXRlICYmICFpc1NhbWVEYXkodGhpcy5wcm9wcy5vcGVuVG9EYXRlLCBwcmV2UHJvcHMub3BlblRvRGF0ZSkpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXRlOiB0aGlzLmxvY2FsaXplRGF0ZSh0aGlzLnByb3BzLm9wZW5Ub0RhdGUpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgQ29udGFpbmVyID0gdGhpcy5wcm9wcy5jb250YWluZXIgfHwgQ2FsZW5kYXJDb250YWluZXI7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbnRhaW5lcixcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKFwicmVhY3QtZGF0ZXBpY2tlclwiLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlci0tdGltZS1vbmx5XCI6IHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5XG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgdGhpcy5yZW5kZXJQcmV2aW91c01vbnRoQnV0dG9uKCksXG4gICAgICB0aGlzLnJlbmRlck5leHRNb250aEJ1dHRvbigpLFxuICAgICAgdGhpcy5yZW5kZXJNb250aHMoKSxcbiAgICAgIHRoaXMucmVuZGVyVG9kYXlCdXR0b24oKSxcbiAgICAgIHRoaXMucmVuZGVyVGltZVNlY3Rpb24oKSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBDYWxlbmRhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2FsZW5kYXIucHJvcFR5cGVzID0ge1xuICBhZGp1c3REYXRlT25DaGFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgY29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZGF0ZUZvcm1hdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5XSkuaXNSZXF1aXJlZCxcbiAgZGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgZHJvcGRvd25Nb2RlOiBQcm9wVHlwZXMub25lT2YoW1wic2Nyb2xsXCIsIFwic2VsZWN0XCJdKSxcbiAgZW5kRGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZXhjbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGZpbHRlckRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICBmaXhlZEhlaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcm1hdFdlZWtOdW1iZXI6IFByb3BUeXBlcy5mdW5jLFxuICBoaWdobGlnaHREYXRlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKSxcbiAgaW5jbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluY2x1ZGVUaW1lczogUHJvcFR5cGVzLmFycmF5LFxuICBpbmplY3RUaW1lczogUHJvcFR5cGVzLmFycmF5LFxuICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1pbkRhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1vbnRoc1Nob3duOiBQcm9wVHlwZXMubnVtYmVyLFxuICBvbkNsaWNrT3V0c2lkZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Nb250aENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uWWVhckNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIG9uRHJvcGRvd25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbldlZWtTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93VGltZVNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dUaW1lU2VsZWN0T25seTogUHJvcFR5cGVzLmJvb2wsXG4gIHRpbWVGb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpbWVJbnRlcnZhbHM6IFByb3BUeXBlcy5udW1iZXIsXG4gIG9uVGltZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG1pblRpbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1heFRpbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGV4Y2x1ZGVUaW1lczogUHJvcFR5cGVzLmFycmF5LFxuICB0aW1lQ2FwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3BlblRvRGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgcGVla05leHRNb250aDogUHJvcFR5cGVzLmJvb2wsXG4gIHNjcm9sbGFibGVZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBwcmVTZWxlY3Rpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZWxlY3RzRW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2VsZWN0c1N0YXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd01vbnRoRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBzaG93TW9udGhZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBzaG93V2Vla051bWJlcnM6IFByb3BUeXBlcy5ib29sLFxuICBzaG93WWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RhcnREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICB0b2RheUJ1dHRvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgdXNlV2Vla2RheXNTaG9ydDogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcm1hdFdlZWtEYXk6IFByb3BUeXBlcy5mdW5jLFxuICB3aXRoUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcbiAgdXRjT2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICB3ZWVrTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIHNldE9wZW46IFByb3BUeXBlcy5mdW5jLFxuICB1c2VTaG9ydE1vbnRoSW5Ecm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmV4dE1vbnRoQnV0dG9uTGFiZWw6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBwb3BwZXJQbGFjZW1lbnRQb3NpdGlvbnMgPSBbXCJhdXRvXCIsIFwiYXV0by1sZWZ0XCIsIFwiYXV0by1yaWdodFwiLCBcImJvdHRvbVwiLCBcImJvdHRvbS1lbmRcIiwgXCJib3R0b20tc3RhcnRcIiwgXCJsZWZ0XCIsIFwibGVmdC1lbmRcIiwgXCJsZWZ0LXN0YXJ0XCIsIFwicmlnaHRcIiwgXCJyaWdodC1lbmRcIiwgXCJyaWdodC1zdGFydFwiLCBcInRvcFwiLCBcInRvcC1lbmRcIiwgXCJ0b3Atc3RhcnRcIl07XG5cbnZhciBQb3BwZXJDb21wb25lbnQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBpbmhlcml0cyhQb3BwZXJDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcHBlckNvbXBvbmVudCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXJDb21wb25lbnQpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQb3BwZXJDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgaGlkZVBvcHBlciA9IF9wcm9wcy5oaWRlUG9wcGVyLFxuICAgICAgICBwb3BwZXJDb21wb25lbnQgPSBfcHJvcHMucG9wcGVyQ29tcG9uZW50LFxuICAgICAgICBwb3BwZXJNb2RpZmllcnMgPSBfcHJvcHMucG9wcGVyTW9kaWZpZXJzLFxuICAgICAgICBwb3BwZXJQbGFjZW1lbnQgPSBfcHJvcHMucG9wcGVyUGxhY2VtZW50LFxuICAgICAgICB0YXJnZXRDb21wb25lbnQgPSBfcHJvcHMudGFyZ2V0Q29tcG9uZW50O1xuXG5cbiAgICB2YXIgcG9wcGVyID0gdm9pZCAwO1xuXG4gICAgaWYgKCFoaWRlUG9wcGVyKSB7XG4gICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzbmFtZXMoXCJyZWFjdC1kYXRlcGlja2VyLXBvcHBlclwiLCBjbGFzc05hbWUpO1xuICAgICAgcG9wcGVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgUG9wcGVyLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIG1vZGlmaWVyczogcG9wcGVyTW9kaWZpZXJzLFxuICAgICAgICAgIHBsYWNlbWVudDogcG9wcGVyUGxhY2VtZW50XG4gICAgICAgIH0sXG4gICAgICAgIHBvcHBlckNvbXBvbmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIpIHtcbiAgICAgIHBvcHBlciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIsIHt9LCBwb3BwZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgTWFuYWdlcixcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUYXJnZXQsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXItd3JhcHBlclwiIH0sXG4gICAgICAgIHRhcmdldENvbXBvbmVudFxuICAgICAgKSxcbiAgICAgIHBvcHBlclxuICAgICk7XG4gIH07XG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyQ29tcG9uZW50LCBudWxsLCBbe1xuICAgIGtleTogXCJkZWZhdWx0UHJvcHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhpZGVQb3BwZXI6IHRydWUsXG4gICAgICAgIHBvcHBlck1vZGlmaWVyczoge1xuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGVzY2FwZVdpdGhSZWZlcmVuY2U6IHRydWUsXG4gICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogXCJ2aWV3cG9ydFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb3BwZXJQbGFjZW1lbnQ6IFwiYm90dG9tLXN0YXJ0XCJcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQb3BwZXJDb21wb25lbnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBvcHBlckNvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGlkZVBvcHBlcjogUHJvcFR5cGVzLmJvb2wsXG4gIHBvcHBlckNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIHBvcHBlck1vZGlmaWVyczogUHJvcFR5cGVzLm9iamVjdCwgLy8gPGRhdGVwaWNrZXIvPiBwcm9wc1xuICBwb3BwZXJQbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihwb3BwZXJQbGFjZW1lbnRQb3NpdGlvbnMpLCAvLyA8ZGF0ZXBpY2tlci8+IHByb3BzXG4gIHBvcHBlckNvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRcbn07XG5cbnZhciBvdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcyA9IFwicmVhY3QtZGF0ZXBpY2tlci1pZ25vcmUtb25jbGlja291dHNpZGVcIjtcbnZhciBXcmFwcGVkQ2FsZW5kYXIgPSBvbkNsaWNrT3V0c2lkZShDYWxlbmRhcik7XG5cbi8vIENvbXBhcmVzIGRhdGVzIHllYXIrbW9udGggY29tYmluYXRpb25zXG5mdW5jdGlvbiBoYXNQcmVTZWxlY3Rpb25DaGFuZ2VkKGRhdGUxLCBkYXRlMikge1xuICBpZiAoZGF0ZTEgJiYgZGF0ZTIpIHtcbiAgICByZXR1cm4gZ2V0TW9udGgoZGF0ZTEpICE9PSBnZXRNb250aChkYXRlMikgfHwgZ2V0WWVhcihkYXRlMSkgIT09IGdldFllYXIoZGF0ZTIpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGUxICE9PSBkYXRlMjtcbn1cblxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uQ2hhbmdlZChkYXRlMSwgZGF0ZTIpIHtcbiAgaWYgKGRhdGUxICYmIGRhdGUyKSB7XG4gICAgcmV0dXJuICFlcXVhbHMoZGF0ZTEsIGRhdGUyKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBHZW5lcmFsIGRhdGVwaWNrZXIgY29tcG9uZW50LlxuICovXG5cbnZhciBEYXRlUGlja2VyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgaW5oZXJpdHMoRGF0ZVBpY2tlciwgX1JlYWN0JENvbXBvbmVudCk7XG4gIGNyZWF0ZUNsYXNzKERhdGVQaWNrZXIsIG51bGwsIFt7XG4gICAga2V5OiBcImRlZmF1bHRQcm9wc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWxsb3dTYW1lRGF5OiBmYWxzZSxcbiAgICAgICAgZGF0ZUZvcm1hdDogXCJMXCIsXG4gICAgICAgIGRhdGVGb3JtYXRDYWxlbmRhcjogXCJNTU1NIFlZWVlcIixcbiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge30sXG5cbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbjogZmFsc2UsXG4gICAgICAgIGRyb3Bkb3duTW9kZTogXCJzY3JvbGxcIixcbiAgICAgICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHt9LFxuICAgICAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHt9LFxuICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bigpIHt9LFxuICAgICAgICBvblNlbGVjdDogZnVuY3Rpb24gb25TZWxlY3QoKSB7fSxcbiAgICAgICAgb25DbGlja091dHNpZGU6IGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlJCQxKCkge30sXG4gICAgICAgIG9uTW9udGhDaGFuZ2U6IGZ1bmN0aW9uIG9uTW9udGhDaGFuZ2UoKSB7fSxcblxuICAgICAgICBwcmV2ZW50T3Blbk9uRm9jdXM6IGZhbHNlLFxuICAgICAgICBvblllYXJDaGFuZ2U6IGZ1bmN0aW9uIG9uWWVhckNoYW5nZSgpIHt9LFxuXG4gICAgICAgIG1vbnRoc1Nob3duOiAxLFxuICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgIHdpdGhQb3J0YWw6IGZhbHNlLFxuICAgICAgICBzaG91bGRDbG9zZU9uU2VsZWN0OiB0cnVlLFxuICAgICAgICBzaG93VGltZVNlbGVjdDogZmFsc2UsXG4gICAgICAgIHRpbWVJbnRlcnZhbHM6IDMwLFxuICAgICAgICB0aW1lQ2FwdGlvbjogXCJUaW1lXCIsXG4gICAgICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDogXCJQcmV2aW91cyBNb250aFwiLFxuICAgICAgICBuZXh0TW9udGhCdXR0b25MYWJlbDogXCJOZXh0IG1vbnRoXCJcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gRGF0ZVBpY2tlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGVQaWNrZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldFByZVNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vcGVuVG9EYXRlID8gbmV3RGF0ZShfdGhpcy5wcm9wcy5vcGVuVG9EYXRlKSA6IF90aGlzLnByb3BzLnNlbGVjdHNFbmQgJiYgX3RoaXMucHJvcHMuc3RhcnREYXRlID8gbmV3RGF0ZShfdGhpcy5wcm9wcy5zdGFydERhdGUpIDogX3RoaXMucHJvcHMuc2VsZWN0c1N0YXJ0ICYmIF90aGlzLnByb3BzLmVuZERhdGUgPyBuZXdEYXRlKF90aGlzLnByb3BzLmVuZERhdGUpIDogbm93KF90aGlzLnByb3BzLnV0Y09mZnNldCk7XG4gICAgfTtcblxuICAgIF90aGlzLmNhbGNJbml0aWFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZGVmYXVsdFByZVNlbGVjdGlvbiA9IF90aGlzLmdldFByZVNlbGVjdGlvbigpO1xuICAgICAgdmFyIG1pbkRhdGUgPSBnZXRFZmZlY3RpdmVNaW5EYXRlKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBtYXhEYXRlID0gZ2V0RWZmZWN0aXZlTWF4RGF0ZShfdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgYm91bmRlZFByZVNlbGVjdGlvbiA9IG1pbkRhdGUgJiYgaXNCZWZvcmUoZGVmYXVsdFByZVNlbGVjdGlvbiwgbWluRGF0ZSkgPyBtaW5EYXRlIDogbWF4RGF0ZSAmJiBpc0FmdGVyKGRlZmF1bHRQcmVTZWxlY3Rpb24sIG1heERhdGUpID8gbWF4RGF0ZSA6IGRlZmF1bHRQcmVTZWxlY3Rpb247XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcGVuOiBfdGhpcy5wcm9wcy5zdGFydE9wZW4gfHwgZmFsc2UsXG4gICAgICAgIHByZXZlbnRGb2N1czogZmFsc2UsXG4gICAgICAgIHByZVNlbGVjdGlvbjogX3RoaXMucHJvcHMuc2VsZWN0ZWQgPyBuZXdEYXRlKF90aGlzLnByb3BzLnNlbGVjdGVkKSA6IGJvdW5kZWRQcmVTZWxlY3Rpb24sXG4gICAgICAgIC8vIHRyYW5zZm9ybWluZyBoaWdobGlnaHRlZCBkYXlzIChwZXJoYXBzIG5lc3RlZCBhcnJheSlcbiAgICAgICAgLy8gdG8gZmxhdCBNYXAgZm9yIGZhc3RlciBhY2Nlc3MgaW4gZGF5LmpzeFxuICAgICAgICBoaWdobGlnaHREYXRlczogZ2V0SGlnaHRMaWdodERheXNNYXAoX3RoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXMpLFxuICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zZXRGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5pbnB1dCAmJiBfdGhpcy5pbnB1dC5mb2N1cykge1xuICAgICAgICBfdGhpcy5pbnB1dC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zZXRPcGVuID0gZnVuY3Rpb24gKG9wZW4pIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgcHJlU2VsZWN0aW9uOiBvcGVuICYmIF90aGlzLnN0YXRlLm9wZW4gPyBfdGhpcy5zdGF0ZS5wcmVTZWxlY3Rpb24gOiBfdGhpcy5jYWxjSW5pdGlhbFN0YXRlKCkucHJlU2VsZWN0aW9uLFxuICAgICAgICBsYXN0UHJlU2VsZWN0Q2hhbmdlOiBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLnByZXZlbnRGb2N1cykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5wcmV2ZW50T3Blbk9uRm9jdXMgJiYgIV90aGlzLnByb3BzLnJlYWRPbmx5KSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3Blbih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBmb2N1c2VkOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5jYW5jZWxGb2N1c0lucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmlucHV0Rm9jdXNUaW1lb3V0KTtcbiAgICAgIF90aGlzLmlucHV0Rm9jdXNUaW1lb3V0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZGVmZXJGb2N1c0lucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FuY2VsRm9jdXNJbnB1dCgpO1xuICAgICAgX3RoaXMuaW5wdXRGb2N1c1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldEZvY3VzKCk7XG4gICAgICB9LCAxKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRHJvcGRvd25Gb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbmNlbEZvY3VzSW5wdXQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnByb3BzLndpdGhQb3J0YWwpIHtcbiAgICAgICAgX3RoaXMuZGVmZXJGb2N1c0lucHV0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBmb2N1c2VkOiBmYWxzZSB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2FsZW5kYXJDbGlja091dHNpZGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuaW5saW5lKSB7XG4gICAgICAgIF90aGlzLnNldE9wZW4oZmFsc2UpO1xuICAgICAgfVxuICAgICAgX3RoaXMucHJvcHMub25DbGlja091dHNpZGUoZXZlbnQpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLndpdGhQb3J0YWwpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFsbEFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYWxsQXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGV2ZW50ID0gYWxsQXJnc1swXTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNoYW5nZVJhdykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZVJhdy5hcHBseShfdGhpcywgYWxsQXJncyk7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkICE9PSBcImZ1bmN0aW9uXCIgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaW5wdXRWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICBsYXN0UHJlU2VsZWN0Q2hhbmdlOiBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9JTlBVVFxuICAgICAgfSk7XG4gICAgICB2YXIgZGF0ZSA9IHBhcnNlRGF0ZShldmVudC50YXJnZXQudmFsdWUsIF90aGlzLnByb3BzKTtcbiAgICAgIGlmIChkYXRlIHx8ICFldmVudC50YXJnZXQudmFsdWUpIHtcbiAgICAgICAgX3RoaXMuc2V0U2VsZWN0ZWQoZGF0ZSwgZXZlbnQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3QgPSBmdW5jdGlvbiAoZGF0ZSwgZXZlbnQpIHtcbiAgICAgIC8vIFByZXZlbnRpbmcgb25Gb2N1cyBldmVudCB0byBmaXggaXNzdWVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IYWNrZXIweDAxL3JlYWN0LWRhdGVwaWNrZXIvaXNzdWVzLzYyOFxuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBwcmV2ZW50Rm9jdXM6IHRydWUgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5wcmV2ZW50Rm9jdXNUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgcHJldmVudEZvY3VzOiBmYWxzZSB9KTtcbiAgICAgICAgfSwgNTApO1xuICAgICAgICByZXR1cm4gX3RoaXMucHJldmVudEZvY3VzVGltZW91dDtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWQoZGF0ZSwgZXZlbnQpO1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0IHx8IF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0KSB7XG4gICAgICAgIF90aGlzLnNldFByZVNlbGVjdGlvbihkYXRlKTtcbiAgICAgIH0gZWxzZSBpZiAoIV90aGlzLnByb3BzLmlubGluZSkge1xuICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0U2VsZWN0ZWQgPSBmdW5jdGlvbiAoZGF0ZSwgZXZlbnQsIGtlZXBJbnB1dCkge1xuICAgICAgdmFyIGNoYW5nZWREYXRlID0gZGF0ZTtcblxuICAgICAgaWYgKGNoYW5nZWREYXRlICE9PSBudWxsICYmIGlzRGF5RGlzYWJsZWQoY2hhbmdlZERhdGUsIF90aGlzLnByb3BzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTYW1lRGF5KF90aGlzLnByb3BzLnNlbGVjdGVkLCBjaGFuZ2VkRGF0ZSkgfHwgX3RoaXMucHJvcHMuYWxsb3dTYW1lRGF5KSB7XG4gICAgICAgIGlmIChjaGFuZ2VkRGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gX3RoaXMucHJvcHMuc2VsZWN0ZWQ7XG4gICAgICAgICAgICBpZiAoa2VlcElucHV0KSBzZWxlY3RlZCA9IG5ld0RhdGUoY2hhbmdlZERhdGUpO1xuICAgICAgICAgICAgY2hhbmdlZERhdGUgPSBzZXRUaW1lKG5ld0RhdGUoY2hhbmdlZERhdGUpLCB7XG4gICAgICAgICAgICAgIGhvdXI6IGdldEhvdXIoc2VsZWN0ZWQpLFxuICAgICAgICAgICAgICBtaW51dGU6IGdldE1pbnV0ZShzZWxlY3RlZCksXG4gICAgICAgICAgICAgIHNlY29uZDogZ2V0U2Vjb25kKHNlbGVjdGVkKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghX3RoaXMucHJvcHMuaW5saW5lKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIHByZVNlbGVjdGlvbjogY2hhbmdlZERhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShjaGFuZ2VkRGF0ZSwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wcm9wcy5vblNlbGVjdChjaGFuZ2VkRGF0ZSwgZXZlbnQpO1xuXG4gICAgICBpZiAoIWtlZXBJbnB1dCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlucHV0VmFsdWU6IG51bGwgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNldFByZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICB2YXIgaXNEYXRlUmFuZ2VQcmVzZW50ID0gdHlwZW9mIF90aGlzLnByb3BzLm1pbkRhdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIF90aGlzLnByb3BzLm1heERhdGUgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICB2YXIgaXNWYWxpZERhdGVTZWxlY3Rpb24gPSBpc0RhdGVSYW5nZVByZXNlbnQgJiYgZGF0ZSA/IGlzRGF5SW5SYW5nZShkYXRlLCBfdGhpcy5wcm9wcy5taW5EYXRlLCBfdGhpcy5wcm9wcy5tYXhEYXRlKSA6IHRydWU7XG4gICAgICBpZiAoaXNWYWxpZERhdGVTZWxlY3Rpb24pIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByZVNlbGVjdGlvbjogZGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlVGltZUNoYW5nZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBfdGhpcy5wcm9wcy5zZWxlY3RlZCA/IF90aGlzLnByb3BzLnNlbGVjdGVkIDogX3RoaXMuZ2V0UHJlU2VsZWN0aW9uKCk7XG4gICAgICB2YXIgY2hhbmdlZERhdGUgPSBzZXRUaW1lKGNsb25lRGF0ZShzZWxlY3RlZCksIHtcbiAgICAgICAgaG91cjogZ2V0SG91cih0aW1lKSxcbiAgICAgICAgbWludXRlOiBnZXRNaW51dGUodGltZSlcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHByZVNlbGVjdGlvbjogY2hhbmdlZERhdGVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShjaGFuZ2VkRGF0ZSk7XG4gICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgaW5wdXRWYWx1ZTogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25JbnB1dENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhX3RoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgX3RoaXMuc2V0T3Blbih0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25JbnB1dEtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC5rZXk7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnByb3BzLmlubGluZSAmJiAhX3RoaXMucHJvcHMucHJldmVudE9wZW5PbkZvY3VzKSB7XG4gICAgICAgIGlmIChldmVudEtleSA9PT0gXCJBcnJvd0Rvd25cIiB8fCBldmVudEtleSA9PT0gXCJBcnJvd1VwXCIpIHtcbiAgICAgICAgICBfdGhpcy5vbklucHV0Q2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY29weSA9IG5ld0RhdGUoX3RoaXMuc3RhdGUucHJlU2VsZWN0aW9uKTtcbiAgICAgIGlmIChldmVudEtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICgoaXNNb21lbnQoX3RoaXMuc3RhdGUucHJlU2VsZWN0aW9uKSB8fCBpc0RhdGUoX3RoaXMuc3RhdGUucHJlU2VsZWN0aW9uKSkgJiYgX3RoaXMuc3RhdGUubGFzdFByZVNlbGVjdENoYW5nZSA9PT0gUFJFU0VMRUNUX0NIQU5HRV9WSUFfTkFWSUdBVEUpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVTZWxlY3QoY29weSwgZXZlbnQpO1xuICAgICAgICAgICFfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0ICYmIF90aGlzLnNldFByZVNlbGVjdGlvbihjb3B5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChldmVudEtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRLZXkgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgICB2YXIgbmV3U2VsZWN0aW9uID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKGV2ZW50S2V5KSB7XG4gICAgICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gc3VidHJhY3REYXlzKGNvcHksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGFkZERheXMoY29weSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gc3VidHJhY3RXZWVrcyhjb3B5LCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGFkZFdlZWtzKGNvcHksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlBhZ2VVcFwiOlxuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gc3VidHJhY3RNb250aHMoY29weSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUGFnZURvd25cIjpcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGFkZE1vbnRocyhjb3B5LCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJIb21lXCI6XG4gICAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBzdWJ0cmFjdFllYXJzKGNvcHksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkVuZFwiOlxuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gYWRkWWVhcnMoY29weSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5ld1NlbGVjdGlvbikgcmV0dXJuOyAvLyBMZXQgdGhlIGlucHV0IGNvbXBvbmVudCBoYW5kbGUgdGhpcyBrZXlkb3duXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgbGFzdFByZVNlbGVjdENoYW5nZTogUFJFU0VMRUNUX0NIQU5HRV9WSUFfTkFWSUdBVEUgfSk7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZChuZXdTZWxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnNldFByZVNlbGVjdGlvbihuZXdTZWxlY3Rpb24pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkNsZWFyQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShudWxsLCBldmVudCk7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlucHV0VmFsdWU6IG51bGwgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMub25DbGVhckNsaWNrKCk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckNhbGVuZGFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5pbmxpbmUgJiYgKCFfdGhpcy5zdGF0ZS5vcGVuIHx8IF90aGlzLnByb3BzLmRpc2FibGVkIHx8IF90aGlzLnByb3BzLnJlYWRPbmx5KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBXcmFwcGVkQ2FsZW5kYXIsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlbGVtKSB7XG4gICAgICAgICAgICBfdGhpcy5jYWxlbmRhciA9IGVsZW07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2NhbGU6IF90aGlzLnByb3BzLmxvY2FsZSxcbiAgICAgICAgICBhZGp1c3REYXRlT25DaGFuZ2U6IF90aGlzLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSxcbiAgICAgICAgICBzZXRPcGVuOiBfdGhpcy5zZXRPcGVuLFxuICAgICAgICAgIGRhdGVGb3JtYXQ6IF90aGlzLnByb3BzLmRhdGVGb3JtYXRDYWxlbmRhcixcbiAgICAgICAgICB1c2VXZWVrZGF5c1Nob3J0OiBfdGhpcy5wcm9wcy51c2VXZWVrZGF5c1Nob3J0LFxuICAgICAgICAgIGZvcm1hdFdlZWtEYXk6IF90aGlzLnByb3BzLmZvcm1hdFdlZWtEYXksXG4gICAgICAgICAgZHJvcGRvd25Nb2RlOiBfdGhpcy5wcm9wcy5kcm9wZG93bk1vZGUsXG4gICAgICAgICAgc2VsZWN0ZWQ6IF90aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIHByZVNlbGVjdGlvbjogX3RoaXMuc3RhdGUucHJlU2VsZWN0aW9uLFxuICAgICAgICAgIG9uU2VsZWN0OiBfdGhpcy5oYW5kbGVTZWxlY3QsXG4gICAgICAgICAgb25XZWVrU2VsZWN0OiBfdGhpcy5wcm9wcy5vbldlZWtTZWxlY3QsXG4gICAgICAgICAgb3BlblRvRGF0ZTogX3RoaXMucHJvcHMub3BlblRvRGF0ZSxcbiAgICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICAgIG1heERhdGU6IF90aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgICAgc2VsZWN0c1N0YXJ0OiBfdGhpcy5wcm9wcy5zZWxlY3RzU3RhcnQsXG4gICAgICAgICAgc2VsZWN0c0VuZDogX3RoaXMucHJvcHMuc2VsZWN0c0VuZCxcbiAgICAgICAgICBzdGFydERhdGU6IF90aGlzLnByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlOiBfdGhpcy5wcm9wcy5lbmREYXRlLFxuICAgICAgICAgIGV4Y2x1ZGVEYXRlczogX3RoaXMucHJvcHMuZXhjbHVkZURhdGVzLFxuICAgICAgICAgIGZpbHRlckRhdGU6IF90aGlzLnByb3BzLmZpbHRlckRhdGUsXG4gICAgICAgICAgb25DbGlja091dHNpZGU6IF90aGlzLmhhbmRsZUNhbGVuZGFyQ2xpY2tPdXRzaWRlLFxuICAgICAgICAgIGZvcm1hdFdlZWtOdW1iZXI6IF90aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIsXG4gICAgICAgICAgaGlnaGxpZ2h0RGF0ZXM6IF90aGlzLnN0YXRlLmhpZ2hsaWdodERhdGVzLFxuICAgICAgICAgIGluY2x1ZGVEYXRlczogX3RoaXMucHJvcHMuaW5jbHVkZURhdGVzLFxuICAgICAgICAgIGluY2x1ZGVUaW1lczogX3RoaXMucHJvcHMuaW5jbHVkZVRpbWVzLFxuICAgICAgICAgIGluamVjdFRpbWVzOiBfdGhpcy5wcm9wcy5pbmplY3RUaW1lcyxcbiAgICAgICAgICBpbmxpbmU6IF90aGlzLnByb3BzLmlubGluZSxcbiAgICAgICAgICBwZWVrTmV4dE1vbnRoOiBfdGhpcy5wcm9wcy5wZWVrTmV4dE1vbnRoLFxuICAgICAgICAgIHNob3dNb250aERyb3Bkb3duOiBfdGhpcy5wcm9wcy5zaG93TW9udGhEcm9wZG93bixcbiAgICAgICAgICB1c2VTaG9ydE1vbnRoSW5Ecm9wZG93bjogX3RoaXMucHJvcHMudXNlU2hvcnRNb250aEluRHJvcGRvd24sXG4gICAgICAgICAgc2hvd01vbnRoWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyRHJvcGRvd24sXG4gICAgICAgICAgc2hvd1dlZWtOdW1iZXJzOiBfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMsXG4gICAgICAgICAgc2hvd1llYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2hvd1llYXJEcm9wZG93bixcbiAgICAgICAgICB3aXRoUG9ydGFsOiBfdGhpcy5wcm9wcy53aXRoUG9ydGFsLFxuICAgICAgICAgIGZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbjogX3RoaXMucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uLFxuICAgICAgICAgIHNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbjogX3RoaXMucHJvcHMuc2hvd0Rpc2FibGVkTW9udGhOYXZpZ2F0aW9uLFxuICAgICAgICAgIHNjcm9sbGFibGVZZWFyRHJvcGRvd246IF90aGlzLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd24sXG4gICAgICAgICAgc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24sXG4gICAgICAgICAgdG9kYXlCdXR0b246IF90aGlzLnByb3BzLnRvZGF5QnV0dG9uLFxuICAgICAgICAgIHdlZWtMYWJlbDogX3RoaXMucHJvcHMud2Vla0xhYmVsLFxuICAgICAgICAgIHV0Y09mZnNldDogX3RoaXMucHJvcHMudXRjT2Zmc2V0LFxuICAgICAgICAgIG91dHNpZGVDbGlja0lnbm9yZUNsYXNzOiBvdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcyxcbiAgICAgICAgICBmaXhlZEhlaWdodDogX3RoaXMucHJvcHMuZml4ZWRIZWlnaHQsXG4gICAgICAgICAgbW9udGhzU2hvd246IF90aGlzLnByb3BzLm1vbnRoc1Nob3duLFxuICAgICAgICAgIG9uRHJvcGRvd25Gb2N1czogX3RoaXMuaGFuZGxlRHJvcGRvd25Gb2N1cyxcbiAgICAgICAgICBvbk1vbnRoQ2hhbmdlOiBfdGhpcy5wcm9wcy5vbk1vbnRoQ2hhbmdlLFxuICAgICAgICAgIG9uWWVhckNoYW5nZTogX3RoaXMucHJvcHMub25ZZWFyQ2hhbmdlLFxuICAgICAgICAgIGRheUNsYXNzTmFtZTogX3RoaXMucHJvcHMuZGF5Q2xhc3NOYW1lLFxuICAgICAgICAgIHNob3dUaW1lU2VsZWN0OiBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCxcbiAgICAgICAgICBzaG93VGltZVNlbGVjdE9ubHk6IF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSxcbiAgICAgICAgICBvblRpbWVDaGFuZ2U6IF90aGlzLmhhbmRsZVRpbWVDaGFuZ2UsXG4gICAgICAgICAgdGltZUZvcm1hdDogX3RoaXMucHJvcHMudGltZUZvcm1hdCxcbiAgICAgICAgICB0aW1lSW50ZXJ2YWxzOiBfdGhpcy5wcm9wcy50aW1lSW50ZXJ2YWxzLFxuICAgICAgICAgIG1pblRpbWU6IF90aGlzLnByb3BzLm1pblRpbWUsXG4gICAgICAgICAgbWF4VGltZTogX3RoaXMucHJvcHMubWF4VGltZSxcbiAgICAgICAgICBleGNsdWRlVGltZXM6IF90aGlzLnByb3BzLmV4Y2x1ZGVUaW1lcyxcbiAgICAgICAgICB0aW1lQ2FwdGlvbjogX3RoaXMucHJvcHMudGltZUNhcHRpb24sXG4gICAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5wcm9wcy5jYWxlbmRhckNsYXNzTmFtZSxcbiAgICAgICAgICBjb250YWluZXI6IF90aGlzLnByb3BzLmNhbGVuZGFyQ29udGFpbmVyLFxuICAgICAgICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI6IF90aGlzLnByb3BzLnllYXJEcm9wZG93bkl0ZW1OdW1iZXIsXG4gICAgICAgICAgcHJldmlvdXNNb250aEJ1dHRvbkxhYmVsOiBfdGhpcy5wcm9wcy5wcmV2aW91c01vbnRoQnV0dG9uTGFiZWwsXG4gICAgICAgICAgbmV4dE1vbnRoQnV0dG9uTGFiZWw6IF90aGlzLnByb3BzLm5leHRNb250aEJ1dHRvbkxhYmVsXG4gICAgICAgIH0sXG4gICAgICAgIF90aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJEYXRlSW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXMsIF9SZWFjdCRjbG9uZUVsZW1lbnQ7XG5cbiAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc25hbWVzKF90aGlzLnByb3BzLmNsYXNzTmFtZSwgKF9jbGFzc25hbWVzID0ge30sIF9jbGFzc25hbWVzW291dHNpZGVDbGlja0lnbm9yZUNsYXNzXSA9IF90aGlzLnN0YXRlLm9wZW4sIF9jbGFzc25hbWVzKSk7XG5cbiAgICAgIHZhciBjdXN0b21JbnB1dCA9IF90aGlzLnByb3BzLmN1c3RvbUlucHV0IHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7IHR5cGU6IFwidGV4dFwiIH0pO1xuICAgICAgdmFyIGN1c3RvbUlucHV0UmVmID0gX3RoaXMucHJvcHMuY3VzdG9tSW5wdXRSZWYgfHwgXCJyZWZcIjtcbiAgICAgIHZhciBpbnB1dFZhbHVlID0gdHlwZW9mIF90aGlzLnByb3BzLnZhbHVlID09PSBcInN0cmluZ1wiID8gX3RoaXMucHJvcHMudmFsdWUgOiB0eXBlb2YgX3RoaXMuc3RhdGUuaW5wdXRWYWx1ZSA9PT0gXCJzdHJpbmdcIiA/IF90aGlzLnN0YXRlLmlucHV0VmFsdWUgOiBzYWZlRGF0ZUZvcm1hdChfdGhpcy5wcm9wcy5zZWxlY3RlZCwgX3RoaXMucHJvcHMpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1c3RvbUlucHV0LCAoX1JlYWN0JGNsb25lRWxlbWVudCA9IHt9LCBfUmVhY3QkY2xvbmVFbGVtZW50W2N1c3RvbUlucHV0UmVmXSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICBfdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgfSwgX1JlYWN0JGNsb25lRWxlbWVudC52YWx1ZSA9IGlucHV0VmFsdWUsIF9SZWFjdCRjbG9uZUVsZW1lbnQub25CbHVyID0gX3RoaXMuaGFuZGxlQmx1ciwgX1JlYWN0JGNsb25lRWxlbWVudC5vbkNoYW5nZSA9IF90aGlzLmhhbmRsZUNoYW5nZSwgX1JlYWN0JGNsb25lRWxlbWVudC5vbkNsaWNrID0gX3RoaXMub25JbnB1dENsaWNrLCBfUmVhY3QkY2xvbmVFbGVtZW50Lm9uRm9jdXMgPSBfdGhpcy5oYW5kbGVGb2N1cywgX1JlYWN0JGNsb25lRWxlbWVudC5vbktleURvd24gPSBfdGhpcy5vbklucHV0S2V5RG93biwgX1JlYWN0JGNsb25lRWxlbWVudC5pZCA9IF90aGlzLnByb3BzLmlkLCBfUmVhY3QkY2xvbmVFbGVtZW50Lm5hbWUgPSBfdGhpcy5wcm9wcy5uYW1lLCBfUmVhY3QkY2xvbmVFbGVtZW50LmF1dG9Gb2N1cyA9IF90aGlzLnByb3BzLmF1dG9Gb2N1cywgX1JlYWN0JGNsb25lRWxlbWVudC5wbGFjZWhvbGRlciA9IF90aGlzLnByb3BzLnBsYWNlaG9sZGVyVGV4dCwgX1JlYWN0JGNsb25lRWxlbWVudC5kaXNhYmxlZCA9IF90aGlzLnByb3BzLmRpc2FibGVkLCBfUmVhY3QkY2xvbmVFbGVtZW50LmF1dG9Db21wbGV0ZSA9IF90aGlzLnByb3BzLmF1dG9Db21wbGV0ZSwgX1JlYWN0JGNsb25lRWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc05hbWUsIF9SZWFjdCRjbG9uZUVsZW1lbnQudGl0bGUgPSBfdGhpcy5wcm9wcy50aXRsZSwgX1JlYWN0JGNsb25lRWxlbWVudC5yZWFkT25seSA9IF90aGlzLnByb3BzLnJlYWRPbmx5LCBfUmVhY3QkY2xvbmVFbGVtZW50LnJlcXVpcmVkID0gX3RoaXMucHJvcHMucmVxdWlyZWQsIF9SZWFjdCRjbG9uZUVsZW1lbnQudGFiSW5kZXggPSBfdGhpcy5wcm9wcy50YWJJbmRleCwgX1JlYWN0JGNsb25lRWxlbWVudCkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJDbGVhckJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5pc0NsZWFyYWJsZSAmJiBfdGhpcy5wcm9wcy5zZWxlY3RlZCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19jbG9zZS1pY29uXCIsXG4gICAgICAgICAgb25DbGljazogX3RoaXMub25DbGVhckNsaWNrLFxuICAgICAgICAgIHRpdGxlOiBfdGhpcy5wcm9wcy5jbGVhckJ1dHRvblRpdGxlLFxuICAgICAgICAgIHRhYkluZGV4OiAtMVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IF90aGlzLmNhbGNJbml0aWFsU3RhdGUoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBEYXRlUGlja2VyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICBpZiAocHJldlByb3BzLmlubGluZSAmJiBoYXNQcmVTZWxlY3Rpb25DaGFuZ2VkKHByZXZQcm9wcy5zZWxlY3RlZCwgdGhpcy5wcm9wcy5zZWxlY3RlZCkpIHtcbiAgICAgIHRoaXMuc2V0UHJlU2VsZWN0aW9uKHRoaXMucHJvcHMuc2VsZWN0ZWQpO1xuICAgIH1cbiAgICBpZiAocHJldlByb3BzLmhpZ2hsaWdodERhdGVzICE9PSB0aGlzLnByb3BzLmhpZ2hsaWdodERhdGVzKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaGlnaGxpZ2h0RGF0ZXM6IGdldEhpZ2h0TGlnaHREYXlzTWFwKHRoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXMpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFwcmV2U3RhdGUuZm9jdXNlZCAmJiBoYXNTZWxlY3Rpb25DaGFuZ2VkKHByZXZQcm9wcy5zZWxlY3RlZCwgdGhpcy5wcm9wcy5zZWxlY3RlZCkpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dFZhbHVlOiBudWxsIH0pO1xuICAgIH1cbiAgfTtcblxuICBEYXRlUGlja2VyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0KCk7XG4gIH07XG5cbiAgRGF0ZVBpY2tlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjYWxlbmRhciA9IHRoaXMucmVuZGVyQ2FsZW5kYXIoKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmlubGluZSAmJiAhdGhpcy5wcm9wcy53aXRoUG9ydGFsKSB7XG4gICAgICByZXR1cm4gY2FsZW5kYXI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMud2l0aFBvcnRhbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIG51bGwsXG4gICAgICAgICF0aGlzLnByb3BzLmlubGluZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19pbnB1dC1jb250YWluZXJcIiB9LFxuICAgICAgICAgIHRoaXMucmVuZGVyRGF0ZUlucHV0KCksXG4gICAgICAgICAgdGhpcy5yZW5kZXJDbGVhckJ1dHRvbigpXG4gICAgICAgICkgOiBudWxsLFxuICAgICAgICB0aGlzLnN0YXRlLm9wZW4gfHwgdGhpcy5wcm9wcy5pbmxpbmUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsXCIgfSxcbiAgICAgICAgICBjYWxlbmRhclxuICAgICAgICApIDogbnVsbFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQb3BwZXJDb21wb25lbnQsIHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5wb3BwZXJDbGFzc05hbWUsXG4gICAgICBoaWRlUG9wcGVyOiAhdGhpcy5zdGF0ZS5vcGVuIHx8IHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgdGhpcy5wcm9wcy5yZWFkT25seSxcbiAgICAgIHBvcHBlck1vZGlmaWVyczogdGhpcy5wcm9wcy5wb3BwZXJNb2RpZmllcnMsXG4gICAgICB0YXJnZXRDb21wb25lbnQ6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LWNvbnRhaW5lclwiIH0sXG4gICAgICAgIHRoaXMucmVuZGVyRGF0ZUlucHV0KCksXG4gICAgICAgIHRoaXMucmVuZGVyQ2xlYXJCdXR0b24oKVxuICAgICAgKSxcbiAgICAgIHBvcHBlckNvbnRhaW5lcjogdGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIsXG4gICAgICBwb3BwZXJDb21wb25lbnQ6IGNhbGVuZGFyLFxuICAgICAgcG9wcGVyUGxhY2VtZW50OiB0aGlzLnByb3BzLnBvcHBlclBsYWNlbWVudFxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBEYXRlUGlja2VyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5EYXRlUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgYWRqdXN0RGF0ZU9uQ2hhbmdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWxsb3dTYW1lRGF5OiBQcm9wVHlwZXMuYm9vbCxcbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICBjYWxlbmRhckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FsZW5kYXJDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY3VzdG9tSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuICBjdXN0b21JbnB1dFJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIGRhdGVGb3JtYXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheV0pLFxuICBkYXRlRm9ybWF0Q2FsZW5kYXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRheUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICBkcm9wZG93bk1vZGU6IFByb3BUeXBlcy5vbmVPZihbXCJzY3JvbGxcIiwgXCJzZWxlY3RcIl0pLmlzUmVxdWlyZWQsXG4gIGVuZERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGV4Y2x1ZGVEYXRlczogUHJvcFR5cGVzLmFycmF5LFxuICBmaWx0ZXJEYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgZml4ZWRIZWlnaHQ6IFByb3BUeXBlcy5ib29sLFxuICBmb3JtYXRXZWVrTnVtYmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGlnaGxpZ2h0RGF0ZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGluY2x1ZGVEYXRlczogUHJvcFR5cGVzLmFycmF5LFxuICBpbmNsdWRlVGltZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5qZWN0VGltZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNDbGVhcmFibGU6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1heERhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1pbkRhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1vbnRoc1Nob3duOiBQcm9wVHlwZXMubnVtYmVyLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbldlZWtTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNsaWNrT3V0c2lkZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2hhbmdlUmF3OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW9udGhDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvblllYXJDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvcGVuVG9EYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwZWVrTmV4dE1vbnRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGxhY2Vob2xkZXJUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwb3BwZXJDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICBwb3BwZXJDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsIC8vIDxQb3BwZXJDb21wb25lbnQvPiBwcm9wc1xuICBwb3BwZXJNb2RpZmllcnM6IFByb3BUeXBlcy5vYmplY3QsIC8vIDxQb3BwZXJDb21wb25lbnQvPiBwcm9wc1xuICBwb3BwZXJQbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihwb3BwZXJQbGFjZW1lbnRQb3NpdGlvbnMpLCAvLyA8UG9wcGVyQ29tcG9uZW50Lz4gcHJvcHNcbiAgcHJldmVudE9wZW5PbkZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNjcm9sbGFibGVZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0c0VuZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbGVjdHNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dNb250aERyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd01vbnRoWWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1dlZWtOdW1iZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1llYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIHN0YXJ0RGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3RhcnRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIHRpbWVDYXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG9kYXlCdXR0b246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHVzZVdlZWtkYXlzU2hvcnQ6IFByb3BUeXBlcy5ib29sLFxuICBmb3JtYXRXZWVrRGF5OiBQcm9wVHlwZXMuZnVuYyxcbiAgdXRjT2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgd2Vla0xhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB3aXRoUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcbiAgeWVhckRyb3Bkb3duSXRlbU51bWJlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgc2hvdWxkQ2xvc2VPblNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dUaW1lU2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1RpbWVTZWxlY3RPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgdGltZUZvcm1hdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGltZUludGVydmFsczogUHJvcFR5cGVzLm51bWJlcixcbiAgbWluVGltZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgbWF4VGltZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZXhjbHVkZVRpbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2xlYXJCdXR0b25UaXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJldmlvdXNNb250aEJ1dHRvbkxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuZXh0TW9udGhCdXR0b25MYWJlbDogUHJvcFR5cGVzLnN0cmluZ1xufTtcbnZhciBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9JTlBVVCA9IFwiaW5wdXRcIjtcbnZhciBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURSA9IFwibmF2aWdhdGVcIjtcblxuZXhwb3J0IHsgQ2FsZW5kYXJDb250YWluZXIgfTtcbmV4cG9ydCBkZWZhdWx0IERhdGVQaWNrZXI7XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3JlYWN0LWRhdGVwaWNrZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3JlYWN0LWRhdGVwaWNrZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJpc05vZGVGb3VuZCIsImN1cnJlbnQiLCJjb21wb25lbnROb2RlIiwiaWdub3JlQ2xhc3MiLCJjb3JyZXNwb25kaW5nRWxlbWVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicGFzc2l2ZUV2ZW50U3VwcG9ydCIsInVpZCIsImF1dG9JbmMiLCJzZWVkIiwiaGFuZGxlcnNNYXAiLCJlbmFibGVkSW5zdGFuY2VzIiwidG91Y2hFdmVudHMiLCJnZXRFdmVudEhhbmRsZXJPcHRpb25zIiwiaW5zdGFuY2UiLCJldmVudE5hbWUiLCJoYW5kbGVyT3B0aW9ucyIsImluZGV4T2YiLCJwYXNzaXZlIiwicHJvcHMiLCJwcmV2ZW50RGVmYXVsdCIsIm9uQ2xpY2tPdXRzaWRlSE9DIiwiV3JhcHBlZENvbXBvbmVudCIsImNvbmZpZyIsIl9jbGFzcyIsIl90ZW1wIiwiX0NvbXBvbmVudCIsIm9uQ2xpY2tPdXRzaWRlIiwiX3RoaXMiLCJjYWxsIiwiX19vdXRzaWRlQ2xpY2tIYW5kbGVyIiwiZXZlbnQiLCJfX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wIiwiZ2V0SW5zdGFuY2UiLCJoYW5kbGVDbGlja091dHNpZGUiLCJFcnJvciIsImVuYWJsZU9uQ2xpY2tPdXRzaWRlIiwiZG9jdW1lbnQiLCJfdWlkIiwidGVzdFBhc3NpdmVFdmVudFN1cHBvcnQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwib3B0aW9ucyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwibm9vcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudHMiLCJldmVudFR5cGVzIiwiZm9yRWFjaCIsImRpc2FibGVPbkNsaWNrT3V0c2lkZSIsInN0b3BQcm9wYWdhdGlvbiIsImV4Y2x1ZGVTY3JvbGxiYXIiLCJjbGlja2VkU2Nyb2xsYmFyIiwiZXZ0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRYIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50WSIsImZpbmRIaWdoZXN0IiwicGFyZW50Tm9kZSIsInRhcmdldCIsIm91dHNpZGVDbGlja0lnbm9yZUNsYXNzIiwiZm4iLCJnZXRSZWYiLCJyZWYiLCJpbnN0YW5jZVJlZiIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfcHJvdG8iLCJpc1JlYWN0Q29tcG9uZW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjcmVhdGVFbGVtZW50IiwiZmluZERPTU5vZGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbmRlciIsIl9wcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwia2V5Iiwic291cmNlS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ3cmFwcGVkUmVmIiwiQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiZGVmYXVsdFByb3BzIiwiZ2V0Q2xhc3MiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJNYW5hZ2VyIiwiX3JlZiIsIl9jbGFzc0NhbGxDaGVjayIsIlR5cGVFcnJvciIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiZ2V0UHJvdG90eXBlT2YiLCJhcHBseSIsIl9zZXRUYXJnZXROb2RlIiwibm9kZSIsIl90YXJnZXROb2RlIiwiX2dldFRhcmdldE5vZGUiLCJfaW5oZXJpdHMiLCJ2YWx1ZSIsInNldFByb3RvdHlwZU9mIiwiZ2V0Q2hpbGRDb250ZXh0IiwicG9wcGVyTWFuYWdlciIsInNldFRhcmdldE5vZGUiLCJnZXRUYXJnZXROb2RlIiwidGFnIiwiY2hpbGRyZW4iLCJyZXN0UHJvcHMiLCJvYmoiLCJoYXNPd25Qcm9wZXJ0eSIsImNoaWxkQ29udGV4dFR5cGVzIiwiaXNSZXF1aXJlZCIsInByb3BUeXBlcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiVGFyZ2V0IiwiY29udGV4dCIsIl9wcm9wcyRjb21wb25lbnQiLCJjb21wb25lbnQiLCJpbm5lclJlZiIsInRhcmdldFJlZiIsInRhcmdldFByb3BzIiwiY29tcG9uZW50UHJvcHMiLCJjb250ZXh0VHlwZXMiLCJpc0Jyb3dzZXIiLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ0aW1lb3V0RHVyYXRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkZWJvdW5jZSIsIlByb21pc2UiLCJtaWNyb3Rhc2tEZWJvdW5jZSIsImNhbGxlZCIsInJlc29sdmUiLCJ0aGVuIiwidGFza0RlYm91bmNlIiwic2NoZWR1bGVkIiwic2V0VGltZW91dCIsImlzRnVuY3Rpb24iLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkiLCJlbGVtZW50IiwicHJvcGVydHkiLCJub2RlVHlwZSIsImNzcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQYXJlbnROb2RlIiwibm9kZU5hbWUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsIm93bmVyRG9jdW1lbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInRlc3QiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImlzSUUxMCIsImlzSUUiLCJ2ZXJzaW9uIiwiZ2V0T2Zmc2V0UGFyZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRSb290IiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJpc09mZnNldENvbnRhaW5lciIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwicGFyc2VGbG9hdCIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiTWF0aCIsIm1heCIsImdldFdpbmRvd1NpemVzIiwiaGVpZ2h0Iiwid2lkdGgiLCJjcmVhdGVDbGFzcyIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwicmlnaHQiLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJlIiwicmVzdWx0Iiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsIm9mZnNldFdpZHRoIiwidmVydFNjcm9sbGJhciIsIm9mZnNldEhlaWdodCIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsInBhcmVudCIsImZpeGVkUG9zaXRpb24iLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJwYXJlbnRSZWN0Iiwic2Nyb2xsUGFyZW50IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwiaW5jbHVkZVNjcm9sbCIsInN1YnRyYWN0IiwibW9kaWZpZXIiLCJpc0ZpeGVkIiwiZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJlbCIsImdldEJvdW5kYXJpZXMiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJwYWRkaW5nIiwiYm91bmRhcmllc0VsZW1lbnQiLCJib3VuZGFyaWVzIiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYm91bmRhcmllc05vZGUiLCJfZ2V0V2luZG93U2l6ZXMiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsInNvcnQiLCJhIiwiYiIsImZpbHRlcmVkQXJlYXMiLCJmaWx0ZXIiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwic3RhdGUiLCJnZXRPdXRlclNpemVzIiwieCIsIm1hcmdpbkJvdHRvbSIsInkiLCJtYXJnaW5SaWdodCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsInJlcGxhY2UiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiZmluZCIsImFyciIsImNoZWNrIiwicnVuTW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZW5kcyIsInNsaWNlIiwiZmluZEluZGV4IiwicHJvcCIsImN1ciIsIm1hdGNoIiwiY29uc29sZSIsIndhcm4iLCJlbmFibGVkIiwidXBkYXRlIiwiaXNEZXN0cm95ZWQiLCJhcnJvd1N0eWxlcyIsImF0dHJpYnV0ZXMiLCJmbGlwcGVkIiwicG9zaXRpb25GaXhlZCIsImZsaXAiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBvc2l0aW9uIiwiaXNDcmVhdGVkIiwib25VcGRhdGUiLCJvbkNyZWF0ZSIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJwcmVmaXgiLCJ0b0NoZWNrIiwic3R5bGUiLCJkZXN0cm95IiwicmVtb3ZlQXR0cmlidXRlIiwid2lsbENoYW5nZSIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInJlbW92ZU9uRGVzdHJveSIsInJlbW92ZUNoaWxkIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJzY3JvbGxFbGVtZW50IiwiZXZlbnRzRW5hYmxlZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwic2NoZWR1bGVVcGRhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiaXNOdW1lcmljIiwibiIsImlzTmFOIiwiaXNGaW5pdGUiLCJzZXRTdHlsZXMiLCJ1bml0IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJpbmRleCIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJwYXJzZU9mZnNldCIsIm9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwidHJpbSIsImRpdmlkZXIiLCJzZWFyY2giLCJzcGxpdFJlZ2V4Iiwib3BzIiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInJlZHVjZSIsInN0ciIsInRvVmFsdWUiLCJpbmRleDIiLCJzaGlmdCIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInRyYW5zZm9ybSIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJtaW4iLCJrZWVwVG9nZXRoZXIiLCJmbG9vciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJ0b0xvd2VyQ2FzZSIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJzdGVwIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5IiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsImFwcGx5U3R5bGUiLCJzZXRBdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlIiwib25Mb2FkIiwiYXBwbHlTdHlsZU9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIkRlZmF1bHRzIiwiUG9wcGVyIiwiY2xhc3NDYWxsQ2hlY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJiaW5kIiwianF1ZXJ5IiwidXBkYXRlJCQxIiwiZGVzdHJveSQkMSIsImVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxIiwiVXRpbHMiLCJnIiwiUG9wcGVyVXRpbHMiLCJfc2V0QXJyb3dOb2RlIiwiX2Fycm93Tm9kZSIsIl9nZXRPZmZzZXRzIiwiX2lzRGF0YURpcnR5IiwiX3VwZGF0ZVN0YXRlTW9kaWZpZXIiLCJzZXRTdGF0ZSIsIl9nZXRQb3BwZXJTdHlsZSIsIl9wb3BwZXIiLCJwb2ludGVyRXZlbnRzIiwib3BhY2l0eSIsIl9nZXRQb3BwZXJQbGFjZW1lbnQiLCJfZ2V0UG9wcGVySGlkZSIsIl9nZXRBcnJvd1N0eWxlIiwiX3RoaXMkc3RhdGUkZGF0YSRvZmZzIiwiX2hhbmRsZVBvcHBlclJlZiIsIl9wb3BwZXJOb2RlIiwiX2NyZWF0ZVBvcHBlciIsIl9kZXN0cm95UG9wcGVyIiwiX3NjaGVkdWxlVXBkYXRlIiwic2V0QXJyb3dOb2RlIiwiZ2V0QXJyb3dTdHlsZSIsImxhc3RQcm9wcyIsIl90aGlzMiIsInVwZGF0ZVN0YXRlIiwiX3Byb3BzMiIsInBvcHBlclN0eWxlIiwicG9wcGVyUGxhY2VtZW50IiwicG9wcGVySGlkZSIsInBvcHBlclByb3BzIiwiRWxlbWVudCIsIkFycm93IiwiYXJyb3dSZWYiLCJhcnJvd1N0eWxlIiwiYXJyb3dQcm9wcyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImluaGVyaXRzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImdlbmVyYXRlWWVhcnMiLCJ5ZWFyIiwibm9PZlllYXIiLCJtaW5EYXRlIiwibWF4RGF0ZSIsIm5ld1llYXIiLCJpc0luUmFuZ2UiLCJZZWFyRHJvcGRvd25PcHRpb25zIiwiX1JlYWN0JENvbXBvbmVudCIsInJlbmRlck9wdGlvbnMiLCJzZWxlY3RlZFllYXIiLCJ5ZWFyc0xpc3QiLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwib25DaGFuZ2UiLCJtaW5ZZWFyIiwibWF4WWVhciIsInVuc2hpZnQiLCJpbmNyZW1lbnRZZWFycyIsImRlY3JlbWVudFllYXJzIiwib25DYW5jZWwiLCJzaGlmdFllYXJzIiwiYW1vdW50IiwieWVhcnMiLCJ5ZWFyRHJvcGRvd25JdGVtTnVtYmVyIiwic2Nyb2xsYWJsZVllYXJEcm9wZG93biIsImRyb3Bkb3duQ2xhc3MiLCJkYXlPZldlZWtDb2RlcyIsInNldCQxIiwiZGF0ZSIsInRvIiwic2V0IiwiYWRkIiwiZ2V0JDEiLCJnZXRTdGFydE9mIiwic3RhcnRPZiIsIm5ld0RhdGUiLCJwb2ludCIsIm5vdyIsIm1heWJlRml4ZWRVdGNPZmZzZXQiLCJuZXdEYXRlV2l0aE9mZnNldCIsInV0Y09mZnNldCIsInV0YyIsImNsb25lRGF0ZSIsImNsb25lIiwiaXNNb21lbnQiLCJmb3JtYXREYXRlIiwiZm9ybWF0Iiwic2V0VGltZSIsIl9yZWYzIiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsInNldE1vbnRoIiwibW9udGgiLCJzZXRZZWFyIiwiZ2V0U2Vjb25kIiwiZ2V0TWludXRlIiwiZ2V0SG91ciIsImdldE1vbnRoIiwiZ2V0WWVhciIsImdldERhdGUiLCJnZXRTdGFydE9mV2VlayIsImdldFN0YXJ0T2ZNb250aCIsImFkZE1pbnV0ZXMiLCJhZGREYXlzIiwiYWRkV2Vla3MiLCJhZGRNb250aHMiLCJzdWJ0cmFjdE1vbnRocyIsImlzQmVmb3JlIiwiZGF0ZTEiLCJkYXRlMiIsImlzQWZ0ZXIiLCJpc1NhbWVZZWFyIiwiaXNTYW1lIiwiaXNTYW1lTW9udGgiLCJpc1NhbWVEYXkiLCJtb21lbnQxIiwibW9tZW50MiIsImlzRGF5SW5SYW5nZSIsImRheSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJiZWZvcmUiLCJhZnRlciIsImlzQmV0d2VlbiIsImxvY2FsaXplRGF0ZSIsImxvY2FsZSIsImlzRGF5RGlzYWJsZWQiLCJfcmVmNCIsImV4Y2x1ZGVEYXRlcyIsImluY2x1ZGVEYXRlcyIsImZpbHRlckRhdGUiLCJleGNsdWRlRGF0ZSIsImluY2x1ZGVEYXRlIiwiaXNUaW1lRGlzYWJsZWQiLCJ0aW1lIiwiZGlzYWJsZWRUaW1lcyIsImwiLCJpc1RpbWVJbkRpc2FibGVkUmFuZ2UiLCJfcmVmNSIsIm1pblRpbWUiLCJtYXhUaW1lIiwiYmFzZSIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJiYXNlVGltZSIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImdldEVmZmVjdGl2ZU1pbkRhdGUiLCJfcmVmOCIsImdldEVmZmVjdGl2ZU1heERhdGUiLCJfcmVmOSIsImdldEhpZ2h0TGlnaHREYXlzTWFwIiwiaGlnaGxpZ2h0RGF0ZXMiLCJkZWZhdWx0Q2xhc3NOYW1lIiwiZGF0ZUNsYXNzZXMiLCJNYXAiLCJjbGFzc05hbWVzQXJyIiwiaW5jbHVkZXMiLCJhcnJPZk1vbWVudHMiLCJfY2xhc3NOYW1lc0FyciIsInRpbWVzVG9JbmplY3RBZnRlciIsInN0YXJ0T2ZEYXkiLCJjdXJyZW50VGltZSIsImN1cnJlbnRNdWx0aXBsaWVyIiwiaW50ZXJ2YWxzIiwiaW5qZWN0ZWRUaW1lcyIsInRpbWVzIiwiaW5qZWN0ZWRUaW1lIiwibmV4dFRpbWUiLCJXcmFwcGVkWWVhckRyb3Bkb3duT3B0aW9ucyIsIlllYXJEcm9wZG93biIsImRyb3Bkb3duVmlzaWJsZSIsInJlbmRlclNlbGVjdE9wdGlvbnMiLCJvblNlbGVjdENoYW5nZSIsInJlbmRlclNlbGVjdE1vZGUiLCJyZW5kZXJSZWFkVmlldyIsInZpc2libGUiLCJ2aXNpYmlsaXR5IiwidG9nZ2xlRHJvcGRvd24iLCJyZW5kZXJEcm9wZG93biIsInJlbmRlclNjcm9sbE1vZGUiLCJhZGp1c3REYXRlT25DaGFuZ2UiLCJoYW5kbGVZZWFyQ2hhbmdlIiwib25TZWxlY3QiLCJzZXRPcGVuIiwicmVuZGVyZWREcm9wZG93biIsImRyb3Bkb3duTW9kZSIsIk1vbnRoRHJvcGRvd25PcHRpb25zIiwibW9udGhOYW1lcyIsIldyYXBwZWRNb250aERyb3Bkb3duT3B0aW9ucyIsIk1vbnRoRHJvcGRvd24iLCJNIiwibG9jYWxlRGF0YSIsImdldExvY2FsZURhdGFGb3JMb2NhbGUiLCJ1c2VTaG9ydE1vbnRoSW5Ecm9wZG93biIsImdldE1vbnRoU2hvcnRJbkxvY2FsZSIsIm1vbnRoc1Nob3J0IiwiZ2V0TW9udGhJbkxvY2FsZSIsIm1vbnRocyIsImRhdGVGb3JtYXQiLCJnZW5lcmF0ZU1vbnRoWWVhcnMiLCJjdXJyRGF0ZSIsImxhc3REYXRlIiwiTW9udGhZZWFyRHJvcGRvd25PcHRpb25zIiwibW9udGhZZWFyc0xpc3QiLCJtb250aFllYXIiLCJtb250aFllYXJQb2ludCIsInZhbHVlT2YiLCJpc1NhbWVNb250aFllYXIiLCJzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24iLCJXcmFwcGVkTW9udGhZZWFyRHJvcGRvd25PcHRpb25zIiwiTW9udGhZZWFyRHJvcGRvd24iLCJ0aW1lcG9pbnQiLCJ5ZWFyTW9udGgiLCJjaGFuZ2VkRGF0ZSIsInBhcnNlSW50IiwiRGF5IiwiaGFuZGxlQ2xpY2siLCJpc0Rpc2FibGVkIiwiaGFuZGxlTW91c2VFbnRlciIsIm9uTW91c2VFbnRlciIsIm90aGVyIiwiaXNLZXlib2FyZFNlbGVjdGVkIiwiaW5saW5lIiwic2VsZWN0ZWQiLCJwcmVTZWxlY3Rpb24iLCJnZXRIaWdoTGlnaHRlZENsYXNzIiwiX3RoaXMkcHJvcHMiLCJkYXlTdHIiLCJfdGhpcyRwcm9wczIiLCJpc0luU2VsZWN0aW5nUmFuZ2UiLCJfdGhpcyRwcm9wczMiLCJzZWxlY3RzU3RhcnQiLCJzZWxlY3RzRW5kIiwic2VsZWN0aW5nRGF0ZSIsImlzU2VsZWN0aW5nUmFuZ2VTdGFydCIsIl90aGlzJHByb3BzNCIsImlzU2VsZWN0aW5nUmFuZ2VFbmQiLCJfdGhpcyRwcm9wczUiLCJpc1JhbmdlU3RhcnQiLCJfdGhpcyRwcm9wczYiLCJpc1JhbmdlRW5kIiwiX3RoaXMkcHJvcHM3IiwiaXNXZWVrZW5kIiwid2Vla2RheSIsImdldERheSIsImlzT3V0c2lkZU1vbnRoIiwiZ2V0Q2xhc3NOYW1lcyIsImRheUNsYXNzTmFtZSIsImdldERheU9mV2Vla0NvZGUiLCJpc29XZWVrZGF5Iiwicm9sZSIsIldlZWtOdW1iZXIiLCJ3ZWVrTnVtYmVyQ2xhc3NlcyIsIndlZWtOdW1iZXIiLCJXZWVrIiwiaGFuZGxlRGF5Q2xpY2siLCJvbkRheUNsaWNrIiwiaGFuZGxlRGF5TW91c2VFbnRlciIsIm9uRGF5TW91c2VFbnRlciIsImhhbmRsZVdlZWtDbGljayIsIm9uV2Vla1NlbGVjdCIsImZvcm1hdFdlZWtOdW1iZXIiLCJzdGFydE9mV2VlayIsImdldFdlZWsiLCJyZW5kZXJEYXlzIiwiZGF5cyIsInNob3dXZWVrTnVtYmVyIiwib25DbGlja0FjdGlvbiIsIk1vbnRoIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm9uTW91c2VMZWF2ZSIsImlzV2Vla0luTW9udGgiLCJlbmRPZldlZWsiLCJyZW5kZXJXZWVrcyIsIndlZWtzIiwiaXNGaXhlZEhlaWdodCIsImZpeGVkSGVpZ2h0IiwiY3VycmVudFdlZWtTdGFydCIsImJyZWFrQWZ0ZXJOZXh0UHVzaCIsInNob3dXZWVrTnVtYmVycyIsImlzRml4ZWRBbmRGaW5hbFdlZWsiLCJpc05vbkZpeGVkQW5kT3V0T2ZNb250aCIsInBlZWtOZXh0TW9udGgiLCJUaW1lIiwiZXhjbHVkZVRpbWVzIiwiaW5jbHVkZVRpbWVzIiwibGlDbGFzc2VzIiwiY3VyckgiLCJjdXJyTSIsImNsYXNzZXMiLCJpbmplY3RUaW1lcyIsInJlbmRlclRpbWVzIiwiYWN0aXZlVGltZSIsImdldFN0YXJ0T2ZEYXkiLCJtdWx0aXBsaWVyIiwic29ydGVkSW5qZWN0VGltZXMiLCJ0aW1lc1RvSW5qZWN0IiwibW9udGhSZWYiLCJ0b2RheUJ1dHRvbiIsInRpbWVDYXB0aW9uIiwiZ2V0JCQxIiwib25UaW1lQ2hhbmdlIiwiQ2FsZW5kYXJDb250YWluZXIiLCJEUk9QRE9XTl9GT0NVU19DTEFTU05BTUVTIiwiQ2FsZW5kYXIiLCJoYW5kbGVEcm9wZG93bkZvY3VzIiwiaXNEcm9wZG93blNlbGVjdCIsImNsYXNzTmFtZXMiLCJ0ZXN0Q2xhc3NuYW1lIiwib25Ecm9wZG93bkZvY3VzIiwiZ2V0RGF0ZUluVmlldyIsIm9wZW5Ub0RhdGUiLCJpbml0aWFsRGF0ZSIsImluY3JlYXNlTW9udGgiLCJoYW5kbGVNb250aENoYW5nZSIsImRlY3JlYXNlTW9udGgiLCJoYW5kbGVNb250aE1vdXNlTGVhdmUiLCJvblllYXJDaGFuZ2UiLCJvbk1vbnRoQ2hhbmdlIiwiaGFuZGxlTW9udGhZZWFyQ2hhbmdlIiwiY2hhbmdlWWVhciIsImNoYW5nZU1vbnRoIiwiY2hhbmdlTW9udGhZZWFyIiwiaGVhZGVyIiwiZGF5TmFtZXMiLCJ3ZWVrTGFiZWwiLCJnZXRMb2NhbGVEYXRhIiwid2Vla0RheU5hbWUiLCJmb3JtYXRXZWVrZGF5IiwiZm9ybWF0V2Vla0RheSIsImdldEZvcm1hdHRlZFdlZWtkYXlJbkxvY2FsZSIsImZvcm1hdEZ1bmMiLCJ3ZWVrZGF5cyIsInVzZVdlZWtkYXlzU2hvcnQiLCJnZXRXZWVrZGF5U2hvcnRJbkxvY2FsZSIsIndlZWtkYXlzU2hvcnQiLCJnZXRXZWVrZGF5TWluSW5Mb2NhbGUiLCJ3ZWVrZGF5c01pbiIsInJlbmRlclByZXZpb3VzTW9udGhCdXR0b24iLCJhbGxQcmV2RGF5c0Rpc2FibGVkIiwiYWxsRGF5c0Rpc2FibGVkQmVmb3JlIiwiX3JlZjYiLCJkYXRlQmVmb3JlIiwiZXZlcnkiLCJmb3JjZVNob3dNb250aE5hdmlnYXRpb24iLCJzaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24iLCJzaG93VGltZVNlbGVjdE9ubHkiLCJjbGlja0hhbmRsZXIiLCJ0eXBlIiwicHJldmlvdXNNb250aEJ1dHRvbkxhYmVsIiwicmVuZGVyTmV4dE1vbnRoQnV0dG9uIiwiYWxsTmV4dERheXNEaXNhYmxlZCIsImFsbERheXNEaXNhYmxlZEFmdGVyIiwiX3JlZjciLCJkYXRlQWZ0ZXIiLCJzaG93VGltZVNlbGVjdCIsIm5leHRNb250aEJ1dHRvbkxhYmVsIiwicmVuZGVyQ3VycmVudE1vbnRoIiwic2hvd1llYXJEcm9wZG93biIsInNob3dNb250aERyb3Bkb3duIiwic2hvd01vbnRoWWVhckRyb3Bkb3duIiwicmVuZGVyWWVhckRyb3Bkb3duIiwib3ZlcnJpZGVIaWRlIiwicmVuZGVyTW9udGhEcm9wZG93biIsInJlbmRlck1vbnRoWWVhckRyb3Bkb3duIiwicmVuZGVyVG9kYXlCdXR0b24iLCJnZXRTdGFydE9mRGF0ZSIsInJlbmRlck1vbnRocyIsIm1vbnRoTGlzdCIsIm1vbnRoc1Nob3duIiwibW9udGhEYXRlIiwibW9udGhLZXkiLCJkaXYiLCJtb250aENvbnRhaW5lciIsIm9uRm9jdXMiLCJyZW5kZXJUaW1lU2VjdGlvbiIsInRpbWVGb3JtYXQiLCJ0aW1lSW50ZXJ2YWxzIiwid2l0aFBvcnRhbCIsImFzc2lnbk1vbnRoQ29udGFpbmVyIiwicHJldlByb3BzIiwiQ29udGFpbmVyIiwiY29udGFpbmVyIiwicG9wcGVyUGxhY2VtZW50UG9zaXRpb25zIiwiUG9wcGVyQ29tcG9uZW50IiwiaGlkZVBvcHBlciIsInBvcHBlckNvbXBvbmVudCIsInBvcHBlck1vZGlmaWVycyIsInRhcmdldENvbXBvbmVudCIsInBvcHBlckNvbnRhaW5lciIsIldyYXBwZWRDYWxlbmRhciIsIkRhdGVQaWNrZXIiLCJnZXRQcmVTZWxlY3Rpb24iLCJjYWxjSW5pdGlhbFN0YXRlIiwiZGVmYXVsdFByZVNlbGVjdGlvbiIsImJvdW5kZWRQcmVTZWxlY3Rpb24iLCJvcGVuIiwic3RhcnRPcGVuIiwicHJldmVudEZvY3VzIiwiZm9jdXNlZCIsImNsZWFyUHJldmVudEZvY3VzVGltZW91dCIsInByZXZlbnRGb2N1c1RpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRGb2N1cyIsImlucHV0IiwiZm9jdXMiLCJsYXN0UHJlU2VsZWN0Q2hhbmdlIiwiUFJFU0VMRUNUX0NIQU5HRV9WSUFfTkFWSUdBVEUiLCJoYW5kbGVGb2N1cyIsInByZXZlbnRPcGVuT25Gb2N1cyIsInJlYWRPbmx5IiwiY2FuY2VsRm9jdXNJbnB1dCIsImlucHV0Rm9jdXNUaW1lb3V0IiwiZGVmZXJGb2N1c0lucHV0IiwiaGFuZGxlQmx1ciIsIm9uQmx1ciIsImhhbmRsZUNhbGVuZGFyQ2xpY2tPdXRzaWRlIiwiaGFuZGxlQ2hhbmdlIiwiYWxsQXJncyIsIm9uQ2hhbmdlUmF3IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiaW5wdXRWYWx1ZSIsIlBSRVNFTEVDVF9DSEFOR0VfVklBX0lOUFVUIiwicGFyc2VEYXRlIiwibSIsImlzVmFsaWQiLCJzZXRTZWxlY3RlZCIsImhhbmRsZVNlbGVjdCIsInNob3VsZENsb3NlT25TZWxlY3QiLCJzZXRQcmVTZWxlY3Rpb24iLCJrZWVwSW5wdXQiLCJhbGxvd1NhbWVEYXkiLCJoYW5kbGVUaW1lQ2hhbmdlIiwib25JbnB1dENsaWNrIiwiZGlzYWJsZWQiLCJvbklucHV0S2V5RG93biIsIm9uS2V5RG93biIsImV2ZW50S2V5IiwiY29weSIsImlzRGF0ZSIsImRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uIiwibmV3U2VsZWN0aW9uIiwic3VidHJhY3REYXlzIiwic3VidHJhY3RXZWVrcyIsInN1YnRyYWN0WWVhcnMiLCJhZGRZZWFycyIsIm9uQ2xlYXJDbGljayIsImNsZWFyIiwicmVuZGVyQ2FsZW5kYXIiLCJlbGVtIiwiY2FsZW5kYXIiLCJkYXRlRm9ybWF0Q2FsZW5kYXIiLCJjYWxlbmRhckNsYXNzTmFtZSIsImNhbGVuZGFyQ29udGFpbmVyIiwicmVuZGVyRGF0ZUlucHV0IiwiX2NsYXNzbmFtZXMiLCJfUmVhY3QkY2xvbmVFbGVtZW50IiwiY3VzdG9tSW5wdXQiLCJjdXN0b21JbnB1dFJlZiIsInNhZmVEYXRlRm9ybWF0IiwiaXNBcnJheSIsImF1dG9Gb2N1cyIsInBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJUZXh0IiwiYXV0b0NvbXBsZXRlIiwidGl0bGUiLCJyZXF1aXJlZCIsInRhYkluZGV4IiwicmVuZGVyQ2xlYXJCdXR0b24iLCJpc0NsZWFyYWJsZSIsImNsZWFyQnV0dG9uVGl0bGUiLCJvbkNsaWNrT3V0c2lkZSQkMSIsInByZXZTdGF0ZSIsImhhc1ByZVNlbGVjdGlvbkNoYW5nZWQiLCJoYXNTZWxlY3Rpb25DaGFuZ2VkIiwiZXF1YWxzIiwicG9wcGVyQ2xhc3NOYW1lIiwiaGFzT3duIiwiYXJnIiwiYXJnVHlwZSIsInN0eWxlVGFnVHJhbnNmb3JtIiwiaW5zZXJ0IiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibG9jYWxzIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydEJ5U2VsZWN0b3IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSJdLCJzb3VyY2VSb290IjoiIn0=