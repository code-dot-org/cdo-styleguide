/*! For license information please see code-studio-pd-form_components-FormController-story.1483c70c.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[7893],{"./src/code-studio/pd/form_components/FormComponent.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ButtonList=__webpack_require__("./src/code-studio/pd/form_components/ButtonList.jsx"),_FieldGroup=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/FieldGroup.jsx")),_UsPhoneNumberInput=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/UsPhoneNumberInput.jsx")),_SingleCheckbox=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/SingleCheckbox.jsx")),_utils=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/utils.js")),_excluded=["name","label","placeholder","required"],_excluded2=["name","label","placeholder","required","options"],_excluded3=["name","label","type","required"],_excluded4=["name","label","required"],_excluded5=["name","label","type","required"],_excluded6=["name","label","type","required","textFieldMap"],_excluded7=["name","label","type","required","options","textFieldMap"],_excluded8=["name","label","type","required","answers"],_excluded9=["name","label","required"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var FormComponent=function(_React$Component){function FormComponent(props){var _this;if((_this=_React$Component.call(this,props)||this).constructor===FormComponent)throw new TypeError("\n        FormComponent is an abstract class; cannot construct instances directly\n      ");return _this.handleChange=_this.handleChange.bind(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this)),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FormComponent,_React$Component),FormComponent.getDynamicallyRequiredFields=function getDynamicallyRequiredFields(data){return[]},FormComponent.getErrorMessages=function getErrorMessages(data){return{}},FormComponent.processPageData=function processPageData(data){return{}};var _proto=FormComponent.prototype;return _proto.handleChange=function handleChange(newState){this.props.onChange(newState)},_proto.getValidationState=function getValidationState(name){if(this.props.errors.includes(name))return"error"},_proto.buildSelectFieldGroupFromOptions=function buildSelectFieldGroupFromOptions(_ref){var name=_ref.name,label=_ref.label,placeholder=_ref.placeholder,required=_ref.required,props=_objectWithoutProperties(_ref,_excluded),options=this.props.options[name];return this.buildSelectFieldGroup(_objectSpread({name,label,placeholder,required,options},props))},_proto.buildSelectFieldGroup=function buildSelectFieldGroup(_ref2){var renderedOptions,name=_ref2.name,label=_ref2.label,placeholder=_ref2.placeholder,required=_ref2.required,options=_ref2.options,props=_objectWithoutProperties(_ref2,_excluded2);return renderedOptions=Array.isArray(options)?options.map((function(value){var _utils$normalizeAnswe=_utils.default.normalizeAnswer(value),answerText=_utils$normalizeAnswe.answerText,answerValue=_utils$normalizeAnswe.answerValue;return _react.default.createElement("option",{key:answerValue,value:answerValue},answerText)})):Object.keys(options).map((function(key){return _react.default.createElement("option",{key,value:key},options[key])})),_react.default.createElement(_FieldGroup.default,_extends({key:name,id:name,componentClass:"select",label,validationState:this.getValidationState(name),errorMessage:this.props.errorMessages[name],onChange:this.handleChange,value:this.props.data[name]||"",required},props),placeholder&&_react.default.createElement("option",{key:"placeholder",value:""},placeholder),renderedOptions)},_proto.buildFieldGroup=function buildFieldGroup(_ref3){var name=_ref3.name,label=_ref3.label,type=_ref3.type,required=_ref3.required,props=_objectWithoutProperties(_ref3,_excluded3);return _react.default.createElement(_FieldGroup.default,_extends({key:name,id:name,type,label,validationState:this.getValidationState(name),errorMessage:this.props.errorMessages[name],onChange:this.handleChange,value:this.props.data[name]||"",required},props))},_proto.buildUsPhoneNumberInput=function buildUsPhoneNumberInput(_ref4){var name=_ref4.name,label=_ref4.label,required=_ref4.required,props=_objectWithoutProperties(_ref4,_excluded4);return _react.default.createElement(_UsPhoneNumberInput.default,_extends({name,label,required,validationState:this.getValidationState(name),errorMessage:this.props.errorMessages[name],onChange:this.handleChange,value:this.props.data[name]},props))},_proto.buildButtonsFromOptions=function buildButtonsFromOptions(_ref5){var name=_ref5.name,label=_ref5.label,type=_ref5.type,required=_ref5.required,props=_objectWithoutProperties(_ref5,_excluded5);if(!this.props.options[name]||0===this.props.options[name].length)throw"Cannot create buttons for ".concat(name," without options");var answers=this.props.options[name];return this.buildButtons(_objectSpread({name,label,type,required,answers},props))},_proto.buildButtonsWithAdditionalTextFieldsFromOptions=function buildButtonsWithAdditionalTextFieldsFromOptions(_ref6){var name=_ref6.name,label=_ref6.label,type=_ref6.type,required=_ref6.required,textFieldMap=_ref6.textFieldMap,props=_objectWithoutProperties(_ref6,_excluded6);if(!this.props.options[name]||0===this.props.options[name].length)throw"Cannot create buttons for ".concat(name," without options");var options=this.props.options[name];return this.buildButtonsWithAdditionalTextFields(_objectSpread({name,label,type,required,options,textFieldMap},props))},_proto.buildButtonsWithAdditionalTextFields=function buildButtonsWithAdditionalTextFields(_ref7){var _this2=this,name=_ref7.name,label=_ref7.label,type=_ref7.type,required=_ref7.required,options=_ref7.options,textFieldMap=_ref7.textFieldMap,props=_objectWithoutProperties(_ref7,_excluded7),answers=options.map((function(answer){if(!(answer in textFieldMap))return answer;var textFieldName="".concat(name,"_").concat(textFieldMap[answer]);return{answerText:answer,inputValue:_this2.props.data[textFieldName],onInputChange:function onInputChange(newValue){return _this2.handleChange(_defineProperty({},textFieldName,newValue))}}}));return this.buildButtons(_objectSpread({name,label,type,required,answers},props))},_proto.buildButtons=function buildButtons(_ref8){var name=_ref8.name,label=_ref8.label,type=_ref8.type,required=_ref8.required,answers=_ref8.answers,props=_objectWithoutProperties(_ref8,_excluded8);return void 0===required&&(required=!0),_react.default.createElement(_ButtonList.ButtonList,_extends({key:name,answers,groupName:name,label,onChange:this.handleChange,selectedItems:this.props.data[name],validationState:this.getValidationState(name),required,type},props))},_proto.buildSingleCheckbox=function buildSingleCheckbox(_ref9){var name=_ref9.name,label=_ref9.label,required=_ref9.required,props=_objectWithoutProperties(_ref9,_excluded9);return void 0===required&&(required=!0),_react.default.createElement(_SingleCheckbox.default,_extends({name,label,required,validationState:this.getValidationState(name),value:this.props.data[name],onChange:this.handleChange},props))},FormComponent}(_react.default.Component);exports.default=FormComponent,_defineProperty(FormComponent,"propTypes",{options:_propTypes.default.object.isRequired,errors:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,errorMessages:_propTypes.default.object.isRequired,data:_propTypes.default.object.isRequired,onChange:_propTypes.default.func.isRequired}),_defineProperty(FormComponent,"associatedFields",[]),module.exports=exports.default},"./src/code-studio/pd/form_components/FormController.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_pagination=__webpack_require__("./node_modules/@react-bootstrap/pagination/lib/index.js"),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var FormController=function(_React$Component){function FormController(props){var _this;if(_defineProperty(_assertThisInitialized(_this=_React$Component.call(this,props)||this),"saveToSessionStorage",(function(newState){if(_this.constructor.sessionStorageKey){var mergedData=_objectSpread(_objectSpread({},{currentPage:_this.state.currentPage,data:_this.state.data}),newState);sessionStorage.setItem(_this.constructor.sessionStorageKey,JSON.stringify(mergedData))}})),_this.constructor===FormController)throw new TypeError("\n        FormController is an abstract class; cannot construct instances directly\n      ");return _this.state={data:{},errors:[],errorMessages:{},errorHeader:null,globalError:!1,currentPage:0,submitting:!1},_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this)),_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this)),_this.nextPage=_this.nextPage.bind(_assertThisInitialized(_this)),_this.prevPage=_this.prevPage.bind(_assertThisInitialized(_this)),_this.onInitialize(),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FormController,_React$Component);var _proto=FormController.prototype;return _proto.UNSAFE_componentWillMount=function UNSAFE_componentWillMount(){var newPage;if(this.constructor.sessionStorageKey&&sessionStorage[this.constructor.sessionStorageKey]){var reloadedState=JSON.parse(sessionStorage[this.constructor.sessionStorageKey]);this.setState(reloadedState),newPage=reloadedState.currentPage}else newPage=this.state.currentPage;this.onSetPage(newPage)},_proto.UNSAFE_componentWillUpdate=function UNSAFE_componentWillUpdate(nextProps,nextState){if(0===this.state.errors.length&&nextState.errors.length>0)for(var i=0;i<this.getPageComponents().length;i++)if(this.pageHasError(i,nextState.errors)){nextState.currentPage=i;break}},_proto.componentDidUpdate=function componentDidUpdate(prevProps,prevState){var newErrors=prevState.errors.length<this.state.errors.length,newPage=prevState.currentPage!==this.state.currentPage;(newErrors||newPage)&&(0,_jquery.default)("html, body").animate({scrollTop:0},200),newPage&&this.onSetPage(this.state.currentPage)},_proto.getPageComponents=function getPageComponents(){throw new TypeError("must override FormController.getPageComponents")},_proto.getCurrentPageComponent=function getCurrentPageComponent(){return this.getPageComponents()[this.state.currentPage]},_proto.handleChange=function handleChange(newState){var newFields=Object.keys(newState),errors=this.state.errors.filter((function(error){return!newFields.includes(error)})),data=Object.assign({},this.state.data,newState);this.setState({data,errors}),this.saveToSessionStorage({data})},_proto.serializeFormData=function serializeFormData(){return{form_data:this.state.data}},_proto.onInitialize=function onInitialize(){},_proto.onSuccessfulSubmit=function onSuccessfulSubmit(){},_proto.onSetPage=function onSetPage(newPage){},_proto.handleSubmit=function handleSubmit(event){var _this2=this;event.preventDefault(),this.validateCurrentPageRequiredFields()&&(this.setState({errors:[],errorHeader:null,globalError:!1,submitting:!0}),_jquery.default.ajax({method:"POST",url:this.props.apiEndpoint,contentType:"application/json",dataType:"json",data:JSON.stringify(this.serializeFormData())}).done((function(data){sessionStorage.removeItem(_this2.constructor.sessionStorageKey),_this2.onSuccessfulSubmit(data)})).fail((function(data){data.responseJSON&&data.responseJSON.errors&&data.responseJSON.errors.form_data?data.responseJSON.general_error?_this2.setState({errors:data.responseJSON.errors.form_data,errorHeader:data.responseJSON.general_error,globalError:!0}):_this2.setState({errors:data.responseJSON.errors.form_data,errorHeader:_locale.default.formErrorsBelow()}):_this2.setState({globalError:!0,errorHeader:_locale.default.formServerError()}),_this2.setState({submitting:!1})})),event.preventDefault())},_proto.renderErrorFeedback=function renderErrorFeedback(){if(this.state.errorHeader&&(this.state.globalError||this.pageHasError()))return _react.default.createElement(_reactBootstrap.Alert,{key:"error-header",bsStyle:"danger"},_react.default.createElement("h3",null,this.state.errorHeader))},_proto.pageHasError=function pageHasError(){var page=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.state.currentPage,errors=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state.errors,pageFields=this.getPageComponents()[page].associatedFields;if(!pageFields)throw new TypeError("\n        Every PageComponent of a FormController must define an array\n        PageComponent.associatedFields for error handling\n      ");var flattenedErrors=errors.map((function(e){return e.replace(/\[[^\]]*\]/,"")}));return pageFields.some((function(field){return flattenedErrors.includes(field)}))},_proto.getPageProps=function getPageProps(){return{key:this.state.currentPage,options:this.props.options,onChange:this.handleChange,errors:this.state.errors,errorMessages:this.state.errorMessages,data:this.state.data}},_proto.renderCurrentPage=function renderCurrentPage(){var PageComponent=this.getCurrentPageComponent();return _react.default.createElement(PageComponent,this.getPageProps())},_proto.getRequiredFields=function getRequiredFields(){var _this3=this,requiredFields=_toConsumableArray(this.props.requiredFields);return this.getPageComponents().map((function(page){return page.getDynamicallyRequiredFields(_this3.state.data,_this3.getPageProps())})).reduce((function(flattened,subArray){return flattened.concat(subArray)}),requiredFields)},_proto.validatePageRequiredFields=function validatePageRequiredFields(pageIndex){var _this4=this;if(pageIndex<0||pageIndex>=this.getPageComponents().length)throw"Invalid page index ".concat(pageIndex);var page=this.getPageComponents()[pageIndex],requiredFields=this.getRequiredFields(),pageFields=page.associatedFields,pageData={};pageFields.forEach((function(field){var value=_this4.state.data[field];if("string"==typeof value){var trimmedValue=value.trim();pageData[field]=trimmedValue.length>0?trimmedValue:null}else pageData[field]=value})),pageData=Object.assign(pageData,page.processPageData(pageData)),this.setState({data:_objectSpread(_objectSpread({},this.state.data),pageData)});var missingRequiredFields=pageFields.filter((function(f){return requiredFields.includes(f)})).filter((function(f){return!pageData[f]})),formatErrors=page.getErrorMessages(pageData);return!missingRequiredFields.length&&!Object.keys(formatErrors).length||(this.setState({errors:[].concat(_toConsumableArray(missingRequiredFields),_toConsumableArray(Object.keys(formatErrors))),errorMessages:formatErrors,errorHeader:"Please fill out all required fields. You must completely fill out this section before moving           on to the next section or going back to edit a previous section."}),!1)},_proto.validateCurrentPageRequiredFields=function validateCurrentPageRequiredFields(){return this.validatePageRequiredFields(this.state.currentPage)},_proto.nextPage=function nextPage(){this.setPage(this.state.currentPage+1)},_proto.prevPage=function prevPage(){this.setPage(this.state.currentPage-1)},_proto.setPage=function setPage(i){var newPage=Math.min(Math.max(i,0),this.getPageComponents().length-1);this.validateCurrentPageRequiredFields()&&(this.setState({currentPage:newPage}),this.saveToSessionStorage({currentPage:newPage}))},_proto.shouldShowSubmit=function shouldShowSubmit(){return this.state.currentPage===this.getPageComponents().length-1},_proto.renderControlButtons=function renderControlButtons(){var backButton,_this5=this;this.state.currentPage>0&&(backButton=_react.default.createElement(_reactBootstrap.Button,{key:"back",id:"back",onClick:this.prevPage},"Back"));var nextButton=_react.default.createElement(_reactBootstrap.Button,{bsStyle:"primary",key:"next",id:"next",onClick:this.nextPage},"Next");this.shouldShowSubmit()&&(nextButton=_react.default.createElement(_reactBootstrap.Button,{bsStyle:"primary",disabled:this.state.submitting,key:"submit",id:"submit",type:"submit"},this.constructor.submitButtonText));var pageButtons=this.getPageComponents().length>1&&_react.default.createElement(_pagination.Pagination,{style:styles.pageButtons,items:this.getPageComponents().length,activePage:this.state.currentPage+1,onSelect:function onSelect(i){return _this5.setPage(i-1)}});return _react.default.createElement(_reactBootstrap.FormGroup,{key:"control-buttons",className:"text-center"},backButton,pageButtons,nextButton)},_proto.render=function render(){var _this6=this;return _react.default.createElement("form",{ref:function ref(form){_this6.form=form},onSubmit:this.handleSubmit},this.renderErrorFeedback(),this.renderCurrentPage(),this.renderControlButtons())},FormController}(_react.default.Component);exports.default=FormController,_defineProperty(FormController,"sessionStorageKey",null),_defineProperty(FormController,"submitButtonText",_locale.default.submit());var styles={pageButtons:{verticalAlign:"middle",margin:"0 10px"}};FormController.propTypes={apiEndpoint:_propTypes.default.string.isRequired,options:_propTypes.default.object.isRequired,requiredFields:_propTypes.default.arrayOf(_propTypes.default.string).isRequired},FormController.defaultProps={requiredFields:[]},module.exports=exports.default},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./src/code-studio/pd/form_components/FormController.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.MultiPageForm=exports.GeneratedTextInput=exports.FormWithSelectDropdown=exports.FormWithRadioButtons=exports.FormWithCheckButtons=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_FormComponent5=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/FormComponent.jsx")),_FormController2=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/FormController.jsx")),_reactBootstrapStoryDecorator=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/reactBootstrapStoryDecorator.jsx")),_addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var TestPageOne=function(_FormComponent){function TestPageOne(){return _FormComponent.apply(this,arguments)||this}return _inheritsLoose(TestPageOne,_FormComponent),TestPageOne.prototype.render=function render(){return _react.default.createElement(_reactBootstrap.FormGroup,null,_react.default.createElement("h4",null,"Page One"),this.buildButtonsFromOptions({name:"one",label:"Input One",type:"check"}))},TestPageOne}(_FormComponent5.default);TestPageOne.associatedFields=["one"];var TestPageTwo=function(_FormComponent2){function TestPageTwo(){return _FormComponent2.apply(this,arguments)||this}return _inheritsLoose(TestPageTwo,_FormComponent2),TestPageTwo.prototype.render=function render(){return _react.default.createElement(_reactBootstrap.FormGroup,null,_react.default.createElement("h4",null,"Page Two"),this.buildButtonsFromOptions({name:"two",label:"Input Two",type:"radio"}))},TestPageTwo}(_FormComponent5.default);TestPageTwo.associatedFields=["two"];var TestPageThree=function(_FormComponent3){function TestPageThree(){return _FormComponent3.apply(this,arguments)||this}return _inheritsLoose(TestPageThree,_FormComponent3),TestPageThree.prototype.render=function render(){return _react.default.createElement(_reactBootstrap.FormGroup,null,_react.default.createElement("h4",null,"Page Three"),this.buildSelectFieldGroupFromOptions({name:"three",label:"Input Three"}))},TestPageThree}(_FormComponent5.default);TestPageThree.associatedFields=["three"];var TestPageFour=function(_FormComponent4){function TestPageFour(){return _FormComponent4.apply(this,arguments)||this}return _inheritsLoose(TestPageFour,_FormComponent4),TestPageFour.prototype.render=function render(){return _react.default.createElement(_reactBootstrap.FormGroup,null,_react.default.createElement("h4",null,"Page Four"),this.buildFieldGroup({name:"four",label:"Input Four",type:"text"}))},TestPageFour}(_FormComponent5.default);TestPageFour.associatedFields=["four"];var TestController=function(_FormController){function TestController(){return _FormController.apply(this,arguments)||this}_inheritsLoose(TestController,_FormController);var _proto5=TestController.prototype;return _proto5.getPageComponents=function getPageComponents(){return[TestPageOne,TestPageTwo,TestPageThree,TestPageFour]},_proto5.handleChange=function handleChange(newState){this.props.action("onChange")(newState),_FormController.prototype.handleChange.call(this,newState)},_proto5.handleSubmit=function handleSubmit(event){this.props.action("submit")(this.serializeFormData()),event.preventDefault()},TestController}(_FormController2.default),OPTIONS={one:["First","Second","Third"],two:["Fourth","Fifth","Sixth"],three:["Seventh","Eighth","Ninth"]},_default={component:_FormController2.default,decorators:[_reactBootstrapStoryDecorator.default]};exports.default=_default;exports.FormWithRadioButtons=function FormWithRadioButtons(){return _react.default.createElement(TestPageOne,{options:{one:OPTIONS.one},onChange:(0,_addonActions.action)("onChange"),errors:[],errorMessages:{},data:{}})};exports.FormWithCheckButtons=function FormWithCheckButtons(){return _react.default.createElement(TestPageTwo,{options:{two:OPTIONS.two},onChange:(0,_addonActions.action)("onChange"),errors:[],errorMessages:{},data:{}})};exports.FormWithSelectDropdown=function FormWithSelectDropdown(){return _react.default.createElement(TestPageThree,{options:{three:OPTIONS.three},onChange:(0,_addonActions.action)("onChange"),errors:[],errorMessages:{},data:{}})};exports.GeneratedTextInput=function GeneratedTextInput(){return _react.default.createElement(TestPageFour,{options:{},onChange:(0,_addonActions.action)("onChange"),errors:[],errorMessages:{},data:{}})};exports.MultiPageForm=function MultiPageForm(){return _react.default.createElement(TestController,{apiEndpoint:"",options:OPTIONS,requiredFields:[]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,