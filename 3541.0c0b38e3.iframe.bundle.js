(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[3541],{"./node_modules/lodash/_arrayEach.js":module=>{module.exports=function arrayEach(array,iteratee){for(var index=-1,length=null==array?0:array.length;++index<length&&!1!==iteratee(array[index],index,array););return array}},"./node_modules/lodash/_arrayIncludes.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseIndexOf=__webpack_require__("./node_modules/lodash/_baseIndexOf.js");module.exports=function arrayIncludes(array,value){return!!(null==array?0:array.length)&&baseIndexOf(array,value,0)>-1}},"./node_modules/lodash/_arrayIncludesWith.js":module=>{module.exports=function arrayIncludesWith(array,value,comparator){for(var index=-1,length=null==array?0:array.length;++index<length;)if(comparator(value,array[index]))return!0;return!1}},"./node_modules/lodash/_baseAssign.js":(module,__unused_webpack_exports,__webpack_require__)=>{var copyObject=__webpack_require__("./node_modules/lodash/_copyObject.js"),keys=__webpack_require__("./node_modules/lodash/keys.js");module.exports=function baseAssign(object,source){return object&&copyObject(source,keys(source),object)}},"./node_modules/lodash/_baseAssignIn.js":(module,__unused_webpack_exports,__webpack_require__)=>{var copyObject=__webpack_require__("./node_modules/lodash/_copyObject.js"),keysIn=__webpack_require__("./node_modules/lodash/keysIn.js");module.exports=function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object)}},"./node_modules/lodash/_baseClone.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Stack=__webpack_require__("./node_modules/lodash/_Stack.js"),arrayEach=__webpack_require__("./node_modules/lodash/_arrayEach.js"),assignValue=__webpack_require__("./node_modules/lodash/_assignValue.js"),baseAssign=__webpack_require__("./node_modules/lodash/_baseAssign.js"),baseAssignIn=__webpack_require__("./node_modules/lodash/_baseAssignIn.js"),cloneBuffer=__webpack_require__("./node_modules/lodash/_cloneBuffer.js"),copyArray=__webpack_require__("./node_modules/lodash/_copyArray.js"),copySymbols=__webpack_require__("./node_modules/lodash/_copySymbols.js"),copySymbolsIn=__webpack_require__("./node_modules/lodash/_copySymbolsIn.js"),getAllKeys=__webpack_require__("./node_modules/lodash/_getAllKeys.js"),getAllKeysIn=__webpack_require__("./node_modules/lodash/_getAllKeysIn.js"),getTag=__webpack_require__("./node_modules/lodash/_getTag.js"),initCloneArray=__webpack_require__("./node_modules/lodash/_initCloneArray.js"),initCloneByTag=__webpack_require__("./node_modules/lodash/_initCloneByTag.js"),initCloneObject=__webpack_require__("./node_modules/lodash/_initCloneObject.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js"),isBuffer=__webpack_require__("./node_modules/lodash/isBuffer.js"),isMap=__webpack_require__("./node_modules/lodash/isMap.js"),isObject=__webpack_require__("./node_modules/lodash/isObject.js"),isSet=__webpack_require__("./node_modules/lodash/isSet.js"),keys=__webpack_require__("./node_modules/lodash/keys.js"),keysIn=__webpack_require__("./node_modules/lodash/keysIn.js"),cloneableTags={};cloneableTags["[object Arguments]"]=cloneableTags["[object Array]"]=cloneableTags["[object ArrayBuffer]"]=cloneableTags["[object DataView]"]=cloneableTags["[object Boolean]"]=cloneableTags["[object Date]"]=cloneableTags["[object Float32Array]"]=cloneableTags["[object Float64Array]"]=cloneableTags["[object Int8Array]"]=cloneableTags["[object Int16Array]"]=cloneableTags["[object Int32Array]"]=cloneableTags["[object Map]"]=cloneableTags["[object Number]"]=cloneableTags["[object Object]"]=cloneableTags["[object RegExp]"]=cloneableTags["[object Set]"]=cloneableTags["[object String]"]=cloneableTags["[object Symbol]"]=cloneableTags["[object Uint8Array]"]=cloneableTags["[object Uint8ClampedArray]"]=cloneableTags["[object Uint16Array]"]=cloneableTags["[object Uint32Array]"]=!0,cloneableTags["[object Error]"]=cloneableTags["[object Function]"]=cloneableTags["[object WeakMap]"]=!1,module.exports=function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=1&bitmask,isFlat=2&bitmask,isFull=4&bitmask;if(customizer&&(result=object?customizer(value,key,object,stack):customizer(value)),void 0!==result)return result;if(!isObject(value))return value;var isArr=isArray(value);if(isArr){if(result=initCloneArray(value),!isDeep)return copyArray(value,result)}else{var tag=getTag(value),isFunc="[object Function]"==tag||"[object GeneratorFunction]"==tag;if(isBuffer(value))return cloneBuffer(value,isDeep);if("[object Object]"==tag||"[object Arguments]"==tag||isFunc&&!object){if(result=isFlat||isFunc?{}:initCloneObject(value),!isDeep)return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value))}else{if(!cloneableTags[tag])return object?value:{};result=initCloneByTag(value,tag,isDeep)}}stack||(stack=new Stack);var stacked=stack.get(value);if(stacked)return stacked;stack.set(value,result),isSet(value)?value.forEach((function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack))})):isMap(value)&&value.forEach((function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack))}));var props=isArr?void 0:(isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys)(value);return arrayEach(props||value,(function(subValue,key){props&&(subValue=value[key=subValue]),assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack))})),result}},"./node_modules/lodash/_baseCreate.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isObject=__webpack_require__("./node_modules/lodash/isObject.js"),objectCreate=Object.create,baseCreate=function(){function object(){}return function(proto){if(!isObject(proto))return{};if(objectCreate)return objectCreate(proto);object.prototype=proto;var result=new object;return object.prototype=void 0,result}}();module.exports=baseCreate},"./node_modules/lodash/_baseFindIndex.js":module=>{module.exports=function baseFindIndex(array,predicate,fromIndex,fromRight){for(var length=array.length,index=fromIndex+(fromRight?1:-1);fromRight?index--:++index<length;)if(predicate(array[index],index,array))return index;return-1}},"./node_modules/lodash/_baseIndexOf.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseFindIndex=__webpack_require__("./node_modules/lodash/_baseFindIndex.js"),baseIsNaN=__webpack_require__("./node_modules/lodash/_baseIsNaN.js"),strictIndexOf=__webpack_require__("./node_modules/lodash/_strictIndexOf.js");module.exports=function baseIndexOf(array,value,fromIndex){return value==value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex)}},"./node_modules/lodash/_baseIsMap.js":(module,__unused_webpack_exports,__webpack_require__)=>{var getTag=__webpack_require__("./node_modules/lodash/_getTag.js"),isObjectLike=__webpack_require__("./node_modules/lodash/isObjectLike.js");module.exports=function baseIsMap(value){return isObjectLike(value)&&"[object Map]"==getTag(value)}},"./node_modules/lodash/_baseIsNaN.js":module=>{module.exports=function baseIsNaN(value){return value!=value}},"./node_modules/lodash/_baseIsSet.js":(module,__unused_webpack_exports,__webpack_require__)=>{var getTag=__webpack_require__("./node_modules/lodash/_getTag.js"),isObjectLike=__webpack_require__("./node_modules/lodash/isObjectLike.js");module.exports=function baseIsSet(value){return isObjectLike(value)&&"[object Set]"==getTag(value)}},"./node_modules/lodash/_baseUniq.js":(module,__unused_webpack_exports,__webpack_require__)=>{var SetCache=__webpack_require__("./node_modules/lodash/_SetCache.js"),arrayIncludes=__webpack_require__("./node_modules/lodash/_arrayIncludes.js"),arrayIncludesWith=__webpack_require__("./node_modules/lodash/_arrayIncludesWith.js"),cacheHas=__webpack_require__("./node_modules/lodash/_cacheHas.js"),createSet=__webpack_require__("./node_modules/lodash/_createSet.js"),setToArray=__webpack_require__("./node_modules/lodash/_setToArray.js");module.exports=function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=!0,result=[],seen=result;if(comparator)isCommon=!1,includes=arrayIncludesWith;else if(length>=200){var set=iteratee?null:createSet(array);if(set)return setToArray(set);isCommon=!1,includes=cacheHas,seen=new SetCache}else seen=iteratee?[]:result;outer:for(;++index<length;){var value=array[index],computed=iteratee?iteratee(value):value;if(value=comparator||0!==value?value:0,isCommon&&computed==computed){for(var seenIndex=seen.length;seenIndex--;)if(seen[seenIndex]===computed)continue outer;iteratee&&seen.push(computed),result.push(value)}else includes(seen,computed,comparator)||(seen!==result&&seen.push(computed),result.push(value))}return result}},"./node_modules/lodash/_cloneArrayBuffer.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Uint8Array=__webpack_require__("./node_modules/lodash/_Uint8Array.js");module.exports=function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);return new Uint8Array(result).set(new Uint8Array(arrayBuffer)),result}},"./node_modules/lodash/_cloneBuffer.js":(module,exports,__webpack_require__)=>{module=__webpack_require__.nmd(module);var root=__webpack_require__("./node_modules/lodash/_root.js"),freeExports=exports&&!exports.nodeType&&exports,freeModule=freeExports&&module&&!module.nodeType&&module,Buffer=freeModule&&freeModule.exports===freeExports?root.Buffer:void 0,allocUnsafe=Buffer?Buffer.allocUnsafe:void 0;module.exports=function cloneBuffer(buffer,isDeep){if(isDeep)return buffer.slice();var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);return buffer.copy(result),result}},"./node_modules/lodash/_cloneDataView.js":(module,__unused_webpack_exports,__webpack_require__)=>{var cloneArrayBuffer=__webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js");module.exports=function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength)}},"./node_modules/lodash/_cloneRegExp.js":module=>{var reFlags=/\w*$/;module.exports=function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));return result.lastIndex=regexp.lastIndex,result}},"./node_modules/lodash/_cloneSymbol.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Symbol=__webpack_require__("./node_modules/lodash/_Symbol.js"),symbolProto=Symbol?Symbol.prototype:void 0,symbolValueOf=symbolProto?symbolProto.valueOf:void 0;module.exports=function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{}}},"./node_modules/lodash/_cloneTypedArray.js":(module,__unused_webpack_exports,__webpack_require__)=>{var cloneArrayBuffer=__webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js");module.exports=function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length)}},"./node_modules/lodash/_copyArray.js":module=>{module.exports=function copyArray(source,array){var index=-1,length=source.length;for(array||(array=Array(length));++index<length;)array[index]=source[index];return array}},"./node_modules/lodash/_copyObject.js":(module,__unused_webpack_exports,__webpack_require__)=>{var assignValue=__webpack_require__("./node_modules/lodash/_assignValue.js"),baseAssignValue=__webpack_require__("./node_modules/lodash/_baseAssignValue.js");module.exports=function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});for(var index=-1,length=props.length;++index<length;){var key=props[index],newValue=customizer?customizer(object[key],source[key],key,object,source):void 0;void 0===newValue&&(newValue=source[key]),isNew?baseAssignValue(object,key,newValue):assignValue(object,key,newValue)}return object}},"./node_modules/lodash/_copySymbols.js":(module,__unused_webpack_exports,__webpack_require__)=>{var copyObject=__webpack_require__("./node_modules/lodash/_copyObject.js"),getSymbols=__webpack_require__("./node_modules/lodash/_getSymbols.js");module.exports=function copySymbols(source,object){return copyObject(source,getSymbols(source),object)}},"./node_modules/lodash/_copySymbolsIn.js":(module,__unused_webpack_exports,__webpack_require__)=>{var copyObject=__webpack_require__("./node_modules/lodash/_copyObject.js"),getSymbolsIn=__webpack_require__("./node_modules/lodash/_getSymbolsIn.js");module.exports=function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object)}},"./node_modules/lodash/_createSet.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Set=__webpack_require__("./node_modules/lodash/_Set.js"),noop=__webpack_require__("./node_modules/lodash/noop.js"),setToArray=__webpack_require__("./node_modules/lodash/_setToArray.js"),createSet=Set&&1/setToArray(new Set([,-0]))[1]==1/0?function(values){return new Set(values)}:noop;module.exports=createSet},"./node_modules/lodash/_initCloneArray.js":module=>{var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=function initCloneArray(array){var length=array.length,result=new array.constructor(length);return length&&"string"==typeof array[0]&&hasOwnProperty.call(array,"index")&&(result.index=array.index,result.input=array.input),result}},"./node_modules/lodash/_initCloneByTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{var cloneArrayBuffer=__webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js"),cloneDataView=__webpack_require__("./node_modules/lodash/_cloneDataView.js"),cloneRegExp=__webpack_require__("./node_modules/lodash/_cloneRegExp.js"),cloneSymbol=__webpack_require__("./node_modules/lodash/_cloneSymbol.js"),cloneTypedArray=__webpack_require__("./node_modules/lodash/_cloneTypedArray.js");module.exports=function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case"[object ArrayBuffer]":return cloneArrayBuffer(object);case"[object Boolean]":case"[object Date]":return new Ctor(+object);case"[object DataView]":return cloneDataView(object,isDeep);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return cloneTypedArray(object,isDeep);case"[object Map]":case"[object Set]":return new Ctor;case"[object Number]":case"[object String]":return new Ctor(object);case"[object RegExp]":return cloneRegExp(object);case"[object Symbol]":return cloneSymbol(object)}}},"./node_modules/lodash/_initCloneObject.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseCreate=__webpack_require__("./node_modules/lodash/_baseCreate.js"),getPrototype=__webpack_require__("./node_modules/lodash/_getPrototype.js"),isPrototype=__webpack_require__("./node_modules/lodash/_isPrototype.js");module.exports=function initCloneObject(object){return"function"!=typeof object.constructor||isPrototype(object)?{}:baseCreate(getPrototype(object))}},"./node_modules/lodash/_strictIndexOf.js":module=>{module.exports=function strictIndexOf(array,value,fromIndex){for(var index=fromIndex-1,length=array.length;++index<length;)if(array[index]===value)return index;return-1}},"./node_modules/lodash/cloneDeep.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseClone=__webpack_require__("./node_modules/lodash/_baseClone.js");module.exports=function cloneDeep(value){return baseClone(value,5)}},"./node_modules/lodash/isMap.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseIsMap=__webpack_require__("./node_modules/lodash/_baseIsMap.js"),baseUnary=__webpack_require__("./node_modules/lodash/_baseUnary.js"),nodeUtil=__webpack_require__("./node_modules/lodash/_nodeUtil.js"),nodeIsMap=nodeUtil&&nodeUtil.isMap,isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;module.exports=isMap},"./node_modules/lodash/isSet.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseIsSet=__webpack_require__("./node_modules/lodash/_baseIsSet.js"),baseUnary=__webpack_require__("./node_modules/lodash/_baseUnary.js"),nodeUtil=__webpack_require__("./node_modules/lodash/_nodeUtil.js"),nodeIsSet=nodeUtil&&nodeUtil.isSet,isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;module.exports=isSet},"./node_modules/lodash/noop.js":module=>{module.exports=function noop(){}},"./node_modules/lodash/uniq.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseUniq=__webpack_require__("./node_modules/lodash/_baseUniq.js");module.exports=function uniq(array){return array&&array.length?baseUniq(array):[]}},"./node_modules/tocbot/src/js/build-html.js":module=>{module.exports=function(options){var tocElement,forEach=[].forEach,some=[].some,body=document.body,currentlyHighlighting=!0,SPACE_CHAR=" ";function createEl(d,container){var link=container.appendChild(function createLink(data){var item=document.createElement("li"),a=document.createElement("a");options.listItemClass&&item.setAttribute("class",options.listItemClass);options.onClick&&(a.onclick=options.onClick);options.includeTitleTags&&a.setAttribute("title",data.textContent);options.includeHtml&&data.childNodes.length?forEach.call(data.childNodes,(function(node){a.appendChild(node.cloneNode(!0))})):a.textContent=data.textContent;return a.setAttribute("href",options.basePath+"#"+data.id),a.setAttribute("class",options.linkClass+SPACE_CHAR+"node-name--"+data.nodeName+SPACE_CHAR+options.extraLinkClasses),item.appendChild(a),item}(d));if(d.children.length){var list=createList(d.isCollapsed);d.children.forEach((function(child){createEl(child,list)})),link.appendChild(list)}}function createList(isCollapsed){var listElement=options.orderedList?"ol":"ul",list=document.createElement(listElement),classes=options.listClass+SPACE_CHAR+options.extraListClasses;return isCollapsed&&(classes=(classes=classes+SPACE_CHAR+options.collapsibleClass)+SPACE_CHAR+options.isCollapsedClass),list.setAttribute("class",classes),list}function getHeadingTopPos(obj){var position=0;return null!==obj&&(position=obj.offsetTop,options.hasInnerContainers&&(position+=getHeadingTopPos(obj.offsetParent))),position}function updateClassname(obj,className){return obj&&obj.className!==className&&(obj.className=className),obj}function removeCollapsedFromParents(element){return element&&-1!==element.className.indexOf(options.collapsibleClass)&&-1!==element.className.indexOf(options.isCollapsedClass)?(updateClassname(element,element.className.replace(SPACE_CHAR+options.isCollapsedClass,"")),removeCollapsedFromParents(element.parentNode.parentNode)):element}return{enableTocAnimation:function enableTocAnimation(){currentlyHighlighting=!0},disableTocAnimation:function disableTocAnimation(event){var target=event.target||event.srcElement;"string"==typeof target.className&&-1!==target.className.indexOf(options.linkClass)&&(currentlyHighlighting=!1)},render:function render(parent,data){var container=createList(!1);if(data.forEach((function(d){createEl(d,container)})),null!==(tocElement=parent||tocElement))return tocElement.firstChild&&tocElement.removeChild(tocElement.firstChild),0===data.length?tocElement:tocElement.appendChild(container)},updateToc:function updateToc(headingsArray){var top;top=options.scrollContainer&&document.querySelector(options.scrollContainer)?document.querySelector(options.scrollContainer).scrollTop:document.documentElement.scrollTop||body.scrollTop,options.positionFixedSelector&&function updateFixedSidebarClass(){var top;top=options.scrollContainer&&document.querySelector(options.scrollContainer)?document.querySelector(options.scrollContainer).scrollTop:document.documentElement.scrollTop||body.scrollTop;var posFixedEl=document.querySelector(options.positionFixedSelector);"auto"===options.fixedSidebarOffset&&(options.fixedSidebarOffset=tocElement.offsetTop),top>options.fixedSidebarOffset?-1===posFixedEl.className.indexOf(options.positionFixedClass)&&(posFixedEl.className+=SPACE_CHAR+options.positionFixedClass):posFixedEl.className=posFixedEl.className.replace(SPACE_CHAR+options.positionFixedClass,"")}();var topHeader,headings=headingsArray;if(currentlyHighlighting&&null!==tocElement&&headings.length>0){some.call(headings,(function(heading,i){return getHeadingTopPos(heading)>top+options.headingsOffset+10?(topHeader=headings[0===i?i:i-1],!0):i===headings.length-1?(topHeader=headings[headings.length-1],!0):void 0}));var oldActiveTocLink=tocElement.querySelector("."+options.activeLinkClass),activeTocLink=tocElement.querySelector("."+options.linkClass+".node-name--"+topHeader.nodeName+'[href="'+options.basePath+"#"+topHeader.id.replace(/([ #;&,.+*~':"!^$[\]()=>|/\\@])/g,"\\$1")+'"]');if(oldActiveTocLink===activeTocLink)return;var tocLinks=tocElement.querySelectorAll("."+options.linkClass);forEach.call(tocLinks,(function(tocLink){updateClassname(tocLink,tocLink.className.replace(SPACE_CHAR+options.activeLinkClass,""))}));var tocLis=tocElement.querySelectorAll("."+options.listItemClass);forEach.call(tocLis,(function(tocLi){updateClassname(tocLi,tocLi.className.replace(SPACE_CHAR+options.activeListItemClass,""))})),activeTocLink&&-1===activeTocLink.className.indexOf(options.activeLinkClass)&&(activeTocLink.className+=SPACE_CHAR+options.activeLinkClass);var li=activeTocLink&&activeTocLink.parentNode;li&&-1===li.className.indexOf(options.activeListItemClass)&&(li.className+=SPACE_CHAR+options.activeListItemClass);var tocLists=tocElement.querySelectorAll("."+options.listClass+"."+options.collapsibleClass);forEach.call(tocLists,(function(list){-1===list.className.indexOf(options.isCollapsedClass)&&(list.className+=SPACE_CHAR+options.isCollapsedClass)})),activeTocLink&&activeTocLink.nextSibling&&-1!==activeTocLink.nextSibling.className.indexOf(options.isCollapsedClass)&&updateClassname(activeTocLink.nextSibling,activeTocLink.nextSibling.className.replace(SPACE_CHAR+options.isCollapsedClass,"")),removeCollapsedFromParents(activeTocLink&&activeTocLink.parentNode.parentNode)}}}}},"./node_modules/tocbot/src/js/default-options.js":module=>{module.exports={tocSelector:".js-toc",contentSelector:".js-toc-content",headingSelector:"h1, h2, h3",ignoreSelector:".js-toc-ignore",hasInnerContainers:!1,linkClass:"toc-link",extraLinkClasses:"",activeLinkClass:"is-active-link",listClass:"toc-list",extraListClasses:"",isCollapsedClass:"is-collapsed",collapsibleClass:"is-collapsible",listItemClass:"toc-list-item",activeListItemClass:"is-active-li",collapseDepth:0,scrollSmooth:!0,scrollSmoothDuration:420,scrollSmoothOffset:0,scrollEndCallback:function(e){},headingsOffset:1,throttleTimeout:50,positionFixedSelector:null,positionFixedClass:"is-position-fixed",fixedSidebarOffset:"auto",includeHtml:!1,includeTitleTags:!1,onClick:function(e){},orderedList:!0,scrollContainer:null,skipRendering:!1,headingLabelCallback:!1,ignoreHiddenElements:!1,headingObjectCallback:null,basePath:"",disableTocScrollSync:!1,tocScrollOffset:0}},"./node_modules/tocbot/src/js/index.js":(module,exports,__webpack_require__)=>{var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,root;root=void 0!==__webpack_require__.g?__webpack_require__.g:window||__webpack_require__.g,__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=function(root){"use strict";var buildHtml,parseContent,headingsArray,defaultOptions=__webpack_require__("./node_modules/tocbot/src/js/default-options.js"),options={},tocbot={},BuildHtml=__webpack_require__("./node_modules/tocbot/src/js/build-html.js"),ParseContent=__webpack_require__("./node_modules/tocbot/src/js/parse-content.js"),updateTocScroll=__webpack_require__("./node_modules/tocbot/src/js/update-toc-scroll.js"),supports=!!(root&&root.document&&root.document.querySelector&&root.addEventListener);if("undefined"!=typeof window||supports){var hasOwnProperty=Object.prototype.hasOwnProperty;return tocbot.destroy=function(){var tocElement=getTocElement(options);null!==tocElement&&(options.skipRendering||tocElement&&(tocElement.innerHTML=""),options.scrollContainer&&document.querySelector(options.scrollContainer)?(document.querySelector(options.scrollContainer).removeEventListener("scroll",this._scrollListener,!1),document.querySelector(options.scrollContainer).removeEventListener("resize",this._scrollListener,!1),buildHtml&&document.querySelector(options.scrollContainer).removeEventListener("click",this._clickListener,!1)):(document.removeEventListener("scroll",this._scrollListener,!1),document.removeEventListener("resize",this._scrollListener,!1),buildHtml&&document.removeEventListener("click",this._clickListener,!1)))},tocbot.init=function(customOptions){if(supports){options=extend(defaultOptions,customOptions||{}),this.options=options,this.state={},options.scrollSmooth&&(options.duration=options.scrollSmoothDuration,options.offset=options.scrollSmoothOffset,tocbot.scrollSmooth=__webpack_require__("./node_modules/tocbot/src/js/scroll-smooth/index.js").initSmoothScrolling(options)),buildHtml=BuildHtml(options),parseContent=ParseContent(options),this._buildHtml=buildHtml,this._parseContent=parseContent,this._headingsArray=headingsArray,tocbot.destroy();var contentElement=getContentElement(options);if(null!==contentElement){var tocElement=getTocElement(options);if(null!==tocElement&&null!==(headingsArray=parseContent.selectHeadings(contentElement,options.headingSelector))){var nestedHeadings=parseContent.nestHeadingsArray(headingsArray).nest;if(options.skipRendering)return this;buildHtml.render(tocElement,nestedHeadings),this._scrollListener=throttle((function(e){buildHtml.updateToc(headingsArray),!options.disableTocScrollSync&&updateTocScroll(options);var isTop=e&&e.target&&e.target.scrollingElement&&0===e.target.scrollingElement.scrollTop;(e&&(0===e.eventPhase||null===e.currentTarget)||isTop)&&(buildHtml.updateToc(headingsArray),options.scrollEndCallback&&options.scrollEndCallback(e))}),options.throttleTimeout),this._scrollListener(),options.scrollContainer&&document.querySelector(options.scrollContainer)?(document.querySelector(options.scrollContainer).addEventListener("scroll",this._scrollListener,!1),document.querySelector(options.scrollContainer).addEventListener("resize",this._scrollListener,!1)):(document.addEventListener("scroll",this._scrollListener,!1),document.addEventListener("resize",this._scrollListener,!1));var timeout=null;return this._clickListener=throttle((function(event){options.scrollSmooth&&buildHtml.disableTocAnimation(event),buildHtml.updateToc(headingsArray),timeout&&clearTimeout(timeout),timeout=setTimeout((function(){buildHtml.enableTocAnimation()}),options.scrollSmoothDuration)}),options.throttleTimeout),options.scrollContainer&&document.querySelector(options.scrollContainer)?document.querySelector(options.scrollContainer).addEventListener("click",this._clickListener,!1):document.addEventListener("click",this._clickListener,!1),this}}}},tocbot.refresh=function(customOptions){tocbot.destroy(),tocbot.init(customOptions||this.options)},root.tocbot=tocbot,tocbot}function extend(){for(var target={},i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source)hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}function throttle(fn,threshold,scope){var last,deferTimer;return threshold||(threshold=250),function(){var context=scope||this,now=+new Date,args=arguments;last&&now<last+threshold?(clearTimeout(deferTimer),deferTimer=setTimeout((function(){last=now,fn.apply(context,args)}),threshold)):(last=now,fn.apply(context,args))}}function getContentElement(options){try{return options.contentElement||document.querySelector(options.contentSelector)}catch(e){return console.warn("Contents element not found: "+options.contentSelector),null}}function getTocElement(options){try{return options.tocElement||document.querySelector(options.tocSelector)}catch(e){return console.warn("TOC element not found: "+options.tocSelector),null}}}(root),void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},"./node_modules/tocbot/src/js/parse-content.js":module=>{module.exports=function parseContent(options){var reduce=[].reduce;function getLastItem(array){return array[array.length-1]}function getHeadingLevel(heading){return+heading.nodeName.toUpperCase().replace("H","")}function getHeadingObject(heading){if(!function isHTMLElement(maybeElement){try{return maybeElement instanceof window.HTMLElement||maybeElement instanceof window.parent.HTMLElement}catch(e){return maybeElement instanceof window.HTMLElement}}(heading))return heading;if(options.ignoreHiddenElements&&(!heading.offsetHeight||!heading.offsetParent))return null;const headingLabel=heading.getAttribute("data-heading-label")||(options.headingLabelCallback?String(options.headingLabelCallback(heading.innerText)):(heading.innerText||heading.textContent).trim());var obj={id:heading.id,children:[],nodeName:heading.nodeName,headingLevel:getHeadingLevel(heading),textContent:headingLabel};return options.includeHtml&&(obj.childNodes=heading.childNodes),options.headingObjectCallback?options.headingObjectCallback(obj,heading):obj}return{nestHeadingsArray:function nestHeadingsArray(headingsArray){return reduce.call(headingsArray,(function reducer(prev,curr){var currentHeading=getHeadingObject(curr);return currentHeading&&function addNode(node,nest){for(var obj=getHeadingObject(node),level=obj.headingLevel,array=nest,lastItem=getLastItem(array),counter=level-(lastItem?lastItem.headingLevel:0);counter>0&&(!(lastItem=getLastItem(array))||level!==lastItem.headingLevel);)lastItem&&void 0!==lastItem.children&&(array=lastItem.children),counter--;return level>=options.collapseDepth&&(obj.isCollapsed=!0),array.push(obj),array}(currentHeading,prev.nest),prev}),{nest:[]})},selectHeadings:function selectHeadings(contentElement,headingSelector){var selectors=headingSelector;options.ignoreSelector&&(selectors=headingSelector.split(",").map((function mapSelectors(selector){return selector.trim()+":not("+options.ignoreSelector+")"})));try{return contentElement.querySelectorAll(selectors)}catch(e){return console.warn("Headers not found with selector: "+selectors),null}}}}},"./node_modules/tocbot/src/js/scroll-smooth/index.js":(__unused_webpack_module,exports)=>{exports.initSmoothScrolling=function initSmoothScrolling(options){var duration=options.duration,offset=options.offset,pageUrl=location.hash?stripHash(location.href):location.href;function stripHash(url){return url.slice(0,url.lastIndexOf("#"))}!function delegatedLinkHijacking(){document.body.addEventListener("click",(function onClick(e){!function isInPageLink(n){return"a"===n.tagName.toLowerCase()&&(n.hash.length>0||"#"===n.href.charAt(n.href.length-1))&&(stripHash(n.href)===pageUrl||stripHash(n.href)+"#"===pageUrl)}(e.target)||e.target.className.indexOf("no-smooth-scroll")>-1||"#"===e.target.href.charAt(e.target.href.length-2)&&"!"===e.target.href.charAt(e.target.href.length-1)||-1===e.target.className.indexOf(options.linkClass)||function jump(target,options){var timeStart,timeElapsed,start=window.pageYOffset,opt={duration:options.duration,offset:options.offset||0,callback:options.callback,easing:options.easing||easeInOutQuad},tgt=document.querySelector('[id="'+decodeURI(target).split("#").join("")+'"]')||document.querySelector('[id="'+target.split("#").join("")+'"]'),distance="string"==typeof target?opt.offset+(target?tgt&&tgt.getBoundingClientRect().top||0:-(document.documentElement.scrollTop||document.body.scrollTop)):target,duration="function"==typeof opt.duration?opt.duration(distance):opt.duration;function loop(time){timeElapsed=time-timeStart,window.scrollTo(0,opt.easing(timeElapsed,start,distance,duration)),timeElapsed<duration?requestAnimationFrame(loop):end()}function end(){window.scrollTo(0,start+distance),"function"==typeof opt.callback&&opt.callback()}function easeInOutQuad(t,b,c,d){return(t/=d/2)<1?c/2*t*t+b:-c/2*(--t*(t-2)-1)+b}requestAnimationFrame((function(time){timeStart=time,loop(time)}))}(e.target.hash,{duration,offset,callback:function(){!function setFocus(hash){var element=document.getElementById(hash.substring(1));element&&(/^(?:a|select|input|button|textarea)$/i.test(element.tagName)||(element.tabIndex=-1),element.focus())}(e.target.hash)}})}),!1)}()}},"./node_modules/tocbot/src/js/update-toc-scroll.js":module=>{module.exports=function updateTocScroll(options){var toc=options.tocElement||document.querySelector(options.tocSelector);if(toc&&toc.scrollHeight>toc.clientHeight){var activeItem=toc.querySelector("."+options.activeListItemClass);if(activeItem){var cTop=toc.scrollTop,cBottom=cTop+toc.clientHeight,eTop=activeItem.offsetTop,eBottom=eTop+activeItem.clientHeight;eTop<cTop+options.tocScrollOffset?toc.scrollTop-=cTop-eTop+options.tocScrollOffset:eBottom>cBottom-options.tocScrollOffset-30&&(toc.scrollTop+=eBottom-cBottom+options.tocScrollOffset+60)}}}},"./node_modules/@radix-ui/react-slot/dist/index.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}__webpack_require__.d(__webpack_exports__,{DX:()=>$5e63c961fc1ce211$export$8c6ed5c666ac1360});var react=__webpack_require__("./node_modules/react/index.js");function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs){return node=>refs.forEach((ref=>function $6ed0406888f73fc4$var$setRef(ref,value){"function"==typeof ref?ref(value):null!=ref&&(ref.current=value)}(ref,node)))}const $5e63c961fc1ce211$export$8c6ed5c666ac1360=(0,react.forwardRef)(((props,forwardedRef)=>{const{children,...slotProps}=props,childrenArray=react.Children.toArray(children),slottable=childrenArray.find($5e63c961fc1ce211$var$isSlottable);if(slottable){const newElement=slottable.props.children,newChildren=childrenArray.map((child=>child===slottable?react.Children.count(newElement)>1?react.Children.only(null):(0,react.isValidElement)(newElement)?newElement.props.children:null:child));return(0,react.createElement)($5e63c961fc1ce211$var$SlotClone,_extends({},slotProps,{ref:forwardedRef}),(0,react.isValidElement)(newElement)?(0,react.cloneElement)(newElement,void 0,newChildren):null)}return(0,react.createElement)($5e63c961fc1ce211$var$SlotClone,_extends({},slotProps,{ref:forwardedRef}),children)}));$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName="Slot";const $5e63c961fc1ce211$var$SlotClone=(0,react.forwardRef)(((props,forwardedRef)=>{const{children,...slotProps}=props;return(0,react.isValidElement)(children)?(0,react.cloneElement)(children,{...$5e63c961fc1ce211$var$mergeProps(slotProps,children.props),ref:forwardedRef?$6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef,children.ref):children.ref}):react.Children.count(children)>1?react.Children.only(null):null}));$5e63c961fc1ce211$var$SlotClone.displayName="SlotClone";const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45=({children})=>(0,react.createElement)(react.Fragment,null,children);function $5e63c961fc1ce211$var$isSlottable(child){return(0,react.isValidElement)(child)&&child.type===$5e63c961fc1ce211$export$d9f1ccf0bdb05d45}function $5e63c961fc1ce211$var$mergeProps(slotProps,childProps){const overrideProps={...childProps};for(const propName in childProps){const slotPropValue=slotProps[propName],childPropValue=childProps[propName];/^on[A-Z]/.test(propName)?slotPropValue&&childPropValue?overrideProps[propName]=(...args)=>{childPropValue(...args),slotPropValue(...args)}:slotPropValue&&(overrideProps[propName]=slotPropValue):"style"===propName?overrideProps[propName]={...slotPropValue,...childPropValue}:"className"===propName&&(overrideProps[propName]=[slotPropValue,childPropValue].filter(Boolean).join(" "))}return{...slotProps,...overrideProps}}},"./node_modules/@storybook/addon-docs/dist/DocsRenderer-K4EAMTCU.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{DocsRenderer:()=>DocsRenderer});var react=__webpack_require__("./node_modules/react/index.js"),react_dom=__webpack_require__("./node_modules/react-dom/index.js"),chunk_GWAJ4KRU=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@storybook/blocks/dist/chunk-GWAJ4KRU.mjs"),dist=__webpack_require__("./node_modules/@storybook/theming/dist/index.mjs"),chunk_FX52EUNG=__webpack_require__("./node_modules/@storybook/theming/dist/chunk-FX52EUNG.mjs"),components_dist=__webpack_require__("./node_modules/@storybook/components/dist/index.mjs"),chunk_D3EWQ7UP=__webpack_require__("./node_modules/@storybook/components/dist/chunk-D3EWQ7UP.mjs");function extends_extends(){return extends_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},extends_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}function _construct(Parent,args,Class){return _construct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct.bind():function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)},_wrapNativeSuper(Class)}var PolishedError=function(_Error){function PolishedError(code){return function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_Error.call(this,"An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#"+code+" for more information.")||this)}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(PolishedError,_Error),PolishedError}(_wrapNativeSuper(Error));function colorToInt(color){return Math.round(255*color)}function convertToInt(red,green,blue){return colorToInt(red)+","+colorToInt(green)+","+colorToInt(blue)}function hslToRgb(hue,saturation,lightness,convert){if(void 0===convert&&(convert=convertToInt),0===saturation)return convert(lightness,lightness,lightness);var huePrime=(hue%360+360)%360/60,chroma=(1-Math.abs(2*lightness-1))*saturation,secondComponent=chroma*(1-Math.abs(huePrime%2-1)),red=0,green=0,blue=0;huePrime>=0&&huePrime<1?(red=chroma,green=secondComponent):huePrime>=1&&huePrime<2?(red=secondComponent,green=chroma):huePrime>=2&&huePrime<3?(green=chroma,blue=secondComponent):huePrime>=3&&huePrime<4?(green=secondComponent,blue=chroma):huePrime>=4&&huePrime<5?(red=secondComponent,blue=chroma):huePrime>=5&&huePrime<6&&(red=chroma,blue=secondComponent);var lightnessModification=lightness-chroma/2;return convert(red+lightnessModification,green+lightnessModification,blue+lightnessModification)}var namedColorMap={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"639",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"};var hexRegex=/^#[a-fA-F0-9]{6}$/,hexRgbaRegex=/^#[a-fA-F0-9]{8}$/,reducedHexRegex=/^#[a-fA-F0-9]{3}$/,reducedRgbaHexRegex=/^#[a-fA-F0-9]{4}$/,rgbRegex=/^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i,rgbaRegex=/^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i,hslRegex=/^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i,hslaRegex=/^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;function parseToRgb(color){if("string"!=typeof color)throw new PolishedError(3);var normalizedColor=function nameToHex(color){if("string"!=typeof color)return color;var normalizedColorName=color.toLowerCase();return namedColorMap[normalizedColorName]?"#"+namedColorMap[normalizedColorName]:color}(color);if(normalizedColor.match(hexRegex))return{red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16)};if(normalizedColor.match(hexRgbaRegex)){var alpha=parseFloat((parseInt(""+normalizedColor[7]+normalizedColor[8],16)/255).toFixed(2));return{red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16),alpha}}if(normalizedColor.match(reducedHexRegex))return{red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16)};if(normalizedColor.match(reducedRgbaHexRegex)){var _alpha=parseFloat((parseInt(""+normalizedColor[4]+normalizedColor[4],16)/255).toFixed(2));return{red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16),alpha:_alpha}}var rgbMatched=rgbRegex.exec(normalizedColor);if(rgbMatched)return{red:parseInt(""+rgbMatched[1],10),green:parseInt(""+rgbMatched[2],10),blue:parseInt(""+rgbMatched[3],10)};var rgbaMatched=rgbaRegex.exec(normalizedColor.substring(0,50));if(rgbaMatched)return{red:parseInt(""+rgbaMatched[1],10),green:parseInt(""+rgbaMatched[2],10),blue:parseInt(""+rgbaMatched[3],10),alpha:parseFloat(""+rgbaMatched[4])>1?parseFloat(""+rgbaMatched[4])/100:parseFloat(""+rgbaMatched[4])};var hslMatched=hslRegex.exec(normalizedColor);if(hslMatched){var rgbColorString="rgb("+hslToRgb(parseInt(""+hslMatched[1],10),parseInt(""+hslMatched[2],10)/100,parseInt(""+hslMatched[3],10)/100)+")",hslRgbMatched=rgbRegex.exec(rgbColorString);if(!hslRgbMatched)throw new PolishedError(4,normalizedColor,rgbColorString);return{red:parseInt(""+hslRgbMatched[1],10),green:parseInt(""+hslRgbMatched[2],10),blue:parseInt(""+hslRgbMatched[3],10)}}var hslaMatched=hslaRegex.exec(normalizedColor.substring(0,50));if(hslaMatched){var _rgbColorString="rgb("+hslToRgb(parseInt(""+hslaMatched[1],10),parseInt(""+hslaMatched[2],10)/100,parseInt(""+hslaMatched[3],10)/100)+")",_hslRgbMatched=rgbRegex.exec(_rgbColorString);if(!_hslRgbMatched)throw new PolishedError(4,normalizedColor,_rgbColorString);return{red:parseInt(""+_hslRgbMatched[1],10),green:parseInt(""+_hslRgbMatched[2],10),blue:parseInt(""+_hslRgbMatched[3],10),alpha:parseFloat(""+hslaMatched[4])>1?parseFloat(""+hslaMatched[4])/100:parseFloat(""+hslaMatched[4])}}throw new PolishedError(5)}function parseToHsl(color){return function rgbToHsl(color){var hue,red=color.red/255,green=color.green/255,blue=color.blue/255,max=Math.max(red,green,blue),min=Math.min(red,green,blue),lightness=(max+min)/2;if(max===min)return void 0!==color.alpha?{hue:0,saturation:0,lightness,alpha:color.alpha}:{hue:0,saturation:0,lightness};var delta=max-min,saturation=lightness>.5?delta/(2-max-min):delta/(max+min);switch(max){case red:hue=(green-blue)/delta+(green<blue?6:0);break;case green:hue=(blue-red)/delta+2;break;default:hue=(red-green)/delta+4}return hue*=60,void 0!==color.alpha?{hue,saturation,lightness,alpha:color.alpha}:{hue,saturation,lightness}}(parseToRgb(color))}var reduceHexValue$1=function reduceHexValue(value){return 7===value.length&&value[1]===value[2]&&value[3]===value[4]&&value[5]===value[6]?"#"+value[1]+value[3]+value[5]:value};function numberToHex(value){var hex=value.toString(16);return 1===hex.length?"0"+hex:hex}function colorToHex(color){return numberToHex(Math.round(255*color))}function convertToHex(red,green,blue){return reduceHexValue$1("#"+colorToHex(red)+colorToHex(green)+colorToHex(blue))}function hslToHex(hue,saturation,lightness){return hslToRgb(hue,saturation,lightness,convertToHex)}function hsl(value,saturation,lightness){if("number"==typeof value&&"number"==typeof saturation&&"number"==typeof lightness)return hslToHex(value,saturation,lightness);if("object"==typeof value&&void 0===saturation&&void 0===lightness)return hslToHex(value.hue,value.saturation,value.lightness);throw new PolishedError(1)}function hsla(value,saturation,lightness,alpha){if("number"==typeof value&&"number"==typeof saturation&&"number"==typeof lightness&&"number"==typeof alpha)return alpha>=1?hslToHex(value,saturation,lightness):"rgba("+hslToRgb(value,saturation,lightness)+","+alpha+")";if("object"==typeof value&&void 0===saturation&&void 0===lightness&&void 0===alpha)return value.alpha>=1?hslToHex(value.hue,value.saturation,value.lightness):"rgba("+hslToRgb(value.hue,value.saturation,value.lightness)+","+value.alpha+")";throw new PolishedError(2)}function rgb(value,green,blue){if("number"==typeof value&&"number"==typeof green&&"number"==typeof blue)return reduceHexValue$1("#"+numberToHex(value)+numberToHex(green)+numberToHex(blue));if("object"==typeof value&&void 0===green&&void 0===blue)return reduceHexValue$1("#"+numberToHex(value.red)+numberToHex(value.green)+numberToHex(value.blue));throw new PolishedError(6)}function rgba(firstValue,secondValue,thirdValue,fourthValue){if("string"==typeof firstValue&&"number"==typeof secondValue){var rgbValue=parseToRgb(firstValue);return"rgba("+rgbValue.red+","+rgbValue.green+","+rgbValue.blue+","+secondValue+")"}if("number"==typeof firstValue&&"number"==typeof secondValue&&"number"==typeof thirdValue&&"number"==typeof fourthValue)return fourthValue>=1?rgb(firstValue,secondValue,thirdValue):"rgba("+firstValue+","+secondValue+","+thirdValue+","+fourthValue+")";if("object"==typeof firstValue&&void 0===secondValue&&void 0===thirdValue&&void 0===fourthValue)return firstValue.alpha>=1?rgb(firstValue.red,firstValue.green,firstValue.blue):"rgba("+firstValue.red+","+firstValue.green+","+firstValue.blue+","+firstValue.alpha+")";throw new PolishedError(7)}var isRgb=function isRgb(color){return"number"==typeof color.red&&"number"==typeof color.green&&"number"==typeof color.blue&&("number"!=typeof color.alpha||void 0===color.alpha)},isRgba=function isRgba(color){return"number"==typeof color.red&&"number"==typeof color.green&&"number"==typeof color.blue&&"number"==typeof color.alpha},isHsl=function isHsl(color){return"number"==typeof color.hue&&"number"==typeof color.saturation&&"number"==typeof color.lightness&&("number"!=typeof color.alpha||void 0===color.alpha)},isHsla=function isHsla(color){return"number"==typeof color.hue&&"number"==typeof color.saturation&&"number"==typeof color.lightness&&"number"==typeof color.alpha};function toColorString(color){if("object"!=typeof color)throw new PolishedError(8);if(isRgba(color))return rgba(color);if(isRgb(color))return rgb(color);if(isHsla(color))return hsla(color);if(isHsl(color))return hsl(color);throw new PolishedError(8)}function curried(f,length,acc){return function fn(){var combined=acc.concat(Array.prototype.slice.call(arguments));return combined.length>=length?f.apply(this,combined):curried(f,length,combined)}}function curry(f){return curried(f,f.length,[])}function guard(lowerBoundary,upperBoundary,value){return Math.max(lowerBoundary,Math.min(upperBoundary,value))}function darken(amount,color){if("transparent"===color)return color;var hslColor=parseToHsl(color);return toColorString(extends_extends({},hslColor,{lightness:guard(0,1,hslColor.lightness-parseFloat(amount))}))}var curriedDarken$1=curry(darken);function lighten(amount,color){if("transparent"===color)return color;var hslColor=parseToHsl(color);return toColorString(extends_extends({},hslColor,{lightness:guard(0,1,hslColor.lightness+parseFloat(amount))}))}var curriedLighten$1=curry(lighten);function opacify(amount,color){if("transparent"===color)return color;var parsedColor=parseToRgb(color);return rgba(extends_extends({},parsedColor,{alpha:guard(0,1,(100*("number"==typeof parsedColor.alpha?parsedColor.alpha:1)+100*parseFloat(amount))/100)}))}var curriedOpacify$1=curry(opacify);function transparentize(amount,color){if("transparent"===color)return color;var parsedColor=parseToRgb(color);return rgba(extends_extends({},parsedColor,{alpha:guard(0,1,+(100*("number"==typeof parsedColor.alpha?parsedColor.alpha:1)-100*parseFloat(amount)).toFixed(2)/100)}))}var curriedTransparentize$1=curry(transparentize);var global_dist=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),icons_dist=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@storybook/icons/dist/index.mjs"),pickBy=__webpack_require__("./node_modules/lodash/pickBy.js"),csf_dist=__webpack_require__("./node_modules/@storybook/csf/dist/index.mjs"),client_logger_dist=__webpack_require__("./node_modules/@storybook/client-logger/dist/index.mjs");function n(){return n=Object.assign?Object.assign.bind():function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},n.apply(this,arguments)}const e=["children","options"],r=["allowFullScreen","allowTransparency","autoComplete","autoFocus","autoPlay","cellPadding","cellSpacing","charSet","className","classId","colSpan","contentEditable","contextMenu","crossOrigin","encType","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","hrefLang","inputMode","keyParams","keyType","marginHeight","marginWidth","maxLength","mediaGroup","minLength","noValidate","radioGroup","readOnly","rowSpan","spellCheck","srcDoc","srcLang","srcSet","tabIndex","useMap"].reduce(((t,n)=>(t[n.toLowerCase()]=n,t)),{for:"htmlFor"}),o={amp:"&",apos:"'",gt:">",lt:"<",nbsp:" ",quot:"“"},c=["style","script"],a=/([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi,_=/mailto:/i,u=/\n{2,}$/,i=/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/,s=/^ *> ?/gm,l=/^ {2,}\n/,f=/^(?:( *[-*_])){3,} *(?:\n *)+\n/,d=/^\s*(`{3,}|~{3,}) *(\S+)?([^\n]*?)?\n([\s\S]+?)\s*\1 *(?:\n *)*\n?/,p=/^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/,m=/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,g=/^(?:\n *)*\n/,y=/\r\n?/g,h=/^\[\^([^\]]+)](:.*)\n/,k=/^\[\^([^\]]+)]/,x=/\f/g,b=/^\s*?\[(x|\s)\]/,$=/^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,v=/^ *(#{1,6}) +([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,S=/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/,z=/^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?([^>]*)\/{0}>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1)[\s\S])*?)<\/\1>\n*/i,w=/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,A=/^<!--[\s\S]*?(?:-->)/,E=/^(data|aria|x)-[a-z_][a-z\d_.-]*$/,L=/^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i,M=/^\{.*\}$/,O=/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,I=/^<([^ >]+@[^ >]+)>/,j=/^<([^ >]+:\/[^ >]+)>/,B=/-([a-z])?/gi,R=/^(.*\|?.*)\n *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*)\n?/,T=/^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/,C=/^!\[([^\]]*)\] ?\[([^\]]*)\]/,D=/^\[([^\]]*)\] ?\[([^\]]*)\]/,F=/(\[|\])/g,N=/(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/,P=/\t/g,Z=/^ *\| */,G=/(^ *\||\| *$)/g,H=/ *$/,q=/^ *:-+: *$/,U=/^ *:-+ *$/,V=/^ *-+: *$/,W=/^([*_])\1((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1\1(?!\1)/,Q=/^([*_])((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1(?!\1|\w)/,X=/^==((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/,J=/^~~((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,K=/^\\([^0-9A-Za-z\s])/,Y=/^[\s\S]+?(?=[^0-9A-Z\s\u00c0-\uffff&#;.()'"]|\d+\.|\n\n| {2,}\n|\w+:\S|$)/i,tt=/^\n+/,nt=/^([ \t]*)/,et=/\\([^\\])/g,rt=/ *\n+$/,ot=/(?:^|\n)( *)$/,ct="(?:\\d+\\.)",at="(?:[*+-])";function _t(t){return"( *)("+(1===t?ct:at)+") +"}const ut=_t(1),it=_t(2);function st(t){return new RegExp("^"+(1===t?ut:it))}const lt=st(1),ft=st(2);function dt(t){return new RegExp("^"+(1===t?ut:it)+"[^\\n]*(?:\\n(?!\\1"+(1===t?ct:at)+" )[^\\n]*)*(\\n|$)","gm")}const pt=dt(1),mt=dt(2);function gt(t){const n=1===t?ct:at;return new RegExp("^( *)("+n+") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1"+n+" (?!"+n+" ))\\n*|\\s*\\n*$)")}const yt=gt(1),ht=gt(2);function kt(t,n){const e=1===n,r=e?yt:ht,o=e?pt:mt,c=e?lt:ft;return{t(t,n,e){const o=ot.exec(e);return o&&(n.o||!n._&&!n.u)?r.exec(t=o[1]+t):null},i:Ht.HIGH,l(t,n,r){const a=e?+t[2]:void 0,_=t[0].replace(u,"\n").match(o);let i=!1;return{p:_.map((function(t,e){const o=c.exec(t)[0].length,a=new RegExp("^ {1,"+o+"}","gm"),u=t.replace(a,"").replace(c,""),s=e===_.length-1,l=-1!==u.indexOf("\n\n")||s&&i;i=l;const f=r._,d=r.o;let p;r.o=!0,l?(r._=!1,p=u.replace(rt,"\n\n")):(r._=!0,p=u.replace(rt,""));const m=n(p,r);return r._=f,r.o=d,m})),m:e,g:a}},h:(n,e,r)=>t(n.m?"ol":"ul",{key:r.k,start:n.g},n.p.map((function(n,o){return t("li",{key:o},e(n,r))})))}}const xt=/^\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/,bt=/^!\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/,$t=[i,d,p,$,S,v,A,R,pt,yt,mt,ht],vt=[...$t,/^[^\n]+(?:  \n|\n{2,})/,z,L];function St(t){return t.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g,"a").replace(/[çÇ]/g,"c").replace(/[ðÐ]/g,"d").replace(/[ÈÉÊËéèêë]/g,"e").replace(/[ÏïÎîÍíÌì]/g,"i").replace(/[Ññ]/g,"n").replace(/[øØœŒÕõÔôÓóÒò]/g,"o").replace(/[ÜüÛûÚúÙù]/g,"u").replace(/[ŸÿÝý]/g,"y").replace(/[^a-z0-9- ]/gi,"").replace(/ /gi,"-").toLowerCase()}function zt(t){return V.test(t)?"right":q.test(t)?"center":U.test(t)?"left":null}function wt(t,n,e){const r=e.$;e.$=!0;const o=n(t.trim(),e);e.$=r;let c=[[]];return o.forEach((function(t,n){"tableSeparator"===t.type?0!==n&&n!==o.length-1&&c.push([]):("text"!==t.type||null!=o[n+1]&&"tableSeparator"!==o[n+1].type||(t.v=t.v.replace(H,"")),c[c.length-1].push(t))})),c}function At(t,n,e){e._=!0;const r=wt(t[1],n,e),o=t[2].replace(G,"").split("|").map(zt),c=function(t,n,e){return t.trim().split("\n").map((function(t){return wt(t,n,e)}))}(t[3],n,e);return e._=!1,{S:o,A:c,L:r,type:"table"}}function Et(t,n){return null==t.S[n]?{}:{textAlign:t.S[n]}}function Lt(t){return function(n,e){return e._?t.exec(n):null}}function Mt(t){return function(n,e){return e._||e.u?t.exec(n):null}}function Ot(t){return function(n,e){return e._||e.u?null:t.exec(n)}}function It(t){return function(n){return t.exec(n)}}function jt(t,n,e){if(n._||n.u)return null;if(e&&!e.endsWith("\n"))return null;let r="";t.split("\n").every((t=>!$t.some((n=>n.test(t)))&&(r+=t+"\n",t.trim())));const o=r.trimEnd();return""==o?null:[r,o]}function Bt(t){try{if(decodeURIComponent(t).replace(/[^A-Za-z0-9/:]/g,"").match(/^\s*(javascript|vbscript|data(?!:image)):/i))return}catch(t){return null}return t}function Rt(t){return t.replace(et,"$1")}function Tt(t,n,e){const r=e._||!1,o=e.u||!1;e._=!0,e.u=!0;const c=t(n,e);return e._=r,e.u=o,c}function Ct(t,n,e){const r=e._||!1,o=e.u||!1;e._=!1,e.u=!0;const c=t(n,e);return e._=r,e.u=o,c}function Dt(t,n,e){return e._=!1,t(n,e)}const Ft=(t,n,e)=>({v:Tt(n,t[1],e)});function Nt(){return{}}function Pt(){return null}function Zt(...t){return t.filter(Boolean).join(" ")}function Gt(t,n,e){let r=t;const o=n.split(".");for(;o.length&&(r=r[o[0]],void 0!==r);)o.shift();return r||e}var Ht,t;function qt(e,u={}){u.overrides=u.overrides||{},u.slugify=u.slugify||St,u.namedCodesToUnicode=u.namedCodesToUnicode?n({},o,u.namedCodesToUnicode):o;const G=u.createElement||react.createElement;function H(t,e,...r){const o=Gt(u.overrides,`${t}.props`,{});return G(function(t,n){const e=Gt(n,t);return e?"function"==typeof e||"object"==typeof e&&"render"in e?e:Gt(n,`${t}.component`,t):t}(t,u.overrides),n({},e,o,{className:Zt(null==e?void 0:e.className,o.className)||void 0}),...r)}function q(n){let e=!1;u.forceInline?e=!0:u.forceBlock||(e=!1===N.test(n));const r=ct(ot(e?n:`${n.trimEnd().replace(tt,"")}\n\n`,{_:e}));for(;"string"==typeof r[r.length-1]&&!r[r.length-1].trim();)r.pop();if(null===u.wrapper)return r;const o=u.wrapper||(e?"span":"div");let c;if(r.length>1||u.forceWrapper)c=r;else{if(1===r.length)return c=r[0],"string"==typeof c?H("span",{key:"outer"},c):c;c=null}return react.createElement(o,{key:"outer"},c)}function U(n){const e=n.match(a);return e?e.reduce((function(n,e,o){const c=e.indexOf("=");if(-1!==c){const a=(t=e.slice(0,c),-1!==t.indexOf("-")&&null===t.match(E)&&(t=t.replace(B,(function(t,n){return n.toUpperCase()}))),t).trim(),_=function(t){const n=t[0];return('"'===n||"'"===n)&&t.length>=2&&t[t.length-1]===n?t.slice(1,-1):t}(e.slice(c+1).trim()),u=r[a]||a,i=n[u]=function(t,n){return"style"===t?n.split(/;\s?/).reduce((function(t,n){const e=n.slice(0,n.indexOf(":"));return t[e.replace(/(-[a-z])/g,(t=>t[1].toUpperCase()))]=n.slice(e.length+1).trim(),t}),{}):"href"===t?Bt(n):(n.match(M)&&(n=n.slice(1,n.length-1)),"true"===n||"false"!==n&&n)}(a,_);"string"==typeof i&&(z.test(i)||L.test(i))&&(n[u]=react.cloneElement(q(i.trim()),{key:o}))}else"style"!==e&&(n[r[e]||e]=!0);var t;return n}),{}):null}const V=[],et={},rt={blockQuote:{t:Ot(i),i:Ht.HIGH,l:(t,n,e)=>({v:n(t[0].replace(s,""),e)}),h:(t,n,e)=>H("blockquote",{key:e.k},n(t.v,e))},breakLine:{t:It(l),i:Ht.HIGH,l:Nt,h:(t,n,e)=>H("br",{key:e.k})},breakThematic:{t:Ot(f),i:Ht.HIGH,l:Nt,h:(t,n,e)=>H("hr",{key:e.k})},codeBlock:{t:Ot(p),i:Ht.MAX,l:t=>({v:t[0].replace(/^ {4}/gm,"").replace(/\n+$/,""),M:void 0}),h:(t,e,r)=>H("pre",{key:r.k},H("code",n({},t.O,{className:t.M?`lang-${t.M}`:""}),t.v))},codeFenced:{t:Ot(d),i:Ht.MAX,l:t=>({O:U(t[3]||""),v:t[4],M:t[2]||void 0,type:"codeBlock"})},codeInline:{t:Mt(m),i:Ht.LOW,l:t=>({v:t[2]}),h:(t,n,e)=>H("code",{key:e.k},t.v)},footnote:{t:Ot(h),i:Ht.MAX,l:t=>(V.push({I:t[2],j:t[1]}),{}),h:Pt},footnoteReference:{t:Lt(k),i:Ht.HIGH,l:t=>({v:t[1],B:`#${u.slugify(t[1])}`}),h:(t,n,e)=>H("a",{key:e.k,href:Bt(t.B)},H("sup",{key:e.k},t.v))},gfmTask:{t:Lt(b),i:Ht.HIGH,l:t=>({R:"x"===t[1].toLowerCase()}),h:(t,n,e)=>H("input",{checked:t.R,key:e.k,readOnly:!0,type:"checkbox"})},heading:{t:Ot(u.enforceAtxHeadings?v:$),i:Ht.HIGH,l:(t,n,e)=>({v:Tt(n,t[2],e),T:u.slugify(t[2]),C:t[1].length}),h:(t,n,e)=>H(`h${t.C}`,{id:t.T,key:e.k},n(t.v,e))},headingSetext:{t:Ot(S),i:Ht.MAX,l:(t,n,e)=>({v:Tt(n,t[1],e),C:"="===t[2]?1:2,type:"heading"})},htmlComment:{t:It(A),i:Ht.HIGH,l:()=>({}),h:Pt},image:{t:Mt(bt),i:Ht.HIGH,l:t=>({D:t[1],B:Rt(t[2]),F:t[3]}),h:(t,n,e)=>H("img",{key:e.k,alt:t.D||void 0,title:t.F||void 0,src:Bt(t.B)})},link:{t:Lt(xt),i:Ht.LOW,l:(t,n,e)=>({v:Ct(n,t[1],e),B:Rt(t[2]),F:t[3]}),h:(t,n,e)=>H("a",{key:e.k,href:Bt(t.B),title:t.F},n(t.v,e))},linkAngleBraceStyleDetector:{t:Lt(j),i:Ht.MAX,l:t=>({v:[{v:t[1],type:"text"}],B:t[1],type:"link"})},linkBareUrlDetector:{t:(t,n)=>n.N?null:Lt(O)(t,n),i:Ht.MAX,l:t=>({v:[{v:t[1],type:"text"}],B:t[1],F:void 0,type:"link"})},linkMailtoDetector:{t:Lt(I),i:Ht.MAX,l(t){let n=t[1],e=t[1];return _.test(e)||(e="mailto:"+e),{v:[{v:n.replace("mailto:",""),type:"text"}],B:e,type:"link"}}},orderedList:kt(H,1),unorderedList:kt(H,2),newlineCoalescer:{t:Ot(g),i:Ht.LOW,l:Nt,h:()=>"\n"},paragraph:{t:jt,i:Ht.LOW,l:Ft,h:(t,n,e)=>H("p",{key:e.k},n(t.v,e))},ref:{t:Lt(T),i:Ht.MAX,l:t=>(et[t[1]]={B:t[2],F:t[4]},{}),h:Pt},refImage:{t:Mt(C),i:Ht.MAX,l:t=>({D:t[1]||void 0,P:t[2]}),h:(t,n,e)=>H("img",{key:e.k,alt:t.D,src:Bt(et[t.P].B),title:et[t.P].F})},refLink:{t:Lt(D),i:Ht.MAX,l:(t,n,e)=>({v:n(t[1],e),Z:n(t[0].replace(F,"\\$1"),e),P:t[2]}),h:(t,n,e)=>et[t.P]?H("a",{key:e.k,href:Bt(et[t.P].B),title:et[t.P].F},n(t.v,e)):H("span",{key:e.k},n(t.Z,e))},table:{t:Ot(R),i:Ht.HIGH,l:At,h:(t,n,e)=>H("table",{key:e.k},H("thead",null,H("tr",null,t.L.map((function(r,o){return H("th",{key:o,style:Et(t,o)},n(r,e))})))),H("tbody",null,t.A.map((function(r,o){return H("tr",{key:o},r.map((function(r,o){return H("td",{key:o,style:Et(t,o)},n(r,e))})))}))))},tableSeparator:{t:function(t,n){return n.$?(n._=!0,Z.exec(t)):null},i:Ht.HIGH,l:function(){return{type:"tableSeparator"}},h:()=>" | "},text:{t:It(Y),i:Ht.MIN,l:t=>({v:t[0].replace(w,((t,n)=>u.namedCodesToUnicode[n]?u.namedCodesToUnicode[n]:t))}),h:t=>t.v},textBolded:{t:Mt(W),i:Ht.MED,l:(t,n,e)=>({v:n(t[2],e)}),h:(t,n,e)=>H("strong",{key:e.k},n(t.v,e))},textEmphasized:{t:Mt(Q),i:Ht.LOW,l:(t,n,e)=>({v:n(t[2],e)}),h:(t,n,e)=>H("em",{key:e.k},n(t.v,e))},textEscaped:{t:Mt(K),i:Ht.HIGH,l:t=>({v:t[1],type:"text"})},textMarked:{t:Mt(X),i:Ht.LOW,l:Ft,h:(t,n,e)=>H("mark",{key:e.k},n(t.v,e))},textStrikethroughed:{t:Mt(J),i:Ht.LOW,l:Ft,h:(t,n,e)=>H("del",{key:e.k},n(t.v,e))}};!0!==u.disableParsingRawHTML&&(rt.htmlBlock={t:It(z),i:Ht.HIGH,l(t,n,e){const[,r]=t[3].match(nt),o=new RegExp(`^${r}`,"gm"),a=t[3].replace(o,""),_=(u=a,vt.some((t=>t.test(u)))?Dt:Tt);var u;const i=t[1].toLowerCase(),s=-1!==c.indexOf(i);e.N=e.N||"a"===i;const l=s?t[3]:_(n,a,e);return e.N=!1,{O:U(t[2]),v:l,G:s,H:s?i:t[1]}},h:(t,e,r)=>H(t.H,n({key:r.k},t.O),t.G?t.v:e(t.v,r))},rt.htmlSelfClosing={t:It(L),i:Ht.HIGH,l:t=>({O:U(t[2]||""),H:t[1]}),h:(t,e,r)=>H(t.H,n({},t.O,{key:r.k}))});const ot=function(t){let n=Object.keys(t);function e(r,o){let c=[],a="";for(;r;){let _=0;for(;_<n.length;){const u=n[_],i=t[u],s=i.t(r,o,a);if(s){const t=s[0];r=r.substring(t.length);const n=i.l(s,e,o);null==n.type&&(n.type=u),c.push(n),a=t;break}_++}}return c}return n.sort((function(n,e){let r=t[n].i,o=t[e].i;return r!==o?r-o:n<e?-1:1})),function(t,n){return e(function(t){return t.replace(y,"\n").replace(x,"").replace(P,"    ")}(t),n)}}(rt),ct=(t=rt,at=function(n,e,r){return t[n.type].h(n,e,r)},function t(n,e={}){if(Array.isArray(n)){const r=e.k,o=[];let c=!1;for(let r=0;r<n.length;r++){e.k=r;const a=t(n[r],e),_="string"==typeof a;_&&c?o[o.length-1]+=a:null!==a&&o.push(a),c=_}return e.k=r,o}return at(n,t,e)});var t,at;const _t=q(e);return V.length?H("div",null,_t,H("footer",{key:"footer"},V.map((function(t){return H("div",{id:u.slugify(t.j),key:t.j},t.j,ct(ot(t.I,{_:!0})))})))):_t}(t=Ht||(Ht={}))[t.MAX=0]="MAX",t[t.HIGH=1]="HIGH",t[t.MED=2]="MED",t[t.LOW=3]="LOW",t[t.MIN=4]="MIN";const index_modern=n=>{let{children:r,options:o}=n,c=function(t,n){if(null==t)return{};var e,r,o={},c=Object.keys(t);for(r=0;r<c.length;r++)n.indexOf(e=c[r])>=0||(o[e]=t[e]);return o}(n,e);return react.cloneElement(qt(r,o),c)};var memoizerific=__webpack_require__("./node_modules/memoizerific/memoizerific.js"),uniq=__webpack_require__("./node_modules/lodash/uniq.js"),cloneDeep=__webpack_require__("./node_modules/lodash/cloneDeep.js"),preview_api_dist=__webpack_require__("./node_modules/@storybook/preview-api/dist/index.mjs"),lodash=__webpack_require__("./node_modules/lodash/lodash.js"),docs_tools_dist=__webpack_require__("./node_modules/@storybook/docs-tools/dist/index.mjs"),telejson_dist=__webpack_require__("./node_modules/telejson/dist/index.mjs"),core_events_dist=__webpack_require__("./node_modules/@storybook/core-events/dist/index.mjs"),esm=__webpack_require__("./node_modules/ts-dedent/esm/index.js"),js=__webpack_require__("./node_modules/tocbot/src/js/index.js"),channels_dist=__webpack_require__("./node_modules/@storybook/channels/dist/index.mjs"),Wrapper=dist.I4.div(components_dist.YV,(({theme})=>({backgroundColor:"light"===theme.base?"rgba(0,0,0,.01)":"rgba(255,255,255,.01)",borderRadius:theme.appBorderRadius,border:`1px dashed ${theme.appBorderColor}`,display:"flex",alignItems:"center",justifyContent:"center",padding:20,margin:"25px 0 40px",color:curriedTransparentize$1(.3,theme.color.defaultText),fontSize:theme.typography.size.s2}))),EmptyBlock=props=>react.createElement(Wrapper,{...props,className:"docblock-emptyblock sb-unstyled"}),StyledSyntaxHighlighter=(0,dist.I4)(components_dist.bF)((({theme})=>({fontSize:theme.typography.size.s2-1+"px",lineHeight:"19px",margin:"25px 0 40px",borderRadius:theme.appBorderRadius,boxShadow:"light"===theme.base?"rgba(0, 0, 0, 0.10) 0 1px 3px 0":"rgba(0, 0, 0, 0.20) 0 2px 5px 0","pre.prismjs":{padding:20,background:"inherit"}}))),SourceSkeletonWrapper=dist.I4.div((({theme})=>({background:theme.background.content,borderRadius:theme.appBorderRadius,border:`1px solid ${theme.appBorderColor}`,boxShadow:"light"===theme.base?"rgba(0, 0, 0, 0.10) 0 1px 3px 0":"rgba(0, 0, 0, 0.20) 0 2px 5px 0",margin:"25px 0 40px",padding:"20px 20px 20px 22px"}))),SourceSkeletonPlaceholder=dist.I4.div((({theme})=>({animation:`${theme.animation.glow} 1.5s ease-in-out infinite`,background:theme.appBorderColor,height:17,marginTop:1,width:"60%",[`&:first-child${dist.v_}`]:{margin:0}}))),SourceSkeleton=()=>react.createElement(SourceSkeletonWrapper,null,react.createElement(SourceSkeletonPlaceholder,null),react.createElement(SourceSkeletonPlaceholder,{style:{width:"80%"}}),react.createElement(SourceSkeletonPlaceholder,{style:{width:"30%"}}),react.createElement(SourceSkeletonPlaceholder,{style:{width:"80%"}})),Source=({isLoading,error,language,code,dark,format:format2,...rest})=>{let{typography}=(0,dist.DP)();if(isLoading)return react.createElement(SourceSkeleton,null);if(error)return react.createElement(EmptyBlock,null,error);let syntaxHighlighter=react.createElement(StyledSyntaxHighlighter,{bordered:!0,copyable:!0,format:format2,language,className:"docblock-source sb-unstyled",...rest},code);if(typeof dark>"u")return syntaxHighlighter;let overrideTheme=dark?chunk_FX52EUNG.Zj.dark:chunk_FX52EUNG.Zj.light;return react.createElement(dist.NP,{theme:(0,dist.C6)({...overrideTheme,fontCode:typography.fonts.mono,fontBase:typography.fonts.base})},syntaxHighlighter)};Source.defaultProps={format:!1};var toGlobalSelector=element=>`& :where(${element}:not(.sb-anchor, .sb-unstyled, .sb-unstyled ${element}))`,Title=dist.I4.h1(components_dist.YV,(({theme})=>({color:theme.color.defaultText,fontSize:theme.typography.size.m3,fontWeight:theme.typography.weight.bold,lineHeight:"32px","@media (min-width: 600px)":{fontSize:theme.typography.size.l1,lineHeight:"36px",marginBottom:"16px"}}))),Subtitle=dist.I4.h2(components_dist.YV,(({theme})=>({fontWeight:theme.typography.weight.regular,fontSize:theme.typography.size.s3,lineHeight:"20px",borderBottom:"none",marginBottom:15,"@media (min-width: 600px)":{fontSize:theme.typography.size.m1,lineHeight:"28px",marginBottom:24},color:curriedTransparentize$1(.25,theme.color.defaultText)}))),DocsContent=dist.I4.div((({theme})=>{let reset={fontFamily:theme.typography.fonts.base,fontSize:theme.typography.size.s3,margin:0,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",WebkitOverflowScrolling:"touch"},headers={margin:"20px 0 8px",padding:0,cursor:"text",position:"relative",color:theme.color.defaultText,"&:first-of-type":{marginTop:0,paddingTop:0},"&:hover a.anchor":{textDecoration:"none"},"& code":{fontSize:"inherit"}},code={lineHeight:1,margin:"0 2px",padding:"3px 5px",whiteSpace:"nowrap",borderRadius:3,fontSize:theme.typography.size.s2-1,border:"light"===theme.base?`1px solid ${theme.color.mediumlight}`:`1px solid ${theme.color.darker}`,color:"light"===theme.base?curriedTransparentize$1(.1,theme.color.defaultText):curriedTransparentize$1(.3,theme.color.defaultText),backgroundColor:"light"===theme.base?theme.color.lighter:theme.color.border};return{maxWidth:1e3,width:"100%",[toGlobalSelector("a")]:{...reset,fontSize:"inherit",lineHeight:"24px",color:theme.color.secondary,textDecoration:"none","&.absent":{color:"#cc0000"},"&.anchor":{display:"block",paddingLeft:30,marginLeft:-30,cursor:"pointer",position:"absolute",top:0,left:0,bottom:0}},[toGlobalSelector("blockquote")]:{...reset,margin:"16px 0",borderLeft:`4px solid ${theme.color.medium}`,padding:"0 15px",color:theme.color.dark,"& > :first-of-type":{marginTop:0},"& > :last-child":{marginBottom:0}},[toGlobalSelector("div")]:reset,[toGlobalSelector("dl")]:{...reset,margin:"16px 0",padding:0,"& dt":{fontSize:"14px",fontWeight:"bold",fontStyle:"italic",padding:0,margin:"16px 0 4px"},"& dt:first-of-type":{padding:0},"& dt > :first-of-type":{marginTop:0},"& dt > :last-child":{marginBottom:0},"& dd":{margin:"0 0 16px",padding:"0 15px"},"& dd > :first-of-type":{marginTop:0},"& dd > :last-child":{marginBottom:0}},[toGlobalSelector("h1")]:{...reset,...headers,fontSize:`${theme.typography.size.l1}px`,fontWeight:theme.typography.weight.bold},[toGlobalSelector("h2")]:{...reset,...headers,fontSize:`${theme.typography.size.m2}px`,paddingBottom:4,borderBottom:`1px solid ${theme.appBorderColor}`},[toGlobalSelector("h3")]:{...reset,...headers,fontSize:`${theme.typography.size.m1}px`,fontWeight:theme.typography.weight.bold},[toGlobalSelector("h4")]:{...reset,...headers,fontSize:`${theme.typography.size.s3}px`},[toGlobalSelector("h5")]:{...reset,...headers,fontSize:`${theme.typography.size.s2}px`},[toGlobalSelector("h6")]:{...reset,...headers,fontSize:`${theme.typography.size.s2}px`,color:theme.color.dark},[toGlobalSelector("hr")]:{border:"0 none",borderTop:`1px solid ${theme.appBorderColor}`,height:4,padding:0},[toGlobalSelector("img")]:{maxWidth:"100%"},[toGlobalSelector("li")]:{...reset,fontSize:theme.typography.size.s2,color:theme.color.defaultText,lineHeight:"24px","& + li":{marginTop:".25em"},"& ul, & ol":{marginTop:".25em",marginBottom:0},"& code":code},[toGlobalSelector("ol")]:{...reset,margin:"16px 0",paddingLeft:30,"& :first-of-type":{marginTop:0},"& :last-child":{marginBottom:0}},[toGlobalSelector("p")]:{...reset,margin:"16px 0",fontSize:theme.typography.size.s2,lineHeight:"24px",color:theme.color.defaultText,"& code":code},[toGlobalSelector("pre")]:{...reset,fontFamily:theme.typography.fonts.mono,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",lineHeight:"18px",padding:"11px 1rem",whiteSpace:"pre-wrap",color:"inherit",borderRadius:3,margin:"1rem 0","&:not(.prismjs)":{background:"transparent",border:"none",borderRadius:0,padding:0,margin:0},"& pre, &.prismjs":{padding:15,margin:0,whiteSpace:"pre-wrap",color:"inherit",fontSize:"13px",lineHeight:"19px",code:{color:"inherit",fontSize:"inherit"}},"& code":{whiteSpace:"pre"},"& code, & tt":{border:"none"}},[toGlobalSelector("span")]:{...reset,"&.frame":{display:"block",overflow:"hidden","& > span":{border:`1px solid ${theme.color.medium}`,display:"block",float:"left",overflow:"hidden",margin:"13px 0 0",padding:7,width:"auto"},"& span img":{display:"block",float:"left"},"& span span":{clear:"both",color:theme.color.darkest,display:"block",padding:"5px 0 0"}},"&.align-center":{display:"block",overflow:"hidden",clear:"both","& > span":{display:"block",overflow:"hidden",margin:"13px auto 0",textAlign:"center"},"& span img":{margin:"0 auto",textAlign:"center"}},"&.align-right":{display:"block",overflow:"hidden",clear:"both","& > span":{display:"block",overflow:"hidden",margin:"13px 0 0",textAlign:"right"},"& span img":{margin:0,textAlign:"right"}},"&.float-left":{display:"block",marginRight:13,overflow:"hidden",float:"left","& span":{margin:"13px 0 0"}},"&.float-right":{display:"block",marginLeft:13,overflow:"hidden",float:"right","& > span":{display:"block",overflow:"hidden",margin:"13px auto 0",textAlign:"right"}}},[toGlobalSelector("table")]:{...reset,margin:"16px 0",fontSize:theme.typography.size.s2,lineHeight:"24px",padding:0,borderCollapse:"collapse","& tr":{borderTop:`1px solid ${theme.appBorderColor}`,backgroundColor:theme.appContentBg,margin:0,padding:0},"& tr:nth-of-type(2n)":{backgroundColor:"dark"===theme.base?theme.color.darker:theme.color.lighter},"& tr th":{fontWeight:"bold",color:theme.color.defaultText,border:`1px solid ${theme.appBorderColor}`,margin:0,padding:"6px 13px"},"& tr td":{border:`1px solid ${theme.appBorderColor}`,color:theme.color.defaultText,margin:0,padding:"6px 13px"},"& tr th :first-of-type, & tr td :first-of-type":{marginTop:0},"& tr th :last-child, & tr td :last-child":{marginBottom:0}},[toGlobalSelector("ul")]:{...reset,margin:"16px 0",paddingLeft:30,"& :first-of-type":{marginTop:0},"& :last-child":{marginBottom:0},listStyle:"disc"}}})),DocsWrapper=dist.I4.div((({theme})=>({background:theme.background.content,display:"flex",justifyContent:"center",padding:"4rem 20px",minHeight:"100vh",boxSizing:"border-box",gap:"3rem","@media (min-width: 600px)":{}}))),DocsPageWrapper=({children,toc})=>react.createElement(DocsWrapper,{className:"sbdocs sbdocs-wrapper"},react.createElement(DocsContent,{className:"sbdocs sbdocs-content"},children),toc),getBlockBackgroundStyle=theme=>({borderRadius:theme.appBorderRadius,background:theme.background.content,boxShadow:"light"===theme.base?"rgba(0, 0, 0, 0.10) 0 1px 3px 0":"rgba(0, 0, 0, 0.20) 0 2px 5px 0",border:`1px solid ${theme.appBorderColor}`}),Bar=(0,dist.I4)(components_dist.px)({position:"absolute",left:0,right:0,top:0,transition:"transform .2s linear"}),Wrapper2=dist.I4.div({display:"flex",alignItems:"center",gap:4}),IconPlaceholder=dist.I4.div((({theme})=>({width:14,height:14,borderRadius:2,margin:"0 7px",backgroundColor:theme.appBorderColor,animation:`${theme.animation.glow} 1.5s ease-in-out infinite`}))),ZoomContext=(0,react.createContext)({scale:1}),{window:globalWindow}=global_dist.global,IFrame=class extends react.Component{constructor(){super(...arguments),this.iframe=null}componentDidMount(){let{id}=this.props;this.iframe=globalWindow.document.getElementById(id)}shouldComponentUpdate(nextProps){let{scale}=nextProps;return scale!==this.props.scale&&this.setIframeBodyStyle({width:100*scale+"%",height:100*scale+"%",transform:`scale(${1/scale})`,transformOrigin:"top left"}),!1}setIframeBodyStyle(style){return Object.assign(this.iframe.contentDocument.body.style,style)}render(){let{id,title,src,allowFullScreen,scale,...rest}=this.props;return react.createElement("iframe",{id,title,src,...allowFullScreen?{allow:"fullscreen"}:{},loading:"lazy",...rest})}},{PREVIEW_URL}=global_dist.global,BASE_URL=PREVIEW_URL||"iframe.html",storyBlockIdFromId=({story,primary})=>`story--${story.id}${primary?"--primary":""}`,InlineStory=props=>{let storyRef=(0,react.useRef)(),[showLoader,setShowLoader]=(0,react.useState)(!0),[error,setError]=(0,react.useState)(),{story,height,autoplay,forceInitialArgs,renderStoryToElement}=props;return(0,react.useEffect)((()=>{if(!story||!storyRef.current)return()=>{};let element=storyRef.current,cleanup=renderStoryToElement(story,element,{showMain:()=>{},showError:({title,description})=>setError(new Error(`${title} - ${description}`)),showException:err=>setError(err)},{autoplay,forceInitialArgs});return setShowLoader(!1),()=>{Promise.resolve().then((()=>cleanup()))}}),[autoplay,renderStoryToElement,story]),error?react.createElement("pre",null,react.createElement(components_dist.Df,{error})):react.createElement(react.Fragment,null,height?react.createElement("style",null,`#${storyBlockIdFromId(props)} { min-height: ${height}; transform: translateZ(0); overflow: auto }`):null,showLoader&&react.createElement(StorySkeleton,null),react.createElement("div",{ref:storyRef,id:`${storyBlockIdFromId(props)}-inner`,"data-name":story.name}))},IFrameStory=({story,height="500px"})=>react.createElement("div",{style:{width:"100%",height}},react.createElement(ZoomContext.Consumer,null,(({scale})=>react.createElement(IFrame,{key:"iframe",id:`iframe--${story.id}`,title:story.name,src:(0,components_dist.jZ)(BASE_URL,story.id,{viewMode:"story"}),allowFullScreen:!0,scale,style:{width:"100%",height:"100%",border:"0 none"}})))),Story=props=>{let{inline}=props;return react.createElement("div",{id:storyBlockIdFromId(props),className:"sb-story sb-unstyled","data-story-block":"true"},inline?react.createElement(InlineStory,{...props}):react.createElement(IFrameStory,{...props}))},StorySkeleton=()=>react.createElement(components_dist.aH,null),ChildrenContainer=dist.I4.div((({isColumn,columns,layout})=>({display:isColumn||!columns?"block":"flex",position:"relative",flexWrap:"wrap",overflow:"auto",flexDirection:isColumn?"column":"row","& .innerZoomElementWrapper > *":isColumn?{width:"fullscreen"!==layout?"calc(100% - 20px)":"100%",display:"block"}:{maxWidth:"fullscreen"!==layout?"calc(100% - 20px)":"100%",display:"inline-block"}})),(({layout="padded"})=>"centered"===layout||"padded"===layout?{padding:"30px 20px","& .innerZoomElementWrapper > *":{width:"auto",border:"10px solid transparent!important"}}:{}),(({layout="padded"})=>"centered"===layout?{display:"flex",justifyContent:"center",justifyItems:"center",alignContent:"center",alignItems:"center"}:{}),(({columns})=>columns&&columns>1?{".innerZoomElementWrapper > *":{minWidth:`calc(100% / ${columns} - 20px)`}}:{})),StyledSource=(0,dist.I4)(Source)((({theme})=>({margin:0,borderTopLeftRadius:0,borderTopRightRadius:0,borderBottomLeftRadius:theme.appBorderRadius,borderBottomRightRadius:theme.appBorderRadius,border:"none",background:"light"===theme.base?"rgba(0, 0, 0, 0.85)":curriedDarken$1(.05,theme.background.content),color:theme.color.lightest,button:{background:"light"===theme.base?"rgba(0, 0, 0, 0.85)":curriedDarken$1(.05,theme.background.content)}}))),PreviewContainer=dist.I4.div((({theme,withSource,isExpanded})=>({position:"relative",overflow:"hidden",margin:"25px 0 40px",...getBlockBackgroundStyle(theme),borderBottomLeftRadius:withSource&&isExpanded&&0,borderBottomRightRadius:withSource&&isExpanded&&0,borderBottomWidth:isExpanded&&0,"h3 + &":{marginTop:"16px"}})),(({withToolbar})=>withToolbar&&{paddingTop:40}));function getStoryId(children){if(1===react.Children.count(children)){let elt=children;if(elt.props)return elt.props.id}return null}var PositionedToolbar=(0,dist.I4)((({isLoading,storyId,baseUrl,zoom,resetZoom,...rest})=>react.createElement(Bar,{...rest},react.createElement(Wrapper2,{key:"left"},isLoading?[1,2,3].map((key=>react.createElement(IconPlaceholder,{key}))):react.createElement(react.Fragment,null,react.createElement(components_dist.K0,{key:"zoomin",onClick:e=>{e.preventDefault(),zoom(.8)},title:"Zoom in"},react.createElement(icons_dist.PU,null)),react.createElement(components_dist.K0,{key:"zoomout",onClick:e=>{e.preventDefault(),zoom(1.25)},title:"Zoom out"},react.createElement(icons_dist.LoD,null)),react.createElement(components_dist.K0,{key:"zoomreset",onClick:e=>{e.preventDefault(),resetZoom()},title:"Reset zoom"},react.createElement(icons_dist.wV5,null)))))))({position:"absolute",top:0,left:0,right:0,height:40}),Relative=dist.I4.div({overflow:"hidden",position:"relative"}),Preview=({isLoading,isColumn,columns,children,withSource,withToolbar=!1,isExpanded=!1,additionalActions,className,layout="padded",...props})=>{let[expanded,setExpanded]=(0,react.useState)(isExpanded),{source,actionItem}=((withSource,expanded,setExpanded)=>{switch(!0){case!(!withSource||!withSource.error):return{source:null,actionItem:{title:"No code available",className:"docblock-code-toggle docblock-code-toggle--disabled",disabled:!0,onClick:()=>setExpanded(!1)}};case expanded:return{source:react.createElement(StyledSource,{...withSource,dark:!0}),actionItem:{title:"Hide code",className:"docblock-code-toggle docblock-code-toggle--expanded",onClick:()=>setExpanded(!1)}};default:return{source:react.createElement(StyledSource,{...withSource,dark:!0}),actionItem:{title:"Show code",className:"docblock-code-toggle",onClick:()=>setExpanded(!0)}}}})(withSource,expanded,setExpanded),[scale,setScale]=(0,react.useState)(1),previewClasses=[className].concat(["sbdocs","sbdocs-preview","sb-unstyled"]),defaultActionItems=withSource?[actionItem]:[],[additionalActionItems,setAdditionalActionItems]=(0,react.useState)(additionalActions?[...additionalActions]:[]),actionItems=[...defaultActionItems,...additionalActionItems],{window:globalWindow4}=global_dist.global,copyToClipboard=(0,react.useCallback)((async text=>{let{createCopyToClipboardFunction}=await Promise.resolve().then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/components/dist/index.mjs"));createCopyToClipboardFunction()}),[]);return react.createElement(PreviewContainer,{withSource,withToolbar,...props,className:previewClasses.join(" ")},withToolbar&&react.createElement(PositionedToolbar,{isLoading,border:!0,zoom:z=>setScale(scale*z),resetZoom:()=>setScale(1),storyId:getStoryId(children),baseUrl:"./iframe.html"}),react.createElement(ZoomContext.Provider,{value:{scale}},react.createElement(Relative,{className:"docs-story",onCopyCapture:withSource&&(e=>{let selection=globalWindow4.getSelection();selection&&"Range"===selection.type||(e.preventDefault(),0===additionalActionItems.filter((item=>"Copied"===item.title)).length&&copyToClipboard(source.props.code).then((()=>{setAdditionalActionItems([...additionalActionItems,{title:"Copied",onClick:()=>{}}]),globalWindow4.setTimeout((()=>setAdditionalActionItems(additionalActionItems.filter((item=>"Copied"!==item.title)))),1500)})))})},react.createElement(ChildrenContainer,{isColumn:isColumn||!Array.isArray(children),columns,layout},react.createElement(components_dist.GP.Element,{scale},Array.isArray(children)?children.map(((child,i)=>react.createElement("div",{key:i},child))):react.createElement("div",null,children))),react.createElement(chunk_D3EWQ7UP.E7,{actionItems}))),withSource&&expanded&&source)};(0,dist.I4)(Preview)((()=>({".docs-story":{paddingTop:32,paddingBottom:40}})));var Table=dist.I4.table((({theme})=>({"&&":{borderCollapse:"collapse",borderSpacing:0,border:"none",tr:{border:"none !important",background:"none"},"td, th":{padding:0,border:"none",width:"auto!important"},marginTop:0,marginBottom:0,"th:first-of-type, td:first-of-type":{paddingLeft:0},"th:last-of-type, td:last-of-type":{paddingRight:0},td:{paddingTop:0,paddingBottom:4,"&:not(:first-of-type)":{paddingLeft:10,paddingRight:0}},tbody:{boxShadow:"none",border:"none"},code:(0,components_dist.zb)({theme}),div:{span:{fontWeight:"bold"}},"& code":{margin:0,display:"inline-block",fontSize:theme.typography.size.s1}}}))),ArgJsDoc=({tags})=>{let params=(tags.params||[]).filter((x=>x.description)),hasDisplayableParams=0!==params.length,hasDisplayableDeprecated=null!=tags.deprecated,hasDisplayableReturns=null!=tags.returns&&null!=tags.returns.description;return hasDisplayableParams||hasDisplayableReturns||hasDisplayableDeprecated?react.createElement(react.Fragment,null,react.createElement(Table,null,react.createElement("tbody",null,hasDisplayableDeprecated&&react.createElement("tr",{key:"deprecated"},react.createElement("td",{colSpan:2},react.createElement("strong",null,"Deprecated"),": ",tags.deprecated.toString())),hasDisplayableParams&&params.map((x=>react.createElement("tr",{key:x.name},react.createElement("td",null,react.createElement("code",null,x.name)),react.createElement("td",null,x.description)))),hasDisplayableReturns&&react.createElement("tr",{key:"returns"},react.createElement("td",null,react.createElement("code",null,"Returns")),react.createElement("td",null,tags.returns.description))))):null},Summary=dist.I4.div((({isExpanded})=>({display:"flex",flexDirection:isExpanded?"column":"row",flexWrap:"wrap",alignItems:"flex-start",marginBottom:"-4px",minWidth:100}))),Text=dist.I4.span(components_dist.zb,(({theme,simple=!1})=>({flex:"0 0 auto",fontFamily:theme.typography.fonts.mono,fontSize:theme.typography.size.s1,wordBreak:"break-word",whiteSpace:"normal",maxWidth:"100%",margin:0,marginRight:"4px",marginBottom:"4px",paddingTop:"2px",paddingBottom:"2px",lineHeight:"13px",...simple&&{background:"transparent",border:"0 none",paddingLeft:0}}))),ExpandButton=dist.I4.button((({theme})=>({fontFamily:theme.typography.fonts.mono,color:theme.color.secondary,marginBottom:"4px",background:"none",border:"none"}))),Expandable=dist.I4.div(components_dist.zb,(({theme})=>({fontFamily:theme.typography.fonts.mono,color:theme.color.secondary,fontSize:theme.typography.size.s1,margin:0,whiteSpace:"nowrap",display:"flex",alignItems:"center"}))),Detail=dist.I4.div((({theme,width})=>({width,minWidth:200,maxWidth:800,padding:15,fontFamily:theme.typography.fonts.mono,fontSize:theme.typography.size.s1,boxSizing:"content-box","& code":{padding:"0 !important"}}))),ChevronUpIcon=(0,dist.I4)(icons_dist.tN5)({marginLeft:4}),ChevronDownIcon=(0,dist.I4)(icons_dist.abt)({marginLeft:4}),EmptyArg=()=>react.createElement("span",null,"-"),ArgText=({text,simple})=>react.createElement(Text,{simple},text),calculateDetailWidth=memoizerific(1e3)((detail=>{let lines=detail.split(/\r?\n/);return`${Math.max(...lines.map((x=>x.length)))}ch`})),renderSummaryItems=(summaryItems,isExpanded=!0)=>{let items=summaryItems;return isExpanded||(items=summaryItems.slice(0,8)),items.map((item=>react.createElement(ArgText,{key:item,text:""===item?'""':item})))},ArgSummary=({value:value2,initialExpandedArgs})=>{let{summary,detail}=value2,[isOpen,setIsOpen]=(0,react.useState)(!1),[isExpanded,setIsExpanded]=(0,react.useState)(initialExpandedArgs||!1);if(null==summary)return null;let summaryAsString="function"==typeof summary.toString?summary.toString():summary;if(null==detail){if(/[(){}[\]<>]/.test(summaryAsString))return react.createElement(ArgText,{text:summaryAsString});let summaryItems=(summary=>{if(!summary)return[summary];let summaryItems=summary.split("|").map((value2=>value2.trim()));return uniq(summaryItems)})(summaryAsString),itemsCount=summaryItems.length;return itemsCount>8?react.createElement(Summary,{isExpanded},renderSummaryItems(summaryItems,isExpanded),react.createElement(ExpandButton,{onClick:()=>setIsExpanded(!isExpanded)},isExpanded?"Show less...":`Show ${itemsCount-8} more...`)):react.createElement(Summary,null,renderSummaryItems(summaryItems))}return react.createElement(components_dist.o4,{closeOnOutsideClick:!0,placement:"bottom",visible:isOpen,onVisibleChange:isVisible=>{setIsOpen(isVisible)},tooltip:react.createElement(Detail,{width:calculateDetailWidth(detail)},react.createElement(components_dist.bF,{language:"jsx",format:!1},detail))},react.createElement(Expandable,{className:"sbdocs-expandable"},react.createElement("span",null,summaryAsString),isOpen?react.createElement(ChevronUpIcon,null):react.createElement(ChevronDownIcon,null)))},ArgValue=({value:value2,initialExpandedArgs})=>null==value2?react.createElement(EmptyArg,null):react.createElement(ArgSummary,{value:value2,initialExpandedArgs}),Label=dist.I4.label((({theme})=>({lineHeight:"18px",alignItems:"center",marginBottom:8,display:"inline-block",position:"relative",whiteSpace:"nowrap",background:theme.boolean.background,borderRadius:"3em",padding:1,input:{appearance:"none",width:"100%",height:"100%",position:"absolute",left:0,top:0,margin:0,padding:0,border:"none",background:"transparent",cursor:"pointer",borderRadius:"3em","&:focus":{outline:"none",boxShadow:`${theme.color.secondary} 0 0 0 1px inset !important`}},span:{textAlign:"center",fontSize:theme.typography.size.s1,fontWeight:theme.typography.weight.bold,lineHeight:"1",cursor:"pointer",display:"inline-block",padding:"7px 15px",transition:"all 100ms ease-out",userSelect:"none",borderRadius:"3em",color:curriedTransparentize$1(.5,theme.color.defaultText),background:"transparent","&:hover":{boxShadow:`${curriedOpacify$1(.3,theme.appBorderColor)} 0 0 0 1px inset`},"&:active":{boxShadow:`${curriedOpacify$1(.05,theme.appBorderColor)} 0 0 0 2px inset`,color:curriedOpacify$1(1,theme.appBorderColor)},"&:first-of-type":{paddingRight:8},"&:last-of-type":{paddingLeft:8}},"input:checked ~ span:last-of-type, input:not(:checked) ~ span:first-of-type":{background:theme.boolean.selectedBackground,boxShadow:"light"===theme.base?`${curriedOpacify$1(.1,theme.appBorderColor)} 0 0 2px`:`${theme.appBorderColor} 0 0 0 1px`,color:theme.color.defaultText,padding:"7px 15px"}}))),FlexSpaced=dist.I4.div((({theme})=>({flex:1,display:"flex",input:{marginLeft:10,flex:1,height:32,"&::-webkit-calendar-picker-indicator":{opacity:.5,height:12,filter:"light"===theme.base?void 0:"invert(1)"}},"input:first-of-type":{marginLeft:0,flexGrow:4},"input:last-of-type":{flexGrow:3}}))),Wrapper3=dist.I4.label({display:"flex"}),selectedKey=(value2,options)=>{let entry=options&&Object.entries(options).find((([_key,val])=>val===value2));return entry?entry[0]:void 0},selectedKeys=(value2,options)=>value2&&options?Object.entries(options).filter((entry=>value2.includes(entry[1]))).map((entry=>entry[0])):[],selectedValues=(keys,options)=>keys&&options&&keys.map((key=>options[key])),Wrapper4=dist.I4.div((({isInline})=>isInline?{display:"flex",flexWrap:"wrap",alignItems:"flex-start",label:{display:"inline-flex",marginRight:15}}:{label:{display:"flex"}})),Text2=dist.I4.span({}),Label2=dist.I4.label({lineHeight:"20px",alignItems:"center",marginBottom:8,"&:last-child":{marginBottom:0},input:{margin:0,marginRight:6}}),CheckboxControl=({name,options,value:value2,onChange,isInline})=>{if(!options)return client_logger_dist.vF.warn(`Checkbox with no options: ${name}`),react.createElement(react.Fragment,null,"-");let initial=selectedKeys(value2,options),[selected,setSelected]=(0,react.useState)(initial),handleChange=e=>{let option=e.target.value,updated=[...selected];updated.includes(option)?updated.splice(updated.indexOf(option),1):updated.push(option),onChange(selectedValues(updated,options)),setSelected(updated)};(0,react.useEffect)((()=>{setSelected(selectedKeys(value2,options))}),[value2]);let controlId=(0,chunk_GWAJ4KRU.Z)(name);return react.createElement(Wrapper4,{isInline},Object.keys(options).map(((key,index)=>{let id=`${controlId}-${index}`;return react.createElement(Label2,{key:id,htmlFor:id},react.createElement("input",{type:"checkbox",id,name:id,value:key,onChange:handleChange,checked:selected?.includes(key)}),react.createElement(Text2,null,key))})))},Wrapper5=dist.I4.div((({isInline})=>isInline?{display:"flex",flexWrap:"wrap",alignItems:"flex-start",label:{display:"inline-flex",marginRight:15}}:{label:{display:"flex"}})),Text3=dist.I4.span({}),Label3=dist.I4.label({lineHeight:"20px",alignItems:"center",marginBottom:8,"&:last-child":{marginBottom:0},input:{margin:0,marginRight:6}}),RadioControl=({name,options,value:value2,onChange,isInline})=>{if(!options)return client_logger_dist.vF.warn(`Radio with no options: ${name}`),react.createElement(react.Fragment,null,"-");let selection=selectedKey(value2,options),controlId=(0,chunk_GWAJ4KRU.Z)(name);return react.createElement(Wrapper5,{isInline},Object.keys(options).map(((key,index)=>{let id=`${controlId}-${index}`;return react.createElement(Label3,{key:id,htmlFor:id},react.createElement("input",{type:"radio",id,name:id,value:key,onChange:e=>onChange(options[e.currentTarget.value]),checked:key===selection}),react.createElement(Text3,null,key))})))},OptionsSelect=dist.I4.select({appearance:"none",border:"0 none",boxSizing:"inherit",display:" block",margin:" 0",background:"transparent",padding:0,fontSize:"inherit",position:"relative"},(({theme})=>({boxSizing:"border-box",position:"relative",padding:"6px 10px",width:"100%",color:theme.input.color||"inherit",background:theme.input.background,borderRadius:theme.input.borderRadius,boxShadow:`${theme.input.border} 0 0 0 1px inset`,fontSize:theme.typography.size.s2-1,lineHeight:"20px","&:focus":{boxShadow:`${theme.color.secondary} 0 0 0 1px inset`,outline:"none"},"&[disabled]":{cursor:"not-allowed",opacity:.5},"::placeholder":{color:theme.textMutedColor},"&[multiple]":{overflow:"auto",padding:0,option:{display:"block",padding:"6px 10px",marginLeft:1,marginRight:1}}}))),SelectWrapper=dist.I4.span((({theme})=>({display:"inline-block",lineHeight:"normal",overflow:"hidden",position:"relative",verticalAlign:"top",width:"100%",svg:{position:"absolute",zIndex:1,pointerEvents:"none",height:"12px",marginTop:"-6px",right:"12px",top:"50%",fill:theme.textMutedColor,path:{fill:theme.textMutedColor}}}))),SingleSelect=({name,value:value2,options,onChange})=>{let selection=selectedKey(value2,options)||"Choose option...",controlId=(0,chunk_GWAJ4KRU.Z)(name);return react.createElement(SelectWrapper,null,react.createElement(icons_dist.abt,null),react.createElement(OptionsSelect,{id:controlId,value:selection,onChange:e=>{onChange(options[e.currentTarget.value])}},react.createElement("option",{key:"no-selection",disabled:!0},"Choose option..."),Object.keys(options).map((key=>react.createElement("option",{key,value:key},key)))))},MultiSelect=({name,value:value2,options,onChange})=>{let selection=selectedKeys(value2,options),controlId=(0,chunk_GWAJ4KRU.Z)(name);return react.createElement(SelectWrapper,null,react.createElement(OptionsSelect,{id:controlId,multiple:!0,value:selection,onChange:e=>{let selection2=Array.from(e.currentTarget.options).filter((option=>option.selected)).map((option=>option.value));onChange(selectedValues(selection2,options))}},Object.keys(options).map((key=>react.createElement("option",{key,value:key},key)))))},SelectControl=props=>{let{name,options}=props;return options?props.isMulti?react.createElement(MultiSelect,{...props}):react.createElement(SingleSelect,{...props}):(client_logger_dist.vF.warn(`Select with no options: ${name}`),react.createElement(react.Fragment,null,"-"))},normalizeOptions=(options,labels)=>Array.isArray(options)?options.reduce(((acc,item)=>(acc[labels?.[item]||String(item)]=item,acc)),{}):options,Controls={check:CheckboxControl,"inline-check":CheckboxControl,radio:RadioControl,"inline-radio":RadioControl,select:SelectControl,"multi-select":SelectControl},OptionsControl=props=>{let{type="select",labels,argType}=props,normalized={...props,options:argType?normalizeOptions(argType.options,labels):{},isInline:type.includes("inline"),isMulti:type.includes("multi")},Control=Controls[type];if(Control)return react.createElement(Control,{...normalized});throw new Error(`Unknown options type: ${type}`)};function getObjectType(obj){return null===obj||"object"!=typeof obj||Array.isArray(obj)||"function"!=typeof obj[Symbol.iterator]?Object.prototype.toString.call(obj).slice(8,-1):"Iterable"}function isComponentWillChange(oldValue,newValue){let oldType=getObjectType(oldValue),newType=getObjectType(newValue);return("Function"===oldType||"Function"===newType)&&newType!==oldType}var JsonAddValue=class extends react.Component{constructor(props){super(props),this.state={inputRefKey:null,inputRefValue:null},this.refInputValue=this.refInputValue.bind(this),this.refInputKey=this.refInputKey.bind(this),this.onKeydown=this.onKeydown.bind(this),this.onSubmit=this.onSubmit.bind(this)}componentDidMount(){let{inputRefKey,inputRefValue}=this.state,{onlyValue}=this.props;inputRefKey&&"function"==typeof inputRefKey.focus&&inputRefKey.focus(),onlyValue&&inputRefValue&&"function"==typeof inputRefValue.focus&&inputRefValue.focus(),document.addEventListener("keydown",this.onKeydown)}componentWillUnmount(){document.removeEventListener("keydown",this.onKeydown)}onKeydown(event){event.altKey||event.ctrlKey||event.metaKey||event.shiftKey||event.repeat||(("Enter"===event.code||"Enter"===event.key)&&(event.preventDefault(),this.onSubmit()),("Escape"===event.code||"Escape"===event.key)&&(event.preventDefault(),this.props.handleCancel()))}onSubmit(){let{handleAdd,onlyValue,onSubmitValueParser,keyPath,deep}=this.props,{inputRefKey,inputRefValue}=this.state,result={};if(!onlyValue){if(!inputRefKey.value)return;result.key=inputRefKey.value}result.newValue=onSubmitValueParser(!1,keyPath,deep,result.key,inputRefValue.value),handleAdd(result)}refInputKey(node){this.state.inputRefKey=node}refInputValue(node){this.state.inputRefValue=node}render(){let{handleCancel,onlyValue,addButtonElement,cancelButtonElement,inputElementGenerator,keyPath,deep}=this.props,addButtonElementLayout=(0,react.cloneElement)(addButtonElement,{onClick:this.onSubmit}),cancelButtonElementLayout=(0,react.cloneElement)(cancelButtonElement,{onClick:handleCancel}),inputElementValue=inputElementGenerator("value",keyPath,deep),inputElementValueLayout=(0,react.cloneElement)(inputElementValue,{placeholder:"Value",ref:this.refInputValue}),inputElementKeyLayout=null;if(!onlyValue){let inputElementKey=inputElementGenerator("key",keyPath,deep);inputElementKeyLayout=(0,react.cloneElement)(inputElementKey,{placeholder:"Key",ref:this.refInputKey})}return react.createElement("span",{className:"rejt-add-value-node"},inputElementKeyLayout,inputElementValueLayout,cancelButtonElementLayout,addButtonElementLayout)}};JsonAddValue.defaultProps={onlyValue:!1,addButtonElement:react.createElement("button",null,"+"),cancelButtonElement:react.createElement("button",null,"c")};var JsonArray=class extends react.Component{constructor(props){super(props);let keyPath=[...props.keyPath,props.name];this.state={data:props.data,name:props.name,keyPath,deep:props.deep,nextDeep:props.deep+1,collapsed:props.isCollapsed(keyPath,props.deep,props.data),addFormVisible:!1},this.handleCollapseMode=this.handleCollapseMode.bind(this),this.handleRemoveItem=this.handleRemoveItem.bind(this),this.handleAddMode=this.handleAddMode.bind(this),this.handleAddValueAdd=this.handleAddValueAdd.bind(this),this.handleAddValueCancel=this.handleAddValueCancel.bind(this),this.handleEditValue=this.handleEditValue.bind(this),this.onChildUpdate=this.onChildUpdate.bind(this),this.renderCollapsed=this.renderCollapsed.bind(this),this.renderNotCollapsed=this.renderNotCollapsed.bind(this)}static getDerivedStateFromProps(props,state){return props.data!==state.data?{data:props.data}:null}onChildUpdate(childKey,childData){let{data,keyPath}=this.state;data[childKey]=childData,this.setState({data});let{onUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data)}handleAddMode(){this.setState({addFormVisible:!0})}handleCollapseMode(){this.setState((state=>({collapsed:!state.collapsed})))}handleRemoveItem(index){return()=>{let{beforeRemoveAction,logger:logger4}=this.props,{data,keyPath,nextDeep:deep}=this.state,oldValue=data[index];beforeRemoveAction(index,keyPath,deep,oldValue).then((()=>{let deltaUpdateResult={keyPath,deep,key:index,oldValue,type:"REMOVE_DELTA_TYPE"};data.splice(index,1),this.setState({data});let{onUpdate,onDeltaUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data),onDeltaUpdate(deltaUpdateResult)})).catch(logger4.error)}}handleAddValueAdd({newValue}){let{data,keyPath,nextDeep:deep}=this.state,{beforeAddAction,logger:logger4}=this.props;beforeAddAction(data.length,keyPath,deep,newValue).then((()=>{let newData=[...data,newValue];this.setState({data:newData}),this.handleAddValueCancel();let{onUpdate,onDeltaUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],newData),onDeltaUpdate({type:"ADD_DELTA_TYPE",keyPath,deep,key:newData.length-1,newValue})})).catch(logger4.error)}handleAddValueCancel(){this.setState({addFormVisible:!1})}handleEditValue({key,value:value2}){return new Promise(((resolve,reject)=>{let{beforeUpdateAction}=this.props,{data,keyPath,nextDeep:deep}=this.state,oldValue=data[key];beforeUpdateAction(key,keyPath,deep,oldValue,value2).then((()=>{data[key]=value2,this.setState({data});let{onUpdate,onDeltaUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data),onDeltaUpdate({type:"UPDATE_DELTA_TYPE",keyPath,deep,key,newValue:value2,oldValue}),resolve(void 0)})).catch(reject)}))}renderCollapsed(){let{name,data,keyPath,deep}=this.state,{handleRemove,readOnly,getStyle,dataType,minusMenuElement}=this.props,{minus,collapsed}=getStyle(name,data,keyPath,deep,dataType),isReadOnly=readOnly(name,data,keyPath,deep,dataType),removeItemButton=(0,react.cloneElement)(minusMenuElement,{onClick:handleRemove,className:"rejt-minus-menu",style:minus});return react.createElement("span",{className:"rejt-collapsed"},react.createElement("span",{className:"rejt-collapsed-text",style:collapsed,onClick:this.handleCollapseMode},"[...] ",data.length," ",1===data.length?"item":"items"),!isReadOnly&&removeItemButton)}renderNotCollapsed(){let{name,data,keyPath,deep,addFormVisible,nextDeep}=this.state,{isCollapsed,handleRemove,onDeltaUpdate,readOnly,getStyle,dataType,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser}=this.props,{minus,plus,delimiter,ul,addForm}=getStyle(name,data,keyPath,deep,dataType),isReadOnly=readOnly(name,data,keyPath,deep,dataType),addItemButton=(0,react.cloneElement)(plusMenuElement,{onClick:this.handleAddMode,className:"rejt-plus-menu",style:plus}),removeItemButton=(0,react.cloneElement)(minusMenuElement,{onClick:handleRemove,className:"rejt-minus-menu",style:minus});return react.createElement("span",{className:"rejt-not-collapsed"},react.createElement("span",{className:"rejt-not-collapsed-delimiter",style:delimiter},"["),!addFormVisible&&addItemButton,react.createElement("ul",{className:"rejt-not-collapsed-list",style:ul},data.map(((item,index)=>react.createElement(JsonNode,{key:index,name:index.toString(),data:item,keyPath,deep:nextDeep,isCollapsed,handleRemove:this.handleRemoveItem(index),handleUpdateValue:this.handleEditValue,onUpdate:this.onChildUpdate,onDeltaUpdate,readOnly,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser})))),!isReadOnly&&addFormVisible&&react.createElement("div",{className:"rejt-add-form",style:addForm},react.createElement(JsonAddValue,{handleAdd:this.handleAddValueAdd,handleCancel:this.handleAddValueCancel,onlyValue:!0,addButtonElement,cancelButtonElement,inputElementGenerator,keyPath,deep,onSubmitValueParser})),react.createElement("span",{className:"rejt-not-collapsed-delimiter",style:delimiter},"]"),!isReadOnly&&removeItemButton)}render(){let{name,collapsed,data,keyPath,deep}=this.state,{dataType,getStyle}=this.props,value2=collapsed?this.renderCollapsed():this.renderNotCollapsed(),style=getStyle(name,data,keyPath,deep,dataType);return react.createElement("div",{className:"rejt-array-node"},react.createElement("span",{onClick:this.handleCollapseMode},react.createElement("span",{className:"rejt-name",style:style.name},name," :"," ")),value2)}};JsonArray.defaultProps={keyPath:[],deep:0,minusMenuElement:react.createElement("span",null," - "),plusMenuElement:react.createElement("span",null," + ")};var JsonFunctionValue=class extends react.Component{constructor(props){super(props);let keyPath=[...props.keyPath,props.name];this.state={value:props.value,name:props.name,keyPath,deep:props.deep,editEnabled:!1,inputRef:null},this.handleEditMode=this.handleEditMode.bind(this),this.refInput=this.refInput.bind(this),this.handleCancelEdit=this.handleCancelEdit.bind(this),this.handleEdit=this.handleEdit.bind(this),this.onKeydown=this.onKeydown.bind(this)}static getDerivedStateFromProps(props,state){return props.value!==state.value?{value:props.value}:null}componentDidUpdate(){let{editEnabled,inputRef,name,value:value2,keyPath,deep}=this.state,{readOnly,dataType}=this.props,readOnlyResult=readOnly(name,value2,keyPath,deep,dataType);editEnabled&&!readOnlyResult&&"function"==typeof inputRef.focus&&inputRef.focus()}componentDidMount(){document.addEventListener("keydown",this.onKeydown)}componentWillUnmount(){document.removeEventListener("keydown",this.onKeydown)}onKeydown(event){event.altKey||event.ctrlKey||event.metaKey||event.shiftKey||event.repeat||(("Enter"===event.code||"Enter"===event.key)&&(event.preventDefault(),this.handleEdit()),("Escape"===event.code||"Escape"===event.key)&&(event.preventDefault(),this.handleCancelEdit()))}handleEdit(){let{handleUpdateValue,originalValue,logger:logger4,onSubmitValueParser,keyPath}=this.props,{inputRef,name,deep}=this.state;if(!inputRef)return;let newValue=onSubmitValueParser(!0,keyPath,deep,name,inputRef.value);handleUpdateValue({value:newValue,key:name}).then((()=>{isComponentWillChange(originalValue,newValue)||this.handleCancelEdit()})).catch(logger4.error)}handleEditMode(){this.setState({editEnabled:!0})}refInput(node){this.state.inputRef=node}handleCancelEdit(){this.setState({editEnabled:!1})}render(){let{name,value:value2,editEnabled,keyPath,deep}=this.state,{handleRemove,originalValue,readOnly,dataType,getStyle,editButtonElement,cancelButtonElement,textareaElementGenerator,minusMenuElement,keyPath:comeFromKeyPath}=this.props,style=getStyle(name,originalValue,keyPath,deep,dataType),result=null,minusElement=null,resultOnlyResult=readOnly(name,originalValue,keyPath,deep,dataType);if(editEnabled&&!resultOnlyResult){let textareaElement=textareaElementGenerator("value",comeFromKeyPath,deep,name,originalValue,dataType),editButtonElementLayout=(0,react.cloneElement)(editButtonElement,{onClick:this.handleEdit}),cancelButtonElementLayout=(0,react.cloneElement)(cancelButtonElement,{onClick:this.handleCancelEdit}),textareaElementLayout=(0,react.cloneElement)(textareaElement,{ref:this.refInput,defaultValue:originalValue});result=react.createElement("span",{className:"rejt-edit-form",style:style.editForm},textareaElementLayout," ",cancelButtonElementLayout,editButtonElementLayout),minusElement=null}else{result=react.createElement("span",{className:"rejt-value",style:style.value,onClick:resultOnlyResult?null:this.handleEditMode},value2);let minusMenuLayout=(0,react.cloneElement)(minusMenuElement,{onClick:handleRemove,className:"rejt-minus-menu",style:style.minus});minusElement=resultOnlyResult?null:minusMenuLayout}return react.createElement("li",{className:"rejt-function-value-node",style:style.li},react.createElement("span",{className:"rejt-name",style:style.name},name," :"," "),result,minusElement)}};JsonFunctionValue.defaultProps={keyPath:[],deep:0,handleUpdateValue:()=>{},editButtonElement:react.createElement("button",null,"e"),cancelButtonElement:react.createElement("button",null,"c"),minusMenuElement:react.createElement("span",null," - ")};var JsonNode=class extends react.Component{constructor(props){super(props),this.state={data:props.data,name:props.name,keyPath:props.keyPath,deep:props.deep}}static getDerivedStateFromProps(props,state){return props.data!==state.data?{data:props.data}:null}render(){let{data,name,keyPath,deep}=this.state,{isCollapsed,handleRemove,handleUpdateValue,onUpdate,onDeltaUpdate,readOnly,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser}=this.props,readOnlyTrue=()=>!0,dataType=getObjectType(data);switch(dataType){case"Error":return react.createElement(JsonObject,{data,name,isCollapsed,keyPath,deep,handleRemove,onUpdate,onDeltaUpdate,readOnly:readOnlyTrue,dataType,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser});case"Object":return react.createElement(JsonObject,{data,name,isCollapsed,keyPath,deep,handleRemove,onUpdate,onDeltaUpdate,readOnly,dataType,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser});case"Array":return react.createElement(JsonArray,{data,name,isCollapsed,keyPath,deep,handleRemove,onUpdate,onDeltaUpdate,readOnly,dataType,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser});case"String":return react.createElement(JsonValue,{name,value:`"${data}"`,originalValue:data,keyPath,deep,handleRemove,handleUpdateValue,readOnly,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Number":return react.createElement(JsonValue,{name,value:data,originalValue:data,keyPath,deep,handleRemove,handleUpdateValue,readOnly,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Boolean":return react.createElement(JsonValue,{name,value:data?"true":"false",originalValue:data,keyPath,deep,handleRemove,handleUpdateValue,readOnly,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Date":return react.createElement(JsonValue,{name,value:data.toISOString(),originalValue:data,keyPath,deep,handleRemove,handleUpdateValue,readOnly:readOnlyTrue,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Null":return react.createElement(JsonValue,{name,value:"null",originalValue:"null",keyPath,deep,handleRemove,handleUpdateValue,readOnly,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Undefined":return react.createElement(JsonValue,{name,value:"undefined",originalValue:"undefined",keyPath,deep,handleRemove,handleUpdateValue,readOnly,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Function":return react.createElement(JsonFunctionValue,{name,value:data.toString(),originalValue:data,keyPath,deep,handleRemove,handleUpdateValue,readOnly,dataType,getStyle,cancelButtonElement,editButtonElement,textareaElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});case"Symbol":return react.createElement(JsonValue,{name,value:data.toString(),originalValue:data,keyPath,deep,handleRemove,handleUpdateValue,readOnly:readOnlyTrue,dataType,getStyle,cancelButtonElement,editButtonElement,inputElementGenerator,minusMenuElement,logger:logger4,onSubmitValueParser});default:return null}}};JsonNode.defaultProps={keyPath:[],deep:0};var JsonObject=class extends react.Component{constructor(props){super(props);let keyPath=-1===props.deep?[]:[...props.keyPath,props.name];this.state={name:props.name,data:props.data,keyPath,deep:props.deep,nextDeep:props.deep+1,collapsed:props.isCollapsed(keyPath,props.deep,props.data),addFormVisible:!1},this.handleCollapseMode=this.handleCollapseMode.bind(this),this.handleRemoveValue=this.handleRemoveValue.bind(this),this.handleAddMode=this.handleAddMode.bind(this),this.handleAddValueAdd=this.handleAddValueAdd.bind(this),this.handleAddValueCancel=this.handleAddValueCancel.bind(this),this.handleEditValue=this.handleEditValue.bind(this),this.onChildUpdate=this.onChildUpdate.bind(this),this.renderCollapsed=this.renderCollapsed.bind(this),this.renderNotCollapsed=this.renderNotCollapsed.bind(this)}static getDerivedStateFromProps(props,state){return props.data!==state.data?{data:props.data}:null}onChildUpdate(childKey,childData){let{data,keyPath}=this.state;data[childKey]=childData,this.setState({data});let{onUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data)}handleAddMode(){this.setState({addFormVisible:!0})}handleAddValueCancel(){this.setState({addFormVisible:!1})}handleAddValueAdd({key,newValue}){let{data,keyPath,nextDeep:deep}=this.state,{beforeAddAction,logger:logger4}=this.props;beforeAddAction(key,keyPath,deep,newValue).then((()=>{data[key]=newValue,this.setState({data}),this.handleAddValueCancel();let{onUpdate,onDeltaUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data),onDeltaUpdate({type:"ADD_DELTA_TYPE",keyPath,deep,key,newValue})})).catch(logger4.error)}handleRemoveValue(key){return()=>{let{beforeRemoveAction,logger:logger4}=this.props,{data,keyPath,nextDeep:deep}=this.state,oldValue=data[key];beforeRemoveAction(key,keyPath,deep,oldValue).then((()=>{let deltaUpdateResult={keyPath,deep,key,oldValue,type:"REMOVE_DELTA_TYPE"};delete data[key],this.setState({data});let{onUpdate,onDeltaUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data),onDeltaUpdate(deltaUpdateResult)})).catch(logger4.error)}}handleCollapseMode(){this.setState((state=>({collapsed:!state.collapsed})))}handleEditValue({key,value:value2}){return new Promise(((resolve,reject)=>{let{beforeUpdateAction}=this.props,{data,keyPath,nextDeep:deep}=this.state,oldValue=data[key];beforeUpdateAction(key,keyPath,deep,oldValue,value2).then((()=>{data[key]=value2,this.setState({data});let{onUpdate,onDeltaUpdate}=this.props;onUpdate(keyPath[keyPath.length-1],data),onDeltaUpdate({type:"UPDATE_DELTA_TYPE",keyPath,deep,key,newValue:value2,oldValue}),resolve()})).catch(reject)}))}renderCollapsed(){let{name,keyPath,deep,data}=this.state,{handleRemove,readOnly,dataType,getStyle,minusMenuElement}=this.props,{minus,collapsed}=getStyle(name,data,keyPath,deep,dataType),keyList=Object.getOwnPropertyNames(data),isReadOnly=readOnly(name,data,keyPath,deep,dataType),removeItemButton=(0,react.cloneElement)(minusMenuElement,{onClick:handleRemove,className:"rejt-minus-menu",style:minus});return react.createElement("span",{className:"rejt-collapsed"},react.createElement("span",{className:"rejt-collapsed-text",style:collapsed,onClick:this.handleCollapseMode},"{...}"," ",keyList.length," ",1===keyList.length?"key":"keys"),!isReadOnly&&removeItemButton)}renderNotCollapsed(){let{name,data,keyPath,deep,nextDeep,addFormVisible}=this.state,{isCollapsed,handleRemove,onDeltaUpdate,readOnly,getStyle,dataType,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser}=this.props,{minus,plus,addForm,ul,delimiter}=getStyle(name,data,keyPath,deep,dataType),keyList=Object.getOwnPropertyNames(data),isReadOnly=readOnly(name,data,keyPath,deep,dataType),addItemButton=(0,react.cloneElement)(plusMenuElement,{onClick:this.handleAddMode,className:"rejt-plus-menu",style:plus}),removeItemButton=(0,react.cloneElement)(minusMenuElement,{onClick:handleRemove,className:"rejt-minus-menu",style:minus}),list=keyList.map((key=>react.createElement(JsonNode,{key,name:key,data:data[key],keyPath,deep:nextDeep,isCollapsed,handleRemove:this.handleRemoveValue(key),handleUpdateValue:this.handleEditValue,onUpdate:this.onChildUpdate,onDeltaUpdate,readOnly,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator,textareaElementGenerator,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser})));return react.createElement("span",{className:"rejt-not-collapsed"},react.createElement("span",{className:"rejt-not-collapsed-delimiter",style:delimiter},"{"),!isReadOnly&&addItemButton,react.createElement("ul",{className:"rejt-not-collapsed-list",style:ul},list),!isReadOnly&&addFormVisible&&react.createElement("div",{className:"rejt-add-form",style:addForm},react.createElement(JsonAddValue,{handleAdd:this.handleAddValueAdd,handleCancel:this.handleAddValueCancel,addButtonElement,cancelButtonElement,inputElementGenerator,keyPath,deep,onSubmitValueParser})),react.createElement("span",{className:"rejt-not-collapsed-delimiter",style:delimiter},"}"),!isReadOnly&&removeItemButton)}render(){let{name,collapsed,data,keyPath,deep}=this.state,{getStyle,dataType}=this.props,value2=collapsed?this.renderCollapsed():this.renderNotCollapsed(),style=getStyle(name,data,keyPath,deep,dataType);return react.createElement("div",{className:"rejt-object-node"},react.createElement("span",{onClick:this.handleCollapseMode},react.createElement("span",{className:"rejt-name",style:style.name},name," :"," ")),value2)}};JsonObject.defaultProps={keyPath:[],deep:0,minusMenuElement:react.createElement("span",null," - "),plusMenuElement:react.createElement("span",null," + ")};var JsonValue=class extends react.Component{constructor(props){super(props);let keyPath=[...props.keyPath,props.name];this.state={value:props.value,name:props.name,keyPath,deep:props.deep,editEnabled:!1,inputRef:null},this.handleEditMode=this.handleEditMode.bind(this),this.refInput=this.refInput.bind(this),this.handleCancelEdit=this.handleCancelEdit.bind(this),this.handleEdit=this.handleEdit.bind(this),this.onKeydown=this.onKeydown.bind(this)}static getDerivedStateFromProps(props,state){return props.value!==state.value?{value:props.value}:null}componentDidUpdate(){let{editEnabled,inputRef,name,value:value2,keyPath,deep}=this.state,{readOnly,dataType}=this.props,isReadOnly=readOnly(name,value2,keyPath,deep,dataType);editEnabled&&!isReadOnly&&"function"==typeof inputRef.focus&&inputRef.focus()}componentDidMount(){document.addEventListener("keydown",this.onKeydown)}componentWillUnmount(){document.removeEventListener("keydown",this.onKeydown)}onKeydown(event){event.altKey||event.ctrlKey||event.metaKey||event.shiftKey||event.repeat||(("Enter"===event.code||"Enter"===event.key)&&(event.preventDefault(),this.handleEdit()),("Escape"===event.code||"Escape"===event.key)&&(event.preventDefault(),this.handleCancelEdit()))}handleEdit(){let{handleUpdateValue,originalValue,logger:logger4,onSubmitValueParser,keyPath}=this.props,{inputRef,name,deep}=this.state;if(!inputRef)return;let newValue=onSubmitValueParser(!0,keyPath,deep,name,inputRef.value);handleUpdateValue({value:newValue,key:name}).then((()=>{isComponentWillChange(originalValue,newValue)||this.handleCancelEdit()})).catch(logger4.error)}handleEditMode(){this.setState({editEnabled:!0})}refInput(node){this.state.inputRef=node}handleCancelEdit(){this.setState({editEnabled:!1})}render(){let{name,value:value2,editEnabled,keyPath,deep}=this.state,{handleRemove,originalValue,readOnly,dataType,getStyle,editButtonElement,cancelButtonElement,inputElementGenerator,minusMenuElement,keyPath:comeFromKeyPath}=this.props,style=getStyle(name,originalValue,keyPath,deep,dataType),isReadOnly=readOnly(name,originalValue,keyPath,deep,dataType),isEditing=editEnabled&&!isReadOnly,inputElement=inputElementGenerator("value",comeFromKeyPath,deep,name,originalValue,dataType),editButtonElementLayout=(0,react.cloneElement)(editButtonElement,{onClick:this.handleEdit}),cancelButtonElementLayout=(0,react.cloneElement)(cancelButtonElement,{onClick:this.handleCancelEdit}),inputElementLayout=(0,react.cloneElement)(inputElement,{ref:this.refInput,defaultValue:JSON.stringify(originalValue)}),minusMenuLayout=(0,react.cloneElement)(minusMenuElement,{onClick:handleRemove,className:"rejt-minus-menu",style:style.minus});return react.createElement("li",{className:"rejt-value-node",style:style.li},react.createElement("span",{className:"rejt-name",style:style.name},name," : "),isEditing?react.createElement("span",{className:"rejt-edit-form",style:style.editForm},inputElementLayout," ",cancelButtonElementLayout,editButtonElementLayout):react.createElement("span",{className:"rejt-value",style:style.value,onClick:isReadOnly?null:this.handleEditMode},String(value2)),!isReadOnly&&!isEditing&&minusMenuLayout)}};JsonValue.defaultProps={keyPath:[],deep:0,handleUpdateValue:()=>Promise.resolve(),editButtonElement:react.createElement("button",null,"e"),cancelButtonElement:react.createElement("button",null,"c"),minusMenuElement:react.createElement("span",null," - ")};var object={minus:{color:"red"},plus:{color:"green"},collapsed:{color:"grey"},delimiter:{},ul:{padding:"0px",margin:"0 0 0 25px",listStyle:"none"},name:{color:"#2287CD"},addForm:{}},array={minus:{color:"red"},plus:{color:"green"},collapsed:{color:"grey"},delimiter:{},ul:{padding:"0px",margin:"0 0 0 25px",listStyle:"none"},name:{color:"#2287CD"},addForm:{}},value={minus:{color:"red"},editForm:{},value:{color:"#7bba3d"},li:{minHeight:"22px",lineHeight:"22px",outline:"0px"},name:{color:"#2287CD"}};var JsonTree=class extends react.Component{constructor(props){super(props),this.state={data:props.data,rootName:props.rootName},this.onUpdate=this.onUpdate.bind(this),this.removeRoot=this.removeRoot.bind(this)}static getDerivedStateFromProps(props,state){return props.data!==state.data||props.rootName!==state.rootName?{data:props.data,rootName:props.rootName}:null}onUpdate(key,data){this.setState({data}),this.props.onFullyUpdate(data)}removeRoot(){this.onUpdate(null,null)}render(){let{data,rootName}=this.state,{isCollapsed,onDeltaUpdate,readOnly,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElement,textareaElement,minusMenuElement,plusMenuElement,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser,fallback=null}=this.props,dataType=getObjectType(data),readOnlyFunction=readOnly;"Boolean"===getObjectType(readOnly)&&(readOnlyFunction=()=>readOnly);let inputElementFunction=inputElement;inputElement&&"Function"!==getObjectType(inputElement)&&(inputElementFunction=()=>inputElement);let textareaElementFunction=textareaElement;return textareaElement&&"Function"!==getObjectType(textareaElement)&&(textareaElementFunction=()=>textareaElement),"Object"===dataType||"Array"===dataType?react.createElement("div",{className:"rejt-tree"},react.createElement(JsonNode,{data,name:rootName,deep:-1,isCollapsed,onUpdate:this.onUpdate,onDeltaUpdate,readOnly:readOnlyFunction,getStyle,addButtonElement,cancelButtonElement,editButtonElement,inputElementGenerator:inputElementFunction,textareaElementGenerator:textareaElementFunction,minusMenuElement,plusMenuElement,handleRemove:this.removeRoot,beforeRemoveAction,beforeAddAction,beforeUpdateAction,logger:logger4,onSubmitValueParser})):fallback}};JsonTree.defaultProps={rootName:"root",isCollapsed:(keyPath,deep)=>-1!==deep,getStyle:(keyName,data,keyPath,deep,dataType)=>{switch(dataType){case"Object":case"Error":return object;case"Array":return array;default:return value}},readOnly:()=>!1,onFullyUpdate:()=>{},onDeltaUpdate:()=>{},beforeRemoveAction:()=>Promise.resolve(),beforeAddAction:()=>Promise.resolve(),beforeUpdateAction:()=>Promise.resolve(),logger:{error:()=>{}},onSubmitValueParser:(isEditMode,keyPath,deep,name,rawValue)=>function parse3(string){let result=string;if(0===result.indexOf("function"))return(0,eval)(`(${result})`);try{result=JSON.parse(string)}catch{}return result}(rawValue),inputElement:()=>react.createElement("input",null),textareaElement:()=>react.createElement("textarea",null),fallback:null};var{window:globalWindow2}=global_dist.global,Wrapper6=dist.I4.div((({theme})=>({position:"relative",display:"flex",".rejt-tree":{marginLeft:"1rem",fontSize:"13px"},".rejt-value-node, .rejt-object-node > .rejt-collapsed, .rejt-array-node > .rejt-collapsed, .rejt-object-node > .rejt-not-collapsed, .rejt-array-node > .rejt-not-collapsed":{"& > svg":{opacity:0,transition:"opacity 0.2s"}},".rejt-value-node:hover, .rejt-object-node:hover > .rejt-collapsed, .rejt-array-node:hover > .rejt-collapsed, .rejt-object-node:hover > .rejt-not-collapsed, .rejt-array-node:hover > .rejt-not-collapsed":{"& > svg":{opacity:1}},".rejt-edit-form button":{display:"none"},".rejt-add-form":{marginLeft:10},".rejt-add-value-node":{display:"inline-flex",alignItems:"center"},".rejt-name":{lineHeight:"22px"},".rejt-not-collapsed-delimiter":{lineHeight:"22px"},".rejt-plus-menu":{marginLeft:5},".rejt-object-node > span > *, .rejt-array-node > span > *":{position:"relative",zIndex:2},".rejt-object-node, .rejt-array-node":{position:"relative"},".rejt-object-node > span:first-of-type::after, .rejt-array-node > span:first-of-type::after, .rejt-collapsed::before, .rejt-not-collapsed::before":{content:'""',position:"absolute",top:0,display:"block",width:"100%",marginLeft:"-1rem",padding:"0 4px 0 1rem",height:22},".rejt-collapsed::before, .rejt-not-collapsed::before":{zIndex:1,background:"transparent",borderRadius:4,transition:"background 0.2s",pointerEvents:"none",opacity:.1},".rejt-object-node:hover, .rejt-array-node:hover":{"& > .rejt-collapsed::before, & > .rejt-not-collapsed::before":{background:theme.color.secondary}},".rejt-collapsed::after, .rejt-not-collapsed::after":{content:'""',position:"absolute",display:"inline-block",pointerEvents:"none",width:0,height:0},".rejt-collapsed::after":{left:-8,top:8,borderTop:"3px solid transparent",borderBottom:"3px solid transparent",borderLeft:"3px solid rgba(153,153,153,0.6)"},".rejt-not-collapsed::after":{left:-10,top:10,borderTop:"3px solid rgba(153,153,153,0.6)",borderLeft:"3px solid transparent",borderRight:"3px solid transparent"},".rejt-value":{display:"inline-block",border:"1px solid transparent",borderRadius:4,margin:"1px 0",padding:"0 4px",cursor:"text",color:theme.color.defaultText},".rejt-value-node:hover > .rejt-value":{background:theme.color.lighter,borderColor:theme.appBorderColor}}))),ButtonInline=dist.I4.button((({theme,primary})=>({border:0,height:20,margin:1,borderRadius:4,background:primary?theme.color.secondary:"transparent",color:primary?theme.color.lightest:theme.color.dark,fontWeight:primary?"bold":"normal",cursor:"pointer",order:primary?"initial":9}))),ActionAddIcon=(0,dist.I4)(icons_dist.REV)((({theme,disabled})=>({display:"inline-block",verticalAlign:"middle",width:15,height:15,padding:3,marginLeft:5,cursor:disabled?"not-allowed":"pointer",color:theme.textMutedColor,"&:hover":disabled?{}:{color:theme.color.ancillary},"svg + &":{marginLeft:0}}))),ActionSubstractIcon=(0,dist.I4)(icons_dist.Qpb)((({theme,disabled})=>({display:"inline-block",verticalAlign:"middle",width:15,height:15,padding:3,marginLeft:5,cursor:disabled?"not-allowed":"pointer",color:theme.textMutedColor,"&:hover":disabled?{}:{color:theme.color.negative},"svg + &":{marginLeft:0}}))),Input=dist.I4.input((({theme,placeholder})=>({outline:0,margin:placeholder?1:"1px 0",padding:"3px 4px",color:theme.color.defaultText,background:theme.background.app,border:`1px solid ${theme.appBorderColor}`,borderRadius:4,lineHeight:"14px",width:"Key"===placeholder?80:120,"&:focus":{border:`1px solid ${theme.color.secondary}`}}))),RawButton=(0,dist.I4)(components_dist.K0)((({theme})=>({position:"absolute",zIndex:2,top:2,right:2,height:21,padding:"0 3px",background:theme.background.bar,border:`1px solid ${theme.appBorderColor}`,borderRadius:3,color:theme.textMutedColor,fontSize:"9px",fontWeight:"bold",textDecoration:"none",span:{marginLeft:3,marginTop:1}}))),RawInput=(0,dist.I4)(components_dist.lV.Textarea)((({theme})=>({flex:1,padding:"7px 6px",fontFamily:theme.typography.fonts.mono,fontSize:"12px",lineHeight:"18px","&::placeholder":{fontFamily:theme.typography.fonts.base,fontSize:"13px"},"&:placeholder-shown":{padding:"7px 10px"}}))),ENTER_EVENT={bubbles:!0,cancelable:!0,key:"Enter",code:"Enter",keyCode:13},dispatchEnterKey=event=>{event.currentTarget.dispatchEvent(new globalWindow2.KeyboardEvent("keydown",ENTER_EVENT))},selectValue=event=>{event.currentTarget.select()},getCustomStyleFunction=theme=>()=>({name:{color:theme.color.secondary},collapsed:{color:theme.color.dark},ul:{listStyle:"none",margin:"0 0 0 1rem",padding:0},li:{outline:0}}),ObjectControl=({name,value:value2,onChange})=>{let theme=(0,dist.DP)(),data=(0,react.useMemo)((()=>value2&&cloneDeep(value2)),[value2]),hasData=null!=data,[showRaw,setShowRaw]=(0,react.useState)(!hasData),[parseError,setParseError]=(0,react.useState)(null),updateRaw=(0,react.useCallback)((raw=>{try{raw&&onChange(JSON.parse(raw)),setParseError(void 0)}catch(e){setParseError(e)}}),[onChange]),[forceVisible,setForceVisible]=(0,react.useState)(!1),onForceVisible=(0,react.useCallback)((()=>{onChange({}),setForceVisible(!0)}),[setForceVisible]),htmlElRef=(0,react.useRef)(null);if((0,react.useEffect)((()=>{forceVisible&&htmlElRef.current&&htmlElRef.current.select()}),[forceVisible]),!hasData)return react.createElement(components_dist.$n,{id:(0,chunk_GWAJ4KRU.Y)(name),onClick:onForceVisible},"Set object");let rawJSONForm=react.createElement(RawInput,{ref:htmlElRef,id:(0,chunk_GWAJ4KRU.Z)(name),name,defaultValue:null===value2?"":JSON.stringify(value2,null,2),onBlur:event=>updateRaw(event.target.value),placeholder:"Edit JSON string...",autoFocus:forceVisible,valid:parseError?"error":null}),isObjectOrArray=Array.isArray(value2)||"object"==typeof value2&&value2?.constructor===Object;return react.createElement(Wrapper6,null,isObjectOrArray&&react.createElement(RawButton,{onClick:e=>{e.preventDefault(),setShowRaw((v=>!v))}},showRaw?react.createElement(icons_dist.dbI,null):react.createElement(icons_dist.bMW,null),react.createElement("span",null,"RAW")),showRaw?rawJSONForm:react.createElement(JsonTree,{readOnly:!isObjectOrArray,isCollapsed:isObjectOrArray?void 0:()=>!0,data,rootName:name,onFullyUpdate:onChange,getStyle:getCustomStyleFunction(theme),cancelButtonElement:react.createElement(ButtonInline,{type:"button"},"Cancel"),editButtonElement:react.createElement(ButtonInline,{type:"submit"},"Save"),addButtonElement:react.createElement(ButtonInline,{type:"submit",primary:!0},"Save"),plusMenuElement:react.createElement(ActionAddIcon,null),minusMenuElement:react.createElement(ActionSubstractIcon,null),inputElement:(_,__,___,key)=>key?react.createElement(Input,{onFocus:selectValue,onBlur:dispatchEnterKey}):react.createElement(Input,null),fallback:rawJSONForm}))},RangeInput=dist.I4.input((({theme,min,max,value:value2})=>({"&":{width:"100%",backgroundColor:"transparent",appearance:"none"},"&::-webkit-slider-runnable-track":{background:"light"===theme.base?`linear-gradient(to right, \n            ${theme.color.green} 0%, ${theme.color.green} ${(value2-min)/(max-min)*100}%, \n            ${curriedDarken$1(.02,theme.input.background)} ${(value2-min)/(max-min)*100}%, \n            ${curriedDarken$1(.02,theme.input.background)} 100%)`:`linear-gradient(to right, \n            ${theme.color.green} 0%, ${theme.color.green} ${(value2-min)/(max-min)*100}%, \n            ${curriedLighten$1(.02,theme.input.background)} ${(value2-min)/(max-min)*100}%, \n            ${curriedLighten$1(.02,theme.input.background)} 100%)`,boxShadow:`${theme.appBorderColor} 0 0 0 1px inset`,borderRadius:6,width:"100%",height:6,cursor:"pointer"},"&::-webkit-slider-thumb":{marginTop:"-6px",width:16,height:16,border:`1px solid ${rgba(theme.appBorderColor,.2)}`,borderRadius:"50px",boxShadow:`0 1px 3px 0px ${rgba(theme.appBorderColor,.2)}`,cursor:"grab",appearance:"none",background:`${theme.input.background}`,transition:"all 150ms ease-out","&:hover":{background:`${curriedDarken$1(.05,theme.input.background)}`,transform:"scale3d(1.1, 1.1, 1.1) translateY(-1px)",transition:"all 50ms ease-out"},"&:active":{background:`${theme.input.background}`,transform:"scale3d(1, 1, 1) translateY(0px)",cursor:"grabbing"}},"&:focus":{outline:"none","&::-webkit-slider-runnable-track":{borderColor:rgba(theme.color.secondary,.4)},"&::-webkit-slider-thumb":{borderColor:theme.color.secondary,boxShadow:`0 0px 5px 0px ${theme.color.secondary}`}},"&::-moz-range-track":{background:"light"===theme.base?`linear-gradient(to right, \n            ${theme.color.green} 0%, ${theme.color.green} ${(value2-min)/(max-min)*100}%, \n            ${curriedDarken$1(.02,theme.input.background)} ${(value2-min)/(max-min)*100}%, \n            ${curriedDarken$1(.02,theme.input.background)} 100%)`:`linear-gradient(to right, \n            ${theme.color.green} 0%, ${theme.color.green} ${(value2-min)/(max-min)*100}%, \n            ${curriedLighten$1(.02,theme.input.background)} ${(value2-min)/(max-min)*100}%, \n            ${curriedLighten$1(.02,theme.input.background)} 100%)`,boxShadow:`${theme.appBorderColor} 0 0 0 1px inset`,borderRadius:6,width:"100%",height:6,cursor:"pointer",outline:"none"},"&::-moz-range-thumb":{width:16,height:16,border:`1px solid ${rgba(theme.appBorderColor,.2)}`,borderRadius:"50px",boxShadow:`0 1px 3px 0px ${rgba(theme.appBorderColor,.2)}`,cursor:"grab",background:`${theme.input.background}`,transition:"all 150ms ease-out","&:hover":{background:`${curriedDarken$1(.05,theme.input.background)}`,transform:"scale3d(1.1, 1.1, 1.1) translateY(-1px)",transition:"all 50ms ease-out"},"&:active":{background:`${theme.input.background}`,transform:"scale3d(1, 1, 1) translateY(0px)",cursor:"grabbing"}},"&::-ms-track":{background:"light"===theme.base?`linear-gradient(to right, \n            ${theme.color.green} 0%, ${theme.color.green} ${(value2-min)/(max-min)*100}%, \n            ${curriedDarken$1(.02,theme.input.background)} ${(value2-min)/(max-min)*100}%, \n            ${curriedDarken$1(.02,theme.input.background)} 100%)`:`linear-gradient(to right, \n            ${theme.color.green} 0%, ${theme.color.green} ${(value2-min)/(max-min)*100}%, \n            ${curriedLighten$1(.02,theme.input.background)} ${(value2-min)/(max-min)*100}%, \n            ${curriedLighten$1(.02,theme.input.background)} 100%)`,boxShadow:`${theme.appBorderColor} 0 0 0 1px inset`,color:"transparent",width:"100%",height:"6px",cursor:"pointer"},"&::-ms-fill-lower":{borderRadius:6},"&::-ms-fill-upper":{borderRadius:6},"&::-ms-thumb":{width:16,height:16,background:`${theme.input.background}`,border:`1px solid ${rgba(theme.appBorderColor,.2)}`,borderRadius:50,cursor:"grab",marginTop:0},"@supports (-ms-ime-align:auto)":{"input[type=range]":{margin:"0"}}}))),RangeLabel=dist.I4.span({paddingLeft:5,paddingRight:5,fontSize:12,whiteSpace:"nowrap",fontFeatureSettings:"tnum",fontVariantNumeric:"tabular-nums"}),RangeCurrentAndMaxLabel=(0,dist.I4)(RangeLabel)((({numberOFDecimalsPlaces,max})=>({width:`${numberOFDecimalsPlaces+2*max.toString().length+3}ch`,textAlign:"right",flexShrink:0}))),RangeWrapper=dist.I4.div({display:"flex",alignItems:"center",width:"100%"});var Wrapper7=dist.I4.label({display:"flex"}),MaxLength=dist.I4.div((({isMaxed})=>({marginLeft:"0.75rem",paddingTop:"0.35rem",color:isMaxed?"red":void 0}))),FileInput=(0,dist.I4)(components_dist.lV.Input)({padding:10});var LazyColorControl=(0,react.lazy)((()=>__webpack_require__.e(8195).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/addon-docs/node_modules/@storybook/blocks/dist/Color-RQJUDNI5.mjs")))),Controls2={array:ObjectControl,object:ObjectControl,boolean:({name,value:value2,onChange,onBlur,onFocus})=>{let onSetFalse=(0,react.useCallback)((()=>onChange(!1)),[onChange]);if(void 0===value2)return react.createElement(components_dist.$n,{variant:"outline",size:"medium",id:(0,chunk_GWAJ4KRU.Y)(name),onClick:onSetFalse},"Set boolean");let controlId=(0,chunk_GWAJ4KRU.Z)(name),parsedValue="string"==typeof value2?(value2=>"true"===value2)(value2):value2;return react.createElement(Label,{htmlFor:controlId,"aria-label":name},react.createElement("input",{id:controlId,type:"checkbox",onChange:e=>onChange(e.target.checked),checked:parsedValue,role:"switch",name,onBlur,onFocus}),react.createElement("span",{"aria-hidden":"true"},"False"),react.createElement("span",{"aria-hidden":"true"},"True"))},color:props=>react.createElement(react.Suspense,{fallback:react.createElement("div",null)},react.createElement(LazyColorControl,{...props})),date:({name,value:value2,onChange,onFocus,onBlur})=>{let[valid,setValid]=(0,react.useState)(!0),dateRef=(0,react.useRef)(),timeRef=(0,react.useRef)();(0,react.useEffect)((()=>{!1!==valid&&(dateRef&&dateRef.current&&(dateRef.current.value=(value2=>{let date=new Date(value2);return`${`000${date.getFullYear()}`.slice(-4)}-${`0${date.getMonth()+1}`.slice(-2)}-${`0${date.getDate()}`.slice(-2)}`})(value2)),timeRef&&timeRef.current&&(timeRef.current.value=(value2=>{let date=new Date(value2);return`${`0${date.getHours()}`.slice(-2)}:${`0${date.getMinutes()}`.slice(-2)}`})(value2)))}),[value2]);let controlId=(0,chunk_GWAJ4KRU.Z)(name);return react.createElement(FlexSpaced,null,react.createElement(components_dist.lV.Input,{type:"date",max:"9999-12-31",ref:dateRef,id:`${controlId}-date`,name:`${controlId}-date`,onChange:e=>{let parsed=(value2=>{let[year,month,day]=value2.split("-"),result=new Date;return result.setFullYear(parseInt(year,10),parseInt(month,10)-1,parseInt(day,10)),result})(e.target.value),result=new Date(value2);result.setFullYear(parsed.getFullYear(),parsed.getMonth(),parsed.getDate());let time=result.getTime();time&&onChange(time),setValid(!!time)},onFocus,onBlur}),react.createElement(components_dist.lV.Input,{type:"time",id:`${controlId}-time`,name:`${controlId}-time`,ref:timeRef,onChange:e=>{let parsed=(value2=>{let[hours,minutes]=value2.split(":"),result=new Date;return result.setHours(parseInt(hours,10)),result.setMinutes(parseInt(minutes,10)),result})(e.target.value),result=new Date(value2);result.setHours(parsed.getHours()),result.setMinutes(parsed.getMinutes());let time=result.getTime();time&&onChange(time),setValid(!!time)},onFocus,onBlur}),valid?null:react.createElement("div",null,"invalid"))},number:({name,value:value2,onChange,min,max,step,onBlur,onFocus})=>{let[inputValue,setInputValue]=(0,react.useState)("number"==typeof value2?value2:""),[forceVisible,setForceVisible]=(0,react.useState)(!1),[parseError,setParseError]=(0,react.useState)(null),handleChange=(0,react.useCallback)((event=>{setInputValue(event.target.value);let result=parseFloat(event.target.value);Number.isNaN(result)?setParseError(new Error(`'${event.target.value}' is not a number`)):(onChange(result),setParseError(null))}),[onChange,setParseError]),onForceVisible=(0,react.useCallback)((()=>{setInputValue("0"),onChange(0),setForceVisible(!0)}),[setForceVisible]),htmlElRef=(0,react.useRef)(null);return(0,react.useEffect)((()=>{forceVisible&&htmlElRef.current&&htmlElRef.current.select()}),[forceVisible]),(0,react.useEffect)((()=>{inputValue!==("number"==typeof value2?value2:"")&&setInputValue(value2)}),[value2]),forceVisible||void 0!==value2?react.createElement(Wrapper3,null,react.createElement(components_dist.lV.Input,{ref:htmlElRef,id:(0,chunk_GWAJ4KRU.Z)(name),type:"number",onChange:handleChange,size:"flex",placeholder:"Edit number...",value:inputValue,valid:parseError?"error":null,autoFocus:forceVisible,name,min,max,step,onFocus,onBlur})):react.createElement(components_dist.$n,{variant:"outline",size:"medium",id:(0,chunk_GWAJ4KRU.Y)(name),onClick:onForceVisible},"Set number")},check:OptionsControl,"inline-check":OptionsControl,radio:OptionsControl,"inline-radio":OptionsControl,select:OptionsControl,"multi-select":OptionsControl,range:({name,value:value2,onChange,min=0,max=100,step=1,onBlur,onFocus})=>{let hasValue=void 0!==value2,numberOFDecimalsPlaces=(0,react.useMemo)((()=>function getNumberOfDecimalPlaces(number){let match=number.toString().match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return match?Math.max(0,(match[1]?match[1].length:0)-(match[2]?+match[2]:0)):0}(step)),[step]);return react.createElement(RangeWrapper,null,react.createElement(RangeLabel,null,min),react.createElement(RangeInput,{id:(0,chunk_GWAJ4KRU.Z)(name),type:"range",onChange:event=>{onChange((value2=>{let result=parseFloat(value2);return Number.isNaN(result)?void 0:result})(event.target.value))},name,value:value2,min,max,step,onFocus,onBlur}),react.createElement(RangeCurrentAndMaxLabel,{numberOFDecimalsPlaces,max},hasValue?value2.toFixed(numberOFDecimalsPlaces):"--"," / ",max))},text:({name,value:value2,onChange,onFocus,onBlur,maxLength})=>{let[forceVisible,setForceVisible]=(0,react.useState)(!1),onForceVisible=(0,react.useCallback)((()=>{onChange(""),setForceVisible(!0)}),[setForceVisible]);if(void 0===value2)return react.createElement(components_dist.$n,{variant:"outline",size:"medium",id:(0,chunk_GWAJ4KRU.Y)(name),onClick:onForceVisible},"Set string");let isValid="string"==typeof value2;return react.createElement(Wrapper7,null,react.createElement(components_dist.lV.Textarea,{id:(0,chunk_GWAJ4KRU.Z)(name),maxLength,onChange:event=>{onChange(event.target.value)},size:"flex",placeholder:"Edit string...",autoFocus:forceVisible,valid:isValid?null:"error",name,value:isValid?value2:"",onFocus,onBlur}),maxLength&&react.createElement(MaxLength,{isMaxed:value2?.length===maxLength},value2?.length??0," / ",maxLength))},file:({onChange,name,accept="image/*",value:value2})=>{let inputElement=(0,react.useRef)(null);return(0,react.useEffect)((()=>{null==value2&&inputElement.current&&(inputElement.current.value=null)}),[value2,name]),react.createElement(FileInput,{ref:inputElement,id:(0,chunk_GWAJ4KRU.Z)(name),type:"file",name,multiple:!0,onChange:function handleFileChange(e){if(!e.target.files)return;let fileUrls=Array.from(e.target.files).map((file=>URL.createObjectURL(file)));onChange(fileUrls),function revokeOldUrls(urls){urls.forEach((url=>{url.startsWith("blob:")&&URL.revokeObjectURL(url)}))}(value2)},accept,size:"flex"})}},NoControl=()=>react.createElement(react.Fragment,null,"-"),ArgControl=({row,arg,updateArgs,isHovered})=>{let{key,control}=row,[isFocused,setFocused]=(0,react.useState)(!1),[boxedValue,setBoxedValue]=(0,react.useState)({value:arg});(0,react.useEffect)((()=>{isFocused||setBoxedValue({value:arg})}),[isFocused,arg]);let onChange=(0,react.useCallback)((argVal=>(setBoxedValue({value:argVal}),updateArgs({[key]:argVal}),argVal)),[updateArgs,key]),onBlur=(0,react.useCallback)((()=>setFocused(!1)),[]),onFocus=(0,react.useCallback)((()=>setFocused(!0)),[]);if(!control||control.disabled){return isHovered&&(!0!==control?.disabled&&"function"!==row?.type?.name)?react.createElement(components_dist.N_,{href:"https://storybook.js.org/docs/react/essentials/controls",target:"_blank",withArrow:!0},"Setup controls"):react.createElement(NoControl,null)}let props={name:key,argType:row,value:boxedValue.value,onChange,onBlur,onFocus},Control=Controls2[control.type]||NoControl;return react.createElement(Control,{...props,...control,controlType:control.type})},Name=dist.I4.span({fontWeight:"bold"}),Required=dist.I4.span((({theme})=>({color:theme.color.negative,fontFamily:theme.typography.fonts.mono,cursor:"help"}))),Description=dist.I4.div((({theme})=>({"&&":{p:{margin:"0 0 10px 0"},a:{color:theme.color.secondary}},code:{...(0,components_dist.zb)({theme}),fontSize:12,fontFamily:theme.typography.fonts.mono},"& code":{margin:0,display:"inline-block"},"& pre > code":{whiteSpace:"pre-wrap"}}))),Type=dist.I4.div((({theme,hasDescription})=>({color:"light"===theme.base?curriedTransparentize$1(.1,theme.color.defaultText):curriedTransparentize$1(.2,theme.color.defaultText),marginTop:hasDescription?4:0}))),TypeWithJsDoc=dist.I4.div((({theme,hasDescription})=>({color:"light"===theme.base?curriedTransparentize$1(.1,theme.color.defaultText):curriedTransparentize$1(.2,theme.color.defaultText),marginTop:hasDescription?12:0,marginBottom:12}))),StyledTd=dist.I4.td((({theme,expandable})=>({paddingLeft:expandable?"40px !important":"20px !important"}))),ArgRow=props=>{let[isHovered,setIsHovered]=(0,react.useState)(!1),{row,updateArgs,compact,expandable,initialExpandedArgs}=props,{name,description}=row,table=row.table||{},type=table.type||(value2=row.type)&&{summary:"string"==typeof value2?value2:value2.name},defaultValue=table.defaultValue||row.defaultValue,required=row.type?.required,hasDescription=null!=description&&""!==description;var value2;return react.createElement("tr",{onMouseEnter:()=>setIsHovered(!0),onMouseLeave:()=>setIsHovered(!1)},react.createElement(StyledTd,{expandable},react.createElement(Name,null,name),required?react.createElement(Required,{title:"Required"},"*"):null),compact?null:react.createElement("td",null,hasDescription&&react.createElement(Description,null,react.createElement(index_modern,null,description)),null!=table.jsDocTags?react.createElement(react.Fragment,null,react.createElement(TypeWithJsDoc,{hasDescription},react.createElement(ArgValue,{value:type,initialExpandedArgs})),react.createElement(ArgJsDoc,{tags:table.jsDocTags})):react.createElement(Type,{hasDescription},react.createElement(ArgValue,{value:type,initialExpandedArgs}))),compact?null:react.createElement("td",null,react.createElement(ArgValue,{value:defaultValue,initialExpandedArgs})),updateArgs?react.createElement("td",null,react.createElement(ArgControl,{...props,isHovered})):null)},ExpanderIconDown=(0,dist.I4)(icons_dist.D3D)((({theme})=>({marginRight:8,marginLeft:-10,marginTop:-2,height:12,width:12,color:"light"===theme.base?curriedTransparentize$1(.25,theme.color.defaultText):curriedTransparentize$1(.3,theme.color.defaultText),border:"none",display:"inline-block"}))),ExpanderIconRight=(0,dist.I4)(icons_dist.vKP)((({theme})=>({marginRight:8,marginLeft:-10,marginTop:-2,height:12,width:12,color:"light"===theme.base?curriedTransparentize$1(.25,theme.color.defaultText):curriedTransparentize$1(.3,theme.color.defaultText),border:"none",display:"inline-block"}))),FlexWrapper=dist.I4.span((({theme})=>({display:"flex",lineHeight:"20px",alignItems:"center"}))),Section=dist.I4.td((({theme})=>({position:"relative",letterSpacing:"0.35em",textTransform:"uppercase",fontWeight:theme.typography.weight.bold,fontSize:theme.typography.size.s1-1,color:"light"===theme.base?curriedTransparentize$1(.4,theme.color.defaultText):curriedTransparentize$1(.6,theme.color.defaultText),background:`${theme.background.app} !important`,"& ~ td":{background:`${theme.background.app} !important`}}))),Subsection=dist.I4.td((({theme})=>({position:"relative",fontWeight:theme.typography.weight.bold,fontSize:theme.typography.size.s2-1,background:theme.background.app}))),StyledTd2=dist.I4.td((()=>({position:"relative"}))),StyledTr=dist.I4.tr((({theme})=>({"&:hover > td":{backgroundColor:`${curriedLighten$1(.005,theme.background.app)} !important`,boxShadow:`${theme.color.mediumlight} 0 - 1px 0 0 inset`,cursor:"row-resize"}}))),ClickIntercept=dist.I4.button((()=>({background:"none",border:"none",padding:"0",font:"inherit",position:"absolute",top:0,bottom:0,left:0,right:0,height:"100%",width:"100%",color:"transparent",cursor:"row-resize !important"}))),SectionRow=({level="section",label,children,initialExpanded=!0,colSpan=3})=>{let[expanded,setExpanded]=(0,react.useState)(initialExpanded),Level="subsection"===level?Subsection:Section,itemCount=children?.length||0,caption="subsection"===level?`${itemCount} item${1!==itemCount?"s":""}`:"",helperText=`${expanded?"Hide":"Show"} ${"subsection"===level?itemCount:label} item${1!==itemCount?"s":""}`;return react.createElement(react.Fragment,null,react.createElement(StyledTr,{title:helperText},react.createElement(Level,{colSpan:1},react.createElement(ClickIntercept,{onClick:e=>setExpanded(!expanded),tabIndex:0},helperText),react.createElement(FlexWrapper,null,expanded?react.createElement(ExpanderIconDown,null):react.createElement(ExpanderIconRight,null),label)),react.createElement(StyledTd2,{colSpan:colSpan-1},react.createElement(ClickIntercept,{onClick:e=>setExpanded(!expanded),tabIndex:-1,style:{outline:"none"}},helperText),expanded?null:caption)),expanded?children:null)},Row=dist.I4.div((({theme})=>({display:"flex",gap:16,borderBottom:`1px solid ${theme.appBorderColor}`,"&:last-child":{borderBottom:0}}))),Column=dist.I4.div((({numColumn})=>({display:"flex",flexDirection:"column",flex:numColumn||1,gap:5,padding:"12px 20px"}))),SkeletonText=dist.I4.div((({theme,width,height})=>({animation:`${theme.animation.glow} 1.5s ease-in-out infinite`,background:theme.appBorderColor,width:width||"100%",height:height||16,borderRadius:3}))),columnWidth=[2,4,2,2],Skeleton=()=>react.createElement(react.Fragment,null,react.createElement(Row,null,react.createElement(Column,{numColumn:columnWidth[0]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[1]},react.createElement(SkeletonText,{width:"30%"})),react.createElement(Column,{numColumn:columnWidth[2]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[3]},react.createElement(SkeletonText,{width:"60%"}))),react.createElement(Row,null,react.createElement(Column,{numColumn:columnWidth[0]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[1]},react.createElement(SkeletonText,{width:"80%"}),react.createElement(SkeletonText,{width:"30%"})),react.createElement(Column,{numColumn:columnWidth[2]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[3]},react.createElement(SkeletonText,{width:"60%"}))),react.createElement(Row,null,react.createElement(Column,{numColumn:columnWidth[0]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[1]},react.createElement(SkeletonText,{width:"80%"}),react.createElement(SkeletonText,{width:"30%"})),react.createElement(Column,{numColumn:columnWidth[2]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[3]},react.createElement(SkeletonText,{width:"60%"}))),react.createElement(Row,null,react.createElement(Column,{numColumn:columnWidth[0]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[1]},react.createElement(SkeletonText,{width:"80%"}),react.createElement(SkeletonText,{width:"30%"})),react.createElement(Column,{numColumn:columnWidth[2]},react.createElement(SkeletonText,{width:"60%"})),react.createElement(Column,{numColumn:columnWidth[3]},react.createElement(SkeletonText,{width:"60%"})))),Wrapper8=dist.I4.div((({inAddonPanel,theme})=>({height:inAddonPanel?"100%":"auto",display:"flex",border:inAddonPanel?"none":`1px solid ${theme.appBorderColor}`,borderRadius:inAddonPanel?0:theme.appBorderRadius,padding:inAddonPanel?0:40,alignItems:"center",justifyContent:"center",flexDirection:"column",gap:15,background:theme.background.content,boxShadow:"rgba(0, 0, 0, 0.10) 0 1px 3px 0"}))),Content=dist.I4.div({display:"flex",flexDirection:"column",gap:4,maxWidth:415}),Title2=dist.I4.div((({theme})=>({fontWeight:theme.typography.weight.bold,fontSize:theme.typography.size.s2-1,textAlign:"center",color:theme.textColor}))),Description2=dist.I4.div((({theme})=>({fontWeight:theme.typography.weight.regular,fontSize:theme.typography.size.s2-1,textAlign:"center",color:theme.textMutedColor}))),Links=dist.I4.div((({theme})=>({display:"flex",fontSize:theme.typography.size.s2-1,gap:25}))),Divider=dist.I4.div((({theme})=>({width:1,height:16,backgroundColor:theme.appBorderColor}))),Empty=({inAddonPanel})=>{let[isLoading,setIsLoading]=(0,react.useState)(!0);return(0,react.useEffect)((()=>{let load=setTimeout((()=>{setIsLoading(!1)}),100);return()=>clearTimeout(load)}),[]),isLoading?null:react.createElement(Wrapper8,{inAddonPanel},react.createElement(Content,null,react.createElement(Title2,null,inAddonPanel?"Interactive story playground":"Args table with interactive controls couldn't be auto-generated"),react.createElement(Description2,null,"Controls give you an easy to use interface to test your components. Set your story args and you'll see controls appearing here automatically.")),react.createElement(Links,null,inAddonPanel&&react.createElement(react.Fragment,null,react.createElement(components_dist.N_,{href:"https://youtu.be/0gOfS6K0x0E",target:"_blank",withArrow:!0},react.createElement(icons_dist.npA,null)," Watch 5m video"),react.createElement(Divider,null),react.createElement(components_dist.N_,{href:"https://storybook.js.org/docs/essentials/controls",target:"_blank",withArrow:!0},react.createElement(icons_dist.pyG,null)," Read docs")),!inAddonPanel&&react.createElement(components_dist.N_,{href:"https://storybook.js.org/docs/essentials/controls",target:"_blank",withArrow:!0},react.createElement(icons_dist.VAL,null)," Learn how to set that up")))},TableWrapper=dist.I4.table((({theme,compact,inAddonPanel})=>({"&&":{borderSpacing:0,color:theme.color.defaultText,"td, th":{padding:0,border:"none",verticalAlign:"top",textOverflow:"ellipsis"},fontSize:theme.typography.size.s2-1,lineHeight:"20px",textAlign:"left",width:"100%",marginTop:inAddonPanel?0:25,marginBottom:inAddonPanel?0:40,"thead th:first-of-type, td:first-of-type":{width:"25%"},"th:first-of-type, td:first-of-type":{paddingLeft:20},"th:nth-of-type(2), td:nth-of-type(2)":{...compact?null:{width:"35%"}},"td:nth-of-type(3)":{...compact?null:{width:"15%"}},"th:last-of-type, td:last-of-type":{paddingRight:20,...compact?null:{width:"25%"}},th:{color:"light"===theme.base?curriedTransparentize$1(.25,theme.color.defaultText):curriedTransparentize$1(.45,theme.color.defaultText),paddingTop:10,paddingBottom:10,paddingLeft:15,paddingRight:15},td:{paddingTop:"10px",paddingBottom:"10px","&:not(:first-of-type)":{paddingLeft:15,paddingRight:15},"&:last-of-type":{paddingRight:20}},marginLeft:inAddonPanel?0:1,marginRight:inAddonPanel?0:1,tbody:{...inAddonPanel?null:{filter:"light"===theme.base?"drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.10))":"drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.20))"},"> tr > *":{background:theme.background.content,borderTop:`1px solid ${theme.appBorderColor}`},...inAddonPanel?null:{"> tr:first-of-type > *":{borderBlockStart:`1px solid ${theme.appBorderColor}`},"> tr:last-of-type > *":{borderBlockEnd:`1px solid ${theme.appBorderColor}`},"> tr > *:first-of-type":{borderInlineStart:`1px solid ${theme.appBorderColor}`},"> tr > *:last-of-type":{borderInlineEnd:`1px solid ${theme.appBorderColor}`},"> tr:first-of-type > td:first-of-type":{borderTopLeftRadius:theme.appBorderRadius},"> tr:first-of-type > td:last-of-type":{borderTopRightRadius:theme.appBorderRadius},"> tr:last-of-type > td:first-of-type":{borderBottomLeftRadius:theme.appBorderRadius},"> tr:last-of-type > td:last-of-type":{borderBottomRightRadius:theme.appBorderRadius}}}}}))),StyledIconButton=(0,dist.I4)(components_dist.K0)((({theme})=>({color:theme.barTextColor,margin:"-4px -12px -4px 0"}))),ControlHeadingWrapper=dist.I4.span({display:"flex",justifyContent:"space-between"}),sortFns={alpha:(a,b)=>a.name.localeCompare(b.name),requiredFirst:(a,b)=>+!!b.type?.required-+!!a.type?.required||a.name.localeCompare(b.name),none:void 0},ArgsTable=props=>{let{updateArgs,resetArgs,compact,inAddonPanel,initialExpandedArgs,sort="none",isLoading}=props;if("error"in props){let{error}=props;return react.createElement(EmptyBlock,null,error," ",react.createElement(components_dist.N_,{href:"http://storybook.js.org/docs/",target:"_blank",withArrow:!0},react.createElement(icons_dist.pyG,null)," Read the docs"))}if(isLoading)return react.createElement(Skeleton,null);let{rows,args,globals}="rows"in props&&props,groups=((rows,sort)=>{let sections={ungrouped:[],ungroupedSubsections:{},sections:{}};if(!rows)return sections;Object.entries(rows).forEach((([key,row])=>{let{category,subcategory}=row?.table||{};if(category){let section=sections.sections[category]||{ungrouped:[],subsections:{}};if(subcategory){let subsection=section.subsections[subcategory]||[];subsection.push({key,...row}),section.subsections[subcategory]=subsection}else section.ungrouped.push({key,...row});sections.sections[category]=section}else if(subcategory){let subsection=sections.ungroupedSubsections[subcategory]||[];subsection.push({key,...row}),sections.ungroupedSubsections[subcategory]=subsection}else sections.ungrouped.push({key,...row})}));let sortFn=sortFns[sort],sortSubsection=record=>sortFn?Object.keys(record).reduce(((acc,cur)=>({...acc,[cur]:record[cur].sort(sortFn)})),{}):record;return{ungrouped:sections.ungrouped.sort(sortFn),ungroupedSubsections:sortSubsection(sections.ungroupedSubsections),sections:Object.keys(sections.sections).reduce(((acc,cur)=>({...acc,[cur]:{ungrouped:sections.sections[cur].ungrouped.sort(sortFn),subsections:sortSubsection(sections.sections[cur].subsections)}})),{})}})(pickBy(rows,(row=>!row?.table?.disable&&((row,args,globals)=>{try{return(0,csf_dist.hX)(row,args,globals)}catch(err){return client_logger_dist.Oo.warn(err.message),!1}})(row,args||{},globals||{}))),sort),hasNoUngrouped=0===groups.ungrouped.length,hasNoSections=0===Object.entries(groups.sections).length,hasNoUngroupedSubsections=0===Object.entries(groups.ungroupedSubsections).length;if(hasNoUngrouped&&hasNoSections&&hasNoUngroupedSubsections)return react.createElement(Empty,{inAddonPanel});let colSpan=1;updateArgs&&(colSpan+=1),compact||(colSpan+=2);let expandable=Object.keys(groups.sections).length>0,common={updateArgs,compact,inAddonPanel,initialExpandedArgs};return react.createElement(components_dist.dL,null,react.createElement(TableWrapper,{compact,inAddonPanel,className:"docblock-argstable sb-unstyled"},react.createElement("thead",{className:"docblock-argstable-head"},react.createElement("tr",null,react.createElement("th",null,react.createElement("span",null,"Name")),compact?null:react.createElement("th",null,react.createElement("span",null,"Description")),compact?null:react.createElement("th",null,react.createElement("span",null,"Default")),updateArgs?react.createElement("th",null,react.createElement(ControlHeadingWrapper,null,"Control"," ",!isLoading&&resetArgs&&react.createElement(StyledIconButton,{onClick:()=>resetArgs(),title:"Reset controls"},react.createElement(icons_dist.ejX,{"aria-hidden":!0})))):null)),react.createElement("tbody",{className:"docblock-argstable-body"},groups.ungrouped.map((row=>react.createElement(ArgRow,{key:row.key,row,arg:args&&args[row.key],...common}))),Object.entries(groups.ungroupedSubsections).map((([subcategory,subsection])=>react.createElement(SectionRow,{key:subcategory,label:subcategory,level:"subsection",colSpan},subsection.map((row=>react.createElement(ArgRow,{key:row.key,row,arg:args&&args[row.key],expandable,...common})))))),Object.entries(groups.sections).map((([category,section])=>react.createElement(SectionRow,{key:category,label:category,level:"section",colSpan},section.ungrouped.map((row=>react.createElement(ArgRow,{key:row.key,row,arg:args&&args[row.key],...common}))),Object.entries(section.subsections).map((([subcategory,subsection])=>react.createElement(SectionRow,{key:subcategory,label:subcategory,level:"subsection",colSpan},subsection.map((row=>react.createElement(ArgRow,{key:row.key,row,arg:args&&args[row.key],expandable,...common}))))))))))))},TabbedArgsTable=({tabs,...props})=>{let entries=Object.entries(tabs);return 1===entries.length?react.createElement(ArgsTable,{...entries[0][1],...props}):react.createElement(components_dist._j,null,entries.map(((entry,index)=>{let[label,table]=entry,id=`prop_table_div_${label}`,argsTableProps=0===index?props:{sort:props.sort};return react.createElement("div",{key:id,id,title:label},(({active})=>active?react.createElement(ArgsTable,{key:`prop_table_${label}`,...table,...argsTableProps}):null))})))};dist.I4.div((({theme})=>({marginRight:30,fontSize:`${theme.typography.size.s1}px`,color:"light"===theme.base?curriedTransparentize$1(.4,theme.color.defaultText):curriedTransparentize$1(.6,theme.color.defaultText)}))),dist.I4.div({overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"}),dist.I4.div({display:"flex",flexDirection:"row",alignItems:"baseline","&:not(:last-child)":{marginBottom:"1rem"}}),dist.I4.div(components_dist.YV,(({theme})=>({...getBlockBackgroundStyle(theme),margin:"25px 0 40px",padding:"30px 20px"}))),dist.I4.div((({theme})=>({fontWeight:theme.typography.weight.bold,color:theme.color.defaultText}))),dist.I4.div((({theme})=>({color:"light"===theme.base?curriedTransparentize$1(.2,theme.color.defaultText):curriedTransparentize$1(.6,theme.color.defaultText)}))),dist.I4.div({flex:"0 0 30%",lineHeight:"20px",marginTop:5}),dist.I4.div((({theme})=>({flex:1,textAlign:"center",fontFamily:theme.typography.fonts.mono,fontSize:theme.typography.size.s1,lineHeight:1,overflow:"hidden",color:"light"===theme.base?curriedTransparentize$1(.4,theme.color.defaultText):curriedTransparentize$1(.6,theme.color.defaultText),"> div":{display:"inline-block",overflow:"hidden",maxWidth:"100%",textOverflow:"ellipsis"},span:{display:"block",marginTop:2}}))),dist.I4.div({display:"flex",flexDirection:"row"}),dist.I4.div((({background})=>({position:"relative",flex:1,"&::before":{position:"absolute",top:0,left:0,width:"100%",height:"100%",background,content:'""'}}))),dist.I4.div((({theme})=>({...getBlockBackgroundStyle(theme),display:"flex",flexDirection:"row",height:50,marginBottom:5,overflow:"hidden",backgroundColor:"white",backgroundImage:"repeating-linear-gradient(-45deg, #ccc, #ccc 1px, #fff 1px, #fff 16px)",backgroundClip:"padding-box"}))),dist.I4.div({display:"flex",flexDirection:"column",flex:1,position:"relative",marginBottom:30}),dist.I4.div({flex:1,display:"flex",flexDirection:"row"}),dist.I4.div({display:"flex",alignItems:"flex-start"}),dist.I4.div({flex:"0 0 30%"}),dist.I4.div({flex:1}),dist.I4.div((({theme})=>({display:"flex",flexDirection:"row",alignItems:"center",paddingBottom:20,fontWeight:theme.typography.weight.bold,color:"light"===theme.base?curriedTransparentize$1(.4,theme.color.defaultText):curriedTransparentize$1(.6,theme.color.defaultText)}))),dist.I4.div((({theme})=>({fontSize:theme.typography.size.s2,lineHeight:"20px",display:"flex",flexDirection:"column"})));dist.I4.div((({theme})=>({fontFamily:theme.typography.fonts.base,fontSize:theme.typography.size.s2,color:theme.color.defaultText,marginLeft:10,lineHeight:1.2}))),dist.I4.div((({theme})=>({...getBlockBackgroundStyle(theme),overflow:"hidden",height:40,width:40,display:"flex",alignItems:"center",justifyContent:"center",flex:"none","> img, > svg":{width:20,height:20}}))),dist.I4.div({display:"inline-flex",flexDirection:"row",alignItems:"center",flex:"0 1 calc(20% - 10px)",minWidth:120,margin:"0px 10px 30px 0"}),dist.I4.div({display:"flex",flexFlow:"row wrap"});var anchorBlockIdFromId=storyId=>`anchor--${storyId}`,Anchor=({storyId,children})=>react.createElement("div",{id:anchorBlockIdFromId(storyId),className:"sb-anchor"},children);global_dist.global&&void 0===global_dist.global.__DOCS_CONTEXT__&&(global_dist.global.__DOCS_CONTEXT__=(0,react.createContext)(null),global_dist.global.__DOCS_CONTEXT__.displayName="DocsContext");var DocsContext=global_dist.global?global_dist.global.__DOCS_CONTEXT__:(0,react.createContext)(null),useOf=(moduleExportOrType,validTypes)=>(0,react.useContext)(DocsContext).resolveOf(moduleExportOrType,validTypes),getComponentName=component=>{if(component)return"string"==typeof component?component.includes("-")?component.split("-").map((part=>part.charAt(0).toUpperCase()+part.slice(1))).join(""):component:component.__docgenInfo&&component.__docgenInfo.displayName?component.__docgenInfo.displayName:component.name};function argsHash(args){return(0,telejson_dist.stringify)(args,{allowFunction:!1})}var SourceContext=(0,react.createContext)({sources:{}}),SourceContainer=({children,channel})=>{let[sources,setSources]=(0,react.useState)({});return(0,react.useEffect)((()=>{let handleSnippetRendered=(idOrEvent,inputSource=null,inputFormat=!1)=>{let{id,args,source,format:format2}="string"==typeof idOrEvent?{id:idOrEvent,source:inputSource,format:inputFormat}:idOrEvent,hash=args?argsHash(args):"--unknown--";setSources((current=>({...current,[id]:{...current[id],[hash]:{code:source,format:format2}}})))};return channel.on(docs_tools_dist.Op,handleSnippetRendered),()=>channel.off(docs_tools_dist.Op,handleSnippetRendered)}),[]),react.createElement(SourceContext.Provider,{value:{sources}},children)},getSnippet=({snippet,storyContext,typeFromProps,transformFromProps})=>{let{__isArgsStory:isArgsStory}=storyContext.parameters,sourceParameters=storyContext.parameters.docs?.source||{},type=typeFromProps||sourceParameters.type||docs_tools_dist.Y1.AUTO;if(void 0!==sourceParameters.code)return sourceParameters.code;let code=type===docs_tools_dist.Y1.DYNAMIC||type===docs_tools_dist.Y1.AUTO&&snippet&&isArgsStory?snippet:sourceParameters.originalSource||"";return(transformFromProps??sourceParameters.transform)?.(code,storyContext)||code},useSourceProps=(props,docsContext,sourceContext)=>{let story,{of}=props;if("of"in props&&void 0===of)throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");if(of)story=docsContext.resolveOf(of,["story"]).story;else try{story=docsContext.storyById()}catch{}let sourceParameters=story?.parameters?.docs?.source||{},{code}=props,format2=props.format??sourceParameters.format,language=props.language??sourceParameters.language??"jsx",dark=props.dark??sourceParameters.dark??!1;if(!code&&!story)return{error:"Oh no! The source is not available."};if(code)return{code,format:format2,language,dark};let storyContext=docsContext.getStoryContext(story),argsForSource=props.__forceInitialArgs?storyContext.initialArgs:storyContext.unmappedArgs,source=((storyId,args,sourceContext)=>{let{sources}=sourceContext,sourceMap=sources?.[storyId];return sourceMap?.[argsHash(args)]||sourceMap?.["--unknown--"]||{code:""}})(story.id,argsForSource,sourceContext);return format2=source.format??story.parameters.docs?.source?.format??!1,{code:getSnippet({snippet:source.code,storyContext:{...storyContext,args:argsForSource},typeFromProps:props.type,transformFromProps:props.transform}),format:format2,language,dark}};function useStory(storyId,context){let stories=function useStories(storyIds,context){let[storiesById,setStories]=(0,react.useState)({});return(0,react.useEffect)((()=>{Promise.all(storyIds.map((async storyId=>{let story=await context.loadStory(storyId);setStories((current=>current[storyId]===story?current:{...current,[storyId]:story}))})))})),storyIds.map((storyId=>{if(storiesById[storyId])return storiesById[storyId];try{return context.storyById(storyId)}catch{return null}}))}([storyId],context);return stories&&stories[0]}var Story2=(props={__forceInitialArgs:!1,__primary:!1})=>{let context=(0,react.useContext)(DocsContext),storyId=((props,context)=>{let{of,meta}=props;if("of"in props&&void 0===of)throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");return meta&&context.referenceMeta(meta,!1),context.resolveOf(of||"story",["story"]).story.id})(props,context),story=useStory(storyId,context);if(!story)return react.createElement(StorySkeleton,null);let storyProps=((props,story,context)=>{let{parameters={}}=story||{},{docs={}}=parameters,storyParameters=docs.story||{};if(docs.disable)return null;if(props.inline??storyParameters.inline)return{story,inline:!0,height:props.height??storyParameters.height,autoplay:props.autoplay??storyParameters.autoplay??!1,forceInitialArgs:!!props.__forceInitialArgs,primary:!!props.__primary,renderStoryToElement:context.renderStoryToElement};return{story,inline:!1,height:props.height??storyParameters.height??storyParameters.iframeHeight??"100px",primary:!!props.__primary}})(props,story,context);return storyProps?react.createElement(Story,{...storyProps}):null},Canvas=props=>{let docsContext=(0,react.useContext)(DocsContext),sourceContext=(0,react.useContext)(SourceContext),{of,source}=props;if("of"in props&&void 0===of)throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");let{story}=useOf(of||"story",["story"]),sourceProps=useSourceProps({...source,...of&&{of}},docsContext,sourceContext),layout=props.layout??story.parameters.layout??story.parameters.docs?.canvas?.layout??"padded",withToolbar=props.withToolbar??story.parameters.docs?.canvas?.withToolbar??!1,additionalActions=props.additionalActions??story.parameters.docs?.canvas?.additionalActions,sourceState=props.sourceState??story.parameters.docs?.canvas?.sourceState??"hidden",className=props.className??story.parameters.docs?.canvas?.className;return react.createElement(Preview,{withSource:"none"===sourceState?void 0:sourceProps,isExpanded:"shown"===sourceState,withToolbar,additionalActions,className,layout},react.createElement(Story2,{of:of||story.moduleExport,meta:props.meta,...props.story}))},useArgsIfDefined=(story,context)=>{let storyContext=story?context.getStoryContext(story):{args:{}},{id:storyId}=story||{id:"none"},[args,setArgs]=(0,react.useState)(storyContext.args);(0,react.useEffect)((()=>{let onArgsUpdated=changed=>{changed.storyId===storyId&&setArgs(changed.args)};return context.channel.on(core_events_dist.STORY_ARGS_UPDATED,onArgsUpdated),()=>context.channel.off(core_events_dist.STORY_ARGS_UPDATED,onArgsUpdated)}),[storyId,context.channel]);let updateArgs=(0,react.useCallback)((updatedArgs=>context.channel.emit(core_events_dist.UPDATE_STORY_ARGS,{storyId,updatedArgs})),[storyId,context.channel]),resetArgs=(0,react.useCallback)((argNames=>context.channel.emit(core_events_dist.RESET_STORY_ARGS,{storyId,argNames})),[storyId,context.channel]);return story&&[args,updateArgs,resetArgs]};function extractComponentArgTypes2(component,parameters){let{extractArgTypes}=parameters.docs||{};if(!extractArgTypes)throw new Error("Args unsupported. See Args documentation for your framework.");return extractArgTypes(component)}var Controls3=props=>{let{of}=props;if("of"in props&&void 0===of)throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");let context=(0,react.useContext)(DocsContext),{story}=context.resolveOf(of||"story",["story"]),{parameters,argTypes,component,subcomponents}=story,controlsParameters=parameters.docs?.controls||{},include=props.include??controlsParameters.include,exclude=props.exclude??controlsParameters.exclude,sort=props.sort??controlsParameters.sort,[args,updateArgs,resetArgs]=((story,context)=>{let result=useArgsIfDefined(story,context);if(!result)throw new Error("No result when story was defined");return result})(story,context),[globals]=((story,context)=>{let storyContext=context.getStoryContext(story),[globals,setGlobals]=(0,react.useState)(storyContext.globals);return(0,react.useEffect)((()=>{let onGlobalsUpdated=changed=>{setGlobals(changed.globals)};return context.channel.on(core_events_dist.GLOBALS_UPDATED,onGlobalsUpdated),()=>context.channel.off(core_events_dist.GLOBALS_UPDATED,onGlobalsUpdated)}),[context.channel]),[globals]})(story,context),filteredArgTypes=(0,preview_api_dist.CR)(argTypes,include,exclude);if(!(subcomponents&&Object.keys(subcomponents).length>0))return Object.keys(filteredArgTypes).length>0||Object.keys(args).length>0?react.createElement(ArgsTable,{rows:filteredArgTypes,sort,args,globals,updateArgs,resetArgs}):null;let mainComponentName=getComponentName(component),subcomponentTabs=(0,lodash.mapValues)(subcomponents,(comp=>({rows:(0,preview_api_dist.CR)(extractComponentArgTypes2(comp,parameters),include,exclude),sort}))),tabs={[mainComponentName]:{rows:filteredArgTypes,sort},...subcomponentTabs};return react.createElement(TabbedArgsTable,{tabs,sort,args,globals,updateArgs,resetArgs})},{document:document2}=global_dist.global,CodeOrSourceMdx=({className,children,...rest})=>{if("string"!=typeof className&&("string"!=typeof children||!children.match(/[\n\r]/g)))return react.createElement(components_dist.Cy,null,children);let language=className&&className.split("-");return react.createElement(Source,{language:language&&language[1]||"text",format:!1,code:children,...rest})};function dist_navigate(context,url){context.channel.emit(core_events_dist.NAVIGATE_URL,url)}var DescriptionType2,dist_A=components_dist.dK.a,AnchorInPage=({hash,children})=>{let context=(0,react.useContext)(DocsContext);return react.createElement(dist_A,{href:hash,target:"_self",onClick:event=>{let id=hash.substring(1);document2.getElementById(id)&&dist_navigate(context,hash)}},children)},AnchorMdx=props=>{let{href,target,children,...rest}=props,context=(0,react.useContext)(DocsContext);if(href){if(href.startsWith("#"))return react.createElement(AnchorInPage,{hash:href},children);if("_blank"!==target&&!href.startsWith("https://"))return react.createElement(dist_A,{href,onClick:event=>{0===event.button&&!event.altKey&&!event.ctrlKey&&!event.metaKey&&!event.shiftKey&&(event.preventDefault(),dist_navigate(context,event.currentTarget.getAttribute("href")))},target,...rest},children)}return react.createElement(dist_A,{...props})},SUPPORTED_MDX_HEADERS=["h1","h2","h3","h4","h5","h6"],OcticonHeaders=SUPPORTED_MDX_HEADERS.reduce(((acc,headerType)=>({...acc,[headerType]:(0,dist.I4)(headerType)({"& svg":{position:"relative",top:"-0.1em",visibility:"hidden"},"&:hover svg":{visibility:"visible"}})})),{}),OcticonAnchor=dist.I4.a((()=>({float:"left",lineHeight:"inherit",paddingRight:"10px",marginLeft:"-24px",color:"inherit"}))),HeaderWithOcticonAnchor=({as,id,children,...rest})=>{let context=(0,react.useContext)(DocsContext),OcticonHeader=OcticonHeaders[as],hash=`#${id}`;return react.createElement(OcticonHeader,{id,...rest},react.createElement(OcticonAnchor,{"aria-hidden":"true",href:hash,tabIndex:-1,target:"_self",onClick:event=>{document2.getElementById(id)&&dist_navigate(context,hash)}},react.createElement(icons_dist.qYV,null)),children)},HeaderMdx=props=>{let{as,id,children,...rest}=props;if(id)return react.createElement(HeaderWithOcticonAnchor,{as,id,...rest},children);let Component4=as,{as:omittedAs,...withoutAs}=props;return react.createElement(Component4,{...(0,components_dist.mc)(withoutAs,as)})},HeadersMdx=SUPPORTED_MDX_HEADERS.reduce(((acc,headerType)=>({...acc,[headerType]:props=>react.createElement(HeaderMdx,{as:headerType,...props})})),{}),Markdown2=props=>{if(!props.children)return null;if("string"!=typeof props.children)throw new Error(esm.default`The Markdown block only accepts children as a single string, but children were of type: '${typeof props.children}'
        This is often caused by not wrapping the child in a template string.
        
        This is invalid:
        <Markdown>
          # Some heading
          A paragraph
        </Markdown>

        Instead do:
        <Markdown>
        {\`
          # Some heading
          A paragraph
        \`}
        </Markdown>
      `);return react.createElement(index_modern,{...props,options:{forceBlock:!0,overrides:{code:CodeOrSourceMdx,a:AnchorMdx,...HeadersMdx,...props?.options?.overrides},...props?.options}})},DescriptionType=((DescriptionType2=DescriptionType||{}).INFO="info",DescriptionType2.NOTES="notes",DescriptionType2.DOCGEN="docgen",DescriptionType2.AUTO="auto",DescriptionType2),DescriptionContainer=props=>{let{of}=props;if("of"in props&&void 0===of)throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");let markdown=(resolvedOf=>{switch(resolvedOf.type){case"story":return resolvedOf.story.parameters.docs?.description?.story||null;case"meta":{let{parameters,component}=resolvedOf.preparedMeta,metaDescription=parameters.docs?.description?.component;return metaDescription||parameters.docs?.extractComponentDescription?.(component,{component,parameters})||null}case"component":{let{component,projectAnnotations:{parameters}}=resolvedOf;return parameters.docs?.extractComponentDescription?.(component,{component,parameters})||null}default:throw new Error(`Unrecognized module type resolved from 'useOf', got: ${resolvedOf.type}`)}})(useOf(of||"meta"));return markdown?react.createElement(Markdown2,null,markdown):null},Wrapper10=dist.I4.div((({theme})=>({width:"10rem","@media (max-width: 768px)":{display:"none"}}))),Content2=dist.I4.div((({theme})=>({position:"fixed",bottom:0,top:0,width:"10rem",paddingTop:"4rem",paddingBottom:"2rem",overflowY:"auto",fontFamily:theme.typography.fonts.base,fontSize:theme.typography.size.s2,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",WebkitOverflowScrolling:"touch","& *":{boxSizing:"border-box"},"& > .toc-wrapper > .toc-list":{paddingLeft:0,borderLeft:`solid 2px ${theme.color.mediumlight}`,".toc-list":{paddingLeft:0,borderLeft:`solid 2px ${theme.color.mediumlight}`,".toc-list":{paddingLeft:0,borderLeft:`solid 2px ${theme.color.mediumlight}`}}},"& .toc-list-item":{position:"relative",listStyleType:"none",marginLeft:20,paddingTop:3,paddingBottom:3},"& .toc-list-item::before":{content:'""',position:"absolute",height:"100%",top:0,left:0,transform:"translateX(calc(-2px - 20px))",borderLeft:`solid 2px ${theme.color.mediumdark}`,opacity:0,transition:"opacity 0.2s"},"& .toc-list-item.is-active-li::before":{opacity:1},"& .toc-list-item > a":{color:theme.color.defaultText,textDecoration:"none"},"& .toc-list-item.is-active-li > a":{fontWeight:600,color:theme.color.secondary,textDecoration:"none"}}))),Heading=dist.I4.p((({theme})=>({fontWeight:600,fontSize:"0.875em",color:theme.textColor,textTransform:"uppercase",marginBottom:10}))),OptionalTitle=({title})=>null===title?null:"string"==typeof title?react.createElement(Heading,null,title):title,TableOfContents=({title,disable,headingSelector,contentsSelector,ignoreSelector,unsafeTocbotOptions})=>((0,react.useEffect)((()=>{let configuration={tocSelector:".toc-wrapper",contentSelector:contentsSelector??".sbdocs-content",headingSelector:headingSelector??"h3",ignoreSelector:ignoreSelector??".docs-story *, .skip-toc",headingsOffset:40,scrollSmoothOffset:-40,orderedList:!1,onClick:()=>!1,...unsafeTocbotOptions},timeout=setTimeout((()=>js.init(configuration)),100);return()=>{clearTimeout(timeout),js.destroy()}}),[disable]),react.createElement(react.Fragment,null,react.createElement(Wrapper10,null,disable?null:react.createElement(Content2,null,react.createElement(OptionalTitle,{title:title||null}),react.createElement("div",{className:"toc-wrapper"}))))),{document:document3,window:globalWindow3}=global_dist.global,DocsContainer=({context,theme,children})=>{let toc;try{toc=context.resolveOf("meta",["meta"]).preparedMeta.parameters?.docs?.toc}catch{toc=context?.projectAnnotations?.parameters?.docs?.toc}return(0,react.useEffect)((()=>{let url;try{if(url=new URL(globalWindow3.parent.location.toString()),url.hash){let element=document3.getElementById(url.hash.substring(1));element&&setTimeout((()=>{!function scrollToElement(element,block="start"){element.scrollIntoView({behavior:"smooth",block,inline:"nearest"})}(element)}),200)}}catch{}})),react.createElement(DocsContext.Provider,{value:context},react.createElement(SourceContainer,{channel:context.channel},react.createElement(dist.NP,{theme:(0,dist.D8)(theme)},react.createElement(DocsPageWrapper,{toc:toc?react.createElement(TableOfContents,{className:"sbdocs sbdocs-toc--custom",...toc}):null},children))))},STORY_KIND_PATH_SEPARATOR=/\s*\/\s*/,Title3=({children})=>{let context=(0,react.useContext)(DocsContext),content=children||(title=>{let groups=title.trim().split(STORY_KIND_PATH_SEPARATOR);return groups&&groups[groups.length-1]||title})(context.storyById().title);return content?react.createElement(Title,{className:"sbdocs-title sb-unstyled"},content):null},Subtitle2=({children})=>{let docsContext=(0,react.useContext)(DocsContext),content=children||docsContext.storyById().parameters?.componentSubtitle;return content?react.createElement(Subtitle,{className:"sbdocs-subtitle sb-unstyled"},content):null},Subheading=({children,disableAnchor})=>{if(disableAnchor||"string"!=typeof children)return react.createElement(components_dist.H3,null,children);let tagID=globalThis.encodeURIComponent(children.toLowerCase());return react.createElement(HeaderMdx,{as:"h3",id:tagID},children)},DocsStory=({of,expanded=!0,withToolbar:withToolbarProp=!1,__forceInitialArgs=!1,__primary=!1})=>{let{story}=useOf(of||"story",["story"]),withToolbar=story.parameters.docs?.canvas?.withToolbar??withToolbarProp;return react.createElement(Anchor,{storyId:story.id},expanded&&react.createElement(react.Fragment,null,react.createElement(Subheading,null,story.name),react.createElement(DescriptionContainer,{of})),react.createElement(Canvas,{of,withToolbar,story:{__forceInitialArgs,__primary},source:{__forceInitialArgs}}))},Primary=props=>{let{of}=props;if("of"in props&&void 0===of)throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");let{csfFile}=useOf(of||"meta",["meta"]),primaryStory=(0,react.useContext)(DocsContext).componentStoriesFromCSFFile(csfFile)[0];return primaryStory?react.createElement(DocsStory,{of:primaryStory.moduleExport,expanded:!1,__primary:!0,withToolbar:!0}):null},StyledHeading=(0,dist.I4)((({children,disableAnchor,...props})=>{if(disableAnchor||"string"!=typeof children)return react.createElement(components_dist.H2,null,children);let tagID=children.toLowerCase().replace(/[^a-z0-9]/gi,"-");return react.createElement(HeaderMdx,{as:"h2",id:tagID,...props},children)}))((({theme})=>({fontSize:theme.typography.size.s2-1+"px",fontWeight:theme.typography.weight.bold,lineHeight:"16px",letterSpacing:"0.35em",textTransform:"uppercase",color:theme.textMutedColor,border:0,marginBottom:"12px","&:first-of-type":{marginTop:"56px"}}))),Stories=({title="Stories",includePrimary=!0})=>{let{componentStories,projectAnnotations,getStoryContext}=(0,react.useContext)(DocsContext),stories=componentStories(),{stories:{filter}={filter:void 0}}=projectAnnotations.parameters?.docs||{};return filter&&(stories=stories.filter((story=>filter(story,getStoryContext(story))))),includePrimary||(stories=stories.slice(1)),stories&&0!==stories.length?react.createElement(react.Fragment,null,react.createElement(StyledHeading,null,title),stories.map((story=>story&&react.createElement(DocsStory,{key:story.id,of:story.moduleExport,expanded:!0,__forceInitialArgs:!0})))):null},DocsPage=()=>{let resolvedOf=useOf("meta",["meta"]),{stories}=resolvedOf.csfFile,isSingleStory=1===Object.keys(stories).length;return react.createElement(react.Fragment,null,react.createElement(Title3,null),react.createElement(Subtitle2,null),react.createElement(DescriptionContainer,{of:"meta"}),isSingleStory?react.createElement(DescriptionContainer,{of:"story"}):null,react.createElement(Primary,null),react.createElement(Controls3,null),isSingleStory?null:react.createElement(Stories,null))};function Docs({context,docsParameter}){let Container=docsParameter.container||DocsContainer,Page=docsParameter.page||DocsPage;return react.createElement(Container,{context,theme:docsParameter.theme},react.createElement(Page,null))}var ExternalDocsContext=class extends preview_api_dist.vt{constructor(channel,store,renderStoryToElement,processMetaExports){super(channel,store,renderStoryToElement,[]),this.channel=channel,this.store=store,this.renderStoryToElement=renderStoryToElement,this.processMetaExports=processMetaExports,this.referenceMeta=(metaExports,attach)=>{let csfFile=this.processMetaExports(metaExports);this.referenceCSFFile(csfFile),super.referenceMeta(metaExports,attach)}}},ConstantMap=class{constructor(prefix){this.prefix=prefix,this.entries=new Map}get(key){return this.entries.has(key)||this.entries.set(key,`${this.prefix}${this.entries.size}`),this.entries.get(key)}};preview_api_dist.lN;var defaultComponents={code:CodeOrSourceMdx,a:AnchorMdx,...HeadersMdx},ErrorBoundary=class extends react.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err)}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:react.createElement(react.Fragment,null,children)}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components},TDocs=Docs;return new Promise(((resolve,reject)=>{__webpack_require__.e(2018).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/index.js")).then((({MDXProvider})=>(async(node,el)=>new Promise((resolve=>{react_dom.render(node,el,(()=>resolve(null)))})))(react.createElement(ErrorBoundary,{showException:reject,key:Math.random()},react.createElement(MDXProvider,{components},react.createElement(TDocs,{context,docsParameter}))),element))).then((()=>resolve()))}))},this.unmount=element=>{var el;el=element,react_dom.unmountComponentAtNode(el)}}};__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-GN5PWX3D.mjs")},"./node_modules/@storybook/addon-docs/node_modules/@storybook/blocks/dist/chunk-GWAJ4KRU.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Y:()=>getControlSetterButtonId,Z:()=>getControlId});var getControlId=value=>`control-${value.replace(/\s+/g,"-")}`,getControlSetterButtonId=value=>`set-${value.replace(/\s+/g,"-")}`},"./node_modules/@storybook/addon-docs/node_modules/@storybook/icons/dist/index.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{D3D:()=>ChevronDownIcon,LoD:()=>ZoomOutIcon,PU:()=>ZoomIcon,QDE:()=>MarkupIcon,Qpb:()=>SubtractIcon,REV:()=>AddIcon,VAL:()=>SupportIcon,abt:()=>ChevronSmallDownIcon,bMW:()=>EyeIcon,dbI:()=>EyeCloseIcon,ejX:()=>UndoIcon,npA:()=>VideoIcon,pyG:()=>DocumentIcon,qYV:()=>LinkIcon,tN5:()=>ChevronSmallUpIcon,vKP:()=>ChevronRightIcon,wV5:()=>ZoomResetIcon});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),ZoomIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M6 3.5a.5.5 0 01.5.5v1.5H8a.5.5 0 010 1H6.5V8a.5.5 0 01-1 0V6.5H4a.5.5 0 010-1h1.5V4a.5.5 0 01.5-.5z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M9.544 10.206a5.5 5.5 0 11.662-.662.5.5 0 01.148.102l3 3a.5.5 0 01-.708.708l-3-3a.5.5 0 01-.102-.148zM10.5 6a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0z",fill:color})))),ZoomOutIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M4 5.5a.5.5 0 000 1h4a.5.5 0 000-1H4z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M6 11.5c1.35 0 2.587-.487 3.544-1.294a.5.5 0 00.102.148l3 3a.5.5 0 00.708-.708l-3-3a.5.5 0 00-.148-.102A5.5 5.5 0 106 11.5zm0-1a4.5 4.5 0 100-9 4.5 4.5 0 000 9z",fill:color})))),ZoomResetIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M1.5 2.837V1.5a.5.5 0 00-1 0V4a.5.5 0 00.5.5h2.5a.5.5 0 000-1H2.258a4.5 4.5 0 11-.496 4.016.5.5 0 10-.942.337 5.502 5.502 0 008.724 2.353.5.5 0 00.102.148l3 3a.5.5 0 00.708-.708l-3-3a.5.5 0 00-.148-.102A5.5 5.5 0 101.5 2.837z",fill:color})))),EyeIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M7 9.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M14 7l-.21.293C13.669 7.465 10.739 11.5 7 11.5S.332 7.465.21 7.293L0 7l.21-.293C.331 6.536 3.261 2.5 7 2.5s6.668 4.036 6.79 4.207L14 7zM2.896 5.302A12.725 12.725 0 001.245 7c.296.37.874 1.04 1.65 1.698C4.043 9.67 5.482 10.5 7 10.5c1.518 0 2.958-.83 4.104-1.802A12.72 12.72 0 0012.755 7c-.297-.37-.875-1.04-1.65-1.698C9.957 4.33 8.517 3.5 7 3.5c-1.519 0-2.958.83-4.104 1.802z",fill:color})))),EyeCloseIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M1.854 1.146a.5.5 0 10-.708.708l11 11a.5.5 0 00.708-.708l-11-11zM11.104 8.698c-.177.15-.362.298-.553.439l.714.714a13.25 13.25 0 002.526-2.558L14 7l-.21-.293C13.669 6.536 10.739 2.5 7 2.5c-.89 0-1.735.229-2.506.58l.764.763A4.859 4.859 0 017 3.5c1.518 0 2.958.83 4.104 1.802A12.724 12.724 0 0112.755 7a12.72 12.72 0 01-1.65 1.698zM.21 6.707c.069-.096 1.03-1.42 2.525-2.558l.714.714c-.191.141-.376.288-.553.439A12.725 12.725 0 001.245 7c.296.37.874 1.04 1.65 1.698C4.043 9.67 5.482 10.5 7 10.5a4.86 4.86 0 001.742-.344l.764.764c-.772.351-1.616.58-2.506.58C3.262 11.5.332 7.465.21 7.293L0 7l.21-.293z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M4.5 7c0-.322.061-.63.172-.914l3.242 3.242A2.5 2.5 0 014.5 7zM9.328 7.914L6.086 4.672a2.5 2.5 0 013.241 3.241z",fill:color})))),VideoIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M2.5 10a.5.5 0 100-1 .5.5 0 000 1z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M0 4a2 2 0 012-2h6a2 2 0 012 2v.5l3.189-2.391A.5.5 0 0114 2.5v9a.5.5 0 01-.804.397L10 9.5v.5a2 2 0 01-2 2H2a2 2 0 01-2-2V4zm9 0v1.5a.5.5 0 00.8.4L13 3.5v7L9.8 8.1a.5.5 0 00-.8.4V10a1 1 0 01-1 1H2a1 1 0 01-1-1V4a1 1 0 011-1h6a1 1 0 011 1z",fill:color})))),DocumentIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M4 5.5a.5.5 0 01.5-.5h5a.5.5 0 010 1h-5a.5.5 0 01-.5-.5zM4.5 7.5a.5.5 0 000 1h5a.5.5 0 000-1h-5zM4 10.5a.5.5 0 01.5-.5h5a.5.5 0 010 1h-5a.5.5 0 01-.5-.5z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M1.5 0a.5.5 0 00-.5.5v13a.5.5 0 00.5.5h11a.5.5 0 00.5-.5V3.207a.5.5 0 00-.146-.353L10.146.146A.5.5 0 009.793 0H1.5zM2 1h7.5v2a.5.5 0 00.5.5h2V13H2V1z",fill:color})))),MarkupIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M8.982 1.632a.5.5 0 00-.964-.263l-3 11a.5.5 0 10.964.263l3-11zM3.32 3.616a.5.5 0 01.064.704L1.151 7l2.233 2.68a.5.5 0 11-.768.64l-2.5-3a.5.5 0 010-.64l2.5-3a.5.5 0 01.704-.064zM10.68 3.616a.5.5 0 00-.064.704L12.849 7l-2.233 2.68a.5.5 0 00.768.64l2.5-3a.5.5 0 000-.64l-2.5-3a.5.5 0 00-.704-.064z",fill:color})))),AddIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M7 3a.5.5 0 01.5.5v3h3a.5.5 0 010 1h-3v3a.5.5 0 01-1 0v-3h-3a.5.5 0 010-1h3v-3A.5.5 0 017 3z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M7 14A7 7 0 107 0a7 7 0 000 14zm0-1A6 6 0 107 1a6 6 0 000 12z",fill:color})))),SubtractIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M3.5 6.5a.5.5 0 000 1h7a.5.5 0 000-1h-7z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",fill:color})))),SupportIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M14 7A7 7 0 110 7a7 7 0 0114 0zm-3.524 4.89A5.972 5.972 0 017 13a5.972 5.972 0 01-3.477-1.11l1.445-1.444C5.564 10.798 6.258 11 7 11s1.436-.202 2.032-.554l1.444 1.445zm-.03-2.858l1.445 1.444A5.972 5.972 0 0013 7c0-1.296-.41-2.496-1.11-3.477l-1.444 1.445C10.798 5.564 11 6.258 11 7s-.202 1.436-.554 2.032zM9.032 3.554l1.444-1.445A5.972 5.972 0 007 1c-1.296 0-2.496.41-3.477 1.11l1.445 1.444A3.981 3.981 0 017 3c.742 0 1.436.202 2.032.554zM3.554 4.968L2.109 3.523A5.973 5.973 0 001 7c0 1.296.41 2.496 1.11 3.476l1.444-1.444A3.981 3.981 0 013 7c0-.742.202-1.436.554-2.032zM10 7a3 3 0 11-6 0 3 3 0 016 0z",fill:color})))),LinkIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M11.841 2.159a2.25 2.25 0 00-3.182 0l-2.5 2.5a2.25 2.25 0 000 3.182.5.5 0 01-.707.707 3.25 3.25 0 010-4.596l2.5-2.5a3.25 3.25 0 014.596 4.596l-2.063 2.063a4.27 4.27 0 00-.094-1.32l1.45-1.45a2.25 2.25 0 000-3.182z",fill:color}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M3.61 7.21c-.1-.434-.132-.88-.095-1.321L1.452 7.952a3.25 3.25 0 104.596 4.596l2.5-2.5a3.25 3.25 0 000-4.596.5.5 0 00-.707.707 2.25 2.25 0 010 3.182l-2.5 2.5A2.25 2.25 0 112.159 8.66l1.45-1.45z",fill:color})))),ChevronDownIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M1.146 4.604l5.5 5.5a.5.5 0 00.708 0l5.5-5.5a.5.5 0 00-.708-.708L7 9.043 1.854 3.896a.5.5 0 10-.708.708z",fill:color})))),ChevronRightIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M11.104 7.354l-5.5 5.5a.5.5 0 01-.708-.708L10.043 7 4.896 1.854a.5.5 0 11.708-.708l5.5 5.5a.5.5 0 010 .708z",fill:color})))),ChevronSmallUpIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M3.854 9.104a.5.5 0 11-.708-.708l3.5-3.5a.5.5 0 01.708 0l3.5 3.5a.5.5 0 01-.708.708L7 5.957 3.854 9.104z",fill:color})))),ChevronSmallDownIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M3.854 4.896a.5.5 0 10-.708.708l3.5 3.5a.5.5 0 00.708 0l3.5-3.5a.5.5 0 00-.708-.708L7 8.043 3.854 4.896z",fill:color})))),UndoIcon=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M1.146 3.854a.5.5 0 010-.708l2-2a.5.5 0 11.708.708L2.707 3h6.295A4 4 0 019 11H3a.5.5 0 010-1h6a3 3 0 100-6H2.707l1.147 1.146a.5.5 0 11-.708.708l-2-2z",fill:color}))))},"./node_modules/@storybook/components/dist/chunk-D3EWQ7UP.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{E7:()=>ActionBar,FK:()=>ScrollArea,bF:()=>SyntaxHighlighter2,zH:()=>createCopyToClipboardFunction,Uv:()=>supportedLanguages,L0:()=>syntaxhighlighter_default});var chunk_FD4M6EBV=__webpack_require__("./node_modules/@storybook/components/dist/chunk-FD4M6EBV.mjs"),chunk_SCHQIR5W=__webpack_require__("./node_modules/@storybook/components/dist/chunk-SCHQIR5W.mjs"),require_markdown=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/markdown.js"(exports,module){function markdown(Prism){!function(Prism2){var inner=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function createInline(pattern){return pattern=pattern.replace(/<inner>/g,(function(){return inner})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+pattern+")")}var tableCell=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,tableRow=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return tableCell})),tableLine=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;Prism2.languages.markdown=Prism2.languages.extend("markup",{}),Prism2.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"front-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:Prism2.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+tableRow+tableLine+"(?:"+tableRow+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+tableRow+tableLine+")(?:"+tableRow+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(tableCell),inside:Prism2.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+tableRow+")"+tableLine+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+tableRow+"$"),inside:{"table-header":{pattern:RegExp(tableCell),alias:"important",inside:Prism2.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(token){["url","bold","italic","strike","code-snippet"].forEach((function(inside){token!==inside&&(Prism2.languages.markdown[token].inside.content.inside[inside]=Prism2.languages.markdown[inside])}))})),Prism2.hooks.add("after-tokenize",(function(env){"markdown"!==env.language&&"md"!==env.language||function walkTokens(tokens){if(tokens&&"string"!=typeof tokens)for(var i=0,l=tokens.length;i<l;i++){var token=tokens[i];if("code"===token.type){var codeLang=token.content[1],codeBlock=token.content[3];if(codeLang&&codeBlock&&"code-language"===codeLang.type&&"code-block"===codeBlock.type&&"string"==typeof codeLang.content){var lang=codeLang.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),alias="language-"+(lang=(/[a-z][\w-]*/i.exec(lang)||[""])[0].toLowerCase());codeBlock.alias?"string"==typeof codeBlock.alias?codeBlock.alias=[codeBlock.alias,alias]:codeBlock.alias.push(alias):codeBlock.alias=[alias]}}else walkTokens(token.content)}}(env.tokens)})),Prism2.hooks.add("wrap",(function(env){if("code-block"===env.type){for(var codeLang="",i=0,l=env.classes.length;i<l;i++){var cls=env.classes[i],match=/language-(.+)/.exec(cls);if(match){codeLang=match[1];break}}var grammar=Prism2.languages[codeLang];if(grammar)env.content=Prism2.highlight(function textContent(html){var text=html.replace(tagPattern,"");return text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(m,code){var value;return"#"===(code=code.toLowerCase())[0]?(value="x"===code[1]?parseInt(code.slice(2),16):Number(code.slice(1)),fromCodePoint(value)):KNOWN_ENTITY_NAMES[code]||m}))}(env.content.value),grammar,codeLang);else if(codeLang&&"none"!==codeLang&&Prism2.plugins.autoloader){var id="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());env.attributes.id=id,Prism2.plugins.autoloader.loadLanguages(codeLang,(function(){var ele=document.getElementById(id);ele&&(ele.innerHTML=Prism2.highlight(ele.textContent,Prism2.languages[codeLang],codeLang))}))}}}));var tagPattern=RegExp(Prism2.languages.markup.tag.pattern.source,"gi"),KNOWN_ENTITY_NAMES={amp:"&",lt:"<",gt:">",quot:'"'},fromCodePoint=String.fromCodePoint||String.fromCharCode;Prism2.languages.md=Prism2.languages.markdown}(Prism)}module.exports=markdown,markdown.displayName="markdown",markdown.aliases=["md"]}}),require_yaml=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/yaml.js"(exports,module){function yaml(Prism){!function(Prism2){var anchorOrAlias=/[*&][^\s[\]{},]+/,tag=/!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/,properties="(?:"+tag.source+"(?:[ \t]+"+anchorOrAlias.source+")?|"+anchorOrAlias.source+"(?:[ \t]+"+tag.source+")?)",plainKey=/(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g,(function(){return/[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source})),string=/"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;function createValuePattern(value,flags){flags=(flags||"").replace(/m/g,"")+"m";var pattern=/([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g,(function(){return properties})).replace(/<<value>>/g,(function(){return value}));return RegExp(pattern,flags)}Prism2.languages.yaml={scalar:{pattern:RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g,(function(){return properties}))),lookbehind:!0,alias:"string"},comment:/#.*/,key:{pattern:RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g,(function(){return properties})).replace(/<<key>>/g,(function(){return"(?:"+plainKey+"|"+string+")"}))),lookbehind:!0,greedy:!0,alias:"atrule"},directive:{pattern:/(^[ \t]*)%.+/m,lookbehind:!0,alias:"important"},datetime:{pattern:createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),lookbehind:!0,alias:"number"},boolean:{pattern:createValuePattern(/false|true/.source,"i"),lookbehind:!0,alias:"important"},null:{pattern:createValuePattern(/null|~/.source,"i"),lookbehind:!0,alias:"important"},string:{pattern:createValuePattern(string),lookbehind:!0,greedy:!0},number:{pattern:createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,"i"),lookbehind:!0},tag,important:anchorOrAlias,punctuation:/---|[:[\]{}\-,|>?]|\.\.\./},Prism2.languages.yml=Prism2.languages.yaml}(Prism)}module.exports=yaml,yaml.displayName="yaml",yaml.aliases=["yml"]}}),require_typescript=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/typescript.js"(exports,module){function typescript(Prism){!function(Prism2){Prism2.languages.typescript=Prism2.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/}),Prism2.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete Prism2.languages.typescript.parameter,delete Prism2.languages.typescript["literal-property"];var typeInside=Prism2.languages.extend("typescript",{});delete typeInside["class-name"],Prism2.languages.typescript["class-name"].inside=typeInside,Prism2.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:typeInside}}}}),Prism2.languages.ts=Prism2.languages.typescript}(Prism)}module.exports=typescript,typescript.displayName="typescript",typescript.aliases=["ts"]}}),require_jsx=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/jsx.js"(exports,module){function jsx(Prism){!function(Prism2){var javascript=Prism2.util.clone(Prism2.languages.javascript),space=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,braces=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,spread=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function re(source,flags){return source=source.replace(/<S>/g,(function(){return space})).replace(/<BRACES>/g,(function(){return braces})).replace(/<SPREAD>/g,(function(){return spread})),RegExp(source,flags)}spread=re(spread).source,Prism2.languages.jsx=Prism2.languages.extend("markup",javascript),Prism2.languages.jsx.tag.pattern=re(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),Prism2.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/,Prism2.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/,Prism2.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,Prism2.languages.jsx.tag.inside.comment=javascript.comment,Prism2.languages.insertBefore("inside","attr-name",{spread:{pattern:re(/<SPREAD>/.source),inside:Prism2.languages.jsx}},Prism2.languages.jsx.tag),Prism2.languages.insertBefore("inside","special-attr",{script:{pattern:re(/=<BRACES>/.source),alias:"language-javascript",inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:Prism2.languages.jsx}}},Prism2.languages.jsx.tag);var stringifyToken=function(token){return token?"string"==typeof token?token:"string"==typeof token.content?token.content:token.content.map(stringifyToken).join(""):""},walkTokens=function(tokens){for(var openedTags=[],i=0;i<tokens.length;i++){var token=tokens[i],notTagNorBrace=!1;if("string"!=typeof token&&("tag"===token.type&&token.content[0]&&"tag"===token.content[0].type?"</"===token.content[0].content[0].content?openedTags.length>0&&openedTags[openedTags.length-1].tagName===stringifyToken(token.content[0].content[1])&&openedTags.pop():"/>"===token.content[token.content.length-1].content||openedTags.push({tagName:stringifyToken(token.content[0].content[1]),openedBraces:0}):openedTags.length>0&&"punctuation"===token.type&&"{"===token.content?openedTags[openedTags.length-1].openedBraces++:openedTags.length>0&&openedTags[openedTags.length-1].openedBraces>0&&"punctuation"===token.type&&"}"===token.content?openedTags[openedTags.length-1].openedBraces--:notTagNorBrace=!0),(notTagNorBrace||"string"==typeof token)&&openedTags.length>0&&0===openedTags[openedTags.length-1].openedBraces){var plainText=stringifyToken(token);i<tokens.length-1&&("string"==typeof tokens[i+1]||"plain-text"===tokens[i+1].type)&&(plainText+=stringifyToken(tokens[i+1]),tokens.splice(i+1,1)),i>0&&("string"==typeof tokens[i-1]||"plain-text"===tokens[i-1].type)&&(plainText=stringifyToken(tokens[i-1])+plainText,tokens.splice(i-1,1),i--),tokens[i]=new Prism2.Token("plain-text",plainText,null,plainText)}token.content&&"string"!=typeof token.content&&walkTokens(token.content)}};Prism2.hooks.add("after-tokenize",(function(env){"jsx"!==env.language&&"tsx"!==env.language||walkTokens(env.tokens)}))}(Prism)}module.exports=jsx,jsx.displayName="jsx",jsx.aliases=[]}}),require_tsx=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/tsx.js"(exports,module){var refractorJsx=require_jsx(),refractorTypescript=require_typescript();function tsx(Prism){Prism.register(refractorJsx),Prism.register(refractorTypescript),function(Prism2){var typescript=Prism2.util.clone(Prism2.languages.typescript);Prism2.languages.tsx=Prism2.languages.extend("jsx",typescript),delete Prism2.languages.tsx.parameter,delete Prism2.languages.tsx["literal-property"];var tag=Prism2.languages.tsx.tag;tag.pattern=RegExp(/(^|[^\w$]|(?=<\/))/.source+"(?:"+tag.pattern.source+")",tag.pattern.flags),tag.lookbehind=!0}(Prism)}module.exports=tsx,tsx.displayName="tsx",tsx.aliases=[]}}),require_clike=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/clike.js"(exports,module){function clike(Prism){Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/}}module.exports=clike,clike.displayName="clike",clike.aliases=[]}}),require_javascript=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/javascript.js"(exports,module){function javascript(Prism){Prism.languages.javascript=Prism.languages.extend("clike",{"class-name":[Prism.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),Prism.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:Prism.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),Prism.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),Prism.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),Prism.languages.markup&&(Prism.languages.markup.tag.addInlined("script","javascript"),Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),Prism.languages.js=Prism.languages.javascript}module.exports=javascript,javascript.displayName="javascript",javascript.aliases=["js"]}}),require_css=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/css.js"(exports,module){function css(Prism){!function(Prism2){var string=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;Prism2.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+string.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+string.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+string.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:string,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},Prism2.languages.css.atrule.inside.rest=Prism2.languages.css;var markup=Prism2.languages.markup;markup&&(markup.tag.addInlined("style","css"),markup.tag.addAttribute("style","css"))}(Prism)}module.exports=css,css.displayName="css",css.aliases=[]}}),require_markup=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/markup.js"(exports,module){function markup(Prism){Prism.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.languages.markup.doctype.inside["internal-subset"].inside=Prism.languages.markup,Prism.hooks.add("wrap",(function(env){"entity"===env.type&&(env.attributes.title=env.content.value.replace(/&amp;/,"&"))})),Object.defineProperty(Prism.languages.markup.tag,"addInlined",{value:function(tagName,lang){var includedCdataInside={};includedCdataInside["language-"+lang]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Prism.languages[lang]},includedCdataInside.cdata=/^<!\[CDATA\[|\]\]>$/i;var inside={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:includedCdataInside}};inside["language-"+lang]={pattern:/[\s\S]+/,inside:Prism.languages[lang]};var def={};def[tagName]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return tagName})),"i"),lookbehind:!0,greedy:!0,inside},Prism.languages.insertBefore("markup","cdata",def)}}),Object.defineProperty(Prism.languages.markup.tag,"addAttribute",{value:function(attrName,lang){Prism.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+attrName+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[lang,"language-"+lang],inside:Prism.languages[lang]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.xml=Prism.languages.extend("markup",{}),Prism.languages.ssml=Prism.languages.xml,Prism.languages.atom=Prism.languages.xml,Prism.languages.rss=Prism.languages.xml}module.exports=markup,markup.displayName="markup",markup.aliases=["html","mathml","svg","xml","ssml","atom","rss"]}}),require_immutable=(0,chunk_SCHQIR5W.P)({"../../node_modules/xtend/immutable.js"(exports,module){module.exports=function extend(){for(var target={},i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source)hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};var hasOwnProperty=Object.prototype.hasOwnProperty}}),require_schema=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/schema.js"(exports,module){module.exports=Schema;var proto=Schema.prototype;function Schema(property,normal,space){this.property=property,this.normal=normal,space&&(this.space=space)}proto.space=null,proto.normal={},proto.property={}}}),require_merge=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/merge.js"(exports,module){var xtend=require_immutable(),Schema=require_schema();module.exports=function merge(definitions){for(var info,space,length=definitions.length,property=[],normal=[],index=-1;++index<length;)info=definitions[index],property.push(info.property),normal.push(info.normal),space=info.space;return new Schema(xtend.apply(null,property),xtend.apply(null,normal),space)}}}),require_normalize=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/normalize.js"(exports,module){module.exports=function normalize(value){return value.toLowerCase()}}}),require_info=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/info.js"(exports,module){module.exports=Info;var proto=Info.prototype;function Info(property,attribute){this.property=property,this.attribute=attribute}proto.space=null,proto.attribute=null,proto.property=null,proto.boolean=!1,proto.booleanish=!1,proto.overloadedBoolean=!1,proto.number=!1,proto.commaSeparated=!1,proto.spaceSeparated=!1,proto.commaOrSpaceSeparated=!1,proto.mustUseProperty=!1,proto.defined=!1}}),require_types=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/types.js"(exports){var powers=0;function increment(){return Math.pow(2,++powers)}exports.boolean=increment(),exports.booleanish=increment(),exports.overloadedBoolean=increment(),exports.number=increment(),exports.spaceSeparated=increment(),exports.commaSeparated=increment(),exports.commaOrSpaceSeparated=increment()}}),require_defined_info=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/defined-info.js"(exports,module){var Info=require_info(),types=require_types();module.exports=DefinedInfo,DefinedInfo.prototype=new Info,DefinedInfo.prototype.defined=!0;var checks=["boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated"],checksLength=checks.length;function DefinedInfo(property,attribute,mask,space){var check,index=-1;for(mark(this,"space",space),Info.call(this,property,attribute);++index<checksLength;)mark(this,check=checks[index],(mask&types[check])===types[check])}function mark(values,key,value){value&&(values[key]=value)}}}),require_create=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/create.js"(exports,module){var normalize=require_normalize(),Schema=require_schema(),DefinedInfo=require_defined_info();module.exports=function create(definition){var prop,info,space=definition.space,mustUseProperty=definition.mustUseProperty||[],attributes=definition.attributes||{},props=definition.properties,transform=definition.transform,property={},normal={};for(prop in props)info=new DefinedInfo(prop,transform(attributes,prop),props[prop],space),-1!==mustUseProperty.indexOf(prop)&&(info.mustUseProperty=!0),property[prop]=info,normal[normalize(prop)]=prop,normal[normalize(info.attribute)]=prop;return new Schema(property,normal,space)}}}),require_xlink=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/xlink.js"(exports,module){var create=require_create();module.exports=create({space:"xlink",transform:function xlinkTransform(_,prop){return"xlink:"+prop.slice(5).toLowerCase()},properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}})}}),require_xml=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/xml.js"(exports,module){var create=require_create();module.exports=create({space:"xml",transform:function xmlTransform(_,prop){return"xml:"+prop.slice(3).toLowerCase()},properties:{xmlLang:null,xmlBase:null,xmlSpace:null}})}}),require_case_sensitive_transform=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/case-sensitive-transform.js"(exports,module){module.exports=function caseSensitiveTransform(attributes,attribute){return attribute in attributes?attributes[attribute]:attribute}}}),require_case_insensitive_transform=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/util/case-insensitive-transform.js"(exports,module){var caseSensitiveTransform=require_case_sensitive_transform();module.exports=function caseInsensitiveTransform(attributes,property){return caseSensitiveTransform(attributes,property.toLowerCase())}}}),require_xmlns=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/xmlns.js"(exports,module){var create=require_create(),caseInsensitiveTransform=require_case_insensitive_transform();module.exports=create({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:caseInsensitiveTransform,properties:{xmlns:null,xmlnsXLink:null}})}}),require_aria=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/aria.js"(exports,module){var types=require_types(),create=require_create(),booleanish=types.booleanish,number=types.number,spaceSeparated=types.spaceSeparated;module.exports=create({transform:function ariaTransform(_,prop){return"role"===prop?prop:"aria-"+prop.slice(4).toLowerCase()},properties:{ariaActiveDescendant:null,ariaAtomic:booleanish,ariaAutoComplete:null,ariaBusy:booleanish,ariaChecked:booleanish,ariaColCount:number,ariaColIndex:number,ariaColSpan:number,ariaControls:spaceSeparated,ariaCurrent:null,ariaDescribedBy:spaceSeparated,ariaDetails:null,ariaDisabled:booleanish,ariaDropEffect:spaceSeparated,ariaErrorMessage:null,ariaExpanded:booleanish,ariaFlowTo:spaceSeparated,ariaGrabbed:booleanish,ariaHasPopup:null,ariaHidden:booleanish,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:spaceSeparated,ariaLevel:number,ariaLive:null,ariaModal:booleanish,ariaMultiLine:booleanish,ariaMultiSelectable:booleanish,ariaOrientation:null,ariaOwns:spaceSeparated,ariaPlaceholder:null,ariaPosInSet:number,ariaPressed:booleanish,ariaReadOnly:booleanish,ariaRelevant:null,ariaRequired:booleanish,ariaRoleDescription:spaceSeparated,ariaRowCount:number,ariaRowIndex:number,ariaRowSpan:number,ariaSelected:booleanish,ariaSetSize:number,ariaSort:null,ariaValueMax:number,ariaValueMin:number,ariaValueNow:number,ariaValueText:null,role:null}})}}),require_html=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/lib/html.js"(exports,module){var types=require_types(),create=require_create(),caseInsensitiveTransform=require_case_insensitive_transform(),boolean=types.boolean,overloadedBoolean=types.overloadedBoolean,booleanish=types.booleanish,number=types.number,spaceSeparated=types.spaceSeparated,commaSeparated=types.commaSeparated;module.exports=create({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:caseInsensitiveTransform,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:commaSeparated,acceptCharset:spaceSeparated,accessKey:spaceSeparated,action:null,allow:null,allowFullScreen:boolean,allowPaymentRequest:boolean,allowUserMedia:boolean,alt:null,as:null,async:boolean,autoCapitalize:null,autoComplete:spaceSeparated,autoFocus:boolean,autoPlay:boolean,capture:boolean,charSet:null,checked:boolean,cite:null,className:spaceSeparated,cols:number,colSpan:null,content:null,contentEditable:booleanish,controls:boolean,controlsList:spaceSeparated,coords:number|commaSeparated,crossOrigin:null,data:null,dateTime:null,decoding:null,default:boolean,defer:boolean,dir:null,dirName:null,disabled:boolean,download:overloadedBoolean,draggable:booleanish,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:boolean,formTarget:null,headers:spaceSeparated,height:number,hidden:boolean,high:number,href:null,hrefLang:null,htmlFor:spaceSeparated,httpEquiv:spaceSeparated,id:null,imageSizes:null,imageSrcSet:commaSeparated,inputMode:null,integrity:null,is:null,isMap:boolean,itemId:null,itemProp:spaceSeparated,itemRef:spaceSeparated,itemScope:boolean,itemType:spaceSeparated,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:boolean,low:number,manifest:null,max:null,maxLength:number,media:null,method:null,min:null,minLength:number,multiple:boolean,muted:boolean,name:null,nonce:null,noModule:boolean,noValidate:boolean,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextMenu:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:boolean,optimum:number,pattern:null,ping:spaceSeparated,placeholder:null,playsInline:boolean,poster:null,preload:null,readOnly:boolean,referrerPolicy:null,rel:spaceSeparated,required:boolean,reversed:boolean,rows:number,rowSpan:number,sandbox:spaceSeparated,scope:null,scoped:boolean,seamless:boolean,selected:boolean,shape:null,size:number,sizes:null,slot:null,span:number,spellCheck:booleanish,src:null,srcDoc:null,srcLang:null,srcSet:commaSeparated,start:number,step:null,style:null,tabIndex:number,target:null,title:null,translate:null,type:null,typeMustMatch:boolean,useMap:null,value:booleanish,width:number,wrap:null,align:null,aLink:null,archive:spaceSeparated,axis:null,background:null,bgColor:null,border:number,borderColor:null,bottomMargin:number,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:boolean,declare:boolean,event:null,face:null,frame:null,frameBorder:null,hSpace:number,leftMargin:number,link:null,longDesc:null,lowSrc:null,marginHeight:number,marginWidth:number,noResize:boolean,noHref:boolean,noShade:boolean,noWrap:boolean,object:null,profile:null,prompt:null,rev:null,rightMargin:number,rules:null,scheme:null,scrolling:booleanish,standby:null,summary:null,text:null,topMargin:number,valueType:null,version:null,vAlign:null,vLink:null,vSpace:number,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:boolean,disableRemotePlayback:boolean,prefix:null,property:null,results:number,security:null,unselectable:null}})}}),require_html2=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/html.js"(exports,module){var merge=require_merge(),xlink=require_xlink(),xml=require_xml(),xmlns=require_xmlns(),aria=require_aria(),html=require_html();module.exports=merge([xml,xlink,xmlns,aria,html])}}),require_find=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/property-information/find.js"(exports,module){var normalize=require_normalize(),DefinedInfo=require_defined_info(),Info=require_info();module.exports=function find(schema,value){var normal=normalize(value),prop=value,Type=Info;return normal in schema.normal?schema.property[schema.normal[normal]]:(normal.length>4&&"data"===normal.slice(0,4)&&valid.test(value)&&("-"===value.charAt(4)?prop=function datasetToProperty(attribute){var value=attribute.slice(5).replace(dash,camelcase);return"data"+value.charAt(0).toUpperCase()+value.slice(1)}(value):value=function datasetToAttribute(property){var value=property.slice(4);return dash.test(value)?property:(value=value.replace(cap,kebab),"-"!==value.charAt(0)&&(value="-"+value),"data"+value)}(value),Type=DefinedInfo),new Type(prop,value))};var valid=/^data[-\w.:]+$/i,dash=/-[a-z]/g,cap=/[A-Z]/g;function kebab($0){return"-"+$0.toLowerCase()}function camelcase($0){return $0.charAt(1).toUpperCase()}}}),require_hast_util_parse_selector=(0,chunk_SCHQIR5W.P)({"../../node_modules/hast-util-parse-selector/index.js"(exports,module){module.exports=function parse(selector,defaultTagName){for(var subvalue,previous,match,value=selector||"",name=defaultTagName||"div",props={},start=0;start<value.length;)search.lastIndex=start,match=search.exec(value),(subvalue=value.slice(start,match?match.index:value.length))&&(previous?"#"===previous?props.id=subvalue:props.className?props.className.push(subvalue):props.className=[subvalue]:name=subvalue,start+=subvalue.length),match&&(previous=match[0],start++);return{type:"element",tagName:name,properties:props,children:[]}};var search=/[#.]/g}}),require_space_separated_tokens=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/space-separated-tokens/index.js"(exports){exports.parse=function parse(value){var input=String(value||"").trim();return""===input?[]:input.split(whiteSpace)},exports.stringify=function stringify(values){return values.join(" ").trim()};var whiteSpace=/[ \t\n\r\f]+/g}}),require_comma_separated_tokens=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/node_modules/comma-separated-tokens/index.js"(exports){exports.parse=function parse(value){for(var val,values=[],input=String(value||""),index=input.indexOf(","),lastIndex=0,end=!1;!end;)-1===index&&(index=input.length,end=!0),((val=input.slice(lastIndex,index).trim())||!end)&&values.push(val),lastIndex=index+1,index=input.indexOf(",",lastIndex);return values},exports.stringify=function stringify(values,options){var settings=options||{},left=!1===settings.padLeft?"":" ",right=settings.padRight?" ":"";return""===values[values.length-1]&&(values=values.concat("")),values.join(right+","+left).trim()}}}),require_factory=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/factory.js"(exports,module){var find=require_find(),normalize=require_normalize(),parseSelector=require_hast_util_parse_selector(),spaces=require_space_separated_tokens().parse,commas=require_comma_separated_tokens().parse;module.exports=function factory(schema,defaultTagName,caseSensitive){var adjust=caseSensitive?function createAdjustMap(values){for(var value,length=values.length,index=-1,result={};++index<length;)value=values[index],result[value.toLowerCase()]=value;return result}(caseSensitive):null;return function h(selector,properties){var property,node=parseSelector(selector,defaultTagName),children=Array.prototype.slice.call(arguments,2),name=node.tagName.toLowerCase();if(node.tagName=adjust&&own.call(adjust,name)?adjust[name]:name,properties&&function isChildren(value,node){return"string"==typeof value||"length"in value||function isNode(tagName,value){var type=value.type;return!("input"===tagName||!type||"string"!=typeof type)&&("object"==typeof value.children&&"length"in value.children||(type=type.toLowerCase(),"button"===tagName?"menu"!==type&&"submit"!==type&&"reset"!==type&&"button"!==type:"value"in value))}(node.tagName,value)}(properties,node)&&(children.unshift(properties),properties=null),properties)for(property in properties)addProperty(node.properties,property,properties[property]);return addChild(node.children,children),"template"===node.tagName&&(node.content={type:"root",children:node.children},node.children=[]),node};function addProperty(properties,key,value){var info,property,result;null==value||value!=value||(property=(info=find(schema,key)).property,"string"==typeof(result=value)&&(info.spaceSeparated?result=spaces(result):info.commaSeparated?result=commas(result):info.commaOrSpaceSeparated&&(result=spaces(commas(result).join(" ")))),"style"===property&&"string"!=typeof value&&(result=function style(value){var key,result=[];for(key in value)result.push([key,value[key]].join(": "));return result.join("; ")}(result)),"className"===property&&properties.className&&(result=properties.className.concat(result)),properties[property]=function parsePrimitives(info,name,value){var index,length,result;if("object"!=typeof value||!("length"in value))return parsePrimitive(info,name,value);for(length=value.length,index=-1,result=[];++index<length;)result[index]=parsePrimitive(info,name,value[index]);return result}(info,property,result))}};var own={}.hasOwnProperty;function addChild(nodes,value){var index,length;if("string"!=typeof value&&"number"!=typeof value)if("object"==typeof value&&"length"in value)for(index=-1,length=value.length;++index<length;)addChild(nodes,value[index]);else{if("object"!=typeof value||!("type"in value))throw new Error("Expected node, nodes, or string, got `"+value+"`");nodes.push(value)}else nodes.push({type:"text",value:String(value)})}function parsePrimitive(info,name,value){var result=value;return info.number||info.positiveNumber?!isNaN(result)&&""!==result&&(result=Number(result)):(info.boolean||info.overloadedBoolean)&&"string"==typeof result&&(""===result||normalize(value)===normalize(name))&&(result=!0),result}}}),require_html3=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/html.js"(exports,module){var schema=require_html2(),html=require_factory()(schema,"div");html.displayName="html",module.exports=html}}),require_hastscript=(0,chunk_SCHQIR5W.P)({"../../node_modules/hastscript/index.js"(exports,module){module.exports=require_html3()}}),require_character_entities_legacy=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/character-entities-legacy/index.json"(exports,module){module.exports={AElig:"Æ",AMP:"&",Aacute:"Á",Acirc:"Â",Agrave:"À",Aring:"Å",Atilde:"Ã",Auml:"Ä",COPY:"©",Ccedil:"Ç",ETH:"Ð",Eacute:"É",Ecirc:"Ê",Egrave:"È",Euml:"Ë",GT:">",Iacute:"Í",Icirc:"Î",Igrave:"Ì",Iuml:"Ï",LT:"<",Ntilde:"Ñ",Oacute:"Ó",Ocirc:"Ô",Ograve:"Ò",Oslash:"Ø",Otilde:"Õ",Ouml:"Ö",QUOT:'"',REG:"®",THORN:"Þ",Uacute:"Ú",Ucirc:"Û",Ugrave:"Ù",Uuml:"Ü",Yacute:"Ý",aacute:"á",acirc:"â",acute:"´",aelig:"æ",agrave:"à",amp:"&",aring:"å",atilde:"ã",auml:"ä",brvbar:"¦",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",ecirc:"ê",egrave:"è",eth:"ð",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",iacute:"í",icirc:"î",iexcl:"¡",igrave:"ì",iquest:"¿",iuml:"ï",laquo:"«",lt:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",oacute:"ó",ocirc:"ô",ograve:"ò",ordf:"ª",ordm:"º",oslash:"ø",otilde:"õ",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',raquo:"»",reg:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",times:"×",uacute:"ú",ucirc:"û",ugrave:"ù",uml:"¨",uuml:"ü",yacute:"ý",yen:"¥",yuml:"ÿ"}}}),require_character_reference_invalid=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/character-reference-invalid/index.json"(exports,module){module.exports={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"}}}),require_is_decimal=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/is-decimal/index.js"(exports,module){module.exports=function decimal(character){var code="string"==typeof character?character.charCodeAt(0):character;return code>=48&&code<=57}}}),require_is_hexadecimal=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/is-hexadecimal/index.js"(exports,module){module.exports=function hexadecimal(character){var code="string"==typeof character?character.charCodeAt(0):character;return code>=97&&code<=102||code>=65&&code<=70||code>=48&&code<=57}}}),require_is_alphabetical=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/is-alphabetical/index.js"(exports,module){module.exports=function alphabetical(character){var code="string"==typeof character?character.charCodeAt(0):character;return code>=97&&code<=122||code>=65&&code<=90}}}),require_is_alphanumerical=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/is-alphanumerical/index.js"(exports,module){var alphabetical=require_is_alphabetical(),decimal=require_is_decimal();module.exports=function alphanumerical(character){return alphabetical(character)||decimal(character)}}}),require_decode_entity_browser=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/parse-entities/decode-entity.browser.js"(exports,module){var el;module.exports=function decodeEntity(characters){var char,entity="&"+characters+";";return(el=el||document.createElement("i")).innerHTML=entity,(59!==(char=el.textContent).charCodeAt(char.length-1)||"semi"===characters)&&char!==entity&&char}}}),require_parse_entities=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/parse-entities/index.js"(exports,module){var legacy=require_character_entities_legacy(),invalid=require_character_reference_invalid(),decimal=require_is_decimal(),hexadecimal=require_is_hexadecimal(),alphanumerical=require_is_alphanumerical(),decodeEntity=require_decode_entity_browser();module.exports=function parseEntities(value,options){var option,key,settings={};for(key in options||(options={}),defaults)option=options[key],settings[key]=option??defaults[key];return(settings.position.indent||settings.position.start)&&(settings.indent=settings.position.indent||[],settings.position=settings.position.start),function parse(value,settings){var entityCharacters,namedEntity,terminated,characters,character,reference,following,warning,reason,output,entity,begin,start,type,test,prev,next,diff,end,additional=settings.additional,nonTerminated=settings.nonTerminated,handleText=settings.text,handleReference=settings.reference,handleWarning=settings.warning,textContext=settings.textContext,referenceContext=settings.referenceContext,warningContext=settings.warningContext,pos=settings.position,indent=settings.indent||[],length=value.length,index=0,lines=-1,column=pos.column||1,line=pos.line||1,queue="",result=[];for("string"==typeof additional&&(additional=additional.charCodeAt(0)),prev=now(),warning=handleWarning?parseError:noop,index--,length++;++index<length;)if(10===character&&(column=indent[lines]||1),38===(character=value.charCodeAt(index))){if(9===(following=value.charCodeAt(index+1))||10===following||12===following||32===following||38===following||60===following||following!=following||additional&&following===additional){queue+=fromCharCode(character),column++;continue}for(begin=start=index+1,end=start,35===following?(end=++begin,88===(following=value.charCodeAt(end))||120===following?(type=hexa,end=++begin):type=deci):type=name,entityCharacters="",entity="",characters="",test=tests[type],end--;++end<length&&test(following=value.charCodeAt(end));)characters+=fromCharCode(following),type===name&&own.call(legacy,characters)&&(entityCharacters=characters,entity=legacy[characters]);(terminated=59===value.charCodeAt(end))&&(end++,(namedEntity=type===name&&decodeEntity(characters))&&(entityCharacters=characters,entity=namedEntity)),diff=1+end-start,!terminated&&!nonTerminated||(characters?type===name?(terminated&&!entity?warning(5,1):(entityCharacters!==characters&&(diff=1+(end=begin+entityCharacters.length)-begin,terminated=!1),terminated||(reason=entityCharacters?1:3,settings.attribute?61===(following=value.charCodeAt(end))?(warning(reason,diff),entity=null):alphanumerical(following)?entity=null:warning(reason,diff):warning(reason,diff))),reference=entity):(terminated||warning(2,diff),prohibited(reference=parseInt(characters,bases[type]))?(warning(7,diff),reference=fromCharCode(65533)):reference in invalid?(warning(6,diff),reference=invalid[reference]):(output="",disallowed(reference)&&warning(6,diff),reference>65535&&(output+=fromCharCode((reference-=65536)>>>10|55296),reference=56320|1023&reference),reference=output+fromCharCode(reference))):type!==name&&warning(4,diff)),reference?(flush(),prev=now(),index=end-1,column+=end-start+1,result.push(reference),(next=now()).offset++,handleReference&&handleReference.call(referenceContext,reference,{start:prev,end:next},value.slice(start-1,end)),prev=next):(characters=value.slice(start-1,end),queue+=characters,column+=characters.length,index=end-1)}else 10===character&&(line++,lines++,column=0),character==character?(queue+=fromCharCode(character),column++):flush();return result.join("");function now(){return{line,column,offset:index+(pos.offset||0)}}function parseError(code,offset){var position=now();position.column+=offset,position.offset+=offset,handleWarning.call(warningContext,messages[code],position,code)}function flush(){queue&&(result.push(queue),handleText&&handleText.call(textContext,queue,{start:prev,end:now()}),queue="")}}(value,settings)};var own={}.hasOwnProperty,fromCharCode=String.fromCharCode,noop=Function.prototype,defaults={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},name="named",hexa="hexadecimal",deci="decimal",bases={};bases[hexa]=16,bases[deci]=10;var tests={};tests[name]=alphanumerical,tests[deci]=decimal,tests[hexa]=hexadecimal;var messages={};function prohibited(code){return code>=55296&&code<=57343||code>1114111}function disallowed(code){return code>=1&&code<=8||11===code||code>=13&&code<=31||code>=127&&code<=159||code>=64976&&code<=65007||!(65535&~code)||65534==(65535&code)}messages[1]="Named character references must be terminated by a semicolon",messages[2]="Numeric character references must be terminated by a semicolon",messages[3]="Named character references cannot be empty",messages[4]="Numeric character references cannot be empty",messages[5]="Named character references must be known",messages[6]="Numeric character references cannot be disallowed",messages[7]="Numeric character references cannot be outside the permissible Unicode range"}}),require_prism_core=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/node_modules/prismjs/components/prism-core.js"(exports,module){var Prism=function(_self2){var lang=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,uniqueId=0,plainTextGrammar={},_={manual:_self2.Prism&&_self2.Prism.manual,disableWorkerMessageHandler:_self2.Prism&&_self2.Prism.disableWorkerMessageHandler,util:{encode:function encode(tokens){return tokens instanceof Token?new Token(tokens.type,encode(tokens.content),tokens.alias):Array.isArray(tokens)?tokens.map(encode):tokens.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(o){return Object.prototype.toString.call(o).slice(8,-1)},objId:function(obj){return obj.__id||Object.defineProperty(obj,"__id",{value:++uniqueId}),obj.__id},clone:function deepClone(o,visited){var clone,id;switch(visited=visited||{},_.util.type(o)){case"Object":if(id=_.util.objId(o),visited[id])return visited[id];for(var key in clone={},visited[id]=clone,o)o.hasOwnProperty(key)&&(clone[key]=deepClone(o[key],visited));return clone;case"Array":return id=_.util.objId(o),visited[id]?visited[id]:(clone=[],visited[id]=clone,o.forEach((function(v,i){clone[i]=deepClone(v,visited)})),clone);default:return o}},getLanguage:function(element){for(;element;){var m=lang.exec(element.className);if(m)return m[1].toLowerCase();element=element.parentElement}return"none"},setLanguage:function(element,language){element.className=element.className.replace(RegExp(lang,"gi"),""),element.classList.add("language-"+language)},currentScript:function(){if(typeof document>"u")return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(err){var src=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack)||[])[1];if(src){var scripts=document.getElementsByTagName("script");for(var i in scripts)if(scripts[i].src==src)return scripts[i]}return null}},isActive:function(element,className,defaultActivation){for(var no="no-"+className;element;){var classList=element.classList;if(classList.contains(className))return!0;if(classList.contains(no))return!1;element=element.parentElement}return!!defaultActivation}},languages:{plain:plainTextGrammar,plaintext:plainTextGrammar,text:plainTextGrammar,txt:plainTextGrammar,extend:function(id,redef){var lang2=_.util.clone(_.languages[id]);for(var key in redef)lang2[key]=redef[key];return lang2},insertBefore:function(inside,before,insert,root){var grammar=(root=root||_.languages)[inside],ret={};for(var token in grammar)if(grammar.hasOwnProperty(token)){if(token==before)for(var newToken in insert)insert.hasOwnProperty(newToken)&&(ret[newToken]=insert[newToken]);insert.hasOwnProperty(token)||(ret[token]=grammar[token])}var old=root[inside];return root[inside]=ret,_.languages.DFS(_.languages,(function(key,value){value===old&&key!=inside&&(this[key]=ret)})),ret},DFS:function DFS(o,callback,type,visited){visited=visited||{};var objId=_.util.objId;for(var i in o)if(o.hasOwnProperty(i)){callback.call(o,i,o[i],type||i);var property=o[i],propertyType=_.util.type(property);"Object"!==propertyType||visited[objId(property)]?"Array"===propertyType&&!visited[objId(property)]&&(visited[objId(property)]=!0,DFS(property,callback,i,visited)):(visited[objId(property)]=!0,DFS(property,callback,null,visited))}}},plugins:{},highlightAll:function(async,callback){_.highlightAllUnder(document,async,callback)},highlightAllUnder:function(container,async,callback){var env={callback,container,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};_.hooks.run("before-highlightall",env),env.elements=Array.prototype.slice.apply(env.container.querySelectorAll(env.selector)),_.hooks.run("before-all-elements-highlight",env);for(var element,i=0;element=env.elements[i++];)_.highlightElement(element,!0===async,env.callback)},highlightElement:function(element,async,callback){var language=_.util.getLanguage(element),grammar=_.languages[language];_.util.setLanguage(element,language);var parent=element.parentElement;parent&&"pre"===parent.nodeName.toLowerCase()&&_.util.setLanguage(parent,language);var env={element,language,grammar,code:element.textContent};function insertHighlightedCode(highlightedCode){env.highlightedCode=highlightedCode,_.hooks.run("before-insert",env),env.element.innerHTML=env.highlightedCode,_.hooks.run("after-highlight",env),_.hooks.run("complete",env),callback&&callback.call(env.element)}if(_.hooks.run("before-sanity-check",env),(parent=env.element.parentElement)&&"pre"===parent.nodeName.toLowerCase()&&!parent.hasAttribute("tabindex")&&parent.setAttribute("tabindex","0"),!env.code)return _.hooks.run("complete",env),void(callback&&callback.call(env.element));if(_.hooks.run("before-highlight",env),env.grammar)if(async&&_self2.Worker){var worker=new Worker(_.filename);worker.onmessage=function(evt){insertHighlightedCode(evt.data)},worker.postMessage(JSON.stringify({language:env.language,code:env.code,immediateClose:!0}))}else insertHighlightedCode(_.highlight(env.code,env.grammar,env.language));else insertHighlightedCode(_.util.encode(env.code))},highlight:function(text,grammar,language){var env={code:text,grammar,language};if(_.hooks.run("before-tokenize",env),!env.grammar)throw new Error('The language "'+env.language+'" has no grammar.');return env.tokens=_.tokenize(env.code,env.grammar),_.hooks.run("after-tokenize",env),Token.stringify(_.util.encode(env.tokens),env.language)},tokenize:function(text,grammar){var rest=grammar.rest;if(rest){for(var token in rest)grammar[token]=rest[token];delete grammar.rest}var tokenList=new LinkedList;return addAfter(tokenList,tokenList.head,text),matchGrammar(text,tokenList,grammar,tokenList.head,0),function toArray(list){for(var array=[],node=list.head.next;node!==list.tail;)array.push(node.value),node=node.next;return array}(tokenList)},hooks:{all:{},add:function(name,callback){var hooks=_.hooks.all;hooks[name]=hooks[name]||[],hooks[name].push(callback)},run:function(name,env){var callbacks=_.hooks.all[name];if(callbacks&&callbacks.length)for(var callback,i=0;callback=callbacks[i++];)callback(env)}},Token};function Token(type,content,alias,matchedStr){this.type=type,this.content=content,this.alias=alias,this.length=0|(matchedStr||"").length}function matchPattern(pattern,pos,text,lookbehind){pattern.lastIndex=pos;var match=pattern.exec(text);if(match&&lookbehind&&match[1]){var lookbehindLength=match[1].length;match.index+=lookbehindLength,match[0]=match[0].slice(lookbehindLength)}return match}function matchGrammar(text,tokenList,grammar,startNode,startPos,rematch){for(var token in grammar)if(grammar.hasOwnProperty(token)&&grammar[token]){var patterns=grammar[token];patterns=Array.isArray(patterns)?patterns:[patterns];for(var j=0;j<patterns.length;++j){if(rematch&&rematch.cause==token+","+j)return;var patternObj=patterns[j],inside=patternObj.inside,lookbehind=!!patternObj.lookbehind,greedy=!!patternObj.greedy,alias=patternObj.alias;if(greedy&&!patternObj.pattern.global){var flags=patternObj.pattern.toString().match(/[imsuy]*$/)[0];patternObj.pattern=RegExp(patternObj.pattern.source,flags+"g")}for(var pattern=patternObj.pattern||patternObj,currentNode=startNode.next,pos=startPos;currentNode!==tokenList.tail&&!(rematch&&pos>=rematch.reach);pos+=currentNode.value.length,currentNode=currentNode.next){var str=currentNode.value;if(tokenList.length>text.length)return;if(!(str instanceof Token)){var match,removeCount=1;if(greedy){if(!(match=matchPattern(pattern,pos,text,lookbehind))||match.index>=text.length)break;var from=match.index,to=match.index+match[0].length,p=pos;for(p+=currentNode.value.length;from>=p;)p+=(currentNode=currentNode.next).value.length;if(pos=p-=currentNode.value.length,currentNode.value instanceof Token)continue;for(var k=currentNode;k!==tokenList.tail&&(p<to||"string"==typeof k.value);k=k.next)removeCount++,p+=k.value.length;removeCount--,str=text.slice(pos,p),match.index-=pos}else if(!(match=matchPattern(pattern,0,str,lookbehind)))continue;from=match.index;var matchStr=match[0],before=str.slice(0,from),after=str.slice(from+matchStr.length),reach=pos+str.length;rematch&&reach>rematch.reach&&(rematch.reach=reach);var removeFrom=currentNode.prev;if(before&&(removeFrom=addAfter(tokenList,removeFrom,before),pos+=before.length),removeRange(tokenList,removeFrom,removeCount),currentNode=addAfter(tokenList,removeFrom,new Token(token,inside?_.tokenize(matchStr,inside):matchStr,alias,matchStr)),after&&addAfter(tokenList,currentNode,after),removeCount>1){var nestedRematch={cause:token+","+j,reach};matchGrammar(text,tokenList,grammar,currentNode.prev,pos,nestedRematch),rematch&&nestedRematch.reach>rematch.reach&&(rematch.reach=nestedRematch.reach)}}}}}}function LinkedList(){var head={value:null,prev:null,next:null},tail={value:null,prev:head,next:null};head.next=tail,this.head=head,this.tail=tail,this.length=0}function addAfter(list,node,value){var next=node.next,newNode={value,prev:node,next};return node.next=newNode,next.prev=newNode,list.length++,newNode}function removeRange(list,node,count){for(var next=node.next,i=0;i<count&&next!==list.tail;i++)next=next.next;node.next=next,next.prev=node,list.length-=i}if(_self2.Prism=_,Token.stringify=function stringify(o,language){if("string"==typeof o)return o;if(Array.isArray(o)){var s="";return o.forEach((function(e){s+=stringify(e,language)})),s}var env={type:o.type,content:stringify(o.content,language),tag:"span",classes:["token",o.type],attributes:{},language},aliases=o.alias;aliases&&(Array.isArray(aliases)?Array.prototype.push.apply(env.classes,aliases):env.classes.push(aliases)),_.hooks.run("wrap",env);var attributes="";for(var name in env.attributes)attributes+=" "+name+'="'+(env.attributes[name]||"").replace(/"/g,"&quot;")+'"';return"<"+env.tag+' class="'+env.classes.join(" ")+'"'+attributes+">"+env.content+"</"+env.tag+">"},!_self2.document)return _self2.addEventListener&&(_.disableWorkerMessageHandler||_self2.addEventListener("message",(function(evt){var message=JSON.parse(evt.data),lang2=message.language,code=message.code,immediateClose=message.immediateClose;_self2.postMessage(_.highlight(code,_.languages[lang2],lang2)),immediateClose&&_self2.close()}),!1)),_;var script=_.util.currentScript();function highlightAutomaticallyCallback(){_.manual||_.highlightAll()}if(script&&(_.filename=script.src,script.hasAttribute("data-manual")&&(_.manual=!0)),!_.manual){var readyState=document.readyState;"loading"===readyState||"interactive"===readyState&&script&&script.defer?document.addEventListener("DOMContentLoaded",highlightAutomaticallyCallback):window.requestAnimationFrame?window.requestAnimationFrame(highlightAutomaticallyCallback):window.setTimeout(highlightAutomaticallyCallback,16)}return _}(typeof window<"u"?window:typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?self:{});typeof module<"u"&&module.exports&&(module.exports=Prism),typeof global<"u"&&(global.Prism=Prism)}}),require_core=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/core.js"(exports,module){var ctx="object"==typeof globalThis?globalThis:"object"==typeof self?self:"object"==typeof window?window:"object"==typeof global?global:{},restore=function capture(){var defined="Prism"in ctx,current=defined?ctx.Prism:void 0;return function restore2(){defined?ctx.Prism=current:delete ctx.Prism,defined=void 0,current=void 0}}();ctx.Prism={manual:!0,disableWorkerMessageHandler:!0};var h=require_hastscript(),decode=require_parse_entities(),Prism=require_prism_core(),markup=require_markup(),css=require_css(),clike=require_clike(),js=require_javascript();restore();var own={}.hasOwnProperty;function Refractor(){}Refractor.prototype=Prism;var refract=new Refractor;function register(grammar){if("function"!=typeof grammar||!grammar.displayName)throw new Error("Expected `function` for `grammar`, got `"+grammar+"`");void 0===refract.languages[grammar.displayName]&&grammar(refract)}module.exports=refract,refract.highlight=function highlight(value,name){var grammar,sup=Prism.highlight;if("string"!=typeof value)throw new Error("Expected `string` for `value`, got `"+value+"`");if("Object"===refract.util.type(name))grammar=name,name=null;else{if("string"!=typeof name)throw new Error("Expected `string` for `name`, got `"+name+"`");if(!own.call(refract.languages,name))throw new Error("Unknown language: `"+name+"` is not registered");grammar=refract.languages[name]}return sup.call(this,value,grammar,name)},refract.register=register,refract.alias=function alias(name,alias2){var key,list,length,index,languages=refract.languages,map=name;for(key in alias2&&((map={})[name]=alias2),map)for(list=map[key],length=(list="string"==typeof list?[list]:list).length,index=-1;++index<length;)languages[list[index]]=languages[key]},refract.registered=function registered(language){if("string"!=typeof language)throw new Error("Expected `string` for `language`, got `"+language+"`");return own.call(refract.languages,language)},refract.listLanguages=function listLanguages(){var language,languages=refract.languages,list=[];for(language in languages)own.call(languages,language)&&"object"==typeof languages[language]&&list.push(language);return list},register(markup),register(css),register(clike),register(js),refract.util.encode=function encode(tokens){return tokens},refract.Token.stringify=function stringify(value,language,parent){var env;return"string"==typeof value?{type:"text",value}:"Array"===refract.util.type(value)?function stringifyAll(values,language){for(var value,result=[],length=values.length,index=-1;++index<length;)""!==(value=values[index])&&null!=value&&result.push(value);for(index=-1,length=result.length;++index<length;)value=result[index],result[index]=refract.Token.stringify(value,language,result);return result}(value,language):(env={type:value.type,content:refract.Token.stringify(value.content,language,parent),tag:"span",classes:["token",value.type],attributes:{},language,parent},value.alias&&(env.classes=env.classes.concat(value.alias)),refract.hooks.run("wrap",env),h(env.tag+"."+env.classes.join("."),function attributes(attrs){var key;for(key in attrs)attrs[key]=decode(attrs[key]);return attrs}(env.attributes),env.content))}}}),require_bash=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/bash.js"(exports,module){function bash(Prism){!function(Prism2){var envVars="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",commandAfterHeredoc={pattern:/(^(["']?)\w+\2)[ \t]+\S.*/,lookbehind:!0,alias:"punctuation",inside:null},insideString={bash:commandAfterHeredoc,environment:{pattern:RegExp("\\$"+envVars),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+envVars),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/};Prism2.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b[\w-]+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+envVars),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:insideString},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0,inside:{bash:commandAfterHeredoc}},{pattern:/(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,lookbehind:!0,greedy:!0,inside:insideString},{pattern:/(^|[^$\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\$'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,inside:{entity:insideString.entity}}],environment:{pattern:RegExp("\\$?"+envVars),alias:"constant"},variable:insideString.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}},commandAfterHeredoc.inside=Prism2.languages.bash;for(var toBeCopied=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],inside=insideString.variable[1].inside,i=0;i<toBeCopied.length;i++)inside[toBeCopied[i]]=Prism2.languages.bash[toBeCopied[i]];Prism2.languages.shell=Prism2.languages.bash}(Prism)}module.exports=bash,bash.displayName="bash",bash.aliases=["shell"]}}),require_js_extras=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/js-extras.js"(exports,module){function jsExtras(Prism){!function(Prism2){function withId(source,flags){return RegExp(source.replace(/<ID>/g,(function(){return/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source})),flags)}Prism2.languages.insertBefore("javascript","function-variable",{"method-variable":{pattern:RegExp("(\\.\\s*)"+Prism2.languages.javascript["function-variable"].pattern.source),lookbehind:!0,alias:["function-variable","method","function","property-access"]}}),Prism2.languages.insertBefore("javascript","function",{method:{pattern:RegExp("(\\.\\s*)"+Prism2.languages.javascript.function.source),lookbehind:!0,alias:["function","property-access"]}}),Prism2.languages.insertBefore("javascript","constant",{"known-class-name":[{pattern:/\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,alias:"class-name"},{pattern:/\b(?:[A-Z]\w*)Error\b/,alias:"class-name"}]}),Prism2.languages.insertBefore("javascript","keyword",{imports:{pattern:withId(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),lookbehind:!0,inside:Prism2.languages.javascript},exports:{pattern:withId(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),lookbehind:!0,inside:Prism2.languages.javascript}}),Prism2.languages.javascript.keyword.unshift({pattern:/\b(?:as|default|export|from|import)\b/,alias:"module"},{pattern:/\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,alias:"control-flow"},{pattern:/\bnull\b/,alias:["null","nil"]},{pattern:/\bundefined\b/,alias:"nil"}),Prism2.languages.insertBefore("javascript","operator",{spread:{pattern:/\.{3}/,alias:"operator"},arrow:{pattern:/=>/,alias:"operator"}}),Prism2.languages.insertBefore("javascript","punctuation",{"property-access":{pattern:withId(/(\.\s*)#?<ID>/.source),lookbehind:!0},"maybe-class-name":{pattern:/(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,lookbehind:!0},dom:{pattern:/\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,alias:"variable"},console:{pattern:/\bconsole(?=\s*\.)/,alias:"class-name"}});for(var maybeClassNameTokens=["function","function-variable","method","method-variable","property-access"],i=0;i<maybeClassNameTokens.length;i++){var token=maybeClassNameTokens[i],value=Prism2.languages.javascript[token];"RegExp"===Prism2.util.type(value)&&(value=Prism2.languages.javascript[token]={pattern:value});var inside=value.inside||{};value.inside=inside,inside["maybe-class-name"]=/^[A-Z][\s\S]*/}}(Prism)}module.exports=jsExtras,jsExtras.displayName="jsExtras",jsExtras.aliases=[]}}),require_json=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/json.js"(exports,module){function json(Prism){Prism.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},Prism.languages.webmanifest=Prism.languages.json}module.exports=json,json.displayName="json",json.aliases=["webmanifest"]}}),require_graphql=(0,chunk_SCHQIR5W.P)({"../../node_modules/refractor/lang/graphql.js"(exports,module){function graphql(Prism){Prism.languages.graphql={comment:/#.*/,description:{pattern:/(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,greedy:!0,alias:"string",inside:{"language-markdown":{pattern:/(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,lookbehind:!0,inside:Prism.languages.markdown}}},string:{pattern:/"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,greedy:!0},number:/(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,boolean:/\b(?:false|true)\b/,variable:/\$[a-z_]\w*/i,directive:{pattern:/@[a-z_]\w*/i,alias:"function"},"attr-name":{pattern:/\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,greedy:!0},"atom-input":{pattern:/\b[A-Z]\w*Input\b/,alias:"class-name"},scalar:/\b(?:Boolean|Float|ID|Int|String)\b/,constant:/\b[A-Z][A-Z_\d]*\b/,"class-name":{pattern:/(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,lookbehind:!0},fragment:{pattern:/(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-mutation":{pattern:/(\bmutation\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-query":{pattern:/(\bquery\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},keyword:/\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,operator:/[!=|&]|\.{3}/,"property-query":/\w+(?=\s*\()/,object:/\w+(?=\s*\{)/,punctuation:/[!(){}\[\]:=,]/,property:/\w+/},Prism.hooks.add("after-tokenize",(function(env){if("graphql"===env.language)for(var validTokens=env.tokens.filter((function(token){return"string"!=typeof token&&"comment"!==token.type&&"scalar"!==token.type})),currentIndex=0;currentIndex<validTokens.length;){var startToken=validTokens[currentIndex++];if("keyword"===startToken.type&&"mutation"===startToken.content){var inputVariables=[];if(isTokenType(["definition-mutation","punctuation"])&&"("===getToken(1).content){currentIndex+=2;var definitionEnd=findClosingBracket(/^\($/,/^\)$/);if(-1===definitionEnd)continue;for(;currentIndex<definitionEnd;currentIndex++){var t=getToken(0);"variable"===t.type&&(addAlias(t,"variable-input"),inputVariables.push(t.content))}currentIndex=definitionEnd+1}if(isTokenType(["punctuation","property-query"])&&"{"===getToken(0).content&&(currentIndex++,addAlias(getToken(0),"property-mutation"),inputVariables.length>0)){var mutationEnd=findClosingBracket(/^\{$/,/^\}$/);if(-1===mutationEnd)continue;for(var i=currentIndex;i<mutationEnd;i++){var varToken=validTokens[i];"variable"===varToken.type&&inputVariables.indexOf(varToken.content)>=0&&addAlias(varToken,"variable-input")}}}}function getToken(offset){return validTokens[currentIndex+offset]}function isTokenType(types,offset){offset=offset||0;for(var i2=0;i2<types.length;i2++){var token=getToken(i2+offset);if(!token||token.type!==types[i2])return!1}return!0}function findClosingBracket(open,close){for(var stackHeight=1,i2=currentIndex;i2<validTokens.length;i2++){var token=validTokens[i2],content=token.content;if("punctuation"===token.type&&"string"==typeof content)if(open.test(content))stackHeight++;else if(close.test(content)&&0===--stackHeight)return i2}return-1}function addAlias(token,alias){var aliases=token.alias;aliases?Array.isArray(aliases)||(token.alias=aliases=[aliases]):token.alias=aliases=[],aliases.push(alias)}}))}module.exports=graphql,graphql.displayName="graphql",graphql.aliases=[]}}),react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/@storybook/client-logger/dist/index.mjs"),theming_dist=__webpack_require__("./node_modules/@storybook/theming/dist/index.mjs"),global_dist=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),memoizerific=__webpack_require__("./node_modules/memoizerific/memoizerific.js"),react_dom=__webpack_require__("./node_modules/react-dom/index.js"),react_slot_dist=__webpack_require__("./node_modules/@radix-ui/react-slot/dist/index.mjs"),jsx_default=(0,chunk_SCHQIR5W.f)(require_jsx()).default,bash_default=(0,chunk_SCHQIR5W.f)(require_bash()).default,css_default=(0,chunk_SCHQIR5W.f)(require_css()).default,js_extras_default=(0,chunk_SCHQIR5W.f)(require_js_extras()).default,json_default=(0,chunk_SCHQIR5W.f)(require_json()).default,graphql_default=(0,chunk_SCHQIR5W.f)(require_graphql()).default,markup_default=(0,chunk_SCHQIR5W.f)(require_markup()).default,markdown_default=(0,chunk_SCHQIR5W.f)(require_markdown()).default,yaml_default=(0,chunk_SCHQIR5W.f)(require_yaml()).default,tsx_default=(0,chunk_SCHQIR5W.f)(require_tsx()).default,typescript_default=(0,chunk_SCHQIR5W.f)(require_typescript()).default;function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if(typeof Symbol<"u"&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if("Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _typeof(o){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o2){return typeof o2}:function(o2){return o2&&"function"==typeof Symbol&&o2.constructor===Symbol&&o2!==Symbol.prototype?"symbol":typeof o2})(o)}function toPropertyKey(t){var i=function toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:String(i)}function _defineProperty(obj,key,value){return(key=toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var classNameCombinations={};function createStyleObject(classNames){var elementStyle=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},stylesheet=arguments.length>2?arguments[2]:void 0;return function getClassNameCombinations(classNames){if(0===classNames.length||1===classNames.length)return classNames;var key=classNames.join(".");return classNameCombinations[key]||(classNameCombinations[key]=function powerSetPermutations(arr){var arrLength=arr.length;return 0===arrLength||1===arrLength?arr:2===arrLength?[arr[0],arr[1],"".concat(arr[0],".").concat(arr[1]),"".concat(arr[1],".").concat(arr[0])]:3===arrLength?[arr[0],arr[1],arr[2],"".concat(arr[0],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[0]),"".concat(arr[1],".").concat(arr[2]),"".concat(arr[2],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[1],".").concat(arr[2]),"".concat(arr[0],".").concat(arr[2],".").concat(arr[1]),"".concat(arr[1],".").concat(arr[0],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[2],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[0],".").concat(arr[1]),"".concat(arr[2],".").concat(arr[1],".").concat(arr[0])]:arrLength>=4?[arr[0],arr[1],arr[2],arr[3],"".concat(arr[0],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[2]),"".concat(arr[0],".").concat(arr[3]),"".concat(arr[1],".").concat(arr[0]),"".concat(arr[1],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[3]),"".concat(arr[2],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[1]),"".concat(arr[2],".").concat(arr[3]),"".concat(arr[3],".").concat(arr[0]),"".concat(arr[3],".").concat(arr[1]),"".concat(arr[3],".").concat(arr[2]),"".concat(arr[0],".").concat(arr[1],".").concat(arr[2]),"".concat(arr[0],".").concat(arr[1],".").concat(arr[3]),"".concat(arr[0],".").concat(arr[2],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[2],".").concat(arr[3]),"".concat(arr[0],".").concat(arr[3],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[3],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[0],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[0],".").concat(arr[3]),"".concat(arr[1],".").concat(arr[2],".").concat(arr[0]),"".concat(arr[1],".").concat(arr[2],".").concat(arr[3]),"".concat(arr[1],".").concat(arr[3],".").concat(arr[0]),"".concat(arr[1],".").concat(arr[3],".").concat(arr[2]),"".concat(arr[2],".").concat(arr[0],".").concat(arr[1]),"".concat(arr[2],".").concat(arr[0],".").concat(arr[3]),"".concat(arr[2],".").concat(arr[1],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[1],".").concat(arr[3]),"".concat(arr[2],".").concat(arr[3],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[3],".").concat(arr[1]),"".concat(arr[3],".").concat(arr[0],".").concat(arr[1]),"".concat(arr[3],".").concat(arr[0],".").concat(arr[2]),"".concat(arr[3],".").concat(arr[1],".").concat(arr[0]),"".concat(arr[3],".").concat(arr[1],".").concat(arr[2]),"".concat(arr[3],".").concat(arr[2],".").concat(arr[0]),"".concat(arr[3],".").concat(arr[2],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[1],".").concat(arr[2],".").concat(arr[3]),"".concat(arr[0],".").concat(arr[1],".").concat(arr[3],".").concat(arr[2]),"".concat(arr[0],".").concat(arr[2],".").concat(arr[1],".").concat(arr[3]),"".concat(arr[0],".").concat(arr[2],".").concat(arr[3],".").concat(arr[1]),"".concat(arr[0],".").concat(arr[3],".").concat(arr[1],".").concat(arr[2]),"".concat(arr[0],".").concat(arr[3],".").concat(arr[2],".").concat(arr[1]),"".concat(arr[1],".").concat(arr[0],".").concat(arr[2],".").concat(arr[3]),"".concat(arr[1],".").concat(arr[0],".").concat(arr[3],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[2],".").concat(arr[0],".").concat(arr[3]),"".concat(arr[1],".").concat(arr[2],".").concat(arr[3],".").concat(arr[0]),"".concat(arr[1],".").concat(arr[3],".").concat(arr[0],".").concat(arr[2]),"".concat(arr[1],".").concat(arr[3],".").concat(arr[2],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[0],".").concat(arr[1],".").concat(arr[3]),"".concat(arr[2],".").concat(arr[0],".").concat(arr[3],".").concat(arr[1]),"".concat(arr[2],".").concat(arr[1],".").concat(arr[0],".").concat(arr[3]),"".concat(arr[2],".").concat(arr[1],".").concat(arr[3],".").concat(arr[0]),"".concat(arr[2],".").concat(arr[3],".").concat(arr[0],".").concat(arr[1]),"".concat(arr[2],".").concat(arr[3],".").concat(arr[1],".").concat(arr[0]),"".concat(arr[3],".").concat(arr[0],".").concat(arr[1],".").concat(arr[2]),"".concat(arr[3],".").concat(arr[0],".").concat(arr[2],".").concat(arr[1]),"".concat(arr[3],".").concat(arr[1],".").concat(arr[0],".").concat(arr[2]),"".concat(arr[3],".").concat(arr[1],".").concat(arr[2],".").concat(arr[0]),"".concat(arr[3],".").concat(arr[2],".").concat(arr[0],".").concat(arr[1]),"".concat(arr[3],".").concat(arr[2],".").concat(arr[1],".").concat(arr[0])]:void 0}(classNames)),classNameCombinations[key]}(classNames.filter((function(className){return"token"!==className}))).reduce((function(styleObject,className){return _objectSpread(_objectSpread({},styleObject),stylesheet[className])}),elementStyle)}function createClassNameString(classNames){return classNames.join(" ")}function createElement(_ref){var node=_ref.node,stylesheet=_ref.stylesheet,_ref$style=_ref.style,style=void 0===_ref$style?{}:_ref$style,useInlineStyles=_ref.useInlineStyles,key=_ref.key,properties=node.properties,type=node.type,TagName=node.tagName,value=node.value;if("text"===type)return value;if(TagName){var props,childrenCreator=function createChildren(stylesheet,useInlineStyles){var childrenCount=0;return function(children){return childrenCount+=1,children.map((function(child,i){return createElement({node:child,stylesheet,useInlineStyles,key:"code-segment-".concat(childrenCount,"-").concat(i)})}))}}(stylesheet,useInlineStyles);if(useInlineStyles){var allStylesheetSelectors=Object.keys(stylesheet).reduce((function(classes,selector){return selector.split(".").forEach((function(className2){classes.includes(className2)||classes.push(className2)})),classes}),[]),startingClassName=properties.className&&properties.className.includes("token")?["token"]:[],className=properties.className&&startingClassName.concat(properties.className.filter((function(className2){return!allStylesheetSelectors.includes(className2)})));props=_objectSpread(_objectSpread({},properties),{},{className:createClassNameString(className)||void 0,style:createStyleObject(properties.className,Object.assign({},properties.style,style),stylesheet)})}else props=_objectSpread(_objectSpread({},properties),{},{className:createClassNameString(properties.className)});var children=childrenCreator(node.children);return react.createElement(TagName,(0,chunk_FD4M6EBV.r)({key},props),children)}}var checkForListedLanguage_default=function(astGenerator,language){return-1!==astGenerator.listLanguages().indexOf(language)},_excluded=["language","children","style","customStyle","codeTagProps","useInlineStyles","showLineNumbers","showInlineLineNumbers","startingLineNumber","lineNumberContainerStyle","lineNumberStyle","wrapLines","wrapLongLines","lineProps","renderer","PreTag","CodeTag","code","astGenerator"];function ownKeys2(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys2(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys2(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var newLineRegex=/\n/g;function AllLineNumbers(_ref2){var codeString=_ref2.codeString,codeStyle=_ref2.codeStyle,_ref2$containerStyle=_ref2.containerStyle,containerStyle=void 0===_ref2$containerStyle?{float:"left",paddingRight:"10px"}:_ref2$containerStyle,_ref2$numberStyle=_ref2.numberStyle,numberStyle=void 0===_ref2$numberStyle?{}:_ref2$numberStyle,startingLineNumber=_ref2.startingLineNumber;return react.createElement("code",{style:Object.assign({},codeStyle,containerStyle)},function getAllLineNumbers(_ref){var lines=_ref.lines,startingLineNumber=_ref.startingLineNumber,style=_ref.style;return lines.map((function(_,i){var number=i+startingLineNumber;return react.createElement("span",{key:"line-".concat(i),className:"react-syntax-highlighter-line-number",style:"function"==typeof style?style(number):style},"".concat(number,"\n"))}))}({lines:codeString.replace(/\n$/,"").split("\n"),style:numberStyle,startingLineNumber}))}function getInlineLineNumber(lineNumber,inlineLineNumberStyle){return{type:"element",tagName:"span",properties:{key:"line-number--".concat(lineNumber),className:["comment","linenumber","react-syntax-highlighter-line-number"],style:inlineLineNumberStyle},children:[{type:"text",value:lineNumber}]}}function assembleLineNumberStyles(lineNumberStyle,lineNumber,largestLineNumber){var num,defaultLineNumberStyle={display:"inline-block",minWidth:(num=largestLineNumber,"".concat(num.toString().length,".25em")),paddingRight:"1em",textAlign:"right",userSelect:"none"},customLineNumberStyle="function"==typeof lineNumberStyle?lineNumberStyle(lineNumber):lineNumberStyle;return _objectSpread2(_objectSpread2({},defaultLineNumberStyle),customLineNumberStyle)}function createLineElement(_ref3){var children=_ref3.children,lineNumber=_ref3.lineNumber,lineNumberStyle=_ref3.lineNumberStyle,largestLineNumber=_ref3.largestLineNumber,showInlineLineNumbers=_ref3.showInlineLineNumbers,_ref3$lineProps=_ref3.lineProps,lineProps=void 0===_ref3$lineProps?{}:_ref3$lineProps,_ref3$className=_ref3.className,className=void 0===_ref3$className?[]:_ref3$className,showLineNumbers=_ref3.showLineNumbers,wrapLongLines=_ref3.wrapLongLines,properties="function"==typeof lineProps?lineProps(lineNumber):lineProps;if(properties.className=className,lineNumber&&showInlineLineNumbers){var inlineLineNumberStyle=assembleLineNumberStyles(lineNumberStyle,lineNumber,largestLineNumber);children.unshift(getInlineLineNumber(lineNumber,inlineLineNumberStyle))}return wrapLongLines&showLineNumbers&&(properties.style=_objectSpread2(_objectSpread2({},properties.style),{},{display:"flex"})),{type:"element",tagName:"span",properties,children}}function flattenCodeTree(tree){for(var className=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],newTree=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],i=0;i<tree.length;i++){var node=tree[i];if("text"===node.type)newTree.push(createLineElement({children:[node],className:_toConsumableArray(new Set(className))}));else if(node.children){var classNames=className.concat(node.properties.className);flattenCodeTree(node.children,classNames).forEach((function(i2){return newTree.push(i2)}))}}return newTree}function processLines(codeTree,wrapLines,lineProps,showLineNumbers,showInlineLineNumbers,startingLineNumber,largestLineNumber,lineNumberStyle,wrapLongLines){var _ref4,tree=flattenCodeTree(codeTree.value),newTree=[],lastLineBreakIndex=-1,index=0;function createLine(children2,lineNumber2){var className=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return wrapLines||className.length>0?function createWrappedLine(children2,lineNumber2){return createLineElement({children:children2,lineNumber:lineNumber2,lineNumberStyle,largestLineNumber,showInlineLineNumbers,lineProps,className:arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],showLineNumbers,wrapLongLines})}(children2,lineNumber2,className):function createUnwrappedLine(children2,lineNumber2){if(showLineNumbers&&lineNumber2&&showInlineLineNumbers){var inlineLineNumberStyle=assembleLineNumberStyles(lineNumberStyle,lineNumber2,largestLineNumber);children2.unshift(getInlineLineNumber(lineNumber2,inlineLineNumberStyle))}return children2}(children2,lineNumber2)}for(var _loop=function(){var node=tree[index],value=node.children[0].value;if(function getNewLines(str){return str.match(newLineRegex)}(value)){var splitValue=value.split("\n");splitValue.forEach((function(text,i){var lineNumber2=showLineNumbers&&newTree.length+startingLineNumber,newChild={type:"text",value:"".concat(text,"\n")};if(0===i){var _line=createLine(tree.slice(lastLineBreakIndex+1,index).concat(createLineElement({children:[newChild],className:node.properties.className})),lineNumber2);newTree.push(_line)}else if(i===splitValue.length-1){var stringChild=tree[index+1]&&tree[index+1].children&&tree[index+1].children[0],lastLineInPreviousSpan={type:"text",value:"".concat(text)};if(stringChild){var newElem=createLineElement({children:[lastLineInPreviousSpan],className:node.properties.className});tree.splice(index+1,0,newElem)}else{var _line2=createLine([lastLineInPreviousSpan],lineNumber2,node.properties.className);newTree.push(_line2)}}else{var _line3=createLine([newChild],lineNumber2,node.properties.className);newTree.push(_line3)}})),lastLineBreakIndex=index}index++};index<tree.length;)_loop();if(lastLineBreakIndex!==tree.length-1){var children=tree.slice(lastLineBreakIndex+1,tree.length);if(children&&children.length){var line=createLine(children,showLineNumbers&&newTree.length+startingLineNumber);newTree.push(line)}}return wrapLines?newTree:(_ref4=[]).concat.apply(_ref4,newTree)}function defaultRenderer(_ref5){var rows=_ref5.rows,stylesheet=_ref5.stylesheet,useInlineStyles=_ref5.useInlineStyles;return rows.map((function(node,i){return createElement({node,stylesheet,useInlineStyles,key:"code-segement".concat(i)})}))}function isHighlightJs(astGenerator){return astGenerator&&typeof astGenerator.highlightAuto<"u"}var import_core=(0,chunk_SCHQIR5W.f)(require_core()),SyntaxHighlighter=function highlight_default(defaultAstGenerator,defaultStyle){return function(_ref7){var language=_ref7.language,children=_ref7.children,_ref7$style=_ref7.style,style=void 0===_ref7$style?defaultStyle:_ref7$style,_ref7$customStyle=_ref7.customStyle,customStyle=void 0===_ref7$customStyle?{}:_ref7$customStyle,_ref7$codeTagProps=_ref7.codeTagProps,codeTagProps=void 0===_ref7$codeTagProps?{className:language?"language-".concat(language):void 0,style:_objectSpread2(_objectSpread2({},style['code[class*="language-"]']),style['code[class*="language-'.concat(language,'"]')])}:_ref7$codeTagProps,_ref7$useInlineStyles=_ref7.useInlineStyles,useInlineStyles=void 0===_ref7$useInlineStyles||_ref7$useInlineStyles,_ref7$showLineNumbers=_ref7.showLineNumbers,showLineNumbers=void 0!==_ref7$showLineNumbers&&_ref7$showLineNumbers,_ref7$showInlineLineN=_ref7.showInlineLineNumbers,showInlineLineNumbers=void 0===_ref7$showInlineLineN||_ref7$showInlineLineN,_ref7$startingLineNum=_ref7.startingLineNumber,startingLineNumber=void 0===_ref7$startingLineNum?1:_ref7$startingLineNum,lineNumberContainerStyle=_ref7.lineNumberContainerStyle,_ref7$lineNumberStyle=_ref7.lineNumberStyle,lineNumberStyle=void 0===_ref7$lineNumberStyle?{}:_ref7$lineNumberStyle,wrapLines=_ref7.wrapLines,_ref7$wrapLongLines=_ref7.wrapLongLines,wrapLongLines=void 0!==_ref7$wrapLongLines&&_ref7$wrapLongLines,_ref7$lineProps=_ref7.lineProps,lineProps=void 0===_ref7$lineProps?{}:_ref7$lineProps,renderer=_ref7.renderer,_ref7$PreTag=_ref7.PreTag,PreTag=void 0===_ref7$PreTag?"pre":_ref7$PreTag,_ref7$CodeTag=_ref7.CodeTag,CodeTag=void 0===_ref7$CodeTag?"code":_ref7$CodeTag,_ref7$code=_ref7.code,code=void 0===_ref7$code?(Array.isArray(children)?children[0]:children)||"":_ref7$code,astGenerator=_ref7.astGenerator,rest=function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=(0,chunk_FD4M6EBV.i)(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],!(excluded.indexOf(key)>=0)&&Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}(_ref7,_excluded);astGenerator=astGenerator||defaultAstGenerator;var allLineNumbers=showLineNumbers?react.createElement(AllLineNumbers,{containerStyle:lineNumberContainerStyle,codeStyle:codeTagProps.style||{},numberStyle:lineNumberStyle,startingLineNumber,codeString:code}):null,defaultPreStyle=style.hljs||style['pre[class*="language-"]']||{backgroundColor:"#fff"},generatorClassName=isHighlightJs(astGenerator)?"hljs":"prismjs",preProps=useInlineStyles?Object.assign({},rest,{style:Object.assign({},defaultPreStyle,customStyle)}):Object.assign({},rest,{className:rest.className?"".concat(generatorClassName," ").concat(rest.className):generatorClassName,style:Object.assign({},customStyle)});if(codeTagProps.style=_objectSpread2(_objectSpread2({},codeTagProps.style),{},wrapLongLines?{whiteSpace:"pre-wrap"}:{whiteSpace:"pre"}),!astGenerator)return react.createElement(PreTag,preProps,allLineNumbers,react.createElement(CodeTag,codeTagProps,code));(void 0===wrapLines&&renderer||wrapLongLines)&&(wrapLines=!0),renderer=renderer||defaultRenderer;var defaultCodeValue=[{type:"text",value:code}],codeTree=function getCodeTree(_ref6){var astGenerator=_ref6.astGenerator,language=_ref6.language,code=_ref6.code,defaultCodeValue=_ref6.defaultCodeValue;if(isHighlightJs(astGenerator)){var hasLanguage=checkForListedLanguage_default(astGenerator,language);return"text"===language?{value:defaultCodeValue,language:"text"}:hasLanguage?astGenerator.highlight(language,code):astGenerator.highlightAuto(code)}try{return language&&"text"!==language?{value:astGenerator.highlight(code,language)}:{value:defaultCodeValue}}catch{return{value:defaultCodeValue}}}({astGenerator,language,code,defaultCodeValue});null===codeTree.language&&(codeTree.value=defaultCodeValue);var rows=processLines(codeTree,wrapLines,lineProps,showLineNumbers,showInlineLineNumbers,startingLineNumber,codeTree.value.length+startingLineNumber,lineNumberStyle,wrapLongLines);return react.createElement(PreTag,preProps,react.createElement(CodeTag,codeTagProps,!showInlineLineNumbers&&allLineNumbers,renderer({rows,stylesheet:style,useInlineStyles})))}}(import_core.default,{});SyntaxHighlighter.registerLanguage=function(_,language){return import_core.default.register(language)},SyntaxHighlighter.alias=function(name,aliases){return import_core.default.alias(name,aliases)};var prism_light_default=SyntaxHighlighter,Container=theming_dist.I4.div((({theme})=>({position:"absolute",bottom:0,right:0,maxWidth:"100%",display:"flex",background:theme.background.content,zIndex:1}))),ActionButton=theming_dist.I4.button((({theme})=>({margin:0,border:"0 none",padding:"4px 10px",cursor:"pointer",display:"flex",alignItems:"center",color:theme.color.defaultText,background:theme.background.content,fontSize:12,lineHeight:"16px",fontFamily:theme.typography.fonts.base,fontWeight:theme.typography.weight.bold,borderTop:`1px solid ${theme.appBorderColor}`,borderLeft:`1px solid ${theme.appBorderColor}`,marginLeft:-1,borderRadius:"4px 0 0 0","&:not(:last-child)":{borderRight:`1px solid ${theme.appBorderColor}`},"& + *":{borderLeft:`1px solid ${theme.appBorderColor}`,borderRadius:0},"&:focus":{boxShadow:`${theme.color.secondary} 0 -3px 0 0 inset`,outline:"0 none"}})),(({disabled})=>disabled&&{cursor:"not-allowed",opacity:.5}));ActionButton.displayName="ActionButton";var ActionBar=({actionItems,...props})=>react.createElement(Container,{...props},actionItems.map((({title,className,onClick,disabled},index)=>react.createElement(ActionButton,{key:index,className,onClick,disabled},title)))),$8927f6f2acc4f386$export$250ffa63cdc0d034=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"].reduce(((primitive,node)=>{let Node=(0,react.forwardRef)(((props,forwardedRef)=>{let{asChild,...primitiveProps}=props,Comp=asChild?react_slot_dist.DX:node;return(0,react.useEffect)((()=>{window[Symbol.for("radix-ui")]=!0}),[]),(0,react.createElement)(Comp,(0,chunk_FD4M6EBV.r)({},primitiveProps,{ref:forwardedRef}))}));return Node.displayName=`Primitive.${node}`,{...primitive,[node]:Node}}),{});function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs){return(0,react.useCallback)(function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs){return node=>refs.forEach((ref=>function $6ed0406888f73fc4$var$setRef(ref,value){"function"==typeof ref?ref(value):null!=ref&&(ref.current=value)}(ref,node)))}(...refs),refs)}var $9f79659886946c16$export$e5c5a5f917a5871c=globalThis?.document?react.useLayoutEffect:()=>{};var $921a889cee6df7e8$export$99c2b779aa4e8b8b=props=>{let{present,children}=props,presence=function $921a889cee6df7e8$var$usePresence(present){let[node1,setNode]=(0,react.useState)(),stylesRef=(0,react.useRef)({}),prevPresentRef=(0,react.useRef)(present),prevAnimationNameRef=(0,react.useRef)("none"),initialState=present?"mounted":"unmounted",[state,send]=function $fe963b355347cc68$export$3e6543de14f8614f(initialState,machine){return(0,react.useReducer)(((state,event)=>machine[state][event]??state),initialState)}(initialState,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return(0,react.useEffect)((()=>{let currentAnimationName=$921a889cee6df7e8$var$getAnimationName(stylesRef.current);prevAnimationNameRef.current="mounted"===state?currentAnimationName:"none"}),[state]),$9f79659886946c16$export$e5c5a5f917a5871c((()=>{let styles=stylesRef.current,wasPresent=prevPresentRef.current;if(wasPresent!==present){let prevAnimationName=prevAnimationNameRef.current,currentAnimationName=$921a889cee6df7e8$var$getAnimationName(styles);send(present?"MOUNT":"none"===currentAnimationName||"none"===styles?.display?"UNMOUNT":wasPresent&&prevAnimationName!==currentAnimationName?"ANIMATION_OUT":"UNMOUNT"),prevPresentRef.current=present}}),[present,send]),$9f79659886946c16$export$e5c5a5f917a5871c((()=>{if(node1){let handleAnimationEnd=event=>{let isCurrentAnimation=$921a889cee6df7e8$var$getAnimationName(stylesRef.current).includes(event.animationName);event.target===node1&&isCurrentAnimation&&(0,react_dom.flushSync)((()=>send("ANIMATION_END")))},handleAnimationStart=event=>{event.target===node1&&(prevAnimationNameRef.current=$921a889cee6df7e8$var$getAnimationName(stylesRef.current))};return node1.addEventListener("animationstart",handleAnimationStart),node1.addEventListener("animationcancel",handleAnimationEnd),node1.addEventListener("animationend",handleAnimationEnd),()=>{node1.removeEventListener("animationstart",handleAnimationStart),node1.removeEventListener("animationcancel",handleAnimationEnd),node1.removeEventListener("animationend",handleAnimationEnd)}}send("ANIMATION_END")}),[node1,send]),{isPresent:["mounted","unmountSuspended"].includes(state),ref:(0,react.useCallback)((node=>{node&&(stylesRef.current=getComputedStyle(node)),setNode(node)}),[])}}(present),child="function"==typeof children?children({present:presence.isPresent}):react.Children.only(children),ref=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref,child.ref);return"function"==typeof children||presence.isPresent?(0,react.cloneElement)(child,{ref}):null};function $921a889cee6df7e8$var$getAnimationName(styles){return styles?.animationName||"none"}function $c512c27ab02ef895$var$composeContextScopes(...scopes){let baseScope=scopes[0];if(1===scopes.length)return baseScope;let createScope1=()=>{let scopeHooks=scopes.map((createScope=>({useScope:createScope(),scopeName:createScope.scopeName})));return function(overrideScopes){let nextScopes1=scopeHooks.reduce(((nextScopes,{useScope,scopeName})=>({...nextScopes,...useScope(overrideScopes)[`__scope${scopeName}`]})),{});return(0,react.useMemo)((()=>({[`__scope${baseScope.scopeName}`]:nextScopes1})),[nextScopes1])}};return createScope1.scopeName=baseScope.scopeName,createScope1}function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback){let callbackRef=(0,react.useRef)(callback);return(0,react.useEffect)((()=>{callbackRef.current=callback})),(0,react.useMemo)((()=>(...args)=>{var _callbackRef$current;return null===(_callbackRef$current=callbackRef.current)||void 0===_callbackRef$current?void 0:_callbackRef$current.call(callbackRef,...args)}),[])}$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName="Presence";var $f631663db3294ace$var$DirectionContext=(0,react.createContext)(void 0);function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler,ourEventHandler,{checkForDefaultPrevented=!0}={}){return function(event){if(originalEventHandler?.(event),!1===checkForDefaultPrevented||!event.defaultPrevented)return ourEventHandler?.(event)}}var[$57acba87d6e25586$var$createScrollAreaContext,$57acba87d6e25586$export$488468afe3a6f2b1]=function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName,createContextScopeDeps=[]){let defaultContexts=[],createScope=()=>{let scopeContexts=defaultContexts.map((defaultContext=>(0,react.createContext)(defaultContext)));return function(scope){let contexts=scope?.[scopeName]||scopeContexts;return(0,react.useMemo)((()=>({[`__scope${scopeName}`]:{...scope,[scopeName]:contexts}})),[scope,contexts])}};return createScope.scopeName=scopeName,[function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName,defaultContext){let BaseContext=(0,react.createContext)(defaultContext),index=defaultContexts.length;function Provider(props){let{scope,children,...context}=props,Context=scope?.[scopeName][index]||BaseContext,value=(0,react.useMemo)((()=>context),Object.values(context));return(0,react.createElement)(Context.Provider,{value},children)}return defaultContexts=[...defaultContexts,defaultContext],Provider.displayName=rootComponentName+"Provider",[Provider,function useContext$1(consumerName,scope){let Context=scope?.[scopeName][index]||BaseContext,context=(0,react.useContext)(Context);if(context)return context;if(void 0!==defaultContext)return defaultContext;throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``)}]},$c512c27ab02ef895$var$composeContextScopes(createScope,...createContextScopeDeps)]}("ScrollArea"),[$57acba87d6e25586$var$ScrollAreaProvider,$57acba87d6e25586$var$useScrollAreaContext]=$57acba87d6e25586$var$createScrollAreaContext("ScrollArea"),$57acba87d6e25586$export$ccf8d8d7bbf3c2cc=(0,react.forwardRef)(((props,forwardedRef)=>{let{__scopeScrollArea,type="hover",dir,scrollHideDelay=600,...scrollAreaProps}=props,[scrollArea,setScrollArea]=(0,react.useState)(null),[viewport,setViewport]=(0,react.useState)(null),[content,setContent]=(0,react.useState)(null),[scrollbarX,setScrollbarX]=(0,react.useState)(null),[scrollbarY,setScrollbarY]=(0,react.useState)(null),[cornerWidth,setCornerWidth]=(0,react.useState)(0),[cornerHeight,setCornerHeight]=(0,react.useState)(0),[scrollbarXEnabled,setScrollbarXEnabled]=(0,react.useState)(!1),[scrollbarYEnabled,setScrollbarYEnabled]=(0,react.useState)(!1),composedRefs=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef,(node=>setScrollArea(node))),direction=function $f631663db3294ace$export$b39126d51d94e6f3(localDir){let globalDir=(0,react.useContext)($f631663db3294ace$var$DirectionContext);return localDir||globalDir||"ltr"}(dir);return(0,react.createElement)($57acba87d6e25586$var$ScrollAreaProvider,{scope:__scopeScrollArea,type,dir:direction,scrollHideDelay,scrollArea,viewport,onViewportChange:setViewport,content,onContentChange:setContent,scrollbarX,onScrollbarXChange:setScrollbarX,scrollbarXEnabled,onScrollbarXEnabledChange:setScrollbarXEnabled,scrollbarY,onScrollbarYChange:setScrollbarY,scrollbarYEnabled,onScrollbarYEnabledChange:setScrollbarYEnabled,onCornerWidthChange:setCornerWidth,onCornerHeightChange:setCornerHeight},(0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div,(0,chunk_FD4M6EBV.r)({dir:direction},scrollAreaProps,{ref:composedRefs,style:{position:"relative","--radix-scroll-area-corner-width":cornerWidth+"px","--radix-scroll-area-corner-height":cornerHeight+"px",...props.style}})))})),$57acba87d6e25586$export$a21cbf9f11fca853=(0,react.forwardRef)(((props,forwardedRef)=>{let{__scopeScrollArea,children,...viewportProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaViewport",__scopeScrollArea),composedRefs=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef,(0,react.useRef)(null),context.onViewportChange);return(0,react.createElement)(react.Fragment,null,(0,react.createElement)("style",{dangerouslySetInnerHTML:{__html:"[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}"}}),(0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div,(0,chunk_FD4M6EBV.r)({"data-radix-scroll-area-viewport":""},viewportProps,{ref:composedRefs,style:{overflowX:context.scrollbarXEnabled?"scroll":"hidden",overflowY:context.scrollbarYEnabled?"scroll":"hidden",...props.style}}),(0,react.createElement)("div",{ref:context.onContentChange,style:{minWidth:"100%",display:"table"}},children)))})),$57acba87d6e25586$export$2fabd85d0eba3c57=(0,react.forwardRef)(((props,forwardedRef)=>{let{forceMount,...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),{onScrollbarXEnabledChange,onScrollbarYEnabledChange}=context,isHorizontal="horizontal"===props.orientation;return(0,react.useEffect)((()=>(isHorizontal?onScrollbarXEnabledChange(!0):onScrollbarYEnabledChange(!0),()=>{isHorizontal?onScrollbarXEnabledChange(!1):onScrollbarYEnabledChange(!1)})),[isHorizontal,onScrollbarXEnabledChange,onScrollbarYEnabledChange]),"hover"===context.type?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarHover,(0,chunk_FD4M6EBV.r)({},scrollbarProps,{ref:forwardedRef,forceMount})):"scroll"===context.type?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarScroll,(0,chunk_FD4M6EBV.r)({},scrollbarProps,{ref:forwardedRef,forceMount})):"auto"===context.type?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarAuto,(0,chunk_FD4M6EBV.r)({},scrollbarProps,{ref:forwardedRef,forceMount})):"always"===context.type?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarVisible,(0,chunk_FD4M6EBV.r)({},scrollbarProps,{ref:forwardedRef})):null})),$57acba87d6e25586$var$ScrollAreaScrollbarHover=(0,react.forwardRef)(((props,forwardedRef)=>{let{forceMount,...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),[visible,setVisible]=(0,react.useState)(!1);return(0,react.useEffect)((()=>{let scrollArea=context.scrollArea,hideTimer=0;if(scrollArea){let handlePointerEnter=()=>{window.clearTimeout(hideTimer),setVisible(!0)},handlePointerLeave=()=>{hideTimer=window.setTimeout((()=>setVisible(!1)),context.scrollHideDelay)};return scrollArea.addEventListener("pointerenter",handlePointerEnter),scrollArea.addEventListener("pointerleave",handlePointerLeave),()=>{window.clearTimeout(hideTimer),scrollArea.removeEventListener("pointerenter",handlePointerEnter),scrollArea.removeEventListener("pointerleave",handlePointerLeave)}}}),[context.scrollArea,context.scrollHideDelay]),(0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b,{present:forceMount||visible},(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarAuto,(0,chunk_FD4M6EBV.r)({"data-state":visible?"visible":"hidden"},scrollbarProps,{ref:forwardedRef})))})),$57acba87d6e25586$var$ScrollAreaScrollbarScroll=(0,react.forwardRef)(((props,forwardedRef)=>{let{forceMount,...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),isHorizontal="horizontal"===props.orientation,debounceScrollEnd=$57acba87d6e25586$var$useDebounceCallback((()=>send("SCROLL_END")),100),[state,send]=function $6c2e24571c90391f$export$3e6543de14f8614f(initialState,machine){return(0,react.useReducer)(((state,event)=>machine[state][event]??state),initialState)}("hidden",{hidden:{SCROLL:"scrolling"},scrolling:{SCROLL_END:"idle",POINTER_ENTER:"interacting"},interacting:{SCROLL:"interacting",POINTER_LEAVE:"idle"},idle:{HIDE:"hidden",SCROLL:"scrolling",POINTER_ENTER:"interacting"}});return(0,react.useEffect)((()=>{if("idle"===state){let hideTimer=window.setTimeout((()=>send("HIDE")),context.scrollHideDelay);return()=>window.clearTimeout(hideTimer)}}),[state,context.scrollHideDelay,send]),(0,react.useEffect)((()=>{let viewport=context.viewport,scrollDirection=isHorizontal?"scrollLeft":"scrollTop";if(viewport){let prevScrollPos=viewport[scrollDirection],handleScroll=()=>{let scrollPos=viewport[scrollDirection];prevScrollPos!==scrollPos&&(send("SCROLL"),debounceScrollEnd()),prevScrollPos=scrollPos};return viewport.addEventListener("scroll",handleScroll),()=>viewport.removeEventListener("scroll",handleScroll)}}),[context.viewport,isHorizontal,send,debounceScrollEnd]),(0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b,{present:forceMount||"hidden"!==state},(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarVisible,(0,chunk_FD4M6EBV.r)({"data-state":"hidden"===state?"hidden":"visible"},scrollbarProps,{ref:forwardedRef,onPointerEnter:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerEnter,(()=>send("POINTER_ENTER"))),onPointerLeave:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave,(()=>send("POINTER_LEAVE")))})))})),$57acba87d6e25586$var$ScrollAreaScrollbarAuto=(0,react.forwardRef)(((props,forwardedRef)=>{let context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),{forceMount,...scrollbarProps}=props,[visible,setVisible]=(0,react.useState)(!1),isHorizontal="horizontal"===props.orientation,handleResize=$57acba87d6e25586$var$useDebounceCallback((()=>{if(context.viewport){let isOverflowX=context.viewport.offsetWidth<context.viewport.scrollWidth,isOverflowY=context.viewport.offsetHeight<context.viewport.scrollHeight;setVisible(isHorizontal?isOverflowX:isOverflowY)}}),10);return $57acba87d6e25586$var$useResizeObserver(context.viewport,handleResize),$57acba87d6e25586$var$useResizeObserver(context.content,handleResize),(0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b,{present:forceMount||visible},(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarVisible,(0,chunk_FD4M6EBV.r)({"data-state":visible?"visible":"hidden"},scrollbarProps,{ref:forwardedRef})))})),$57acba87d6e25586$var$ScrollAreaScrollbarVisible=(0,react.forwardRef)(((props,forwardedRef)=>{let{orientation="vertical",...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),thumbRef=(0,react.useRef)(null),pointerOffsetRef=(0,react.useRef)(0),[sizes,setSizes]=(0,react.useState)({content:0,viewport:0,scrollbar:{size:0,paddingStart:0,paddingEnd:0}}),thumbRatio=$57acba87d6e25586$var$getThumbRatio(sizes.viewport,sizes.content),commonProps={...scrollbarProps,sizes,onSizesChange:setSizes,hasThumb:thumbRatio>0&&thumbRatio<1,onThumbChange:thumb=>thumbRef.current=thumb,onThumbPointerUp:()=>pointerOffsetRef.current=0,onThumbPointerDown:pointerPos=>pointerOffsetRef.current=pointerPos};function getScrollPosition(pointerPos,dir){return function $57acba87d6e25586$var$getScrollPositionFromPointer(pointerPos,pointerOffset,sizes,dir="ltr"){let thumbSizePx=$57acba87d6e25586$var$getThumbSize(sizes),thumbCenter=thumbSizePx/2,offset=pointerOffset||thumbCenter,thumbOffsetFromEnd=thumbSizePx-offset,minPointerPos=sizes.scrollbar.paddingStart+offset,maxPointerPos=sizes.scrollbar.size-sizes.scrollbar.paddingEnd-thumbOffsetFromEnd,maxScrollPos=sizes.content-sizes.viewport,scrollRange="ltr"===dir?[0,maxScrollPos]:[-1*maxScrollPos,0];return $57acba87d6e25586$var$linearScale([minPointerPos,maxPointerPos],scrollRange)(pointerPos)}(pointerPos,pointerOffsetRef.current,sizes,dir)}return"horizontal"===orientation?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarX,(0,chunk_FD4M6EBV.r)({},commonProps,{ref:forwardedRef,onThumbPositionChange:()=>{if(context.viewport&&thumbRef.current){let offset=$57acba87d6e25586$var$getThumbOffsetFromScroll(context.viewport.scrollLeft,sizes,context.dir);thumbRef.current.style.transform=`translate3d(${offset}px, 0, 0)`}},onWheelScroll:scrollPos=>{context.viewport&&(context.viewport.scrollLeft=scrollPos)},onDragScroll:pointerPos=>{context.viewport&&(context.viewport.scrollLeft=getScrollPosition(pointerPos,context.dir))}})):"vertical"===orientation?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarY,(0,chunk_FD4M6EBV.r)({},commonProps,{ref:forwardedRef,onThumbPositionChange:()=>{if(context.viewport&&thumbRef.current){let offset=$57acba87d6e25586$var$getThumbOffsetFromScroll(context.viewport.scrollTop,sizes);thumbRef.current.style.transform=`translate3d(0, ${offset}px, 0)`}},onWheelScroll:scrollPos=>{context.viewport&&(context.viewport.scrollTop=scrollPos)},onDragScroll:pointerPos=>{context.viewport&&(context.viewport.scrollTop=getScrollPosition(pointerPos))}})):null})),$57acba87d6e25586$var$ScrollAreaScrollbarX=(0,react.forwardRef)(((props,forwardedRef)=>{let{sizes,onSizesChange,...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),[computedStyle,setComputedStyle]=(0,react.useState)(),ref=(0,react.useRef)(null),composeRefs=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef,ref,context.onScrollbarXChange);return(0,react.useEffect)((()=>{ref.current&&setComputedStyle(getComputedStyle(ref.current))}),[ref]),(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarImpl,(0,chunk_FD4M6EBV.r)({"data-orientation":"horizontal"},scrollbarProps,{ref:composeRefs,sizes,style:{bottom:0,left:"rtl"===context.dir?"var(--radix-scroll-area-corner-width)":0,right:"ltr"===context.dir?"var(--radix-scroll-area-corner-width)":0,"--radix-scroll-area-thumb-width":$57acba87d6e25586$var$getThumbSize(sizes)+"px",...props.style},onThumbPointerDown:pointerPos=>props.onThumbPointerDown(pointerPos.x),onDragScroll:pointerPos=>props.onDragScroll(pointerPos.x),onWheelScroll:(event,maxScrollPos)=>{if(context.viewport){let scrollPos=context.viewport.scrollLeft+event.deltaX;props.onWheelScroll(scrollPos),$57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos,maxScrollPos)&&event.preventDefault()}},onResize:()=>{ref.current&&context.viewport&&computedStyle&&onSizesChange({content:context.viewport.scrollWidth,viewport:context.viewport.offsetWidth,scrollbar:{size:ref.current.clientWidth,paddingStart:$57acba87d6e25586$var$toInt(computedStyle.paddingLeft),paddingEnd:$57acba87d6e25586$var$toInt(computedStyle.paddingRight)}})}}))})),$57acba87d6e25586$var$ScrollAreaScrollbarY=(0,react.forwardRef)(((props,forwardedRef)=>{let{sizes,onSizesChange,...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",props.__scopeScrollArea),[computedStyle,setComputedStyle]=(0,react.useState)(),ref=(0,react.useRef)(null),composeRefs=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef,ref,context.onScrollbarYChange);return(0,react.useEffect)((()=>{ref.current&&setComputedStyle(getComputedStyle(ref.current))}),[ref]),(0,react.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarImpl,(0,chunk_FD4M6EBV.r)({"data-orientation":"vertical"},scrollbarProps,{ref:composeRefs,sizes,style:{top:0,right:"ltr"===context.dir?0:void 0,left:"rtl"===context.dir?0:void 0,bottom:"var(--radix-scroll-area-corner-height)","--radix-scroll-area-thumb-height":$57acba87d6e25586$var$getThumbSize(sizes)+"px",...props.style},onThumbPointerDown:pointerPos=>props.onThumbPointerDown(pointerPos.y),onDragScroll:pointerPos=>props.onDragScroll(pointerPos.y),onWheelScroll:(event,maxScrollPos)=>{if(context.viewport){let scrollPos=context.viewport.scrollTop+event.deltaY;props.onWheelScroll(scrollPos),$57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos,maxScrollPos)&&event.preventDefault()}},onResize:()=>{ref.current&&context.viewport&&computedStyle&&onSizesChange({content:context.viewport.scrollHeight,viewport:context.viewport.offsetHeight,scrollbar:{size:ref.current.clientHeight,paddingStart:$57acba87d6e25586$var$toInt(computedStyle.paddingTop),paddingEnd:$57acba87d6e25586$var$toInt(computedStyle.paddingBottom)}})}}))})),[$57acba87d6e25586$var$ScrollbarProvider,$57acba87d6e25586$var$useScrollbarContext]=$57acba87d6e25586$var$createScrollAreaContext("ScrollAreaScrollbar"),$57acba87d6e25586$var$ScrollAreaScrollbarImpl=(0,react.forwardRef)(((props,forwardedRef)=>{let{__scopeScrollArea,sizes,hasThumb,onThumbChange,onThumbPointerUp,onThumbPointerDown,onThumbPositionChange,onDragScroll,onWheelScroll,onResize,...scrollbarProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaScrollbar",__scopeScrollArea),[scrollbar,setScrollbar]=(0,react.useState)(null),composeRefs=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef,(node=>setScrollbar(node))),rectRef=(0,react.useRef)(null),prevWebkitUserSelectRef=(0,react.useRef)(""),viewport=context.viewport,maxScrollPos=sizes.content-sizes.viewport,handleWheelScroll=$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onWheelScroll),handleThumbPositionChange=$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbPositionChange),handleResize=$57acba87d6e25586$var$useDebounceCallback(onResize,10);function handleDragScroll(event){if(rectRef.current){let x=event.clientX-rectRef.current.left,y=event.clientY-rectRef.current.top;onDragScroll({x,y})}}return(0,react.useEffect)((()=>{let handleWheel=event=>{let element=event.target;scrollbar?.contains(element)&&handleWheelScroll(event,maxScrollPos)};return document.addEventListener("wheel",handleWheel,{passive:!1}),()=>document.removeEventListener("wheel",handleWheel,{passive:!1})}),[viewport,scrollbar,maxScrollPos,handleWheelScroll]),(0,react.useEffect)(handleThumbPositionChange,[sizes,handleThumbPositionChange]),$57acba87d6e25586$var$useResizeObserver(scrollbar,handleResize),$57acba87d6e25586$var$useResizeObserver(context.content,handleResize),(0,react.createElement)($57acba87d6e25586$var$ScrollbarProvider,{scope:__scopeScrollArea,scrollbar,hasThumb,onThumbChange:$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbChange),onThumbPointerUp:$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbPointerUp),onThumbPositionChange:handleThumbPositionChange,onThumbPointerDown:$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbPointerDown)},(0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div,(0,chunk_FD4M6EBV.r)({},scrollbarProps,{ref:composeRefs,style:{position:"absolute",...scrollbarProps.style},onPointerDown:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown,(event=>{0===event.button&&(event.target.setPointerCapture(event.pointerId),rectRef.current=scrollbar.getBoundingClientRect(),prevWebkitUserSelectRef.current=document.body.style.webkitUserSelect,document.body.style.webkitUserSelect="none",context.viewport&&(context.viewport.style.scrollBehavior="auto"),handleDragScroll(event))})),onPointerMove:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove,handleDragScroll),onPointerUp:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp,(event=>{let element=event.target;element.hasPointerCapture(event.pointerId)&&element.releasePointerCapture(event.pointerId),document.body.style.webkitUserSelect=prevWebkitUserSelectRef.current,context.viewport&&(context.viewport.style.scrollBehavior=""),rectRef.current=null}))})))})),$57acba87d6e25586$export$9fba1154677d7cd2=(0,react.forwardRef)(((props,forwardedRef)=>{let{forceMount,...thumbProps}=props,scrollbarContext=$57acba87d6e25586$var$useScrollbarContext("ScrollAreaThumb",props.__scopeScrollArea);return(0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b,{present:forceMount||scrollbarContext.hasThumb},(0,react.createElement)($57acba87d6e25586$var$ScrollAreaThumbImpl,(0,chunk_FD4M6EBV.r)({ref:forwardedRef},thumbProps)))})),$57acba87d6e25586$var$ScrollAreaThumbImpl=(0,react.forwardRef)(((props,forwardedRef)=>{let{__scopeScrollArea,style,...thumbProps}=props,scrollAreaContext=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaThumb",__scopeScrollArea),scrollbarContext=$57acba87d6e25586$var$useScrollbarContext("ScrollAreaThumb",__scopeScrollArea),{onThumbPositionChange}=scrollbarContext,composedRef=$6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef,(node=>scrollbarContext.onThumbChange(node))),removeUnlinkedScrollListenerRef=(0,react.useRef)(),debounceScrollEnd=$57acba87d6e25586$var$useDebounceCallback((()=>{removeUnlinkedScrollListenerRef.current&&(removeUnlinkedScrollListenerRef.current(),removeUnlinkedScrollListenerRef.current=void 0)}),100);return(0,react.useEffect)((()=>{let viewport=scrollAreaContext.viewport;if(viewport){let handleScroll=()=>{if(debounceScrollEnd(),!removeUnlinkedScrollListenerRef.current){let listener=$57acba87d6e25586$var$addUnlinkedScrollListener(viewport,onThumbPositionChange);removeUnlinkedScrollListenerRef.current=listener,onThumbPositionChange()}};return onThumbPositionChange(),viewport.addEventListener("scroll",handleScroll),()=>viewport.removeEventListener("scroll",handleScroll)}}),[scrollAreaContext.viewport,debounceScrollEnd,onThumbPositionChange]),(0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div,(0,chunk_FD4M6EBV.r)({"data-state":scrollbarContext.hasThumb?"visible":"hidden"},thumbProps,{ref:composedRef,style:{width:"var(--radix-scroll-area-thumb-width)",height:"var(--radix-scroll-area-thumb-height)",...style},onPointerDownCapture:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture,(event=>{let thumbRect=event.target.getBoundingClientRect(),x=event.clientX-thumbRect.left,y=event.clientY-thumbRect.top;scrollbarContext.onThumbPointerDown({x,y})})),onPointerUp:$e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp,scrollbarContext.onThumbPointerUp)}))})),$57acba87d6e25586$export$56969d565df7cc4b=(0,react.forwardRef)(((props,forwardedRef)=>{let context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaCorner",props.__scopeScrollArea),hasBothScrollbarsVisible=!(!context.scrollbarX||!context.scrollbarY);return"scroll"!==context.type&&hasBothScrollbarsVisible?(0,react.createElement)($57acba87d6e25586$var$ScrollAreaCornerImpl,(0,chunk_FD4M6EBV.r)({},props,{ref:forwardedRef})):null})),$57acba87d6e25586$var$ScrollAreaCornerImpl=(0,react.forwardRef)(((props,forwardedRef)=>{let{__scopeScrollArea,...cornerProps}=props,context=$57acba87d6e25586$var$useScrollAreaContext("ScrollAreaCorner",__scopeScrollArea),[width1,setWidth]=(0,react.useState)(0),[height1,setHeight]=(0,react.useState)(0),hasSize=!(!width1||!height1);return $57acba87d6e25586$var$useResizeObserver(context.scrollbarX,(()=>{var _context$scrollbarX;let height=(null===(_context$scrollbarX=context.scrollbarX)||void 0===_context$scrollbarX?void 0:_context$scrollbarX.offsetHeight)||0;context.onCornerHeightChange(height),setHeight(height)})),$57acba87d6e25586$var$useResizeObserver(context.scrollbarY,(()=>{var _context$scrollbarY;let width=(null===(_context$scrollbarY=context.scrollbarY)||void 0===_context$scrollbarY?void 0:_context$scrollbarY.offsetWidth)||0;context.onCornerWidthChange(width),setWidth(width)})),hasSize?(0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div,(0,chunk_FD4M6EBV.r)({},cornerProps,{ref:forwardedRef,style:{width:width1,height:height1,position:"absolute",right:"ltr"===context.dir?0:void 0,left:"rtl"===context.dir?0:void 0,bottom:0,...props.style}})):null}));function $57acba87d6e25586$var$toInt(value){return value?parseInt(value,10):0}function $57acba87d6e25586$var$getThumbRatio(viewportSize,contentSize){let ratio=viewportSize/contentSize;return isNaN(ratio)?0:ratio}function $57acba87d6e25586$var$getThumbSize(sizes){let ratio=$57acba87d6e25586$var$getThumbRatio(sizes.viewport,sizes.content),scrollbarPadding=sizes.scrollbar.paddingStart+sizes.scrollbar.paddingEnd,thumbSize=(sizes.scrollbar.size-scrollbarPadding)*ratio;return Math.max(thumbSize,18)}function $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos,sizes,dir="ltr"){let thumbSizePx=$57acba87d6e25586$var$getThumbSize(sizes),scrollbarPadding=sizes.scrollbar.paddingStart+sizes.scrollbar.paddingEnd,scrollbar=sizes.scrollbar.size-scrollbarPadding,maxScrollPos=sizes.content-sizes.viewport,maxThumbPos=scrollbar-thumbSizePx,scrollWithoutMomentum=function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value,[min,max]){return Math.min(max,Math.max(min,value))}(scrollPos,"ltr"===dir?[0,maxScrollPos]:[-1*maxScrollPos,0]);return $57acba87d6e25586$var$linearScale([0,maxScrollPos],[0,maxThumbPos])(scrollWithoutMomentum)}function $57acba87d6e25586$var$linearScale(input,output){return value=>{if(input[0]===input[1]||output[0]===output[1])return output[0];let ratio=(output[1]-output[0])/(input[1]-input[0]);return output[0]+ratio*(value-input[0])}}function $57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos,maxScrollPos){return scrollPos>0&&scrollPos<maxScrollPos}var $57acba87d6e25586$var$addUnlinkedScrollListener=(node,handler=(()=>{}))=>{let prevPosition={left:node.scrollLeft,top:node.scrollTop},rAF=0;return function loop(){let position={left:node.scrollLeft,top:node.scrollTop},isHorizontalScroll=prevPosition.left!==position.left,isVerticalScroll=prevPosition.top!==position.top;(isHorizontalScroll||isVerticalScroll)&&handler(),prevPosition=position,rAF=window.requestAnimationFrame(loop)}(),()=>window.cancelAnimationFrame(rAF)};function $57acba87d6e25586$var$useDebounceCallback(callback,delay){let handleCallback=$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback),debounceTimerRef=(0,react.useRef)(0);return(0,react.useEffect)((()=>()=>window.clearTimeout(debounceTimerRef.current)),[]),(0,react.useCallback)((()=>{window.clearTimeout(debounceTimerRef.current),debounceTimerRef.current=window.setTimeout(handleCallback,delay)}),[handleCallback,delay])}function $57acba87d6e25586$var$useResizeObserver(element,onResize){let handleResize=$b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onResize);$9f79659886946c16$export$e5c5a5f917a5871c((()=>{let rAF=0;if(element){let resizeObserver=new ResizeObserver((()=>{cancelAnimationFrame(rAF),rAF=window.requestAnimationFrame(handleResize)}));return resizeObserver.observe(element),()=>{window.cancelAnimationFrame(rAF),resizeObserver.unobserve(element)}}}),[element,handleResize])}var $57acba87d6e25586$export$be92b6f5f03c0fe9=$57acba87d6e25586$export$ccf8d8d7bbf3c2cc,$57acba87d6e25586$export$d5c6c08dc2d3ca7=$57acba87d6e25586$export$a21cbf9f11fca853,$57acba87d6e25586$export$9a4e88b92edfce6b=$57acba87d6e25586$export$2fabd85d0eba3c57,$57acba87d6e25586$export$6521433ed15a34db=$57acba87d6e25586$export$9fba1154677d7cd2,$57acba87d6e25586$export$ac61190d9fc311a9=$57acba87d6e25586$export$56969d565df7cc4b,ScrollAreaRoot=(0,theming_dist.I4)($57acba87d6e25586$export$be92b6f5f03c0fe9)((({scrollbarsize,offset})=>({width:"100%",height:"100%",overflow:"hidden","--scrollbar-size":`${scrollbarsize+offset}px`,"--radix-scroll-area-thumb-width":`${scrollbarsize}px`}))),ScrollAreaViewport=(0,theming_dist.I4)($57acba87d6e25586$export$d5c6c08dc2d3ca7)({width:"100%",height:"100%"}),ScrollAreaScrollbar=(0,theming_dist.I4)($57acba87d6e25586$export$9a4e88b92edfce6b)((({offset,horizontal,vertical})=>({display:"flex",userSelect:"none",touchAction:"none",background:"transparent",transition:"all 0.2s ease-out",borderRadius:"var(--scrollbar-size)",'&[data-orientation="vertical"]':{width:"var(--scrollbar-size)",paddingRight:offset,marginTop:offset,marginBottom:"true"===horizontal&&"true"===vertical?0:offset},'&[data-orientation="horizontal"]':{flexDirection:"column",height:"var(--scrollbar-size)",paddingBottom:offset,marginLeft:offset,marginRight:"true"===horizontal&&"true"===vertical?0:offset}}))),ScrollAreaThumb=(0,theming_dist.I4)($57acba87d6e25586$export$6521433ed15a34db)((({theme})=>({flex:1,background:theme.textMutedColor,opacity:.5,borderRadius:"var(--scrollbar-size)",position:"relative",transition:"opacity 0.2s ease-out","&:hover":{opacity:.8},"::before":{content:'""',position:"absolute",top:"50%",left:"50%",transform:"translate(-50%,-50%)",width:"100%",height:"100%"}}))),ScrollArea=({children,horizontal=!1,vertical=!1,offset=2,scrollbarSize=6,className})=>react.createElement(ScrollAreaRoot,{scrollbarsize:scrollbarSize,offset,className},react.createElement(ScrollAreaViewport,null,children),horizontal&&react.createElement(ScrollAreaScrollbar,{orientation:"horizontal",offset,horizontal:horizontal.toString(),vertical:vertical.toString()},react.createElement(ScrollAreaThumb,null)),vertical&&react.createElement(ScrollAreaScrollbar,{orientation:"vertical",offset,horizontal:horizontal.toString(),vertical:vertical.toString()},react.createElement(ScrollAreaThumb,null)),horizontal&&vertical&&react.createElement($57acba87d6e25586$export$ac61190d9fc311a9,null)),{navigator:chunk_D3EWQ7UP_navigator,document:document2,window:globalWindow}=global_dist.global,supportedLanguages={jsextra:js_extras_default,jsx:jsx_default,json:json_default,yml:yaml_default,md:markdown_default,bash:bash_default,css:css_default,html:markup_default,tsx:tsx_default,typescript:typescript_default,graphql:graphql_default};Object.entries(supportedLanguages).forEach((([key,val])=>{prism_light_default.registerLanguage(key,val)}));var themedSyntax=memoizerific(2)((theme=>Object.entries(theme.code||{}).reduce(((acc,[key,val])=>({...acc,[`* .${key}`]:val})),{}))),copyToClipboard=createCopyToClipboardFunction();function createCopyToClipboardFunction(){return chunk_D3EWQ7UP_navigator?.clipboard?text=>chunk_D3EWQ7UP_navigator.clipboard.writeText(text):async text=>{let tmp=document2.createElement("TEXTAREA"),focus=document2.activeElement;tmp.value=text,document2.body.appendChild(tmp),tmp.select(),document2.execCommand("copy"),document2.body.removeChild(tmp),focus.focus()}}var Wrapper=theming_dist.I4.div((({theme})=>({position:"relative",overflow:"hidden",color:theme.color.defaultText})),(({theme,bordered})=>bordered?{border:`1px solid ${theme.appBorderColor}`,borderRadius:theme.borderRadius,background:theme.background.content}:{}),(({showLineNumbers})=>showLineNumbers?{".react-syntax-highlighter-line-number::before":{content:"attr(data-line-number)"}}:{})),Scroller=(0,theming_dist.I4)((({children,className})=>react.createElement(ScrollArea,{horizontal:!0,vertical:!0,className},children)))({position:"relative"},(({theme})=>themedSyntax(theme))),Pre=theming_dist.I4.pre((({theme,padded})=>({display:"flex",justifyContent:"flex-start",margin:0,padding:padded?theme.layoutMargin:0}))),Code=theming_dist.I4.div((({theme})=>({flex:1,paddingLeft:2,paddingRight:theme.layoutMargin,opacity:1,fontFamily:theme.typography.fonts.mono}))),processLineNumber=row=>{let children=[...row.children],lineNumberNode=children[0],lineNumber=lineNumberNode.children[0].value,processedLineNumberNode={...lineNumberNode,children:[],properties:{...lineNumberNode.properties,"data-line-number":lineNumber,style:{...lineNumberNode.properties.style,userSelect:"auto"}}};return children[0]=processedLineNumberNode,{...row,children}},defaultRenderer2=({rows,stylesheet,useInlineStyles})=>rows.map(((node,i)=>createElement({node:processLineNumber(node),stylesheet,useInlineStyles,key:`code-segement${i}`}))),SyntaxHighlighter2=({children,language="jsx",copyable=!1,bordered=!1,padded=!1,format=!0,formatter=null,className=null,showLineNumbers=!1,...rest})=>{if("string"!=typeof children||!children.trim())return null;let[highlightableCode,setHighlightableCode]=(0,react.useState)("");(0,react.useEffect)((()=>{formatter?formatter(format,children).then(setHighlightableCode):setHighlightableCode(children.trim())}),[children,format,formatter]);let[copied,setCopied]=(0,react.useState)(!1),onClick=(0,react.useCallback)((e=>{e.preventDefault(),copyToClipboard(highlightableCode).then((()=>{setCopied(!0),globalWindow.setTimeout((()=>setCopied(!1)),1500)})).catch(dist.vF.error)}),[highlightableCode]),renderer=((renderer,showLineNumbers)=>showLineNumbers?renderer?({rows,...rest})=>renderer({rows:rows.map((row=>processLineNumber(row))),...rest}):defaultRenderer2:renderer)(rest.renderer,showLineNumbers);return react.createElement(Wrapper,{bordered,padded,showLineNumbers,className},react.createElement(Scroller,null,react.createElement(prism_light_default,{padded:padded||bordered,language,showLineNumbers,showInlineLineNumbers:showLineNumbers,useInlineStyles:!1,PreTag:Pre,CodeTag:Code,lineNumberContainerStyle:{},...rest,renderer},highlightableCode)),copyable?react.createElement(ActionBar,{actionItems:[{title:copied?"Copied":"Copy",onClick}]}):null)};SyntaxHighlighter2.registerLanguage=(...args)=>prism_light_default.registerLanguage(...args);var syntaxhighlighter_default=SyntaxHighlighter2},"./node_modules/@storybook/components/dist/chunk-FD4M6EBV.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],!(excluded.indexOf(key)>=0)&&(target[key]=source[key]);return target}__webpack_require__.d(__webpack_exports__,{i:()=>_objectWithoutPropertiesLoose,r:()=>_extends})},"./node_modules/@storybook/components/dist/chunk-SCHQIR5W.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{P:()=>__commonJS,f:()=>__toESM});var __create=Object.create,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__commonJS=(cb,mod)=>function(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports},__toESM=(mod,isNodeMode,target)=>(target=null!=mod?__create(__getProtoOf(mod)):{},((to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to})(!isNodeMode&&mod&&mod.__esModule?target:__defProp(target,"default",{value:mod,enumerable:!0}),mod))},"./node_modules/@storybook/components/dist/chunk-T3L4SIIA.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{o:()=>WithTooltipPure,v:()=>WithToolTipState});var _chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/components/dist/chunk-FD4M6EBV.mjs"),_chunk_SCHQIR5W_mjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/components/dist/chunk-SCHQIR5W.mjs"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_dom__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-dom/index.js"),_storybook_theming__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@storybook/theming/dist/index.mjs"),_storybook_theming__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@storybook/theming/dist/chunk-FX52EUNG.mjs"),_storybook_global__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),memoizerific__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/memoizerific/memoizerific.js"),require_react_fast_compare=(0,_chunk_SCHQIR5W_mjs__WEBPACK_IMPORTED_MODULE_3__.P)({"../../node_modules/react-fast-compare/index.js"(exports,module){var hasElementType=typeof Element<"u",hasMap="function"==typeof Map,hasSet="function"==typeof Set,hasArrayBuffer="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function equal(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){if(a.constructor!==b.constructor)return!1;var length,i,keys,it;if(Array.isArray(a)){if((length=a.length)!=b.length)return!1;for(i=length;0!=i--;)if(!equal(a[i],b[i]))return!1;return!0}if(hasMap&&a instanceof Map&&b instanceof Map){if(a.size!==b.size)return!1;for(it=a.entries();!(i=it.next()).done;)if(!b.has(i.value[0]))return!1;for(it=a.entries();!(i=it.next()).done;)if(!equal(i.value[1],b.get(i.value[0])))return!1;return!0}if(hasSet&&a instanceof Set&&b instanceof Set){if(a.size!==b.size)return!1;for(it=a.entries();!(i=it.next()).done;)if(!b.has(i.value[0]))return!1;return!0}if(hasArrayBuffer&&ArrayBuffer.isView(a)&&ArrayBuffer.isView(b)){if((length=a.length)!=b.length)return!1;for(i=length;0!=i--;)if(a[i]!==b[i])return!1;return!0}if(a.constructor===RegExp)return a.source===b.source&&a.flags===b.flags;if(a.valueOf!==Object.prototype.valueOf&&"function"==typeof a.valueOf&&"function"==typeof b.valueOf)return a.valueOf()===b.valueOf();if(a.toString!==Object.prototype.toString&&"function"==typeof a.toString&&"function"==typeof b.toString)return a.toString()===b.toString();if((length=(keys=Object.keys(a)).length)!==Object.keys(b).length)return!1;for(i=length;0!=i--;)if(!Object.prototype.hasOwnProperty.call(b,keys[i]))return!1;if(hasElementType&&a instanceof Element)return!1;for(i=length;0!=i--;)if(("_owner"!==keys[i]&&"__v"!==keys[i]&&"__o"!==keys[i]||!a.$$typeof)&&!equal(a[keys[i]],b[keys[i]]))return!1;return!0}return a!=a&&b!=b}module.exports=function(a,b){try{return equal(a,b)}catch(error){if((error.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw error}}}}),fromEntries=function(entries){return entries.reduce((function(acc,_ref){var key=_ref[0],value=_ref[1];return acc[key]=value,acc}),{})},useIsomorphicLayoutEffect=typeof window<"u"&&window.document&&window.document.createElement?react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect:react__WEBPACK_IMPORTED_MODULE_0__.useEffect,top="top",bottom="bottom",right="right",left="left",auto="auto",basePlacements=[top,bottom,right,left],start="start",end="end",clippingParents="clippingParents",viewport="viewport",popper="popper",reference="reference",variationPlacements=basePlacements.reduce((function(acc,placement){return acc.concat([placement+"-"+start,placement+"-"+end])}),[]),placements=[].concat(basePlacements,[auto]).reduce((function(acc,placement){return acc.concat([placement,placement+"-"+start,placement+"-"+end])}),[]),modifierPhases=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function getNodeName(element){return element?(element.nodeName||"").toLowerCase():null}function getWindow(node){if(null==node)return window;if("[object Window]"!==node.toString()){var ownerDocument=node.ownerDocument;return ownerDocument&&ownerDocument.defaultView||window}return node}function isElement(node){return node instanceof getWindow(node).Element||node instanceof Element}function isHTMLElement(node){return node instanceof getWindow(node).HTMLElement||node instanceof HTMLElement}function isShadowRoot(node){return!(typeof ShadowRoot>"u")&&(node instanceof getWindow(node).ShadowRoot||node instanceof ShadowRoot)}var applyStyles_default={name:"applyStyles",enabled:!0,phase:"write",fn:function applyStyles(_ref){var state=_ref.state;Object.keys(state.elements).forEach((function(name){var style=state.styles[name]||{},attributes=state.attributes[name]||{},element=state.elements[name];!isHTMLElement(element)||!getNodeName(element)||(Object.assign(element.style,style),Object.keys(attributes).forEach((function(name2){var value=attributes[name2];!1===value?element.removeAttribute(name2):element.setAttribute(name2,!0===value?"":value)})))}))},effect:function effect(_ref2){var state=_ref2.state,initialStyles={popper:{position:state.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(state.elements.popper.style,initialStyles.popper),state.styles=initialStyles,state.elements.arrow&&Object.assign(state.elements.arrow.style,initialStyles.arrow),function(){Object.keys(state.elements).forEach((function(name){var element=state.elements[name],attributes=state.attributes[name]||{},style=Object.keys(state.styles.hasOwnProperty(name)?state.styles[name]:initialStyles[name]).reduce((function(style2,property){return style2[property]="",style2}),{});!isHTMLElement(element)||!getNodeName(element)||(Object.assign(element.style,style),Object.keys(attributes).forEach((function(attribute){element.removeAttribute(attribute)})))}))}},requires:["computeStyles"]};function getBasePlacement(placement){return placement.split("-")[0]}var max=Math.max,min=Math.min,round=Math.round;function getUAString(){var uaData=navigator.userAgentData;return null!=uaData&&uaData.brands&&Array.isArray(uaData.brands)?uaData.brands.map((function(item){return item.brand+"/"+item.version})).join(" "):navigator.userAgent}function isLayoutViewport(){return!/^((?!chrome|android).)*safari/i.test(getUAString())}function getBoundingClientRect(element,includeScale,isFixedStrategy){void 0===includeScale&&(includeScale=!1),void 0===isFixedStrategy&&(isFixedStrategy=!1);var clientRect=element.getBoundingClientRect(),scaleX=1,scaleY=1;includeScale&&isHTMLElement(element)&&(scaleX=element.offsetWidth>0&&round(clientRect.width)/element.offsetWidth||1,scaleY=element.offsetHeight>0&&round(clientRect.height)/element.offsetHeight||1);var visualViewport=(isElement(element)?getWindow(element):window).visualViewport,addVisualOffsets=!isLayoutViewport()&&isFixedStrategy,x=(clientRect.left+(addVisualOffsets&&visualViewport?visualViewport.offsetLeft:0))/scaleX,y=(clientRect.top+(addVisualOffsets&&visualViewport?visualViewport.offsetTop:0))/scaleY,width=clientRect.width/scaleX,height=clientRect.height/scaleY;return{width,height,top:y,right:x+width,bottom:y+height,left:x,x,y}}function getLayoutRect(element){var clientRect=getBoundingClientRect(element),width=element.offsetWidth,height=element.offsetHeight;return Math.abs(clientRect.width-width)<=1&&(width=clientRect.width),Math.abs(clientRect.height-height)<=1&&(height=clientRect.height),{x:element.offsetLeft,y:element.offsetTop,width,height}}function contains(parent,child){var rootNode=child.getRootNode&&child.getRootNode();if(parent.contains(child))return!0;if(rootNode&&isShadowRoot(rootNode)){var next=child;do{if(next&&parent.isSameNode(next))return!0;next=next.parentNode||next.host}while(next)}return!1}function getComputedStyle(element){return getWindow(element).getComputedStyle(element)}function isTableElement(element){return["table","td","th"].indexOf(getNodeName(element))>=0}function getDocumentElement(element){return((isElement(element)?element.ownerDocument:element.document)||window.document).documentElement}function getParentNode(element){return"html"===getNodeName(element)?element:element.assignedSlot||element.parentNode||(isShadowRoot(element)?element.host:null)||getDocumentElement(element)}function getTrueOffsetParent(element){return isHTMLElement(element)&&"fixed"!==getComputedStyle(element).position?element.offsetParent:null}function getOffsetParent(element){for(var window2=getWindow(element),offsetParent=getTrueOffsetParent(element);offsetParent&&isTableElement(offsetParent)&&"static"===getComputedStyle(offsetParent).position;)offsetParent=getTrueOffsetParent(offsetParent);return offsetParent&&("html"===getNodeName(offsetParent)||"body"===getNodeName(offsetParent)&&"static"===getComputedStyle(offsetParent).position)?window2:offsetParent||function getContainingBlock(element){var isFirefox=/firefox/i.test(getUAString());if(/Trident/i.test(getUAString())&&isHTMLElement(element)&&"fixed"===getComputedStyle(element).position)return null;var currentNode=getParentNode(element);for(isShadowRoot(currentNode)&&(currentNode=currentNode.host);isHTMLElement(currentNode)&&["html","body"].indexOf(getNodeName(currentNode))<0;){var css=getComputedStyle(currentNode);if("none"!==css.transform||"none"!==css.perspective||"paint"===css.contain||-1!==["transform","perspective"].indexOf(css.willChange)||isFirefox&&"filter"===css.willChange||isFirefox&&css.filter&&"none"!==css.filter)return currentNode;currentNode=currentNode.parentNode}return null}(element)||window2}function getMainAxisFromPlacement(placement){return["top","bottom"].indexOf(placement)>=0?"x":"y"}function within(min2,value,max2){return max(min2,min(value,max2))}function mergePaddingObject(paddingObject){return Object.assign({},{top:0,right:0,bottom:0,left:0},paddingObject)}function expandToHashMap(value,keys){return keys.reduce((function(hashMap,key){return hashMap[key]=value,hashMap}),{})}function getVariation(placement){return placement.split("-")[1]}var unsetSides={top:"auto",right:"auto",bottom:"auto",left:"auto"};function mapToStyles(_ref2){var _Object$assign2,popper2=_ref2.popper,popperRect=_ref2.popperRect,placement=_ref2.placement,variation=_ref2.variation,offsets=_ref2.offsets,position=_ref2.position,gpuAcceleration=_ref2.gpuAcceleration,adaptive=_ref2.adaptive,roundOffsets=_ref2.roundOffsets,isFixed=_ref2.isFixed,_offsets$x=offsets.x,x=void 0===_offsets$x?0:_offsets$x,_offsets$y=offsets.y,y=void 0===_offsets$y?0:_offsets$y,_ref3="function"==typeof roundOffsets?roundOffsets({x,y}):{x,y};x=_ref3.x,y=_ref3.y;var hasX=offsets.hasOwnProperty("x"),hasY=offsets.hasOwnProperty("y"),sideX=left,sideY=top,win=window;if(adaptive){var offsetParent=getOffsetParent(popper2),heightProp="clientHeight",widthProp="clientWidth";if(offsetParent===getWindow(popper2)&&("static"!==getComputedStyle(offsetParent=getDocumentElement(popper2)).position&&"absolute"===position&&(heightProp="scrollHeight",widthProp="scrollWidth")),placement===top||(placement===left||placement===right)&&variation===end)sideY=bottom,y-=(isFixed&&offsetParent===win&&win.visualViewport?win.visualViewport.height:offsetParent[heightProp])-popperRect.height,y*=gpuAcceleration?1:-1;if(placement===left||(placement===top||placement===bottom)&&variation===end)sideX=right,x-=(isFixed&&offsetParent===win&&win.visualViewport?win.visualViewport.width:offsetParent[widthProp])-popperRect.width,x*=gpuAcceleration?1:-1}var _Object$assign,commonStyles=Object.assign({position},adaptive&&unsetSides),_ref4=!0===roundOffsets?function roundOffsetsByDPR(_ref,win){var x=_ref.x,y=_ref.y,dpr=win.devicePixelRatio||1;return{x:round(x*dpr)/dpr||0,y:round(y*dpr)/dpr||0}}({x,y},getWindow(popper2)):{x,y};return x=_ref4.x,y=_ref4.y,gpuAcceleration?Object.assign({},commonStyles,((_Object$assign={})[sideY]=hasY?"0":"",_Object$assign[sideX]=hasX?"0":"",_Object$assign.transform=(win.devicePixelRatio||1)<=1?"translate("+x+"px, "+y+"px)":"translate3d("+x+"px, "+y+"px, 0)",_Object$assign)):Object.assign({},commonStyles,((_Object$assign2={})[sideY]=hasY?y+"px":"",_Object$assign2[sideX]=hasX?x+"px":"",_Object$assign2.transform="",_Object$assign2))}var passive={passive:!0};var hash={left:"right",right:"left",bottom:"top",top:"bottom"};function getOppositePlacement(placement){return placement.replace(/left|right|bottom|top/g,(function(matched){return hash[matched]}))}var hash2={start:"end",end:"start"};function getOppositeVariationPlacement(placement){return placement.replace(/start|end/g,(function(matched){return hash2[matched]}))}function getWindowScroll(node){var win=getWindow(node);return{scrollLeft:win.pageXOffset,scrollTop:win.pageYOffset}}function getWindowScrollBarX(element){return getBoundingClientRect(getDocumentElement(element)).left+getWindowScroll(element).scrollLeft}function isScrollParent(element){var _getComputedStyle=getComputedStyle(element),overflow=_getComputedStyle.overflow,overflowX=_getComputedStyle.overflowX,overflowY=_getComputedStyle.overflowY;return/auto|scroll|overlay|hidden/.test(overflow+overflowY+overflowX)}function getScrollParent(node){return["html","body","#document"].indexOf(getNodeName(node))>=0?node.ownerDocument.body:isHTMLElement(node)&&isScrollParent(node)?node:getScrollParent(getParentNode(node))}function listScrollParents(element,list){var _element$ownerDocumen;void 0===list&&(list=[]);var scrollParent=getScrollParent(element),isBody=scrollParent===(null==(_element$ownerDocumen=element.ownerDocument)?void 0:_element$ownerDocumen.body),win=getWindow(scrollParent),target=isBody?[win].concat(win.visualViewport||[],isScrollParent(scrollParent)?scrollParent:[]):scrollParent,updatedList=list.concat(target);return isBody?updatedList:updatedList.concat(listScrollParents(getParentNode(target)))}function rectToClientRect(rect){return Object.assign({},rect,{left:rect.x,top:rect.y,right:rect.x+rect.width,bottom:rect.y+rect.height})}function getClientRectFromMixedType(element,clippingParent,strategy){return clippingParent===viewport?rectToClientRect(function getViewportRect(element,strategy){var win=getWindow(element),html=getDocumentElement(element),visualViewport=win.visualViewport,width=html.clientWidth,height=html.clientHeight,x=0,y=0;if(visualViewport){width=visualViewport.width,height=visualViewport.height;var layoutViewport=isLayoutViewport();(layoutViewport||!layoutViewport&&"fixed"===strategy)&&(x=visualViewport.offsetLeft,y=visualViewport.offsetTop)}return{width,height,x:x+getWindowScrollBarX(element),y}}(element,strategy)):isElement(clippingParent)?function getInnerBoundingClientRect(element,strategy){var rect=getBoundingClientRect(element,!1,"fixed"===strategy);return rect.top=rect.top+element.clientTop,rect.left=rect.left+element.clientLeft,rect.bottom=rect.top+element.clientHeight,rect.right=rect.left+element.clientWidth,rect.width=element.clientWidth,rect.height=element.clientHeight,rect.x=rect.left,rect.y=rect.top,rect}(clippingParent,strategy):rectToClientRect(function getDocumentRect(element){var _element$ownerDocumen,html=getDocumentElement(element),winScroll=getWindowScroll(element),body=null==(_element$ownerDocumen=element.ownerDocument)?void 0:_element$ownerDocumen.body,width=max(html.scrollWidth,html.clientWidth,body?body.scrollWidth:0,body?body.clientWidth:0),height=max(html.scrollHeight,html.clientHeight,body?body.scrollHeight:0,body?body.clientHeight:0),x=-winScroll.scrollLeft+getWindowScrollBarX(element),y=-winScroll.scrollTop;return"rtl"===getComputedStyle(body||html).direction&&(x+=max(html.clientWidth,body?body.clientWidth:0)-width),{width,height,x,y}}(getDocumentElement(element)))}function getClippingRect(element,boundary,rootBoundary,strategy){var mainClippingParents="clippingParents"===boundary?function getClippingParents(element){var clippingParents2=listScrollParents(getParentNode(element)),clipperElement=["absolute","fixed"].indexOf(getComputedStyle(element).position)>=0&&isHTMLElement(element)?getOffsetParent(element):element;return isElement(clipperElement)?clippingParents2.filter((function(clippingParent){return isElement(clippingParent)&&contains(clippingParent,clipperElement)&&"body"!==getNodeName(clippingParent)})):[]}(element):[].concat(boundary),clippingParents2=[].concat(mainClippingParents,[rootBoundary]),firstClippingParent=clippingParents2[0],clippingRect=clippingParents2.reduce((function(accRect,clippingParent){var rect=getClientRectFromMixedType(element,clippingParent,strategy);return accRect.top=max(rect.top,accRect.top),accRect.right=min(rect.right,accRect.right),accRect.bottom=min(rect.bottom,accRect.bottom),accRect.left=max(rect.left,accRect.left),accRect}),getClientRectFromMixedType(element,firstClippingParent,strategy));return clippingRect.width=clippingRect.right-clippingRect.left,clippingRect.height=clippingRect.bottom-clippingRect.top,clippingRect.x=clippingRect.left,clippingRect.y=clippingRect.top,clippingRect}function computeOffsets(_ref){var offsets,reference2=_ref.reference,element=_ref.element,placement=_ref.placement,basePlacement=placement?getBasePlacement(placement):null,variation=placement?getVariation(placement):null,commonX=reference2.x+reference2.width/2-element.width/2,commonY=reference2.y+reference2.height/2-element.height/2;switch(basePlacement){case top:offsets={x:commonX,y:reference2.y-element.height};break;case bottom:offsets={x:commonX,y:reference2.y+reference2.height};break;case right:offsets={x:reference2.x+reference2.width,y:commonY};break;case left:offsets={x:reference2.x-element.width,y:commonY};break;default:offsets={x:reference2.x,y:reference2.y}}var mainAxis=basePlacement?getMainAxisFromPlacement(basePlacement):null;if(null!=mainAxis){var len="y"===mainAxis?"height":"width";switch(variation){case start:offsets[mainAxis]=offsets[mainAxis]-(reference2[len]/2-element[len]/2);break;case end:offsets[mainAxis]=offsets[mainAxis]+(reference2[len]/2-element[len]/2)}}return offsets}function detectOverflow(state,options){void 0===options&&(options={});var _options=options,_options$placement=_options.placement,placement=void 0===_options$placement?state.placement:_options$placement,_options$strategy=_options.strategy,strategy=void 0===_options$strategy?state.strategy:_options$strategy,_options$boundary=_options.boundary,boundary=void 0===_options$boundary?clippingParents:_options$boundary,_options$rootBoundary=_options.rootBoundary,rootBoundary=void 0===_options$rootBoundary?viewport:_options$rootBoundary,_options$elementConte=_options.elementContext,elementContext=void 0===_options$elementConte?popper:_options$elementConte,_options$altBoundary=_options.altBoundary,altBoundary=void 0!==_options$altBoundary&&_options$altBoundary,_options$padding=_options.padding,padding=void 0===_options$padding?0:_options$padding,paddingObject=mergePaddingObject("number"!=typeof padding?padding:expandToHashMap(padding,basePlacements)),altContext=elementContext===popper?reference:popper,popperRect=state.rects.popper,element=state.elements[altBoundary?altContext:elementContext],clippingClientRect=getClippingRect(isElement(element)?element:element.contextElement||getDocumentElement(state.elements.popper),boundary,rootBoundary,strategy),referenceClientRect=getBoundingClientRect(state.elements.reference),popperOffsets2=computeOffsets({reference:referenceClientRect,element:popperRect,strategy:"absolute",placement}),popperClientRect=rectToClientRect(Object.assign({},popperRect,popperOffsets2)),elementClientRect=elementContext===popper?popperClientRect:referenceClientRect,overflowOffsets={top:clippingClientRect.top-elementClientRect.top+paddingObject.top,bottom:elementClientRect.bottom-clippingClientRect.bottom+paddingObject.bottom,left:clippingClientRect.left-elementClientRect.left+paddingObject.left,right:elementClientRect.right-clippingClientRect.right+paddingObject.right},offsetData=state.modifiersData.offset;if(elementContext===popper&&offsetData){var offset2=offsetData[placement];Object.keys(overflowOffsets).forEach((function(key){var multiply=[right,bottom].indexOf(key)>=0?1:-1,axis=[top,bottom].indexOf(key)>=0?"y":"x";overflowOffsets[key]+=offset2[axis]*multiply}))}return overflowOffsets}function getSideOffsets(overflow,rect,preventedOffsets){return void 0===preventedOffsets&&(preventedOffsets={x:0,y:0}),{top:overflow.top-rect.height-preventedOffsets.y,right:overflow.right-rect.width+preventedOffsets.x,bottom:overflow.bottom-rect.height+preventedOffsets.y,left:overflow.left-rect.width-preventedOffsets.x}}function isAnySideFullyClipped(overflow){return[top,right,bottom,left].some((function(side){return overflow[side]>=0}))}function getCompositeRect(elementOrVirtualElement,offsetParent,isFixed){void 0===isFixed&&(isFixed=!1);var isOffsetParentAnElement=isHTMLElement(offsetParent),offsetParentIsScaled=isHTMLElement(offsetParent)&&function isElementScaled(element){var rect=element.getBoundingClientRect(),scaleX=round(rect.width)/element.offsetWidth||1,scaleY=round(rect.height)/element.offsetHeight||1;return 1!==scaleX||1!==scaleY}(offsetParent),documentElement=getDocumentElement(offsetParent),rect=getBoundingClientRect(elementOrVirtualElement,offsetParentIsScaled,isFixed),scroll={scrollLeft:0,scrollTop:0},offsets={x:0,y:0};return(isOffsetParentAnElement||!isOffsetParentAnElement&&!isFixed)&&(("body"!==getNodeName(offsetParent)||isScrollParent(documentElement))&&(scroll=function getNodeScroll(node){return node!==getWindow(node)&&isHTMLElement(node)?function getHTMLElementScroll(element){return{scrollLeft:element.scrollLeft,scrollTop:element.scrollTop}}(node):getWindowScroll(node)}(offsetParent)),isHTMLElement(offsetParent)?((offsets=getBoundingClientRect(offsetParent,!0)).x+=offsetParent.clientLeft,offsets.y+=offsetParent.clientTop):documentElement&&(offsets.x=getWindowScrollBarX(documentElement))),{x:rect.left+scroll.scrollLeft-offsets.x,y:rect.top+scroll.scrollTop-offsets.y,width:rect.width,height:rect.height}}function order(modifiers){var map=new Map,visited=new Set,result=[];function sort(modifier){visited.add(modifier.name),[].concat(modifier.requires||[],modifier.requiresIfExists||[]).forEach((function(dep){if(!visited.has(dep)){var depModifier=map.get(dep);depModifier&&sort(depModifier)}})),result.push(modifier)}return modifiers.forEach((function(modifier){map.set(modifier.name,modifier)})),modifiers.forEach((function(modifier){visited.has(modifier.name)||sort(modifier)})),result}var DEFAULT_OPTIONS={placement:"bottom",modifiers:[],strategy:"absolute"};function areValidElements(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return!args.some((function(element){return!(element&&"function"==typeof element.getBoundingClientRect)}))}var createPopper=function popperGenerator(generatorOptions){void 0===generatorOptions&&(generatorOptions={});var _generatorOptions=generatorOptions,_generatorOptions$def=_generatorOptions.defaultModifiers,defaultModifiers2=void 0===_generatorOptions$def?[]:_generatorOptions$def,_generatorOptions$def2=_generatorOptions.defaultOptions,defaultOptions=void 0===_generatorOptions$def2?DEFAULT_OPTIONS:_generatorOptions$def2;return function(reference2,popper2,options){void 0===options&&(options=defaultOptions);var fn2,pending,state={placement:"bottom",orderedModifiers:[],options:Object.assign({},DEFAULT_OPTIONS,defaultOptions),modifiersData:{},elements:{reference:reference2,popper:popper2},attributes:{},styles:{}},effectCleanupFns=[],isDestroyed=!1,instance={state,setOptions:function(setOptionsAction){var options2="function"==typeof setOptionsAction?setOptionsAction(state.options):setOptionsAction;cleanupModifierEffects(),state.options=Object.assign({},defaultOptions,state.options,options2),state.scrollParents={reference:isElement(reference2)?listScrollParents(reference2):reference2.contextElement?listScrollParents(reference2.contextElement):[],popper:listScrollParents(popper2)};var orderedModifiers=function orderModifiers(modifiers){var orderedModifiers=order(modifiers);return modifierPhases.reduce((function(acc,phase){return acc.concat(orderedModifiers.filter((function(modifier){return modifier.phase===phase})))}),[])}(function mergeByName(modifiers){var merged=modifiers.reduce((function(merged2,current){var existing=merged2[current.name];return merged2[current.name]=existing?Object.assign({},existing,current,{options:Object.assign({},existing.options,current.options),data:Object.assign({},existing.data,current.data)}):current,merged2}),{});return Object.keys(merged).map((function(key){return merged[key]}))}([].concat(defaultModifiers2,state.options.modifiers)));return state.orderedModifiers=orderedModifiers.filter((function(m){return m.enabled})),function runModifierEffects(){state.orderedModifiers.forEach((function(_ref){var name=_ref.name,_ref$options=_ref.options,options2=void 0===_ref$options?{}:_ref$options,effect4=_ref.effect;if("function"==typeof effect4){var cleanupFn=effect4({state,name,instance,options:options2}),noopFn=function(){};effectCleanupFns.push(cleanupFn||noopFn)}}))}(),instance.update()},forceUpdate:function(){if(!isDestroyed){var _state$elements=state.elements,reference3=_state$elements.reference,popper3=_state$elements.popper;if(areValidElements(reference3,popper3)){state.rects={reference:getCompositeRect(reference3,getOffsetParent(popper3),"fixed"===state.options.strategy),popper:getLayoutRect(popper3)},state.reset=!1,state.placement=state.options.placement,state.orderedModifiers.forEach((function(modifier){return state.modifiersData[modifier.name]=Object.assign({},modifier.data)}));for(var index=0;index<state.orderedModifiers.length;index++)if(!0!==state.reset){var _state$orderedModifie=state.orderedModifiers[index],fn2=_state$orderedModifie.fn,_state$orderedModifie2=_state$orderedModifie.options,_options=void 0===_state$orderedModifie2?{}:_state$orderedModifie2,name=_state$orderedModifie.name;"function"==typeof fn2&&(state=fn2({state,options:_options,name,instance})||state)}else state.reset=!1,index=-1}}},update:(fn2=function(){return new Promise((function(resolve){instance.forceUpdate(),resolve(state)}))},function(){return pending||(pending=new Promise((function(resolve){Promise.resolve().then((function(){pending=void 0,resolve(fn2())}))}))),pending}),destroy:function(){cleanupModifierEffects(),isDestroyed=!0}};if(!areValidElements(reference2,popper2))return instance;function cleanupModifierEffects(){effectCleanupFns.forEach((function(fn2){return fn2()})),effectCleanupFns=[]}return instance.setOptions(options).then((function(state2){!isDestroyed&&options.onFirstUpdate&&options.onFirstUpdate(state2)})),instance}}({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function effect3(_ref){var state=_ref.state,instance=_ref.instance,options=_ref.options,_options$scroll=options.scroll,scroll=void 0===_options$scroll||_options$scroll,_options$resize=options.resize,resize=void 0===_options$resize||_options$resize,window2=getWindow(state.elements.popper),scrollParents=[].concat(state.scrollParents.reference,state.scrollParents.popper);return scroll&&scrollParents.forEach((function(scrollParent){scrollParent.addEventListener("scroll",instance.update,passive)})),resize&&window2.addEventListener("resize",instance.update,passive),function(){scroll&&scrollParents.forEach((function(scrollParent){scrollParent.removeEventListener("scroll",instance.update,passive)})),resize&&window2.removeEventListener("resize",instance.update,passive)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function popperOffsets(_ref){var state=_ref.state,name=_ref.name;state.modifiersData[name]=computeOffsets({reference:state.rects.reference,element:state.rects.popper,strategy:"absolute",placement:state.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function computeStyles(_ref5){var state=_ref5.state,options=_ref5.options,_options$gpuAccelerat=options.gpuAcceleration,gpuAcceleration=void 0===_options$gpuAccelerat||_options$gpuAccelerat,_options$adaptive=options.adaptive,adaptive=void 0===_options$adaptive||_options$adaptive,_options$roundOffsets=options.roundOffsets,roundOffsets=void 0===_options$roundOffsets||_options$roundOffsets,commonStyles={placement:getBasePlacement(state.placement),variation:getVariation(state.placement),popper:state.elements.popper,popperRect:state.rects.popper,gpuAcceleration,isFixed:"fixed"===state.options.strategy};null!=state.modifiersData.popperOffsets&&(state.styles.popper=Object.assign({},state.styles.popper,mapToStyles(Object.assign({},commonStyles,{offsets:state.modifiersData.popperOffsets,position:state.options.strategy,adaptive,roundOffsets})))),null!=state.modifiersData.arrow&&(state.styles.arrow=Object.assign({},state.styles.arrow,mapToStyles(Object.assign({},commonStyles,{offsets:state.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets})))),state.attributes.popper=Object.assign({},state.attributes.popper,{"data-popper-placement":state.placement})},data:{}},applyStyles_default,{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function offset(_ref2){var state=_ref2.state,options=_ref2.options,name=_ref2.name,_options$offset=options.offset,offset2=void 0===_options$offset?[0,0]:_options$offset,data=placements.reduce((function(acc,placement){return acc[placement]=function distanceAndSkiddingToXY(placement,rects,offset2){var basePlacement=getBasePlacement(placement),invertDistance=[left,top].indexOf(basePlacement)>=0?-1:1,_ref="function"==typeof offset2?offset2(Object.assign({},rects,{placement})):offset2,skidding=_ref[0],distance=_ref[1];return skidding=skidding||0,distance=(distance||0)*invertDistance,[left,right].indexOf(basePlacement)>=0?{x:distance,y:skidding}:{x:skidding,y:distance}}(placement,state.rects,offset2),acc}),{}),_data$state$placement=data[state.placement],x=_data$state$placement.x,y=_data$state$placement.y;null!=state.modifiersData.popperOffsets&&(state.modifiersData.popperOffsets.x+=x,state.modifiersData.popperOffsets.y+=y),state.modifiersData[name]=data}},{name:"flip",enabled:!0,phase:"main",fn:function flip(_ref){var state=_ref.state,options=_ref.options,name=_ref.name;if(!state.modifiersData[name]._skip){for(var _options$mainAxis=options.mainAxis,checkMainAxis=void 0===_options$mainAxis||_options$mainAxis,_options$altAxis=options.altAxis,checkAltAxis=void 0===_options$altAxis||_options$altAxis,specifiedFallbackPlacements=options.fallbackPlacements,padding=options.padding,boundary=options.boundary,rootBoundary=options.rootBoundary,altBoundary=options.altBoundary,_options$flipVariatio=options.flipVariations,flipVariations=void 0===_options$flipVariatio||_options$flipVariatio,allowedAutoPlacements=options.allowedAutoPlacements,preferredPlacement=state.options.placement,basePlacement=getBasePlacement(preferredPlacement),fallbackPlacements=specifiedFallbackPlacements||(basePlacement===preferredPlacement||!flipVariations?[getOppositePlacement(preferredPlacement)]:function getExpandedFallbackPlacements(placement){if(getBasePlacement(placement)===auto)return[];var oppositePlacement=getOppositePlacement(placement);return[getOppositeVariationPlacement(placement),oppositePlacement,getOppositeVariationPlacement(oppositePlacement)]}(preferredPlacement)),placements2=[preferredPlacement].concat(fallbackPlacements).reduce((function(acc,placement2){return acc.concat(getBasePlacement(placement2)===auto?function computeAutoPlacement(state,options){void 0===options&&(options={});var _options=options,placement=_options.placement,boundary=_options.boundary,rootBoundary=_options.rootBoundary,padding=_options.padding,flipVariations=_options.flipVariations,_options$allowedAutoP=_options.allowedAutoPlacements,allowedAutoPlacements=void 0===_options$allowedAutoP?placements:_options$allowedAutoP,variation=getVariation(placement),placements2=variation?flipVariations?variationPlacements:variationPlacements.filter((function(placement2){return getVariation(placement2)===variation})):basePlacements,allowedPlacements=placements2.filter((function(placement2){return allowedAutoPlacements.indexOf(placement2)>=0}));0===allowedPlacements.length&&(allowedPlacements=placements2);var overflows=allowedPlacements.reduce((function(acc,placement2){return acc[placement2]=detectOverflow(state,{placement:placement2,boundary,rootBoundary,padding})[getBasePlacement(placement2)],acc}),{});return Object.keys(overflows).sort((function(a,b){return overflows[a]-overflows[b]}))}(state,{placement:placement2,boundary,rootBoundary,padding,flipVariations,allowedAutoPlacements}):placement2)}),[]),referenceRect=state.rects.reference,popperRect=state.rects.popper,checksMap=new Map,makeFallbackChecks=!0,firstFittingPlacement=placements2[0],i=0;i<placements2.length;i++){var placement=placements2[i],_basePlacement=getBasePlacement(placement),isStartVariation=getVariation(placement)===start,isVertical=[top,bottom].indexOf(_basePlacement)>=0,len=isVertical?"width":"height",overflow=detectOverflow(state,{placement,boundary,rootBoundary,altBoundary,padding}),mainVariationSide=isVertical?isStartVariation?right:left:isStartVariation?bottom:top;referenceRect[len]>popperRect[len]&&(mainVariationSide=getOppositePlacement(mainVariationSide));var altVariationSide=getOppositePlacement(mainVariationSide),checks=[];if(checkMainAxis&&checks.push(overflow[_basePlacement]<=0),checkAltAxis&&checks.push(overflow[mainVariationSide]<=0,overflow[altVariationSide]<=0),checks.every((function(check){return check}))){firstFittingPlacement=placement,makeFallbackChecks=!1;break}checksMap.set(placement,checks)}if(makeFallbackChecks)for(var _loop=function(_i2){var fittingPlacement=placements2.find((function(placement2){var checks2=checksMap.get(placement2);if(checks2)return checks2.slice(0,_i2).every((function(check){return check}))}));if(fittingPlacement)return firstFittingPlacement=fittingPlacement,"break"},_i=flipVariations?3:1;_i>0;_i--){if("break"===_loop(_i))break}state.placement!==firstFittingPlacement&&(state.modifiersData[name]._skip=!0,state.placement=firstFittingPlacement,state.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function preventOverflow(_ref){var state=_ref.state,options=_ref.options,name=_ref.name,_options$mainAxis=options.mainAxis,checkMainAxis=void 0===_options$mainAxis||_options$mainAxis,_options$altAxis=options.altAxis,checkAltAxis=void 0!==_options$altAxis&&_options$altAxis,boundary=options.boundary,rootBoundary=options.rootBoundary,altBoundary=options.altBoundary,padding=options.padding,_options$tether=options.tether,tether=void 0===_options$tether||_options$tether,_options$tetherOffset=options.tetherOffset,tetherOffset=void 0===_options$tetherOffset?0:_options$tetherOffset,overflow=detectOverflow(state,{boundary,rootBoundary,padding,altBoundary}),basePlacement=getBasePlacement(state.placement),variation=getVariation(state.placement),isBasePlacement=!variation,mainAxis=getMainAxisFromPlacement(basePlacement),altAxis=function getAltAxis(axis){return"x"===axis?"y":"x"}(mainAxis),popperOffsets2=state.modifiersData.popperOffsets,referenceRect=state.rects.reference,popperRect=state.rects.popper,tetherOffsetValue="function"==typeof tetherOffset?tetherOffset(Object.assign({},state.rects,{placement:state.placement})):tetherOffset,normalizedTetherOffsetValue="number"==typeof tetherOffsetValue?{mainAxis:tetherOffsetValue,altAxis:tetherOffsetValue}:Object.assign({mainAxis:0,altAxis:0},tetherOffsetValue),offsetModifierState=state.modifiersData.offset?state.modifiersData.offset[state.placement]:null,data={x:0,y:0};if(popperOffsets2){if(checkMainAxis){var _offsetModifierState$,mainSide="y"===mainAxis?top:left,altSide="y"===mainAxis?bottom:right,len="y"===mainAxis?"height":"width",offset2=popperOffsets2[mainAxis],min2=offset2+overflow[mainSide],max2=offset2-overflow[altSide],additive=tether?-popperRect[len]/2:0,minLen=variation===start?referenceRect[len]:popperRect[len],maxLen=variation===start?-popperRect[len]:-referenceRect[len],arrowElement=state.elements.arrow,arrowRect=tether&&arrowElement?getLayoutRect(arrowElement):{width:0,height:0},arrowPaddingObject=state.modifiersData["arrow#persistent"]?state.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},arrowPaddingMin=arrowPaddingObject[mainSide],arrowPaddingMax=arrowPaddingObject[altSide],arrowLen=within(0,referenceRect[len],arrowRect[len]),minOffset=isBasePlacement?referenceRect[len]/2-additive-arrowLen-arrowPaddingMin-normalizedTetherOffsetValue.mainAxis:minLen-arrowLen-arrowPaddingMin-normalizedTetherOffsetValue.mainAxis,maxOffset=isBasePlacement?-referenceRect[len]/2+additive+arrowLen+arrowPaddingMax+normalizedTetherOffsetValue.mainAxis:maxLen+arrowLen+arrowPaddingMax+normalizedTetherOffsetValue.mainAxis,arrowOffsetParent=state.elements.arrow&&getOffsetParent(state.elements.arrow),clientOffset=arrowOffsetParent?"y"===mainAxis?arrowOffsetParent.clientTop||0:arrowOffsetParent.clientLeft||0:0,offsetModifierValue=null!=(_offsetModifierState$=offsetModifierState?.[mainAxis])?_offsetModifierState$:0,tetherMax=offset2+maxOffset-offsetModifierValue,preventedOffset=within(tether?min(min2,offset2+minOffset-offsetModifierValue-clientOffset):min2,offset2,tether?max(max2,tetherMax):max2);popperOffsets2[mainAxis]=preventedOffset,data[mainAxis]=preventedOffset-offset2}if(checkAltAxis){var _offsetModifierState$2,_mainSide="x"===mainAxis?top:left,_altSide="x"===mainAxis?bottom:right,_offset=popperOffsets2[altAxis],_len="y"===altAxis?"height":"width",_min=_offset+overflow[_mainSide],_max=_offset-overflow[_altSide],isOriginSide=-1!==[top,left].indexOf(basePlacement),_offsetModifierValue=null!=(_offsetModifierState$2=offsetModifierState?.[altAxis])?_offsetModifierState$2:0,_tetherMin=isOriginSide?_min:_offset-referenceRect[_len]-popperRect[_len]-_offsetModifierValue+normalizedTetherOffsetValue.altAxis,_tetherMax=isOriginSide?_offset+referenceRect[_len]+popperRect[_len]-_offsetModifierValue-normalizedTetherOffsetValue.altAxis:_max,_preventedOffset=tether&&isOriginSide?function withinMaxClamp(min2,value,max2){var v=within(min2,value,max2);return v>max2?max2:v}(_tetherMin,_offset,_tetherMax):within(tether?_tetherMin:_min,_offset,tether?_tetherMax:_max);popperOffsets2[altAxis]=_preventedOffset,data[altAxis]=_preventedOffset-_offset}state.modifiersData[name]=data}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function arrow(_ref){var _state$modifiersData$,state=_ref.state,name=_ref.name,options=_ref.options,arrowElement=state.elements.arrow,popperOffsets2=state.modifiersData.popperOffsets,basePlacement=getBasePlacement(state.placement),axis=getMainAxisFromPlacement(basePlacement),len=[left,right].indexOf(basePlacement)>=0?"height":"width";if(arrowElement&&popperOffsets2){var paddingObject=function(padding,state){return mergePaddingObject("number"!=typeof(padding="function"==typeof padding?padding(Object.assign({},state.rects,{placement:state.placement})):padding)?padding:expandToHashMap(padding,basePlacements))}(options.padding,state),arrowRect=getLayoutRect(arrowElement),minProp="y"===axis?top:left,maxProp="y"===axis?bottom:right,endDiff=state.rects.reference[len]+state.rects.reference[axis]-popperOffsets2[axis]-state.rects.popper[len],startDiff=popperOffsets2[axis]-state.rects.reference[axis],arrowOffsetParent=getOffsetParent(arrowElement),clientSize=arrowOffsetParent?"y"===axis?arrowOffsetParent.clientHeight||0:arrowOffsetParent.clientWidth||0:0,centerToReference=endDiff/2-startDiff/2,min2=paddingObject[minProp],max2=clientSize-arrowRect[len]-paddingObject[maxProp],center=clientSize/2-arrowRect[len]/2+centerToReference,offset2=within(min2,center,max2),axisProp=axis;state.modifiersData[name]=((_state$modifiersData$={})[axisProp]=offset2,_state$modifiersData$.centerOffset=offset2-center,_state$modifiersData$)}},effect:function effect2(_ref2){var state=_ref2.state,_options$element=_ref2.options.element,arrowElement=void 0===_options$element?"[data-popper-arrow]":_options$element;null!=arrowElement&&("string"==typeof arrowElement&&!(arrowElement=state.elements.popper.querySelector(arrowElement))||contains(state.elements.popper,arrowElement)&&(state.elements.arrow=arrowElement))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function hide(_ref){var state=_ref.state,name=_ref.name,referenceRect=state.rects.reference,popperRect=state.rects.popper,preventedOffsets=state.modifiersData.preventOverflow,referenceOverflow=detectOverflow(state,{elementContext:"reference"}),popperAltOverflow=detectOverflow(state,{altBoundary:!0}),referenceClippingOffsets=getSideOffsets(referenceOverflow,referenceRect),popperEscapeOffsets=getSideOffsets(popperAltOverflow,popperRect,preventedOffsets),isReferenceHidden=isAnySideFullyClipped(referenceClippingOffsets),hasPopperEscaped=isAnySideFullyClipped(popperEscapeOffsets);state.modifiersData[name]={referenceClippingOffsets,popperEscapeOffsets,isReferenceHidden,hasPopperEscaped},state.attributes.popper=Object.assign({},state.attributes.popper,{"data-popper-reference-hidden":isReferenceHidden,"data-popper-escaped":hasPopperEscaped})}}]}),import_react_fast_compare=(0,_chunk_SCHQIR5W_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(require_react_fast_compare()),EMPTY_MODIFIERS=[];function useGetLatest(val){var ref=react__WEBPACK_IMPORTED_MODULE_0__.useRef(val);return ref.current=val,react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(){return ref.current}),[])}var noop=function(){};function generateBoundingClientRect(x,y){return void 0===x&&(x=0),void 0===y&&(y=0),function(){return{width:0,height:0,top:y,right:x,bottom:y,left:x,x:0,y:0,toJSON:function(){return null}}}}var _excluded=["styles","attributes"],virtualElement={getBoundingClientRect:generateBoundingClientRect()},defaultConfig={closeOnOutsideClick:!0,closeOnTriggerHidden:!1,defaultVisible:!1,delayHide:0,delayShow:0,followCursor:!1,interactive:!1,mutationObserverOptions:{attributes:!0,childList:!0,subtree:!0},offset:[0,6],trigger:"hover"};function usePopperTooltip(config,popperOptions){var _popperProps$state,_popperProps$state$mo,_popperProps$state$mo2;void 0===config&&(config={}),void 0===popperOptions&&(popperOptions={});var finalConfig=Object.keys(defaultConfig).reduce((function(config2,key){var _extends2;return(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({},config2,((_extends2={})[key]=void 0!==config2[key]?config2[key]:defaultConfig[key],_extends2))}),config),defaultModifiers2=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return[{name:"offset",options:{offset:finalConfig.offset}}]}),Array.isArray(finalConfig.offset)?finalConfig.offset:[]),finalPopperOptions=(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({},popperOptions,{placement:popperOptions.placement||finalConfig.placement,modifiers:popperOptions.modifiers||defaultModifiers2}),_React$useState=react__WEBPACK_IMPORTED_MODULE_0__.useState(null),triggerRef=_React$useState[0],setTriggerRef=_React$useState[1],_React$useState2=react__WEBPACK_IMPORTED_MODULE_0__.useState(null),tooltipRef=_React$useState2[0],setTooltipRef=_React$useState2[1],_useControlledState=function useControlledState(_ref){var initial=_ref.initial,value=_ref.value,_ref$onChange=_ref.onChange,onChange=void 0===_ref$onChange?noop:_ref$onChange;if(void 0===initial&&void 0===value)throw new TypeError('Either "value" or "initial" variable must be set. Now both are undefined');var _React$useState=react__WEBPACK_IMPORTED_MODULE_0__.useState(initial),state=_React$useState[0],setState=_React$useState[1],getLatest=useGetLatest(state),set=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(updater){var state2=getLatest(),updatedState="function"==typeof updater?updater(state2):updater;"function"==typeof updatedState.persist&&updatedState.persist(),setState(updatedState),"function"==typeof onChange&&onChange(updatedState)}),[getLatest,onChange]),isControlled=void 0!==value;return[isControlled?value:state,isControlled?onChange:set]}({initial:finalConfig.defaultVisible,value:finalConfig.visible,onChange:finalConfig.onVisibleChange}),visible=_useControlledState[0],setVisible=_useControlledState[1],timer=react__WEBPACK_IMPORTED_MODULE_0__.useRef();react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){return function(){return clearTimeout(timer.current)}}),[]);var _usePopper=function(referenceElement,popperElement,options){void 0===options&&(options={});var prevOptions=react__WEBPACK_IMPORTED_MODULE_0__.useRef(null),optionsWithDefaults={onFirstUpdate:options.onFirstUpdate,placement:options.placement||"bottom",strategy:options.strategy||"absolute",modifiers:options.modifiers||EMPTY_MODIFIERS},_React$useState=react__WEBPACK_IMPORTED_MODULE_0__.useState({styles:{popper:{position:optionsWithDefaults.strategy,left:"0",top:"0"},arrow:{position:"absolute"}},attributes:{}}),state=_React$useState[0],setState=_React$useState[1],updateStateModifier=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return{name:"updateState",enabled:!0,phase:"write",fn:function(_ref){var state2=_ref.state,elements=Object.keys(state2.elements);react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync((function(){setState({styles:fromEntries(elements.map((function(element){return[element,state2.styles[element]||{}]}))),attributes:fromEntries(elements.map((function(element){return[element,state2.attributes[element]]})))})}))},requires:["computeStyles"]}}),[]),popperOptions=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){var newOptions={onFirstUpdate:optionsWithDefaults.onFirstUpdate,placement:optionsWithDefaults.placement,strategy:optionsWithDefaults.strategy,modifiers:[].concat(optionsWithDefaults.modifiers,[updateStateModifier,{name:"applyStyles",enabled:!1}])};return(0,import_react_fast_compare.default)(prevOptions.current,newOptions)?prevOptions.current||newOptions:(prevOptions.current=newOptions,newOptions)}),[optionsWithDefaults.onFirstUpdate,optionsWithDefaults.placement,optionsWithDefaults.strategy,optionsWithDefaults.modifiers,updateStateModifier]),popperInstanceRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef();return useIsomorphicLayoutEffect((function(){popperInstanceRef.current&&popperInstanceRef.current.setOptions(popperOptions)}),[popperOptions]),useIsomorphicLayoutEffect((function(){if(null!=referenceElement&&null!=popperElement){var popperInstance=(options.createPopper||createPopper)(referenceElement,popperElement,popperOptions);return popperInstanceRef.current=popperInstance,function(){popperInstance.destroy(),popperInstanceRef.current=null}}}),[referenceElement,popperElement,options.createPopper]),{state:popperInstanceRef.current?popperInstanceRef.current.state:null,styles:state.styles,attributes:state.attributes,update:popperInstanceRef.current?popperInstanceRef.current.update:null,forceUpdate:popperInstanceRef.current?popperInstanceRef.current.forceUpdate:null}}(finalConfig.followCursor?virtualElement:triggerRef,tooltipRef,finalPopperOptions),styles=_usePopper.styles,attributes=_usePopper.attributes,popperProps=(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.i)(_usePopper,_excluded),update=popperProps.update,getLatest=useGetLatest({visible,triggerRef,tooltipRef,finalConfig}),isTriggeredBy=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(trigger){return Array.isArray(finalConfig.trigger)?finalConfig.trigger.includes(trigger):finalConfig.trigger===trigger}),Array.isArray(finalConfig.trigger)?finalConfig.trigger:[finalConfig.trigger]),hideTooltip=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(){clearTimeout(timer.current),timer.current=window.setTimeout((function(){return setVisible(!1)}),finalConfig.delayHide)}),[finalConfig.delayHide,setVisible]),showTooltip=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(){clearTimeout(timer.current),timer.current=window.setTimeout((function(){return setVisible(!0)}),finalConfig.delayShow)}),[finalConfig.delayShow,setVisible]),toggleTooltip=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(){getLatest().visible?hideTooltip():showTooltip()}),[getLatest,hideTooltip,showTooltip]);react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(getLatest().finalConfig.closeOnOutsideClick){var handleClickOutside=function(event){var _event$composedPath,_getLatest=getLatest(),tooltipRef2=_getLatest.tooltipRef,triggerRef2=_getLatest.triggerRef,target=(null==event.composedPath||null==(_event$composedPath=event.composedPath())?void 0:_event$composedPath[0])||event.target;target instanceof Node&&null!=tooltipRef2&&null!=triggerRef2&&!tooltipRef2.contains(target)&&!triggerRef2.contains(target)&&hideTooltip()};return document.addEventListener("mousedown",handleClickOutside),function(){return document.removeEventListener("mousedown",handleClickOutside)}}}),[getLatest,hideTooltip]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=triggerRef&&isTriggeredBy("click"))return triggerRef.addEventListener("click",toggleTooltip),function(){return triggerRef.removeEventListener("click",toggleTooltip)}}),[triggerRef,isTriggeredBy,toggleTooltip]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=triggerRef&&isTriggeredBy("double-click"))return triggerRef.addEventListener("dblclick",toggleTooltip),function(){return triggerRef.removeEventListener("dblclick",toggleTooltip)}}),[triggerRef,isTriggeredBy,toggleTooltip]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=triggerRef&&isTriggeredBy("right-click")){var preventDefaultAndToggle=function(event){event.preventDefault(),toggleTooltip()};return triggerRef.addEventListener("contextmenu",preventDefaultAndToggle),function(){return triggerRef.removeEventListener("contextmenu",preventDefaultAndToggle)}}}),[triggerRef,isTriggeredBy,toggleTooltip]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=triggerRef&&isTriggeredBy("focus"))return triggerRef.addEventListener("focus",showTooltip),triggerRef.addEventListener("blur",hideTooltip),function(){triggerRef.removeEventListener("focus",showTooltip),triggerRef.removeEventListener("blur",hideTooltip)}}),[triggerRef,isTriggeredBy,showTooltip,hideTooltip]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=triggerRef&&isTriggeredBy("hover"))return triggerRef.addEventListener("mouseenter",showTooltip),triggerRef.addEventListener("mouseleave",hideTooltip),function(){triggerRef.removeEventListener("mouseenter",showTooltip),triggerRef.removeEventListener("mouseleave",hideTooltip)}}),[triggerRef,isTriggeredBy,showTooltip,hideTooltip]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=tooltipRef&&isTriggeredBy("hover")&&getLatest().finalConfig.interactive)return tooltipRef.addEventListener("mouseenter",showTooltip),tooltipRef.addEventListener("mouseleave",hideTooltip),function(){tooltipRef.removeEventListener("mouseenter",showTooltip),tooltipRef.removeEventListener("mouseleave",hideTooltip)}}),[tooltipRef,isTriggeredBy,showTooltip,hideTooltip,getLatest]);var isReferenceHidden=null==popperProps||null==(_popperProps$state=popperProps.state)||null==(_popperProps$state$mo=_popperProps$state.modifiersData)||null==(_popperProps$state$mo2=_popperProps$state$mo.hide)?void 0:_popperProps$state$mo2.isReferenceHidden;react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){finalConfig.closeOnTriggerHidden&&isReferenceHidden&&hideTooltip()}),[finalConfig.closeOnTriggerHidden,hideTooltip,isReferenceHidden]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(finalConfig.followCursor&&null!=triggerRef)return triggerRef.addEventListener("mousemove",setMousePosition),function(){return triggerRef.removeEventListener("mousemove",setMousePosition)};function setMousePosition(_ref){var clientX=_ref.clientX,clientY=_ref.clientY;virtualElement.getBoundingClientRect=generateBoundingClientRect(clientX,clientY),update?.()}}),[finalConfig.followCursor,triggerRef,update]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(null!=tooltipRef&&null!=update&&null!=finalConfig.mutationObserverOptions){var observer=new MutationObserver(update);return observer.observe(tooltipRef,finalConfig.mutationObserverOptions),function(){return observer.disconnect()}}}),[finalConfig.mutationObserverOptions,tooltipRef,update]);return(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({getArrowProps:function(args){return void 0===args&&(args={}),(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({},args,attributes.arrow,{style:(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({},args.style,styles.arrow),"data-popper-arrow":!0})},getTooltipProps:function(args){return void 0===args&&(args={}),(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({},args,{style:(0,_chunk_FD4M6EBV_mjs__WEBPACK_IMPORTED_MODULE_4__.r)({},args.style,styles.popper)},attributes.popper,{"data-popper-interactive":finalConfig.interactive})},setTooltipRef,setTriggerRef,tooltipRef,triggerRef,visible},popperProps)}var match=memoizerific__WEBPACK_IMPORTED_MODULE_2__(1e3)(((requests,actual,value,fallback=0)=>actual.split("-")[0]===requests?value:fallback)),Arrow=_storybook_theming__WEBPACK_IMPORTED_MODULE_5__.I4.div({position:"absolute",borderStyle:"solid"},(({placement})=>{let x=0,y=0;switch(!0){case placement.startsWith("left")||placement.startsWith("right"):y=8;break;case placement.startsWith("top")||placement.startsWith("bottom"):x=8}return{transform:`translate3d(${x}px, ${y}px, 0px)`}}),(({theme,color,placement})=>({bottom:`${match("top",placement,"-8px","auto")}`,top:`${match("bottom",placement,"-8px","auto")}`,right:`${match("left",placement,"-8px","auto")}`,left:`${match("right",placement,"-8px","auto")}`,borderBottomWidth:`${match("top",placement,"0",8)}px`,borderTopWidth:`${match("bottom",placement,"0",8)}px`,borderRightWidth:`${match("left",placement,"0",8)}px`,borderLeftWidth:`${match("right",placement,"0",8)}px`,borderTopColor:match("top",placement,theme.color[color]||color||"light"===theme.base?(0,_storybook_theming__WEBPACK_IMPORTED_MODULE_6__.Zt)(theme.background.app):theme.background.app,"transparent"),borderBottomColor:match("bottom",placement,theme.color[color]||color||"light"===theme.base?(0,_storybook_theming__WEBPACK_IMPORTED_MODULE_6__.Zt)(theme.background.app):theme.background.app,"transparent"),borderLeftColor:match("left",placement,theme.color[color]||color||"light"===theme.base?(0,_storybook_theming__WEBPACK_IMPORTED_MODULE_6__.Zt)(theme.background.app):theme.background.app,"transparent"),borderRightColor:match("right",placement,theme.color[color]||color||"light"===theme.base?(0,_storybook_theming__WEBPACK_IMPORTED_MODULE_6__.Zt)(theme.background.app):theme.background.app,"transparent")}))),Wrapper=_storybook_theming__WEBPACK_IMPORTED_MODULE_5__.I4.div((({hidden})=>({display:hidden?"none":"inline-block",zIndex:2147483647})),(({theme,color,hasChrome})=>hasChrome?{background:theme.color[color]||color||"light"===theme.base?(0,_storybook_theming__WEBPACK_IMPORTED_MODULE_6__.Zt)(theme.background.app):theme.background.app,filter:"\n            drop-shadow(0px 5px 5px rgba(0,0,0,0.05))\n            drop-shadow(0 1px 3px rgba(0,0,0,0.1))\n          ",borderRadius:theme.appBorderRadius,fontSize:theme.typography.size.s1}:{})),Tooltip=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((({placement,hasChrome,children,arrowProps,tooltipRef,color,withArrows,...props},ref)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wrapper,{"data-testid":"tooltip",hasChrome,ref,...props,color},hasChrome&&withArrows&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(Arrow,{placement,...arrowProps,color}),children)));Tooltip.displayName="Tooltip",Tooltip.defaultProps={color:void 0,tooltipRef:void 0,hasChrome:!0,placement:"top",arrowProps:{}};var{document:document2}=_storybook_global__WEBPACK_IMPORTED_MODULE_7__.global,TargetContainer=_storybook_theming__WEBPACK_IMPORTED_MODULE_5__.I4.div`
  display: inline-block;
  cursor: ${props=>"hover"===props.trigger||props.trigger.includes("hover")?"default":"pointer"};
`,TargetSvgContainer=_storybook_theming__WEBPACK_IMPORTED_MODULE_5__.I4.g`
  cursor: ${props=>"hover"===props.trigger||props.trigger.includes("hover")?"default":"pointer"};
`,WithTooltipPure=({svg,trigger,closeOnOutsideClick,placement,hasChrome,withArrows,offset:offset2,tooltip,children,closeOnTriggerHidden,mutationObserverOptions,defaultVisible,delayHide,visible,interactive,delayShow,modifiers,strategy,followCursor,onVisibleChange,...props})=>{let Container=svg?TargetSvgContainer:TargetContainer,{getArrowProps,getTooltipProps,setTooltipRef,setTriggerRef,visible:isVisible,state}=usePopperTooltip({trigger,placement,defaultVisible,delayHide,interactive,closeOnOutsideClick,closeOnTriggerHidden,onVisibleChange,delayShow,followCursor,mutationObserverOptions,visible,offset:offset2},{modifiers,strategy}),tooltipComponent=react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tooltip,{placement:state?.placement,ref:setTooltipRef,hasChrome,arrowProps:getArrowProps(),withArrows,...getTooltipProps()},"function"==typeof tooltip?tooltip({onHide:()=>onVisibleChange(!1)}):tooltip);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(Container,{trigger,ref:setTriggerRef,...props},children),isVisible&&react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(tooltipComponent,document2.body))};WithTooltipPure.defaultProps={svg:!1,trigger:"click",closeOnOutsideClick:!1,placement:"top",modifiers:[{name:"preventOverflow",options:{padding:8}},{name:"offset",options:{offset:[8,8]}},{name:"arrow",options:{padding:8}}],hasChrome:!0,defaultVisible:!1};var WithToolTipState=({startOpen=!1,onVisibleChange:onChange,...rest})=>{let[tooltipShown,setTooltipShown]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(startOpen),onVisibilityChange=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((visibility=>{onChange&&!1===onChange(visibility)||setTooltipShown(visibility)}),[onChange]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{let hide2=()=>onVisibilityChange(!1);document2.addEventListener("keydown",hide2,!1);let iframes=Array.from(document2.getElementsByTagName("iframe")),unbinders=[];return iframes.forEach((iframe=>{let bind=()=>{try{iframe.contentWindow.document&&(iframe.contentWindow.document.addEventListener("click",hide2),unbinders.push((()=>{try{iframe.contentWindow.document.removeEventListener("click",hide2)}catch{}})))}catch{}};bind(),iframe.addEventListener("load",bind),unbinders.push((()=>{iframe.removeEventListener("load",bind)}))})),()=>{document2.removeEventListener("keydown",hide2),unbinders.forEach((unbind=>{unbind()}))}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(WithTooltipPure,{...rest,visible:tooltipShown,onVisibleChange:onVisibilityChange})}},"./node_modules/@storybook/components/dist/index.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{$n:()=>Button,Cy:()=>Code,Df:()=>ErrorFormatter,px:()=>FlexBar,lV:()=>Form,H2:()=>H2,H3:()=>H3,K0:()=>IconButton,N_:()=>Link2,aH:()=>Loader,dL:()=>ResetWrapper,bF:()=>SyntaxHighlighter2,_j:()=>TabsState,_:()=>TooltipNote,kR:()=>WithTooltip,o4:()=>WithTooltipPure,GP:()=>Zoom,zb:()=>codeCommon,dK:()=>components2,createCopyToClipboardFunction:()=>chunk_D3EWQ7UP.zH,jZ:()=>getStoryHref,mc:()=>nameSpaceClassNames,YV:()=>withReset});var chunk_D3EWQ7UP=__webpack_require__("./node_modules/@storybook/components/dist/chunk-D3EWQ7UP.mjs"),chunk_T3L4SIIA=__webpack_require__("./node_modules/@storybook/components/dist/chunk-T3L4SIIA.mjs"),chunk_FD4M6EBV=__webpack_require__("./node_modules/@storybook/components/dist/chunk-FD4M6EBV.mjs"),react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/@storybook/theming/dist/index.mjs"),chunk_FX52EUNG=__webpack_require__("./node_modules/@storybook/theming/dist/chunk-FX52EUNG.mjs"),LightningOffIcon=react.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react.createElement("path",{d:"M10.139 8.725l1.36-1.323a.568.568 0 00.151-.54.534.534 0 00-.377-.396l-2.705-.708 2.22-4.976a.568.568 0 00-.15-.666.497.497 0 00-.648.008L5.464 4.05l.708.71 2.848-2.47-1.64 3.677.697.697 2.164.567-.81.787.708.708zM2.523 6.6a.566.566 0 00-.177.544.534.534 0 00.382.41l2.782.721-1.494 5.013a.563.563 0 00.217.627.496.496 0 00.629-.06l3.843-3.736-.708-.707-2.51 2.44 1.137-3.814-.685-.685-2.125-.55.844-.731-.71-.71L2.524 6.6zM1.854 1.146a.5.5 0 10-.708.708l11 11a.5.5 0 00.708-.708l-11-11z",fill:color})))),ChevronRightIcon=react.forwardRef((({color="currentColor",size=14,...props},forwardedRef)=>react.createElement("svg",{width:size,height:size,viewBox:"0 0 14 14",fill:"none",xmlns:"http://www.w3.org/2000/svg",ref:forwardedRef,...props},react.createElement("path",{d:"M11.104 7.354l-5.5 5.5a.5.5 0 01-.708-.708L10.043 7 4.896 1.854a.5.5 0 11.708-.708l5.5 5.5a.5.5 0 010 .708z",fill:color})))),global_dist=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),react_slot_dist=__webpack_require__("./node_modules/@radix-ui/react-slot/dist/index.mjs"),client_logger_dist=__webpack_require__("./node_modules/@storybook/client-logger/dist/index.mjs"),memoizerific=__webpack_require__("./node_modules/memoizerific/memoizerific.js"),csf_dist=__webpack_require__("./node_modules/@storybook/csf/dist/index.mjs"),nameSpaceClassNames=({...props},key)=>{let classes=[props.class,props.className];return delete props.class,props.className=["sbdocs",`sbdocs-${key}`,...classes].filter(Boolean).join(" "),props};function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(o2,p2){return o2.__proto__=p2,o2})(o,p)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(o2){return o2.__proto__||Object.getPrototypeOf(o2)})(o)}function _construct(Parent,args,Class){return(_construct=function _isNativeReflectConstruct(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch{return!1}}()?Reflect.construct.bind():function(Parent2,args2,Class2){var a=[null];a.push.apply(a,args2);var instance=new(Function.bind.apply(Parent2,a));return Class2&&_setPrototypeOf(instance,Class2.prototype),instance}).apply(null,arguments)}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(Class2){if(null===Class2||!function _isNativeFunction(fn){try{return-1!==Function.toString.call(fn).indexOf("[native code]")}catch{return"function"==typeof fn}}(Class2))return Class2;if("function"!=typeof Class2)throw new TypeError("Super expression must either be null or a function");if(typeof _cache<"u"){if(_cache.has(Class2))return _cache.get(Class2);_cache.set(Class2,Wrapper3)}function Wrapper3(){return _construct(Class2,arguments,_getPrototypeOf(this).constructor)}return Wrapper3.prototype=Object.create(Class2.prototype,{constructor:{value:Wrapper3,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper3,Class2)},_wrapNativeSuper(Class)}var ERRORS={1:"Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",2:"Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",3:"Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",4:"Couldn't generate valid rgb string from %s, it returned %s.\n\n",5:"Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",6:"Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",7:"Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",8:"Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",9:"Please provide a number of steps to the modularScale helper.\n\n",10:"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",11:'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',12:'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',13:'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',14:'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',15:'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',16:"You must provide a template to this method.\n\n",17:"You passed an unsupported selector state to this method.\n\n",18:"minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",19:"fromSize and toSize must be provided as stringified numbers with the same units.\n\n",20:"expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",21:"expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",22:"expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",23:"fontFace expects a name of a font-family.\n\n",24:"fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",25:"fontFace expects localFonts to be an array.\n\n",26:"fontFace expects fileFormats to be an array.\n\n",27:"radialGradient requries at least 2 color-stops to properly render.\n\n",28:"Please supply a filename to retinaImage() as the first argument.\n\n",29:"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",30:"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",31:"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",32:"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",33:"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",34:"borderRadius expects a radius value as a string or number as the second argument.\n\n",35:'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',36:"Property must be a string value.\n\n",37:"Syntax Error at %s.\n\n",38:"Formula contains a function that needs parentheses at %s.\n\n",39:"Formula is missing closing parenthesis at %s.\n\n",40:"Formula has too many closing parentheses at %s.\n\n",41:"All values in a formula must have the same unit or be unitless.\n\n",42:"Please provide a number of steps to the modularScale helper.\n\n",43:"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",44:"Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",45:"Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",46:"Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",47:"minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",48:"fromSize and toSize must be provided as stringified numbers with the same units.\n\n",49:"Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",50:"Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",51:"Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",52:"fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",53:"fontFace expects localFonts to be an array.\n\n",54:"fontFace expects fileFormats to be an array.\n\n",55:"fontFace expects a name of a font-family.\n\n",56:"linearGradient requries at least 2 color-stops to properly render.\n\n",57:"radialGradient requries at least 2 color-stops to properly render.\n\n",58:"Please supply a filename to retinaImage() as the first argument.\n\n",59:"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",60:"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",61:"Property must be a string value.\n\n",62:"borderRadius expects a radius value as a string or number as the second argument.\n\n",63:'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',64:"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",65:"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",66:"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",67:"You must provide a template to this method.\n\n",68:"You passed an unsupported selector state to this method.\n\n",69:'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',70:'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',71:'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',72:'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',73:"Please provide a valid CSS variable.\n\n",74:"CSS variable not found and no default was provided.\n\n",75:"important requires a valid style object, got a %s instead.\n\n",76:"fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",77:'remToPx expects a value in "rem" but you provided it in "%s".\n\n',78:'base must be set in "px" or "%" but you set it in "%s".\n'};function format(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var c,a=args[0],b=[];for(c=1;c<args.length;c+=1)b.push(args[c]);return b.forEach((function(d){a=a.replace(/%[a-z]/,d)})),a}var PolishedError=function(_Error){function PolishedError2(code){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];return function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_Error.call(this,format.apply(void 0,[ERRORS[code]].concat(args)))||this)}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(PolishedError2,_Error),PolishedError2}(_wrapNativeSuper(Error));function colorToInt(color2){return Math.round(255*color2)}function convertToInt(red,green,blue){return colorToInt(red)+","+colorToInt(green)+","+colorToInt(blue)}function hslToRgb(hue,saturation,lightness,convert){if(void 0===convert&&(convert=convertToInt),0===saturation)return convert(lightness,lightness,lightness);var huePrime=(hue%360+360)%360/60,chroma=(1-Math.abs(2*lightness-1))*saturation,secondComponent=chroma*(1-Math.abs(huePrime%2-1)),red=0,green=0,blue=0;huePrime>=0&&huePrime<1?(red=chroma,green=secondComponent):huePrime>=1&&huePrime<2?(red=secondComponent,green=chroma):huePrime>=2&&huePrime<3?(green=chroma,blue=secondComponent):huePrime>=3&&huePrime<4?(green=secondComponent,blue=chroma):huePrime>=4&&huePrime<5?(red=secondComponent,blue=chroma):huePrime>=5&&huePrime<6&&(red=chroma,blue=secondComponent);var lightnessModification=lightness-chroma/2;return convert(red+lightnessModification,green+lightnessModification,blue+lightnessModification)}var namedColorMap={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"639",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"};var hexRegex=/^#[a-fA-F0-9]{6}$/,hexRgbaRegex=/^#[a-fA-F0-9]{8}$/,reducedHexRegex=/^#[a-fA-F0-9]{3}$/,reducedRgbaHexRegex=/^#[a-fA-F0-9]{4}$/,rgbRegex=/^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i,rgbaRegex=/^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i,hslRegex=/^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i,hslaRegex=/^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;function parseToRgb(color2){if("string"!=typeof color2)throw new PolishedError(3);var normalizedColor=function nameToHex(color2){if("string"!=typeof color2)return color2;var normalizedColorName=color2.toLowerCase();return namedColorMap[normalizedColorName]?"#"+namedColorMap[normalizedColorName]:color2}(color2);if(normalizedColor.match(hexRegex))return{red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16)};if(normalizedColor.match(hexRgbaRegex)){var alpha=parseFloat((parseInt(""+normalizedColor[7]+normalizedColor[8],16)/255).toFixed(2));return{red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16),alpha}}if(normalizedColor.match(reducedHexRegex))return{red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16)};if(normalizedColor.match(reducedRgbaHexRegex)){var _alpha=parseFloat((parseInt(""+normalizedColor[4]+normalizedColor[4],16)/255).toFixed(2));return{red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16),alpha:_alpha}}var rgbMatched=rgbRegex.exec(normalizedColor);if(rgbMatched)return{red:parseInt(""+rgbMatched[1],10),green:parseInt(""+rgbMatched[2],10),blue:parseInt(""+rgbMatched[3],10)};var rgbaMatched=rgbaRegex.exec(normalizedColor.substring(0,50));if(rgbaMatched)return{red:parseInt(""+rgbaMatched[1],10),green:parseInt(""+rgbaMatched[2],10),blue:parseInt(""+rgbaMatched[3],10),alpha:parseFloat(""+rgbaMatched[4])>1?parseFloat(""+rgbaMatched[4])/100:parseFloat(""+rgbaMatched[4])};var hslMatched=hslRegex.exec(normalizedColor);if(hslMatched){var rgbColorString="rgb("+hslToRgb(parseInt(""+hslMatched[1],10),parseInt(""+hslMatched[2],10)/100,parseInt(""+hslMatched[3],10)/100)+")",hslRgbMatched=rgbRegex.exec(rgbColorString);if(!hslRgbMatched)throw new PolishedError(4,normalizedColor,rgbColorString);return{red:parseInt(""+hslRgbMatched[1],10),green:parseInt(""+hslRgbMatched[2],10),blue:parseInt(""+hslRgbMatched[3],10)}}var hslaMatched=hslaRegex.exec(normalizedColor.substring(0,50));if(hslaMatched){var _rgbColorString="rgb("+hslToRgb(parseInt(""+hslaMatched[1],10),parseInt(""+hslaMatched[2],10)/100,parseInt(""+hslaMatched[3],10)/100)+")",_hslRgbMatched=rgbRegex.exec(_rgbColorString);if(!_hslRgbMatched)throw new PolishedError(4,normalizedColor,_rgbColorString);return{red:parseInt(""+_hslRgbMatched[1],10),green:parseInt(""+_hslRgbMatched[2],10),blue:parseInt(""+_hslRgbMatched[3],10),alpha:parseFloat(""+hslaMatched[4])>1?parseFloat(""+hslaMatched[4])/100:parseFloat(""+hslaMatched[4])}}throw new PolishedError(5)}function parseToHsl(color2){return function rgbToHsl(color2){var red=color2.red/255,green=color2.green/255,blue=color2.blue/255,max=Math.max(red,green,blue),min=Math.min(red,green,blue),lightness=(max+min)/2;if(max===min)return void 0!==color2.alpha?{hue:0,saturation:0,lightness,alpha:color2.alpha}:{hue:0,saturation:0,lightness};var hue,delta=max-min,saturation=lightness>.5?delta/(2-max-min):delta/(max+min);switch(max){case red:hue=(green-blue)/delta+(green<blue?6:0);break;case green:hue=(blue-red)/delta+2;break;default:hue=(red-green)/delta+4}return hue*=60,void 0!==color2.alpha?{hue,saturation,lightness,alpha:color2.alpha}:{hue,saturation,lightness}}(parseToRgb(color2))}var reduceHexValue$1=function(value){return 7===value.length&&value[1]===value[2]&&value[3]===value[4]&&value[5]===value[6]?"#"+value[1]+value[3]+value[5]:value};function numberToHex(value){var hex=value.toString(16);return 1===hex.length?"0"+hex:hex}function colorToHex(color2){return numberToHex(Math.round(255*color2))}function convertToHex(red,green,blue){return reduceHexValue$1("#"+colorToHex(red)+colorToHex(green)+colorToHex(blue))}function hslToHex(hue,saturation,lightness){return hslToRgb(hue,saturation,lightness,convertToHex)}function rgb(value,green,blue){if("number"==typeof value&&"number"==typeof green&&"number"==typeof blue)return reduceHexValue$1("#"+numberToHex(value)+numberToHex(green)+numberToHex(blue));if("object"==typeof value&&void 0===green&&void 0===blue)return reduceHexValue$1("#"+numberToHex(value.red)+numberToHex(value.green)+numberToHex(value.blue));throw new PolishedError(6)}function rgba(firstValue,secondValue,thirdValue,fourthValue){if("string"==typeof firstValue&&"number"==typeof secondValue){var rgbValue=parseToRgb(firstValue);return"rgba("+rgbValue.red+","+rgbValue.green+","+rgbValue.blue+","+secondValue+")"}if("number"==typeof firstValue&&"number"==typeof secondValue&&"number"==typeof thirdValue&&"number"==typeof fourthValue)return fourthValue>=1?rgb(firstValue,secondValue,thirdValue):"rgba("+firstValue+","+secondValue+","+thirdValue+","+fourthValue+")";if("object"==typeof firstValue&&void 0===secondValue&&void 0===thirdValue&&void 0===fourthValue)return firstValue.alpha>=1?rgb(firstValue.red,firstValue.green,firstValue.blue):"rgba("+firstValue.red+","+firstValue.green+","+firstValue.blue+","+firstValue.alpha+")";throw new PolishedError(7)}var isRgb=function(color2){return"number"==typeof color2.red&&"number"==typeof color2.green&&"number"==typeof color2.blue&&("number"!=typeof color2.alpha||typeof color2.alpha>"u")},isRgba=function(color2){return"number"==typeof color2.red&&"number"==typeof color2.green&&"number"==typeof color2.blue&&"number"==typeof color2.alpha},isHsl=function(color2){return"number"==typeof color2.hue&&"number"==typeof color2.saturation&&"number"==typeof color2.lightness&&("number"!=typeof color2.alpha||typeof color2.alpha>"u")},isHsla=function(color2){return"number"==typeof color2.hue&&"number"==typeof color2.saturation&&"number"==typeof color2.lightness&&"number"==typeof color2.alpha};function toColorString(color2){if("object"!=typeof color2)throw new PolishedError(8);if(isRgba(color2))return rgba(color2);if(isRgb(color2))return rgb(color2);if(isHsla(color2))return function hsla(value,saturation,lightness,alpha){if("number"==typeof value&&"number"==typeof saturation&&"number"==typeof lightness&&"number"==typeof alpha)return alpha>=1?hslToHex(value,saturation,lightness):"rgba("+hslToRgb(value,saturation,lightness)+","+alpha+")";if("object"==typeof value&&void 0===saturation&&void 0===lightness&&void 0===alpha)return value.alpha>=1?hslToHex(value.hue,value.saturation,value.lightness):"rgba("+hslToRgb(value.hue,value.saturation,value.lightness)+","+value.alpha+")";throw new PolishedError(2)}(color2);if(isHsl(color2))return function hsl(value,saturation,lightness){if("number"==typeof value&&"number"==typeof saturation&&"number"==typeof lightness)return hslToHex(value,saturation,lightness);if("object"==typeof value&&void 0===saturation&&void 0===lightness)return hslToHex(value.hue,value.saturation,value.lightness);throw new PolishedError(1)}(color2);throw new PolishedError(8)}function curried(f,length,acc){return function(){var combined=acc.concat(Array.prototype.slice.call(arguments));return combined.length>=length?f.apply(this,combined):curried(f,length,combined)}}function curry(f){return curried(f,f.length,[])}function guard(lowerBoundary,upperBoundary,value){return Math.max(lowerBoundary,Math.min(upperBoundary,value))}var curriedDarken$1=curry((function darken(amount,color2){if("transparent"===color2)return color2;var hslColor=parseToHsl(color2);return toColorString((0,chunk_FD4M6EBV.r)({},hslColor,{lightness:guard(0,1,hslColor.lightness-parseFloat(amount))}))}));var curriedLighten$1=curry((function lighten(amount,color2){if("transparent"===color2)return color2;var hslColor=parseToHsl(color2);return toColorString((0,chunk_FD4M6EBV.r)({},hslColor,{lightness:guard(0,1,hslColor.lightness+parseFloat(amount))}))}));var curriedTransparentize$1=curry((function transparentize(amount,color2){if("transparent"===color2)return color2;var parsedColor=parseToRgb(color2),alpha="number"==typeof parsedColor.alpha?parsedColor.alpha:1;return rgba((0,chunk_FD4M6EBV.r)({},parsedColor,{alpha:guard(0,1,+(100*alpha-100*parseFloat(amount)).toFixed(2)/100)}))})),headerCommon=({theme})=>({margin:"20px 0 8px",padding:0,cursor:"text",position:"relative",color:theme.color.defaultText,"&:first-of-type":{marginTop:0,paddingTop:0},"&:hover a.anchor":{textDecoration:"none"},"& tt, & code":{fontSize:"inherit"}}),codeCommon=({theme})=>({lineHeight:1,margin:"0 2px",padding:"3px 5px",whiteSpace:"nowrap",borderRadius:3,fontSize:theme.typography.size.s2-1,border:"light"===theme.base?`1px solid ${theme.color.mediumlight}`:`1px solid ${theme.color.darker}`,color:"light"===theme.base?curriedTransparentize$1(.1,theme.color.defaultText):curriedTransparentize$1(.3,theme.color.defaultText),backgroundColor:"light"===theme.base?theme.color.lighter:theme.color.border}),withReset=({theme})=>({fontFamily:theme.typography.fonts.base,fontSize:theme.typography.size.s3,margin:0,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",WebkitOverflowScrolling:"touch"}),withMargin={margin:"16px 0"},A=(0,dist.I4)((({href:input,...props})=>{let href=/^\//.test(input)?`./?path=${input}`:input,target=/^#.*/.test(input)?"_self":"_top";return react.createElement("a",{href,target,...props})}))(withReset,(({theme})=>({fontSize:"inherit",lineHeight:"24px",color:theme.color.secondary,textDecoration:"none","&.absent":{color:"#cc0000"},"&.anchor":{display:"block",paddingLeft:30,marginLeft:-30,cursor:"pointer",position:"absolute",top:0,left:0,bottom:0}}))),Blockquote=dist.I4.blockquote(withReset,withMargin,(({theme})=>({borderLeft:`4px solid ${theme.color.medium}`,padding:"0 15px",color:theme.color.dark,"& > :first-of-type":{marginTop:0},"& > :last-child":{marginBottom:0}}))),isReactChildString=child=>"string"==typeof child,isInlineCodeRegex=/[\n\r]/g,DefaultCodeBlock=dist.I4.code((({theme})=>({fontFamily:theme.typography.fonts.mono,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",display:"inline-block",paddingLeft:2,paddingRight:2,verticalAlign:"baseline",color:"inherit"})),codeCommon),StyledSyntaxHighlighter=(0,dist.I4)(chunk_D3EWQ7UP.bF)((({theme})=>({fontFamily:theme.typography.fonts.mono,fontSize:theme.typography.size.s2-1+"px",lineHeight:"19px",margin:"25px 0 40px",borderRadius:theme.appBorderRadius,boxShadow:"light"===theme.base?"rgba(0, 0, 0, 0.10) 0 1px 3px 0":"rgba(0, 0, 0, 0.20) 0 2px 5px 0","pre.prismjs":{padding:20,background:"inherit"}}))),Code=({className,children,...props})=>{let language=(className||"").match(/lang-(\S+)/),childrenArray=react.Children.toArray(children);return childrenArray.filter(isReactChildString).some((child=>child.match(isInlineCodeRegex)))?react.createElement(StyledSyntaxHighlighter,{bordered:!0,copyable:!0,language:language?.[1]??"text",format:!1,...props},children):react.createElement(DefaultCodeBlock,{...props,className},childrenArray)},Div=dist.I4.div(withReset),DL=dist.I4.dl(withReset,withMargin,{padding:0,"& dt":{fontSize:"14px",fontWeight:"bold",fontStyle:"italic",padding:0,margin:"16px 0 4px"},"& dt:first-of-type":{padding:0},"& dt > :first-of-type":{marginTop:0},"& dt > :last-child":{marginBottom:0},"& dd":{margin:"0 0 16px",padding:"0 15px"},"& dd > :first-of-type":{marginTop:0},"& dd > :last-child":{marginBottom:0}}),H1=dist.I4.h1(withReset,headerCommon,(({theme})=>({fontSize:`${theme.typography.size.l1}px`,fontWeight:theme.typography.weight.bold}))),H2=dist.I4.h2(withReset,headerCommon,(({theme})=>({fontSize:`${theme.typography.size.m2}px`,paddingBottom:4,borderBottom:`1px solid ${theme.appBorderColor}`}))),H3=dist.I4.h3(withReset,headerCommon,(({theme})=>({fontSize:`${theme.typography.size.m1}px`}))),H4=dist.I4.h4(withReset,headerCommon,(({theme})=>({fontSize:`${theme.typography.size.s3}px`}))),H5=dist.I4.h5(withReset,headerCommon,(({theme})=>({fontSize:`${theme.typography.size.s2}px`}))),H6=dist.I4.h6(withReset,headerCommon,(({theme})=>({fontSize:`${theme.typography.size.s2}px`,color:theme.color.dark}))),HR=dist.I4.hr((({theme})=>({border:"0 none",borderTop:`1px solid ${theme.appBorderColor}`,height:4,padding:0}))),Img=dist.I4.img({maxWidth:"100%"}),LI=dist.I4.li(withReset,(({theme})=>({fontSize:theme.typography.size.s2,color:theme.color.defaultText,lineHeight:"24px","& + li":{marginTop:".25em"},"& ul, & ol":{marginTop:".25em",marginBottom:0},"& code":codeCommon({theme})}))),OL=dist.I4.ol(withReset,withMargin,{paddingLeft:30,"& :first-of-type":{marginTop:0},"& :last-child":{marginBottom:0}},{listStyle:"decimal"}),P=dist.I4.p(withReset,withMargin,(({theme})=>({fontSize:theme.typography.size.s2,lineHeight:"24px",color:theme.color.defaultText,"& code":codeCommon({theme})}))),Pre=dist.I4.pre(withReset,withMargin,(({theme})=>({fontFamily:theme.typography.fonts.mono,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",lineHeight:"18px",padding:"11px 1rem",whiteSpace:"pre-wrap",color:"inherit",borderRadius:3,margin:"1rem 0","&:not(.prismjs)":{background:"transparent",border:"none",borderRadius:0,padding:0,margin:0},"& pre, &.prismjs":{padding:15,margin:0,whiteSpace:"pre-wrap",color:"inherit",fontSize:"13px",lineHeight:"19px",code:{color:"inherit",fontSize:"inherit"}},"& code":{whiteSpace:"pre"},"& code, & tt":{border:"none"}}))),Span=dist.I4.span(withReset,(({theme})=>({"&.frame":{display:"block",overflow:"hidden","& > span":{border:`1px solid ${theme.color.medium}`,display:"block",float:"left",overflow:"hidden",margin:"13px 0 0",padding:7,width:"auto"},"& span img":{display:"block",float:"left"},"& span span":{clear:"both",color:theme.color.darkest,display:"block",padding:"5px 0 0"}},"&.align-center":{display:"block",overflow:"hidden",clear:"both","& > span":{display:"block",overflow:"hidden",margin:"13px auto 0",textAlign:"center"},"& span img":{margin:"0 auto",textAlign:"center"}},"&.align-right":{display:"block",overflow:"hidden",clear:"both","& > span":{display:"block",overflow:"hidden",margin:"13px 0 0",textAlign:"right"},"& span img":{margin:0,textAlign:"right"}},"&.float-left":{display:"block",marginRight:13,overflow:"hidden",float:"left","& span":{margin:"13px 0 0"}},"&.float-right":{display:"block",marginLeft:13,overflow:"hidden",float:"right","& > span":{display:"block",overflow:"hidden",margin:"13px auto 0",textAlign:"right"}}}))),Table=dist.I4.table(withReset,withMargin,(({theme})=>({fontSize:theme.typography.size.s2,lineHeight:"24px",padding:0,borderCollapse:"collapse","& tr":{borderTop:`1px solid ${theme.appBorderColor}`,backgroundColor:theme.appContentBg,margin:0,padding:0},"& tr:nth-of-type(2n)":{backgroundColor:"dark"===theme.base?theme.color.darker:theme.color.lighter},"& tr th":{fontWeight:"bold",color:theme.color.defaultText,border:`1px solid ${theme.appBorderColor}`,margin:0,padding:"6px 13px"},"& tr td":{border:`1px solid ${theme.appBorderColor}`,color:theme.color.defaultText,margin:0,padding:"6px 13px"},"& tr th :first-of-type, & tr td :first-of-type":{marginTop:0},"& tr th :last-child, & tr td :last-child":{marginBottom:0}}))),TT=dist.I4.title(codeCommon),UL=dist.I4.ul(withReset,withMargin,{paddingLeft:30,"& :first-of-type":{marginTop:0},"& :last-child":{marginBottom:0}},{listStyle:"disc"}),ResetWrapper=dist.I4.div(withReset),components={h1:props=>react.createElement(H1,{...nameSpaceClassNames(props,"h1")}),h2:props=>react.createElement(H2,{...nameSpaceClassNames(props,"h2")}),h3:props=>react.createElement(H3,{...nameSpaceClassNames(props,"h3")}),h4:props=>react.createElement(H4,{...nameSpaceClassNames(props,"h4")}),h5:props=>react.createElement(H5,{...nameSpaceClassNames(props,"h5")}),h6:props=>react.createElement(H6,{...nameSpaceClassNames(props,"h6")}),pre:props=>react.createElement(Pre,{...nameSpaceClassNames(props,"pre")}),a:props=>react.createElement(A,{...nameSpaceClassNames(props,"a")}),hr:props=>react.createElement(HR,{...nameSpaceClassNames(props,"hr")}),dl:props=>react.createElement(DL,{...nameSpaceClassNames(props,"dl")}),blockquote:props=>react.createElement(Blockquote,{...nameSpaceClassNames(props,"blockquote")}),table:props=>react.createElement(Table,{...nameSpaceClassNames(props,"table")}),img:props=>react.createElement(Img,{...nameSpaceClassNames(props,"img")}),div:props=>react.createElement(Div,{...nameSpaceClassNames(props,"div")}),span:props=>react.createElement(Span,{...nameSpaceClassNames(props,"span")}),li:props=>react.createElement(LI,{...nameSpaceClassNames(props,"li")}),ul:props=>react.createElement(UL,{...nameSpaceClassNames(props,"ul")}),ol:props=>react.createElement(OL,{...nameSpaceClassNames(props,"ol")}),p:props=>react.createElement(P,{...nameSpaceClassNames(props,"p")}),code:props=>react.createElement(Code,{...nameSpaceClassNames(props,"code")}),tt:props=>react.createElement(TT,{...nameSpaceClassNames(props,"tt")}),resetwrapper:props=>react.createElement(ResetWrapper,{...nameSpaceClassNames(props,"resetwrapper")})},LinkInner=(dist.I4.div((({theme})=>({display:"inline-block",fontSize:11,lineHeight:"12px",alignSelf:"center",padding:"4px 12px",borderRadius:"3em",fontWeight:theme.typography.weight.bold})),{svg:{height:12,width:12,marginRight:4,marginTop:-2,path:{fill:"currentColor"}}},(({theme,status})=>{switch(status){case"critical":return{color:theme.color.critical,background:theme.background.critical};case"negative":return{color:theme.color.negativeText,background:theme.background.negative,boxShadow:"light"===theme.base?`inset 0 0 0 1px ${curriedTransparentize$1(.9,theme.color.negativeText)}`:"none"};case"warning":return{color:theme.color.warningText,background:theme.background.warning,boxShadow:"light"===theme.base?`inset 0 0 0 1px ${curriedTransparentize$1(.9,theme.color.warningText)}`:"none"};case"neutral":return{color:theme.color.dark,background:theme.color.mediumlight,boxShadow:"light"===theme.base?`inset 0 0 0 1px ${curriedTransparentize$1(.9,theme.color.dark)}`:"none"};case"positive":return{color:theme.color.positiveText,background:theme.background.positive,boxShadow:"light"===theme.base?`inset 0 0 0 1px ${curriedTransparentize$1(.9,theme.color.positiveText)}`:"none"};default:return{}}})),dist.I4.span((({withArrow})=>withArrow?{"> svg:last-of-type":{height:"0.7em",width:"0.7em",marginRight:0,marginLeft:"0.25em",bottom:"auto",verticalAlign:"inherit"}}:{}),(({containsIcon})=>containsIcon?{svg:{height:"1em",width:"1em",verticalAlign:"middle",position:"relative",bottom:0,marginRight:0}}:{}))),A2=dist.I4.a((({theme})=>({display:"inline-block",transition:"all 150ms ease-out",textDecoration:"none",color:theme.color.secondary,"&:hover, &:focus":{cursor:"pointer",color:curriedDarken$1(.07,theme.color.secondary),"svg path:not([fill])":{fill:curriedDarken$1(.07,theme.color.secondary)}},"&:active":{color:curriedDarken$1(.1,theme.color.secondary),"svg path:not([fill])":{fill:curriedDarken$1(.1,theme.color.secondary)}},svg:{display:"inline-block",height:"1em",width:"1em",verticalAlign:"text-top",position:"relative",bottom:"-0.125em",marginRight:"0.4em","& path":{fill:theme.color.secondary}}})),(({theme,secondary,tertiary})=>{let colors;return secondary&&(colors=[theme.textMutedColor,theme.color.dark,theme.color.darker]),tertiary&&(colors=[theme.color.dark,theme.color.darkest,theme.textMutedColor]),colors?{color:colors[0],"svg path:not([fill])":{fill:colors[0]},"&:hover":{color:colors[1],"svg path:not([fill])":{fill:colors[1]}},"&:active":{color:colors[2],"svg path:not([fill])":{fill:colors[2]}}}:{}}),(({nochrome})=>nochrome?{color:"inherit","&:hover, &:active":{color:"inherit",textDecoration:"underline"}}:{}),(({theme,inverse})=>inverse?{color:theme.color.lightest,":not([fill])":{fill:theme.color.lightest},"&:hover":{color:theme.color.lighter,"svg path:not([fill])":{fill:theme.color.lighter}},"&:active":{color:theme.color.light,"svg path:not([fill])":{fill:theme.color.light}}}:{}),(({isButton:isButton2})=>isButton2?{border:0,borderRadius:0,background:"none",padding:0,fontSize:"inherit"}:{})),Link2=({cancel=!0,children,onClick,withArrow=!1,containsIcon=!1,className,style,...rest})=>react.createElement(A2,{...rest,onClick:onClick&&cancel?e=>((e,cb)=>{(e=>!(0!==e.button||e.altKey||e.ctrlKey||e.metaKey||e.shiftKey))(e)&&(e.preventDefault(),cb(e))})(e,onClick):onClick,className},react.createElement(LinkInner,{withArrow,containsIcon},children,withArrow&&react.createElement(ChevronRightIcon,null))),languages=(dist.I4.div((({theme})=>({fontSize:`${theme.typography.size.s2}px`,lineHeight:"1.6",h1:{fontSize:`${theme.typography.size.l1}px`,fontWeight:theme.typography.weight.bold},h2:{fontSize:`${theme.typography.size.m2}px`,borderBottom:`1px solid ${theme.appBorderColor}`},h3:{fontSize:`${theme.typography.size.m1}px`},h4:{fontSize:`${theme.typography.size.s3}px`},h5:{fontSize:`${theme.typography.size.s2}px`},h6:{fontSize:`${theme.typography.size.s2}px`,color:theme.color.dark},"pre:not(.prismjs)":{background:"transparent",border:"none",borderRadius:0,padding:0,margin:0},"pre pre, pre.prismjs":{padding:15,margin:0,whiteSpace:"pre-wrap",color:"inherit",fontSize:"13px",lineHeight:"19px"},"pre pre code, pre.prismjs code":{color:"inherit",fontSize:"inherit"},"pre code":{margin:0,padding:0,whiteSpace:"pre",border:"none",background:"transparent"},"pre code, pre tt":{backgroundColor:"transparent",border:"none"},"body > *:first-of-type":{marginTop:"0 !important"},"body > *:last-child":{marginBottom:"0 !important"},a:{color:theme.color.secondary,textDecoration:"none"},"a.absent":{color:"#cc0000"},"a.anchor":{display:"block",paddingLeft:30,marginLeft:-30,cursor:"pointer",position:"absolute",top:0,left:0,bottom:0},"h1, h2, h3, h4, h5, h6":{margin:"20px 0 10px",padding:0,cursor:"text",position:"relative","&:first-of-type":{marginTop:0,paddingTop:0},"&:hover a.anchor":{textDecoration:"none"},"& tt, & code":{fontSize:"inherit"}},"h1:first-of-type + h2":{marginTop:0,paddingTop:0},"p, blockquote, ul, ol, dl, li, table, pre":{margin:"15px 0"},hr:{border:"0 none",borderTop:`1px solid ${theme.appBorderColor}`,height:4,padding:0},"body > h1:first-of-type, body > h2:first-of-type, body > h3:first-of-type, body > h4:first-of-type, body > h5:first-of-type, body > h6:first-of-type":{marginTop:0,paddingTop:0},"body > h1:first-of-type + h2":{marginTop:0,paddingTop:0},"a:first-of-type h1, a:first-of-type h2, a:first-of-type h3, a:first-of-type h4, a:first-of-type h5, a:first-of-type h6":{marginTop:0,paddingTop:0},"h1 p, h2 p, h3 p, h4 p, h5 p, h6 p":{marginTop:0},"li p.first":{display:"inline-block"},"ul, ol":{paddingLeft:30,"& :first-of-type":{marginTop:0},"& :last-child":{marginBottom:0}},dl:{padding:0},"dl dt":{fontSize:"14px",fontWeight:"bold",fontStyle:"italic",margin:"0 0 15px",padding:"0 15px","&:first-of-type":{padding:0},"& > :first-of-type":{marginTop:0},"& > :last-child":{marginBottom:0}},blockquote:{borderLeft:`4px solid ${theme.color.medium}`,padding:"0 15px",color:theme.color.dark,"& > :first-of-type":{marginTop:0},"& > :last-child":{marginBottom:0}},table:{padding:0,borderCollapse:"collapse","& tr":{borderTop:`1px solid ${theme.appBorderColor}`,backgroundColor:"white",margin:0,padding:0,"& th":{fontWeight:"bold",border:`1px solid ${theme.appBorderColor}`,textAlign:"left",margin:0,padding:"6px 13px"},"& td":{border:`1px solid ${theme.appBorderColor}`,textAlign:"left",margin:0,padding:"6px 13px"},"&:nth-of-type(2n)":{backgroundColor:theme.color.lighter},"& th :first-of-type, & td :first-of-type":{marginTop:0},"& th :last-child, & td :last-child":{marginBottom:0}}},img:{maxWidth:"100%"},"span.frame":{display:"block",overflow:"hidden","& > span":{border:`1px solid ${theme.color.medium}`,display:"block",float:"left",overflow:"hidden",margin:"13px 0 0",padding:7,width:"auto"},"& span img":{display:"block",float:"left"},"& span span":{clear:"both",color:theme.color.darkest,display:"block",padding:"5px 0 0"}},"span.align-center":{display:"block",overflow:"hidden",clear:"both","& > span":{display:"block",overflow:"hidden",margin:"13px auto 0",textAlign:"center"},"& span img":{margin:"0 auto",textAlign:"center"}},"span.align-right":{display:"block",overflow:"hidden",clear:"both","& > span":{display:"block",overflow:"hidden",margin:"13px 0 0",textAlign:"right"},"& span img":{margin:0,textAlign:"right"}},"span.float-left":{display:"block",marginRight:13,overflow:"hidden",float:"left","& span":{margin:"13px 0 0"}},"span.float-right":{display:"block",marginLeft:13,overflow:"hidden",float:"right","& > span":{display:"block",overflow:"hidden",margin:"13px auto 0",textAlign:"right"}},"code, tt":{margin:"0 2px",padding:"0 5px",whiteSpace:"nowrap",border:`1px solid ${theme.color.mediumlight}`,backgroundColor:theme.color.lighter,borderRadius:3,color:"dark"===theme.base&&theme.color.darkest}}))),[]),Comp=null,LazySyntaxHighlighter=(0,react.lazy)((async()=>{let{SyntaxHighlighter:SyntaxHighlighter3}=await __webpack_require__.e(507).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/components/dist/syntaxhighlighter-JOJW2KGS.mjs"));return languages.length>0&&(languages.forEach((args=>{SyntaxHighlighter3.registerLanguage(...args)})),languages=[]),null===Comp&&(Comp=SyntaxHighlighter3),{default:props=>react.createElement(SyntaxHighlighter3,{...props})}})),LazySyntaxHighlighterWithFormatter=(0,react.lazy)((async()=>{let[{SyntaxHighlighter:SyntaxHighlighter3},{formatter}]=await Promise.all([__webpack_require__.e(507).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/components/dist/syntaxhighlighter-JOJW2KGS.mjs")),__webpack_require__.e(6503).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/components/dist/formatter-B5HCVTEV.mjs"))]);return languages.length>0&&(languages.forEach((args=>{SyntaxHighlighter3.registerLanguage(...args)})),languages=[]),null===Comp&&(Comp=SyntaxHighlighter3),{default:props=>react.createElement(SyntaxHighlighter3,{...props,formatter})}})),SyntaxHighlighter2=props=>react.createElement(react.Suspense,{fallback:react.createElement("div",null)},!1!==props.format?react.createElement(LazySyntaxHighlighterWithFormatter,{...props}):react.createElement(LazySyntaxHighlighter,{...props}));SyntaxHighlighter2.registerLanguage=(...args)=>{null===Comp?languages.push(args):Comp.registerLanguage(...args)};dist.I4.div((({theme,col,row=1})=>col?{display:"inline-block",verticalAlign:"inherit","& > *":{marginLeft:col*theme.layoutMargin,verticalAlign:"inherit"},[`& > *:first-child${dist.v_}`]:{marginLeft:0}}:{"& > *":{marginTop:row*theme.layoutMargin},[`& > *:first-child${dist.v_}`]:{marginTop:0}}),(({theme,outer,col,row})=>{switch(!0){case!(!outer||!col):return{marginLeft:outer*theme.layoutMargin,marginRight:outer*theme.layoutMargin};case!(!outer||!row):return{marginTop:outer*theme.layoutMargin,marginBottom:outer*theme.layoutMargin};default:return{}}}));var Title=dist.I4.div((({theme})=>({fontWeight:theme.typography.weight.bold}))),Desc=dist.I4.div(),Message=dist.I4.div((({theme})=>({padding:30,textAlign:"center",color:theme.color.defaultText,fontSize:theme.typography.size.s2-1}))),Placeholder=({children,...props})=>{let[title,desc]=react.Children.toArray(children);return react.createElement(Message,{...props},react.createElement(Title,null,title),desc&&react.createElement(Desc,null,desc))};function extractSize(entry,boxProp,sizeType){return entry[boxProp]?entry[boxProp][0]?entry[boxProp][0][sizeType]:entry[boxProp][sizeType]:"contentBoxSize"===boxProp?entry.contentRect["inlineSize"===sizeType?"width":"height"]:void 0}function useResizeObserver(opts){void 0===opts&&(opts={});var onResize=opts.onResize,onResizeRef=(0,react.useRef)(void 0);onResizeRef.current=onResize;var round=opts.round||Math.round,resizeObserverRef=(0,react.useRef)(),_useState=(0,react.useState)({width:void 0,height:void 0}),size=_useState[0],setSize=_useState[1],didUnmount=(0,react.useRef)(!1);(0,react.useEffect)((function(){return didUnmount.current=!1,function(){didUnmount.current=!0}}),[]);var previous=(0,react.useRef)({width:void 0,height:void 0}),refCallback=function useResolvedElement(subscriber,refOrElement){var lastReportRef=(0,react.useRef)(null),refOrElementRef=(0,react.useRef)(null);refOrElementRef.current=refOrElement;var cbElementRef=(0,react.useRef)(null);(0,react.useEffect)((function(){evaluateSubscription()}));var evaluateSubscription=(0,react.useCallback)((function(){var cbElement=cbElementRef.current,refOrElement2=refOrElementRef.current,element=cbElement||(refOrElement2?refOrElement2 instanceof Element?refOrElement2:refOrElement2.current:null);lastReportRef.current&&lastReportRef.current.element===element&&lastReportRef.current.subscriber===subscriber||(lastReportRef.current&&lastReportRef.current.cleanup&&lastReportRef.current.cleanup(),lastReportRef.current={element,subscriber,cleanup:element?subscriber(element):void 0})}),[subscriber]);return(0,react.useEffect)((function(){return function(){lastReportRef.current&&lastReportRef.current.cleanup&&(lastReportRef.current.cleanup(),lastReportRef.current=null)}}),[]),(0,react.useCallback)((function(element){cbElementRef.current=element,evaluateSubscription()}),[evaluateSubscription])}((0,react.useCallback)((function(element){return(!resizeObserverRef.current||resizeObserverRef.current.box!==opts.box||resizeObserverRef.current.round!==round)&&(resizeObserverRef.current={box:opts.box,round,instance:new ResizeObserver((function(entries){var entry=entries[0],boxProp="border-box"===opts.box?"borderBoxSize":"device-pixel-content-box"===opts.box?"devicePixelContentBoxSize":"contentBoxSize",reportedWidth=extractSize(entry,boxProp,"inlineSize"),reportedHeight=extractSize(entry,boxProp,"blockSize"),newWidth=reportedWidth?round(reportedWidth):void 0,newHeight=reportedHeight?round(reportedHeight):void 0;if(previous.current.width!==newWidth||previous.current.height!==newHeight){var newSize={width:newWidth,height:newHeight};previous.current.width=newWidth,previous.current.height=newHeight,onResizeRef.current?onResizeRef.current(newSize):didUnmount.current||setSize(newSize)}}))}),resizeObserverRef.current.instance.observe(element,{box:opts.box}),function(){resizeObserverRef.current&&resizeObserverRef.current.instance.unobserve(element)}}),[opts.box,round]),opts.ref);return(0,react.useMemo)((function(){return{ref:refCallback,width:size.width,height:size.height}}),[refCallback,size.width,size.height])}var ZoomElementWrapper=dist.I4.div((({scale=1,elementHeight})=>({height:elementHeight||"auto",transformOrigin:"top left",transform:`scale(${1/scale})`})));var Zoom={Element:function ZoomElement({scale,children}){let componentWrapperRef=(0,react.useRef)(null),[elementHeight,setElementHeight]=(0,react.useState)(0),onResize=(0,react.useCallback)((({height})=>{height&&setElementHeight(height/scale)}),[scale]);return(0,react.useEffect)((()=>{componentWrapperRef.current&&setElementHeight(componentWrapperRef.current.getBoundingClientRect().height)}),[scale]),useResizeObserver({ref:componentWrapperRef,onResize}),react.createElement(ZoomElementWrapper,{scale,elementHeight},react.createElement("div",{ref:componentWrapperRef,className:"innerZoomElementWrapper"},children))},IFrame:class extends react.Component{constructor(){super(...arguments),this.iframe=null}componentDidMount(){let{iFrameRef}=this.props;this.iframe=iFrameRef.current}shouldComponentUpdate(nextProps){let{scale,active}=this.props;return scale!==nextProps.scale&&this.setIframeInnerZoom(nextProps.scale),active!==nextProps.active&&this.iframe.setAttribute("data-is-storybook",nextProps.active?"true":"false"),nextProps.children.props.src!==this.props.children.props.src}setIframeInnerZoom(scale){try{Object.assign(this.iframe.contentDocument.body.style,{width:100*scale+"%",height:100*scale+"%",transform:`scale(${1/scale})`,transformOrigin:"top left"})}catch{this.setIframeZoom(scale)}}setIframeZoom(scale){Object.assign(this.iframe.style,{width:100*scale+"%",height:100*scale+"%",transform:`scale(${1/scale})`,transformOrigin:"top left"})}render(){let{children}=this.props;return react.createElement(react.Fragment,null,children)}}},{document:document2}=global_dist.global,ErrorName=dist.I4.strong((({theme})=>({color:theme.color.orange}))),ErrorImportant=dist.I4.strong((({theme})=>({color:theme.color.ancillary,textDecoration:"underline"}))),ErrorDetail=dist.I4.em((({theme})=>({color:theme.textMutedColor}))),firstLineRegex=/(Error): (.*)\n/,linesRegexChromium=/at (?:(.*) )?\(?(.+)\)?/,linesRegexFirefox=/([^@]+)?(?:\/<)?@(.+)?/,linesRegexSafari=/([^@]+)?@(.+)?/,ErrorFormatter=({error})=>{if(!error)return react.createElement(react.Fragment,null,"This error has no stack or message");if(!error.stack)return react.createElement(react.Fragment,null,error.message||"This error has no stack or message");let input=error.stack.toString();input&&error.message&&!input.includes(error.message)&&(input=`Error: ${error.message}\n\n${input}`);let match=input.match(firstLineRegex);if(!match)return react.createElement(react.Fragment,null,input);let[,type,name]=match,rawLines=input.split(/\n/).slice(1),[,...lines]=rawLines.map((line=>{let result=line.match(linesRegexChromium)||line.match(linesRegexFirefox)||line.match(linesRegexSafari);return result?{name:(result[1]||"").replace("/<",""),location:result[2].replace(document2.location.origin,"")}:null})).filter(Boolean);return react.createElement(react.Fragment,null,react.createElement("span",null,type),": ",react.createElement(ErrorName,null,name),react.createElement("br",null),lines.map(((l,i)=>l.name?react.createElement(react.Fragment,{key:i},"  ","at ",react.createElement(ErrorImportant,null,l.name)," (",react.createElement(ErrorDetail,null,l.location),")",react.createElement("br",null)):react.createElement(react.Fragment,{key:i},"  ","at ",react.createElement(ErrorDetail,null,l.location),react.createElement("br",null)))))},Button=(0,react.forwardRef)((({asChild=!1,animation="none",size="small",variant="outline",padding="medium",disabled=!1,active=!1,onClick,...props},ref)=>{let Comp2="button";props.isLink&&(Comp2="a"),asChild&&(Comp2=react_slot_dist.DX);let localVariant=variant,localSize=size,[isAnimating,setIsAnimating]=(0,react.useState)(!1);if((0,react.useEffect)((()=>{let timer=setTimeout((()=>{isAnimating&&setIsAnimating(!1)}),1e3);return()=>clearTimeout(timer)}),[isAnimating]),props.primary&&(localVariant="solid",localSize="medium"),(props.secondary||props.tertiary||props.gray||props.outline||props.inForm)&&(localVariant="outline",localSize="medium"),props.small||props.isLink||props.primary||props.secondary||props.tertiary||props.gray||props.outline||props.inForm||props.containsIcon){let buttonContent=react.Children.toArray(props.children).filter((e=>"string"==typeof e&&""!==e));(0,client_logger_dist.CI)(`Use of deprecated props in the button ${buttonContent.length>0?`"${buttonContent.join(" ")}"`:"component"} detected, see the migration notes at https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#new-ui-and-props-for-button-and-iconbutton-components`)}return react.createElement(StyledButton,{as:Comp2,ref,variant:localVariant,size:localSize,padding,disabled,active,animating:isAnimating,animation,onClick:event=>{onClick&&onClick(event),"none"!==animation&&setIsAnimating(!0)},...props})}));Button.displayName="Button";var StyledButton=(0,dist.I4)("button",{shouldForwardProp:prop=>(0,dist.EG)(prop)})((({theme,variant,size,disabled,active,animating,animation,padding})=>({border:0,cursor:disabled?"not-allowed":"pointer",display:"inline-flex",gap:"6px",alignItems:"center",justifyContent:"center",overflow:"hidden",padding:"small"===padding&&"small"===size?"0 7px":"small"===padding&&"medium"===size?"0 9px":"small"===size?"0 10px":"medium"===size?"0 12px":0,height:"small"===size?"28px":"32px",position:"relative",textAlign:"center",textDecoration:"none",transitionProperty:"background, box-shadow",transitionDuration:"150ms",transitionTimingFunction:"ease-out",verticalAlign:"top",whiteSpace:"nowrap",userSelect:"none",opacity:disabled?.5:1,margin:0,fontSize:`${theme.typography.size.s1}px`,fontWeight:theme.typography.weight.bold,lineHeight:"1",background:"solid"===variant?theme.color.secondary:"outline"===variant?theme.button.background:"ghost"===variant&&active?theme.background.hoverable:"transparent",color:"solid"===variant?theme.color.lightest:"outline"===variant?theme.input.color:"ghost"===variant&&active?theme.color.secondary:"ghost"===variant?theme.color.mediumdark:theme.input.color,boxShadow:"outline"===variant?`${theme.button.border} 0 0 0 1px inset`:"none",borderRadius:theme.input.borderRadius,flexShrink:0,"&:hover":{color:"ghost"===variant?theme.color.secondary:null,background:(()=>{let bgColor=theme.color.secondary;return"solid"===variant&&(bgColor=theme.color.secondary),"outline"===variant&&(bgColor=theme.button.background),"ghost"===variant?curriedTransparentize$1(.86,theme.color.secondary):"light"===theme.base?curriedDarken$1(.02,bgColor):curriedLighten$1(.03,bgColor)})()},"&:active":{color:"ghost"===variant?theme.color.secondary:null,background:(()=>{let bgColor=theme.color.secondary;return"solid"===variant&&(bgColor=theme.color.secondary),"outline"===variant&&(bgColor=theme.button.background),"ghost"===variant?theme.background.hoverable:"light"===theme.base?curriedDarken$1(.02,bgColor):curriedLighten$1(.03,bgColor)})()},"&:focus":{boxShadow:`${rgba(theme.color.secondary,1)} 0 0 0 1px inset`,outline:"none"},"> svg":{animation:animating&&"none"!==animation?`${theme.animation[animation]} 1000ms ease-out`:""}}))),IconButton=(0,react.forwardRef)((({padding="small",variant="ghost",...props},ref)=>react.createElement(Button,{padding,variant,ref,...props})));IconButton.displayName="IconButton";var Wrapper=dist.I4.label((({theme})=>({display:"flex",borderBottom:`1px solid ${theme.appBorderColor}`,margin:"0 15px",padding:"8px 0","&:last-child":{marginBottom:"3rem"}}))),Label=dist.I4.span((({theme})=>({minWidth:100,fontWeight:theme.typography.weight.bold,marginRight:15,display:"flex",justifyContent:"flex-start",alignItems:"center",lineHeight:"16px"}))),Field=({label,children,...props})=>react.createElement(Wrapper,{...props},label?react.createElement(Label,null,react.createElement("span",null,label)):null,children);Field.defaultProps={label:void 0};var use_isomorphic_layout_effect_browser_esm_default=react.useLayoutEffect,updateRef=function(ref,value){"function"!=typeof ref?ref.current=value:ref(value)},use_composed_ref_esm_default=function(libRef,userRef){var prevUserRef=(0,react.useRef)();return(0,react.useCallback)((function(instance){libRef.current=instance,prevUserRef.current&&updateRef(prevUserRef.current,null),prevUserRef.current=userRef,userRef&&updateRef(userRef,instance)}),[userRef])},HIDDEN_TEXTAREA_STYLE={"min-height":"0","max-height":"none",height:"0",visibility:"hidden",overflow:"hidden",position:"absolute","z-index":"-1000",top:"0",right:"0"},forceHiddenStyles$1=function(node){Object.keys(HIDDEN_TEXTAREA_STYLE).forEach((function(key){node.style.setProperty(key,HIDDEN_TEXTAREA_STYLE[key],"important")}))},hiddenTextarea=null,getHeight=function(node,sizingData){var height=node.scrollHeight;return"border-box"===sizingData.sizingStyle.boxSizing?height+sizingData.borderSize:height-sizingData.paddingSize};var noop=function(){},SIZING_STYLE=["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth","boxSizing","fontFamily","fontSize","fontStyle","fontWeight","letterSpacing","lineHeight","paddingBottom","paddingLeft","paddingRight","paddingTop","tabSize","textIndent","textRendering","textTransform","width","wordBreak"],isIE=!!document.documentElement.currentStyle,getSizingData$1=function(node){var style=window.getComputedStyle(node);if(null===style)return null;var obj,sizingStyle=(obj=style,SIZING_STYLE.reduce((function(acc,prop){return acc[prop]=obj[prop],acc}),{})),boxSizing=sizingStyle.boxSizing;return""===boxSizing?null:(isIE&&"border-box"===boxSizing&&(sizingStyle.width=parseFloat(sizingStyle.width)+parseFloat(sizingStyle.borderRightWidth)+parseFloat(sizingStyle.borderLeftWidth)+parseFloat(sizingStyle.paddingRight)+parseFloat(sizingStyle.paddingLeft)+"px"),{sizingStyle,paddingSize:parseFloat(sizingStyle.paddingBottom)+parseFloat(sizingStyle.paddingTop),borderSize:parseFloat(sizingStyle.borderBottomWidth)+parseFloat(sizingStyle.borderTopWidth)})};function useListener(target,type,listener){var value,ref,latestListener=(value=listener,ref=react.useRef(value),use_isomorphic_layout_effect_browser_esm_default((function(){ref.current=value})),ref);react.useLayoutEffect((function(){var handler=function(ev){return latestListener.current(ev)};if(target)return target.addEventListener(type,handler),function(){return target.removeEventListener(type,handler)}}),[])}var _excluded=["cacheMeasurements","maxRows","minRows","onChange","onHeightChange"],index2=react.forwardRef((function(_ref,userRef){var cacheMeasurements=_ref.cacheMeasurements,maxRows=_ref.maxRows,minRows=_ref.minRows,_ref$onChange=_ref.onChange,onChange=void 0===_ref$onChange?noop:_ref$onChange,_ref$onHeightChange=_ref.onHeightChange,onHeightChange=void 0===_ref$onHeightChange?noop:_ref$onHeightChange,props=(0,chunk_FD4M6EBV.i)(_ref,_excluded),isControlled=void 0!==props.value,libRef=react.useRef(null),ref=use_composed_ref_esm_default(libRef,userRef),heightRef=react.useRef(0),measurementsCacheRef=react.useRef(),resizeTextarea=function(){var node=libRef.current,nodeSizingData=cacheMeasurements&&measurementsCacheRef.current?measurementsCacheRef.current:getSizingData$1(node);if(nodeSizingData){measurementsCacheRef.current=nodeSizingData;var _calculateNodeHeight=function calculateNodeHeight(sizingData,value,minRows,maxRows){void 0===minRows&&(minRows=1),void 0===maxRows&&(maxRows=1/0),hiddenTextarea||((hiddenTextarea=document.createElement("textarea")).setAttribute("tabindex","-1"),hiddenTextarea.setAttribute("aria-hidden","true"),forceHiddenStyles$1(hiddenTextarea)),null===hiddenTextarea.parentNode&&document.body.appendChild(hiddenTextarea);var paddingSize=sizingData.paddingSize,borderSize=sizingData.borderSize,sizingStyle=sizingData.sizingStyle,boxSizing=sizingStyle.boxSizing;Object.keys(sizingStyle).forEach((function(_key){var key=_key;hiddenTextarea.style[key]=sizingStyle[key]})),forceHiddenStyles$1(hiddenTextarea),hiddenTextarea.value=value;var height=getHeight(hiddenTextarea,sizingData);hiddenTextarea.value=value,height=getHeight(hiddenTextarea,sizingData),hiddenTextarea.value="x";var rowHeight=hiddenTextarea.scrollHeight-paddingSize,minHeight=rowHeight*minRows;"border-box"===boxSizing&&(minHeight=minHeight+paddingSize+borderSize),height=Math.max(minHeight,height);var maxHeight=rowHeight*maxRows;return"border-box"===boxSizing&&(maxHeight=maxHeight+paddingSize+borderSize),[height=Math.min(maxHeight,height),rowHeight]}(nodeSizingData,node.value||node.placeholder||"x",minRows,maxRows),height=_calculateNodeHeight[0],rowHeight=_calculateNodeHeight[1];heightRef.current!==height&&(heightRef.current=height,node.style.setProperty("height",height+"px","important"),onHeightChange(height,{rowHeight}))}};return react.useLayoutEffect(resizeTextarea),useListener(window,"resize",resizeTextarea),function(listener){useListener(document.fonts,"loadingdone",listener)}(resizeTextarea),react.createElement("textarea",(0,chunk_FD4M6EBV.r)({},props,{onChange:function(event){isControlled||resizeTextarea(),onChange(event)},ref}))})),styleResets={appearance:"none",border:"0 none",boxSizing:"inherit",display:" block",margin:" 0",background:"transparent",padding:0,fontSize:"inherit",position:"relative"},styles=({theme})=>({...styleResets,transition:"box-shadow 200ms ease-out, opacity 200ms ease-out",color:theme.input.color||"inherit",background:theme.input.background,boxShadow:`${theme.input.border} 0 0 0 1px inset`,borderRadius:theme.input.borderRadius,fontSize:theme.typography.size.s2-1,lineHeight:"20px",padding:"6px 10px",boxSizing:"border-box",height:32,'&[type="file"]':{height:"auto"},"&:focus":{boxShadow:`${theme.color.secondary} 0 0 0 1px inset`,outline:"none"},"&[disabled]":{cursor:"not-allowed",opacity:.5},"&:-webkit-autofill":{WebkitBoxShadow:`0 0 0 3em ${theme.color.lightest} inset`},"&::placeholder":{color:theme.textMutedColor,opacity:1}}),sizes=({size})=>{switch(size){case"100%":return{width:"100%"};case"flex":return{flex:1};default:return{display:"inline"}}},alignment=({align})=>{switch(align){case"end":return{textAlign:"right"};case"center":return{textAlign:"center"};default:return{textAlign:"left"}}},validation=({valid,theme})=>{switch(valid){case"valid":return{boxShadow:`${theme.color.positive} 0 0 0 1px inset !important`};case"error":return{boxShadow:`${theme.color.negative} 0 0 0 1px inset !important`};case"warn":return{boxShadow:`${theme.color.warning} 0 0 0 1px inset`};default:return{}}},Input=Object.assign((0,dist.I4)((0,react.forwardRef)((function({size,valid,align,...props},ref){return react.createElement("input",{...props,ref})})))(styles,sizes,alignment,validation,{minHeight:32}),{displayName:"Input"}),Select=Object.assign((0,dist.I4)((0,react.forwardRef)((function({size,valid,align,...props},ref){return react.createElement("select",{...props,ref})})))(styles,sizes,validation,{height:32,userSelect:"none",paddingRight:20,appearance:"menulist"}),{displayName:"Select"}),Textarea=Object.assign((0,dist.I4)((0,react.forwardRef)((function({size,valid,align,...props},ref){return react.createElement(index2,{...props,ref})})))(styles,sizes,alignment,validation,(({height=400})=>({overflow:"visible",maxHeight:height}))),{displayName:"Textarea"}),Form=Object.assign(dist.I4.form({boxSizing:"border-box",width:"100%"}),{Field,Input,Select,Textarea,Button}),LazyWithTooltip=(0,react.lazy)((()=>__webpack_require__.e(2671).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/components/dist/WithTooltip-Y7J54OF7.mjs")).then((mod=>({default:mod.WithTooltip}))))),WithTooltip=props=>react.createElement(react.Suspense,{fallback:react.createElement("div",null)},react.createElement(LazyWithTooltip,{...props})),LazyWithTooltipPure=(0,react.lazy)((()=>__webpack_require__.e(2671).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@storybook/components/dist/WithTooltip-Y7J54OF7.mjs")).then((mod=>({default:mod.WithTooltipPure}))))),WithTooltipPure=props=>react.createElement(react.Suspense,{fallback:react.createElement("div",null)},react.createElement(LazyWithTooltipPure,{...props})),Note=(dist.I4.div((({theme})=>({fontWeight:theme.typography.weight.bold}))),dist.I4.span(),dist.I4.div((({theme})=>({marginTop:8,textAlign:"center","> *":{margin:"0 8px",fontWeight:theme.typography.weight.bold}}))),dist.I4.div((({theme})=>({color:theme.color.defaultText,lineHeight:"18px"}))),dist.I4.div({padding:15,width:280,boxSizing:"border-box"}),dist.I4.div((({theme})=>({padding:"2px 6px",lineHeight:"16px",fontSize:10,fontWeight:theme.typography.weight.bold,color:theme.color.lightest,boxShadow:"0 0 5px 0 rgba(0, 0, 0, 0.3)",borderRadius:4,whiteSpace:"nowrap",pointerEvents:"none",zIndex:-1,background:"light"===theme.base?"rgba(60, 60, 60, 0.9)":"rgba(0, 0, 0, 0.95)",margin:6})))),TooltipNote=({note,...props})=>react.createElement(Note,{...props},note),Title3=(0,dist.I4)((({active,loading,disabled,...rest})=>react.createElement("span",{...rest})))((({theme})=>({color:theme.color.defaultText,fontWeight:theme.typography.weight.regular})),(({active,theme})=>active?{color:theme.color.secondary,fontWeight:theme.typography.weight.bold}:{}),(({loading,theme})=>loading?{display:"inline-block",flex:"none",...theme.animation.inlineGlow}:{}),(({disabled,theme})=>disabled?{color:curriedTransparentize$1(.7,theme.color.defaultText)}:{})),Right=dist.I4.span({display:"flex","& svg":{height:12,width:12,margin:"3px 0",verticalAlign:"top"},"& path":{fill:"inherit"}}),Center=dist.I4.span({flex:1,textAlign:"left",display:"flex",flexDirection:"column"},(({isIndented})=>isIndented?{marginLeft:24}:{})),CenterText=dist.I4.span((({theme})=>({fontSize:"11px",lineHeight:"14px"})),(({active,theme})=>active?{color:theme.color.secondary}:{}),(({theme,disabled})=>disabled?{color:theme.textMutedColor}:{})),Left=dist.I4.span((({active,theme})=>active?{color:theme.color.secondary}:{}),(()=>({display:"flex",maxWidth:14}))),Item=dist.I4.a((({theme})=>({fontSize:theme.typography.size.s1,transition:"all 150ms ease-out",color:theme.color.dark,textDecoration:"none",cursor:"pointer",justifyContent:"space-between",lineHeight:"18px",padding:"7px 10px",display:"flex",alignItems:"center","& > * + *":{paddingLeft:10},"&:hover":{background:theme.background.hoverable},"&:hover svg":{opacity:1}})),(({disabled})=>disabled?{cursor:"not-allowed"}:{})),getItemProps=memoizerific(100)(((onClick,href,LinkWrapper)=>{let result={};return onClick&&Object.assign(result,{onClick}),href&&Object.assign(result,{href}),LinkWrapper&&href&&Object.assign(result,{to:href,as:LinkWrapper}),result})),ListItem=({loading,title,center,right,icon,active,disabled,isIndented,href,onClick,LinkWrapper,...rest})=>{let itemProps=getItemProps(onClick,href,LinkWrapper),commonProps={active,disabled};return react.createElement(Item,{...commonProps,...rest,...itemProps},icon&&react.createElement(Left,{...commonProps},icon),title||center?react.createElement(Center,{isIndented:!icon&&isIndented},title&&react.createElement(Title3,{...commonProps,loading},title),center&&react.createElement(CenterText,{...commonProps},center)):null,right&&react.createElement(Right,{...commonProps},right))};ListItem.defaultProps={loading:!1,title:react.createElement("span",null,"Loading state"),center:null,right:null,active:!1,disabled:!1,href:null,LinkWrapper:null,onClick:null};var ListItem_default=ListItem,List=dist.I4.div({minWidth:180,overflow:"hidden",overflowY:"auto",maxHeight:496},(({theme})=>({borderRadius:theme.appBorderRadius}))),Item2=props=>{let{LinkWrapper,onClick:onClickFromProps,id,isIndented,...rest}=props,{title,href,active}=rest,onClick=(0,react.useCallback)((event=>{onClickFromProps(event,rest)}),[onClickFromProps]),hasOnClick=!!onClickFromProps;return react.createElement(ListItem_default,{title,active,href,id:`list-item-${id}`,LinkWrapper,isIndented,...rest,...hasOnClick?{onClick}:{}})},TooltipLinkList=({links,LinkWrapper})=>{let hasIcon=links.some((link=>link.icon));return react.createElement(List,null,links.map((({isGatsby,...p})=>react.createElement(Item2,{key:p.id,LinkWrapper:isGatsby?LinkWrapper:null,isIndented:hasIcon,...p}))))};TooltipLinkList.defaultProps={LinkWrapper:ListItem_default.defaultProps.LinkWrapper};var ButtonOrLink=(0,react.forwardRef)((function ForwardRefFunction({children,...rest},ref){let o={props:rest,ref};if("string"==typeof o.props.href)return react.createElement("a",{ref:o.ref,...o.props},children);if((obj=>"string"!=typeof obj.props.href)(o))return react.createElement("button",{ref:o.ref,type:"button",...o.props},children);throw new Error("invalid props")}));ButtonOrLink.displayName="ButtonOrLink";var TabButton=(0,dist.I4)(ButtonOrLink,{shouldForwardProp:dist.EG})({whiteSpace:"normal",display:"inline-flex",overflow:"hidden",verticalAlign:"top",justifyContent:"center",alignItems:"center",textAlign:"center",textDecoration:"none","&:empty":{display:"none"},"&[hidden]":{display:"none"}},(({theme})=>({padding:"0 15px",transition:"color 0.2s linear, border-bottom-color 0.2s linear",height:40,lineHeight:"12px",cursor:"pointer",background:"transparent",border:"0 solid transparent",borderTop:"3px solid transparent",borderBottom:"3px solid transparent",fontWeight:"bold",fontSize:13,"&:focus":{outline:"0 none",borderBottomColor:theme.color.secondary}})),(({active,textColor,theme})=>active?{color:textColor||theme.barSelectedColor,borderBottomColor:theme.barSelectedColor}:{color:textColor||theme.barTextColor,borderBottomColor:"transparent"}));TabButton.displayName="TabButton";dist.I4.div((({theme})=>({width:14,height:14,backgroundColor:theme.appBorderColor,animation:`${theme.animation.glow} 1.5s ease-in-out infinite`}))),dist.I4.div((()=>({marginTop:6,padding:7,height:28})));var Side=dist.I4.div({display:"flex",whiteSpace:"nowrap",flexBasis:"auto",marginLeft:3,marginRight:3},(({scrollable})=>scrollable?{flexShrink:0}:{}),(({left})=>left?{"& > *":{marginLeft:4}}:{}),(({right})=>right?{marginLeft:30,"& > *":{marginRight:4}}:{}));Side.displayName="Side";var Bar=(0,dist.I4)((({children,className,scrollable})=>scrollable?react.createElement(chunk_D3EWQ7UP.FK,{vertical:!1,className},children):react.createElement("div",{className},children)))((({theme,scrollable=!0})=>({color:theme.barTextColor,width:"100%",height:40,flexShrink:0,overflow:scrollable?"auto":"hidden",overflowY:"hidden"})),(({theme,border=!1})=>border?{boxShadow:`${theme.appBorderColor}  0 -1px 0 0 inset`,background:theme.barBg}:{}));Bar.displayName="Bar";var BarInner=dist.I4.div((({bgColor})=>({display:"flex",justifyContent:"space-between",position:"relative",flexWrap:"nowrap",flexShrink:0,height:40,backgroundColor:bgColor||""}))),FlexBar=({children,backgroundColor,...rest})=>{let[left,right]=react.Children.toArray(children);return react.createElement(Bar,{...rest},react.createElement(BarInner,{bgColor:backgroundColor},react.createElement(Side,{scrollable:rest.scrollable,left:!0},left),right?react.createElement(Side,{right:!0},right):null))};FlexBar.displayName="FlexBar";var VisuallyHidden=dist.I4.div((({active})=>active?{display:"block"}:{display:"none"})),childrenToList=children=>react.Children.toArray(children).map((({props:{title,id,color:color2,children:childrenOfChild}})=>{let content=Array.isArray(childrenOfChild)?childrenOfChild[0]:childrenOfChild;return{title,id,...color2?{color:color2}:{},render:"function"==typeof content?content:({active})=>react.createElement(VisuallyHidden,{active,role:"tabpanel"},content)}})),dist_CollapseIcon=dist.I4.span((({theme,isActive})=>({display:"inline-block",width:0,height:0,marginLeft:8,color:isActive?theme.color.secondary:theme.color.mediumdark,borderRight:"3px solid transparent",borderLeft:"3px solid transparent",borderTop:"3px solid",transition:"transform .1s ease-out"}))),AddonButton=(0,dist.I4)(TabButton)((({active,theme,preActive})=>`\n    color: ${preActive||active?theme.color.secondary:theme.color.mediumdark};\n    &:hover {\n      color: ${theme.color.secondary};\n      .addon-collapsible-icon {\n        color: ${theme.color.secondary};\n      }\n    }\n  `));var Wrapper2=dist.I4.div((({theme,bordered})=>bordered?{backgroundClip:"padding-box",border:`1px solid ${theme.appBorderColor}`,borderRadius:theme.appBorderRadius,overflow:"hidden",boxSizing:"border-box"}:{}),(({absolute})=>absolute?{width:"100%",height:"100%",boxSizing:"border-box",display:"flex",flexDirection:"column"}:{display:"block"})),TabBar=dist.I4.div({overflow:"hidden","&:first-of-type":{marginLeft:-3},whiteSpace:"nowrap",flexGrow:1});TabBar.displayName="TabBar";var Content=dist.I4.div({display:"block",position:"relative"},(({theme})=>({fontSize:theme.typography.size.s2-1,background:theme.background.content})),(({bordered,theme})=>bordered?{borderRadius:`0 0 ${theme.appBorderRadius-1}px ${theme.appBorderRadius-1}px`}:{}),(({absolute,bordered})=>absolute?{height:`calc(100% - ${bordered?42:40}px)`,position:"absolute",left:0+(bordered?1:0),right:0+(bordered?1:0),bottom:0+(bordered?1:0),top:40+(bordered?1:0),overflow:"auto","& > *:first-child/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */":{position:"absolute",left:0+(bordered?1:0),right:0+(bordered?1:0),bottom:0+(bordered?1:0),top:0+(bordered?1:0),height:`calc(100% - ${bordered?2:0}px)`,overflow:"auto"}}:{})),Tabs=(0,react.memo)((({children,selected,actions,absolute,bordered,tools,backgroundColor,id:htmlId,menuName})=>{let idList=childrenToList(children).map((i=>i.id)).join(","),list=(0,react.useMemo)((()=>childrenToList(children).map(((i,index3)=>({...i,active:selected?i.id===selected:0===index3})))),[selected,idList]),{visibleList,tabBarRef,tabRefs,AddonTab}=function useList(list){let tabBarRef=(0,react.useRef)(),addonsRef=(0,react.useRef)(),tabRefs=(0,react.useRef)(new Map),{width:tabBarWidth=1}=useResizeObserver({ref:tabBarRef}),[visibleList,setVisibleList]=(0,react.useState)(list),[invisibleList,setInvisibleList]=(0,react.useState)([]),previousList=(0,react.useRef)(list),AddonTab=(0,react.useCallback)((({menuName,actions})=>{let isAddonsActive=invisibleList.some((({active})=>active)),[isTooltipVisible,setTooltipVisible]=(0,react.useState)(!1);return react.createElement(react.Fragment,null,react.createElement(chunk_T3L4SIIA.v,{interactive:!0,visible:isTooltipVisible,onVisibleChange:setTooltipVisible,placement:"bottom",delayHide:100,tooltip:react.createElement(TooltipLinkList,{links:invisibleList.map((({title,id,color:color2,active})=>({id,title,color:color2,active,onClick:e=>{e.preventDefault(),actions.onSelect(id)}})))})},react.createElement(AddonButton,{ref:addonsRef,active:isAddonsActive,preActive:isTooltipVisible,style:{visibility:invisibleList.length?"visible":"hidden"},"aria-hidden":!invisibleList.length,className:"tabbutton",type:"button",role:"tab"},menuName,react.createElement(dist_CollapseIcon,{className:"addon-collapsible-icon",isActive:isAddonsActive||isTooltipVisible}))),invisibleList.map((({title,id,color:color2},index3)=>{let indexId=`index-${index3}`;return react.createElement(TabButton,{id:`tabbutton-${(0,csf_dist.aj)(id)??indexId}`,style:{visibility:"hidden"},"aria-hidden":!0,tabIndex:-1,ref:ref=>{tabRefs.current.set(id,ref)},className:"tabbutton",type:"button",key:id,textColor:color2,role:"tab"},title)})))}),[invisibleList]),setTabLists=(0,react.useCallback)((()=>{if(!tabBarRef.current||!addonsRef.current)return;let{x,width}=tabBarRef.current.getBoundingClientRect(),{width:widthAddonsTab}=addonsRef.current.getBoundingClientRect(),rightBorder=invisibleList.length?x+width-widthAddonsTab:x+width,newVisibleList=[],widthSum=0,newInvisibleList=list.filter((item=>{let{id}=item,tabButton=tabRefs.current.get(id),{width:tabWidth=0}=tabButton?.getBoundingClientRect()||{},crossBorder=x+widthSum+tabWidth>rightBorder;return(!crossBorder||!tabButton)&&newVisibleList.push(item),widthSum+=tabWidth,crossBorder}));(newVisibleList.length!==visibleList.length||previousList.current!==list)&&(setVisibleList(newVisibleList),setInvisibleList(newInvisibleList),previousList.current=list)}),[invisibleList.length,list,visibleList]);return(0,react.useLayoutEffect)(setTabLists,[setTabLists,tabBarWidth]),{tabRefs,addonsRef,tabBarRef,visibleList,invisibleList,AddonTab}}(list);return list.length?react.createElement(Wrapper2,{absolute,bordered,id:htmlId},react.createElement(FlexBar,{scrollable:!1,border:!0,backgroundColor},react.createElement(TabBar,{style:{whiteSpace:"normal"},ref:tabBarRef,role:"tablist"},visibleList.map((({title,id,active,color:color2},index3)=>{let indexId=`index-${index3}`;return react.createElement(TabButton,{id:`tabbutton-${(0,csf_dist.aj)(id)??indexId}`,ref:ref=>{tabRefs.current.set(id,ref)},className:"tabbutton "+(active?"tabbutton-active":""),type:"button",key:id,active,textColor:color2,onClick:e=>{e.preventDefault(),actions.onSelect(id)},role:"tab"},"function"==typeof title?react.createElement("title",null):title)})),react.createElement(AddonTab,{menuName,actions})),tools),react.createElement(Content,{id:"panel-tab-content",bordered,absolute},list.map((({id,active,render})=>react.createElement(render,{key:id,active},null))))):react.createElement(Placeholder,null,react.createElement(react.Fragment,{key:"title"},"Nothing found"))}));Tabs.displayName="Tabs",Tabs.defaultProps={id:null,children:null,tools:null,selected:null,absolute:!1,bordered:!1,menuName:"Tabs"};var TabsState=class extends react.Component{constructor(props){super(props),this.handlers={onSelect:id=>this.setState({selected:id})},this.state={selected:props.initial}}render(){let{bordered=!1,absolute=!1,children,backgroundColor,menuName}=this.props,{selected}=this.state;return react.createElement(Tabs,{bordered,absolute,selected,backgroundColor,menuName,actions:this.handlers},children)}};TabsState.defaultProps={children:[],initial:null,absolute:!1,bordered:!1,backgroundColor:"",menuName:void 0};var Separator=dist.I4.span((({theme})=>({width:1,height:20,background:theme.appBorderColor,marginLeft:2,marginRight:2})),(({force})=>force?{}:{"& + &":{display:"none"}}));Separator.displayName="Separator";var Svg=dist.I4.svg`
  display: inline-block;
  shape-rendering: inherit;
  vertical-align: middle;
  fill: currentColor;
  path {
    fill: currentColor;
  }
`,icons=((0,react.memo)((function({icons:keys=Object.keys(icons)}){return react.createElement(Svg,{viewBox:"0 0 14 14",style:{position:"absolute",width:0,height:0},"data-chromatic":"ignore"},keys.map((key=>react.createElement("symbol",{id:`icon--${key}`,key},icons[key]))))})),{user:"UserIcon",useralt:"UserAltIcon",useradd:"UserAddIcon",users:"UsersIcon",profile:"ProfileIcon",facehappy:"FaceHappyIcon",faceneutral:"FaceNeutralIcon",facesad:"FaceSadIcon",accessibility:"AccessibilityIcon",accessibilityalt:"AccessibilityAltIcon",arrowup:"ChevronUpIcon",arrowdown:"ChevronDownIcon",arrowleft:"ChevronLeftIcon",arrowright:"ChevronRightIcon",arrowupalt:"ArrowUpIcon",arrowdownalt:"ArrowDownIcon",arrowleftalt:"ArrowLeftIcon",arrowrightalt:"ArrowRightIcon",expandalt:"ExpandAltIcon",collapse:"CollapseIcon",expand:"ExpandIcon",unfold:"UnfoldIcon",transfer:"TransferIcon",redirect:"RedirectIcon",undo:"UndoIcon",reply:"ReplyIcon",sync:"SyncIcon",upload:"UploadIcon",download:"DownloadIcon",back:"BackIcon",proceed:"ProceedIcon",refresh:"RefreshIcon",globe:"GlobeIcon",compass:"CompassIcon",location:"LocationIcon",pin:"PinIcon",time:"TimeIcon",dashboard:"DashboardIcon",timer:"TimerIcon",home:"HomeIcon",admin:"AdminIcon",info:"InfoIcon",question:"QuestionIcon",support:"SupportIcon",alert:"AlertIcon",email:"EmailIcon",phone:"PhoneIcon",link:"LinkIcon",unlink:"LinkBrokenIcon",bell:"BellIcon",rss:"RSSIcon",sharealt:"ShareAltIcon",share:"ShareIcon",circle:"CircleIcon",circlehollow:"CircleHollowIcon",bookmarkhollow:"BookmarkHollowIcon",bookmark:"BookmarkIcon",hearthollow:"HeartHollowIcon",heart:"HeartIcon",starhollow:"StarHollowIcon",star:"StarIcon",certificate:"CertificateIcon",verified:"VerifiedIcon",thumbsup:"ThumbsUpIcon",shield:"ShieldIcon",basket:"BasketIcon",beaker:"BeakerIcon",hourglass:"HourglassIcon",flag:"FlagIcon",cloudhollow:"CloudHollowIcon",edit:"EditIcon",cog:"CogIcon",nut:"NutIcon",wrench:"WrenchIcon",ellipsis:"EllipsisIcon",check:"CheckIcon",form:"FormIcon",batchdeny:"BatchDenyIcon",batchaccept:"BatchAcceptIcon",controls:"ControlsIcon",plus:"PlusIcon",closeAlt:"CloseAltIcon",cross:"CrossIcon",trash:"TrashIcon",pinalt:"PinAltIcon",unpin:"UnpinIcon",add:"AddIcon",subtract:"SubtractIcon",close:"CloseIcon",delete:"DeleteIcon",passed:"PassedIcon",changed:"ChangedIcon",failed:"FailedIcon",clear:"ClearIcon",comment:"CommentIcon",commentadd:"CommentAddIcon",requestchange:"RequestChangeIcon",comments:"CommentsIcon",lock:"LockIcon",unlock:"UnlockIcon",key:"KeyIcon",outbox:"OutboxIcon",credit:"CreditIcon",button:"ButtonIcon",type:"TypeIcon",pointerdefault:"PointerDefaultIcon",pointerhand:"PointerHandIcon",browser:"BrowserIcon",tablet:"TabletIcon",mobile:"MobileIcon",watch:"WatchIcon",sidebar:"SidebarIcon",sidebaralt:"SidebarAltIcon",sidebaralttoggle:"SidebarAltToggleIcon",sidebartoggle:"SidebarToggleIcon",bottombar:"BottomBarIcon",bottombartoggle:"BottomBarToggleIcon",cpu:"CPUIcon",database:"DatabaseIcon",memory:"MemoryIcon",structure:"StructureIcon",box:"BoxIcon",power:"PowerIcon",photo:"PhotoIcon",component:"ComponentIcon",grid:"GridIcon",outline:"OutlineIcon",photodrag:"PhotoDragIcon",search:"SearchIcon",zoom:"ZoomIcon",zoomout:"ZoomOutIcon",zoomreset:"ZoomResetIcon",eye:"EyeIcon",eyeclose:"EyeCloseIcon",lightning:"LightningIcon",lightningoff:"LightningOffIcon",contrast:"ContrastIcon",switchalt:"SwitchAltIcon",mirror:"MirrorIcon",grow:"GrowIcon",paintbrush:"PaintBrushIcon",ruler:"RulerIcon",stop:"StopIcon",camera:"CameraIcon",video:"VideoIcon",speaker:"SpeakerIcon",play:"PlayIcon",playback:"PlayBackIcon",playnext:"PlayNextIcon",rewind:"RewindIcon",fastforward:"FastForwardIcon",stopalt:"StopAltIcon",sidebyside:"SideBySideIcon",stacked:"StackedIcon",sun:"SunIcon",moon:"MoonIcon",book:"BookIcon",document:"DocumentIcon",copy:"CopyIcon",category:"CategoryIcon",folder:"FolderIcon",print:"PrintIcon",graphline:"GraphLineIcon",calendar:"CalendarIcon",graphbar:"GraphBarIcon",menu:"MenuIcon",menualt:"MenuIcon",filter:"FilterIcon",docchart:"DocChartIcon",doclist:"DocListIcon",markup:"MarkupIcon",bold:"BoldIcon",paperclip:"PaperClipIcon",listordered:"ListOrderedIcon",listunordered:"ListUnorderedIcon",paragraph:"ParagraphIcon",markdown:"MarkdownIcon",repository:"RepoIcon",commit:"CommitIcon",branch:"BranchIcon",pullrequest:"PullRequestIcon",merge:"MergeIcon",apple:"AppleIcon",linux:"LinuxIcon",ubuntu:"UbuntuIcon",windows:"WindowsIcon",storybook:"StorybookIcon",azuredevops:"AzureDevOpsIcon",bitbucket:"BitbucketIcon",chrome:"ChromeIcon",chromatic:"ChromaticIcon",componentdriven:"ComponentDrivenIcon",discord:"DiscordIcon",facebook:"FacebookIcon",figma:"FigmaIcon",gdrive:"GDriveIcon",github:"GithubIcon",gitlab:"GitlabIcon",google:"GoogleIcon",graphql:"GraphqlIcon",medium:"MediumIcon",redux:"ReduxIcon",twitter:"TwitterIcon",youtube:"YoutubeIcon",vscode:"VSCodeIcon"}),rotate360=dist.i7`
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
`,LoaderWrapper=dist.I4.div((({size=32})=>({borderRadius:"50%",cursor:"progress",display:"inline-block",overflow:"hidden",position:"absolute",transition:"all 200ms ease-out",verticalAlign:"top",top:"50%",left:"50%",marginTop:-size/2,marginLeft:-size/2,height:size,width:size,zIndex:4,borderWidth:2,borderStyle:"solid",borderColor:"rgba(97, 97, 97, 0.29)",borderTopColor:"rgb(100,100,100)",animation:`${rotate360} 0.7s linear infinite`,mixBlendMode:"difference"}))),ProgressWrapper=dist.I4.div({position:"absolute",display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",width:"100%",height:"100%"}),ProgressTrack=dist.I4.div((({theme})=>({position:"relative",width:"80%",marginBottom:"0.75rem",maxWidth:300,height:5,borderRadius:5,background:curriedTransparentize$1(.8,theme.color.secondary),overflow:"hidden",cursor:"progress"}))),ProgressBar=dist.I4.div((({theme})=>({position:"absolute",top:0,left:0,height:"100%",background:theme.color.secondary}))),ProgressMessage=dist.I4.div((({theme})=>({minHeight:"2em",fontSize:`${theme.typography.size.s1}px`,color:theme.barTextColor}))),ErrorIcon=(0,dist.I4)(LightningOffIcon)((({theme})=>({width:20,height:20,marginBottom:"0.5rem",color:theme.textMutedColor}))),ellipsis=dist.i7`
  from { content: "..." }
  33% { content: "." }
  66% { content: ".." }
  to { content: "..." }
`,Ellipsis=dist.I4.span({"&::after":{content:"'...'",animation:`${ellipsis} 1s linear infinite`,animationDelay:"1s",display:"inline-block",width:"1em",height:"auto"}}),Loader=({progress,error,size,...props})=>{if(error)return react.createElement(ProgressWrapper,{"aria-label":error.toString(),"aria-live":"polite",role:"status",...props},react.createElement(ErrorIcon,null),react.createElement(ProgressMessage,null,error.message));if(progress){let{value,modules}=progress,{message}=progress;return modules&&(message+=` ${modules.complete} / ${modules.total} modules`),react.createElement(ProgressWrapper,{"aria-label":"Content is loading...","aria-live":"polite","aria-valuemin":0,"aria-valuemax":100,"aria-valuenow":100*value,"aria-valuetext":message,role:"progressbar",...props},react.createElement(ProgressTrack,null,react.createElement(ProgressBar,{style:{width:100*value+"%"}})),react.createElement(ProgressMessage,null,message,value<1&&react.createElement(Ellipsis,{key:message})))}return react.createElement(LoaderWrapper,{"aria-label":"Content is loading...","aria-live":"polite",role:"status",size,...props})};function parseQuery(queryString){let query={},pairs=queryString.split("&");for(let i=0;i<pairs.length;i++){let pair=pairs[i].split("=");query[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]||"")}return query}var getStoryHref=(baseUrl,storyId,additionalParams={})=>{let[url,paramsStr]=baseUrl.split("?"),params=paramsStr?{...parseQuery(paramsStr),...additionalParams,id:storyId}:{...additionalParams,id:storyId};return`${url}?${Object.entries(params).map((item=>`${item[0]}=${item[1]}`)).join("&")}`},components2=(dist.I4.pre`
  line-height: 18px;
  padding: 11px 1rem;
  white-space: pre-wrap;
  background: rgba(0, 0, 0, 0.05);
  color: ${chunk_FX52EUNG.yW.darkest};
  border-radius: 3px;
  margin: 1rem 0;
  width: 100%;
  display: block;
  overflow: hidden;
  font-family: ${chunk_FX52EUNG.Il.fonts.mono};
  font-size: ${chunk_FX52EUNG.Il.size.s2-1}px;
`,components),resetComponents={};Object.keys(components).forEach((key=>{resetComponents[key]=(0,react.forwardRef)(((props,ref)=>(0,react.createElement)(key,{...props,ref})))}))},"./node_modules/@storybook/theming/dist/chunk-FX52EUNG.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Il:()=>typography,Oy:()=>getPreferredColorScheme,P$:()=>__commonJS,RA:()=>light_default,Tp:()=>background,Zj:()=>themes,Zt:()=>lightenColor,f1:()=>__toESM,rC:()=>_extends,sd:()=>mkColor,xH:()=>curriedOpacify$1,yW:()=>color});var _storybook_global__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),_storybook_client_logger__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/client-logger/dist/index.mjs"),__create=Object.create,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__commonJS=(cb,mod)=>function(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports},__toESM=(mod,isNodeMode,target)=>(target=null!=mod?__create(__getProtoOf(mod)):{},((to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to})(!isNodeMode&&mod&&mod.__esModule?target:__defProp(target,"default",{value:mod,enumerable:!0}),mod));function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(o2,p2){return o2.__proto__=p2,o2})(o,p)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(o2){return o2.__proto__||Object.getPrototypeOf(o2)})(o)}function _construct(Parent,args,Class){return(_construct=function _isNativeReflectConstruct(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch{return!1}}()?Reflect.construct.bind():function(Parent2,args2,Class2){var a=[null];a.push.apply(a,args2);var instance=new(Function.bind.apply(Parent2,a));return Class2&&_setPrototypeOf(instance,Class2.prototype),instance}).apply(null,arguments)}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(Class2){if(null===Class2||!function _isNativeFunction(fn){try{return-1!==Function.toString.call(fn).indexOf("[native code]")}catch{return"function"==typeof fn}}(Class2))return Class2;if("function"!=typeof Class2)throw new TypeError("Super expression must either be null or a function");if(typeof _cache<"u"){if(_cache.has(Class2))return _cache.get(Class2);_cache.set(Class2,Wrapper)}function Wrapper(){return _construct(Class2,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class2.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class2)},_wrapNativeSuper(Class)}var ERRORS={1:"Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",2:"Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",3:"Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",4:"Couldn't generate valid rgb string from %s, it returned %s.\n\n",5:"Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",6:"Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",7:"Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",8:"Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",9:"Please provide a number of steps to the modularScale helper.\n\n",10:"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",11:'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',12:'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',13:'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',14:'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',15:'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',16:"You must provide a template to this method.\n\n",17:"You passed an unsupported selector state to this method.\n\n",18:"minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",19:"fromSize and toSize must be provided as stringified numbers with the same units.\n\n",20:"expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",21:"expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",22:"expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",23:"fontFace expects a name of a font-family.\n\n",24:"fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",25:"fontFace expects localFonts to be an array.\n\n",26:"fontFace expects fileFormats to be an array.\n\n",27:"radialGradient requries at least 2 color-stops to properly render.\n\n",28:"Please supply a filename to retinaImage() as the first argument.\n\n",29:"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",30:"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",31:"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",32:"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",33:"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",34:"borderRadius expects a radius value as a string or number as the second argument.\n\n",35:'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',36:"Property must be a string value.\n\n",37:"Syntax Error at %s.\n\n",38:"Formula contains a function that needs parentheses at %s.\n\n",39:"Formula is missing closing parenthesis at %s.\n\n",40:"Formula has too many closing parentheses at %s.\n\n",41:"All values in a formula must have the same unit or be unitless.\n\n",42:"Please provide a number of steps to the modularScale helper.\n\n",43:"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",44:"Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",45:"Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",46:"Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",47:"minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",48:"fromSize and toSize must be provided as stringified numbers with the same units.\n\n",49:"Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",50:"Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",51:"Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",52:"fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",53:"fontFace expects localFonts to be an array.\n\n",54:"fontFace expects fileFormats to be an array.\n\n",55:"fontFace expects a name of a font-family.\n\n",56:"linearGradient requries at least 2 color-stops to properly render.\n\n",57:"radialGradient requries at least 2 color-stops to properly render.\n\n",58:"Please supply a filename to retinaImage() as the first argument.\n\n",59:"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",60:"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",61:"Property must be a string value.\n\n",62:"borderRadius expects a radius value as a string or number as the second argument.\n\n",63:'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',64:"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",65:"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",66:"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",67:"You must provide a template to this method.\n\n",68:"You passed an unsupported selector state to this method.\n\n",69:'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',70:'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',71:'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',72:'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',73:"Please provide a valid CSS variable.\n\n",74:"CSS variable not found and no default was provided.\n\n",75:"important requires a valid style object, got a %s instead.\n\n",76:"fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",77:'remToPx expects a value in "rem" but you provided it in "%s".\n\n',78:'base must be set in "px" or "%" but you set it in "%s".\n'};function format(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var c,a=args[0],b=[];for(c=1;c<args.length;c+=1)b.push(args[c]);return b.forEach((function(d){a=a.replace(/%[a-z]/,d)})),a}var PolishedError=function(_Error){function PolishedError2(code){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];return function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_Error.call(this,format.apply(void 0,[ERRORS[code]].concat(args)))||this)}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(PolishedError2,_Error),PolishedError2}(_wrapNativeSuper(Error));function colorToInt(color2){return Math.round(255*color2)}function convertToInt(red,green,blue){return colorToInt(red)+","+colorToInt(green)+","+colorToInt(blue)}function hslToRgb(hue,saturation,lightness,convert){if(void 0===convert&&(convert=convertToInt),0===saturation)return convert(lightness,lightness,lightness);var huePrime=(hue%360+360)%360/60,chroma=(1-Math.abs(2*lightness-1))*saturation,secondComponent=chroma*(1-Math.abs(huePrime%2-1)),red=0,green=0,blue=0;huePrime>=0&&huePrime<1?(red=chroma,green=secondComponent):huePrime>=1&&huePrime<2?(red=secondComponent,green=chroma):huePrime>=2&&huePrime<3?(green=chroma,blue=secondComponent):huePrime>=3&&huePrime<4?(green=secondComponent,blue=chroma):huePrime>=4&&huePrime<5?(red=secondComponent,blue=chroma):huePrime>=5&&huePrime<6&&(red=chroma,blue=secondComponent);var lightnessModification=lightness-chroma/2;return convert(red+lightnessModification,green+lightnessModification,blue+lightnessModification)}var namedColorMap={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"639",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"};var hexRegex=/^#[a-fA-F0-9]{6}$/,hexRgbaRegex=/^#[a-fA-F0-9]{8}$/,reducedHexRegex=/^#[a-fA-F0-9]{3}$/,reducedRgbaHexRegex=/^#[a-fA-F0-9]{4}$/,rgbRegex=/^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i,rgbaRegex=/^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i,hslRegex=/^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i,hslaRegex=/^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;function parseToRgb(color2){if("string"!=typeof color2)throw new PolishedError(3);var normalizedColor=function nameToHex(color2){if("string"!=typeof color2)return color2;var normalizedColorName=color2.toLowerCase();return namedColorMap[normalizedColorName]?"#"+namedColorMap[normalizedColorName]:color2}(color2);if(normalizedColor.match(hexRegex))return{red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16)};if(normalizedColor.match(hexRgbaRegex)){var alpha=parseFloat((parseInt(""+normalizedColor[7]+normalizedColor[8],16)/255).toFixed(2));return{red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16),alpha}}if(normalizedColor.match(reducedHexRegex))return{red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16)};if(normalizedColor.match(reducedRgbaHexRegex)){var _alpha=parseFloat((parseInt(""+normalizedColor[4]+normalizedColor[4],16)/255).toFixed(2));return{red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16),alpha:_alpha}}var rgbMatched=rgbRegex.exec(normalizedColor);if(rgbMatched)return{red:parseInt(""+rgbMatched[1],10),green:parseInt(""+rgbMatched[2],10),blue:parseInt(""+rgbMatched[3],10)};var rgbaMatched=rgbaRegex.exec(normalizedColor.substring(0,50));if(rgbaMatched)return{red:parseInt(""+rgbaMatched[1],10),green:parseInt(""+rgbaMatched[2],10),blue:parseInt(""+rgbaMatched[3],10),alpha:parseFloat(""+rgbaMatched[4])>1?parseFloat(""+rgbaMatched[4])/100:parseFloat(""+rgbaMatched[4])};var hslMatched=hslRegex.exec(normalizedColor);if(hslMatched){var rgbColorString="rgb("+hslToRgb(parseInt(""+hslMatched[1],10),parseInt(""+hslMatched[2],10)/100,parseInt(""+hslMatched[3],10)/100)+")",hslRgbMatched=rgbRegex.exec(rgbColorString);if(!hslRgbMatched)throw new PolishedError(4,normalizedColor,rgbColorString);return{red:parseInt(""+hslRgbMatched[1],10),green:parseInt(""+hslRgbMatched[2],10),blue:parseInt(""+hslRgbMatched[3],10)}}var hslaMatched=hslaRegex.exec(normalizedColor.substring(0,50));if(hslaMatched){var _rgbColorString="rgb("+hslToRgb(parseInt(""+hslaMatched[1],10),parseInt(""+hslaMatched[2],10)/100,parseInt(""+hslaMatched[3],10)/100)+")",_hslRgbMatched=rgbRegex.exec(_rgbColorString);if(!_hslRgbMatched)throw new PolishedError(4,normalizedColor,_rgbColorString);return{red:parseInt(""+_hslRgbMatched[1],10),green:parseInt(""+_hslRgbMatched[2],10),blue:parseInt(""+_hslRgbMatched[3],10),alpha:parseFloat(""+hslaMatched[4])>1?parseFloat(""+hslaMatched[4])/100:parseFloat(""+hslaMatched[4])}}throw new PolishedError(5)}function parseToHsl(color2){return function rgbToHsl(color2){var red=color2.red/255,green=color2.green/255,blue=color2.blue/255,max=Math.max(red,green,blue),min=Math.min(red,green,blue),lightness=(max+min)/2;if(max===min)return void 0!==color2.alpha?{hue:0,saturation:0,lightness,alpha:color2.alpha}:{hue:0,saturation:0,lightness};var hue,delta=max-min,saturation=lightness>.5?delta/(2-max-min):delta/(max+min);switch(max){case red:hue=(green-blue)/delta+(green<blue?6:0);break;case green:hue=(blue-red)/delta+2;break;default:hue=(red-green)/delta+4}return hue*=60,void 0!==color2.alpha?{hue,saturation,lightness,alpha:color2.alpha}:{hue,saturation,lightness}}(parseToRgb(color2))}var reduceHexValue$1=function(value){return 7===value.length&&value[1]===value[2]&&value[3]===value[4]&&value[5]===value[6]?"#"+value[1]+value[3]+value[5]:value};function numberToHex(value){var hex=value.toString(16);return 1===hex.length?"0"+hex:hex}function colorToHex(color2){return numberToHex(Math.round(255*color2))}function convertToHex(red,green,blue){return reduceHexValue$1("#"+colorToHex(red)+colorToHex(green)+colorToHex(blue))}function hslToHex(hue,saturation,lightness){return hslToRgb(hue,saturation,lightness,convertToHex)}function rgb(value,green,blue){if("number"==typeof value&&"number"==typeof green&&"number"==typeof blue)return reduceHexValue$1("#"+numberToHex(value)+numberToHex(green)+numberToHex(blue));if("object"==typeof value&&void 0===green&&void 0===blue)return reduceHexValue$1("#"+numberToHex(value.red)+numberToHex(value.green)+numberToHex(value.blue));throw new PolishedError(6)}function rgba(firstValue,secondValue,thirdValue,fourthValue){if("string"==typeof firstValue&&"number"==typeof secondValue){var rgbValue=parseToRgb(firstValue);return"rgba("+rgbValue.red+","+rgbValue.green+","+rgbValue.blue+","+secondValue+")"}if("number"==typeof firstValue&&"number"==typeof secondValue&&"number"==typeof thirdValue&&"number"==typeof fourthValue)return fourthValue>=1?rgb(firstValue,secondValue,thirdValue):"rgba("+firstValue+","+secondValue+","+thirdValue+","+fourthValue+")";if("object"==typeof firstValue&&void 0===secondValue&&void 0===thirdValue&&void 0===fourthValue)return firstValue.alpha>=1?rgb(firstValue.red,firstValue.green,firstValue.blue):"rgba("+firstValue.red+","+firstValue.green+","+firstValue.blue+","+firstValue.alpha+")";throw new PolishedError(7)}var isRgb=function(color2){return"number"==typeof color2.red&&"number"==typeof color2.green&&"number"==typeof color2.blue&&("number"!=typeof color2.alpha||typeof color2.alpha>"u")},isRgba=function(color2){return"number"==typeof color2.red&&"number"==typeof color2.green&&"number"==typeof color2.blue&&"number"==typeof color2.alpha},isHsl=function(color2){return"number"==typeof color2.hue&&"number"==typeof color2.saturation&&"number"==typeof color2.lightness&&("number"!=typeof color2.alpha||typeof color2.alpha>"u")},isHsla=function(color2){return"number"==typeof color2.hue&&"number"==typeof color2.saturation&&"number"==typeof color2.lightness&&"number"==typeof color2.alpha};function toColorString(color2){if("object"!=typeof color2)throw new PolishedError(8);if(isRgba(color2))return rgba(color2);if(isRgb(color2))return rgb(color2);if(isHsla(color2))return function hsla(value,saturation,lightness,alpha){if("number"==typeof value&&"number"==typeof saturation&&"number"==typeof lightness&&"number"==typeof alpha)return alpha>=1?hslToHex(value,saturation,lightness):"rgba("+hslToRgb(value,saturation,lightness)+","+alpha+")";if("object"==typeof value&&void 0===saturation&&void 0===lightness&&void 0===alpha)return value.alpha>=1?hslToHex(value.hue,value.saturation,value.lightness):"rgba("+hslToRgb(value.hue,value.saturation,value.lightness)+","+value.alpha+")";throw new PolishedError(2)}(color2);if(isHsl(color2))return function hsl(value,saturation,lightness){if("number"==typeof value&&"number"==typeof saturation&&"number"==typeof lightness)return hslToHex(value,saturation,lightness);if("object"==typeof value&&void 0===saturation&&void 0===lightness)return hslToHex(value.hue,value.saturation,value.lightness);throw new PolishedError(1)}(color2);throw new PolishedError(8)}function curried(f,length,acc){return function(){var combined=acc.concat(Array.prototype.slice.call(arguments));return combined.length>=length?f.apply(this,combined):curried(f,length,combined)}}function curry(f){return curried(f,f.length,[])}function guard(lowerBoundary,upperBoundary,value){return Math.max(lowerBoundary,Math.min(upperBoundary,value))}var curriedDarken$1=curry((function darken(amount,color2){if("transparent"===color2)return color2;var hslColor=parseToHsl(color2);return toColorString(_extends({},hslColor,{lightness:guard(0,1,hslColor.lightness-parseFloat(amount))}))}));var curriedLighten$1=curry((function lighten(amount,color2){if("transparent"===color2)return color2;var hslColor=parseToHsl(color2);return toColorString(_extends({},hslColor,{lightness:guard(0,1,hslColor.lightness+parseFloat(amount))}))}));var curriedOpacify$1=curry((function opacify(amount,color2){if("transparent"===color2)return color2;var parsedColor=parseToRgb(color2);return rgba(_extends({},parsedColor,{alpha:guard(0,1,(100*("number"==typeof parsedColor.alpha?parsedColor.alpha:1)+100*parseFloat(amount))/100)}))}));var curriedTransparentize$1=curry((function transparentize(amount,color2){if("transparent"===color2)return color2;var parsedColor=parseToRgb(color2);return rgba(_extends({},parsedColor,{alpha:guard(0,1,+(100*("number"==typeof parsedColor.alpha?parsedColor.alpha:1)-100*parseFloat(amount)).toFixed(2)/100)}))})),color={primary:"#FF4785",secondary:"#029CFD",tertiary:"#FAFBFC",ancillary:"#22a699",orange:"#FC521F",gold:"#FFAE00",green:"#66BF3C",seafoam:"#37D5D3",purple:"#6F2CAC",ultraviolet:"#2A0481",lightest:"#FFFFFF",lighter:"#F7FAFC",light:"#EEF3F6",mediumlight:"#ECF4F9",medium:"#D9E8F2",mediumdark:"#73828C",dark:"#5C6870",darker:"#454E54",darkest:"#2E3438",border:"hsla(203, 50%, 30%, 0.15)",positive:"#66BF3C",negative:"#FF4400",warning:"#E69D00",critical:"#FFFFFF",defaultText:"#2E3438",inverseText:"#FFFFFF",positiveText:"#448028",negativeText:"#D43900",warningText:"#A15C20"},background={app:"#F6F9FC",bar:color.lightest,content:color.lightest,preview:color.lightest,gridCellSize:10,hoverable:curriedTransparentize$1(.9,color.secondary),positive:"#E1FFD4",negative:"#FEDED2",warning:"#FFF5CF",critical:"#FF4400"},typography={fonts:{base:['"Nunito Sans"',"-apple-system",'".SFNSText-Regular"','"San Francisco"',"BlinkMacSystemFont",'"Segoe UI"','"Helvetica Neue"',"Helvetica","Arial","sans-serif"].join(", "),mono:["ui-monospace","Menlo","Monaco",'"Roboto Mono"','"Oxygen Mono"','"Ubuntu Monospace"','"Source Code Pro"','"Droid Sans Mono"','"Courier New"',"monospace"].join(", ")},weight:{regular:400,bold:700},size:{s1:12,s2:14,s3:16,m1:20,m2:24,m3:28,l1:32,l2:40,l3:48,code:90}},light_default={base:"light",colorPrimary:"#FF4785",colorSecondary:"#029CFD",appBg:background.app,appContentBg:color.lightest,appPreviewBg:color.lightest,appBorderColor:color.border,appBorderRadius:4,fontBase:typography.fonts.base,fontCode:typography.fonts.mono,textColor:color.darkest,textInverseColor:color.lightest,textMutedColor:color.dark,barTextColor:color.mediumdark,barHoverColor:color.secondary,barSelectedColor:color.secondary,barBg:color.lightest,buttonBg:background.app,buttonBorder:color.medium,booleanBg:color.mediumlight,booleanSelectedBg:color.lightest,inputBg:color.lightest,inputBorder:color.border,inputTextColor:color.darkest,inputBorderRadius:4},dark_default={base:"dark",colorPrimary:"#FF4785",colorSecondary:"#029CFD",appBg:"#222425",appContentBg:"#1B1C1D",appPreviewBg:color.lightest,appBorderColor:"rgba(255,255,255,.1)",appBorderRadius:4,fontBase:typography.fonts.base,fontCode:typography.fonts.mono,textColor:"#C9CDCF",textInverseColor:"#222425",textMutedColor:"#798186",barTextColor:"#798186",barHoverColor:color.secondary,barSelectedColor:color.secondary,barBg:"#292C2E",buttonBg:"#222425",buttonBorder:"rgba(255,255,255,.1)",booleanBg:"#222425",booleanSelectedBg:"#2E3438",inputBg:"#1B1C1D",inputBorder:"rgba(255,255,255,.1)",inputTextColor:color.lightest,inputBorderRadius:4},{window:globalWindow}=_storybook_global__WEBPACK_IMPORTED_MODULE_0__.global,mkColor=color2=>({color:color2}),colorFactory=type=>color2=>{if(!(color2=>"string"==typeof color2||(_storybook_client_logger__WEBPACK_IMPORTED_MODULE_1__.vF.warn(`Color passed to theme object should be a string. Instead ${color2}(${typeof color2}) was passed.`),!1))(color2)||!(color2=>!/(gradient|var|calc)/.test(color2))(color2))return color2;try{return((type,color2)=>"darken"===type?rgba(`${curriedDarken$1(1,color2)}`,.95):"lighten"===type?rgba(`${curriedLighten$1(1,color2)}`,.95):color2)(type,color2)}catch{return color2}},lightenColor=colorFactory("lighten"),getPreferredColorScheme=(colorFactory("darken"),()=>globalWindow&&globalWindow.matchMedia&&globalWindow.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"),themes={light:light_default,dark:dark_default,normal:light_default};getPreferredColorScheme()},"./node_modules/@storybook/theming/dist/index.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{NP:()=>ThemeProvider,C6:()=>convert,D8:()=>ensure,v_:()=>ignoreSsrWarning,EG:()=>isPropValid,i7:()=>keyframes,I4:()=>newStyled,DP:()=>useTheme});var chunk_FX52EUNG=__webpack_require__("./node_modules/@storybook/theming/dist/chunk-FX52EUNG.mjs"),react=__webpack_require__("./node_modules/react/index.js"),react_namespaceObject=__webpack_require__.t(react,2),useInsertionEffect=!!react_namespaceObject.useInsertionEffect&&react_namespaceObject.useInsertionEffect,useInsertionEffectAlwaysWithSyncFallback=useInsertionEffect||function syncFallback(create){return create()},useInsertionEffectWithLayoutFallback=useInsertionEffect||react.useLayoutEffect,memoizerific=__webpack_require__("./node_modules/memoizerific/memoizerific.js"),dist=__webpack_require__("./node_modules/@storybook/client-logger/dist/index.mjs"),require_react_is_development=(0,chunk_FX52EUNG.P$)({"../../node_modules/react-is/cjs/react-is.development.js"(exports){!function(){var hasSymbol="function"==typeof Symbol&&Symbol.for,REACT_ELEMENT_TYPE=hasSymbol?Symbol.for("react.element"):60103,REACT_PORTAL_TYPE=hasSymbol?Symbol.for("react.portal"):60106,REACT_FRAGMENT_TYPE=hasSymbol?Symbol.for("react.fragment"):60107,REACT_STRICT_MODE_TYPE=hasSymbol?Symbol.for("react.strict_mode"):60108,REACT_PROFILER_TYPE=hasSymbol?Symbol.for("react.profiler"):60114,REACT_PROVIDER_TYPE=hasSymbol?Symbol.for("react.provider"):60109,REACT_CONTEXT_TYPE=hasSymbol?Symbol.for("react.context"):60110,REACT_ASYNC_MODE_TYPE=hasSymbol?Symbol.for("react.async_mode"):60111,REACT_CONCURRENT_MODE_TYPE=hasSymbol?Symbol.for("react.concurrent_mode"):60111,REACT_FORWARD_REF_TYPE=hasSymbol?Symbol.for("react.forward_ref"):60112,REACT_SUSPENSE_TYPE=hasSymbol?Symbol.for("react.suspense"):60113,REACT_SUSPENSE_LIST_TYPE=hasSymbol?Symbol.for("react.suspense_list"):60120,REACT_MEMO_TYPE=hasSymbol?Symbol.for("react.memo"):60115,REACT_LAZY_TYPE=hasSymbol?Symbol.for("react.lazy"):60116,REACT_BLOCK_TYPE=hasSymbol?Symbol.for("react.block"):60121,REACT_FUNDAMENTAL_TYPE=hasSymbol?Symbol.for("react.fundamental"):60117,REACT_RESPONDER_TYPE=hasSymbol?Symbol.for("react.responder"):60118,REACT_SCOPE_TYPE=hasSymbol?Symbol.for("react.scope"):60119;function typeOf(object){if("object"==typeof object&&null!==object){var $$typeof=object.$$typeof;switch($$typeof){case REACT_ELEMENT_TYPE:var type=object.type;switch(type){case REACT_ASYNC_MODE_TYPE:case REACT_CONCURRENT_MODE_TYPE:case REACT_FRAGMENT_TYPE:case REACT_PROFILER_TYPE:case REACT_STRICT_MODE_TYPE:case REACT_SUSPENSE_TYPE:return type;default:var $$typeofType=type&&type.$$typeof;switch($$typeofType){case REACT_CONTEXT_TYPE:case REACT_FORWARD_REF_TYPE:case REACT_LAZY_TYPE:case REACT_MEMO_TYPE:case REACT_PROVIDER_TYPE:return $$typeofType;default:return $$typeof}}case REACT_PORTAL_TYPE:return $$typeof}}}var AsyncMode=REACT_ASYNC_MODE_TYPE,ConcurrentMode=REACT_CONCURRENT_MODE_TYPE,ContextConsumer=REACT_CONTEXT_TYPE,ContextProvider=REACT_PROVIDER_TYPE,Element=REACT_ELEMENT_TYPE,ForwardRef=REACT_FORWARD_REF_TYPE,Fragment4=REACT_FRAGMENT_TYPE,Lazy=REACT_LAZY_TYPE,Memo=REACT_MEMO_TYPE,Portal=REACT_PORTAL_TYPE,Profiler=REACT_PROFILER_TYPE,StrictMode=REACT_STRICT_MODE_TYPE,Suspense=REACT_SUSPENSE_TYPE,hasWarnedAboutDeprecatedIsAsyncMode=!1;function isConcurrentMode(object){return typeOf(object)===REACT_CONCURRENT_MODE_TYPE}exports.AsyncMode=AsyncMode,exports.ConcurrentMode=ConcurrentMode,exports.ContextConsumer=ContextConsumer,exports.ContextProvider=ContextProvider,exports.Element=Element,exports.ForwardRef=ForwardRef,exports.Fragment=Fragment4,exports.Lazy=Lazy,exports.Memo=Memo,exports.Portal=Portal,exports.Profiler=Profiler,exports.StrictMode=StrictMode,exports.Suspense=Suspense,exports.isAsyncMode=function isAsyncMode(object){return hasWarnedAboutDeprecatedIsAsyncMode||(hasWarnedAboutDeprecatedIsAsyncMode=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),isConcurrentMode(object)||typeOf(object)===REACT_ASYNC_MODE_TYPE},exports.isConcurrentMode=isConcurrentMode,exports.isContextConsumer=function isContextConsumer(object){return typeOf(object)===REACT_CONTEXT_TYPE},exports.isContextProvider=function isContextProvider(object){return typeOf(object)===REACT_PROVIDER_TYPE},exports.isElement=function isElement(object){return"object"==typeof object&&null!==object&&object.$$typeof===REACT_ELEMENT_TYPE},exports.isForwardRef=function isForwardRef(object){return typeOf(object)===REACT_FORWARD_REF_TYPE},exports.isFragment=function isFragment(object){return typeOf(object)===REACT_FRAGMENT_TYPE},exports.isLazy=function isLazy(object){return typeOf(object)===REACT_LAZY_TYPE},exports.isMemo=function isMemo(object){return typeOf(object)===REACT_MEMO_TYPE},exports.isPortal=function isPortal(object){return typeOf(object)===REACT_PORTAL_TYPE},exports.isProfiler=function isProfiler(object){return typeOf(object)===REACT_PROFILER_TYPE},exports.isStrictMode=function isStrictMode(object){return typeOf(object)===REACT_STRICT_MODE_TYPE},exports.isSuspense=function isSuspense(object){return typeOf(object)===REACT_SUSPENSE_TYPE},exports.isValidElementType=function isValidElementType(type){return"string"==typeof type||"function"==typeof type||type===REACT_FRAGMENT_TYPE||type===REACT_CONCURRENT_MODE_TYPE||type===REACT_PROFILER_TYPE||type===REACT_STRICT_MODE_TYPE||type===REACT_SUSPENSE_TYPE||type===REACT_SUSPENSE_LIST_TYPE||"object"==typeof type&&null!==type&&(type.$$typeof===REACT_LAZY_TYPE||type.$$typeof===REACT_MEMO_TYPE||type.$$typeof===REACT_PROVIDER_TYPE||type.$$typeof===REACT_CONTEXT_TYPE||type.$$typeof===REACT_FORWARD_REF_TYPE||type.$$typeof===REACT_FUNDAMENTAL_TYPE||type.$$typeof===REACT_RESPONDER_TYPE||type.$$typeof===REACT_SCOPE_TYPE||type.$$typeof===REACT_BLOCK_TYPE)},exports.typeOf=typeOf}()}}),require_react_is=(0,chunk_FX52EUNG.P$)({"../../node_modules/react-is/index.js"(exports,module){module.exports=require_react_is_development()}}),require_hoist_non_react_statics_cjs=(0,chunk_FX52EUNG.P$)({"../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports,module){var reactIs=require_react_is(),REACT_STATICS={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},KNOWN_STATICS={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},MEMO_STATICS={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},TYPE_STATICS={};function getStatics(component){return reactIs.isMemo(component)?MEMO_STATICS:TYPE_STATICS[component.$$typeof]||REACT_STATICS}TYPE_STATICS[reactIs.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},TYPE_STATICS[reactIs.Memo]=MEMO_STATICS;var defineProperty=Object.defineProperty,getOwnPropertyNames=Object.getOwnPropertyNames,getOwnPropertySymbols=Object.getOwnPropertySymbols,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,getPrototypeOf=Object.getPrototypeOf,objectPrototype=Object.prototype;module.exports=function hoistNonReactStatics2(targetComponent,sourceComponent,blacklist){if("string"!=typeof sourceComponent){if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);inheritedComponent&&inheritedComponent!==objectPrototype&&hoistNonReactStatics2(targetComponent,inheritedComponent,blacklist)}var keys=getOwnPropertyNames(sourceComponent);getOwnPropertySymbols&&(keys=keys.concat(getOwnPropertySymbols(sourceComponent)));for(var targetStatics=getStatics(targetComponent),sourceStatics=getStatics(sourceComponent),i=0;i<keys.length;++i){var key=keys[i];if(!(KNOWN_STATICS[key]||blacklist&&blacklist[key]||sourceStatics&&sourceStatics[key]||targetStatics&&targetStatics[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor)}catch{}}}}return targetComponent}}});function memoize(fn){var cache=Object.create(null);return function(arg){return void 0===cache[arg]&&(cache[arg]=fn(arg)),cache[arg]}}var reactPropsRegex=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,isPropValid=memoize((function(prop){return reactPropsRegex.test(prop)||111===prop.charCodeAt(0)&&110===prop.charCodeAt(1)&&prop.charCodeAt(2)<91}));var StyleSheet=function(){function StyleSheet2(options){var _this=this;this._insertTag=function(tag){var before;before=0===_this.tags.length?_this.insertionPoint?_this.insertionPoint.nextSibling:_this.prepend?_this.container.firstChild:_this.before:_this.tags[_this.tags.length-1].nextSibling,_this.container.insertBefore(tag,before),_this.tags.push(tag)},this.isSpeedy=void 0!==options.speedy&&options.speedy,this.tags=[],this.ctr=0,this.nonce=options.nonce,this.key=options.key,this.container=options.container,this.prepend=options.prepend,this.insertionPoint=options.insertionPoint,this.before=null}var _proto=StyleSheet2.prototype;return _proto.hydrate=function(nodes){nodes.forEach(this._insertTag)},_proto.insert=function(rule){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function createStyleElement(options){var tag=document.createElement("style");return tag.setAttribute("data-emotion",options.key),void 0!==options.nonce&&tag.setAttribute("nonce",options.nonce),tag.appendChild(document.createTextNode("")),tag.setAttribute("data-s",""),tag}(this));var tag=this.tags[this.tags.length-1],isImportRule3=64===rule.charCodeAt(0)&&105===rule.charCodeAt(1);if(isImportRule3&&this._alreadyInsertedOrderInsensitiveRule&&console.error("You're attempting to insert the following rule:\n"+rule+"\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules."),this._alreadyInsertedOrderInsensitiveRule=this._alreadyInsertedOrderInsensitiveRule||!isImportRule3,this.isSpeedy){var sheet=function sheetForTag(tag){if(tag.sheet)return tag.sheet;for(var i=0;i<document.styleSheets.length;i++)if(document.styleSheets[i].ownerNode===tag)return document.styleSheets[i]}(tag);try{sheet.insertRule(rule,sheet.cssRules.length)}catch(e){/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)||console.error('There was a problem inserting the following rule: "'+rule+'"',e)}}else tag.appendChild(document.createTextNode(rule));this.ctr++},_proto.flush=function(){this.tags.forEach((function(tag){return tag.parentNode&&tag.parentNode.removeChild(tag)})),this.tags=[],this.ctr=0,this._alreadyInsertedOrderInsensitiveRule=!1},StyleSheet2}(),MS="-ms-",MOZ="-moz-",WEBKIT="-webkit-",COMMENT="comm",RULESET="rule",DECLARATION="decl",abs=Math.abs,from=String.fromCharCode,dist_assign=Object.assign;function trim(value){return value.trim()}function replace(value,pattern,replacement){return value.replace(pattern,replacement)}function indexof(value,search){return value.indexOf(search)}function charat(value,index){return 0|value.charCodeAt(index)}function substr(value,begin,end){return value.slice(begin,end)}function strlen(value){return value.length}function sizeof(value){return value.length}function append(value,array){return array.push(value),value}var line=1,column=1,dist_length=0,position=0,character=0,characters="";function node(value,root,parent,type,props,children,length2){return{value,root,parent,type,props,children,line,column,length:length2,return:""}}function copy(root,props){return dist_assign(node("",null,null,"",null,null,0),root,{length:-root.length},props)}function next(){return character=position<dist_length?charat(characters,position++):0,column++,10===character&&(column=1,line++),character}function peek(){return charat(characters,position)}function caret(){return position}function slice(begin,end){return substr(characters,begin,end)}function token(type){switch(type){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function alloc(value){return line=column=1,dist_length=strlen(characters=value),position=0,[]}function dealloc(value){return characters="",value}function delimit(type){return trim(slice(position-1,delimiter(91===type?type+2:40===type?type+1:type)))}function whitespace(type){for(;(character=peek())&&character<33;)next();return token(type)>2||token(character)>3?"":" "}function escaping(index,count){for(;--count&&next()&&!(character<48||character>102||character>57&&character<65||character>70&&character<97););return slice(index,caret()+(count<6&&32==peek()&&32==next()))}function delimiter(type){for(;next();)switch(character){case type:return position;case 34:case 39:34!==type&&39!==type&&delimiter(character);break;case 40:41===type&&delimiter(type);break;case 92:next()}return position}function commenter(type,index){for(;next()&&type+character!==57&&(type+character!==84||47!==peek()););return"/*"+slice(index,position-1)+"*"+from(47===type?type:next())}function identifier(index){for(;!token(peek());)next();return slice(index,position)}function compile(value){return dealloc(parse("",null,null,null,[""],value=alloc(value),0,[0],value))}function parse(value,root,parent,rule,rules,rulesets,pseudo,points,declarations){for(var index=0,offset=0,length2=pseudo,atrule=0,property=0,previous=0,variable=1,scanning=1,ampersand=1,character2=0,type="",props=rules,children=rulesets,reference=rule,characters2=type;scanning;)switch(previous=character2,character2=next()){case 40:if(108!=previous&&58==charat(characters2,length2-1)){-1!=indexof(characters2+=replace(delimit(character2),"&","&\f"),"&\f")&&(ampersand=-1);break}case 34:case 39:case 91:characters2+=delimit(character2);break;case 9:case 10:case 13:case 32:characters2+=whitespace(previous);break;case 92:characters2+=escaping(caret()-1,7);continue;case 47:switch(peek()){case 42:case 47:append(comment(commenter(next(),caret()),root,parent),declarations);break;default:characters2+="/"}break;case 123*variable:points[index++]=strlen(characters2)*ampersand;case 125*variable:case 59:case 0:switch(character2){case 0:case 125:scanning=0;case 59+offset:-1==ampersand&&(characters2=replace(characters2,/\f/g,"")),property>0&&strlen(characters2)-length2&&append(property>32?declaration(characters2+";",rule,parent,length2-1):declaration(replace(characters2," ","")+";",rule,parent,length2-2),declarations);break;case 59:characters2+=";";default:if(append(reference=ruleset(characters2,root,parent,index,offset,rules,points,type,props=[],children=[],length2),rulesets),123===character2)if(0===offset)parse(characters2,root,reference,reference,props,rulesets,length2,points,children);else switch(99===atrule&&110===charat(characters2,3)?100:atrule){case 100:case 108:case 109:case 115:parse(value,reference,reference,rule&&append(ruleset(value,reference,reference,0,0,rules,points,type,rules,props=[],length2),children),rules,children,length2,points,rule?props:children);break;default:parse(characters2,reference,reference,reference,[""],children,0,points,children)}}index=offset=property=0,variable=ampersand=1,type=characters2="",length2=pseudo;break;case 58:length2=1+strlen(characters2),property=previous;default:if(variable<1)if(123==character2)--variable;else if(125==character2&&0==variable++&&125==(character=position>0?charat(characters,--position):0,column--,10===character&&(column=1,line--),character))continue;switch(characters2+=from(character2),character2*variable){case 38:ampersand=offset>0?1:(characters2+="\f",-1);break;case 44:points[index++]=(strlen(characters2)-1)*ampersand,ampersand=1;break;case 64:45===peek()&&(characters2+=delimit(next())),atrule=peek(),offset=length2=strlen(type=characters2+=identifier(caret())),character2++;break;case 45:45===previous&&2==strlen(characters2)&&(variable=0)}}return rulesets}function ruleset(value,root,parent,index,offset,rules,points,type,props,children,length2){for(var post=offset-1,rule=0===offset?rules:[""],size=sizeof(rule),i=0,j=0,k=0;i<index;++i)for(var x=0,y=substr(value,post+1,post=abs(j=points[i])),z=value;x<size;++x)(z=trim(j>0?rule[x]+" "+y:replace(y,/&\f/g,rule[x])))&&(props[k++]=z);return node(value,root,parent,0===offset?RULESET:type,props,children,length2)}function comment(value,root,parent){return node(value,root,parent,COMMENT,from(function dist_char(){return character}()),substr(value,2,-2),0)}function declaration(value,root,parent,length2){return node(value,root,parent,DECLARATION,substr(value,0,length2),substr(value,length2+1,-1),length2)}function serialize(children,callback){for(var output="",length2=sizeof(children),i=0;i<length2;i++)output+=callback(children[i],i,children,callback)||"";return output}function stringify(element,index,children,callback){switch(element.type){case"@layer":if(element.children.length)break;case"@import":case DECLARATION:return element.return=element.return||element.value;case COMMENT:return"";case"@keyframes":return element.return=element.value+"{"+serialize(element.children,callback)+"}";case RULESET:element.value=element.props.join(",")}return strlen(children=serialize(element.children,callback))?element.return=element.value+"{"+children+"}":""}var weakMemoize=function(func){var cache=new WeakMap;return function(arg){if(cache.has(arg))return cache.get(arg);var ret=func(arg);return cache.set(arg,ret),ret}},identifierWithPointTracking=function(begin,points,index){for(var previous=0,character2=0;previous=character2,character2=peek(),38===previous&&12===character2&&(points[index]=1),!token(character2);)next();return slice(begin,position)},getRules=function(value,points){return dealloc(function(parsed,points){var index=-1,character2=44;do{switch(token(character2)){case 0:38===character2&&12===peek()&&(points[index]=1),parsed[index]+=identifierWithPointTracking(position-1,points,index);break;case 2:parsed[index]+=delimit(character2);break;case 4:if(44===character2){parsed[++index]=58===peek()?"&\f":"",points[index]=parsed[index].length;break}default:parsed[index]+=from(character2)}}while(character2=next());return parsed}(alloc(value),points))},fixedElements=new WeakMap,compat=function(element){if("rule"===element.type&&element.parent&&!(element.length<1)){for(var value=element.value,parent=element.parent,isImplicitRule=element.column===parent.column&&element.line===parent.line;"rule"!==parent.type;)if(!(parent=parent.parent))return;if((1!==element.props.length||58===value.charCodeAt(0)||fixedElements.get(parent))&&!isImplicitRule){fixedElements.set(element,!0);for(var points=[],rules=getRules(value,points),parentRules=parent.props,i=0,k=0;i<rules.length;i++)for(var j=0;j<parentRules.length;j++,k++)element.props[k]=points[i]?rules[i].replace(/&\f/g,parentRules[j]):parentRules[j]+" "+rules[i]}}},removeLabel=function(element){if("decl"===element.type){var value=element.value;108===value.charCodeAt(0)&&98===value.charCodeAt(2)&&(element.return="",element.value="")}},isIgnoringComment=function(element){return"comm"===element.type&&element.children.indexOf("emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason")>-1},isImportRule=function(element){return 105===element.type.charCodeAt(1)&&64===element.type.charCodeAt(0)},nullifyElement=function(element){element.type="",element.value="",element.return="",element.children="",element.props=""},incorrectImportAlarm=function(element,index,children){isImportRule(element)&&(element.parent?(console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles."),nullifyElement(element)):function(index,children){for(var i=index-1;i>=0;i--)if(!isImportRule(children[i]))return!0;return!1}(index,children)&&(console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules."),nullifyElement(element)))};function prefix(value,length2){switch(function hash(value,length2){return 45^charat(value,0)?(((length2<<2^charat(value,0))<<2^charat(value,1))<<2^charat(value,2))<<2^charat(value,3):0}(value,length2)){case 5103:return WEBKIT+"print-"+value+value;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return WEBKIT+value+value;case 5349:case 4246:case 4810:case 6968:case 2756:return WEBKIT+value+MOZ+value+MS+value+value;case 6828:case 4268:return WEBKIT+value+MS+value+value;case 6165:return WEBKIT+value+MS+"flex-"+value+value;case 5187:return WEBKIT+value+replace(value,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+value;case 5443:return WEBKIT+value+MS+"flex-item-"+replace(value,/flex-|-self/,"")+value;case 4675:return WEBKIT+value+MS+"flex-line-pack"+replace(value,/align-content|flex-|-self/,"")+value;case 5548:return WEBKIT+value+MS+replace(value,"shrink","negative")+value;case 5292:return WEBKIT+value+MS+replace(value,"basis","preferred-size")+value;case 6060:return WEBKIT+"box-"+replace(value,"-grow","")+WEBKIT+value+MS+replace(value,"grow","positive")+value;case 4554:return WEBKIT+replace(value,/([^-])(transform)/g,"$1-webkit-$2")+value;case 6187:return replace(replace(replace(value,/(zoom-|grab)/,WEBKIT+"$1"),/(image-set)/,WEBKIT+"$1"),value,"")+value;case 5495:case 3959:return replace(value,/(image-set\([^]*)/,WEBKIT+"$1$`$1");case 4968:return replace(replace(value,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+WEBKIT+value+value;case 4095:case 3583:case 4068:case 2532:return replace(value,/(.+)-inline(.+)/,WEBKIT+"$1$2")+value;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(strlen(value)-1-length2>6)switch(charat(value,length2+1)){case 109:if(45!==charat(value,length2+4))break;case 102:return replace(value,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+MOZ+(108==charat(value,length2+3)?"$3":"$2-$3"))+value;case 115:return~indexof(value,"stretch")?prefix(replace(value,"stretch","fill-available"),length2)+value:value}break;case 4949:if(115!==charat(value,length2+1))break;case 6444:switch(charat(value,strlen(value)-3-(~indexof(value,"!important")&&10))){case 107:return replace(value,":",":"+WEBKIT)+value;case 101:return replace(value,/(.+:)([^;!]+)(;|!.+)?/,"$1"+WEBKIT+(45===charat(value,14)?"inline-":"")+"box$3$1"+WEBKIT+"$2$3$1"+MS+"$2box$3")+value}break;case 5936:switch(charat(value,length2+11)){case 114:return WEBKIT+value+MS+replace(value,/[svh]\w+-[tblr]{2}/,"tb")+value;case 108:return WEBKIT+value+MS+replace(value,/[svh]\w+-[tblr]{2}/,"tb-rl")+value;case 45:return WEBKIT+value+MS+replace(value,/[svh]\w+-[tblr]{2}/,"lr")+value}return WEBKIT+value+MS+value+value}return value}var defaultStylisPlugins=[function(element,index,children,callback){if(element.length>-1&&!element.return)switch(element.type){case DECLARATION:element.return=prefix(element.value,element.length);break;case"@keyframes":return serialize([copy(element,{value:replace(element.value,"@","@"+WEBKIT)})],callback);case RULESET:if(element.length)return function combine(array,callback){return array.map(callback).join("")}(element.props,(function(value){switch(function match(value,pattern){return(value=pattern.exec(value))?value[0]:value}(value,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return serialize([copy(element,{props:[replace(value,/:(read-\w+)/,":-moz-$1")]})],callback);case"::placeholder":return serialize([copy(element,{props:[replace(value,/:(plac\w+)/,":-webkit-input-$1")]}),copy(element,{props:[replace(value,/:(plac\w+)/,":-moz-$1")]}),copy(element,{props:[replace(value,/:(plac\w+)/,MS+"input-$1")]})],callback)}return""}))}}];(0,chunk_FX52EUNG.f1)(require_hoist_non_react_statics_cjs());function getRegisteredStyles(registered,registeredStyles,classNames){var rawClassName="";return classNames.split(" ").forEach((function(className){void 0!==registered[className]?registeredStyles.push(registered[className]+";"):rawClassName+=className+" "})),rawClassName}var registerStyles=function(cache,serialized,isStringTag){var className=cache.key+"-"+serialized.name;!1===isStringTag&&void 0===cache.registered[className]&&(cache.registered[className]=serialized.styles)},insertStyles=function(cache,serialized,isStringTag){registerStyles(cache,serialized,isStringTag);var className=cache.key+"-"+serialized.name;if(void 0===cache.inserted[serialized.name]){var current=serialized;do{cache.insert(serialized===current?"."+className:"",current,cache.sheet,!0),current=current.next}while(void 0!==current)}};var unitlessKeys={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ILLEGAL_ESCAPE_SEQUENCE_ERROR="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences",UNDEFINED_AS_OBJECT_KEY_ERROR="You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).",hyphenateRegex=/[A-Z]|^ms/g,animationRegex=/_EMO_([^_]+?)_([^]*?)_EMO_/g,isCustomProperty=function(property){return 45===property.charCodeAt(1)},isProcessableValue=function(value){return null!=value&&"boolean"!=typeof value},processStyleName=memoize((function(styleName){return isCustomProperty(styleName)?styleName:styleName.replace(hyphenateRegex,"-$&").toLowerCase()})),processStyleValue=function(key,value){switch(key){case"animation":case"animationName":if("string"==typeof value)return value.replace(animationRegex,(function(match2,p1,p2){return cursor={name:p1,styles:p2,next:cursor},p1}))}return 1===unitlessKeys[key]||isCustomProperty(key)||"number"!=typeof value||0===value?value:value+"px"};contentValuePattern=/(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/,contentValues=["normal","none","initial","inherit","unset"],oldProcessStyleValue=processStyleValue,msPattern=/^-ms-/,hyphenPattern=/-(.)/g,hyphenatedCache={},processStyleValue=function(key,value){if("content"===key&&("string"!=typeof value||-1===contentValues.indexOf(value)&&!contentValuePattern.test(value)&&(value.charAt(0)!==value.charAt(value.length-1)||'"'!==value.charAt(0)&&"'"!==value.charAt(0))))throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\""+value+"\"'`");var processed=oldProcessStyleValue(key,value);return""!==processed&&!isCustomProperty(key)&&-1!==key.indexOf("-")&&void 0===hyphenatedCache[key]&&(hyphenatedCache[key]=!0,console.error("Using kebab-case for css properties in objects is not supported. Did you mean "+key.replace(msPattern,"ms-").replace(hyphenPattern,(function(str,_char){return _char.toUpperCase()}))+"?")),processed};var contentValuePattern,contentValues,oldProcessStyleValue,msPattern,hyphenPattern,hyphenatedCache,noComponentSelectorMessage="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function handleInterpolation(mergedProps,registered,interpolation){if(null==interpolation)return"";if(void 0!==interpolation.__emotion_styles){if("NO_COMPONENT_SELECTOR"===interpolation.toString())throw new Error(noComponentSelectorMessage);return interpolation}switch(typeof interpolation){case"boolean":return"";case"object":if(1===interpolation.anim)return cursor={name:interpolation.name,styles:interpolation.styles,next:cursor},interpolation.name;if(void 0!==interpolation.styles){var next2=interpolation.next;if(void 0!==next2)for(;void 0!==next2;)cursor={name:next2.name,styles:next2.styles,next:cursor},next2=next2.next;var styles=interpolation.styles+";";return void 0!==interpolation.map&&(styles+=interpolation.map),styles}return function createStringFromObject(mergedProps,registered,obj){var string="";if(Array.isArray(obj))for(var i=0;i<obj.length;i++)string+=handleInterpolation(mergedProps,registered,obj[i])+";";else for(var _key in obj){var value=obj[_key];if("object"!=typeof value)null!=registered&&void 0!==registered[value]?string+=_key+"{"+registered[value]+"}":isProcessableValue(value)&&(string+=processStyleName(_key)+":"+processStyleValue(_key,value)+";");else{if("NO_COMPONENT_SELECTOR"===_key)throw new Error(noComponentSelectorMessage);if(!Array.isArray(value)||"string"!=typeof value[0]||null!=registered&&void 0!==registered[value[0]]){var interpolated=handleInterpolation(mergedProps,registered,value);switch(_key){case"animation":case"animationName":string+=processStyleName(_key)+":"+interpolated+";";break;default:"undefined"===_key&&console.error(UNDEFINED_AS_OBJECT_KEY_ERROR),string+=_key+"{"+interpolated+"}"}}else for(var _i=0;_i<value.length;_i++)isProcessableValue(value[_i])&&(string+=processStyleName(_key)+":"+processStyleValue(_key,value[_i])+";")}}return string}(mergedProps,registered,interpolation);case"function":if(void 0!==mergedProps){var previousCursor=cursor,result=interpolation(mergedProps);return cursor=previousCursor,handleInterpolation(mergedProps,registered,result)}console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");break;case"string":var matched=[],replaced=interpolation.replace(animationRegex,(function(match2,p1,p2){var fakeVarName="animation"+matched.length;return matched.push("const "+fakeVarName+" = keyframes`"+p2.replace(/^@keyframes animation-\w+/,"")+"`"),"${"+fakeVarName+"}"}));matched.length&&console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n"+[].concat(matched,["`"+replaced+"`"]).join("\n")+"\n\nYou should wrap it with `css` like this:\n\ncss`"+replaced+"`")}if(null==registered)return interpolation;var cached=registered[interpolation];return void 0!==cached?cached:interpolation}var sourceMapPattern,labelPattern=/label:\s*([^\s;\n{]+)\s*(;|$)/g;sourceMapPattern=/\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;var cursor,serializeStyles=function(args,registered,mergedProps){if(1===args.length&&"object"==typeof args[0]&&null!==args[0]&&void 0!==args[0].styles)return args[0];var stringMode=!0,styles="";cursor=void 0;var sourceMap,strings=args[0];null==strings||void 0===strings.raw?(stringMode=!1,styles+=handleInterpolation(mergedProps,registered,strings)):(void 0===strings[0]&&console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR),styles+=strings[0]);for(var i=1;i<args.length;i++)styles+=handleInterpolation(mergedProps,registered,args[i]),stringMode&&(void 0===strings[i]&&console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR),styles+=strings[i]);styles=styles.replace(sourceMapPattern,(function(match3){return sourceMap=match3,""})),labelPattern.lastIndex=0;for(var match2,identifierName="";null!==(match2=labelPattern.exec(styles));)identifierName+="-"+match2[1];var name=function murmur2(str){for(var k,h=0,i=0,len=str.length;len>=4;++i,len-=4)k=1540483477*(65535&(k=255&str.charCodeAt(i)|(255&str.charCodeAt(++i))<<8|(255&str.charCodeAt(++i))<<16|(255&str.charCodeAt(++i))<<24))+(59797*(k>>>16)<<16),h=1540483477*(65535&(k^=k>>>24))+(59797*(k>>>16)<<16)^1540483477*(65535&h)+(59797*(h>>>16)<<16);switch(len){case 3:h^=(255&str.charCodeAt(i+2))<<16;case 2:h^=(255&str.charCodeAt(i+1))<<8;case 1:h=1540483477*(65535&(h^=255&str.charCodeAt(i)))+(59797*(h>>>16)<<16)}return(((h=1540483477*(65535&(h^=h>>>13))+(59797*(h>>>16)<<16))^h>>>15)>>>0).toString(36)}(styles)+identifierName;return{name,styles,map:sourceMap,next:cursor,toString:function(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}}},dist_hasOwnProperty={}.hasOwnProperty,EmotionCacheContext=react.createContext(typeof HTMLElement<"u"?function(options){var key=options.key;if(!key)throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");if("css"===key){var ssrStyles=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(ssrStyles,(function(node2){-1!==node2.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(node2),node2.setAttribute("data-s",""))}))}var stylisPlugins=options.stylisPlugins||defaultStylisPlugins;if(/[^a-z-]/.test(key))throw new Error('Emotion key must only contain lower case alphabetical characters and - but "'+key+'" was passed');var container,inserted={},nodesToHydrate=[];container=options.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+key+' "]'),(function(node2){for(var attrib=node2.getAttribute("data-emotion").split(" "),i=1;i<attrib.length;i++)inserted[attrib[i]]=!0;nodesToHydrate.push(node2)}));var _insert,omnipresentPlugins=[compat,removeLabel];omnipresentPlugins.push(function(cache){return function(element,index,children){if("rule"===element.type&&!cache.compat){var unsafePseudoClasses=element.value.match(/(:first|:nth|:nth-last)-child/g);if(unsafePseudoClasses){for(var commentContainer=element.parent?element.parent.children:children,i=commentContainer.length-1;i>=0;i--){var node2=commentContainer[i];if(node2.line<element.line)break;if(node2.column<element.column){if(isIgnoringComment(node2))return;break}}unsafePseudoClasses.forEach((function(unsafePseudoClass){console.error('The pseudo class "'+unsafePseudoClass+'" is potentially unsafe when doing server-side rendering. Try changing it to "'+unsafePseudoClass.split("-child")[0]+'-of-type".')}))}}}}({get compat(){return cache.compat}}),incorrectImportAlarm);var currentSheet,finalizingPlugins=[stringify,function(element){element.root||(element.return?currentSheet.insert(element.return):element.value&&element.type!==COMMENT&&currentSheet.insert(element.value+"{}"))}],serializer=function middleware(collection){var length2=sizeof(collection);return function(element,index,children,callback){for(var output="",i=0;i<length2;i++)output+=collection[i](element,index,children,callback)||"";return output}}(omnipresentPlugins.concat(stylisPlugins,finalizingPlugins));_insert=function(selector,serialized,sheet,shouldCache){currentSheet=sheet,void 0!==serialized.map&&(currentSheet={insert:function(rule){sheet.insert(rule+serialized.map)}}),serialize(compile(selector?selector+"{"+serialized.styles+"}":serialized.styles),serializer),shouldCache&&(cache.inserted[serialized.name]=!0)};var cache={key,sheet:new StyleSheet({key,container,nonce:options.nonce,speedy:options.speedy,prepend:options.prepend,insertionPoint:options.insertionPoint}),nonce:options.nonce,inserted,registered:{},insert:_insert};return cache.sheet.hydrate(nodesToHydrate),cache}({key:"css"}):null);EmotionCacheContext.displayName="EmotionCacheContext";EmotionCacheContext.Provider;var withEmotionCache=function(func){return(0,react.forwardRef)((function(props,ref){var cache=(0,react.useContext)(EmotionCacheContext);return func(props,cache,ref)}))},ThemeContext=react.createContext({});ThemeContext.displayName="EmotionThemeContext";var useTheme=function(){return react.useContext(ThemeContext)},createCacheWithTheme=weakMemoize((function(outerTheme){return weakMemoize((function(theme){return function(outerTheme,theme){if("function"==typeof theme){var mergedTheme=theme(outerTheme);if(null==mergedTheme||"object"!=typeof mergedTheme||Array.isArray(mergedTheme))throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");return mergedTheme}if(null==theme||"object"!=typeof theme||Array.isArray(theme))throw new Error("[ThemeProvider] Please make your theme prop a plain object");return(0,chunk_FX52EUNG.rC)({},outerTheme,theme)}(outerTheme,theme)}))})),ThemeProvider=function(props){var theme=react.useContext(ThemeContext);return props.theme!==theme&&(theme=createCacheWithTheme(theme)(props.theme)),react.createElement(ThemeContext.Provider,{value:theme},props.children)};new Set(["renderWithHooks","processChild","finishClassComponent","renderToString"]);var typePropName="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",labelPropName="__EMOTION_LABEL_PLEASE_DO_NOT_USE__",Insertion=function(_ref){var cache=_ref.cache,serialized=_ref.serialized,isStringTag=_ref.isStringTag;return registerStyles(cache,serialized,isStringTag),useInsertionEffectAlwaysWithSyncFallback((function(){return insertStyles(cache,serialized,isStringTag)})),null},Emotion=withEmotionCache((function(props,cache,ref){var cssProp=props.css;"string"==typeof cssProp&&void 0!==cache.registered[cssProp]&&(cssProp=cache.registered[cssProp]);var WrappedComponent=props[typePropName],registeredStyles=[cssProp],className="";"string"==typeof props.className?className=getRegisteredStyles(cache.registered,registeredStyles,props.className):null!=props.className&&(className=props.className+" ");var serialized=serializeStyles(registeredStyles,void 0,react.useContext(ThemeContext));if(-1===serialized.name.indexOf("-")){var labelFromStack=props[labelPropName];labelFromStack&&(serialized=serializeStyles([serialized,"label:"+labelFromStack+";"]))}className+=cache.key+"-"+serialized.name;var newProps={};for(var key in props)dist_hasOwnProperty.call(props,key)&&"css"!==key&&key!==typePropName&&key!==labelPropName&&(newProps[key]=props[key]);return newProps.ref=ref,newProps.className=className,react.createElement(react.Fragment,null,react.createElement(Insertion,{cache,serialized,isStringTag:"string"==typeof WrappedComponent}),react.createElement(WrappedComponent,newProps))}));Emotion.displayName="EmotionCssPropInternal";(0,chunk_FX52EUNG.f1)(require_hoist_non_react_statics_cjs());var warnedAboutCssPropForGlobal=!1;function css(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return serializeStyles(args)}withEmotionCache((function(props,cache){!warnedAboutCssPropForGlobal&&(props.className||props.css)&&(console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?"),warnedAboutCssPropForGlobal=!0);var styles=props.styles,serialized=serializeStyles([styles],void 0,react.useContext(ThemeContext)),sheetRef=react.useRef();return useInsertionEffectWithLayoutFallback((function(){var key=cache.key+"-global",sheet=new cache.sheet.constructor({key,nonce:cache.sheet.nonce,container:cache.sheet.container,speedy:cache.sheet.isSpeedy}),rehydrating=!1,node2=document.querySelector('style[data-emotion="'+key+" "+serialized.name+'"]');return cache.sheet.tags.length&&(sheet.before=cache.sheet.tags[0]),null!==node2&&(rehydrating=!0,node2.setAttribute("data-emotion",key),sheet.hydrate([node2])),sheetRef.current=[sheet,rehydrating],function(){sheet.flush()}}),[cache]),useInsertionEffectWithLayoutFallback((function(){var sheetRefCurrent=sheetRef.current,sheet=sheetRefCurrent[0];if(sheetRefCurrent[1])sheetRefCurrent[1]=!1;else{if(void 0!==serialized.next&&insertStyles(cache,serialized.next,!0),sheet.tags.length){var element=sheet.tags[sheet.tags.length-1].nextElementSibling;sheet.before=element,sheet.flush()}cache.insert("",serialized,sheet,!1)}}),[cache,serialized.name]),null})).displayName="EmotionGlobal";var keyframes=function(){var insertable=css.apply(void 0,arguments),name="animation-"+insertable.name;return{name,styles:"@keyframes "+name+"{"+insertable.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},classnames=function classnames2(args){for(var len=args.length,i=0,cls="";i<len;i++){var arg=args[i];if(null!=arg){var toAdd=void 0;switch(typeof arg){case"boolean":break;case"object":if(Array.isArray(arg))toAdd=classnames2(arg);else for(var k in void 0!==arg.styles&&void 0!==arg.name&&console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component."),toAdd="",arg)arg[k]&&k&&(toAdd&&(toAdd+=" "),toAdd+=k);break;default:toAdd=arg}toAdd&&(cls&&(cls+=" "),cls+=toAdd)}}return cls};var globalContext,globalKey,Insertion3=function(_ref){var cache=_ref.cache,serializedArr=_ref.serializedArr;return useInsertionEffectAlwaysWithSyncFallback((function(){for(var i=0;i<serializedArr.length;i++)insertStyles(cache,serializedArr[i],!1)})),null};withEmotionCache((function(props,cache){var hasRendered=!1,serializedArr=[],css2=function(){if(hasRendered)throw new Error("css can only be used during render");for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var serialized=serializeStyles(args,cache.registered);return serializedArr.push(serialized),registerStyles(cache,serialized,!1),cache.key+"-"+serialized.name},content={css:css2,cx:function(){if(hasRendered)throw new Error("cx can only be used during render");for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];return function merge(registered,css2,className){var registeredStyles=[],rawClassName=getRegisteredStyles(registered,registeredStyles,className);return registeredStyles.length<2?className:rawClassName+css2(registeredStyles)}(cache.registered,css2,classnames(args))},theme:react.useContext(ThemeContext)},ele=props.children(content);return hasRendered=!0,react.createElement(react.Fragment,null,react.createElement(Insertion3,{cache,serializedArr}),ele)})).displayName="EmotionClassNames",!(typeof jest<"u"||typeof vi<"u")&&((globalContext=typeof globalThis<"u"?globalThis:window)[globalKey="__EMOTION_REACT_"+"11.11.1".split(".")[0]+"__"]&&console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used."),globalContext[globalKey]=!0);var testOmitPropsOnStringTag=isPropValid,testOmitPropsOnComponent=function(key){return"theme"!==key},getDefaultShouldForwardProp=function(tag){return"string"==typeof tag&&tag.charCodeAt(0)>96?testOmitPropsOnStringTag:testOmitPropsOnComponent},composeShouldForwardProps=function(tag,options,isReal){var shouldForwardProp;if(options){var optionsShouldForwardProp=options.shouldForwardProp;shouldForwardProp=tag.__emotion_forwardProp&&optionsShouldForwardProp?function(propName){return tag.__emotion_forwardProp(propName)&&optionsShouldForwardProp(propName)}:optionsShouldForwardProp}return"function"!=typeof shouldForwardProp&&isReal&&(shouldForwardProp=tag.__emotion_forwardProp),shouldForwardProp},ILLEGAL_ESCAPE_SEQUENCE_ERROR2="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences",Insertion5=function(_ref){var cache=_ref.cache,serialized=_ref.serialized,isStringTag=_ref.isStringTag;return registerStyles(cache,serialized,isStringTag),useInsertionEffectAlwaysWithSyncFallback((function(){return insertStyles(cache,serialized,isStringTag)})),null},newStyled=function createStyled2(tag,options){if(void 0===tag)throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");var identifierName,targetClassName,isReal=tag.__emotion_real===tag,baseTag=isReal&&tag.__emotion_base||tag;void 0!==options&&(identifierName=options.label,targetClassName=options.target);var shouldForwardProp=composeShouldForwardProps(tag,options,isReal),defaultShouldForwardProp=shouldForwardProp||getDefaultShouldForwardProp(baseTag),shouldUseAs=!defaultShouldForwardProp("as");return function(){var args=arguments,styles=isReal&&void 0!==tag.__emotion_styles?tag.__emotion_styles.slice(0):[];if(void 0!==identifierName&&styles.push("label:"+identifierName+";"),null==args[0]||void 0===args[0].raw)styles.push.apply(styles,args);else{void 0===args[0][0]&&console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2),styles.push(args[0][0]);for(var len=args.length,i=1;i<len;i++)void 0===args[0][i]&&console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2),styles.push(args[i],args[0][i])}var Styled=withEmotionCache((function(props,cache,ref){var FinalTag=shouldUseAs&&props.as||baseTag,className="",classInterpolations=[],mergedProps=props;if(null==props.theme){for(var key in mergedProps={},props)mergedProps[key]=props[key];mergedProps.theme=react.useContext(ThemeContext)}"string"==typeof props.className?className=getRegisteredStyles(cache.registered,classInterpolations,props.className):null!=props.className&&(className=props.className+" ");var serialized=serializeStyles(styles.concat(classInterpolations),cache.registered,mergedProps);className+=cache.key+"-"+serialized.name,void 0!==targetClassName&&(className+=" "+targetClassName);var finalShouldForwardProp=shouldUseAs&&void 0===shouldForwardProp?getDefaultShouldForwardProp(FinalTag):defaultShouldForwardProp,newProps={};for(var _key in props)shouldUseAs&&"as"===_key||finalShouldForwardProp(_key)&&(newProps[_key]=props[_key]);return newProps.className=className,newProps.ref=ref,react.createElement(react.Fragment,null,react.createElement(Insertion5,{cache,serialized,isStringTag:"string"==typeof FinalTag}),react.createElement(FinalTag,newProps))}));return Styled.displayName=void 0!==identifierName?identifierName:"Styled("+("string"==typeof baseTag?baseTag:baseTag.displayName||baseTag.name||"Component")+")",Styled.defaultProps=tag.defaultProps,Styled.__emotion_real=Styled,Styled.__emotion_base=baseTag,Styled.__emotion_styles=styles,Styled.__emotion_forwardProp=shouldForwardProp,Object.defineProperty(Styled,"toString",{value:function(){return void 0===targetClassName?"NO_COMPONENT_SELECTOR":"."+targetClassName}}),Styled.withComponent=function(nextTag,nextOptions){return createStyled2(nextTag,(0,chunk_FX52EUNG.rC)({},options,nextOptions,{shouldForwardProp:composeShouldForwardProps(Styled,nextOptions,!0)})).apply(void 0,styles)},Styled}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(tagName){newStyled[tagName]=newStyled(tagName)}));var createReset=memoizerific(1)((({typography:typography2})=>({body:{fontFamily:typography2.fonts.base,fontSize:typography2.size.s3,margin:0,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",WebkitOverflowScrolling:"touch"},"*":{boxSizing:"border-box"},"h1, h2, h3, h4, h5, h6":{fontWeight:typography2.weight.regular,margin:0,padding:0},"button, input, textarea, select":{fontFamily:"inherit",fontSize:"inherit",boxSizing:"border-box"},sub:{fontSize:"0.8em",bottom:"-0.2em"},sup:{fontSize:"0.8em",top:"-0.2em"},"b, strong":{fontWeight:typography2.weight.bold},hr:{border:"none",borderTop:"1px solid silver",clear:"both",marginBottom:"1.25rem"},code:{fontFamily:typography2.fonts.mono,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",display:"inline-block",paddingLeft:2,paddingRight:2,verticalAlign:"baseline",color:"inherit"},pre:{fontFamily:typography2.fonts.mono,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",lineHeight:"18px",padding:"11px 1rem",whiteSpace:"pre-wrap",color:"inherit",borderRadius:3,margin:"1rem 0"}}))),easing=(memoizerific(1)((({color:color2,background:background2,typography:typography2})=>{let resetStyles=createReset({typography:typography2});return{...resetStyles,body:{...resetStyles.body,color:color2.defaultText,background:background2.app,overflow:"hidden"},hr:{...resetStyles.hr,borderTop:`1px solid ${color2.border}`}}})),{rubber:"cubic-bezier(0.175, 0.885, 0.335, 1.05)"}),rotate360=keyframes`
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
`,glow=keyframes`
  0%, 100% { opacity: 1; }
  50% { opacity: .4; }
`,animation={rotate360,glow,float:keyframes`
  0% { transform: translateY(1px); }
  25% { transform: translateY(0px); }
  50% { transform: translateY(-3px); }
  100% { transform: translateY(1px); }
`,jiggle:keyframes`
  0%, 100% { transform:translate3d(0,0,0); }
  12.5%, 62.5% { transform:translate3d(-4px,0,0); }
  37.5%, 87.5% {  transform: translate3d(4px,0,0);  }
`,inlineGlow:css`
  animation: ${glow} 1.5s ease-in-out infinite;
  color: transparent;
  cursor: progress;
`,hoverable:css`
  transition: all 150ms ease-out;
  transform: translate3d(0, 0, 0);

  &:hover {
    transform: translate3d(0, -2px, 0);
  }

  &:active {
    transform: translate3d(0, 0, 0);
  }
`},chromeDark={BASE_FONT_FAMILY:"Menlo, monospace",BASE_FONT_SIZE:"11px",BASE_LINE_HEIGHT:1.2,BASE_BACKGROUND_COLOR:"rgb(36, 36, 36)",BASE_COLOR:"rgb(213, 213, 213)",OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES:10,OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES:5,OBJECT_NAME_COLOR:"rgb(227, 110, 236)",OBJECT_VALUE_NULL_COLOR:"rgb(127, 127, 127)",OBJECT_VALUE_UNDEFINED_COLOR:"rgb(127, 127, 127)",OBJECT_VALUE_REGEXP_COLOR:"rgb(233, 63, 59)",OBJECT_VALUE_STRING_COLOR:"rgb(233, 63, 59)",OBJECT_VALUE_SYMBOL_COLOR:"rgb(233, 63, 59)",OBJECT_VALUE_NUMBER_COLOR:"hsl(252, 100%, 75%)",OBJECT_VALUE_BOOLEAN_COLOR:"hsl(252, 100%, 75%)",OBJECT_VALUE_FUNCTION_PREFIX_COLOR:"rgb(85, 106, 242)",HTML_TAG_COLOR:"rgb(93, 176, 215)",HTML_TAGNAME_COLOR:"rgb(93, 176, 215)",HTML_TAGNAME_TEXT_TRANSFORM:"lowercase",HTML_ATTRIBUTE_NAME_COLOR:"rgb(155, 187, 220)",HTML_ATTRIBUTE_VALUE_COLOR:"rgb(242, 151, 102)",HTML_COMMENT_COLOR:"rgb(137, 137, 137)",HTML_DOCTYPE_COLOR:"rgb(192, 192, 192)",ARROW_COLOR:"rgb(145, 145, 145)",ARROW_MARGIN_RIGHT:3,ARROW_FONT_SIZE:12,ARROW_ANIMATION_DURATION:"0",TREENODE_FONT_FAMILY:"Menlo, monospace",TREENODE_FONT_SIZE:"11px",TREENODE_LINE_HEIGHT:1.2,TREENODE_PADDING_LEFT:12,TABLE_BORDER_COLOR:"rgb(85, 85, 85)",TABLE_TH_BACKGROUND_COLOR:"rgb(44, 44, 44)",TABLE_TH_HOVER_COLOR:"rgb(48, 48, 48)",TABLE_SORT_ICON_COLOR:"black",TABLE_DATA_BACKGROUND_IMAGE:"linear-gradient(rgba(255, 255, 255, 0), rgba(255, 255, 255, 0) 50%, rgba(51, 139, 255, 0.0980392) 50%, rgba(51, 139, 255, 0.0980392))",TABLE_DATA_BACKGROUND_SIZE:"128px 32px"},chromeLight={BASE_FONT_FAMILY:"Menlo, monospace",BASE_FONT_SIZE:"11px",BASE_LINE_HEIGHT:1.2,BASE_BACKGROUND_COLOR:"white",BASE_COLOR:"black",OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES:10,OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES:5,OBJECT_NAME_COLOR:"rgb(136, 19, 145)",OBJECT_VALUE_NULL_COLOR:"rgb(128, 128, 128)",OBJECT_VALUE_UNDEFINED_COLOR:"rgb(128, 128, 128)",OBJECT_VALUE_REGEXP_COLOR:"rgb(196, 26, 22)",OBJECT_VALUE_STRING_COLOR:"rgb(196, 26, 22)",OBJECT_VALUE_SYMBOL_COLOR:"rgb(196, 26, 22)",OBJECT_VALUE_NUMBER_COLOR:"rgb(28, 0, 207)",OBJECT_VALUE_BOOLEAN_COLOR:"rgb(28, 0, 207)",OBJECT_VALUE_FUNCTION_PREFIX_COLOR:"rgb(13, 34, 170)",HTML_TAG_COLOR:"rgb(168, 148, 166)",HTML_TAGNAME_COLOR:"rgb(136, 18, 128)",HTML_TAGNAME_TEXT_TRANSFORM:"lowercase",HTML_ATTRIBUTE_NAME_COLOR:"rgb(153, 69, 0)",HTML_ATTRIBUTE_VALUE_COLOR:"rgb(26, 26, 166)",HTML_COMMENT_COLOR:"rgb(35, 110, 37)",HTML_DOCTYPE_COLOR:"rgb(192, 192, 192)",ARROW_COLOR:"#6e6e6e",ARROW_MARGIN_RIGHT:3,ARROW_FONT_SIZE:12,ARROW_ANIMATION_DURATION:"0",TREENODE_FONT_FAMILY:"Menlo, monospace",TREENODE_FONT_SIZE:"11px",TREENODE_LINE_HEIGHT:1.2,TREENODE_PADDING_LEFT:12,TABLE_BORDER_COLOR:"#aaa",TABLE_TH_BACKGROUND_COLOR:"#eee",TABLE_TH_HOVER_COLOR:"hsla(0, 0%, 90%, 1)",TABLE_SORT_ICON_COLOR:"#6e6e6e",TABLE_DATA_BACKGROUND_IMAGE:"linear-gradient(to bottom, white, white 50%, rgb(234, 243, 255) 50%, rgb(234, 243, 255))",TABLE_DATA_BACKGROUND_SIZE:"128px 32px"},create2=({colors,mono})=>{let colorsObjs=(colors=>Object.entries(colors).reduce(((acc,[k,v])=>({...acc,[k]:(0,chunk_FX52EUNG.sd)(v)})),{}))(colors);return{token:{fontFamily:mono,WebkitFontSmoothing:"antialiased","&.tag":colorsObjs.red3,"&.comment":{...colorsObjs.green1,fontStyle:"italic"},"&.prolog":{...colorsObjs.green1,fontStyle:"italic"},"&.doctype":{...colorsObjs.green1,fontStyle:"italic"},"&.cdata":{...colorsObjs.green1,fontStyle:"italic"},"&.string":colorsObjs.red1,"&.url":colorsObjs.cyan1,"&.symbol":colorsObjs.cyan1,"&.number":colorsObjs.cyan1,"&.boolean":colorsObjs.cyan1,"&.variable":colorsObjs.cyan1,"&.constant":colorsObjs.cyan1,"&.inserted":colorsObjs.cyan1,"&.atrule":colorsObjs.blue1,"&.keyword":colorsObjs.blue1,"&.attr-value":colorsObjs.blue1,"&.punctuation":colorsObjs.gray1,"&.operator":colorsObjs.gray1,"&.function":colorsObjs.gray1,"&.deleted":colorsObjs.red2,"&.important":{fontWeight:"bold"},"&.bold":{fontWeight:"bold"},"&.italic":{fontStyle:"italic"},"&.class-name":colorsObjs.cyan2,"&.selector":colorsObjs.red3,"&.attr-name":colorsObjs.red4,"&.property":colorsObjs.red4,"&.regex":colorsObjs.red4,"&.entity":colorsObjs.red4,"&.directive.tag .tag":{background:"#ffff00",...colorsObjs.gray1}},"language-json .token.boolean":colorsObjs.blue1,"language-json .token.number":colorsObjs.blue1,"language-json .token.property":colorsObjs.cyan2,namespace:{opacity:.7}}},lightSyntaxColors={green1:"#008000",red1:"#A31515",red2:"#9a050f",red3:"#800000",red4:"#ff0000",gray1:"#393A34",cyan1:"#36acaa",cyan2:"#2B91AF",blue1:"#0000ff",blue2:"#00009f"},darkSyntaxColors={green1:"#7C7C7C",red1:"#92C379",red2:"#9a050f",red3:"#A8FF60",red4:"#96CBFE",gray1:"#EDEDED",cyan1:"#C6C5FE",cyan2:"#FFFFB6",blue1:"#B474DD",blue2:"#00009f"},convert=(inherit=chunk_FX52EUNG.Zj[(0,chunk_FX52EUNG.Oy)()])=>{let{base,colorPrimary,colorSecondary,appBg,appContentBg,appPreviewBg,appBorderColor,appBorderRadius,fontBase,fontCode,textColor,textInverseColor,barTextColor,barHoverColor,barSelectedColor,barBg,buttonBg,buttonBorder,booleanBg,booleanSelectedBg,inputBg,inputBorder,inputTextColor,inputBorderRadius,brandTitle,brandUrl,brandImage,brandTarget,gridCellSize,...rest}=inherit;return{...rest,base,color:(vars=inherit,{primary:vars.colorPrimary,secondary:vars.colorSecondary,tertiary:chunk_FX52EUNG.yW.tertiary,ancillary:chunk_FX52EUNG.yW.ancillary,orange:chunk_FX52EUNG.yW.orange,gold:chunk_FX52EUNG.yW.gold,green:chunk_FX52EUNG.yW.green,seafoam:chunk_FX52EUNG.yW.seafoam,purple:chunk_FX52EUNG.yW.purple,ultraviolet:chunk_FX52EUNG.yW.ultraviolet,lightest:chunk_FX52EUNG.yW.lightest,lighter:chunk_FX52EUNG.yW.lighter,light:chunk_FX52EUNG.yW.light,mediumlight:chunk_FX52EUNG.yW.mediumlight,medium:chunk_FX52EUNG.yW.medium,mediumdark:chunk_FX52EUNG.yW.mediumdark,dark:chunk_FX52EUNG.yW.dark,darker:chunk_FX52EUNG.yW.darker,darkest:chunk_FX52EUNG.yW.darkest,border:chunk_FX52EUNG.yW.border,positive:chunk_FX52EUNG.yW.positive,negative:chunk_FX52EUNG.yW.negative,warning:chunk_FX52EUNG.yW.warning,critical:chunk_FX52EUNG.yW.critical,defaultText:vars.textColor||chunk_FX52EUNG.yW.darkest,inverseText:vars.textInverseColor||chunk_FX52EUNG.yW.lightest,positiveText:chunk_FX52EUNG.yW.positiveText,negativeText:chunk_FX52EUNG.yW.negativeText,warningText:chunk_FX52EUNG.yW.warningText}),background:{app:appBg,bar:barBg,content:appContentBg,preview:appPreviewBg,gridCellSize:gridCellSize||chunk_FX52EUNG.Tp.gridCellSize,hoverable:chunk_FX52EUNG.Tp.hoverable,positive:chunk_FX52EUNG.Tp.positive,negative:chunk_FX52EUNG.Tp.negative,warning:chunk_FX52EUNG.Tp.warning,critical:chunk_FX52EUNG.Tp.critical},typography:{fonts:{base:fontBase,mono:fontCode},weight:chunk_FX52EUNG.Il.weight,size:chunk_FX52EUNG.Il.size},animation,easing,input:{background:inputBg,border:inputBorder,borderRadius:inputBorderRadius,color:inputTextColor},button:{background:buttonBg||inputBg,border:buttonBorder||inputBorder},boolean:{background:booleanBg||inputBorder,selectedBackground:booleanSelectedBg||inputBg},layoutMargin:10,appBorderColor,appBorderRadius,barTextColor,barHoverColor:barHoverColor||colorSecondary,barSelectedColor:barSelectedColor||colorSecondary,barBg,brand:{title:brandTitle,url:brandUrl,image:brandImage||(brandTitle?null:void 0),target:brandTarget},code:create2({colors:"light"===base?lightSyntaxColors:darkSyntaxColors,mono:fontCode}),addonActionsTheme:{..."light"===base?chromeLight:chromeDark,BASE_FONT_FAMILY:fontCode,BASE_FONT_SIZE:chunk_FX52EUNG.Il.size.s2-1,BASE_LINE_HEIGHT:"18px",BASE_BACKGROUND_COLOR:"transparent",BASE_COLOR:textColor,ARROW_COLOR:(0,chunk_FX52EUNG.xH)(.2,appBorderColor),ARROW_MARGIN_RIGHT:4,ARROW_FONT_SIZE:8,TREENODE_FONT_FAMILY:fontCode,TREENODE_FONT_SIZE:chunk_FX52EUNG.Il.size.s2-1,TREENODE_LINE_HEIGHT:"18px",TREENODE_PADDING_LEFT:12}};var vars},isObject=o=>null!=o&&"object"==typeof o,deletedDiff=(lhs,rhs)=>lhs!==rhs&&isObject(lhs)&&isObject(rhs)?Object.keys(lhs).reduce(((acc,key)=>{if(((o,...args)=>Object.prototype.hasOwnProperty.call(o,...args))(rhs,key)){let difference=deletedDiff(lhs[key],rhs[key]);return isObject(difference)&&(o=difference,0===Object.keys(o).length)||(acc[key]=difference),acc}var o;return acc[key]=void 0,acc}),Object.create(null)):{},deleted_default=deletedDiff;function dedent(templ){for(var values=[],_i=1;_i<arguments.length;_i++)values[_i-1]=arguments[_i];var strings=Array.from("string"==typeof templ?[templ]:templ);strings[strings.length-1]=strings[strings.length-1].replace(/\r?\n([\t ]*)$/,"");var indentLengths=strings.reduce((function(arr,str){var matches=str.match(/\n([\t ]+|(?!\s).)/g);return matches?arr.concat(matches.map((function(match2){var _a,_b;return null!==(_b=null===(_a=match2.match(/[\t ]/g))||void 0===_a?void 0:_a.length)&&void 0!==_b?_b:0}))):arr}),[]);if(indentLengths.length){var pattern_1=new RegExp("\n[\t ]{"+Math.min.apply(Math,indentLengths)+"}","g");strings=strings.map((function(str){return str.replace(pattern_1,"\n")}))}strings[0]=strings[0].replace(/^\r?\n/,"");var string=strings[0];return values.forEach((function(value,i){var endentations=string.match(/(?:^|\n)( *)$/),endentation=endentations?endentations[1]:"",indentedValue=value;"string"==typeof value&&value.includes("\n")&&(indentedValue=String(value).split("\n").map((function(str,i2){return 0===i2?str:""+endentation+str})).join("\n")),string+=indentedValue+strings[i+1]})),string}var ensure=input=>{if(!input)return convert(chunk_FX52EUNG.RA);let missing=deleted_default(chunk_FX52EUNG.RA,input);return Object.keys(missing).length&&dist.vF.warn(dedent`
          Your theme is missing properties, you should update your theme!

          theme-data missing:
        `,missing),convert(input)},ignoreSsrWarning="/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,