"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[751],{"./src/lib/ui/SchoolInfoConfirmationDialog.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.styles=exports.default=void 0;var _react=_interopRequireWildcard(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_Dialog=_interopRequireWildcard(__webpack_require__("./src/templates/Dialog.jsx")),_Button=_interopRequireDefault(__webpack_require__("./src/templates/Button.jsx")),_SchoolInfoInterstitial=_interopRequireDefault(__webpack_require__("./src/lib/ui/SchoolInfoInterstitial.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_redux=__webpack_require__("./src/redux.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_AnalyticsReporter=_interopRequireDefault(__webpack_require__("./src/lib/util/AnalyticsReporter.js")),_AnalyticsConstants=__webpack_require__("./src/lib/util/AnalyticsConstants.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var styles=exports.styles={button:{marginTop:20,marginLeft:"50%"},buttonRTL:{marginTop:20,marginRight:"50%"},updateButton:{marginTop:20,marginLeft:5},updateButtonRTL:{marginTop:20,marginRight:5},intro:_objectSpread(_objectSpread({fontSize:18},_fontConstants.default["main-font-semi-bold"]),{},{color:_color.default.charcoal,paddingRight:20}),schoolName:{color:_color.default.purple,fontStyle:"italic"},body:{margin:10}},SchoolInfoConfirmationDialog=function(_Component){function SchoolInfoConfirmationDialog(props){var _this;return _defineProperty(_this=_Component.call(this,props)||this,"closeModal",(function(){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.UPDATE_SCHOOL_INFO_DIALOG_CLOSED,{},_AnalyticsConstants.PLATFORMS.BOTH),_this.setState({isOpen:!1}),_this.props.onClose()})),_defineProperty(_this,"handleClickYes",(function(){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.CONFIRM_SCHOOL_CLICKED,{},_AnalyticsConstants.PLATFORMS.BOTH);var _this$props$scriptDat=_this.props.scriptData,authTokenName=_this$props$scriptDat.authTokenName,authTokenValue=_this$props$scriptDat.authTokenValue,formData=new FormData;formData.append(authTokenName,authTokenValue),fetch("/api/v1/user_school_infos/".concat(_this.props.scriptData.existingSchoolInfo.user_school_info_id,"/update_last_confirmation_date"),{method:"PATCH",body:formData}).then(_this.closeModal).catch((function(error){_this.setState({error})}))})),_defineProperty(_this,"handleClickUpdate",(function(){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.UPDATE_SCHOOL_CLICKED,{},_AnalyticsConstants.PLATFORMS.BOTH),_this.setState({showSchoolInterstitial:!0})})),_defineProperty(_this,"renderInitialContent",(function(){var _getStore$getState;_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.UPDATE_SCHOOL_INFO_DIALOG_SHOWN,{},_AnalyticsConstants.PLATFORMS.BOTH);var schoolName=_this.state.schoolName,isRTL=null===(_getStore$getState=(0,_redux.getStore)().getState())||void 0===_getStore$getState?void 0:_getStore$getState.isRtl;return _react.default.createElement(_Dialog.Body,null,_react.default.createElement("div",{style:styles.body},_react.default.createElement("p",{style:styles.intro},_locale.default.schoolInfoDialogDescription(),_react.default.createElement("span",{style:styles.schoolName},_locale.default.schoolInfoDialogDescriptionSchoolName({schoolName})))),_react.default.createElement(_Button.default,{style:isRTL?styles.updateButtonRTL:styles.updateButton,text:_locale.default.schoolInfoDialogUpdate(),color:_Button.default.ButtonColor.blue,onClick:_this.handleClickUpdate,id:"update-button"}),_react.default.createElement(_Button.default,{style:isRTL?styles.buttonRTL:styles.button,text:_locale.default.yes(),color:_Button.default.ButtonColor.brandSecondaryDefault,onClick:_this.handleClickYes,id:"yes-button"}))})),_this.state={showSchoolInterstitial:!1,schoolName:props.scriptData.existingSchoolInfo.school_name,isOpen:props.isOpen||!0},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SchoolInfoConfirmationDialog,_Component);var _proto=SchoolInfoConfirmationDialog.prototype;return _proto.renderSchoolInformationForm=function renderSchoolInformationForm(){return _react.default.createElement(_Dialog.Body,null,_react.default.createElement(_SchoolInfoInterstitial.default,{scriptData:this.props.scriptData,onClose:this.closeModal}))},_proto.render=function render(){var _this$state=this.state,showSchoolInterstitial=_this$state.showSchoolInterstitial,isOpen=_this$state.isOpen;return _react.default.createElement(_Dialog.default,{isOpen,handleClose:this.closeModal},showSchoolInterstitial?this.renderSchoolInformationForm():this.renderInitialContent())},SchoolInfoConfirmationDialog}(_react.Component);_defineProperty(SchoolInfoConfirmationDialog,"propTypes",{schoolName:_propTypes.default.string,scriptData:_propTypes.default.shape({formUrl:_propTypes.default.string.isRequired,authTokenName:_propTypes.default.string.isRequired,authTokenValue:_propTypes.default.string.isRequired,existingSchoolInfo:_propTypes.default.shape({id:_propTypes.default.number,user_school_info_id:_propTypes.default.number,school_id:_propTypes.default.string,country:_propTypes.default.string,school_type:_propTypes.default.string,school_name:_propTypes.default.string,full_address:_propTypes.default.string}).isRequired}).isRequired,onClose:_propTypes.default.func,isOpen:_propTypes.default.bool});exports.default=SchoolInfoConfirmationDialog},"./src/redux.js":(module,exports,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStore=function getStore(){reduxStore||(reduxStore=createStoreWithReducers(),_experiments.default.isEnabled("reduxGlobalStore")&&(window.reduxStore=reduxStore));return reduxStore},exports.hasReducer=function hasReducer(key){return!!globalReducers[key]},exports.registerReducers=function registerReducers(reducers){for(var key in reducers){var existingReducer=globalReducers[key];if(existingReducer&&existingReducer!==reducers[key])throw new Error('reducer with key "'.concat(key,'" already registered!'))}Object.assign(globalReducers,reducers),reduxStore&&reduxStore.replaceReducer(redux.combineReducers(globalReducers))};var reduxStore,_toolkit=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),redux=(_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/redux/es/redux.js"))),_reduxThunk=_interopRequireDefault(__webpack_require__("./node_modules/redux-thunk/lib/index.js")),_experiments=_interopRequireDefault(__webpack_require__("./src/util/experiments.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var globalReducers={};function createStoreWithReducers(){return function createStore(reducer,initialState){_experiments.default.isEnabled(_experiments.default.REDUX_LOGGING);0;return(0,_toolkit.configureStore)({reducer,preloadedState:initialState,middleware:[_reduxThunk.default],devTools:!1})}(Object.keys(globalReducers).length>0?globalReducers:function(s){return s})}module.exports.createStoreWithReducers=createStoreWithReducers},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./src/lib/ui/SchoolInfoConfirmationDialog.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DisplaySchoolInfoConfirmationDialog=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_SchoolInfoConfirmationDialog=_interopRequireDefault(__webpack_require__("./src/lib/ui/SchoolInfoConfirmationDialog.jsx")),_addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_SchoolInfoConfirmationDialog.default};(exports.DisplaySchoolInfoConfirmationDialog=function Template(args){return _react.default.createElement(_SchoolInfoConfirmationDialog.default,args)}.bind({})).args={scriptData:{formUrl:"",authTokenName:"auth_token",authTokenValue:"fake_auth_token",existingSchoolInfo:{}},onClose:(0,_addonActions.action)("onClose callback"),isOpen:!0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLXVpLVNjaG9vbEluZm9Db25maXJtYXRpb25EaWFsb2ctc3RvcnkuZWNjNjRhM2EuaWZyYW1lLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiaVNBQUEsSUFBQUEsT0FBQUMsd0JBQUFDLG9CQUFBLGtDQUNBQyxXQUFBQyx1QkFBQUYsb0JBQUEsdUNBQ0FHLFFBQUFKLHdCQUFBQyxvQkFBQSwrQkFDQUksUUFBQUYsdUJBQUFGLG9CQUFBLCtCQUNBSyx3QkFBQUgsdUJBQUFGLG9CQUFBLDRDQUNBTSxRQUFBSix1QkFBQUYsb0JBQUEsdUNBQ0FPLE9BQUFMLHVCQUFBRixvQkFBQSx3QkFDQVEsT0FBQVIsb0JBQUEsa0JBQ0FTLGVBQUFQLHVCQUFBRixvQkFBQSwyQkFDQVUsbUJBQUFSLHVCQUFBRixvQkFBQSx3Q0FDQVcsb0JBQUFYLG9CQUFBLHdDQUF3RSxTQUFBRSx1QkFBQVUsS0FBQSxPQUFBQSxLQUFBQSxJQUFBQyxXQUFBRCxJQUFBLFNBQUFBLElBQUEsVUFBQUUseUJBQUFDLEdBQUEsc0JBQUFDLFFBQUEsZ0JBQUFDLEVBQUEsSUFBQUQsUUFBQUUsRUFBQSxJQUFBRixRQUFBLE9BQUFGLHlCQUFBLFNBQUFBLHlCQUFBQyxHQUFBLE9BQUFBLEVBQUFHLEVBQUFELENBQUEsR0FBQUYsRUFBQSxVQUFBaEIsd0JBQUFnQixFQUFBRSxHQUFBLElBQUFBLEdBQUFGLEdBQUFBLEVBQUFGLFdBQUEsT0FBQUUsRUFBQSxVQUFBQSxHQUFBLFVBQUFJLFFBQUFKLElBQUEsbUJBQUFBLEVBQUEsZUFBQUEsR0FBQSxJQUFBRyxFQUFBSix5QkFBQUcsR0FBQSxHQUFBQyxHQUFBQSxFQUFBRSxJQUFBTCxHQUFBLE9BQUFHLEVBQUFHLElBQUFOLEdBQUEsSUFBQU8sRUFBQSxDQUFBQyxVQUFBLE1BQUFDLEVBQUFDLE9BQUFDLGdCQUFBRCxPQUFBRSx5QkFBQSxRQUFBQyxLQUFBYixFQUFBLGVBQUFhLEdBQUEsR0FBQUMsZUFBQUMsS0FBQWYsRUFBQWEsR0FBQSxLQUFBRyxFQUFB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QyxPQUNkLENBQ0YsQ0FDRixDQUNGLENBZkF0SSxRQUFRdEQsWUFBYSxFQWlCckIsSUFBSTZMLE1BQVFOLHdCQUNaTSxNQUFNQyxrQkFBb0JQLHNCQUUxQmpJLFFBQUEsUUFBcUJ1SSxLLDBPQ3RCckIsSUFBQTVNLE9BQUFJLHVCQUFBRixvQkFBQSxrQ0FDQTRNLDhCQUFBMU0sdUJBQUFGLG9CQUFBLGtEQUNBNk0sY0FBQTdNLG9CQUFBLHlEQUFnRCxTQUFBRSx1QkFBQVUsS0FBQSxPQUFBQSxLQUFBQSxJQUFBQyxXQUFBRCxJQUFBLFNBQUFBLElBQUEsQ0FBQXVELFFBQUFBLFFBRWpDLENBQ2IySSxVQUFXeEgsOEJBQUFBLFVBYW1DbkIsUUFBQUEsb0NBTi9CLFNBQVg0SSxTQUFXQyxNQUFJLE9BQUlsTixPQUFBLFFBQUE4SCxjQUFDZ0YsOEJBQUEsUUFBaUNJLEtBQVEsRUFNUHZLLEtBQUssQ0FBQyxJQUM5QnVLLEtBQU8sQ0FDekMzRyxXQUFZLENBQ1Z3RCxRQUFTLEdBQ1R2RCxjQUFlLGFBQ2ZDLGVBQWdCLGtCQUNoQk0sbUJBQW9CLENBQUMsR0FFdkJYLFNBQVMsRUFBQXVHLGNBQUFBLFFBQU8sb0JBQ2hCeEcsUUFBUSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2xpYi91aS9TY2hvb2xJbmZvQ29uZmlybWF0aW9uRGlhbG9nLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvbGliL3VpL1NjaG9vbEluZm9Db25maXJtYXRpb25EaWFsb2cuc3RvcnkuanN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBEaWFsb2csIHtCb2R5fSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL0RpYWxvZyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3RlbXBsYXRlcy9CdXR0b24nO1xuaW1wb3J0IFNjaG9vbEluZm9JbnRlcnN0aXRpYWwgZnJvbSAnLi9TY2hvb2xJbmZvSW50ZXJzdGl0aWFsJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcbmltcG9ydCBjb2xvciBmcm9tICdAY2RvL2FwcHMvdXRpbC9jb2xvcic7XG5pbXBvcnQge2dldFN0b3JlfSBmcm9tICcuLi8uLi9yZWR1eCc7XG5pbXBvcnQgZm9udENvbnN0YW50cyBmcm9tICdAY2RvL2FwcHMvZm9udENvbnN0YW50cyc7XG5pbXBvcnQgYW5hbHl0aWNzUmVwb3J0ZXIgZnJvbSAnQGNkby9hcHBzL2xpYi91dGlsL0FuYWx5dGljc1JlcG9ydGVyJztcbmltcG9ydCB7RVZFTlRTLCBQTEFURk9STVN9IGZyb20gJ0BjZG8vYXBwcy9saWIvdXRpbC9BbmFseXRpY3NDb25zdGFudHMnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVzID0ge1xuICBidXR0b246IHtcbiAgICBtYXJnaW5Ub3A6IDIwLFxuICAgIG1hcmdpbkxlZnQ6ICc1MCUnLFxuICB9LFxuICBidXR0b25SVEw6IHtcbiAgICBtYXJnaW5Ub3A6IDIwLFxuICAgIG1hcmdpblJpZ2h0OiAnNTAlJyxcbiAgfSxcbiAgdXBkYXRlQnV0dG9uOiB7XG4gICAgbWFyZ2luVG9wOiAyMCxcbiAgICBtYXJnaW5MZWZ0OiA1LFxuICB9LFxuICB1cGRhdGVCdXR0b25SVEw6IHtcbiAgICBtYXJnaW5Ub3A6IDIwLFxuICAgIG1hcmdpblJpZ2h0OiA1LFxuICB9LFxuICBpbnRybzoge1xuICAgIGZvbnRTaXplOiAxOCxcbiAgICAuLi5mb250Q29uc3RhbnRzWydtYWluLWZvbnQtc2VtaS1ib2xkJ10sXG4gICAgY29sb3I6IGNvbG9yLmNoYXJjb2FsLFxuICAgIHBhZGRpbmdSaWdodDogMjAsXG4gIH0sXG4gIHNjaG9vbE5hbWU6IHtcbiAgICBjb2xvcjogY29sb3IucHVycGxlLFxuICAgIGZvbnRTdHlsZTogJ2l0YWxpYycsXG4gIH0sXG4gIGJvZHk6IHtcbiAgICBtYXJnaW46IDEwLFxuICB9LFxufTtcblxuY2xhc3MgU2Nob29sSW5mb0NvbmZpcm1hdGlvbkRpYWxvZyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc2Nob29sTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzY3JpcHREYXRhOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZm9ybVVybDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgYXV0aFRva2VuTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgYXV0aFRva2VuVmFsdWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGV4aXN0aW5nU2Nob29sSW5mbzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgaWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIHVzZXJfc2Nob29sX2luZm9faWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIHNjaG9vbF9pZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgY291bnRyeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgc2Nob29sX3R5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHNjaG9vbF9uYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBmdWxsX2FkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB9KS5pc1JlcXVpcmVkLFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaXNPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2hvd1NjaG9vbEludGVyc3RpdGlhbDogZmFsc2UsXG4gICAgICBzY2hvb2xOYW1lOiBwcm9wcy5zY3JpcHREYXRhLmV4aXN0aW5nU2Nob29sSW5mby5zY2hvb2xfbmFtZSxcbiAgICAgIGlzT3BlbjogcHJvcHMuaXNPcGVuIHx8IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIGNsb3NlTW9kYWwgPSAoKSA9PiB7XG4gICAgYW5hbHl0aWNzUmVwb3J0ZXIuc2VuZEV2ZW50KFxuICAgICAgRVZFTlRTLlVQREFURV9TQ0hPT0xfSU5GT19ESUFMT0dfQ0xPU0VELFxuICAgICAge30sXG4gICAgICBQTEFURk9STVMuQk9USFxuICAgICk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7aXNPcGVuOiBmYWxzZX0pO1xuICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICB9O1xuXG4gIGhhbmRsZUNsaWNrWWVzID0gKCkgPT4ge1xuICAgIGFuYWx5dGljc1JlcG9ydGVyLnNlbmRFdmVudChcbiAgICAgIEVWRU5UUy5DT05GSVJNX1NDSE9PTF9DTElDS0VELFxuICAgICAge30sXG4gICAgICBQTEFURk9STVMuQk9USFxuICAgICk7XG4gICAgY29uc3Qge2F1dGhUb2tlbk5hbWUsIGF1dGhUb2tlblZhbHVlfSA9IHRoaXMucHJvcHMuc2NyaXB0RGF0YTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChhdXRoVG9rZW5OYW1lLCBhdXRoVG9rZW5WYWx1ZSk7XG4gICAgZmV0Y2goXG4gICAgICBgL2FwaS92MS91c2VyX3NjaG9vbF9pbmZvcy8ke3RoaXMucHJvcHMuc2NyaXB0RGF0YS5leGlzdGluZ1NjaG9vbEluZm8udXNlcl9zY2hvb2xfaW5mb19pZH0vdXBkYXRlX2xhc3RfY29uZmlybWF0aW9uX2RhdGVgLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgICAgfVxuICAgIClcbiAgICAgIC50aGVuKHRoaXMuY2xvc2VNb2RhbClcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yfSk7XG4gICAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVDbGlja1VwZGF0ZSA9ICgpID0+IHtcbiAgICBhbmFseXRpY3NSZXBvcnRlci5zZW5kRXZlbnQoXG4gICAgICBFVkVOVFMuVVBEQVRFX1NDSE9PTF9DTElDS0VELFxuICAgICAge30sXG4gICAgICBQTEFURk9STVMuQk9USFxuICAgICk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7c2hvd1NjaG9vbEludGVyc3RpdGlhbDogdHJ1ZX0pO1xuICB9O1xuXG4gIHJlbmRlckluaXRpYWxDb250ZW50ID0gKCkgPT4ge1xuICAgIGFuYWx5dGljc1JlcG9ydGVyLnNlbmRFdmVudChcbiAgICAgIEVWRU5UUy5VUERBVEVfU0NIT09MX0lORk9fRElBTE9HX1NIT1dOLFxuICAgICAge30sXG4gICAgICBQTEFURk9STVMuQk9USFxuICAgICk7XG4gICAgY29uc3Qge3NjaG9vbE5hbWV9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc1JUTCA9IGdldFN0b3JlKCkuZ2V0U3RhdGUoKT8uaXNSdGw7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCb2R5PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuYm9keX0+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5pbnRyb30+XG4gICAgICAgICAgICB7aTE4bi5zY2hvb2xJbmZvRGlhbG9nRGVzY3JpcHRpb24oKX1cbiAgICAgICAgICAgIDxzcGFuIHN0eWxlPXtzdHlsZXMuc2Nob29sTmFtZX0+XG4gICAgICAgICAgICAgIHtpMThuLnNjaG9vbEluZm9EaWFsb2dEZXNjcmlwdGlvblNjaG9vbE5hbWUoe3NjaG9vbE5hbWV9KX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc3R5bGU9e2lzUlRMID8gc3R5bGVzLnVwZGF0ZUJ1dHRvblJUTCA6IHN0eWxlcy51cGRhdGVCdXR0b259XG4gICAgICAgICAgdGV4dD17aTE4bi5zY2hvb2xJbmZvRGlhbG9nVXBkYXRlKCl9XG4gICAgICAgICAgY29sb3I9e0J1dHRvbi5CdXR0b25Db2xvci5ibHVlfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2tVcGRhdGV9XG4gICAgICAgICAgaWQ9XCJ1cGRhdGUtYnV0dG9uXCJcbiAgICAgICAgLz5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHN0eWxlPXtpc1JUTCA/IHN0eWxlcy5idXR0b25SVEwgOiBzdHlsZXMuYnV0dG9ufVxuICAgICAgICAgIHRleHQ9e2kxOG4ueWVzKCl9XG4gICAgICAgICAgY29sb3I9e0J1dHRvbi5CdXR0b25Db2xvci5icmFuZFNlY29uZGFyeURlZmF1bHR9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja1llc31cbiAgICAgICAgICBpZD1cInllcy1idXR0b25cIlxuICAgICAgICAvPlxuICAgICAgPC9Cb2R5PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyU2Nob29sSW5mb3JtYXRpb25Gb3JtKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Qm9keT5cbiAgICAgICAgPFNjaG9vbEluZm9JbnRlcnN0aXRpYWxcbiAgICAgICAgICBzY3JpcHREYXRhPXt0aGlzLnByb3BzLnNjcmlwdERhdGF9XG4gICAgICAgICAgb25DbG9zZT17dGhpcy5jbG9zZU1vZGFsfVxuICAgICAgICAvPlxuICAgICAgPC9Cb2R5PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3Nob3dTY2hvb2xJbnRlcnN0aXRpYWwsIGlzT3Blbn0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8RGlhbG9nIGlzT3Blbj17aXNPcGVufSBoYW5kbGVDbG9zZT17dGhpcy5jbG9zZU1vZGFsfT5cbiAgICAgICAgeyFzaG93U2Nob29sSW50ZXJzdGl0aWFsXG4gICAgICAgICAgPyB0aGlzLnJlbmRlckluaXRpYWxDb250ZW50KClcbiAgICAgICAgICA6IHRoaXMucmVuZGVyU2Nob29sSW5mb3JtYXRpb25Gb3JtKCl9XG4gICAgICA8L0RpYWxvZz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjaG9vbEluZm9Db25maXJtYXRpb25EaWFsb2c7XG4iLCIvKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19fX19fX19fX19fX19fX19fX19fX19cbiAqICAgICAgX19fX19fX19fX19fX19fX19fX19fX18tLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICBgXFxcbiAqICAgIC86LS1fXyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8fDwgPiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX19fX19fX19fX19fX19fX19fX19fX19fX18vXG4gKiAgIHwgXFxfXy9fX19fX19fX19fX19fX19fXy0tLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgfCAgICAgICAgICAgICAgICAgICBUSEUgTE9SRCBPRiBUSEUgUkVEVVggU1RPUkVTICAgICAgICAgICAgICAgICAgIHxcbiAqICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICB8ICAgICBcIlRocmVlIFN0b3JlcyBmb3IgdGhlIEVsdmVuLWtpbmdzIHVuZGVyIHRoZSBza3ksICAgICAgICAgICAgIHxcbiAqICAgICB8ICAgICAgIFNldmVuIGZvciB0aGUgRHdhcmYtbG9yZHMgaW4gdGhlaXIgaGFsbHMgb2Ygc3RvbmUsICAgICAgICAgfFxuICogICAgIHwgICAgIE5pbmUgZm9yIE1vcnRhbCBNZW4gZG9vbWVkIHRvIGRpZSwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgfCAgICAgICBPbmUgZm9yIHRoZSBEYXJrIExvcmQgb24gaGlzIGRhcmsgdGhyb25lICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICB8ICAgICBJbiB0aGUgTGFuZCBvZiBNb3Jkb3Igd2hlcmUgdGhlIFNoYWRvd3MgbGllLiAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgfCAgICAgIE9uZSBTdG9yZSB0byBydWxlIHRoZW0gYWxsLCBPbmUgU3RvcmUgdG8gZmluZCB0aGVtLCAgICAgICAgIHxcbiAqICAgICAgfCAgICAgIE9uZSBTdG9yZSB0byBicmluZyB0aGVtIGFsbCBhbmQgaW4gdGhlIGRhcmtuZXNzIGJpbmQgdGhlbSAgIHxcbiAqICAgICAgfCAgICBJbiB0aGUgTGFuZCBvZiBNb3Jkb3Igd2hlcmUgdGhlIFNoYWRvd3MgbGllLiAgICAgICAgICAgICAgICAgfFxuICogICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19fX19fX19fX19fX19fX19fX198X1xuICogICAgIHwgIF9fX19fX19fX19fX19fX19fX18tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgIGBcXFxuICogICAgIHwvYC0tXyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgIHx8WyBdfHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fX19fX19fX19fX19fX19fX18vXG4gKiAgICAgIFxcPT09L19fX19fX19fX19fX19fX19fX18tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqXG4gKiBAZmlsZSBUaGUgZ2xvYmFsIHJlZHV4IHN0b3JlIC0gXCJUaGVyZSBjYW4gYmUgb25seSBvbmVcIlxuICovXG5cbmltcG9ydCB7Y29uZmlndXJlU3RvcmV9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IEltbXV0YWJsZSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0ICogYXMgcmVkdXggZnJvbSAncmVkdXgnO1xuaW1wb3J0IHJlZHV4VGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuXG5pbXBvcnQgZXhwZXJpbWVudHMgZnJvbSAnLi91dGlsL2V4cGVyaW1lbnRzJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNyZWF0ZUxvZ2dlciA9IHJlcXVpcmUoJ3JlZHV4LWxvZ2dlcicpO1xufVxuXG5sZXQgcmVkdXhTdG9yZTtcbmxldCBnbG9iYWxSZWR1Y2VycyA9IHt9O1xuXG5pZiAoSU5fVU5JVF9URVNUKSB7XG4gIGxldCBfX29sZFJlZHV4U3RvcmU7XG4gIGxldCBfX29sZEdsb2JhbFJlZHVjZXJzO1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0dWJSZWR1eCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX19vbGRSZWR1eFN0b3JlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdSZWR1eCBzdG9yZSBoYXMgYWxyZWFkeSBiZWVuIHN0dWJiZWQuIERpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgcmVzdG9yZT8nXG4gICAgICApO1xuICAgIH1cbiAgICBfX29sZFJlZHV4U3RvcmUgPSByZWR1eFN0b3JlO1xuICAgIF9fb2xkR2xvYmFsUmVkdWNlcnMgPSBnbG9iYWxSZWR1Y2VycztcbiAgICByZWR1eFN0b3JlID0gbnVsbDtcbiAgICBnbG9iYWxSZWR1Y2VycyA9IHt9O1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnJlc3RvcmVSZWR1eCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWR1eFN0b3JlID0gX19vbGRSZWR1eFN0b3JlO1xuICAgIGdsb2JhbFJlZHVjZXJzID0gX19vbGRHbG9iYWxSZWR1Y2VycztcbiAgICBfX29sZFJlZHV4U3RvcmUgPSBudWxsO1xuICAgIF9fb2xkR2xvYmFsUmVkdWNlcnMgPSBudWxsO1xuICB9O1xufVxuXG5pZiAoSU5fU1RPUllCT09LIHx8IElOX1VOSVRfVEVTVCkge1xuICAvLyBTdG9yeWJvb2tzIG5lZWQgdGhlIGFiaWxpdHkgdG8gY3JlYXRlIG11bHRpcGxlIGRpc3RpbmN0IHN0b3JlcyBpbnN0ZWFkIG9mXG4gIC8vIHVzaW5nIGEgc2luZ2xldG9uXG4gIG1vZHVsZS5leHBvcnRzLmNyZWF0ZVN0b3JlV2l0aFJlZHVjZXJzID0gY3JlYXRlU3RvcmVXaXRoUmVkdWNlcnM7XG59XG5cbi8qKlxuICogR2V0IGEgcmVmZXJlbmNlIHRvIG91ciByZWR1eCBzdG9yZS4gSWYgaXQgZG9lc24ndCBleGlzdCB5ZXQsIGNyZWF0ZSBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JlKCkge1xuICBpZiAoIXJlZHV4U3RvcmUpIHtcbiAgICByZWR1eFN0b3JlID0gY3JlYXRlU3RvcmVXaXRoUmVkdWNlcnMoKTtcbiAgICBpZiAoZXhwZXJpbWVudHMuaXNFbmFibGVkKCdyZWR1eEdsb2JhbFN0b3JlJykpIHtcbiAgICAgIC8vIEV4cG9zZSBvdXIgc3RvcmUgZ2xvYmFsbHksIHRvIG1ha2UgZGVidWdnaW5nIGVhc2llclxuICAgICAgd2luZG93LnJlZHV4U3RvcmUgPSByZWR1eFN0b3JlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWR1eFN0b3JlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBvdXIgc3RvcmVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmVXaXRoUmVkdWNlcnMoKSB7XG4gIHJldHVybiBjcmVhdGVTdG9yZShcbiAgICBPYmplY3Qua2V5cyhnbG9iYWxSZWR1Y2VycykubGVuZ3RoID4gMCA/IGdsb2JhbFJlZHVjZXJzIDogcyA9PiBzXG4gICk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXIgbXVsdGlwbGUgdG9wLWxldmVsIHJlZHVjZXJzIHdpdGggdGhlIGdsb2JhbCBzdG9yZS4gVGhpcyBkb2VzIG5vdCByZW1vdmVcbiAqIGFueSByZWR1Y2VycyB0aGF0IGhhdmUgYmVlbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHJlZHVjZXJzIC0gYW4gb2JqZWN0IG1hcHBpbmcgdW5pcXVlIGtleXMgdG8gcmVkdWNlciBmdW5jdGlvbnNcbiAqICAgICBUaGUga2V5cyB3aWxsIGJlIHVzZWQgaW4gdGhlIHN0YXRlIG9iamVjdC5cbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgZm9yIChsZXQga2V5IGluIHJlZHVjZXJzKSB7XG4gICAgY29uc3QgZXhpc3RpbmdSZWR1Y2VyID0gZ2xvYmFsUmVkdWNlcnNba2V5XTtcbiAgICBpZiAoZXhpc3RpbmdSZWR1Y2VyICYmIGV4aXN0aW5nUmVkdWNlciAhPT0gcmVkdWNlcnNba2V5XSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWR1Y2VyIHdpdGgga2V5IFwiJHtrZXl9XCIgYWxyZWFkeSByZWdpc3RlcmVkIWApO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKGdsb2JhbFJlZHVjZXJzLCByZWR1Y2Vycyk7XG4gIGlmIChyZWR1eFN0b3JlKSB7XG4gICAgcmVkdXhTdG9yZS5yZXBsYWNlUmVkdWNlcihyZWR1eC5jb21iaW5lUmVkdWNlcnMoZ2xvYmFsUmVkdWNlcnMpKTtcbiAgfVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCBhIHJlZHVjZXIgd2l0aCB0aGUgZ2l2ZW4ga2V5IGhhcyBiZWVuIHJlZ2lzdGVyZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlZHVjZXIoa2V5KSB7XG4gIHJldHVybiAhIWdsb2JhbFJlZHVjZXJzW2tleV07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGNvbmZpZ3VyZWQgZm9yIHVzZSB0aGUgd2F5IHdlIHdhbnQgZm9yIENvZGUub3JnLlxuICogQHNlZSBodHRwOi8vcmVkdXguanMub3JnL2RvY3MvYXBpL2NyZWF0ZVN0b3JlLmh0bWxcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSByZWR1Y2VyXG4gKiBAcmV0dXJuIHtTdG9yZX0gQ29uZmlndXJlZCBSZWR1eCBzdG9yZSwgcmVhZHkgZm9yIHVzZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgaW5pdGlhbFN0YXRlKSB7XG4gIC8vIFlvdSBoYXZlIHRvIG1hbnVhbGx5IGVuYWJsZSBkZWJ1Z2dpbmcsIGJvdGggdG8ga2VlcCB0aGUgbG9nZ2VyIG91dFxuICAvLyBvZiBwcm9kdWN0aW9uIGJ1bmRsZXMsIGFuZCBiZWNhdXNlIGl0IGNhdXNlcyBhIGxvdCBvZiBjb25zb2xlIG5vaXNlIGFuZFxuICAvLyBtYWtlcyBvdXIgdW5pdCB0ZXN0cyBmYWlsLiBUbyBlbmFibGUsIGFwcGVuZCA/ZW5hYmxlRXhwZXJpbWVudHM9cmVkdXhMb2dnaW5nXG4gIC8vIHRvIHlvdXIgdXJsLiBUaGlzIHdpbGwgYWxzbyBlbmFibGUgbG9nZ2luZyBpZiB0aGVyZSBpcyBhIG5vbi1pbW11dGFibGUgb3Igbm9uLXNlcmlhbGl6YWJsZVxuICAvLyB2YWx1ZSBpbiB0aGUgcmVkdXggc3RvcmUsIHdpdGggc29tZSBpZ25vcmVzIGFscmVhZHkgc2V0IHVwIChzZWUgYmVsb3cpLlxuICB2YXIgZW5hYmxlUmVkdXhEZWJ1Z2dpbmcgPSBleHBlcmltZW50cy5pc0VuYWJsZWQoZXhwZXJpbWVudHMuUkVEVVhfTE9HR0lORyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVuYWJsZVJlZHV4RGVidWdnaW5nKSB7XG4gICAgdmFyIHJlZHV4TG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIC8vIGNvbnZlcnQgaW1tdXRhYmxlLmpzIG9iamVjdHMgdG8gSlMgZm9yIGxvZ2dpbmcgKGNvZGUgY29waWVkIGZyb21cbiAgICAgIC8vIHJlZHV4LWxvZ2dlciByZWFkbWUpXG4gICAgICBzdGF0ZVRyYW5zZm9ybWVyOiBzdGF0ZSA9PiB7XG4gICAgICAgIGxldCBuZXdTdGF0ZSA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGkgb2YgT2JqZWN0LmtleXMoc3RhdGUpKSB7XG4gICAgICAgICAgaWYgKEltbXV0YWJsZS5JdGVyYWJsZS5pc0l0ZXJhYmxlKHN0YXRlW2ldKSkge1xuICAgICAgICAgICAgbmV3U3RhdGVbaV0gPSBzdGF0ZVtpXS50b0pTKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlW2ldID0gc3RhdGVbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjb25maWd1cmVTdG9yZSh7XG4gICAgICByZWR1Y2VyOiByZWR1Y2VyLFxuICAgICAgcHJlbG9hZGVkU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICAgIG1pZGRsZXdhcmU6IGdldERlZmF1bHRNaWRkbGV3YXJlID0+XG4gICAgICAgIC8vIHRoZSBkZWZhdWx0IG1pZGRsZXdhcmUgaW5jbHVkZXMgcmVkdXggdGh1bmssIGltbXV0YWJpbGl0eSBjaGVjayxcbiAgICAgICAgLy8gYW5kIHNlcmlhbGl6YWJpbGl0eSBjaGVjay4gU29tZSBvZiBvdXIgc3RvcmUgZG9lcyBub3QgcGFzcyB0aGVzZSBjaGVja3MsXG4gICAgICAgIC8vIHNvIHdlIGFyZSBpZ25vcmluZyB0aGVtIGZvciBub3cuIFdlIG9ubHkgZW5hYmxlIHRoaXMgaW4gZGV2IG1vZGVcbiAgICAgICAgLy8gYmVjYXVzZSBpdCBjYXVzZXMgY29uc29sZSBlcnJvcnMgaWYgc29tZXRoaW5nIGZhaWxzIHRoZSBjaGVjaywgYW5kXG4gICAgICAgIC8vIGNhbiBwb3RlbnRpYWxseSBjYXVzZSBhIHBhZ2UgY3Jhc2ggKGluIHRoZSBjYXNlIG9mIHRoZSBKUyBJbnRlcnByZXRlciBhbmQgdGhlXG4gICAgICAgIC8vIGltbXV0YWJpbGl0eSBjaGVjaykuXG4gICAgICAgIGdldERlZmF1bHRNaWRkbGV3YXJlKHtcbiAgICAgICAgICBpbW11dGFibGVDaGVjazoge1xuICAgICAgICAgICAgaWdub3JlZFBhdGhzOiBbJ2pzSW50ZXJwcmV0ZXInLCAnanNkZWJ1Z2dlciddLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VyaWFsaXphYmxlQ2hlY2s6IHtcbiAgICAgICAgICAgIGlnbm9yZWRBY3Rpb25QYXRoczogW1xuICAgICAgICAgICAgICAnYmxvYicsXG4gICAgICAgICAgICAgICdqc2RlYnVnZ2VyJyxcbiAgICAgICAgICAgICAgJ29ic2VydmVyJyxcbiAgICAgICAgICAgICAgJ2pzSW50ZXJwcmV0ZXInLFxuICAgICAgICAgICAgICAncnVuQXBwJyxcbiAgICAgICAgICAgICAgJ3Byb3BzLnNob3dOZXh0SGludCcsXG4gICAgICAgICAgICAgICdwcm9wcy5hc3NldFVybCcsXG4gICAgICAgICAgICAgICdwcm9wcy5leHBvcnRBcHAnLFxuICAgICAgICAgICAgICAncGF5bG9hZC5nZXRDaGFuZ2VzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpZ25vcmVkUGF0aHM6IFtcbiAgICAgICAgICAgICAgJ2hpZGRlbkxlc3NvbicsXG4gICAgICAgICAgICAgICdibG9iJyxcbiAgICAgICAgICAgICAgJ3BhZ2VDb25zdGFudHMnLFxuICAgICAgICAgICAgICAnb2JzZXJ2ZXInLFxuICAgICAgICAgICAgICAnd2F0Y2hlZEV4cHJlc3Npb25zJyxcbiAgICAgICAgICAgICAgJ2luc3RydWN0aW9ucycsXG4gICAgICAgICAgICAgICdydW5BcHAnLFxuICAgICAgICAgICAgICAnanNkZWJ1Z2dlcicsXG4gICAgICAgICAgICAgIC9hbmltYXRpb25MaXN0XFwucHJvcHNCeUtleS4qXFwuYmxvYi8sXG4gICAgICAgICAgICAgICdtYWtlcicsXG4gICAgICAgICAgICAgICdkYXRhJyxcbiAgICAgICAgICAgICAgJ3NjcmVlbnMnLFxuICAgICAgICAgICAgICAnaGVhZGVyLmdldExldmVsQnVpbGRlckNoYW5nZXMnLFxuICAgICAgICAgICAgICAnZ2V0Q2hhbmdlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLmNvbmNhdChyZWR1eExvZ2dlciksXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29uZmlndXJlU3RvcmUoe1xuICAgIHJlZHVjZXI6IHJlZHVjZXIsXG4gICAgcHJlbG9hZGVkU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICBtaWRkbGV3YXJlOiBbcmVkdXhUaHVua10sXG4gICAgZGV2VG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLCAvLyBvbmx5IGVuYWJsZSBkZXZUb29scyBpbiBkZXZlbG9wbWVudFxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bms7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTY2hvb2xJbmZvQ29uZmlybWF0aW9uRGlhbG9nIGZyb20gJy4vU2Nob29sSW5mb0NvbmZpcm1hdGlvbkRpYWxvZyc7XG5pbXBvcnQge2FjdGlvbn0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1hY3Rpb25zJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnQ6IFNjaG9vbEluZm9Db25maXJtYXRpb25EaWFsb2csXG59O1xuXG4vL1xuLy8gVEVNUExBVEVcbi8vXG5cbmNvbnN0IFRlbXBsYXRlID0gYXJncyA9PiA8U2Nob29sSW5mb0NvbmZpcm1hdGlvbkRpYWxvZyB7Li4uYXJnc30gLz47XG5cbi8vXG4vLyBTVE9SSUVTXG4vL1xuXG5leHBvcnQgY29uc3QgRGlzcGxheVNjaG9vbEluZm9Db25maXJtYXRpb25EaWFsb2cgPSBUZW1wbGF0ZS5iaW5kKHt9KTtcbkRpc3BsYXlTY2hvb2xJbmZvQ29uZmlybWF0aW9uRGlhbG9nLmFyZ3MgPSB7XG4gIHNjcmlwdERhdGE6IHtcbiAgICBmb3JtVXJsOiAnJyxcbiAgICBhdXRoVG9rZW5OYW1lOiAnYXV0aF90b2tlbicsXG4gICAgYXV0aFRva2VuVmFsdWU6ICdmYWtlX2F1dGhfdG9rZW4nLFxuICAgIGV4aXN0aW5nU2Nob29sSW5mbzoge30sXG4gIH0sXG4gIG9uQ2xvc2U6IGFjdGlvbignb25DbG9zZSBjYWxsYmFjaycpLFxuICBpc09wZW46IHRydWUsXG59O1xuIl0sIm5hbWVzIjpbIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0RpYWxvZyIsIl9CdXR0b24iLCJfU2Nob29sSW5mb0ludGVyc3RpdGlhbCIsIl9sb2NhbGUiLCJfY29sb3IiLCJfcmVkdXgiLCJfZm9udENvbnN0YW50cyIsIl9BbmFseXRpY3NSZXBvcnRlciIsIl9BbmFseXRpY3NDb25zdGFudHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJzdHlsZXMiLCJleHBvcnRzIiwiYnV0dG9uIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImJ1dHRvblJUTCIsIm1hcmdpblJpZ2h0IiwidXBkYXRlQnV0dG9uIiwidXBkYXRlQnV0dG9uUlRMIiwiaW50cm8iLCJmb250U2l6ZSIsImZvbnRDb25zdGFudHMiLCJjb2xvciIsImNoYXJjb2FsIiwicGFkZGluZ1JpZ2h0Iiwic2Nob29sTmFtZSIsInB1cnBsZSIsImZvbnRTdHlsZSIsImJvZHkiLCJtYXJnaW4iLCJTY2hvb2xJbmZvQ29uZmlybWF0aW9uRGlhbG9nIiwiX0NvbXBvbmVudCIsInByb3BzIiwiX3RoaXMiLCJhbmFseXRpY3NSZXBvcnRlciIsInNlbmRFdmVudCIsIkVWRU5UUyIsIlVQREFURV9TQ0hPT0xfSU5GT19ESUFMT0dfQ0xPU0VEIiwiUExBVEZPUk1TIiwiQk9USCIsInNldFN0YXRlIiwiaXNPcGVuIiwib25DbG9zZSIsIkNPTkZJUk1fU0NIT09MX0NMSUNLRUQiLCJfdGhpcyRwcm9wcyRzY3JpcHREYXQiLCJzY3JpcHREYXRhIiwiYXV0aFRva2VuTmFtZSIsImF1dGhUb2tlblZhbHVlIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsImZldGNoIiwiY29uY2F0IiwiZXhpc3RpbmdTY2hvb2xJbmZvIiwidXNlcl9zY2hvb2xfaW5mb19pZCIsIm1ldGhvZCIsInRoZW4iLCJjbG9zZU1vZGFsIiwiZXJyb3IiLCJVUERBVEVfU0NIT09MX0NMSUNLRUQiLCJzaG93U2Nob29sSW50ZXJzdGl0aWFsIiwiX2dldFN0b3JlJGdldFN0YXRlIiwiVVBEQVRFX1NDSE9PTF9JTkZPX0RJQUxPR19TSE9XTiIsInN0YXRlIiwiaXNSVEwiLCJnZXRTdG9yZSIsImdldFN0YXRlIiwiaXNSdGwiLCJjcmVhdGVFbGVtZW50IiwiQm9keSIsInN0eWxlIiwiaTE4biIsInNjaG9vbEluZm9EaWFsb2dEZXNjcmlwdGlvbiIsInNjaG9vbEluZm9EaWFsb2dEZXNjcmlwdGlvblNjaG9vbE5hbWUiLCJ0ZXh0Iiwic2Nob29sSW5mb0RpYWxvZ1VwZGF0ZSIsIkJ1dHRvbiIsIkJ1dHRvbkNvbG9yIiwiYmx1ZSIsIm9uQ2xpY2siLCJoYW5kbGVDbGlja1VwZGF0ZSIsImlkIiwieWVzIiwiYnJhbmRTZWNvbmRhcnlEZWZhdWx0IiwiaGFuZGxlQ2xpY2tZZXMiLCJzY2hvb2xfbmFtZSIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3Byb3RvIiwicmVuZGVyU2Nob29sSW5mb3JtYXRpb25Gb3JtIiwidGhpcyIsInJlbmRlciIsIl90aGlzJHN0YXRlIiwiaGFuZGxlQ2xvc2UiLCJyZW5kZXJJbml0aWFsQ29udGVudCIsIkNvbXBvbmVudCIsIlByb3BUeXBlcyIsInN0cmluZyIsInNoYXBlIiwiZm9ybVVybCIsImlzUmVxdWlyZWQiLCJudW1iZXIiLCJzY2hvb2xfaWQiLCJjb3VudHJ5Iiwic2Nob29sX3R5cGUiLCJmdWxsX2FkZHJlc3MiLCJmdW5jIiwiYm9vbCIsInJlZHV4U3RvcmUiLCJjcmVhdGVTdG9yZVdpdGhSZWR1Y2VycyIsImV4cGVyaW1lbnRzIiwiaXNFbmFibGVkIiwid2luZG93IiwiaGFzUmVkdWNlciIsImdsb2JhbFJlZHVjZXJzIiwicmVnaXN0ZXJSZWR1Y2VycyIsInJlZHVjZXJzIiwiZXhpc3RpbmdSZWR1Y2VyIiwiRXJyb3IiLCJhc3NpZ24iLCJyZXBsYWNlUmVkdWNlciIsInJlZHV4IiwiY29tYmluZVJlZHVjZXJzIiwiX3Rvb2xraXQiLCJfcmVkdXhUaHVuayIsIl9leHBlcmltZW50cyIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsImluaXRpYWxTdGF0ZSIsIlJFRFVYX0xPR0dJTkciLCJwcm9jZXNzIiwiY29uZmlndXJlU3RvcmUiLCJwcmVsb2FkZWRTdGF0ZSIsIm1pZGRsZXdhcmUiLCJyZWR1eFRodW5rIiwiZGV2VG9vbHMiLCJzIiwibW9kdWxlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIl9yZWYiLCJkaXNwYXRjaCIsIm5leHQiLCJhY3Rpb24iLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX1NjaG9vbEluZm9Db25maXJtYXRpb25EaWFsb2ciLCJfYWRkb25BY3Rpb25zIiwiY29tcG9uZW50IiwiVGVtcGxhdGUiLCJhcmdzIl0sInNvdXJjZVJvb3QiOiIifQ==