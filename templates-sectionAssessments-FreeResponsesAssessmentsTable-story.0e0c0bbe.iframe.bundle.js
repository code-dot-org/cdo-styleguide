(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[2677],{"./src/templates/sectionAssessments/FreeResponsesAssessmentsTable.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.COLUMNS=void 0;var _orderBy=_interopRequireDefault(__webpack_require__("./node_modules/lodash/orderBy.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireWildcard(__webpack_require__("./node_modules/react/index.js")),Table=_interopRequireWildcard(__webpack_require__("./node_modules/reactabular-table/dist/index.js")),sort=_interopRequireWildcard(__webpack_require__("./node_modules/sortabular/dist/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_tableConstants=__webpack_require__("./src/templates/tables/tableConstants.js"),_wrapped_sortable=_interopRequireDefault(__webpack_require__("./src/templates/tables/wrapped_sortable.js")),_assessmentDataShapes=__webpack_require__("./src/templates/sectionAssessments/assessmentDataShapes.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var COLUMNS=exports.COLUMNS={NAME:0,RESPONSE:1},FreeResponsesAssessmentsTable=function(_Component){function FreeResponsesAssessmentsTable(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_Component.call.apply(_Component,[this].concat(args))||this,"state",_defineProperty({},COLUMNS.NAME,{direction:"desc",position:0})),_defineProperty(_this,"getSortingColumns",(function(){return _this.state.sortingColumns||{}})),_defineProperty(_this,"onSort",(function(selectedColumn){_this.setState({sortingColumns:sort.byColumn({sortingColumns:_this.state.sortingColumns,sortingOrder:{FIRST:"asc",asc:"desc",desc:"asc"},selectedColumn})})})),_defineProperty(_this,"responseCellFormatter",(function(response,_ref){_ref.rowData,_ref.rowIndex;return _react.default.createElement("div",null,response&&_react.default.createElement("div",{style:styles.response},response),!response&&_react.default.createElement("div",{style:styles.noResponse},_locale.default.emptyFreeResponse()))})),_defineProperty(_this,"getColumns",(function(sortable,index){return[{property:"name",header:{label:_locale.default.studentName(),props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),styles.studentNameColumnHeader)},transforms:[sortable]},cell:{props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.cell),styles.studentNameColumnCell)}}},{property:"response",header:{label:_locale.default.response(),props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),styles.responseHeaderCell)}},cell:{formatters:[_this.responseCellFormatter],props:{style:_tableConstants.tableLayoutStyles.cell}}}]})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FreeResponsesAssessmentsTable,_Component),FreeResponsesAssessmentsTable.prototype.render=function render(){var sortable=(0,_wrapped_sortable.default)(this.getSortingColumns,this.onSort,_tableConstants.sortableOptions),columns=this.getColumns(sortable),sortingColumns=this.getSortingColumns(),sortedRows=sort.sorter({columns,sortingColumns,sort:_orderBy.default})(this.props.freeResponses);return _react.default.createElement(Table.Provider,{columns,style:_tableConstants.tableLayoutStyles.table},_react.default.createElement(Table.Header,null),_react.default.createElement(Table.Body,{rows:sortedRows,rowKey:"id"}))},FreeResponsesAssessmentsTable}(_react.Component);_defineProperty(FreeResponsesAssessmentsTable,"propTypes",{freeResponses:_propTypes.default.arrayOf(_assessmentDataShapes.freeResponsesDataPropType)});var styles={studentNameColumnHeader:{padding:15},studentNameColumnCell:{textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden",maxWidth:200,padding:15,verticalAlign:"top"},responseColumnHeader:{padding:15},noResponse:{color:_color.default.lighter_gray},response:{whiteSpace:"pre-wrap"}};exports.default=FreeResponsesAssessmentsTable},"./src/templates/sectionAssessments/assessmentDataShapes.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.studentWithMatchResponsesPropType=exports.studentWithMCResponsesPropType=exports.studentOverviewDataPropType=exports.studentMatchResponsePropType=exports.studentMCResponsePropType=exports.optionDataPropTypeMatch=exports.multipleChoiceQuestionPropType=exports.multipleChoiceDataPropType=exports.matchQuestionPropType=exports.matchDetailsQuestionPropType=exports.matchDataPropType=exports.freeResponsesDataPropType=exports.QUESTION_CHARACTER_LIMIT=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js"));exports.freeResponsesDataPropType=_propTypes.default.shape({id:_propTypes.default.number,name:_propTypes.default.string,response:_propTypes.default.string});var multipleChoiceAnswerDataPropType=_propTypes.default.shape({multipleChoiceOption:_propTypes.default.string,numAnswered:_propTypes.default.number,isCorrect:_propTypes.default.bool,percentAnswered:_propTypes.default.number,text:_propTypes.default.string}),studentMCResponsePropType=(exports.multipleChoiceDataPropType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,question:_propTypes.default.string.isRequired,questionNumber:_propTypes.default.number,answers:_propTypes.default.arrayOf(multipleChoiceAnswerDataPropType),totalAnswered:_propTypes.default.number.isRequired,notAnswered:_propTypes.default.number.isRequired}),exports.studentMCResponsePropType=_propTypes.default.shape({isCorrect:_propTypes.default.bool,responses:_propTypes.default.string})),answerMatchDataPropType=(exports.studentWithMCResponsesPropType=_propTypes.default.shape({id:_propTypes.default.number,name:_propTypes.default.string,studentResponses:_propTypes.default.arrayOf(studentMCResponsePropType)}),exports.multipleChoiceQuestionPropType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,question:_propTypes.default.string.isRequired,correctAnswer:_propTypes.default.string.isRequired}),exports.studentOverviewDataPropType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,name:_propTypes.default.string.isRequired,numMultipleChoiceCorrect:_propTypes.default.number,numMultipleChoice:_propTypes.default.number,numMatchCorrect:_propTypes.default.number,numMatch:_propTypes.default.number,submissionTimeStamp:_propTypes.default.instanceOf(Date).isRequired,isSubmitted:_propTypes.default.bool.isRequired,inProgress:_propTypes.default.bool.isRequired,url:_propTypes.default.string}),_propTypes.default.shape({answer:_propTypes.default.string,isCorrect:_propTypes.default.bool,numAnswered:_propTypes.default.number})),optionDataPropTypeMatch=exports.optionDataPropTypeMatch=_propTypes.default.shape({option:_propTypes.default.string,totalAnswered:_propTypes.default.number,notAnswered:_propTypes.default.number,id:_propTypes.default.number,answers:_propTypes.default.arrayOf(answerMatchDataPropType)}),studentMatchResponsePropType=(exports.matchDataPropType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,question:_propTypes.default.string.isRequired,questionNumber:_propTypes.default.number,options:_propTypes.default.arrayOf(optionDataPropTypeMatch)}),exports.matchDetailsQuestionPropType=_propTypes.default.shape({question:_propTypes.default.string.isRequired,questionType:_propTypes.default.string,answers:_propTypes.default.array,options:_propTypes.default.array}),exports.studentMatchResponsePropType=_propTypes.default.shape({responses:_propTypes.default.array}));exports.studentWithMatchResponsesPropType=_propTypes.default.shape({id:_propTypes.default.number,name:_propTypes.default.string,studentResponses:_propTypes.default.arrayOf(studentMatchResponsePropType)}),exports.matchQuestionPropType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,question:_propTypes.default.string.isRequired,questionNumber:_propTypes.default.number.isRequired,answers:_propTypes.default.array,options:_propTypes.default.array}),exports.QUESTION_CHARACTER_LIMIT=110},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/templates/sectionAssessments/FreeResponsesAssessmentsTable.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.SubmittedNoResponse=exports.StudentFreeResponseAnswers=exports.OneAssessmentCompleted=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_assessmentsTestHelpers=__webpack_require__("./src/templates/sectionAssessments/assessmentsTestHelpers.js"),_FreeResponsesAssessmentsTable=_interopRequireDefault(__webpack_require__("./src/templates/sectionAssessments/FreeResponsesAssessmentsTable.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_FreeResponsesAssessmentsTable.default};var Template=function Template(args){return _react.default.createElement(_FreeResponsesAssessmentsTable.default,args)};(exports.StudentFreeResponseAnswers=Template.bind({})).args={freeResponses:_assessmentsTestHelpers.questionOne},(exports.OneAssessmentCompleted=Template.bind({})).args={freeResponses:_assessmentsTestHelpers.questionTwo},(exports.SubmittedNoResponse=Template.bind({})).args={freeResponses:_assessmentsTestHelpers.questionThree}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,