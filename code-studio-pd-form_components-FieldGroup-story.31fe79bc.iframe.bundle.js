(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5674],{"./src/code-studio/pd/form_components/FieldGroup.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_excluded=["id","validationState","errorMessage","label","required","onChange","children","labelWidth","controlWidth","inlineControl"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var REQUIRED=_react.default.createElement("span",{style:{color:"red"}},"Â *"),FieldGroup=function(_React$Component){function FieldGroup(props){var _this;return(_this=_React$Component.call(this,props)||this).handleChange=_this.handleChange.bind(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this)),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FieldGroup,_React$Component);var _proto=FieldGroup.prototype;return _proto.handleChange=function handleChange(event){var value=event.target.value;("number"!==this.props.type||value.match(/^$|^-?[0-9]*\.?[0-9]*$/))&&this.props.onChange&&this.props.onChange(_defineProperty({},this.props.id,value))},_proto.renderControl=function renderControl(controlWidth,children,props){var updatedProps=_objectSpread(_objectSpread({},props),{},{type:"number"===props.type?"text":props.type});return _react.default.createElement(_reactBootstrap.Col,controlWidth,_react.default.createElement(_reactBootstrap.FormControl,_extends({onChange:this.handleChange},updatedProps),children))},_proto.render=function render(){var _this$props=this.props,id=_this$props.id,validationState=_this$props.validationState,errorMessage=_this$props.errorMessage,label=_this$props.label,required=_this$props.required,children=(_this$props.onChange,_this$props.children),labelWidth=_this$props.labelWidth,controlWidth=_this$props.controlWidth,inlineControl=_this$props.inlineControl,props=_objectWithoutProperties(_this$props,_excluded);return _react.default.createElement(_reactBootstrap.FormGroup,{controlId:id,validationState},_react.default.createElement(_reactBootstrap.Row,null,_react.default.createElement(_reactBootstrap.Col,labelWidth,_react.default.createElement(_reactBootstrap.ControlLabel,null,label,required&&REQUIRED)),inlineControl&&this.renderControl(controlWidth,children,props)),!inlineControl&&_react.default.createElement(_reactBootstrap.Row,null,this.renderControl(controlWidth,children,props)),_react.default.createElement(_reactBootstrap.HelpBlock,null,errorMessage))},FieldGroup}(_react.default.Component);exports.default=FieldGroup,FieldGroup.defaultProps={labelWidth:{md:12},controlWidth:{md:12}},FieldGroup.propTypes={id:_propTypes.default.string.isRequired,type:_propTypes.default.string,label:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.element]).isRequired,required:_propTypes.default.bool,validationState:_propTypes.default.string,errorMessage:_propTypes.default.string,children:_propTypes.default.arrayOf(_propTypes.default.node),onChange:_propTypes.default.func,labelWidth:_propTypes.default.object,controlWidth:_propTypes.default.object,inlineControl:_propTypes.default.bool},module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/code-studio/pd/form_components/FieldGroup.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DropdownWithChildren=exports.BasicExample=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_FieldGroup=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/FieldGroup.jsx")),_addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var TestWrapper=function(_React$Component){function TestWrapper(props){var _this;return(_this=_React$Component.call(this,props)||this).state={data:""},_this.handleChange=_this.handleChange.bind(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this)),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(TestWrapper,_React$Component);var _proto=TestWrapper.prototype;return _proto.handleChange=function handleChange(newState){this.props.onChange(newState),this.setState({data:newState.full})},_proto.render=function render(){var valid;return this.state.data&&(valid=/^[a-zA-Z]*$/.test(this.state.data)?"success":"error"),_react.default.createElement(_FieldGroup.default,{id:this.props.id,type:this.props.type,componentClass:this.props.componentClass,label:this.props.label,validationState:valid,onChange:this.handleChange,value:this.state.data,required:!0},this.props.children)},TestWrapper}(_react.default.Component);TestWrapper.propTypes={id:_propTypes.default.string.isRequired,type:_propTypes.default.string,componentClass:_propTypes.default.string,label:_propTypes.default.string.isRequired,onChange:_propTypes.default.func.isRequired,children:_propTypes.default.arrayOf(_propTypes.default.node)};var _default={title:"FormComponents/FieldGroup",component:_FieldGroup.default};exports.default=_default;var Template=function Template(args){return _react.default.createElement(TestWrapper,args)},BasicExample=Template.bind({});exports.BasicExample=BasicExample,BasicExample.args={id:"basic",type:"text",label:"this is a basic fieldgroup",onChange:(0,_addonActions.action)("onChange")};var DropdownWithChildren=Template.bind({});exports.DropdownWithChildren=DropdownWithChildren,DropdownWithChildren.args={id:"dropdown",componentClass:"select",label:"a dropdown with children",onChange:(0,_addonActions.action)("onChange"),children:[_react.default.createElement("option",{key:"title"},"Please Select One:"),_react.default.createElement("option",{key:"first",value:"first"},"One"),_react.default.createElement("option",{key:"second",value:"second"},"Two"),_react.default.createElement("option",{key:"third",value:"third"},"Three")]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1zdHVkaW8tcGQtZm9ybV9jb21wb25lbnRzLUZpZWxkR3JvdXAtc3RvcnkuYmU1OGRiN2QuaWZyYW1lLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoid1FBQUEsaUdBQ0Esb0ZBRUEsa0YsNHNFQVVBLElBQU1BLFNBQVcscUNBQU1DLE1BQU8sQ0FBQ0MsTUFBTyxRQUFyQixNQUVJQyxXQUFBQSxTQUFBQSxrQkFDbkIsb0JBQVlDLE9BQU8saUJBQ2pCLGlDQUFNQSxRQUFOLE1BQ0tDLGFBQWUsTUFBS0EsYUFBYUMsSyx5SkFBbEIsU0FGSCxLQUdsQixFLDZQQUVERCxhQUFBLFNBQUFBLGFBQWFFLE9BQ1gsSUFBTUMsTUFBUUQsTUFBTUUsT0FBT0QsT0FDSCxXQUFwQkUsS0FBS04sTUFBTU8sTUFJUkgsTUFBTUksTUFBTSw0QkFJbkJGLEtBQUtOLE1BQU1TLFVBQ1RILEtBQUtOLE1BQU1TLFNBQVgsbUJBQ0dILEtBQUtOLE1BQU1VLEdBQUtOLE9BRXRCLEUsT0FFRE8sY0FBQSxTQUFBQSxjQUFjQyxhQUFjQyxTQUFVYixPQUdwQyxJQUFNYyxhQUFlLGNBQUgsaUJBQ2JkLE9BRGEsSUFFaEJPLEtBQXFCLFdBQWZQLE1BQU1PLEtBQW9CLE9BQVNQLE1BQU1PLE9BR2pELE9BQ0UsNkJBQUMsZ0JBQUFRLElBQVFILGFBQ1AsNkJBQUMsZ0JBQUFJLFlBQUQsVUFBYVAsU0FBVUgsS0FBS0wsY0FBa0JhLGNBQzNDRCxVQUlSLEUsT0FFREksT0FBQSxTQUFBQSxTQUNFLGdCQWFJWCxLQUFLTixNQVpQVSxHQURGLFlBQ0VBLEdBQ0FRLGdCQUZGLFlBRUVBLGdCQUNBQyxhQUhGLFlBR0VBLGFBQ0FDLE1BSkYsWUFJRUEsTUFDQUMsU0FMRixZQUtFQSxTQUdBUixVQVJGLFlBT0VKLFNBUEYsWUFRRUksVUFDQVMsV0FURixZQVNFQSxXQUNBVixhQVZGLFlBVUVBLGFBQ0FXLGNBWEYsWUFXRUEsY0FDR3ZCLE1BWkwsZ0RBZUEsT0FDRSw2QkFBQyxnQkFBQXdCLFVBQUQsQ0FBV0MsVUFBV2YsR0FBSVEsaUJBQ3hCLDZCQUFDLGdCQUFBUSxJQUFELEtBQ0UsNkJBQUMsZ0JBQUFYLElBQVFPLFdBQ1AsNkJBQUMsZ0JBQUFLLGFBQUQsS0FDR1AsTUFDQUMsVUFBWXpCLFdBR2hCMkIsZUFBaUJqQixLQUFLSyxjQUFjQyxhQUFjQyxTQUFVYixTQUU3RHVCLGVBQ0EsNkJBQUMsZ0JBQUFHLElBQUQsS0FBTXBCLEtBQUtLLGNBQWNDLGFBQWNDLFNBQVViLFFBRW5ELDZCQUFDLGdCQUFBNEIsVUFBRCxLQUFZVCxjQUdqQixFLFdBeEVrQnBCLENBQW1COEIsT0FBQUEsUUFBTUMsVywyQkEyRTlDL0IsV0FBV2dDLGFBQWUsQ0FDeEJULFdBQVksQ0FBQ1UsR0FBSSxJQUNqQnBCLGFBQWMsQ0FBQ29CLEdBQUksS0FHckJqQyxXQUFXa0MsVUFBWSxDQUNyQnZCLEdBQUl3QixXQUFBQSxRQUFVQyxPQUFPQyxXQUNyQjdCLEtBQU0yQixXQUFBQSxRQUFVQyxPQUNoQmYsTUFBT2MsV0FBQUEsUUFBVUcsVUFBVSxDQUFDSCxXQUFBQSxRQUFVQyxPQUFRRCxXQUFBQSxRQUFVSSxVQUFVRixXQUNsRWYsU0FBVWEsV0FBQUEsUUFBVUssS0FDcEJyQixnQkFBaUJnQixXQUFBQSxRQUFVQyxPQUMzQmhCLGFBQWNlLFdBQUFBLFFBQVVDLE9BQ3hCdEIsU0FBVXFCLFdBQUFBLFFBQVVNLFFBQVFOLFdBQUFBLFFBQVVPLE1BQ3RDaEMsU0FBVXlCLFdBQUFBLFFBQVVRLEtBQ3BCcEIsV0FBWVksV0FBQUEsUUFBVVMsT0FDdEIvQixhQUFjc0IsV0FBQUEsUUFBVVMsT0FDeEJwQixjQUFlVyxXQUFBQSxRQUFVSyxNLDZKQ2pHM0IsSUFBSUsscUJBQXVCLG9CQUFRLHlEQUVuQyxTQUFTQyxnQkFBaUIsQ0FFMUJDLE9BQU9DLFFBQVUsV0FDZixTQUFTQyxLQUFLaEQsTUFBT2lELFNBQVVDLGNBQWVDLFNBQVVDLGFBQWNDLFFBQ3BFLEdBQUlBLFNBQVdULHFCQUFmLENBSUEsSUFBSVUsSUFBTSxJQUFJQyxNQUNaLG1MQUtGLE1BREFELElBQUlFLEtBQU8sc0JBQ0xGLEdBUE4sQ0FRRixDQUVBLFNBQVNHLFVBQ1AsT0FBT1QsSUFDVCxDQUhBQSxLQUFLWixXQUFhWSxLQU1sQixJQUFJVSxlQUFpQixDQUNuQkMsTUFBT1gsS0FDUFQsS0FBTVMsS0FDTk4sS0FBTU0sS0FDTlksT0FBUVosS0FDUkwsT0FBUUssS0FDUmIsT0FBUWEsS0FDUmEsT0FBUWIsS0FFUmMsSUFBS2QsS0FDTFIsUUFBU2lCLFFBQ1RuQixRQUFTVSxLQUNUZSxXQUFZTixRQUNaaEIsS0FBTU8sS0FDTmdCLFNBQVVQLFFBQ1ZRLE1BQU9SLFFBQ1BwQixVQUFXb0IsUUFDWFMsTUFBT1QsUUFDUFUsTUFBT1YsU0FNVCxPQUhBQyxlQUFlVSxlQUFpQnZCLGNBQ2hDYSxlQUFleEIsVUFBWXdCLGVBRXBCQSxjQUNULEMsK0ZDaENFWixPQUFPQyxRQUFVLG9CQUFRLHdEQUFSLEUsZ0ZDZm5CRCxPQUFPQyxRQUZvQiw4QyxtUUNUM0IsaUdBQ0Esb0ZBQ0EsK0dBQ0EsMkYseVFBRU1zQixZQUFBQSxTQUFBQSxrQkFDSixxQkFBWXJFLE9BQU8saUJBQ2pCLGlDQUFNQSxRQUFOLE1BQ0tzRSxNQUFRLENBQ1hDLEtBQU0sSUFFUixNQUFLdEUsYUFBZSxNQUFLQSxhQUFhQyxLLHlKQUFsQixTQUxILEtBTWxCLEUsK1BBRURELGFBQUEsU0FBQUEsYUFBYXVFLFVBQ1hsRSxLQUFLTixNQUFNUyxTQUFTK0QsVUFDcEJsRSxLQUFLbUUsU0FBUyxDQUNaRixLQUFNQyxTQUFTRSxNQUVsQixFLE9BRUR6RCxPQUFBLFNBQUFBLFNBQ0UsSUFBSTBELE1BSUosT0FISXJFLEtBQUtnRSxNQUFNQyxPQUNiSSxNQUFRLGNBQWNDLEtBQUt0RSxLQUFLZ0UsTUFBTUMsTUFBUSxVQUFZLFNBRzFELDZCQUFDLG9CQUFELENBQ0U3RCxHQUFJSixLQUFLTixNQUFNVSxHQUNmSCxLQUFNRCxLQUFLTixNQUFNTyxLQUNqQnNFLGVBQWdCdkUsS0FBS04sTUFBTTZFLGVBQzNCekQsTUFBT2QsS0FBS04sTUFBTW9CLE1BQ2xCRixnQkFBaUJ5RCxNQUNqQmxFLFNBQVVILEtBQUtMLGFBQ2ZHLE1BQU9FLEtBQUtnRSxNQUFNQyxLQUNsQmxELFVBQVUsR0FFVGYsS0FBS04sTUFBTWEsU0FHakIsRSxZQW5DR3dELENBQW9CeEMsT0FBQUEsUUFBTUMsV0FzQ2hDdUMsWUFBWXBDLFVBQVksQ0FDdEJ2QixHQUFJd0IsV0FBQUEsUUFBVUMsT0FBT0MsV0FDckI3QixLQUFNMkIsV0FBQUEsUUFBVUMsT0FDaEIwQyxlQUFnQjNDLFdBQUFBLFFBQVVDLE9BQzFCZixNQUFPYyxXQUFBQSxRQUFVQyxPQUFPQyxXQUN4QjNCLFNBQVV5QixXQUFBQSxRQUFVUSxLQUFLTixXQUN6QnZCLFNBQVVxQixXQUFBQSxRQUFVTSxRQUFRTixXQUFBQSxRQUFVTyxPLGFBR3pCLENBQ2JxQyxNQUFPLDRCQUNQQyxVQUFXaEYsWUFBQUEsUyx5QkFHYixJQUFNaUYsU0FBVyxTQUFYQSxTQUFXQyxNQUFJLE9BQUksNkJBQUNaLFlBQWdCWSxLQUFyQixFQUVSQyxhQUFlRixTQUFTOUUsS0FBSyxDQUFDLEcsa0NBQzNDZ0YsYUFBYUQsS0FBTyxDQUNsQnZFLEdBQUksUUFDSkgsS0FBTSxPQUNOYSxNQUFPLDZCQUNQWCxVQUFVLEVBQUEwRSxjQUFBQSxRQUFPLGFBR1osSUFBTUMscUJBQXVCSixTQUFTOUUsS0FBSyxDQUFDLEcsa0RBQ25Ea0YscUJBQXFCSCxLQUFPLENBQzFCdkUsR0FBSSxXQUNKbUUsZUFBZ0IsU0FDaEJ6RCxNQUFPLDJCQUNQWCxVQUFVLEVBQUEwRSxjQUFBQSxRQUFPLFlBQ2pCdEUsU0FBVSxDQUNSLHVDQUFRd0UsSUFBSSxTQUFaLHNCQUNBLHVDQUFRQSxJQUFJLFFBQVFqRixNQUFNLFNBQTFCLE9BR0EsdUNBQVFpRixJQUFJLFNBQVNqRixNQUFNLFVBQTNCLE9BR0EsdUNBQVFpRixJQUFJLFFBQVFqRixNQUFNLFNBQTFCLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vcGQvZm9ybV9jb21wb25lbnRzL0ZpZWxkR3JvdXAuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL3BkL2Zvcm1fY29tcG9uZW50cy9GaWVsZEdyb3VwLnN0b3J5LmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtaW1wb3J0cyAqL1xuaW1wb3J0IHtcbiAgQ29udHJvbExhYmVsLFxuICBGb3JtQ29udHJvbCxcbiAgRm9ybUdyb3VwLFxuICBIZWxwQmxvY2ssXG4gIFJvdyxcbiAgQ29sLFxufSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLWltcG9ydHMgKi9cblxuY29uc3QgUkVRVUlSRUQgPSA8c3BhbiBzdHlsZT17e2NvbG9yOiAncmVkJ319PiZuYnNwOyo8L3NwYW4+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWVsZEdyb3VwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgaWYgKHRoaXMucHJvcHMudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFdlIG9ubHkgd2FudCBudW1iZXJzIG91dCBvZiB0aGlzIHRleHQgZmllbGQsIGFuZCBzbyB0aGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiByZXN0cmljdHMgaW5wdXQgdG9cbiAgICAgIC8vIGRpZ2l0cywgYSBzaW5nbGUgZGVjaW1hbCBwb2ludCwgYW5kIGFuIG9wdGlvbmFsIG1pbnVzIHNpZ24gYXQgdGhlXG4gICAgICAvLyBiZWdpbm5pbmcuXG4gICAgICBpZiAoIXZhbHVlLm1hdGNoKC9eJHxeLT9bMC05XSpcXC4/WzAtOV0qJC8pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh7XG4gICAgICAgIFt0aGlzLnByb3BzLmlkXTogdmFsdWUsXG4gICAgICB9KTtcbiAgfVxuXG4gIHJlbmRlckNvbnRyb2woY29udHJvbFdpZHRoLCBjaGlsZHJlbiwgcHJvcHMpIHtcbiAgICAvLyBSYXRoZXIgdGhhbiBzZXQgYW4gaW5wdXQgZmllbGQncyB0eXBlIHRvIG51bWJlciwgd2UgbGVhdmUgaXQgYXMgdGV4dC5cbiAgICAvLyBUaGUgaGFuZGxlQ2hhbmdlIGZ1bmN0aW9uIHdpbGwgZmlsdGVyIGl0cyBjb250ZW50cyB0byBiZSBudW1iZXJzIG9ubHkuXG4gICAgY29uc3QgdXBkYXRlZFByb3BzID0ge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICB0eXBlOiBwcm9wcy50eXBlID09PSAnbnVtYmVyJyA/ICd0ZXh0JyA6IHByb3BzLnR5cGUsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29sIHsuLi5jb250cm9sV2lkdGh9PlxuICAgICAgICA8Rm9ybUNvbnRyb2wgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSB7Li4udXBkYXRlZFByb3BzfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICA8L0NvbD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgdmFsaWRhdGlvblN0YXRlLFxuICAgICAgZXJyb3JNZXNzYWdlLFxuICAgICAgbGFiZWwsXG4gICAgICByZXF1aXJlZCxcbiAgICAgIC8vIHdlIHB1bGwgb25DaGFuZ2Ugb3V0IGhlcmUganVzdCBzbyBpdCBkb2Vzbid0IGdldCBpbmNsdWRlZCBpbiAuLi5wcm9wc1xuICAgICAgb25DaGFuZ2UsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgbGFiZWxXaWR0aCxcbiAgICAgIGNvbnRyb2xXaWR0aCxcbiAgICAgIGlubGluZUNvbnRyb2wsXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxGb3JtR3JvdXAgY29udHJvbElkPXtpZH0gdmFsaWRhdGlvblN0YXRlPXt2YWxpZGF0aW9uU3RhdGV9PlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxDb2wgey4uLmxhYmVsV2lkdGh9PlxuICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgICAgICB7cmVxdWlyZWQgJiYgUkVRVUlSRUR9XG4gICAgICAgICAgICA8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICB7aW5saW5lQ29udHJvbCAmJiB0aGlzLnJlbmRlckNvbnRyb2woY29udHJvbFdpZHRoLCBjaGlsZHJlbiwgcHJvcHMpfVxuICAgICAgICA8L1Jvdz5cbiAgICAgICAgeyFpbmxpbmVDb250cm9sICYmIChcbiAgICAgICAgICA8Um93Pnt0aGlzLnJlbmRlckNvbnRyb2woY29udHJvbFdpZHRoLCBjaGlsZHJlbiwgcHJvcHMpfTwvUm93PlxuICAgICAgICApfVxuICAgICAgICA8SGVscEJsb2NrPntlcnJvck1lc3NhZ2V9PC9IZWxwQmxvY2s+XG4gICAgICA8L0Zvcm1Hcm91cD5cbiAgICApO1xuICB9XG59XG5cbkZpZWxkR3JvdXAuZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbFdpZHRoOiB7bWQ6IDEyfSxcbiAgY29udHJvbFdpZHRoOiB7bWQ6IDEyfSxcbn07XG5cbkZpZWxkR3JvdXAucHJvcFR5cGVzID0ge1xuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsYWJlbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmVsZW1lbnRdKS5pc1JlcXVpcmVkLFxuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHZhbGlkYXRpb25TdGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXJyb3JNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGxhYmVsV2lkdGg6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNvbnRyb2xXaWR0aDogUHJvcFR5cGVzLm9iamVjdCxcbiAgaW5saW5lQ29udHJvbDogUHJvcFR5cGVzLmJvb2wsXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmllbGRHcm91cCBmcm9tICcuL0ZpZWxkR3JvdXAnO1xuaW1wb3J0IHthY3Rpb259IGZyb20gJ0BzdG9yeWJvb2svYWRkb24tYWN0aW9ucyc7XG5cbmNsYXNzIFRlc3RXcmFwcGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGE6ICcnLFxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKG5ld1N0YXRlKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShuZXdTdGF0ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkYXRhOiBuZXdTdGF0ZS5mdWxsLFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB2YWxpZDtcbiAgICBpZiAodGhpcy5zdGF0ZS5kYXRhKSB7XG4gICAgICB2YWxpZCA9IC9eW2EtekEtWl0qJC8udGVzdCh0aGlzLnN0YXRlLmRhdGEpID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxGaWVsZEdyb3VwXG4gICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICB0eXBlPXt0aGlzLnByb3BzLnR5cGV9XG4gICAgICAgIGNvbXBvbmVudENsYXNzPXt0aGlzLnByb3BzLmNvbXBvbmVudENsYXNzfVxuICAgICAgICBsYWJlbD17dGhpcy5wcm9wcy5sYWJlbH1cbiAgICAgICAgdmFsaWRhdGlvblN0YXRlPXt2YWxpZH1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kYXRhfVxuICAgICAgICByZXF1aXJlZD17dHJ1ZX1cbiAgICAgID5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L0ZpZWxkR3JvdXA+XG4gICAgKTtcbiAgfVxufVxuXG5UZXN0V3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbXBvbmVudENsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdGb3JtQ29tcG9uZW50cy9GaWVsZEdyb3VwJywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBzdG9yeWJvb2svbm8tdGl0bGUtcHJvcGVydHktaW4tbWV0YVxuICBjb21wb25lbnQ6IEZpZWxkR3JvdXAsXG59O1xuXG5jb25zdCBUZW1wbGF0ZSA9IGFyZ3MgPT4gPFRlc3RXcmFwcGVyIHsuLi5hcmdzfSAvPjtcblxuZXhwb3J0IGNvbnN0IEJhc2ljRXhhbXBsZSA9IFRlbXBsYXRlLmJpbmQoe30pO1xuQmFzaWNFeGFtcGxlLmFyZ3MgPSB7XG4gIGlkOiAnYmFzaWMnLFxuICB0eXBlOiAndGV4dCcsXG4gIGxhYmVsOiAndGhpcyBpcyBhIGJhc2ljIGZpZWxkZ3JvdXAnLFxuICBvbkNoYW5nZTogYWN0aW9uKCdvbkNoYW5nZScpLFxufTtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duV2l0aENoaWxkcmVuID0gVGVtcGxhdGUuYmluZCh7fSk7XG5Ecm9wZG93bldpdGhDaGlsZHJlbi5hcmdzID0ge1xuICBpZDogJ2Ryb3Bkb3duJyxcbiAgY29tcG9uZW50Q2xhc3M6ICdzZWxlY3QnLFxuICBsYWJlbDogJ2EgZHJvcGRvd24gd2l0aCBjaGlsZHJlbicsXG4gIG9uQ2hhbmdlOiBhY3Rpb24oJ29uQ2hhbmdlJyksXG4gIGNoaWxkcmVuOiBbXG4gICAgPG9wdGlvbiBrZXk9XCJ0aXRsZVwiPlBsZWFzZSBTZWxlY3QgT25lOjwvb3B0aW9uPixcbiAgICA8b3B0aW9uIGtleT1cImZpcnN0XCIgdmFsdWU9XCJmaXJzdFwiPlxuICAgICAgT25lXG4gICAgPC9vcHRpb24+LFxuICAgIDxvcHRpb24ga2V5PVwic2Vjb25kXCIgdmFsdWU9XCJzZWNvbmRcIj5cbiAgICAgIFR3b1xuICAgIDwvb3B0aW9uPixcbiAgICA8b3B0aW9uIGtleT1cInRoaXJkXCIgdmFsdWU9XCJ0aGlyZFwiPlxuICAgICAgVGhyZWVcbiAgICA8L29wdGlvbj4sXG4gIF0sXG59O1xuIl0sIm5hbWVzIjpbIlJFUVVJUkVEIiwic3R5bGUiLCJjb2xvciIsIkZpZWxkR3JvdXAiLCJwcm9wcyIsImhhbmRsZUNoYW5nZSIsImJpbmQiLCJldmVudCIsInZhbHVlIiwidGFyZ2V0IiwidGhpcyIsInR5cGUiLCJtYXRjaCIsIm9uQ2hhbmdlIiwiaWQiLCJyZW5kZXJDb250cm9sIiwiY29udHJvbFdpZHRoIiwiY2hpbGRyZW4iLCJ1cGRhdGVkUHJvcHMiLCJDb2wiLCJGb3JtQ29udHJvbCIsInJlbmRlciIsInZhbGlkYXRpb25TdGF0ZSIsImVycm9yTWVzc2FnZSIsImxhYmVsIiwicmVxdWlyZWQiLCJsYWJlbFdpZHRoIiwiaW5saW5lQ29udHJvbCIsIkZvcm1Hcm91cCIsImNvbnRyb2xJZCIsIlJvdyIsIkNvbnRyb2xMYWJlbCIsIkhlbHBCbG9jayIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwibWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwib25lT2ZUeXBlIiwiZWxlbWVudCIsImJvb2wiLCJhcnJheU9mIiwibm9kZSIsImZ1bmMiLCJvYmplY3QiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZXJyIiwiRXJyb3IiLCJuYW1lIiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJudW1iZXIiLCJzeW1ib2wiLCJhbnkiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlRlc3RXcmFwcGVyIiwic3RhdGUiLCJkYXRhIiwibmV3U3RhdGUiLCJzZXRTdGF0ZSIsImZ1bGwiLCJ2YWxpZCIsInRlc3QiLCJjb21wb25lbnRDbGFzcyIsInRpdGxlIiwiY29tcG9uZW50IiwiVGVtcGxhdGUiLCJhcmdzIiwiQmFzaWNFeGFtcGxlIiwiYWN0aW9uIiwiRHJvcGRvd25XaXRoQ2hpbGRyZW4iLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9