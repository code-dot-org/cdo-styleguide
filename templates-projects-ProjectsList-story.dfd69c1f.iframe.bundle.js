(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[3274],{"./src/legacySharedComponents/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/ImageWithStatus.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.STATUS=exports.ImageWithStatus=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js")),_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var STATUS=exports.STATUS={LOADING:"loading",LOADED:"loaded",ERROR:"error"};!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(exports.ImageWithStatus=function(_Component){function ImageWithStatus(props){var _this;return(_this=_Component.call(this,props)||this).handleImageLoad=_this.handleImageLoad.bind(_this),_this.handleImageError=_this.handleImageError.bind(_this),_this.state={imageStatus:STATUS.LOADING},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ImageWithStatus,_Component);var _proto=ImageWithStatus.prototype;return _proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){this.props.src!==nextProps.src&&this.setState({imageStatus:STATUS.LOADING})},_proto.handleImageLoad=function handleImageLoad(){this.setState({imageStatus:STATUS.LOADED})},_proto.handleImageError=function handleImageError(){this.setState({imageStatus:STATUS.ERROR})},_proto.render=function render(){return _react.default.createElement("div",{style:this.props.wrapperStyle},_react.default.createElement("img",{src:this.props.src,width:this.props.width,height:this.props.height,onLoad:this.handleImageLoad,onError:this.handleImageError,alt:""}),_react.default.createElement("div",{"data-image-status":this.state.imageStatus}))},ImageWithStatus}(_react.Component),"propTypes",{src:_propTypes.default.string.isRequired,width:_propTypes.default.number.isRequired,height:_propTypes.default.number,wrapperStyle:_propTypes.default.object})},"./src/templates/projects/ProjectsList.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.COLUMNS_WITHOUT_THUMBNAILS=exports.COLUMNS=void 0;var _orderBy=_interopRequireDefault(__webpack_require__("./node_modules/lodash/orderBy.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),Table=_interopRequireWildcard(__webpack_require__("./node_modules/reactabular-table/dist/index.js")),sort=_interopRequireWildcard(__webpack_require__("./node_modules/sortabular/dist/index.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_ImageWithStatus=__webpack_require__("./src/templates/ImageWithStatus.jsx"),_tableConstants=__webpack_require__("./src/templates/tables/tableConstants.js"),_wrapped_sortable=_interopRequireDefault(__webpack_require__("./src/templates/tables/wrapped_sortable.js")),_projectTypeMap=__webpack_require__("./src/templates/projects/projectTypeMap.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var COLUMNS=exports.COLUMNS={THUMBNAIL:0,PROJECT_NAME:1,STUDENT_NAME:2,APP_TYPE:3,LAST_EDITED:4},COLUMNS_WITHOUT_THUMBNAILS=exports.COLUMNS_WITHOUT_THUMBNAILS={PROJECT_NAME:0,STUDENT_NAME:1,APP_TYPE:2,LAST_EDITED:3},typeFormatter=function typeFormatter(type){return _projectTypeMap.PROJECT_TYPE_MAP[type]},thumbnailFormatter=function thumbnailFormatter(thumbnailUrl){return thumbnailUrl?_react.default.createElement(_ImageWithStatus.ImageWithStatus,{src:thumbnailUrl,width:50,wrapperStyle:styles.thumbnailWrapper}):""},ProjectsList=function(_React$Component){function ProjectsList(props){var _this;_defineProperty(_this=_React$Component.call(this,props)||this,"getSortingColumns",(function(){return _this.state.sortingColumns||{}})),_defineProperty(_this,"onSort",(function(selectedColumn){_this.setState({sortingColumns:sort.byColumn({sortingColumns:_this.state.sortingColumns,sortingOrder:{FIRST:"asc",asc:"desc",desc:"asc"},selectedColumn})})})),_defineProperty(_this,"nameFormatter",(function(name,_ref){var rowData=_ref.rowData,type=encodeURIComponent(rowData.type),channel=encodeURIComponent(rowData.channel),url="".concat(_this.props.studioUrlPrefix,"/projects/").concat(type,"/").concat(channel,"/view");return _react.default.createElement("a",{href:url,style:_tableConstants.tableLayoutStyles.link,target:"_blank",rel:"noopener noreferrer"},name)})),_defineProperty(_this,"dateFormatter",(function(dateString){return new Date(dateString).toLocaleDateString(_this.props.localeCode||[])})),_defineProperty(_this,"getColumns",(function(sortable){var thumbnailColumn={property:"thumbnailUrl",header:{props:{style:_tableConstants.tableLayoutStyles.headerCell}},cell:{formatters:[thumbnailFormatter],props:{style:_tableConstants.tableLayoutStyles.cell}}},standardColumns=[{property:"name",header:{label:_locale.default.projectName(),props:{style:_tableConstants.tableLayoutStyles.headerCell},transforms:[sortable]},cell:{formatters:[_this.nameFormatter],props:{style:_tableConstants.tableLayoutStyles.cell}}},{property:"studentName",header:{label:_locale.default.studentName(),props:{style:_tableConstants.tableLayoutStyles.headerCell},transforms:[sortable]},cell:{props:{style:_tableConstants.tableLayoutStyles.cell}}},{property:"type",header:{label:_locale.default.projectType(),props:{style:_tableConstants.tableLayoutStyles.headerCell},transforms:[sortable]},cell:{formatters:[typeFormatter],props:{style:_tableConstants.tableLayoutStyles.cell}}},{property:"updatedAt",header:{label:_locale.default.lastEdited(),props:{style:_tableConstants.tableLayoutStyles.headerCell},transforms:[sortable]},cell:{formatters:[_this.dateFormatter],props:{style:_tableConstants.tableLayoutStyles.cell}}}];return _this.props.showProjectThumbnails?[thumbnailColumn].concat(standardColumns):standardColumns}));var sortingColumn=_this.props.showProjectThumbnails?COLUMNS.LAST_EDITED:COLUMNS_WITHOUT_THUMBNAILS.LAST_EDITED;return _this.state={sortingColumns:_defineProperty({},sortingColumn,{direction:"desc",position:0})},_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProjectsList,_React$Component),ProjectsList.prototype.render=function render(){var sortable=(0,_wrapped_sortable.default)(this.getSortingColumns,this.onSort,_tableConstants.sortableOptions),columns=this.getColumns(sortable),sortingColumns=this.getSortingColumns(),sortedRows=sort.sorter({columns,sortingColumns,sort:_orderBy.default})(this.props.projectsData);return _react.default.createElement(Table.Provider,{id:"uitest-projects-table",className:"pure-table pure-table-striped",columns,style:_tableConstants.tableLayoutStyles.table},_react.default.createElement(Table.Header,null),_react.default.createElement(Table.Body,{rows:sortedRows,rowKey:"channel"}))},ProjectsList}(_react.default.Component);_defineProperty(ProjectsList,"propTypes",{localeCode:_propTypes.default.string,projectsData:_propTypes.default.array.isRequired,showProjectThumbnails:_propTypes.default.bool.isRequired,studioUrlPrefix:_propTypes.default.string.isRequired});var styles={thumbnailCell:{border:"1px solid gray",width:50,minWidth:50,padding:0},thumbnailWrapper:{height:50,display:"flex",justifyContent:"center",alignItems:"center"}};exports.default=ProjectsList},"./src/templates/projects/projectTypeMap.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PROJECT_TYPE_MAP=exports.FEATURED_PROJECT_TYPE_MAP=void 0;var _locale=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./src/util/locale-do-not-import.js"));exports.PROJECT_TYPE_MAP={adaptations:_locale.default.projectTypeAdaptations(),algebra_game:_locale.default.projectTypeAlgebra(),applab:_locale.default.projectTypeApplab(),artist:_locale.default.projectTypeArtist(),ecosystems:_locale.default.projectTypeEcosystems(),frozen:_locale.default.projectTypeFrozen(),gumball:_locale.default.projectTypeGumball(),infinity:_locale.default.projectTypeInfinity(),iceage:_locale.default.projectTypeIceage(),minecraft_adventurer:_locale.default.projectTypeMinecraft(),minecraft_designer:_locale.default.projectTypeMinecraft(),minecraft_hero:_locale.default.projectTypeMinecraft(),minecraft_aquatic:_locale.default.projectTypeMinecraft(),game_design:_locale.default.projectTypeGameDesign(),gamelab:_locale.default.projectTypeGamelab(),playlab:_locale.default.projectTypePlaylab(),weblab:_locale.default.projectTypeWeblab(),bounce:_locale.default.projectTypeBounce(),flappy:_locale.default.projectTypeFlappy(),starwars:_locale.default.projectTypeStarwars(),starwarsblocks:_locale.default.projectTypeStarwarsBlocks(),sports:_locale.default.projectTypeSports(),basketball:_locale.default.projectTypeBasketball(),artist_k1:_locale.default.projectTypeArtistPreReader(),playlab_k1:_locale.default.projectTypePlaylabPreReader(),eval:_locale.default.projectTypeEval(),calc:_locale.default.projectTypeCalc(),dance:_locale.default.projectTypeDance(),spritelab:_locale.default.projectTypeSpriteLab(),javalab:_locale.default.projectTypeJavalab(),music:_locale.default.projectTypeMusic(),poetry:_locale.default.projectTypePoetry(),poetry_hoc:_locale.default.projectTypePoetry(),pythonlab:_locale.default.projectTypePythonlab(),thebadguys:_locale.default.projectTypeThebadguys(),science:_locale.default.projectTypeScience(),story:_locale.default.projectTypeStory(),time_capsule:_locale.default.projectTypeTimeCapsule(),transformers:_locale.default.projectTypeTransformers()},exports.FEATURED_PROJECT_TYPE_MAP={applab:_locale.default.projectTypeApplab(),artist:_locale.default.projectTypeDrawing(),frozen:_locale.default.projectTypeDrawing(),gamelab:_locale.default.projectTypeGamelab(),playlab:_locale.default.projectTypePlaylab(),gumball:_locale.default.projectTypePlaylab(),infinity:_locale.default.projectTypePlaylab(),iceage:_locale.default.projectTypePlaylab(),minecraft_adventurer:_locale.default.projectTypeMinecraft(),minecraft_designer:_locale.default.projectTypeMinecraft(),minecraft_hero:_locale.default.projectTypeMinecraft(),minecraft_aquatic:_locale.default.projectTypeMinecraft(),bounce:_locale.default.projectTypeEvents(),flappy:_locale.default.projectTypeEvents(),starwars:_locale.default.projectTypeEvents(),starwarsblocks:_locale.default.projectTypeEvents(),sports:_locale.default.projectTypeEvents(),basketball:_locale.default.projectTypeEvents(),artist_k1:_locale.default.projectTypeK1(),playlab_k1:_locale.default.projectTypeK1(),dance:_locale.default.projectTypeDance(),poetry:_locale.default.projectTypePoetry(),thebadguys:_locale.default.projectTypeThebadguys(),spritelab:_locale.default.projectTypeSpriteLab(),music:_locale.default.projectTypeMusic()}},"./src/templates/tables/wrapped_sortable.js":(module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),sort=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/sortabular/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_excluded=["className"];function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}exports.default=function wrappedSortable(getSortingColumns,onSort){var styles=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},basicSortable=sort.sort({getSortingColumns,onSort});return function(label,columnInfo){var _basicSortable=basicSortable(label,columnInfo),newClassName=_basicSortable.className,newProps=_objectWithoutProperties(_basicSortable,_excluded),sortIcon=_react.default.createElement(_FontAwesome.default,{icon:"sort",className:"fa-fw",style:styles.default});/sort-asc/.test(newClassName)?sortIcon=_react.default.createElement(_FontAwesome.default,{icon:"sort-asc",className:"fa-fw",style:styles.sortAsc}):/sort-desc/.test(newClassName)&&(sortIcon=_react.default.createElement(_FontAwesome.default,{icon:"sort-desc",className:"fa-fw",style:styles.sortDesc}));return _objectSpread(_objectSpread({},newProps),{},{style:Object.assign({},{cursor:"pointer"}),children:_react.default.createElement("span",{style:styles.container},_react.default.createElement("span",{key:"icon",style:{whiteSpace:"nowrap"}},sortIcon),_react.default.createElement("span",{key:"label"},label))})}};module.exports=exports.default},"./node_modules/lodash/_baseEach.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseForOwn=__webpack_require__("./node_modules/lodash/_baseForOwn.js"),baseEach=__webpack_require__("./node_modules/lodash/_createBaseEach.js")(baseForOwn);module.exports=baseEach},"./node_modules/lodash/_baseMap.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseEach=__webpack_require__("./node_modules/lodash/_baseEach.js"),isArrayLike=__webpack_require__("./node_modules/lodash/isArrayLike.js");module.exports=function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];return baseEach(collection,(function(value,key,collection){result[++index]=iteratee(value,key,collection)})),result}},"./node_modules/lodash/_baseOrderBy.js":(module,__unused_webpack_exports,__webpack_require__)=>{var arrayMap=__webpack_require__("./node_modules/lodash/_arrayMap.js"),baseGet=__webpack_require__("./node_modules/lodash/_baseGet.js"),baseIteratee=__webpack_require__("./node_modules/lodash/_baseIteratee.js"),baseMap=__webpack_require__("./node_modules/lodash/_baseMap.js"),baseSortBy=__webpack_require__("./node_modules/lodash/_baseSortBy.js"),baseUnary=__webpack_require__("./node_modules/lodash/_baseUnary.js"),compareMultiple=__webpack_require__("./node_modules/lodash/_compareMultiple.js"),identity=__webpack_require__("./node_modules/lodash/identity.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js");module.exports=function baseOrderBy(collection,iteratees,orders){iteratees=iteratees.length?arrayMap(iteratees,(function(iteratee){return isArray(iteratee)?function(value){return baseGet(value,1===iteratee.length?iteratee[0]:iteratee)}:iteratee})):[identity];var index=-1;iteratees=arrayMap(iteratees,baseUnary(baseIteratee));var result=baseMap(collection,(function(value,key,collection){return{criteria:arrayMap(iteratees,(function(iteratee){return iteratee(value)})),index:++index,value}}));return baseSortBy(result,(function(object,other){return compareMultiple(object,other,orders)}))}},"./node_modules/lodash/_baseSortBy.js":module=>{module.exports=function baseSortBy(array,comparer){var length=array.length;for(array.sort(comparer);length--;)array[length]=array[length].value;return array}},"./node_modules/lodash/_compareAscending.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isSymbol=__webpack_require__("./node_modules/lodash/isSymbol.js");module.exports=function compareAscending(value,other){if(value!==other){var valIsDefined=void 0!==value,valIsNull=null===value,valIsReflexive=value==value,valIsSymbol=isSymbol(value),othIsDefined=void 0!==other,othIsNull=null===other,othIsReflexive=other==other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive)return 1;if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive)return-1}return 0}},"./node_modules/lodash/_compareMultiple.js":(module,__unused_webpack_exports,__webpack_require__)=>{var compareAscending=__webpack_require__("./node_modules/lodash/_compareAscending.js");module.exports=function compareMultiple(object,other,orders){for(var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;++index<length;){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result)return index>=ordersLength?result:result*("desc"==orders[index]?-1:1)}return object.index-other.index}},"./node_modules/lodash/_createBaseEach.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isArrayLike=__webpack_require__("./node_modules/lodash/isArrayLike.js");module.exports=function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(null==collection)return collection;if(!isArrayLike(collection))return eachFunc(collection,iteratee);for(var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);(fromRight?index--:++index<length)&&!1!==iteratee(iterable[index],index,iterable););return collection}}},"./node_modules/lodash/orderBy.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseOrderBy=__webpack_require__("./node_modules/lodash/_baseOrderBy.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js");module.exports=function orderBy(collection,iteratees,orders,guard){return null==collection?[]:(isArray(iteratees)||(iteratees=null==iteratees?[]:[iteratees]),isArray(orders=guard?void 0:orders)||(orders=null==orders?[]:[orders]),baseOrderBy(collection,iteratees,orders))}},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/templates/projects/ProjectsList.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithoutThumbnails=exports.WithThumbnails=exports.LocalizedWithThumbnails=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ProjectsList=_interopRequireDefault(__webpack_require__("./src/templates/projects/ProjectsList.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}exports.default={component:_ProjectsList.default};var STUB_PROJECTS_DATA=[{channel:"ABCDEFGHIJKLM01234",name:"Antelope Freeway",studentName:"Alice",type:"applab",updatedAt:"2016-12-31T23:59:59.999-08:00"},{channel:"AAAABBBBCCCCDDDDEE",name:"Cats and Kittens",studentName:"Charlie",thumbnailUrl:"/media/common_images/stickers/cat.png",type:"weblab",updatedAt:"2016-11-30T00:00:00.001-08:00"},{channel:"NOPQRSTUVWXYZ567879",name:"Batyote",studentName:"Bob",thumbnailUrl:"/media/common_images/stickers/bat.png",type:"gamelab",updatedAt:"2017-01-01T00:00:00.001-08:00"}],Template=function Template(args){return _react.default.createElement(_ProjectsList.default,_extends({projectsData:STUB_PROJECTS_DATA,studioUrlPrefix:"https://studio.code.org",showProjectThumbnails:!0},args))};exports.WithThumbnails=Template.bind({});(exports.WithoutThumbnails=Template.bind({})).args={showProjectThumbnails:!1},(exports.LocalizedWithThumbnails=Template.bind({})).args={localeCode:"es-MX"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,