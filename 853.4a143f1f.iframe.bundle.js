/*! For license information please see 853.4a143f1f.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[853],{"./node_modules/@mapbox/hast-util-table-cell-style/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var visit=__webpack_require__("./node_modules/@mapbox/hast-util-table-cell-style/node_modules/unist-util-visit/index.js"),hasOwnProperty=Object.prototype.hasOwnProperty,hastCssPropertyMap={align:"text-align",valign:"vertical-align",height:"height",width:"width"};function visitor(node){var hastName;if("tr"===node.tagName||"td"===node.tagName||"th"===node.tagName)for(hastName in hastCssPropertyMap)hasOwnProperty.call(hastCssPropertyMap,hastName)&&void 0!==node.properties[hastName]&&(appendStyle(node,hastCssPropertyMap[hastName],node.properties[hastName]),delete node.properties[hastName])}function appendStyle(node,property,value){var prevStyle=(node.properties.style||"").trim();prevStyle&&!/;\s*/.test(prevStyle)&&(prevStyle+=";"),prevStyle&&(prevStyle+=" ");var nextStyle=prevStyle+property+": "+value+";";node.properties.style=nextStyle}module.exports=function tableCellStyle(node){return visit(node,"element",visitor),node}},"./node_modules/@mapbox/hast-util-table-cell-style/node_modules/unist-util-is/index.js":module=>{"use strict";function convert(test){if("string"==typeof test)return function typeFactory(test){return type;function type(node){return Boolean(node&&node.type===test)}}(test);if(null==test)return ok;if("object"==typeof test)return("length"in test?anyFactory:matchesFactory)(test);if("function"==typeof test)return test;throw new Error("Expected function, string, or object as test")}function matchesFactory(test){return function matches(node){var key;for(key in test)if(node[key]!==test[key])return!1;return!0}}function anyFactory(tests){var checks=function convertAll(tests){for(var results=[],length=tests.length,index=-1;++index<length;)results[index]=convert(tests[index]);return results}(tests),length=checks.length;return function matches(){var index=-1;for(;++index<length;)if(checks[index].apply(this,arguments))return!0;return!1}}function ok(){return!0}module.exports=function is(test,node,index,parent,context){var hasParent=null!=parent,hasIndex=null!=index,check=convert(test);if(hasIndex&&("number"!=typeof index||index<0||index===1/0))throw new Error("Expected positive finite index or child node");if(hasParent&&(!is(null,parent)||!parent.children))throw new Error("Expected parent node");if(!node||!node.type||"string"!=typeof node.type)return!1;if(hasParent!==hasIndex)throw new Error("Expected both parent and index");return Boolean(check.call(context,node,index,parent))}},"./node_modules/@mapbox/hast-util-table-cell-style/node_modules/unist-util-visit-parents/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=visitParents;var is=__webpack_require__("./node_modules/@mapbox/hast-util-table-cell-style/node_modules/unist-util-is/index.js"),SKIP="skip",EXIT=!1;function visitParents(tree,test,visitor,reverse){function one(node,index,parents){var result;return(test&&!is(test,node,index,parents[parents.length-1]||null)||(result=visitor(node,parents))!==EXIT)&&node.children&&result!==SKIP&&function all(children,parents){var child,result,min=-1,step=reverse?-1:1,index=(reverse?children.length:min)+step;for(;index>min&&index<children.length;){if((result=(child=children[index])&&one(child,index,parents))===EXIT)return result;index="number"==typeof result?result:index+step}}(node.children,parents.concat(node))===EXIT?EXIT:result}"function"==typeof test&&"function"!=typeof visitor&&(reverse=visitor,visitor=test,test=null),one(tree,null,[])}visitParents.CONTINUE=!0,visitParents.SKIP=SKIP,visitParents.EXIT=EXIT},"./node_modules/@mapbox/hast-util-table-cell-style/node_modules/unist-util-visit/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=visit;var visitParents=__webpack_require__("./node_modules/@mapbox/hast-util-table-cell-style/node_modules/unist-util-visit-parents/index.js"),CONTINUE=visitParents.CONTINUE,SKIP=visitParents.SKIP,EXIT=visitParents.EXIT;function visit(tree,test,visitor,reverse){"function"==typeof test&&"function"!=typeof visitor&&(reverse=visitor,visitor=test,test=null),visitParents(tree,test,(function overload(node,parents){var parent=parents[parents.length-1],index=parent?parent.children.indexOf(node):null;return visitor(node,index,parent)}),reverse)}visit.CONTINUE=CONTINUE,visit.SKIP=SKIP,visit.EXIT=EXIT},"./node_modules/unified/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var bail=__webpack_require__("./node_modules/bail/index.js"),buffer=__webpack_require__("./node_modules/unified/node_modules/is-buffer/index.js"),extend=__webpack_require__("./node_modules/extend/index.js"),plain=__webpack_require__("./node_modules/is-plain-obj/index.js"),trough=__webpack_require__("./node_modules/trough/index.js"),vfile=__webpack_require__("./node_modules/vfile/index.js");module.exports=function unified(){var frozen,attachers=[],transformers=trough(),namespace={},freezeIndex=-1;return processor.data=function data(key,value){if("string"==typeof key)return 2===arguments.length?(assertUnfrozen("data",frozen),namespace[key]=value,processor):own.call(namespace,key)&&namespace[key]||null;if(key)return assertUnfrozen("data",frozen),namespace=key,processor;return namespace},processor.freeze=freeze,processor.attachers=attachers,processor.use=function use(value){var settings;if(assertUnfrozen("use",frozen),null==value);else if("function"==typeof value)addPlugin.apply(null,arguments);else{if("object"!==_typeof(value))throw new Error("Expected usable value, not `"+value+"`");"length"in value?addList(value):addPreset(value)}settings&&(namespace.settings=extend(namespace.settings||{},settings));return processor;function addPreset(result){addList(result.plugins),result.settings&&(settings=extend(settings||{},result.settings))}function add(value){if("function"==typeof value)addPlugin(value);else{if("object"!==_typeof(value))throw new Error("Expected usable value, not `"+value+"`");"length"in value?addPlugin.apply(null,value):addPreset(value)}}function addList(plugins){var index=-1;if(null==plugins);else{if("object"!==_typeof(plugins)||!("length"in plugins))throw new Error("Expected a list of plugins, not `"+plugins+"`");for(;++index<plugins.length;)add(plugins[index])}}function addPlugin(plugin,value){var entry=find(plugin);entry?(plain(entry[1])&&plain(value)&&(value=extend(!0,entry[1],value)),entry[1]=value):attachers.push(slice.call(arguments))}},processor.parse=function parse(doc){var Parser,file=vfile(doc);if(freeze(),assertParser("parse",Parser=processor.Parser),newable(Parser,"parse"))return new Parser(String(file),file).parse();return Parser(String(file),file)},processor.stringify=function stringify(node,doc){var Compiler,file=vfile(doc);if(freeze(),assertCompiler("stringify",Compiler=processor.Compiler),assertNode(node),newable(Compiler,"compile"))return new Compiler(node,file).compile();return Compiler(node,file)},processor.run=run,processor.runSync=function runSync(node,file){var result,complete;return run(node,file,done),assertDone("runSync","run",complete),result;function done(error,tree){complete=!0,result=tree,bail(error)}},processor.process=process,processor.processSync=function processSync(doc){var file,complete;return freeze(),assertParser("processSync",processor.Parser),assertCompiler("processSync",processor.Compiler),process(file=vfile(doc),done),assertDone("processSync","process",complete),file;function done(error){complete=!0,bail(error)}},processor;function processor(){for(var destination=unified(),index=-1;++index<attachers.length;)destination.use.apply(null,attachers[index]);return destination.data(extend(!0,{},namespace)),destination}function freeze(){var values,transformer;if(frozen)return processor;for(;++freezeIndex<attachers.length;)!1!==(values=attachers[freezeIndex])[1]&&(!0===values[1]&&(values[1]=void 0),"function"==typeof(transformer=values[0].apply(processor,values.slice(1)))&&transformers.use(transformer));return frozen=!0,freezeIndex=1/0,processor}function find(plugin){for(var index=-1;++index<attachers.length;)if(attachers[index][0]===plugin)return attachers[index]}function run(node,file,cb){if(assertNode(node),freeze(),cb||"function"!=typeof file||(cb=file,file=null),!cb)return new Promise(executor);function executor(resolve,reject){transformers.run(node,vfile(file),(function done(error,tree,file){tree=tree||node,error?reject(error):resolve?resolve(tree):cb(null,tree,file)}))}executor(null,cb)}function process(doc,cb){if(freeze(),assertParser("process",processor.Parser),assertCompiler("process",processor.Compiler),!cb)return new Promise(executor);function executor(resolve,reject){var file=vfile(doc);pipeline.run(processor,{file},(function done(error){error?reject(error):resolve?resolve(file):cb(null,file)}))}executor(null,cb)}}().freeze();var slice=[].slice,own={}.hasOwnProperty,pipeline=trough().use((function pipelineParse(p,ctx){ctx.tree=p.parse(ctx.file)})).use((function pipelineRun(p,ctx,next){p.run(ctx.tree,ctx.file,(function done(error,tree,file){error?next(error):(ctx.tree=tree,ctx.file=file,next())}))})).use((function pipelineStringify(p,ctx){var result=p.stringify(ctx.tree,ctx.file);null==result||("string"==typeof result||buffer(result)?("value"in ctx.file&&(ctx.file.value=result),ctx.file.contents=result):ctx.file.result=result)}));function newable(value,name){return"function"==typeof value&&value.prototype&&(function keys(value){var key;for(key in value)return!0;return!1}(value.prototype)||name in value.prototype)}function assertParser(name,Parser){if("function"!=typeof Parser)throw new Error("Cannot `"+name+"` without `Parser`")}function assertCompiler(name,Compiler){if("function"!=typeof Compiler)throw new Error("Cannot `"+name+"` without `Compiler`")}function assertUnfrozen(name,frozen){if(frozen)throw new Error("Cannot invoke `"+name+"` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.")}function assertNode(node){if(!node||"string"!=typeof node.type)throw new Error("Expected node, got `"+node+"`")}function assertDone(name,asyncName,complete){if(!complete)throw new Error("`"+name+"` finished async. Use `"+asyncName+"` instead")}},"./node_modules/unified/node_modules/is-buffer/index.js":module=>{module.exports=function isBuffer(obj){return null!=obj&&null!=obj.constructor&&"function"==typeof obj.constructor.isBuffer&&obj.constructor.isBuffer(obj)}},"./node_modules/bail/index.js":module=>{"use strict";module.exports=function bail(err){if(err)throw err}},"./node_modules/comma-separated-tokens/index.js":(__unused_webpack_module,exports)=>{"use strict";exports.parse=function parse(value){var val,values=[],input=String(value||empty),index=input.indexOf(comma),lastIndex=0,end=!1;for(;!end;)-1===index&&(index=input.length,end=!0),!(val=input.slice(lastIndex,index).trim())&&end||values.push(val),lastIndex=index+1,index=input.indexOf(comma,lastIndex);return values},exports.stringify=function stringify(values,options){var settings=options||{},left=!1===settings.padLeft?empty:space,right=settings.padRight?space:empty;values[values.length-1]===empty&&(values=values.concat(empty));return values.join(right+comma+left).trim()};var comma=",",space=" ",empty=""},"./node_modules/css/lib/parse/index.js":module=>{var commentre=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;function trim(str){return str?str.replace(/^\s+|\s+$/g,""):""}function addParent(obj,parent){var isNode=obj&&"string"==typeof obj.type,childParent=isNode?obj:parent;for(var k in obj){var value=obj[k];Array.isArray(value)?value.forEach((function(v){addParent(v,childParent)})):value&&"object"==typeof value&&addParent(value,childParent)}return isNode&&Object.defineProperty(obj,"parent",{configurable:!0,writable:!0,enumerable:!1,value:parent||null}),obj}module.exports=function(css,options){options=options||{};var lineno=1,column=1;function updatePosition(str){var lines=str.match(/\n/g);lines&&(lineno+=lines.length);var i=str.lastIndexOf("\n");column=~i?str.length-i:column+str.length}function position(){var start={line:lineno,column};return function(node){return node.position=new Position(start),whitespace(),node}}function Position(start){this.start=start,this.end={line:lineno,column},this.source=options.source}Position.prototype.content=css;var errorsList=[];function error(msg){var err=new Error(options.source+":"+lineno+":"+column+": "+msg);if(err.reason=msg,err.filename=options.source,err.line=lineno,err.column=column,err.source=css,!options.silent)throw err;errorsList.push(err)}function open(){return match(/^{\s*/)}function close(){return match(/^}/)}function rules(){var node,rules=[];for(whitespace(),comments(rules);css.length&&"}"!=css.charAt(0)&&(node=atrule()||rule());)!1!==node&&(rules.push(node),comments(rules));return rules}function match(re){var m=re.exec(css);if(m){var str=m[0];return updatePosition(str),css=css.slice(str.length),m}}function whitespace(){match(/^\s*/)}function comments(rules){var c;for(rules=rules||[];c=comment();)!1!==c&&rules.push(c);return rules}function comment(){var pos=position();if("/"==css.charAt(0)&&"*"==css.charAt(1)){for(var i=2;""!=css.charAt(i)&&("*"!=css.charAt(i)||"/"!=css.charAt(i+1));)++i;if(i+=2,""===css.charAt(i-1))return error("End of comment missing");var str=css.slice(2,i-2);return column+=2,updatePosition(str),css=css.slice(i),column+=2,pos({type:"comment",comment:str})}}function selector(){var m=match(/^([^{]+)/);if(m)return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,(function(m){return m.replace(/,/g,"‌")})).split(/\s*(?![^(]*\)),\s*/).map((function(s){return s.replace(/\u200C/g,",")}))}function declaration(){var pos=position(),prop=match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);if(prop){if(prop=trim(prop[0]),!match(/^:\s*/))return error("property missing ':'");var val=match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/),ret=pos({type:"declaration",property:prop.replace(commentre,""),value:val?trim(val[0]).replace(commentre,""):""});return match(/^[;\s]*/),ret}}function declarations(){var decl,decls=[];if(!open())return error("missing '{'");for(comments(decls);decl=declaration();)!1!==decl&&(decls.push(decl),comments(decls));return close()?decls:error("missing '}'")}function keyframe(){for(var m,vals=[],pos=position();m=match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)vals.push(m[1]),match(/^,\s*/);if(vals.length)return pos({type:"keyframe",values:vals,declarations:declarations()})}var atimport=_compileAtrule("import"),atcharset=_compileAtrule("charset"),atnamespace=_compileAtrule("namespace");function _compileAtrule(name){var re=new RegExp("^@"+name+"\\s*([^;]+);");return function(){var pos=position(),m=match(re);if(m){var ret={type:name};return ret[name]=m[1].trim(),pos(ret)}}}function atrule(){if("@"==css[0])return function atkeyframes(){var pos=position();if(m=match(/^@([-\w]+)?keyframes\s*/)){var m,vendor=m[1];if(!(m=match(/^([-\w]+)\s*/)))return error("@keyframes missing name");var frame,name=m[1];if(!open())return error("@keyframes missing '{'");for(var frames=comments();frame=keyframe();)frames.push(frame),frames=frames.concat(comments());return close()?pos({type:"keyframes",name,vendor,keyframes:frames}):error("@keyframes missing '}'")}}()||function atmedia(){var pos=position(),m=match(/^@media *([^{]+)/);if(m){var media=trim(m[1]);if(!open())return error("@media missing '{'");var style=comments().concat(rules());return close()?pos({type:"media",media,rules:style}):error("@media missing '}'")}}()||function atcustommedia(){var pos=position(),m=match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);if(m)return pos({type:"custom-media",name:trim(m[1]),media:trim(m[2])})}()||function atsupports(){var pos=position(),m=match(/^@supports *([^{]+)/);if(m){var supports=trim(m[1]);if(!open())return error("@supports missing '{'");var style=comments().concat(rules());return close()?pos({type:"supports",supports,rules:style}):error("@supports missing '}'")}}()||atimport()||atcharset()||atnamespace()||function atdocument(){var pos=position(),m=match(/^@([-\w]+)?document *([^{]+)/);if(m){var vendor=trim(m[1]),doc=trim(m[2]);if(!open())return error("@document missing '{'");var style=comments().concat(rules());return close()?pos({type:"document",document:doc,vendor,rules:style}):error("@document missing '}'")}}()||function atpage(){var pos=position();if(match(/^@page */)){var sel=selector()||[];if(!open())return error("@page missing '{'");for(var decl,decls=comments();decl=declaration();)decls.push(decl),decls=decls.concat(comments());return close()?pos({type:"page",selectors:sel,declarations:decls}):error("@page missing '}'")}}()||function athost(){var pos=position();if(match(/^@host\s*/)){if(!open())return error("@host missing '{'");var style=comments().concat(rules());return close()?pos({type:"host",rules:style}):error("@host missing '}'")}}()||function atfontface(){var pos=position();if(match(/^@font-face\s*/)){if(!open())return error("@font-face missing '{'");for(var decl,decls=comments();decl=declaration();)decls.push(decl),decls=decls.concat(comments());return close()?pos({type:"font-face",declarations:decls}):error("@font-face missing '}'")}}()}function rule(){var pos=position(),sel=selector();return sel?(comments(),pos({type:"rule",selectors:sel,declarations:declarations()})):error("selector missing")}return addParent(function stylesheet(){var rulesList=rules();return{type:"stylesheet",stylesheet:{source:options.source,rules:rulesList,parsingErrors:errorsList}}}())}},"./node_modules/extend/index.js":module=>{"use strict";var hasOwn=Object.prototype.hasOwnProperty,toStr=Object.prototype.toString,isArray=function isArray(arr){return"function"==typeof Array.isArray?Array.isArray(arr):"[object Array]"===toStr.call(arr)},isPlainObject=function isPlainObject(obj){if(!obj||"[object Object]"!==toStr.call(obj))return!1;var key,hasOwnConstructor=hasOwn.call(obj,"constructor"),hasIsPrototypeOf=obj.constructor&&obj.constructor.prototype&&hasOwn.call(obj.constructor.prototype,"isPrototypeOf");if(obj.constructor&&!hasOwnConstructor&&!hasIsPrototypeOf)return!1;for(key in obj);return void 0===key||hasOwn.call(obj,key)};module.exports=function extend(){var options,name,src,copy,copyIsArray,clone,target=arguments[0],i=1,length=arguments.length,deep=!1;for("boolean"==typeof target&&(deep=target,target=arguments[1]||{},i=2),(null==target||"object"!=typeof target&&"function"!=typeof target)&&(target={});i<length;++i)if(null!=(options=arguments[i]))for(name in options)src=target[name],target!==(copy=options[name])&&(deep&&copy&&(isPlainObject(copy)||(copyIsArray=isArray(copy)))?(copyIsArray?(copyIsArray=!1,clone=src&&isArray(src)?src:[]):clone=src&&isPlainObject(src)?src:{},target[name]=extend(deep,clone,copy)):void 0!==copy&&(target[name]=copy));return target}},"./node_modules/is-plain-obj/index.js":module=>{"use strict";module.exports=value=>{if("[object Object]"!==Object.prototype.toString.call(value))return!1;const prototype=Object.getPrototypeOf(value);return null===prototype||prototype===Object.prototype}},"./node_modules/mdast-util-definitions/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var visit=__webpack_require__("./node_modules/unist-util-visit/index.js");module.exports=function getDefinitionFactory(node,options){return function getterFactory(cache){return getter;function getter(identifier){var id=identifier&&normalise(identifier);return id&&own.call(cache,id)?cache[id]:null}}(function gather(node){var cache={};if(!node||!node.type)throw new Error("mdast-util-definitions expected node");return visit(node,"definition",ondefinition),cache;function ondefinition(definition){var id=normalise(definition.identifier);own.call(cache,id)||(cache[id]=definition)}}(node))};var own={}.hasOwnProperty;function normalise(identifier){return identifier.toUpperCase()}},"./node_modules/mdast-util-to-hast/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/mdast-util-to-hast/lib/index.js")},"./node_modules/mdast-util-to-hast/lib/all.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function all(h,parent){var result,head,nodes=parent.children||[],length=nodes.length,values=[],index=-1;for(;++index<length;)(result=one(h,nodes[index],parent))&&(index&&"break"===nodes[index-1].type&&(result.value&&(result.value=result.value.replace(/^\s+/,"")),(head=result.children&&result.children[0])&&head.value&&(head.value=head.value.replace(/^\s+/,""))),values=values.concat(result));return values};var one=__webpack_require__("./node_modules/mdast-util-to-hast/lib/one.js")},"./node_modules/mdast-util-to-hast/lib/footer.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function generateFootnotes(h){var def,backReference,content,tail,footnoteById=h.footnoteById,footnoteOrder=h.footnoteOrder,length=footnoteOrder.length,index=-1,listItems=[];for(;++index<length;)(def=footnoteById[footnoteOrder[index].toUpperCase()])&&(tail=(content=def.children.concat())[content.length-1],backReference={type:"link",url:"#fnref-"+def.identifier,data:{hProperties:{className:["footnote-backref"]}},children:[{type:"text",value:"↩"}]},tail&&"paragraph"===tail.type||(tail={type:"paragraph",children:[]},content.push(tail)),tail.children.push(backReference),listItems.push({type:"listItem",data:{hProperties:{id:"fn-"+def.identifier}},children:content,position:def.position}));if(0===listItems.length)return null;return h(null,"div",{className:["footnotes"]},wrap([thematicBreak(h),list(h,{type:"list",ordered:!0,children:listItems})],!0))};var thematicBreak=__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js"),list=__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/list.js"),wrap=__webpack_require__("./node_modules/mdast-util-to-hast/lib/wrap.js")},"./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function blockquote(h,node){return h(node,"blockquote",wrap(all(h,node),!0))};var wrap=__webpack_require__("./node_modules/mdast-util-to-hast/lib/wrap.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/break.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function hardBreak(h,node){return[h(node,"br"),u("text","\n")]};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdast-util-to-hast/lib/handlers/code.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function code(h,node){var code,value=node.value?node.value+"\n":"",lang=node.lang&&node.lang.match(/^[^ \t]+(?=[ \t]|$)/),props={};lang&&(props.className=["language-"+lang]);code=h(node,"code",props,[u("text",value)]),node.meta&&(code.data={meta:node.meta});return h(node.position,"pre",[code])};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdast-util-to-hast/lib/handlers/delete.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function strikethrough(h,node){return h(node,"del",all(h,node))};var all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function emphasis(h,node){return h(node,"em",all(h,node))};var all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function footnoteReference(h,node){var footnoteOrder=h.footnoteOrder,identifier=String(node.identifier);-1===footnoteOrder.indexOf(identifier)&&footnoteOrder.push(identifier);return h(node.position,"sup",{id:"fnref-"+identifier},[h(node,"a",{href:"#fn-"+identifier,className:["footnote-ref"]},[u("text",node.label||identifier)])])};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdast-util-to-hast/lib/handlers/footnote.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function footnote(h,node){var footnoteById=h.footnoteById,footnoteOrder=h.footnoteOrder,identifier=1;for(;identifier in footnoteById;)identifier++;return identifier=String(identifier),footnoteOrder.push(identifier),footnoteById[identifier]={type:"footnoteDefinition",identifier,children:[{type:"paragraph",children:node.children}],position:node.position},footnoteReference(h,{type:"footnoteReference",identifier,position:node.position})};var footnoteReference=__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js")},"./node_modules/mdast-util-to-hast/lib/handlers/heading.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function heading(h,node){return h(node,"h"+node.depth,all(h,node))};var all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/html.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function html(h,node){return h.dangerous?h.augment(node,u("raw",node.value)):null};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function imageReference(h,node){var props,def=h.definition(node.identifier);if(!def)return revert(h,node);props={src:normalize(def.url||""),alt:node.alt},null!==def.title&&void 0!==def.title&&(props.title=def.title);return h(node,"img",props)};var normalize=__webpack_require__("./node_modules/mdurl/encode.js"),revert=__webpack_require__("./node_modules/mdast-util-to-hast/lib/revert.js")},"./node_modules/mdast-util-to-hast/lib/handlers/image.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var normalize=__webpack_require__("./node_modules/mdurl/encode.js");module.exports=function image(h,node){var props={src:normalize(node.url),alt:node.alt};null!==node.title&&void 0!==node.title&&(props.title=node.title);return h(node,"img",props)}},"./node_modules/mdast-util-to-hast/lib/handlers/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";function ignore(){return null}module.exports={blockquote:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js"),break:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/break.js"),code:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/code.js"),delete:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/delete.js"),emphasis:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js"),footnoteReference:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js"),footnote:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/footnote.js"),heading:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/heading.js"),html:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/html.js"),imageReference:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js"),image:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/image.js"),inlineCode:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js"),linkReference:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js"),link:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/link.js"),listItem:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/list-item.js"),list:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/list.js"),paragraph:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js"),root:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/root.js"),strong:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/strong.js"),table:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/table.js"),text:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/text.js"),thematicBreak:__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js"),toml:ignore,yaml:ignore,definition:ignore,footnoteDefinition:ignore}},"./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function inlineCode(h,node){var value=node.value.replace(/\r?\n|\r/g," ");return h(node,"code",[u("text",value)])};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function linkReference(h,node){var props,def=h.definition(node.identifier);if(!def)return revert(h,node);props={href:normalize(def.url||"")},null!==def.title&&void 0!==def.title&&(props.title=def.title);return h(node,"a",props,all(h,node))};var normalize=__webpack_require__("./node_modules/mdurl/encode.js"),revert=__webpack_require__("./node_modules/mdast-util-to-hast/lib/revert.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/link.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var normalize=__webpack_require__("./node_modules/mdurl/encode.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js");module.exports=function link(h,node){var props={href:normalize(node.url)};null!==node.title&&void 0!==node.title&&(props.title=node.title);return h(node,"a",props,all(h,node))}},"./node_modules/mdast-util-to-hast/lib/handlers/list-item.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function listItem(h,node,parent){var length,index,child,result=all(h,node),head=result[0],loose=parent?function listLoose(node){var loose=node.spread,children=node.children,length=children.length,index=-1;for(;!loose&&++index<length;)loose=listItemLoose(children[index]);return loose}(parent):listItemLoose(node),props={},wrapped=[];"boolean"==typeof node.checked&&(head&&"p"===head.tagName||(head=h(null,"p",[]),result.unshift(head)),head.children.length>0&&head.children.unshift(u("text"," ")),head.children.unshift(h(null,"input",{type:"checkbox",checked:node.checked,disabled:!0})),props.className=["task-list-item"]);length=result.length,index=-1;for(;++index<length;)child=result[index],(loose||0!==index||"p"!==child.tagName)&&wrapped.push(u("text","\n")),"p"!==child.tagName||loose?wrapped.push(child):wrapped=wrapped.concat(child.children);length&&(loose||"p"!==child.tagName)&&wrapped.push(u("text","\n"));return h(node,"li",props,wrapped)};var u=__webpack_require__("./node_modules/unist-builder/index.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js");function listItemLoose(node){var spread=node.spread;return null==spread?node.children.length>1:spread}},"./node_modules/mdast-util-to-hast/lib/handlers/list.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function list(h,node){var items,length,props={},name=node.ordered?"ol":"ul",index=-1;"number"==typeof node.start&&1!==node.start&&(props.start=node.start);items=all(h,node),length=items.length;for(;++index<length;)if(items[index].properties.className&&-1!==items[index].properties.className.indexOf("task-list-item")){props.className=["contains-task-list"];break}return h(node,name,props,wrap(items,!0))};var wrap=__webpack_require__("./node_modules/mdast-util-to-hast/lib/wrap.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function paragraph(h,node){return h(node,"p",all(h,node))};var all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/root.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function root(h,node){return h.augment(node,u("root",wrap(all(h,node))))};var u=__webpack_require__("./node_modules/unist-builder/index.js"),wrap=__webpack_require__("./node_modules/mdast-util-to-hast/lib/wrap.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/strong.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function strong(h,node){return h(node,"strong",all(h,node))};var all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/table.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function table(h,node){var pos,row,out,name,cell,rows=node.children,index=rows.length,align=node.align||[],alignLength=align.length,result=[];for(;index--;){for(row=rows[index].children,name=0===index?"th":"td",pos=alignLength||row.length,out=[];pos--;)cell=row[pos],out[pos]=h(cell,name,{align:align[pos]},cell?all(h,cell):[]);result[index]=h(rows[index],"tr",wrap(out,!0))}return h(node,"table",wrap([h(result[0].position,"thead",wrap([result[0]],!0))].concat(result[1]?h({start:position.start(result[1]),end:position.end(result[result.length-1])},"tbody",wrap(result.slice(1),!0)):[]),!0))};var position=__webpack_require__("./node_modules/unist-util-position/index.js"),wrap=__webpack_require__("./node_modules/mdast-util-to-hast/lib/wrap.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/handlers/text.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function text(h,node){return h.augment(node,u("text",String(node.value).replace(/[ \t]*(\r?\n|\r)[ \t]*/g,"$1")))};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js":module=>{"use strict";module.exports=function thematicBreak(h,node){return h(node,"hr")}},"./node_modules/mdast-util-to-hast/lib/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function toHast(tree,options){var h=function factory(tree,options){var settings=options||{};void 0===settings.allowDangerousHTML||deprecationWarningIssued||(deprecationWarningIssued=!0,console.warn("mdast-util-to-hast: deprecation: `allowDangerousHTML` is nonstandard, use `allowDangerousHtml` instead"));var dangerous=settings.allowDangerousHtml||settings.allowDangerousHTML,footnoteById={};return h.dangerous=dangerous,h.definition=definitions(tree),h.footnoteById=footnoteById,h.footnoteOrder=[],h.augment=augment,h.handlers=Object.assign({},handlers,settings.handlers),h.unknownHandler=settings.unknownHandler,h.passThrough=settings.passThrough,visit(tree,"footnoteDefinition",onfootnotedefinition),h;function augment(left,right){var data,ctx;return left&&left.data&&((data=left.data).hName&&("element"!==right.type&&(right={type:"element",tagName:"",properties:{},children:[]}),right.tagName=data.hName),"element"===right.type&&data.hProperties&&(right.properties=Object.assign({},right.properties,data.hProperties)),right.children&&data.hChildren&&(right.children=data.hChildren)),ctx=left&&left.position?left:{position:left},generated(ctx)||(right.position={start:position.start(ctx),end:position.end(ctx)}),right}function h(node,tagName,props,children){return null==children&&"object"==typeof props&&"length"in props&&(children=props,props={}),augment(node,{type:"element",tagName,properties:props||{},children:children||[]})}function onfootnotedefinition(definition){var id=String(definition.identifier).toUpperCase();own.call(footnoteById,id)||(footnoteById[id]=definition)}}(tree,options),node=one(h,tree),foot=footer(h);foot&&(node.children=node.children.concat(u("text","\n"),foot));return node};var u=__webpack_require__("./node_modules/unist-builder/index.js"),visit=__webpack_require__("./node_modules/unist-util-visit/index.js"),position=__webpack_require__("./node_modules/unist-util-position/index.js"),generated=__webpack_require__("./node_modules/unist-util-generated/index.js"),definitions=__webpack_require__("./node_modules/mdast-util-definitions/index.js"),one=__webpack_require__("./node_modules/mdast-util-to-hast/lib/one.js"),footer=__webpack_require__("./node_modules/mdast-util-to-hast/lib/footer.js"),handlers=__webpack_require__("./node_modules/mdast-util-to-hast/lib/handlers/index.js"),own={}.hasOwnProperty,deprecationWarningIssued=!1},"./node_modules/mdast-util-to-hast/lib/one.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function one(h,node,parent){var fn,type=node&&node.type;if(!type)throw new Error("Expected node, got `"+node+"`");fn=own.call(h.handlers,type)?h.handlers[type]:h.passThrough&&h.passThrough.indexOf(type)>-1?returnNode:h.unknownHandler;return("function"==typeof fn?fn:unknown)(h,node,parent)};var u=__webpack_require__("./node_modules/unist-builder/index.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js"),own={}.hasOwnProperty;function unknown(h,node){return function text(node){var data=node.data||{};if(own.call(data,"hName")||own.call(data,"hProperties")||own.call(data,"hChildren"))return!1;return"value"in node}(node)?h.augment(node,u("text",node.value)):h(node,"div",all(h,node))}function returnNode(h,node){var clone;return node.children?((clone=Object.assign({},node)).children=all(h,node),clone):node}},"./node_modules/mdast-util-to-hast/lib/revert.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function revert(h,node){var contents,head,tail,subtype=node.referenceType,suffix="]";"collapsed"===subtype?suffix+="[]":"full"===subtype&&(suffix+="["+(node.label||node.identifier)+"]");if("imageReference"===node.type)return u("text","!["+node.alt+suffix);contents=all(h,node),(head=contents[0])&&"text"===head.type?head.value="["+head.value:contents.unshift(u("text","["));(tail=contents[contents.length-1])&&"text"===tail.type?tail.value+=suffix:contents.push(u("text",suffix));return contents};var u=__webpack_require__("./node_modules/unist-builder/index.js"),all=__webpack_require__("./node_modules/mdast-util-to-hast/lib/all.js")},"./node_modules/mdast-util-to-hast/lib/wrap.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function wrap(nodes,loose){var result=[],index=-1,length=nodes.length;loose&&result.push(u("text","\n"));for(;++index<length;)index&&result.push(u("text","\n")),result.push(nodes[index]);loose&&nodes.length>0&&result.push(u("text","\n"));return result};var u=__webpack_require__("./node_modules/unist-builder/index.js")},"./node_modules/mdurl/encode.js":module=>{"use strict";var encodeCache={};function encode(string,exclude,keepEscaped){var i,l,code,nextCode,cache,result="";for("string"!=typeof exclude&&(keepEscaped=exclude,exclude=encode.defaultChars),void 0===keepEscaped&&(keepEscaped=!0),cache=function getEncodeCache(exclude){var i,ch,cache=encodeCache[exclude];if(cache)return cache;for(cache=encodeCache[exclude]=[],i=0;i<128;i++)ch=String.fromCharCode(i),/^[0-9a-z]$/i.test(ch)?cache.push(ch):cache.push("%"+("0"+i.toString(16).toUpperCase()).slice(-2));for(i=0;i<exclude.length;i++)cache[exclude.charCodeAt(i)]=exclude[i];return cache}(exclude),i=0,l=string.length;i<l;i++)if(code=string.charCodeAt(i),keepEscaped&&37===code&&i+2<l&&/^[0-9a-f]{2}$/i.test(string.slice(i+1,i+3)))result+=string.slice(i,i+3),i+=2;else if(code<128)result+=cache[code];else if(code>=55296&&code<=57343){if(code>=55296&&code<=56319&&i+1<l&&(nextCode=string.charCodeAt(i+1))>=56320&&nextCode<=57343){result+=encodeURIComponent(string[i]+string[i+1]),i++;continue}result+="%EF%BF%BD"}else result+=encodeURIComponent(string[i]);return result}encode.defaultChars=";/?:@&=+$,-_.!~*'()#",encode.componentChars="-_.!~*'()",module.exports=encode},"./node_modules/rehype-react/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var has=__webpack_require__("./node_modules/rehype-react/node_modules/has/src/index.js"),toH=__webpack_require__("./node_modules/rehype-react/node_modules/hast-to-hyperscript/index.js"),tableCellStyle=__webpack_require__("./node_modules/@mapbox/hast-util-table-cell-style/index.js");module.exports=function rehype2react(options){var settings=options||{},createElement=settings.createElement,components=settings.components||{};function h(name,props,children){var component=has(components,name)?components[name]:name;return createElement(component,props,children)}this.Compiler=function compiler(node){return"root"===node.type&&(node=1===node.children.length&&"element"===node.children[0].type?node.children[0]:{type:"element",tagName:"div",properties:node.properties||{},children:node.children}),toH(h,tableCellStyle(node),settings.prefix)}}},"./node_modules/rehype-react/node_modules/has/src/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var bind=__webpack_require__("./node_modules/function-bind/index.js");module.exports=bind.call(Function.call,Object.prototype.hasOwnProperty)},"./node_modules/rehype-react/node_modules/hast-to-hyperscript/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var html=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/html.js"),svg=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/svg.js"),find=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/find.js"),spaces=__webpack_require__("./node_modules/space-separated-tokens/index.js"),commas=__webpack_require__("./node_modules/comma-separated-tokens/index.js"),style=__webpack_require__("./node_modules/rehype-react/node_modules/style-to-object/index.js"),ns=__webpack_require__("./node_modules/web-namespaces/index.json"),is=__webpack_require__("./node_modules/rehype-react/node_modules/unist-util-is/index.js"),dashes=/-([a-z])/g;function toH(h,node,ctx){var properties,attributes,children,property,elements,length,index,value,result,parentSchema=ctx.schema,schema=parentSchema,name=node.tagName;for(property in"html"===parentSchema.space&&"svg"===name.toLowerCase()&&(schema=svg,ctx.schema=schema),!0===ctx.vdom&&"html"===schema.space&&(name=name.toUpperCase()),attributes={},properties=node.properties)addAttribute(attributes,property,properties[property],ctx);for("string"!=typeof attributes.style||!0!==ctx.vdom&&!0!==ctx.react||(attributes.style=function parseStyle(value,tagName){var result={};try{style(value,iterator)}catch(err){throw err.message=tagName+"[style]"+err.message.slice(9),err}return result;function iterator(name,value){result[function styleCase(val){"-ms-"===val.slice(0,4)&&(val="ms-"+val.slice(4));return val.replace(dashes,styleReplacer)}(name)]=value}}(attributes.style,name)),ctx.prefix&&(ctx.key++,attributes.key=ctx.prefix+ctx.key),ctx.vdom&&"html"!==schema.space&&(attributes.namespace=ns[schema.space]),elements=[],length=(children=node.children)?children.length:0,index=-1;++index<length;)value=children[index],is("element",value)?elements.push(toH(h,value,ctx)):is("text",value)&&elements.push(value.value);return result=0===elements.length?h(name,attributes):h(name,attributes,elements),ctx.schema=parentSchema,result}function addAttribute(props,prop,value,ctx){var subprop,schema=ctx.schema,info=find(schema,prop);null==value||!1===value||value!=value||info.boolean&&!value||(null!==value&&"object"==typeof value&&"length"in value&&(value=(info.commaSeparated?commas:spaces).stringify(value)),info.boolean&&!0===ctx.hyperscript&&(value=""),info.mustUseProperty||(!0===ctx.vdom?subprop="attributes":!0===ctx.hyperscript&&(subprop="attrs")),subprop?(void 0===props[subprop]&&(props[subprop]={}),props[subprop][info.attribute]=value):props[ctx.react&&info.space?info.property:info.attribute]=value)}function hyperscript(h){return Boolean(h&&h.context&&h.cleanup)}function styleReplacer($0,$1){return $1.toUpperCase()}module.exports=function wrapper(h,node,options){var prefix,r,v,settings=options||{};if("function"!=typeof h)throw new Error("h is not a function");"string"==typeof settings||"boolean"==typeof settings?(prefix=settings,settings={}):prefix=settings.prefix;r=function react(h){var node=h&&h("div");return Boolean(node&&("_owner"in node||"_store"in node)&&null===node.key)}(h),v=function vdom(h){return h&&"VirtualNode"===h("div").type}(h),null==prefix&&(prefix=(!0===r||!0===v)&&"h-");if(is("root",node))node=1===node.children.length&&is("element",node.children[0])?node.children[0]:{type:"element",tagName:"div",properties:{},children:node.children};else if(!is("element",node))throw new Error("Expected root or element, not `"+(node&&node.type||node)+"`");return toH(h,node,{schema:"svg"===settings.space?svg:html,prefix,key:0,react:r,vdom:v,hyperscript:hyperscript(h)})}},"./node_modules/rehype-react/node_modules/property-information/find.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var normalize=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/normalize.js"),DefinedInfo=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/defined-info.js"),Info=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/info.js"),data="data";module.exports=function find(schema,value){var normal=normalize(value),prop=value,Type=Info;if(normal in schema.normal)return schema.property[schema.normal[normal]];normal.length>4&&normal.slice(0,4)===data&&valid.test(value)&&("-"===value.charAt(4)?prop=function datasetToProperty(attribute){var value=attribute.slice(5).replace(dash,camelcase);return data+value.charAt(0).toUpperCase()+value.slice(1)}(value):value=function datasetToAttribute(property){var value=property.slice(4);if(dash.test(value))return property;value=value.replace(cap,kebab),"-"!==value.charAt(0)&&(value="-"+value);return data+value}(value),Type=DefinedInfo);return new Type(prop,value)};var valid=/^data[-a-z0-9.:_]+$/i,dash=/-[a-z]/g,cap=/[A-Z]/g;function kebab($0){return"-"+$0.toLowerCase()}function camelcase($0){return $0.charAt(1).toUpperCase()}},"./node_modules/rehype-react/node_modules/property-information/html.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var merge=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/merge.js"),xlink=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/xlink.js"),xml=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/xml.js"),xmlns=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/xmlns.js"),aria=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/aria.js"),html=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/html.js");module.exports=merge([xml,xlink,xmlns,aria,html])},"./node_modules/rehype-react/node_modules/property-information/lib/aria.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var types=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/types.js"),create=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/create.js"),booleanish=types.booleanish,number=types.number,spaceSeparated=types.spaceSeparated;module.exports=create({transform:function ariaTransform(_,prop){return"role"===prop?prop:"aria-"+prop.slice(4).toLowerCase()},properties:{ariaActiveDescendant:null,ariaAtomic:booleanish,ariaAutoComplete:null,ariaBusy:booleanish,ariaChecked:booleanish,ariaColCount:number,ariaColIndex:number,ariaColSpan:number,ariaControls:spaceSeparated,ariaCurrent:null,ariaDescribedBy:spaceSeparated,ariaDetails:null,ariaDisabled:booleanish,ariaDropEffect:spaceSeparated,ariaErrorMessage:null,ariaExpanded:booleanish,ariaFlowTo:spaceSeparated,ariaGrabbed:booleanish,ariaHasPopup:null,ariaHidden:booleanish,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:spaceSeparated,ariaLevel:number,ariaLive:null,ariaModal:booleanish,ariaMultiLine:booleanish,ariaMultiSelectable:booleanish,ariaOrientation:null,ariaOwns:spaceSeparated,ariaPlaceholder:null,ariaPosInSet:number,ariaPressed:booleanish,ariaReadOnly:booleanish,ariaRelevant:null,ariaRequired:booleanish,ariaRoleDescription:spaceSeparated,ariaRowCount:number,ariaRowIndex:number,ariaRowSpan:number,ariaSelected:booleanish,ariaSetSize:number,ariaSort:null,ariaValueMax:number,ariaValueMin:number,ariaValueNow:number,ariaValueText:null,role:null}})},"./node_modules/rehype-react/node_modules/property-information/lib/html.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var types=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/types.js"),create=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/create.js"),caseInsensitiveTransform=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/case-insensitive-transform.js"),boolean=types.boolean,overloadedBoolean=types.overloadedBoolean,booleanish=types.booleanish,number=types.number,spaceSeparated=types.spaceSeparated,commaSeparated=types.commaSeparated;module.exports=create({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:caseInsensitiveTransform,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:commaSeparated,acceptCharset:spaceSeparated,accessKey:spaceSeparated,action:null,allowFullScreen:boolean,allowPaymentRequest:boolean,allowUserMedia:boolean,alt:null,as:null,async:boolean,autoCapitalize:null,autoComplete:spaceSeparated,autoFocus:boolean,autoPlay:boolean,capture:boolean,charSet:null,checked:boolean,cite:null,className:spaceSeparated,cols:number,colSpan:null,content:null,contentEditable:booleanish,controls:boolean,controlsList:spaceSeparated,coords:number|commaSeparated,crossOrigin:null,data:null,dateTime:null,decoding:null,default:boolean,defer:boolean,dir:null,dirName:null,disabled:boolean,download:overloadedBoolean,draggable:booleanish,encType:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:boolean,formTarget:null,headers:spaceSeparated,height:number,hidden:boolean,high:number,href:null,hrefLang:null,htmlFor:spaceSeparated,httpEquiv:spaceSeparated,id:null,inputMode:null,integrity:null,is:null,isMap:boolean,itemId:null,itemProp:spaceSeparated,itemRef:spaceSeparated,itemScope:boolean,itemType:spaceSeparated,kind:null,label:null,lang:null,language:null,list:null,loop:boolean,low:number,manifest:null,max:null,maxLength:number,media:null,method:null,min:null,minLength:number,multiple:boolean,muted:boolean,name:null,nonce:null,noModule:boolean,noValidate:boolean,open:boolean,optimum:number,pattern:null,ping:spaceSeparated,placeholder:null,playsInline:boolean,poster:null,preload:null,readOnly:boolean,referrerPolicy:null,rel:spaceSeparated,required:boolean,reversed:boolean,rows:number,rowSpan:number,sandbox:spaceSeparated,scope:null,scoped:boolean,seamless:boolean,selected:boolean,shape:null,size:number,sizes:spaceSeparated,slot:null,span:number,spellCheck:booleanish,src:null,srcDoc:null,srcLang:null,srcSet:commaSeparated,start:number,step:null,style:null,tabIndex:number,target:null,title:null,translate:null,type:null,typeMustMatch:boolean,useMap:null,value:booleanish,width:number,wrap:null,align:null,aLink:null,archive:spaceSeparated,axis:null,background:null,bgColor:null,border:number,borderColor:null,bottomMargin:number,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:boolean,declare:boolean,event:null,face:null,frame:null,frameBorder:null,hSpace:number,leftMargin:number,link:null,longDesc:null,lowSrc:null,marginHeight:number,marginWidth:number,noResize:boolean,noHref:boolean,noShade:boolean,noWrap:boolean,object:null,profile:null,prompt:null,rev:null,rightMargin:number,rules:null,scheme:null,scrolling:booleanish,standby:null,summary:null,text:null,topMargin:number,valueType:null,version:null,vAlign:null,vLink:null,vSpace:number,allowTransparency:null,autoCorrect:null,autoSave:null,prefix:null,property:null,results:number,security:null,unselectable:null}})},"./node_modules/rehype-react/node_modules/property-information/lib/svg.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var types=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/types.js"),create=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/create.js"),caseSensitiveTransform=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/case-sensitive-transform.js"),boolean=types.boolean,number=types.number,spaceSeparated=types.spaceSeparated,commaSeparated=types.commaSeparated,commaOrSpaceSeparated=types.commaOrSpaceSeparated;module.exports=create({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:caseSensitiveTransform,properties:{about:commaOrSpaceSeparated,accentHeight:number,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:number,amplitude:number,arabicForm:null,ascent:number,attributeName:null,attributeType:null,azimuth:number,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:number,by:null,calcMode:null,capHeight:number,className:spaceSeparated,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:number,diffuseConstant:number,direction:null,display:null,dur:null,divisor:number,dominantBaseline:null,download:boolean,dx:null,dy:null,edgeMode:null,editable:null,elevation:number,enableBackground:null,end:null,event:null,exponent:number,externalResourcesRequired:null,fill:null,fillOpacity:number,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:commaSeparated,g2:commaSeparated,glyphName:commaSeparated,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:number,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:number,horizOriginX:number,horizOriginY:number,id:null,ideographic:number,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:number,k:number,k1:number,k2:number,k3:number,k4:number,kernelMatrix:commaOrSpaceSeparated,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:number,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:number,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:number,overlineThickness:number,paintOrder:null,panose1:null,path:null,pathLength:number,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:number,pointsAtY:number,pointsAtZ:number,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:commaOrSpaceSeparated,r:null,radius:null,refX:null,refY:null,rel:commaOrSpaceSeparated,rev:commaOrSpaceSeparated,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:commaOrSpaceSeparated,requiredFeatures:commaOrSpaceSeparated,requiredFonts:commaOrSpaceSeparated,requiredFormats:commaOrSpaceSeparated,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:number,specularExponent:number,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:number,strikethroughThickness:number,string:null,stroke:null,strokeDashArray:commaOrSpaceSeparated,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:number,strokeOpacity:number,strokeWidth:null,style:null,surfaceScale:number,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:commaOrSpaceSeparated,tabIndex:number,tableValues:null,target:null,targetX:number,targetY:number,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:commaOrSpaceSeparated,to:null,transform:null,u1:null,u2:null,underlinePosition:number,underlineThickness:number,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:number,values:null,vAlphabetic:number,vMathematical:number,vectorEffect:null,vHanging:number,vIdeographic:number,version:null,vertAdvY:number,vertOriginX:number,vertOriginY:number,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:number,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}})},"./node_modules/rehype-react/node_modules/property-information/lib/util/case-insensitive-transform.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var caseSensitiveTransform=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/case-sensitive-transform.js");module.exports=function caseInsensitiveTransform(attributes,property){return caseSensitiveTransform(attributes,property.toLowerCase())}},"./node_modules/rehype-react/node_modules/property-information/lib/util/case-sensitive-transform.js":module=>{"use strict";module.exports=function caseSensitiveTransform(attributes,attribute){return attribute in attributes?attributes[attribute]:attribute}},"./node_modules/rehype-react/node_modules/property-information/lib/util/create.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var normalize=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/normalize.js"),Schema=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/schema.js"),DefinedInfo=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/defined-info.js");module.exports=function create(definition){var prop,info,space=definition.space,mustUseProperty=definition.mustUseProperty||[],attributes=definition.attributes||{},props=definition.properties,transform=definition.transform,property={},normal={};for(prop in props)info=new DefinedInfo(prop,transform(attributes,prop),props[prop],space),-1!==mustUseProperty.indexOf(prop)&&(info.mustUseProperty=!0),property[prop]=info,normal[normalize(prop)]=prop,normal[normalize(info.attribute)]=prop;return new Schema(property,normal,space)}},"./node_modules/rehype-react/node_modules/property-information/lib/util/defined-info.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var Info=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/info.js"),types=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/types.js");function DefinedInfo(property,attribute,mask,space){mark(this,"space",space),Info.call(this,property,attribute),mark(this,"boolean",check(mask,types.boolean)),mark(this,"booleanish",check(mask,types.booleanish)),mark(this,"overloadedBoolean",check(mask,types.overloadedBoolean)),mark(this,"number",check(mask,types.number)),mark(this,"commaSeparated",check(mask,types.commaSeparated)),mark(this,"spaceSeparated",check(mask,types.spaceSeparated)),mark(this,"commaOrSpaceSeparated",check(mask,types.commaOrSpaceSeparated))}function mark(values,key,value){value&&(values[key]=value)}function check(value,mask){return(value&mask)===mask}module.exports=DefinedInfo,DefinedInfo.prototype=new Info,DefinedInfo.prototype.defined=!0},"./node_modules/rehype-react/node_modules/property-information/lib/util/info.js":module=>{"use strict";module.exports=Info;var proto=Info.prototype;function Info(property,attribute){this.property=property,this.attribute=attribute}proto.space=null,proto.attribute=null,proto.property=null,proto.boolean=!1,proto.booleanish=!1,proto.overloadedBoolean=!1,proto.number=!1,proto.commaSeparated=!1,proto.spaceSeparated=!1,proto.commaOrSpaceSeparated=!1,proto.mustUseProperty=!1,proto.defined=!1},"./node_modules/rehype-react/node_modules/property-information/lib/util/merge.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var xtend=__webpack_require__("./node_modules/xtend/immutable.js"),Schema=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/schema.js");module.exports=function merge(definitions){var info,space,length=definitions.length,property=[],normal=[],index=-1;for(;++index<length;)info=definitions[index],property.push(info.property),normal.push(info.normal),space=info.space;return new Schema(xtend.apply(null,property),xtend.apply(null,normal),space)}},"./node_modules/rehype-react/node_modules/property-information/lib/util/schema.js":module=>{"use strict";module.exports=Schema;var proto=Schema.prototype;function Schema(property,normal,space){this.property=property,this.normal=normal,space&&(this.space=space)}proto.space=null,proto.normal={},proto.property={}},"./node_modules/rehype-react/node_modules/property-information/lib/util/types.js":(__unused_webpack_module,exports)=>{"use strict";var powers=0;function increment(){return Math.pow(2,++powers)}exports.boolean=increment(),exports.booleanish=increment(),exports.overloadedBoolean=increment(),exports.number=increment(),exports.spaceSeparated=increment(),exports.commaSeparated=increment(),exports.commaOrSpaceSeparated=increment()},"./node_modules/rehype-react/node_modules/property-information/lib/xlink.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var create=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/create.js");module.exports=create({space:"xlink",transform:function xlinkTransform(_,prop){return"xlink:"+prop.slice(5).toLowerCase()},properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}})},"./node_modules/rehype-react/node_modules/property-information/lib/xml.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var create=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/create.js");module.exports=create({space:"xml",transform:function xmlTransform(_,prop){return"xml:"+prop.slice(3).toLowerCase()},properties:{xmlLang:null,xmlBase:null,xmlSpace:null}})},"./node_modules/rehype-react/node_modules/property-information/lib/xmlns.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var create=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/create.js"),caseInsensitiveTransform=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/case-insensitive-transform.js");module.exports=create({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:caseInsensitiveTransform,properties:{xmlns:null,xmlnsXLink:null}})},"./node_modules/rehype-react/node_modules/property-information/normalize.js":module=>{"use strict";module.exports=function normalize(value){return value.toLowerCase().replace(/\b[:-]\b/g,"")}},"./node_modules/rehype-react/node_modules/property-information/svg.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var merge=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/util/merge.js"),xlink=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/xlink.js"),xml=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/xml.js"),xmlns=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/xmlns.js"),aria=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/aria.js"),svg=__webpack_require__("./node_modules/rehype-react/node_modules/property-information/lib/svg.js");module.exports=merge([xml,xlink,xmlns,aria,svg])},"./node_modules/rehype-react/node_modules/style-to-object/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var parse=__webpack_require__("./node_modules/css/lib/parse/index.js");module.exports=function parseInlineStyle(style,iterator){if(!style||"string"!=typeof style)return null;for(var declaration,property,value,declarations=parse("p{"+style+"}").stylesheet.rules[0].declarations,output=null,hasIterator="function"==typeof iterator,i=0,len=declarations.length;i<len;i++)property=(declaration=declarations[i]).property,value=declaration.value,hasIterator?iterator(property,value,declaration):value&&(output||(output={}),output[property]=value);return output}},"./node_modules/rehype-react/node_modules/unist-util-is/index.js":module=>{"use strict";function convert(test){if("string"==typeof test)return function typeFactory(test){return type;function type(node){return Boolean(node&&node.type===test)}}(test);if(null==test)return ok;if("object"==typeof test)return("length"in test?anyFactory:matchesFactory)(test);if("function"==typeof test)return test;throw new Error("Expected function, string, or object as test")}function matchesFactory(test){return function matches(node){var key;for(key in test)if(node[key]!==test[key])return!1;return!0}}function anyFactory(tests){var checks=function convertAll(tests){for(var results=[],length=tests.length,index=-1;++index<length;)results[index]=convert(tests[index]);return results}(tests),length=checks.length;return function matches(){var index=-1;for(;++index<length;)if(checks[index].apply(this,arguments))return!0;return!1}}function ok(){return!0}module.exports=function is(test,node,index,parent,context){var hasParent=null!=parent,hasIndex=null!=index,check=convert(test);if(hasIndex&&("number"!=typeof index||index<0||index===1/0))throw new Error("Expected positive finite index or child node");if(hasParent&&(!is(null,parent)||!parent.children))throw new Error("Expected parent node");if(!node||!node.type||"string"!=typeof node.type)return!1;if(hasParent!==hasIndex)throw new Error("Expected both parent and index");return Boolean(check.call(context,node,index,parent))}},"./node_modules/remark-parse/lib/util/get-indentation.js":module=>{"use strict";module.exports=function indentation(value){var size,index=0,indent=0,character=value.charAt(index),stops={},lastIndent=0;for(;character===tab||character===space;){for(indent+=size=character===tab?tabSize:spaceSize,size>1&&(indent=Math.floor(indent/size)*size);lastIndent<indent;)stops[++lastIndent]=index;character=value.charAt(++index)}return{indent,stops}};var tab="\t",space=" ",spaceSize=1,tabSize=4},"./node_modules/remark-parse/lib/util/remove-indentation.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js"),repeat=__webpack_require__("./node_modules/repeat-string/index.js"),getIndent=__webpack_require__("./node_modules/remark-parse/lib/util/get-indentation.js");module.exports=function indentation(value,maximum){var index,indentation,stops,values=value.split(lineFeed),position=values.length+1,minIndent=1/0,matrix=[];values.unshift(repeat(space,maximum)+exclamationMark);for(;position--;)if(indentation=getIndent(values[position]),matrix[position]=indentation.stops,0!==trim(values[position]).length){if(!indentation.indent){minIndent=1/0;break}indentation.indent>0&&indentation.indent<minIndent&&(minIndent=indentation.indent)}if(minIndent!==1/0)for(position=values.length;position--;){for(stops=matrix[position],index=minIndent;index&&!(index in stops);)index--;values[position]=values[position].slice(stops[index]+1)}return values.shift(),values.join(lineFeed)};var lineFeed="\n",space=" ",exclamationMark="!"},"./node_modules/remark-rehype/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var mdast2hast=__webpack_require__("./node_modules/mdast-util-to-hast/index.js");module.exports=function remark2rehype(destination,options){destination&&!destination.process&&(options=destination,destination=null);return destination?function bridge(destination,options){return transformer;function transformer(node,file,next){function done(error){next(error)}destination.run(mdast2hast(node,options),file,done)}}(destination,options):function mutate(options){return transformer;function transformer(node){return mdast2hast(node,options)}}(options)}},"./node_modules/repeat-string/index.js":module=>{"use strict";var cache,res="";module.exports=function repeat(str,num){if("string"!=typeof str)throw new TypeError("expected a string");if(1===num)return str;if(2===num)return str+str;var max=str.length*num;if(cache!==str||void 0===cache)cache=str,res="";else if(res.length>=max)return res.substr(0,max);for(;max>res.length&&num>1;)1&num&&(res+=str),num>>=1,str+=str;return res=(res+=str).substr(0,max)}},"./node_modules/space-separated-tokens/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js");exports.parse=function parse(value){var input=trim(String(value||empty));return input===empty?[]:input.split(whiteSpace)},exports.stringify=function stringify(values){return trim(values.join(space))};var empty="",space=" ",whiteSpace=/[ \t\n\r\f]+/g},"./node_modules/trim/index.js":(module,exports)=>{(exports=module.exports=function trim(str){return str.replace(/^\s*|\s*$/g,"")}).left=function(str){return str.replace(/^\s*/,"")},exports.right=function(str){return str.replace(/\s*$/,"")}},"./node_modules/trough/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var wrap=__webpack_require__("./node_modules/trough/wrap.js");module.exports=trough,trough.wrap=wrap;var slice=[].slice;function trough(){var fns=[],middleware={run:function run(){var index=-1,input=slice.call(arguments,0,-1),done=arguments[arguments.length-1];if("function"!=typeof done)throw new Error("Expected function as last argument, not "+done);(function next(err){var fn=fns[++index],values=slice.call(arguments,0).slice(1),length=input.length,pos=-1;if(err)done(err);else{for(;++pos<length;)null!==values[pos]&&void 0!==values[pos]||(values[pos]=input[pos]);input=values,fn?wrap(fn,next).apply(null,input):done.apply(null,[null].concat(input))}}).apply(null,[null].concat(input))},use:function use(fn){if("function"!=typeof fn)throw new Error("Expected `fn` to be a function, not "+fn);return fns.push(fn),middleware}};return middleware}},"./node_modules/trough/wrap.js":module=>{"use strict";var slice=[].slice;module.exports=function wrap(fn,callback){var invoked;return function wrapped(){var result,params=slice.call(arguments,0),callback=fn.length>params.length;callback&&params.push(done);try{result=fn.apply(null,params)}catch(err){if(callback&&invoked)throw err;return done(err)}callback||(result&&"function"==typeof result.then?result.then(then,done):result instanceof Error?done(result):then(result))};function done(){invoked||(invoked=!0,callback.apply(null,arguments))}function then(value){done(null,value)}}},"./node_modules/unist-builder/index.js":module=>{"use strict";module.exports=function u(type,props,value){var node;null!=value||"object"==typeof props&&!Array.isArray(props)||(value=props,props={});node=Object.assign({type:String(type)},props),Array.isArray(value)?node.children=value:null!=value&&(node.value=String(value));return node}},"./node_modules/unist-util-generated/index.js":module=>{"use strict";module.exports=function generated(node){return!(node&&node.position&&node.position.start&&node.position.start.line&&node.position.start.column&&node.position.end&&node.position.end.line&&node.position.end.column)}},"./node_modules/unist-util-is/convert.js":module=>{"use strict";function convert(test){if("string"==typeof test)return function typeFactory(test){return type;function type(node){return Boolean(node&&node.type===test)}}(test);if(null==test)return ok;if("object"==typeof test)return("length"in test?anyFactory:matchesFactory)(test);if("function"==typeof test)return test;throw new Error("Expected function, string, or object as test")}function matchesFactory(test){return function matches(node){var key;for(key in test)if(node[key]!==test[key])return!1;return!0}}function anyFactory(tests){var checks=function convertAll(tests){for(var results=[],length=tests.length,index=-1;++index<length;)results[index]=convert(tests[index]);return results}(tests),length=checks.length;return function matches(){var index=-1;for(;++index<length;)if(checks[index].apply(this,arguments))return!0;return!1}}function ok(){return!0}module.exports=convert},"./node_modules/unist-util-position/index.js":(__unused_webpack_module,exports)=>{"use strict";var position=exports;function factory(type){return point.displayName=type,point;function point(node){var point=node&&node.position&&node.position[type]||{};return{line:point.line||null,column:point.column||null,offset:isNaN(point.offset)?null:point.offset}}}position.start=factory("start"),position.end=factory("end")},"./node_modules/unist-util-stringify-position/index.js":module=>{"use strict";var own={}.hasOwnProperty;function point(point){return point&&"object"==typeof point||(point={}),index(point.line)+":"+index(point.column)}function position(pos){return pos&&"object"==typeof pos||(pos={}),point(pos.start)+"-"+point(pos.end)}function index(value){return value&&"number"==typeof value?value:1}module.exports=function stringify(value){if(!value||"object"!=typeof value)return"";if(own.call(value,"position")||own.call(value,"type"))return position(value.position);if(own.call(value,"start")||own.call(value,"end"))return position(value);if(own.call(value,"line")||own.call(value,"column"))return point(value);return""}},"./node_modules/unist-util-visit-parents/color.browser.js":module=>{module.exports=function identity(d){return d}},"./node_modules/unist-util-visit-parents/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=visitParents;var convert=__webpack_require__("./node_modules/unist-util-is/convert.js"),color=__webpack_require__("./node_modules/unist-util-visit-parents/color.browser.js"),CONTINUE=!0,SKIP="skip",EXIT=!1;function visitParents(tree,test,visitor,reverse){var step,is;"function"==typeof test&&"function"!=typeof visitor&&(reverse=visitor,visitor=test,test=null),is=convert(test),step=reverse?-1:1,function factory(node,index,parents){var name,value="object"==typeof node&&null!==node?node:{};"string"==typeof value.type&&(name="string"==typeof value.tagName?value.tagName:"string"==typeof value.name?value.name:void 0,visit.displayName="node ("+color(value.type+(name?"<"+name+">":""))+")");return visit;function visit(){var subresult,offset,grandparents=parents.concat(node),result=[];if((!test||is(node,index,parents[parents.length-1]||null))&&(result=function toResult(value){if(null!==value&&"object"==typeof value&&"length"in value)return value;if("number"==typeof value)return[CONTINUE,value];return[value]}(visitor(node,parents)),result[0]===EXIT))return result;if(node.children&&result[0]!==SKIP)for(offset=(reverse?node.children.length:-1)+step;offset>-1&&offset<node.children.length;){if((subresult=factory(node.children[offset],offset,grandparents)())[0]===EXIT)return subresult;offset="number"==typeof subresult[1]?subresult[1]:offset+step}return result}}(tree,null,[])()}visitParents.CONTINUE=CONTINUE,visitParents.SKIP=SKIP,visitParents.EXIT=EXIT},"./node_modules/unist-util-visit/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=visit;var visitParents=__webpack_require__("./node_modules/unist-util-visit-parents/index.js"),CONTINUE=visitParents.CONTINUE,SKIP=visitParents.SKIP,EXIT=visitParents.EXIT;function visit(tree,test,visitor,reverse){"function"==typeof test&&"function"!=typeof visitor&&(reverse=visitor,visitor=test,test=null),visitParents(tree,test,(function overload(node,parents){var parent=parents[parents.length-1],index=parent?parent.children.indexOf(node):null;return visitor(node,index,parent)}),reverse)}visit.CONTINUE=CONTINUE,visit.SKIP=SKIP,visit.EXIT=EXIT},"./node_modules/vfile-location/index.js":module=>{"use strict";module.exports=function factory(file){var value=String(file),indices=[],search=/\r?\n|\r/g;for(;search.exec(value);)indices.push(search.lastIndex);return indices.push(value.length+1),{toPoint:offsetToPoint,toPosition:offsetToPoint,toOffset:function pointToOffset(point){var offset,line=point&&point.line,column=point&&point.column;isNaN(line)||isNaN(column)||!(line-1 in indices)||(offset=(indices[line-2]||0)+column-1||0);return offset>-1&&offset<indices[indices.length-1]?offset:-1}};function offsetToPoint(offset){var index=-1;if(offset>-1&&offset<indices[indices.length-1])for(;++index<indices.length;)if(indices[index]>offset)return{line:index+1,column:offset-(indices[index-1]||0)+1,offset};return{}}}},"./node_modules/vfile-message/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var stringify=__webpack_require__("./node_modules/unist-util-stringify-position/index.js");function VMessagePrototype(){}module.exports=VMessage,VMessagePrototype.prototype=Error.prototype,VMessage.prototype=new VMessagePrototype;var proto=VMessage.prototype;function VMessage(reason,position,origin){var parts,range,location;"string"==typeof position&&(origin=position,position=null),parts=function parseOrigin(origin){var index,result=[null,null];"string"==typeof origin&&(-1===(index=origin.indexOf(":"))?result[1]=origin:(result[0]=origin.slice(0,index),result[1]=origin.slice(index+1)));return result}(origin),range=stringify(position)||"1:1",location={start:{line:null,column:null},end:{line:null,column:null}},position&&position.position&&(position=position.position),position&&(position.start?(location=position,position=position.start):location.start=position),reason.stack&&(this.stack=reason.stack,reason=reason.message),this.message=reason,this.name=range,this.reason=reason,this.line=position?position.line:null,this.column=position?position.column:null,this.location=location,this.source=parts[0],this.ruleId=parts[1]}proto.file="",proto.name="",proto.reason="",proto.message="",proto.stack="",proto.fatal=null,proto.column=null,proto.line=null},"./node_modules/vfile/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/vfile/lib/index.js")},"./node_modules/vfile/lib/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var p=__webpack_require__("./node_modules/vfile/lib/minpath.browser.js"),proc=__webpack_require__("./node_modules/vfile/lib/minproc.browser.js"),buffer=__webpack_require__("./node_modules/vfile/node_modules/is-buffer/index.js");module.exports=VFile;var own={}.hasOwnProperty,order=["history","path","basename","stem","extname","dirname"];function VFile(options){var prop,index;if(options){if("string"==typeof options||buffer(options))options={contents:options};else if("message"in options&&"messages"in options)return options}else options={};if(!(this instanceof VFile))return new VFile(options);for(this.data={},this.messages=[],this.history=[],this.cwd=proc.cwd(),index=-1;++index<order.length;)prop=order[index],own.call(options,prop)&&(this[prop]=options[prop]);for(prop in options)order.indexOf(prop)<0&&(this[prop]=options[prop])}function assertPart(part,name){if(part&&part.indexOf(p.sep)>-1)throw new Error("`"+name+"` cannot be a path: did not expect `"+p.sep+"`")}function assertNonEmpty(part,name){if(!part)throw new Error("`"+name+"` cannot be empty")}function assertPath(path,name){if(!path)throw new Error("Setting `"+name+"` requires `path` to be set too")}VFile.prototype.toString=function toString(encoding){return(this.contents||"").toString(encoding)},Object.defineProperty(VFile.prototype,"path",{get:function getPath(){return this.history[this.history.length-1]},set:function setPath(path){assertNonEmpty(path,"path"),this.path!==path&&this.history.push(path)}}),Object.defineProperty(VFile.prototype,"dirname",{get:function getDirname(){return"string"==typeof this.path?p.dirname(this.path):void 0},set:function setDirname(dirname){assertPath(this.path,"dirname"),this.path=p.join(dirname||"",this.basename)}}),Object.defineProperty(VFile.prototype,"basename",{get:function getBasename(){return"string"==typeof this.path?p.basename(this.path):void 0},set:function setBasename(basename){assertNonEmpty(basename,"basename"),assertPart(basename,"basename"),this.path=p.join(this.dirname||"",basename)}}),Object.defineProperty(VFile.prototype,"extname",{get:function getExtname(){return"string"==typeof this.path?p.extname(this.path):void 0},set:function setExtname(extname){if(assertPart(extname,"extname"),assertPath(this.path,"extname"),extname){if(46!==extname.charCodeAt(0))throw new Error("`extname` must start with `.`");if(extname.indexOf(".",1)>-1)throw new Error("`extname` cannot contain multiple dots")}this.path=p.join(this.dirname,this.stem+(extname||""))}}),Object.defineProperty(VFile.prototype,"stem",{get:function getStem(){return"string"==typeof this.path?p.basename(this.path,this.extname):void 0},set:function setStem(stem){assertNonEmpty(stem,"stem"),assertPart(stem,"stem"),this.path=p.join(this.dirname||"",stem+(this.extname||""))}})},"./node_modules/vfile/lib/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var VMessage=__webpack_require__("./node_modules/vfile-message/index.js"),VFile=__webpack_require__("./node_modules/vfile/lib/core.js");module.exports=VFile,VFile.prototype.message=function message(reason,position,origin){var message=new VMessage(reason,position,origin);this.path&&(message.name=this.path+":"+message.name,message.file=this.path);return message.fatal=!1,this.messages.push(message),message},VFile.prototype.info=function info(){var message=this.message.apply(this,arguments);return message.fatal=null,message},VFile.prototype.fail=function fail(){var message=this.message.apply(this,arguments);throw message.fatal=!0,message}},"./node_modules/vfile/lib/minpath.browser.js":(__unused_webpack_module,exports)=>{"use strict";function assertPath(path){if("string"!=typeof path)throw new TypeError("Path must be a string. Received "+JSON.stringify(path))}exports.basename=function basename(path,ext){var index,firstNonSlashEnd,seenNonSlash,extIndex,start=0,end=-1;if(void 0!==ext&&"string"!=typeof ext)throw new TypeError('"ext" argument must be a string');if(assertPath(path),index=path.length,void 0===ext||!ext.length||ext.length>path.length){for(;index--;)if(47===path.charCodeAt(index)){if(seenNonSlash){start=index+1;break}}else end<0&&(seenNonSlash=!0,end=index+1);return end<0?"":path.slice(start,end)}if(ext===path)return"";firstNonSlashEnd=-1,extIndex=ext.length-1;for(;index--;)if(47===path.charCodeAt(index)){if(seenNonSlash){start=index+1;break}}else firstNonSlashEnd<0&&(seenNonSlash=!0,firstNonSlashEnd=index+1),extIndex>-1&&(path.charCodeAt(index)===ext.charCodeAt(extIndex--)?extIndex<0&&(end=index):(extIndex=-1,end=firstNonSlashEnd));start===end?end=firstNonSlashEnd:end<0&&(end=path.length);return path.slice(start,end)},exports.dirname=function dirname(path){var end,unmatchedSlash,index;if(assertPath(path),!path.length)return".";end=-1,index=path.length;for(;--index;)if(47===path.charCodeAt(index)){if(unmatchedSlash){end=index;break}}else unmatchedSlash||(unmatchedSlash=!0);return end<0?47===path.charCodeAt(0)?"/":".":1===end&&47===path.charCodeAt(0)?"//":path.slice(0,end)},exports.extname=function extname(path){var unmatchedSlash,code,index,startDot=-1,startPart=0,end=-1,preDotState=0;assertPath(path),index=path.length;for(;index--;)if(47!==(code=path.charCodeAt(index)))end<0&&(unmatchedSlash=!0,end=index+1),46===code?startDot<0?startDot=index:1!==preDotState&&(preDotState=1):startDot>-1&&(preDotState=-1);else if(unmatchedSlash){startPart=index+1;break}if(startDot<0||end<0||0===preDotState||1===preDotState&&startDot===end-1&&startDot===startPart+1)return"";return path.slice(startDot,end)},exports.join=function join(){var joined,index=-1;for(;++index<arguments.length;)assertPath(arguments[index]),arguments[index]&&(joined=void 0===joined?arguments[index]:joined+"/"+arguments[index]);return void 0===joined?".":function normalize(path){var absolute,value;assertPath(path),absolute=47===path.charCodeAt(0),value=function normalizeString(path,allowAboveRoot){var code,lastSlashIndex,result="",lastSegmentLength=0,lastSlash=-1,dots=0,index=-1;for(;++index<=path.length;){if(index<path.length)code=path.charCodeAt(index);else{if(47===code)break;code=47}if(47===code){if(lastSlash===index-1||1===dots);else if(lastSlash!==index-1&&2===dots){if(result.length<2||2!==lastSegmentLength||46!==result.charCodeAt(result.length-1)||46!==result.charCodeAt(result.length-2))if(result.length>2){if((lastSlashIndex=result.lastIndexOf("/"))!==result.length-1){lastSlashIndex<0?(result="",lastSegmentLength=0):lastSegmentLength=(result=result.slice(0,lastSlashIndex)).length-1-result.lastIndexOf("/"),lastSlash=index,dots=0;continue}}else if(result.length){result="",lastSegmentLength=0,lastSlash=index,dots=0;continue}allowAboveRoot&&(result=result.length?result+"/..":"..",lastSegmentLength=2)}else result.length?result+="/"+path.slice(lastSlash+1,index):result=path.slice(lastSlash+1,index),lastSegmentLength=index-lastSlash-1;lastSlash=index,dots=0}else 46===code&&dots>-1?dots++:dots=-1}return result}(path,!absolute),value.length||absolute||(value=".");value.length&&47===path.charCodeAt(path.length-1)&&(value+="/");return absolute?"/"+value:value}(joined)},exports.sep="/"},"./node_modules/vfile/lib/minproc.browser.js":(__unused_webpack_module,exports)=>{"use strict";exports.cwd=function cwd(){return"/"}},"./node_modules/vfile/node_modules/is-buffer/index.js":module=>{module.exports=function isBuffer(obj){return null!=obj&&null!=obj.constructor&&"function"==typeof obj.constructor.isBuffer&&obj.constructor.isBuffer(obj)}},"./node_modules/xtend/immutable.js":module=>{module.exports=function extend(){for(var target={},i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source)hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};var hasOwnProperty=Object.prototype.hasOwnProperty},"./node_modules/web-namespaces/index.json":module=>{"use strict";module.exports=JSON.parse('{"html":"http://www.w3.org/1999/xhtml","mathml":"http://www.w3.org/1998/Math/MathML","svg":"http://www.w3.org/2000/svg","xlink":"http://www.w3.org/1999/xlink","xml":"http://www.w3.org/XML/1998/namespace","xmlns":"http://www.w3.org/2000/xmlns/"}')}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,