(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[273],{"./src/code-studio/pd/workshop_dashboard/components/survey_results/question_averages_table.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var QuestionAveragesTable=function(_React$Component){function QuestionAveragesTable(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(QuestionAveragesTable,_React$Component);var _proto=QuestionAveragesTable.prototype;return _proto.renderHeaderRow=function renderHeaderRow(){var facilitatorColumnHeaders;return this.props.facilitatorBreakdown&&(facilitatorColumnHeaders=this.props.facilitatorNames.map((function(facilitator,i){return _react.default.createElement("th",{key:i},facilitator)}))),_react.default.createElement("thead",null,_react.default.createElement("tr",null,_react.default.createElement("th",null),_react.default.createElement("th",null,"This workshop"),facilitatorColumnHeaders,_react.default.createElement("th",null,"All my ",this.props.workshopType),_react.default.createElement("th",null,"All workshops")))},_proto.renderRow=function renderRow(row,i){var scoreCells,_this=this,thisWorkshopData=this.props.thisWorkshopData[row.key];return this.props.facilitatorBreakdown&&"object"===_typeof(thisWorkshopData)?(scoreCells=this.props.facilitatorNames.map((function(facilitator_name){return _react.default.createElement("td",{key:facilitator_name},_this.renderScore(row,thisWorkshopData[facilitator_name]))}))).unshift(_react.default.createElement("td",{key:"this workshop"})):(scoreCells=[_react.default.createElement("td",{key:0},this.renderScore(row,thisWorkshopData))],this.props.facilitatorBreakdown&&_lodash.default.times(this.props.facilitatorNames.length,(function(i){scoreCells.push(_react.default.createElement("td",{key:i+1}))}))),_react.default.createElement("tr",{key:i},_react.default.createElement("td",null,row.text),scoreCells,_react.default.createElement("td",null,this.renderScore(row,this.props.allMyWorkshopsData[row.key])),_react.default.createElement("td",null,this.renderScore(row,this.props.allWorkshopsData[row.key])))},_proto.renderScore=function renderScore(row,score){return score&&row.score_base?"".concat(score," / ").concat(row.score_base):score||""},_proto.render=function render(){var _this2=this;return _react.default.createElement("table",{className:"table table-bordered",style:{width:"auto"}},this.renderHeaderRow(),_react.default.createElement("tbody",null,this.props.questions.map((function(row,i){return _this2.renderRow(row,i)}))))},QuestionAveragesTable}(_react.default.Component);exports.default=QuestionAveragesTable,function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(QuestionAveragesTable,"propTypes",{questions:_propTypes.default.arrayOf(_propTypes.default.object).isRequired,thisWorkshopData:_propTypes.default.object.isRequired,allMyWorkshopsData:_propTypes.default.object.isRequired,allWorkshopsData:_propTypes.default.object.isRequired,facilitatorNames:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,facilitatorBreakdown:_propTypes.default.bool.isRequired,workshopType:_propTypes.default.string.isRequired}),module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/code-studio/pd/workshop_dashboard/components/survey_results/question_averages_table.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.TableForMultipleFacilitators=exports.TableForASingleFacilitator=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_question_averages_table=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/workshop_dashboard/components/survey_results/question_averages_table.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var questions=[{text:"Was the facilitator good at brooding?",key:"question_1",score_base:5},{text:"How was the session?",key:"question_2",score_base:5}],_default={component:_question_averages_table.default};exports.default=_default;var Template=function Template(args){return _react.default.createElement("div",{id:"application-container"},_react.default.createElement(_question_averages_table.default,_extends({className:"table table-bordered",style:{width:"auto"}},args)))},TableForASingleFacilitator=Template.bind({});exports.TableForASingleFacilitator=TableForASingleFacilitator,TableForASingleFacilitator.args={name:"Table for a single facilitator",questions,thisWorkshopData:{question_1:5,question_2:5},allMyWorkshopsData:{question_1:4,question_2:4.1},allWorkshopsData:{question_1:3.5,question_2:3.6},allWorkshops:!0,facilitatorNames:["Jon Snow","Tyrion Lannister"],facilitatorBreakdown:!1,workshopType:"TeacherCons"};var TableForMultipleFacilitators=Template.bind({});exports.TableForMultipleFacilitators=TableForMultipleFacilitators,TableForMultipleFacilitators.args={name:"Table for multiple facilitators",questions,facilitatorNames:["Jon Snow","Tyrion Lannister"],facilitatorBreakdown:!0,thisWorkshopData:{question_1:{"Jon Snow":5,"Tyrion Lannister":3},question_2:5},allMyWorkshopsData:{question_1:4,question_2:4.1},allWorkshopsData:{question_1:3.5,question_2:3.6},workshopType:"TeacherCons"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,