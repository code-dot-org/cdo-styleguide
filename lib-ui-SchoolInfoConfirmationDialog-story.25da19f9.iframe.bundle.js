"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[751],{"./src/lib/ui/SchoolInfoConfirmationDialog.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.styles=exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireWildcard(__webpack_require__("./node_modules/react/index.js")),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_AnalyticsConstants=__webpack_require__("./src/lib/util/AnalyticsConstants.js"),_AnalyticsReporter=_interopRequireDefault(__webpack_require__("./src/lib/util/AnalyticsReporter.js")),_Dialog=_interopRequireWildcard(__webpack_require__("./src/templates/Dialog.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_redux=__webpack_require__("./src/redux.js"),_SchoolInfoInterstitial=_interopRequireDefault(__webpack_require__("./src/lib/ui/SchoolInfoInterstitial.jsx"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var styles=exports.styles={button:{marginTop:20,marginLeft:"50%"},buttonRTL:{marginTop:20,marginRight:"50%"},updateButton:{marginTop:20,marginLeft:5},updateButtonRTL:{marginTop:20,marginRight:5},intro:_objectSpread(_objectSpread({fontSize:18},_fontConstants.default["main-font-semi-bold"]),{},{color:_color.default.charcoal,paddingRight:20}),schoolName:{color:_color.default.purple,fontStyle:"italic"},body:{margin:10}},SchoolInfoConfirmationDialog=function(_Component){function SchoolInfoConfirmationDialog(props){var _this;return _defineProperty(_this=_Component.call(this,props)||this,"closeModal",(function(){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.UPDATE_SCHOOL_INFO_DIALOG_CLOSED,{},_AnalyticsConstants.PLATFORMS.BOTH),_this.setState({isOpen:!1}),_this.props.onClose()})),_defineProperty(_this,"handleClickYes",(function(){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.CONFIRM_SCHOOL_CLICKED,{},_AnalyticsConstants.PLATFORMS.BOTH);var _this$props$scriptDat=_this.props.scriptData,authTokenName=_this$props$scriptDat.authTokenName,authTokenValue=_this$props$scriptDat.authTokenValue,formData=new FormData;formData.append(authTokenName,authTokenValue),fetch("/api/v1/user_school_infos/".concat(_this.props.scriptData.existingSchoolInfo.user_school_info_id,"/update_last_confirmation_date"),{method:"PATCH",body:formData}).then(_this.closeModal).catch((function(error){_this.setState({error})}))})),_defineProperty(_this,"handleClickUpdate",(function(){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.UPDATE_SCHOOL_CLICKED,{},_AnalyticsConstants.PLATFORMS.BOTH),_this.setState({showSchoolInterstitial:!0})})),_defineProperty(_this,"renderInitialContent",(function(){var _getStore$getState;_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.UPDATE_SCHOOL_INFO_DIALOG_SHOWN,{},_AnalyticsConstants.PLATFORMS.BOTH);var schoolName=_this.state.schoolName,isRTL=null===(_getStore$getState=(0,_redux.getStore)().getState())||void 0===_getStore$getState?void 0:_getStore$getState.isRtl;return _react.default.createElement(_Dialog.Body,null,_react.default.createElement("div",{style:styles.body},_react.default.createElement("p",{style:styles.intro},_locale.default.schoolInfoDialogDescription(),_react.default.createElement("span",{style:styles.schoolName},_locale.default.schoolInfoDialogDescriptionSchoolName({schoolName})))),_react.default.createElement(_Button.default,{style:isRTL?styles.updateButtonRTL:styles.updateButton,text:_locale.default.schoolInfoDialogUpdate(),color:_Button.default.ButtonColor.blue,onClick:_this.handleClickUpdate,id:"update-button"}),_react.default.createElement(_Button.default,{style:isRTL?styles.buttonRTL:styles.button,text:_locale.default.yes(),color:_Button.default.ButtonColor.brandSecondaryDefault,onClick:_this.handleClickYes,id:"yes-button"}))})),_this.state={showSchoolInterstitial:!1,schoolName:props.scriptData.existingSchoolInfo.school_name,isOpen:props.isOpen||!0},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SchoolInfoConfirmationDialog,_Component);var _proto=SchoolInfoConfirmationDialog.prototype;return _proto.renderSchoolInformationForm=function renderSchoolInformationForm(){return _react.default.createElement(_Dialog.Body,null,_react.default.createElement(_SchoolInfoInterstitial.default,{scriptData:this.props.scriptData,onClose:this.closeModal}))},_proto.render=function render(){var _this$state=this.state,showSchoolInterstitial=_this$state.showSchoolInterstitial,isOpen=_this$state.isOpen;return _react.default.createElement(_Dialog.default,{isOpen,handleClose:this.closeModal},showSchoolInterstitial?this.renderSchoolInformationForm():this.renderInitialContent())},SchoolInfoConfirmationDialog}(_react.Component);_defineProperty(SchoolInfoConfirmationDialog,"propTypes",{schoolName:_propTypes.default.string,scriptData:_propTypes.default.shape({formUrl:_propTypes.default.string.isRequired,authTokenName:_propTypes.default.string.isRequired,authTokenValue:_propTypes.default.string.isRequired,existingSchoolInfo:_propTypes.default.shape({id:_propTypes.default.number,user_school_info_id:_propTypes.default.number,school_id:_propTypes.default.string,country:_propTypes.default.string,school_type:_propTypes.default.string,school_name:_propTypes.default.string,full_address:_propTypes.default.string}).isRequired}).isRequired,onClose:_propTypes.default.func,isOpen:_propTypes.default.bool});exports.default=SchoolInfoConfirmationDialog},"./src/redux.js":(module,exports,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStore=function getStore(){reduxStore||(reduxStore=createStoreWithReducers(),_experiments.default.isEnabled("reduxGlobalStore")&&(window.reduxStore=reduxStore));return reduxStore},exports.hasReducer=function hasReducer(key){return!!globalReducers[key]},exports.registerReducers=function registerReducers(reducers){for(var key in reducers){var existingReducer=globalReducers[key];if(existingReducer&&existingReducer!==reducers[key])throw new Error('reducer with key "'.concat(key,'" already registered!'))}Object.assign(globalReducers,reducers),reduxStore&&reduxStore.replaceReducer(redux.combineReducers(globalReducers))};var reduxStore,_toolkit=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),redux=(_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/redux/es/redux.js"))),_reduxThunk=_interopRequireDefault(__webpack_require__("./node_modules/redux-thunk/lib/index.js")),_experiments=_interopRequireDefault(__webpack_require__("./src/util/experiments.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var globalReducers={};function createStoreWithReducers(){return function createStore(reducer,initialState){_experiments.default.isEnabled(_experiments.default.REDUX_LOGGING);0;return(0,_toolkit.configureStore)({reducer,preloadedState:initialState,middleware:[_reduxThunk.default],devTools:!1})}(Object.keys(globalReducers).length>0?globalReducers:function(s){return s})}module.exports.createStoreWithReducers=createStoreWithReducers},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./src/lib/ui/SchoolInfoConfirmationDialog.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DisplaySchoolInfoConfirmationDialog=void 0;var _addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js"),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_SchoolInfoConfirmationDialog=_interopRequireDefault(__webpack_require__("./src/lib/ui/SchoolInfoConfirmationDialog.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_SchoolInfoConfirmationDialog.default};(exports.DisplaySchoolInfoConfirmationDialog=function Template(args){return _react.default.createElement(_SchoolInfoConfirmationDialog.default,args)}.bind({})).args={scriptData:{formUrl:"",authTokenName:"auth_token",authTokenValue:"fake_auth_token",existingSchoolInfo:{}},onClose:(0,_addonActions.action)("onClose callback"),isOpen:!0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,