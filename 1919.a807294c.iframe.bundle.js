/*! For license information please see 1919.a807294c.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1919],{"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/dom-confetti/lib/main.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.confetti=function confetti(root){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_Object$assign=Object.assign({},defaults,function backwardPatch(config){!config.stagger&&config.delay&&(config.stagger=config.delay);return config}(config)),elementCount=_Object$assign.elementCount,colors=_Object$assign.colors,width=_Object$assign.width,height=_Object$assign.height,perspective=_Object$assign.perspective,angle=_Object$assign.angle,spread=_Object$assign.spread,startVelocity=_Object$assign.startVelocity,decay=_Object$assign.decay,dragFriction=_Object$assign.dragFriction,duration=_Object$assign.duration,stagger=_Object$assign.stagger,random=_Object$assign.random;root.style.perspective=perspective;var fettis=function createElements(root,elementCount,colors,width,height){return Array.from({length:elementCount}).map((function(_,index){var element=document.createElement("div"),color=colors[index%colors.length];return element.style["background-color"]=color,element.style.width=width,element.style.height=height,element.style.position="absolute",element.style.willChange="transform, opacity",element.style.visibility="hidden",root.appendChild(element),element}))}(root,elementCount,colors,width,height).map((function(element){return{element,physics:randomPhysics(angle,spread,startVelocity,random)}}));return function animate(root,fettis,dragFriction,decay,duration,stagger){var startTime=void 0;return new Promise((function(resolve){function update(time){startTime||(startTime=time);var elapsed=time-startTime,progress=startTime===time?0:(time-startTime)/duration;fettis.slice(0,Math.ceil(elapsed/stagger)).forEach((function(fetti){!function updateFetti(fetti,progress,dragFriction,decay){fetti.physics.x+=Math.cos(fetti.physics.angle2D)*fetti.physics.velocity,fetti.physics.y+=Math.sin(fetti.physics.angle2D)*fetti.physics.velocity,fetti.physics.z+=Math.sin(fetti.physics.angle3D)*fetti.physics.velocity,fetti.physics.wobble+=fetti.physics.wobbleSpeed,decay?fetti.physics.velocity*=decay:fetti.physics.velocity-=fetti.physics.velocity*dragFriction;fetti.physics.y+=3,fetti.physics.tiltAngle+=fetti.physics.tiltAngleSpeed;var _fetti$physics=fetti.physics,x=_fetti$physics.x,y=_fetti$physics.y,z=_fetti$physics.z,tiltAngle=_fetti$physics.tiltAngle,wobble=_fetti$physics.wobble,wobbleX=x+10*Math.cos(wobble),wobbleY=y+10*Math.sin(wobble),transform="translate3d("+wobbleX+"px, "+wobbleY+"px, "+z+"px) rotate3d(1, 1, 1, "+tiltAngle+"rad)";fetti.element.style.visibility="visible",fetti.element.style.transform=transform,fetti.element.style.opacity=1-progress}(fetti,progress,dragFriction,decay)})),time-startTime<duration?requestAnimationFrame(update):(fettis.forEach((function(fetti){if(fetti.element.parentNode===root)return root.removeChild(fetti.element)})),resolve())}requestAnimationFrame(update)}))}(root,fettis,dragFriction,decay,duration,stagger)};function randomPhysics(angle,spread,startVelocity,random){var radAngle=angle*(Math.PI/180),radSpread=spread*(Math.PI/180);return{x:0,y:0,z:0,wobble:10*random(),wobbleSpeed:.1+.1*random(),velocity:.5*startVelocity+random()*startVelocity,angle2D:-radAngle+(.5*radSpread-random()*radSpread),angle3D:-Math.PI/4+random()*(Math.PI/2),tiltAngle:random()*Math.PI,tiltAngleSpeed:.1+.3*random()}}var defaults={angle:90,spread:45,startVelocity:45,elementCount:50,width:"10px",height:"10px",perspective:"",colors:["#a864fd","#29cdff","#78ff44","#ff718d","#fdff6a"],duration:3e3,stagger:0,dragFriction:.1,random:Math.random}},"./node_modules/react-dom-confetti/lib/confetti.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react=__webpack_require__("./node_modules/react/index.js"),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(_react),_domConfetti=__webpack_require__("./node_modules/dom-confetti/lib/main.js");var style={position:"relative"},Confetti=function(_Component){function Confetti(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Confetti);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Confetti.__proto__||Object.getPrototypeOf(Confetti)).call(this,props));return _this.setRef=_this.setRef.bind(_this),_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Confetti,_Component),_createClass(Confetti,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){!prevProps.active&&this.props.active&&(0,_domConfetti.confetti)(this.container,this.props.config)}},{key:"setRef",value:function setRef(ref){this.container=ref}},{key:"render",value:function render(){return _react2.default.createElement("div",{className:this.props.className,style,ref:this.setRef})}}]),Confetti}(_react.Component);exports.default=Confetti},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./node_modules/swiper/swiper-element-bundle.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";function isObject(obj){return null!==obj&&"object"==typeof obj&&"constructor"in obj&&obj.constructor===Object}function extend(target,src){void 0===target&&(target={}),void 0===src&&(src={}),Object.keys(src).forEach((key=>{void 0===target[key]?target[key]=src[key]:isObject(src[key])&&isObject(target[key])&&Object.keys(src[key]).length>0&&extend(target[key],src[key])}))}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SwiperContainer:()=>SwiperContainer,SwiperSlide:()=>SwiperSlide,register:()=>register});const ssrDocument={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function getDocument(){const doc="undefined"!=typeof document?document:{};return extend(doc,ssrDocument),doc}const ssrWindow={document:ssrDocument,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function CustomEvent(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:callback=>"undefined"==typeof setTimeout?(callback(),null):setTimeout(callback,0),cancelAnimationFrame(id){"undefined"!=typeof setTimeout&&clearTimeout(id)}};function getWindow(){const win="undefined"!=typeof window?window:{};return extend(win,ssrWindow),win}function classesToTokens(classes){return void 0===classes&&(classes=""),classes.trim().split(" ").filter((c=>!!c.trim()))}function nextTick(callback,delay){return void 0===delay&&(delay=0),setTimeout(callback,delay)}function now(){return Date.now()}function getTranslate(el,axis){void 0===axis&&(axis="x");const window=getWindow();let matrix,curTransform,transformMatrix;const curStyle=function utils_getComputedStyle(el){const window=getWindow();let style;return window.getComputedStyle&&(style=window.getComputedStyle(el,null)),!style&&el.currentStyle&&(style=el.currentStyle),style||(style=el.style),style}(el);return window.WebKitCSSMatrix?(curTransform=curStyle.transform||curStyle.webkitTransform,curTransform.split(",").length>6&&(curTransform=curTransform.split(", ").map((a=>a.replace(",","."))).join(", ")),transformMatrix=new window.WebKitCSSMatrix("none"===curTransform?"":curTransform)):(transformMatrix=curStyle.MozTransform||curStyle.OTransform||curStyle.MsTransform||curStyle.msTransform||curStyle.transform||curStyle.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),matrix=transformMatrix.toString().split(",")),"x"===axis&&(curTransform=window.WebKitCSSMatrix?transformMatrix.m41:16===matrix.length?parseFloat(matrix[12]):parseFloat(matrix[4])),"y"===axis&&(curTransform=window.WebKitCSSMatrix?transformMatrix.m42:16===matrix.length?parseFloat(matrix[13]):parseFloat(matrix[5])),curTransform||0}function utils_isObject(o){return"object"==typeof o&&null!==o&&o.constructor&&"Object"===Object.prototype.toString.call(o).slice(8,-1)}function utils_extend(){const to=Object(arguments.length<=0?void 0:arguments[0]),noExtend=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const nextSource=i<0||arguments.length<=i?void 0:arguments[i];if(null!=nextSource&&(node=nextSource,!("undefined"!=typeof window&&void 0!==window.HTMLElement?node instanceof HTMLElement:node&&(1===node.nodeType||11===node.nodeType)))){const keysArray=Object.keys(Object(nextSource)).filter((key=>noExtend.indexOf(key)<0));for(let nextIndex=0,len=keysArray.length;nextIndex<len;nextIndex+=1){const nextKey=keysArray[nextIndex],desc=Object.getOwnPropertyDescriptor(nextSource,nextKey);void 0!==desc&&desc.enumerable&&(utils_isObject(to[nextKey])&&utils_isObject(nextSource[nextKey])?nextSource[nextKey].__swiper__?to[nextKey]=nextSource[nextKey]:utils_extend(to[nextKey],nextSource[nextKey]):!utils_isObject(to[nextKey])&&utils_isObject(nextSource[nextKey])?(to[nextKey]={},nextSource[nextKey].__swiper__?to[nextKey]=nextSource[nextKey]:utils_extend(to[nextKey],nextSource[nextKey])):to[nextKey]=nextSource[nextKey])}}}var node;return to}function setCSSProperty(el,varName,varValue){el.style.setProperty(varName,varValue)}function animateCSSModeScroll(_ref){let{swiper,targetPosition,side}=_ref;const window=getWindow(),startPosition=-swiper.translate;let time,startTime=null;const duration=swiper.params.speed;swiper.wrapperEl.style.scrollSnapType="none",window.cancelAnimationFrame(swiper.cssModeFrameID);const dir=targetPosition>startPosition?"next":"prev",isOutOfBound=(current,target)=>"next"===dir&&current>=target||"prev"===dir&&current<=target,animate=()=>{time=(new Date).getTime(),null===startTime&&(startTime=time);const progress=Math.max(Math.min((time-startTime)/duration,1),0),easeProgress=.5-Math.cos(progress*Math.PI)/2;let currentPosition=startPosition+easeProgress*(targetPosition-startPosition);if(isOutOfBound(currentPosition,targetPosition)&&(currentPosition=targetPosition),swiper.wrapperEl.scrollTo({[side]:currentPosition}),isOutOfBound(currentPosition,targetPosition))return swiper.wrapperEl.style.overflow="hidden",swiper.wrapperEl.style.scrollSnapType="",setTimeout((()=>{swiper.wrapperEl.style.overflow="",swiper.wrapperEl.scrollTo({[side]:currentPosition})})),void window.cancelAnimationFrame(swiper.cssModeFrameID);swiper.cssModeFrameID=window.requestAnimationFrame(animate)};animate()}function getSlideTransformEl(slideEl){return slideEl.querySelector(".swiper-slide-transform")||slideEl.shadowRoot&&slideEl.shadowRoot.querySelector(".swiper-slide-transform")||slideEl}function elementChildren(element,selector){return void 0===selector&&(selector=""),[...element.children].filter((el=>el.matches(selector)))}function showWarning(text){try{return void console.warn(text)}catch(err){}}function createElement(tag,classes){void 0===classes&&(classes=[]);const el=document.createElement(tag);return el.classList.add(...Array.isArray(classes)?classes:classesToTokens(classes)),el}function elementOffset(el){const window=getWindow(),document=getDocument(),box=el.getBoundingClientRect(),body=document.body,clientTop=el.clientTop||body.clientTop||0,clientLeft=el.clientLeft||body.clientLeft||0,scrollTop=el===window?window.scrollY:el.scrollTop,scrollLeft=el===window?window.scrollX:el.scrollLeft;return{top:box.top+scrollTop-clientTop,left:box.left+scrollLeft-clientLeft}}function elementStyle(el,prop){return getWindow().getComputedStyle(el,null).getPropertyValue(prop)}function elementIndex(el){let i,child=el;if(child){for(i=0;null!==(child=child.previousSibling);)1===child.nodeType&&(i+=1);return i}}function elementParents(el,selector){const parents=[];let parent=el.parentElement;for(;parent;)selector?parent.matches(selector)&&parents.push(parent):parents.push(parent),parent=parent.parentElement;return parents}function elementTransitionEnd(el,callback){callback&&el.addEventListener("transitionend",(function fireCallBack(e){e.target===el&&(callback.call(el,e),el.removeEventListener("transitionend",fireCallBack))}))}function elementOuterSize(el,size,includeMargins){const window=getWindow();return includeMargins?el["width"===size?"offsetWidth":"offsetHeight"]+parseFloat(window.getComputedStyle(el,null).getPropertyValue("width"===size?"margin-right":"margin-top"))+parseFloat(window.getComputedStyle(el,null).getPropertyValue("width"===size?"margin-left":"margin-bottom")):el.offsetWidth}let support,deviceCached,browser;function getSupport(){return support||(support=function calcSupport(){const window=getWindow(),document=getDocument();return{smoothScroll:document.documentElement&&document.documentElement.style&&"scrollBehavior"in document.documentElement.style,touch:!!("ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch)}}()),support}function getDevice(overrides){return void 0===overrides&&(overrides={}),deviceCached||(deviceCached=function calcDevice(_temp){let{userAgent}=void 0===_temp?{}:_temp;const support=getSupport(),window=getWindow(),platform=window.navigator.platform,ua=userAgent||window.navigator.userAgent,device={ios:!1,android:!1},screenWidth=window.screen.width,screenHeight=window.screen.height,android=ua.match(/(Android);?[\s\/]+([\d.]+)?/);let ipad=ua.match(/(iPad).*OS\s([\d_]+)/);const ipod=ua.match(/(iPod)(.*OS\s([\d_]+))?/),iphone=!ipad&&ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/),windows="Win32"===platform;let macos="MacIntel"===platform;return!ipad&&macos&&support.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${screenWidth}x${screenHeight}`)>=0&&(ipad=ua.match(/(Version)\/([\d.]+)/),ipad||(ipad=[0,1,"13_0_0"]),macos=!1),android&&!windows&&(device.os="android",device.android=!0),(ipad||iphone||ipod)&&(device.os="ios",device.ios=!0),device}(overrides)),deviceCached}function getBrowser(){return browser||(browser=function calcBrowser(){const window=getWindow();let needPerspectiveFix=!1;function isSafari(){const ua=window.navigator.userAgent.toLowerCase();return ua.indexOf("safari")>=0&&ua.indexOf("chrome")<0&&ua.indexOf("android")<0}if(isSafari()){const ua=String(window.navigator.userAgent);if(ua.includes("Version/")){const[major,minor]=ua.split("Version/")[1].split(" ")[0].split(".").map((num=>Number(num)));needPerspectiveFix=major<16||16===major&&minor<2}}return{isSafari:needPerspectiveFix||isSafari(),needPerspectiveFix,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)}}()),browser}var eventsEmitter={on(events,handler,priority){const self=this;if(!self.eventsListeners||self.destroyed)return self;if("function"!=typeof handler)return self;const method=priority?"unshift":"push";return events.split(" ").forEach((event=>{self.eventsListeners[event]||(self.eventsListeners[event]=[]),self.eventsListeners[event][method](handler)})),self},once(events,handler,priority){const self=this;if(!self.eventsListeners||self.destroyed)return self;if("function"!=typeof handler)return self;function onceHandler(){self.off(events,onceHandler),onceHandler.__emitterProxy&&delete onceHandler.__emitterProxy;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];handler.apply(self,args)}return onceHandler.__emitterProxy=handler,self.on(events,onceHandler,priority)},onAny(handler,priority){const self=this;if(!self.eventsListeners||self.destroyed)return self;if("function"!=typeof handler)return self;const method=priority?"unshift":"push";return self.eventsAnyListeners.indexOf(handler)<0&&self.eventsAnyListeners[method](handler),self},offAny(handler){const self=this;if(!self.eventsListeners||self.destroyed)return self;if(!self.eventsAnyListeners)return self;const index=self.eventsAnyListeners.indexOf(handler);return index>=0&&self.eventsAnyListeners.splice(index,1),self},off(events,handler){const self=this;return!self.eventsListeners||self.destroyed?self:self.eventsListeners?(events.split(" ").forEach((event=>{void 0===handler?self.eventsListeners[event]=[]:self.eventsListeners[event]&&self.eventsListeners[event].forEach(((eventHandler,index)=>{(eventHandler===handler||eventHandler.__emitterProxy&&eventHandler.__emitterProxy===handler)&&self.eventsListeners[event].splice(index,1)}))})),self):self},emit(){const self=this;if(!self.eventsListeners||self.destroyed)return self;if(!self.eventsListeners)return self;let events,data,context;for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];"string"==typeof args[0]||Array.isArray(args[0])?(events=args[0],data=args.slice(1,args.length),context=self):(events=args[0].events,data=args[0].data,context=args[0].context||self),data.unshift(context);return(Array.isArray(events)?events:events.split(" ")).forEach((event=>{self.eventsAnyListeners&&self.eventsAnyListeners.length&&self.eventsAnyListeners.forEach((eventHandler=>{eventHandler.apply(context,[event,...data])})),self.eventsListeners&&self.eventsListeners[event]&&self.eventsListeners[event].forEach((eventHandler=>{eventHandler.apply(context,data)}))})),self}};const processLazyPreloader=(swiper,imageEl)=>{if(!swiper||swiper.destroyed||!swiper.params)return;const slideEl=imageEl.closest(swiper.isElement?"swiper-slide":`.${swiper.params.slideClass}`);if(slideEl){let lazyEl=slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);!lazyEl&&swiper.isElement&&(slideEl.shadowRoot?lazyEl=slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{slideEl.shadowRoot&&(lazyEl=slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`),lazyEl&&lazyEl.remove())}))),lazyEl&&lazyEl.remove()}},unlazy=(swiper,index)=>{if(!swiper.slides[index])return;const imageEl=swiper.slides[index].querySelector('[loading="lazy"]');imageEl&&imageEl.removeAttribute("loading")},preload=swiper=>{if(!swiper||swiper.destroyed||!swiper.params)return;let amount=swiper.params.lazyPreloadPrevNext;const len=swiper.slides.length;if(!len||!amount||amount<0)return;amount=Math.min(amount,len);const slidesPerView="auto"===swiper.params.slidesPerView?swiper.slidesPerViewDynamic():Math.ceil(swiper.params.slidesPerView),activeIndex=swiper.activeIndex;if(swiper.params.grid&&swiper.params.grid.rows>1){const activeColumn=activeIndex,preloadColumns=[activeColumn-amount];return preloadColumns.push(...Array.from({length:amount}).map(((_,i)=>activeColumn+slidesPerView+i))),void swiper.slides.forEach(((slideEl,i)=>{preloadColumns.includes(slideEl.column)&&unlazy(swiper,i)}))}const slideIndexLastInView=activeIndex+slidesPerView-1;if(swiper.params.rewind||swiper.params.loop)for(let i=activeIndex-amount;i<=slideIndexLastInView+amount;i+=1){const realIndex=(i%len+len)%len;(realIndex<activeIndex||realIndex>slideIndexLastInView)&&unlazy(swiper,realIndex)}else for(let i=Math.max(activeIndex-amount,0);i<=Math.min(slideIndexLastInView+amount,len-1);i+=1)i!==activeIndex&&(i>slideIndexLastInView||i<activeIndex)&&unlazy(swiper,i)};var update={updateSize:function updateSize(){const swiper=this;let width,height;const el=swiper.el;width=void 0!==swiper.params.width&&null!==swiper.params.width?swiper.params.width:el.clientWidth,height=void 0!==swiper.params.height&&null!==swiper.params.height?swiper.params.height:el.clientHeight,0===width&&swiper.isHorizontal()||0===height&&swiper.isVertical()||(width=width-parseInt(elementStyle(el,"padding-left")||0,10)-parseInt(elementStyle(el,"padding-right")||0,10),height=height-parseInt(elementStyle(el,"padding-top")||0,10)-parseInt(elementStyle(el,"padding-bottom")||0,10),Number.isNaN(width)&&(width=0),Number.isNaN(height)&&(height=0),Object.assign(swiper,{width,height,size:swiper.isHorizontal()?width:height}))},updateSlides:function updateSlides(){const swiper=this;function getDirectionPropertyValue(node,label){return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label))||0)}const params=swiper.params,{wrapperEl,slidesEl,size:swiperSize,rtlTranslate:rtl,wrongRTL}=swiper,isVirtual=swiper.virtual&&params.virtual.enabled,previousSlidesLength=isVirtual?swiper.virtual.slides.length:swiper.slides.length,slides=elementChildren(slidesEl,`.${swiper.params.slideClass}, swiper-slide`),slidesLength=isVirtual?swiper.virtual.slides.length:slides.length;let snapGrid=[];const slidesGrid=[],slidesSizesGrid=[];let offsetBefore=params.slidesOffsetBefore;"function"==typeof offsetBefore&&(offsetBefore=params.slidesOffsetBefore.call(swiper));let offsetAfter=params.slidesOffsetAfter;"function"==typeof offsetAfter&&(offsetAfter=params.slidesOffsetAfter.call(swiper));const previousSnapGridLength=swiper.snapGrid.length,previousSlidesGridLength=swiper.slidesGrid.length;let spaceBetween=params.spaceBetween,slidePosition=-offsetBefore,prevSlideSize=0,index=0;if(void 0===swiperSize)return;"string"==typeof spaceBetween&&spaceBetween.indexOf("%")>=0?spaceBetween=parseFloat(spaceBetween.replace("%",""))/100*swiperSize:"string"==typeof spaceBetween&&(spaceBetween=parseFloat(spaceBetween)),swiper.virtualSize=-spaceBetween,slides.forEach((slideEl=>{rtl?slideEl.style.marginLeft="":slideEl.style.marginRight="",slideEl.style.marginBottom="",slideEl.style.marginTop=""})),params.centeredSlides&&params.cssMode&&(setCSSProperty(wrapperEl,"--swiper-centered-offset-before",""),setCSSProperty(wrapperEl,"--swiper-centered-offset-after",""));const gridEnabled=params.grid&&params.grid.rows>1&&swiper.grid;let slideSize;gridEnabled?swiper.grid.initSlides(slides):swiper.grid&&swiper.grid.unsetSlides();const shouldResetSlideSize="auto"===params.slidesPerView&&params.breakpoints&&Object.keys(params.breakpoints).filter((key=>void 0!==params.breakpoints[key].slidesPerView)).length>0;for(let i=0;i<slidesLength;i+=1){let slide;if(slideSize=0,slides[i]&&(slide=slides[i]),gridEnabled&&swiper.grid.updateSlide(i,slide,slides),!slides[i]||"none"!==elementStyle(slide,"display")){if("auto"===params.slidesPerView){shouldResetSlideSize&&(slides[i].style[swiper.getDirectionLabel("width")]="");const slideStyles=getComputedStyle(slide),currentTransform=slide.style.transform,currentWebKitTransform=slide.style.webkitTransform;if(currentTransform&&(slide.style.transform="none"),currentWebKitTransform&&(slide.style.webkitTransform="none"),params.roundLengths)slideSize=swiper.isHorizontal()?elementOuterSize(slide,"width",!0):elementOuterSize(slide,"height",!0);else{const width=getDirectionPropertyValue(slideStyles,"width"),paddingLeft=getDirectionPropertyValue(slideStyles,"padding-left"),paddingRight=getDirectionPropertyValue(slideStyles,"padding-right"),marginLeft=getDirectionPropertyValue(slideStyles,"margin-left"),marginRight=getDirectionPropertyValue(slideStyles,"margin-right"),boxSizing=slideStyles.getPropertyValue("box-sizing");if(boxSizing&&"border-box"===boxSizing)slideSize=width+marginLeft+marginRight;else{const{clientWidth,offsetWidth}=slide;slideSize=width+paddingLeft+paddingRight+marginLeft+marginRight+(offsetWidth-clientWidth)}}currentTransform&&(slide.style.transform=currentTransform),currentWebKitTransform&&(slide.style.webkitTransform=currentWebKitTransform),params.roundLengths&&(slideSize=Math.floor(slideSize))}else slideSize=(swiperSize-(params.slidesPerView-1)*spaceBetween)/params.slidesPerView,params.roundLengths&&(slideSize=Math.floor(slideSize)),slides[i]&&(slides[i].style[swiper.getDirectionLabel("width")]=`${slideSize}px`);slides[i]&&(slides[i].swiperSlideSize=slideSize),slidesSizesGrid.push(slideSize),params.centeredSlides?(slidePosition=slidePosition+slideSize/2+prevSlideSize/2+spaceBetween,0===prevSlideSize&&0!==i&&(slidePosition=slidePosition-swiperSize/2-spaceBetween),0===i&&(slidePosition=slidePosition-swiperSize/2-spaceBetween),Math.abs(slidePosition)<.001&&(slidePosition=0),params.roundLengths&&(slidePosition=Math.floor(slidePosition)),index%params.slidesPerGroup==0&&snapGrid.push(slidePosition),slidesGrid.push(slidePosition)):(params.roundLengths&&(slidePosition=Math.floor(slidePosition)),(index-Math.min(swiper.params.slidesPerGroupSkip,index))%swiper.params.slidesPerGroup==0&&snapGrid.push(slidePosition),slidesGrid.push(slidePosition),slidePosition=slidePosition+slideSize+spaceBetween),swiper.virtualSize+=slideSize+spaceBetween,prevSlideSize=slideSize,index+=1}}if(swiper.virtualSize=Math.max(swiper.virtualSize,swiperSize)+offsetAfter,rtl&&wrongRTL&&("slide"===params.effect||"coverflow"===params.effect)&&(wrapperEl.style.width=`${swiper.virtualSize+spaceBetween}px`),params.setWrapperSize&&(wrapperEl.style[swiper.getDirectionLabel("width")]=`${swiper.virtualSize+spaceBetween}px`),gridEnabled&&swiper.grid.updateWrapperSize(slideSize,snapGrid),!params.centeredSlides){const newSlidesGrid=[];for(let i=0;i<snapGrid.length;i+=1){let slidesGridItem=snapGrid[i];params.roundLengths&&(slidesGridItem=Math.floor(slidesGridItem)),snapGrid[i]<=swiper.virtualSize-swiperSize&&newSlidesGrid.push(slidesGridItem)}snapGrid=newSlidesGrid,Math.floor(swiper.virtualSize-swiperSize)-Math.floor(snapGrid[snapGrid.length-1])>1&&snapGrid.push(swiper.virtualSize-swiperSize)}if(isVirtual&&params.loop){const size=slidesSizesGrid[0]+spaceBetween;if(params.slidesPerGroup>1){const groups=Math.ceil((swiper.virtual.slidesBefore+swiper.virtual.slidesAfter)/params.slidesPerGroup),groupSize=size*params.slidesPerGroup;for(let i=0;i<groups;i+=1)snapGrid.push(snapGrid[snapGrid.length-1]+groupSize)}for(let i=0;i<swiper.virtual.slidesBefore+swiper.virtual.slidesAfter;i+=1)1===params.slidesPerGroup&&snapGrid.push(snapGrid[snapGrid.length-1]+size),slidesGrid.push(slidesGrid[slidesGrid.length-1]+size),swiper.virtualSize+=size}if(0===snapGrid.length&&(snapGrid=[0]),0!==spaceBetween){const key=swiper.isHorizontal()&&rtl?"marginLeft":swiper.getDirectionLabel("marginRight");slides.filter(((_,slideIndex)=>!(params.cssMode&&!params.loop)||slideIndex!==slides.length-1)).forEach((slideEl=>{slideEl.style[key]=`${spaceBetween}px`}))}if(params.centeredSlides&&params.centeredSlidesBounds){let allSlidesSize=0;slidesSizesGrid.forEach((slideSizeValue=>{allSlidesSize+=slideSizeValue+(spaceBetween||0)})),allSlidesSize-=spaceBetween;const maxSnap=allSlidesSize-swiperSize;snapGrid=snapGrid.map((snap=>snap<=0?-offsetBefore:snap>maxSnap?maxSnap+offsetAfter:snap))}if(params.centerInsufficientSlides){let allSlidesSize=0;if(slidesSizesGrid.forEach((slideSizeValue=>{allSlidesSize+=slideSizeValue+(spaceBetween||0)})),allSlidesSize-=spaceBetween,allSlidesSize<swiperSize){const allSlidesOffset=(swiperSize-allSlidesSize)/2;snapGrid.forEach(((snap,snapIndex)=>{snapGrid[snapIndex]=snap-allSlidesOffset})),slidesGrid.forEach(((snap,snapIndex)=>{slidesGrid[snapIndex]=snap+allSlidesOffset}))}}if(Object.assign(swiper,{slides,snapGrid,slidesGrid,slidesSizesGrid}),params.centeredSlides&&params.cssMode&&!params.centeredSlidesBounds){setCSSProperty(wrapperEl,"--swiper-centered-offset-before",-snapGrid[0]+"px"),setCSSProperty(wrapperEl,"--swiper-centered-offset-after",swiper.size/2-slidesSizesGrid[slidesSizesGrid.length-1]/2+"px");const addToSnapGrid=-swiper.snapGrid[0],addToSlidesGrid=-swiper.slidesGrid[0];swiper.snapGrid=swiper.snapGrid.map((v=>v+addToSnapGrid)),swiper.slidesGrid=swiper.slidesGrid.map((v=>v+addToSlidesGrid))}if(slidesLength!==previousSlidesLength&&swiper.emit("slidesLengthChange"),snapGrid.length!==previousSnapGridLength&&(swiper.params.watchOverflow&&swiper.checkOverflow(),swiper.emit("snapGridLengthChange")),slidesGrid.length!==previousSlidesGridLength&&swiper.emit("slidesGridLengthChange"),params.watchSlidesProgress&&swiper.updateSlidesOffset(),swiper.emit("slidesUpdated"),!(isVirtual||params.cssMode||"slide"!==params.effect&&"fade"!==params.effect)){const backFaceHiddenClass=`${params.containerModifierClass}backface-hidden`,hasClassBackfaceClassAdded=swiper.el.classList.contains(backFaceHiddenClass);slidesLength<=params.maxBackfaceHiddenSlides?hasClassBackfaceClassAdded||swiper.el.classList.add(backFaceHiddenClass):hasClassBackfaceClassAdded&&swiper.el.classList.remove(backFaceHiddenClass)}},updateAutoHeight:function updateAutoHeight(speed){const swiper=this,activeSlides=[],isVirtual=swiper.virtual&&swiper.params.virtual.enabled;let i,newHeight=0;"number"==typeof speed?swiper.setTransition(speed):!0===speed&&swiper.setTransition(swiper.params.speed);const getSlideByIndex=index=>isVirtual?swiper.slides[swiper.getSlideIndexByData(index)]:swiper.slides[index];if("auto"!==swiper.params.slidesPerView&&swiper.params.slidesPerView>1)if(swiper.params.centeredSlides)(swiper.visibleSlides||[]).forEach((slide=>{activeSlides.push(slide)}));else for(i=0;i<Math.ceil(swiper.params.slidesPerView);i+=1){const index=swiper.activeIndex+i;if(index>swiper.slides.length&&!isVirtual)break;activeSlides.push(getSlideByIndex(index))}else activeSlides.push(getSlideByIndex(swiper.activeIndex));for(i=0;i<activeSlides.length;i+=1)if(void 0!==activeSlides[i]){const height=activeSlides[i].offsetHeight;newHeight=height>newHeight?height:newHeight}(newHeight||0===newHeight)&&(swiper.wrapperEl.style.height=`${newHeight}px`)},updateSlidesOffset:function updateSlidesOffset(){const swiper=this,slides=swiper.slides,minusOffset=swiper.isElement?swiper.isHorizontal()?swiper.wrapperEl.offsetLeft:swiper.wrapperEl.offsetTop:0;for(let i=0;i<slides.length;i+=1)slides[i].swiperSlideOffset=(swiper.isHorizontal()?slides[i].offsetLeft:slides[i].offsetTop)-minusOffset-swiper.cssOverflowAdjustment()},updateSlidesProgress:function updateSlidesProgress(translate){void 0===translate&&(translate=this&&this.translate||0);const swiper=this,params=swiper.params,{slides,rtlTranslate:rtl,snapGrid}=swiper;if(0===slides.length)return;void 0===slides[0].swiperSlideOffset&&swiper.updateSlidesOffset();let offsetCenter=-translate;rtl&&(offsetCenter=translate),slides.forEach((slideEl=>{slideEl.classList.remove(params.slideVisibleClass,params.slideFullyVisibleClass)})),swiper.visibleSlidesIndexes=[],swiper.visibleSlides=[];let spaceBetween=params.spaceBetween;"string"==typeof spaceBetween&&spaceBetween.indexOf("%")>=0?spaceBetween=parseFloat(spaceBetween.replace("%",""))/100*swiper.size:"string"==typeof spaceBetween&&(spaceBetween=parseFloat(spaceBetween));for(let i=0;i<slides.length;i+=1){const slide=slides[i];let slideOffset=slide.swiperSlideOffset;params.cssMode&&params.centeredSlides&&(slideOffset-=slides[0].swiperSlideOffset);const slideProgress=(offsetCenter+(params.centeredSlides?swiper.minTranslate():0)-slideOffset)/(slide.swiperSlideSize+spaceBetween),originalSlideProgress=(offsetCenter-snapGrid[0]+(params.centeredSlides?swiper.minTranslate():0)-slideOffset)/(slide.swiperSlideSize+spaceBetween),slideBefore=-(offsetCenter-slideOffset),slideAfter=slideBefore+swiper.slidesSizesGrid[i],isFullyVisible=slideBefore>=0&&slideBefore<=swiper.size-swiper.slidesSizesGrid[i];(slideBefore>=0&&slideBefore<swiper.size-1||slideAfter>1&&slideAfter<=swiper.size||slideBefore<=0&&slideAfter>=swiper.size)&&(swiper.visibleSlides.push(slide),swiper.visibleSlidesIndexes.push(i),slides[i].classList.add(params.slideVisibleClass)),isFullyVisible&&slides[i].classList.add(params.slideFullyVisibleClass),slide.progress=rtl?-slideProgress:slideProgress,slide.originalProgress=rtl?-originalSlideProgress:originalSlideProgress}},updateProgress:function updateProgress(translate){const swiper=this;if(void 0===translate){const multiplier=swiper.rtlTranslate?-1:1;translate=swiper&&swiper.translate&&swiper.translate*multiplier||0}const params=swiper.params,translatesDiff=swiper.maxTranslate()-swiper.minTranslate();let{progress,isBeginning,isEnd,progressLoop}=swiper;const wasBeginning=isBeginning,wasEnd=isEnd;if(0===translatesDiff)progress=0,isBeginning=!0,isEnd=!0;else{progress=(translate-swiper.minTranslate())/translatesDiff;const isBeginningRounded=Math.abs(translate-swiper.minTranslate())<1,isEndRounded=Math.abs(translate-swiper.maxTranslate())<1;isBeginning=isBeginningRounded||progress<=0,isEnd=isEndRounded||progress>=1,isBeginningRounded&&(progress=0),isEndRounded&&(progress=1)}if(params.loop){const firstSlideIndex=swiper.getSlideIndexByData(0),lastSlideIndex=swiper.getSlideIndexByData(swiper.slides.length-1),firstSlideTranslate=swiper.slidesGrid[firstSlideIndex],lastSlideTranslate=swiper.slidesGrid[lastSlideIndex],translateMax=swiper.slidesGrid[swiper.slidesGrid.length-1],translateAbs=Math.abs(translate);progressLoop=translateAbs>=firstSlideTranslate?(translateAbs-firstSlideTranslate)/translateMax:(translateAbs+translateMax-lastSlideTranslate)/translateMax,progressLoop>1&&(progressLoop-=1)}Object.assign(swiper,{progress,progressLoop,isBeginning,isEnd}),(params.watchSlidesProgress||params.centeredSlides&&params.autoHeight)&&swiper.updateSlidesProgress(translate),isBeginning&&!wasBeginning&&swiper.emit("reachBeginning toEdge"),isEnd&&!wasEnd&&swiper.emit("reachEnd toEdge"),(wasBeginning&&!isBeginning||wasEnd&&!isEnd)&&swiper.emit("fromEdge"),swiper.emit("progress",progress)},updateSlidesClasses:function updateSlidesClasses(){const swiper=this,{slides,params,slidesEl,activeIndex}=swiper,isVirtual=swiper.virtual&&params.virtual.enabled,gridEnabled=swiper.grid&&params.grid&&params.grid.rows>1,getFilteredSlide=selector=>elementChildren(slidesEl,`.${params.slideClass}${selector}, swiper-slide${selector}`)[0];let activeSlide,prevSlide,nextSlide;if(slides.forEach((slideEl=>{slideEl.classList.remove(params.slideActiveClass,params.slideNextClass,params.slidePrevClass)})),isVirtual)if(params.loop){let slideIndex=activeIndex-swiper.virtual.slidesBefore;slideIndex<0&&(slideIndex=swiper.virtual.slides.length+slideIndex),slideIndex>=swiper.virtual.slides.length&&(slideIndex-=swiper.virtual.slides.length),activeSlide=getFilteredSlide(`[data-swiper-slide-index="${slideIndex}"]`)}else activeSlide=getFilteredSlide(`[data-swiper-slide-index="${activeIndex}"]`);else gridEnabled?(activeSlide=slides.filter((slideEl=>slideEl.column===activeIndex))[0],nextSlide=slides.filter((slideEl=>slideEl.column===activeIndex+1))[0],prevSlide=slides.filter((slideEl=>slideEl.column===activeIndex-1))[0]):activeSlide=slides[activeIndex];activeSlide&&(activeSlide.classList.add(params.slideActiveClass),gridEnabled?(nextSlide&&nextSlide.classList.add(params.slideNextClass),prevSlide&&prevSlide.classList.add(params.slidePrevClass)):(nextSlide=function elementNextAll(el,selector){const nextEls=[];for(;el.nextElementSibling;){const next=el.nextElementSibling;selector?next.matches(selector)&&nextEls.push(next):nextEls.push(next),el=next}return nextEls}(activeSlide,`.${params.slideClass}, swiper-slide`)[0],params.loop&&!nextSlide&&(nextSlide=slides[0]),nextSlide&&nextSlide.classList.add(params.slideNextClass),prevSlide=function elementPrevAll(el,selector){const prevEls=[];for(;el.previousElementSibling;){const prev=el.previousElementSibling;selector?prev.matches(selector)&&prevEls.push(prev):prevEls.push(prev),el=prev}return prevEls}(activeSlide,`.${params.slideClass}, swiper-slide`)[0],params.loop&&0===!prevSlide&&(prevSlide=slides[slides.length-1]),prevSlide&&prevSlide.classList.add(params.slidePrevClass))),swiper.emitSlidesClasses()},updateActiveIndex:function updateActiveIndex(newActiveIndex){const swiper=this,translate=swiper.rtlTranslate?swiper.translate:-swiper.translate,{snapGrid,params,activeIndex:previousIndex,realIndex:previousRealIndex,snapIndex:previousSnapIndex}=swiper;let snapIndex,activeIndex=newActiveIndex;const getVirtualRealIndex=aIndex=>{let realIndex=aIndex-swiper.virtual.slidesBefore;return realIndex<0&&(realIndex=swiper.virtual.slides.length+realIndex),realIndex>=swiper.virtual.slides.length&&(realIndex-=swiper.virtual.slides.length),realIndex};if(void 0===activeIndex&&(activeIndex=function getActiveIndexByTranslate(swiper){const{slidesGrid,params}=swiper,translate=swiper.rtlTranslate?swiper.translate:-swiper.translate;let activeIndex;for(let i=0;i<slidesGrid.length;i+=1)void 0!==slidesGrid[i+1]?translate>=slidesGrid[i]&&translate<slidesGrid[i+1]-(slidesGrid[i+1]-slidesGrid[i])/2?activeIndex=i:translate>=slidesGrid[i]&&translate<slidesGrid[i+1]&&(activeIndex=i+1):translate>=slidesGrid[i]&&(activeIndex=i);return params.normalizeSlideIndex&&(activeIndex<0||void 0===activeIndex)&&(activeIndex=0),activeIndex}(swiper)),snapGrid.indexOf(translate)>=0)snapIndex=snapGrid.indexOf(translate);else{const skip=Math.min(params.slidesPerGroupSkip,activeIndex);snapIndex=skip+Math.floor((activeIndex-skip)/params.slidesPerGroup)}if(snapIndex>=snapGrid.length&&(snapIndex=snapGrid.length-1),activeIndex===previousIndex&&!swiper.params.loop)return void(snapIndex!==previousSnapIndex&&(swiper.snapIndex=snapIndex,swiper.emit("snapIndexChange")));if(activeIndex===previousIndex&&swiper.params.loop&&swiper.virtual&&swiper.params.virtual.enabled)return void(swiper.realIndex=getVirtualRealIndex(activeIndex));const gridEnabled=swiper.grid&&params.grid&&params.grid.rows>1;let realIndex;if(swiper.virtual&&params.virtual.enabled&&params.loop)realIndex=getVirtualRealIndex(activeIndex);else if(gridEnabled){const firstSlideInColumn=swiper.slides.filter((slideEl=>slideEl.column===activeIndex))[0];let activeSlideIndex=parseInt(firstSlideInColumn.getAttribute("data-swiper-slide-index"),10);Number.isNaN(activeSlideIndex)&&(activeSlideIndex=Math.max(swiper.slides.indexOf(firstSlideInColumn),0)),realIndex=Math.floor(activeSlideIndex/params.grid.rows)}else if(swiper.slides[activeIndex]){const slideIndex=swiper.slides[activeIndex].getAttribute("data-swiper-slide-index");realIndex=slideIndex?parseInt(slideIndex,10):activeIndex}else realIndex=activeIndex;Object.assign(swiper,{previousSnapIndex,snapIndex,previousRealIndex,realIndex,previousIndex,activeIndex}),swiper.initialized&&preload(swiper),swiper.emit("activeIndexChange"),swiper.emit("snapIndexChange"),(swiper.initialized||swiper.params.runCallbacksOnInit)&&(previousRealIndex!==realIndex&&swiper.emit("realIndexChange"),swiper.emit("slideChange"))},updateClickedSlide:function updateClickedSlide(el,path){const swiper=this,params=swiper.params;let slide=el.closest(`.${params.slideClass}, swiper-slide`);!slide&&swiper.isElement&&path&&path.length>1&&path.includes(el)&&[...path.slice(path.indexOf(el)+1,path.length)].forEach((pathEl=>{!slide&&pathEl.matches&&pathEl.matches(`.${params.slideClass}, swiper-slide`)&&(slide=pathEl)}));let slideIndex,slideFound=!1;if(slide)for(let i=0;i<swiper.slides.length;i+=1)if(swiper.slides[i]===slide){slideFound=!0,slideIndex=i;break}if(!slide||!slideFound)return swiper.clickedSlide=void 0,void(swiper.clickedIndex=void 0);swiper.clickedSlide=slide,swiper.virtual&&swiper.params.virtual.enabled?swiper.clickedIndex=parseInt(slide.getAttribute("data-swiper-slide-index"),10):swiper.clickedIndex=slideIndex,params.slideToClickedSlide&&void 0!==swiper.clickedIndex&&swiper.clickedIndex!==swiper.activeIndex&&swiper.slideToClickedSlide()}};var translate={getTranslate:function getSwiperTranslate(axis){void 0===axis&&(axis=this.isHorizontal()?"x":"y");const{params,rtlTranslate:rtl,translate,wrapperEl}=this;if(params.virtualTranslate)return rtl?-translate:translate;if(params.cssMode)return translate;let currentTranslate=getTranslate(wrapperEl,axis);return currentTranslate+=this.cssOverflowAdjustment(),rtl&&(currentTranslate=-currentTranslate),currentTranslate||0},setTranslate:function setTranslate(translate,byController){const swiper=this,{rtlTranslate:rtl,params,wrapperEl,progress}=swiper;let newProgress,x=0,y=0;swiper.isHorizontal()?x=rtl?-translate:translate:y=translate,params.roundLengths&&(x=Math.floor(x),y=Math.floor(y)),swiper.previousTranslate=swiper.translate,swiper.translate=swiper.isHorizontal()?x:y,params.cssMode?wrapperEl[swiper.isHorizontal()?"scrollLeft":"scrollTop"]=swiper.isHorizontal()?-x:-y:params.virtualTranslate||(swiper.isHorizontal()?x-=swiper.cssOverflowAdjustment():y-=swiper.cssOverflowAdjustment(),wrapperEl.style.transform=`translate3d(${x}px, ${y}px, 0px)`);const translatesDiff=swiper.maxTranslate()-swiper.minTranslate();newProgress=0===translatesDiff?0:(translate-swiper.minTranslate())/translatesDiff,newProgress!==progress&&swiper.updateProgress(translate),swiper.emit("setTranslate",swiper.translate,byController)},minTranslate:function minTranslate(){return-this.snapGrid[0]},maxTranslate:function maxTranslate(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function translateTo(translate,speed,runCallbacks,translateBounds,internal){void 0===translate&&(translate=0),void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0),void 0===translateBounds&&(translateBounds=!0);const swiper=this,{params,wrapperEl}=swiper;if(swiper.animating&&params.preventInteractionOnTransition)return!1;const minTranslate=swiper.minTranslate(),maxTranslate=swiper.maxTranslate();let newTranslate;if(newTranslate=translateBounds&&translate>minTranslate?minTranslate:translateBounds&&translate<maxTranslate?maxTranslate:translate,swiper.updateProgress(newTranslate),params.cssMode){const isH=swiper.isHorizontal();if(0===speed)wrapperEl[isH?"scrollLeft":"scrollTop"]=-newTranslate;else{if(!swiper.support.smoothScroll)return animateCSSModeScroll({swiper,targetPosition:-newTranslate,side:isH?"left":"top"}),!0;wrapperEl.scrollTo({[isH?"left":"top"]:-newTranslate,behavior:"smooth"})}return!0}return 0===speed?(swiper.setTransition(0),swiper.setTranslate(newTranslate),runCallbacks&&(swiper.emit("beforeTransitionStart",speed,internal),swiper.emit("transitionEnd"))):(swiper.setTransition(speed),swiper.setTranslate(newTranslate),runCallbacks&&(swiper.emit("beforeTransitionStart",speed,internal),swiper.emit("transitionStart")),swiper.animating||(swiper.animating=!0,swiper.onTranslateToWrapperTransitionEnd||(swiper.onTranslateToWrapperTransitionEnd=function transitionEnd(e){swiper&&!swiper.destroyed&&e.target===this&&(swiper.wrapperEl.removeEventListener("transitionend",swiper.onTranslateToWrapperTransitionEnd),swiper.onTranslateToWrapperTransitionEnd=null,delete swiper.onTranslateToWrapperTransitionEnd,runCallbacks&&swiper.emit("transitionEnd"))}),swiper.wrapperEl.addEventListener("transitionend",swiper.onTranslateToWrapperTransitionEnd))),!0}};function transitionEmit(_ref){let{swiper,runCallbacks,direction,step}=_ref;const{activeIndex,previousIndex}=swiper;let dir=direction;if(dir||(dir=activeIndex>previousIndex?"next":activeIndex<previousIndex?"prev":"reset"),swiper.emit(`transition${step}`),runCallbacks&&activeIndex!==previousIndex){if("reset"===dir)return void swiper.emit(`slideResetTransition${step}`);swiper.emit(`slideChangeTransition${step}`),"next"===dir?swiper.emit(`slideNextTransition${step}`):swiper.emit(`slidePrevTransition${step}`)}}var slide={slideTo:function slideTo(index,speed,runCallbacks,internal,initial){void 0===index&&(index=0),void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0),"string"==typeof index&&(index=parseInt(index,10));const swiper=this;let slideIndex=index;slideIndex<0&&(slideIndex=0);const{params,snapGrid,slidesGrid,previousIndex,activeIndex,rtlTranslate:rtl,wrapperEl,enabled}=swiper;if(swiper.animating&&params.preventInteractionOnTransition||!enabled&&!internal&&!initial)return!1;const skip=Math.min(swiper.params.slidesPerGroupSkip,slideIndex);let snapIndex=skip+Math.floor((slideIndex-skip)/swiper.params.slidesPerGroup);snapIndex>=snapGrid.length&&(snapIndex=snapGrid.length-1);const translate=-snapGrid[snapIndex];if(params.normalizeSlideIndex)for(let i=0;i<slidesGrid.length;i+=1){const normalizedTranslate=-Math.floor(100*translate),normalizedGrid=Math.floor(100*slidesGrid[i]),normalizedGridNext=Math.floor(100*slidesGrid[i+1]);void 0!==slidesGrid[i+1]?normalizedTranslate>=normalizedGrid&&normalizedTranslate<normalizedGridNext-(normalizedGridNext-normalizedGrid)/2?slideIndex=i:normalizedTranslate>=normalizedGrid&&normalizedTranslate<normalizedGridNext&&(slideIndex=i+1):normalizedTranslate>=normalizedGrid&&(slideIndex=i)}if(swiper.initialized&&slideIndex!==activeIndex){if(!swiper.allowSlideNext&&(rtl?translate>swiper.translate&&translate>swiper.minTranslate():translate<swiper.translate&&translate<swiper.minTranslate()))return!1;if(!swiper.allowSlidePrev&&translate>swiper.translate&&translate>swiper.maxTranslate()&&(activeIndex||0)!==slideIndex)return!1}let direction;if(slideIndex!==(previousIndex||0)&&runCallbacks&&swiper.emit("beforeSlideChangeStart"),swiper.updateProgress(translate),direction=slideIndex>activeIndex?"next":slideIndex<activeIndex?"prev":"reset",rtl&&-translate===swiper.translate||!rtl&&translate===swiper.translate)return swiper.updateActiveIndex(slideIndex),params.autoHeight&&swiper.updateAutoHeight(),swiper.updateSlidesClasses(),"slide"!==params.effect&&swiper.setTranslate(translate),"reset"!==direction&&(swiper.transitionStart(runCallbacks,direction),swiper.transitionEnd(runCallbacks,direction)),!1;if(params.cssMode){const isH=swiper.isHorizontal(),t=rtl?translate:-translate;if(0===speed){const isVirtual=swiper.virtual&&swiper.params.virtual.enabled;isVirtual&&(swiper.wrapperEl.style.scrollSnapType="none",swiper._immediateVirtual=!0),isVirtual&&!swiper._cssModeVirtualInitialSet&&swiper.params.initialSlide>0?(swiper._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{wrapperEl[isH?"scrollLeft":"scrollTop"]=t}))):wrapperEl[isH?"scrollLeft":"scrollTop"]=t,isVirtual&&requestAnimationFrame((()=>{swiper.wrapperEl.style.scrollSnapType="",swiper._immediateVirtual=!1}))}else{if(!swiper.support.smoothScroll)return animateCSSModeScroll({swiper,targetPosition:t,side:isH?"left":"top"}),!0;wrapperEl.scrollTo({[isH?"left":"top"]:t,behavior:"smooth"})}return!0}return swiper.setTransition(speed),swiper.setTranslate(translate),swiper.updateActiveIndex(slideIndex),swiper.updateSlidesClasses(),swiper.emit("beforeTransitionStart",speed,internal),swiper.transitionStart(runCallbacks,direction),0===speed?swiper.transitionEnd(runCallbacks,direction):swiper.animating||(swiper.animating=!0,swiper.onSlideToWrapperTransitionEnd||(swiper.onSlideToWrapperTransitionEnd=function transitionEnd(e){swiper&&!swiper.destroyed&&e.target===this&&(swiper.wrapperEl.removeEventListener("transitionend",swiper.onSlideToWrapperTransitionEnd),swiper.onSlideToWrapperTransitionEnd=null,delete swiper.onSlideToWrapperTransitionEnd,swiper.transitionEnd(runCallbacks,direction))}),swiper.wrapperEl.addEventListener("transitionend",swiper.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function slideToLoop(index,speed,runCallbacks,internal){if(void 0===index&&(index=0),void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0),"string"==typeof index){index=parseInt(index,10)}const swiper=this,gridEnabled=swiper.grid&&swiper.params.grid&&swiper.params.grid.rows>1;let newIndex=index;if(swiper.params.loop)if(swiper.virtual&&swiper.params.virtual.enabled)newIndex+=swiper.virtual.slidesBefore;else{let targetSlideIndex;if(gridEnabled){const slideIndex=newIndex*swiper.params.grid.rows;targetSlideIndex=swiper.slides.filter((slideEl=>1*slideEl.getAttribute("data-swiper-slide-index")===slideIndex))[0].column}else targetSlideIndex=swiper.getSlideIndexByData(newIndex);const cols=gridEnabled?Math.ceil(swiper.slides.length/swiper.params.grid.rows):swiper.slides.length,{centeredSlides}=swiper.params;let slidesPerView=swiper.params.slidesPerView;"auto"===slidesPerView?slidesPerView=swiper.slidesPerViewDynamic():(slidesPerView=Math.ceil(parseFloat(swiper.params.slidesPerView,10)),centeredSlides&&slidesPerView%2==0&&(slidesPerView+=1));let needLoopFix=cols-targetSlideIndex<slidesPerView;if(centeredSlides&&(needLoopFix=needLoopFix||targetSlideIndex<Math.ceil(slidesPerView/2)),needLoopFix){const direction=centeredSlides?targetSlideIndex<swiper.activeIndex?"prev":"next":targetSlideIndex-swiper.activeIndex-1<swiper.params.slidesPerView?"next":"prev";swiper.loopFix({direction,slideTo:!0,activeSlideIndex:"next"===direction?targetSlideIndex+1:targetSlideIndex-cols+1,slideRealIndex:"next"===direction?swiper.realIndex:void 0})}if(gridEnabled){const slideIndex=newIndex*swiper.params.grid.rows;newIndex=swiper.slides.filter((slideEl=>1*slideEl.getAttribute("data-swiper-slide-index")===slideIndex))[0].column}else newIndex=swiper.getSlideIndexByData(newIndex)}return requestAnimationFrame((()=>{swiper.slideTo(newIndex,speed,runCallbacks,internal)})),swiper},slideNext:function slideNext(speed,runCallbacks,internal){void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0);const swiper=this,{enabled,params,animating}=swiper;if(!enabled)return swiper;let perGroup=params.slidesPerGroup;"auto"===params.slidesPerView&&1===params.slidesPerGroup&&params.slidesPerGroupAuto&&(perGroup=Math.max(swiper.slidesPerViewDynamic("current",!0),1));const increment=swiper.activeIndex<params.slidesPerGroupSkip?1:perGroup,isVirtual=swiper.virtual&&params.virtual.enabled;if(params.loop){if(animating&&!isVirtual&&params.loopPreventsSliding)return!1;if(swiper.loopFix({direction:"next"}),swiper._clientLeft=swiper.wrapperEl.clientLeft,swiper.activeIndex===swiper.slides.length-1&&params.cssMode)return requestAnimationFrame((()=>{swiper.slideTo(swiper.activeIndex+increment,speed,runCallbacks,internal)})),!0}return params.rewind&&swiper.isEnd?swiper.slideTo(0,speed,runCallbacks,internal):swiper.slideTo(swiper.activeIndex+increment,speed,runCallbacks,internal)},slidePrev:function slidePrev(speed,runCallbacks,internal){void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0);const swiper=this,{params,snapGrid,slidesGrid,rtlTranslate,enabled,animating}=swiper;if(!enabled)return swiper;const isVirtual=swiper.virtual&&params.virtual.enabled;if(params.loop){if(animating&&!isVirtual&&params.loopPreventsSliding)return!1;swiper.loopFix({direction:"prev"}),swiper._clientLeft=swiper.wrapperEl.clientLeft}function normalize(val){return val<0?-Math.floor(Math.abs(val)):Math.floor(val)}const normalizedTranslate=normalize(rtlTranslate?swiper.translate:-swiper.translate),normalizedSnapGrid=snapGrid.map((val=>normalize(val)));let prevSnap=snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)-1];if(void 0===prevSnap&&params.cssMode){let prevSnapIndex;snapGrid.forEach(((snap,snapIndex)=>{normalizedTranslate>=snap&&(prevSnapIndex=snapIndex)})),void 0!==prevSnapIndex&&(prevSnap=snapGrid[prevSnapIndex>0?prevSnapIndex-1:prevSnapIndex])}let prevIndex=0;if(void 0!==prevSnap&&(prevIndex=slidesGrid.indexOf(prevSnap),prevIndex<0&&(prevIndex=swiper.activeIndex-1),"auto"===params.slidesPerView&&1===params.slidesPerGroup&&params.slidesPerGroupAuto&&(prevIndex=prevIndex-swiper.slidesPerViewDynamic("previous",!0)+1,prevIndex=Math.max(prevIndex,0))),params.rewind&&swiper.isBeginning){const lastIndex=swiper.params.virtual&&swiper.params.virtual.enabled&&swiper.virtual?swiper.virtual.slides.length-1:swiper.slides.length-1;return swiper.slideTo(lastIndex,speed,runCallbacks,internal)}return params.loop&&0===swiper.activeIndex&&params.cssMode?(requestAnimationFrame((()=>{swiper.slideTo(prevIndex,speed,runCallbacks,internal)})),!0):swiper.slideTo(prevIndex,speed,runCallbacks,internal)},slideReset:function slideReset(speed,runCallbacks,internal){return void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0),this.slideTo(this.activeIndex,speed,runCallbacks,internal)},slideToClosest:function slideToClosest(speed,runCallbacks,internal,threshold){void 0===speed&&(speed=this.params.speed),void 0===runCallbacks&&(runCallbacks=!0),void 0===threshold&&(threshold=.5);const swiper=this;let index=swiper.activeIndex;const skip=Math.min(swiper.params.slidesPerGroupSkip,index),snapIndex=skip+Math.floor((index-skip)/swiper.params.slidesPerGroup),translate=swiper.rtlTranslate?swiper.translate:-swiper.translate;if(translate>=swiper.snapGrid[snapIndex]){const currentSnap=swiper.snapGrid[snapIndex];translate-currentSnap>(swiper.snapGrid[snapIndex+1]-currentSnap)*threshold&&(index+=swiper.params.slidesPerGroup)}else{const prevSnap=swiper.snapGrid[snapIndex-1];translate-prevSnap<=(swiper.snapGrid[snapIndex]-prevSnap)*threshold&&(index-=swiper.params.slidesPerGroup)}return index=Math.max(index,0),index=Math.min(index,swiper.slidesGrid.length-1),swiper.slideTo(index,speed,runCallbacks,internal)},slideToClickedSlide:function slideToClickedSlide(){const swiper=this,{params,slidesEl}=swiper,slidesPerView="auto"===params.slidesPerView?swiper.slidesPerViewDynamic():params.slidesPerView;let realIndex,slideToIndex=swiper.clickedIndex;const slideSelector=swiper.isElement?"swiper-slide":`.${params.slideClass}`;if(params.loop){if(swiper.animating)return;realIndex=parseInt(swiper.clickedSlide.getAttribute("data-swiper-slide-index"),10),params.centeredSlides?slideToIndex<swiper.loopedSlides-slidesPerView/2||slideToIndex>swiper.slides.length-swiper.loopedSlides+slidesPerView/2?(swiper.loopFix(),slideToIndex=swiper.getSlideIndex(elementChildren(slidesEl,`${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]),nextTick((()=>{swiper.slideTo(slideToIndex)}))):swiper.slideTo(slideToIndex):slideToIndex>swiper.slides.length-slidesPerView?(swiper.loopFix(),slideToIndex=swiper.getSlideIndex(elementChildren(slidesEl,`${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]),nextTick((()=>{swiper.slideTo(slideToIndex)}))):swiper.slideTo(slideToIndex)}else swiper.slideTo(slideToIndex)}};var loop={loopCreate:function loopCreate(slideRealIndex){const swiper=this,{params,slidesEl}=swiper;if(!params.loop||swiper.virtual&&swiper.params.virtual.enabled)return;const initSlides=()=>{elementChildren(slidesEl,`.${params.slideClass}, swiper-slide`).forEach(((el,index)=>{el.setAttribute("data-swiper-slide-index",index)}))},gridEnabled=swiper.grid&&params.grid&&params.grid.rows>1,slidesPerGroup=params.slidesPerGroup*(gridEnabled?params.grid.rows:1),shouldFillGroup=swiper.slides.length%slidesPerGroup!=0,shouldFillGrid=gridEnabled&&swiper.slides.length%params.grid.rows!=0,addBlankSlides=amountOfSlides=>{for(let i=0;i<amountOfSlides;i+=1){const slideEl=swiper.isElement?createElement("swiper-slide",[params.slideBlankClass]):createElement("div",[params.slideClass,params.slideBlankClass]);swiper.slidesEl.append(slideEl)}};if(shouldFillGroup){if(params.loopAddBlankSlides){addBlankSlides(slidesPerGroup-swiper.slides.length%slidesPerGroup),swiper.recalcSlides(),swiper.updateSlides()}else showWarning("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");initSlides()}else if(shouldFillGrid){if(params.loopAddBlankSlides){addBlankSlides(params.grid.rows-swiper.slides.length%params.grid.rows),swiper.recalcSlides(),swiper.updateSlides()}else showWarning("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");initSlides()}else initSlides();swiper.loopFix({slideRealIndex,direction:params.centeredSlides?void 0:"next"})},loopFix:function loopFix(_temp){let{slideRealIndex,slideTo=!0,direction,setTranslate,activeSlideIndex,byController,byMousewheel}=void 0===_temp?{}:_temp;const swiper=this;if(!swiper.params.loop)return;swiper.emit("beforeLoopFix");const{slides,allowSlidePrev,allowSlideNext,slidesEl,params}=swiper,{centeredSlides}=params;if(swiper.allowSlidePrev=!0,swiper.allowSlideNext=!0,swiper.virtual&&params.virtual.enabled)return slideTo&&(params.centeredSlides||0!==swiper.snapIndex?params.centeredSlides&&swiper.snapIndex<params.slidesPerView?swiper.slideTo(swiper.virtual.slides.length+swiper.snapIndex,0,!1,!0):swiper.snapIndex===swiper.snapGrid.length-1&&swiper.slideTo(swiper.virtual.slidesBefore,0,!1,!0):swiper.slideTo(swiper.virtual.slides.length,0,!1,!0)),swiper.allowSlidePrev=allowSlidePrev,swiper.allowSlideNext=allowSlideNext,void swiper.emit("loopFix");let slidesPerView=params.slidesPerView;"auto"===slidesPerView?slidesPerView=swiper.slidesPerViewDynamic():(slidesPerView=Math.ceil(parseFloat(params.slidesPerView,10)),centeredSlides&&slidesPerView%2==0&&(slidesPerView+=1));const slidesPerGroup=params.slidesPerGroupAuto?slidesPerView:params.slidesPerGroup;let loopedSlides=slidesPerGroup;loopedSlides%slidesPerGroup!=0&&(loopedSlides+=slidesPerGroup-loopedSlides%slidesPerGroup),loopedSlides+=params.loopAdditionalSlides,swiper.loopedSlides=loopedSlides;const gridEnabled=swiper.grid&&params.grid&&params.grid.rows>1;slides.length<slidesPerView+loopedSlides?showWarning("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):gridEnabled&&"row"===params.grid.fill&&showWarning("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const prependSlidesIndexes=[],appendSlidesIndexes=[];let activeIndex=swiper.activeIndex;void 0===activeSlideIndex?activeSlideIndex=swiper.getSlideIndex(slides.filter((el=>el.classList.contains(params.slideActiveClass)))[0]):activeIndex=activeSlideIndex;const isNext="next"===direction||!direction,isPrev="prev"===direction||!direction;let slidesPrepended=0,slidesAppended=0;const cols=gridEnabled?Math.ceil(slides.length/params.grid.rows):slides.length,activeColIndexWithShift=(gridEnabled?slides[activeSlideIndex].column:activeSlideIndex)+(centeredSlides&&void 0===setTranslate?-slidesPerView/2+.5:0);if(activeColIndexWithShift<loopedSlides){slidesPrepended=Math.max(loopedSlides-activeColIndexWithShift,slidesPerGroup);for(let i=0;i<loopedSlides-activeColIndexWithShift;i+=1){const index=i-Math.floor(i/cols)*cols;if(gridEnabled){const colIndexToPrepend=cols-index-1;for(let i=slides.length-1;i>=0;i-=1)slides[i].column===colIndexToPrepend&&prependSlidesIndexes.push(i)}else prependSlidesIndexes.push(cols-index-1)}}else if(activeColIndexWithShift+slidesPerView>cols-loopedSlides){slidesAppended=Math.max(activeColIndexWithShift-(cols-2*loopedSlides),slidesPerGroup);for(let i=0;i<slidesAppended;i+=1){const index=i-Math.floor(i/cols)*cols;gridEnabled?slides.forEach(((slide,slideIndex)=>{slide.column===index&&appendSlidesIndexes.push(slideIndex)})):appendSlidesIndexes.push(index)}}if(swiper.__preventObserver__=!0,requestAnimationFrame((()=>{swiper.__preventObserver__=!1})),isPrev&&prependSlidesIndexes.forEach((index=>{slides[index].swiperLoopMoveDOM=!0,slidesEl.prepend(slides[index]),slides[index].swiperLoopMoveDOM=!1})),isNext&&appendSlidesIndexes.forEach((index=>{slides[index].swiperLoopMoveDOM=!0,slidesEl.append(slides[index]),slides[index].swiperLoopMoveDOM=!1})),swiper.recalcSlides(),"auto"===params.slidesPerView?swiper.updateSlides():gridEnabled&&(prependSlidesIndexes.length>0&&isPrev||appendSlidesIndexes.length>0&&isNext)&&swiper.slides.forEach(((slide,slideIndex)=>{swiper.grid.updateSlide(slideIndex,slide,swiper.slides)})),params.watchSlidesProgress&&swiper.updateSlidesOffset(),slideTo)if(prependSlidesIndexes.length>0&&isPrev){if(void 0===slideRealIndex){const currentSlideTranslate=swiper.slidesGrid[activeIndex],diff=swiper.slidesGrid[activeIndex+slidesPrepended]-currentSlideTranslate;byMousewheel?swiper.setTranslate(swiper.translate-diff):(swiper.slideTo(activeIndex+slidesPrepended,0,!1,!0),setTranslate&&(swiper.touchEventsData.startTranslate=swiper.touchEventsData.startTranslate-diff,swiper.touchEventsData.currentTranslate=swiper.touchEventsData.currentTranslate-diff))}else if(setTranslate){const shift=gridEnabled?prependSlidesIndexes.length/params.grid.rows:prependSlidesIndexes.length;swiper.slideTo(swiper.activeIndex+shift,0,!1,!0),swiper.touchEventsData.currentTranslate=swiper.translate}}else if(appendSlidesIndexes.length>0&&isNext)if(void 0===slideRealIndex){const currentSlideTranslate=swiper.slidesGrid[activeIndex],diff=swiper.slidesGrid[activeIndex-slidesAppended]-currentSlideTranslate;byMousewheel?swiper.setTranslate(swiper.translate-diff):(swiper.slideTo(activeIndex-slidesAppended,0,!1,!0),setTranslate&&(swiper.touchEventsData.startTranslate=swiper.touchEventsData.startTranslate-diff,swiper.touchEventsData.currentTranslate=swiper.touchEventsData.currentTranslate-diff))}else{const shift=gridEnabled?appendSlidesIndexes.length/params.grid.rows:appendSlidesIndexes.length;swiper.slideTo(swiper.activeIndex-shift,0,!1,!0)}if(swiper.allowSlidePrev=allowSlidePrev,swiper.allowSlideNext=allowSlideNext,swiper.controller&&swiper.controller.control&&!byController){const loopParams={slideRealIndex,direction,setTranslate,activeSlideIndex,byController:!0};Array.isArray(swiper.controller.control)?swiper.controller.control.forEach((c=>{!c.destroyed&&c.params.loop&&c.loopFix({...loopParams,slideTo:c.params.slidesPerView===params.slidesPerView&&slideTo})})):swiper.controller.control instanceof swiper.constructor&&swiper.controller.control.params.loop&&swiper.controller.control.loopFix({...loopParams,slideTo:swiper.controller.control.params.slidesPerView===params.slidesPerView&&slideTo})}swiper.emit("loopFix")},loopDestroy:function loopDestroy(){const{params,slidesEl}=this;if(!params.loop||this.virtual&&this.params.virtual.enabled)return;this.recalcSlides();const newSlidesOrder=[];this.slides.forEach((slideEl=>{const index=void 0===slideEl.swiperSlideIndex?1*slideEl.getAttribute("data-swiper-slide-index"):slideEl.swiperSlideIndex;newSlidesOrder[index]=slideEl})),this.slides.forEach((slideEl=>{slideEl.removeAttribute("data-swiper-slide-index")})),newSlidesOrder.forEach((slideEl=>{slidesEl.append(slideEl)})),this.recalcSlides(),this.slideTo(this.realIndex,0)}};function preventEdgeSwipe(swiper,event,startX){const window=getWindow(),{params}=swiper,edgeSwipeDetection=params.edgeSwipeDetection,edgeSwipeThreshold=params.edgeSwipeThreshold;return!edgeSwipeDetection||!(startX<=edgeSwipeThreshold||startX>=window.innerWidth-edgeSwipeThreshold)||"prevent"===edgeSwipeDetection&&(event.preventDefault(),!0)}function onTouchStart(event){const swiper=this,document=getDocument();let e=event;e.originalEvent&&(e=e.originalEvent);const data=swiper.touchEventsData;if("pointerdown"===e.type){if(null!==data.pointerId&&data.pointerId!==e.pointerId)return;data.pointerId=e.pointerId}else"touchstart"===e.type&&1===e.targetTouches.length&&(data.touchId=e.targetTouches[0].identifier);if("touchstart"===e.type)return void preventEdgeSwipe(swiper,e,e.targetTouches[0].pageX);const{params,touches,enabled}=swiper;if(!enabled)return;if(!params.simulateTouch&&"mouse"===e.pointerType)return;if(swiper.animating&&params.preventInteractionOnTransition)return;!swiper.animating&&params.cssMode&&params.loop&&swiper.loopFix();let targetEl=e.target;if("wrapper"===params.touchEventsTarget&&!swiper.wrapperEl.contains(targetEl))return;if("which"in e&&3===e.which)return;if("button"in e&&e.button>0)return;if(data.isTouched&&data.isMoved)return;const swipingClassHasValue=!!params.noSwipingClass&&""!==params.noSwipingClass,eventPath=e.composedPath?e.composedPath():e.path;swipingClassHasValue&&e.target&&e.target.shadowRoot&&eventPath&&(targetEl=eventPath[0]);const noSwipingSelector=params.noSwipingSelector?params.noSwipingSelector:`.${params.noSwipingClass}`,isTargetShadow=!(!e.target||!e.target.shadowRoot);if(params.noSwiping&&(isTargetShadow?function closestElement(selector,base){return void 0===base&&(base=this),function __closestFrom(el){if(!el||el===getDocument()||el===getWindow())return null;el.assignedSlot&&(el=el.assignedSlot);const found=el.closest(selector);return found||el.getRootNode?found||__closestFrom(el.getRootNode().host):null}(base)}(noSwipingSelector,targetEl):targetEl.closest(noSwipingSelector)))return void(swiper.allowClick=!0);if(params.swipeHandler&&!targetEl.closest(params.swipeHandler))return;touches.currentX=e.pageX,touches.currentY=e.pageY;const startX=touches.currentX,startY=touches.currentY;if(!preventEdgeSwipe(swiper,e,startX))return;Object.assign(data,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),touches.startX=startX,touches.startY=startY,data.touchStartTime=now(),swiper.allowClick=!0,swiper.updateSize(),swiper.swipeDirection=void 0,params.threshold>0&&(data.allowThresholdMove=!1);let preventDefault=!0;targetEl.matches(data.focusableElements)&&(preventDefault=!1,"SELECT"===targetEl.nodeName&&(data.isTouched=!1)),document.activeElement&&document.activeElement.matches(data.focusableElements)&&document.activeElement!==targetEl&&document.activeElement.blur();const shouldPreventDefault=preventDefault&&swiper.allowTouchMove&&params.touchStartPreventDefault;!params.touchStartForcePreventDefault&&!shouldPreventDefault||targetEl.isContentEditable||e.preventDefault(),params.freeMode&&params.freeMode.enabled&&swiper.freeMode&&swiper.animating&&!params.cssMode&&swiper.freeMode.onTouchStart(),swiper.emit("touchStart",e)}function onTouchMove(event){const document=getDocument(),swiper=this,data=swiper.touchEventsData,{params,touches,rtlTranslate:rtl,enabled}=swiper;if(!enabled)return;if(!params.simulateTouch&&"mouse"===event.pointerType)return;let targetTouch,e=event;if(e.originalEvent&&(e=e.originalEvent),"pointermove"===e.type){if(null!==data.touchId)return;if(e.pointerId!==data.pointerId)return}if("touchmove"===e.type){if(targetTouch=[...e.changedTouches].filter((t=>t.identifier===data.touchId))[0],!targetTouch||targetTouch.identifier!==data.touchId)return}else targetTouch=e;if(!data.isTouched)return void(data.startMoving&&data.isScrolling&&swiper.emit("touchMoveOpposite",e));const pageX=targetTouch.pageX,pageY=targetTouch.pageY;if(e.preventedByNestedSwiper)return touches.startX=pageX,void(touches.startY=pageY);if(!swiper.allowTouchMove)return e.target.matches(data.focusableElements)||(swiper.allowClick=!1),void(data.isTouched&&(Object.assign(touches,{startX:pageX,startY:pageY,currentX:pageX,currentY:pageY}),data.touchStartTime=now()));if(params.touchReleaseOnEdges&&!params.loop)if(swiper.isVertical()){if(pageY<touches.startY&&swiper.translate<=swiper.maxTranslate()||pageY>touches.startY&&swiper.translate>=swiper.minTranslate())return data.isTouched=!1,void(data.isMoved=!1)}else if(pageX<touches.startX&&swiper.translate<=swiper.maxTranslate()||pageX>touches.startX&&swiper.translate>=swiper.minTranslate())return;if(document.activeElement&&e.target===document.activeElement&&e.target.matches(data.focusableElements))return data.isMoved=!0,void(swiper.allowClick=!1);data.allowTouchCallbacks&&swiper.emit("touchMove",e),touches.previousX=touches.currentX,touches.previousY=touches.currentY,touches.currentX=pageX,touches.currentY=pageY;const diffX=touches.currentX-touches.startX,diffY=touches.currentY-touches.startY;if(swiper.params.threshold&&Math.sqrt(diffX**2+diffY**2)<swiper.params.threshold)return;if(void 0===data.isScrolling){let touchAngle;swiper.isHorizontal()&&touches.currentY===touches.startY||swiper.isVertical()&&touches.currentX===touches.startX?data.isScrolling=!1:diffX*diffX+diffY*diffY>=25&&(touchAngle=180*Math.atan2(Math.abs(diffY),Math.abs(diffX))/Math.PI,data.isScrolling=swiper.isHorizontal()?touchAngle>params.touchAngle:90-touchAngle>params.touchAngle)}if(data.isScrolling&&swiper.emit("touchMoveOpposite",e),void 0===data.startMoving&&(touches.currentX===touches.startX&&touches.currentY===touches.startY||(data.startMoving=!0)),data.isScrolling)return void(data.isTouched=!1);if(!data.startMoving)return;swiper.allowClick=!1,!params.cssMode&&e.cancelable&&e.preventDefault(),params.touchMoveStopPropagation&&!params.nested&&e.stopPropagation();let diff=swiper.isHorizontal()?diffX:diffY,touchesDiff=swiper.isHorizontal()?touches.currentX-touches.previousX:touches.currentY-touches.previousY;params.oneWayMovement&&(diff=Math.abs(diff)*(rtl?1:-1),touchesDiff=Math.abs(touchesDiff)*(rtl?1:-1)),touches.diff=diff,diff*=params.touchRatio,rtl&&(diff=-diff,touchesDiff=-touchesDiff);const prevTouchesDirection=swiper.touchesDirection;swiper.swipeDirection=diff>0?"prev":"next",swiper.touchesDirection=touchesDiff>0?"prev":"next";const isLoop=swiper.params.loop&&!params.cssMode,allowLoopFix="next"===swiper.touchesDirection&&swiper.allowSlideNext||"prev"===swiper.touchesDirection&&swiper.allowSlidePrev;if(!data.isMoved){if(isLoop&&allowLoopFix&&swiper.loopFix({direction:swiper.swipeDirection}),data.startTranslate=swiper.getTranslate(),swiper.setTransition(0),swiper.animating){const evt=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});swiper.wrapperEl.dispatchEvent(evt)}data.allowMomentumBounce=!1,!params.grabCursor||!0!==swiper.allowSlideNext&&!0!==swiper.allowSlidePrev||swiper.setGrabCursor(!0),swiper.emit("sliderFirstMove",e)}if((new Date).getTime(),data.isMoved&&data.allowThresholdMove&&prevTouchesDirection!==swiper.touchesDirection&&isLoop&&allowLoopFix&&Math.abs(diff)>=1)return Object.assign(touches,{startX:pageX,startY:pageY,currentX:pageX,currentY:pageY,startTranslate:data.currentTranslate}),data.loopSwapReset=!0,void(data.startTranslate=data.currentTranslate);swiper.emit("sliderMove",e),data.isMoved=!0,data.currentTranslate=diff+data.startTranslate;let disableParentSwiper=!0,resistanceRatio=params.resistanceRatio;if(params.touchReleaseOnEdges&&(resistanceRatio=0),diff>0?(isLoop&&allowLoopFix&&data.allowThresholdMove&&data.currentTranslate>(params.centeredSlides?swiper.minTranslate()-swiper.slidesSizesGrid[swiper.activeIndex+1]:swiper.minTranslate())&&swiper.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),data.currentTranslate>swiper.minTranslate()&&(disableParentSwiper=!1,params.resistance&&(data.currentTranslate=swiper.minTranslate()-1+(-swiper.minTranslate()+data.startTranslate+diff)**resistanceRatio))):diff<0&&(isLoop&&allowLoopFix&&data.allowThresholdMove&&data.currentTranslate<(params.centeredSlides?swiper.maxTranslate()+swiper.slidesSizesGrid[swiper.slidesSizesGrid.length-1]:swiper.maxTranslate())&&swiper.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:swiper.slides.length-("auto"===params.slidesPerView?swiper.slidesPerViewDynamic():Math.ceil(parseFloat(params.slidesPerView,10)))}),data.currentTranslate<swiper.maxTranslate()&&(disableParentSwiper=!1,params.resistance&&(data.currentTranslate=swiper.maxTranslate()+1-(swiper.maxTranslate()-data.startTranslate-diff)**resistanceRatio))),disableParentSwiper&&(e.preventedByNestedSwiper=!0),!swiper.allowSlideNext&&"next"===swiper.swipeDirection&&data.currentTranslate<data.startTranslate&&(data.currentTranslate=data.startTranslate),!swiper.allowSlidePrev&&"prev"===swiper.swipeDirection&&data.currentTranslate>data.startTranslate&&(data.currentTranslate=data.startTranslate),swiper.allowSlidePrev||swiper.allowSlideNext||(data.currentTranslate=data.startTranslate),params.threshold>0){if(!(Math.abs(diff)>params.threshold||data.allowThresholdMove))return void(data.currentTranslate=data.startTranslate);if(!data.allowThresholdMove)return data.allowThresholdMove=!0,touches.startX=touches.currentX,touches.startY=touches.currentY,data.currentTranslate=data.startTranslate,void(touches.diff=swiper.isHorizontal()?touches.currentX-touches.startX:touches.currentY-touches.startY)}params.followFinger&&!params.cssMode&&((params.freeMode&&params.freeMode.enabled&&swiper.freeMode||params.watchSlidesProgress)&&(swiper.updateActiveIndex(),swiper.updateSlidesClasses()),params.freeMode&&params.freeMode.enabled&&swiper.freeMode&&swiper.freeMode.onTouchMove(),swiper.updateProgress(data.currentTranslate),swiper.setTranslate(data.currentTranslate))}function onTouchEnd(event){const swiper=this,data=swiper.touchEventsData;let targetTouch,e=event;e.originalEvent&&(e=e.originalEvent);if("touchend"===e.type||"touchcancel"===e.type){if(targetTouch=[...e.changedTouches].filter((t=>t.identifier===data.touchId))[0],!targetTouch||targetTouch.identifier!==data.touchId)return}else{if(null!==data.touchId)return;if(e.pointerId!==data.pointerId)return;targetTouch=e}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(e.type)){if(!(["pointercancel","contextmenu"].includes(e.type)&&(swiper.browser.isSafari||swiper.browser.isWebView)))return}data.pointerId=null,data.touchId=null;const{params,touches,rtlTranslate:rtl,slidesGrid,enabled}=swiper;if(!enabled)return;if(!params.simulateTouch&&"mouse"===e.pointerType)return;if(data.allowTouchCallbacks&&swiper.emit("touchEnd",e),data.allowTouchCallbacks=!1,!data.isTouched)return data.isMoved&&params.grabCursor&&swiper.setGrabCursor(!1),data.isMoved=!1,void(data.startMoving=!1);params.grabCursor&&data.isMoved&&data.isTouched&&(!0===swiper.allowSlideNext||!0===swiper.allowSlidePrev)&&swiper.setGrabCursor(!1);const touchEndTime=now(),timeDiff=touchEndTime-data.touchStartTime;if(swiper.allowClick){const pathTree=e.path||e.composedPath&&e.composedPath();swiper.updateClickedSlide(pathTree&&pathTree[0]||e.target,pathTree),swiper.emit("tap click",e),timeDiff<300&&touchEndTime-data.lastClickTime<300&&swiper.emit("doubleTap doubleClick",e)}if(data.lastClickTime=now(),nextTick((()=>{swiper.destroyed||(swiper.allowClick=!0)})),!data.isTouched||!data.isMoved||!swiper.swipeDirection||0===touches.diff&&!data.loopSwapReset||data.currentTranslate===data.startTranslate&&!data.loopSwapReset)return data.isTouched=!1,data.isMoved=!1,void(data.startMoving=!1);let currentPos;if(data.isTouched=!1,data.isMoved=!1,data.startMoving=!1,currentPos=params.followFinger?rtl?swiper.translate:-swiper.translate:-data.currentTranslate,params.cssMode)return;if(params.freeMode&&params.freeMode.enabled)return void swiper.freeMode.onTouchEnd({currentPos});const swipeToLast=currentPos>=-swiper.maxTranslate()&&!swiper.params.loop;let stopIndex=0,groupSize=swiper.slidesSizesGrid[0];for(let i=0;i<slidesGrid.length;i+=i<params.slidesPerGroupSkip?1:params.slidesPerGroup){const increment=i<params.slidesPerGroupSkip-1?1:params.slidesPerGroup;void 0!==slidesGrid[i+increment]?(swipeToLast||currentPos>=slidesGrid[i]&&currentPos<slidesGrid[i+increment])&&(stopIndex=i,groupSize=slidesGrid[i+increment]-slidesGrid[i]):(swipeToLast||currentPos>=slidesGrid[i])&&(stopIndex=i,groupSize=slidesGrid[slidesGrid.length-1]-slidesGrid[slidesGrid.length-2])}let rewindFirstIndex=null,rewindLastIndex=null;params.rewind&&(swiper.isBeginning?rewindLastIndex=params.virtual&&params.virtual.enabled&&swiper.virtual?swiper.virtual.slides.length-1:swiper.slides.length-1:swiper.isEnd&&(rewindFirstIndex=0));const ratio=(currentPos-slidesGrid[stopIndex])/groupSize,increment=stopIndex<params.slidesPerGroupSkip-1?1:params.slidesPerGroup;if(timeDiff>params.longSwipesMs){if(!params.longSwipes)return void swiper.slideTo(swiper.activeIndex);"next"===swiper.swipeDirection&&(ratio>=params.longSwipesRatio?swiper.slideTo(params.rewind&&swiper.isEnd?rewindFirstIndex:stopIndex+increment):swiper.slideTo(stopIndex)),"prev"===swiper.swipeDirection&&(ratio>1-params.longSwipesRatio?swiper.slideTo(stopIndex+increment):null!==rewindLastIndex&&ratio<0&&Math.abs(ratio)>params.longSwipesRatio?swiper.slideTo(rewindLastIndex):swiper.slideTo(stopIndex))}else{if(!params.shortSwipes)return void swiper.slideTo(swiper.activeIndex);swiper.navigation&&(e.target===swiper.navigation.nextEl||e.target===swiper.navigation.prevEl)?e.target===swiper.navigation.nextEl?swiper.slideTo(stopIndex+increment):swiper.slideTo(stopIndex):("next"===swiper.swipeDirection&&swiper.slideTo(null!==rewindFirstIndex?rewindFirstIndex:stopIndex+increment),"prev"===swiper.swipeDirection&&swiper.slideTo(null!==rewindLastIndex?rewindLastIndex:stopIndex))}}function onResize(){const swiper=this,{params,el}=swiper;if(el&&0===el.offsetWidth)return;params.breakpoints&&swiper.setBreakpoint();const{allowSlideNext,allowSlidePrev,snapGrid}=swiper,isVirtual=swiper.virtual&&swiper.params.virtual.enabled;swiper.allowSlideNext=!0,swiper.allowSlidePrev=!0,swiper.updateSize(),swiper.updateSlides(),swiper.updateSlidesClasses();const isVirtualLoop=isVirtual&&params.loop;!("auto"===params.slidesPerView||params.slidesPerView>1)||!swiper.isEnd||swiper.isBeginning||swiper.params.centeredSlides||isVirtualLoop?swiper.params.loop&&!isVirtual?swiper.slideToLoop(swiper.realIndex,0,!1,!0):swiper.slideTo(swiper.activeIndex,0,!1,!0):swiper.slideTo(swiper.slides.length-1,0,!1,!0),swiper.autoplay&&swiper.autoplay.running&&swiper.autoplay.paused&&(clearTimeout(swiper.autoplay.resizeTimeout),swiper.autoplay.resizeTimeout=setTimeout((()=>{swiper.autoplay&&swiper.autoplay.running&&swiper.autoplay.paused&&swiper.autoplay.resume()}),500)),swiper.allowSlidePrev=allowSlidePrev,swiper.allowSlideNext=allowSlideNext,swiper.params.watchOverflow&&snapGrid!==swiper.snapGrid&&swiper.checkOverflow()}function onClick(e){const swiper=this;swiper.enabled&&(swiper.allowClick||(swiper.params.preventClicks&&e.preventDefault(),swiper.params.preventClicksPropagation&&swiper.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function onScroll(){const swiper=this,{wrapperEl,rtlTranslate,enabled}=swiper;if(!enabled)return;let newProgress;swiper.previousTranslate=swiper.translate,swiper.isHorizontal()?swiper.translate=-wrapperEl.scrollLeft:swiper.translate=-wrapperEl.scrollTop,0===swiper.translate&&(swiper.translate=0),swiper.updateActiveIndex(),swiper.updateSlidesClasses();const translatesDiff=swiper.maxTranslate()-swiper.minTranslate();newProgress=0===translatesDiff?0:(swiper.translate-swiper.minTranslate())/translatesDiff,newProgress!==swiper.progress&&swiper.updateProgress(rtlTranslate?-swiper.translate:swiper.translate),swiper.emit("setTranslate",swiper.translate,!1)}function onLoad(e){processLazyPreloader(this,e.target),this.params.cssMode||"auto"!==this.params.slidesPerView&&!this.params.autoHeight||this.update()}function onDocumentTouchStart(){const swiper=this;swiper.documentTouchHandlerProceeded||(swiper.documentTouchHandlerProceeded=!0,swiper.params.touchReleaseOnEdges&&(swiper.el.style.touchAction="auto"))}const events=(swiper,method)=>{const document=getDocument(),{params,el,wrapperEl,device}=swiper,capture=!!params.nested,domMethod="on"===method?"addEventListener":"removeEventListener",swiperMethod=method;document[domMethod]("touchstart",swiper.onDocumentTouchStart,{passive:!1,capture}),el[domMethod]("touchstart",swiper.onTouchStart,{passive:!1}),el[domMethod]("pointerdown",swiper.onTouchStart,{passive:!1}),document[domMethod]("touchmove",swiper.onTouchMove,{passive:!1,capture}),document[domMethod]("pointermove",swiper.onTouchMove,{passive:!1,capture}),document[domMethod]("touchend",swiper.onTouchEnd,{passive:!0}),document[domMethod]("pointerup",swiper.onTouchEnd,{passive:!0}),document[domMethod]("pointercancel",swiper.onTouchEnd,{passive:!0}),document[domMethod]("touchcancel",swiper.onTouchEnd,{passive:!0}),document[domMethod]("pointerout",swiper.onTouchEnd,{passive:!0}),document[domMethod]("pointerleave",swiper.onTouchEnd,{passive:!0}),document[domMethod]("contextmenu",swiper.onTouchEnd,{passive:!0}),(params.preventClicks||params.preventClicksPropagation)&&el[domMethod]("click",swiper.onClick,!0),params.cssMode&&wrapperEl[domMethod]("scroll",swiper.onScroll),params.updateOnWindowResize?swiper[swiperMethod](device.ios||device.android?"resize orientationchange observerUpdate":"resize observerUpdate",onResize,!0):swiper[swiperMethod]("observerUpdate",onResize,!0),el[domMethod]("load",swiper.onLoad,{capture:!0})};const isGridEnabled=(swiper,params)=>swiper.grid&&params.grid&&params.grid.rows>1;var defaults={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function moduleExtendParams(params,allModulesParams){return function extendParams(obj){void 0===obj&&(obj={});const moduleParamName=Object.keys(obj)[0],moduleParams=obj[moduleParamName];"object"==typeof moduleParams&&null!==moduleParams?(!0===params[moduleParamName]&&(params[moduleParamName]={enabled:!0}),"navigation"===moduleParamName&&params[moduleParamName]&&params[moduleParamName].enabled&&!params[moduleParamName].prevEl&&!params[moduleParamName].nextEl&&(params[moduleParamName].auto=!0),["pagination","scrollbar"].indexOf(moduleParamName)>=0&&params[moduleParamName]&&params[moduleParamName].enabled&&!params[moduleParamName].el&&(params[moduleParamName].auto=!0),moduleParamName in params&&"enabled"in moduleParams?("object"!=typeof params[moduleParamName]||"enabled"in params[moduleParamName]||(params[moduleParamName].enabled=!0),params[moduleParamName]||(params[moduleParamName]={enabled:!1}),utils_extend(allModulesParams,obj)):utils_extend(allModulesParams,obj)):utils_extend(allModulesParams,obj)}}const prototypes={eventsEmitter,update,translate,transition:{setTransition:function setTransition(duration,byController){const swiper=this;swiper.params.cssMode||(swiper.wrapperEl.style.transitionDuration=`${duration}ms`,swiper.wrapperEl.style.transitionDelay=0===duration?"0ms":""),swiper.emit("setTransition",duration,byController)},transitionStart:function transitionStart(runCallbacks,direction){void 0===runCallbacks&&(runCallbacks=!0);const swiper=this,{params}=swiper;params.cssMode||(params.autoHeight&&swiper.updateAutoHeight(),transitionEmit({swiper,runCallbacks,direction,step:"Start"}))},transitionEnd:function transitionEnd(runCallbacks,direction){void 0===runCallbacks&&(runCallbacks=!0);const{params}=this;this.animating=!1,params.cssMode||(this.setTransition(0),transitionEmit({swiper:this,runCallbacks,direction,step:"End"}))}},slide,loop,grabCursor:{setGrabCursor:function setGrabCursor(moving){const swiper=this;if(!swiper.params.simulateTouch||swiper.params.watchOverflow&&swiper.isLocked||swiper.params.cssMode)return;const el="container"===swiper.params.touchEventsTarget?swiper.el:swiper.wrapperEl;swiper.isElement&&(swiper.__preventObserver__=!0),el.style.cursor="move",el.style.cursor=moving?"grabbing":"grab",swiper.isElement&&requestAnimationFrame((()=>{swiper.__preventObserver__=!1}))},unsetGrabCursor:function unsetGrabCursor(){const swiper=this;swiper.params.watchOverflow&&swiper.isLocked||swiper.params.cssMode||(swiper.isElement&&(swiper.__preventObserver__=!0),swiper["container"===swiper.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",swiper.isElement&&requestAnimationFrame((()=>{swiper.__preventObserver__=!1})))}},events:{attachEvents:function attachEvents(){const swiper=this,{params}=swiper;swiper.onTouchStart=onTouchStart.bind(swiper),swiper.onTouchMove=onTouchMove.bind(swiper),swiper.onTouchEnd=onTouchEnd.bind(swiper),swiper.onDocumentTouchStart=onDocumentTouchStart.bind(swiper),params.cssMode&&(swiper.onScroll=onScroll.bind(swiper)),swiper.onClick=onClick.bind(swiper),swiper.onLoad=onLoad.bind(swiper),events(swiper,"on")},detachEvents:function detachEvents(){events(this,"off")}},breakpoints:{setBreakpoint:function setBreakpoint(){const swiper=this,{realIndex,initialized,params,el}=swiper,breakpoints=params.breakpoints;if(!breakpoints||breakpoints&&0===Object.keys(breakpoints).length)return;const breakpoint=swiper.getBreakpoint(breakpoints,swiper.params.breakpointsBase,swiper.el);if(!breakpoint||swiper.currentBreakpoint===breakpoint)return;const breakpointParams=(breakpoint in breakpoints?breakpoints[breakpoint]:void 0)||swiper.originalParams,wasMultiRow=isGridEnabled(swiper,params),isMultiRow=isGridEnabled(swiper,breakpointParams),wasEnabled=params.enabled;wasMultiRow&&!isMultiRow?(el.classList.remove(`${params.containerModifierClass}grid`,`${params.containerModifierClass}grid-column`),swiper.emitContainerClasses()):!wasMultiRow&&isMultiRow&&(el.classList.add(`${params.containerModifierClass}grid`),(breakpointParams.grid.fill&&"column"===breakpointParams.grid.fill||!breakpointParams.grid.fill&&"column"===params.grid.fill)&&el.classList.add(`${params.containerModifierClass}grid-column`),swiper.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((prop=>{if(void 0===breakpointParams[prop])return;const wasModuleEnabled=params[prop]&&params[prop].enabled,isModuleEnabled=breakpointParams[prop]&&breakpointParams[prop].enabled;wasModuleEnabled&&!isModuleEnabled&&swiper[prop].disable(),!wasModuleEnabled&&isModuleEnabled&&swiper[prop].enable()}));const directionChanged=breakpointParams.direction&&breakpointParams.direction!==params.direction,needsReLoop=params.loop&&(breakpointParams.slidesPerView!==params.slidesPerView||directionChanged),wasLoop=params.loop;directionChanged&&initialized&&swiper.changeDirection(),utils_extend(swiper.params,breakpointParams);const isEnabled=swiper.params.enabled,hasLoop=swiper.params.loop;Object.assign(swiper,{allowTouchMove:swiper.params.allowTouchMove,allowSlideNext:swiper.params.allowSlideNext,allowSlidePrev:swiper.params.allowSlidePrev}),wasEnabled&&!isEnabled?swiper.disable():!wasEnabled&&isEnabled&&swiper.enable(),swiper.currentBreakpoint=breakpoint,swiper.emit("_beforeBreakpoint",breakpointParams),initialized&&(needsReLoop?(swiper.loopDestroy(),swiper.loopCreate(realIndex),swiper.updateSlides()):!wasLoop&&hasLoop?(swiper.loopCreate(realIndex),swiper.updateSlides()):wasLoop&&!hasLoop&&swiper.loopDestroy()),swiper.emit("breakpoint",breakpointParams)},getBreakpoint:function getBreakpoint(breakpoints,base,containerEl){if(void 0===base&&(base="window"),!breakpoints||"container"===base&&!containerEl)return;let breakpoint=!1;const window=getWindow(),currentHeight="window"===base?window.innerHeight:containerEl.clientHeight,points=Object.keys(breakpoints).map((point=>{if("string"==typeof point&&0===point.indexOf("@")){const minRatio=parseFloat(point.substr(1));return{value:currentHeight*minRatio,point}}return{value:point,point}}));points.sort(((a,b)=>parseInt(a.value,10)-parseInt(b.value,10)));for(let i=0;i<points.length;i+=1){const{point,value}=points[i];"window"===base?window.matchMedia(`(min-width: ${value}px)`).matches&&(breakpoint=point):value<=containerEl.clientWidth&&(breakpoint=point)}return breakpoint||"max"}},checkOverflow:{checkOverflow:function checkOverflow(){const swiper=this,{isLocked:wasLocked,params}=swiper,{slidesOffsetBefore}=params;if(slidesOffsetBefore){const lastSlideIndex=swiper.slides.length-1,lastSlideRightEdge=swiper.slidesGrid[lastSlideIndex]+swiper.slidesSizesGrid[lastSlideIndex]+2*slidesOffsetBefore;swiper.isLocked=swiper.size>lastSlideRightEdge}else swiper.isLocked=1===swiper.snapGrid.length;!0===params.allowSlideNext&&(swiper.allowSlideNext=!swiper.isLocked),!0===params.allowSlidePrev&&(swiper.allowSlidePrev=!swiper.isLocked),wasLocked&&wasLocked!==swiper.isLocked&&(swiper.isEnd=!1),wasLocked!==swiper.isLocked&&swiper.emit(swiper.isLocked?"lock":"unlock")}},classes:{addClasses:function addClasses(){const{classNames,params,rtl,el,device}=this,suffixes=function prepareClasses(entries,prefix){const resultClasses=[];return entries.forEach((item=>{"object"==typeof item?Object.keys(item).forEach((classNames=>{item[classNames]&&resultClasses.push(prefix+classNames)})):"string"==typeof item&&resultClasses.push(prefix+item)})),resultClasses}(["initialized",params.direction,{"free-mode":this.params.freeMode&&params.freeMode.enabled},{autoheight:params.autoHeight},{rtl},{grid:params.grid&&params.grid.rows>1},{"grid-column":params.grid&&params.grid.rows>1&&"column"===params.grid.fill},{android:device.android},{ios:device.ios},{"css-mode":params.cssMode},{centered:params.cssMode&&params.centeredSlides},{"watch-progress":params.watchSlidesProgress}],params.containerModifierClass);classNames.push(...suffixes),el.classList.add(...classNames),this.emitContainerClasses()},removeClasses:function removeClasses(){const{el,classNames}=this;el.classList.remove(...classNames),this.emitContainerClasses()}}},extendedDefaults={};class Swiper{constructor(){let el,params;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];1===args.length&&args[0].constructor&&"Object"===Object.prototype.toString.call(args[0]).slice(8,-1)?params=args[0]:[el,params]=args,params||(params={}),params=utils_extend({},params),el&&!params.el&&(params.el=el);const document=getDocument();if(params.el&&"string"==typeof params.el&&document.querySelectorAll(params.el).length>1){const swipers=[];return document.querySelectorAll(params.el).forEach((containerEl=>{const newParams=utils_extend({},params,{el:containerEl});swipers.push(new Swiper(newParams))})),swipers}const swiper=this;swiper.__swiper__=!0,swiper.support=getSupport(),swiper.device=getDevice({userAgent:params.userAgent}),swiper.browser=getBrowser(),swiper.eventsListeners={},swiper.eventsAnyListeners=[],swiper.modules=[...swiper.__modules__],params.modules&&Array.isArray(params.modules)&&swiper.modules.push(...params.modules);const allModulesParams={};swiper.modules.forEach((mod=>{mod({params,swiper,extendParams:moduleExtendParams(params,allModulesParams),on:swiper.on.bind(swiper),once:swiper.once.bind(swiper),off:swiper.off.bind(swiper),emit:swiper.emit.bind(swiper)})}));const swiperParams=utils_extend({},defaults,allModulesParams);return swiper.params=utils_extend({},swiperParams,extendedDefaults,params),swiper.originalParams=utils_extend({},swiper.params),swiper.passedParams=utils_extend({},params),swiper.params&&swiper.params.on&&Object.keys(swiper.params.on).forEach((eventName=>{swiper.on(eventName,swiper.params.on[eventName])})),swiper.params&&swiper.params.onAny&&swiper.onAny(swiper.params.onAny),Object.assign(swiper,{enabled:swiper.params.enabled,el,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===swiper.params.direction,isVertical:()=>"vertical"===swiper.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:swiper.params.allowSlideNext,allowSlidePrev:swiper.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:swiper.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:swiper.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),swiper.emit("_swiper"),swiper.params.init&&swiper.init(),swiper}getDirectionLabel(property){return this.isHorizontal()?property:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[property]}getSlideIndex(slideEl){const{slidesEl,params}=this,firstSlideIndex=elementIndex(elementChildren(slidesEl,`.${params.slideClass}, swiper-slide`)[0]);return elementIndex(slideEl)-firstSlideIndex}getSlideIndexByData(index){return this.getSlideIndex(this.slides.filter((slideEl=>1*slideEl.getAttribute("data-swiper-slide-index")===index))[0])}recalcSlides(){const{slidesEl,params}=this;this.slides=elementChildren(slidesEl,`.${params.slideClass}, swiper-slide`)}enable(){const swiper=this;swiper.enabled||(swiper.enabled=!0,swiper.params.grabCursor&&swiper.setGrabCursor(),swiper.emit("enable"))}disable(){const swiper=this;swiper.enabled&&(swiper.enabled=!1,swiper.params.grabCursor&&swiper.unsetGrabCursor(),swiper.emit("disable"))}setProgress(progress,speed){progress=Math.min(Math.max(progress,0),1);const min=this.minTranslate(),current=(this.maxTranslate()-min)*progress+min;this.translateTo(current,void 0===speed?0:speed),this.updateActiveIndex(),this.updateSlidesClasses()}emitContainerClasses(){const swiper=this;if(!swiper.params._emitClasses||!swiper.el)return;const cls=swiper.el.className.split(" ").filter((className=>0===className.indexOf("swiper")||0===className.indexOf(swiper.params.containerModifierClass)));swiper.emit("_containerClasses",cls.join(" "))}getSlideClasses(slideEl){const swiper=this;return swiper.destroyed?"":slideEl.className.split(" ").filter((className=>0===className.indexOf("swiper-slide")||0===className.indexOf(swiper.params.slideClass))).join(" ")}emitSlidesClasses(){const swiper=this;if(!swiper.params._emitClasses||!swiper.el)return;const updates=[];swiper.slides.forEach((slideEl=>{const classNames=swiper.getSlideClasses(slideEl);updates.push({slideEl,classNames}),swiper.emit("_slideClass",slideEl,classNames)})),swiper.emit("_slideClasses",updates)}slidesPerViewDynamic(view,exact){void 0===view&&(view="current"),void 0===exact&&(exact=!1);const{params,slides,slidesGrid,slidesSizesGrid,size:swiperSize,activeIndex}=this;let spv=1;if("number"==typeof params.slidesPerView)return params.slidesPerView;if(params.centeredSlides){let breakLoop,slideSize=slides[activeIndex]?slides[activeIndex].swiperSlideSize:0;for(let i=activeIndex+1;i<slides.length;i+=1)slides[i]&&!breakLoop&&(slideSize+=slides[i].swiperSlideSize,spv+=1,slideSize>swiperSize&&(breakLoop=!0));for(let i=activeIndex-1;i>=0;i-=1)slides[i]&&!breakLoop&&(slideSize+=slides[i].swiperSlideSize,spv+=1,slideSize>swiperSize&&(breakLoop=!0))}else if("current"===view)for(let i=activeIndex+1;i<slides.length;i+=1){(exact?slidesGrid[i]+slidesSizesGrid[i]-slidesGrid[activeIndex]<swiperSize:slidesGrid[i]-slidesGrid[activeIndex]<swiperSize)&&(spv+=1)}else for(let i=activeIndex-1;i>=0;i-=1){slidesGrid[activeIndex]-slidesGrid[i]<swiperSize&&(spv+=1)}return spv}update(){const swiper=this;if(!swiper||swiper.destroyed)return;const{snapGrid,params}=swiper;function setTranslate(){const translateValue=swiper.rtlTranslate?-1*swiper.translate:swiper.translate,newTranslate=Math.min(Math.max(translateValue,swiper.maxTranslate()),swiper.minTranslate());swiper.setTranslate(newTranslate),swiper.updateActiveIndex(),swiper.updateSlidesClasses()}let translated;if(params.breakpoints&&swiper.setBreakpoint(),[...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl=>{imageEl.complete&&processLazyPreloader(swiper,imageEl)})),swiper.updateSize(),swiper.updateSlides(),swiper.updateProgress(),swiper.updateSlidesClasses(),params.freeMode&&params.freeMode.enabled&&!params.cssMode)setTranslate(),params.autoHeight&&swiper.updateAutoHeight();else{if(("auto"===params.slidesPerView||params.slidesPerView>1)&&swiper.isEnd&&!params.centeredSlides){const slides=swiper.virtual&&params.virtual.enabled?swiper.virtual.slides:swiper.slides;translated=swiper.slideTo(slides.length-1,0,!1,!0)}else translated=swiper.slideTo(swiper.activeIndex,0,!1,!0);translated||setTranslate()}params.watchOverflow&&snapGrid!==swiper.snapGrid&&swiper.checkOverflow(),swiper.emit("update")}changeDirection(newDirection,needUpdate){void 0===needUpdate&&(needUpdate=!0);const swiper=this,currentDirection=swiper.params.direction;return newDirection||(newDirection="horizontal"===currentDirection?"vertical":"horizontal"),newDirection===currentDirection||"horizontal"!==newDirection&&"vertical"!==newDirection||(swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`),swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`),swiper.emitContainerClasses(),swiper.params.direction=newDirection,swiper.slides.forEach((slideEl=>{"vertical"===newDirection?slideEl.style.width="":slideEl.style.height=""})),swiper.emit("changeDirection"),needUpdate&&swiper.update()),swiper}changeLanguageDirection(direction){const swiper=this;swiper.rtl&&"rtl"===direction||!swiper.rtl&&"ltr"===direction||(swiper.rtl="rtl"===direction,swiper.rtlTranslate="horizontal"===swiper.params.direction&&swiper.rtl,swiper.rtl?(swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`),swiper.el.dir="rtl"):(swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`),swiper.el.dir="ltr"),swiper.update())}mount(element){const swiper=this;if(swiper.mounted)return!0;let el=element||swiper.params.el;if("string"==typeof el&&(el=document.querySelector(el)),!el)return!1;el.swiper=swiper,el.parentNode&&el.parentNode.host&&"SWIPER-CONTAINER"===el.parentNode.host.nodeName&&(swiper.isElement=!0);const getWrapperSelector=()=>`.${(swiper.params.wrapperClass||"").trim().split(" ").join(".")}`;let wrapperEl=(()=>{if(el&&el.shadowRoot&&el.shadowRoot.querySelector){return el.shadowRoot.querySelector(getWrapperSelector())}return elementChildren(el,getWrapperSelector())[0]})();return!wrapperEl&&swiper.params.createElements&&(wrapperEl=createElement("div",swiper.params.wrapperClass),el.append(wrapperEl),elementChildren(el,`.${swiper.params.slideClass}`).forEach((slideEl=>{wrapperEl.append(slideEl)}))),Object.assign(swiper,{el,wrapperEl,slidesEl:swiper.isElement&&!el.parentNode.host.slideSlots?el.parentNode.host:wrapperEl,hostEl:swiper.isElement?el.parentNode.host:el,mounted:!0,rtl:"rtl"===el.dir.toLowerCase()||"rtl"===elementStyle(el,"direction"),rtlTranslate:"horizontal"===swiper.params.direction&&("rtl"===el.dir.toLowerCase()||"rtl"===elementStyle(el,"direction")),wrongRTL:"-webkit-box"===elementStyle(wrapperEl,"display")}),!0}init(el){const swiper=this;if(swiper.initialized)return swiper;if(!1===swiper.mount(el))return swiper;swiper.emit("beforeInit"),swiper.params.breakpoints&&swiper.setBreakpoint(),swiper.addClasses(),swiper.updateSize(),swiper.updateSlides(),swiper.params.watchOverflow&&swiper.checkOverflow(),swiper.params.grabCursor&&swiper.enabled&&swiper.setGrabCursor(),swiper.params.loop&&swiper.virtual&&swiper.params.virtual.enabled?swiper.slideTo(swiper.params.initialSlide+swiper.virtual.slidesBefore,0,swiper.params.runCallbacksOnInit,!1,!0):swiper.slideTo(swiper.params.initialSlide,0,swiper.params.runCallbacksOnInit,!1,!0),swiper.params.loop&&swiper.loopCreate(),swiper.attachEvents();const lazyElements=[...swiper.el.querySelectorAll('[loading="lazy"]')];return swiper.isElement&&lazyElements.push(...swiper.hostEl.querySelectorAll('[loading="lazy"]')),lazyElements.forEach((imageEl=>{imageEl.complete?processLazyPreloader(swiper,imageEl):imageEl.addEventListener("load",(e=>{processLazyPreloader(swiper,e.target)}))})),preload(swiper),swiper.initialized=!0,preload(swiper),swiper.emit("init"),swiper.emit("afterInit"),swiper}destroy(deleteInstance,cleanStyles){void 0===deleteInstance&&(deleteInstance=!0),void 0===cleanStyles&&(cleanStyles=!0);const swiper=this,{params,el,wrapperEl,slides}=swiper;return void 0===swiper.params||swiper.destroyed||(swiper.emit("beforeDestroy"),swiper.initialized=!1,swiper.detachEvents(),params.loop&&swiper.loopDestroy(),cleanStyles&&(swiper.removeClasses(),el.removeAttribute("style"),wrapperEl.removeAttribute("style"),slides&&slides.length&&slides.forEach((slideEl=>{slideEl.classList.remove(params.slideVisibleClass,params.slideFullyVisibleClass,params.slideActiveClass,params.slideNextClass,params.slidePrevClass),slideEl.removeAttribute("style"),slideEl.removeAttribute("data-swiper-slide-index")}))),swiper.emit("destroy"),Object.keys(swiper.eventsListeners).forEach((eventName=>{swiper.off(eventName)})),!1!==deleteInstance&&(swiper.el.swiper=null,function deleteProps(obj){const object=obj;Object.keys(object).forEach((key=>{try{object[key]=null}catch(e){}try{delete object[key]}catch(e){}}))}(swiper)),swiper.destroyed=!0),null}static extendDefaults(newDefaults){utils_extend(extendedDefaults,newDefaults)}static get extendedDefaults(){return extendedDefaults}static get defaults(){return defaults}static installModule(mod){Swiper.prototype.__modules__||(Swiper.prototype.__modules__=[]);const modules=Swiper.prototype.__modules__;"function"==typeof mod&&modules.indexOf(mod)<0&&modules.push(mod)}static use(module){return Array.isArray(module)?(module.forEach((m=>Swiper.installModule(m))),Swiper):(Swiper.installModule(module),Swiper)}}function createElementIfNotDefined(swiper,originalParams,params,checkProps){return swiper.params.createElements&&Object.keys(checkProps).forEach((key=>{if(!params[key]&&!0===params.auto){let element=elementChildren(swiper.el,`.${checkProps[key]}`)[0];element||(element=createElement("div",checkProps[key]),element.className=checkProps[key],swiper.el.append(element)),params[key]=element,originalParams[key]=element}})),params}function classesToSelector(classes){return void 0===classes&&(classes=""),`.${classes.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function appendSlide(slides){const swiper=this,{params,slidesEl}=swiper;params.loop&&swiper.loopDestroy();const appendElement=slideEl=>{if("string"==typeof slideEl){const tempDOM=document.createElement("div");tempDOM.innerHTML=slideEl,slidesEl.append(tempDOM.children[0]),tempDOM.innerHTML=""}else slidesEl.append(slideEl)};if("object"==typeof slides&&"length"in slides)for(let i=0;i<slides.length;i+=1)slides[i]&&appendElement(slides[i]);else appendElement(slides);swiper.recalcSlides(),params.loop&&swiper.loopCreate(),params.observer&&!swiper.isElement||swiper.update()}function prependSlide(slides){const swiper=this,{params,activeIndex,slidesEl}=swiper;params.loop&&swiper.loopDestroy();let newActiveIndex=activeIndex+1;const prependElement=slideEl=>{if("string"==typeof slideEl){const tempDOM=document.createElement("div");tempDOM.innerHTML=slideEl,slidesEl.prepend(tempDOM.children[0]),tempDOM.innerHTML=""}else slidesEl.prepend(slideEl)};if("object"==typeof slides&&"length"in slides){for(let i=0;i<slides.length;i+=1)slides[i]&&prependElement(slides[i]);newActiveIndex=activeIndex+slides.length}else prependElement(slides);swiper.recalcSlides(),params.loop&&swiper.loopCreate(),params.observer&&!swiper.isElement||swiper.update(),swiper.slideTo(newActiveIndex,0,!1)}function addSlide(index,slides){const swiper=this,{params,activeIndex,slidesEl}=swiper;let activeIndexBuffer=activeIndex;params.loop&&(activeIndexBuffer-=swiper.loopedSlides,swiper.loopDestroy(),swiper.recalcSlides());const baseLength=swiper.slides.length;if(index<=0)return void swiper.prependSlide(slides);if(index>=baseLength)return void swiper.appendSlide(slides);let newActiveIndex=activeIndexBuffer>index?activeIndexBuffer+1:activeIndexBuffer;const slidesBuffer=[];for(let i=baseLength-1;i>=index;i-=1){const currentSlide=swiper.slides[i];currentSlide.remove(),slidesBuffer.unshift(currentSlide)}if("object"==typeof slides&&"length"in slides){for(let i=0;i<slides.length;i+=1)slides[i]&&slidesEl.append(slides[i]);newActiveIndex=activeIndexBuffer>index?activeIndexBuffer+slides.length:activeIndexBuffer}else slidesEl.append(slides);for(let i=0;i<slidesBuffer.length;i+=1)slidesEl.append(slidesBuffer[i]);swiper.recalcSlides(),params.loop&&swiper.loopCreate(),params.observer&&!swiper.isElement||swiper.update(),params.loop?swiper.slideTo(newActiveIndex+swiper.loopedSlides,0,!1):swiper.slideTo(newActiveIndex,0,!1)}function removeSlide(slidesIndexes){const swiper=this,{params,activeIndex}=swiper;let activeIndexBuffer=activeIndex;params.loop&&(activeIndexBuffer-=swiper.loopedSlides,swiper.loopDestroy());let indexToRemove,newActiveIndex=activeIndexBuffer;if("object"==typeof slidesIndexes&&"length"in slidesIndexes){for(let i=0;i<slidesIndexes.length;i+=1)indexToRemove=slidesIndexes[i],swiper.slides[indexToRemove]&&swiper.slides[indexToRemove].remove(),indexToRemove<newActiveIndex&&(newActiveIndex-=1);newActiveIndex=Math.max(newActiveIndex,0)}else indexToRemove=slidesIndexes,swiper.slides[indexToRemove]&&swiper.slides[indexToRemove].remove(),indexToRemove<newActiveIndex&&(newActiveIndex-=1),newActiveIndex=Math.max(newActiveIndex,0);swiper.recalcSlides(),params.loop&&swiper.loopCreate(),params.observer&&!swiper.isElement||swiper.update(),params.loop?swiper.slideTo(newActiveIndex+swiper.loopedSlides,0,!1):swiper.slideTo(newActiveIndex,0,!1)}function removeAllSlides(){const swiper=this,slidesIndexes=[];for(let i=0;i<swiper.slides.length;i+=1)slidesIndexes.push(i);swiper.removeSlide(slidesIndexes)}function effectInit(params){const{effect,swiper,on,setTranslate,setTransition,overwriteParams,perspective,recreateShadows,getEffectParams}=params;let requireUpdateOnVirtual;on("beforeInit",(()=>{if(swiper.params.effect!==effect)return;swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`),perspective&&perspective()&&swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);const overwriteParamsResult=overwriteParams?overwriteParams():{};Object.assign(swiper.params,overwriteParamsResult),Object.assign(swiper.originalParams,overwriteParamsResult)})),on("setTranslate",(()=>{swiper.params.effect===effect&&setTranslate()})),on("setTransition",((_s,duration)=>{swiper.params.effect===effect&&setTransition(duration)})),on("transitionEnd",(()=>{if(swiper.params.effect===effect&&recreateShadows){if(!getEffectParams||!getEffectParams().slideShadows)return;swiper.slides.forEach((slideEl=>{slideEl.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((shadowEl=>shadowEl.remove()))})),recreateShadows()}})),on("virtualUpdate",(()=>{swiper.params.effect===effect&&(swiper.slides.length||(requireUpdateOnVirtual=!0),requestAnimationFrame((()=>{requireUpdateOnVirtual&&swiper.slides&&swiper.slides.length&&(setTranslate(),requireUpdateOnVirtual=!1)})))}))}function effectTarget(effectParams,slideEl){const transformEl=getSlideTransformEl(slideEl);return transformEl!==slideEl&&(transformEl.style.backfaceVisibility="hidden",transformEl.style["-webkit-backface-visibility"]="hidden"),transformEl}function effectVirtualTransitionEnd(_ref){let{swiper,duration,transformElements,allSlides}=_ref;const{activeIndex}=swiper;if(swiper.params.virtualTranslate&&0!==duration){let transitionEndTarget,eventTriggered=!1;transitionEndTarget=allSlides?transformElements:transformElements.filter((transformEl=>{const el=transformEl.classList.contains("swiper-slide-transform")?(el=>{if(!el.parentElement)return swiper.slides.filter((slideEl=>slideEl.shadowRoot&&slideEl.shadowRoot===el.parentNode))[0];return el.parentElement})(transformEl):transformEl;return swiper.getSlideIndex(el)===activeIndex})),transitionEndTarget.forEach((el=>{elementTransitionEnd(el,(()=>{if(eventTriggered)return;if(!swiper||swiper.destroyed)return;eventTriggered=!0,swiper.animating=!1;const evt=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});swiper.wrapperEl.dispatchEvent(evt)}))}))}}function createShadow(suffix,slideEl,side){const shadowClass=`swiper-slide-shadow${side?`-${side}`:""}${suffix?` swiper-slide-shadow-${suffix}`:""}`,shadowContainer=getSlideTransformEl(slideEl);let shadowEl=shadowContainer.querySelector(`.${shadowClass.split(" ").join(".")}`);return shadowEl||(shadowEl=createElement("div",shadowClass.split(" ")),shadowContainer.append(shadowEl)),shadowEl}Object.keys(prototypes).forEach((prototypeGroup=>{Object.keys(prototypes[prototypeGroup]).forEach((protoMethod=>{Swiper.prototype[protoMethod]=prototypes[prototypeGroup][protoMethod]}))})),Swiper.use([function Resize(_ref){let{swiper,on,emit}=_ref;const window=getWindow();let observer=null,animationFrame=null;const resizeHandler=()=>{swiper&&!swiper.destroyed&&swiper.initialized&&(emit("beforeResize"),emit("resize"))},orientationChangeHandler=()=>{swiper&&!swiper.destroyed&&swiper.initialized&&emit("orientationchange")};on("init",(()=>{swiper.params.resizeObserver&&void 0!==window.ResizeObserver?swiper&&!swiper.destroyed&&swiper.initialized&&(observer=new ResizeObserver((entries=>{animationFrame=window.requestAnimationFrame((()=>{const{width,height}=swiper;let newWidth=width,newHeight=height;entries.forEach((_ref2=>{let{contentBoxSize,contentRect,target}=_ref2;target&&target!==swiper.el||(newWidth=contentRect?contentRect.width:(contentBoxSize[0]||contentBoxSize).inlineSize,newHeight=contentRect?contentRect.height:(contentBoxSize[0]||contentBoxSize).blockSize)})),newWidth===width&&newHeight===height||resizeHandler()}))})),observer.observe(swiper.el)):(window.addEventListener("resize",resizeHandler),window.addEventListener("orientationchange",orientationChangeHandler))})),on("destroy",(()=>{animationFrame&&window.cancelAnimationFrame(animationFrame),observer&&observer.unobserve&&swiper.el&&(observer.unobserve(swiper.el),observer=null),window.removeEventListener("resize",resizeHandler),window.removeEventListener("orientationchange",orientationChangeHandler)}))},function Observer(_ref){let{swiper,extendParams,on,emit}=_ref;const observers=[],window=getWindow(),attach=function(target,options){void 0===options&&(options={});const observer=new(window.MutationObserver||window.WebkitMutationObserver)((mutations=>{if(swiper.__preventObserver__)return;if(1===mutations.length)return void emit("observerUpdate",mutations[0]);const observerUpdate=function observerUpdate(){emit("observerUpdate",mutations[0])};window.requestAnimationFrame?window.requestAnimationFrame(observerUpdate):window.setTimeout(observerUpdate,0)}));observer.observe(target,{attributes:void 0===options.attributes||options.attributes,childList:void 0===options.childList||options.childList,characterData:void 0===options.characterData||options.characterData}),observers.push(observer)};extendParams({observer:!1,observeParents:!1,observeSlideChildren:!1}),on("init",(()=>{if(swiper.params.observer){if(swiper.params.observeParents){const containerParents=elementParents(swiper.hostEl);for(let i=0;i<containerParents.length;i+=1)attach(containerParents[i])}attach(swiper.hostEl,{childList:swiper.params.observeSlideChildren}),attach(swiper.wrapperEl,{attributes:!1})}})),on("destroy",(()=>{observers.forEach((observer=>{observer.disconnect()})),observers.splice(0,observers.length)}))}]);const modules=[function Virtual(_ref){let cssModeTimeout,{swiper,extendParams,on,emit}=_ref;extendParams({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const document=getDocument();swiper.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const tempDOM=document.createElement("div");function renderSlide(slide,index){const params=swiper.params.virtual;if(params.cache&&swiper.virtual.cache[index])return swiper.virtual.cache[index];let slideEl;return params.renderSlide?(slideEl=params.renderSlide.call(swiper,slide,index),"string"==typeof slideEl&&(tempDOM.innerHTML=slideEl,slideEl=tempDOM.children[0])):slideEl=swiper.isElement?createElement("swiper-slide"):createElement("div",swiper.params.slideClass),slideEl.setAttribute("data-swiper-slide-index",index),params.renderSlide||(slideEl.innerHTML=slide),params.cache&&(swiper.virtual.cache[index]=slideEl),slideEl}function update(force){const{slidesPerView,slidesPerGroup,centeredSlides,loop:isLoop}=swiper.params,{addSlidesBefore,addSlidesAfter}=swiper.params.virtual,{from:previousFrom,to:previousTo,slides,slidesGrid:previousSlidesGrid,offset:previousOffset}=swiper.virtual;swiper.params.cssMode||swiper.updateActiveIndex();const activeIndex=swiper.activeIndex||0;let offsetProp,slidesAfter,slidesBefore;offsetProp=swiper.rtlTranslate?"right":swiper.isHorizontal()?"left":"top",centeredSlides?(slidesAfter=Math.floor(slidesPerView/2)+slidesPerGroup+addSlidesAfter,slidesBefore=Math.floor(slidesPerView/2)+slidesPerGroup+addSlidesBefore):(slidesAfter=slidesPerView+(slidesPerGroup-1)+addSlidesAfter,slidesBefore=(isLoop?slidesPerView:slidesPerGroup)+addSlidesBefore);let from=activeIndex-slidesBefore,to=activeIndex+slidesAfter;isLoop||(from=Math.max(from,0),to=Math.min(to,slides.length-1));let offset=(swiper.slidesGrid[from]||0)-(swiper.slidesGrid[0]||0);function onRendered(){swiper.updateSlides(),swiper.updateProgress(),swiper.updateSlidesClasses(),emit("virtualUpdate")}if(isLoop&&activeIndex>=slidesBefore?(from-=slidesBefore,centeredSlides||(offset+=swiper.slidesGrid[0])):isLoop&&activeIndex<slidesBefore&&(from=-slidesBefore,centeredSlides&&(offset+=swiper.slidesGrid[0])),Object.assign(swiper.virtual,{from,to,offset,slidesGrid:swiper.slidesGrid,slidesBefore,slidesAfter}),previousFrom===from&&previousTo===to&&!force)return swiper.slidesGrid!==previousSlidesGrid&&offset!==previousOffset&&swiper.slides.forEach((slideEl=>{slideEl.style[offsetProp]=offset-Math.abs(swiper.cssOverflowAdjustment())+"px"})),swiper.updateProgress(),void emit("virtualUpdate");if(swiper.params.virtual.renderExternal)return swiper.params.virtual.renderExternal.call(swiper,{offset,from,to,slides:function getSlides(){const slidesToRender=[];for(let i=from;i<=to;i+=1)slidesToRender.push(slides[i]);return slidesToRender}()}),void(swiper.params.virtual.renderExternalUpdate?onRendered():emit("virtualUpdate"));const prependIndexes=[],appendIndexes=[],getSlideIndex=index=>{let slideIndex=index;return index<0?slideIndex=slides.length+index:slideIndex>=slides.length&&(slideIndex-=slides.length),slideIndex};if(force)swiper.slides.filter((el=>el.matches(`.${swiper.params.slideClass}, swiper-slide`))).forEach((slideEl=>{slideEl.remove()}));else for(let i=previousFrom;i<=previousTo;i+=1)if(i<from||i>to){const slideIndex=getSlideIndex(i);swiper.slides.filter((el=>el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index="${slideIndex}"], swiper-slide[data-swiper-slide-index="${slideIndex}"]`))).forEach((slideEl=>{slideEl.remove()}))}const loopFrom=isLoop?-slides.length:0,loopTo=isLoop?2*slides.length:slides.length;for(let i=loopFrom;i<loopTo;i+=1)if(i>=from&&i<=to){const slideIndex=getSlideIndex(i);void 0===previousTo||force?appendIndexes.push(slideIndex):(i>previousTo&&appendIndexes.push(slideIndex),i<previousFrom&&prependIndexes.push(slideIndex))}if(appendIndexes.forEach((index=>{swiper.slidesEl.append(renderSlide(slides[index],index))})),isLoop)for(let i=prependIndexes.length-1;i>=0;i-=1){const index=prependIndexes[i];swiper.slidesEl.prepend(renderSlide(slides[index],index))}else prependIndexes.sort(((a,b)=>b-a)),prependIndexes.forEach((index=>{swiper.slidesEl.prepend(renderSlide(slides[index],index))}));elementChildren(swiper.slidesEl,".swiper-slide, swiper-slide").forEach((slideEl=>{slideEl.style[offsetProp]=offset-Math.abs(swiper.cssOverflowAdjustment())+"px"})),onRendered()}on("beforeInit",(()=>{if(!swiper.params.virtual.enabled)return;let domSlidesAssigned;if(void 0===swiper.passedParams.virtual.slides){const slides=[...swiper.slidesEl.children].filter((el=>el.matches(`.${swiper.params.slideClass}, swiper-slide`)));slides&&slides.length&&(swiper.virtual.slides=[...slides],domSlidesAssigned=!0,slides.forEach(((slideEl,slideIndex)=>{slideEl.setAttribute("data-swiper-slide-index",slideIndex),swiper.virtual.cache[slideIndex]=slideEl,slideEl.remove()})))}domSlidesAssigned||(swiper.virtual.slides=swiper.params.virtual.slides),swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`),swiper.params.watchSlidesProgress=!0,swiper.originalParams.watchSlidesProgress=!0,update()})),on("setTranslate",(()=>{swiper.params.virtual.enabled&&(swiper.params.cssMode&&!swiper._immediateVirtual?(clearTimeout(cssModeTimeout),cssModeTimeout=setTimeout((()=>{update()}),100)):update())})),on("init update resize",(()=>{swiper.params.virtual.enabled&&swiper.params.cssMode&&setCSSProperty(swiper.wrapperEl,"--swiper-virtual-size",`${swiper.virtualSize}px`)})),Object.assign(swiper.virtual,{appendSlide:function appendSlide(slides){if("object"==typeof slides&&"length"in slides)for(let i=0;i<slides.length;i+=1)slides[i]&&swiper.virtual.slides.push(slides[i]);else swiper.virtual.slides.push(slides);update(!0)},prependSlide:function prependSlide(slides){const activeIndex=swiper.activeIndex;let newActiveIndex=activeIndex+1,numberOfNewSlides=1;if(Array.isArray(slides)){for(let i=0;i<slides.length;i+=1)slides[i]&&swiper.virtual.slides.unshift(slides[i]);newActiveIndex=activeIndex+slides.length,numberOfNewSlides=slides.length}else swiper.virtual.slides.unshift(slides);if(swiper.params.virtual.cache){const cache=swiper.virtual.cache,newCache={};Object.keys(cache).forEach((cachedIndex=>{const cachedEl=cache[cachedIndex],cachedElIndex=cachedEl.getAttribute("data-swiper-slide-index");cachedElIndex&&cachedEl.setAttribute("data-swiper-slide-index",parseInt(cachedElIndex,10)+numberOfNewSlides),newCache[parseInt(cachedIndex,10)+numberOfNewSlides]=cachedEl})),swiper.virtual.cache=newCache}update(!0),swiper.slideTo(newActiveIndex,0)},removeSlide:function removeSlide(slidesIndexes){if(null==slidesIndexes)return;let activeIndex=swiper.activeIndex;if(Array.isArray(slidesIndexes))for(let i=slidesIndexes.length-1;i>=0;i-=1)swiper.params.virtual.cache&&(delete swiper.virtual.cache[slidesIndexes[i]],Object.keys(swiper.virtual.cache).forEach((key=>{key>slidesIndexes&&(swiper.virtual.cache[key-1]=swiper.virtual.cache[key],swiper.virtual.cache[key-1].setAttribute("data-swiper-slide-index",key-1),delete swiper.virtual.cache[key])}))),swiper.virtual.slides.splice(slidesIndexes[i],1),slidesIndexes[i]<activeIndex&&(activeIndex-=1),activeIndex=Math.max(activeIndex,0);else swiper.params.virtual.cache&&(delete swiper.virtual.cache[slidesIndexes],Object.keys(swiper.virtual.cache).forEach((key=>{key>slidesIndexes&&(swiper.virtual.cache[key-1]=swiper.virtual.cache[key],swiper.virtual.cache[key-1].setAttribute("data-swiper-slide-index",key-1),delete swiper.virtual.cache[key])}))),swiper.virtual.slides.splice(slidesIndexes,1),slidesIndexes<activeIndex&&(activeIndex-=1),activeIndex=Math.max(activeIndex,0);update(!0),swiper.slideTo(activeIndex,0)},removeAllSlides:function removeAllSlides(){swiper.virtual.slides=[],swiper.params.virtual.cache&&(swiper.virtual.cache={}),update(!0),swiper.slideTo(0,0)},update})},function Keyboard(_ref){let{swiper,extendParams,on,emit}=_ref;const document=getDocument(),window=getWindow();function handle(event){if(!swiper.enabled)return;const{rtlTranslate:rtl}=swiper;let e=event;e.originalEvent&&(e=e.originalEvent);const kc=e.keyCode||e.charCode,pageUpDown=swiper.params.keyboard.pageUpDown,isPageUp=pageUpDown&&33===kc,isPageDown=pageUpDown&&34===kc,isArrowLeft=37===kc,isArrowRight=39===kc,isArrowUp=38===kc,isArrowDown=40===kc;if(!swiper.allowSlideNext&&(swiper.isHorizontal()&&isArrowRight||swiper.isVertical()&&isArrowDown||isPageDown))return!1;if(!swiper.allowSlidePrev&&(swiper.isHorizontal()&&isArrowLeft||swiper.isVertical()&&isArrowUp||isPageUp))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(swiper.params.keyboard.onlyInViewport&&(isPageUp||isPageDown||isArrowLeft||isArrowRight||isArrowUp||isArrowDown)){let inView=!1;if(elementParents(swiper.el,`.${swiper.params.slideClass}, swiper-slide`).length>0&&0===elementParents(swiper.el,`.${swiper.params.slideActiveClass}`).length)return;const el=swiper.el,swiperWidth=el.clientWidth,swiperHeight=el.clientHeight,windowWidth=window.innerWidth,windowHeight=window.innerHeight,swiperOffset=elementOffset(el);rtl&&(swiperOffset.left-=el.scrollLeft);const swiperCoord=[[swiperOffset.left,swiperOffset.top],[swiperOffset.left+swiperWidth,swiperOffset.top],[swiperOffset.left,swiperOffset.top+swiperHeight],[swiperOffset.left+swiperWidth,swiperOffset.top+swiperHeight]];for(let i=0;i<swiperCoord.length;i+=1){const point=swiperCoord[i];if(point[0]>=0&&point[0]<=windowWidth&&point[1]>=0&&point[1]<=windowHeight){if(0===point[0]&&0===point[1])continue;inView=!0}}if(!inView)return}swiper.isHorizontal()?((isPageUp||isPageDown||isArrowLeft||isArrowRight)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),((isPageDown||isArrowRight)&&!rtl||(isPageUp||isArrowLeft)&&rtl)&&swiper.slideNext(),((isPageUp||isArrowLeft)&&!rtl||(isPageDown||isArrowRight)&&rtl)&&swiper.slidePrev()):((isPageUp||isPageDown||isArrowUp||isArrowDown)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),(isPageDown||isArrowDown)&&swiper.slideNext(),(isPageUp||isArrowUp)&&swiper.slidePrev()),emit("keyPress",kc)}}function enable(){swiper.keyboard.enabled||(document.addEventListener("keydown",handle),swiper.keyboard.enabled=!0)}function disable(){swiper.keyboard.enabled&&(document.removeEventListener("keydown",handle),swiper.keyboard.enabled=!1)}swiper.keyboard={enabled:!1},extendParams({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),on("init",(()=>{swiper.params.keyboard.enabled&&enable()})),on("destroy",(()=>{swiper.keyboard.enabled&&disable()})),Object.assign(swiper.keyboard,{enable,disable})},function Mousewheel(_ref){let{swiper,extendParams,on,emit}=_ref;const window=getWindow();let timeout;extendParams({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),swiper.mousewheel={enabled:!1};let lastEventBeforeSnap,lastScrollTime=now();const recentWheelEvents=[];function handleMouseEnter(){swiper.enabled&&(swiper.mouseEntered=!0)}function handleMouseLeave(){swiper.enabled&&(swiper.mouseEntered=!1)}function animateSlider(newEvent){return!(swiper.params.mousewheel.thresholdDelta&&newEvent.delta<swiper.params.mousewheel.thresholdDelta)&&(!(swiper.params.mousewheel.thresholdTime&&now()-lastScrollTime<swiper.params.mousewheel.thresholdTime)&&(newEvent.delta>=6&&now()-lastScrollTime<60||(newEvent.direction<0?swiper.isEnd&&!swiper.params.loop||swiper.animating||(swiper.slideNext(),emit("scroll",newEvent.raw)):swiper.isBeginning&&!swiper.params.loop||swiper.animating||(swiper.slidePrev(),emit("scroll",newEvent.raw)),lastScrollTime=(new window.Date).getTime(),!1)))}function handle(event){let e=event,disableParentSwiper=!0;if(!swiper.enabled)return;if(event.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`))return;const params=swiper.params.mousewheel;swiper.params.cssMode&&e.preventDefault();let targetEl=swiper.el;"container"!==swiper.params.mousewheel.eventsTarget&&(targetEl=document.querySelector(swiper.params.mousewheel.eventsTarget));const targetElContainsTarget=targetEl&&targetEl.contains(e.target);if(!swiper.mouseEntered&&!targetElContainsTarget&&!params.releaseOnEdges)return!0;e.originalEvent&&(e=e.originalEvent);let delta=0;const rtlFactor=swiper.rtlTranslate?-1:1,data=function normalize(e){let sX=0,sY=0,pX=0,pY=0;return"detail"in e&&(sY=e.detail),"wheelDelta"in e&&(sY=-e.wheelDelta/120),"wheelDeltaY"in e&&(sY=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(sX=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(sX=sY,sY=0),pX=10*sX,pY=10*sY,"deltaY"in e&&(pY=e.deltaY),"deltaX"in e&&(pX=e.deltaX),e.shiftKey&&!pX&&(pX=pY,pY=0),(pX||pY)&&e.deltaMode&&(1===e.deltaMode?(pX*=40,pY*=40):(pX*=800,pY*=800)),pX&&!sX&&(sX=pX<1?-1:1),pY&&!sY&&(sY=pY<1?-1:1),{spinX:sX,spinY:sY,pixelX:pX,pixelY:pY}}(e);if(params.forceToAxis)if(swiper.isHorizontal()){if(!(Math.abs(data.pixelX)>Math.abs(data.pixelY)))return!0;delta=-data.pixelX*rtlFactor}else{if(!(Math.abs(data.pixelY)>Math.abs(data.pixelX)))return!0;delta=-data.pixelY}else delta=Math.abs(data.pixelX)>Math.abs(data.pixelY)?-data.pixelX*rtlFactor:-data.pixelY;if(0===delta)return!0;params.invert&&(delta=-delta);let positions=swiper.getTranslate()+delta*params.sensitivity;if(positions>=swiper.minTranslate()&&(positions=swiper.minTranslate()),positions<=swiper.maxTranslate()&&(positions=swiper.maxTranslate()),disableParentSwiper=!!swiper.params.loop||!(positions===swiper.minTranslate()||positions===swiper.maxTranslate()),disableParentSwiper&&swiper.params.nested&&e.stopPropagation(),swiper.params.freeMode&&swiper.params.freeMode.enabled){const newEvent={time:now(),delta:Math.abs(delta),direction:Math.sign(delta)},ignoreWheelEvents=lastEventBeforeSnap&&newEvent.time<lastEventBeforeSnap.time+500&&newEvent.delta<=lastEventBeforeSnap.delta&&newEvent.direction===lastEventBeforeSnap.direction;if(!ignoreWheelEvents){lastEventBeforeSnap=void 0;let position=swiper.getTranslate()+delta*params.sensitivity;const wasBeginning=swiper.isBeginning,wasEnd=swiper.isEnd;if(position>=swiper.minTranslate()&&(position=swiper.minTranslate()),position<=swiper.maxTranslate()&&(position=swiper.maxTranslate()),swiper.setTransition(0),swiper.setTranslate(position),swiper.updateProgress(),swiper.updateActiveIndex(),swiper.updateSlidesClasses(),(!wasBeginning&&swiper.isBeginning||!wasEnd&&swiper.isEnd)&&swiper.updateSlidesClasses(),swiper.params.loop&&swiper.loopFix({direction:newEvent.direction<0?"next":"prev",byMousewheel:!0}),swiper.params.freeMode.sticky){clearTimeout(timeout),timeout=void 0,recentWheelEvents.length>=15&&recentWheelEvents.shift();const prevEvent=recentWheelEvents.length?recentWheelEvents[recentWheelEvents.length-1]:void 0,firstEvent=recentWheelEvents[0];if(recentWheelEvents.push(newEvent),prevEvent&&(newEvent.delta>prevEvent.delta||newEvent.direction!==prevEvent.direction))recentWheelEvents.splice(0);else if(recentWheelEvents.length>=15&&newEvent.time-firstEvent.time<500&&firstEvent.delta-newEvent.delta>=1&&newEvent.delta<=6){const snapToThreshold=delta>0?.8:.2;lastEventBeforeSnap=newEvent,recentWheelEvents.splice(0),timeout=nextTick((()=>{swiper.slideToClosest(swiper.params.speed,!0,void 0,snapToThreshold)}),0)}timeout||(timeout=nextTick((()=>{lastEventBeforeSnap=newEvent,recentWheelEvents.splice(0),swiper.slideToClosest(swiper.params.speed,!0,void 0,.5)}),500))}if(ignoreWheelEvents||emit("scroll",e),swiper.params.autoplay&&swiper.params.autoplayDisableOnInteraction&&swiper.autoplay.stop(),params.releaseOnEdges&&(position===swiper.minTranslate()||position===swiper.maxTranslate()))return!0}}else{const newEvent={time:now(),delta:Math.abs(delta),direction:Math.sign(delta),raw:event};recentWheelEvents.length>=2&&recentWheelEvents.shift();const prevEvent=recentWheelEvents.length?recentWheelEvents[recentWheelEvents.length-1]:void 0;if(recentWheelEvents.push(newEvent),prevEvent?(newEvent.direction!==prevEvent.direction||newEvent.delta>prevEvent.delta||newEvent.time>prevEvent.time+150)&&animateSlider(newEvent):animateSlider(newEvent),function releaseScroll(newEvent){const params=swiper.params.mousewheel;if(newEvent.direction<0){if(swiper.isEnd&&!swiper.params.loop&&params.releaseOnEdges)return!0}else if(swiper.isBeginning&&!swiper.params.loop&&params.releaseOnEdges)return!0;return!1}(newEvent))return!0}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}function events(method){let targetEl=swiper.el;"container"!==swiper.params.mousewheel.eventsTarget&&(targetEl=document.querySelector(swiper.params.mousewheel.eventsTarget)),targetEl[method]("mouseenter",handleMouseEnter),targetEl[method]("mouseleave",handleMouseLeave),targetEl[method]("wheel",handle)}function enable(){return swiper.params.cssMode?(swiper.wrapperEl.removeEventListener("wheel",handle),!0):!swiper.mousewheel.enabled&&(events("addEventListener"),swiper.mousewheel.enabled=!0,!0)}function disable(){return swiper.params.cssMode?(swiper.wrapperEl.addEventListener(event,handle),!0):!!swiper.mousewheel.enabled&&(events("removeEventListener"),swiper.mousewheel.enabled=!1,!0)}on("init",(()=>{!swiper.params.mousewheel.enabled&&swiper.params.cssMode&&disable(),swiper.params.mousewheel.enabled&&enable()})),on("destroy",(()=>{swiper.params.cssMode&&enable(),swiper.mousewheel.enabled&&disable()})),Object.assign(swiper.mousewheel,{enable,disable})},function Navigation(_ref){let{swiper,extendParams,on,emit}=_ref;extendParams({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),swiper.navigation={nextEl:null,prevEl:null};const makeElementsArray=el=>(Array.isArray(el)?el:[el]).filter((e=>!!e));function getEl(el){let res;return el&&"string"==typeof el&&swiper.isElement&&(res=swiper.el.querySelector(el),res)?res:(el&&("string"==typeof el&&(res=[...document.querySelectorAll(el)]),swiper.params.uniqueNavElements&&"string"==typeof el&&res.length>1&&1===swiper.el.querySelectorAll(el).length&&(res=swiper.el.querySelector(el))),el&&!res?el:res)}function toggleEl(el,disabled){const params=swiper.params.navigation;(el=makeElementsArray(el)).forEach((subEl=>{subEl&&(subEl.classList[disabled?"add":"remove"](...params.disabledClass.split(" ")),"BUTTON"===subEl.tagName&&(subEl.disabled=disabled),swiper.params.watchOverflow&&swiper.enabled&&subEl.classList[swiper.isLocked?"add":"remove"](params.lockClass))}))}function update(){const{nextEl,prevEl}=swiper.navigation;if(swiper.params.loop)return toggleEl(prevEl,!1),void toggleEl(nextEl,!1);toggleEl(prevEl,swiper.isBeginning&&!swiper.params.rewind),toggleEl(nextEl,swiper.isEnd&&!swiper.params.rewind)}function onPrevClick(e){e.preventDefault(),(!swiper.isBeginning||swiper.params.loop||swiper.params.rewind)&&(swiper.slidePrev(),emit("navigationPrev"))}function onNextClick(e){e.preventDefault(),(!swiper.isEnd||swiper.params.loop||swiper.params.rewind)&&(swiper.slideNext(),emit("navigationNext"))}function init(){const params=swiper.params.navigation;if(swiper.params.navigation=createElementIfNotDefined(swiper,swiper.originalParams.navigation,swiper.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!params.nextEl&&!params.prevEl)return;let nextEl=getEl(params.nextEl),prevEl=getEl(params.prevEl);Object.assign(swiper.navigation,{nextEl,prevEl}),nextEl=makeElementsArray(nextEl),prevEl=makeElementsArray(prevEl);const initButton=(el,dir)=>{el&&el.addEventListener("click","next"===dir?onNextClick:onPrevClick),!swiper.enabled&&el&&el.classList.add(...params.lockClass.split(" "))};nextEl.forEach((el=>initButton(el,"next"))),prevEl.forEach((el=>initButton(el,"prev")))}function destroy(){let{nextEl,prevEl}=swiper.navigation;nextEl=makeElementsArray(nextEl),prevEl=makeElementsArray(prevEl);const destroyButton=(el,dir)=>{el.removeEventListener("click","next"===dir?onNextClick:onPrevClick),el.classList.remove(...swiper.params.navigation.disabledClass.split(" "))};nextEl.forEach((el=>destroyButton(el,"next"))),prevEl.forEach((el=>destroyButton(el,"prev")))}on("init",(()=>{!1===swiper.params.navigation.enabled?disable():(init(),update())})),on("toEdge fromEdge lock unlock",(()=>{update()})),on("destroy",(()=>{destroy()})),on("enable disable",(()=>{let{nextEl,prevEl}=swiper.navigation;nextEl=makeElementsArray(nextEl),prevEl=makeElementsArray(prevEl),swiper.enabled?update():[...nextEl,...prevEl].filter((el=>!!el)).forEach((el=>el.classList.add(swiper.params.navigation.lockClass)))})),on("click",((_s,e)=>{let{nextEl,prevEl}=swiper.navigation;nextEl=makeElementsArray(nextEl),prevEl=makeElementsArray(prevEl);const targetEl=e.target;if(swiper.params.navigation.hideOnClick&&!prevEl.includes(targetEl)&&!nextEl.includes(targetEl)){if(swiper.pagination&&swiper.params.pagination&&swiper.params.pagination.clickable&&(swiper.pagination.el===targetEl||swiper.pagination.el.contains(targetEl)))return;let isHidden;nextEl.length?isHidden=nextEl[0].classList.contains(swiper.params.navigation.hiddenClass):prevEl.length&&(isHidden=prevEl[0].classList.contains(swiper.params.navigation.hiddenClass)),emit(!0===isHidden?"navigationShow":"navigationHide"),[...nextEl,...prevEl].filter((el=>!!el)).forEach((el=>el.classList.toggle(swiper.params.navigation.hiddenClass)))}}));const disable=()=>{swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(" ")),destroy()};Object.assign(swiper.navigation,{enable:()=>{swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(" ")),init(),update()},disable,update,init,destroy})},function Pagination(_ref){let{swiper,extendParams,on,emit}=_ref;const pfx="swiper-pagination";let bulletSize;extendParams({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:number=>number,formatFractionTotal:number=>number,bulletClass:`${pfx}-bullet`,bulletActiveClass:`${pfx}-bullet-active`,modifierClass:`${pfx}-`,currentClass:`${pfx}-current`,totalClass:`${pfx}-total`,hiddenClass:`${pfx}-hidden`,progressbarFillClass:`${pfx}-progressbar-fill`,progressbarOppositeClass:`${pfx}-progressbar-opposite`,clickableClass:`${pfx}-clickable`,lockClass:`${pfx}-lock`,horizontalClass:`${pfx}-horizontal`,verticalClass:`${pfx}-vertical`,paginationDisabledClass:`${pfx}-disabled`}}),swiper.pagination={el:null,bullets:[]};let dynamicBulletIndex=0;const makeElementsArray=el=>(Array.isArray(el)?el:[el]).filter((e=>!!e));function isPaginationDisabled(){return!swiper.params.pagination.el||!swiper.pagination.el||Array.isArray(swiper.pagination.el)&&0===swiper.pagination.el.length}function setSideBullets(bulletEl,position){const{bulletActiveClass}=swiper.params.pagination;bulletEl&&(bulletEl=bulletEl[("prev"===position?"previous":"next")+"ElementSibling"])&&(bulletEl.classList.add(`${bulletActiveClass}-${position}`),(bulletEl=bulletEl[("prev"===position?"previous":"next")+"ElementSibling"])&&bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`))}function onBulletClick(e){const bulletEl=e.target.closest(classesToSelector(swiper.params.pagination.bulletClass));if(!bulletEl)return;e.preventDefault();const index=elementIndex(bulletEl)*swiper.params.slidesPerGroup;if(swiper.params.loop){if(swiper.realIndex===index)return;swiper.slideToLoop(index)}else swiper.slideTo(index)}function update(){const rtl=swiper.rtl,params=swiper.params.pagination;if(isPaginationDisabled())return;let current,previousIndex,el=swiper.pagination.el;el=makeElementsArray(el);const slidesLength=swiper.virtual&&swiper.params.virtual.enabled?swiper.virtual.slides.length:swiper.slides.length,total=swiper.params.loop?Math.ceil(slidesLength/swiper.params.slidesPerGroup):swiper.snapGrid.length;if(swiper.params.loop?(previousIndex=swiper.previousRealIndex||0,current=swiper.params.slidesPerGroup>1?Math.floor(swiper.realIndex/swiper.params.slidesPerGroup):swiper.realIndex):void 0!==swiper.snapIndex?(current=swiper.snapIndex,previousIndex=swiper.previousSnapIndex):(previousIndex=swiper.previousIndex||0,current=swiper.activeIndex||0),"bullets"===params.type&&swiper.pagination.bullets&&swiper.pagination.bullets.length>0){const bullets=swiper.pagination.bullets;let firstIndex,lastIndex,midIndex;if(params.dynamicBullets&&(bulletSize=elementOuterSize(bullets[0],swiper.isHorizontal()?"width":"height",!0),el.forEach((subEl=>{subEl.style[swiper.isHorizontal()?"width":"height"]=bulletSize*(params.dynamicMainBullets+4)+"px"})),params.dynamicMainBullets>1&&void 0!==previousIndex&&(dynamicBulletIndex+=current-(previousIndex||0),dynamicBulletIndex>params.dynamicMainBullets-1?dynamicBulletIndex=params.dynamicMainBullets-1:dynamicBulletIndex<0&&(dynamicBulletIndex=0)),firstIndex=Math.max(current-dynamicBulletIndex,0),lastIndex=firstIndex+(Math.min(bullets.length,params.dynamicMainBullets)-1),midIndex=(lastIndex+firstIndex)/2),bullets.forEach((bulletEl=>{const classesToRemove=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((suffix=>`${params.bulletActiveClass}${suffix}`))].map((s=>"string"==typeof s&&s.includes(" ")?s.split(" "):s)).flat();bulletEl.classList.remove(...classesToRemove)})),el.length>1)bullets.forEach((bullet=>{const bulletIndex=elementIndex(bullet);bulletIndex===current?bullet.classList.add(...params.bulletActiveClass.split(" ")):swiper.isElement&&bullet.setAttribute("part","bullet"),params.dynamicBullets&&(bulletIndex>=firstIndex&&bulletIndex<=lastIndex&&bullet.classList.add(...`${params.bulletActiveClass}-main`.split(" ")),bulletIndex===firstIndex&&setSideBullets(bullet,"prev"),bulletIndex===lastIndex&&setSideBullets(bullet,"next"))}));else{const bullet=bullets[current];if(bullet&&bullet.classList.add(...params.bulletActiveClass.split(" ")),swiper.isElement&&bullets.forEach(((bulletEl,bulletIndex)=>{bulletEl.setAttribute("part",bulletIndex===current?"bullet-active":"bullet")})),params.dynamicBullets){const firstDisplayedBullet=bullets[firstIndex],lastDisplayedBullet=bullets[lastIndex];for(let i=firstIndex;i<=lastIndex;i+=1)bullets[i]&&bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(" "));setSideBullets(firstDisplayedBullet,"prev"),setSideBullets(lastDisplayedBullet,"next")}}if(params.dynamicBullets){const dynamicBulletsLength=Math.min(bullets.length,params.dynamicMainBullets+4),bulletsOffset=(bulletSize*dynamicBulletsLength-bulletSize)/2-midIndex*bulletSize,offsetProp=rtl?"right":"left";bullets.forEach((bullet=>{bullet.style[swiper.isHorizontal()?offsetProp:"top"]=`${bulletsOffset}px`}))}}el.forEach(((subEl,subElIndex)=>{if("fraction"===params.type&&(subEl.querySelectorAll(classesToSelector(params.currentClass)).forEach((fractionEl=>{fractionEl.textContent=params.formatFractionCurrent(current+1)})),subEl.querySelectorAll(classesToSelector(params.totalClass)).forEach((totalEl=>{totalEl.textContent=params.formatFractionTotal(total)}))),"progressbar"===params.type){let progressbarDirection;progressbarDirection=params.progressbarOpposite?swiper.isHorizontal()?"vertical":"horizontal":swiper.isHorizontal()?"horizontal":"vertical";const scale=(current+1)/total;let scaleX=1,scaleY=1;"horizontal"===progressbarDirection?scaleX=scale:scaleY=scale,subEl.querySelectorAll(classesToSelector(params.progressbarFillClass)).forEach((progressEl=>{progressEl.style.transform=`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`,progressEl.style.transitionDuration=`${swiper.params.speed}ms`}))}"custom"===params.type&&params.renderCustom?(subEl.innerHTML=params.renderCustom(swiper,current+1,total),0===subElIndex&&emit("paginationRender",subEl)):(0===subElIndex&&emit("paginationRender",subEl),emit("paginationUpdate",subEl)),swiper.params.watchOverflow&&swiper.enabled&&subEl.classList[swiper.isLocked?"add":"remove"](params.lockClass)}))}function render(){const params=swiper.params.pagination;if(isPaginationDisabled())return;const slidesLength=swiper.virtual&&swiper.params.virtual.enabled?swiper.virtual.slides.length:swiper.grid&&swiper.params.grid.rows>1?swiper.slides.length/Math.ceil(swiper.params.grid.rows):swiper.slides.length;let el=swiper.pagination.el;el=makeElementsArray(el);let paginationHTML="";if("bullets"===params.type){let numberOfBullets=swiper.params.loop?Math.ceil(slidesLength/swiper.params.slidesPerGroup):swiper.snapGrid.length;swiper.params.freeMode&&swiper.params.freeMode.enabled&&numberOfBullets>slidesLength&&(numberOfBullets=slidesLength);for(let i=0;i<numberOfBullets;i+=1)params.renderBullet?paginationHTML+=params.renderBullet.call(swiper,i,params.bulletClass):paginationHTML+=`<${params.bulletElement} ${swiper.isElement?'part="bullet"':""} class="${params.bulletClass}"></${params.bulletElement}>`}"fraction"===params.type&&(paginationHTML=params.renderFraction?params.renderFraction.call(swiper,params.currentClass,params.totalClass):`<span class="${params.currentClass}"></span> / <span class="${params.totalClass}"></span>`),"progressbar"===params.type&&(paginationHTML=params.renderProgressbar?params.renderProgressbar.call(swiper,params.progressbarFillClass):`<span class="${params.progressbarFillClass}"></span>`),swiper.pagination.bullets=[],el.forEach((subEl=>{"custom"!==params.type&&(subEl.innerHTML=paginationHTML||""),"bullets"===params.type&&swiper.pagination.bullets.push(...subEl.querySelectorAll(classesToSelector(params.bulletClass)))})),"custom"!==params.type&&emit("paginationRender",el[0])}function init(){swiper.params.pagination=createElementIfNotDefined(swiper,swiper.originalParams.pagination,swiper.params.pagination,{el:"swiper-pagination"});const params=swiper.params.pagination;if(!params.el)return;let el;"string"==typeof params.el&&swiper.isElement&&(el=swiper.el.querySelector(params.el)),el||"string"!=typeof params.el||(el=[...document.querySelectorAll(params.el)]),el||(el=params.el),el&&0!==el.length&&(swiper.params.uniqueNavElements&&"string"==typeof params.el&&Array.isArray(el)&&el.length>1&&(el=[...swiper.el.querySelectorAll(params.el)],el.length>1&&(el=el.filter((subEl=>elementParents(subEl,".swiper")[0]===swiper.el))[0])),Array.isArray(el)&&1===el.length&&(el=el[0]),Object.assign(swiper.pagination,{el}),el=makeElementsArray(el),el.forEach((subEl=>{"bullets"===params.type&&params.clickable&&subEl.classList.add(...(params.clickableClass||"").split(" ")),subEl.classList.add(params.modifierClass+params.type),subEl.classList.add(swiper.isHorizontal()?params.horizontalClass:params.verticalClass),"bullets"===params.type&&params.dynamicBullets&&(subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`),dynamicBulletIndex=0,params.dynamicMainBullets<1&&(params.dynamicMainBullets=1)),"progressbar"===params.type&&params.progressbarOpposite&&subEl.classList.add(params.progressbarOppositeClass),params.clickable&&subEl.addEventListener("click",onBulletClick),swiper.enabled||subEl.classList.add(params.lockClass)})))}function destroy(){const params=swiper.params.pagination;if(isPaginationDisabled())return;let el=swiper.pagination.el;el&&(el=makeElementsArray(el),el.forEach((subEl=>{subEl.classList.remove(params.hiddenClass),subEl.classList.remove(params.modifierClass+params.type),subEl.classList.remove(swiper.isHorizontal()?params.horizontalClass:params.verticalClass),params.clickable&&(subEl.classList.remove(...(params.clickableClass||"").split(" ")),subEl.removeEventListener("click",onBulletClick))}))),swiper.pagination.bullets&&swiper.pagination.bullets.forEach((subEl=>subEl.classList.remove(...params.bulletActiveClass.split(" "))))}on("changeDirection",(()=>{if(!swiper.pagination||!swiper.pagination.el)return;const params=swiper.params.pagination;let{el}=swiper.pagination;el=makeElementsArray(el),el.forEach((subEl=>{subEl.classList.remove(params.horizontalClass,params.verticalClass),subEl.classList.add(swiper.isHorizontal()?params.horizontalClass:params.verticalClass)}))})),on("init",(()=>{!1===swiper.params.pagination.enabled?disable():(init(),render(),update())})),on("activeIndexChange",(()=>{void 0===swiper.snapIndex&&update()})),on("snapIndexChange",(()=>{update()})),on("snapGridLengthChange",(()=>{render(),update()})),on("destroy",(()=>{destroy()})),on("enable disable",(()=>{let{el}=swiper.pagination;el&&(el=makeElementsArray(el),el.forEach((subEl=>subEl.classList[swiper.enabled?"remove":"add"](swiper.params.pagination.lockClass))))})),on("lock unlock",(()=>{update()})),on("click",((_s,e)=>{const targetEl=e.target,el=makeElementsArray(swiper.pagination.el);if(swiper.params.pagination.el&&swiper.params.pagination.hideOnClick&&el&&el.length>0&&!targetEl.classList.contains(swiper.params.pagination.bulletClass)){if(swiper.navigation&&(swiper.navigation.nextEl&&targetEl===swiper.navigation.nextEl||swiper.navigation.prevEl&&targetEl===swiper.navigation.prevEl))return;const isHidden=el[0].classList.contains(swiper.params.pagination.hiddenClass);emit(!0===isHidden?"paginationShow":"paginationHide"),el.forEach((subEl=>subEl.classList.toggle(swiper.params.pagination.hiddenClass)))}}));const disable=()=>{swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);let{el}=swiper.pagination;el&&(el=makeElementsArray(el),el.forEach((subEl=>subEl.classList.add(swiper.params.pagination.paginationDisabledClass)))),destroy()};Object.assign(swiper.pagination,{enable:()=>{swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);let{el}=swiper.pagination;el&&(el=makeElementsArray(el),el.forEach((subEl=>subEl.classList.remove(swiper.params.pagination.paginationDisabledClass)))),init(),render(),update()},disable,render,update,init,destroy})},function Scrollbar(_ref){let{swiper,extendParams,on,emit}=_ref;const document=getDocument();let dragStartPos,dragSize,trackSize,divider,isTouched=!1,timeout=null,dragTimeout=null;function setTranslate(){if(!swiper.params.scrollbar.el||!swiper.scrollbar.el)return;const{scrollbar,rtlTranslate:rtl}=swiper,{dragEl,el}=scrollbar,params=swiper.params.scrollbar,progress=swiper.params.loop?swiper.progressLoop:swiper.progress;let newSize=dragSize,newPos=(trackSize-dragSize)*progress;rtl?(newPos=-newPos,newPos>0?(newSize=dragSize-newPos,newPos=0):-newPos+dragSize>trackSize&&(newSize=trackSize+newPos)):newPos<0?(newSize=dragSize+newPos,newPos=0):newPos+dragSize>trackSize&&(newSize=trackSize-newPos),swiper.isHorizontal()?(dragEl.style.transform=`translate3d(${newPos}px, 0, 0)`,dragEl.style.width=`${newSize}px`):(dragEl.style.transform=`translate3d(0px, ${newPos}px, 0)`,dragEl.style.height=`${newSize}px`),params.hide&&(clearTimeout(timeout),el.style.opacity=1,timeout=setTimeout((()=>{el.style.opacity=0,el.style.transitionDuration="400ms"}),1e3))}function updateSize(){if(!swiper.params.scrollbar.el||!swiper.scrollbar.el)return;const{scrollbar}=swiper,{dragEl,el}=scrollbar;dragEl.style.width="",dragEl.style.height="",trackSize=swiper.isHorizontal()?el.offsetWidth:el.offsetHeight,divider=swiper.size/(swiper.virtualSize+swiper.params.slidesOffsetBefore-(swiper.params.centeredSlides?swiper.snapGrid[0]:0)),dragSize="auto"===swiper.params.scrollbar.dragSize?trackSize*divider:parseInt(swiper.params.scrollbar.dragSize,10),swiper.isHorizontal()?dragEl.style.width=`${dragSize}px`:dragEl.style.height=`${dragSize}px`,el.style.display=divider>=1?"none":"",swiper.params.scrollbar.hide&&(el.style.opacity=0),swiper.params.watchOverflow&&swiper.enabled&&scrollbar.el.classList[swiper.isLocked?"add":"remove"](swiper.params.scrollbar.lockClass)}function getPointerPosition(e){return swiper.isHorizontal()?e.clientX:e.clientY}function setDragPosition(e){const{scrollbar,rtlTranslate:rtl}=swiper,{el}=scrollbar;let positionRatio;positionRatio=(getPointerPosition(e)-elementOffset(el)[swiper.isHorizontal()?"left":"top"]-(null!==dragStartPos?dragStartPos:dragSize/2))/(trackSize-dragSize),positionRatio=Math.max(Math.min(positionRatio,1),0),rtl&&(positionRatio=1-positionRatio);const position=swiper.minTranslate()+(swiper.maxTranslate()-swiper.minTranslate())*positionRatio;swiper.updateProgress(position),swiper.setTranslate(position),swiper.updateActiveIndex(),swiper.updateSlidesClasses()}function onDragStart(e){const params=swiper.params.scrollbar,{scrollbar,wrapperEl}=swiper,{el,dragEl}=scrollbar;isTouched=!0,dragStartPos=e.target===dragEl?getPointerPosition(e)-e.target.getBoundingClientRect()[swiper.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),wrapperEl.style.transitionDuration="100ms",dragEl.style.transitionDuration="100ms",setDragPosition(e),clearTimeout(dragTimeout),el.style.transitionDuration="0ms",params.hide&&(el.style.opacity=1),swiper.params.cssMode&&(swiper.wrapperEl.style["scroll-snap-type"]="none"),emit("scrollbarDragStart",e)}function onDragMove(e){const{scrollbar,wrapperEl}=swiper,{el,dragEl}=scrollbar;isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,setDragPosition(e),wrapperEl.style.transitionDuration="0ms",el.style.transitionDuration="0ms",dragEl.style.transitionDuration="0ms",emit("scrollbarDragMove",e))}function onDragEnd(e){const params=swiper.params.scrollbar,{scrollbar,wrapperEl}=swiper,{el}=scrollbar;isTouched&&(isTouched=!1,swiper.params.cssMode&&(swiper.wrapperEl.style["scroll-snap-type"]="",wrapperEl.style.transitionDuration=""),params.hide&&(clearTimeout(dragTimeout),dragTimeout=nextTick((()=>{el.style.opacity=0,el.style.transitionDuration="400ms"}),1e3)),emit("scrollbarDragEnd",e),params.snapOnRelease&&swiper.slideToClosest())}function events(method){const{scrollbar,params}=swiper,el=scrollbar.el;if(!el)return;const target=el,activeListener=!!params.passiveListeners&&{passive:!1,capture:!1},passiveListener=!!params.passiveListeners&&{passive:!0,capture:!1};if(!target)return;const eventMethod="on"===method?"addEventListener":"removeEventListener";target[eventMethod]("pointerdown",onDragStart,activeListener),document[eventMethod]("pointermove",onDragMove,activeListener),document[eventMethod]("pointerup",onDragEnd,passiveListener)}function init(){const{scrollbar,el:swiperEl}=swiper;swiper.params.scrollbar=createElementIfNotDefined(swiper,swiper.originalParams.scrollbar,swiper.params.scrollbar,{el:"swiper-scrollbar"});const params=swiper.params.scrollbar;if(!params.el)return;let el,dragEl;if("string"==typeof params.el&&swiper.isElement&&(el=swiper.el.querySelector(params.el)),el||"string"!=typeof params.el)el||(el=params.el);else if(el=document.querySelectorAll(params.el),!el.length)return;swiper.params.uniqueNavElements&&"string"==typeof params.el&&el.length>1&&1===swiperEl.querySelectorAll(params.el).length&&(el=swiperEl.querySelector(params.el)),el.length>0&&(el=el[0]),el.classList.add(swiper.isHorizontal()?params.horizontalClass:params.verticalClass),el&&(dragEl=el.querySelector(classesToSelector(swiper.params.scrollbar.dragClass)),dragEl||(dragEl=createElement("div",swiper.params.scrollbar.dragClass),el.append(dragEl))),Object.assign(scrollbar,{el,dragEl}),params.draggable&&function enableDraggable(){swiper.params.scrollbar.el&&swiper.scrollbar.el&&events("on")}(),el&&el.classList[swiper.enabled?"remove":"add"](...classesToTokens(swiper.params.scrollbar.lockClass))}function destroy(){const params=swiper.params.scrollbar,el=swiper.scrollbar.el;el&&el.classList.remove(...classesToTokens(swiper.isHorizontal()?params.horizontalClass:params.verticalClass)),function disableDraggable(){swiper.params.scrollbar.el&&swiper.scrollbar.el&&events("off")}()}extendParams({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),swiper.scrollbar={el:null,dragEl:null},on("init",(()=>{!1===swiper.params.scrollbar.enabled?disable():(init(),updateSize(),setTranslate())})),on("update resize observerUpdate lock unlock",(()=>{updateSize()})),on("setTranslate",(()=>{setTranslate()})),on("setTransition",((_s,duration)=>{!function setTransition(duration){swiper.params.scrollbar.el&&swiper.scrollbar.el&&(swiper.scrollbar.dragEl.style.transitionDuration=`${duration}ms`)}(duration)})),on("enable disable",(()=>{const{el}=swiper.scrollbar;el&&el.classList[swiper.enabled?"remove":"add"](...classesToTokens(swiper.params.scrollbar.lockClass))})),on("destroy",(()=>{destroy()}));const disable=()=>{swiper.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass)),swiper.scrollbar.el&&swiper.scrollbar.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass)),destroy()};Object.assign(swiper.scrollbar,{enable:()=>{swiper.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass)),swiper.scrollbar.el&&swiper.scrollbar.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass)),init(),updateSize(),setTranslate()},disable,updateSize,setTranslate,init,destroy})},function Parallax(_ref){let{swiper,extendParams,on}=_ref;extendParams({parallax:{enabled:!1}});const elementsSelector="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",setTransform=(el,progress)=>{const{rtl}=swiper,rtlFactor=rtl?-1:1,p=el.getAttribute("data-swiper-parallax")||"0";let x=el.getAttribute("data-swiper-parallax-x"),y=el.getAttribute("data-swiper-parallax-y");const scale=el.getAttribute("data-swiper-parallax-scale"),opacity=el.getAttribute("data-swiper-parallax-opacity"),rotate=el.getAttribute("data-swiper-parallax-rotate");if(x||y?(x=x||"0",y=y||"0"):swiper.isHorizontal()?(x=p,y="0"):(y=p,x="0"),x=x.indexOf("%")>=0?parseInt(x,10)*progress*rtlFactor+"%":x*progress*rtlFactor+"px",y=y.indexOf("%")>=0?parseInt(y,10)*progress+"%":y*progress+"px",null!=opacity){const currentOpacity=opacity-(opacity-1)*(1-Math.abs(progress));el.style.opacity=currentOpacity}let transform=`translate3d(${x}, ${y}, 0px)`;if(null!=scale){transform+=` scale(${scale-(scale-1)*(1-Math.abs(progress))})`}if(rotate&&null!=rotate){transform+=` rotate(${rotate*progress*-1}deg)`}el.style.transform=transform},setTranslate=()=>{const{el,slides,progress,snapGrid,isElement}=swiper,elements=elementChildren(el,elementsSelector);swiper.isElement&&elements.push(...elementChildren(swiper.hostEl,elementsSelector)),elements.forEach((subEl=>{setTransform(subEl,progress)})),slides.forEach(((slideEl,slideIndex)=>{let slideProgress=slideEl.progress;swiper.params.slidesPerGroup>1&&"auto"!==swiper.params.slidesPerView&&(slideProgress+=Math.ceil(slideIndex/2)-progress*(snapGrid.length-1)),slideProgress=Math.min(Math.max(slideProgress,-1),1),slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach((subEl=>{setTransform(subEl,slideProgress)}))}))};on("beforeInit",(()=>{swiper.params.parallax.enabled&&(swiper.params.watchSlidesProgress=!0,swiper.originalParams.watchSlidesProgress=!0)})),on("init",(()=>{swiper.params.parallax.enabled&&setTranslate()})),on("setTranslate",(()=>{swiper.params.parallax.enabled&&setTranslate()})),on("setTransition",((_swiper,duration)=>{swiper.params.parallax.enabled&&function(duration){void 0===duration&&(duration=swiper.params.speed);const{el,hostEl}=swiper,elements=[...el.querySelectorAll(elementsSelector)];swiper.isElement&&elements.push(...hostEl.querySelectorAll(elementsSelector)),elements.forEach((parallaxEl=>{let parallaxDuration=parseInt(parallaxEl.getAttribute("data-swiper-parallax-duration"),10)||duration;0===duration&&(parallaxDuration=0),parallaxEl.style.transitionDuration=`${parallaxDuration}ms`}))}(duration)}))},function Zoom(_ref){let{swiper,extendParams,on,emit}=_ref;const window=getWindow();extendParams({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),swiper.zoom={enabled:!1};let fakeGestureTouched,fakeGestureMoved,currentScale=1,isScaling=!1;const evCache=[],gesture={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},image={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let scale=1;function getDistanceBetweenTouches(){if(evCache.length<2)return 1;const x1=evCache[0].pageX,y1=evCache[0].pageY,x2=evCache[1].pageX,y2=evCache[1].pageY;return Math.sqrt((x2-x1)**2+(y2-y1)**2)}function eventWithinSlide(e){const slideSelector=function getSlideSelector(){return swiper.isElement?"swiper-slide":`.${swiper.params.slideClass}`}();return!!e.target.matches(slideSelector)||swiper.slides.filter((slideEl=>slideEl.contains(e.target))).length>0}function onGestureStart(e){if("mouse"===e.pointerType&&evCache.splice(0,evCache.length),!eventWithinSlide(e))return;const params=swiper.params.zoom;if(fakeGestureTouched=!1,fakeGestureMoved=!1,evCache.push(e),!(evCache.length<2)){if(fakeGestureTouched=!0,gesture.scaleStart=getDistanceBetweenTouches(),!gesture.slideEl){gesture.slideEl=e.target.closest(`.${swiper.params.slideClass}, swiper-slide`),gesture.slideEl||(gesture.slideEl=swiper.slides[swiper.activeIndex]);let imageEl=gesture.slideEl.querySelector(`.${params.containerClass}`);if(imageEl&&(imageEl=imageEl.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),gesture.imageEl=imageEl,gesture.imageWrapEl=imageEl?elementParents(gesture.imageEl,`.${params.containerClass}`)[0]:void 0,!gesture.imageWrapEl)return void(gesture.imageEl=void 0);gesture.maxRatio=gesture.imageWrapEl.getAttribute("data-swiper-zoom")||params.maxRatio}if(gesture.imageEl){const[originX,originY]=function getScaleOrigin(){if(evCache.length<2)return{x:null,y:null};const box=gesture.imageEl.getBoundingClientRect();return[(evCache[0].pageX+(evCache[1].pageX-evCache[0].pageX)/2-box.x-window.scrollX)/currentScale,(evCache[0].pageY+(evCache[1].pageY-evCache[0].pageY)/2-box.y-window.scrollY)/currentScale]}();gesture.originX=originX,gesture.originY=originY,gesture.imageEl.style.transitionDuration="0ms"}isScaling=!0}}function onGestureChange(e){if(!eventWithinSlide(e))return;const params=swiper.params.zoom,zoom=swiper.zoom,pointerIndex=evCache.findIndex((cachedEv=>cachedEv.pointerId===e.pointerId));pointerIndex>=0&&(evCache[pointerIndex]=e),evCache.length<2||(fakeGestureMoved=!0,gesture.scaleMove=getDistanceBetweenTouches(),gesture.imageEl&&(zoom.scale=gesture.scaleMove/gesture.scaleStart*currentScale,zoom.scale>gesture.maxRatio&&(zoom.scale=gesture.maxRatio-1+(zoom.scale-gesture.maxRatio+1)**.5),zoom.scale<params.minRatio&&(zoom.scale=params.minRatio+1-(params.minRatio-zoom.scale+1)**.5),gesture.imageEl.style.transform=`translate3d(0,0,0) scale(${zoom.scale})`))}function onGestureEnd(e){if(!eventWithinSlide(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const params=swiper.params.zoom,zoom=swiper.zoom,pointerIndex=evCache.findIndex((cachedEv=>cachedEv.pointerId===e.pointerId));pointerIndex>=0&&evCache.splice(pointerIndex,1),fakeGestureTouched&&fakeGestureMoved&&(fakeGestureTouched=!1,fakeGestureMoved=!1,gesture.imageEl&&(zoom.scale=Math.max(Math.min(zoom.scale,gesture.maxRatio),params.minRatio),gesture.imageEl.style.transitionDuration=`${swiper.params.speed}ms`,gesture.imageEl.style.transform=`translate3d(0,0,0) scale(${zoom.scale})`,currentScale=zoom.scale,isScaling=!1,zoom.scale>1&&gesture.slideEl?gesture.slideEl.classList.add(`${params.zoomedSlideClass}`):zoom.scale<=1&&gesture.slideEl&&gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`),1===zoom.scale&&(gesture.originX=0,gesture.originY=0,gesture.slideEl=void 0)))}function onTouchMove(e){if(!eventWithinSlide(e)||!function eventWithinZoomContainer(e){const selector=`.${swiper.params.zoom.containerClass}`;return!!e.target.matches(selector)||[...swiper.hostEl.querySelectorAll(selector)].filter((containerEl=>containerEl.contains(e.target))).length>0}(e))return;const zoom=swiper.zoom;if(!gesture.imageEl)return;if(!image.isTouched||!gesture.slideEl)return;image.isMoved||(image.width=gesture.imageEl.offsetWidth,image.height=gesture.imageEl.offsetHeight,image.startX=getTranslate(gesture.imageWrapEl,"x")||0,image.startY=getTranslate(gesture.imageWrapEl,"y")||0,gesture.slideWidth=gesture.slideEl.offsetWidth,gesture.slideHeight=gesture.slideEl.offsetHeight,gesture.imageWrapEl.style.transitionDuration="0ms");const scaledWidth=image.width*zoom.scale,scaledHeight=image.height*zoom.scale;if(scaledWidth<gesture.slideWidth&&scaledHeight<gesture.slideHeight)return;image.minX=Math.min(gesture.slideWidth/2-scaledWidth/2,0),image.maxX=-image.minX,image.minY=Math.min(gesture.slideHeight/2-scaledHeight/2,0),image.maxY=-image.minY,image.touchesCurrent.x=evCache.length>0?evCache[0].pageX:e.pageX,image.touchesCurrent.y=evCache.length>0?evCache[0].pageY:e.pageY;if(Math.max(Math.abs(image.touchesCurrent.x-image.touchesStart.x),Math.abs(image.touchesCurrent.y-image.touchesStart.y))>5&&(swiper.allowClick=!1),!image.isMoved&&!isScaling){if(swiper.isHorizontal()&&(Math.floor(image.minX)===Math.floor(image.startX)&&image.touchesCurrent.x<image.touchesStart.x||Math.floor(image.maxX)===Math.floor(image.startX)&&image.touchesCurrent.x>image.touchesStart.x))return void(image.isTouched=!1);if(!swiper.isHorizontal()&&(Math.floor(image.minY)===Math.floor(image.startY)&&image.touchesCurrent.y<image.touchesStart.y||Math.floor(image.maxY)===Math.floor(image.startY)&&image.touchesCurrent.y>image.touchesStart.y))return void(image.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),image.isMoved=!0;const scaleRatio=(zoom.scale-currentScale)/(gesture.maxRatio-swiper.params.zoom.minRatio),{originX,originY}=gesture;image.currentX=image.touchesCurrent.x-image.touchesStart.x+image.startX+scaleRatio*(image.width-2*originX),image.currentY=image.touchesCurrent.y-image.touchesStart.y+image.startY+scaleRatio*(image.height-2*originY),image.currentX<image.minX&&(image.currentX=image.minX+1-(image.minX-image.currentX+1)**.8),image.currentX>image.maxX&&(image.currentX=image.maxX-1+(image.currentX-image.maxX+1)**.8),image.currentY<image.minY&&(image.currentY=image.minY+1-(image.minY-image.currentY+1)**.8),image.currentY>image.maxY&&(image.currentY=image.maxY-1+(image.currentY-image.maxY+1)**.8),velocity.prevPositionX||(velocity.prevPositionX=image.touchesCurrent.x),velocity.prevPositionY||(velocity.prevPositionY=image.touchesCurrent.y),velocity.prevTime||(velocity.prevTime=Date.now()),velocity.x=(image.touchesCurrent.x-velocity.prevPositionX)/(Date.now()-velocity.prevTime)/2,velocity.y=(image.touchesCurrent.y-velocity.prevPositionY)/(Date.now()-velocity.prevTime)/2,Math.abs(image.touchesCurrent.x-velocity.prevPositionX)<2&&(velocity.x=0),Math.abs(image.touchesCurrent.y-velocity.prevPositionY)<2&&(velocity.y=0),velocity.prevPositionX=image.touchesCurrent.x,velocity.prevPositionY=image.touchesCurrent.y,velocity.prevTime=Date.now(),gesture.imageWrapEl.style.transform=`translate3d(${image.currentX}px, ${image.currentY}px,0)`}function onTransitionEnd(){const zoom=swiper.zoom;gesture.slideEl&&swiper.activeIndex!==swiper.slides.indexOf(gesture.slideEl)&&(gesture.imageEl&&(gesture.imageEl.style.transform="translate3d(0,0,0) scale(1)"),gesture.imageWrapEl&&(gesture.imageWrapEl.style.transform="translate3d(0,0,0)"),gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`),zoom.scale=1,currentScale=1,gesture.slideEl=void 0,gesture.imageEl=void 0,gesture.imageWrapEl=void 0,gesture.originX=0,gesture.originY=0)}function zoomIn(e){const zoom=swiper.zoom,params=swiper.params.zoom;if(!gesture.slideEl){e&&e.target&&(gesture.slideEl=e.target.closest(`.${swiper.params.slideClass}, swiper-slide`)),gesture.slideEl||(swiper.params.virtual&&swiper.params.virtual.enabled&&swiper.virtual?gesture.slideEl=elementChildren(swiper.slidesEl,`.${swiper.params.slideActiveClass}`)[0]:gesture.slideEl=swiper.slides[swiper.activeIndex]);let imageEl=gesture.slideEl.querySelector(`.${params.containerClass}`);imageEl&&(imageEl=imageEl.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),gesture.imageEl=imageEl,gesture.imageWrapEl=imageEl?elementParents(gesture.imageEl,`.${params.containerClass}`)[0]:void 0}if(!gesture.imageEl||!gesture.imageWrapEl)return;let touchX,touchY,offsetX,offsetY,diffX,diffY,translateX,translateY,imageWidth,imageHeight,scaledWidth,scaledHeight,translateMinX,translateMinY,translateMaxX,translateMaxY,slideWidth,slideHeight;swiper.params.cssMode&&(swiper.wrapperEl.style.overflow="hidden",swiper.wrapperEl.style.touchAction="none"),gesture.slideEl.classList.add(`${params.zoomedSlideClass}`),void 0===image.touchesStart.x&&e?(touchX=e.pageX,touchY=e.pageY):(touchX=image.touchesStart.x,touchY=image.touchesStart.y);const forceZoomRatio="number"==typeof e?e:null;1===currentScale&&forceZoomRatio&&(touchX=void 0,touchY=void 0),zoom.scale=forceZoomRatio||gesture.imageWrapEl.getAttribute("data-swiper-zoom")||params.maxRatio,currentScale=forceZoomRatio||gesture.imageWrapEl.getAttribute("data-swiper-zoom")||params.maxRatio,!e||1===currentScale&&forceZoomRatio?(translateX=0,translateY=0):(slideWidth=gesture.slideEl.offsetWidth,slideHeight=gesture.slideEl.offsetHeight,offsetX=elementOffset(gesture.slideEl).left+window.scrollX,offsetY=elementOffset(gesture.slideEl).top+window.scrollY,diffX=offsetX+slideWidth/2-touchX,diffY=offsetY+slideHeight/2-touchY,imageWidth=gesture.imageEl.offsetWidth,imageHeight=gesture.imageEl.offsetHeight,scaledWidth=imageWidth*zoom.scale,scaledHeight=imageHeight*zoom.scale,translateMinX=Math.min(slideWidth/2-scaledWidth/2,0),translateMinY=Math.min(slideHeight/2-scaledHeight/2,0),translateMaxX=-translateMinX,translateMaxY=-translateMinY,translateX=diffX*zoom.scale,translateY=diffY*zoom.scale,translateX<translateMinX&&(translateX=translateMinX),translateX>translateMaxX&&(translateX=translateMaxX),translateY<translateMinY&&(translateY=translateMinY),translateY>translateMaxY&&(translateY=translateMaxY)),forceZoomRatio&&1===zoom.scale&&(gesture.originX=0,gesture.originY=0),gesture.imageWrapEl.style.transitionDuration="300ms",gesture.imageWrapEl.style.transform=`translate3d(${translateX}px, ${translateY}px,0)`,gesture.imageEl.style.transitionDuration="300ms",gesture.imageEl.style.transform=`translate3d(0,0,0) scale(${zoom.scale})`}function zoomOut(){const zoom=swiper.zoom,params=swiper.params.zoom;if(!gesture.slideEl){swiper.params.virtual&&swiper.params.virtual.enabled&&swiper.virtual?gesture.slideEl=elementChildren(swiper.slidesEl,`.${swiper.params.slideActiveClass}`)[0]:gesture.slideEl=swiper.slides[swiper.activeIndex];let imageEl=gesture.slideEl.querySelector(`.${params.containerClass}`);imageEl&&(imageEl=imageEl.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),gesture.imageEl=imageEl,gesture.imageWrapEl=imageEl?elementParents(gesture.imageEl,`.${params.containerClass}`)[0]:void 0}gesture.imageEl&&gesture.imageWrapEl&&(swiper.params.cssMode&&(swiper.wrapperEl.style.overflow="",swiper.wrapperEl.style.touchAction=""),zoom.scale=1,currentScale=1,gesture.imageWrapEl.style.transitionDuration="300ms",gesture.imageWrapEl.style.transform="translate3d(0,0,0)",gesture.imageEl.style.transitionDuration="300ms",gesture.imageEl.style.transform="translate3d(0,0,0) scale(1)",gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`),gesture.slideEl=void 0,gesture.originX=0,gesture.originY=0)}function zoomToggle(e){const zoom=swiper.zoom;zoom.scale&&1!==zoom.scale?zoomOut():zoomIn(e)}function getListeners(){return{passiveListener:!!swiper.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!swiper.params.passiveListeners||{passive:!1,capture:!0}}}function enable(){const zoom=swiper.zoom;if(zoom.enabled)return;zoom.enabled=!0;const{passiveListener,activeListenerWithCapture}=getListeners();swiper.wrapperEl.addEventListener("pointerdown",onGestureStart,passiveListener),swiper.wrapperEl.addEventListener("pointermove",onGestureChange,activeListenerWithCapture),["pointerup","pointercancel","pointerout"].forEach((eventName=>{swiper.wrapperEl.addEventListener(eventName,onGestureEnd,passiveListener)})),swiper.wrapperEl.addEventListener("pointermove",onTouchMove,activeListenerWithCapture)}function disable(){const zoom=swiper.zoom;if(!zoom.enabled)return;zoom.enabled=!1;const{passiveListener,activeListenerWithCapture}=getListeners();swiper.wrapperEl.removeEventListener("pointerdown",onGestureStart,passiveListener),swiper.wrapperEl.removeEventListener("pointermove",onGestureChange,activeListenerWithCapture),["pointerup","pointercancel","pointerout"].forEach((eventName=>{swiper.wrapperEl.removeEventListener(eventName,onGestureEnd,passiveListener)})),swiper.wrapperEl.removeEventListener("pointermove",onTouchMove,activeListenerWithCapture)}Object.defineProperty(swiper.zoom,"scale",{get:()=>scale,set(value){if(scale!==value){const imageEl=gesture.imageEl,slideEl=gesture.slideEl;emit("zoomChange",value,imageEl,slideEl)}scale=value}}),on("init",(()=>{swiper.params.zoom.enabled&&enable()})),on("destroy",(()=>{disable()})),on("touchStart",((_s,e)=>{swiper.zoom.enabled&&function onTouchStart(e){const device=swiper.device;if(!gesture.imageEl)return;if(image.isTouched)return;device.android&&e.cancelable&&e.preventDefault(),image.isTouched=!0;const event=evCache.length>0?evCache[0]:e;image.touchesStart.x=event.pageX,image.touchesStart.y=event.pageY}(e)})),on("touchEnd",((_s,e)=>{swiper.zoom.enabled&&function onTouchEnd(){const zoom=swiper.zoom;if(!gesture.imageEl)return;if(!image.isTouched||!image.isMoved)return image.isTouched=!1,void(image.isMoved=!1);image.isTouched=!1,image.isMoved=!1;let momentumDurationX=300,momentumDurationY=300;const momentumDistanceX=velocity.x*momentumDurationX,newPositionX=image.currentX+momentumDistanceX,momentumDistanceY=velocity.y*momentumDurationY,newPositionY=image.currentY+momentumDistanceY;0!==velocity.x&&(momentumDurationX=Math.abs((newPositionX-image.currentX)/velocity.x)),0!==velocity.y&&(momentumDurationY=Math.abs((newPositionY-image.currentY)/velocity.y));const momentumDuration=Math.max(momentumDurationX,momentumDurationY);image.currentX=newPositionX,image.currentY=newPositionY;const scaledWidth=image.width*zoom.scale,scaledHeight=image.height*zoom.scale;image.minX=Math.min(gesture.slideWidth/2-scaledWidth/2,0),image.maxX=-image.minX,image.minY=Math.min(gesture.slideHeight/2-scaledHeight/2,0),image.maxY=-image.minY,image.currentX=Math.max(Math.min(image.currentX,image.maxX),image.minX),image.currentY=Math.max(Math.min(image.currentY,image.maxY),image.minY),gesture.imageWrapEl.style.transitionDuration=`${momentumDuration}ms`,gesture.imageWrapEl.style.transform=`translate3d(${image.currentX}px, ${image.currentY}px,0)`}()})),on("doubleTap",((_s,e)=>{!swiper.animating&&swiper.params.zoom.enabled&&swiper.zoom.enabled&&swiper.params.zoom.toggle&&zoomToggle(e)})),on("transitionEnd",(()=>{swiper.zoom.enabled&&swiper.params.zoom.enabled&&onTransitionEnd()})),on("slideChange",(()=>{swiper.zoom.enabled&&swiper.params.zoom.enabled&&swiper.params.cssMode&&onTransitionEnd()})),Object.assign(swiper.zoom,{enable,disable,in:zoomIn,out:zoomOut,toggle:zoomToggle})},function Controller(_ref){let{swiper,extendParams,on}=_ref;function LinearSpline(x,y){const binarySearch=function search(){let maxIndex,minIndex,guess;return(array,val)=>{for(minIndex=-1,maxIndex=array.length;maxIndex-minIndex>1;)guess=maxIndex+minIndex>>1,array[guess]<=val?minIndex=guess:maxIndex=guess;return maxIndex}}();let i1,i3;return this.x=x,this.y=y,this.lastIndex=x.length-1,this.interpolate=function interpolate(x2){return x2?(i3=binarySearch(this.x,x2),i1=i3-1,(x2-this.x[i1])*(this.y[i3]-this.y[i1])/(this.x[i3]-this.x[i1])+this.y[i1]):0},this}function removeSpline(){swiper.controller.control&&swiper.controller.spline&&(swiper.controller.spline=void 0,delete swiper.controller.spline)}extendParams({controller:{control:void 0,inverse:!1,by:"slide"}}),swiper.controller={control:void 0},on("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof swiper.params.controller.control||swiper.params.controller.control instanceof HTMLElement)){const controlElement=document.querySelector(swiper.params.controller.control);if(controlElement&&controlElement.swiper)swiper.controller.control=controlElement.swiper;else if(controlElement){const onControllerSwiper=e=>{swiper.controller.control=e.detail[0],swiper.update(),controlElement.removeEventListener("init",onControllerSwiper)};controlElement.addEventListener("init",onControllerSwiper)}}else swiper.controller.control=swiper.params.controller.control})),on("update",(()=>{removeSpline()})),on("resize",(()=>{removeSpline()})),on("observerUpdate",(()=>{removeSpline()})),on("setTranslate",((_s,translate,byController)=>{swiper.controller.control&&!swiper.controller.control.destroyed&&swiper.controller.setTranslate(translate,byController)})),on("setTransition",((_s,duration,byController)=>{swiper.controller.control&&!swiper.controller.control.destroyed&&swiper.controller.setTransition(duration,byController)})),Object.assign(swiper.controller,{setTranslate:function setTranslate(_t,byController){const controlled=swiper.controller.control;let multiplier,controlledTranslate;const Swiper=swiper.constructor;function setControlledTranslate(c){if(c.destroyed)return;const translate=swiper.rtlTranslate?-swiper.translate:swiper.translate;"slide"===swiper.params.controller.by&&(!function getInterpolateFunction(c){swiper.controller.spline=swiper.params.loop?new LinearSpline(swiper.slidesGrid,c.slidesGrid):new LinearSpline(swiper.snapGrid,c.snapGrid)}(c),controlledTranslate=-swiper.controller.spline.interpolate(-translate)),controlledTranslate&&"container"!==swiper.params.controller.by||(multiplier=(c.maxTranslate()-c.minTranslate())/(swiper.maxTranslate()-swiper.minTranslate()),!Number.isNaN(multiplier)&&Number.isFinite(multiplier)||(multiplier=1),controlledTranslate=(translate-swiper.minTranslate())*multiplier+c.minTranslate()),swiper.params.controller.inverse&&(controlledTranslate=c.maxTranslate()-controlledTranslate),c.updateProgress(controlledTranslate),c.setTranslate(controlledTranslate,swiper),c.updateActiveIndex(),c.updateSlidesClasses()}if(Array.isArray(controlled))for(let i=0;i<controlled.length;i+=1)controlled[i]!==byController&&controlled[i]instanceof Swiper&&setControlledTranslate(controlled[i]);else controlled instanceof Swiper&&byController!==controlled&&setControlledTranslate(controlled)},setTransition:function setTransition(duration,byController){const Swiper=swiper.constructor,controlled=swiper.controller.control;let i;function setControlledTransition(c){c.destroyed||(c.setTransition(duration,swiper),0!==duration&&(c.transitionStart(),c.params.autoHeight&&nextTick((()=>{c.updateAutoHeight()})),elementTransitionEnd(c.wrapperEl,(()=>{controlled&&c.transitionEnd()}))))}if(Array.isArray(controlled))for(i=0;i<controlled.length;i+=1)controlled[i]!==byController&&controlled[i]instanceof Swiper&&setControlledTransition(controlled[i]);else controlled instanceof Swiper&&byController!==controlled&&setControlledTransition(controlled)}})},function A11y(_ref){let{swiper,extendParams,on}=_ref;extendParams({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),swiper.a11y={clicked:!1};let liveRegion=null;function notify(message){const notification=liveRegion;0!==notification.length&&(notification.innerHTML="",notification.innerHTML=message)}const makeElementsArray=el=>(Array.isArray(el)?el:[el]).filter((e=>!!e));function makeElFocusable(el){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("tabIndex","0")}))}function makeElNotFocusable(el){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("tabIndex","-1")}))}function addElRole(el,role){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("role",role)}))}function addElRoleDescription(el,description){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("aria-roledescription",description)}))}function addElLabel(el,label){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("aria-label",label)}))}function disableEl(el){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("aria-disabled",!0)}))}function enableEl(el){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("aria-disabled",!1)}))}function onEnterOrSpaceKey(e){if(13!==e.keyCode&&32!==e.keyCode)return;const params=swiper.params.a11y,targetEl=e.target;swiper.pagination&&swiper.pagination.el&&(targetEl===swiper.pagination.el||swiper.pagination.el.contains(e.target))&&!e.target.matches(classesToSelector(swiper.params.pagination.bulletClass))||(swiper.navigation&&swiper.navigation.nextEl&&targetEl===swiper.navigation.nextEl&&(swiper.isEnd&&!swiper.params.loop||swiper.slideNext(),swiper.isEnd?notify(params.lastSlideMessage):notify(params.nextSlideMessage)),swiper.navigation&&swiper.navigation.prevEl&&targetEl===swiper.navigation.prevEl&&(swiper.isBeginning&&!swiper.params.loop||swiper.slidePrev(),swiper.isBeginning?notify(params.firstSlideMessage):notify(params.prevSlideMessage)),swiper.pagination&&targetEl.matches(classesToSelector(swiper.params.pagination.bulletClass))&&targetEl.click())}function hasPagination(){return swiper.pagination&&swiper.pagination.bullets&&swiper.pagination.bullets.length}function hasClickablePagination(){return hasPagination()&&swiper.params.pagination.clickable}const initNavEl=(el,wrapperId,message)=>{makeElFocusable(el),"BUTTON"!==el.tagName&&(addElRole(el,"button"),el.addEventListener("keydown",onEnterOrSpaceKey)),addElLabel(el,message),function addElControls(el,controls){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("aria-controls",controls)}))}(el,wrapperId)},handlePointerDown=()=>{swiper.a11y.clicked=!0},handlePointerUp=()=>{requestAnimationFrame((()=>{requestAnimationFrame((()=>{swiper.destroyed||(swiper.a11y.clicked=!1)}))}))},handleFocus=e=>{if(swiper.a11y.clicked)return;const slideEl=e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);if(!slideEl||!swiper.slides.includes(slideEl))return;const isActive=swiper.slides.indexOf(slideEl)===swiper.activeIndex,isVisible=swiper.params.watchSlidesProgress&&swiper.visibleSlides&&swiper.visibleSlides.includes(slideEl);isActive||isVisible||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(swiper.isHorizontal()?swiper.el.scrollLeft=0:swiper.el.scrollTop=0,swiper.slideTo(swiper.slides.indexOf(slideEl),0))},initSlides=()=>{const params=swiper.params.a11y;params.itemRoleDescriptionMessage&&addElRoleDescription(swiper.slides,params.itemRoleDescriptionMessage),params.slideRole&&addElRole(swiper.slides,params.slideRole);const slidesLength=swiper.slides.length;params.slideLabelMessage&&swiper.slides.forEach(((slideEl,index)=>{const slideIndex=swiper.params.loop?parseInt(slideEl.getAttribute("data-swiper-slide-index"),10):index;addElLabel(slideEl,params.slideLabelMessage.replace(/\{\{index\}\}/,slideIndex+1).replace(/\{\{slidesLength\}\}/,slidesLength))}))},init=()=>{const params=swiper.params.a11y;swiper.el.append(liveRegion);const containerEl=swiper.el;params.containerRoleDescriptionMessage&&addElRoleDescription(containerEl,params.containerRoleDescriptionMessage),params.containerMessage&&addElLabel(containerEl,params.containerMessage);const wrapperEl=swiper.wrapperEl,wrapperId=params.id||wrapperEl.getAttribute("id")||`swiper-wrapper-${function getRandomNumber(size){return void 0===size&&(size=16),"x".repeat(size).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}(16)}`,live=swiper.params.autoplay&&swiper.params.autoplay.enabled?"off":"polite";!function addElId(el,id){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("id",id)}))}(wrapperEl,wrapperId),function addElLive(el,live){(el=makeElementsArray(el)).forEach((subEl=>{subEl.setAttribute("aria-live",live)}))}(wrapperEl,live),initSlides();let{nextEl,prevEl}=swiper.navigation?swiper.navigation:{};if(nextEl=makeElementsArray(nextEl),prevEl=makeElementsArray(prevEl),nextEl&&nextEl.forEach((el=>initNavEl(el,wrapperId,params.nextSlideMessage))),prevEl&&prevEl.forEach((el=>initNavEl(el,wrapperId,params.prevSlideMessage))),hasClickablePagination()){makeElementsArray(swiper.pagination.el).forEach((el=>{el.addEventListener("keydown",onEnterOrSpaceKey)}))}swiper.el.addEventListener("focus",handleFocus,!0),swiper.el.addEventListener("pointerdown",handlePointerDown,!0),swiper.el.addEventListener("pointerup",handlePointerUp,!0)};on("beforeInit",(()=>{liveRegion=createElement("span",swiper.params.a11y.notificationClass),liveRegion.setAttribute("aria-live","assertive"),liveRegion.setAttribute("aria-atomic","true")})),on("afterInit",(()=>{swiper.params.a11y.enabled&&init()})),on("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{swiper.params.a11y.enabled&&initSlides()})),on("fromEdge toEdge afterInit lock unlock",(()=>{swiper.params.a11y.enabled&&function updateNavigation(){if(swiper.params.loop||swiper.params.rewind||!swiper.navigation)return;const{nextEl,prevEl}=swiper.navigation;prevEl&&(swiper.isBeginning?(disableEl(prevEl),makeElNotFocusable(prevEl)):(enableEl(prevEl),makeElFocusable(prevEl))),nextEl&&(swiper.isEnd?(disableEl(nextEl),makeElNotFocusable(nextEl)):(enableEl(nextEl),makeElFocusable(nextEl)))}()})),on("paginationUpdate",(()=>{swiper.params.a11y.enabled&&function updatePagination(){const params=swiper.params.a11y;hasPagination()&&swiper.pagination.bullets.forEach((bulletEl=>{swiper.params.pagination.clickable&&(makeElFocusable(bulletEl),swiper.params.pagination.renderBullet||(addElRole(bulletEl,"button"),addElLabel(bulletEl,params.paginationBulletMessage.replace(/\{\{index\}\}/,elementIndex(bulletEl)+1)))),bulletEl.matches(classesToSelector(swiper.params.pagination.bulletActiveClass))?bulletEl.setAttribute("aria-current","true"):bulletEl.removeAttribute("aria-current")}))}()})),on("destroy",(()=>{swiper.params.a11y.enabled&&function destroy(){liveRegion&&liveRegion.remove();let{nextEl,prevEl}=swiper.navigation?swiper.navigation:{};nextEl=makeElementsArray(nextEl),prevEl=makeElementsArray(prevEl),nextEl&&nextEl.forEach((el=>el.removeEventListener("keydown",onEnterOrSpaceKey))),prevEl&&prevEl.forEach((el=>el.removeEventListener("keydown",onEnterOrSpaceKey))),hasClickablePagination()&&makeElementsArray(swiper.pagination.el).forEach((el=>{el.removeEventListener("keydown",onEnterOrSpaceKey)}));swiper.el.removeEventListener("focus",handleFocus,!0),swiper.el.removeEventListener("pointerdown",handlePointerDown,!0),swiper.el.removeEventListener("pointerup",handlePointerUp,!0)}()}))},function History(_ref){let{swiper,extendParams,on}=_ref;extendParams({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let initialized=!1,paths={};const slugify=text=>text.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),getPathValues=urlOverride=>{const window=getWindow();let location;location=urlOverride?new URL(urlOverride):window.location;const pathArray=location.pathname.slice(1).split("/").filter((part=>""!==part)),total=pathArray.length;return{key:pathArray[total-2],value:pathArray[total-1]}},setHistory=(key,index)=>{const window=getWindow();if(!initialized||!swiper.params.history.enabled)return;let location;location=swiper.params.url?new URL(swiper.params.url):window.location;const slide=swiper.slides[index];let value=slugify(slide.getAttribute("data-history"));if(swiper.params.history.root.length>0){let root=swiper.params.history.root;"/"===root[root.length-1]&&(root=root.slice(0,root.length-1)),value=`${root}/${key?`${key}/`:""}${value}`}else location.pathname.includes(key)||(value=`${key?`${key}/`:""}${value}`);swiper.params.history.keepQuery&&(value+=location.search);const currentState=window.history.state;currentState&&currentState.value===value||(swiper.params.history.replaceState?window.history.replaceState({value},null,value):window.history.pushState({value},null,value))},scrollToSlide=(speed,value,runCallbacks)=>{if(value)for(let i=0,length=swiper.slides.length;i<length;i+=1){const slide=swiper.slides[i];if(slugify(slide.getAttribute("data-history"))===value){const index=swiper.getSlideIndex(slide);swiper.slideTo(index,speed,runCallbacks)}}else swiper.slideTo(0,speed,runCallbacks)},setHistoryPopState=()=>{paths=getPathValues(swiper.params.url),scrollToSlide(swiper.params.speed,paths.value,!1)};on("init",(()=>{swiper.params.history.enabled&&(()=>{const window=getWindow();if(swiper.params.history){if(!window.history||!window.history.pushState)return swiper.params.history.enabled=!1,void(swiper.params.hashNavigation.enabled=!0);initialized=!0,paths=getPathValues(swiper.params.url),paths.key||paths.value?(scrollToSlide(0,paths.value,swiper.params.runCallbacksOnInit),swiper.params.history.replaceState||window.addEventListener("popstate",setHistoryPopState)):swiper.params.history.replaceState||window.addEventListener("popstate",setHistoryPopState)}})()})),on("destroy",(()=>{swiper.params.history.enabled&&(()=>{const window=getWindow();swiper.params.history.replaceState||window.removeEventListener("popstate",setHistoryPopState)})()})),on("transitionEnd _freeModeNoMomentumRelease",(()=>{initialized&&setHistory(swiper.params.history.key,swiper.activeIndex)})),on("slideChange",(()=>{initialized&&swiper.params.cssMode&&setHistory(swiper.params.history.key,swiper.activeIndex)}))},function HashNavigation(_ref){let{swiper,extendParams,emit,on}=_ref,initialized=!1;const document=getDocument(),window=getWindow();extendParams({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(_s,hash){if(swiper.virtual&&swiper.params.virtual.enabled){const slideWithHash=swiper.slides.filter((slideEl=>slideEl.getAttribute("data-hash")===hash))[0];if(!slideWithHash)return 0;return parseInt(slideWithHash.getAttribute("data-swiper-slide-index"),10)}return swiper.getSlideIndex(elementChildren(swiper.slidesEl,`.${swiper.params.slideClass}[data-hash="${hash}"], swiper-slide[data-hash="${hash}"]`)[0])}}});const onHashChange=()=>{emit("hashChange");const newHash=document.location.hash.replace("#",""),activeSlideEl=swiper.virtual&&swiper.params.virtual.enabled?swiper.slidesEl.querySelector(`[data-swiper-slide-index="${swiper.activeIndex}"]`):swiper.slides[swiper.activeIndex];if(newHash!==(activeSlideEl?activeSlideEl.getAttribute("data-hash"):"")){const newIndex=swiper.params.hashNavigation.getSlideIndex(swiper,newHash);if(void 0===newIndex||Number.isNaN(newIndex))return;swiper.slideTo(newIndex)}},setHash=()=>{if(!initialized||!swiper.params.hashNavigation.enabled)return;const activeSlideEl=swiper.virtual&&swiper.params.virtual.enabled?swiper.slidesEl.querySelector(`[data-swiper-slide-index="${swiper.activeIndex}"]`):swiper.slides[swiper.activeIndex],activeSlideHash=activeSlideEl?activeSlideEl.getAttribute("data-hash")||activeSlideEl.getAttribute("data-history"):"";swiper.params.hashNavigation.replaceState&&window.history&&window.history.replaceState?(window.history.replaceState(null,null,`#${activeSlideHash}`||""),emit("hashSet")):(document.location.hash=activeSlideHash||"",emit("hashSet"))};on("init",(()=>{swiper.params.hashNavigation.enabled&&(()=>{if(!swiper.params.hashNavigation.enabled||swiper.params.history&&swiper.params.history.enabled)return;initialized=!0;const hash=document.location.hash.replace("#","");if(hash){const speed=0,index=swiper.params.hashNavigation.getSlideIndex(swiper,hash);swiper.slideTo(index||0,speed,swiper.params.runCallbacksOnInit,!0)}swiper.params.hashNavigation.watchState&&window.addEventListener("hashchange",onHashChange)})()})),on("destroy",(()=>{swiper.params.hashNavigation.enabled&&swiper.params.hashNavigation.watchState&&window.removeEventListener("hashchange",onHashChange)})),on("transitionEnd _freeModeNoMomentumRelease",(()=>{initialized&&setHash()})),on("slideChange",(()=>{initialized&&swiper.params.cssMode&&setHash()}))},function Autoplay(_ref){let timeout,raf,{swiper,extendParams,on,emit,params}=_ref;swiper.autoplay={running:!1,paused:!1,timeLeft:0},extendParams({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let autoplayTimeLeft,wasPaused,isTouched,pausedByTouch,touchStartTimeout,slideChanged,pausedByInteraction,pausedByPointerEnter,autoplayDelayTotal=params&&params.autoplay?params.autoplay.delay:3e3,autoplayDelayCurrent=params&&params.autoplay?params.autoplay.delay:3e3,autoplayStartTime=(new Date).getTime();function onTransitionEnd(e){swiper&&!swiper.destroyed&&swiper.wrapperEl&&e.target===swiper.wrapperEl&&(swiper.wrapperEl.removeEventListener("transitionend",onTransitionEnd),pausedByPointerEnter||resume())}const calcTimeLeft=()=>{if(swiper.destroyed||!swiper.autoplay.running)return;swiper.autoplay.paused?wasPaused=!0:wasPaused&&(autoplayDelayCurrent=autoplayTimeLeft,wasPaused=!1);const timeLeft=swiper.autoplay.paused?autoplayTimeLeft:autoplayStartTime+autoplayDelayCurrent-(new Date).getTime();swiper.autoplay.timeLeft=timeLeft,emit("autoplayTimeLeft",timeLeft,timeLeft/autoplayDelayTotal),raf=requestAnimationFrame((()=>{calcTimeLeft()}))},run=delayForce=>{if(swiper.destroyed||!swiper.autoplay.running)return;cancelAnimationFrame(raf),calcTimeLeft();let delay=void 0===delayForce?swiper.params.autoplay.delay:delayForce;autoplayDelayTotal=swiper.params.autoplay.delay,autoplayDelayCurrent=swiper.params.autoplay.delay;const currentSlideDelay=(()=>{let activeSlideEl;if(activeSlideEl=swiper.virtual&&swiper.params.virtual.enabled?swiper.slides.filter((slideEl=>slideEl.classList.contains("swiper-slide-active")))[0]:swiper.slides[swiper.activeIndex],!activeSlideEl)return;return parseInt(activeSlideEl.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(currentSlideDelay)&&currentSlideDelay>0&&void 0===delayForce&&(delay=currentSlideDelay,autoplayDelayTotal=currentSlideDelay,autoplayDelayCurrent=currentSlideDelay),autoplayTimeLeft=delay;const speed=swiper.params.speed,proceed=()=>{swiper&&!swiper.destroyed&&(swiper.params.autoplay.reverseDirection?!swiper.isBeginning||swiper.params.loop||swiper.params.rewind?(swiper.slidePrev(speed,!0,!0),emit("autoplay")):swiper.params.autoplay.stopOnLastSlide||(swiper.slideTo(swiper.slides.length-1,speed,!0,!0),emit("autoplay")):!swiper.isEnd||swiper.params.loop||swiper.params.rewind?(swiper.slideNext(speed,!0,!0),emit("autoplay")):swiper.params.autoplay.stopOnLastSlide||(swiper.slideTo(0,speed,!0,!0),emit("autoplay")),swiper.params.cssMode&&(autoplayStartTime=(new Date).getTime(),requestAnimationFrame((()=>{run()}))))};return delay>0?(clearTimeout(timeout),timeout=setTimeout((()=>{proceed()}),delay)):requestAnimationFrame((()=>{proceed()})),delay},start=()=>{autoplayStartTime=(new Date).getTime(),swiper.autoplay.running=!0,run(),emit("autoplayStart")},stop=()=>{swiper.autoplay.running=!1,clearTimeout(timeout),cancelAnimationFrame(raf),emit("autoplayStop")},pause=(internal,reset)=>{if(swiper.destroyed||!swiper.autoplay.running)return;clearTimeout(timeout),internal||(pausedByInteraction=!0);const proceed=()=>{emit("autoplayPause"),swiper.params.autoplay.waitForTransition?swiper.wrapperEl.addEventListener("transitionend",onTransitionEnd):resume()};if(swiper.autoplay.paused=!0,reset)return slideChanged&&(autoplayTimeLeft=swiper.params.autoplay.delay),slideChanged=!1,void proceed();const delay=autoplayTimeLeft||swiper.params.autoplay.delay;autoplayTimeLeft=delay-((new Date).getTime()-autoplayStartTime),swiper.isEnd&&autoplayTimeLeft<0&&!swiper.params.loop||(autoplayTimeLeft<0&&(autoplayTimeLeft=0),proceed())},resume=()=>{swiper.isEnd&&autoplayTimeLeft<0&&!swiper.params.loop||swiper.destroyed||!swiper.autoplay.running||(autoplayStartTime=(new Date).getTime(),pausedByInteraction?(pausedByInteraction=!1,run(autoplayTimeLeft)):run(),swiper.autoplay.paused=!1,emit("autoplayResume"))},onVisibilityChange=()=>{if(swiper.destroyed||!swiper.autoplay.running)return;const document=getDocument();"hidden"===document.visibilityState&&(pausedByInteraction=!0,pause(!0)),"visible"===document.visibilityState&&resume()},onPointerEnter=e=>{"mouse"===e.pointerType&&(pausedByInteraction=!0,pausedByPointerEnter=!0,swiper.animating||swiper.autoplay.paused||pause(!0))},onPointerLeave=e=>{"mouse"===e.pointerType&&(pausedByPointerEnter=!1,swiper.autoplay.paused&&resume())};on("init",(()=>{swiper.params.autoplay.enabled&&(swiper.params.autoplay.pauseOnMouseEnter&&(swiper.el.addEventListener("pointerenter",onPointerEnter),swiper.el.addEventListener("pointerleave",onPointerLeave)),getDocument().addEventListener("visibilitychange",onVisibilityChange),start())})),on("destroy",(()=>{swiper.el.removeEventListener("pointerenter",onPointerEnter),swiper.el.removeEventListener("pointerleave",onPointerLeave),getDocument().removeEventListener("visibilitychange",onVisibilityChange),swiper.autoplay.running&&stop()})),on("_freeModeStaticRelease",(()=>{(pausedByTouch||pausedByInteraction)&&resume()})),on("_freeModeNoMomentumRelease",(()=>{swiper.params.autoplay.disableOnInteraction?stop():pause(!0,!0)})),on("beforeTransitionStart",((_s,speed,internal)=>{!swiper.destroyed&&swiper.autoplay.running&&(internal||!swiper.params.autoplay.disableOnInteraction?pause(!0,!0):stop())})),on("sliderFirstMove",(()=>{!swiper.destroyed&&swiper.autoplay.running&&(swiper.params.autoplay.disableOnInteraction?stop():(isTouched=!0,pausedByTouch=!1,pausedByInteraction=!1,touchStartTimeout=setTimeout((()=>{pausedByInteraction=!0,pausedByTouch=!0,pause(!0)}),200)))})),on("touchEnd",(()=>{if(!swiper.destroyed&&swiper.autoplay.running&&isTouched){if(clearTimeout(touchStartTimeout),clearTimeout(timeout),swiper.params.autoplay.disableOnInteraction)return pausedByTouch=!1,void(isTouched=!1);pausedByTouch&&swiper.params.cssMode&&resume(),pausedByTouch=!1,isTouched=!1}})),on("slideChange",(()=>{!swiper.destroyed&&swiper.autoplay.running&&(slideChanged=!0)})),Object.assign(swiper.autoplay,{start,stop,pause,resume})},function Thumb(_ref){let{swiper,extendParams,on}=_ref;extendParams({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let initialized=!1,swiperCreated=!1;function onThumbClick(){const thumbsSwiper=swiper.thumbs.swiper;if(!thumbsSwiper||thumbsSwiper.destroyed)return;const clickedIndex=thumbsSwiper.clickedIndex,clickedSlide=thumbsSwiper.clickedSlide;if(clickedSlide&&clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass))return;if(null==clickedIndex)return;let slideToIndex;slideToIndex=thumbsSwiper.params.loop?parseInt(thumbsSwiper.clickedSlide.getAttribute("data-swiper-slide-index"),10):clickedIndex,swiper.params.loop?swiper.slideToLoop(slideToIndex):swiper.slideTo(slideToIndex)}function init(){const{thumbs:thumbsParams}=swiper.params;if(initialized)return!1;initialized=!0;const SwiperClass=swiper.constructor;if(thumbsParams.swiper instanceof SwiperClass)swiper.thumbs.swiper=thumbsParams.swiper,Object.assign(swiper.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(swiper.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),swiper.thumbs.swiper.update();else if(utils_isObject(thumbsParams.swiper)){const thumbsSwiperParams=Object.assign({},thumbsParams.swiper);Object.assign(thumbsSwiperParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),swiper.thumbs.swiper=new SwiperClass(thumbsSwiperParams),swiperCreated=!0}return swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass),swiper.thumbs.swiper.on("tap",onThumbClick),!0}function update(initial){const thumbsSwiper=swiper.thumbs.swiper;if(!thumbsSwiper||thumbsSwiper.destroyed)return;const slidesPerView="auto"===thumbsSwiper.params.slidesPerView?thumbsSwiper.slidesPerViewDynamic():thumbsSwiper.params.slidesPerView;let thumbsToActivate=1;const thumbActiveClass=swiper.params.thumbs.slideThumbActiveClass;if(swiper.params.slidesPerView>1&&!swiper.params.centeredSlides&&(thumbsToActivate=swiper.params.slidesPerView),swiper.params.thumbs.multipleActiveThumbs||(thumbsToActivate=1),thumbsToActivate=Math.floor(thumbsToActivate),thumbsSwiper.slides.forEach((slideEl=>slideEl.classList.remove(thumbActiveClass))),thumbsSwiper.params.loop||thumbsSwiper.params.virtual&&thumbsSwiper.params.virtual.enabled)for(let i=0;i<thumbsToActivate;i+=1)elementChildren(thumbsSwiper.slidesEl,`[data-swiper-slide-index="${swiper.realIndex+i}"]`).forEach((slideEl=>{slideEl.classList.add(thumbActiveClass)}));else for(let i=0;i<thumbsToActivate;i+=1)thumbsSwiper.slides[swiper.realIndex+i]&&thumbsSwiper.slides[swiper.realIndex+i].classList.add(thumbActiveClass);const autoScrollOffset=swiper.params.thumbs.autoScrollOffset,useOffset=autoScrollOffset&&!thumbsSwiper.params.loop;if(swiper.realIndex!==thumbsSwiper.realIndex||useOffset){const currentThumbsIndex=thumbsSwiper.activeIndex;let newThumbsIndex,direction;if(thumbsSwiper.params.loop){const newThumbsSlide=thumbsSwiper.slides.filter((slideEl=>slideEl.getAttribute("data-swiper-slide-index")===`${swiper.realIndex}`))[0];newThumbsIndex=thumbsSwiper.slides.indexOf(newThumbsSlide),direction=swiper.activeIndex>swiper.previousIndex?"next":"prev"}else newThumbsIndex=swiper.realIndex,direction=newThumbsIndex>swiper.previousIndex?"next":"prev";useOffset&&(newThumbsIndex+="next"===direction?autoScrollOffset:-1*autoScrollOffset),thumbsSwiper.visibleSlidesIndexes&&thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex)<0&&(thumbsSwiper.params.centeredSlides?newThumbsIndex=newThumbsIndex>currentThumbsIndex?newThumbsIndex-Math.floor(slidesPerView/2)+1:newThumbsIndex+Math.floor(slidesPerView/2)-1:newThumbsIndex>currentThumbsIndex&&thumbsSwiper.params.slidesPerGroup,thumbsSwiper.slideTo(newThumbsIndex,initial?0:void 0))}}swiper.thumbs={swiper:null},on("beforeInit",(()=>{const{thumbs}=swiper.params;if(thumbs&&thumbs.swiper)if("string"==typeof thumbs.swiper||thumbs.swiper instanceof HTMLElement){const document=getDocument(),getThumbsElementAndInit=()=>{const thumbsElement="string"==typeof thumbs.swiper?document.querySelector(thumbs.swiper):thumbs.swiper;if(thumbsElement&&thumbsElement.swiper)thumbs.swiper=thumbsElement.swiper,init(),update(!0);else if(thumbsElement){const onThumbsSwiper=e=>{thumbs.swiper=e.detail[0],thumbsElement.removeEventListener("init",onThumbsSwiper),init(),update(!0),thumbs.swiper.update(),swiper.update()};thumbsElement.addEventListener("init",onThumbsSwiper)}return thumbsElement},watchForThumbsToAppear=()=>{if(swiper.destroyed)return;getThumbsElementAndInit()||requestAnimationFrame(watchForThumbsToAppear)};requestAnimationFrame(watchForThumbsToAppear)}else init(),update(!0)})),on("slideChange update resize observerUpdate",(()=>{update()})),on("setTransition",((_s,duration)=>{const thumbsSwiper=swiper.thumbs.swiper;thumbsSwiper&&!thumbsSwiper.destroyed&&thumbsSwiper.setTransition(duration)})),on("beforeDestroy",(()=>{const thumbsSwiper=swiper.thumbs.swiper;thumbsSwiper&&!thumbsSwiper.destroyed&&swiperCreated&&thumbsSwiper.destroy()})),Object.assign(swiper.thumbs,{init,update})},function freeMode(_ref){let{swiper,extendParams,emit,once}=_ref;extendParams({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(swiper,{freeMode:{onTouchStart:function onTouchStart(){if(swiper.params.cssMode)return;const translate=swiper.getTranslate();swiper.setTranslate(translate),swiper.setTransition(0),swiper.touchEventsData.velocities.length=0,swiper.freeMode.onTouchEnd({currentPos:swiper.rtl?swiper.translate:-swiper.translate})},onTouchMove:function onTouchMove(){if(swiper.params.cssMode)return;const{touchEventsData:data,touches}=swiper;0===data.velocities.length&&data.velocities.push({position:touches[swiper.isHorizontal()?"startX":"startY"],time:data.touchStartTime}),data.velocities.push({position:touches[swiper.isHorizontal()?"currentX":"currentY"],time:now()})},onTouchEnd:function onTouchEnd(_ref2){let{currentPos}=_ref2;if(swiper.params.cssMode)return;const{params,wrapperEl,rtlTranslate:rtl,snapGrid,touchEventsData:data}=swiper,timeDiff=now()-data.touchStartTime;if(currentPos<-swiper.minTranslate())swiper.slideTo(swiper.activeIndex);else if(currentPos>-swiper.maxTranslate())swiper.slides.length<snapGrid.length?swiper.slideTo(snapGrid.length-1):swiper.slideTo(swiper.slides.length-1);else{if(params.freeMode.momentum){if(data.velocities.length>1){const lastMoveEvent=data.velocities.pop(),velocityEvent=data.velocities.pop(),distance=lastMoveEvent.position-velocityEvent.position,time=lastMoveEvent.time-velocityEvent.time;swiper.velocity=distance/time,swiper.velocity/=2,Math.abs(swiper.velocity)<params.freeMode.minimumVelocity&&(swiper.velocity=0),(time>150||now()-lastMoveEvent.time>300)&&(swiper.velocity=0)}else swiper.velocity=0;swiper.velocity*=params.freeMode.momentumVelocityRatio,data.velocities.length=0;let momentumDuration=1e3*params.freeMode.momentumRatio;const momentumDistance=swiper.velocity*momentumDuration;let newPosition=swiper.translate+momentumDistance;rtl&&(newPosition=-newPosition);let afterBouncePosition,doBounce=!1;const bounceAmount=20*Math.abs(swiper.velocity)*params.freeMode.momentumBounceRatio;let needsLoopFix;if(newPosition<swiper.maxTranslate())params.freeMode.momentumBounce?(newPosition+swiper.maxTranslate()<-bounceAmount&&(newPosition=swiper.maxTranslate()-bounceAmount),afterBouncePosition=swiper.maxTranslate(),doBounce=!0,data.allowMomentumBounce=!0):newPosition=swiper.maxTranslate(),params.loop&&params.centeredSlides&&(needsLoopFix=!0);else if(newPosition>swiper.minTranslate())params.freeMode.momentumBounce?(newPosition-swiper.minTranslate()>bounceAmount&&(newPosition=swiper.minTranslate()+bounceAmount),afterBouncePosition=swiper.minTranslate(),doBounce=!0,data.allowMomentumBounce=!0):newPosition=swiper.minTranslate(),params.loop&&params.centeredSlides&&(needsLoopFix=!0);else if(params.freeMode.sticky){let nextSlide;for(let j=0;j<snapGrid.length;j+=1)if(snapGrid[j]>-newPosition){nextSlide=j;break}newPosition=Math.abs(snapGrid[nextSlide]-newPosition)<Math.abs(snapGrid[nextSlide-1]-newPosition)||"next"===swiper.swipeDirection?snapGrid[nextSlide]:snapGrid[nextSlide-1],newPosition=-newPosition}if(needsLoopFix&&once("transitionEnd",(()=>{swiper.loopFix()})),0!==swiper.velocity){if(momentumDuration=rtl?Math.abs((-newPosition-swiper.translate)/swiper.velocity):Math.abs((newPosition-swiper.translate)/swiper.velocity),params.freeMode.sticky){const moveDistance=Math.abs((rtl?-newPosition:newPosition)-swiper.translate),currentSlideSize=swiper.slidesSizesGrid[swiper.activeIndex];momentumDuration=moveDistance<currentSlideSize?params.speed:moveDistance<2*currentSlideSize?1.5*params.speed:2.5*params.speed}}else if(params.freeMode.sticky)return void swiper.slideToClosest();params.freeMode.momentumBounce&&doBounce?(swiper.updateProgress(afterBouncePosition),swiper.setTransition(momentumDuration),swiper.setTranslate(newPosition),swiper.transitionStart(!0,swiper.swipeDirection),swiper.animating=!0,elementTransitionEnd(wrapperEl,(()=>{swiper&&!swiper.destroyed&&data.allowMomentumBounce&&(emit("momentumBounce"),swiper.setTransition(params.speed),setTimeout((()=>{swiper.setTranslate(afterBouncePosition),elementTransitionEnd(wrapperEl,(()=>{swiper&&!swiper.destroyed&&swiper.transitionEnd()}))}),0))}))):swiper.velocity?(emit("_freeModeNoMomentumRelease"),swiper.updateProgress(newPosition),swiper.setTransition(momentumDuration),swiper.setTranslate(newPosition),swiper.transitionStart(!0,swiper.swipeDirection),swiper.animating||(swiper.animating=!0,elementTransitionEnd(wrapperEl,(()=>{swiper&&!swiper.destroyed&&swiper.transitionEnd()})))):swiper.updateProgress(newPosition),swiper.updateActiveIndex(),swiper.updateSlidesClasses()}else{if(params.freeMode.sticky)return void swiper.slideToClosest();params.freeMode&&emit("_freeModeNoMomentumRelease")}(!params.freeMode.momentum||timeDiff>=params.longSwipesMs)&&(emit("_freeModeStaticRelease"),swiper.updateProgress(),swiper.updateActiveIndex(),swiper.updateSlidesClasses())}}}})},function Grid(_ref){let slidesNumberEvenToRows,slidesPerRow,numFullColumns,wasMultiRow,{swiper,extendParams,on}=_ref;extendParams({grid:{rows:1,fill:"column"}});const getSpaceBetween=()=>{let spaceBetween=swiper.params.spaceBetween;return"string"==typeof spaceBetween&&spaceBetween.indexOf("%")>=0?spaceBetween=parseFloat(spaceBetween.replace("%",""))/100*swiper.size:"string"==typeof spaceBetween&&(spaceBetween=parseFloat(spaceBetween)),spaceBetween};on("init",(()=>{wasMultiRow=swiper.params.grid&&swiper.params.grid.rows>1})),on("update",(()=>{const{params,el}=swiper,isMultiRow=params.grid&&params.grid.rows>1;wasMultiRow&&!isMultiRow?(el.classList.remove(`${params.containerModifierClass}grid`,`${params.containerModifierClass}grid-column`),numFullColumns=1,swiper.emitContainerClasses()):!wasMultiRow&&isMultiRow&&(el.classList.add(`${params.containerModifierClass}grid`),"column"===params.grid.fill&&el.classList.add(`${params.containerModifierClass}grid-column`),swiper.emitContainerClasses()),wasMultiRow=isMultiRow})),swiper.grid={initSlides:slides=>{const{slidesPerView}=swiper.params,{rows,fill}=swiper.params.grid,slidesLength=swiper.virtual&&swiper.params.virtual.enabled?swiper.virtual.slides.length:slides.length;numFullColumns=Math.floor(slidesLength/rows),slidesNumberEvenToRows=Math.floor(slidesLength/rows)===slidesLength/rows?slidesLength:Math.ceil(slidesLength/rows)*rows,"auto"!==slidesPerView&&"row"===fill&&(slidesNumberEvenToRows=Math.max(slidesNumberEvenToRows,slidesPerView*rows)),slidesPerRow=slidesNumberEvenToRows/rows},unsetSlides:()=>{swiper.slides&&swiper.slides.forEach((slide=>{slide.swiperSlideGridSet&&(slide.style.height="",slide.style[swiper.getDirectionLabel("margin-top")]="")}))},updateSlide:(i,slide,slides)=>{const{slidesPerGroup}=swiper.params,spaceBetween=getSpaceBetween(),{rows,fill}=swiper.params.grid,slidesLength=swiper.virtual&&swiper.params.virtual.enabled?swiper.virtual.slides.length:slides.length;let newSlideOrderIndex,column,row;if("row"===fill&&slidesPerGroup>1){const groupIndex=Math.floor(i/(slidesPerGroup*rows)),slideIndexInGroup=i-rows*slidesPerGroup*groupIndex,columnsInGroup=0===groupIndex?slidesPerGroup:Math.min(Math.ceil((slidesLength-groupIndex*rows*slidesPerGroup)/rows),slidesPerGroup);row=Math.floor(slideIndexInGroup/columnsInGroup),column=slideIndexInGroup-row*columnsInGroup+groupIndex*slidesPerGroup,newSlideOrderIndex=column+row*slidesNumberEvenToRows/rows,slide.style.order=newSlideOrderIndex}else"column"===fill?(column=Math.floor(i/rows),row=i-column*rows,(column>numFullColumns||column===numFullColumns&&row===rows-1)&&(row+=1,row>=rows&&(row=0,column+=1))):(row=Math.floor(i/slidesPerRow),column=i-row*slidesPerRow);slide.row=row,slide.column=column,slide.style.height=`calc((100% - ${(rows-1)*spaceBetween}px) / ${rows})`,slide.style[swiper.getDirectionLabel("margin-top")]=0!==row?spaceBetween&&`${spaceBetween}px`:"",slide.swiperSlideGridSet=!0},updateWrapperSize:(slideSize,snapGrid)=>{const{centeredSlides,roundLengths}=swiper.params,spaceBetween=getSpaceBetween(),{rows}=swiper.params.grid;if(swiper.virtualSize=(slideSize+spaceBetween)*slidesNumberEvenToRows,swiper.virtualSize=Math.ceil(swiper.virtualSize/rows)-spaceBetween,swiper.params.cssMode||(swiper.wrapperEl.style[swiper.getDirectionLabel("width")]=`${swiper.virtualSize+spaceBetween}px`),centeredSlides){const newSlidesGrid=[];for(let i=0;i<snapGrid.length;i+=1){let slidesGridItem=snapGrid[i];roundLengths&&(slidesGridItem=Math.floor(slidesGridItem)),snapGrid[i]<swiper.virtualSize+snapGrid[0]&&newSlidesGrid.push(slidesGridItem)}snapGrid.splice(0,snapGrid.length),snapGrid.push(...newSlidesGrid)}}}},function Manipulation(_ref){let{swiper}=_ref;Object.assign(swiper,{appendSlide:appendSlide.bind(swiper),prependSlide:prependSlide.bind(swiper),addSlide:addSlide.bind(swiper),removeSlide:removeSlide.bind(swiper),removeAllSlides:removeAllSlides.bind(swiper)})},function EffectFade(_ref){let{swiper,extendParams,on}=_ref;extendParams({fadeEffect:{crossFade:!1}}),effectInit({effect:"fade",swiper,on,setTranslate:()=>{const{slides}=swiper;swiper.params.fadeEffect;for(let i=0;i<slides.length;i+=1){const slideEl=swiper.slides[i];let tx=-slideEl.swiperSlideOffset;swiper.params.virtualTranslate||(tx-=swiper.translate);let ty=0;swiper.isHorizontal()||(ty=tx,tx=0);const slideOpacity=swiper.params.fadeEffect.crossFade?Math.max(1-Math.abs(slideEl.progress),0):1+Math.min(Math.max(slideEl.progress,-1),0),targetEl=effectTarget(0,slideEl);targetEl.style.opacity=slideOpacity,targetEl.style.transform=`translate3d(${tx}px, ${ty}px, 0px)`}},setTransition:duration=>{const transformElements=swiper.slides.map((slideEl=>getSlideTransformEl(slideEl)));transformElements.forEach((el=>{el.style.transitionDuration=`${duration}ms`})),effectVirtualTransitionEnd({swiper,duration,transformElements,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!swiper.params.cssMode})})},function EffectCube(_ref){let{swiper,extendParams,on}=_ref;extendParams({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const createSlideShadows=(slideEl,progress,isHorizontal)=>{let shadowBefore=isHorizontal?slideEl.querySelector(".swiper-slide-shadow-left"):slideEl.querySelector(".swiper-slide-shadow-top"),shadowAfter=isHorizontal?slideEl.querySelector(".swiper-slide-shadow-right"):slideEl.querySelector(".swiper-slide-shadow-bottom");shadowBefore||(shadowBefore=createElement("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(isHorizontal?"left":"top")).split(" ")),slideEl.append(shadowBefore)),shadowAfter||(shadowAfter=createElement("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(isHorizontal?"right":"bottom")).split(" ")),slideEl.append(shadowAfter)),shadowBefore&&(shadowBefore.style.opacity=Math.max(-progress,0)),shadowAfter&&(shadowAfter.style.opacity=Math.max(progress,0))};effectInit({effect:"cube",swiper,on,setTranslate:()=>{const{el,wrapperEl,slides,width:swiperWidth,height:swiperHeight,rtlTranslate:rtl,size:swiperSize,browser}=swiper,params=swiper.params.cubeEffect,isHorizontal=swiper.isHorizontal(),isVirtual=swiper.virtual&&swiper.params.virtual.enabled;let cubeShadowEl,wrapperRotate=0;params.shadow&&(isHorizontal?(cubeShadowEl=swiper.wrapperEl.querySelector(".swiper-cube-shadow"),cubeShadowEl||(cubeShadowEl=createElement("div","swiper-cube-shadow"),swiper.wrapperEl.append(cubeShadowEl)),cubeShadowEl.style.height=`${swiperWidth}px`):(cubeShadowEl=el.querySelector(".swiper-cube-shadow"),cubeShadowEl||(cubeShadowEl=createElement("div","swiper-cube-shadow"),el.append(cubeShadowEl))));for(let i=0;i<slides.length;i+=1){const slideEl=slides[i];let slideIndex=i;isVirtual&&(slideIndex=parseInt(slideEl.getAttribute("data-swiper-slide-index"),10));let slideAngle=90*slideIndex,round=Math.floor(slideAngle/360);rtl&&(slideAngle=-slideAngle,round=Math.floor(-slideAngle/360));const progress=Math.max(Math.min(slideEl.progress,1),-1);let tx=0,ty=0,tz=0;slideIndex%4==0?(tx=4*-round*swiperSize,tz=0):(slideIndex-1)%4==0?(tx=0,tz=4*-round*swiperSize):(slideIndex-2)%4==0?(tx=swiperSize+4*round*swiperSize,tz=swiperSize):(slideIndex-3)%4==0&&(tx=-swiperSize,tz=3*swiperSize+4*swiperSize*round),rtl&&(tx=-tx),isHorizontal||(ty=tx,tx=0);const transform=`rotateX(${isHorizontal?0:-slideAngle}deg) rotateY(${isHorizontal?slideAngle:0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;progress<=1&&progress>-1&&(wrapperRotate=90*slideIndex+90*progress,rtl&&(wrapperRotate=90*-slideIndex-90*progress),swiper.browser&&swiper.browser.isSafari&&Math.abs(wrapperRotate)/90%2==1&&(wrapperRotate+=.001)),slideEl.style.transform=transform,params.slideShadows&&createSlideShadows(slideEl,progress,isHorizontal)}if(wrapperEl.style.transformOrigin=`50% 50% -${swiperSize/2}px`,wrapperEl.style["-webkit-transform-origin"]=`50% 50% -${swiperSize/2}px`,params.shadow)if(isHorizontal)cubeShadowEl.style.transform=`translate3d(0px, ${swiperWidth/2+params.shadowOffset}px, ${-swiperWidth/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;else{const shadowAngle=Math.abs(wrapperRotate)-90*Math.floor(Math.abs(wrapperRotate)/90),multiplier=1.5-(Math.sin(2*shadowAngle*Math.PI/360)/2+Math.cos(2*shadowAngle*Math.PI/360)/2),scale1=params.shadowScale,scale2=params.shadowScale/multiplier,offset=params.shadowOffset;cubeShadowEl.style.transform=`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight/2+offset}px, ${-swiperHeight/2/scale2}px) rotateX(-89.99deg)`}const zFactor=(browser.isSafari||browser.isWebView)&&browser.needPerspectiveFix?-swiperSize/2:0;wrapperEl.style.transform=`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal()?0:wrapperRotate}deg) rotateY(${swiper.isHorizontal()?-wrapperRotate:0}deg)`,wrapperEl.style.setProperty("--swiper-cube-translate-z",`${zFactor}px`)},setTransition:duration=>{const{el,slides}=swiper;if(slides.forEach((slideEl=>{slideEl.style.transitionDuration=`${duration}ms`,slideEl.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((subEl=>{subEl.style.transitionDuration=`${duration}ms`}))})),swiper.params.cubeEffect.shadow&&!swiper.isHorizontal()){const shadowEl=el.querySelector(".swiper-cube-shadow");shadowEl&&(shadowEl.style.transitionDuration=`${duration}ms`)}},recreateShadows:()=>{const isHorizontal=swiper.isHorizontal();swiper.slides.forEach((slideEl=>{const progress=Math.max(Math.min(slideEl.progress,1),-1);createSlideShadows(slideEl,progress,isHorizontal)}))},getEffectParams:()=>swiper.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function EffectFlip(_ref){let{swiper,extendParams,on}=_ref;extendParams({flipEffect:{slideShadows:!0,limitRotation:!0}});const createSlideShadows=(slideEl,progress)=>{let shadowBefore=swiper.isHorizontal()?slideEl.querySelector(".swiper-slide-shadow-left"):slideEl.querySelector(".swiper-slide-shadow-top"),shadowAfter=swiper.isHorizontal()?slideEl.querySelector(".swiper-slide-shadow-right"):slideEl.querySelector(".swiper-slide-shadow-bottom");shadowBefore||(shadowBefore=createShadow("flip",slideEl,swiper.isHorizontal()?"left":"top")),shadowAfter||(shadowAfter=createShadow("flip",slideEl,swiper.isHorizontal()?"right":"bottom")),shadowBefore&&(shadowBefore.style.opacity=Math.max(-progress,0)),shadowAfter&&(shadowAfter.style.opacity=Math.max(progress,0))};effectInit({effect:"flip",swiper,on,setTranslate:()=>{const{slides,rtlTranslate:rtl}=swiper,params=swiper.params.flipEffect;for(let i=0;i<slides.length;i+=1){const slideEl=slides[i];let progress=slideEl.progress;swiper.params.flipEffect.limitRotation&&(progress=Math.max(Math.min(slideEl.progress,1),-1));const offset=slideEl.swiperSlideOffset;let rotateY=-180*progress,rotateX=0,tx=swiper.params.cssMode?-offset-swiper.translate:-offset,ty=0;swiper.isHorizontal()?rtl&&(rotateY=-rotateY):(ty=tx,tx=0,rotateX=-rotateY,rotateY=0),swiper.browser&&swiper.browser.isSafari&&(Math.abs(rotateY)/90%2==1&&(rotateY+=.001),Math.abs(rotateX)/90%2==1&&(rotateX+=.001)),slideEl.style.zIndex=-Math.abs(Math.round(progress))+slides.length,params.slideShadows&&createSlideShadows(slideEl,progress);const transform=`translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;effectTarget(0,slideEl).style.transform=transform}},setTransition:duration=>{const transformElements=swiper.slides.map((slideEl=>getSlideTransformEl(slideEl)));transformElements.forEach((el=>{el.style.transitionDuration=`${duration}ms`,el.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((shadowEl=>{shadowEl.style.transitionDuration=`${duration}ms`}))})),effectVirtualTransitionEnd({swiper,duration,transformElements})},recreateShadows:()=>{swiper.params.flipEffect,swiper.slides.forEach((slideEl=>{let progress=slideEl.progress;swiper.params.flipEffect.limitRotation&&(progress=Math.max(Math.min(slideEl.progress,1),-1)),createSlideShadows(slideEl,progress)}))},getEffectParams:()=>swiper.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!swiper.params.cssMode})})},function EffectCoverflow(_ref){let{swiper,extendParams,on}=_ref;extendParams({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),effectInit({effect:"coverflow",swiper,on,setTranslate:()=>{const{width:swiperWidth,height:swiperHeight,slides,slidesSizesGrid}=swiper,params=swiper.params.coverflowEffect,isHorizontal=swiper.isHorizontal(),transform=swiper.translate,center=isHorizontal?swiperWidth/2-transform:swiperHeight/2-transform,rotate=isHorizontal?params.rotate:-params.rotate,translate=params.depth;for(let i=0,length=slides.length;i<length;i+=1){const slideEl=slides[i],slideSize=slidesSizesGrid[i],centerOffset=(center-slideEl.swiperSlideOffset-slideSize/2)/slideSize,offsetMultiplier="function"==typeof params.modifier?params.modifier(centerOffset):centerOffset*params.modifier;let rotateY=isHorizontal?rotate*offsetMultiplier:0,rotateX=isHorizontal?0:rotate*offsetMultiplier,translateZ=-translate*Math.abs(offsetMultiplier),stretch=params.stretch;"string"==typeof stretch&&-1!==stretch.indexOf("%")&&(stretch=parseFloat(params.stretch)/100*slideSize);let translateY=isHorizontal?0:stretch*offsetMultiplier,translateX=isHorizontal?stretch*offsetMultiplier:0,scale=1-(1-params.scale)*Math.abs(offsetMultiplier);Math.abs(translateX)<.001&&(translateX=0),Math.abs(translateY)<.001&&(translateY=0),Math.abs(translateZ)<.001&&(translateZ=0),Math.abs(rotateY)<.001&&(rotateY=0),Math.abs(rotateX)<.001&&(rotateX=0),Math.abs(scale)<.001&&(scale=0),swiper.browser&&swiper.browser.isSafari&&(Math.abs(rotateY)/90%2==1&&(rotateY+=.001),Math.abs(rotateX)/90%2==1&&(rotateX+=.001));const slideTransform=`translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;if(effectTarget(0,slideEl).style.transform=slideTransform,slideEl.style.zIndex=1-Math.abs(Math.round(offsetMultiplier)),params.slideShadows){let shadowBeforeEl=isHorizontal?slideEl.querySelector(".swiper-slide-shadow-left"):slideEl.querySelector(".swiper-slide-shadow-top"),shadowAfterEl=isHorizontal?slideEl.querySelector(".swiper-slide-shadow-right"):slideEl.querySelector(".swiper-slide-shadow-bottom");shadowBeforeEl||(shadowBeforeEl=createShadow("coverflow",slideEl,isHorizontal?"left":"top")),shadowAfterEl||(shadowAfterEl=createShadow("coverflow",slideEl,isHorizontal?"right":"bottom")),shadowBeforeEl&&(shadowBeforeEl.style.opacity=offsetMultiplier>0?offsetMultiplier:0),shadowAfterEl&&(shadowAfterEl.style.opacity=-offsetMultiplier>0?-offsetMultiplier:0)}}},setTransition:duration=>{swiper.slides.map((slideEl=>getSlideTransformEl(slideEl))).forEach((el=>{el.style.transitionDuration=`${duration}ms`,el.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((shadowEl=>{shadowEl.style.transitionDuration=`${duration}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function EffectCreative(_ref){let{swiper,extendParams,on}=_ref;extendParams({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const getTranslateValue=value=>"string"==typeof value?value:`${value}px`;effectInit({effect:"creative",swiper,on,setTranslate:()=>{const{slides,wrapperEl,slidesSizesGrid}=swiper,params=swiper.params.creativeEffect,{progressMultiplier:multiplier}=params,isCenteredSlides=swiper.params.centeredSlides;if(isCenteredSlides){const margin=slidesSizesGrid[0]/2-swiper.params.slidesOffsetBefore||0;wrapperEl.style.transform=`translateX(calc(50% - ${margin}px))`}for(let i=0;i<slides.length;i+=1){const slideEl=slides[i],slideProgress=slideEl.progress,progress=Math.min(Math.max(slideEl.progress,-params.limitProgress),params.limitProgress);let originalProgress=progress;isCenteredSlides||(originalProgress=Math.min(Math.max(slideEl.originalProgress,-params.limitProgress),params.limitProgress));const offset=slideEl.swiperSlideOffset,t=[swiper.params.cssMode?-offset-swiper.translate:-offset,0,0],r=[0,0,0];let custom=!1;swiper.isHorizontal()||(t[1]=t[0],t[0]=0);let data={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};progress<0?(data=params.next,custom=!0):progress>0&&(data=params.prev,custom=!0),t.forEach(((value,index)=>{t[index]=`calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress*multiplier)}))`})),r.forEach(((value,index)=>{let val=data.rotate[index]*Math.abs(progress*multiplier);swiper.browser&&swiper.browser.isSafari&&Math.abs(val)/90%2==1&&(val+=.001),r[index]=val})),slideEl.style.zIndex=-Math.abs(Math.round(slideProgress))+slides.length;const translateString=t.join(", "),rotateString=`rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`,scaleString=originalProgress<0?`scale(${1+(1-data.scale)*originalProgress*multiplier})`:`scale(${1-(1-data.scale)*originalProgress*multiplier})`,opacityString=originalProgress<0?1+(1-data.opacity)*originalProgress*multiplier:1-(1-data.opacity)*originalProgress*multiplier,transform=`translate3d(${translateString}) ${rotateString} ${scaleString}`;if(custom&&data.shadow||!custom){let shadowEl=slideEl.querySelector(".swiper-slide-shadow");if(!shadowEl&&data.shadow&&(shadowEl=createShadow("creative",slideEl)),shadowEl){const shadowOpacity=params.shadowPerProgress?progress*(1/params.limitProgress):progress;shadowEl.style.opacity=Math.min(Math.max(Math.abs(shadowOpacity),0),1)}}const targetEl=effectTarget(0,slideEl);targetEl.style.transform=transform,targetEl.style.opacity=opacityString,data.origin&&(targetEl.style.transformOrigin=data.origin)}},setTransition:duration=>{const transformElements=swiper.slides.map((slideEl=>getSlideTransformEl(slideEl)));transformElements.forEach((el=>{el.style.transitionDuration=`${duration}ms`,el.querySelectorAll(".swiper-slide-shadow").forEach((shadowEl=>{shadowEl.style.transitionDuration=`${duration}ms`}))})),effectVirtualTransitionEnd({swiper,duration,transformElements,allSlides:!0})},perspective:()=>swiper.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!swiper.params.cssMode})})},function EffectCards(_ref){let{swiper,extendParams,on}=_ref;extendParams({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),effectInit({effect:"cards",swiper,on,setTranslate:()=>{const{slides,activeIndex,rtlTranslate:rtl}=swiper,params=swiper.params.cardsEffect,{startTranslate,isTouched}=swiper.touchEventsData,currentTranslate=rtl?-swiper.translate:swiper.translate;for(let i=0;i<slides.length;i+=1){const slideEl=slides[i],slideProgress=slideEl.progress,progress=Math.min(Math.max(slideProgress,-4),4);let offset=slideEl.swiperSlideOffset;swiper.params.centeredSlides&&!swiper.params.cssMode&&(swiper.wrapperEl.style.transform=`translateX(${swiper.minTranslate()}px)`),swiper.params.centeredSlides&&swiper.params.cssMode&&(offset-=slides[0].swiperSlideOffset);let tX=swiper.params.cssMode?-offset-swiper.translate:-offset,tY=0;const tZ=-100*Math.abs(progress);let scale=1,rotate=-params.perSlideRotate*progress,tXAdd=params.perSlideOffset-.75*Math.abs(progress);const slideIndex=swiper.virtual&&swiper.params.virtual.enabled?swiper.virtual.from+i:i,isSwipeToNext=(slideIndex===activeIndex||slideIndex===activeIndex-1)&&progress>0&&progress<1&&(isTouched||swiper.params.cssMode)&&currentTranslate<startTranslate,isSwipeToPrev=(slideIndex===activeIndex||slideIndex===activeIndex+1)&&progress<0&&progress>-1&&(isTouched||swiper.params.cssMode)&&currentTranslate>startTranslate;if(isSwipeToNext||isSwipeToPrev){const subProgress=(1-Math.abs((Math.abs(progress)-.5)/.5))**.5;rotate+=-28*progress*subProgress,scale+=-.5*subProgress,tXAdd+=96*subProgress,tY=-25*subProgress*Math.abs(progress)+"%"}if(tX=progress<0?`calc(${tX}px ${rtl?"-":"+"} (${tXAdd*Math.abs(progress)}%))`:progress>0?`calc(${tX}px ${rtl?"-":"+"} (-${tXAdd*Math.abs(progress)}%))`:`${tX}px`,!swiper.isHorizontal()){const prevY=tY;tY=tX,tX=prevY}const scaleString=progress<0?""+(1+(1-scale)*progress):""+(1-(1-scale)*progress),transform=`\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate?rtl?-rotate:rotate:0}deg)\n        scale(${scaleString})\n      `;if(params.slideShadows){let shadowEl=slideEl.querySelector(".swiper-slide-shadow");shadowEl||(shadowEl=createShadow("cards",slideEl)),shadowEl&&(shadowEl.style.opacity=Math.min(Math.max((Math.abs(progress)-.5)/.5,0),1))}slideEl.style.zIndex=-Math.abs(Math.round(slideProgress))+slides.length;effectTarget(0,slideEl).style.transform=transform}},setTransition:duration=>{const transformElements=swiper.slides.map((slideEl=>getSlideTransformEl(slideEl)));transformElements.forEach((el=>{el.style.transitionDuration=`${duration}ms`,el.querySelectorAll(".swiper-slide-shadow").forEach((shadowEl=>{shadowEl.style.transitionDuration=`${duration}ms`}))})),effectVirtualTransitionEnd({swiper,duration,transformElements})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!swiper.params.cssMode})})}];Swiper.use(modules);const paramsList=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function update_swiper_isObject(o){return"object"==typeof o&&null!==o&&o.constructor&&"Object"===Object.prototype.toString.call(o).slice(8,-1)&&!o.__swiper__}function update_swiper_extend(target,src){const noExtend=["__proto__","constructor","prototype"];Object.keys(src).filter((key=>noExtend.indexOf(key)<0)).forEach((key=>{void 0===target[key]?target[key]=src[key]:update_swiper_isObject(src[key])&&update_swiper_isObject(target[key])&&Object.keys(src[key]).length>0?src[key].__swiper__?target[key]=src[key]:update_swiper_extend(target[key],src[key]):target[key]=src[key]}))}function attrToProp(attrName){return void 0===attrName&&(attrName=""),attrName.replace(/-[a-z]/g,(l=>l.toUpperCase().replace("-","")))}const formatValue=val=>{if(parseFloat(val)===Number(val))return Number(val);if("true"===val)return!0;if(""===val)return!0;if("false"===val)return!1;if("null"===val)return null;if("undefined"!==val){if("string"==typeof val&&val.includes("{")&&val.includes("}")&&val.includes('"')){let v;try{v=JSON.parse(val)}catch(err){v=val}return v}return val}},modulesParamsList=["a11y","autoplay","controller","cards-effect","coverflow-effect","creative-effect","cube-effect","fade-effect","flip-effect","free-mode","grid","hash-navigation","history","keyboard","mousewheel","navigation","pagination","parallax","scrollbar","thumbs","virtual","zoom"];function getParams(element,propName,propValue){const params={},passedParams={};update_swiper_extend(params,defaults);const localParamsList=[...paramsList,"on"],allowedParams=localParamsList.map((key=>key.replace(/_/,"")));localParamsList.forEach((paramName=>{paramName=paramName.replace("_",""),void 0!==element[paramName]&&(passedParams[paramName]=element[paramName])}));const attrsList=[...element.attributes];return"string"==typeof propName&&void 0!==propValue&&attrsList.push({name:propName,value:update_swiper_isObject(propValue)?{...propValue}:propValue}),attrsList.forEach((attr=>{const moduleParam=modulesParamsList.filter((mParam=>0===attr.name.indexOf(`${mParam}-`)))[0];if(moduleParam){const parentObjName=attrToProp(moduleParam),subObjName=attrToProp(attr.name.split(`${moduleParam}-`)[1]);void 0===passedParams[parentObjName]&&(passedParams[parentObjName]={}),!0===passedParams[parentObjName]&&(passedParams[parentObjName]={enabled:!0}),passedParams[parentObjName][subObjName]=formatValue(attr.value)}else{const name=attrToProp(attr.name);if(!allowedParams.includes(name))return;const value=formatValue(attr.value);passedParams[name]&&modulesParamsList.includes(attr.name)&&!update_swiper_isObject(value)?(passedParams[name].constructor!==Object&&(passedParams[name]={}),passedParams[name].enabled=!!value):passedParams[name]=value}})),update_swiper_extend(params,passedParams),params.navigation?params.navigation={prevEl:".swiper-button-prev",nextEl:".swiper-button-next",...!0!==params.navigation?params.navigation:{}}:!1===params.navigation&&delete params.navigation,params.scrollbar?params.scrollbar={el:".swiper-scrollbar",...!0!==params.scrollbar?params.scrollbar:{}}:!1===params.scrollbar&&delete params.scrollbar,params.pagination?params.pagination={el:".swiper-pagination",...!0!==params.pagination?params.pagination:{}}:!1===params.pagination&&delete params.pagination,{params,passedParams}}const SwiperCSS=":host{--swiper-theme-color:#007aff}:host{position:relative;display:block;margin-left:auto;margin-right:auto;z-index:1}.swiper{width:100%;height:100%;margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1;display:block}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;transition-timing-function:var(--swiper-wrapper-transition-timing-function,initial);box-sizing:content-box}.swiper-android ::slotted(swiper-slide),.swiper-ios ::slotted(swiper-slide),.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-horizontal{touch-action:pan-y}.swiper-vertical{touch-action:pan-x}::slotted(swiper-slide){flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform;display:block}::slotted(.swiper-slide-invisible-blank){visibility:hidden}.swiper-autoheight,.swiper-autoheight ::slotted(swiper-slide){height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-backface-hidden ::slotted(swiper-slide){transform:translateZ(0);-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d{perspective:1200px}.swiper-3d .swiper-cube-shadow,.swiper-3d ::slotted(swiper-slide){transform-style:preserve-3d}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode ::slotted(swiper-slide){scroll-snap-align:start start}.swiper-css-mode.swiper-horizontal>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-css-mode.swiper-vertical>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-css-mode.swiper-free-mode>.swiper-wrapper{scroll-snap-type:none}.swiper-css-mode.swiper-free-mode ::slotted(swiper-slide){scroll-snap-align:none}.swiper-css-mode.swiper-centered>.swiper-wrapper::before{content:'';flex-shrink:0;order:9999}.swiper-css-mode.swiper-centered ::slotted(swiper-slide){scroll-snap-align:center center;scroll-snap-stop:always}.swiper-css-mode.swiper-centered.swiper-horizontal ::slotted(swiper-slide):first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-css-mode.swiper-centered.swiper-vertical ::slotted(swiper-slide):first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-virtual ::slotted(swiper-slide){-webkit-backface-visibility:hidden;transform:translateZ(0)}.swiper-virtual.swiper-css-mode .swiper-wrapper::after{content:'';position:absolute;left:0;top:0;pointer-events:none}.swiper-virtual.swiper-css-mode.swiper-horizontal .swiper-wrapper::after{height:1px;width:var(--swiper-virtual-size)}.swiper-virtual.swiper-css-mode.swiper-vertical .swiper-wrapper::after{width:1px;height:var(--swiper-virtual-size)}:host{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:var(--swiper-navigation-top-offset,50%);width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - (var(--swiper-navigation-size)/ 2));z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next.swiper-button-hidden,.swiper-button-prev.swiper-button-hidden{opacity:0;cursor:auto;pointer-events:none}.swiper-navigation-disabled .swiper-button-next,.swiper-navigation-disabled .swiper-button-prev{display:none!important}.swiper-button-next svg,.swiper-button-prev svg{width:100%;height:100%;object-fit:contain;transform-origin:center}.swiper-rtl .swiper-button-next svg,.swiper-rtl .swiper-button-prev svg{transform:rotate(180deg)}.swiper-button-prev,.swiper-rtl .swiper-button-next{left:var(--swiper-navigation-sides-offset,10px);right:auto}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:var(--swiper-navigation-sides-offset,10px);left:auto}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none!important}.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:var(--swiper-pagination-bottom,8px);top:var(--swiper-pagination-top,auto);left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width,var(--swiper-pagination-bullet-size,8px));height:var(--swiper-pagination-bullet-height,var(--swiper-pagination-bullet-size,8px));display:inline-block;border-radius:var(--swiper-pagination-bullet-border-radius,50%);background:var(--swiper-pagination-bullet-inactive-color,#000);opacity:var(--swiper-pagination-bullet-inactive-opacity, .2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none!important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-pagination-vertical.swiper-pagination-bullets,.swiper-vertical>.swiper-pagination-bullets{right:var(--swiper-pagination-right,8px);left:var(--swiper-pagination-left,auto);top:50%;transform:translate3d(0px,-50%,0)}.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap,6px) 0;display:block}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap,4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-fraction{color:var(--swiper-pagination-fraction-color,inherit)}.swiper-pagination-progressbar{background:var(--swiper-pagination-progressbar-bg-color,rgba(0,0,0,.25));position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:var(--swiper-pagination-progressbar-size,4px);left:0;top:0}.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-vertical>.swiper-pagination-progressbar{width:var(--swiper-pagination-progressbar-size,4px);height:100%;left:0;top:0}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:var(--swiper-scrollbar-border-radius,10px);position:relative;touch-action:none;background:var(--swiper-scrollbar-bg-color,rgba(0,0,0,.1))}.swiper-scrollbar-disabled>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-disabled{display:none!important}.swiper-horizontal>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-horizontal{position:absolute;left:var(--swiper-scrollbar-sides-offset,1%);bottom:var(--swiper-scrollbar-bottom,4px);top:var(--swiper-scrollbar-top,auto);z-index:50;height:var(--swiper-scrollbar-size,4px);width:calc(100% - 2 * var(--swiper-scrollbar-sides-offset,1%))}.swiper-scrollbar.swiper-scrollbar-vertical,.swiper-vertical>.swiper-scrollbar{position:absolute;left:var(--swiper-scrollbar-left,auto);right:var(--swiper-scrollbar-right,4px);top:var(--swiper-scrollbar-sides-offset,1%);z-index:50;width:var(--swiper-scrollbar-size,4px);height:calc(100% - 2 * var(--swiper-scrollbar-sides-offset,1%))}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:var(--swiper-scrollbar-drag-bg-color,rgba(0,0,0,.5));border-radius:var(--swiper-scrollbar-border-radius,10px);left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}::slotted(.swiper-slide-zoomed){cursor:move;touch-action:none}.swiper .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-grid>.swiper-wrapper{flex-wrap:wrap}.swiper-grid-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-fade.swiper-free-mode ::slotted(swiper-slide){transition-timing-function:ease-out}.swiper-fade ::slotted(swiper-slide){pointer-events:none;transition-property:opacity}.swiper-fade ::slotted(swiper-slide) ::slotted(swiper-slide){pointer-events:none}.swiper-fade ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-fade ::slotted(.swiper-slide-active) ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-cube{overflow:visible}.swiper-cube ::slotted(swiper-slide){pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-cube ::slotted(swiper-slide) ::slotted(swiper-slide){pointer-events:none}.swiper-cube.swiper-rtl ::slotted(swiper-slide){transform-origin:100% 0}.swiper-cube ::slotted(.swiper-slide-active),.swiper-cube ::slotted(.swiper-slide-active) ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-cube ::slotted(.swiper-slide-active),.swiper-cube ::slotted(.swiper-slide-next),.swiper-cube ::slotted(.swiper-slide-prev){pointer-events:auto;visibility:visible}.swiper-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;opacity:.6;z-index:0}.swiper-cube .swiper-cube-shadow:before{content:'';background:#000;position:absolute;left:0;top:0;bottom:0;right:0;filter:blur(50px)}.swiper-cube ::slotted(.swiper-slide-next)+::slotted(swiper-slide){pointer-events:auto;visibility:visible}.swiper-flip{overflow:visible}.swiper-flip ::slotted(swiper-slide){pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-flip ::slotted(swiper-slide) ::slotted(swiper-slide){pointer-events:none}.swiper-flip ::slotted(.swiper-slide-active),.swiper-flip ::slotted(.swiper-slide-active) ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-creative ::slotted(swiper-slide){-webkit-backface-visibility:hidden;backface-visibility:hidden;overflow:hidden;transition-property:transform,opacity,height}.swiper-cards{overflow:visible}.swiper-cards ::slotted(swiper-slide){transform-origin:center bottom;-webkit-backface-visibility:hidden;backface-visibility:hidden;overflow:hidden}";const ClassToExtend="undefined"==typeof window||"undefined"==typeof HTMLElement?class DummyHTMLElement{}:HTMLElement,arrowSvg='<svg width="11" height="20" viewBox="0 0 11 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z" fill="currentColor"/></svg>\n    ',addStyle=(shadowRoot,styles)=>{if("undefined"!=typeof CSSStyleSheet&&shadowRoot.adoptedStyleSheets){const styleSheet=new CSSStyleSheet;styleSheet.replaceSync(styles),shadowRoot.adoptedStyleSheets=[styleSheet]}else{const style=document.createElement("style");style.rel="stylesheet",style.textContent=styles,shadowRoot.appendChild(style)}};class SwiperContainer extends ClassToExtend{constructor(){super(),this.attachShadow({mode:"open"})}static get nextButtonSvg(){return arrowSvg}static get prevButtonSvg(){return arrowSvg.replace("/></svg>",' transform-origin="center" transform="rotate(180)"/></svg>')}cssStyles(){return[SwiperCSS,...this.injectStyles&&Array.isArray(this.injectStyles)?this.injectStyles:[]].join("\n")}cssLinks(){return this.injectStylesUrls||[]}calcSlideSlots(){const currentSideSlots=this.slideSlots||0,slideSlotChildren=[...this.querySelectorAll("[slot^=slide-]")].map((child=>parseInt(child.getAttribute("slot").split("slide-")[1],10)));if(this.slideSlots=slideSlotChildren.length?Math.max(...slideSlotChildren)+1:0,this.rendered)if(this.slideSlots>currentSideSlots)for(let i=currentSideSlots;i<this.slideSlots;i+=1){const slideEl=document.createElement("swiper-slide");slideEl.setAttribute("part",`slide slide-${i+1}`);const slotEl=document.createElement("slot");slotEl.setAttribute("name",`slide-${i+1}`),slideEl.appendChild(slotEl),this.shadowRoot.querySelector(".swiper-wrapper").appendChild(slideEl)}else if(this.slideSlots<currentSideSlots){const slides=this.swiper.slides;for(let i=slides.length-1;i>=0;i-=1)i>this.slideSlots&&slides[i].remove()}}render(){if(this.rendered)return;this.calcSlideSlots();let localStyles=this.cssStyles();this.slideSlots>0&&(localStyles=localStyles.replace(/::slotted\(([a-z-0-9.]*)\)/g,"$1")),localStyles.length&&addStyle(this.shadowRoot,localStyles),this.cssLinks().forEach((url=>{if(this.shadowRoot.querySelector(`link[href="${url}"]`))return;const linkEl=document.createElement("link");linkEl.rel="stylesheet",linkEl.href=url,this.shadowRoot.appendChild(linkEl)}));const el=document.createElement("div");el.classList.add("swiper"),el.part="container",el.innerHTML=`\n      <slot name="container-start"></slot>\n      <div class="swiper-wrapper" part="wrapper">\n        <slot></slot>\n        ${Array.from({length:this.slideSlots}).map(((_,index)=>`\n        <swiper-slide part="slide slide-${index}">\n          <slot name="slide-${index}"></slot>\n        </swiper-slide>\n        `)).join("")}\n      </div>\n      <slot name="container-end"></slot>\n      ${function needsNavigation(params){return void 0===params&&(params={}),params.navigation&&void 0===params.navigation.nextEl&&void 0===params.navigation.prevEl}(this.passedParams)?`\n        <div part="button-prev" class="swiper-button-prev">${this.constructor.prevButtonSvg}</div>\n        <div part="button-next" class="swiper-button-next">${this.constructor.nextButtonSvg}</div>\n      `:""}\n      ${function needsPagination(params){return void 0===params&&(params={}),params.pagination&&void 0===params.pagination.el}(this.passedParams)?'\n        <div part="pagination" class="swiper-pagination"></div>\n      ':""}\n      ${function needsScrollbar(params){return void 0===params&&(params={}),params.scrollbar&&void 0===params.scrollbar.el}(this.passedParams)?'\n        <div part="scrollbar" class="swiper-scrollbar"></div>\n      ':""}\n    `,this.shadowRoot.appendChild(el),this.rendered=!0}initialize(){var _this=this;if(this.initialized)return;this.initialized=!0;const{params:swiperParams,passedParams}=getParams(this);this.swiperParams=swiperParams,this.passedParams=passedParams,delete this.swiperParams.init,this.render(),this.swiper=new Swiper(this.shadowRoot.querySelector(".swiper"),{...swiperParams.virtual?{}:{observer:!0,observeSlideChildren:this.slideSlots>0},...swiperParams,touchEventsTarget:"container",onAny:function(name){"observerUpdate"===name&&_this.calcSlideSlots();const eventName=swiperParams.eventsPrefix?`${swiperParams.eventsPrefix}${name.toLowerCase()}`:name.toLowerCase();for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];const event=new CustomEvent(eventName,{detail:args,bubbles:"hashChange"!==name,cancelable:!0});_this.dispatchEvent(event)}})}connectedCallback(){this.initialized&&this.nested&&this.closest("swiper-slide")&&this.closest("swiper-slide").swiperLoopMoveDOM||!1!==this.init&&"false"!==this.getAttribute("init")&&this.initialize()}disconnectedCallback(){this.nested&&this.closest("swiper-slide")&&this.closest("swiper-slide").swiperLoopMoveDOM||(this.swiper&&this.swiper.destroy&&this.swiper.destroy(),this.initialized=!1)}updateSwiperOnPropChange(propName,propValue){const{params:swiperParams,passedParams}=getParams(this,propName,propValue);this.passedParams=passedParams,this.swiperParams=swiperParams,this.swiper&&this.swiper.params[propName]===propValue||function updateSwiper(_ref){let{swiper,slides,passedParams,changedParams,nextEl,prevEl,scrollbarEl,paginationEl}=_ref;const updateParams=changedParams.filter((key=>"children"!==key&&"direction"!==key&&"wrapperClass"!==key)),{params:currentParams,pagination,navigation,scrollbar,virtual,thumbs}=swiper;let needThumbsInit,needControllerInit,needPaginationInit,needScrollbarInit,needNavigationInit,loopNeedDestroy,loopNeedEnable,loopNeedReloop;changedParams.includes("thumbs")&&passedParams.thumbs&&passedParams.thumbs.swiper&&currentParams.thumbs&&!currentParams.thumbs.swiper&&(needThumbsInit=!0),changedParams.includes("controller")&&passedParams.controller&&passedParams.controller.control&&currentParams.controller&&!currentParams.controller.control&&(needControllerInit=!0),changedParams.includes("pagination")&&passedParams.pagination&&(passedParams.pagination.el||paginationEl)&&(currentParams.pagination||!1===currentParams.pagination)&&pagination&&!pagination.el&&(needPaginationInit=!0),changedParams.includes("scrollbar")&&passedParams.scrollbar&&(passedParams.scrollbar.el||scrollbarEl)&&(currentParams.scrollbar||!1===currentParams.scrollbar)&&scrollbar&&!scrollbar.el&&(needScrollbarInit=!0),changedParams.includes("navigation")&&passedParams.navigation&&(passedParams.navigation.prevEl||prevEl)&&(passedParams.navigation.nextEl||nextEl)&&(currentParams.navigation||!1===currentParams.navigation)&&navigation&&!navigation.prevEl&&!navigation.nextEl&&(needNavigationInit=!0);const destroyModule=mod=>{swiper[mod]&&(swiper[mod].destroy(),"navigation"===mod?(swiper.isElement&&(swiper[mod].prevEl.remove(),swiper[mod].nextEl.remove()),currentParams[mod].prevEl=void 0,currentParams[mod].nextEl=void 0,swiper[mod].prevEl=void 0,swiper[mod].nextEl=void 0):(swiper.isElement&&swiper[mod].el.remove(),currentParams[mod].el=void 0,swiper[mod].el=void 0))};changedParams.includes("loop")&&swiper.isElement&&(currentParams.loop&&!passedParams.loop?loopNeedDestroy=!0:!currentParams.loop&&passedParams.loop?loopNeedEnable=!0:loopNeedReloop=!0),updateParams.forEach((key=>{if(update_swiper_isObject(currentParams[key])&&update_swiper_isObject(passedParams[key]))Object.assign(currentParams[key],passedParams[key]),"navigation"!==key&&"pagination"!==key&&"scrollbar"!==key||!("enabled"in passedParams[key])||passedParams[key].enabled||destroyModule(key);else{const newValue=passedParams[key];!0!==newValue&&!1!==newValue||"navigation"!==key&&"pagination"!==key&&"scrollbar"!==key?currentParams[key]=passedParams[key]:!1===newValue&&destroyModule(key)}})),updateParams.includes("controller")&&!needControllerInit&&swiper.controller&&swiper.controller.control&&currentParams.controller&&currentParams.controller.control&&(swiper.controller.control=currentParams.controller.control),changedParams.includes("children")&&slides&&virtual&&currentParams.virtual.enabled?(virtual.slides=slides,virtual.update(!0)):changedParams.includes("virtual")&&virtual&&currentParams.virtual.enabled&&(slides&&(virtual.slides=slides),virtual.update(!0)),changedParams.includes("children")&&slides&&currentParams.loop&&(loopNeedReloop=!0),needThumbsInit&&thumbs.init()&&thumbs.update(!0);needControllerInit&&(swiper.controller.control=currentParams.controller.control),needPaginationInit&&(!swiper.isElement||paginationEl&&"string"!=typeof paginationEl||(paginationEl=document.createElement("div"),paginationEl.classList.add("swiper-pagination"),paginationEl.part.add("pagination"),swiper.el.appendChild(paginationEl)),paginationEl&&(currentParams.pagination.el=paginationEl),pagination.init(),pagination.render(),pagination.update()),needScrollbarInit&&(!swiper.isElement||scrollbarEl&&"string"!=typeof scrollbarEl||(scrollbarEl=document.createElement("div"),scrollbarEl.classList.add("swiper-scrollbar"),scrollbarEl.part.add("scrollbar"),swiper.el.appendChild(scrollbarEl)),scrollbarEl&&(currentParams.scrollbar.el=scrollbarEl),scrollbar.init(),scrollbar.updateSize(),scrollbar.setTranslate()),needNavigationInit&&(swiper.isElement&&(nextEl&&"string"!=typeof nextEl||(nextEl=document.createElement("div"),nextEl.classList.add("swiper-button-next"),nextEl.innerHTML=swiper.hostEl.constructor.nextButtonSvg,nextEl.part.add("button-next"),swiper.el.appendChild(nextEl)),prevEl&&"string"!=typeof prevEl||(prevEl=document.createElement("div"),prevEl.classList.add("swiper-button-prev"),prevEl.innerHTML=swiper.hostEl.constructor.prevButtonSvg,prevEl.part.add("button-prev"),swiper.el.appendChild(prevEl))),nextEl&&(currentParams.navigation.nextEl=nextEl),prevEl&&(currentParams.navigation.prevEl=prevEl),navigation.init(),navigation.update()),changedParams.includes("allowSlideNext")&&(swiper.allowSlideNext=passedParams.allowSlideNext),changedParams.includes("allowSlidePrev")&&(swiper.allowSlidePrev=passedParams.allowSlidePrev),changedParams.includes("direction")&&swiper.changeDirection(passedParams.direction,!1),(loopNeedDestroy||loopNeedReloop)&&swiper.loopDestroy(),(loopNeedEnable||loopNeedReloop)&&swiper.loopCreate(),swiper.update()}({swiper:this.swiper,passedParams:this.passedParams,changedParams:[attrToProp(propName)],..."navigation"===propName&&passedParams[propName]?{prevEl:".swiper-button-prev",nextEl:".swiper-button-next"}:{},..."pagination"===propName&&passedParams[propName]?{paginationEl:".swiper-pagination"}:{},..."scrollbar"===propName&&passedParams[propName]?{scrollbarEl:".swiper-scrollbar"}:{}})}attributeChangedCallback(attr,prevValue,newValue){this.initialized&&("true"===prevValue&&null===newValue&&(newValue=!1),this.updateSwiperOnPropChange(attr,newValue))}static get observedAttributes(){return paramsList.filter((param=>param.includes("_"))).map((param=>param.replace(/[A-Z]/g,(v=>`-${v}`)).replace("_","").toLowerCase()))}}paramsList.forEach((paramName=>{"init"!==paramName&&(paramName=paramName.replace("_",""),Object.defineProperty(SwiperContainer.prototype,paramName,{configurable:!0,get(){return(this.passedParams||{})[paramName]},set(value){this.passedParams||(this.passedParams={}),this.passedParams[paramName]=value,this.initialized&&this.updateSwiperOnPropChange(paramName,value)}}))}));class SwiperSlide extends ClassToExtend{constructor(){super(),this.attachShadow({mode:"open"})}render(){const lazy=this.lazy||""===this.getAttribute("lazy")||"true"===this.getAttribute("lazy");if(addStyle(this.shadowRoot,"::slotted(.swiper-slide-shadow),::slotted(.swiper-slide-shadow-bottom),::slotted(.swiper-slide-shadow-left),::slotted(.swiper-slide-shadow-right),::slotted(.swiper-slide-shadow-top){position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}::slotted(.swiper-slide-shadow){background:rgba(0,0,0,.15)}::slotted(.swiper-slide-shadow-left){background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}::slotted(.swiper-slide-shadow-right){background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}::slotted(.swiper-slide-shadow-top){background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}::slotted(.swiper-slide-shadow-bottom){background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-lazy-preloader{animation:swiper-preloader-spin 1s infinite linear;width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}@keyframes swiper-preloader-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-bottom),::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-left),::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-right),::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-top){z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-bottom),::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-left),::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-right),::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-top){z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}::slotted(.swiper-zoom-container){width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}::slotted(.swiper-zoom-container)>canvas,::slotted(.swiper-zoom-container)>img,::slotted(.swiper-zoom-container)>svg{max-width:100%;max-height:100%;object-fit:contain}"),this.shadowRoot.appendChild(document.createElement("slot")),lazy){const lazyDiv=document.createElement("div");lazyDiv.classList.add("swiper-lazy-preloader"),lazyDiv.part.add("preloader"),this.shadowRoot.appendChild(lazyDiv)}}initialize(){this.render()}connectedCallback(){this.initialize()}}const register=()=>{"undefined"!=typeof window&&(window.customElements.get("swiper-container")||window.customElements.define("swiper-container",SwiperContainer),window.customElements.get("swiper-slide")||window.customElements.define("swiper-slide",SwiperSlide))};"undefined"!=typeof window&&(window.SwiperElementRegisterParams=params=>{paramsList.push(...params)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,