/*! For license information please see templates-manageStudents-Table-UsStateColumn-BulkSetModal-index-story.ab2004d1.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9082],{"./src/templates/SafeMarkdown.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _redactableMarkdown=_interopRequireDefault(__webpack_require__("./node_modules/@code-dot-org/redactable-markdown/dist/main.js")),_remarkPlugins=__webpack_require__("./node_modules/@code-dot-org/remark-plugins/src/index.js"),_github=_interopRequireDefault(__webpack_require__("./node_modules/hast-util-sanitize/lib/github.json")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_rehypeRaw=_interopRequireDefault(__webpack_require__("./node_modules/rehype-raw/index.js")),_rehypeReact=_interopRequireDefault(__webpack_require__("./node_modules/rehype-react/index.js")),_rehypeSanitize=_interopRequireDefault(__webpack_require__("./node_modules/rehype-sanitize/index.js")),_remarkRehype=_interopRequireDefault(__webpack_require__("./node_modules/remark-rehype/index.js")),_unified=_interopRequireDefault(__webpack_require__("./node_modules/unified/index.js")),_externalLinks=_interopRequireDefault(__webpack_require__("./src/templates/plugins/externalLinks.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var SafeMarkdown=function(_React$Component){function SafeMarkdown(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SafeMarkdown,_React$Component),SafeMarkdown.prototype.render=function render(){var processor=this.props.openExternalLinksInNewTab?markdownToReactExternalLinks:markdownToReact,rendered=Object(processor.processSync(this.props.markdown).result),markdownProps={};return this.props.className&&(markdownProps.className=this.props.className),rendered&&"div"===rendered.type&&!Object.keys(markdownProps).length?rendered:_react.default.createElement("div",markdownProps,rendered)},SafeMarkdown}(_react.default.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SafeMarkdown,"propTypes",{markdown:_propTypes.default.string.isRequired,openExternalLinksInNewTab:_propTypes.default.bool,className:_propTypes.default.string});var schema=Object.assign({},_github.default);schema.attributes.img.push("height","width"),schema.tagNames.push("span"),schema.attributes.span=["dataUrl","className"],schema.attributes["*"].push("style","className"),schema.attributes.b=["dataId"],schema.clobber=[];var blocklyTags=["block","functional_input","mutation","next","statement","title","field","value","xml"];schema.tagNames=schema.tagNames.concat(blocklyTags);var blocklyComponentWrappers={};blocklyTags.forEach((function(tag){schema.attributes[tag]=["block_text","id","inline","name","type"],blocklyComponentWrappers[tag]=function(props){var BlocklyElement=tag;return _react.default.createElement(BlocklyElement,_extends({is:tag},props))}}));var markdownToReact=(0,_unified.default)().use(_redactableMarkdown.default.getParser()).use([_remarkPlugins.clickableText,_remarkPlugins.expandableImages,_remarkPlugins.visualCodeBlock,_remarkPlugins.xmlAsTopLevelBlock,_remarkPlugins.details]).use(_remarkRehype.default,{allowDangerousHtml:!0}).use(_rehypeRaw.default).use(_rehypeSanitize.default,schema).use(_rehypeReact.default,{createElement:_react.default.createElement,components:blocklyComponentWrappers}),markdownToReactExternalLinks=markdownToReact().use(_externalLinks.default,{links:"all"});exports.default=SafeMarkdown;module.exports=exports.default},"./src/templates/plugins/externalLinks.js":(__unused_webpack_module,exports)=>{"use strict";function isExternalLink(url){return!/https?:\/\/([^.]+\.)*code.org(:[0-9]+)?\//.test(function fullyQualified(path){return(a=a||document.createElement("a")).href=path,a.href}(url))}var a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function externalLinks(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},tokenizers=this.Parser.prototype.inlineTokenizers,original=tokenizers.link,all="all"===options.links;tokenizers.link=function(eat,value,silent){var link=original.call(this,eat,value,silent);if(link&&"link"===link.type&&(all||isExternalLink(link.url))){link.data=link.data||{},link.data.hProperties=link.data.hProperties||{};var props=link.data.hProperties;props.target=props.target||"_blank",props.rel="noreferrer noopener"}return link},tokenizers.link.locator=original.locator},exports.isExternalLink=isExternalLink},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./src/templates/manageStudents/Table/UsStateColumn/BulkSetModal/index.story.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.WithTeacherUSState=exports.Default=void 0;var addon_actions_1=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js"),react_1=__importDefault(__webpack_require__("./node_modules/react/index.js")),currentUserRedux_1=__importDefault(__webpack_require__("./src/templates/currentUserRedux.js")),teacherSectionsRedux_1=__importDefault(__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.ts")),sharedConstants_1=__webpack_require__("./generated-scripts/sharedConstants.ts"),decorators_1=__webpack_require__("./.storybook/decorators.js"),index_1=__importDefault(__webpack_require__("./src/templates/manageStudents/Table/UsStateColumn/BulkSetModal/index.tsx")),reducers={currentUser:currentUserRedux_1.default,teacherSections:teacherSectionsRedux_1.default},initialState={currentUser:{usStateCode:null},teacherSections:{selectedSectionId:99,sections:{99:{id:99,loginType:sharedConstants_1.SectionLoginType.email}}}};exports.default={title:"ManageStudents/ManageStudentsTable/UsStateColumn/BulkUpdateModal",component:index_1.default,decorators:[decorators_1.reduxStoreDecorator.bind({reducers,initialState})]};var Template=function(args){return react_1.default.createElement(index_1.default,__assign({isOpen:!0},args,{onClose:(0,addon_actions_1.action)("onClose")}))};exports.Default=Template.bind({}),exports.WithTeacherUSState=Template.bind({}),exports.WithTeacherUSState.parameters={store:{currentUser:{usStateCode:"CO"}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,