(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9657],{"./test/unit/templates/lessonOverview/sampleStandardsData.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.cstaStandards=exports.cspStandards=void 0;exports.cspStandards=[{frameworkName:"CSP Conceptual Framework",parentCategoryShortcode:"DAT-1",parentCategoryDescription:"The way that the computer represents data is different from the way that the data are interpreted and displayed for the user. Programs are used to translate data into a representation that is more easily understood by people.",categoryShortcode:"DAT-1.A",categoryDescription:"Explain how data can be represented using bits.",shortcode:"DAT-1.A.2",description:"Computing devices represent data digitally, meaning that the lowest-level components of any value are bits."},{frameworkName:"CSP Conceptual Framework",parentCategoryShortcode:"DAT-1",parentCategoryDescription:"The way that the computer represents data is different from the way that the data are interpreted and displayed for the user. Programs are used to translate data into a representation that is more easily understood by people.",categoryShortcode:"DAT-1.A",categoryDescription:"Explain how data can be represented using bits.",shortcode:"DAT-1.A.4",description:"A byte is 8 bits. "},{frameworkName:"CSP Conceptual Framework",parentCategoryShortcode:"DAT-1",parentCategoryDescription:"The way that the computer represents data is different from the way that the data are interpreted and displayed for the user. Programs are used to translate data into a representation that is more easily understood by people.",categoryShortcode:"DAT-1.C",categoryDescription:"For binary numbers:\na. Calculate the binary (base 2) equivalent of a positive integer (base 10) and vice versa. \nb. Compare and order binary numbers.",shortcode:"DAT-1.C.1",description:"Number bases, including binary and decimal, are used to represent data."},{frameworkName:"CSP Conceptual Framework",parentCategoryShortcode:"DAT-1",parentCategoryDescription:"The way that the computer represents data is different from the way that the data are interpreted and displayed for the user. Programs are used to translate data into a representation that is more easily understood by people.",categoryShortcode:"DAT-1.C",categoryDescription:"For binary numbers:\na. Calculate the binary (base 2) equivalent of a positive integer (base 10) and vice versa. \nb. Compare and order binary numbers.",shortcode:"DAT-1.C.2",description:"Binary (base 2) uses only combinations of the digits zero and one."}],exports.cstaStandards=[{frameworkName:"CSTA K-12 Computer Science Standards (2017)",parentCategoryShortcode:null,parentCategoryDescription:null,categoryShortcode:"AP",categoryDescription:"Algorithms & Programming",shortcode:"1B-AP-09",description:"Create programs that use variables to store and modify data."},{frameworkName:"CSTA K-12 Computer Science Standards (2017)",parentCategoryShortcode:null,parentCategoryDescription:null,categoryShortcode:"DA",categoryDescription:"Data & Analysis",shortcode:"3A-DA-09",description:"Translate between different bit representations of real-world phenomena, such as characters, numbers, and images."}]},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/templates/lessonOverview/LessonStandards.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithoutParentCategory=exports.WithParentCategory=exports.WithDifferentFrameworks=exports.ExpandAll=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_LessonStandards=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/lessonOverview/LessonStandards.jsx")),_sampleStandardsData=__webpack_require__("./test/unit/templates/lessonOverview/sampleStandardsData.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}exports.default={component:_LessonStandards.default},exports.WithParentCategory=function WithParentCategory(){return _react.default.createElement(_LessonStandards.default,{standards:[_sampleStandardsData.cspStandards[0]]})},exports.WithoutParentCategory=function WithoutParentCategory(){return _react.default.createElement(_LessonStandards.default,{standards:[_sampleStandardsData.cstaStandards[0]]})},exports.WithDifferentFrameworks=function WithDifferentFrameworks(){return _react.default.createElement(_LessonStandards.default,{standards:_sampleStandardsData.cspStandards.concat(_sampleStandardsData.cstaStandards)})},exports.ExpandAll=function ExpandAll(){return _react.default.createElement(_LessonStandards.default,{standards:_sampleStandardsData.cspStandards.concat(_sampleStandardsData.cstaStandards),expandMode:_LessonStandards.ExpandMode.ALL})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,