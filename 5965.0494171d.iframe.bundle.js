(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5965],{"./node_modules/react-motion/lib/Motion.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _mapToZero2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mapToZero.js")),_stripStyle2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stripStyle.js")),_stepper4=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stepper.js")),_performanceNow2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/performance-now/lib/performance-now.js")),_raf2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/raf/index.js")),_shouldStopAnimation2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/shouldStopAnimation.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),msPerFrame=1e3/60,Motion=function(_React$Component){function Motion(props){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Motion),_React$Component.call(this,props),this.wasAnimating=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyle=null,this.clearUnreadPropStyle=function(destStyle){var dirty=!1,_state=_this.state,currentStyle=_state.currentStyle,currentVelocity=_state.currentVelocity,lastIdealStyle=_state.lastIdealStyle,lastIdealVelocity=_state.lastIdealVelocity;for(var key in destStyle)if(Object.prototype.hasOwnProperty.call(destStyle,key)){var styleValue=destStyle[key];"number"==typeof styleValue&&(dirty||(dirty=!0,currentStyle=_extends({},currentStyle),currentVelocity=_extends({},currentVelocity),lastIdealStyle=_extends({},lastIdealStyle),lastIdealVelocity=_extends({},lastIdealVelocity)),currentStyle[key]=styleValue,currentVelocity[key]=0,lastIdealStyle[key]=styleValue,lastIdealVelocity[key]=0)}dirty&&_this.setState({currentStyle,currentVelocity,lastIdealStyle,lastIdealVelocity})},this.startAnimationIfNecessary=function(){_this.animationID=_raf2.default((function(timestamp){var propsStyle=_this.props.style;if(_shouldStopAnimation2.default(_this.state.currentStyle,propsStyle,_this.state.currentVelocity))return _this.wasAnimating&&_this.props.onRest&&_this.props.onRest(),_this.animationID=null,_this.wasAnimating=!1,void(_this.accumulatedTime=0);_this.wasAnimating=!0;var currentTime=timestamp||_performanceNow2.default(),timeDelta=currentTime-_this.prevTime;if(_this.prevTime=currentTime,_this.accumulatedTime=_this.accumulatedTime+timeDelta,_this.accumulatedTime>10*msPerFrame&&(_this.accumulatedTime=0),0===_this.accumulatedTime)return _this.animationID=null,void _this.startAnimationIfNecessary();var currentFrameCompletion=(_this.accumulatedTime-Math.floor(_this.accumulatedTime/msPerFrame)*msPerFrame)/msPerFrame,framesToCatchUp=Math.floor(_this.accumulatedTime/msPerFrame),newLastIdealStyle={},newLastIdealVelocity={},newCurrentStyle={},newCurrentVelocity={};for(var key in propsStyle)if(Object.prototype.hasOwnProperty.call(propsStyle,key)){var styleValue=propsStyle[key];if("number"==typeof styleValue)newCurrentStyle[key]=styleValue,newCurrentVelocity[key]=0,newLastIdealStyle[key]=styleValue,newLastIdealVelocity[key]=0;else{for(var newLastIdealStyleValue=_this.state.lastIdealStyle[key],newLastIdealVelocityValue=_this.state.lastIdealVelocity[key],i=0;i<framesToCatchUp;i++){var _stepper=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision);newLastIdealStyleValue=_stepper[0],newLastIdealVelocityValue=_stepper[1]}var _stepper2=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision),nextIdealX=_stepper2[0],nextIdealV=_stepper2[1];newCurrentStyle[key]=newLastIdealStyleValue+(nextIdealX-newLastIdealStyleValue)*currentFrameCompletion,newCurrentVelocity[key]=newLastIdealVelocityValue+(nextIdealV-newLastIdealVelocityValue)*currentFrameCompletion,newLastIdealStyle[key]=newLastIdealStyleValue,newLastIdealVelocity[key]=newLastIdealVelocityValue}}_this.animationID=null,_this.accumulatedTime-=framesToCatchUp*msPerFrame,_this.setState({currentStyle:newCurrentStyle,currentVelocity:newCurrentVelocity,lastIdealStyle:newLastIdealStyle,lastIdealVelocity:newLastIdealVelocity}),_this.unreadPropStyle=null,_this.startAnimationIfNecessary()}))},this.state=this.defaultState()}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Motion,_React$Component),_createClass(Motion,null,[{key:"propTypes",value:{defaultStyle:_propTypes2.default.objectOf(_propTypes2.default.number),style:_propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.number,_propTypes2.default.object])).isRequired,children:_propTypes2.default.func.isRequired,onRest:_propTypes2.default.func},enumerable:!0}]),Motion.prototype.defaultState=function defaultState(){var _props=this.props,defaultStyle=_props.defaultStyle,style=_props.style,currentStyle=defaultStyle||_stripStyle2.default(style),currentVelocity=_mapToZero2.default(currentStyle);return{currentStyle,currentVelocity,lastIdealStyle:currentStyle,lastIdealVelocity:currentVelocity}},Motion.prototype.componentDidMount=function componentDidMount(){this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary()},Motion.prototype.componentWillReceiveProps=function componentWillReceiveProps(props){null!=this.unreadPropStyle&&this.clearUnreadPropStyle(this.unreadPropStyle),this.unreadPropStyle=props.style,null==this.animationID&&(this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary())},Motion.prototype.componentWillUnmount=function componentWillUnmount(){null!=this.animationID&&(_raf2.default.cancel(this.animationID),this.animationID=null)},Motion.prototype.render=function render(){var renderedChildren=this.props.children(this.state.currentStyle);return renderedChildren&&_react2.default.Children.only(renderedChildren)},Motion}(_react2.default.Component);exports.default=Motion,module.exports=exports.default},"./node_modules/react-motion/lib/StaggeredMotion.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _mapToZero2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mapToZero.js")),_stripStyle2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stripStyle.js")),_stepper4=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stepper.js")),_performanceNow2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/performance-now/lib/performance-now.js")),_raf2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/raf/index.js")),_shouldStopAnimation2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/shouldStopAnimation.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),msPerFrame=1e3/60;var StaggeredMotion=function(_React$Component){function StaggeredMotion(props){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,StaggeredMotion),_React$Component.call(this,props),this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(unreadPropStyles){for(var _state=_this.state,currentStyles=_state.currentStyles,currentVelocities=_state.currentVelocities,lastIdealStyles=_state.lastIdealStyles,lastIdealVelocities=_state.lastIdealVelocities,someDirty=!1,i=0;i<unreadPropStyles.length;i++){var unreadPropStyle=unreadPropStyles[i],dirty=!1;for(var key in unreadPropStyle)if(Object.prototype.hasOwnProperty.call(unreadPropStyle,key)){var styleValue=unreadPropStyle[key];"number"==typeof styleValue&&(dirty||(dirty=!0,someDirty=!0,currentStyles[i]=_extends({},currentStyles[i]),currentVelocities[i]=_extends({},currentVelocities[i]),lastIdealStyles[i]=_extends({},lastIdealStyles[i]),lastIdealVelocities[i]=_extends({},lastIdealVelocities[i])),currentStyles[i][key]=styleValue,currentVelocities[i][key]=0,lastIdealStyles[i][key]=styleValue,lastIdealVelocities[i][key]=0)}}someDirty&&_this.setState({currentStyles,currentVelocities,lastIdealStyles,lastIdealVelocities})},this.startAnimationIfNecessary=function(){_this.animationID=_raf2.default((function(timestamp){var destStyles=_this.props.styles(_this.state.lastIdealStyles);if(function shouldStopAnimationAll(currentStyles,styles,currentVelocities){for(var i=0;i<currentStyles.length;i++)if(!_shouldStopAnimation2.default(currentStyles[i],styles[i],currentVelocities[i]))return!1;return!0}(_this.state.currentStyles,destStyles,_this.state.currentVelocities))return _this.animationID=null,void(_this.accumulatedTime=0);var currentTime=timestamp||_performanceNow2.default(),timeDelta=currentTime-_this.prevTime;if(_this.prevTime=currentTime,_this.accumulatedTime=_this.accumulatedTime+timeDelta,_this.accumulatedTime>10*msPerFrame&&(_this.accumulatedTime=0),0===_this.accumulatedTime)return _this.animationID=null,void _this.startAnimationIfNecessary();for(var currentFrameCompletion=(_this.accumulatedTime-Math.floor(_this.accumulatedTime/msPerFrame)*msPerFrame)/msPerFrame,framesToCatchUp=Math.floor(_this.accumulatedTime/msPerFrame),newLastIdealStyles=[],newLastIdealVelocities=[],newCurrentStyles=[],newCurrentVelocities=[],i=0;i<destStyles.length;i++){var destStyle=destStyles[i],newCurrentStyle={},newCurrentVelocity={},newLastIdealStyle={},newLastIdealVelocity={};for(var key in destStyle)if(Object.prototype.hasOwnProperty.call(destStyle,key)){var styleValue=destStyle[key];if("number"==typeof styleValue)newCurrentStyle[key]=styleValue,newCurrentVelocity[key]=0,newLastIdealStyle[key]=styleValue,newLastIdealVelocity[key]=0;else{for(var newLastIdealStyleValue=_this.state.lastIdealStyles[i][key],newLastIdealVelocityValue=_this.state.lastIdealVelocities[i][key],j=0;j<framesToCatchUp;j++){var _stepper=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision);newLastIdealStyleValue=_stepper[0],newLastIdealVelocityValue=_stepper[1]}var _stepper2=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision),nextIdealX=_stepper2[0],nextIdealV=_stepper2[1];newCurrentStyle[key]=newLastIdealStyleValue+(nextIdealX-newLastIdealStyleValue)*currentFrameCompletion,newCurrentVelocity[key]=newLastIdealVelocityValue+(nextIdealV-newLastIdealVelocityValue)*currentFrameCompletion,newLastIdealStyle[key]=newLastIdealStyleValue,newLastIdealVelocity[key]=newLastIdealVelocityValue}}newCurrentStyles[i]=newCurrentStyle,newCurrentVelocities[i]=newCurrentVelocity,newLastIdealStyles[i]=newLastIdealStyle,newLastIdealVelocities[i]=newLastIdealVelocity}_this.animationID=null,_this.accumulatedTime-=framesToCatchUp*msPerFrame,_this.setState({currentStyles:newCurrentStyles,currentVelocities:newCurrentVelocities,lastIdealStyles:newLastIdealStyles,lastIdealVelocities:newLastIdealVelocities}),_this.unreadPropStyles=null,_this.startAnimationIfNecessary()}))},this.state=this.defaultState()}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(StaggeredMotion,_React$Component),_createClass(StaggeredMotion,null,[{key:"propTypes",value:{defaultStyles:_propTypes2.default.arrayOf(_propTypes2.default.objectOf(_propTypes2.default.number)),styles:_propTypes2.default.func.isRequired,children:_propTypes2.default.func.isRequired},enumerable:!0}]),StaggeredMotion.prototype.defaultState=function defaultState(){var _props=this.props,defaultStyles=_props.defaultStyles,styles=_props.styles,currentStyles=defaultStyles||styles().map(_stripStyle2.default),currentVelocities=currentStyles.map((function(currentStyle){return _mapToZero2.default(currentStyle)}));return{currentStyles,currentVelocities,lastIdealStyles:currentStyles,lastIdealVelocities:currentVelocities}},StaggeredMotion.prototype.componentDidMount=function componentDidMount(){this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary()},StaggeredMotion.prototype.componentWillReceiveProps=function componentWillReceiveProps(props){null!=this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles),this.unreadPropStyles=props.styles(this.state.lastIdealStyles),null==this.animationID&&(this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary())},StaggeredMotion.prototype.componentWillUnmount=function componentWillUnmount(){null!=this.animationID&&(_raf2.default.cancel(this.animationID),this.animationID=null)},StaggeredMotion.prototype.render=function render(){var renderedChildren=this.props.children(this.state.currentStyles);return renderedChildren&&_react2.default.Children.only(renderedChildren)},StaggeredMotion}(_react2.default.Component);exports.default=StaggeredMotion,module.exports=exports.default},"./node_modules/react-motion/lib/TransitionMotion.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _mapToZero2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mapToZero.js")),_stripStyle2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stripStyle.js")),_stepper4=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stepper.js")),_mergeDiff2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mergeDiff.js")),_performanceNow2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/performance-now/lib/performance-now.js")),_raf2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/raf/index.js")),_shouldStopAnimation2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/shouldStopAnimation.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),msPerFrame=1e3/60;function rehydrateStyles(mergedPropsStyles,unreadPropStyles,plainStyles){var cUnreadPropStyles=unreadPropStyles;return null==cUnreadPropStyles?mergedPropsStyles.map((function(mergedPropsStyle,i){return{key:mergedPropsStyle.key,data:mergedPropsStyle.data,style:plainStyles[i]}})):mergedPropsStyles.map((function(mergedPropsStyle,i){for(var j=0;j<cUnreadPropStyles.length;j++)if(cUnreadPropStyles[j].key===mergedPropsStyle.key)return{key:cUnreadPropStyles[j].key,data:cUnreadPropStyles[j].data,style:plainStyles[i]};return{key:mergedPropsStyle.key,data:mergedPropsStyle.data,style:plainStyles[i]}}))}function mergeAndSync(willEnter,willLeave,didLeave,oldMergedPropsStyles,destStyles,oldCurrentStyles,oldCurrentVelocities,oldLastIdealStyles,oldLastIdealVelocities){for(var newMergedPropsStyles=_mergeDiff2.default(oldMergedPropsStyles,destStyles,(function(oldIndex,oldMergedPropsStyle){var leavingStyle=willLeave(oldMergedPropsStyle);return null==leavingStyle||_shouldStopAnimation2.default(oldCurrentStyles[oldIndex],leavingStyle,oldCurrentVelocities[oldIndex])?(didLeave({key:oldMergedPropsStyle.key,data:oldMergedPropsStyle.data}),null):{key:oldMergedPropsStyle.key,data:oldMergedPropsStyle.data,style:leavingStyle}})),newCurrentStyles=[],newCurrentVelocities=[],newLastIdealStyles=[],newLastIdealVelocities=[],i=0;i<newMergedPropsStyles.length;i++){for(var newMergedPropsStyleCell=newMergedPropsStyles[i],foundOldIndex=null,j=0;j<oldMergedPropsStyles.length;j++)if(oldMergedPropsStyles[j].key===newMergedPropsStyleCell.key){foundOldIndex=j;break}if(null==foundOldIndex){var plainStyle=willEnter(newMergedPropsStyleCell);newCurrentStyles[i]=plainStyle,newLastIdealStyles[i]=plainStyle;var velocity=_mapToZero2.default(newMergedPropsStyleCell.style);newCurrentVelocities[i]=velocity,newLastIdealVelocities[i]=velocity}else newCurrentStyles[i]=oldCurrentStyles[foundOldIndex],newLastIdealStyles[i]=oldLastIdealStyles[foundOldIndex],newCurrentVelocities[i]=oldCurrentVelocities[foundOldIndex],newLastIdealVelocities[i]=oldLastIdealVelocities[foundOldIndex]}return[newMergedPropsStyles,newCurrentStyles,newCurrentVelocities,newLastIdealStyles,newLastIdealVelocities]}var TransitionMotion=function(_React$Component){function TransitionMotion(props){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,TransitionMotion),_React$Component.call(this,props),this.unmounting=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(unreadPropStyles){for(var _mergeAndSync=mergeAndSync(_this.props.willEnter,_this.props.willLeave,_this.props.didLeave,_this.state.mergedPropsStyles,unreadPropStyles,_this.state.currentStyles,_this.state.currentVelocities,_this.state.lastIdealStyles,_this.state.lastIdealVelocities),mergedPropsStyles=_mergeAndSync[0],currentStyles=_mergeAndSync[1],currentVelocities=_mergeAndSync[2],lastIdealStyles=_mergeAndSync[3],lastIdealVelocities=_mergeAndSync[4],i=0;i<unreadPropStyles.length;i++){var unreadPropStyle=unreadPropStyles[i].style,dirty=!1;for(var key in unreadPropStyle)if(Object.prototype.hasOwnProperty.call(unreadPropStyle,key)){var styleValue=unreadPropStyle[key];"number"==typeof styleValue&&(dirty||(dirty=!0,currentStyles[i]=_extends({},currentStyles[i]),currentVelocities[i]=_extends({},currentVelocities[i]),lastIdealStyles[i]=_extends({},lastIdealStyles[i]),lastIdealVelocities[i]=_extends({},lastIdealVelocities[i]),mergedPropsStyles[i]={key:mergedPropsStyles[i].key,data:mergedPropsStyles[i].data,style:_extends({},mergedPropsStyles[i].style)}),currentStyles[i][key]=styleValue,currentVelocities[i][key]=0,lastIdealStyles[i][key]=styleValue,lastIdealVelocities[i][key]=0,mergedPropsStyles[i].style[key]=styleValue)}}_this.setState({currentStyles,currentVelocities,mergedPropsStyles,lastIdealStyles,lastIdealVelocities})},this.startAnimationIfNecessary=function(){_this.unmounting||(_this.animationID=_raf2.default((function(timestamp){if(!_this.unmounting){var propStyles=_this.props.styles,destStyles="function"==typeof propStyles?propStyles(rehydrateStyles(_this.state.mergedPropsStyles,_this.unreadPropStyles,_this.state.lastIdealStyles)):propStyles;if(function shouldStopAnimationAll(currentStyles,destStyles,currentVelocities,mergedPropsStyles){if(mergedPropsStyles.length!==destStyles.length)return!1;for(var i=0;i<mergedPropsStyles.length;i++)if(mergedPropsStyles[i].key!==destStyles[i].key)return!1;for(i=0;i<mergedPropsStyles.length;i++)if(!_shouldStopAnimation2.default(currentStyles[i],destStyles[i].style,currentVelocities[i]))return!1;return!0}(_this.state.currentStyles,destStyles,_this.state.currentVelocities,_this.state.mergedPropsStyles))return _this.animationID=null,void(_this.accumulatedTime=0);var currentTime=timestamp||_performanceNow2.default(),timeDelta=currentTime-_this.prevTime;if(_this.prevTime=currentTime,_this.accumulatedTime=_this.accumulatedTime+timeDelta,_this.accumulatedTime>10*msPerFrame&&(_this.accumulatedTime=0),0===_this.accumulatedTime)return _this.animationID=null,void _this.startAnimationIfNecessary();for(var currentFrameCompletion=(_this.accumulatedTime-Math.floor(_this.accumulatedTime/msPerFrame)*msPerFrame)/msPerFrame,framesToCatchUp=Math.floor(_this.accumulatedTime/msPerFrame),_mergeAndSync2=mergeAndSync(_this.props.willEnter,_this.props.willLeave,_this.props.didLeave,_this.state.mergedPropsStyles,destStyles,_this.state.currentStyles,_this.state.currentVelocities,_this.state.lastIdealStyles,_this.state.lastIdealVelocities),newMergedPropsStyles=_mergeAndSync2[0],newCurrentStyles=_mergeAndSync2[1],newCurrentVelocities=_mergeAndSync2[2],newLastIdealStyles=_mergeAndSync2[3],newLastIdealVelocities=_mergeAndSync2[4],i=0;i<newMergedPropsStyles.length;i++){var newMergedPropsStyle=newMergedPropsStyles[i].style,newCurrentStyle={},newCurrentVelocity={},newLastIdealStyle={},newLastIdealVelocity={};for(var key in newMergedPropsStyle)if(Object.prototype.hasOwnProperty.call(newMergedPropsStyle,key)){var styleValue=newMergedPropsStyle[key];if("number"==typeof styleValue)newCurrentStyle[key]=styleValue,newCurrentVelocity[key]=0,newLastIdealStyle[key]=styleValue,newLastIdealVelocity[key]=0;else{for(var newLastIdealStyleValue=newLastIdealStyles[i][key],newLastIdealVelocityValue=newLastIdealVelocities[i][key],j=0;j<framesToCatchUp;j++){var _stepper=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision);newLastIdealStyleValue=_stepper[0],newLastIdealVelocityValue=_stepper[1]}var _stepper2=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision),nextIdealX=_stepper2[0],nextIdealV=_stepper2[1];newCurrentStyle[key]=newLastIdealStyleValue+(nextIdealX-newLastIdealStyleValue)*currentFrameCompletion,newCurrentVelocity[key]=newLastIdealVelocityValue+(nextIdealV-newLastIdealVelocityValue)*currentFrameCompletion,newLastIdealStyle[key]=newLastIdealStyleValue,newLastIdealVelocity[key]=newLastIdealVelocityValue}}newLastIdealStyles[i]=newLastIdealStyle,newLastIdealVelocities[i]=newLastIdealVelocity,newCurrentStyles[i]=newCurrentStyle,newCurrentVelocities[i]=newCurrentVelocity}_this.animationID=null,_this.accumulatedTime-=framesToCatchUp*msPerFrame,_this.setState({currentStyles:newCurrentStyles,currentVelocities:newCurrentVelocities,lastIdealStyles:newLastIdealStyles,lastIdealVelocities:newLastIdealVelocities,mergedPropsStyles:newMergedPropsStyles}),_this.unreadPropStyles=null,_this.startAnimationIfNecessary()}})))},this.state=this.defaultState()}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(TransitionMotion,_React$Component),_createClass(TransitionMotion,null,[{key:"propTypes",value:{defaultStyles:_propTypes2.default.arrayOf(_propTypes2.default.shape({key:_propTypes2.default.string.isRequired,data:_propTypes2.default.any,style:_propTypes2.default.objectOf(_propTypes2.default.number).isRequired})),styles:_propTypes2.default.oneOfType([_propTypes2.default.func,_propTypes2.default.arrayOf(_propTypes2.default.shape({key:_propTypes2.default.string.isRequired,data:_propTypes2.default.any,style:_propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.number,_propTypes2.default.object])).isRequired}))]).isRequired,children:_propTypes2.default.func.isRequired,willEnter:_propTypes2.default.func,willLeave:_propTypes2.default.func,didLeave:_propTypes2.default.func},enumerable:!0},{key:"defaultProps",value:{willEnter:function willEnter(styleThatEntered){return _stripStyle2.default(styleThatEntered.style)},willLeave:function willLeave(){return null},didLeave:function didLeave(){}},enumerable:!0}]),TransitionMotion.prototype.defaultState=function defaultState(){var _props=this.props,defaultStyles=_props.defaultStyles,styles=_props.styles,willEnter=_props.willEnter,willLeave=_props.willLeave,didLeave=_props.didLeave,destStyles="function"==typeof styles?styles(defaultStyles):styles,oldMergedPropsStyles=void 0;oldMergedPropsStyles=null==defaultStyles?destStyles:defaultStyles.map((function(defaultStyleCell){for(var i=0;i<destStyles.length;i++)if(destStyles[i].key===defaultStyleCell.key)return destStyles[i];return defaultStyleCell}));var oldCurrentStyles=null==defaultStyles?destStyles.map((function(s){return _stripStyle2.default(s.style)})):defaultStyles.map((function(s){return _stripStyle2.default(s.style)})),oldCurrentVelocities=null==defaultStyles?destStyles.map((function(s){return _mapToZero2.default(s.style)})):defaultStyles.map((function(s){return _mapToZero2.default(s.style)})),_mergeAndSync3=mergeAndSync(willEnter,willLeave,didLeave,oldMergedPropsStyles,destStyles,oldCurrentStyles,oldCurrentVelocities,oldCurrentStyles,oldCurrentVelocities),mergedPropsStyles=_mergeAndSync3[0];return{currentStyles:_mergeAndSync3[1],currentVelocities:_mergeAndSync3[2],lastIdealStyles:_mergeAndSync3[3],lastIdealVelocities:_mergeAndSync3[4],mergedPropsStyles}},TransitionMotion.prototype.componentDidMount=function componentDidMount(){this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary()},TransitionMotion.prototype.componentWillReceiveProps=function componentWillReceiveProps(props){this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles);var styles=props.styles;this.unreadPropStyles="function"==typeof styles?styles(rehydrateStyles(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.lastIdealStyles)):styles,null==this.animationID&&(this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary())},TransitionMotion.prototype.componentWillUnmount=function componentWillUnmount(){this.unmounting=!0,null!=this.animationID&&(_raf2.default.cancel(this.animationID),this.animationID=null)},TransitionMotion.prototype.render=function render(){var hydratedStyles=rehydrateStyles(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.currentStyles),renderedChildren=this.props.children(hydratedStyles);return renderedChildren&&_react2.default.Children.only(renderedChildren)},TransitionMotion}(_react2.default.Component);exports.default=TransitionMotion,module.exports=exports.default},"./node_modules/react-motion/lib/mapToZero.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function mapToZero(obj){var ret={};for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(ret[key]=0);return ret},module.exports=exports.default},"./node_modules/react-motion/lib/mergeDiff.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function mergeDiff(prev,next,onRemove){for(var prevKeyIndex={},i=0;i<prev.length;i++)prevKeyIndex[prev[i].key]=i;var nextKeyIndex={};for(i=0;i<next.length;i++)nextKeyIndex[next[i].key]=i;var ret=[];for(i=0;i<next.length;i++)ret[i]=next[i];for(i=0;i<prev.length;i++)if(!Object.prototype.hasOwnProperty.call(nextKeyIndex,prev[i].key)){var fill=onRemove(i,prev[i]);null!=fill&&ret.push(fill)}return ret.sort((function(a,b){var nextOrderA=nextKeyIndex[a.key],nextOrderB=nextKeyIndex[b.key],prevOrderA=prevKeyIndex[a.key],prevOrderB=prevKeyIndex[b.key];if(null!=nextOrderA&&null!=nextOrderB)return nextKeyIndex[a.key]-nextKeyIndex[b.key];if(null!=prevOrderA&&null!=prevOrderB)return prevKeyIndex[a.key]-prevKeyIndex[b.key];if(null!=nextOrderA){for(var i=0;i<next.length;i++){var pivot=next[i].key;if(Object.prototype.hasOwnProperty.call(prevKeyIndex,pivot)){if(nextOrderA<nextKeyIndex[pivot]&&prevOrderB>prevKeyIndex[pivot])return-1;if(nextOrderA>nextKeyIndex[pivot]&&prevOrderB<prevKeyIndex[pivot])return 1}}return 1}for(i=0;i<next.length;i++){pivot=next[i].key;if(Object.prototype.hasOwnProperty.call(prevKeyIndex,pivot)){if(nextOrderB<nextKeyIndex[pivot]&&prevOrderA>prevKeyIndex[pivot])return 1;if(nextOrderB>nextKeyIndex[pivot]&&prevOrderA<prevKeyIndex[pivot])return-1}}return-1}))},module.exports=exports.default},"./node_modules/react-motion/lib/presets.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default={noWobble:{stiffness:170,damping:26},gentle:{stiffness:120,damping:14},wobbly:{stiffness:180,damping:12},stiff:{stiffness:210,damping:20}},module.exports=exports.default},"./node_modules/react-motion/lib/react-motion.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _interopRequire(obj){return obj&&obj.__esModule?obj.default:obj}exports.__esModule=!0;var _Motion=__webpack_require__("./node_modules/react-motion/lib/Motion.js");exports.Motion=_interopRequire(_Motion);var _StaggeredMotion=__webpack_require__("./node_modules/react-motion/lib/StaggeredMotion.js");exports.StaggeredMotion=_interopRequire(_StaggeredMotion);var _TransitionMotion=__webpack_require__("./node_modules/react-motion/lib/TransitionMotion.js");exports.TransitionMotion=_interopRequire(_TransitionMotion);var _spring=__webpack_require__("./node_modules/react-motion/lib/spring.js");exports.spring=_interopRequire(_spring);var _presets=__webpack_require__("./node_modules/react-motion/lib/presets.js");exports.presets=_interopRequire(_presets);var _stripStyle=__webpack_require__("./node_modules/react-motion/lib/stripStyle.js");exports.stripStyle=_interopRequire(_stripStyle);var _reorderKeys=__webpack_require__("./node_modules/react-motion/lib/reorderKeys.js");exports.reorderKeys=_interopRequire(_reorderKeys)},"./node_modules/react-motion/lib/reorderKeys.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function reorderKeys(){0};module.exports=exports.default},"./node_modules/react-motion/lib/shouldStopAnimation.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function shouldStopAnimation(currentStyle,style,currentVelocity){for(var key in style)if(Object.prototype.hasOwnProperty.call(style,key)){if(0!==currentVelocity[key])return!1;var styleValue="number"==typeof style[key]?style[key]:style[key].val;if(currentStyle[key]!==styleValue)return!1}return!0},module.exports=exports.default},"./node_modules/react-motion/lib/spring.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};exports.default=function spring(val,config){return _extends({},defaultConfig,config,{val})};var _presets2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react-motion/lib/presets.js")),defaultConfig=_extends({},_presets2.default.noWobble,{precision:.01});module.exports=exports.default},"./node_modules/react-motion/lib/stepper.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function stepper(secondPerFrame,x,v,destX,k,b,precision){var newV=v+(-k*(x-destX)+-b*v)*secondPerFrame,newX=x+newV*secondPerFrame;if(Math.abs(newV)<precision&&Math.abs(newX-destX)<precision)return reusedTuple[0]=destX,reusedTuple[1]=0,reusedTuple;return reusedTuple[0]=newX,reusedTuple[1]=newV,reusedTuple};var reusedTuple=[0,0];module.exports=exports.default},"./node_modules/react-motion/lib/stripStyle.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function stripStyle(style){var ret={};for(var key in style)Object.prototype.hasOwnProperty.call(style,key)&&(ret[key]="number"==typeof style[key]?style[key]:style[key].val);return ret},module.exports=exports.default},"./node_modules/react-motion/node_modules/performance-now/lib/performance-now.js":function(module,__unused_webpack_exports,__webpack_require__){var process=__webpack_require__("./node_modules/process/browser.js");(function(){var getNanoSeconds,hrtime,loadTime;"undefined"!=typeof performance&&null!==performance&&performance.now?module.exports=function(){return performance.now()}:null!=process&&process.hrtime?(module.exports=function(){return(getNanoSeconds()-loadTime)/1e6},hrtime=process.hrtime,loadTime=(getNanoSeconds=function(){var hr;return 1e9*(hr=hrtime())[0]+hr[1]})()):Date.now?(module.exports=function(){return Date.now()-loadTime},loadTime=Date.now()):(module.exports=function(){return(new Date).getTime()-loadTime},loadTime=(new Date).getTime())}).call(this)},"./node_modules/react-motion/node_modules/raf/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{for(var now=__webpack_require__("./node_modules/react-motion/node_modules/performance-now/lib/performance-now.js"),root="undefined"==typeof window?__webpack_require__.g:window,vendors=["moz","webkit"],suffix="AnimationFrame",raf=root["request"+suffix],caf=root["cancel"+suffix]||root["cancelRequest"+suffix],i=0;!raf&&i<vendors.length;i++)raf=root[vendors[i]+"Request"+suffix],caf=root[vendors[i]+"Cancel"+suffix]||root[vendors[i]+"CancelRequest"+suffix];if(!raf||!caf){var last=0,id=0,queue=[];raf=function(callback){if(0===queue.length){var _now=now(),next=Math.max(0,16.666666666666668-(_now-last));last=next+_now,setTimeout((function(){var cp=queue.slice(0);queue.length=0;for(var i=0;i<cp.length;i++)if(!cp[i].cancelled)try{cp[i].callback(last)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(next))}return queue.push({handle:++id,callback,cancelled:!1}),id},caf=function(handle){for(var i=0;i<queue.length;i++)queue[i].handle===handle&&(queue[i].cancelled=!0)}}module.exports=function(fn){return raf.call(root,fn)},module.exports.cancel=function(){caf.apply(root,arguments)},module.exports.polyfill=function(){root.requestAnimationFrame=raf,root.cancelAnimationFrame=caf}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,