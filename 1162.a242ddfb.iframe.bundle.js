/*! For license information please see 1162.a242ddfb.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1162],{"./node_modules/@code-dot-org/js-interpreter/acorn.js":function(module,exports){var mod;mod=function(exports){"use strict";var options,input,inputLen,sourceFile;exports.version="0.4.1",exports.parse=function(inpt,opts){return input=String(inpt),inputLen=input.length,setOptions(opts),initTokenState(),function parseTopLevel(program){lastStart=lastEnd=tokPos,options.locations&&(lastEndLoc=new line_loc_t),inFunction=strict=null,labels=[],readToken();var node=program||startNode(),first=!0;for(program||(node.body=[]);tokType!==_eof;){var stmt=parseStatement();node.body.push(stmt),first&&isUseStrict(stmt)&&setStrict(!0),first=!1}return finishNode(node,"Program")}(options.program)};var defaultOptions=exports.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function setOptions(opts){for(var opt in options=opts||{},defaultOptions)Object.prototype.hasOwnProperty.call(options,opt)||(options[opt]=defaultOptions[opt]);sourceFile=options.sourceFile||null}var tokPos,tokStart,tokEnd,tokStartLoc,tokEndLoc,tokType,tokVal,tokRegexpAllowed,tokCurLine,tokLineStart,lastStart,lastEnd,lastEndLoc,inFunction,labels,strict,getLineInfo=exports.getLineInfo=function(input,offset){for(var line=1,cur=0;;){lineBreak.lastIndex=cur;var match=lineBreak.exec(input);if(!(match&&match.index<offset))break;++line,cur=match.index+match[0].length}return{line,column:offset-cur}};function raise(pos,message){var loc=getLineInfo(input,pos);message+=" ("+loc.line+":"+loc.column+")";var err=new SyntaxError(message);throw err.pos=pos,err.loc=loc,err.raisedAt=tokPos,err}exports.tokenize=function(inpt,opts){input=String(inpt),inputLen=input.length,setOptions(opts),initTokenState();var t={};function getToken(forceRegexp){return readToken(forceRegexp),t.start=tokStart,t.end=tokEnd,t.startLoc=tokStartLoc,t.endLoc=tokEndLoc,t.type=tokType,t.value=tokVal,t}return getToken.jumpTo=function(pos,reAllowed){var match;if(tokPos=pos,options.locations)for(tokCurLine=1,tokLineStart=lineBreak.lastIndex=0;(match=lineBreak.exec(input))&&match.index<pos;)++tokCurLine,tokLineStart=match.index+match[0].length;tokRegexpAllowed=reAllowed,skipSpace()},getToken};var empty=[],_num={type:"num"},_regexp={type:"regexp"},_string={type:"string"},_name={type:"name"},_eof={type:"eof"},_break={keyword:"break"},_case={keyword:"case",beforeExpr:!0},_catch={keyword:"catch"},_continue={keyword:"continue"},_debugger={keyword:"debugger"},_default={keyword:"default"},_do={keyword:"do",isLoop:!0},_else={keyword:"else",beforeExpr:!0},_finally={keyword:"finally"},_for={keyword:"for",isLoop:!0},_function={keyword:"function"},_if={keyword:"if"},_return={keyword:"return",beforeExpr:!0},_switch={keyword:"switch"},_throw={keyword:"throw",beforeExpr:!0},_try={keyword:"try"},_var={keyword:"var"},_while={keyword:"while",isLoop:!0},_with={keyword:"with"},_new={keyword:"new",beforeExpr:!0},_this={keyword:"this"},_null={keyword:"null",atomValue:null},_true={keyword:"true",atomValue:!0},_false={keyword:"false",atomValue:!1},_in={keyword:"in",binop:7,beforeExpr:!0},keywordTypes={break:_break,case:_case,catch:_catch,continue:_continue,debugger:_debugger,default:_default,do:_do,else:_else,finally:_finally,for:_for,function:_function,if:_if,return:_return,switch:_switch,throw:_throw,try:_try,var:_var,while:_while,with:_with,null:_null,true:_true,false:_false,new:_new,in:_in,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:_this,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},_bracketL={type:"[",beforeExpr:!0},_bracketR={type:"]"},_braceL={type:"{",beforeExpr:!0},_braceR={type:"}"},_parenL={type:"(",beforeExpr:!0},_parenR={type:")"},_comma={type:",",beforeExpr:!0},_semi={type:";",beforeExpr:!0},_colon={type:":",beforeExpr:!0},_dot={type:"."},_question={type:"?",beforeExpr:!0},_slash={binop:10,beforeExpr:!0},_eq={isAssign:!0,beforeExpr:!0},_assign={isAssign:!0,beforeExpr:!0},_incDec={postfix:!0,prefix:!0,isUpdate:!0},_prefix={prefix:!0,beforeExpr:!0},_logicalOR={binop:1,beforeExpr:!0},_logicalAND={binop:2,beforeExpr:!0},_bitwiseOR={binop:3,beforeExpr:!0},_bitwiseXOR={binop:4,beforeExpr:!0},_bitwiseAND={binop:5,beforeExpr:!0},_equality={binop:6,beforeExpr:!0},_relational={binop:7,beforeExpr:!0},_bitShift={binop:8,beforeExpr:!0},_plusMin={binop:9,prefix:!0,beforeExpr:!0},_multiplyModulo={binop:10,beforeExpr:!0};for(var kw in exports.tokTypes={bracketL:_bracketL,bracketR:_bracketR,braceL:_braceL,braceR:_braceR,parenL:_parenL,parenR:_parenR,comma:_comma,semi:_semi,colon:_colon,dot:_dot,question:_question,slash:_slash,eq:_eq,name:_name,eof:_eof,num:_num,regexp:_regexp,string:_string},keywordTypes)exports.tokTypes["_"+kw]=keywordTypes[kw];function makePredicate(words){words=words.split(" ");var f="",cats=[];out:for(var i=0;i<words.length;++i){for(var j=0;j<cats.length;++j)if(cats[j][0].length==words[i].length){cats[j].push(words[i]);continue out}cats.push([words[i]])}function compareTo(arr){if(1==arr.length)return f+="return str === "+JSON.stringify(arr[0])+";";f+="switch(str){";for(var i=0;i<arr.length;++i)f+="case "+JSON.stringify(arr[i])+":";f+="return true}return false;"}if(cats.length>3){for(cats.sort((function(a,b){return b.length-a.length})),f+="switch(str.length){",i=0;i<cats.length;++i){var cat=cats[i];f+="case "+cat[0].length+":",compareTo(cat)}f+="}"}else compareTo(words);return new Function("str",f)}var containsEsc,isReservedWord3=makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),isReservedWord5=makePredicate("class enum extends super const export import"),isStrictReservedWord=makePredicate("implements interface let package private protected public static yield"),isStrictBadIdWord=makePredicate("eval arguments"),isKeyword=makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),nonASCIIwhitespace=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]"),nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),newline=/[\n\r\u2028\u2029]/,lineBreak=/\r\n|[\n\r\u2028\u2029]/g,isIdentifierStart=exports.isIdentifierStart=function(code){return code<65?36===code:code<91||(code<97?95===code:code<123||code>=170&&nonASCIIidentifierStart.test(String.fromCharCode(code)))},isIdentifierChar=exports.isIdentifierChar=function(code){return code<48?36===code:code<58||!(code<65)&&(code<91||(code<97?95===code:code<123||code>=170&&nonASCIIidentifier.test(String.fromCharCode(code))))};function line_loc_t(){this.line=tokCurLine,this.column=tokPos-tokLineStart}function initTokenState(){tokCurLine=1,tokPos=tokLineStart=0,tokRegexpAllowed=!0,skipSpace()}function finishToken(type,val){tokEnd=tokPos,options.locations&&(tokEndLoc=new line_loc_t),tokType=type,skipSpace(),tokVal=val,tokRegexpAllowed=type.beforeExpr}function skipBlockComment(){var match,startLoc=options.onComment&&options.locations&&new line_loc_t,start=tokPos,end=input.indexOf("*/",tokPos+=2);if(-1===end&&raise(tokPos-2,"Unterminated comment"),tokPos=end+2,options.locations)for(lineBreak.lastIndex=start;(match=lineBreak.exec(input))&&match.index<tokPos;)++tokCurLine,tokLineStart=match.index+match[0].length;options.onComment&&options.onComment(!0,input.slice(start+2,end),start,tokPos,startLoc,options.locations&&new line_loc_t)}function skipLineComment(){for(var start=tokPos,startLoc=options.onComment&&options.locations&&new line_loc_t,ch=input.charCodeAt(tokPos+=2);tokPos<inputLen&&10!==ch&&13!==ch&&8232!==ch&&8233!==ch;)++tokPos,ch=input.charCodeAt(tokPos);options.onComment&&options.onComment(!1,input.slice(start+2,tokPos),start,tokPos,startLoc,options.locations&&new line_loc_t)}function skipSpace(){for(;tokPos<inputLen;){var ch=input.charCodeAt(tokPos);if(32===ch)++tokPos;else if(13===ch)++tokPos,10===(next=input.charCodeAt(tokPos))&&++tokPos,options.locations&&(++tokCurLine,tokLineStart=tokPos);else if(10===ch||8232===ch||8233===ch)++tokPos,options.locations&&(++tokCurLine,tokLineStart=tokPos);else if(ch>8&&ch<14)++tokPos;else if(47===ch){var next;if(42===(next=input.charCodeAt(tokPos+1)))skipBlockComment();else{if(47!==next)break;skipLineComment()}}else if(160===ch)++tokPos;else{if(!(ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))))break;++tokPos}}}function getTokenFromCode(code){switch(code){case 46:return function readToken_dot(){var next=input.charCodeAt(tokPos+1);return next>=48&&next<=57?readNumber(!0):(++tokPos,finishToken(_dot))}();case 40:return++tokPos,finishToken(_parenL);case 41:return++tokPos,finishToken(_parenR);case 59:return++tokPos,finishToken(_semi);case 44:return++tokPos,finishToken(_comma);case 91:return++tokPos,finishToken(_bracketL);case 93:return++tokPos,finishToken(_bracketR);case 123:return++tokPos,finishToken(_braceL);case 125:return++tokPos,finishToken(_braceR);case 58:return++tokPos,finishToken(_colon);case 63:return++tokPos,finishToken(_question);case 48:var next=input.charCodeAt(tokPos+1);if(120===next||88===next)return function readHexNumber(){tokPos+=2;var val=readInt(16);return null==val&&raise(tokStart+2,"Expected hexadecimal number"),isIdentifierStart(input.charCodeAt(tokPos))&&raise(tokPos,"Identifier directly after number"),finishToken(_num,val)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return readNumber(!1);case 34:case 39:return function readString(quote){tokPos++;for(var out="";;){tokPos>=inputLen&&raise(tokStart,"Unterminated string constant");var ch=input.charCodeAt(tokPos);if(ch===quote)return++tokPos,finishToken(_string,out);if(92===ch){ch=input.charCodeAt(++tokPos);var octal=/^[0-7]+/.exec(input.slice(tokPos,tokPos+3));for(octal&&(octal=octal[0]);octal&&parseInt(octal,8)>255;)octal=octal.slice(0,-1);if("0"===octal&&(octal=null),++tokPos,octal)strict&&raise(tokPos-2,"Octal literal in strict mode"),out+=String.fromCharCode(parseInt(octal,8)),tokPos+=octal.length-1;else switch(ch){case 110:out+="\n";break;case 114:out+="\r";break;case 120:out+=String.fromCharCode(readHexChar(2));break;case 117:out+=String.fromCharCode(readHexChar(4));break;case 85:out+=String.fromCharCode(readHexChar(8));break;case 116:out+="\t";break;case 98:out+="\b";break;case 118:out+="\v";break;case 102:out+="\f";break;case 48:out+="\0";break;case 13:10===input.charCodeAt(tokPos)&&++tokPos;case 10:options.locations&&(tokLineStart=tokPos,++tokCurLine);break;default:out+=String.fromCharCode(ch)}}else 13!==ch&&10!==ch&&8232!==ch&&8233!==ch||raise(tokStart,"Unterminated string constant"),out+=String.fromCharCode(ch),++tokPos}}(code);case 47:return function readToken_slash(){var next=input.charCodeAt(tokPos+1);return tokRegexpAllowed?(++tokPos,readRegexp()):61===next?finishOp(_assign,2):finishOp(_slash,1)}();case 37:case 42:return function readToken_mult_modulo(){return 61===input.charCodeAt(tokPos+1)?finishOp(_assign,2):finishOp(_multiplyModulo,1)}();case 124:case 38:return function readToken_pipe_amp(code){var next=input.charCodeAt(tokPos+1);return next===code?finishOp(124===code?_logicalOR:_logicalAND,2):61===next?finishOp(_assign,2):finishOp(124===code?_bitwiseOR:_bitwiseAND,1)}(code);case 94:return function readToken_caret(){return 61===input.charCodeAt(tokPos+1)?finishOp(_assign,2):finishOp(_bitwiseXOR,1)}();case 43:case 45:return function readToken_plus_min(code){var next=input.charCodeAt(tokPos+1);return next===code?45==next&&62==input.charCodeAt(tokPos+2)&&newline.test(input.slice(lastEnd,tokPos))?(tokPos+=3,skipLineComment(),skipSpace(),readToken()):finishOp(_incDec,2):61===next?finishOp(_assign,2):finishOp(_plusMin,1)}(code);case 60:case 62:return function readToken_lt_gt(code){var next=input.charCodeAt(tokPos+1),size=1;return next===code?(size=62===code&&62===input.charCodeAt(tokPos+2)?3:2,61===input.charCodeAt(tokPos+size)?finishOp(_assign,size+1):finishOp(_bitShift,size)):33==next&&60==code&&45==input.charCodeAt(tokPos+2)&&45==input.charCodeAt(tokPos+3)?(tokPos+=4,skipLineComment(),skipSpace(),readToken()):(61===next&&(size=61===input.charCodeAt(tokPos+2)?3:2),finishOp(_relational,size))}(code);case 61:case 33:return function readToken_eq_excl(code){return 61===input.charCodeAt(tokPos+1)?finishOp(_equality,61===input.charCodeAt(tokPos+2)?3:2):finishOp(61===code?_eq:_prefix,1)}(code);case 126:return finishOp(_prefix,1)}return!1}function readToken(forceRegexp){if(forceRegexp?tokPos=tokStart+1:tokStart=tokPos,options.locations&&(tokStartLoc=new line_loc_t),forceRegexp)return readRegexp();if(tokPos>=inputLen)return finishToken(_eof);var code=input.charCodeAt(tokPos);if(isIdentifierStart(code)||92===code)return readWord();var tok=getTokenFromCode(code);if(!1===tok){var ch=String.fromCharCode(code);if("\\"===ch||nonASCIIidentifierStart.test(ch))return readWord();raise(tokPos,"Unexpected character '"+ch+"'")}return tok}function finishOp(type,size){var str=input.slice(tokPos,tokPos+size);tokPos+=size,finishToken(type,str)}function readRegexp(){for(var escaped,inClass,start=tokPos;;){tokPos>=inputLen&&raise(start,"Unterminated regular expression");var ch=input.charAt(tokPos);if(newline.test(ch)&&raise(start,"Unterminated regular expression"),escaped)escaped=!1;else{if("["===ch)inClass=!0;else if("]"===ch&&inClass)inClass=!1;else if("/"===ch&&!inClass)break;escaped="\\"===ch}++tokPos}var content=input.slice(start,tokPos);++tokPos;var mods=readWord1();return mods&&!/^[gmsiy]*$/.test(mods)&&raise(start,"Invalid regexp flag"),finishToken(_regexp,new RegExp(content,mods))}function readInt(radix,len){for(var start=tokPos,total=0,i=0,e=null==len?1/0:len;i<e;++i){var val,code=input.charCodeAt(tokPos);if((val=code>=97?code-97+10:code>=65?code-65+10:code>=48&&code<=57?code-48:1/0)>=radix)break;++tokPos,total=total*radix+val}return tokPos===start||null!=len&&tokPos-start!==len?null:total}function readNumber(startsWithDot){var start=tokPos,isFloat=!1,octal=48===input.charCodeAt(tokPos);startsWithDot||null!==readInt(10)||raise(start,"Invalid number"),46===input.charCodeAt(tokPos)&&(++tokPos,readInt(10),isFloat=!0);var next=input.charCodeAt(tokPos);69!==next&&101!==next||(43!==(next=input.charCodeAt(++tokPos))&&45!==next||++tokPos,null===readInt(10)&&raise(start,"Invalid number"),isFloat=!0),isIdentifierStart(input.charCodeAt(tokPos))&&raise(tokPos,"Identifier directly after number");var val,str=input.slice(start,tokPos);return isFloat?val=parseFloat(str):octal&&1!==str.length?/[89]/.test(str)||strict?raise(start,"Invalid number"):val=parseInt(str,8):val=parseInt(str,10),finishToken(_num,val)}function readHexChar(len){var n=readInt(16,len);return null===n&&raise(tokStart,"Bad character escape sequence"),n}function readWord1(){containsEsc=!1;for(var word,first=!0,start=tokPos;;){var ch=input.charCodeAt(tokPos);if(isIdentifierChar(ch))containsEsc&&(word+=input.charAt(tokPos)),++tokPos;else{if(92!==ch)break;containsEsc||(word=input.slice(start,tokPos)),containsEsc=!0,117!=input.charCodeAt(++tokPos)&&raise(tokPos,"Expecting Unicode escape sequence \\uXXXX"),++tokPos;var esc=readHexChar(4),escStr=String.fromCharCode(esc);escStr||raise(tokPos-1,"Invalid Unicode escape"),(first?isIdentifierStart(esc):isIdentifierChar(esc))||raise(tokPos-4,"Invalid Unicode escape"),word+=escStr}first=!1}return containsEsc?word:input.slice(start,tokPos)}function readWord(){var word=readWord1(),type=_name;return containsEsc||(isKeyword(word)?type=keywordTypes[word]:(options.forbidReserved&&(3===options.ecmaVersion?isReservedWord3:isReservedWord5)(word)||strict&&isStrictReservedWord(word))&&raise(tokStart,"The keyword '"+word+"' is reserved")),finishToken(type,word)}function next(){lastStart=tokStart,lastEnd=tokEnd,lastEndLoc=tokEndLoc,readToken()}function setStrict(strct){if(strict=strct,tokPos=lastEnd,options.locations)for(;tokPos<tokLineStart;)tokLineStart=input.lastIndexOf("\n",tokLineStart-2)+1,--tokCurLine;skipSpace(),readToken()}function node_t(){this.type=null,this.start=tokStart,this.end=null}function node_loc_t(){this.start=tokStartLoc,this.end=null,null!==sourceFile&&(this.source=sourceFile)}function startNode(){var node=new node_t;return options.locations&&(node.loc=new node_loc_t),options.directSourceFile&&(node.sourceFile=options.directSourceFile),options.ranges&&(node.range=[tokStart,0]),node}function startNodeFrom(other){var node=new node_t;return node.start=other.start,options.locations&&(node.loc=new node_loc_t,node.loc.start=other.loc.start),options.ranges&&(node.range=[other.range[0],0]),node}function finishNode(node,type){return node.type=type,node.end=lastEnd,options.locations&&(node.loc.end=lastEndLoc),options.ranges&&(node.range[1]=lastEnd),node}function isUseStrict(stmt){return options.ecmaVersion>=5&&"ExpressionStatement"===stmt.type&&"Literal"===stmt.expression.type&&"use strict"===stmt.expression.value}function eat(type){if(tokType===type)return next(),!0}function canInsertSemicolon(){return!options.strictSemicolons&&(tokType===_eof||tokType===_braceR||newline.test(input.slice(lastEnd,tokStart)))}function semicolon(){eat(_semi)||canInsertSemicolon()||unexpected()}function expect(type){tokType===type?next():unexpected()}function unexpected(){raise(tokStart,"Unexpected token")}function checkLVal(expr){"Identifier"!==expr.type&&"MemberExpression"!==expr.type&&raise(expr.start,"Assigning to rvalue"),strict&&"Identifier"===expr.type&&isStrictBadIdWord(expr.name)&&raise(expr.start,"Assigning to "+expr.name+" in strict mode")}var loopLabel={kind:"loop"},switchLabel={kind:"switch"};function parseStatement(){(tokType===_slash||tokType===_assign&&"/="==tokVal)&&readToken(!0);var starttype=tokType,node=startNode();switch(starttype){case _break:case _continue:next();var isBreak=starttype===_break;eat(_semi)||canInsertSemicolon()?node.label=null:tokType!==_name?unexpected():(node.label=parseIdent(),semicolon());for(var i=0;i<labels.length;++i){var lab=labels[i];if(null==node.label||lab.name===node.label.name){if(null!=lab.kind&&(isBreak||"loop"===lab.kind))break;if(node.label&&isBreak)break}}return i===labels.length&&raise(node.start,"Unsyntactic "+starttype.keyword),finishNode(node,isBreak?"BreakStatement":"ContinueStatement");case _debugger:return next(),semicolon(),finishNode(node,"DebuggerStatement");case _do:return next(),labels.push(loopLabel),node.body=parseStatement(),labels.pop(),expect(_while),node.test=parseParenExpression(),semicolon(),finishNode(node,"DoWhileStatement");case _for:if(next(),labels.push(loopLabel),expect(_parenL),tokType===_semi)return parseFor(node,null);if(tokType===_var){var init=startNode();return next(),parseVar(init,!0),finishNode(init,"VariableDeclaration"),1===init.declarations.length&&eat(_in)?parseForIn(node,init):parseFor(node,init)}return init=parseExpression(!1,!0),eat(_in)?(checkLVal(init),parseForIn(node,init)):parseFor(node,init);case _function:return next(),parseFunction(node,!0);case _if:return next(),node.test=parseParenExpression(),node.consequent=parseStatement(),node.alternate=eat(_else)?parseStatement():null,finishNode(node,"IfStatement");case _return:return inFunction||raise(tokStart,"'return' outside of function"),next(),eat(_semi)||canInsertSemicolon()?node.argument=null:(node.argument=parseExpression(),semicolon()),finishNode(node,"ReturnStatement");case _switch:next(),node.discriminant=parseParenExpression(),node.cases=[],expect(_braceL),labels.push(switchLabel);for(var cur,sawDefault;tokType!=_braceR;)if(tokType===_case||tokType===_default){var isCase=tokType===_case;cur&&finishNode(cur,"SwitchCase"),node.cases.push(cur=startNode()),cur.consequent=[],next(),isCase?cur.test=parseExpression():(sawDefault&&raise(lastStart,"Multiple default clauses"),sawDefault=!0,cur.test=null),expect(_colon)}else cur||unexpected(),cur.consequent.push(parseStatement());return cur&&finishNode(cur,"SwitchCase"),next(),labels.pop(),finishNode(node,"SwitchStatement");case _throw:return next(),newline.test(input.slice(lastEnd,tokStart))&&raise(lastEnd,"Illegal newline after throw"),node.argument=parseExpression(),semicolon(),finishNode(node,"ThrowStatement");case _try:if(next(),node.block=parseBlock(),node.handler=null,tokType===_catch){var clause=startNode();next(),expect(_parenL),clause.param=parseIdent(),strict&&isStrictBadIdWord(clause.param.name)&&raise(clause.param.start,"Binding "+clause.param.name+" in strict mode"),expect(_parenR),clause.guard=null,clause.body=parseBlock(),node.handler=finishNode(clause,"CatchClause")}return node.guardedHandlers=empty,node.finalizer=eat(_finally)?parseBlock():null,node.handler||node.finalizer||raise(node.start,"Missing catch or finally clause"),finishNode(node,"TryStatement");case _var:return next(),parseVar(node),semicolon(),finishNode(node,"VariableDeclaration");case _while:return next(),node.test=parseParenExpression(),labels.push(loopLabel),node.body=parseStatement(),labels.pop(),finishNode(node,"WhileStatement");case _with:return strict&&raise(tokStart,"'with' in strict mode"),next(),node.object=parseParenExpression(),node.body=parseStatement(),finishNode(node,"WithStatement");case _braceL:return parseBlock();case _semi:return next(),finishNode(node,"EmptyStatement");default:var maybeName=tokVal,expr=parseExpression();if(starttype===_name&&"Identifier"===expr.type&&eat(_colon)){for(i=0;i<labels.length;++i)labels[i].name===maybeName&&raise(expr.start,"Label '"+maybeName+"' is already declared");var kind=tokType.isLoop?"loop":tokType===_switch?"switch":null;return labels.push({name:maybeName,kind}),node.body=parseStatement(),labels.pop(),node.label=expr,finishNode(node,"LabeledStatement")}return node.expression=expr,semicolon(),finishNode(node,"ExpressionStatement")}}function parseParenExpression(){expect(_parenL);var val=parseExpression();return expect(_parenR),val}function parseBlock(allowStrict){var oldStrict,node=startNode(),first=!0,strict=!1;for(node.body=[],expect(_braceL);!eat(_braceR);){var stmt=parseStatement();node.body.push(stmt),first&&allowStrict&&isUseStrict(stmt)&&(oldStrict=strict,setStrict(strict=!0)),first=!1}return strict&&!oldStrict&&setStrict(!1),finishNode(node,"BlockStatement")}function parseFor(node,init){return node.init=init,expect(_semi),node.test=tokType===_semi?null:parseExpression(),expect(_semi),node.update=tokType===_parenR?null:parseExpression(),expect(_parenR),node.body=parseStatement(),labels.pop(),finishNode(node,"ForStatement")}function parseForIn(node,init){return node.left=init,node.right=parseExpression(),expect(_parenR),node.body=parseStatement(),labels.pop(),finishNode(node,"ForInStatement")}function parseVar(node,noIn){for(node.declarations=[],node.kind="var";;){var decl=startNode();if(decl.id=parseIdent(),strict&&isStrictBadIdWord(decl.id.name)&&raise(decl.id.start,"Binding "+decl.id.name+" in strict mode"),decl.init=eat(_eq)?parseExpression(!0,noIn):null,node.declarations.push(finishNode(decl,"VariableDeclarator")),!eat(_comma))break}return node}function parseExpression(noComma,noIn){var expr=parseMaybeAssign(noIn);if(!noComma&&tokType===_comma){var node=startNodeFrom(expr);for(node.expressions=[expr];eat(_comma);)node.expressions.push(parseMaybeAssign(noIn));return finishNode(node,"SequenceExpression")}return expr}function parseMaybeAssign(noIn){var left=function parseMaybeConditional(noIn){var expr=function parseExprOps(noIn){return parseExprOp(parseMaybeUnary(),-1,noIn)}(noIn);if(eat(_question)){var node=startNodeFrom(expr);return node.test=expr,node.consequent=parseExpression(!0),expect(_colon),node.alternate=parseExpression(!0,noIn),finishNode(node,"ConditionalExpression")}return expr}(noIn);if(tokType.isAssign){var node=startNodeFrom(left);return node.operator=tokVal,node.left=left,next(),node.right=parseMaybeAssign(noIn),checkLVal(left),finishNode(node,"AssignmentExpression")}return left}function parseExprOp(left,minPrec,noIn){var prec=tokType.binop;if(null!=prec&&(!noIn||tokType!==_in)&&prec>minPrec){var node=startNodeFrom(left);node.left=left,node.operator=tokVal;var op=tokType;return next(),node.right=parseExprOp(parseMaybeUnary(),prec,noIn),parseExprOp(finishNode(node,op===_logicalOR||op===_logicalAND?"LogicalExpression":"BinaryExpression"),minPrec,noIn)}return left}function parseMaybeUnary(){if(tokType.prefix){var node=startNode(),update=tokType.isUpdate;return node.operator=tokVal,node.prefix=!0,tokRegexpAllowed=!0,next(),node.argument=parseMaybeUnary(),update?checkLVal(node.argument):strict&&"delete"===node.operator&&"Identifier"===node.argument.type&&raise(node.start,"Deleting local variable in strict mode"),finishNode(node,update?"UpdateExpression":"UnaryExpression")}for(var expr=function parseExprSubscripts(){return parseSubscripts(parseExprAtom())}();tokType.postfix&&!canInsertSemicolon();)(node=startNodeFrom(expr)).operator=tokVal,node.prefix=!1,node.argument=expr,checkLVal(expr),next(),expr=finishNode(node,"UpdateExpression");return expr}function parseSubscripts(base,noCalls){var node;return eat(_dot)?((node=startNodeFrom(base)).object=base,node.property=parseIdent(!0),node.computed=!1,parseSubscripts(finishNode(node,"MemberExpression"),noCalls)):eat(_bracketL)?((node=startNodeFrom(base)).object=base,node.property=parseExpression(),node.computed=!0,expect(_bracketR),parseSubscripts(finishNode(node,"MemberExpression"),noCalls)):!noCalls&&eat(_parenL)?((node=startNodeFrom(base)).callee=base,node.arguments=parseExprList(_parenR,!1),parseSubscripts(finishNode(node,"CallExpression"),noCalls)):base}function parseExprAtom(){switch(tokType){case _this:var node=startNode();return next(),finishNode(node,"ThisExpression");case _name:return parseIdent();case _num:case _string:case _regexp:return(node=startNode()).value=tokVal,node.raw=input.slice(tokStart,tokEnd),next(),finishNode(node,"Literal");case _null:case _true:case _false:return(node=startNode()).value=tokType.atomValue,node.raw=tokType.keyword,next(),finishNode(node,"Literal");case _parenL:var tokStartLoc1=tokStartLoc,tokStart1=tokStart;next();var val=parseExpression();return val.start=tokStart1,val.end=tokEnd,options.locations&&(val.loc.start=tokStartLoc1,val.loc.end=tokEndLoc),options.ranges&&(val.range=[tokStart1,tokEnd]),expect(_parenR),val;case _bracketL:return node=startNode(),next(),node.elements=parseExprList(_bracketR,!0,!0),finishNode(node,"ArrayExpression");case _braceL:return function parseObj(){var node=startNode(),first=!0,sawGetSet=!1;for(node.properties=[],next();!eat(_braceR);){if(first)first=!1;else if(expect(_comma),options.allowTrailingCommas&&eat(_braceR))break;var kind,prop={key:parsePropertyName()},isGetSet=!1;if(eat(_colon)?(prop.value=parseExpression(!0),kind=prop.kind="init"):options.ecmaVersion>=5&&"Identifier"===prop.key.type&&("get"===prop.key.name||"set"===prop.key.name)?(isGetSet=sawGetSet=!0,kind=prop.kind=prop.key.name,prop.key=parsePropertyName(),tokType!==_parenL&&unexpected(),prop.value=parseFunction(startNode(),!1)):unexpected(),"Identifier"===prop.key.type&&(strict||sawGetSet))for(var i=0;i<node.properties.length;++i){var other=node.properties[i];if(other.key.name===prop.key.name){var conflict=kind==other.kind||isGetSet&&"init"===other.kind||"init"===kind&&("get"===other.kind||"set"===other.kind);conflict&&!strict&&"init"===kind&&"init"===other.kind&&(conflict=!1),conflict&&raise(prop.key.start,"Redefinition of property")}}node.properties.push(prop)}return finishNode(node,"ObjectExpression")}();case _function:return node=startNode(),next(),parseFunction(node,!1);case _new:return function parseNew(){var node=startNode();return next(),node.callee=parseSubscripts(parseExprAtom(),!0),eat(_parenL)?node.arguments=parseExprList(_parenR,!1):node.arguments=empty,finishNode(node,"NewExpression")}();default:unexpected()}}function parsePropertyName(){return tokType===_num||tokType===_string?parseExprAtom():parseIdent(!0)}function parseFunction(node,isStatement){tokType===_name?node.id=parseIdent():isStatement?unexpected():node.id=null,node.params=[];var first=!0;for(expect(_parenL);!eat(_parenR);)first?first=!1:expect(_comma),node.params.push(parseIdent());var oldInFunc=inFunction,oldLabels=labels;if(inFunction=!0,labels=[],node.body=parseBlock(!0),inFunction=oldInFunc,labels=oldLabels,strict||node.body.body.length&&isUseStrict(node.body.body[0]))for(var i=node.id?-1:0;i<node.params.length;++i){var id=i<0?node.id:node.params[i];if((isStrictReservedWord(id.name)||isStrictBadIdWord(id.name))&&raise(id.start,"Defining '"+id.name+"' in strict mode"),i>=0)for(var j=0;j<i;++j)id.name===node.params[j].name&&raise(id.start,"Argument name clash in strict mode")}return finishNode(node,isStatement?"FunctionDeclaration":"FunctionExpression")}function parseExprList(close,allowTrailingComma,allowEmpty){for(var elts=[],first=!0;!eat(close);){if(first)first=!1;else if(expect(_comma),allowTrailingComma&&options.allowTrailingCommas&&eat(close))break;allowEmpty&&tokType===_comma?elts.push(null):elts.push(parseExpression(!0))}return elts}function parseIdent(liberal){var node=startNode();return node.name=tokType===_name?tokVal:liberal&&!options.forbidReserved&&tokType.keyword||unexpected(),tokRegexpAllowed=!1,next(),finishNode(node,"Identifier")}},mod(exports)},"./node_modules/@code-dot-org/js-interpreter/interpreter.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var acorn=__webpack_require__("./node_modules/@code-dot-org/js-interpreter/acorn.js"),Interpreter=module.exports=function(code,opt_initFunc){"string"==typeof code&&(code=acorn.parse(code,Interpreter.PARSE_OPTIONS)),this.ast=code,this.initFunc_=opt_initFunc,this.paused_=!1,this.polyfills_=[],this.functionCounter_=0,this.functionMap_=Object.create(null);var m,stepMatch=/^step([A-Z]\w*)$/;for(var methodName in this)(m=methodName.match(stepMatch))&&(this.functionMap_[m[1]]=this[methodName].bind(this));var mockObject={properties:{prototype:null}};this.NUMBER=mockObject,this.BOOLEAN=mockObject,this.STRING=mockObject,this.UNDEFINED=new Interpreter.Primitive(void 0,this),this.NULL=new Interpreter.Primitive(null,this),this.NAN=new Interpreter.Primitive(NaN,this),this.TRUE=new Interpreter.Primitive(!0,this),this.FALSE=new Interpreter.Primitive(!1,this),this.NUMBER_ZERO=new Interpreter.Primitive(0,this),this.NUMBER_ONE=new Interpreter.Primitive(1,this),this.STRING_EMPTY=new Interpreter.Primitive("",this),this.global=this.createScope(this.ast,null),this.NAN.proto=this.NUMBER.properties.prototype,this.TRUE.proto=this.BOOLEAN.properties.prototype,this.FALSE.proto=this.BOOLEAN.properties.prototype,this.NUMBER_ZERO.proto=this.NUMBER.properties.prototype,this.NUMBER_ONE.proto=this.NUMBER.properties.prototype,this.STRING_EMPTY.proto=this.STRING.properties.prototype,this.ast=acorn.parse(this.polyfills_.join("\n"),Interpreter.PARSE_OPTIONS),this.polyfills_=void 0,this.stripLocations_(this.ast,void 0,void 0),this.stateStack=[{node:this.ast,scope:this.global,thisExpression:this.global,done:!1}],this.run(),this.value=this.UNDEFINED,this.ast=code,this.stateStack=[{node:this.ast,scope:this.global,thisExpression:this.global,done:!1}],this.UNDEFINED=this.UNDEFINED,this.NULL=this.NULL,this.NAN=this.NAN,this.TRUE=this.TRUE,this.FALSE=this.FALSE};Interpreter.PARSE_OPTIONS={ecmaVersion:5},Interpreter.READONLY_DESCRIPTOR={configurable:!0,enumerable:!0,writable:!1},Interpreter.NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!0},Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!1},Interpreter.toStringCycles_=[],Interpreter.generateAST=function(code,parseOptions){var options=Interpreter.PARSE_OPTIONS;return Object.keys(parseOptions).forEach((function(key){options[key]=parseOptions[key]})),acorn.parse(code,options)},Interpreter.prototype.appendCode=function(code,additionalOptions){void 0===additionalOptions&&(additionalOptions={});var state=this.stateStack[0];if(!state||"Program"!=state.node.type)throw Error("Expecting original AST to start with a Program node.");if("string"==typeof code){var acornOptions={};for(var attribute in Interpreter.PARSE_OPTIONS)acornOptions[attribute]=Interpreter.PARSE_OPTIONS[attribute];for(var attribute in additionalOptions)acornOptions[attribute]=additionalOptions[attribute];code=acorn.parse(code,acornOptions)}if(!code||"Program"!=code.type)throw Error("Expecting new AST to start with a Program node.");this.populateScope_(code,state.scope);for(var node,i=0;node=code.body[i];i++)state.node.body.push(node);state.done=!1},Interpreter.prototype.step=function(){var node;do{var stack=this.stateStack,state=stack[stack.length-1];if(!state)return!1;var type=(node=state.node).type;if("Program"===type&&state.done)return!1;if(this.paused_)return!0;this.functionMap_[type]()}while(!node.end);return!0},Interpreter.prototype.run=function(){for(;!this.paused_&&this.step(););return this.paused_},Interpreter.prototype.initGlobalScope=function(scope){this.setProperty(scope,"Infinity",this.createPrimitive(1/0),Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"NaN",this.NAN,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"undefined",this.UNDEFINED,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"window",scope,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"self",scope),this.initFunction(scope),this.initObject(scope),scope.proto=this.OBJECT.properties.prototype,this.setProperty(scope,"constructor",this.OBJECT),this.initArray(scope),this.initNumber(scope),this.initString(scope),this.initBoolean(scope),this.initDate(scope),this.initMath(scope),this.initRegExp(scope),this.initJSON(scope),this.initError(scope);var wrapper,thisInterpreter=this;wrapper=function(num){return num=num||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(isNaN(num.toNumber()))},this.setProperty(scope,"isNaN",this.createNativeFunction(wrapper,!1)),wrapper=function(num){return num=num||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(isFinite(num.toNumber()))},this.setProperty(scope,"isFinite",this.createNativeFunction(wrapper,!1)),this.setProperty(scope,"parseFloat",this.getProperty(this.NUMBER,"parseFloat")),this.setProperty(scope,"parseInt",this.getProperty(this.NUMBER,"parseInt"));var func=this.createObject(this.FUNCTION);func.eval=!0,this.setProperty(func,"length",this.NUMBER_ONE,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"eval",func);for(var strFunctions=[[escape,"escape"],[unescape,"unescape"],[decodeURI,"decodeURI"],[decodeURIComponent,"decodeURIComponent"],[encodeURI,"encodeURI"],[encodeURIComponent,"encodeURIComponent"]],i=0;i<strFunctions.length;i++)wrapper=function(nativeFunc){return function(str){str=(str||thisInterpreter.UNDEFINED).toString();try{str=nativeFunc(str)}catch(e){thisInterpreter.throwException(thisInterpreter.URI_ERROR,e.message)}return thisInterpreter.createPrimitive(str)}}(strFunctions[i][0]),this.setProperty(scope,strFunctions[i][1],this.createNativeFunction(wrapper,!1));this.initFunc_&&this.initFunc_(this,scope)},Interpreter.prototype.initFunction=function(scope){var wrapper,thisInterpreter=this,identifierRegexp=/^[A-Za-z_$][\w$]*$/;wrapper=function(var_args){if(thisInterpreter.calledWithNew())var newFunc=this;else newFunc=thisInterpreter.createObject(thisInterpreter.FUNCTION);if(arguments.length)var code=arguments[arguments.length-1].toString();else code="";for(var args=[],i=0;i<arguments.length-1;i++){var name=arguments[i].toString();if(!name.match(identifierRegexp))return void thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR,"Invalid function argument: "+name);args.push(name)}args=args.join(", "),newFunc.parentScope=thisInterpreter.stateStack[0].scope;var ast=acorn.parse("$ = function("+args+") {"+code+"};",Interpreter.PARSE_OPTIONS);if(1==ast.body.length)return newFunc.node=ast.body[0].expression.right,thisInterpreter.setProperty(newFunc,"length",thisInterpreter.createPrimitive(newFunc.node.length),Interpreter.READONLY_DESCRIPTOR),newFunc;thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR,"Invalid code in function body.")},wrapper.id=this.functionCounter_++,this.FUNCTION=this.createObject(null),this.setProperty(scope,"Function",this.FUNCTION),this.FUNCTION.type="function",this.setProperty(this.FUNCTION,"prototype",this.createObject(null)),this.setProperty(this.FUNCTION.properties.prototype,"constructor",this.FUNCTION,Interpreter.NONENUMERABLE_DESCRIPTOR),this.FUNCTION.nativeFunc=wrapper;var boxThis=function(value){if(value.isPrimitive&&!thisInterpreter.getScope().strict)if(value==thisInterpreter.UNDEFINED||value==thisInterpreter.NULL)value=thisInterpreter.global;else{var box=thisInterpreter.createObject(value.properties.constructor);box.data=value.data,value=box}return value};wrapper=function(thisArg,args){var state=thisInterpreter.stateStack[thisInterpreter.stateStack.length-1];if(state.func_=this,state.funcThis_=boxThis(thisArg),state.arguments_=[],args)if(thisInterpreter.isa(args,thisInterpreter.ARRAY))for(var i=0;i<args.length;i++)state.arguments_[i]=thisInterpreter.getProperty(args,i);else thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"CreateListFromArrayLike called on non-object");state.doneArgs_=!0,state.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"apply",wrapper),wrapper=function(thisArg,var_args){var state=thisInterpreter.stateStack[thisInterpreter.stateStack.length-1];state.func_=this,state.funcThis_=boxThis(thisArg),state.arguments_=[];for(var i=1;i<arguments.length;i++)state.arguments_.push(arguments[i]);state.doneArgs_=!0,state.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"call",wrapper),this.polyfills_.push("Object.defineProperty(Function.prototype, 'bind', {configurable: true, value:","function(oThis) {","if (typeof this !== 'function') {","throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');","}","var aArgs   = Array.prototype.slice.call(arguments, 1),","fToBind = this,","fNOP    = function() {},","fBound  = function() {","return fToBind.apply(this instanceof fNOP","? this",": oThis,","aArgs.concat(Array.prototype.slice.call(arguments)));","};","if (this.prototype) {","fNOP.prototype = this.prototype;","}","fBound.prototype = new fNOP();","return fBound;","}","});",""),wrapper=function(){return thisInterpreter.createPrimitive(this.toString())},this.setNativeFunctionPrototype(this.FUNCTION,"toString",wrapper),this.setProperty(this.FUNCTION,"toString",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(){return thisInterpreter.createPrimitive(this.valueOf())},this.setNativeFunctionPrototype(this.FUNCTION,"valueOf",wrapper),this.setProperty(this.FUNCTION,"valueOf",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR)},Interpreter.prototype.initObject=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){if(!value||value==thisInterpreter.UNDEFINED||value==thisInterpreter.NULL)return thisInterpreter.calledWithNew()?this:thisInterpreter.createObject(thisInterpreter.OBJECT);if(value.isPrimitive){var obj=thisInterpreter.createObject(value.properties.constructor);return obj.data=value.data,obj}return value},this.OBJECT=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Object",this.OBJECT),wrapper=function(obj){if(obj!=thisInterpreter.UNDEFINED&&obj!=thisInterpreter.NULL){var props=obj.isPrimitive?obj.data:obj.properties;return thisInterpreter.nativeToPseudo(Object.getOwnPropertyNames(props))}thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Cannot convert undefined or null to object")},this.setProperty(this.OBJECT,"getOwnPropertyNames",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){if(obj.isPrimitive)return thisInterpreter.nativeToPseudo(Object.keys(obj.data));var list=[];for(var key in obj.properties)obj.notEnumerable[key]||list.push(key);return thisInterpreter.nativeToPseudo(list)},this.setProperty(this.OBJECT,"keys",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(proto){return proto==thisInterpreter.NULL?thisInterpreter.createObject(null):proto.isPrimitive?void thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Object prototype may only be an Object or null"):thisInterpreter.createObjectProto(proto)},this.setProperty(this.OBJECT,"create",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("(function() {","var create_ = Object.create;","Object.defineProperty(Object, 'create', {configurable: true, value:","function(proto, props) {","var obj = create_(proto);","props && Object.defineProperties(obj, props);","return obj;","}","});","})();",""),wrapper=function(obj,prop,descriptor){if(prop=(prop||thisInterpreter.UNDEFINED).toString(),descriptor instanceof Interpreter.Object){if(obj.properties[prop]||!obj.preventExtensions){var value=thisInterpreter.getProperty(descriptor,"value");value==thisInterpreter.UNDEFINED&&(value=null);var get=thisInterpreter.getProperty(descriptor,"get"),set=thisInterpreter.getProperty(descriptor,"set"),nativeDescriptor={configurable:thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor,"configurable")),enumerable:thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor,"enumerable")),writable:thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor,"writable")),get:get==thisInterpreter.UNDEFINED?void 0:get,set:set==thisInterpreter.UNDEFINED?void 0:set};return thisInterpreter.setProperty(obj,prop,value,nativeDescriptor),obj}thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Can't define property "+prop+", object is not extensible")}else thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Property description must be an object.")},this.setProperty(this.OBJECT,"defineProperty",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("Object.defineProperty(Object, 'defineProperties', {configurable: true, value:","function(obj, props) {","var keys = Object.keys(props);","for (var i = 0; i < keys.length; i++) {","Object.defineProperty(obj, keys[i], props[keys[i]]);","}","return obj;","}","});",""),wrapper=function(obj,prop){if(!((prop=(prop||thisInterpreter.UNDEFINED).toString())in obj.properties))return thisInterpreter.UNDEFINED;var configurable=!obj.notConfigurable[prop],enumerable=!obj.notEnumerable[prop],writable=!obj.notWritable[prop],getter=obj.getter[prop],setter=obj.setter[prop],descriptor=thisInterpreter.createObject(thisInterpreter.OBJECT);return thisInterpreter.setProperty(descriptor,"configurable",thisInterpreter.createPrimitive(configurable)),thisInterpreter.setProperty(descriptor,"enumerable",thisInterpreter.createPrimitive(enumerable)),getter||setter?(thisInterpreter.setProperty(descriptor,"getter",getter),thisInterpreter.setProperty(descriptor,"setter",setter)):(thisInterpreter.setProperty(descriptor,"writable",thisInterpreter.createPrimitive(writable)),thisInterpreter.setProperty(descriptor,"value",thisInterpreter.getProperty(obj,prop))),descriptor},this.setProperty(this.OBJECT,"getOwnPropertyDescriptor",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){return obj!=thisInterpreter.UNDEFINED&&obj!=thisInterpreter.NULL||thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Cannot convert undefined or null to object"),obj.proto||thisInterpreter.NULL},this.setProperty(this.OBJECT,"getPrototypeOf",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){return thisInterpreter.createPrimitive(!obj.preventExtensions)},this.setProperty(this.OBJECT,"isExtensible",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){return obj.isPrimitive||(obj.preventExtensions=!0),obj},this.setProperty(this.OBJECT,"preventExtensions",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(){return thisInterpreter.createPrimitive(this.toString())},this.setNativeFunctionPrototype(this.OBJECT,"toString",wrapper),wrapper=function(){return thisInterpreter.createPrimitive(this.toString())},this.setNativeFunctionPrototype(this.OBJECT,"toLocaleString",wrapper),wrapper=function(){return thisInterpreter.createPrimitive(this.valueOf())},this.setNativeFunctionPrototype(this.OBJECT,"valueOf",wrapper),wrapper=function(prop){if(this!=thisInterpreter.UNDEFINED&&this!=thisInterpreter.NULL)return(prop=(prop||thisInterpreter.UNDEFINED).toString())in this.properties?thisInterpreter.TRUE:thisInterpreter.FALSE;thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Cannot convert undefined or null to object")},this.setNativeFunctionPrototype(this.OBJECT,"hasOwnProperty",wrapper),wrapper=function(prop){var enumerable=(prop=(prop||thisInterpreter.UNDEFINED).toString())in this.properties&&!this.notEnumerable[prop];return thisInterpreter.createPrimitive(enumerable)},this.setNativeFunctionPrototype(this.OBJECT,"propertyIsEnumerable",wrapper),wrapper=function(obj){for(;;){if(!obj.proto||obj.proto==obj)return thisInterpreter.FALSE;if((obj=obj.proto)==this)return thisInterpreter.TRUE}},this.setNativeFunctionPrototype(this.OBJECT,"isPrototypeOf",wrapper)},Interpreter.prototype.initArray=function(scope){var wrapper,thisInterpreter=this,getInt=function(obj,def){var n=obj?Math.floor(obj.toNumber()):def;return isNaN(n)&&(n=def),n},strictComp=function(a,b){return a.isPrimitive&&b.isPrimitive?a.data===b.data:a===b};wrapper=function(var_args){if(thisInterpreter.calledWithNew())var newArray=this;else newArray=thisInterpreter.createObject(thisInterpreter.ARRAY);var first=arguments[0];if(1==arguments.length&&"number"==first.type)isNaN(thisInterpreter.arrayIndex(first))&&thisInterpreter.throwException(thisInterpreter.RANGE_ERROR,"Invalid array length"),newArray.length=first.data;else{for(var i=0;i<arguments.length;i++)newArray.properties[i]=arguments[i];newArray.length=i}return newArray},this.ARRAY=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Array",this.ARRAY),wrapper=function(obj){return thisInterpreter.createPrimitive(thisInterpreter.isa(obj,thisInterpreter.ARRAY))},this.setProperty(this.ARRAY,"isArray",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(){if(this.length){var value=this.properties[this.length-1];delete this.properties[this.length-1],this.length--}else value=thisInterpreter.UNDEFINED;return value},this.setNativeFunctionPrototype(this.ARRAY,"pop",wrapper),wrapper=function(var_args){for(var i=0;i<arguments.length;i++)this.properties[this.length]=arguments[i],this.length++;return thisInterpreter.createPrimitive(this.length)},this.setNativeFunctionPrototype(this.ARRAY,"push",wrapper),wrapper=function(){if(this.length){for(var value=this.properties[0],i=1;i<this.length;i++)this.properties[i-1]=this.properties[i];this.length--,delete this.properties[this.length]}else value=thisInterpreter.UNDEFINED;return value},this.setNativeFunctionPrototype(this.ARRAY,"shift",wrapper),wrapper=function(var_args){for(var i=this.length-1;i>=0;i--)this.properties[i+arguments.length]=this.properties[i];this.length+=arguments.length;for(i=0;i<arguments.length;i++)this.properties[i]=arguments[i];return thisInterpreter.createPrimitive(this.length)},this.setNativeFunctionPrototype(this.ARRAY,"unshift",wrapper),wrapper=function(){for(var i=0;i<this.length/2;i++){var tmp=this.properties[this.length-i-1];this.properties[this.length-i-1]=this.properties[i],this.properties[i]=tmp}return this},this.setNativeFunctionPrototype(this.ARRAY,"reverse",wrapper),wrapper=function(index,howmany,var_args){index=(index=getInt(index,0))<0?Math.max(this.length+index,0):Math.min(index,this.length),howmany=getInt(howmany,1/0),howmany=Math.min(howmany,this.length-index);for(var removed=thisInterpreter.createObject(thisInterpreter.ARRAY),i=index;i<index+howmany;i++)removed.properties[removed.length++]=this.properties[i],this.properties[i]=this.properties[i+howmany];for(i=index+howmany;i<this.length-howmany;i++)this.properties[i]=this.properties[i+howmany];for(i=this.length-howmany;i<this.length;i++)delete this.properties[i];this.length-=howmany;for(i=this.length-1;i>=index;i--)this.properties[i+arguments.length-2]=this.properties[i];this.length+=arguments.length-2;for(i=2;i<arguments.length;i++)this.properties[index+i-2]=arguments[i];return removed},this.setNativeFunctionPrototype(this.ARRAY,"splice",wrapper),wrapper=function(opt_begin,opt_end){var list=thisInterpreter.createObject(thisInterpreter.ARRAY),begin=getInt(opt_begin,0);begin<0&&(begin=this.length+begin),begin=Math.max(0,Math.min(begin,this.length));var end=getInt(opt_end,this.length);end<0&&(end=this.length+end),end=Math.max(0,Math.min(end,this.length));for(var length=0,i=begin;i<end;i++){var element=thisInterpreter.getProperty(this,i);thisInterpreter.setProperty(list,length++,element)}return list},this.setNativeFunctionPrototype(this.ARRAY,"slice",wrapper),wrapper=function(opt_separator){var cycles=Interpreter.toStringCycles_;cycles.push(this);try{if(opt_separator&&void 0!==opt_separator.data)sep=opt_separator.toString();else var sep=void 0;for(var text=[],i=0;i<this.length;i++)text[i]=this.properties[i].toString()}finally{cycles.pop()}return thisInterpreter.createPrimitive(text.join(sep))},this.setNativeFunctionPrototype(this.ARRAY,"join",wrapper),wrapper=function(var_args){for(var list=thisInterpreter.createObject(thisInterpreter.ARRAY),length=0,i=0;i<this.length;i++){var element=thisInterpreter.getProperty(this,i);thisInterpreter.setProperty(list,length++,element)}for(i=0;i<arguments.length;i++){var value=arguments[i];if(thisInterpreter.isa(value,thisInterpreter.ARRAY))for(var j=0;j<value.length;j++){element=thisInterpreter.getProperty(value,j);thisInterpreter.setProperty(list,length++,element)}else thisInterpreter.setProperty(list,length++,value)}return list},this.setNativeFunctionPrototype(this.ARRAY,"concat",wrapper),wrapper=function(searchElement,opt_fromIndex){searchElement=searchElement||thisInterpreter.UNDEFINED;var fromIndex=getInt(opt_fromIndex,0);fromIndex<0&&(fromIndex=this.length+fromIndex);for(var i=fromIndex=Math.max(0,fromIndex);i<this.length;i++){var element=thisInterpreter.getProperty(this,i);if(strictComp(element,searchElement))return thisInterpreter.createPrimitive(i)}return thisInterpreter.createPrimitive(-1)},this.setNativeFunctionPrototype(this.ARRAY,"indexOf",wrapper),wrapper=function(searchElement,opt_fromIndex){searchElement=searchElement||thisInterpreter.UNDEFINED;var fromIndex=getInt(opt_fromIndex,this.length);fromIndex<0&&(fromIndex=this.length+fromIndex);for(var i=fromIndex=Math.min(fromIndex,this.length-1);i>=0;i--){var element=thisInterpreter.getProperty(this,i);if(strictComp(element,searchElement))return thisInterpreter.createPrimitive(i)}return thisInterpreter.createPrimitive(-1)},this.setNativeFunctionPrototype(this.ARRAY,"lastIndexOf",wrapper),this.polyfills_.push("Object.defineProperty(Array.prototype, 'every', {configurable: true, value:","function(callbackfn, thisArg) {","if (this == null || typeof callbackfn !== 'function') throw new TypeError;","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O && !callbackfn.call(T, O[k], k, O)) return false;","k++;","}","return true;","}","});","Object.defineProperty(Array.prototype, 'filter', {configurable: true, value:","function(fun/*, thisArg*/) {","if (this === void 0 || this === null || typeof fun !== 'function') throw new TypeError;","var t = Object(this);","var len = t.length >>> 0;","var res = [];","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t) {","var val = t[i];","if (fun.call(thisArg, val, i, t)) res.push(val);","}","}","return res;","}","});","Object.defineProperty(Array.prototype, 'forEach', {configurable: true, value:","function(callback, thisArg) {","if (this == null || typeof callback !== 'function') throw new TypeError;","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O) callback.call(T, O[k], k, O);","k++;","}","}","});","Object.defineProperty(Array.prototype, 'map', {configurable: true, value:","function(callback, thisArg) {","if (this == null || typeof callback !== 'function') new TypeError;","var T, A, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","A = new Array(len);","k = 0;","while (k < len) {","if (k in O) A[k] = callback.call(T, O[k], k, O);","k++;","}","return A;","}","});","Object.defineProperty(Array.prototype, 'reduce', {configurable: true, value:","function(callback /*, initialValue*/) {","if (this == null || typeof callback !== 'function') throw new TypeError;","var t = Object(this), len = t.length >>> 0, k = 0, value;","if (arguments.length == 2) {","value = arguments[1];","} else {","while (k < len && !(k in t)) k++;","if (k >= len) {","throw new TypeError('Reduce of empty array with no initial value');","}","value = t[k++];","}","for (; k < len; k++) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'reduceRight', {configurable: true, value:","function(callback /*, initialValue*/) {","if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw new TypeError;","var t = Object(this), len = t.length >>> 0, k = len - 1, value;","if (arguments.length >= 2) {","value = arguments[1];","} else {","while (k >= 0 && !(k in t)) k--;","if (k < 0) {","throw new TypeError('Reduce of empty array with no initial value');","}","value = t[k--];","}","for (; k >= 0; k--) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'some', {configurable: true, value:","function(fun/*, thisArg*/) {","if (this == null || typeof fun !== 'function') throw new TypeError;","var t = Object(this);","var len = t.length >>> 0;","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t && fun.call(thisArg, t[i], i, t)) {","return true;","}","}","return false;","}","});","Object.defineProperty(Array.prototype, 'sort', {configurable: true, value:","function(opt_comp) {","for (var i = 0; i < this.length; i++) {","var changes = 0;","for (var j = 0; j < this.length - i - 1; j++) {","if (opt_comp ?opt_comp(this[j], this[j + 1]) > 0 : this[j] > this[j + 1]) {","var swap = this[j];","this[j] = this[j + 1];","this[j + 1] = swap;","changes++;","}","}","if (!changes) break;","}","return this;","}","});","Object.defineProperty(Array.prototype, 'toLocaleString', {configurable: true, value:","function() {","var out = [];","for (var i = 0; i < this.length; i++) {","out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();","}","return out.join(',');","}","});","")},Interpreter.prototype.initNumber=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){return value=value?value.toNumber():0,thisInterpreter.calledWithNew()?(this.data=value,this):thisInterpreter.createPrimitive(value)},this.NUMBER=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Number",this.NUMBER);for(var numConsts=["MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY"],i=0;i<numConsts.length;i++)this.setProperty(this.NUMBER,numConsts[i],this.createPrimitive(Number[numConsts[i]]));wrapper=function(str){return str=str||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(parseFloat(str.toString()))},this.setProperty(this.NUMBER,"parseFloat",this.createNativeFunction(wrapper,!1)),wrapper=function(str,radix){return str=str||thisInterpreter.UNDEFINED,radix=radix||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(parseInt(str.toString(),radix.toNumber()))},this.setProperty(this.NUMBER,"parseInt",this.createNativeFunction(wrapper,!1)),wrapper=function(fractionDigits){fractionDigits=fractionDigits?fractionDigits.toNumber():void 0;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toExponential(fractionDigits))},this.setNativeFunctionPrototype(this.NUMBER,"toExponential",wrapper),wrapper=function(digits){digits=digits?digits.toNumber():void 0;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toFixed(digits))},this.setNativeFunctionPrototype(this.NUMBER,"toFixed",wrapper),wrapper=function(precision){precision=precision?precision.toNumber():void 0;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toPrecision(precision))},this.setNativeFunctionPrototype(this.NUMBER,"toPrecision",wrapper),wrapper=function(radix){radix=radix?radix.toNumber():10;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toString(radix))},this.setNativeFunctionPrototype(this.NUMBER,"toString",wrapper),wrapper=function(locales,options){return locales=locales?thisInterpreter.pseudoToNative(locales):void 0,options=options?thisInterpreter.pseudoToNative(options):void 0,thisInterpreter.createPrimitive(this.toNumber().toLocaleString(locales,options))},this.setNativeFunctionPrototype(this.NUMBER,"toLocaleString",wrapper)},Interpreter.prototype.initString=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){return value=value?value.toString():"",thisInterpreter.calledWithNew()?(this.data=value,this):thisInterpreter.createPrimitive(value)},this.STRING=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"String",this.STRING),wrapper=function(var_args){for(var i=0;i<arguments.length;i++)arguments[i]=arguments[i].toNumber();return thisInterpreter.createPrimitive(String.fromCharCode.apply(String,arguments))},this.setProperty(this.STRING,"fromCharCode",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR);for(var functions=["toLowerCase","toUpperCase","toLocaleLowerCase","toLocaleUpperCase"],i=0;i<functions.length;i++)wrapper=function(nativeFunc){return function(){return thisInterpreter.createPrimitive(nativeFunc.apply(this))}}(String.prototype[functions[i]]),this.setNativeFunctionPrototype(this.STRING,functions[i],wrapper);wrapper=function(){var str=this.toString();return thisInterpreter.createPrimitive(str.replace(/^\s+|\s+$/g,""))},this.setNativeFunctionPrototype(this.STRING,"trim",wrapper),wrapper=function(){var str=this.toString();return thisInterpreter.createPrimitive(str.replace(/^\s+/g,""))},this.setNativeFunctionPrototype(this.STRING,"trimLeft",wrapper),wrapper=function(){var str=this.toString();return thisInterpreter.createPrimitive(str.replace(/\s+$/g,""))},this.setNativeFunctionPrototype(this.STRING,"trimRight",wrapper),functions=["charAt","charCodeAt","substring","slice","substr"];for(i=0;i<functions.length;i++)wrapper=function(nativeFunc){return function(){for(var j=0;j<arguments.length;j++)arguments[j]=arguments[j].toNumber();return thisInterpreter.createPrimitive(nativeFunc.apply(this,arguments))}}(String.prototype[functions[i]]),this.setNativeFunctionPrototype(this.STRING,functions[i],wrapper);wrapper=function(searchValue,fromIndex){var str=this.toString();return searchValue=(searchValue||thisInterpreter.UNDEFINED).toString(),fromIndex=fromIndex?fromIndex.toNumber():void 0,thisInterpreter.createPrimitive(str.indexOf(searchValue,fromIndex))},this.setNativeFunctionPrototype(this.STRING,"indexOf",wrapper),wrapper=function(searchValue,fromIndex){var str=this.toString();return searchValue=(searchValue||thisInterpreter.UNDEFINED).toString(),fromIndex=fromIndex?fromIndex.toNumber():void 0,thisInterpreter.createPrimitive(str.lastIndexOf(searchValue,fromIndex))},this.setNativeFunctionPrototype(this.STRING,"lastIndexOf",wrapper),wrapper=function(compareString,locales,options){return compareString=(compareString||thisInterpreter.UNDEFINED).toString(),locales=locales?thisInterpreter.pseudoToNative(locales):void 0,options=options?thisInterpreter.pseudoToNative(options):void 0,thisInterpreter.createPrimitive(this.toString().localeCompare(compareString,locales,options))},this.setNativeFunctionPrototype(this.STRING,"localeCompare",wrapper),wrapper=function(separator,limit){var str=this.toString();separator=separator?thisInterpreter.isa(separator,thisInterpreter.REGEXP)?separator.data:separator.toString():void 0,limit=limit?limit.toNumber():void 0;for(var jsList=str.split(separator,limit),pseudoList=thisInterpreter.createObject(thisInterpreter.ARRAY),i=0;i<jsList.length;i++)thisInterpreter.setProperty(pseudoList,i,thisInterpreter.createPrimitive(jsList[i]));return pseudoList},this.setNativeFunctionPrototype(this.STRING,"split",wrapper),wrapper=function(var_args){for(var str=this.toString(),i=0;i<arguments.length;i++)str+=arguments[i].toString();return thisInterpreter.createPrimitive(str)},this.setNativeFunctionPrototype(this.STRING,"concat",wrapper),wrapper=function(regexp){var str=this.toString();regexp=regexp?regexp.data:void 0;var match=str.match(regexp);if(null===match)return thisInterpreter.NULL;for(var pseudoList=thisInterpreter.createObject(thisInterpreter.ARRAY),i=0;i<match.length;i++)thisInterpreter.setProperty(pseudoList,i,thisInterpreter.createPrimitive(match[i]));return pseudoList},this.setNativeFunctionPrototype(this.STRING,"match",wrapper),wrapper=function(regexp){var str=this.toString();return regexp=regexp?regexp.data:void 0,thisInterpreter.createPrimitive(str.search(regexp))},this.setNativeFunctionPrototype(this.STRING,"search",wrapper),wrapper=function(substr,newSubStr){var str=this.toString();return substr=(substr||thisInterpreter.UNDEFINED).valueOf(),newSubStr=(newSubStr||thisInterpreter.UNDEFINED).toString(),thisInterpreter.createPrimitive(str.replace(substr,newSubStr))},this.setNativeFunctionPrototype(this.STRING,"replace",wrapper)},Interpreter.prototype.initBoolean=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){return value=!!value&&value.toBoolean(),thisInterpreter.calledWithNew()?(this.data=value,this):thisInterpreter.createPrimitive(value)},this.BOOLEAN=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Boolean",this.BOOLEAN)},Interpreter.prototype.initDate=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value,var_args){if(!thisInterpreter.calledWithNew())return thisInterpreter.createPrimitive(Date());var newDate=this;if(arguments.length)if(1!=arguments.length||"string"!=value.type&&!thisInterpreter.isa(value,thisInterpreter.STRING)){for(var args=[null],i=0;i<arguments.length;i++)args[i+1]=arguments[i]?arguments[i].toNumber():void 0;newDate.data=new(Function.prototype.bind.apply(Date,args))}else newDate.data=new Date(value.toString());else newDate.data=new Date;return newDate},this.DATE=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Date",this.DATE),wrapper=function(){return thisInterpreter.createPrimitive((new Date).getTime())},this.setProperty(this.DATE,"now",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(dateString){return dateString=dateString?dateString.toString():void 0,thisInterpreter.createPrimitive(Date.parse(dateString))},this.setProperty(this.DATE,"parse",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(var_args){for(var args=[],i=0;i<arguments.length;i++)args[i]=arguments[i]?arguments[i].toNumber():void 0;return thisInterpreter.createPrimitive(Date.UTC.apply(Date,args))},this.setProperty(this.DATE,"UTC",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR);for(var functions=["getDate","getDay","getFullYear","getHours","getMilliseconds","getMinutes","getMonth","getSeconds","getTime","getTimezoneOffset","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","getYear","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","setYear","toDateString","toISOString","toJSON","toGMTString","toLocaleDateString","toLocaleString","toLocaleTimeString","toTimeString","toUTCString"],i=0;i<functions.length;i++)wrapper=function(nativeFunc){return function(var_args){for(var args=[],i=0;i<arguments.length;i++)args[i]=thisInterpreter.pseudoToNative(arguments[i]);return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data,args))}}(functions[i]),this.setNativeFunctionPrototype(this.DATE,functions[i],wrapper)},Interpreter.prototype.initMath=function(scope){var thisInterpreter=this,myMath=this.createObject(this.OBJECT);this.setProperty(scope,"Math",myMath);for(var mathConsts=["E","LN2","LN10","LOG2E","LOG10E","PI","SQRT1_2","SQRT2"],i=0;i<mathConsts.length;i++)this.setProperty(myMath,mathConsts[i],this.createPrimitive(Math[mathConsts[i]]),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);var numFunctions=["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan"];for(i=0;i<numFunctions.length;i++){var wrapper=function(nativeFunc){return function(){for(var j=0;j<arguments.length;j++)arguments[j]=arguments[j].toNumber();return thisInterpreter.createPrimitive(nativeFunc.apply(Math,arguments))}}(Math[numFunctions[i]]);this.setProperty(myMath,numFunctions[i],this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR)}},Interpreter.prototype.initRegExp=function(scope){var wrapper,thisInterpreter=this;wrapper=function(pattern,flags){if(thisInterpreter.calledWithNew())var rgx=this;else rgx=thisInterpreter.createObject(thisInterpreter.REGEXP);return pattern=pattern?pattern.toString():"",flags=flags?flags.toString():"",thisInterpreter.populateRegExp_(rgx,new RegExp(pattern,flags))},this.REGEXP=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"RegExp",this.REGEXP),this.setProperty(this.REGEXP.properties.prototype,"global",this.UNDEFINED,Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"ignoreCase",this.UNDEFINED,Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"multiline",this.UNDEFINED,Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"source",this.createPrimitive("(?:)"),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),wrapper=function(str){return str=str.toString(),thisInterpreter.createPrimitive(this.data.test(str))},this.setNativeFunctionPrototype(this.REGEXP,"test",wrapper),wrapper=function(str){str=str.toString(),this.data.lastIndex=thisInterpreter.getProperty(this,"lastIndex").toNumber();var match=this.data.exec(str);if(thisInterpreter.setProperty(this,"lastIndex",thisInterpreter.createPrimitive(this.data.lastIndex)),match){for(var result=thisInterpreter.createObject(thisInterpreter.ARRAY),i=0;i<match.length;i++)thisInterpreter.setProperty(result,i,thisInterpreter.createPrimitive(match[i]));return thisInterpreter.setProperty(result,"index",thisInterpreter.createPrimitive(match.index)),thisInterpreter.setProperty(result,"input",thisInterpreter.createPrimitive(match.input)),result}return thisInterpreter.NULL},this.setNativeFunctionPrototype(this.REGEXP,"exec",wrapper)},Interpreter.prototype.initJSON=function(scope){var thisInterpreter=this,myJSON=thisInterpreter.createObject(this.OBJECT);this.setProperty(scope,"JSON",myJSON);var wrapper=function(text){try{var nativeObj=JSON.parse(text.toString())}catch(e){return void thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR,e.message)}return thisInterpreter.nativeToPseudo(nativeObj)};this.setProperty(myJSON,"parse",this.createNativeFunction(wrapper,!1)),wrapper=function(value){var nativeObj=thisInterpreter.pseudoToNative(value);try{var str=JSON.stringify(nativeObj)}catch(e){return void thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,e.message)}return thisInterpreter.createPrimitive(str)},this.setProperty(myJSON,"stringify",this.createNativeFunction(wrapper,!1))},Interpreter.prototype.initError=function(scope){var thisInterpreter=this;this.ERROR=this.createNativeFunction((function(opt_message){if(thisInterpreter.calledWithNew())var newError=this;else newError=thisInterpreter.createObject(thisInterpreter.ERROR);return opt_message&&thisInterpreter.setProperty(newError,"message",thisInterpreter.createPrimitive(String(opt_message)),Interpreter.NONENUMERABLE_DESCRIPTOR),newError}),!0),this.setProperty(scope,"Error",this.ERROR),this.setProperty(this.ERROR.properties.prototype,"message",this.STRING_EMPTY,Interpreter.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.ERROR.properties.prototype,"name",this.createPrimitive("Error"),Interpreter.NONENUMERABLE_DESCRIPTOR);var createErrorSubclass=function(name){var constructor=thisInterpreter.createNativeFunction((function(opt_message){if(thisInterpreter.calledWithNew())var newError=this;else newError=thisInterpreter.createObject(constructor);return opt_message&&thisInterpreter.setProperty(newError,"message",thisInterpreter.createPrimitive(String(opt_message)),Interpreter.NONENUMERABLE_DESCRIPTOR),newError}),!0);return thisInterpreter.setProperty(constructor,"prototype",thisInterpreter.createObject(thisInterpreter.ERROR)),thisInterpreter.setProperty(constructor.properties.prototype,"name",thisInterpreter.createPrimitive(name),Interpreter.NONENUMERABLE_DESCRIPTOR),thisInterpreter.setProperty(scope,name,constructor),constructor};this.EVAL_ERROR=createErrorSubclass("EvalError"),this.RANGE_ERROR=createErrorSubclass("RangeError"),this.REFERENCE_ERROR=createErrorSubclass("ReferenceError"),this.SYNTAX_ERROR=createErrorSubclass("SyntaxError"),this.TYPE_ERROR=createErrorSubclass("TypeError"),this.URI_ERROR=createErrorSubclass("URIError")},Interpreter.prototype.isa=function(child,constructor){if(!child||!constructor)return!1;var proto=constructor.properties.prototype;do{if(child==proto)return!0}while(child=child.proto);return!1},Interpreter.prototype.comp=function(a,b){if(a.isPrimitive&&"number"==typeof a.data&&isNaN(a.data)||b.isPrimitive&&"number"==typeof b.data&&isNaN(b.data))return NaN;if(a===b)return 0;var aValue=a.isPrimitive?a.data:a.toString(),bValue=b.isPrimitive?b.data:b.toString();return aValue<bValue?-1:aValue>bValue?1:(a.isPrimitive||b.isPrimitive)&&aValue==bValue?0:NaN},Interpreter.prototype.arrayIndex=function(n){return n=Number(n),!isFinite(n)||n!=Math.floor(n)||n<0||n>=Math.pow(2,32)?NaN:n},Interpreter.Primitive=function(data,interpreter){var type=typeof data;this.data=data,this.type=type,"number"==type?this.proto=interpreter.NUMBER.properties.prototype:"string"==type?this.proto=interpreter.STRING.properties.prototype:"boolean"==type&&(this.proto=interpreter.BOOLEAN.properties.prototype)},Interpreter.Primitive.prototype.data=void 0,Interpreter.Primitive.prototype.type="undefined",Interpreter.Primitive.prototype.proto=null,Interpreter.Primitive.prototype.isPrimitive=!0,Interpreter.Primitive.prototype.toBoolean=function(){return Boolean(this.data)},Interpreter.Primitive.prototype.toNumber=function(){return Number(this.data)},Interpreter.Primitive.prototype.toString=function(){return String(this.data)},Interpreter.Primitive.prototype.valueOf=function(){return this.data},Interpreter.prototype.createPrimitive=function(data){return void 0===data?this.UNDEFINED:null===data?this.NULL:!0===data?this.TRUE:!1===data?this.FALSE:0===data?this.NUMBER_ZERO:1===data?this.NUMBER_ONE:""===data?this.STRING_EMPTY:data instanceof RegExp?this.populateRegExp_(this.createObject(this.REGEXP),data):new Interpreter.Primitive(data,this)},Interpreter.Object=function(proto){this.notConfigurable=Object.create(null),this.notEnumerable=Object.create(null),this.notWritable=Object.create(null),this.getter=Object.create(null),this.setter=Object.create(null),this.properties=Object.create(null),this.proto=proto},Interpreter.Object.prototype.type="object",Interpreter.Object.prototype.proto=null,Interpreter.Object.prototype.isPrimitive=!1,Interpreter.Object.prototype.data=void 0,Interpreter.Object.prototype.toBoolean=function(){return!0},Interpreter.Object.prototype.toNumber=function(){return Number(void 0===this.data?this.toString():this.data)},Interpreter.Object.prototype.toString=function(){if(this.length>=0){(cycles=Interpreter.toStringCycles_).push(this);try{for(var strs=[],i=0;i<this.length;i++){var value=this.properties[i];strs[i]=!value||value.isPrimitive&&(null===value.data||void 0===value.data)||-1!=cycles.indexOf(value)?"":value.toString()}}finally{cycles.pop()}return strs.join(",")}if(this.error){var cycles,name,message;if(-1!=(cycles=Interpreter.toStringCycles_).indexOf(this))return"[Error]";var obj=this;do{if("name"in obj.properties){name=obj.properties.name;break}}while(obj.proto!=obj&&(obj=obj.proto));obj=this;do{if("message"in obj.properties){message=obj.properties.message;break}}while(obj=obj.proto);cycles.push(this);try{name=name&&name.toString(),message=message&&message.toString()}finally{cycles.pop()}return message?name+": "+message:name+""}return void 0!==this.data?String(this.data):"["+this.type+"]"},Interpreter.Object.prototype.valueOf=function(){return void 0===this.data?this:this.data},Interpreter.prototype.createObject=function(constructor){return this.createObjectProto(constructor&&constructor.properties.prototype)},Interpreter.prototype.createObjectProto=function(proto){var obj=new Interpreter.Object(proto);return this.isa(obj,this.FUNCTION)&&(obj.type="function",this.setProperty(obj,"prototype",this.createObject(this.OBJECT||null))),this.isa(obj,this.ARRAY)&&(obj.length=0),this.isa(obj,this.ERROR)&&(obj.error=!0),obj},Interpreter.prototype.populateRegExp_=function(pseudoRegexp,nativeRegexp){return pseudoRegexp.data=nativeRegexp,this.setProperty(pseudoRegexp,"lastIndex",this.createPrimitive(nativeRegexp.lastIndex),Interpreter.NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"source",this.createPrimitive(nativeRegexp.source),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"global",this.createPrimitive(nativeRegexp.global),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"ignoreCase",this.createPrimitive(nativeRegexp.ignoreCase),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"multiline",this.createPrimitive(nativeRegexp.multiline),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),pseudoRegexp.toString=function(){return String(this.data)},pseudoRegexp.valueOf=function(){return this.data},pseudoRegexp},Interpreter.prototype.createFunction=function(node,scope){var func=this.createObject(this.FUNCTION);return func.parentScope=scope,func.node=node,this.setProperty(func,"length",this.createPrimitive(func.node.params.length),Interpreter.READONLY_DESCRIPTOR),func},Interpreter.prototype.createNativeFunction=function(nativeFunc,opt_constructor){var func=this.createObject(this.FUNCTION);return func.nativeFunc=nativeFunc,nativeFunc.id=this.functionCounter_++,this.setProperty(func,"length",this.createPrimitive(nativeFunc.length),Interpreter.READONLY_DESCRIPTOR),opt_constructor?this.setProperty(func.properties.prototype,"constructor",func,Interpreter.NONENUMERABLE_DESCRIPTOR):!1===opt_constructor&&(func.illegalConstructor=!0,this.setProperty(func,"prototype",this.UNDEFINED)),func},Interpreter.prototype.createAsyncFunction=function(asyncFunc){var func=this.createObject(this.FUNCTION);return func.asyncFunc=asyncFunc,asyncFunc.id=this.functionCounter_++,this.setProperty(func,"length",this.createPrimitive(asyncFunc.length),Interpreter.READONLY_DESCRIPTOR),func},Interpreter.prototype.nativeToPseudo=function(nativeObj){if("boolean"==typeof nativeObj||"number"==typeof nativeObj||"string"==typeof nativeObj||null==nativeObj||nativeObj instanceof RegExp)return this.createPrimitive(nativeObj);if(nativeObj instanceof Function){var interpreter=this;return this.createNativeFunction((function(){return interpreter.nativeToPseudo(nativeObj.apply(interpreter,Array.prototype.slice.call(arguments).map((function(i){return interpreter.pseudoToNative(i)}))))}),void 0)}var pseudoObj;if(nativeObj instanceof Array){pseudoObj=this.createObject(this.ARRAY);for(var i=0;i<nativeObj.length;i++)this.setProperty(pseudoObj,i,this.nativeToPseudo(nativeObj[i]))}else for(var key in pseudoObj=this.createObject(this.OBJECT),nativeObj)this.setProperty(pseudoObj,key,this.nativeToPseudo(nativeObj[key]));return pseudoObj},Interpreter.prototype.pseudoToNative=function(pseudoObj,opt_cycles){if(pseudoObj.isPrimitive||this.isa(pseudoObj,this.NUMBER)||this.isa(pseudoObj,this.STRING)||this.isa(pseudoObj,this.BOOLEAN))return pseudoObj.data;var nativeObj,cycles=opt_cycles||{pseudo:[],native:[]};if(-1!=(i=cycles.pseudo.indexOf(pseudoObj)))return cycles.native[i];if(cycles.pseudo.push(pseudoObj),this.isa(pseudoObj,this.ARRAY)){nativeObj=[],cycles.native.push(nativeObj);for(var i=0;i<pseudoObj.length;i++)nativeObj[i]=this.pseudoToNative(pseudoObj.properties[i],cycles)}else{var val;for(var key in nativeObj={},cycles.native.push(nativeObj),pseudoObj.properties)pseudoObj.notEnumerable[key]||(val=pseudoObj.properties[key],nativeObj[key]=this.pseudoToNative(val,cycles))}return cycles.pseudo.pop(),cycles.native.pop(),nativeObj},Interpreter.prototype.getFullyQualifiedName=function(node){for(var fullyQualifiedName="";node.object&&node.property;){var properties=node.property;if(node.computed)fullyQualifiedName="["+(properties.name?properties.name:properties.raw)+"]"+fullyQualifiedName;else fullyQualifiedName="."+properties.name+fullyQualifiedName;node=node.object}return fullyQualifiedName="ArrayExpression"==node.type?"Array"+fullyQualifiedName:node.name+fullyQualifiedName},Interpreter.prototype.getProperty=function(obj,name){if(name=name.toString(),obj==this.UNDEFINED||obj==this.NULL)return this.throwException(this.TYPE_ERROR,"Cannot read property '"+name+"' of "+obj),null;if("length"==name){if(this.isa(obj,this.STRING))return this.createPrimitive(obj.data.length);if(this.isa(obj,this.ARRAY))return this.createPrimitive(obj.length)}else if(name.charCodeAt(0)<64&&this.isa(obj,this.STRING)){var n=this.arrayIndex(name);if(!isNaN(n)&&n<obj.data.length)return this.createPrimitive(obj.data[n])}do{if(obj.properties&&name in obj.properties){var getter=obj.getter[name];return getter?(getter.isGetter=!0,getter):obj.properties[name]}}while(obj=obj.proto);return this.UNDEFINED},Interpreter.prototype.hasProperty=function(obj,name){if(name=name.toString(),obj.isPrimitive)throw TypeError("Primitive data type has no properties");if("length"==name&&(this.isa(obj,this.STRING)||this.isa(obj,this.ARRAY)))return!0;if(this.isa(obj,this.STRING)){var n=this.arrayIndex(name);if(!isNaN(n)&&n<obj.data.length)return!0}do{if(obj.properties&&name in obj.properties)return!0}while(obj=obj.proto);return!1},Interpreter.prototype.setProperty=function(obj,name,value,opt_descriptor){if(name=name.toString(),opt_descriptor&&obj.notConfigurable[name]&&this.throwException(this.TYPE_ERROR,"Cannot redefine property: "+name),"object"!=typeof value)throw Error("Failure to wrap a value: "+value);obj!=this.UNDEFINED&&obj!=this.NULL||this.throwException(this.TYPE_ERROR,"Cannot set property '"+name+"' of "+obj),opt_descriptor&&(opt_descriptor.get||opt_descriptor.set)&&(value||void 0!==opt_descriptor.writable)&&this.throwException(this.TYPE_ERROR,"Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");var strict=!this.stateStack||this.getScope().strict;if(obj.isPrimitive)strict&&this.throwException(this.TYPE_ERROR,"Can't create property '"+name+"' on '"+obj.data+"'");else{if(this.isa(obj,this.STRING)){var n=this.arrayIndex(name);if("length"==name||!isNaN(n)&&n<obj.data.length)return void(strict&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+name+"' of String '"+obj.data+"'"))}if(this.isa(obj,this.ARRAY)){var i;if("length"==name){var newLength=this.arrayIndex(value.toNumber());if(isNaN(newLength)&&this.throwException(this.RANGE_ERROR,"Invalid array length"),newLength<obj.length)for(i in obj.properties)i=this.arrayIndex(i),!isNaN(i)&&newLength<=i&&delete obj.properties[i];return void(obj.length=newLength)}isNaN(i=this.arrayIndex(name))||(obj.length=Math.max(obj.length,i+1))}if(obj.properties[name]||!obj.preventExtensions)if(opt_descriptor){obj.properties[name]=value,opt_descriptor.configurable||(obj.notConfigurable[name]=!0);var getter=opt_descriptor.get;getter?obj.getter[name]=getter:delete obj.getter[name];var setter=opt_descriptor.set;if(setter?obj.setter[name]=setter:delete obj.setter[name],opt_descriptor.enumerable||!1?delete obj.notEnumerable[name]:obj.notEnumerable[name]=!0,getter||setter)delete obj.notWritable[name],obj.properties[name]=this.UNDEFINED;else opt_descriptor.writable||!1?delete obj.notWritable[name]:obj.notWritable[name]=!0}else{var parent=obj;do{if(parent.setter&&parent.setter[name])return parent.setter[name]}while(parent=parent.proto);obj.getter&&obj.getter[name]?strict&&this.throwException(this.TYPE_ERROR,"Cannot set property '"+name+"' of object '"+obj+"' which only has a getter"):obj.notWritable[name]?strict&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+name+"' of object '"+obj+"'"):obj.properties[name]=value}else strict&&this.throwException(this.TYPE_ERROR,"Can't add property "+name+", object is not extensible")}},Interpreter.prototype.setNativeFunctionPrototype=function(obj,name,wrapper){this.setProperty(obj.properties.prototype,name,this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR)},Interpreter.prototype.deleteProperty=function(obj,name){return name=name.toString(),!obj.isPrimitive&&!obj.notWritable[name]&&(("length"!=name||!this.isa(obj,this.ARRAY))&&delete obj.properties[name])},Interpreter.prototype.getScope=function(){for(var i=this.stateStack.length-1;i>=0;i--)if(this.stateStack[i].scope)return this.stateStack[i].scope;throw Error("No scope found.")},Interpreter.prototype.createScope=function(node,parentScope){var scope=this.createObject(null);if(scope.parentScope=parentScope,parentScope||this.initGlobalScope(scope),this.populateScope_(node,scope),scope.strict=!1,parentScope&&parentScope.strict)scope.strict=!0;else{var firstNode=node.body&&node.body[0];firstNode&&firstNode.expression&&"Literal"==firstNode.expression.type&&"use strict"==firstNode.expression.value&&(scope.strict=!0)}return scope},Interpreter.prototype.createSpecialScope=function(parentScope,opt_scope){if(!parentScope)throw Error("parentScope required");var scope=opt_scope||this.createObject(null);return scope.parentScope=parentScope,scope.strict=parentScope.strict,scope},Interpreter.prototype.getValueFromScope=function(name){for(var scope=this.getScope(),nameStr=name.toString();scope&&scope!=this.global;){if(nameStr in scope.properties)return scope.properties[nameStr];scope=scope.parentScope}if(scope==this.global&&this.hasProperty(scope,nameStr))return this.getProperty(scope,nameStr);var prevNode=this.stateStack[this.stateStack.length-1].node;return"UnaryExpression"==prevNode.type&&"typeof"==prevNode.operator?this.UNDEFINED:(this.throwException(this.REFERENCE_ERROR,nameStr+" is not defined"),null)},Interpreter.prototype.setValueToScope=function(name,value){for(var scope=this.getScope(),nameStr=name.toString();scope&&scope!=this.global;){if(nameStr in scope.properties)return void(scope.properties[nameStr]=value);scope=scope.parentScope}if(scope==this.global&&(!scope.strict||this.hasProperty(scope,nameStr)))return this.setProperty(scope,nameStr,value);this.throwException(this.REFERENCE_ERROR,nameStr+" is not defined")},Interpreter.prototype.populateScope_=function(node,scope){if("VariableDeclaration"==node.type)for(var i=0;i<node.declarations.length;i++)this.setProperty(scope,node.declarations[i].id.name,this.UNDEFINED);else{if("FunctionDeclaration"==node.type)return void this.setProperty(scope,node.id.name,this.createFunction(node,scope));if("FunctionExpression"==node.type)return;if("ExpressionStatement"==node.type)return}var nodeClass=node.constructor;for(var name in node){var prop=node[name];if(prop&&"object"==typeof prop)if(prop instanceof Array)for(i=0;i<prop.length;i++)prop[i]&&prop[i].constructor==nodeClass&&this.populateScope_(prop[i],scope);else prop.constructor==nodeClass&&this.populateScope_(prop,scope)}},Interpreter.prototype.stripLocations_=function(node,start,end){for(var name in start?node.start=start:delete node.start,end?node.end=end:delete node.end,node)if(node.hasOwnProperty(name)){var prop=node[name];prop&&"object"==typeof prop&&this.stripLocations_(prop,start,end)}},Interpreter.prototype.calledWithNew=function(){return this.stateStack[this.stateStack.length-1].isConstructor},Interpreter.prototype.getValue=function(left){if(left instanceof Array){var obj=left[0],prop=left[1];return this.getProperty(obj,prop)}return this.getValueFromScope(left)},Interpreter.prototype.setValue=function(left,value){if(left instanceof Array){var obj=left[0],prop=left[1];return this.setProperty(obj,prop,value)}return this.setValueToScope(left,value)},Interpreter.prototype.throwException=function(errorClass,opt_message){if(void 0===opt_message)var error=errorClass;else{error=this.createObject(errorClass);this.setProperty(error,"message",this.createPrimitive(opt_message),Interpreter.NONENUMERABLE_DESCRIPTOR)}this.executeException(error)},Interpreter.prototype.executeException=function(error){do{this.stateStack.pop();var state=this.stateStack[this.stateStack.length-1];if("TryStatement"==state.node.type)return void(state.throwValue=error)}while(state&&"Program"!=state.node.type);var realError;if(this.isa(error,this.ERROR)){var errorTable={EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError},name=this.getProperty(error,"name").toString(),message=this.getProperty(error,"message").valueOf();realError=(errorTable[name]||Error)(message)}else realError=error.toString();throw realError},Interpreter.prototype.pushGetter_=function(func,left){var funcThis=left instanceof Array?left[0]:left;this.stateStack.push({node:{type:"CallExpression"},doneCallee_:!0,funcThis_:funcThis,func_:func,doneArgs_:!0,arguments_:[]})},Interpreter.prototype.pushSetter_=function(func,left,value){var funcThis=left instanceof Array?left[0]:this.global;this.stateStack.push({node:{type:"CallExpression"},doneCallee_:!0,funcThis_:funcThis,func_:func,doneArgs_:!0,arguments_:[value]})},Interpreter.prototype.stepArrayExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;state.array_?state.value&&this.setProperty(state.array_,n-1,state.value):state.array_=this.createObject(this.ARRAY),n<node.elements.length?(state.n_=n+1,node.elements[n]?stack.push({node:node.elements[n]}):state.value=void 0):(state.array_.length=state.n_||0,stack.pop(),stack[stack.length-1].value=state.array_)},Interpreter.prototype.stepAssignmentExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneLeft_)return state.doneLeft_=!0,void stack.push({node:node.left,components:!0});if(!state.doneRight_){if(state.leftSide_||(state.leftSide_=state.value),state.doneGetter_&&(state.leftValue_=state.value),!state.doneGetter_&&"="!=node.operator&&(state.leftValue_=this.getValue(state.leftSide_),state.leftValue_.isGetter)){state.leftValue_.isGetter=!1,state.doneGetter_=!0;var func=state.leftValue_;return void this.pushGetter_(func,state.leftSide_)}return state.doneRight_=!0,void stack.push({node:node.right})}if(state.doneSetter_)return stack.pop(),void(stack[stack.length-1].value=state.doneSetter_);var value,rightSide=state.value;if("="==node.operator)value=rightSide;else{var left,right,rightValue=rightSide,leftNumber=state.leftValue_.toNumber(),rightNumber=rightValue.toNumber();if("+="==node.operator)"string"==state.leftValue_.type||"string"==rightValue.type?(left=state.leftValue_.toString(),right=rightValue.toString()):(left=leftNumber,right=rightNumber),value=left+right;else if("-="==node.operator)value=leftNumber-rightNumber;else if("*="==node.operator)value=leftNumber*rightNumber;else if("/="==node.operator)value=leftNumber/rightNumber;else if("%="==node.operator)value=leftNumber%rightNumber;else if("<<="==node.operator)value=leftNumber<<rightNumber;else if(">>="==node.operator)value=leftNumber>>rightNumber;else if(">>>="==node.operator)value=leftNumber>>>rightNumber;else if("&="==node.operator)value=leftNumber&rightNumber;else if("^="==node.operator)value=leftNumber^rightNumber;else{if("|="!=node.operator)throw SyntaxError("Unknown assignment expression: "+node.operator);value=leftNumber|rightNumber}value=this.createPrimitive(value)}var setter=this.setValue(state.leftSide_,value);if(setter)return state.doneSetter_=value,void this.pushSetter_(setter,state.leftSide_,value);stack.pop(),stack[stack.length-1].value=value},Interpreter.prototype.stepBinaryExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneLeft_)return state.doneLeft_=!0,void stack.push({node:node.left});if(!state.doneRight_)return state.doneRight_=!0,state.leftValue_=state.value,void stack.push({node:node.right});stack.pop();var value,leftSide=state.leftValue_,rightSide=state.value,comp=this.comp(leftSide,rightSide);if("=="==node.operator||"!="==node.operator)value=leftSide.isPrimitive&&rightSide.isPrimitive?leftSide.data==rightSide.data:0===comp,"!="==node.operator&&(value=!value);else if("==="==node.operator||"!=="==node.operator)value=leftSide.isPrimitive&&rightSide.isPrimitive?leftSide.data===rightSide.data:leftSide===rightSide,"!=="==node.operator&&(value=!value);else if(">"==node.operator)value=1==comp;else if(">="==node.operator)value=1==comp||0===comp;else if("<"==node.operator)value=-1==comp;else if("<="==node.operator)value=-1==comp||0===comp;else if("+"==node.operator){value=(leftValue=leftSide.isPrimitive?leftSide.data:leftSide.toString())+(rightValue=rightSide.isPrimitive?rightSide.data:rightSide.toString())}else if("in"==node.operator)rightSide.isPrimitive?this.throwException(this.TYPE_ERROR,"Expecting an object evaluating 'in'"):value=this.hasProperty(rightSide,leftSide);else if("instanceof"==node.operator)this.isa(rightSide,this.FUNCTION)?value=leftSide.isPrimitive?this.FALSE:this.isa(leftSide,rightSide):this.throwException(this.TYPE_ERROR,"Expecting a function in instanceof check");else{var leftValue=leftSide.toNumber(),rightValue=rightSide.toNumber();if("-"==node.operator)value=leftValue-rightValue;else if("*"==node.operator)value=leftValue*rightValue;else if("/"==node.operator)value=leftValue/rightValue;else if("%"==node.operator)value=leftValue%rightValue;else if("&"==node.operator)value=leftValue&rightValue;else if("|"==node.operator)value=leftValue|rightValue;else if("^"==node.operator)value=leftValue^rightValue;else if("<<"==node.operator)value=leftValue<<rightValue;else if(">>"==node.operator)value=leftValue>>rightValue;else{if(">>>"!=node.operator)throw SyntaxError("Unknown binary operator: "+node.operator);value=leftValue>>>rightValue}}stack[stack.length-1].value=this.createPrimitive(value)},Interpreter.prototype.stepBlockStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.body[n]?(state.n_=n+1,stack.push({node:node.body[n]})):stack.pop()},Interpreter.prototype.stepBreakStatement=function(){var stack=this.stateStack,state=stack.pop(),label=null;for(state.node.label&&(label=state.node.label.name);state&&"CallExpression"!=state.node.type&&"NewExpression"!=state.node.type;){if(label){if(state.labels&&-1!=state.labels.indexOf(label))return}else if(state.isLoop||state.isSwitch)return;state=stack.pop()}throw SyntaxError("Illegal break statement")},Interpreter.prototype.stepCallExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneCallee_)return state.doneCallee_=!0,void stack.push({node:node.callee,components:!0});if(!state.func_){if("function"==state.value.type)state.func_=state.value;else{if(state.func_=this.getValue(state.value),state.func_.isGetter)return state.func_.isGetter=!1,this.pushGetter_(state.func_,state.value),void(state.func_=null);if(!state.func_)return;if("function"!=state.func_.type){var functionName=this.getFullyQualifiedName(node.callee);return void this.throwException(this.TYPE_ERROR,functionName+" is not a function")}}if("NewExpression"==state.node.type){if(state.func_.illegalConstructor)return void this.throwException(this.TYPE_ERROR,"function is not a constructor");state.funcThis_=this.createObject(state.func_),state.isConstructor=!0}else state.value.length?state.funcThis_=state.value[0]:state.funcThis_=this.getScope().strict?this.UNDEFINED:this.global;state.arguments_=[],state.n_=0}if(!state.doneArgs_){if(0!=state.n_&&state.arguments_.push(state.value),node.arguments[state.n_])return stack.push({node:node.arguments[state.n_]}),void state.n_++;state.doneArgs_=!0}if(state.doneExec_)stack.pop(),state.isConstructor&&"object"!==state.value.type?stack[stack.length-1].value=state.funcThis_:stack[stack.length-1].value=state.value;else{state.doneExec_=!0;var funcNode=state.func_.node;if(funcNode){for(var scope=this.createScope(funcNode.body,state.func_.parentScope),i=0;i<funcNode.params.length;i++){var paramName=this.createPrimitive(funcNode.params[i].name),paramValue=state.arguments_.length>i?state.arguments_[i]:this.UNDEFINED;this.setProperty(scope,paramName,paramValue)}var argsList=this.createObject(this.ARRAY);for(i=0;i<state.arguments_.length;i++)this.setProperty(argsList,this.createPrimitive(i),state.arguments_[i]);this.setProperty(scope,"arguments",argsList);var name=funcNode.id&&funcNode.id.name;name&&this.setProperty(scope,name,state.func_);var funcState={node:funcNode.body,scope,thisExpression:state.funcThis_};stack.push(funcState),state.value=this.UNDEFINED}else if(state.func_.nativeFunc)state.value=state.func_.nativeFunc.apply(state.funcThis_,state.arguments_);else{if(state.func_.asyncFunc){var thisInterpreter=this,argsWithCallback=state.arguments_.concat((function(value){state.value=value||thisInterpreter.UNDEFINED,thisInterpreter.paused_=!1}));return this.paused_=!0,void state.func_.asyncFunc.apply(state.funcThis_,argsWithCallback)}if(state.func_.eval){var code=state.arguments_[0];if(code)if(code.isPrimitive){var ast=acorn.parse(code.toString(),Interpreter.PARSE_OPTIONS);state={node:{type:"EvalProgram_",body:ast.body}},this.stripLocations_(state.node,node.start,node.end);scope=this.getScope();this.populateScope_(ast,scope),stack.push(state)}else state.value=code;else state.value=this.UNDEFINED}else this.throwException(this.TYPE_ERROR,"function is not a function")}}},Interpreter.prototype.stepCatchClause=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.done_)stack.pop();else{var scope;if(state.done_=!0,node.param){scope=this.createSpecialScope(this.getScope());var paramName=this.createPrimitive(node.param.name);this.setProperty(scope,paramName,state.throwValue)}stack.push({node:node.body,scope})}},Interpreter.prototype.stepConditionalExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],mode=state.mode_||0;if(0==mode)return state.mode_=1,void stack.push({node:state.node.test});if(1==mode){state.mode_=2;var value=state.value.toBoolean();if(value&&state.node.consequent)return void stack.push({node:state.node.consequent});if(!value&&state.node.alternate)return void stack.push({node:state.node.alternate});this.value=this.UNDEFINED}stack.pop(),"ConditionalExpression"==state.node.type&&(stack[stack.length-1].value=state.value)},Interpreter.prototype.stepContinueStatement=function(){var stack=this.stateStack,state=stack.pop(),label=null;for(state.node.label&&(label=state.node.label.name),state=stack[stack.length-1];state&&"CallExpression"!=state.node.type&&"NewExpression"!=state.node.type;){if(state.isLoop&&(!label||state.labels&&-1!=state.labels.indexOf(label)))return;stack.pop(),state=stack[stack.length-1]}throw SyntaxError("Illegal continue statement")},Interpreter.prototype.stepDebugger=function(){},Interpreter.prototype.stepDoWhileStatement=function(){var stack=this.stateStack,state=stack[stack.length-1];"DoWhileStatement"==state.node.type&&void 0===state.test_&&(state.value=this.TRUE,state.test_=!0),state.test_?state.value.toBoolean()?state.node.body&&(state.test_=!1,state.isLoop=!0,stack.push({node:state.node.body})):stack.pop():(state.test_=!0,stack.push({node:state.node.test}))},Interpreter.prototype.stepEmptyStatement=function(){this.stateStack.pop()},Interpreter.prototype.stepEvalProgram_=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.body[n]?(state.n_=n+1,stack.push({node:node.body[n]})):(stack.pop(),stack[stack.length-1].value=this.value)},Interpreter.prototype.stepExpressionStatement=function(){var stack=this.stateStack,state=stack[stack.length-1];state.done_?(stack.pop(),this.value=state.value):(state.done_=!0,stack.push({node:state.node.expression}))},Interpreter.prototype.stepForInStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneInit_&&(state.doneInit_=!0,node.left.declarations&&node.left.declarations[0].init)){if(this.getScope().strict)throw SyntaxError("for-in loop variable declaration may not have an initializer.");stack.push({node:node.left})}else{if(!state.doneObject_)return state.doneObject_=!0,state.variable_||(state.variable_=state.value),void stack.push({node:node.right});if(state.object_||(state.isLoop=!0,state.object_=state.value,state.visited_=[]),void 0===state.name_){done:do{if(state.object_.isPrimitive){for(var prop in state.object_.data)if(-1==state.visited_.indexOf(prop)){state.visited_.push(prop),state.name_=prop,state.visited_.push(prop);break done}}else for(var prop in state.object_.properties)if(-1==state.visited_.indexOf(prop)&&(state.visited_.push(prop),!state.object_.notEnumerable[prop])){state.name_=prop,state.visited_.push(prop);break done}state.object_=state.object_.proto}while(state.object_);if(!state.object_)return void stack.pop()}if(!state.doneVariable_){state.doneVariable_=!0;var left=node.left;if("VariableDeclaration"!=left.type)return state.variable_=null,void stack.push({node:left,components:!0});state.variable_=left.declarations[0].id.name}if(state.variable_||(state.variable_=state.value),!state.doneSetter_){state.doneSetter_=!0;var value=this.createPrimitive(state.name_),setter=this.setValue(state.variable_,value);if(setter)return void this.pushSetter_(setter,state.variable_,value)}node.body&&stack.push({node:node.body}),state.name_=void 0,state.variable_ instanceof Array&&(state.doneVariable_=!1),state.doneSetter_=!1}},Interpreter.prototype.stepForStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,mode=state.mode_||0;0==mode?(state.mode_=1,node.init&&stack.push({node:node.init})):1==mode?(state.mode_=2,node.test&&stack.push({node:node.test})):2==mode?(state.mode_=3,node.test&&state.value&&!state.value.toBoolean()?stack.pop():node.body&&(state.isLoop=!0,stack.push({node:node.body}))):3==mode&&(state.mode_=1,node.update&&stack.push({node:node.update}))},Interpreter.prototype.stepFunctionDeclaration=function(){this.stateStack.pop()},Interpreter.prototype.stepFunctionExpression=function(){var stack=this.stateStack,state=stack.pop();stack[stack.length-1].value=this.createFunction(state.node,this.getScope())},Interpreter.prototype.stepIdentifier=function(){var stack=this.stateStack,state=stack.pop(),nameStr=state.node.name,name=this.createPrimitive(nameStr),value=state.components?name:this.getValueFromScope(name);if(value&&value.isGetter){value.isGetter=!1;for(var scope=this.getScope();!this.hasProperty(scope,nameStr);)scope=scope.parentScope;var func=value;this.pushGetter_(func,this.global)}else stack[stack.length-1].value=value},Interpreter.prototype.stepIfStatement=Interpreter.prototype.stepConditionalExpression,Interpreter.prototype.stepLabeledStatement=function(){var stack=this.stateStack,state=stack.pop(),labels=state.labels||[];labels.push(state.node.label.name),stack.push({node:state.node.body,labels})},Interpreter.prototype.stepLiteral=function(){var stack=this.stateStack,state=stack.pop();stack[stack.length-1].value=this.createPrimitive(state.node.value)},Interpreter.prototype.stepLogicalExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if("&&"!=node.operator&&"||"!=node.operator)throw SyntaxError("Unknown logical operator: "+node.operator);state.doneLeft_?state.doneRight_||"&&"==node.operator&&!state.value.toBoolean()||"||"==node.operator&&state.value.toBoolean()?(stack.pop(),stack[stack.length-1].value=state.value):(state.doneRight_=!0,stack.push({node:node.right})):(state.doneLeft_=!0,stack.push({node:node.left}))},Interpreter.prototype.stepMemberExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.doneObject_)if(state.doneProperty_)if(stack.pop(),state.components)stack[stack.length-1].value=[state.object_,state.value];else{if(state.object_==this.NULL||state.object_==this.UNDEFINED){var name=this.getFullyQualifiedName(node.object);return void this.throwException(this.TYPE_ERROR,name+" is "+state.object_.toString())}var value=this.getProperty(state.object_,state.value);if(!value)return stack.push({}),void this.throwException(this.TYPE_ERROR,"Cannot read property '"+state.value+"' of "+state.object_.toString());if(value.isGetter){value.isGetter=!1;var func=value;this.pushGetter_(func,state.object_)}else stack[stack.length-1].value=value}else state.doneProperty_=!0,state.object_=state.value,stack.push({node:node.property,components:!node.computed});else state.doneObject_=!0,stack.push({node:node.object})},Interpreter.prototype.stepNewExpression=Interpreter.prototype.stepCallExpression,Interpreter.prototype.stepObjectExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,valueToggle=state.valueToggle_,n=state.n_||0;if(state.object?valueToggle?state.key_=state.value:(state.properties[state.key_]||(state.properties[state.key_]={}),state.properties[state.key_][state.kind_]=state.value):(state.object=this.createObject(this.OBJECT),state.properties=Object.create(null)),node.properties[n])valueToggle?(state.n_=n+1,stack.push({node:node.properties[n].value})):(state.kind_=node.properties[n].kind,stack.push({node:node.properties[n].key,components:!0})),state.valueToggle_=!valueToggle;else{for(var key in state.properties){var kinds=state.properties[key];if("get"in kinds||"set"in kinds){var descriptor={configurable:!0,enumerable:!0,get:kinds.get,set:kinds.set};this.setProperty(state.object,key,null,descriptor)}else this.setProperty(state.object,key,kinds.init)}stack.pop(),stack[stack.length-1].value=state.object}},Interpreter.prototype.stepProgram=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.body[n]?(state.done=!1,state.n_=n+1,stack.push({node:node.body[n]})):state.done=!0},Interpreter.prototype.stepReturnStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(node.argument&&!state.done_)state.done_=!0,stack.push({node:node.argument});else{var value=state.value||this.UNDEFINED,i=stack.length-1;for(state=stack[i];"CallExpression"!=state.node.type&&"NewExpression"!=state.node.type;){if("TryStatement"!=state.node.type&&stack.splice(i,1),--i<0)throw SyntaxError("Illegal return statement");state=stack[i]}state.value=value}},Interpreter.prototype.stepSequenceExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.expressions[n]?(state.n_=n+1,stack.push({node:node.expressions[n]})):(stack.pop(),stack[stack.length-1].value=state.value)},Interpreter.prototype.stepSwitchStatement=function(){var stack=this.stateStack,state=stack[stack.length-1];if(!state.test_)return state.test_=!0,void stack.push({node:state.node.discriminant});for(state.switchValue_||(state.switchValue_=state.value);;){var index=state.index_||0,switchCase=state.node.cases[index];if(state.matched_||!switchCase||switchCase.test)if(switchCase||state.matched_||!state.defaultCase_){if(!switchCase)return void stack.pop();if(!state.matched_&&!state.tested_&&switchCase.test)return state.tested_=!0,void stack.push({node:switchCase.test});if(state.matched_||0==this.comp(state.value,state.switchValue_)){state.matched_=!0;var n=state.n_||0;if(switchCase.consequent[n])return state.isSwitch=!0,stack.push({node:switchCase.consequent[n]}),void(state.n_=n+1)}state.tested_=!1,state.n_=0,state.index_=index+1}else state.matched_=!0,state.index_=state.defaultCase_;else state.defaultCase_=index,state.index_=index+1}},Interpreter.prototype.stepThisExpression=function(){var stack=this.stateStack;stack.pop();for(var i=stack.length-1;i>=0;i--)if(stack[i].thisExpression)return void(stack[stack.length-1].value=stack[i].thisExpression);throw Error("No this expression found.")},Interpreter.prototype.stepThrowStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;state.done_?this.throwException(state.value):(state.done_=!0,stack.push({node:node.argument}))},Interpreter.prototype.stepTryStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;state.doneBlock_?state.throwValue&&!state.doneHandler_&&node.handler?(state.doneHandler_=!0,stack.push({node:node.handler,throwValue:state.throwValue}),state.throwValue=null):!state.doneFinalizer_&&node.finalizer?(state.doneFinalizer_=!0,stack.push({node:node.finalizer})):state.throwValue?this.executeException(state.throwValue):stack.pop():(state.doneBlock_=!0,stack.push({node:node.block}))},Interpreter.prototype.stepUnaryExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.done_){stack.pop();var value=state.value;if("-"==node.operator)value=-value.toNumber();else if("+"==node.operator)value=value.toNumber();else if("!"==node.operator)value=!value.toBoolean();else if("~"==node.operator)value=~value.toNumber();else if("delete"==node.operator){if(value.length)var obj=value[0],name=value[1];else obj=this.getScope(),name=value;if(!(value=this.deleteProperty(obj,name))&&this.getScope().strict)return void this.throwException(this.TYPE_ERROR,"Cannot delete property '"+name+"' of '"+obj+"'")}else if("typeof"==node.operator)value=value.type;else{if("void"!=node.operator)throw SyntaxError("Unknown unary operator: "+node.operator);value=void 0}stack[stack.length-1].value=this.createPrimitive(value)}else{state.done_=!0;var nextState={node:node.argument,components:"delete"==node.operator};stack.push(nextState)}},Interpreter.prototype.stepUpdateExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneLeft_)return state.doneLeft_=!0,void stack.push({node:node.argument,components:!0});if(state.leftSide_||(state.leftSide_=state.value),state.doneGetter_&&(state.leftValue_=state.value),!state.doneGetter_){if(state.leftValue_=this.getValue(state.leftSide_),!state.leftValue_)return;if(state.leftValue_.isGetter){state.leftValue_.isGetter=!1,state.doneGetter_=!0;var func=state.leftValue_;return void this.pushGetter_(func,state.leftSide_)}}if(state.doneSetter_)return stack.pop(),void(stack[stack.length-1].value=state.doneSetter_);var changeValue,leftValue=state.leftValue_.toNumber();if("++"==node.operator)changeValue=this.createPrimitive(leftValue+1);else{if("--"!=node.operator)throw SyntaxError("Unknown update expression: "+node.operator);changeValue=this.createPrimitive(leftValue-1)}var returnValue=node.prefix?changeValue:this.createPrimitive(leftValue),setter=this.setValue(state.leftSide_,changeValue);if(setter)return state.doneSetter_=returnValue,void this.pushSetter_(setter,state.leftSide_,changeValue);stack.pop(),stack[stack.length-1].value=returnValue},Interpreter.prototype.stepVariableDeclaration=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0,declarationNode=node.declarations[n];for(state.value&&declarationNode&&(this.setValue(this.createPrimitive(declarationNode.id.name),state.value),state.value=null,declarationNode=node.declarations[++n]);declarationNode;){if(declarationNode.init)return state.n_=n,void stack.push({node:declarationNode.init});declarationNode=node.declarations[++n]}stack.pop()},Interpreter.prototype.stepWithStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.doneObject_)if(state.doneBody_)stack.pop();else{state.doneBody_=!0;var scope=this.createSpecialScope(this.getScope(),state.value);stack.push({node:node.body,scope})}else state.doneObject_=!0,stack.push({node:node.object})},Interpreter.prototype.stepWhileStatement=Interpreter.prototype.stepDoWhileStatement,this.Interpreter=Interpreter,Interpreter.prototype.step=Interpreter.prototype.step,Interpreter.prototype.run=Interpreter.prototype.run,Interpreter.prototype.appendCode=Interpreter.prototype.appendCode,Interpreter.prototype.createPrimitive=Interpreter.prototype.createPrimitive,Interpreter.prototype.createAsyncFunction=Interpreter.prototype.createAsyncFunction,Interpreter.prototype.createNativeFunction=Interpreter.prototype.createNativeFunction,Interpreter.prototype.getProperty=Interpreter.prototype.getProperty,Interpreter.prototype.setProperty=Interpreter.prototype.setProperty,Interpreter.prototype.nativeToPseudo=Interpreter.prototype.nativeToPseudo,Interpreter.prototype.pseudoToNative=Interpreter.prototype.pseudoToNative},"./node_modules/@microsoft/immersive-reader-sdk/lib/immersive-reader-sdk.js":module=>{window,module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiePolicy=void 0,function(e){e[e.Disable=0]="Disable",e[e.Enable=1]="Enable"}(t.CookiePolicy||(t.CookiePolicy={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiePolicy=t.launchAsync=t.close=t.renderButtons=void 0;var n=r(2);Object.defineProperty(t,"renderButtons",{enumerable:!0,get:function(){return n.renderButtons}});var o=r(3);Object.defineProperty(t,"close",{enumerable:!0,get:function(){return o.close}}),Object.defineProperty(t,"launchAsync",{enumerable:!0,get:function(){return o.launchAsync}});var i=r(0);Object.defineProperty(t,"CookiePolicy",{enumerable:!0,get:function(){return i.CookiePolicy}}),"undefined"!=typeof window&&window.addEventListener("load",(function(){var e,t;window.hasOwnProperty("Promise")||(e="https://contentstorage.onenote.office.net/onenoteltir/permanent-static-resources/promise-polyfill.min.js",(t=document.createElement("script")).src=e,document.head.appendChild(t)),n.renderButtons()}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderButtons=void 0;var n={af:"Indompelende leser",am:"በህያው ስሜት ፈጣሪ ዕይታ አንባቢ",ar:"القارئ الشامل",as:"ইমাৰচিভ ৰিডাৰ",az:"İmmersiv Oxuyucu",be:"Імерсіўны чытальнік",bg:"Концентриран четец",bn:"মনোগ্রাহী পাঠক","bn-bd":"ইমার্সিভ পাঠক",bs:"Koncentrirani čitalac",ca:"Lector immersiu",cs:"Asistivní čtečka","cy-gb":"Darllenydd Ymdrwythol",da:"Forenklet læser",de:"Plastischer Reader",el:"Προηγμένο πρόγραμμα ανάγνωσης",en:"Immersive Reader",es:"Lector inmersivo",et:"Süvaluger",eu:"Irakurgailu murgiltzailea",fa:"خواننده همه‌جانبه",fi:"Syventävä lukuohjelma",fil:"Immersive Reader",fr:"Lecteur immersif","ga-ie":"Léitheoir tumthach",gd:"An leughadair ùr-nòsach",gl:"Lector avanzado",gu:"ઇમર્સિવ રીડર",ha:"Mai karatu Mai barbazawa",he:"תצוגת קריאה מודרנית",hi:"इमर्सिव रीडर",hr:"Stopljeni čitač",hu:"Modern olvasó",hy:"Խորասուզված ընթերցիչ",id:"Pembaca Imersif",ig:"Ọgụụ Kenzipụtara",is:"Aðgengilegt lestrarumhverfi",it:"Strumento di lettura immersiva",ja:"イマーシブ リーダー",ka:"იმერსიული წამკითხველი",kk:"Иммерсивті оқу құралы",km:"កម្មវិធីអានពណ៌រំលេចនៅលើអេក្រង់",kn:"ಇಮ್ಮರ್ಸಿವ್ ಓದುಗ",ko:"몰입형 리더",kok:"तंद्री लागिल्लो वाचक","ku-arab":"خوێنەری پڕ",ky:"Курчаган Окугуч",lb:"Immersive Reader",lo:"ຕົວອ່ານອິມເມີສີບ",lt:"Įtraukianti skaitytuvė",lv:"Tīrskata lasītājs",mi:"Pūpānui Rumaki",mk:"Сеопфатен читач",ml:"ഇമ്മേഴ്‌സീവ് റീഡർ",mn:"Идэвхтэй уншигч",mr:"इमर्सिव्ह वाचक",ms:"Pembaca Imersif",mt:"Qarrej Immersiv",ne:"इमेर्सिभ रिडर",nl:"Insluitende lezer","nn-no":"Engasjerande lesar",no:"Engasjerende leser",nso:"Go Bala ka Mongwalo o Mokoto",or:"ଇମରସିଭ୍ ରିଡର୍",pa:"ਇਮਰਸਿਵ ਰੀਡਰ","pa-arab":"گھیرن آلا مطالعہ کار",pl:"Czytnik immersyjny",prs:"خواننده نمایش",pt:"Leitura Avançada",quc:"Nim ucholajil sik'inel uwach",quz:"Wankisqa Ñawiq",ro:"Immersive Reader",ru:"Иммерсивное средство чтения",rw:"Insakazasoma",sd:"امرسو ريڊر",si:"ගිලෙන සුළු කියවනය",sk:"Imerzná čítačka",sl:"Potopni bralnik",sq:"Lexuesi kredhës","sr-cyrl-ba":"Концентрисани читалац","sr-cyrl-rs":"Концентрисани читалац","sr-latn-rs":"Koncentrisani čitalac",sv:"Avancerad läsare",sw:"Kisomaji cha Kuzamisha",ta:"அற்புதமான ரீடர்",te:"మంత్రముగ్ధులను చేసే పఠన సాధనం","tg-cyrl-tj":"Хонандаи фарогир",th:"โปรแกรมช่วยอ่าน",ti:"ኣንባቢ ሕሉው ስምዒት ፈጣሪ",tk:"Giňişleýin okaýjy",tn:"Sebadi sa Imesife",tr:"Tam Ekran Okuyucu",tt:"Чолгап алучы уку чарасы","ug-cn":"چۆكمە ئوقۇغۇچ",uk:"Занурення в текст",ur:"امرسیو مطالعہ کار",uz:"Immersiv mutolaa vositasi",vi:"Trình đọc Chân thực",wo:"Jàngukaay bu Rafet",xh:"Isifundi Esikhulu",yo:"Ìwò Alámùtán",zh:"沉浸式阅读器","zh-hant":"沈浸式閱讀程式",zu:"Isifundi Sokuzizwisa"};function o(e){var t=document.createElement("img");t.src="https://contentstorage.onenote.office.net/onenoteltir/permanent-static-resources/immersive-reader-icon.svg";var r=e.getAttribute("data-icon-px-size")||"20";t.style.height=t.style.width=r+"px",t.style.verticalAlign="middle",t.style.marginTop="-2px";var n=e.getAttribute("data-locale")||"en";t.alt=s(n),e.appendChild(t)}function i(e){var t=document.createElement("span");t.style.marginLeft="8px",e.appendChild(t)}function a(e){var t=document.createElement("span"),r=e.getAttribute("data-locale")||"en";t.textContent=s(r),e.appendChild(t)}function s(e){return e=e.toLowerCase(),n[e]?n[e]:"zh-hk"===e||"zh-mo"===e||"zh-tw"===e?n["zh-hant"]:(e=e.substring(0,e.lastIndexOf("-")),n[e]?n[e]:(e=e.substring(0,e.lastIndexOf("-")),n[e]?n[e]:n.en))}t.renderButtons=function(e){var t=document.createElement("style");t.innerHTML=".immersive-reader-button{cursor:pointer;display:inline-block;padding:5px;} .immersive-reader-button:hover{background:rgba(0,0,0,.05);border-radius:2px",document.head.appendChild(t);var r=[].slice.call(document.getElementsByClassName("immersive-reader-button"));e&&e.elements&&(r=e.elements);for(var n=0,d=r;n<d.length;n++){var u=d[n];u.setAttribute("role","button");var l=u.getAttribute("data-locale")||"en";switch(u.setAttribute("aria-label",s(l)),u.getAttribute("data-button-style")||"icon"){case"icon":o(u);break;case"text":a(u);break;case"iconAndText":o(u),i(u),a(u)}}}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.isValidSubdomain=t.close=t.launchAsync=void 0;var o=r(0),i=r(4),a={};a[i.ErrorCode.TokenExpired]="The access token supplied is expired.",a[i.ErrorCode.Throttled]="You have exceeded your quota.",a[i.ErrorCode.ServerError]="An error occurred when calling the server to process the text.",a[i.ErrorCode.InvalidSubdomain]="The subdomain supplied is invalid.";var s=!1;function d(e){return!!e&&new RegExp("^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])$").test(e)}t.launchAsync=function(e,t,r,u){return s?Promise.reject("Immersive Reader is already launching"):new Promise((function(l,c){if(e)if(r)if(r.chunks)if(r.chunks.length)if(d(t)||u&&u.customDomain){s=!0;var m=Date.now();(u=n({uiZIndex:1e3,timeout:15e3,useWebview:!1,allowFullscreen:!0,hideExitButton:!1,cookiePolicy:o.CookiePolicy.Disable},u)).uiZIndex&&"number"==typeof u.uiZIndex||(u.uiZIndex=1e3);var f=null,p=document.createElement("div"),v=u.useWebview?document.createElement("webview"):document.createElement("iframe");v.allow="autoplay";var h=document.createElement("style");h.innerHTML="body{height:100%;overflow:hidden;}";var b=function(){f&&(window.clearTimeout(f),f=null)},g=function(){document.body.contains(p)&&document.body.removeChild(p),window.removeEventListener("message",k),b(),h.parentNode&&h.parentNode.removeChild(h)},y=function(){if(g(),u.onExit)try{u.onExit()}catch(e){}};g();var k=function(n){if(n&&n.data&&"string"==typeof n.data)if("ImmersiveReader-ReadyForContent"===n.data){b();var o={cogSvcsAccessToken:e,cogSvcsSubdomain:t,request:r,launchToPostMessageSentDurationInMs:Date.now()-m,disableFirstRun:u.disableFirstRun,readAloudOptions:u.readAloudOptions,translationOptions:u.translationOptions,displayOptions:u.displayOptions,sendPreferences:!!u.onPreferencesChanged,preferences:u.preferences};v.contentWindow.postMessage(JSON.stringify({messageType:"Content",messageValue:o}),"*")}else if("ImmersiveReader-Exit"===n.data)y();else if(n.data.startsWith("ImmersiveReader-LaunchResponse:")){var d=null,f=null,h=null;try{h=JSON.parse(n.data.substring(31))}catch(e){}h&&h.success?d={container:p,sessionId:h.sessionId,charactersProcessed:h.meteredContentSize}:f=h&&!h.success?{code:h.errorCode,message:a[h.errorCode],sessionId:h.sessionId}:{code:i.ErrorCode.ServerError,message:a[i.ErrorCode.ServerError]},s=!1,d?(b(),l(d)):f&&(y(),c(f))}else if(n.data.startsWith("ImmersiveReader-Preferences:")&&u.onPreferencesChanged&&"function"==typeof u.onPreferencesChanged)try{u.onPreferencesChanged(n.data.substring(28))}catch(e){}};window.addEventListener("message",k),f=window.setTimeout((function(){g(),s=!1,c({code:i.ErrorCode.Timeout,message:"Page failed to load after timeout ("+u.timeout+" ms)"})}),u.timeout),u.allowFullscreen&&v.setAttribute("allowfullscreen",""),v.style.cssText="position: static; width: 100vw; height: 100vh; left: 0; top: 0; border-width: 0",u.useWebview&&v.addEventListener("loadstop",(function(){v.contentWindow.postMessage(JSON.stringify({messageType:"WebviewHost"}),"*")}));var w=(u.customDomain?u.customDomain:"https://"+t+".cognitiveservices.azure.com/immersivereader/webapp/v1.0/")+"reader?exitCallback=ImmersiveReader-Exit&sdkPlatform=js&sdkVersion=1.1.0";w+="&cookiePolicy="+(u.cookiePolicy===o.CookiePolicy.Enable?"enable":"disable"),u.hideExitButton&&(w+="&hideExitButton=true"),u.uiLang&&(w+="&omkt="+u.uiLang),v.src=w,p.style.cssText="position: fixed; width: 100vw; height: 100vh; left: 0; top: 0; border-width: 0; -webkit-perspective: 1px; z-index: "+u.uiZIndex+"; background: white; overflow: hidden",p.appendChild(v),document.body.appendChild(p),document.head.appendChild(h)}else c({code:i.ErrorCode.InvalidSubdomain,message:a[i.ErrorCode.InvalidSubdomain]});else c({code:i.ErrorCode.BadArgument,message:"Chunks must not be empty"});else c({code:i.ErrorCode.BadArgument,message:"Chunks must not be null"});else c({code:i.ErrorCode.BadArgument,message:"Content must not be null"});else c({code:i.ErrorCode.BadArgument,message:"Token must not be null"})}))},t.close=function(){window.postMessage("ImmersiveReader-Exit","*")},t.isValidSubdomain=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorCode=void 0,function(e){e.BadArgument="BadArgument",e.Timeout="Timeout",e.TokenExpired="TokenExpired",e.Throttled="Throttled",e.ServerError="ServerError",e.InvalidSubdomain="InvalidSubdomain"}(t.ErrorCode||(t.ErrorCode={}))}])},"./node_modules/vmsg/vmsg.js":(__unused_webpack_module,exports)=>{"use strict";function pad2(n){return(n|=0)<10?"0".concat(n):"".concat(Math.min(n,99))}function inlineWorker(){function fetchAndInstantiateFallback(url,imports){return new Promise((function(resolve,reject){var req=new XMLHttpRequest;req.open("GET",url),req.responseType="arraybuffer",req.onload=function(){resolve(WebAssembly.instantiate(req.response,imports))},req.onerror=reject,req.send()}))}var memory=null,dynamicTop=5242880;function sbrk(increment){var oldDynamicTop=dynamicTop;return dynamicTop+=increment,oldDynamicTop}function exit(status){postMessage({type:"internal-error",data:status})}var FFI=null,ref=null,pcm_l=null;onmessage=function onmessage(e){var msg=e.data;switch(msg.type){case"init":var _msg$data=msg.data,wasmURL=_msg$data.wasmURL,shimURL=_msg$data.shimURL;Promise.resolve().then((function(){return self.WebAssembly&&!function testSafariWebAssemblyBug(){var bin=new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,127,1,127,3,2,1,0,5,3,1,0,1,7,8,1,4,116,101,115,116,0,0,10,16,1,14,0,32,0,65,1,54,2,0,32,0,40,2,0,11]),mod=new WebAssembly.Module(bin);return 0!==new WebAssembly.Instance(mod,{}).exports.test(4)}()&&delete self.WebAssembly,self.WebAssembly||importScripts(shimURL),{memory:memory=new WebAssembly.Memory({initial:256,maximum:256}),pow:Math.pow,exit,powf:Math.pow,exp:Math.exp,sqrtf:Math.sqrt,cos:Math.cos,log:Math.log,sin:Math.sin,sbrk}})).then((function(Runtime){return function fetchAndInstantiate(url,imports){if(!WebAssembly.instantiateStreaming)return fetchAndInstantiateFallback(url,imports);var req=fetch(url,{credentials:"same-origin"});return WebAssembly.instantiateStreaming(req,imports).catch((function(err){if(err.message&&err.message.indexOf("Argument 0 must be provided and must be a Response")>0)return fetchAndInstantiateFallback(url,imports);throw err}))}(wasmURL,{env:Runtime})})).then((function(wasm){FFI=wasm.instance.exports,postMessage({type:"init",data:null})})).catch((function(err){postMessage({type:"init-error",data:err.toString()})}));break;case"start":if(!function vmsg_init(rate){if(!(ref=FFI.vmsg_init(rate)))return!1;var pcm_l_ref=new Uint32Array(memory.buffer,ref,1)[0];return pcm_l=new Float32Array(memory.buffer,pcm_l_ref),!0}(msg.data))return postMessage({type:"error",data:"vmsg_init"});break;case"data":if(!function vmsg_encode(data){return pcm_l.set(data),FFI.vmsg_encode(ref,data.length)>=0}(msg.data))return postMessage({type:"error",data:"vmsg_encode"});break;case"stop":var blob=function vmsg_flush(){if(FFI.vmsg_flush(ref)<0)return null;var mp3_ref=new Uint32Array(memory.buffer,ref+4,1)[0],size=new Uint32Array(memory.buffer,ref+8,1)[0],mp3=new Uint8Array(memory.buffer,mp3_ref,size),blob=new Blob([mp3],{type:"audio/mpeg"});return FFI.vmsg_free(ref),ref=null,pcm_l=null,blob}();if(!blob)return postMessage({type:"error",data:"vmsg_flush"});postMessage({type:"stop",data:blob})}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Recorder=exports.Form=void 0,exports.record=record;var Recorder=exports.Recorder=function(){function Recorder(){var opts=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},onStop=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.wasmURL=new URL(opts.wasmURL||"/static/js/vmsg.wasm",location).href,this.shimURL=new URL(opts.shimURL||"/static/js/wasm-polyfill.js",location).href,this.onStop=onStop,this.pitch=opts.pitch||0,this.stream=null,this.audioCtx=null,this.gainNode=null,this.pitchFX=null,this.encNode=null,this.worker=null,this.workerURL=null,this.blob=null,this.blobURL=null,this.resolve=null,this.reject=null,Object.seal(this)}var _proto=Recorder.prototype;return _proto.close=function close(){this.encNode&&this.encNode.disconnect(),this.encNode&&(this.encNode.onaudioprocess=null),this.stream&&this.stopTracks(),this.audioCtx&&this.audioCtx.close(),this.worker&&this.worker.terminate(),this.workerURL&&URL.revokeObjectURL(this.workerURL),this.blobURL&&URL.revokeObjectURL(this.blobURL)},_proto.initAudio=function initAudio(){var _this=this;return(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?function(constraints){return navigator.mediaDevices.getUserMedia(constraints)}:function(constraints){var oldGetUserMedia=navigator.webkitGetUserMedia||navigator.mozGetUserMedia;return oldGetUserMedia?new Promise((function(resolve,reject){oldGetUserMedia.call(navigator,constraints,resolve,reject)})):Promise.reject(new Error("getUserMedia is not implemented in this browser"))})({audio:!0}).then((function(stream){_this.stream=stream;var audioCtx=_this.audioCtx=new(window.AudioContext||window.webkitAudioContext),sourceNode=audioCtx.createMediaStreamSource(stream),gainNode=_this.gainNode=(audioCtx.createGain||audioCtx.createGainNode).call(audioCtx);gainNode.gain.value=1,sourceNode.connect(gainNode);var pitchFX=_this.pitchFX=new Jungle(audioCtx);pitchFX.setPitchOffset(_this.pitch);var encNode=_this.encNode=(audioCtx.createScriptProcessor||audioCtx.createJavaScriptNode).call(audioCtx,0,1,1);pitchFX.output.connect(encNode),gainNode.connect(0===_this.pitch?encNode:pitchFX.input)}))},_proto.initWorker=function initWorker(){var _this2=this;if(!this.stream)throw new Error("missing audio initialization");var blob=new Blob(["(",inlineWorker.toString(),")()"],{type:"application/javascript"}),workerURL=this.workerURL=URL.createObjectURL(blob),worker=this.worker=new Worker(workerURL),wasmURL=this.wasmURL,shimURL=this.shimURL;return worker.postMessage({type:"init",data:{wasmURL,shimURL}}),new Promise((function(resolve,reject){worker.onmessage=function(e){var msg=e.data;switch(msg.type){case"init":resolve();break;case"init-error":reject(new Error(msg.data));break;case"error":case"internal-error":console.error("Worker error:",msg.data),_this2.reject&&_this2.reject(msg.data);break;case"stop":_this2.blob=msg.data,_this2.blobURL=URL.createObjectURL(msg.data),_this2.onStop&&_this2.onStop(),_this2.resolve&&_this2.resolve(_this2.blob)}}}))},_proto.init=function init(){return this.initAudio().then(this.initWorker.bind(this))},_proto.startRecording=function startRecording(){var _this3=this;if(!this.stream)throw new Error("missing audio initialization");if(!this.worker)throw new Error("missing worker initialization");this.blob=null,this.blobURL&&URL.revokeObjectURL(this.blobURL),this.blobURL=null,this.resolve=null,this.reject=null,this.worker.postMessage({type:"start",data:this.audioCtx.sampleRate}),this.encNode.onaudioprocess=function(e){var samples=e.inputBuffer.getChannelData(0);_this3.worker.postMessage({type:"data",data:samples})},this.encNode.connect(this.audioCtx.destination)},_proto.stopRecording=function stopRecording(){var _this4=this;if(!this.stream)throw new Error("missing audio initialization");if(!this.worker)throw new Error("missing worker initialization");return this.encNode.disconnect(),this.encNode.onaudioprocess=null,this.stopTracks(),this.worker.postMessage({type:"stop",data:null}),new Promise((function(resolve,reject){_this4.resolve=resolve,_this4.reject=reject}))},_proto.stopTracks=function stopTracks(){this.stream.getTracks&&this.stream.getTracks().forEach((function(track){return track.stop()}))},Recorder}(),Form=exports.Form=function(){function Form(){var _this5=this,opts=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},resolve=arguments.length>1?arguments[1]:void 0,reject=arguments.length>2?arguments[2]:void 0;this.recorder=new Recorder(opts,this.onStop.bind(this)),this.resolve=resolve,this.reject=reject,this.backdrop=null,this.popup=null,this.recordBtn=null,this.stopBtn=null,this.timer=null,this.audio=null,this.saveBtn=null,this.tid=0,this.start=0,Object.seal(this),this.recorder.initAudio().then((function(){return _this5.drawInit()})).then((function(){return _this5.recorder.initWorker()})).then((function(){return _this5.drawAll()})).catch((function(err){return _this5.drawError(err)}))}var _proto2=Form.prototype;return _proto2.drawInit=function drawInit(){var _this6=this;if(!this.backdrop){var backdrop=this.backdrop=document.createElement("div");backdrop.className="vmsg-backdrop",backdrop.addEventListener("click",(function(){return _this6.close(null)}));var popup=this.popup=document.createElement("div");popup.className="vmsg-popup",popup.addEventListener("click",(function(e){return e.stopPropagation()}));var progress=document.createElement("div");progress.className="vmsg-progress";for(var i=0;i<3;i++){var progressDot=document.createElement("div");progressDot.className="vmsg-progress-dot",progress.appendChild(progressDot)}popup.appendChild(progress),backdrop.appendChild(popup),document.body.appendChild(backdrop)}},_proto2.drawTime=function drawTime(msecs){var secs=Math.round(msecs/1e3);this.timer.textContent=pad2(secs/60)+":"+pad2(secs%60)},_proto2.drawAll=function drawAll(){var _this7=this;this.drawInit(),this.clearAll();var recordRow=document.createElement("div");recordRow.className="vmsg-record-row",this.popup.appendChild(recordRow);var recordBtn=this.recordBtn=document.createElement("button");recordBtn.className="vmsg-button vmsg-record-button",recordBtn.textContent="●",recordBtn.addEventListener("click",(function(){return _this7.startRecording()})),recordRow.appendChild(recordBtn);var stopBtn=this.stopBtn=document.createElement("button");stopBtn.className="vmsg-button vmsg-stop-button",stopBtn.style.display="none",stopBtn.textContent="■",stopBtn.addEventListener("click",(function(){return _this7.stopRecording()})),recordRow.appendChild(stopBtn);var audio=this.audio=new Audio;audio.autoplay=!0;var timer=this.timer=document.createElement("span");timer.className="vmsg-timer",timer.addEventListener("click",(function(){audio.paused?_this7.recorder.blobURL&&(audio.src=_this7.recorder.blobURL):audio.pause()})),this.drawTime(0),recordRow.appendChild(timer);var saveBtn=this.saveBtn=document.createElement("button");saveBtn.className="vmsg-button vmsg-save-button",saveBtn.textContent="✓",saveBtn.disabled=!0,saveBtn.addEventListener("click",(function(){return _this7.close(_this7.recorder.blob)})),recordRow.appendChild(saveBtn);var gainWrapper=document.createElement("div");gainWrapper.className="vmsg-slider-wrapper vmsg-gain-slider-wrapper";var gainSlider=document.createElement("input");gainSlider.className="vmsg-slider vmsg-gain-slider",gainSlider.setAttribute("type","range"),gainSlider.min=0,gainSlider.max=2,gainSlider.step=.2,gainSlider.value=1,gainSlider.onchange=function(){var gain=+gainSlider.value;_this7.recorder.gainNode.gain.value=gain},gainWrapper.appendChild(gainSlider),this.popup.appendChild(gainWrapper);var pitchWrapper=document.createElement("div");pitchWrapper.className="vmsg-slider-wrapper vmsg-pitch-slider-wrapper";var pitchSlider=document.createElement("input");pitchSlider.className="vmsg-slider vmsg-pitch-slider",pitchSlider.setAttribute("type","range"),pitchSlider.min=-1,pitchSlider.max=1,pitchSlider.step=.2,pitchSlider.value=this.recorder.pitch,pitchSlider.onchange=function(){var pitch=+pitchSlider.value;_this7.recorder.pitchFX.setPitchOffset(pitch),_this7.recorder.gainNode.disconnect(),_this7.recorder.gainNode.connect(0===pitch?_this7.recorder.encNode:_this7.recorder.pitchFX.input)},pitchWrapper.appendChild(pitchSlider),this.popup.appendChild(pitchWrapper)},_proto2.drawError=function drawError(err){console.error(err),this.drawInit(),this.clearAll();var error=document.createElement("div");error.className="vmsg-error",error.textContent=err.toString(),this.popup.appendChild(error)},_proto2.clearAll=function clearAll(){this.popup&&(this.popup.innerHTML="")},_proto2.close=function close(blob){this.audio&&this.audio.pause(),this.tid&&clearTimeout(this.tid),this.recorder.close(),this.backdrop.remove(),blob?this.resolve(blob):this.reject(new Error("No record made"))},_proto2.onStop=function onStop(){this.recordBtn.style.display="",this.stopBtn.style.display="none",this.stopBtn.disabled=!1,this.saveBtn.disabled=!1},_proto2.startRecording=function startRecording(){this.audio.pause(),this.start=Date.now(),this.updateTime(),this.recordBtn.style.display="none",this.stopBtn.style.display="",this.saveBtn.disabled=!0,this.recorder.startRecording()},_proto2.stopRecording=function stopRecording(){clearTimeout(this.tid),this.tid=0,this.stopBtn.disabled=!0,this.recorder.stopRecording()},_proto2.updateTime=function updateTime(){var _this8=this;this.drawTime(Date.now()-this.start),this.tid=setTimeout((function(){return _this8.updateTime()}),300)},Form}(),shown=!1;function record(opts){return new Promise((function(resolve,reject){if(shown)throw new Error("Record form is already opened");shown=!0,new Form(opts,resolve,reject)})).then((function(result){return shown=!1,result}),(function(err){throw shown=!1,err}))}exports.default={Recorder,Form,record};var delayTime=.1,fadeTime=.05,bufferTime=.1;function createDelayTimeBuffer(context,activeTime,fadeTime,shiftUp){for(var length1=activeTime*context.sampleRate,length=length1+(activeTime-2*fadeTime)*context.sampleRate,buffer=context.createBuffer(1,length,context.sampleRate),p=buffer.getChannelData(0),i=0;i<length1;++i)p[i]=shiftUp?(length1-i)/length:i/length1;for(i=length1;i<length;++i)p[i]=0;return buffer}function Jungle(context){this.context=context;var input=(context.createGain||context.createGainNode).call(context),output=(context.createGain||context.createGainNode).call(context);this.input=input,this.output=output;var mod1=context.createBufferSource(),mod2=context.createBufferSource(),mod3=context.createBufferSource(),mod4=context.createBufferSource();this.shiftDownBuffer=createDelayTimeBuffer(context,bufferTime,fadeTime,!1),this.shiftUpBuffer=createDelayTimeBuffer(context,bufferTime,fadeTime,!0),mod1.buffer=this.shiftDownBuffer,mod2.buffer=this.shiftDownBuffer,mod3.buffer=this.shiftUpBuffer,mod4.buffer=this.shiftUpBuffer,mod1.loop=!0,mod2.loop=!0,mod3.loop=!0,mod4.loop=!0;var mod1Gain=(context.createGain||context.createGainNode).call(context),mod2Gain=(context.createGain||context.createGainNode).call(context),mod3Gain=(context.createGain||context.createGainNode).call(context);mod3Gain.gain.value=0;var mod4Gain=(context.createGain||context.createGainNode).call(context);mod4Gain.gain.value=0,mod1.connect(mod1Gain),mod2.connect(mod2Gain),mod3.connect(mod3Gain),mod4.connect(mod4Gain);var modGain1=(context.createGain||context.createGainNode).call(context),modGain2=(context.createGain||context.createGainNode).call(context),delay1=(context.createDelay||context.createDelayNode).call(context),delay2=(context.createDelay||context.createDelayNode).call(context);mod1Gain.connect(modGain1),mod2Gain.connect(modGain2),mod3Gain.connect(modGain1),mod4Gain.connect(modGain2),modGain1.connect(delay1.delayTime),modGain2.connect(delay2.delayTime);var fade1=context.createBufferSource(),fade2=context.createBufferSource(),fadeBuffer=function createFadeBuffer(context,activeTime,fadeTime){for(var length1=activeTime*context.sampleRate,length=length1+(activeTime-2*fadeTime)*context.sampleRate,buffer=context.createBuffer(1,length,context.sampleRate),p=buffer.getChannelData(0),fadeLength=fadeTime*context.sampleRate,fadeIndex1=fadeLength,fadeIndex2=length1-fadeLength,i=0;i<length1;++i){var value;value=i<fadeIndex1?Math.sqrt(i/fadeLength):i>=fadeIndex2?Math.sqrt(1-(i-fadeIndex2)/fadeLength):1,p[i]=value}for(i=length1;i<length;++i)p[i]=0;return buffer}(context,bufferTime,fadeTime);fade1.buffer=fadeBuffer,fade2.buffer=fadeBuffer,fade1.loop=!0,fade2.loop=!0;var mix1=(context.createGain||context.createGainNode).call(context),mix2=(context.createGain||context.createGainNode).call(context);mix1.gain.value=0,mix2.gain.value=0,fade1.connect(mix1.gain),fade2.connect(mix2.gain),input.connect(delay1),input.connect(delay2),delay1.connect(mix1),delay2.connect(mix2),mix1.connect(output),mix2.connect(output);var t=context.currentTime+.05,t2=t+bufferTime-fadeTime;mod1.start(t),mod2.start(t2),mod3.start(t),mod4.start(t2),fade1.start(t),fade2.start(t2),this.mod1=mod1,this.mod2=mod2,this.mod1Gain=mod1Gain,this.mod2Gain=mod2Gain,this.mod3Gain=mod3Gain,this.mod4Gain=mod4Gain,this.modGain1=modGain1,this.modGain2=modGain2,this.fade1=fade1,this.fade2=fade2,this.mix1=mix1,this.mix2=mix2,this.delay1=delay1,this.delay2=delay2,this.setDelay(delayTime)}Jungle.prototype.setDelay=function(delayTime){this.modGain1.gain.setTargetAtTime(.5*delayTime,0,.01),this.modGain2.gain.setTargetAtTime(.5*delayTime,0,.01)},Jungle.prototype.setPitchOffset=function(mult){mult>0?(this.mod1Gain.gain.value=0,this.mod2Gain.gain.value=0,this.mod3Gain.gain.value=1,this.mod4Gain.gain.value=1):(this.mod1Gain.gain.value=1,this.mod2Gain.gain.value=1,this.mod3Gain.gain.value=0,this.mod4Gain.gain.value=0),this.setDelay(delayTime*Math.abs(mult))}},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/dom-confetti/lib/main.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.confetti=function confetti(root){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_Object$assign=Object.assign({},defaults,function backwardPatch(config){!config.stagger&&config.delay&&(config.stagger=config.delay);return config}(config)),elementCount=_Object$assign.elementCount,colors=_Object$assign.colors,width=_Object$assign.width,height=_Object$assign.height,perspective=_Object$assign.perspective,angle=_Object$assign.angle,spread=_Object$assign.spread,startVelocity=_Object$assign.startVelocity,decay=_Object$assign.decay,dragFriction=_Object$assign.dragFriction,duration=_Object$assign.duration,stagger=_Object$assign.stagger,random=_Object$assign.random;root.style.perspective=perspective;var fettis=function createElements(root,elementCount,colors,width,height){return Array.from({length:elementCount}).map((function(_,index){var element=document.createElement("div"),color=colors[index%colors.length];return element.style["background-color"]=color,element.style.width=width,element.style.height=height,element.style.position="absolute",element.style.willChange="transform, opacity",element.style.visibility="hidden",root.appendChild(element),element}))}(root,elementCount,colors,width,height).map((function(element){return{element,physics:randomPhysics(angle,spread,startVelocity,random)}}));return function animate(root,fettis,dragFriction,decay,duration,stagger){var startTime=void 0;return new Promise((function(resolve){function update(time){startTime||(startTime=time);var elapsed=time-startTime,progress=startTime===time?0:(time-startTime)/duration;fettis.slice(0,Math.ceil(elapsed/stagger)).forEach((function(fetti){!function updateFetti(fetti,progress,dragFriction,decay){fetti.physics.x+=Math.cos(fetti.physics.angle2D)*fetti.physics.velocity,fetti.physics.y+=Math.sin(fetti.physics.angle2D)*fetti.physics.velocity,fetti.physics.z+=Math.sin(fetti.physics.angle3D)*fetti.physics.velocity,fetti.physics.wobble+=fetti.physics.wobbleSpeed,decay?fetti.physics.velocity*=decay:fetti.physics.velocity-=fetti.physics.velocity*dragFriction;fetti.physics.y+=3,fetti.physics.tiltAngle+=fetti.physics.tiltAngleSpeed;var _fetti$physics=fetti.physics,x=_fetti$physics.x,y=_fetti$physics.y,z=_fetti$physics.z,tiltAngle=_fetti$physics.tiltAngle,wobble=_fetti$physics.wobble,wobbleX=x+10*Math.cos(wobble),wobbleY=y+10*Math.sin(wobble),transform="translate3d("+wobbleX+"px, "+wobbleY+"px, "+z+"px) rotate3d(1, 1, 1, "+tiltAngle+"rad)";fetti.element.style.visibility="visible",fetti.element.style.transform=transform,fetti.element.style.opacity=1-progress}(fetti,progress,dragFriction,decay)})),time-startTime<duration?requestAnimationFrame(update):(fettis.forEach((function(fetti){if(fetti.element.parentNode===root)return root.removeChild(fetti.element)})),resolve())}requestAnimationFrame(update)}))}(root,fettis,dragFriction,decay,duration,stagger)};function randomPhysics(angle,spread,startVelocity,random){var radAngle=angle*(Math.PI/180),radSpread=spread*(Math.PI/180);return{x:0,y:0,z:0,wobble:10*random(),wobbleSpeed:.1+.1*random(),velocity:.5*startVelocity+random()*startVelocity,angle2D:-radAngle+(.5*radSpread-random()*radSpread),angle3D:-Math.PI/4+random()*(Math.PI/2),tiltAngle:random()*Math.PI,tiltAngleSpeed:.1+.3*random()}}var defaults={angle:90,spread:45,startVelocity:45,elementCount:50,width:"10px",height:"10px",perspective:"",colors:["#a864fd","#29cdff","#78ff44","#ff718d","#fdff6a"],duration:3e3,stagger:0,dragFriction:.1,random:Math.random}},"./node_modules/events/events.js":module=>{"use strict";var ReflectOwnKeys,R="object"==typeof Reflect?Reflect:null,ReflectApply=R&&"function"==typeof R.apply?R.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args)};ReflectOwnKeys=R&&"function"==typeof R.ownKeys?R.ownKeys:Object.getOwnPropertySymbols?function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))}:function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target)};var NumberIsNaN=Number.isNaN||function NumberIsNaN(value){return value!=value};function EventEmitter(){EventEmitter.init.call(this)}module.exports=EventEmitter,module.exports.once=function once(emitter,name){return new Promise((function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver),reject(err)}function resolver(){"function"==typeof emitter.removeListener&&emitter.removeListener("error",errorListener),resolve([].slice.call(arguments))}eventTargetAgnosticAddListener(emitter,name,resolver,{once:!0}),"error"!==name&&function addErrorHandlerIfEventEmitter(emitter,handler,flags){"function"==typeof emitter.on&&eventTargetAgnosticAddListener(emitter,"error",handler,flags)}(emitter,errorListener,{once:!0})}))},EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._eventsCount=0,EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;function checkListener(listener){if("function"!=typeof listener)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener)}function _getMaxListeners(that){return void 0===that._maxListeners?EventEmitter.defaultMaxListeners:that._maxListeners}function _addListener(target,type,listener,prepend){var m,events,existing;if(checkListener(listener),void 0===(events=target._events)?(events=target._events=Object.create(null),target._eventsCount=0):(void 0!==events.newListener&&(target.emit("newListener",type,listener.listener?listener.listener:listener),events=target._events),existing=events[type]),void 0===existing)existing=events[type]=listener,++target._eventsCount;else if("function"==typeof existing?existing=events[type]=prepend?[listener,existing]:[existing,listener]:prepend?existing.unshift(listener):existing.push(listener),(m=_getMaxListeners(target))>0&&existing.length>m&&!existing.warned){existing.warned=!0;var w=new Error("Possible EventEmitter memory leak detected. "+existing.length+" "+String(type)+" listeners added. Use emitter.setMaxListeners() to increase limit");w.name="MaxListenersExceededWarning",w.emitter=target,w.type=type,w.count=existing.length,function ProcessEmitWarning(warning){console&&console.warn&&console.warn(warning)}(w)}return target}function onceWrapper(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _onceWrap(target,type,listener){var state={fired:!1,wrapFn:void 0,target,type,listener},wrapped=onceWrapper.bind(state);return wrapped.listener=listener,state.wrapFn=wrapped,wrapped}function _listeners(target,type,unwrap){var events=target._events;if(void 0===events)return[];var evlistener=events[type];return void 0===evlistener?[]:"function"==typeof evlistener?unwrap?[evlistener.listener||evlistener]:[evlistener]:unwrap?function unwrapListeners(arr){for(var ret=new Array(arr.length),i=0;i<ret.length;++i)ret[i]=arr[i].listener||arr[i];return ret}(evlistener):arrayClone(evlistener,evlistener.length)}function listenerCount(type){var events=this._events;if(void 0!==events){var evlistener=events[type];if("function"==typeof evlistener)return 1;if(void 0!==evlistener)return evlistener.length}return 0}function arrayClone(arr,n){for(var copy=new Array(n),i=0;i<n;++i)copy[i]=arr[i];return copy}function eventTargetAgnosticAddListener(emitter,name,listener,flags){if("function"==typeof emitter.on)flags.once?emitter.once(name,listener):emitter.on(name,listener);else{if("function"!=typeof emitter.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);emitter.addEventListener(name,(function wrapListener(arg){flags.once&&emitter.removeEventListener(name,wrapListener),listener(arg)}))}}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(arg){if("number"!=typeof arg||arg<0||NumberIsNaN(arg))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+".");defaultMaxListeners=arg}}),EventEmitter.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){if("number"!=typeof n||n<0||NumberIsNaN(n))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+".");return this._maxListeners=n,this},EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners(this)},EventEmitter.prototype.emit=function emit(type){for(var args=[],i=1;i<arguments.length;i++)args.push(arguments[i]);var doError="error"===type,events=this._events;if(void 0!==events)doError=doError&&void 0===events.error;else if(!doError)return!1;if(doError){var er;if(args.length>0&&(er=args[0]),er instanceof Error)throw er;var err=new Error("Unhandled error."+(er?" ("+er.message+")":""));throw err.context=er,err}var handler=events[type];if(void 0===handler)return!1;if("function"==typeof handler)ReflectApply(handler,this,args);else{var len=handler.length,listeners=arrayClone(handler,len);for(i=0;i<len;++i)ReflectApply(listeners[i],this,args)}return!0},EventEmitter.prototype.addListener=function addListener(type,listener){return _addListener(this,type,listener,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function prependListener(type,listener){return _addListener(this,type,listener,!0)},EventEmitter.prototype.once=function once(type,listener){return checkListener(listener),this.on(type,_onceWrap(this,type,listener)),this},EventEmitter.prototype.prependOnceListener=function prependOnceListener(type,listener){return checkListener(listener),this.prependListener(type,_onceWrap(this,type,listener)),this},EventEmitter.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;if(checkListener(listener),void 0===(events=this._events))return this;if(void 0===(list=events[type]))return this;if(list===listener||list.listener===listener)0==--this._eventsCount?this._events=Object.create(null):(delete events[type],events.removeListener&&this.emit("removeListener",type,list.listener||listener));else if("function"!=typeof list){for(position=-1,i=list.length-1;i>=0;i--)if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener,position=i;break}if(position<0)return this;0===position?list.shift():function spliceOne(list,index){for(;index+1<list.length;index++)list[index]=list[index+1];list.pop()}(list,position),1===list.length&&(events[type]=list[0]),void 0!==events.removeListener&&this.emit("removeListener",type,originalListener||listener)}return this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;if(void 0===(events=this._events))return this;if(void 0===events.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==events[type]&&(0==--this._eventsCount?this._events=Object.create(null):delete events[type]),this;if(0===arguments.length){var key,keys=Object.keys(events);for(i=0;i<keys.length;++i)"removeListener"!==(key=keys[i])&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(listeners=events[type]))this.removeListener(type,listeners);else if(void 0!==listeners)for(i=listeners.length-1;i>=0;i--)this.removeListener(type,listeners[i]);return this},EventEmitter.prototype.listeners=function listeners(type){return _listeners(this,type,!0)},EventEmitter.prototype.rawListeners=function rawListeners(type){return _listeners(this,type,!1)},EventEmitter.listenerCount=function(emitter,type){return"function"==typeof emitter.listenerCount?emitter.listenerCount(type):listenerCount.call(emitter,type)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]}},"./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactIs=__webpack_require__("./node_modules/react-is/index.js"),REACT_STATICS={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},KNOWN_STATICS={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},MEMO_STATICS={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},TYPE_STATICS={};function getStatics(component){return ReactIs.isMemo(component)?MEMO_STATICS:TYPE_STATICS[component.$$typeof]||REACT_STATICS}TYPE_STATICS[ReactIs.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var defineProperty=Object.defineProperty,getOwnPropertyNames=Object.getOwnPropertyNames,getOwnPropertySymbols=Object.getOwnPropertySymbols,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,getPrototypeOf=Object.getPrototypeOf,objectPrototype=Object.prototype;module.exports=function hoistNonReactStatics(targetComponent,sourceComponent,blacklist){if("string"!=typeof sourceComponent){if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);inheritedComponent&&inheritedComponent!==objectPrototype&&hoistNonReactStatics(targetComponent,inheritedComponent,blacklist)}var keys=getOwnPropertyNames(sourceComponent);getOwnPropertySymbols&&(keys=keys.concat(getOwnPropertySymbols(sourceComponent)));for(var targetStatics=getStatics(targetComponent),sourceStatics=getStatics(sourceComponent),i=0;i<keys.length;++i){var key=keys[i];if(!(KNOWN_STATICS[key]||blacklist&&blacklist[key]||sourceStatics&&sourceStatics[key]||targetStatics&&targetStatics[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor)}catch(e){}}}return targetComponent}return targetComponent}},"./node_modules/inline-worker/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var WORKER_ENABLED=!!(__webpack_require__.g===__webpack_require__.g.window&&__webpack_require__.g.URL&&__webpack_require__.g.Blob&&__webpack_require__.g.Worker);function InlineWorker(func,self){var functionBody,_this=this;if(self=self||{},WORKER_ENABLED)return functionBody=func.toString().trim().match(/^function\s*\w*\s*\([\w\s,]*\)\s*{([\w\W]*?)}$/)[1],new __webpack_require__.g.Worker(__webpack_require__.g.URL.createObjectURL(new __webpack_require__.g.Blob([functionBody],{type:"text/javascript"})));this.self=self,this.self.postMessage=function postMessage(data){setTimeout((function(){_this.onmessage({data})}),0)},setTimeout(func.bind(self,self),0)}InlineWorker.prototype.postMessage=function postMessage(data){var _this=this;setTimeout((function(){_this.self.onmessage({data})}),0)},module.exports=InlineWorker},"./node_modules/loadable-components/dist/loadable-components.es.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LOADABLE:()=>LOADABLE,componentTracker:()=>componentTracker,default:()=>__WEBPACK_DEFAULT_EXPORT__,getState:()=>getState,loadComponents:()=>loadComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"),hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},components={},track=function track(component,modules){var index=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,id=modules.join("-");return index&&(id+="-"+index),components[id]?track(component,modules,index+1):(components[id]=component,id)},get$1=function get$$1(id){return components[id]},getAll=function getAll(){return _extends({},components)},LOADABLE_STATE="__LOADABLE_STATE__",LOADABLE="@@loadable-components/loadable";function loadState(rootState){return rootState.children?Promise.all(rootState.children.map((function(state){var component=get$1(state.id);if(!component)return console.warn("loadable-component client modules:",getAll()),console.warn("loadable-component server modules:",window[LOADABLE_STATE]),Promise.reject(new Error('loadable-components: module "'+state.id+'" is not found, client and server modules are not sync. You are probably not using the same resolver on server and client.'));var getLoadable=component[LOADABLE];return"function"!=typeof getLoadable?Promise.reject(new Error('loadable-components: module "'+state.id+'" is not a loadable component, please verify your SSR setup')):getLoadable().load().then((function(){return loadState(state)}))}))):Promise.resolve(null)}function loadComponents(){if("undefined"==typeof window)return Promise.reject(new Error("loadable-components: `loadComponents` must be called client-side: `window` is undefined"));var state=window[LOADABLE_STATE];return state?loadState(state):Promise.reject(new Error("loadable-components state not found. You have a problem server-side. Please verify that you have called `loadableState.getScriptTag()` server-side."))}function getState(){var _ref,componentByIds=getAll(),children=Object.keys(componentByIds).reduce((function(ids,id){var component=componentByIds[id];return component.loadingPromise?[].concat(ids,[{id:component.componentId}]):ids}),[]);return(_ref={})[LOADABLE_STATE]={children},_ref}var EmptyComponent=function EmptyComponent(){return null};var componentTracker=Object.freeze({track,get:get$1,getAll,reset:function reset(){components={}}});const __WEBPACK_DEFAULT_EXPORT__=function loadable(getComponent){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$ErrorComponent=_ref.ErrorComponent,ErrorComponent=void 0===_ref$ErrorComponent?EmptyComponent:_ref$ErrorComponent,_ref$LoadingComponent=_ref.LoadingComponent,LoadingComponent=void 0===_ref$LoadingComponent?EmptyComponent:_ref$LoadingComponent,_render=_ref.render,modules=_ref.modules,asyncMode=_ref.asyncMode,LoadableComponent=function(_React$Component){function LoadableComponent(props){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,LoadableComponent);var _this=function(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.call(this,props));return _this.state={Component:LoadableComponent.Component,error:null,loading:!LoadableComponent.Component},_this.mounted=!1,_this.loadingPromise=null,"undefined"!=typeof window&&null===_this.state.Component&&null===_this.loadingPromise&&(_this.loadingPromise=LoadableComponent.load().then((function(Component){_this.safeSetState({Component,loading:!1})})).catch((function(error){_this.safeSetState({error,loading:!1})}))),_this}return function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(LoadableComponent,_React$Component),LoadableComponent.load=function load(){return LoadableComponent.loadingPromise||(LoadableComponent.loadingPromise=getComponent().then((function(module){var _hoistNonReactStatics,Component=function resolveModuleDefault(module){return module.default||module}(module);return LoadableComponent.Component=Component,hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default()(LoadableComponent,Component,((_hoistNonReactStatics={Component:!0,loadingPromise:!0,load:!0})[LOADABLE]=!0,_hoistNonReactStatics.componentId=!0,_hoistNonReactStatics)),Component})).catch((function(error){throw LoadableComponent.loadingPromise=null,error}))),LoadableComponent.loadingPromise},LoadableComponent.prototype.componentDidMount=function componentDidMount(){this.mounted=!0},LoadableComponent.prototype.componentWillUnmount=function componentWillUnmount(){this.mounted=!1},LoadableComponent.prototype.safeSetState=function safeSetState(state){this.mounted&&this.setState(state)},LoadableComponent.prototype.render=function render(){var _state=this.state,Component=_state.Component,error=_state.error;if("function"==typeof _render)return _render(_extends({},this.state,{ownProps:this.props}));if(null!==Component)return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,this.props);if(null!==error)return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorComponent,{error,ownProps:this.props});if(asyncMode)throw this.loadingPromise;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(LoadingComponent,this.props)},LoadableComponent}(react__WEBPACK_IMPORTED_MODULE_0__.Component);if(LoadableComponent.Component=null,LoadableComponent.loadingPromise=null,LoadableComponent[LOADABLE]=function(){return LoadableComponent},modules){var id=track(LoadableComponent,modules);LoadableComponent.componentId=id}return LoadableComponent}},"./node_modules/lodash/debounce.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isObject=__webpack_require__("./node_modules/lodash/isObject.js"),now=__webpack_require__("./node_modules/lodash/now.js"),toNumber=__webpack_require__("./node_modules/lodash/toNumber.js"),nativeMax=Math.max,nativeMin=Math.min;module.exports=function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=!1,maxing=!1,trailing=!0;if("function"!=typeof func)throw new TypeError("Expected a function");function invokeFunc(time){var args=lastArgs,thisArg=lastThis;return lastArgs=lastThis=void 0,lastInvokeTime=time,result=func.apply(thisArg,args)}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime;return void 0===lastCallTime||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&time-lastInvokeTime>=maxWait}function timerExpired(){var time=now();if(shouldInvoke(time))return trailingEdge(time);timerId=setTimeout(timerExpired,function remainingWait(time){var timeWaiting=wait-(time-lastCallTime);return maxing?nativeMin(timeWaiting,maxWait-(time-lastInvokeTime)):timeWaiting}(time))}function trailingEdge(time){return timerId=void 0,trailing&&lastArgs?invokeFunc(time):(lastArgs=lastThis=void 0,result)}function debounced(){var time=now(),isInvoking=shouldInvoke(time);if(lastArgs=arguments,lastThis=this,lastCallTime=time,isInvoking){if(void 0===timerId)return function leadingEdge(time){return lastInvokeTime=time,timerId=setTimeout(timerExpired,wait),leading?invokeFunc(time):result}(lastCallTime);if(maxing)return clearTimeout(timerId),timerId=setTimeout(timerExpired,wait),invokeFunc(lastCallTime)}return void 0===timerId&&(timerId=setTimeout(timerExpired,wait)),result}return wait=toNumber(wait)||0,isObject(options)&&(leading=!!options.leading,maxWait=(maxing="maxWait"in options)?nativeMax(toNumber(options.maxWait)||0,wait):maxWait,trailing="trailing"in options?!!options.trailing:trailing),debounced.cancel=function cancel(){void 0!==timerId&&clearTimeout(timerId),lastInvokeTime=0,lastArgs=lastCallTime=lastThis=timerId=void 0},debounced.flush=function flush(){return void 0===timerId?result:trailingEdge(now())},debounced}},"./node_modules/lodash/now.js":(module,__unused_webpack_exports,__webpack_require__)=>{var root=__webpack_require__("./node_modules/lodash/_root.js");module.exports=function(){return root.Date.now()}},"./node_modules/qr.js/lib/8BitByte.js":(module,__unused_webpack_exports,__webpack_require__)=>{var mode=__webpack_require__("./node_modules/qr.js/lib/mode.js");function QR8bitByte(data){this.mode=mode.MODE_8BIT_BYTE,this.data=data}QR8bitByte.prototype={getLength:function(buffer){return this.data.length},write:function(buffer){for(var i=0;i<this.data.length;i++)buffer.put(this.data.charCodeAt(i),8)}},module.exports=QR8bitByte},"./node_modules/qr.js/lib/BitBuffer.js":module=>{function QRBitBuffer(){this.buffer=new Array,this.length=0}QRBitBuffer.prototype={get:function(index){var bufIndex=Math.floor(index/8);return 1==(this.buffer[bufIndex]>>>7-index%8&1)},put:function(num,length){for(var i=0;i<length;i++)this.putBit(1==(num>>>length-i-1&1))},getLengthInBits:function(){return this.length},putBit:function(bit){var bufIndex=Math.floor(this.length/8);this.buffer.length<=bufIndex&&this.buffer.push(0),bit&&(this.buffer[bufIndex]|=128>>>this.length%8),this.length++}},module.exports=QRBitBuffer},"./node_modules/qr.js/lib/ErrorCorrectLevel.js":module=>{module.exports={L:1,M:0,Q:3,H:2}},"./node_modules/qr.js/lib/Polynomial.js":(module,__unused_webpack_exports,__webpack_require__)=>{var math=__webpack_require__("./node_modules/qr.js/lib/math.js");function QRPolynomial(num,shift){if(null==num.length)throw new Error(num.length+"/"+shift);for(var offset=0;offset<num.length&&0==num[offset];)offset++;this.num=new Array(num.length-offset+shift);for(var i=0;i<num.length-offset;i++)this.num[i]=num[i+offset]}QRPolynomial.prototype={get:function(index){return this.num[index]},getLength:function(){return this.num.length},multiply:function(e){for(var num=new Array(this.getLength()+e.getLength()-1),i=0;i<this.getLength();i++)for(var j=0;j<e.getLength();j++)num[i+j]^=math.gexp(math.glog(this.get(i))+math.glog(e.get(j)));return new QRPolynomial(num,0)},mod:function(e){if(this.getLength()-e.getLength()<0)return this;for(var ratio=math.glog(this.get(0))-math.glog(e.get(0)),num=new Array(this.getLength()),i=0;i<this.getLength();i++)num[i]=this.get(i);for(i=0;i<e.getLength();i++)num[i]^=math.gexp(math.glog(e.get(i))+ratio);return new QRPolynomial(num,0).mod(e)}},module.exports=QRPolynomial},"./node_modules/qr.js/lib/QRCode.js":(module,__unused_webpack_exports,__webpack_require__)=>{var BitByte=__webpack_require__("./node_modules/qr.js/lib/8BitByte.js"),RSBlock=__webpack_require__("./node_modules/qr.js/lib/RSBlock.js"),BitBuffer=__webpack_require__("./node_modules/qr.js/lib/BitBuffer.js"),util=__webpack_require__("./node_modules/qr.js/lib/util.js"),Polynomial=__webpack_require__("./node_modules/qr.js/lib/Polynomial.js");function QRCode(typeNumber,errorCorrectLevel){this.typeNumber=typeNumber,this.errorCorrectLevel=errorCorrectLevel,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var proto=QRCode.prototype;proto.addData=function(data){var newData=new BitByte(data);this.dataList.push(newData),this.dataCache=null},proto.isDark=function(row,col){if(row<0||this.moduleCount<=row||col<0||this.moduleCount<=col)throw new Error(row+","+col);return this.modules[row][col]},proto.getModuleCount=function(){return this.moduleCount},proto.make=function(){if(this.typeNumber<1){var typeNumber=1;for(typeNumber=1;typeNumber<40;typeNumber++){for(var rsBlocks=RSBlock.getRSBlocks(typeNumber,this.errorCorrectLevel),buffer=new BitBuffer,totalDataCount=0,i=0;i<rsBlocks.length;i++)totalDataCount+=rsBlocks[i].dataCount;for(i=0;i<this.dataList.length;i++){var data=this.dataList[i];buffer.put(data.mode,4),buffer.put(data.getLength(),util.getLengthInBits(data.mode,typeNumber)),data.write(buffer)}if(buffer.getLengthInBits()<=8*totalDataCount)break}this.typeNumber=typeNumber}this.makeImpl(!1,this.getBestMaskPattern())},proto.makeImpl=function(test,maskPattern){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var row=0;row<this.moduleCount;row++){this.modules[row]=new Array(this.moduleCount);for(var col=0;col<this.moduleCount;col++)this.modules[row][col]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(test,maskPattern),this.typeNumber>=7&&this.setupTypeNumber(test),null==this.dataCache&&(this.dataCache=QRCode.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,maskPattern)},proto.setupPositionProbePattern=function(row,col){for(var r=-1;r<=7;r++)if(!(row+r<=-1||this.moduleCount<=row+r))for(var c=-1;c<=7;c++)col+c<=-1||this.moduleCount<=col+c||(this.modules[row+r][col+c]=0<=r&&r<=6&&(0==c||6==c)||0<=c&&c<=6&&(0==r||6==r)||2<=r&&r<=4&&2<=c&&c<=4)},proto.getBestMaskPattern=function(){for(var minLostPoint=0,pattern=0,i=0;i<8;i++){this.makeImpl(!0,i);var lostPoint=util.getLostPoint(this);(0==i||minLostPoint>lostPoint)&&(minLostPoint=lostPoint,pattern=i)}return pattern},proto.createMovieClip=function(target_mc,instance_name,depth){var qr_mc=target_mc.createEmptyMovieClip(instance_name,depth);this.make();for(var row=0;row<this.modules.length;row++)for(var y=1*row,col=0;col<this.modules[row].length;col++){var x=1*col;this.modules[row][col]&&(qr_mc.beginFill(0,100),qr_mc.moveTo(x,y),qr_mc.lineTo(x+1,y),qr_mc.lineTo(x+1,y+1),qr_mc.lineTo(x,y+1),qr_mc.endFill())}return qr_mc},proto.setupTimingPattern=function(){for(var r=8;r<this.moduleCount-8;r++)null==this.modules[r][6]&&(this.modules[r][6]=r%2==0);for(var c=8;c<this.moduleCount-8;c++)null==this.modules[6][c]&&(this.modules[6][c]=c%2==0)},proto.setupPositionAdjustPattern=function(){for(var pos=util.getPatternPosition(this.typeNumber),i=0;i<pos.length;i++)for(var j=0;j<pos.length;j++){var row=pos[i],col=pos[j];if(null==this.modules[row][col])for(var r=-2;r<=2;r++)for(var c=-2;c<=2;c++)this.modules[row+r][col+c]=-2==r||2==r||-2==c||2==c||0==r&&0==c}},proto.setupTypeNumber=function(test){for(var bits=util.getBCHTypeNumber(this.typeNumber),i=0;i<18;i++){var mod=!test&&1==(bits>>i&1);this.modules[Math.floor(i/3)][i%3+this.moduleCount-8-3]=mod}for(i=0;i<18;i++){mod=!test&&1==(bits>>i&1);this.modules[i%3+this.moduleCount-8-3][Math.floor(i/3)]=mod}},proto.setupTypeInfo=function(test,maskPattern){for(var data=this.errorCorrectLevel<<3|maskPattern,bits=util.getBCHTypeInfo(data),i=0;i<15;i++){var mod=!test&&1==(bits>>i&1);i<6?this.modules[i][8]=mod:i<8?this.modules[i+1][8]=mod:this.modules[this.moduleCount-15+i][8]=mod}for(i=0;i<15;i++){mod=!test&&1==(bits>>i&1);i<8?this.modules[8][this.moduleCount-i-1]=mod:i<9?this.modules[8][15-i-1+1]=mod:this.modules[8][15-i-1]=mod}this.modules[this.moduleCount-8][8]=!test},proto.mapData=function(data,maskPattern){for(var inc=-1,row=this.moduleCount-1,bitIndex=7,byteIndex=0,col=this.moduleCount-1;col>0;col-=2)for(6==col&&col--;;){for(var c=0;c<2;c++)if(null==this.modules[row][col-c]){var dark=!1;byteIndex<data.length&&(dark=1==(data[byteIndex]>>>bitIndex&1)),util.getMask(maskPattern,row,col-c)&&(dark=!dark),this.modules[row][col-c]=dark,-1==--bitIndex&&(byteIndex++,bitIndex=7)}if((row+=inc)<0||this.moduleCount<=row){row-=inc,inc=-inc;break}}},QRCode.PAD0=236,QRCode.PAD1=17,QRCode.createData=function(typeNumber,errorCorrectLevel,dataList){for(var rsBlocks=RSBlock.getRSBlocks(typeNumber,errorCorrectLevel),buffer=new BitBuffer,i=0;i<dataList.length;i++){var data=dataList[i];buffer.put(data.mode,4),buffer.put(data.getLength(),util.getLengthInBits(data.mode,typeNumber)),data.write(buffer)}var totalDataCount=0;for(i=0;i<rsBlocks.length;i++)totalDataCount+=rsBlocks[i].dataCount;if(buffer.getLengthInBits()>8*totalDataCount)throw new Error("code length overflow. ("+buffer.getLengthInBits()+">"+8*totalDataCount+")");for(buffer.getLengthInBits()+4<=8*totalDataCount&&buffer.put(0,4);buffer.getLengthInBits()%8!=0;)buffer.putBit(!1);for(;!(buffer.getLengthInBits()>=8*totalDataCount||(buffer.put(QRCode.PAD0,8),buffer.getLengthInBits()>=8*totalDataCount));)buffer.put(QRCode.PAD1,8);return QRCode.createBytes(buffer,rsBlocks)},QRCode.createBytes=function(buffer,rsBlocks){for(var offset=0,maxDcCount=0,maxEcCount=0,dcdata=new Array(rsBlocks.length),ecdata=new Array(rsBlocks.length),r=0;r<rsBlocks.length;r++){var dcCount=rsBlocks[r].dataCount,ecCount=rsBlocks[r].totalCount-dcCount;maxDcCount=Math.max(maxDcCount,dcCount),maxEcCount=Math.max(maxEcCount,ecCount),dcdata[r]=new Array(dcCount);for(var i=0;i<dcdata[r].length;i++)dcdata[r][i]=255&buffer.buffer[i+offset];offset+=dcCount;var rsPoly=util.getErrorCorrectPolynomial(ecCount),modPoly=new Polynomial(dcdata[r],rsPoly.getLength()-1).mod(rsPoly);ecdata[r]=new Array(rsPoly.getLength()-1);for(i=0;i<ecdata[r].length;i++){var modIndex=i+modPoly.getLength()-ecdata[r].length;ecdata[r][i]=modIndex>=0?modPoly.get(modIndex):0}}var totalCodeCount=0;for(i=0;i<rsBlocks.length;i++)totalCodeCount+=rsBlocks[i].totalCount;var data=new Array(totalCodeCount),index=0;for(i=0;i<maxDcCount;i++)for(r=0;r<rsBlocks.length;r++)i<dcdata[r].length&&(data[index++]=dcdata[r][i]);for(i=0;i<maxEcCount;i++)for(r=0;r<rsBlocks.length;r++)i<ecdata[r].length&&(data[index++]=ecdata[r][i]);return data},module.exports=QRCode},"./node_modules/qr.js/lib/RSBlock.js":(module,__unused_webpack_exports,__webpack_require__)=>{var ECL=__webpack_require__("./node_modules/qr.js/lib/ErrorCorrectLevel.js");function QRRSBlock(totalCount,dataCount){this.totalCount=totalCount,this.dataCount=dataCount}QRRSBlock.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],QRRSBlock.getRSBlocks=function(typeNumber,errorCorrectLevel){var rsBlock=QRRSBlock.getRsBlockTable(typeNumber,errorCorrectLevel);if(null==rsBlock)throw new Error("bad rs block @ typeNumber:"+typeNumber+"/errorCorrectLevel:"+errorCorrectLevel);for(var length=rsBlock.length/3,list=new Array,i=0;i<length;i++)for(var count=rsBlock[3*i+0],totalCount=rsBlock[3*i+1],dataCount=rsBlock[3*i+2],j=0;j<count;j++)list.push(new QRRSBlock(totalCount,dataCount));return list},QRRSBlock.getRsBlockTable=function(typeNumber,errorCorrectLevel){switch(errorCorrectLevel){case ECL.L:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+0];case ECL.M:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+1];case ECL.Q:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+2];case ECL.H:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+3];default:return}},module.exports=QRRSBlock},"./node_modules/qr.js/lib/math.js":module=>{for(var QRMath={glog:function(n){if(n<1)throw new Error("glog("+n+")");return QRMath.LOG_TABLE[n]},gexp:function(n){for(;n<0;)n+=255;for(;n>=256;)n-=255;return QRMath.EXP_TABLE[n]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},i=0;i<8;i++)QRMath.EXP_TABLE[i]=1<<i;for(i=8;i<256;i++)QRMath.EXP_TABLE[i]=QRMath.EXP_TABLE[i-4]^QRMath.EXP_TABLE[i-5]^QRMath.EXP_TABLE[i-6]^QRMath.EXP_TABLE[i-8];for(i=0;i<255;i++)QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]]=i;module.exports=QRMath},"./node_modules/qr.js/lib/mode.js":module=>{module.exports={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8}},"./node_modules/qr.js/lib/util.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Mode=__webpack_require__("./node_modules/qr.js/lib/mode.js"),Polynomial=__webpack_require__("./node_modules/qr.js/lib/Polynomial.js"),math=__webpack_require__("./node_modules/qr.js/lib/math.js"),QRMaskPattern_PATTERN000=0,QRMaskPattern_PATTERN001=1,QRMaskPattern_PATTERN010=2,QRMaskPattern_PATTERN011=3,QRMaskPattern_PATTERN100=4,QRMaskPattern_PATTERN101=5,QRMaskPattern_PATTERN110=6,QRMaskPattern_PATTERN111=7,QRUtil={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(data){for(var d=data<<10;QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G15)>=0;)d^=QRUtil.G15<<QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G15);return(data<<10|d)^QRUtil.G15_MASK},getBCHTypeNumber:function(data){for(var d=data<<12;QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G18)>=0;)d^=QRUtil.G18<<QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G18);return data<<12|d},getBCHDigit:function(data){for(var digit=0;0!=data;)digit++,data>>>=1;return digit},getPatternPosition:function(typeNumber){return QRUtil.PATTERN_POSITION_TABLE[typeNumber-1]},getMask:function(maskPattern,i,j){switch(maskPattern){case QRMaskPattern_PATTERN000:return(i+j)%2==0;case QRMaskPattern_PATTERN001:return i%2==0;case QRMaskPattern_PATTERN010:return j%3==0;case QRMaskPattern_PATTERN011:return(i+j)%3==0;case QRMaskPattern_PATTERN100:return(Math.floor(i/2)+Math.floor(j/3))%2==0;case QRMaskPattern_PATTERN101:return i*j%2+i*j%3==0;case QRMaskPattern_PATTERN110:return(i*j%2+i*j%3)%2==0;case QRMaskPattern_PATTERN111:return(i*j%3+(i+j)%2)%2==0;default:throw new Error("bad maskPattern:"+maskPattern)}},getErrorCorrectPolynomial:function(errorCorrectLength){for(var a=new Polynomial([1],0),i=0;i<errorCorrectLength;i++)a=a.multiply(new Polynomial([1,math.gexp(i)],0));return a},getLengthInBits:function(mode,type){if(1<=type&&type<10)switch(mode){case Mode.MODE_NUMBER:return 10;case Mode.MODE_ALPHA_NUM:return 9;case Mode.MODE_8BIT_BYTE:case Mode.MODE_KANJI:return 8;default:throw new Error("mode:"+mode)}else if(type<27)switch(mode){case Mode.MODE_NUMBER:return 12;case Mode.MODE_ALPHA_NUM:return 11;case Mode.MODE_8BIT_BYTE:return 16;case Mode.MODE_KANJI:return 10;default:throw new Error("mode:"+mode)}else{if(!(type<41))throw new Error("type:"+type);switch(mode){case Mode.MODE_NUMBER:return 14;case Mode.MODE_ALPHA_NUM:return 13;case Mode.MODE_8BIT_BYTE:return 16;case Mode.MODE_KANJI:return 12;default:throw new Error("mode:"+mode)}}},getLostPoint:function(qrCode){for(var moduleCount=qrCode.getModuleCount(),lostPoint=0,row=0;row<moduleCount;row++)for(var col=0;col<moduleCount;col++){for(var sameCount=0,dark=qrCode.isDark(row,col),r=-1;r<=1;r++)if(!(row+r<0||moduleCount<=row+r))for(var c=-1;c<=1;c++)col+c<0||moduleCount<=col+c||0==r&&0==c||dark==qrCode.isDark(row+r,col+c)&&sameCount++;sameCount>5&&(lostPoint+=3+sameCount-5)}for(row=0;row<moduleCount-1;row++)for(col=0;col<moduleCount-1;col++){var count=0;qrCode.isDark(row,col)&&count++,qrCode.isDark(row+1,col)&&count++,qrCode.isDark(row,col+1)&&count++,qrCode.isDark(row+1,col+1)&&count++,0!=count&&4!=count||(lostPoint+=3)}for(row=0;row<moduleCount;row++)for(col=0;col<moduleCount-6;col++)qrCode.isDark(row,col)&&!qrCode.isDark(row,col+1)&&qrCode.isDark(row,col+2)&&qrCode.isDark(row,col+3)&&qrCode.isDark(row,col+4)&&!qrCode.isDark(row,col+5)&&qrCode.isDark(row,col+6)&&(lostPoint+=40);for(col=0;col<moduleCount;col++)for(row=0;row<moduleCount-6;row++)qrCode.isDark(row,col)&&!qrCode.isDark(row+1,col)&&qrCode.isDark(row+2,col)&&qrCode.isDark(row+3,col)&&qrCode.isDark(row+4,col)&&!qrCode.isDark(row+5,col)&&qrCode.isDark(row+6,col)&&(lostPoint+=40);var darkCount=0;for(col=0;col<moduleCount;col++)for(row=0;row<moduleCount;row++)qrCode.isDark(row,col)&&darkCount++;return lostPoint+=10*(Math.abs(100*darkCount/moduleCount/moduleCount-50)/5)}};module.exports=QRUtil},"./node_modules/qrcode.react/lib/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var React=__webpack_require__("./node_modules/react/index.js"),PropTypes=__webpack_require__("./node_modules/prop-types/index.js"),QRCodeImpl=__webpack_require__("./node_modules/qr.js/lib/QRCode.js"),ErrorCorrectLevel=__webpack_require__("./node_modules/qr.js/lib/ErrorCorrectLevel.js");function convertStr(str){for(var out="",i=0;i<str.length;i++){var charcode=str.charCodeAt(i);charcode<128?out+=String.fromCharCode(charcode):charcode<2048?(out+=String.fromCharCode(192|charcode>>6),out+=String.fromCharCode(128|63&charcode)):charcode<55296||charcode>=57344?(out+=String.fromCharCode(224|charcode>>12),out+=String.fromCharCode(128|charcode>>6&63),out+=String.fromCharCode(128|63&charcode)):(i++,charcode=65536+((1023&charcode)<<10|1023&str.charCodeAt(i)),out+=String.fromCharCode(240|charcode>>18),out+=String.fromCharCode(128|charcode>>12&63),out+=String.fromCharCode(128|charcode>>6&63),out+=String.fromCharCode(128|63&charcode))}return out}var DEFAULT_PROPS={size:128,level:"L",bgColor:"#FFFFFF",fgColor:"#000000"},PROP_TYPES={value:PropTypes.string.isRequired,size:PropTypes.number,level:PropTypes.oneOf(["L","M","Q","H"]),bgColor:PropTypes.string,fgColor:PropTypes.string},QRCodeCanvas=function(_React$Component){function QRCodeCanvas(){var _ref,_temp,_this;_classCallCheck(this,QRCodeCanvas);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _possibleConstructorReturn(_this,(_temp=_this=_possibleConstructorReturn(this,(_ref=QRCodeCanvas.__proto__||Object.getPrototypeOf(QRCodeCanvas)).call.apply(_ref,[this].concat(args))),Object.defineProperty(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this),"_canvas",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),_temp))}return _inherits(QRCodeCanvas,_React$Component),_createClass(QRCodeCanvas,[{key:"shouldComponentUpdate",value:function shouldComponentUpdate(nextProps){var _this2=this;return Object.keys(QRCodeCanvas.propTypes).some((function(k){return _this2.props[k]!==nextProps[k]}))}},{key:"componentDidMount",value:function componentDidMount(){this.update()}},{key:"componentDidUpdate",value:function componentDidUpdate(){this.update()}},{key:"update",value:function update(){var _props=this.props,value=_props.value,size=_props.size,level=_props.level,bgColor=_props.bgColor,fgColor=_props.fgColor,qrcode=new QRCodeImpl(-1,ErrorCorrectLevel[level]);if(qrcode.addData(convertStr(value)),qrcode.make(),null!=this._canvas){var canvas=this._canvas,ctx=canvas.getContext("2d");if(!ctx)return;var cells=qrcode.modules;if(null===cells)return;var tileW=size/cells.length,tileH=size/cells.length,scale=(window.devicePixelRatio||1)/function getBackingStorePixelRatio(ctx){return ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1}(ctx);canvas.height=canvas.width=size*scale,ctx.scale(scale,scale),cells.forEach((function(row,rdx){row.forEach((function(cell,cdx){ctx&&(ctx.fillStyle=cell?fgColor:bgColor);var w=Math.ceil((cdx+1)*tileW)-Math.floor(cdx*tileW),h=Math.ceil((rdx+1)*tileH)-Math.floor(rdx*tileH);ctx&&ctx.fillRect(Math.round(cdx*tileW),Math.round(rdx*tileH),w,h)}))}))}}},{key:"render",value:function render(){var _this3=this,_props2=this.props,size=(_props2.value,_props2.size),style=(_props2.level,_props2.bgColor,_props2.fgColor,_props2.style),otherProps=_objectWithoutProperties(_props2,["value","size","level","bgColor","fgColor","style"]),canvasStyle=_extends({height:size,width:size},style);return React.createElement("canvas",_extends({style:canvasStyle,height:size,width:size,ref:function ref(_ref2){return _this3._canvas=_ref2}},otherProps))}}]),QRCodeCanvas}(React.Component);Object.defineProperty(QRCodeCanvas,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:DEFAULT_PROPS}),Object.defineProperty(QRCodeCanvas,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:PROP_TYPES});var QRCodeSVG=function(_React$Component2){function QRCodeSVG(){return _classCallCheck(this,QRCodeSVG),_possibleConstructorReturn(this,(QRCodeSVG.__proto__||Object.getPrototypeOf(QRCodeSVG)).apply(this,arguments))}return _inherits(QRCodeSVG,_React$Component2),_createClass(QRCodeSVG,[{key:"shouldComponentUpdate",value:function shouldComponentUpdate(nextProps){var _this4=this;return Object.keys(QRCodeCanvas.propTypes).some((function(k){return _this4.props[k]!==nextProps[k]}))}},{key:"render",value:function render(){var _props3=this.props,value=_props3.value,size=_props3.size,level=_props3.level,bgColor=_props3.bgColor,fgColor=_props3.fgColor,otherProps=_objectWithoutProperties(_props3,["value","size","level","bgColor","fgColor"]),qrcode=new QRCodeImpl(-1,ErrorCorrectLevel[level]);qrcode.addData(convertStr(value)),qrcode.make();var cells=qrcode.modules;if(null!==cells){var ops=[];return cells.forEach((function(row,y){var start=null;row.forEach((function(cell,x){if(!cell&&null!==start)return ops.push("M".concat(start," ").concat(y,"h").concat(x-start,"v1H").concat(start,"z")),void(start=null);if(x!==row.length-1)cell&&null===start&&(start=x);else{if(!cell)return;null===start?ops.push("M".concat(x,",").concat(y," h1v1H").concat(x,"z")):ops.push("M".concat(start,",").concat(y," h").concat(x+1-start,"v1H").concat(start,"z"))}}))})),React.createElement("svg",_extends({shapeRendering:"crispEdges",height:size,width:size,viewBox:"0 0 ".concat(cells.length," ").concat(cells.length)},otherProps),React.createElement("path",{fill:bgColor,d:"M0,0 h".concat(cells.length,"v").concat(cells.length,"H0z")}),React.createElement("path",{fill:fgColor,d:ops.join("")}))}}}]),QRCodeSVG}(React.Component);Object.defineProperty(QRCodeSVG,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:DEFAULT_PROPS}),Object.defineProperty(QRCodeSVG,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:PROP_TYPES});var QRCode=function QRCode(props){var renderAs=props.renderAs,otherProps=_objectWithoutProperties(props,["renderAs"]),Component="svg"===renderAs?QRCodeSVG:QRCodeCanvas;return React.createElement(Component,otherProps)};QRCode.defaultProps=_extends({renderAs:"canvas"},DEFAULT_PROPS),module.exports=QRCode},"./node_modules/qtip2/jquery.qtip.min.js":(module,exports,__webpack_require__)=>{var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,t,e,i;t=window,e=document,function(t){"use strict";__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("./node_modules/jquery/dist/jquery.js")],void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=t)?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}((function(s){"use strict";function o(t,e,i,o){this.id=i,this.target=t,this.tooltip=E,this.elements={target:t},this._id=X+"-"+i,this.timers={img:{}},this.options=e,this.plugins={},this.cache={event:{},target:s(),disabled:k,attr:o,onTooltip:k,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=k}function n(t){return t===E||"object"!==s.type(t)}function r(t){return!(s.isFunction(t)||t&&t.attr||t.length||"object"===s.type(t)&&(t.jquery||t.then))}function a(t){var e,i,o,a;return n(t)?k:(n(t.metadata)&&(t.metadata={type:t.metadata}),"content"in t&&(n(e=t.content)||e.jquery||e.done?e=t.content={text:i=r(e)?k:e}:i=e.text,"ajax"in e&&(o=e.ajax,a=o&&o.once!==k,delete e.ajax,e.text=function(t,e){var n=i||s(this).attr(e.options.content.attr)||"Loading...",r=s.ajax(s.extend({},o,{context:e})).then(o.success,E,o.error).then((function(t){return t&&a&&e.set("content.text",t),t}),(function(t,i,s){e.destroyed||0===t.status||e.set("content.text",i+": "+s)}));return a?n:(e.set("content.text",n),r)}),"title"in e&&(n(e.title)||(e.button=e.title.button,e.title=e.title.text),r(e.title||k)&&(e.title=k))),"position"in t&&n(t.position)&&(t.position={my:t.position,at:t.position}),"show"in t&&n(t.show)&&(t.show=t.show.jquery?{target:t.show}:t.show===W?{ready:W}:{event:t.show}),"hide"in t&&n(t.hide)&&(t.hide=t.hide.jquery?{target:t.hide}:{event:t.hide}),"style"in t&&n(t.style)&&(t.style={classes:t.style}),s.each(R,(function(){this.sanitize&&this.sanitize(t)})),t)}function h(t,e){for(var i,s=0,o=t,n=e.split(".");o=o[n[s++]];)n.length>s&&(i=o);return[i||t,n.pop()]}function l(t,e){var i,s,o;for(i in this.checks)for(s in this.checks[i])(o=RegExp(s,"i").exec(t))&&(e.push(o),("builtin"===i||this.plugins[i])&&this.checks[i][s].apply(this.plugins[i]||this,e))}function c(t){return G.concat("").join(t?"-"+t+" ":" ")}function d(i){return i&&{type:i.type,pageX:i.pageX,pageY:i.pageY,target:i.target,relatedTarget:i.relatedTarget,scrollX:i.scrollX||t.pageXOffset||e.body.scrollLeft||e.documentElement.scrollLeft,scrollY:i.scrollY||t.pageYOffset||e.body.scrollTop||e.documentElement.scrollTop}||{}}function p(t,e){return e>0?setTimeout(s.proxy(t,this),e):(t.call(this),i)}function u(t){return this.tooltip.hasClass(ee)?k:(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=p.call(this,(function(){this.toggle(W,t)}),this.options.show.delay),i)}function f(t){if(this.tooltip.hasClass(ee))return k;var e=s(t.relatedTarget),i=e.closest(U)[0]===this.tooltip[0],o=e[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==e[0]&&"mouse"===this.options.position.target&&i||this.options.hide.fixed&&/mouse(out|leave|move)/.test(t.type)&&(i||o))try{t.preventDefault(),t.stopImmediatePropagation()}catch(n){}else this.timers.hide=p.call(this,(function(){this.toggle(k,t)}),this.options.hide.delay,this)}function g(t){return this.tooltip.hasClass(ee)||!this.options.hide.inactive?k:(clearTimeout(this.timers.inactive),this.timers.inactive=p.call(this,(function(){this.hide(t)}),this.options.hide.inactive),i)}function m(t){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}function v(t,i,o){s(e.body).delegate(t,(i.split?i:i.join(he+" "))+he,(function(){var t=T.api[s.attr(this,H)];t&&!t.disabled&&o.apply(t,arguments)}))}function y(t,i,n){var r,h,l,c,d,p=s(e.body),u=t[0]===e?p:t,f=t.metadata?t.metadata(n.metadata):E,g="html5"===n.metadata.type&&f?f[n.metadata.name]:E,m=t.data(n.metadata.name||"qtipopts");try{m="string"==typeof m?s.parseJSON(m):m}catch(v){}if(h=(c=s.extend(W,{},T.defaults,n,"object"==typeof m?a(m):E,a(g||f))).position,c.id=i,"boolean"==typeof c.content.text){if(l=t.attr(c.content.attr),c.content.attr===k||!l)return k;c.content.text=l}if(h.container.length||(h.container=p),h.target===k&&(h.target=u),c.show.target===k&&(c.show.target=u),c.show.solo===W&&(c.show.solo=h.container.closest("body")),c.hide.target===k&&(c.hide.target=u),c.position.viewport===W&&(c.position.viewport=h.container),h.container=h.container.eq(0),h.at=new z(h.at,W),h.my=new z(h.my),t.data(X))if(c.overwrite)t.qtip("destroy",!0);else if(c.overwrite===k)return k;return t.attr(Y,i),c.suppress&&(d=t.attr("title"))&&t.removeAttr("title").attr(se,d).attr("title",""),r=new o(t,c,i,!!l),t.data(X,r),t.one("remove.qtip-"+i+" removeqtip.qtip-"+i,(function(){var t;(t=s(this).data(X))&&t.destroy(!0)})),r}function b(t){return t.charAt(0).toUpperCase()+t.slice(1)}function _(t,e){return Math.ceil(parseFloat(function w(t,e){var s,o,n=e.charAt(0).toUpperCase()+e.slice(1),r=(e+" "+be.join(n+" ")+n).split(" "),a=0;if(ye[e])return t.css(ye[e]);for(;s=r[a++];)if((o=t.css(s))!==i)return ye[e]=s,o}(t,e)))}function x(t,e){this._ns="tip",this.options=e,this.offset=e.offset,this.size=[e.width,e.height],this.init(this.qtip=t)}function q(t,e){this.options=e,this._ns="-modal",this.init(this.qtip=t)}function C(t){this._ns="ie6",this.init(this.qtip=t)}var T,j,z,M,I,W=!0,k=!1,E=null,S="x",L="y",A="width",B="height",D="top",F="left",O="bottom",P="right",N="center",V="shift",R={},X="qtip",Y="data-hasqtip",H="data-qtip-id",G=["ui-widget","ui-tooltip"],U="."+X,Q="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),J=X+"-fixed",K=X+"-default",Z=X+"-focus",te=X+"-hover",ee=X+"-disabled",ie="_replacedByqTip",se="oldtitle",oe={ie:function(){for(var t=3,i=e.createElement("div");(i.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e")&&i.getElementsByTagName("i")[0];);return t>4?t:NaN}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||k};(j=o.prototype)._when=function(t){return s.when.apply(s,t)},j.render=function(t){if(this.rendered||this.destroyed)return this;var i=this,o=this.options,n=this.cache,r=this.elements,a=o.content.text,h=o.content.title,l=o.content.button,c=o.position,d=(this._id,[]);return s.attr(this.target[0],"aria-describedby",this._id),this.tooltip=r.tooltip=s("<div/>",{id:this._id,class:[X,K,o.style.classes,X+"-pos-"+o.position.my.abbrev()].join(" "),width:o.style.width||"",height:o.style.height||"",tracking:"mouse"===c.target&&c.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":k,"aria-describedby":this._id+"-content","aria-hidden":W}).toggleClass(ee,this.disabled).attr(H,this.id).data(X,this).appendTo(c.container).append(r.content=s("<div />",{class:X+"-content",id:this._id+"-content","aria-atomic":W})),this.rendered=-1,this.positioning=W,h&&(this._createTitle(),s.isFunction(h)||d.push(this._updateTitle(h,k))),l&&this._createButton(),s.isFunction(a)||d.push(this._updateContent(a,k)),this.rendered=W,this._setWidget(),s.each(R,(function(t){var e;"render"===this.initialize&&(e=this(i))&&(i.plugins[t]=e)})),this._unassignEvents(),this._assignEvents(),this._when(d).then((function(){i._trigger("render"),i.positioning=k,i.hiddenDuringWait||!o.show.ready&&!t||i.toggle(W,n.event,k),i.hiddenDuringWait=k})),T.api[this.id]=this,this},j.destroy=function(t){function e(){if(!this.destroyed){this.destroyed=W;var t=this.target,e=t.attr(se);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),s.each(this.plugins,(function(){this.destroy&&this.destroy()})),clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this._unassignEvents(),t.removeData(X).removeAttr(H).removeAttr(Y).removeAttr("aria-describedby"),this.options.suppress&&e&&t.attr("title",e).removeAttr(se),this._unbind(t),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=E,delete T.api[this.id]}}return this.destroyed||(t===W&&"hide"!==this.triggering||!this.rendered?e.call(this):(this.tooltip.one("tooltiphidden",s.proxy(e,this)),!this.triggering&&this.hide())),this.target},M=j.checks={builtin:{"^id$":function(t,e,i,o){var n=i===W?T.nextid:i,r=X+"-"+n;n!==k&&n.length>0&&!s("#"+r).length?(this._id=r,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):t[e]=o},"^prerender":function(t,e,i){i&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(t,e,i){this._updateContent(i)},"^content.attr$":function(t,e,i,s){this.options.content.text===this.target.attr(s)&&this._updateContent(this.target.attr(i))},"^content.title$":function(t,e,s){return s?(s&&!this.elements.title&&this._createTitle(),this._updateTitle(s),i):this._removeTitle()},"^content.button$":function(t,e,i){this._updateButton(i)},"^content.title.(text|button)$":function(t,e,i){this.set("content."+e,i)},"^position.(my|at)$":function(t,e,i){"string"==typeof i&&(t[e]=new z(i,"at"===e))},"^position.container$":function(t,e,i){this.rendered&&this.tooltip.appendTo(i)},"^show.ready$":function(t,e,i){i&&(!this.rendered&&this.render(W)||this.toggle(W))},"^style.classes$":function(t,e,i,s){this.rendered&&this.tooltip.removeClass(s).addClass(i)},"^style.(width|height)":function(t,e,i){this.rendered&&this.tooltip.css(e,i)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(t,e,i){this.rendered&&this.tooltip.toggleClass(K,!!i)},"^events.(render|show|move|hide|focus|blur)$":function(t,e,i){this.rendered&&this.tooltip[(s.isFunction(i)?"":"un")+"bind"]("tooltip"+e,i)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var t=this.options.position;this.tooltip.attr("tracking","mouse"===t.target&&t.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},j.get=function(t){if(this.destroyed)return this;var e=h(this.options,t.toLowerCase()),i=e[0][e[1]];return i.precedance?i.string():i};var ne=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,re=/^prerender|show\.ready/i;j.set=function(t,e){if(this.destroyed)return this;var o,n=this.rendered,r=k,c=this.options;return this.checks,"string"==typeof t?(o=t,(t={})[o]=e):t=s.extend({},t),s.each(t,(function(e,o){if(n&&re.test(e))return delete t[e],i;var a,l=h(c,e.toLowerCase());a=l[0][l[1]],l[0][l[1]]=o&&o.nodeType?s(o):o,r=ne.test(e)||r,t[e]=[l[0],l[1],o,a]})),a(c),this.positioning=W,s.each(t,s.proxy(l,this)),this.positioning=k,this.rendered&&this.tooltip[0].offsetWidth>0&&r&&this.reposition("mouse"===c.position.target?E:this.cache.event),this},j._update=function(t,e){var i=this,o=this.cache;return this.rendered&&t?(s.isFunction(t)&&(t=t.call(this.elements.target,o.event,this)||""),s.isFunction(t.then)?(o.waiting=W,t.then((function(t){return o.waiting=k,i._update(t,e)}),E,(function(t){return i._update(t,e)}))):t===k||!t&&""!==t?k:(t.jquery&&t.length>0?e.empty().append(t.css({display:"block",visibility:"visible"})):e.html(t),this._waitForContent(e).then((function(t){t.images&&t.images.length&&i.rendered&&i.tooltip[0].offsetWidth>0&&i.reposition(o.event,!t.length)})))):k},j._waitForContent=function(t){var e=this.cache;return e.waiting=W,(s.fn.imagesLoaded?t.imagesLoaded():s.Deferred().resolve([])).done((function(){e.waiting=k})).promise()},j._updateContent=function(t,e){this._update(t,this.elements.content,e)},j._updateTitle=function(t,e){this._update(t,this.elements.title,e)===k&&this._removeTitle(k)},j._createTitle=function(){var t=this.elements,e=this._id+"-title";t.titlebar&&this._removeTitle(),t.titlebar=s("<div />",{class:X+"-titlebar "+(this.options.style.widget?c("header"):"")}).append(t.title=s("<div />",{id:e,class:X+"-title","aria-atomic":W})).insertBefore(t.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",(function(t){s(this).toggleClass("ui-state-active ui-state-focus","down"===t.type.substr(-4))})).delegate(".qtip-close","mouseover mouseout",(function(t){s(this).toggleClass("ui-state-hover","mouseover"===t.type)})),this.options.content.button&&this._createButton()},j._removeTitle=function(t){var e=this.elements;e.title&&(e.titlebar.remove(),e.titlebar=e.title=e.button=E,t!==k&&this.reposition())},j.reposition=function(i,o){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=W;var n,r,a=this.cache,h=this.tooltip,l=this.options.position,c=l.target,d=l.my,p=l.at,u=l.viewport,f=l.container,g=l.adjust,m=g.method.split(" "),v=h.outerWidth(k),y=h.outerHeight(k),b=0,w=0,_=h.css("position"),x={left:0,top:0},q=h[0].offsetWidth>0,C=i&&"scroll"===i.type,T=s(t),j=f[0].ownerDocument,z=this.mouse;if(s.isArray(c)&&2===c.length)p={x:F,y:D},x={left:c[0],top:c[1]};else if("mouse"===c)p={x:F,y:D},!z||!z.pageX||!g.mouse&&i&&i.pageX?i&&i.pageX||((!g.mouse||this.options.show.distance)&&a.origin&&a.origin.pageX?i=a.origin:(!i||i&&("resize"===i.type||"scroll"===i.type))&&(i=a.event)):i=z,"static"!==_&&(x=f.offset()),j.body.offsetWidth!==(t.innerWidth||j.documentElement.clientWidth)&&(r=s(e.body).offset()),x={left:i.pageX-x.left+(r&&r.left||0),top:i.pageY-x.top+(r&&r.top||0)},g.mouse&&C&&z&&(x.left-=(z.scrollX||0)-T.scrollLeft(),x.top-=(z.scrollY||0)-T.scrollTop());else{if("event"===c?i&&i.target&&"scroll"!==i.type&&"resize"!==i.type?a.target=s(i.target):i.target||(a.target=this.elements.target):"event"!==c&&(a.target=s(c.jquery?c:this.elements.target)),c=a.target,0===(c=s(c).eq(0)).length)return this;c[0]===e||c[0]===t?(b=oe.iOS?t.innerWidth:c.width(),w=oe.iOS?t.innerHeight:c.height(),c[0]===t&&(x={top:(u||c).scrollTop(),left:(u||c).scrollLeft()})):R.imagemap&&c.is("area")?n=R.imagemap(this,c,p,R.viewport?m:k):R.svg&&c&&c[0].ownerSVGElement?n=R.svg(this,c,p,R.viewport?m:k):(b=c.outerWidth(k),w=c.outerHeight(k),x=c.offset()),n&&(b=n.width,w=n.height,r=n.offset,x=n.position),x=this.reposition.offset(c,x,f),(oe.iOS>3.1&&4.1>oe.iOS||oe.iOS>=4.3&&4.33>oe.iOS||!oe.iOS&&"fixed"===_)&&(x.left-=T.scrollLeft(),x.top-=T.scrollTop()),(!n||n&&n.adjustable!==k)&&(x.left+=p.x===P?b:p.x===N?b/2:0,x.top+=p.y===O?w:p.y===N?w/2:0)}return x.left+=g.x+(d.x===P?-v:d.x===N?-v/2:0),x.top+=g.y+(d.y===O?-y:d.y===N?-y/2:0),R.viewport?(x.adjusted=R.viewport(this,x,l,b,w,v,y),r&&x.adjusted.left&&(x.left+=r.left),r&&x.adjusted.top&&(x.top+=r.top)):x.adjusted={left:0,top:0},this._trigger("move",[x,u.elem||u],i)?(delete x.adjusted,o===k||!q||isNaN(x.left)||isNaN(x.top)||"mouse"===c||!s.isFunction(l.effect)?h.css(x):s.isFunction(l.effect)&&(l.effect.call(h,this,s.extend({},x)),h.queue((function(t){s(this).css({opacity:"",height:""}),oe.ie&&this.style.removeAttribute("filter"),t()}))),this.positioning=k,this):this},j.reposition.offset=function(t,i,o){function n(t,e){i.left+=e*t.scrollLeft(),i.top+=e*t.scrollTop()}if(!o[0])return i;var r,a,h,l,c=s(t[0].ownerDocument),d=!!oe.ie&&"CSS1Compat"!==e.compatMode,p=o[0];do{"static"!==(a=s.css(p,"position"))&&("fixed"===a?(h=p.getBoundingClientRect(),n(c,-1)):((h=s(p).position()).left+=parseFloat(s.css(p,"borderLeftWidth"))||0,h.top+=parseFloat(s.css(p,"borderTopWidth"))||0),i.left-=h.left+(parseFloat(s.css(p,"marginLeft"))||0),i.top-=h.top+(parseFloat(s.css(p,"marginTop"))||0),r||"hidden"===(l=s.css(p,"overflow"))||"visible"===l||(r=s(p)))}while(p=p.offsetParent);return r&&(r[0]!==c[0]||d)&&n(r,1),i};var ae=(z=j.reposition.Corner=function(t,e){t=(""+t).replace(/([A-Z])/," $1").replace(/middle/gi,N).toLowerCase(),this.x=(t.match(/left|right/i)||t.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(t.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!e;var i=t.charAt(0);this.precedance="t"===i||"b"===i?L:S}).prototype;ae.invert=function(t,e){this[t]=this[t]===F?P:this[t]===P?F:e||this[t]},ae.string=function(){var t=this.x,e=this.y;return t===e?t:this.precedance===L||this.forceY&&"center"!==e?e+" "+t:t+" "+e},ae.abbrev=function(){var t=this.string().split(" ");return t[0].charAt(0)+(t[1]&&t[1].charAt(0)||"")},ae.clone=function(){return new z(this.string(),this.forceY)},j.toggle=function(t,i){var o=this.cache,n=this.options,r=this.tooltip;if(i){if(/over|enter/.test(i.type)&&/out|leave/.test(o.event.type)&&n.show.target.add(i.target).length===n.show.target.length&&r.has(i.relatedTarget).length)return this;o.event=d(i)}if(this.waiting&&!t&&(this.hiddenDuringWait=W),!this.rendered)return t?this.render(1):this;if(this.destroyed||this.disabled)return this;var a,h,l,c=t?"show":"hide",p=this.options[c],u=(this.options[t?"hide":"show"],this.options.position),f=this.options.content,g=this.tooltip.css("width"),m=this.tooltip.is(":visible"),v=t||1===p.target.length,y=!i||2>p.target.length||o.target[0]===i.target;return(typeof t).search("boolean|number")&&(t=!m),h=(a=!r.is(":animated")&&m===t&&y)?E:!!this._trigger(c,[90]),this.destroyed||(h!==k&&t&&this.focus(i),!h||a||(s.attr(r[0],"aria-hidden",!t),t?(o.origin=d(this.mouse),s.isFunction(f.text)&&this._updateContent(f.text,k),s.isFunction(f.title)&&this._updateTitle(f.title,k),!I&&"mouse"===u.target&&u.adjust.mouse&&(s(e).bind("mousemove."+X,this._storeMouse),I=W),g||r.css("width",r.outerWidth(k)),this.reposition(i,arguments[2]),g||r.css("width",""),p.solo&&("string"==typeof p.solo?s(p.solo):s(U,p.solo)).not(r).not(p.target).qtip("hide",s.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete o.origin,I&&!s(U+'[tracking="true"]:visible',p.solo).not(r).length&&(s(e).unbind("mousemove."+X),I=k),this.blur(i)),l=s.proxy((function(){t?(oe.ie&&r[0].style.removeAttribute("filter"),r.css("overflow",""),"string"==typeof p.autofocus&&s(this.options.show.autofocus,r).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):r.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(t?"visible":"hidden")}),this),p.effect===k||v===k?(r[c](),l()):s.isFunction(p.effect)?(r.stop(1,1),p.effect.call(r,this),r.queue("fx",(function(t){l(),t()}))):r.fadeTo(90,t?1:0,l),t&&p.target.trigger("qtip-"+this.id+"-inactive"))),this},j.show=function(t){return this.toggle(W,t)},j.hide=function(t){return this.toggle(k,t)},j.focus=function(t){if(!this.rendered||this.destroyed)return this;var e=s(U),i=this.tooltip,o=parseInt(i[0].style.zIndex,10),n=T.zindex+e.length;return i.hasClass(Z)||this._trigger("focus",[n],t)&&(o!==n&&(e.each((function(){this.style.zIndex>o&&(this.style.zIndex=this.style.zIndex-1)})),e.filter("."+Z).qtip("blur",t)),i.addClass(Z)[0].style.zIndex=n),this},j.blur=function(t){return!this.rendered||this.destroyed||(this.tooltip.removeClass(Z),this._trigger("blur",[this.tooltip.css("zIndex")],t)),this},j.disable=function(t){return this.destroyed||("toggle"===t?t=!(this.rendered?this.tooltip.hasClass(ee):this.disabled):"boolean"!=typeof t&&(t=W),this.rendered&&this.tooltip.toggleClass(ee,t).attr("aria-disabled",t),this.disabled=!!t),this},j.enable=function(){return this.disable(k)},j._createButton=function(){var t=this,e=this.elements,i=e.tooltip,o=this.options.content.button,r="string"==typeof o?o:"Close tooltip";e.button&&e.button.remove(),e.button=o.jquery?o:s("<a />",{class:"qtip-close "+(this.options.style.widget?"":X+"-icon"),title:r,"aria-label":r}).prepend(s("<span />",{class:"ui-icon ui-icon-close",html:"&times;"})),e.button.appendTo(e.titlebar||i).attr("role","button").click((function(e){return i.hasClass(ee)||t.hide(e),k}))},j._updateButton=function(t){if(!this.rendered)return k;var e=this.elements.button;t?this._createButton():e.remove()},j._setWidget=function(){var t=this.options.style.widget,e=this.elements,i=e.tooltip,s=i.hasClass(ee);i.removeClass(ee),ee=t?"ui-state-disabled":"qtip-disabled",i.toggleClass(ee,s),i.toggleClass("ui-helper-reset "+c(),t).toggleClass(K,this.options.style.def&&!t),e.content&&e.content.toggleClass(c("content"),t),e.titlebar&&e.titlebar.toggleClass(c("header"),t),e.button&&e.button.toggleClass(X+"-icon",!t)},j._storeMouse=function(t){(this.mouse=d(t)).type="mousemove"},j._bind=function(t,e,i,o,n){var r="."+this._id+(o?"-"+o:"");e.length&&s(t).bind((e.split?e:e.join(r+" "))+r,s.proxy(i,n||this))},j._unbind=function(t,e){s(t).unbind("."+this._id+(e?"-"+e:""))};var he="."+X;s((function(){v(U,["mouseenter","mouseleave"],(function(t){var e="mouseenter"===t.type,i=s(t.currentTarget),o=s(t.relatedTarget||t.target),n=this.options;e?(this.focus(t),i.hasClass(J)&&!i.hasClass(ee)&&clearTimeout(this.timers.hide)):"mouse"===n.position.target&&n.hide.event&&n.show.target&&!o.closest(n.show.target[0]).length&&this.hide(t),i.toggleClass(te,e)})),v("["+H+"]",Q,g)})),j._trigger=function(t,e,i){var o=s.Event("tooltip"+t);return o.originalEvent=i&&s.extend({},i)||this.cache.event||E,this.triggering=t,this.tooltip.trigger(o,[this].concat(e||[])),this.triggering=k,!o.isDefaultPrevented()},j._bindEvents=function(t,e,o,n,r,a){if(n.add(o).length===n.length){var h=[];e=s.map(e,(function(e){var o=s.inArray(e,t);return o>-1?(h.push(t.splice(o,1)[0]),i):e})),h.length&&this._bind(o,h,(function(t){(this.rendered&&this.tooltip[0].offsetWidth>0?a:r).call(this,t)}))}this._bind(o,t,r),this._bind(n,e,a)},j._assignInitialEvents=function(t){function e(t){return this.disabled||this.destroyed?k:(this.cache.event=d(t),this.cache.target=t?s(t.target):[i],clearTimeout(this.timers.show),this.timers.show=p.call(this,(function(){this.render("object"==typeof t||o.show.ready)}),o.show.delay),i)}var o=this.options,n=o.show.target,r=o.hide.target,a=o.show.event?s.trim(""+o.show.event).split(" "):[],h=o.hide.event?s.trim(""+o.hide.event).split(" "):[];/mouse(over|enter)/i.test(o.show.event)&&!/mouse(out|leave)/i.test(o.hide.event)&&h.push("mouseleave"),this._bind(n,"mousemove",(function(t){this._storeMouse(t),this.cache.onTarget=W})),this._bindEvents(a,h,n,r,e,(function(){clearTimeout(this.timers.show)})),(o.show.ready||o.prerender)&&e.call(this,t)},j._assignEvents=function(){var i=this,o=this.options,n=o.position,r=this.tooltip,a=o.show.target,h=o.hide.target,l=n.container,c=n.viewport,d=s(e),p=(s(e.body),s(t)),v=o.show.event?s.trim(""+o.show.event).split(" "):[],y=o.hide.event?s.trim(""+o.hide.event).split(" "):[];s.each(o.events,(function(t,e){i._bind(r,"toggle"===t?["tooltipshow","tooltiphide"]:["tooltip"+t],e,null,r)})),/mouse(out|leave)/i.test(o.hide.event)&&"window"===o.hide.leave&&this._bind(d,["mouseout","blur"],(function(t){/select|option/.test(t.target.nodeName)||t.relatedTarget||this.hide(t)})),o.hide.fixed?h=h.add(r.addClass(J)):/mouse(over|enter)/i.test(o.show.event)&&this._bind(h,"mouseleave",(function(){clearTimeout(this.timers.show)})),(""+o.hide.event).indexOf("unfocus")>-1&&this._bind(l.closest("html"),["mousedown","touchstart"],(function(t){var e=s(t.target),i=this.rendered&&!this.tooltip.hasClass(ee)&&this.tooltip[0].offsetWidth>0,o=e.parents(U).filter(this.tooltip[0]).length>0;e[0]===this.target[0]||e[0]===this.tooltip[0]||o||this.target.has(e[0]).length||!i||this.hide(t)})),"number"==typeof o.hide.inactive&&(this._bind(a,"qtip-"+this.id+"-inactive",g),this._bind(h.add(r),T.inactiveEvents,g,"-inactive")),this._bindEvents(v,y,a,h,u,f),this._bind(a.add(r),"mousemove",(function(t){if("number"==typeof o.hide.distance){var e=this.cache.origin||{},i=this.options.hide.distance,s=Math.abs;(s(t.pageX-e.pageX)>=i||s(t.pageY-e.pageY)>=i)&&this.hide(t)}this._storeMouse(t)})),"mouse"===n.target&&n.adjust.mouse&&(o.hide.event&&this._bind(a,["mouseenter","mouseleave"],(function(t){this.cache.onTarget="mouseenter"===t.type})),this._bind(d,"mousemove",(function(t){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(ee)&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}))),(n.adjust.resize||c.length)&&this._bind(s.event.special.resize?c:p,"resize",m),n.adjust.scroll&&this._bind(p.add(n.container),"scroll",m)},j._unassignEvents=function(){var i=[this.options.show.target[0],this.options.hide.target[0],this.rendered&&this.tooltip[0],this.options.position.container[0],this.options.position.viewport[0],this.options.position.container.closest("html")[0],t,e];this._unbind(s([]).pushStack(s.grep(i,(function(t){return"object"==typeof t}))))},T=s.fn.qtip=function(t,e,o){var n=(""+t).toLowerCase(),r=E,h=s.makeArray(arguments).slice(1),l=h[h.length-1],c=this[0]?s.data(this[0],X):E;return!arguments.length&&c||"api"===n?c:"string"==typeof t?(this.each((function(){var t=s.data(this,X);if(!t)return W;if(l&&l.timeStamp&&(t.cache.event=l),!e||"option"!==n&&"options"!==n)t[n]&&t[n].apply(t,h);else{if(o===i&&!s.isPlainObject(e))return r=t.get(e),k;t.set(e,o)}})),r!==E?r:this):"object"!=typeof t&&arguments.length?i:(c=a(s.extend(W,{},t)),this.each((function(t){var e,o;return o=!(o=s.isArray(c.id)?c.id[t]:c.id)||o===k||1>o.length||T.api[o]?T.nextid++:o,(e=y(s(this),o,c))===k?W:(T.api[o]=e,s.each(R,(function(){"initialize"===this.initialize&&this(e)})),e._assignInitialEvents(l),i)})))},s.qtip=o,T.api={},s.each({attr:function(t,e){if(this.length){var i=this[0],o="title",n=s.data(i,"qtip");if(t===o&&n&&"object"==typeof n&&n.options.suppress)return 2>arguments.length?s.attr(i,se):(n&&n.options.content.attr===o&&n.cache.attr&&n.set("content.text",e),this.attr(se,e))}return s.fn["attr"+ie].apply(this,arguments)},clone:function(t){var e=(s([]),s.fn["clone"+ie].apply(this,arguments));return t||e.filter("["+se+"]").attr("title",(function(){return s.attr(this,se)})).removeAttr(se),e}},(function(t,e){if(!e||s.fn[t+ie])return W;var i=s.fn[t+ie]=s.fn[t];s.fn[t]=function(){return e.apply(this,arguments)||i.apply(this,arguments)}})),s.ui||(s["cleanData"+ie]=s.cleanData,s.cleanData=function(t){for(var e,i=0;(e=s(t[i])).length;i++)if(e.attr(Y))try{e.triggerHandler("removeqtip")}catch(o){}s["cleanData"+ie].apply(this,arguments)}),T.version="2.2.0",T.nextid=0,T.inactiveEvents=Q,T.zindex=15e3,T.defaults={prerender:k,id:k,overwrite:W,suppress:W,content:{text:W,attr:"title",title:k,button:k},position:{my:"top left",at:"bottom right",target:k,container:k,viewport:k,adjust:{x:0,y:0,mouse:W,scroll:W,resize:W,method:"flipinvert flipinvert"},effect:function(t,e){s(this).animate(e,{duration:200,queue:k})}},show:{target:k,event:"mouseenter",effect:W,delay:90,solo:k,ready:k,autofocus:k},hide:{target:k,event:"mouseleave",effect:W,delay:0,fixed:k,inactive:k,leave:"window",distance:k},style:{classes:"",widget:k,width:k,height:k,def:W},events:{render:E,move:E,show:E,hide:E,toggle:E,visible:E,hidden:E,focus:E,blur:E}};var le,ce="margin",de="border",pe="color",ue="background-color",fe="transparent",ge=" !important",me=!!e.createElement("canvas").getContext,ve=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,ye={},be=["Webkit","O","Moz","ms"];if(me)var we=t.devicePixelRatio||1,_e=function(){var t=e.createElement("canvas").getContext("2d");return t.backingStorePixelRatio||t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||1}(),xe=we/_e;else var qe=function(t,e,i){return"<qtipvml:"+t+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(e||"")+' style="behavior: url(#default#VML); '+(i||"")+'" />'};s.extend(x.prototype,{init:function(t){var e,i;i=this.element=t.elements.tip=s("<div />",{class:X+"-tip"}).prependTo(t.tooltip),me?((e=s("<canvas />").appendTo(this.element)[0].getContext("2d")).lineJoin="miter",e.miterLimit=1e5,e.save()):(e=qe("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(e+e),t._bind(s("*",i).add(i),["click","mousedown"],(function(t){t.stopPropagation()}),this._ns)),t._bind(t.tooltip,"tooltipmove",this.reposition,this._ns,this),this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(t){var e=this.qtip.elements.titlebar;return e&&(t.y===D||t.y===N&&this.element.position().top+this.size[1]/2+this.options.offset<e.outerHeight(W))},_parseCorner:function(t){var e=this.qtip.options.position.my;return t===k||e===k?t=k:t===W?t=new z(e.string()):t.string||((t=new z(t)).fixed=W),t},_parseWidth:function(t,e,i){var s=this.qtip.elements,o=de+b(e)+"Width";return(i?_(i,o):_(s.content,o)||_(this._useTitle(t)&&s.titlebar||s.content,o)||_(s.tooltip,o))||0},_parseRadius:function(t){var e=this.qtip.elements,i=de+b(t.y)+b(t.x)+"Radius";return 9>oe.ie?0:_(this._useTitle(t)&&e.titlebar||e.content,i)||_(e.tooltip,i)||0},_invalidColour:function(t,e,i){var s=t.css(e);return!s||i&&s===t.css(i)||ve.test(s)?k:s},_parseColours:function(t){var e=this.qtip.elements,i=this.element.css("cssText",""),o=de+b(t[t.precedance])+b(pe),n=this._useTitle(t)&&e.titlebar||e.content,r=this._invalidColour,a=[];return a[0]=r(i,ue)||r(n,ue)||r(e.content,ue)||r(e.tooltip,ue)||i.css(ue),a[1]=r(i,o,pe)||r(n,o,pe)||r(e.content,o,pe)||r(e.tooltip,o,pe)||e.tooltip.css(o),s("*",i).add(i).css("cssText",ue+":"+fe+ge+";"+de+":0"+ge+";"),a},_calculateSize:function(t){var i,s,o=t.precedance===L,n=this.options.width,r=this.options.height,a="c"===t.abbrev(),h=(o?n:r)*(a?.5:1),l=Math.pow,c=Math.round,d=Math.sqrt(l(h,2)+l(r,2)),p=[this.border/h*d,this.border/r*d];return p[2]=Math.sqrt(l(p[0],2)-l(this.border,2)),p[3]=Math.sqrt(l(p[1],2)-l(this.border,2)),s=[c((i=(d+p[2]+p[3]+(a?0:p[0]))/d)*n),c(i*r)],o?s:s.reverse()},_calculateTip:function(t,e,i){i=i||1;var s=(e=e||this.size)[0]*i,o=e[1]*i,n=Math.ceil(s/2),r=Math.ceil(o/2),a={br:[0,0,s,o,s,0],bl:[0,0,s,0,0,o],tr:[0,o,s,0,s,o],tl:[0,0,0,o,s,o],tc:[0,o,n,0,s,o],bc:[0,0,s,0,n,o],rc:[0,0,s,r,0,o],lc:[s,0,s,o,0,r]};return a.lt=a.br,a.rt=a.bl,a.lb=a.tr,a.rb=a.tl,a[t.abbrev()]},_drawCoords:function(t,e){t.beginPath(),t.moveTo(e[0],e[1]),t.lineTo(e[2],e[3]),t.lineTo(e[4],e[5]),t.closePath()},create:function(){var t=this.corner=(me||oe.ie)&&this._parseCorner(this.options.corner);return(this.enabled=!!this.corner&&"c"!==this.corner.abbrev())&&(this.qtip.cache.corner=t.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(e,i){if(!this.enabled)return this;var o,n,r,a,h,l,c,d,p=this.qtip.elements,u=this.element,f=u.children(),g=this.options,m=this.size,v=g.mimic,y=Math.round;e||(e=this.qtip.cache.corner||this.corner),v===k?v=e:((v=new z(v)).precedance=e.precedance,"inherit"===v.x?v.x=e.x:"inherit"===v.y?v.y=e.y:v.x===v.y&&(v[e.precedance]=e[e.precedance])),n=v.precedance,e.precedance===S?this._swapDimensions():this._resetDimensions(),(o=this.color=this._parseColours(e))[1]!==fe?(d=this.border=this._parseWidth(e,e[e.precedance]),g.border&&1>d&&!ve.test(o[1])&&(o[0]=o[1]),this.border=d=g.border!==W?g.border:d):this.border=d=0,c=this.size=this._calculateSize(e),u.css({width:c[0],height:c[1],lineHeight:c[1]+"px"}),l=e.precedance===L?[y(v.x===F?d:v.x===P?c[0]-m[0]-d:(c[0]-m[0])/2),y(v.y===D?c[1]-m[1]:0)]:[y(v.x===F?c[0]-m[0]:0),y(v.y===D?d:v.y===O?c[1]-m[1]-d:(c[1]-m[1])/2)],me?((r=f[0].getContext("2d")).restore(),r.save(),r.clearRect(0,0,6e3,6e3),a=this._calculateTip(v,m,xe),h=this._calculateTip(v,this.size,xe),f.attr(A,c[0]*xe).attr(B,c[1]*xe),f.css(A,c[0]).css(B,c[1]),this._drawCoords(r,h),r.fillStyle=o[1],r.fill(),r.translate(l[0]*xe,l[1]*xe),this._drawCoords(r,a),r.fillStyle=o[0],r.fill()):(a="m"+(a=this._calculateTip(v))[0]+","+a[1]+" l"+a[2]+","+a[3]+" "+a[4]+","+a[5]+" xe",l[2]=d&&/^(r|b)/i.test(e.string())?8===oe.ie?2:1:0,f.css({coordsize:c[0]+d+" "+(c[1]+d),antialias:""+(v.string().indexOf(N)>-1),left:l[0]-l[2]*Number(n===S),top:l[1]-l[2]*Number(n===L),width:c[0]+d,height:c[1]+d}).each((function(t){var e=s(this);e[e.prop?"prop":"attr"]({coordsize:c[0]+d+" "+(c[1]+d),path:a,fillcolor:o[0],filled:!!t,stroked:!t}).toggle(!(!d&&!t)),!t&&e.html(qe("stroke",'weight="'+2*d+'px" color="'+o[1]+'" miterlimit="1000" joinstyle="miter"'))}))),t.opera&&setTimeout((function(){p.tip.css({display:"inline-block",visibility:"visible"})}),1),i!==k&&this.calculate(e,c)},calculate:function(t,e){if(!this.enabled)return k;var i,o,n=this,r=this.qtip.elements,a=this.element,h=this.options.offset,l=(r.tooltip.hasClass("ui-widget"),{});return t=t||this.corner,i=t.precedance,e=e||this._calculateSize(t),o=[t.x,t.y],i===S&&o.reverse(),s.each(o,(function(s,o){var a,c,d;o===N?(l[a=i===L?F:D]="50%",l[ce+"-"+a]=-Math.round(e[i===L?0:1]/2)+h):(a=n._parseWidth(t,o,r.tooltip),c=n._parseWidth(t,o,r.content),d=n._parseRadius(t),l[o]=Math.max(-n.border,s?c:h+(d>a?d:-a)))})),l[t[i]]-=e[i===S?0:1],a.css({margin:"",top:"",bottom:"",left:"",right:""}).css(l),l},reposition:function(t,e,s){function o(t,e,i,s,o){t===V&&l.precedance===e&&c[s]&&l[i]!==N?l.precedance=l.precedance===S?L:S:t!==V&&c[s]&&(l[e]=l[e]===N?c[s]>0?s:o:l[e]===s?o:s)}function n(t,e,o){l[t]===N?g[ce+"-"+e]=f[t]=r[ce+"-"+e]-c[e]:(a=r[o]!==i?[c[e],-r[e]]:[-c[e],r[e]],(f[t]=Math.max(a[0],a[1]))>a[0]&&(s[e]-=c[e],f[e]=k),g[r[o]!==i?o:e]=f[t])}if(this.enabled){var r,a,h=e.cache,l=this.corner.clone(),c=s.adjusted,d=e.options.position.adjust.method.split(" "),p=d[0],u=d[1]||d[0],f={left:k,top:k,x:0,y:0},g={};this.corner.fixed!==W&&(o(p,S,L,F,P),o(u,L,S,D,O),l.string()===h.corner.string()||h.cornerTop===c.top&&h.cornerLeft===c.left||this.update(l,k)),(r=this.calculate(l)).right!==i&&(r.left=-r.right),r.bottom!==i&&(r.top=-r.bottom),r.user=this.offset,(f.left=p===V&&!!c.left)&&n(S,F,P),(f.top=u===V&&!!c.top)&&n(L,D,O),this.element.css(g).toggle(!(f.x&&f.y||l.x===N&&f.y||l.y===N&&f.x)),s.left-=r.left.charAt?r.user:p!==V||f.top||!f.left&&!f.top?r.left+this.border:0,s.top-=r.top.charAt?r.user:u!==V||f.left||!f.left&&!f.top?r.top+this.border:0,h.cornerLeft=c.left,h.cornerTop=c.top,h.corner=l.clone()}},destroy:function(){this.qtip._unbind(this.qtip.tooltip,this._ns),this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),le=R.tip=function(t){return new x(t,t.options.style.tip)},le.initialize="render",le.sanitize=function(t){if(t.style&&"tip"in t.style){var e=t.style.tip;"object"!=typeof e&&(e=t.style.tip={corner:e}),/string|boolean/i.test(typeof e.corner)||(e.corner=W)}},M.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){this.create(),this.qtip.reposition()},"^style.tip.(height|width)$":function(t){this.size=[t.width,t.height],this.update(),this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},s.extend(W,T.defaults,{style:{tip:{corner:W,mimic:k,width:6,height:6,border:W,offset:0}}});var Ce,Te,Me,je="qtip-modal",ze="."+je;Te=function(){function i(t){1>c.length&&t.length?t.not("body").blur():c.first().focus()}function o(t){if(h.is(":visible")){var o=s(t.target),a=n.tooltip,l=o.closest(U);(1>l.length?k:parseInt(l[0].style.zIndex,10)>parseInt(a[0].style.zIndex,10))||o.closest(U)[0]===a[0]||i(o),t.target,c[c.length-1]}}var n,a,h,l=this,c={};s.extend(l,{init:function(){return h=l.elem=s("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return k}}).hide(),s(e.body).bind("focusin"+ze,o),s(e).bind("keydown"+ze,(function(t){n&&n.options.show.modal.escape&&27===t.keyCode&&n.hide(t)})),h.bind("click"+ze,(function(t){n&&n.options.show.modal.blur&&n.hide(t)})),l},update:function(e){n=e,c=e.options.show.modal.stealfocus!==k?e.tooltip.find("*").filter((function(){return function t(t){if(s.expr[":"].focusable)return s.expr[":"].focusable;var e,i,o,n=!isNaN(s.attr(t,"tabindex")),r=t.nodeName&&t.nodeName.toLowerCase();return"area"===r?(i=(e=t.parentNode).name,!(!t.href||!i||"map"!==e.nodeName.toLowerCase())&&!!(o=s("img[usemap=#"+i+"]")[0])&&o.is(":visible")):/input|select|textarea|button|object/.test(r)?!t.disabled:"a"===r&&t.href||n}(this)})):[]},toggle:function(t,o,r){var c=(s(e.body),t.tooltip),d=t.options.show.modal,p=d.effect,u=o?"show":"hide",f=h.is(":visible"),g=s(ze).filter(":visible:not(:animated)").not(c);return l.update(t),o&&d.stealfocus!==k&&i(s(":focus")),h.toggleClass("blurs",d.blur),o&&h.appendTo(e.body),h.is(":animated")&&f===o&&a!==k||!o&&g.length||(h.stop(W,k),s.isFunction(p)?p.call(h,o):p===k?h[u]():h.fadeTo(parseInt(r,10)||90,o?1:0,(function(){o||h.hide()})),o||h.queue((function(t){h.css({left:"",top:""}),s(ze).length||h.detach(),t()})),a=o,n.destroyed&&(n=E)),l}}),l.init()},Te=new Te,s.extend(q.prototype,{init:function(t){var e=t.tooltip;return this.options.on?(t.elements.overlay=Te.elem,e.addClass(je).css("z-index",T.modal_zindex+s(ze).length),t._bind(e,["tooltipshow","tooltiphide"],(function(t,i,o){var n=t.originalEvent;if(t.target===e[0])if(n&&"tooltiphide"===t.type&&/mouse(leave|enter)/.test(n.type)&&s(n.relatedTarget).closest(Te.elem[0]).length)try{t.preventDefault()}catch(r){}else(!n||n&&"tooltipsolo"!==n.type)&&this.toggle(t,"tooltipshow"===t.type,o)}),this._ns,this),t._bind(e,"tooltipfocus",(function(t,i){if(!t.isDefaultPrevented()&&t.target===e[0]){var o=s(ze),n=T.modal_zindex+o.length,r=parseInt(e[0].style.zIndex,10);Te.elem[0].style.zIndex=n-1,o.each((function(){this.style.zIndex>r&&(this.style.zIndex-=1)})),o.filter("."+Z).qtip("blur",t.originalEvent),e.addClass(Z)[0].style.zIndex=n,Te.update(i);try{t.preventDefault()}catch(a){}}}),this._ns,this),t._bind(e,"tooltiphide",(function(t){t.target===e[0]&&s(ze).filter(":visible").not(e).last().qtip("focus",t)}),this._ns,this),i):this},toggle:function(t,e,s){return t&&t.isDefaultPrevented()?this:(Te.toggle(this.qtip,!!e,s),i)},destroy:function(){this.qtip.tooltip.removeClass(je),this.qtip._unbind(this.qtip.tooltip,this._ns),Te.toggle(this.qtip,k),delete this.qtip.elements.overlay}}),Ce=R.modal=function(t){return new q(t,t.options.show.modal)},Ce.sanitize=function(t){t.show&&("object"!=typeof t.show.modal?t.show.modal={on:!!t.show.modal}:t.show.modal.on===i&&(t.show.modal.on=W))},T.modal_zindex=T.zindex-200,Ce.initialize="render",M.modal={"^show.modal.(on|blur)$":function(){this.destroy(),this.init(),this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},s.extend(W,T.defaults,{show:{modal:{on:k,effect:W,blur:W,stealfocus:W,escape:W}}}),R.viewport=function(i,s,o,n,r,a,h){function l(t,e,i,o,n,r,a,h,l){var c=s[n],p=_[t],b=x[t],w=i===V,q=p===n?l:p===r?-l:-l/2,C=b===n?h:b===r?-h:-h/2,T=v[n]+y[n]-(f?0:u[n]),j=T-c,z=c+l-(a===A?g:m)-T,M=q-(_.precedance===t||p===_[e]?C:0)-(b===N?h/2:0);return w?(M=(p===n?1:-1)*q,s[n]+=j>0?j:z>0?-z:0,s[n]=Math.max(-u[n]+y[n],c-M,Math.min(Math.max(-u[n]+y[n]+(a===A?g:m),c+M),s[n],"center"===p?c-q:1e9))):(o*="flipinvert"===i?2:0,j>0&&(p!==n||z>0)?(s[n]-=M+o,d.invert(t,n)):z>0&&(p!==r||j>0)&&(s[n]-=(p===N?-M:M)+o,d.invert(t,r)),v>s[n]&&-s[n]>z&&(s[n]=c,d=_.clone())),s[n]-c}var c,d,p,u,f,g,m,v,y,b=o.target,w=i.elements.tooltip,_=o.my,x=o.at,q=o.adjust,C=q.method.split(" "),T=C[0],j=C[1]||C[0],z=o.viewport,M=o.container,I=i.cache,W={left:0,top:0};return z.jquery&&b[0]!==t&&b[0]!==e.body&&"none"!==q.method?(u=M.offset()||W,f="static"===M.css("position"),c="fixed"===w.css("position"),g=z[0]===t?z.width():z.outerWidth(k),m=z[0]===t?z.height():z.outerHeight(k),v={left:c?0:z.scrollLeft(),top:c?0:z.scrollTop()},y=z.offset()||W,("shift"!==T||"shift"!==j)&&(d=_.clone()),W={left:"none"!==T?l(S,L,T,q.x,F,P,A,n,a):0,top:"none"!==j?l(L,S,j,q.y,D,O,B,r,h):0},d&&I.lastClass!==(p=X+"-pos-"+d.abbrev())&&w.removeClass(i.cache.lastClass).addClass(i.cache.lastClass=p),W):W},R.polys={polygon:function(t,e){var i,s,o,n={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:k},r=0,a=[],h=1,l=1,c=0,d=0;for(r=t.length;r--;)(i=[parseInt(t[--r],10),parseInt(t[r+1],10)])[0]>n.position.right&&(n.position.right=i[0]),i[0]<n.position.left&&(n.position.left=i[0]),i[1]>n.position.bottom&&(n.position.bottom=i[1]),i[1]<n.position.top&&(n.position.top=i[1]),a.push(i);if(s=n.width=Math.abs(n.position.right-n.position.left),o=n.height=Math.abs(n.position.bottom-n.position.top),"c"===e.abbrev())n.position={left:n.position.left+n.width/2,top:n.position.top+n.height/2};else{for(;s>0&&o>0&&h>0&&l>0;)for(s=Math.floor(s/2),o=Math.floor(o/2),e.x===F?h=s:e.x===P?h=n.width-s:h+=Math.floor(s/2),e.y===D?l=o:e.y===O?l=n.height-o:l+=Math.floor(o/2),r=a.length;r--&&!(2>a.length);)c=a[r][0]-n.position.left,d=a[r][1]-n.position.top,(e.x===F&&c>=h||e.x===P&&h>=c||e.x===N&&(h>c||c>n.width-h)||e.y===D&&d>=l||e.y===O&&l>=d||e.y===N&&(l>d||d>n.height-l))&&a.splice(r,1);n.position={left:a[0][0],top:a[0][1]}}return n},rect:function(t,e,i,s){return{width:Math.abs(i-t),height:Math.abs(s-e),position:{left:Math.min(t,i),top:Math.min(e,s)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(t,e,i,s,o){var n=R.polys._angles[o.abbrev()],r=0===n?0:i*Math.cos(n*Math.PI),a=s*Math.sin(n*Math.PI);return{width:2*i-Math.abs(r),height:2*s-Math.abs(a),position:{left:t+r,top:e+a},adjustable:k}},circle:function(t,e,i,s){return R.polys.ellipse(t,e,i,i,s)}},R.svg=function(t,i,o){for(var a,h,l,c,d,p,u,f,g,m=s(e),v=i[0],y=s(v.ownerSVGElement),_=!0;!v.getBBox;)v=v.parentNode;if(!v.getBBox||!v.parentNode)return k;y.attr("width")||y.width()||parseInt(y.css("width"),10),y.attr("height")||y.height()||parseInt(y.css("height"),10);var x=(parseInt(i.css("stroke-width"),10)||0)/2;switch(v.nodeName){case"ellipse":case"circle":f=R.polys.ellipse(v.cx.baseVal.value,v.cy.baseVal.value,(v.rx||v.r).baseVal.value+x,(v.ry||v.r).baseVal.value+x,o);break;case"line":case"polygon":case"polyline":for(f=[],p=-1,c=(u=v.points||[{x:v.x1.baseVal.value,y:v.y1.baseVal.value},{x:v.x2.baseVal.value,y:v.y2.baseVal.value}]).numberOfItems||u.length;c>++p;)d=u.getItem?u.getItem(p):u[p],f.push.apply(f,[d.x,d.y]);f=R.polys.polygon(f,o);break;default:f={width:(f=v.getBoundingClientRect()).width,height:f.height,position:{left:f.left,top:f.top}},_=!1}return g=f.position,y=y[0],_&&(y.createSVGPoint&&(a=v.getScreenCTM(),(u=y.createSVGPoint()).x=g.left,u.y=g.top,h=u.matrixTransform(a),g.left=h.x,g.top=h.y),y.viewBox&&(l=y.viewBox.baseVal)&&l.width&&l.height&&(l.width,l.height)),g.left+=m.scrollLeft(),g.top+=m.scrollTop(),f},R.imagemap=function(t,e,i){e.jquery||(e=s(e));var o,n,r,a,h,l=e.attr("shape").toLowerCase().replace("poly","polygon"),c=s('img[usemap="#'+e.parent("map").attr("name")+'"]'),p=s.trim(e.attr("coords")).replace(/,$/,"").split(",");if(!c.length)return k;if("polygon"===l)a=R.polys.polygon(p,i);else{if(!R.polys[l])return k;for(r=-1,h=p.length,n=[];h>++r;)n.push(parseInt(p[r],10));a=R.polys[l].apply(this,n.concat(i))}return(o=c.offset()).left+=Math.ceil((c.outerWidth(k)-c.width())/2),o.top+=Math.ceil((c.outerHeight(k)-c.height())/2),a.position.left+=o.left,a.position.top+=o.top,a},s.extend(C.prototype,{_scroll:function(){var e=this.qtip.elements.overlay;e&&(e[0].style.top=s(t).scrollTop()+"px")},init:function(i){var o=i.tooltip;1>s("select, object").length&&(this.bgiframe=i.elements.bgiframe=s('<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>').appendTo(o),i._bind(o,"tooltipmove",this.adjustBGIFrame,this._ns,this)),this.redrawContainer=s("<div/>",{id:X+"-rcontainer"}).appendTo(e.body),i.elements.overlay&&i.elements.overlay.addClass("qtipmodal-ie6fix")&&(i._bind(t,["scroll","resize"],this._scroll,this._ns,this),i._bind(o,["tooltipshow"],this._scroll,this._ns,this)),this.redraw()},adjustBGIFrame:function(){var t,e,i=this.qtip.tooltip,s={height:i.outerHeight(k),width:i.outerWidth(k)},o=this.qtip.plugins.tip,n=this.qtip.elements.tip;e={left:-(e=parseInt(i.css("borderLeftWidth"),10)||0),top:-e},o&&n&&(e[(t="x"===o.corner.precedance?[A,F]:[B,D])[1]]-=n[t[0]]()),this.bgiframe.css(e).css(s)},redraw:function(){if(1>this.qtip.rendered||this.drawing)return this;var t,e,i,s,o=this.qtip.tooltip,n=this.qtip.options.style,r=this.qtip.options.position.container;return this.qtip.drawing=1,n.height&&o.css(B,n.height),n.width?o.css(A,n.width):(o.css(A,"").appendTo(this.redrawContainer),1>(e=o.width())%2&&(e+=1),t=((i=o.css("maxWidth")||"")+(s=o.css("minWidth")||"")).indexOf("%")>-1?r.width()/100:0,e=(i=(i.indexOf("%")>-1?t:1)*parseInt(i,10)||e)+(s=(s.indexOf("%")>-1?t:1)*parseInt(s,10)||0)?Math.min(Math.max(e,s),i):e,o.css(A,Math.round(e)).appendTo(r)),this.drawing=0,this},destroy:function(){this.bgiframe&&this.bgiframe.remove(),this.qtip._unbind([t,this.qtip.tooltip],this._ns)}}),Me=R.ie6=function(t){return 6===oe.ie?new C(t):k},Me.initialize="render",M.ie6={"^content|style$":function(){this.redraw()}}}))},"./node_modules/react-dom-confetti/lib/confetti.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react=__webpack_require__("./node_modules/react/index.js"),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(_react),_domConfetti=__webpack_require__("./node_modules/dom-confetti/lib/main.js");var style={position:"relative"},Confetti=function(_Component){function Confetti(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Confetti);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Confetti.__proto__||Object.getPrototypeOf(Confetti)).call(this,props));return _this.setRef=_this.setRef.bind(_this),_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Confetti,_Component),_createClass(Confetti,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){!prevProps.active&&this.props.active&&(0,_domConfetti.confetti)(this.container,this.props.config)}},{key:"setRef",value:function setRef(ref){this.container=ref}},{key:"render",value:function render(){return _react2.default.createElement("div",{className:this.props.className,style,ref:this.setRef})}}]),Confetti}(_react.Component);exports.default=Confetti},"./node_modules/react-focus-lock/dist/es2015/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoFocusInside:()=>es2015_AutoFocusInside,FocusLockUI:()=>Lock,FreeFocusInside:()=>es2015_FreeFocusInside,InFocusGuard:()=>FocusGuard,MoveFocusInside:()=>es2015_MoveFocusInside,default:()=>es2015,useFocusController:()=>useFocusController,useFocusInside:()=>useFocusInside,useFocusScope:()=>useFocusScope,useFocusState:()=>useFocusState});var react=__webpack_require__("./node_modules/react/index.js"),FOCUS_AUTO=(__webpack_require__("./node_modules/prop-types/index.js"),"data-autofocus-inside"),useMergeRef=__webpack_require__("./node_modules/use-callback-ref/dist/es2015/useMergeRef.js"),hiddenGuard={width:"1px",height:"0px",padding:0,overflow:"hidden",position:"fixed",top:"1px",left:"1px"},InFocusGuard=function InFocusGuard(_ref){var _ref$children=_ref.children,children=void 0===_ref$children?null:_ref$children;return react.createElement(react.Fragment,null,react.createElement("div",{key:"guard-first","data-focus-guard":!0,"data-focus-auto-guard":!0,style:hiddenGuard}),children,children&&react.createElement("div",{key:"guard-last","data-focus-guard":!0,"data-focus-auto-guard":!0,style:hiddenGuard}))};InFocusGuard.propTypes={};const FocusGuard=InFocusGuard;var medium=__webpack_require__("./node_modules/use-sidecar/dist/es2015/medium.js"),mediumFocus=(0,medium.C)({},(function(_ref){return{target:_ref.target,currentTarget:_ref.currentTarget}})),mediumBlur=(0,medium.C)(),mediumEffect=(0,medium.C)(),mediumSidecar=(0,medium.f)({async:!0,ssr:"undefined"!=typeof document}),focusScope=(0,react.createContext)(void 0),emptyArray=[],FocusLock=react.forwardRef((function FocusLockUI(props,parentRef){var _extends2,_React$useState=react.useState(),realObserved=_React$useState[0],setObserved=_React$useState[1],observed=react.useRef(),isActive=react.useRef(!1),originalFocusedElement=react.useRef(null),update=react.useState({})[1],children=props.children,_props$disabled=props.disabled,disabled=void 0!==_props$disabled&&_props$disabled,_props$noFocusGuards=props.noFocusGuards,noFocusGuards=void 0!==_props$noFocusGuards&&_props$noFocusGuards,_props$persistentFocu=props.persistentFocus,persistentFocus=void 0!==_props$persistentFocu&&_props$persistentFocu,_props$crossFrame=props.crossFrame,crossFrame=void 0===_props$crossFrame||_props$crossFrame,_props$autoFocus=props.autoFocus,autoFocus=void 0===_props$autoFocus||_props$autoFocus,group=(props.allowTextSelection,props.group),className=props.className,whiteList=props.whiteList,hasPositiveIndices=props.hasPositiveIndices,_props$shards=props.shards,shards=void 0===_props$shards?emptyArray:_props$shards,_props$as=props.as,Container=void 0===_props$as?"div":_props$as,_props$lockProps=props.lockProps,containerProps=void 0===_props$lockProps?{}:_props$lockProps,SideCar=props.sideCar,_props$returnFocus=props.returnFocus,shouldReturnFocus=void 0!==_props$returnFocus&&_props$returnFocus,focusOptions=props.focusOptions,onActivationCallback=props.onActivation,onDeactivationCallback=props.onDeactivation,id=react.useState({})[0],onActivation=react.useCallback((function(_ref){var captureFocusRestore=_ref.captureFocusRestore;if(!originalFocusedElement.current){var _document,activeElement=null==(_document=document)?void 0:_document.activeElement;originalFocusedElement.current=activeElement,activeElement!==document.body&&(originalFocusedElement.current=captureFocusRestore(activeElement))}observed.current&&onActivationCallback&&onActivationCallback(observed.current),isActive.current=!0,update()}),[onActivationCallback]),onDeactivation=react.useCallback((function(){isActive.current=!1,onDeactivationCallback&&onDeactivationCallback(observed.current),update()}),[onDeactivationCallback]),returnFocus=react.useCallback((function(allowDefer){var focusRestore=originalFocusedElement.current;if(focusRestore){var returnFocusTo=("function"==typeof focusRestore?focusRestore():focusRestore)||document.body,howToReturnFocus="function"==typeof shouldReturnFocus?shouldReturnFocus(returnFocusTo):shouldReturnFocus;if(howToReturnFocus){var returnFocusOptions="object"==typeof howToReturnFocus?howToReturnFocus:void 0;originalFocusedElement.current=null,allowDefer?Promise.resolve().then((function(){return returnFocusTo.focus(returnFocusOptions)})):returnFocusTo.focus(returnFocusOptions)}}}),[shouldReturnFocus]),onFocus=react.useCallback((function(event){isActive.current&&mediumFocus.useMedium(event)}),[]),onBlur=mediumBlur.useMedium,setObserveNode=react.useCallback((function(newObserved){observed.current!==newObserved&&(observed.current=newObserved,setObserved(newObserved))}),[]);var lockProps=_extends(((_extends2={})["data-focus-lock-disabled"]=disabled&&"disabled",_extends2["data-focus-lock"]=group,_extends2),containerProps),hasLeadingGuards=!0!==noFocusGuards,hasTailingGuards=hasLeadingGuards&&"tail"!==noFocusGuards,mergedRef=(0,useMergeRef.S)([parentRef,setObserveNode]),focusScopeValue=react.useMemo((function(){return{observed,shards,enabled:!disabled,active:isActive.current}}),[disabled,isActive.current,shards,realObserved]);return react.createElement(react.Fragment,null,hasLeadingGuards&&[react.createElement("div",{key:"guard-first","data-focus-guard":!0,tabIndex:disabled?-1:0,style:hiddenGuard}),hasPositiveIndices?react.createElement("div",{key:"guard-nearest","data-focus-guard":!0,tabIndex:disabled?-1:1,style:hiddenGuard}):null],!disabled&&react.createElement(SideCar,{id,sideCar:mediumSidecar,observed:realObserved,disabled,persistentFocus,crossFrame,autoFocus,whiteList,shards,onActivation,onDeactivation,returnFocus,focusOptions}),react.createElement(Container,_extends({ref:mergedRef},lockProps,{className,onBlur,onFocus}),react.createElement(focusScope.Provider,{value:focusScopeValue},children)),hasTailingGuards&&react.createElement("div",{"data-focus-guard":!0,tabIndex:disabled?-1:0,style:hiddenGuard}))}));FocusLock.propTypes={};const Lock=FocusLock;function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function toPropertyKey(t){var i=function toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:String(i)}const index_es=function withSideEffect(reducePropsToState,handleStateChangeOnClient){return function wrap(WrappedComponent){var state,mountedInstances=[];function emitChange(){state=reducePropsToState(mountedInstances.map((function(instance){return instance.props}))),handleStateChangeOnClient(state)}var SideEffect=function(_PureComponent){function SideEffect(){return _PureComponent.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SideEffect,_PureComponent),SideEffect.peek=function peek(){return state};var _proto=SideEffect.prototype;return _proto.componentDidMount=function componentDidMount(){mountedInstances.push(this),emitChange()},_proto.componentDidUpdate=function componentDidUpdate(){emitChange()},_proto.componentWillUnmount=function componentWillUnmount(){var index=mountedInstances.indexOf(this);mountedInstances.splice(index,1),emitChange()},_proto.render=function render(){return react.createElement(WrappedComponent,this.props)},SideEffect}(react.PureComponent);return function _defineProperty(obj,key,value){return(key=toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SideEffect,"displayName","SideEffect("+function getDisplayName(WrappedComponent){return WrappedComponent.displayName||WrappedComponent.name||"Component"}(WrappedComponent)+")"),SideEffect}};var toArray=function(a){for(var ret=Array(a.length),i=0;i<a.length;++i)ret[i]=a[i];return ret},asArray=function(a){return Array.isArray(a)?a:[a]},getFirst=function(a){return Array.isArray(a)?a[0]:a},getParentNode=function(node){return node.parentNode&&node.parentNode.nodeType===Node.DOCUMENT_FRAGMENT_NODE?node.parentNode.host:node.parentNode},isTopNode=function(node){return node===document||node&&node.nodeType===Node.DOCUMENT_NODE},isVisibleUncached=function(node,checkParent){return!node||isTopNode(node)||!function(node){if(node.nodeType!==Node.ELEMENT_NODE)return!1;var computedStyle=window.getComputedStyle(node,null);return!(!computedStyle||!computedStyle.getPropertyValue||"none"!==computedStyle.getPropertyValue("display")&&"hidden"!==computedStyle.getPropertyValue("visibility"))}(node)&&!function(node){return node.hasAttribute("inert")}(node)&&checkParent(getParentNode(node))},isVisibleCached=function(visibilityCache,node){var cached=visibilityCache.get(node);if(void 0!==cached)return cached;var result=isVisibleUncached(node,isVisibleCached.bind(void 0,visibilityCache));return visibilityCache.set(node,result),result},isAutoFocusAllowedCached=function(cache,node){var cached=cache.get(node);if(void 0!==cached)return cached;var result=function(node,checkParent){return!(node&&!isTopNode(node))||!!isAutoFocusAllowed(node)&&checkParent(getParentNode(node))}(node,isAutoFocusAllowedCached.bind(void 0,cache));return cache.set(node,result),result},getDataset=function(node){return node.dataset},isHTMLInputElement=function(node){return"INPUT"===node.tagName},isRadioElement=function(node){return isHTMLInputElement(node)&&"radio"===node.type},isAutoFocusAllowed=function(node){var attribute=node.getAttribute("data-no-autofocus");return![!0,"true",""].includes(attribute)},isGuard=function(node){var _a;return Boolean(node&&(null===(_a=getDataset(node))||void 0===_a?void 0:_a.focusGuard))},isNotAGuard=function(node){return!isGuard(node)},isDefined=function(x){return Boolean(x)},tabSort=function(a,b){var aTab=Math.max(0,a.tabIndex),bTab=Math.max(0,b.tabIndex),tabDiff=aTab-bTab,indexDiff=a.index-b.index;if(tabDiff){if(!aTab)return 1;if(!bTab)return-1}return tabDiff||indexDiff},orderByTabIndex=function(nodes,filterNegative,keepGuards){return toArray(nodes).map((function(node,index){var tabIndex=function(node){return node.tabIndex<0&&!node.hasAttribute("tabindex")?0:node.tabIndex}(node);return{node,index,tabIndex:keepGuards&&-1===tabIndex?(node.dataset||{}).focusGuard?0:-1:tabIndex}})).filter((function(data){return!filterNegative||data.tabIndex>=0})).sort(tabSort)},queryTabbables=["button:enabled","select:enabled","textarea:enabled","input:enabled","a[href]","area[href]","summary","iframe","object","embed","audio[controls]","video[controls]","[tabindex]","[contenteditable]","[autofocus]"].join(","),queryGuardTabbables="".concat(queryTabbables,", [data-focus-guard]"),getFocusablesWithShadowDom=function(parent,withGuards){return toArray((parent.shadowRoot||parent).children).reduce((function(acc,child){return acc.concat(child.matches(withGuards?queryGuardTabbables:queryTabbables)?[child]:[],getFocusablesWithShadowDom(child))}),[])},getFocusables=function(parents,withGuards){return parents.reduce((function(acc,parent){var _a,focusableWithShadowDom=getFocusablesWithShadowDom(parent,withGuards),focusableWithIframes=(_a=[]).concat.apply(_a,focusableWithShadowDom.map((function(node){return function(parent,withGuards){var _a;return parent instanceof HTMLIFrameElement&&(null===(_a=parent.contentDocument)||void 0===_a?void 0:_a.body)?getFocusables([parent.contentDocument.body],withGuards):[parent]}(node,withGuards)})));return acc.concat(focusableWithIframes,parent.parentNode?toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter((function(node){return node===parent})):[])}),[])},filterFocusable=function(nodes,visibilityCache){return toArray(nodes).filter((function(node){return isVisibleCached(visibilityCache,node)})).filter((function(node){return function(node){return!((isHTMLInputElement(node)||function(node){return"BUTTON"===node.tagName}(node))&&("hidden"===node.type||node.disabled))}(node)}))},filterAutoFocusable=function(nodes,cache){return void 0===cache&&(cache=new Map),toArray(nodes).filter((function(node){return isAutoFocusAllowedCached(cache,node)}))},getTabbableNodes=function(topNodes,visibilityCache,withGuards){return orderByTabIndex(filterFocusable(getFocusables(topNodes,withGuards),visibilityCache),!0,withGuards)},getFocusableNodes=function(topNodes,visibilityCache){return orderByTabIndex(filterFocusable(getFocusables(topNodes),visibilityCache),!1)},parentAutofocusables=function(topNode,visibilityCache){return filterFocusable((parentFocus=topNode.querySelectorAll("[".concat(FOCUS_AUTO,"]")),toArray(parentFocus).map((function(node){return getFocusables([node])})).reduce((function(acc,nodes){return acc.concat(nodes)}),[])),visibilityCache);var parentFocus},contains=function(scope,element){return scope.shadowRoot?contains(scope.shadowRoot,element):!(void 0===Object.getPrototypeOf(scope).contains||!Object.getPrototypeOf(scope).contains.call(scope,element))||toArray(scope.children).some((function(child){var _a;if(child instanceof HTMLIFrameElement){var iframeBody=null===(_a=child.contentDocument)||void 0===_a?void 0:_a.body;return!!iframeBody&&contains(iframeBody,element)}return contains(child,element)}))},getActiveElement=function(inDocument){if(void 0===inDocument&&(inDocument=document),inDocument&&inDocument.activeElement){var activeElement=inDocument.activeElement;return activeElement.shadowRoot?getActiveElement(activeElement.shadowRoot):activeElement instanceof HTMLIFrameElement&&function(cb){try{return cb()}catch(e){return}}((function(){return activeElement.contentWindow.document}))?getActiveElement(activeElement.contentWindow.document):activeElement}},getTopParent=function(node){return node.parentNode?getTopParent(node.parentNode):node},getAllAffectedNodes=function(node){return asArray(node).filter(Boolean).reduce((function(acc,currentNode){var group=currentNode.getAttribute("data-focus-lock");return acc.push.apply(acc,group?function(nodes){for(var contained=new Set,l=nodes.length,i=0;i<l;i+=1)for(var j=i+1;j<l;j+=1){var position=nodes[i].compareDocumentPosition(nodes[j]);(position&Node.DOCUMENT_POSITION_CONTAINED_BY)>0&&contained.add(j),(position&Node.DOCUMENT_POSITION_CONTAINS)>0&&contained.add(i)}return nodes.filter((function(_,index){return!contained.has(index)}))}(toArray(getTopParent(currentNode).querySelectorAll("[".concat("data-focus-lock",'="').concat(group,'"]:not([').concat("data-focus-lock-disabled",'="disabled"])')))):[currentNode]),acc}),[])},focusInside=function(topNode,activeElement){return void 0===activeElement&&(activeElement=getActiveElement(getFirst(topNode).ownerDocument)),!(!activeElement||activeElement.dataset&&activeElement.dataset.focusGuard)&&getAllAffectedNodes(topNode).some((function(node){return contains(node,activeElement)||function(topNode,activeElement){return Boolean(toArray(topNode.querySelectorAll("iframe")).some((function(node){return function(frame,activeElement){return frame===activeElement}(node,activeElement)})))}(node,activeElement)}))},focusOn=function(target,focusOptions){target&&("focus"in target&&target.focus(focusOptions),"contentWindow"in target&&target.contentWindow&&target.contentWindow.focus())},correctNode=function(node,nodes){return isRadioElement(node)&&node.name?function(node,nodes){return nodes.filter(isRadioElement).filter((function(el){return el.name===node.name})).filter((function(el){return el.checked}))[0]||node}(node,nodes):node},pickFirstFocus=function(nodes){return nodes[0]&&nodes.length>1?correctNode(nodes[0],nodes):nodes[0]},pickFocusable=function(nodes,node){return nodes.indexOf(correctNode(node,nodes))},newFocus=function(innerNodes,innerTabbables,outerNodes,activeElement,lastNode){var cnt=innerNodes.length,firstFocus=innerNodes[0],lastFocus=innerNodes[cnt-1],isOnGuard=isGuard(activeElement);if(!(activeElement&&innerNodes.indexOf(activeElement)>=0)){var activeIndex=void 0!==activeElement?outerNodes.indexOf(activeElement):-1,lastIndex=lastNode?outerNodes.indexOf(lastNode):activeIndex,lastNodeInside=lastNode?innerNodes.indexOf(lastNode):-1;if(-1===activeIndex)return-1!==lastNodeInside?lastNodeInside:"NEW_FOCUS";if(-1===lastNodeInside)return"NEW_FOCUS";var nodes,resultSet,indexDiff=activeIndex-lastIndex,firstNodeIndex=outerNodes.indexOf(firstFocus),lastNodeIndex=outerNodes.indexOf(lastFocus),correctedNodes=(nodes=outerNodes,resultSet=new Set,nodes.forEach((function(node){return resultSet.add(correctNode(node,nodes))})),nodes.filter((function(node){return resultSet.has(node)}))),correctedIndexDiff=(void 0!==activeElement?correctedNodes.indexOf(activeElement):-1)-(lastNode?correctedNodes.indexOf(lastNode):activeIndex);if(!indexDiff&&lastNodeInside>=0)return lastNodeInside;if(0===innerTabbables.length)return lastNodeInside;var returnFirstNode=pickFocusable(innerNodes,innerTabbables[0]),returnLastNode=pickFocusable(innerNodes,innerTabbables[innerTabbables.length-1]);return activeIndex<=firstNodeIndex&&isOnGuard&&Math.abs(indexDiff)>1?returnLastNode:activeIndex>=lastNodeIndex&&isOnGuard&&Math.abs(indexDiff)>1?returnFirstNode:indexDiff&&Math.abs(correctedIndexDiff)>1?lastNodeInside:activeIndex<=firstNodeIndex?returnLastNode:activeIndex>lastNodeIndex?returnFirstNode:indexDiff?Math.abs(indexDiff)>1?lastNodeInside:(cnt+lastNodeInside+indexDiff)%cnt:void 0}},pickAutofocus=function(nodesIndexes,orderedNodes,groups){var autoFocusables,nodes=nodesIndexes.map((function(_a){return _a.node})),autoFocusable=filterAutoFocusable(nodes.filter((autoFocusables=groups,function(node){var _a,autofocus=null===(_a=getDataset(node))||void 0===_a?void 0:_a.autofocus;return node.autofocus||void 0!==autofocus&&"false"!==autofocus||autoFocusables.indexOf(node)>=0})));return autoFocusable&&autoFocusable.length?pickFirstFocus(autoFocusable):pickFirstFocus(filterAutoFocusable(orderedNodes))},getParents=function(node,parents){return void 0===parents&&(parents=[]),parents.push(node),node.parentNode&&getParents(node.parentNode.host||node.parentNode,parents),parents},getCommonParent=function(nodeA,nodeB){for(var parentsA=getParents(nodeA),parentsB=getParents(nodeB),i=0;i<parentsA.length;i+=1){var currentParent=parentsA[i];if(parentsB.indexOf(currentParent)>=0)return currentParent}return!1},getTopCommonParent=function(baseActiveElement,leftEntry,rightEntries){var activeElements=asArray(baseActiveElement),leftEntries=asArray(leftEntry),activeElement=activeElements[0],topCommon=!1;return leftEntries.filter(Boolean).forEach((function(entry){topCommon=getCommonParent(topCommon||entry,entry)||topCommon,rightEntries.filter(Boolean).forEach((function(subEntry){var common=getCommonParent(activeElement,subEntry);common&&(topCommon=!topCommon||contains(common,topCommon)?common:getCommonParent(common,topCommon))}))})),topCommon},allParentAutofocusables=function(entries,visibilityCache){return entries.reduce((function(acc,node){return acc.concat(parentAutofocusables(node,visibilityCache))}),[])},focusSolver=function(topNode,lastNode){var activeElement=getActiveElement(asArray(topNode).length>0?document:getFirst(topNode).ownerDocument),entries=getAllAffectedNodes(topNode).filter(isNotAGuard),commonParent=getTopCommonParent(activeElement||topNode,topNode,entries),visibilityCache=new Map,anyFocusable=getFocusableNodes(entries,visibilityCache),innerElements=anyFocusable.filter((function(_a){var node=_a.node;return isNotAGuard(node)}));if(innerElements[0]){var srcNodes,dstNodes,remap,outerNodes=getFocusableNodes([commonParent],visibilityCache).map((function(_a){return _a.node})),orderedInnerElements=(srcNodes=outerNodes,dstNodes=innerElements,remap=new Map,dstNodes.forEach((function(entity){return remap.set(entity.node,entity)})),srcNodes.map((function(node){return remap.get(node)})).filter(isDefined)),innerFocusables=orderedInnerElements.map((function(_a){return _a.node})),innerTabbable=orderedInnerElements.filter((function(_a){return _a.tabIndex>=0})).map((function(_a){return _a.node})),newId=newFocus(innerFocusables,innerTabbable,outerNodes,activeElement,lastNode);if("NEW_FOCUS"===newId){var focusNode=pickAutofocus(anyFocusable,innerTabbable,allParentAutofocusables(entries,visibilityCache))||pickAutofocus(anyFocusable,innerFocusables,allParentAutofocusables(entries,visibilityCache));return focusNode?{node:focusNode}:void console.warn("focus-lock: cannot find any node to move focus into")}return void 0===newId?newId:orderedInnerElements[newId]}},guardCount=0,lockDisabled=!1,moveFocusInside=function(topNode,lastNode,options){void 0===options&&(options={});var focusable=focusSolver(topNode,lastNode);if(!lockDisabled&&focusable){if(guardCount>2)return console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting"),lockDisabled=!0,void setTimeout((function(){lockDisabled=!1}),1);guardCount++,focusOn(focusable.node,options.focusOptions),guardCount--}},moveFocus=function(fromElement,options,cb){void 0===options&&(options={});var newOptions=function(options){return Object.assign({scope:document.body,cycle:!0,onlyTabbable:!0},options)}(options),solution=function(element,scope,useTabbables){if(!element||!scope)return console.error("no element or scope given"),{};var shards=asArray(scope);if(shards.every((function(shard){return!contains(shard,element)})))return console.error("Active element is not contained in the scope"),{};var focusables=useTabbables?getTabbableNodes(shards,new Map):getFocusableNodes(shards,new Map),current=focusables.findIndex((function(_a){return _a.node===element}));return-1!==current?{prev:focusables[current-1],next:focusables[current+1],first:focusables[0],last:focusables[focusables.length-1]}:void 0}(fromElement,newOptions.scope,newOptions.onlyTabbable);if(solution){var target=cb(solution,newOptions.cycle);target&&focusOn(target.node,newOptions.focusOptions)}},pickBoundary=function(scope,options,what){var _a,shards,useTabbables,set,node=(shards=scope,useTabbables=null===(_a=options.onlyTabbable)||void 0===_a||_a,{first:(set=useTabbables?getTabbableNodes(asArray(shards),new Map):getFocusableNodes(asArray(shards),new Map))[0],last:set[set.length-1]})[what];node&&focusOn(node.node,options.focusOptions)};function weakRef(value){if(!value)return null;var w=value?new WeakRef(value):null;return function(){return(null==w?void 0:w.deref())||null}}function deferAction(action){setTimeout(action,1)}var inlineProp=function inlineProp(name,value){var obj={};return obj[name]=value,obj},extractRef=function extractRef(ref){return ref&&"current"in ref?ref.current:ref},isFreeFocus=function isFreeFocus(){return function focusOnBody(){return document&&document.activeElement===document.body}()||function(inDocument){void 0===inDocument&&(inDocument=document);var activeElement=getActiveElement(inDocument);return!!activeElement&&toArray(inDocument.querySelectorAll("[".concat("data-no-focus-lock","]"))).some((function(node){return contains(node,activeElement)}))}()},lastActiveTrap=null,lastActiveFocus=null,lastPortaledElement=null,focusWasOutsideWindow=!1,defaultWhitelist=function defaultWhitelist(){return!0};function autoGuard(startIndex,end,step,allNodes){var lastGuard=null,i=startIndex;do{var item=allNodes[i];if(item.guard)item.node.dataset.focusAutoGuard&&(lastGuard=item);else{if(!item.lockItem)break;if(i!==startIndex)return;lastGuard=null}}while((i+=step)!==end);lastGuard&&(lastGuard.node.tabIndex=0)}var checkInHost=function checkInHost(check,el,boundary){return el&&(el.host===check&&(!el.activeElement||boundary.contains(el.activeElement))||el.parentNode&&checkInHost(check,el.parentNode,boundary))},activateTrap=function activateTrap(){var topNode,entries,commonParent,outerNodes,innerElements,result=!1;if(lastActiveTrap){var _lastActiveTrap=lastActiveTrap,observed=_lastActiveTrap.observed,persistentFocus=_lastActiveTrap.persistentFocus,autoFocus=_lastActiveTrap.autoFocus,shards=_lastActiveTrap.shards,crossFrame=_lastActiveTrap.crossFrame,focusOptions=_lastActiveTrap.focusOptions,workingNode=observed||lastPortaledElement&&lastPortaledElement.portaledElement,activeElement=document&&document.activeElement;if(workingNode){var workingArea=[workingNode].concat(shards.map(extractRef).filter(Boolean));if(activeElement&&!function focusWhitelisted(activeElement){return(lastActiveTrap.whiteList||defaultWhitelist)(activeElement)}(activeElement)||(persistentFocus||function focusWasOutside(crossFrameOption){return crossFrameOption?Boolean(focusWasOutsideWindow):"meanwhile"===focusWasOutsideWindow}(crossFrame)||!isFreeFocus()||!lastActiveFocus&&autoFocus)&&(workingNode&&!(focusInside(workingArea)||activeElement&&function withinHost(activeElement,workingArea){return workingArea.some((function(area){return checkInHost(activeElement,area,area)}))}(activeElement,workingArea)||function focusIsPortaledPair(element){return lastPortaledElement&&lastPortaledElement.portaledElement===element}(activeElement))&&(document&&!lastActiveFocus&&activeElement&&!autoFocus?(activeElement.blur&&activeElement.blur(),document.body.focus()):(result=moveFocusInside(workingArea,lastActiveFocus,{focusOptions}),lastPortaledElement={})),focusWasOutsideWindow=!1,lastActiveFocus=document&&document.activeElement),document&&activeElement!==document.activeElement&&document.querySelector("[data-focus-auto-guard]")){var newActiveElement=document&&document.activeElement,allNodes=(entries=getAllAffectedNodes(topNode=workingArea).filter(isNotAGuard),commonParent=getTopCommonParent(topNode,topNode,entries),outerNodes=orderByTabIndex(getFocusables([commonParent],!0),!0,!0),innerElements=getFocusables(entries,!1),outerNodes.map((function(_a){var node=_a.node;return{node,index:_a.index,lockItem:innerElements.indexOf(node)>=0,guard:isGuard(node)}}))),focusedIndex=allNodes.map((function(_ref){return _ref.node})).indexOf(newActiveElement);focusedIndex>-1&&(allNodes.filter((function(_ref2){var guard=_ref2.guard,node=_ref2.node;return guard&&node.dataset.focusAutoGuard})).forEach((function(_ref3){return _ref3.node.removeAttribute("tabIndex")})),autoGuard(focusedIndex,allNodes.length,1,allNodes),autoGuard(focusedIndex,-1,-1,allNodes))}}}return result},onTrap=function onTrap(event){activateTrap()&&event&&(event.stopPropagation(),event.preventDefault())},onBlur=function onBlur(){return deferAction(activateTrap)},onFocus=function onFocus(event){var source=event.target,currentNode=event.currentTarget;currentNode.contains(source)||function recordPortal(observerNode,portaledElement){lastPortaledElement={observerNode,portaledElement}}(currentNode,source)},onWindowBlur=function onWindowBlur(){focusWasOutsideWindow="just",deferAction((function(){focusWasOutsideWindow="meanwhile"}))};var focusLockAPI={moveFocusInside,focusInside,focusNextElement:function(fromElement,options){void 0===options&&(options={}),moveFocus(fromElement,options,(function(_a,cycle){var next=_a.next,first=_a.first;return next||cycle&&first}))},focusPrevElement:function(fromElement,options){void 0===options&&(options={}),moveFocus(fromElement,options,(function(_a,cycle){var prev=_a.prev,last=_a.last;return prev||cycle&&last}))},focusFirstElement:function(scope,options){void 0===options&&(options={}),pickBoundary(scope,options,"first")},focusLastElement:function(scope,options){void 0===options&&(options={}),pickBoundary(scope,options,"last")},captureFocusRestore:function(targetElement){var location=function(element){if(!element)return null;for(var stack=[],currentElement=element;currentElement&&currentElement!==document.body;)stack.push({current:weakRef(currentElement),parent:weakRef(currentElement.parentElement),left:weakRef(currentElement.previousElementSibling),right:weakRef(currentElement.nextElementSibling)}),currentElement=currentElement.parentElement;return{element:weakRef(element),stack,ownerDocument:element.ownerDocument}}(targetElement);return function(){return function(location){var _a,_b,_c,_d,_e;if(location)for(var stack=location.stack,ownerDocument=location.ownerDocument,visibilityCache=new Map,_i=0,stack_1=stack;_i<stack_1.length;_i++){var line=stack_1[_i],parent_1=null===(_a=line.parent)||void 0===_a?void 0:_a.call(line);if(parent_1&&ownerDocument.contains(parent_1)){for(var left=null===(_b=line.left)||void 0===_b?void 0:_b.call(line),right=null===(_c=line.right)||void 0===_c?void 0:_c.call(line),focusables=getTabbableNodes([parent_1],visibilityCache),aim=null!==(_e=null!==(_d=null==left?void 0:left.nextElementSibling)&&void 0!==_d?_d:right)&&void 0!==_e?_e:left;aim;){for(var _f=0,focusables_1=focusables;_f<focusables_1.length;_f++){var focusable=focusables_1[_f];if(null==aim?void 0:aim.contains(focusable.node))return focusable.node}aim=aim.nextElementSibling}if(focusables.length)return focusables[0].node}}}(location)}}};mediumFocus.assignSyncMedium(onFocus),mediumBlur.assignMedium(onBlur),mediumEffect.assignMedium((function(cb){return cb(focusLockAPI)}));const Trap=index_es((function reducePropsToState(propsList){return propsList.filter((function(_ref5){return!_ref5.disabled}))}),(function handleStateChangeOnClient(traps){var trap=traps.slice(-1)[0];trap&&!lastActiveTrap&&function attachHandler(){document.addEventListener("focusin",onTrap),document.addEventListener("focusout",onBlur),window.addEventListener("blur",onWindowBlur)}();var lastTrap=lastActiveTrap,sameTrap=lastTrap&&trap&&trap.id===lastTrap.id;lastActiveTrap=trap,lastTrap&&!sameTrap&&(lastTrap.onDeactivation(),traps.filter((function(_ref6){return _ref6.id===lastTrap.id})).length||lastTrap.returnFocus(!trap)),trap?(lastActiveFocus=null,sameTrap&&lastTrap.observed===trap.observed||trap.onActivation(focusLockAPI),activateTrap(),deferAction(activateTrap)):(!function detachHandler(){document.removeEventListener("focusin",onTrap),document.removeEventListener("focusout",onBlur),window.removeEventListener("blur",onWindowBlur)}(),lastActiveFocus=null)}))((function FocusWatcher(){return null}));var FocusLockCombination=react.forwardRef((function FocusLockUICombination(props,ref){return react.createElement(Lock,_extends({sideCar:Trap,ref},props))})),_ref=Lock.propTypes||{};_ref.sideCar,function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,["sideCar"]);FocusLockCombination.propTypes={};const Combination=FocusLockCombination;var AutoFocusInside=function AutoFocusInside(_ref){var _ref$disabled=_ref.disabled,disabled=void 0!==_ref$disabled&&_ref$disabled,children=_ref.children,_ref$className=_ref.className,className=void 0===_ref$className?void 0:_ref$className;return react.createElement("div",_extends({},inlineProp(FOCUS_AUTO,!disabled),{className}),children)};AutoFocusInside.propTypes={};const es2015_AutoFocusInside=AutoFocusInside;var useFocusInside=function useFocusInside(observedRef){react.useEffect((function(){var enabled=!0;return mediumEffect.useMedium((function(car){var observed=observedRef&&observedRef.current;enabled&&observed&&(car.focusInside(observed)||car.moveFocusInside(observed,null))})),function(){enabled=!1}}),[observedRef])};function MoveFocusInside(_ref){var _ref$disabled=_ref.disabled,isDisabled=void 0!==_ref$disabled&&_ref$disabled,className=_ref.className,children=_ref.children,ref=react.useRef(null);return useFocusInside(isDisabled?void 0:ref),react.createElement("div",_extends({},inlineProp(FOCUS_AUTO,!isDisabled),{ref,className}),children)}MoveFocusInside.propTypes={};const es2015_MoveFocusInside=MoveFocusInside;var FreeFocusInside=function FreeFocusInside(_ref){var children=_ref.children,className=_ref.className;return react.createElement("div",_extends({},inlineProp("data-no-focus-lock",!0),{className}),children)};FreeFocusInside.propTypes={};const es2015_FreeFocusInside=FreeFocusInside;var collapseRefs=function collapseRefs(shards){return shards.map(extractRef).filter(Boolean)},withMedium=function withMedium(fn){return new Promise((function(resolve){return mediumEffect.useMedium((function(){resolve(fn.apply(void 0,arguments))}))}))},useFocusController=function useFocusController(){for(var _len=arguments.length,shards=new Array(_len),_key=0;_key<_len;_key++)shards[_key]=arguments[_key];if(!shards.length)throw new Error("useFocusController requires at least one target element");var ref=(0,react.useRef)(shards);return ref.current=shards,(0,react.useMemo)((function(){return{autoFocus:function autoFocus(focusOptions){return void 0===focusOptions&&(focusOptions={}),withMedium((function(car){return car.moveFocusInside(collapseRefs(ref.current),null,focusOptions)}))},focusNext:function focusNext(options){return withMedium((function(car){car.moveFocusInside(collapseRefs(ref.current),null),car.focusNextElement(document.activeElement,_extends({scope:collapseRefs(ref.current)},options))}))},focusPrev:function focusPrev(options){return withMedium((function(car){car.moveFocusInside(collapseRefs(ref.current),null),car.focusPrevElement(document.activeElement,_extends({scope:collapseRefs(ref.current)},options))}))},focusFirst:function focusFirst(options){return withMedium((function(car){car.focusFirstElement(collapseRefs(ref.current),options)}))},focusLast:function focusLast(options){return withMedium((function(car){car.focusLastElement(collapseRefs(ref.current),options)}))}}}),[])},useFocusScope=function useFocusScope(){var scope=(0,react.useContext)(focusScope);if(!scope)throw new Error("FocusLock is required to operate with FocusScope");return useFocusController.apply(void 0,[scope.observed].concat(scope.shards))},mainbus=function createNanoEvents(){return{emit:function emit(event){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];for(var i=0,callbacks=this.events[event]||[],length=callbacks.length;i<length;i++)callbacks[i].apply(callbacks,args)},events:{},on:function on(event,cb){var _this$events,_this=this;return((_this$events=this.events)[event]||(_this$events[event]=[])).push(cb),function(){var _this$events$event;_this.events[event]=null==(_this$events$event=_this.events[event])?void 0:_this$events$event.filter((function(i){return cb!==i}))}}}}(),subscribeCounter=0,onFocusIn=function onFocusIn(event){return mainbus.emit("assign",event.target)},onFocusOut=function onFocusOut(event){return mainbus.emit("reset",event.target)},getFocusState=function getFocusState(target,current){return target===current?"self":current.contains(target)?"within":"within-boundary"},useFocusState=function useFocusState(callbacks){void 0===callbacks&&(callbacks={});var _useState=(0,react.useState)(!1),active=_useState[0],setActive=_useState[1],_useState2=(0,react.useState)(""),state=_useState2[0],setState=_useState2[1],ref=(0,react.useRef)(null),focusState=(0,react.useRef)({}),stateTracker=(0,react.useRef)(!1);(0,react.useEffect)((function(){if(ref.current){var isAlreadyFocused=ref.current===document.activeElement||ref.current.contains(document.activeElement);setActive(isAlreadyFocused),setState(getFocusState(document.activeElement,ref.current)),isAlreadyFocused&&callbacks.onFocus&&callbacks.onFocus()}}),[]);var onFocus=(0,react.useCallback)((function(e){focusState.current={focused:!0,state:getFocusState(e.target,e.currentTarget)}}),[]);return function useDocumentFocusSubscribe(){(0,react.useEffect)((function(){return subscribeCounter||(document.addEventListener("focusin",onFocusIn),document.addEventListener("focusout",onFocusOut)),subscribeCounter+=1,function(){(subscribeCounter-=1)||(document.removeEventListener("focusin",onFocusIn),document.removeEventListener("focusout",onFocusOut))}}),[])}(),(0,react.useEffect)((function(){var fout=mainbus.on("reset",(function(){focusState.current={}})),fin=mainbus.on("assign",(function(){var newState=focusState.current.focused||!1;setActive(newState),setState(focusState.current.state||""),newState!==stateTracker.current&&(stateTracker.current=newState,newState?callbacks.onFocus&&callbacks.onFocus():callbacks.onBlur&&callbacks.onBlur())}));return function(){fout(),fin()}}),[]),{active,state,onFocus,ref}};const es2015=Combination},"./node_modules/react-is/cjs/react-is.production.min.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var b="function"==typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"==typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t,exports.AsyncMode=l,exports.ConcurrentMode=m,exports.ContextConsumer=k,exports.ContextProvider=h,exports.Element=c,exports.ForwardRef=n,exports.Fragment=e,exports.Lazy=r,exports.Memo=q,exports.Portal=d,exports.Profiler=g,exports.StrictMode=f,exports.Suspense=p,exports.isValidElementType=function(a){return"string"==typeof a||"function"==typeof a||a===e||a===m||a===g||a===f||a===p||"object"==typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)},exports.isAsyncMode=function(a){return v(a)||t(a)===l},exports.isConcurrentMode=v,exports.isContextConsumer=function(a){return t(a)===k},exports.isContextProvider=function(a){return t(a)===h},exports.isElement=function(a){return"object"==typeof a&&null!==a&&a.$$typeof===c},exports.isForwardRef=function(a){return t(a)===n},exports.isFragment=function(a){return t(a)===e},exports.isLazy=function(a){return t(a)===r},exports.isMemo=function(a){return t(a)===q},exports.isPortal=function(a){return t(a)===d},exports.isProfiler=function(a){return t(a)===g},exports.isStrictMode=function(a){return t(a)===f},exports.isSuspense=function(a){return t(a)===p}},"./node_modules/react-is/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react-is/cjs/react-is.production.min.js")},"./node_modules/recorder-js/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/recorder-js/lib/index.js")},"./node_modules/recorder-js/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_microphone2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/recorder-js/lib/microphone.js"));var defaultConfig={nFrequencyBars:255,onAnalysed:null},Recorder=function(){function Recorder(audioContext){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Recorder),this.config=Object.assign({},defaultConfig,config),this.audioContext=audioContext,this.audioInput=null,this.realAudioInput=null,this.inputPoint=null,this.audioRecorder=null,this.rafID=null,this.analyserContext=null,this.recIndex=0,this.stream=null,this.updateAnalysers=this.updateAnalysers.bind(this)}return _createClass(Recorder,[{key:"init",value:function init(stream){var _this=this;return new Promise((function(resolve){_this.inputPoint=_this.audioContext.createGain(),_this.stream=stream,_this.realAudioInput=_this.audioContext.createMediaStreamSource(stream),_this.audioInput=_this.realAudioInput,_this.audioInput.connect(_this.inputPoint),_this.analyserNode=_this.audioContext.createAnalyser(),_this.analyserNode.fftSize=2048,_this.inputPoint.connect(_this.analyserNode),_this.audioRecorder=new _microphone2.default(_this.inputPoint);var zeroGain=_this.audioContext.createGain();zeroGain.gain.value=0,_this.inputPoint.connect(zeroGain),zeroGain.connect(_this.audioContext.destination),_this.updateAnalysers(),resolve()}))}},{key:"start",value:function start(){var _this2=this;return new Promise((function(resolve,reject){_this2.audioRecorder?(_this2.audioRecorder.clear(),_this2.audioRecorder.record(),resolve(_this2.stream)):reject("Not currently recording")}))}},{key:"stop",value:function stop(){var _this3=this;return new Promise((function(resolve){_this3.audioRecorder.stop(),_this3.audioRecorder.getBuffer((function(buffer){_this3.audioRecorder.exportWAV((function(blob){return resolve({buffer,blob})}))}))}))}},{key:"updateAnalysers",value:function updateAnalysers(){if(this.config.onAnalysed){requestAnimationFrame(this.updateAnalysers);var freqByteData=new Uint8Array(this.analyserNode.frequencyBinCount);this.analyserNode.getByteFrequencyData(freqByteData);for(var data=new Array(255),lastNonZero=0,datum=void 0,idx=0;idx<255;idx+=1)0!==(datum=Math.floor(freqByteData[idx])-Math.floor(freqByteData[idx])%5)&&(lastNonZero=idx),data[idx]=datum;this.config.onAnalysed({data,lineTo:lastNonZero})}}},{key:"setOnAnalysed",value:function setOnAnalysed(handler){this.config.onAnalysed=handler}}]),Recorder}();Recorder.download=function download(blob){var filename=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"audio";_microphone2.default.forceDownload(blob,filename+".wav")},exports.default=Recorder},"./node_modules/recorder-js/lib/microphone.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_inlineWorker2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/inline-worker/index.js"));var defaultConfig={bufferLen:4096,numChannels:2,mimeType:"audio/wav"},Microphone=function(){function Microphone(source,config){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Microphone),this.config=Object.assign({},defaultConfig,config),this.recording=!1,this.callbacks={getBuffer:[],exportWAV:[]},this.context=source.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,this.config.bufferLen,this.config.numChannels,this.config.numChannels),this.node.onaudioprocess=function(e){if(_this.recording){for(var buffer=[],channel=0;channel<_this.config.numChannels;channel++)buffer.push(e.inputBuffer.getChannelData(channel));_this.worker.postMessage({command:"record",buffer})}},source.connect(this.node),this.node.connect(this.context.destination);this.worker=new _inlineWorker2.default((function(){var recLength=0,recBuffers=[],sampleRate=void 0,numChannels=void 0;function initBuffers(){for(var channel=0;channel<numChannels;channel++)recBuffers[channel]=[]}function mergeBuffers(recBuffers,recLength){for(var result=new Float32Array(recLength),offset=0,i=0;i<recBuffers.length;i++)result.set(recBuffers[i],offset),offset+=recBuffers[i].length;return result}function writeString(view,offset,string){for(var i=0;i<string.length;i+=1)view.setUint8(offset+i,string.charCodeAt(i))}this.onmessage=function(e){switch(e.data.command){case"init":!function init(config){sampleRate=config.sampleRate,numChannels=config.numChannels,initBuffers()}(e.data.config);break;case"record":!function record(inputBuffer){for(var channel=0;channel<numChannels;channel++)recBuffers[channel].push(inputBuffer[channel]);recLength+=inputBuffer[0].length}(e.data.buffer);break;case"exportWAV":!function exportWAV(type){for(var buffers=[],channel=0;channel<numChannels;channel++)buffers.push(mergeBuffers(recBuffers[channel],recLength));var interleaved=void 0;interleaved=2===numChannels?function interleave(inputL,inputR){var length=inputL.length+inputR.length,result=new Float32Array(length),index=0,inputIndex=0;for(;index<length;)result[index++]=inputL[inputIndex],result[index++]=inputR[inputIndex],inputIndex++;return result}(buffers[0],buffers[1]):buffers[0];var dataview=function encodeWAV(samples){var buffer=new ArrayBuffer(44+2*samples.length),view=new DataView(buffer);return writeString(view,0,"RIFF"),view.setUint32(4,36+2*samples.length,!0),writeString(view,8,"WAVE"),writeString(view,12,"fmt "),view.setUint32(16,16,!0),view.setUint16(20,1,!0),view.setUint16(22,numChannels,!0),view.setUint32(24,sampleRate,!0),view.setUint32(28,4*sampleRate,!0),view.setUint16(32,2*numChannels,!0),view.setUint16(34,16,!0),writeString(view,36,"data"),view.setUint32(40,2*samples.length,!0),function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?32768*s:32767*s,!0)}}(view,44,samples),view}(interleaved),audioBlob=new Blob([dataview],{type});this.postMessage({command:"exportWAV",data:audioBlob})}(e.data.type);break;case"getBuffer":!function getBuffer(){for(var buffers=[],channel=0;channel<numChannels;channel++)buffers.push(mergeBuffers(recBuffers[channel],recLength));this.postMessage({command:"getBuffer",data:buffers})}();break;case"clear":!function clear(){recLength=0,recBuffers=[],initBuffers()}()}}}),{}),this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.config.numChannels}}),this.worker.onmessage=function(e){var cb=_this.callbacks[e.data.command].pop();"function"==typeof cb&&cb(e.data.data)}}return _createClass(Microphone,[{key:"record",value:function record(){this.recording=!0}},{key:"stop",value:function stop(){this.recording=!1}},{key:"clear",value:function clear(){this.worker.postMessage({command:"clear"})}},{key:"getBuffer",value:function getBuffer(cb){if(!(cb=cb||this.config.callback))throw new Error("Callback not set");this.callbacks.getBuffer.push(cb),this.worker.postMessage({command:"getBuffer"})}},{key:"exportWAV",value:function exportWAV(cb,mimeType){if(mimeType=mimeType||this.config.mimeType,!(cb=cb||this.config.callback))throw new Error("Callback not set");this.callbacks.exportWAV.push(cb),this.worker.postMessage({command:"exportWAV",type:mimeType})}}]),Microphone}();Microphone.forceDownload=function forceDownload(blob,filename){var a=document.createElement("a");a.style="display: none",document.body.appendChild(a);var url=window.URL.createObjectURL(blob);a.href=url,a.download=filename,a.click(),window.URL.revokeObjectURL(url),document.body.removeChild(a)},exports.default=Microphone},"./node_modules/use-callback-ref/dist/es2015/useMergeRef.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{S:()=>useMergeRefs});var react=__webpack_require__("./node_modules/react/index.js");function assignRef(ref,value){return"function"==typeof ref?ref(value):ref&&(ref.current=value),ref}var currentValues=new WeakMap;function useMergeRefs(refs,defaultValue){var callbackRef=function useCallbackRef(initialValue,callback){var ref=(0,react.useState)((function(){return{value:initialValue,callback,facade:{get current(){return ref.value},set current(value){var last=ref.value;last!==value&&(ref.value=value,ref.callback(value,last))}}}}))[0];return ref.callback=callback,ref.facade}(defaultValue||null,(function(newValue){return refs.forEach((function(ref){return assignRef(ref,newValue)}))}));return react.useLayoutEffect((function(){var oldValue=currentValues.get(callbackRef);if(oldValue){var prevRefs_1=new Set(oldValue),nextRefs_1=new Set(refs),current_1=callbackRef.current;prevRefs_1.forEach((function(ref){nextRefs_1.has(ref)||assignRef(ref,null)})),nextRefs_1.forEach((function(ref){prevRefs_1.has(ref)||assignRef(ref,current_1)}))}currentValues.set(callbackRef,refs)}),[refs]),callbackRef}},"./node_modules/use-sidecar/dist/es2015/medium.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{C:()=>createMedium,f:()=>createSidecarMedium});var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tslib/tslib.es6.js");function ItoI(a){return a}function innerCreateMedium(defaults,middleware){void 0===middleware&&(middleware=ItoI);var buffer=[],assigned=!1;return{read:function(){if(assigned)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return buffer.length?buffer[buffer.length-1]:defaults},useMedium:function(data){var item=middleware(data,assigned);return buffer.push(item),function(){buffer=buffer.filter((function(x){return x!==item}))}},assignSyncMedium:function(cb){for(assigned=!0;buffer.length;){var cbs=buffer;buffer=[],cbs.forEach(cb)}buffer={push:function(x){return cb(x)},filter:function(){return buffer}}},assignMedium:function(cb){assigned=!0;var pendingQueue=[];if(buffer.length){var cbs=buffer;buffer=[],cbs.forEach(cb),pendingQueue=buffer}var executeQueue=function(){var cbs=pendingQueue;pendingQueue=[],cbs.forEach(cb)},cycle=function(){return Promise.resolve().then(executeQueue)};cycle(),buffer={push:function(x){pendingQueue.push(x),cycle()},filter:function(filter){return pendingQueue=pendingQueue.filter(filter),buffer}}}}}function createMedium(defaults,middleware){return void 0===middleware&&(middleware=ItoI),innerCreateMedium(defaults,middleware)}function createSidecarMedium(options){void 0===options&&(options={});var medium=innerCreateMedium(null);return medium.options=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cl)({async:!0,ssr:!1},options),medium}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,