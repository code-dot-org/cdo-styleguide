(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8886],{"./src/storage/dataBrowser/dataVisualizer/CrossTabChart.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MAX_CROSSTAB_ROWS=exports.MAX_CROSSTAB_COLUMNS=exports.MAX_CROSSTAB_CELLS=void 0,exports.createPivotTable=createPivotTable,exports.default=CrossTabChart,exports.getColorForValue=getColorForValue;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),color=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/util/color.js")),_constants=__webpack_require__("./src/storage/dataBrowser/dataVisualizer/constants.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var MAX_CROSSTAB_COLUMNS=exports.MAX_CROSSTAB_COLUMNS=150,MAX_CROSSTAB_ROWS=exports.MAX_CROSSTAB_ROWS=1e4,MAX_CROSSTAB_CELLS=exports.MAX_CROSSTAB_CELLS=1e4;function CrossTabChart(props){if(!props.records||!props.selectedColumn1||!props.selectedColumn2)return null;var _createPivotTable=createPivotTable(props.records,props.numericColumns,props.selectedColumn1,props.selectedColumn2),chartData=_createPivotTable.chartData,columns=_createPivotTable.columns,numericValues=[];chartData.forEach((function(record){Object.entries(record).forEach((function(entry){var key=entry[0],value=entry[1];"number"==typeof value&&key!==props.selectedColumn1&&numericValues.push(value)}))}));var columnWidth=99/(columns.length-1)+"%",_numericValues$reduce=numericValues.reduce((function(values,currentVal){return{min:Math.min(currentVal,values.min),max:Math.max(currentVal,values.max)}}),{min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY}),min=_numericValues$reduce.min,max=_numericValues$reduce.max;return columns.length>MAX_CROSSTAB_COLUMNS?_react.default.createElement("div",null,_locale.default.crossTabTooMuchYData()):chartData.length>MAX_CROSSTAB_ROWS?_react.default.createElement("div",null,_locale.default.crossTabTooMuchXData()):columns.length*chartData.length>MAX_CROSSTAB_CELLS?_react.default.createElement("div",null,_locale.default.crossTabTooManyCellsData()):_react.default.createElement("div",{id:_constants.CROSS_TAB_CHART_AREA,style:wrapperStyle},_react.default.createElement("h1",{style:chartTitleStyle},props.chartTitle),_react.default.createElement("table",{style:tableStyle},_react.default.createElement("tbody",null,_react.default.createElement("tr",null,_react.default.createElement("td",null,"Â "),_react.default.createElement("td",{style:_objectSpread(_objectSpread({},topCellStyle),axisTitleStyle),colSpan:columns.length-1},props.selectedColumn2)),_react.default.createElement("tr",null,columns.map((function(column,i){return _react.default.createElement("td",{key:column,style:0===i?_objectSpread(_objectSpread({},leftCellStyle),axisTitleStyle):topCellStyle},column)}))),chartData.map((function(record){return _react.default.createElement("tr",{key:record[props.selectedColumn1]},columns.map((function(column,j){var value=record[column],cellStyle=0===j?_objectSpread({},leftCellStyle):_objectSpread(_objectSpread({},innerCellStyle),{},{width:columnWidth,backgroundColor:getColorForValue(value,min,max)});return _react.default.createElement("td",{key:column,style:cellStyle},value)})))})))))}function createPivotTable(records,numericColumns,rowName,columnName){var columns,countMap={},pivotedColumns=new Set(records.map((function(record){return record[columnName]})));return records.forEach((function(record){var key=record[rowName],value=record[columnName];countMap[key]||(countMap[key]=_defineProperty({},rowName,key),pivotedColumns.forEach((function(column){return countMap[key][column]=0}))),countMap[key][value]++})),(columns=numericColumns.includes(columnName)?_toConsumableArray(pivotedColumns).sort((function(a,b){return a-b})):_toConsumableArray(pivotedColumns).sort()).unshift(rowName),{chartData:Object.values(countMap).sort((function(a,b){return a[rowName]>b[rowName]?1:-1})),columns}}function getColorForValue(value,min,max){if("number"!=typeof value)return"white";return"hsl(217, 89%, ".concat(100-(value-min)/(max-min)*44,"%)")}CrossTabChart.propTypes={records:_propTypes.default.array.isRequired,numericColumns:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,chartTitle:_propTypes.default.string,selectedColumn1:_propTypes.default.string,selectedColumn2:_propTypes.default.string};var wrapperStyle={width:"100%"},chartTitleStyle=_objectSpread(_objectSpread({},_fontConstants.default["main-font-bold"]),{},{fontSize:16,lineHeight:"16px",color:"black"}),tableStyle={width:"100%"},cellStyle={height:"2em",border:"1px solid black",textAlign:"center"},topCellStyle=_objectSpread(_objectSpread({},cellStyle),{},{backgroundColor:color.lightest_gray,color:"black"}),leftCellStyle=_objectSpread(_objectSpread({},cellStyle),{},{backgroundColor:color.dark_charcoal,color:"white",padding:"0 1em",whiteSpace:"nowrap"}),innerCellStyle=_objectSpread(_objectSpread({},cellStyle),{},{overflow:"hidden"}),axisTitleStyle=_objectSpread({},_fontConstants.default["main-font-semi-bold"])},"./src/storage/dataBrowser/dataVisualizer/constants.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.GOOGLE_CHART_AREA=exports.CROSS_TAB_CHART_AREA=void 0;exports.GOOGLE_CHART_AREA="google-chart-area",exports.CROSS_TAB_CHART_AREA="cross-tab-chart-area"},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/storage/dataBrowser/dataVisualizer/CrossTabChart.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.BasicExample=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_CrossTabChart=_interopRequireDefault(__webpack_require__("./src/storage/dataBrowser/dataVisualizer/CrossTabChart.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_CrossTabChart.default};(exports.BasicExample=function Template(args){return _react.default.createElement(_CrossTabChart.default,args)}.bind({})).args={records:function makeFakeRecords(){for(var DATES=["3/4 Wed","3/5 Thu","3/6 Fri","3/7 Sat","3/8 Sun","3/9 Mon"],DIRECTIONS=["E","NE","N","Northwest","W","SW","S","SE"],result=[],i=0;i<1e3;i++)result.push({Date:_lodash.default.sample(DATES),"Wind Direction":_lodash.default.sample(DIRECTIONS)});return result}(),numericColumns:[],selectedColumn1:"Date",selectedColumn2:"Wind Direction",chartTitle:"Study of the wind"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,