"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4721],{"./src/redux/unitSelectionRedux.js":(__unused_webpack_module,exports)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}Object.defineProperty(exports,"__esModule",{value:!0}),exports.asyncLoadCoursesWithProgress=exports.START_LOADING_COURSES=exports.SET_UNIT_NAME=exports.SET_SCRIPT=exports.SET_COURSES=exports.FINISHED_LOADING_COURSES=void 0,exports.default=function unitSelection(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_COURSES){var firstCourse=action.coursesWithProgress[0],firstUnit=firstCourse?firstCourse.units[0]:null;return _objectSpread(_objectSpread({},state),{},{coursesWithProgress:action.coursesWithProgress,scriptId:null===state.scriptId?null==firstUnit?void 0:firstUnit.id:state.scriptId})}if(action.type===SET_SCRIPT)return _objectSpread(_objectSpread({},state),{},{scriptId:action.scriptId});if(action.type===SET_UNIT_NAME)return _objectSpread(_objectSpread({},state),{},{unitName:action.unitName});if(action.type===START_LOADING_COURSES)return _objectSpread(_objectSpread({},state),{},{isLoadingCoursesWithProgress:!0});if(action.type===FINISHED_LOADING_COURSES)return _objectSpread(_objectSpread({},state),{},{isLoadingCoursesWithProgress:!1});return state},exports.startLoadingCoursesWithProgress=exports.setUnitName=exports.setScriptId=exports.setCoursesWithProgress=exports.getSelectedScriptName=exports.getSelectedScriptFriendlyName=exports.getSelectedScriptDescription=exports.finishedLoadingCoursesWithProgress=exports.doesCurrentCourseUseFeedback=void 0;var SET_SCRIPT=exports.SET_SCRIPT="unitSelection/SET_SCRIPT",SET_UNIT_NAME=exports.SET_UNIT_NAME="unitSelection/SET_UNIT_NAME",SET_COURSES=exports.SET_COURSES="unitSelection/SET_COURSES",START_LOADING_COURSES=exports.START_LOADING_COURSES="unitSelection/START_LOADING_COURSES",FINISHED_LOADING_COURSES=exports.FINISHED_LOADING_COURSES="unitSelection/FINISHED_LOADING_COURSES",setCoursesWithProgress=(exports.setScriptId=function setScriptId(scriptId){return{type:SET_SCRIPT,scriptId}},exports.setUnitName=function setUnitName(unitName){return{type:SET_UNIT_NAME,unitName}},exports.setCoursesWithProgress=function setCoursesWithProgress(coursesWithProgress){return{type:SET_COURSES,coursesWithProgress}}),startLoadingCoursesWithProgress=exports.startLoadingCoursesWithProgress=function startLoadingCoursesWithProgress(){return{type:START_LOADING_COURSES}},finishedLoadingCoursesWithProgress=exports.finishedLoadingCoursesWithProgress=function finishedLoadingCoursesWithProgress(){return{type:FINISHED_LOADING_COURSES}},getSelectedUnit=function getSelectedUnit(state){var unit,scriptId=state.unitSelection.scriptId;return scriptId?(state.unitSelection.coursesWithProgress.forEach((function(course){var tempUnit=course.units.find((function(unit){return scriptId===unit.id}));tempUnit&&(unit=tempUnit)})),unit):null},initialState=(exports.getSelectedScriptName=function getSelectedScriptName(state){return getSelectedUnit(state)?getSelectedUnit(state).key:null},exports.getSelectedScriptFriendlyName=function getSelectedScriptFriendlyName(state){return getSelectedUnit(state)?getSelectedUnit(state).name:null},exports.getSelectedScriptDescription=function getSelectedScriptDescription(state){return getSelectedUnit(state)?getSelectedUnit(state).description:null},exports.doesCurrentCourseUseFeedback=function doesCurrentCourseUseFeedback(state){var _getSelectedUnit;return!(null===(_getSelectedUnit=getSelectedUnit(state))||void 0===_getSelectedUnit||!_getSelectedUnit.is_feedback_enabled)},exports.asyncLoadCoursesWithProgress=function asyncLoadCoursesWithProgress(){return function(dispatch,getState){var state=getState(),selectedSection=state.teacherSections.sections[state.teacherSections.selectedSectionId];!state.unitSelection.isLoadingCoursesWithProgress&&selectedSection&&(dispatch(startLoadingCoursesWithProgress()),fetch("/dashboardapi/section_courses/".concat(selectedSection.id),{method:"GET",headers:{"Content-Type":"application/json; charset=utf-8"}}).then((function(response){if(!response.ok)throw new Error("Error(".concat(response.status,": ").concat(response.statusText,")"));return response.json()})).then((function(coursesWithProgress){var reorderedCourses=[].concat(_toConsumableArray(coursesWithProgress.filter((function(course){return course.id!==selectedSection.courseVersionId}))),_toConsumableArray(coursesWithProgress.filter((function(course){return course.id===selectedSection.courseVersionId})))).reverse();dispatch(setCoursesWithProgress(reorderedCourses)),dispatch(finishedLoadingCoursesWithProgress())})).catch((function(err){console.error(err.message),dispatch(finishedLoadingCoursesWithProgress())})))}},{scriptId:null,unitName:null,coursesWithProgress:[],isLoadingCoursesWithProgress:!1})},"./src/templates/sectionProgress/sectionProgressConstants.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.unitDataPropType=exports.tooltipIdForStudent=exports.studentTableRowType=exports.scrollbarWidth=exports.ViewType=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");exports.unitDataPropType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,csf:_propTypes.default.bool,hasStandards:_propTypes.default.bool,title:_propTypes.default.string,path:_propTypes.default.string,lessons:_propTypes.default.arrayOf(_propTypes.default.shape({levels:_propTypes.default.arrayOf(_propTypes.default.object).isRequired})),family_name:_propTypes.default.string,version_year:_propTypes.default.string,name:_propTypes.default.string}),exports.ViewType={SUMMARY:"summary",DETAIL:"detail",STANDARDS:"standards"},exports.studentTableRowType=_propTypes.default.shape({id:_propTypes.default.string.isRequired,student:_progressTypes.studentType.isRequired,expansionIndex:_propTypes.default.number.isRequired,isExpanded:_propTypes.default.bool,useDarkBackground:_propTypes.default.bool}),exports.tooltipIdForStudent=function tooltipIdForStudent(studentId){return"tooltipIdForStudent".concat(studentId)},exports.scrollbarWidth=function getScrollbarWidth(){var outer=document.createElement("div");outer.style.visibility="hidden",outer.style.overflow="scroll",outer.style.msOverflowStyle="scrollbar",document.body.appendChild(outer);var inner=document.createElement("div");outer.appendChild(inner);var scrollbarWidth=outer.offsetWidth-inner.offsetWidth;return outer.parentNode.removeChild(outer),scrollbarWidth}()},"./src/templates/sectionProgress/sectionProgressRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.collapseMetadataForStudents=exports.addExpandedLesson=exports.addDataByUnit=void 0,exports.default=function sectionProgress(){var _action$level,_action$level$subleve,state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===_unitSelectionRedux.SET_SCRIPT)return _objectSpread(_objectSpread({},state),{},{lessonOfInterest:INITIAL_LESSON_OF_INTEREST});if(action.type===SET_CURRENT_VIEW)return _objectSpread(_objectSpread({},state),{},{currentView:action.viewType});if(action.type===START_LOADING_PROGRESS)return _objectSpread(_objectSpread({},state),{},{isLoadingProgress:!0});if(action.type===FINISH_LOADING_PROGRESS)return _objectSpread(_objectSpread({},state),{},{isLoadingProgress:!1});if(action.type===START_REFRESHING_PROGRESS)return _objectSpread(_objectSpread({},state),{},{isRefreshingProgress:!0});if(action.type===FINISH_REFRESHING_PROGRESS)return _objectSpread(_objectSpread({},state),{},{isRefreshingProgress:!1});if(action.type===SET_LESSON_OF_INTEREST)return _objectSpread(_objectSpread({},state),{},{lessonOfInterest:action.lessonOfInterest});if(action.type===ADD_DATA_BY_UNIT)return _objectSpread(_objectSpread({},state),{},{unitDataByUnit:_objectSpread(_objectSpread({},state.unitDataByUnit),action.data.unitDataByUnit),studentLevelProgressByUnit:_objectSpread(_objectSpread({},state.studentLevelProgressByUnit),action.data.studentLevelProgressByUnit),studentLessonProgressByUnit:_objectSpread(_objectSpread({},state.studentLessonProgressByUnit),action.data.studentLessonProgressByUnit),studentLastUpdateByUnit:_objectSpread(_objectSpread({},state.studentLastUpdateByUnit),action.data.studentLastUpdateByUnit)});if(action.type===LOAD_EXPANDED_LESSONS_FROM_LOCAL_STORAGE){var expandedLessonIds=getLocalStorage(action.unitId,action.sectionId);return _objectSpread(_objectSpread({},state),{},{expandedLessonIds:_objectSpread(_objectSpread({},state.expandedLessonIds),{},_defineProperty({},action.sectionId,expandedLessonIds))})}if(action.type===ADD_EXPANDED_LESSON){if(action.lesson.lockable||!(0,_progressHelpers.lessonHasLevels)(action.lesson))return state;_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.PROGRESS_V2_LESSON_EXPAND,{sectionId:action.sectionId,lessonId:action.lesson.id});var newSectionExpandedLessonIds=_lodash.default.uniq([].concat(_toConsumableArray(state.expandedLessonIds[action.sectionId]||[]),[action.lesson.id]));return saveExpandedLessonIdsToLocalStorage(action.unitId,action.sectionId,newSectionExpandedLessonIds),_objectSpread(_objectSpread({},state),{},{expandedLessonIds:_objectSpread(_objectSpread({},state.expandedLessonIds),{},_defineProperty({},action.sectionId,newSectionExpandedLessonIds))})}if(action.type===REMOVE_EXPANDED_LESSON){_AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.PROGRESS_V2_LESSON_COLLAPSE,{sectionId:action.sectionId,lessonId:action.lessonId});var _newSectionExpandedLessonIds=state.expandedLessonIds[action.sectionId].filter((function(lessonId){return lessonId!==action.lessonId}));return saveExpandedLessonIdsToLocalStorage(action.unitId,action.sectionId,_newSectionExpandedLessonIds),_objectSpread(_objectSpread({},state),{},{expandedLessonIds:_objectSpread(_objectSpread({},state.expandedLessonIds),{},_defineProperty({},action.sectionId,_newSectionExpandedLessonIds))})}if(action.type===TOGGLE_EXPANDED_CHOICE_LEVEL){if(state.expandedChoiceLevelIds.includes(action.level.id))return _AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.PROGRESS_V2_COLLAPSE_CHOICE_LEVEL,{sectionId:action.sectionId,levelId:action.level.id}),_objectSpread(_objectSpread({},state),{},{expandedChoiceLevelIds:state.expandedChoiceLevelIds.filter((function(l){return l!==action.level.id}))});if((null===(_action$level=action.level)||void 0===_action$level||null===(_action$level$subleve=_action$level.sublevels)||void 0===_action$level$subleve?void 0:_action$level$subleve.length)>0)return _AnalyticsReporter.default.sendEvent(_AnalyticsConstants.EVENTS.PROGRESS_V2_EXPAND_CHOICE_LEVEL,{sectionId:action.sectionId,levelId:action.level.id}),_objectSpread(_objectSpread({},state),{},{expandedChoiceLevelIds:[].concat(_toConsumableArray(state.expandedChoiceLevelIds),[action.level.id])})}if(action.type===EXPAND_METADATA_FOR_STUDENTS)return _objectSpread(_objectSpread({},state),{},{expandedMetadataStudentIds:_lodash.default.uniq([].concat(_toConsumableArray(state.expandedMetadataStudentIds),_toConsumableArray(action.studentIds)))});if(action.type===COLLAPSE_METADATA_FOR_STUDENTS)return _objectSpread(_objectSpread({},state),{},{expandedMetadataStudentIds:state.expandedMetadataStudentIds.filter((function(studentId){return!action.studentIds.includes(studentId)}))});return state},exports.toggleExpandedChoiceLevel=exports.startRefreshingProgress=exports.startLoadingProgress=exports.setLessonOfInterest=exports.setCurrentView=exports.removeExpandedLesson=exports.loadExpandedLessonsFromLocalStorage=exports.jumpToLessonDetails=exports.getCurrentUnitData=exports.finishRefreshingProgress=exports.finishLoadingProgress=exports.expandMetadataForStudents=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_AnalyticsConstants=__webpack_require__("./src/metrics/AnalyticsConstants.js"),_AnalyticsReporter=_interopRequireDefault(__webpack_require__("./src/metrics/AnalyticsReporter.js")),_unitSelectionRedux=__webpack_require__("./src/redux/unitSelectionRedux.js"),_utils=__webpack_require__("./src/utils.js"),_firehose=_interopRequireDefault(__webpack_require__("./src/metrics/firehose.js")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_sectionProgressConstants=__webpack_require__("./src/templates/sectionProgress/sectionProgressConstants.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_CURRENT_VIEW="sectionProgress/SET_CURRENT_VIEW",SET_LESSON_OF_INTEREST="sectionProgress/SET_LESSON_OF_INTEREST",START_LOADING_PROGRESS="sectionProgress/START_LOADING_PROGRESS",FINISH_LOADING_PROGRESS="sectionProgress/FINISH_LOADING_PROGRESS",START_REFRESHING_PROGRESS="sectionProgress/START_REFRESHING_PROGRESS",FINISH_REFRESHING_PROGRESS="sectionProgress/FINISH_REFRESHING_PROGRESS",ADD_DATA_BY_UNIT="sectionProgress/ADD_DATA_BY_UNIT",LOAD_EXPANDED_LESSONS_FROM_LOCAL_STORAGE="sectionProgress/LOAD_EXPANDED_LESSONS_FROM_LOCAL_STORAGE",ADD_EXPANDED_LESSON="sectionProgress/ADD_EXPANDED_LESSON",REMOVE_EXPANDED_LESSON="sectionProgress/REMOVE_EXPANDED_LESSON",TOGGLE_EXPANDED_CHOICE_LEVEL="sectionProgress/TOGGLE_EXPANDED_CHOICE_LEVEL",EXPAND_METADATA_FOR_STUDENTS="sectionProgress/EXPAND_METADATA_FOR_STUDENTS",COLLAPSE_METADATA_FOR_STUDENTS="sectionProgress/COLLAPSE_METADATA_FOR_STUDENTS",setLessonOfInterest=(exports.startLoadingProgress=function startLoadingProgress(){return{type:START_LOADING_PROGRESS}},exports.finishLoadingProgress=function finishLoadingProgress(){return{type:FINISH_LOADING_PROGRESS}},exports.startRefreshingProgress=function startRefreshingProgress(){return{type:START_REFRESHING_PROGRESS}},exports.finishRefreshingProgress=function finishRefreshingProgress(){return{type:FINISH_REFRESHING_PROGRESS}},exports.setLessonOfInterest=function setLessonOfInterest(lessonOfInterest){return{type:SET_LESSON_OF_INTEREST,lessonOfInterest}}),setCurrentView=exports.setCurrentView=function setCurrentView(viewType){return{type:SET_CURRENT_VIEW,viewType}},INITIAL_LESSON_OF_INTEREST=(exports.addDataByUnit=function addDataByUnit(data){return{type:ADD_DATA_BY_UNIT,data}},exports.loadExpandedLessonsFromLocalStorage=function loadExpandedLessonsFromLocalStorage(unitId,sectionId){return{type:LOAD_EXPANDED_LESSONS_FROM_LOCAL_STORAGE,unitId,sectionId}},exports.addExpandedLesson=function addExpandedLesson(unitId,sectionId,lesson){return{type:ADD_EXPANDED_LESSON,unitId,sectionId,lesson}},exports.removeExpandedLesson=function removeExpandedLesson(unitId,sectionId,lessonId){return{type:REMOVE_EXPANDED_LESSON,unitId,sectionId,lessonId}},exports.toggleExpandedChoiceLevel=function toggleExpandedChoiceLevel(sectionId,level){return{type:TOGGLE_EXPANDED_CHOICE_LEVEL,sectionId,level}},exports.expandMetadataForStudents=function expandMetadataForStudents(studentIds){return{type:EXPAND_METADATA_FOR_STUDENTS,studentIds}},exports.collapseMetadataForStudents=function collapseMetadataForStudents(studentIds){return{type:COLLAPSE_METADATA_FOR_STUDENTS,studentIds}},1),initialState={section:{},currentView:_sectionProgressConstants.ViewType.SUMMARY,unitDataByUnit:{},studentLevelProgressByUnit:{},studentLessonProgressByUnit:{},studentLastUpdateByUnit:{},lessonOfInterest:INITIAL_LESSON_OF_INTEREST,isLoadingProgress:!1,isRefreshingProgress:!1,expandedLessonIds:{},expandedChoiceLevelIds:[],expandedMetadataStudentIds:[]};exports.jumpToLessonDetails=function jumpToLessonDetails(lessonOfInterest){return function(dispatch,getState){var state=getState();dispatch(setLessonOfInterest(lessonOfInterest)),dispatch(setCurrentView(_sectionProgressConstants.ViewType.DETAIL)),_firehose.default.putRecord({study:"teacher_dashboard_actions",study_group:"progress",event:"view_change_toggle",data_json:JSON.stringify({section_id:state.teacherSections.selectedSectionId,old_view:_sectionProgressConstants.ViewType.SUMMARY,new_view:_sectionProgressConstants.ViewType.DETAIL,script_id:state.unitSelection.scriptId})},{includeUserId:!0})}},exports.getCurrentUnitData=function getCurrentUnitData(state){return state.sectionProgress.unitDataByUnit[state.unitSelection.scriptId]};var getExpandedLessonLocalStorageString=function getExpandedLessonLocalStorageString(unitId,sectionId){return"expandedLessonProgressV2-".concat(unitId,"-").concat(sectionId)},saveExpandedLessonIdsToLocalStorage=function saveExpandedLessonIdsToLocalStorage(unitId,sectionId,lessonIds){(0,_utils.trySetLocalStorage)(getExpandedLessonLocalStorageString(unitId,sectionId),JSON.stringify(lessonIds))},getLocalStorage=function getLocalStorage(unitId,sectionId){try{return JSON.parse((0,_utils.tryGetLocalStorage)(getExpandedLessonLocalStorageString(unitId,sectionId),[]))||[]}catch(e){return[]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,