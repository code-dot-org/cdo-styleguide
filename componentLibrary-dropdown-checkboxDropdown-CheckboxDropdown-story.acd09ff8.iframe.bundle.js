/*! For license information please see componentLibrary-dropdown-checkboxDropdown-CheckboxDropdown-story.acd09ff8.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1075],{"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/componentLibrary/dropdown/checkboxDropdown/CheckboxDropdown.story.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);var desc=Object.getOwnPropertyDescriptor(m,k);desc&&!("get"in desc?!m.__esModule:desc.writable||desc.configurable)||(desc={enumerable:!0,get:function(){return m[k]}}),Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,v){o.default=v}),__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.prototype.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);return __setModuleDefault(result,mod),result},__spreadArray=this&&this.__spreadArray||function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.GroupOfSizesOfCheckboxDropdown=exports.GroupOfCheckboxDropdownColors=exports.WithDisabledOptionCheckboxDropdown=exports.DisabledCheckboxDropdown=exports.DefaultCheckboxDropdown=void 0;var react_1=__importStar(__webpack_require__("./node_modules/react/index.js")),index_1=__importDefault(__webpack_require__("./src/componentLibrary/dropdown/checkboxDropdown/index.ts")),dropdown_1=__webpack_require__("./src/componentLibrary/dropdown/index.ts");exports.default={title:"DesignSystem/Dropdown/Checkbox Dropdown",component:index_1.default};var SingleTemplate=function(args){var _a=(0,react_1.useState)(args.checkedOptions=[]),selectedValues=_a[0],setValues=_a[1],onChange=(0,react_1.useCallback)((function(e){e.target.checked?setValues(__spreadArray(__spreadArray([],selectedValues,!0),[e.target.value],!1)):setValues(selectedValues.filter((function(value){return value!==e.target.value}))),args.onChange(e)}),[args,selectedValues,setValues]),onSelectAll=(0,react_1.useCallback)((function(e){setValues(args.allOptions.map((function(option){return option.value}))),args.onSelectAll(e)}),[args]),onClearAll=(0,react_1.useCallback)((function(e){setValues([]),args.onClearAll(e)}),[args]);return react_1.default.createElement(index_1.default,__assign({},args,{checkedOptions:selectedValues,onChange,onSelectAll,onClearAll}))},MultipleTemplate=function(args){var _a,_b=(0,react_1.useState)({}),values=_b[0],setValues=_b[1];return react_1.default.createElement(react_1.default.Fragment,null,react_1.default.createElement("p",null,"* Margins on this screen does not represent Component's margins, and are only added to improve storybook view *"),react_1.default.createElement("p",null,"Multiple Dropdown:"),react_1.default.createElement("div",{style:{display:"flex",gap:"20px"}},null===(_a=args.components)||void 0===_a?void 0:_a.map((function(componentArg){var _a;void 0===values[componentArg.name]&&setValues(__assign(__assign({},values),((_a={})[componentArg.name]=componentArg.checkedOptions,_a)));var onChange=function(e){var _a,_b;e.target.checked?setValues(__assign(__assign({},values),((_a={})[componentArg.name]=__spreadArray(__spreadArray([],values[componentArg.name],!0),[e.target.value],!1),_a))):setValues(__assign(__assign({},values),((_b={})[componentArg.name]=values[componentArg.name].filter((function(value){return value!==e.target.value})),_b))),componentArg.onChange(e)},onSelectAll=function(e){var _a;setValues(__assign(__assign({},values),((_a={})[componentArg.name]=componentArg.allOptions.map((function(option){return option.value})),_a))),componentArg.onSelectAll(e)},onClearAll=function(e){var _a;setValues(__assign(__assign({},values),((_a={})[componentArg.name]=[],_a))),componentArg.onClearAll(e)};return"white"===componentArg.color?react_1.default.createElement("div",{style:{background:"black",padding:10}},react_1.default.createElement(index_1.default,__assign({key:"".concat(componentArg.name)},componentArg,{checkedOptions:values[componentArg.name],onChange,onSelectAll,onClearAll}))):react_1.default.createElement(index_1.default,__assign({key:"".concat(componentArg.name)},componentArg,{checkedOptions:values[componentArg.name]||componentArg.checkedOptions,onChange,onSelectAll,onClearAll}))}))))};exports.DefaultCheckboxDropdown=SingleTemplate.bind({}),exports.DefaultCheckboxDropdown.args={name:"default-dropdown",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],labelText:"Default Dropdown",checkedOptions:["option-1"],disabled:!1,color:dropdown_1.dropdownColors.black,onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"m"},exports.DisabledCheckboxDropdown=SingleTemplate.bind({}),exports.DisabledCheckboxDropdown.args={name:"default-dropdown",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"Disabled Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},disabled:!0,color:dropdown_1.dropdownColors.black,size:"m"},exports.WithDisabledOptionCheckboxDropdown=SingleTemplate.bind({}),exports.WithDisabledOptionCheckboxDropdown.args={name:"default-dropdown",allOptions:[{value:"option-1",label:"Option 1",isOptionDisabled:!0},{value:"option-2",label:"Option 2"},{value:"option-3",label:"Option 3"}],disabled:!1,color:dropdown_1.dropdownColors.black,checkedOptions:["option-1"],labelText:"Dropdown with disabled option",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"m"},exports.GroupOfCheckboxDropdownColors=MultipleTemplate.bind({}),exports.GroupOfCheckboxDropdownColors.args={components:[{name:"default-dropdown-white",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"White Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"m",disabled:!1,color:dropdown_1.dropdownColors.white},{name:"default-dropdown-black",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"Black Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"m",color:dropdown_1.dropdownColors.black,disabled:!1}]},exports.GroupOfSizesOfCheckboxDropdown=MultipleTemplate.bind({}),exports.GroupOfSizesOfCheckboxDropdown.args={components:[{name:"default-dropdown-xs",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"XS Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"xs",disabled:!1,color:dropdown_1.dropdownColors.black},{name:"default-dropdown-s",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"S Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"s",disabled:!1,color:dropdown_1.dropdownColors.black},{name:"default-dropdown-m",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"M Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"m",disabled:!1,color:dropdown_1.dropdownColors.black},{name:"default-dropdown-white",allOptions:[{value:"option-1",label:"Option 1"},{value:"option-2",label:"Option 2"}],checkedOptions:["option-1"],labelText:"L Dropdown",onChange:function(args){return null},onSelectAll:function(args){return null},onClearAll:function(args){return null},size:"l",disabled:!1,color:dropdown_1.dropdownColors.black}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50TGlicmFyeS1kcm9wZG93bi1jaGVja2JveERyb3Bkb3duLUNoZWNrYm94RHJvcGRvd24tc3RvcnkuMGViN2VjNTguaWZyYW1lLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiO3dJQUFBLG1DQU9DLFdBQ0EsYUFFQSxJQUFJQSxPQUFTLENBQUMsRUFBRUMsZUFHaEIsU0FBU0MsYUFHUixJQUZBLElBQUlDLFFBQVUsR0FFTEMsRUFBSSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQzFDLElBQUlHLElBQU1GLFVBQVVELEdBQ3BCLEdBQUtHLElBQUwsQ0FFQSxJQUFJQyxlQUFpQkQsSUFFckIsR0FBZ0IsV0FBWkMsU0FBb0MsV0FBWkEsUUFDM0JMLFFBQVFNLEtBQUtGLFVBQ1AsR0FBSUcsTUFBTUMsUUFBUUosTUFDeEIsR0FBSUEsSUFBSUQsT0FBUSxDQUNmLElBQUlNLE1BQVFWLFdBQVdXLE1BQU0sS0FBTU4sS0FDL0JLLE9BQ0hULFFBQVFNLEtBQUtHLE1BRWYsT0FDTSxHQUFnQixXQUFaSixRQUFzQixDQUNoQyxHQUFJRCxJQUFJTyxXQUFhQyxPQUFPQyxVQUFVRixXQUFhUCxJQUFJTyxTQUFTQSxXQUFXRyxTQUFTLGlCQUFrQixDQUNyR2QsUUFBUU0sS0FBS0YsSUFBSU8sWUFDakIsUUFDRCxDQUVBLElBQUssSUFBSUksT0FBT1gsSUFDWFAsT0FBT21CLEtBQUtaLElBQUtXLE1BQVFYLElBQUlXLE1BQ2hDZixRQUFRTSxLQUFLUyxJQUdoQixDQXhCa0IsQ0F5Qm5CLENBRUEsT0FBT2YsUUFBUWlCLEtBQUssSUFDckIsQ0FFcUNDLE9BQU9DLFNBQzNDcEIsV0FBV3FCLFFBQVVyQixXQUNyQm1CLE9BQU9DLFFBQVVwQixpQkFLaEIsS0FGd0IsOEJBQUYsV0FDdEIsT0FBT0EsVUFDUCxnQkFGb0IsT0FFcEIsNkNBSUgsQ0FwREEsMEVDREFtQixPQUFPQyxRQUFVLFNBQVVFLHdCQUN6QixJQUFJQyxLQUFPLEdBNkZYLE9BM0ZBQSxLQUFLWCxT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USxhQUNwQjhCLEtBQU0sSUFDTkgsVUFBVSxFQUNWUCxNQUFPLFdBQUFRLGVBQWVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29tcG9uZW50TGlicmFyeS9kcm9wZG93bi9jaGVja2JveERyb3Bkb3duL0NoZWNrYm94RHJvcGRvd24uc3RvcnkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIG5hdGl2ZUNvZGVTdHJpbmcgPSAnW25hdGl2ZSBjb2RlXSc7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDaGVja2JveERyb3Bkb3duLCB7Q2hlY2tib3hEcm9wZG93blByb3BzfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7TWV0YSwgU3RvcnlGbn0gZnJvbSAnQHN0b3J5Ym9vay9yZWFjdCc7XG5cbmltcG9ydCB7ZHJvcGRvd25Db2xvcnN9IGZyb20gJ0BjZG8vYXBwcy9jb21wb25lbnRMaWJyYXJ5L2Ryb3Bkb3duJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0Rlc2lnblN5c3RlbS9Ecm9wZG93bi9DaGVja2JveCBEcm9wZG93bicsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgc3Rvcnlib29rL25vLXRpdGxlLXByb3BlcnR5LWluLW1ldGFcbiAgY29tcG9uZW50OiBDaGVja2JveERyb3Bkb3duLFxufSBhcyBNZXRhO1xuXG4vL1xuLy8gVEVNUExBVEVcbi8vXG5jb25zdCBTaW5nbGVUZW1wbGF0ZTogU3RvcnlGbjxDaGVja2JveERyb3Bkb3duUHJvcHM+ID0gYXJncyA9PiB7XG4gIGNvbnN0IFtzZWxlY3RlZFZhbHVlcywgc2V0VmFsdWVzXSA9IHVzZVN0YXRlKFxuICAgIChhcmdzLmNoZWNrZWRPcHRpb25zID0gW10gYXMgc3RyaW5nW10pXG4gICk7XG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICBzZXRWYWx1ZXMoWy4uLnNlbGVjdGVkVmFsdWVzLCBlLnRhcmdldC52YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VmFsdWVzKHNlbGVjdGVkVmFsdWVzLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAhPT0gZS50YXJnZXQudmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIGFyZ3Mub25DaGFuZ2UoZSk7XG4gICAgfSxcbiAgICBbYXJncywgc2VsZWN0ZWRWYWx1ZXMsIHNldFZhbHVlc11cbiAgKTtcbiAgY29uc3Qgb25TZWxlY3RBbGwgPSB1c2VDYWxsYmFjayhcbiAgICAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgIHNldFZhbHVlcyhhcmdzLmFsbE9wdGlvbnMubWFwKG9wdGlvbiA9PiBvcHRpb24udmFsdWUpKTtcbiAgICAgIGFyZ3Mub25TZWxlY3RBbGwoZSk7XG4gICAgfSxcbiAgICBbYXJnc11cbiAgKTtcbiAgY29uc3Qgb25DbGVhckFsbCA9IHVzZUNhbGxiYWNrKFxuICAgIChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PikgPT4ge1xuICAgICAgc2V0VmFsdWVzKFtdKTtcbiAgICAgIGFyZ3Mub25DbGVhckFsbChlKTtcbiAgICB9LFxuICAgIFthcmdzXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPENoZWNrYm94RHJvcGRvd25cbiAgICAgIHsuLi5hcmdzfVxuICAgICAgY2hlY2tlZE9wdGlvbnM9e3NlbGVjdGVkVmFsdWVzfVxuICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgb25TZWxlY3RBbGw9e29uU2VsZWN0QWxsfVxuICAgICAgb25DbGVhckFsbD17b25DbGVhckFsbH1cbiAgICAvPlxuICApO1xufTtcblxuY29uc3QgTXVsdGlwbGVUZW1wbGF0ZTogU3RvcnlGbjx7XG4gIGNvbXBvbmVudHM6IENoZWNrYm94RHJvcGRvd25Qcm9wc1tdO1xufT4gPSBhcmdzID0+IHtcbiAgY29uc3QgW3ZhbHVlcywgc2V0VmFsdWVzXSA9IHVzZVN0YXRlKHt9IGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPik7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHA+XG4gICAgICAgICogTWFyZ2lucyBvbiB0aGlzIHNjcmVlbiBkb2VzIG5vdCByZXByZXNlbnQgQ29tcG9uZW50J3MgbWFyZ2lucywgYW5kIGFyZVxuICAgICAgICBvbmx5IGFkZGVkIHRvIGltcHJvdmUgc3Rvcnlib29rIHZpZXcgKlxuICAgICAgPC9wPlxuICAgICAgPHA+TXVsdGlwbGUgRHJvcGRvd246PC9wPlxuICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4JywgZ2FwOiAnMjBweCd9fT5cbiAgICAgICAge2FyZ3MuY29tcG9uZW50cz8ubWFwKGNvbXBvbmVudEFyZyA9PiB7XG4gICAgICAgICAgaWYgKHZhbHVlc1tjb21wb25lbnRBcmcubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2V0VmFsdWVzKHtcbiAgICAgICAgICAgICAgLi4udmFsdWVzLFxuICAgICAgICAgICAgICBbY29tcG9uZW50QXJnLm5hbWVdOiBjb21wb25lbnRBcmcuY2hlY2tlZE9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBvbkNoYW5nZSA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgc2V0VmFsdWVzKHtcbiAgICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgICAgW2NvbXBvbmVudEFyZy5uYW1lXTogW1xuICAgICAgICAgICAgICAgICAgLi4udmFsdWVzW2NvbXBvbmVudEFyZy5uYW1lXSxcbiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0VmFsdWVzKHtcbiAgICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgICAgW2NvbXBvbmVudEFyZy5uYW1lXTogdmFsdWVzW2NvbXBvbmVudEFyZy5uYW1lXS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9PiB2YWx1ZSAhPT0gZS50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudEFyZy5vbkNoYW5nZShlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IG9uU2VsZWN0QWxsID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiB7XG4gICAgICAgICAgICBzZXRWYWx1ZXMoe1xuICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgIFtjb21wb25lbnRBcmcubmFtZV06IGNvbXBvbmVudEFyZy5hbGxPcHRpb25zLm1hcChcbiAgICAgICAgICAgICAgICBvcHRpb24gPT4gb3B0aW9uLnZhbHVlXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbXBvbmVudEFyZy5vblNlbGVjdEFsbChlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IG9uQ2xlYXJBbGwgPSAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgIHNldFZhbHVlcyh7Li4udmFsdWVzLCBbY29tcG9uZW50QXJnLm5hbWVdOiBbXX0pO1xuICAgICAgICAgICAgY29tcG9uZW50QXJnLm9uQ2xlYXJBbGwoZSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiBjb21wb25lbnRBcmcuY29sb3IgPT09ICd3aGl0ZScgPyAoXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7YmFja2dyb3VuZDogJ2JsYWNrJywgcGFkZGluZzogMTB9fT5cbiAgICAgICAgICAgICAgPENoZWNrYm94RHJvcGRvd25cbiAgICAgICAgICAgICAgICBrZXk9e2Ake2NvbXBvbmVudEFyZy5uYW1lfWB9XG4gICAgICAgICAgICAgICAgey4uLmNvbXBvbmVudEFyZ31cbiAgICAgICAgICAgICAgICBjaGVja2VkT3B0aW9ucz17dmFsdWVzW2NvbXBvbmVudEFyZy5uYW1lXX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgb25TZWxlY3RBbGw9e29uU2VsZWN0QWxsfVxuICAgICAgICAgICAgICAgIG9uQ2xlYXJBbGw9e29uQ2xlYXJBbGx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPENoZWNrYm94RHJvcGRvd25cbiAgICAgICAgICAgICAga2V5PXtgJHtjb21wb25lbnRBcmcubmFtZX1gfVxuICAgICAgICAgICAgICB7Li4uY29tcG9uZW50QXJnfVxuICAgICAgICAgICAgICBjaGVja2VkT3B0aW9ucz17XG4gICAgICAgICAgICAgICAgdmFsdWVzW2NvbXBvbmVudEFyZy5uYW1lXSB8fCBjb21wb25lbnRBcmcuY2hlY2tlZE9wdGlvbnNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgIG9uU2VsZWN0QWxsPXtvblNlbGVjdEFsbH1cbiAgICAgICAgICAgICAgb25DbGVhckFsbD17b25DbGVhckFsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0Q2hlY2tib3hEcm9wZG93biA9IFNpbmdsZVRlbXBsYXRlLmJpbmQoe30pO1xuRGVmYXVsdENoZWNrYm94RHJvcGRvd24uYXJncyA9IHtcbiAgbmFtZTogJ2RlZmF1bHQtZHJvcGRvd24nLFxuICBhbGxPcHRpb25zOiBbXG4gICAge3ZhbHVlOiAnb3B0aW9uLTEnLCBsYWJlbDogJ09wdGlvbiAxJ30sXG4gICAge3ZhbHVlOiAnb3B0aW9uLTInLCBsYWJlbDogJ09wdGlvbiAyJ30sXG4gIF0sXG4gIGxhYmVsVGV4dDogJ0RlZmF1bHQgRHJvcGRvd24nLFxuICBjaGVja2VkT3B0aW9uczogWydvcHRpb24tMSddLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGNvbG9yOiBkcm9wZG93bkNvbG9ycy5ibGFjayxcbiAgb25DaGFuZ2U6IGFyZ3MgPT4gbnVsbCxcbiAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgb25DbGVhckFsbDogYXJncyA9PiBudWxsLFxuICBzaXplOiAnbScsXG59O1xuXG5leHBvcnQgY29uc3QgRGlzYWJsZWRDaGVja2JveERyb3Bkb3duID0gU2luZ2xlVGVtcGxhdGUuYmluZCh7fSk7XG5EaXNhYmxlZENoZWNrYm94RHJvcGRvd24uYXJncyA9IHtcbiAgbmFtZTogJ2RlZmF1bHQtZHJvcGRvd24nLFxuICBhbGxPcHRpb25zOiBbXG4gICAge3ZhbHVlOiAnb3B0aW9uLTEnLCBsYWJlbDogJ09wdGlvbiAxJ30sXG4gICAge3ZhbHVlOiAnb3B0aW9uLTInLCBsYWJlbDogJ09wdGlvbiAyJ30sXG4gIF0sXG4gIGNoZWNrZWRPcHRpb25zOiBbJ29wdGlvbi0xJ10sXG4gIGxhYmVsVGV4dDogJ0Rpc2FibGVkIERyb3Bkb3duJyxcbiAgb25DaGFuZ2U6IGFyZ3MgPT4gbnVsbCxcbiAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgb25DbGVhckFsbDogYXJncyA9PiBudWxsLFxuICBkaXNhYmxlZDogdHJ1ZSxcbiAgY29sb3I6IGRyb3Bkb3duQ29sb3JzLmJsYWNrLFxuICBzaXplOiAnbScsXG59O1xuXG5leHBvcnQgY29uc3QgV2l0aERpc2FibGVkT3B0aW9uQ2hlY2tib3hEcm9wZG93biA9IFNpbmdsZVRlbXBsYXRlLmJpbmQoe30pO1xuV2l0aERpc2FibGVkT3B0aW9uQ2hlY2tib3hEcm9wZG93bi5hcmdzID0ge1xuICBuYW1lOiAnZGVmYXVsdC1kcm9wZG93bicsXG4gIGFsbE9wdGlvbnM6IFtcbiAgICB7dmFsdWU6ICdvcHRpb24tMScsIGxhYmVsOiAnT3B0aW9uIDEnLCBpc09wdGlvbkRpc2FibGVkOiB0cnVlfSxcbiAgICB7dmFsdWU6ICdvcHRpb24tMicsIGxhYmVsOiAnT3B0aW9uIDInfSxcbiAgICB7dmFsdWU6ICdvcHRpb24tMycsIGxhYmVsOiAnT3B0aW9uIDMnfSxcbiAgXSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBjb2xvcjogZHJvcGRvd25Db2xvcnMuYmxhY2ssXG4gIGNoZWNrZWRPcHRpb25zOiBbJ29wdGlvbi0xJ10sXG4gIGxhYmVsVGV4dDogJ0Ryb3Bkb3duIHdpdGggZGlzYWJsZWQgb3B0aW9uJyxcbiAgb25DaGFuZ2U6IGFyZ3MgPT4gbnVsbCxcbiAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgb25DbGVhckFsbDogYXJncyA9PiBudWxsLFxuICBzaXplOiAnbScsXG59O1xuXG5leHBvcnQgY29uc3QgR3JvdXBPZkNoZWNrYm94RHJvcGRvd25Db2xvcnMgPSBNdWx0aXBsZVRlbXBsYXRlLmJpbmQoe30pO1xuR3JvdXBPZkNoZWNrYm94RHJvcGRvd25Db2xvcnMuYXJncyA9IHtcbiAgY29tcG9uZW50czogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdkZWZhdWx0LWRyb3Bkb3duLXdoaXRlJyxcbiAgICAgIGFsbE9wdGlvbnM6IFtcbiAgICAgICAge3ZhbHVlOiAnb3B0aW9uLTEnLCBsYWJlbDogJ09wdGlvbiAxJ30sXG4gICAgICAgIHt2YWx1ZTogJ29wdGlvbi0yJywgbGFiZWw6ICdPcHRpb24gMid9LFxuICAgICAgXSxcbiAgICAgIGNoZWNrZWRPcHRpb25zOiBbJ29wdGlvbi0xJ10sXG4gICAgICBsYWJlbFRleHQ6ICdXaGl0ZSBEcm9wZG93bicsXG4gICAgICBvbkNoYW5nZTogYXJncyA9PiBudWxsLFxuICAgICAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIG9uQ2xlYXJBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIHNpemU6ICdtJyxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIGNvbG9yOiBkcm9wZG93bkNvbG9ycy53aGl0ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdkZWZhdWx0LWRyb3Bkb3duLWJsYWNrJyxcbiAgICAgIGFsbE9wdGlvbnM6IFtcbiAgICAgICAge3ZhbHVlOiAnb3B0aW9uLTEnLCBsYWJlbDogJ09wdGlvbiAxJ30sXG4gICAgICAgIHt2YWx1ZTogJ29wdGlvbi0yJywgbGFiZWw6ICdPcHRpb24gMid9LFxuICAgICAgXSxcbiAgICAgIGNoZWNrZWRPcHRpb25zOiBbJ29wdGlvbi0xJ10sXG4gICAgICBsYWJlbFRleHQ6ICdCbGFjayBEcm9wZG93bicsXG4gICAgICBvbkNoYW5nZTogYXJncyA9PiBudWxsLFxuICAgICAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIG9uQ2xlYXJBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIHNpemU6ICdtJyxcbiAgICAgIGNvbG9yOiBkcm9wZG93bkNvbG9ycy5ibGFjayxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICB9LFxuICBdLFxufTtcbmV4cG9ydCBjb25zdCBHcm91cE9mU2l6ZXNPZkNoZWNrYm94RHJvcGRvd24gPSBNdWx0aXBsZVRlbXBsYXRlLmJpbmQoe30pO1xuR3JvdXBPZlNpemVzT2ZDaGVja2JveERyb3Bkb3duLmFyZ3MgPSB7XG4gIGNvbXBvbmVudHM6IFtcbiAgICB7XG4gICAgICBuYW1lOiAnZGVmYXVsdC1kcm9wZG93bi14cycsXG4gICAgICBhbGxPcHRpb25zOiBbXG4gICAgICAgIHt2YWx1ZTogJ29wdGlvbi0xJywgbGFiZWw6ICdPcHRpb24gMSd9LFxuICAgICAgICB7dmFsdWU6ICdvcHRpb24tMicsIGxhYmVsOiAnT3B0aW9uIDInfSxcbiAgICAgIF0sXG4gICAgICBjaGVja2VkT3B0aW9uczogWydvcHRpb24tMSddLFxuICAgICAgbGFiZWxUZXh0OiAnWFMgRHJvcGRvd24nLFxuICAgICAgb25DaGFuZ2U6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIG9uU2VsZWN0QWxsOiBhcmdzID0+IG51bGwsXG4gICAgICBvbkNsZWFyQWxsOiBhcmdzID0+IG51bGwsXG4gICAgICBzaXplOiAneHMnLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgY29sb3I6IGRyb3Bkb3duQ29sb3JzLmJsYWNrLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2RlZmF1bHQtZHJvcGRvd24tcycsXG4gICAgICBhbGxPcHRpb25zOiBbXG4gICAgICAgIHt2YWx1ZTogJ29wdGlvbi0xJywgbGFiZWw6ICdPcHRpb24gMSd9LFxuICAgICAgICB7dmFsdWU6ICdvcHRpb24tMicsIGxhYmVsOiAnT3B0aW9uIDInfSxcbiAgICAgIF0sXG4gICAgICBjaGVja2VkT3B0aW9uczogWydvcHRpb24tMSddLFxuICAgICAgbGFiZWxUZXh0OiAnUyBEcm9wZG93bicsXG4gICAgICBvbkNoYW5nZTogYXJncyA9PiBudWxsLFxuICAgICAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIG9uQ2xlYXJBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIHNpemU6ICdzJyxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIGNvbG9yOiBkcm9wZG93bkNvbG9ycy5ibGFjayxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdkZWZhdWx0LWRyb3Bkb3duLW0nLFxuICAgICAgYWxsT3B0aW9uczogW1xuICAgICAgICB7dmFsdWU6ICdvcHRpb24tMScsIGxhYmVsOiAnT3B0aW9uIDEnfSxcbiAgICAgICAge3ZhbHVlOiAnb3B0aW9uLTInLCBsYWJlbDogJ09wdGlvbiAyJ30sXG4gICAgICBdLFxuICAgICAgY2hlY2tlZE9wdGlvbnM6IFsnb3B0aW9uLTEnXSxcbiAgICAgIGxhYmVsVGV4dDogJ00gRHJvcGRvd24nLFxuICAgICAgb25DaGFuZ2U6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIG9uU2VsZWN0QWxsOiBhcmdzID0+IG51bGwsXG4gICAgICBvbkNsZWFyQWxsOiBhcmdzID0+IG51bGwsXG4gICAgICBzaXplOiAnbScsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICBjb2xvcjogZHJvcGRvd25Db2xvcnMuYmxhY2ssXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnZGVmYXVsdC1kcm9wZG93bi13aGl0ZScsXG4gICAgICBhbGxPcHRpb25zOiBbXG4gICAgICAgIHt2YWx1ZTogJ29wdGlvbi0xJywgbGFiZWw6ICdPcHRpb24gMSd9LFxuICAgICAgICB7dmFsdWU6ICdvcHRpb24tMicsIGxhYmVsOiAnT3B0aW9uIDInfSxcbiAgICAgIF0sXG4gICAgICBjaGVja2VkT3B0aW9uczogWydvcHRpb24tMSddLFxuICAgICAgbGFiZWxUZXh0OiAnTCBEcm9wZG93bicsXG4gICAgICBvbkNoYW5nZTogYXJncyA9PiBudWxsLFxuICAgICAgb25TZWxlY3RBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIG9uQ2xlYXJBbGw6IGFyZ3MgPT4gbnVsbCxcbiAgICAgIHNpemU6ICdsJyxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIGNvbG9yOiBkcm9wZG93bkNvbG9ycy5ibGFjayxcbiAgICB9LFxuICBdLFxufTtcbiJdLCJuYW1lcyI6WyJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZyIsImFyZ1R5cGUiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJhcHBseSIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaW5jbHVkZXMiLCJrZXkiLCJjYWxsIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJpZCIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJlcnIiLCJFcnJvciIsIm5hbWUiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwiZnVuYyIsIm51bWJlciIsIm9iamVjdCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydEJ5U2VsZWN0b3IiLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImFwcGVuZENoaWxkIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwidGl0bGUiLCJjb21wb25lbnQiLCJTaW5nbGVUZW1wbGF0ZSIsImFyZ3MiLCJ1c2VTdGF0ZSIsImNoZWNrZWRPcHRpb25zIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZXRWYWx1ZXMiLCJvbkNoYW5nZSIsInVzZUNhbGxiYWNrIiwiY2hlY2tlZCIsInZhbHVlIiwiZmlsdGVyIiwib25TZWxlY3RBbGwiLCJhbGxPcHRpb25zIiwib3B0aW9uIiwib25DbGVhckFsbCIsIk11bHRpcGxlVGVtcGxhdGUiLCJ2YWx1ZXMiLCJkaXNwbGF5IiwiZ2FwIiwiY29tcG9uZW50cyIsImNvbXBvbmVudEFyZyIsImNvbG9yIiwiYmFja2dyb3VuZCIsInBhZGRpbmciLCJEZWZhdWx0Q2hlY2tib3hEcm9wZG93biIsImJpbmQiLCJsYWJlbCIsImxhYmVsVGV4dCIsImRpc2FibGVkIiwiZHJvcGRvd25Db2xvcnMiLCJibGFjayIsInNpemUiLCJEaXNhYmxlZENoZWNrYm94RHJvcGRvd24iLCJXaXRoRGlzYWJsZWRPcHRpb25DaGVja2JveERyb3Bkb3duIiwiaXNPcHRpb25EaXNhYmxlZCIsIkdyb3VwT2ZDaGVja2JveERyb3Bkb3duQ29sb3JzIiwid2hpdGUiLCJHcm91cE9mU2l6ZXNPZkNoZWNrYm94RHJvcGRvd24iXSwic291cmNlUm9vdCI6IiJ9