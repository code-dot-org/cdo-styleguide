"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[6453],{"./src/code-studio/pd/workshop_dashboard/components/survey_results/choice_responses.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(exports.default=function(_React$Component){function ChoiceResponses(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ChoiceResponses,_React$Component);var _proto=ChoiceResponses.prototype;return _proto.getTotalRespondents=function getTotalRespondents(){return this.props.perFacilitator?Object.values(this.props.answers).reduce((function(sum,answers){return sum+Object.values(answers).reduce((function(subSum,x){return subSum+x}),0)}),0):void 0!==this.props.numRespondents?this.props.numRespondents:Object.values(this.props.answers).reduce((function(sum,x){return sum+x}),0)},_proto.getAnswerIndex=function getAnswerIndex(possibleAnswer,i){return"selectValue"===this.props.answerType?i+1:"scale"===this.props.answerType?possibleAnswer.split(" ")[0]:possibleAnswer},_proto.formatPercentage=function formatPercentage(percentage){return percentage.toLocaleString("en-US",{style:"percent",minimumFractionDigits:2,maximumFractionDigits:2})},_proto.renderSingleAnswerCounts=function renderSingleAnswerCounts(){var _this=this;return this.props.possibleAnswers.map((function(possibleAnswer,i){var count=_this.props.answers[_this.getAnswerIndex(possibleAnswer,i)]||0;return _react.default.createElement("tr",{key:i},_react.default.createElement("td",null,_this.formatPercentage(count/_this.getTotalRespondents())),_react.default.createElement("td",{style:{paddingLeft:"20px"}},count),_react.default.createElement("td",{style:{paddingLeft:"20px"}},_this.getPossibleAnswerText(possibleAnswer)))}))},_proto.getPossibleAnswerText=function getPossibleAnswerText(possibleAnswer){var possibleAnswersMap=this.props.possibleAnswersMap;return possibleAnswersMap&&possibleAnswersMap[possibleAnswer]?possibleAnswersMap[possibleAnswer]:possibleAnswer},_proto.renderPerFacilitatorAnswerCounts=function renderPerFacilitatorAnswerCounts(){var _this2=this,facilitatorNames=Object.keys(this.props.answers),showTotalCount=facilitatorNames.length>1,totalCountsPerFacilitator=facilitatorNames.map((function(name){return Object.values(_this2.props.answers[name]).reduce((function(sum,count){return sum+count}),0)})),facilitators=this.props.facilitators,headerRow=_react.default.createElement("tr",{key:"header"},_react.default.createElement("td",null),facilitatorNames.map((function(name,i){return _react.default.createElement("td",{colSpan:2,style:{paddingLeft:"20px"},key:i},facilitators&&facilitators[name]||name)})),showTotalCount&&_react.default.createElement("td",{colSpan:2,style:{paddingLeft:"20px"}},"Total Responses")),contentRows=this.props.possibleAnswers.map((function(possibleAnswer,i){var countsByFacilitator=facilitatorNames.map((function(name){return _this2.props.answers[name][_this2.getAnswerIndex(possibleAnswer,i)]||0})),totalCount=countsByFacilitator.reduce((function(sum,count){return sum+count}),0);return _react.default.createElement("tr",{key:i},_react.default.createElement("td",null,_this2.getPossibleAnswerText(possibleAnswer)),countsByFacilitator.map((function(count,j){return[_react.default.createElement("td",{style:{paddingLeft:"20px"},key:"".concat(j,".count")},count),_react.default.createElement("td",{style:{paddingLeft:"4px"},key:"".concat(j,".percentage")},"(".concat(_this2.formatPercentage(count/totalCountsPerFacilitator[j]),")"))]})),showTotalCount&&_react.default.createElement("td",{style:{paddingLeft:"20px"}},totalCount),showTotalCount&&_react.default.createElement("td",{style:{paddingLeft:"4px"}},"(".concat(_this2.formatPercentage(totalCount/_this2.getTotalRespondents()),")")))}));return[headerRow].concat(contentRows)},_proto.render=function render(){var possibleAnswers="scale"===this.props.answerType?this.props.possibleAnswers.map((function(x){return x.split(" ")[0]})):this.props.possibleAnswers,otherAnswers=this.props.otherAnswers;if(!otherAnswers)if(this.props.perFacilitator){var givenAnswers=Object.values(this.props.answers).reduce((function(set,answers){var _Object$keys;return new Set((_Object$keys=Object.keys(answers)).concat.apply(_Object$keys,_toConsumableArray(set.values())))}),new Set);otherAnswers=_lodash.default.difference(givenAnswers,possibleAnswers)}else otherAnswers=_lodash.default.difference(Object.keys(this.props.answers),possibleAnswers);return _react.default.createElement(_reactBootstrap.Panel,null,_react.default.createElement(_reactBootstrap.Panel.Body,null,this.props.question,_react.default.createElement("table",{style:{marginTop:"1em"}},_react.default.createElement("tbody",null,this.props.perFacilitator?this.renderPerFacilitatorAnswerCounts():this.renderSingleAnswerCounts(),this.props.otherText&&_react.default.createElement("tr",null,_react.default.createElement("td",null,this.formatPercentage(otherAnswers.length/this.getTotalRespondents())),_react.default.createElement("td",{style:{paddingLeft:"20px"}},otherAnswers.length),_react.default.createElement("td",{style:{paddingLeft:"20px"}},this.props.otherText)))),this.props.otherText&&otherAnswers.length>0&&_react.default.createElement("div",null,_react.default.createElement("br",null),this.props.otherText,_react.default.createElement("ul",null,_lodash.default.compact(otherAnswers).map((function(answer,i){return _react.default.createElement("li",{key:i},answer)}))))))},ChoiceResponses}(_react.default.Component),"propTypes",{question:_propTypes.default.string.isRequired,answers:_propTypes.default.object.isRequired,perFacilitator:_propTypes.default.bool,numRespondents:_propTypes.default.number,answerType:_propTypes.default.string.isRequired,possibleAnswers:_propTypes.default.array.isRequired,possibleAnswersMap:_propTypes.default.object,otherText:_propTypes.default.string,otherAnswers:_propTypes.default.array,facilitators:_propTypes.default.object}),module.exports=exports.default},"./src/code-studio/pd/workshop_dashboard/components/survey_results/choice_responses.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ScaleRatingsPerFacilitator=exports.ScaleRatings=exports.ChoiceSelectValueResponsePerFacilitator=exports.ChoiceSelectValueResponse=exports.ChoiceResponsesWithoutOtherPerFacilitator=exports.ChoiceResponsesWithoutOther=exports.ChoiceResponsesWithOthersPerFacilitator=exports.ChoiceResponsesWithOthers=exports.ChoiceResponsesForOnlyOneFacilitator=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_choice_responses=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/workshop_dashboard/components/survey_results/choice_responses.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_choice_responses.default};var Template=function Template(args){return _react.default.createElement(_choice_responses.default,args)};(exports.ChoiceResponsesWithoutOther=Template.bind({})).args={name:"Choice responses without other",question:"What is your favorite pizza topping?",answers:{Peppers:4,Onions:13,Mushrooms:2,Olives:2,Sausage:3},possibleAnswers:["Peppers","Onions","Mushrooms","Sausage","Olives","Pineapples"],answerType:"selectText"},(exports.ChoiceResponsesWithOthers=Template.bind({})).args={name:"Choice responses with others",question:"What is your favorite pizza topping? Please provide the topping if it is not listed here",answers:{Peppers:4,Onions:13,Mushrooms:2,Olives:2,Sausage:3,Corn:1,"Anything but pineapples lol":1,"Kalamata Olives specifically":1},possibleAnswers:["Peppers","Onions","Mushrooms","Sausage","Olives","Pineapples"],otherText:"Other toppings",answerType:"selectText"},(exports.ChoiceSelectValueResponse=Template.bind({})).args={name:"Choice selectValue response",question:"What do you think about pineapples on pizza?",answers:{1:10,2:5,3:1,4:0,5:0},answerType:"selectValue",possibleAnswers:["Abhorrent","Not good","Ambivalent","Good","Delicious"]},(exports.ScaleRatings=Template.bind({})).args={name:"Scale ratings",question:"How do you feel about deep dish?",answers:{1:1,4:5,5:10},answerType:"scale",possibleAnswers:["1 - I hate it","2","3","4","5 - I love it"]},(exports.ChoiceResponsesForOnlyOneFacilitator=Template.bind({})).args={name:"Choice responses for only one facilitator",question:"What is your favorite pizza topping?",perFacilitator:!0,answers:{Tom:{Peppers:4,Mushrooms:2,Olives:2,Sausage:3}},possibleAnswers:["Peppers","Onions","Mushrooms","Sausage","Olives","Pineapples"],answerType:"selectText"},(exports.ChoiceResponsesWithoutOtherPerFacilitator=Template.bind({})).args={name:"Choice responses without other per facilitator",question:"What is your favorite pizza topping?",perFacilitator:!0,answers:{Tom:{Peppers:4,Mushrooms:2,Olives:2,Sausage:3},Dick:{Peppers:4,Onions:13,Sausage:3},Harry:{Pineapples:5,Onions:5}},possibleAnswers:["Peppers","Onions","Mushrooms","Sausage","Olives","Pineapples"],answerType:"selectText"},(exports.ChoiceResponsesWithOthersPerFacilitator=Template.bind({})).args={name:"Choice responses with others",question:"What is your favorite pizza topping? Please provide the topping if it is not listed here",perFacilitator:!0,answers:{Tom:{Peppers:4,Onions:13,Mushrooms:2,Olives:2,Sausage:3,Corn:1,"Anything but pineapples lol":1,"Kalamata Olives specifically":1},Dick:{"Pepperoni and literally nothing else":1},Harry:{Peppers:16,Onions:17,Mushrooms:8,Sausage:16,Olives:12,Pineapples:14}},possibleAnswers:["Peppers","Onions","Mushrooms","Sausage","Olives","Pineapples"],otherText:"Other toppings",answerType:"selectText"},(exports.ChoiceSelectValueResponsePerFacilitator=Template.bind({})).args={name:"Choice selectValue response",question:"What do you think about pineapples on pizza?",perFacilitator:!0,answers:{Tom:{1:10,2:5,3:1},Dick:{3:1,4:5,5:10},Harry:{1:1,2:1,3:1,4:1,5:1}},answerType:"selectValue",possibleAnswers:["Abhorrent","Not good","Ambivalent","Good","Delicious"]},(exports.ScaleRatingsPerFacilitator=Template.bind({})).args={name:"Scale ratings",question:"How do you feel about deep dish?",perFacilitator:!0,answers:{Tom:{1:10,2:5,3:1},Dick:{3:1,4:5,5:10},Harry:{1:1,3:1,5:1}},answerType:"scale",possibleAnswers:["1 - I hate it","2","3","4","5 - I love it"]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,