"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8523],{"./.storybook/decorators.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{reduxStore:()=>reduxStore});var redux__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/redux/es/redux.js"),redux_thunk__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/redux-thunk/lib/index.js"),_cdo_apps_code_studio_isRtlRedux__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/code-studio/isRtlRedux.js"),_cdo_apps_code_studio_responsiveRedux__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/code-studio/responsiveRedux.js");const reduxStore=(reducers={},state={})=>(0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)((0,redux__WEBPACK_IMPORTED_MODULE_3__.combineReducers)({isRtl:_cdo_apps_code_studio_isRtlRedux__WEBPACK_IMPORTED_MODULE_1__.default,responsive:_cdo_apps_code_studio_responsiveRedux__WEBPACK_IMPORTED_MODULE_2__.default,...reducers}),state,(0,redux__WEBPACK_IMPORTED_MODULE_3__.applyMiddleware)(redux_thunk__WEBPACK_IMPORTED_MODULE_0__.default))},"./src/code-studio/isRtlRedux.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function locale(){var state=arguments.length>0&&void 0!==arguments[0]&&arguments[0],action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RTL)return action.isRtl;return state},exports.isRtlFromDOM=isRtlFromDOM,exports.setRtlFromDOM=exports.setRtl=void 0;var SET_RTL="isRtl/SET_RTL",setRtl=exports.setRtl=function setRtl(isRtl){return{type:SET_RTL,isRtl}};exports.setRtlFromDOM=function setRtlFromDOM(){return setRtl(isRtlFromDOM())};function isRtlFromDOM(){var head=document.getElementsByTagName("head")[0];if(head&&head.parentElement){var dir=head.parentElement.getAttribute("dir");return!(!dir||"rtl"!==dir.toLowerCase())}return!1}},"./src/code-studio/progressReduxSelectors.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.progressionsFromLevels=exports.nextLevelId=exports.levelsForLessonId=exports.levelsByLesson=exports.levelCount=exports.levelById=exports.lessons=exports.lessonExtrasUrl=exports.isPerfect=exports.hasLockableLessons=exports.hasGroups=exports.groupedLessons=exports.getProgressLevelType=exports.getLevelPropertiesPath=exports.getCurrentScriptLevelId=exports.getCurrentLevels=exports.getCurrentLevel=exports.__testonly__=exports.ProgressLevelType=void 0;var _lodash=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/lodash/lodash.js")),_constants=__webpack_require__("./src/constants.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_activityUtils=__webpack_require__("./src/code-studio/activityUtils.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.hasLockableLessons=function hasLockableLessons(state){return state.lessons.some((function(lesson){return lesson.lockable}))},exports.hasGroups=function hasGroups(state){return Object.keys(groupedLessons(state)).length>1};var lessonFromLessonAtIndex=function lessonFromLessonAtIndex(state,lessonIndex){return _objectSpread(_objectSpread({},lessonFromLesson(state.lessons[lessonIndex])),{},{isFocusArea:state.focusAreaLessonIds.includes(state.lessons[lessonIndex].id)})},lessonFromLesson=function lessonFromLesson(lesson){return _lodash.default.pick(lesson,["name","id","lockable","lessonNumber","lessonStartUrl","lesson_plan_html_url","lesson_feedback_url","student_lesson_plan_html_url","description_student","description_teacher"])},peerReviewLesson=(exports.lessons=function lessons(state){return state.lessons.map((function(_,index){return lessonFromLessonAtIndex(state,index)}))},function peerReviewLesson(state){return _objectSpread(_objectSpread({},lessonFromLesson(state.peerReviewLessonInfo)),{},{id:-1,lockable:!1,isFocusArea:!1})}),peerReviewLevels=function peerReviewLevels(state){return state.peerReviewLessonInfo.levels.map((function(level,index){return _objectSpread(_objectSpread({},level),{},{id:(-1).toString(),isLocked:level.locked,status:level.status||_sharedConstants.LevelStatus.not_tried,levelNumber:index+1})}))},ProgressLevelType=exports.ProgressLevelType={SCRIPT_LEVEL:"script_level",LEVEL:"level"},getProgressLevelType=exports.getProgressLevelType=function getProgressLevelType(state){return state.progress.lessons?ProgressLevelType.SCRIPT_LEVEL:state.progress.currentLevelId?ProgressLevelType.LEVEL:void 0},levelWithProgress=(exports.getLevelPropertiesPath=function getLevelPropertiesPath(state){if(state.progress.lessons){var _state$progress$lesso,levelPosition,sublevelPosition,scriptName=state.progress.scriptName,lessonPosition=null===(_state$progress$lesso=state.progress.lessons)||void 0===_state$progress$lesso?void 0:_state$progress$lesso.find((function(lesson){return lesson.id===state.progress.currentLessonId})).relative_position,currentLevel=getCurrentLevel(state);if(levelPosition=currentLevel.levelNumber,currentLevel.parentLevelId)levelPosition=levelById(state.progress,state.progress.currentLessonId,currentLevel.parentLevelId).levelNumber,sublevelPosition=currentLevel.levelNumber;return"/s/".concat(scriptName,"/lessons/").concat(lessonPosition,"/levels/").concat(levelPosition,"/").concat(void 0===sublevelPosition?"":"sublevel/".concat(sublevelPosition,"/"),"level_properties")}if(null!==state.progress.currentLevelId){var levelId=state.progress.currentLevelId;return"/levels/".concat(levelId,"/level_properties")}},function levelWithProgress(_ref,level,isLockable,parentLevelId){var _levelProgress,_level$ids,_level$sublevels,levelResults=_ref.levelResults,unitProgress=_ref.unitProgress,_ref$levelPairing=_ref.levelPairing,levelPairing=void 0===_ref$levelPairing?{}:_ref$levelPairing,currentLevelId=_ref.currentLevelId,normalizedLevel=(0,_progressHelpers.processedLevel)(level,parentLevelId);level.ids&&(normalizedLevel.id=function bestResultLevelId(levelIds,progressData){if(1===levelIds.length)return levelIds[0];var attemptedIds=levelIds.filter((function(id){return progressData[id]}));if(0===attemptedIds.length)return levelIds[0];var bestId=attemptedIds[0],bestResult=progressData[bestId];return attemptedIds.forEach((function(id){var result=progressData[id];result>bestResult&&(bestId=id,bestResult=result)})),bestId}(level.ids,levelResults));var status=_sharedConstants.LevelStatus.not_tried,locked=isLockable,teacherFeedbackReviewState=null,levelProgress=unitProgress[normalizedLevel.id];null!==(_levelProgress=levelProgress)&&void 0!==_levelProgress&&_levelProgress.pages&&(levelProgress=levelProgress.pages[normalizedLevel.pageNumber-1]),levelProgress?(status=levelProgress.status,locked=levelProgress.locked,teacherFeedbackReviewState=levelProgress.teacherFeedbackReviewState):level.kind!==_sharedConstants.LevelKind.assessment&&(status=(0,_activityUtils.activityCssClass)(levelResults[normalizedLevel.id]));var isCurrent=normalizedLevel.id===currentLevelId||!(null===(_level$ids=level.ids)||void 0===_level$ids||!_level$ids.includes[currentLevelId]);return _objectSpread(_objectSpread({},normalizedLevel),{},{status,isCurrentLevel:isCurrent,paired:levelPairing[level.activeId],isLocked:locked,teacherFeedbackReviewState,sublevels:null===(_level$sublevels=level.sublevels)||void 0===_level$sublevels?void 0:_level$sublevels.map((function(sublevel){return levelWithProgress({levelResults,unitProgress,levelPairing,currentLevelId},sublevel,isLockable,normalizedLevel.id)}))})}),levelsByLesson=exports.levelsByLesson=function levelsByLesson(_ref2){var lessons=_ref2.lessons,levelResults=_ref2.levelResults,unitProgress=_ref2.unitProgress,levelPairing=_ref2.levelPairing,currentLevelId=_ref2.currentLevelId;return lessons.map((function(lesson){return lesson.levels.map((function(level){return levelWithProgress({levelResults,unitProgress,levelPairing,currentLevelId},level,lesson.lockable)}))}))},levelsForLessonId=exports.levelsForLessonId=function levelsForLessonId(state,lessonId){var _state$lessons,lesson=null===(_state$lessons=state.lessons)||void 0===_state$lessons?void 0:_state$lessons.find((function(lesson){return lesson.id===lessonId}));return null==lesson?void 0:lesson.levels.map((function(level){return levelWithProgress(state,level,lesson.lockable)}))},levelById=exports.levelById=function levelById(state,lessonId,levelId){var _levelsForLessonId,_levelsForLessonId$fl;return null===(_levelsForLessonId=levelsForLessonId(state,lessonId))||void 0===_levelsForLessonId||null===(_levelsForLessonId$fl=_levelsForLessonId.flatMap((function(level){return[level].concat(_toConsumableArray((null==level?void 0:level.sublevels)||[]))})))||void 0===_levelsForLessonId$fl?void 0:_levelsForLessonId$fl.find((function(level){return level.id===levelId}))},getCurrentLevel=exports.getCurrentLevel=function getCurrentLevel(state){var _getCurrentLevels,_getCurrentLevels$fla;return null===(_getCurrentLevels=getCurrentLevels(state))||void 0===_getCurrentLevels||null===(_getCurrentLevels$fla=_getCurrentLevels.flatMap((function(level){return[level].concat(_toConsumableArray((null==level?void 0:level.sublevels)||[]))})))||void 0===_getCurrentLevels$fla?void 0:_getCurrentLevels$fla.find((function(level){return level.isCurrentLevel}))},getCurrentLevels=exports.getCurrentLevels=function getCurrentLevels(state){return levelsForLessonId(state.progress,state.progress.currentLessonId)},groupedLessons=(exports.getCurrentScriptLevelId=function getCurrentScriptLevelId(state){var _levelById,currentLevel=getCurrentLevel(state);if(currentLevel)return currentLevel.parentLevelId?null===(_levelById=levelById(state.progress,state.progress.currentLessonId,currentLevel.parentLevelId))||void 0===_levelById?void 0:_levelById.scriptLevelId:currentLevel.scriptLevelId},exports.nextLevelId=function nextLevelId(state){if(getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL){var levels=levelsForLessonId(state.progress,state.progress.currentLessonId),currentLevel=getCurrentLevel(state);if(currentLevel.parentLevelId)return currentLevel.parentLevelId;var currentLevelIndex=currentLevel.levelNumber-1;if(currentLevelIndex!==levels.length-1)return levels[currentLevelIndex+1].id}},exports.levelCount=function levelCount(state){return getProgressLevelType(state)===ProgressLevelType.LEVEL?1:getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL?getCurrentLevels(state).length:0},exports.lessonExtrasUrl=function lessonExtrasUrl(state,lessonId){return state.lessonExtrasEnabled?state.lessons.find((function(lesson){return lesson.id===lessonId})).lesson_extras_level_url:""},exports.isPerfect=function isPerfect(state,levelId){return!!state.levelResults&&state.levelResults[levelId]>=_constants.TestResults.MINIMUM_OPTIMAL_RESULT},exports.groupedLessons=function groupedLessons(state){var includeBonusLevels=arguments.length>1&&void 0!==arguments[1]&&arguments[1],byGroup={},allLevels=levelsByLesson(state);return state.lessonGroups.forEach((function(lessonGroup){byGroup[lessonGroup.display_name]={lessonGroup:{id:lessonGroup.id,userFacing:lessonGroup.user_facing,displayName:lessonGroup.display_name,description:lessonGroup.description,bigQuestions:lessonGroup.big_questions},lessons:[],levelsByLesson:[]}})),state.lessons.forEach((function(lesson,index){var group=lesson.lesson_group_display_name,lessonAtIndex=lessonFromLessonAtIndex(state,index),lessonLevels=allLevels[index];includeBonusLevels||(lessonLevels=lessonLevels.filter((function(level){return!level.bonus}))),byGroup[group]&&(byGroup[group].lessons.push(lessonAtIndex),byGroup[group].levelsByLesson.push(lessonLevels))})),state.peerReviewLessonInfo&&(byGroup[state.peerReviewLessonInfo.lesson_group_display_name]={group:state.peerReviewLessonInfo.lesson_group_display_name,lessonGroup:{id:null,displayName:state.peerReviewLessonInfo.lesson_group_display_name,description:null,bigQuestions:null},lessons:[peerReviewLesson(state)],levelsByLesson:[peerReviewLevels(state)]}),_lodash.default.values(byGroup)});exports.progressionsFromLevels=function progressionsFromLevels(levels){var progressions=[];if(0===levels.length)return progressions;var currentProgression={start:0,name:levels[0].progression||levels[0].name,displayName:levels[0].progressionDisplayName||levels[0].name,levels:[levels[0]]};return levels.slice(1).forEach((function(level,index){(level.progression||level.name)===currentProgression.name?currentProgression.levels.push(level):(progressions.push(currentProgression),currentProgression={start:index+1,name:level.progression||level.name,displayName:level.progressionDisplayName||level.name,levels:[level]})})),progressions.push(currentProgression),progressions};exports.__testonly__={}},"./src/code-studio/responsiveRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ResponsiveSize=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RESPONSIVE_SIZE&&state.responsiveSize!==action.responsiveSize)return _objectSpread(_objectSpread({},state),{},{responsiveSize:action.responsiveSize});return state},exports.getResponsiveBreakpoint=getResponsiveBreakpoint,exports.setResponsiveSize=void 0;var _utils=__webpack_require__("./src/utils.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_RESPONSIVE_SIZE="responsive/SET_RESPONSIVE_SIZE",ResponsiveSize=(exports.setResponsiveSize=function setResponsiveSize(responsiveSize){return{type:SET_RESPONSIVE_SIZE,responsiveSize}},exports.ResponsiveSize=(0,_utils.makeEnum)("lg","md","sm","xs")),Breakpoints=[{breakpoint:992,responsiveSize:ResponsiveSize.lg},{breakpoint:720,responsiveSize:ResponsiveSize.md},{breakpoint:650,responsiveSize:ResponsiveSize.sm},{breakpoint:0,responsiveSize:ResponsiveSize.xs}];function getResponsiveBreakpoint(width){var responsiveSize=Breakpoints.find((function(_ref){var breakpoint=_ref.breakpoint;return width>breakpoint}));return void 0===responsiveSize?(console.error("No responsive size found for width ".concat(width,", defaulting to xs")),ResponsiveSize.xs):responsiveSize.responsiveSize}var initialState={responsiveSize:getResponsiveBreakpoint(window.innerWidth)}},"./src/legacySharedComponents/FontAwesome.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/SafeMarkdown.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _redactableMarkdown=_interopRequireDefault(__webpack_require__("./node_modules/@code-dot-org/redactable-markdown/dist/main.js")),_remarkPlugins=__webpack_require__("./node_modules/@code-dot-org/remark-plugins/src/index.js"),_github=_interopRequireDefault(__webpack_require__("./node_modules/hast-util-sanitize/lib/github.json")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_rehypeRaw=_interopRequireDefault(__webpack_require__("./node_modules/rehype-raw/index.js")),_rehypeReact=_interopRequireDefault(__webpack_require__("./node_modules/rehype-react/index.js")),_rehypeSanitize=_interopRequireDefault(__webpack_require__("./node_modules/rehype-sanitize/index.js")),_remarkRehype=_interopRequireDefault(__webpack_require__("./node_modules/remark-rehype/index.js")),_externalLinks=_interopRequireDefault(__webpack_require__("./src/templates/plugins/externalLinks.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var SafeMarkdown=function(_React$Component){function SafeMarkdown(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SafeMarkdown,_React$Component),SafeMarkdown.prototype.render=function render(){var rendered=(this.props.openExternalLinksInNewTab?markdownToReactExternalLinks:markdownToReact).processSync(this.props.markdown).contents,markdownProps={};return this.props.className&&(markdownProps.className=this.props.className),rendered&&"div"===rendered.type&&!Object.keys(markdownProps).length?rendered:_react.default.createElement("div",markdownProps,rendered)},SafeMarkdown}(_react.default.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SafeMarkdown,"propTypes",{markdown:_propTypes.default.string.isRequired,openExternalLinksInNewTab:_propTypes.default.bool,className:_propTypes.default.string});var schema=Object.assign({},_github.default);schema.attributes.img.push("height","width"),schema.tagNames.push("span"),schema.attributes.span=["dataUrl","className"],schema.attributes["*"].push("style","className"),schema.attributes.b=["dataId"],schema.clobber=[];var blocklyTags=["block","functional_input","mutation","next","statement","title","field","value","xml"];schema.tagNames=schema.tagNames.concat(blocklyTags);var blocklyComponentWrappers={};blocklyTags.forEach((function(tag){schema.attributes[tag]=["block_text","id","inline","name","type"],blocklyComponentWrappers[tag]=function(props){var BlocklyElement=tag;return _react.default.createElement(BlocklyElement,_extends({is:tag},props))}}));var markdownToReact=_redactableMarkdown.default.create().getParser().use([_remarkPlugins.clickableText,_remarkPlugins.expandableImages,_remarkPlugins.visualCodeBlock,_remarkPlugins.xmlAsTopLevelBlock,_remarkPlugins.details]).use(_remarkRehype.default,{allowDangerousHTML:!0}).use(_rehypeRaw.default).use(_rehypeSanitize.default,schema).use(_rehypeReact.default,{createElement:_react.default.createElement,components:blocklyComponentWrappers}),markdownToReactExternalLinks=markdownToReact().use(_externalLinks.default,{links:"all"});exports.default=SafeMarkdown;module.exports=exports.default},"./src/templates/plugins/externalLinks.js":(__unused_webpack_module,exports)=>{function isExternalLink(url){return!/https?:\/\/([^.]+\.)*code.org(:[0-9]+)?\//.test(function fullyQualified(path){return(a=a||document.createElement("a")).href=path,a.href}(url))}var a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function externalLinks(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},tokenizers=this.Parser.prototype.inlineTokenizers,original=tokenizers.link,all="all"===options.links;tokenizers.link=function(eat,value,silent){var link=original.call(this,eat,value,silent);if(link&&"link"===link.type&&(all||isExternalLink(link.url))){link.data=link.data||{},link.data.hProperties=link.data.hProperties||{};var props=link.data.hProperties;props.target=props.target||"_blank",props.rel="noreferrer noopener"}return link},tokenizers.link.locator=original.locator},exports.isExternalLink=isExternalLink},"./src/templates/progress/ProgressBubbleSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressBubbleSet=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_ProgressBubble=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubble.jsx")),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressBubbleSet=function(_React$Component){function ProgressBubbleSet(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"renderBubble",(function(level,index,isSublevel){var _this$props=_this.props,levels=_this$props.levels,selectedSectionId=_this$props.selectedSectionId,selectedStudentId=_this$props.selectedStudentId,isRtl=_this$props.isRtl,backgroundFirstStyle=isRtl?styles.backgroundLast:styles.backgroundFirst,backgroundLastStyle=isRtl?styles.backgroundFirst:styles.backgroundLast,backgroundStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.background),level.isConceptLevel&&styles.backgroundDiamond),isSublevel&&styles.backgroundSublevel),level.isUnplugged&&styles.backgroundPill),!isSublevel&&0===index&&backgroundFirstStyle),!isSublevel&&!level.sublevels&&index===levels.length-1&&backgroundLastStyle),containerStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.container),level.isUnplugged&&styles.pillContainer),level.isConceptLevel&&styles.diamondContainer),isSublevel&&styles.containerSublevel);return _react.default.createElement("div",{style:styles.withBackground,key:index},_react.default.createElement("div",{style:backgroundStyleProp}),_react.default.createElement("div",{style:containerStyleProp},_react.default.createElement(_ProgressBubble.default,{level,disabled:_this.props.disabled,smallBubble:isSublevel,selectedSectionId,selectedStudentId,hideToolTips:_this.props.hideToolTips,onClick:_this.props.onBubbleClick,lessonName:_this.props.lessonName})))})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBubbleSet,_React$Component),ProgressBubbleSet.prototype.render=function render(){var _this2=this,_this$props2=this.props,levels=_this$props2.levels,style=_this$props2.style,showSublevels=_this$props2.showSublevels;return _react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),style)},levels.map((function(level,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(level,index,!1),showSublevels&&level.sublevels&&level.sublevels.map((function(sublevel,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(sublevel,index,!0))})))})))},ProgressBubbleSet}(_react.default.Component);_defineProperty(ProgressBubbleSet,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,style:_propTypes.default.object,selectedSectionId:_propTypes.default.number,selectedStudentId:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),hideToolTips:_propTypes.default.bool,lessonExtrasEnabled:_propTypes.default.bool,showSublevels:_propTypes.default.bool,onBubbleClick:_propTypes.default.func,lessonName:_propTypes.default.string,isRtl:_propTypes.default.bool});var styles={main:{position:"relative",display:"inline-block"},withBackground:{display:"inline-block",position:"relative"},background:{height:10,backgroundColor:_color.default.lighter_gray,position:"absolute",left:0,right:0,top:(_progressStyles.DOT_SIZE+4+6-10)/2},backgroundDiamond:{top:(_progressStyles.DIAMOND_DOT_SIZE+4+12-10)/2},backgroundPill:{top:15},backgroundSublevel:{top:9},backgroundFirst:{left:15},backgroundLast:{right:15},container:{position:"relative"},containerSublevel:{top:5},diamondContainer:{height:36},pillContainer:{marginRight:2,height:37}};exports.UnconnectedProgressBubbleSet=ProgressBubbleSet,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressBubbleSet))},"./src/templates/progress/ProgressLessonContent.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_progressReduxSelectors=__webpack_require__("./src/code-studio/progressReduxSelectors.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_SafeMarkdown=_interopRequireDefault(__webpack_require__("./src/templates/SafeMarkdown.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_ProgressLevelSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLevelSet.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_defineProperty(exports.default=function(_React$Component){function ProgressLessonContent(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLessonContent,_React$Component),ProgressLessonContent.prototype.render=function render(){var bubbles,_this$props=this.props,description=_this$props.description,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,lessonName=_this$props.lessonName,progressions=(0,_progressReduxSelectors.progressionsFromLevels)(levels);return bubbles=0===progressions.length?_react.default.createElement("span",{style:styles.noLevelsWarning},_locale.default.lessonContainsNoLevels()):1!==progressions.length||progressions[0].name?progressions.map((function(progression,index){return _react.default.createElement(_ProgressLevelSet.default,{key:index,name:progression.displayName,lessonName,levels:progression.levels,disabled,selectedSectionId})})):_react.default.createElement(_ProgressBubbleSet.default,{levels:progressions[0].levels,disabled,selectedSectionId}),_react.default.createElement("div",null,description&&_react.default.createElement("div",{style:styles.summary},_react.default.createElement(_SafeMarkdown.default,{markdown:description})),_react.default.createElement("div",null," ",bubbles," "))},ProgressLessonContent}(_react.default.Component),"propTypes",{description:_propTypes.default.string,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,lessonName:_propTypes.default.string});var styles={summary:function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}({marginTop:20,marginBottom:30,fontSize:14},_fontConstants.default["main-font-regular"]),noLevelsWarning:{fontSize:13}};module.exports=exports.default},"./src/templates/progress/ProgressLevelSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressLevelSet=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_ProgressPill=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressPill.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLevelSet=function(_React$Component){function ProgressLevelSet(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLevelSet,_React$Component),ProgressLevelSet.prototype.render=function render(){var pillText,icon,_this$props=this.props,name=_this$props.name,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,onBubbleClick=_this$props.onBubbleClick,isRtl=_this$props.isRtl,lessonName=_this$props.lessonName,multiLevelStep=levels.length>1,url=multiLevelStep||onBubbleClick?void 0:levels[0].url,onClick=multiLevelStep?void 0:function(){return onBubbleClick(levels[0])},col2Style=isRtl?styles.col2RTL:styles.col2,progressStyle=!1;return levels[0].isUnplugged||levels[levels.length-1].isUnplugged?multiLevelStep?(pillText="",icon=(0,_progressHelpers.getIconForLevel)(levels[0])):(pillText=_locale.default.unpluggedActivity(),progressStyle=!0):(pillText=levels[0].levelNumber.toString(),icon=(0,_progressHelpers.getIconForLevel)(levels[0]),multiLevelStep&&(pillText+="-".concat(levels[levels.length-1].levelNumber))),_react.default.createElement("table",{style:styles.table},_react.default.createElement("tbody",null,_react.default.createElement("tr",null,_react.default.createElement("td",{style:styles.col1},_react.default.createElement(_ProgressPill.default,{levels,icon,text:pillText,disabled,selectedSectionId,progressStyle,onSingleLevelClick:onBubbleClick})),_react.default.createElement("td",{style:col2Style},_react.default.createElement("a",{href:url,onClick},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.nameText),styles.text)},name)))),multiLevelStep&&_react.default.createElement("tr",null,_react.default.createElement("td",null,_react.default.createElement("div",{style:styles.linesAndDot},_react.default.createElement("div",{style:styles.verticalLine}),_react.default.createElement("div",{style:styles.horizontalLine}),_react.default.createElement("div",{style:styles.dot}))),_react.default.createElement("td",{style:styles.col2},_react.default.createElement(_ProgressBubbleSet.default,{levels,disabled,selectedSectionId,onBubbleClick,lessonName})))))},ProgressLevelSet}(_react.default.Component);_defineProperty(ProgressLevelSet,"propTypes",{name:_propTypes.default.string,lessonName:_propTypes.default.string,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,onBubbleClick:_propTypes.default.func,isRtl:_propTypes.default.bool});var styles={table:{marginTop:12},nameText:{color:_color.default.charcoal},text:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:14,letterSpacing:-.12}),col2:{paddingLeft:20},col2RTL:{paddingRight:20},linesAndDot:{whiteSpace:"nowrap",marginLeft:"50%",marginRight:14},verticalLine:{display:"inline-block",backgroundColor:_color.default.lighter_gray,height:15,width:3,position:"relative",bottom:2},horizontalLine:{display:"inline-block",backgroundColor:_color.default.lighter_gray,position:"relative",top:-2,height:3,width:"100%"},dot:{display:"inline-block",position:"relative",left:-2,top:1,backgroundColor:_color.default.lighter_gray,height:10,width:10,borderRadius:10}};exports.UnconnectedProgressLevelSet=ProgressLevelSet,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressLevelSet))},"./src/templates/progress/ProgressPill.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressPill=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_utils=__webpack_require__("./src/code-studio/utils.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressPill=function(_React$Component){function ProgressPill(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressPill,_React$Component);var _proto=ProgressPill.prototype;return _proto.getUrl=function getUrl(){var _this$props=this.props,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,onSingleLevelClick=_this$props.onSingleLevelClick;if(!disabled&&!onSingleLevelClick&&1===levels.length){var userId=(0,_utils.queryParams)("user_id");return(0,_BubbleFactory.getBubbleUrl)(levels[0].url,userId,selectedSectionId)}},_proto.getTooltipProps=function getTooltipProps(){var tooltip=this.props.tooltip,tooltipProps={};if(tooltip){var id=tooltip.props.tooltipId;tooltipProps["data-tip"]=!0,tooltipProps["data-for"]=id,tooltipProps["aria-describedby"]=id}return tooltipProps},_proto.render=function render(){var _this$props2=this.props,levels=_this$props2.levels,icon=_this$props2.icon,text=_this$props2.text,tooltip=_this$props2.tooltip,disabled=_this$props2.disabled,progressStyle=_this$props2.progressStyle,isRtl=_this$props2.isRtl,onSingleLevelClick=_this$props2.onSingleLevelClick,firstLevel=levels[0],multiLevelStep=levels.length>1,url=this.getUrl(),onClick=multiLevelStep||disabled||url?void 0:function(){return onSingleLevelClick(firstLevel)},style=_objectSpread(_objectSpread(_objectSpread({},styles.levelPill),(url||onClick)&&_progressStyles.hoverStyle),!multiLevelStep&&(0,_progressStyles.levelProgressStyle)(firstLevel.status,firstLevel.kind)),iconMarginStyle=isRtl?styles.iconMarginRTL:styles.iconMargin,tooltipProps=this.getTooltipProps(),hasKeepWorkingFeedback=firstLevel.teacherFeedbackReviewState===_types.ReviewStates.keepWorking,displayBadge=!multiLevelStep&&(hasKeepWorkingFeedback||(0,_progressHelpers.isLevelAssessment)(firstLevel)),textStyle=progressStyle?styles.textProgressStyle:styles.text;return _react.default.createElement("a",{href:url,style:{textDecoration:"none"},className:"uitest-ProgressPill",onClick},_react.default.createElement("div",_extends({},tooltipProps,{style}),icon&&_react.default.createElement(_FontAwesome.default,{icon}),text&&_react.default.createElement("div",{className:"ProgressPillTextAndIcon",style:_objectSpread(_objectSpread({},textStyle),icon&&iconMarginStyle)},text),tooltip,displayBadge&&_react.default.createElement(_BubbleBadge.default,{badgeType:hasKeepWorkingFeedback?_BubbleBadge.BadgeType.keepWorking:_BubbleBadge.BadgeType.assessment,bubbleSize:_BubbleFactory.BubbleSize.full,bubbleShape:_BubbleFactory.BubbleShape.pill})))},ProgressPill}(_react.default.Component);_defineProperty(ProgressPill,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType),icon:_propTypes.default.string,text:_propTypes.default.string,tooltip:_propTypes.default.element,disabled:_propTypes.default.bool,selectedSectionId:_propTypes.default.number,progressStyle:_propTypes.default.bool,onSingleLevelClick:_propTypes.default.func,isRtl:_propTypes.default.bool});var styles={levelPill:_objectSpread(_objectSpread({textAlign:"center",justifyContent:"center",borderWidth:2,borderStyle:"solid",borderColor:_color.default.lighter_gray,color:_color.default.charcoal,display:"flex",fontSize:16},_fontConstants.default["main-font-semi-bold"]),{},{borderRadius:20,paddingLeft:10,paddingRight:10,paddingTop:6,paddingBottom:6,minWidth:70,lineHeight:"18px",marginTop:3,marginBottom:3,position:"relative"}),text:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{letterSpacing:-.12}),textProgressStyle:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:12,letterSpacing:-.12,width:120,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}),iconMargin:{marginLeft:10},iconMarginRTL:{marginRight:10}};exports.UnconnectedProgressPill=ProgressPill,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressPill))},"./node_modules/css-loader/dist/runtime/api.js":module=>{module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/progress/ProgressLessonContent.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithUnpluggedLesson=exports.WithNoNamedLevels=exports.WithNamedUnpluggedLesson=exports.ProgressLessonExample=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_decorators=__webpack_require__("./.storybook/decorators.js"),_ProgressLessonContent=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonContent.jsx")),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}exports.default={component:_ProgressLessonContent.default};var Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store:(0,_decorators.reduxStore)()},_react.default.createElement(_ProgressLessonContent.default,_extends({disabled:!1},args)))};(exports.ProgressLessonExample=Template.bind({})).args={levels:(0,_progressTestHelpers.fakeLevels)(5).map((function(level,index){return _objectSpread(_objectSpread({},level),{},{status:1===index?_sharedConstants.LevelStatus.perfect:_sharedConstants.LevelStatus.not_tried,name:"Progression"})}))},(exports.WithUnpluggedLesson=Template.bind({})).args={levels:[(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5))).map((function(level){return _objectSpread(_objectSpread({},level),{},{name:"Progression"})}))},(exports.WithNamedUnpluggedLesson=Template.bind({})).args={levels:[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})),{},{name:"Fun unplugged/named level"})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,{named:!1})))},(exports.WithNoNamedLevels=Template.bind({})).args={levels:[_objectSpread({},(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0,name:void 0}))].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,{named:!1})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLXByb2dyZXNzLVByb2dyZXNzTGVzc29uQ29udGVudC1zdG9yeS5kMjg1MjlmMi5pZnJhbWUuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiIydUJBTU8sTUFBTUEsV0FBYSxDQUFDQyxTQUFXLENBQUMsRUFBR0MsTUFBUSxDQUFDLEtBQzFDLHFDQUFBQyxjQUNMLHFDQUFBQyxpQkFBZ0IsQ0FBQ0MsTUFBSyxpRkFBWSx5RkFDbENILE9BQ0EscUNBQUFJLGlCQUFnQixrRCwrSUNjTCxTQUFTQyxTQUE4QixJQUF2QkwsTUFBS00sVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLElBQUFBLFVBQUEsR0FBVUcsT0FBTUgsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUFFLEVBQ2xELEdBQUlDLE9BQU9DLE9BQVNDLFFBQ2xCLE9BQU9GLE9BQU9OLE1BRWhCLE9BQU9ILEtBQ1QsRSw4RUE3QkEsSUFBTVcsUUFBVSxnQkFDSEMsT0FBTUMsUUFBQUEsT0FBRyxTQUFURCxPQUFTVCxPQUFLLE1BQUssQ0FBQ08sS0FBTUMsUUFBU1IsTUFBTSxFQUM1QlUsUUFBQUEsY0FBRyxTQUFoQkMsZ0JBQWEsT0FBU0YsT0FBT0csZUFBZSxFQVlsRCxTQUFTQSxlQUNkLElBQU1DLEtBQU9DLFNBQVNDLHFCQUFxQixRQUFRLEdBQ25ELEdBQUlGLE1BQVFBLEtBQUtHLGNBQWUsQ0FDOUIsSUFBTUMsSUFBTUosS0FBS0csY0FBY0UsYUFBYSxPQUM1QyxTQUFVRCxLQUE2QixRQUF0QkEsSUFBSUUsY0FDdkIsQ0FDRSxPQUFPLENBRVgsQyx5bUJDbkJBLElBQUFDLFFBTWlELFNBQUFDLHVCQUFBQyxLQUFBLE9BQUFBLEtBQUFBLElBQUFDLFdBQUFELElBQUEsU0FBQUEsSUFBQSxDQU5qREQsQ0FBQUcsb0JBQUEsb0NBRUFDLFdBQUFELG9CQUFBLHNCQUNBRSxpQkFBQUYsb0JBQUEsK0NBQ0FHLGlCQUFBSCxvQkFBQSwwQ0FFQUksZUFBQUosb0JBQUEsc0NBQWlELFNBQUFLLFFBQUFD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OUI2RyxLQUFPLENBQ3pCcFAsT0FBUSxFQUFDLEVBQUEwZSxxQkFBQUEsV0FBVSxDQUFDdE8sYUFBYSxLQUFNeE8sT0FBQWxHLG9CQUFLLEVBQUE4aUIscUJBQUFBLFlBQVcsS0FBSTVlLEtBQUksU0FBQUssT0FBSyxPQUFBckMsY0FBQUEsY0FBQSxHQUMvRHFDLE9BQUssSUFDUnZELEtBQU0sZUFBYSxNQUljekMsUUFBQUEseUJBQUdva0IsU0FBUzlWLEtBQUssQ0FBQyxJQUM5QjZHLEtBQU8sQ0FDOUJwUCxPQUFRLENBQUZwQyxjQUFBQSxjQUFBLElBRUMsRUFBQThnQixxQkFBQUEsV0FBVSxDQUFDdE8sYUFBYSxLQUFNLElBQ2pDMVQsS0FBTSwrQkFBMkJrRixPQUFBbEcsb0JBRWhDLEVBQUE4aUIscUJBQUFBLFlBQVcsRUFBRyxDQUFDRyxPQUFPLFFBSUMxa0IsUUFBQUEsa0JBQUdva0IsU0FBUzlWLEtBQUssQ0FBQyxJQUM5QjZHLEtBQU8sQ0FDdkJwUCxPQUFRLENBQUZwQyxjQUFBLElBRUMsRUFBQThnQixxQkFBQUEsV0FBVSxDQUFDdE8sYUFBYSxFQUFNMVQsVUFBTTlDLE1BQVdnSSxPQUFBbEcsb0JBRWpELEVBQUE4aUIscUJBQUFBLFlBQVcsRUFBRyxDQUFDRyxPQUFPLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi8uc3Rvcnlib29rL2RlY29yYXRvcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL2lzUnRsUmVkdXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL3Byb2dyZXNzUmVkdXhTZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL3Jlc3BvbnNpdmVSZWR1eC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvbGVnYWN5U2hhcmVkQ29tcG9uZW50cy9Gb250QXdlc29tZS5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9TYWZlTWFya2Rvd24uanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcGx1Z2lucy9leHRlcm5hbExpbmtzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvUHJvZ3Jlc3NCdWJibGVTZXQuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvUHJvZ3Jlc3NMZXNzb25Db250ZW50LmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL1Byb2dyZXNzTGV2ZWxTZXQuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvUHJvZ3Jlc3NQaWxsLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL1Byb2dyZXNzTGVzc29uQ29udGVudC5zdG9yeS5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBhcHBseU1pZGRsZXdhcmV9IGZyb20gJ3JlZHV4JztcbmltcG9ydCByZWR1eFRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcblxuaW1wb3J0IGlzUnRsIGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby9pc1J0bFJlZHV4JztcbmltcG9ydCByZXNwb25zaXZlIGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby9yZXNwb25zaXZlUmVkdXgnO1xuXG5leHBvcnQgY29uc3QgcmVkdXhTdG9yZSA9IChyZWR1Y2VycyA9IHt9LCBzdGF0ZSA9IHt9KSA9PiB7XG4gIHJldHVybiBjcmVhdGVTdG9yZShcbiAgICBjb21iaW5lUmVkdWNlcnMoe2lzUnRsLCByZXNwb25zaXZlLCAuLi5yZWR1Y2Vyc30pLFxuICAgIHN0YXRlLFxuICAgIGFwcGx5TWlkZGxld2FyZShyZWR1eFRodW5rKVxuICApO1xufTtcbiIsImNvbnN0IFNFVF9SVEwgPSAnaXNSdGwvU0VUX1JUTCc7XG5leHBvcnQgY29uc3Qgc2V0UnRsID0gaXNSdGwgPT4gKHt0eXBlOiBTRVRfUlRMLCBpc1J0bH0pO1xuZXhwb3J0IGNvbnN0IHNldFJ0bEZyb21ET00gPSAoKSA9PiBzZXRSdGwoaXNSdGxGcm9tRE9NKCkpO1xuXG4vLyBEYXNoYm9hcmQgc2lnbmFscyB3aGV0aGVyIG9yIG5vdCB3ZSdyZSBpbiBydGwgYnkgc2V0dGluZyBcImRpclwiIG9uIHRoZSByb290XG4vLyBlbGVtZW50LiBJbiBhbiBpZGVhbCB3b3JsZCwgcmVkdXggd291bGQgYmUgdGhlIHNvdXJjZSBvZiB0cnV0aCwgYnV0IHdlIGhhdmVcbi8vIENTUyBzZWxlY3RvcnMgdGhhdCBkZXBlbmQgb24gdGhpcyBET00gc3RhdGUsIHNvbWUgb2Ygd2hpY2ggYXJlIHVzZWQgaW4gY2FzZXNcbi8vIHdoZXJlIHdlIGRvbid0IGhhdmUgcmVkdXguXG4vLyBJbnN0ZWFkIHdlIGhhdmUgdGhlIERPTSBjb250aW51ZSB0byBiZSB0aGUgc291cmNlIG9mIHRydXRoLCBhbmQgc2V0IG91ciBzdG9yZVxuLy8gc3RhdGUgYWNjb3JkaW5nbHkgc28gdGhhdCBjb21wb25lbnRzIGNhbiBhY2Nlc3MgdGhpcyBpbmZvLlxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGxvb2tzIGF0IHRoZSBET00gYW5kIGRlY2lkZXMgd2hldGhlciBvciBub3Qgd2UncmUgaW4gUlRMIG1vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1J0bEZyb21ET00oKSB7XG4gIGNvbnN0IGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICBpZiAoaGVhZCAmJiBoZWFkLnBhcmVudEVsZW1lbnQpIHtcbiAgICBjb25zdCBkaXIgPSBoZWFkLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKTtcbiAgICByZXR1cm4gISEoZGlyICYmIGRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvY2FsZShzdGF0ZSA9IGZhbHNlLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSBTRVRfUlRMKSB7XG4gICAgcmV0dXJuIGFjdGlvbi5pc1J0bDtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG4iLCIvLyBTZWxlY3RvcnMgYW5kIHJlbGF0ZWQgaGVscGVycyBmb3IgcHJvZ3Jlc3NSZWR1eC4gVGhlc2UgYXJlIGluIHRoZWlyIG93biBmaWxlXG4vLyBiZWNhdXNlIHRoZXkgYXJlIHF1aXRlIGNvbXBsZXggYW5kIHByb2dyZXNzUmVkdXguanMgaXMgYWxyZWFkeSBxdWl0ZSBsYXJnZS5cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtUZXN0UmVzdWx0c30gZnJvbSAnQGNkby9hcHBzL2NvbnN0YW50cyc7XG5pbXBvcnQge3Byb2Nlc3NlZExldmVsfSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL3Byb2dyZXNzL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQge0xldmVsU3RhdHVzLCBMZXZlbEtpbmR9IGZyb20gJ0BjZG8vZ2VuZXJhdGVkLXNjcmlwdHMvc2hhcmVkQ29uc3RhbnRzJztcblxuaW1wb3J0IHthY3Rpdml0eUNzc0NsYXNzfSBmcm9tICcuL2FjdGl2aXR5VXRpbHMnO1xuXG5jb25zdCBQRUVSX1JFVklFV19JRCA9IC0xO1xuXG4vLyBTZWxlY3RvcnNcblxuLy8gRG8gd2UgaGF2ZSBvbmUgb3IgbW9yZSBsb2NrYWJsZSBsZXNzb25zXG5leHBvcnQgY29uc3QgaGFzTG9ja2FibGVMZXNzb25zID0gc3RhdGUgPT5cbiAgc3RhdGUubGVzc29ucy5zb21lKGxlc3NvbiA9PiBsZXNzb24ubG9ja2FibGUpO1xuXG5leHBvcnQgY29uc3QgaGFzR3JvdXBzID0gc3RhdGUgPT4gT2JqZWN0LmtleXMoZ3JvdXBlZExlc3NvbnMoc3RhdGUpKS5sZW5ndGggPiAxO1xuXG4vKipcbiAqIEV4dHJhY3QgdGhlIHJlbGV2YW50IHBvcnRpb25zIG9mIGEgcGFydGljdWxhciBsZXNzb24gZnJvbSB0aGUgc3RvcmUuXG4gKiBOb3RlLCB0aGF0IHRoaXMgZG9lcyBub3QgaW5jbHVkZSBsZXZlbHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIFRoZSBwcm9ncmVzcyBzdGF0ZSBpbiBvdXIgcmVkdXggc3RvcmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZXNzb25JbmRleCAtIFRoZSBpbmRleCBpbnRvIG91ciBsZXNzb25zIHdlIGNhcmUgYWJvdXRcbiAqIEByZXR1cm5zIHtMZXNzb259XG4gKi9cbmNvbnN0IGxlc3NvbkZyb21MZXNzb25BdEluZGV4ID0gKHN0YXRlLCBsZXNzb25JbmRleCkgPT4gKHtcbiAgLi4ubGVzc29uRnJvbUxlc3NvbihzdGF0ZS5sZXNzb25zW2xlc3NvbkluZGV4XSksXG4gIGlzRm9jdXNBcmVhOiBzdGF0ZS5mb2N1c0FyZWFMZXNzb25JZHMuaW5jbHVkZXMoc3RhdGUubGVzc29uc1tsZXNzb25JbmRleF0uaWQpLFxufSk7XG5cbmNvbnN0IGxlc3NvbkZyb21MZXNzb24gPSBsZXNzb24gPT5cbiAgXy5waWNrKGxlc3NvbiwgW1xuICAgICduYW1lJyxcbiAgICAnaWQnLFxuICAgICdsb2NrYWJsZScsXG4gICAgJ2xlc3Nvbk51bWJlcicsXG4gICAgJ2xlc3NvblN0YXJ0VXJsJyxcbiAgICAnbGVzc29uX3BsYW5faHRtbF91cmwnLFxuICAgICdsZXNzb25fZmVlZGJhY2tfdXJsJyxcbiAgICAnc3R1ZGVudF9sZXNzb25fcGxhbl9odG1sX3VybCcsXG4gICAgJ2Rlc2NyaXB0aW9uX3N0dWRlbnQnLFxuICAgICdkZXNjcmlwdGlvbl90ZWFjaGVyJyxcbiAgXSk7XG5leHBvcnQgY29uc3QgbGVzc29ucyA9IHN0YXRlID0+XG4gIHN0YXRlLmxlc3NvbnMubWFwKChfLCBpbmRleCkgPT4gbGVzc29uRnJvbUxlc3NvbkF0SW5kZXgoc3RhdGUsIGluZGV4KSk7XG5cbi8qKlxuICogRXh0cmFjdCBsZXNzb24gZnJvbSBvdXIgcGVlclJldmlld0xlc3NvbkluZm8gaWYgd2UgaGF2ZSBvbmUuIFdlIHdhbnQgdGhpcyB0byBlbmQgdXBcbiAqIGhhdmluZyB0aGUgc2FtZSBmaWVsZHMgYXMgb3VyIG5vbi1wZWVyIHJldmlldyBsZXNzb25zLlxuICovXG5jb25zdCBwZWVyUmV2aWV3TGVzc29uID0gc3RhdGUgPT4gKHtcbiAgLi4ubGVzc29uRnJvbUxlc3NvbihzdGF0ZS5wZWVyUmV2aWV3TGVzc29uSW5mbyksXG4gIC8vIGFkZCBzb21lIGZpZWxkcyB0aGF0IGFyZSBtaXNzaW5nIGZvciB0aGlzIGxlc3NvbiBidXQgcmVxdWlyZWQgZm9yIGxlc3NvblR5cGVcbiAgaWQ6IFBFRVJfUkVWSUVXX0lELFxuICBsb2NrYWJsZTogZmFsc2UsXG4gIGlzRm9jdXNBcmVhOiBmYWxzZSxcbn0pO1xuXG4vKipcbiAqIEV4dHJhY3QgbGV2ZWxzIGZyb20gb3VyIHBlZXJSZXZpZXdMZXNzb25JbmZvLCBtYWtpbmcgc3VyZSB0aGUgbGV2ZWxzIGhhdmUgdGhlIHNhbWVcbiAqIHNldCBvZiBmaWVsZHMgYXMgb3VyIG5vbi1wZWVyIHJldmlldyBsZXZlbHMuXG4gKi9cbmNvbnN0IHBlZXJSZXZpZXdMZXZlbHMgPSBzdGF0ZSA9PlxuICBzdGF0ZS5wZWVyUmV2aWV3TGVzc29uSW5mby5sZXZlbHMubWFwKChsZXZlbCwgaW5kZXgpID0+ICh7XG4gICAgLy8gVGhlc2UgYXJlbid0IHRydWUgbGV2ZWxzIChpLmUuIHdlIHdvbid0IGhhdmUgYW4gZW50cnkgaW4gbGV2ZWxSZXN1bHRzKSxcbiAgICAvLyBzbyBhbHdheXMgdXNlIGEgc3BlY2lmaWMgaWQgdGhhdCB3b24ndCBjb2xsaWRlIHdpdGggcmVhbCBsZXZlbHNcbiAgICAuLi5sZXZlbCxcbiAgICBpZDogUEVFUl9SRVZJRVdfSUQudG9TdHJpbmcoKSxcbiAgICBpc0xvY2tlZDogbGV2ZWwubG9ja2VkLFxuICAgIHN0YXR1czogbGV2ZWwuc3RhdHVzIHx8IExldmVsU3RhdHVzLm5vdF90cmllZCxcbiAgICBsZXZlbE51bWJlcjogaW5kZXggKyAxLFxuICB9KSk7XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHdlIGFwcGVhciB0byBiZSBpbiBhIHNjcmlwdCBsZXZlbCBvciBhIHN0YW5kYWxvbmUgbGV2ZWwuXG4gKiBBIHNjcmlwdCBsZXZlbCBpcyBpZGVudGlmaWVkIGJlY2F1c2UgaXQgaGFzIGxlc3NvbnMuXG4gKiBBIHN0YW5kYWxvbmUgbGV2ZWwgZG9lc24ndCBoYXZlIGxlc3NvbnMsIGJ1dCBpdCBkb2VzIGhhdmUgYSBsZXZlbCBJRC5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb2dyZXNzTGV2ZWxUeXBlID0ge1xuICBTQ1JJUFRfTEVWRUw6ICdzY3JpcHRfbGV2ZWwnLFxuICBMRVZFTDogJ2xldmVsJyxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9ncmVzc0xldmVsVHlwZSA9IHN0YXRlID0+IHtcbiAgaWYgKHN0YXRlLnByb2dyZXNzLmxlc3NvbnMpIHtcbiAgICByZXR1cm4gUHJvZ3Jlc3NMZXZlbFR5cGUuU0NSSVBUX0xFVkVMO1xuICB9IGVsc2UgaWYgKHN0YXRlLnByb2dyZXNzLmN1cnJlbnRMZXZlbElkKSB7XG4gICAgcmV0dXJuIFByb2dyZXNzTGV2ZWxUeXBlLkxFVkVMO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGFzaGJvYXJkIFVSTCBwYXRoIHRvIHJldHJpZXZlIHRoZSBsZXZlbCBwcm9wZXJ0aWVzIGZvciBhIHNjcmlwdFxuICogbGV2ZWwgKGlmIHdlIGhhdmUgbGVzc29ucykgb3IgYSBsZXZlbCAoaWYgd2UgZG9uJ3QgaGF2ZSBsZXNzb25zKS4gSWYgd2UgZG9uJ3RcbiAqIGhhdmUgYSBjdXJyZW50IGxldmVsLCB0aGlzIHJldHVybnMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgY29uc3QgZ2V0TGV2ZWxQcm9wZXJ0aWVzUGF0aCA9IHN0YXRlID0+IHtcbiAgaWYgKHN0YXRlLnByb2dyZXNzLmxlc3NvbnMpIHtcbiAgICBjb25zdCBzY3JpcHROYW1lID0gc3RhdGUucHJvZ3Jlc3Muc2NyaXB0TmFtZTtcbiAgICBjb25zdCBsZXNzb25Qb3NpdGlvbiA9IHN0YXRlLnByb2dyZXNzLmxlc3NvbnM/LmZpbmQoXG4gICAgICBsZXNzb24gPT4gbGVzc29uLmlkID09PSBzdGF0ZS5wcm9ncmVzcy5jdXJyZW50TGVzc29uSWRcbiAgICApLnJlbGF0aXZlX3Bvc2l0aW9uO1xuXG4gICAgbGV0IGxldmVsUG9zaXRpb24sIHN1YmxldmVsUG9zaXRpb247XG4gICAgY29uc3QgY3VycmVudExldmVsID0gZ2V0Q3VycmVudExldmVsKHN0YXRlKTtcbiAgICBsZXZlbFBvc2l0aW9uID0gY3VycmVudExldmVsLmxldmVsTnVtYmVyO1xuXG4gICAgLy8gVXNlIHRoZSBzdWJsZXZlbCBwb3NpdGlvbiBpZiB3ZSdyZSBvbiBhIHN1YmxldmVsXG4gICAgaWYgKGN1cnJlbnRMZXZlbC5wYXJlbnRMZXZlbElkKSB7XG4gICAgICBjb25zdCBwYXJlbnRMZXZlbCA9IGxldmVsQnlJZChcbiAgICAgICAgc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgIHN0YXRlLnByb2dyZXNzLmN1cnJlbnRMZXNzb25JZCxcbiAgICAgICAgY3VycmVudExldmVsLnBhcmVudExldmVsSWRcbiAgICAgICk7XG4gICAgICBsZXZlbFBvc2l0aW9uID0gcGFyZW50TGV2ZWwubGV2ZWxOdW1iZXI7XG4gICAgICBzdWJsZXZlbFBvc2l0aW9uID0gY3VycmVudExldmVsLmxldmVsTnVtYmVyO1xuICAgIH1cblxuICAgIHJldHVybiBgL3MvJHtzY3JpcHROYW1lfS9sZXNzb25zLyR7bGVzc29uUG9zaXRpb259L2xldmVscy8ke2xldmVsUG9zaXRpb259LyR7XG4gICAgICBzdWJsZXZlbFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyAnJyA6IGBzdWJsZXZlbC8ke3N1YmxldmVsUG9zaXRpb259L2BcbiAgICB9bGV2ZWxfcHJvcGVydGllc2A7XG4gIH0gZWxzZSBpZiAoc3RhdGUucHJvZ3Jlc3MuY3VycmVudExldmVsSWQgIT09IG51bGwpIHtcbiAgICBjb25zdCBsZXZlbElkID0gc3RhdGUucHJvZ3Jlc3MuY3VycmVudExldmVsSWQ7XG4gICAgcmV0dXJuIGAvbGV2ZWxzLyR7bGV2ZWxJZH0vbGV2ZWxfcHJvcGVydGllc2A7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgbGV2ZWwgb2JqZWN0IHBhc3NlZCBkb3duIHRvIHVzZSB2aWEgdGhlIHNlcnZlciAoYW5kIHN0b3JlZCBpbiBsZXNzb24ubGVzc29ucy5sZXZlbHMpXG4gKiBjb250YWlucyBtb3JlIGRhdGEgdGhhbiB3ZSBuZWVkLiBUaGlzIChhKSBmaWx0ZXJzIHRvIHRoZSBwYXJ0cyBvdXIgdmlld3MgY2FyZVxuICogYWJvdXQgYW5kIChiKSBkZXRlcm1pbmVzIGN1cnJlbnQgc3RhdHVzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mXG4gKiBzdGF0ZS5sZXZlbFJlc3VsdHNcbiAqL1xuY29uc3QgbGV2ZWxXaXRoUHJvZ3Jlc3MgPSAoXG4gIHtsZXZlbFJlc3VsdHMsIHVuaXRQcm9ncmVzcywgbGV2ZWxQYWlyaW5nID0ge30sIGN1cnJlbnRMZXZlbElkfSxcbiAgbGV2ZWwsXG4gIGlzTG9ja2FibGUsXG4gIHBhcmVudExldmVsSWRcbikgPT4ge1xuICBjb25zdCBub3JtYWxpemVkTGV2ZWwgPSBwcm9jZXNzZWRMZXZlbChsZXZlbCwgcGFyZW50TGV2ZWxJZCk7XG4gIGlmIChsZXZlbC5pZHMpIHtcbiAgICAvLyBtYWtlIHN1cmUgd2UncmUgdXNpbmcgdGhlIGlkIHdpdGggYmVzdCBwcm9ncmVzc1xuICAgIG5vcm1hbGl6ZWRMZXZlbC5pZCA9IGJlc3RSZXN1bHRMZXZlbElkKGxldmVsLmlkcywgbGV2ZWxSZXN1bHRzKTtcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdmFsdWVzXG4gIGxldCBzdGF0dXMgPSBMZXZlbFN0YXR1cy5ub3RfdHJpZWQ7XG4gIGxldCBsb2NrZWQgPSBpc0xvY2thYmxlO1xuICBsZXQgdGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGUgPSBudWxsO1xuXG4gIGxldCBsZXZlbFByb2dyZXNzID0gdW5pdFByb2dyZXNzW25vcm1hbGl6ZWRMZXZlbC5pZF07XG4gIGlmIChsZXZlbFByb2dyZXNzPy5wYWdlcykge1xuICAgIGxldmVsUHJvZ3Jlc3MgPSBsZXZlbFByb2dyZXNzLnBhZ2VzW25vcm1hbGl6ZWRMZXZlbC5wYWdlTnVtYmVyIC0gMV07XG4gIH1cbiAgaWYgKGxldmVsUHJvZ3Jlc3MpIHtcbiAgICAvLyBpZiB3ZSBoYXZlIGxldmVsUHJvZ3Jlc3MsIG92ZXJ3cml0ZSBkZWZhdWx0IHZhbHVlc1xuICAgIHN0YXR1cyA9IGxldmVsUHJvZ3Jlc3Muc3RhdHVzO1xuICAgIGxvY2tlZCA9IGxldmVsUHJvZ3Jlc3MubG9ja2VkO1xuICAgIHRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlID0gbGV2ZWxQcm9ncmVzcy50ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZTtcbiAgfSBlbHNlIGlmIChsZXZlbC5raW5kICE9PSBMZXZlbEtpbmQuYXNzZXNzbWVudCkge1xuICAgIC8vIGlmIHdlIGRvbid0IGhhdmUgbGV2ZWxQcm9ncmVzcywgZ2V0IHRoZSBzdGF0dXMgZnJvbSBgbGV2ZWxSZXN1bHRzYC5cbiAgICAvLyBob3dldmVyLCBgbGV2ZWxSZXN1bHRzYCBkb2Vzbid0IHRyYWNrIHBlci1wYWdlIHJlc3VsdHMgZm9yIG11bHRpLXBhZ2VcbiAgICAvLyBhc3Nlc3NtZW50cywgc28gZm9yIGFzc2Vzc21lbnRzIHdlIGxlYXZlIGRlZmF1bHQgdmFsdWVzLlxuICAgIC8vXG4gICAgLy8gbm90ZTogaWYgd2UncmUgbm90IHVzaW5nIGxldmVsUHJvZ3Jlc3MsIGBpc0xvY2tlZGAgd2lsbCBhbHdheXMgYmUgZmFsc2UuXG4gICAgc3RhdHVzID0gYWN0aXZpdHlDc3NDbGFzcyhsZXZlbFJlc3VsdHNbbm9ybWFsaXplZExldmVsLmlkXSk7XG4gIH1cbiAgY29uc3QgaXNDdXJyZW50ID1cbiAgICBub3JtYWxpemVkTGV2ZWwuaWQgPT09IGN1cnJlbnRMZXZlbElkIHx8XG4gICAgISFsZXZlbC5pZHM/LmluY2x1ZGVzW2N1cnJlbnRMZXZlbElkXTtcblxuICByZXR1cm4ge1xuICAgIC4uLm5vcm1hbGl6ZWRMZXZlbCxcbiAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICBpc0N1cnJlbnRMZXZlbDogaXNDdXJyZW50LFxuICAgIHBhaXJlZDogbGV2ZWxQYWlyaW5nW2xldmVsLmFjdGl2ZUlkXSxcbiAgICBpc0xvY2tlZDogbG9ja2VkLFxuICAgIHRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlOiB0ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZSxcbiAgICBzdWJsZXZlbHM6IGxldmVsLnN1YmxldmVscz8ubWFwKHN1YmxldmVsID0+XG4gICAgICBsZXZlbFdpdGhQcm9ncmVzcyhcbiAgICAgICAge2xldmVsUmVzdWx0cywgdW5pdFByb2dyZXNzLCBsZXZlbFBhaXJpbmcsIGN1cnJlbnRMZXZlbElkfSxcbiAgICAgICAgc3VibGV2ZWwsXG4gICAgICAgIGlzTG9ja2FibGUsXG4gICAgICAgIG5vcm1hbGl6ZWRMZXZlbC5pZFxuICAgICAgKVxuICAgICksXG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBsZXZlbCBkYXRhIGZvciBhbGwgbGVzc29uc1xuICovXG5leHBvcnQgY29uc3QgbGV2ZWxzQnlMZXNzb24gPSAoe1xuICBsZXNzb25zLFxuICBsZXZlbFJlc3VsdHMsXG4gIHVuaXRQcm9ncmVzcyxcbiAgbGV2ZWxQYWlyaW5nLFxuICBjdXJyZW50TGV2ZWxJZCxcbn0pID0+XG4gIGxlc3NvbnMubWFwKGxlc3NvbiA9PlxuICAgIGxlc3Nvbi5sZXZlbHMubWFwKGxldmVsID0+IHtcbiAgICAgIGxldCBzdGF0dXNMZXZlbCA9IGxldmVsV2l0aFByb2dyZXNzKFxuICAgICAgICB7bGV2ZWxSZXN1bHRzLCB1bml0UHJvZ3Jlc3MsIGxldmVsUGFpcmluZywgY3VycmVudExldmVsSWR9LFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgbGVzc29uLmxvY2thYmxlXG4gICAgICApO1xuICAgICAgcmV0dXJuIHN0YXR1c0xldmVsO1xuICAgIH0pXG4gICk7XG5cbi8qKlxuICogR2V0IGRhdGEgZm9yIGEgcGFydGljdWxhciBsZXNzb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxldmVsc0Zvckxlc3NvbklkID0gKHN0YXRlLCBsZXNzb25JZCkgPT4ge1xuICBjb25zdCBsZXNzb24gPSBzdGF0ZS5sZXNzb25zPy5maW5kKGxlc3NvbiA9PiBsZXNzb24uaWQgPT09IGxlc3NvbklkKTtcbiAgcmV0dXJuIGxlc3Nvbj8ubGV2ZWxzLm1hcChsZXZlbCA9PlxuICAgIGxldmVsV2l0aFByb2dyZXNzKHN0YXRlLCBsZXZlbCwgbGVzc29uLmxvY2thYmxlKVxuICApO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIGxlc3NvbiBJRCwgYW5kIGEgbGV2ZWwgSUQsIHJldHVybnMgdGhlIHJlcXVlc3RlZCBsZXZlbC5cbiAqL1xuZXhwb3J0IGNvbnN0IGxldmVsQnlJZCA9IChzdGF0ZSwgbGVzc29uSWQsIGxldmVsSWQpID0+IHtcbiAgcmV0dXJuIGxldmVsc0Zvckxlc3NvbklkKHN0YXRlLCBsZXNzb25JZClcbiAgICA/LmZsYXRNYXAobGV2ZWwgPT4gW2xldmVsLCAuLi4obGV2ZWw/LnN1YmxldmVscyB8fCBbXSldKVxuICAgID8uZmluZChsZXZlbCA9PiBsZXZlbC5pZCA9PT0gbGV2ZWxJZCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudExldmVsID0gc3RhdGUgPT4ge1xuICByZXR1cm4gZ2V0Q3VycmVudExldmVscyhzdGF0ZSlcbiAgICA/LmZsYXRNYXAobGV2ZWwgPT4gW2xldmVsLCAuLi4obGV2ZWw/LnN1YmxldmVscyB8fCBbXSldKVxuICAgID8uZmluZChsZXZlbCA9PiBsZXZlbC5pc0N1cnJlbnRMZXZlbCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudExldmVscyA9IHN0YXRlID0+IHtcbiAgcmV0dXJuIGxldmVsc0Zvckxlc3NvbklkKHN0YXRlLnByb2dyZXNzLCBzdGF0ZS5wcm9ncmVzcy5jdXJyZW50TGVzc29uSWQpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHNjcmlwdCBsZXZlbCBJRCBvZiB0aGUgY3VycmVudCBsZXZlbC4gSWYgdGhlIGN1cnJlbnQgbGV2ZWwgaXMgYSBzdWJsZXZlbCxcbiAqIChhbmQgdGhlcmVmb3JlIG5vdCBhIHNjcmlwdCBsZXZlbCkgcmV0dXJuIHRoZSBwYXJlbnQgc2NyaXB0IGxldmVsIElELlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlcmUgaXMgbm8gY3VycmVudCBsZXZlbC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRTY3JpcHRMZXZlbElkID0gc3RhdGUgPT4ge1xuICBjb25zdCBjdXJyZW50TGV2ZWwgPSBnZXRDdXJyZW50TGV2ZWwoc3RhdGUpO1xuICBpZiAoIWN1cnJlbnRMZXZlbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjdXJyZW50TGV2ZWwucGFyZW50TGV2ZWxJZCkge1xuICAgIHJldHVybiBsZXZlbEJ5SWQoXG4gICAgICBzdGF0ZS5wcm9ncmVzcyxcbiAgICAgIHN0YXRlLnByb2dyZXNzLmN1cnJlbnRMZXNzb25JZCxcbiAgICAgIGN1cnJlbnRMZXZlbC5wYXJlbnRMZXZlbElkXG4gICAgKT8uc2NyaXB0TGV2ZWxJZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycmVudExldmVsLnNjcmlwdExldmVsSWQ7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IGxldmVsIElEIGluIHRoZSBwcm9ncmVzc2lvbiBpZiBpdCBleGlzdHMuXG4gKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiBub3QgY3VycmVudGx5IGluIGEgc2NyaXB0IGxldmVsIG9yXG4gKiBjdXJyZW50bHkgb24gdGhlIGxhc3QgbGV2ZWwuXG4gKi9cbmV4cG9ydCBjb25zdCBuZXh0TGV2ZWxJZCA9IHN0YXRlID0+IHtcbiAgaWYgKGdldFByb2dyZXNzTGV2ZWxUeXBlKHN0YXRlKSAhPT0gUHJvZ3Jlc3NMZXZlbFR5cGUuU0NSSVBUX0xFVkVMKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IGxldmVscyA9IGxldmVsc0Zvckxlc3NvbklkKFxuICAgIHN0YXRlLnByb2dyZXNzLFxuICAgIHN0YXRlLnByb2dyZXNzLmN1cnJlbnRMZXNzb25JZFxuICApO1xuICBjb25zdCBjdXJyZW50TGV2ZWwgPSBnZXRDdXJyZW50TGV2ZWwoc3RhdGUpO1xuICAvLyBJZiB3ZSBhcmUgb24gYSBzdWJsZXZlbCwgbmF2aWdhdGUgYmFjayB0byB0aGUgcGFyZW50IGxldmVsLlxuICBpZiAoY3VycmVudExldmVsLnBhcmVudExldmVsSWQpIHtcbiAgICByZXR1cm4gY3VycmVudExldmVsLnBhcmVudExldmVsSWQ7XG4gIH1cbiAgY29uc3QgY3VycmVudExldmVsSW5kZXggPSBjdXJyZW50TGV2ZWwubGV2ZWxOdW1iZXIgLSAxO1xuICBpZiAoY3VycmVudExldmVsSW5kZXggPT09IGxldmVscy5sZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IG5leHRMZXZlbCA9IGxldmVsc1tjdXJyZW50TGV2ZWxJbmRleCArIDFdO1xuICByZXR1cm4gbmV4dExldmVsLmlkO1xufTtcblxuZXhwb3J0IGNvbnN0IGxldmVsQ291bnQgPSBzdGF0ZSA9PiB7XG4gIGlmIChnZXRQcm9ncmVzc0xldmVsVHlwZShzdGF0ZSkgPT09IFByb2dyZXNzTGV2ZWxUeXBlLkxFVkVMKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYgKGdldFByb2dyZXNzTGV2ZWxUeXBlKHN0YXRlKSA9PT0gUHJvZ3Jlc3NMZXZlbFR5cGUuU0NSSVBUX0xFVkVMKSB7XG4gICAgcmV0dXJuIGdldEN1cnJlbnRMZXZlbHMoc3RhdGUpLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbmV4cG9ydCBjb25zdCBsZXNzb25FeHRyYXNVcmwgPSAoc3RhdGUsIGxlc3NvbklkKSA9PlxuICBzdGF0ZS5sZXNzb25FeHRyYXNFbmFibGVkXG4gICAgPyBzdGF0ZS5sZXNzb25zLmZpbmQobGVzc29uID0+IGxlc3Nvbi5pZCA9PT0gbGVzc29uSWQpXG4gICAgICAgIC5sZXNzb25fZXh0cmFzX2xldmVsX3VybFxuICAgIDogJyc7XG5cbmV4cG9ydCBjb25zdCBpc1BlcmZlY3QgPSAoc3RhdGUsIGxldmVsSWQpID0+XG4gICEhc3RhdGUubGV2ZWxSZXN1bHRzICYmXG4gIHN0YXRlLmxldmVsUmVzdWx0c1tsZXZlbElkXSA+PSBUZXN0UmVzdWx0cy5NSU5JTVVNX09QVElNQUxfUkVTVUxUO1xuXG4vKipcbiAqIEdyb3VwcyBsZXNzb25zIGFjY29yZGluZyB0byBMZXNzb25Hcm91cC5cbiAqIEByZXR1cm5zIHtPYmplY3RbXX1cbiAqIHtzdHJpbmd9IE9iamVjdC5uYW1lXG4gKiB7c3RyaW5nW119IE9iamVjdC5sZXNzb25OYW1lc1xuICoge09iamVjdFtdfSBPYmplY3QubGVzc29uTGV2ZWxzXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cGVkTGVzc29ucyA9IChzdGF0ZSwgaW5jbHVkZUJvbnVzTGV2ZWxzID0gZmFsc2UpID0+IHtcbiAgbGV0IGJ5R3JvdXAgPSB7fTtcblxuICBjb25zdCBhbGxMZXZlbHMgPSBsZXZlbHNCeUxlc3NvbihzdGF0ZSk7XG5cbiAgc3RhdGUubGVzc29uR3JvdXBzLmZvckVhY2gobGVzc29uR3JvdXAgPT4ge1xuICAgIGJ5R3JvdXBbbGVzc29uR3JvdXAuZGlzcGxheV9uYW1lXSA9IHtcbiAgICAgIGxlc3Nvbkdyb3VwOiB7XG4gICAgICAgIGlkOiBsZXNzb25Hcm91cC5pZCxcbiAgICAgICAgdXNlckZhY2luZzogbGVzc29uR3JvdXAudXNlcl9mYWNpbmcsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBsZXNzb25Hcm91cC5kaXNwbGF5X25hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBsZXNzb25Hcm91cC5kZXNjcmlwdGlvbixcbiAgICAgICAgYmlnUXVlc3Rpb25zOiBsZXNzb25Hcm91cC5iaWdfcXVlc3Rpb25zLFxuICAgICAgfSxcbiAgICAgIGxlc3NvbnM6IFtdLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtdLFxuICAgIH07XG4gIH0pO1xuXG4gIHN0YXRlLmxlc3NvbnMuZm9yRWFjaCgobGVzc29uLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGdyb3VwID0gbGVzc29uLmxlc3Nvbl9ncm91cF9kaXNwbGF5X25hbWU7XG4gICAgY29uc3QgbGVzc29uQXRJbmRleCA9IGxlc3NvbkZyb21MZXNzb25BdEluZGV4KHN0YXRlLCBpbmRleCk7XG4gICAgbGV0IGxlc3NvbkxldmVscyA9IGFsbExldmVsc1tpbmRleF07XG4gICAgaWYgKCFpbmNsdWRlQm9udXNMZXZlbHMpIHtcbiAgICAgIGxlc3NvbkxldmVscyA9IGxlc3NvbkxldmVscy5maWx0ZXIobGV2ZWwgPT4gIWxldmVsLmJvbnVzKTtcbiAgICB9XG5cbiAgICBpZiAoYnlHcm91cFtncm91cF0pIHtcbiAgICAgIGJ5R3JvdXBbZ3JvdXBdLmxlc3NvbnMucHVzaChsZXNzb25BdEluZGV4KTtcbiAgICAgIGJ5R3JvdXBbZ3JvdXBdLmxldmVsc0J5TGVzc29uLnB1c2gobGVzc29uTGV2ZWxzKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFBlZXIgcmV2aWV3cyBnZXQgdGhlaXIgb3duIGdyb3VwLCBidXQgdGhlc2UgbGV2ZWxzL2xlc3NvbiBhcmUgc3RvcmVkXG4gIC8vIHNlcGFyYXRlbHkgZnJvbSBvdXIgb3RoZXIgbGV2ZWxzL2xlc3NvbnMgaW4gcmVkdXggKHNpbmNlIHRoZXkncmUgc2xpZ2h0bHlcbiAgLy8gZGlmZmVyZW50KVxuICBpZiAoc3RhdGUucGVlclJldmlld0xlc3NvbkluZm8pIHtcbiAgICBieUdyb3VwW3N0YXRlLnBlZXJSZXZpZXdMZXNzb25JbmZvLmxlc3Nvbl9ncm91cF9kaXNwbGF5X25hbWVdID0ge1xuICAgICAgZ3JvdXA6IHN0YXRlLnBlZXJSZXZpZXdMZXNzb25JbmZvLmxlc3Nvbl9ncm91cF9kaXNwbGF5X25hbWUsXG4gICAgICBsZXNzb25Hcm91cDoge1xuICAgICAgICBpZDogbnVsbCwgLy9QZWVyIHJldmlld3MgZG8gbm90IGhhdmUgZGVzY3JpcHRpb25zIG9yIGJpZyBxdWVzdGlvbnMgc28gdGhleSB3b24ndCBuZWVkIGFuIGlkIHRvIHRyYWNrIGNsaWNrc1xuICAgICAgICBkaXNwbGF5TmFtZTogc3RhdGUucGVlclJldmlld0xlc3NvbkluZm8ubGVzc29uX2dyb3VwX2Rpc3BsYXlfbmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAgICAgIGJpZ1F1ZXN0aW9uczogbnVsbCxcbiAgICAgIH0sXG4gICAgICBsZXNzb25zOiBbcGVlclJldmlld0xlc3NvbihzdGF0ZSldLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtwZWVyUmV2aWV3TGV2ZWxzKHN0YXRlKV0sXG4gICAgfTtcbiAgfVxuXG4gIC8vIFdlIHdhbnQgdG8gcmV0dXJuIGFuIGFycmF5IG9mIGNhdGVnb3JpZXNcbiAgcmV0dXJuIF8udmFsdWVzKGJ5R3JvdXApO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIHNldCBvZiBsZXZlbHMsIGdyb3VwcyB0aGVtIGluIHNldHMgb2YgcHJvZ3Jlc3Npb25zLCB3aGVyZSBlYWNoXG4gKiBwcm9ncmVzc2lvbiBpcyBhIHNldCBvZiBhZGphY2VudCBsZXZlbHMgc2hhcmluZyB0aGUgc2FtZSBwcm9ncmVzc2lvbiBuYW1lXG4gKiBBbnkgZ2l2ZW4gbGV2ZWwncyBwcm9ncmVzc2lvbiBuYW1lIGlzIGRldGVybWluZWQgYnkgZmlyc3QgbG9va2luZyB0byBzZWUgaWZcbiAqIHRoZSBzZXJ2ZXIgcHJvdmlkZWQgdXMgb25lIGFzIGxldmVsLnByb2dyZXNzaW9uLCBvdGhlcndpc2Ugd2UgZmFsbCBiYWNrIHRvXG4gKiBqdXN0IGxldmVsLm5hbWVcbiAqIEBwYXJhbSB7TGV2ZWxbXX0gbGV2ZWxzXG4gKiBAcmV0dXJucyB7b2JqZWN0W119IEFuIGFycmF5IG9mIHByb2dyZXNzaW9ucywgd2hlcmUgZWFjaCBjb25zaXN0cyBvZiBhIG5hbWUsXG4gKiAgIHRoZSBwb3NpdGlvbiBvZiB0aGUgcHJvZ3Jlc3Npb24gaW4gdGhlIGlucHV0IGFycmF5LCBhbmQgdGhlIHNldCBvZiBsZXZlbHNcbiAqICAgaW4gdGhlIHByb2dyZXNzaW9uXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9ncmVzc2lvbnNGcm9tTGV2ZWxzID0gbGV2ZWxzID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3Npb25zID0gW107XG4gIGlmIChsZXZlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHByb2dyZXNzaW9ucztcbiAgfVxuICBsZXQgY3VycmVudFByb2dyZXNzaW9uID0ge1xuICAgIHN0YXJ0OiAwLFxuICAgIG5hbWU6IGxldmVsc1swXS5wcm9ncmVzc2lvbiB8fCBsZXZlbHNbMF0ubmFtZSxcbiAgICBkaXNwbGF5TmFtZTogbGV2ZWxzWzBdLnByb2dyZXNzaW9uRGlzcGxheU5hbWUgfHwgbGV2ZWxzWzBdLm5hbWUsXG4gICAgbGV2ZWxzOiBbbGV2ZWxzWzBdXSxcbiAgfTtcbiAgbGV2ZWxzLnNsaWNlKDEpLmZvckVhY2goKGxldmVsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHByb2dyZXNzaW9uTmFtZSA9IGxldmVsLnByb2dyZXNzaW9uIHx8IGxldmVsLm5hbWU7XG4gICAgaWYgKHByb2dyZXNzaW9uTmFtZSA9PT0gY3VycmVudFByb2dyZXNzaW9uLm5hbWUpIHtcbiAgICAgIGN1cnJlbnRQcm9ncmVzc2lvbi5sZXZlbHMucHVzaChsZXZlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzaW9ucy5wdXNoKGN1cnJlbnRQcm9ncmVzc2lvbik7XG4gICAgICBjdXJyZW50UHJvZ3Jlc3Npb24gPSB7XG4gICAgICAgIC8vICsgMSBiZWNhdXNlIHdlIHNsaWNlZCBvZmYgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgc3RhcnQ6IGluZGV4ICsgMSxcbiAgICAgICAgbmFtZTogbGV2ZWwucHJvZ3Jlc3Npb24gfHwgbGV2ZWwubmFtZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IGxldmVsLnByb2dyZXNzaW9uRGlzcGxheU5hbWUgfHwgbGV2ZWwubmFtZSxcbiAgICAgICAgbGV2ZWxzOiBbbGV2ZWxdLFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICBwcm9ncmVzc2lvbnMucHVzaChjdXJyZW50UHJvZ3Jlc3Npb24pO1xuICByZXR1cm4gcHJvZ3Jlc3Npb25zO1xufTtcblxuLy8gSGVscGVyc1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGV2ZWwgd2l0aCB0aGUgaGlnaGVzdCBwcm9ncmVzcywgb3IgdGhlIGZpcnN0IGxldmVsIGlmIG5vbmUgaGF2ZVxuICogYmVlbiBhdHRlbXB0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyW119IGxldmVsSWRzXG4gKiBAcGFyYW0ge09iamVjdC48bnVtYmVyLG51bWJlcj59IC0gTWFwcGluZyBmcm9tIGxldmVsIGlkIHRvIHByb2dyZXNzIHJlc3VsdFxuICovXG5mdW5jdGlvbiBiZXN0UmVzdWx0TGV2ZWxJZChsZXZlbElkcywgcHJvZ3Jlc3NEYXRhKSB7XG4gIC8vIFRoZSB1c3VhbCBjYXNlXG4gIGlmIChsZXZlbElkcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbGV2ZWxJZHNbMF07XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIGxldmVsIHdpdGggdGhlIGhpZ2hlc3QgcmVzdWx0XG4gIHZhciBhdHRlbXB0ZWRJZHMgPSBsZXZlbElkcy5maWx0ZXIoaWQgPT4gcHJvZ3Jlc3NEYXRhW2lkXSk7XG4gIGlmIChhdHRlbXB0ZWRJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gTm9uZSBvZiB0aGVtIGhhdmUgYmVlbiBhdHRlbXB0ZWQsIGp1c3QgcmV0dXJuIHRoZSBmaXJzdFxuICAgIHJldHVybiBsZXZlbElkc1swXTtcbiAgfVxuICB2YXIgYmVzdElkID0gYXR0ZW1wdGVkSWRzWzBdO1xuICB2YXIgYmVzdFJlc3VsdCA9IHByb2dyZXNzRGF0YVtiZXN0SWRdO1xuICBhdHRlbXB0ZWRJZHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gcHJvZ3Jlc3NEYXRhW2lkXTtcbiAgICBpZiAocmVzdWx0ID4gYmVzdFJlc3VsdCkge1xuICAgICAgYmVzdElkID0gaWQ7XG4gICAgICBiZXN0UmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBiZXN0SWQ7XG59XG5cbi8vIGV4cG9ydCBwcml2YXRlIGZ1bmN0aW9uKHMpIHRvIGV4cG9zZSB0byB1bml0IHRlc3RpbmdcbmV4cG9ydCBjb25zdCBfX3Rlc3Rvbmx5X18gPSBJTl9VTklUX1RFU1RcbiAgPyB7XG4gICAgICBiZXN0UmVzdWx0TGV2ZWxJZCxcbiAgICAgIHBlZXJSZXZpZXdMZXNzb24sXG4gICAgICBwZWVyUmV2aWV3TGV2ZWxzLFxuICAgICAgUEVFUl9SRVZJRVdfSUQsXG4gICAgfVxuICA6IHt9O1xuIiwiaW1wb3J0IHttYWtlRW51bX0gZnJvbSAnQGNkby9hcHBzL3V0aWxzJztcblxuY29uc3QgU0VUX1JFU1BPTlNJVkVfU0laRSA9ICdyZXNwb25zaXZlL1NFVF9SRVNQT05TSVZFX1NJWkUnO1xuZXhwb3J0IGNvbnN0IHNldFJlc3BvbnNpdmVTaXplID0gcmVzcG9uc2l2ZVNpemUgPT4gKHtcbiAgdHlwZTogU0VUX1JFU1BPTlNJVkVfU0laRSxcbiAgcmVzcG9uc2l2ZVNpemUsXG59KTtcblxuZXhwb3J0IGNvbnN0IFJlc3BvbnNpdmVTaXplID0gbWFrZUVudW0oJ2xnJywgJ21kJywgJ3NtJywgJ3hzJyk7XG5cbi8vIERlZmF1bHQgd2luZG93IHdpZHRocyB0aGF0IGFyZSB0aGUgc3RhcnRpbmcgcG9pbnRzIGZvciBlYWNoIHdpZHRoIGNhdGVnb3J5LlxuY29uc3QgQnJlYWtwb2ludHMgPSBbXG4gIHticmVha3BvaW50OiA5OTIsIHJlc3BvbnNpdmVTaXplOiBSZXNwb25zaXZlU2l6ZS5sZ30sXG4gIHticmVha3BvaW50OiA3MjAsIHJlc3BvbnNpdmVTaXplOiBSZXNwb25zaXZlU2l6ZS5tZH0sXG4gIHticmVha3BvaW50OiA2NTAsIHJlc3BvbnNpdmVTaXplOiBSZXNwb25zaXZlU2l6ZS5zbX0sXG4gIHticmVha3BvaW50OiAwLCByZXNwb25zaXZlU2l6ZTogUmVzcG9uc2l2ZVNpemUueHN9LFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc3BvbnNpdmVCcmVha3BvaW50KHdpZHRoKSB7XG4gIGNvbnN0IHJlc3BvbnNpdmVTaXplID0gQnJlYWtwb2ludHMuZmluZCgoe2JyZWFrcG9pbnR9KSA9PiB3aWR0aCA+IGJyZWFrcG9pbnQpO1xuICBpZiAocmVzcG9uc2l2ZVNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgTm8gcmVzcG9uc2l2ZSBzaXplIGZvdW5kIGZvciB3aWR0aCAke3dpZHRofSwgZGVmYXVsdGluZyB0byB4c2BcbiAgICApO1xuICAgIHJldHVybiBSZXNwb25zaXZlU2l6ZS54cztcbiAgfVxuICByZXR1cm4gcmVzcG9uc2l2ZVNpemUucmVzcG9uc2l2ZVNpemU7XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgcmVzcG9uc2l2ZVNpemU6IGdldFJlc3BvbnNpdmVCcmVha3BvaW50KHdpbmRvdy5pbm5lcldpZHRoKSxcbn07XG5cbi8qKlxuICogUmVkdWNlciBmb3IgcmVzcG9uc2l2ZSBzaXplcy4gT25seSByZXR1cm4gYSBuZXcgc3RhdGUgaWYgd2UndmUgYWN0dWFsbHlcbiAqIGNyb3NzZWQgaW50byBhIG5ldyBicmVha3BvaW50IHdpZHRoLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKFxuICAgIGFjdGlvbi50eXBlID09PSBTRVRfUkVTUE9OU0lWRV9TSVpFICYmXG4gICAgc3RhdGUucmVzcG9uc2l2ZVNpemUgIT09IGFjdGlvbi5yZXNwb25zaXZlU2l6ZVxuICApIHtcbiAgICByZXR1cm4gey4uLnN0YXRlLCByZXNwb25zaXZlU2l6ZTogYWN0aW9uLnJlc3BvbnNpdmVTaXplfTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG4iLCIvKiogQGZpbGUgZm9udC1hd2Vzb21lIGhlbHBlciBjb21wb25lbnQuICovXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogR2l2ZW4gYW4gaWNvbiBuYW1lLCByZW5kZXIgdGhlIGljb24gdXNpbmcgYW4gPGk+IHRhZyBpbiB0eXBpY2FsIGZvbnQtYXdlc29tZVxuICogZmFzaGlvbi4gIFJlcXVpcmVzIGZvbnQtYXdlc29tZSB0byBiZSBhdmFpbGFibGUgb24gdGhlIHBhZ2UuXG4gKiBTZWUgaHR0cDovL2ZvbnRhd2Vzb21lLmlvL2ljb25zLyB0byBsb29rIHVwIHN1cHBvcnRlZCBpY29uIG5hbWVzLlxuICpcbiAqIEBkZXByZWNhdGVkIHVzZSBEU0NPIEZvbnRBd2Vzb21lVjZJY29uIGluc3RlYWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9udEF3ZXNvbWUoe2ljb24sIGNsYXNzTmFtZSwgdGl0bGUsIC4uLnByb3BzfSkge1xuICBjb25zdCBuZXdQcm9wcyA9IF8uYXNzaWduKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogYGZhIGZhLSR7aWNvbn0gJHtjbGFzc05hbWUgPyBjbGFzc05hbWUgOiAnJ31gLFxuICB9KTtcbiAgcmV0dXJuIDxpIHsuLi5uZXdQcm9wc30gdGl0bGU9e3RpdGxlfSAvPjtcbn1cblxuRm9udEF3ZXNvbWUucHJvcFR5cGVzID0ge1xuICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8vIFRpdGxlIHNob3VsZCBiZSB1c2VkIGZvciBzZW1hbnRpYyBpY29ucy4gSWYgbm90IGdpdmVuLCB0aGUgc2NyZWVucmVhZGVyIHdpbGwgbm90IHJlYWQgdGhlIGljb25cbiAgLy8gU2VlIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2RvY3Mvd2ViL2RpZy1kZWVwZXIvYWNjZXNzaWJpbGl0eSNpY29ucy11c2VkLWFzLXNlbWFudGljLWVsZW1lbnRzXG59O1xuIiwiaW1wb3J0IFBhcnNlciBmcm9tICdAY29kZS1kb3Qtb3JnL3JlZGFjdGFibGUtbWFya2Rvd24nO1xuaW1wb3J0IHtcbiAgZGV0YWlscyxcbiAgY2xpY2thYmxlVGV4dCxcbiAgZXhwYW5kYWJsZUltYWdlcyxcbiAgdmlzdWFsQ29kZUJsb2NrLFxuICB4bWxBc1RvcExldmVsQmxvY2ssXG59IGZyb20gJ0Bjb2RlLWRvdC1vcmcvcmVtYXJrLXBsdWdpbnMnO1xuaW1wb3J0IGRlZmF1bHRTYW5pdGl6YXRpb25TY2hlbWEgZnJvbSAnaGFzdC11dGlsLXNhbml0aXplL2xpYi9naXRodWIuanNvbic7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWh5cGVSYXcgZnJvbSAncmVoeXBlLXJhdyc7XG5pbXBvcnQgcmVoeXBlUmVhY3QgZnJvbSAncmVoeXBlLXJlYWN0JztcbmltcG9ydCByZWh5cGVTYW5pdGl6ZSBmcm9tICdyZWh5cGUtc2FuaXRpemUnO1xuaW1wb3J0IHJlbWFya1JlaHlwZSBmcm9tICdyZW1hcmstcmVoeXBlJztcblxuaW1wb3J0IGV4dGVybmFsTGlua3MgZnJvbSAnLi9wbHVnaW5zL2V4dGVybmFsTGlua3MnO1xuXG4vKipcbiAqIEJhc2ljIGNvbXBvbmVudCBmb3IgcmVuZGVyaW5nIGEgbWFya2Rvd24gc3RyaW5nIGFzIEhUTUwsIHdpdGggc2FuaXRpemF0aW9uLlxuICogQ2FuIHNhZmVseSByZW5kZXIgbWFya2Rvd24gZXZlbiBmcm9tIHVudHJ1c3RlZCBzb3VyY2VzLCB3aXRob3V0IHBvdGVudGlhbGx5XG4gKiBleHBvc2luZyB1cyB0byBhbiBYU1MgaW5qZWN0aW9uLlxuICovXG5jbGFzcyBTYWZlTWFya2Rvd24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1hcmtkb3duOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3BlbkV4dGVybmFsTGlua3NJbk5ld1RhYjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBXZSBvbmx5IG9wZW4gZXh0ZXJuYWwgbGlua3MgaW4gYSBuZXcgdGFiIGlmIGl0J3MgZXhwbGljaXRseSBzcGVjaWZpZWRcbiAgICAvLyB0aGF0IHdlIGRvIHNvOyB0aGlzIGlzIGFic29sdXRlbHkgbm90IHNvbWV0aGluZyB3ZSB3YW50IHRvIGRvIGFzIGFcbiAgICAvLyBnZW5lcmFsIHByYWN0aWNlLCBidXQgdW5mb3J0dW5hdGVseSB0aGVyZSBhcmUgc29tZSBzaXR1YXRpb25zIGluIHdoaWNoXG4gICAgLy8gaXQgaXMgY3VycmVudGx5IGEgcmVxdWlyZW1lbnQuXG4gICAgY29uc3QgcGFyc2VyID0gdGhpcy5wcm9wcy5vcGVuRXh0ZXJuYWxMaW5rc0luTmV3VGFiXG4gICAgICA/IG1hcmtkb3duVG9SZWFjdEV4dGVybmFsTGlua3NcbiAgICAgIDogbWFya2Rvd25Ub1JlYWN0O1xuXG4gICAgY29uc3QgcmVuZGVyZWQgPSBwYXJzZXIucHJvY2Vzc1N5bmModGhpcy5wcm9wcy5tYXJrZG93bikuY29udGVudHM7XG5cbiAgICBjb25zdCBtYXJrZG93blByb3BzID0ge307XG4gICAgaWYgKHRoaXMucHJvcHMuY2xhc3NOYW1lKSB7XG4gICAgICBtYXJrZG93blByb3BzLmNsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuICAgIH1cbiAgICAvLyByZWh5cGUtcmVhY3Qgd2lsbCBvbmx5IHdyYXAgdGhlIGNvbXBpbGVkIG1hcmtkb3duIGluIGEgPGRpdj4gdGFnXG4gICAgLy8gaWYgaXQgbmVlZHMgdG8gKGllLCBpZiB0aGVyZSB3b3VsZCBvdGhlcndpc2UgYmUgbXVsdGlwbGUgZWxlbWVudHNcbiAgICAvLyByZXR1cm5lZCkgb3Igd2UncmUgYXNzaWduaW5nIHByb3BzLiBXZSBwcmVmZXIgY29uc2lzdGVuY3kgb3ZlciBmbGV4aWJpbGl0eSxcbiAgICAvLyBzbyBoZXJlIHdlIHdyYXAgdGhlIHJlc3VsdCBpbiBhIGRpdiBpZiBpdCB3YXNuJ3QgYWxyZWFkeVxuICAgIGlmIChcbiAgICAgIHJlbmRlcmVkICYmXG4gICAgICByZW5kZXJlZC50eXBlID09PSAnZGl2JyAmJlxuICAgICAgIU9iamVjdC5rZXlzKG1hcmtkb3duUHJvcHMpLmxlbmd0aFxuICAgICkge1xuICAgICAgcmV0dXJuIHJlbmRlcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gPGRpdiB7Li4ubWFya2Rvd25Qcm9wc30+e3JlbmRlcmVkfTwvZGl2PjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY3JlYXRlIGN1c3RvbSBzYW5pdGl6YXRpb24gc2NoZW1hIGFzIHBlclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N5bnRheC10cmVlL2hhc3QtdXRpbC1zYW5pdGl6ZSNzY2hlbWFcbi8vIHRvIHN1cHBvcnQgb3VyIGN1c3RvbSBzeW50YXhlc1xuY29uc3Qgc2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNhbml0aXphdGlvblNjaGVtYSk7XG5cbi8vIFdlIHVzZSBhIF9sb3RfIG9mIGltYWdlIGZvcm1hdHRpbmcgc3R1ZmYgaW4gb3VyXG4vLyBpbnN0cnVjdGlvbnMsIHBhcnRpY3VsYXJseSBpbiBDU1BcbnNjaGVtYS5hdHRyaWJ1dGVzLmltZy5wdXNoKCdoZWlnaHQnLCAnd2lkdGgnKTtcblxuLy8gQWRkIHN1cHBvcnQgZm9yIGV4cGFuZGFibGVJbWFnZXNcbnNjaGVtYS50YWdOYW1lcy5wdXNoKCdzcGFuJyk7XG5zY2hlbWEuYXR0cmlidXRlcy5zcGFuID0gWydkYXRhVXJsJywgJ2NsYXNzTmFtZSddO1xuXG4vLyBBZGQgc3VwcG9ydCBmb3IgaW5saW5lIHN0eWxlcyAoZ3Jvc3MpXG4vLyBUT0RPIHJlcGxhY2UgYWxsIGlubGluZSBzdHlsZXMgaW4gb3VyIGN1cnJpY3VsdW0gY29udGVudCB3aXRoXG4vLyBzZW1hbnRpY2FsbHktc2lnbmlmaWNhbnQgY29udGVudFxuc2NoZW1hLmF0dHJpYnV0ZXNbJyonXS5wdXNoKCdzdHlsZScsICdjbGFzc05hbWUnKTtcblxuLy8gQ2xpY2thYmxlVGV4dCB1c2VzIGRhdGEtaWQgb24gYSBib2xkIHRhZy5cbnNjaGVtYS5hdHRyaWJ1dGVzWydiJ10gPSBbJ2RhdGFJZCddO1xuXG4vLyBBZGQgc3VwcG9ydCBmb3IgQmxvY2tseSBYTUxcbnNjaGVtYS5jbG9iYmVyID0gW107XG5jb25zdCBibG9ja2x5VGFncyA9IFtcbiAgJ2Jsb2NrJyxcbiAgJ2Z1bmN0aW9uYWxfaW5wdXQnLFxuICAnbXV0YXRpb24nLFxuICAnbmV4dCcsXG4gICdzdGF0ZW1lbnQnLFxuICAndGl0bGUnLFxuICAnZmllbGQnLFxuICAndmFsdWUnLFxuICAneG1sJyxcbl07XG5zY2hlbWEudGFnTmFtZXMgPSBzY2hlbWEudGFnTmFtZXMuY29uY2F0KGJsb2NrbHlUYWdzKTtcbmxldCBibG9ja2x5Q29tcG9uZW50V3JhcHBlcnMgPSB7fTtcbmJsb2NrbHlUYWdzLmZvckVhY2godGFnID0+IHtcbiAgc2NoZW1hLmF0dHJpYnV0ZXNbdGFnXSA9IFsnYmxvY2tfdGV4dCcsICdpZCcsICdpbmxpbmUnLCAnbmFtZScsICd0eXBlJ107XG5cbiAgLy8gQ3JlYXRlIGEgUmVhY3QgY29tcG9uZW50IHRvIHdyYXAgZWFjaCBCbG9ja2x5IHRhZy4gU2luY2UgdGhlc2UgZWxlbWVudHMgdWx0aW1hdGVseVxuICAvLyByZW5kZXIgYXMgUmVhY3QgY29tcG9uZW50cywgY3JlYXRpbmcgYSB3cmFwcGVyIG1ha2VzIHRoZW0gdmFsaWQgKHdoZXJlYXMgPHhtbD5cbiAgLy8gaXMgbm90IGEgdmFsaWQgUmVhY3QgdGFnKS5cbiAgYmxvY2tseUNvbXBvbmVudFdyYXBwZXJzW3RhZ10gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBjb25zdCBCbG9ja2x5RWxlbWVudCA9IHRhZztcbiAgICAvLyBUaGUgXCJpc1wiIGF0dHJpYnV0ZSBwcmV2ZW50cyBSZWFjdCBmcm9tIHdhcm5pbmcgYWJvdXQgdW5yZWNvZ25pemVkIHRhZ3M6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMTE4NCNpc3N1ZWNvbW1lbnQtMzM1OTQyNDM5XG4gICAgcmV0dXJuIDxCbG9ja2x5RWxlbWVudCBpcz17dGFnfSB7Li4ucHJvcHN9IC8+O1xuICB9O1xufSk7XG5cbmNvbnN0IG1hcmtkb3duVG9SZWFjdCA9IFBhcnNlci5jcmVhdGUoKVxuICAuZ2V0UGFyc2VyKClcbiAgLy8gaW5jbHVkZSBjdXN0b20gcGx1Z2luc1xuICAudXNlKFtcbiAgICBjbGlja2FibGVUZXh0LFxuICAgIGV4cGFuZGFibGVJbWFnZXMsXG4gICAgdmlzdWFsQ29kZUJsb2NrLFxuICAgIHhtbEFzVG9wTGV2ZWxCbG9jayxcbiAgICBkZXRhaWxzLFxuICBdKVxuICAvLyBjb252ZXJ0IG1hcmtkb3duIHRvIGFuIEhUTUwgQWJzdHJhY3QgU3ludGF4IFRyZWUgKEhBU1QpXG4gIC51c2UocmVtYXJrUmVoeXBlLCB7XG4gICAgLy8gaW5jbHVkZSBhbnkgcmF3IEhUTUwgaW4gdGhlIG1hcmtkb3duIGFzIHJhdyBIVE1MIG5vZGVzIGluIHRoZSBIQVNUXG4gICAgYWxsb3dEYW5nZXJvdXNIVE1MOiB0cnVlLFxuICB9KVxuICAvLyBwYXJzZSB0aGUgcmF3IEhUTUwgbm9kZXMgaW4gdGhlIEhBU1QgdG8gYWN0dWFsIEhBU1Qgbm9kZXNcbiAgLnVzZShyZWh5cGVSYXcpXG4gIC8vIHNhbml0aXplIHRoZSBIQVNUXG4gIC51c2UocmVoeXBlU2FuaXRpemUsIHNjaGVtYSlcbiAgLy8gY29udmVydCB0aGUgSEFTVCB0byBSZWFjdFxuICAudXNlKHJlaHlwZVJlYWN0LCB7XG4gICAgY3JlYXRlRWxlbWVudDogUmVhY3QuY3JlYXRlRWxlbWVudCxcbiAgICAvLyBVc2UgUmVhY3QgY29tcG9uZW50IHdyYXBwZXJzIGZvciBCbG9ja2x5IFhNTCBlbGVtZW50cyB0byBwcmV2ZW50XG4gICAgLy8gUmVhY3QgZnJvbSB3YXJuaW5nIHVzIGFib3V0IGludmFsaWQgY29tcG9uZW50cy5cbiAgICBjb21wb25lbnRzOiBibG9ja2x5Q29tcG9uZW50V3JhcHBlcnMsXG4gIH0pO1xuXG5jb25zdCBtYXJrZG93blRvUmVhY3RFeHRlcm5hbExpbmtzID0gbWFya2Rvd25Ub1JlYWN0KCkudXNlKGV4dGVybmFsTGlua3MsIHtcbiAgbGlua3M6ICdhbGwnLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFNhZmVNYXJrZG93bjtcbiIsIi8qKlxuICogT3BlbiBleHRlcm5hbCBsaW5rcyBpbiBhIG5ldyB0YWIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVybmFsTGlua3Mob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IFBhcnNlciA9IHRoaXMuUGFyc2VyO1xuICBjb25zdCB0b2tlbml6ZXJzID0gUGFyc2VyLnByb3RvdHlwZS5pbmxpbmVUb2tlbml6ZXJzO1xuICBjb25zdCBvcmlnaW5hbCA9IHRva2VuaXplcnMubGluaztcbiAgY29uc3QgYWxsID0gb3B0aW9ucy5saW5rcyA9PT0gJ2FsbCc7XG5cbiAgdG9rZW5pemVycy5saW5rID0gZnVuY3Rpb24gKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICAgIGNvbnN0IGxpbmsgPSBvcmlnaW5hbC5jYWxsKHRoaXMsIGVhdCwgdmFsdWUsIHNpbGVudCk7XG4gICAgaWYgKGxpbmsgJiYgbGluay50eXBlID09PSAnbGluaycgJiYgKGFsbCB8fCBpc0V4dGVybmFsTGluayhsaW5rLnVybCkpKSB7XG4gICAgICBsaW5rLmRhdGEgPSBsaW5rLmRhdGEgfHwge307XG4gICAgICBsaW5rLmRhdGEuaFByb3BlcnRpZXMgPSBsaW5rLmRhdGEuaFByb3BlcnRpZXMgfHwge307XG5cbiAgICAgIGNvbnN0IHByb3BzID0gbGluay5kYXRhLmhQcm9wZXJ0aWVzO1xuICAgICAgcHJvcHMudGFyZ2V0ID0gcHJvcHMudGFyZ2V0IHx8ICdfYmxhbmsnO1xuICAgICAgcHJvcHMucmVsID0gJ25vcmVmZXJyZXIgbm9vcGVuZXInO1xuICAgIH1cblxuICAgIHJldHVybiBsaW5rO1xuICB9O1xuICB0b2tlbml6ZXJzLmxpbmsubG9jYXRvciA9IG9yaWdpbmFsLmxvY2F0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V4dGVybmFsTGluayh1cmwpIHtcbiAgcmV0dXJuICEvaHR0cHM/OlxcL1xcLyhbXi5dK1xcLikqY29kZS5vcmcoOlswLTldKyk/XFwvLy50ZXN0KGZ1bGx5UXVhbGlmaWVkKHVybCkpO1xufVxuXG5sZXQgYTtcbmZ1bmN0aW9uIGZ1bGx5UXVhbGlmaWVkKHBhdGgpIHtcbiAgYSA9IGEgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBhLmhyZWYgPSBwYXRoO1xuICByZXR1cm4gYS5ocmVmO1xufVxuIiwiLyoqXG4gKiBBbiBvcmRlcmVkIHNldCBvZiBwcm9ncmVzcyBidWJibGVzLlxuICovXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJhZGl1bSBmcm9tICdyYWRpdW0nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuXG5pbXBvcnQgUHJvZ3Jlc3NCdWJibGUgZnJvbSAnLi9Qcm9ncmVzc0J1YmJsZSc7XG5pbXBvcnQge0RPVF9TSVpFLCBESUFNT05EX0RPVF9TSVpFfSBmcm9tICcuL3Byb2dyZXNzU3R5bGVzJztcbmltcG9ydCB7bGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlfSBmcm9tICcuL3Byb2dyZXNzVHlwZXMnO1xuXG4vLyBEZXByZWNhdGVkIGluIGZhdm9yIG9mIFByb2dyZXNzVGFibGVEZXRhaWxDZWxsXG4vLyBjb21wb25lbnQgd2lsbCBiZSByZW1vdmVkIGFzIHBhcnQgb2YgaHR0cHM6Ly9jb2RlZG90b3JnLmF0bGFzc2lhbi5uZXQvYnJvd3NlL0xQLTE2MDZcbmNsYXNzIFByb2dyZXNzQnViYmxlU2V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsZXZlbHM6IFByb3BUeXBlcy5hcnJheU9mKGxldmVsV2l0aFByb2dyZXNzVHlwZSkuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZWxlY3RlZFNlY3Rpb25JZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzZWxlY3RlZFN0dWRlbnRJZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICBdKSxcbiAgICBoaWRlVG9vbFRpcHM6IFByb3BUeXBlcy5ib29sLFxuICAgIGxlc3NvbkV4dHJhc0VuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dTdWJsZXZlbHM6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uQnViYmxlQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxlc3Nvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLy8gUmVkdXhcbiAgICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgcmVuZGVyQnViYmxlID0gKGxldmVsLCBpbmRleCwgaXNTdWJsZXZlbCkgPT4ge1xuICAgIGNvbnN0IHtsZXZlbHMsIHNlbGVjdGVkU2VjdGlvbklkLCBzZWxlY3RlZFN0dWRlbnRJZCwgaXNSdGx9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIEFkanVzdCBiYWNrZ3JvdW5kIHN0eWxlcyBpZiBsb2NhbGUgaXMgUlRMXG4gICAgY29uc3QgYmFja2dyb3VuZEZpcnN0U3R5bGUgPSBpc1J0bFxuICAgICAgPyBzdHlsZXMuYmFja2dyb3VuZExhc3RcbiAgICAgIDogc3R5bGVzLmJhY2tncm91bmRGaXJzdDtcbiAgICBjb25zdCBiYWNrZ3JvdW5kTGFzdFN0eWxlID0gaXNSdGxcbiAgICAgID8gc3R5bGVzLmJhY2tncm91bmRGaXJzdFxuICAgICAgOiBzdHlsZXMuYmFja2dyb3VuZExhc3Q7XG5cbiAgICBjb25zdCBiYWNrZ3JvdW5kU3R5bGVQcm9wID0ge1xuICAgICAgLi4uc3R5bGVzLmJhY2tncm91bmQsXG4gICAgICAuLi4obGV2ZWwuaXNDb25jZXB0TGV2ZWwgJiYgc3R5bGVzLmJhY2tncm91bmREaWFtb25kKSxcbiAgICAgIC4uLihpc1N1YmxldmVsICYmIHN0eWxlcy5iYWNrZ3JvdW5kU3VibGV2ZWwpLFxuICAgICAgLi4uKGxldmVsLmlzVW5wbHVnZ2VkICYmIHN0eWxlcy5iYWNrZ3JvdW5kUGlsbCksXG4gICAgICAuLi4oIWlzU3VibGV2ZWwgJiYgaW5kZXggPT09IDAgJiYgYmFja2dyb3VuZEZpcnN0U3R5bGUpLFxuICAgICAgLi4uKCFpc1N1YmxldmVsICYmXG4gICAgICAgICFsZXZlbC5zdWJsZXZlbHMgJiZcbiAgICAgICAgaW5kZXggPT09IGxldmVscy5sZW5ndGggLSAxICYmXG4gICAgICAgIGJhY2tncm91bmRMYXN0U3R5bGUpLFxuICAgIH07XG5cbiAgICBjb25zdCBjb250YWluZXJTdHlsZVByb3AgPSB7XG4gICAgICAuLi5zdHlsZXMuY29udGFpbmVyLFxuICAgICAgLi4uKGxldmVsLmlzVW5wbHVnZ2VkICYmIHN0eWxlcy5waWxsQ29udGFpbmVyKSxcbiAgICAgIC4uLihsZXZlbC5pc0NvbmNlcHRMZXZlbCAmJiBzdHlsZXMuZGlhbW9uZENvbnRhaW5lciksXG4gICAgICAuLi4oaXNTdWJsZXZlbCAmJiBzdHlsZXMuY29udGFpbmVyU3VibGV2ZWwpLFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLndpdGhCYWNrZ3JvdW5kfSBrZXk9e2luZGV4fT5cbiAgICAgICAgPGRpdiBzdHlsZT17YmFja2dyb3VuZFN0eWxlUHJvcH0gLz5cbiAgICAgICAgPGRpdiBzdHlsZT17Y29udGFpbmVyU3R5bGVQcm9wfT5cbiAgICAgICAgICA8UHJvZ3Jlc3NCdWJibGVcbiAgICAgICAgICAgIGxldmVsPXtsZXZlbH1cbiAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfVxuICAgICAgICAgICAgc21hbGxCdWJibGU9e2lzU3VibGV2ZWx9XG4gICAgICAgICAgICBzZWxlY3RlZFNlY3Rpb25JZD17c2VsZWN0ZWRTZWN0aW9uSWR9XG4gICAgICAgICAgICBzZWxlY3RlZFN0dWRlbnRJZD17c2VsZWN0ZWRTdHVkZW50SWR9XG4gICAgICAgICAgICBoaWRlVG9vbFRpcHM9e3RoaXMucHJvcHMuaGlkZVRvb2xUaXBzfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkJ1YmJsZUNsaWNrfVxuICAgICAgICAgICAgbGVzc29uTmFtZT17dGhpcy5wcm9wcy5sZXNzb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xldmVscywgc3R5bGUsIHNob3dTdWJsZXZlbHN9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17ey4uLnN0eWxlcy5tYWluLCAuLi5zdHlsZX19PlxuICAgICAgICB7bGV2ZWxzLm1hcCgobGV2ZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJCdWJibGUobGV2ZWwsIGluZGV4LCBmYWxzZSl9XG4gICAgICAgICAgICAgIHtzaG93U3VibGV2ZWxzICYmXG4gICAgICAgICAgICAgICAgbGV2ZWwuc3VibGV2ZWxzICYmXG4gICAgICAgICAgICAgICAgbGV2ZWwuc3VibGV2ZWxzLm1hcCgoc3VibGV2ZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJCdWJibGUoc3VibGV2ZWwsIGluZGV4LCB0cnVlKX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBtYWluOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIH0sXG4gIHdpdGhCYWNrZ3JvdW5kOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIH0sXG4gIGJhY2tncm91bmQ6IHtcbiAgICBoZWlnaHQ6IDEwLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IubGlnaHRlcl9ncmF5LFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgLy8gZG90IHNpemUsIHBsdXMgYm9yZGVycywgcGx1cyBtYXJnaW4sIG1pbnVzIG91ciBoZWlnaHQgb2YgXCJiYWNrZ3JvdW5kXCJcbiAgICB0b3A6IChET1RfU0laRSArIDQgKyA2IC0gMTApIC8gMixcbiAgfSxcbiAgYmFja2dyb3VuZERpYW1vbmQ6IHtcbiAgICB0b3A6IChESUFNT05EX0RPVF9TSVpFICsgNCArIDEyIC0gMTApIC8gMixcbiAgfSxcbiAgYmFja2dyb3VuZFBpbGw6IHtcbiAgICAvLyBwaWxsIGhhcyBoZWlnaHQgb2YgMTgsIGJvcmRlciBvZiAyLCBwYWRkaW5nIG9mIDYsIG1hcmdpbiBvZiAzXG4gICAgdG9wOiAoMTggKyA0ICsgMTIgKyA2IC0gMTApIC8gMixcbiAgfSxcbiAgYmFja2dyb3VuZFN1YmxldmVsOiB7XG4gICAgdG9wOiA5LFxuICB9LFxuICBiYWNrZ3JvdW5kRmlyc3Q6IHtcbiAgICBsZWZ0OiAxNSxcbiAgfSxcbiAgYmFja2dyb3VuZExhc3Q6IHtcbiAgICByaWdodDogMTUsXG4gIH0sXG4gIGNvbnRhaW5lcjoge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB9LFxuICBjb250YWluZXJTdWJsZXZlbDoge1xuICAgIHRvcDogNSxcbiAgfSxcbiAgZGlhbW9uZENvbnRhaW5lcjoge1xuICAgIC8vIEhlaWdodCBuZWVkZWQgb25seSBieSBJRSB0byBnZXQgZGlhbW9uZHMgdG8gbGluZSB1cCBwcm9wZXJseVxuICAgIGhlaWdodDogMzYsXG4gIH0sXG4gIHBpbGxDb250YWluZXI6IHtcbiAgICBtYXJnaW5SaWdodDogMixcbiAgICAvLyBIZWlnaHQgbmVlZGVkIG9ubHkgYnkgSUUgdG8gZ2V0IHBpbGwgdG8gbGluZSB1cCBwcm9wZXJseVxuICAgIGhlaWdodDogMzcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVW5jb25uZWN0ZWRQcm9ncmVzc0J1YmJsZVNldCA9IFByb2dyZXNzQnViYmxlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHN0YXRlID0+ICh7XG4gIGlzUnRsOiBzdGF0ZS5pc1J0bCxcbn0pKShSYWRpdW0oUHJvZ3Jlc3NCdWJibGVTZXQpKTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge3Byb2dyZXNzaW9uc0Zyb21MZXZlbHN9IGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby9wcm9ncmVzc1JlZHV4U2VsZWN0b3JzJztcbmltcG9ydCBmb250Q29uc3RhbnRzIGZyb20gJ0BjZG8vYXBwcy9mb250Q29uc3RhbnRzJztcbmltcG9ydCBTYWZlTWFya2Rvd24gZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9TYWZlTWFya2Rvd24nO1xuaW1wb3J0IGkxOG4gZnJvbSAnQGNkby9sb2NhbGUnO1xuXG5pbXBvcnQgUHJvZ3Jlc3NCdWJibGVTZXQgZnJvbSAnLi9Qcm9ncmVzc0J1YmJsZVNldCc7XG5pbXBvcnQgUHJvZ3Jlc3NMZXZlbFNldCBmcm9tICcuL1Byb2dyZXNzTGV2ZWxTZXQnO1xuaW1wb3J0IHtsZXZlbFdpdGhQcm9ncmVzc1R5cGV9IGZyb20gJy4vcHJvZ3Jlc3NUeXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzTGVzc29uQ29udGVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGV2ZWxzOiBQcm9wVHlwZXMuYXJyYXlPZihsZXZlbFdpdGhQcm9ncmVzc1R5cGUpLmlzUmVxdWlyZWQsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWRTZWN0aW9uSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbGVzc29uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2Rlc2NyaXB0aW9uLCBsZXZlbHMsIGRpc2FibGVkLCBzZWxlY3RlZFNlY3Rpb25JZCwgbGVzc29uTmFtZX0gPVxuICAgICAgdGhpcy5wcm9wcztcbiAgICBjb25zdCBwcm9ncmVzc2lvbnMgPSBwcm9ncmVzc2lvbnNGcm9tTGV2ZWxzKGxldmVscyk7XG5cbiAgICBsZXQgYnViYmxlcztcbiAgICBpZiAocHJvZ3Jlc3Npb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYnViYmxlcyA9IChcbiAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy5ub0xldmVsc1dhcm5pbmd9PlxuICAgICAgICAgIHtpMThuLmxlc3NvbkNvbnRhaW5zTm9MZXZlbHMoKX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHByb2dyZXNzaW9ucy5sZW5ndGggPT09IDEgJiYgIXByb2dyZXNzaW9uc1swXS5uYW1lKSB7XG4gICAgICBidWJibGVzID0gKFxuICAgICAgICA8UHJvZ3Jlc3NCdWJibGVTZXRcbiAgICAgICAgICBsZXZlbHM9e3Byb2dyZXNzaW9uc1swXS5sZXZlbHN9XG4gICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgIHNlbGVjdGVkU2VjdGlvbklkPXtzZWxlY3RlZFNlY3Rpb25JZH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1YmJsZXMgPSBwcm9ncmVzc2lvbnMubWFwKChwcm9ncmVzc2lvbiwgaW5kZXgpID0+IChcbiAgICAgICAgPFByb2dyZXNzTGV2ZWxTZXRcbiAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgIG5hbWU9e3Byb2dyZXNzaW9uLmRpc3BsYXlOYW1lfVxuICAgICAgICAgIGxlc3Nvbk5hbWU9e2xlc3Nvbk5hbWV9XG4gICAgICAgICAgbGV2ZWxzPXtwcm9ncmVzc2lvbi5sZXZlbHN9XG4gICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgIHNlbGVjdGVkU2VjdGlvbklkPXtzZWxlY3RlZFNlY3Rpb25JZH1cbiAgICAgICAgLz5cbiAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7ZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5zdW1tYXJ5fT5cbiAgICAgICAgICAgIDxTYWZlTWFya2Rvd24gbWFya2Rvd249e2Rlc2NyaXB0aW9ufSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8ZGl2PiB7YnViYmxlc30gPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc3VtbWFyeToge1xuICAgIG1hcmdpblRvcDogMjAsXG4gICAgbWFyZ2luQm90dG9tOiAzMCxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgLi4uZm9udENvbnN0YW50c1snbWFpbi1mb250LXJlZ3VsYXInXSxcbiAgfSxcbiAgbm9MZXZlbHNXYXJuaW5nOiB7XG4gICAgZm9udFNpemU6IDEzLFxuICB9LFxufTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCBmb250Q29uc3RhbnRzIGZyb20gJ0BjZG8vYXBwcy9mb250Q29uc3RhbnRzJztcbmltcG9ydCBjb2xvciBmcm9tICdAY2RvL2FwcHMvdXRpbC9jb2xvcic7XG5pbXBvcnQgaTE4biBmcm9tICdAY2RvL2xvY2FsZSc7XG5cbmltcG9ydCBQcm9ncmVzc0J1YmJsZVNldCBmcm9tICcuL1Byb2dyZXNzQnViYmxlU2V0JztcbmltcG9ydCB7Z2V0SWNvbkZvckxldmVsfSBmcm9tICcuL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQgUHJvZ3Jlc3NQaWxsIGZyb20gJy4vUHJvZ3Jlc3NQaWxsJztcbmltcG9ydCB7bGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlfSBmcm9tICcuL3Byb2dyZXNzVHlwZXMnO1xuXG4vKipcbiAqIEEgc2V0IG9mIG9uZSBvciBtb3JlIGxldmVscyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBzYW1lIHByb2dyZXNzaW9uXG4gKi9cbmNsYXNzIFByb2dyZXNzTGV2ZWxTZXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGVzc29uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsZXZlbHM6IFByb3BUeXBlcy5hcnJheU9mKGxldmVsV2l0aFByb2dyZXNzVHlwZSkuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzZWxlY3RlZFNlY3Rpb25JZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkJ1YmJsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvLyBSZWR1eFxuICAgIGlzUnRsOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSxcbiAgICAgIGxldmVscyxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgc2VsZWN0ZWRTZWN0aW9uSWQsXG4gICAgICBvbkJ1YmJsZUNsaWNrLFxuICAgICAgaXNSdGwsXG4gICAgICBsZXNzb25OYW1lLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgbXVsdGlMZXZlbFN0ZXAgPSBsZXZlbHMubGVuZ3RoID4gMTtcbiAgICBjb25zdCB1cmwgPSBtdWx0aUxldmVsU3RlcCB8fCBvbkJ1YmJsZUNsaWNrID8gdW5kZWZpbmVkIDogbGV2ZWxzWzBdLnVybDtcbiAgICBjb25zdCBvbkNsaWNrID0gbXVsdGlMZXZlbFN0ZXAgPyB1bmRlZmluZWQgOiAoKSA9PiBvbkJ1YmJsZUNsaWNrKGxldmVsc1swXSk7XG5cbiAgICAvLyBBZGp1c3QgY29sdW1uIHN0eWxlcyBpZiBsb2NhbGUgaXMgUlRMXG4gICAgY29uc3QgY29sMlN0eWxlID0gaXNSdGwgPyBzdHlsZXMuY29sMlJUTCA6IHN0eWxlcy5jb2wyO1xuXG4gICAgbGV0IHBpbGxUZXh0LCBpY29uO1xuICAgIGxldCBwcm9ncmVzc1N0eWxlID0gZmFsc2U7XG4gICAgaWYgKGxldmVsc1swXS5pc1VucGx1Z2dlZCB8fCBsZXZlbHNbbGV2ZWxzLmxlbmd0aCAtIDFdLmlzVW5wbHVnZ2VkKSB7XG4gICAgICAvLyBXZSBleHBsaWNpdGx5IGRvbid0IHdhbnQgYW55IHRleHQgaW4gdGhpcyBjYXNlXG4gICAgICBpZiAobXVsdGlMZXZlbFN0ZXApIHtcbiAgICAgICAgcGlsbFRleHQgPSAnJztcbiAgICAgICAgaWNvbiA9IGdldEljb25Gb3JMZXZlbChsZXZlbHNbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGlsbFRleHQgPSBpMThuLnVucGx1Z2dlZEFjdGl2aXR5KCk7XG4gICAgICAgIHByb2dyZXNzU3R5bGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwaWxsVGV4dCA9IGxldmVsc1swXS5sZXZlbE51bWJlci50b1N0cmluZygpO1xuICAgICAgaWNvbiA9IGdldEljb25Gb3JMZXZlbChsZXZlbHNbMF0pO1xuICAgICAgaWYgKG11bHRpTGV2ZWxTdGVwKSB7XG4gICAgICAgIHBpbGxUZXh0ICs9IGAtJHtsZXZlbHNbbGV2ZWxzLmxlbmd0aCAtIDFdLmxldmVsTnVtYmVyfWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZSBzdHlsZT17c3R5bGVzLnRhYmxlfT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17c3R5bGVzLmNvbDF9PlxuICAgICAgICAgICAgICA8UHJvZ3Jlc3NQaWxsXG4gICAgICAgICAgICAgICAgbGV2ZWxzPXtsZXZlbHN9XG4gICAgICAgICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICAgICAgICB0ZXh0PXtwaWxsVGV4dH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTZWN0aW9uSWQ9e3NlbGVjdGVkU2VjdGlvbklkfVxuICAgICAgICAgICAgICAgIHByb2dyZXNzU3R5bGU9e3Byb2dyZXNzU3R5bGV9XG4gICAgICAgICAgICAgICAgb25TaW5nbGVMZXZlbENsaWNrPXtvbkJ1YmJsZUNsaWNrfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17Y29sMlN0eWxlfT5cbiAgICAgICAgICAgICAgPGEgaHJlZj17dXJsfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7Li4uc3R5bGVzLm5hbWVUZXh0LCAuLi5zdHlsZXMudGV4dH19PntuYW1lfTwvZGl2PlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAge211bHRpTGV2ZWxTdGVwICYmIChcbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5lc0FuZERvdH0+XG4gICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudmVydGljYWxMaW5lfSAvPlxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmhvcml6b250YWxMaW5lfSAvPlxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmRvdH0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkIHN0eWxlPXtzdHlsZXMuY29sMn0+XG4gICAgICAgICAgICAgICAgPFByb2dyZXNzQnViYmxlU2V0XG4gICAgICAgICAgICAgICAgICBsZXZlbHM9e2xldmVsc31cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2VjdGlvbklkPXtzZWxlY3RlZFNlY3Rpb25JZH1cbiAgICAgICAgICAgICAgICAgIG9uQnViYmxlQ2xpY2s9e29uQnViYmxlQ2xpY2t9XG4gICAgICAgICAgICAgICAgICBsZXNzb25OYW1lPXtsZXNzb25OYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICB0YWJsZToge1xuICAgIG1hcmdpblRvcDogMTIsXG4gIH0sXG4gIG5hbWVUZXh0OiB7XG4gICAgY29sb3I6IGNvbG9yLmNoYXJjb2FsLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgLi4uZm9udENvbnN0YW50c1snbWFpbi1mb250LXNlbWktYm9sZCddLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAtMC4xMixcbiAgfSxcbiAgY29sMjoge1xuICAgIHBhZGRpbmdMZWZ0OiAyMCxcbiAgfSxcbiAgY29sMlJUTDoge1xuICAgIHBhZGRpbmdSaWdodDogMjAsXG4gIH0sXG4gIGxpbmVzQW5kRG90OiB7XG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgbWFyZ2luTGVmdDogJzUwJScsXG4gICAgbWFyZ2luUmlnaHQ6IDE0LFxuICB9LFxuICB2ZXJ0aWNhbExpbmU6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmxpZ2h0ZXJfZ3JheSxcbiAgICBoZWlnaHQ6IDE1LFxuICAgIHdpZHRoOiAzLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJvdHRvbTogMixcbiAgfSxcbiAgaG9yaXpvbnRhbExpbmU6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmxpZ2h0ZXJfZ3JheSxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB0b3A6IC0yLFxuICAgIGhlaWdodDogMyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9LFxuICBkb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBsZWZ0OiAtMixcbiAgICB0b3A6IDEsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5saWdodGVyX2dyYXksXG4gICAgaGVpZ2h0OiAxMCxcbiAgICB3aWR0aDogMTAsXG4gICAgYm9yZGVyUmFkaXVzOiAxMCxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFByb2dyZXNzTGV2ZWxTZXQgPSBQcm9ncmVzc0xldmVsU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHN0YXRlID0+ICh7XG4gIGlzUnRsOiBzdGF0ZS5pc1J0bCxcbn0pKShSYWRpdW0oUHJvZ3Jlc3NMZXZlbFNldCkpO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHtxdWVyeVBhcmFtc30gZnJvbSAnQGNkby9hcHBzL2NvZGUtc3R1ZGlvL3V0aWxzJztcbmltcG9ydCBmb250Q29uc3RhbnRzIGZyb20gJ0BjZG8vYXBwcy9mb250Q29uc3RhbnRzJztcbmltcG9ydCB7UmV2aWV3U3RhdGVzfSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL2ZlZWRiYWNrL3R5cGVzJztcbmltcG9ydCBCdWJibGVCYWRnZSwge0JhZGdlVHlwZX0gZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9wcm9ncmVzcy9CdWJibGVCYWRnZSc7XG5pbXBvcnQge1xuICBCdWJibGVTaGFwZSxcbiAgQnViYmxlU2l6ZSxcbiAgZ2V0QnViYmxlVXJsLFxufSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL3Byb2dyZXNzL0J1YmJsZUZhY3RvcnknO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcblxuaW1wb3J0IEZvbnRBd2Vzb21lIGZyb20gJy4uLy4uL2xlZ2FjeVNoYXJlZENvbXBvbmVudHMvRm9udEF3ZXNvbWUnO1xuXG5pbXBvcnQge2lzTGV2ZWxBc3Nlc3NtZW50fSBmcm9tICcuL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQge2xldmVsUHJvZ3Jlc3NTdHlsZSwgaG92ZXJTdHlsZX0gZnJvbSAnLi9wcm9ncmVzc1N0eWxlcyc7XG5pbXBvcnQge2xldmVsV2l0aFByb2dyZXNzVHlwZX0gZnJvbSAnLi9wcm9ncmVzc1R5cGVzJztcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyBzaW1pbGFyIHRvIG91ciBQcm9ncmVzc0J1YmJsZSwgZXhjZXB0IHRoYXQgaW5zdGVhZCBvZiBiZWluZ1xuICogYSBjaXJjbGUgd2l0aCBhIG51bWJlciBpbnNpZGUsIGl0IGlzIGFuIGVsbGlwc2Ugd2l0aCB0ZXh0IChhbmQgcG9zc2libHkgYW5cbiAqIGljb24pXG4gKi9cbmNsYXNzIFByb2dyZXNzUGlsbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbGV2ZWxzOiBQcm9wVHlwZXMuYXJyYXlPZihsZXZlbFdpdGhQcm9ncmVzc1R5cGUpLFxuICAgIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b29sdGlwOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0ZWRTZWN0aW9uSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcHJvZ3Jlc3NTdHlsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25TaW5nbGVMZXZlbENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvLyBSZWR1eFxuICAgIGlzUnRsOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBnZXRVcmwoKSB7XG4gICAgY29uc3Qge2xldmVscywgZGlzYWJsZWQsIHNlbGVjdGVkU2VjdGlvbklkLCBvblNpbmdsZUxldmVsQ2xpY2t9ID1cbiAgICAgIHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBwaWxsTGlua3NUb0xldmVsID1cbiAgICAgICFkaXNhYmxlZCAmJiAhb25TaW5nbGVMZXZlbENsaWNrICYmIGxldmVscy5sZW5ndGggPT09IDE7XG5cbiAgICBpZiAoIXBpbGxMaW5rc1RvTGV2ZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VySWQgPSBxdWVyeVBhcmFtcygndXNlcl9pZCcpO1xuICAgIHJldHVybiBnZXRCdWJibGVVcmwobGV2ZWxzWzBdLnVybCwgdXNlcklkLCBzZWxlY3RlZFNlY3Rpb25JZCk7XG4gIH1cblxuICBnZXRUb29sdGlwUHJvcHMoKSB7XG4gICAgY29uc3Qge3Rvb2x0aXB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHRvb2x0aXBQcm9wcyA9IHt9O1xuICAgIGlmICh0b29sdGlwKSB7XG4gICAgICBjb25zdCBpZCA9IHRvb2x0aXAucHJvcHMudG9vbHRpcElkO1xuICAgICAgdG9vbHRpcFByb3BzWydkYXRhLXRpcCddID0gdHJ1ZTtcbiAgICAgIHRvb2x0aXBQcm9wc1snZGF0YS1mb3InXSA9IGlkO1xuICAgICAgdG9vbHRpcFByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBpZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9vbHRpcFByb3BzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGxldmVscyxcbiAgICAgIGljb24sXG4gICAgICB0ZXh0LFxuICAgICAgdG9vbHRpcCxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgcHJvZ3Jlc3NTdHlsZSxcbiAgICAgIGlzUnRsLFxuICAgICAgb25TaW5nbGVMZXZlbENsaWNrLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZmlyc3RMZXZlbCA9IGxldmVsc1swXTtcblxuICAgIGNvbnN0IG11bHRpTGV2ZWxTdGVwID0gbGV2ZWxzLmxlbmd0aCA+IDE7XG5cbiAgICBjb25zdCB1cmwgPSB0aGlzLmdldFVybCgpO1xuXG4gICAgbGV0IG9uQ2xpY2sgPVxuICAgICAgIW11bHRpTGV2ZWxTdGVwICYmICFkaXNhYmxlZCAmJiAhdXJsXG4gICAgICAgID8gKCkgPT4gb25TaW5nbGVMZXZlbENsaWNrKGZpcnN0TGV2ZWwpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgbGV0IHN0eWxlID0ge1xuICAgICAgLi4uc3R5bGVzLmxldmVsUGlsbCxcbiAgICAgIC4uLigodXJsIHx8IG9uQ2xpY2spICYmIGhvdmVyU3R5bGUpLFxuICAgICAgLi4uKCFtdWx0aUxldmVsU3RlcCAmJlxuICAgICAgICBsZXZlbFByb2dyZXNzU3R5bGUoZmlyc3RMZXZlbC5zdGF0dXMsIGZpcnN0TGV2ZWwua2luZCkpLFxuICAgIH07XG5cbiAgICAvLyBBZGp1c3QgaWNvbiBtYXJnaW5zIGlmIGxvY2FsZSBpcyBSVExcbiAgICBjb25zdCBpY29uTWFyZ2luU3R5bGUgPSBpc1J0bCA/IHN0eWxlcy5pY29uTWFyZ2luUlRMIDogc3R5bGVzLmljb25NYXJnaW47XG5cbiAgICBjb25zdCB0b29sdGlwUHJvcHMgPSB0aGlzLmdldFRvb2x0aXBQcm9wcygpO1xuXG4gICAgY29uc3QgaGFzS2VlcFdvcmtpbmdGZWVkYmFjayA9XG4gICAgICBmaXJzdExldmVsWyd0ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZSddID09PSBSZXZpZXdTdGF0ZXMua2VlcFdvcmtpbmc7XG5cbiAgICAvLyBPbmx5IHB1dCB0aGUgYnViYmxlIGJhZGdlIG9uIGlmIGl0cyBhIHNpbmdsZSBhc3Nlc3NtZW50IGxldmVsIChub3Qgc2V0KVxuICAgIGNvbnN0IGRpc3BsYXlCYWRnZSA9XG4gICAgICAhbXVsdGlMZXZlbFN0ZXAgJiZcbiAgICAgIChoYXNLZWVwV29ya2luZ0ZlZWRiYWNrIHx8IGlzTGV2ZWxBc3Nlc3NtZW50KGZpcnN0TGV2ZWwpKTtcblxuICAgIGNvbnN0IHRleHRTdHlsZSA9IHByb2dyZXNzU3R5bGUgPyBzdHlsZXMudGV4dFByb2dyZXNzU3R5bGUgOiBzdHlsZXMudGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8YVxuICAgICAgICBocmVmPXt1cmx9XG4gICAgICAgIHN0eWxlPXt7dGV4dERlY29yYXRpb246ICdub25lJ319XG4gICAgICAgIGNsYXNzTmFtZT1cInVpdGVzdC1Qcm9ncmVzc1BpbGxcIlxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgPlxuICAgICAgICA8ZGl2IHsuLi50b29sdGlwUHJvcHN9IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgICAge2ljb24gJiYgPEZvbnRBd2Vzb21lIGljb249e2ljb259IC8+fVxuICAgICAgICAgIHt0ZXh0ICYmIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiUHJvZ3Jlc3NQaWxsVGV4dEFuZEljb25cIlxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIC4uLnRleHRTdHlsZSxcbiAgICAgICAgICAgICAgICAuLi4oaWNvbiAmJiBpY29uTWFyZ2luU3R5bGUpLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge3Rvb2x0aXB9XG4gICAgICAgICAge2Rpc3BsYXlCYWRnZSAmJiAoXG4gICAgICAgICAgICA8QnViYmxlQmFkZ2VcbiAgICAgICAgICAgICAgYmFkZ2VUeXBlPXtcbiAgICAgICAgICAgICAgICBoYXNLZWVwV29ya2luZ0ZlZWRiYWNrXG4gICAgICAgICAgICAgICAgICA/IEJhZGdlVHlwZS5rZWVwV29ya2luZ1xuICAgICAgICAgICAgICAgICAgOiBCYWRnZVR5cGUuYXNzZXNzbWVudFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJ1YmJsZVNpemU9e0J1YmJsZVNpemUuZnVsbH1cbiAgICAgICAgICAgICAgYnViYmxlU2hhcGU9e0J1YmJsZVNoYXBlLnBpbGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBsZXZlbFBpbGw6IHtcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBib3JkZXJXaWR0aDogMixcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJDb2xvcjogY29sb3IubGlnaHRlcl9ncmF5LFxuICAgIGNvbG9yOiBjb2xvci5jaGFyY29hbCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZm9udFNpemU6IDE2LFxuICAgIC4uLmZvbnRDb25zdGFudHNbJ21haW4tZm9udC1zZW1pLWJvbGQnXSxcbiAgICBib3JkZXJSYWRpdXM6IDIwLFxuICAgIHBhZGRpbmdMZWZ0OiAxMCxcbiAgICBwYWRkaW5nUmlnaHQ6IDEwLFxuICAgIHBhZGRpbmdUb3A6IDYsXG4gICAgcGFkZGluZ0JvdHRvbTogNixcbiAgICBtaW5XaWR0aDogNzAsXG4gICAgbGluZUhlaWdodDogJzE4cHgnLFxuICAgIG1hcmdpblRvcDogMyxcbiAgICBtYXJnaW5Cb3R0b206IDMsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAuLi5mb250Q29uc3RhbnRzWydtYWluLWZvbnQtc2VtaS1ib2xkJ10sXG4gICAgbGV0dGVyU3BhY2luZzogLTAuMTIsXG4gIH0sXG4gIHRleHRQcm9ncmVzc1N0eWxlOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgLi4uZm9udENvbnN0YW50c1snbWFpbi1mb250LXNlbWktYm9sZCddLFxuICAgIGZvbnRTaXplOiAxMixcbiAgICBsZXR0ZXJTcGFjaW5nOiAtMC4xMixcbiAgICB3aWR0aDogMTIwLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIH0sXG4gIGljb25NYXJnaW46IHtcbiAgICBtYXJnaW5MZWZ0OiAxMCxcbiAgfSxcbiAgaWNvbk1hcmdpblJUTDoge1xuICAgIG1hcmdpblJpZ2h0OiAxMCxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFByb2dyZXNzUGlsbCA9IFByb2dyZXNzUGlsbDtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChzdGF0ZSA9PiAoe1xuICBpc1J0bDogc3RhdGUuaXNSdGwsXG59KSkoUmFkaXVtKFByb2dyZXNzUGlsbCkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB0aHVuazsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHtMZXZlbFN0YXR1c30gZnJvbSAnQGNkby9nZW5lcmF0ZWQtc2NyaXB0cy9zaGFyZWRDb25zdGFudHMnO1xuaW1wb3J0IHtyZWR1eFN0b3JlfSBmcm9tICdAY2RvL3N0b3J5Ym9vay9kZWNvcmF0b3JzJztcblxuaW1wb3J0IFByb2dyZXNzTGVzc29uQ29udGVudCBmcm9tICcuL1Byb2dyZXNzTGVzc29uQ29udGVudCc7XG5pbXBvcnQge2Zha2VMZXZlbHMsIGZha2VMZXZlbH0gZnJvbSAnLi9wcm9ncmVzc1Rlc3RIZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnQ6IFByb2dyZXNzTGVzc29uQ29udGVudCxcbn07XG5cbmNvbnN0IFRlbXBsYXRlID0gYXJncyA9PiAoXG4gIDxQcm92aWRlciBzdG9yZT17cmVkdXhTdG9yZSgpfT5cbiAgICA8UHJvZ3Jlc3NMZXNzb25Db250ZW50IGRpc2FibGVkPXtmYWxzZX0gey4uLmFyZ3N9IC8+XG4gIDwvUHJvdmlkZXI+XG4pO1xuXG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NMZXNzb25FeGFtcGxlID0gVGVtcGxhdGUuYmluZCh7fSk7XG5Qcm9ncmVzc0xlc3NvbkV4YW1wbGUuYXJncyA9IHtcbiAgbGV2ZWxzOiBmYWtlTGV2ZWxzKDUpLm1hcCgobGV2ZWwsIGluZGV4KSA9PiAoe1xuICAgIC4uLmxldmVsLFxuICAgIHN0YXR1czogaW5kZXggPT09IDEgPyBMZXZlbFN0YXR1cy5wZXJmZWN0IDogTGV2ZWxTdGF0dXMubm90X3RyaWVkLFxuICAgIG5hbWU6ICdQcm9ncmVzc2lvbicsXG4gIH0pKSxcbn07XG5cbmV4cG9ydCBjb25zdCBXaXRoVW5wbHVnZ2VkTGVzc29uID0gVGVtcGxhdGUuYmluZCh7fSk7XG5XaXRoVW5wbHVnZ2VkTGVzc29uLmFyZ3MgPSB7XG4gIGxldmVsczogW2Zha2VMZXZlbCh7aXNVbnBsdWdnZWQ6IHRydWV9KSwgLi4uZmFrZUxldmVscyg1KV0ubWFwKGxldmVsID0+ICh7XG4gICAgLi4ubGV2ZWwsXG4gICAgbmFtZTogJ1Byb2dyZXNzaW9uJyxcbiAgfSkpLFxufTtcblxuZXhwb3J0IGNvbnN0IFdpdGhOYW1lZFVucGx1Z2dlZExlc3NvbiA9IFRlbXBsYXRlLmJpbmQoe30pO1xuV2l0aE5hbWVkVW5wbHVnZ2VkTGVzc29uLmFyZ3MgPSB7XG4gIGxldmVsczogW1xuICAgIHtcbiAgICAgIC4uLmZha2VMZXZlbCh7aXNVbnBsdWdnZWQ6IHRydWV9KSxcbiAgICAgIG5hbWU6ICdGdW4gdW5wbHVnZ2VkL25hbWVkIGxldmVsJyxcbiAgICB9LFxuICAgIC4uLmZha2VMZXZlbHMoNSwge25hbWVkOiBmYWxzZX0pLFxuICBdLFxufTtcblxuZXhwb3J0IGNvbnN0IFdpdGhOb05hbWVkTGV2ZWxzID0gVGVtcGxhdGUuYmluZCh7fSk7XG5XaXRoTm9OYW1lZExldmVscy5hcmdzID0ge1xuICBsZXZlbHM6IFtcbiAgICB7XG4gICAgICAuLi5mYWtlTGV2ZWwoe2lzVW5wbHVnZ2VkOiB0cnVlLCBuYW1lOiB1bmRlZmluZWR9KSxcbiAgICB9LFxuICAgIC4uLmZha2VMZXZlbHMoNSwge25hbWVkOiBmYWxzZX0pLFxuICBdLFxufTtcbiJdLCJuYW1lcyI6WyJyZWR1eFN0b3JlIiwicmVkdWNlcnMiLCJzdGF0ZSIsImNyZWF0ZVN0b3JlIiwiY29tYmluZVJlZHVjZXJzIiwiaXNSdGwiLCJhcHBseU1pZGRsZXdhcmUiLCJsb2NhbGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJhY3Rpb24iLCJ0eXBlIiwiU0VUX1JUTCIsInNldFJ0bCIsImV4cG9ydHMiLCJzZXRSdGxGcm9tRE9NIiwiaXNSdGxGcm9tRE9NIiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnRFbGVtZW50IiwiZGlyIiwiZ2V0QXR0cmlidXRlIiwidG9Mb3dlckNhc2UiLCJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJyZXF1aXJlIiwiX2NvbnN0YW50cyIsIl9wcm9ncmVzc0hlbHBlcnMiLCJfc2hhcmVkQ29uc3RhbnRzIiwiX2FjdGl2aXR5VXRpbHMiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJBcnJheSIsImlzQXJyYXkiLCJfYXJyYXlMaWtlVG9BcnJheSIsIl9pdGVyYWJsZVRvQXJyYXkiLCJpdGVyIiwiZnJvbSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsIm5hbWUiLCJ0ZXN0IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIiwibGVuIiwiaSIsImFycjIiLCJvd25LZXlzIiwiZSIsInIiLCJ0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJTdHJpbmciLCJOdW1iZXIiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImhhc0xvY2thYmxlTGVzc29ucyIsImxlc3NvbnMiLCJzb21lIiwibGVzc29uIiwibG9ja2FibGUiLCJoYXNHcm91cHMiLCJncm91cGVkTGVzc29ucyIsImxlc3NvbkZyb21MZXNzb25BdEluZGV4IiwibGVzc29uSW5kZXgiLCJsZXNzb25Gcm9tTGVzc29uIiwiaXNGb2N1c0FyZWEiLCJmb2N1c0FyZWFMZXNzb25JZHMiLCJpbmNsdWRlcyIsImlkIiwiXyIsInBpY2siLCJwZWVyUmV2aWV3TGVzc29uIiwibWFwIiwiaW5kZXgiLCJwZWVyUmV2aWV3TGVzc29uSW5mbyIsInBlZXJSZXZpZXdMZXZlbHMiLCJsZXZlbHMiLCJsZXZlbCIsImlzTG9ja2VkIiwibG9ja2VkIiwic3RhdHVzIiwiTGV2ZWxTdGF0dXMiLCJub3RfdHJpZWQiLCJsZXZlbE51bWJlciIsIlByb2dyZXNzTGV2ZWxUeXBlIiwiU0NSSVBUX0xFVkVMIiwiTEVWRUwiLCJnZXRQcm9ncmVzc0xldmVsVHlwZSIsInByb2dyZXNzIiwiY3VycmVudExldmVsSWQiLCJsZXZlbFdpdGhQcm9ncmVzcyIsImdldExldmVsUHJvcGVydGllc1BhdGgiLCJfc3RhdGUkcHJvZ3Jlc3MkbGVzc28iLCJsZXZlbFBvc2l0aW9uIiwic3VibGV2ZWxQb3NpdGlvbiIsInNjcmlwdE5hbWUiLCJsZXNzb25Qb3NpdGlvbiIsImZpbmQiLCJjdXJyZW50TGVzc29uSWQiLCJyZWxhdGl2ZV9wb3NpdGlvbiIsImN1cnJlbnRMZXZlbCIsImdldEN1cnJlbnRMZXZlbCIsInBhcmVudExldmVsSWQiLCJsZXZlbEJ5SWQiLCJjb25jYXQiLCJsZXZlbElkIiwiX3JlZiIsImlzTG9ja2FibGUiLCJfbGV2ZWxQcm9ncmVzcyIsIl9sZXZlbCRpZHMiLCJfbGV2ZWwkc3VibGV2ZWxzIiwibGV2ZWxSZXN1bHRzIiwidW5pdFByb2dyZXNzIiwiX3JlZiRsZXZlbFBhaXJpbmciLCJsZXZlbFBhaXJpbmciLCJub3JtYWxpemVkTGV2ZWwiLCJwcm9jZXNzZWRMZXZlbCIsImlkcyIsImJlc3RSZXN1bHRMZXZlbElkIiwibGV2ZWxJZHMiLCJwcm9ncmVzc0RhdGEiLCJhdHRlbXB0ZWRJZHMiLCJiZXN0SWQiLCJiZXN0UmVzdWx0IiwicmVzdWx0IiwidGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGUiLCJsZXZlbFByb2dyZXNzIiwicGFnZXMiLCJwYWdlTnVtYmVyIiwia2luZCIsIkxldmVsS2luZCIsImFzc2Vzc21lbnQiLCJhY3Rpdml0eUNzc0NsYXNzIiwiaXNDdXJyZW50IiwiaXNDdXJyZW50TGV2ZWwiLCJwYWlyZWQiLCJhY3RpdmVJZCIsInN1YmxldmVscyIsInN1YmxldmVsIiwibGV2ZWxzQnlMZXNzb24iLCJfcmVmMiIsImxldmVsc0Zvckxlc3NvbklkIiwibGVzc29uSWQiLCJfc3RhdGUkbGVzc29ucyIsIl9sZXZlbHNGb3JMZXNzb25JZCIsIl9sZXZlbHNGb3JMZXNzb25JZCRmbCIsImZsYXRNYXAiLCJfZ2V0Q3VycmVudExldmVscyIsIl9nZXRDdXJyZW50TGV2ZWxzJGZsYSIsImdldEN1cnJlbnRMZXZlbHMiLCJnZXRDdXJyZW50U2NyaXB0TGV2ZWxJZCIsIl9sZXZlbEJ5SWQiLCJzY3JpcHRMZXZlbElkIiwibmV4dExldmVsSWQiLCJjdXJyZW50TGV2ZWxJbmRleCIsImxldmVsQ291bnQiLCJsZXNzb25FeHRyYXNVcmwiLCJsZXNzb25FeHRyYXNFbmFibGVkIiwibGVzc29uX2V4dHJhc19sZXZlbF91cmwiLCJpc1BlcmZlY3QiLCJUZXN0UmVzdWx0cyIsIk1JTklNVU1fT1BUSU1BTF9SRVNVTFQiLCJpbmNsdWRlQm9udXNMZXZlbHMiLCJieUdyb3VwIiwiYWxsTGV2ZWxzIiwibGVzc29uR3JvdXBzIiwibGVzc29uR3JvdXAiLCJkaXNwbGF5X25hbWUiLCJ1c2VyRmFjaW5nIiwidXNlcl9mYWNpbmciLCJkaXNwbGF5TmFtZSIsImRlc2NyaXB0aW9uIiwiYmlnUXVlc3Rpb25zIiwiYmlnX3F1ZXN0aW9ucyIsImdyb3VwIiwibGVzc29uX2dyb3VwX2Rpc3BsYXlfbmFtZSIsImxlc3NvbkF0SW5kZXgiLCJsZXNzb25MZXZlbHMiLCJib251cyIsInZhbHVlcyIsInByb2dyZXNzaW9uc0Zyb21MZXZlbHMiLCJwcm9ncmVzc2lvbnMiLCJjdXJyZW50UHJvZ3Jlc3Npb24iLCJzdGFydCIsInByb2dyZXNzaW9uIiwicHJvZ3Jlc3Npb25EaXNwbGF5TmFtZSIsInJlZHVjZXIiLCJpbml0aWFsU3RhdGUiLCJTRVRfUkVTUE9OU0lWRV9TSVpFIiwicmVzcG9uc2l2ZVNpemUiLCJfdXRpbHMiLCJSZXNwb25zaXZlU2l6ZSIsInNldFJlc3BvbnNpdmVTaXplIiwibWFrZUVudW0iLCJCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJsZyIsIm1kIiwic20iLCJ4cyIsImdldFJlc3BvbnNpdmVCcmVha3BvaW50Iiwid2lkdGgiLCJjb25zb2xlIiwiZXJyb3IiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiX3Byb3BUeXBlcyIsIl9yZWFjdCIsIl9leGNsdWRlZCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZUtleXMiLCJpbmRleE9mIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRm9udEF3ZXNvbWUiLCJpY29uIiwiY2xhc3NOYW1lIiwidGl0bGUiLCJwcm9wcyIsIm5ld1Byb3BzIiwiY3JlYXRlRWxlbWVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJtb2R1bGUiLCJfcmVkYWN0YWJsZU1hcmtkb3duIiwiX3JlbWFya1BsdWdpbnMiLCJfZ2l0aHViIiwiX3JlaHlwZVJhdyIsIl9yZWh5cGVSZWFjdCIsIl9yZWh5cGVTYW5pdGl6ZSIsIl9yZW1hcmtSZWh5cGUiLCJfZXh0ZXJuYWxMaW5rcyIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIlNhZmVNYXJrZG93biIsIl9SZWFjdCRDb21wb25lbnQiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInJlbmRlciIsInJlbmRlcmVkIiwidGhpcyIsIm9wZW5FeHRlcm5hbExpbmtzSW5OZXdUYWIiLCJtYXJrZG93blRvUmVhY3RFeHRlcm5hbExpbmtzIiwibWFya2Rvd25Ub1JlYWN0IiwicHJvY2Vzc1N5bmMiLCJtYXJrZG93biIsImNvbnRlbnRzIiwibWFya2Rvd25Qcm9wcyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiYm9vbCIsInNjaGVtYSIsImRlZmF1bHRTYW5pdGl6YXRpb25TY2hlbWEiLCJhdHRyaWJ1dGVzIiwiaW1nIiwidGFnTmFtZXMiLCJzcGFuIiwiY2xvYmJlciIsImJsb2NrbHlUYWdzIiwiYmxvY2tseUNvbXBvbmVudFdyYXBwZXJzIiwidGFnIiwiQmxvY2tseUVsZW1lbnQiLCJpcyIsIlBhcnNlciIsImdldFBhcnNlciIsInVzZSIsImNsaWNrYWJsZVRleHQiLCJleHBhbmRhYmxlSW1hZ2VzIiwidmlzdWFsQ29kZUJsb2NrIiwieG1sQXNUb3BMZXZlbEJsb2NrIiwiZGV0YWlscyIsInJlbWFya1JlaHlwZSIsImFsbG93RGFuZ2Vyb3VzSFRNTCIsInJlaHlwZVJhdyIsInJlaHlwZVNhbml0aXplIiwicmVoeXBlUmVhY3QiLCJjb21wb25lbnRzIiwiZXh0ZXJuYWxMaW5rcyIsImxpbmtzIiwiaXNFeHRlcm5hbExpbmsiLCJ1cmwiLCJmdWxseVF1YWxpZmllZCIsInBhdGgiLCJhIiwiaHJlZiIsIm9wdGlvbnMiLCJ0b2tlbml6ZXJzIiwiaW5saW5lVG9rZW5pemVycyIsIm9yaWdpbmFsIiwibGluayIsImFsbCIsImVhdCIsInNpbGVudCIsImRhdGEiLCJoUHJvcGVydGllcyIsInJlbCIsImxvY2F0b3IiLCJfcmFkaXVtIiwiX3JlYWN0UmVkdXgiLCJfY29sb3IiLCJfUHJvZ3Jlc3NCdWJibGUiLCJfcHJvZ3Jlc3NTdHlsZXMiLCJfcHJvZ3Jlc3NUeXBlcyIsIlByb2dyZXNzQnViYmxlU2V0IiwiX3RoaXMiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJpc1N1YmxldmVsIiwiX3RoaXMkcHJvcHMiLCJzZWxlY3RlZFNlY3Rpb25JZCIsInNlbGVjdGVkU3R1ZGVudElkIiwiYmFja2dyb3VuZEZpcnN0U3R5bGUiLCJzdHlsZXMiLCJiYWNrZ3JvdW5kTGFzdCIsImJhY2tncm91bmRGaXJzdCIsImJhY2tncm91bmRMYXN0U3R5bGUiLCJiYWNrZ3JvdW5kU3R5bGVQcm9wIiwiYmFja2dyb3VuZCIsImlzQ29uY2VwdExldmVsIiwiYmFja2dyb3VuZERpYW1vbmQiLCJiYWNrZ3JvdW5kU3VibGV2ZWwiLCJpc1VucGx1Z2dlZCIsImJhY2tncm91bmRQaWxsIiwiY29udGFpbmVyU3R5bGVQcm9wIiwiY29udGFpbmVyIiwicGlsbENvbnRhaW5lciIsImRpYW1vbmRDb250YWluZXIiLCJjb250YWluZXJTdWJsZXZlbCIsInN0eWxlIiwid2l0aEJhY2tncm91bmQiLCJkaXNhYmxlZCIsInNtYWxsQnViYmxlIiwiaGlkZVRvb2xUaXBzIiwib25DbGljayIsIm9uQnViYmxlQ2xpY2siLCJsZXNzb25OYW1lIiwiX3RoaXMyIiwiX3RoaXMkcHJvcHMyIiwic2hvd1N1YmxldmVscyIsIm1haW4iLCJyZW5kZXJCdWJibGUiLCJhcnJheU9mIiwibGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlIiwib2JqZWN0IiwibnVtYmVyIiwib25lT2ZUeXBlIiwiZnVuYyIsInBvc2l0aW9uIiwiZGlzcGxheSIsImhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwibGlnaHRlcl9ncmF5IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiRE9UX1NJWkUiLCJESUFNT05EX0RPVF9TSVpFIiwibWFyZ2luUmlnaHQiLCJjb25uZWN0IiwiUmFkaXVtIiwiX3Byb2dyZXNzUmVkdXhTZWxlY3RvcnMiLCJfZm9udENvbnN0YW50cyIsIl9TYWZlTWFya2Rvd24iLCJfbG9jYWxlIiwiX1Byb2dyZXNzQnViYmxlU2V0IiwiX1Byb2dyZXNzTGV2ZWxTZXQiLCJQcm9ncmVzc0xlc3NvbkNvbnRlbnQiLCJidWJibGVzIiwibm9MZXZlbHNXYXJuaW5nIiwiaTE4biIsImxlc3NvbkNvbnRhaW5zTm9MZXZlbHMiLCJzdW1tYXJ5IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiZm9udFNpemUiLCJmb250Q29uc3RhbnRzIiwiX1Byb2dyZXNzUGlsbCIsIlByb2dyZXNzTGV2ZWxTZXQiLCJwaWxsVGV4dCIsIm11bHRpTGV2ZWxTdGVwIiwiY29sMlN0eWxlIiwiY29sMlJUTCIsImNvbDIiLCJwcm9ncmVzc1N0eWxlIiwiZ2V0SWNvbkZvckxldmVsIiwidW5wbHVnZ2VkQWN0aXZpdHkiLCJ0YWJsZSIsImNvbDEiLCJ0ZXh0Iiwib25TaW5nbGVMZXZlbENsaWNrIiwibmFtZVRleHQiLCJsaW5lc0FuZERvdCIsInZlcnRpY2FsTGluZSIsImhvcml6b250YWxMaW5lIiwiZG90IiwiY2hhcmNvYWwiLCJsZXR0ZXJTcGFjaW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ3aGl0ZVNwYWNlIiwibWFyZ2luTGVmdCIsImJvdHRvbSIsImJvcmRlclJhZGl1cyIsIl90eXBlcyIsIl9CdWJibGVCYWRnZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiaGFzIiwiZ2V0IiwidSIsInNldCIsIl9CdWJibGVGYWN0b3J5IiwiX0ZvbnRBd2Vzb21lIiwiV2Vha01hcCIsIlByb2dyZXNzUGlsbCIsIl9wcm90byIsImdldFVybCIsInVzZXJJZCIsInF1ZXJ5UGFyYW1zIiwiZ2V0QnViYmxlVXJsIiwiZ2V0VG9vbHRpcFByb3BzIiwidG9vbHRpcCIsInRvb2x0aXBQcm9wcyIsInRvb2x0aXBJZCIsImZpcnN0TGV2ZWwiLCJsZXZlbFBpbGwiLCJob3ZlclN0eWxlIiwibGV2ZWxQcm9ncmVzc1N0eWxlIiwiaWNvbk1hcmdpblN0eWxlIiwiaWNvbk1hcmdpblJUTCIsImljb25NYXJnaW4iLCJoYXNLZWVwV29ya2luZ0ZlZWRiYWNrIiwiUmV2aWV3U3RhdGVzIiwia2VlcFdvcmtpbmciLCJkaXNwbGF5QmFkZ2UiLCJpc0xldmVsQXNzZXNzbWVudCIsInRleHRTdHlsZSIsInRleHRQcm9ncmVzc1N0eWxlIiwidGV4dERlY29yYXRpb24iLCJiYWRnZVR5cGUiLCJCYWRnZVR5cGUiLCJidWJibGVTaXplIiwiQnViYmxlU2l6ZSIsImZ1bGwiLCJidWJibGVTaGFwZSIsIkJ1YmJsZVNoYXBlIiwicGlsbCIsImVsZW1lbnQiLCJ0ZXh0QWxpZ24iLCJqdXN0aWZ5Q29udGVudCIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJDb2xvciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWluV2lkdGgiLCJsaW5lSGVpZ2h0Iiwib3ZlcmZsb3ciLCJ0ZXh0T3ZlcmZsb3ciLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJuZXh0IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0QnlTZWxlY3RvciIsImluc2VydCIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImluc2VydFN0eWxlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfZGVjb3JhdG9ycyIsIl9Qcm9ncmVzc0xlc3NvbkNvbnRlbnQiLCJfcHJvZ3Jlc3NUZXN0SGVscGVycyIsImNvbXBvbmVudCIsIlRlbXBsYXRlIiwiUHJvdmlkZXIiLCJzdG9yZSIsImZha2VMZXZlbHMiLCJwZXJmZWN0IiwiZmFrZUxldmVsIiwibmFtZWQiXSwic291cmNlUm9vdCI6IiJ9