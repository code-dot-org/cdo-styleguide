/*! For license information please see componentLibrary-typography-Typography-story.0692da02.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5525],{"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/componentLibrary/typography/Typography.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.OverlineTexts=exports.OtherTexts=exports.Headings=exports.CustomUsageExamples=exports.BodyTexts=exports.AllTypographyElements=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_index=_interopRequireDefault(__webpack_require__("./src/componentLibrary/typography/index.ts"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default={title:"DesignSystem/Typography",component:_index.default};exports.default=_default;var MultipleTemplate=function MultipleTemplate(){var _args$components,args=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return _react.default.createElement(_react.default.Fragment,null,null===(_args$components=args.components)||void 0===_args$components?void 0:_args$components.map((function(componentArg){return _react.default.createElement(_index.default,{key:"".concat(componentArg.semanticTag,"-").concat(componentArg.visualAppearance),semanticTag:componentArg.semanticTag,visualAppearance:componentArg.visualAppearance},componentArg.children)})))},headingComponents=[{semanticTag:"h1",visualAppearance:"heading-xxl",children:"This is a Typography Component. (H1)"},{semanticTag:"h2",visualAppearance:"heading-xl",children:"This is a Typography Component. (H2)"},{semanticTag:"h3",visualAppearance:"heading-lg",children:"This is a Typography Component. (H3)"},{semanticTag:"h4",visualAppearance:"heading-md",children:"This is a Typography Component. (H4)"},{semanticTag:"h5",visualAppearance:"heading-sm",children:"This is a Typography Component. (H5)"},{semanticTag:"h6",visualAppearance:"heading-xs",children:"This is a Typography Component. (H6)"}],bodyTextComponents=[{semanticTag:"p",visualAppearance:"body-one",children:"This is a Typography Component. (body-one)"},{displayName:"BodyTwoText",semanticTag:"p",visualAppearance:"body-two",children:"This is a Typography Component. (body-two)"},{semanticTag:"p",visualAppearance:"body-three",children:"This is a Typography Component. (body-three)"},{semanticTag:"p",visualAppearance:"body-four",children:"This is a Typography Component. (body-four)"}],overlineTextComponents=[{semanticTag:"p",visualAppearance:"overline-one",children:"This is a Typography Component. (overline-one)"},{semanticTag:"p",visualAppearance:"overline-two",children:"This is a Typography Component. (overline-two)"},{semanticTag:"p",visualAppearance:"overline-three",children:"This is a Typography Component. (overline-three)"}],otherTextComponents=[{semanticTag:"em",visualAppearance:"em",children:"This is a Typography Component. (em)"},{semanticTag:"strong",visualAppearance:"strong",children:"This is a Typography Component. (strong)"},{semanticTag:"strong",visualAppearance:"extra-strong",children:"This is a Typography Component. (extra-strong)"},{semanticTag:"figcaption",visualAppearance:"figcaption",children:"This is a Typography Component. (figcaption)"}],AllTypographyElements=MultipleTemplate.bind({});exports.AllTypographyElements=AllTypographyElements,AllTypographyElements.args={components:[].concat(headingComponents,bodyTextComponents,overlineTextComponents,otherTextComponents)};var Headings=MultipleTemplate.bind({});exports.Headings=Headings,Headings.args={components:[].concat(headingComponents)};var BodyTexts=MultipleTemplate.bind({});exports.BodyTexts=BodyTexts,BodyTexts.args={components:[].concat(bodyTextComponents)};var OverlineTexts=MultipleTemplate.bind({});exports.OverlineTexts=OverlineTexts,OverlineTexts.args={components:[].concat(overlineTextComponents)};var OtherTexts=MultipleTemplate.bind({});exports.OtherTexts=OtherTexts,OtherTexts.args={components:[].concat(otherTextComponents)};var CustomUsageExamples=MultipleTemplate.bind({});exports.CustomUsageExamples=CustomUsageExamples,CustomUsageExamples.args={components:[{semanticTag:"h1",visualAppearance:"heading-lg",children:"(Heading1 as Heading3) This is a Typography Component. (H1 as H3)"},{semanticTag:"h2",visualAppearance:"body-one",children:"(Heading2 as body-one) This is a Typography Component. (H2 as p.body-one)"},{semanticTag:"h3",visualAppearance:"heading-sm",children:"(Heading3 as Heading5) This is a Typography Component. (H3 as H5)"}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,