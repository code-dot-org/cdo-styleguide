(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5965],{"./node_modules/performance-now/lib/performance-now.js":function(module,__unused_webpack_exports,__webpack_require__){var process=__webpack_require__("./node_modules/process/browser.js");(function(){var getNanoSeconds,hrtime,loadTime;"undefined"!=typeof performance&&null!==performance&&performance.now?module.exports=function(){return performance.now()}:null!=process&&process.hrtime?(module.exports=function(){return(getNanoSeconds()-loadTime)/1e6},hrtime=process.hrtime,loadTime=(getNanoSeconds=function(){var hr;return 1e9*(hr=hrtime())[0]+hr[1]})()):Date.now?(module.exports=function(){return Date.now()-loadTime},loadTime=Date.now()):(module.exports=function(){return(new Date).getTime()-loadTime},loadTime=(new Date).getTime())}).call(this)},"./node_modules/react-motion/lib/Motion.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _mapToZero2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mapToZero.js")),_stripStyle2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stripStyle.js")),_stepper4=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stepper.js")),_performanceNow2=_interopRequireDefault(__webpack_require__("./node_modules/performance-now/lib/performance-now.js")),_raf2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/raf/index.js")),_shouldStopAnimation2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/shouldStopAnimation.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),msPerFrame=1e3/60,Motion=function(_React$Component){function Motion(props){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Motion),_React$Component.call(this,props),this.wasAnimating=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyle=null,this.clearUnreadPropStyle=function(destStyle){var dirty=!1,_state=_this.state,currentStyle=_state.currentStyle,currentVelocity=_state.currentVelocity,lastIdealStyle=_state.lastIdealStyle,lastIdealVelocity=_state.lastIdealVelocity;for(var key in destStyle)if(Object.prototype.hasOwnProperty.call(destStyle,key)){var styleValue=destStyle[key];"number"==typeof styleValue&&(dirty||(dirty=!0,currentStyle=_extends({},currentStyle),currentVelocity=_extends({},currentVelocity),lastIdealStyle=_extends({},lastIdealStyle),lastIdealVelocity=_extends({},lastIdealVelocity)),currentStyle[key]=styleValue,currentVelocity[key]=0,lastIdealStyle[key]=styleValue,lastIdealVelocity[key]=0)}dirty&&_this.setState({currentStyle,currentVelocity,lastIdealStyle,lastIdealVelocity})},this.startAnimationIfNecessary=function(){_this.animationID=_raf2.default((function(timestamp){var propsStyle=_this.props.style;if(_shouldStopAnimation2.default(_this.state.currentStyle,propsStyle,_this.state.currentVelocity))return _this.wasAnimating&&_this.props.onRest&&_this.props.onRest(),_this.animationID=null,_this.wasAnimating=!1,void(_this.accumulatedTime=0);_this.wasAnimating=!0;var currentTime=timestamp||_performanceNow2.default(),timeDelta=currentTime-_this.prevTime;if(_this.prevTime=currentTime,_this.accumulatedTime=_this.accumulatedTime+timeDelta,_this.accumulatedTime>10*msPerFrame&&(_this.accumulatedTime=0),0===_this.accumulatedTime)return _this.animationID=null,void _this.startAnimationIfNecessary();var currentFrameCompletion=(_this.accumulatedTime-Math.floor(_this.accumulatedTime/msPerFrame)*msPerFrame)/msPerFrame,framesToCatchUp=Math.floor(_this.accumulatedTime/msPerFrame),newLastIdealStyle={},newLastIdealVelocity={},newCurrentStyle={},newCurrentVelocity={};for(var key in propsStyle)if(Object.prototype.hasOwnProperty.call(propsStyle,key)){var styleValue=propsStyle[key];if("number"==typeof styleValue)newCurrentStyle[key]=styleValue,newCurrentVelocity[key]=0,newLastIdealStyle[key]=styleValue,newLastIdealVelocity[key]=0;else{for(var newLastIdealStyleValue=_this.state.lastIdealStyle[key],newLastIdealVelocityValue=_this.state.lastIdealVelocity[key],i=0;i<framesToCatchUp;i++){var _stepper=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision);newLastIdealStyleValue=_stepper[0],newLastIdealVelocityValue=_stepper[1]}var _stepper2=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision),nextIdealX=_stepper2[0],nextIdealV=_stepper2[1];newCurrentStyle[key]=newLastIdealStyleValue+(nextIdealX-newLastIdealStyleValue)*currentFrameCompletion,newCurrentVelocity[key]=newLastIdealVelocityValue+(nextIdealV-newLastIdealVelocityValue)*currentFrameCompletion,newLastIdealStyle[key]=newLastIdealStyleValue,newLastIdealVelocity[key]=newLastIdealVelocityValue}}_this.animationID=null,_this.accumulatedTime-=framesToCatchUp*msPerFrame,_this.setState({currentStyle:newCurrentStyle,currentVelocity:newCurrentVelocity,lastIdealStyle:newLastIdealStyle,lastIdealVelocity:newLastIdealVelocity}),_this.unreadPropStyle=null,_this.startAnimationIfNecessary()}))},this.state=this.defaultState()}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Motion,_React$Component),_createClass(Motion,null,[{key:"propTypes",value:{defaultStyle:_propTypes2.default.objectOf(_propTypes2.default.number),style:_propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.number,_propTypes2.default.object])).isRequired,children:_propTypes2.default.func.isRequired,onRest:_propTypes2.default.func},enumerable:!0}]),Motion.prototype.defaultState=function defaultState(){var _props=this.props,defaultStyle=_props.defaultStyle,style=_props.style,currentStyle=defaultStyle||_stripStyle2.default(style),currentVelocity=_mapToZero2.default(currentStyle);return{currentStyle,currentVelocity,lastIdealStyle:currentStyle,lastIdealVelocity:currentVelocity}},Motion.prototype.componentDidMount=function componentDidMount(){this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary()},Motion.prototype.componentWillReceiveProps=function componentWillReceiveProps(props){null!=this.unreadPropStyle&&this.clearUnreadPropStyle(this.unreadPropStyle),this.unreadPropStyle=props.style,null==this.animationID&&(this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary())},Motion.prototype.componentWillUnmount=function componentWillUnmount(){null!=this.animationID&&(_raf2.default.cancel(this.animationID),this.animationID=null)},Motion.prototype.render=function render(){var renderedChildren=this.props.children(this.state.currentStyle);return renderedChildren&&_react2.default.Children.only(renderedChildren)},Motion}(_react2.default.Component);exports.default=Motion,module.exports=exports.default},"./node_modules/react-motion/lib/StaggeredMotion.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _mapToZero2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mapToZero.js")),_stripStyle2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stripStyle.js")),_stepper4=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stepper.js")),_performanceNow2=_interopRequireDefault(__webpack_require__("./node_modules/performance-now/lib/performance-now.js")),_raf2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/raf/index.js")),_shouldStopAnimation2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/shouldStopAnimation.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),msPerFrame=1e3/60;var StaggeredMotion=function(_React$Component){function StaggeredMotion(props){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,StaggeredMotion),_React$Component.call(this,props),this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(unreadPropStyles){for(var _state=_this.state,currentStyles=_state.currentStyles,currentVelocities=_state.currentVelocities,lastIdealStyles=_state.lastIdealStyles,lastIdealVelocities=_state.lastIdealVelocities,someDirty=!1,i=0;i<unreadPropStyles.length;i++){var unreadPropStyle=unreadPropStyles[i],dirty=!1;for(var key in unreadPropStyle)if(Object.prototype.hasOwnProperty.call(unreadPropStyle,key)){var styleValue=unreadPropStyle[key];"number"==typeof styleValue&&(dirty||(dirty=!0,someDirty=!0,currentStyles[i]=_extends({},currentStyles[i]),currentVelocities[i]=_extends({},currentVelocities[i]),lastIdealStyles[i]=_extends({},lastIdealStyles[i]),lastIdealVelocities[i]=_extends({},lastIdealVelocities[i])),currentStyles[i][key]=styleValue,currentVelocities[i][key]=0,lastIdealStyles[i][key]=styleValue,lastIdealVelocities[i][key]=0)}}someDirty&&_this.setState({currentStyles,currentVelocities,lastIdealStyles,lastIdealVelocities})},this.startAnimationIfNecessary=function(){_this.animationID=_raf2.default((function(timestamp){var destStyles=_this.props.styles(_this.state.lastIdealStyles);if(function shouldStopAnimationAll(currentStyles,styles,currentVelocities){for(var i=0;i<currentStyles.length;i++)if(!_shouldStopAnimation2.default(currentStyles[i],styles[i],currentVelocities[i]))return!1;return!0}(_this.state.currentStyles,destStyles,_this.state.currentVelocities))return _this.animationID=null,void(_this.accumulatedTime=0);var currentTime=timestamp||_performanceNow2.default(),timeDelta=currentTime-_this.prevTime;if(_this.prevTime=currentTime,_this.accumulatedTime=_this.accumulatedTime+timeDelta,_this.accumulatedTime>10*msPerFrame&&(_this.accumulatedTime=0),0===_this.accumulatedTime)return _this.animationID=null,void _this.startAnimationIfNecessary();for(var currentFrameCompletion=(_this.accumulatedTime-Math.floor(_this.accumulatedTime/msPerFrame)*msPerFrame)/msPerFrame,framesToCatchUp=Math.floor(_this.accumulatedTime/msPerFrame),newLastIdealStyles=[],newLastIdealVelocities=[],newCurrentStyles=[],newCurrentVelocities=[],i=0;i<destStyles.length;i++){var destStyle=destStyles[i],newCurrentStyle={},newCurrentVelocity={},newLastIdealStyle={},newLastIdealVelocity={};for(var key in destStyle)if(Object.prototype.hasOwnProperty.call(destStyle,key)){var styleValue=destStyle[key];if("number"==typeof styleValue)newCurrentStyle[key]=styleValue,newCurrentVelocity[key]=0,newLastIdealStyle[key]=styleValue,newLastIdealVelocity[key]=0;else{for(var newLastIdealStyleValue=_this.state.lastIdealStyles[i][key],newLastIdealVelocityValue=_this.state.lastIdealVelocities[i][key],j=0;j<framesToCatchUp;j++){var _stepper=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision);newLastIdealStyleValue=_stepper[0],newLastIdealVelocityValue=_stepper[1]}var _stepper2=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision),nextIdealX=_stepper2[0],nextIdealV=_stepper2[1];newCurrentStyle[key]=newLastIdealStyleValue+(nextIdealX-newLastIdealStyleValue)*currentFrameCompletion,newCurrentVelocity[key]=newLastIdealVelocityValue+(nextIdealV-newLastIdealVelocityValue)*currentFrameCompletion,newLastIdealStyle[key]=newLastIdealStyleValue,newLastIdealVelocity[key]=newLastIdealVelocityValue}}newCurrentStyles[i]=newCurrentStyle,newCurrentVelocities[i]=newCurrentVelocity,newLastIdealStyles[i]=newLastIdealStyle,newLastIdealVelocities[i]=newLastIdealVelocity}_this.animationID=null,_this.accumulatedTime-=framesToCatchUp*msPerFrame,_this.setState({currentStyles:newCurrentStyles,currentVelocities:newCurrentVelocities,lastIdealStyles:newLastIdealStyles,lastIdealVelocities:newLastIdealVelocities}),_this.unreadPropStyles=null,_this.startAnimationIfNecessary()}))},this.state=this.defaultState()}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(StaggeredMotion,_React$Component),_createClass(StaggeredMotion,null,[{key:"propTypes",value:{defaultStyles:_propTypes2.default.arrayOf(_propTypes2.default.objectOf(_propTypes2.default.number)),styles:_propTypes2.default.func.isRequired,children:_propTypes2.default.func.isRequired},enumerable:!0}]),StaggeredMotion.prototype.defaultState=function defaultState(){var _props=this.props,defaultStyles=_props.defaultStyles,styles=_props.styles,currentStyles=defaultStyles||styles().map(_stripStyle2.default),currentVelocities=currentStyles.map((function(currentStyle){return _mapToZero2.default(currentStyle)}));return{currentStyles,currentVelocities,lastIdealStyles:currentStyles,lastIdealVelocities:currentVelocities}},StaggeredMotion.prototype.componentDidMount=function componentDidMount(){this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary()},StaggeredMotion.prototype.componentWillReceiveProps=function componentWillReceiveProps(props){null!=this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles),this.unreadPropStyles=props.styles(this.state.lastIdealStyles),null==this.animationID&&(this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary())},StaggeredMotion.prototype.componentWillUnmount=function componentWillUnmount(){null!=this.animationID&&(_raf2.default.cancel(this.animationID),this.animationID=null)},StaggeredMotion.prototype.render=function render(){var renderedChildren=this.props.children(this.state.currentStyles);return renderedChildren&&_react2.default.Children.only(renderedChildren)},StaggeredMotion}(_react2.default.Component);exports.default=StaggeredMotion,module.exports=exports.default},"./node_modules/react-motion/lib/TransitionMotion.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _mapToZero2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mapToZero.js")),_stripStyle2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stripStyle.js")),_stepper4=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/stepper.js")),_mergeDiff2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/mergeDiff.js")),_performanceNow2=_interopRequireDefault(__webpack_require__("./node_modules/performance-now/lib/performance-now.js")),_raf2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/node_modules/raf/index.js")),_shouldStopAnimation2=_interopRequireDefault(__webpack_require__("./node_modules/react-motion/lib/shouldStopAnimation.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),msPerFrame=1e3/60;function rehydrateStyles(mergedPropsStyles,unreadPropStyles,plainStyles){var cUnreadPropStyles=unreadPropStyles;return null==cUnreadPropStyles?mergedPropsStyles.map((function(mergedPropsStyle,i){return{key:mergedPropsStyle.key,data:mergedPropsStyle.data,style:plainStyles[i]}})):mergedPropsStyles.map((function(mergedPropsStyle,i){for(var j=0;j<cUnreadPropStyles.length;j++)if(cUnreadPropStyles[j].key===mergedPropsStyle.key)return{key:cUnreadPropStyles[j].key,data:cUnreadPropStyles[j].data,style:plainStyles[i]};return{key:mergedPropsStyle.key,data:mergedPropsStyle.data,style:plainStyles[i]}}))}function mergeAndSync(willEnter,willLeave,didLeave,oldMergedPropsStyles,destStyles,oldCurrentStyles,oldCurrentVelocities,oldLastIdealStyles,oldLastIdealVelocities){for(var newMergedPropsStyles=_mergeDiff2.default(oldMergedPropsStyles,destStyles,(function(oldIndex,oldMergedPropsStyle){var leavingStyle=willLeave(oldMergedPropsStyle);return null==leavingStyle||_shouldStopAnimation2.default(oldCurrentStyles[oldIndex],leavingStyle,oldCurrentVelocities[oldIndex])?(didLeave({key:oldMergedPropsStyle.key,data:oldMergedPropsStyle.data}),null):{key:oldMergedPropsStyle.key,data:oldMergedPropsStyle.data,style:leavingStyle}})),newCurrentStyles=[],newCurrentVelocities=[],newLastIdealStyles=[],newLastIdealVelocities=[],i=0;i<newMergedPropsStyles.length;i++){for(var newMergedPropsStyleCell=newMergedPropsStyles[i],foundOldIndex=null,j=0;j<oldMergedPropsStyles.length;j++)if(oldMergedPropsStyles[j].key===newMergedPropsStyleCell.key){foundOldIndex=j;break}if(null==foundOldIndex){var plainStyle=willEnter(newMergedPropsStyleCell);newCurrentStyles[i]=plainStyle,newLastIdealStyles[i]=plainStyle;var velocity=_mapToZero2.default(newMergedPropsStyleCell.style);newCurrentVelocities[i]=velocity,newLastIdealVelocities[i]=velocity}else newCurrentStyles[i]=oldCurrentStyles[foundOldIndex],newLastIdealStyles[i]=oldLastIdealStyles[foundOldIndex],newCurrentVelocities[i]=oldCurrentVelocities[foundOldIndex],newLastIdealVelocities[i]=oldLastIdealVelocities[foundOldIndex]}return[newMergedPropsStyles,newCurrentStyles,newCurrentVelocities,newLastIdealStyles,newLastIdealVelocities]}var TransitionMotion=function(_React$Component){function TransitionMotion(props){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,TransitionMotion),_React$Component.call(this,props),this.unmounting=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(unreadPropStyles){for(var _mergeAndSync=mergeAndSync(_this.props.willEnter,_this.props.willLeave,_this.props.didLeave,_this.state.mergedPropsStyles,unreadPropStyles,_this.state.currentStyles,_this.state.currentVelocities,_this.state.lastIdealStyles,_this.state.lastIdealVelocities),mergedPropsStyles=_mergeAndSync[0],currentStyles=_mergeAndSync[1],currentVelocities=_mergeAndSync[2],lastIdealStyles=_mergeAndSync[3],lastIdealVelocities=_mergeAndSync[4],i=0;i<unreadPropStyles.length;i++){var unreadPropStyle=unreadPropStyles[i].style,dirty=!1;for(var key in unreadPropStyle)if(Object.prototype.hasOwnProperty.call(unreadPropStyle,key)){var styleValue=unreadPropStyle[key];"number"==typeof styleValue&&(dirty||(dirty=!0,currentStyles[i]=_extends({},currentStyles[i]),currentVelocities[i]=_extends({},currentVelocities[i]),lastIdealStyles[i]=_extends({},lastIdealStyles[i]),lastIdealVelocities[i]=_extends({},lastIdealVelocities[i]),mergedPropsStyles[i]={key:mergedPropsStyles[i].key,data:mergedPropsStyles[i].data,style:_extends({},mergedPropsStyles[i].style)}),currentStyles[i][key]=styleValue,currentVelocities[i][key]=0,lastIdealStyles[i][key]=styleValue,lastIdealVelocities[i][key]=0,mergedPropsStyles[i].style[key]=styleValue)}}_this.setState({currentStyles,currentVelocities,mergedPropsStyles,lastIdealStyles,lastIdealVelocities})},this.startAnimationIfNecessary=function(){_this.unmounting||(_this.animationID=_raf2.default((function(timestamp){if(!_this.unmounting){var propStyles=_this.props.styles,destStyles="function"==typeof propStyles?propStyles(rehydrateStyles(_this.state.mergedPropsStyles,_this.unreadPropStyles,_this.state.lastIdealStyles)):propStyles;if(function shouldStopAnimationAll(currentStyles,destStyles,currentVelocities,mergedPropsStyles){if(mergedPropsStyles.length!==destStyles.length)return!1;for(var i=0;i<mergedPropsStyles.length;i++)if(mergedPropsStyles[i].key!==destStyles[i].key)return!1;for(i=0;i<mergedPropsStyles.length;i++)if(!_shouldStopAnimation2.default(currentStyles[i],destStyles[i].style,currentVelocities[i]))return!1;return!0}(_this.state.currentStyles,destStyles,_this.state.currentVelocities,_this.state.mergedPropsStyles))return _this.animationID=null,void(_this.accumulatedTime=0);var currentTime=timestamp||_performanceNow2.default(),timeDelta=currentTime-_this.prevTime;if(_this.prevTime=currentTime,_this.accumulatedTime=_this.accumulatedTime+timeDelta,_this.accumulatedTime>10*msPerFrame&&(_this.accumulatedTime=0),0===_this.accumulatedTime)return _this.animationID=null,void _this.startAnimationIfNecessary();for(var currentFrameCompletion=(_this.accumulatedTime-Math.floor(_this.accumulatedTime/msPerFrame)*msPerFrame)/msPerFrame,framesToCatchUp=Math.floor(_this.accumulatedTime/msPerFrame),_mergeAndSync2=mergeAndSync(_this.props.willEnter,_this.props.willLeave,_this.props.didLeave,_this.state.mergedPropsStyles,destStyles,_this.state.currentStyles,_this.state.currentVelocities,_this.state.lastIdealStyles,_this.state.lastIdealVelocities),newMergedPropsStyles=_mergeAndSync2[0],newCurrentStyles=_mergeAndSync2[1],newCurrentVelocities=_mergeAndSync2[2],newLastIdealStyles=_mergeAndSync2[3],newLastIdealVelocities=_mergeAndSync2[4],i=0;i<newMergedPropsStyles.length;i++){var newMergedPropsStyle=newMergedPropsStyles[i].style,newCurrentStyle={},newCurrentVelocity={},newLastIdealStyle={},newLastIdealVelocity={};for(var key in newMergedPropsStyle)if(Object.prototype.hasOwnProperty.call(newMergedPropsStyle,key)){var styleValue=newMergedPropsStyle[key];if("number"==typeof styleValue)newCurrentStyle[key]=styleValue,newCurrentVelocity[key]=0,newLastIdealStyle[key]=styleValue,newLastIdealVelocity[key]=0;else{for(var newLastIdealStyleValue=newLastIdealStyles[i][key],newLastIdealVelocityValue=newLastIdealVelocities[i][key],j=0;j<framesToCatchUp;j++){var _stepper=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision);newLastIdealStyleValue=_stepper[0],newLastIdealVelocityValue=_stepper[1]}var _stepper2=_stepper4.default(msPerFrame/1e3,newLastIdealStyleValue,newLastIdealVelocityValue,styleValue.val,styleValue.stiffness,styleValue.damping,styleValue.precision),nextIdealX=_stepper2[0],nextIdealV=_stepper2[1];newCurrentStyle[key]=newLastIdealStyleValue+(nextIdealX-newLastIdealStyleValue)*currentFrameCompletion,newCurrentVelocity[key]=newLastIdealVelocityValue+(nextIdealV-newLastIdealVelocityValue)*currentFrameCompletion,newLastIdealStyle[key]=newLastIdealStyleValue,newLastIdealVelocity[key]=newLastIdealVelocityValue}}newLastIdealStyles[i]=newLastIdealStyle,newLastIdealVelocities[i]=newLastIdealVelocity,newCurrentStyles[i]=newCurrentStyle,newCurrentVelocities[i]=newCurrentVelocity}_this.animationID=null,_this.accumulatedTime-=framesToCatchUp*msPerFrame,_this.setState({currentStyles:newCurrentStyles,currentVelocities:newCurrentVelocities,lastIdealStyles:newLastIdealStyles,lastIdealVelocities:newLastIdealVelocities,mergedPropsStyles:newMergedPropsStyles}),_this.unreadPropStyles=null,_this.startAnimationIfNecessary()}})))},this.state=this.defaultState()}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(TransitionMotion,_React$Component),_createClass(TransitionMotion,null,[{key:"propTypes",value:{defaultStyles:_propTypes2.default.arrayOf(_propTypes2.default.shape({key:_propTypes2.default.string.isRequired,data:_propTypes2.default.any,style:_propTypes2.default.objectOf(_propTypes2.default.number).isRequired})),styles:_propTypes2.default.oneOfType([_propTypes2.default.func,_propTypes2.default.arrayOf(_propTypes2.default.shape({key:_propTypes2.default.string.isRequired,data:_propTypes2.default.any,style:_propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.number,_propTypes2.default.object])).isRequired}))]).isRequired,children:_propTypes2.default.func.isRequired,willEnter:_propTypes2.default.func,willLeave:_propTypes2.default.func,didLeave:_propTypes2.default.func},enumerable:!0},{key:"defaultProps",value:{willEnter:function willEnter(styleThatEntered){return _stripStyle2.default(styleThatEntered.style)},willLeave:function willLeave(){return null},didLeave:function didLeave(){}},enumerable:!0}]),TransitionMotion.prototype.defaultState=function defaultState(){var _props=this.props,defaultStyles=_props.defaultStyles,styles=_props.styles,willEnter=_props.willEnter,willLeave=_props.willLeave,didLeave=_props.didLeave,destStyles="function"==typeof styles?styles(defaultStyles):styles,oldMergedPropsStyles=void 0;oldMergedPropsStyles=null==defaultStyles?destStyles:defaultStyles.map((function(defaultStyleCell){for(var i=0;i<destStyles.length;i++)if(destStyles[i].key===defaultStyleCell.key)return destStyles[i];return defaultStyleCell}));var oldCurrentStyles=null==defaultStyles?destStyles.map((function(s){return _stripStyle2.default(s.style)})):defaultStyles.map((function(s){return _stripStyle2.default(s.style)})),oldCurrentVelocities=null==defaultStyles?destStyles.map((function(s){return _mapToZero2.default(s.style)})):defaultStyles.map((function(s){return _mapToZero2.default(s.style)})),_mergeAndSync3=mergeAndSync(willEnter,willLeave,didLeave,oldMergedPropsStyles,destStyles,oldCurrentStyles,oldCurrentVelocities,oldCurrentStyles,oldCurrentVelocities),mergedPropsStyles=_mergeAndSync3[0];return{currentStyles:_mergeAndSync3[1],currentVelocities:_mergeAndSync3[2],lastIdealStyles:_mergeAndSync3[3],lastIdealVelocities:_mergeAndSync3[4],mergedPropsStyles}},TransitionMotion.prototype.componentDidMount=function componentDidMount(){this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary()},TransitionMotion.prototype.componentWillReceiveProps=function componentWillReceiveProps(props){this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles);var styles=props.styles;this.unreadPropStyles="function"==typeof styles?styles(rehydrateStyles(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.lastIdealStyles)):styles,null==this.animationID&&(this.prevTime=_performanceNow2.default(),this.startAnimationIfNecessary())},TransitionMotion.prototype.componentWillUnmount=function componentWillUnmount(){this.unmounting=!0,null!=this.animationID&&(_raf2.default.cancel(this.animationID),this.animationID=null)},TransitionMotion.prototype.render=function render(){var hydratedStyles=rehydrateStyles(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.currentStyles),renderedChildren=this.props.children(hydratedStyles);return renderedChildren&&_react2.default.Children.only(renderedChildren)},TransitionMotion}(_react2.default.Component);exports.default=TransitionMotion,module.exports=exports.default},"./node_modules/react-motion/lib/mapToZero.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function mapToZero(obj){var ret={};for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(ret[key]=0);return ret},module.exports=exports.default},"./node_modules/react-motion/lib/mergeDiff.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function mergeDiff(prev,next,onRemove){for(var prevKeyIndex={},i=0;i<prev.length;i++)prevKeyIndex[prev[i].key]=i;var nextKeyIndex={};for(i=0;i<next.length;i++)nextKeyIndex[next[i].key]=i;var ret=[];for(i=0;i<next.length;i++)ret[i]=next[i];for(i=0;i<prev.length;i++)if(!Object.prototype.hasOwnProperty.call(nextKeyIndex,prev[i].key)){var fill=onRemove(i,prev[i]);null!=fill&&ret.push(fill)}return ret.sort((function(a,b){var nextOrderA=nextKeyIndex[a.key],nextOrderB=nextKeyIndex[b.key],prevOrderA=prevKeyIndex[a.key],prevOrderB=prevKeyIndex[b.key];if(null!=nextOrderA&&null!=nextOrderB)return nextKeyIndex[a.key]-nextKeyIndex[b.key];if(null!=prevOrderA&&null!=prevOrderB)return prevKeyIndex[a.key]-prevKeyIndex[b.key];if(null!=nextOrderA){for(var i=0;i<next.length;i++){var pivot=next[i].key;if(Object.prototype.hasOwnProperty.call(prevKeyIndex,pivot)){if(nextOrderA<nextKeyIndex[pivot]&&prevOrderB>prevKeyIndex[pivot])return-1;if(nextOrderA>nextKeyIndex[pivot]&&prevOrderB<prevKeyIndex[pivot])return 1}}return 1}for(i=0;i<next.length;i++){pivot=next[i].key;if(Object.prototype.hasOwnProperty.call(prevKeyIndex,pivot)){if(nextOrderB<nextKeyIndex[pivot]&&prevOrderA>prevKeyIndex[pivot])return 1;if(nextOrderB>nextKeyIndex[pivot]&&prevOrderA<prevKeyIndex[pivot])return-1}}return-1}))},module.exports=exports.default},"./node_modules/react-motion/lib/presets.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default={noWobble:{stiffness:170,damping:26},gentle:{stiffness:120,damping:14},wobbly:{stiffness:180,damping:12},stiff:{stiffness:210,damping:20}},module.exports=exports.default},"./node_modules/react-motion/lib/react-motion.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _interopRequire(obj){return obj&&obj.__esModule?obj.default:obj}exports.__esModule=!0;var _Motion=__webpack_require__("./node_modules/react-motion/lib/Motion.js");exports.Motion=_interopRequire(_Motion);var _StaggeredMotion=__webpack_require__("./node_modules/react-motion/lib/StaggeredMotion.js");exports.StaggeredMotion=_interopRequire(_StaggeredMotion);var _TransitionMotion=__webpack_require__("./node_modules/react-motion/lib/TransitionMotion.js");exports.TransitionMotion=_interopRequire(_TransitionMotion);var _spring=__webpack_require__("./node_modules/react-motion/lib/spring.js");exports.spring=_interopRequire(_spring);var _presets=__webpack_require__("./node_modules/react-motion/lib/presets.js");exports.presets=_interopRequire(_presets);var _stripStyle=__webpack_require__("./node_modules/react-motion/lib/stripStyle.js");exports.stripStyle=_interopRequire(_stripStyle);var _reorderKeys=__webpack_require__("./node_modules/react-motion/lib/reorderKeys.js");exports.reorderKeys=_interopRequire(_reorderKeys)},"./node_modules/react-motion/lib/reorderKeys.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function reorderKeys(){0};module.exports=exports.default},"./node_modules/react-motion/lib/shouldStopAnimation.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function shouldStopAnimation(currentStyle,style,currentVelocity){for(var key in style)if(Object.prototype.hasOwnProperty.call(style,key)){if(0!==currentVelocity[key])return!1;var styleValue="number"==typeof style[key]?style[key]:style[key].val;if(currentStyle[key]!==styleValue)return!1}return!0},module.exports=exports.default},"./node_modules/react-motion/lib/spring.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};exports.default=function spring(val,config){return _extends({},defaultConfig,config,{val})};var _presets2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react-motion/lib/presets.js")),defaultConfig=_extends({},_presets2.default.noWobble,{precision:.01});module.exports=exports.default},"./node_modules/react-motion/lib/stepper.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function stepper(secondPerFrame,x,v,destX,k,b,precision){var newV=v+(-k*(x-destX)+-b*v)*secondPerFrame,newX=x+newV*secondPerFrame;if(Math.abs(newV)<precision&&Math.abs(newX-destX)<precision)return reusedTuple[0]=destX,reusedTuple[1]=0,reusedTuple;return reusedTuple[0]=newX,reusedTuple[1]=newV,reusedTuple};var reusedTuple=[0,0];module.exports=exports.default},"./node_modules/react-motion/lib/stripStyle.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function stripStyle(style){var ret={};for(var key in style)Object.prototype.hasOwnProperty.call(style,key)&&(ret[key]="number"==typeof style[key]?style[key]:style[key].val);return ret},module.exports=exports.default},"./node_modules/react-motion/node_modules/raf/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{for(var now=__webpack_require__("./node_modules/performance-now/lib/performance-now.js"),root="undefined"==typeof window?__webpack_require__.g:window,vendors=["moz","webkit"],suffix="AnimationFrame",raf=root["request"+suffix],caf=root["cancel"+suffix]||root["cancelRequest"+suffix],i=0;!raf&&i<vendors.length;i++)raf=root[vendors[i]+"Request"+suffix],caf=root[vendors[i]+"Cancel"+suffix]||root[vendors[i]+"CancelRequest"+suffix];if(!raf||!caf){var last=0,id=0,queue=[];raf=function(callback){if(0===queue.length){var _now=now(),next=Math.max(0,16.666666666666668-(_now-last));last=next+_now,setTimeout((function(){var cp=queue.slice(0);queue.length=0;for(var i=0;i<cp.length;i++)if(!cp[i].cancelled)try{cp[i].callback(last)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(next))}return queue.push({handle:++id,callback,cancelled:!1}),id},caf=function(handle){for(var i=0;i<queue.length;i++)queue[i].handle===handle&&(queue[i].cancelled=!0)}}module.exports=function(fn){return raf.call(root,fn)},module.exports.cancel=function(){caf.apply(root,arguments)},module.exports.polyfill=function(){root.requestAnimationFrame=raf,root.cancelAnimationFrame=caf}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW90aW9uL2xpYi9Nb3Rpb24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vdGlvbi9saWIvU3RhZ2dlcmVkTW90aW9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb3Rpb24vbGliL1RyYW5zaXRpb25Nb3Rpb24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vdGlvbi9saWIvbWFwVG9aZXJvLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb3Rpb24vbGliL21lcmdlRGlmZi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW90aW9uL2xpYi9wcmVzZXRzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb3Rpb24vbGliL3JlYWN0LW1vdGlvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW90aW9uL2xpYi9yZW9yZGVyS2V5cy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW90aW9uL2xpYi9zaG91bGRTdG9wQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb3Rpb24vbGliL3NwcmluZy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW90aW9uL2xpYi9zdGVwcGVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb3Rpb24vbGliL3N0cmlwU3R5bGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vdGlvbi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS43LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIGdldE5hbm9TZWNvbmRzLCBocnRpbWUsIGxvYWRUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIGxvYWRUaW1lKSAvIDFlNjtcbiAgICB9O1xuICAgIGhydGltZSA9IHByb2Nlc3MuaHJ0aW1lO1xuICAgIGdldE5hbm9TZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaHI7XG4gICAgICBociA9IGhydGltZSgpO1xuICAgICAgcmV0dXJuIGhyWzBdICogMWU5ICsgaHJbMV07XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IGdldE5hbm9TZWNvbmRzKCk7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfbWFwVG9aZXJvID0gcmVxdWlyZSgnLi9tYXBUb1plcm8nKTtcblxudmFyIF9tYXBUb1plcm8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwVG9aZXJvKTtcblxudmFyIF9zdHJpcFN0eWxlID0gcmVxdWlyZSgnLi9zdHJpcFN0eWxlJyk7XG5cbnZhciBfc3RyaXBTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpcFN0eWxlKTtcblxudmFyIF9zdGVwcGVyMyA9IHJlcXVpcmUoJy4vc3RlcHBlcicpO1xuXG52YXIgX3N0ZXBwZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RlcHBlcjMpO1xuXG52YXIgX3BlcmZvcm1hbmNlTm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93Jyk7XG5cbnZhciBfcGVyZm9ybWFuY2VOb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGVyZm9ybWFuY2VOb3cpO1xuXG52YXIgX3JhZiA9IHJlcXVpcmUoJ3JhZicpO1xuXG52YXIgX3JhZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yYWYpO1xuXG52YXIgX3Nob3VsZFN0b3BBbmltYXRpb24gPSByZXF1aXJlKCcuL3Nob3VsZFN0b3BBbmltYXRpb24nKTtcblxudmFyIF9zaG91bGRTdG9wQW5pbWF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3VsZFN0b3BBbmltYXRpb24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgbXNQZXJGcmFtZSA9IDEwMDAgLyA2MDtcblxudmFyIE1vdGlvbiA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW90aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoTW90aW9uLCBudWxsLCBbe1xuICAgIGtleTogJ3Byb3BUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIC8vIFRPT0Q6IHdhcm4gYWdhaW5zdCBwdXR0aW5nIGEgY29uZmlnIGluIGhlcmVcbiAgICAgIGRlZmF1bHRTdHlsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3RPZihfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlciksXG4gICAgICBzdHlsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3RPZihfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0XSkpLmlzUmVxdWlyZWQsXG4gICAgICBjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvblJlc3Q6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuY1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gTW90aW9uKHByb3BzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb3Rpb24pO1xuXG4gICAgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICB0aGlzLndhc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuYW5pbWF0aW9uSUQgPSBudWxsO1xuICAgIHRoaXMucHJldlRpbWUgPSAwO1xuICAgIHRoaXMuYWNjdW11bGF0ZWRUaW1lID0gMDtcbiAgICB0aGlzLnVucmVhZFByb3BTdHlsZSA9IG51bGw7XG5cbiAgICB0aGlzLmNsZWFyVW5yZWFkUHJvcFN0eWxlID0gZnVuY3Rpb24gKGRlc3RTdHlsZSkge1xuICAgICAgdmFyIGRpcnR5ID0gZmFsc2U7XG4gICAgICB2YXIgX3N0YXRlID0gX3RoaXMuc3RhdGU7XG4gICAgICB2YXIgY3VycmVudFN0eWxlID0gX3N0YXRlLmN1cnJlbnRTdHlsZTtcbiAgICAgIHZhciBjdXJyZW50VmVsb2NpdHkgPSBfc3RhdGUuY3VycmVudFZlbG9jaXR5O1xuICAgICAgdmFyIGxhc3RJZGVhbFN0eWxlID0gX3N0YXRlLmxhc3RJZGVhbFN0eWxlO1xuICAgICAgdmFyIGxhc3RJZGVhbFZlbG9jaXR5ID0gX3N0YXRlLmxhc3RJZGVhbFZlbG9jaXR5O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gZGVzdFN0eWxlKSB7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc3RTdHlsZSwga2V5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0eWxlVmFsdWUgPSBkZXN0U3R5bGVba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGlmICghZGlydHkpIHtcbiAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGN1cnJlbnRTdHlsZSA9IF9leHRlbmRzKHt9LCBjdXJyZW50U3R5bGUpO1xuICAgICAgICAgICAgY3VycmVudFZlbG9jaXR5ID0gX2V4dGVuZHMoe30sIGN1cnJlbnRWZWxvY2l0eSk7XG4gICAgICAgICAgICBsYXN0SWRlYWxTdHlsZSA9IF9leHRlbmRzKHt9LCBsYXN0SWRlYWxTdHlsZSk7XG4gICAgICAgICAgICBsYXN0SWRlYWxWZWxvY2l0eSA9IF9leHRlbmRzKHt9LCBsYXN0SWRlYWxWZWxvY2l0eSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFN0eWxlW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgIGN1cnJlbnRWZWxvY2l0eVtrZXldID0gMDtcbiAgICAgICAgICBsYXN0SWRlYWxTdHlsZVtrZXldID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgICBsYXN0SWRlYWxWZWxvY2l0eVtrZXldID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGlydHkpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBjdXJyZW50U3R5bGU6IGN1cnJlbnRTdHlsZSwgY3VycmVudFZlbG9jaXR5OiBjdXJyZW50VmVsb2NpdHksIGxhc3RJZGVhbFN0eWxlOiBsYXN0SWRlYWxTdHlsZSwgbGFzdElkZWFsVmVsb2NpdHk6IGxhc3RJZGVhbFZlbG9jaXR5IH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uSWZOZWNlc3NhcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUT0RPOiB3aGVuIGNvbmZpZyBpcyB7YTogMTB9IGFuZCBkZXN0IGlzIHthOiAxMH0gZG8gd2UgcmFmIG9uY2UgYW5kXG4gICAgICAvLyBjYWxsIGNiPyBObywgb3RoZXJ3aXNlIGFjY2lkZW50YWwgcGFyZW50IHJlcmVuZGVyIGNhdXNlcyBjYiB0cmlnZ2VyXG4gICAgICBfdGhpcy5hbmltYXRpb25JRCA9IF9yYWYyWydkZWZhdWx0J10oZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIGFuaW1hdGUgaW4gdGhlIGZpcnN0IHBsYWNlXG4gICAgICAgIHZhciBwcm9wc1N0eWxlID0gX3RoaXMucHJvcHMuc3R5bGU7XG4gICAgICAgIGlmIChfc2hvdWxkU3RvcEFuaW1hdGlvbjJbJ2RlZmF1bHQnXShfdGhpcy5zdGF0ZS5jdXJyZW50U3R5bGUsIHByb3BzU3R5bGUsIF90aGlzLnN0YXRlLmN1cnJlbnRWZWxvY2l0eSkpIHtcbiAgICAgICAgICBpZiAoX3RoaXMud2FzQW5pbWF0aW5nICYmIF90aGlzLnByb3BzLm9uUmVzdCkge1xuICAgICAgICAgICAgX3RoaXMucHJvcHMub25SZXN0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbm8gbmVlZCB0byBjYW5jZWwgYW5pbWF0aW9uSUQgaGVyZTsgc2hvdWxkbid0IGhhdmUgYW55IGluIGZsaWdodFxuICAgICAgICAgIF90aGlzLmFuaW1hdGlvbklEID0gbnVsbDtcbiAgICAgICAgICBfdGhpcy53YXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgPSAwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLndhc0FuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGltZXN0YW1wIHx8IF9wZXJmb3JtYW5jZU5vdzJbJ2RlZmF1bHQnXSgpO1xuICAgICAgICB2YXIgdGltZURlbHRhID0gY3VycmVudFRpbWUgLSBfdGhpcy5wcmV2VGltZTtcbiAgICAgICAgX3RoaXMucHJldlRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgX3RoaXMuYWNjdW11bGF0ZWRUaW1lID0gX3RoaXMuYWNjdW11bGF0ZWRUaW1lICsgdGltZURlbHRhO1xuICAgICAgICAvLyBtb3JlIHRoYW4gMTAgZnJhbWVzPyBwcm9sbHkgc3dpdGNoZWQgYnJvd3NlciB0YWIuIFJlc3RhcnRcbiAgICAgICAgaWYgKF90aGlzLmFjY3VtdWxhdGVkVGltZSA+IG1zUGVyRnJhbWUgKiAxMCkge1xuICAgICAgICAgIF90aGlzLmFjY3VtdWxhdGVkVGltZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMuYWNjdW11bGF0ZWRUaW1lID09PSAwKSB7XG4gICAgICAgICAgLy8gbm8gbmVlZCB0byBjYW5jZWwgYW5pbWF0aW9uSUQgaGVyZTsgc2hvdWxkbid0IGhhdmUgYW55IGluIGZsaWdodFxuICAgICAgICAgIF90aGlzLmFuaW1hdGlvbklEID0gbnVsbDtcbiAgICAgICAgICBfdGhpcy5zdGFydEFuaW1hdGlvbklmTmVjZXNzYXJ5KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRGcmFtZUNvbXBsZXRpb24gPSAoX3RoaXMuYWNjdW11bGF0ZWRUaW1lIC0gTWF0aC5mbG9vcihfdGhpcy5hY2N1bXVsYXRlZFRpbWUgLyBtc1BlckZyYW1lKSAqIG1zUGVyRnJhbWUpIC8gbXNQZXJGcmFtZTtcbiAgICAgICAgdmFyIGZyYW1lc1RvQ2F0Y2hVcCA9IE1hdGguZmxvb3IoX3RoaXMuYWNjdW11bGF0ZWRUaW1lIC8gbXNQZXJGcmFtZSk7XG5cbiAgICAgICAgdmFyIG5ld0xhc3RJZGVhbFN0eWxlID0ge307XG4gICAgICAgIHZhciBuZXdMYXN0SWRlYWxWZWxvY2l0eSA9IHt9O1xuICAgICAgICB2YXIgbmV3Q3VycmVudFN0eWxlID0ge307XG4gICAgICAgIHZhciBuZXdDdXJyZW50VmVsb2NpdHkgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNTdHlsZSkge1xuICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzU3R5bGUsIGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZVZhbHVlID0gcHJvcHNTdHlsZVtrZXldO1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG5ld0N1cnJlbnRTdHlsZVtrZXldID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgICAgIG5ld0N1cnJlbnRWZWxvY2l0eVtrZXldID0gMDtcbiAgICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgICAgbmV3TGFzdElkZWFsVmVsb2NpdHlba2V5XSA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlID0gX3RoaXMuc3RhdGUubGFzdElkZWFsU3R5bGVba2V5XTtcbiAgICAgICAgICAgIHZhciBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlID0gX3RoaXMuc3RhdGUubGFzdElkZWFsVmVsb2NpdHlba2V5XTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhbWVzVG9DYXRjaFVwOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIF9zdGVwcGVyID0gX3N0ZXBwZXI0WydkZWZhdWx0J10obXNQZXJGcmFtZSAvIDEwMDAsIG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUsIG5ld0xhc3RJZGVhbFZlbG9jaXR5VmFsdWUsIHN0eWxlVmFsdWUudmFsLCBzdHlsZVZhbHVlLnN0aWZmbmVzcywgc3R5bGVWYWx1ZS5kYW1waW5nLCBzdHlsZVZhbHVlLnByZWNpc2lvbik7XG5cbiAgICAgICAgICAgICAgbmV3TGFzdElkZWFsU3R5bGVWYWx1ZSA9IF9zdGVwcGVyWzBdO1xuICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlID0gX3N0ZXBwZXJbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfc3RlcHBlcjIgPSBfc3RlcHBlcjRbJ2RlZmF1bHQnXShtc1BlckZyYW1lIC8gMTAwMCwgbmV3TGFzdElkZWFsU3R5bGVWYWx1ZSwgbmV3TGFzdElkZWFsVmVsb2NpdHlWYWx1ZSwgc3R5bGVWYWx1ZS52YWwsIHN0eWxlVmFsdWUuc3RpZmZuZXNzLCBzdHlsZVZhbHVlLmRhbXBpbmcsIHN0eWxlVmFsdWUucHJlY2lzaW9uKTtcblxuICAgICAgICAgICAgdmFyIG5leHRJZGVhbFggPSBfc3RlcHBlcjJbMF07XG4gICAgICAgICAgICB2YXIgbmV4dElkZWFsViA9IF9zdGVwcGVyMlsxXTtcblxuICAgICAgICAgICAgbmV3Q3VycmVudFN0eWxlW2tleV0gPSBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlICsgKG5leHRJZGVhbFggLSBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlKSAqIGN1cnJlbnRGcmFtZUNvbXBsZXRpb247XG4gICAgICAgICAgICBuZXdDdXJyZW50VmVsb2NpdHlba2V5XSA9IG5ld0xhc3RJZGVhbFZlbG9jaXR5VmFsdWUgKyAobmV4dElkZWFsViAtIG5ld0xhc3RJZGVhbFZlbG9jaXR5VmFsdWUpICogY3VycmVudEZyYW1lQ29tcGxldGlvbjtcbiAgICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlW2tleV0gPSBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlO1xuICAgICAgICAgICAgbmV3TGFzdElkZWFsVmVsb2NpdHlba2V5XSA9IG5ld0xhc3RJZGVhbFZlbG9jaXR5VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYW5pbWF0aW9uSUQgPSBudWxsO1xuICAgICAgICAvLyB0aGUgYW1vdW50IHdlJ3JlIGxvb3BlZCBvdmVyIGFib3ZlXG4gICAgICAgIF90aGlzLmFjY3VtdWxhdGVkVGltZSAtPSBmcmFtZXNUb0NhdGNoVXAgKiBtc1BlckZyYW1lO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjdXJyZW50U3R5bGU6IG5ld0N1cnJlbnRTdHlsZSxcbiAgICAgICAgICBjdXJyZW50VmVsb2NpdHk6IG5ld0N1cnJlbnRWZWxvY2l0eSxcbiAgICAgICAgICBsYXN0SWRlYWxTdHlsZTogbmV3TGFzdElkZWFsU3R5bGUsXG4gICAgICAgICAgbGFzdElkZWFsVmVsb2NpdHk6IG5ld0xhc3RJZGVhbFZlbG9jaXR5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnVucmVhZFByb3BTdHlsZSA9IG51bGw7XG5cbiAgICAgICAgX3RoaXMuc3RhcnRBbmltYXRpb25JZk5lY2Vzc2FyeSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmRlZmF1bHRTdGF0ZSgpO1xuICB9XG5cbiAgTW90aW9uLnByb3RvdHlwZS5kZWZhdWx0U3RhdGUgPSBmdW5jdGlvbiBkZWZhdWx0U3RhdGUoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRlZmF1bHRTdHlsZSA9IF9wcm9wcy5kZWZhdWx0U3R5bGU7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIGN1cnJlbnRTdHlsZSA9IGRlZmF1bHRTdHlsZSB8fCBfc3RyaXBTdHlsZTJbJ2RlZmF1bHQnXShzdHlsZSk7XG4gICAgdmFyIGN1cnJlbnRWZWxvY2l0eSA9IF9tYXBUb1plcm8yWydkZWZhdWx0J10oY3VycmVudFN0eWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudFN0eWxlOiBjdXJyZW50U3R5bGUsXG4gICAgICBjdXJyZW50VmVsb2NpdHk6IGN1cnJlbnRWZWxvY2l0eSxcbiAgICAgIGxhc3RJZGVhbFN0eWxlOiBjdXJyZW50U3R5bGUsXG4gICAgICBsYXN0SWRlYWxWZWxvY2l0eTogY3VycmVudFZlbG9jaXR5XG4gICAgfTtcbiAgfTtcblxuICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgY3VycmVudFN0eWxlJ3MgdmFsdWUgaXMgc3RhbGU6IGlmIHByb3BzIGlzIGltbWVkaWF0ZWx5XG4gIC8vIGNoYW5nZWQgZnJvbSAwIHRvIDQwMCB0byBzcHJpbmcoMCkgYWdhaW4sIHRoZSBhc3luYyBjdXJyZW50U3R5bGUgaXMgc3RpbGxcbiAgLy8gYXQgMCAoZGlkbid0IGhhdmUgdGltZSB0byB0aWNrIGFuZCBpbnRlcnBvbGF0ZSBldmVuIG9uY2UpLiBJZiB3ZSBuYWl2ZWx5XG4gIC8vIGNvbXBhcmUgY3VycmVudFN0eWxlIHdpdGggZGVzdFZhbCBpdCdsbCBiZSAwID09PSAwIChubyBhbmltYXRpb24sIHN0b3ApLlxuICAvLyBJbiByZWFsaXR5IGN1cnJlbnRTdHlsZSBzaG91bGQgYmUgNDAwXG5cbiAgTW90aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJldlRpbWUgPSBfcGVyZm9ybWFuY2VOb3cyWydkZWZhdWx0J10oKTtcbiAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uSWZOZWNlc3NhcnkoKTtcbiAgfTtcblxuICBNb3Rpb24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XG4gICAgaWYgKHRoaXMudW5yZWFkUHJvcFN0eWxlICE9IG51bGwpIHtcbiAgICAgIC8vIHByZXZpb3VzIHByb3BzIGhhdmVuJ3QgaGFkIHRoZSBjaGFuY2UgdG8gYmUgc2V0IHlldDsgc2V0IHRoZW0gaGVyZVxuICAgICAgdGhpcy5jbGVhclVucmVhZFByb3BTdHlsZSh0aGlzLnVucmVhZFByb3BTdHlsZSk7XG4gICAgfVxuXG4gICAgdGhpcy51bnJlYWRQcm9wU3R5bGUgPSBwcm9wcy5zdHlsZTtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JRCA9PSBudWxsKSB7XG4gICAgICB0aGlzLnByZXZUaW1lID0gX3BlcmZvcm1hbmNlTm93MlsnZGVmYXVsdCddKCk7XG4gICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uSWZOZWNlc3NhcnkoKTtcbiAgICB9XG4gIH07XG5cbiAgTW90aW9uLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbklEICE9IG51bGwpIHtcbiAgICAgIF9yYWYyWydkZWZhdWx0J10uY2FuY2VsKHRoaXMuYW5pbWF0aW9uSUQpO1xuICAgICAgdGhpcy5hbmltYXRpb25JRCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIE1vdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByZW5kZXJlZENoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLnN0YXRlLmN1cnJlbnRTdHlsZSk7XG4gICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGRyZW4gJiYgX3JlYWN0MlsnZGVmYXVsdCddLkNoaWxkcmVuLm9ubHkocmVuZGVyZWRDaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIE1vdGlvbjtcbn0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBNb3Rpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLy8gYWZ0ZXIgY2hlY2tpbmcgZm9yIHVucmVhZFByb3BTdHlsZSAhPSBudWxsLCB3ZSBtYW51YWxseSBnbyBzZXQgdGhlXG4vLyBub24taW50ZXJwb2xhdGluZyB2YWx1ZXMgKHRob3NlIHRoYXQgYXJlIGEgbnVtYmVyLCB3aXRob3V0IGEgc3ByaW5nXG4vLyBjb25maWcpIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX21hcFRvWmVybyA9IHJlcXVpcmUoJy4vbWFwVG9aZXJvJyk7XG5cbnZhciBfbWFwVG9aZXJvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcFRvWmVybyk7XG5cbnZhciBfc3RyaXBTdHlsZSA9IHJlcXVpcmUoJy4vc3RyaXBTdHlsZScpO1xuXG52YXIgX3N0cmlwU3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaXBTdHlsZSk7XG5cbnZhciBfc3RlcHBlcjMgPSByZXF1aXJlKCcuL3N0ZXBwZXInKTtcblxudmFyIF9zdGVwcGVyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0ZXBwZXIzKTtcblxudmFyIF9wZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ3BlcmZvcm1hbmNlLW5vdycpO1xuXG52YXIgX3BlcmZvcm1hbmNlTm93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BlcmZvcm1hbmNlTm93KTtcblxudmFyIF9yYWYgPSByZXF1aXJlKCdyYWYnKTtcblxudmFyIF9yYWYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmFmKTtcblxudmFyIF9zaG91bGRTdG9wQW5pbWF0aW9uID0gcmVxdWlyZSgnLi9zaG91bGRTdG9wQW5pbWF0aW9uJyk7XG5cbnZhciBfc2hvdWxkU3RvcEFuaW1hdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaG91bGRTdG9wQW5pbWF0aW9uKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIG1zUGVyRnJhbWUgPSAxMDAwIC8gNjA7XG5cbmZ1bmN0aW9uIHNob3VsZFN0b3BBbmltYXRpb25BbGwoY3VycmVudFN0eWxlcywgc3R5bGVzLCBjdXJyZW50VmVsb2NpdGllcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRTdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIV9zaG91bGRTdG9wQW5pbWF0aW9uMlsnZGVmYXVsdCddKGN1cnJlbnRTdHlsZXNbaV0sIHN0eWxlc1tpXSwgY3VycmVudFZlbG9jaXRpZXNbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgU3RhZ2dlcmVkTW90aW9uID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdGFnZ2VyZWRNb3Rpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIF9jcmVhdGVDbGFzcyhTdGFnZ2VyZWRNb3Rpb24sIG51bGwsIFt7XG4gICAga2V5OiAncHJvcFR5cGVzJyxcbiAgICB2YWx1ZToge1xuICAgICAgLy8gVE9PRDogd2FybiBhZ2FpbnN0IHB1dHRpbmcgYSBjb25maWcgaW4gaGVyZVxuICAgICAgZGVmYXVsdFN0eWxlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hcnJheU9mKF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0T2YoX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIpKSxcbiAgICAgIHN0eWxlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWRcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIFN0YWdnZXJlZE1vdGlvbihwcm9wcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhZ2dlcmVkTW90aW9uKTtcblxuICAgIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgdGhpcy5hbmltYXRpb25JRCA9IG51bGw7XG4gICAgdGhpcy5wcmV2VGltZSA9IDA7XG4gICAgdGhpcy5hY2N1bXVsYXRlZFRpbWUgPSAwO1xuICAgIHRoaXMudW5yZWFkUHJvcFN0eWxlcyA9IG51bGw7XG5cbiAgICB0aGlzLmNsZWFyVW5yZWFkUHJvcFN0eWxlID0gZnVuY3Rpb24gKHVucmVhZFByb3BTdHlsZXMpIHtcbiAgICAgIHZhciBfc3RhdGUgPSBfdGhpcy5zdGF0ZTtcbiAgICAgIHZhciBjdXJyZW50U3R5bGVzID0gX3N0YXRlLmN1cnJlbnRTdHlsZXM7XG4gICAgICB2YXIgY3VycmVudFZlbG9jaXRpZXMgPSBfc3RhdGUuY3VycmVudFZlbG9jaXRpZXM7XG4gICAgICB2YXIgbGFzdElkZWFsU3R5bGVzID0gX3N0YXRlLmxhc3RJZGVhbFN0eWxlcztcbiAgICAgIHZhciBsYXN0SWRlYWxWZWxvY2l0aWVzID0gX3N0YXRlLmxhc3RJZGVhbFZlbG9jaXRpZXM7XG5cbiAgICAgIHZhciBzb21lRGlydHkgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5yZWFkUHJvcFN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdW5yZWFkUHJvcFN0eWxlID0gdW5yZWFkUHJvcFN0eWxlc1tpXTtcbiAgICAgICAgdmFyIGRpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHVucmVhZFByb3BTdHlsZSkge1xuICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHVucmVhZFByb3BTdHlsZSwga2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlVmFsdWUgPSB1bnJlYWRQcm9wU3R5bGVba2V5XTtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoIWRpcnR5KSB7XG4gICAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgc29tZURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY3VycmVudFN0eWxlc1tpXSA9IF9leHRlbmRzKHt9LCBjdXJyZW50U3R5bGVzW2ldKTtcbiAgICAgICAgICAgICAgY3VycmVudFZlbG9jaXRpZXNbaV0gPSBfZXh0ZW5kcyh7fSwgY3VycmVudFZlbG9jaXRpZXNbaV0pO1xuICAgICAgICAgICAgICBsYXN0SWRlYWxTdHlsZXNbaV0gPSBfZXh0ZW5kcyh7fSwgbGFzdElkZWFsU3R5bGVzW2ldKTtcbiAgICAgICAgICAgICAgbGFzdElkZWFsVmVsb2NpdGllc1tpXSA9IF9leHRlbmRzKHt9LCBsYXN0SWRlYWxWZWxvY2l0aWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRTdHlsZXNbaV1ba2V5XSA9IHN0eWxlVmFsdWU7XG4gICAgICAgICAgICBjdXJyZW50VmVsb2NpdGllc1tpXVtrZXldID0gMDtcbiAgICAgICAgICAgIGxhc3RJZGVhbFN0eWxlc1tpXVtrZXldID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgICAgIGxhc3RJZGVhbFZlbG9jaXRpZXNbaV1ba2V5XSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzb21lRGlydHkpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBjdXJyZW50U3R5bGVzOiBjdXJyZW50U3R5bGVzLCBjdXJyZW50VmVsb2NpdGllczogY3VycmVudFZlbG9jaXRpZXMsIGxhc3RJZGVhbFN0eWxlczogbGFzdElkZWFsU3R5bGVzLCBsYXN0SWRlYWxWZWxvY2l0aWVzOiBsYXN0SWRlYWxWZWxvY2l0aWVzIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uSWZOZWNlc3NhcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUT0RPOiB3aGVuIGNvbmZpZyBpcyB7YTogMTB9IGFuZCBkZXN0IGlzIHthOiAxMH0gZG8gd2UgcmFmIG9uY2UgYW5kXG4gICAgICAvLyBjYWxsIGNiPyBObywgb3RoZXJ3aXNlIGFjY2lkZW50YWwgcGFyZW50IHJlcmVuZGVyIGNhdXNlcyBjYiB0cmlnZ2VyXG4gICAgICBfdGhpcy5hbmltYXRpb25JRCA9IF9yYWYyWydkZWZhdWx0J10oZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgZGVzdFN0eWxlcyA9IF90aGlzLnByb3BzLnN0eWxlcyhfdGhpcy5zdGF0ZS5sYXN0SWRlYWxTdHlsZXMpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gYW5pbWF0ZSBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgICAgICAgaWYgKHNob3VsZFN0b3BBbmltYXRpb25BbGwoX3RoaXMuc3RhdGUuY3VycmVudFN0eWxlcywgZGVzdFN0eWxlcywgX3RoaXMuc3RhdGUuY3VycmVudFZlbG9jaXRpZXMpKSB7XG4gICAgICAgICAgLy8gbm8gbmVlZCB0byBjYW5jZWwgYW5pbWF0aW9uSUQgaGVyZTsgc2hvdWxkbid0IGhhdmUgYW55IGluIGZsaWdodFxuICAgICAgICAgIF90aGlzLmFuaW1hdGlvbklEID0gbnVsbDtcbiAgICAgICAgICBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgPSAwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IHRpbWVzdGFtcCB8fCBfcGVyZm9ybWFuY2VOb3cyWydkZWZhdWx0J10oKTtcbiAgICAgICAgdmFyIHRpbWVEZWx0YSA9IGN1cnJlbnRUaW1lIC0gX3RoaXMucHJldlRpbWU7XG4gICAgICAgIF90aGlzLnByZXZUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIF90aGlzLmFjY3VtdWxhdGVkVGltZSA9IF90aGlzLmFjY3VtdWxhdGVkVGltZSArIHRpbWVEZWx0YTtcbiAgICAgICAgLy8gbW9yZSB0aGFuIDEwIGZyYW1lcz8gcHJvbGx5IHN3aXRjaGVkIGJyb3dzZXIgdGFiLiBSZXN0YXJ0XG4gICAgICAgIGlmIChfdGhpcy5hY2N1bXVsYXRlZFRpbWUgPiBtc1BlckZyYW1lICogMTApIHtcbiAgICAgICAgICBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzLmFjY3VtdWxhdGVkVGltZSA9PT0gMCkge1xuICAgICAgICAgIC8vIG5vIG5lZWQgdG8gY2FuY2VsIGFuaW1hdGlvbklEIGhlcmU7IHNob3VsZG4ndCBoYXZlIGFueSBpbiBmbGlnaHRcbiAgICAgICAgICBfdGhpcy5hbmltYXRpb25JRCA9IG51bGw7XG4gICAgICAgICAgX3RoaXMuc3RhcnRBbmltYXRpb25JZk5lY2Vzc2FyeSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50RnJhbWVDb21wbGV0aW9uID0gKF90aGlzLmFjY3VtdWxhdGVkVGltZSAtIE1hdGguZmxvb3IoX3RoaXMuYWNjdW11bGF0ZWRUaW1lIC8gbXNQZXJGcmFtZSkgKiBtc1BlckZyYW1lKSAvIG1zUGVyRnJhbWU7XG4gICAgICAgIHZhciBmcmFtZXNUb0NhdGNoVXAgPSBNYXRoLmZsb29yKF90aGlzLmFjY3VtdWxhdGVkVGltZSAvIG1zUGVyRnJhbWUpO1xuXG4gICAgICAgIHZhciBuZXdMYXN0SWRlYWxTdHlsZXMgPSBbXTtcbiAgICAgICAgdmFyIG5ld0xhc3RJZGVhbFZlbG9jaXRpZXMgPSBbXTtcbiAgICAgICAgdmFyIG5ld0N1cnJlbnRTdHlsZXMgPSBbXTtcbiAgICAgICAgdmFyIG5ld0N1cnJlbnRWZWxvY2l0aWVzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXN0U3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGRlc3RTdHlsZSA9IGRlc3RTdHlsZXNbaV07XG4gICAgICAgICAgdmFyIG5ld0N1cnJlbnRTdHlsZSA9IHt9O1xuICAgICAgICAgIHZhciBuZXdDdXJyZW50VmVsb2NpdHkgPSB7fTtcbiAgICAgICAgICB2YXIgbmV3TGFzdElkZWFsU3R5bGUgPSB7fTtcbiAgICAgICAgICB2YXIgbmV3TGFzdElkZWFsVmVsb2NpdHkgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkZXN0U3R5bGUpIHtcbiAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc3RTdHlsZSwga2V5KSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0eWxlVmFsdWUgPSBkZXN0U3R5bGVba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgbmV3Q3VycmVudFN0eWxlW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgICAgICBuZXdDdXJyZW50VmVsb2NpdHlba2V5XSA9IDA7XG4gICAgICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxWZWxvY2l0eVtrZXldID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlID0gX3RoaXMuc3RhdGUubGFzdElkZWFsU3R5bGVzW2ldW2tleV07XG4gICAgICAgICAgICAgIHZhciBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlID0gX3RoaXMuc3RhdGUubGFzdElkZWFsVmVsb2NpdGllc1tpXVtrZXldO1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZyYW1lc1RvQ2F0Y2hVcDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9zdGVwcGVyID0gX3N0ZXBwZXI0WydkZWZhdWx0J10obXNQZXJGcmFtZSAvIDEwMDAsIG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUsIG5ld0xhc3RJZGVhbFZlbG9jaXR5VmFsdWUsIHN0eWxlVmFsdWUudmFsLCBzdHlsZVZhbHVlLnN0aWZmbmVzcywgc3R5bGVWYWx1ZS5kYW1waW5nLCBzdHlsZVZhbHVlLnByZWNpc2lvbik7XG5cbiAgICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlID0gX3N0ZXBwZXJbMF07XG4gICAgICAgICAgICAgICAgbmV3TGFzdElkZWFsVmVsb2NpdHlWYWx1ZSA9IF9zdGVwcGVyWzFdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIF9zdGVwcGVyMiA9IF9zdGVwcGVyNFsnZGVmYXVsdCddKG1zUGVyRnJhbWUgLyAxMDAwLCBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlLCBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlLCBzdHlsZVZhbHVlLnZhbCwgc3R5bGVWYWx1ZS5zdGlmZm5lc3MsIHN0eWxlVmFsdWUuZGFtcGluZywgc3R5bGVWYWx1ZS5wcmVjaXNpb24pO1xuXG4gICAgICAgICAgICAgIHZhciBuZXh0SWRlYWxYID0gX3N0ZXBwZXIyWzBdO1xuICAgICAgICAgICAgICB2YXIgbmV4dElkZWFsViA9IF9zdGVwcGVyMlsxXTtcblxuICAgICAgICAgICAgICBuZXdDdXJyZW50U3R5bGVba2V5XSA9IG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUgKyAobmV4dElkZWFsWCAtIG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUpICogY3VycmVudEZyYW1lQ29tcGxldGlvbjtcbiAgICAgICAgICAgICAgbmV3Q3VycmVudFZlbG9jaXR5W2tleV0gPSBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlICsgKG5leHRJZGVhbFYgLSBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlKSAqIGN1cnJlbnRGcmFtZUNvbXBsZXRpb247XG4gICAgICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlW2tleV0gPSBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlO1xuICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxWZWxvY2l0eVtrZXldID0gbmV3TGFzdElkZWFsVmVsb2NpdHlWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdDdXJyZW50U3R5bGVzW2ldID0gbmV3Q3VycmVudFN0eWxlO1xuICAgICAgICAgIG5ld0N1cnJlbnRWZWxvY2l0aWVzW2ldID0gbmV3Q3VycmVudFZlbG9jaXR5O1xuICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlc1tpXSA9IG5ld0xhc3RJZGVhbFN0eWxlO1xuICAgICAgICAgIG5ld0xhc3RJZGVhbFZlbG9jaXRpZXNbaV0gPSBuZXdMYXN0SWRlYWxWZWxvY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLmFuaW1hdGlvbklEID0gbnVsbDtcbiAgICAgICAgLy8gdGhlIGFtb3VudCB3ZSdyZSBsb29wZWQgb3ZlciBhYm92ZVxuICAgICAgICBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgLT0gZnJhbWVzVG9DYXRjaFVwICogbXNQZXJGcmFtZTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudFN0eWxlczogbmV3Q3VycmVudFN0eWxlcyxcbiAgICAgICAgICBjdXJyZW50VmVsb2NpdGllczogbmV3Q3VycmVudFZlbG9jaXRpZXMsXG4gICAgICAgICAgbGFzdElkZWFsU3R5bGVzOiBuZXdMYXN0SWRlYWxTdHlsZXMsXG4gICAgICAgICAgbGFzdElkZWFsVmVsb2NpdGllczogbmV3TGFzdElkZWFsVmVsb2NpdGllc1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy51bnJlYWRQcm9wU3R5bGVzID0gbnVsbDtcblxuICAgICAgICBfdGhpcy5zdGFydEFuaW1hdGlvbklmTmVjZXNzYXJ5KCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuZGVmYXVsdFN0YXRlKCk7XG4gIH1cblxuICBTdGFnZ2VyZWRNb3Rpb24ucHJvdG90eXBlLmRlZmF1bHRTdGF0ZSA9IGZ1bmN0aW9uIGRlZmF1bHRTdGF0ZSgpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgZGVmYXVsdFN0eWxlcyA9IF9wcm9wcy5kZWZhdWx0U3R5bGVzO1xuICAgIHZhciBzdHlsZXMgPSBfcHJvcHMuc3R5bGVzO1xuXG4gICAgdmFyIGN1cnJlbnRTdHlsZXMgPSBkZWZhdWx0U3R5bGVzIHx8IHN0eWxlcygpLm1hcChfc3RyaXBTdHlsZTJbJ2RlZmF1bHQnXSk7XG4gICAgdmFyIGN1cnJlbnRWZWxvY2l0aWVzID0gY3VycmVudFN0eWxlcy5tYXAoZnVuY3Rpb24gKGN1cnJlbnRTdHlsZSkge1xuICAgICAgcmV0dXJuIF9tYXBUb1plcm8yWydkZWZhdWx0J10oY3VycmVudFN0eWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudFN0eWxlczogY3VycmVudFN0eWxlcyxcbiAgICAgIGN1cnJlbnRWZWxvY2l0aWVzOiBjdXJyZW50VmVsb2NpdGllcyxcbiAgICAgIGxhc3RJZGVhbFN0eWxlczogY3VycmVudFN0eWxlcyxcbiAgICAgIGxhc3RJZGVhbFZlbG9jaXRpZXM6IGN1cnJlbnRWZWxvY2l0aWVzXG4gICAgfTtcbiAgfTtcblxuICBTdGFnZ2VyZWRNb3Rpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcmV2VGltZSA9IF9wZXJmb3JtYW5jZU5vdzJbJ2RlZmF1bHQnXSgpO1xuICAgIHRoaXMuc3RhcnRBbmltYXRpb25JZk5lY2Vzc2FyeSgpO1xuICB9O1xuXG4gIFN0YWdnZXJlZE1vdGlvbi5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMocHJvcHMpIHtcbiAgICBpZiAodGhpcy51bnJlYWRQcm9wU3R5bGVzICE9IG51bGwpIHtcbiAgICAgIC8vIHByZXZpb3VzIHByb3BzIGhhdmVuJ3QgaGFkIHRoZSBjaGFuY2UgdG8gYmUgc2V0IHlldDsgc2V0IHRoZW0gaGVyZVxuICAgICAgdGhpcy5jbGVhclVucmVhZFByb3BTdHlsZSh0aGlzLnVucmVhZFByb3BTdHlsZXMpO1xuICAgIH1cblxuICAgIHRoaXMudW5yZWFkUHJvcFN0eWxlcyA9IHByb3BzLnN0eWxlcyh0aGlzLnN0YXRlLmxhc3RJZGVhbFN0eWxlcyk7XG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uSUQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5wcmV2VGltZSA9IF9wZXJmb3JtYW5jZU5vdzJbJ2RlZmF1bHQnXSgpO1xuICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbklmTmVjZXNzYXJ5KCk7XG4gICAgfVxuICB9O1xuXG4gIFN0YWdnZXJlZE1vdGlvbi5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JRCAhPSBudWxsKSB7XG4gICAgICBfcmFmMlsnZGVmYXVsdCddLmNhbmNlbCh0aGlzLmFuaW1hdGlvbklEKTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSUQgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBTdGFnZ2VyZWRNb3Rpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW4odGhpcy5zdGF0ZS5jdXJyZW50U3R5bGVzKTtcbiAgICByZXR1cm4gcmVuZGVyZWRDaGlsZHJlbiAmJiBfcmVhY3QyWydkZWZhdWx0J10uQ2hpbGRyZW4ub25seShyZW5kZXJlZENoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gU3RhZ2dlcmVkTW90aW9uO1xufSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0YWdnZXJlZE1vdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vLyBpdCdzIHBvc3NpYmxlIHRoYXQgY3VycmVudFN0eWxlJ3MgdmFsdWUgaXMgc3RhbGU6IGlmIHByb3BzIGlzIGltbWVkaWF0ZWx5XG4vLyBjaGFuZ2VkIGZyb20gMCB0byA0MDAgdG8gc3ByaW5nKDApIGFnYWluLCB0aGUgYXN5bmMgY3VycmVudFN0eWxlIGlzIHN0aWxsXG4vLyBhdCAwIChkaWRuJ3QgaGF2ZSB0aW1lIHRvIHRpY2sgYW5kIGludGVycG9sYXRlIGV2ZW4gb25jZSkuIElmIHdlIG5haXZlbHlcbi8vIGNvbXBhcmUgY3VycmVudFN0eWxlIHdpdGggZGVzdFZhbCBpdCdsbCBiZSAwID09PSAwIChubyBhbmltYXRpb24sIHN0b3ApLlxuLy8gSW4gcmVhbGl0eSBjdXJyZW50U3R5bGUgc2hvdWxkIGJlIDQwMFxuXG4vLyBhZnRlciBjaGVja2luZyBmb3IgdW5yZWFkUHJvcFN0eWxlcyAhPSBudWxsLCB3ZSBtYW51YWxseSBnbyBzZXQgdGhlXG4vLyBub24taW50ZXJwb2xhdGluZyB2YWx1ZXMgKHRob3NlIHRoYXQgYXJlIGEgbnVtYmVyLCB3aXRob3V0IGEgc3ByaW5nXG4vLyBjb25maWcpIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX21hcFRvWmVybyA9IHJlcXVpcmUoJy4vbWFwVG9aZXJvJyk7XG5cbnZhciBfbWFwVG9aZXJvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcFRvWmVybyk7XG5cbnZhciBfc3RyaXBTdHlsZSA9IHJlcXVpcmUoJy4vc3RyaXBTdHlsZScpO1xuXG52YXIgX3N0cmlwU3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaXBTdHlsZSk7XG5cbnZhciBfc3RlcHBlcjMgPSByZXF1aXJlKCcuL3N0ZXBwZXInKTtcblxudmFyIF9zdGVwcGVyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0ZXBwZXIzKTtcblxudmFyIF9tZXJnZURpZmYgPSByZXF1aXJlKCcuL21lcmdlRGlmZicpO1xuXG52YXIgX21lcmdlRGlmZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZURpZmYpO1xuXG52YXIgX3BlcmZvcm1hbmNlTm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93Jyk7XG5cbnZhciBfcGVyZm9ybWFuY2VOb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGVyZm9ybWFuY2VOb3cpO1xuXG52YXIgX3JhZiA9IHJlcXVpcmUoJ3JhZicpO1xuXG52YXIgX3JhZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yYWYpO1xuXG52YXIgX3Nob3VsZFN0b3BBbmltYXRpb24gPSByZXF1aXJlKCcuL3Nob3VsZFN0b3BBbmltYXRpb24nKTtcblxudmFyIF9zaG91bGRTdG9wQW5pbWF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3VsZFN0b3BBbmltYXRpb24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgbXNQZXJGcmFtZSA9IDEwMDAgLyA2MDtcblxuLy8gdGhlIGNoaWxkcmVuIGZ1bmN0aW9uICYgKHBvdGVudGlhbCkgc3R5bGVzIGZ1bmN0aW9uIGFza3MgYXMgcGFyYW0gYW5cbi8vIEFycmF5PFRyYW5zaXRpb25QbGFpblN0eWxlPiwgd2hlcmUgZWFjaCBUcmFuc2l0aW9uUGxhaW5TdHlsZSBpcyBvZiB0aGUgZm9ybWF0XG4vLyB7a2V5OiBzdHJpbmcsIGRhdGE/OiBhbnksIHN0eWxlOiBQbGFpblN0eWxlfS4gSG93ZXZlciwgdGhlIHdheSB3ZSBrZWVwXG4vLyBpbnRlcm5hbCBzdGF0ZXMgZG9lc24ndCBjb250YWluIHN1Y2ggYSBkYXRhIHN0cnVjdHVyZSAoY2hlY2sgdGhlIHN0YXRlIGFuZFxuLy8gVHJhbnNpdGlvbk1vdGlvblN0YXRlKS4gU28gd2hlbiBjaGlsZHJlbiBmdW5jdGlvbiBhbmQgb3RoZXJzIGFzayBmb3Igc3VjaFxuLy8gZGF0YSB3ZSBuZWVkIHRvIGdlbmVyYXRlIHRoZW0gb24gdGhlIGZseSBieSBjb21iaW5pbmcgbWVyZ2VkUHJvcHNTdHlsZXMgYW5kXG4vLyBjdXJyZW50U3R5bGVzL2xhc3RJZGVhbFN0eWxlc1xuZnVuY3Rpb24gcmVoeWRyYXRlU3R5bGVzKG1lcmdlZFByb3BzU3R5bGVzLCB1bnJlYWRQcm9wU3R5bGVzLCBwbGFpblN0eWxlcykge1xuICAvLyBDb3B5IHRoZSB2YWx1ZSB0byBhIGBjb25zdGAgc28gdGhhdCBGbG93IHVuZGVyc3RhbmRzIHRoYXQgdGhlIGNvbnN0IHdvbid0XG4gIC8vIGNoYW5nZSBhbmQgd2lsbCBiZSBub24tbnVsbGFibGUgaW4gdGhlIGNhbGxiYWNrIGJlbG93LlxuICB2YXIgY1VucmVhZFByb3BTdHlsZXMgPSB1bnJlYWRQcm9wU3R5bGVzO1xuICBpZiAoY1VucmVhZFByb3BTdHlsZXMgPT0gbnVsbCkge1xuICAgIHJldHVybiBtZXJnZWRQcm9wc1N0eWxlcy5tYXAoZnVuY3Rpb24gKG1lcmdlZFByb3BzU3R5bGUsIGkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogbWVyZ2VkUHJvcHNTdHlsZS5rZXksXG4gICAgICAgIGRhdGE6IG1lcmdlZFByb3BzU3R5bGUuZGF0YSxcbiAgICAgICAgc3R5bGU6IHBsYWluU3R5bGVzW2ldXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBtZXJnZWRQcm9wc1N0eWxlcy5tYXAoZnVuY3Rpb24gKG1lcmdlZFByb3BzU3R5bGUsIGkpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNVbnJlYWRQcm9wU3R5bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoY1VucmVhZFByb3BTdHlsZXNbal0ua2V5ID09PSBtZXJnZWRQcm9wc1N0eWxlLmtleSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogY1VucmVhZFByb3BTdHlsZXNbal0ua2V5LFxuICAgICAgICAgIGRhdGE6IGNVbnJlYWRQcm9wU3R5bGVzW2pdLmRhdGEsXG4gICAgICAgICAgc3R5bGU6IHBsYWluU3R5bGVzW2ldXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGtleTogbWVyZ2VkUHJvcHNTdHlsZS5rZXksIGRhdGE6IG1lcmdlZFByb3BzU3R5bGUuZGF0YSwgc3R5bGU6IHBsYWluU3R5bGVzW2ldIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzaG91bGRTdG9wQW5pbWF0aW9uQWxsKGN1cnJlbnRTdHlsZXMsIGRlc3RTdHlsZXMsIGN1cnJlbnRWZWxvY2l0aWVzLCBtZXJnZWRQcm9wc1N0eWxlcykge1xuICBpZiAobWVyZ2VkUHJvcHNTdHlsZXMubGVuZ3RoICE9PSBkZXN0U3R5bGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVyZ2VkUHJvcHNTdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWVyZ2VkUHJvcHNTdHlsZXNbaV0ua2V5ICE9PSBkZXN0U3R5bGVzW2ldLmtleSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHdlIGhhdmUgdGhlIGludmFyaWFudCB0aGF0IG1lcmdlZFByb3BzU3R5bGVzIGFuZFxuICAvLyBjdXJyZW50U3R5bGVzL2N1cnJlbnRWZWxvY2l0aWVzL2xhc3QqIGFyZSBzeW5jZWQgaW4gdGVybXMgb2YgY2VsbHMsIHNlZVxuICAvLyBtZXJnZUFuZFN5bmMgY29tbWVudCBmb3IgbW9yZSBpbmZvXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVyZ2VkUHJvcHNTdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIV9zaG91bGRTdG9wQW5pbWF0aW9uMlsnZGVmYXVsdCddKGN1cnJlbnRTdHlsZXNbaV0sIGRlc3RTdHlsZXNbaV0uc3R5bGUsIGN1cnJlbnRWZWxvY2l0aWVzW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBjb3JlIGtleSBtZXJnaW5nIGxvZ2ljXG5cbi8vIHRoaW5ncyB0byBkbzogc2F5IHByZXZpb3VzbHkgbWVyZ2VkIHN0eWxlIGlzIHthLCBifSwgZGVzdCBzdHlsZSAocHJvcCkgaXMge2IsXG4vLyBjfSwgcHJldmlvdXMgY3VycmVudCAoaW50ZXJwb2xhdGluZykgc3R5bGUgaXMge2EsIGJ9XG4vLyAqKmludmFyaWFudCoqOiBjdXJyZW50W2ldIGNvcnJlc3BvbmRzIHRvIG1lcmdlZFtpXSBpbiB0ZXJtcyBvZiBrZXlcblxuLy8gc3RlcHM6XG4vLyB0dXJuIG1lcmdlZCBzdHlsZSBpbnRvIHthPywgYiwgY31cbi8vICAgIGFkZCBjLCB2YWx1ZSBvZiBjIGlzIGRlc3RTdHlsZXMuY1xuLy8gICAgbWF5YmUgcmVtb3ZlIGEsIGFrYSBjYWxsIHdpbGxMZWF2ZShhKSwgdGhlbiBtZXJnZWQgaXMgZWl0aGVyIHtiLCBjfSBvciB7YSwgYiwgY31cbi8vIHR1cm4gY3VycmVudCAoaW50ZXJwb2xhdGluZykgc3R5bGUgZnJvbSB7YSwgYn0gaW50byB7YT8sIGIsIGN9XG4vLyAgICBtYXliZSByZW1vdmUgYVxuLy8gICAgY2VydGFpbmx5IGFkZCBjLCB2YWx1ZSBvZiBjIGlzIHdpbGxFbnRlcihjKVxuLy8gbG9vcCBvdmVyIG1lcmdlZCBhbmQgY29uc3RydWN0IG5ldyBjdXJyZW50XG4vLyBkZXN0IGRvZXNuJ3QgY2hhbmdlLCB0aGF0J3Mgb3duZXInc1xuZnVuY3Rpb24gbWVyZ2VBbmRTeW5jKHdpbGxFbnRlciwgd2lsbExlYXZlLCBkaWRMZWF2ZSwgb2xkTWVyZ2VkUHJvcHNTdHlsZXMsIGRlc3RTdHlsZXMsIG9sZEN1cnJlbnRTdHlsZXMsIG9sZEN1cnJlbnRWZWxvY2l0aWVzLCBvbGRMYXN0SWRlYWxTdHlsZXMsIG9sZExhc3RJZGVhbFZlbG9jaXRpZXMpIHtcbiAgdmFyIG5ld01lcmdlZFByb3BzU3R5bGVzID0gX21lcmdlRGlmZjJbJ2RlZmF1bHQnXShvbGRNZXJnZWRQcm9wc1N0eWxlcywgZGVzdFN0eWxlcywgZnVuY3Rpb24gKG9sZEluZGV4LCBvbGRNZXJnZWRQcm9wc1N0eWxlKSB7XG4gICAgdmFyIGxlYXZpbmdTdHlsZSA9IHdpbGxMZWF2ZShvbGRNZXJnZWRQcm9wc1N0eWxlKTtcbiAgICBpZiAobGVhdmluZ1N0eWxlID09IG51bGwpIHtcbiAgICAgIGRpZExlYXZlKHsga2V5OiBvbGRNZXJnZWRQcm9wc1N0eWxlLmtleSwgZGF0YTogb2xkTWVyZ2VkUHJvcHNTdHlsZS5kYXRhIH0pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChfc2hvdWxkU3RvcEFuaW1hdGlvbjJbJ2RlZmF1bHQnXShvbGRDdXJyZW50U3R5bGVzW29sZEluZGV4XSwgbGVhdmluZ1N0eWxlLCBvbGRDdXJyZW50VmVsb2NpdGllc1tvbGRJbmRleF0pKSB7XG4gICAgICBkaWRMZWF2ZSh7IGtleTogb2xkTWVyZ2VkUHJvcHNTdHlsZS5rZXksIGRhdGE6IG9sZE1lcmdlZFByb3BzU3R5bGUuZGF0YSB9KTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4geyBrZXk6IG9sZE1lcmdlZFByb3BzU3R5bGUua2V5LCBkYXRhOiBvbGRNZXJnZWRQcm9wc1N0eWxlLmRhdGEsIHN0eWxlOiBsZWF2aW5nU3R5bGUgfTtcbiAgfSk7XG5cbiAgdmFyIG5ld0N1cnJlbnRTdHlsZXMgPSBbXTtcbiAgdmFyIG5ld0N1cnJlbnRWZWxvY2l0aWVzID0gW107XG4gIHZhciBuZXdMYXN0SWRlYWxTdHlsZXMgPSBbXTtcbiAgdmFyIG5ld0xhc3RJZGVhbFZlbG9jaXRpZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdNZXJnZWRQcm9wc1N0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXdNZXJnZWRQcm9wc1N0eWxlQ2VsbCA9IG5ld01lcmdlZFByb3BzU3R5bGVzW2ldO1xuICAgIHZhciBmb3VuZE9sZEluZGV4ID0gbnVsbDtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9sZE1lcmdlZFByb3BzU3R5bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAob2xkTWVyZ2VkUHJvcHNTdHlsZXNbal0ua2V5ID09PSBuZXdNZXJnZWRQcm9wc1N0eWxlQ2VsbC5rZXkpIHtcbiAgICAgICAgZm91bmRPbGRJbmRleCA9IGo7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUT0RPOiBrZXkgc2VhcmNoIGNvZGVcbiAgICBpZiAoZm91bmRPbGRJbmRleCA9PSBudWxsKSB7XG4gICAgICB2YXIgcGxhaW5TdHlsZSA9IHdpbGxFbnRlcihuZXdNZXJnZWRQcm9wc1N0eWxlQ2VsbCk7XG4gICAgICBuZXdDdXJyZW50U3R5bGVzW2ldID0gcGxhaW5TdHlsZTtcbiAgICAgIG5ld0xhc3RJZGVhbFN0eWxlc1tpXSA9IHBsYWluU3R5bGU7XG5cbiAgICAgIHZhciB2ZWxvY2l0eSA9IF9tYXBUb1plcm8yWydkZWZhdWx0J10obmV3TWVyZ2VkUHJvcHNTdHlsZUNlbGwuc3R5bGUpO1xuICAgICAgbmV3Q3VycmVudFZlbG9jaXRpZXNbaV0gPSB2ZWxvY2l0eTtcbiAgICAgIG5ld0xhc3RJZGVhbFZlbG9jaXRpZXNbaV0gPSB2ZWxvY2l0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q3VycmVudFN0eWxlc1tpXSA9IG9sZEN1cnJlbnRTdHlsZXNbZm91bmRPbGRJbmRleF07XG4gICAgICBuZXdMYXN0SWRlYWxTdHlsZXNbaV0gPSBvbGRMYXN0SWRlYWxTdHlsZXNbZm91bmRPbGRJbmRleF07XG4gICAgICBuZXdDdXJyZW50VmVsb2NpdGllc1tpXSA9IG9sZEN1cnJlbnRWZWxvY2l0aWVzW2ZvdW5kT2xkSW5kZXhdO1xuICAgICAgbmV3TGFzdElkZWFsVmVsb2NpdGllc1tpXSA9IG9sZExhc3RJZGVhbFZlbG9jaXRpZXNbZm91bmRPbGRJbmRleF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtuZXdNZXJnZWRQcm9wc1N0eWxlcywgbmV3Q3VycmVudFN0eWxlcywgbmV3Q3VycmVudFZlbG9jaXRpZXMsIG5ld0xhc3RJZGVhbFN0eWxlcywgbmV3TGFzdElkZWFsVmVsb2NpdGllc107XG59XG5cbnZhciBUcmFuc2l0aW9uTW90aW9uID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc2l0aW9uTW90aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoVHJhbnNpdGlvbk1vdGlvbiwgbnVsbCwgW3tcbiAgICBrZXk6ICdwcm9wVHlwZXMnLFxuICAgIHZhbHVlOiB7XG4gICAgICBkZWZhdWx0U3R5bGVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFycmF5T2YoX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zaGFwZSh7XG4gICAgICAgIGtleTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgZGF0YTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hbnksXG4gICAgICAgIHN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdE9mKF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyKS5pc1JlcXVpcmVkXG4gICAgICB9KSksXG4gICAgICBzdHlsZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2ZUeXBlKFtfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYXJyYXlPZihfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKHtcbiAgICAgICAga2V5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBkYXRhOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFueSxcbiAgICAgICAgc3R5bGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0T2YoX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoW19wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdF0pKS5pc1JlcXVpcmVkXG4gICAgICB9KSldKS5pc1JlcXVpcmVkLFxuICAgICAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgd2lsbEVudGVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gICAgICB3aWxsTGVhdmU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgICAgIGRpZExlYXZlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmNcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSwge1xuICAgIGtleTogJ2RlZmF1bHRQcm9wcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIHdpbGxFbnRlcjogZnVuY3Rpb24gd2lsbEVudGVyKHN0eWxlVGhhdEVudGVyZWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdHJpcFN0eWxlMlsnZGVmYXVsdCddKHN0eWxlVGhhdEVudGVyZWQuc3R5bGUpO1xuICAgICAgfSxcbiAgICAgIC8vIHJlY2FsbDogcmV0dXJuaW5nIG51bGwgbWFrZXMgdGhlIGN1cnJlbnQgdW5tb3VudGluZyBUcmFuc2l0aW9uU3R5bGVcbiAgICAgIC8vIGRpc2FwcGVhciBpbW1lZGlhdGVseVxuICAgICAgd2lsbExlYXZlOiBmdW5jdGlvbiB3aWxsTGVhdmUoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGRpZExlYXZlOiBmdW5jdGlvbiBkaWRMZWF2ZSgpIHt9XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1dKTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uTW90aW9uKHByb3BzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2l0aW9uTW90aW9uKTtcblxuICAgIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgdGhpcy51bm1vdW50aW5nID0gZmFsc2U7XG4gICAgdGhpcy5hbmltYXRpb25JRCA9IG51bGw7XG4gICAgdGhpcy5wcmV2VGltZSA9IDA7XG4gICAgdGhpcy5hY2N1bXVsYXRlZFRpbWUgPSAwO1xuICAgIHRoaXMudW5yZWFkUHJvcFN0eWxlcyA9IG51bGw7XG5cbiAgICB0aGlzLmNsZWFyVW5yZWFkUHJvcFN0eWxlID0gZnVuY3Rpb24gKHVucmVhZFByb3BTdHlsZXMpIHtcbiAgICAgIHZhciBfbWVyZ2VBbmRTeW5jID0gbWVyZ2VBbmRTeW5jKF90aGlzLnByb3BzLndpbGxFbnRlciwgX3RoaXMucHJvcHMud2lsbExlYXZlLCBfdGhpcy5wcm9wcy5kaWRMZWF2ZSwgX3RoaXMuc3RhdGUubWVyZ2VkUHJvcHNTdHlsZXMsIHVucmVhZFByb3BTdHlsZXMsIF90aGlzLnN0YXRlLmN1cnJlbnRTdHlsZXMsIF90aGlzLnN0YXRlLmN1cnJlbnRWZWxvY2l0aWVzLCBfdGhpcy5zdGF0ZS5sYXN0SWRlYWxTdHlsZXMsIF90aGlzLnN0YXRlLmxhc3RJZGVhbFZlbG9jaXRpZXMpO1xuXG4gICAgICB2YXIgbWVyZ2VkUHJvcHNTdHlsZXMgPSBfbWVyZ2VBbmRTeW5jWzBdO1xuICAgICAgdmFyIGN1cnJlbnRTdHlsZXMgPSBfbWVyZ2VBbmRTeW5jWzFdO1xuICAgICAgdmFyIGN1cnJlbnRWZWxvY2l0aWVzID0gX21lcmdlQW5kU3luY1syXTtcbiAgICAgIHZhciBsYXN0SWRlYWxTdHlsZXMgPSBfbWVyZ2VBbmRTeW5jWzNdO1xuICAgICAgdmFyIGxhc3RJZGVhbFZlbG9jaXRpZXMgPSBfbWVyZ2VBbmRTeW5jWzRdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVucmVhZFByb3BTdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHVucmVhZFByb3BTdHlsZSA9IHVucmVhZFByb3BTdHlsZXNbaV0uc3R5bGU7XG4gICAgICAgIHZhciBkaXJ0eSA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB1bnJlYWRQcm9wU3R5bGUpIHtcbiAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1bnJlYWRQcm9wU3R5bGUsIGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZVZhbHVlID0gdW5yZWFkUHJvcFN0eWxlW2tleV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKCFkaXJ0eSkge1xuICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgIGN1cnJlbnRTdHlsZXNbaV0gPSBfZXh0ZW5kcyh7fSwgY3VycmVudFN0eWxlc1tpXSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRWZWxvY2l0aWVzW2ldID0gX2V4dGVuZHMoe30sIGN1cnJlbnRWZWxvY2l0aWVzW2ldKTtcbiAgICAgICAgICAgICAgbGFzdElkZWFsU3R5bGVzW2ldID0gX2V4dGVuZHMoe30sIGxhc3RJZGVhbFN0eWxlc1tpXSk7XG4gICAgICAgICAgICAgIGxhc3RJZGVhbFZlbG9jaXRpZXNbaV0gPSBfZXh0ZW5kcyh7fSwgbGFzdElkZWFsVmVsb2NpdGllc1tpXSk7XG4gICAgICAgICAgICAgIG1lcmdlZFByb3BzU3R5bGVzW2ldID0ge1xuICAgICAgICAgICAgICAgIGtleTogbWVyZ2VkUHJvcHNTdHlsZXNbaV0ua2V5LFxuICAgICAgICAgICAgICAgIGRhdGE6IG1lcmdlZFByb3BzU3R5bGVzW2ldLmRhdGEsXG4gICAgICAgICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBtZXJnZWRQcm9wc1N0eWxlc1tpXS5zdHlsZSlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRTdHlsZXNbaV1ba2V5XSA9IHN0eWxlVmFsdWU7XG4gICAgICAgICAgICBjdXJyZW50VmVsb2NpdGllc1tpXVtrZXldID0gMDtcbiAgICAgICAgICAgIGxhc3RJZGVhbFN0eWxlc1tpXVtrZXldID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgICAgIGxhc3RJZGVhbFZlbG9jaXRpZXNbaV1ba2V5XSA9IDA7XG4gICAgICAgICAgICBtZXJnZWRQcm9wc1N0eWxlc1tpXS5zdHlsZVtrZXldID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdW5saWtlIHRoZSBvdGhlciAyIGNvbXBvbmVudHMsIHdlIGNhbid0IGRldGVjdCBzdGFsZW5lc3MgYW5kIG9wdGlvbmFsbHlcbiAgICAgIC8vIG9wdCBvdXQgb2Ygc2V0U3RhdGUgaGVyZS4gZWFjaCBzdHlsZSBvYmplY3QncyBkYXRhIG1pZ2h0IGNvbnRhaW4gbmV3XG4gICAgICAvLyBzdHVmZiB3ZSdyZSBub3QvY2Fubm90IGNvbXBhcmVcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudFN0eWxlczogY3VycmVudFN0eWxlcyxcbiAgICAgICAgY3VycmVudFZlbG9jaXRpZXM6IGN1cnJlbnRWZWxvY2l0aWVzLFxuICAgICAgICBtZXJnZWRQcm9wc1N0eWxlczogbWVyZ2VkUHJvcHNTdHlsZXMsXG4gICAgICAgIGxhc3RJZGVhbFN0eWxlczogbGFzdElkZWFsU3R5bGVzLFxuICAgICAgICBsYXN0SWRlYWxWZWxvY2l0aWVzOiBsYXN0SWRlYWxWZWxvY2l0aWVzXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbklmTmVjZXNzYXJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnVubW91bnRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPOiB3aGVuIGNvbmZpZyBpcyB7YTogMTB9IGFuZCBkZXN0IGlzIHthOiAxMH0gZG8gd2UgcmFmIG9uY2UgYW5kXG4gICAgICAvLyBjYWxsIGNiPyBObywgb3RoZXJ3aXNlIGFjY2lkZW50YWwgcGFyZW50IHJlcmVuZGVyIGNhdXNlcyBjYiB0cmlnZ2VyXG4gICAgICBfdGhpcy5hbmltYXRpb25JRCA9IF9yYWYyWydkZWZhdWx0J10oZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hlbmdsb3UvcmVhY3QtbW90aW9uL3B1bGwvNDIwXG4gICAgICAgIC8vID4gaWYgZXhlY3V0aW9uIHBhc3NlcyB0aGUgY29uZGl0aW9uYWwgaWYgKHRoaXMudW5tb3VudGluZyksIHRoZW5cbiAgICAgICAgLy8gZXhlY3V0ZXMgYXN5bmMgZGVmYXVsdFJhZiBhbmQgYWZ0ZXIgdGhhdCBjb21wb25lbnQgdW5tb3VudHMgYW5kIGFmdGVyXG4gICAgICAgIC8vIHRoYXQgdGhlIGNhbGxiYWNrIG9mIGRlZmF1bHRSYWYgaXMgY2FsbGVkLCB0aGVuIHNldFN0YXRlIHdpbGwgYmUgY2FsbGVkXG4gICAgICAgIC8vIG9uIHVubW91bnRlZCBjb21wb25lbnQuXG4gICAgICAgIGlmIChfdGhpcy51bm1vdW50aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3BTdHlsZXMgPSBfdGhpcy5wcm9wcy5zdHlsZXM7XG4gICAgICAgIHZhciBkZXN0U3R5bGVzID0gdHlwZW9mIHByb3BTdHlsZXMgPT09ICdmdW5jdGlvbicgPyBwcm9wU3R5bGVzKHJlaHlkcmF0ZVN0eWxlcyhfdGhpcy5zdGF0ZS5tZXJnZWRQcm9wc1N0eWxlcywgX3RoaXMudW5yZWFkUHJvcFN0eWxlcywgX3RoaXMuc3RhdGUubGFzdElkZWFsU3R5bGVzKSkgOiBwcm9wU3R5bGVzO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gYW5pbWF0ZSBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgICAgICAgaWYgKHNob3VsZFN0b3BBbmltYXRpb25BbGwoX3RoaXMuc3RhdGUuY3VycmVudFN0eWxlcywgZGVzdFN0eWxlcywgX3RoaXMuc3RhdGUuY3VycmVudFZlbG9jaXRpZXMsIF90aGlzLnN0YXRlLm1lcmdlZFByb3BzU3R5bGVzKSkge1xuICAgICAgICAgIC8vIG5vIG5lZWQgdG8gY2FuY2VsIGFuaW1hdGlvbklEIGhlcmU7IHNob3VsZG4ndCBoYXZlIGFueSBpbiBmbGlnaHRcbiAgICAgICAgICBfdGhpcy5hbmltYXRpb25JRCA9IG51bGw7XG4gICAgICAgICAgX3RoaXMuYWNjdW11bGF0ZWRUaW1lID0gMDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSB0aW1lc3RhbXAgfHwgX3BlcmZvcm1hbmNlTm93MlsnZGVmYXVsdCddKCk7XG4gICAgICAgIHZhciB0aW1lRGVsdGEgPSBjdXJyZW50VGltZSAtIF90aGlzLnByZXZUaW1lO1xuICAgICAgICBfdGhpcy5wcmV2VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgICBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgPSBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgKyB0aW1lRGVsdGE7XG4gICAgICAgIC8vIG1vcmUgdGhhbiAxMCBmcmFtZXM/IHByb2xseSBzd2l0Y2hlZCBicm93c2VyIHRhYi4gUmVzdGFydFxuICAgICAgICBpZiAoX3RoaXMuYWNjdW11bGF0ZWRUaW1lID4gbXNQZXJGcmFtZSAqIDEwKSB7XG4gICAgICAgICAgX3RoaXMuYWNjdW11bGF0ZWRUaW1lID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpcy5hY2N1bXVsYXRlZFRpbWUgPT09IDApIHtcbiAgICAgICAgICAvLyBubyBuZWVkIHRvIGNhbmNlbCBhbmltYXRpb25JRCBoZXJlOyBzaG91bGRuJ3QgaGF2ZSBhbnkgaW4gZmxpZ2h0XG4gICAgICAgICAgX3RoaXMuYW5pbWF0aW9uSUQgPSBudWxsO1xuICAgICAgICAgIF90aGlzLnN0YXJ0QW5pbWF0aW9uSWZOZWNlc3NhcnkoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudEZyYW1lQ29tcGxldGlvbiA9IChfdGhpcy5hY2N1bXVsYXRlZFRpbWUgLSBNYXRoLmZsb29yKF90aGlzLmFjY3VtdWxhdGVkVGltZSAvIG1zUGVyRnJhbWUpICogbXNQZXJGcmFtZSkgLyBtc1BlckZyYW1lO1xuICAgICAgICB2YXIgZnJhbWVzVG9DYXRjaFVwID0gTWF0aC5mbG9vcihfdGhpcy5hY2N1bXVsYXRlZFRpbWUgLyBtc1BlckZyYW1lKTtcblxuICAgICAgICB2YXIgX21lcmdlQW5kU3luYzIgPSBtZXJnZUFuZFN5bmMoX3RoaXMucHJvcHMud2lsbEVudGVyLCBfdGhpcy5wcm9wcy53aWxsTGVhdmUsIF90aGlzLnByb3BzLmRpZExlYXZlLCBfdGhpcy5zdGF0ZS5tZXJnZWRQcm9wc1N0eWxlcywgZGVzdFN0eWxlcywgX3RoaXMuc3RhdGUuY3VycmVudFN0eWxlcywgX3RoaXMuc3RhdGUuY3VycmVudFZlbG9jaXRpZXMsIF90aGlzLnN0YXRlLmxhc3RJZGVhbFN0eWxlcywgX3RoaXMuc3RhdGUubGFzdElkZWFsVmVsb2NpdGllcyk7XG5cbiAgICAgICAgdmFyIG5ld01lcmdlZFByb3BzU3R5bGVzID0gX21lcmdlQW5kU3luYzJbMF07XG4gICAgICAgIHZhciBuZXdDdXJyZW50U3R5bGVzID0gX21lcmdlQW5kU3luYzJbMV07XG4gICAgICAgIHZhciBuZXdDdXJyZW50VmVsb2NpdGllcyA9IF9tZXJnZUFuZFN5bmMyWzJdO1xuICAgICAgICB2YXIgbmV3TGFzdElkZWFsU3R5bGVzID0gX21lcmdlQW5kU3luYzJbM107XG4gICAgICAgIHZhciBuZXdMYXN0SWRlYWxWZWxvY2l0aWVzID0gX21lcmdlQW5kU3luYzJbNF07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdNZXJnZWRQcm9wc1N0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdNZXJnZWRQcm9wc1N0eWxlID0gbmV3TWVyZ2VkUHJvcHNTdHlsZXNbaV0uc3R5bGU7XG4gICAgICAgICAgdmFyIG5ld0N1cnJlbnRTdHlsZSA9IHt9O1xuICAgICAgICAgIHZhciBuZXdDdXJyZW50VmVsb2NpdHkgPSB7fTtcbiAgICAgICAgICB2YXIgbmV3TGFzdElkZWFsU3R5bGUgPSB7fTtcbiAgICAgICAgICB2YXIgbmV3TGFzdElkZWFsVmVsb2NpdHkgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuZXdNZXJnZWRQcm9wc1N0eWxlKSB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXdNZXJnZWRQcm9wc1N0eWxlLCBrZXkpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3R5bGVWYWx1ZSA9IG5ld01lcmdlZFByb3BzU3R5bGVba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgbmV3Q3VycmVudFN0eWxlW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgICAgICBuZXdDdXJyZW50VmVsb2NpdHlba2V5XSA9IDA7XG4gICAgICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxWZWxvY2l0eVtrZXldID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlID0gbmV3TGFzdElkZWFsU3R5bGVzW2ldW2tleV07XG4gICAgICAgICAgICAgIHZhciBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlID0gbmV3TGFzdElkZWFsVmVsb2NpdGllc1tpXVtrZXldO1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZyYW1lc1RvQ2F0Y2hVcDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9zdGVwcGVyID0gX3N0ZXBwZXI0WydkZWZhdWx0J10obXNQZXJGcmFtZSAvIDEwMDAsIG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUsIG5ld0xhc3RJZGVhbFZlbG9jaXR5VmFsdWUsIHN0eWxlVmFsdWUudmFsLCBzdHlsZVZhbHVlLnN0aWZmbmVzcywgc3R5bGVWYWx1ZS5kYW1waW5nLCBzdHlsZVZhbHVlLnByZWNpc2lvbik7XG5cbiAgICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlID0gX3N0ZXBwZXJbMF07XG4gICAgICAgICAgICAgICAgbmV3TGFzdElkZWFsVmVsb2NpdHlWYWx1ZSA9IF9zdGVwcGVyWzFdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIF9zdGVwcGVyMiA9IF9zdGVwcGVyNFsnZGVmYXVsdCddKG1zUGVyRnJhbWUgLyAxMDAwLCBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlLCBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlLCBzdHlsZVZhbHVlLnZhbCwgc3R5bGVWYWx1ZS5zdGlmZm5lc3MsIHN0eWxlVmFsdWUuZGFtcGluZywgc3R5bGVWYWx1ZS5wcmVjaXNpb24pO1xuXG4gICAgICAgICAgICAgIHZhciBuZXh0SWRlYWxYID0gX3N0ZXBwZXIyWzBdO1xuICAgICAgICAgICAgICB2YXIgbmV4dElkZWFsViA9IF9zdGVwcGVyMlsxXTtcblxuICAgICAgICAgICAgICBuZXdDdXJyZW50U3R5bGVba2V5XSA9IG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUgKyAobmV4dElkZWFsWCAtIG5ld0xhc3RJZGVhbFN0eWxlVmFsdWUpICogY3VycmVudEZyYW1lQ29tcGxldGlvbjtcbiAgICAgICAgICAgICAgbmV3Q3VycmVudFZlbG9jaXR5W2tleV0gPSBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlICsgKG5leHRJZGVhbFYgLSBuZXdMYXN0SWRlYWxWZWxvY2l0eVZhbHVlKSAqIGN1cnJlbnRGcmFtZUNvbXBsZXRpb247XG4gICAgICAgICAgICAgIG5ld0xhc3RJZGVhbFN0eWxlW2tleV0gPSBuZXdMYXN0SWRlYWxTdHlsZVZhbHVlO1xuICAgICAgICAgICAgICBuZXdMYXN0SWRlYWxWZWxvY2l0eVtrZXldID0gbmV3TGFzdElkZWFsVmVsb2NpdHlWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdMYXN0SWRlYWxTdHlsZXNbaV0gPSBuZXdMYXN0SWRlYWxTdHlsZTtcbiAgICAgICAgICBuZXdMYXN0SWRlYWxWZWxvY2l0aWVzW2ldID0gbmV3TGFzdElkZWFsVmVsb2NpdHk7XG4gICAgICAgICAgbmV3Q3VycmVudFN0eWxlc1tpXSA9IG5ld0N1cnJlbnRTdHlsZTtcbiAgICAgICAgICBuZXdDdXJyZW50VmVsb2NpdGllc1tpXSA9IG5ld0N1cnJlbnRWZWxvY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLmFuaW1hdGlvbklEID0gbnVsbDtcbiAgICAgICAgLy8gdGhlIGFtb3VudCB3ZSdyZSBsb29wZWQgb3ZlciBhYm92ZVxuICAgICAgICBfdGhpcy5hY2N1bXVsYXRlZFRpbWUgLT0gZnJhbWVzVG9DYXRjaFVwICogbXNQZXJGcmFtZTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudFN0eWxlczogbmV3Q3VycmVudFN0eWxlcyxcbiAgICAgICAgICBjdXJyZW50VmVsb2NpdGllczogbmV3Q3VycmVudFZlbG9jaXRpZXMsXG4gICAgICAgICAgbGFzdElkZWFsU3R5bGVzOiBuZXdMYXN0SWRlYWxTdHlsZXMsXG4gICAgICAgICAgbGFzdElkZWFsVmVsb2NpdGllczogbmV3TGFzdElkZWFsVmVsb2NpdGllcyxcbiAgICAgICAgICBtZXJnZWRQcm9wc1N0eWxlczogbmV3TWVyZ2VkUHJvcHNTdHlsZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMudW5yZWFkUHJvcFN0eWxlcyA9IG51bGw7XG5cbiAgICAgICAgX3RoaXMuc3RhcnRBbmltYXRpb25JZk5lY2Vzc2FyeSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmRlZmF1bHRTdGF0ZSgpO1xuICB9XG5cbiAgVHJhbnNpdGlvbk1vdGlvbi5wcm90b3R5cGUuZGVmYXVsdFN0YXRlID0gZnVuY3Rpb24gZGVmYXVsdFN0YXRlKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBkZWZhdWx0U3R5bGVzID0gX3Byb3BzLmRlZmF1bHRTdHlsZXM7XG4gICAgdmFyIHN0eWxlcyA9IF9wcm9wcy5zdHlsZXM7XG4gICAgdmFyIHdpbGxFbnRlciA9IF9wcm9wcy53aWxsRW50ZXI7XG4gICAgdmFyIHdpbGxMZWF2ZSA9IF9wcm9wcy53aWxsTGVhdmU7XG4gICAgdmFyIGRpZExlYXZlID0gX3Byb3BzLmRpZExlYXZlO1xuXG4gICAgdmFyIGRlc3RTdHlsZXMgPSB0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nID8gc3R5bGVzKGRlZmF1bHRTdHlsZXMpIDogc3R5bGVzO1xuXG4gICAgLy8gdGhpcyBpcyBzcGVjaWFsLiBmb3IgdGhlIGZpcnN0IHRpbWUgYXJvdW5kLCB3ZSBkb24ndCBoYXZlIGEgY29tcGFyaXNvblxuICAgIC8vIGJldHdlZW4gbGFzdCAobm8gbGFzdCkgYW5kIGN1cnJlbnQgbWVyZ2VkIHByb3BzLiB3ZSdsbCBjb21wdXRlIGxhc3Qgc286XG4gICAgLy8gc2F5IGRlZmF1bHQgaXMge2EsIGJ9IGFuZCBzdHlsZXMgKGRlc3Qgc3R5bGUpIGlzIHtiLCBjfSwgd2UnbGxcbiAgICAvLyBmYWJyaWNhdGUgbGFzdCBhcyB7YSwgYn1cbiAgICB2YXIgb2xkTWVyZ2VkUHJvcHNTdHlsZXMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGRlZmF1bHRTdHlsZXMgPT0gbnVsbCkge1xuICAgICAgb2xkTWVyZ2VkUHJvcHNTdHlsZXMgPSBkZXN0U3R5bGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRNZXJnZWRQcm9wc1N0eWxlcyA9IGRlZmF1bHRTdHlsZXMubWFwKGZ1bmN0aW9uIChkZWZhdWx0U3R5bGVDZWxsKSB7XG4gICAgICAgIC8vIFRPRE86IGtleSBzZWFyY2ggY29kZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlc3RTdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGVzdFN0eWxlc1tpXS5rZXkgPT09IGRlZmF1bHRTdHlsZUNlbGwua2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdFN0eWxlc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTdHlsZUNlbGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIG9sZEN1cnJlbnRTdHlsZXMgPSBkZWZhdWx0U3R5bGVzID09IG51bGwgPyBkZXN0U3R5bGVzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIF9zdHJpcFN0eWxlMlsnZGVmYXVsdCddKHMuc3R5bGUpO1xuICAgIH0pIDogZGVmYXVsdFN0eWxlcy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBfc3RyaXBTdHlsZTJbJ2RlZmF1bHQnXShzLnN0eWxlKTtcbiAgICB9KTtcbiAgICB2YXIgb2xkQ3VycmVudFZlbG9jaXRpZXMgPSBkZWZhdWx0U3R5bGVzID09IG51bGwgPyBkZXN0U3R5bGVzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIF9tYXBUb1plcm8yWydkZWZhdWx0J10ocy5zdHlsZSk7XG4gICAgfSkgOiBkZWZhdWx0U3R5bGVzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIF9tYXBUb1plcm8yWydkZWZhdWx0J10ocy5zdHlsZSk7XG4gICAgfSk7XG5cbiAgICB2YXIgX21lcmdlQW5kU3luYzMgPSBtZXJnZUFuZFN5bmMoXG4gICAgLy8gQmVjYXVzZSB0aGlzIGlzIGFuIG9sZC1zdHlsZSBjcmVhdGVSZWFjdENsYXNzIGNvbXBvbmVudCwgRmxvdyBkb2Vzbid0XG4gICAgLy8gdW5kZXJzdGFuZCB0aGF0IHRoZSB3aWxsRW50ZXIgYW5kIHdpbGxMZWF2ZSBwcm9wcyBoYXZlIGRlZmF1bHQgdmFsdWVzXG4gICAgLy8gYW5kIHdpbGwgYWx3YXlzIGJlIHByZXNlbnQuXG4gICAgd2lsbEVudGVyLCB3aWxsTGVhdmUsIGRpZExlYXZlLCBvbGRNZXJnZWRQcm9wc1N0eWxlcywgZGVzdFN0eWxlcywgb2xkQ3VycmVudFN0eWxlcywgb2xkQ3VycmVudFZlbG9jaXRpZXMsIG9sZEN1cnJlbnRTdHlsZXMsIC8vIG9sZExhc3RJZGVhbFN0eWxlcyByZWFsbHlcbiAgICBvbGRDdXJyZW50VmVsb2NpdGllcyk7XG5cbiAgICB2YXIgbWVyZ2VkUHJvcHNTdHlsZXMgPSBfbWVyZ2VBbmRTeW5jM1swXTtcbiAgICB2YXIgY3VycmVudFN0eWxlcyA9IF9tZXJnZUFuZFN5bmMzWzFdO1xuICAgIHZhciBjdXJyZW50VmVsb2NpdGllcyA9IF9tZXJnZUFuZFN5bmMzWzJdO1xuICAgIHZhciBsYXN0SWRlYWxTdHlsZXMgPSBfbWVyZ2VBbmRTeW5jM1szXTtcbiAgICB2YXIgbGFzdElkZWFsVmVsb2NpdGllcyA9IF9tZXJnZUFuZFN5bmMzWzRdO1xuICAgIC8vIG9sZExhc3RJZGVhbFZlbG9jaXRpZXMgcmVhbGx5XG5cbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudFN0eWxlczogY3VycmVudFN0eWxlcyxcbiAgICAgIGN1cnJlbnRWZWxvY2l0aWVzOiBjdXJyZW50VmVsb2NpdGllcyxcbiAgICAgIGxhc3RJZGVhbFN0eWxlczogbGFzdElkZWFsU3R5bGVzLFxuICAgICAgbGFzdElkZWFsVmVsb2NpdGllczogbGFzdElkZWFsVmVsb2NpdGllcyxcbiAgICAgIG1lcmdlZFByb3BzU3R5bGVzOiBtZXJnZWRQcm9wc1N0eWxlc1xuICAgIH07XG4gIH07XG5cbiAgLy8gYWZ0ZXIgY2hlY2tpbmcgZm9yIHVucmVhZFByb3BTdHlsZXMgIT0gbnVsbCwgd2UgbWFudWFsbHkgZ28gc2V0IHRoZVxuICAvLyBub24taW50ZXJwb2xhdGluZyB2YWx1ZXMgKHRob3NlIHRoYXQgYXJlIGEgbnVtYmVyLCB3aXRob3V0IGEgc3ByaW5nXG4gIC8vIGNvbmZpZylcblxuICBUcmFuc2l0aW9uTW90aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJldlRpbWUgPSBfcGVyZm9ybWFuY2VOb3cyWydkZWZhdWx0J10oKTtcbiAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uSWZOZWNlc3NhcnkoKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uTW90aW9uLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhwcm9wcykge1xuICAgIGlmICh0aGlzLnVucmVhZFByb3BTdHlsZXMpIHtcbiAgICAgIC8vIHByZXZpb3VzIHByb3BzIGhhdmVuJ3QgaGFkIHRoZSBjaGFuY2UgdG8gYmUgc2V0IHlldDsgc2V0IHRoZW0gaGVyZVxuICAgICAgdGhpcy5jbGVhclVucmVhZFByb3BTdHlsZSh0aGlzLnVucmVhZFByb3BTdHlsZXMpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXM7XG4gICAgaWYgKHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMudW5yZWFkUHJvcFN0eWxlcyA9IHN0eWxlcyhyZWh5ZHJhdGVTdHlsZXModGhpcy5zdGF0ZS5tZXJnZWRQcm9wc1N0eWxlcywgdGhpcy51bnJlYWRQcm9wU3R5bGVzLCB0aGlzLnN0YXRlLmxhc3RJZGVhbFN0eWxlcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVucmVhZFByb3BTdHlsZXMgPSBzdHlsZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uSUQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5wcmV2VGltZSA9IF9wZXJmb3JtYW5jZU5vdzJbJ2RlZmF1bHQnXSgpO1xuICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbklmTmVjZXNzYXJ5KCk7XG4gICAgfVxuICB9O1xuXG4gIFRyYW5zaXRpb25Nb3Rpb24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bm1vdW50aW5nID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JRCAhPSBudWxsKSB7XG4gICAgICBfcmFmMlsnZGVmYXVsdCddLmNhbmNlbCh0aGlzLmFuaW1hdGlvbklEKTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSUQgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBUcmFuc2l0aW9uTW90aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGh5ZHJhdGVkU3R5bGVzID0gcmVoeWRyYXRlU3R5bGVzKHRoaXMuc3RhdGUubWVyZ2VkUHJvcHNTdHlsZXMsIHRoaXMudW5yZWFkUHJvcFN0eWxlcywgdGhpcy5zdGF0ZS5jdXJyZW50U3R5bGVzKTtcbiAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW4oaHlkcmF0ZWRTdHlsZXMpO1xuICAgIHJldHVybiByZW5kZXJlZENoaWxkcmVuICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5DaGlsZHJlbi5vbmx5KHJlbmRlcmVkQ2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uTW90aW9uO1xufSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFRyYW5zaXRpb25Nb3Rpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLy8gbGlzdCBvZiBzdHlsZXMsIGVhY2ggY29udGFpbmluZyBpbnRlcnBvbGF0aW5nIHZhbHVlcy4gUGFydCBvZiB3aGF0J3MgcGFzc2VkXG4vLyB0byBjaGlsZHJlbiBmdW5jdGlvbi4gTm90aWNlIHRoYXQgdGhpcyBpc1xuLy8gQXJyYXk8QWN0dWFsSW50ZXJwb2xhdGluZ1N0eWxlT2JqZWN0Piwgd2l0aG91dCB0aGUgd3JhcHBlciB0aGF0IGlzIHtrZXk6IC4uLixcbi8vIGRhdGE6IC4uLiBzdHlsZTogQWN0dWFsSW50ZXJwb2xhdGluZ1N0eWxlT2JqZWN0fS4gT25seSBtZXJnZWRQcm9wc1N0eWxlc1xuLy8gY29udGFpbnMgdGhlIGtleSAmIGRhdGEgaW5mbyAoc28gdGhhdCB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUgc291cmNlIG9mIHRydXRoXG4vLyBmb3IgdGhlc2UsIGFuZCB0byBzYXZlIHNwYWNlKS4gQ2hlY2sgdGhlIGNvbW1lbnQgZm9yIGByZWh5ZHJhdGVTdHlsZXNgIHRvXG4vLyBzZWUgaG93IHdlIHJlZ2VuZXJhdGUgdGhlIGVudGlyZXR5IG9mIHdoYXQncyBwYXNzZWQgdG8gY2hpbGRyZW4gZnVuY3Rpb25cblxuLy8gdGhlIGFycmF5IHRoYXQga2VlcHMgdHJhY2sgb2YgY3VycmVudGx5IHJlbmRlcmVkIHN0dWZmISBJbmNsdWRpbmcgc3R1ZmZcbi8vIHRoYXQgeW91J3ZlIHVubW91bnRlZCBidXQgdGhhdCdzIHN0aWxsIGFuaW1hdGluZy4gVGhpcyBpcyB3aGVyZSBpdCBsaXZlc1xuXG4vLyBpdCdzIHBvc3NpYmxlIHRoYXQgY3VycmVudFN0eWxlJ3MgdmFsdWUgaXMgc3RhbGU6IGlmIHByb3BzIGlzIGltbWVkaWF0ZWx5XG4vLyBjaGFuZ2VkIGZyb20gMCB0byA0MDAgdG8gc3ByaW5nKDApIGFnYWluLCB0aGUgYXN5bmMgY3VycmVudFN0eWxlIGlzIHN0aWxsXG4vLyBhdCAwIChkaWRuJ3QgaGF2ZSB0aW1lIHRvIHRpY2sgYW5kIGludGVycG9sYXRlIGV2ZW4gb25jZSkuIElmIHdlIG5haXZlbHlcbi8vIGNvbXBhcmUgY3VycmVudFN0eWxlIHdpdGggZGVzdFZhbCBpdCdsbCBiZSAwID09PSAwIChubyBhbmltYXRpb24sIHN0b3ApLlxuLy8gSW4gcmVhbGl0eSBjdXJyZW50U3R5bGUgc2hvdWxkIGJlIDQwMCIsIlxuXG4vLyBjdXJyZW50bHkgdXNlZCB0byBpbml0aWF0ZSB0aGUgdmVsb2NpdHkgc3R5bGUgb2JqZWN0IHRvIDBcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG1hcFRvWmVybztcblxuZnVuY3Rpb24gbWFwVG9aZXJvKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgcmV0W2tleV0gPSAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcblxuLy8gY29yZSBrZXlzIG1lcmdpbmcgYWxnb3JpdGhtLiBJZiBwcmV2aW91cyByZW5kZXIncyBrZXlzIGFyZSBbYSwgYl0sIGFuZCB0aGVcbi8vIG5leHQgcmVuZGVyJ3MgW2MsIGIsIGRdLCB3aGF0J3MgdGhlIGZpbmFsIG1lcmdlZCBrZXlzIGFuZCBvcmRlcmluZz9cblxuLy8gLSBjIGFuZCBhIG11c3QgYm90aCBiZSBiZWZvcmUgYlxuLy8gLSBiIGJlZm9yZSBkXG4vLyAtIG9yZGVyaW5nIGJldHdlZW4gYSBhbmQgYyBhbWJpZ3VvdXNcblxuLy8gdGhpcyByZWR1Y2VzIHRvIG1lcmdpbmcgdHdvIHBhcnRpYWxseSBvcmRlcmVkIGxpc3RzIChlLmcuIGxpc3RzIHdoZXJlIG5vdFxuLy8gZXZlcnkgaXRlbSBoYXMgYSBkZWZpbml0ZSBvcmRlcmluZywgbGlrZSBjb21wYXJpbmcgYSBhbmQgYyBhYm92ZSkuIEZvciB0aGVcbi8vIGFtYmlndW91cyBvcmRlcmluZyB3ZSBkZXRlcm1pbmlzdGljYWxseSBjaG9vc2UgdG8gcGxhY2UgdGhlIG5leHQgcmVuZGVyJ3Ncbi8vIGl0ZW0gYWZ0ZXIgdGhlIHByZXZpb3VzJzsgc28gYyBhZnRlciBhXG5cbi8vIHRoaXMgaXMgY2FsbGVkIGEgdG9wb2xvZ2ljYWwgc29ydGluZy4gRXhjZXB0IHRoZSBleGlzdGluZyBhbGdvcml0aG1zIGRvbid0XG4vLyB3b3JrIHdlbGwgd2l0aCBqcyBiYyBvZiB0aGUgYW1vdW50IG9mIGFsbG9jYXRpb24sIGFuZCBpc24ndCBvcHRpbWl6ZWQgZm9yIG91clxuLy8gY3VycmVudCB1c2UtY2FzZSBiYyB0aGUgcnVudGltZSBpcyBsaW5lYXIgaW4gdGVybXMgb2YgZWRnZXMgKHNlZSB3aWtpIGZvclxuLy8gbWVhbmluZyksIHdoaWNoIGlzIGh1Z2Ugd2hlbiB0d28gbGlzdHMgaGF2ZSBtYW55IGNvbW1vbiBlbGVtZW50c1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gbWVyZ2VEaWZmO1xuXG5mdW5jdGlvbiBtZXJnZURpZmYocHJldiwgbmV4dCwgb25SZW1vdmUpIHtcbiAgLy8gYm9va2tlZXBpbmcgZm9yIGVhc2llciBhY2Nlc3Mgb2YgYSBrZXkncyBpbmRleCBiZWxvdy4gVGhpcyBpcyAyIGFsbG9jYXRpb25zICtcbiAgLy8gcG90ZW50aWFsbHkgdHJpZ2dlcmluZyBjaHJvbWUgaGFzaCBtYXAgbW9kZSBmb3Igb2JqcyAoc28gaXQgbWlnaHQgYmUgZmFzdGVyXG5cbiAgdmFyIHByZXZLZXlJbmRleCA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpKyspIHtcbiAgICBwcmV2S2V5SW5kZXhbcHJldltpXS5rZXldID0gaTtcbiAgfVxuICB2YXIgbmV4dEtleUluZGV4ID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmV4dC5sZW5ndGg7IGkrKykge1xuICAgIG5leHRLZXlJbmRleFtuZXh0W2ldLmtleV0gPSBpO1xuICB9XG5cbiAgLy8gZmlyc3QsIGFuIG92ZXJseSBlbGFib3JhdGUgd2F5IG9mIG1lcmdpbmcgcHJldiBhbmQgbmV4dCwgZWxpbWluYXRpbmdcbiAgLy8gZHVwbGljYXRlcyAoaW4gdGVybXMgb2Yga2V5cykuIElmIHRoZXJlJ3MgZHVwZSwga2VlcCB0aGUgaXRlbSBpbiBuZXh0KS5cbiAgLy8gVGhpcyB3YXkgb2Ygd3JpdGluZyBpdCBzYXZlcyBhbGxvY2F0aW9uc1xuICB2YXIgcmV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmV4dC5sZW5ndGg7IGkrKykge1xuICAgIHJldFtpXSA9IG5leHRbaV07XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmV2Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dEtleUluZGV4LCBwcmV2W2ldLmtleSkpIHtcbiAgICAgIC8vIHRoaXMgaXMgY2FsbGVkIG15IFRNJ3MgYG1lcmdlQW5kU3luY2AsIHdoaWNoIGNhbGxzIHdpbGxMZWF2ZS4gV2UgZG9uJ3RcbiAgICAgIC8vIG1lcmdlIGluIGtleXMgdGhhdCB0aGUgdXNlciBkZXNpcmVzIHRvIGtpbGxcbiAgICAgIHZhciBmaWxsID0gb25SZW1vdmUoaSwgcHJldltpXSk7XG4gICAgICBpZiAoZmlsbCAhPSBudWxsKSB7XG4gICAgICAgIHJldC5wdXNoKGZpbGwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyBhbGwgdGhlIGl0ZW1zIGFsbCBwcmVzZW50LiBDb3JlIHNvcnRpbmcgbG9naWMgdG8gaGF2ZSB0aGUgcmlnaHQgb3JkZXJcbiAgcmV0dXJuIHJldC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIG5leHRPcmRlckEgPSBuZXh0S2V5SW5kZXhbYS5rZXldO1xuICAgIHZhciBuZXh0T3JkZXJCID0gbmV4dEtleUluZGV4W2Iua2V5XTtcbiAgICB2YXIgcHJldk9yZGVyQSA9IHByZXZLZXlJbmRleFthLmtleV07XG4gICAgdmFyIHByZXZPcmRlckIgPSBwcmV2S2V5SW5kZXhbYi5rZXldO1xuXG4gICAgaWYgKG5leHRPcmRlckEgIT0gbnVsbCAmJiBuZXh0T3JkZXJCICE9IG51bGwpIHtcbiAgICAgIC8vIGJvdGgga2V5cyBpbiBuZXh0XG4gICAgICByZXR1cm4gbmV4dEtleUluZGV4W2Eua2V5XSAtIG5leHRLZXlJbmRleFtiLmtleV07XG4gICAgfSBlbHNlIGlmIChwcmV2T3JkZXJBICE9IG51bGwgJiYgcHJldk9yZGVyQiAhPSBudWxsKSB7XG4gICAgICAvLyBib3RoIGtleXMgaW4gcHJldlxuICAgICAgcmV0dXJuIHByZXZLZXlJbmRleFthLmtleV0gLSBwcmV2S2V5SW5kZXhbYi5rZXldO1xuICAgIH0gZWxzZSBpZiAobmV4dE9yZGVyQSAhPSBudWxsKSB7XG4gICAgICAvLyBrZXkgYSBpbiBuZXh0LCBrZXkgYiBpbiBwcmV2XG5cbiAgICAgIC8vIGhvdyB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIGJldHdlZW4gYSBhbmQgYj8gV2UgZmluZCBhIFwicGl2b3RcIiAodGVybVxuICAgICAgLy8gYWJ1c2UpLCBhIGtleSBwcmVzZW50IGluIGJvdGggcHJldiBhbmQgbmV4dCwgdGhhdCBpcyBzYW5kd2ljaGVkIGJldHdlZW5cbiAgICAgIC8vIGEgYW5kIGIuIEluIHRoZSBjb250ZXh0IG9mIG91ciBhYm92ZSBleGFtcGxlLCBpZiB3ZSdyZSBjb21wYXJpbmcgYSBhbmRcbiAgICAgIC8vIGQsIGIncyAodGhlIG9ubHkpIHBpdm90XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBpdm90ID0gbmV4dFtpXS5rZXk7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByZXZLZXlJbmRleCwgcGl2b3QpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dE9yZGVyQSA8IG5leHRLZXlJbmRleFtwaXZvdF0gJiYgcHJldk9yZGVyQiA+IHByZXZLZXlJbmRleFtwaXZvdF0pIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dE9yZGVyQSA+IG5leHRLZXlJbmRleFtwaXZvdF0gJiYgcHJldk9yZGVyQiA8IHByZXZLZXlJbmRleFtwaXZvdF0pIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gcGx1Z2dhYmxlLiBkZWZhdWx0IHRvOiBuZXh0IGJpZ2dlciB0aGFuIHByZXZcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBwcmV2T3JkZXJBLCBuZXh0T3JkZXJCXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGl2b3QgPSBuZXh0W2ldLmtleTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByZXZLZXlJbmRleCwgcGl2b3QpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRPcmRlckIgPCBuZXh0S2V5SW5kZXhbcGl2b3RdICYmIHByZXZPcmRlckEgPiBwcmV2S2V5SW5kZXhbcGl2b3RdKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIGlmIChuZXh0T3JkZXJCID4gbmV4dEtleUluZGV4W3Bpdm90XSAmJiBwcmV2T3JkZXJBIDwgcHJldktleUluZGV4W3Bpdm90XSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHBsdWdnYWJsZS4gZGVmYXVsdCB0bzogbmV4dCBiaWdnZXIgdGhhbiBwcmV2XG4gICAgcmV0dXJuIC0xO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyB0byBsb29wIHRocm91Z2ggYW5kIGZpbmQgYSBrZXkncyBpbmRleCBlYWNoIHRpbWUpLCBidXQgSSBubyBsb25nZXIgY2FyZSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG4gIG5vV29iYmxlOiB7IHN0aWZmbmVzczogMTcwLCBkYW1waW5nOiAyNiB9LCAvLyB0aGUgZGVmYXVsdCwgaWYgbm90aGluZyBwcm92aWRlZFxuICBnZW50bGU6IHsgc3RpZmZuZXNzOiAxMjAsIGRhbXBpbmc6IDE0IH0sXG4gIHdvYmJseTogeyBzdGlmZm5lc3M6IDE4MCwgZGFtcGluZzogMTIgfSxcbiAgc3RpZmY6IHsgc3RpZmZuZXNzOiAyMTAsIGRhbXBpbmc6IDIwIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqWydkZWZhdWx0J10gOiBvYmo7IH1cblxudmFyIF9Nb3Rpb24gPSByZXF1aXJlKCcuL01vdGlvbicpO1xuXG5leHBvcnRzLk1vdGlvbiA9IF9pbnRlcm9wUmVxdWlyZShfTW90aW9uKTtcblxudmFyIF9TdGFnZ2VyZWRNb3Rpb24gPSByZXF1aXJlKCcuL1N0YWdnZXJlZE1vdGlvbicpO1xuXG5leHBvcnRzLlN0YWdnZXJlZE1vdGlvbiA9IF9pbnRlcm9wUmVxdWlyZShfU3RhZ2dlcmVkTW90aW9uKTtcblxudmFyIF9UcmFuc2l0aW9uTW90aW9uID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uTW90aW9uJyk7XG5cbmV4cG9ydHMuVHJhbnNpdGlvbk1vdGlvbiA9IF9pbnRlcm9wUmVxdWlyZShfVHJhbnNpdGlvbk1vdGlvbik7XG5cbnZhciBfc3ByaW5nID0gcmVxdWlyZSgnLi9zcHJpbmcnKTtcblxuZXhwb3J0cy5zcHJpbmcgPSBfaW50ZXJvcFJlcXVpcmUoX3NwcmluZyk7XG5cbnZhciBfcHJlc2V0cyA9IHJlcXVpcmUoJy4vcHJlc2V0cycpO1xuXG5leHBvcnRzLnByZXNldHMgPSBfaW50ZXJvcFJlcXVpcmUoX3ByZXNldHMpO1xuXG52YXIgX3N0cmlwU3R5bGUgPSByZXF1aXJlKCcuL3N0cmlwU3R5bGUnKTtcblxuZXhwb3J0cy5zdHJpcFN0eWxlID0gX2ludGVyb3BSZXF1aXJlKF9zdHJpcFN0eWxlKTtcblxuLy8gZGVwcmVjYXRlZCwgZHVtbXkgd2FybmluZyBmdW5jdGlvblxuXG52YXIgX3Jlb3JkZXJLZXlzID0gcmVxdWlyZSgnLi9yZW9yZGVyS2V5cycpO1xuXG5leHBvcnRzLnJlb3JkZXJLZXlzID0gX2ludGVyb3BSZXF1aXJlKF9yZW9yZGVyS2V5cyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gcmVvcmRlcktleXM7XG5cbnZhciBoYXNXYXJuZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gcmVvcmRlcktleXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIGlmICghaGFzV2FybmVkKSB7XG4gICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignYHJlb3JkZXJLZXlzYCBoYXMgYmVlbiByZW1vdmVkLCBzaW5jZSBpdCBpcyBubyBsb25nZXIgbmVlZGVkIGZvciBUcmFuc2l0aW9uTW90aW9uXFwncyBuZXcgc3R5bGVzIGFycmF5IEFQSS4nKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXG5cbi8vIHVzYWdlIGFzc3VtcHRpb246IGN1cnJlbnRTdHlsZSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW4gcmVuZGVyZWQgYnV0IGl0IHNheXNcbi8vIG5vdGhpbmcgb2Ygd2hldGhlciBjdXJyZW50U3R5bGUgaXMgc3RhbGUgKHNlZSB1bnJlYWRQcm9wU3R5bGUpXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSBzaG91bGRTdG9wQW5pbWF0aW9uO1xuXG5mdW5jdGlvbiBzaG91bGRTdG9wQW5pbWF0aW9uKGN1cnJlbnRTdHlsZSwgc3R5bGUsIGN1cnJlbnRWZWxvY2l0eSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3R5bGUpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdHlsZSwga2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRWZWxvY2l0eVtrZXldICE9PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlVmFsdWUgPSB0eXBlb2Ygc3R5bGVba2V5XSA9PT0gJ251bWJlcicgPyBzdHlsZVtrZXldIDogc3R5bGVba2V5XS52YWw7XG4gICAgLy8gc3RlcHBlciB3aWxsIGhhdmUgYWxyZWFkeSB0YWtlbiBjYXJlIG9mIHJvdW5kaW5nIHByZWNpc2lvbiBlcnJvcnMsIHNvXG4gICAgLy8gd29uJ3QgaGF2ZSBzdWNoIHRoaW5nIGFzIDAuOTk5OSAhPT09IDFcbiAgICBpZiAoY3VycmVudFN0eWxlW2tleV0gIT09IHN0eWxlVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBzcHJpbmc7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9wcmVzZXRzID0gcmVxdWlyZSgnLi9wcmVzZXRzJyk7XG5cbnZhciBfcHJlc2V0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVzZXRzKTtcblxudmFyIGRlZmF1bHRDb25maWcgPSBfZXh0ZW5kcyh7fSwgX3ByZXNldHMyWydkZWZhdWx0J10ubm9Xb2JibGUsIHtcbiAgcHJlY2lzaW9uOiAwLjAxXG59KTtcblxuZnVuY3Rpb24gc3ByaW5nKHZhbCwgY29uZmlnKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdENvbmZpZywgY29uZmlnLCB7IHZhbDogdmFsIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcblxuLy8gc3RlcHBlciBpcyB1c2VkIGEgbG90LiBTYXZlcyBhbGxvY2F0aW9uIHRvIHJldHVybiB0aGUgc2FtZSBhcnJheSB3cmFwcGVyLlxuLy8gVGhpcyBpcyBmaW5lIGFuZCBkYW5nZXItZnJlZSBhZ2FpbnN0IG11dGF0aW9ucyBiZWNhdXNlIHRoZSBjYWxsc2l0ZVxuLy8gaW1tZWRpYXRlbHkgZGVzdHJ1Y3R1cmVzIGl0IGFuZCBnZXRzIHRoZSBudW1iZXJzIGluc2lkZSB3aXRob3V0IHBhc3NpbmcgdGhlXG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gc3RlcHBlcjtcblxudmFyIHJldXNlZFR1cGxlID0gWzAsIDBdO1xuXG5mdW5jdGlvbiBzdGVwcGVyKHNlY29uZFBlckZyYW1lLCB4LCB2LCBkZXN0WCwgaywgYiwgcHJlY2lzaW9uKSB7XG4gIC8vIFNwcmluZyBzdGlmZm5lc3MsIGluIGtnIC8gc14yXG5cbiAgLy8gZm9yIGFuaW1hdGlvbnMsIGRlc3RYIGlzIHJlYWxseSBzcHJpbmcgbGVuZ3RoIChzcHJpbmcgYXQgcmVzdCkuIGluaXRpYWxcbiAgLy8gcG9zaXRpb24gaXMgY29uc2lkZXJlZCBhcyB0aGUgc3RyZXRjaGVkL2NvbXByZXNzZWQgcG9zaXRpb24gb2YgYSBzcHJpbmdcbiAgdmFyIEZzcHJpbmcgPSAtayAqICh4IC0gZGVzdFgpO1xuXG4gIC8vIERhbXBpbmcsIGluIGtnIC8gc1xuICB2YXIgRmRhbXBlciA9IC1iICogdjtcblxuICAvLyB1c3VhbGx5IHdlIHB1dCBtYXNzIGhlcmUsIGJ1dCBmb3IgYW5pbWF0aW9uIHB1cnBvc2VzLCBzcGVjaWZ5aW5nIG1hc3MgaXMgYVxuICAvLyBiaXQgcmVkdW5kYW50LiB5b3UgY291bGQgc2ltcGx5IGFkanVzdCBrIGFuZCBiIGFjY29yZGluZ2x5XG4gIC8vIGxldCBhID0gKEZzcHJpbmcgKyBGZGFtcGVyKSAvIG1hc3M7XG4gIHZhciBhID0gRnNwcmluZyArIEZkYW1wZXI7XG5cbiAgdmFyIG5ld1YgPSB2ICsgYSAqIHNlY29uZFBlckZyYW1lO1xuICB2YXIgbmV3WCA9IHggKyBuZXdWICogc2Vjb25kUGVyRnJhbWU7XG5cbiAgaWYgKE1hdGguYWJzKG5ld1YpIDwgcHJlY2lzaW9uICYmIE1hdGguYWJzKG5ld1ggLSBkZXN0WCkgPCBwcmVjaXNpb24pIHtcbiAgICByZXVzZWRUdXBsZVswXSA9IGRlc3RYO1xuICAgIHJldXNlZFR1cGxlWzFdID0gMDtcbiAgICByZXR1cm4gcmV1c2VkVHVwbGU7XG4gIH1cblxuICByZXVzZWRUdXBsZVswXSA9IG5ld1g7XG4gIHJldXNlZFR1cGxlWzFdID0gbmV3VjtcbiAgcmV0dXJuIHJldXNlZFR1cGxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuLy8gYXJyYXkgcmVmZXJlbmNlIGFyb3VuZC4iLCJcbi8vIHR1cm4ge3g6IHt2YWw6IDEsIHN0aWZmbmVzczogMSwgZGFtcGluZzogMn0sIHk6IDJ9IGdlbmVyYXRlZCBieVxuLy8gYHt4OiBzcHJpbmcoMSwge3N0aWZmbmVzczogMSwgZGFtcGluZzogMn0pLCB5OiAyfWAgaW50byB7eDogMSwgeTogMn1cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3RyaXBTdHlsZTtcblxuZnVuY3Rpb24gc3RyaXBTdHlsZShzdHlsZSkge1xuICB2YXIgcmV0ID0ge307XG4gIGZvciAodmFyIGtleSBpbiBzdHlsZSkge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0eWxlLCBrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSB0eXBlb2Ygc3R5bGVba2V5XSA9PT0gJ251bWJlcicgPyBzdHlsZVtrZXldIDogc3R5bGVba2V5XS52YWw7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwidmFyIG5vdyA9IHJlcXVpcmUoJ3BlcmZvcm1hbmNlLW5vdycpXG4gICwgcm9vdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93XG4gICwgdmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddXG4gICwgc3VmZml4ID0gJ0FuaW1hdGlvbkZyYW1lJ1xuICAsIHJhZiA9IHJvb3RbJ3JlcXVlc3QnICsgc3VmZml4XVxuICAsIGNhZiA9IHJvb3RbJ2NhbmNlbCcgKyBzdWZmaXhdIHx8IHJvb3RbJ2NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxuXG5mb3IodmFyIGkgPSAwOyAhcmFmICYmIGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gIHJhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdSZXF1ZXN0JyArIHN1ZmZpeF1cbiAgY2FmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbCcgKyBzdWZmaXhdXG4gICAgICB8fCByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG59XG5cbi8vIFNvbWUgdmVyc2lvbnMgb2YgRkYgaGF2ZSByQUYgYnV0IG5vdCBjQUZcbmlmKCFyYWYgfHwgIWNhZikge1xuICB2YXIgbGFzdCA9IDBcbiAgICAsIGlkID0gMFxuICAgICwgcXVldWUgPSBbXVxuICAgICwgZnJhbWVEdXJhdGlvbiA9IDEwMDAgLyA2MFxuXG4gIHJhZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YXIgX25vdyA9IG5vdygpXG4gICAgICAgICwgbmV4dCA9IE1hdGgubWF4KDAsIGZyYW1lRHVyYXRpb24gLSAoX25vdyAtIGxhc3QpKVxuICAgICAgbGFzdCA9IG5leHQgKyBfbm93XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3AgPSBxdWV1ZS5zbGljZSgwKVxuICAgICAgICAvLyBDbGVhciBxdWV1ZSBoZXJlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gY2FsbGJhY2tzIGZyb20gYXBwZW5kaW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyB0byB0aGUgY3VycmVudCBmcmFtZSdzIHF1ZXVlXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDBcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYoIWNwW2ldLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICBjcFtpXS5jYWxsYmFjayhsYXN0KVxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGUgfSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIE1hdGgucm91bmQobmV4dCkpXG4gICAgfVxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaGFuZGxlOiArK2lkLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgY2FuY2VsbGVkOiBmYWxzZVxuICAgIH0pXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBjYWYgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmKHF1ZXVlW2ldLmhhbmRsZSA9PT0gaGFuZGxlKSB7XG4gICAgICAgIHF1ZXVlW2ldLmNhbmNlbGxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAvLyBXcmFwIGluIGEgbmV3IGZ1bmN0aW9uIHRvIHByZXZlbnRcbiAgLy8gYGNhbmNlbGAgcG90ZW50aWFsbHkgYmVpbmcgYXNzaWduZWRcbiAgLy8gdG8gdGhlIG5hdGl2ZSByQUYgZnVuY3Rpb25cbiAgcmV0dXJuIHJhZi5jYWxsKHJvb3QsIGZuKVxufVxubW9kdWxlLmV4cG9ydHMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIGNhZi5hcHBseShyb290LCBhcmd1bWVudHMpXG59XG5tb2R1bGUuZXhwb3J0cy5wb2x5ZmlsbCA9IGZ1bmN0aW9uKCkge1xuICByb290LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJhZlxuICByb290LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iXSwibmFtZXMiOlsiZ2V0TmFub1NlY29uZHMiLCJocnRpbWUiLCJsb2FkVGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwibW9kdWxlIiwiZXhwb3J0cyIsInByb2Nlc3MiLCJociIsIkRhdGUiLCJnZXRUaW1lIiwiY2FsbCIsInRoaXMiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfbWFwVG9aZXJvMiIsIl9zdHJpcFN0eWxlMiIsIl9zdGVwcGVyNCIsIl9wZXJmb3JtYW5jZU5vdzIiLCJfcmFmMiIsIl9zaG91bGRTdG9wQW5pbWF0aW9uMiIsIl9yZWFjdDIiLCJfcHJvcFR5cGVzMiIsIm1zUGVyRnJhbWUiLCJNb3Rpb24iLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIndhc0FuaW1hdGluZyIsImFuaW1hdGlvbklEIiwicHJldlRpbWUiLCJhY2N1bXVsYXRlZFRpbWUiLCJ1bnJlYWRQcm9wU3R5bGUiLCJjbGVhclVucmVhZFByb3BTdHlsZSIsImRlc3RTdHlsZSIsImRpcnR5IiwiX3N0YXRlIiwic3RhdGUiLCJjdXJyZW50U3R5bGUiLCJjdXJyZW50VmVsb2NpdHkiLCJsYXN0SWRlYWxTdHlsZSIsImxhc3RJZGVhbFZlbG9jaXR5Iiwic3R5bGVWYWx1ZSIsInNldFN0YXRlIiwic3RhcnRBbmltYXRpb25JZk5lY2Vzc2FyeSIsInRpbWVzdGFtcCIsInByb3BzU3R5bGUiLCJzdHlsZSIsIm9uUmVzdCIsImN1cnJlbnRUaW1lIiwidGltZURlbHRhIiwiY3VycmVudEZyYW1lQ29tcGxldGlvbiIsIk1hdGgiLCJmbG9vciIsImZyYW1lc1RvQ2F0Y2hVcCIsIm5ld0xhc3RJZGVhbFN0eWxlIiwibmV3TGFzdElkZWFsVmVsb2NpdHkiLCJuZXdDdXJyZW50U3R5bGUiLCJuZXdDdXJyZW50VmVsb2NpdHkiLCJuZXdMYXN0SWRlYWxTdHlsZVZhbHVlIiwibmV3TGFzdElkZWFsVmVsb2NpdHlWYWx1ZSIsIl9zdGVwcGVyIiwidmFsIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsInByZWNpc2lvbiIsIl9zdGVwcGVyMiIsIm5leHRJZGVhbFgiLCJuZXh0SWRlYWxWIiwiZGVmYXVsdFN0YXRlIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGVmYXVsdFN0eWxlIiwib2JqZWN0T2YiLCJudW1iZXIiLCJvbmVPZlR5cGUiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwiY2hpbGRyZW4iLCJmdW5jIiwiX3Byb3BzIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjYW5jZWwiLCJyZW5kZXIiLCJyZW5kZXJlZENoaWxkcmVuIiwiQ2hpbGRyZW4iLCJvbmx5IiwiQ29tcG9uZW50IiwiU3RhZ2dlcmVkTW90aW9uIiwidW5yZWFkUHJvcFN0eWxlcyIsImN1cnJlbnRTdHlsZXMiLCJjdXJyZW50VmVsb2NpdGllcyIsImxhc3RJZGVhbFN0eWxlcyIsImxhc3RJZGVhbFZlbG9jaXRpZXMiLCJzb21lRGlydHkiLCJkZXN0U3R5bGVzIiwic3R5bGVzIiwic2hvdWxkU3RvcEFuaW1hdGlvbkFsbCIsIm5ld0xhc3RJZGVhbFN0eWxlcyIsIm5ld0xhc3RJZGVhbFZlbG9jaXRpZXMiLCJuZXdDdXJyZW50U3R5bGVzIiwibmV3Q3VycmVudFZlbG9jaXRpZXMiLCJqIiwiZGVmYXVsdFN0eWxlcyIsImFycmF5T2YiLCJtYXAiLCJfbWVyZ2VEaWZmMiIsInJlaHlkcmF0ZVN0eWxlcyIsIm1lcmdlZFByb3BzU3R5bGVzIiwicGxhaW5TdHlsZXMiLCJjVW5yZWFkUHJvcFN0eWxlcyIsIm1lcmdlZFByb3BzU3R5bGUiLCJkYXRhIiwibWVyZ2VBbmRTeW5jIiwid2lsbEVudGVyIiwid2lsbExlYXZlIiwiZGlkTGVhdmUiLCJvbGRNZXJnZWRQcm9wc1N0eWxlcyIsIm9sZEN1cnJlbnRTdHlsZXMiLCJvbGRDdXJyZW50VmVsb2NpdGllcyIsIm9sZExhc3RJZGVhbFN0eWxlcyIsIm9sZExhc3RJZGVhbFZlbG9jaXRpZXMiLCJuZXdNZXJnZWRQcm9wc1N0eWxlcyIsIm9sZEluZGV4Iiwib2xkTWVyZ2VkUHJvcHNTdHlsZSIsImxlYXZpbmdTdHlsZSIsIm5ld01lcmdlZFByb3BzU3R5bGVDZWxsIiwiZm91bmRPbGRJbmRleCIsInBsYWluU3R5bGUiLCJ2ZWxvY2l0eSIsIlRyYW5zaXRpb25Nb3Rpb24iLCJ1bm1vdW50aW5nIiwiX21lcmdlQW5kU3luYyIsInByb3BTdHlsZXMiLCJfbWVyZ2VBbmRTeW5jMiIsIm5ld01lcmdlZFByb3BzU3R5bGUiLCJzaGFwZSIsInN0cmluZyIsImFueSIsInN0eWxlVGhhdEVudGVyZWQiLCJ1bmRlZmluZWQiLCJkZWZhdWx0U3R5bGVDZWxsIiwicyIsIl9tZXJnZUFuZFN5bmMzIiwiaHlkcmF0ZWRTdHlsZXMiLCJtYXBUb1plcm8iLCJyZXQiLCJtZXJnZURpZmYiLCJwcmV2IiwibmV4dCIsIm9uUmVtb3ZlIiwicHJldktleUluZGV4IiwibmV4dEtleUluZGV4IiwiZmlsbCIsInB1c2giLCJzb3J0IiwiYSIsImIiLCJuZXh0T3JkZXJBIiwibmV4dE9yZGVyQiIsInByZXZPcmRlckEiLCJwcmV2T3JkZXJCIiwicGl2b3QiLCJub1dvYmJsZSIsImdlbnRsZSIsIndvYmJseSIsInN0aWZmIiwiX2ludGVyb3BSZXF1aXJlIiwiX01vdGlvbiIsIl9TdGFnZ2VyZWRNb3Rpb24iLCJfVHJhbnNpdGlvbk1vdGlvbiIsIl9zcHJpbmciLCJzcHJpbmciLCJfcHJlc2V0cyIsInByZXNldHMiLCJfc3RyaXBTdHlsZSIsInN0cmlwU3R5bGUiLCJfcmVvcmRlcktleXMiLCJyZW9yZGVyS2V5cyIsInNob3VsZFN0b3BBbmltYXRpb24iLCJjb25maWciLCJkZWZhdWx0Q29uZmlnIiwiX3ByZXNldHMyIiwic3RlcHBlciIsInNlY29uZFBlckZyYW1lIiwieCIsInYiLCJkZXN0WCIsImsiLCJuZXdWIiwibmV3WCIsImFicyIsInJldXNlZFR1cGxlIiwicm9vdCIsIndpbmRvdyIsImciLCJ2ZW5kb3JzIiwic3VmZml4IiwicmFmIiwiY2FmIiwibGFzdCIsImlkIiwicXVldWUiLCJjYWxsYmFjayIsIl9ub3ciLCJtYXgiLCJzZXRUaW1lb3V0IiwiY3AiLCJzbGljZSIsImNhbmNlbGxlZCIsImUiLCJyb3VuZCIsImhhbmRsZSIsImZuIiwiYXBwbHkiLCJwb2x5ZmlsbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==