(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1590],{"./src/code-studio/activityUtils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.resultFromStatus=exports.mergeActivityResult=exports.activityCssClass=void 0;var _constants=__webpack_require__("./src/constants.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js");exports.activityCssClass=function activityCssClass(result){return result&&result!==_constants.TestResults.NO_TESTS_RUN?result===_constants.TestResults.REVIEW_ACCEPTED_RESULT?_sharedConstants.LevelStatus.review_accepted:result===_constants.TestResults.REVIEW_REJECTED_RESULT?_sharedConstants.LevelStatus.review_rejected:result===_constants.TestResults.SUBMITTED_RESULT?_sharedConstants.LevelStatus.submitted:result>=_constants.TestResults.MINIMUM_OPTIMAL_RESULT?_sharedConstants.LevelStatus.perfect:result>=_constants.TestResults.MINIMUM_PASS_RESULT?_sharedConstants.LevelStatus.passed:_sharedConstants.LevelStatus.attempted:_sharedConstants.LevelStatus.not_tried},exports.resultFromStatus=function resultFromStatus(status){return status===_sharedConstants.LevelStatus.review_accepted?_constants.TestResults.REVIEW_ACCEPTED_RESULT:status===_sharedConstants.LevelStatus.review_rejected?_constants.TestResults.REVIEW_REJECTED_RESULT:status===_sharedConstants.LevelStatus.submitted?_constants.TestResults.SUBMITTED_RESULT:status===_sharedConstants.LevelStatus.free_play_complete?_constants.TestResults.FREE_PLAY:status===_sharedConstants.LevelStatus.perfect?_constants.TestResults.ALL_PASS:status===_sharedConstants.LevelStatus.passed?_constants.TestResults.MINIMUM_PASS_RESULT:_constants.TestResults.NO_TESTS_RUN},exports.mergeActivityResult=function mergeActivityResult(a,b){return b=b||0,0===(a=a||0)?b:0===b?a:Math.max(a,b)}},"./src/code-studio/hiddenLessonRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.STUDENT_SECTION_ID=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new HiddenState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_HIDDEN_LESSONS){var hiddenLessonsPerSection=action.hiddenLessonsPerSection,hideableLessonsAllowed=action.hideableLessonsAllowed,sectionIds=Object.keys(hiddenLessonsPerSection),nextState=state;return sectionIds.forEach((function(sectionId){hiddenLessonsPerSection[sectionId].forEach((function(lessonId){nextState=nextState.setIn(["lessonsBySection",sectionId,lessonId.toString()],!0)}))})),validateSectionIds(nextState),nextState.merge({hiddenLessonsInitialized:!0,hideableLessonsAllowed})}if(action.type===UPDATE_HIDDEN_LESSON){var sectionId=action.sectionId,lessonId=action.lessonId,hidden=action.hidden,_nextState=state.setIn(["lessonsBySection",sectionId,lessonId.toString()],hidden);return validateSectionIds(_nextState),_nextState}if(action.type===UPDATE_HIDDEN_SCRIPT){var _sectionId=action.sectionId,scriptId=action.scriptId,_hidden=action.hidden,_nextState2=state.setIn(["scriptsBySection",_sectionId.toString(),scriptId.toString()],_hidden);return validateSectionIds(_nextState2),_nextState2}return state},exports.getHiddenLessons=function getHiddenLessons(scriptName,canHideLessons){return function(dispatch){_jquery.default.ajax({type:"GET",url:"/s/".concat(scriptName,"/hidden_lessons"),dataType:"json",contentType:"application/json"}).done((function(response){return dispatch(function initializeHiddenLessons(data,canHideLessons){return function(dispatch){Array.isArray(data)&&(data=_defineProperty({},STUDENT_SECTION_ID,data)),dispatch(setHiddenLessons(data,!!canHideLessons))}}(response,canHideLessons))})).fail((function(err){return console.error(err)}))}},exports.initializeHiddenScripts=function initializeHiddenScripts(data){return function(dispatch){data&&(Array.isArray(data)&&(data=_defineProperty({},STUDENT_SECTION_ID,data)),Object.keys(data).forEach((function(sectionId){data[sectionId].forEach((function(scriptId){dispatch(updateHiddenScript(sectionId,scriptId,!0))}))})))}},exports.isLessonHiddenForSection=function isLessonHiddenForSection(state,sectionId,lessonId){return isHiddenForSection(state,sectionId,lessonId,"lessonsBySection")},exports.isScriptHiddenForSection=function isScriptHiddenForSection(state,sectionId,scriptId){return isHiddenForSection(state,sectionId,scriptId,"scriptsBySection")},exports.setHiddenLessons=setHiddenLessons,exports.toggleHiddenLesson=function toggleHiddenLesson(scriptName,sectionId,lessonId,hidden){return function(dispatch){dispatch(updateHiddenLesson(sectionId,lessonId,hidden)),postToggleHidden(scriptName,sectionId,lessonId,hidden)}},exports.toggleHiddenScript=function toggleHiddenScript(scriptName,sectionId,scriptId,hidden){return function(dispatch){dispatch(updateHiddenScript(sectionId,scriptId,hidden)),postToggleHidden(scriptName,sectionId,null,hidden)}},exports.updateHiddenLesson=updateHiddenLesson,exports.updateHiddenScript=updateHiddenScript;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_HIDDEN_LESSONS="hiddenLesson/SET_HIDDEN_LESSONS",UPDATE_HIDDEN_LESSON="hiddenLesson/UPDATE_HIDDEN_LESSON",UPDATE_HIDDEN_SCRIPT="hiddenLesson/UPDATE_HIDDEN_SCRIPT",STUDENT_SECTION_ID=exports.STUDENT_SECTION_ID="STUDENT",HiddenState=_immutable.default.Record({hiddenLessonsInitialized:!1,hideableLessonsAllowed:!1,lessonsBySection:_immutable.default.Map({}),scriptsBySection:_immutable.default.Map({})});function validateSectionIds(state){if(state.getIn(["lessonsBySection",STUDENT_SECTION_ID])&&state.get("lessonsBySection").size>1)throw new Error("Should never have STUDENT_SECTION_ID alongside other sectionIds")}function setHiddenLessons(hiddenLessonsPerSection,hideableLessonsAllowed){return{type:SET_HIDDEN_LESSONS,hiddenLessonsPerSection,hideableLessonsAllowed}}function updateHiddenLesson(sectionId,lessonId,hidden){return{type:UPDATE_HIDDEN_LESSON,sectionId,lessonId,hidden}}function updateHiddenScript(sectionId,scriptId,hidden){return{type:UPDATE_HIDDEN_SCRIPT,sectionId,scriptId,hidden}}function postToggleHidden(scriptName,sectionId,lessonId,hidden){var data={section_id:sectionId,hidden};lessonId&&(data.stage_id=lessonId),_jquery.default.ajax({type:"POST",url:"/s/".concat(scriptName,"/toggle_hidden"),dataType:"json",contentType:"application/json",data:JSON.stringify(data)}).success((function(){window.__TestInterface=window.__TestInterface||{},window.__TestInterface.toggleHiddenUnitComplete=!0}))}function isHiddenForSection(state,sectionId,itemId,bySectionKey){return!!itemId&&(sectionId||(sectionId=STUDENT_SECTION_ID),!!state.get(bySectionKey).getIn([sectionId.toString(),itemId.toString()]))}},"./src/code-studio/lessonLockRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.closeLockDialog=exports.beginSave=exports.authorizeLockable=exports.LockStatus=exports.FINISH_SAVE=exports.CLOSE_LOCK_DIALOG=exports.BEGIN_SAVE=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===AUTHORIZE_LOCKABLE)return Object.assign({},state,{lockableAuthorized:action.isAuthorized,lockableAuthorizedLoaded:!0});if(action.type===SET_SECTION_LOCK_STATUS)return _objectSpread(_objectSpread({},state),{},{lessonsBySectionId:_lodash.default.mapValues(action.sections,(function(section){return section.lessons})),lessonsBySectionIdLoaded:!0});if(action.type===REFRESH_SECTION_LOCK_STATUS){var lessonsBySectionId=_lodash.default.mapValues(action.sections,(function(section){return section.lessons})),lockDialogLessonId=state.lockDialogLessonId;if(lockDialogLessonId){var lockStatus=lockStatusForLesson(lessonsBySectionId[action.sectionId],lockDialogLessonId);return _objectSpread(_objectSpread({},state),{},{lessonsBySectionId,lockStatus})}return _objectSpread(_objectSpread({},state),{},{lessonsBySectionId})}if(action.type===_teacherSectionsRedux.SELECT_SECTION){if(0===Object.keys(state.lessonsBySectionId).length)return state;var sectionId=action.sectionId;if(sectionId===_teacherSectionsRedux.NO_SECTION)return _objectSpread(_objectSpread({},state),{},{lockStatus:initialState.lockStatus});if(!state.lessonsBySectionId[sectionId])throw new Error("Unknown sectionId ".concat(sectionId));var _lockDialogLessonId=state.lockDialogLessonId;if(_lockDialogLessonId)return _objectSpread(_objectSpread({},state),{},{lockStatus:lockStatusForLesson(state.lessonsBySectionId[sectionId],_lockDialogLessonId)})}if(action.type===OPEN_LOCK_DIALOG){var _sectionId=action.sectionId,lessonId=action.lessonId;return Object.assign({},state,{lockDialogLessonId:lessonId,lockStatus:lockStatusForLesson(state.lessonsBySectionId[_sectionId],lessonId)})}if(action.type===CLOSE_LOCK_DIALOG)return Object.assign({},state,{lockDialogLessonId:null,lockStatus:initialState.lockStatus});if(action.type===BEGIN_SAVE)return Object.assign({},state,{saving:!0});if(action.type===FINISH_SAVE){var _lessonsBySectionId=state.lessonsBySectionId,nextLockStatus=action.lockStatus,_sectionId2=action.sectionId,_lessonId=action.lessonId,nextLesson=_lodash.default.cloneDeep(_lessonsBySectionId[_sectionId2][_lessonId]);nextLesson.forEach((function(item,index){var update=nextLockStatus[index];if(item.user_level_id!==update.userLevelId)throw new Error("Expect user ids be the same");item.locked=update.lockStatus===LockStatus.Locked,item.readonly_answers=update.lockStatus===LockStatus.ReadonlyAnswers}));var nextState=_lodash.default.cloneDeep(state);return nextState.lessonsBySectionId[_sectionId2][_lessonId]=nextLesson,Object.assign(nextState,{lockStatus:nextLockStatus,saving:!1})}return state},exports.setSectionLockStatus=exports.saveLockDialog=exports.refetchSectionLockStatus=exports.openLockDialog=exports.lockLesson=exports.fullyLockedLessonMapping=exports.finishSave=void 0;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_utils=__webpack_require__("./src/utils.js"),_teacherSectionsRedux=__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var LockStatus=exports.LockStatus=(0,_utils.makeEnum)("Locked","Editable","ReadonlyAnswers"),OPEN_LOCK_DIALOG="lessonLock/OPEN_LOCK_DIALOG",CLOSE_LOCK_DIALOG=exports.CLOSE_LOCK_DIALOG="lessonLock/CLOSE_LOCK_DIALOG",BEGIN_SAVE=exports.BEGIN_SAVE="lessonLock/BEGIN_SAVE",FINISH_SAVE=exports.FINISH_SAVE="lessonLock/FINISH_SAVE",AUTHORIZE_LOCKABLE="lessonLock/AUTHORIZE_LOCKABLE",SET_SECTION_LOCK_STATUS="lessonLock/SET_SECTION_LOCK_STATUS",REFRESH_SECTION_LOCK_STATUS="lessonLock/REFRESH_SECTION_LOCK_STATUS",initialState={lessonsBySectionId:{},lessonsBySectionIdLoaded:!1,lockDialogLessonId:null,lockStatus:[],saving:!1,lockableAuthorized:null,lockableAuthorizedLoaded:!1};exports.authorizeLockable=function authorizeLockable(isAuthorized){return{type:AUTHORIZE_LOCKABLE,isAuthorized}},exports.openLockDialog=function openLockDialog(sectionId,lessonId){return{type:OPEN_LOCK_DIALOG,sectionId,lessonId}};var beginSave=exports.beginSave=function beginSave(){return{type:BEGIN_SAVE}},finishSave=exports.finishSave=function finishSave(sectionId,lessonId,newLockStatus){return{type:FINISH_SAVE,sectionId,lessonId,lockStatus:newLockStatus}},performSave=function performSave(sectionId,lessonId,newLockStatus,onComplete){return function(dispatch,getState){var oldLockStatus=getState().lessonLock.lockStatus,saveData=newLockStatus.filter((function(item,index){return!_lodash.default.isEqual(item,oldLockStatus[index])})).map((function(item){return{user_level_data:item.userLevelData,locked:item.lockStatus===LockStatus.Locked,readonly_answers:item.lockStatus===LockStatus.ReadonlyAnswers}}));0!==saveData.length?(dispatch(beginSave()),_jquery.default.ajax({type:"POST",url:"/api/lock_status",dataType:"json",contentType:"application/json",data:JSON.stringify({updates:saveData})}).done((function(){dispatch(finishSave(sectionId,lessonId,newLockStatus)),onComplete()})).fail((function(err){console.error(err),onComplete()}))):onComplete()}},closeLockDialog=(exports.saveLockDialog=function saveLockDialog(sectionId,newLockStatus){return function(dispatch,getState){var lessonId=getState().lessonLock.lockDialogLessonId;dispatch(performSave(sectionId,lessonId,newLockStatus,(function(){dispatch(closeLockDialog())})))}},exports.lockLesson=function lockLesson(sectionId,lessonId){return function(dispatch,getState){var section=getState().lessonLock.lessonsBySectionId[sectionId],newLockStatus=lockStatusForLesson(section,lessonId).map((function(student){return _objectSpread(_objectSpread({},student),{},{lockStatus:LockStatus.Locked})}));dispatch(performSave(sectionId,lessonId,newLockStatus,(function(){})))}},exports.closeLockDialog=function closeLockDialog(){return{type:CLOSE_LOCK_DIALOG}}),lockStatusForLesson=function lockStatusForLesson(section,lessonId){return void 0===section?[]:section[lessonId].map((function(student){return{userLevelData:student.user_level_data,name:student.name,lockStatus:student.locked?LockStatus.Locked:student.readonly_answers?LockStatus.ReadonlyAnswers:LockStatus.Editable}}))};exports.fullyLockedLessonMapping=function fullyLockedLessonMapping(section){return section?Object.keys(section).reduce((function(obj,lessonId){var fullyLocked=!section[lessonId].some((function(student){return!student.locked}));return _objectSpread(_objectSpread({},obj),{},_defineProperty({},lessonId,fullyLocked))}),{}):{}},exports.setSectionLockStatus=function setSectionLockStatus(sections){return{type:SET_SECTION_LOCK_STATUS,sections}},exports.refetchSectionLockStatus=function refetchSectionLockStatus(sectionId,scriptId){return function(dispatch){_jquery.default.ajax("/api/lock_status",{data:{script_id:scriptId}}).done((function(data){dispatch(function refreshSectionLockStatus(sections,sectionId){return{type:REFRESH_SECTION_LOCK_STATUS,sections,sectionId}}(data,sectionId))})).fail((function(err){console.log(err)}))}}},"./src/code-studio/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.environmentSpecificCookieName=function environmentSpecificCookieName(name){var rack_env=window.dashboard.rack_env;if("production"===rack_env)return name;return"".concat(name,"_").concat(rack_env)},exports.getRootDomainFromHostname=function getRootDomainFromHostname(hostname){return hostname.split(".").slice(-2).join(".")},exports.hasQueryParam=function hasQueryParam(name){var parsedParams=queryParams();return Object.prototype.hasOwnProperty.call(parsedParams,name)},exports.queryParams=queryParams,exports.resetWindowLocation=function resetWindowLocation(){windowLocation=window.location},exports.setWindowLocation=function setWindowLocation(fakeLocation){windowLocation=fakeLocation},exports.updateQueryParam=function updateQueryParam(param,value){var useReplaceState=arguments.length>2&&void 0!==arguments[2]&&arguments[2],newString=_queryString.default.stringify(_objectSpread(_objectSpread({},_queryString.default.parse(windowLocation.search)),{},_defineProperty({},param,value))),newLocation=windowLocation.pathname;newString&&(newLocation+="?"+newString);var method=useReplaceState?"replaceState":"pushState";window.history[method](null,document.title,newLocation)};var _queryString=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/query-string/index.js"));function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var windowLocation=window.location;function queryParams(name){var parsed=_queryString.default.parse(windowLocation.search);return name?parsed[name]:parsed}},"./src/code-studio/viewAsRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.changeViewType=exports.ViewType=exports.SET_VIEW_TYPE=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ViewType.Participant,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_VIEW_TYPE){var viewType=action.viewType;if("Teacher"===viewType)viewType="Instructor",(0,_utils2.updateQueryParam)("viewAs","Instructor");else if("Student"===viewType)viewType="Participant",(0,_utils2.updateQueryParam)("viewAs","Participant");else if(!ViewType[viewType])throw new Error("unknown ViewType: "+viewType);return viewType}return state},exports.setViewType=void 0;var _utils=__webpack_require__("./src/utils.js"),_utils2=__webpack_require__("./src/code-studio/utils.js"),ViewType=exports.ViewType=(0,_utils.makeEnum)("Participant","Instructor"),SET_VIEW_TYPE=exports.SET_VIEW_TYPE="viewAs/SET_VIEW_TYPE";var setViewType=exports.setViewType=function setViewType(viewType){return{type:SET_VIEW_TYPE,viewType}};exports.changeViewType=function changeViewType(viewType,isAsync){return function(dispatch){viewType!==ViewType.Participant||!(0,_utils2.queryParams)("user_id")||((0,_utils2.updateQueryParam)("user_id",void 0),isAsync)?dispatch(setViewType(viewType)):(0,_utils.reload)()}}},"./src/fontConstants.js":module=>{module.exports={"metropolis-font":"'Metropolis', sans-serif","main-font":"'Metropolis', sans-serif","thin-font-weight":"100","extra-light-font-weight":"200","light-font-weight":"300","regular-font-weight":"400","medium-font-weight":"500","semi-bold-font-weight":"600","bold-font-weight":"700","extra-bold-font-weight":"800","black-font-weight":"900","main-font-thin":{fontFamily:"'Metropolis', sans-serif",fontWeight:"100",fontStyle:"normal"},"main-font-thin-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"100",fontStyle:"italic"},"main-font-extra-light":{fontFamily:"'Metropolis', sans-serif",fontWeight:"200",fontStyle:"normal"},"main-font-extra-light-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"200",fontStyle:"italic"},"main-font-light":{fontFamily:"'Metropolis', sans-serif",fontWeight:"300",fontStyle:"normal"},"main-font-light-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"300",fontStyle:"italic"},"main-font-regular":{fontFamily:"'Metropolis', sans-serif",fontWeight:"400",fontStyle:"normal"},"main-font-regular-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"400",fontStyle:"italic"},"main-font-medium":{fontFamily:"'Metropolis', sans-serif",fontWeight:"500",fontStyle:"normal"},"main-font-medium-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"500",fontStyle:"italic"},"main-font-semi-bold":{fontFamily:"'Metropolis', sans-serif",fontWeight:"600",fontStyle:"normal"},"main-font-semi-bold-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"600",fontStyle:"italic"},"main-font-bold":{fontFamily:"'Metropolis', sans-serif",fontWeight:"700",fontStyle:"normal"},"main-font-bold-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"700",fontStyle:"italic"},"main-font-extra-bold":{fontFamily:"'Metropolis', sans-serif",fontWeight:"800",fontStyle:"normal"},"main-font-extra-bold-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"800",fontStyle:"italic"},"main-font-black":{fontFamily:"'Metropolis', sans-serif",fontWeight:"900",fontStyle:"normal"},"main-font-black-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"900",fontStyle:"italic"},"barlowSemiCondensed-semibold":"'Barlow Semi Condensed Semibold', sans-serif","barlowSemiCondensed-medium":"'Barlow Semi Condensed Medium', sans-serif","code-font":"'Source Code Pro', Monaco, 'Bitstream Vera Sans Mono', 'Lucida Console', Terminal, monospace","font-awesome-core-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/fontawesome.min.css'","font-awesome-brands-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/brands.min.css'","font-awesome-solid-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/solid.min.css'","font-awesome-regular-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/regular.min.css'","font-awesome-v4-fonts-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/v4-font-face.min.css'","font-awesome-v4-shims-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/v4-shims.min.css'"}},"./src/templates/feedback/types.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.levelFeedbackType=exports.levelFeedbackShape=exports.feedbackShape=exports.ReviewStates=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js")),_utils=__webpack_require__("./src/utils.js");var feedbackShape=exports.feedbackShape=_propTypes.default.shape({id:_propTypes.default.number.isRequired,seen_on_feedback_page_at:_propTypes.default.string,student_first_visited_at:_propTypes.default.string,created_at:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.instanceOf(Date)]).isRequired,comment:_propTypes.default.string,performance:_propTypes.default.string,is_awaiting_teacher_review:_propTypes.default.bool,review_state:_propTypes.default.string}),levelFeedbackType=(exports.levelFeedbackShape=_propTypes.default.shape(levelFeedbackType),exports.levelFeedbackType={lessonName:_propTypes.default.string.isRequired,lessonNum:_propTypes.default.number.isRequired,levelNum:_propTypes.default.number.isRequired,linkToLevel:_propTypes.default.string.isRequired,unitName:_propTypes.default.string,feedbacks:_propTypes.default.arrayOf(feedbackShape)});exports.ReviewStates=(0,_utils.makeEnum)("completed","keepWorking","awaitingReview")},"./src/templates/progress/progressHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.defaultBubbleIcon=exports.commentLeft=void 0,exports.getIconForLevel=function getIconForLevel(level){if(arguments.length>1&&void 0!==arguments[1]&&arguments[1]&&isLevelAssessment(level))return"check-circle";if(level.isUnplugged)return"scissors";if(level.isLocked)return"lock";if(level.icon){var match=/fa-(.*)/.exec(level.icon);if(!match||!match[1])throw new Error("Unknown iconType: "+level.icon);return match[1]}if(level.bonus)return"flag-checkered";return defaultBubbleIcon},exports.getLevelResult=void 0,exports.isLevelAssessment=isLevelAssessment,exports.lessonHasLevels=function lessonHasLevels(lesson){var _lesson$levels;return!(null===(_lesson$levels=lesson.levels)||void 0===_lesson$levels||!_lesson$levels.length)},exports.lessonIsAllAssessment=function lessonIsAllAssessment(levels){return levels.every((function(level){return level.kind===_sharedConstants.LevelKind.assessment}))},exports.lessonIsLockedForAllStudents=function lessonIsLockedForAllStudents(lessonId,state){var currentSectionId=state.teacherSections.selectedSectionId,currentSection=state.lessonLock.lessonsBySectionId[currentSectionId];return!!(0,_lessonLockRedux.fullyLockedLessonMapping)(currentSection)[lessonId]},exports.lessonIsLockedForUser=function lessonIsLockedForUser(lesson,levels,state,viewAs){if(!lesson.lockable)return!1;if(!state.currentUser.userId)return!0;if(viewAs===_viewAsRedux.ViewType.Instructor)return!state.lessonLock.lockableAuthorized;if(viewAs===_viewAsRedux.ViewType.Participant)return lessonLocked(levels);return!0},exports.lessonIsVisible=function lessonIsVisible(lesson,state,viewAs){if(!viewAs)throw new Error("missing param viewAs in lessonIsVisible");var hiddenLessonState=state.hiddenLesson,sectionId=state.teacherSections.selectedSectionId;return!(0,_hiddenLessonRedux.isLessonHiddenForSection)(hiddenLessonState,sectionId,lesson.id)||viewAs===_viewAsRedux.ViewType.Instructor},exports.lessonLocked=lessonLocked,exports.lessonProgressForSection=function lessonProgressForSection(sectionLevelProgress,lessons){var sectionLessonProgress={};return Object.entries(sectionLevelProgress).forEach((function(_ref){var _ref2=function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(_ref,2),studentId=_ref2[0],studentLevelProgress=_ref2[1],studentLessonProgress={};lessons.forEach((function(lesson){studentLessonProgress[lesson.id]=function lessonProgressForStudent(studentLevelProgress,lessonLevels){var filteredLevels=lessonLevels.filter((function(level){return!level.bonus}));if(!filteredLevels.length)return null;var completedStatuses=[_sharedConstants.LevelStatus.perfect,_sharedConstants.LevelStatus.submitted,_sharedConstants.LevelStatus.free_play_complete,_sharedConstants.LevelStatus.completed_assessment],attempted=0,imperfect=0,completed=0,timeSpent=0,lastTimestamp=0;filteredLevels.forEach((function(level){var levelProgress=studentLevelProgress[level.id];levelProgress&&(attempted+=levelProgress.status===_sharedConstants.LevelStatus.attempted,imperfect+=levelProgress.status===_sharedConstants.LevelStatus.passed,completed+=completedStatuses.includes(levelProgress.status),timeSpent+=levelProgress.timeSpent||0,lastTimestamp=Math.max(lastTimestamp,levelProgress.lastTimestamp||0))}));var incomplete=filteredLevels.length-completed-imperfect;if(!(attempted+imperfect+completed>0))return null;var getPercent=function getPercent(count){return 100*count/filteredLevels.length};return{incompletePercent:getPercent(incomplete),imperfectPercent:getPercent(imperfect),completedPercent:getPercent(completed),timeSpent,lastTimestamp}}(studentLevelProgress,lesson.levels)})),sectionLessonProgress[studentId]=studentLessonProgress})),sectionLessonProgress},exports.processedLevel=exports.processServerStudentProgress=exports.processServerSectionProgress=exports.levelProgressFromStatus=exports.levelProgressFromServer=exports.levelProgressFromResult=void 0,exports.shouldShowReviewStates=function shouldShowReviewStates(unit){return unit.isCsd||unit.isCsp},exports.studentNeedsFeedback=void 0;var _lodash=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/lodash/lodash.js")),_activityUtils=__webpack_require__("./src/code-studio/activityUtils.js"),_hiddenLessonRedux=__webpack_require__("./src/code-studio/hiddenLessonRedux.js"),_lessonLockRedux=__webpack_require__("./src/code-studio/lessonLockRedux.js"),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function lessonLocked(levels){return!!levels[levels.length-1].isLocked}var defaultBubbleIcon=exports.defaultBubbleIcon="desktop";function isLevelAssessment(level){return"assessment"===level.kind}exports.commentLeft=function commentLeft(progress){return(null==progress?void 0:progress.teacherFeedbackCommented)&&(null==progress?void 0:progress.teacherFeedbackNew)},exports.studentNeedsFeedback=function studentNeedsFeedback(progress,level){return progress&&progress.status!==_sharedConstants.LevelStatus.not_tried&&!progress.teacherFeedbackNew&&"assessment"===level.kind&&level.canHaveFeedback};exports.processedLevel=function processedLevel(level){return{id:level.activeId||level.id,url:level.url,name:level.name,app:level.app,usesLab2:level.uses_lab2,progression:level.progression,progressionDisplayName:level.progression_display_name,kind:level.kind,icon:level.icon,isUnplugged:level.display_as_unplugged,levelNumber:level.kind===_sharedConstants.LevelKind.unplugged?void 0:level.title,bubbleText:level.kind===_sharedConstants.LevelKind.unplugged?void 0:level.letter||level.title.toString(),isConceptLevel:level.is_concept_level,isValidated:level.is_validated,canHaveFeedback:level.can_have_feedback,bonus:level.bonus,pageNumber:void 0!==level.page_number?level.page_number:_progressTypes.PUZZLE_PAGE_NONE,sublevels:level.sublevels&&level.sublevels.map((function(level){return processedLevel(level)})),path:level.path}};var getLevelResult=exports.getLevelResult=function getLevelResult(serverProgress){return serverProgress.result||(0,_activityUtils.resultFromStatus)(serverProgress.status)},getPagesProgress=function getPagesProgress(serverProgress){var _serverProgress$pages;return(null===(_serverProgress$pages=serverProgress.pages_completed)||void 0===_serverProgress$pages?void 0:_serverProgress$pages.length)>1?serverProgress.pages_completed.map((function(pageResult){var pageProgress=pageResult&&levelProgressFromResult(pageResult)||levelProgressFromStatus(_sharedConstants.LevelStatus.not_tried);return pageProgress.locked=serverProgress.locked||!1,pageProgress})):null},levelProgressFromServer=exports.levelProgressFromServer=function levelProgressFromServer(serverProgress){return{status:serverProgress.status||_sharedConstants.LevelStatus.not_tried,result:getLevelResult(serverProgress),locked:serverProgress.locked||!1,paired:serverProgress.paired||!1,timeSpent:serverProgress.time_spent,teacherFeedbackReviewState:serverProgress.teacher_feedback_review_state,teacherFeedbackNew:serverProgress.teacher_feedback_new||!1,teacherFeedbackCommented:serverProgress.teacher_feedback_commented||!1,lastTimestamp:serverProgress.last_progress_at,pages:getPagesProgress(serverProgress)}},processServerStudentProgress=exports.processServerStudentProgress=function processServerStudentProgress(serverStudentProgress){return _lodash.default.mapValues(serverStudentProgress,(function(progress){return levelProgressFromServer(progress)}))},levelProgressFromStatus=(exports.processServerSectionProgress=function processServerSectionProgress(serverSectionProgress){return _lodash.default.mapValues(serverSectionProgress,(function(student){return processServerStudentProgress(student)}))},exports.levelProgressFromStatus=function levelProgressFromStatus(status){return levelProgressFromServer({status})}),levelProgressFromResult=exports.levelProgressFromResult=function levelProgressFromResult(result){return levelProgressFromStatus((0,_activityUtils.activityCssClass)(result))}},"./src/templates/progress/progressTypes.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.unitProgressType=exports.studentType=exports.studentLevelProgressType=exports.studentLessonProgressType=exports.levelWithProgressType=exports.levelType=exports.lessonType=exports.groupedLessonsType=exports.PUZZLE_PAGE_NONE=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js")),_types=__webpack_require__("./src/templates/feedback/types.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.PUZZLE_PAGE_NONE=-1,exports.studentType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,name:_propTypes.default.string.isRequired});var levelShape={id:_propTypes.default.string.isRequired,levelNumber:_propTypes.default.number,bubbleText:_propTypes.default.string,kind:_propTypes.default.string,url:_propTypes.default.string,name:_propTypes.default.string,icon:_propTypes.default.string,isUnplugged:_propTypes.default.bool,isConceptLevel:_propTypes.default.bool,pageNumber:_propTypes.default.number};levelShape.sublevels=_propTypes.default.arrayOf(_propTypes.default.shape(levelWithProgressType));exports.levelType=_propTypes.default.shape(levelShape);var levelWithProgressType=exports.levelWithProgressType=_propTypes.default.shape(_objectSpread(_objectSpread({},levelShape),{},{status:_propTypes.default.string.isRequired,paired:_propTypes.default.bool,isLocked:_propTypes.default.bool,isCurrentLevel:_propTypes.default.bool})),studentLevelProgressShape={status:_propTypes.default.string.isRequired,result:_propTypes.default.number.isRequired,locked:_propTypes.default.bool.isRequired,paired:_propTypes.default.bool.isRequired,timeSpent:_propTypes.default.number,lastTimestamp:_propTypes.default.number,teacherFeedbackReviewState:_propTypes.default.oneOf(Object.keys(_types.ReviewStates)),teacherFeedbackNew:_propTypes.default.bool.isRequired};studentLevelProgressShape.pages=_propTypes.default.arrayOf(_propTypes.default.shape(studentLevelProgressShape));var studentLevelProgressType=exports.studentLevelProgressType=_propTypes.default.shape(studentLevelProgressShape),lessonType=(exports.unitProgressType=_propTypes.default.objectOf(studentLevelProgressType),exports.lessonType=_propTypes.default.shape({name:_propTypes.default.string.isRequired,id:_propTypes.default.number.isRequired,lockable:_propTypes.default.bool.isRequired,lessonNumber:_propTypes.default.number,lesson_plan_html_url:_propTypes.default.string,lesson_feedback_url:_propTypes.default.string,isFocusArea:_propTypes.default.bool.isRequired,description_student:_propTypes.default.string,description_teacher:_propTypes.default.string})),lessonGroupShape=(exports.studentLessonProgressType=_propTypes.default.shape({incompletePercent:_propTypes.default.number.isRequired,imperfectPercent:_propTypes.default.number.isRequired,completedPercent:_propTypes.default.number.isRequired,timeSpent:_propTypes.default.number.isRequired,lastTimestamp:_propTypes.default.number.isRequired}),{id:_propTypes.default.number,displayName:_propTypes.default.string,bigQuestions:_propTypes.default.string,description:_propTypes.default.string});exports.groupedLessonsType=_propTypes.default.shape({lessonGroup:_propTypes.default.shape(lessonGroupShape),lessons:_propTypes.default.arrayOf(lessonType).isRequired,levelsByLesson:_propTypes.default.arrayOf(_propTypes.default.arrayOf(levelWithProgressType)).isRequired})},"./src/util/color.js":module=>{module.exports={black:"#000",background_black:"#121416",dark_gray:"#2D3139",darkest_gray:"#292F36",dark_slate_gray:"#282c34",darkest_slate_gray:"#25292d",dark_charcoal:"#4d575f",charcoal:"#5b6770",light_gray:"#949ca2",lighter_gray:"#c6cacd",lightest_gray:"#e7e8ea",background_gray:"#f2f2f2",dimgray:"#696969",white:"#fff",default_blue:"#3670b3",dark_teal:"#0094a3",teal:"#0093a4",applab_button_teal:"#1abc9c",light_teal:"#59cad3",lightish_teal:"#80d6de",lighter_teal:"#a6e3e8",lightest_teal:"#d9f3f5",ai_rubric_cyan:"#3cfff8",purple:"#8c52ba",light_purple:"#a69bc1",lighter_purple:"#cfc9de",lightest_purple:"#ebe8f1",cyan:"#0094ca",light_cyan:"#59b9dc",lighter_cyan:"#a6daed",lightest_cyan:"#d9eff7",almost_white_cyan:"#f5fcff",orange:"#ffa400",light_orange:"#ffc459",lighter_orange:"#ffe0a6",lightest_orange:"#fff2d9",dark_orange:"#ff8600",green:"#b9bf15",light_green:"#d1d567",lighter_green:"#e7e9ad",lightest_green:"#f5f5dc",highlight_green:"#8afc9b",yellow:"#ffb81d",light_yellow:"#ffdb74",lighter_yellow:"#ffebb5",lightest_yellow:"#fff7df",goldenrod:"#daa520",header_text:"#fff",bkgnd_color:"#0093a4",inset_color:"#c6cacd",dark_color:"#8c52ba",hdr_color:"#8c52ba",red:"#c00",lightest_red:"#fcc",dark_red:"#d62911",realgreen:"#008000",realyellow:"#ff0",mustardyellow:"#efcd1c",twitter_blue:"#00aced",facebook_blue:"#3b5998",linkedin_blue:"#0077B5",dark_blue:"#00647f",blockly_flyout_gray:"#ddd",default_text:"#333",border_gray:"#bbb",border_light_gray:"#d8d8d8",table_header:"#ececec",table_light_row:"#fcfcfc",table_dark_row:"#f4f4f4",level_submitted:"#8c52ba",level_perfect:"rgb(14, 190, 14)",level_passed:"rgb(159, 212, 159)",level_attempted:"#ff0",level_not_tried:"#fefefe",level_current:"#ffa400",level_review_rejected:"#c00",level_review_accepted:"rgb(11, 142, 11)",assessment:"#0094ca",workspace_running_background:"#e5e5e5",dark_purple:"#682A77",bright_green:"#0ebe0e",neon_pink:"#e9118f",link_color:"#0596ce",shadow:"rgba(0, 0, 0, 0.3)",bootstrap_button_blue:"#337ab7",bootstrap_button_red:"#d9534f",bootstrap_error_background:"#f2dede",bootstrap_error_text:"#b94a48",bootstrap_v3_error_text:"#a94442",bootstrap_error_border:"#ebccd1",bootstrap_warning_background:"#fcf8e3",bootstrap_warning_text:"#c09853",bootstrap_warning_border:"#faebcc",bootstrap_border_color:"#cccccc",bootstrap_success_background:"#dff0d8",bootstrap_success_text:"#468847",bootstrap_success_border:"#d6e9c6",droplet_light_green:"#d3e965",droplet_blue:"#64b5f6",droplet_bright_blue:"#19c3e1",droplet_yellow:"#fff176",droplet_orange:"#ffb74d",droplet_red:"#f78183",droplet_cyan:"#4dd0e1",droplet_pink:"#f57ac6",droplet_purple:"#bb77c7",droplet_green:"#68d995",droplet_white:"#fff",oceans_deep_blue:"rgb(2, 0, 28)",dark_black:"#121212",brand_primary_light:"#ABDFE5",brand_primary_default:"#009EB0",brand_primary_dark:"#008291",brand_secondary_light:"#E0D1EC",brand_secondary_default:"#8C52BA",brand_secondary_dark:"#6F488E",brand_accent_default:"#ED6060",brand_teal_5:"#DFF2F4",product_affirmative_default:"#3EA33E",product_negative_light:"#FDEBE9",product_negative_default:"#E5311A",product_negative_dark:"#AA2513",product_caution_default:"#F9CB28",product_information_default:"#007ACC",neutral_white:"#FFFFFF",neutral_light:"#F7F8FA",neutral_dark10:"#EAEBEB",neutral_dark20:"#D4D5D7",neutral_dark30:"#BFC1C3",neutral_dark40:"#A9ACAF",neutral_dark50:"#94979B",neutral_dark60:"#7F8286",neutral_dark70:"#6A6E73",neutral_dark80:"#54595E",neutral_dark90:"#3F444B",neutral_dark:"#292F36",google_brand_color:"#0F9D58",microsoft_brand_color:"#FFB900",facebook_brand_color:"#3B5998",light_primary_100:"#ABDFE5",light_primary_500:"#0093A4",light_primary_700:"#008291",light_secondary_100:"#E2D4EE",light_secondary_500:"#8C52BA",light_secondary_700:"#6F488E",light_gray_50:"#F7F8FA",light_gray_100:"#EAEBEB",light_gray_200:"#D4D5D7",light_gray_300:"#BFC1C3",light_gray_500:"#94979B",light_gray_700:"#6A6E73",light_gray_800:"#54595E",light_gray_900:"#3F444B",light_affirmative_100:"#E2F1E2",light_affirmative_500:"#3EA33E",light_negative_500:"#E5311A",light_caution_500:"#F9CB28",light_info_100:"#DCEFFB",light_info_500:"#1892E3",light_white:"#FFFFFF",light_black:"#292F36"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,