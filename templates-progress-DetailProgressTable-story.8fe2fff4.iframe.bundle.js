/*! For license information please see templates-progress-DetailProgressTable-story.8fe2fff4.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4077],{"./src/templates/progress/DetailProgressTable.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ProgressLesson=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLesson.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(exports.default=function(_React$Component){function DetailProgressTable(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(DetailProgressTable,_React$Component),DetailProgressTable.prototype.render=function render(){var _this$props$groupedLe=this.props.groupedLesson,lessons=_this$props$groupedLe.lessons,levelsByLesson=_this$props$groupedLe.levelsByLesson;if(lessons.length!==levelsByLesson.length)throw new Error("Inconsistent number of lessons");return _react.default.createElement("div",{className:"uitest-detail-progress-table"},lessons.map((function(lesson,index){return _react.default.createElement(_ProgressLesson.default,{key:index,lesson,levels:levelsByLesson[index]})})))},DetailProgressTable}(_react.default.Component),"propTypes",{groupedLesson:_progressTypes.groupedLessonsType.isRequired}),module.exports=exports.default},"./src/templates/progress/FocusAreaIndicator.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var styles={main:{display:"inline-block",position:"absolute",right:0,top:0,whiteSpace:"nowrap"},arrowContainer:{display:"inline-block",position:"relative",top:10},leftArrow:{display:"inline-block",width:0,height:0,borderStyle:"solid",borderWidth:"17px 20px 17px",borderColor:"transparent ".concat(_color.default.cyan," transparent transparent")},focusArea:{display:"inline-block",backgroundColor:_color.default.cyan,color:_color.default.white,height:34,lineHeight:"34px",position:"relative",top:-3},text:{display:"inline-block"},focusAreaIcon:{display:"inline-block",color:_color.default.white,lineHeight:"13px",padding:5,marginLeft:5,marginRight:5,borderRadius:4,":hover":{backgroundColor:_color.default.default_blue}}};exports.default=(0,_radium.default)((function FocusAreaIndicator(){return _react.default.createElement("div",{style:styles.main},_react.default.createElement("div",{style:styles.arrowContainer},_react.default.createElement("div",{style:styles.leftArrow})),_react.default.createElement("div",{style:styles.focusArea},_react.default.createElement("div",{style:styles.text},"Focus Area"),_react.default.createElement("a",{href:window.location.pathname+"/preview-assignments"},_react.default.createElement("div",{style:styles.focusAreaIcon,"data-tip":!0,"data-for":"focus-area"},_react.default.createElement(_FontAwesome.default,{icon:"pencil"})))),_react.default.createElement(_reactTooltip.default,{id:"focus-area",role:"tooltip",effect:"solid"},"Click to change your focus area."))}));module.exports=exports.default},"./src/templates/progress/ProgressLesson.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressLesson=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_firehose=_interopRequireDefault(__webpack_require__("./src/lib/util/firehose.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_Button=_interopRequireDefault(__webpack_require__("./src/templates/Button.jsx")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_FocusAreaIndicator=_interopRequireDefault(__webpack_require__("./src/templates/progress/FocusAreaIndicator.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_ProgressLessonContent=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonContent.jsx")),_ProgressLessonTeacherInfo=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonTeacherInfo.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLesson=function(_React$Component){function ProgressLesson(props){var _this;return _defineProperty(_this=_React$Component.call(this,props)||this,"toggleCollapsed",(function(){return _this.setState({collapsed:!_this.state.collapsed})})),_defineProperty(_this,"onClickStudentLessonPlan",(function(){_firehose.default.putRecord({study:"script_overview_actions",study_group:"student_lesson_plan",event:"open_student_lesson_plan",data_json:JSON.stringify({lesson_id:_this.props.lesson.id,script_id:_this.props.scriptId})},{includeUserId:!0})})),_this.state={collapsed:props.viewAs!==_viewAsRedux.ViewType.Instructor&&props.currentLessonId!==props.lesson.id},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLesson,_React$Component);var _proto=ProgressLesson.prototype;return _proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){nextProps.currentLessonId!==this.props.currentLessonId&&this.setState({collapsed:this.state.collapsed&&nextProps.currentLessonId!==this.props.lesson.id})},_proto.render=function render(){var _this2=this,_this$props=this.props,lesson=_this$props.lesson,levels=_this$props.levels,viewAs=_this$props.viewAs,isVisible=_this$props.isVisible,hiddenForStudents=_this$props.hiddenForStudents,isLockedForUser=_this$props.isLockedForUser,isLockedForAllStudents=_this$props.isLockedForAllStudents,selectedSectionId=_this$props.selectedSectionId,isRtl=_this$props.isRtl;if(!isVisible)return null;var showAsLocked=isLockedForUser||isLockedForAllStudents,title=lesson.lessonNumber?_locale.default.lessonNumbered({lessonNumber:lesson.lessonNumber,lessonName:lesson.name}):lesson.name,caretStyle=isRtl?styles.caretRTL:styles.caret,caret=this.state.collapsed?"caret-right":"caret-down",lockedTooltipId=_lodash.default.uniqueId(),description=viewAs===_viewAsRedux.ViewType.Instructor?lesson.description_teacher:lesson.description_student,lessonUrl=levels[0]&&levels[0].url,showNotAuthorizedWarning=lesson.lockable&&viewAs===_viewAsRedux.ViewType.Instructor&&this.props.lockableAuthorizedLoaded&&!this.props.lockableAuthorized;return _react.default.createElement("div",{id:"progress-lesson-".concat(lesson.lessonNumber),className:"uitest-progress-lesson",style:_objectSpread(_objectSpread({},styles.outer),(hiddenForStudents||showAsLocked)&&styles.hiddenOrLocked)},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),(hiddenForStudents&&viewAs===_viewAsRedux.ViewType.Participant||isLockedForUser)&&styles.translucent)},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.heading),{marginBottom:this.state.collapsed?0:15})},_react.default.createElement("div",{style:styles.headingText,onClick:this.toggleCollapsed,tabIndex:"0",role:"button",onKeyDown:function onKeyDown(e){[" ","Enter","Spacebar"].includes(e.key)&&(e.preventDefault(),_this2.toggleCollapsed())},"aria-expanded":!this.state.collapsed},_react.default.createElement(_FontAwesome.default,{icon:caret,style:caretStyle}),hiddenForStudents&&_react.default.createElement(_FontAwesome.default,{icon:"eye-slash",style:styles.icon}),lesson.lockable&&this.props.lockStatusLoaded&&_react.default.createElement("span",{"data-tip":!0,"data-for":lockedTooltipId},_react.default.createElement(_FontAwesome.default,{icon:showAsLocked?"lock":"unlock",style:_objectSpread(_objectSpread({},styles.icon),!showAsLocked&&styles.unlockedIcon)}),!showAsLocked&&viewAs===_viewAsRedux.ViewType.Instructor&&_react.default.createElement(_reactTooltip.default,{id:lockedTooltipId,role:"tooltip",wrapper:"span",effect:"solid"},_locale.default.lockAssessmentLong())),_react.default.createElement("span",null,title)),viewAs===_viewAsRedux.ViewType.Participant&&lesson.student_lesson_plan_html_url&&_react.default.createElement("span",{style:styles.buttonStyle},_react.default.createElement(_Button.default,{__useDeprecatedTag:!0,className:"ui-test-lesson-resources",href:lesson.student_lesson_plan_html_url,text:_locale.default.lessonResources(),icon:"file-text",color:"purple",target:"_blank",onClick:this.onClickStudentLessonPlan}))),showNotAuthorizedWarning&&_react.default.createElement("div",{style:styles.notAuthorizedWarning},_locale.default.unverifiedTeacherLockWarning(),_react.default.createElement("a",{style:styles.learnMoreLink,href:"https://support.code.org/hc/en-us/articles/115001550131-Becoming-a-verified-teacher-CS-Principles-and-CS-Discoveries-only-"},_locale.default.learnMoreWithPeriod())),!this.state.collapsed&&_react.default.createElement(_ProgressLessonContent.default,{description,levels,disabled:isLockedForUser,selectedSectionId,lessonName:lesson.name})),viewAs===_viewAsRedux.ViewType.Instructor&&!this.props.isMiniView&&_react.default.createElement(_ProgressLessonTeacherInfo.default,{lesson,lessonUrl,onClickStudentLessonPlan:this.onClickStudentLessonPlan}),lesson.isFocusArea&&_react.default.createElement(_FocusAreaIndicator.default,null))},ProgressLesson}(_react.default.Component);_defineProperty(ProgressLesson,"propTypes",{lesson:_progressTypes.lessonType.isRequired,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,scriptId:_propTypes.default.number,currentLessonId:_propTypes.default.number,viewAs:_propTypes.default.oneOf(Object.values(_viewAsRedux.ViewType)).isRequired,isVisible:_propTypes.default.bool.isRequired,hiddenForStudents:_propTypes.default.bool.isRequired,isLockedForUser:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,lockableAuthorized:_propTypes.default.bool,lockableAuthorizedLoaded:_propTypes.default.bool.isRequired,isLockedForAllStudents:_propTypes.default.bool.isRequired,isRtl:_propTypes.default.bool,isMiniView:_propTypes.default.bool,lockStatusLoaded:_propTypes.default.bool.isRequired});var styles={outer:{position:"relative",display:"table",width:"100%",height:"100%",background:_color.default.lightest_gray,borderColor:_color.default.border_gray,borderStyle:"solid",borderRadius:2,borderWidth:1,marginTop:3,marginBottom:15,marginLeft:3,marginRight:3},main:{padding:20},heading:_objectSpread(_objectSpread({fontSize:18},_fontConstants.default["main-font-semi-bold"]),{},{display:"flex",alignItems:"center"}),headingText:{cursor:"pointer",flexGrow:1},buttonStyle:{marginLeft:"auto"},hiddenOrLocked:{borderStyle:"dashed",borderWidth:4,marginTop:0,marginBottom:12,marginLeft:0,marginRight:0},translucent:{opacity:.6},caret:{marginRight:10},caretRTL:{marginLeft:10},icon:{marginRight:5,fontSize:18,color:_color.default.cyan},unlockedIcon:{color:_color.default.orange},notAuthorizedWarning:_objectSpread(_objectSpread({color:_color.default.red},_fontConstants.default["main-font-semi-bold-italic"]),{},{marginTop:10}),learnMoreLink:{marginLeft:5}};exports.UnconnectedProgressLesson=ProgressLesson,exports.default=(0,_reactRedux.connect)((function(state,ownProps){return{currentLessonId:state.progress.currentLessonId,viewAs:state.viewAs,lockableAuthorized:state.lessonLock.lockableAuthorized,lockableAuthorizedLoaded:state.lessonLock.lockableAuthorizedLoaded,isVisible:(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,state.viewAs),hiddenForStudents:!(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,_viewAsRedux.ViewType.Participant),isLockedForUser:(0,_progressHelpers.lessonIsLockedForUser)(ownProps.lesson,ownProps.levels,state,state.viewAs),isLockedForAllStudents:(0,_progressHelpers.lessonIsLockedForAllStudents)(ownProps.lesson.id,state),selectedSectionId:state.teacherSections.selectedSectionId,scriptId:state.progress.scriptId,isRtl:state.isRtl,isMiniView:state.progress.isMiniView,lockStatusLoaded:state.progress.unitProgressHasLoaded&&state.lessonLock.lessonsBySectionIdLoaded}}))(ProgressLesson)},"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=exports.fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)},fakeLevels=(exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))},exports.fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))}),fakeProgressForLevels=exports.fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress},randomNumberUpTo100=(exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})},exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})},function randomNumberUpTo100(){return Math.floor(100*Math.random())}),lessonId=1,fakeLessonWithLevels=exports.fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)},fakeStudents=exports.fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))},fakeUnitData=exports.fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},fakeStudentLevelProgress=exports.fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress},fakeStudentLastUpdate=exports.fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate},fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./src/templates/progress/DetailProgressTable.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithHiddenLessonAsParticipant=exports.WithHiddenLessonAsInstructor=exports.Simple=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_DetailProgressTable=_interopRequireDefault(__webpack_require__("./src/templates/progress/DetailProgressTable.jsx")),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}exports.default={component:_DetailProgressTable.default};var groupedLesson={lessons:[(0,_progressTestHelpers.fakeLesson)("Jigsaw",1),(0,_progressTestHelpers.fakeLesson)("Maze",2),(0,_progressTestHelpers.fakeLesson)("Artist",3),(0,_progressTestHelpers.fakeLesson)("Something",4)],levelsByLesson:[[{id:"30",status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,url:"/step1/level1",name:"First progression",levelNumber:1}].concat(function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,_progressTestHelpers.fakeLevels)(5,{startLevel:2}).map((function(level){return _objectSpread(_objectSpread({},level),{},{progression:"Second Progression"})}))),[{id:"40",status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,url:"/step3/level1",name:"Last progression",levelNumber:7}]),(0,_progressTestHelpers.fakeLevels)(2),(0,_progressTestHelpers.fakeLevels)(2),(0,_progressTestHelpers.fakeLevels)(2)]},Template=function Template(store){return _react.default.createElement(_reactRedux.Provider,{store},_react.default.createElement(_DetailProgressTable.default,{groupedLesson}))};(exports.Simple=Template.bind({})).args=(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,null),(exports.WithHiddenLessonAsInstructor=Template.bind({})).args=(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Instructor,"2"),(exports.WithHiddenLessonAsParticipant=Template.bind({})).args=(0,_progressTestHelpers.createStoreWithHiddenLesson)(_viewAsRedux.ViewType.Participant,"2")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLXByb2dyZXNzLURldGFpbFByb2dyZXNzVGFibGUtc3RvcnkuMDVhZjgyMmEuaWZyYW1lLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiO3FRQUFBLElBQUFBLE9BQUFDLHVCQUFBQyxvQkFBQSxrQ0FFQUMsZ0JBQUFGLHVCQUFBQyxvQkFBQSxnREFDQUUsZUFBQUYsb0JBQUEsNkNBQW1ELFNBQUFELHVCQUFBSSxLQUFBLE9BQUFBLEtBQUFBLElBQUFDLFdBQUFELElBQUEsU0FBQUEsSUFBQSxVQUFBRSxRQUFBQyxHQUFBLE9BQUFELFFBQUEsbUJBQUFFLFFBQUEsaUJBQUFBLE9BQUFDLFNBQUEsU0FBQUYsR0FBQSxjQUFBQSxDQUFBLFdBQUFBLEdBQUEsT0FBQUEsR0FBQSxtQkFBQUMsUUFBQUQsRUFBQUcsY0FBQUYsUUFBQUQsSUFBQUMsT0FBQUcsVUFBQSxnQkFBQUosQ0FBQSxFQUFBRCxRQUFBQyxFQUFBLFVBQUFLLGdCQUFBTCxFQUFBTSxHQUFBLE9BQUFELGdCQUFBRSxPQUFBQyxlQUFBRCxPQUFBQyxlQUFBQyxPQUFBLFNBQUFKLGdCQUFBTCxFQUFBTSxHQUFBLE9BQUFOLEVBQUFVLFVBQUFKLEVBQUFOLENBQUEsRUFBQUssZ0JBQUFMLEVBQUFNLEVBQUEsV0FBQUssZ0JBQUFkLElBQUFlLElBQUFDLE9BQUEsT0FBQUQsSUFBQSxTQUFBRSxlQUFBQyxHQUFBLElBQUFDLEVBQUEsU0FBQUMsYUFBQUYsRUFBQUcsR0FBQSxhQUFBbkIsUUFBQWdCLEtBQUFBLEVBQUEsT0FBQUEsRUFBQSxJQUFBSSxFQUFBSixFQUFBZCxPQUFBbUIsYUFBQSxZQUFBRCxFQUFBLEtBQUFILEVBQUFHLEVBQUFFLEtBQUFOLEVBQUFHLEdBQUEsd0JBQUFuQixRQUFBaUIsR0FBQSxPQUFBQSxFQUFBLFVBQUFNLFVBQUEsa0VBQUFKLEVBQUFLLE9BQUFDLFFBQUFULEVBQUEsQ0FBQUUsQ0FBQUYsRUFBQSwwQkFBQWhCLFFBQUFpQixHQUFBQSxFQUFBQSxFQUFBLEdBQUFG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LENBQUNqVCxnQkFDWixHQUdNYixRQUFBQSxPQUFHaVYsU0FBU3JXLEtBQUssQ0FBQyxJQUM5QndXLE1BQU8sRUFBQW5HLHFCQUFBQSw2QkFBNEJqSSxhQUFBQSxTQUFTQyxXQUFZLE9BR3RCakgsUUFBQUEsNkJBQUdpVixTQUFTclcsS0FBSyxDQUFDLElBQzlCd1csTUFBTyxFQUFBbkcscUJBQUFBLDZCQUNsQ2pJLGFBQUFBLFNBQVNDLFdBQ1QsTUFJd0NqSCxRQUFBQSw4QkFBR2lWLFNBQVNyVyxLQUFLLENBQUMsSUFDOUJ3VyxNQUFPLEVBQUFuRyxxQkFBQUEsNkJBQ25DakksYUFBQUEsU0FBU3NDLFlBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL0RldGFpbFByb2dyZXNzVGFibGUuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvRm9jdXNBcmVhSW5kaWNhdG9yLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL1Byb2dyZXNzTGVzc29uLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL3Byb2dyZXNzVGVzdEhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9EZXRhaWxQcm9ncmVzc1RhYmxlLnN0b3J5LmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgUHJvZ3Jlc3NMZXNzb24gZnJvbSAnLi9Qcm9ncmVzc0xlc3Nvbic7XG5pbXBvcnQge2dyb3VwZWRMZXNzb25zVHlwZX0gZnJvbSAnLi9wcm9ncmVzc1R5cGVzJztcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0aGF0IHNob3dzIHByb2dyZXNzIGluIGEgY291cnNlIHdpdGggbW9yZSBkZXRhaWwgdGhhbiB0aGUgc3VtbWFyeVxuICogdmlld1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXRhaWxQcm9ncmVzc1RhYmxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBncm91cGVkTGVzc29uOiBncm91cGVkTGVzc29uc1R5cGUuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xlc3NvbnMsIGxldmVsc0J5TGVzc29ufSA9IHRoaXMucHJvcHMuZ3JvdXBlZExlc3NvbjtcbiAgICBpZiAobGVzc29ucy5sZW5ndGggIT09IGxldmVsc0J5TGVzc29uLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvbnNpc3RlbnQgbnVtYmVyIG9mIGxlc3NvbnMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aXRlc3QtZGV0YWlsLXByb2dyZXNzLXRhYmxlXCI+XG4gICAgICAgIHtsZXNzb25zLm1hcCgobGVzc29uLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxQcm9ncmVzc0xlc3NvblxuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIGxlc3Nvbj17bGVzc29ufVxuICAgICAgICAgICAgbGV2ZWxzPXtsZXZlbHNCeUxlc3NvbltpbmRleF19XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEEgY29tcG9uZW50IHRoYXQgYWRkcyBhIHJpYmJvbiB0byB0aGUgc2lkZSBvZiB5b3VyIHJvdyB0byBpbmRpY2F0ZSB0aGF0IGl0IGlzXG4gKiBhIGZvY3VzIGFyZWEuIE5vdGU6IFRoaXMgaXMgRW5nbGlzaCBvbmx5LlxuICovXG5cbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnO1xuXG5pbXBvcnQgRm9udEF3ZXNvbWUgZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9Gb250QXdlc29tZSc7XG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIG1haW46IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICByaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIH0sXG4gIGFycm93Q29udGFpbmVyOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdG9wOiAxMCxcbiAgfSxcbiAgbGVmdEFycm93OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgIGJvcmRlcldpZHRoOiAnMTdweCAyMHB4IDE3cHgnLFxuICAgIGJvcmRlckNvbG9yOiBgdHJhbnNwYXJlbnQgJHtjb2xvci5jeWFufSB0cmFuc3BhcmVudCB0cmFuc3BhcmVudGAsXG4gIH0sXG4gIGZvY3VzQXJlYToge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuY3lhbixcbiAgICBjb2xvcjogY29sb3Iud2hpdGUsXG4gICAgaGVpZ2h0OiAzNCxcbiAgICBsaW5lSGVpZ2h0OiAnMzRweCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdG9wOiAtMyxcbiAgfSxcbiAgdGV4dDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB9LFxuICBmb2N1c0FyZWFJY29uOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgY29sb3I6IGNvbG9yLndoaXRlLFxuICAgIGxpbmVIZWlnaHQ6ICcxM3B4JyxcbiAgICBwYWRkaW5nOiA1LFxuICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgbWFyZ2luUmlnaHQ6IDUsXG4gICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICc6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmRlZmF1bHRfYmx1ZSxcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgRm9jdXNBcmVhSW5kaWNhdG9yID0gKCkgPT4gKFxuICA8ZGl2IHN0eWxlPXtzdHlsZXMubWFpbn0+XG4gICAgPGRpdiBzdHlsZT17c3R5bGVzLmFycm93Q29udGFpbmVyfT5cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0QXJyb3d9IC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBzdHlsZT17c3R5bGVzLmZvY3VzQXJlYX0+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dH0+Rm9jdXMgQXJlYTwvZGl2PlxuICAgICAgPGEgaHJlZj17d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJy9wcmV2aWV3LWFzc2lnbm1lbnRzJ30+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5mb2N1c0FyZWFJY29ufSBkYXRhLXRpcCBkYXRhLWZvcj1cImZvY3VzLWFyZWFcIj5cbiAgICAgICAgICA8Rm9udEF3ZXNvbWUgaWNvbj1cInBlbmNpbFwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICAgIDxSZWFjdFRvb2x0aXAgaWQ9XCJmb2N1cy1hcmVhXCIgcm9sZT1cInRvb2x0aXBcIiBlZmZlY3Q9XCJzb2xpZFwiPlxuICAgICAgQ2xpY2sgdG8gY2hhbmdlIHlvdXIgZm9jdXMgYXJlYS5cbiAgICA8L1JlYWN0VG9vbHRpcD5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oRm9jdXNBcmVhSW5kaWNhdG9yKTtcbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFJlYWN0VG9vbHRpcCBmcm9tICdyZWFjdC10b29sdGlwJztcblxuaW1wb3J0IHtWaWV3VHlwZX0gZnJvbSAnQGNkby9hcHBzL2NvZGUtc3R1ZGlvL3ZpZXdBc1JlZHV4JztcbmltcG9ydCBmb250Q29uc3RhbnRzIGZyb20gJ0BjZG8vYXBwcy9mb250Q29uc3RhbnRzJztcbmltcG9ydCBmaXJlaG9zZUNsaWVudCBmcm9tICdAY2RvL2FwcHMvbGliL3V0aWwvZmlyZWhvc2UnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xuaW1wb3J0IEZvbnRBd2Vzb21lIGZyb20gJy4uL0ZvbnRBd2Vzb21lJztcblxuaW1wb3J0IEZvY3VzQXJlYUluZGljYXRvciBmcm9tICcuL0ZvY3VzQXJlYUluZGljYXRvcic7XG5pbXBvcnQge1xuICBsZXNzb25Jc1Zpc2libGUsXG4gIGxlc3NvbklzTG9ja2VkRm9yVXNlcixcbiAgbGVzc29uSXNMb2NrZWRGb3JBbGxTdHVkZW50cyxcbn0gZnJvbSAnLi9wcm9ncmVzc0hlbHBlcnMnO1xuaW1wb3J0IFByb2dyZXNzTGVzc29uQ29udGVudCBmcm9tICcuL1Byb2dyZXNzTGVzc29uQ29udGVudCc7XG5pbXBvcnQgUHJvZ3Jlc3NMZXNzb25UZWFjaGVySW5mbyBmcm9tICcuL1Byb2dyZXNzTGVzc29uVGVhY2hlckluZm8nO1xuaW1wb3J0IHtsZXZlbFdpdGhQcm9ncmVzc1R5cGUsIGxlc3NvblR5cGV9IGZyb20gJy4vcHJvZ3Jlc3NUeXBlcyc7XG5cbmNsYXNzIFByb2dyZXNzTGVzc29uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsZXNzb246IGxlc3NvblR5cGUuaXNSZXF1aXJlZCxcbiAgICBsZXZlbHM6IFByb3BUeXBlcy5hcnJheU9mKGxldmVsV2l0aFByb2dyZXNzVHlwZSkuaXNSZXF1aXJlZCxcblxuICAgIC8vIHJlZHV4IHByb3ZpZGVkXG4gICAgc2NyaXB0SWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY3VycmVudExlc3NvbklkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHZpZXdBczogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoVmlld1R5cGUpKS5pc1JlcXVpcmVkLFxuICAgIGlzVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBoaWRkZW5Gb3JTdHVkZW50czogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc0xvY2tlZEZvclVzZXI6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWRTZWN0aW9uSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbG9ja2FibGVBdXRob3JpemVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NrYWJsZUF1dGhvcml6ZWRMb2FkZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNMb2NrZWRGb3JBbGxTdHVkZW50czogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNNaW5pVmlldzogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9ja1N0YXR1c0xvYWRlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgLy8gV2Ugd2FudCBpbnN0cnVjdG9ycyB0byBzdGFydCB3aXRoIGV2ZXJ5dGhpbmcgdW5jb2xsYXBzZWQuIEZvciBwYXJ0aWNpcGFudHMgd2VcbiAgICAgIC8vIGNvbGxhcHNlIGV2ZXJ5dGhpbmcgZXhjZXB0IGN1cnJlbnQgbGVzc29uXG4gICAgICBjb2xsYXBzZWQ6XG4gICAgICAgIHByb3BzLnZpZXdBcyAhPT0gVmlld1R5cGUuSW5zdHJ1Y3RvciAmJlxuICAgICAgICBwcm9wcy5jdXJyZW50TGVzc29uSWQgIT09IHByb3BzLmxlc3Nvbi5pZCxcbiAgICB9O1xuICB9XG5cbiAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgLy8gSWYgd2UncmUgYXNzaWduZWQgYSBsZXNzb24gaWQsIGFuZCBpdCBpcyBmb3IgdGhpcyBsZXNzb24sIHVuY29sbGFwc2VcbiAgICBpZiAobmV4dFByb3BzLmN1cnJlbnRMZXNzb25JZCAhPT0gdGhpcy5wcm9wcy5jdXJyZW50TGVzc29uSWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjb2xsYXBzZWQ6XG4gICAgICAgICAgdGhpcy5zdGF0ZS5jb2xsYXBzZWQgJiZcbiAgICAgICAgICBuZXh0UHJvcHMuY3VycmVudExlc3NvbklkICE9PSB0aGlzLnByb3BzLmxlc3Nvbi5pZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUNvbGxhcHNlZCA9ICgpID0+XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb2xsYXBzZWQ6ICF0aGlzLnN0YXRlLmNvbGxhcHNlZCxcbiAgICB9KTtcblxuICBvbkNsaWNrU3R1ZGVudExlc3NvblBsYW4gPSAoKSA9PiB7XG4gICAgZmlyZWhvc2VDbGllbnQucHV0UmVjb3JkKFxuICAgICAge1xuICAgICAgICBzdHVkeTogJ3NjcmlwdF9vdmVydmlld19hY3Rpb25zJyxcbiAgICAgICAgc3R1ZHlfZ3JvdXA6ICdzdHVkZW50X2xlc3Nvbl9wbGFuJyxcbiAgICAgICAgZXZlbnQ6ICdvcGVuX3N0dWRlbnRfbGVzc29uX3BsYW4nLFxuICAgICAgICBkYXRhX2pzb246IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBsZXNzb25faWQ6IHRoaXMucHJvcHMubGVzc29uLmlkLFxuICAgICAgICAgIHNjcmlwdF9pZDogdGhpcy5wcm9wcy5zY3JpcHRJZCxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgICAge2luY2x1ZGVVc2VySWQ6IHRydWV9XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbGVzc29uLFxuICAgICAgbGV2ZWxzLFxuICAgICAgdmlld0FzLFxuICAgICAgaXNWaXNpYmxlLFxuICAgICAgaGlkZGVuRm9yU3R1ZGVudHMsIC8vIElzIHRoaXMgYSBoaWRkZW4gbGVzc29uIHRoYXQgd2Ugc3RpbGwgcmVuZGVyIGJlY2F1c2Ugd2UncmUgYSBpbnN0cnVjdG9yXG4gICAgICBpc0xvY2tlZEZvclVzZXIsXG4gICAgICBpc0xvY2tlZEZvckFsbFN0dWRlbnRzLFxuICAgICAgc2VsZWN0ZWRTZWN0aW9uSWQsXG4gICAgICBpc1J0bCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzaG93QXNMb2NrZWQgPSBpc0xvY2tlZEZvclVzZXIgfHwgaXNMb2NrZWRGb3JBbGxTdHVkZW50cztcblxuICAgIGNvbnN0IHRpdGxlID0gbGVzc29uLmxlc3Nvbk51bWJlclxuICAgICAgPyBpMThuLmxlc3Nvbk51bWJlcmVkKHtcbiAgICAgICAgICBsZXNzb25OdW1iZXI6IGxlc3Nvbi5sZXNzb25OdW1iZXIsXG4gICAgICAgICAgbGVzc29uTmFtZTogbGVzc29uLm5hbWUsXG4gICAgICAgIH0pXG4gICAgICA6IGxlc3Nvbi5uYW1lO1xuXG4gICAgLy8gQWRqdXN0IGNhcmV0IHN0eWxlIGlmIGxvY2FsZSBpcyBSVExcbiAgICBjb25zdCBjYXJldFN0eWxlID0gaXNSdGwgPyBzdHlsZXMuY2FyZXRSVEwgOiBzdHlsZXMuY2FyZXQ7XG4gICAgY29uc3QgY2FyZXQgPSB0aGlzLnN0YXRlLmNvbGxhcHNlZCA/ICdjYXJldC1yaWdodCcgOiAnY2FyZXQtZG93bic7XG5cbiAgICBjb25zdCBsb2NrZWRUb29sdGlwSWQgPSBfLnVuaXF1ZUlkKCk7XG5cbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9XG4gICAgICB2aWV3QXMgPT09IFZpZXdUeXBlLkluc3RydWN0b3JcbiAgICAgICAgPyBsZXNzb24uZGVzY3JpcHRpb25fdGVhY2hlclxuICAgICAgICA6IGxlc3Nvbi5kZXNjcmlwdGlvbl9zdHVkZW50O1xuXG4gICAgLy8gVGhlcmUncyBubyB1cmwgZm9yIGEgbGVzc29uIHNvIHVzZSB0aGUgdXJsIG9mIHRoZSBmaXJzdCBsZXZlbCBvZiB0aGUgbGVzc29uXG4gICAgLy8gYXMgdGhlIHVybCBmb3IgdGhlIGxlc3Nvbi5cbiAgICAvLyBUT0RPOiBNYWtlIHRoZSBiYWNrLWVuZCByZXR1cm4gYSBsZXNzb24gdXJsIGFzIHBhcnQgb2YgdGhlIGxlc3NvbiBtZXRhZGF0YSBzbyB3ZVxuICAgIC8vIGRvbid0IG5lZWQgdG8gcGFzcyBpdCBzZXBhcmF0ZWx5IGZyb20gbGVzc29uIGhlcmUgYW5kIGluIFByb2dyZXNzTGVzc29uVGVhY2hlckluZm8uXG4gICAgY29uc3QgbGVzc29uVXJsID0gbGV2ZWxzWzBdICYmIGxldmVsc1swXS51cmw7XG5cbiAgICAvLyBJZiBhIGluc3RydWN0b3IgaXMgbm90IHZlcmlmaWVkIHRoZXkgd2lsbCBub3QgYmUgbG9ja2FibGVBdXRob3JpemVkIChtZWFuaW5nIHRoZXkgY2FuJ3RcbiAgICAvLyBsb2NrIG9yIHVubG9jayBsZXNzb25zKS4gRm9yIGEgbG9ja2FibGUgbGVzc29uIHdoZXJlIGluc3RydWN0b3IgaXMgbm90IGF1dGhvcml6ZWQsIHdlIHdpbGxcbiAgICAvLyBkaXNwbGF5IGEgd2FybmluZyBleHBsYWluaW5nIHRoYXQgdGhleSBuZWVkIHRvIGJlIHZlcmlmaWVkIHRvIHVubG9jayBsZXNzb25zLlxuICAgIGNvbnN0IHNob3dOb3RBdXRob3JpemVkV2FybmluZyA9XG4gICAgICBsZXNzb24ubG9ja2FibGUgJiZcbiAgICAgIHZpZXdBcyA9PT0gVmlld1R5cGUuSW5zdHJ1Y3RvciAmJlxuICAgICAgdGhpcy5wcm9wcy5sb2NrYWJsZUF1dGhvcml6ZWRMb2FkZWQgJiZcbiAgICAgICF0aGlzLnByb3BzLmxvY2thYmxlQXV0aG9yaXplZDtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGlkPXtgcHJvZ3Jlc3MtbGVzc29uLSR7bGVzc29uLmxlc3Nvbk51bWJlcn1gfVxuICAgICAgICBjbGFzc05hbWU9XCJ1aXRlc3QtcHJvZ3Jlc3MtbGVzc29uXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAuLi5zdHlsZXMub3V0ZXIsXG4gICAgICAgICAgLi4uKChoaWRkZW5Gb3JTdHVkZW50cyB8fCBzaG93QXNMb2NrZWQpICYmIHN0eWxlcy5oaWRkZW5PckxvY2tlZCksXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgLi4uc3R5bGVzLm1haW4sXG4gICAgICAgICAgICAuLi4oKChoaWRkZW5Gb3JTdHVkZW50cyAmJiB2aWV3QXMgPT09IFZpZXdUeXBlLlBhcnRpY2lwYW50KSB8fFxuICAgICAgICAgICAgICBpc0xvY2tlZEZvclVzZXIpICYmXG4gICAgICAgICAgICAgIHN0eWxlcy50cmFuc2x1Y2VudCksXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIC4uLnN0eWxlcy5oZWFkaW5nLFxuICAgICAgICAgICAgICAuLi57bWFyZ2luQm90dG9tOiB0aGlzLnN0YXRlLmNvbGxhcHNlZCA/IDAgOiAxNX0sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5oZWFkaW5nVGV4dH1cbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZWR9XG4gICAgICAgICAgICAgIHRhYkluZGV4PVwiMFwiXG4gICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICBvbktleURvd249e2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChbJyAnLCAnRW50ZXInLCAnU3BhY2ViYXInXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2VkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPXshdGhpcy5zdGF0ZS5jb2xsYXBzZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxGb250QXdlc29tZSBpY29uPXtjYXJldH0gc3R5bGU9e2NhcmV0U3R5bGV9IC8+XG4gICAgICAgICAgICAgIHtoaWRkZW5Gb3JTdHVkZW50cyAmJiAoXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lIGljb249XCJleWUtc2xhc2hcIiBzdHlsZT17c3R5bGVzLmljb259IC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtsZXNzb24ubG9ja2FibGUgJiYgdGhpcy5wcm9wcy5sb2NrU3RhdHVzTG9hZGVkICYmIChcbiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXRpcCBkYXRhLWZvcj17bG9ja2VkVG9vbHRpcElkfT5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZVxuICAgICAgICAgICAgICAgICAgICBpY29uPXtzaG93QXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJ31cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuaWNvbixcbiAgICAgICAgICAgICAgICAgICAgICAuLi4oIXNob3dBc0xvY2tlZCAmJiBzdHlsZXMudW5sb2NrZWRJY29uKSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICB7IXNob3dBc0xvY2tlZCAmJiB2aWV3QXMgPT09IFZpZXdUeXBlLkluc3RydWN0b3IgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8UmVhY3RUb29sdGlwXG4gICAgICAgICAgICAgICAgICAgICAgaWQ9e2xvY2tlZFRvb2x0aXBJZH1cbiAgICAgICAgICAgICAgICAgICAgICByb2xlPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgICAgICAgd3JhcHBlcj1cInNwYW5cIlxuICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdD1cInNvbGlkXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHtpMThuLmxvY2tBc3Nlc3NtZW50TG9uZygpfVxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0VG9vbHRpcD5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8c3Bhbj57dGl0bGV9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7dmlld0FzID09PSBWaWV3VHlwZS5QYXJ0aWNpcGFudCAmJlxuICAgICAgICAgICAgICBsZXNzb24uc3R1ZGVudF9sZXNzb25fcGxhbl9odG1sX3VybCAmJiAoXG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy5idXR0b25TdHlsZX0+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIF9fdXNlRGVwcmVjYXRlZFRhZ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1aS10ZXN0LWxlc3Nvbi1yZXNvdXJjZXNcIlxuICAgICAgICAgICAgICAgICAgICBocmVmPXtsZXNzb24uc3R1ZGVudF9sZXNzb25fcGxhbl9odG1sX3VybH1cbiAgICAgICAgICAgICAgICAgICAgdGV4dD17aTE4bi5sZXNzb25SZXNvdXJjZXMoKX1cbiAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZpbGUtdGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHVycGxlXCJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrU3R1ZGVudExlc3NvblBsYW59XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7c2hvd05vdEF1dGhvcml6ZWRXYXJuaW5nICYmIChcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5ub3RBdXRob3JpemVkV2FybmluZ30+XG4gICAgICAgICAgICAgIHtpMThuLnVudmVyaWZpZWRUZWFjaGVyTG9ja1dhcm5pbmcoKX1cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmxlYXJuTW9yZUxpbmt9XG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vc3VwcG9ydC5jb2RlLm9yZy9oYy9lbi11cy9hcnRpY2xlcy8xMTUwMDE1NTAxMzEtQmVjb21pbmctYS12ZXJpZmllZC10ZWFjaGVyLUNTLVByaW5jaXBsZXMtYW5kLUNTLURpc2NvdmVyaWVzLW9ubHktXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpMThuLmxlYXJuTW9yZVdpdGhQZXJpb2QoKX1cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7IXRoaXMuc3RhdGUuY29sbGFwc2VkICYmIChcbiAgICAgICAgICAgIDxQcm9ncmVzc0xlc3NvbkNvbnRlbnRcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICBsZXZlbHM9e2xldmVsc31cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9ja2VkRm9yVXNlcn1cbiAgICAgICAgICAgICAgc2VsZWN0ZWRTZWN0aW9uSWQ9e3NlbGVjdGVkU2VjdGlvbklkfVxuICAgICAgICAgICAgICBsZXNzb25OYW1lPXtsZXNzb24ubmFtZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHt2aWV3QXMgPT09IFZpZXdUeXBlLkluc3RydWN0b3IgJiYgIXRoaXMucHJvcHMuaXNNaW5pVmlldyAmJiAoXG4gICAgICAgICAgPFByb2dyZXNzTGVzc29uVGVhY2hlckluZm9cbiAgICAgICAgICAgIGxlc3Nvbj17bGVzc29ufVxuICAgICAgICAgICAgbGVzc29uVXJsPXtsZXNzb25Vcmx9XG4gICAgICAgICAgICBvbkNsaWNrU3R1ZGVudExlc3NvblBsYW49e3RoaXMub25DbGlja1N0dWRlbnRMZXNzb25QbGFufVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtsZXNzb24uaXNGb2N1c0FyZWEgJiYgPEZvY3VzQXJlYUluZGljYXRvciAvPn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBvdXRlcjoge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICd0YWJsZScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBiYWNrZ3JvdW5kOiBjb2xvci5saWdodGVzdF9ncmF5LFxuICAgIGJvcmRlckNvbG9yOiBjb2xvci5ib3JkZXJfZ3JheSxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgLy8gV2hlbiB0b2dnbGluZyBiZXR3ZWVuIGhpZGRlbiBhbmQgbm90LCB3ZSBjaGFuZ2Ugb3VyIGJvcmRlciBzaXplIGZyb20gMSB0byA0LlxuICAgIC8vIFdlIHdhbnQgdG8gbGltaXQgaG93IG11Y2ggdG9nZ2xpbmcgdGhpcyBjaGFuZ2VzIG91ciBzaXppbmcsIHNvIHdlIGFkZCArM1xuICAgIC8vIHRvIGVhY2ggb2Ygb3VyIG5vbi1oaWRkZW4gbWFyZ2luc1xuICAgIGJvcmRlcldpZHRoOiAxLFxuICAgIG1hcmdpblRvcDogMyxcbiAgICBtYXJnaW5Cb3R0b206IDE1LFxuICAgIG1hcmdpbkxlZnQ6IDMsXG4gICAgbWFyZ2luUmlnaHQ6IDMsXG4gIH0sXG4gIG1haW46IHtcbiAgICBwYWRkaW5nOiAyMCxcbiAgfSxcbiAgaGVhZGluZzoge1xuICAgIGZvbnRTaXplOiAxOCxcbiAgICAuLi5mb250Q29uc3RhbnRzWydtYWluLWZvbnQtc2VtaS1ib2xkJ10sXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxuICBoZWFkaW5nVGV4dDoge1xuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGZsZXhHcm93OiAxLFxuICB9LFxuICBidXR0b25TdHlsZToge1xuICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgfSxcbiAgaGlkZGVuT3JMb2NrZWQ6IHtcbiAgICBib3JkZXJTdHlsZTogJ2Rhc2hlZCcsXG4gICAgYm9yZGVyV2lkdGg6IDQsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogMTIsXG4gICAgbWFyZ2luTGVmdDogMCxcbiAgICBtYXJnaW5SaWdodDogMCxcbiAgfSxcbiAgdHJhbnNsdWNlbnQ6IHtcbiAgICBvcGFjaXR5OiAwLjYsXG4gIH0sXG4gIGNhcmV0OiB7XG4gICAgbWFyZ2luUmlnaHQ6IDEwLFxuICB9LFxuICBjYXJldFJUTDoge1xuICAgIG1hcmdpbkxlZnQ6IDEwLFxuICB9LFxuICBpY29uOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDUsXG4gICAgZm9udFNpemU6IDE4LFxuICAgIGNvbG9yOiBjb2xvci5jeWFuLFxuICB9LFxuICB1bmxvY2tlZEljb246IHtcbiAgICBjb2xvcjogY29sb3Iub3JhbmdlLFxuICB9LFxuICBub3RBdXRob3JpemVkV2FybmluZzoge1xuICAgIGNvbG9yOiBjb2xvci5yZWQsXG4gICAgLi4uZm9udENvbnN0YW50c1snbWFpbi1mb250LXNlbWktYm9sZC1pdGFsaWMnXSxcbiAgICBtYXJnaW5Ub3A6IDEwLFxuICB9LFxuICBsZWFybk1vcmVMaW5rOiB7XG4gICAgbWFyZ2luTGVmdDogNSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFByb2dyZXNzTGVzc29uID0gUHJvZ3Jlc3NMZXNzb247XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKHN0YXRlLCBvd25Qcm9wcykgPT4gKHtcbiAgY3VycmVudExlc3NvbklkOiBzdGF0ZS5wcm9ncmVzcy5jdXJyZW50TGVzc29uSWQsXG4gIHZpZXdBczogc3RhdGUudmlld0FzLFxuICBsb2NrYWJsZUF1dGhvcml6ZWQ6IHN0YXRlLmxlc3NvbkxvY2subG9ja2FibGVBdXRob3JpemVkLFxuICBsb2NrYWJsZUF1dGhvcml6ZWRMb2FkZWQ6IHN0YXRlLmxlc3NvbkxvY2subG9ja2FibGVBdXRob3JpemVkTG9hZGVkLFxuICBpc1Zpc2libGU6IGxlc3NvbklzVmlzaWJsZShvd25Qcm9wcy5sZXNzb24sIHN0YXRlLCBzdGF0ZS52aWV3QXMpLFxuICBoaWRkZW5Gb3JTdHVkZW50czogIWxlc3NvbklzVmlzaWJsZShcbiAgICBvd25Qcm9wcy5sZXNzb24sXG4gICAgc3RhdGUsXG4gICAgVmlld1R5cGUuUGFydGljaXBhbnRcbiAgKSxcbiAgaXNMb2NrZWRGb3JVc2VyOiBsZXNzb25Jc0xvY2tlZEZvclVzZXIoXG4gICAgb3duUHJvcHMubGVzc29uLFxuICAgIG93blByb3BzLmxldmVscyxcbiAgICBzdGF0ZSxcbiAgICBzdGF0ZS52aWV3QXNcbiAgKSxcbiAgaXNMb2NrZWRGb3JBbGxTdHVkZW50czogbGVzc29uSXNMb2NrZWRGb3JBbGxTdHVkZW50cyhcbiAgICBvd25Qcm9wcy5sZXNzb24uaWQsXG4gICAgc3RhdGVcbiAgKSxcbiAgc2VsZWN0ZWRTZWN0aW9uSWQ6IHN0YXRlLnRlYWNoZXJTZWN0aW9ucy5zZWxlY3RlZFNlY3Rpb25JZCxcbiAgc2NyaXB0SWQ6IHN0YXRlLnByb2dyZXNzLnNjcmlwdElkLFxuICBpc1J0bDogc3RhdGUuaXNSdGwsXG4gIGlzTWluaVZpZXc6IHN0YXRlLnByb2dyZXNzLmlzTWluaVZpZXcsXG4gIGxvY2tTdGF0dXNMb2FkZWQ6XG4gICAgc3RhdGUucHJvZ3Jlc3MudW5pdFByb2dyZXNzSGFzTG9hZGVkICYmXG4gICAgc3RhdGUubGVzc29uTG9jay5sZXNzb25zQnlTZWN0aW9uSWRMb2FkZWQsXG59KSkoUHJvZ3Jlc3NMZXNzb24pO1xuIiwiLyoqXG4gKiBUaGlzIGlzIGEgc2V0IG9mIGhlbHBlcnMgdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIHRlc3QgbGV2ZWwvbGVzc29uIGNvbnRlbnQuXG4gKiBJdCBsaXZlcyBpbiBzcmMgYmVjYXVzZSBpdCdzIHVzZWQgYnkgYm90aCBzdG9yeSBmaWxlcyBhbmQgdGVzdCBmaWxlcywgYW5kIGl0XG4gKiBiZXR0ZXIgdG8gaGF2ZSB0ZXN0IHJlcXVpcmUgaGVscGVycyBmcm9tIHNyYywgdGhlbiBzdG9yeSBmaWxlcyBpbiBzcmMgcmVhY2hcbiAqIGludG8gdGVzdC5cbiAqL1xuXG5pbXBvcnQgSW1tdXRhYmxlIGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtjcmVhdGVTdG9yZX0gZnJvbSAncmVkdXgnO1xuXG5pbXBvcnQge1xuICBsZXZlbFByb2dyZXNzRnJvbVNlcnZlcixcbiAgbGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uLFxufSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL3Byb2dyZXNzL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQge0xldmVsU3RhdHVzfSBmcm9tICdAY2RvL2dlbmVyYXRlZC1zY3JpcHRzL3NoYXJlZENvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBmYWtlTGVzc29uID0gKFxuICBuYW1lLFxuICBpZCxcbiAgbG9ja2FibGUgPSBmYWxzZSxcbiAgbGVzc29uTnVtYmVyID0gdW5kZWZpbmVkLFxuICBsZXNzb25TdGFydFVybCA9ICdjb2RlLm9yZycsXG4gIGxldmVscyA9IFtdXG4pID0+ICh7XG4gIG5hbWUsXG4gIGlkLFxuICBsb2NrYWJsZSxcbiAgbGVzc29uTnVtYmVyLFxuICBsZXNzb25TdGFydFVybCxcbiAgaXNGb2N1c0FyZWE6IGZhbHNlLFxuICBsZXZlbHMsXG59KTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXZlbCA9IChvdmVycmlkZXMgPSB7fSkgPT4ge1xuICBjb25zdCBsZXZlbE51bWJlciA9IG92ZXJyaWRlcy5sZXZlbE51bWJlciB8fCAxO1xuICBjb25zdCBpZCA9IChvdmVycmlkZXMuaWQgfHwgbGV2ZWxOdW1iZXIpLnRvU3RyaW5nKCk7XG4gIGRlbGV0ZSBvdmVycmlkZXMuaWQ7XG4gIHJldHVybiB7XG4gICAgaWQ6IGlkLFxuICAgIHN0YXR1czogTGV2ZWxTdGF0dXMubm90X3RyaWVkLFxuICAgIGlzTG9ja2VkOiBmYWxzZSxcbiAgICBsZXZlbE51bWJlcjogbGV2ZWxOdW1iZXIsXG4gICAgYnViYmxlVGV4dDogbGV2ZWxOdW1iZXIudG9TdHJpbmcoKSxcbiAgICB1cmw6IGAvbGV2ZWwke2xldmVsTnVtYmVyfWAsXG4gICAgbmFtZTogYExldmVsICR7bGV2ZWxOdW1iZXJ9YCxcbiAgICBpc1VucGx1Z2dlZDogZmFsc2UsXG4gICAgLi4ub3ZlcnJpZGVzLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXZlbFdpdGhTdWJMZXZlbHMgPSAoXG4gIG51bVN1YmxldmVscyxcbiAgc3RhcnRMZXZlbCA9IDEsXG4gIG92ZXJyaWRlcyA9IHt9XG4pID0+IHtcbiAgY29uc3Qgc3VibGV2ZWxzID0gXy5yYW5nZShudW1TdWJsZXZlbHMpLm1hcChpbmRleCA9PiB7XG4gICAgY29uc3Qgb3ZlcnJpZGVEYXRhID0ge1xuICAgICAgaWQ6IGluZGV4ICsgc3RhcnRMZXZlbCxcbiAgICAgIGxldmVsTnVtYmVyOiBpbmRleCArIHN0YXJ0TGV2ZWwsXG4gICAgfTtcbiAgICByZXR1cm4gZmFrZUxldmVsKG92ZXJyaWRlRGF0YSk7XG4gIH0pO1xuICByZXR1cm4gZmFrZUxldmVsKHtcbiAgICBzdWJsZXZlbHM6IHN1YmxldmVscyxcbiAgICBpZDogc3RhcnRMZXZlbCArIG51bVN1YmxldmVscyxcbiAgICBsZXZlbE51bWJlcjogc3RhcnRMZXZlbCArIG51bVN1YmxldmVscyxcbiAgICAuLi5vdmVycmlkZXMsXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXZlbHMgPSAobnVtTGV2ZWxzLCB7c3RhcnRMZXZlbCA9IDEsIG5hbWVkID0gdHJ1ZX0gPSB7fSkgPT5cbiAgXy5yYW5nZShudW1MZXZlbHMpLm1hcChpbmRleCA9PiB7XG4gICAgbGV0IG92ZXJyaWRlRGF0YSA9IHtcbiAgICAgIGlkOiBpbmRleCArIHN0YXJ0TGV2ZWwsXG4gICAgICBsZXZlbE51bWJlcjogaW5kZXggKyBzdGFydExldmVsLFxuICAgIH07XG4gICAgaWYgKCFuYW1lZCkge1xuICAgICAgb3ZlcnJpZGVEYXRhWyduYW1lJ10gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBmYWtlTGV2ZWwob3ZlcnJpZGVEYXRhKTtcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBmYWtlUHJvZ3Jlc3NGb3JMZXZlbHMgPSAoXG4gIGxldmVscyxcbiAgc3RhdHVzID0gTGV2ZWxTdGF0dXMubm90X3RyaWVkLFxuICBzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlcyA9IHt9XG4pID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3MgPSB7fTtcbiAgbGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIHByb2dyZXNzW2xldmVsLmlkXSA9IGxldmVsUHJvZ3Jlc3NGcm9tU2VydmVyKHtcbiAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgLi4uc2VydmVyUHJvZ3Jlc3NPdmVycmlkZXMsXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcHJvZ3Jlc3M7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIHNoZWxsIG9mIGEgcmVkdXggc3RvcmUgd2l0aCB0aGUgcHJvdmlkZWQgbGVzc29uSWQgYmVpbmcgaGlkZGVuXG4gKiBAcGFyYW0ge1ZpZXdUeXBlfSB2aWV3QXNcbiAqIEBwYXJhbSB7bnVtYmVyP30gbGVzc29uSWQgLSBMZXNzb24gdG8gaGlkZSAob3IgbnVsbCBpZiBub25lKVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU3RvcmVXaXRoSGlkZGVuTGVzc29uID0gKHZpZXdBcywgbGVzc29uSWQpID0+IHtcbiAgY29uc3Qgc2VjdGlvbklkID0gMTE7XG4gIHJldHVybiBjcmVhdGVTdG9yZShzdGF0ZSA9PiBzdGF0ZSwge1xuICAgIGxlc3NvbkxvY2s6IHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZDoge1xuICAgICAgICBbc2VjdGlvbklkXToge30sXG4gICAgICB9LFxuICAgICAgbG9ja2FibGVBdXRob3JpemVkOiBmYWxzZSxcbiAgICAgIGxvY2thYmxlQXV0aG9yaXplZExvYWRlZDogdHJ1ZSxcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZExvYWRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHZpZXdBczogdmlld0FzLFxuICAgIHRlYWNoZXJTZWN0aW9uczoge1xuICAgICAgc2VjdGlvbklkczogW3NlY3Rpb25JZF0sXG4gICAgICBzZWN0aW9uc0FyZUxvYWRlZDogdHJ1ZSxcbiAgICAgIHNlY3Rpb25zOiB7XG4gICAgICAgIFtzZWN0aW9uSWRdOiB7XG4gICAgICAgICAgaWQ6IDExLFxuICAgICAgICAgIG5hbWU6ICd0ZXN0IHNlY3Rpb24nLFxuICAgICAgICAgIGxlc3Nvbl9leHRyYXM6IHRydWUsXG4gICAgICAgICAgcGFpcmluZ19hbGxvd2VkOiB0cnVlLFxuICAgICAgICAgIHN0dWRlbnRDb3VudDogNCxcbiAgICAgICAgICBjb2RlOiAnVFFHU0pSJyxcbiAgICAgICAgICBwcm92aWRlck1hbmFnZWQ6IGZhbHNlLFxuICAgICAgICAgIGxlc3NvbnM6IHt9LFxuICAgICAgICAgIHR0c0F1dG9wbGF5RW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgbGVzc29uRXh0cmFzOiBmYWxzZSxcbiAgICAgICAgICBwYWlyaW5nQWxsb3dlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzZWxlY3RlZFNlY3Rpb25JZDogc2VjdGlvbklkLFxuICAgIH0sXG4gICAgaGlkZGVuTGVzc29uOiBJbW11dGFibGUuZnJvbUpTKHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb246IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHtbbGVzc29uSWRdOiB0cnVlfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgIHNjcmlwdE5hbWU6ICdzY3JpcHQtbmFtZScsXG4gICAgICBzY3JpcHRJZDogMTcsXG4gICAgICB1bml0UHJvZ3Jlc3NIYXNMb2FkZWQ6IHRydWUsXG4gICAgfSxcbiAgICBjdXJyZW50VXNlcjoge1xuICAgICAgdXNlcklkOiAxLFxuICAgIH0sXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBzaGVsbCBvZiBhIHJlZHV4IHN0b3JlIHdpdGggdGhlIHByb3ZpZGVkIGxlc3NvbklkIGJlaW5nIGhpZGRlblxuICogQHBhcmFtIHtWaWV3VHlwZX0gdmlld0FzXG4gKiBAcGFyYW0ge251bWJlcj99IGxlc3NvbklkIC0gTGVzc29uIHRvIGhpZGUgKG9yIG51bGwgaWYgbm9uZSlcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVN0b3JlV2l0aExvY2tlZExlc3NvbiA9IChcbiAgdmlld0FzLFxuICBsb2NrYWJsZUF1dGhvcml6ZWQgPSBmYWxzZVxuKSA9PiB7XG4gIGNvbnN0IHNlY3Rpb25JZCA9IDExO1xuICByZXR1cm4gY3JlYXRlU3RvcmUoc3RhdGUgPT4gc3RhdGUsIHtcbiAgICBsZXNzb25Mb2NrOiB7XG4gICAgICBsZXNzb25zQnlTZWN0aW9uSWQ6IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHt9LFxuICAgICAgfSxcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZExvYWRlZDogdHJ1ZSxcbiAgICAgIGxvY2thYmxlQXV0aG9yaXplZDogbG9ja2FibGVBdXRob3JpemVkLFxuICAgICAgbG9ja2FibGVBdXRob3JpemVkTG9hZGVkOiB0cnVlLFxuICAgIH0sXG4gICAgdmlld0FzOiB2aWV3QXMsXG4gICAgdGVhY2hlclNlY3Rpb25zOiB7XG4gICAgICBzZWxlY3RlZFNlY3Rpb25JZDogc2VjdGlvbklkLFxuICAgIH0sXG4gICAgaGlkZGVuTGVzc29uOiBJbW11dGFibGUuZnJvbUpTKHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb246IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHtbbGVzc29uSWRdOiB0cnVlfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgIHVuaXRQcm9ncmVzc0hhc0xvYWRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIGN1cnJlbnRVc2VyOiB7XG4gICAgICB1c2VySWQ6IDEsXG4gICAgfSxcbiAgfSk7XG59O1xuXG5jb25zdCByYW5kb21OdW1iZXJVcFRvMTAwID0gKCkgPT4ge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcbn07XG5cbmxldCBsZXNzb25JZCA9IDE7XG5cbmV4cG9ydCBjb25zdCBmYWtlTGVzc29uV2l0aExldmVscyA9IChvdmVycmlkZUZpZWxkcyA9IHt9LCBsZXZlbENvdW50ID0gMSkgPT4ge1xuICBjb25zdCBwb3NpdGlvbiA9IG92ZXJyaWRlRmllbGRzLnBvc2l0aW9uIHx8IHJhbmRvbU51bWJlclVwVG8xMDAoKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogbGVzc29uSWQrKyxcbiAgICBuYW1lOiBgTGVzc29uIC0gJHtwb3NpdGlvbn1gLFxuICAgIHRpdGxlOiBgTGVzc29uICR7cG9zaXRpb259OiBMZXNzb24gLSAke3Bvc2l0aW9ufWAsXG4gICAgbG9ja2FibGU6IGZhbHNlLFxuICAgIHJlbGF0aXZlX3Bvc2l0aW9uOiBwb3NpdGlvbixcbiAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgbGV2ZWxzOiBmYWtlTGV2ZWxzKGxldmVsQ291bnQpLFxuICAgIC4uLm92ZXJyaWRlRmllbGRzLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VTdHVkZW50cyA9IHN0dWRlbnRDb3VudCA9PiB7XG4gIHJldHVybiBBcnJheShzdHVkZW50Q291bnQpXG4gICAgLmZpbGwoKVxuICAgIC5tYXAoKF8sIGkpID0+ICh7XG4gICAgICBpZDogaSxcbiAgICAgIG5hbWU6IGBzdHVkZW50LSR7aX1gLFxuICAgICAgZmFtaWx5TmFtZTogYHN0dWRlbnQtJHtzdHVkZW50Q291bnQgLSBpfWAsXG4gICAgfSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VVbml0RGF0YSA9IChvdmVycmlkZUZpZWxkcyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IDEsXG4gICAgbmFtZTogJ2NzZDEtMjAyMCcsXG4gICAgdGl0bGU6ICdDU0QgVW5pdCAxIC0gUHJvYmxlbSBTb2x2aW5nIGFuZCBDb21wdXRpbmcgKDIwLTIxKScsXG4gICAgY3NmOiBmYWxzZSxcbiAgICBpc0NzZDogdHJ1ZSxcbiAgICBpc0NzcDogZmFsc2UsXG4gICAgbGVzc29uczogW10sXG4gICAgLi4ub3ZlcnJpZGVGaWVsZHMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVN0dWRlbnRMZXZlbFByb2dyZXNzID0gKFxuICBsZXZlbHMsXG4gIHN0dWRlbnRzLFxuICBzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlcyA9IHt9XG4pID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3NPbkxlc3NvbnMgPSBmYWtlUHJvZ3Jlc3NGb3JMZXZlbHMoXG4gICAgbGV2ZWxzLFxuICAgIHNlcnZlclByb2dyZXNzT3ZlcnJpZGVzLnN0YXR1cyxcbiAgICBzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlc1xuICApO1xuXG4gIGNvbnN0IHN0dWRlbnRQcm9ncmVzcyA9IHt9O1xuICBzdHVkZW50cy5mb3JFYWNoKHN0dWRlbnQgPT4ge1xuICAgIHN0dWRlbnRQcm9ncmVzc1tzdHVkZW50LmlkXSA9IHByb2dyZXNzT25MZXNzb25zO1xuICB9KTtcblxuICByZXR1cm4gc3R1ZGVudFByb2dyZXNzO1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VTdHVkZW50TGFzdFVwZGF0ZSA9IHN0dWRlbnRzID0+IHtcbiAgY29uc3Qgc3R1ZGVudExhc3RVcGRhdGUgPSB7fTtcbiAgc3R1ZGVudHMuZm9yRWFjaChzdHVkZW50ID0+IHtcbiAgICBzdHVkZW50TGFzdFVwZGF0ZVtzdHVkZW50LmlkXSA9IERhdGUubm93KCk7XG4gIH0pO1xuICByZXR1cm4gc3R1ZGVudExhc3RVcGRhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVN0dWRlbnRMYXN0VXBkYXRlQnlTY3JpcHQgPSAoc2NyaXB0RGF0YSwgc3R1ZGVudHMpID0+IHtcbiAgcmV0dXJuIHtbc2NyaXB0RGF0YS5pZF06IGZha2VTdHVkZW50TGFzdFVwZGF0ZShzdHVkZW50cyl9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VQcm9ncmVzc1RhYmxlUmVkdXhJbml0aWFsU3RhdGUgPSAoXG4gIGxlc3NvbnMsXG4gIHNjcmlwdERhdGEsXG4gIHN0dWRlbnRzID0gZmFrZVN0dWRlbnRzKDIpXG4pID0+IHtcbiAgaWYgKCFsZXNzb25zKSB7XG4gICAgY29uc3QgbGVzc29uMSA9IGZha2VMZXNzb25XaXRoTGV2ZWxzKHtwb3NpdGlvbjogMSwgbGV2ZWxzOiBmYWtlTGV2ZWxzKDEpfSk7XG4gICAgY29uc3QgbGVzc29uMiA9IGZha2VMZXNzb25XaXRoTGV2ZWxzKHtwb3NpdGlvbjogMiwgbGV2ZWxzOiBmYWtlTGV2ZWxzKDIpfSk7XG4gICAgbGVzc29ucyA9IFtsZXNzb24xLCBsZXNzb24yXTtcbiAgfVxuICBpZiAoIXNjcmlwdERhdGEpIHtcbiAgICBzY3JpcHREYXRhID0gZmFrZVVuaXREYXRhKHtsZXNzb25zOiBsZXNzb25zfSk7XG4gIH1cbiAgY29uc3QgbGV2ZWxQcm9ncmVzc0RhdGEgPSBmYWtlU3R1ZGVudExldmVsUHJvZ3Jlc3MoXG4gICAgc2NyaXB0RGF0YS5sZXNzb25zWzBdLmxldmVscyxcbiAgICBzdHVkZW50c1xuICApO1xuXG4gIGNvbnN0IHNlY3Rpb25JZCA9IHJhbmRvbU51bWJlclVwVG8xMDAoKTtcblxuICByZXR1cm4ge1xuICAgIGN1cnJlbnRVc2VyOiB7XG4gICAgICBpc1NvcnRlZEJ5RmFtaWx5TmFtZTogZmFsc2UsXG4gICAgfSxcbiAgICBwcm9ncmVzczoge1xuICAgICAgbGVzc29uR3JvdXBzOiBbXSxcbiAgICAgIGxlc3NvbnM6IGxlc3NvbnMsXG4gICAgICBmb2N1c0FyZWFMZXNzb25JZHM6IFtdLFxuICAgICAgZGVlcGVyTGVhcm5pbmdDb3Vyc2U6IGZhbHNlLFxuICAgIH0sXG4gICAgdGVhY2hlclNlY3Rpb25zOiB7XG4gICAgICBzZWN0aW9uczogW3tpZDogc2VjdGlvbklkfV0sXG4gICAgICBzZWxlY3RlZFNlY3Rpb25JZDogc2VjdGlvbklkLFxuICAgICAgc2VsZWN0ZWRTdHVkZW50czogc3R1ZGVudHMsXG4gICAgfSxcbiAgICBzZWN0aW9uUHJvZ3Jlc3M6IHtcbiAgICAgIHVuaXREYXRhQnlVbml0OiB7W3NjcmlwdERhdGEuaWRdOiBzY3JpcHREYXRhfSxcbiAgICAgIHN0dWRlbnRMZXZlbFByb2dyZXNzQnlVbml0OiB7XG4gICAgICAgIFtzY3JpcHREYXRhLmlkXTogbGV2ZWxQcm9ncmVzc0RhdGEsXG4gICAgICB9LFxuICAgICAgc3R1ZGVudExlc3NvblByb2dyZXNzQnlVbml0OiB7XG4gICAgICAgIFtzY3JpcHREYXRhLmlkXTogbGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uKFxuICAgICAgICAgIGxldmVsUHJvZ3Jlc3NEYXRhLFxuICAgICAgICAgIHNjcmlwdERhdGEubGVzc29uc1xuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIHN0dWRlbnRMYXN0VXBkYXRlQnlVbml0OiBmYWtlU3R1ZGVudExhc3RVcGRhdGVCeVNjcmlwdChcbiAgICAgICAgc2NyaXB0RGF0YSxcbiAgICAgICAgc3R1ZGVudHNcbiAgICAgICksXG4gICAgICBsZXNzb25PZkludGVyZXN0OiAxLFxuICAgIH0sXG4gICAgdW5pdFNlbGVjdGlvbjoge3NjcmlwdElkOiBzY3JpcHREYXRhLmlkfSxcbiAgICBsb2NhbGVzOiB7bG9jYWxlQ29kZTogJ2VuLVVTJ30sXG4gIH07XG59O1xuIiwiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7Vmlld1R5cGV9IGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby92aWV3QXNSZWR1eCc7XG5pbXBvcnQge0xldmVsU3RhdHVzfSBmcm9tICdAY2RvL2dlbmVyYXRlZC1zY3JpcHRzL3NoYXJlZENvbnN0YW50cyc7XG5cbmltcG9ydCBEZXRhaWxQcm9ncmVzc1RhYmxlIGZyb20gJy4vRGV0YWlsUHJvZ3Jlc3NUYWJsZSc7XG5pbXBvcnQge1xuICBmYWtlTGVzc29uLFxuICBmYWtlTGV2ZWxzLFxuICBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24sXG59IGZyb20gJy4vcHJvZ3Jlc3NUZXN0SGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50OiBEZXRhaWxQcm9ncmVzc1RhYmxlLFxufTtcblxuY29uc3QgbGVzc29ucyA9IFtcbiAgZmFrZUxlc3NvbignSmlnc2F3JywgMSksXG4gIGZha2VMZXNzb24oJ01hemUnLCAyKSxcbiAgZmFrZUxlc3NvbignQXJ0aXN0JywgMyksXG4gIGZha2VMZXNzb24oJ1NvbWV0aGluZycsIDQpLFxuXTtcblxuY29uc3QgbGV2ZWxzQnlMZXNzb24gPSBbXG4gIFtcbiAgICB7XG4gICAgICBpZDogJzMwJyxcbiAgICAgIHN0YXR1czogTGV2ZWxTdGF0dXMubm90X3RyaWVkLFxuICAgICAgaXNMb2NrZWQ6IGZhbHNlLFxuICAgICAgdXJsOiAnL3N0ZXAxL2xldmVsMScsXG4gICAgICBuYW1lOiAnRmlyc3QgcHJvZ3Jlc3Npb24nLFxuICAgICAgbGV2ZWxOdW1iZXI6IDEsXG4gICAgfSxcbiAgICAuLi5mYWtlTGV2ZWxzKDUsIHtzdGFydExldmVsOiAyfSkubWFwKGxldmVsID0+ICh7XG4gICAgICAuLi5sZXZlbCxcbiAgICAgIHByb2dyZXNzaW9uOiAnU2Vjb25kIFByb2dyZXNzaW9uJyxcbiAgICB9KSksXG4gICAge1xuICAgICAgaWQ6ICc0MCcsXG4gICAgICBzdGF0dXM6IExldmVsU3RhdHVzLm5vdF90cmllZCxcbiAgICAgIGlzTG9ja2VkOiBmYWxzZSxcbiAgICAgIHVybDogJy9zdGVwMy9sZXZlbDEnLFxuICAgICAgbmFtZTogJ0xhc3QgcHJvZ3Jlc3Npb24nLFxuICAgICAgbGV2ZWxOdW1iZXI6IDcsXG4gICAgfSxcbiAgXSxcbiAgZmFrZUxldmVscygyKSxcbiAgZmFrZUxldmVscygyKSxcbiAgZmFrZUxldmVscygyKSxcbl07XG5cbmNvbnN0IGdyb3VwZWRMZXNzb24gPSB7bGVzc29ucywgbGV2ZWxzQnlMZXNzb259O1xuXG5jb25zdCBUZW1wbGF0ZSA9IHN0b3JlID0+IChcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPERldGFpbFByb2dyZXNzVGFibGUgZ3JvdXBlZExlc3Nvbj17Z3JvdXBlZExlc3Nvbn0gLz5cbiAgPC9Qcm92aWRlcj5cbik7XG5cbmV4cG9ydCBjb25zdCBTaW1wbGUgPSBUZW1wbGF0ZS5iaW5kKHt9KTtcblNpbXBsZS5hcmdzID0gY3JlYXRlU3RvcmVXaXRoSGlkZGVuTGVzc29uKFZpZXdUeXBlLkluc3RydWN0b3IsIG51bGwpO1xuXG4vLyBMZXNzb24gMiBzaG91bGQgYmUgd2hpdGUgd2l0aCBkYXNoZWQgb3V0bGluZS5cbmV4cG9ydCBjb25zdCBXaXRoSGlkZGVuTGVzc29uQXNJbnN0cnVjdG9yID0gVGVtcGxhdGUuYmluZCh7fSk7XG5XaXRoSGlkZGVuTGVzc29uQXNJbnN0cnVjdG9yLmFyZ3MgPSBjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24oXG4gIFZpZXdUeXBlLkluc3RydWN0b3IsXG4gICcyJ1xuKTtcblxuLy8gTGVzc29uIDIgc2hvdWxkIGJlIGludmlzaWJsZS5cbmV4cG9ydCBjb25zdCBXaXRoSGlkZGVuTGVzc29uQXNQYXJ0aWNpcGFudCA9IFRlbXBsYXRlLmJpbmQoe30pO1xuV2l0aEhpZGRlbkxlc3NvbkFzUGFydGljaXBhbnQuYXJncyA9IGNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbihcbiAgVmlld1R5cGUuUGFydGljaXBhbnQsXG4gICcyJ1xuKTtcbiJdLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9Qcm9ncmVzc0xlc3NvbiIsIl9wcm9ncmVzc1R5cGVzIiwib2JqIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJyIiwiZSIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXhwb3J0cyIsIl9SZWFjdCRDb21wb25lbnQiLCJEZXRhaWxQcm9ncmVzc1RhYmxlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInJlbmRlciIsIl90aGlzJHByb3BzJGdyb3VwZWRMZSIsInRoaXMiLCJwcm9wcyIsImdyb3VwZWRMZXNzb24iLCJsZXNzb25zIiwibGV2ZWxzQnlMZXNzb24iLCJsZW5ndGgiLCJFcnJvciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJtYXAiLCJsZXNzb24iLCJpbmRleCIsImxldmVscyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZ3JvdXBlZExlc3NvbnNUeXBlIiwiaXNSZXF1aXJlZCIsIm1vZHVsZSIsIl9yYWRpdW0iLCJfcmVhY3RUb29sdGlwIiwiX0ZvbnRBd2Vzb21lIiwiX2NvbG9yIiwic3R5bGVzIiwibWFpbiIsImRpc3BsYXkiLCJwb3NpdGlvbiIsInJpZ2h0IiwidG9wIiwid2hpdGVTcGFjZSIsImFycm93Q29udGFpbmVyIiwibGVmdEFycm93Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJjb25jYXQiLCJjb2xvciIsImN5YW4iLCJmb2N1c0FyZWEiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aGl0ZSIsImxpbmVIZWlnaHQiLCJ0ZXh0IiwiZm9jdXNBcmVhSWNvbiIsInBhZGRpbmciLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJib3JkZXJSYWRpdXMiLCJkZWZhdWx0X2JsdWUiLCJSYWRpdW0iLCJGb2N1c0FyZWFJbmRpY2F0b3IiLCJzdHlsZSIsImhyZWYiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiaWNvbiIsImlkIiwicm9sZSIsImVmZmVjdCIsIl9sb2Rhc2giLCJfcHJvcFR5cGVzIiwiX3JlYWN0UmVkdXgiLCJfdmlld0FzUmVkdXgiLCJfZm9udENvbnN0YW50cyIsIl9maXJlaG9zZSIsIl9sb2NhbGUiLCJfQnV0dG9uIiwiX0ZvY3VzQXJlYUluZGljYXRvciIsIl9wcm9ncmVzc0hlbHBlcnMiLCJfUHJvZ3Jlc3NMZXNzb25Db250ZW50IiwiX1Byb2dyZXNzTGVzc29uVGVhY2hlckluZm8iLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInB1c2giLCJfb2JqZWN0U3ByZWFkIiwiZm9yRWFjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiUHJvZ3Jlc3NMZXNzb24iLCJfdGhpcyIsInNldFN0YXRlIiwiY29sbGFwc2VkIiwic3RhdGUiLCJmaXJlaG9zZUNsaWVudCIsInB1dFJlY29yZCIsInN0dWR5Iiwic3R1ZHlfZ3JvdXAiLCJldmVudCIsImRhdGFfanNvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJsZXNzb25faWQiLCJzY3JpcHRfaWQiLCJzY3JpcHRJZCIsImluY2x1ZGVVc2VySWQiLCJ2aWV3QXMiLCJWaWV3VHlwZSIsIkluc3RydWN0b3IiLCJjdXJyZW50TGVzc29uSWQiLCJfcHJvdG8iLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIl90aGlzMiIsIl90aGlzJHByb3BzIiwiaXNWaXNpYmxlIiwiaGlkZGVuRm9yU3R1ZGVudHMiLCJpc0xvY2tlZEZvclVzZXIiLCJpc0xvY2tlZEZvckFsbFN0dWRlbnRzIiwic2VsZWN0ZWRTZWN0aW9uSWQiLCJpc1J0bCIsInNob3dBc0xvY2tlZCIsInRpdGxlIiwibGVzc29uTnVtYmVyIiwiaTE4biIsImxlc3Nvbk51bWJlcmVkIiwibGVzc29uTmFtZSIsIm5hbWUiLCJjYXJldFN0eWxlIiwiY2FyZXRSVEwiLCJjYXJldCIsImxvY2tlZFRvb2x0aXBJZCIsIl8iLCJ1bmlxdWVJZCIsImRlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25fdGVhY2hlciIsImRlc2NyaXB0aW9uX3N0dWRlbnQiLCJsZXNzb25VcmwiLCJ1cmwiLCJzaG93Tm90QXV0aG9yaXplZFdhcm5pbmciLCJsb2NrYWJsZSIsImxvY2thYmxlQXV0aG9yaXplZExvYWRlZCIsImxvY2thYmxlQXV0aG9yaXplZCIsIm91dGVyIiwiaGlkZGVuT3JMb2NrZWQiLCJQYXJ0aWNpcGFudCIsInRyYW5zbHVjZW50IiwiaGVhZGluZyIsIm1hcmdpbkJvdHRvbSIsImhlYWRpbmdUZXh0Iiwib25DbGljayIsInRvZ2dsZUNvbGxhcHNlZCIsInRhYkluZGV4Iiwib25LZXlEb3duIiwiaW5jbHVkZXMiLCJwcmV2ZW50RGVmYXVsdCIsImxvY2tTdGF0dXNMb2FkZWQiLCJ1bmxvY2tlZEljb24iLCJ3cmFwcGVyIiwibG9ja0Fzc2Vzc21lbnRMb25nIiwic3R1ZGVudF9sZXNzb25fcGxhbl9odG1sX3VybCIsImJ1dHRvblN0eWxlIiwiX191c2VEZXByZWNhdGVkVGFnIiwibGVzc29uUmVzb3VyY2VzIiwidGFyZ2V0Iiwib25DbGlja1N0dWRlbnRMZXNzb25QbGFuIiwibm90QXV0aG9yaXplZFdhcm5pbmciLCJ1bnZlcmlmaWVkVGVhY2hlckxvY2tXYXJuaW5nIiwibGVhcm5Nb3JlTGluayIsImxlYXJuTW9yZVdpdGhQZXJpb2QiLCJkaXNhYmxlZCIsImlzTWluaVZpZXciLCJpc0ZvY3VzQXJlYSIsImxlc3NvblR5cGUiLCJQcm9wVHlwZXMiLCJhcnJheU9mIiwibGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlIiwibnVtYmVyIiwib25lT2YiLCJ2YWx1ZXMiLCJib29sIiwiYmFja2dyb3VuZCIsImxpZ2h0ZXN0X2dyYXkiLCJib3JkZXJfZ3JheSIsIm1hcmdpblRvcCIsImZvbnRTaXplIiwiZm9udENvbnN0YW50cyIsImFsaWduSXRlbXMiLCJjdXJzb3IiLCJmbGV4R3JvdyIsIm9wYWNpdHkiLCJvcmFuZ2UiLCJyZWQiLCJjb25uZWN0Iiwib3duUHJvcHMiLCJwcm9ncmVzcyIsImxlc3NvbkxvY2siLCJsZXNzb25Jc1Zpc2libGUiLCJsZXNzb25Jc0xvY2tlZEZvclVzZXIiLCJsZXNzb25Jc0xvY2tlZEZvckFsbFN0dWRlbnRzIiwidGVhY2hlclNlY3Rpb25zIiwidW5pdFByb2dyZXNzSGFzTG9hZGVkIiwibGVzc29uc0J5U2VjdGlvbklkTG9hZGVkIiwiX2ltbXV0YWJsZSIsIl9yZWR1eCIsIl9zaGFyZWRDb25zdGFudHMiLCJmYWtlTGVzc29uIiwidW5kZWZpbmVkIiwibGVzc29uU3RhcnRVcmwiLCJmYWtlTGV2ZWwiLCJvdmVycmlkZXMiLCJsZXZlbE51bWJlciIsInRvU3RyaW5nIiwic3RhdHVzIiwiTGV2ZWxTdGF0dXMiLCJub3RfdHJpZWQiLCJpc0xvY2tlZCIsImJ1YmJsZVRleHQiLCJpc1VucGx1Z2dlZCIsImZha2VMZXZlbHMiLCJmYWtlTGV2ZWxXaXRoU3ViTGV2ZWxzIiwibnVtU3VibGV2ZWxzIiwic3RhcnRMZXZlbCIsInN1YmxldmVscyIsInJhbmdlIiwibnVtTGV2ZWxzIiwiX3JlZiIsIl9yZWYkc3RhcnRMZXZlbCIsIl9yZWYkbmFtZWQiLCJuYW1lZCIsIm92ZXJyaWRlRGF0YSIsImZha2VQcm9ncmVzc0ZvckxldmVscyIsInNlcnZlclByb2dyZXNzT3ZlcnJpZGVzIiwibGV2ZWwiLCJsZXZlbFByb2dyZXNzRnJvbVNlcnZlciIsInJhbmRvbU51bWJlclVwVG8xMDAiLCJjcmVhdGVTdG9yZVdpdGhIaWRkZW5MZXNzb24iLCJsZXNzb25JZCIsImNyZWF0ZVN0b3JlIiwibGVzc29uc0J5U2VjdGlvbklkIiwic2VjdGlvbklkcyIsInNlY3Rpb25zQXJlTG9hZGVkIiwic2VjdGlvbnMiLCJsZXNzb25fZXh0cmFzIiwicGFpcmluZ19hbGxvd2VkIiwic3R1ZGVudENvdW50IiwiY29kZSIsInByb3ZpZGVyTWFuYWdlZCIsInR0c0F1dG9wbGF5RW5hYmxlZCIsImxlc3NvbkV4dHJhcyIsInBhaXJpbmdBbGxvd2VkIiwiaGlkZGVuTGVzc29uIiwiSW1tdXRhYmxlIiwiZnJvbUpTIiwibGVzc29uc0J5U2VjdGlvbiIsInNjcmlwdE5hbWUiLCJjdXJyZW50VXNlciIsInVzZXJJZCIsImNyZWF0ZVN0b3JlV2l0aExvY2tlZExlc3NvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImZha2VMZXNzb25XaXRoTGV2ZWxzIiwib3ZlcnJpZGVGaWVsZHMiLCJsZXZlbENvdW50IiwicmVsYXRpdmVfcG9zaXRpb24iLCJmYWtlU3R1ZGVudHMiLCJBcnJheSIsImZpbGwiLCJmYW1pbHlOYW1lIiwiZmFrZVVuaXREYXRhIiwiY3NmIiwiaXNDc2QiLCJpc0NzcCIsImZha2VTdHVkZW50TGV2ZWxQcm9ncmVzcyIsInN0dWRlbnRzIiwicHJvZ3Jlc3NPbkxlc3NvbnMiLCJzdHVkZW50UHJvZ3Jlc3MiLCJzdHVkZW50IiwiZmFrZVN0dWRlbnRMYXN0VXBkYXRlIiwic3R1ZGVudExhc3RVcGRhdGUiLCJEYXRlIiwibm93IiwiZmFrZVN0dWRlbnRMYXN0VXBkYXRlQnlTY3JpcHQiLCJzY3JpcHREYXRhIiwiZmFrZVByb2dyZXNzVGFibGVSZWR1eEluaXRpYWxTdGF0ZSIsImxldmVsUHJvZ3Jlc3NEYXRhIiwic2VjdGlvbklkIiwiaXNTb3J0ZWRCeUZhbWlseU5hbWUiLCJsZXNzb25Hcm91cHMiLCJmb2N1c0FyZWFMZXNzb25JZHMiLCJkZWVwZXJMZWFybmluZ0NvdXJzZSIsInNlbGVjdGVkU3R1ZGVudHMiLCJzZWN0aW9uUHJvZ3Jlc3MiLCJ1bml0RGF0YUJ5VW5pdCIsInN0dWRlbnRMZXZlbFByb2dyZXNzQnlVbml0Iiwic3R1ZGVudExlc3NvblByb2dyZXNzQnlVbml0IiwibGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uIiwic3R1ZGVudExhc3RVcGRhdGVCeVVuaXQiLCJsZXNzb25PZkludGVyZXN0IiwidW5pdFNlbGVjdGlvbiIsImxvY2FsZXMiLCJsb2NhbGVDb2RlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFyZ1R5cGUiLCJpc0FycmF5IiwiaW5uZXIiLCJqb2luIiwiZGVmYXVsdCIsIl9EZXRhaWxQcm9ncmVzc1RhYmxlIiwiX3Byb2dyZXNzVGVzdEhlbHBlcnMiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJjb21wb25lbnQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsImZyb20iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJuIiwic2xpY2UiLCJ0ZXN0IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwicHJvZ3Jlc3Npb24iLCJUZW1wbGF0ZSIsInN0b3JlIiwiUHJvdmlkZXIiLCJhcmdzIl0sInNvdXJjZVJvb3QiOiIifQ==