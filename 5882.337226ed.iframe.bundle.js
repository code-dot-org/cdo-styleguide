(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5882],{"./node_modules/path-to-regexp/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isarray=__webpack_require__("./node_modules/path-to-regexp/node_modules/isarray/index.js");module.exports=pathToRegexp,module.exports.parse=parse,module.exports.compile=function compile(str,options){return tokensToFunction(parse(str,options),options)},module.exports.tokensToFunction=tokensToFunction,module.exports.tokensToRegExp=tokensToRegExp;var PATH_REGEXP=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function parse(str,options){for(var res,tokens=[],key=0,index=0,path="",defaultDelimiter=options&&options.delimiter||"/";null!=(res=PATH_REGEXP.exec(str));){var m=res[0],escaped=res[1],offset=res.index;if(path+=str.slice(index,offset),index=offset+m.length,escaped)path+=escaped[1];else{var next=str[index],prefix=res[2],name=res[3],capture=res[4],group=res[5],modifier=res[6],asterisk=res[7];path&&(tokens.push(path),path="");var partial=null!=prefix&&null!=next&&next!==prefix,repeat="+"===modifier||"*"===modifier,optional="?"===modifier||"*"===modifier,delimiter=res[2]||defaultDelimiter,pattern=capture||group;tokens.push({name:name||key++,prefix:prefix||"",delimiter,optional,repeat,partial,asterisk:!!asterisk,pattern:pattern?escapeGroup(pattern):asterisk?".*":"[^"+escapeString(delimiter)+"]+?"})}}return index<str.length&&(path+=str.substr(index)),path&&tokens.push(path),tokens}function encodeURIComponentPretty(str){return encodeURI(str).replace(/[\/?#]/g,(function(c){return"%"+c.charCodeAt(0).toString(16).toUpperCase()}))}function tokensToFunction(tokens,options){for(var matches=new Array(tokens.length),i=0;i<tokens.length;i++)"object"==typeof tokens[i]&&(matches[i]=new RegExp("^(?:"+tokens[i].pattern+")$",flags(options)));return function(obj,opts){for(var path="",data=obj||{},encode=(opts||{}).pretty?encodeURIComponentPretty:encodeURIComponent,i=0;i<tokens.length;i++){var token=tokens[i];if("string"!=typeof token){var segment,value=data[token.name];if(null==value){if(token.optional){token.partial&&(path+=token.prefix);continue}throw new TypeError('Expected "'+token.name+'" to be defined')}if(isarray(value)){if(!token.repeat)throw new TypeError('Expected "'+token.name+'" to not repeat, but received `'+JSON.stringify(value)+"`");if(0===value.length){if(token.optional)continue;throw new TypeError('Expected "'+token.name+'" to not be empty')}for(var j=0;j<value.length;j++){if(segment=encode(value[j]),!matches[i].test(segment))throw new TypeError('Expected all "'+token.name+'" to match "'+token.pattern+'", but received `'+JSON.stringify(segment)+"`");path+=(0===j?token.prefix:token.delimiter)+segment}}else{if(segment=token.asterisk?encodeURI(value).replace(/[?#]/g,(function(c){return"%"+c.charCodeAt(0).toString(16).toUpperCase()})):encode(value),!matches[i].test(segment))throw new TypeError('Expected "'+token.name+'" to match "'+token.pattern+'", but received "'+segment+'"');path+=token.prefix+segment}}else path+=token}return path}}function escapeString(str){return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function escapeGroup(group){return group.replace(/([=!:$\/()])/g,"\\$1")}function attachKeys(re,keys){return re.keys=keys,re}function flags(options){return options&&options.sensitive?"":"i"}function tokensToRegExp(tokens,keys,options){isarray(keys)||(options=keys||options,keys=[]);for(var strict=(options=options||{}).strict,end=!1!==options.end,route="",i=0;i<tokens.length;i++){var token=tokens[i];if("string"==typeof token)route+=escapeString(token);else{var prefix=escapeString(token.prefix),capture="(?:"+token.pattern+")";keys.push(token),token.repeat&&(capture+="(?:"+prefix+capture+")*"),route+=capture=token.optional?token.partial?prefix+"("+capture+")?":"(?:"+prefix+"("+capture+"))?":prefix+"("+capture+")"}}var delimiter=escapeString(options.delimiter||"/"),endsWithDelimiter=route.slice(-delimiter.length)===delimiter;return strict||(route=(endsWithDelimiter?route.slice(0,-delimiter.length):route)+"(?:"+delimiter+"(?=$))?"),route+=end?"$":strict&&endsWithDelimiter?"":"(?="+delimiter+"|$)",attachKeys(new RegExp("^"+route,flags(options)),keys)}function pathToRegexp(path,keys,options){return isarray(keys)||(options=keys||options,keys=[]),options=options||{},path instanceof RegExp?function regexpToRegexp(path,keys){var groups=path.source.match(/\((?!\?)/g);if(groups)for(var i=0;i<groups.length;i++)keys.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return attachKeys(path,keys)}(path,keys):isarray(path)?function arrayToRegexp(path,keys,options){for(var parts=[],i=0;i<path.length;i++)parts.push(pathToRegexp(path[i],keys,options).source);return attachKeys(new RegExp("(?:"+parts.join("|")+")",flags(options)),keys)}(path,keys,options):function stringToRegexp(path,keys,options){return tokensToRegExp(parse(path,options),keys,options)}(path,keys,options)}},"./node_modules/path-to-regexp/node_modules/isarray/index.js":module=>{module.exports=Array.isArray||function(arr){return"[object Array]"==Object.prototype.toString.call(arr)}},"./node_modules/react-router-dom/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BrowserRouter:()=>es_BrowserRouter,HashRouter:()=>es_HashRouter,Link:()=>es_Link,MemoryRouter:()=>react_router_dom_es_MemoryRouter,NavLink:()=>es_NavLink,Prompt:()=>react_router_dom_es_Prompt,Redirect:()=>react_router_dom_es_Redirect,Route:()=>react_router_dom_es_Route,Router:()=>react_router_dom_es_Router,StaticRouter:()=>react_router_dom_es_StaticRouter,Switch:()=>react_router_dom_es_Switch,generatePath:()=>react_router_dom_es_generatePath,matchPath:()=>react_router_dom_es_matchPath,withRouter:()=>react_router_dom_es_withRouter});var warning=__webpack_require__("./node_modules/react-router-dom/node_modules/warning/warning.js"),warning_default=__webpack_require__.n(warning),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),browser=__webpack_require__("./node_modules/react-router-dom/node_modules/history/node_modules/warning/browser.js"),browser_default=__webpack_require__.n(browser),invariant_browser=__webpack_require__("./node_modules/invariant/browser.js"),invariant_browser_default=__webpack_require__.n(invariant_browser);function isAbsolute(pathname){return"/"===pathname.charAt(0)}function spliceOne(list,index){for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1)list[i]=list[k];list.pop()}const resolve_pathname=function resolvePathname(to){var from=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",toParts=to&&to.split("/")||[],fromParts=from&&from.split("/")||[],isToAbs=to&&isAbsolute(to),isFromAbs=from&&isAbsolute(from),mustEndAbs=isToAbs||isFromAbs;if(to&&isAbsolute(to)?fromParts=toParts:toParts.length&&(fromParts.pop(),fromParts=fromParts.concat(toParts)),!fromParts.length)return"/";var hasTrailingSlash=void 0;if(fromParts.length){var last=fromParts[fromParts.length-1];hasTrailingSlash="."===last||".."===last||""===last}else hasTrailingSlash=!1;for(var up=0,i=fromParts.length;i>=0;i--){var part=fromParts[i];"."===part?spliceOne(fromParts,i):".."===part?(spliceOne(fromParts,i),up++):up&&(spliceOne(fromParts,i),up--)}if(!mustEndAbs)for(;up--;up)fromParts.unshift("..");!mustEndAbs||""===fromParts[0]||fromParts[0]&&isAbsolute(fromParts[0])||fromParts.unshift("");var result=fromParts.join("/");return hasTrailingSlash&&"/"!==result.substr(-1)&&(result+="/"),result};var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};const value_equal=function valueEqual(a,b){if(a===b)return!0;if(null==a||null==b)return!1;if(Array.isArray(a))return Array.isArray(b)&&a.length===b.length&&a.every((function(item,index){return valueEqual(item,b[index])}));var aType=void 0===a?"undefined":_typeof(a);if(aType!==(void 0===b?"undefined":_typeof(b)))return!1;if("object"===aType){var aValue=a.valueOf(),bValue=b.valueOf();if(aValue!==a||bValue!==b)return valueEqual(aValue,bValue);var aKeys=Object.keys(a),bKeys=Object.keys(b);return aKeys.length===bKeys.length&&aKeys.every((function(key){return valueEqual(a[key],b[key])}))}return!1};var addLeadingSlash=function addLeadingSlash(path){return"/"===path.charAt(0)?path:"/"+path},stripLeadingSlash=function stripLeadingSlash(path){return"/"===path.charAt(0)?path.substr(1):path},hasBasename=function hasBasename(path,prefix){return new RegExp("^"+prefix+"(\\/|\\?|#|$)","i").test(path)},stripBasename=function stripBasename(path,prefix){return hasBasename(path,prefix)?path.substr(prefix.length):path},stripTrailingSlash=function stripTrailingSlash(path){return"/"===path.charAt(path.length-1)?path.slice(0,-1):path},createPath=function createPath(location){var pathname=location.pathname,search=location.search,hash=location.hash,path=pathname||"/";return search&&"?"!==search&&(path+="?"===search.charAt(0)?search:"?"+search),hash&&"#"!==hash&&(path+="#"===hash.charAt(0)?hash:"#"+hash),path},_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},createLocation=function createLocation(path,state,key,currentLocation){var location=void 0;"string"==typeof path?(location=function parsePath(path){var pathname=path||"/",search="",hash="",hashIndex=pathname.indexOf("#");-1!==hashIndex&&(hash=pathname.substr(hashIndex),pathname=pathname.substr(0,hashIndex));var searchIndex=pathname.indexOf("?");return-1!==searchIndex&&(search=pathname.substr(searchIndex),pathname=pathname.substr(0,searchIndex)),{pathname,search:"?"===search?"":search,hash:"#"===hash?"":hash}}(path),location.state=state):(void 0===(location=_extends({},path)).pathname&&(location.pathname=""),location.search?"?"!==location.search.charAt(0)&&(location.search="?"+location.search):location.search="",location.hash?"#"!==location.hash.charAt(0)&&(location.hash="#"+location.hash):location.hash="",void 0!==state&&void 0===location.state&&(location.state=state));try{location.pathname=decodeURI(location.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+location.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return key&&(location.key=key),currentLocation?location.pathname?"/"!==location.pathname.charAt(0)&&(location.pathname=resolve_pathname(location.pathname,currentLocation.pathname)):location.pathname=currentLocation.pathname:location.pathname||(location.pathname="/"),location},locationsAreEqual=function locationsAreEqual(a,b){return a.pathname===b.pathname&&a.search===b.search&&a.hash===b.hash&&a.key===b.key&&value_equal(a.state,b.state)};const es_createTransitionManager=function createTransitionManager(){var prompt=null,listeners=[];return{setPrompt:function setPrompt(nextPrompt){return browser_default()(null==prompt,"A history supports only one prompt at a time"),prompt=nextPrompt,function(){prompt===nextPrompt&&(prompt=null)}},confirmTransitionTo:function confirmTransitionTo(location,action,getUserConfirmation,callback){if(null!=prompt){var result="function"==typeof prompt?prompt(location,action):prompt;"string"==typeof result?"function"==typeof getUserConfirmation?getUserConfirmation(result,callback):(browser_default()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),callback(!0)):callback(!1!==result)}else callback(!0)},appendListener:function appendListener(fn){var isActive=!0,listener=function listener(){isActive&&fn.apply(void 0,arguments)};return listeners.push(listener),function(){isActive=!1,listeners=listeners.filter((function(item){return item!==listener}))}},notifyListeners:function notifyListeners(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];listeners.forEach((function(listener){return listener.apply(void 0,args)}))}}};var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),addEventListener=function addEventListener(node,event,listener){return node.addEventListener?node.addEventListener(event,listener,!1):node.attachEvent("on"+event,listener)},removeEventListener=function removeEventListener(node,event,listener){return node.removeEventListener?node.removeEventListener(event,listener,!1):node.detachEvent("on"+event,listener)},getConfirmation=function getConfirmation(message,callback){return callback(window.confirm(message))},createBrowserHistory_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},createBrowserHistory_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},getHistoryState=function getHistoryState(){try{return window.history.state||{}}catch(e){return{}}};const es_createBrowserHistory=function createBrowserHistory(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};invariant_browser_default()(canUseDOM,"Browser history needs a DOM");var globalHistory=window.history,canUseHistory=function supportsHistory(){var ua=window.navigator.userAgent;return(-1===ua.indexOf("Android 2.")&&-1===ua.indexOf("Android 4.0")||-1===ua.indexOf("Mobile Safari")||-1!==ua.indexOf("Chrome")||-1!==ua.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),needsHashChangeListener=!function supportsPopStateOnHashChange(){return-1===window.navigator.userAgent.indexOf("Trident")}(),_props$forceRefresh=props.forceRefresh,forceRefresh=void 0!==_props$forceRefresh&&_props$forceRefresh,_props$getUserConfirm=props.getUserConfirmation,getUserConfirmation=void 0===_props$getUserConfirm?getConfirmation:_props$getUserConfirm,_props$keyLength=props.keyLength,keyLength=void 0===_props$keyLength?6:_props$keyLength,basename=props.basename?stripTrailingSlash(addLeadingSlash(props.basename)):"",getDOMLocation=function getDOMLocation(historyState){var _ref=historyState||{},key=_ref.key,state=_ref.state,_window$location=window.location,path=_window$location.pathname+_window$location.search+_window$location.hash;return browser_default()(!basename||hasBasename(path,basename),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+path+'" to begin with "'+basename+'".'),basename&&(path=stripBasename(path,basename)),createLocation(path,state,key)},createKey=function createKey(){return Math.random().toString(36).substr(2,keyLength)},transitionManager=es_createTransitionManager(),setState=function setState(nextState){createBrowserHistory_extends(history,nextState),history.length=globalHistory.length,transitionManager.notifyListeners(history.location,history.action)},handlePopState=function handlePopState(event){(function isExtraneousPopstateEvent(event){return void 0===event.state&&-1===navigator.userAgent.indexOf("CriOS")})(event)||handlePop(getDOMLocation(event.state))},handleHashChange=function handleHashChange(){handlePop(getDOMLocation(getHistoryState()))},forceNextPop=!1,handlePop=function handlePop(location){if(forceNextPop)forceNextPop=!1,setState();else{transitionManager.confirmTransitionTo(location,"POP",getUserConfirmation,(function(ok){ok?setState({action:"POP",location}):revertPop(location)}))}},revertPop=function revertPop(fromLocation){var toLocation=history.location,toIndex=allKeys.indexOf(toLocation.key);-1===toIndex&&(toIndex=0);var fromIndex=allKeys.indexOf(fromLocation.key);-1===fromIndex&&(fromIndex=0);var delta=toIndex-fromIndex;delta&&(forceNextPop=!0,go(delta))},initialLocation=getDOMLocation(getHistoryState()),allKeys=[initialLocation.key],createHref=function createHref(location){return basename+createPath(location)},go=function go(n){globalHistory.go(n)},listenerCount=0,checkDOMListeners=function checkDOMListeners(delta){1===(listenerCount+=delta)?(addEventListener(window,"popstate",handlePopState),needsHashChangeListener&&addEventListener(window,"hashchange",handleHashChange)):0===listenerCount&&(removeEventListener(window,"popstate",handlePopState),needsHashChangeListener&&removeEventListener(window,"hashchange",handleHashChange))},isBlocked=!1,history={length:globalHistory.length,action:"POP",location:initialLocation,createHref,push:function push(path,state){browser_default()(!("object"===(void 0===path?"undefined":createBrowserHistory_typeof(path))&&void 0!==path.state&&void 0!==state),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,"PUSH",getUserConfirmation,(function(ok){if(ok){var href=createHref(location),key=location.key,state=location.state;if(canUseHistory)if(globalHistory.pushState({key,state},null,href),forceRefresh)window.location.href=href;else{var prevIndex=allKeys.indexOf(history.location.key),nextKeys=allKeys.slice(0,-1===prevIndex?0:prevIndex+1);nextKeys.push(location.key),allKeys=nextKeys,setState({action:"PUSH",location})}else browser_default()(void 0===state,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=href}}))},replace:function replace(path,state){browser_default()(!("object"===(void 0===path?"undefined":createBrowserHistory_typeof(path))&&void 0!==path.state&&void 0!==state),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,"REPLACE",getUserConfirmation,(function(ok){if(ok){var href=createHref(location),key=location.key,state=location.state;if(canUseHistory)if(globalHistory.replaceState({key,state},null,href),forceRefresh)window.location.replace(href);else{var prevIndex=allKeys.indexOf(history.location.key);-1!==prevIndex&&(allKeys[prevIndex]=location.key),setState({action:"REPLACE",location})}else browser_default()(void 0===state,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(href)}}))},go,goBack:function goBack(){return go(-1)},goForward:function goForward(){return go(1)},block:function block(){var prompt=arguments.length>0&&void 0!==arguments[0]&&arguments[0],unblock=transitionManager.setPrompt(prompt);return isBlocked||(checkDOMListeners(1),isBlocked=!0),function(){return isBlocked&&(isBlocked=!1,checkDOMListeners(-1)),unblock()}},listen:function listen(listener){var unlisten=transitionManager.appendListener(listener);return checkDOMListeners(1),function(){checkDOMListeners(-1),unlisten()}}};return history};var createHashHistory_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},HashPathCoders={hashbang:{encodePath:function encodePath(path){return"!"===path.charAt(0)?path:"!/"+stripLeadingSlash(path)},decodePath:function decodePath(path){return"!"===path.charAt(0)?path.substr(1):path}},noslash:{encodePath:stripLeadingSlash,decodePath:addLeadingSlash},slash:{encodePath:addLeadingSlash,decodePath:addLeadingSlash}},getHashPath=function getHashPath(){var href=window.location.href,hashIndex=href.indexOf("#");return-1===hashIndex?"":href.substring(hashIndex+1)},replaceHashPath=function replaceHashPath(path){var hashIndex=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,hashIndex>=0?hashIndex:0)+"#"+path)};const es_createHashHistory=function createHashHistory(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};invariant_browser_default()(canUseDOM,"Hash history needs a DOM");var globalHistory=window.history,canGoWithoutReload=function supportsGoWithoutReloadUsingHash(){return-1===window.navigator.userAgent.indexOf("Firefox")}(),_props$getUserConfirm=props.getUserConfirmation,getUserConfirmation=void 0===_props$getUserConfirm?getConfirmation:_props$getUserConfirm,_props$hashType=props.hashType,hashType=void 0===_props$hashType?"slash":_props$hashType,basename=props.basename?stripTrailingSlash(addLeadingSlash(props.basename)):"",_HashPathCoders$hashT=HashPathCoders[hashType],encodePath=_HashPathCoders$hashT.encodePath,decodePath=_HashPathCoders$hashT.decodePath,getDOMLocation=function getDOMLocation(){var path=decodePath(getHashPath());return browser_default()(!basename||hasBasename(path,basename),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+path+'" to begin with "'+basename+'".'),basename&&(path=stripBasename(path,basename)),createLocation(path)},transitionManager=es_createTransitionManager(),setState=function setState(nextState){createHashHistory_extends(history,nextState),history.length=globalHistory.length,transitionManager.notifyListeners(history.location,history.action)},forceNextPop=!1,ignorePath=null,handleHashChange=function handleHashChange(){var path=getHashPath(),encodedPath=encodePath(path);if(path!==encodedPath)replaceHashPath(encodedPath);else{var location=getDOMLocation(),prevLocation=history.location;if(!forceNextPop&&locationsAreEqual(prevLocation,location))return;if(ignorePath===createPath(location))return;ignorePath=null,handlePop(location)}},handlePop=function handlePop(location){if(forceNextPop)forceNextPop=!1,setState();else{transitionManager.confirmTransitionTo(location,"POP",getUserConfirmation,(function(ok){ok?setState({action:"POP",location}):revertPop(location)}))}},revertPop=function revertPop(fromLocation){var toLocation=history.location,toIndex=allPaths.lastIndexOf(createPath(toLocation));-1===toIndex&&(toIndex=0);var fromIndex=allPaths.lastIndexOf(createPath(fromLocation));-1===fromIndex&&(fromIndex=0);var delta=toIndex-fromIndex;delta&&(forceNextPop=!0,go(delta))},path=getHashPath(),encodedPath=encodePath(path);path!==encodedPath&&replaceHashPath(encodedPath);var initialLocation=getDOMLocation(),allPaths=[createPath(initialLocation)],go=function go(n){browser_default()(canGoWithoutReload,"Hash history go(n) causes a full page reload in this browser"),globalHistory.go(n)},listenerCount=0,checkDOMListeners=function checkDOMListeners(delta){1===(listenerCount+=delta)?addEventListener(window,"hashchange",handleHashChange):0===listenerCount&&removeEventListener(window,"hashchange",handleHashChange)},isBlocked=!1,history={length:globalHistory.length,action:"POP",location:initialLocation,createHref:function createHref(location){return"#"+encodePath(basename+createPath(location))},push:function push(path,state){browser_default()(void 0===state,"Hash history cannot push state; it is ignored");var location=createLocation(path,void 0,void 0,history.location);transitionManager.confirmTransitionTo(location,"PUSH",getUserConfirmation,(function(ok){if(ok){var path=createPath(location),encodedPath=encodePath(basename+path);if(getHashPath()!==encodedPath){ignorePath=path,function pushHashPath(path){window.location.hash=path}(encodedPath);var prevIndex=allPaths.lastIndexOf(createPath(history.location)),nextPaths=allPaths.slice(0,-1===prevIndex?0:prevIndex+1);nextPaths.push(path),allPaths=nextPaths,setState({action:"PUSH",location})}else browser_default()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),setState()}}))},replace:function replace(path,state){browser_default()(void 0===state,"Hash history cannot replace state; it is ignored");var location=createLocation(path,void 0,void 0,history.location);transitionManager.confirmTransitionTo(location,"REPLACE",getUserConfirmation,(function(ok){if(ok){var path=createPath(location),encodedPath=encodePath(basename+path);getHashPath()!==encodedPath&&(ignorePath=path,replaceHashPath(encodedPath));var prevIndex=allPaths.indexOf(createPath(history.location));-1!==prevIndex&&(allPaths[prevIndex]=path),setState({action:"REPLACE",location})}}))},go,goBack:function goBack(){return go(-1)},goForward:function goForward(){return go(1)},block:function block(){var prompt=arguments.length>0&&void 0!==arguments[0]&&arguments[0],unblock=transitionManager.setPrompt(prompt);return isBlocked||(checkDOMListeners(1),isBlocked=!0),function(){return isBlocked&&(isBlocked=!1,checkDOMListeners(-1)),unblock()}},listen:function listen(listener){var unlisten=transitionManager.appendListener(listener);return checkDOMListeners(1),function(){checkDOMListeners(-1),unlisten()}}};return history};var createMemoryHistory_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},createMemoryHistory_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},clamp=function clamp(n,lowerBound,upperBound){return Math.min(Math.max(n,lowerBound),upperBound)};const es_createMemoryHistory=function createMemoryHistory(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},getUserConfirmation=props.getUserConfirmation,_props$initialEntries=props.initialEntries,initialEntries=void 0===_props$initialEntries?["/"]:_props$initialEntries,_props$initialIndex=props.initialIndex,initialIndex=void 0===_props$initialIndex?0:_props$initialIndex,_props$keyLength=props.keyLength,keyLength=void 0===_props$keyLength?6:_props$keyLength,transitionManager=es_createTransitionManager(),setState=function setState(nextState){createMemoryHistory_extends(history,nextState),history.length=history.entries.length,transitionManager.notifyListeners(history.location,history.action)},createKey=function createKey(){return Math.random().toString(36).substr(2,keyLength)},index=clamp(initialIndex,0,initialEntries.length-1),entries=initialEntries.map((function(entry){return createLocation(entry,void 0,"string"==typeof entry?createKey():entry.key||createKey())})),createHref=createPath,go=function go(n){var nextIndex=clamp(history.index+n,0,history.entries.length-1),location=history.entries[nextIndex];transitionManager.confirmTransitionTo(location,"POP",getUserConfirmation,(function(ok){ok?setState({action:"POP",location,index:nextIndex}):setState()}))},history={length:entries.length,action:"POP",location:entries[index],index,entries,createHref,push:function push(path,state){browser_default()(!("object"===(void 0===path?"undefined":createMemoryHistory_typeof(path))&&void 0!==path.state&&void 0!==state),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,"PUSH",getUserConfirmation,(function(ok){if(ok){var nextIndex=history.index+1,nextEntries=history.entries.slice(0);nextEntries.length>nextIndex?nextEntries.splice(nextIndex,nextEntries.length-nextIndex,location):nextEntries.push(location),setState({action:"PUSH",location,index:nextIndex,entries:nextEntries})}}))},replace:function replace(path,state){browser_default()(!("object"===(void 0===path?"undefined":createMemoryHistory_typeof(path))&&void 0!==path.state&&void 0!==state),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,"REPLACE",getUserConfirmation,(function(ok){ok&&(history.entries[history.index]=location,setState({action:"REPLACE",location}))}))},go,goBack:function goBack(){return go(-1)},goForward:function goForward(){return go(1)},canGo:function canGo(n){var nextIndex=history.index+n;return nextIndex>=0&&nextIndex<history.entries.length},block:function block(){var prompt=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return transitionManager.setPrompt(prompt)},listen:function listen(listener){return transitionManager.appendListener(listener)}};return history};var Router_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var Router=function(_React$Component){function Router(){var _temp,_this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Router);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.state={match:_this.computeMatch(_this.props.history.location.pathname)},_possibleConstructorReturn(_this,_temp)}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Router,_React$Component),Router.prototype.getChildContext=function getChildContext(){return{router:Router_extends({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},Router.prototype.computeMatch=function computeMatch(pathname){return{path:"/",url:"/",params:{},isExact:"/"===pathname}},Router.prototype.componentWillMount=function componentWillMount(){var _this2=this,_props=this.props,children=_props.children,history=_props.history;invariant_browser_default()(null==children||1===react.Children.count(children),"A <Router> may have only one child element"),this.unlisten=history.listen((function(){_this2.setState({match:_this2.computeMatch(history.location.pathname)})}))},Router.prototype.componentWillReceiveProps=function componentWillReceiveProps(nextProps){warning_default()(this.props.history===nextProps.history,"You cannot change <Router history>")},Router.prototype.componentWillUnmount=function componentWillUnmount(){this.unlisten()},Router.prototype.render=function render(){var children=this.props.children;return children?react.Children.only(children):null},Router}(react.Component);Router.propTypes={history:prop_types_default().object.isRequired,children:prop_types_default().node},Router.contextTypes={router:prop_types_default().object},Router.childContextTypes={router:prop_types_default().object.isRequired};const es_Router=Router,react_router_dom_es_Router=es_Router;function BrowserRouter_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var BrowserRouter=function(_React$Component){function BrowserRouter(){var _temp,_this;!function BrowserRouter_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,BrowserRouter);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=BrowserRouter_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.history=es_createBrowserHistory(_this.props),BrowserRouter_possibleConstructorReturn(_this,_temp)}return function BrowserRouter_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(BrowserRouter,_React$Component),BrowserRouter.prototype.componentWillMount=function componentWillMount(){warning_default()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},BrowserRouter.prototype.render=function render(){return react.createElement(react_router_dom_es_Router,{history:this.history,children:this.props.children})},BrowserRouter}(react.Component);BrowserRouter.propTypes={basename:prop_types_default().string,forceRefresh:prop_types_default().bool,getUserConfirmation:prop_types_default().func,keyLength:prop_types_default().number,children:prop_types_default().node};const es_BrowserRouter=BrowserRouter;function HashRouter_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var HashRouter=function(_React$Component){function HashRouter(){var _temp,_this;!function HashRouter_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,HashRouter);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=HashRouter_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.history=es_createHashHistory(_this.props),HashRouter_possibleConstructorReturn(_this,_temp)}return function HashRouter_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(HashRouter,_React$Component),HashRouter.prototype.componentWillMount=function componentWillMount(){warning_default()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},HashRouter.prototype.render=function render(){return react.createElement(react_router_dom_es_Router,{history:this.history,children:this.props.children})},HashRouter}(react.Component);HashRouter.propTypes={basename:prop_types_default().string,getUserConfirmation:prop_types_default().func,hashType:prop_types_default().oneOf(["hashbang","noslash","slash"]),children:prop_types_default().node};const es_HashRouter=HashRouter;var Link_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};function Link_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var Link=function(_React$Component){function Link(){var _temp,_this;!function Link_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Link);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=Link_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.handleClick=function(event){if(_this.props.onClick&&_this.props.onClick(event),!event.defaultPrevented&&0===event.button&&!_this.props.target&&!function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey)}(event)){event.preventDefault();var history=_this.context.router.history,_this$props=_this.props,replace=_this$props.replace,to=_this$props.to;replace?history.replace(to):history.push(to)}},Link_possibleConstructorReturn(_this,_temp)}return function Link_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Link,_React$Component),Link.prototype.render=function render(){var _props=this.props,to=(_props.replace,_props.to),innerRef=_props.innerRef,props=function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props,["replace","to","innerRef"]);invariant_browser_default()(this.context.router,"You should not use <Link> outside a <Router>"),invariant_browser_default()(void 0!==to,'You must specify the "to" property');var history=this.context.router.history,location="string"==typeof to?createLocation(to,null,null,history.location):to,href=history.createHref(location);return react.createElement("a",Link_extends({},props,{onClick:this.handleClick,href,ref:innerRef}))},Link}(react.Component);Link.propTypes={onClick:prop_types_default().func,target:prop_types_default().string,replace:prop_types_default().bool,to:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().object]).isRequired,innerRef:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().func])},Link.defaultProps={replace:!1},Link.contextTypes={router:prop_types_default().shape({history:prop_types_default().shape({push:prop_types_default().func.isRequired,replace:prop_types_default().func.isRequired,createHref:prop_types_default().func.isRequired}).isRequired}).isRequired};const es_Link=Link;function MemoryRouter_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var MemoryRouter=function(_React$Component){function MemoryRouter(){var _temp,_this;!function MemoryRouter_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,MemoryRouter);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=MemoryRouter_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.history=es_createMemoryHistory(_this.props),MemoryRouter_possibleConstructorReturn(_this,_temp)}return function MemoryRouter_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(MemoryRouter,_React$Component),MemoryRouter.prototype.componentWillMount=function componentWillMount(){warning_default()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},MemoryRouter.prototype.render=function render(){return react.createElement(es_Router,{history:this.history,children:this.props.children})},MemoryRouter}(react.Component);MemoryRouter.propTypes={initialEntries:prop_types_default().array,initialIndex:prop_types_default().number,getUserConfirmation:prop_types_default().func,keyLength:prop_types_default().number,children:prop_types_default().node};const react_router_dom_es_MemoryRouter=MemoryRouter;var path_to_regexp=__webpack_require__("./node_modules/path-to-regexp/index.js"),path_to_regexp_default=__webpack_require__.n(path_to_regexp),patternCache={},cacheCount=0;const es_matchPath=function matchPath(pathname){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},parent=arguments[2];"string"==typeof options&&(options={path:options});var _options=options,path=_options.path,_options$exact=_options.exact,exact=void 0!==_options$exact&&_options$exact,_options$strict=_options.strict,strict=void 0!==_options$strict&&_options$strict,_options$sensitive=_options.sensitive;if(null==path)return parent;var _compilePath=function compilePath(pattern,options){var cacheKey=""+options.end+options.strict+options.sensitive,cache=patternCache[cacheKey]||(patternCache[cacheKey]={});if(cache[pattern])return cache[pattern];var keys=[],compiledPattern={re:path_to_regexp_default()(pattern,keys,options),keys};return cacheCount<1e4&&(cache[pattern]=compiledPattern,cacheCount++),compiledPattern}(path,{end:exact,strict,sensitive:void 0!==_options$sensitive&&_options$sensitive}),re=_compilePath.re,keys=_compilePath.keys,match=re.exec(pathname);if(!match)return null;var url=match[0],values=match.slice(1),isExact=pathname===url;return exact&&!isExact?null:{path,url:"/"===path&&""===url?"/":url,isExact,params:keys.reduce((function(memo,key,index){return memo[key.name]=values[index],memo}),{})}};var Route_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};function Route_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var isEmptyChildren=function isEmptyChildren(children){return 0===react.Children.count(children)},Route=function(_React$Component){function Route(){var _temp,_this;!function Route_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Route);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=Route_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.state={match:_this.computeMatch(_this.props,_this.context.router)},Route_possibleConstructorReturn(_this,_temp)}return function Route_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Route,_React$Component),Route.prototype.getChildContext=function getChildContext(){return{router:Route_extends({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},Route.prototype.computeMatch=function computeMatch(_ref,router){var computedMatch=_ref.computedMatch,location=_ref.location,path=_ref.path,strict=_ref.strict,exact=_ref.exact,sensitive=_ref.sensitive;if(computedMatch)return computedMatch;invariant_browser_default()(router,"You should not use <Route> or withRouter() outside a <Router>");var route=router.route,pathname=(location||route.location).pathname;return es_matchPath(pathname,{path,strict,exact,sensitive},route.match)},Route.prototype.componentWillMount=function componentWillMount(){warning_default()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),warning_default()(!(this.props.component&&this.props.children&&!isEmptyChildren(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),warning_default()(!(this.props.render&&this.props.children&&!isEmptyChildren(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},Route.prototype.componentWillReceiveProps=function componentWillReceiveProps(nextProps,nextContext){warning_default()(!(nextProps.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),warning_default()(!(!nextProps.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(nextProps,nextContext.router)})},Route.prototype.render=function render(){var match=this.state.match,_props=this.props,children=_props.children,component=_props.component,render=_props.render,_context$router=this.context.router,history=_context$router.history,route=_context$router.route,staticContext=_context$router.staticContext,props={match,location:this.props.location||route.location,history,staticContext};return component?match?react.createElement(component,props):null:render?match?render(props):null:"function"==typeof children?children(props):children&&!isEmptyChildren(children)?react.Children.only(children):null},Route}(react.Component);Route.propTypes={computedMatch:prop_types_default().object,path:prop_types_default().string,exact:prop_types_default().bool,strict:prop_types_default().bool,sensitive:prop_types_default().bool,component:prop_types_default().func,render:prop_types_default().func,children:prop_types_default().oneOfType([prop_types_default().func,prop_types_default().node]),location:prop_types_default().object},Route.contextTypes={router:prop_types_default().shape({history:prop_types_default().object.isRequired,route:prop_types_default().object.isRequired,staticContext:prop_types_default().object})},Route.childContextTypes={router:prop_types_default().object.isRequired};const es_Route=Route,react_router_dom_es_Route=es_Route;var NavLink_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},NavLink_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};var NavLink=function NavLink(_ref){var to=_ref.to,exact=_ref.exact,strict=_ref.strict,location=_ref.location,activeClassName=_ref.activeClassName,className=_ref.className,activeStyle=_ref.activeStyle,style=_ref.style,getIsActive=_ref.isActive,ariaCurrent=_ref["aria-current"],rest=function NavLink_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_ref,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),path="object"===(void 0===to?"undefined":NavLink_typeof(to))?to.pathname:to,escapedPath=path&&path.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return react.createElement(react_router_dom_es_Route,{path:escapedPath,exact,strict,location,children:function children(_ref2){var location=_ref2.location,match=_ref2.match,isActive=!!(getIsActive?getIsActive(match,location):match);return react.createElement(es_Link,NavLink_extends({to,className:isActive?[className,activeClassName].filter((function(i){return i})).join(" "):className,style:isActive?NavLink_extends({},style,activeStyle):style,"aria-current":isActive&&ariaCurrent||null},rest))}})};NavLink.propTypes={to:es_Link.propTypes.to,exact:prop_types_default().bool,strict:prop_types_default().bool,location:prop_types_default().object,activeClassName:prop_types_default().string,className:prop_types_default().string,activeStyle:prop_types_default().object,style:prop_types_default().object,isActive:prop_types_default().func,"aria-current":prop_types_default().oneOf(["page","step","location","date","time","true"])},NavLink.defaultProps={activeClassName:"active","aria-current":"page"};const es_NavLink=NavLink;var Prompt=function(_React$Component){function Prompt(){return function Prompt_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Prompt),function Prompt_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.apply(this,arguments))}return function Prompt_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Prompt,_React$Component),Prompt.prototype.enable=function enable(message){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(message)},Prompt.prototype.disable=function disable(){this.unblock&&(this.unblock(),this.unblock=null)},Prompt.prototype.componentWillMount=function componentWillMount(){invariant_browser_default()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},Prompt.prototype.componentWillReceiveProps=function componentWillReceiveProps(nextProps){nextProps.when?this.props.when&&this.props.message===nextProps.message||this.enable(nextProps.message):this.disable()},Prompt.prototype.componentWillUnmount=function componentWillUnmount(){this.disable()},Prompt.prototype.render=function render(){return null},Prompt}(react.Component);Prompt.propTypes={when:prop_types_default().bool,message:prop_types_default().oneOfType([prop_types_default().func,prop_types_default().string]).isRequired},Prompt.defaultProps={when:!0},Prompt.contextTypes={router:prop_types_default().shape({history:prop_types_default().shape({block:prop_types_default().func.isRequired}).isRequired}).isRequired};const react_router_dom_es_Prompt=Prompt;var generatePath_patternCache={},generatePath_cacheCount=0;const es_generatePath=function generatePath(){var pattern=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",params=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("/"===pattern)return pattern;var generator=function compileGenerator(pattern){var cacheKey=pattern,cache=generatePath_patternCache[cacheKey]||(generatePath_patternCache[cacheKey]={});if(cache[pattern])return cache[pattern];var compiledGenerator=path_to_regexp_default().compile(pattern);return generatePath_cacheCount<1e4&&(cache[pattern]=compiledGenerator,generatePath_cacheCount++),compiledGenerator}(pattern);return generator(params,{pretty:!0})};var Redirect_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};var Redirect=function(_React$Component){function Redirect(){return function Redirect_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Redirect),function Redirect_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.apply(this,arguments))}return function Redirect_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Redirect,_React$Component),Redirect.prototype.isStatic=function isStatic(){return this.context.router&&this.context.router.staticContext},Redirect.prototype.componentWillMount=function componentWillMount(){invariant_browser_default()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},Redirect.prototype.componentDidMount=function componentDidMount(){this.isStatic()||this.perform()},Redirect.prototype.componentDidUpdate=function componentDidUpdate(prevProps){var prevTo=createLocation(prevProps.to),nextTo=createLocation(this.props.to);locationsAreEqual(prevTo,nextTo)?warning_default()(!1,"You tried to redirect to the same route you're currently on: \""+nextTo.pathname+nextTo.search+'"'):this.perform()},Redirect.prototype.computeTo=function computeTo(_ref){var computedMatch=_ref.computedMatch,to=_ref.to;return computedMatch?"string"==typeof to?es_generatePath(to,computedMatch.params):Redirect_extends({},to,{pathname:es_generatePath(to.pathname,computedMatch.params)}):to},Redirect.prototype.perform=function perform(){var history=this.context.router.history,push=this.props.push,to=this.computeTo(this.props);push?history.push(to):history.replace(to)},Redirect.prototype.render=function render(){return null},Redirect}(react.Component);Redirect.propTypes={computedMatch:prop_types_default().object,push:prop_types_default().bool,from:prop_types_default().string,to:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().object]).isRequired},Redirect.defaultProps={push:!1},Redirect.contextTypes={router:prop_types_default().shape({history:prop_types_default().shape({push:prop_types_default().func.isRequired,replace:prop_types_default().func.isRequired}).isRequired,staticContext:prop_types_default().object}).isRequired};const react_router_dom_es_Redirect=Redirect;var StaticRouter_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};function StaticRouter_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var StaticRouter_addLeadingSlash=function addLeadingSlash(path){return"/"===path.charAt(0)?path:"/"+path},addBasename=function addBasename(basename,location){return basename?StaticRouter_extends({},location,{pathname:StaticRouter_addLeadingSlash(basename)+location.pathname}):location},StaticRouter_stripBasename=function stripBasename(basename,location){if(!basename)return location;var base=StaticRouter_addLeadingSlash(basename);return 0!==location.pathname.indexOf(base)?location:StaticRouter_extends({},location,{pathname:location.pathname.substr(base.length)})},createURL=function createURL(location){return"string"==typeof location?location:createPath(location)},staticHandler=function staticHandler(methodName){return function(){invariant_browser_default()(!1,"You cannot %s with <StaticRouter>",methodName)}},noop=function noop(){},StaticRouter=function(_React$Component){function StaticRouter(){var _temp,_this;!function StaticRouter_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,StaticRouter);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=StaticRouter_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.createHref=function(path){return StaticRouter_addLeadingSlash(_this.props.basename+createURL(path))},_this.handlePush=function(location){var _this$props=_this.props,basename=_this$props.basename,context=_this$props.context;context.action="PUSH",context.location=addBasename(basename,createLocation(location)),context.url=createURL(context.location)},_this.handleReplace=function(location){var _this$props2=_this.props,basename=_this$props2.basename,context=_this$props2.context;context.action="REPLACE",context.location=addBasename(basename,createLocation(location)),context.url=createURL(context.location)},_this.handleListen=function(){return noop},_this.handleBlock=function(){return noop},StaticRouter_possibleConstructorReturn(_this,_temp)}return function StaticRouter_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(StaticRouter,_React$Component),StaticRouter.prototype.getChildContext=function getChildContext(){return{router:{staticContext:this.props.context}}},StaticRouter.prototype.componentWillMount=function componentWillMount(){warning_default()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},StaticRouter.prototype.render=function render(){var _props=this.props,basename=_props.basename,location=(_props.context,_props.location),props=function StaticRouter_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props,["basename","context","location"]),history={createHref:this.createHref,action:"POP",location:StaticRouter_stripBasename(basename,createLocation(location)),push:this.handlePush,replace:this.handleReplace,go:staticHandler("go"),goBack:staticHandler("goBack"),goForward:staticHandler("goForward"),listen:this.handleListen,block:this.handleBlock};return react.createElement(es_Router,StaticRouter_extends({},props,{history}))},StaticRouter}(react.Component);StaticRouter.propTypes={basename:prop_types_default().string,context:prop_types_default().object.isRequired,location:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().object])},StaticRouter.defaultProps={basename:"",location:"/"},StaticRouter.childContextTypes={router:prop_types_default().object.isRequired};const react_router_dom_es_StaticRouter=StaticRouter;var Switch=function(_React$Component){function Switch(){return function Switch_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Switch),function Switch_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.apply(this,arguments))}return function Switch_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Switch,_React$Component),Switch.prototype.componentWillMount=function componentWillMount(){invariant_browser_default()(this.context.router,"You should not use <Switch> outside a <Router>")},Switch.prototype.componentWillReceiveProps=function componentWillReceiveProps(nextProps){warning_default()(!(nextProps.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),warning_default()(!(!nextProps.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},Switch.prototype.render=function render(){var route=this.context.router.route,children=this.props.children,location=this.props.location||route.location,match=void 0,child=void 0;return react.Children.forEach(children,(function(element){if(null==match&&react.isValidElement(element)){var _element$props=element.props,pathProp=_element$props.path,exact=_element$props.exact,strict=_element$props.strict,sensitive=_element$props.sensitive,from=_element$props.from,path=pathProp||from;child=element,match=es_matchPath(location.pathname,{path,exact,strict,sensitive},route.match)}})),match?react.cloneElement(child,{location,computedMatch:match}):null},Switch}(react.Component);Switch.contextTypes={router:prop_types_default().shape({route:prop_types_default().object.isRequired}).isRequired},Switch.propTypes={children:prop_types_default().node,location:prop_types_default().object};const react_router_dom_es_Switch=Switch,react_router_dom_es_generatePath=es_generatePath,react_router_dom_es_matchPath=es_matchPath;var hoist_non_react_statics_cjs=__webpack_require__("./node_modules/react-router-dom/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"),hoist_non_react_statics_cjs_default=__webpack_require__.n(hoist_non_react_statics_cjs),withRouter_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};const react_router_dom_es_withRouter=function withRouter(Component){var C=function C(props){var wrappedComponentRef=props.wrappedComponentRef,remainingProps=function withRouter_objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(props,["wrappedComponentRef"]);return react.createElement(es_Route,{children:function children(routeComponentProps){return react.createElement(Component,withRouter_extends({},remainingProps,routeComponentProps,{ref:wrappedComponentRef}))}})};return C.displayName="withRouter("+(Component.displayName||Component.name)+")",C.WrappedComponent=Component,C.propTypes={wrappedComponentRef:prop_types_default().func},hoist_non_react_statics_cjs_default()(C,Component)}},"./node_modules/react-router-dom/node_modules/history/node_modules/warning/browser.js":module=>{"use strict";module.exports=function(){}},"./node_modules/react-router-dom/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":module=>{"use strict";var REACT_STATICS={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},KNOWN_STATICS={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},defineProperty=Object.defineProperty,getOwnPropertyNames=Object.getOwnPropertyNames,getOwnPropertySymbols=Object.getOwnPropertySymbols,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,getPrototypeOf=Object.getPrototypeOf,objectPrototype=getPrototypeOf&&getPrototypeOf(Object);module.exports=function hoistNonReactStatics(targetComponent,sourceComponent,blacklist){if("string"!=typeof sourceComponent){if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);inheritedComponent&&inheritedComponent!==objectPrototype&&hoistNonReactStatics(targetComponent,inheritedComponent,blacklist)}var keys=getOwnPropertyNames(sourceComponent);getOwnPropertySymbols&&(keys=keys.concat(getOwnPropertySymbols(sourceComponent)));for(var i=0;i<keys.length;++i){var key=keys[i];if(!(REACT_STATICS[key]||KNOWN_STATICS[key]||blacklist&&blacklist[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor)}catch(e){}}}return targetComponent}return targetComponent}},"./node_modules/react-router-dom/node_modules/warning/warning.js":module=>{"use strict";var warning=function(){};module.exports=warning}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,