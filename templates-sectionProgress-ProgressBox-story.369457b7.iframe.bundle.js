(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[7592],{"./src/templates/sectionProgress/ProgressBox.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_defineProperty(exports.default=function(_Component){function ProgressBox(){return _Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBox,_Component),ProgressBox.prototype.render=function render(){var _this$props=this.props,started=_this$props.started,incomplete=_this$props.incomplete,imperfect=_this$props.imperfect,perfect=_this$props.perfect,lessonIsAllAssessment=_this$props.lessonIsAllAssessment,viewed=_this$props.viewed,viewedStyle=_objectSpread(_objectSpread({},styles.filler),{},{backgroundColor:_color.default.neutral_dark20,height:20,width:20}),boxWithBorderStyle=_objectSpread(_objectSpread({},styles.box),{},{borderColor:started?lessonIsAllAssessment?_color.default.level_submitted:_color.default.level_perfect:_color.default.light_gray},this.props.style),perfectLevels=_objectSpread(_objectSpread({},styles.filler),{},{backgroundColor:_color.default.level_perfect,height:perfect,top:20-perfect}),assessmentLevels=_objectSpread(_objectSpread({},styles.filler),{},{backgroundColor:_color.default.level_submitted,height:perfect,top:20-perfect}),incompleteLevels=_objectSpread(_objectSpread({},styles.filler),{},{backgroundColor:_color.default.level_not_tried,height:incomplete}),imperfectLevels=_objectSpread(_objectSpread({},styles.filler),{},{backgroundColor:_color.default.level_passed,height:imperfect}),lessonNumberStyle=_objectSpread(_objectSpread({},styles.lessonNumber),{},{color:perfect?_color.default.white:_color.default.charcoal});return _react.default.createElement("div",{style:boxWithBorderStyle,"data-testid":"progress-box"},this.props.lessonNumber&&_react.default.createElement("div",{style:lessonNumberStyle},this.props.lessonNumber),viewed?_react.default.createElement("div",{style:viewedStyle}):_react.default.createElement(_react.default.Fragment,null,_react.default.createElement("div",{style:incompleteLevels}),_react.default.createElement("div",{style:imperfectLevels}),_react.default.createElement("div",{className:"uitest-perfect-bar",style:lessonIsAllAssessment?assessmentLevels:perfectLevels})))},ProgressBox}(_react.Component),"propTypes",{started:_propTypes.default.bool,incomplete:_propTypes.default.number,imperfect:_propTypes.default.number,perfect:_propTypes.default.number,style:_propTypes.default.object,lessonIsAllAssessment:_propTypes.default.bool,lessonNumber:_propTypes.default.number,viewed:_propTypes.default.bool});var styles={box:{height:20,width:20,borderWidth:1,borderStyle:"solid",boxSizing:"content-box",position:"relative"},filler:{width:20,position:"absolute"},lessonNumber:_objectSpread({position:"absolute",zIndex:2,paddingTop:2,textAlign:"center",width:20},_fontConstants.default["main-font-regular"])};module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/templates/sectionProgress/ProgressBox.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.PerfectOrIncomplete=exports.Perfect=exports.NotStarted=exports.MixedProgress=exports.LessonNumberIncomplete=exports.LessonNumberComplete=exports.Incomplete=exports.ImperfectIncomplete=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ProgressBox=_interopRequireDefault(__webpack_require__("./src/templates/sectionProgress/ProgressBox.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_ProgressBox.default};var Template=function Template(args){return _react.default.createElement(_ProgressBox.default,args)};(exports.NotStarted=Template.bind({})).args={started:!1,incomplete:20,imperfect:0,perfect:0},(exports.Incomplete=Template.bind({})).args={started:!0,incomplete:20,imperfect:0,perfect:0},(exports.ImperfectIncomplete=Template.bind({})).args={started:!0,incomplete:5,imperfect:15,perfect:0},(exports.MixedProgress=Template.bind({})).args={started:!0,incomplete:5,imperfect:5,perfect:10},(exports.PerfectOrIncomplete=Template.bind({})).args={started:!0,incomplete:7,imperfect:0,perfect:13},(exports.Perfect=Template.bind({})).args={started:!0,incomplete:0,imperfect:0,perfect:20},(exports.LessonNumberComplete=Template.bind({})).args={started:!0,incomplete:0,imperfect:0,perfect:20,lessonNumber:88},(exports.LessonNumberIncomplete=Template.bind({})).args={started:!1,incomplete:0,imperfect:0,perfect:0,lessonNumber:1}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,