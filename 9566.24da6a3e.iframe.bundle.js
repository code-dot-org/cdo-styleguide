/*! For license information please see 9566.24da6a3e.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9566],{"./node_modules/@restart/ui/node_modules/warning/warning.js":module=>{"use strict";var warning=function(){};module.exports=warning},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/invariant/browser.js":module=>{"use strict";module.exports=function(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;(error=new Error(format.replace(/%s/g,(function(){return args[argIndex++]})))).name="Invariant Violation"}throw error.framesToPop=1,error}}},"./node_modules/react-bootstrap-2/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Accordion:()=>esm_Accordion,AccordionButton:()=>esm_AccordionButton,AccordionCollapse:()=>esm_AccordionCollapse,AccordionContext:()=>AccordionContext,Alert:()=>esm_Alert,Anchor:()=>react_bootstrap_2_esm_Anchor,Badge:()=>esm_Badge,Breadcrumb:()=>esm_Breadcrumb,BreadcrumbItem:()=>esm_BreadcrumbItem,Button:()=>react_bootstrap_2_esm_Button,ButtonGroup:()=>esm_ButtonGroup,ButtonToolbar:()=>esm_ButtonToolbar,Card:()=>esm_Card,CardGroup:()=>CardGroup,CardImg:()=>esm_CardImg,Carousel:()=>esm_Carousel,CarouselItem:()=>esm_CarouselItem,CloseButton:()=>esm_CloseButton,Col:()=>esm_Col,Collapse:()=>esm_Collapse,Container:()=>esm_Container,Dropdown:()=>react_bootstrap_2_esm_Dropdown,DropdownButton:()=>esm_DropdownButton,Fade:()=>esm_Fade,Figure:()=>esm_Figure,FloatingLabel:()=>esm_FloatingLabel,Form:()=>esm_Form,FormCheck:()=>esm_FormCheck,FormControl:()=>esm_FormControl,FormFloating:()=>FormFloating,FormGroup:()=>esm_FormGroup,FormLabel:()=>esm_FormLabel,FormSelect:()=>esm_FormSelect,FormText:()=>esm_FormText,Image:()=>esm_Image,InputGroup:()=>esm_InputGroup,ListGroup:()=>esm_ListGroup,ListGroupItem:()=>esm_ListGroupItem,Modal:()=>react_bootstrap_2_esm_Modal,ModalBody:()=>ModalBody,ModalDialog:()=>esm_ModalDialog,ModalFooter:()=>ModalFooter,ModalHeader:()=>esm_ModalHeader,ModalTitle:()=>ModalTitle,Nav:()=>react_bootstrap_2_esm_Nav,NavDropdown:()=>esm_NavDropdown,NavItem:()=>react_bootstrap_2_esm_NavItem,NavLink:()=>esm_NavLink,Navbar:()=>esm_Navbar,NavbarBrand:()=>esm_NavbarBrand,Offcanvas:()=>esm_Offcanvas,OffcanvasBody:()=>OffcanvasBody,OffcanvasHeader:()=>esm_OffcanvasHeader,OffcanvasTitle:()=>OffcanvasTitle,Overlay:()=>react_bootstrap_2_esm_Overlay,OverlayTrigger:()=>esm_OverlayTrigger,PageItem:()=>esm_PageItem,Pagination:()=>esm_Pagination,Placeholder:()=>esm_Placeholder,PlaceholderButton:()=>esm_PlaceholderButton,Popover:()=>esm_Popover,PopoverBody:()=>PopoverBody,PopoverHeader:()=>PopoverHeader,ProgressBar:()=>esm_ProgressBar,Ratio:()=>esm_Ratio,Row:()=>esm_Row,SSRProvider:()=>SSRProvider,Spinner:()=>esm_Spinner,SplitButton:()=>esm_SplitButton,Stack:()=>esm_Stack,Tab:()=>esm_Tab,TabContainer:()=>esm_TabContainer,TabContent:()=>TabContent,TabPane:()=>esm_TabPane,Table:()=>esm_Table,Tabs:()=>react_bootstrap_2_esm_Tabs,ThemeProvider:()=>esm_ThemeProvider,Toast:()=>esm_Toast,ToastBody:()=>ToastBody,ToastContainer:()=>esm_ToastContainer,ToastHeader:()=>esm_ToastHeader,ToggleButton:()=>esm_ToggleButton,ToggleButtonGroup:()=>esm_ToggleButtonGroup,Tooltip:()=>esm_Tooltip,useAccordionButton:()=>useAccordionButton});var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react=__webpack_require__("./node_modules/react/index.js"),esm=__webpack_require__("./node_modules/uncontrollable/lib/esm/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const DEFAULT_BREAKPOINTS=["xxl","xl","lg","md","sm","xs"],ThemeContext=react.createContext({prefixes:{},breakpoints:DEFAULT_BREAKPOINTS,minBreakpoint:"xs"}),{Consumer,Provider}=ThemeContext;function useBootstrapPrefix(prefix,defaultPrefix){const{prefixes}=(0,react.useContext)(ThemeContext);return prefix||prefixes[defaultPrefix]||defaultPrefix}function useBootstrapBreakpoints(){const{breakpoints}=(0,react.useContext)(ThemeContext);return breakpoints}function useBootstrapMinBreakpoint(){const{minBreakpoint}=(0,react.useContext)(ThemeContext);return minBreakpoint}function useIsRTL(){const{dir}=(0,react.useContext)(ThemeContext);return"rtl"===dir}const esm_ThemeProvider=function ThemeProvider({prefixes={},breakpoints=DEFAULT_BREAKPOINTS,minBreakpoint="xs",dir,children}){const contextValue=(0,react.useMemo)((()=>({prefixes:{...prefixes},breakpoints,minBreakpoint,dir})),[prefixes,breakpoints,minBreakpoint,dir]);return(0,jsx_runtime.jsx)(Provider,{value:contextValue,children})};function ownerDocument(node){return node&&node.ownerDocument||document}function getComputedStyle_getComputedStyle(node,psuedoElement){return function ownerWindow(node){var doc=ownerDocument(node);return doc&&doc.defaultView||window}(node).getComputedStyle(node,psuedoElement)}var rUpper=/([A-Z])/g;var msPattern=/^ms-/;function hyphenateStyleName(string){return function hyphenate(string){return string.replace(rUpper,"-$1").toLowerCase()}(string).replace(msPattern,"-ms-")}var supportedTransforms=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;const css=function style(node,property){var css="",transforms="";if("string"==typeof property)return node.style.getPropertyValue(hyphenateStyleName(property))||getComputedStyle_getComputedStyle(node).getPropertyValue(hyphenateStyleName(property));Object.keys(property).forEach((function(key){var value=property[key];value||0===value?!function isTransform(value){return!(!value||!supportedTransforms.test(value))}(key)?css+=hyphenateStyleName(key)+": "+value+";":transforms+=key+"("+value+") ":node.style.removeProperty(hyphenateStyleName(key))})),transforms&&(css+="transform: "+transforms+";"),node.style.cssText+=";"+css};function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}__webpack_require__("./node_modules/react-bootstrap-2/node_modules/react-transition-group/node_modules/prop-types/index.js");var react_dom=__webpack_require__("./node_modules/react-dom/index.js");const config_disabled=!1,TransitionGroupContext=react.createContext(null);var ENTERING="entering",Transition=function(_React$Component){function Transition(props,context){var _this;_this=_React$Component.call(this,props,context)||this;var initialStatus,appear=context&&!context.isMounting?props.enter:props.appear;return _this.appearStatus=null,props.in?appear?(initialStatus="exited",_this.appearStatus=ENTERING):initialStatus="entered":initialStatus=props.unmountOnExit||props.mountOnEnter?"unmounted":"exited",_this.state={status:initialStatus},_this.nextCallback=null,_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(Transition,_React$Component),Transition.getDerivedStateFromProps=function getDerivedStateFromProps(_ref,prevState){return _ref.in&&"unmounted"===prevState.status?{status:"exited"}:null};var _proto=Transition.prototype;return _proto.componentDidMount=function componentDidMount(){this.updateStatus(!0,this.appearStatus)},_proto.componentDidUpdate=function componentDidUpdate(prevProps){var nextStatus=null;if(prevProps!==this.props){var status=this.state.status;this.props.in?status!==ENTERING&&"entered"!==status&&(nextStatus=ENTERING):status!==ENTERING&&"entered"!==status||(nextStatus="exiting")}this.updateStatus(!1,nextStatus)},_proto.componentWillUnmount=function componentWillUnmount(){this.cancelNextCallback()},_proto.getTimeouts=function getTimeouts(){var exit,enter,appear,timeout=this.props.timeout;return exit=enter=appear=timeout,null!=timeout&&"number"!=typeof timeout&&(exit=timeout.exit,enter=timeout.enter,appear=void 0!==timeout.appear?timeout.appear:enter),{exit,enter,appear}},_proto.updateStatus=function updateStatus(mounting,nextStatus){if(void 0===mounting&&(mounting=!1),null!==nextStatus)if(this.cancelNextCallback(),nextStatus===ENTERING){if(this.props.unmountOnExit||this.props.mountOnEnter){var node=this.props.nodeRef?this.props.nodeRef.current:react_dom.findDOMNode(this);node&&function forceReflow(node){node.scrollTop}(node)}this.performEnter(mounting)}else this.performExit();else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},_proto.performEnter=function performEnter(mounting){var _this2=this,enter=this.props.enter,appearing=this.context?this.context.isMounting:mounting,_ref2=this.props.nodeRef?[appearing]:[react_dom.findDOMNode(this),appearing],maybeNode=_ref2[0],maybeAppearing=_ref2[1],timeouts=this.getTimeouts(),enterTimeout=appearing?timeouts.appear:timeouts.enter;!mounting&&!enter||config_disabled?this.safeSetState({status:"entered"},(function(){_this2.props.onEntered(maybeNode)})):(this.props.onEnter(maybeNode,maybeAppearing),this.safeSetState({status:ENTERING},(function(){_this2.props.onEntering(maybeNode,maybeAppearing),_this2.onTransitionEnd(enterTimeout,(function(){_this2.safeSetState({status:"entered"},(function(){_this2.props.onEntered(maybeNode,maybeAppearing)}))}))})))},_proto.performExit=function performExit(){var _this3=this,exit=this.props.exit,timeouts=this.getTimeouts(),maybeNode=this.props.nodeRef?void 0:react_dom.findDOMNode(this);exit&&!config_disabled?(this.props.onExit(maybeNode),this.safeSetState({status:"exiting"},(function(){_this3.props.onExiting(maybeNode),_this3.onTransitionEnd(timeouts.exit,(function(){_this3.safeSetState({status:"exited"},(function(){_this3.props.onExited(maybeNode)}))}))}))):this.safeSetState({status:"exited"},(function(){_this3.props.onExited(maybeNode)}))},_proto.cancelNextCallback=function cancelNextCallback(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},_proto.safeSetState=function safeSetState(nextState,callback){callback=this.setNextCallback(callback),this.setState(nextState,callback)},_proto.setNextCallback=function setNextCallback(callback){var _this4=this,active=!0;return this.nextCallback=function(event){active&&(active=!1,_this4.nextCallback=null,callback(event))},this.nextCallback.cancel=function(){active=!1},this.nextCallback},_proto.onTransitionEnd=function onTransitionEnd(timeout,handler){this.setNextCallback(handler);var node=this.props.nodeRef?this.props.nodeRef.current:react_dom.findDOMNode(this),doesNotHaveTimeoutOrListener=null==timeout&&!this.props.addEndListener;if(node&&!doesNotHaveTimeoutOrListener){if(this.props.addEndListener){var _ref3=this.props.nodeRef?[this.nextCallback]:[node,this.nextCallback],maybeNode=_ref3[0],maybeNextCallback=_ref3[1];this.props.addEndListener(maybeNode,maybeNextCallback)}null!=timeout&&setTimeout(this.nextCallback,timeout)}else setTimeout(this.nextCallback,0)},_proto.render=function render(){var status=this.state.status;if("unmounted"===status)return null;var _this$props=this.props,children=_this$props.children,childProps=(_this$props.in,_this$props.mountOnEnter,_this$props.unmountOnExit,_this$props.appear,_this$props.enter,_this$props.exit,_this$props.timeout,_this$props.addEndListener,_this$props.onEnter,_this$props.onEntering,_this$props.onEntered,_this$props.onExit,_this$props.onExiting,_this$props.onExited,_this$props.nodeRef,function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_this$props,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return react.createElement(TransitionGroupContext.Provider,{value:null},"function"==typeof children?children(status,childProps):react.cloneElement(react.Children.only(children),childProps))},Transition}(react.Component);function noop(){}Transition.contextType=TransitionGroupContext,Transition.propTypes={},Transition.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:noop,onEntering:noop,onEntered:noop,onExit:noop,onExiting:noop,onExited:noop},Transition.UNMOUNTED="unmounted",Transition.EXITED="exited",Transition.ENTERING=ENTERING,Transition.ENTERED="entered",Transition.EXITING="exiting";const esm_Transition=Transition,canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);var optionsSupported=!1,onceSupported=!1;try{var options={get passive(){return optionsSupported=!0},get once(){return onceSupported=optionsSupported=!0}};canUseDOM&&(window.addEventListener("test",options,options),window.removeEventListener("test",options,!0))}catch(e){}const esm_addEventListener=function addEventListener(node,eventName,handler,options){if(options&&"boolean"!=typeof options&&!onceSupported){var once=options.once,capture=options.capture,wrappedHandler=handler;!onceSupported&&once&&(wrappedHandler=handler.__once||function onceHandler(event){this.removeEventListener(eventName,onceHandler,capture),handler.call(this,event)},handler.__once=wrappedHandler),node.addEventListener(eventName,wrappedHandler,optionsSupported?options:capture)}node.addEventListener(eventName,handler,options)};const esm_removeEventListener=function removeEventListener(node,eventName,handler,options){var capture=options&&"boolean"!=typeof options?options.capture:options;node.removeEventListener(eventName,handler,capture),handler.__once&&node.removeEventListener(eventName,handler.__once,capture)};const esm_listen=function listen(node,eventName,handler,options){return esm_addEventListener(node,eventName,handler,options),function(){esm_removeEventListener(node,eventName,handler,options)}};function emulateTransitionEnd(element,duration,padding){void 0===padding&&(padding=5);var called=!1,handle=setTimeout((function(){called||function triggerEvent(node,eventName,bubbles,cancelable){if(void 0===bubbles&&(bubbles=!1),void 0===cancelable&&(cancelable=!0),node){var event=document.createEvent("HTMLEvents");event.initEvent(eventName,bubbles,cancelable),node.dispatchEvent(event)}}(element,"transitionend",!0)}),duration+padding),remove=esm_listen(element,"transitionend",(function(){called=!0}),{once:!0});return function(){clearTimeout(handle),remove()}}function transitionEnd(element,handler,duration,padding){null==duration&&(duration=function parseDuration(node){var str=css(node,"transitionDuration")||"",mult=-1===str.indexOf("ms")?1e3:1;return parseFloat(str)*mult}(element)||0);var removeEmulate=emulateTransitionEnd(element,duration,padding),remove=esm_listen(element,"transitionend",handler);return function(){removeEmulate(),remove()}}function transitionEndListener_parseDuration(node,property){const str=css(node,property)||"",mult=-1===str.indexOf("ms")?1e3:1;return parseFloat(str)*mult}function transitionEndListener(element,handler){const duration=transitionEndListener_parseDuration(element,"transitionDuration"),delay=transitionEndListener_parseDuration(element,"transitionDelay"),remove=transitionEnd(element,(e=>{e.target===element&&(remove(),handler(e))}),duration+delay)}const esm_createChainedFunction=function createChainedFunction(...funcs){return funcs.filter((f=>null!=f)).reduce(((acc,f)=>{if("function"!=typeof f)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===acc?f:function chainedFunction(...args){acc.apply(this,args),f.apply(this,args)}}),null)};function triggerBrowserReflow(node){node.offsetHeight}var toFnRef=function toFnRef(ref){return ref&&"function"!=typeof ref?function(value){ref.current=value}:ref};const esm_useMergedRefs=function useMergedRefs(refA,refB){return(0,react.useMemo)((function(){return function mergeRefs(refA,refB){var a=toFnRef(refA),b=toFnRef(refB);return function(value){a&&a(value),b&&b(value)}}(refA,refB)}),[refA,refB])};function safeFindDOMNode(componentOrElement){return componentOrElement&&"setState"in componentOrElement?react_dom.findDOMNode(componentOrElement):null!=componentOrElement?componentOrElement:null}const esm_TransitionWrapper=react.forwardRef((({onEnter,onEntering,onEntered,onExit,onExiting,onExited,addEndListener,children,childRef,...props},ref)=>{const nodeRef=(0,react.useRef)(null),mergedRef=esm_useMergedRefs(nodeRef,childRef),attachRef=r=>{mergedRef(safeFindDOMNode(r))},normalize=callback=>param=>{callback&&nodeRef.current&&callback(nodeRef.current,param)},handleEnter=(0,react.useCallback)(normalize(onEnter),[onEnter]),handleEntering=(0,react.useCallback)(normalize(onEntering),[onEntering]),handleEntered=(0,react.useCallback)(normalize(onEntered),[onEntered]),handleExit=(0,react.useCallback)(normalize(onExit),[onExit]),handleExiting=(0,react.useCallback)(normalize(onExiting),[onExiting]),handleExited=(0,react.useCallback)(normalize(onExited),[onExited]),handleAddEndListener=(0,react.useCallback)(normalize(addEndListener),[addEndListener]);return(0,jsx_runtime.jsx)(esm_Transition,{ref,...props,onEnter:handleEnter,onEntered:handleEntered,onEntering:handleEntering,onExit:handleExit,onExited:handleExited,onExiting:handleExiting,addEndListener:handleAddEndListener,nodeRef,children:"function"==typeof children?(status,innerProps)=>children(status,{...innerProps,ref:attachRef}):react.cloneElement(children,{ref:attachRef})})})),MARGINS={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};function getDefaultDimensionValue(dimension,elem){const value=elem[`offset${dimension[0].toUpperCase()}${dimension.slice(1)}`],margins=MARGINS[dimension];return value+parseInt(css(elem,margins[0]),10)+parseInt(css(elem,margins[1]),10)}const collapseStyles={exited:"collapse",exiting:"collapsing",[ENTERING]:"collapsing",entered:"collapse show"},esm_Collapse=react.forwardRef((({onEnter,onEntering,onEntered,onExit,onExiting,className,children,dimension="height",in:inProp=!1,timeout=300,mountOnEnter=!1,unmountOnExit=!1,appear=!1,getDimensionValue=getDefaultDimensionValue,...props},ref)=>{const computedDimension="function"==typeof dimension?dimension():dimension,handleEnter=(0,react.useMemo)((()=>esm_createChainedFunction((elem=>{elem.style[computedDimension]="0"}),onEnter)),[computedDimension,onEnter]),handleEntering=(0,react.useMemo)((()=>esm_createChainedFunction((elem=>{const scroll=`scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;elem.style[computedDimension]=`${elem[scroll]}px`}),onEntering)),[computedDimension,onEntering]),handleEntered=(0,react.useMemo)((()=>esm_createChainedFunction((elem=>{elem.style[computedDimension]=null}),onEntered)),[computedDimension,onEntered]),handleExit=(0,react.useMemo)((()=>esm_createChainedFunction((elem=>{elem.style[computedDimension]=`${getDimensionValue(computedDimension,elem)}px`,triggerBrowserReflow(elem)}),onExit)),[onExit,getDimensionValue,computedDimension]),handleExiting=(0,react.useMemo)((()=>esm_createChainedFunction((elem=>{elem.style[computedDimension]=null}),onExiting)),[computedDimension,onExiting]);return(0,jsx_runtime.jsx)(esm_TransitionWrapper,{ref,addEndListener:transitionEndListener,...props,"aria-expanded":props.role?inProp:null,onEnter:handleEnter,onEntering:handleEntering,onEntered:handleEntered,onExit:handleExit,onExiting:handleExiting,childRef:children.ref,in:inProp,timeout,mountOnEnter,unmountOnExit,appear,children:(state,innerProps)=>react.cloneElement(children,{...innerProps,className:classnames_default()(className,children.props.className,collapseStyles[state],"width"===computedDimension&&"collapse-horizontal")})})}));function isAccordionItemSelected(activeEventKey,eventKey){return Array.isArray(activeEventKey)?activeEventKey.includes(eventKey):activeEventKey===eventKey}const context=react.createContext({});context.displayName="AccordionContext";const AccordionContext=context,AccordionCollapse=react.forwardRef((({as:Component="div",bsPrefix,className,children,eventKey,...props},ref)=>{const{activeEventKey}=(0,react.useContext)(AccordionContext);return bsPrefix=useBootstrapPrefix(bsPrefix,"accordion-collapse"),(0,jsx_runtime.jsx)(esm_Collapse,{ref,in:isAccordionItemSelected(activeEventKey,eventKey),...props,className:classnames_default()(className,bsPrefix),children:(0,jsx_runtime.jsx)(Component,{children:react.Children.only(children)})})}));AccordionCollapse.displayName="AccordionCollapse";const esm_AccordionCollapse=AccordionCollapse,AccordionItemContext_context=react.createContext({eventKey:""});AccordionItemContext_context.displayName="AccordionItemContext";const AccordionItemContext=AccordionItemContext_context,AccordionBody=react.forwardRef((({as:Component="div",bsPrefix,className,onEnter,onEntering,onEntered,onExit,onExiting,onExited,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"accordion-body");const{eventKey}=(0,react.useContext)(AccordionItemContext);return(0,jsx_runtime.jsx)(esm_AccordionCollapse,{eventKey,onEnter,onEntering,onEntered,onExit,onExiting,onExited,children:(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,bsPrefix)})})}));AccordionBody.displayName="AccordionBody";const esm_AccordionBody=AccordionBody;function useAccordionButton(eventKey,onClick){const{activeEventKey,onSelect,alwaysOpen}=(0,react.useContext)(AccordionContext);return e=>{let eventKeyPassed=eventKey===activeEventKey?null:eventKey;alwaysOpen&&(eventKeyPassed=Array.isArray(activeEventKey)?activeEventKey.includes(eventKey)?activeEventKey.filter((k=>k!==eventKey)):[...activeEventKey,eventKey]:[eventKey]),null==onSelect||onSelect(eventKeyPassed,e),null==onClick||onClick(e)}}const AccordionButton=react.forwardRef((({as:Component="button",bsPrefix,className,onClick,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"accordion-button");const{eventKey}=(0,react.useContext)(AccordionItemContext),accordionOnClick=useAccordionButton(eventKey,onClick),{activeEventKey}=(0,react.useContext)(AccordionContext);return"button"===Component&&(props.type="button"),(0,jsx_runtime.jsx)(Component,{ref,onClick:accordionOnClick,...props,"aria-expanded":Array.isArray(activeEventKey)?activeEventKey.includes(eventKey):eventKey===activeEventKey,className:classnames_default()(className,bsPrefix,!isAccordionItemSelected(activeEventKey,eventKey)&&"collapsed")})}));AccordionButton.displayName="AccordionButton";const esm_AccordionButton=AccordionButton,AccordionHeader=react.forwardRef((({as:Component="h2",bsPrefix,className,children,onClick,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"accordion-header"),(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,bsPrefix),children:(0,jsx_runtime.jsx)(esm_AccordionButton,{onClick,children})}))));AccordionHeader.displayName="AccordionHeader";const esm_AccordionHeader=AccordionHeader,AccordionItem=react.forwardRef((({as:Component="div",bsPrefix,className,eventKey,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"accordion-item");const contextValue=(0,react.useMemo)((()=>({eventKey})),[eventKey]);return(0,jsx_runtime.jsx)(AccordionItemContext.Provider,{value:contextValue,children:(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,bsPrefix)})})}));AccordionItem.displayName="AccordionItem";const esm_AccordionItem=AccordionItem,Accordion=react.forwardRef(((props,ref)=>{const{as:Component="div",activeKey,bsPrefix,className,onSelect,flush,alwaysOpen,...controlledProps}=(0,esm.Zw)(props,{activeKey:"onSelect"}),prefix=useBootstrapPrefix(bsPrefix,"accordion"),contextValue=(0,react.useMemo)((()=>({activeEventKey:activeKey,onSelect,alwaysOpen})),[activeKey,onSelect,alwaysOpen]);return(0,jsx_runtime.jsx)(AccordionContext.Provider,{value:contextValue,children:(0,jsx_runtime.jsx)(Component,{ref,...controlledProps,className:classnames_default()(className,prefix,flush&&`${prefix}-flush`)})})}));Accordion.displayName="Accordion";const esm_Accordion=Object.assign(Accordion,{Button:esm_AccordionButton,Collapse:esm_AccordionCollapse,Item:esm_AccordionItem,Header:esm_AccordionHeader,Body:esm_AccordionBody});const esm_useCommittedRef=function useCommittedRef_useCommittedRef(value){var ref=(0,react.useRef)(value);return(0,react.useEffect)((function(){ref.current=value}),[value]),ref};function useEventCallback(fn){var ref=esm_useCommittedRef(fn);return(0,react.useCallback)((function(){return ref.current&&ref.current.apply(ref,arguments)}),[ref])}function useCallbackRef(){return(0,react.useState)(null)}function useMounted(){var mounted=(0,react.useRef)(!0),isMounted=(0,react.useRef)((function(){return mounted.current}));return(0,react.useEffect)((function(){return mounted.current=!0,function(){mounted.current=!1}}),[]),isMounted.current}function usePrevious(value){var ref=(0,react.useRef)(null);return(0,react.useEffect)((function(){ref.current=value})),ref.current}var isReactNative=void 0!==__webpack_require__.g&&__webpack_require__.g.navigator&&"ReactNative"===__webpack_require__.g.navigator.product;const useIsomorphicEffect="undefined"!=typeof document||isReactNative?react.useLayoutEffect:react.useEffect;new WeakMap;const _excluded=["as","disabled"];function useButtonProps({tagName,disabled,href,target,rel,role,onClick,tabIndex=0,type}){tagName||(tagName=null!=href||null!=target||null!=rel?"a":"button");const meta={tagName};if("button"===tagName)return[{type:type||"button",disabled},meta];const handleClick=event=>{(disabled||"a"===tagName&&function isTrivialHref(href){return!href||"#"===href.trim()}(href))&&event.preventDefault(),disabled?event.stopPropagation():null==onClick||onClick(event)};return"a"===tagName&&(href||(href="#"),disabled&&(href=void 0)),[{role:null!=role?role:"button",disabled:void 0,tabIndex:disabled?void 0:tabIndex,href,target:"a"===tagName?target:void 0,"aria-disabled":disabled||void 0,rel:"a"===tagName?rel:void 0,onClick:handleClick,onKeyDown:event=>{" "===event.key&&(event.preventDefault(),handleClick(event))}},meta]}const Button=react.forwardRef(((_ref,ref)=>{let{as:asProp,disabled}=_ref,props=function Button_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,_excluded);const[buttonProps,{tagName:Component}]=useButtonProps(Object.assign({tagName:asProp,disabled},props));return(0,jsx_runtime.jsx)(Component,Object.assign({},props,buttonProps,{ref}))}));Button.displayName="Button";const esm_Button=Button,Anchor_excluded=["onKeyDown"];const Anchor=react.forwardRef(((_ref,ref)=>{let{onKeyDown}=_ref,props=function Anchor_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,Anchor_excluded);const[buttonProps]=useButtonProps(Object.assign({tagName:"a"},props)),handleKeyDown=useEventCallback((e=>{buttonProps.onKeyDown(e),null==onKeyDown||onKeyDown(e)}));return function Anchor_isTrivialHref(href){return!href||"#"===href.trim()}(props.href)||"button"===props.role?(0,jsx_runtime.jsx)("a",Object.assign({ref},props,buttonProps,{onKeyDown:handleKeyDown})):(0,jsx_runtime.jsx)("a",Object.assign({ref},props,{onKeyDown}))}));Anchor.displayName="Anchor";const esm_Anchor=Anchor,fadeStyles={[ENTERING]:"show",entered:"show"},Fade=react.forwardRef((({className,children,transitionClasses={},onEnter,...rest},ref)=>{const props={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,...rest},handleEnter=(0,react.useCallback)(((node,isAppearing)=>{triggerBrowserReflow(node),null==onEnter||onEnter(node,isAppearing)}),[onEnter]);return(0,jsx_runtime.jsx)(esm_TransitionWrapper,{ref,addEndListener:transitionEndListener,...props,onEnter:handleEnter,childRef:children.ref,children:(status,innerProps)=>react.cloneElement(children,{...innerProps,className:classnames_default()("fade",className,children.props.className,fadeStyles[status],transitionClasses[status])})})}));Fade.displayName="Fade";const esm_Fade=Fade;var node_modules_prop_types=__webpack_require__("./node_modules/react-bootstrap-2/node_modules/prop-types/index.js"),node_modules_prop_types_default=__webpack_require__.n(node_modules_prop_types);const propTypes={"aria-label":node_modules_prop_types_default().string,onClick:node_modules_prop_types_default().func,variant:node_modules_prop_types_default().oneOf(["white"])},CloseButton=react.forwardRef((({className,variant,"aria-label":ariaLabel="Close",...props},ref)=>(0,jsx_runtime.jsx)("button",{ref,type:"button",className:classnames_default()("btn-close",variant&&`btn-close-${variant}`,className),"aria-label":ariaLabel,...props})));CloseButton.displayName="CloseButton",CloseButton.propTypes=propTypes;const esm_CloseButton=CloseButton,divWithClassName=className=>react.forwardRef(((p,ref)=>(0,jsx_runtime.jsx)("div",{...p,ref,className:classnames_default()(p.className,className)})));var rHyphen=/-(.)/g;const pascalCase=str=>str[0].toUpperCase()+function camelize(string){return string.replace(rHyphen,(function(_,chr){return chr.toUpperCase()}))}(str).slice(1);function createWithBsPrefix(prefix,{displayName=pascalCase(prefix),Component,defaultProps}={}){const BsComponent=react.forwardRef((({className,bsPrefix,as:Tag=Component||"div",...props},ref)=>{const componentProps={...defaultProps,...props},resolvedPrefix=useBootstrapPrefix(bsPrefix,prefix);return(0,jsx_runtime.jsx)(Tag,{ref,className:classnames_default()(className,resolvedPrefix),...componentProps})}));return BsComponent.displayName=displayName,BsComponent}const DivStyledAsH4=divWithClassName("h4");DivStyledAsH4.displayName="DivStyledAsH4";const AlertHeading=createWithBsPrefix("alert-heading",{Component:DivStyledAsH4}),AlertLink=createWithBsPrefix("alert-link",{Component:esm_Anchor}),Alert=react.forwardRef(((uncontrolledProps,ref)=>{const{bsPrefix,show=!0,closeLabel="Close alert",closeVariant,className,children,variant="primary",onClose,dismissible,transition=esm_Fade,...props}=(0,esm.Zw)(uncontrolledProps,{show:"onClose"}),prefix=useBootstrapPrefix(bsPrefix,"alert"),handleClose=useEventCallback((e=>{onClose&&onClose(!1,e)})),Transition=!0===transition?esm_Fade:transition,alert=(0,jsx_runtime.jsxs)("div",{role:"alert",...Transition?void 0:props,ref,className:classnames_default()(className,prefix,variant&&`${prefix}-${variant}`,dismissible&&`${prefix}-dismissible`),children:[dismissible&&(0,jsx_runtime.jsx)(esm_CloseButton,{onClick:handleClose,"aria-label":closeLabel,variant:closeVariant}),children]});return Transition?(0,jsx_runtime.jsx)(Transition,{unmountOnExit:!0,...props,ref:void 0,in:show,children:alert}):show?alert:null}));Alert.displayName="Alert";const esm_Alert=Object.assign(Alert,{Link:AlertLink,Heading:AlertHeading}),react_bootstrap_2_esm_Anchor=esm_Anchor,Badge=react.forwardRef((({bsPrefix,bg="primary",pill=!1,text,className,as:Component="span",...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"badge");return(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,prefix,pill&&"rounded-pill",text&&`text-${text}`,bg&&`bg-${bg}`)})}));Badge.displayName="Badge";const esm_Badge=Badge,BreadcrumbItem=react.forwardRef((({bsPrefix,active=!1,children,className,as:Component="li",linkAs:LinkComponent=esm_Anchor,linkProps={},href,title,target,...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"breadcrumb-item");return(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(prefix,className,{active}),"aria-current":active?"page":void 0,children:active?children:(0,jsx_runtime.jsx)(LinkComponent,{...linkProps,href,title,target,children})})}));BreadcrumbItem.displayName="BreadcrumbItem";const esm_BreadcrumbItem=BreadcrumbItem,Breadcrumb=react.forwardRef((({bsPrefix,className,listProps={},children,label="breadcrumb",as:Component="nav",...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"breadcrumb");return(0,jsx_runtime.jsx)(Component,{"aria-label":label,className,ref,...props,children:(0,jsx_runtime.jsx)("ol",{...listProps,className:classnames_default()(prefix,null==listProps?void 0:listProps.className),children})})}));Breadcrumb.displayName="Breadcrumb";const esm_Breadcrumb=Object.assign(Breadcrumb,{Item:esm_BreadcrumbItem}),Button_Button=react.forwardRef((({as,bsPrefix,variant="primary",size,active=!1,disabled=!1,className,...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"btn"),[buttonProps,{tagName}]=useButtonProps({tagName:as,disabled,...props}),Component=tagName;return(0,jsx_runtime.jsx)(Component,{...buttonProps,...props,ref,disabled,className:classnames_default()(className,prefix,active&&"active",variant&&`${prefix}-${variant}`,size&&`${prefix}-${size}`,props.href&&disabled&&"disabled")})}));Button_Button.displayName="Button";const react_bootstrap_2_esm_Button=Button_Button,ButtonGroup=react.forwardRef((({bsPrefix,size,vertical=!1,className,role="group",as:Component="div",...rest},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"btn-group");let baseClass=prefix;return vertical&&(baseClass=`${prefix}-vertical`),(0,jsx_runtime.jsx)(Component,{...rest,ref,role,className:classnames_default()(className,baseClass,size&&`${prefix}-${size}`)})}));ButtonGroup.displayName="ButtonGroup";const esm_ButtonGroup=ButtonGroup,ButtonToolbar=react.forwardRef((({bsPrefix,className,role="toolbar",...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"btn-toolbar");return(0,jsx_runtime.jsx)("div",{...props,ref,className:classnames_default()(className,prefix),role})}));ButtonToolbar.displayName="ButtonToolbar";const esm_ButtonToolbar=ButtonToolbar,CardImg=react.forwardRef((({bsPrefix,className,variant,as:Component="img",...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"card-img");return(0,jsx_runtime.jsx)(Component,{ref,className:classnames_default()(variant?`${prefix}-${variant}`:prefix,className),...props})}));CardImg.displayName="CardImg";const esm_CardImg=CardImg,CardHeaderContext_context=react.createContext(null);CardHeaderContext_context.displayName="CardHeaderContext";const CardHeaderContext=CardHeaderContext_context,CardHeader=react.forwardRef((({bsPrefix,className,as:Component="div",...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"card-header"),contextValue=(0,react.useMemo)((()=>({cardHeaderBsPrefix:prefix})),[prefix]);return(0,jsx_runtime.jsx)(CardHeaderContext.Provider,{value:contextValue,children:(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,prefix)})})}));CardHeader.displayName="CardHeader";const esm_CardHeader=CardHeader,DivStyledAsH5=divWithClassName("h5"),DivStyledAsH6=divWithClassName("h6"),CardBody=createWithBsPrefix("card-body"),CardTitle=createWithBsPrefix("card-title",{Component:DivStyledAsH5}),CardSubtitle=createWithBsPrefix("card-subtitle",{Component:DivStyledAsH6}),CardLink=createWithBsPrefix("card-link",{Component:"a"}),CardText=createWithBsPrefix("card-text",{Component:"p"}),CardFooter=createWithBsPrefix("card-footer"),CardImgOverlay=createWithBsPrefix("card-img-overlay"),Card=react.forwardRef((({bsPrefix,className,bg,text,border,body=!1,children,as:Component="div",...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"card");return(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,prefix,bg&&`bg-${bg}`,text&&`text-${text}`,border&&`border-${border}`),children:body?(0,jsx_runtime.jsx)(CardBody,{children}):children})}));Card.displayName="Card";const esm_Card=Object.assign(Card,{Img:esm_CardImg,Title:CardTitle,Subtitle:CardSubtitle,Body:CardBody,Link:CardLink,Text:CardText,Header:esm_CardHeader,Footer:CardFooter,ImgOverlay:CardImgOverlay}),CardGroup=createWithBsPrefix("card-group");const esm_useUpdateEffect=function useUpdateEffect(fn,deps){var isFirst=(0,react.useRef)(!0);(0,react.useEffect)((function(){if(!isFirst.current)return fn();isFirst.current=!1}),deps)};function useWillUnmount(fn){var onUnmount=function useUpdatedRef(value){var valueRef=(0,react.useRef)(value);return valueRef.current=value,valueRef}(fn);(0,react.useEffect)((function(){return function(){return onUnmount.current()}}),[])}var MAX_DELAY_MS=Math.pow(2,31)-1;function setChainedTimeout(handleRef,fn,timeoutAtMs){var delayMs=timeoutAtMs-Date.now();handleRef.current=delayMs<=MAX_DELAY_MS?setTimeout(fn,delayMs):setTimeout((function(){return setChainedTimeout(handleRef,fn,timeoutAtMs)}),MAX_DELAY_MS)}function useTimeout(){var isMounted=useMounted(),handleRef=(0,react.useRef)();return useWillUnmount((function(){return clearTimeout(handleRef.current)})),(0,react.useMemo)((function(){var clear=function clear(){return clearTimeout(handleRef.current)};return{set:function set(fn,delayMs){void 0===delayMs&&(delayMs=0),isMounted()&&(clear(),delayMs<=MAX_DELAY_MS?handleRef.current=setTimeout(fn,delayMs):setChainedTimeout(handleRef,fn,Date.now()+delayMs))},clear}}),[])}const CarouselCaption=createWithBsPrefix("carousel-caption"),CarouselItem=react.forwardRef((({as:Component="div",bsPrefix,className,...props},ref)=>{const finalClassName=classnames_default()(className,useBootstrapPrefix(bsPrefix,"carousel-item"));return(0,jsx_runtime.jsx)(Component,{ref,...props,className:finalClassName})}));CarouselItem.displayName="CarouselItem";const esm_CarouselItem=CarouselItem;function map(children,func){let index=0;return react.Children.map(children,(child=>react.isValidElement(child)?func(child,index++):child))}function forEach(children,func){let index=0;react.Children.forEach(children,(child=>{react.isValidElement(child)&&func(child,index++)}))}const Carousel=react.forwardRef((({defaultActiveIndex=0,...uncontrolledProps},ref)=>{const{as:Component="div",bsPrefix,slide=!0,fade=!1,controls=!0,indicators=!0,indicatorLabels=[],activeIndex,onSelect,onSlide,onSlid,interval=5e3,keyboard=!0,onKeyDown,pause="hover",onMouseOver,onMouseOut,wrap=!0,touch=!0,onTouchStart,onTouchMove,onTouchEnd,prevIcon=(0,jsx_runtime.jsx)("span",{"aria-hidden":"true",className:"carousel-control-prev-icon"}),prevLabel="Previous",nextIcon=(0,jsx_runtime.jsx)("span",{"aria-hidden":"true",className:"carousel-control-next-icon"}),nextLabel="Next",variant,className,children,...props}=(0,esm.Zw)({defaultActiveIndex,...uncontrolledProps},{activeIndex:"onSelect"}),prefix=useBootstrapPrefix(bsPrefix,"carousel"),isRTL=useIsRTL(),nextDirectionRef=(0,react.useRef)(null),[direction,setDirection]=(0,react.useState)("next"),[paused,setPaused]=(0,react.useState)(!1),[isSliding,setIsSliding]=(0,react.useState)(!1),[renderedActiveIndex,setRenderedActiveIndex]=(0,react.useState)(activeIndex||0);(0,react.useEffect)((()=>{isSliding||activeIndex===renderedActiveIndex||(nextDirectionRef.current?setDirection(nextDirectionRef.current):setDirection((activeIndex||0)>renderedActiveIndex?"next":"prev"),slide&&setIsSliding(!0),setRenderedActiveIndex(activeIndex||0))}),[activeIndex,isSliding,renderedActiveIndex,slide]),(0,react.useEffect)((()=>{nextDirectionRef.current&&(nextDirectionRef.current=null)}));let activeChildInterval,numChildren=0;forEach(children,((child,index)=>{++numChildren,index===activeIndex&&(activeChildInterval=child.props.interval)}));const activeChildIntervalRef=esm_useCommittedRef(activeChildInterval),prev=(0,react.useCallback)((event=>{if(isSliding)return;let nextActiveIndex=renderedActiveIndex-1;if(nextActiveIndex<0){if(!wrap)return;nextActiveIndex=numChildren-1}nextDirectionRef.current="prev",null==onSelect||onSelect(nextActiveIndex,event)}),[isSliding,renderedActiveIndex,onSelect,wrap,numChildren]),next=useEventCallback((event=>{if(isSliding)return;let nextActiveIndex=renderedActiveIndex+1;if(nextActiveIndex>=numChildren){if(!wrap)return;nextActiveIndex=0}nextDirectionRef.current="next",null==onSelect||onSelect(nextActiveIndex,event)})),elementRef=(0,react.useRef)();(0,react.useImperativeHandle)(ref,(()=>({element:elementRef.current,prev,next})));const nextWhenVisible=useEventCallback((()=>{!document.hidden&&function isVisible(element){if(!(element&&element.style&&element.parentNode&&element.parentNode.style))return!1;const elementStyle=getComputedStyle(element);return"none"!==elementStyle.display&&"hidden"!==elementStyle.visibility&&"none"!==getComputedStyle(element.parentNode).display}(elementRef.current)&&(isRTL?prev():next())})),slideDirection="next"===direction?"start":"end";esm_useUpdateEffect((()=>{slide||(null==onSlide||onSlide(renderedActiveIndex,slideDirection),null==onSlid||onSlid(renderedActiveIndex,slideDirection))}),[renderedActiveIndex]);const orderClassName=`${prefix}-item-${direction}`,directionalClassName=`${prefix}-item-${slideDirection}`,handleEnter=(0,react.useCallback)((node=>{triggerBrowserReflow(node),null==onSlide||onSlide(renderedActiveIndex,slideDirection)}),[onSlide,renderedActiveIndex,slideDirection]),handleEntered=(0,react.useCallback)((()=>{setIsSliding(!1),null==onSlid||onSlid(renderedActiveIndex,slideDirection)}),[onSlid,renderedActiveIndex,slideDirection]),handleKeyDown=(0,react.useCallback)((event=>{if(keyboard&&!/input|textarea/i.test(event.target.tagName))switch(event.key){case"ArrowLeft":return event.preventDefault(),void(isRTL?next(event):prev(event));case"ArrowRight":return event.preventDefault(),void(isRTL?prev(event):next(event))}null==onKeyDown||onKeyDown(event)}),[keyboard,onKeyDown,prev,next,isRTL]),handleMouseOver=(0,react.useCallback)((event=>{"hover"===pause&&setPaused(!0),null==onMouseOver||onMouseOver(event)}),[pause,onMouseOver]),handleMouseOut=(0,react.useCallback)((event=>{setPaused(!1),null==onMouseOut||onMouseOut(event)}),[onMouseOut]),touchStartXRef=(0,react.useRef)(0),touchDeltaXRef=(0,react.useRef)(0),touchUnpauseTimeout=useTimeout(),handleTouchStart=(0,react.useCallback)((event=>{touchStartXRef.current=event.touches[0].clientX,touchDeltaXRef.current=0,"hover"===pause&&setPaused(!0),null==onTouchStart||onTouchStart(event)}),[pause,onTouchStart]),handleTouchMove=(0,react.useCallback)((event=>{event.touches&&event.touches.length>1?touchDeltaXRef.current=0:touchDeltaXRef.current=event.touches[0].clientX-touchStartXRef.current,null==onTouchMove||onTouchMove(event)}),[onTouchMove]),handleTouchEnd=(0,react.useCallback)((event=>{if(touch){const touchDeltaX=touchDeltaXRef.current;Math.abs(touchDeltaX)>40&&(touchDeltaX>0?prev(event):next(event))}"hover"===pause&&touchUnpauseTimeout.set((()=>{setPaused(!1)}),interval||void 0),null==onTouchEnd||onTouchEnd(event)}),[touch,pause,prev,next,touchUnpauseTimeout,interval,onTouchEnd]),shouldPlay=null!=interval&&!paused&&!isSliding,intervalHandleRef=(0,react.useRef)();(0,react.useEffect)((()=>{var _ref,_activeChildIntervalR;if(!shouldPlay)return;const nextFunc=isRTL?prev:next;return intervalHandleRef.current=window.setInterval(document.visibilityState?nextWhenVisible:nextFunc,null!=(_ref=null!=(_activeChildIntervalR=activeChildIntervalRef.current)?_activeChildIntervalR:interval)?_ref:void 0),()=>{null!==intervalHandleRef.current&&clearInterval(intervalHandleRef.current)}}),[shouldPlay,prev,next,activeChildIntervalRef,interval,nextWhenVisible,isRTL]);const indicatorOnClicks=(0,react.useMemo)((()=>indicators&&Array.from({length:numChildren},((_,index)=>event=>{null==onSelect||onSelect(index,event)}))),[indicators,numChildren,onSelect]);return(0,jsx_runtime.jsxs)(Component,{ref:elementRef,...props,onKeyDown:handleKeyDown,onMouseOver:handleMouseOver,onMouseOut:handleMouseOut,onTouchStart:handleTouchStart,onTouchMove:handleTouchMove,onTouchEnd:handleTouchEnd,className:classnames_default()(className,prefix,slide&&"slide",fade&&`${prefix}-fade`,variant&&`${prefix}-${variant}`),children:[indicators&&(0,jsx_runtime.jsx)("div",{className:`${prefix}-indicators`,children:map(children,((_,index)=>(0,jsx_runtime.jsx)("button",{type:"button","data-bs-target":"","aria-label":null!=indicatorLabels&&indicatorLabels.length?indicatorLabels[index]:`Slide ${index+1}`,className:index===renderedActiveIndex?"active":void 0,onClick:indicatorOnClicks?indicatorOnClicks[index]:void 0,"aria-current":index===renderedActiveIndex},index)))}),(0,jsx_runtime.jsx)("div",{className:`${prefix}-inner`,children:map(children,((child,index)=>{const isActive=index===renderedActiveIndex;return slide?(0,jsx_runtime.jsx)(esm_TransitionWrapper,{in:isActive,onEnter:isActive?handleEnter:void 0,onEntered:isActive?handleEntered:void 0,addEndListener:transitionEndListener,children:(status,innerProps)=>react.cloneElement(child,{...innerProps,className:classnames_default()(child.props.className,isActive&&"entered"!==status&&orderClassName,("entered"===status||"exiting"===status)&&"active",("entering"===status||"exiting"===status)&&directionalClassName)})}):react.cloneElement(child,{className:classnames_default()(child.props.className,isActive&&"active")})}))}),controls&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(wrap||0!==activeIndex)&&(0,jsx_runtime.jsxs)(esm_Anchor,{className:`${prefix}-control-prev`,onClick:prev,children:[prevIcon,prevLabel&&(0,jsx_runtime.jsx)("span",{className:"visually-hidden",children:prevLabel})]}),(wrap||activeIndex!==numChildren-1)&&(0,jsx_runtime.jsxs)(esm_Anchor,{className:`${prefix}-control-next`,onClick:next,children:[nextIcon,nextLabel&&(0,jsx_runtime.jsx)("span",{className:"visually-hidden",children:nextLabel})]})]})]})}));Carousel.displayName="Carousel";const esm_Carousel=Object.assign(Carousel,{Caption:CarouselCaption,Item:esm_CarouselItem});function useCol({as,bsPrefix,className,...props}){bsPrefix=useBootstrapPrefix(bsPrefix,"col");const breakpoints=useBootstrapBreakpoints(),minBreakpoint=useBootstrapMinBreakpoint(),spans=[],classes=[];return breakpoints.forEach((brkPoint=>{const propValue=props[brkPoint];let span,offset,order;delete props[brkPoint],"object"==typeof propValue&&null!=propValue?({span,offset,order}=propValue):span=propValue;const infix=brkPoint!==minBreakpoint?`-${brkPoint}`:"";span&&spans.push(!0===span?`${bsPrefix}${infix}`:`${bsPrefix}${infix}-${span}`),null!=order&&classes.push(`order${infix}-${order}`),null!=offset&&classes.push(`offset${infix}-${offset}`)})),[{...props,className:classnames_default()(className,...spans,...classes)},{as,bsPrefix,spans}]}const Col=react.forwardRef(((props,ref)=>{const[{className,...colProps},{as:Component="div",bsPrefix,spans}]=useCol(props);return(0,jsx_runtime.jsx)(Component,{...colProps,ref,className:classnames_default()(className,!spans.length&&bsPrefix)})}));Col.displayName="Col";const esm_Col=Col;var toArray=Function.prototype.bind.call(Function.prototype.call,[].slice);function qsa(element,selector){return toArray(element.querySelectorAll(selector))}const esm_canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);var addEventListener_optionsSupported=!1,addEventListener_onceSupported=!1;try{var addEventListener_options={get passive(){return addEventListener_optionsSupported=!0},get once(){return addEventListener_onceSupported=addEventListener_optionsSupported=!0}};esm_canUseDOM&&(window.addEventListener("test",addEventListener_options,addEventListener_options),window.removeEventListener("test",addEventListener_options,!0))}catch(e){}const dom_helpers_esm_addEventListener=function addEventListener_addEventListener(node,eventName,handler,options){if(options&&"boolean"!=typeof options&&!addEventListener_onceSupported){var once=options.once,capture=options.capture,wrappedHandler=handler;!addEventListener_onceSupported&&once&&(wrappedHandler=handler.__once||function onceHandler(event){this.removeEventListener(eventName,onceHandler,capture),handler.call(this,event)},handler.__once=wrappedHandler),node.addEventListener(eventName,wrappedHandler,addEventListener_optionsSupported?options:capture)}node.addEventListener(eventName,handler,options)};function useForceUpdate(){return(0,react.useReducer)((function(state){return!state}),!1)[1]}const esm_DropdownContext=react.createContext(null);var dist=__webpack_require__("./node_modules/dequal/dist/index.mjs");const esm_useSafeState=function useSafeState(state){var isMounted=useMounted();return[state[0],(0,react.useCallback)((function(nextState){if(isMounted())return state[1](nextState)}),[isMounted,state[1]])]};function getBasePlacement(placement){return placement.split("-")[0]}function getWindow(node){if(null==node)return window;if("[object Window]"!==node.toString()){var ownerDocument=node.ownerDocument;return ownerDocument&&ownerDocument.defaultView||window}return node}function isElement(node){return node instanceof getWindow(node).Element||node instanceof Element}function isHTMLElement(node){return node instanceof getWindow(node).HTMLElement||node instanceof HTMLElement}function isShadowRoot(node){return"undefined"!=typeof ShadowRoot&&(node instanceof getWindow(node).ShadowRoot||node instanceof ShadowRoot)}var math_max=Math.max,math_min=Math.min,round=Math.round;function getUAString(){var uaData=navigator.userAgentData;return null!=uaData&&uaData.brands&&Array.isArray(uaData.brands)?uaData.brands.map((function(item){return item.brand+"/"+item.version})).join(" "):navigator.userAgent}function isLayoutViewport(){return!/^((?!chrome|android).)*safari/i.test(getUAString())}function getBoundingClientRect(element,includeScale,isFixedStrategy){void 0===includeScale&&(includeScale=!1),void 0===isFixedStrategy&&(isFixedStrategy=!1);var clientRect=element.getBoundingClientRect(),scaleX=1,scaleY=1;includeScale&&isHTMLElement(element)&&(scaleX=element.offsetWidth>0&&round(clientRect.width)/element.offsetWidth||1,scaleY=element.offsetHeight>0&&round(clientRect.height)/element.offsetHeight||1);var visualViewport=(isElement(element)?getWindow(element):window).visualViewport,addVisualOffsets=!isLayoutViewport()&&isFixedStrategy,x=(clientRect.left+(addVisualOffsets&&visualViewport?visualViewport.offsetLeft:0))/scaleX,y=(clientRect.top+(addVisualOffsets&&visualViewport?visualViewport.offsetTop:0))/scaleY,width=clientRect.width/scaleX,height=clientRect.height/scaleY;return{width,height,top:y,right:x+width,bottom:y+height,left:x,x,y}}function getLayoutRect(element){var clientRect=getBoundingClientRect(element),width=element.offsetWidth,height=element.offsetHeight;return Math.abs(clientRect.width-width)<=1&&(width=clientRect.width),Math.abs(clientRect.height-height)<=1&&(height=clientRect.height),{x:element.offsetLeft,y:element.offsetTop,width,height}}function contains(parent,child){var rootNode=child.getRootNode&&child.getRootNode();if(parent.contains(child))return!0;if(rootNode&&isShadowRoot(rootNode)){var next=child;do{if(next&&parent.isSameNode(next))return!0;next=next.parentNode||next.host}while(next)}return!1}function getNodeName(element){return element?(element.nodeName||"").toLowerCase():null}function dom_utils_getComputedStyle_getComputedStyle(element){return getWindow(element).getComputedStyle(element)}function isTableElement(element){return["table","td","th"].indexOf(getNodeName(element))>=0}function getDocumentElement(element){return((isElement(element)?element.ownerDocument:element.document)||window.document).documentElement}function getParentNode(element){return"html"===getNodeName(element)?element:element.assignedSlot||element.parentNode||(isShadowRoot(element)?element.host:null)||getDocumentElement(element)}function getTrueOffsetParent(element){return isHTMLElement(element)&&"fixed"!==dom_utils_getComputedStyle_getComputedStyle(element).position?element.offsetParent:null}function getOffsetParent(element){for(var window=getWindow(element),offsetParent=getTrueOffsetParent(element);offsetParent&&isTableElement(offsetParent)&&"static"===dom_utils_getComputedStyle_getComputedStyle(offsetParent).position;)offsetParent=getTrueOffsetParent(offsetParent);return offsetParent&&("html"===getNodeName(offsetParent)||"body"===getNodeName(offsetParent)&&"static"===dom_utils_getComputedStyle_getComputedStyle(offsetParent).position)?window:offsetParent||function getContainingBlock(element){var isFirefox=/firefox/i.test(getUAString());if(/Trident/i.test(getUAString())&&isHTMLElement(element)&&"fixed"===dom_utils_getComputedStyle_getComputedStyle(element).position)return null;var currentNode=getParentNode(element);for(isShadowRoot(currentNode)&&(currentNode=currentNode.host);isHTMLElement(currentNode)&&["html","body"].indexOf(getNodeName(currentNode))<0;){var css=dom_utils_getComputedStyle_getComputedStyle(currentNode);if("none"!==css.transform||"none"!==css.perspective||"paint"===css.contain||-1!==["transform","perspective"].indexOf(css.willChange)||isFirefox&&"filter"===css.willChange||isFirefox&&css.filter&&"none"!==css.filter)return currentNode;currentNode=currentNode.parentNode}return null}(element)||window}function getMainAxisFromPlacement(placement){return["top","bottom"].indexOf(placement)>=0?"x":"y"}function within(min,value,max){return math_max(min,math_min(value,max))}function mergePaddingObject(paddingObject){return Object.assign({},{top:0,right:0,bottom:0,left:0},paddingObject)}function expandToHashMap(value,keys){return keys.reduce((function(hashMap,key){return hashMap[key]=value,hashMap}),{})}var enums_top="top",bottom="bottom",right="right",left="left",auto="auto",basePlacements=[enums_top,bottom,right,left],start="start",end="end",clippingParents="clippingParents",viewport="viewport",popper="popper",reference="reference",variationPlacements=basePlacements.reduce((function(acc,placement){return acc.concat([placement+"-"+start,placement+"-"+end])}),[]),enums_placements=[].concat(basePlacements,[auto]).reduce((function(acc,placement){return acc.concat([placement,placement+"-"+start,placement+"-"+end])}),[]),modifierPhases=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];const modifiers_arrow={name:"arrow",enabled:!0,phase:"main",fn:function arrow(_ref){var _state$modifiersData$,state=_ref.state,name=_ref.name,options=_ref.options,arrowElement=state.elements.arrow,popperOffsets=state.modifiersData.popperOffsets,basePlacement=getBasePlacement(state.placement),axis=getMainAxisFromPlacement(basePlacement),len=[left,right].indexOf(basePlacement)>=0?"height":"width";if(arrowElement&&popperOffsets){var paddingObject=function toPaddingObject(padding,state){return mergePaddingObject("number"!=typeof(padding="function"==typeof padding?padding(Object.assign({},state.rects,{placement:state.placement})):padding)?padding:expandToHashMap(padding,basePlacements))}(options.padding,state),arrowRect=getLayoutRect(arrowElement),minProp="y"===axis?enums_top:left,maxProp="y"===axis?bottom:right,endDiff=state.rects.reference[len]+state.rects.reference[axis]-popperOffsets[axis]-state.rects.popper[len],startDiff=popperOffsets[axis]-state.rects.reference[axis],arrowOffsetParent=getOffsetParent(arrowElement),clientSize=arrowOffsetParent?"y"===axis?arrowOffsetParent.clientHeight||0:arrowOffsetParent.clientWidth||0:0,centerToReference=endDiff/2-startDiff/2,min=paddingObject[minProp],max=clientSize-arrowRect[len]-paddingObject[maxProp],center=clientSize/2-arrowRect[len]/2+centerToReference,offset=within(min,center,max),axisProp=axis;state.modifiersData[name]=((_state$modifiersData$={})[axisProp]=offset,_state$modifiersData$.centerOffset=offset-center,_state$modifiersData$)}},effect:function effect(_ref2){var state=_ref2.state,_options$element=_ref2.options.element,arrowElement=void 0===_options$element?"[data-popper-arrow]":_options$element;null!=arrowElement&&("string"!=typeof arrowElement||(arrowElement=state.elements.popper.querySelector(arrowElement)))&&contains(state.elements.popper,arrowElement)&&(state.elements.arrow=arrowElement)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function getVariation(placement){return placement.split("-")[1]}var unsetSides={top:"auto",right:"auto",bottom:"auto",left:"auto"};function mapToStyles(_ref2){var _Object$assign2,popper=_ref2.popper,popperRect=_ref2.popperRect,placement=_ref2.placement,variation=_ref2.variation,offsets=_ref2.offsets,position=_ref2.position,gpuAcceleration=_ref2.gpuAcceleration,adaptive=_ref2.adaptive,roundOffsets=_ref2.roundOffsets,isFixed=_ref2.isFixed,_offsets$x=offsets.x,x=void 0===_offsets$x?0:_offsets$x,_offsets$y=offsets.y,y=void 0===_offsets$y?0:_offsets$y,_ref3="function"==typeof roundOffsets?roundOffsets({x,y}):{x,y};x=_ref3.x,y=_ref3.y;var hasX=offsets.hasOwnProperty("x"),hasY=offsets.hasOwnProperty("y"),sideX=left,sideY=enums_top,win=window;if(adaptive){var offsetParent=getOffsetParent(popper),heightProp="clientHeight",widthProp="clientWidth";if(offsetParent===getWindow(popper)&&"static"!==dom_utils_getComputedStyle_getComputedStyle(offsetParent=getDocumentElement(popper)).position&&"absolute"===position&&(heightProp="scrollHeight",widthProp="scrollWidth"),placement===enums_top||(placement===left||placement===right)&&variation===end)sideY=bottom,y-=(isFixed&&offsetParent===win&&win.visualViewport?win.visualViewport.height:offsetParent[heightProp])-popperRect.height,y*=gpuAcceleration?1:-1;if(placement===left||(placement===enums_top||placement===bottom)&&variation===end)sideX=right,x-=(isFixed&&offsetParent===win&&win.visualViewport?win.visualViewport.width:offsetParent[widthProp])-popperRect.width,x*=gpuAcceleration?1:-1}var _Object$assign,commonStyles=Object.assign({position},adaptive&&unsetSides),_ref4=!0===roundOffsets?function roundOffsetsByDPR(_ref,win){var x=_ref.x,y=_ref.y,dpr=win.devicePixelRatio||1;return{x:round(x*dpr)/dpr||0,y:round(y*dpr)/dpr||0}}({x,y},getWindow(popper)):{x,y};return x=_ref4.x,y=_ref4.y,gpuAcceleration?Object.assign({},commonStyles,((_Object$assign={})[sideY]=hasY?"0":"",_Object$assign[sideX]=hasX?"0":"",_Object$assign.transform=(win.devicePixelRatio||1)<=1?"translate("+x+"px, "+y+"px)":"translate3d("+x+"px, "+y+"px, 0)",_Object$assign)):Object.assign({},commonStyles,((_Object$assign2={})[sideY]=hasY?y+"px":"",_Object$assign2[sideX]=hasX?x+"px":"",_Object$assign2.transform="",_Object$assign2))}const modifiers_computeStyles={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function computeStyles(_ref5){var state=_ref5.state,options=_ref5.options,_options$gpuAccelerat=options.gpuAcceleration,gpuAcceleration=void 0===_options$gpuAccelerat||_options$gpuAccelerat,_options$adaptive=options.adaptive,adaptive=void 0===_options$adaptive||_options$adaptive,_options$roundOffsets=options.roundOffsets,roundOffsets=void 0===_options$roundOffsets||_options$roundOffsets,commonStyles={placement:getBasePlacement(state.placement),variation:getVariation(state.placement),popper:state.elements.popper,popperRect:state.rects.popper,gpuAcceleration,isFixed:"fixed"===state.options.strategy};null!=state.modifiersData.popperOffsets&&(state.styles.popper=Object.assign({},state.styles.popper,mapToStyles(Object.assign({},commonStyles,{offsets:state.modifiersData.popperOffsets,position:state.options.strategy,adaptive,roundOffsets})))),null!=state.modifiersData.arrow&&(state.styles.arrow=Object.assign({},state.styles.arrow,mapToStyles(Object.assign({},commonStyles,{offsets:state.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets})))),state.attributes.popper=Object.assign({},state.attributes.popper,{"data-popper-placement":state.placement})},data:{}};var passive={passive:!0};const eventListeners={name:"eventListeners",enabled:!0,phase:"write",fn:function fn(){},effect:function eventListeners_effect(_ref){var state=_ref.state,instance=_ref.instance,options=_ref.options,_options$scroll=options.scroll,scroll=void 0===_options$scroll||_options$scroll,_options$resize=options.resize,resize=void 0===_options$resize||_options$resize,window=getWindow(state.elements.popper),scrollParents=[].concat(state.scrollParents.reference,state.scrollParents.popper);return scroll&&scrollParents.forEach((function(scrollParent){scrollParent.addEventListener("scroll",instance.update,passive)})),resize&&window.addEventListener("resize",instance.update,passive),function(){scroll&&scrollParents.forEach((function(scrollParent){scrollParent.removeEventListener("scroll",instance.update,passive)})),resize&&window.removeEventListener("resize",instance.update,passive)}},data:{}};var hash={left:"right",right:"left",bottom:"top",top:"bottom"};function getOppositePlacement(placement){return placement.replace(/left|right|bottom|top/g,(function(matched){return hash[matched]}))}var getOppositeVariationPlacement_hash={start:"end",end:"start"};function getOppositeVariationPlacement(placement){return placement.replace(/start|end/g,(function(matched){return getOppositeVariationPlacement_hash[matched]}))}function getWindowScroll(node){var win=getWindow(node);return{scrollLeft:win.pageXOffset,scrollTop:win.pageYOffset}}function getWindowScrollBarX(element){return getBoundingClientRect(getDocumentElement(element)).left+getWindowScroll(element).scrollLeft}function isScrollParent(element){var _getComputedStyle=dom_utils_getComputedStyle_getComputedStyle(element),overflow=_getComputedStyle.overflow,overflowX=_getComputedStyle.overflowX,overflowY=_getComputedStyle.overflowY;return/auto|scroll|overlay|hidden/.test(overflow+overflowY+overflowX)}function getScrollParent(node){return["html","body","#document"].indexOf(getNodeName(node))>=0?node.ownerDocument.body:isHTMLElement(node)&&isScrollParent(node)?node:getScrollParent(getParentNode(node))}function listScrollParents(element,list){var _element$ownerDocumen;void 0===list&&(list=[]);var scrollParent=getScrollParent(element),isBody=scrollParent===(null==(_element$ownerDocumen=element.ownerDocument)?void 0:_element$ownerDocumen.body),win=getWindow(scrollParent),target=isBody?[win].concat(win.visualViewport||[],isScrollParent(scrollParent)?scrollParent:[]):scrollParent,updatedList=list.concat(target);return isBody?updatedList:updatedList.concat(listScrollParents(getParentNode(target)))}function rectToClientRect(rect){return Object.assign({},rect,{left:rect.x,top:rect.y,right:rect.x+rect.width,bottom:rect.y+rect.height})}function getClientRectFromMixedType(element,clippingParent,strategy){return clippingParent===viewport?rectToClientRect(function getViewportRect(element,strategy){var win=getWindow(element),html=getDocumentElement(element),visualViewport=win.visualViewport,width=html.clientWidth,height=html.clientHeight,x=0,y=0;if(visualViewport){width=visualViewport.width,height=visualViewport.height;var layoutViewport=isLayoutViewport();(layoutViewport||!layoutViewport&&"fixed"===strategy)&&(x=visualViewport.offsetLeft,y=visualViewport.offsetTop)}return{width,height,x:x+getWindowScrollBarX(element),y}}(element,strategy)):isElement(clippingParent)?function getInnerBoundingClientRect(element,strategy){var rect=getBoundingClientRect(element,!1,"fixed"===strategy);return rect.top=rect.top+element.clientTop,rect.left=rect.left+element.clientLeft,rect.bottom=rect.top+element.clientHeight,rect.right=rect.left+element.clientWidth,rect.width=element.clientWidth,rect.height=element.clientHeight,rect.x=rect.left,rect.y=rect.top,rect}(clippingParent,strategy):rectToClientRect(function getDocumentRect(element){var _element$ownerDocumen,html=getDocumentElement(element),winScroll=getWindowScroll(element),body=null==(_element$ownerDocumen=element.ownerDocument)?void 0:_element$ownerDocumen.body,width=math_max(html.scrollWidth,html.clientWidth,body?body.scrollWidth:0,body?body.clientWidth:0),height=math_max(html.scrollHeight,html.clientHeight,body?body.scrollHeight:0,body?body.clientHeight:0),x=-winScroll.scrollLeft+getWindowScrollBarX(element),y=-winScroll.scrollTop;return"rtl"===dom_utils_getComputedStyle_getComputedStyle(body||html).direction&&(x+=math_max(html.clientWidth,body?body.clientWidth:0)-width),{width,height,x,y}}(getDocumentElement(element)))}function getClippingRect(element,boundary,rootBoundary,strategy){var mainClippingParents="clippingParents"===boundary?function getClippingParents(element){var clippingParents=listScrollParents(getParentNode(element)),clipperElement=["absolute","fixed"].indexOf(dom_utils_getComputedStyle_getComputedStyle(element).position)>=0&&isHTMLElement(element)?getOffsetParent(element):element;return isElement(clipperElement)?clippingParents.filter((function(clippingParent){return isElement(clippingParent)&&contains(clippingParent,clipperElement)&&"body"!==getNodeName(clippingParent)})):[]}(element):[].concat(boundary),clippingParents=[].concat(mainClippingParents,[rootBoundary]),firstClippingParent=clippingParents[0],clippingRect=clippingParents.reduce((function(accRect,clippingParent){var rect=getClientRectFromMixedType(element,clippingParent,strategy);return accRect.top=math_max(rect.top,accRect.top),accRect.right=math_min(rect.right,accRect.right),accRect.bottom=math_min(rect.bottom,accRect.bottom),accRect.left=math_max(rect.left,accRect.left),accRect}),getClientRectFromMixedType(element,firstClippingParent,strategy));return clippingRect.width=clippingRect.right-clippingRect.left,clippingRect.height=clippingRect.bottom-clippingRect.top,clippingRect.x=clippingRect.left,clippingRect.y=clippingRect.top,clippingRect}function computeOffsets(_ref){var offsets,reference=_ref.reference,element=_ref.element,placement=_ref.placement,basePlacement=placement?getBasePlacement(placement):null,variation=placement?getVariation(placement):null,commonX=reference.x+reference.width/2-element.width/2,commonY=reference.y+reference.height/2-element.height/2;switch(basePlacement){case enums_top:offsets={x:commonX,y:reference.y-element.height};break;case bottom:offsets={x:commonX,y:reference.y+reference.height};break;case right:offsets={x:reference.x+reference.width,y:commonY};break;case left:offsets={x:reference.x-element.width,y:commonY};break;default:offsets={x:reference.x,y:reference.y}}var mainAxis=basePlacement?getMainAxisFromPlacement(basePlacement):null;if(null!=mainAxis){var len="y"===mainAxis?"height":"width";switch(variation){case start:offsets[mainAxis]=offsets[mainAxis]-(reference[len]/2-element[len]/2);break;case end:offsets[mainAxis]=offsets[mainAxis]+(reference[len]/2-element[len]/2)}}return offsets}function detectOverflow(state,options){void 0===options&&(options={});var _options=options,_options$placement=_options.placement,placement=void 0===_options$placement?state.placement:_options$placement,_options$strategy=_options.strategy,strategy=void 0===_options$strategy?state.strategy:_options$strategy,_options$boundary=_options.boundary,boundary=void 0===_options$boundary?clippingParents:_options$boundary,_options$rootBoundary=_options.rootBoundary,rootBoundary=void 0===_options$rootBoundary?viewport:_options$rootBoundary,_options$elementConte=_options.elementContext,elementContext=void 0===_options$elementConte?popper:_options$elementConte,_options$altBoundary=_options.altBoundary,altBoundary=void 0!==_options$altBoundary&&_options$altBoundary,_options$padding=_options.padding,padding=void 0===_options$padding?0:_options$padding,paddingObject=mergePaddingObject("number"!=typeof padding?padding:expandToHashMap(padding,basePlacements)),altContext=elementContext===popper?reference:popper,popperRect=state.rects.popper,element=state.elements[altBoundary?altContext:elementContext],clippingClientRect=getClippingRect(isElement(element)?element:element.contextElement||getDocumentElement(state.elements.popper),boundary,rootBoundary,strategy),referenceClientRect=getBoundingClientRect(state.elements.reference),popperOffsets=computeOffsets({reference:referenceClientRect,element:popperRect,strategy:"absolute",placement}),popperClientRect=rectToClientRect(Object.assign({},popperRect,popperOffsets)),elementClientRect=elementContext===popper?popperClientRect:referenceClientRect,overflowOffsets={top:clippingClientRect.top-elementClientRect.top+paddingObject.top,bottom:elementClientRect.bottom-clippingClientRect.bottom+paddingObject.bottom,left:clippingClientRect.left-elementClientRect.left+paddingObject.left,right:elementClientRect.right-clippingClientRect.right+paddingObject.right},offsetData=state.modifiersData.offset;if(elementContext===popper&&offsetData){var offset=offsetData[placement];Object.keys(overflowOffsets).forEach((function(key){var multiply=[right,bottom].indexOf(key)>=0?1:-1,axis=[enums_top,bottom].indexOf(key)>=0?"y":"x";overflowOffsets[key]+=offset[axis]*multiply}))}return overflowOffsets}const modifiers_flip={name:"flip",enabled:!0,phase:"main",fn:function flip(_ref){var state=_ref.state,options=_ref.options,name=_ref.name;if(!state.modifiersData[name]._skip){for(var _options$mainAxis=options.mainAxis,checkMainAxis=void 0===_options$mainAxis||_options$mainAxis,_options$altAxis=options.altAxis,checkAltAxis=void 0===_options$altAxis||_options$altAxis,specifiedFallbackPlacements=options.fallbackPlacements,padding=options.padding,boundary=options.boundary,rootBoundary=options.rootBoundary,altBoundary=options.altBoundary,_options$flipVariatio=options.flipVariations,flipVariations=void 0===_options$flipVariatio||_options$flipVariatio,allowedAutoPlacements=options.allowedAutoPlacements,preferredPlacement=state.options.placement,basePlacement=getBasePlacement(preferredPlacement),fallbackPlacements=specifiedFallbackPlacements||(basePlacement===preferredPlacement||!flipVariations?[getOppositePlacement(preferredPlacement)]:function getExpandedFallbackPlacements(placement){if(getBasePlacement(placement)===auto)return[];var oppositePlacement=getOppositePlacement(placement);return[getOppositeVariationPlacement(placement),oppositePlacement,getOppositeVariationPlacement(oppositePlacement)]}(preferredPlacement)),placements=[preferredPlacement].concat(fallbackPlacements).reduce((function(acc,placement){return acc.concat(getBasePlacement(placement)===auto?function computeAutoPlacement(state,options){void 0===options&&(options={});var _options=options,placement=_options.placement,boundary=_options.boundary,rootBoundary=_options.rootBoundary,padding=_options.padding,flipVariations=_options.flipVariations,_options$allowedAutoP=_options.allowedAutoPlacements,allowedAutoPlacements=void 0===_options$allowedAutoP?enums_placements:_options$allowedAutoP,variation=getVariation(placement),placements=variation?flipVariations?variationPlacements:variationPlacements.filter((function(placement){return getVariation(placement)===variation})):basePlacements,allowedPlacements=placements.filter((function(placement){return allowedAutoPlacements.indexOf(placement)>=0}));0===allowedPlacements.length&&(allowedPlacements=placements);var overflows=allowedPlacements.reduce((function(acc,placement){return acc[placement]=detectOverflow(state,{placement,boundary,rootBoundary,padding})[getBasePlacement(placement)],acc}),{});return Object.keys(overflows).sort((function(a,b){return overflows[a]-overflows[b]}))}(state,{placement,boundary,rootBoundary,padding,flipVariations,allowedAutoPlacements}):placement)}),[]),referenceRect=state.rects.reference,popperRect=state.rects.popper,checksMap=new Map,makeFallbackChecks=!0,firstFittingPlacement=placements[0],i=0;i<placements.length;i++){var placement=placements[i],_basePlacement=getBasePlacement(placement),isStartVariation=getVariation(placement)===start,isVertical=[enums_top,bottom].indexOf(_basePlacement)>=0,len=isVertical?"width":"height",overflow=detectOverflow(state,{placement,boundary,rootBoundary,altBoundary,padding}),mainVariationSide=isVertical?isStartVariation?right:left:isStartVariation?bottom:enums_top;referenceRect[len]>popperRect[len]&&(mainVariationSide=getOppositePlacement(mainVariationSide));var altVariationSide=getOppositePlacement(mainVariationSide),checks=[];if(checkMainAxis&&checks.push(overflow[_basePlacement]<=0),checkAltAxis&&checks.push(overflow[mainVariationSide]<=0,overflow[altVariationSide]<=0),checks.every((function(check){return check}))){firstFittingPlacement=placement,makeFallbackChecks=!1;break}checksMap.set(placement,checks)}if(makeFallbackChecks)for(var _loop=function _loop(_i){var fittingPlacement=placements.find((function(placement){var checks=checksMap.get(placement);if(checks)return checks.slice(0,_i).every((function(check){return check}))}));if(fittingPlacement)return firstFittingPlacement=fittingPlacement,"break"},_i=flipVariations?3:1;_i>0;_i--){if("break"===_loop(_i))break}state.placement!==firstFittingPlacement&&(state.modifiersData[name]._skip=!0,state.placement=firstFittingPlacement,state.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function getSideOffsets(overflow,rect,preventedOffsets){return void 0===preventedOffsets&&(preventedOffsets={x:0,y:0}),{top:overflow.top-rect.height-preventedOffsets.y,right:overflow.right-rect.width+preventedOffsets.x,bottom:overflow.bottom-rect.height+preventedOffsets.y,left:overflow.left-rect.width-preventedOffsets.x}}function isAnySideFullyClipped(overflow){return[enums_top,right,bottom,left].some((function(side){return overflow[side]>=0}))}const modifiers_offset={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function offset(_ref2){var state=_ref2.state,options=_ref2.options,name=_ref2.name,_options$offset=options.offset,offset=void 0===_options$offset?[0,0]:_options$offset,data=enums_placements.reduce((function(acc,placement){return acc[placement]=function distanceAndSkiddingToXY(placement,rects,offset){var basePlacement=getBasePlacement(placement),invertDistance=[left,enums_top].indexOf(basePlacement)>=0?-1:1,_ref="function"==typeof offset?offset(Object.assign({},rects,{placement})):offset,skidding=_ref[0],distance=_ref[1];return skidding=skidding||0,distance=(distance||0)*invertDistance,[left,right].indexOf(basePlacement)>=0?{x:distance,y:skidding}:{x:skidding,y:distance}}(placement,state.rects,offset),acc}),{}),_data$state$placement=data[state.placement],x=_data$state$placement.x,y=_data$state$placement.y;null!=state.modifiersData.popperOffsets&&(state.modifiersData.popperOffsets.x+=x,state.modifiersData.popperOffsets.y+=y),state.modifiersData[name]=data}};const modifiers_preventOverflow={name:"preventOverflow",enabled:!0,phase:"main",fn:function preventOverflow(_ref){var state=_ref.state,options=_ref.options,name=_ref.name,_options$mainAxis=options.mainAxis,checkMainAxis=void 0===_options$mainAxis||_options$mainAxis,_options$altAxis=options.altAxis,checkAltAxis=void 0!==_options$altAxis&&_options$altAxis,boundary=options.boundary,rootBoundary=options.rootBoundary,altBoundary=options.altBoundary,padding=options.padding,_options$tether=options.tether,tether=void 0===_options$tether||_options$tether,_options$tetherOffset=options.tetherOffset,tetherOffset=void 0===_options$tetherOffset?0:_options$tetherOffset,overflow=detectOverflow(state,{boundary,rootBoundary,padding,altBoundary}),basePlacement=getBasePlacement(state.placement),variation=getVariation(state.placement),isBasePlacement=!variation,mainAxis=getMainAxisFromPlacement(basePlacement),altAxis=function getAltAxis(axis){return"x"===axis?"y":"x"}(mainAxis),popperOffsets=state.modifiersData.popperOffsets,referenceRect=state.rects.reference,popperRect=state.rects.popper,tetherOffsetValue="function"==typeof tetherOffset?tetherOffset(Object.assign({},state.rects,{placement:state.placement})):tetherOffset,normalizedTetherOffsetValue="number"==typeof tetherOffsetValue?{mainAxis:tetherOffsetValue,altAxis:tetherOffsetValue}:Object.assign({mainAxis:0,altAxis:0},tetherOffsetValue),offsetModifierState=state.modifiersData.offset?state.modifiersData.offset[state.placement]:null,data={x:0,y:0};if(popperOffsets){if(checkMainAxis){var _offsetModifierState$,mainSide="y"===mainAxis?enums_top:left,altSide="y"===mainAxis?bottom:right,len="y"===mainAxis?"height":"width",offset=popperOffsets[mainAxis],min=offset+overflow[mainSide],max=offset-overflow[altSide],additive=tether?-popperRect[len]/2:0,minLen=variation===start?referenceRect[len]:popperRect[len],maxLen=variation===start?-popperRect[len]:-referenceRect[len],arrowElement=state.elements.arrow,arrowRect=tether&&arrowElement?getLayoutRect(arrowElement):{width:0,height:0},arrowPaddingObject=state.modifiersData["arrow#persistent"]?state.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},arrowPaddingMin=arrowPaddingObject[mainSide],arrowPaddingMax=arrowPaddingObject[altSide],arrowLen=within(0,referenceRect[len],arrowRect[len]),minOffset=isBasePlacement?referenceRect[len]/2-additive-arrowLen-arrowPaddingMin-normalizedTetherOffsetValue.mainAxis:minLen-arrowLen-arrowPaddingMin-normalizedTetherOffsetValue.mainAxis,maxOffset=isBasePlacement?-referenceRect[len]/2+additive+arrowLen+arrowPaddingMax+normalizedTetherOffsetValue.mainAxis:maxLen+arrowLen+arrowPaddingMax+normalizedTetherOffsetValue.mainAxis,arrowOffsetParent=state.elements.arrow&&getOffsetParent(state.elements.arrow),clientOffset=arrowOffsetParent?"y"===mainAxis?arrowOffsetParent.clientTop||0:arrowOffsetParent.clientLeft||0:0,offsetModifierValue=null!=(_offsetModifierState$=null==offsetModifierState?void 0:offsetModifierState[mainAxis])?_offsetModifierState$:0,tetherMax=offset+maxOffset-offsetModifierValue,preventedOffset=within(tether?math_min(min,offset+minOffset-offsetModifierValue-clientOffset):min,offset,tether?math_max(max,tetherMax):max);popperOffsets[mainAxis]=preventedOffset,data[mainAxis]=preventedOffset-offset}if(checkAltAxis){var _offsetModifierState$2,_mainSide="x"===mainAxis?enums_top:left,_altSide="x"===mainAxis?bottom:right,_offset=popperOffsets[altAxis],_len="y"===altAxis?"height":"width",_min=_offset+overflow[_mainSide],_max=_offset-overflow[_altSide],isOriginSide=-1!==[enums_top,left].indexOf(basePlacement),_offsetModifierValue=null!=(_offsetModifierState$2=null==offsetModifierState?void 0:offsetModifierState[altAxis])?_offsetModifierState$2:0,_tetherMin=isOriginSide?_min:_offset-referenceRect[_len]-popperRect[_len]-_offsetModifierValue+normalizedTetherOffsetValue.altAxis,_tetherMax=isOriginSide?_offset+referenceRect[_len]+popperRect[_len]-_offsetModifierValue-normalizedTetherOffsetValue.altAxis:_max,_preventedOffset=tether&&isOriginSide?function withinMaxClamp(min,value,max){var v=within(min,value,max);return v>max?max:v}(_tetherMin,_offset,_tetherMax):within(tether?_tetherMin:_min,_offset,tether?_tetherMax:_max);popperOffsets[altAxis]=_preventedOffset,data[altAxis]=_preventedOffset-_offset}state.modifiersData[name]=data}},requiresIfExists:["offset"]};function getCompositeRect(elementOrVirtualElement,offsetParent,isFixed){void 0===isFixed&&(isFixed=!1);var isOffsetParentAnElement=isHTMLElement(offsetParent),offsetParentIsScaled=isHTMLElement(offsetParent)&&function isElementScaled(element){var rect=element.getBoundingClientRect(),scaleX=round(rect.width)/element.offsetWidth||1,scaleY=round(rect.height)/element.offsetHeight||1;return 1!==scaleX||1!==scaleY}(offsetParent),documentElement=getDocumentElement(offsetParent),rect=getBoundingClientRect(elementOrVirtualElement,offsetParentIsScaled,isFixed),scroll={scrollLeft:0,scrollTop:0},offsets={x:0,y:0};return(isOffsetParentAnElement||!isOffsetParentAnElement&&!isFixed)&&(("body"!==getNodeName(offsetParent)||isScrollParent(documentElement))&&(scroll=function getNodeScroll(node){return node!==getWindow(node)&&isHTMLElement(node)?function getHTMLElementScroll(element){return{scrollLeft:element.scrollLeft,scrollTop:element.scrollTop}}(node):getWindowScroll(node)}(offsetParent)),isHTMLElement(offsetParent)?((offsets=getBoundingClientRect(offsetParent,!0)).x+=offsetParent.clientLeft,offsets.y+=offsetParent.clientTop):documentElement&&(offsets.x=getWindowScrollBarX(documentElement))),{x:rect.left+scroll.scrollLeft-offsets.x,y:rect.top+scroll.scrollTop-offsets.y,width:rect.width,height:rect.height}}function order(modifiers){var map=new Map,visited=new Set,result=[];function sort(modifier){visited.add(modifier.name),[].concat(modifier.requires||[],modifier.requiresIfExists||[]).forEach((function(dep){if(!visited.has(dep)){var depModifier=map.get(dep);depModifier&&sort(depModifier)}})),result.push(modifier)}return modifiers.forEach((function(modifier){map.set(modifier.name,modifier)})),modifiers.forEach((function(modifier){visited.has(modifier.name)||sort(modifier)})),result}var DEFAULT_OPTIONS={placement:"bottom",modifiers:[],strategy:"absolute"};function areValidElements(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return!args.some((function(element){return!(element&&"function"==typeof element.getBoundingClientRect)}))}function popperGenerator(generatorOptions){void 0===generatorOptions&&(generatorOptions={});var _generatorOptions=generatorOptions,_generatorOptions$def=_generatorOptions.defaultModifiers,defaultModifiers=void 0===_generatorOptions$def?[]:_generatorOptions$def,_generatorOptions$def2=_generatorOptions.defaultOptions,defaultOptions=void 0===_generatorOptions$def2?DEFAULT_OPTIONS:_generatorOptions$def2;return function createPopper(reference,popper,options){void 0===options&&(options=defaultOptions);var fn,pending,state={placement:"bottom",orderedModifiers:[],options:Object.assign({},DEFAULT_OPTIONS,defaultOptions),modifiersData:{},elements:{reference,popper},attributes:{},styles:{}},effectCleanupFns=[],isDestroyed=!1,instance={state,setOptions:function setOptions(setOptionsAction){var options="function"==typeof setOptionsAction?setOptionsAction(state.options):setOptionsAction;cleanupModifierEffects(),state.options=Object.assign({},defaultOptions,state.options,options),state.scrollParents={reference:isElement(reference)?listScrollParents(reference):reference.contextElement?listScrollParents(reference.contextElement):[],popper:listScrollParents(popper)};var orderedModifiers=function orderModifiers(modifiers){var orderedModifiers=order(modifiers);return modifierPhases.reduce((function(acc,phase){return acc.concat(orderedModifiers.filter((function(modifier){return modifier.phase===phase})))}),[])}(function mergeByName(modifiers){var merged=modifiers.reduce((function(merged,current){var existing=merged[current.name];return merged[current.name]=existing?Object.assign({},existing,current,{options:Object.assign({},existing.options,current.options),data:Object.assign({},existing.data,current.data)}):current,merged}),{});return Object.keys(merged).map((function(key){return merged[key]}))}([].concat(defaultModifiers,state.options.modifiers)));return state.orderedModifiers=orderedModifiers.filter((function(m){return m.enabled})),function runModifierEffects(){state.orderedModifiers.forEach((function(_ref3){var name=_ref3.name,_ref3$options=_ref3.options,options=void 0===_ref3$options?{}:_ref3$options,effect=_ref3.effect;if("function"==typeof effect){var cleanupFn=effect({state,name,instance,options}),noopFn=function noopFn(){};effectCleanupFns.push(cleanupFn||noopFn)}}))}(),instance.update()},forceUpdate:function forceUpdate(){if(!isDestroyed){var _state$elements=state.elements,reference=_state$elements.reference,popper=_state$elements.popper;if(areValidElements(reference,popper)){state.rects={reference:getCompositeRect(reference,getOffsetParent(popper),"fixed"===state.options.strategy),popper:getLayoutRect(popper)},state.reset=!1,state.placement=state.options.placement,state.orderedModifiers.forEach((function(modifier){return state.modifiersData[modifier.name]=Object.assign({},modifier.data)}));for(var index=0;index<state.orderedModifiers.length;index++)if(!0!==state.reset){var _state$orderedModifie=state.orderedModifiers[index],fn=_state$orderedModifie.fn,_state$orderedModifie2=_state$orderedModifie.options,_options=void 0===_state$orderedModifie2?{}:_state$orderedModifie2,name=_state$orderedModifie.name;"function"==typeof fn&&(state=fn({state,options:_options,name,instance})||state)}else state.reset=!1,index=-1}}},update:(fn=function(){return new Promise((function(resolve){instance.forceUpdate(),resolve(state)}))},function(){return pending||(pending=new Promise((function(resolve){Promise.resolve().then((function(){pending=void 0,resolve(fn())}))}))),pending}),destroy:function destroy(){cleanupModifierEffects(),isDestroyed=!0}};if(!areValidElements(reference,popper))return instance;function cleanupModifierEffects(){effectCleanupFns.forEach((function(fn){return fn()})),effectCleanupFns=[]}return instance.setOptions(options).then((function(state){!isDestroyed&&options.onFirstUpdate&&options.onFirstUpdate(state)})),instance}}const popper_createPopper=popperGenerator({defaultModifiers:[{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function hide(_ref){var state=_ref.state,name=_ref.name,referenceRect=state.rects.reference,popperRect=state.rects.popper,preventedOffsets=state.modifiersData.preventOverflow,referenceOverflow=detectOverflow(state,{elementContext:"reference"}),popperAltOverflow=detectOverflow(state,{altBoundary:!0}),referenceClippingOffsets=getSideOffsets(referenceOverflow,referenceRect),popperEscapeOffsets=getSideOffsets(popperAltOverflow,popperRect,preventedOffsets),isReferenceHidden=isAnySideFullyClipped(referenceClippingOffsets),hasPopperEscaped=isAnySideFullyClipped(popperEscapeOffsets);state.modifiersData[name]={referenceClippingOffsets,popperEscapeOffsets,isReferenceHidden,hasPopperEscaped},state.attributes.popper=Object.assign({},state.attributes.popper,{"data-popper-reference-hidden":isReferenceHidden,"data-popper-escaped":hasPopperEscaped})}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function popperOffsets(_ref){var state=_ref.state,name=_ref.name;state.modifiersData[name]=computeOffsets({reference:state.rects.reference,element:state.rects.popper,strategy:"absolute",placement:state.placement})},data:{}},modifiers_computeStyles,eventListeners,modifiers_offset,modifiers_flip,modifiers_preventOverflow,modifiers_arrow]}),usePopper_excluded=["enabled","placement","strategy","modifiers"];const disabledApplyStylesModifier={name:"applyStyles",enabled:!1,phase:"afterWrite",fn:()=>{}},ariaDescribedByModifier={name:"ariaDescribedBy",enabled:!0,phase:"afterWrite",effect:({state})=>()=>{const{reference,popper}=state.elements;if("removeAttribute"in reference){const ids=(reference.getAttribute("aria-describedby")||"").split(",").filter((id=>id.trim()!==popper.id));ids.length?reference.setAttribute("aria-describedby",ids.join(",")):reference.removeAttribute("aria-describedby")}},fn:({state})=>{var _popper$getAttribute;const{popper,reference}=state.elements,role=null==(_popper$getAttribute=popper.getAttribute("role"))?void 0:_popper$getAttribute.toLowerCase();if(popper.id&&"tooltip"===role&&"setAttribute"in reference){const ids=reference.getAttribute("aria-describedby");if(ids&&-1!==ids.split(",").indexOf(popper.id))return;reference.setAttribute("aria-describedby",ids?`${ids},${popper.id}`:popper.id)}}},EMPTY_MODIFIERS=[];const esm_usePopper=function usePopper(referenceElement,popperElement,_ref={}){let{enabled=!0,placement="bottom",strategy="absolute",modifiers=EMPTY_MODIFIERS}=_ref,config=function usePopper_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,usePopper_excluded);const prevModifiers=(0,react.useRef)(modifiers),popperInstanceRef=(0,react.useRef)(),update=(0,react.useCallback)((()=>{var _popperInstanceRef$cu;null==(_popperInstanceRef$cu=popperInstanceRef.current)||_popperInstanceRef$cu.update()}),[]),forceUpdate=(0,react.useCallback)((()=>{var _popperInstanceRef$cu2;null==(_popperInstanceRef$cu2=popperInstanceRef.current)||_popperInstanceRef$cu2.forceUpdate()}),[]),[popperState,setState]=esm_useSafeState((0,react.useState)({placement,update,forceUpdate,attributes:{},styles:{popper:{},arrow:{}}})),updateModifier=(0,react.useMemo)((()=>({name:"updateStateModifier",enabled:!0,phase:"write",requires:["computeStyles"],fn:({state})=>{const styles={},attributes={};Object.keys(state.elements).forEach((element=>{styles[element]=state.styles[element],attributes[element]=state.attributes[element]})),setState({state,styles,attributes,update,forceUpdate,placement:state.placement})}})),[update,forceUpdate,setState]),nextModifiers=(0,react.useMemo)((()=>((0,dist.j)(prevModifiers.current,modifiers)||(prevModifiers.current=modifiers),prevModifiers.current)),[modifiers]);return(0,react.useEffect)((()=>{popperInstanceRef.current&&enabled&&popperInstanceRef.current.setOptions({placement,strategy,modifiers:[...nextModifiers,updateModifier,disabledApplyStylesModifier]})}),[strategy,placement,updateModifier,enabled,nextModifiers]),(0,react.useEffect)((()=>{if(enabled&&null!=referenceElement&&null!=popperElement)return popperInstanceRef.current=popper_createPopper(referenceElement,popperElement,Object.assign({},config,{placement,strategy,modifiers:[...nextModifiers,ariaDescribedByModifier,updateModifier]})),()=>{null!=popperInstanceRef.current&&(popperInstanceRef.current.destroy(),popperInstanceRef.current=void 0,setState((s=>Object.assign({},s,{attributes:{},styles:{popper:{}}}))))}}),[enabled,referenceElement,popperElement]),popperState};function contains_contains(context,node){return context.contains?context.contains(node):context.compareDocumentPosition?context===node||!!(16&context.compareDocumentPosition(node)):void 0}const dom_helpers_esm_removeEventListener=function removeEventListener_removeEventListener(node,eventName,handler,options){var capture=options&&"boolean"!=typeof options?options.capture:options;node.removeEventListener(eventName,handler,capture),handler.__once&&node.removeEventListener(eventName,handler.__once,capture)};const dom_helpers_esm_listen=function listen_listen(node,eventName,handler,options){return dom_helpers_esm_addEventListener(node,eventName,handler,options),function(){dom_helpers_esm_removeEventListener(node,eventName,handler,options)}};function ownerDocument_ownerDocument(node){return node&&node.ownerDocument||document}var warning=__webpack_require__("./node_modules/@restart/ui/node_modules/warning/warning.js"),warning_default=__webpack_require__.n(warning);const useClickOutside_noop=()=>{};const getRefTarget=ref=>ref&&("current"in ref?ref.current:ref),InitialTriggerEvents={click:"mousedown",mouseup:"mousedown",pointerup:"pointerdown"};const esm_useClickOutside=function useClickOutside(ref,onClickOutside=useClickOutside_noop,{disabled,clickTrigger="click"}={}){const preventMouseClickOutsideRef=(0,react.useRef)(!1),waitingForTrigger=(0,react.useRef)(!1),handleMouseCapture=(0,react.useCallback)((e=>{const currentTarget=getRefTarget(ref);warning_default()(!!currentTarget,"ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node"),preventMouseClickOutsideRef.current=!currentTarget||function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey)}(e)||!function isLeftClickEvent(event){return 0===event.button}(e)||!!contains_contains(currentTarget,e.target)||waitingForTrigger.current,waitingForTrigger.current=!1}),[ref]),handleInitialMouse=useEventCallback((e=>{const currentTarget=getRefTarget(ref);currentTarget&&contains_contains(currentTarget,e.target)&&(waitingForTrigger.current=!0)})),handleMouse=useEventCallback((e=>{preventMouseClickOutsideRef.current||onClickOutside(e)}));(0,react.useEffect)((()=>{if(disabled||null==ref)return;const doc=ownerDocument_ownerDocument(getRefTarget(ref));let currentEvent=(doc.defaultView||window).event,removeInitialTriggerListener=null;InitialTriggerEvents[clickTrigger]&&(removeInitialTriggerListener=dom_helpers_esm_listen(doc,InitialTriggerEvents[clickTrigger],handleInitialMouse,!0));const removeMouseCaptureListener=dom_helpers_esm_listen(doc,clickTrigger,handleMouseCapture,!0),removeMouseListener=dom_helpers_esm_listen(doc,clickTrigger,(e=>{e!==currentEvent?handleMouse(e):currentEvent=void 0}));let mobileSafariHackListeners=[];return"ontouchstart"in doc.documentElement&&(mobileSafariHackListeners=[].slice.call(doc.body.children).map((el=>dom_helpers_esm_listen(el,"mousemove",useClickOutside_noop)))),()=>{null==removeInitialTriggerListener||removeInitialTriggerListener(),removeMouseCaptureListener(),removeMouseListener(),mobileSafariHackListeners.forEach((remove=>remove()))}}),[ref,disabled,clickTrigger,handleMouseCapture,handleInitialMouse,handleMouse])};function toModifierArray(map={}){return Array.isArray(map)?map:Object.keys(map).map((k=>(map[k].name=k,map[k])))}function mergeOptionsWithPopperConfig({enabled,enableEvents,placement,flip,offset,fixed,containerPadding,arrowElement,popperConfig={}}){var _modifiers$eventListe,_modifiers$preventOve,_modifiers$preventOve2,_modifiers$offset,_modifiers$arrow;const modifiers=function toModifierMap(modifiers){const result={};return Array.isArray(modifiers)?(null==modifiers||modifiers.forEach((m=>{result[m.name]=m})),result):modifiers||result}(popperConfig.modifiers);return Object.assign({},popperConfig,{placement,enabled,strategy:fixed?"fixed":popperConfig.strategy,modifiers:toModifierArray(Object.assign({},modifiers,{eventListeners:{enabled:enableEvents,options:null==(_modifiers$eventListe=modifiers.eventListeners)?void 0:_modifiers$eventListe.options},preventOverflow:Object.assign({},modifiers.preventOverflow,{options:containerPadding?Object.assign({padding:containerPadding},null==(_modifiers$preventOve=modifiers.preventOverflow)?void 0:_modifiers$preventOve.options):null==(_modifiers$preventOve2=modifiers.preventOverflow)?void 0:_modifiers$preventOve2.options}),offset:{options:Object.assign({offset},null==(_modifiers$offset=modifiers.offset)?void 0:_modifiers$offset.options)},arrow:Object.assign({},modifiers.arrow,{enabled:!!arrowElement,options:Object.assign({},null==(_modifiers$arrow=modifiers.arrow)?void 0:_modifiers$arrow.options,{element:arrowElement})}),flip:Object.assign({enabled:!!flip},modifiers.flip)}))})}const DropdownMenu_excluded=["children"];const DropdownMenu_noop=()=>{};function useDropdownMenu(options={}){const context=(0,react.useContext)(esm_DropdownContext),[arrowElement,attachArrowRef]=useCallbackRef(),hasShownRef=(0,react.useRef)(!1),{flip,offset,rootCloseEvent,fixed=!1,placement:placementOverride,popperConfig={},enableEventListeners=!0,usePopper:shouldUsePopper=!!context}=options,show=null==(null==context?void 0:context.show)?!!options.show:context.show;show&&!hasShownRef.current&&(hasShownRef.current=!0);const{placement,setMenu,menuElement,toggleElement}=context||{},popper=esm_usePopper(toggleElement,menuElement,mergeOptionsWithPopperConfig({placement:placementOverride||placement||"bottom-start",enabled:shouldUsePopper,enableEvents:null==enableEventListeners?show:enableEventListeners,offset,flip,fixed,arrowElement,popperConfig})),menuProps=Object.assign({ref:setMenu||DropdownMenu_noop,"aria-labelledby":null==toggleElement?void 0:toggleElement.id},popper.attributes.popper,{style:popper.styles.popper}),metadata={show,placement,hasShown:hasShownRef.current,toggle:null==context?void 0:context.toggle,popper:shouldUsePopper?popper:null,arrowProps:shouldUsePopper?Object.assign({ref:attachArrowRef},popper.attributes.arrow,{style:popper.styles.arrow}):{}};return esm_useClickOutside(menuElement,(e=>{null==context||context.toggle(!1,e)}),{clickTrigger:rootCloseEvent,disabled:!show}),[menuProps,metadata]}function DropdownMenu(_ref){let{children}=_ref,options=function DropdownMenu_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,DropdownMenu_excluded);const[props,meta]=useDropdownMenu(options);return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:children(props,meta)})}DropdownMenu.displayName="DropdownMenu",DropdownMenu.defaultProps={usePopper:!0};const esm_DropdownMenu=DropdownMenu,$704cf1d3b684cc5c$var$defaultContext={prefix:String(Math.round(1e10*Math.random())),current:0,isSSR:!1},$704cf1d3b684cc5c$var$SSRContext=react.createContext($704cf1d3b684cc5c$var$defaultContext);let $704cf1d3b684cc5c$var$canUseDOM=Boolean("undefined"!=typeof window&&window.document&&window.document.createElement),$704cf1d3b684cc5c$var$componentIds=new WeakMap;function $704cf1d3b684cc5c$var$useCounter(isDisabled=!1){let ctx=(0,react.useContext)($704cf1d3b684cc5c$var$SSRContext),ref=(0,react.useRef)(null);if(null===ref.current&&!isDisabled){var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;let currentOwner=null===(_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)||void 0===_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED||null===(_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner=_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner)||void 0===_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner?void 0:_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;if(currentOwner){let prevComponentValue=$704cf1d3b684cc5c$var$componentIds.get(currentOwner);null==prevComponentValue?$704cf1d3b684cc5c$var$componentIds.set(currentOwner,{id:ctx.current,state:currentOwner.memoizedState}):currentOwner.memoizedState!==prevComponentValue.state&&(ctx.current=prevComponentValue.id,$704cf1d3b684cc5c$var$componentIds.delete(currentOwner))}ref.current=++ctx.current}return ref.current}function $704cf1d3b684cc5c$export$619500959fc48b26(defaultId){let ctx=(0,react.useContext)($704cf1d3b684cc5c$var$SSRContext);ctx!==$704cf1d3b684cc5c$var$defaultContext||$704cf1d3b684cc5c$var$canUseDOM||console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");let counter=$704cf1d3b684cc5c$var$useCounter(!!defaultId);return defaultId||`react-aria${ctx.prefix}-${counter}`}const isRoleMenu=el=>{var _el$getAttribute;return"menu"===(null==(_el$getAttribute=el.getAttribute("role"))?void 0:_el$getAttribute.toLowerCase())},DropdownToggle_noop=()=>{};function useDropdownToggle(){const id=$704cf1d3b684cc5c$export$619500959fc48b26(),{show=!1,toggle=DropdownToggle_noop,setToggle,menuElement}=(0,react.useContext)(esm_DropdownContext)||{},handleClick=(0,react.useCallback)((e=>{toggle(!show,e)}),[show,toggle]),props={id,ref:setToggle||DropdownToggle_noop,onClick:handleClick,"aria-expanded":!!show};return menuElement&&isRoleMenu(menuElement)&&(props["aria-haspopup"]=!0),[props,{show,toggle}]}function DropdownToggle({children}){const[props,meta]=useDropdownToggle();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:children(props,meta)})}DropdownToggle.displayName="DropdownToggle";const esm_DropdownToggle=DropdownToggle,makeEventKey=(eventKey,href=null)=>null!=eventKey?String(eventKey):href||null,esm_SelectableContext=react.createContext(null),NavContext=react.createContext(null);NavContext.displayName="NavContext";const esm_NavContext=NavContext,ATTRIBUTE_PREFIX="data-rr-ui-";function dataAttr(property){return`${ATTRIBUTE_PREFIX}${property}`}const DropdownItem_excluded=["eventKey","disabled","onClick","active","as"];function useDropdownItem({key,href,active,disabled,onClick}){const onSelectCtx=(0,react.useContext)(esm_SelectableContext),navContext=(0,react.useContext)(esm_NavContext),{activeKey}=navContext||{},eventKey=makeEventKey(key,href),isActive=null==active&&null!=key?makeEventKey(activeKey)===eventKey:active;return[{onClick:useEventCallback((event=>{disabled||(null==onClick||onClick(event),onSelectCtx&&!event.isPropagationStopped()&&onSelectCtx(eventKey,event))})),"aria-disabled":disabled||void 0,"aria-selected":isActive,[dataAttr("dropdown-item")]:""},{isActive}]}const DropdownItem=react.forwardRef(((_ref,ref)=>{let{eventKey,disabled,onClick,active,as:Component=esm_Button}=_ref,props=function DropdownItem_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,DropdownItem_excluded);const[dropdownItemProps]=useDropdownItem({key:eventKey,href:props.href,disabled,onClick,active});return(0,jsx_runtime.jsx)(Component,Object.assign({},props,{ref},dropdownItemProps))}));DropdownItem.displayName="DropdownItem";const esm_DropdownItem=DropdownItem,Context=(0,react.createContext)(esm_canUseDOM?window:void 0);Context.Provider;function useWindow(){return(0,react.useContext)(Context)}function useRefWithUpdate(){const forceUpdate=useForceUpdate(),ref=(0,react.useRef)(null),attachRef=(0,react.useCallback)((element=>{ref.current=element,forceUpdate()}),[forceUpdate]);return[ref,attachRef]}function Dropdown({defaultShow,show:rawShow,onSelect,onToggle:rawOnToggle,itemSelector=`* [${dataAttr("dropdown-item")}]`,focusFirstItemOnShow,placement="bottom-start",children}){const window=useWindow(),[show,onToggle]=(0,esm.iC)(rawShow,defaultShow,rawOnToggle),[menuRef,setMenu]=useRefWithUpdate(),menuElement=menuRef.current,[toggleRef,setToggle]=useRefWithUpdate(),toggleElement=toggleRef.current,lastShow=usePrevious(show),lastSourceEvent=(0,react.useRef)(null),focusInDropdown=(0,react.useRef)(!1),onSelectCtx=(0,react.useContext)(esm_SelectableContext),toggle=(0,react.useCallback)(((nextShow,event,source=(null==event?void 0:event.type))=>{onToggle(nextShow,{originalEvent:event,source})}),[onToggle]),handleSelect=useEventCallback(((key,event)=>{null==onSelect||onSelect(key,event),toggle(!1,event,"select"),event.isPropagationStopped()||null==onSelectCtx||onSelectCtx(key,event)})),context=(0,react.useMemo)((()=>({toggle,placement,show,menuElement,toggleElement,setMenu,setToggle})),[toggle,placement,show,menuElement,toggleElement,setMenu,setToggle]);menuElement&&lastShow&&!show&&(focusInDropdown.current=menuElement.contains(menuElement.ownerDocument.activeElement));const focusToggle=useEventCallback((()=>{toggleElement&&toggleElement.focus&&toggleElement.focus()})),maybeFocusFirst=useEventCallback((()=>{const type=lastSourceEvent.current;let focusType=focusFirstItemOnShow;if(null==focusType&&(focusType=!(!menuRef.current||!isRoleMenu(menuRef.current))&&"keyboard"),!1===focusType||"keyboard"===focusType&&!/^key.+$/.test(type))return;const first=qsa(menuRef.current,itemSelector)[0];first&&first.focus&&first.focus()}));(0,react.useEffect)((()=>{show?maybeFocusFirst():focusInDropdown.current&&(focusInDropdown.current=!1,focusToggle())}),[show,focusInDropdown,focusToggle,maybeFocusFirst]),(0,react.useEffect)((()=>{lastSourceEvent.current=null}));const getNextFocusedChild=(current,offset)=>{if(!menuRef.current)return null;const items=qsa(menuRef.current,itemSelector);let index=items.indexOf(current)+offset;return index=Math.max(0,Math.min(index,items.length)),items[index]};return function useEventListener_useEventListener(eventTarget,event,listener,capture){void 0===capture&&(capture=!1);var handler=useEventCallback(listener);(0,react.useEffect)((function(){var target="function"==typeof eventTarget?eventTarget():eventTarget;return target.addEventListener(event,handler,capture),function(){return target.removeEventListener(event,handler,capture)}}),[eventTarget])}((0,react.useCallback)((()=>window.document),[window]),"keydown",(event=>{var _menuRef$current,_toggleRef$current;const{key}=event,target=event.target,fromMenu=null==(_menuRef$current=menuRef.current)?void 0:_menuRef$current.contains(target),fromToggle=null==(_toggleRef$current=toggleRef.current)?void 0:_toggleRef$current.contains(target);if(/input|textarea/i.test(target.tagName)&&(" "===key||"Escape"!==key&&fromMenu||"Escape"===key&&"search"===target.type))return;if(!fromMenu&&!fromToggle)return;if(!("Tab"!==key||menuRef.current&&show))return;lastSourceEvent.current=event.type;const meta={originalEvent:event,source:event.type};switch(key){case"ArrowUp":{const next=getNextFocusedChild(target,-1);return next&&next.focus&&next.focus(),void event.preventDefault()}case"ArrowDown":if(event.preventDefault(),show){const next=getNextFocusedChild(target,1);next&&next.focus&&next.focus()}else onToggle(!0,meta);return;case"Tab":dom_helpers_esm_addEventListener(target.ownerDocument,"keyup",(e=>{var _menuRef$current2;("Tab"!==e.key||e.target)&&null!=(_menuRef$current2=menuRef.current)&&_menuRef$current2.contains(e.target)||onToggle(!1,meta)}),{once:!0});break;case"Escape":"Escape"===key&&(event.preventDefault(),event.stopPropagation()),onToggle(!1,meta)}})),(0,jsx_runtime.jsx)(esm_SelectableContext.Provider,{value:handleSelect,children:(0,jsx_runtime.jsx)(esm_DropdownContext.Provider,{value:context,children})})}Dropdown.displayName="Dropdown",Dropdown.Menu=esm_DropdownMenu,Dropdown.Toggle=esm_DropdownToggle,Dropdown.Item=esm_DropdownItem;const esm_Dropdown=Dropdown,DropdownContext_DropdownContext=react.createContext({});DropdownContext_DropdownContext.displayName="DropdownContext";const react_bootstrap_2_esm_DropdownContext=DropdownContext_DropdownContext,DropdownItem_DropdownItem=react.forwardRef((({bsPrefix,className,eventKey,disabled=!1,onClick,active,as:Component=esm_Anchor,...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"dropdown-item"),[dropdownItemProps,meta]=useDropdownItem({key:eventKey,href:props.href,disabled,onClick,active});return(0,jsx_runtime.jsx)(Component,{...props,...dropdownItemProps,ref,className:classnames_default()(className,prefix,meta.isActive&&"active",disabled&&"disabled")})}));DropdownItem_DropdownItem.displayName="DropdownItem";const react_bootstrap_2_esm_DropdownItem=DropdownItem_DropdownItem;__webpack_require__("./node_modules/react-bootstrap-2/node_modules/warning/warning.js");const InputGroupContext_context=react.createContext(null);InputGroupContext_context.displayName="InputGroupContext";const InputGroupContext=InputGroupContext_context,NavbarContext_context=react.createContext(null);NavbarContext_context.displayName="NavbarContext";const NavbarContext=NavbarContext_context;var browser=__webpack_require__("./node_modules/invariant/browser.js"),browser_default=__webpack_require__.n(browser);function useWrappedRefWithWarning(ref,componentName){return ref}function getDropdownMenuPlacement(alignEnd,dropDirection,isRTL){let placement=alignEnd?isRTL?"bottom-start":"bottom-end":isRTL?"bottom-end":"bottom-start";return"up"===dropDirection?placement=alignEnd?isRTL?"top-start":"top-end":isRTL?"top-end":"top-start":"end"===dropDirection?placement=alignEnd?isRTL?"left-end":"right-end":isRTL?"left-start":"right-start":"start"===dropDirection?placement=alignEnd?isRTL?"right-end":"left-end":isRTL?"right-start":"left-start":"down-centered"===dropDirection?placement="bottom":"up-centered"===dropDirection&&(placement="top"),placement}const DropdownMenu_DropdownMenu=react.forwardRef((({bsPrefix,className,align,rootCloseEvent,flip=!0,show:showProps,renderOnMount,as:Component="div",popperConfig,variant,...props},ref)=>{let alignEnd=!1;const isNavbar=(0,react.useContext)(NavbarContext),prefix=useBootstrapPrefix(bsPrefix,"dropdown-menu"),{align:contextAlign,drop,isRTL}=(0,react.useContext)(react_bootstrap_2_esm_DropdownContext);align=align||contextAlign;const isInputGroup=(0,react.useContext)(InputGroupContext),alignClasses=[];if(align)if("object"==typeof align){const keys=Object.keys(align);if(keys.length){const brkPoint=keys[0],direction=align[brkPoint];alignEnd="start"===direction,alignClasses.push(`${prefix}-${brkPoint}-${direction}`)}}else"end"===align&&(alignEnd=!0);const placement=getDropdownMenuPlacement(alignEnd,drop,isRTL),[menuProps,{hasShown,popper,show,toggle}]=useDropdownMenu({flip,rootCloseEvent,show:showProps,usePopper:!isNavbar&&0===alignClasses.length,offset:[0,2],popperConfig,placement});if(menuProps.ref=esm_useMergedRefs(useWrappedRefWithWarning(ref),menuProps.ref),useIsomorphicEffect((()=>{show&&(null==popper||popper.update())}),[show]),!hasShown&&!renderOnMount&&!isInputGroup)return null;"string"!=typeof Component&&(menuProps.show=show,menuProps.close=()=>null==toggle?void 0:toggle(!1),menuProps.align=align);let style=props.style;return null!=popper&&popper.placement&&(style={...props.style,...menuProps.style},props["x-placement"]=popper.placement),(0,jsx_runtime.jsx)(Component,{...props,...menuProps,style,...(alignClasses.length||isNavbar)&&{"data-bs-popper":"static"},className:classnames_default()(className,prefix,show&&"show",alignEnd&&`${prefix}-end`,variant&&`${prefix}-${variant}`,...alignClasses)})}));DropdownMenu_DropdownMenu.displayName="DropdownMenu";const react_bootstrap_2_esm_DropdownMenu=DropdownMenu_DropdownMenu,DropdownToggle_DropdownToggle=react.forwardRef((({bsPrefix,split,className,childBsPrefix,as:Component=react_bootstrap_2_esm_Button,...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"dropdown-toggle"),dropdownContext=(0,react.useContext)(esm_DropdownContext);void 0!==childBsPrefix&&(props.bsPrefix=childBsPrefix);const[toggleProps]=useDropdownToggle();return toggleProps.ref=esm_useMergedRefs(toggleProps.ref,useWrappedRefWithWarning(ref)),(0,jsx_runtime.jsx)(Component,{className:classnames_default()(className,prefix,split&&`${prefix}-split`,(null==dropdownContext?void 0:dropdownContext.show)&&"show"),...toggleProps,...props})}));DropdownToggle_DropdownToggle.displayName="DropdownToggle";const react_bootstrap_2_esm_DropdownToggle=DropdownToggle_DropdownToggle,DropdownHeader=createWithBsPrefix("dropdown-header",{defaultProps:{role:"heading"}}),DropdownDivider=createWithBsPrefix("dropdown-divider",{Component:"hr",defaultProps:{role:"separator"}}),DropdownItemText=createWithBsPrefix("dropdown-item-text",{Component:"span"}),Dropdown_Dropdown=react.forwardRef(((pProps,ref)=>{const{bsPrefix,drop="down",show,className,align="start",onSelect,onToggle,focusFirstItemOnShow,as:Component="div",navbar:_4,autoClose=!0,...props}=(0,esm.Zw)(pProps,{show:"onToggle"}),isInputGroup=(0,react.useContext)(InputGroupContext),prefix=useBootstrapPrefix(bsPrefix,"dropdown"),isRTL=useIsRTL(),handleToggle=useEventCallback(((nextShow,meta)=>{var source;meta.originalEvent.currentTarget!==document||"keydown"===meta.source&&"Escape"!==meta.originalEvent.key||(meta.source="rootClose"),source=meta.source,(!1===autoClose?"click"===source:"inside"===autoClose?"rootClose"!==source:"outside"!==autoClose||"select"!==source)&&(null==onToggle||onToggle(nextShow,meta))})),placement=getDropdownMenuPlacement("end"===align,drop,isRTL),contextValue=(0,react.useMemo)((()=>({align,drop,isRTL})),[align,drop,isRTL]),directionClasses={down:prefix,"down-centered":`${prefix}-center`,up:"dropup","up-centered":"dropup-center dropup",end:"dropend",start:"dropstart"};return(0,jsx_runtime.jsx)(react_bootstrap_2_esm_DropdownContext.Provider,{value:contextValue,children:(0,jsx_runtime.jsx)(esm_Dropdown,{placement,show,onSelect,onToggle:handleToggle,focusFirstItemOnShow,itemSelector:`.${prefix}-item:not(.disabled):not(:disabled)`,children:isInputGroup?props.children:(0,jsx_runtime.jsx)(Component,{...props,ref,className:classnames_default()(className,show&&"show",directionClasses[drop])})})})}));Dropdown_Dropdown.displayName="Dropdown";const react_bootstrap_2_esm_Dropdown=Object.assign(Dropdown_Dropdown,{Toggle:react_bootstrap_2_esm_DropdownToggle,Menu:react_bootstrap_2_esm_DropdownMenu,Item:react_bootstrap_2_esm_DropdownItem,ItemText:DropdownItemText,Divider:DropdownDivider,Header:DropdownHeader}),alignDirection=node_modules_prop_types_default().oneOf(["start","end"]),alignPropType=node_modules_prop_types_default().oneOfType([alignDirection,node_modules_prop_types_default().shape({sm:alignDirection}),node_modules_prop_types_default().shape({md:alignDirection}),node_modules_prop_types_default().shape({lg:alignDirection}),node_modules_prop_types_default().shape({xl:alignDirection}),node_modules_prop_types_default().shape({xxl:alignDirection}),node_modules_prop_types_default().object]),DropdownButton_propTypes={id:node_modules_prop_types_default().string,href:node_modules_prop_types_default().string,onClick:node_modules_prop_types_default().func,title:node_modules_prop_types_default().node.isRequired,disabled:node_modules_prop_types_default().bool,align:alignPropType,menuRole:node_modules_prop_types_default().string,renderMenuOnMount:node_modules_prop_types_default().bool,rootCloseEvent:node_modules_prop_types_default().string,menuVariant:node_modules_prop_types_default().oneOf(["dark"]),flip:node_modules_prop_types_default().bool,bsPrefix:node_modules_prop_types_default().string,variant:node_modules_prop_types_default().string,size:node_modules_prop_types_default().string},DropdownButton=react.forwardRef((({title,children,bsPrefix,rootCloseEvent,variant,size,menuRole,renderMenuOnMount,disabled,href,id,menuVariant,flip,...props},ref)=>(0,jsx_runtime.jsxs)(react_bootstrap_2_esm_Dropdown,{ref,...props,children:[(0,jsx_runtime.jsx)(react_bootstrap_2_esm_DropdownToggle,{id,href,size,variant,disabled,childBsPrefix:bsPrefix,children:title}),(0,jsx_runtime.jsx)(react_bootstrap_2_esm_DropdownMenu,{role:menuRole,renderOnMount:renderMenuOnMount,rootCloseEvent,variant:menuVariant,flip,children})]})));DropdownButton.displayName="DropdownButton",DropdownButton.propTypes=DropdownButton_propTypes;const esm_DropdownButton=DropdownButton,Feedback_propTypes={type:node_modules_prop_types_default().string,tooltip:node_modules_prop_types_default().bool,as:node_modules_prop_types_default().elementType},Feedback=react.forwardRef((({as:Component="div",className,type="valid",tooltip=!1,...props},ref)=>(0,jsx_runtime.jsx)(Component,{...props,ref,className:classnames_default()(className,`${type}-${tooltip?"tooltip":"feedback"}`)})));Feedback.displayName="Feedback",Feedback.propTypes=Feedback_propTypes;const esm_Feedback=Feedback,esm_FormContext=react.createContext({}),FormCheckInput=react.forwardRef((({id,bsPrefix,className,type="checkbox",isValid=!1,isInvalid=!1,as:Component="input",...props},ref)=>{const{controlId}=(0,react.useContext)(esm_FormContext);return bsPrefix=useBootstrapPrefix(bsPrefix,"form-check-input"),(0,jsx_runtime.jsx)(Component,{...props,ref,type,id:id||controlId,className:classnames_default()(className,bsPrefix,isValid&&"is-valid",isInvalid&&"is-invalid")})}));FormCheckInput.displayName="FormCheckInput";const esm_FormCheckInput=FormCheckInput,FormCheckLabel=react.forwardRef((({bsPrefix,className,htmlFor,...props},ref)=>{const{controlId}=(0,react.useContext)(esm_FormContext);return bsPrefix=useBootstrapPrefix(bsPrefix,"form-check-label"),(0,jsx_runtime.jsx)("label",{...props,ref,htmlFor:htmlFor||controlId,className:classnames_default()(className,bsPrefix)})}));FormCheckLabel.displayName="FormCheckLabel";const esm_FormCheckLabel=FormCheckLabel,FormCheck=react.forwardRef((({id,bsPrefix,bsSwitchPrefix,inline=!1,reverse=!1,disabled=!1,isValid=!1,isInvalid=!1,feedbackTooltip=!1,feedback,feedbackType,className,style,title="",type="checkbox",label,children,as="input",...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"form-check"),bsSwitchPrefix=useBootstrapPrefix(bsSwitchPrefix,"form-switch");const{controlId}=(0,react.useContext)(esm_FormContext),innerFormContext=(0,react.useMemo)((()=>({controlId:id||controlId})),[controlId,id]),hasLabel=!children&&null!=label&&!1!==label||function hasChildOfType(children,type){return react.Children.toArray(children).some((child=>react.isValidElement(child)&&child.type===type))}(children,esm_FormCheckLabel),input=(0,jsx_runtime.jsx)(esm_FormCheckInput,{...props,type:"switch"===type?"checkbox":type,ref,isValid,isInvalid,disabled,as});return(0,jsx_runtime.jsx)(esm_FormContext.Provider,{value:innerFormContext,children:(0,jsx_runtime.jsx)("div",{style,className:classnames_default()(className,hasLabel&&bsPrefix,inline&&`${bsPrefix}-inline`,reverse&&`${bsPrefix}-reverse`,"switch"===type&&bsSwitchPrefix),children:children||(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[input,hasLabel&&(0,jsx_runtime.jsx)(esm_FormCheckLabel,{title,children:label}),feedback&&(0,jsx_runtime.jsx)(esm_Feedback,{type:feedbackType,tooltip:feedbackTooltip,children:feedback})]})})})}));FormCheck.displayName="FormCheck";const esm_FormCheck=Object.assign(FormCheck,{Input:esm_FormCheckInput,Label:esm_FormCheckLabel}),FormControl=react.forwardRef((({bsPrefix,type,size,htmlSize,id,className,isValid=!1,isInvalid=!1,plaintext,readOnly,as:Component="input",...props},ref)=>{const{controlId}=(0,react.useContext)(esm_FormContext);let classes;return bsPrefix=useBootstrapPrefix(bsPrefix,"form-control"),classes=plaintext?{[`${bsPrefix}-plaintext`]:!0}:{[bsPrefix]:!0,[`${bsPrefix}-${size}`]:size},(0,jsx_runtime.jsx)(Component,{...props,type,size:htmlSize,ref,readOnly,id:id||controlId,className:classnames_default()(className,classes,isValid&&"is-valid",isInvalid&&"is-invalid","color"===type&&`${bsPrefix}-color`)})}));FormControl.displayName="FormControl";const esm_FormControl=Object.assign(FormControl,{Feedback:esm_Feedback}),FormFloating=createWithBsPrefix("form-floating"),FormGroup=react.forwardRef((({controlId,as:Component="div",...props},ref)=>{const context=(0,react.useMemo)((()=>({controlId})),[controlId]);return(0,jsx_runtime.jsx)(esm_FormContext.Provider,{value:context,children:(0,jsx_runtime.jsx)(Component,{...props,ref})})}));FormGroup.displayName="FormGroup";const esm_FormGroup=FormGroup,FormLabel=react.forwardRef((({as:Component="label",bsPrefix,column=!1,visuallyHidden=!1,className,htmlFor,...props},ref)=>{const{controlId}=(0,react.useContext)(esm_FormContext);bsPrefix=useBootstrapPrefix(bsPrefix,"form-label");let columnClass="col-form-label";"string"==typeof column&&(columnClass=`${columnClass} ${columnClass}-${column}`);const classes=classnames_default()(className,bsPrefix,visuallyHidden&&"visually-hidden",column&&columnClass);return htmlFor=htmlFor||controlId,column?(0,jsx_runtime.jsx)(esm_Col,{ref,as:"label",className:classes,htmlFor,...props}):(0,jsx_runtime.jsx)(Component,{ref,className:classes,htmlFor,...props})}));FormLabel.displayName="FormLabel";const esm_FormLabel=FormLabel,FormRange=react.forwardRef((({bsPrefix,className,id,...props},ref)=>{const{controlId}=(0,react.useContext)(esm_FormContext);return bsPrefix=useBootstrapPrefix(bsPrefix,"form-range"),(0,jsx_runtime.jsx)("input",{...props,type:"range",ref,className:classnames_default()(className,bsPrefix),id:id||controlId})}));FormRange.displayName="FormRange";const esm_FormRange=FormRange,FormSelect=react.forwardRef((({bsPrefix,size,htmlSize,className,isValid=!1,isInvalid=!1,id,...props},ref)=>{const{controlId}=(0,react.useContext)(esm_FormContext);return bsPrefix=useBootstrapPrefix(bsPrefix,"form-select"),(0,jsx_runtime.jsx)("select",{...props,size:htmlSize,ref,className:classnames_default()(className,bsPrefix,size&&`${bsPrefix}-${size}`,isValid&&"is-valid",isInvalid&&"is-invalid"),id:id||controlId})}));FormSelect.displayName="FormSelect";const esm_FormSelect=FormSelect,FormText=react.forwardRef((({bsPrefix,className,as:Component="small",muted,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"form-text"),(0,jsx_runtime.jsx)(Component,{...props,ref,className:classnames_default()(className,bsPrefix,muted&&"text-muted")}))));FormText.displayName="FormText";const esm_FormText=FormText,Switch=react.forwardRef(((props,ref)=>(0,jsx_runtime.jsx)(esm_FormCheck,{...props,ref,type:"switch"})));Switch.displayName="Switch";const esm_Switch=Object.assign(Switch,{Input:esm_FormCheck.Input,Label:esm_FormCheck.Label}),FloatingLabel=react.forwardRef((({bsPrefix,className,children,controlId,label,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"form-floating"),(0,jsx_runtime.jsxs)(esm_FormGroup,{ref,className:classnames_default()(className,bsPrefix),controlId,...props,children:[children,(0,jsx_runtime.jsx)("label",{htmlFor:controlId,children:label})]}))));FloatingLabel.displayName="FloatingLabel";const esm_FloatingLabel=FloatingLabel,Form_propTypes={_ref:node_modules_prop_types_default().any,validated:node_modules_prop_types_default().bool,as:node_modules_prop_types_default().elementType},Form=react.forwardRef((({className,validated,as:Component="form",...props},ref)=>(0,jsx_runtime.jsx)(Component,{...props,ref,className:classnames_default()(className,validated&&"was-validated")})));Form.displayName="Form",Form.propTypes=Form_propTypes;const esm_Form=Object.assign(Form,{Group:esm_FormGroup,Control:esm_FormControl,Floating:FormFloating,Check:esm_FormCheck,Switch:esm_Switch,Label:esm_FormLabel,Text:esm_FormText,Range:esm_FormRange,Select:esm_FormSelect,FloatingLabel:esm_FloatingLabel}),Container=react.forwardRef((({bsPrefix,fluid=!1,as:Component="div",className,...props},ref)=>{const prefix=useBootstrapPrefix(bsPrefix,"container"),suffix="string"==typeof fluid?`-${fluid}`:"-fluid";return(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,fluid?`${prefix}${suffix}`:prefix)})}));Container.displayName="Container";const esm_Container=Container,Image_propTypes={bsPrefix:node_modules_prop_types_default().string,fluid:node_modules_prop_types_default().bool,rounded:node_modules_prop_types_default().bool,roundedCircle:node_modules_prop_types_default().bool,thumbnail:node_modules_prop_types_default().bool},Image_Image=react.forwardRef((({bsPrefix,className,fluid=!1,rounded=!1,roundedCircle=!1,thumbnail=!1,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"img"),(0,jsx_runtime.jsx)("img",{ref,...props,className:classnames_default()(className,fluid&&`${bsPrefix}-fluid`,rounded&&"rounded",roundedCircle&&"rounded-circle",thumbnail&&`${bsPrefix}-thumbnail`)}))));Image_Image.displayName="Image";const esm_Image=Image_Image,FigureImage=react.forwardRef((({className,fluid=!0,...props},ref)=>(0,jsx_runtime.jsx)(esm_Image,{ref,...props,fluid,className:classnames_default()(className,"figure-img")})));FigureImage.displayName="FigureImage",FigureImage.propTypes=Image_propTypes;const esm_FigureImage=FigureImage,esm_FigureCaption=createWithBsPrefix("figure-caption",{Component:"figcaption"}),Figure=createWithBsPrefix("figure",{Component:"figure"}),esm_Figure=Object.assign(Figure,{Image:esm_FigureImage,Caption:esm_FigureCaption}),InputGroupText=createWithBsPrefix("input-group-text",{Component:"span"}),InputGroup=react.forwardRef((({bsPrefix,size,hasValidation,className,as:Component="div",...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"input-group");const contextValue=(0,react.useMemo)((()=>({})),[]);return(0,jsx_runtime.jsx)(InputGroupContext.Provider,{value:contextValue,children:(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,bsPrefix,size&&`${bsPrefix}-${size}`,hasValidation&&"has-validation")})})}));InputGroup.displayName="InputGroup";const esm_InputGroup=Object.assign(InputGroup,{Text:InputGroupText,Radio:props=>(0,jsx_runtime.jsx)(InputGroupText,{children:(0,jsx_runtime.jsx)(esm_FormCheckInput,{type:"radio",...props})}),Checkbox:props=>(0,jsx_runtime.jsx)(InputGroupText,{children:(0,jsx_runtime.jsx)(esm_FormCheckInput,{type:"checkbox",...props})})}),esm_TabContext=react.createContext(null),NavItem_excluded=["as","active","eventKey"];function useNavItem({key,onClick,active,id,role,disabled}){const parentOnSelect=(0,react.useContext)(esm_SelectableContext),navContext=(0,react.useContext)(esm_NavContext),tabContext=(0,react.useContext)(esm_TabContext);let isActive=active;const props={role};if(navContext){role||"tablist"!==navContext.role||(props.role="tab");const contextControllerId=navContext.getControllerId(null!=key?key:null),contextControlledId=navContext.getControlledId(null!=key?key:null);props[dataAttr("event-key")]=key,props.id=contextControllerId||id,isActive=null==active&&null!=key?navContext.activeKey===key:active,!isActive&&(null!=tabContext&&tabContext.unmountOnExit||null!=tabContext&&tabContext.mountOnEnter)||(props["aria-controls"]=contextControlledId)}return"tab"===props.role&&(props["aria-selected"]=isActive,isActive||(props.tabIndex=-1),disabled&&(props.tabIndex=-1,props["aria-disabled"]=!0)),props.onClick=useEventCallback((e=>{disabled||(null==onClick||onClick(e),null!=key&&parentOnSelect&&!e.isPropagationStopped()&&parentOnSelect(key,e))})),[props,{isActive}]}const NavItem=react.forwardRef(((_ref,ref)=>{let{as:Component=esm_Button,active,eventKey}=_ref,options=function NavItem_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,NavItem_excluded);const[props,meta]=useNavItem(Object.assign({key:makeEventKey(eventKey,options.href),active},options));return props[dataAttr("active")]=meta.isActive,(0,jsx_runtime.jsx)(Component,Object.assign({},options,props,{ref}))}));NavItem.displayName="NavItem";const esm_NavItem=NavItem,Nav_excluded=["as","onSelect","activeKey","role","onKeyDown"];const Nav_noop=()=>{},EVENT_KEY_ATTR=dataAttr("event-key"),Nav=react.forwardRef(((_ref,ref)=>{let{as:Component="div",onSelect,activeKey,role,onKeyDown}=_ref,props=function Nav_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,Nav_excluded);const forceUpdate=useForceUpdate(),needsRefocusRef=(0,react.useRef)(!1),parentOnSelect=(0,react.useContext)(esm_SelectableContext),tabContext=(0,react.useContext)(esm_TabContext);let getControlledId,getControllerId;tabContext&&(role=role||"tablist",activeKey=tabContext.activeKey,getControlledId=tabContext.getControlledId,getControllerId=tabContext.getControllerId);const listNode=(0,react.useRef)(null),getNextActiveTab=offset=>{const currentListNode=listNode.current;if(!currentListNode)return null;const items=qsa(currentListNode,`[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`),activeChild=currentListNode.querySelector("[aria-selected=true]");if(!activeChild||activeChild!==document.activeElement)return null;const index=items.indexOf(activeChild);if(-1===index)return null;let nextIndex=index+offset;return nextIndex>=items.length&&(nextIndex=0),nextIndex<0&&(nextIndex=items.length-1),items[nextIndex]},handleSelect=(key,event)=>{null!=key&&(null==onSelect||onSelect(key,event),null==parentOnSelect||parentOnSelect(key,event))};(0,react.useEffect)((()=>{if(listNode.current&&needsRefocusRef.current){const activeChild=listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);null==activeChild||activeChild.focus()}needsRefocusRef.current=!1}));const mergedRef=esm_useMergedRefs(ref,listNode);return(0,jsx_runtime.jsx)(esm_SelectableContext.Provider,{value:handleSelect,children:(0,jsx_runtime.jsx)(esm_NavContext.Provider,{value:{role,activeKey:makeEventKey(activeKey),getControlledId:getControlledId||Nav_noop,getControllerId:getControllerId||Nav_noop},children:(0,jsx_runtime.jsx)(Component,Object.assign({},props,{onKeyDown:event=>{if(null==onKeyDown||onKeyDown(event),!tabContext)return;let nextActiveChild;switch(event.key){case"ArrowLeft":case"ArrowUp":nextActiveChild=getNextActiveTab(-1);break;case"ArrowRight":case"ArrowDown":nextActiveChild=getNextActiveTab(1);break;default:return}nextActiveChild&&(event.preventDefault(),handleSelect(nextActiveChild.dataset[function dataProp(property){return`rrUi${property}`}("EventKey")]||null,event),needsRefocusRef.current=!0,forceUpdate())},ref:mergedRef,role}))})})}));Nav.displayName="Nav";const esm_Nav=Object.assign(Nav,{Item:esm_NavItem}),ListGroupItem=react.forwardRef((({bsPrefix,active,disabled,eventKey,className,variant,action,as,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"list-group-item");const[navItemProps,meta]=useNavItem({key:makeEventKey(eventKey,props.href),active,...props}),handleClick=useEventCallback((event=>{if(disabled)return event.preventDefault(),void event.stopPropagation();navItemProps.onClick(event)}));disabled&&void 0===props.tabIndex&&(props.tabIndex=-1,props["aria-disabled"]=!0);const Component=as||(action?props.href?"a":"button":"div");return(0,jsx_runtime.jsx)(Component,{ref,...props,...navItemProps,onClick:handleClick,className:classnames_default()(className,bsPrefix,meta.isActive&&"active",disabled&&"disabled",variant&&`${bsPrefix}-${variant}`,action&&`${bsPrefix}-action`)})}));ListGroupItem.displayName="ListGroupItem";const esm_ListGroupItem=ListGroupItem,ListGroup=react.forwardRef(((props,ref)=>{const{className,bsPrefix:initialBsPrefix,variant,horizontal,numbered,as="div",...controlledProps}=(0,esm.Zw)(props,{activeKey:"onSelect"}),bsPrefix=useBootstrapPrefix(initialBsPrefix,"list-group");let horizontalVariant;return horizontal&&(horizontalVariant=!0===horizontal?"horizontal":`horizontal-${horizontal}`),(0,jsx_runtime.jsx)(esm_Nav,{ref,...controlledProps,as,className:classnames_default()(className,bsPrefix,variant&&`${bsPrefix}-${variant}`,horizontalVariant&&`${bsPrefix}-${horizontalVariant}`,numbered&&`${bsPrefix}-numbered`)})}));ListGroup.displayName="ListGroup";const esm_ListGroup=Object.assign(ListGroup,{Item:esm_ListGroupItem});var size;function scrollbarSize(recalc){if((!size&&0!==size||recalc)&&canUseDOM){var scrollDiv=document.createElement("div");scrollDiv.style.position="absolute",scrollDiv.style.top="-9999px",scrollDiv.style.width="50px",scrollDiv.style.height="50px",scrollDiv.style.overflow="scroll",document.body.appendChild(scrollDiv),size=scrollDiv.offsetWidth-scrollDiv.clientWidth,document.body.removeChild(scrollDiv)}return size}function activeElement(doc){void 0===doc&&(doc=ownerDocument_ownerDocument());try{var active=doc.activeElement;return active&&active.nodeName?active:null}catch(e){return doc.body}}function esm_getComputedStyle_getComputedStyle(node,psuedoElement){return function ownerWindow_ownerWindow(node){var doc=ownerDocument_ownerDocument(node);return doc&&doc.defaultView||window}(node).getComputedStyle(node,psuedoElement)}var hyphenate_rUpper=/([A-Z])/g;var hyphenateStyle_msPattern=/^ms-/;function hyphenateStyle_hyphenateStyleName(string){return function hyphenate_hyphenate(string){return string.replace(hyphenate_rUpper,"-$1").toLowerCase()}(string).replace(hyphenateStyle_msPattern,"-ms-")}var isTransform_supportedTransforms=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;const esm_css=function css_style(node,property){var css="",transforms="";if("string"==typeof property)return node.style.getPropertyValue(hyphenateStyle_hyphenateStyleName(property))||esm_getComputedStyle_getComputedStyle(node).getPropertyValue(hyphenateStyle_hyphenateStyleName(property));Object.keys(property).forEach((function(key){var value=property[key];value||0===value?!function isTransform_isTransform(value){return!(!value||!isTransform_supportedTransforms.test(value))}(key)?css+=hyphenateStyle_hyphenateStyleName(key)+": "+value+";":transforms+=key+"("+value+") ":node.style.removeProperty(hyphenateStyle_hyphenateStyleName(key))})),transforms&&(css+="transform: "+transforms+";"),node.style.cssText+=";"+css};const OPEN_DATA_ATTRIBUTE=dataAttr("modal-open");const esm_ModalManager=class ModalManager{constructor({ownerDocument,handleContainerOverflow=!0,isRTL=!1}={}){this.handleContainerOverflow=handleContainerOverflow,this.isRTL=isRTL,this.modals=[],this.ownerDocument=ownerDocument}getScrollbarWidth(){return function getBodyScrollbarWidth(ownerDocument=document){const window=ownerDocument.defaultView;return Math.abs(window.innerWidth-ownerDocument.documentElement.clientWidth)}(this.ownerDocument)}getElement(){return(this.ownerDocument||document).body}setModalAttributes(_modal){}removeModalAttributes(_modal){}setContainerStyle(containerState){const style={overflow:"hidden"},paddingProp=this.isRTL?"paddingLeft":"paddingRight",container=this.getElement();containerState.style={overflow:container.style.overflow,[paddingProp]:container.style[paddingProp]},containerState.scrollBarWidth&&(style[paddingProp]=`${parseInt(esm_css(container,paddingProp)||"0",10)+containerState.scrollBarWidth}px`),container.setAttribute(OPEN_DATA_ATTRIBUTE,""),esm_css(container,style)}reset(){[...this.modals].forEach((m=>this.remove(m)))}removeContainerStyle(containerState){const container=this.getElement();container.removeAttribute(OPEN_DATA_ATTRIBUTE),Object.assign(container.style,containerState.style)}add(modal){let modalIdx=this.modals.indexOf(modal);return-1!==modalIdx?modalIdx:(modalIdx=this.modals.length,this.modals.push(modal),this.setModalAttributes(modal),0!==modalIdx||(this.state={scrollBarWidth:this.getScrollbarWidth(),style:{}},this.handleContainerOverflow&&this.setContainerStyle(this.state)),modalIdx)}remove(modal){const modalIdx=this.modals.indexOf(modal);-1!==modalIdx&&(this.modals.splice(modalIdx,1),!this.modals.length&&this.handleContainerOverflow&&this.removeContainerStyle(this.state),this.removeModalAttributes(modal))}isTopModal(modal){return!!this.modals.length&&this.modals[this.modals.length-1]===modal}},resolveContainerRef=(ref,document)=>esm_canUseDOM?null==ref?(document||ownerDocument_ownerDocument()).body:("function"==typeof ref&&(ref=ref()),ref&&"current"in ref&&(ref=ref.current),ref&&("nodeType"in ref||ref.getBoundingClientRect)?ref:null):null;function useWaitForDOMRef(ref,onResolved){const window=useWindow(),[resolvedRef,setRef]=(0,react.useState)((()=>resolveContainerRef(ref,null==window?void 0:window.document)));if(!resolvedRef){const earlyRef=resolveContainerRef(ref);earlyRef&&setRef(earlyRef)}return(0,react.useEffect)((()=>{onResolved&&resolvedRef&&onResolved(resolvedRef)}),[onResolved,resolvedRef]),(0,react.useEffect)((()=>{const nextRef=resolveContainerRef(ref);nextRef!==resolvedRef&&setRef(nextRef)}),[ref,resolvedRef]),resolvedRef}const esm_NoopTransition=function NoopTransition({children,in:inProp,onExited,mountOnEnter,unmountOnExit}){const ref=(0,react.useRef)(null),hasEnteredRef=(0,react.useRef)(inProp),handleExited=useEventCallback(onExited);(0,react.useEffect)((()=>{inProp?hasEnteredRef.current=!0:handleExited(ref.current)}),[inProp,handleExited]);const combinedRef=esm_useMergedRefs(ref,children.ref),child=(0,react.cloneElement)(children,{ref:combinedRef});return inProp?child:unmountOnExit||!hasEnteredRef.current&&mountOnEnter?null:child};function ImperativeTransition({children,in:inProp,onExited,onEntered,transition}){const[exited,setExited]=(0,react.useState)(!inProp);inProp&&exited&&setExited(!1);const ref=function useTransition({in:inProp,onTransition}){const ref=(0,react.useRef)(null),isInitialRef=(0,react.useRef)(!0),handleTransition=useEventCallback(onTransition);return useIsomorphicEffect((()=>{if(!ref.current)return;let stale=!1;return handleTransition({in:inProp,element:ref.current,initial:isInitialRef.current,isStale:()=>stale}),()=>{stale=!0}}),[inProp,handleTransition]),useIsomorphicEffect((()=>(isInitialRef.current=!1,()=>{isInitialRef.current=!0})),[]),ref}({in:!!inProp,onTransition:options=>{Promise.resolve(transition(options)).then((()=>{options.isStale()||(options.in?null==onEntered||onEntered(options.element,options.initial):(setExited(!0),null==onExited||onExited(options.element)))}),(error=>{throw options.in||setExited(!0),error}))}}),combinedRef=esm_useMergedRefs(ref,children.ref);return exited&&!inProp?null:(0,react.cloneElement)(children,{ref:combinedRef})}function renderTransition(Component,runTransition,props){return Component?(0,jsx_runtime.jsx)(Component,Object.assign({},props)):runTransition?(0,jsx_runtime.jsx)(ImperativeTransition,Object.assign({},props,{transition:runTransition})):(0,jsx_runtime.jsx)(esm_NoopTransition,Object.assign({},props))}function isEscKey(e){return"Escape"===e.code||27===e.keyCode}const Modal_excluded=["show","role","className","style","children","backdrop","keyboard","onBackdropClick","onEscapeKeyDown","transition","runTransition","backdropTransition","runBackdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","manager","container","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered"];let manager;function useModalManager(provided){const window=useWindow(),modalManager=provided||function getManager(window){return manager||(manager=new esm_ModalManager({ownerDocument:null==window?void 0:window.document})),manager}(window),modal=(0,react.useRef)({dialog:null,backdrop:null});return Object.assign(modal.current,{add:()=>modalManager.add(modal.current),remove:()=>modalManager.remove(modal.current),isTopModal:()=>modalManager.isTopModal(modal.current),setDialogRef:(0,react.useCallback)((ref=>{modal.current.dialog=ref}),[]),setBackdropRef:(0,react.useCallback)((ref=>{modal.current.backdrop=ref}),[])})}const Modal=(0,react.forwardRef)(((_ref,ref)=>{let{show=!1,role="dialog",className,style,children,backdrop=!0,keyboard=!0,onBackdropClick,onEscapeKeyDown,transition,runTransition,backdropTransition,runBackdropTransition,autoFocus=!0,enforceFocus=!0,restoreFocus=!0,restoreFocusOptions,renderDialog,renderBackdrop=props=>(0,jsx_runtime.jsx)("div",Object.assign({},props)),manager:providedManager,container:containerRef,onShow,onHide=()=>{},onExit,onExited,onExiting,onEnter,onEntering,onEntered}=_ref,rest=function Modal_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,Modal_excluded);const container=useWaitForDOMRef(containerRef),modal=useModalManager(providedManager),isMounted=useMounted(),prevShow=usePrevious(show),[exited,setExited]=(0,react.useState)(!show),lastFocusRef=(0,react.useRef)(null);(0,react.useImperativeHandle)(ref,(()=>modal),[modal]),esm_canUseDOM&&!prevShow&&show&&(lastFocusRef.current=activeElement()),show&&exited&&setExited(!1);const handleShow=useEventCallback((()=>{if(modal.add(),removeKeydownListenerRef.current=dom_helpers_esm_listen(document,"keydown",handleDocumentKeyDown),removeFocusListenerRef.current=dom_helpers_esm_listen(document,"focus",(()=>setTimeout(handleEnforceFocus)),!0),onShow&&onShow(),autoFocus){const currentActiveElement=activeElement(document);modal.dialog&&currentActiveElement&&!contains_contains(modal.dialog,currentActiveElement)&&(lastFocusRef.current=currentActiveElement,modal.dialog.focus())}})),handleHide=useEventCallback((()=>{var _lastFocusRef$current;(modal.remove(),null==removeKeydownListenerRef.current||removeKeydownListenerRef.current(),null==removeFocusListenerRef.current||removeFocusListenerRef.current(),restoreFocus)&&(null==(_lastFocusRef$current=lastFocusRef.current)||null==_lastFocusRef$current.focus||_lastFocusRef$current.focus(restoreFocusOptions),lastFocusRef.current=null)}));(0,react.useEffect)((()=>{show&&container&&handleShow()}),[show,container,handleShow]),(0,react.useEffect)((()=>{exited&&handleHide()}),[exited,handleHide]),useWillUnmount((()=>{handleHide()}));const handleEnforceFocus=useEventCallback((()=>{if(!enforceFocus||!isMounted()||!modal.isTopModal())return;const currentActiveElement=activeElement();modal.dialog&&currentActiveElement&&!contains_contains(modal.dialog,currentActiveElement)&&modal.dialog.focus()})),handleBackdropClick=useEventCallback((e=>{e.target===e.currentTarget&&(null==onBackdropClick||onBackdropClick(e),!0===backdrop&&onHide())})),handleDocumentKeyDown=useEventCallback((e=>{keyboard&&isEscKey(e)&&modal.isTopModal()&&(null==onEscapeKeyDown||onEscapeKeyDown(e),e.defaultPrevented||onHide())})),removeFocusListenerRef=(0,react.useRef)(),removeKeydownListenerRef=(0,react.useRef)();if(!container)return null;const dialogProps=Object.assign({role,ref:modal.setDialogRef,"aria-modal":"dialog"===role||void 0},rest,{style,className,tabIndex:-1});let dialog=renderDialog?renderDialog(dialogProps):(0,jsx_runtime.jsx)("div",Object.assign({},dialogProps,{children:react.cloneElement(children,{role:"document"})}));dialog=renderTransition(transition,runTransition,{unmountOnExit:!0,mountOnEnter:!0,appear:!0,in:!!show,onExit,onExiting,onExited:(...args)=>{setExited(!0),null==onExited||onExited(...args)},onEnter,onEntering,onEntered,children:dialog});let backdropElement=null;return backdrop&&(backdropElement=renderBackdrop({ref:modal.setBackdropRef,onClick:handleBackdropClick}),backdropElement=renderTransition(backdropTransition,runBackdropTransition,{in:!!show,appear:!0,mountOnEnter:!0,unmountOnExit:!0,children:backdropElement})),(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:react_dom.createPortal((0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[backdropElement,dialog]}),container)})}));Modal.displayName="Modal";const esm_Modal=Object.assign(Modal,{Manager:esm_ModalManager});function hasClass(element,className){return element.classList?!!className&&element.classList.contains(className):-1!==(" "+(element.className.baseVal||element.className)+" ").indexOf(" "+className+" ")}var querySelectorAll_toArray=Function.prototype.bind.call(Function.prototype.call,[].slice);function querySelectorAll_qsa(element,selector){return querySelectorAll_toArray(element.querySelectorAll(selector))}function replaceClassName(origClass,classToRemove){return origClass.replace(new RegExp("(^|\\s)"+classToRemove+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}const Selector_FIXED_CONTENT=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Selector_STICKY_CONTENT=".sticky-top",Selector_NAVBAR_TOGGLER=".navbar-toggler";class BootstrapModalManager extends esm_ModalManager{adjustAndStore(prop,element,adjust){const actual=element.style[prop];element.dataset[prop]=actual,css(element,{[prop]:`${parseFloat(css(element,prop))+adjust}px`})}restore(prop,element){const value=element.dataset[prop];void 0!==value&&(delete element.dataset[prop],css(element,{[prop]:value}))}setContainerStyle(containerState){super.setContainerStyle(containerState);const container=this.getElement();if(function addClass(element,className){element.classList?element.classList.add(className):hasClass(element,className)||("string"==typeof element.className?element.className=element.className+" "+className:element.setAttribute("class",(element.className&&element.className.baseVal||"")+" "+className))}(container,"modal-open"),!containerState.scrollBarWidth)return;const paddingProp=this.isRTL?"paddingLeft":"paddingRight",marginProp=this.isRTL?"marginLeft":"marginRight";querySelectorAll_qsa(container,Selector_FIXED_CONTENT).forEach((el=>this.adjustAndStore(paddingProp,el,containerState.scrollBarWidth))),querySelectorAll_qsa(container,Selector_STICKY_CONTENT).forEach((el=>this.adjustAndStore(marginProp,el,-containerState.scrollBarWidth))),querySelectorAll_qsa(container,Selector_NAVBAR_TOGGLER).forEach((el=>this.adjustAndStore(marginProp,el,containerState.scrollBarWidth)))}removeContainerStyle(containerState){super.removeContainerStyle(containerState);const container=this.getElement();!function removeClass(element,className){element.classList?element.classList.remove(className):"string"==typeof element.className?element.className=replaceClassName(element.className,className):element.setAttribute("class",replaceClassName(element.className&&element.className.baseVal||"",className))}(container,"modal-open");const paddingProp=this.isRTL?"paddingLeft":"paddingRight",marginProp=this.isRTL?"marginLeft":"marginRight";querySelectorAll_qsa(container,Selector_FIXED_CONTENT).forEach((el=>this.restore(paddingProp,el))),querySelectorAll_qsa(container,Selector_STICKY_CONTENT).forEach((el=>this.restore(marginProp,el))),querySelectorAll_qsa(container,Selector_NAVBAR_TOGGLER).forEach((el=>this.restore(marginProp,el)))}}let sharedManager;function getSharedManager(options){return sharedManager||(sharedManager=new BootstrapModalManager(options)),sharedManager}const esm_BootstrapModalManager=BootstrapModalManager,ModalBody=createWithBsPrefix("modal-body"),esm_ModalContext=react.createContext({onHide(){}}),ModalDialog=react.forwardRef((({bsPrefix,className,contentClassName,centered,size,fullscreen,children,scrollable,...props},ref)=>{const dialogClass=`${bsPrefix=useBootstrapPrefix(bsPrefix,"modal")}-dialog`,fullScreenClass="string"==typeof fullscreen?`${bsPrefix}-fullscreen-${fullscreen}`:`${bsPrefix}-fullscreen`;return(0,jsx_runtime.jsx)("div",{...props,ref,className:classnames_default()(dialogClass,className,size&&`${bsPrefix}-${size}`,centered&&`${dialogClass}-centered`,scrollable&&`${dialogClass}-scrollable`,fullscreen&&fullScreenClass),children:(0,jsx_runtime.jsx)("div",{className:classnames_default()(`${bsPrefix}-content`,contentClassName),children})})}));ModalDialog.displayName="ModalDialog";const esm_ModalDialog=ModalDialog,ModalFooter=createWithBsPrefix("modal-footer"),AbstractModalHeader=react.forwardRef((({closeLabel="Close",closeVariant,closeButton=!1,onHide,children,...props},ref)=>{const context=(0,react.useContext)(esm_ModalContext),handleClick=useEventCallback((()=>{null==context||context.onHide(),null==onHide||onHide()}));return(0,jsx_runtime.jsxs)("div",{ref,...props,children:[children,closeButton&&(0,jsx_runtime.jsx)(esm_CloseButton,{"aria-label":closeLabel,variant:closeVariant,onClick:handleClick})]})})),esm_AbstractModalHeader=AbstractModalHeader,ModalHeader=react.forwardRef((({bsPrefix,className,closeLabel="Close",closeButton=!1,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"modal-header"),(0,jsx_runtime.jsx)(esm_AbstractModalHeader,{ref,...props,className:classnames_default()(className,bsPrefix),closeLabel,closeButton}))));ModalHeader.displayName="ModalHeader";const esm_ModalHeader=ModalHeader,ModalTitle=createWithBsPrefix("modal-title",{Component:divWithClassName("h4")});function DialogTransition(props){return(0,jsx_runtime.jsx)(esm_Fade,{...props,timeout:null})}function BackdropTransition(props){return(0,jsx_runtime.jsx)(esm_Fade,{...props,timeout:null})}const Modal_Modal=react.forwardRef((({bsPrefix,className,style,dialogClassName,contentClassName,children,dialogAs:Dialog=esm_ModalDialog,"aria-labelledby":ariaLabelledby,"aria-describedby":ariaDescribedby,"aria-label":ariaLabel,show=!1,animation=!0,backdrop=!0,keyboard=!0,onEscapeKeyDown,onShow,onHide,container,autoFocus=!0,enforceFocus=!0,restoreFocus=!0,restoreFocusOptions,onEntered,onExit,onExiting,onEnter,onEntering,onExited,backdropClassName,manager:propsManager,...props},ref)=>{const[modalStyle,setStyle]=(0,react.useState)({}),[animateStaticModal,setAnimateStaticModal]=(0,react.useState)(!1),waitingForMouseUpRef=(0,react.useRef)(!1),ignoreBackdropClickRef=(0,react.useRef)(!1),removeStaticModalAnimationRef=(0,react.useRef)(null),[modal,setModalRef]=useCallbackRef(),mergedRef=esm_useMergedRefs(ref,setModalRef),handleHide=useEventCallback(onHide),isRTL=useIsRTL();bsPrefix=useBootstrapPrefix(bsPrefix,"modal");const modalContext=(0,react.useMemo)((()=>({onHide:handleHide})),[handleHide]);function getModalManager(){return propsManager||getSharedManager({isRTL})}function updateDialogStyle(node){if(!canUseDOM)return;const containerIsOverflowing=getModalManager().getScrollbarWidth()>0,modalIsOverflowing=node.scrollHeight>ownerDocument(node).documentElement.clientHeight;setStyle({paddingRight:containerIsOverflowing&&!modalIsOverflowing?scrollbarSize():void 0,paddingLeft:!containerIsOverflowing&&modalIsOverflowing?scrollbarSize():void 0})}const handleWindowResize=useEventCallback((()=>{modal&&updateDialogStyle(modal.dialog)}));useWillUnmount((()=>{esm_removeEventListener(window,"resize",handleWindowResize),null==removeStaticModalAnimationRef.current||removeStaticModalAnimationRef.current()}));const handleDialogMouseDown=()=>{waitingForMouseUpRef.current=!0},handleMouseUp=e=>{waitingForMouseUpRef.current&&modal&&e.target===modal.dialog&&(ignoreBackdropClickRef.current=!0),waitingForMouseUpRef.current=!1},handleStaticModalAnimation=()=>{setAnimateStaticModal(!0),removeStaticModalAnimationRef.current=transitionEnd(modal.dialog,(()=>{setAnimateStaticModal(!1)}))},handleClick=e=>{"static"!==backdrop?ignoreBackdropClickRef.current||e.target!==e.currentTarget?ignoreBackdropClickRef.current=!1:null==onHide||onHide():(e=>{e.target===e.currentTarget&&handleStaticModalAnimation()})(e)},renderBackdrop=(0,react.useCallback)((backdropProps=>(0,jsx_runtime.jsx)("div",{...backdropProps,className:classnames_default()(`${bsPrefix}-backdrop`,backdropClassName,!animation&&"show")})),[animation,backdropClassName,bsPrefix]),baseModalStyle={...style,...modalStyle};baseModalStyle.display="block";return(0,jsx_runtime.jsx)(esm_ModalContext.Provider,{value:modalContext,children:(0,jsx_runtime.jsx)(esm_Modal,{show,ref:mergedRef,backdrop,container,keyboard:!0,autoFocus,enforceFocus,restoreFocus,restoreFocusOptions,onEscapeKeyDown:e=>{keyboard?null==onEscapeKeyDown||onEscapeKeyDown(e):(e.preventDefault(),"static"===backdrop&&handleStaticModalAnimation())},onShow,onHide,onEnter:(node,isAppearing)=>{node&&updateDialogStyle(node),null==onEnter||onEnter(node,isAppearing)},onEntering:(node,isAppearing)=>{null==onEntering||onEntering(node,isAppearing),esm_addEventListener(window,"resize",handleWindowResize)},onEntered,onExit:node=>{null==removeStaticModalAnimationRef.current||removeStaticModalAnimationRef.current(),null==onExit||onExit(node)},onExiting,onExited:node=>{node&&(node.style.display=""),null==onExited||onExited(node),esm_removeEventListener(window,"resize",handleWindowResize)},manager:getModalManager(),transition:animation?DialogTransition:void 0,backdropTransition:animation?BackdropTransition:void 0,renderBackdrop,renderDialog:dialogProps=>(0,jsx_runtime.jsx)("div",{role:"dialog",...dialogProps,style:baseModalStyle,className:classnames_default()(className,bsPrefix,animateStaticModal&&`${bsPrefix}-static`,!animation&&"show"),onClick:backdrop?handleClick:void 0,onMouseUp:handleMouseUp,"aria-label":ariaLabel,"aria-labelledby":ariaLabelledby,"aria-describedby":ariaDescribedby,children:(0,jsx_runtime.jsx)(Dialog,{...props,onMouseDown:handleDialogMouseDown,className:dialogClassName,contentClassName,children})})})})}));Modal_Modal.displayName="Modal";const react_bootstrap_2_esm_Modal=Object.assign(Modal_Modal,{Body:ModalBody,Header:esm_ModalHeader,Title:ModalTitle,Footer:ModalFooter,Dialog:esm_ModalDialog,TRANSITION_DURATION:300,BACKDROP_TRANSITION_DURATION:150});__webpack_require__("./node_modules/react-bootstrap-2/node_modules/prop-types-extra/lib/all.js");const react_bootstrap_2_esm_NavItem=createWithBsPrefix("nav-item"),NavLink=react.forwardRef((({bsPrefix,className,as:Component=esm_Anchor,active,eventKey,disabled=!1,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"nav-link");const[navItemProps,meta]=useNavItem({key:makeEventKey(eventKey,props.href),active,disabled,...props});return(0,jsx_runtime.jsx)(Component,{...props,...navItemProps,ref,disabled,className:classnames_default()(className,bsPrefix,disabled&&"disabled",meta.isActive&&"active")})}));NavLink.displayName="NavLink";const esm_NavLink=NavLink,Nav_Nav=react.forwardRef(((uncontrolledProps,ref)=>{const{as="div",bsPrefix:initialBsPrefix,variant,fill=!1,justify=!1,navbar,navbarScroll,className,activeKey,...props}=(0,esm.Zw)(uncontrolledProps,{activeKey:"onSelect"}),bsPrefix=useBootstrapPrefix(initialBsPrefix,"nav");let navbarBsPrefix,cardHeaderBsPrefix,isNavbar=!1;const navbarContext=(0,react.useContext)(NavbarContext),cardHeaderContext=(0,react.useContext)(CardHeaderContext);return navbarContext?(navbarBsPrefix=navbarContext.bsPrefix,isNavbar=null==navbar||navbar):cardHeaderContext&&({cardHeaderBsPrefix}=cardHeaderContext),(0,jsx_runtime.jsx)(esm_Nav,{as,ref,activeKey,className:classnames_default()(className,{[bsPrefix]:!isNavbar,[`${navbarBsPrefix}-nav`]:isNavbar,[`${navbarBsPrefix}-nav-scroll`]:isNavbar&&navbarScroll,[`${cardHeaderBsPrefix}-${variant}`]:!!cardHeaderBsPrefix,[`${bsPrefix}-${variant}`]:!!variant,[`${bsPrefix}-fill`]:fill,[`${bsPrefix}-justified`]:justify}),...props})}));Nav_Nav.displayName="Nav";const react_bootstrap_2_esm_Nav=Object.assign(Nav_Nav,{Item:react_bootstrap_2_esm_NavItem,Link:esm_NavLink}),NavbarBrand=react.forwardRef((({bsPrefix,className,as,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"navbar-brand");const Component=as||(props.href?"a":"span");return(0,jsx_runtime.jsx)(Component,{...props,ref,className:classnames_default()(className,bsPrefix)})}));NavbarBrand.displayName="NavbarBrand";const esm_NavbarBrand=NavbarBrand,NavbarCollapse=react.forwardRef((({children,bsPrefix,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"navbar-collapse");const context=(0,react.useContext)(NavbarContext);return(0,jsx_runtime.jsx)(esm_Collapse,{in:!(!context||!context.expanded),...props,children:(0,jsx_runtime.jsx)("div",{ref,className:bsPrefix,children})})}));NavbarCollapse.displayName="NavbarCollapse";const esm_NavbarCollapse=NavbarCollapse,NavbarToggle=react.forwardRef((({bsPrefix,className,children,label="Toggle navigation",as:Component="button",onClick,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"navbar-toggler");const{onToggle,expanded}=(0,react.useContext)(NavbarContext)||{},handleClick=useEventCallback((e=>{onClick&&onClick(e),onToggle&&onToggle()}));return"button"===Component&&(props.type="button"),(0,jsx_runtime.jsx)(Component,{...props,ref,onClick:handleClick,"aria-label":label,className:classnames_default()(className,bsPrefix,!expanded&&"collapsed"),children:children||(0,jsx_runtime.jsx)("span",{className:`${bsPrefix}-icon`})})}));NavbarToggle.displayName="NavbarToggle";const esm_NavbarToggle=NavbarToggle;var matchersByWindow=new WeakMap,getMatcher=function getMatcher(query,targetWindow){if(query&&targetWindow){var matchers=matchersByWindow.get(targetWindow)||new Map;matchersByWindow.set(targetWindow,matchers);var mql=matchers.get(query);return mql||((mql=targetWindow.matchMedia(query)).refCount=0,matchers.set(mql.media,mql)),mql}};function useMediaQuery(query,targetWindow){void 0===targetWindow&&(targetWindow="undefined"==typeof window?void 0:window);var mql=getMatcher(query,targetWindow),_useState=(0,react.useState)((function(){return!!mql&&mql.matches})),matches=_useState[0],setMatches=_useState[1];return useIsomorphicEffect((function(){var mql=getMatcher(query,targetWindow);if(!mql)return setMatches(!1);var matchers=matchersByWindow.get(targetWindow),handleChange=function handleChange(){setMatches(mql.matches)};return mql.refCount++,mql.addListener(handleChange),handleChange(),function(){mql.removeListener(handleChange),mql.refCount--,mql.refCount<=0&&(null==matchers||matchers.delete(mql.media)),mql=void 0}}),[query]),matches}const esm_useBreakpoint=function createBreakpointHook(breakpointValues){var names=Object.keys(breakpointValues);function and(query,next){return query===next?next:query?query+" and "+next:next}function getMaxQuery(breakpoint){var next=function getNext(breakpoint){return names[Math.min(names.indexOf(breakpoint)+1,names.length-1)]}(breakpoint),value=breakpointValues[next];return"(max-width: "+(value="number"==typeof value?value-.2+"px":"calc("+value+" - 0.2px)")+")"}return function useBreakpoint(breakpointOrMap,direction,window){var breakpointMap,_breakpointMap;return"object"==typeof breakpointOrMap?(breakpointMap=breakpointOrMap,window=direction,direction=!0):((_breakpointMap={})[breakpointOrMap]=direction=direction||!0,breakpointMap=_breakpointMap),useMediaQuery((0,react.useMemo)((function(){return Object.entries(breakpointMap).reduce((function(query,_ref){var key=_ref[0],direction=_ref[1];return"up"!==direction&&!0!==direction||(query=and(query,function getMinQuery(breakpoint){var value=breakpointValues[breakpoint];return"number"==typeof value&&(value+="px"),"(min-width: "+value+")"}(key))),"down"!==direction&&!0!==direction||(query=and(query,getMaxQuery(key))),query}),"")}),[JSON.stringify(breakpointMap)]),window)}}({xs:0,sm:576,md:768,lg:992,xl:1200,xxl:1400}),OffcanvasBody=createWithBsPrefix("offcanvas-body"),transitionStyles={[ENTERING]:"show",entered:"show"},OffcanvasToggling=react.forwardRef((({bsPrefix,className,children,in:inProp=!1,mountOnEnter=!1,unmountOnExit=!1,appear=!1,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"offcanvas"),(0,jsx_runtime.jsx)(esm_TransitionWrapper,{ref,addEndListener:transitionEndListener,in:inProp,mountOnEnter,unmountOnExit,appear,...props,childRef:children.ref,children:(status,innerProps)=>react.cloneElement(children,{...innerProps,className:classnames_default()(className,children.props.className,(status===ENTERING||"exiting"===status)&&`${bsPrefix}-toggling`,transitionStyles[status])})}))));OffcanvasToggling.displayName="OffcanvasToggling";const esm_OffcanvasToggling=OffcanvasToggling,OffcanvasHeader=react.forwardRef((({bsPrefix,className,closeLabel="Close",closeButton=!1,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"offcanvas-header"),(0,jsx_runtime.jsx)(esm_AbstractModalHeader,{ref,...props,className:classnames_default()(className,bsPrefix),closeLabel,closeButton}))));OffcanvasHeader.displayName="OffcanvasHeader";const esm_OffcanvasHeader=OffcanvasHeader,OffcanvasTitle=createWithBsPrefix("offcanvas-title",{Component:divWithClassName("h5")});function Offcanvas_DialogTransition(props){return(0,jsx_runtime.jsx)(esm_OffcanvasToggling,{...props})}function Offcanvas_BackdropTransition(props){return(0,jsx_runtime.jsx)(esm_Fade,{...props})}const Offcanvas=react.forwardRef((({bsPrefix,className,children,"aria-labelledby":ariaLabelledby,placement="start",responsive,show=!1,backdrop=!0,keyboard=!0,scroll=!1,onEscapeKeyDown,onShow,onHide,container,autoFocus=!0,enforceFocus=!0,restoreFocus=!0,restoreFocusOptions,onEntered,onExit,onExiting,onEnter,onEntering,onExited,backdropClassName,manager:propsManager,renderStaticNode=!1,...props},ref)=>{const modalManager=(0,react.useRef)();bsPrefix=useBootstrapPrefix(bsPrefix,"offcanvas");const{onToggle}=(0,react.useContext)(NavbarContext)||{},[showOffcanvas,setShowOffcanvas]=(0,react.useState)(!1),hideResponsiveOffcanvas=esm_useBreakpoint(responsive||"xs","up");(0,react.useEffect)((()=>{setShowOffcanvas(responsive?show&&!hideResponsiveOffcanvas:show)}),[show,responsive,hideResponsiveOffcanvas]);const handleHide=useEventCallback((()=>{null==onToggle||onToggle(),null==onHide||onHide()})),modalContext=(0,react.useMemo)((()=>({onHide:handleHide})),[handleHide]);const renderBackdrop=(0,react.useCallback)((backdropProps=>(0,jsx_runtime.jsx)("div",{...backdropProps,className:classnames_default()(`${bsPrefix}-backdrop`,backdropClassName)})),[backdropClassName,bsPrefix]),renderDialog=dialogProps=>(0,jsx_runtime.jsx)("div",{...dialogProps,...props,className:classnames_default()(className,responsive?`${bsPrefix}-${responsive}`:bsPrefix,`${bsPrefix}-${placement}`),"aria-labelledby":ariaLabelledby,children});return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[!showOffcanvas&&(responsive||renderStaticNode)&&renderDialog({}),(0,jsx_runtime.jsx)(esm_ModalContext.Provider,{value:modalContext,children:(0,jsx_runtime.jsx)(esm_Modal,{show:showOffcanvas,ref,backdrop,container,keyboard,autoFocus,enforceFocus:enforceFocus&&!scroll,restoreFocus,restoreFocusOptions,onEscapeKeyDown,onShow,onHide:handleHide,onEnter:(node,...args)=>{node&&(node.style.visibility="visible"),null==onEnter||onEnter(node,...args)},onEntering,onEntered,onExit,onExiting,onExited:(node,...args)=>{node&&(node.style.visibility=""),null==onExited||onExited(...args)},manager:function getModalManager(){return propsManager||(scroll?(modalManager.current||(modalManager.current=new esm_BootstrapModalManager({handleContainerOverflow:!1})),modalManager.current):getSharedManager())}(),transition:Offcanvas_DialogTransition,backdropTransition:Offcanvas_BackdropTransition,renderBackdrop,renderDialog})})]})}));Offcanvas.displayName="Offcanvas";const esm_Offcanvas=Object.assign(Offcanvas,{Body:OffcanvasBody,Header:esm_OffcanvasHeader,Title:OffcanvasTitle}),NavbarOffcanvas=react.forwardRef(((props,ref)=>{const context=(0,react.useContext)(NavbarContext);return(0,jsx_runtime.jsx)(esm_Offcanvas,{ref,show:!(null==context||!context.expanded),...props,renderStaticNode:!0})}));NavbarOffcanvas.displayName="NavbarOffcanvas";const esm_NavbarOffcanvas=NavbarOffcanvas,NavbarText=createWithBsPrefix("navbar-text",{Component:"span"}),Navbar=react.forwardRef(((props,ref)=>{const{bsPrefix:initialBsPrefix,expand=!0,variant="light",bg,fixed,sticky,className,as:Component="nav",expanded,onToggle,onSelect,collapseOnSelect=!1,...controlledProps}=(0,esm.Zw)(props,{expanded:"onToggle"}),bsPrefix=useBootstrapPrefix(initialBsPrefix,"navbar"),handleCollapse=(0,react.useCallback)(((...args)=>{null==onSelect||onSelect(...args),collapseOnSelect&&expanded&&(null==onToggle||onToggle(!1))}),[onSelect,collapseOnSelect,expanded,onToggle]);void 0===controlledProps.role&&"nav"!==Component&&(controlledProps.role="navigation");let expandClass=`${bsPrefix}-expand`;"string"==typeof expand&&(expandClass=`${expandClass}-${expand}`);const navbarContext=(0,react.useMemo)((()=>({onToggle:()=>null==onToggle?void 0:onToggle(!expanded),bsPrefix,expanded:!!expanded,expand})),[bsPrefix,expanded,expand,onToggle]);return(0,jsx_runtime.jsx)(NavbarContext.Provider,{value:navbarContext,children:(0,jsx_runtime.jsx)(esm_SelectableContext.Provider,{value:handleCollapse,children:(0,jsx_runtime.jsx)(Component,{ref,...controlledProps,className:classnames_default()(className,bsPrefix,expand&&expandClass,variant&&`${bsPrefix}-${variant}`,bg&&`bg-${bg}`,sticky&&`sticky-${sticky}`,fixed&&`fixed-${fixed}`)})})})}));Navbar.displayName="Navbar";const esm_Navbar=Object.assign(Navbar,{Brand:esm_NavbarBrand,Collapse:esm_NavbarCollapse,Offcanvas:esm_NavbarOffcanvas,Text:NavbarText,Toggle:esm_NavbarToggle}),NavDropdown=react.forwardRef((({id,title,children,bsPrefix,className,rootCloseEvent,menuRole,disabled,active,renderMenuOnMount,menuVariant,...props},ref)=>{const navItemPrefix=useBootstrapPrefix(void 0,"nav-item");return(0,jsx_runtime.jsxs)(react_bootstrap_2_esm_Dropdown,{ref,...props,className:classnames_default()(className,navItemPrefix),children:[(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Dropdown.Toggle,{id,eventKey:null,active,disabled,childBsPrefix:bsPrefix,as:esm_NavLink,children:title}),(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Dropdown.Menu,{role:menuRole,renderOnMount:renderMenuOnMount,rootCloseEvent,variant:menuVariant,children})]})}));NavDropdown.displayName="NavDropdown";const esm_NavDropdown=Object.assign(NavDropdown,{Item:react_bootstrap_2_esm_Dropdown.Item,ItemText:react_bootstrap_2_esm_Dropdown.ItemText,Divider:react_bootstrap_2_esm_Dropdown.Divider,Header:react_bootstrap_2_esm_Dropdown.Header}),useRootClose_noop=()=>{};const esm_useRootClose=function useRootClose(ref,onRootClose,{disabled,clickTrigger}={}){const onClose=onRootClose||useRootClose_noop;esm_useClickOutside(ref,onClose,{disabled,clickTrigger});const handleKeyUp=useEventCallback((e=>{isEscKey(e)&&onClose(e)}));(0,react.useEffect)((()=>{if(disabled||null==ref)return;const doc=ownerDocument_ownerDocument(getRefTarget(ref));let currentEvent=(doc.defaultView||window).event;const removeKeyupListener=dom_helpers_esm_listen(doc,"keyup",(e=>{e!==currentEvent?handleKeyUp(e):currentEvent=void 0}));return()=>{removeKeyupListener()}}),[ref,disabled,handleKeyUp])},Overlay=react.forwardRef(((props,outerRef)=>{const{flip,offset,placement,containerPadding,popperConfig={},transition:Transition,runTransition}=props,[rootElement,attachRef]=useCallbackRef(),[arrowElement,attachArrowRef]=useCallbackRef(),mergedRef=esm_useMergedRefs(attachRef,outerRef),container=useWaitForDOMRef(props.container),target=useWaitForDOMRef(props.target),[exited,setExited]=(0,react.useState)(!props.show),popper=esm_usePopper(target,rootElement,mergeOptionsWithPopperConfig({placement,enableEvents:!!props.show,containerPadding:containerPadding||5,flip,offset,arrowElement,popperConfig}));props.show&&exited&&setExited(!1);const mountOverlay=props.show||!exited;if(esm_useRootClose(rootElement,props.onHide,{disabled:!props.rootClose||props.rootCloseDisabled,clickTrigger:props.rootCloseEvent}),!mountOverlay)return null;const{onExit,onExiting,onEnter,onEntering,onEntered}=props;let child=props.children(Object.assign({},popper.attributes.popper,{style:popper.styles.popper,ref:mergedRef}),{popper,placement,show:!!props.show,arrowProps:Object.assign({},popper.attributes.arrow,{style:popper.styles.arrow,ref:attachArrowRef})});return child=renderTransition(Transition,runTransition,{in:!!props.show,appear:!0,mountOnEnter:!0,unmountOnExit:!0,children:child,onExit,onExiting,onExited:(...args)=>{setExited(!0),props.onExited&&props.onExited(...args)},onEnter,onEntering,onEntered}),container?react_dom.createPortal(child,container):null}));Overlay.displayName="Overlay";const esm_Overlay=Overlay,PopoverHeader=createWithBsPrefix("popover-header"),PopoverBody=createWithBsPrefix("popover-body");react.Component;function getOverlayDirection(placement,isRTL){let bsDirection=placement;return"left"===placement?bsDirection=isRTL?"end":"start":"right"===placement&&(bsDirection=isRTL?"start":"end"),bsDirection}function getInitialPopperStyles(position="absolute"){return{position,top:"0",left:"0",opacity:"0",pointerEvents:"none"}}const Popover=react.forwardRef((({bsPrefix,placement="right",className,style,children,body,arrowProps,hasDoneInitialMeasure,popper,show,...props},ref)=>{const decoratedBsPrefix=useBootstrapPrefix(bsPrefix,"popover"),isRTL=useIsRTL(),[primaryPlacement]=(null==placement?void 0:placement.split("-"))||[],bsDirection=getOverlayDirection(primaryPlacement,isRTL);let computedStyle=style;return show&&!hasDoneInitialMeasure&&(computedStyle={...style,...getInitialPopperStyles(null==popper?void 0:popper.strategy)}),(0,jsx_runtime.jsxs)("div",{ref,role:"tooltip",style:computedStyle,"x-placement":primaryPlacement,className:classnames_default()(className,decoratedBsPrefix,primaryPlacement&&`bs-popover-${bsDirection}`),...props,children:[(0,jsx_runtime.jsx)("div",{className:"popover-arrow",...arrowProps}),body?(0,jsx_runtime.jsx)(PopoverBody,{children}):children]})})),esm_Popover=Object.assign(Popover,{Header:PopoverHeader,Body:PopoverBody,POPPER_OFFSET:[0,8]});const Overlay_Overlay=react.forwardRef((({children:overlay,transition=esm_Fade,popperConfig={},rootClose=!1,placement="top",show:outerShow=!1,...outerProps},outerRef)=>{const popperRef=(0,react.useRef)({}),[firstRenderedState,setFirstRenderedState]=(0,react.useState)(null),[ref,modifiers]=function useOverlayOffset(customOffset){const overlayRef=(0,react.useRef)(null),popoverClass=useBootstrapPrefix(void 0,"popover"),offset=(0,react.useMemo)((()=>({name:"offset",options:{offset:()=>overlayRef.current&&hasClass(overlayRef.current,popoverClass)?customOffset||esm_Popover.POPPER_OFFSET:customOffset||[0,0]}})),[customOffset,popoverClass]);return[overlayRef,[offset]]}(outerProps.offset),mergedRef=esm_useMergedRefs(outerRef,ref),actualTransition=!0===transition?esm_Fade:transition||void 0,handleFirstUpdate=useEventCallback((state=>{setFirstRenderedState(state),null==popperConfig||null==popperConfig.onFirstUpdate||popperConfig.onFirstUpdate(state)}));return useIsomorphicEffect((()=>{firstRenderedState&&(null==popperRef.current.scheduleUpdate||popperRef.current.scheduleUpdate())}),[firstRenderedState]),(0,react.useEffect)((()=>{outerShow||setFirstRenderedState(null)}),[outerShow]),(0,jsx_runtime.jsx)(esm_Overlay,{...outerProps,ref:mergedRef,popperConfig:{...popperConfig,modifiers:modifiers.concat(popperConfig.modifiers||[]),onFirstUpdate:handleFirstUpdate},transition:actualTransition,rootClose,placement,show:outerShow,children:(overlayProps,{arrowProps,popper:popperObj,show})=>{var _popperObj$state,_popperObj$state$modi;!function wrapRefs(props,arrowProps){const{ref}=props,{ref:aRef}=arrowProps;props.ref=ref.__wrapped||(ref.__wrapped=r=>ref(safeFindDOMNode(r))),arrowProps.ref=aRef.__wrapped||(aRef.__wrapped=r=>aRef(safeFindDOMNode(r)))}(overlayProps,arrowProps);const updatedPlacement=null==popperObj?void 0:popperObj.placement,popper=Object.assign(popperRef.current,{state:null==popperObj?void 0:popperObj.state,scheduleUpdate:null==popperObj?void 0:popperObj.update,placement:updatedPlacement,outOfBoundaries:(null==popperObj||null==(_popperObj$state=popperObj.state)||null==(_popperObj$state$modi=_popperObj$state.modifiersData.hide)?void 0:_popperObj$state$modi.isReferenceHidden)||!1,strategy:popperConfig.strategy}),hasDoneInitialMeasure=!!firstRenderedState;return"function"==typeof overlay?overlay({...overlayProps,placement:updatedPlacement,show,...!transition&&show&&{className:"show"},popper,arrowProps,hasDoneInitialMeasure}):react.cloneElement(overlay,{...overlayProps,placement:updatedPlacement,arrowProps,popper,hasDoneInitialMeasure,className:classnames_default()(overlay.props.className,!transition&&show&&"show"),style:{...overlay.props.style,...overlayProps.style}})}})}));Overlay_Overlay.displayName="Overlay";const react_bootstrap_2_esm_Overlay=Overlay_Overlay;function handleMouseOverOut(handler,args,relatedNative){const[e]=args,target=e.currentTarget,related=e.relatedTarget||e.nativeEvent[relatedNative];related&&related===target||function esm_contains_contains(context,node){return context.contains?context.contains(node):context.compareDocumentPosition?context===node||!!(16&context.compareDocumentPosition(node)):void 0}(target,related)||handler(...args)}const esm_OverlayTrigger=function OverlayTrigger({trigger=["hover","focus"],overlay,children,popperConfig={},show:propsShow,defaultShow=!1,onToggle,delay:propsDelay,placement,flip=placement&&-1!==placement.indexOf("auto"),...props}){const triggerNodeRef=(0,react.useRef)(null),mergedRef=esm_useMergedRefs(triggerNodeRef,children.ref),timeout=useTimeout(),hoverStateRef=(0,react.useRef)(""),[show,setShow]=(0,esm.iC)(propsShow,defaultShow,onToggle),delay=function normalizeDelay(delay){return delay&&"object"==typeof delay?delay:{show:delay,hide:delay}}(propsDelay),{onFocus,onBlur,onClick}="function"!=typeof children?react.Children.only(children).props:{},handleShow=(0,react.useCallback)((()=>{timeout.clear(),hoverStateRef.current="show",delay.show?timeout.set((()=>{"show"===hoverStateRef.current&&setShow(!0)}),delay.show):setShow(!0)}),[delay.show,setShow,timeout]),handleHide=(0,react.useCallback)((()=>{timeout.clear(),hoverStateRef.current="hide",delay.hide?timeout.set((()=>{"hide"===hoverStateRef.current&&setShow(!1)}),delay.hide):setShow(!1)}),[delay.hide,setShow,timeout]),handleFocus=(0,react.useCallback)(((...args)=>{handleShow(),null==onFocus||onFocus(...args)}),[handleShow,onFocus]),handleBlur=(0,react.useCallback)(((...args)=>{handleHide(),null==onBlur||onBlur(...args)}),[handleHide,onBlur]),handleClick=(0,react.useCallback)(((...args)=>{setShow(!show),null==onClick||onClick(...args)}),[onClick,setShow,show]),handleMouseOver=(0,react.useCallback)(((...args)=>{handleMouseOverOut(handleShow,args,"fromElement")}),[handleShow]),handleMouseOut=(0,react.useCallback)(((...args)=>{handleMouseOverOut(handleHide,args,"toElement")}),[handleHide]),triggers=null==trigger?[]:[].concat(trigger),triggerProps={ref:r=>{mergedRef(safeFindDOMNode(r))}};return-1!==triggers.indexOf("click")&&(triggerProps.onClick=handleClick),-1!==triggers.indexOf("focus")&&(triggerProps.onFocus=handleFocus,triggerProps.onBlur=handleBlur),-1!==triggers.indexOf("hover")&&(triggerProps.onMouseOver=handleMouseOver,triggerProps.onMouseOut=handleMouseOut),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:["function"==typeof children?children(triggerProps):(0,react.cloneElement)(children,triggerProps),(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Overlay,{...props,show,onHide:handleHide,flip,placement,popperConfig,target:triggerNodeRef.current,children:overlay})]})},PageItem=react.forwardRef((({active=!1,disabled=!1,className,style,activeLabel="(current)",children,...props},ref)=>{const Component=active||disabled?"span":esm_Anchor;return(0,jsx_runtime.jsx)("li",{ref,style,className:classnames_default()(className,"page-item",{active,disabled}),children:(0,jsx_runtime.jsxs)(Component,{className:"page-link",...props,children:[children,active&&activeLabel&&(0,jsx_runtime.jsx)("span",{className:"visually-hidden",children:activeLabel})]})})}));PageItem.displayName="PageItem";const esm_PageItem=PageItem;function createButton(name,defaultValue,label=name){const Button=react.forwardRef((({children,...props},ref)=>(0,jsx_runtime.jsxs)(PageItem,{...props,ref,children:[(0,jsx_runtime.jsx)("span",{"aria-hidden":"true",children:children||defaultValue}),(0,jsx_runtime.jsx)("span",{className:"visually-hidden",children:label})]})));return Button.displayName=name,Button}const First=createButton("First","«"),Prev=createButton("Prev","‹","Previous"),Ellipsis=createButton("Ellipsis","…","More"),Next=createButton("Next","›"),Last=createButton("Last","»"),Pagination=react.forwardRef((({bsPrefix,className,size,...props},ref)=>{const decoratedBsPrefix=useBootstrapPrefix(bsPrefix,"pagination");return(0,jsx_runtime.jsx)("ul",{ref,...props,className:classnames_default()(className,decoratedBsPrefix,size&&`${decoratedBsPrefix}-${size}`)})}));Pagination.displayName="Pagination";const esm_Pagination=Object.assign(Pagination,{First,Prev,Ellipsis,Item:esm_PageItem,Next,Last});function usePlaceholder({animation,bg,bsPrefix,size,...props}){bsPrefix=useBootstrapPrefix(bsPrefix,"placeholder");const[{className,...colProps}]=useCol(props);return{...colProps,className:classnames_default()(className,animation?`${bsPrefix}-${animation}`:bsPrefix,size&&`${bsPrefix}-${size}`,bg&&`bg-${bg}`)}}const PlaceholderButton=react.forwardRef(((props,ref)=>{const placeholderProps=usePlaceholder(props);return(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Button,{...placeholderProps,ref,disabled:!0,tabIndex:-1})}));PlaceholderButton.displayName="PlaceholderButton";const esm_PlaceholderButton=PlaceholderButton,Placeholder=react.forwardRef((({as:Component="span",...props},ref)=>{const placeholderProps=usePlaceholder(props);return(0,jsx_runtime.jsx)(Component,{...placeholderProps,ref})}));Placeholder.displayName="Placeholder";const esm_Placeholder=Object.assign(Placeholder,{Button:esm_PlaceholderButton}),ROUND_PRECISION=1e3;function getPercentage(now,min,max){const percentage=(now-min)/(max-min)*100;return Math.round(percentage*ROUND_PRECISION)/ROUND_PRECISION}function renderProgressBar({min,now,max,label,visuallyHidden,striped,animated,className,style,variant,bsPrefix,...props},ref){return(0,jsx_runtime.jsx)("div",{ref,...props,role:"progressbar",className:classnames_default()(className,`${bsPrefix}-bar`,{[`bg-${variant}`]:variant,[`${bsPrefix}-bar-animated`]:animated,[`${bsPrefix}-bar-striped`]:animated||striped}),style:{width:`${getPercentage(now,min,max)}%`,...style},"aria-valuenow":now,"aria-valuemin":min,"aria-valuemax":max,children:visuallyHidden?(0,jsx_runtime.jsx)("span",{className:"visually-hidden",children:label}):label})}const ProgressBar=react.forwardRef((({isChild=!1,...rest},ref)=>{const props={min:0,max:100,animated:!1,visuallyHidden:!1,striped:!1,...rest};if(props.bsPrefix=useBootstrapPrefix(props.bsPrefix,"progress"),isChild)return renderProgressBar(props,ref);const{min,now,max,label,visuallyHidden,striped,animated,bsPrefix,variant,className,children,...wrapperProps}=props;return(0,jsx_runtime.jsx)("div",{ref,...wrapperProps,className:classnames_default()(className,bsPrefix),children:children?map(children,(child=>(0,react.cloneElement)(child,{isChild:!0}))):renderProgressBar({min,now,max,label,visuallyHidden,striped,animated,bsPrefix,variant},ref)})}));ProgressBar.displayName="ProgressBar";const esm_ProgressBar=ProgressBar;const Ratio=react.forwardRef((({bsPrefix,className,children,aspectRatio="1x1",style,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"ratio");const isCustomRatio="number"==typeof aspectRatio;return(0,jsx_runtime.jsx)("div",{ref,...props,style:{...style,...isCustomRatio&&{"--bs-aspect-ratio":(num=aspectRatio,num<=0?"100%":num<1?100*num+"%":`${num}%`)}},className:classnames_default()(bsPrefix,className,!isCustomRatio&&`${bsPrefix}-${aspectRatio}`),children:react.Children.only(children)});var num})),esm_Ratio=Ratio,Row=react.forwardRef((({bsPrefix,className,as:Component="div",...props},ref)=>{const decoratedBsPrefix=useBootstrapPrefix(bsPrefix,"row"),breakpoints=useBootstrapBreakpoints(),minBreakpoint=useBootstrapMinBreakpoint(),sizePrefix=`${decoratedBsPrefix}-cols`,classes=[];return breakpoints.forEach((brkPoint=>{const propValue=props[brkPoint];let cols;delete props[brkPoint],null!=propValue&&"object"==typeof propValue?({cols}=propValue):cols=propValue;const infix=brkPoint!==minBreakpoint?`-${brkPoint}`:"";null!=cols&&classes.push(`${sizePrefix}${infix}-${cols}`)})),(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,decoratedBsPrefix,...classes)})}));Row.displayName="Row";const esm_Row=Row,Spinner=react.forwardRef((({bsPrefix,variant,animation="border",size,as:Component="div",className,...props},ref)=>{const bsSpinnerPrefix=`${bsPrefix=useBootstrapPrefix(bsPrefix,"spinner")}-${animation}`;return(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(className,bsSpinnerPrefix,size&&`${bsSpinnerPrefix}-${size}`,variant&&`text-${variant}`)})}));Spinner.displayName="Spinner";const esm_Spinner=Spinner,SplitButton_propTypes={id:node_modules_prop_types_default().string,toggleLabel:node_modules_prop_types_default().string,href:node_modules_prop_types_default().string,target:node_modules_prop_types_default().string,onClick:node_modules_prop_types_default().func,title:node_modules_prop_types_default().node.isRequired,type:node_modules_prop_types_default().string,disabled:node_modules_prop_types_default().bool,align:alignPropType,menuRole:node_modules_prop_types_default().string,renderMenuOnMount:node_modules_prop_types_default().bool,rootCloseEvent:node_modules_prop_types_default().string,flip:node_modules_prop_types_default().bool,bsPrefix:node_modules_prop_types_default().string,variant:node_modules_prop_types_default().string,size:node_modules_prop_types_default().string},SplitButton=react.forwardRef((({id,bsPrefix,size,variant,title,type="button",toggleLabel="Toggle dropdown",children,onClick,href,target,menuRole,renderMenuOnMount,rootCloseEvent,flip,...props},ref)=>(0,jsx_runtime.jsxs)(react_bootstrap_2_esm_Dropdown,{ref,...props,as:esm_ButtonGroup,children:[(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Button,{size,variant,disabled:props.disabled,bsPrefix,href,target,onClick,type,children:title}),(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Dropdown.Toggle,{split:!0,id,size,variant,disabled:props.disabled,childBsPrefix:bsPrefix,children:(0,jsx_runtime.jsx)("span",{className:"visually-hidden",children:toggleLabel})}),(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Dropdown.Menu,{role:menuRole,renderOnMount:renderMenuOnMount,rootCloseEvent,flip,children})]})));SplitButton.propTypes=SplitButton_propTypes,SplitButton.displayName="SplitButton";const esm_SplitButton=SplitButton,SSRProvider=function $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props){let cur=(0,react.useContext)($704cf1d3b684cc5c$var$SSRContext),counter=$704cf1d3b684cc5c$var$useCounter(cur===$704cf1d3b684cc5c$var$defaultContext),[isSSR,setIsSSR]=(0,react.useState)(!0),value=(0,react.useMemo)((()=>({prefix:cur===$704cf1d3b684cc5c$var$defaultContext?"":`${cur.prefix}-${counter}`,current:0,isSSR})),[cur,counter,isSSR]);return"undefined"!=typeof window&&(0,react.useLayoutEffect)((()=>{setIsSSR(!1)}),[]),react.createElement($704cf1d3b684cc5c$var$SSRContext.Provider,{value},props.children)};function createUtilityClassName(utilityValues,breakpoints=DEFAULT_BREAKPOINTS,minBreakpoint="xs"){const classes=[];return Object.entries(utilityValues).forEach((([utilName,utilValue])=>{null!=utilValue&&("object"==typeof utilValue?breakpoints.forEach((brkPoint=>{const bpValue=utilValue[brkPoint];if(null!=bpValue){const infix=brkPoint!==minBreakpoint?`-${brkPoint}`:"";classes.push(`${utilName}${infix}-${bpValue}`)}})):classes.push(`${utilName}-${utilValue}`))})),classes}const Stack=react.forwardRef((({as:Component="div",bsPrefix,className,direction,gap,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"horizontal"===direction?"hstack":"vstack");const breakpoints=useBootstrapBreakpoints(),minBreakpoint=useBootstrapMinBreakpoint();return(0,jsx_runtime.jsx)(Component,{...props,ref,className:classnames_default()(className,bsPrefix,...createUtilityClassName({gap},breakpoints,minBreakpoint))})}));Stack.displayName="Stack";const esm_Stack=Stack,TabPanel_excluded=["active","eventKey","mountOnEnter","transition","unmountOnExit","role","onEnter","onEntering","onEntered","onExit","onExiting","onExited"],_excluded2=["activeKey","getControlledId","getControllerId"],_excluded3=["as"];function TabPanel_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}function useTabPanel(_ref){let{active,eventKey,mountOnEnter,transition,unmountOnExit,role="tabpanel",onEnter,onEntering,onEntered,onExit,onExiting,onExited}=_ref,props=TabPanel_objectWithoutPropertiesLoose(_ref,TabPanel_excluded);const context=(0,react.useContext)(esm_TabContext);if(!context)return[Object.assign({},props,{role}),{eventKey,isActive:active,mountOnEnter,transition,unmountOnExit,onEnter,onEntering,onEntered,onExit,onExiting,onExited}];const{activeKey,getControlledId,getControllerId}=context,rest=TabPanel_objectWithoutPropertiesLoose(context,_excluded2),key=makeEventKey(eventKey);return[Object.assign({},props,{role,id:getControlledId(eventKey),"aria-labelledby":getControllerId(eventKey)}),{eventKey,isActive:null==active&&null!=key?makeEventKey(activeKey)===key:active,transition:transition||rest.transition,mountOnEnter:null!=mountOnEnter?mountOnEnter:rest.mountOnEnter,unmountOnExit:null!=unmountOnExit?unmountOnExit:rest.unmountOnExit,onEnter,onEntering,onEntered,onExit,onExiting,onExited}]}const TabPanel=react.forwardRef(((_ref2,ref)=>{let{as:Component="div"}=_ref2,props=TabPanel_objectWithoutPropertiesLoose(_ref2,_excluded3);const[tabPanelProps,{isActive,onEnter,onEntering,onEntered,onExit,onExiting,onExited,mountOnEnter,unmountOnExit,transition:Transition=esm_NoopTransition}]=useTabPanel(props);return(0,jsx_runtime.jsx)(esm_TabContext.Provider,{value:null,children:(0,jsx_runtime.jsx)(esm_SelectableContext.Provider,{value:null,children:(0,jsx_runtime.jsx)(Transition,{in:isActive,onEnter,onEntering,onEntered,onExit,onExiting,onExited,mountOnEnter,unmountOnExit,children:(0,jsx_runtime.jsx)(Component,Object.assign({},tabPanelProps,{ref,hidden:!isActive,"aria-hidden":!isActive}))})})})}));TabPanel.displayName="TabPanel";const Tabs=props=>{const{id:userId,generateChildId:generateCustomChildId,onSelect:propsOnSelect,activeKey:propsActiveKey,defaultActiveKey,transition,mountOnEnter,unmountOnExit,children}=props,[activeKey,onSelect]=(0,esm.iC)(propsActiveKey,defaultActiveKey,propsOnSelect),id=$704cf1d3b684cc5c$export$619500959fc48b26(userId),generateChildId=(0,react.useMemo)((()=>generateCustomChildId||((key,type)=>id?`${id}-${type}-${key}`:null)),[id,generateCustomChildId]),tabContext=(0,react.useMemo)((()=>({onSelect,activeKey,transition,mountOnEnter:mountOnEnter||!1,unmountOnExit:unmountOnExit||!1,getControlledId:key=>generateChildId(key,"tabpane"),getControllerId:key=>generateChildId(key,"tab")})),[onSelect,activeKey,transition,mountOnEnter,unmountOnExit,generateChildId]);return(0,jsx_runtime.jsx)(esm_TabContext.Provider,{value:tabContext,children:(0,jsx_runtime.jsx)(esm_SelectableContext.Provider,{value:onSelect||null,children})})};Tabs.Panel=TabPanel;const esm_Tabs=Tabs;function getTabTransitionComponent(transition){return"boolean"==typeof transition?transition?esm_Fade:esm_NoopTransition:transition}const TabContainer=({transition,...props})=>(0,jsx_runtime.jsx)(esm_Tabs,{...props,transition:getTabTransitionComponent(transition)});TabContainer.displayName="TabContainer";const esm_TabContainer=TabContainer,TabContent=createWithBsPrefix("tab-content"),TabPane=react.forwardRef((({bsPrefix,transition,...props},ref)=>{const[{className,as:Component="div",...rest},{isActive,onEnter,onEntering,onEntered,onExit,onExiting,onExited,mountOnEnter,unmountOnExit,transition:Transition=esm_Fade}]=useTabPanel({...props,transition:getTabTransitionComponent(transition)}),prefix=useBootstrapPrefix(bsPrefix,"tab-pane");return(0,jsx_runtime.jsx)(esm_TabContext.Provider,{value:null,children:(0,jsx_runtime.jsx)(esm_SelectableContext.Provider,{value:null,children:(0,jsx_runtime.jsx)(Transition,{in:isActive,onEnter,onEntering,onEntered,onExit,onExiting,onExited,mountOnEnter,unmountOnExit,children:(0,jsx_runtime.jsx)(Component,{...rest,ref,className:classnames_default()(className,prefix,isActive&&"active")})})})})}));TabPane.displayName="TabPane";const esm_TabPane=TabPane,Tab_propTypes={eventKey:node_modules_prop_types_default().oneOfType([node_modules_prop_types_default().string,node_modules_prop_types_default().number]),title:node_modules_prop_types_default().node.isRequired,disabled:node_modules_prop_types_default().bool,tabClassName:node_modules_prop_types_default().string,tabAttrs:node_modules_prop_types_default().object},Tab=()=>{throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly")};Tab.propTypes=Tab_propTypes;const esm_Tab=Object.assign(Tab,{Container:esm_TabContainer,Content:TabContent,Pane:esm_TabPane}),Table=react.forwardRef((({bsPrefix,className,striped,bordered,borderless,hover,size,variant,responsive,...props},ref)=>{const decoratedBsPrefix=useBootstrapPrefix(bsPrefix,"table"),classes=classnames_default()(className,decoratedBsPrefix,variant&&`${decoratedBsPrefix}-${variant}`,size&&`${decoratedBsPrefix}-${size}`,striped&&`${decoratedBsPrefix}-${"string"==typeof striped?`striped-${striped}`:"striped"}`,bordered&&`${decoratedBsPrefix}-bordered`,borderless&&`${decoratedBsPrefix}-borderless`,hover&&`${decoratedBsPrefix}-hover`),table=(0,jsx_runtime.jsx)("table",{...props,className:classes,ref});if(responsive){let responsiveClass=`${decoratedBsPrefix}-responsive`;return"string"==typeof responsive&&(responsiveClass=`${responsiveClass}-${responsive}`),(0,jsx_runtime.jsx)("div",{className:responsiveClass,children:table})}return table})),esm_Table=Table;function getDefaultActiveKey(children){let defaultActiveKey;return forEach(children,(child=>{null==defaultActiveKey&&(defaultActiveKey=child.props.eventKey)})),defaultActiveKey}function renderTab(child){const{title,eventKey,disabled,tabClassName,tabAttrs,id}=child.props;return null==title?null:(0,jsx_runtime.jsx)(react_bootstrap_2_esm_NavItem,{as:"li",role:"presentation",children:(0,jsx_runtime.jsx)(esm_NavLink,{as:"button",type:"button",eventKey,disabled,id,className:tabClassName,...tabAttrs,children:title})})}const Tabs_Tabs=props=>{const{id,onSelect,transition,mountOnEnter=!1,unmountOnExit=!1,variant="tabs",children,activeKey=getDefaultActiveKey(children),...controlledProps}=(0,esm.Zw)(props,{activeKey:"onSelect"});return(0,jsx_runtime.jsxs)(esm_Tabs,{id,activeKey,onSelect,transition:getTabTransitionComponent(transition),mountOnEnter,unmountOnExit,children:[(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Nav,{...controlledProps,role:"tablist",as:"ul",variant,children:map(children,renderTab)}),(0,jsx_runtime.jsx)(TabContent,{children:map(children,(child=>{const childProps={...child.props};return delete childProps.title,delete childProps.disabled,delete childProps.tabClassName,delete childProps.tabAttrs,(0,jsx_runtime.jsx)(esm_TabPane,{...childProps})}))})]})};Tabs_Tabs.displayName="Tabs";const react_bootstrap_2_esm_Tabs=Tabs_Tabs,ToastFade_fadeStyles={[ENTERING]:"showing",exiting:"showing show"},ToastFade=react.forwardRef(((props,ref)=>(0,jsx_runtime.jsx)(esm_Fade,{...props,ref,transitionClasses:ToastFade_fadeStyles})));ToastFade.displayName="ToastFade";const esm_ToastFade=ToastFade,esm_ToastContext=react.createContext({onClose(){}}),ToastHeader=react.forwardRef((({bsPrefix,closeLabel="Close",closeVariant,closeButton=!0,className,children,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"toast-header");const context=(0,react.useContext)(esm_ToastContext),handleClick=useEventCallback((e=>{null==context||null==context.onClose||context.onClose(e)}));return(0,jsx_runtime.jsxs)("div",{ref,...props,className:classnames_default()(bsPrefix,className),children:[children,closeButton&&(0,jsx_runtime.jsx)(esm_CloseButton,{"aria-label":closeLabel,variant:closeVariant,onClick:handleClick,"data-dismiss":"toast"})]})}));ToastHeader.displayName="ToastHeader";const esm_ToastHeader=ToastHeader,ToastBody=createWithBsPrefix("toast-body"),Toast=react.forwardRef((({bsPrefix,className,transition:Transition=esm_ToastFade,show=!0,animation=!0,delay=5e3,autohide=!1,onClose,bg,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"toast");const delayRef=(0,react.useRef)(delay),onCloseRef=(0,react.useRef)(onClose);(0,react.useEffect)((()=>{delayRef.current=delay,onCloseRef.current=onClose}),[delay,onClose]);const autohideTimeout=useTimeout(),autohideToast=!(!autohide||!show),autohideFunc=(0,react.useCallback)((()=>{autohideToast&&(null==onCloseRef.current||onCloseRef.current())}),[autohideToast]);(0,react.useEffect)((()=>{autohideTimeout.set(autohideFunc,delayRef.current)}),[autohideTimeout,autohideFunc]);const toastContext=(0,react.useMemo)((()=>({onClose})),[onClose]),hasAnimation=!(!Transition||!animation),toast=(0,jsx_runtime.jsx)("div",{...props,ref,className:classnames_default()(bsPrefix,className,bg&&`bg-${bg}`,!hasAnimation&&(show?"show":"hide")),role:"alert","aria-live":"assertive","aria-atomic":"true"});return(0,jsx_runtime.jsx)(esm_ToastContext.Provider,{value:toastContext,children:hasAnimation&&Transition?(0,jsx_runtime.jsx)(Transition,{in:show,unmountOnExit:!0,children:toast}):toast})}));Toast.displayName="Toast";const esm_Toast=Object.assign(Toast,{Body:ToastBody,Header:esm_ToastHeader}),positionClasses={"top-start":"top-0 start-0","top-center":"top-0 start-50 translate-middle-x","top-end":"top-0 end-0","middle-start":"top-50 start-0 translate-middle-y","middle-center":"top-50 start-50 translate-middle","middle-end":"top-50 end-0 translate-middle-y","bottom-start":"bottom-0 start-0","bottom-center":"bottom-0 start-50 translate-middle-x","bottom-end":"bottom-0 end-0"},ToastContainer=react.forwardRef((({bsPrefix,position,containerPosition,className,as:Component="div",...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"toast-container"),(0,jsx_runtime.jsx)(Component,{ref,...props,className:classnames_default()(bsPrefix,position&&positionClasses[position],containerPosition&&`position-${containerPosition}`,className)}))));ToastContainer.displayName="ToastContainer";const esm_ToastContainer=ToastContainer,ToggleButton_noop=()=>{},ToggleButton=react.forwardRef((({bsPrefix,name,className,checked,type,onChange,value,disabled,id,inputRef,...props},ref)=>(bsPrefix=useBootstrapPrefix(bsPrefix,"btn-check"),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("input",{className:bsPrefix,name,type,value,ref:inputRef,autoComplete:"off",checked:!!checked,disabled:!!disabled,onChange:onChange||ToggleButton_noop,id}),(0,jsx_runtime.jsx)(react_bootstrap_2_esm_Button,{...props,ref,className:classnames_default()(className,disabled&&"disabled"),type:void 0,role:void 0,as:"label",htmlFor:id})]}))));ToggleButton.displayName="ToggleButton";const esm_ToggleButton=ToggleButton,ToggleButtonGroup=react.forwardRef(((props,ref)=>{const{children,type="radio",name,value,onChange,vertical=!1,...controlledProps}=(0,esm.Zw)(props,{value:"onChange"}),getValues=()=>null==value?[]:[].concat(value);return"radio"!==type||name||browser_default()(!1),(0,jsx_runtime.jsx)(esm_ButtonGroup,{...controlledProps,ref,vertical,children:map(children,(child=>{const values=getValues(),{value:childVal,onChange:childOnChange}=child.props;return react.cloneElement(child,{type,name:child.name||name,checked:-1!==values.indexOf(childVal),onChange:esm_createChainedFunction(childOnChange,(e=>((inputVal,event)=>{if(!onChange)return;const values=getValues(),isActive=-1!==values.indexOf(inputVal);"radio"!==type?onChange(isActive?values.filter((n=>n!==inputVal)):[...values,inputVal],event):isActive||onChange(inputVal,event)})(childVal,e)))})}))})})),esm_ToggleButtonGroup=Object.assign(ToggleButtonGroup,{Button:esm_ToggleButton}),Tooltip=react.forwardRef((({bsPrefix,placement="right",className,style,children,arrowProps,hasDoneInitialMeasure,popper,show,...props},ref)=>{bsPrefix=useBootstrapPrefix(bsPrefix,"tooltip");const isRTL=useIsRTL(),[primaryPlacement]=(null==placement?void 0:placement.split("-"))||[],bsDirection=getOverlayDirection(primaryPlacement,isRTL);let computedStyle=style;return show&&!hasDoneInitialMeasure&&(computedStyle={...style,...getInitialPopperStyles(null==popper?void 0:popper.strategy)}),(0,jsx_runtime.jsxs)("div",{ref,style:computedStyle,role:"tooltip","x-placement":primaryPlacement,className:classnames_default()(className,bsPrefix,`bs-tooltip-${bsDirection}`),...props,children:[(0,jsx_runtime.jsx)("div",{className:"tooltip-arrow",...arrowProps}),(0,jsx_runtime.jsx)("div",{className:`${bsPrefix}-inner`,children})]})}));Tooltip.displayName="Tooltip";const esm_Tooltip=Tooltip},"./node_modules/react-bootstrap-2/node_modules/prop-types-extra/lib/all.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function all(){for(var _len=arguments.length,validators=Array(_len),_key=0;_key<_len;_key++)validators[_key]=arguments[_key];return(0,_createChainableTypeChecker2.default)((function allPropTypes(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];var error=null;return validators.forEach((function(validator){if(null==error){var result=validator.apply(void 0,args);null!=result&&(error=result)}})),error}))};var _createChainableTypeChecker2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react-bootstrap-2/node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js"));module.exports=exports.default},"./node_modules/react-bootstrap-2/node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js":(module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function createChainableTypeChecker(validate){function checkType(isRequired,props,propName,componentName,location,propFullName){var componentNameSafe=componentName||"<<anonymous>>",propFullNameSafe=propFullName||propName;if(null==props[propName])return isRequired?new Error("Required "+location+" `"+propFullNameSafe+"` was not specified in `"+componentNameSafe+"`."):null;for(var _len=arguments.length,args=Array(_len>6?_len-6:0),_key=6;_key<_len;_key++)args[_key-6]=arguments[_key];return validate.apply(void 0,[props,propName,componentNameSafe,location,propFullNameSafe].concat(args))}var chainedCheckType=checkType.bind(null,!1);return chainedCheckType.isRequired=checkType.bind(null,!0),chainedCheckType},module.exports=exports.default},"./node_modules/react-bootstrap-2/node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/react-bootstrap-2/node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction,module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bigint:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,elementType:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/react-bootstrap-2/node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-bootstrap-2/node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/react-bootstrap-2/node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-bootstrap-2/node_modules/react-transition-group/node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/react-bootstrap-2/node_modules/react-transition-group/node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/react-bootstrap-2/node_modules/react-transition-group/node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-bootstrap-2/node_modules/react-transition-group/node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/react-bootstrap-2/node_modules/react-transition-group/node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-bootstrap-2/node_modules/warning/warning.js":module=>{"use strict";var warning=function(){};module.exports=warning},"./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function componentWillMount(){var state=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=state&&this.setState(state)}function componentWillReceiveProps(nextProps){this.setState(function updater(prevState){var state=this.constructor.getDerivedStateFromProps(nextProps,prevState);return null!=state?state:null}.bind(this))}function componentWillUpdate(nextProps,nextState){try{var prevProps=this.props,prevState=this.state;this.props=nextProps,this.state=nextState,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(prevProps,prevState)}finally{this.props=prevProps,this.state=prevState}}function polyfill(Component){var prototype=Component.prototype;if(!prototype||!prototype.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof Component.getDerivedStateFromProps&&"function"!=typeof prototype.getSnapshotBeforeUpdate)return Component;var foundWillMountName=null,foundWillReceivePropsName=null,foundWillUpdateName=null;if("function"==typeof prototype.componentWillMount?foundWillMountName="componentWillMount":"function"==typeof prototype.UNSAFE_componentWillMount&&(foundWillMountName="UNSAFE_componentWillMount"),"function"==typeof prototype.componentWillReceiveProps?foundWillReceivePropsName="componentWillReceiveProps":"function"==typeof prototype.UNSAFE_componentWillReceiveProps&&(foundWillReceivePropsName="UNSAFE_componentWillReceiveProps"),"function"==typeof prototype.componentWillUpdate?foundWillUpdateName="componentWillUpdate":"function"==typeof prototype.UNSAFE_componentWillUpdate&&(foundWillUpdateName="UNSAFE_componentWillUpdate"),null!==foundWillMountName||null!==foundWillReceivePropsName||null!==foundWillUpdateName){var componentName=Component.displayName||Component.name,newApiName="function"==typeof Component.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+componentName+" uses "+newApiName+" but also contains the following legacy lifecycles:"+(null!==foundWillMountName?"\n  "+foundWillMountName:"")+(null!==foundWillReceivePropsName?"\n  "+foundWillReceivePropsName:"")+(null!==foundWillUpdateName?"\n  "+foundWillUpdateName:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof Component.getDerivedStateFromProps&&(prototype.componentWillMount=componentWillMount,prototype.componentWillReceiveProps=componentWillReceiveProps),"function"==typeof prototype.getSnapshotBeforeUpdate){if("function"!=typeof prototype.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");prototype.componentWillUpdate=componentWillUpdate;var componentDidUpdate=prototype.componentDidUpdate;prototype.componentDidUpdate=function componentDidUpdatePolyfill(prevProps,prevState,maybeSnapshot){var snapshot=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:maybeSnapshot;componentDidUpdate.call(this,prevProps,prevState,snapshot)}}return Component}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{polyfill:()=>polyfill}),componentWillMount.__suppressDeprecationWarning=!0,componentWillReceiveProps.__suppressDeprecationWarning=!0,componentWillUpdate.__suppressDeprecationWarning=!0},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/object-assign/index.js");var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./node_modules/uncontrollable/lib/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}__webpack_require__.d(__webpack_exports__,{Pd:()=>uncontrollable,Zw:()=>useUncontrolled,iC:()=>useUncontrolledProp});var react=__webpack_require__("./node_modules/react/index.js"),browser=__webpack_require__("./node_modules/invariant/browser.js"),browser_default=__webpack_require__.n(browser),noop=function noop(){};function isProp(props,prop){return void 0!==props[prop]}function defaultKey(key){return"default"+key.charAt(0).toUpperCase()+key.substr(1)}function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}function useUncontrolledProp(propValue,defaultValue,handler){var wasPropRef=(0,react.useRef)(void 0!==propValue),_useState=(0,react.useState)(defaultValue),stateValue=_useState[0],setState=_useState[1],isProp=void 0!==propValue,wasProp=wasPropRef.current;return wasPropRef.current=isProp,!isProp&&wasProp&&stateValue!==defaultValue&&setState(defaultValue),[isProp?propValue:stateValue,(0,react.useCallback)((function(value){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];handler&&handler.apply(void 0,[value].concat(args)),setState(value)}),[handler])]}function useUncontrolled(props,config){return Object.keys(config).reduce((function(result,fieldName){var _extends2,_ref=result,defaultValue=_ref[defaultKey(fieldName)],propsValue=_ref[fieldName],rest=_objectWithoutPropertiesLoose(_ref,[defaultKey(fieldName),fieldName].map(_toPropertyKey)),handlerName=config[fieldName],_useUncontrolledProp=useUncontrolledProp(propsValue,defaultValue,props[handlerName]),value=_useUncontrolledProp[0],handler=_useUncontrolledProp[1];return _extends({},rest,((_extends2={})[fieldName]=value,_extends2[handlerName]=handler,_extends2))}),props)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var react_lifecycles_compat_es=__webpack_require__("./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"),_jsxFileName="/Users/jquense/src/uncontrollable/src/uncontrollable.js";function uncontrollable(Component,controlledValues,methods){void 0===methods&&(methods=[]);var displayName=Component.displayName||Component.name||"Component",canAcceptRef=function utils_canAcceptRef(component){return!!component&&("function"!=typeof component||component.prototype&&component.prototype.isReactComponent)}(Component),controlledProps=Object.keys(controlledValues),PROPS_TO_OMIT=controlledProps.map(defaultKey);!canAcceptRef&&methods.length&&browser_default()(!1);var UncontrolledComponent=function(_React$Component){function UncontrolledComponent(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).handlers=Object.create(null),controlledProps.forEach((function(propName){var handlerName=controlledValues[propName];_this.handlers[handlerName]=function handleChange(value){if(_this.props[handlerName]){var _this$props;_this._notifying=!0;for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];(_this$props=_this.props)[handlerName].apply(_this$props,[value].concat(args)),_this._notifying=!1}_this.unmounted||_this.setState((function(_ref){var _extends2,values=_ref.values;return{values:_extends(Object.create(null),values,(_extends2={},_extends2[propName]=value,_extends2))}}))}})),methods.length&&(_this.attachRef=function(ref){_this.inner=ref});var values=Object.create(null);return controlledProps.forEach((function(key){values[key]=_this.props[defaultKey(key)]})),_this.state={values,prevProps:{}},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(UncontrolledComponent,_React$Component);var _proto=UncontrolledComponent.prototype;return _proto.shouldComponentUpdate=function shouldComponentUpdate(){return!this._notifying},UncontrolledComponent.getDerivedStateFromProps=function getDerivedStateFromProps(props,_ref2){var values=_ref2.values,prevProps=_ref2.prevProps,nextState={values:_extends(Object.create(null),values),prevProps:{}};return controlledProps.forEach((function(key){nextState.prevProps[key]=props[key],!isProp(props,key)&&isProp(prevProps,key)&&(nextState.values[key]=props[defaultKey(key)])})),nextState},_proto.componentWillUnmount=function componentWillUnmount(){this.unmounted=!0},_proto.render=function render(){var _this2=this,_this$props2=this.props,innerRef=_this$props2.innerRef,props=_objectWithoutPropertiesLoose(_this$props2,["innerRef"]);PROPS_TO_OMIT.forEach((function(prop){delete props[prop]}));var newProps={};return controlledProps.forEach((function(propName){var propValue=_this2.props[propName];newProps[propName]=void 0!==propValue?propValue:_this2.state.values[propName]})),react.createElement(Component,_extends({},props,newProps,this.handlers,{ref:innerRef||this.attachRef}))},UncontrolledComponent}(react.Component);(0,react_lifecycles_compat_es.polyfill)(UncontrolledComponent),UncontrolledComponent.displayName="Uncontrolled("+displayName+")",UncontrolledComponent.propTypes=_extends({innerRef:function innerRef(){}},function uncontrolledPropTypes(controlledValues,displayName){var propTypes={};return Object.keys(controlledValues).forEach((function(prop){propTypes[defaultKey(prop)]=noop})),propTypes}(controlledValues)),methods.forEach((function(method){UncontrolledComponent.prototype[method]=function $proxiedMethod(){var _this$inner;return(_this$inner=this.inner)[method].apply(_this$inner,arguments)}}));var WrappedComponent=UncontrolledComponent;return react.forwardRef&&((WrappedComponent=react.forwardRef((function(props,ref){return react.createElement(UncontrolledComponent,_extends({},props,{innerRef:ref,__source:{fileName:_jsxFileName,lineNumber:128},__self:this}))}))).propTypes=UncontrolledComponent.propTypes),WrappedComponent.ControlledComponent=Component,WrappedComponent.deferControlTo=function(newComponent,additions,nextMethods){return void 0===additions&&(additions={}),uncontrollable(newComponent,_extends({},controlledValues,additions),nextMethods)},WrappedComponent}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,