(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[6320],{"./src/legacySharedComponents/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/styleConstants.js":module=>{module.exports={"workspace-headers-height":30,"resize-bar-width":13,"delete-opacity":"0.5","content-width":970}},"./src/templates/tables/tableConstants.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.tableLayoutStyles=exports.sortableOptions=exports.plTableLayoutStyles=exports.NAME_CELL_INPUT_WIDTH=void 0;var _fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_styleConstants=_interopRequireDefault(__webpack_require__("./src/styleConstants.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.tableLayoutStyles={tableText:{textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},table:{borderWidth:1,borderStyle:"solid",borderColor:_color.default.border_gray,width:_styleConstants.default["content-width"],backgroundColor:_color.default.table_light_row},cell:{maxWidth:200,border:"1px solid",borderColor:_color.default.border_light_gray,padding:10,fontSize:14},headerCell:{backgroundColor:_color.default.table_header,fontWeight:"bold",borderColor:_color.default.border_light_gray,borderStyle:"solid",borderBottomWidth:1,borderTopWidth:0,borderLeftWidth:0,borderRightWidth:1,paddingTop:20,paddingBottom:20,color:_color.default.charcoal,textAlign:"inherit"},flexCell:{display:"flex",alignItems:"center"},link:_objectSpread(_objectSpread({},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:14,textDecoration:"none"}),unsortableHeader:{paddingLeft:25},unsortableHeaderRTL:{paddingRight:25}},exports.plTableLayoutStyles={link:_objectSpread(_objectSpread({},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:14,color:_color.default.neutral_dark,textDecoration:"underline"}),sectionCodeLink:_objectSpread(_objectSpread({},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:14,color:_color.default.brand_secondary_default}),currentUnit:{marginTop:10,fontSize:14},colButton:{paddingTop:20,paddingLeft:20,paddingBottom:20,width:40},participantTypeCell:{fontSize:14},leaveButton:{fontSize:14}},exports.sortableOptions={default:{color:"rgba(0, 0, 0, 0.2 )"}},exports.NAME_CELL_INPUT_WIDTH=160},"./src/templates/tables/wrapped_sortable.js":(module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),sort=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/sortabular/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_excluded=["className"];function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}exports.default=function wrappedSortable(getSortingColumns,onSort){var styles=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},basicSortable=sort.sort({getSortingColumns,onSort});return function(label,columnInfo){var _basicSortable=basicSortable(label,columnInfo),newClassName=_basicSortable.className,newProps=_objectWithoutProperties(_basicSortable,_excluded),sortIcon=_react.default.createElement(_FontAwesome.default,{icon:"sort",className:"fa-fw",style:styles.default});/sort-asc/.test(newClassName)?sortIcon=_react.default.createElement(_FontAwesome.default,{icon:"sort-asc",className:"fa-fw",style:styles.sortAsc}):/sort-desc/.test(newClassName)&&(sortIcon=_react.default.createElement(_FontAwesome.default,{icon:"sort-desc",className:"fa-fw",style:styles.sortDesc}));return _objectSpread(_objectSpread({},newProps),{},{style:Object.assign({},{cursor:"pointer"}),children:_react.default.createElement("span",{style:styles.container},_react.default.createElement("span",{key:"icon",style:{whiteSpace:"nowrap"}},sortIcon),_react.default.createElement("span",{key:"label"},label))})}};module.exports=exports.default},"./src/templates/teacherDashboard/urlHelpers.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.teacherDashboardUrl=exports.scriptUrlForStudent=void 0;exports.teacherDashboardUrl=function teacherDashboardUrl(sectionId){var path=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return path&&"/"!==path.charAt(0)&&(path="/${path}"),"/teacher_dashboard/sections/"+sectionId+path},exports.scriptUrlForStudent=function scriptUrlForStudent(sectionId,scriptName,studentId){return scriptName?"/s/".concat(scriptName,"?section_id=").concat(sectionId,"&user_id=").concat(studentId,"&viewAs=Instructor"):null}},"./src/templates/textResponses/TextResponsesTable.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _orderBy=_interopRequireDefault(__webpack_require__("./node_modules/lodash/orderBy.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireWildcard(__webpack_require__("./node_modules/react/index.js")),Table=_interopRequireWildcard(__webpack_require__("./node_modules/reactabular-table/dist/index.js")),sort=_interopRequireWildcard(__webpack_require__("./node_modules/sortabular/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_urlHelpers=__webpack_require__("./src/templates/teacherDashboard/urlHelpers.js"),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_tableConstants=__webpack_require__("./src/templates/tables/tableConstants.js"),_wrapped_sortable=_interopRequireDefault(__webpack_require__("./src/templates/tables/wrapped_sortable.js")),_textReponsesDataApi=__webpack_require__("./src/templates/textResponses/textReponsesDataApi.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var TABLE_WIDTH=_tableConstants.tableLayoutStyles.table.width,TABLE_COLUMN_WIDTHS={name:TABLE_WIDTH/5,lesson:TABLE_WIDTH/5,puzzle:TABLE_WIDTH/6,question:TABLE_WIDTH/5,response:TABLE_WIDTH/4},TextResponsesTable=function(_Component){function TextResponsesTable(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_Component.call.apply(_Component,[this].concat(args))||this,"state",{}),_defineProperty(_this,"studentNameFormatter",(function(name,_ref){var rowData=_ref.rowData,_this$props=_this.props,sectionId=_this$props.sectionId,scriptName=_this$props.scriptName,studentUrl=(0,_urlHelpers.scriptUrlForStudent)(sectionId,scriptName,rowData.studentId);return studentUrl?_react.default.createElement("a",{className:"uitest-name-cell",style:_tableConstants.tableLayoutStyles.link,href:studentUrl,target:"_blank",rel:"noopener noreferrer"},name):_react.default.createElement("span",{className:"uitest-name-cell"},name)})),_defineProperty(_this,"responseFormatter",(function(_,_ref2){var rowData=_ref2.rowData,response=rowData.response,url=rowData.url;if(response.length<100)return response;var clippedResponse=response.substring(0,99);return _react.default.createElement("div",null,clippedResponse,_react.default.createElement("a",{style:_tableConstants.tableLayoutStyles.link,href:url,target:"_blank",rel:"noopener noreferrer"},_locale.default.seeFullResponse()))})),_defineProperty(_this,"getSortingColumns",(function(){return _this.state.sortingColumns||{}})),_defineProperty(_this,"getColumns",(function(sortable){return[{property:"studentName",header:{label:_locale.default.name(),props:{className:"uitest-name-header",style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),{width:TABLE_COLUMN_WIDTHS.name})},transforms:[sortable]},cell:{formatters:[_this.studentNameFormatter],props:{style:_objectSpread({},_tableConstants.tableLayoutStyles.cell)}}},{property:"lesson",header:{label:_locale.default.lesson(),props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),{width:TABLE_COLUMN_WIDTHS.lesson})},transforms:[sortable]},cell:{props:{style:_objectSpread({},_tableConstants.tableLayoutStyles.cell)}}},{property:"puzzle",header:{label:_locale.default.puzzle(),props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),{width:TABLE_COLUMN_WIDTHS.puzzle})},transforms:[sortable]},cell:{props:{style:_objectSpread({},_tableConstants.tableLayoutStyles.cell)}}},{property:"question",header:{label:_locale.default.question(),props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),{width:TABLE_COLUMN_WIDTHS.question})},transforms:[sortable]},cell:{props:{style:_objectSpread({},_tableConstants.tableLayoutStyles.cell)}}},{property:"response",header:{label:_locale.default.response(),props:{style:_objectSpread(_objectSpread({},_tableConstants.tableLayoutStyles.headerCell),{width:TABLE_COLUMN_WIDTHS.response})}},cell:{formatters:[_this.responseFormatter],props:{style:_objectSpread({},_tableConstants.tableLayoutStyles.cell)}}}]})),_defineProperty(_this,"onSort",(function(selectedColumn){_this.setState({sortingColumns:sort.byColumn({sortingColumns:_this.state.sortingColumns,sortingOrder:{FIRST:"asc",asc:"desc",desc:"asc"},selectedColumn})})})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(TextResponsesTable,_Component),TextResponsesTable.prototype.render=function render(){var _this$props2=this.props,responses=_this$props2.responses;if(_this$props2.isLoading)return _react.default.createElement(_FontAwesome.default,{id:"uitest-spinner",icon:"spinner",className:"fa-pulse fa-3x"});if(!responses||!responses.length)return _react.default.createElement("div",{id:"uitest-empty-responses"},_locale.default.emptyTextResponsesTable());var sortable=(0,_wrapped_sortable.default)(this.getSortingColumns,this.onSort,_tableConstants.sortableOptions),columns=this.getColumns(sortable),sortingColumns=this.getSortingColumns(),sortedRows=sort.sorter({columns,sortingColumns,sort:_orderBy.default})(responses);return _react.default.createElement(Table.Provider,{columns,id:"text-responses-table"},_react.default.createElement(Table.Header,null),_react.default.createElement(Table.Body,{rows:sortedRows,rowKey:function rowKey(_ref3){return _ref3.rowIndex}}))},TextResponsesTable}(_react.Component);_defineProperty(TextResponsesTable,"propTypes",{responses:_propTypes.default.arrayOf(_textReponsesDataApi.textResponsePropType),sectionId:_propTypes.default.number.isRequired,isLoading:_propTypes.default.bool,scriptName:_propTypes.default.string});exports.default=TextResponsesTable;module.exports=exports.default},"./src/templates/textResponses/textReponsesDataApi.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.textResponsePropType=exports.loadTextResponsesFromServer=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js"));function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.loadTextResponsesFromServer=function loadTextResponsesFromServer(sectionId,scriptId){var requestUrl="/dashboardapi/section_text_responses/".concat(sectionId);return scriptId&&(requestUrl+="?script_id=".concat(scriptId)),fetch(requestUrl,{credentials:"same-origin"}).then((function(response){return response.json()})).then((function(responseData){return convertTextResponseServerData(responseData)}))};var convertTextResponseServerData=function convertTextResponseServerData(textResponses){var responses=[];return textResponses.forEach((function(response){var _response$student=response.student,id=_response$student.id,name=_response$student.name;delete response.student,responses.push(_objectSpread(_objectSpread({},response),{},{studentId:id,studentName:name}))})),responses};exports.textResponsePropType=_propTypes.default.shape({puzzle:_propTypes.default.number.isRequired,question:_propTypes.default.string,response:_propTypes.default.string.isRequired,lesson:_propTypes.default.string.isRequired,studentId:_propTypes.default.number.isRequired,studentName:_propTypes.default.string.isRequired,url:_propTypes.default.string.isRequired})},"./node_modules/lodash/_baseEach.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseForOwn=__webpack_require__("./node_modules/lodash/_baseForOwn.js"),baseEach=__webpack_require__("./node_modules/lodash/_createBaseEach.js")(baseForOwn);module.exports=baseEach},"./node_modules/lodash/_baseMap.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseEach=__webpack_require__("./node_modules/lodash/_baseEach.js"),isArrayLike=__webpack_require__("./node_modules/lodash/isArrayLike.js");module.exports=function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];return baseEach(collection,(function(value,key,collection){result[++index]=iteratee(value,key,collection)})),result}},"./node_modules/lodash/_baseOrderBy.js":(module,__unused_webpack_exports,__webpack_require__)=>{var arrayMap=__webpack_require__("./node_modules/lodash/_arrayMap.js"),baseGet=__webpack_require__("./node_modules/lodash/_baseGet.js"),baseIteratee=__webpack_require__("./node_modules/lodash/_baseIteratee.js"),baseMap=__webpack_require__("./node_modules/lodash/_baseMap.js"),baseSortBy=__webpack_require__("./node_modules/lodash/_baseSortBy.js"),baseUnary=__webpack_require__("./node_modules/lodash/_baseUnary.js"),compareMultiple=__webpack_require__("./node_modules/lodash/_compareMultiple.js"),identity=__webpack_require__("./node_modules/lodash/identity.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js");module.exports=function baseOrderBy(collection,iteratees,orders){iteratees=iteratees.length?arrayMap(iteratees,(function(iteratee){return isArray(iteratee)?function(value){return baseGet(value,1===iteratee.length?iteratee[0]:iteratee)}:iteratee})):[identity];var index=-1;iteratees=arrayMap(iteratees,baseUnary(baseIteratee));var result=baseMap(collection,(function(value,key,collection){return{criteria:arrayMap(iteratees,(function(iteratee){return iteratee(value)})),index:++index,value}}));return baseSortBy(result,(function(object,other){return compareMultiple(object,other,orders)}))}},"./node_modules/lodash/_baseSortBy.js":module=>{module.exports=function baseSortBy(array,comparer){var length=array.length;for(array.sort(comparer);length--;)array[length]=array[length].value;return array}},"./node_modules/lodash/_compareAscending.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isSymbol=__webpack_require__("./node_modules/lodash/isSymbol.js");module.exports=function compareAscending(value,other){if(value!==other){var valIsDefined=void 0!==value,valIsNull=null===value,valIsReflexive=value==value,valIsSymbol=isSymbol(value),othIsDefined=void 0!==other,othIsNull=null===other,othIsReflexive=other==other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive)return 1;if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive)return-1}return 0}},"./node_modules/lodash/_compareMultiple.js":(module,__unused_webpack_exports,__webpack_require__)=>{var compareAscending=__webpack_require__("./node_modules/lodash/_compareAscending.js");module.exports=function compareMultiple(object,other,orders){for(var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;++index<length;){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result)return index>=ordersLength?result:result*("desc"==orders[index]?-1:1)}return object.index-other.index}},"./node_modules/lodash/_createBaseEach.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isArrayLike=__webpack_require__("./node_modules/lodash/isArrayLike.js");module.exports=function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(null==collection)return collection;if(!isArrayLike(collection))return eachFunc(collection,iteratee);for(var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);(fromRight?index--:++index<length)&&!1!==iteratee(iterable[index],index,iterable););return collection}}},"./node_modules/lodash/orderBy.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseOrderBy=__webpack_require__("./node_modules/lodash/_baseOrderBy.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js");module.exports=function orderBy(collection,iteratees,orders,guard){return null==collection?[]:(isArray(iteratees)||(iteratees=null==iteratees?[]:[iteratees]),isArray(orders=guard?void 0:orders)||(orders=null==orders?[]:[orders]),baseOrderBy(collection,iteratees,orders))}},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/templates/textResponses/TextResponsesTable.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithoutResponses=exports.WithResponses=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_TextResponsesTable=_interopRequireDefault(__webpack_require__("./src/templates/textResponses/TextResponsesTable.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}exports.default={component:_TextResponsesTable.default};var Template=function Template(args){return _react.default.createElement(_TextResponsesTable.default,_extends({sectionId:1,isLoading:!1},args))};(exports.WithResponses=Template.bind({})).args={responses:[{puzzle:2,question:"Check Your Understanding",response:"Lorem ipsum dolor sit amet, postea pericula",lesson:"Lesson 1",studentId:1,studentName:"Student A",url:"http://fake.url"},{puzzle:3,question:"Free Response",response:"Lorem ipsum dolor sit amet, postea pericula",lesson:"Lesson 2",studentId:3,studentName:"Student C",url:"http://fake.url"},{puzzle:1,question:"Free Response",response:"Lorem ipsum dolor sit amet, postea pericula. Lorem ipsum dolor sit amet, postea pericula. Lorem ipsum dolor sit amet, postea pericula",lesson:"Lesson 1",studentId:2,studentName:"Student B",url:"http://fake.url"}]},(exports.WithoutResponses=Template.bind({})).args={responses:[]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,