"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4364],{"./src/lib/ui/HelpTip.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=HelpTip;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactPortal=__webpack_require__("./node_modules/react-portal/es/index.js"),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function HelpTip(_ref){var children=_ref.children,id=_lodash.default.uniqueId();return _react.default.createElement("span",{"data-for":id,"data-tip":!0},_react.default.createElement(_FontAwesome.default,{icon:"question-circle-o",style:{cursor:"pointer",marginLeft:"0.5em",marginRight:"0.5em"}}),_react.default.createElement(_reactPortal.Portal,null,_react.default.createElement(_reactTooltip.default,{id,role:"tooltip",effect:"solid"},_react.default.createElement("div",{style:{maxWidth:400}},children))))}HelpTip.propTypes={children:_propTypes.default.node.isRequired},module.exports=exports.default},"./src/templates/FontAwesome.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./node_modules/react-portal/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Portal:()=>PortalCompat,PortalWithState:()=>es_PortalWithState});var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var Portal=function(_React$Component){function Portal(){return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),_createClass(Portal,[{key:"componentWillUnmount",value:function componentWillUnmount(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function render(){return canUseDOM?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),react_dom.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),Portal}(react.Component);Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const es_Portal=Portal;var LegacyPortal_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var LegacyPortal_Portal=function(_React$Component){function Portal(){return function LegacyPortal_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function LegacyPortal_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function LegacyPortal_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),LegacyPortal_createClass(Portal,[{key:"componentDidMount",value:function componentDidMount(){this.renderPortal()}},{key:"componentDidUpdate",value:function componentDidUpdate(props){this.renderPortal()}},{key:"componentWillUnmount",value:function componentWillUnmount(){react_dom.unmountComponentAtNode(this.defaultNode||this.props.node),this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null,this.portal=null}},{key:"renderPortal",value:function renderPortal(props){this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode));var children=this.props.children;"function"==typeof this.props.children.type&&(children=react.cloneElement(this.props.children)),this.portal=react_dom.unstable_renderSubtreeIntoContainer(this,children,this.props.node||this.defaultNode)}},{key:"render",value:function render(){return null}}]),Portal}(react.Component);const LegacyPortal=LegacyPortal_Portal;LegacyPortal_Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const PortalCompat=react_dom.createPortal?es_Portal:LegacyPortal;var PortalWithState_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var KEYCODES_ESCAPE=27,PortalWithState=function(_React$Component){function PortalWithState(props){!function PortalWithState_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,PortalWithState);var _this=function PortalWithState_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(PortalWithState.__proto__||Object.getPrototypeOf(PortalWithState)).call(this,props));return _this.portalNode=null,_this.state={active:!!props.defaultOpen},_this.openPortal=_this.openPortal.bind(_this),_this.closePortal=_this.closePortal.bind(_this),_this.wrapWithPortal=_this.wrapWithPortal.bind(_this),_this.handleOutsideMouseClick=_this.handleOutsideMouseClick.bind(_this),_this.handleKeydown=_this.handleKeydown.bind(_this),_this}return function PortalWithState_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(PortalWithState,_React$Component),PortalWithState_createClass(PortalWithState,[{key:"componentDidMount",value:function componentDidMount(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.addEventListener("click",this.handleOutsideMouseClick)}},{key:"componentWillUnmount",value:function componentWillUnmount(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.removeEventListener("click",this.handleOutsideMouseClick)}},{key:"openPortal",value:function openPortal(e){this.state.active||(e&&e.nativeEvent&&e.nativeEvent.stopImmediatePropagation(),this.setState({active:!0},this.props.onOpen))}},{key:"closePortal",value:function closePortal(){this.state.active&&this.setState({active:!1},this.props.onClose)}},{key:"wrapWithPortal",value:function wrapWithPortal(children){var _this2=this;return this.state.active?react.createElement(PortalCompat,{node:this.props.node,key:"react-portal",ref:function ref(portalNode){return _this2.portalNode=portalNode}},children):null}},{key:"handleOutsideMouseClick",value:function handleOutsideMouseClick(e){if(this.state.active){var root=this.portalNode&&(this.portalNode.props.node||this.portalNode.defaultNode);!root||root.contains(e.target)||e.button&&0!==e.button||this.closePortal()}}},{key:"handleKeydown",value:function handleKeydown(e){e.keyCode===KEYCODES_ESCAPE&&this.state.active&&this.closePortal()}},{key:"render",value:function render(){return this.props.children({openPortal:this.openPortal,closePortal:this.closePortal,portal:this.wrapWithPortal,isOpen:this.state.active})}}]),PortalWithState}(react.Component);PortalWithState.propTypes={children:prop_types_default().func.isRequired,defaultOpen:prop_types_default().bool,node:prop_types_default().any,closeOnEsc:prop_types_default().bool,closeOnOutsideClick:prop_types_default().bool,onOpen:prop_types_default().func,onClose:prop_types_default().func},PortalWithState.defaultProps={onOpen:function onOpen(){},onClose:function onClose(){}};const es_PortalWithState=PortalWithState},"./src/lib/ui/HelpTip.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.BasicExample=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_HelpTip=_interopRequireDefault(__webpack_require__("./src/lib/ui/HelpTip.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_HelpTip.default},exports.BasicExample=function BasicExample(args){return _react.default.createElement("div",{style:{margin:"2em",maxWidth:500}},_react.default.createElement("p",null,"The ",_react.default.createElement("code",null,"HelpTip")," component adds a helpful question mark icon with an attached tooltip inline with your text.",_react.default.createElement(_HelpTip.default,null,"Like this!"),"The tooltip can contain text or arbitrary React content.",_react.default.createElement(_HelpTip.default,null,"For example, an unordered list:",_react.default.createElement("ul",null,_react.default.createElement("li",null,"Isn't"),_react.default.createElement("li",null,"That"),_react.default.createElement("li",null,"Neat?")))),_react.default.createElement("p",null,"You use it like this:"),_react.default.createElement("pre",null,"<p>",_react.default.createElement("br",null),"  Here's some text, with a HelpTip on the end of it.",_react.default.createElement("br",null),"  <HelpTip>Here's the tooltip content.</HelpTip>",_react.default.createElement("br",null),"</p>"),_react.default.createElement("p",{style:{margin:"1em"}},"Here's some text, with a HelpTip on the end of it:",_react.default.createElement(_HelpTip.default,null,"Here's the tooltip content.")),_react.default.createElement("p",null,"The tooltip has a maximum width of 400px, so that it wraps nicely when given a large amount of text.",_react.default.createElement(_HelpTip.default,null,"Here's a generic paragraph of text to demonstrate that behavior. Lorem ipsum dolor sit amet jedi lightsaber. Darth vader ewok amok landspeeder bird feeder cypress citrus listlessness. Lorem ipsum dolor sit amet jedi lightsaber. Darth vader ewok amok landspeeder bird feeder cypress citrus listlessness.")),_react.default.createElement("p",null,"The tooltips also aren't given any direction about where they should appear, and they're fairly good at automatically positioning themselves in the viewport. So by default, they will appear above the question-mark icon, but if you've scrolled and your content is near the top of the viewport, they will appear below instead."),_react.default.createElement("hr",null),_react.default.createElement("p",null,"The original use we had in mind when developing this component was for form field labels, to provide additional information about constraints on a field, or the effect of a particular option."),_react.default.createElement("div",{style:{margin:"1em"}},_react.default.createElement("label",{htmlFor:"test-password",style:{fontWeight:"bold"}},"Create a new password",_react.default.createElement(_HelpTip.default,null,"Requirements",_react.default.createElement("ul",null,_react.default.createElement("li",null,"8-30 characters"),_react.default.createElement("li",null,"Must include both uppercase and lowercase characters"),_react.default.createElement("li",null,"Must include a number")))),_react.default.createElement("input",{id:"test-password",type:"password"})),_react.default.createElement("div",{style:{margin:"1em"}},_react.default.createElement("label",{htmlFor:"test-input",style:{fontWeight:"bold"}},"Send email notifications?",_react.default.createElement(_HelpTip.default,null,_react.default.createElement("p",null,"Controls whether our system will send the following email notifications to attendees of this workshop:"),_react.default.createElement("ul",null,_react.default.createElement("li",null,"An enrollment receipt"),_react.default.createElement("li",null,"A ten-day workshop reminder"),_react.default.createElement("li",null,"A three-day workshop reminder")),_react.default.createElement("p",null,"We will also email a post-workshop survey to attendees, regardless of this setting."))),_react.default.createElement("select",{style:{width:"100%"}},_react.default.createElement("option",null,"Yes, send email on my behalf."),_react.default.createElement("option",null,"No, I will manage communications myself."))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,