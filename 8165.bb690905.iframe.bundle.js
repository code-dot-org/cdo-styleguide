/*! For license information please see 8165.bb690905.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8165],{"./node_modules/@code-dot-org/js-interpreter/acorn.js":function(module,exports){var mod;mod=function(exports){"use strict";var options,input,inputLen,sourceFile;exports.version="0.4.1",exports.parse=function(inpt,opts){return input=String(inpt),inputLen=input.length,setOptions(opts),initTokenState(),function parseTopLevel(program){lastStart=lastEnd=tokPos,options.locations&&(lastEndLoc=new line_loc_t),inFunction=strict=null,labels=[],readToken();var node=program||startNode(),first=!0;for(program||(node.body=[]);tokType!==_eof;){var stmt=parseStatement();node.body.push(stmt),first&&isUseStrict(stmt)&&setStrict(!0),first=!1}return finishNode(node,"Program")}(options.program)};var defaultOptions=exports.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function setOptions(opts){for(var opt in options=opts||{},defaultOptions)Object.prototype.hasOwnProperty.call(options,opt)||(options[opt]=defaultOptions[opt]);sourceFile=options.sourceFile||null}var tokPos,tokStart,tokEnd,tokStartLoc,tokEndLoc,tokType,tokVal,tokRegexpAllowed,tokCurLine,tokLineStart,lastStart,lastEnd,lastEndLoc,inFunction,labels,strict,getLineInfo=exports.getLineInfo=function(input,offset){for(var line=1,cur=0;;){lineBreak.lastIndex=cur;var match=lineBreak.exec(input);if(!(match&&match.index<offset))break;++line,cur=match.index+match[0].length}return{line,column:offset-cur}};function raise(pos,message){var loc=getLineInfo(input,pos);message+=" ("+loc.line+":"+loc.column+")";var err=new SyntaxError(message);throw err.pos=pos,err.loc=loc,err.raisedAt=tokPos,err}exports.tokenize=function(inpt,opts){input=String(inpt),inputLen=input.length,setOptions(opts),initTokenState();var t={};function getToken(forceRegexp){return readToken(forceRegexp),t.start=tokStart,t.end=tokEnd,t.startLoc=tokStartLoc,t.endLoc=tokEndLoc,t.type=tokType,t.value=tokVal,t}return getToken.jumpTo=function(pos,reAllowed){var match;if(tokPos=pos,options.locations)for(tokCurLine=1,tokLineStart=lineBreak.lastIndex=0;(match=lineBreak.exec(input))&&match.index<pos;)++tokCurLine,tokLineStart=match.index+match[0].length;tokRegexpAllowed=reAllowed,skipSpace()},getToken};var empty=[],_num={type:"num"},_regexp={type:"regexp"},_string={type:"string"},_name={type:"name"},_eof={type:"eof"},_break={keyword:"break"},_case={keyword:"case",beforeExpr:!0},_catch={keyword:"catch"},_continue={keyword:"continue"},_debugger={keyword:"debugger"},_default={keyword:"default"},_do={keyword:"do",isLoop:!0},_else={keyword:"else",beforeExpr:!0},_finally={keyword:"finally"},_for={keyword:"for",isLoop:!0},_function={keyword:"function"},_if={keyword:"if"},_return={keyword:"return",beforeExpr:!0},_switch={keyword:"switch"},_throw={keyword:"throw",beforeExpr:!0},_try={keyword:"try"},_var={keyword:"var"},_while={keyword:"while",isLoop:!0},_with={keyword:"with"},_new={keyword:"new",beforeExpr:!0},_this={keyword:"this"},_null={keyword:"null",atomValue:null},_true={keyword:"true",atomValue:!0},_false={keyword:"false",atomValue:!1},_in={keyword:"in",binop:7,beforeExpr:!0},keywordTypes={break:_break,case:_case,catch:_catch,continue:_continue,debugger:_debugger,default:_default,do:_do,else:_else,finally:_finally,for:_for,function:_function,if:_if,return:_return,switch:_switch,throw:_throw,try:_try,var:_var,while:_while,with:_with,null:_null,true:_true,false:_false,new:_new,in:_in,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:_this,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},_bracketL={type:"[",beforeExpr:!0},_bracketR={type:"]"},_braceL={type:"{",beforeExpr:!0},_braceR={type:"}"},_parenL={type:"(",beforeExpr:!0},_parenR={type:")"},_comma={type:",",beforeExpr:!0},_semi={type:";",beforeExpr:!0},_colon={type:":",beforeExpr:!0},_dot={type:"."},_question={type:"?",beforeExpr:!0},_slash={binop:10,beforeExpr:!0},_eq={isAssign:!0,beforeExpr:!0},_assign={isAssign:!0,beforeExpr:!0},_incDec={postfix:!0,prefix:!0,isUpdate:!0},_prefix={prefix:!0,beforeExpr:!0},_logicalOR={binop:1,beforeExpr:!0},_logicalAND={binop:2,beforeExpr:!0},_bitwiseOR={binop:3,beforeExpr:!0},_bitwiseXOR={binop:4,beforeExpr:!0},_bitwiseAND={binop:5,beforeExpr:!0},_equality={binop:6,beforeExpr:!0},_relational={binop:7,beforeExpr:!0},_bitShift={binop:8,beforeExpr:!0},_plusMin={binop:9,prefix:!0,beforeExpr:!0},_multiplyModulo={binop:10,beforeExpr:!0};for(var kw in exports.tokTypes={bracketL:_bracketL,bracketR:_bracketR,braceL:_braceL,braceR:_braceR,parenL:_parenL,parenR:_parenR,comma:_comma,semi:_semi,colon:_colon,dot:_dot,question:_question,slash:_slash,eq:_eq,name:_name,eof:_eof,num:_num,regexp:_regexp,string:_string},keywordTypes)exports.tokTypes["_"+kw]=keywordTypes[kw];function makePredicate(words){words=words.split(" ");var f="",cats=[];out:for(var i=0;i<words.length;++i){for(var j=0;j<cats.length;++j)if(cats[j][0].length==words[i].length){cats[j].push(words[i]);continue out}cats.push([words[i]])}function compareTo(arr){if(1==arr.length)return f+="return str === "+JSON.stringify(arr[0])+";";f+="switch(str){";for(var i=0;i<arr.length;++i)f+="case "+JSON.stringify(arr[i])+":";f+="return true}return false;"}if(cats.length>3){for(cats.sort((function(a,b){return b.length-a.length})),f+="switch(str.length){",i=0;i<cats.length;++i){var cat=cats[i];f+="case "+cat[0].length+":",compareTo(cat)}f+="}"}else compareTo(words);return new Function("str",f)}var containsEsc,isReservedWord3=makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),isReservedWord5=makePredicate("class enum extends super const export import"),isStrictReservedWord=makePredicate("implements interface let package private protected public static yield"),isStrictBadIdWord=makePredicate("eval arguments"),isKeyword=makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),nonASCIIwhitespace=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]"),nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),newline=/[\n\r\u2028\u2029]/,lineBreak=/\r\n|[\n\r\u2028\u2029]/g,isIdentifierStart=exports.isIdentifierStart=function(code){return code<65?36===code:code<91||(code<97?95===code:code<123||code>=170&&nonASCIIidentifierStart.test(String.fromCharCode(code)))},isIdentifierChar=exports.isIdentifierChar=function(code){return code<48?36===code:code<58||!(code<65)&&(code<91||(code<97?95===code:code<123||code>=170&&nonASCIIidentifier.test(String.fromCharCode(code))))};function line_loc_t(){this.line=tokCurLine,this.column=tokPos-tokLineStart}function initTokenState(){tokCurLine=1,tokPos=tokLineStart=0,tokRegexpAllowed=!0,skipSpace()}function finishToken(type,val){tokEnd=tokPos,options.locations&&(tokEndLoc=new line_loc_t),tokType=type,skipSpace(),tokVal=val,tokRegexpAllowed=type.beforeExpr}function skipBlockComment(){var match,startLoc=options.onComment&&options.locations&&new line_loc_t,start=tokPos,end=input.indexOf("*/",tokPos+=2);if(-1===end&&raise(tokPos-2,"Unterminated comment"),tokPos=end+2,options.locations)for(lineBreak.lastIndex=start;(match=lineBreak.exec(input))&&match.index<tokPos;)++tokCurLine,tokLineStart=match.index+match[0].length;options.onComment&&options.onComment(!0,input.slice(start+2,end),start,tokPos,startLoc,options.locations&&new line_loc_t)}function skipLineComment(){for(var start=tokPos,startLoc=options.onComment&&options.locations&&new line_loc_t,ch=input.charCodeAt(tokPos+=2);tokPos<inputLen&&10!==ch&&13!==ch&&8232!==ch&&8233!==ch;)++tokPos,ch=input.charCodeAt(tokPos);options.onComment&&options.onComment(!1,input.slice(start+2,tokPos),start,tokPos,startLoc,options.locations&&new line_loc_t)}function skipSpace(){for(;tokPos<inputLen;){var ch=input.charCodeAt(tokPos);if(32===ch)++tokPos;else if(13===ch)++tokPos,10===(next=input.charCodeAt(tokPos))&&++tokPos,options.locations&&(++tokCurLine,tokLineStart=tokPos);else if(10===ch||8232===ch||8233===ch)++tokPos,options.locations&&(++tokCurLine,tokLineStart=tokPos);else if(ch>8&&ch<14)++tokPos;else if(47===ch){var next;if(42===(next=input.charCodeAt(tokPos+1)))skipBlockComment();else{if(47!==next)break;skipLineComment()}}else if(160===ch)++tokPos;else{if(!(ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))))break;++tokPos}}}function getTokenFromCode(code){switch(code){case 46:return function readToken_dot(){var next=input.charCodeAt(tokPos+1);return next>=48&&next<=57?readNumber(!0):(++tokPos,finishToken(_dot))}();case 40:return++tokPos,finishToken(_parenL);case 41:return++tokPos,finishToken(_parenR);case 59:return++tokPos,finishToken(_semi);case 44:return++tokPos,finishToken(_comma);case 91:return++tokPos,finishToken(_bracketL);case 93:return++tokPos,finishToken(_bracketR);case 123:return++tokPos,finishToken(_braceL);case 125:return++tokPos,finishToken(_braceR);case 58:return++tokPos,finishToken(_colon);case 63:return++tokPos,finishToken(_question);case 48:var next=input.charCodeAt(tokPos+1);if(120===next||88===next)return function readHexNumber(){tokPos+=2;var val=readInt(16);return null==val&&raise(tokStart+2,"Expected hexadecimal number"),isIdentifierStart(input.charCodeAt(tokPos))&&raise(tokPos,"Identifier directly after number"),finishToken(_num,val)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return readNumber(!1);case 34:case 39:return function readString(quote){tokPos++;for(var out="";;){tokPos>=inputLen&&raise(tokStart,"Unterminated string constant");var ch=input.charCodeAt(tokPos);if(ch===quote)return++tokPos,finishToken(_string,out);if(92===ch){ch=input.charCodeAt(++tokPos);var octal=/^[0-7]+/.exec(input.slice(tokPos,tokPos+3));for(octal&&(octal=octal[0]);octal&&parseInt(octal,8)>255;)octal=octal.slice(0,-1);if("0"===octal&&(octal=null),++tokPos,octal)strict&&raise(tokPos-2,"Octal literal in strict mode"),out+=String.fromCharCode(parseInt(octal,8)),tokPos+=octal.length-1;else switch(ch){case 110:out+="\n";break;case 114:out+="\r";break;case 120:out+=String.fromCharCode(readHexChar(2));break;case 117:out+=String.fromCharCode(readHexChar(4));break;case 85:out+=String.fromCharCode(readHexChar(8));break;case 116:out+="\t";break;case 98:out+="\b";break;case 118:out+="\v";break;case 102:out+="\f";break;case 48:out+="\0";break;case 13:10===input.charCodeAt(tokPos)&&++tokPos;case 10:options.locations&&(tokLineStart=tokPos,++tokCurLine);break;default:out+=String.fromCharCode(ch)}}else 13!==ch&&10!==ch&&8232!==ch&&8233!==ch||raise(tokStart,"Unterminated string constant"),out+=String.fromCharCode(ch),++tokPos}}(code);case 47:return function readToken_slash(){var next=input.charCodeAt(tokPos+1);return tokRegexpAllowed?(++tokPos,readRegexp()):61===next?finishOp(_assign,2):finishOp(_slash,1)}();case 37:case 42:return function readToken_mult_modulo(){return 61===input.charCodeAt(tokPos+1)?finishOp(_assign,2):finishOp(_multiplyModulo,1)}();case 124:case 38:return function readToken_pipe_amp(code){var next=input.charCodeAt(tokPos+1);return next===code?finishOp(124===code?_logicalOR:_logicalAND,2):61===next?finishOp(_assign,2):finishOp(124===code?_bitwiseOR:_bitwiseAND,1)}(code);case 94:return function readToken_caret(){return 61===input.charCodeAt(tokPos+1)?finishOp(_assign,2):finishOp(_bitwiseXOR,1)}();case 43:case 45:return function readToken_plus_min(code){var next=input.charCodeAt(tokPos+1);return next===code?45==next&&62==input.charCodeAt(tokPos+2)&&newline.test(input.slice(lastEnd,tokPos))?(tokPos+=3,skipLineComment(),skipSpace(),readToken()):finishOp(_incDec,2):61===next?finishOp(_assign,2):finishOp(_plusMin,1)}(code);case 60:case 62:return function readToken_lt_gt(code){var next=input.charCodeAt(tokPos+1),size=1;return next===code?(size=62===code&&62===input.charCodeAt(tokPos+2)?3:2,61===input.charCodeAt(tokPos+size)?finishOp(_assign,size+1):finishOp(_bitShift,size)):33==next&&60==code&&45==input.charCodeAt(tokPos+2)&&45==input.charCodeAt(tokPos+3)?(tokPos+=4,skipLineComment(),skipSpace(),readToken()):(61===next&&(size=61===input.charCodeAt(tokPos+2)?3:2),finishOp(_relational,size))}(code);case 61:case 33:return function readToken_eq_excl(code){return 61===input.charCodeAt(tokPos+1)?finishOp(_equality,61===input.charCodeAt(tokPos+2)?3:2):finishOp(61===code?_eq:_prefix,1)}(code);case 126:return finishOp(_prefix,1)}return!1}function readToken(forceRegexp){if(forceRegexp?tokPos=tokStart+1:tokStart=tokPos,options.locations&&(tokStartLoc=new line_loc_t),forceRegexp)return readRegexp();if(tokPos>=inputLen)return finishToken(_eof);var code=input.charCodeAt(tokPos);if(isIdentifierStart(code)||92===code)return readWord();var tok=getTokenFromCode(code);if(!1===tok){var ch=String.fromCharCode(code);if("\\"===ch||nonASCIIidentifierStart.test(ch))return readWord();raise(tokPos,"Unexpected character '"+ch+"'")}return tok}function finishOp(type,size){var str=input.slice(tokPos,tokPos+size);tokPos+=size,finishToken(type,str)}function readRegexp(){for(var escaped,inClass,start=tokPos;;){tokPos>=inputLen&&raise(start,"Unterminated regular expression");var ch=input.charAt(tokPos);if(newline.test(ch)&&raise(start,"Unterminated regular expression"),escaped)escaped=!1;else{if("["===ch)inClass=!0;else if("]"===ch&&inClass)inClass=!1;else if("/"===ch&&!inClass)break;escaped="\\"===ch}++tokPos}var content=input.slice(start,tokPos);++tokPos;var mods=readWord1();return mods&&!/^[gmsiy]*$/.test(mods)&&raise(start,"Invalid regexp flag"),finishToken(_regexp,new RegExp(content,mods))}function readInt(radix,len){for(var start=tokPos,total=0,i=0,e=null==len?1/0:len;i<e;++i){var val,code=input.charCodeAt(tokPos);if((val=code>=97?code-97+10:code>=65?code-65+10:code>=48&&code<=57?code-48:1/0)>=radix)break;++tokPos,total=total*radix+val}return tokPos===start||null!=len&&tokPos-start!==len?null:total}function readNumber(startsWithDot){var start=tokPos,isFloat=!1,octal=48===input.charCodeAt(tokPos);startsWithDot||null!==readInt(10)||raise(start,"Invalid number"),46===input.charCodeAt(tokPos)&&(++tokPos,readInt(10),isFloat=!0);var next=input.charCodeAt(tokPos);69!==next&&101!==next||(43!==(next=input.charCodeAt(++tokPos))&&45!==next||++tokPos,null===readInt(10)&&raise(start,"Invalid number"),isFloat=!0),isIdentifierStart(input.charCodeAt(tokPos))&&raise(tokPos,"Identifier directly after number");var val,str=input.slice(start,tokPos);return isFloat?val=parseFloat(str):octal&&1!==str.length?/[89]/.test(str)||strict?raise(start,"Invalid number"):val=parseInt(str,8):val=parseInt(str,10),finishToken(_num,val)}function readHexChar(len){var n=readInt(16,len);return null===n&&raise(tokStart,"Bad character escape sequence"),n}function readWord1(){containsEsc=!1;for(var word,first=!0,start=tokPos;;){var ch=input.charCodeAt(tokPos);if(isIdentifierChar(ch))containsEsc&&(word+=input.charAt(tokPos)),++tokPos;else{if(92!==ch)break;containsEsc||(word=input.slice(start,tokPos)),containsEsc=!0,117!=input.charCodeAt(++tokPos)&&raise(tokPos,"Expecting Unicode escape sequence \\uXXXX"),++tokPos;var esc=readHexChar(4),escStr=String.fromCharCode(esc);escStr||raise(tokPos-1,"Invalid Unicode escape"),(first?isIdentifierStart(esc):isIdentifierChar(esc))||raise(tokPos-4,"Invalid Unicode escape"),word+=escStr}first=!1}return containsEsc?word:input.slice(start,tokPos)}function readWord(){var word=readWord1(),type=_name;return containsEsc||(isKeyword(word)?type=keywordTypes[word]:(options.forbidReserved&&(3===options.ecmaVersion?isReservedWord3:isReservedWord5)(word)||strict&&isStrictReservedWord(word))&&raise(tokStart,"The keyword '"+word+"' is reserved")),finishToken(type,word)}function next(){lastStart=tokStart,lastEnd=tokEnd,lastEndLoc=tokEndLoc,readToken()}function setStrict(strct){if(strict=strct,tokPos=lastEnd,options.locations)for(;tokPos<tokLineStart;)tokLineStart=input.lastIndexOf("\n",tokLineStart-2)+1,--tokCurLine;skipSpace(),readToken()}function node_t(){this.type=null,this.start=tokStart,this.end=null}function node_loc_t(){this.start=tokStartLoc,this.end=null,null!==sourceFile&&(this.source=sourceFile)}function startNode(){var node=new node_t;return options.locations&&(node.loc=new node_loc_t),options.directSourceFile&&(node.sourceFile=options.directSourceFile),options.ranges&&(node.range=[tokStart,0]),node}function startNodeFrom(other){var node=new node_t;return node.start=other.start,options.locations&&(node.loc=new node_loc_t,node.loc.start=other.loc.start),options.ranges&&(node.range=[other.range[0],0]),node}function finishNode(node,type){return node.type=type,node.end=lastEnd,options.locations&&(node.loc.end=lastEndLoc),options.ranges&&(node.range[1]=lastEnd),node}function isUseStrict(stmt){return options.ecmaVersion>=5&&"ExpressionStatement"===stmt.type&&"Literal"===stmt.expression.type&&"use strict"===stmt.expression.value}function eat(type){if(tokType===type)return next(),!0}function canInsertSemicolon(){return!options.strictSemicolons&&(tokType===_eof||tokType===_braceR||newline.test(input.slice(lastEnd,tokStart)))}function semicolon(){eat(_semi)||canInsertSemicolon()||unexpected()}function expect(type){tokType===type?next():unexpected()}function unexpected(){raise(tokStart,"Unexpected token")}function checkLVal(expr){"Identifier"!==expr.type&&"MemberExpression"!==expr.type&&raise(expr.start,"Assigning to rvalue"),strict&&"Identifier"===expr.type&&isStrictBadIdWord(expr.name)&&raise(expr.start,"Assigning to "+expr.name+" in strict mode")}var loopLabel={kind:"loop"},switchLabel={kind:"switch"};function parseStatement(){(tokType===_slash||tokType===_assign&&"/="==tokVal)&&readToken(!0);var starttype=tokType,node=startNode();switch(starttype){case _break:case _continue:next();var isBreak=starttype===_break;eat(_semi)||canInsertSemicolon()?node.label=null:tokType!==_name?unexpected():(node.label=parseIdent(),semicolon());for(var i=0;i<labels.length;++i){var lab=labels[i];if(null==node.label||lab.name===node.label.name){if(null!=lab.kind&&(isBreak||"loop"===lab.kind))break;if(node.label&&isBreak)break}}return i===labels.length&&raise(node.start,"Unsyntactic "+starttype.keyword),finishNode(node,isBreak?"BreakStatement":"ContinueStatement");case _debugger:return next(),semicolon(),finishNode(node,"DebuggerStatement");case _do:return next(),labels.push(loopLabel),node.body=parseStatement(),labels.pop(),expect(_while),node.test=parseParenExpression(),semicolon(),finishNode(node,"DoWhileStatement");case _for:if(next(),labels.push(loopLabel),expect(_parenL),tokType===_semi)return parseFor(node,null);if(tokType===_var){var init=startNode();return next(),parseVar(init,!0),finishNode(init,"VariableDeclaration"),1===init.declarations.length&&eat(_in)?parseForIn(node,init):parseFor(node,init)}return init=parseExpression(!1,!0),eat(_in)?(checkLVal(init),parseForIn(node,init)):parseFor(node,init);case _function:return next(),parseFunction(node,!0);case _if:return next(),node.test=parseParenExpression(),node.consequent=parseStatement(),node.alternate=eat(_else)?parseStatement():null,finishNode(node,"IfStatement");case _return:return inFunction||raise(tokStart,"'return' outside of function"),next(),eat(_semi)||canInsertSemicolon()?node.argument=null:(node.argument=parseExpression(),semicolon()),finishNode(node,"ReturnStatement");case _switch:next(),node.discriminant=parseParenExpression(),node.cases=[],expect(_braceL),labels.push(switchLabel);for(var cur,sawDefault;tokType!=_braceR;)if(tokType===_case||tokType===_default){var isCase=tokType===_case;cur&&finishNode(cur,"SwitchCase"),node.cases.push(cur=startNode()),cur.consequent=[],next(),isCase?cur.test=parseExpression():(sawDefault&&raise(lastStart,"Multiple default clauses"),sawDefault=!0,cur.test=null),expect(_colon)}else cur||unexpected(),cur.consequent.push(parseStatement());return cur&&finishNode(cur,"SwitchCase"),next(),labels.pop(),finishNode(node,"SwitchStatement");case _throw:return next(),newline.test(input.slice(lastEnd,tokStart))&&raise(lastEnd,"Illegal newline after throw"),node.argument=parseExpression(),semicolon(),finishNode(node,"ThrowStatement");case _try:if(next(),node.block=parseBlock(),node.handler=null,tokType===_catch){var clause=startNode();next(),expect(_parenL),clause.param=parseIdent(),strict&&isStrictBadIdWord(clause.param.name)&&raise(clause.param.start,"Binding "+clause.param.name+" in strict mode"),expect(_parenR),clause.guard=null,clause.body=parseBlock(),node.handler=finishNode(clause,"CatchClause")}return node.guardedHandlers=empty,node.finalizer=eat(_finally)?parseBlock():null,node.handler||node.finalizer||raise(node.start,"Missing catch or finally clause"),finishNode(node,"TryStatement");case _var:return next(),parseVar(node),semicolon(),finishNode(node,"VariableDeclaration");case _while:return next(),node.test=parseParenExpression(),labels.push(loopLabel),node.body=parseStatement(),labels.pop(),finishNode(node,"WhileStatement");case _with:return strict&&raise(tokStart,"'with' in strict mode"),next(),node.object=parseParenExpression(),node.body=parseStatement(),finishNode(node,"WithStatement");case _braceL:return parseBlock();case _semi:return next(),finishNode(node,"EmptyStatement");default:var maybeName=tokVal,expr=parseExpression();if(starttype===_name&&"Identifier"===expr.type&&eat(_colon)){for(i=0;i<labels.length;++i)labels[i].name===maybeName&&raise(expr.start,"Label '"+maybeName+"' is already declared");var kind=tokType.isLoop?"loop":tokType===_switch?"switch":null;return labels.push({name:maybeName,kind}),node.body=parseStatement(),labels.pop(),node.label=expr,finishNode(node,"LabeledStatement")}return node.expression=expr,semicolon(),finishNode(node,"ExpressionStatement")}}function parseParenExpression(){expect(_parenL);var val=parseExpression();return expect(_parenR),val}function parseBlock(allowStrict){var oldStrict,node=startNode(),first=!0,strict=!1;for(node.body=[],expect(_braceL);!eat(_braceR);){var stmt=parseStatement();node.body.push(stmt),first&&allowStrict&&isUseStrict(stmt)&&(oldStrict=strict,setStrict(strict=!0)),first=!1}return strict&&!oldStrict&&setStrict(!1),finishNode(node,"BlockStatement")}function parseFor(node,init){return node.init=init,expect(_semi),node.test=tokType===_semi?null:parseExpression(),expect(_semi),node.update=tokType===_parenR?null:parseExpression(),expect(_parenR),node.body=parseStatement(),labels.pop(),finishNode(node,"ForStatement")}function parseForIn(node,init){return node.left=init,node.right=parseExpression(),expect(_parenR),node.body=parseStatement(),labels.pop(),finishNode(node,"ForInStatement")}function parseVar(node,noIn){for(node.declarations=[],node.kind="var";;){var decl=startNode();if(decl.id=parseIdent(),strict&&isStrictBadIdWord(decl.id.name)&&raise(decl.id.start,"Binding "+decl.id.name+" in strict mode"),decl.init=eat(_eq)?parseExpression(!0,noIn):null,node.declarations.push(finishNode(decl,"VariableDeclarator")),!eat(_comma))break}return node}function parseExpression(noComma,noIn){var expr=parseMaybeAssign(noIn);if(!noComma&&tokType===_comma){var node=startNodeFrom(expr);for(node.expressions=[expr];eat(_comma);)node.expressions.push(parseMaybeAssign(noIn));return finishNode(node,"SequenceExpression")}return expr}function parseMaybeAssign(noIn){var left=function parseMaybeConditional(noIn){var expr=function parseExprOps(noIn){return parseExprOp(parseMaybeUnary(),-1,noIn)}(noIn);if(eat(_question)){var node=startNodeFrom(expr);return node.test=expr,node.consequent=parseExpression(!0),expect(_colon),node.alternate=parseExpression(!0,noIn),finishNode(node,"ConditionalExpression")}return expr}(noIn);if(tokType.isAssign){var node=startNodeFrom(left);return node.operator=tokVal,node.left=left,next(),node.right=parseMaybeAssign(noIn),checkLVal(left),finishNode(node,"AssignmentExpression")}return left}function parseExprOp(left,minPrec,noIn){var prec=tokType.binop;if(null!=prec&&(!noIn||tokType!==_in)&&prec>minPrec){var node=startNodeFrom(left);node.left=left,node.operator=tokVal;var op=tokType;return next(),node.right=parseExprOp(parseMaybeUnary(),prec,noIn),parseExprOp(finishNode(node,op===_logicalOR||op===_logicalAND?"LogicalExpression":"BinaryExpression"),minPrec,noIn)}return left}function parseMaybeUnary(){if(tokType.prefix){var node=startNode(),update=tokType.isUpdate;return node.operator=tokVal,node.prefix=!0,tokRegexpAllowed=!0,next(),node.argument=parseMaybeUnary(),update?checkLVal(node.argument):strict&&"delete"===node.operator&&"Identifier"===node.argument.type&&raise(node.start,"Deleting local variable in strict mode"),finishNode(node,update?"UpdateExpression":"UnaryExpression")}for(var expr=function parseExprSubscripts(){return parseSubscripts(parseExprAtom())}();tokType.postfix&&!canInsertSemicolon();)(node=startNodeFrom(expr)).operator=tokVal,node.prefix=!1,node.argument=expr,checkLVal(expr),next(),expr=finishNode(node,"UpdateExpression");return expr}function parseSubscripts(base,noCalls){var node;return eat(_dot)?((node=startNodeFrom(base)).object=base,node.property=parseIdent(!0),node.computed=!1,parseSubscripts(finishNode(node,"MemberExpression"),noCalls)):eat(_bracketL)?((node=startNodeFrom(base)).object=base,node.property=parseExpression(),node.computed=!0,expect(_bracketR),parseSubscripts(finishNode(node,"MemberExpression"),noCalls)):!noCalls&&eat(_parenL)?((node=startNodeFrom(base)).callee=base,node.arguments=parseExprList(_parenR,!1),parseSubscripts(finishNode(node,"CallExpression"),noCalls)):base}function parseExprAtom(){switch(tokType){case _this:var node=startNode();return next(),finishNode(node,"ThisExpression");case _name:return parseIdent();case _num:case _string:case _regexp:return(node=startNode()).value=tokVal,node.raw=input.slice(tokStart,tokEnd),next(),finishNode(node,"Literal");case _null:case _true:case _false:return(node=startNode()).value=tokType.atomValue,node.raw=tokType.keyword,next(),finishNode(node,"Literal");case _parenL:var tokStartLoc1=tokStartLoc,tokStart1=tokStart;next();var val=parseExpression();return val.start=tokStart1,val.end=tokEnd,options.locations&&(val.loc.start=tokStartLoc1,val.loc.end=tokEndLoc),options.ranges&&(val.range=[tokStart1,tokEnd]),expect(_parenR),val;case _bracketL:return node=startNode(),next(),node.elements=parseExprList(_bracketR,!0,!0),finishNode(node,"ArrayExpression");case _braceL:return function parseObj(){var node=startNode(),first=!0,sawGetSet=!1;for(node.properties=[],next();!eat(_braceR);){if(first)first=!1;else if(expect(_comma),options.allowTrailingCommas&&eat(_braceR))break;var kind,prop={key:parsePropertyName()},isGetSet=!1;if(eat(_colon)?(prop.value=parseExpression(!0),kind=prop.kind="init"):options.ecmaVersion>=5&&"Identifier"===prop.key.type&&("get"===prop.key.name||"set"===prop.key.name)?(isGetSet=sawGetSet=!0,kind=prop.kind=prop.key.name,prop.key=parsePropertyName(),tokType!==_parenL&&unexpected(),prop.value=parseFunction(startNode(),!1)):unexpected(),"Identifier"===prop.key.type&&(strict||sawGetSet))for(var i=0;i<node.properties.length;++i){var other=node.properties[i];if(other.key.name===prop.key.name){var conflict=kind==other.kind||isGetSet&&"init"===other.kind||"init"===kind&&("get"===other.kind||"set"===other.kind);conflict&&!strict&&"init"===kind&&"init"===other.kind&&(conflict=!1),conflict&&raise(prop.key.start,"Redefinition of property")}}node.properties.push(prop)}return finishNode(node,"ObjectExpression")}();case _function:return node=startNode(),next(),parseFunction(node,!1);case _new:return function parseNew(){var node=startNode();return next(),node.callee=parseSubscripts(parseExprAtom(),!0),eat(_parenL)?node.arguments=parseExprList(_parenR,!1):node.arguments=empty,finishNode(node,"NewExpression")}();default:unexpected()}}function parsePropertyName(){return tokType===_num||tokType===_string?parseExprAtom():parseIdent(!0)}function parseFunction(node,isStatement){tokType===_name?node.id=parseIdent():isStatement?unexpected():node.id=null,node.params=[];var first=!0;for(expect(_parenL);!eat(_parenR);)first?first=!1:expect(_comma),node.params.push(parseIdent());var oldInFunc=inFunction,oldLabels=labels;if(inFunction=!0,labels=[],node.body=parseBlock(!0),inFunction=oldInFunc,labels=oldLabels,strict||node.body.body.length&&isUseStrict(node.body.body[0]))for(var i=node.id?-1:0;i<node.params.length;++i){var id=i<0?node.id:node.params[i];if((isStrictReservedWord(id.name)||isStrictBadIdWord(id.name))&&raise(id.start,"Defining '"+id.name+"' in strict mode"),i>=0)for(var j=0;j<i;++j)id.name===node.params[j].name&&raise(id.start,"Argument name clash in strict mode")}return finishNode(node,isStatement?"FunctionDeclaration":"FunctionExpression")}function parseExprList(close,allowTrailingComma,allowEmpty){for(var elts=[],first=!0;!eat(close);){if(first)first=!1;else if(expect(_comma),allowTrailingComma&&options.allowTrailingCommas&&eat(close))break;allowEmpty&&tokType===_comma?elts.push(null):elts.push(parseExpression(!0))}return elts}function parseIdent(liberal){var node=startNode();return node.name=tokType===_name?tokVal:liberal&&!options.forbidReserved&&tokType.keyword||unexpected(),tokRegexpAllowed=!1,next(),finishNode(node,"Identifier")}},mod(exports)},"./node_modules/@code-dot-org/js-interpreter/interpreter.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var acorn=__webpack_require__("./node_modules/@code-dot-org/js-interpreter/acorn.js"),Interpreter=module.exports=function(code,opt_initFunc){"string"==typeof code&&(code=acorn.parse(code,Interpreter.PARSE_OPTIONS)),this.ast=code,this.initFunc_=opt_initFunc,this.paused_=!1,this.polyfills_=[],this.functionCounter_=0,this.functionMap_=Object.create(null);var m,stepMatch=/^step([A-Z]\w*)$/;for(var methodName in this)(m=methodName.match(stepMatch))&&(this.functionMap_[m[1]]=this[methodName].bind(this));var mockObject={properties:{prototype:null}};this.NUMBER=mockObject,this.BOOLEAN=mockObject,this.STRING=mockObject,this.UNDEFINED=new Interpreter.Primitive(void 0,this),this.NULL=new Interpreter.Primitive(null,this),this.NAN=new Interpreter.Primitive(NaN,this),this.TRUE=new Interpreter.Primitive(!0,this),this.FALSE=new Interpreter.Primitive(!1,this),this.NUMBER_ZERO=new Interpreter.Primitive(0,this),this.NUMBER_ONE=new Interpreter.Primitive(1,this),this.STRING_EMPTY=new Interpreter.Primitive("",this),this.global=this.createScope(this.ast,null),this.NAN.proto=this.NUMBER.properties.prototype,this.TRUE.proto=this.BOOLEAN.properties.prototype,this.FALSE.proto=this.BOOLEAN.properties.prototype,this.NUMBER_ZERO.proto=this.NUMBER.properties.prototype,this.NUMBER_ONE.proto=this.NUMBER.properties.prototype,this.STRING_EMPTY.proto=this.STRING.properties.prototype,this.ast=acorn.parse(this.polyfills_.join("\n"),Interpreter.PARSE_OPTIONS),this.polyfills_=void 0,this.stripLocations_(this.ast,void 0,void 0),this.stateStack=[{node:this.ast,scope:this.global,thisExpression:this.global,done:!1}],this.run(),this.value=this.UNDEFINED,this.ast=code,this.stateStack=[{node:this.ast,scope:this.global,thisExpression:this.global,done:!1}],this.UNDEFINED=this.UNDEFINED,this.NULL=this.NULL,this.NAN=this.NAN,this.TRUE=this.TRUE,this.FALSE=this.FALSE};Interpreter.PARSE_OPTIONS={ecmaVersion:5},Interpreter.READONLY_DESCRIPTOR={configurable:!0,enumerable:!0,writable:!1},Interpreter.NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!0},Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!1},Interpreter.toStringCycles_=[],Interpreter.generateAST=function(code,parseOptions){var options=Interpreter.PARSE_OPTIONS;return Object.keys(parseOptions).forEach((function(key){options[key]=parseOptions[key]})),acorn.parse(code,options)},Interpreter.prototype.appendCode=function(code,additionalOptions){void 0===additionalOptions&&(additionalOptions={});var state=this.stateStack[0];if(!state||"Program"!=state.node.type)throw Error("Expecting original AST to start with a Program node.");if("string"==typeof code){var acornOptions={};for(var attribute in Interpreter.PARSE_OPTIONS)acornOptions[attribute]=Interpreter.PARSE_OPTIONS[attribute];for(var attribute in additionalOptions)acornOptions[attribute]=additionalOptions[attribute];code=acorn.parse(code,acornOptions)}if(!code||"Program"!=code.type)throw Error("Expecting new AST to start with a Program node.");this.populateScope_(code,state.scope);for(var node,i=0;node=code.body[i];i++)state.node.body.push(node);state.done=!1},Interpreter.prototype.step=function(){var node;do{var stack=this.stateStack,state=stack[stack.length-1];if(!state)return!1;var type=(node=state.node).type;if("Program"===type&&state.done)return!1;if(this.paused_)return!0;this.functionMap_[type]()}while(!node.end);return!0},Interpreter.prototype.run=function(){for(;!this.paused_&&this.step(););return this.paused_},Interpreter.prototype.initGlobalScope=function(scope){this.setProperty(scope,"Infinity",this.createPrimitive(1/0),Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"NaN",this.NAN,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"undefined",this.UNDEFINED,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"window",scope,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"self",scope),this.initFunction(scope),this.initObject(scope),scope.proto=this.OBJECT.properties.prototype,this.setProperty(scope,"constructor",this.OBJECT),this.initArray(scope),this.initNumber(scope),this.initString(scope),this.initBoolean(scope),this.initDate(scope),this.initMath(scope),this.initRegExp(scope),this.initJSON(scope),this.initError(scope);var wrapper,thisInterpreter=this;wrapper=function(num){return num=num||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(isNaN(num.toNumber()))},this.setProperty(scope,"isNaN",this.createNativeFunction(wrapper,!1)),wrapper=function(num){return num=num||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(isFinite(num.toNumber()))},this.setProperty(scope,"isFinite",this.createNativeFunction(wrapper,!1)),this.setProperty(scope,"parseFloat",this.getProperty(this.NUMBER,"parseFloat")),this.setProperty(scope,"parseInt",this.getProperty(this.NUMBER,"parseInt"));var func=this.createObject(this.FUNCTION);func.eval=!0,this.setProperty(func,"length",this.NUMBER_ONE,Interpreter.READONLY_DESCRIPTOR),this.setProperty(scope,"eval",func);for(var strFunctions=[[escape,"escape"],[unescape,"unescape"],[decodeURI,"decodeURI"],[decodeURIComponent,"decodeURIComponent"],[encodeURI,"encodeURI"],[encodeURIComponent,"encodeURIComponent"]],i=0;i<strFunctions.length;i++)wrapper=function(nativeFunc){return function(str){str=(str||thisInterpreter.UNDEFINED).toString();try{str=nativeFunc(str)}catch(e){thisInterpreter.throwException(thisInterpreter.URI_ERROR,e.message)}return thisInterpreter.createPrimitive(str)}}(strFunctions[i][0]),this.setProperty(scope,strFunctions[i][1],this.createNativeFunction(wrapper,!1));this.initFunc_&&this.initFunc_(this,scope)},Interpreter.prototype.initFunction=function(scope){var wrapper,thisInterpreter=this,identifierRegexp=/^[A-Za-z_$][\w$]*$/;wrapper=function(var_args){if(thisInterpreter.calledWithNew())var newFunc=this;else newFunc=thisInterpreter.createObject(thisInterpreter.FUNCTION);if(arguments.length)var code=arguments[arguments.length-1].toString();else code="";for(var args=[],i=0;i<arguments.length-1;i++){var name=arguments[i].toString();if(!name.match(identifierRegexp))return void thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR,"Invalid function argument: "+name);args.push(name)}args=args.join(", "),newFunc.parentScope=thisInterpreter.stateStack[0].scope;var ast=acorn.parse("$ = function("+args+") {"+code+"};",Interpreter.PARSE_OPTIONS);if(1==ast.body.length)return newFunc.node=ast.body[0].expression.right,thisInterpreter.setProperty(newFunc,"length",thisInterpreter.createPrimitive(newFunc.node.length),Interpreter.READONLY_DESCRIPTOR),newFunc;thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR,"Invalid code in function body.")},wrapper.id=this.functionCounter_++,this.FUNCTION=this.createObject(null),this.setProperty(scope,"Function",this.FUNCTION),this.FUNCTION.type="function",this.setProperty(this.FUNCTION,"prototype",this.createObject(null)),this.setProperty(this.FUNCTION.properties.prototype,"constructor",this.FUNCTION,Interpreter.NONENUMERABLE_DESCRIPTOR),this.FUNCTION.nativeFunc=wrapper;var boxThis=function(value){if(value.isPrimitive&&!thisInterpreter.getScope().strict)if(value==thisInterpreter.UNDEFINED||value==thisInterpreter.NULL)value=thisInterpreter.global;else{var box=thisInterpreter.createObject(value.properties.constructor);box.data=value.data,value=box}return value};wrapper=function(thisArg,args){var state=thisInterpreter.stateStack[thisInterpreter.stateStack.length-1];if(state.func_=this,state.funcThis_=boxThis(thisArg),state.arguments_=[],args)if(thisInterpreter.isa(args,thisInterpreter.ARRAY))for(var i=0;i<args.length;i++)state.arguments_[i]=thisInterpreter.getProperty(args,i);else thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"CreateListFromArrayLike called on non-object");state.doneArgs_=!0,state.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"apply",wrapper),wrapper=function(thisArg,var_args){var state=thisInterpreter.stateStack[thisInterpreter.stateStack.length-1];state.func_=this,state.funcThis_=boxThis(thisArg),state.arguments_=[];for(var i=1;i<arguments.length;i++)state.arguments_.push(arguments[i]);state.doneArgs_=!0,state.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"call",wrapper),this.polyfills_.push("Object.defineProperty(Function.prototype, 'bind', {configurable: true, value:","function(oThis) {","if (typeof this !== 'function') {","throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');","}","var aArgs   = Array.prototype.slice.call(arguments, 1),","fToBind = this,","fNOP    = function() {},","fBound  = function() {","return fToBind.apply(this instanceof fNOP","? this",": oThis,","aArgs.concat(Array.prototype.slice.call(arguments)));","};","if (this.prototype) {","fNOP.prototype = this.prototype;","}","fBound.prototype = new fNOP();","return fBound;","}","});",""),wrapper=function(){return thisInterpreter.createPrimitive(this.toString())},this.setNativeFunctionPrototype(this.FUNCTION,"toString",wrapper),this.setProperty(this.FUNCTION,"toString",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(){return thisInterpreter.createPrimitive(this.valueOf())},this.setNativeFunctionPrototype(this.FUNCTION,"valueOf",wrapper),this.setProperty(this.FUNCTION,"valueOf",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR)},Interpreter.prototype.initObject=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){if(!value||value==thisInterpreter.UNDEFINED||value==thisInterpreter.NULL)return thisInterpreter.calledWithNew()?this:thisInterpreter.createObject(thisInterpreter.OBJECT);if(value.isPrimitive){var obj=thisInterpreter.createObject(value.properties.constructor);return obj.data=value.data,obj}return value},this.OBJECT=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Object",this.OBJECT),wrapper=function(obj){if(obj!=thisInterpreter.UNDEFINED&&obj!=thisInterpreter.NULL){var props=obj.isPrimitive?obj.data:obj.properties;return thisInterpreter.nativeToPseudo(Object.getOwnPropertyNames(props))}thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Cannot convert undefined or null to object")},this.setProperty(this.OBJECT,"getOwnPropertyNames",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){if(obj.isPrimitive)return thisInterpreter.nativeToPseudo(Object.keys(obj.data));var list=[];for(var key in obj.properties)obj.notEnumerable[key]||list.push(key);return thisInterpreter.nativeToPseudo(list)},this.setProperty(this.OBJECT,"keys",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(proto){return proto==thisInterpreter.NULL?thisInterpreter.createObject(null):proto.isPrimitive?void thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Object prototype may only be an Object or null"):thisInterpreter.createObjectProto(proto)},this.setProperty(this.OBJECT,"create",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("(function() {","var create_ = Object.create;","Object.defineProperty(Object, 'create', {configurable: true, value:","function(proto, props) {","var obj = create_(proto);","props && Object.defineProperties(obj, props);","return obj;","}","});","})();",""),wrapper=function(obj,prop,descriptor){if(prop=(prop||thisInterpreter.UNDEFINED).toString(),descriptor instanceof Interpreter.Object){if(obj.properties[prop]||!obj.preventExtensions){var value=thisInterpreter.getProperty(descriptor,"value");value==thisInterpreter.UNDEFINED&&(value=null);var get=thisInterpreter.getProperty(descriptor,"get"),set=thisInterpreter.getProperty(descriptor,"set"),nativeDescriptor={configurable:thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor,"configurable")),enumerable:thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor,"enumerable")),writable:thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor,"writable")),get:get==thisInterpreter.UNDEFINED?void 0:get,set:set==thisInterpreter.UNDEFINED?void 0:set};return thisInterpreter.setProperty(obj,prop,value,nativeDescriptor),obj}thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Can't define property "+prop+", object is not extensible")}else thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Property description must be an object.")},this.setProperty(this.OBJECT,"defineProperty",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("Object.defineProperty(Object, 'defineProperties', {configurable: true, value:","function(obj, props) {","var keys = Object.keys(props);","for (var i = 0; i < keys.length; i++) {","Object.defineProperty(obj, keys[i], props[keys[i]]);","}","return obj;","}","});",""),wrapper=function(obj,prop){if(!((prop=(prop||thisInterpreter.UNDEFINED).toString())in obj.properties))return thisInterpreter.UNDEFINED;var configurable=!obj.notConfigurable[prop],enumerable=!obj.notEnumerable[prop],writable=!obj.notWritable[prop],getter=obj.getter[prop],setter=obj.setter[prop],descriptor=thisInterpreter.createObject(thisInterpreter.OBJECT);return thisInterpreter.setProperty(descriptor,"configurable",thisInterpreter.createPrimitive(configurable)),thisInterpreter.setProperty(descriptor,"enumerable",thisInterpreter.createPrimitive(enumerable)),getter||setter?(thisInterpreter.setProperty(descriptor,"getter",getter),thisInterpreter.setProperty(descriptor,"setter",setter)):(thisInterpreter.setProperty(descriptor,"writable",thisInterpreter.createPrimitive(writable)),thisInterpreter.setProperty(descriptor,"value",thisInterpreter.getProperty(obj,prop))),descriptor},this.setProperty(this.OBJECT,"getOwnPropertyDescriptor",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){return obj!=thisInterpreter.UNDEFINED&&obj!=thisInterpreter.NULL||thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Cannot convert undefined or null to object"),obj.proto||thisInterpreter.NULL},this.setProperty(this.OBJECT,"getPrototypeOf",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){return thisInterpreter.createPrimitive(!obj.preventExtensions)},this.setProperty(this.OBJECT,"isExtensible",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(obj){return obj.isPrimitive||(obj.preventExtensions=!0),obj},this.setProperty(this.OBJECT,"preventExtensions",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(){return thisInterpreter.createPrimitive(this.toString())},this.setNativeFunctionPrototype(this.OBJECT,"toString",wrapper),wrapper=function(){return thisInterpreter.createPrimitive(this.toString())},this.setNativeFunctionPrototype(this.OBJECT,"toLocaleString",wrapper),wrapper=function(){return thisInterpreter.createPrimitive(this.valueOf())},this.setNativeFunctionPrototype(this.OBJECT,"valueOf",wrapper),wrapper=function(prop){if(this!=thisInterpreter.UNDEFINED&&this!=thisInterpreter.NULL)return(prop=(prop||thisInterpreter.UNDEFINED).toString())in this.properties?thisInterpreter.TRUE:thisInterpreter.FALSE;thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,"Cannot convert undefined or null to object")},this.setNativeFunctionPrototype(this.OBJECT,"hasOwnProperty",wrapper),wrapper=function(prop){var enumerable=(prop=(prop||thisInterpreter.UNDEFINED).toString())in this.properties&&!this.notEnumerable[prop];return thisInterpreter.createPrimitive(enumerable)},this.setNativeFunctionPrototype(this.OBJECT,"propertyIsEnumerable",wrapper),wrapper=function(obj){for(;;){if(!obj.proto||obj.proto==obj)return thisInterpreter.FALSE;if((obj=obj.proto)==this)return thisInterpreter.TRUE}},this.setNativeFunctionPrototype(this.OBJECT,"isPrototypeOf",wrapper)},Interpreter.prototype.initArray=function(scope){var wrapper,thisInterpreter=this,getInt=function(obj,def){var n=obj?Math.floor(obj.toNumber()):def;return isNaN(n)&&(n=def),n},strictComp=function(a,b){return a.isPrimitive&&b.isPrimitive?a.data===b.data:a===b};wrapper=function(var_args){if(thisInterpreter.calledWithNew())var newArray=this;else newArray=thisInterpreter.createObject(thisInterpreter.ARRAY);var first=arguments[0];if(1==arguments.length&&"number"==first.type)isNaN(thisInterpreter.arrayIndex(first))&&thisInterpreter.throwException(thisInterpreter.RANGE_ERROR,"Invalid array length"),newArray.length=first.data;else{for(var i=0;i<arguments.length;i++)newArray.properties[i]=arguments[i];newArray.length=i}return newArray},this.ARRAY=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Array",this.ARRAY),wrapper=function(obj){return thisInterpreter.createPrimitive(thisInterpreter.isa(obj,thisInterpreter.ARRAY))},this.setProperty(this.ARRAY,"isArray",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(){if(this.length){var value=this.properties[this.length-1];delete this.properties[this.length-1],this.length--}else value=thisInterpreter.UNDEFINED;return value},this.setNativeFunctionPrototype(this.ARRAY,"pop",wrapper),wrapper=function(var_args){for(var i=0;i<arguments.length;i++)this.properties[this.length]=arguments[i],this.length++;return thisInterpreter.createPrimitive(this.length)},this.setNativeFunctionPrototype(this.ARRAY,"push",wrapper),wrapper=function(){if(this.length){for(var value=this.properties[0],i=1;i<this.length;i++)this.properties[i-1]=this.properties[i];this.length--,delete this.properties[this.length]}else value=thisInterpreter.UNDEFINED;return value},this.setNativeFunctionPrototype(this.ARRAY,"shift",wrapper),wrapper=function(var_args){for(var i=this.length-1;i>=0;i--)this.properties[i+arguments.length]=this.properties[i];this.length+=arguments.length;for(i=0;i<arguments.length;i++)this.properties[i]=arguments[i];return thisInterpreter.createPrimitive(this.length)},this.setNativeFunctionPrototype(this.ARRAY,"unshift",wrapper),wrapper=function(){for(var i=0;i<this.length/2;i++){var tmp=this.properties[this.length-i-1];this.properties[this.length-i-1]=this.properties[i],this.properties[i]=tmp}return this},this.setNativeFunctionPrototype(this.ARRAY,"reverse",wrapper),wrapper=function(index,howmany,var_args){index=(index=getInt(index,0))<0?Math.max(this.length+index,0):Math.min(index,this.length),howmany=getInt(howmany,1/0),howmany=Math.min(howmany,this.length-index);for(var removed=thisInterpreter.createObject(thisInterpreter.ARRAY),i=index;i<index+howmany;i++)removed.properties[removed.length++]=this.properties[i],this.properties[i]=this.properties[i+howmany];for(i=index+howmany;i<this.length-howmany;i++)this.properties[i]=this.properties[i+howmany];for(i=this.length-howmany;i<this.length;i++)delete this.properties[i];this.length-=howmany;for(i=this.length-1;i>=index;i--)this.properties[i+arguments.length-2]=this.properties[i];this.length+=arguments.length-2;for(i=2;i<arguments.length;i++)this.properties[index+i-2]=arguments[i];return removed},this.setNativeFunctionPrototype(this.ARRAY,"splice",wrapper),wrapper=function(opt_begin,opt_end){var list=thisInterpreter.createObject(thisInterpreter.ARRAY),begin=getInt(opt_begin,0);begin<0&&(begin=this.length+begin),begin=Math.max(0,Math.min(begin,this.length));var end=getInt(opt_end,this.length);end<0&&(end=this.length+end),end=Math.max(0,Math.min(end,this.length));for(var length=0,i=begin;i<end;i++){var element=thisInterpreter.getProperty(this,i);thisInterpreter.setProperty(list,length++,element)}return list},this.setNativeFunctionPrototype(this.ARRAY,"slice",wrapper),wrapper=function(opt_separator){var cycles=Interpreter.toStringCycles_;cycles.push(this);try{if(opt_separator&&void 0!==opt_separator.data)sep=opt_separator.toString();else var sep=void 0;for(var text=[],i=0;i<this.length;i++)text[i]=this.properties[i].toString()}finally{cycles.pop()}return thisInterpreter.createPrimitive(text.join(sep))},this.setNativeFunctionPrototype(this.ARRAY,"join",wrapper),wrapper=function(var_args){for(var list=thisInterpreter.createObject(thisInterpreter.ARRAY),length=0,i=0;i<this.length;i++){var element=thisInterpreter.getProperty(this,i);thisInterpreter.setProperty(list,length++,element)}for(i=0;i<arguments.length;i++){var value=arguments[i];if(thisInterpreter.isa(value,thisInterpreter.ARRAY))for(var j=0;j<value.length;j++){element=thisInterpreter.getProperty(value,j);thisInterpreter.setProperty(list,length++,element)}else thisInterpreter.setProperty(list,length++,value)}return list},this.setNativeFunctionPrototype(this.ARRAY,"concat",wrapper),wrapper=function(searchElement,opt_fromIndex){searchElement=searchElement||thisInterpreter.UNDEFINED;var fromIndex=getInt(opt_fromIndex,0);fromIndex<0&&(fromIndex=this.length+fromIndex);for(var i=fromIndex=Math.max(0,fromIndex);i<this.length;i++){var element=thisInterpreter.getProperty(this,i);if(strictComp(element,searchElement))return thisInterpreter.createPrimitive(i)}return thisInterpreter.createPrimitive(-1)},this.setNativeFunctionPrototype(this.ARRAY,"indexOf",wrapper),wrapper=function(searchElement,opt_fromIndex){searchElement=searchElement||thisInterpreter.UNDEFINED;var fromIndex=getInt(opt_fromIndex,this.length);fromIndex<0&&(fromIndex=this.length+fromIndex);for(var i=fromIndex=Math.min(fromIndex,this.length-1);i>=0;i--){var element=thisInterpreter.getProperty(this,i);if(strictComp(element,searchElement))return thisInterpreter.createPrimitive(i)}return thisInterpreter.createPrimitive(-1)},this.setNativeFunctionPrototype(this.ARRAY,"lastIndexOf",wrapper),this.polyfills_.push("Object.defineProperty(Array.prototype, 'every', {configurable: true, value:","function(callbackfn, thisArg) {","if (this == null || typeof callbackfn !== 'function') throw new TypeError;","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O && !callbackfn.call(T, O[k], k, O)) return false;","k++;","}","return true;","}","});","Object.defineProperty(Array.prototype, 'filter', {configurable: true, value:","function(fun/*, thisArg*/) {","if (this === void 0 || this === null || typeof fun !== 'function') throw new TypeError;","var t = Object(this);","var len = t.length >>> 0;","var res = [];","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t) {","var val = t[i];","if (fun.call(thisArg, val, i, t)) res.push(val);","}","}","return res;","}","});","Object.defineProperty(Array.prototype, 'forEach', {configurable: true, value:","function(callback, thisArg) {","if (this == null || typeof callback !== 'function') throw new TypeError;","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O) callback.call(T, O[k], k, O);","k++;","}","}","});","Object.defineProperty(Array.prototype, 'map', {configurable: true, value:","function(callback, thisArg) {","if (this == null || typeof callback !== 'function') new TypeError;","var T, A, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","A = new Array(len);","k = 0;","while (k < len) {","if (k in O) A[k] = callback.call(T, O[k], k, O);","k++;","}","return A;","}","});","Object.defineProperty(Array.prototype, 'reduce', {configurable: true, value:","function(callback /*, initialValue*/) {","if (this == null || typeof callback !== 'function') throw new TypeError;","var t = Object(this), len = t.length >>> 0, k = 0, value;","if (arguments.length == 2) {","value = arguments[1];","} else {","while (k < len && !(k in t)) k++;","if (k >= len) {","throw new TypeError('Reduce of empty array with no initial value');","}","value = t[k++];","}","for (; k < len; k++) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'reduceRight', {configurable: true, value:","function(callback /*, initialValue*/) {","if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw new TypeError;","var t = Object(this), len = t.length >>> 0, k = len - 1, value;","if (arguments.length >= 2) {","value = arguments[1];","} else {","while (k >= 0 && !(k in t)) k--;","if (k < 0) {","throw new TypeError('Reduce of empty array with no initial value');","}","value = t[k--];","}","for (; k >= 0; k--) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'some', {configurable: true, value:","function(fun/*, thisArg*/) {","if (this == null || typeof fun !== 'function') throw new TypeError;","var t = Object(this);","var len = t.length >>> 0;","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t && fun.call(thisArg, t[i], i, t)) {","return true;","}","}","return false;","}","});","Object.defineProperty(Array.prototype, 'sort', {configurable: true, value:","function(opt_comp) {","for (var i = 0; i < this.length; i++) {","var changes = 0;","for (var j = 0; j < this.length - i - 1; j++) {","if (opt_comp ?opt_comp(this[j], this[j + 1]) > 0 : this[j] > this[j + 1]) {","var swap = this[j];","this[j] = this[j + 1];","this[j + 1] = swap;","changes++;","}","}","if (!changes) break;","}","return this;","}","});","Object.defineProperty(Array.prototype, 'toLocaleString', {configurable: true, value:","function() {","var out = [];","for (var i = 0; i < this.length; i++) {","out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();","}","return out.join(',');","}","});","")},Interpreter.prototype.initNumber=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){return value=value?value.toNumber():0,thisInterpreter.calledWithNew()?(this.data=value,this):thisInterpreter.createPrimitive(value)},this.NUMBER=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Number",this.NUMBER);for(var numConsts=["MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY"],i=0;i<numConsts.length;i++)this.setProperty(this.NUMBER,numConsts[i],this.createPrimitive(Number[numConsts[i]]));wrapper=function(str){return str=str||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(parseFloat(str.toString()))},this.setProperty(this.NUMBER,"parseFloat",this.createNativeFunction(wrapper,!1)),wrapper=function(str,radix){return str=str||thisInterpreter.UNDEFINED,radix=radix||thisInterpreter.UNDEFINED,thisInterpreter.createPrimitive(parseInt(str.toString(),radix.toNumber()))},this.setProperty(this.NUMBER,"parseInt",this.createNativeFunction(wrapper,!1)),wrapper=function(fractionDigits){fractionDigits=fractionDigits?fractionDigits.toNumber():void 0;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toExponential(fractionDigits))},this.setNativeFunctionPrototype(this.NUMBER,"toExponential",wrapper),wrapper=function(digits){digits=digits?digits.toNumber():void 0;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toFixed(digits))},this.setNativeFunctionPrototype(this.NUMBER,"toFixed",wrapper),wrapper=function(precision){precision=precision?precision.toNumber():void 0;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toPrecision(precision))},this.setNativeFunctionPrototype(this.NUMBER,"toPrecision",wrapper),wrapper=function(radix){radix=radix?radix.toNumber():10;var n=this.toNumber();return thisInterpreter.createPrimitive(n.toString(radix))},this.setNativeFunctionPrototype(this.NUMBER,"toString",wrapper),wrapper=function(locales,options){return locales=locales?thisInterpreter.pseudoToNative(locales):void 0,options=options?thisInterpreter.pseudoToNative(options):void 0,thisInterpreter.createPrimitive(this.toNumber().toLocaleString(locales,options))},this.setNativeFunctionPrototype(this.NUMBER,"toLocaleString",wrapper)},Interpreter.prototype.initString=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){return value=value?value.toString():"",thisInterpreter.calledWithNew()?(this.data=value,this):thisInterpreter.createPrimitive(value)},this.STRING=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"String",this.STRING),wrapper=function(var_args){for(var i=0;i<arguments.length;i++)arguments[i]=arguments[i].toNumber();return thisInterpreter.createPrimitive(String.fromCharCode.apply(String,arguments))},this.setProperty(this.STRING,"fromCharCode",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR);for(var functions=["toLowerCase","toUpperCase","toLocaleLowerCase","toLocaleUpperCase"],i=0;i<functions.length;i++)wrapper=function(nativeFunc){return function(){return thisInterpreter.createPrimitive(nativeFunc.apply(this))}}(String.prototype[functions[i]]),this.setNativeFunctionPrototype(this.STRING,functions[i],wrapper);wrapper=function(){var str=this.toString();return thisInterpreter.createPrimitive(str.replace(/^\s+|\s+$/g,""))},this.setNativeFunctionPrototype(this.STRING,"trim",wrapper),wrapper=function(){var str=this.toString();return thisInterpreter.createPrimitive(str.replace(/^\s+/g,""))},this.setNativeFunctionPrototype(this.STRING,"trimLeft",wrapper),wrapper=function(){var str=this.toString();return thisInterpreter.createPrimitive(str.replace(/\s+$/g,""))},this.setNativeFunctionPrototype(this.STRING,"trimRight",wrapper),functions=["charAt","charCodeAt","substring","slice","substr"];for(i=0;i<functions.length;i++)wrapper=function(nativeFunc){return function(){for(var j=0;j<arguments.length;j++)arguments[j]=arguments[j].toNumber();return thisInterpreter.createPrimitive(nativeFunc.apply(this,arguments))}}(String.prototype[functions[i]]),this.setNativeFunctionPrototype(this.STRING,functions[i],wrapper);wrapper=function(searchValue,fromIndex){var str=this.toString();return searchValue=(searchValue||thisInterpreter.UNDEFINED).toString(),fromIndex=fromIndex?fromIndex.toNumber():void 0,thisInterpreter.createPrimitive(str.indexOf(searchValue,fromIndex))},this.setNativeFunctionPrototype(this.STRING,"indexOf",wrapper),wrapper=function(searchValue,fromIndex){var str=this.toString();return searchValue=(searchValue||thisInterpreter.UNDEFINED).toString(),fromIndex=fromIndex?fromIndex.toNumber():void 0,thisInterpreter.createPrimitive(str.lastIndexOf(searchValue,fromIndex))},this.setNativeFunctionPrototype(this.STRING,"lastIndexOf",wrapper),wrapper=function(compareString,locales,options){return compareString=(compareString||thisInterpreter.UNDEFINED).toString(),locales=locales?thisInterpreter.pseudoToNative(locales):void 0,options=options?thisInterpreter.pseudoToNative(options):void 0,thisInterpreter.createPrimitive(this.toString().localeCompare(compareString,locales,options))},this.setNativeFunctionPrototype(this.STRING,"localeCompare",wrapper),wrapper=function(separator,limit){var str=this.toString();separator=separator?thisInterpreter.isa(separator,thisInterpreter.REGEXP)?separator.data:separator.toString():void 0,limit=limit?limit.toNumber():void 0;for(var jsList=str.split(separator,limit),pseudoList=thisInterpreter.createObject(thisInterpreter.ARRAY),i=0;i<jsList.length;i++)thisInterpreter.setProperty(pseudoList,i,thisInterpreter.createPrimitive(jsList[i]));return pseudoList},this.setNativeFunctionPrototype(this.STRING,"split",wrapper),wrapper=function(var_args){for(var str=this.toString(),i=0;i<arguments.length;i++)str+=arguments[i].toString();return thisInterpreter.createPrimitive(str)},this.setNativeFunctionPrototype(this.STRING,"concat",wrapper),wrapper=function(regexp){var str=this.toString();regexp=regexp?regexp.data:void 0;var match=str.match(regexp);if(null===match)return thisInterpreter.NULL;for(var pseudoList=thisInterpreter.createObject(thisInterpreter.ARRAY),i=0;i<match.length;i++)thisInterpreter.setProperty(pseudoList,i,thisInterpreter.createPrimitive(match[i]));return pseudoList},this.setNativeFunctionPrototype(this.STRING,"match",wrapper),wrapper=function(regexp){var str=this.toString();return regexp=regexp?regexp.data:void 0,thisInterpreter.createPrimitive(str.search(regexp))},this.setNativeFunctionPrototype(this.STRING,"search",wrapper),wrapper=function(substr,newSubStr){var str=this.toString();return substr=(substr||thisInterpreter.UNDEFINED).valueOf(),newSubStr=(newSubStr||thisInterpreter.UNDEFINED).toString(),thisInterpreter.createPrimitive(str.replace(substr,newSubStr))},this.setNativeFunctionPrototype(this.STRING,"replace",wrapper)},Interpreter.prototype.initBoolean=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value){return value=!!value&&value.toBoolean(),thisInterpreter.calledWithNew()?(this.data=value,this):thisInterpreter.createPrimitive(value)},this.BOOLEAN=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Boolean",this.BOOLEAN)},Interpreter.prototype.initDate=function(scope){var wrapper,thisInterpreter=this;wrapper=function(value,var_args){if(!thisInterpreter.calledWithNew())return thisInterpreter.createPrimitive(Date());var newDate=this;if(arguments.length)if(1!=arguments.length||"string"!=value.type&&!thisInterpreter.isa(value,thisInterpreter.STRING)){for(var args=[null],i=0;i<arguments.length;i++)args[i+1]=arguments[i]?arguments[i].toNumber():void 0;newDate.data=new(Function.prototype.bind.apply(Date,args))}else newDate.data=new Date(value.toString());else newDate.data=new Date;return newDate},this.DATE=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"Date",this.DATE),wrapper=function(){return thisInterpreter.createPrimitive((new Date).getTime())},this.setProperty(this.DATE,"now",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(dateString){return dateString=dateString?dateString.toString():void 0,thisInterpreter.createPrimitive(Date.parse(dateString))},this.setProperty(this.DATE,"parse",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR),wrapper=function(var_args){for(var args=[],i=0;i<arguments.length;i++)args[i]=arguments[i]?arguments[i].toNumber():void 0;return thisInterpreter.createPrimitive(Date.UTC.apply(Date,args))},this.setProperty(this.DATE,"UTC",this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR);for(var functions=["getDate","getDay","getFullYear","getHours","getMilliseconds","getMinutes","getMonth","getSeconds","getTime","getTimezoneOffset","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","getYear","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","setYear","toDateString","toISOString","toJSON","toGMTString","toLocaleDateString","toLocaleString","toLocaleTimeString","toTimeString","toUTCString"],i=0;i<functions.length;i++)wrapper=function(nativeFunc){return function(var_args){for(var args=[],i=0;i<arguments.length;i++)args[i]=thisInterpreter.pseudoToNative(arguments[i]);return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data,args))}}(functions[i]),this.setNativeFunctionPrototype(this.DATE,functions[i],wrapper)},Interpreter.prototype.initMath=function(scope){var thisInterpreter=this,myMath=this.createObject(this.OBJECT);this.setProperty(scope,"Math",myMath);for(var mathConsts=["E","LN2","LN10","LOG2E","LOG10E","PI","SQRT1_2","SQRT2"],i=0;i<mathConsts.length;i++)this.setProperty(myMath,mathConsts[i],this.createPrimitive(Math[mathConsts[i]]),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);var numFunctions=["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan"];for(i=0;i<numFunctions.length;i++){var wrapper=function(nativeFunc){return function(){for(var j=0;j<arguments.length;j++)arguments[j]=arguments[j].toNumber();return thisInterpreter.createPrimitive(nativeFunc.apply(Math,arguments))}}(Math[numFunctions[i]]);this.setProperty(myMath,numFunctions[i],this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR)}},Interpreter.prototype.initRegExp=function(scope){var wrapper,thisInterpreter=this;wrapper=function(pattern,flags){if(thisInterpreter.calledWithNew())var rgx=this;else rgx=thisInterpreter.createObject(thisInterpreter.REGEXP);return pattern=pattern?pattern.toString():"",flags=flags?flags.toString():"",thisInterpreter.populateRegExp_(rgx,new RegExp(pattern,flags))},this.REGEXP=this.createNativeFunction(wrapper,!0),this.setProperty(scope,"RegExp",this.REGEXP),this.setProperty(this.REGEXP.properties.prototype,"global",this.UNDEFINED,Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"ignoreCase",this.UNDEFINED,Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"multiline",this.UNDEFINED,Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"source",this.createPrimitive("(?:)"),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),wrapper=function(str){return str=str.toString(),thisInterpreter.createPrimitive(this.data.test(str))},this.setNativeFunctionPrototype(this.REGEXP,"test",wrapper),wrapper=function(str){str=str.toString(),this.data.lastIndex=thisInterpreter.getProperty(this,"lastIndex").toNumber();var match=this.data.exec(str);if(thisInterpreter.setProperty(this,"lastIndex",thisInterpreter.createPrimitive(this.data.lastIndex)),match){for(var result=thisInterpreter.createObject(thisInterpreter.ARRAY),i=0;i<match.length;i++)thisInterpreter.setProperty(result,i,thisInterpreter.createPrimitive(match[i]));return thisInterpreter.setProperty(result,"index",thisInterpreter.createPrimitive(match.index)),thisInterpreter.setProperty(result,"input",thisInterpreter.createPrimitive(match.input)),result}return thisInterpreter.NULL},this.setNativeFunctionPrototype(this.REGEXP,"exec",wrapper)},Interpreter.prototype.initJSON=function(scope){var thisInterpreter=this,myJSON=thisInterpreter.createObject(this.OBJECT);this.setProperty(scope,"JSON",myJSON);var wrapper=function(text){try{var nativeObj=JSON.parse(text.toString())}catch(e){return void thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR,e.message)}return thisInterpreter.nativeToPseudo(nativeObj)};this.setProperty(myJSON,"parse",this.createNativeFunction(wrapper,!1)),wrapper=function(value){var nativeObj=thisInterpreter.pseudoToNative(value);try{var str=JSON.stringify(nativeObj)}catch(e){return void thisInterpreter.throwException(thisInterpreter.TYPE_ERROR,e.message)}return thisInterpreter.createPrimitive(str)},this.setProperty(myJSON,"stringify",this.createNativeFunction(wrapper,!1))},Interpreter.prototype.initError=function(scope){var thisInterpreter=this;this.ERROR=this.createNativeFunction((function(opt_message){if(thisInterpreter.calledWithNew())var newError=this;else newError=thisInterpreter.createObject(thisInterpreter.ERROR);return opt_message&&thisInterpreter.setProperty(newError,"message",thisInterpreter.createPrimitive(String(opt_message)),Interpreter.NONENUMERABLE_DESCRIPTOR),newError}),!0),this.setProperty(scope,"Error",this.ERROR),this.setProperty(this.ERROR.properties.prototype,"message",this.STRING_EMPTY,Interpreter.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.ERROR.properties.prototype,"name",this.createPrimitive("Error"),Interpreter.NONENUMERABLE_DESCRIPTOR);var createErrorSubclass=function(name){var constructor=thisInterpreter.createNativeFunction((function(opt_message){if(thisInterpreter.calledWithNew())var newError=this;else newError=thisInterpreter.createObject(constructor);return opt_message&&thisInterpreter.setProperty(newError,"message",thisInterpreter.createPrimitive(String(opt_message)),Interpreter.NONENUMERABLE_DESCRIPTOR),newError}),!0);return thisInterpreter.setProperty(constructor,"prototype",thisInterpreter.createObject(thisInterpreter.ERROR)),thisInterpreter.setProperty(constructor.properties.prototype,"name",thisInterpreter.createPrimitive(name),Interpreter.NONENUMERABLE_DESCRIPTOR),thisInterpreter.setProperty(scope,name,constructor),constructor};this.EVAL_ERROR=createErrorSubclass("EvalError"),this.RANGE_ERROR=createErrorSubclass("RangeError"),this.REFERENCE_ERROR=createErrorSubclass("ReferenceError"),this.SYNTAX_ERROR=createErrorSubclass("SyntaxError"),this.TYPE_ERROR=createErrorSubclass("TypeError"),this.URI_ERROR=createErrorSubclass("URIError")},Interpreter.prototype.isa=function(child,constructor){if(!child||!constructor)return!1;var proto=constructor.properties.prototype;do{if(child==proto)return!0}while(child=child.proto);return!1},Interpreter.prototype.comp=function(a,b){if(a.isPrimitive&&"number"==typeof a.data&&isNaN(a.data)||b.isPrimitive&&"number"==typeof b.data&&isNaN(b.data))return NaN;if(a===b)return 0;var aValue=a.isPrimitive?a.data:a.toString(),bValue=b.isPrimitive?b.data:b.toString();return aValue<bValue?-1:aValue>bValue?1:(a.isPrimitive||b.isPrimitive)&&aValue==bValue?0:NaN},Interpreter.prototype.arrayIndex=function(n){return n=Number(n),!isFinite(n)||n!=Math.floor(n)||n<0||n>=Math.pow(2,32)?NaN:n},Interpreter.Primitive=function(data,interpreter){var type=typeof data;this.data=data,this.type=type,"number"==type?this.proto=interpreter.NUMBER.properties.prototype:"string"==type?this.proto=interpreter.STRING.properties.prototype:"boolean"==type&&(this.proto=interpreter.BOOLEAN.properties.prototype)},Interpreter.Primitive.prototype.data=void 0,Interpreter.Primitive.prototype.type="undefined",Interpreter.Primitive.prototype.proto=null,Interpreter.Primitive.prototype.isPrimitive=!0,Interpreter.Primitive.prototype.toBoolean=function(){return Boolean(this.data)},Interpreter.Primitive.prototype.toNumber=function(){return Number(this.data)},Interpreter.Primitive.prototype.toString=function(){return String(this.data)},Interpreter.Primitive.prototype.valueOf=function(){return this.data},Interpreter.prototype.createPrimitive=function(data){return void 0===data?this.UNDEFINED:null===data?this.NULL:!0===data?this.TRUE:!1===data?this.FALSE:0===data?this.NUMBER_ZERO:1===data?this.NUMBER_ONE:""===data?this.STRING_EMPTY:data instanceof RegExp?this.populateRegExp_(this.createObject(this.REGEXP),data):new Interpreter.Primitive(data,this)},Interpreter.Object=function(proto){this.notConfigurable=Object.create(null),this.notEnumerable=Object.create(null),this.notWritable=Object.create(null),this.getter=Object.create(null),this.setter=Object.create(null),this.properties=Object.create(null),this.proto=proto},Interpreter.Object.prototype.type="object",Interpreter.Object.prototype.proto=null,Interpreter.Object.prototype.isPrimitive=!1,Interpreter.Object.prototype.data=void 0,Interpreter.Object.prototype.toBoolean=function(){return!0},Interpreter.Object.prototype.toNumber=function(){return Number(void 0===this.data?this.toString():this.data)},Interpreter.Object.prototype.toString=function(){if(this.length>=0){(cycles=Interpreter.toStringCycles_).push(this);try{for(var strs=[],i=0;i<this.length;i++){var value=this.properties[i];strs[i]=!value||value.isPrimitive&&(null===value.data||void 0===value.data)||-1!=cycles.indexOf(value)?"":value.toString()}}finally{cycles.pop()}return strs.join(",")}if(this.error){var cycles,name,message;if(-1!=(cycles=Interpreter.toStringCycles_).indexOf(this))return"[Error]";var obj=this;do{if("name"in obj.properties){name=obj.properties.name;break}}while(obj.proto!=obj&&(obj=obj.proto));obj=this;do{if("message"in obj.properties){message=obj.properties.message;break}}while(obj=obj.proto);cycles.push(this);try{name=name&&name.toString(),message=message&&message.toString()}finally{cycles.pop()}return message?name+": "+message:name+""}return void 0!==this.data?String(this.data):"["+this.type+"]"},Interpreter.Object.prototype.valueOf=function(){return void 0===this.data?this:this.data},Interpreter.prototype.createObject=function(constructor){return this.createObjectProto(constructor&&constructor.properties.prototype)},Interpreter.prototype.createObjectProto=function(proto){var obj=new Interpreter.Object(proto);return this.isa(obj,this.FUNCTION)&&(obj.type="function",this.setProperty(obj,"prototype",this.createObject(this.OBJECT||null))),this.isa(obj,this.ARRAY)&&(obj.length=0),this.isa(obj,this.ERROR)&&(obj.error=!0),obj},Interpreter.prototype.populateRegExp_=function(pseudoRegexp,nativeRegexp){return pseudoRegexp.data=nativeRegexp,this.setProperty(pseudoRegexp,"lastIndex",this.createPrimitive(nativeRegexp.lastIndex),Interpreter.NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"source",this.createPrimitive(nativeRegexp.source),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"global",this.createPrimitive(nativeRegexp.global),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"ignoreCase",this.createPrimitive(nativeRegexp.ignoreCase),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(pseudoRegexp,"multiline",this.createPrimitive(nativeRegexp.multiline),Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR),pseudoRegexp.toString=function(){return String(this.data)},pseudoRegexp.valueOf=function(){return this.data},pseudoRegexp},Interpreter.prototype.createFunction=function(node,scope){var func=this.createObject(this.FUNCTION);return func.parentScope=scope,func.node=node,this.setProperty(func,"length",this.createPrimitive(func.node.params.length),Interpreter.READONLY_DESCRIPTOR),func},Interpreter.prototype.createNativeFunction=function(nativeFunc,opt_constructor){var func=this.createObject(this.FUNCTION);return func.nativeFunc=nativeFunc,nativeFunc.id=this.functionCounter_++,this.setProperty(func,"length",this.createPrimitive(nativeFunc.length),Interpreter.READONLY_DESCRIPTOR),opt_constructor?this.setProperty(func.properties.prototype,"constructor",func,Interpreter.NONENUMERABLE_DESCRIPTOR):!1===opt_constructor&&(func.illegalConstructor=!0,this.setProperty(func,"prototype",this.UNDEFINED)),func},Interpreter.prototype.createAsyncFunction=function(asyncFunc){var func=this.createObject(this.FUNCTION);return func.asyncFunc=asyncFunc,asyncFunc.id=this.functionCounter_++,this.setProperty(func,"length",this.createPrimitive(asyncFunc.length),Interpreter.READONLY_DESCRIPTOR),func},Interpreter.prototype.nativeToPseudo=function(nativeObj){if("boolean"==typeof nativeObj||"number"==typeof nativeObj||"string"==typeof nativeObj||null==nativeObj||nativeObj instanceof RegExp)return this.createPrimitive(nativeObj);if(nativeObj instanceof Function){var interpreter=this;return this.createNativeFunction((function(){return interpreter.nativeToPseudo(nativeObj.apply(interpreter,Array.prototype.slice.call(arguments).map((function(i){return interpreter.pseudoToNative(i)}))))}),void 0)}var pseudoObj;if(nativeObj instanceof Array){pseudoObj=this.createObject(this.ARRAY);for(var i=0;i<nativeObj.length;i++)this.setProperty(pseudoObj,i,this.nativeToPseudo(nativeObj[i]))}else for(var key in pseudoObj=this.createObject(this.OBJECT),nativeObj)this.setProperty(pseudoObj,key,this.nativeToPseudo(nativeObj[key]));return pseudoObj},Interpreter.prototype.pseudoToNative=function(pseudoObj,opt_cycles){if(pseudoObj.isPrimitive||this.isa(pseudoObj,this.NUMBER)||this.isa(pseudoObj,this.STRING)||this.isa(pseudoObj,this.BOOLEAN))return pseudoObj.data;var nativeObj,cycles=opt_cycles||{pseudo:[],native:[]};if(-1!=(i=cycles.pseudo.indexOf(pseudoObj)))return cycles.native[i];if(cycles.pseudo.push(pseudoObj),this.isa(pseudoObj,this.ARRAY)){nativeObj=[],cycles.native.push(nativeObj);for(var i=0;i<pseudoObj.length;i++)nativeObj[i]=this.pseudoToNative(pseudoObj.properties[i],cycles)}else{var val;for(var key in nativeObj={},cycles.native.push(nativeObj),pseudoObj.properties)pseudoObj.notEnumerable[key]||(val=pseudoObj.properties[key],nativeObj[key]=this.pseudoToNative(val,cycles))}return cycles.pseudo.pop(),cycles.native.pop(),nativeObj},Interpreter.prototype.getFullyQualifiedName=function(node){for(var fullyQualifiedName="";node.object&&node.property;){var properties=node.property;if(node.computed)fullyQualifiedName="["+(properties.name?properties.name:properties.raw)+"]"+fullyQualifiedName;else fullyQualifiedName="."+properties.name+fullyQualifiedName;node=node.object}return fullyQualifiedName="ArrayExpression"==node.type?"Array"+fullyQualifiedName:node.name+fullyQualifiedName},Interpreter.prototype.getProperty=function(obj,name){if(name=name.toString(),obj==this.UNDEFINED||obj==this.NULL)return this.throwException(this.TYPE_ERROR,"Cannot read property '"+name+"' of "+obj),null;if("length"==name){if(this.isa(obj,this.STRING))return this.createPrimitive(obj.data.length);if(this.isa(obj,this.ARRAY))return this.createPrimitive(obj.length)}else if(name.charCodeAt(0)<64&&this.isa(obj,this.STRING)){var n=this.arrayIndex(name);if(!isNaN(n)&&n<obj.data.length)return this.createPrimitive(obj.data[n])}do{if(obj.properties&&name in obj.properties){var getter=obj.getter[name];return getter?(getter.isGetter=!0,getter):obj.properties[name]}}while(obj=obj.proto);return this.UNDEFINED},Interpreter.prototype.hasProperty=function(obj,name){if(name=name.toString(),obj.isPrimitive)throw TypeError("Primitive data type has no properties");if("length"==name&&(this.isa(obj,this.STRING)||this.isa(obj,this.ARRAY)))return!0;if(this.isa(obj,this.STRING)){var n=this.arrayIndex(name);if(!isNaN(n)&&n<obj.data.length)return!0}do{if(obj.properties&&name in obj.properties)return!0}while(obj=obj.proto);return!1},Interpreter.prototype.setProperty=function(obj,name,value,opt_descriptor){if(name=name.toString(),opt_descriptor&&obj.notConfigurable[name]&&this.throwException(this.TYPE_ERROR,"Cannot redefine property: "+name),"object"!=typeof value)throw Error("Failure to wrap a value: "+value);obj!=this.UNDEFINED&&obj!=this.NULL||this.throwException(this.TYPE_ERROR,"Cannot set property '"+name+"' of "+obj),opt_descriptor&&(opt_descriptor.get||opt_descriptor.set)&&(value||void 0!==opt_descriptor.writable)&&this.throwException(this.TYPE_ERROR,"Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");var strict=!this.stateStack||this.getScope().strict;if(obj.isPrimitive)strict&&this.throwException(this.TYPE_ERROR,"Can't create property '"+name+"' on '"+obj.data+"'");else{if(this.isa(obj,this.STRING)){var n=this.arrayIndex(name);if("length"==name||!isNaN(n)&&n<obj.data.length)return void(strict&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+name+"' of String '"+obj.data+"'"))}if(this.isa(obj,this.ARRAY)){var i;if("length"==name){var newLength=this.arrayIndex(value.toNumber());if(isNaN(newLength)&&this.throwException(this.RANGE_ERROR,"Invalid array length"),newLength<obj.length)for(i in obj.properties)i=this.arrayIndex(i),!isNaN(i)&&newLength<=i&&delete obj.properties[i];return void(obj.length=newLength)}isNaN(i=this.arrayIndex(name))||(obj.length=Math.max(obj.length,i+1))}if(obj.properties[name]||!obj.preventExtensions)if(opt_descriptor){obj.properties[name]=value,opt_descriptor.configurable||(obj.notConfigurable[name]=!0);var getter=opt_descriptor.get;getter?obj.getter[name]=getter:delete obj.getter[name];var setter=opt_descriptor.set;if(setter?obj.setter[name]=setter:delete obj.setter[name],opt_descriptor.enumerable||!1?delete obj.notEnumerable[name]:obj.notEnumerable[name]=!0,getter||setter)delete obj.notWritable[name],obj.properties[name]=this.UNDEFINED;else opt_descriptor.writable||!1?delete obj.notWritable[name]:obj.notWritable[name]=!0}else{var parent=obj;do{if(parent.setter&&parent.setter[name])return parent.setter[name]}while(parent=parent.proto);obj.getter&&obj.getter[name]?strict&&this.throwException(this.TYPE_ERROR,"Cannot set property '"+name+"' of object '"+obj+"' which only has a getter"):obj.notWritable[name]?strict&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+name+"' of object '"+obj+"'"):obj.properties[name]=value}else strict&&this.throwException(this.TYPE_ERROR,"Can't add property "+name+", object is not extensible")}},Interpreter.prototype.setNativeFunctionPrototype=function(obj,name,wrapper){this.setProperty(obj.properties.prototype,name,this.createNativeFunction(wrapper,!1),Interpreter.NONENUMERABLE_DESCRIPTOR)},Interpreter.prototype.deleteProperty=function(obj,name){return name=name.toString(),!obj.isPrimitive&&!obj.notWritable[name]&&(("length"!=name||!this.isa(obj,this.ARRAY))&&delete obj.properties[name])},Interpreter.prototype.getScope=function(){for(var i=this.stateStack.length-1;i>=0;i--)if(this.stateStack[i].scope)return this.stateStack[i].scope;throw Error("No scope found.")},Interpreter.prototype.createScope=function(node,parentScope){var scope=this.createObject(null);if(scope.parentScope=parentScope,parentScope||this.initGlobalScope(scope),this.populateScope_(node,scope),scope.strict=!1,parentScope&&parentScope.strict)scope.strict=!0;else{var firstNode=node.body&&node.body[0];firstNode&&firstNode.expression&&"Literal"==firstNode.expression.type&&"use strict"==firstNode.expression.value&&(scope.strict=!0)}return scope},Interpreter.prototype.createSpecialScope=function(parentScope,opt_scope){if(!parentScope)throw Error("parentScope required");var scope=opt_scope||this.createObject(null);return scope.parentScope=parentScope,scope.strict=parentScope.strict,scope},Interpreter.prototype.getValueFromScope=function(name){for(var scope=this.getScope(),nameStr=name.toString();scope&&scope!=this.global;){if(nameStr in scope.properties)return scope.properties[nameStr];scope=scope.parentScope}if(scope==this.global&&this.hasProperty(scope,nameStr))return this.getProperty(scope,nameStr);var prevNode=this.stateStack[this.stateStack.length-1].node;return"UnaryExpression"==prevNode.type&&"typeof"==prevNode.operator?this.UNDEFINED:(this.throwException(this.REFERENCE_ERROR,nameStr+" is not defined"),null)},Interpreter.prototype.setValueToScope=function(name,value){for(var scope=this.getScope(),nameStr=name.toString();scope&&scope!=this.global;){if(nameStr in scope.properties)return void(scope.properties[nameStr]=value);scope=scope.parentScope}if(scope==this.global&&(!scope.strict||this.hasProperty(scope,nameStr)))return this.setProperty(scope,nameStr,value);this.throwException(this.REFERENCE_ERROR,nameStr+" is not defined")},Interpreter.prototype.populateScope_=function(node,scope){if("VariableDeclaration"==node.type)for(var i=0;i<node.declarations.length;i++)this.setProperty(scope,node.declarations[i].id.name,this.UNDEFINED);else{if("FunctionDeclaration"==node.type)return void this.setProperty(scope,node.id.name,this.createFunction(node,scope));if("FunctionExpression"==node.type)return;if("ExpressionStatement"==node.type)return}var nodeClass=node.constructor;for(var name in node){var prop=node[name];if(prop&&"object"==typeof prop)if(prop instanceof Array)for(i=0;i<prop.length;i++)prop[i]&&prop[i].constructor==nodeClass&&this.populateScope_(prop[i],scope);else prop.constructor==nodeClass&&this.populateScope_(prop,scope)}},Interpreter.prototype.stripLocations_=function(node,start,end){for(var name in start?node.start=start:delete node.start,end?node.end=end:delete node.end,node)if(node.hasOwnProperty(name)){var prop=node[name];prop&&"object"==typeof prop&&this.stripLocations_(prop,start,end)}},Interpreter.prototype.calledWithNew=function(){return this.stateStack[this.stateStack.length-1].isConstructor},Interpreter.prototype.getValue=function(left){if(left instanceof Array){var obj=left[0],prop=left[1];return this.getProperty(obj,prop)}return this.getValueFromScope(left)},Interpreter.prototype.setValue=function(left,value){if(left instanceof Array){var obj=left[0],prop=left[1];return this.setProperty(obj,prop,value)}return this.setValueToScope(left,value)},Interpreter.prototype.throwException=function(errorClass,opt_message){if(void 0===opt_message)var error=errorClass;else{error=this.createObject(errorClass);this.setProperty(error,"message",this.createPrimitive(opt_message),Interpreter.NONENUMERABLE_DESCRIPTOR)}this.executeException(error)},Interpreter.prototype.executeException=function(error){do{this.stateStack.pop();var state=this.stateStack[this.stateStack.length-1];if("TryStatement"==state.node.type)return void(state.throwValue=error)}while(state&&"Program"!=state.node.type);var realError;if(this.isa(error,this.ERROR)){var errorTable={EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError},name=this.getProperty(error,"name").toString(),message=this.getProperty(error,"message").valueOf();realError=(errorTable[name]||Error)(message)}else realError=error.toString();throw realError},Interpreter.prototype.pushGetter_=function(func,left){var funcThis=left instanceof Array?left[0]:left;this.stateStack.push({node:{type:"CallExpression"},doneCallee_:!0,funcThis_:funcThis,func_:func,doneArgs_:!0,arguments_:[]})},Interpreter.prototype.pushSetter_=function(func,left,value){var funcThis=left instanceof Array?left[0]:this.global;this.stateStack.push({node:{type:"CallExpression"},doneCallee_:!0,funcThis_:funcThis,func_:func,doneArgs_:!0,arguments_:[value]})},Interpreter.prototype.stepArrayExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;state.array_?state.value&&this.setProperty(state.array_,n-1,state.value):state.array_=this.createObject(this.ARRAY),n<node.elements.length?(state.n_=n+1,node.elements[n]?stack.push({node:node.elements[n]}):state.value=void 0):(state.array_.length=state.n_||0,stack.pop(),stack[stack.length-1].value=state.array_)},Interpreter.prototype.stepAssignmentExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneLeft_)return state.doneLeft_=!0,void stack.push({node:node.left,components:!0});if(!state.doneRight_){if(state.leftSide_||(state.leftSide_=state.value),state.doneGetter_&&(state.leftValue_=state.value),!state.doneGetter_&&"="!=node.operator&&(state.leftValue_=this.getValue(state.leftSide_),state.leftValue_.isGetter)){state.leftValue_.isGetter=!1,state.doneGetter_=!0;var func=state.leftValue_;return void this.pushGetter_(func,state.leftSide_)}return state.doneRight_=!0,void stack.push({node:node.right})}if(state.doneSetter_)return stack.pop(),void(stack[stack.length-1].value=state.doneSetter_);var value,rightSide=state.value;if("="==node.operator)value=rightSide;else{var left,right,rightValue=rightSide,leftNumber=state.leftValue_.toNumber(),rightNumber=rightValue.toNumber();if("+="==node.operator)"string"==state.leftValue_.type||"string"==rightValue.type?(left=state.leftValue_.toString(),right=rightValue.toString()):(left=leftNumber,right=rightNumber),value=left+right;else if("-="==node.operator)value=leftNumber-rightNumber;else if("*="==node.operator)value=leftNumber*rightNumber;else if("/="==node.operator)value=leftNumber/rightNumber;else if("%="==node.operator)value=leftNumber%rightNumber;else if("<<="==node.operator)value=leftNumber<<rightNumber;else if(">>="==node.operator)value=leftNumber>>rightNumber;else if(">>>="==node.operator)value=leftNumber>>>rightNumber;else if("&="==node.operator)value=leftNumber&rightNumber;else if("^="==node.operator)value=leftNumber^rightNumber;else{if("|="!=node.operator)throw SyntaxError("Unknown assignment expression: "+node.operator);value=leftNumber|rightNumber}value=this.createPrimitive(value)}var setter=this.setValue(state.leftSide_,value);if(setter)return state.doneSetter_=value,void this.pushSetter_(setter,state.leftSide_,value);stack.pop(),stack[stack.length-1].value=value},Interpreter.prototype.stepBinaryExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneLeft_)return state.doneLeft_=!0,void stack.push({node:node.left});if(!state.doneRight_)return state.doneRight_=!0,state.leftValue_=state.value,void stack.push({node:node.right});stack.pop();var value,leftSide=state.leftValue_,rightSide=state.value,comp=this.comp(leftSide,rightSide);if("=="==node.operator||"!="==node.operator)value=leftSide.isPrimitive&&rightSide.isPrimitive?leftSide.data==rightSide.data:0===comp,"!="==node.operator&&(value=!value);else if("==="==node.operator||"!=="==node.operator)value=leftSide.isPrimitive&&rightSide.isPrimitive?leftSide.data===rightSide.data:leftSide===rightSide,"!=="==node.operator&&(value=!value);else if(">"==node.operator)value=1==comp;else if(">="==node.operator)value=1==comp||0===comp;else if("<"==node.operator)value=-1==comp;else if("<="==node.operator)value=-1==comp||0===comp;else if("+"==node.operator){value=(leftValue=leftSide.isPrimitive?leftSide.data:leftSide.toString())+(rightValue=rightSide.isPrimitive?rightSide.data:rightSide.toString())}else if("in"==node.operator)rightSide.isPrimitive?this.throwException(this.TYPE_ERROR,"Expecting an object evaluating 'in'"):value=this.hasProperty(rightSide,leftSide);else if("instanceof"==node.operator)this.isa(rightSide,this.FUNCTION)?value=leftSide.isPrimitive?this.FALSE:this.isa(leftSide,rightSide):this.throwException(this.TYPE_ERROR,"Expecting a function in instanceof check");else{var leftValue=leftSide.toNumber(),rightValue=rightSide.toNumber();if("-"==node.operator)value=leftValue-rightValue;else if("*"==node.operator)value=leftValue*rightValue;else if("/"==node.operator)value=leftValue/rightValue;else if("%"==node.operator)value=leftValue%rightValue;else if("&"==node.operator)value=leftValue&rightValue;else if("|"==node.operator)value=leftValue|rightValue;else if("^"==node.operator)value=leftValue^rightValue;else if("<<"==node.operator)value=leftValue<<rightValue;else if(">>"==node.operator)value=leftValue>>rightValue;else{if(">>>"!=node.operator)throw SyntaxError("Unknown binary operator: "+node.operator);value=leftValue>>>rightValue}}stack[stack.length-1].value=this.createPrimitive(value)},Interpreter.prototype.stepBlockStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.body[n]?(state.n_=n+1,stack.push({node:node.body[n]})):stack.pop()},Interpreter.prototype.stepBreakStatement=function(){var stack=this.stateStack,state=stack.pop(),label=null;for(state.node.label&&(label=state.node.label.name);state&&"CallExpression"!=state.node.type&&"NewExpression"!=state.node.type;){if(label){if(state.labels&&-1!=state.labels.indexOf(label))return}else if(state.isLoop||state.isSwitch)return;state=stack.pop()}throw SyntaxError("Illegal break statement")},Interpreter.prototype.stepCallExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneCallee_)return state.doneCallee_=!0,void stack.push({node:node.callee,components:!0});if(!state.func_){if("function"==state.value.type)state.func_=state.value;else{if(state.func_=this.getValue(state.value),state.func_.isGetter)return state.func_.isGetter=!1,this.pushGetter_(state.func_,state.value),void(state.func_=null);if(!state.func_)return;if("function"!=state.func_.type){var functionName=this.getFullyQualifiedName(node.callee);return void this.throwException(this.TYPE_ERROR,functionName+" is not a function")}}if("NewExpression"==state.node.type){if(state.func_.illegalConstructor)return void this.throwException(this.TYPE_ERROR,"function is not a constructor");state.funcThis_=this.createObject(state.func_),state.isConstructor=!0}else state.value.length?state.funcThis_=state.value[0]:state.funcThis_=this.getScope().strict?this.UNDEFINED:this.global;state.arguments_=[],state.n_=0}if(!state.doneArgs_){if(0!=state.n_&&state.arguments_.push(state.value),node.arguments[state.n_])return stack.push({node:node.arguments[state.n_]}),void state.n_++;state.doneArgs_=!0}if(state.doneExec_)stack.pop(),state.isConstructor&&"object"!==state.value.type?stack[stack.length-1].value=state.funcThis_:stack[stack.length-1].value=state.value;else{state.doneExec_=!0;var funcNode=state.func_.node;if(funcNode){for(var scope=this.createScope(funcNode.body,state.func_.parentScope),i=0;i<funcNode.params.length;i++){var paramName=this.createPrimitive(funcNode.params[i].name),paramValue=state.arguments_.length>i?state.arguments_[i]:this.UNDEFINED;this.setProperty(scope,paramName,paramValue)}var argsList=this.createObject(this.ARRAY);for(i=0;i<state.arguments_.length;i++)this.setProperty(argsList,this.createPrimitive(i),state.arguments_[i]);this.setProperty(scope,"arguments",argsList);var name=funcNode.id&&funcNode.id.name;name&&this.setProperty(scope,name,state.func_);var funcState={node:funcNode.body,scope,thisExpression:state.funcThis_};stack.push(funcState),state.value=this.UNDEFINED}else if(state.func_.nativeFunc)state.value=state.func_.nativeFunc.apply(state.funcThis_,state.arguments_);else{if(state.func_.asyncFunc){var thisInterpreter=this,argsWithCallback=state.arguments_.concat((function(value){state.value=value||thisInterpreter.UNDEFINED,thisInterpreter.paused_=!1}));return this.paused_=!0,void state.func_.asyncFunc.apply(state.funcThis_,argsWithCallback)}if(state.func_.eval){var code=state.arguments_[0];if(code)if(code.isPrimitive){var ast=acorn.parse(code.toString(),Interpreter.PARSE_OPTIONS);state={node:{type:"EvalProgram_",body:ast.body}},this.stripLocations_(state.node,node.start,node.end);scope=this.getScope();this.populateScope_(ast,scope),stack.push(state)}else state.value=code;else state.value=this.UNDEFINED}else this.throwException(this.TYPE_ERROR,"function is not a function")}}},Interpreter.prototype.stepCatchClause=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.done_)stack.pop();else{var scope;if(state.done_=!0,node.param){scope=this.createSpecialScope(this.getScope());var paramName=this.createPrimitive(node.param.name);this.setProperty(scope,paramName,state.throwValue)}stack.push({node:node.body,scope})}},Interpreter.prototype.stepConditionalExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],mode=state.mode_||0;if(0==mode)return state.mode_=1,void stack.push({node:state.node.test});if(1==mode){state.mode_=2;var value=state.value.toBoolean();if(value&&state.node.consequent)return void stack.push({node:state.node.consequent});if(!value&&state.node.alternate)return void stack.push({node:state.node.alternate});this.value=this.UNDEFINED}stack.pop(),"ConditionalExpression"==state.node.type&&(stack[stack.length-1].value=state.value)},Interpreter.prototype.stepContinueStatement=function(){var stack=this.stateStack,state=stack.pop(),label=null;for(state.node.label&&(label=state.node.label.name),state=stack[stack.length-1];state&&"CallExpression"!=state.node.type&&"NewExpression"!=state.node.type;){if(state.isLoop&&(!label||state.labels&&-1!=state.labels.indexOf(label)))return;stack.pop(),state=stack[stack.length-1]}throw SyntaxError("Illegal continue statement")},Interpreter.prototype.stepDebugger=function(){},Interpreter.prototype.stepDoWhileStatement=function(){var stack=this.stateStack,state=stack[stack.length-1];"DoWhileStatement"==state.node.type&&void 0===state.test_&&(state.value=this.TRUE,state.test_=!0),state.test_?state.value.toBoolean()?state.node.body&&(state.test_=!1,state.isLoop=!0,stack.push({node:state.node.body})):stack.pop():(state.test_=!0,stack.push({node:state.node.test}))},Interpreter.prototype.stepEmptyStatement=function(){this.stateStack.pop()},Interpreter.prototype.stepEvalProgram_=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.body[n]?(state.n_=n+1,stack.push({node:node.body[n]})):(stack.pop(),stack[stack.length-1].value=this.value)},Interpreter.prototype.stepExpressionStatement=function(){var stack=this.stateStack,state=stack[stack.length-1];state.done_?(stack.pop(),this.value=state.value):(state.done_=!0,stack.push({node:state.node.expression}))},Interpreter.prototype.stepForInStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneInit_&&(state.doneInit_=!0,node.left.declarations&&node.left.declarations[0].init)){if(this.getScope().strict)throw SyntaxError("for-in loop variable declaration may not have an initializer.");stack.push({node:node.left})}else{if(!state.doneObject_)return state.doneObject_=!0,state.variable_||(state.variable_=state.value),void stack.push({node:node.right});if(state.object_||(state.isLoop=!0,state.object_=state.value,state.visited_=[]),void 0===state.name_){done:do{if(state.object_.isPrimitive){for(var prop in state.object_.data)if(-1==state.visited_.indexOf(prop)){state.visited_.push(prop),state.name_=prop,state.visited_.push(prop);break done}}else for(var prop in state.object_.properties)if(-1==state.visited_.indexOf(prop)&&(state.visited_.push(prop),!state.object_.notEnumerable[prop])){state.name_=prop,state.visited_.push(prop);break done}state.object_=state.object_.proto}while(state.object_);if(!state.object_)return void stack.pop()}if(!state.doneVariable_){state.doneVariable_=!0;var left=node.left;if("VariableDeclaration"!=left.type)return state.variable_=null,void stack.push({node:left,components:!0});state.variable_=left.declarations[0].id.name}if(state.variable_||(state.variable_=state.value),!state.doneSetter_){state.doneSetter_=!0;var value=this.createPrimitive(state.name_),setter=this.setValue(state.variable_,value);if(setter)return void this.pushSetter_(setter,state.variable_,value)}node.body&&stack.push({node:node.body}),state.name_=void 0,state.variable_ instanceof Array&&(state.doneVariable_=!1),state.doneSetter_=!1}},Interpreter.prototype.stepForStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,mode=state.mode_||0;0==mode?(state.mode_=1,node.init&&stack.push({node:node.init})):1==mode?(state.mode_=2,node.test&&stack.push({node:node.test})):2==mode?(state.mode_=3,node.test&&state.value&&!state.value.toBoolean()?stack.pop():node.body&&(state.isLoop=!0,stack.push({node:node.body}))):3==mode&&(state.mode_=1,node.update&&stack.push({node:node.update}))},Interpreter.prototype.stepFunctionDeclaration=function(){this.stateStack.pop()},Interpreter.prototype.stepFunctionExpression=function(){var stack=this.stateStack,state=stack.pop();stack[stack.length-1].value=this.createFunction(state.node,this.getScope())},Interpreter.prototype.stepIdentifier=function(){var stack=this.stateStack,state=stack.pop(),nameStr=state.node.name,name=this.createPrimitive(nameStr),value=state.components?name:this.getValueFromScope(name);if(value&&value.isGetter){value.isGetter=!1;for(var scope=this.getScope();!this.hasProperty(scope,nameStr);)scope=scope.parentScope;var func=value;this.pushGetter_(func,this.global)}else stack[stack.length-1].value=value},Interpreter.prototype.stepIfStatement=Interpreter.prototype.stepConditionalExpression,Interpreter.prototype.stepLabeledStatement=function(){var stack=this.stateStack,state=stack.pop(),labels=state.labels||[];labels.push(state.node.label.name),stack.push({node:state.node.body,labels})},Interpreter.prototype.stepLiteral=function(){var stack=this.stateStack,state=stack.pop();stack[stack.length-1].value=this.createPrimitive(state.node.value)},Interpreter.prototype.stepLogicalExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if("&&"!=node.operator&&"||"!=node.operator)throw SyntaxError("Unknown logical operator: "+node.operator);state.doneLeft_?state.doneRight_||"&&"==node.operator&&!state.value.toBoolean()||"||"==node.operator&&state.value.toBoolean()?(stack.pop(),stack[stack.length-1].value=state.value):(state.doneRight_=!0,stack.push({node:node.right})):(state.doneLeft_=!0,stack.push({node:node.left}))},Interpreter.prototype.stepMemberExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.doneObject_)if(state.doneProperty_)if(stack.pop(),state.components)stack[stack.length-1].value=[state.object_,state.value];else{if(state.object_==this.NULL||state.object_==this.UNDEFINED){var name=this.getFullyQualifiedName(node.object);return void this.throwException(this.TYPE_ERROR,name+" is "+state.object_.toString())}var value=this.getProperty(state.object_,state.value);if(!value)return stack.push({}),void this.throwException(this.TYPE_ERROR,"Cannot read property '"+state.value+"' of "+state.object_.toString());if(value.isGetter){value.isGetter=!1;var func=value;this.pushGetter_(func,state.object_)}else stack[stack.length-1].value=value}else state.doneProperty_=!0,state.object_=state.value,stack.push({node:node.property,components:!node.computed});else state.doneObject_=!0,stack.push({node:node.object})},Interpreter.prototype.stepNewExpression=Interpreter.prototype.stepCallExpression,Interpreter.prototype.stepObjectExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,valueToggle=state.valueToggle_,n=state.n_||0;if(state.object?valueToggle?state.key_=state.value:(state.properties[state.key_]||(state.properties[state.key_]={}),state.properties[state.key_][state.kind_]=state.value):(state.object=this.createObject(this.OBJECT),state.properties=Object.create(null)),node.properties[n])valueToggle?(state.n_=n+1,stack.push({node:node.properties[n].value})):(state.kind_=node.properties[n].kind,stack.push({node:node.properties[n].key,components:!0})),state.valueToggle_=!valueToggle;else{for(var key in state.properties){var kinds=state.properties[key];if("get"in kinds||"set"in kinds){var descriptor={configurable:!0,enumerable:!0,get:kinds.get,set:kinds.set};this.setProperty(state.object,key,null,descriptor)}else this.setProperty(state.object,key,kinds.init)}stack.pop(),stack[stack.length-1].value=state.object}},Interpreter.prototype.stepProgram=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.body[n]?(state.done=!1,state.n_=n+1,stack.push({node:node.body[n]})):state.done=!0},Interpreter.prototype.stepReturnStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(node.argument&&!state.done_)state.done_=!0,stack.push({node:node.argument});else{var value=state.value||this.UNDEFINED,i=stack.length-1;for(state=stack[i];"CallExpression"!=state.node.type&&"NewExpression"!=state.node.type;){if("TryStatement"!=state.node.type&&stack.splice(i,1),--i<0)throw SyntaxError("Illegal return statement");state=stack[i]}state.value=value}},Interpreter.prototype.stepSequenceExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0;node.expressions[n]?(state.n_=n+1,stack.push({node:node.expressions[n]})):(stack.pop(),stack[stack.length-1].value=state.value)},Interpreter.prototype.stepSwitchStatement=function(){var stack=this.stateStack,state=stack[stack.length-1];if(!state.test_)return state.test_=!0,void stack.push({node:state.node.discriminant});for(state.switchValue_||(state.switchValue_=state.value);;){var index=state.index_||0,switchCase=state.node.cases[index];if(state.matched_||!switchCase||switchCase.test)if(switchCase||state.matched_||!state.defaultCase_){if(!switchCase)return void stack.pop();if(!state.matched_&&!state.tested_&&switchCase.test)return state.tested_=!0,void stack.push({node:switchCase.test});if(state.matched_||0==this.comp(state.value,state.switchValue_)){state.matched_=!0;var n=state.n_||0;if(switchCase.consequent[n])return state.isSwitch=!0,stack.push({node:switchCase.consequent[n]}),void(state.n_=n+1)}state.tested_=!1,state.n_=0,state.index_=index+1}else state.matched_=!0,state.index_=state.defaultCase_;else state.defaultCase_=index,state.index_=index+1}},Interpreter.prototype.stepThisExpression=function(){var stack=this.stateStack;stack.pop();for(var i=stack.length-1;i>=0;i--)if(stack[i].thisExpression)return void(stack[stack.length-1].value=stack[i].thisExpression);throw Error("No this expression found.")},Interpreter.prototype.stepThrowStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;state.done_?this.throwException(state.value):(state.done_=!0,stack.push({node:node.argument}))},Interpreter.prototype.stepTryStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;state.doneBlock_?state.throwValue&&!state.doneHandler_&&node.handler?(state.doneHandler_=!0,stack.push({node:node.handler,throwValue:state.throwValue}),state.throwValue=null):!state.doneFinalizer_&&node.finalizer?(state.doneFinalizer_=!0,stack.push({node:node.finalizer})):state.throwValue?this.executeException(state.throwValue):stack.pop():(state.doneBlock_=!0,stack.push({node:node.block}))},Interpreter.prototype.stepUnaryExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.done_){stack.pop();var value=state.value;if("-"==node.operator)value=-value.toNumber();else if("+"==node.operator)value=value.toNumber();else if("!"==node.operator)value=!value.toBoolean();else if("~"==node.operator)value=~value.toNumber();else if("delete"==node.operator){if(value.length)var obj=value[0],name=value[1];else obj=this.getScope(),name=value;if(!(value=this.deleteProperty(obj,name))&&this.getScope().strict)return void this.throwException(this.TYPE_ERROR,"Cannot delete property '"+name+"' of '"+obj+"'")}else if("typeof"==node.operator)value=value.type;else{if("void"!=node.operator)throw SyntaxError("Unknown unary operator: "+node.operator);value=void 0}stack[stack.length-1].value=this.createPrimitive(value)}else{state.done_=!0;var nextState={node:node.argument,components:"delete"==node.operator};stack.push(nextState)}},Interpreter.prototype.stepUpdateExpression=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(!state.doneLeft_)return state.doneLeft_=!0,void stack.push({node:node.argument,components:!0});if(state.leftSide_||(state.leftSide_=state.value),state.doneGetter_&&(state.leftValue_=state.value),!state.doneGetter_){if(state.leftValue_=this.getValue(state.leftSide_),!state.leftValue_)return;if(state.leftValue_.isGetter){state.leftValue_.isGetter=!1,state.doneGetter_=!0;var func=state.leftValue_;return void this.pushGetter_(func,state.leftSide_)}}if(state.doneSetter_)return stack.pop(),void(stack[stack.length-1].value=state.doneSetter_);var changeValue,leftValue=state.leftValue_.toNumber();if("++"==node.operator)changeValue=this.createPrimitive(leftValue+1);else{if("--"!=node.operator)throw SyntaxError("Unknown update expression: "+node.operator);changeValue=this.createPrimitive(leftValue-1)}var returnValue=node.prefix?changeValue:this.createPrimitive(leftValue),setter=this.setValue(state.leftSide_,changeValue);if(setter)return state.doneSetter_=returnValue,void this.pushSetter_(setter,state.leftSide_,changeValue);stack.pop(),stack[stack.length-1].value=returnValue},Interpreter.prototype.stepVariableDeclaration=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node,n=state.n_||0,declarationNode=node.declarations[n];for(state.value&&declarationNode&&(this.setValue(this.createPrimitive(declarationNode.id.name),state.value),state.value=null,declarationNode=node.declarations[++n]);declarationNode;){if(declarationNode.init)return state.n_=n,void stack.push({node:declarationNode.init});declarationNode=node.declarations[++n]}stack.pop()},Interpreter.prototype.stepWithStatement=function(){var stack=this.stateStack,state=stack[stack.length-1],node=state.node;if(state.doneObject_)if(state.doneBody_)stack.pop();else{state.doneBody_=!0;var scope=this.createSpecialScope(this.getScope(),state.value);stack.push({node:node.body,scope})}else state.doneObject_=!0,stack.push({node:node.object})},Interpreter.prototype.stepWhileStatement=Interpreter.prototype.stepDoWhileStatement,this.Interpreter=Interpreter,Interpreter.prototype.step=Interpreter.prototype.step,Interpreter.prototype.run=Interpreter.prototype.run,Interpreter.prototype.appendCode=Interpreter.prototype.appendCode,Interpreter.prototype.createPrimitive=Interpreter.prototype.createPrimitive,Interpreter.prototype.createAsyncFunction=Interpreter.prototype.createAsyncFunction,Interpreter.prototype.createNativeFunction=Interpreter.prototype.createNativeFunction,Interpreter.prototype.getProperty=Interpreter.prototype.getProperty,Interpreter.prototype.setProperty=Interpreter.prototype.setProperty,Interpreter.prototype.nativeToPseudo=Interpreter.prototype.nativeToPseudo,Interpreter.prototype.pseudoToNative=Interpreter.prototype.pseudoToNative},"./node_modules/@microsoft/immersive-reader-sdk/lib/immersive-reader-sdk.js":module=>{window,module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiePolicy=void 0,function(e){e[e.Disable=0]="Disable",e[e.Enable=1]="Enable"}(t.CookiePolicy||(t.CookiePolicy={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiePolicy=t.launchAsync=t.close=t.renderButtons=void 0;var n=r(2);Object.defineProperty(t,"renderButtons",{enumerable:!0,get:function(){return n.renderButtons}});var o=r(3);Object.defineProperty(t,"close",{enumerable:!0,get:function(){return o.close}}),Object.defineProperty(t,"launchAsync",{enumerable:!0,get:function(){return o.launchAsync}});var i=r(0);Object.defineProperty(t,"CookiePolicy",{enumerable:!0,get:function(){return i.CookiePolicy}}),"undefined"!=typeof window&&window.addEventListener("load",(function(){var e,t;window.hasOwnProperty("Promise")||(e="https://contentstorage.onenote.office.net/onenoteltir/permanent-static-resources/promise-polyfill.min.js",(t=document.createElement("script")).src=e,document.head.appendChild(t)),n.renderButtons()}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderButtons=void 0;var n={af:"Indompelende leser",am:"በህያው ስሜት ፈጣሪ ዕይታ አንባቢ",ar:"القارئ الشامل",as:"ইমাৰচিভ ৰিডাৰ",az:"İmmersiv Oxuyucu",be:"Імерсіўны чытальнік",bg:"Концентриран четец",bn:"মনোগ্রাহী পাঠক","bn-bd":"ইমার্সিভ পাঠক",bs:"Koncentrirani čitalac",ca:"Lector immersiu",cs:"Asistivní čtečka","cy-gb":"Darllenydd Ymdrwythol",da:"Forenklet læser",de:"Plastischer Reader",el:"Προηγμένο πρόγραμμα ανάγνωσης",en:"Immersive Reader",es:"Lector inmersivo",et:"Süvaluger",eu:"Irakurgailu murgiltzailea",fa:"خواننده همه‌جانبه",fi:"Syventävä lukuohjelma",fil:"Immersive Reader",fr:"Lecteur immersif","ga-ie":"Léitheoir tumthach",gd:"An leughadair ùr-nòsach",gl:"Lector avanzado",gu:"ઇમર્સિવ રીડર",ha:"Mai karatu Mai barbazawa",he:"תצוגת קריאה מודרנית",hi:"इमर्सिव रीडर",hr:"Stopljeni čitač",hu:"Modern olvasó",hy:"Խորասուզված ընթերցիչ",id:"Pembaca Imersif",ig:"Ọgụụ Kenzipụtara",is:"Aðgengilegt lestrarumhverfi",it:"Strumento di lettura immersiva",ja:"イマーシブ リーダー",ka:"იმერსიული წამკითხველი",kk:"Иммерсивті оқу құралы",km:"កម្មវិធីអានពណ៌រំលេចនៅលើអេក្រង់",kn:"ಇಮ್ಮರ್ಸಿವ್ ಓದುಗ",ko:"몰입형 리더",kok:"तंद्री लागिल्लो वाचक","ku-arab":"خوێنەری پڕ",ky:"Курчаган Окугуч",lb:"Immersive Reader",lo:"ຕົວອ່ານອິມເມີສີບ",lt:"Įtraukianti skaitytuvė",lv:"Tīrskata lasītājs",mi:"Pūpānui Rumaki",mk:"Сеопфатен читач",ml:"ഇമ്മേഴ്‌സീവ് റീഡർ",mn:"Идэвхтэй уншигч",mr:"इमर्सिव्ह वाचक",ms:"Pembaca Imersif",mt:"Qarrej Immersiv",ne:"इमेर्सिभ रिडर",nl:"Insluitende lezer","nn-no":"Engasjerande lesar",no:"Engasjerende leser",nso:"Go Bala ka Mongwalo o Mokoto",or:"ଇମରସିଭ୍ ରିଡର୍",pa:"ਇਮਰਸਿਵ ਰੀਡਰ","pa-arab":"گھیرن آلا مطالعہ کار",pl:"Czytnik immersyjny",prs:"خواننده نمایش",pt:"Leitura Avançada",quc:"Nim ucholajil sik'inel uwach",quz:"Wankisqa Ñawiq",ro:"Immersive Reader",ru:"Иммерсивное средство чтения",rw:"Insakazasoma",sd:"امرسو ريڊر",si:"ගිලෙන සුළු කියවනය",sk:"Imerzná čítačka",sl:"Potopni bralnik",sq:"Lexuesi kredhës","sr-cyrl-ba":"Концентрисани читалац","sr-cyrl-rs":"Концентрисани читалац","sr-latn-rs":"Koncentrisani čitalac",sv:"Avancerad läsare",sw:"Kisomaji cha Kuzamisha",ta:"அற்புதமான ரீடர்",te:"మంత్రముగ్ధులను చేసే పఠన సాధనం","tg-cyrl-tj":"Хонандаи фарогир",th:"โปรแกรมช่วยอ่าน",ti:"ኣንባቢ ሕሉው ስምዒት ፈጣሪ",tk:"Giňişleýin okaýjy",tn:"Sebadi sa Imesife",tr:"Tam Ekran Okuyucu",tt:"Чолгап алучы уку чарасы","ug-cn":"چۆكمە ئوقۇغۇچ",uk:"Занурення в текст",ur:"امرسیو مطالعہ کار",uz:"Immersiv mutolaa vositasi",vi:"Trình đọc Chân thực",wo:"Jàngukaay bu Rafet",xh:"Isifundi Esikhulu",yo:"Ìwò Alámùtán",zh:"沉浸式阅读器","zh-hant":"沈浸式閱讀程式",zu:"Isifundi Sokuzizwisa"};function o(e){var t=document.createElement("img");t.src="https://contentstorage.onenote.office.net/onenoteltir/permanent-static-resources/immersive-reader-icon.svg";var r=e.getAttribute("data-icon-px-size")||"20";t.style.height=t.style.width=r+"px",t.style.verticalAlign="middle",t.style.marginTop="-2px";var n=e.getAttribute("data-locale")||"en";t.alt=s(n),e.appendChild(t)}function i(e){var t=document.createElement("span");t.style.marginLeft="8px",e.appendChild(t)}function a(e){var t=document.createElement("span"),r=e.getAttribute("data-locale")||"en";t.textContent=s(r),e.appendChild(t)}function s(e){return e=e.toLowerCase(),n[e]?n[e]:"zh-hk"===e||"zh-mo"===e||"zh-tw"===e?n["zh-hant"]:(e=e.substring(0,e.lastIndexOf("-")),n[e]?n[e]:(e=e.substring(0,e.lastIndexOf("-")),n[e]?n[e]:n.en))}t.renderButtons=function(e){var t=document.createElement("style");t.innerHTML=".immersive-reader-button{cursor:pointer;display:inline-block;padding:5px;} .immersive-reader-button:hover{background:rgba(0,0,0,.05);border-radius:2px",document.head.appendChild(t);var r=[].slice.call(document.getElementsByClassName("immersive-reader-button"));e&&e.elements&&(r=e.elements);for(var n=0,d=r;n<d.length;n++){var u=d[n];u.setAttribute("role","button");var l=u.getAttribute("data-locale")||"en";switch(u.setAttribute("aria-label",s(l)),u.getAttribute("data-button-style")||"icon"){case"icon":o(u);break;case"text":a(u);break;case"iconAndText":o(u),i(u),a(u)}}}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.isValidSubdomain=t.close=t.launchAsync=void 0;var o=r(0),i=r(4),a={};a[i.ErrorCode.TokenExpired]="The access token supplied is expired.",a[i.ErrorCode.Throttled]="You have exceeded your quota.",a[i.ErrorCode.ServerError]="An error occurred when calling the server to process the text.",a[i.ErrorCode.InvalidSubdomain]="The subdomain supplied is invalid.";var s=!1;function d(e){return!!e&&new RegExp("^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])$").test(e)}t.launchAsync=function(e,t,r,u){return s?Promise.reject("Immersive Reader is already launching"):new Promise((function(l,c){if(e)if(r)if(r.chunks)if(r.chunks.length)if(d(t)||u&&u.customDomain){s=!0;var m=Date.now();(u=n({uiZIndex:1e3,timeout:15e3,useWebview:!1,allowFullscreen:!0,hideExitButton:!1,cookiePolicy:o.CookiePolicy.Disable},u)).uiZIndex&&"number"==typeof u.uiZIndex||(u.uiZIndex=1e3);var f=null,p=document.createElement("div"),v=u.useWebview?document.createElement("webview"):document.createElement("iframe");v.allow="autoplay";var h=document.createElement("style");h.innerHTML="body{height:100%;overflow:hidden;}";var b=function(){f&&(window.clearTimeout(f),f=null)},g=function(){document.body.contains(p)&&document.body.removeChild(p),window.removeEventListener("message",k),b(),h.parentNode&&h.parentNode.removeChild(h)},y=function(){if(g(),u.onExit)try{u.onExit()}catch(e){}};g();var k=function(n){if(n&&n.data&&"string"==typeof n.data)if("ImmersiveReader-ReadyForContent"===n.data){b();var o={cogSvcsAccessToken:e,cogSvcsSubdomain:t,request:r,launchToPostMessageSentDurationInMs:Date.now()-m,disableFirstRun:u.disableFirstRun,readAloudOptions:u.readAloudOptions,translationOptions:u.translationOptions,displayOptions:u.displayOptions,sendPreferences:!!u.onPreferencesChanged,preferences:u.preferences};v.contentWindow.postMessage(JSON.stringify({messageType:"Content",messageValue:o}),"*")}else if("ImmersiveReader-Exit"===n.data)y();else if(n.data.startsWith("ImmersiveReader-LaunchResponse:")){var d=null,f=null,h=null;try{h=JSON.parse(n.data.substring(31))}catch(e){}h&&h.success?d={container:p,sessionId:h.sessionId,charactersProcessed:h.meteredContentSize}:f=h&&!h.success?{code:h.errorCode,message:a[h.errorCode],sessionId:h.sessionId}:{code:i.ErrorCode.ServerError,message:a[i.ErrorCode.ServerError]},s=!1,d?(b(),l(d)):f&&(y(),c(f))}else if(n.data.startsWith("ImmersiveReader-Preferences:")&&u.onPreferencesChanged&&"function"==typeof u.onPreferencesChanged)try{u.onPreferencesChanged(n.data.substring(28))}catch(e){}};window.addEventListener("message",k),f=window.setTimeout((function(){g(),s=!1,c({code:i.ErrorCode.Timeout,message:"Page failed to load after timeout ("+u.timeout+" ms)"})}),u.timeout),u.allowFullscreen&&v.setAttribute("allowfullscreen",""),v.style.cssText="position: static; width: 100vw; height: 100vh; left: 0; top: 0; border-width: 0",u.useWebview&&v.addEventListener("loadstop",(function(){v.contentWindow.postMessage(JSON.stringify({messageType:"WebviewHost"}),"*")}));var w=(u.customDomain?u.customDomain:"https://"+t+".cognitiveservices.azure.com/immersivereader/webapp/v1.0/")+"reader?exitCallback=ImmersiveReader-Exit&sdkPlatform=js&sdkVersion=1.1.0";w+="&cookiePolicy="+(u.cookiePolicy===o.CookiePolicy.Enable?"enable":"disable"),u.hideExitButton&&(w+="&hideExitButton=true"),u.uiLang&&(w+="&omkt="+u.uiLang),v.src=w,p.style.cssText="position: fixed; width: 100vw; height: 100vh; left: 0; top: 0; border-width: 0; -webkit-perspective: 1px; z-index: "+u.uiZIndex+"; background: white; overflow: hidden",p.appendChild(v),document.body.appendChild(p),document.head.appendChild(h)}else c({code:i.ErrorCode.InvalidSubdomain,message:a[i.ErrorCode.InvalidSubdomain]});else c({code:i.ErrorCode.BadArgument,message:"Chunks must not be empty"});else c({code:i.ErrorCode.BadArgument,message:"Chunks must not be null"});else c({code:i.ErrorCode.BadArgument,message:"Content must not be null"});else c({code:i.ErrorCode.BadArgument,message:"Token must not be null"})}))},t.close=function(){window.postMessage("ImmersiveReader-Exit","*")},t.isValidSubdomain=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorCode=void 0,function(e){e.BadArgument="BadArgument",e.Timeout="Timeout",e.TokenExpired="TokenExpired",e.Throttled="Throttled",e.ServerError="ServerError",e.InvalidSubdomain="InvalidSubdomain"}(t.ErrorCode||(t.ErrorCode={}))}])},"./node_modules/react-loading-skeleton/dist/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _excluded=["count","wrapper","className","containerClassName","containerTestId","circle","style"],_excluded2=["children"];function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _interopDefaultLegacy(e){return e&&"object"===_typeof(e)&&"default"in e?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var React__default=_interopDefaultLegacy(__webpack_require__("./node_modules/react/index.js")),SkeletonThemeContext=React__default.default.createContext({}),defaultEnableAnimation=!0;exports.SkeletonTheme=function SkeletonTheme(_ref3){var children=_ref3.children,styleOptions=_objectWithoutProperties(_ref3,_excluded2);return React__default.default.createElement(SkeletonThemeContext.Provider,{value:styleOptions},children)},exports.default=function Skeleton(_ref2){for(var _a,_b,_c,_ref2$count=_ref2.count,count=void 0===_ref2$count?1:_ref2$count,Wrapper=_ref2.wrapper,customClassName=_ref2.className,containerClassName=_ref2.containerClassName,containerTestId=_ref2.containerTestId,_ref2$circle=_ref2.circle,circle=void 0!==_ref2$circle&&_ref2$circle,styleProp=_ref2.style,originalPropsStyleOptions=_objectWithoutProperties(_ref2,_excluded),contextStyleOptions=React__default.default.useContext(SkeletonThemeContext),propsStyleOptions=_objectSpread({},originalPropsStyleOptions),_i=0,_Object$entries=Object.entries(originalPropsStyleOptions);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0];void 0===_Object$entries$_i[1]&&delete propsStyleOptions[key]}var styleOptions=_objectSpread(_objectSpread(_objectSpread({},contextStyleOptions),propsStyleOptions),{},{circle}),style=_objectSpread(_objectSpread({},styleProp),function styleOptionsToCssProperties(_ref){var baseColor=_ref.baseColor,highlightColor=_ref.highlightColor,width=_ref.width,height=_ref.height,borderRadius=_ref.borderRadius,circle=_ref.circle,direction=_ref.direction,duration=_ref.duration,_ref$enableAnimation=_ref.enableAnimation,enableAnimation=void 0===_ref$enableAnimation?defaultEnableAnimation:_ref$enableAnimation,style={};return"rtl"===direction&&(style["--animation-direction"]="reverse"),"number"==typeof duration&&(style["--animation-duration"]="".concat(duration,"s")),enableAnimation||(style["--pseudo-element-display"]="none"),"string"!=typeof width&&"number"!=typeof width||(style.width=width),"string"!=typeof height&&"number"!=typeof height||(style.height=height),"string"!=typeof borderRadius&&"number"!=typeof borderRadius||(style.borderRadius=borderRadius),circle&&(style.borderRadius="50%"),void 0!==baseColor&&(style["--base-color"]=baseColor),void 0!==highlightColor&&(style["--highlight-color"]=highlightColor),style}(styleOptions)),className="react-loading-skeleton";customClassName&&(className+=" ".concat(customClassName));for(var inline=null!==(_a=styleOptions.inline)&&void 0!==_a&&_a,elements=[],countCeil=Math.ceil(count),i=0;i<countCeil;i++){var thisStyle=style;if(countCeil>count&&i===countCeil-1){var width=null!==(_b=thisStyle.width)&&void 0!==_b?_b:"100%",fractionalPart=count%1,fractionalWidth="number"==typeof width?width*fractionalPart:"calc(".concat(width," * ").concat(fractionalPart,")");thisStyle=_objectSpread(_objectSpread({},thisStyle),{},{width:fractionalWidth})}var skeletonSpan=React__default.default.createElement("span",{className,style:thisStyle,key:i},"‌");inline?elements.push(skeletonSpan):elements.push(React__default.default.createElement(React__default.default.Fragment,{key:i},skeletonSpan,React__default.default.createElement("br",null)))}return React__default.default.createElement("span",{className:containerClassName,"data-testid":containerTestId,"aria-live":"polite","aria-busy":null!==(_c=styleOptions.enableAnimation)&&void 0!==_c?_c:defaultEnableAnimation},Wrapper?elements.map((function(el,i){return React__default.default.createElement(Wrapper,{key:i},el)})):elements)}},"./node_modules/vmsg/vmsg.js":(__unused_webpack_module,exports)=>{"use strict";function pad2(n){return(n|=0)<10?"0".concat(n):"".concat(Math.min(n,99))}function inlineWorker(){function fetchAndInstantiateFallback(url,imports){return new Promise((function(resolve,reject){var req=new XMLHttpRequest;req.open("GET",url),req.responseType="arraybuffer",req.onload=function(){resolve(WebAssembly.instantiate(req.response,imports))},req.onerror=reject,req.send()}))}var memory=null,dynamicTop=5242880;function sbrk(increment){var oldDynamicTop=dynamicTop;return dynamicTop+=increment,oldDynamicTop}function exit(status){postMessage({type:"internal-error",data:status})}var FFI=null,ref=null,pcm_l=null;onmessage=function onmessage(e){var msg=e.data;switch(msg.type){case"init":var _msg$data=msg.data,wasmURL=_msg$data.wasmURL,shimURL=_msg$data.shimURL;Promise.resolve().then((function(){return self.WebAssembly&&!function testSafariWebAssemblyBug(){var bin=new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,127,1,127,3,2,1,0,5,3,1,0,1,7,8,1,4,116,101,115,116,0,0,10,16,1,14,0,32,0,65,1,54,2,0,32,0,40,2,0,11]),mod=new WebAssembly.Module(bin);return 0!==new WebAssembly.Instance(mod,{}).exports.test(4)}()&&delete self.WebAssembly,self.WebAssembly||importScripts(shimURL),{memory:memory=new WebAssembly.Memory({initial:256,maximum:256}),pow:Math.pow,exit,powf:Math.pow,exp:Math.exp,sqrtf:Math.sqrt,cos:Math.cos,log:Math.log,sin:Math.sin,sbrk}})).then((function(Runtime){return function fetchAndInstantiate(url,imports){if(!WebAssembly.instantiateStreaming)return fetchAndInstantiateFallback(url,imports);var req=fetch(url,{credentials:"same-origin"});return WebAssembly.instantiateStreaming(req,imports).catch((function(err){if(err.message&&err.message.indexOf("Argument 0 must be provided and must be a Response")>0)return fetchAndInstantiateFallback(url,imports);throw err}))}(wasmURL,{env:Runtime})})).then((function(wasm){FFI=wasm.instance.exports,postMessage({type:"init",data:null})})).catch((function(err){postMessage({type:"init-error",data:err.toString()})}));break;case"start":if(!function vmsg_init(rate){if(!(ref=FFI.vmsg_init(rate)))return!1;var pcm_l_ref=new Uint32Array(memory.buffer,ref,1)[0];return pcm_l=new Float32Array(memory.buffer,pcm_l_ref),!0}(msg.data))return postMessage({type:"error",data:"vmsg_init"});break;case"data":if(!function vmsg_encode(data){return pcm_l.set(data),FFI.vmsg_encode(ref,data.length)>=0}(msg.data))return postMessage({type:"error",data:"vmsg_encode"});break;case"stop":var blob=function vmsg_flush(){if(FFI.vmsg_flush(ref)<0)return null;var mp3_ref=new Uint32Array(memory.buffer,ref+4,1)[0],size=new Uint32Array(memory.buffer,ref+8,1)[0],mp3=new Uint8Array(memory.buffer,mp3_ref,size),blob=new Blob([mp3],{type:"audio/mpeg"});return FFI.vmsg_free(ref),ref=null,pcm_l=null,blob}();if(!blob)return postMessage({type:"error",data:"vmsg_flush"});postMessage({type:"stop",data:blob})}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Recorder=exports.Form=void 0,exports.record=record;var Recorder=exports.Recorder=function(){function Recorder(){var opts=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},onStop=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.wasmURL=new URL(opts.wasmURL||"/static/js/vmsg.wasm",location).href,this.shimURL=new URL(opts.shimURL||"/static/js/wasm-polyfill.js",location).href,this.onStop=onStop,this.pitch=opts.pitch||0,this.stream=null,this.audioCtx=null,this.gainNode=null,this.pitchFX=null,this.encNode=null,this.worker=null,this.workerURL=null,this.blob=null,this.blobURL=null,this.resolve=null,this.reject=null,Object.seal(this)}var _proto=Recorder.prototype;return _proto.close=function close(){this.encNode&&this.encNode.disconnect(),this.encNode&&(this.encNode.onaudioprocess=null),this.stream&&this.stopTracks(),this.audioCtx&&this.audioCtx.close(),this.worker&&this.worker.terminate(),this.workerURL&&URL.revokeObjectURL(this.workerURL),this.blobURL&&URL.revokeObjectURL(this.blobURL)},_proto.initAudio=function initAudio(){var _this=this;return(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?function(constraints){return navigator.mediaDevices.getUserMedia(constraints)}:function(constraints){var oldGetUserMedia=navigator.webkitGetUserMedia||navigator.mozGetUserMedia;return oldGetUserMedia?new Promise((function(resolve,reject){oldGetUserMedia.call(navigator,constraints,resolve,reject)})):Promise.reject(new Error("getUserMedia is not implemented in this browser"))})({audio:!0}).then((function(stream){_this.stream=stream;var audioCtx=_this.audioCtx=new(window.AudioContext||window.webkitAudioContext),sourceNode=audioCtx.createMediaStreamSource(stream),gainNode=_this.gainNode=(audioCtx.createGain||audioCtx.createGainNode).call(audioCtx);gainNode.gain.value=1,sourceNode.connect(gainNode);var pitchFX=_this.pitchFX=new Jungle(audioCtx);pitchFX.setPitchOffset(_this.pitch);var encNode=_this.encNode=(audioCtx.createScriptProcessor||audioCtx.createJavaScriptNode).call(audioCtx,0,1,1);pitchFX.output.connect(encNode),gainNode.connect(0===_this.pitch?encNode:pitchFX.input)}))},_proto.initWorker=function initWorker(){var _this2=this;if(!this.stream)throw new Error("missing audio initialization");var blob=new Blob(["(",inlineWorker.toString(),")()"],{type:"application/javascript"}),workerURL=this.workerURL=URL.createObjectURL(blob),worker=this.worker=new Worker(workerURL),wasmURL=this.wasmURL,shimURL=this.shimURL;return worker.postMessage({type:"init",data:{wasmURL,shimURL}}),new Promise((function(resolve,reject){worker.onmessage=function(e){var msg=e.data;switch(msg.type){case"init":resolve();break;case"init-error":reject(new Error(msg.data));break;case"error":case"internal-error":console.error("Worker error:",msg.data),_this2.reject&&_this2.reject(msg.data);break;case"stop":_this2.blob=msg.data,_this2.blobURL=URL.createObjectURL(msg.data),_this2.onStop&&_this2.onStop(),_this2.resolve&&_this2.resolve(_this2.blob)}}}))},_proto.init=function init(){return this.initAudio().then(this.initWorker.bind(this))},_proto.startRecording=function startRecording(){var _this3=this;if(!this.stream)throw new Error("missing audio initialization");if(!this.worker)throw new Error("missing worker initialization");this.blob=null,this.blobURL&&URL.revokeObjectURL(this.blobURL),this.blobURL=null,this.resolve=null,this.reject=null,this.worker.postMessage({type:"start",data:this.audioCtx.sampleRate}),this.encNode.onaudioprocess=function(e){var samples=e.inputBuffer.getChannelData(0);_this3.worker.postMessage({type:"data",data:samples})},this.encNode.connect(this.audioCtx.destination)},_proto.stopRecording=function stopRecording(){var _this4=this;if(!this.stream)throw new Error("missing audio initialization");if(!this.worker)throw new Error("missing worker initialization");return this.encNode.disconnect(),this.encNode.onaudioprocess=null,this.stopTracks(),this.worker.postMessage({type:"stop",data:null}),new Promise((function(resolve,reject){_this4.resolve=resolve,_this4.reject=reject}))},_proto.stopTracks=function stopTracks(){this.stream.getTracks&&this.stream.getTracks().forEach((function(track){return track.stop()}))},Recorder}(),Form=exports.Form=function(){function Form(){var _this5=this,opts=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},resolve=arguments.length>1?arguments[1]:void 0,reject=arguments.length>2?arguments[2]:void 0;this.recorder=new Recorder(opts,this.onStop.bind(this)),this.resolve=resolve,this.reject=reject,this.backdrop=null,this.popup=null,this.recordBtn=null,this.stopBtn=null,this.timer=null,this.audio=null,this.saveBtn=null,this.tid=0,this.start=0,Object.seal(this),this.recorder.initAudio().then((function(){return _this5.drawInit()})).then((function(){return _this5.recorder.initWorker()})).then((function(){return _this5.drawAll()})).catch((function(err){return _this5.drawError(err)}))}var _proto2=Form.prototype;return _proto2.drawInit=function drawInit(){var _this6=this;if(!this.backdrop){var backdrop=this.backdrop=document.createElement("div");backdrop.className="vmsg-backdrop",backdrop.addEventListener("click",(function(){return _this6.close(null)}));var popup=this.popup=document.createElement("div");popup.className="vmsg-popup",popup.addEventListener("click",(function(e){return e.stopPropagation()}));var progress=document.createElement("div");progress.className="vmsg-progress";for(var i=0;i<3;i++){var progressDot=document.createElement("div");progressDot.className="vmsg-progress-dot",progress.appendChild(progressDot)}popup.appendChild(progress),backdrop.appendChild(popup),document.body.appendChild(backdrop)}},_proto2.drawTime=function drawTime(msecs){var secs=Math.round(msecs/1e3);this.timer.textContent=pad2(secs/60)+":"+pad2(secs%60)},_proto2.drawAll=function drawAll(){var _this7=this;this.drawInit(),this.clearAll();var recordRow=document.createElement("div");recordRow.className="vmsg-record-row",this.popup.appendChild(recordRow);var recordBtn=this.recordBtn=document.createElement("button");recordBtn.className="vmsg-button vmsg-record-button",recordBtn.textContent="●",recordBtn.addEventListener("click",(function(){return _this7.startRecording()})),recordRow.appendChild(recordBtn);var stopBtn=this.stopBtn=document.createElement("button");stopBtn.className="vmsg-button vmsg-stop-button",stopBtn.style.display="none",stopBtn.textContent="■",stopBtn.addEventListener("click",(function(){return _this7.stopRecording()})),recordRow.appendChild(stopBtn);var audio=this.audio=new Audio;audio.autoplay=!0;var timer=this.timer=document.createElement("span");timer.className="vmsg-timer",timer.addEventListener("click",(function(){audio.paused?_this7.recorder.blobURL&&(audio.src=_this7.recorder.blobURL):audio.pause()})),this.drawTime(0),recordRow.appendChild(timer);var saveBtn=this.saveBtn=document.createElement("button");saveBtn.className="vmsg-button vmsg-save-button",saveBtn.textContent="✓",saveBtn.disabled=!0,saveBtn.addEventListener("click",(function(){return _this7.close(_this7.recorder.blob)})),recordRow.appendChild(saveBtn);var gainWrapper=document.createElement("div");gainWrapper.className="vmsg-slider-wrapper vmsg-gain-slider-wrapper";var gainSlider=document.createElement("input");gainSlider.className="vmsg-slider vmsg-gain-slider",gainSlider.setAttribute("type","range"),gainSlider.min=0,gainSlider.max=2,gainSlider.step=.2,gainSlider.value=1,gainSlider.onchange=function(){var gain=+gainSlider.value;_this7.recorder.gainNode.gain.value=gain},gainWrapper.appendChild(gainSlider),this.popup.appendChild(gainWrapper);var pitchWrapper=document.createElement("div");pitchWrapper.className="vmsg-slider-wrapper vmsg-pitch-slider-wrapper";var pitchSlider=document.createElement("input");pitchSlider.className="vmsg-slider vmsg-pitch-slider",pitchSlider.setAttribute("type","range"),pitchSlider.min=-1,pitchSlider.max=1,pitchSlider.step=.2,pitchSlider.value=this.recorder.pitch,pitchSlider.onchange=function(){var pitch=+pitchSlider.value;_this7.recorder.pitchFX.setPitchOffset(pitch),_this7.recorder.gainNode.disconnect(),_this7.recorder.gainNode.connect(0===pitch?_this7.recorder.encNode:_this7.recorder.pitchFX.input)},pitchWrapper.appendChild(pitchSlider),this.popup.appendChild(pitchWrapper)},_proto2.drawError=function drawError(err){console.error(err),this.drawInit(),this.clearAll();var error=document.createElement("div");error.className="vmsg-error",error.textContent=err.toString(),this.popup.appendChild(error)},_proto2.clearAll=function clearAll(){this.popup&&(this.popup.innerHTML="")},_proto2.close=function close(blob){this.audio&&this.audio.pause(),this.tid&&clearTimeout(this.tid),this.recorder.close(),this.backdrop.remove(),blob?this.resolve(blob):this.reject(new Error("No record made"))},_proto2.onStop=function onStop(){this.recordBtn.style.display="",this.stopBtn.style.display="none",this.stopBtn.disabled=!1,this.saveBtn.disabled=!1},_proto2.startRecording=function startRecording(){this.audio.pause(),this.start=Date.now(),this.updateTime(),this.recordBtn.style.display="none",this.stopBtn.style.display="",this.saveBtn.disabled=!0,this.recorder.startRecording()},_proto2.stopRecording=function stopRecording(){clearTimeout(this.tid),this.tid=0,this.stopBtn.disabled=!0,this.recorder.stopRecording()},_proto2.updateTime=function updateTime(){var _this8=this;this.drawTime(Date.now()-this.start),this.tid=setTimeout((function(){return _this8.updateTime()}),300)},Form}(),shown=!1;function record(opts){return new Promise((function(resolve,reject){if(shown)throw new Error("Record form is already opened");shown=!0,new Form(opts,resolve,reject)})).then((function(result){return shown=!1,result}),(function(err){throw shown=!1,err}))}exports.default={Recorder,Form,record};var delayTime=.1,fadeTime=.05,bufferTime=.1;function createDelayTimeBuffer(context,activeTime,fadeTime,shiftUp){for(var length1=activeTime*context.sampleRate,length=length1+(activeTime-2*fadeTime)*context.sampleRate,buffer=context.createBuffer(1,length,context.sampleRate),p=buffer.getChannelData(0),i=0;i<length1;++i)p[i]=shiftUp?(length1-i)/length:i/length1;for(i=length1;i<length;++i)p[i]=0;return buffer}function Jungle(context){this.context=context;var input=(context.createGain||context.createGainNode).call(context),output=(context.createGain||context.createGainNode).call(context);this.input=input,this.output=output;var mod1=context.createBufferSource(),mod2=context.createBufferSource(),mod3=context.createBufferSource(),mod4=context.createBufferSource();this.shiftDownBuffer=createDelayTimeBuffer(context,bufferTime,fadeTime,!1),this.shiftUpBuffer=createDelayTimeBuffer(context,bufferTime,fadeTime,!0),mod1.buffer=this.shiftDownBuffer,mod2.buffer=this.shiftDownBuffer,mod3.buffer=this.shiftUpBuffer,mod4.buffer=this.shiftUpBuffer,mod1.loop=!0,mod2.loop=!0,mod3.loop=!0,mod4.loop=!0;var mod1Gain=(context.createGain||context.createGainNode).call(context),mod2Gain=(context.createGain||context.createGainNode).call(context),mod3Gain=(context.createGain||context.createGainNode).call(context);mod3Gain.gain.value=0;var mod4Gain=(context.createGain||context.createGainNode).call(context);mod4Gain.gain.value=0,mod1.connect(mod1Gain),mod2.connect(mod2Gain),mod3.connect(mod3Gain),mod4.connect(mod4Gain);var modGain1=(context.createGain||context.createGainNode).call(context),modGain2=(context.createGain||context.createGainNode).call(context),delay1=(context.createDelay||context.createDelayNode).call(context),delay2=(context.createDelay||context.createDelayNode).call(context);mod1Gain.connect(modGain1),mod2Gain.connect(modGain2),mod3Gain.connect(modGain1),mod4Gain.connect(modGain2),modGain1.connect(delay1.delayTime),modGain2.connect(delay2.delayTime);var fade1=context.createBufferSource(),fade2=context.createBufferSource(),fadeBuffer=function createFadeBuffer(context,activeTime,fadeTime){for(var length1=activeTime*context.sampleRate,length=length1+(activeTime-2*fadeTime)*context.sampleRate,buffer=context.createBuffer(1,length,context.sampleRate),p=buffer.getChannelData(0),fadeLength=fadeTime*context.sampleRate,fadeIndex1=fadeLength,fadeIndex2=length1-fadeLength,i=0;i<length1;++i){var value;value=i<fadeIndex1?Math.sqrt(i/fadeLength):i>=fadeIndex2?Math.sqrt(1-(i-fadeIndex2)/fadeLength):1,p[i]=value}for(i=length1;i<length;++i)p[i]=0;return buffer}(context,bufferTime,fadeTime);fade1.buffer=fadeBuffer,fade2.buffer=fadeBuffer,fade1.loop=!0,fade2.loop=!0;var mix1=(context.createGain||context.createGainNode).call(context),mix2=(context.createGain||context.createGainNode).call(context);mix1.gain.value=0,mix2.gain.value=0,fade1.connect(mix1.gain),fade2.connect(mix2.gain),input.connect(delay1),input.connect(delay2),delay1.connect(mix1),delay2.connect(mix2),mix1.connect(output),mix2.connect(output);var t=context.currentTime+.05,t2=t+bufferTime-fadeTime;mod1.start(t),mod2.start(t2),mod3.start(t),mod4.start(t2),fade1.start(t),fade2.start(t2),this.mod1=mod1,this.mod2=mod2,this.mod1Gain=mod1Gain,this.mod2Gain=mod2Gain,this.mod3Gain=mod3Gain,this.mod4Gain=mod4Gain,this.modGain1=modGain1,this.modGain2=modGain2,this.fade1=fade1,this.fade2=fade2,this.mix1=mix1,this.mix2=mix2,this.delay1=delay1,this.delay2=delay2,this.setDelay(delayTime)}Jungle.prototype.setDelay=function(delayTime){this.modGain1.gain.setTargetAtTime(.5*delayTime,0,.01),this.modGain2.gain.setTargetAtTime(.5*delayTime,0,.01)},Jungle.prototype.setPitchOffset=function(mult){mult>0?(this.mod1Gain.gain.value=0,this.mod2Gain.gain.value=0,this.mod3Gain.gain.value=1,this.mod4Gain.gain.value=1):(this.mod1Gain.gain.value=1,this.mod2Gain.gain.value=1,this.mod3Gain.gain.value=0,this.mod4Gain.gain.value=0),this.setDelay(delayTime*Math.abs(mult))}},"./node_modules/css-loader/dist/cjs.js!./node_modules/react-loading-skeleton/dist/skeleton.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,"@keyframes react-loading-skeleton {\n    100% {\n        transform: translateX(100%);\n    }\n}\n\n.react-loading-skeleton {\n    --base-color: #ebebeb;\n    --highlight-color: #f5f5f5;\n    --animation-duration: 1.5s;\n    --animation-direction: normal;\n    --pseudo-element-display: block; /* Enable animation */\n\n    background-color: var(--base-color);\n\n    width: 100%;\n    border-radius: 0.25rem;\n    display: inline-flex;\n    line-height: 1;\n\n    position: relative;\n    overflow: hidden;\n    z-index: 1; /* Necessary for overflow: hidden to work correctly in Safari */\n}\n\n.react-loading-skeleton::after {\n    content: ' ';\n    display: var(--pseudo-element-display);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 100%;\n    background-repeat: no-repeat;\n    background-image: linear-gradient(\n        90deg,\n        var(--base-color),\n        var(--highlight-color),\n        var(--base-color)\n    );\n    transform: translateX(-100%);\n\n    animation-name: react-loading-skeleton;\n    animation-direction: var(--animation-direction);\n    animation-duration: var(--animation-duration);\n    animation-timing-function: ease-in-out;\n    animation-iteration-count: infinite;\n}\n","",{version:3,sources:["webpack://./node_modules/react-loading-skeleton/dist/skeleton.css"],names:[],mappings:"AAAA;IACI;QACI,2BAA2B;IAC/B;AACJ;;AAEA;IACI,qBAAqB;IACrB,0BAA0B;IAC1B,0BAA0B;IAC1B,6BAA6B;IAC7B,+BAA+B,EAAE,qBAAqB;;IAEtD,mCAAmC;;IAEnC,WAAW;IACX,sBAAsB;IACtB,oBAAoB;IACpB,cAAc;;IAEd,kBAAkB;IAClB,gBAAgB;IAChB,UAAU,EAAE,+DAA+D;AAC/E;;AAEA;IACI,YAAY;IACZ,sCAAsC;IACtC,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,4BAA4B;IAC5B;;;;;KAKC;IACD,4BAA4B;;IAE5B,sCAAsC;IACtC,+CAA+C;IAC/C,6CAA6C;IAC7C,sCAAsC;IACtC,mCAAmC;AACvC",sourcesContent:["@keyframes react-loading-skeleton {\n    100% {\n        transform: translateX(100%);\n    }\n}\n\n.react-loading-skeleton {\n    --base-color: #ebebeb;\n    --highlight-color: #f5f5f5;\n    --animation-duration: 1.5s;\n    --animation-direction: normal;\n    --pseudo-element-display: block; /* Enable animation */\n\n    background-color: var(--base-color);\n\n    width: 100%;\n    border-radius: 0.25rem;\n    display: inline-flex;\n    line-height: 1;\n\n    position: relative;\n    overflow: hidden;\n    z-index: 1; /* Necessary for overflow: hidden to work correctly in Safari */\n}\n\n.react-loading-skeleton::after {\n    content: ' ';\n    display: var(--pseudo-element-display);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 100%;\n    background-repeat: no-repeat;\n    background-image: linear-gradient(\n        90deg,\n        var(--base-color),\n        var(--highlight-color),\n        var(--base-color)\n    );\n    transform: translateX(-100%);\n\n    animation-name: react-loading-skeleton;\n    animation-direction: var(--animation-direction);\n    animation-duration: var(--animation-duration);\n    animation-timing-function: ease-in-out;\n    animation-iteration-count: infinite;\n}\n"],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./node_modules/css-loader/dist/runtime/getUrl.js":module=>{"use strict";module.exports=function(url,options){return options||(options={}),url?(url=String(url.__esModule?url.default:url),/^['"].*['"]$/.test(url)&&(url=url.slice(1,-1)),options.hash&&(url+=options.hash),/["'() \t\n]|(%20)/.test(url)||options.needQuotes?'"'.concat(url.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):url):url}},"./node_modules/dom-confetti/lib/main.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.confetti=function confetti(root){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_Object$assign=Object.assign({},defaults,function backwardPatch(config){!config.stagger&&config.delay&&(config.stagger=config.delay);return config}(config)),elementCount=_Object$assign.elementCount,colors=_Object$assign.colors,width=_Object$assign.width,height=_Object$assign.height,perspective=_Object$assign.perspective,angle=_Object$assign.angle,spread=_Object$assign.spread,startVelocity=_Object$assign.startVelocity,decay=_Object$assign.decay,dragFriction=_Object$assign.dragFriction,duration=_Object$assign.duration,stagger=_Object$assign.stagger,random=_Object$assign.random;root.style.perspective=perspective;var fettis=function createElements(root,elementCount,colors,width,height){return Array.from({length:elementCount}).map((function(_,index){var element=document.createElement("div"),color=colors[index%colors.length];return element.style["background-color"]=color,element.style.width=width,element.style.height=height,element.style.position="absolute",element.style.willChange="transform, opacity",element.style.visibility="hidden",root.appendChild(element),element}))}(root,elementCount,colors,width,height).map((function(element){return{element,physics:randomPhysics(angle,spread,startVelocity,random)}}));return function animate(root,fettis,dragFriction,decay,duration,stagger){var startTime=void 0;return new Promise((function(resolve){function update(time){startTime||(startTime=time);var elapsed=time-startTime,progress=startTime===time?0:(time-startTime)/duration;fettis.slice(0,Math.ceil(elapsed/stagger)).forEach((function(fetti){!function updateFetti(fetti,progress,dragFriction,decay){fetti.physics.x+=Math.cos(fetti.physics.angle2D)*fetti.physics.velocity,fetti.physics.y+=Math.sin(fetti.physics.angle2D)*fetti.physics.velocity,fetti.physics.z+=Math.sin(fetti.physics.angle3D)*fetti.physics.velocity,fetti.physics.wobble+=fetti.physics.wobbleSpeed,decay?fetti.physics.velocity*=decay:fetti.physics.velocity-=fetti.physics.velocity*dragFriction;fetti.physics.y+=3,fetti.physics.tiltAngle+=fetti.physics.tiltAngleSpeed;var _fetti$physics=fetti.physics,x=_fetti$physics.x,y=_fetti$physics.y,z=_fetti$physics.z,tiltAngle=_fetti$physics.tiltAngle,wobble=_fetti$physics.wobble,wobbleX=x+10*Math.cos(wobble),wobbleY=y+10*Math.sin(wobble),transform="translate3d("+wobbleX+"px, "+wobbleY+"px, "+z+"px) rotate3d(1, 1, 1, "+tiltAngle+"rad)";fetti.element.style.visibility="visible",fetti.element.style.transform=transform,fetti.element.style.opacity=1-progress}(fetti,progress,dragFriction,decay)})),time-startTime<duration?requestAnimationFrame(update):(fettis.forEach((function(fetti){if(fetti.element.parentNode===root)return root.removeChild(fetti.element)})),resolve())}requestAnimationFrame(update)}))}(root,fettis,dragFriction,decay,duration,stagger)};function randomPhysics(angle,spread,startVelocity,random){var radAngle=angle*(Math.PI/180),radSpread=spread*(Math.PI/180);return{x:0,y:0,z:0,wobble:10*random(),wobbleSpeed:.1+.1*random(),velocity:.5*startVelocity+random()*startVelocity,angle2D:-radAngle+(.5*radSpread-random()*radSpread),angle3D:-Math.PI/4+random()*(Math.PI/2),tiltAngle:random()*Math.PI,tiltAngleSpeed:.1+.3*random()}}var defaults={angle:90,spread:45,startVelocity:45,elementCount:50,width:"10px",height:"10px",perspective:"",colors:["#a864fd","#29cdff","#78ff44","#ff718d","#fdff6a"],duration:3e3,stagger:0,dragFriction:.1,random:Math.random}},"./node_modules/events/events.js":module=>{"use strict";var ReflectOwnKeys,R="object"==typeof Reflect?Reflect:null,ReflectApply=R&&"function"==typeof R.apply?R.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args)};ReflectOwnKeys=R&&"function"==typeof R.ownKeys?R.ownKeys:Object.getOwnPropertySymbols?function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))}:function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target)};var NumberIsNaN=Number.isNaN||function NumberIsNaN(value){return value!=value};function EventEmitter(){EventEmitter.init.call(this)}module.exports=EventEmitter,module.exports.once=function once(emitter,name){return new Promise((function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver),reject(err)}function resolver(){"function"==typeof emitter.removeListener&&emitter.removeListener("error",errorListener),resolve([].slice.call(arguments))}eventTargetAgnosticAddListener(emitter,name,resolver,{once:!0}),"error"!==name&&function addErrorHandlerIfEventEmitter(emitter,handler,flags){"function"==typeof emitter.on&&eventTargetAgnosticAddListener(emitter,"error",handler,flags)}(emitter,errorListener,{once:!0})}))},EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._eventsCount=0,EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;function checkListener(listener){if("function"!=typeof listener)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener)}function _getMaxListeners(that){return void 0===that._maxListeners?EventEmitter.defaultMaxListeners:that._maxListeners}function _addListener(target,type,listener,prepend){var m,events,existing;if(checkListener(listener),void 0===(events=target._events)?(events=target._events=Object.create(null),target._eventsCount=0):(void 0!==events.newListener&&(target.emit("newListener",type,listener.listener?listener.listener:listener),events=target._events),existing=events[type]),void 0===existing)existing=events[type]=listener,++target._eventsCount;else if("function"==typeof existing?existing=events[type]=prepend?[listener,existing]:[existing,listener]:prepend?existing.unshift(listener):existing.push(listener),(m=_getMaxListeners(target))>0&&existing.length>m&&!existing.warned){existing.warned=!0;var w=new Error("Possible EventEmitter memory leak detected. "+existing.length+" "+String(type)+" listeners added. Use emitter.setMaxListeners() to increase limit");w.name="MaxListenersExceededWarning",w.emitter=target,w.type=type,w.count=existing.length,function ProcessEmitWarning(warning){console&&console.warn&&console.warn(warning)}(w)}return target}function onceWrapper(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _onceWrap(target,type,listener){var state={fired:!1,wrapFn:void 0,target,type,listener},wrapped=onceWrapper.bind(state);return wrapped.listener=listener,state.wrapFn=wrapped,wrapped}function _listeners(target,type,unwrap){var events=target._events;if(void 0===events)return[];var evlistener=events[type];return void 0===evlistener?[]:"function"==typeof evlistener?unwrap?[evlistener.listener||evlistener]:[evlistener]:unwrap?function unwrapListeners(arr){for(var ret=new Array(arr.length),i=0;i<ret.length;++i)ret[i]=arr[i].listener||arr[i];return ret}(evlistener):arrayClone(evlistener,evlistener.length)}function listenerCount(type){var events=this._events;if(void 0!==events){var evlistener=events[type];if("function"==typeof evlistener)return 1;if(void 0!==evlistener)return evlistener.length}return 0}function arrayClone(arr,n){for(var copy=new Array(n),i=0;i<n;++i)copy[i]=arr[i];return copy}function eventTargetAgnosticAddListener(emitter,name,listener,flags){if("function"==typeof emitter.on)flags.once?emitter.once(name,listener):emitter.on(name,listener);else{if("function"!=typeof emitter.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);emitter.addEventListener(name,(function wrapListener(arg){flags.once&&emitter.removeEventListener(name,wrapListener),listener(arg)}))}}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(arg){if("number"!=typeof arg||arg<0||NumberIsNaN(arg))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+".");defaultMaxListeners=arg}}),EventEmitter.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){if("number"!=typeof n||n<0||NumberIsNaN(n))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+".");return this._maxListeners=n,this},EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners(this)},EventEmitter.prototype.emit=function emit(type){for(var args=[],i=1;i<arguments.length;i++)args.push(arguments[i]);var doError="error"===type,events=this._events;if(void 0!==events)doError=doError&&void 0===events.error;else if(!doError)return!1;if(doError){var er;if(args.length>0&&(er=args[0]),er instanceof Error)throw er;var err=new Error("Unhandled error."+(er?" ("+er.message+")":""));throw err.context=er,err}var handler=events[type];if(void 0===handler)return!1;if("function"==typeof handler)ReflectApply(handler,this,args);else{var len=handler.length,listeners=arrayClone(handler,len);for(i=0;i<len;++i)ReflectApply(listeners[i],this,args)}return!0},EventEmitter.prototype.addListener=function addListener(type,listener){return _addListener(this,type,listener,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function prependListener(type,listener){return _addListener(this,type,listener,!0)},EventEmitter.prototype.once=function once(type,listener){return checkListener(listener),this.on(type,_onceWrap(this,type,listener)),this},EventEmitter.prototype.prependOnceListener=function prependOnceListener(type,listener){return checkListener(listener),this.prependListener(type,_onceWrap(this,type,listener)),this},EventEmitter.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;if(checkListener(listener),void 0===(events=this._events))return this;if(void 0===(list=events[type]))return this;if(list===listener||list.listener===listener)0==--this._eventsCount?this._events=Object.create(null):(delete events[type],events.removeListener&&this.emit("removeListener",type,list.listener||listener));else if("function"!=typeof list){for(position=-1,i=list.length-1;i>=0;i--)if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener,position=i;break}if(position<0)return this;0===position?list.shift():function spliceOne(list,index){for(;index+1<list.length;index++)list[index]=list[index+1];list.pop()}(list,position),1===list.length&&(events[type]=list[0]),void 0!==events.removeListener&&this.emit("removeListener",type,originalListener||listener)}return this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;if(void 0===(events=this._events))return this;if(void 0===events.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==events[type]&&(0==--this._eventsCount?this._events=Object.create(null):delete events[type]),this;if(0===arguments.length){var key,keys=Object.keys(events);for(i=0;i<keys.length;++i)"removeListener"!==(key=keys[i])&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(listeners=events[type]))this.removeListener(type,listeners);else if(void 0!==listeners)for(i=listeners.length-1;i>=0;i--)this.removeListener(type,listeners[i]);return this},EventEmitter.prototype.listeners=function listeners(type){return _listeners(this,type,!0)},EventEmitter.prototype.rawListeners=function rawListeners(type){return _listeners(this,type,!1)},EventEmitter.listenerCount=function(emitter,type){return"function"==typeof emitter.listenerCount?emitter.listenerCount(type):listenerCount.call(emitter,type)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]}},"./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactIs=__webpack_require__("./node_modules/react-is/index.js"),REACT_STATICS={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},KNOWN_STATICS={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},MEMO_STATICS={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},TYPE_STATICS={};function getStatics(component){return ReactIs.isMemo(component)?MEMO_STATICS:TYPE_STATICS[component.$$typeof]||REACT_STATICS}TYPE_STATICS[ReactIs.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var defineProperty=Object.defineProperty,getOwnPropertyNames=Object.getOwnPropertyNames,getOwnPropertySymbols=Object.getOwnPropertySymbols,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,getPrototypeOf=Object.getPrototypeOf,objectPrototype=Object.prototype;module.exports=function hoistNonReactStatics(targetComponent,sourceComponent,blacklist){if("string"!=typeof sourceComponent){if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);inheritedComponent&&inheritedComponent!==objectPrototype&&hoistNonReactStatics(targetComponent,inheritedComponent,blacklist)}var keys=getOwnPropertyNames(sourceComponent);getOwnPropertySymbols&&(keys=keys.concat(getOwnPropertySymbols(sourceComponent)));for(var targetStatics=getStatics(targetComponent),sourceStatics=getStatics(sourceComponent),i=0;i<keys.length;++i){var key=keys[i];if(!(KNOWN_STATICS[key]||blacklist&&blacklist[key]||sourceStatics&&sourceStatics[key]||targetStatics&&targetStatics[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor)}catch(e){}}}return targetComponent}return targetComponent}},"./node_modules/inline-worker/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var WORKER_ENABLED=!!(__webpack_require__.g===__webpack_require__.g.window&&__webpack_require__.g.URL&&__webpack_require__.g.Blob&&__webpack_require__.g.Worker);function InlineWorker(func,self){var functionBody,_this=this;if(self=self||{},WORKER_ENABLED)return functionBody=func.toString().trim().match(/^function\s*\w*\s*\([\w\s,]*\)\s*{([\w\W]*?)}$/)[1],new __webpack_require__.g.Worker(__webpack_require__.g.URL.createObjectURL(new __webpack_require__.g.Blob([functionBody],{type:"text/javascript"})));this.self=self,this.self.postMessage=function postMessage(data){setTimeout((function(){_this.onmessage({data})}),0)},setTimeout(func.bind(self,self),0)}InlineWorker.prototype.postMessage=function postMessage(data){var _this=this;setTimeout((function(){_this.self.onmessage({data})}),0)},module.exports=InlineWorker},"./node_modules/loadable-components/dist/loadable-components.es.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LOADABLE:()=>LOADABLE,componentTracker:()=>componentTracker,default:()=>__WEBPACK_DEFAULT_EXPORT__,getState:()=>getState,loadComponents:()=>loadComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"),hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},components={},track=function track(component,modules){var index=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,id=modules.join("-");return index&&(id+="-"+index),components[id]?track(component,modules,index+1):(components[id]=component,id)},get$1=function get$$1(id){return components[id]},getAll=function getAll(){return _extends({},components)},LOADABLE_STATE="__LOADABLE_STATE__",LOADABLE="@@loadable-components/loadable";function loadState(rootState){return rootState.children?Promise.all(rootState.children.map((function(state){var component=get$1(state.id);if(!component)return console.warn("loadable-component client modules:",getAll()),console.warn("loadable-component server modules:",window[LOADABLE_STATE]),Promise.reject(new Error('loadable-components: module "'+state.id+'" is not found, client and server modules are not sync. You are probably not using the same resolver on server and client.'));var getLoadable=component[LOADABLE];return"function"!=typeof getLoadable?Promise.reject(new Error('loadable-components: module "'+state.id+'" is not a loadable component, please verify your SSR setup')):getLoadable().load().then((function(){return loadState(state)}))}))):Promise.resolve(null)}function loadComponents(){if("undefined"==typeof window)return Promise.reject(new Error("loadable-components: `loadComponents` must be called client-side: `window` is undefined"));var state=window[LOADABLE_STATE];return state?loadState(state):Promise.reject(new Error("loadable-components state not found. You have a problem server-side. Please verify that you have called `loadableState.getScriptTag()` server-side."))}function getState(){var _ref,componentByIds=getAll(),children=Object.keys(componentByIds).reduce((function(ids,id){var component=componentByIds[id];return component.loadingPromise?[].concat(ids,[{id:component.componentId}]):ids}),[]);return(_ref={})[LOADABLE_STATE]={children},_ref}var EmptyComponent=function EmptyComponent(){return null};var componentTracker=Object.freeze({track,get:get$1,getAll,reset:function reset(){components={}}});const __WEBPACK_DEFAULT_EXPORT__=function loadable(getComponent){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$ErrorComponent=_ref.ErrorComponent,ErrorComponent=void 0===_ref$ErrorComponent?EmptyComponent:_ref$ErrorComponent,_ref$LoadingComponent=_ref.LoadingComponent,LoadingComponent=void 0===_ref$LoadingComponent?EmptyComponent:_ref$LoadingComponent,_render=_ref.render,modules=_ref.modules,asyncMode=_ref.asyncMode,LoadableComponent=function(_React$Component){function LoadableComponent(props){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,LoadableComponent);var _this=function(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.call(this,props));return _this.state={Component:LoadableComponent.Component,error:null,loading:!LoadableComponent.Component},_this.mounted=!1,_this.loadingPromise=null,"undefined"!=typeof window&&null===_this.state.Component&&null===_this.loadingPromise&&(_this.loadingPromise=LoadableComponent.load().then((function(Component){_this.safeSetState({Component,loading:!1})})).catch((function(error){_this.safeSetState({error,loading:!1})}))),_this}return function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(LoadableComponent,_React$Component),LoadableComponent.load=function load(){return LoadableComponent.loadingPromise||(LoadableComponent.loadingPromise=getComponent().then((function(module){var _hoistNonReactStatics,Component=function resolveModuleDefault(module){return module.default||module}(module);return LoadableComponent.Component=Component,hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default()(LoadableComponent,Component,((_hoistNonReactStatics={Component:!0,loadingPromise:!0,load:!0})[LOADABLE]=!0,_hoistNonReactStatics.componentId=!0,_hoistNonReactStatics)),Component})).catch((function(error){throw LoadableComponent.loadingPromise=null,error}))),LoadableComponent.loadingPromise},LoadableComponent.prototype.componentDidMount=function componentDidMount(){this.mounted=!0},LoadableComponent.prototype.componentWillUnmount=function componentWillUnmount(){this.mounted=!1},LoadableComponent.prototype.safeSetState=function safeSetState(state){this.mounted&&this.setState(state)},LoadableComponent.prototype.render=function render(){var _state=this.state,Component=_state.Component,error=_state.error;if("function"==typeof _render)return _render(_extends({},this.state,{ownProps:this.props}));if(null!==Component)return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,this.props);if(null!==error)return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorComponent,{error,ownProps:this.props});if(asyncMode)throw this.loadingPromise;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(LoadingComponent,this.props)},LoadableComponent}(react__WEBPACK_IMPORTED_MODULE_0__.Component);if(LoadableComponent.Component=null,LoadableComponent.loadingPromise=null,LoadableComponent[LOADABLE]=function(){return LoadableComponent},modules){var id=track(LoadableComponent,modules);LoadableComponent.componentId=id}return LoadableComponent}},"./node_modules/lodash/debounce.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isObject=__webpack_require__("./node_modules/lodash/isObject.js"),now=__webpack_require__("./node_modules/lodash/now.js"),toNumber=__webpack_require__("./node_modules/lodash/toNumber.js"),nativeMax=Math.max,nativeMin=Math.min;module.exports=function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=!1,maxing=!1,trailing=!0;if("function"!=typeof func)throw new TypeError("Expected a function");function invokeFunc(time){var args=lastArgs,thisArg=lastThis;return lastArgs=lastThis=void 0,lastInvokeTime=time,result=func.apply(thisArg,args)}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime;return void 0===lastCallTime||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&time-lastInvokeTime>=maxWait}function timerExpired(){var time=now();if(shouldInvoke(time))return trailingEdge(time);timerId=setTimeout(timerExpired,function remainingWait(time){var timeWaiting=wait-(time-lastCallTime);return maxing?nativeMin(timeWaiting,maxWait-(time-lastInvokeTime)):timeWaiting}(time))}function trailingEdge(time){return timerId=void 0,trailing&&lastArgs?invokeFunc(time):(lastArgs=lastThis=void 0,result)}function debounced(){var time=now(),isInvoking=shouldInvoke(time);if(lastArgs=arguments,lastThis=this,lastCallTime=time,isInvoking){if(void 0===timerId)return function leadingEdge(time){return lastInvokeTime=time,timerId=setTimeout(timerExpired,wait),leading?invokeFunc(time):result}(lastCallTime);if(maxing)return clearTimeout(timerId),timerId=setTimeout(timerExpired,wait),invokeFunc(lastCallTime)}return void 0===timerId&&(timerId=setTimeout(timerExpired,wait)),result}return wait=toNumber(wait)||0,isObject(options)&&(leading=!!options.leading,maxWait=(maxing="maxWait"in options)?nativeMax(toNumber(options.maxWait)||0,wait):maxWait,trailing="trailing"in options?!!options.trailing:trailing),debounced.cancel=function cancel(){void 0!==timerId&&clearTimeout(timerId),lastInvokeTime=0,lastArgs=lastCallTime=lastThis=timerId=void 0},debounced.flush=function flush(){return void 0===timerId?result:trailingEdge(now())},debounced}},"./node_modules/lodash/now.js":(module,__unused_webpack_exports,__webpack_require__)=>{var root=__webpack_require__("./node_modules/lodash/_root.js");module.exports=function(){return root.Date.now()}},"./node_modules/qr.js/lib/8BitByte.js":(module,__unused_webpack_exports,__webpack_require__)=>{var mode=__webpack_require__("./node_modules/qr.js/lib/mode.js");function QR8bitByte(data){this.mode=mode.MODE_8BIT_BYTE,this.data=data}QR8bitByte.prototype={getLength:function(buffer){return this.data.length},write:function(buffer){for(var i=0;i<this.data.length;i++)buffer.put(this.data.charCodeAt(i),8)}},module.exports=QR8bitByte},"./node_modules/qr.js/lib/BitBuffer.js":module=>{function QRBitBuffer(){this.buffer=new Array,this.length=0}QRBitBuffer.prototype={get:function(index){var bufIndex=Math.floor(index/8);return 1==(this.buffer[bufIndex]>>>7-index%8&1)},put:function(num,length){for(var i=0;i<length;i++)this.putBit(1==(num>>>length-i-1&1))},getLengthInBits:function(){return this.length},putBit:function(bit){var bufIndex=Math.floor(this.length/8);this.buffer.length<=bufIndex&&this.buffer.push(0),bit&&(this.buffer[bufIndex]|=128>>>this.length%8),this.length++}},module.exports=QRBitBuffer},"./node_modules/qr.js/lib/ErrorCorrectLevel.js":module=>{module.exports={L:1,M:0,Q:3,H:2}},"./node_modules/qr.js/lib/Polynomial.js":(module,__unused_webpack_exports,__webpack_require__)=>{var math=__webpack_require__("./node_modules/qr.js/lib/math.js");function QRPolynomial(num,shift){if(null==num.length)throw new Error(num.length+"/"+shift);for(var offset=0;offset<num.length&&0==num[offset];)offset++;this.num=new Array(num.length-offset+shift);for(var i=0;i<num.length-offset;i++)this.num[i]=num[i+offset]}QRPolynomial.prototype={get:function(index){return this.num[index]},getLength:function(){return this.num.length},multiply:function(e){for(var num=new Array(this.getLength()+e.getLength()-1),i=0;i<this.getLength();i++)for(var j=0;j<e.getLength();j++)num[i+j]^=math.gexp(math.glog(this.get(i))+math.glog(e.get(j)));return new QRPolynomial(num,0)},mod:function(e){if(this.getLength()-e.getLength()<0)return this;for(var ratio=math.glog(this.get(0))-math.glog(e.get(0)),num=new Array(this.getLength()),i=0;i<this.getLength();i++)num[i]=this.get(i);for(i=0;i<e.getLength();i++)num[i]^=math.gexp(math.glog(e.get(i))+ratio);return new QRPolynomial(num,0).mod(e)}},module.exports=QRPolynomial},"./node_modules/qr.js/lib/QRCode.js":(module,__unused_webpack_exports,__webpack_require__)=>{var BitByte=__webpack_require__("./node_modules/qr.js/lib/8BitByte.js"),RSBlock=__webpack_require__("./node_modules/qr.js/lib/RSBlock.js"),BitBuffer=__webpack_require__("./node_modules/qr.js/lib/BitBuffer.js"),util=__webpack_require__("./node_modules/qr.js/lib/util.js"),Polynomial=__webpack_require__("./node_modules/qr.js/lib/Polynomial.js");function QRCode(typeNumber,errorCorrectLevel){this.typeNumber=typeNumber,this.errorCorrectLevel=errorCorrectLevel,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var proto=QRCode.prototype;proto.addData=function(data){var newData=new BitByte(data);this.dataList.push(newData),this.dataCache=null},proto.isDark=function(row,col){if(row<0||this.moduleCount<=row||col<0||this.moduleCount<=col)throw new Error(row+","+col);return this.modules[row][col]},proto.getModuleCount=function(){return this.moduleCount},proto.make=function(){if(this.typeNumber<1){var typeNumber=1;for(typeNumber=1;typeNumber<40;typeNumber++){for(var rsBlocks=RSBlock.getRSBlocks(typeNumber,this.errorCorrectLevel),buffer=new BitBuffer,totalDataCount=0,i=0;i<rsBlocks.length;i++)totalDataCount+=rsBlocks[i].dataCount;for(i=0;i<this.dataList.length;i++){var data=this.dataList[i];buffer.put(data.mode,4),buffer.put(data.getLength(),util.getLengthInBits(data.mode,typeNumber)),data.write(buffer)}if(buffer.getLengthInBits()<=8*totalDataCount)break}this.typeNumber=typeNumber}this.makeImpl(!1,this.getBestMaskPattern())},proto.makeImpl=function(test,maskPattern){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var row=0;row<this.moduleCount;row++){this.modules[row]=new Array(this.moduleCount);for(var col=0;col<this.moduleCount;col++)this.modules[row][col]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(test,maskPattern),this.typeNumber>=7&&this.setupTypeNumber(test),null==this.dataCache&&(this.dataCache=QRCode.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,maskPattern)},proto.setupPositionProbePattern=function(row,col){for(var r=-1;r<=7;r++)if(!(row+r<=-1||this.moduleCount<=row+r))for(var c=-1;c<=7;c++)col+c<=-1||this.moduleCount<=col+c||(this.modules[row+r][col+c]=0<=r&&r<=6&&(0==c||6==c)||0<=c&&c<=6&&(0==r||6==r)||2<=r&&r<=4&&2<=c&&c<=4)},proto.getBestMaskPattern=function(){for(var minLostPoint=0,pattern=0,i=0;i<8;i++){this.makeImpl(!0,i);var lostPoint=util.getLostPoint(this);(0==i||minLostPoint>lostPoint)&&(minLostPoint=lostPoint,pattern=i)}return pattern},proto.createMovieClip=function(target_mc,instance_name,depth){var qr_mc=target_mc.createEmptyMovieClip(instance_name,depth);this.make();for(var row=0;row<this.modules.length;row++)for(var y=1*row,col=0;col<this.modules[row].length;col++){var x=1*col;this.modules[row][col]&&(qr_mc.beginFill(0,100),qr_mc.moveTo(x,y),qr_mc.lineTo(x+1,y),qr_mc.lineTo(x+1,y+1),qr_mc.lineTo(x,y+1),qr_mc.endFill())}return qr_mc},proto.setupTimingPattern=function(){for(var r=8;r<this.moduleCount-8;r++)null==this.modules[r][6]&&(this.modules[r][6]=r%2==0);for(var c=8;c<this.moduleCount-8;c++)null==this.modules[6][c]&&(this.modules[6][c]=c%2==0)},proto.setupPositionAdjustPattern=function(){for(var pos=util.getPatternPosition(this.typeNumber),i=0;i<pos.length;i++)for(var j=0;j<pos.length;j++){var row=pos[i],col=pos[j];if(null==this.modules[row][col])for(var r=-2;r<=2;r++)for(var c=-2;c<=2;c++)this.modules[row+r][col+c]=-2==r||2==r||-2==c||2==c||0==r&&0==c}},proto.setupTypeNumber=function(test){for(var bits=util.getBCHTypeNumber(this.typeNumber),i=0;i<18;i++){var mod=!test&&1==(bits>>i&1);this.modules[Math.floor(i/3)][i%3+this.moduleCount-8-3]=mod}for(i=0;i<18;i++){mod=!test&&1==(bits>>i&1);this.modules[i%3+this.moduleCount-8-3][Math.floor(i/3)]=mod}},proto.setupTypeInfo=function(test,maskPattern){for(var data=this.errorCorrectLevel<<3|maskPattern,bits=util.getBCHTypeInfo(data),i=0;i<15;i++){var mod=!test&&1==(bits>>i&1);i<6?this.modules[i][8]=mod:i<8?this.modules[i+1][8]=mod:this.modules[this.moduleCount-15+i][8]=mod}for(i=0;i<15;i++){mod=!test&&1==(bits>>i&1);i<8?this.modules[8][this.moduleCount-i-1]=mod:i<9?this.modules[8][15-i-1+1]=mod:this.modules[8][15-i-1]=mod}this.modules[this.moduleCount-8][8]=!test},proto.mapData=function(data,maskPattern){for(var inc=-1,row=this.moduleCount-1,bitIndex=7,byteIndex=0,col=this.moduleCount-1;col>0;col-=2)for(6==col&&col--;;){for(var c=0;c<2;c++)if(null==this.modules[row][col-c]){var dark=!1;byteIndex<data.length&&(dark=1==(data[byteIndex]>>>bitIndex&1)),util.getMask(maskPattern,row,col-c)&&(dark=!dark),this.modules[row][col-c]=dark,-1==--bitIndex&&(byteIndex++,bitIndex=7)}if((row+=inc)<0||this.moduleCount<=row){row-=inc,inc=-inc;break}}},QRCode.PAD0=236,QRCode.PAD1=17,QRCode.createData=function(typeNumber,errorCorrectLevel,dataList){for(var rsBlocks=RSBlock.getRSBlocks(typeNumber,errorCorrectLevel),buffer=new BitBuffer,i=0;i<dataList.length;i++){var data=dataList[i];buffer.put(data.mode,4),buffer.put(data.getLength(),util.getLengthInBits(data.mode,typeNumber)),data.write(buffer)}var totalDataCount=0;for(i=0;i<rsBlocks.length;i++)totalDataCount+=rsBlocks[i].dataCount;if(buffer.getLengthInBits()>8*totalDataCount)throw new Error("code length overflow. ("+buffer.getLengthInBits()+">"+8*totalDataCount+")");for(buffer.getLengthInBits()+4<=8*totalDataCount&&buffer.put(0,4);buffer.getLengthInBits()%8!=0;)buffer.putBit(!1);for(;!(buffer.getLengthInBits()>=8*totalDataCount||(buffer.put(QRCode.PAD0,8),buffer.getLengthInBits()>=8*totalDataCount));)buffer.put(QRCode.PAD1,8);return QRCode.createBytes(buffer,rsBlocks)},QRCode.createBytes=function(buffer,rsBlocks){for(var offset=0,maxDcCount=0,maxEcCount=0,dcdata=new Array(rsBlocks.length),ecdata=new Array(rsBlocks.length),r=0;r<rsBlocks.length;r++){var dcCount=rsBlocks[r].dataCount,ecCount=rsBlocks[r].totalCount-dcCount;maxDcCount=Math.max(maxDcCount,dcCount),maxEcCount=Math.max(maxEcCount,ecCount),dcdata[r]=new Array(dcCount);for(var i=0;i<dcdata[r].length;i++)dcdata[r][i]=255&buffer.buffer[i+offset];offset+=dcCount;var rsPoly=util.getErrorCorrectPolynomial(ecCount),modPoly=new Polynomial(dcdata[r],rsPoly.getLength()-1).mod(rsPoly);ecdata[r]=new Array(rsPoly.getLength()-1);for(i=0;i<ecdata[r].length;i++){var modIndex=i+modPoly.getLength()-ecdata[r].length;ecdata[r][i]=modIndex>=0?modPoly.get(modIndex):0}}var totalCodeCount=0;for(i=0;i<rsBlocks.length;i++)totalCodeCount+=rsBlocks[i].totalCount;var data=new Array(totalCodeCount),index=0;for(i=0;i<maxDcCount;i++)for(r=0;r<rsBlocks.length;r++)i<dcdata[r].length&&(data[index++]=dcdata[r][i]);for(i=0;i<maxEcCount;i++)for(r=0;r<rsBlocks.length;r++)i<ecdata[r].length&&(data[index++]=ecdata[r][i]);return data},module.exports=QRCode},"./node_modules/qr.js/lib/RSBlock.js":(module,__unused_webpack_exports,__webpack_require__)=>{var ECL=__webpack_require__("./node_modules/qr.js/lib/ErrorCorrectLevel.js");function QRRSBlock(totalCount,dataCount){this.totalCount=totalCount,this.dataCount=dataCount}QRRSBlock.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],QRRSBlock.getRSBlocks=function(typeNumber,errorCorrectLevel){var rsBlock=QRRSBlock.getRsBlockTable(typeNumber,errorCorrectLevel);if(null==rsBlock)throw new Error("bad rs block @ typeNumber:"+typeNumber+"/errorCorrectLevel:"+errorCorrectLevel);for(var length=rsBlock.length/3,list=new Array,i=0;i<length;i++)for(var count=rsBlock[3*i+0],totalCount=rsBlock[3*i+1],dataCount=rsBlock[3*i+2],j=0;j<count;j++)list.push(new QRRSBlock(totalCount,dataCount));return list},QRRSBlock.getRsBlockTable=function(typeNumber,errorCorrectLevel){switch(errorCorrectLevel){case ECL.L:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+0];case ECL.M:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+1];case ECL.Q:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+2];case ECL.H:return QRRSBlock.RS_BLOCK_TABLE[4*(typeNumber-1)+3];default:return}},module.exports=QRRSBlock},"./node_modules/qr.js/lib/math.js":module=>{for(var QRMath={glog:function(n){if(n<1)throw new Error("glog("+n+")");return QRMath.LOG_TABLE[n]},gexp:function(n){for(;n<0;)n+=255;for(;n>=256;)n-=255;return QRMath.EXP_TABLE[n]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},i=0;i<8;i++)QRMath.EXP_TABLE[i]=1<<i;for(i=8;i<256;i++)QRMath.EXP_TABLE[i]=QRMath.EXP_TABLE[i-4]^QRMath.EXP_TABLE[i-5]^QRMath.EXP_TABLE[i-6]^QRMath.EXP_TABLE[i-8];for(i=0;i<255;i++)QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]]=i;module.exports=QRMath},"./node_modules/qr.js/lib/mode.js":module=>{module.exports={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8}},"./node_modules/qr.js/lib/util.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Mode=__webpack_require__("./node_modules/qr.js/lib/mode.js"),Polynomial=__webpack_require__("./node_modules/qr.js/lib/Polynomial.js"),math=__webpack_require__("./node_modules/qr.js/lib/math.js"),QRMaskPattern_PATTERN000=0,QRMaskPattern_PATTERN001=1,QRMaskPattern_PATTERN010=2,QRMaskPattern_PATTERN011=3,QRMaskPattern_PATTERN100=4,QRMaskPattern_PATTERN101=5,QRMaskPattern_PATTERN110=6,QRMaskPattern_PATTERN111=7,QRUtil={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(data){for(var d=data<<10;QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G15)>=0;)d^=QRUtil.G15<<QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G15);return(data<<10|d)^QRUtil.G15_MASK},getBCHTypeNumber:function(data){for(var d=data<<12;QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G18)>=0;)d^=QRUtil.G18<<QRUtil.getBCHDigit(d)-QRUtil.getBCHDigit(QRUtil.G18);return data<<12|d},getBCHDigit:function(data){for(var digit=0;0!=data;)digit++,data>>>=1;return digit},getPatternPosition:function(typeNumber){return QRUtil.PATTERN_POSITION_TABLE[typeNumber-1]},getMask:function(maskPattern,i,j){switch(maskPattern){case QRMaskPattern_PATTERN000:return(i+j)%2==0;case QRMaskPattern_PATTERN001:return i%2==0;case QRMaskPattern_PATTERN010:return j%3==0;case QRMaskPattern_PATTERN011:return(i+j)%3==0;case QRMaskPattern_PATTERN100:return(Math.floor(i/2)+Math.floor(j/3))%2==0;case QRMaskPattern_PATTERN101:return i*j%2+i*j%3==0;case QRMaskPattern_PATTERN110:return(i*j%2+i*j%3)%2==0;case QRMaskPattern_PATTERN111:return(i*j%3+(i+j)%2)%2==0;default:throw new Error("bad maskPattern:"+maskPattern)}},getErrorCorrectPolynomial:function(errorCorrectLength){for(var a=new Polynomial([1],0),i=0;i<errorCorrectLength;i++)a=a.multiply(new Polynomial([1,math.gexp(i)],0));return a},getLengthInBits:function(mode,type){if(1<=type&&type<10)switch(mode){case Mode.MODE_NUMBER:return 10;case Mode.MODE_ALPHA_NUM:return 9;case Mode.MODE_8BIT_BYTE:case Mode.MODE_KANJI:return 8;default:throw new Error("mode:"+mode)}else if(type<27)switch(mode){case Mode.MODE_NUMBER:return 12;case Mode.MODE_ALPHA_NUM:return 11;case Mode.MODE_8BIT_BYTE:return 16;case Mode.MODE_KANJI:return 10;default:throw new Error("mode:"+mode)}else{if(!(type<41))throw new Error("type:"+type);switch(mode){case Mode.MODE_NUMBER:return 14;case Mode.MODE_ALPHA_NUM:return 13;case Mode.MODE_8BIT_BYTE:return 16;case Mode.MODE_KANJI:return 12;default:throw new Error("mode:"+mode)}}},getLostPoint:function(qrCode){for(var moduleCount=qrCode.getModuleCount(),lostPoint=0,row=0;row<moduleCount;row++)for(var col=0;col<moduleCount;col++){for(var sameCount=0,dark=qrCode.isDark(row,col),r=-1;r<=1;r++)if(!(row+r<0||moduleCount<=row+r))for(var c=-1;c<=1;c++)col+c<0||moduleCount<=col+c||0==r&&0==c||dark==qrCode.isDark(row+r,col+c)&&sameCount++;sameCount>5&&(lostPoint+=3+sameCount-5)}for(row=0;row<moduleCount-1;row++)for(col=0;col<moduleCount-1;col++){var count=0;qrCode.isDark(row,col)&&count++,qrCode.isDark(row+1,col)&&count++,qrCode.isDark(row,col+1)&&count++,qrCode.isDark(row+1,col+1)&&count++,0!=count&&4!=count||(lostPoint+=3)}for(row=0;row<moduleCount;row++)for(col=0;col<moduleCount-6;col++)qrCode.isDark(row,col)&&!qrCode.isDark(row,col+1)&&qrCode.isDark(row,col+2)&&qrCode.isDark(row,col+3)&&qrCode.isDark(row,col+4)&&!qrCode.isDark(row,col+5)&&qrCode.isDark(row,col+6)&&(lostPoint+=40);for(col=0;col<moduleCount;col++)for(row=0;row<moduleCount-6;row++)qrCode.isDark(row,col)&&!qrCode.isDark(row+1,col)&&qrCode.isDark(row+2,col)&&qrCode.isDark(row+3,col)&&qrCode.isDark(row+4,col)&&!qrCode.isDark(row+5,col)&&qrCode.isDark(row+6,col)&&(lostPoint+=40);var darkCount=0;for(col=0;col<moduleCount;col++)for(row=0;row<moduleCount;row++)qrCode.isDark(row,col)&&darkCount++;return lostPoint+=10*(Math.abs(100*darkCount/moduleCount/moduleCount-50)/5)}};module.exports=QRUtil},"./node_modules/qrcode.react/lib/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var React=__webpack_require__("./node_modules/react/index.js"),PropTypes=__webpack_require__("./node_modules/prop-types/index.js"),QRCodeImpl=__webpack_require__("./node_modules/qr.js/lib/QRCode.js"),ErrorCorrectLevel=__webpack_require__("./node_modules/qr.js/lib/ErrorCorrectLevel.js");function convertStr(str){for(var out="",i=0;i<str.length;i++){var charcode=str.charCodeAt(i);charcode<128?out+=String.fromCharCode(charcode):charcode<2048?(out+=String.fromCharCode(192|charcode>>6),out+=String.fromCharCode(128|63&charcode)):charcode<55296||charcode>=57344?(out+=String.fromCharCode(224|charcode>>12),out+=String.fromCharCode(128|charcode>>6&63),out+=String.fromCharCode(128|63&charcode)):(i++,charcode=65536+((1023&charcode)<<10|1023&str.charCodeAt(i)),out+=String.fromCharCode(240|charcode>>18),out+=String.fromCharCode(128|charcode>>12&63),out+=String.fromCharCode(128|charcode>>6&63),out+=String.fromCharCode(128|63&charcode))}return out}var DEFAULT_PROPS={size:128,level:"L",bgColor:"#FFFFFF",fgColor:"#000000"},PROP_TYPES={value:PropTypes.string.isRequired,size:PropTypes.number,level:PropTypes.oneOf(["L","M","Q","H"]),bgColor:PropTypes.string,fgColor:PropTypes.string},QRCodeCanvas=function(_React$Component){function QRCodeCanvas(){var _ref,_temp,_this;_classCallCheck(this,QRCodeCanvas);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _possibleConstructorReturn(_this,(_temp=_this=_possibleConstructorReturn(this,(_ref=QRCodeCanvas.__proto__||Object.getPrototypeOf(QRCodeCanvas)).call.apply(_ref,[this].concat(args))),Object.defineProperty(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this),"_canvas",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),_temp))}return _inherits(QRCodeCanvas,_React$Component),_createClass(QRCodeCanvas,[{key:"shouldComponentUpdate",value:function shouldComponentUpdate(nextProps){var _this2=this;return Object.keys(QRCodeCanvas.propTypes).some((function(k){return _this2.props[k]!==nextProps[k]}))}},{key:"componentDidMount",value:function componentDidMount(){this.update()}},{key:"componentDidUpdate",value:function componentDidUpdate(){this.update()}},{key:"update",value:function update(){var _props=this.props,value=_props.value,size=_props.size,level=_props.level,bgColor=_props.bgColor,fgColor=_props.fgColor,qrcode=new QRCodeImpl(-1,ErrorCorrectLevel[level]);if(qrcode.addData(convertStr(value)),qrcode.make(),null!=this._canvas){var canvas=this._canvas,ctx=canvas.getContext("2d");if(!ctx)return;var cells=qrcode.modules;if(null===cells)return;var tileW=size/cells.length,tileH=size/cells.length,scale=(window.devicePixelRatio||1)/function getBackingStorePixelRatio(ctx){return ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1}(ctx);canvas.height=canvas.width=size*scale,ctx.scale(scale,scale),cells.forEach((function(row,rdx){row.forEach((function(cell,cdx){ctx&&(ctx.fillStyle=cell?fgColor:bgColor);var w=Math.ceil((cdx+1)*tileW)-Math.floor(cdx*tileW),h=Math.ceil((rdx+1)*tileH)-Math.floor(rdx*tileH);ctx&&ctx.fillRect(Math.round(cdx*tileW),Math.round(rdx*tileH),w,h)}))}))}}},{key:"render",value:function render(){var _this3=this,_props2=this.props,size=(_props2.value,_props2.size),style=(_props2.level,_props2.bgColor,_props2.fgColor,_props2.style),otherProps=_objectWithoutProperties(_props2,["value","size","level","bgColor","fgColor","style"]),canvasStyle=_extends({height:size,width:size},style);return React.createElement("canvas",_extends({style:canvasStyle,height:size,width:size,ref:function ref(_ref2){return _this3._canvas=_ref2}},otherProps))}}]),QRCodeCanvas}(React.Component);Object.defineProperty(QRCodeCanvas,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:DEFAULT_PROPS}),Object.defineProperty(QRCodeCanvas,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:PROP_TYPES});var QRCodeSVG=function(_React$Component2){function QRCodeSVG(){return _classCallCheck(this,QRCodeSVG),_possibleConstructorReturn(this,(QRCodeSVG.__proto__||Object.getPrototypeOf(QRCodeSVG)).apply(this,arguments))}return _inherits(QRCodeSVG,_React$Component2),_createClass(QRCodeSVG,[{key:"shouldComponentUpdate",value:function shouldComponentUpdate(nextProps){var _this4=this;return Object.keys(QRCodeCanvas.propTypes).some((function(k){return _this4.props[k]!==nextProps[k]}))}},{key:"render",value:function render(){var _props3=this.props,value=_props3.value,size=_props3.size,level=_props3.level,bgColor=_props3.bgColor,fgColor=_props3.fgColor,otherProps=_objectWithoutProperties(_props3,["value","size","level","bgColor","fgColor"]),qrcode=new QRCodeImpl(-1,ErrorCorrectLevel[level]);qrcode.addData(convertStr(value)),qrcode.make();var cells=qrcode.modules;if(null!==cells){var ops=[];return cells.forEach((function(row,y){var start=null;row.forEach((function(cell,x){if(!cell&&null!==start)return ops.push("M".concat(start," ").concat(y,"h").concat(x-start,"v1H").concat(start,"z")),void(start=null);if(x!==row.length-1)cell&&null===start&&(start=x);else{if(!cell)return;null===start?ops.push("M".concat(x,",").concat(y," h1v1H").concat(x,"z")):ops.push("M".concat(start,",").concat(y," h").concat(x+1-start,"v1H").concat(start,"z"))}}))})),React.createElement("svg",_extends({shapeRendering:"crispEdges",height:size,width:size,viewBox:"0 0 ".concat(cells.length," ").concat(cells.length)},otherProps),React.createElement("path",{fill:bgColor,d:"M0,0 h".concat(cells.length,"v").concat(cells.length,"H0z")}),React.createElement("path",{fill:fgColor,d:ops.join("")}))}}}]),QRCodeSVG}(React.Component);Object.defineProperty(QRCodeSVG,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:DEFAULT_PROPS}),Object.defineProperty(QRCodeSVG,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:PROP_TYPES});var QRCode=function QRCode(props){var renderAs=props.renderAs,otherProps=_objectWithoutProperties(props,["renderAs"]),Component="svg"===renderAs?QRCodeSVG:QRCodeCanvas;return React.createElement(Component,otherProps)};QRCode.defaultProps=_extends({renderAs:"canvas"},DEFAULT_PROPS),module.exports=QRCode},"./node_modules/qtip2/jquery.qtip.min.js":(module,exports,__webpack_require__)=>{var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,t,e,i;t=window,e=document,function(t){"use strict";__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("./node_modules/jquery/dist/jquery.js")],void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=t)?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}((function(s){"use strict";function o(t,e,i,o){this.id=i,this.target=t,this.tooltip=E,this.elements={target:t},this._id=X+"-"+i,this.timers={img:{}},this.options=e,this.plugins={},this.cache={event:{},target:s(),disabled:k,attr:o,onTooltip:k,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=k}function n(t){return t===E||"object"!==s.type(t)}function r(t){return!(s.isFunction(t)||t&&t.attr||t.length||"object"===s.type(t)&&(t.jquery||t.then))}function a(t){var e,i,o,a;return n(t)?k:(n(t.metadata)&&(t.metadata={type:t.metadata}),"content"in t&&(n(e=t.content)||e.jquery||e.done?e=t.content={text:i=r(e)?k:e}:i=e.text,"ajax"in e&&(o=e.ajax,a=o&&o.once!==k,delete e.ajax,e.text=function(t,e){var n=i||s(this).attr(e.options.content.attr)||"Loading...",r=s.ajax(s.extend({},o,{context:e})).then(o.success,E,o.error).then((function(t){return t&&a&&e.set("content.text",t),t}),(function(t,i,s){e.destroyed||0===t.status||e.set("content.text",i+": "+s)}));return a?n:(e.set("content.text",n),r)}),"title"in e&&(n(e.title)||(e.button=e.title.button,e.title=e.title.text),r(e.title||k)&&(e.title=k))),"position"in t&&n(t.position)&&(t.position={my:t.position,at:t.position}),"show"in t&&n(t.show)&&(t.show=t.show.jquery?{target:t.show}:t.show===W?{ready:W}:{event:t.show}),"hide"in t&&n(t.hide)&&(t.hide=t.hide.jquery?{target:t.hide}:{event:t.hide}),"style"in t&&n(t.style)&&(t.style={classes:t.style}),s.each(R,(function(){this.sanitize&&this.sanitize(t)})),t)}function h(t,e){for(var i,s=0,o=t,n=e.split(".");o=o[n[s++]];)n.length>s&&(i=o);return[i||t,n.pop()]}function l(t,e){var i,s,o;for(i in this.checks)for(s in this.checks[i])(o=RegExp(s,"i").exec(t))&&(e.push(o),("builtin"===i||this.plugins[i])&&this.checks[i][s].apply(this.plugins[i]||this,e))}function c(t){return G.concat("").join(t?"-"+t+" ":" ")}function d(i){return i&&{type:i.type,pageX:i.pageX,pageY:i.pageY,target:i.target,relatedTarget:i.relatedTarget,scrollX:i.scrollX||t.pageXOffset||e.body.scrollLeft||e.documentElement.scrollLeft,scrollY:i.scrollY||t.pageYOffset||e.body.scrollTop||e.documentElement.scrollTop}||{}}function p(t,e){return e>0?setTimeout(s.proxy(t,this),e):(t.call(this),i)}function u(t){return this.tooltip.hasClass(ee)?k:(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=p.call(this,(function(){this.toggle(W,t)}),this.options.show.delay),i)}function f(t){if(this.tooltip.hasClass(ee))return k;var e=s(t.relatedTarget),i=e.closest(U)[0]===this.tooltip[0],o=e[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==e[0]&&"mouse"===this.options.position.target&&i||this.options.hide.fixed&&/mouse(out|leave|move)/.test(t.type)&&(i||o))try{t.preventDefault(),t.stopImmediatePropagation()}catch(n){}else this.timers.hide=p.call(this,(function(){this.toggle(k,t)}),this.options.hide.delay,this)}function g(t){return this.tooltip.hasClass(ee)||!this.options.hide.inactive?k:(clearTimeout(this.timers.inactive),this.timers.inactive=p.call(this,(function(){this.hide(t)}),this.options.hide.inactive),i)}function m(t){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}function v(t,i,o){s(e.body).delegate(t,(i.split?i:i.join(he+" "))+he,(function(){var t=T.api[s.attr(this,H)];t&&!t.disabled&&o.apply(t,arguments)}))}function y(t,i,n){var r,h,l,c,d,p=s(e.body),u=t[0]===e?p:t,f=t.metadata?t.metadata(n.metadata):E,g="html5"===n.metadata.type&&f?f[n.metadata.name]:E,m=t.data(n.metadata.name||"qtipopts");try{m="string"==typeof m?s.parseJSON(m):m}catch(v){}if(h=(c=s.extend(W,{},T.defaults,n,"object"==typeof m?a(m):E,a(g||f))).position,c.id=i,"boolean"==typeof c.content.text){if(l=t.attr(c.content.attr),c.content.attr===k||!l)return k;c.content.text=l}if(h.container.length||(h.container=p),h.target===k&&(h.target=u),c.show.target===k&&(c.show.target=u),c.show.solo===W&&(c.show.solo=h.container.closest("body")),c.hide.target===k&&(c.hide.target=u),c.position.viewport===W&&(c.position.viewport=h.container),h.container=h.container.eq(0),h.at=new z(h.at,W),h.my=new z(h.my),t.data(X))if(c.overwrite)t.qtip("destroy",!0);else if(c.overwrite===k)return k;return t.attr(Y,i),c.suppress&&(d=t.attr("title"))&&t.removeAttr("title").attr(se,d).attr("title",""),r=new o(t,c,i,!!l),t.data(X,r),t.one("remove.qtip-"+i+" removeqtip.qtip-"+i,(function(){var t;(t=s(this).data(X))&&t.destroy(!0)})),r}function b(t){return t.charAt(0).toUpperCase()+t.slice(1)}function _(t,e){return Math.ceil(parseFloat(function w(t,e){var s,o,n=e.charAt(0).toUpperCase()+e.slice(1),r=(e+" "+be.join(n+" ")+n).split(" "),a=0;if(ye[e])return t.css(ye[e]);for(;s=r[a++];)if((o=t.css(s))!==i)return ye[e]=s,o}(t,e)))}function x(t,e){this._ns="tip",this.options=e,this.offset=e.offset,this.size=[e.width,e.height],this.init(this.qtip=t)}function q(t,e){this.options=e,this._ns="-modal",this.init(this.qtip=t)}function C(t){this._ns="ie6",this.init(this.qtip=t)}var T,j,z,M,I,W=!0,k=!1,E=null,S="x",L="y",A="width",B="height",D="top",F="left",O="bottom",P="right",N="center",V="shift",R={},X="qtip",Y="data-hasqtip",H="data-qtip-id",G=["ui-widget","ui-tooltip"],U="."+X,Q="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),J=X+"-fixed",K=X+"-default",Z=X+"-focus",te=X+"-hover",ee=X+"-disabled",ie="_replacedByqTip",se="oldtitle",oe={ie:function(){for(var t=3,i=e.createElement("div");(i.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e")&&i.getElementsByTagName("i")[0];);return t>4?t:NaN}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||k};(j=o.prototype)._when=function(t){return s.when.apply(s,t)},j.render=function(t){if(this.rendered||this.destroyed)return this;var i=this,o=this.options,n=this.cache,r=this.elements,a=o.content.text,h=o.content.title,l=o.content.button,c=o.position,d=(this._id,[]);return s.attr(this.target[0],"aria-describedby",this._id),this.tooltip=r.tooltip=s("<div/>",{id:this._id,class:[X,K,o.style.classes,X+"-pos-"+o.position.my.abbrev()].join(" "),width:o.style.width||"",height:o.style.height||"",tracking:"mouse"===c.target&&c.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":k,"aria-describedby":this._id+"-content","aria-hidden":W}).toggleClass(ee,this.disabled).attr(H,this.id).data(X,this).appendTo(c.container).append(r.content=s("<div />",{class:X+"-content",id:this._id+"-content","aria-atomic":W})),this.rendered=-1,this.positioning=W,h&&(this._createTitle(),s.isFunction(h)||d.push(this._updateTitle(h,k))),l&&this._createButton(),s.isFunction(a)||d.push(this._updateContent(a,k)),this.rendered=W,this._setWidget(),s.each(R,(function(t){var e;"render"===this.initialize&&(e=this(i))&&(i.plugins[t]=e)})),this._unassignEvents(),this._assignEvents(),this._when(d).then((function(){i._trigger("render"),i.positioning=k,i.hiddenDuringWait||!o.show.ready&&!t||i.toggle(W,n.event,k),i.hiddenDuringWait=k})),T.api[this.id]=this,this},j.destroy=function(t){function e(){if(!this.destroyed){this.destroyed=W;var t=this.target,e=t.attr(se);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),s.each(this.plugins,(function(){this.destroy&&this.destroy()})),clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this._unassignEvents(),t.removeData(X).removeAttr(H).removeAttr(Y).removeAttr("aria-describedby"),this.options.suppress&&e&&t.attr("title",e).removeAttr(se),this._unbind(t),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=E,delete T.api[this.id]}}return this.destroyed||(t===W&&"hide"!==this.triggering||!this.rendered?e.call(this):(this.tooltip.one("tooltiphidden",s.proxy(e,this)),!this.triggering&&this.hide())),this.target},M=j.checks={builtin:{"^id$":function(t,e,i,o){var n=i===W?T.nextid:i,r=X+"-"+n;n!==k&&n.length>0&&!s("#"+r).length?(this._id=r,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):t[e]=o},"^prerender":function(t,e,i){i&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(t,e,i){this._updateContent(i)},"^content.attr$":function(t,e,i,s){this.options.content.text===this.target.attr(s)&&this._updateContent(this.target.attr(i))},"^content.title$":function(t,e,s){return s?(s&&!this.elements.title&&this._createTitle(),this._updateTitle(s),i):this._removeTitle()},"^content.button$":function(t,e,i){this._updateButton(i)},"^content.title.(text|button)$":function(t,e,i){this.set("content."+e,i)},"^position.(my|at)$":function(t,e,i){"string"==typeof i&&(t[e]=new z(i,"at"===e))},"^position.container$":function(t,e,i){this.rendered&&this.tooltip.appendTo(i)},"^show.ready$":function(t,e,i){i&&(!this.rendered&&this.render(W)||this.toggle(W))},"^style.classes$":function(t,e,i,s){this.rendered&&this.tooltip.removeClass(s).addClass(i)},"^style.(width|height)":function(t,e,i){this.rendered&&this.tooltip.css(e,i)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(t,e,i){this.rendered&&this.tooltip.toggleClass(K,!!i)},"^events.(render|show|move|hide|focus|blur)$":function(t,e,i){this.rendered&&this.tooltip[(s.isFunction(i)?"":"un")+"bind"]("tooltip"+e,i)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var t=this.options.position;this.tooltip.attr("tracking","mouse"===t.target&&t.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},j.get=function(t){if(this.destroyed)return this;var e=h(this.options,t.toLowerCase()),i=e[0][e[1]];return i.precedance?i.string():i};var ne=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,re=/^prerender|show\.ready/i;j.set=function(t,e){if(this.destroyed)return this;var o,n=this.rendered,r=k,c=this.options;return this.checks,"string"==typeof t?(o=t,(t={})[o]=e):t=s.extend({},t),s.each(t,(function(e,o){if(n&&re.test(e))return delete t[e],i;var a,l=h(c,e.toLowerCase());a=l[0][l[1]],l[0][l[1]]=o&&o.nodeType?s(o):o,r=ne.test(e)||r,t[e]=[l[0],l[1],o,a]})),a(c),this.positioning=W,s.each(t,s.proxy(l,this)),this.positioning=k,this.rendered&&this.tooltip[0].offsetWidth>0&&r&&this.reposition("mouse"===c.position.target?E:this.cache.event),this},j._update=function(t,e){var i=this,o=this.cache;return this.rendered&&t?(s.isFunction(t)&&(t=t.call(this.elements.target,o.event,this)||""),s.isFunction(t.then)?(o.waiting=W,t.then((function(t){return o.waiting=k,i._update(t,e)}),E,(function(t){return i._update(t,e)}))):t===k||!t&&""!==t?k:(t.jquery&&t.length>0?e.empty().append(t.css({display:"block",visibility:"visible"})):e.html(t),this._waitForContent(e).then((function(t){t.images&&t.images.length&&i.rendered&&i.tooltip[0].offsetWidth>0&&i.reposition(o.event,!t.length)})))):k},j._waitForContent=function(t){var e=this.cache;return e.waiting=W,(s.fn.imagesLoaded?t.imagesLoaded():s.Deferred().resolve([])).done((function(){e.waiting=k})).promise()},j._updateContent=function(t,e){this._update(t,this.elements.content,e)},j._updateTitle=function(t,e){this._update(t,this.elements.title,e)===k&&this._removeTitle(k)},j._createTitle=function(){var t=this.elements,e=this._id+"-title";t.titlebar&&this._removeTitle(),t.titlebar=s("<div />",{class:X+"-titlebar "+(this.options.style.widget?c("header"):"")}).append(t.title=s("<div />",{id:e,class:X+"-title","aria-atomic":W})).insertBefore(t.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",(function(t){s(this).toggleClass("ui-state-active ui-state-focus","down"===t.type.substr(-4))})).delegate(".qtip-close","mouseover mouseout",(function(t){s(this).toggleClass("ui-state-hover","mouseover"===t.type)})),this.options.content.button&&this._createButton()},j._removeTitle=function(t){var e=this.elements;e.title&&(e.titlebar.remove(),e.titlebar=e.title=e.button=E,t!==k&&this.reposition())},j.reposition=function(i,o){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=W;var n,r,a=this.cache,h=this.tooltip,l=this.options.position,c=l.target,d=l.my,p=l.at,u=l.viewport,f=l.container,g=l.adjust,m=g.method.split(" "),v=h.outerWidth(k),y=h.outerHeight(k),b=0,w=0,_=h.css("position"),x={left:0,top:0},q=h[0].offsetWidth>0,C=i&&"scroll"===i.type,T=s(t),j=f[0].ownerDocument,z=this.mouse;if(s.isArray(c)&&2===c.length)p={x:F,y:D},x={left:c[0],top:c[1]};else if("mouse"===c)p={x:F,y:D},!z||!z.pageX||!g.mouse&&i&&i.pageX?i&&i.pageX||((!g.mouse||this.options.show.distance)&&a.origin&&a.origin.pageX?i=a.origin:(!i||i&&("resize"===i.type||"scroll"===i.type))&&(i=a.event)):i=z,"static"!==_&&(x=f.offset()),j.body.offsetWidth!==(t.innerWidth||j.documentElement.clientWidth)&&(r=s(e.body).offset()),x={left:i.pageX-x.left+(r&&r.left||0),top:i.pageY-x.top+(r&&r.top||0)},g.mouse&&C&&z&&(x.left-=(z.scrollX||0)-T.scrollLeft(),x.top-=(z.scrollY||0)-T.scrollTop());else{if("event"===c?i&&i.target&&"scroll"!==i.type&&"resize"!==i.type?a.target=s(i.target):i.target||(a.target=this.elements.target):"event"!==c&&(a.target=s(c.jquery?c:this.elements.target)),c=a.target,0===(c=s(c).eq(0)).length)return this;c[0]===e||c[0]===t?(b=oe.iOS?t.innerWidth:c.width(),w=oe.iOS?t.innerHeight:c.height(),c[0]===t&&(x={top:(u||c).scrollTop(),left:(u||c).scrollLeft()})):R.imagemap&&c.is("area")?n=R.imagemap(this,c,p,R.viewport?m:k):R.svg&&c&&c[0].ownerSVGElement?n=R.svg(this,c,p,R.viewport?m:k):(b=c.outerWidth(k),w=c.outerHeight(k),x=c.offset()),n&&(b=n.width,w=n.height,r=n.offset,x=n.position),x=this.reposition.offset(c,x,f),(oe.iOS>3.1&&4.1>oe.iOS||oe.iOS>=4.3&&4.33>oe.iOS||!oe.iOS&&"fixed"===_)&&(x.left-=T.scrollLeft(),x.top-=T.scrollTop()),(!n||n&&n.adjustable!==k)&&(x.left+=p.x===P?b:p.x===N?b/2:0,x.top+=p.y===O?w:p.y===N?w/2:0)}return x.left+=g.x+(d.x===P?-v:d.x===N?-v/2:0),x.top+=g.y+(d.y===O?-y:d.y===N?-y/2:0),R.viewport?(x.adjusted=R.viewport(this,x,l,b,w,v,y),r&&x.adjusted.left&&(x.left+=r.left),r&&x.adjusted.top&&(x.top+=r.top)):x.adjusted={left:0,top:0},this._trigger("move",[x,u.elem||u],i)?(delete x.adjusted,o===k||!q||isNaN(x.left)||isNaN(x.top)||"mouse"===c||!s.isFunction(l.effect)?h.css(x):s.isFunction(l.effect)&&(l.effect.call(h,this,s.extend({},x)),h.queue((function(t){s(this).css({opacity:"",height:""}),oe.ie&&this.style.removeAttribute("filter"),t()}))),this.positioning=k,this):this},j.reposition.offset=function(t,i,o){function n(t,e){i.left+=e*t.scrollLeft(),i.top+=e*t.scrollTop()}if(!o[0])return i;var r,a,h,l,c=s(t[0].ownerDocument),d=!!oe.ie&&"CSS1Compat"!==e.compatMode,p=o[0];do{"static"!==(a=s.css(p,"position"))&&("fixed"===a?(h=p.getBoundingClientRect(),n(c,-1)):((h=s(p).position()).left+=parseFloat(s.css(p,"borderLeftWidth"))||0,h.top+=parseFloat(s.css(p,"borderTopWidth"))||0),i.left-=h.left+(parseFloat(s.css(p,"marginLeft"))||0),i.top-=h.top+(parseFloat(s.css(p,"marginTop"))||0),r||"hidden"===(l=s.css(p,"overflow"))||"visible"===l||(r=s(p)))}while(p=p.offsetParent);return r&&(r[0]!==c[0]||d)&&n(r,1),i};var ae=(z=j.reposition.Corner=function(t,e){t=(""+t).replace(/([A-Z])/," $1").replace(/middle/gi,N).toLowerCase(),this.x=(t.match(/left|right/i)||t.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(t.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!e;var i=t.charAt(0);this.precedance="t"===i||"b"===i?L:S}).prototype;ae.invert=function(t,e){this[t]=this[t]===F?P:this[t]===P?F:e||this[t]},ae.string=function(){var t=this.x,e=this.y;return t===e?t:this.precedance===L||this.forceY&&"center"!==e?e+" "+t:t+" "+e},ae.abbrev=function(){var t=this.string().split(" ");return t[0].charAt(0)+(t[1]&&t[1].charAt(0)||"")},ae.clone=function(){return new z(this.string(),this.forceY)},j.toggle=function(t,i){var o=this.cache,n=this.options,r=this.tooltip;if(i){if(/over|enter/.test(i.type)&&/out|leave/.test(o.event.type)&&n.show.target.add(i.target).length===n.show.target.length&&r.has(i.relatedTarget).length)return this;o.event=d(i)}if(this.waiting&&!t&&(this.hiddenDuringWait=W),!this.rendered)return t?this.render(1):this;if(this.destroyed||this.disabled)return this;var a,h,l,c=t?"show":"hide",p=this.options[c],u=(this.options[t?"hide":"show"],this.options.position),f=this.options.content,g=this.tooltip.css("width"),m=this.tooltip.is(":visible"),v=t||1===p.target.length,y=!i||2>p.target.length||o.target[0]===i.target;return(typeof t).search("boolean|number")&&(t=!m),h=(a=!r.is(":animated")&&m===t&&y)?E:!!this._trigger(c,[90]),this.destroyed||(h!==k&&t&&this.focus(i),!h||a||(s.attr(r[0],"aria-hidden",!t),t?(o.origin=d(this.mouse),s.isFunction(f.text)&&this._updateContent(f.text,k),s.isFunction(f.title)&&this._updateTitle(f.title,k),!I&&"mouse"===u.target&&u.adjust.mouse&&(s(e).bind("mousemove."+X,this._storeMouse),I=W),g||r.css("width",r.outerWidth(k)),this.reposition(i,arguments[2]),g||r.css("width",""),p.solo&&("string"==typeof p.solo?s(p.solo):s(U,p.solo)).not(r).not(p.target).qtip("hide",s.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete o.origin,I&&!s(U+'[tracking="true"]:visible',p.solo).not(r).length&&(s(e).unbind("mousemove."+X),I=k),this.blur(i)),l=s.proxy((function(){t?(oe.ie&&r[0].style.removeAttribute("filter"),r.css("overflow",""),"string"==typeof p.autofocus&&s(this.options.show.autofocus,r).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):r.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(t?"visible":"hidden")}),this),p.effect===k||v===k?(r[c](),l()):s.isFunction(p.effect)?(r.stop(1,1),p.effect.call(r,this),r.queue("fx",(function(t){l(),t()}))):r.fadeTo(90,t?1:0,l),t&&p.target.trigger("qtip-"+this.id+"-inactive"))),this},j.show=function(t){return this.toggle(W,t)},j.hide=function(t){return this.toggle(k,t)},j.focus=function(t){if(!this.rendered||this.destroyed)return this;var e=s(U),i=this.tooltip,o=parseInt(i[0].style.zIndex,10),n=T.zindex+e.length;return i.hasClass(Z)||this._trigger("focus",[n],t)&&(o!==n&&(e.each((function(){this.style.zIndex>o&&(this.style.zIndex=this.style.zIndex-1)})),e.filter("."+Z).qtip("blur",t)),i.addClass(Z)[0].style.zIndex=n),this},j.blur=function(t){return!this.rendered||this.destroyed||(this.tooltip.removeClass(Z),this._trigger("blur",[this.tooltip.css("zIndex")],t)),this},j.disable=function(t){return this.destroyed||("toggle"===t?t=!(this.rendered?this.tooltip.hasClass(ee):this.disabled):"boolean"!=typeof t&&(t=W),this.rendered&&this.tooltip.toggleClass(ee,t).attr("aria-disabled",t),this.disabled=!!t),this},j.enable=function(){return this.disable(k)},j._createButton=function(){var t=this,e=this.elements,i=e.tooltip,o=this.options.content.button,r="string"==typeof o?o:"Close tooltip";e.button&&e.button.remove(),e.button=o.jquery?o:s("<a />",{class:"qtip-close "+(this.options.style.widget?"":X+"-icon"),title:r,"aria-label":r}).prepend(s("<span />",{class:"ui-icon ui-icon-close",html:"&times;"})),e.button.appendTo(e.titlebar||i).attr("role","button").click((function(e){return i.hasClass(ee)||t.hide(e),k}))},j._updateButton=function(t){if(!this.rendered)return k;var e=this.elements.button;t?this._createButton():e.remove()},j._setWidget=function(){var t=this.options.style.widget,e=this.elements,i=e.tooltip,s=i.hasClass(ee);i.removeClass(ee),ee=t?"ui-state-disabled":"qtip-disabled",i.toggleClass(ee,s),i.toggleClass("ui-helper-reset "+c(),t).toggleClass(K,this.options.style.def&&!t),e.content&&e.content.toggleClass(c("content"),t),e.titlebar&&e.titlebar.toggleClass(c("header"),t),e.button&&e.button.toggleClass(X+"-icon",!t)},j._storeMouse=function(t){(this.mouse=d(t)).type="mousemove"},j._bind=function(t,e,i,o,n){var r="."+this._id+(o?"-"+o:"");e.length&&s(t).bind((e.split?e:e.join(r+" "))+r,s.proxy(i,n||this))},j._unbind=function(t,e){s(t).unbind("."+this._id+(e?"-"+e:""))};var he="."+X;s((function(){v(U,["mouseenter","mouseleave"],(function(t){var e="mouseenter"===t.type,i=s(t.currentTarget),o=s(t.relatedTarget||t.target),n=this.options;e?(this.focus(t),i.hasClass(J)&&!i.hasClass(ee)&&clearTimeout(this.timers.hide)):"mouse"===n.position.target&&n.hide.event&&n.show.target&&!o.closest(n.show.target[0]).length&&this.hide(t),i.toggleClass(te,e)})),v("["+H+"]",Q,g)})),j._trigger=function(t,e,i){var o=s.Event("tooltip"+t);return o.originalEvent=i&&s.extend({},i)||this.cache.event||E,this.triggering=t,this.tooltip.trigger(o,[this].concat(e||[])),this.triggering=k,!o.isDefaultPrevented()},j._bindEvents=function(t,e,o,n,r,a){if(n.add(o).length===n.length){var h=[];e=s.map(e,(function(e){var o=s.inArray(e,t);return o>-1?(h.push(t.splice(o,1)[0]),i):e})),h.length&&this._bind(o,h,(function(t){(this.rendered&&this.tooltip[0].offsetWidth>0?a:r).call(this,t)}))}this._bind(o,t,r),this._bind(n,e,a)},j._assignInitialEvents=function(t){function e(t){return this.disabled||this.destroyed?k:(this.cache.event=d(t),this.cache.target=t?s(t.target):[i],clearTimeout(this.timers.show),this.timers.show=p.call(this,(function(){this.render("object"==typeof t||o.show.ready)}),o.show.delay),i)}var o=this.options,n=o.show.target,r=o.hide.target,a=o.show.event?s.trim(""+o.show.event).split(" "):[],h=o.hide.event?s.trim(""+o.hide.event).split(" "):[];/mouse(over|enter)/i.test(o.show.event)&&!/mouse(out|leave)/i.test(o.hide.event)&&h.push("mouseleave"),this._bind(n,"mousemove",(function(t){this._storeMouse(t),this.cache.onTarget=W})),this._bindEvents(a,h,n,r,e,(function(){clearTimeout(this.timers.show)})),(o.show.ready||o.prerender)&&e.call(this,t)},j._assignEvents=function(){var i=this,o=this.options,n=o.position,r=this.tooltip,a=o.show.target,h=o.hide.target,l=n.container,c=n.viewport,d=s(e),p=(s(e.body),s(t)),v=o.show.event?s.trim(""+o.show.event).split(" "):[],y=o.hide.event?s.trim(""+o.hide.event).split(" "):[];s.each(o.events,(function(t,e){i._bind(r,"toggle"===t?["tooltipshow","tooltiphide"]:["tooltip"+t],e,null,r)})),/mouse(out|leave)/i.test(o.hide.event)&&"window"===o.hide.leave&&this._bind(d,["mouseout","blur"],(function(t){/select|option/.test(t.target.nodeName)||t.relatedTarget||this.hide(t)})),o.hide.fixed?h=h.add(r.addClass(J)):/mouse(over|enter)/i.test(o.show.event)&&this._bind(h,"mouseleave",(function(){clearTimeout(this.timers.show)})),(""+o.hide.event).indexOf("unfocus")>-1&&this._bind(l.closest("html"),["mousedown","touchstart"],(function(t){var e=s(t.target),i=this.rendered&&!this.tooltip.hasClass(ee)&&this.tooltip[0].offsetWidth>0,o=e.parents(U).filter(this.tooltip[0]).length>0;e[0]===this.target[0]||e[0]===this.tooltip[0]||o||this.target.has(e[0]).length||!i||this.hide(t)})),"number"==typeof o.hide.inactive&&(this._bind(a,"qtip-"+this.id+"-inactive",g),this._bind(h.add(r),T.inactiveEvents,g,"-inactive")),this._bindEvents(v,y,a,h,u,f),this._bind(a.add(r),"mousemove",(function(t){if("number"==typeof o.hide.distance){var e=this.cache.origin||{},i=this.options.hide.distance,s=Math.abs;(s(t.pageX-e.pageX)>=i||s(t.pageY-e.pageY)>=i)&&this.hide(t)}this._storeMouse(t)})),"mouse"===n.target&&n.adjust.mouse&&(o.hide.event&&this._bind(a,["mouseenter","mouseleave"],(function(t){this.cache.onTarget="mouseenter"===t.type})),this._bind(d,"mousemove",(function(t){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(ee)&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}))),(n.adjust.resize||c.length)&&this._bind(s.event.special.resize?c:p,"resize",m),n.adjust.scroll&&this._bind(p.add(n.container),"scroll",m)},j._unassignEvents=function(){var i=[this.options.show.target[0],this.options.hide.target[0],this.rendered&&this.tooltip[0],this.options.position.container[0],this.options.position.viewport[0],this.options.position.container.closest("html")[0],t,e];this._unbind(s([]).pushStack(s.grep(i,(function(t){return"object"==typeof t}))))},T=s.fn.qtip=function(t,e,o){var n=(""+t).toLowerCase(),r=E,h=s.makeArray(arguments).slice(1),l=h[h.length-1],c=this[0]?s.data(this[0],X):E;return!arguments.length&&c||"api"===n?c:"string"==typeof t?(this.each((function(){var t=s.data(this,X);if(!t)return W;if(l&&l.timeStamp&&(t.cache.event=l),!e||"option"!==n&&"options"!==n)t[n]&&t[n].apply(t,h);else{if(o===i&&!s.isPlainObject(e))return r=t.get(e),k;t.set(e,o)}})),r!==E?r:this):"object"!=typeof t&&arguments.length?i:(c=a(s.extend(W,{},t)),this.each((function(t){var e,o;return o=!(o=s.isArray(c.id)?c.id[t]:c.id)||o===k||1>o.length||T.api[o]?T.nextid++:o,(e=y(s(this),o,c))===k?W:(T.api[o]=e,s.each(R,(function(){"initialize"===this.initialize&&this(e)})),e._assignInitialEvents(l),i)})))},s.qtip=o,T.api={},s.each({attr:function(t,e){if(this.length){var i=this[0],o="title",n=s.data(i,"qtip");if(t===o&&n&&"object"==typeof n&&n.options.suppress)return 2>arguments.length?s.attr(i,se):(n&&n.options.content.attr===o&&n.cache.attr&&n.set("content.text",e),this.attr(se,e))}return s.fn["attr"+ie].apply(this,arguments)},clone:function(t){var e=(s([]),s.fn["clone"+ie].apply(this,arguments));return t||e.filter("["+se+"]").attr("title",(function(){return s.attr(this,se)})).removeAttr(se),e}},(function(t,e){if(!e||s.fn[t+ie])return W;var i=s.fn[t+ie]=s.fn[t];s.fn[t]=function(){return e.apply(this,arguments)||i.apply(this,arguments)}})),s.ui||(s["cleanData"+ie]=s.cleanData,s.cleanData=function(t){for(var e,i=0;(e=s(t[i])).length;i++)if(e.attr(Y))try{e.triggerHandler("removeqtip")}catch(o){}s["cleanData"+ie].apply(this,arguments)}),T.version="2.2.0",T.nextid=0,T.inactiveEvents=Q,T.zindex=15e3,T.defaults={prerender:k,id:k,overwrite:W,suppress:W,content:{text:W,attr:"title",title:k,button:k},position:{my:"top left",at:"bottom right",target:k,container:k,viewport:k,adjust:{x:0,y:0,mouse:W,scroll:W,resize:W,method:"flipinvert flipinvert"},effect:function(t,e){s(this).animate(e,{duration:200,queue:k})}},show:{target:k,event:"mouseenter",effect:W,delay:90,solo:k,ready:k,autofocus:k},hide:{target:k,event:"mouseleave",effect:W,delay:0,fixed:k,inactive:k,leave:"window",distance:k},style:{classes:"",widget:k,width:k,height:k,def:W},events:{render:E,move:E,show:E,hide:E,toggle:E,visible:E,hidden:E,focus:E,blur:E}};var le,ce="margin",de="border",pe="color",ue="background-color",fe="transparent",ge=" !important",me=!!e.createElement("canvas").getContext,ve=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,ye={},be=["Webkit","O","Moz","ms"];if(me)var we=t.devicePixelRatio||1,_e=function(){var t=e.createElement("canvas").getContext("2d");return t.backingStorePixelRatio||t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||1}(),xe=we/_e;else var qe=function(t,e,i){return"<qtipvml:"+t+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(e||"")+' style="behavior: url(#default#VML); '+(i||"")+'" />'};s.extend(x.prototype,{init:function(t){var e,i;i=this.element=t.elements.tip=s("<div />",{class:X+"-tip"}).prependTo(t.tooltip),me?((e=s("<canvas />").appendTo(this.element)[0].getContext("2d")).lineJoin="miter",e.miterLimit=1e5,e.save()):(e=qe("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(e+e),t._bind(s("*",i).add(i),["click","mousedown"],(function(t){t.stopPropagation()}),this._ns)),t._bind(t.tooltip,"tooltipmove",this.reposition,this._ns,this),this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(t){var e=this.qtip.elements.titlebar;return e&&(t.y===D||t.y===N&&this.element.position().top+this.size[1]/2+this.options.offset<e.outerHeight(W))},_parseCorner:function(t){var e=this.qtip.options.position.my;return t===k||e===k?t=k:t===W?t=new z(e.string()):t.string||((t=new z(t)).fixed=W),t},_parseWidth:function(t,e,i){var s=this.qtip.elements,o=de+b(e)+"Width";return(i?_(i,o):_(s.content,o)||_(this._useTitle(t)&&s.titlebar||s.content,o)||_(s.tooltip,o))||0},_parseRadius:function(t){var e=this.qtip.elements,i=de+b(t.y)+b(t.x)+"Radius";return 9>oe.ie?0:_(this._useTitle(t)&&e.titlebar||e.content,i)||_(e.tooltip,i)||0},_invalidColour:function(t,e,i){var s=t.css(e);return!s||i&&s===t.css(i)||ve.test(s)?k:s},_parseColours:function(t){var e=this.qtip.elements,i=this.element.css("cssText",""),o=de+b(t[t.precedance])+b(pe),n=this._useTitle(t)&&e.titlebar||e.content,r=this._invalidColour,a=[];return a[0]=r(i,ue)||r(n,ue)||r(e.content,ue)||r(e.tooltip,ue)||i.css(ue),a[1]=r(i,o,pe)||r(n,o,pe)||r(e.content,o,pe)||r(e.tooltip,o,pe)||e.tooltip.css(o),s("*",i).add(i).css("cssText",ue+":"+fe+ge+";"+de+":0"+ge+";"),a},_calculateSize:function(t){var i,s,o=t.precedance===L,n=this.options.width,r=this.options.height,a="c"===t.abbrev(),h=(o?n:r)*(a?.5:1),l=Math.pow,c=Math.round,d=Math.sqrt(l(h,2)+l(r,2)),p=[this.border/h*d,this.border/r*d];return p[2]=Math.sqrt(l(p[0],2)-l(this.border,2)),p[3]=Math.sqrt(l(p[1],2)-l(this.border,2)),s=[c((i=(d+p[2]+p[3]+(a?0:p[0]))/d)*n),c(i*r)],o?s:s.reverse()},_calculateTip:function(t,e,i){i=i||1;var s=(e=e||this.size)[0]*i,o=e[1]*i,n=Math.ceil(s/2),r=Math.ceil(o/2),a={br:[0,0,s,o,s,0],bl:[0,0,s,0,0,o],tr:[0,o,s,0,s,o],tl:[0,0,0,o,s,o],tc:[0,o,n,0,s,o],bc:[0,0,s,0,n,o],rc:[0,0,s,r,0,o],lc:[s,0,s,o,0,r]};return a.lt=a.br,a.rt=a.bl,a.lb=a.tr,a.rb=a.tl,a[t.abbrev()]},_drawCoords:function(t,e){t.beginPath(),t.moveTo(e[0],e[1]),t.lineTo(e[2],e[3]),t.lineTo(e[4],e[5]),t.closePath()},create:function(){var t=this.corner=(me||oe.ie)&&this._parseCorner(this.options.corner);return(this.enabled=!!this.corner&&"c"!==this.corner.abbrev())&&(this.qtip.cache.corner=t.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(e,i){if(!this.enabled)return this;var o,n,r,a,h,l,c,d,p=this.qtip.elements,u=this.element,f=u.children(),g=this.options,m=this.size,v=g.mimic,y=Math.round;e||(e=this.qtip.cache.corner||this.corner),v===k?v=e:((v=new z(v)).precedance=e.precedance,"inherit"===v.x?v.x=e.x:"inherit"===v.y?v.y=e.y:v.x===v.y&&(v[e.precedance]=e[e.precedance])),n=v.precedance,e.precedance===S?this._swapDimensions():this._resetDimensions(),(o=this.color=this._parseColours(e))[1]!==fe?(d=this.border=this._parseWidth(e,e[e.precedance]),g.border&&1>d&&!ve.test(o[1])&&(o[0]=o[1]),this.border=d=g.border!==W?g.border:d):this.border=d=0,c=this.size=this._calculateSize(e),u.css({width:c[0],height:c[1],lineHeight:c[1]+"px"}),l=e.precedance===L?[y(v.x===F?d:v.x===P?c[0]-m[0]-d:(c[0]-m[0])/2),y(v.y===D?c[1]-m[1]:0)]:[y(v.x===F?c[0]-m[0]:0),y(v.y===D?d:v.y===O?c[1]-m[1]-d:(c[1]-m[1])/2)],me?((r=f[0].getContext("2d")).restore(),r.save(),r.clearRect(0,0,6e3,6e3),a=this._calculateTip(v,m,xe),h=this._calculateTip(v,this.size,xe),f.attr(A,c[0]*xe).attr(B,c[1]*xe),f.css(A,c[0]).css(B,c[1]),this._drawCoords(r,h),r.fillStyle=o[1],r.fill(),r.translate(l[0]*xe,l[1]*xe),this._drawCoords(r,a),r.fillStyle=o[0],r.fill()):(a="m"+(a=this._calculateTip(v))[0]+","+a[1]+" l"+a[2]+","+a[3]+" "+a[4]+","+a[5]+" xe",l[2]=d&&/^(r|b)/i.test(e.string())?8===oe.ie?2:1:0,f.css({coordsize:c[0]+d+" "+(c[1]+d),antialias:""+(v.string().indexOf(N)>-1),left:l[0]-l[2]*Number(n===S),top:l[1]-l[2]*Number(n===L),width:c[0]+d,height:c[1]+d}).each((function(t){var e=s(this);e[e.prop?"prop":"attr"]({coordsize:c[0]+d+" "+(c[1]+d),path:a,fillcolor:o[0],filled:!!t,stroked:!t}).toggle(!(!d&&!t)),!t&&e.html(qe("stroke",'weight="'+2*d+'px" color="'+o[1]+'" miterlimit="1000" joinstyle="miter"'))}))),t.opera&&setTimeout((function(){p.tip.css({display:"inline-block",visibility:"visible"})}),1),i!==k&&this.calculate(e,c)},calculate:function(t,e){if(!this.enabled)return k;var i,o,n=this,r=this.qtip.elements,a=this.element,h=this.options.offset,l=(r.tooltip.hasClass("ui-widget"),{});return t=t||this.corner,i=t.precedance,e=e||this._calculateSize(t),o=[t.x,t.y],i===S&&o.reverse(),s.each(o,(function(s,o){var a,c,d;o===N?(l[a=i===L?F:D]="50%",l[ce+"-"+a]=-Math.round(e[i===L?0:1]/2)+h):(a=n._parseWidth(t,o,r.tooltip),c=n._parseWidth(t,o,r.content),d=n._parseRadius(t),l[o]=Math.max(-n.border,s?c:h+(d>a?d:-a)))})),l[t[i]]-=e[i===S?0:1],a.css({margin:"",top:"",bottom:"",left:"",right:""}).css(l),l},reposition:function(t,e,s){function o(t,e,i,s,o){t===V&&l.precedance===e&&c[s]&&l[i]!==N?l.precedance=l.precedance===S?L:S:t!==V&&c[s]&&(l[e]=l[e]===N?c[s]>0?s:o:l[e]===s?o:s)}function n(t,e,o){l[t]===N?g[ce+"-"+e]=f[t]=r[ce+"-"+e]-c[e]:(a=r[o]!==i?[c[e],-r[e]]:[-c[e],r[e]],(f[t]=Math.max(a[0],a[1]))>a[0]&&(s[e]-=c[e],f[e]=k),g[r[o]!==i?o:e]=f[t])}if(this.enabled){var r,a,h=e.cache,l=this.corner.clone(),c=s.adjusted,d=e.options.position.adjust.method.split(" "),p=d[0],u=d[1]||d[0],f={left:k,top:k,x:0,y:0},g={};this.corner.fixed!==W&&(o(p,S,L,F,P),o(u,L,S,D,O),l.string()===h.corner.string()||h.cornerTop===c.top&&h.cornerLeft===c.left||this.update(l,k)),(r=this.calculate(l)).right!==i&&(r.left=-r.right),r.bottom!==i&&(r.top=-r.bottom),r.user=this.offset,(f.left=p===V&&!!c.left)&&n(S,F,P),(f.top=u===V&&!!c.top)&&n(L,D,O),this.element.css(g).toggle(!(f.x&&f.y||l.x===N&&f.y||l.y===N&&f.x)),s.left-=r.left.charAt?r.user:p!==V||f.top||!f.left&&!f.top?r.left+this.border:0,s.top-=r.top.charAt?r.user:u!==V||f.left||!f.left&&!f.top?r.top+this.border:0,h.cornerLeft=c.left,h.cornerTop=c.top,h.corner=l.clone()}},destroy:function(){this.qtip._unbind(this.qtip.tooltip,this._ns),this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),le=R.tip=function(t){return new x(t,t.options.style.tip)},le.initialize="render",le.sanitize=function(t){if(t.style&&"tip"in t.style){var e=t.style.tip;"object"!=typeof e&&(e=t.style.tip={corner:e}),/string|boolean/i.test(typeof e.corner)||(e.corner=W)}},M.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){this.create(),this.qtip.reposition()},"^style.tip.(height|width)$":function(t){this.size=[t.width,t.height],this.update(),this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},s.extend(W,T.defaults,{style:{tip:{corner:W,mimic:k,width:6,height:6,border:W,offset:0}}});var Ce,Te,Me,je="qtip-modal",ze="."+je;Te=function(){function i(t){1>c.length&&t.length?t.not("body").blur():c.first().focus()}function o(t){if(h.is(":visible")){var o=s(t.target),a=n.tooltip,l=o.closest(U);(1>l.length?k:parseInt(l[0].style.zIndex,10)>parseInt(a[0].style.zIndex,10))||o.closest(U)[0]===a[0]||i(o),t.target,c[c.length-1]}}var n,a,h,l=this,c={};s.extend(l,{init:function(){return h=l.elem=s("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return k}}).hide(),s(e.body).bind("focusin"+ze,o),s(e).bind("keydown"+ze,(function(t){n&&n.options.show.modal.escape&&27===t.keyCode&&n.hide(t)})),h.bind("click"+ze,(function(t){n&&n.options.show.modal.blur&&n.hide(t)})),l},update:function(e){n=e,c=e.options.show.modal.stealfocus!==k?e.tooltip.find("*").filter((function(){return function t(t){if(s.expr[":"].focusable)return s.expr[":"].focusable;var e,i,o,n=!isNaN(s.attr(t,"tabindex")),r=t.nodeName&&t.nodeName.toLowerCase();return"area"===r?(i=(e=t.parentNode).name,!(!t.href||!i||"map"!==e.nodeName.toLowerCase())&&!!(o=s("img[usemap=#"+i+"]")[0])&&o.is(":visible")):/input|select|textarea|button|object/.test(r)?!t.disabled:"a"===r&&t.href||n}(this)})):[]},toggle:function(t,o,r){var c=(s(e.body),t.tooltip),d=t.options.show.modal,p=d.effect,u=o?"show":"hide",f=h.is(":visible"),g=s(ze).filter(":visible:not(:animated)").not(c);return l.update(t),o&&d.stealfocus!==k&&i(s(":focus")),h.toggleClass("blurs",d.blur),o&&h.appendTo(e.body),h.is(":animated")&&f===o&&a!==k||!o&&g.length||(h.stop(W,k),s.isFunction(p)?p.call(h,o):p===k?h[u]():h.fadeTo(parseInt(r,10)||90,o?1:0,(function(){o||h.hide()})),o||h.queue((function(t){h.css({left:"",top:""}),s(ze).length||h.detach(),t()})),a=o,n.destroyed&&(n=E)),l}}),l.init()},Te=new Te,s.extend(q.prototype,{init:function(t){var e=t.tooltip;return this.options.on?(t.elements.overlay=Te.elem,e.addClass(je).css("z-index",T.modal_zindex+s(ze).length),t._bind(e,["tooltipshow","tooltiphide"],(function(t,i,o){var n=t.originalEvent;if(t.target===e[0])if(n&&"tooltiphide"===t.type&&/mouse(leave|enter)/.test(n.type)&&s(n.relatedTarget).closest(Te.elem[0]).length)try{t.preventDefault()}catch(r){}else(!n||n&&"tooltipsolo"!==n.type)&&this.toggle(t,"tooltipshow"===t.type,o)}),this._ns,this),t._bind(e,"tooltipfocus",(function(t,i){if(!t.isDefaultPrevented()&&t.target===e[0]){var o=s(ze),n=T.modal_zindex+o.length,r=parseInt(e[0].style.zIndex,10);Te.elem[0].style.zIndex=n-1,o.each((function(){this.style.zIndex>r&&(this.style.zIndex-=1)})),o.filter("."+Z).qtip("blur",t.originalEvent),e.addClass(Z)[0].style.zIndex=n,Te.update(i);try{t.preventDefault()}catch(a){}}}),this._ns,this),t._bind(e,"tooltiphide",(function(t){t.target===e[0]&&s(ze).filter(":visible").not(e).last().qtip("focus",t)}),this._ns,this),i):this},toggle:function(t,e,s){return t&&t.isDefaultPrevented()?this:(Te.toggle(this.qtip,!!e,s),i)},destroy:function(){this.qtip.tooltip.removeClass(je),this.qtip._unbind(this.qtip.tooltip,this._ns),Te.toggle(this.qtip,k),delete this.qtip.elements.overlay}}),Ce=R.modal=function(t){return new q(t,t.options.show.modal)},Ce.sanitize=function(t){t.show&&("object"!=typeof t.show.modal?t.show.modal={on:!!t.show.modal}:t.show.modal.on===i&&(t.show.modal.on=W))},T.modal_zindex=T.zindex-200,Ce.initialize="render",M.modal={"^show.modal.(on|blur)$":function(){this.destroy(),this.init(),this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},s.extend(W,T.defaults,{show:{modal:{on:k,effect:W,blur:W,stealfocus:W,escape:W}}}),R.viewport=function(i,s,o,n,r,a,h){function l(t,e,i,o,n,r,a,h,l){var c=s[n],p=_[t],b=x[t],w=i===V,q=p===n?l:p===r?-l:-l/2,C=b===n?h:b===r?-h:-h/2,T=v[n]+y[n]-(f?0:u[n]),j=T-c,z=c+l-(a===A?g:m)-T,M=q-(_.precedance===t||p===_[e]?C:0)-(b===N?h/2:0);return w?(M=(p===n?1:-1)*q,s[n]+=j>0?j:z>0?-z:0,s[n]=Math.max(-u[n]+y[n],c-M,Math.min(Math.max(-u[n]+y[n]+(a===A?g:m),c+M),s[n],"center"===p?c-q:1e9))):(o*="flipinvert"===i?2:0,j>0&&(p!==n||z>0)?(s[n]-=M+o,d.invert(t,n)):z>0&&(p!==r||j>0)&&(s[n]-=(p===N?-M:M)+o,d.invert(t,r)),v>s[n]&&-s[n]>z&&(s[n]=c,d=_.clone())),s[n]-c}var c,d,p,u,f,g,m,v,y,b=o.target,w=i.elements.tooltip,_=o.my,x=o.at,q=o.adjust,C=q.method.split(" "),T=C[0],j=C[1]||C[0],z=o.viewport,M=o.container,I=i.cache,W={left:0,top:0};return z.jquery&&b[0]!==t&&b[0]!==e.body&&"none"!==q.method?(u=M.offset()||W,f="static"===M.css("position"),c="fixed"===w.css("position"),g=z[0]===t?z.width():z.outerWidth(k),m=z[0]===t?z.height():z.outerHeight(k),v={left:c?0:z.scrollLeft(),top:c?0:z.scrollTop()},y=z.offset()||W,("shift"!==T||"shift"!==j)&&(d=_.clone()),W={left:"none"!==T?l(S,L,T,q.x,F,P,A,n,a):0,top:"none"!==j?l(L,S,j,q.y,D,O,B,r,h):0},d&&I.lastClass!==(p=X+"-pos-"+d.abbrev())&&w.removeClass(i.cache.lastClass).addClass(i.cache.lastClass=p),W):W},R.polys={polygon:function(t,e){var i,s,o,n={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:k},r=0,a=[],h=1,l=1,c=0,d=0;for(r=t.length;r--;)(i=[parseInt(t[--r],10),parseInt(t[r+1],10)])[0]>n.position.right&&(n.position.right=i[0]),i[0]<n.position.left&&(n.position.left=i[0]),i[1]>n.position.bottom&&(n.position.bottom=i[1]),i[1]<n.position.top&&(n.position.top=i[1]),a.push(i);if(s=n.width=Math.abs(n.position.right-n.position.left),o=n.height=Math.abs(n.position.bottom-n.position.top),"c"===e.abbrev())n.position={left:n.position.left+n.width/2,top:n.position.top+n.height/2};else{for(;s>0&&o>0&&h>0&&l>0;)for(s=Math.floor(s/2),o=Math.floor(o/2),e.x===F?h=s:e.x===P?h=n.width-s:h+=Math.floor(s/2),e.y===D?l=o:e.y===O?l=n.height-o:l+=Math.floor(o/2),r=a.length;r--&&!(2>a.length);)c=a[r][0]-n.position.left,d=a[r][1]-n.position.top,(e.x===F&&c>=h||e.x===P&&h>=c||e.x===N&&(h>c||c>n.width-h)||e.y===D&&d>=l||e.y===O&&l>=d||e.y===N&&(l>d||d>n.height-l))&&a.splice(r,1);n.position={left:a[0][0],top:a[0][1]}}return n},rect:function(t,e,i,s){return{width:Math.abs(i-t),height:Math.abs(s-e),position:{left:Math.min(t,i),top:Math.min(e,s)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(t,e,i,s,o){var n=R.polys._angles[o.abbrev()],r=0===n?0:i*Math.cos(n*Math.PI),a=s*Math.sin(n*Math.PI);return{width:2*i-Math.abs(r),height:2*s-Math.abs(a),position:{left:t+r,top:e+a},adjustable:k}},circle:function(t,e,i,s){return R.polys.ellipse(t,e,i,i,s)}},R.svg=function(t,i,o){for(var a,h,l,c,d,p,u,f,g,m=s(e),v=i[0],y=s(v.ownerSVGElement),_=!0;!v.getBBox;)v=v.parentNode;if(!v.getBBox||!v.parentNode)return k;y.attr("width")||y.width()||parseInt(y.css("width"),10),y.attr("height")||y.height()||parseInt(y.css("height"),10);var x=(parseInt(i.css("stroke-width"),10)||0)/2;switch(v.nodeName){case"ellipse":case"circle":f=R.polys.ellipse(v.cx.baseVal.value,v.cy.baseVal.value,(v.rx||v.r).baseVal.value+x,(v.ry||v.r).baseVal.value+x,o);break;case"line":case"polygon":case"polyline":for(f=[],p=-1,c=(u=v.points||[{x:v.x1.baseVal.value,y:v.y1.baseVal.value},{x:v.x2.baseVal.value,y:v.y2.baseVal.value}]).numberOfItems||u.length;c>++p;)d=u.getItem?u.getItem(p):u[p],f.push.apply(f,[d.x,d.y]);f=R.polys.polygon(f,o);break;default:f={width:(f=v.getBoundingClientRect()).width,height:f.height,position:{left:f.left,top:f.top}},_=!1}return g=f.position,y=y[0],_&&(y.createSVGPoint&&(a=v.getScreenCTM(),(u=y.createSVGPoint()).x=g.left,u.y=g.top,h=u.matrixTransform(a),g.left=h.x,g.top=h.y),y.viewBox&&(l=y.viewBox.baseVal)&&l.width&&l.height&&(l.width,l.height)),g.left+=m.scrollLeft(),g.top+=m.scrollTop(),f},R.imagemap=function(t,e,i){e.jquery||(e=s(e));var o,n,r,a,h,l=e.attr("shape").toLowerCase().replace("poly","polygon"),c=s('img[usemap="#'+e.parent("map").attr("name")+'"]'),p=s.trim(e.attr("coords")).replace(/,$/,"").split(",");if(!c.length)return k;if("polygon"===l)a=R.polys.polygon(p,i);else{if(!R.polys[l])return k;for(r=-1,h=p.length,n=[];h>++r;)n.push(parseInt(p[r],10));a=R.polys[l].apply(this,n.concat(i))}return(o=c.offset()).left+=Math.ceil((c.outerWidth(k)-c.width())/2),o.top+=Math.ceil((c.outerHeight(k)-c.height())/2),a.position.left+=o.left,a.position.top+=o.top,a},s.extend(C.prototype,{_scroll:function(){var e=this.qtip.elements.overlay;e&&(e[0].style.top=s(t).scrollTop()+"px")},init:function(i){var o=i.tooltip;1>s("select, object").length&&(this.bgiframe=i.elements.bgiframe=s('<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>').appendTo(o),i._bind(o,"tooltipmove",this.adjustBGIFrame,this._ns,this)),this.redrawContainer=s("<div/>",{id:X+"-rcontainer"}).appendTo(e.body),i.elements.overlay&&i.elements.overlay.addClass("qtipmodal-ie6fix")&&(i._bind(t,["scroll","resize"],this._scroll,this._ns,this),i._bind(o,["tooltipshow"],this._scroll,this._ns,this)),this.redraw()},adjustBGIFrame:function(){var t,e,i=this.qtip.tooltip,s={height:i.outerHeight(k),width:i.outerWidth(k)},o=this.qtip.plugins.tip,n=this.qtip.elements.tip;e={left:-(e=parseInt(i.css("borderLeftWidth"),10)||0),top:-e},o&&n&&(e[(t="x"===o.corner.precedance?[A,F]:[B,D])[1]]-=n[t[0]]()),this.bgiframe.css(e).css(s)},redraw:function(){if(1>this.qtip.rendered||this.drawing)return this;var t,e,i,s,o=this.qtip.tooltip,n=this.qtip.options.style,r=this.qtip.options.position.container;return this.qtip.drawing=1,n.height&&o.css(B,n.height),n.width?o.css(A,n.width):(o.css(A,"").appendTo(this.redrawContainer),1>(e=o.width())%2&&(e+=1),t=((i=o.css("maxWidth")||"")+(s=o.css("minWidth")||"")).indexOf("%")>-1?r.width()/100:0,e=(i=(i.indexOf("%")>-1?t:1)*parseInt(i,10)||e)+(s=(s.indexOf("%")>-1?t:1)*parseInt(s,10)||0)?Math.min(Math.max(e,s),i):e,o.css(A,Math.round(e)).appendTo(r)),this.drawing=0,this},destroy:function(){this.bgiframe&&this.bgiframe.remove(),this.qtip._unbind([t,this.qtip.tooltip],this._ns)}}),Me=R.ie6=function(t){return 6===oe.ie?new C(t):k},Me.initialize="render",M.ie6={"^content|style$":function(){this.redraw()}}}))},"./node_modules/react-dom-confetti/lib/confetti.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react=__webpack_require__("./node_modules/react/index.js"),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(_react),_domConfetti=__webpack_require__("./node_modules/dom-confetti/lib/main.js");var style={position:"relative"},Confetti=function(_Component){function Confetti(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Confetti);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Confetti.__proto__||Object.getPrototypeOf(Confetti)).call(this,props));return _this.setRef=_this.setRef.bind(_this),_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Confetti,_Component),_createClass(Confetti,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){!prevProps.active&&this.props.active&&(0,_domConfetti.confetti)(this.container,this.props.config)}},{key:"setRef",value:function setRef(ref){this.container=ref}},{key:"render",value:function render(){return _react2.default.createElement("div",{className:this.props.className,style,ref:this.setRef})}}]),Confetti}(_react.Component);exports.default=Confetti},"./node_modules/react-focus-lock/dist/es2015/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoFocusInside:()=>es2015_AutoFocusInside,FocusLockUI:()=>Lock,FreeFocusInside:()=>es2015_FreeFocusInside,InFocusGuard:()=>FocusGuard,MoveFocusInside:()=>es2015_MoveFocusInside,default:()=>es2015,useFocusController:()=>useFocusController,useFocusInside:()=>useFocusInside,useFocusScope:()=>useFocusScope,useFocusState:()=>useFocusState});var react=__webpack_require__("./node_modules/react/index.js"),FOCUS_AUTO=(__webpack_require__("./node_modules/prop-types/index.js"),"data-autofocus-inside"),useMergeRef=__webpack_require__("./node_modules/use-callback-ref/dist/es2015/useMergeRef.js"),hiddenGuard={width:"1px",height:"0px",padding:0,overflow:"hidden",position:"fixed",top:"1px",left:"1px"},InFocusGuard=function InFocusGuard(_ref){var _ref$children=_ref.children,children=void 0===_ref$children?null:_ref$children;return react.createElement(react.Fragment,null,react.createElement("div",{key:"guard-first","data-focus-guard":!0,"data-focus-auto-guard":!0,style:hiddenGuard}),children,children&&react.createElement("div",{key:"guard-last","data-focus-guard":!0,"data-focus-auto-guard":!0,style:hiddenGuard}))};InFocusGuard.propTypes={};const FocusGuard=InFocusGuard;var medium=__webpack_require__("./node_modules/use-sidecar/dist/es2015/medium.js"),mediumFocus=(0,medium.C)({},(function(_ref){return{target:_ref.target,currentTarget:_ref.currentTarget}})),mediumBlur=(0,medium.C)(),mediumEffect=(0,medium.C)(),mediumSidecar=(0,medium.f)({async:!0,ssr:"undefined"!=typeof document}),focusScope=(0,react.createContext)(void 0),emptyArray=[],FocusLock=react.forwardRef((function FocusLockUI(props,parentRef){var _extends2,_React$useState=react.useState(),realObserved=_React$useState[0],setObserved=_React$useState[1],observed=react.useRef(),isActive=react.useRef(!1),originalFocusedElement=react.useRef(null),update=react.useState({})[1],children=props.children,_props$disabled=props.disabled,disabled=void 0!==_props$disabled&&_props$disabled,_props$noFocusGuards=props.noFocusGuards,noFocusGuards=void 0!==_props$noFocusGuards&&_props$noFocusGuards,_props$persistentFocu=props.persistentFocus,persistentFocus=void 0!==_props$persistentFocu&&_props$persistentFocu,_props$crossFrame=props.crossFrame,crossFrame=void 0===_props$crossFrame||_props$crossFrame,_props$autoFocus=props.autoFocus,autoFocus=void 0===_props$autoFocus||_props$autoFocus,group=(props.allowTextSelection,props.group),className=props.className,whiteList=props.whiteList,hasPositiveIndices=props.hasPositiveIndices,_props$shards=props.shards,shards=void 0===_props$shards?emptyArray:_props$shards,_props$as=props.as,Container=void 0===_props$as?"div":_props$as,_props$lockProps=props.lockProps,containerProps=void 0===_props$lockProps?{}:_props$lockProps,SideCar=props.sideCar,_props$returnFocus=props.returnFocus,shouldReturnFocus=void 0!==_props$returnFocus&&_props$returnFocus,focusOptions=props.focusOptions,onActivationCallback=props.onActivation,onDeactivationCallback=props.onDeactivation,id=react.useState({})[0],onActivation=react.useCallback((function(_ref){var captureFocusRestore=_ref.captureFocusRestore;if(!originalFocusedElement.current){var _document,activeElement=null==(_document=document)?void 0:_document.activeElement;originalFocusedElement.current=activeElement,activeElement!==document.body&&(originalFocusedElement.current=captureFocusRestore(activeElement))}observed.current&&onActivationCallback&&onActivationCallback(observed.current),isActive.current=!0,update()}),[onActivationCallback]),onDeactivation=react.useCallback((function(){isActive.current=!1,onDeactivationCallback&&onDeactivationCallback(observed.current),update()}),[onDeactivationCallback]),returnFocus=react.useCallback((function(allowDefer){var focusRestore=originalFocusedElement.current;if(focusRestore){var returnFocusTo=("function"==typeof focusRestore?focusRestore():focusRestore)||document.body,howToReturnFocus="function"==typeof shouldReturnFocus?shouldReturnFocus(returnFocusTo):shouldReturnFocus;if(howToReturnFocus){var returnFocusOptions="object"==typeof howToReturnFocus?howToReturnFocus:void 0;originalFocusedElement.current=null,allowDefer?Promise.resolve().then((function(){return returnFocusTo.focus(returnFocusOptions)})):returnFocusTo.focus(returnFocusOptions)}}}),[shouldReturnFocus]),onFocus=react.useCallback((function(event){isActive.current&&mediumFocus.useMedium(event)}),[]),onBlur=mediumBlur.useMedium,setObserveNode=react.useCallback((function(newObserved){observed.current!==newObserved&&(observed.current=newObserved,setObserved(newObserved))}),[]);var lockProps=_extends(((_extends2={})["data-focus-lock-disabled"]=disabled&&"disabled",_extends2["data-focus-lock"]=group,_extends2),containerProps),hasLeadingGuards=!0!==noFocusGuards,hasTailingGuards=hasLeadingGuards&&"tail"!==noFocusGuards,mergedRef=(0,useMergeRef.S)([parentRef,setObserveNode]),focusScopeValue=react.useMemo((function(){return{observed,shards,enabled:!disabled,active:isActive.current}}),[disabled,isActive.current,shards,realObserved]);return react.createElement(react.Fragment,null,hasLeadingGuards&&[react.createElement("div",{key:"guard-first","data-focus-guard":!0,tabIndex:disabled?-1:0,style:hiddenGuard}),hasPositiveIndices?react.createElement("div",{key:"guard-nearest","data-focus-guard":!0,tabIndex:disabled?-1:1,style:hiddenGuard}):null],!disabled&&react.createElement(SideCar,{id,sideCar:mediumSidecar,observed:realObserved,disabled,persistentFocus,crossFrame,autoFocus,whiteList,shards,onActivation,onDeactivation,returnFocus,focusOptions}),react.createElement(Container,_extends({ref:mergedRef},lockProps,{className,onBlur,onFocus}),react.createElement(focusScope.Provider,{value:focusScopeValue},children)),hasTailingGuards&&react.createElement("div",{"data-focus-guard":!0,tabIndex:disabled?-1:0,style:hiddenGuard}))}));FocusLock.propTypes={};const Lock=FocusLock;function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function toPropertyKey(t){var i=function toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:String(i)}const index_es=function withSideEffect(reducePropsToState,handleStateChangeOnClient){return function wrap(WrappedComponent){var state,mountedInstances=[];function emitChange(){state=reducePropsToState(mountedInstances.map((function(instance){return instance.props}))),handleStateChangeOnClient(state)}var SideEffect=function(_PureComponent){function SideEffect(){return _PureComponent.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SideEffect,_PureComponent),SideEffect.peek=function peek(){return state};var _proto=SideEffect.prototype;return _proto.componentDidMount=function componentDidMount(){mountedInstances.push(this),emitChange()},_proto.componentDidUpdate=function componentDidUpdate(){emitChange()},_proto.componentWillUnmount=function componentWillUnmount(){var index=mountedInstances.indexOf(this);mountedInstances.splice(index,1),emitChange()},_proto.render=function render(){return react.createElement(WrappedComponent,this.props)},SideEffect}(react.PureComponent);return function _defineProperty(obj,key,value){return(key=toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SideEffect,"displayName","SideEffect("+function getDisplayName(WrappedComponent){return WrappedComponent.displayName||WrappedComponent.name||"Component"}(WrappedComponent)+")"),SideEffect}};var toArray=function(a){for(var ret=Array(a.length),i=0;i<a.length;++i)ret[i]=a[i];return ret},asArray=function(a){return Array.isArray(a)?a:[a]},getFirst=function(a){return Array.isArray(a)?a[0]:a},getParentNode=function(node){return node.parentNode&&node.parentNode.nodeType===Node.DOCUMENT_FRAGMENT_NODE?node.parentNode.host:node.parentNode},isTopNode=function(node){return node===document||node&&node.nodeType===Node.DOCUMENT_NODE},isVisibleUncached=function(node,checkParent){return!node||isTopNode(node)||!function(node){if(node.nodeType!==Node.ELEMENT_NODE)return!1;var computedStyle=window.getComputedStyle(node,null);return!(!computedStyle||!computedStyle.getPropertyValue||"none"!==computedStyle.getPropertyValue("display")&&"hidden"!==computedStyle.getPropertyValue("visibility"))}(node)&&!function(node){return node.hasAttribute("inert")}(node)&&checkParent(getParentNode(node))},isVisibleCached=function(visibilityCache,node){var cached=visibilityCache.get(node);if(void 0!==cached)return cached;var result=isVisibleUncached(node,isVisibleCached.bind(void 0,visibilityCache));return visibilityCache.set(node,result),result},isAutoFocusAllowedCached=function(cache,node){var cached=cache.get(node);if(void 0!==cached)return cached;var result=function(node,checkParent){return!(node&&!isTopNode(node))||!!isAutoFocusAllowed(node)&&checkParent(getParentNode(node))}(node,isAutoFocusAllowedCached.bind(void 0,cache));return cache.set(node,result),result},getDataset=function(node){return node.dataset},isHTMLInputElement=function(node){return"INPUT"===node.tagName},isRadioElement=function(node){return isHTMLInputElement(node)&&"radio"===node.type},isAutoFocusAllowed=function(node){var attribute=node.getAttribute("data-no-autofocus");return![!0,"true",""].includes(attribute)},isGuard=function(node){var _a;return Boolean(node&&(null===(_a=getDataset(node))||void 0===_a?void 0:_a.focusGuard))},isNotAGuard=function(node){return!isGuard(node)},isDefined=function(x){return Boolean(x)},tabSort=function(a,b){var aTab=Math.max(0,a.tabIndex),bTab=Math.max(0,b.tabIndex),tabDiff=aTab-bTab,indexDiff=a.index-b.index;if(tabDiff){if(!aTab)return 1;if(!bTab)return-1}return tabDiff||indexDiff},orderByTabIndex=function(nodes,filterNegative,keepGuards){return toArray(nodes).map((function(node,index){var tabIndex=function(node){return node.tabIndex<0&&!node.hasAttribute("tabindex")?0:node.tabIndex}(node);return{node,index,tabIndex:keepGuards&&-1===tabIndex?(node.dataset||{}).focusGuard?0:-1:tabIndex}})).filter((function(data){return!filterNegative||data.tabIndex>=0})).sort(tabSort)},queryTabbables=["button:enabled","select:enabled","textarea:enabled","input:enabled","a[href]","area[href]","summary","iframe","object","embed","audio[controls]","video[controls]","[tabindex]","[contenteditable]","[autofocus]"].join(","),queryGuardTabbables="".concat(queryTabbables,", [data-focus-guard]"),getFocusablesWithShadowDom=function(parent,withGuards){return toArray((parent.shadowRoot||parent).children).reduce((function(acc,child){return acc.concat(child.matches(withGuards?queryGuardTabbables:queryTabbables)?[child]:[],getFocusablesWithShadowDom(child))}),[])},getFocusables=function(parents,withGuards){return parents.reduce((function(acc,parent){var _a,focusableWithShadowDom=getFocusablesWithShadowDom(parent,withGuards),focusableWithIframes=(_a=[]).concat.apply(_a,focusableWithShadowDom.map((function(node){return function(parent,withGuards){var _a;return parent instanceof HTMLIFrameElement&&(null===(_a=parent.contentDocument)||void 0===_a?void 0:_a.body)?getFocusables([parent.contentDocument.body],withGuards):[parent]}(node,withGuards)})));return acc.concat(focusableWithIframes,parent.parentNode?toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter((function(node){return node===parent})):[])}),[])},filterFocusable=function(nodes,visibilityCache){return toArray(nodes).filter((function(node){return isVisibleCached(visibilityCache,node)})).filter((function(node){return function(node){return!((isHTMLInputElement(node)||function(node){return"BUTTON"===node.tagName}(node))&&("hidden"===node.type||node.disabled))}(node)}))},filterAutoFocusable=function(nodes,cache){return void 0===cache&&(cache=new Map),toArray(nodes).filter((function(node){return isAutoFocusAllowedCached(cache,node)}))},getTabbableNodes=function(topNodes,visibilityCache,withGuards){return orderByTabIndex(filterFocusable(getFocusables(topNodes,withGuards),visibilityCache),!0,withGuards)},getFocusableNodes=function(topNodes,visibilityCache){return orderByTabIndex(filterFocusable(getFocusables(topNodes),visibilityCache),!1)},parentAutofocusables=function(topNode,visibilityCache){return filterFocusable((parentFocus=topNode.querySelectorAll("[".concat(FOCUS_AUTO,"]")),toArray(parentFocus).map((function(node){return getFocusables([node])})).reduce((function(acc,nodes){return acc.concat(nodes)}),[])),visibilityCache);var parentFocus},contains=function(scope,element){return scope.shadowRoot?contains(scope.shadowRoot,element):!(void 0===Object.getPrototypeOf(scope).contains||!Object.getPrototypeOf(scope).contains.call(scope,element))||toArray(scope.children).some((function(child){var _a;if(child instanceof HTMLIFrameElement){var iframeBody=null===(_a=child.contentDocument)||void 0===_a?void 0:_a.body;return!!iframeBody&&contains(iframeBody,element)}return contains(child,element)}))},getActiveElement=function(inDocument){if(void 0===inDocument&&(inDocument=document),inDocument&&inDocument.activeElement){var activeElement=inDocument.activeElement;return activeElement.shadowRoot?getActiveElement(activeElement.shadowRoot):activeElement instanceof HTMLIFrameElement&&function(cb){try{return cb()}catch(e){return}}((function(){return activeElement.contentWindow.document}))?getActiveElement(activeElement.contentWindow.document):activeElement}},getTopParent=function(node){return node.parentNode?getTopParent(node.parentNode):node},getAllAffectedNodes=function(node){return asArray(node).filter(Boolean).reduce((function(acc,currentNode){var group=currentNode.getAttribute("data-focus-lock");return acc.push.apply(acc,group?function(nodes){for(var contained=new Set,l=nodes.length,i=0;i<l;i+=1)for(var j=i+1;j<l;j+=1){var position=nodes[i].compareDocumentPosition(nodes[j]);(position&Node.DOCUMENT_POSITION_CONTAINED_BY)>0&&contained.add(j),(position&Node.DOCUMENT_POSITION_CONTAINS)>0&&contained.add(i)}return nodes.filter((function(_,index){return!contained.has(index)}))}(toArray(getTopParent(currentNode).querySelectorAll("[".concat("data-focus-lock",'="').concat(group,'"]:not([').concat("data-focus-lock-disabled",'="disabled"])')))):[currentNode]),acc}),[])},focusInside=function(topNode,activeElement){return void 0===activeElement&&(activeElement=getActiveElement(getFirst(topNode).ownerDocument)),!(!activeElement||activeElement.dataset&&activeElement.dataset.focusGuard)&&getAllAffectedNodes(topNode).some((function(node){return contains(node,activeElement)||function(topNode,activeElement){return Boolean(toArray(topNode.querySelectorAll("iframe")).some((function(node){return function(frame,activeElement){return frame===activeElement}(node,activeElement)})))}(node,activeElement)}))},focusOn=function(target,focusOptions){target&&("focus"in target&&target.focus(focusOptions),"contentWindow"in target&&target.contentWindow&&target.contentWindow.focus())},correctNode=function(node,nodes){return isRadioElement(node)&&node.name?function(node,nodes){return nodes.filter(isRadioElement).filter((function(el){return el.name===node.name})).filter((function(el){return el.checked}))[0]||node}(node,nodes):node},pickFirstFocus=function(nodes){return nodes[0]&&nodes.length>1?correctNode(nodes[0],nodes):nodes[0]},pickFocusable=function(nodes,node){return nodes.indexOf(correctNode(node,nodes))},newFocus=function(innerNodes,innerTabbables,outerNodes,activeElement,lastNode){var cnt=innerNodes.length,firstFocus=innerNodes[0],lastFocus=innerNodes[cnt-1],isOnGuard=isGuard(activeElement);if(!(activeElement&&innerNodes.indexOf(activeElement)>=0)){var activeIndex=void 0!==activeElement?outerNodes.indexOf(activeElement):-1,lastIndex=lastNode?outerNodes.indexOf(lastNode):activeIndex,lastNodeInside=lastNode?innerNodes.indexOf(lastNode):-1;if(-1===activeIndex)return-1!==lastNodeInside?lastNodeInside:"NEW_FOCUS";if(-1===lastNodeInside)return"NEW_FOCUS";var nodes,resultSet,indexDiff=activeIndex-lastIndex,firstNodeIndex=outerNodes.indexOf(firstFocus),lastNodeIndex=outerNodes.indexOf(lastFocus),correctedNodes=(nodes=outerNodes,resultSet=new Set,nodes.forEach((function(node){return resultSet.add(correctNode(node,nodes))})),nodes.filter((function(node){return resultSet.has(node)}))),correctedIndexDiff=(void 0!==activeElement?correctedNodes.indexOf(activeElement):-1)-(lastNode?correctedNodes.indexOf(lastNode):activeIndex);if(!indexDiff&&lastNodeInside>=0)return lastNodeInside;if(0===innerTabbables.length)return lastNodeInside;var returnFirstNode=pickFocusable(innerNodes,innerTabbables[0]),returnLastNode=pickFocusable(innerNodes,innerTabbables[innerTabbables.length-1]);return activeIndex<=firstNodeIndex&&isOnGuard&&Math.abs(indexDiff)>1?returnLastNode:activeIndex>=lastNodeIndex&&isOnGuard&&Math.abs(indexDiff)>1?returnFirstNode:indexDiff&&Math.abs(correctedIndexDiff)>1?lastNodeInside:activeIndex<=firstNodeIndex?returnLastNode:activeIndex>lastNodeIndex?returnFirstNode:indexDiff?Math.abs(indexDiff)>1?lastNodeInside:(cnt+lastNodeInside+indexDiff)%cnt:void 0}},pickAutofocus=function(nodesIndexes,orderedNodes,groups){var autoFocusables,nodes=nodesIndexes.map((function(_a){return _a.node})),autoFocusable=filterAutoFocusable(nodes.filter((autoFocusables=groups,function(node){var _a,autofocus=null===(_a=getDataset(node))||void 0===_a?void 0:_a.autofocus;return node.autofocus||void 0!==autofocus&&"false"!==autofocus||autoFocusables.indexOf(node)>=0})));return autoFocusable&&autoFocusable.length?pickFirstFocus(autoFocusable):pickFirstFocus(filterAutoFocusable(orderedNodes))},getParents=function(node,parents){return void 0===parents&&(parents=[]),parents.push(node),node.parentNode&&getParents(node.parentNode.host||node.parentNode,parents),parents},getCommonParent=function(nodeA,nodeB){for(var parentsA=getParents(nodeA),parentsB=getParents(nodeB),i=0;i<parentsA.length;i+=1){var currentParent=parentsA[i];if(parentsB.indexOf(currentParent)>=0)return currentParent}return!1},getTopCommonParent=function(baseActiveElement,leftEntry,rightEntries){var activeElements=asArray(baseActiveElement),leftEntries=asArray(leftEntry),activeElement=activeElements[0],topCommon=!1;return leftEntries.filter(Boolean).forEach((function(entry){topCommon=getCommonParent(topCommon||entry,entry)||topCommon,rightEntries.filter(Boolean).forEach((function(subEntry){var common=getCommonParent(activeElement,subEntry);common&&(topCommon=!topCommon||contains(common,topCommon)?common:getCommonParent(common,topCommon))}))})),topCommon},allParentAutofocusables=function(entries,visibilityCache){return entries.reduce((function(acc,node){return acc.concat(parentAutofocusables(node,visibilityCache))}),[])},focusSolver=function(topNode,lastNode){var activeElement=getActiveElement(asArray(topNode).length>0?document:getFirst(topNode).ownerDocument),entries=getAllAffectedNodes(topNode).filter(isNotAGuard),commonParent=getTopCommonParent(activeElement||topNode,topNode,entries),visibilityCache=new Map,anyFocusable=getFocusableNodes(entries,visibilityCache),innerElements=anyFocusable.filter((function(_a){var node=_a.node;return isNotAGuard(node)}));if(innerElements[0]){var srcNodes,dstNodes,remap,outerNodes=getFocusableNodes([commonParent],visibilityCache).map((function(_a){return _a.node})),orderedInnerElements=(srcNodes=outerNodes,dstNodes=innerElements,remap=new Map,dstNodes.forEach((function(entity){return remap.set(entity.node,entity)})),srcNodes.map((function(node){return remap.get(node)})).filter(isDefined)),innerFocusables=orderedInnerElements.map((function(_a){return _a.node})),innerTabbable=orderedInnerElements.filter((function(_a){return _a.tabIndex>=0})).map((function(_a){return _a.node})),newId=newFocus(innerFocusables,innerTabbable,outerNodes,activeElement,lastNode);if("NEW_FOCUS"===newId){var focusNode=pickAutofocus(anyFocusable,innerTabbable,allParentAutofocusables(entries,visibilityCache))||pickAutofocus(anyFocusable,innerFocusables,allParentAutofocusables(entries,visibilityCache));return focusNode?{node:focusNode}:void console.warn("focus-lock: cannot find any node to move focus into")}return void 0===newId?newId:orderedInnerElements[newId]}},guardCount=0,lockDisabled=!1,moveFocusInside=function(topNode,lastNode,options){void 0===options&&(options={});var focusable=focusSolver(topNode,lastNode);if(!lockDisabled&&focusable){if(guardCount>2)return console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting"),lockDisabled=!0,void setTimeout((function(){lockDisabled=!1}),1);guardCount++,focusOn(focusable.node,options.focusOptions),guardCount--}},moveFocus=function(fromElement,options,cb){void 0===options&&(options={});var newOptions=function(options){return Object.assign({scope:document.body,cycle:!0,onlyTabbable:!0},options)}(options),solution=function(element,scope,useTabbables){if(!element||!scope)return console.error("no element or scope given"),{};var shards=asArray(scope);if(shards.every((function(shard){return!contains(shard,element)})))return console.error("Active element is not contained in the scope"),{};var focusables=useTabbables?getTabbableNodes(shards,new Map):getFocusableNodes(shards,new Map),current=focusables.findIndex((function(_a){return _a.node===element}));return-1!==current?{prev:focusables[current-1],next:focusables[current+1],first:focusables[0],last:focusables[focusables.length-1]}:void 0}(fromElement,newOptions.scope,newOptions.onlyTabbable);if(solution){var target=cb(solution,newOptions.cycle);target&&focusOn(target.node,newOptions.focusOptions)}},pickBoundary=function(scope,options,what){var _a,shards,useTabbables,set,node=(shards=scope,useTabbables=null===(_a=options.onlyTabbable)||void 0===_a||_a,{first:(set=useTabbables?getTabbableNodes(asArray(shards),new Map):getFocusableNodes(asArray(shards),new Map))[0],last:set[set.length-1]})[what];node&&focusOn(node.node,options.focusOptions)};function weakRef(value){if(!value)return null;var w=value?new WeakRef(value):null;return function(){return(null==w?void 0:w.deref())||null}}function deferAction(action){setTimeout(action,1)}var inlineProp=function inlineProp(name,value){var obj={};return obj[name]=value,obj},extractRef=function extractRef(ref){return ref&&"current"in ref?ref.current:ref},isFreeFocus=function isFreeFocus(){return function focusOnBody(){return document&&document.activeElement===document.body}()||function(inDocument){void 0===inDocument&&(inDocument=document);var activeElement=getActiveElement(inDocument);return!!activeElement&&toArray(inDocument.querySelectorAll("[".concat("data-no-focus-lock","]"))).some((function(node){return contains(node,activeElement)}))}()},lastActiveTrap=null,lastActiveFocus=null,lastPortaledElement=null,focusWasOutsideWindow=!1,defaultWhitelist=function defaultWhitelist(){return!0};function autoGuard(startIndex,end,step,allNodes){var lastGuard=null,i=startIndex;do{var item=allNodes[i];if(item.guard)item.node.dataset.focusAutoGuard&&(lastGuard=item);else{if(!item.lockItem)break;if(i!==startIndex)return;lastGuard=null}}while((i+=step)!==end);lastGuard&&(lastGuard.node.tabIndex=0)}var checkInHost=function checkInHost(check,el,boundary){return el&&(el.host===check&&(!el.activeElement||boundary.contains(el.activeElement))||el.parentNode&&checkInHost(check,el.parentNode,boundary))},activateTrap=function activateTrap(){var topNode,entries,commonParent,outerNodes,innerElements,result=!1;if(lastActiveTrap){var _lastActiveTrap=lastActiveTrap,observed=_lastActiveTrap.observed,persistentFocus=_lastActiveTrap.persistentFocus,autoFocus=_lastActiveTrap.autoFocus,shards=_lastActiveTrap.shards,crossFrame=_lastActiveTrap.crossFrame,focusOptions=_lastActiveTrap.focusOptions,workingNode=observed||lastPortaledElement&&lastPortaledElement.portaledElement,activeElement=document&&document.activeElement;if(workingNode){var workingArea=[workingNode].concat(shards.map(extractRef).filter(Boolean));if(activeElement&&!function focusWhitelisted(activeElement){return(lastActiveTrap.whiteList||defaultWhitelist)(activeElement)}(activeElement)||(persistentFocus||function focusWasOutside(crossFrameOption){return crossFrameOption?Boolean(focusWasOutsideWindow):"meanwhile"===focusWasOutsideWindow}(crossFrame)||!isFreeFocus()||!lastActiveFocus&&autoFocus)&&(workingNode&&!(focusInside(workingArea)||activeElement&&function withinHost(activeElement,workingArea){return workingArea.some((function(area){return checkInHost(activeElement,area,area)}))}(activeElement,workingArea)||function focusIsPortaledPair(element){return lastPortaledElement&&lastPortaledElement.portaledElement===element}(activeElement))&&(document&&!lastActiveFocus&&activeElement&&!autoFocus?(activeElement.blur&&activeElement.blur(),document.body.focus()):(result=moveFocusInside(workingArea,lastActiveFocus,{focusOptions}),lastPortaledElement={})),focusWasOutsideWindow=!1,lastActiveFocus=document&&document.activeElement),document&&activeElement!==document.activeElement&&document.querySelector("[data-focus-auto-guard]")){var newActiveElement=document&&document.activeElement,allNodes=(entries=getAllAffectedNodes(topNode=workingArea).filter(isNotAGuard),commonParent=getTopCommonParent(topNode,topNode,entries),outerNodes=orderByTabIndex(getFocusables([commonParent],!0),!0,!0),innerElements=getFocusables(entries,!1),outerNodes.map((function(_a){var node=_a.node;return{node,index:_a.index,lockItem:innerElements.indexOf(node)>=0,guard:isGuard(node)}}))),focusedIndex=allNodes.map((function(_ref){return _ref.node})).indexOf(newActiveElement);focusedIndex>-1&&(allNodes.filter((function(_ref2){var guard=_ref2.guard,node=_ref2.node;return guard&&node.dataset.focusAutoGuard})).forEach((function(_ref3){return _ref3.node.removeAttribute("tabIndex")})),autoGuard(focusedIndex,allNodes.length,1,allNodes),autoGuard(focusedIndex,-1,-1,allNodes))}}}return result},onTrap=function onTrap(event){activateTrap()&&event&&(event.stopPropagation(),event.preventDefault())},onBlur=function onBlur(){return deferAction(activateTrap)},onFocus=function onFocus(event){var source=event.target,currentNode=event.currentTarget;currentNode.contains(source)||function recordPortal(observerNode,portaledElement){lastPortaledElement={observerNode,portaledElement}}(currentNode,source)},onWindowBlur=function onWindowBlur(){focusWasOutsideWindow="just",deferAction((function(){focusWasOutsideWindow="meanwhile"}))};var focusLockAPI={moveFocusInside,focusInside,focusNextElement:function(fromElement,options){void 0===options&&(options={}),moveFocus(fromElement,options,(function(_a,cycle){var next=_a.next,first=_a.first;return next||cycle&&first}))},focusPrevElement:function(fromElement,options){void 0===options&&(options={}),moveFocus(fromElement,options,(function(_a,cycle){var prev=_a.prev,last=_a.last;return prev||cycle&&last}))},focusFirstElement:function(scope,options){void 0===options&&(options={}),pickBoundary(scope,options,"first")},focusLastElement:function(scope,options){void 0===options&&(options={}),pickBoundary(scope,options,"last")},captureFocusRestore:function(targetElement){var location=function(element){if(!element)return null;for(var stack=[],currentElement=element;currentElement&&currentElement!==document.body;)stack.push({current:weakRef(currentElement),parent:weakRef(currentElement.parentElement),left:weakRef(currentElement.previousElementSibling),right:weakRef(currentElement.nextElementSibling)}),currentElement=currentElement.parentElement;return{element:weakRef(element),stack,ownerDocument:element.ownerDocument}}(targetElement);return function(){return function(location){var _a,_b,_c,_d,_e;if(location)for(var stack=location.stack,ownerDocument=location.ownerDocument,visibilityCache=new Map,_i=0,stack_1=stack;_i<stack_1.length;_i++){var line=stack_1[_i],parent_1=null===(_a=line.parent)||void 0===_a?void 0:_a.call(line);if(parent_1&&ownerDocument.contains(parent_1)){for(var left=null===(_b=line.left)||void 0===_b?void 0:_b.call(line),right=null===(_c=line.right)||void 0===_c?void 0:_c.call(line),focusables=getTabbableNodes([parent_1],visibilityCache),aim=null!==(_e=null!==(_d=null==left?void 0:left.nextElementSibling)&&void 0!==_d?_d:right)&&void 0!==_e?_e:left;aim;){for(var _f=0,focusables_1=focusables;_f<focusables_1.length;_f++){var focusable=focusables_1[_f];if(null==aim?void 0:aim.contains(focusable.node))return focusable.node}aim=aim.nextElementSibling}if(focusables.length)return focusables[0].node}}}(location)}}};mediumFocus.assignSyncMedium(onFocus),mediumBlur.assignMedium(onBlur),mediumEffect.assignMedium((function(cb){return cb(focusLockAPI)}));const Trap=index_es((function reducePropsToState(propsList){return propsList.filter((function(_ref5){return!_ref5.disabled}))}),(function handleStateChangeOnClient(traps){var trap=traps.slice(-1)[0];trap&&!lastActiveTrap&&function attachHandler(){document.addEventListener("focusin",onTrap),document.addEventListener("focusout",onBlur),window.addEventListener("blur",onWindowBlur)}();var lastTrap=lastActiveTrap,sameTrap=lastTrap&&trap&&trap.id===lastTrap.id;lastActiveTrap=trap,lastTrap&&!sameTrap&&(lastTrap.onDeactivation(),traps.filter((function(_ref6){return _ref6.id===lastTrap.id})).length||lastTrap.returnFocus(!trap)),trap?(lastActiveFocus=null,sameTrap&&lastTrap.observed===trap.observed||trap.onActivation(focusLockAPI),activateTrap(),deferAction(activateTrap)):(!function detachHandler(){document.removeEventListener("focusin",onTrap),document.removeEventListener("focusout",onBlur),window.removeEventListener("blur",onWindowBlur)}(),lastActiveFocus=null)}))((function FocusWatcher(){return null}));var FocusLockCombination=react.forwardRef((function FocusLockUICombination(props,ref){return react.createElement(Lock,_extends({sideCar:Trap,ref},props))})),_ref=Lock.propTypes||{};_ref.sideCar,function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,["sideCar"]);FocusLockCombination.propTypes={};const Combination=FocusLockCombination;var AutoFocusInside=function AutoFocusInside(_ref){var _ref$disabled=_ref.disabled,disabled=void 0!==_ref$disabled&&_ref$disabled,children=_ref.children,_ref$className=_ref.className,className=void 0===_ref$className?void 0:_ref$className;return react.createElement("div",_extends({},inlineProp(FOCUS_AUTO,!disabled),{className}),children)};AutoFocusInside.propTypes={};const es2015_AutoFocusInside=AutoFocusInside;var useFocusInside=function useFocusInside(observedRef){react.useEffect((function(){var enabled=!0;return mediumEffect.useMedium((function(car){var observed=observedRef&&observedRef.current;enabled&&observed&&(car.focusInside(observed)||car.moveFocusInside(observed,null))})),function(){enabled=!1}}),[observedRef])};function MoveFocusInside(_ref){var _ref$disabled=_ref.disabled,isDisabled=void 0!==_ref$disabled&&_ref$disabled,className=_ref.className,children=_ref.children,ref=react.useRef(null);return useFocusInside(isDisabled?void 0:ref),react.createElement("div",_extends({},inlineProp(FOCUS_AUTO,!isDisabled),{ref,className}),children)}MoveFocusInside.propTypes={};const es2015_MoveFocusInside=MoveFocusInside;var FreeFocusInside=function FreeFocusInside(_ref){var children=_ref.children,className=_ref.className;return react.createElement("div",_extends({},inlineProp("data-no-focus-lock",!0),{className}),children)};FreeFocusInside.propTypes={};const es2015_FreeFocusInside=FreeFocusInside;var collapseRefs=function collapseRefs(shards){return shards.map(extractRef).filter(Boolean)},withMedium=function withMedium(fn){return new Promise((function(resolve){return mediumEffect.useMedium((function(){resolve(fn.apply(void 0,arguments))}))}))},useFocusController=function useFocusController(){for(var _len=arguments.length,shards=new Array(_len),_key=0;_key<_len;_key++)shards[_key]=arguments[_key];if(!shards.length)throw new Error("useFocusController requires at least one target element");var ref=(0,react.useRef)(shards);return ref.current=shards,(0,react.useMemo)((function(){return{autoFocus:function autoFocus(focusOptions){return void 0===focusOptions&&(focusOptions={}),withMedium((function(car){return car.moveFocusInside(collapseRefs(ref.current),null,focusOptions)}))},focusNext:function focusNext(options){return withMedium((function(car){car.moveFocusInside(collapseRefs(ref.current),null),car.focusNextElement(document.activeElement,_extends({scope:collapseRefs(ref.current)},options))}))},focusPrev:function focusPrev(options){return withMedium((function(car){car.moveFocusInside(collapseRefs(ref.current),null),car.focusPrevElement(document.activeElement,_extends({scope:collapseRefs(ref.current)},options))}))},focusFirst:function focusFirst(options){return withMedium((function(car){car.focusFirstElement(collapseRefs(ref.current),options)}))},focusLast:function focusLast(options){return withMedium((function(car){car.focusLastElement(collapseRefs(ref.current),options)}))}}}),[])},useFocusScope=function useFocusScope(){var scope=(0,react.useContext)(focusScope);if(!scope)throw new Error("FocusLock is required to operate with FocusScope");return useFocusController.apply(void 0,[scope.observed].concat(scope.shards))},mainbus=function createNanoEvents(){return{emit:function emit(event){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];for(var i=0,callbacks=this.events[event]||[],length=callbacks.length;i<length;i++)callbacks[i].apply(callbacks,args)},events:{},on:function on(event,cb){var _this$events,_this=this;return((_this$events=this.events)[event]||(_this$events[event]=[])).push(cb),function(){var _this$events$event;_this.events[event]=null==(_this$events$event=_this.events[event])?void 0:_this$events$event.filter((function(i){return cb!==i}))}}}}(),subscribeCounter=0,onFocusIn=function onFocusIn(event){return mainbus.emit("assign",event.target)},onFocusOut=function onFocusOut(event){return mainbus.emit("reset",event.target)},getFocusState=function getFocusState(target,current){return target===current?"self":current.contains(target)?"within":"within-boundary"},useFocusState=function useFocusState(callbacks){void 0===callbacks&&(callbacks={});var _useState=(0,react.useState)(!1),active=_useState[0],setActive=_useState[1],_useState2=(0,react.useState)(""),state=_useState2[0],setState=_useState2[1],ref=(0,react.useRef)(null),focusState=(0,react.useRef)({}),stateTracker=(0,react.useRef)(!1);(0,react.useEffect)((function(){if(ref.current){var isAlreadyFocused=ref.current===document.activeElement||ref.current.contains(document.activeElement);setActive(isAlreadyFocused),setState(getFocusState(document.activeElement,ref.current)),isAlreadyFocused&&callbacks.onFocus&&callbacks.onFocus()}}),[]);var onFocus=(0,react.useCallback)((function(e){focusState.current={focused:!0,state:getFocusState(e.target,e.currentTarget)}}),[]);return function useDocumentFocusSubscribe(){(0,react.useEffect)((function(){return subscribeCounter||(document.addEventListener("focusin",onFocusIn),document.addEventListener("focusout",onFocusOut)),subscribeCounter+=1,function(){(subscribeCounter-=1)||(document.removeEventListener("focusin",onFocusIn),document.removeEventListener("focusout",onFocusOut))}}),[])}(),(0,react.useEffect)((function(){var fout=mainbus.on("reset",(function(){focusState.current={}})),fin=mainbus.on("assign",(function(){var newState=focusState.current.focused||!1;setActive(newState),setState(focusState.current.state||""),newState!==stateTracker.current&&(stateTracker.current=newState,newState?callbacks.onFocus&&callbacks.onFocus():callbacks.onBlur&&callbacks.onBlur())}));return function(){fout(),fin()}}),[]),{active,state,onFocus,ref}};const es2015=Combination},"./node_modules/react-is/cjs/react-is.production.min.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var b="function"==typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"==typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t,exports.AsyncMode=l,exports.ConcurrentMode=m,exports.ContextConsumer=k,exports.ContextProvider=h,exports.Element=c,exports.ForwardRef=n,exports.Fragment=e,exports.Lazy=r,exports.Memo=q,exports.Portal=d,exports.Profiler=g,exports.StrictMode=f,exports.Suspense=p,exports.isValidElementType=function(a){return"string"==typeof a||"function"==typeof a||a===e||a===m||a===g||a===f||a===p||"object"==typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)},exports.isAsyncMode=function(a){return v(a)||t(a)===l},exports.isConcurrentMode=v,exports.isContextConsumer=function(a){return t(a)===k},exports.isContextProvider=function(a){return t(a)===h},exports.isElement=function(a){return"object"==typeof a&&null!==a&&a.$$typeof===c},exports.isForwardRef=function(a){return t(a)===n},exports.isFragment=function(a){return t(a)===e},exports.isLazy=function(a){return t(a)===r},exports.isMemo=function(a){return t(a)===q},exports.isPortal=function(a){return t(a)===d},exports.isProfiler=function(a){return t(a)===g},exports.isStrictMode=function(a){return t(a)===f},exports.isSuspense=function(a){return t(a)===p}},"./node_modules/react-is/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react-is/cjs/react-is.production.min.js")},"./node_modules/recorder-js/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/recorder-js/lib/index.js")},"./node_modules/recorder-js/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_microphone2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/recorder-js/lib/microphone.js"));var defaultConfig={nFrequencyBars:255,onAnalysed:null},Recorder=function(){function Recorder(audioContext){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Recorder),this.config=Object.assign({},defaultConfig,config),this.audioContext=audioContext,this.audioInput=null,this.realAudioInput=null,this.inputPoint=null,this.audioRecorder=null,this.rafID=null,this.analyserContext=null,this.recIndex=0,this.stream=null,this.updateAnalysers=this.updateAnalysers.bind(this)}return _createClass(Recorder,[{key:"init",value:function init(stream){var _this=this;return new Promise((function(resolve){_this.inputPoint=_this.audioContext.createGain(),_this.stream=stream,_this.realAudioInput=_this.audioContext.createMediaStreamSource(stream),_this.audioInput=_this.realAudioInput,_this.audioInput.connect(_this.inputPoint),_this.analyserNode=_this.audioContext.createAnalyser(),_this.analyserNode.fftSize=2048,_this.inputPoint.connect(_this.analyserNode),_this.audioRecorder=new _microphone2.default(_this.inputPoint);var zeroGain=_this.audioContext.createGain();zeroGain.gain.value=0,_this.inputPoint.connect(zeroGain),zeroGain.connect(_this.audioContext.destination),_this.updateAnalysers(),resolve()}))}},{key:"start",value:function start(){var _this2=this;return new Promise((function(resolve,reject){_this2.audioRecorder?(_this2.audioRecorder.clear(),_this2.audioRecorder.record(),resolve(_this2.stream)):reject("Not currently recording")}))}},{key:"stop",value:function stop(){var _this3=this;return new Promise((function(resolve){_this3.audioRecorder.stop(),_this3.audioRecorder.getBuffer((function(buffer){_this3.audioRecorder.exportWAV((function(blob){return resolve({buffer,blob})}))}))}))}},{key:"updateAnalysers",value:function updateAnalysers(){if(this.config.onAnalysed){requestAnimationFrame(this.updateAnalysers);var freqByteData=new Uint8Array(this.analyserNode.frequencyBinCount);this.analyserNode.getByteFrequencyData(freqByteData);for(var data=new Array(255),lastNonZero=0,datum=void 0,idx=0;idx<255;idx+=1)0!==(datum=Math.floor(freqByteData[idx])-Math.floor(freqByteData[idx])%5)&&(lastNonZero=idx),data[idx]=datum;this.config.onAnalysed({data,lineTo:lastNonZero})}}},{key:"setOnAnalysed",value:function setOnAnalysed(handler){this.config.onAnalysed=handler}}]),Recorder}();Recorder.download=function download(blob){var filename=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"audio";_microphone2.default.forceDownload(blob,filename+".wav")},exports.default=Recorder},"./node_modules/recorder-js/lib/microphone.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_inlineWorker2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/inline-worker/index.js"));var defaultConfig={bufferLen:4096,numChannels:2,mimeType:"audio/wav"},Microphone=function(){function Microphone(source,config){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Microphone),this.config=Object.assign({},defaultConfig,config),this.recording=!1,this.callbacks={getBuffer:[],exportWAV:[]},this.context=source.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,this.config.bufferLen,this.config.numChannels,this.config.numChannels),this.node.onaudioprocess=function(e){if(_this.recording){for(var buffer=[],channel=0;channel<_this.config.numChannels;channel++)buffer.push(e.inputBuffer.getChannelData(channel));_this.worker.postMessage({command:"record",buffer})}},source.connect(this.node),this.node.connect(this.context.destination);this.worker=new _inlineWorker2.default((function(){var recLength=0,recBuffers=[],sampleRate=void 0,numChannels=void 0;function initBuffers(){for(var channel=0;channel<numChannels;channel++)recBuffers[channel]=[]}function mergeBuffers(recBuffers,recLength){for(var result=new Float32Array(recLength),offset=0,i=0;i<recBuffers.length;i++)result.set(recBuffers[i],offset),offset+=recBuffers[i].length;return result}function writeString(view,offset,string){for(var i=0;i<string.length;i+=1)view.setUint8(offset+i,string.charCodeAt(i))}this.onmessage=function(e){switch(e.data.command){case"init":!function init(config){sampleRate=config.sampleRate,numChannels=config.numChannels,initBuffers()}(e.data.config);break;case"record":!function record(inputBuffer){for(var channel=0;channel<numChannels;channel++)recBuffers[channel].push(inputBuffer[channel]);recLength+=inputBuffer[0].length}(e.data.buffer);break;case"exportWAV":!function exportWAV(type){for(var buffers=[],channel=0;channel<numChannels;channel++)buffers.push(mergeBuffers(recBuffers[channel],recLength));var interleaved=void 0;interleaved=2===numChannels?function interleave(inputL,inputR){var length=inputL.length+inputR.length,result=new Float32Array(length),index=0,inputIndex=0;for(;index<length;)result[index++]=inputL[inputIndex],result[index++]=inputR[inputIndex],inputIndex++;return result}(buffers[0],buffers[1]):buffers[0];var dataview=function encodeWAV(samples){var buffer=new ArrayBuffer(44+2*samples.length),view=new DataView(buffer);return writeString(view,0,"RIFF"),view.setUint32(4,36+2*samples.length,!0),writeString(view,8,"WAVE"),writeString(view,12,"fmt "),view.setUint32(16,16,!0),view.setUint16(20,1,!0),view.setUint16(22,numChannels,!0),view.setUint32(24,sampleRate,!0),view.setUint32(28,4*sampleRate,!0),view.setUint16(32,2*numChannels,!0),view.setUint16(34,16,!0),writeString(view,36,"data"),view.setUint32(40,2*samples.length,!0),function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?32768*s:32767*s,!0)}}(view,44,samples),view}(interleaved),audioBlob=new Blob([dataview],{type});this.postMessage({command:"exportWAV",data:audioBlob})}(e.data.type);break;case"getBuffer":!function getBuffer(){for(var buffers=[],channel=0;channel<numChannels;channel++)buffers.push(mergeBuffers(recBuffers[channel],recLength));this.postMessage({command:"getBuffer",data:buffers})}();break;case"clear":!function clear(){recLength=0,recBuffers=[],initBuffers()}()}}}),{}),this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.config.numChannels}}),this.worker.onmessage=function(e){var cb=_this.callbacks[e.data.command].pop();"function"==typeof cb&&cb(e.data.data)}}return _createClass(Microphone,[{key:"record",value:function record(){this.recording=!0}},{key:"stop",value:function stop(){this.recording=!1}},{key:"clear",value:function clear(){this.worker.postMessage({command:"clear"})}},{key:"getBuffer",value:function getBuffer(cb){if(!(cb=cb||this.config.callback))throw new Error("Callback not set");this.callbacks.getBuffer.push(cb),this.worker.postMessage({command:"getBuffer"})}},{key:"exportWAV",value:function exportWAV(cb,mimeType){if(mimeType=mimeType||this.config.mimeType,!(cb=cb||this.config.callback))throw new Error("Callback not set");this.callbacks.exportWAV.push(cb),this.worker.postMessage({command:"exportWAV",type:mimeType})}}]),Microphone}();Microphone.forceDownload=function forceDownload(blob,filename){var a=document.createElement("a");a.style="display: none",document.body.appendChild(a);var url=window.URL.createObjectURL(blob);a.href=url,a.download=filename,a.click(),window.URL.revokeObjectURL(url),document.body.removeChild(a)},exports.default=Microphone},"./node_modules/react-loading-skeleton/dist/skeleton.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__),_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__),_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__),_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__),_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__),_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__),_css_loader_dist_cjs_js_skeleton_css__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/react-loading-skeleton/dist/skeleton.css"),options={};options.styleTagTransform=_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default(),options.setAttributes=_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default(),options.insert=_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null,"head"),options.domAPI=_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default(),options.insertStyleElement=_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_skeleton_css__WEBPACK_IMPORTED_MODULE_6__.A,options);const __WEBPACK_DEFAULT_EXPORT__=_css_loader_dist_cjs_js_skeleton_css__WEBPACK_IMPORTED_MODULE_6__.A&&_css_loader_dist_cjs_js_skeleton_css__WEBPACK_IMPORTED_MODULE_6__.A.locals?_css_loader_dist_cjs_js_skeleton_css__WEBPACK_IMPORTED_MODULE_6__.A.locals:void 0},"./node_modules/use-callback-ref/dist/es2015/useMergeRef.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{S:()=>useMergeRefs});var react=__webpack_require__("./node_modules/react/index.js");function assignRef(ref,value){return"function"==typeof ref?ref(value):ref&&(ref.current=value),ref}var currentValues=new WeakMap;function useMergeRefs(refs,defaultValue){var callbackRef=function useCallbackRef(initialValue,callback){var ref=(0,react.useState)((function(){return{value:initialValue,callback,facade:{get current(){return ref.value},set current(value){var last=ref.value;last!==value&&(ref.value=value,ref.callback(value,last))}}}}))[0];return ref.callback=callback,ref.facade}(defaultValue||null,(function(newValue){return refs.forEach((function(ref){return assignRef(ref,newValue)}))}));return react.useLayoutEffect((function(){var oldValue=currentValues.get(callbackRef);if(oldValue){var prevRefs_1=new Set(oldValue),nextRefs_1=new Set(refs),current_1=callbackRef.current;prevRefs_1.forEach((function(ref){nextRefs_1.has(ref)||assignRef(ref,null)})),nextRefs_1.forEach((function(ref){prevRefs_1.has(ref)||assignRef(ref,current_1)}))}currentValues.set(callbackRef,refs)}),[refs]),callbackRef}},"./node_modules/use-sidecar/dist/es2015/medium.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{C:()=>createMedium,f:()=>createSidecarMedium});var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tslib/tslib.es6.js");function ItoI(a){return a}function innerCreateMedium(defaults,middleware){void 0===middleware&&(middleware=ItoI);var buffer=[],assigned=!1;return{read:function(){if(assigned)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return buffer.length?buffer[buffer.length-1]:defaults},useMedium:function(data){var item=middleware(data,assigned);return buffer.push(item),function(){buffer=buffer.filter((function(x){return x!==item}))}},assignSyncMedium:function(cb){for(assigned=!0;buffer.length;){var cbs=buffer;buffer=[],cbs.forEach(cb)}buffer={push:function(x){return cb(x)},filter:function(){return buffer}}},assignMedium:function(cb){assigned=!0;var pendingQueue=[];if(buffer.length){var cbs=buffer;buffer=[],cbs.forEach(cb),pendingQueue=buffer}var executeQueue=function(){var cbs=pendingQueue;pendingQueue=[],cbs.forEach(cb)},cycle=function(){return Promise.resolve().then(executeQueue)};cycle(),buffer={push:function(x){pendingQueue.push(x),cycle()},filter:function(filter){return pendingQueue=pendingQueue.filter(filter),buffer}}}}}function createMedium(defaults,middleware){return void 0===middleware&&(middleware=ItoI),innerCreateMedium(defaults,middleware)}function createSidecarMedium(options){void 0===options&&(options={});var medium=innerCreateMedium(null);return medium.options=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cl)({async:!0,ssr:!1},options),medium}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNSLENBQUMsRUFBRyxHQUFJLEdBR1IsQ0FBQyxFQUFHLElBQUssS0FDVCxDQUFDLEVBQUcsR0FBSSxJQUNSLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBR25CLENBQUMsRUFBRyxHQUFJLElBQ1IsQ0FBQyxFQUFHLEdBQUksSUFDUixDQUFDLEVBQUcsR0FBSSxJQUNSLENBQUMsRUFBRyxHQUFJLElBR1IsQ0FBQyxFQUFHLEdBQUksSUFDUixDQUFDLEVBQUcsR0FBSSxJQUNSLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBR25CLENBQUMsRUFBRyxJQUFLLElBQ1QsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHbkIsQ0FBQyxFQUFHLElBQUssS0FDVCxDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUduQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUduQixDQUFDLEVBQUcsSUFBSyxJQUNULENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBR25CLENBQUMsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLElBQ3JCLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBR25CLENBQUMsRUFBRyxJQUFLLEtBQ1QsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssSUFDckIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxHQUFJLEdBQUksSUFHVCxDQUFDLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxJQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEdBQUksR0FBSSxJQUNULENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ3BCLENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBR3BCLENBQUMsRUFBRyxJQUFLLElBQUssRUFBRyxJQUFLLEtBQ3RCLENBQUMsR0FBSSxHQUFJLElBQ1QsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksSUFHVCxDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEdBQUksSUFBSyxLQUN2QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEdBQUksSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxLQUNWLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBR3JCLENBQUMsR0FBSSxJQUFLLElBQUssRUFBRyxJQUFLLEtBQ3ZCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBR3JCLENBQUMsR0FBSSxJQUFLLElBQUssRUFBRyxJQUFLLEtBQ3ZCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ3BCLENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBR3BCLENBQUMsR0FBSSxJQUFLLElBQUssRUFBRyxJQUFLLEtBQ3ZCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBR3JCLENBQUMsRUFBRyxJQUFLLElBQUssR0FBSSxJQUFLLEtBQ3ZCLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3BCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLElBR3BCLENBQUMsR0FBSSxJQUFLLElBQUssRUFBRyxJQUFLLEtBQ3ZCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3JCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElB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QUFVd3JDLFdBQ3ZDLENBRU8sU0FBU08sb0JBQW9CbDFFLGNBQ2hCLElBQVpBLFVBQXNCQSxRQUFVLENBQUMsR0FDckMsSUFBSW0xRSxPQUFTVCxrQkFBa0IsTUFFL0IsT0FEQVMsT0FBT24xRSxTQUFVLHlDQUFTLENBQUVpM0QsT0FBTyxFQUFNQyxLQUFLLEdBQVNsM0QsU0FDaERtMUUsTUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AY29kZS1kb3Qtb3JnL2pzLWludGVycHJldGVyL2Fjb3JuLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AY29kZS1kb3Qtb3JnL2pzLWludGVycHJldGVyL2ludGVycHJldGVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2ltbWVyc2l2ZS1yZWFkZXItc2RrL2xpYi9pbW1lcnNpdmUtcmVhZGVyLXNkay5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1za2VsZXRvbi9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy92bXNnL3Ztc2cuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRpbmctc2tlbGV0b24vZGlzdC9za2VsZXRvbi5jc3MiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWNvbmZldHRpL2xpYi9tYWluLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvaW5saW5lLXdvcmtlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbG9hZGFibGUtY29tcG9uZW50cy9kaXN0L2xvYWRhYmxlLWNvbXBvbmVudHMuZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliLzhCaXRCeXRlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvQml0QnVmZmVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvRXJyb3JDb3JyZWN0TGV2ZWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi9Qb2x5bm9taWFsLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvUVJDb2RlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvUlNCbG9jay5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL21hdGguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi9tb2RlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcXJjb2RlLnJlYWN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcXRpcDIvanF1ZXJ5LnF0aXAubWluLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20tY29uZmV0dGkvbGliL2NvbmZldHRpLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mb2N1cy1sb2NrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9Gb2N1c0d1YXJkLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L21lZGl1bS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9zY29wZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9Mb2NrLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jbGllbnRzaWRlLWVmZmVjdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNsaWVudHNpZGUtZWZmZWN0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNsaWVudHNpZGUtZWZmZWN0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jbGllbnRzaWRlLWVmZmVjdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNsaWVudHNpZGUtZWZmZWN0L2xpYi9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2xpZW50c2lkZS1lZmZlY3Qvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNsaWVudHNpZGUtZWZmZWN0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy9hcnJheS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy9pcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy90YWJPcmRlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy90YWJVdGlscy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy90YWJiYWJsZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvdXRpbHMvRE9NdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvdXRpbHMvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy9zYWZlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L3V0aWxzL2FsbC1hZmZlY3RlZC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9mb2N1c0luc2lkZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9jb21tYW5kcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy9jb3JyZWN0Rm9jdXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvdXRpbHMvZmlyc3RGb2N1cy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9zb2x2ZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvdXRpbHMvYXV0by1mb2N1cy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS91dGlscy9wYXJlbnRpbmcuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvZm9jdXNTb2x2ZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvbW92ZUZvY3VzSW5zaWRlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L3NpYmxpbmcuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLWxvY2svZGlzdC9lczIwMTUvcmV0dXJuLWZvY3VzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L3V0aWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZvY3VzLWxvY2svZGlzdC9lczIwMTUvVHJhcC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9mb2N1c0lzSGlkZGVuLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L2ZvY3VzYWJsZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZvY3VzLWxvY2svZGlzdC9lczIwMTUvQ29tYmluYXRpb24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZvY3VzLWxvY2svbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZvY3VzLWxvY2svZGlzdC9lczIwMTUvQXV0b0ZvY3VzSW5zaWRlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L01vdmVGb2N1c0luc2lkZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9GcmVlRm9jdXNJbnNpZGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZvY3VzLWxvY2svZGlzdC9lczIwMTUvdXNlLWZvY3VzLXNjb3BlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mb2N1cy1sb2NrL2Rpc3QvZXMyMDE1L3VzZS1mb2N1cy1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9uYW5vLWV2ZW50cy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9VSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVjb3JkZXItanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlY29yZGVyLWpzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVjb3JkZXItanMvbGliL21pY3JvcGhvbmUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRpbmctc2tlbGV0b24vZGlzdC9za2VsZXRvbi5jc3M/MzI5MCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvdXNlLWNhbGxiYWNrLXJlZi9kaXN0L2VzMjAxNS9hc3NpZ25SZWYuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3VzZS1jYWxsYmFjay1yZWYvZGlzdC9lczIwMTUvdXNlTWVyZ2VSZWYuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3VzZS1jYWxsYmFjay1yZWYvZGlzdC9lczIwMTUvdXNlUmVmLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy91c2Utc2lkZWNhci9kaXN0L2VzMjAxNS9tZWRpdW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQWNvcm4gaXMgYSB0aW55LCBmYXN0IEphdmFTY3JpcHQgcGFyc2VyIHdyaXR0ZW4gaW4gSmF2YVNjcmlwdC5cbi8vXG4vLyBBY29ybiB3YXMgd3JpdHRlbiBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCByZWxlYXNlZCB1bmRlciBhbiBNSVRcbi8vIGxpY2Vuc2UuIFRoZSBVbmljb2RlIHJlZ2V4cHMgKGZvciBpZGVudGlmaWVycyBhbmQgd2hpdGVzcGFjZSkgd2VyZVxuLy8gdGFrZW4gZnJvbSBbRXNwcmltYV0oaHR0cDovL2VzcHJpbWEub3JnKSBieSBBcml5YSBIaWRheWF0LlxuLy9cbi8vIEdpdCByZXBvc2l0b3JpZXMgZm9yIEFjb3JuIGFyZSBhdmFpbGFibGUgYXRcbi8vXG4vLyAgICAgaHR0cDovL21hcmlqbmhhdmVyYmVrZS5ubC9naXQvYWNvcm5cbi8vICAgICBodHRwczovL2dpdGh1Yi5jb20vbWFyaWpuaC9hY29ybi5naXRcbi8vXG4vLyBQbGVhc2UgdXNlIHRoZSBbZ2l0aHViIGJ1ZyB0cmFja2VyXVtnaGJ0XSB0byByZXBvcnQgaXNzdWVzLlxuLy9cbi8vIFtnaGJ0XTogaHR0cHM6Ly9naXRodWIuY29tL21hcmlqbmgvYWNvcm4vaXNzdWVzXG4vL1xuLy8gVGhpcyBmaWxlIGRlZmluZXMgdGhlIG1haW4gcGFyc2VyIGludGVyZmFjZS4gVGhlIGxpYnJhcnkgYWxzbyBjb21lc1xuLy8gd2l0aCBhIFtlcnJvci10b2xlcmFudCBwYXJzZXJdW2RhbW1pdF0gYW5kIGFuXG4vLyBbYWJzdHJhY3Qgc3ludGF4IHRyZWUgd2Fsa2VyXVt3YWxrXSwgZGVmaW5lZCBpbiBvdGhlciBmaWxlcy5cbi8vXG4vLyBbZGFtbWl0XTogYWNvcm5fbG9vc2UuanNcbi8vIFt3YWxrXTogdXRpbC93YWxrLmpzXG5cbihmdW5jdGlvbihyb290LCBtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSByZXR1cm4gbW9kKGV4cG9ydHMpOyAvLyBDb21tb25KU1xuICBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgcmV0dXJuIGRlZmluZShbXCJleHBvcnRzXCJdLCBtb2QpOyAvLyBBTURcbiAgbW9kKHJvb3QuYWNvcm4gfHwgKHJvb3QuYWNvcm4gPSB7fSkpOyAvLyBQbGFpbiBicm93c2VyIGVudlxufSkodGhpcywgZnVuY3Rpb24oZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBleHBvcnRzLnZlcnNpb24gPSBcIjAuNC4xXCI7XG5cbiAgLy8gVGhlIG1haW4gZXhwb3J0ZWQgaW50ZXJmYWNlICh1bmRlciBgc2VsZi5hY29ybmAgd2hlbiBpbiB0aGVcbiAgLy8gYnJvd3NlcikgaXMgYSBgcGFyc2VgIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBjb2RlIHN0cmluZyBhbmRcbiAgLy8gcmV0dXJucyBhbiBhYnN0cmFjdCBzeW50YXggdHJlZSBhcyBzcGVjaWZpZWQgYnkgW01vemlsbGEgcGFyc2VyXG4gIC8vIEFQSV1bYXBpXSwgd2l0aCB0aGUgY2F2ZWF0IHRoYXQgdGhlIFNwaWRlck1vbmtleS1zcGVjaWZpYyBzeW50YXhcbiAgLy8gKGBsZXRgLCBgeWllbGRgLCBpbmxpbmUgWE1MLCBldGMpIGlzIG5vdCByZWNvZ25pemVkLlxuICAvL1xuICAvLyBbYXBpXTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9TcGlkZXJNb25rZXkvUGFyc2VyX0FQSVxuXG4gIHZhciBvcHRpb25zLCBpbnB1dCwgaW5wdXRMZW4sIHNvdXJjZUZpbGU7XG5cbiAgZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uKGlucHQsIG9wdHMpIHtcbiAgICBpbnB1dCA9IFN0cmluZyhpbnB0KTsgaW5wdXRMZW4gPSBpbnB1dC5sZW5ndGg7XG4gICAgc2V0T3B0aW9ucyhvcHRzKTtcbiAgICBpbml0VG9rZW5TdGF0ZSgpO1xuICAgIHJldHVybiBwYXJzZVRvcExldmVsKG9wdGlvbnMucHJvZ3JhbSk7XG4gIH07XG5cbiAgLy8gQSBzZWNvbmQgb3B0aW9uYWwgYXJndW1lbnQgY2FuIGJlIGdpdmVuIHRvIGZ1cnRoZXIgY29uZmlndXJlXG4gIC8vIHRoZSBwYXJzZXIgcHJvY2Vzcy4gVGhlc2Ugb3B0aW9ucyBhcmUgcmVjb2duaXplZDpcblxuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBleHBvcnRzLmRlZmF1bHRPcHRpb25zID0ge1xuICAgIC8vIGBlY21hVmVyc2lvbmAgaW5kaWNhdGVzIHRoZSBFQ01BU2NyaXB0IHZlcnNpb24gdG8gcGFyc2UuIE11c3RcbiAgICAvLyBiZSBlaXRoZXIgMyBvciA1LiBUaGlzXG4gICAgLy8gaW5mbHVlbmNlcyBzdXBwb3J0IGZvciBzdHJpY3QgbW9kZSwgdGhlIHNldCBvZiByZXNlcnZlZCB3b3JkcywgYW5kXG4gICAgLy8gc3VwcG9ydCBmb3IgZ2V0dGVycyBhbmQgc2V0dGVyLlxuICAgIGVjbWFWZXJzaW9uOiA1LFxuICAgIC8vIFR1cm4gb24gYHN0cmljdFNlbWljb2xvbnNgIHRvIHByZXZlbnQgdGhlIHBhcnNlciBmcm9tIGRvaW5nXG4gICAgLy8gYXV0b21hdGljIHNlbWljb2xvbiBpbnNlcnRpb24uXG4gICAgc3RyaWN0U2VtaWNvbG9uczogZmFsc2UsXG4gICAgLy8gV2hlbiBgYWxsb3dUcmFpbGluZ0NvbW1hc2AgaXMgZmFsc2UsIHRoZSBwYXJzZXIgd2lsbCBub3QgYWxsb3dcbiAgICAvLyB0cmFpbGluZyBjb21tYXMgaW4gYXJyYXkgYW5kIG9iamVjdCBsaXRlcmFscy5cbiAgICBhbGxvd1RyYWlsaW5nQ29tbWFzOiB0cnVlLFxuICAgIC8vIEJ5IGRlZmF1bHQsIHJlc2VydmVkIHdvcmRzIGFyZSBub3QgZW5mb3JjZWQuIEVuYWJsZVxuICAgIC8vIGBmb3JiaWRSZXNlcnZlZGAgdG8gZW5mb3JjZSB0aGVtLlxuICAgIGZvcmJpZFJlc2VydmVkOiBmYWxzZSxcbiAgICAvLyBXaGVuIGBsb2NhdGlvbnNgIGlzIG9uLCBgbG9jYCBwcm9wZXJ0aWVzIGhvbGRpbmcgb2JqZWN0cyB3aXRoXG4gICAgLy8gYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllcyBpbiBge2xpbmUsIGNvbHVtbn1gIGZvcm0gKHdpdGhcbiAgICAvLyBsaW5lIGJlaW5nIDEtYmFzZWQgYW5kIGNvbHVtbiAwLWJhc2VkKSB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZVxuICAgIC8vIG5vZGVzLlxuICAgIGxvY2F0aW9uczogZmFsc2UsXG4gICAgLy8gQSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGBvbkNvbW1lbnRgIG9wdGlvbiwgd2hpY2ggd2lsbFxuICAgIC8vIGNhdXNlIEFjb3JuIHRvIGNhbGwgdGhhdCBmdW5jdGlvbiB3aXRoIGAoYmxvY2ssIHRleHQsIHN0YXJ0LFxuICAgIC8vIGVuZClgIHBhcmFtZXRlcnMgd2hlbmV2ZXIgYSBjb21tZW50IGlzIHNraXBwZWQuIGBibG9ja2AgaXMgYVxuICAgIC8vIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgaXMgYSBibG9jayAoYC8qICovYCkgY29tbWVudCxcbiAgICAvLyBgdGV4dGAgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIGNvbW1lbnQsIGFuZCBgc3RhcnRgIGFuZCBgZW5kYCBhcmVcbiAgICAvLyBjaGFyYWN0ZXIgb2Zmc2V0cyB0aGF0IGRlbm90ZSB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgY29tbWVudC5cbiAgICAvLyBXaGVuIHRoZSBgbG9jYXRpb25zYCBvcHRpb24gaXMgb24sIHR3byBtb3JlIHBhcmFtZXRlcnMgYXJlXG4gICAgLy8gcGFzc2VkLCB0aGUgZnVsbCBge2xpbmUsIGNvbHVtbn1gIGxvY2F0aW9ucyBvZiB0aGUgc3RhcnQgYW5kXG4gICAgLy8gZW5kIG9mIHRoZSBjb21tZW50cy5cbiAgICBvbkNvbW1lbnQ6IG51bGwsXG4gICAgLy8gTm9kZXMgaGF2ZSB0aGVpciBzdGFydCBhbmQgZW5kIGNoYXJhY3RlcnMgb2Zmc2V0cyByZWNvcmRlZCBpblxuICAgIC8vIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXMgKGRpcmVjdGx5IG9uIHRoZSBub2RlLCByYXRoZXIgdGhhblxuICAgIC8vIHRoZSBgbG9jYCBvYmplY3QsIHdoaWNoIGhvbGRzIGxpbmUvY29sdW1uIGRhdGEuIFRvIGFsc28gYWRkIGFcbiAgICAvLyBbc2VtaS1zdGFuZGFyZGl6ZWRdW3JhbmdlXSBgcmFuZ2VgIHByb3BlcnR5IGhvbGRpbmcgYSBgW3N0YXJ0LFxuICAgIC8vIGVuZF1gIGFycmF5IHdpdGggdGhlIHNhbWUgbnVtYmVycywgc2V0IHRoZSBgcmFuZ2VzYCBvcHRpb24gdG9cbiAgICAvLyBgdHJ1ZWAuXG4gICAgLy9cbiAgICAvLyBbcmFuZ2VdOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NDU2NzhcbiAgICByYW5nZXM6IGZhbHNlLFxuICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIHBhcnNlIG11bHRpcGxlIGZpbGVzIGludG8gYSBzaW5nbGUgQVNUIGJ5XG4gICAgLy8gcGFzc2luZyB0aGUgdHJlZSBwcm9kdWNlZCBieSBwYXJzaW5nIHRoZSBmaXJzdCBmaWxlIGFzXG4gICAgLy8gYHByb2dyYW1gIG9wdGlvbiBpbiBzdWJzZXF1ZW50IHBhcnNlcy4gVGhpcyB3aWxsIGFkZCB0aGVcbiAgICAvLyB0b3BsZXZlbCBmb3JtcyBvZiB0aGUgcGFyc2VkIGZpbGUgdG8gdGhlIGBQcm9ncmFtYCAodG9wKSBub2RlXG4gICAgLy8gb2YgYW4gZXhpc3RpbmcgcGFyc2UgdHJlZS5cbiAgICBwcm9ncmFtOiBudWxsLFxuICAgIC8vIFdoZW4gYGxvY2F0aW9uYCBpcyBvbiwgeW91IGNhbiBwYXNzIHRoaXMgdG8gcmVjb3JkIHRoZSBzb3VyY2VcbiAgICAvLyBmaWxlIGluIGV2ZXJ5IG5vZGUncyBgbG9jYCBvYmplY3QuXG4gICAgc291cmNlRmlsZTogbnVsbCxcbiAgICAvLyBUaGlzIHZhbHVlLCBpZiBnaXZlbiwgaXMgc3RvcmVkIGluIGV2ZXJ5IG5vZGUsIHdoZXRoZXJcbiAgICAvLyBgbG9jYXRpb25gIGlzIG9uIG9yIG9mZi5cbiAgICBkaXJlY3RTb3VyY2VGaWxlOiBudWxsXG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRzKSB7XG4gICAgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgZm9yICh2YXIgb3B0IGluIGRlZmF1bHRPcHRpb25zKSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBvcHQpKVxuICAgICAgb3B0aW9uc1tvcHRdID0gZGVmYXVsdE9wdGlvbnNbb3B0XTtcbiAgICBzb3VyY2VGaWxlID0gb3B0aW9ucy5zb3VyY2VGaWxlIHx8IG51bGw7XG4gIH1cblxuICAvLyBUaGUgYGdldExpbmVJbmZvYCBmdW5jdGlvbiBpcyBtb3N0bHkgdXNlZnVsIHdoZW4gdGhlXG4gIC8vIGBsb2NhdGlvbnNgIG9wdGlvbiBpcyBvZmYgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSBhbmQgeW91XG4gIC8vIHdhbnQgdG8gZmluZCB0aGUgbGluZS9jb2x1bW4gcG9zaXRpb24gZm9yIGEgZ2l2ZW4gY2hhcmFjdGVyXG4gIC8vIG9mZnNldC4gYGlucHV0YCBzaG91bGQgYmUgdGhlIGNvZGUgc3RyaW5nIHRoYXQgdGhlIG9mZnNldCByZWZlcnNcbiAgLy8gaW50by5cblxuICB2YXIgZ2V0TGluZUluZm8gPSBleHBvcnRzLmdldExpbmVJbmZvID0gZnVuY3Rpb24oaW5wdXQsIG9mZnNldCkge1xuICAgIGZvciAodmFyIGxpbmUgPSAxLCBjdXIgPSAwOzspIHtcbiAgICAgIGxpbmVCcmVhay5sYXN0SW5kZXggPSBjdXI7XG4gICAgICB2YXIgbWF0Y2ggPSBsaW5lQnJlYWsuZXhlYyhpbnB1dCk7XG4gICAgICBpZiAobWF0Y2ggJiYgbWF0Y2guaW5kZXggPCBvZmZzZXQpIHtcbiAgICAgICAgKytsaW5lO1xuICAgICAgICBjdXIgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHtsaW5lOiBsaW5lLCBjb2x1bW46IG9mZnNldCAtIGN1cn07XG4gIH07XG5cbiAgLy8gQWNvcm4gaXMgb3JnYW5pemVkIGFzIGEgdG9rZW5pemVyIGFuZCBhIHJlY3Vyc2l2ZS1kZXNjZW50IHBhcnNlci5cbiAgLy8gVGhlIGB0b2tlbml6ZWAgZXhwb3J0IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byB0aGUgdG9rZW5pemVyLlxuICAvLyBCZWNhdXNlIHRoZSB0b2tlbml6ZXIgaXMgb3B0aW1pemVkIGZvciBiZWluZyBlZmZpY2llbnRseSB1c2VkIGJ5XG4gIC8vIHRoZSBBY29ybiBwYXJzZXIgaXRzZWxmLCB0aGlzIGludGVyZmFjZSBpcyBzb21ld2hhdCBjcnVkZSBhbmQgbm90XG4gIC8vIHZlcnkgbW9kdWxhci4gUGVyZm9ybWluZyBhbm90aGVyIHBhcnNlIG9yIGNhbGwgdG8gYHRva2VuaXplYCB3aWxsXG4gIC8vIHJlc2V0IHRoZSBpbnRlcm5hbCBzdGF0ZSwgYW5kIGludmFsaWRhdGUgZXhpc3RpbmcgdG9rZW5pemVycy5cblxuICBleHBvcnRzLnRva2VuaXplID0gZnVuY3Rpb24oaW5wdCwgb3B0cykge1xuICAgIGlucHV0ID0gU3RyaW5nKGlucHQpOyBpbnB1dExlbiA9IGlucHV0Lmxlbmd0aDtcbiAgICBzZXRPcHRpb25zKG9wdHMpO1xuICAgIGluaXRUb2tlblN0YXRlKCk7XG5cbiAgICB2YXIgdCA9IHt9O1xuICAgIGZ1bmN0aW9uIGdldFRva2VuKGZvcmNlUmVnZXhwKSB7XG4gICAgICByZWFkVG9rZW4oZm9yY2VSZWdleHApO1xuICAgICAgdC5zdGFydCA9IHRva1N0YXJ0OyB0LmVuZCA9IHRva0VuZDtcbiAgICAgIHQuc3RhcnRMb2MgPSB0b2tTdGFydExvYzsgdC5lbmRMb2MgPSB0b2tFbmRMb2M7XG4gICAgICB0LnR5cGUgPSB0b2tUeXBlOyB0LnZhbHVlID0gdG9rVmFsO1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIGdldFRva2VuLmp1bXBUbyA9IGZ1bmN0aW9uKHBvcywgcmVBbGxvd2VkKSB7XG4gICAgICB0b2tQb3MgPSBwb3M7XG4gICAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgICAgdG9rQ3VyTGluZSA9IDE7XG4gICAgICAgIHRva0xpbmVTdGFydCA9IGxpbmVCcmVhay5sYXN0SW5kZXggPSAwO1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWsuZXhlYyhpbnB1dCkpICYmIG1hdGNoLmluZGV4IDwgcG9zKSB7XG4gICAgICAgICAgKyt0b2tDdXJMaW5lO1xuICAgICAgICAgIHRva0xpbmVTdGFydCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0b2tSZWdleHBBbGxvd2VkID0gcmVBbGxvd2VkO1xuICAgICAgc2tpcFNwYWNlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0VG9rZW47XG4gIH07XG5cbiAgLy8gU3RhdGUgaXMga2VwdCBpbiAoY2xvc3VyZS0pZ2xvYmFsIHZhcmlhYmxlcy4gV2UgYWxyZWFkeSBzYXcgdGhlXG4gIC8vIGBvcHRpb25zYCwgYGlucHV0YCwgYW5kIGBpbnB1dExlbmAgdmFyaWFibGVzIGFib3ZlLlxuXG4gIC8vIFRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSB0b2tlbml6ZXIgaW4gdGhlIGlucHV0LlxuXG4gIHZhciB0b2tQb3M7XG5cbiAgLy8gVGhlIHN0YXJ0IGFuZCBlbmQgb2Zmc2V0cyBvZiB0aGUgY3VycmVudCB0b2tlbi5cblxuICB2YXIgdG9rU3RhcnQsIHRva0VuZDtcblxuICAvLyBXaGVuIGBvcHRpb25zLmxvY2F0aW9uc2AgaXMgdHJ1ZSwgdGhlc2UgaG9sZCBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgdGhlIHRva2VucyBzdGFydCBhbmQgZW5kIGxpbmUvY29sdW1uIHBhaXJzLlxuXG4gIHZhciB0b2tTdGFydExvYywgdG9rRW5kTG9jO1xuXG4gIC8vIFRoZSB0eXBlIGFuZCB2YWx1ZSBvZiB0aGUgY3VycmVudCB0b2tlbi4gVG9rZW4gdHlwZXMgYXJlIG9iamVjdHMsXG4gIC8vIG5hbWVkIGJ5IHZhcmlhYmxlcyBhZ2FpbnN0IHdoaWNoIHRoZXkgY2FuIGJlIGNvbXBhcmVkLCBhbmRcbiAgLy8gaG9sZGluZyBwcm9wZXJ0aWVzIHRoYXQgZGVzY3JpYmUgdGhlbSAoaW5kaWNhdGluZywgZm9yIGV4YW1wbGUsXG4gIC8vIHRoZSBwcmVjZWRlbmNlIG9mIGFuIGluZml4IG9wZXJhdG9yLCBhbmQgdGhlIG9yaWdpbmFsIG5hbWUgb2YgYVxuICAvLyBrZXl3b3JkIHRva2VuKS4gVGhlIGtpbmQgb2YgdmFsdWUgdGhhdCdzIGhlbGQgaW4gYHRva1ZhbGAgZGVwZW5kc1xuICAvLyBvbiB0aGUgdHlwZSBvZiB0aGUgdG9rZW4uIEZvciBsaXRlcmFscywgaXQgaXMgdGhlIGxpdGVyYWwgdmFsdWUsXG4gIC8vIGZvciBvcGVyYXRvcnMsIHRoZSBvcGVyYXRvciBuYW1lLCBhbmQgc28gb24uXG5cbiAgdmFyIHRva1R5cGUsIHRva1ZhbDtcblxuICAvLyBJbnRlcmFsIHN0YXRlIGZvciB0aGUgdG9rZW5pemVyLiBUbyBkaXN0aW5ndWlzaCBiZXR3ZWVuIGRpdmlzaW9uXG4gIC8vIG9wZXJhdG9ycyBhbmQgcmVndWxhciBleHByZXNzaW9ucywgaXQgcmVtZW1iZXJzIHdoZXRoZXIgdGhlIGxhc3RcbiAgLy8gdG9rZW4gd2FzIG9uZSB0aGF0IGlzIGFsbG93ZWQgdG8gYmUgZm9sbG93ZWQgYnkgYW4gZXhwcmVzc2lvbi5cbiAgLy8gKElmIGl0IGlzLCBhIHNsYXNoIGlzIHByb2JhYmx5IGEgcmVnZXhwLCBpZiBpdCBpc24ndCBpdCdzIGFcbiAgLy8gZGl2aXNpb24gb3BlcmF0b3IuIFNlZSB0aGUgYHBhcnNlU3RhdGVtZW50YCBmdW5jdGlvbiBmb3IgYVxuICAvLyBjYXZlYXQuKVxuXG4gIHZhciB0b2tSZWdleHBBbGxvd2VkO1xuXG4gIC8vIFdoZW4gYG9wdGlvbnMubG9jYXRpb25zYCBpcyB0cnVlLCB0aGVzZSBhcmUgdXNlZCB0byBrZWVwXG4gIC8vIHRyYWNrIG9mIHRoZSBjdXJyZW50IGxpbmUsIGFuZCBrbm93IHdoZW4gYSBuZXcgbGluZSBoYXMgYmVlblxuICAvLyBlbnRlcmVkLlxuXG4gIHZhciB0b2tDdXJMaW5lLCB0b2tMaW5lU3RhcnQ7XG5cbiAgLy8gVGhlc2Ugc3RvcmUgdGhlIHBvc2l0aW9uIG9mIHRoZSBwcmV2aW91cyB0b2tlbiwgd2hpY2ggaXMgdXNlZnVsXG4gIC8vIHdoZW4gZmluaXNoaW5nIGEgbm9kZSBhbmQgYXNzaWduaW5nIGl0cyBgZW5kYCBwb3NpdGlvbi5cblxuICB2YXIgbGFzdFN0YXJ0LCBsYXN0RW5kLCBsYXN0RW5kTG9jO1xuXG4gIC8vIFRoaXMgaXMgdGhlIHBhcnNlcidzIHN0YXRlLiBgaW5GdW5jdGlvbmAgaXMgdXNlZCB0byByZWplY3RcbiAgLy8gYHJldHVybmAgc3RhdGVtZW50cyBvdXRzaWRlIG9mIGZ1bmN0aW9ucywgYGxhYmVsc2AgdG8gdmVyaWZ5IHRoYXRcbiAgLy8gYGJyZWFrYCBhbmQgYGNvbnRpbnVlYCBoYXZlIHNvbWV3aGVyZSB0byBqdW1wIHRvLCBhbmQgYHN0cmljdGBcbiAgLy8gaW5kaWNhdGVzIHdoZXRoZXIgc3RyaWN0IG1vZGUgaXMgb24uXG5cbiAgdmFyIGluRnVuY3Rpb24sIGxhYmVscywgc3RyaWN0O1xuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByYWlzZSBleGNlcHRpb25zIG9uIHBhcnNlIGVycm9ycy4gSXRcbiAgLy8gdGFrZXMgYW4gb2Zmc2V0IGludGVnZXIgKGludG8gdGhlIGN1cnJlbnQgYGlucHV0YCkgdG8gaW5kaWNhdGVcbiAgLy8gdGhlIGxvY2F0aW9uIG9mIHRoZSBlcnJvciwgYXR0YWNoZXMgdGhlIHBvc2l0aW9uIHRvIHRoZSBlbmRcbiAgLy8gb2YgdGhlIGVycm9yIG1lc3NhZ2UsIGFuZCB0aGVuIHJhaXNlcyBhIGBTeW50YXhFcnJvcmAgd2l0aCB0aGF0XG4gIC8vIG1lc3NhZ2UuXG5cbiAgZnVuY3Rpb24gcmFpc2UocG9zLCBtZXNzYWdlKSB7XG4gICAgdmFyIGxvYyA9IGdldExpbmVJbmZvKGlucHV0LCBwb3MpO1xuICAgIG1lc3NhZ2UgKz0gXCIgKFwiICsgbG9jLmxpbmUgKyBcIjpcIiArIGxvYy5jb2x1bW4gKyBcIilcIjtcbiAgICB2YXIgZXJyID0gbmV3IFN5bnRheEVycm9yKG1lc3NhZ2UpO1xuICAgIGVyci5wb3MgPSBwb3M7IGVyci5sb2MgPSBsb2M7IGVyci5yYWlzZWRBdCA9IHRva1BvcztcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICAvLyBSZXVzZWQgZW1wdHkgYXJyYXkgYWRkZWQgZm9yIG5vZGUgZmllbGRzIHRoYXQgYXJlIGFsd2F5cyBlbXB0eS5cblxuICB2YXIgZW1wdHkgPSBbXTtcblxuICAvLyAjIyBUb2tlbiB0eXBlc1xuXG4gIC8vIFRoZSBhc3NpZ25tZW50IG9mIGZpbmUtZ3JhaW5lZCwgaW5mb3JtYXRpb24tY2FycnlpbmcgdHlwZSBvYmplY3RzXG4gIC8vIGFsbG93cyB0aGUgdG9rZW5pemVyIHRvIHN0b3JlIHRoZSBpbmZvcm1hdGlvbiBpdCBoYXMgYWJvdXQgYVxuICAvLyB0b2tlbiBpbiBhIHdheSB0aGF0IGlzIHZlcnkgY2hlYXAgZm9yIHRoZSBwYXJzZXIgdG8gbG9vayB1cC5cblxuICAvLyBBbGwgdG9rZW4gdHlwZSB2YXJpYWJsZXMgc3RhcnQgd2l0aCBhbiB1bmRlcnNjb3JlLCB0byBtYWtlIHRoZW1cbiAgLy8gZWFzeSB0byByZWNvZ25pemUuXG5cbiAgLy8gVGhlc2UgYXJlIHRoZSBnZW5lcmFsIHR5cGVzLiBUaGUgYHR5cGVgIHByb3BlcnR5IGlzIG9ubHkgdXNlZCB0b1xuICAvLyBtYWtlIHRoZW0gcmVjb2duaXplYWJsZSB3aGVuIGRlYnVnZ2luZy5cblxuICB2YXIgX251bSA9IHt0eXBlOiBcIm51bVwifSwgX3JlZ2V4cCA9IHt0eXBlOiBcInJlZ2V4cFwifSwgX3N0cmluZyA9IHt0eXBlOiBcInN0cmluZ1wifTtcbiAgdmFyIF9uYW1lID0ge3R5cGU6IFwibmFtZVwifSwgX2VvZiA9IHt0eXBlOiBcImVvZlwifTtcblxuICAvLyBLZXl3b3JkIHRva2Vucy4gVGhlIGBrZXl3b3JkYCBwcm9wZXJ0eSAoYWxzbyB1c2VkIGluIGtleXdvcmQtbGlrZVxuICAvLyBvcGVyYXRvcnMpIGluZGljYXRlcyB0aGF0IHRoZSB0b2tlbiBvcmlnaW5hdGVkIGZyb20gYW5cbiAgLy8gaWRlbnRpZmllci1saWtlIHdvcmQsIHdoaWNoIGlzIHVzZWQgd2hlbiBwYXJzaW5nIHByb3BlcnR5IG5hbWVzLlxuICAvL1xuICAvLyBUaGUgYGJlZm9yZUV4cHJgIHByb3BlcnR5IGlzIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGJldHdlZW4gcmVndWxhclxuICAvLyBleHByZXNzaW9ucyBhbmQgZGl2aXNpb25zLiBJdCBpcyBzZXQgb24gYWxsIHRva2VuIHR5cGVzIHRoYXQgY2FuXG4gIC8vIGJlIGZvbGxvd2VkIGJ5IGFuIGV4cHJlc3Npb24gKHRodXMsIGEgc2xhc2ggYWZ0ZXIgdGhlbSB3b3VsZCBiZSBhXG4gIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbikuXG4gIC8vXG4gIC8vIGBpc0xvb3BgIG1hcmtzIGEga2V5d29yZCBhcyBzdGFydGluZyBhIGxvb3AsIHdoaWNoIGlzIGltcG9ydGFudFxuICAvLyB0byBrbm93IHdoZW4gcGFyc2luZyBhIGxhYmVsLCBpbiBvcmRlciB0byBhbGxvdyBvciBkaXNhbGxvd1xuICAvLyBjb250aW51ZSBqdW1wcyB0byB0aGF0IGxhYmVsLlxuXG4gIHZhciBfYnJlYWsgPSB7a2V5d29yZDogXCJicmVha1wifSwgX2Nhc2UgPSB7a2V5d29yZDogXCJjYXNlXCIsIGJlZm9yZUV4cHI6IHRydWV9LCBfY2F0Y2ggPSB7a2V5d29yZDogXCJjYXRjaFwifTtcbiAgdmFyIF9jb250aW51ZSA9IHtrZXl3b3JkOiBcImNvbnRpbnVlXCJ9LCBfZGVidWdnZXIgPSB7a2V5d29yZDogXCJkZWJ1Z2dlclwifSwgX2RlZmF1bHQgPSB7a2V5d29yZDogXCJkZWZhdWx0XCJ9O1xuICB2YXIgX2RvID0ge2tleXdvcmQ6IFwiZG9cIiwgaXNMb29wOiB0cnVlfSwgX2Vsc2UgPSB7a2V5d29yZDogXCJlbHNlXCIsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2ZpbmFsbHkgPSB7a2V5d29yZDogXCJmaW5hbGx5XCJ9LCBfZm9yID0ge2tleXdvcmQ6IFwiZm9yXCIsIGlzTG9vcDogdHJ1ZX0sIF9mdW5jdGlvbiA9IHtrZXl3b3JkOiBcImZ1bmN0aW9uXCJ9O1xuICB2YXIgX2lmID0ge2tleXdvcmQ6IFwiaWZcIn0sIF9yZXR1cm4gPSB7a2V5d29yZDogXCJyZXR1cm5cIiwgYmVmb3JlRXhwcjogdHJ1ZX0sIF9zd2l0Y2ggPSB7a2V5d29yZDogXCJzd2l0Y2hcIn07XG4gIHZhciBfdGhyb3cgPSB7a2V5d29yZDogXCJ0aHJvd1wiLCBiZWZvcmVFeHByOiB0cnVlfSwgX3RyeSA9IHtrZXl3b3JkOiBcInRyeVwifSwgX3ZhciA9IHtrZXl3b3JkOiBcInZhclwifTtcbiAgdmFyIF93aGlsZSA9IHtrZXl3b3JkOiBcIndoaWxlXCIsIGlzTG9vcDogdHJ1ZX0sIF93aXRoID0ge2tleXdvcmQ6IFwid2l0aFwifSwgX25ldyA9IHtrZXl3b3JkOiBcIm5ld1wiLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF90aGlzID0ge2tleXdvcmQ6IFwidGhpc1wifTtcblxuICAvLyBUaGUga2V5d29yZHMgdGhhdCBkZW5vdGUgdmFsdWVzLlxuXG4gIHZhciBfbnVsbCA9IHtrZXl3b3JkOiBcIm51bGxcIiwgYXRvbVZhbHVlOiBudWxsfSwgX3RydWUgPSB7a2V5d29yZDogXCJ0cnVlXCIsIGF0b21WYWx1ZTogdHJ1ZX07XG4gIHZhciBfZmFsc2UgPSB7a2V5d29yZDogXCJmYWxzZVwiLCBhdG9tVmFsdWU6IGZhbHNlfTtcblxuICAvLyBTb21lIGtleXdvcmRzIGFyZSB0cmVhdGVkIGFzIHJlZ3VsYXIgb3BlcmF0b3JzLiBgaW5gIHNvbWV0aW1lc1xuICAvLyAod2hlbiBwYXJzaW5nIGBmb3JgKSBuZWVkcyB0byBiZSB0ZXN0ZWQgYWdhaW5zdCBzcGVjaWZpY2FsbHksIHNvXG4gIC8vIHdlIGFzc2lnbiBhIHZhcmlhYmxlIG5hbWUgdG8gaXQgZm9yIHF1aWNrIGNvbXBhcmluZy5cblxuICB2YXIgX2luID0ge2tleXdvcmQ6IFwiaW5cIiwgYmlub3A6IDcsIGJlZm9yZUV4cHI6IHRydWV9O1xuXG4gIC8vIE1hcCBrZXl3b3JkIG5hbWVzIHRvIHRva2VuIHR5cGVzLlxuXG4gIHZhciBrZXl3b3JkVHlwZXMgPSB7XCJicmVha1wiOiBfYnJlYWssIFwiY2FzZVwiOiBfY2FzZSwgXCJjYXRjaFwiOiBfY2F0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjb250aW51ZVwiOiBfY29udGludWUsIFwiZGVidWdnZXJcIjogX2RlYnVnZ2VyLCBcImRlZmF1bHRcIjogX2RlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgXCJkb1wiOiBfZG8sIFwiZWxzZVwiOiBfZWxzZSwgXCJmaW5hbGx5XCI6IF9maW5hbGx5LCBcImZvclwiOiBfZm9yLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIjogX2Z1bmN0aW9uLCBcImlmXCI6IF9pZiwgXCJyZXR1cm5cIjogX3JldHVybiwgXCJzd2l0Y2hcIjogX3N3aXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICBcInRocm93XCI6IF90aHJvdywgXCJ0cnlcIjogX3RyeSwgXCJ2YXJcIjogX3ZhciwgXCJ3aGlsZVwiOiBfd2hpbGUsIFwid2l0aFwiOiBfd2l0aCxcbiAgICAgICAgICAgICAgICAgICAgICBcIm51bGxcIjogX251bGwsIFwidHJ1ZVwiOiBfdHJ1ZSwgXCJmYWxzZVwiOiBfZmFsc2UsIFwibmV3XCI6IF9uZXcsIFwiaW5cIjogX2luLFxuICAgICAgICAgICAgICAgICAgICAgIFwiaW5zdGFuY2VvZlwiOiB7a2V5d29yZDogXCJpbnN0YW5jZW9mXCIsIGJpbm9wOiA3LCBiZWZvcmVFeHByOiB0cnVlfSwgXCJ0aGlzXCI6IF90aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZW9mXCI6IHtrZXl3b3JkOiBcInR5cGVvZlwiLCBwcmVmaXg6IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9LFxuICAgICAgICAgICAgICAgICAgICAgIFwidm9pZFwiOiB7a2V5d29yZDogXCJ2b2lkXCIsIHByZWZpeDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJkZWxldGVcIjoge2tleXdvcmQ6IFwiZGVsZXRlXCIsIHByZWZpeDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX19O1xuXG4gIC8vIFB1bmN0dWF0aW9uIHRva2VuIHR5cGVzLiBBZ2FpbiwgdGhlIGB0eXBlYCBwcm9wZXJ0eSBpcyBwdXJlbHkgZm9yIGRlYnVnZ2luZy5cblxuICB2YXIgX2JyYWNrZXRMID0ge3R5cGU6IFwiW1wiLCBiZWZvcmVFeHByOiB0cnVlfSwgX2JyYWNrZXRSID0ge3R5cGU6IFwiXVwifSwgX2JyYWNlTCA9IHt0eXBlOiBcIntcIiwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfYnJhY2VSID0ge3R5cGU6IFwifVwifSwgX3BhcmVuTCA9IHt0eXBlOiBcIihcIiwgYmVmb3JlRXhwcjogdHJ1ZX0sIF9wYXJlblIgPSB7dHlwZTogXCIpXCJ9O1xuICB2YXIgX2NvbW1hID0ge3R5cGU6IFwiLFwiLCBiZWZvcmVFeHByOiB0cnVlfSwgX3NlbWkgPSB7dHlwZTogXCI7XCIsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2NvbG9uID0ge3R5cGU6IFwiOlwiLCBiZWZvcmVFeHByOiB0cnVlfSwgX2RvdCA9IHt0eXBlOiBcIi5cIn0sIF9xdWVzdGlvbiA9IHt0eXBlOiBcIj9cIiwgYmVmb3JlRXhwcjogdHJ1ZX07XG5cbiAgLy8gT3BlcmF0b3JzLiBUaGVzZSBjYXJyeSBzZXZlcmFsIGtpbmRzIG9mIHByb3BlcnRpZXMgdG8gaGVscCB0aGVcbiAgLy8gcGFyc2VyIHVzZSB0aGVtIHByb3Blcmx5ICh0aGUgcHJlc2VuY2Ugb2YgdGhlc2UgcHJvcGVydGllcyBpc1xuICAvLyB3aGF0IGNhdGVnb3JpemVzIHRoZW0gYXMgb3BlcmF0b3JzKS5cbiAgLy9cbiAgLy8gYGJpbm9wYCwgd2hlbiBwcmVzZW50LCBzcGVjaWZpZXMgdGhhdCB0aGlzIG9wZXJhdG9yIGlzIGEgYmluYXJ5XG4gIC8vIG9wZXJhdG9yLCBhbmQgd2lsbCByZWZlciB0byBpdHMgcHJlY2VkZW5jZS5cbiAgLy9cbiAgLy8gYHByZWZpeGAgYW5kIGBwb3N0Zml4YCBtYXJrIHRoZSBvcGVyYXRvciBhcyBhIHByZWZpeCBvciBwb3N0Zml4XG4gIC8vIHVuYXJ5IG9wZXJhdG9yLiBgaXNVcGRhdGVgIHNwZWNpZmllcyB0aGF0IHRoZSBub2RlIHByb2R1Y2VkIGJ5XG4gIC8vIHRoZSBvcGVyYXRvciBzaG91bGQgYmUgb2YgdHlwZSBVcGRhdGVFeHByZXNzaW9uIHJhdGhlciB0aGFuXG4gIC8vIHNpbXBseSBVbmFyeUV4cHJlc3Npb24gKGArK2AgYW5kIGAtLWApLlxuICAvL1xuICAvLyBgaXNBc3NpZ25gIG1hcmtzIGFsbCBvZiBgPWAsIGArPWAsIGAtPWAgZXRjZXRlcmEsIHdoaWNoIGFjdCBhc1xuICAvLyBiaW5hcnkgb3BlcmF0b3JzIHdpdGggYSB2ZXJ5IGxvdyBwcmVjZWRlbmNlLCB0aGF0IHNob3VsZCByZXN1bHRcbiAgLy8gaW4gQXNzaWdubWVudEV4cHJlc3Npb24gbm9kZXMuXG5cbiAgdmFyIF9zbGFzaCA9IHtiaW5vcDogMTAsIGJlZm9yZUV4cHI6IHRydWV9LCBfZXEgPSB7aXNBc3NpZ246IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2Fzc2lnbiA9IHtpc0Fzc2lnbjogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfaW5jRGVjID0ge3Bvc3RmaXg6IHRydWUsIHByZWZpeDogdHJ1ZSwgaXNVcGRhdGU6IHRydWV9LCBfcHJlZml4ID0ge3ByZWZpeDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfbG9naWNhbE9SID0ge2Jpbm9wOiAxLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9sb2dpY2FsQU5EID0ge2Jpbm9wOiAyLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9iaXR3aXNlT1IgPSB7Ymlub3A6IDMsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2JpdHdpc2VYT1IgPSB7Ymlub3A6IDQsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2JpdHdpc2VBTkQgPSB7Ymlub3A6IDUsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2VxdWFsaXR5ID0ge2Jpbm9wOiA2LCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9yZWxhdGlvbmFsID0ge2Jpbm9wOiA3LCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9iaXRTaGlmdCA9IHtiaW5vcDogOCwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfcGx1c01pbiA9IHtiaW5vcDogOSwgcHJlZml4OiB0cnVlLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9tdWx0aXBseU1vZHVsbyA9IHtiaW5vcDogMTAsIGJlZm9yZUV4cHI6IHRydWV9O1xuXG4gIC8vIFByb3ZpZGUgYWNjZXNzIHRvIHRoZSB0b2tlbiB0eXBlcyBmb3IgZXh0ZXJuYWwgdXNlcnMgb2YgdGhlXG4gIC8vIHRva2VuaXplci5cblxuICBleHBvcnRzLnRva1R5cGVzID0ge2JyYWNrZXRMOiBfYnJhY2tldEwsIGJyYWNrZXRSOiBfYnJhY2tldFIsIGJyYWNlTDogX2JyYWNlTCwgYnJhY2VSOiBfYnJhY2VSLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcmVuTDogX3BhcmVuTCwgcGFyZW5SOiBfcGFyZW5SLCBjb21tYTogX2NvbW1hLCBzZW1pOiBfc2VtaSwgY29sb246IF9jb2xvbixcbiAgICAgICAgICAgICAgICAgICAgICBkb3Q6IF9kb3QsIHF1ZXN0aW9uOiBfcXVlc3Rpb24sIHNsYXNoOiBfc2xhc2gsIGVxOiBfZXEsIG5hbWU6IF9uYW1lLCBlb2Y6IF9lb2YsXG4gICAgICAgICAgICAgICAgICAgICAgbnVtOiBfbnVtLCByZWdleHA6IF9yZWdleHAsIHN0cmluZzogX3N0cmluZ307XG4gIGZvciAodmFyIGt3IGluIGtleXdvcmRUeXBlcykgZXhwb3J0cy50b2tUeXBlc1tcIl9cIiArIGt3XSA9IGtleXdvcmRUeXBlc1trd107XG5cbiAgLy8gVGhpcyBpcyBhIHRyaWNrIHRha2VuIGZyb20gRXNwcmltYS4gSXQgdHVybnMgb3V0IHRoYXQsIG9uXG4gIC8vIG5vbi1DaHJvbWUgYnJvd3NlcnMsIHRvIGNoZWNrIHdoZXRoZXIgYSBzdHJpbmcgaXMgaW4gYSBzZXQsIGFcbiAgLy8gcHJlZGljYXRlIGNvbnRhaW5pbmcgYSBiaWcgdWdseSBgc3dpdGNoYCBzdGF0ZW1lbnQgaXMgZmFzdGVyIHRoYW5cbiAgLy8gYSByZWd1bGFyIGV4cHJlc3Npb24sIGFuZCBvbiBDaHJvbWUgdGhlIHR3byBhcmUgYWJvdXQgb24gcGFyLlxuICAvLyBUaGlzIGZ1bmN0aW9uIHVzZXMgYGV2YWxgIChub24tbGV4aWNhbCkgdG8gcHJvZHVjZSBzdWNoIGFcbiAgLy8gcHJlZGljYXRlIGZyb20gYSBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5nIG9mIHdvcmRzLlxuICAvL1xuICAvLyBJdCBzdGFydHMgYnkgc29ydGluZyB0aGUgd29yZHMgYnkgbGVuZ3RoLlxuXG4gIGZ1bmN0aW9uIG1ha2VQcmVkaWNhdGUod29yZHMpIHtcbiAgICB3b3JkcyA9IHdvcmRzLnNwbGl0KFwiIFwiKTtcbiAgICB2YXIgZiA9IFwiXCIsIGNhdHMgPSBbXTtcbiAgICBvdXQ6IGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2F0cy5sZW5ndGg7ICsrailcbiAgICAgICAgaWYgKGNhdHNbal1bMF0ubGVuZ3RoID09IHdvcmRzW2ldLmxlbmd0aCkge1xuICAgICAgICAgIGNhdHNbal0ucHVzaCh3b3Jkc1tpXSk7XG4gICAgICAgICAgY29udGludWUgb3V0O1xuICAgICAgICB9XG4gICAgICBjYXRzLnB1c2goW3dvcmRzW2ldXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBhcmVUbyhhcnIpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoID09IDEpIHJldHVybiBmICs9IFwicmV0dXJuIHN0ciA9PT0gXCIgKyBKU09OLnN0cmluZ2lmeShhcnJbMF0pICsgXCI7XCI7XG4gICAgICBmICs9IFwic3dpdGNoKHN0cil7XCI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkgZiArPSBcImNhc2UgXCIgKyBKU09OLnN0cmluZ2lmeShhcnJbaV0pICsgXCI6XCI7XG4gICAgICBmICs9IFwicmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlO1wiO1xuICAgIH1cblxuICAgIC8vIFdoZW4gdGhlcmUgYXJlIG1vcmUgdGhhbiB0aHJlZSBsZW5ndGggY2F0ZWdvcmllcywgYW4gb3V0ZXJcbiAgICAvLyBzd2l0Y2ggZmlyc3QgZGlzcGF0Y2hlcyBvbiB0aGUgbGVuZ3RocywgdG8gc2F2ZSBvbiBjb21wYXJpc29ucy5cblxuICAgIGlmIChjYXRzLmxlbmd0aCA+IDMpIHtcbiAgICAgIGNhdHMuc29ydChmdW5jdGlvbihhLCBiKSB7cmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7fSk7XG4gICAgICBmICs9IFwic3dpdGNoKHN0ci5sZW5ndGgpe1wiO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjYXQgPSBjYXRzW2ldO1xuICAgICAgICBmICs9IFwiY2FzZSBcIiArIGNhdFswXS5sZW5ndGggKyBcIjpcIjtcbiAgICAgICAgY29tcGFyZVRvKGNhdCk7XG4gICAgICB9XG4gICAgICBmICs9IFwifVwiO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBzaW1wbHkgZ2VuZXJhdGUgYSBmbGF0IGBzd2l0Y2hgIHN0YXRlbWVudC5cblxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wYXJlVG8od29yZHMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwic3RyXCIsIGYpO1xuICB9XG5cbiAgLy8gVGhlIEVDTUFTY3JpcHQgMyByZXNlcnZlZCB3b3JkIGxpc3QuXG5cbiAgdmFyIGlzUmVzZXJ2ZWRXb3JkMyA9IG1ha2VQcmVkaWNhdGUoXCJhYnN0cmFjdCBib29sZWFuIGJ5dGUgY2hhciBjbGFzcyBkb3VibGUgZW51bSBleHBvcnQgZXh0ZW5kcyBmaW5hbCBmbG9hdCBnb3RvIGltcGxlbWVudHMgaW1wb3J0IGludCBpbnRlcmZhY2UgbG9uZyBuYXRpdmUgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc2hvcnQgc3RhdGljIHN1cGVyIHN5bmNocm9uaXplZCB0aHJvd3MgdHJhbnNpZW50IHZvbGF0aWxlXCIpO1xuXG4gIC8vIEVDTUFTY3JpcHQgNSByZXNlcnZlZCB3b3Jkcy5cblxuICB2YXIgaXNSZXNlcnZlZFdvcmQ1ID0gbWFrZVByZWRpY2F0ZShcImNsYXNzIGVudW0gZXh0ZW5kcyBzdXBlciBjb25zdCBleHBvcnQgaW1wb3J0XCIpO1xuXG4gIC8vIFRoZSBhZGRpdGlvbmFsIHJlc2VydmVkIHdvcmRzIGluIHN0cmljdCBtb2RlLlxuXG4gIHZhciBpc1N0cmljdFJlc2VydmVkV29yZCA9IG1ha2VQcmVkaWNhdGUoXCJpbXBsZW1lbnRzIGludGVyZmFjZSBsZXQgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc3RhdGljIHlpZWxkXCIpO1xuXG4gIC8vIFRoZSBmb3JiaWRkZW4gdmFyaWFibGUgbmFtZXMgaW4gc3RyaWN0IG1vZGUuXG5cbiAgdmFyIGlzU3RyaWN0QmFkSWRXb3JkID0gbWFrZVByZWRpY2F0ZShcImV2YWwgYXJndW1lbnRzXCIpO1xuXG4gIC8vIEFuZCB0aGUga2V5d29yZHMuXG5cbiAgdmFyIGlzS2V5d29yZCA9IG1ha2VQcmVkaWNhdGUoXCJicmVhayBjYXNlIGNhdGNoIGNvbnRpbnVlIGRlYnVnZ2VyIGRlZmF1bHQgZG8gZWxzZSBmaW5hbGx5IGZvciBmdW5jdGlvbiBpZiByZXR1cm4gc3dpdGNoIHRocm93IHRyeSB2YXIgd2hpbGUgd2l0aCBudWxsIHRydWUgZmFsc2UgaW5zdGFuY2VvZiB0eXBlb2Ygdm9pZCBkZWxldGUgbmV3IGluIHRoaXNcIik7XG5cbiAgLy8gIyMgQ2hhcmFjdGVyIGNhdGVnb3JpZXNcblxuICAvLyBCaWcgdWdseSByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgbWF0Y2ggY2hhcmFjdGVycyBpbiB0aGVcbiAgLy8gd2hpdGVzcGFjZSwgaWRlbnRpZmllciwgYW5kIGlkZW50aWZpZXItc3RhcnQgY2F0ZWdvcmllcy4gVGhlc2VcbiAgLy8gYXJlIG9ubHkgYXBwbGllZCB3aGVuIGEgY2hhcmFjdGVyIGlzIGZvdW5kIHRvIGFjdHVhbGx5IGhhdmUgYVxuICAvLyBjb2RlIHBvaW50IGFib3ZlIDEyOC5cblxuICB2YXIgbm9uQVNDSUl3aGl0ZXNwYWNlID0gL1tcXHUxNjgwXFx1MTgwZVxcdTIwMDAtXFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdWZlZmZdLztcbiAgdmFyIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgPSBcIlxceGFhXFx4YjVcXHhiYVxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmMxXFx1MDJjNi1cXHUwMmQxXFx1MDJlMC1cXHUwMmU0XFx1MDJlY1xcdTAyZWVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN2EtXFx1MDM3ZFxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTI3XFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1ZDAtXFx1MDVlYVxcdTA1ZjAtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOGEwXFx1MDhhMi1cXHUwOGFjXFx1MDkwNC1cXHUwOTM5XFx1MDkzZFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5NzdcXHUwOTc5LVxcdTA5N2ZcXHUwOTg1LVxcdTA5OGNcXHUwOThmXFx1MDk5MFxcdTA5OTMtXFx1MDlhOFxcdTA5YWEtXFx1MDliMFxcdTA5YjJcXHUwOWI2LVxcdTA5YjlcXHUwOWJkXFx1MDljZVxcdTA5ZGNcXHUwOWRkXFx1MDlkZi1cXHUwOWUxXFx1MDlmMFxcdTA5ZjFcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYjA1LVxcdTBiMGNcXHUwYjBmXFx1MGIxMFxcdTBiMTMtXFx1MGIyOFxcdTBiMmEtXFx1MGIzMFxcdTBiMzJcXHUwYjMzXFx1MGIzNS1cXHUwYjM5XFx1MGIzZFxcdTBiNWNcXHUwYjVkXFx1MGI1Zi1cXHUwYjYxXFx1MGI3MVxcdTBiODNcXHUwYjg1LVxcdTBiOGFcXHUwYjhlLVxcdTBiOTBcXHUwYjkyLVxcdTBiOTVcXHUwYjk5XFx1MGI5YVxcdTBiOWNcXHUwYjllXFx1MGI5ZlxcdTBiYTNcXHUwYmE0XFx1MGJhOC1cXHUwYmFhXFx1MGJhZS1cXHUwYmI5XFx1MGJkMFxcdTBjMDUtXFx1MGMwY1xcdTBjMGUtXFx1MGMxMFxcdTBjMTItXFx1MGMyOFxcdTBjMmEtXFx1MGMzM1xcdTBjMzUtXFx1MGMzOVxcdTBjM2RcXHUwYzU4XFx1MGM1OVxcdTBjNjBcXHUwYzYxXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNS1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDYwXFx1MGQ2MVxcdTBkN2EtXFx1MGQ3ZlxcdTBkODUtXFx1MGQ5NlxcdTBkOWEtXFx1MGRiMVxcdTBkYjMtXFx1MGRiYlxcdTBkYmRcXHUwZGMwLVxcdTBkYzZcXHUwZTAxLVxcdTBlMzBcXHUwZTMyXFx1MGUzM1xcdTBlNDAtXFx1MGU0NlxcdTBlODFcXHUwZTgyXFx1MGU4NFxcdTBlODdcXHUwZTg4XFx1MGU4YVxcdTBlOGRcXHUwZTk0LVxcdTBlOTdcXHUwZTk5LVxcdTBlOWZcXHUwZWExLVxcdTBlYTNcXHUwZWE1XFx1MGVhN1xcdTBlYWFcXHUwZWFiXFx1MGVhZC1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjBcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWNcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWMxLVxcdTE5YzdcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjFcXHUxY2Y1XFx1MWNmNlxcdTFkMDAtXFx1MWRiZlxcdTFlMDAtXFx1MWYxNVxcdTFmMTgtXFx1MWYxZFxcdTFmMjAtXFx1MWY0NVxcdTFmNDgtXFx1MWY0ZFxcdTFmNTAtXFx1MWY1N1xcdTFmNTlcXHUxZjViXFx1MWY1ZFxcdTFmNWYtXFx1MWY3ZFxcdTFmODAtXFx1MWZiNFxcdTFmYjYtXFx1MWZiY1xcdTFmYmVcXHUxZmMyLVxcdTFmYzRcXHUxZmM2LVxcdTFmY2NcXHUxZmQwLVxcdTFmZDNcXHUxZmQ2LVxcdTFmZGJcXHUxZmUwLVxcdTFmZWNcXHUxZmYyLVxcdTFmZjRcXHUxZmY2LVxcdTFmZmNcXHUyMDcxXFx1MjA3ZlxcdTIwOTAtXFx1MjA5Y1xcdTIxMDJcXHUyMTA3XFx1MjEwYS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExZFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMmEtXFx1MjEyZFxcdTIxMmYtXFx1MjEzOVxcdTIxM2MtXFx1MjEzZlxcdTIxNDUtXFx1MjE0OVxcdTIxNGVcXHUyMTYwLVxcdTIxODhcXHUyYzAwLVxcdTJjMmVcXHUyYzMwLVxcdTJjNWVcXHUyYzYwLVxcdTJjZTRcXHUyY2ViLVxcdTJjZWVcXHUyY2YyXFx1MmNmM1xcdTJkMDAtXFx1MmQyNVxcdTJkMjdcXHUyZDJkXFx1MmQzMC1cXHUyZDY3XFx1MmQ2ZlxcdTJkODAtXFx1MmQ5NlxcdTJkYTAtXFx1MmRhNlxcdTJkYTgtXFx1MmRhZVxcdTJkYjAtXFx1MmRiNlxcdTJkYjgtXFx1MmRiZVxcdTJkYzAtXFx1MmRjNlxcdTJkYzgtXFx1MmRjZVxcdTJkZDAtXFx1MmRkNlxcdTJkZDgtXFx1MmRkZVxcdTJlMmZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDlkLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmRcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmFcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYjVcXHU0ZTAwLVxcdTlmY2NcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5N1xcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTc4ZVxcdWE3OTAtXFx1YTc5M1xcdWE3YTAtXFx1YTdhYVxcdWE3ZjgtXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOTBhLVxcdWE5MjVcXHVhOTMwLVxcdWE5NDZcXHVhOTYwLVxcdWE5N2NcXHVhOTg0LVxcdWE5YjJcXHVhOWNmXFx1YWEwMC1cXHVhYTI4XFx1YWE0MC1cXHVhYTQyXFx1YWE0NC1cXHVhYTRiXFx1YWE2MC1cXHVhYTc2XFx1YWE3YVxcdWFhODAtXFx1YWFhZlxcdWFhYjFcXHVhYWI1XFx1YWFiNlxcdWFhYjktXFx1YWFiZFxcdWFhYzBcXHVhYWMyXFx1YWFkYi1cXHVhYWRkXFx1YWFlMC1cXHVhYWVhXFx1YWFmMi1cXHVhYWY0XFx1YWIwMS1cXHVhYjA2XFx1YWIwOS1cXHVhYjBlXFx1YWIxMS1cXHVhYjE2XFx1YWIyMC1cXHVhYjI2XFx1YWIyOC1cXHVhYjJlXFx1YWJjMC1cXHVhYmUyXFx1YWMwMC1cXHVkN2EzXFx1ZDdiMC1cXHVkN2M2XFx1ZDdjYi1cXHVkN2ZiXFx1ZjkwMC1cXHVmYTZkXFx1ZmE3MC1cXHVmYWQ5XFx1ZmIwMC1cXHVmYjA2XFx1ZmIxMy1cXHVmYjE3XFx1ZmIxZFxcdWZiMWYtXFx1ZmIyOFxcdWZiMmEtXFx1ZmIzNlxcdWZiMzgtXFx1ZmIzY1xcdWZiM2VcXHVmYjQwXFx1ZmI0MVxcdWZiNDNcXHVmYjQ0XFx1ZmI0Ni1cXHVmYmIxXFx1ZmJkMy1cXHVmZDNkXFx1ZmQ1MC1cXHVmZDhmXFx1ZmQ5Mi1cXHVmZGM3XFx1ZmRmMC1cXHVmZGZiXFx1ZmU3MC1cXHVmZTc0XFx1ZmU3Ni1cXHVmZWZjXFx1ZmYyMS1cXHVmZjNhXFx1ZmY0MS1cXHVmZjVhXFx1ZmY2Ni1cXHVmZmJlXFx1ZmZjMi1cXHVmZmM3XFx1ZmZjYS1cXHVmZmNmXFx1ZmZkMi1cXHVmZmQ3XFx1ZmZkYS1cXHVmZmRjXCI7XG4gIHZhciBub25BU0NJSWlkZW50aWZpZXJDaGFycyA9IFwiXFx1MDMwMC1cXHUwMzZmXFx1MDQ4My1cXHUwNDg3XFx1MDU5MS1cXHUwNWJkXFx1MDViZlxcdTA1YzFcXHUwNWMyXFx1MDVjNFxcdTA1YzVcXHUwNWM3XFx1MDYxMC1cXHUwNjFhXFx1MDYyMC1cXHUwNjQ5XFx1MDY3Mi1cXHUwNmQzXFx1MDZlNy1cXHUwNmU4XFx1MDZmYi1cXHUwNmZjXFx1MDczMC1cXHUwNzRhXFx1MDgwMC1cXHUwODE0XFx1MDgxYi1cXHUwODIzXFx1MDgyNS1cXHUwODI3XFx1MDgyOS1cXHUwODJkXFx1MDg0MC1cXHUwODU3XFx1MDhlNC1cXHUwOGZlXFx1MDkwMC1cXHUwOTAzXFx1MDkzYS1cXHUwOTNjXFx1MDkzZS1cXHUwOTRmXFx1MDk1MS1cXHUwOTU3XFx1MDk2Mi1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk4MS1cXHUwOTgzXFx1MDliY1xcdTA5YmUtXFx1MDljNFxcdTA5YzdcXHUwOWM4XFx1MDlkN1xcdTA5ZGYtXFx1MDllMFxcdTBhMDEtXFx1MGEwM1xcdTBhM2NcXHUwYTNlLVxcdTBhNDJcXHUwYTQ3XFx1MGE0OFxcdTBhNGItXFx1MGE0ZFxcdTBhNTFcXHUwYTY2LVxcdTBhNzFcXHUwYTc1XFx1MGE4MS1cXHUwYTgzXFx1MGFiY1xcdTBhYmUtXFx1MGFjNVxcdTBhYzctXFx1MGFjOVxcdTBhY2ItXFx1MGFjZFxcdTBhZTItXFx1MGFlM1xcdTBhZTYtXFx1MGFlZlxcdTBiMDEtXFx1MGIwM1xcdTBiM2NcXHUwYjNlLVxcdTBiNDRcXHUwYjQ3XFx1MGI0OFxcdTBiNGItXFx1MGI0ZFxcdTBiNTZcXHUwYjU3XFx1MGI1Zi1cXHUwYjYwXFx1MGI2Ni1cXHUwYjZmXFx1MGI4MlxcdTBiYmUtXFx1MGJjMlxcdTBiYzYtXFx1MGJjOFxcdTBiY2EtXFx1MGJjZFxcdTBiZDdcXHUwYmU2LVxcdTBiZWZcXHUwYzAxLVxcdTBjMDNcXHUwYzQ2LVxcdTBjNDhcXHUwYzRhLVxcdTBjNGRcXHUwYzU1XFx1MGM1NlxcdTBjNjItXFx1MGM2M1xcdTBjNjYtXFx1MGM2ZlxcdTBjODJcXHUwYzgzXFx1MGNiY1xcdTBjYmUtXFx1MGNjNFxcdTBjYzYtXFx1MGNjOFxcdTBjY2EtXFx1MGNjZFxcdTBjZDVcXHUwY2Q2XFx1MGNlMi1cXHUwY2UzXFx1MGNlNi1cXHUwY2VmXFx1MGQwMlxcdTBkMDNcXHUwZDQ2LVxcdTBkNDhcXHUwZDU3XFx1MGQ2Mi1cXHUwZDYzXFx1MGQ2Ni1cXHUwZDZmXFx1MGQ4MlxcdTBkODNcXHUwZGNhXFx1MGRjZi1cXHUwZGQ0XFx1MGRkNlxcdTBkZDgtXFx1MGRkZlxcdTBkZjJcXHUwZGYzXFx1MGUzNC1cXHUwZTNhXFx1MGU0MC1cXHUwZTQ1XFx1MGU1MC1cXHUwZTU5XFx1MGViNC1cXHUwZWI5XFx1MGVjOC1cXHUwZWNkXFx1MGVkMC1cXHUwZWQ5XFx1MGYxOFxcdTBmMTlcXHUwZjIwLVxcdTBmMjlcXHUwZjM1XFx1MGYzN1xcdTBmMzlcXHUwZjQxLVxcdTBmNDdcXHUwZjcxLVxcdTBmODRcXHUwZjg2LVxcdTBmODdcXHUwZjhkLVxcdTBmOTdcXHUwZjk5LVxcdTBmYmNcXHUwZmM2XFx1MTAwMC1cXHUxMDI5XFx1MTA0MC1cXHUxMDQ5XFx1MTA2Ny1cXHUxMDZkXFx1MTA3MS1cXHUxMDc0XFx1MTA4Mi1cXHUxMDhkXFx1MTA4Zi1cXHUxMDlkXFx1MTM1ZC1cXHUxMzVmXFx1MTcwZS1cXHUxNzEwXFx1MTcyMC1cXHUxNzMwXFx1MTc0MC1cXHUxNzUwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3YjJcXHUxN2RkXFx1MTdlMC1cXHUxN2U5XFx1MTgwYi1cXHUxODBkXFx1MTgxMC1cXHUxODE5XFx1MTkyMC1cXHUxOTJiXFx1MTkzMC1cXHUxOTNiXFx1MTk1MS1cXHUxOTZkXFx1MTliMC1cXHUxOWMwXFx1MTljOC1cXHUxOWM5XFx1MTlkMC1cXHUxOWQ5XFx1MWEwMC1cXHUxYTE1XFx1MWEyMC1cXHUxYTUzXFx1MWE2MC1cXHUxYTdjXFx1MWE3Zi1cXHUxYTg5XFx1MWE5MC1cXHUxYTk5XFx1MWI0Ni1cXHUxYjRiXFx1MWI1MC1cXHUxYjU5XFx1MWI2Yi1cXHUxYjczXFx1MWJiMC1cXHUxYmI5XFx1MWJlNi1cXHUxYmYzXFx1MWMwMC1cXHUxYzIyXFx1MWM0MC1cXHUxYzQ5XFx1MWM1Yi1cXHUxYzdkXFx1MWNkMC1cXHUxY2QyXFx1MWQwMC1cXHUxZGJlXFx1MWUwMS1cXHUxZjE1XFx1MjAwY1xcdTIwMGRcXHUyMDNmXFx1MjA0MFxcdTIwNTRcXHUyMGQwLVxcdTIwZGNcXHUyMGUxXFx1MjBlNS1cXHUyMGYwXFx1MmQ4MS1cXHUyZDk2XFx1MmRlMC1cXHUyZGZmXFx1MzAyMS1cXHUzMDI4XFx1MzA5OVxcdTMwOWFcXHVhNjQwLVxcdWE2NmRcXHVhNjc0LVxcdWE2N2RcXHVhNjlmXFx1YTZmMC1cXHVhNmYxXFx1YTdmOC1cXHVhODAwXFx1YTgwNlxcdWE4MGJcXHVhODIzLVxcdWE4MjdcXHVhODgwLVxcdWE4ODFcXHVhOGI0LVxcdWE4YzRcXHVhOGQwLVxcdWE4ZDlcXHVhOGYzLVxcdWE4ZjdcXHVhOTAwLVxcdWE5MDlcXHVhOTI2LVxcdWE5MmRcXHVhOTMwLVxcdWE5NDVcXHVhOTgwLVxcdWE5ODNcXHVhOWIzLVxcdWE5YzBcXHVhYTAwLVxcdWFhMjdcXHVhYTQwLVxcdWFhNDFcXHVhYTRjLVxcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTdiXFx1YWFlMC1cXHVhYWU5XFx1YWFmMi1cXHVhYWYzXFx1YWJjMC1cXHVhYmUxXFx1YWJlY1xcdWFiZWRcXHVhYmYwLVxcdWFiZjlcXHVmYjIwLVxcdWZiMjhcXHVmZTAwLVxcdWZlMGZcXHVmZTIwLVxcdWZlMjZcXHVmZTMzXFx1ZmUzNFxcdWZlNGQtXFx1ZmU0ZlxcdWZmMTAtXFx1ZmYxOVxcdWZmM2ZcIjtcbiAgdmFyIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0ID0gbmV3IFJlZ0V4cChcIltcIiArIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgKyBcIl1cIik7XG4gIHZhciBub25BU0NJSWlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIpO1xuXG4gIC8vIFdoZXRoZXIgYSBzaW5nbGUgY2hhcmFjdGVyIGRlbm90ZXMgYSBuZXdsaW5lLlxuXG4gIHZhciBuZXdsaW5lID0gL1tcXG5cXHJcXHUyMDI4XFx1MjAyOV0vO1xuXG4gIC8vIE1hdGNoZXMgYSB3aG9sZSBsaW5lIGJyZWFrICh3aGVyZSBDUkxGIGlzIGNvbnNpZGVyZWQgYSBzaW5nbGVcbiAgLy8gbGluZSBicmVhaykuIFVzZWQgdG8gY291bnQgbGluZXMuXG5cbiAgdmFyIGxpbmVCcmVhayA9IC9cXHJcXG58W1xcblxcclxcdTIwMjhcXHUyMDI5XS9nO1xuXG4gIC8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGNoYXJhY3RlciBjb2RlIHN0YXJ0cyBhbiBpZGVudGlmaWVyLlxuXG4gIHZhciBpc0lkZW50aWZpZXJTdGFydCA9IGV4cG9ydHMuaXNJZGVudGlmaWVyU3RhcnQgPSBmdW5jdGlvbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPCA2NSkgcmV0dXJuIGNvZGUgPT09IDM2O1xuICAgIGlmIChjb2RlIDwgOTEpIHJldHVybiB0cnVlO1xuICAgIGlmIChjb2RlIDwgOTcpIHJldHVybiBjb2RlID09PSA5NTtcbiAgICBpZiAoY29kZSA8IDEyMylyZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSk7XG4gIH07XG5cbiAgLy8gVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIHBhcnQgb2YgYW4gaWRlbnRpZmllci5cblxuICB2YXIgaXNJZGVudGlmaWVyQ2hhciA9IGV4cG9ydHMuaXNJZGVudGlmaWVyQ2hhciA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICBpZiAoY29kZSA8IDQ4KSByZXR1cm4gY29kZSA9PT0gMzY7XG4gICAgaWYgKGNvZGUgPCA1OCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGNvZGUgPCA2NSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChjb2RlIDwgOTEpIHJldHVybiB0cnVlO1xuICAgIGlmIChjb2RlIDwgOTcpIHJldHVybiBjb2RlID09PSA5NTtcbiAgICBpZiAoY29kZSA8IDEyMylyZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllci50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpO1xuICB9O1xuXG4gIC8vICMjIFRva2VuaXplclxuXG4gIC8vIFRoZXNlIGFyZSB1c2VkIHdoZW4gYG9wdGlvbnMubG9jYXRpb25zYCBpcyBvbiwgZm9yIHRoZVxuICAvLyBgdG9rU3RhcnRMb2NgIGFuZCBgdG9rRW5kTG9jYCBwcm9wZXJ0aWVzLlxuXG4gIGZ1bmN0aW9uIGxpbmVfbG9jX3QoKSB7XG4gICAgdGhpcy5saW5lID0gdG9rQ3VyTGluZTtcbiAgICB0aGlzLmNvbHVtbiA9IHRva1BvcyAtIHRva0xpbmVTdGFydDtcbiAgfVxuXG4gIC8vIFJlc2V0IHRoZSB0b2tlbiBzdGF0ZS4gVXNlZCBhdCB0aGUgc3RhcnQgb2YgYSBwYXJzZS5cblxuICBmdW5jdGlvbiBpbml0VG9rZW5TdGF0ZSgpIHtcbiAgICB0b2tDdXJMaW5lID0gMTtcbiAgICB0b2tQb3MgPSB0b2tMaW5lU3RhcnQgPSAwO1xuICAgIHRva1JlZ2V4cEFsbG93ZWQgPSB0cnVlO1xuICAgIHNraXBTcGFjZSgpO1xuICB9XG5cbiAgLy8gQ2FsbGVkIGF0IHRoZSBlbmQgb2YgZXZlcnkgdG9rZW4uIFNldHMgYHRva0VuZGAsIGB0b2tWYWxgLCBhbmRcbiAgLy8gYHRva1JlZ2V4cEFsbG93ZWRgLCBhbmQgc2tpcHMgdGhlIHNwYWNlIGFmdGVyIHRoZSB0b2tlbiwgc28gdGhhdFxuICAvLyB0aGUgbmV4dCBvbmUncyBgdG9rU3RhcnRgIHdpbGwgcG9pbnQgYXQgdGhlIHJpZ2h0IHBvc2l0aW9uLlxuXG4gIGZ1bmN0aW9uIGZpbmlzaFRva2VuKHR5cGUsIHZhbCkge1xuICAgIHRva0VuZCA9IHRva1BvcztcbiAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHRva0VuZExvYyA9IG5ldyBsaW5lX2xvY190O1xuICAgIHRva1R5cGUgPSB0eXBlO1xuICAgIHNraXBTcGFjZSgpO1xuICAgIHRva1ZhbCA9IHZhbDtcbiAgICB0b2tSZWdleHBBbGxvd2VkID0gdHlwZS5iZWZvcmVFeHByO1xuICB9XG5cbiAgZnVuY3Rpb24gc2tpcEJsb2NrQ29tbWVudCgpIHtcbiAgICB2YXIgc3RhcnRMb2MgPSBvcHRpb25zLm9uQ29tbWVudCAmJiBvcHRpb25zLmxvY2F0aW9ucyAmJiBuZXcgbGluZV9sb2NfdDtcbiAgICB2YXIgc3RhcnQgPSB0b2tQb3MsIGVuZCA9IGlucHV0LmluZGV4T2YoXCIqL1wiLCB0b2tQb3MgKz0gMik7XG4gICAgaWYgKGVuZCA9PT0gLTEpIHJhaXNlKHRva1BvcyAtIDIsIFwiVW50ZXJtaW5hdGVkIGNvbW1lbnRcIik7XG4gICAgdG9rUG9zID0gZW5kICsgMjtcbiAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgIGxpbmVCcmVhay5sYXN0SW5kZXggPSBzdGFydDtcbiAgICAgIHZhciBtYXRjaDtcbiAgICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWsuZXhlYyhpbnB1dCkpICYmIG1hdGNoLmluZGV4IDwgdG9rUG9zKSB7XG4gICAgICAgICsrdG9rQ3VyTGluZTtcbiAgICAgICAgdG9rTGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm9uQ29tbWVudClcbiAgICAgIG9wdGlvbnMub25Db21tZW50KHRydWUsIGlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgZW5kKSwgc3RhcnQsIHRva1BvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9jLCBvcHRpb25zLmxvY2F0aW9ucyAmJiBuZXcgbGluZV9sb2NfdCk7XG4gIH1cblxuICBmdW5jdGlvbiBza2lwTGluZUNvbW1lbnQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdG9rUG9zO1xuICAgIHZhciBzdGFydExvYyA9IG9wdGlvbnMub25Db21tZW50ICYmIG9wdGlvbnMubG9jYXRpb25zICYmIG5ldyBsaW5lX2xvY190O1xuICAgIHZhciBjaCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKz0yKTtcbiAgICB3aGlsZSAodG9rUG9zIDwgaW5wdXRMZW4gJiYgY2ggIT09IDEwICYmIGNoICE9PSAxMyAmJiBjaCAhPT0gODIzMiAmJiBjaCAhPT0gODIzMykge1xuICAgICAgKyt0b2tQb3M7XG4gICAgICBjaCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMub25Db21tZW50KVxuICAgICAgb3B0aW9ucy5vbkNvbW1lbnQoZmFsc2UsIGlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgdG9rUG9zKSwgc3RhcnQsIHRva1BvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9jLCBvcHRpb25zLmxvY2F0aW9ucyAmJiBuZXcgbGluZV9sb2NfdCk7XG4gIH1cblxuICAvLyBDYWxsZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYXJzZSBhbmQgYWZ0ZXIgZXZlcnkgdG9rZW4uIFNraXBzXG4gIC8vIHdoaXRlc3BhY2UgYW5kIGNvbW1lbnRzLCBhbmQuXG5cbiAgZnVuY3Rpb24gc2tpcFNwYWNlKCkge1xuICAgIHdoaWxlICh0b2tQb3MgPCBpbnB1dExlbikge1xuICAgICAgdmFyIGNoID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpO1xuICAgICAgaWYgKGNoID09PSAzMikgeyAvLyAnICdcbiAgICAgICAgKyt0b2tQb3M7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSAxMykge1xuICAgICAgICArK3Rva1BvcztcbiAgICAgICAgdmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1Bvcyk7XG4gICAgICAgIGlmIChuZXh0ID09PSAxMCkge1xuICAgICAgICAgICsrdG9rUG9zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgICAgICsrdG9rQ3VyTGluZTtcbiAgICAgICAgICB0b2tMaW5lU3RhcnQgPSB0b2tQb3M7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDEwIHx8IGNoID09PSA4MjMyIHx8IGNoID09PSA4MjMzKSB7XG4gICAgICAgICsrdG9rUG9zO1xuICAgICAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgICAgICArK3Rva0N1ckxpbmU7XG4gICAgICAgICAgdG9rTGluZVN0YXJ0ID0gdG9rUG9zO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoID4gOCAmJiBjaCA8IDE0KSB7XG4gICAgICAgICsrdG9rUG9zO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gNDcpIHsgLy8gJy8nXG4gICAgICAgIHZhciBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAxKTtcbiAgICAgICAgaWYgKG5leHQgPT09IDQyKSB7IC8vICcqJ1xuICAgICAgICAgIHNraXBCbG9ja0NvbW1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChuZXh0ID09PSA0NykgeyAvLyAnLydcbiAgICAgICAgICBza2lwTGluZUNvbW1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gMTYwKSB7IC8vICdcXHhhMCdcbiAgICAgICAgKyt0b2tQb3M7XG4gICAgICB9IGVsc2UgaWYgKGNoID49IDU3NjAgJiYgbm9uQVNDSUl3aGl0ZXNwYWNlLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpKSB7XG4gICAgICAgICsrdG9rUG9zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gIyMjIFRva2VuIHJlYWRpbmdcblxuICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0byBmZXRjaCB0aGUgbmV4dCB0b2tlbi4gSXRcbiAgLy8gaXMgc29tZXdoYXQgb2JzY3VyZSwgYmVjYXVzZSBpdCB3b3JrcyBpbiBjaGFyYWN0ZXIgY29kZXMgcmF0aGVyXG4gIC8vIHRoYW4gY2hhcmFjdGVycywgYW5kIGJlY2F1c2Ugb3BlcmF0b3IgcGFyc2luZyBoYXMgYmVlbiBpbmxpbmVkXG4gIC8vIGludG8gaXQuXG4gIC8vXG4gIC8vIEFsbCBpbiB0aGUgbmFtZSBvZiBzcGVlZC5cbiAgLy9cbiAgLy8gVGhlIGBmb3JjZVJlZ2V4cGAgcGFyYW1ldGVyIGlzIHVzZWQgaW4gdGhlIG9uZSBjYXNlIHdoZXJlIHRoZVxuICAvLyBgdG9rUmVnZXhwQWxsb3dlZGAgdHJpY2sgZG9lcyBub3Qgd29yay4gU2VlIGBwYXJzZVN0YXRlbWVudGAuXG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX2RvdCgpIHtcbiAgICB2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG4gICAgaWYgKG5leHQgPj0gNDggJiYgbmV4dCA8PSA1NykgcmV0dXJuIHJlYWROdW1iZXIodHJ1ZSk7XG4gICAgKyt0b2tQb3M7XG4gICAgcmV0dXJuIGZpbmlzaFRva2VuKF9kb3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX3NsYXNoKCkgeyAvLyAnLydcbiAgICB2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG4gICAgaWYgKHRva1JlZ2V4cEFsbG93ZWQpIHsrK3Rva1BvczsgcmV0dXJuIHJlYWRSZWdleHAoKTt9XG4gICAgaWYgKG5leHQgPT09IDYxKSByZXR1cm4gZmluaXNoT3AoX2Fzc2lnbiwgMik7XG4gICAgcmV0dXJuIGZpbmlzaE9wKF9zbGFzaCwgMSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVG9rZW5fbXVsdF9tb2R1bG8oKSB7IC8vICclKidcbiAgICB2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG4gICAgaWYgKG5leHQgPT09IDYxKSByZXR1cm4gZmluaXNoT3AoX2Fzc2lnbiwgMik7XG4gICAgcmV0dXJuIGZpbmlzaE9wKF9tdWx0aXBseU1vZHVsbywgMSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVG9rZW5fcGlwZV9hbXAoY29kZSkgeyAvLyAnfCYnXG4gICAgdmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSBjb2RlKSByZXR1cm4gZmluaXNoT3AoY29kZSA9PT0gMTI0ID8gX2xvZ2ljYWxPUiA6IF9sb2dpY2FsQU5ELCAyKTtcbiAgICBpZiAobmV4dCA9PT0gNjEpIHJldHVybiBmaW5pc2hPcChfYXNzaWduLCAyKTtcbiAgICByZXR1cm4gZmluaXNoT3AoY29kZSA9PT0gMTI0ID8gX2JpdHdpc2VPUiA6IF9iaXR3aXNlQU5ELCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRUb2tlbl9jYXJldCgpIHsgLy8gJ14nXG4gICAgdmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9hc3NpZ24sIDIpO1xuICAgIHJldHVybiBmaW5pc2hPcChfYml0d2lzZVhPUiwgMSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVG9rZW5fcGx1c19taW4oY29kZSkgeyAvLyAnKy0nXG4gICAgdmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSBjb2RlKSB7XG4gICAgICBpZiAobmV4dCA9PSA0NSAmJiBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDIpID09IDYyICYmXG4gICAgICAgICAgbmV3bGluZS50ZXN0KGlucHV0LnNsaWNlKGxhc3RFbmQsIHRva1BvcykpKSB7XG4gICAgICAgIC8vIEEgYC0tPmAgbGluZSBjb21tZW50XG4gICAgICAgIHRva1BvcyArPSAzO1xuICAgICAgICBza2lwTGluZUNvbW1lbnQoKTtcbiAgICAgICAgc2tpcFNwYWNlKCk7XG4gICAgICAgIHJldHVybiByZWFkVG9rZW4oKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaW5pc2hPcChfaW5jRGVjLCAyKTtcbiAgICB9XG4gICAgaWYgKG5leHQgPT09IDYxKSByZXR1cm4gZmluaXNoT3AoX2Fzc2lnbiwgMik7XG4gICAgcmV0dXJuIGZpbmlzaE9wKF9wbHVzTWluLCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRUb2tlbl9sdF9ndChjb2RlKSB7IC8vICc8PidcbiAgICB2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG4gICAgdmFyIHNpemUgPSAxO1xuICAgIGlmIChuZXh0ID09PSBjb2RlKSB7XG4gICAgICBzaXplID0gY29kZSA9PT0gNjIgJiYgaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAyKSA9PT0gNjIgPyAzIDogMjtcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIHNpemUpID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9hc3NpZ24sIHNpemUgKyAxKTtcbiAgICAgIHJldHVybiBmaW5pc2hPcChfYml0U2hpZnQsIHNpemUpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PSAzMyAmJiBjb2RlID09IDYwICYmIGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMikgPT0gNDUgJiZcbiAgICAgICAgaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAzKSA9PSA0NSkge1xuICAgICAgLy8gYDwhLS1gLCBhbiBYTUwtc3R5bGUgY29tbWVudCB0aGF0IHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhIGxpbmUgY29tbWVudFxuICAgICAgdG9rUG9zICs9IDQ7XG4gICAgICBza2lwTGluZUNvbW1lbnQoKTtcbiAgICAgIHNraXBTcGFjZSgpO1xuICAgICAgcmV0dXJuIHJlYWRUb2tlbigpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gNjEpXG4gICAgICBzaXplID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAyKSA9PT0gNjEgPyAzIDogMjtcbiAgICByZXR1cm4gZmluaXNoT3AoX3JlbGF0aW9uYWwsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX2VxX2V4Y2woY29kZSkgeyAvLyAnPSEnXG4gICAgdmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9lcXVhbGl0eSwgaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAyKSA9PT0gNjEgPyAzIDogMik7XG4gICAgcmV0dXJuIGZpbmlzaE9wKGNvZGUgPT09IDYxID8gX2VxIDogX3ByZWZpeCwgMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUb2tlbkZyb21Db2RlKGNvZGUpIHtcbiAgICBzd2l0Y2goY29kZSkge1xuICAgICAgLy8gVGhlIGludGVycHJldGF0aW9uIG9mIGEgZG90IGRlcGVuZHMgb24gd2hldGhlciBpdCBpcyBmb2xsb3dlZFxuICAgICAgLy8gYnkgYSBkaWdpdC5cbiAgICBjYXNlIDQ2OiAvLyAnLidcbiAgICAgIHJldHVybiByZWFkVG9rZW5fZG90KCk7XG5cbiAgICAgIC8vIFB1bmN0dWF0aW9uIHRva2Vucy5cbiAgICBjYXNlIDQwOiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9wYXJlbkwpO1xuICAgIGNhc2UgNDE6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX3BhcmVuUik7XG4gICAgY2FzZSA1OTogKyt0b2tQb3M7IHJldHVybiBmaW5pc2hUb2tlbihfc2VtaSk7XG4gICAgY2FzZSA0NDogKyt0b2tQb3M7IHJldHVybiBmaW5pc2hUb2tlbihfY29tbWEpO1xuICAgIGNhc2UgOTE6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX2JyYWNrZXRMKTtcbiAgICBjYXNlIDkzOiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9icmFja2V0Uik7XG4gICAgY2FzZSAxMjM6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX2JyYWNlTCk7XG4gICAgY2FzZSAxMjU6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX2JyYWNlUik7XG4gICAgY2FzZSA1ODogKyt0b2tQb3M7IHJldHVybiBmaW5pc2hUb2tlbihfY29sb24pO1xuICAgIGNhc2UgNjM6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX3F1ZXN0aW9uKTtcblxuICAgICAgLy8gJzB4JyBpcyBhIGhleGFkZWNpbWFsIG51bWJlci5cbiAgICBjYXNlIDQ4OiAvLyAnMCdcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAxKTtcbiAgICAgIGlmIChuZXh0ID09PSAxMjAgfHwgbmV4dCA9PT0gODgpIHJldHVybiByZWFkSGV4TnVtYmVyKCk7XG4gICAgICAvLyBBbnl0aGluZyBlbHNlIGJlZ2lubmluZyB3aXRoIGEgZGlnaXQgaXMgYW4gaW50ZWdlciwgb2N0YWxcbiAgICAgIC8vIG51bWJlciwgb3IgZmxvYXQuXG4gICAgY2FzZSA0OTogY2FzZSA1MDogY2FzZSA1MTogY2FzZSA1MjogY2FzZSA1MzogY2FzZSA1NDogY2FzZSA1NTogY2FzZSA1NjogY2FzZSA1NzogLy8gMS05XG4gICAgICByZXR1cm4gcmVhZE51bWJlcihmYWxzZSk7XG5cbiAgICAgIC8vIFF1b3RlcyBwcm9kdWNlIHN0cmluZ3MuXG4gICAgY2FzZSAzNDogY2FzZSAzOTogLy8gJ1wiJywgXCInXCJcbiAgICAgIHJldHVybiByZWFkU3RyaW5nKGNvZGUpO1xuXG4gICAgLy8gT3BlcmF0b3JzIGFyZSBwYXJzZWQgaW5saW5lIGluIHRpbnkgc3RhdGUgbWFjaGluZXMuICc9JyAoNjEpIGlzXG4gICAgLy8gb2Z0ZW4gcmVmZXJyZWQgdG8uIGBmaW5pc2hPcGAgc2ltcGx5IHNraXBzIHRoZSBhbW91bnQgb2ZcbiAgICAvLyBjaGFyYWN0ZXJzIGl0IGlzIGdpdmVuIGFzIHNlY29uZCBhcmd1bWVudCwgYW5kIHJldHVybnMgYSB0b2tlblxuICAgIC8vIG9mIHRoZSB0eXBlIGdpdmVuIGJ5IGl0cyBmaXJzdCBhcmd1bWVudC5cblxuICAgIGNhc2UgNDc6IC8vICcvJ1xuICAgICAgcmV0dXJuIHJlYWRUb2tlbl9zbGFzaChjb2RlKTtcblxuICAgIGNhc2UgMzc6IGNhc2UgNDI6IC8vICclKidcbiAgICAgIHJldHVybiByZWFkVG9rZW5fbXVsdF9tb2R1bG8oKTtcblxuICAgIGNhc2UgMTI0OiBjYXNlIDM4OiAvLyAnfCYnXG4gICAgICByZXR1cm4gcmVhZFRva2VuX3BpcGVfYW1wKGNvZGUpO1xuXG4gICAgY2FzZSA5NDogLy8gJ14nXG4gICAgICByZXR1cm4gcmVhZFRva2VuX2NhcmV0KCk7XG5cbiAgICBjYXNlIDQzOiBjYXNlIDQ1OiAvLyAnKy0nXG4gICAgICByZXR1cm4gcmVhZFRva2VuX3BsdXNfbWluKGNvZGUpO1xuXG4gICAgY2FzZSA2MDogY2FzZSA2MjogLy8gJzw+J1xuICAgICAgcmV0dXJuIHJlYWRUb2tlbl9sdF9ndChjb2RlKTtcblxuICAgIGNhc2UgNjE6IGNhc2UgMzM6IC8vICc9ISdcbiAgICAgIHJldHVybiByZWFkVG9rZW5fZXFfZXhjbChjb2RlKTtcblxuICAgIGNhc2UgMTI2OiAvLyAnfidcbiAgICAgIHJldHVybiBmaW5pc2hPcChfcHJlZml4LCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVG9rZW4oZm9yY2VSZWdleHApIHtcbiAgICBpZiAoIWZvcmNlUmVnZXhwKSB0b2tTdGFydCA9IHRva1BvcztcbiAgICBlbHNlIHRva1BvcyA9IHRva1N0YXJ0ICsgMTtcbiAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHRva1N0YXJ0TG9jID0gbmV3IGxpbmVfbG9jX3Q7XG4gICAgaWYgKGZvcmNlUmVnZXhwKSByZXR1cm4gcmVhZFJlZ2V4cCgpO1xuICAgIGlmICh0b2tQb3MgPj0gaW5wdXRMZW4pIHJldHVybiBmaW5pc2hUb2tlbihfZW9mKTtcblxuICAgIHZhciBjb2RlID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpO1xuICAgIC8vIElkZW50aWZpZXIgb3Iga2V5d29yZC4gJ1xcdVhYWFgnIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCBpblxuICAgIC8vIGlkZW50aWZpZXJzLCBzbyAnXFwnIGFsc28gZGlzcGF0Y2hlcyB0byB0aGF0LlxuICAgIGlmIChpc0lkZW50aWZpZXJTdGFydChjb2RlKSB8fCBjb2RlID09PSA5MiAvKiAnXFwnICovKSByZXR1cm4gcmVhZFdvcmQoKTtcblxuICAgIHZhciB0b2sgPSBnZXRUb2tlbkZyb21Db2RlKGNvZGUpO1xuXG4gICAgaWYgKHRvayA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIElmIHdlIGFyZSBoZXJlLCB3ZSBlaXRoZXIgZm91bmQgYSBub24tQVNDSUkgaWRlbnRpZmllclxuICAgICAgLy8gY2hhcmFjdGVyLCBvciBzb21ldGhpbmcgdGhhdCdzIGVudGlyZWx5IGRpc2FsbG93ZWQuXG4gICAgICB2YXIgY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgaWYgKGNoID09PSBcIlxcXFxcIiB8fCBub25BU0NJSWlkZW50aWZpZXJTdGFydC50ZXN0KGNoKSkgcmV0dXJuIHJlYWRXb3JkKCk7XG4gICAgICByYWlzZSh0b2tQb3MsIFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgJ1wiICsgY2ggKyBcIidcIik7XG4gICAgfVxuICAgIHJldHVybiB0b2s7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5pc2hPcCh0eXBlLCBzaXplKSB7XG4gICAgdmFyIHN0ciA9IGlucHV0LnNsaWNlKHRva1BvcywgdG9rUG9zICsgc2l6ZSk7XG4gICAgdG9rUG9zICs9IHNpemU7XG4gICAgZmluaXNoVG9rZW4odHlwZSwgc3RyKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgcmVndWxhciBleHByZXNzaW9uLiBTb21lIGNvbnRleHQtYXdhcmVuZXNzIGlzIG5lY2Vzc2FyeSxcbiAgLy8gc2luY2UgYSAnLycgaW5zaWRlIGEgJ1tdJyBzZXQgZG9lcyBub3QgZW5kIHRoZSBleHByZXNzaW9uLlxuXG4gIGZ1bmN0aW9uIHJlYWRSZWdleHAoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBcIlwiLCBlc2NhcGVkLCBpbkNsYXNzLCBzdGFydCA9IHRva1BvcztcbiAgICBmb3IgKDs7KSB7XG4gICAgICBpZiAodG9rUG9zID49IGlucHV0TGVuKSByYWlzZShzdGFydCwgXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpO1xuICAgICAgdmFyIGNoID0gaW5wdXQuY2hhckF0KHRva1Bvcyk7XG4gICAgICBpZiAobmV3bGluZS50ZXN0KGNoKSkgcmFpc2Uoc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHJlZ3VsYXIgZXhwcmVzc2lvblwiKTtcbiAgICAgIGlmICghZXNjYXBlZCkge1xuICAgICAgICBpZiAoY2ggPT09IFwiW1wiKSBpbkNsYXNzID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoY2ggPT09IFwiXVwiICYmIGluQ2xhc3MpIGluQ2xhc3MgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoY2ggPT09IFwiL1wiICYmICFpbkNsYXNzKSBicmVhaztcbiAgICAgICAgZXNjYXBlZCA9IGNoID09PSBcIlxcXFxcIjtcbiAgICAgIH0gZWxzZSBlc2NhcGVkID0gZmFsc2U7XG4gICAgICArK3Rva1BvcztcbiAgICB9XG4gICAgdmFyIGNvbnRlbnQgPSBpbnB1dC5zbGljZShzdGFydCwgdG9rUG9zKTtcbiAgICArK3Rva1BvcztcbiAgICAvLyBOZWVkIHRvIHVzZSBgcmVhZFdvcmQxYCBiZWNhdXNlICdcXHVYWFhYJyBzZXF1ZW5jZXMgYXJlIGFsbG93ZWRcbiAgICAvLyBoZXJlIChkb24ndCBhc2spLlxuICAgIHZhciBtb2RzID0gcmVhZFdvcmQxKCk7XG4gICAgaWYgKG1vZHMgJiYgIS9eW2dtc2l5XSokLy50ZXN0KG1vZHMpKSByYWlzZShzdGFydCwgXCJJbnZhbGlkIHJlZ2V4cCBmbGFnXCIpO1xuICAgIHJldHVybiBmaW5pc2hUb2tlbihfcmVnZXhwLCBuZXcgUmVnRXhwKGNvbnRlbnQsIG1vZHMpKTtcbiAgfVxuXG4gIC8vIFJlYWQgYW4gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFkaXguIFJldHVybiBudWxsIGlmIHplcm8gZGlnaXRzXG4gIC8vIHdlcmUgcmVhZCwgdGhlIGludGVnZXIgdmFsdWUgb3RoZXJ3aXNlLiBXaGVuIGBsZW5gIGlzIGdpdmVuLCB0aGlzXG4gIC8vIHdpbGwgcmV0dXJuIGBudWxsYCB1bmxlc3MgdGhlIGludGVnZXIgaGFzIGV4YWN0bHkgYGxlbmAgZGlnaXRzLlxuXG4gIGZ1bmN0aW9uIHJlYWRJbnQocmFkaXgsIGxlbikge1xuICAgIHZhciBzdGFydCA9IHRva1BvcywgdG90YWwgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwLCBlID0gbGVuID09IG51bGwgPyBJbmZpbml0eSA6IGxlbjsgaSA8IGU7ICsraSkge1xuICAgICAgdmFyIGNvZGUgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyksIHZhbDtcbiAgICAgIGlmIChjb2RlID49IDk3KSB2YWwgPSBjb2RlIC0gOTcgKyAxMDsgLy8gYVxuICAgICAgZWxzZSBpZiAoY29kZSA+PSA2NSkgdmFsID0gY29kZSAtIDY1ICsgMTA7IC8vIEFcbiAgICAgIGVsc2UgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NykgdmFsID0gY29kZSAtIDQ4OyAvLyAwLTlcbiAgICAgIGVsc2UgdmFsID0gSW5maW5pdHk7XG4gICAgICBpZiAodmFsID49IHJhZGl4KSBicmVhaztcbiAgICAgICsrdG9rUG9zO1xuICAgICAgdG90YWwgPSB0b3RhbCAqIHJhZGl4ICsgdmFsO1xuICAgIH1cbiAgICBpZiAodG9rUG9zID09PSBzdGFydCB8fCBsZW4gIT0gbnVsbCAmJiB0b2tQb3MgLSBzdGFydCAhPT0gbGVuKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB0b3RhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRIZXhOdW1iZXIoKSB7XG4gICAgdG9rUG9zICs9IDI7IC8vIDB4XG4gICAgdmFyIHZhbCA9IHJlYWRJbnQoMTYpO1xuICAgIGlmICh2YWwgPT0gbnVsbCkgcmFpc2UodG9rU3RhcnQgKyAyLCBcIkV4cGVjdGVkIGhleGFkZWNpbWFsIG51bWJlclwiKTtcbiAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpKSkgcmFpc2UodG9rUG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpO1xuICAgIHJldHVybiBmaW5pc2hUb2tlbihfbnVtLCB2YWwpO1xuICB9XG5cbiAgLy8gUmVhZCBhbiBpbnRlZ2VyLCBvY3RhbCBpbnRlZ2VyLCBvciBmbG9hdGluZy1wb2ludCBudW1iZXIuXG5cbiAgZnVuY3Rpb24gcmVhZE51bWJlcihzdGFydHNXaXRoRG90KSB7XG4gICAgdmFyIHN0YXJ0ID0gdG9rUG9zLCBpc0Zsb2F0ID0gZmFsc2UsIG9jdGFsID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpID09PSA0ODtcbiAgICBpZiAoIXN0YXJ0c1dpdGhEb3QgJiYgcmVhZEludCgxMCkgPT09IG51bGwpIHJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHRva1BvcykgPT09IDQ2KSB7XG4gICAgICArK3Rva1BvcztcbiAgICAgIHJlYWRJbnQoMTApO1xuICAgICAgaXNGbG9hdCA9IHRydWU7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpO1xuICAgIGlmIChuZXh0ID09PSA2OSB8fCBuZXh0ID09PSAxMDEpIHsgLy8gJ2VFJ1xuICAgICAgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQoKyt0b2tQb3MpO1xuICAgICAgaWYgKG5leHQgPT09IDQzIHx8IG5leHQgPT09IDQ1KSArK3Rva1BvczsgLy8gJystJ1xuICAgICAgaWYgKHJlYWRJbnQoMTApID09PSBudWxsKSByYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTtcbiAgICAgIGlzRmxvYXQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpKSkgcmFpc2UodG9rUG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpO1xuXG4gICAgdmFyIHN0ciA9IGlucHV0LnNsaWNlKHN0YXJ0LCB0b2tQb3MpLCB2YWw7XG4gICAgaWYgKGlzRmxvYXQpIHZhbCA9IHBhcnNlRmxvYXQoc3RyKTtcbiAgICBlbHNlIGlmICghb2N0YWwgfHwgc3RyLmxlbmd0aCA9PT0gMSkgdmFsID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gICAgZWxzZSBpZiAoL1s4OV0vLnRlc3Qoc3RyKSB8fCBzdHJpY3QpIHJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpO1xuICAgIGVsc2UgdmFsID0gcGFyc2VJbnQoc3RyLCA4KTtcbiAgICByZXR1cm4gZmluaXNoVG9rZW4oX251bSwgdmFsKTtcbiAgfVxuXG4gIC8vIFJlYWQgYSBzdHJpbmcgdmFsdWUsIGludGVycHJldGluZyBiYWNrc2xhc2gtZXNjYXBlcy5cblxuICBmdW5jdGlvbiByZWFkU3RyaW5nKHF1b3RlKSB7XG4gICAgdG9rUG9zKys7XG4gICAgdmFyIG91dCA9IFwiXCI7XG4gICAgZm9yICg7Oykge1xuICAgICAgaWYgKHRva1BvcyA+PSBpbnB1dExlbikgcmFpc2UodG9rU3RhcnQsIFwiVW50ZXJtaW5hdGVkIHN0cmluZyBjb25zdGFudFwiKTtcbiAgICAgIHZhciBjaCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcbiAgICAgIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgKyt0b2tQb3M7XG4gICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihfc3RyaW5nLCBvdXQpO1xuICAgICAgfVxuICAgICAgaWYgKGNoID09PSA5MikgeyAvLyAnXFwnXG4gICAgICAgIGNoID0gaW5wdXQuY2hhckNvZGVBdCgrK3Rva1Bvcyk7XG4gICAgICAgIHZhciBvY3RhbCA9IC9eWzAtN10rLy5leGVjKGlucHV0LnNsaWNlKHRva1BvcywgdG9rUG9zICsgMykpO1xuICAgICAgICBpZiAob2N0YWwpIG9jdGFsID0gb2N0YWxbMF07XG4gICAgICAgIHdoaWxlIChvY3RhbCAmJiBwYXJzZUludChvY3RhbCwgOCkgPiAyNTUpIG9jdGFsID0gb2N0YWwuc2xpY2UoMCwgLTEpO1xuICAgICAgICBpZiAob2N0YWwgPT09IFwiMFwiKSBvY3RhbCA9IG51bGw7XG4gICAgICAgICsrdG9rUG9zO1xuICAgICAgICBpZiAob2N0YWwpIHtcbiAgICAgICAgICBpZiAoc3RyaWN0KSByYWlzZSh0b2tQb3MgLSAyLCBcIk9jdGFsIGxpdGVyYWwgaW4gc3RyaWN0IG1vZGVcIik7XG4gICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQob2N0YWwsIDgpKTtcbiAgICAgICAgICB0b2tQb3MgKz0gb2N0YWwubGVuZ3RoIC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgICAgY2FzZSAxMTA6IG91dCArPSBcIlxcblwiOyBicmVhazsgLy8gJ24nIC0+ICdcXG4nXG4gICAgICAgICAgY2FzZSAxMTQ6IG91dCArPSBcIlxcclwiOyBicmVhazsgLy8gJ3InIC0+ICdcXHInXG4gICAgICAgICAgY2FzZSAxMjA6IG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlYWRIZXhDaGFyKDIpKTsgYnJlYWs7IC8vICd4J1xuICAgICAgICAgIGNhc2UgMTE3OiBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyZWFkSGV4Q2hhcig0KSk7IGJyZWFrOyAvLyAndSdcbiAgICAgICAgICBjYXNlIDg1OiBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyZWFkSGV4Q2hhcig4KSk7IGJyZWFrOyAvLyAnVSdcbiAgICAgICAgICBjYXNlIDExNjogb3V0ICs9IFwiXFx0XCI7IGJyZWFrOyAvLyAndCcgLT4gJ1xcdCdcbiAgICAgICAgICBjYXNlIDk4OiBvdXQgKz0gXCJcXGJcIjsgYnJlYWs7IC8vICdiJyAtPiAnXFxiJ1xuICAgICAgICAgIGNhc2UgMTE4OiBvdXQgKz0gXCJcXHUwMDBiXCI7IGJyZWFrOyAvLyAndicgLT4gJ1xcdTAwMGInXG4gICAgICAgICAgY2FzZSAxMDI6IG91dCArPSBcIlxcZlwiOyBicmVhazsgLy8gJ2YnIC0+ICdcXGYnXG4gICAgICAgICAgY2FzZSA0ODogb3V0ICs9IFwiXFwwXCI7IGJyZWFrOyAvLyAwIC0+ICdcXDAnXG4gICAgICAgICAgY2FzZSAxMzogaWYgKGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKSA9PT0gMTApICsrdG9rUG9zOyAvLyAnXFxyXFxuJ1xuICAgICAgICAgIGNhc2UgMTA6IC8vICcgXFxuJ1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYXRpb25zKSB7IHRva0xpbmVTdGFydCA9IHRva1BvczsgKyt0b2tDdXJMaW5lOyB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OiBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7IGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNoID09PSAxMyB8fCBjaCA9PT0gMTAgfHwgY2ggPT09IDgyMzIgfHwgY2ggPT09IDgyMzMpIHJhaXNlKHRva1N0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7XG4gICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTsgLy8gJ1xcJ1xuICAgICAgICArK3Rva1BvcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBVc2VkIHRvIHJlYWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZXMgKCdcXHgnLCAnXFx1JywgJ1xcVScpLlxuXG4gIGZ1bmN0aW9uIHJlYWRIZXhDaGFyKGxlbikge1xuICAgIHZhciBuID0gcmVhZEludCgxNiwgbGVuKTtcbiAgICBpZiAobiA9PT0gbnVsbCkgcmFpc2UodG9rU3RhcnQsIFwiQmFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VcIik7XG4gICAgcmV0dXJuIG47XG4gIH1cblxuICAvLyBVc2VkIHRvIHNpZ25hbCB0byBjYWxsZXJzIG9mIGByZWFkV29yZDFgIHdoZXRoZXIgdGhlIHdvcmRcbiAgLy8gY29udGFpbmVkIGFueSBlc2NhcGUgc2VxdWVuY2VzLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHdvcmRzIHdpdGhcbiAgLy8gZXNjYXBlIHNlcXVlbmNlcyBtdXN0IG5vdCBiZSBpbnRlcnByZXRlZCBhcyBrZXl3b3Jkcy5cblxuICB2YXIgY29udGFpbnNFc2M7XG5cbiAgLy8gUmVhZCBhbiBpZGVudGlmaWVyLCBhbmQgcmV0dXJuIGl0IGFzIGEgc3RyaW5nLiBTZXRzIGBjb250YWluc0VzY2BcbiAgLy8gdG8gd2hldGhlciB0aGUgd29yZCBjb250YWluZWQgYSAnXFx1JyBlc2NhcGUuXG4gIC8vXG4gIC8vIE9ubHkgYnVpbGRzIHVwIHRoZSB3b3JkIGNoYXJhY3Rlci1ieS1jaGFyYWN0ZXIgd2hlbiBpdCBhY3R1YWxseVxuICAvLyBjb250YWluZWRzIGFuIGVzY2FwZSwgYXMgYSBtaWNyby1vcHRpbWl6YXRpb24uXG5cbiAgZnVuY3Rpb24gcmVhZFdvcmQxKCkge1xuICAgIGNvbnRhaW5zRXNjID0gZmFsc2U7XG4gICAgdmFyIHdvcmQsIGZpcnN0ID0gdHJ1ZSwgc3RhcnQgPSB0b2tQb3M7XG4gICAgZm9yICg7Oykge1xuICAgICAgdmFyIGNoID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpO1xuICAgICAgaWYgKGlzSWRlbnRpZmllckNoYXIoY2gpKSB7XG4gICAgICAgIGlmIChjb250YWluc0VzYykgd29yZCArPSBpbnB1dC5jaGFyQXQodG9rUG9zKTtcbiAgICAgICAgKyt0b2tQb3M7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSA5MikgeyAvLyBcIlxcXCJcbiAgICAgICAgaWYgKCFjb250YWluc0VzYykgd29yZCA9IGlucHV0LnNsaWNlKHN0YXJ0LCB0b2tQb3MpO1xuICAgICAgICBjb250YWluc0VzYyA9IHRydWU7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KCsrdG9rUG9zKSAhPSAxMTcpIC8vIFwidVwiXG4gICAgICAgICAgcmFpc2UodG9rUG9zLCBcIkV4cGVjdGluZyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZSBcXFxcdVhYWFhcIik7XG4gICAgICAgICsrdG9rUG9zO1xuICAgICAgICB2YXIgZXNjID0gcmVhZEhleENoYXIoNCk7XG4gICAgICAgIHZhciBlc2NTdHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGVzYyk7XG4gICAgICAgIGlmICghZXNjU3RyKSByYWlzZSh0b2tQb3MgLSAxLCBcIkludmFsaWQgVW5pY29kZSBlc2NhcGVcIik7XG4gICAgICAgIGlmICghKGZpcnN0ID8gaXNJZGVudGlmaWVyU3RhcnQoZXNjKSA6IGlzSWRlbnRpZmllckNoYXIoZXNjKSkpXG4gICAgICAgICAgcmFpc2UodG9rUG9zIC0gNCwgXCJJbnZhbGlkIFVuaWNvZGUgZXNjYXBlXCIpO1xuICAgICAgICB3b3JkICs9IGVzY1N0cjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRhaW5zRXNjID8gd29yZCA6IGlucHV0LnNsaWNlKHN0YXJ0LCB0b2tQb3MpO1xuICB9XG5cbiAgLy8gUmVhZCBhbiBpZGVudGlmaWVyIG9yIGtleXdvcmQgdG9rZW4uIFdpbGwgY2hlY2sgZm9yIHJlc2VydmVkXG4gIC8vIHdvcmRzIHdoZW4gbmVjZXNzYXJ5LlxuXG4gIGZ1bmN0aW9uIHJlYWRXb3JkKCkge1xuICAgIHZhciB3b3JkID0gcmVhZFdvcmQxKCk7XG4gICAgdmFyIHR5cGUgPSBfbmFtZTtcbiAgICBpZiAoIWNvbnRhaW5zRXNjKSB7XG4gICAgICBpZiAoaXNLZXl3b3JkKHdvcmQpKSB0eXBlID0ga2V5d29yZFR5cGVzW3dvcmRdO1xuICAgICAgZWxzZSBpZiAob3B0aW9ucy5mb3JiaWRSZXNlcnZlZCAmJlxuICAgICAgICAgICAgICAgKG9wdGlvbnMuZWNtYVZlcnNpb24gPT09IDMgPyBpc1Jlc2VydmVkV29yZDMgOiBpc1Jlc2VydmVkV29yZDUpKHdvcmQpIHx8XG4gICAgICAgICAgICAgICBzdHJpY3QgJiYgaXNTdHJpY3RSZXNlcnZlZFdvcmQod29yZCkpXG4gICAgICAgIHJhaXNlKHRva1N0YXJ0LCBcIlRoZSBrZXl3b3JkICdcIiArIHdvcmQgKyBcIicgaXMgcmVzZXJ2ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBmaW5pc2hUb2tlbih0eXBlLCB3b3JkKTtcbiAgfVxuXG4gIC8vICMjIFBhcnNlclxuXG4gIC8vIEEgcmVjdXJzaXZlIGRlc2NlbnQgcGFyc2VyIG9wZXJhdGVzIGJ5IGRlZmluaW5nIGZ1bmN0aW9ucyBmb3IgYWxsXG4gIC8vIHN5bnRhY3RpYyBlbGVtZW50cywgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxpbmcgdGhvc2UsIGVhY2ggZnVuY3Rpb25cbiAgLy8gYWR2YW5jaW5nIHRoZSBpbnB1dCBzdHJlYW0gYW5kIHJldHVybmluZyBhbiBBU1Qgbm9kZS4gUHJlY2VkZW5jZVxuICAvLyBvZiBjb25zdHJ1Y3RzIChmb3IgZXhhbXBsZSwgdGhlIGZhY3QgdGhhdCBgIXhbMV1gIG1lYW5zIGAhKHhbMV0pYFxuICAvLyBpbnN0ZWFkIG9mIGAoIXgpWzFdYCBpcyBoYW5kbGVkIGJ5IHRoZSBmYWN0IHRoYXQgdGhlIHBhcnNlclxuICAvLyBmdW5jdGlvbiB0aGF0IHBhcnNlcyB1bmFyeSBwcmVmaXggb3BlcmF0b3JzIGlzIGNhbGxlZCBmaXJzdCwgYW5kXG4gIC8vIGluIHR1cm4gY2FsbHMgdGhlIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGBbXWAgc3Vic2NyaXB0cyDigJQgdGhhdFxuICAvLyB3YXksIGl0J2xsIHJlY2VpdmUgdGhlIG5vZGUgZm9yIGB4WzFdYCBhbHJlYWR5IHBhcnNlZCwgYW5kIHdyYXBzXG4gIC8vICp0aGF0KiBpbiB0aGUgdW5hcnkgb3BlcmF0b3Igbm9kZS5cbiAgLy9cbiAgLy8gQWNvcm4gdXNlcyBhbiBbb3BlcmF0b3IgcHJlY2VkZW5jZSBwYXJzZXJdW29wcF0gdG8gaGFuZGxlIGJpbmFyeVxuICAvLyBvcGVyYXRvciBwcmVjZWRlbmNlLCBiZWNhdXNlIGl0IGlzIG11Y2ggbW9yZSBjb21wYWN0IHRoYW4gdXNpbmdcbiAgLy8gdGhlIHRlY2huaXF1ZSBvdXRsaW5lZCBhYm92ZSwgd2hpY2ggdXNlcyBkaWZmZXJlbnQsIG5lc3RpbmdcbiAgLy8gZnVuY3Rpb25zIHRvIHNwZWNpZnkgcHJlY2VkZW5jZSwgZm9yIGFsbCBvZiB0aGUgdGVuIGJpbmFyeVxuICAvLyBwcmVjZWRlbmNlIGxldmVscyB0aGF0IEphdmFTY3JpcHQgZGVmaW5lcy5cbiAgLy9cbiAgLy8gW29wcF06IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3BlcmF0b3ItcHJlY2VkZW5jZV9wYXJzZXJcblxuICAvLyAjIyMgUGFyc2VyIHV0aWxpdGllc1xuXG4gIC8vIENvbnRpbnVlIHRvIHRoZSBuZXh0IHRva2VuLlxuXG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgbGFzdFN0YXJ0ID0gdG9rU3RhcnQ7XG4gICAgbGFzdEVuZCA9IHRva0VuZDtcbiAgICBsYXN0RW5kTG9jID0gdG9rRW5kTG9jO1xuICAgIHJlYWRUb2tlbigpO1xuICB9XG5cbiAgLy8gRW50ZXIgc3RyaWN0IG1vZGUuIFJlLXJlYWRzIHRoZSBuZXh0IHRva2VuIHRvIHBsZWFzZSBwZWRhbnRpY1xuICAvLyB0ZXN0cyAoXCJ1c2Ugc3RyaWN0XCI7IDAxMDsgLS0gc2hvdWxkIGZhaWwpLlxuXG4gIGZ1bmN0aW9uIHNldFN0cmljdChzdHJjdCkge1xuICAgIHN0cmljdCA9IHN0cmN0O1xuICAgIHRva1BvcyA9IGxhc3RFbmQ7XG4gICAgaWYgKG9wdGlvbnMubG9jYXRpb25zKSB7XG4gICAgICB3aGlsZSAodG9rUG9zIDwgdG9rTGluZVN0YXJ0KSB7XG4gICAgICAgIHRva0xpbmVTdGFydCA9IGlucHV0Lmxhc3RJbmRleE9mKFwiXFxuXCIsIHRva0xpbmVTdGFydCAtIDIpICsgMTtcbiAgICAgICAgLS10b2tDdXJMaW5lO1xuICAgICAgfVxuICAgIH1cbiAgICBza2lwU3BhY2UoKTtcbiAgICByZWFkVG9rZW4oKTtcbiAgfVxuXG4gIC8vIFN0YXJ0IGFuIEFTVCBub2RlLCBhdHRhY2hpbmcgYSBzdGFydCBvZmZzZXQuXG5cbiAgZnVuY3Rpb24gbm9kZV90KCkge1xuICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgdGhpcy5zdGFydCA9IHRva1N0YXJ0O1xuICAgIHRoaXMuZW5kID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfbG9jX3QoKSB7XG4gICAgdGhpcy5zdGFydCA9IHRva1N0YXJ0TG9jO1xuICAgIHRoaXMuZW5kID0gbnVsbDtcbiAgICBpZiAoc291cmNlRmlsZSAhPT0gbnVsbCkgdGhpcy5zb3VyY2UgPSBzb3VyY2VGaWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnROb2RlKCkge1xuICAgIHZhciBub2RlID0gbmV3IG5vZGVfdCgpO1xuICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucylcbiAgICAgIG5vZGUubG9jID0gbmV3IG5vZGVfbG9jX3QoKTtcbiAgICBpZiAob3B0aW9ucy5kaXJlY3RTb3VyY2VGaWxlKVxuICAgICAgbm9kZS5zb3VyY2VGaWxlID0gb3B0aW9ucy5kaXJlY3RTb3VyY2VGaWxlO1xuICAgIGlmIChvcHRpb25zLnJhbmdlcylcbiAgICAgIG5vZGUucmFuZ2UgPSBbdG9rU3RhcnQsIDBdO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgLy8gU3RhcnQgYSBub2RlIHdob3NlIHN0YXJ0IG9mZnNldCBpbmZvcm1hdGlvbiBzaG91bGQgYmUgYmFzZWQgb25cbiAgLy8gdGhlIHN0YXJ0IG9mIGFub3RoZXIgbm9kZS4gRm9yIGV4YW1wbGUsIGEgYmluYXJ5IG9wZXJhdG9yIG5vZGUgaXNcbiAgLy8gb25seSBzdGFydGVkIGFmdGVyIGl0cyBsZWZ0LWhhbmQgc2lkZSBoYXMgYWxyZWFkeSBiZWVuIHBhcnNlZC5cblxuICBmdW5jdGlvbiBzdGFydE5vZGVGcm9tKG90aGVyKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgbm9kZV90KCk7XG4gICAgbm9kZS5zdGFydCA9IG90aGVyLnN0YXJ0O1xuICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgbm9kZS5sb2MgPSBuZXcgbm9kZV9sb2NfdCgpO1xuICAgICAgbm9kZS5sb2Muc3RhcnQgPSBvdGhlci5sb2Muc3RhcnQ7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnJhbmdlcylcbiAgICAgIG5vZGUucmFuZ2UgPSBbb3RoZXIucmFuZ2VbMF0sIDBdO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICAvLyBGaW5pc2ggYW4gQVNUIG5vZGUsIGFkZGluZyBgdHlwZWAgYW5kIGBlbmRgIHByb3BlcnRpZXMuXG5cbiAgZnVuY3Rpb24gZmluaXNoTm9kZShub2RlLCB0eXBlKSB7XG4gICAgbm9kZS50eXBlID0gdHlwZTtcbiAgICBub2RlLmVuZCA9IGxhc3RFbmQ7XG4gICAgaWYgKG9wdGlvbnMubG9jYXRpb25zKVxuICAgICAgbm9kZS5sb2MuZW5kID0gbGFzdEVuZExvYztcbiAgICBpZiAob3B0aW9ucy5yYW5nZXMpXG4gICAgICBub2RlLnJhbmdlWzFdID0gbGFzdEVuZDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIC8vIFRlc3Qgd2hldGhlciBhIHN0YXRlbWVudCBub2RlIGlzIHRoZSBzdHJpbmcgbGl0ZXJhbCBgXCJ1c2Ugc3RyaWN0XCJgLlxuXG4gIGZ1bmN0aW9uIGlzVXNlU3RyaWN0KHN0bXQpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5lY21hVmVyc2lvbiA+PSA1ICYmIHN0bXQudHlwZSA9PT0gXCJFeHByZXNzaW9uU3RhdGVtZW50XCIgJiZcbiAgICAgIHN0bXQuZXhwcmVzc2lvbi50eXBlID09PSBcIkxpdGVyYWxcIiAmJiBzdG10LmV4cHJlc3Npb24udmFsdWUgPT09IFwidXNlIHN0cmljdFwiO1xuICB9XG5cbiAgLy8gUHJlZGljYXRlIHRoYXQgdGVzdHMgd2hldGhlciB0aGUgbmV4dCB0b2tlbiBpcyBvZiB0aGUgZ2l2ZW5cbiAgLy8gdHlwZSwgYW5kIGlmIHllcywgY29uc3VtZXMgaXQgYXMgYSBzaWRlIGVmZmVjdC5cblxuICBmdW5jdGlvbiBlYXQodHlwZSkge1xuICAgIGlmICh0b2tUeXBlID09PSB0eXBlKSB7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBUZXN0IHdoZXRoZXIgYSBzZW1pY29sb24gY2FuIGJlIGluc2VydGVkIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuXG4gIGZ1bmN0aW9uIGNhbkluc2VydFNlbWljb2xvbigpIHtcbiAgICByZXR1cm4gIW9wdGlvbnMuc3RyaWN0U2VtaWNvbG9ucyAmJlxuICAgICAgKHRva1R5cGUgPT09IF9lb2YgfHwgdG9rVHlwZSA9PT0gX2JyYWNlUiB8fCBuZXdsaW5lLnRlc3QoaW5wdXQuc2xpY2UobGFzdEVuZCwgdG9rU3RhcnQpKSk7XG4gIH1cblxuICAvLyBDb25zdW1lIGEgc2VtaWNvbG9uLCBvciwgZmFpbGluZyB0aGF0LCBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG9cbiAgLy8gcHJldGVuZCB0aGF0IHRoZXJlIGlzIGEgc2VtaWNvbG9uIGF0IHRoaXMgcG9zaXRpb24uXG5cbiAgZnVuY3Rpb24gc2VtaWNvbG9uKCkge1xuICAgIGlmICghZWF0KF9zZW1pKSAmJiAhY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHVuZXhwZWN0ZWQoKTtcbiAgfVxuXG4gIC8vIEV4cGVjdCBhIHRva2VuIG9mIGEgZ2l2ZW4gdHlwZS4gSWYgZm91bmQsIGNvbnN1bWUgaXQsIG90aGVyd2lzZSxcbiAgLy8gcmFpc2UgYW4gdW5leHBlY3RlZCB0b2tlbiBlcnJvci5cblxuICBmdW5jdGlvbiBleHBlY3QodHlwZSkge1xuICAgIGlmICh0b2tUeXBlID09PSB0eXBlKSBuZXh0KCk7XG4gICAgZWxzZSB1bmV4cGVjdGVkKCk7XG4gIH1cblxuICAvLyBSYWlzZSBhbiB1bmV4cGVjdGVkIHRva2VuIGVycm9yLlxuXG4gIGZ1bmN0aW9uIHVuZXhwZWN0ZWQoKSB7XG4gICAgcmFpc2UodG9rU3RhcnQsIFwiVW5leHBlY3RlZCB0b2tlblwiKTtcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGF0IGEgbm9kZSBpcyBhbiBsdmFsIOKAlCBzb21ldGhpbmcgdGhhdCBjYW4gYmUgYXNzaWduZWRcbiAgLy8gdG8uXG5cbiAgZnVuY3Rpb24gY2hlY2tMVmFsKGV4cHIpIHtcbiAgICBpZiAoZXhwci50eXBlICE9PSBcIklkZW50aWZpZXJcIiAmJiBleHByLnR5cGUgIT09IFwiTWVtYmVyRXhwcmVzc2lvblwiKVxuICAgICAgcmFpc2UoZXhwci5zdGFydCwgXCJBc3NpZ25pbmcgdG8gcnZhbHVlXCIpO1xuICAgIGlmIChzdHJpY3QgJiYgZXhwci50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBpc1N0cmljdEJhZElkV29yZChleHByLm5hbWUpKVxuICAgICAgcmFpc2UoZXhwci5zdGFydCwgXCJBc3NpZ25pbmcgdG8gXCIgKyBleHByLm5hbWUgKyBcIiBpbiBzdHJpY3QgbW9kZVwiKTtcbiAgfVxuXG4gIC8vICMjIyBTdGF0ZW1lbnQgcGFyc2luZ1xuXG4gIC8vIFBhcnNlIGEgcHJvZ3JhbS4gSW5pdGlhbGl6ZXMgdGhlIHBhcnNlciwgcmVhZHMgYW55IG51bWJlciBvZlxuICAvLyBzdGF0ZW1lbnRzLCBhbmQgd3JhcHMgdGhlbSBpbiBhIFByb2dyYW0gbm9kZS4gIE9wdGlvbmFsbHkgdGFrZXMgYVxuICAvLyBgcHJvZ3JhbWAgYXJndW1lbnQuICBJZiBwcmVzZW50LCB0aGUgc3RhdGVtZW50cyB3aWxsIGJlIGFwcGVuZGVkXG4gIC8vIHRvIGl0cyBib2R5IGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgbm9kZS5cblxuICBmdW5jdGlvbiBwYXJzZVRvcExldmVsKHByb2dyYW0pIHtcbiAgICBsYXN0U3RhcnQgPSBsYXN0RW5kID0gdG9rUG9zO1xuICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucykgbGFzdEVuZExvYyA9IG5ldyBsaW5lX2xvY190O1xuICAgIGluRnVuY3Rpb24gPSBzdHJpY3QgPSBudWxsO1xuICAgIGxhYmVscyA9IFtdO1xuICAgIHJlYWRUb2tlbigpO1xuXG4gICAgdmFyIG5vZGUgPSBwcm9ncmFtIHx8IHN0YXJ0Tm9kZSgpLCBmaXJzdCA9IHRydWU7XG4gICAgaWYgKCFwcm9ncmFtKSBub2RlLmJvZHkgPSBbXTtcbiAgICB3aGlsZSAodG9rVHlwZSAhPT0gX2VvZikge1xuICAgICAgdmFyIHN0bXQgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG4gICAgICBpZiAoZmlyc3QgJiYgaXNVc2VTdHJpY3Qoc3RtdCkpIHNldFN0cmljdCh0cnVlKTtcbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiUHJvZ3JhbVwiKTtcbiAgfVxuXG4gIHZhciBsb29wTGFiZWwgPSB7a2luZDogXCJsb29wXCJ9LCBzd2l0Y2hMYWJlbCA9IHtraW5kOiBcInN3aXRjaFwifTtcblxuICAvLyBQYXJzZSBhIHNpbmdsZSBzdGF0ZW1lbnQuXG4gIC8vXG4gIC8vIElmIGV4cGVjdGluZyBhIHN0YXRlbWVudCBhbmQgZmluZGluZyBhIHNsYXNoIG9wZXJhdG9yLCBwYXJzZSBhXG4gIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsLiBUaGlzIGlzIHRvIGhhbmRsZSBjYXNlcyBsaWtlXG4gIC8vIGBpZiAoZm9vKSAvYmxhaC8uZXhlYyhmb28pO2AsIHdoZXJlIGxvb2tpbmcgYXQgdGhlIHByZXZpb3VzIHRva2VuXG4gIC8vIGRvZXMgbm90IGhlbHAuXG5cbiAgZnVuY3Rpb24gcGFyc2VTdGF0ZW1lbnQoKSB7XG4gICAgaWYgKHRva1R5cGUgPT09IF9zbGFzaCB8fCB0b2tUeXBlID09PSBfYXNzaWduICYmIHRva1ZhbCA9PSBcIi89XCIpXG4gICAgICByZWFkVG9rZW4odHJ1ZSk7XG5cbiAgICB2YXIgc3RhcnR0eXBlID0gdG9rVHlwZSwgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuXG4gICAgLy8gTW9zdCB0eXBlcyBvZiBzdGF0ZW1lbnRzIGFyZSByZWNvZ25pemVkIGJ5IHRoZSBrZXl3b3JkIHRoZXlcbiAgICAvLyBzdGFydCB3aXRoLiBNYW55IGFyZSB0cml2aWFsIHRvIHBhcnNlLCBzb21lIHJlcXVpcmUgYSBiaXQgb2ZcbiAgICAvLyBjb21wbGV4aXR5LlxuXG4gICAgc3dpdGNoIChzdGFydHR5cGUpIHtcbiAgICBjYXNlIF9icmVhazogY2FzZSBfY29udGludWU6XG4gICAgICBuZXh0KCk7XG4gICAgICB2YXIgaXNCcmVhayA9IHN0YXJ0dHlwZSA9PT0gX2JyZWFrO1xuICAgICAgaWYgKGVhdChfc2VtaSkgfHwgY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIG5vZGUubGFiZWwgPSBudWxsO1xuICAgICAgZWxzZSBpZiAodG9rVHlwZSAhPT0gX25hbWUpIHVuZXhwZWN0ZWQoKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBub2RlLmxhYmVsID0gcGFyc2VJZGVudCgpO1xuICAgICAgICBzZW1pY29sb24oKTtcbiAgICAgIH1cblxuICAgICAgLy8gVmVyaWZ5IHRoYXQgdGhlcmUgaXMgYW4gYWN0dWFsIGRlc3RpbmF0aW9uIHRvIGJyZWFrIG9yXG4gICAgICAvLyBjb250aW51ZSB0by5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBsYWIgPSBsYWJlbHNbaV07XG4gICAgICAgIGlmIChub2RlLmxhYmVsID09IG51bGwgfHwgbGFiLm5hbWUgPT09IG5vZGUubGFiZWwubmFtZSkge1xuICAgICAgICAgIGlmIChsYWIua2luZCAhPSBudWxsICYmIChpc0JyZWFrIHx8IGxhYi5raW5kID09PSBcImxvb3BcIikpIGJyZWFrO1xuICAgICAgICAgIGlmIChub2RlLmxhYmVsICYmIGlzQnJlYWspIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbGFiZWxzLmxlbmd0aCkgcmFpc2Uobm9kZS5zdGFydCwgXCJVbnN5bnRhY3RpYyBcIiArIHN0YXJ0dHlwZS5rZXl3b3JkKTtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIGlzQnJlYWsgPyBcIkJyZWFrU3RhdGVtZW50XCIgOiBcIkNvbnRpbnVlU3RhdGVtZW50XCIpO1xuXG4gICAgY2FzZSBfZGVidWdnZXI6XG4gICAgICBuZXh0KCk7XG4gICAgICBzZW1pY29sb24oKTtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiRGVidWdnZXJTdGF0ZW1lbnRcIik7XG5cbiAgICBjYXNlIF9kbzpcbiAgICAgIG5leHQoKTtcbiAgICAgIGxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG4gICAgICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgICAgbGFiZWxzLnBvcCgpO1xuICAgICAgZXhwZWN0KF93aGlsZSk7XG4gICAgICBub2RlLnRlc3QgPSBwYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICAgICAgc2VtaWNvbG9uKCk7XG4gICAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkRvV2hpbGVTdGF0ZW1lbnRcIik7XG5cbiAgICAgIC8vIERpc2FtYmlndWF0aW5nIGJldHdlZW4gYSBgZm9yYCBhbmQgYSBgZm9yYC9gaW5gIGxvb3AgaXNcbiAgICAgIC8vIG5vbi10cml2aWFsLiBCYXNpY2FsbHksIHdlIGhhdmUgdG8gcGFyc2UgdGhlIGluaXQgYHZhcmBcbiAgICAgIC8vIHN0YXRlbWVudCBvciBleHByZXNzaW9uLCBkaXNhbGxvd2luZyB0aGUgYGluYCBvcGVyYXRvciAoc2VlXG4gICAgICAvLyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBgcGFyc2VFeHByZXNzaW9uYCksIGFuZCB0aGVuIGNoZWNrXG4gICAgICAvLyB3aGV0aGVyIHRoZSBuZXh0IHRva2VuIGlzIGBpbmAuIFdoZW4gdGhlcmUgaXMgbm8gaW5pdCBwYXJ0XG4gICAgICAvLyAoc2VtaWNvbG9uIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzKSwgaXQgaXNcbiAgICAgIC8vIGEgcmVndWxhciBgZm9yYCBsb29wLlxuXG4gICAgY2FzZSBfZm9yOlxuICAgICAgbmV4dCgpO1xuICAgICAgbGFiZWxzLnB1c2gobG9vcExhYmVsKTtcbiAgICAgIGV4cGVjdChfcGFyZW5MKTtcbiAgICAgIGlmICh0b2tUeXBlID09PSBfc2VtaSkgcmV0dXJuIHBhcnNlRm9yKG5vZGUsIG51bGwpO1xuICAgICAgaWYgKHRva1R5cGUgPT09IF92YXIpIHtcbiAgICAgICAgdmFyIGluaXQgPSBzdGFydE5vZGUoKTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgICBwYXJzZVZhcihpbml0LCB0cnVlKTtcbiAgICAgICAgZmluaXNoTm9kZShpbml0LCBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIik7XG4gICAgICAgIGlmIChpbml0LmRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiYgZWF0KF9pbikpXG4gICAgICAgICAgcmV0dXJuIHBhcnNlRm9ySW4obm9kZSwgaW5pdCk7XG4gICAgICAgIHJldHVybiBwYXJzZUZvcihub2RlLCBpbml0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpbml0ID0gcGFyc2VFeHByZXNzaW9uKGZhbHNlLCB0cnVlKTtcbiAgICAgIGlmIChlYXQoX2luKSkge2NoZWNrTFZhbChpbml0KTsgcmV0dXJuIHBhcnNlRm9ySW4obm9kZSwgaW5pdCk7fVxuICAgICAgcmV0dXJuIHBhcnNlRm9yKG5vZGUsIGluaXQpO1xuXG4gICAgY2FzZSBfZnVuY3Rpb246XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm4gcGFyc2VGdW5jdGlvbihub2RlLCB0cnVlKTtcblxuICAgIGNhc2UgX2lmOlxuICAgICAgbmV4dCgpO1xuICAgICAgbm9kZS50ZXN0ID0gcGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICAgIG5vZGUuY29uc2VxdWVudCA9IHBhcnNlU3RhdGVtZW50KCk7XG4gICAgICBub2RlLmFsdGVybmF0ZSA9IGVhdChfZWxzZSkgPyBwYXJzZVN0YXRlbWVudCgpIDogbnVsbDtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiSWZTdGF0ZW1lbnRcIik7XG5cbiAgICBjYXNlIF9yZXR1cm46XG4gICAgICBpZiAoIWluRnVuY3Rpb24pIHJhaXNlKHRva1N0YXJ0LCBcIidyZXR1cm4nIG91dHNpZGUgb2YgZnVuY3Rpb25cIik7XG4gICAgICBuZXh0KCk7XG5cbiAgICAgIC8vIEluIGByZXR1cm5gIChhbmQgYGJyZWFrYC9gY29udGludWVgKSwgdGhlIGtleXdvcmRzIHdpdGhcbiAgICAgIC8vIG9wdGlvbmFsIGFyZ3VtZW50cywgd2UgZWFnZXJseSBsb29rIGZvciBhIHNlbWljb2xvbiBvciB0aGVcbiAgICAgIC8vIHBvc3NpYmlsaXR5IHRvIGluc2VydCBvbmUuXG5cbiAgICAgIGlmIChlYXQoX3NlbWkpIHx8IGNhbkluc2VydFNlbWljb2xvbigpKSBub2RlLmFyZ3VtZW50ID0gbnVsbDtcbiAgICAgIGVsc2UgeyBub2RlLmFyZ3VtZW50ID0gcGFyc2VFeHByZXNzaW9uKCk7IHNlbWljb2xvbigpOyB9XG4gICAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIlJldHVyblN0YXRlbWVudFwiKTtcblxuICAgIGNhc2UgX3N3aXRjaDpcbiAgICAgIG5leHQoKTtcbiAgICAgIG5vZGUuZGlzY3JpbWluYW50ID0gcGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICAgIG5vZGUuY2FzZXMgPSBbXTtcbiAgICAgIGV4cGVjdChfYnJhY2VMKTtcbiAgICAgIGxhYmVscy5wdXNoKHN3aXRjaExhYmVsKTtcblxuICAgICAgLy8gU3RhdGVtZW50cyB1bmRlciBtdXN0IGJlIGdyb3VwZWQgKGJ5IGxhYmVsKSBpbiBTd2l0Y2hDYXNlXG4gICAgICAvLyBub2Rlcy4gYGN1cmAgaXMgdXNlZCB0byBrZWVwIHRoZSBub2RlIHRoYXQgd2UgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYWRkaW5nIHN0YXRlbWVudHMgdG8uXG5cbiAgICAgIGZvciAodmFyIGN1ciwgc2F3RGVmYXVsdDsgdG9rVHlwZSAhPSBfYnJhY2VSOykge1xuICAgICAgICBpZiAodG9rVHlwZSA9PT0gX2Nhc2UgfHwgdG9rVHlwZSA9PT0gX2RlZmF1bHQpIHtcbiAgICAgICAgICB2YXIgaXNDYXNlID0gdG9rVHlwZSA9PT0gX2Nhc2U7XG4gICAgICAgICAgaWYgKGN1cikgZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTtcbiAgICAgICAgICBub2RlLmNhc2VzLnB1c2goY3VyID0gc3RhcnROb2RlKCkpO1xuICAgICAgICAgIGN1ci5jb25zZXF1ZW50ID0gW107XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIGlmIChpc0Nhc2UpIGN1ci50ZXN0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2F3RGVmYXVsdCkgcmFpc2UobGFzdFN0YXJ0LCBcIk11bHRpcGxlIGRlZmF1bHQgY2xhdXNlc1wiKTsgc2F3RGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgICBjdXIudGVzdCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4cGVjdChfY29sb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY3VyKSB1bmV4cGVjdGVkKCk7XG4gICAgICAgICAgY3VyLmNvbnNlcXVlbnQucHVzaChwYXJzZVN0YXRlbWVudCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cikgZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTtcbiAgICAgIG5leHQoKTsgLy8gQ2xvc2luZyBicmFjZVxuICAgICAgbGFiZWxzLnBvcCgpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJTd2l0Y2hTdGF0ZW1lbnRcIik7XG5cbiAgICBjYXNlIF90aHJvdzpcbiAgICAgIG5leHQoKTtcbiAgICAgIGlmIChuZXdsaW5lLnRlc3QoaW5wdXQuc2xpY2UobGFzdEVuZCwgdG9rU3RhcnQpKSlcbiAgICAgICAgcmFpc2UobGFzdEVuZCwgXCJJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgdGhyb3dcIik7XG4gICAgICBub2RlLmFyZ3VtZW50ID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICBzZW1pY29sb24oKTtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiVGhyb3dTdGF0ZW1lbnRcIik7XG5cbiAgICBjYXNlIF90cnk6XG4gICAgICBuZXh0KCk7XG4gICAgICBub2RlLmJsb2NrID0gcGFyc2VCbG9jaygpO1xuICAgICAgbm9kZS5oYW5kbGVyID0gbnVsbDtcbiAgICAgIGlmICh0b2tUeXBlID09PSBfY2F0Y2gpIHtcbiAgICAgICAgdmFyIGNsYXVzZSA9IHN0YXJ0Tm9kZSgpO1xuICAgICAgICBuZXh0KCk7XG4gICAgICAgIGV4cGVjdChfcGFyZW5MKTtcbiAgICAgICAgY2xhdXNlLnBhcmFtID0gcGFyc2VJZGVudCgpO1xuICAgICAgICBpZiAoc3RyaWN0ICYmIGlzU3RyaWN0QmFkSWRXb3JkKGNsYXVzZS5wYXJhbS5uYW1lKSlcbiAgICAgICAgICByYWlzZShjbGF1c2UucGFyYW0uc3RhcnQsIFwiQmluZGluZyBcIiArIGNsYXVzZS5wYXJhbS5uYW1lICsgXCIgaW4gc3RyaWN0IG1vZGVcIik7XG4gICAgICAgIGV4cGVjdChfcGFyZW5SKTtcbiAgICAgICAgY2xhdXNlLmd1YXJkID0gbnVsbDtcbiAgICAgICAgY2xhdXNlLmJvZHkgPSBwYXJzZUJsb2NrKCk7XG4gICAgICAgIG5vZGUuaGFuZGxlciA9IGZpbmlzaE5vZGUoY2xhdXNlLCBcIkNhdGNoQ2xhdXNlXCIpO1xuICAgICAgfVxuICAgICAgbm9kZS5ndWFyZGVkSGFuZGxlcnMgPSBlbXB0eTtcbiAgICAgIG5vZGUuZmluYWxpemVyID0gZWF0KF9maW5hbGx5KSA/IHBhcnNlQmxvY2soKSA6IG51bGw7XG4gICAgICBpZiAoIW5vZGUuaGFuZGxlciAmJiAhbm9kZS5maW5hbGl6ZXIpXG4gICAgICAgIHJhaXNlKG5vZGUuc3RhcnQsIFwiTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGNsYXVzZVwiKTtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiVHJ5U3RhdGVtZW50XCIpO1xuXG4gICAgY2FzZSBfdmFyOlxuICAgICAgbmV4dCgpO1xuICAgICAgcGFyc2VWYXIobm9kZSk7XG4gICAgICBzZW1pY29sb24oKTtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKTtcblxuICAgIGNhc2UgX3doaWxlOlxuICAgICAgbmV4dCgpO1xuICAgICAgbm9kZS50ZXN0ID0gcGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICAgIGxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG4gICAgICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgICAgbGFiZWxzLnBvcCgpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJXaGlsZVN0YXRlbWVudFwiKTtcblxuICAgIGNhc2UgX3dpdGg6XG4gICAgICBpZiAoc3RyaWN0KSByYWlzZSh0b2tTdGFydCwgXCInd2l0aCcgaW4gc3RyaWN0IG1vZGVcIik7XG4gICAgICBuZXh0KCk7XG4gICAgICBub2RlLm9iamVjdCA9IHBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gICAgICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJXaXRoU3RhdGVtZW50XCIpO1xuXG4gICAgY2FzZSBfYnJhY2VMOlxuICAgICAgcmV0dXJuIHBhcnNlQmxvY2soKTtcblxuICAgIGNhc2UgX3NlbWk6XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkVtcHR5U3RhdGVtZW50XCIpO1xuXG4gICAgICAvLyBJZiB0aGUgc3RhdGVtZW50IGRvZXMgbm90IHN0YXJ0IHdpdGggYSBzdGF0ZW1lbnQga2V5d29yZCBvciBhXG4gICAgICAvLyBicmFjZSwgaXQncyBhbiBFeHByZXNzaW9uU3RhdGVtZW50IG9yIExhYmVsZWRTdGF0ZW1lbnQuIFdlXG4gICAgICAvLyBzaW1wbHkgc3RhcnQgcGFyc2luZyBhbiBleHByZXNzaW9uLCBhbmQgYWZ0ZXJ3YXJkcywgaWYgdGhlXG4gICAgICAvLyBuZXh0IHRva2VuIGlzIGEgY29sb24gYW5kIHRoZSBleHByZXNzaW9uIHdhcyBhIHNpbXBsZVxuICAgICAgLy8gSWRlbnRpZmllciBub2RlLCB3ZSBzd2l0Y2ggdG8gaW50ZXJwcmV0aW5nIGl0IGFzIGEgbGFiZWwuXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdmFyIG1heWJlTmFtZSA9IHRva1ZhbCwgZXhwciA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgaWYgKHN0YXJ0dHlwZSA9PT0gX25hbWUgJiYgZXhwci50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBlYXQoX2NvbG9uKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7ICsraSlcbiAgICAgICAgICBpZiAobGFiZWxzW2ldLm5hbWUgPT09IG1heWJlTmFtZSkgcmFpc2UoZXhwci5zdGFydCwgXCJMYWJlbCAnXCIgKyBtYXliZU5hbWUgKyBcIicgaXMgYWxyZWFkeSBkZWNsYXJlZFwiKTtcbiAgICAgICAgdmFyIGtpbmQgPSB0b2tUeXBlLmlzTG9vcCA/IFwibG9vcFwiIDogdG9rVHlwZSA9PT0gX3N3aXRjaCA/IFwic3dpdGNoXCIgOiBudWxsO1xuICAgICAgICBsYWJlbHMucHVzaCh7bmFtZTogbWF5YmVOYW1lLCBraW5kOiBraW5kfSk7XG4gICAgICAgIG5vZGUuYm9keSA9IHBhcnNlU3RhdGVtZW50KCk7XG4gICAgICAgIGxhYmVscy5wb3AoKTtcbiAgICAgICAgbm9kZS5sYWJlbCA9IGV4cHI7XG4gICAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiTGFiZWxlZFN0YXRlbWVudFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuZXhwcmVzc2lvbiA9IGV4cHI7XG4gICAgICAgIHNlbWljb2xvbigpO1xuICAgICAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gVXNlZCBmb3IgY29uc3RydWN0cyBsaWtlIGBzd2l0Y2hgIGFuZCBgaWZgIHRoYXQgaW5zaXN0IG9uXG4gIC8vIHBhcmVudGhlc2VzIGFyb3VuZCB0aGVpciBleHByZXNzaW9uLlxuXG4gIGZ1bmN0aW9uIHBhcnNlUGFyZW5FeHByZXNzaW9uKCkge1xuICAgIGV4cGVjdChfcGFyZW5MKTtcbiAgICB2YXIgdmFsID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgZXhwZWN0KF9wYXJlblIpO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvLyBQYXJzZSBhIHNlbWljb2xvbi1lbmNsb3NlZCBibG9jayBvZiBzdGF0ZW1lbnRzLCBoYW5kbGluZyBgXCJ1c2VcbiAgLy8gc3RyaWN0XCJgIGRlY2xhcmF0aW9ucyB3aGVuIGBhbGxvd1N0cmljdGAgaXMgdHJ1ZSAodXNlZCBmb3JcbiAgLy8gZnVuY3Rpb24gYm9kaWVzKS5cblxuICBmdW5jdGlvbiBwYXJzZUJsb2NrKGFsbG93U3RyaWN0KSB7XG4gICAgdmFyIG5vZGUgPSBzdGFydE5vZGUoKSwgZmlyc3QgPSB0cnVlLCBzdHJpY3QgPSBmYWxzZSwgb2xkU3RyaWN0O1xuICAgIG5vZGUuYm9keSA9IFtdO1xuICAgIGV4cGVjdChfYnJhY2VMKTtcbiAgICB3aGlsZSAoIWVhdChfYnJhY2VSKSkge1xuICAgICAgdmFyIHN0bXQgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG4gICAgICBpZiAoZmlyc3QgJiYgYWxsb3dTdHJpY3QgJiYgaXNVc2VTdHJpY3Qoc3RtdCkpIHtcbiAgICAgICAgb2xkU3RyaWN0ID0gc3RyaWN0O1xuICAgICAgICBzZXRTdHJpY3Qoc3RyaWN0ID0gdHJ1ZSk7XG4gICAgICB9XG4gICAgICBmaXJzdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RyaWN0ICYmICFvbGRTdHJpY3QpIHNldFN0cmljdChmYWxzZSk7XG4gICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJCbG9ja1N0YXRlbWVudFwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgcmVndWxhciBgZm9yYCBsb29wLiBUaGUgZGlzYW1iaWd1YXRpb24gY29kZSBpblxuICAvLyBgcGFyc2VTdGF0ZW1lbnRgIHdpbGwgYWxyZWFkeSBoYXZlIHBhcnNlZCB0aGUgaW5pdCBzdGF0ZW1lbnQgb3JcbiAgLy8gZXhwcmVzc2lvbi5cblxuICBmdW5jdGlvbiBwYXJzZUZvcihub2RlLCBpbml0KSB7XG4gICAgbm9kZS5pbml0ID0gaW5pdDtcbiAgICBleHBlY3QoX3NlbWkpO1xuICAgIG5vZGUudGVzdCA9IHRva1R5cGUgPT09IF9zZW1pID8gbnVsbCA6IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgIGV4cGVjdChfc2VtaSk7XG4gICAgbm9kZS51cGRhdGUgPSB0b2tUeXBlID09PSBfcGFyZW5SID8gbnVsbCA6IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgIGV4cGVjdChfcGFyZW5SKTtcbiAgICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgIGxhYmVscy5wb3AoKTtcbiAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkZvclN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgYGZvcmAvYGluYCBsb29wLlxuXG4gIGZ1bmN0aW9uIHBhcnNlRm9ySW4obm9kZSwgaW5pdCkge1xuICAgIG5vZGUubGVmdCA9IGluaXQ7XG4gICAgbm9kZS5yaWdodCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgIGV4cGVjdChfcGFyZW5SKTtcbiAgICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuICAgIGxhYmVscy5wb3AoKTtcbiAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkZvckluU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgLy8gUGFyc2UgYSBsaXN0IG9mIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cblxuICBmdW5jdGlvbiBwYXJzZVZhcihub2RlLCBub0luKSB7XG4gICAgbm9kZS5kZWNsYXJhdGlvbnMgPSBbXTtcbiAgICBub2RlLmtpbmQgPSBcInZhclwiO1xuICAgIGZvciAoOzspIHtcbiAgICAgIHZhciBkZWNsID0gc3RhcnROb2RlKCk7XG4gICAgICBkZWNsLmlkID0gcGFyc2VJZGVudCgpO1xuICAgICAgaWYgKHN0cmljdCAmJiBpc1N0cmljdEJhZElkV29yZChkZWNsLmlkLm5hbWUpKVxuICAgICAgICByYWlzZShkZWNsLmlkLnN0YXJ0LCBcIkJpbmRpbmcgXCIgKyBkZWNsLmlkLm5hbWUgKyBcIiBpbiBzdHJpY3QgbW9kZVwiKTtcbiAgICAgIGRlY2wuaW5pdCA9IGVhdChfZXEpID8gcGFyc2VFeHByZXNzaW9uKHRydWUsIG5vSW4pIDogbnVsbDtcbiAgICAgIG5vZGUuZGVjbGFyYXRpb25zLnB1c2goZmluaXNoTm9kZShkZWNsLCBcIlZhcmlhYmxlRGVjbGFyYXRvclwiKSk7XG4gICAgICBpZiAoIWVhdChfY29tbWEpKSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICAvLyAjIyMgRXhwcmVzc2lvbiBwYXJzaW5nXG5cbiAgLy8gVGhlc2UgbmVzdCwgZnJvbSB0aGUgbW9zdCBnZW5lcmFsIGV4cHJlc3Npb24gdHlwZSBhdCB0aGUgdG9wIHRvXG4gIC8vICdhdG9taWMnLCBub25kaXZpc2libGUgZXhwcmVzc2lvbiB0eXBlcyBhdCB0aGUgYm90dG9tLiBNb3N0IG9mXG4gIC8vIHRoZSBmdW5jdGlvbnMgd2lsbCBzaW1wbHkgbGV0IHRoZSBmdW5jdGlvbihzKSBiZWxvdyB0aGVtIHBhcnNlLFxuICAvLyBhbmQsICppZiogdGhlIHN5bnRhY3RpYyBjb25zdHJ1Y3QgdGhleSBoYW5kbGUgaXMgcHJlc2VudCwgd3JhcFxuICAvLyB0aGUgQVNUIG5vZGUgdGhhdCB0aGUgaW5uZXIgcGFyc2VyIGdhdmUgdGhlbSBpbiBhbm90aGVyIG5vZGUuXG5cbiAgLy8gUGFyc2UgYSBmdWxsIGV4cHJlc3Npb24uIFRoZSBhcmd1bWVudHMgYXJlIHVzZWQgdG8gZm9yYmlkIGNvbW1hXG4gIC8vIHNlcXVlbmNlcyAoaW4gYXJndW1lbnQgbGlzdHMsIGFycmF5IGxpdGVyYWxzLCBvciBvYmplY3QgbGl0ZXJhbHMpXG4gIC8vIG9yIHRoZSBgaW5gIG9wZXJhdG9yIChpbiBmb3IgbG9vcHMgaW5pdGFsaXphdGlvbiBleHByZXNzaW9ucykuXG5cbiAgZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uKG5vQ29tbWEsIG5vSW4pIHtcbiAgICB2YXIgZXhwciA9IHBhcnNlTWF5YmVBc3NpZ24obm9Jbik7XG4gICAgaWYgKCFub0NvbW1hICYmIHRva1R5cGUgPT09IF9jb21tYSkge1xuICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGVGcm9tKGV4cHIpO1xuICAgICAgbm9kZS5leHByZXNzaW9ucyA9IFtleHByXTtcbiAgICAgIHdoaWxlIChlYXQoX2NvbW1hKSkgbm9kZS5leHByZXNzaW9ucy5wdXNoKHBhcnNlTWF5YmVBc3NpZ24obm9JbikpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIik7XG4gICAgfVxuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLy8gUGFyc2UgYW4gYXNzaWdubWVudCBleHByZXNzaW9uLiBUaGlzIGluY2x1ZGVzIGFwcGxpY2F0aW9ucyBvZlxuICAvLyBvcGVyYXRvcnMgbGlrZSBgKz1gLlxuXG4gIGZ1bmN0aW9uIHBhcnNlTWF5YmVBc3NpZ24obm9Jbikge1xuICAgIHZhciBsZWZ0ID0gcGFyc2VNYXliZUNvbmRpdGlvbmFsKG5vSW4pO1xuICAgIGlmICh0b2tUeXBlLmlzQXNzaWduKSB7XG4gICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZUZyb20obGVmdCk7XG4gICAgICBub2RlLm9wZXJhdG9yID0gdG9rVmFsO1xuICAgICAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgICAgIG5leHQoKTtcbiAgICAgIG5vZGUucmlnaHQgPSBwYXJzZU1heWJlQXNzaWduKG5vSW4pO1xuICAgICAgY2hlY2tMVmFsKGxlZnQpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH1cblxuICAvLyBQYXJzZSBhIHRlcm5hcnkgY29uZGl0aW9uYWwgKGA/OmApIG9wZXJhdG9yLlxuXG4gIGZ1bmN0aW9uIHBhcnNlTWF5YmVDb25kaXRpb25hbChub0luKSB7XG4gICAgdmFyIGV4cHIgPSBwYXJzZUV4cHJPcHMobm9Jbik7XG4gICAgaWYgKGVhdChfcXVlc3Rpb24pKSB7XG4gICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZUZyb20oZXhwcik7XG4gICAgICBub2RlLnRlc3QgPSBleHByO1xuICAgICAgbm9kZS5jb25zZXF1ZW50ID0gcGFyc2VFeHByZXNzaW9uKHRydWUpO1xuICAgICAgZXhwZWN0KF9jb2xvbik7XG4gICAgICBub2RlLmFsdGVybmF0ZSA9IHBhcnNlRXhwcmVzc2lvbih0cnVlLCBub0luKTtcbiAgICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8vIFN0YXJ0IHRoZSBwcmVjZWRlbmNlIHBhcnNlci5cblxuICBmdW5jdGlvbiBwYXJzZUV4cHJPcHMobm9Jbikge1xuICAgIHJldHVybiBwYXJzZUV4cHJPcChwYXJzZU1heWJlVW5hcnkoKSwgLTEsIG5vSW4pO1xuICB9XG5cbiAgLy8gUGFyc2UgYmluYXJ5IG9wZXJhdG9ycyB3aXRoIHRoZSBvcGVyYXRvciBwcmVjZWRlbmNlIHBhcnNpbmdcbiAgLy8gYWxnb3JpdGhtLiBgbGVmdGAgaXMgdGhlIGxlZnQtaGFuZCBzaWRlIG9mIHRoZSBvcGVyYXRvci5cbiAgLy8gYG1pblByZWNgIHByb3ZpZGVzIGNvbnRleHQgdGhhdCBhbGxvd3MgdGhlIGZ1bmN0aW9uIHRvIHN0b3AgYW5kXG4gIC8vIGRlZmVyIGZ1cnRoZXIgcGFyc2VyIHRvIG9uZSBvZiBpdHMgY2FsbGVycyB3aGVuIGl0IGVuY291bnRlcnMgYW5cbiAgLy8gb3BlcmF0b3IgdGhhdCBoYXMgYSBsb3dlciBwcmVjZWRlbmNlIHRoYW4gdGhlIHNldCBpdCBpcyBwYXJzaW5nLlxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwck9wKGxlZnQsIG1pblByZWMsIG5vSW4pIHtcbiAgICB2YXIgcHJlYyA9IHRva1R5cGUuYmlub3A7XG4gICAgaWYgKHByZWMgIT0gbnVsbCAmJiAoIW5vSW4gfHwgdG9rVHlwZSAhPT0gX2luKSkge1xuICAgICAgaWYgKHByZWMgPiBtaW5QcmVjKSB7XG4gICAgICAgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShsZWZ0KTtcbiAgICAgICAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgbm9kZS5vcGVyYXRvciA9IHRva1ZhbDtcbiAgICAgICAgdmFyIG9wID0gdG9rVHlwZTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgICBub2RlLnJpZ2h0ID0gcGFyc2VFeHByT3AocGFyc2VNYXliZVVuYXJ5KCksIHByZWMsIG5vSW4pO1xuICAgICAgICB2YXIgZXhwck5vZGUgPSBmaW5pc2hOb2RlKG5vZGUsIChvcCA9PT0gX2xvZ2ljYWxPUiB8fCBvcCA9PT0gX2xvZ2ljYWxBTkQpID8gXCJMb2dpY2FsRXhwcmVzc2lvblwiIDogXCJCaW5hcnlFeHByZXNzaW9uXCIpO1xuICAgICAgICByZXR1cm4gcGFyc2VFeHByT3AoZXhwck5vZGUsIG1pblByZWMsIG5vSW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfVxuXG4gIC8vIFBhcnNlIHVuYXJ5IG9wZXJhdG9ycywgYm90aCBwcmVmaXggYW5kIHBvc3RmaXguXG5cbiAgZnVuY3Rpb24gcGFyc2VNYXliZVVuYXJ5KCkge1xuICAgIGlmICh0b2tUeXBlLnByZWZpeCkge1xuICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGUoKSwgdXBkYXRlID0gdG9rVHlwZS5pc1VwZGF0ZTtcbiAgICAgIG5vZGUub3BlcmF0b3IgPSB0b2tWYWw7XG4gICAgICBub2RlLnByZWZpeCA9IHRydWU7XG4gICAgICB0b2tSZWdleHBBbGxvd2VkID0gdHJ1ZTtcbiAgICAgIG5leHQoKTtcbiAgICAgIG5vZGUuYXJndW1lbnQgPSBwYXJzZU1heWJlVW5hcnkoKTtcbiAgICAgIGlmICh1cGRhdGUpIGNoZWNrTFZhbChub2RlLmFyZ3VtZW50KTtcbiAgICAgIGVsc2UgaWYgKHN0cmljdCAmJiBub2RlLm9wZXJhdG9yID09PSBcImRlbGV0ZVwiICYmXG4gICAgICAgICAgICAgICBub2RlLmFyZ3VtZW50LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKVxuICAgICAgICByYWlzZShub2RlLnN0YXJ0LCBcIkRlbGV0aW5nIGxvY2FsIHZhcmlhYmxlIGluIHN0cmljdCBtb2RlXCIpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgdXBkYXRlID8gXCJVcGRhdGVFeHByZXNzaW9uXCIgOiBcIlVuYXJ5RXhwcmVzc2lvblwiKTtcbiAgICB9XG4gICAgdmFyIGV4cHIgPSBwYXJzZUV4cHJTdWJzY3JpcHRzKCk7XG4gICAgd2hpbGUgKHRva1R5cGUucG9zdGZpeCAmJiAhY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShleHByKTtcbiAgICAgIG5vZGUub3BlcmF0b3IgPSB0b2tWYWw7XG4gICAgICBub2RlLnByZWZpeCA9IGZhbHNlO1xuICAgICAgbm9kZS5hcmd1bWVudCA9IGV4cHI7XG4gICAgICBjaGVja0xWYWwoZXhwcik7XG4gICAgICBuZXh0KCk7XG4gICAgICBleHByID0gZmluaXNoTm9kZShub2RlLCBcIlVwZGF0ZUV4cHJlc3Npb25cIik7XG4gICAgfVxuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLy8gUGFyc2UgY2FsbCwgZG90LCBhbmQgYFtdYC1zdWJzY3JpcHQgZXhwcmVzc2lvbnMuXG5cbiAgZnVuY3Rpb24gcGFyc2VFeHByU3Vic2NyaXB0cygpIHtcbiAgICByZXR1cm4gcGFyc2VTdWJzY3JpcHRzKHBhcnNlRXhwckF0b20oKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN1YnNjcmlwdHMoYmFzZSwgbm9DYWxscykge1xuICAgIGlmIChlYXQoX2RvdCkpIHtcbiAgICAgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShiYXNlKTtcbiAgICAgIG5vZGUub2JqZWN0ID0gYmFzZTtcbiAgICAgIG5vZGUucHJvcGVydHkgPSBwYXJzZUlkZW50KHRydWUpO1xuICAgICAgbm9kZS5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHBhcnNlU3Vic2NyaXB0cyhmaW5pc2hOb2RlKG5vZGUsIFwiTWVtYmVyRXhwcmVzc2lvblwiKSwgbm9DYWxscyk7XG4gICAgfSBlbHNlIGlmIChlYXQoX2JyYWNrZXRMKSkge1xuICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGVGcm9tKGJhc2UpO1xuICAgICAgbm9kZS5vYmplY3QgPSBiYXNlO1xuICAgICAgbm9kZS5wcm9wZXJ0eSA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgbm9kZS5jb21wdXRlZCA9IHRydWU7XG4gICAgICBleHBlY3QoX2JyYWNrZXRSKTtcbiAgICAgIHJldHVybiBwYXJzZVN1YnNjcmlwdHMoZmluaXNoTm9kZShub2RlLCBcIk1lbWJlckV4cHJlc3Npb25cIiksIG5vQ2FsbHMpO1xuICAgIH0gZWxzZSBpZiAoIW5vQ2FsbHMgJiYgZWF0KF9wYXJlbkwpKSB7XG4gICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZUZyb20oYmFzZSk7XG4gICAgICBub2RlLmNhbGxlZSA9IGJhc2U7XG4gICAgICBub2RlLmFyZ3VtZW50cyA9IHBhcnNlRXhwckxpc3QoX3BhcmVuUiwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHBhcnNlU3Vic2NyaXB0cyhmaW5pc2hOb2RlKG5vZGUsIFwiQ2FsbEV4cHJlc3Npb25cIiksIG5vQ2FsbHMpO1xuICAgIH0gZWxzZSByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIC8vIFBhcnNlIGFuIGF0b21pYyBleHByZXNzaW9uIOKAlCBlaXRoZXIgYSBzaW5nbGUgdG9rZW4gdGhhdCBpcyBhblxuICAvLyBleHByZXNzaW9uLCBhbiBleHByZXNzaW9uIHN0YXJ0ZWQgYnkgYSBrZXl3b3JkIGxpa2UgYGZ1bmN0aW9uYCBvclxuICAvLyBgbmV3YCwgb3IgYW4gZXhwcmVzc2lvbiB3cmFwcGVkIGluIHB1bmN0dWF0aW9uIGxpa2UgYCgpYCwgYFtdYCxcbiAgLy8gb3IgYHt9YC5cblxuICBmdW5jdGlvbiBwYXJzZUV4cHJBdG9tKCkge1xuICAgIHN3aXRjaCAodG9rVHlwZSkge1xuICAgIGNhc2UgX3RoaXM6XG4gICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuICAgICAgbmV4dCgpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJUaGlzRXhwcmVzc2lvblwiKTtcbiAgICBjYXNlIF9uYW1lOlxuICAgICAgcmV0dXJuIHBhcnNlSWRlbnQoKTtcbiAgICBjYXNlIF9udW06IGNhc2UgX3N0cmluZzogY2FzZSBfcmVnZXhwOlxuICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGUoKTtcbiAgICAgIG5vZGUudmFsdWUgPSB0b2tWYWw7XG4gICAgICBub2RlLnJhdyA9IGlucHV0LnNsaWNlKHRva1N0YXJ0LCB0b2tFbmQpO1xuICAgICAgbmV4dCgpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpO1xuXG4gICAgY2FzZSBfbnVsbDogY2FzZSBfdHJ1ZTogY2FzZSBfZmFsc2U6XG4gICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZS52YWx1ZSA9IHRva1R5cGUuYXRvbVZhbHVlO1xuICAgICAgbm9kZS5yYXcgPSB0b2tUeXBlLmtleXdvcmQ7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkxpdGVyYWxcIik7XG5cbiAgICBjYXNlIF9wYXJlbkw6XG4gICAgICB2YXIgdG9rU3RhcnRMb2MxID0gdG9rU3RhcnRMb2MsIHRva1N0YXJ0MSA9IHRva1N0YXJ0O1xuICAgICAgbmV4dCgpO1xuICAgICAgdmFyIHZhbCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdmFsLnN0YXJ0ID0gdG9rU3RhcnQxO1xuICAgICAgdmFsLmVuZCA9IHRva0VuZDtcbiAgICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgICB2YWwubG9jLnN0YXJ0ID0gdG9rU3RhcnRMb2MxO1xuICAgICAgICB2YWwubG9jLmVuZCA9IHRva0VuZExvYztcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnJhbmdlcylcbiAgICAgICAgdmFsLnJhbmdlID0gW3Rva1N0YXJ0MSwgdG9rRW5kXTtcbiAgICAgIGV4cGVjdChfcGFyZW5SKTtcbiAgICAgIHJldHVybiB2YWw7XG5cbiAgICBjYXNlIF9icmFja2V0TDpcbiAgICAgIHZhciBub2RlID0gc3RhcnROb2RlKCk7XG4gICAgICBuZXh0KCk7XG4gICAgICBub2RlLmVsZW1lbnRzID0gcGFyc2VFeHByTGlzdChfYnJhY2tldFIsIHRydWUsIHRydWUpO1xuICAgICAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJBcnJheUV4cHJlc3Npb25cIik7XG5cbiAgICBjYXNlIF9icmFjZUw6XG4gICAgICByZXR1cm4gcGFyc2VPYmooKTtcblxuICAgIGNhc2UgX2Z1bmN0aW9uOlxuICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGUoKTtcbiAgICAgIG5leHQoKTtcbiAgICAgIHJldHVybiBwYXJzZUZ1bmN0aW9uKG5vZGUsIGZhbHNlKTtcblxuICAgIGNhc2UgX25ldzpcbiAgICAgIHJldHVybiBwYXJzZU5ldygpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHVuZXhwZWN0ZWQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBOZXcncyBwcmVjZWRlbmNlIGlzIHNsaWdodGx5IHRyaWNreS4gSXQgbXVzdCBhbGxvdyBpdHMgYXJndW1lbnRcbiAgLy8gdG8gYmUgYSBgW11gIG9yIGRvdCBzdWJzY3JpcHQgZXhwcmVzc2lvbiwgYnV0IG5vdCBhIGNhbGwg4oCUIGF0XG4gIC8vIGxlYXN0LCBub3Qgd2l0aG91dCB3cmFwcGluZyBpdCBpbiBwYXJlbnRoZXNlcy4gVGh1cywgaXQgdXNlcyB0aGVcblxuICBmdW5jdGlvbiBwYXJzZU5ldygpIHtcbiAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuICAgIG5leHQoKTtcbiAgICBub2RlLmNhbGxlZSA9IHBhcnNlU3Vic2NyaXB0cyhwYXJzZUV4cHJBdG9tKCksIHRydWUpO1xuICAgIGlmIChlYXQoX3BhcmVuTCkpIG5vZGUuYXJndW1lbnRzID0gcGFyc2VFeHByTGlzdChfcGFyZW5SLCBmYWxzZSk7XG4gICAgZWxzZSBub2RlLmFyZ3VtZW50cyA9IGVtcHR5O1xuICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiTmV3RXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGFuIG9iamVjdCBsaXRlcmFsLlxuXG4gIGZ1bmN0aW9uIHBhcnNlT2JqKCkge1xuICAgIHZhciBub2RlID0gc3RhcnROb2RlKCksIGZpcnN0ID0gdHJ1ZSwgc2F3R2V0U2V0ID0gZmFsc2U7XG4gICAgbm9kZS5wcm9wZXJ0aWVzID0gW107XG4gICAgbmV4dCgpO1xuICAgIHdoaWxlICghZWF0KF9icmFjZVIpKSB7XG4gICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgIGV4cGVjdChfY29tbWEpO1xuICAgICAgICBpZiAob3B0aW9ucy5hbGxvd1RyYWlsaW5nQ29tbWFzICYmIGVhdChfYnJhY2VSKSkgYnJlYWs7XG4gICAgICB9IGVsc2UgZmlyc3QgPSBmYWxzZTtcblxuICAgICAgdmFyIHByb3AgPSB7a2V5OiBwYXJzZVByb3BlcnR5TmFtZSgpfSwgaXNHZXRTZXQgPSBmYWxzZSwga2luZDtcbiAgICAgIGlmIChlYXQoX2NvbG9uKSkge1xuICAgICAgICBwcm9wLnZhbHVlID0gcGFyc2VFeHByZXNzaW9uKHRydWUpO1xuICAgICAgICBraW5kID0gcHJvcC5raW5kID0gXCJpbml0XCI7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNSAmJiBwcm9wLmtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgICAgICAgICAgICAocHJvcC5rZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBwcm9wLmtleS5uYW1lID09PSBcInNldFwiKSkge1xuICAgICAgICBpc0dldFNldCA9IHNhd0dldFNldCA9IHRydWU7XG4gICAgICAgIGtpbmQgPSBwcm9wLmtpbmQgPSBwcm9wLmtleS5uYW1lO1xuICAgICAgICBwcm9wLmtleSA9IHBhcnNlUHJvcGVydHlOYW1lKCk7XG4gICAgICAgIGlmICh0b2tUeXBlICE9PSBfcGFyZW5MKSB1bmV4cGVjdGVkKCk7XG4gICAgICAgIHByb3AudmFsdWUgPSBwYXJzZUZ1bmN0aW9uKHN0YXJ0Tm9kZSgpLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgdW5leHBlY3RlZCgpO1xuXG4gICAgICAvLyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGFyZSBub3QgYWxsb3dlZCB0byBjbGFzaCDigJQgZWl0aGVyIHdpdGhcbiAgICAgIC8vIGVhY2ggb3RoZXIgb3Igd2l0aCBhbiBpbml0IHByb3BlcnR5IOKAlCBhbmQgaW4gc3RyaWN0IG1vZGUsXG4gICAgICAvLyBpbml0IHByb3BlcnRpZXMgYXJlIGFsc28gbm90IGFsbG93ZWQgdG8gYmUgcmVwZWF0ZWQuXG5cbiAgICAgIGlmIChwcm9wLmtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiAoc3RyaWN0IHx8IHNhd0dldFNldCkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLnByb3BlcnRpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YXIgb3RoZXIgPSBub2RlLnByb3BlcnRpZXNbaV07XG4gICAgICAgICAgaWYgKG90aGVyLmtleS5uYW1lID09PSBwcm9wLmtleS5uYW1lKSB7XG4gICAgICAgICAgICB2YXIgY29uZmxpY3QgPSBraW5kID09IG90aGVyLmtpbmQgfHwgaXNHZXRTZXQgJiYgb3RoZXIua2luZCA9PT0gXCJpbml0XCIgfHxcbiAgICAgICAgICAgICAga2luZCA9PT0gXCJpbml0XCIgJiYgKG90aGVyLmtpbmQgPT09IFwiZ2V0XCIgfHwgb3RoZXIua2luZCA9PT0gXCJzZXRcIik7XG4gICAgICAgICAgICBpZiAoY29uZmxpY3QgJiYgIXN0cmljdCAmJiBraW5kID09PSBcImluaXRcIiAmJiBvdGhlci5raW5kID09PSBcImluaXRcIikgY29uZmxpY3QgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjb25mbGljdCkgcmFpc2UocHJvcC5rZXkuc3RhcnQsIFwiUmVkZWZpbml0aW9uIG9mIHByb3BlcnR5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9kZS5wcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gICAgfVxuICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiT2JqZWN0RXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUHJvcGVydHlOYW1lKCkge1xuICAgIGlmICh0b2tUeXBlID09PSBfbnVtIHx8IHRva1R5cGUgPT09IF9zdHJpbmcpIHJldHVybiBwYXJzZUV4cHJBdG9tKCk7XG4gICAgcmV0dXJuIHBhcnNlSWRlbnQodHJ1ZSk7XG4gIH1cblxuICAvLyBQYXJzZSBhIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIG9yIGxpdGVyYWwgKGRlcGVuZGluZyBvbiB0aGVcbiAgLy8gYGlzU3RhdGVtZW50YCBwYXJhbWV0ZXIpLlxuXG4gIGZ1bmN0aW9uIHBhcnNlRnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcbiAgICBpZiAodG9rVHlwZSA9PT0gX25hbWUpIG5vZGUuaWQgPSBwYXJzZUlkZW50KCk7XG4gICAgZWxzZSBpZiAoaXNTdGF0ZW1lbnQpIHVuZXhwZWN0ZWQoKTtcbiAgICBlbHNlIG5vZGUuaWQgPSBudWxsO1xuICAgIG5vZGUucGFyYW1zID0gW107XG4gICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICBleHBlY3QoX3BhcmVuTCk7XG4gICAgd2hpbGUgKCFlYXQoX3BhcmVuUikpIHtcbiAgICAgIGlmICghZmlyc3QpIGV4cGVjdChfY29tbWEpOyBlbHNlIGZpcnN0ID0gZmFsc2U7XG4gICAgICBub2RlLnBhcmFtcy5wdXNoKHBhcnNlSWRlbnQoKSk7XG4gICAgfVxuXG4gICAgLy8gU3RhcnQgYSBuZXcgc2NvcGUgd2l0aCByZWdhcmQgdG8gbGFiZWxzIGFuZCB0aGUgYGluRnVuY3Rpb25gXG4gICAgLy8gZmxhZyAocmVzdG9yZSB0aGVtIHRvIHRoZWlyIG9sZCB2YWx1ZSBhZnRlcndhcmRzKS5cbiAgICB2YXIgb2xkSW5GdW5jID0gaW5GdW5jdGlvbiwgb2xkTGFiZWxzID0gbGFiZWxzO1xuICAgIGluRnVuY3Rpb24gPSB0cnVlOyBsYWJlbHMgPSBbXTtcbiAgICBub2RlLmJvZHkgPSBwYXJzZUJsb2NrKHRydWUpO1xuICAgIGluRnVuY3Rpb24gPSBvbGRJbkZ1bmM7IGxhYmVscyA9IG9sZExhYmVscztcblxuICAgIC8vIElmIHRoaXMgaXMgYSBzdHJpY3QgbW9kZSBmdW5jdGlvbiwgdmVyaWZ5IHRoYXQgYXJndW1lbnQgbmFtZXNcbiAgICAvLyBhcmUgbm90IHJlcGVhdGVkLCBhbmQgaXQgZG9lcyBub3QgdHJ5IHRvIGJpbmQgdGhlIHdvcmRzIGBldmFsYFxuICAgIC8vIG9yIGBhcmd1bWVudHNgLlxuICAgIGlmIChzdHJpY3QgfHwgbm9kZS5ib2R5LmJvZHkubGVuZ3RoICYmIGlzVXNlU3RyaWN0KG5vZGUuYm9keS5ib2R5WzBdKSkge1xuICAgICAgZm9yICh2YXIgaSA9IG5vZGUuaWQgPyAtMSA6IDA7IGkgPCBub2RlLnBhcmFtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaWQgPSBpIDwgMCA/IG5vZGUuaWQgOiBub2RlLnBhcmFtc1tpXTtcbiAgICAgICAgaWYgKGlzU3RyaWN0UmVzZXJ2ZWRXb3JkKGlkLm5hbWUpIHx8IGlzU3RyaWN0QmFkSWRXb3JkKGlkLm5hbWUpKVxuICAgICAgICAgIHJhaXNlKGlkLnN0YXJ0LCBcIkRlZmluaW5nICdcIiArIGlkLm5hbWUgKyBcIicgaW4gc3RyaWN0IG1vZGVcIik7XG4gICAgICAgIGlmIChpID49IDApIGZvciAodmFyIGogPSAwOyBqIDwgaTsgKytqKSBpZiAoaWQubmFtZSA9PT0gbm9kZS5wYXJhbXNbal0ubmFtZSlcbiAgICAgICAgICByYWlzZShpZC5zdGFydCwgXCJBcmd1bWVudCBuYW1lIGNsYXNoIGluIHN0cmljdCBtb2RlXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIGlzU3RhdGVtZW50ID8gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGV4cHJlc3Npb25zLCBhbmQgcmV0dXJucyB0aGVtIGFzXG4gIC8vIGFuIGFycmF5LiBgY2xvc2VgIGlzIHRoZSB0b2tlbiB0eXBlIHRoYXQgZW5kcyB0aGUgbGlzdCwgYW5kXG4gIC8vIGBhbGxvd0VtcHR5YCBjYW4gYmUgdHVybmVkIG9uIHRvIGFsbG93IHN1YnNlcXVlbnQgY29tbWFzIHdpdGhcbiAgLy8gbm90aGluZyBpbiBiZXR3ZWVuIHRoZW0gdG8gYmUgcGFyc2VkIGFzIGBudWxsYCAod2hpY2ggaXMgbmVlZGVkXG4gIC8vIGZvciBhcnJheSBsaXRlcmFscykuXG5cbiAgZnVuY3Rpb24gcGFyc2VFeHByTGlzdChjbG9zZSwgYWxsb3dUcmFpbGluZ0NvbW1hLCBhbGxvd0VtcHR5KSB7XG4gICAgdmFyIGVsdHMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICAgIHdoaWxlICghZWF0KGNsb3NlKSkge1xuICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICBleHBlY3QoX2NvbW1hKTtcbiAgICAgICAgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiBvcHRpb25zLmFsbG93VHJhaWxpbmdDb21tYXMgJiYgZWF0KGNsb3NlKSkgYnJlYWs7XG4gICAgICB9IGVsc2UgZmlyc3QgPSBmYWxzZTtcblxuICAgICAgaWYgKGFsbG93RW1wdHkgJiYgdG9rVHlwZSA9PT0gX2NvbW1hKSBlbHRzLnB1c2gobnVsbCk7XG4gICAgICBlbHNlIGVsdHMucHVzaChwYXJzZUV4cHJlc3Npb24odHJ1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZWx0cztcbiAgfVxuXG4gIC8vIFBhcnNlIHRoZSBuZXh0IHRva2VuIGFzIGFuIGlkZW50aWZpZXIuIElmIGBsaWJlcmFsYCBpcyB0cnVlICh1c2VkXG4gIC8vIHdoZW4gcGFyc2luZyBwcm9wZXJ0aWVzKSwgaXQgd2lsbCBhbHNvIGNvbnZlcnQga2V5d29yZHMgaW50b1xuICAvLyBpZGVudGlmaWVycy5cblxuICBmdW5jdGlvbiBwYXJzZUlkZW50KGxpYmVyYWwpIHtcbiAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuICAgIG5vZGUubmFtZSA9IHRva1R5cGUgPT09IF9uYW1lID8gdG9rVmFsIDogKGxpYmVyYWwgJiYgIW9wdGlvbnMuZm9yYmlkUmVzZXJ2ZWQgJiYgdG9rVHlwZS5rZXl3b3JkKSB8fCB1bmV4cGVjdGVkKCk7XG4gICAgdG9rUmVnZXhwQWxsb3dlZCA9IGZhbHNlO1xuICAgIG5leHQoKTtcbiAgICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIklkZW50aWZpZXJcIik7XG4gIH1cblxufSk7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBKYXZhU2NyaXB0IEludGVycHJldGVyXG4gKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBJbnRlcnByZXRpbmcgSmF2YVNjcmlwdCBpbiBKYXZhU2NyaXB0LlxuICogQGF1dGhvciBmcmFzZXJAZ29vZ2xlLmNvbSAoTmVpbCBGcmFzZXIpXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGFjb3JuID0gcmVxdWlyZSgnLi9hY29ybicpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnRlcnByZXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfCFPYmplY3R9IGNvZGUgUmF3IEphdmFTY3JpcHQgdGV4dCBvciBBU1QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0X2luaXRGdW5jIE9wdGlvbmFsIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLiAgVXNlZCB0b1xuICogICAgIGRlZmluZSBBUElzLiAgV2hlbiBjYWxsZWQgaXQgaXMgcGFzc2VkIHRoZSBpbnRlcnByZXRlciBvYmplY3QgYW5kIHRoZVxuICogICAgIGdsb2JhbCBzY29wZSBvYmplY3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIEludGVycHJldGVyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb2RlLCBvcHRfaW5pdEZ1bmMpIHtcbiAgaWYgKHR5cGVvZiBjb2RlID09ICdzdHJpbmcnKSB7XG4gICAgY29kZSA9IGFjb3JuLnBhcnNlKGNvZGUsIEludGVycHJldGVyLlBBUlNFX09QVElPTlMpO1xuICB9XG4gIHRoaXMuYXN0ID0gY29kZTtcbiAgdGhpcy5pbml0RnVuY18gPSBvcHRfaW5pdEZ1bmM7XG4gIHRoaXMucGF1c2VkXyA9IGZhbHNlO1xuICB0aGlzLnBvbHlmaWxsc18gPSBbXTtcbiAgLy8gVW5pcXVlIGlkZW50aWZpZXIgZm9yIG5hdGl2ZSBmdW5jdGlvbnMuICBVc2VkIGluIHNlcmlhbGl6YXRpb24uXG4gIHRoaXMuZnVuY3Rpb25Db3VudGVyXyA9IDA7XG4gIC8vIE1hcCBub2RlIHR5cGVzIHRvIG91ciBzdGVwIGZ1bmN0aW9uIG5hbWVzOyBhIHByb3BlcnR5IGxvb2t1cCBpcyBmYXN0ZXJcbiAgLy8gdGhhbiBzdHJpbmcgY29uY2F0ZW5hdGlvbiB3aXRoIFwic3RlcFwiIHByZWZpeC5cbiAgdGhpcy5mdW5jdGlvbk1hcF8gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RlcE1hdGNoID0gL15zdGVwKFtBLVpdXFx3KikkLztcbiAgdmFyIG07XG4gIGZvciAodmFyIG1ldGhvZE5hbWUgaW4gdGhpcykge1xuICAgIGlmIChtID0gbWV0aG9kTmFtZS5tYXRjaChzdGVwTWF0Y2gpKSB7XG4gICAgICB0aGlzLmZ1bmN0aW9uTWFwX1ttWzFdXSA9IHRoaXNbbWV0aG9kTmFtZV0uYmluZCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gRGVjbGFyZSBzb21lIG1vY2sgY29uc3RydWN0b3JzIHRvIGdldCB0aGUgZW52aXJvbm1lbnQgYm9vdHN0cmFwcGVkLlxuICB2YXIgbW9ja09iamVjdCA9IHtwcm9wZXJ0aWVzOiB7cHJvdG90eXBlOiBudWxsfX07XG4gIHRoaXMuTlVNQkVSID0gbW9ja09iamVjdDtcbiAgdGhpcy5CT09MRUFOID0gbW9ja09iamVjdDtcbiAgdGhpcy5TVFJJTkcgPSBtb2NrT2JqZWN0O1xuICAvLyBQcmVkZWZpbmUgc29tZSBjb21tb24gcHJpbWl0aXZlcyBmb3IgcGVyZm9ybWFuY2UuXG4gIHRoaXMuVU5ERUZJTkVEID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZSh1bmRlZmluZWQsIHRoaXMpO1xuICB0aGlzLk5VTEwgPSBuZXcgSW50ZXJwcmV0ZXIuUHJpbWl0aXZlKG51bGwsIHRoaXMpO1xuICB0aGlzLk5BTiA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoTmFOLCB0aGlzKTtcbiAgdGhpcy5UUlVFID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZSh0cnVlLCB0aGlzKTtcbiAgdGhpcy5GQUxTRSA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoZmFsc2UsIHRoaXMpO1xuICB0aGlzLk5VTUJFUl9aRVJPID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZSgwLCB0aGlzKTtcbiAgdGhpcy5OVU1CRVJfT05FID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZSgxLCB0aGlzKTtcbiAgdGhpcy5TVFJJTkdfRU1QVFkgPSBuZXcgSW50ZXJwcmV0ZXIuUHJpbWl0aXZlKCcnLCB0aGlzKTtcbiAgLy8gQ3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBnbG9iYWwgc2NvcGUuXG4gIHRoaXMuZ2xvYmFsID0gdGhpcy5jcmVhdGVTY29wZSh0aGlzLmFzdCwgbnVsbCk7XG4gIC8vIEZpeCB0aGUgcHJvdG8gcHJvcGVydGllcyBub3cgdGhhdCB0aGUgZ2xvYmFsIHNjb3BlIGV4aXN0cy5cbiAgLy90aGlzLlVOREVGSU5FRC5wcm90byA9IHVuZGVmaW5lZDtcbiAgLy90aGlzLk5VTEwucHJvdG8gPSB1bmRlZmluZWQ7XG4gIHRoaXMuTkFOLnByb3RvID0gdGhpcy5OVU1CRVIucHJvcGVydGllc1sncHJvdG90eXBlJ107XG4gIHRoaXMuVFJVRS5wcm90byA9IHRoaXMuQk9PTEVBTi5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXTtcbiAgdGhpcy5GQUxTRS5wcm90byA9IHRoaXMuQk9PTEVBTi5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXTtcbiAgdGhpcy5OVU1CRVJfWkVSTy5wcm90byA9IHRoaXMuTlVNQkVSLnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddO1xuICB0aGlzLk5VTUJFUl9PTkUucHJvdG8gPSB0aGlzLk5VTUJFUi5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXTtcbiAgdGhpcy5TVFJJTkdfRU1QVFkucHJvdG8gPSB0aGlzLlNUUklORy5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXTtcbiAgLy8gUnVuIHRoZSBwb2x5ZmlsbHMuXG4gIHRoaXMuYXN0ID0gYWNvcm4ucGFyc2UodGhpcy5wb2x5ZmlsbHNfLmpvaW4oJ1xcbicpLCBJbnRlcnByZXRlci5QQVJTRV9PUFRJT05TKTtcbiAgdGhpcy5wb2x5ZmlsbHNfID0gdW5kZWZpbmVkOyAgLy8gQWxsb3cgcG9seWZpbGwgc3RyaW5ncyB0byBnYXJiYWdlIGNvbGxlY3QuXG4gIHRoaXMuc3RyaXBMb2NhdGlvbnNfKHRoaXMuYXN0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gIHRoaXMuc3RhdGVTdGFjayA9IFt7XG4gICAgbm9kZTogdGhpcy5hc3QsXG4gICAgc2NvcGU6IHRoaXMuZ2xvYmFsLFxuICAgIHRoaXNFeHByZXNzaW9uOiB0aGlzLmdsb2JhbCxcbiAgICBkb25lOiBmYWxzZVxuICB9XTtcbiAgdGhpcy5ydW4oKTtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuVU5ERUZJTkVEO1xuICAvLyBQb2ludCBhdCB0aGUgbWFpbiBwcm9ncmFtLlxuICB0aGlzLmFzdCA9IGNvZGU7XG4gIHRoaXMuc3RhdGVTdGFjayA9IFt7XG4gICAgbm9kZTogdGhpcy5hc3QsXG4gICAgc2NvcGU6IHRoaXMuZ2xvYmFsLFxuICAgIHRoaXNFeHByZXNzaW9uOiB0aGlzLmdsb2JhbCxcbiAgICBkb25lOiBmYWxzZVxuICB9XTtcbiAgLy8gUHJlc2VydmUgcHVibGljbHkgcHJvcGVydGllcyBmcm9tIGJlaW5nIHBydW5lZC9yZW5hbWVkIGJ5IEpTIGNvbXBpbGVycy5cbiAgLy8gQWRkIG90aGVycyBhcyBuZWVkZWQuXG4gIHRoaXNbJ1VOREVGSU5FRCddID0gdGhpcy5VTkRFRklORUQ7XG4gIHRoaXNbJ05VTEwnXSA9IHRoaXMuTlVMTDtcbiAgdGhpc1snTkFOJ10gPSB0aGlzLk5BTjtcbiAgdGhpc1snVFJVRSddID0gdGhpcy5UUlVFO1xuICB0aGlzWydGQUxTRSddID0gdGhpcy5GQUxTRTtcbn07XG5cbi8qKlxuICogQGNvbnN0IHshT2JqZWN0fSBDb25maWd1cmF0aW9uIHVzZWQgZm9yIGFsbCBBY29ybiBwYXJzaW5nLlxuICovXG5JbnRlcnByZXRlci5QQVJTRV9PUFRJT05TID0ge1xuICBlY21hVmVyc2lvbjogNVxufTtcblxuLyoqXG4gKiBQcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIHJlYWRvbmx5IHByb3BlcnRpZXMuXG4gKi9cbkludGVycHJldGVyLlJFQURPTkxZX0RFU0NSSVBUT1IgPSB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IGZhbHNlXG59O1xuXG4vKipcbiAqIFByb3BlcnR5IGRlc2NyaXB0b3Igb2Ygbm9uLWVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqL1xuSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SID0ge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICB3cml0YWJsZTogdHJ1ZVxufTtcblxuLyoqXG4gKiBQcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIHJlYWRvbmx5LCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICovXG5JbnRlcnByZXRlci5SRUFET05MWV9OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IgPSB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIHdyaXRhYmxlOiBmYWxzZVxufTtcblxuLy8gRm9yIGN5Y2xlIGRldGVjdGlvbiBpbiBhcnJheSB0byBzdHJpbmcgYW5kIGVycm9yIGNvbnZlcnNpb247XG4vLyBzZWUgc3BlYyBidWcgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mi9pc3N1ZXMvMjg5XG4vLyBTaW5jZSB0aGlzIGlzIGZvciBhdG9taWMgYWN0aW9ucyBvbmx5LCBpdCBjYW4gYmUgYSBjbGFzcyBwcm9wZXJ0eS5cbkludGVycHJldGVyLnRvU3RyaW5nQ3ljbGVzXyA9IFtdO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYWJzdHJhY3Qgc3ludGF4IHRyZWUgZnJvbSBhIHN0cmluZyBvZiBjb2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIFJhdyBKYXZhU2NyaXB0IHRleHRcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJzZU9wdGlvbnMgLSBDb25maWd1cmF0aW9uIGZvciBhY29ybiBwYXJzZXJcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBBU1QgZm9yIHRoZSBnaXZlbiBjb2RlXG4gKi9cbkludGVycHJldGVyLmdlbmVyYXRlQVNUID0gZnVuY3Rpb24oY29kZSwgcGFyc2VPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0gSW50ZXJwcmV0ZXIuUEFSU0VfT1BUSU9OUztcbiAgT2JqZWN0LmtleXMocGFyc2VPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIG9wdGlvbnNba2V5XSA9IHBhcnNlT3B0aW9uc1trZXldO1xuICB9KTtcbiAgcmV0dXJuIGFjb3JuLnBhcnNlKGNvZGUsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBBZGQgbW9yZSBjb2RlIHRvIHRoZSBpbnRlcnByZXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfCFPYmplY3R9IGNvZGUgUmF3IEphdmFTY3JpcHQgdGV4dCBvciBBU1QuXG4gKiBAcGFyYW0ge09iamVjdH0gYWRkaXRpb25hbE9wdGlvbnMgUGFyc2luZyBvcHRpb25zIHRvIHBhc3MgdGhyb3VnaCB0byBhY29ybi5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmFwcGVuZENvZGUgPSBmdW5jdGlvbihjb2RlLCBhZGRpdGlvbmFsT3B0aW9ucykge1xuICBpZiAoYWRkaXRpb25hbE9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIGFkZGl0aW9uYWxPcHRpb25zID0ge307XG4gIH1cbiAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuICBpZiAoIXN0YXRlIHx8IHN0YXRlLm5vZGVbJ3R5cGUnXSAhPSAnUHJvZ3JhbScpIHtcbiAgICB0aHJvdyBFcnJvcignRXhwZWN0aW5nIG9yaWdpbmFsIEFTVCB0byBzdGFydCB3aXRoIGEgUHJvZ3JhbSBub2RlLicpO1xuICB9XG4gIGlmICh0eXBlb2YgY29kZSA9PSAnc3RyaW5nJykge1xuICAgIHZhciBhY29ybk9wdGlvbnMgPSB7fTtcbiAgICBmb3IgKHZhciBhdHRyaWJ1dGUgaW4gSW50ZXJwcmV0ZXIuUEFSU0VfT1BUSU9OUykge1xuICAgICAgYWNvcm5PcHRpb25zW2F0dHJpYnV0ZV0gPSBJbnRlcnByZXRlci5QQVJTRV9PUFRJT05TW2F0dHJpYnV0ZV07XG4gICAgfVxuICAgIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBhZGRpdGlvbmFsT3B0aW9ucykge1xuICAgICAgYWNvcm5PcHRpb25zW2F0dHJpYnV0ZV0gPSBhZGRpdGlvbmFsT3B0aW9uc1thdHRyaWJ1dGVdO1xuICAgIH1cbiAgICBjb2RlID0gYWNvcm4ucGFyc2UoY29kZSwgYWNvcm5PcHRpb25zKTtcbiAgfVxuICBpZiAoIWNvZGUgfHwgY29kZVsndHlwZSddICE9ICdQcm9ncmFtJykge1xuICAgIHRocm93IEVycm9yKCdFeHBlY3RpbmcgbmV3IEFTVCB0byBzdGFydCB3aXRoIGEgUHJvZ3JhbSBub2RlLicpO1xuICB9XG4gIHRoaXMucG9wdWxhdGVTY29wZV8oY29kZSwgc3RhdGUuc2NvcGUpO1xuICAvLyBBcHBlbmQgdGhlIG5ldyBwcm9ncmFtIHRvIHRoZSBvbGQgb25lLlxuICBmb3IgKHZhciBpID0gMCwgbm9kZTsgbm9kZSA9IGNvZGVbJ2JvZHknXVtpXTsgaSsrKSB7XG4gICAgc3RhdGUubm9kZVsnYm9keSddLnB1c2gobm9kZSk7XG4gIH1cbiAgc3RhdGUuZG9uZSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlIG9uZSBzdGVwIG9mIHRoZSBpbnRlcnByZXRlci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYSBzdGVwIHdhcyBleGVjdXRlZCwgZmFsc2UgaWYgbm8gbW9yZSBpbnN0cnVjdGlvbnMuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlO1xuICBkbyB7XG4gICAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICAgIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbm9kZSA9IHN0YXRlLm5vZGU7XG4gICAgdmFyIHR5cGUgPSBub2RlWyd0eXBlJ107XG4gICAgaWYgKHR5cGUgPT09ICdQcm9ncmFtJyAmJiBzdGF0ZS5kb25lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhdXNlZF8pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmZ1bmN0aW9uTWFwX1t0eXBlXSgpO1xuICAgIC8vIFdoZW4gbm9kZVsnZW5kJ10gaXMgbWlzc2luZywgd2UgYXJlIGluIHBvbHlmaWxsIGNvZGUuXG4gICAgLy8gS2VlcCBleGVjdXRpbmcgdW50aWwgd2UgYXJyaXZlIGF0IHVzZXIgY29kZS5cbiAgfSB3aGlsZSAoIW5vZGVbJ2VuZCddKTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgaW50ZXJwcmV0ZXIgdG8gcHJvZ3JhbSBjb21wbGV0aW9uLiAgVnVsbmVyYWJsZSB0byBpbmZpbml0ZSBsb29wcy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYSBleGVjdXRpb24gaXMgYXN5bmNocm9ub3VzbHkgYmxvY2tlZCxcbiAqICAgICBmYWxzZSBpZiBubyBtb3JlIGluc3RydWN0aW9ucy5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuICB3aGlsZSAoIXRoaXMucGF1c2VkXyAmJiB0aGlzLnN0ZXAoKSkge31cbiAgcmV0dXJuIHRoaXMucGF1c2VkXztcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZ2xvYmFsIHNjb3BlIHdpdGggYnVpdGluIHByb3BlcnRpZXMgYW5kIGZ1bmN0aW9ucy5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuaW5pdEdsb2JhbFNjb3BlID0gZnVuY3Rpb24oc2NvcGUpIHtcbiAgLy8gSW5pdGlhbGl6ZSB1bmVkaXRhYmxlIGdsb2JhbCBwcm9wZXJ0aWVzLlxuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnSW5maW5pdHknLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShJbmZpbml0eSksXG4gICAgICAgICAgICAgICAgICAgSW50ZXJwcmV0ZXIuUkVBRE9OTFlfREVTQ1JJUFRPUik7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdOYU4nLCB0aGlzLk5BTixcbiAgICAgICAgICAgICAgICAgICBJbnRlcnByZXRlci5SRUFET05MWV9ERVNDUklQVE9SKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ3VuZGVmaW5lZCcsIHRoaXMuVU5ERUZJTkVELFxuICAgICAgICAgICAgICAgICAgIEludGVycHJldGVyLlJFQURPTkxZX0RFU0NSSVBUT1IpO1xuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnd2luZG93Jywgc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgSW50ZXJwcmV0ZXIuUkVBRE9OTFlfREVTQ1JJUFRPUik7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdzZWxmJywgc2NvcGUpOyAvLyBFZGl0YWJsZS5cblxuICAvLyBJbml0aWFsaXplIGdsb2JhbCBvYmplY3RzLlxuICB0aGlzLmluaXRGdW5jdGlvbihzY29wZSk7XG4gIHRoaXMuaW5pdE9iamVjdChzY29wZSk7XG4gIC8vIFVuYWJsZSB0byBzZXQgc2NvcGUncyBwYXJlbnQgcHJpb3IgKHRoaXMuT0JKRUNUIGRpZCBub3QgZXhpc3QpLlxuICAvLyBOb3RlIHRoYXQgaW4gYSBicm93c2VyIHRoaXMgd291bGQgYmUgJ1dpbmRvdycsIHdoZXJlYXMgaW4gTm9kZS5qcyBpdCB3b3VsZFxuICAvLyBiZSAnT2JqZWN0Jy4gIFRoaXMgaW50ZXJwcmV0ZXIgaXMgY2xvc2VyIHRvIE5vZGUgaW4gdGhhdCBpdCBoYXMgbm8gRE9NLlxuICBzY29wZS5wcm90byA9IHRoaXMuT0JKRUNULnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddO1xuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnY29uc3RydWN0b3InLCB0aGlzLk9CSkVDVCk7XG4gIHRoaXMuaW5pdEFycmF5KHNjb3BlKTtcbiAgdGhpcy5pbml0TnVtYmVyKHNjb3BlKTtcbiAgdGhpcy5pbml0U3RyaW5nKHNjb3BlKTtcbiAgdGhpcy5pbml0Qm9vbGVhbihzY29wZSk7XG4gIHRoaXMuaW5pdERhdGUoc2NvcGUpO1xuICB0aGlzLmluaXRNYXRoKHNjb3BlKTtcbiAgdGhpcy5pbml0UmVnRXhwKHNjb3BlKTtcbiAgdGhpcy5pbml0SlNPTihzY29wZSk7XG4gIHRoaXMuaW5pdEVycm9yKHNjb3BlKTtcblxuICAvLyBJbml0aWFsaXplIGdsb2JhbCBmdW5jdGlvbnMuXG4gIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuICB2YXIgd3JhcHBlcjtcbiAgd3JhcHBlciA9IGZ1bmN0aW9uKG51bSkge1xuICAgIG51bSA9IG51bSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGlzTmFOKG51bS50b051bWJlcigpKSk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdpc05hTicsXG4gICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSkpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihudW0pIHtcbiAgICBudW0gPSBudW0gfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShpc0Zpbml0ZShudW0udG9OdW1iZXIoKSkpO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnaXNGaW5pdGUnLFxuICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpKTtcblxuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAncGFyc2VGbG9hdCcsXG4gICAgICAgICAgICAgICAgICAgdGhpcy5nZXRQcm9wZXJ0eSh0aGlzLk5VTUJFUiwgJ3BhcnNlRmxvYXQnKSk7XG5cbiAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ3BhcnNlSW50JyxcbiAgICAgICAgICAgICAgICAgICB0aGlzLmdldFByb3BlcnR5KHRoaXMuTlVNQkVSLCAncGFyc2VJbnQnKSk7XG5cbiAgdmFyIGZ1bmMgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkZVTkNUSU9OKTtcbiAgZnVuYy5ldmFsID0gdHJ1ZTtcbiAgdGhpcy5zZXRQcm9wZXJ0eShmdW5jLCAnbGVuZ3RoJywgdGhpcy5OVU1CRVJfT05FLFxuICAgICAgICAgICAgICAgICAgIEludGVycHJldGVyLlJFQURPTkxZX0RFU0NSSVBUT1IpO1xuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnZXZhbCcsIGZ1bmMpO1xuXG4gIHZhciBzdHJGdW5jdGlvbnMgPSBbXG4gICAgW2VzY2FwZSwgJ2VzY2FwZSddLCBbdW5lc2NhcGUsICd1bmVzY2FwZSddLFxuICAgIFtkZWNvZGVVUkksICdkZWNvZGVVUkknXSwgW2RlY29kZVVSSUNvbXBvbmVudCwgJ2RlY29kZVVSSUNvbXBvbmVudCddLFxuICAgIFtlbmNvZGVVUkksICdlbmNvZGVVUkknXSwgW2VuY29kZVVSSUNvbXBvbmVudCwgJ2VuY29kZVVSSUNvbXBvbmVudCddXG4gIF07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHN0ciA9IChzdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzdHIgPSBuYXRpdmVGdW5jKHN0cik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBkZWNvZGVVUkkoJyV4eScpIHdpbGwgdGhyb3cgYW4gZXJyb3IuICBDYXRjaCBhbmQgcmV0aHJvdy5cbiAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlVSSV9FUlJPUiwgZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIpO1xuICAgICAgfTtcbiAgICB9KShzdHJGdW5jdGlvbnNbaV1bMF0pO1xuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsIHN0ckZ1bmN0aW9uc1tpXVsxXSxcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpKTtcbiAgfVxuXG4gIC8vIFJ1biBhbnkgdXNlci1wcm92aWRlZCBpbml0aWFsaXphdGlvbi5cbiAgaWYgKHRoaXMuaW5pdEZ1bmNfKSB7XG4gICAgdGhpcy5pbml0RnVuY18odGhpcywgc2NvcGUpO1xuICB9XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIEZ1bmN0aW9uIGNsYXNzLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5pbml0RnVuY3Rpb24gPSBmdW5jdGlvbihzY29wZSkge1xuICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcbiAgdmFyIHdyYXBwZXI7XG4gIHZhciBpZGVudGlmaWVyUmVnZXhwID0gL15bQS1aYS16XyRdW1xcdyRdKiQvO1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3Rvci5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gICAgaWYgKHRoaXNJbnRlcnByZXRlci5jYWxsZWRXaXRoTmV3KCkpIHtcbiAgICAgIC8vIENhbGxlZCBhcyBuZXcgRnVuY3Rpb24oKS5cbiAgICAgIHZhciBuZXdGdW5jID0gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FsbGVkIGFzIEZ1bmN0aW9uKCkuXG4gICAgICB2YXIgbmV3RnVuYyA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkZVTkNUSU9OKTtcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciBjb2RlID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29kZSA9ICcnO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgdmFyIG5hbWUgPSBhcmd1bWVudHNbaV0udG9TdHJpbmcoKTtcbiAgICAgIGlmICghbmFtZS5tYXRjaChpZGVudGlmaWVyUmVnZXhwKSkge1xuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlNZTlRBWF9FUlJPUixcbiAgICAgICAgICAgICdJbnZhbGlkIGZ1bmN0aW9uIGFyZ3VtZW50OiAnICsgbmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFyZ3MucHVzaChuYW1lKTtcbiAgICB9XG4gICAgYXJncyA9IGFyZ3Muam9pbignLCAnKTtcbiAgICAvLyBJbnRlcmVzdGluZ2x5LCB0aGUgc2NvcGUgZm9yIGNvbnN0cnVjdGVkIGZ1bmN0aW9ucyBpcyB0aGUgZ2xvYmFsIHNjb3BlLFxuICAgIC8vIGV2ZW4gaWYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGluIHNvbWUgb3RoZXIgc2NvcGUuXG4gICAgbmV3RnVuYy5wYXJlbnRTY29wZSA9IHRoaXNJbnRlcnByZXRlci5zdGF0ZVN0YWNrWzBdLnNjb3BlO1xuICAgIC8vIEFjb3JuIG5lZWRzIHRvIHBhcnNlIGNvZGUgaW4gdGhlIGNvbnRleHQgb2YgYSBmdW5jdGlvbiBvciBlbHNlICdyZXR1cm4nXG4gICAgLy8gc3RhdGVtZW50cyB3aWxsIGJlIHN5bnRheCBlcnJvcnMuXG4gICAgdmFyIGFzdCA9IGFjb3JuLnBhcnNlKCckID0gZnVuY3Rpb24oJyArIGFyZ3MgKyAnKSB7JyArIGNvZGUgKyAnfTsnLFxuICAgICAgICBJbnRlcnByZXRlci5QQVJTRV9PUFRJT05TKTtcbiAgICBpZiAoYXN0Wydib2R5J10ubGVuZ3RoICE9IDEpIHtcbiAgICAgIC8vIEZ1bmN0aW9uKCdhJywgJ3JldHVybiBhICsgNjt9OyB7YWxlcnQoMSk7Jyk7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlNZTlRBWF9FUlJPUixcbiAgICAgICAgICAnSW52YWxpZCBjb2RlIGluIGZ1bmN0aW9uIGJvZHkuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ld0Z1bmMubm9kZSA9IGFzdFsnYm9keSddWzBdWydleHByZXNzaW9uJ11bJ3JpZ2h0J107XG4gICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KG5ld0Z1bmMsICdsZW5ndGgnLFxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5ld0Z1bmMubm9kZVsnbGVuZ3RoJ10pLFxuICAgICAgICBJbnRlcnByZXRlci5SRUFET05MWV9ERVNDUklQVE9SKTtcbiAgICByZXR1cm4gbmV3RnVuYztcbiAgfTtcbiAgd3JhcHBlci5pZCA9IHRoaXMuZnVuY3Rpb25Db3VudGVyXysrO1xuICB0aGlzLkZVTkNUSU9OID0gdGhpcy5jcmVhdGVPYmplY3QobnVsbCk7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdGdW5jdGlvbicsIHRoaXMuRlVOQ1RJT04pO1xuICAvLyBNYW51YWxseSBzZXR1cCB0eXBlIGFuZCBwcm90b3R5cGUgYmVjYXVzZSBjcmVhdGVPYmogZG9lc24ndCByZWNvZ25pemVcbiAgLy8gdGhpcyBvYmplY3QgYXMgYSBmdW5jdGlvbiAodGhpcy5GVU5DVElPTiBkaWQgbm90IGV4aXN0KS5cbiAgdGhpcy5GVU5DVElPTi50eXBlID0gJ2Z1bmN0aW9uJztcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkZVTkNUSU9OLCAncHJvdG90eXBlJywgdGhpcy5jcmVhdGVPYmplY3QobnVsbCkpO1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRlVOQ1RJT04ucHJvcGVydGllc1sncHJvdG90eXBlJ10sICdjb25zdHJ1Y3RvcicsXG4gICAgICB0aGlzLkZVTkNUSU9OLCBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuICB0aGlzLkZVTkNUSU9OLm5hdGl2ZUZ1bmMgPSB3cmFwcGVyO1xuXG4gIHZhciBib3hUaGlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBJbiBub24tc3RyaWN0IG1vZGUgJ3RoaXMnIG11c3QgYmUgYW4gb2JqZWN0LlxuICAgIGlmICh2YWx1ZS5pc1ByaW1pdGl2ZSAmJiAhdGhpc0ludGVycHJldGVyLmdldFNjb3BlKCkuc3RyaWN0KSB7XG4gICAgICBpZiAodmFsdWUgPT0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCB8fCB2YWx1ZSA9PSB0aGlzSW50ZXJwcmV0ZXIuTlVMTCkge1xuICAgICAgICAvLyAnVW5kZWZpbmVkJyBhbmQgJ251bGwnIGFyZSBjaGFuZ2VkIHRvIGdsb2JhbCBvYmplY3QuXG4gICAgICAgIHZhbHVlID0gdGhpc0ludGVycHJldGVyLmdsb2JhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgbXVzdCBiZSBib3hlZCBpbiBub24tc3RyaWN0IG1vZGUuXG4gICAgICAgIHZhciBib3ggPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHZhbHVlLnByb3BlcnRpZXNbJ2NvbnN0cnVjdG9yJ10pO1xuICAgICAgICBib3guZGF0YSA9IHZhbHVlLmRhdGE7XG4gICAgICAgIHZhbHVlID0gYm94O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHRoaXNBcmcsIGFyZ3MpIHtcbiAgICB2YXIgc3RhdGUgPVxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc3RhdGVTdGFja1t0aGlzSW50ZXJwcmV0ZXIuc3RhdGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICAvLyBSZXdyaXRlIHRoZSBjdXJyZW50ICdDYWxsRXhwcmVzc2lvbicgdG8gYXBwbHkgYSBkaWZmZXJlbnQgZnVuY3Rpb24uXG4gICAgc3RhdGUuZnVuY18gPSB0aGlzO1xuICAgIC8vIEFzc2lnbiB0aGUgJ3RoaXMnIG9iamVjdC5cbiAgICBzdGF0ZS5mdW5jVGhpc18gPSBib3hUaGlzKHRoaXNBcmcpO1xuICAgIC8vIEJpbmQgYW55IHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICBzdGF0ZS5hcmd1bWVudHNfID0gW107XG4gICAgaWYgKGFyZ3MpIHtcbiAgICAgIGlmICh0aGlzSW50ZXJwcmV0ZXIuaXNhKGFyZ3MsIHRoaXNJbnRlcnByZXRlci5BUlJBWSkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3RhdGUuYXJndW1lbnRzX1tpXSA9IHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eShhcmdzLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5UWVBFX0VSUk9SLFxuICAgICAgICAgICAgJ0NyZWF0ZUxpc3RGcm9tQXJyYXlMaWtlIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLmRvbmVBcmdzXyA9IHRydWU7XG4gICAgc3RhdGUuZG9uZUV4ZWNfID0gZmFsc2U7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5GVU5DVElPTiwgJ2FwcGx5Jywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHRoaXNBcmcsIHZhcl9hcmdzKSB7XG4gICAgdmFyIHN0YXRlID1cbiAgICAgICAgdGhpc0ludGVycHJldGVyLnN0YXRlU3RhY2tbdGhpc0ludGVycHJldGVyLnN0YXRlU3RhY2subGVuZ3RoIC0gMV07XG4gICAgLy8gUmV3cml0ZSB0aGUgY3VycmVudCAnQ2FsbEV4cHJlc3Npb24nIHRvIGNhbGwgYSBkaWZmZXJlbnQgZnVuY3Rpb24uXG4gICAgc3RhdGUuZnVuY18gPSB0aGlzO1xuICAgIC8vIEFzc2lnbiB0aGUgJ3RoaXMnIG9iamVjdC5cbiAgICBzdGF0ZS5mdW5jVGhpc18gPSBib3hUaGlzKHRoaXNBcmcpO1xuICAgIC8vIEJpbmQgYW55IHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICBzdGF0ZS5hcmd1bWVudHNfID0gW107XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0YXRlLmFyZ3VtZW50c18ucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBzdGF0ZS5kb25lQXJnc18gPSB0cnVlO1xuICAgIHN0YXRlLmRvbmVFeGVjXyA9IGZhbHNlO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuRlVOQ1RJT04sICdjYWxsJywgd3JhcHBlcik7XG5cbiAgdGhpcy5wb2x5ZmlsbHNfLnB1c2goXG4vLyBQb2x5ZmlsbCBjb3BpZWQgZnJvbTpcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9vYmplY3RzL0Z1bmN0aW9uL2JpbmRcblwiT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ2JpbmQnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTpcIixcbiAgXCJmdW5jdGlvbihvVGhpcykge1wiLFxuICAgIFwiaWYgKHR5cGVvZiB0aGlzICE9PSAnZnVuY3Rpb24nKSB7XCIsXG4gICAgICBcInRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlJyk7XCIsXG4gICAgXCJ9XCIsXG4gICAgXCJ2YXIgYUFyZ3MgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXCIsXG4gICAgICAgIFwiZlRvQmluZCA9IHRoaXMsXCIsXG4gICAgICAgIFwiZk5PUCAgICA9IGZ1bmN0aW9uKCkge30sXCIsXG4gICAgICAgIFwiZkJvdW5kICA9IGZ1bmN0aW9uKCkge1wiLFxuICAgICAgICAgIFwicmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcIixcbiAgICAgICAgICAgICAgICAgXCI/IHRoaXNcIixcbiAgICAgICAgICAgICAgICAgXCI6IG9UaGlzLFwiLFxuICAgICAgICAgICAgICAgICBcImFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XCIsXG4gICAgICAgIFwifTtcIixcbiAgICBcImlmICh0aGlzLnByb3RvdHlwZSkge1wiLFxuICAgICAgXCJmTk9QLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1wiLFxuICAgIFwifVwiLFxuICAgIFwiZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XCIsXG4gICAgXCJyZXR1cm4gZkJvdW5kO1wiLFxuICBcIn1cIixcblwifSk7XCIsXG5cIlwiKTtcblxuICAvLyBGdW5jdGlvbiBoYXMgbm8gcGFyZW50IHRvIGluaGVyaXQgZnJvbSwgc28gaXQgbmVlZHMgaXRzIG93biBtYW5kYXRvcnlcbiAgLy8gdG9TdHJpbmcgYW5kIHZhbHVlT2YgZnVuY3Rpb25zLlxuICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy50b1N0cmluZygpKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkZVTkNUSU9OLCAndG9TdHJpbmcnLCB3cmFwcGVyKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkZVTkNUSU9OLCAndG9TdHJpbmcnLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy52YWx1ZU9mKCkpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuRlVOQ1RJT04sICd2YWx1ZU9mJywgd3JhcHBlcik7XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5GVU5DVElPTiwgJ3ZhbHVlT2YnLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBPYmplY3QgY2xhc3MuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmluaXRPYmplY3QgPSBmdW5jdGlvbihzY29wZSkge1xuICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcbiAgdmFyIHdyYXBwZXI7XG4gIC8vIE9iamVjdCBjb25zdHJ1Y3Rvci5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PSB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEIHx8XG4gICAgICAgIHZhbHVlID09IHRoaXNJbnRlcnByZXRlci5OVUxMKSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgb2JqZWN0LlxuICAgICAgaWYgKHRoaXNJbnRlcnByZXRlci5jYWxsZWRXaXRoTmV3KCkpIHtcbiAgICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBPYmplY3QoKS5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDYWxsZWQgYXMgT2JqZWN0KCkuXG4gICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5PQkpFQ1QpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFsdWUuaXNQcmltaXRpdmUpIHtcbiAgICAgIC8vIFdyYXAgdGhlIHZhbHVlIGFzIGFuIG9iamVjdC5cbiAgICAgIHZhciBvYmogPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHZhbHVlLnByb3BlcnRpZXNbJ2NvbnN0cnVjdG9yJ10pO1xuICAgICAgb2JqLmRhdGEgPSB2YWx1ZS5kYXRhO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSBwcm92aWRlZCBvYmplY3QuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICB0aGlzLk9CSkVDVCA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgdHJ1ZSk7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdPYmplY3QnLCB0aGlzLk9CSkVDVCk7XG5cbiAgLy8gU3RhdGljIG1ldGhvZHMgb24gT2JqZWN0LlxuICB3cmFwcGVyID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEIHx8IG9iaiA9PSB0aGlzSW50ZXJwcmV0ZXIuTlVMTCkge1xuICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5UWVBFX0VSUk9SLFxuICAgICAgICAgICdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHByb3BzID0gb2JqLmlzUHJpbWl0aXZlID8gb2JqLmRhdGEgOiBvYmoucHJvcGVydGllcztcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLm5hdGl2ZVRvUHNldWRvKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKSk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QsICdnZXRPd25Qcm9wZXJ0eU5hbWVzJyxcbiAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iai5pc1ByaW1pdGl2ZSkge1xuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5uYXRpdmVUb1BzZXVkbyhPYmplY3Qua2V5cyhvYmouZGF0YSkpO1xuICAgIH1cbiAgICB2YXIgbGlzdCA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmoucHJvcGVydGllcykge1xuICAgICAgaWYgKCFvYmoubm90RW51bWVyYWJsZVtrZXldKSB7XG4gICAgICAgIGxpc3QucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLm5hdGl2ZVRvUHNldWRvKGxpc3QpO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuT0JKRUNULCAna2V5cycsXG4gICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIsIGZhbHNlKSxcbiAgICAgIEludGVycHJldGVyLk5PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKHByb3RvID09IHRoaXNJbnRlcnByZXRlci5OVUxMKSB7XG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdChudWxsKTtcbiAgICB9XG4gICAgaWYgKHByb3RvLmlzUHJpbWl0aXZlKSB7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlRZUEVfRVJST1IsXG4gICAgICAgICAgJ09iamVjdCBwcm90b3R5cGUgbWF5IG9ubHkgYmUgYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3RQcm90byhwcm90byk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QsICdjcmVhdGUnLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIC8vIEFkZCBhIHBvbHlmaWxsIHRvIGhhbmRsZSBjcmVhdGUncyBzZWNvbmQgYXJndW1lbnQuXG4gIHRoaXMucG9seWZpbGxzXy5wdXNoKFxuICBcIihmdW5jdGlvbigpIHtcIixcbiAgICBcInZhciBjcmVhdGVfID0gT2JqZWN0LmNyZWF0ZTtcIixcbiAgICBcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdjcmVhdGUnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTpcIixcbiAgICAgIFwiZnVuY3Rpb24ocHJvdG8sIHByb3BzKSB7XCIsXG4gICAgICAgIFwidmFyIG9iaiA9IGNyZWF0ZV8ocHJvdG8pO1wiLFxuICAgICAgICBcInByb3BzICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcHJvcHMpO1wiLFxuICAgICAgICBcInJldHVybiBvYmo7XCIsXG4gICAgICBcIn1cIixcbiAgICBcIn0pO1wiLFxuICBcIn0pKCk7XCIsXG4gIFwiXCIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihvYmosIHByb3AsIGRlc2NyaXB0b3IpIHtcbiAgICBwcm9wID0gKHByb3AgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICBpZiAoIShkZXNjcmlwdG9yIGluc3RhbmNlb2YgSW50ZXJwcmV0ZXIuT2JqZWN0KSkge1xuICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5UWVBFX0VSUk9SLFxuICAgICAgICAgICdQcm9wZXJ0eSBkZXNjcmlwdGlvbiBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFvYmoucHJvcGVydGllc1twcm9wXSAmJiBvYmoucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgIHRoaXNJbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbih0aGlzSW50ZXJwcmV0ZXIuVFlQRV9FUlJPUixcbiAgICAgICAgICAnQ2FuXFwndCBkZWZpbmUgcHJvcGVydHkgJyArIHByb3AgKyAnLCBvYmplY3QgaXMgbm90IGV4dGVuc2libGUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gdGhpc0ludGVycHJldGVyLmdldFByb3BlcnR5KGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuICAgIGlmICh2YWx1ZSA9PSB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKSB7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIHZhciBnZXQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkoZGVzY3JpcHRvciwgJ2dldCcpO1xuICAgIHZhciBzZXQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkoZGVzY3JpcHRvciwgJ3NldCcpO1xuICAgIHZhciBuYXRpdmVEZXNjcmlwdG9yID0ge1xuICAgICAgY29uZmlndXJhYmxlOiB0aGlzSW50ZXJwcmV0ZXIucHNldWRvVG9OYXRpdmUoXG4gICAgICAgICAgLyoqIEB0eXBlICFJbnRlcnByZXRlci5QcmltaXRpdmUgKi9cbiAgICAgICAgICAodGhpc0ludGVycHJldGVyLmdldFByb3BlcnR5KGRlc2NyaXB0b3IsICdjb25maWd1cmFibGUnKSkpLFxuICAgICAgZW51bWVyYWJsZTogdGhpc0ludGVycHJldGVyLnBzZXVkb1RvTmF0aXZlKFxuICAgICAgICAgIC8qKiBAdHlwZSAhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlICovXG4gICAgICAgICAgKHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eShkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpKSksXG4gICAgICB3cml0YWJsZTogdGhpc0ludGVycHJldGVyLnBzZXVkb1RvTmF0aXZlKFxuICAgICAgICAgIC8qKiBAdHlwZSAhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlICovXG4gICAgICAgICAgKHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eShkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSkpLFxuICAgICAgZ2V0OiBnZXQgPT0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCA/IHVuZGVmaW5lZCA6IGdldCxcbiAgICAgIHNldDogc2V0ID09IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQgPyB1bmRlZmluZWQgOiBzZXRcbiAgICB9O1xuICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShvYmosIHByb3AsIHZhbHVlLCBuYXRpdmVEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuT0JKRUNULCAnZGVmaW5lUHJvcGVydHknLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIHRoaXMucG9seWZpbGxzXy5wdXNoKFxuXCJPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCAnZGVmaW5lUHJvcGVydGllcycsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOlwiLFxuICBcImZ1bmN0aW9uKG9iaiwgcHJvcHMpIHtcIixcbiAgICBcInZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1wiLFxuICAgIFwiZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XCIsXG4gICAgICBcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleXNbaV0sIHByb3BzW2tleXNbaV1dKTtcIixcbiAgICBcIn1cIixcbiAgICBcInJldHVybiBvYmo7XCIsXG4gIFwifVwiLFxuXCJ9KTtcIixcblwiXCIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihvYmosIHByb3ApIHtcbiAgICBwcm9wID0gKHByb3AgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICBpZiAoIShwcm9wIGluIG9iai5wcm9wZXJ0aWVzKSkge1xuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG4gICAgfVxuICAgIHZhciBjb25maWd1cmFibGUgPSAhb2JqLm5vdENvbmZpZ3VyYWJsZVtwcm9wXTtcbiAgICB2YXIgZW51bWVyYWJsZSA9ICFvYmoubm90RW51bWVyYWJsZVtwcm9wXTtcbiAgICB2YXIgd3JpdGFibGUgPSAhb2JqLm5vdFdyaXRhYmxlW3Byb3BdO1xuICAgIHZhciBnZXR0ZXIgPSBvYmouZ2V0dGVyW3Byb3BdO1xuICAgIHZhciBzZXR0ZXIgPSBvYmouc2V0dGVyW3Byb3BdO1xuXG4gICAgdmFyIGRlc2NyaXB0b3IgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5PQkpFQ1QpO1xuICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShkZXNjcmlwdG9yLCAnY29uZmlndXJhYmxlJyxcbiAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShjb25maWd1cmFibGUpKTtcbiAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkoZGVzY3JpcHRvciwgJ2VudW1lcmFibGUnLFxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGVudW1lcmFibGUpKTtcbiAgICBpZiAoZ2V0dGVyIHx8IHNldHRlcikge1xuICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGRlc2NyaXB0b3IsICdnZXR0ZXInLCBnZXR0ZXIpO1xuICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGRlc2NyaXB0b3IsICdzZXR0ZXInLCBzZXR0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkoZGVzY3JpcHRvciwgJ3dyaXRhYmxlJyxcbiAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHdyaXRhYmxlKSk7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkoZGVzY3JpcHRvciwgJ3ZhbHVlJyxcbiAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkob2JqLCBwcm9wKSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuT0JKRUNULCAnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJyxcbiAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEIHx8IG9iaiA9PSB0aGlzSW50ZXJwcmV0ZXIuTlVMTCkge1xuICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5UWVBFX0VSUk9SLFxuICAgICAgICAgICdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iai5wcm90byB8fCB0aGlzSW50ZXJwcmV0ZXIuTlVMTDtcbiAgfTtcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVCwgJ2dldFByb3RvdHlwZU9mJyxcbiAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoIW9iai5wcmV2ZW50RXh0ZW5zaW9ucyk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QsICdpc0V4dGVuc2libGUnLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iai5pc1ByaW1pdGl2ZSkge1xuICAgICAgb2JqLnByZXZlbnRFeHRlbnNpb25zID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVCwgJ3ByZXZlbnRFeHRlbnNpb25zJyxcbiAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcblxuICAvLyBJbnN0YW5jZSBtZXRob2RzIG9uIE9iamVjdC5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMudG9TdHJpbmcoKSk7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5PQkpFQ1QsICd0b1N0cmluZycsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh0aGlzLnRvU3RyaW5nKCkpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuT0JKRUNULCAndG9Mb2NhbGVTdHJpbmcnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy52YWx1ZU9mKCkpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuT0JKRUNULCAndmFsdWVPZicsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihwcm9wKSB7XG4gICAgaWYgKHRoaXMgPT0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCB8fCB0aGlzID09IHRoaXNJbnRlcnByZXRlci5OVUxMKSB7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlRZUEVfRVJST1IsXG4gICAgICAgICAgJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcm9wID0gKHByb3AgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gKHByb3AgaW4gdGhpcy5wcm9wZXJ0aWVzKSA/XG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5UUlVFIDogdGhpc0ludGVycHJldGVyLkZBTFNFO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuT0JKRUNULCAnaGFzT3duUHJvcGVydHknLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24ocHJvcCkge1xuICAgIHByb3AgPSAocHJvcCB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xuICAgIHZhciBlbnVtZXJhYmxlID0gcHJvcCBpbiB0aGlzLnByb3BlcnRpZXMgJiYgIXRoaXMubm90RW51bWVyYWJsZVtwcm9wXTtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShlbnVtZXJhYmxlKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLk9CSkVDVCwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAvLyBOb3RlLCBjaXJjdWxhciBsb29wcyBzaG91bGRuJ3QgYmUgcG9zc2libGUuXG4gICAgICBpZiAob2JqLnByb3RvICYmIG9iai5wcm90byAhPSBvYmopIHtcbiAgICAgICAgb2JqID0gb2JqLnByb3RvO1xuICAgICAgICBpZiAob2JqID09IHRoaXMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLlRSVUU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIHBhcmVudCBvciBzZWxmLXBhcmVudDsgcmVhY2hlZCB0aGUgdG9wLlxuICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLkZBTFNFO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLk9CSkVDVCwgJ2lzUHJvdG90eXBlT2YnLCAgd3JhcHBlcik7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIEFycmF5IGNsYXNzLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5pbml0QXJyYXkgPSBmdW5jdGlvbihzY29wZSkge1xuICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcbiAgdmFyIGdldEludCA9IGZ1bmN0aW9uKG9iaiwgZGVmKSB7XG4gICAgLy8gUmV0dXJuIGFuIGludGVnZXIsIG9yIHRoZSBkZWZhdWx0LlxuICAgIHZhciBuID0gb2JqID8gTWF0aC5mbG9vcihvYmoudG9OdW1iZXIoKSkgOiBkZWY7XG4gICAgaWYgKGlzTmFOKG4pKSB7XG4gICAgICBuID0gZGVmO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfTtcbiAgdmFyIHN0cmljdENvbXAgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgLy8gU3RyaWN0ID09PSBjb21wYXJpc29uLlxuICAgIGlmIChhLmlzUHJpbWl0aXZlICYmIGIuaXNQcmltaXRpdmUpIHtcbiAgICAgIHJldHVybiBhLmRhdGEgPT09IGIuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH07XG4gIHZhciB3cmFwcGVyO1xuICAvLyBBcnJheSBjb25zdHJ1Y3Rvci5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gICAgaWYgKHRoaXNJbnRlcnByZXRlci5jYWxsZWRXaXRoTmV3KCkpIHtcbiAgICAgIC8vIENhbGxlZCBhcyBuZXcgQXJyYXkoKS5cbiAgICAgIHZhciBuZXdBcnJheSA9IHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhbGxlZCBhcyBBcnJheSgpLlxuICAgICAgdmFyIG5ld0FycmF5ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuICAgIH1cbiAgICB2YXIgZmlyc3QgPSBhcmd1bWVudHNbMF07XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSAmJiBmaXJzdC50eXBlID09ICdudW1iZXInKSB7XG4gICAgICBpZiAoaXNOYU4odGhpc0ludGVycHJldGVyLmFycmF5SW5kZXgoZmlyc3QpKSkge1xuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlJBTkdFX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgYXJyYXkgbGVuZ3RoJyk7XG4gICAgICB9XG4gICAgICBuZXdBcnJheS5sZW5ndGggPSBmaXJzdC5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdBcnJheS5wcm9wZXJ0aWVzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgfVxuICAgICAgbmV3QXJyYXkubGVuZ3RoID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9O1xuICB0aGlzLkFSUkFZID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCB0cnVlKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0FycmF5JywgdGhpcy5BUlJBWSk7XG5cbiAgLy8gU3RhdGljIG1ldGhvZHMgb24gQXJyYXkuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShcbiAgICAgICAgdGhpc0ludGVycHJldGVyLmlzYShvYmosIHRoaXNJbnRlcnByZXRlci5BUlJBWSkpO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVksICdpc0FycmF5JyxcbiAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIC8vIEluc3RhbmNlIG1ldGhvZHMgb24gQXJyYXkuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgICAgZGVsZXRlIHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZhbHVlID0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuQVJSQVksICdwb3AnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzW3RoaXMubGVuZ3RoXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMubGVuZ3RoKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkFSUkFZLCAncHVzaCcsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcGVydGllc1swXTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXNbaSAtIDFdID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xuICAgICAgfVxuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICAgIGRlbGV0ZSB0aGlzLnByb3BlcnRpZXNbdGhpcy5sZW5ndGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5BUlJBWSwgJ3NoaWZ0Jywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucHJvcGVydGllc1tpICsgYXJndW1lbnRzLmxlbmd0aF0gPSB0aGlzLnByb3BlcnRpZXNbaV07XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoICs9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5sZW5ndGgpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuQVJSQVksICd1bnNoaWZ0Jywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggLyAyOyBpKyspIHtcbiAgICAgIHZhciB0bXAgPSB0aGlzLnByb3BlcnRpZXNbdGhpcy5sZW5ndGggLSBpIC0gMV07XG4gICAgICB0aGlzLnByb3BlcnRpZXNbdGhpcy5sZW5ndGggLSBpIC0gMV0gPSB0aGlzLnByb3BlcnRpZXNbaV07XG4gICAgICB0aGlzLnByb3BlcnRpZXNbaV0gPSB0bXA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuQVJSQVksICdyZXZlcnNlJywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKGluZGV4LCBob3dtYW55LCB2YXJfYXJncykge1xuICAgIGluZGV4ID0gZ2V0SW50KGluZGV4LCAwKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoICsgaW5kZXgsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0aGlzLmxlbmd0aCk7XG4gICAgfVxuICAgIGhvd21hbnkgPSBnZXRJbnQoaG93bWFueSwgSW5maW5pdHkpO1xuICAgIGhvd21hbnkgPSBNYXRoLm1pbihob3dtYW55LCB0aGlzLmxlbmd0aCAtIGluZGV4KTtcbiAgICB2YXIgcmVtb3ZlZCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkFSUkFZKTtcbiAgICAvLyBSZW1vdmUgc3BlY2lmaWVkIGVsZW1lbnRzLlxuICAgIGZvciAodmFyIGkgPSBpbmRleDsgaSA8IGluZGV4ICsgaG93bWFueTsgaSsrKSB7XG4gICAgICByZW1vdmVkLnByb3BlcnRpZXNbcmVtb3ZlZC5sZW5ndGgrK10gPSB0aGlzLnByb3BlcnRpZXNbaV07XG4gICAgICB0aGlzLnByb3BlcnRpZXNbaV0gPSB0aGlzLnByb3BlcnRpZXNbaSArIGhvd21hbnldO1xuICAgIH1cbiAgICAvLyBNb3ZlIG90aGVyIGVsZW1lbnQgdG8gZmlsbCB0aGUgZ2FwLlxuICAgIGZvciAodmFyIGkgPSBpbmRleCArIGhvd21hbnk7IGkgPCB0aGlzLmxlbmd0aCAtIGhvd21hbnk7IGkrKykge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzW2ldID0gdGhpcy5wcm9wZXJ0aWVzW2kgKyBob3dtYW55XTtcbiAgICB9XG4gICAgLy8gRGVsZXRlIHN1cGVyZmx1b3VzIHByb3BlcnRpZXMuXG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gaG93bWFueTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnByb3BlcnRpZXNbaV07XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoIC09IGhvd21hbnk7XG4gICAgLy8gSW5zZXJ0IHNwZWNpZmllZCBpdGVtcy5cbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IGluZGV4OyBpLS0pIHtcbiAgICAgIHRoaXMucHJvcGVydGllc1tpICsgYXJndW1lbnRzLmxlbmd0aCAtIDJdID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCArPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzW2luZGV4ICsgaSAtIDJdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVtb3ZlZDtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkFSUkFZLCAnc3BsaWNlJywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKG9wdF9iZWdpbiwgb3B0X2VuZCkge1xuICAgIHZhciBsaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuICAgIHZhciBiZWdpbiA9IGdldEludChvcHRfYmVnaW4sIDApO1xuICAgIGlmIChiZWdpbiA8IDApIHtcbiAgICAgIGJlZ2luID0gdGhpcy5sZW5ndGggKyBiZWdpbjtcbiAgICB9XG4gICAgYmVnaW4gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihiZWdpbiwgdGhpcy5sZW5ndGgpKTtcbiAgICB2YXIgZW5kID0gZ2V0SW50KG9wdF9lbmQsIHRoaXMubGVuZ3RoKTtcbiAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgZW5kID0gdGhpcy5sZW5ndGggKyBlbmQ7XG4gICAgfVxuICAgIGVuZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGVuZCwgdGhpcy5sZW5ndGgpKTtcbiAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICBmb3IgKHZhciBpID0gYmVnaW47IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkobGlzdCwgbGVuZ3RoKyssIGVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkFSUkFZLCAnc2xpY2UnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24ob3B0X3NlcGFyYXRvcikge1xuICAgIHZhciBjeWNsZXMgPSBJbnRlcnByZXRlci50b1N0cmluZ0N5Y2xlc187XG4gICAgY3ljbGVzLnB1c2godGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghb3B0X3NlcGFyYXRvciB8fCBvcHRfc2VwYXJhdG9yLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgc2VwID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNlcCA9IG9wdF9zZXBhcmF0b3IudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXh0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGV4dFtpXSA9IHRoaXMucHJvcGVydGllc1tpXS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjeWNsZXMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRleHQuam9pbihzZXApKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkFSUkFZLCAnam9pbicsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICAgIHZhciBsaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIC8vIFN0YXJ0IGJ5IGNvcHlpbmcgdGhlIGN1cnJlbnQgYXJyYXkuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eSh0aGlzLCBpKTtcbiAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShsaXN0LCBsZW5ndGgrKywgZWxlbWVudCk7XG4gICAgfVxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgYXJndW1lbnRzIGFuZCBjb3B5IHRoZW0gaW4uXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmICh0aGlzSW50ZXJwcmV0ZXIuaXNhKHZhbHVlLCB0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eSh2YWx1ZSwgaik7XG4gICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGxpc3QsIGxlbmd0aCsrLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGxpc3QsIGxlbmd0aCsrLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuQVJSQVksICdjb25jYXQnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24oc2VhcmNoRWxlbWVudCwgb3B0X2Zyb21JbmRleCkge1xuICAgIHNlYXJjaEVsZW1lbnQgPSBzZWFyY2hFbGVtZW50IHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG4gICAgdmFyIGZyb21JbmRleCA9IGdldEludChvcHRfZnJvbUluZGV4LCAwKTtcbiAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgZnJvbUluZGV4ID0gdGhpcy5sZW5ndGggKyBmcm9tSW5kZXg7XG4gICAgfVxuICAgIGZyb21JbmRleCA9IE1hdGgubWF4KDAsIGZyb21JbmRleCk7XG4gICAgZm9yICh2YXIgaSA9IGZyb21JbmRleDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpc0ludGVycHJldGVyLmdldFByb3BlcnR5KHRoaXMsIGkpO1xuICAgICAgaWYgKHN0cmljdENvbXAoZWxlbWVudCwgc2VhcmNoRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoaSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKC0xKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkFSUkFZLCAnaW5kZXhPZicsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihzZWFyY2hFbGVtZW50LCBvcHRfZnJvbUluZGV4KSB7XG4gICAgc2VhcmNoRWxlbWVudCA9IHNlYXJjaEVsZW1lbnQgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcbiAgICB2YXIgZnJvbUluZGV4ID0gZ2V0SW50KG9wdF9mcm9tSW5kZXgsIHRoaXMubGVuZ3RoKTtcbiAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgZnJvbUluZGV4ID0gdGhpcy5sZW5ndGggKyBmcm9tSW5kZXg7XG4gICAgfVxuICAgIGZyb21JbmRleCA9IE1hdGgubWluKGZyb21JbmRleCwgdGhpcy5sZW5ndGggLSAxKTtcbiAgICBmb3IgKHZhciBpID0gZnJvbUluZGV4OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XG4gICAgICBpZiAoc3RyaWN0Q29tcChlbGVtZW50LCBzZWFyY2hFbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoLTEpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuQVJSQVksICdsYXN0SW5kZXhPZicsIHdyYXBwZXIpO1xuXG4gIHRoaXMucG9seWZpbGxzXy5wdXNoKFxuLy8gUG9seWZpbGwgY29waWVkIGZyb206XG4vLyBkZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZXZlcnlcblwiT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2V2ZXJ5Jywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6XCIsXG4gIFwiZnVuY3Rpb24oY2FsbGJhY2tmbiwgdGhpc0FyZykge1wiLFxuICAgIFwiaWYgKHRoaXMgPT0gbnVsbCB8fCB0eXBlb2YgY2FsbGJhY2tmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcjtcIixcbiAgICBcInZhciBULCBrO1wiLFxuICAgIFwidmFyIE8gPSBPYmplY3QodGhpcyk7XCIsXG4gICAgXCJ2YXIgbGVuID0gTy5sZW5ndGggPj4+IDA7XCIsXG4gICAgXCJpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIFQgPSB0aGlzQXJnO1wiLFxuICAgIFwiayA9IDA7XCIsXG4gICAgXCJ3aGlsZSAoayA8IGxlbikge1wiLFxuICAgICAgXCJpZiAoayBpbiBPICYmICFjYWxsYmFja2ZuLmNhbGwoVCwgT1trXSwgaywgTykpIHJldHVybiBmYWxzZTtcIixcbiAgICAgIFwiaysrO1wiLFxuICAgIFwifVwiLFxuICAgIFwicmV0dXJuIHRydWU7XCIsXG4gIFwifVwiLFxuXCJ9KTtcIixcblxuLy8gUG9seWZpbGwgY29waWVkIGZyb206XG4vLyBkZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVyXG5cIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdmaWx0ZXInLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTpcIixcbiAgXCJmdW5jdGlvbihmdW4vKiwgdGhpc0FyZyovKSB7XCIsXG4gICAgXCJpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwgfHwgdHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcjtcIixcbiAgICBcInZhciB0ID0gT2JqZWN0KHRoaXMpO1wiLFxuICAgIFwidmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1wiLFxuICAgIFwidmFyIHJlcyA9IFtdO1wiLFxuICAgIFwidmFyIHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID49IDIgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7XCIsXG4gICAgXCJmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XCIsXG4gICAgICBcImlmIChpIGluIHQpIHtcIixcbiAgICAgICAgXCJ2YXIgdmFsID0gdFtpXTtcIixcbiAgICAgICAgXCJpZiAoZnVuLmNhbGwodGhpc0FyZywgdmFsLCBpLCB0KSkgcmVzLnB1c2godmFsKTtcIixcbiAgICAgIFwifVwiLFxuICAgIFwifVwiLFxuICAgIFwicmV0dXJuIHJlcztcIixcbiAgXCJ9XCIsXG5cIn0pO1wiLFxuXG4vLyBQb2x5ZmlsbCBjb3BpZWQgZnJvbTpcbi8vIGRldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mb3JFYWNoXG5cIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdmb3JFYWNoJywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6XCIsXG4gIFwiZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcIixcbiAgICBcImlmICh0aGlzID09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yO1wiLFxuICAgIFwidmFyIFQsIGs7XCIsXG4gICAgXCJ2YXIgTyA9IE9iamVjdCh0aGlzKTtcIixcbiAgICBcInZhciBsZW4gPSBPLmxlbmd0aCA+Pj4gMDtcIixcbiAgICBcImlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgVCA9IHRoaXNBcmc7XCIsXG4gICAgXCJrID0gMDtcIixcbiAgICBcIndoaWxlIChrIDwgbGVuKSB7XCIsXG4gICAgICBcImlmIChrIGluIE8pIGNhbGxiYWNrLmNhbGwoVCwgT1trXSwgaywgTyk7XCIsXG4gICAgICBcImsrKztcIixcbiAgICBcIn1cIixcbiAgXCJ9XCIsXG5cIn0pO1wiLFxuXG4vLyBQb2x5ZmlsbCBjb3BpZWQgZnJvbTpcbi8vIGRldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9tYXBcblwiT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ21hcCcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOlwiLFxuICBcImZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XCIsXG4gICAgXCJpZiAodGhpcyA9PSBudWxsIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgbmV3IFR5cGVFcnJvcjtcIixcbiAgICBcInZhciBULCBBLCBrO1wiLFxuICAgIFwidmFyIE8gPSBPYmplY3QodGhpcyk7XCIsXG4gICAgXCJ2YXIgbGVuID0gTy5sZW5ndGggPj4+IDA7XCIsXG4gICAgXCJpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIFQgPSB0aGlzQXJnO1wiLFxuICAgIFwiQSA9IG5ldyBBcnJheShsZW4pO1wiLFxuICAgIFwiayA9IDA7XCIsXG4gICAgXCJ3aGlsZSAoayA8IGxlbikge1wiLFxuICAgICAgXCJpZiAoayBpbiBPKSBBW2tdID0gY2FsbGJhY2suY2FsbChULCBPW2tdLCBrLCBPKTtcIixcbiAgICAgIFwiaysrO1wiLFxuICAgIFwifVwiLFxuICAgIFwicmV0dXJuIEE7XCIsXG4gIFwifVwiLFxuXCJ9KTtcIixcblxuLy8gUG9seWZpbGwgY29waWVkIGZyb206XG4vLyBkZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvUmVkdWNlXG5cIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdyZWR1Y2UnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTpcIixcbiAgXCJmdW5jdGlvbihjYWxsYmFjayAvKiwgaW5pdGlhbFZhbHVlKi8pIHtcIixcbiAgICBcImlmICh0aGlzID09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yO1wiLFxuICAgIFwidmFyIHQgPSBPYmplY3QodGhpcyksIGxlbiA9IHQubGVuZ3RoID4+PiAwLCBrID0gMCwgdmFsdWU7XCIsXG4gICAgXCJpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XCIsXG4gICAgICBcInZhbHVlID0gYXJndW1lbnRzWzFdO1wiLFxuICAgIFwifSBlbHNlIHtcIixcbiAgICAgIFwid2hpbGUgKGsgPCBsZW4gJiYgIShrIGluIHQpKSBrKys7XCIsXG4gICAgICBcImlmIChrID49IGxlbikge1wiLFxuICAgICAgICBcInRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcIixcbiAgICAgIFwifVwiLFxuICAgICAgXCJ2YWx1ZSA9IHRbaysrXTtcIixcbiAgICBcIn1cIixcbiAgICBcImZvciAoOyBrIDwgbGVuOyBrKyspIHtcIixcbiAgICAgIFwiaWYgKGsgaW4gdCkgdmFsdWUgPSBjYWxsYmFjayh2YWx1ZSwgdFtrXSwgaywgdCk7XCIsXG4gICAgXCJ9XCIsXG4gICAgXCJyZXR1cm4gdmFsdWU7XCIsXG4gIFwifVwiLFxuXCJ9KTtcIixcblxuLy8gUG9seWZpbGwgY29waWVkIGZyb206XG4vLyBkZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvUmVkdWNlUmlnaHRcblwiT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ3JlZHVjZVJpZ2h0Jywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6XCIsXG4gIFwiZnVuY3Rpb24oY2FsbGJhY2sgLyosIGluaXRpYWxWYWx1ZSovKSB7XCIsXG4gICAgXCJpZiAobnVsbCA9PT0gdGhpcyB8fCAndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMgfHwgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGNhbGxiYWNrKSB0aHJvdyBuZXcgVHlwZUVycm9yO1wiLFxuICAgIFwidmFyIHQgPSBPYmplY3QodGhpcyksIGxlbiA9IHQubGVuZ3RoID4+PiAwLCBrID0gbGVuIC0gMSwgdmFsdWU7XCIsXG4gICAgXCJpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XCIsXG4gICAgICBcInZhbHVlID0gYXJndW1lbnRzWzFdO1wiLFxuICAgIFwifSBlbHNlIHtcIixcbiAgICAgIFwid2hpbGUgKGsgPj0gMCAmJiAhKGsgaW4gdCkpIGstLTtcIixcbiAgICAgIFwiaWYgKGsgPCAwKSB7XCIsXG4gICAgICAgIFwidGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1wiLFxuICAgICAgXCJ9XCIsXG4gICAgICBcInZhbHVlID0gdFtrLS1dO1wiLFxuICAgIFwifVwiLFxuICAgIFwiZm9yICg7IGsgPj0gMDsgay0tKSB7XCIsXG4gICAgICBcImlmIChrIGluIHQpIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIHRba10sIGssIHQpO1wiLFxuICAgIFwifVwiLFxuICAgIFwicmV0dXJuIHZhbHVlO1wiLFxuICBcIn1cIixcblwifSk7XCIsXG5cbi8vIFBvbHlmaWxsIGNvcGllZCBmcm9tOlxuLy8gZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvbWVcblwiT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ3NvbWUnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTpcIixcbiAgXCJmdW5jdGlvbihmdW4vKiwgdGhpc0FyZyovKSB7XCIsXG4gICAgXCJpZiAodGhpcyA9PSBudWxsIHx8IHR5cGVvZiBmdW4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3I7XCIsXG4gICAgXCJ2YXIgdCA9IE9iamVjdCh0aGlzKTtcIixcbiAgICBcInZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcIixcbiAgICBcInZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO1wiLFxuICAgIFwiZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1wiLFxuICAgICAgXCJpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXNBcmcsIHRbaV0sIGksIHQpKSB7XCIsXG4gICAgICAgIFwicmV0dXJuIHRydWU7XCIsXG4gICAgICBcIn1cIixcbiAgICBcIn1cIixcbiAgICBcInJldHVybiBmYWxzZTtcIixcbiAgXCJ9XCIsXG5cIn0pO1wiLFxuXG5cIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdzb3J0Jywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6XCIsXG4gIFwiZnVuY3Rpb24ob3B0X2NvbXApIHtcIixcbiAgICBcImZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1wiLFxuICAgICAgXCJ2YXIgY2hhbmdlcyA9IDA7XCIsXG4gICAgICBcImZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGggLSBpIC0gMTsgaisrKSB7XCIsXG4gICAgICAgIFwiaWYgKG9wdF9jb21wID9cIiArXG4gICAgICAgICAgICBcIm9wdF9jb21wKHRoaXNbal0sIHRoaXNbaiArIDFdKSA+IDAgOiB0aGlzW2pdID4gdGhpc1tqICsgMV0pIHtcIixcbiAgICAgICAgICBcInZhciBzd2FwID0gdGhpc1tqXTtcIixcbiAgICAgICAgICBcInRoaXNbal0gPSB0aGlzW2ogKyAxXTtcIixcbiAgICAgICAgICBcInRoaXNbaiArIDFdID0gc3dhcDtcIixcbiAgICAgICAgICBcImNoYW5nZXMrKztcIixcbiAgICAgICAgXCJ9XCIsXG4gICAgICBcIn1cIixcbiAgICAgIFwiaWYgKCFjaGFuZ2VzKSBicmVhaztcIixcbiAgICBcIn1cIixcbiAgICBcInJldHVybiB0aGlzO1wiLFxuICBcIn1cIixcblwifSk7XCIsXG5cblwiT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ3RvTG9jYWxlU3RyaW5nJywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6XCIsXG4gIFwiZnVuY3Rpb24oKSB7XCIsXG4gICAgXCJ2YXIgb3V0ID0gW107XCIsXG4gICAgXCJmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcIixcbiAgICAgIFwib3V0W2ldID0gKHRoaXNbaV0gPT09IG51bGwgfHwgdGhpc1tpXSA9PT0gdW5kZWZpbmVkKSA/ICcnIDogdGhpc1tpXS50b0xvY2FsZVN0cmluZygpO1wiLFxuICAgIFwifVwiLFxuICAgIFwicmV0dXJuIG91dC5qb2luKCcsJyk7XCIsXG4gIFwifVwiLFxuXCJ9KTtcIixcblwiXCIpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBOdW1iZXIgY2xhc3MuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmluaXROdW1iZXIgPSBmdW5jdGlvbihzY29wZSkge1xuICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcbiAgdmFyIHdyYXBwZXI7XG4gIC8vIE51bWJlciBjb25zdHJ1Y3Rvci5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlLnRvTnVtYmVyKCkgOiAwO1xuICAgIGlmICh0aGlzSW50ZXJwcmV0ZXIuY2FsbGVkV2l0aE5ldygpKSB7XG4gICAgICAvLyBDYWxsZWQgYXMgbmV3IE51bWJlcigpLlxuICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FsbGVkIGFzIE51bWJlcigpLlxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5OVU1CRVIgPSB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIsIHRydWUpO1xuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnTnVtYmVyJywgdGhpcy5OVU1CRVIpO1xuXG4gIHZhciBudW1Db25zdHMgPSBbJ01BWF9WQUxVRScsICdNSU5fVkFMVUUnLCAnTmFOJywgJ05FR0FUSVZFX0lORklOSVRZJyxcbiAgICAgICAgICAgICAgICAgICAnUE9TSVRJVkVfSU5GSU5JVFknXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Db25zdHMubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLCBudW1Db25zdHNbaV0sXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVByaW1pdGl2ZShOdW1iZXJbbnVtQ29uc3RzW2ldXSkpO1xuICB9XG5cbiAgLy8gU3RhdGljIG1ldGhvZHMgb24gTnVtYmVyLlxuICB3cmFwcGVyID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgc3RyID0gc3RyIHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUocGFyc2VGbG9hdChzdHIudG9TdHJpbmcoKSkpO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLCAncGFyc2VGbG9hdCcsXG4gICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIsIGZhbHNlKSk7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHN0ciwgcmFkaXgpIHtcbiAgICBzdHIgPSBzdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcbiAgICByYWRpeCA9IHJhZGl4IHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoXG4gICAgICAgIHBhcnNlSW50KHN0ci50b1N0cmluZygpLCByYWRpeC50b051bWJlcigpKSk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5OVU1CRVIsICdwYXJzZUludCcsXG4gICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIsIGZhbHNlKSk7XG5cbiAgLy8gSW5zdGFuY2UgbWV0aG9kcyBvbiBOdW1iZXIuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihmcmFjdGlvbkRpZ2l0cykge1xuICAgIGZyYWN0aW9uRGlnaXRzID0gZnJhY3Rpb25EaWdpdHMgPyBmcmFjdGlvbkRpZ2l0cy50b051bWJlcigpIDogdW5kZWZpbmVkO1xuICAgIHZhciBuID0gdGhpcy50b051bWJlcigpO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG4udG9FeHBvbmVudGlhbChmcmFjdGlvbkRpZ2l0cykpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuTlVNQkVSLCAndG9FeHBvbmVudGlhbCcsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihkaWdpdHMpIHtcbiAgICBkaWdpdHMgPSBkaWdpdHMgPyBkaWdpdHMudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbiA9IHRoaXMudG9OdW1iZXIoKTtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShuLnRvRml4ZWQoZGlnaXRzKSk7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5OVU1CRVIsICd0b0ZpeGVkJywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHByZWNpc2lvbikge1xuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA/IHByZWNpc2lvbi50b051bWJlcigpIDogdW5kZWZpbmVkO1xuICAgIHZhciBuID0gdGhpcy50b051bWJlcigpO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG4udG9QcmVjaXNpb24ocHJlY2lzaW9uKSk7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5OVU1CRVIsICd0b1ByZWNpc2lvbicsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihyYWRpeCkge1xuICAgIHJhZGl4ID0gcmFkaXggPyByYWRpeC50b051bWJlcigpIDogMTA7XG4gICAgdmFyIG4gPSB0aGlzLnRvTnVtYmVyKCk7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobi50b1N0cmluZyhyYWRpeCkpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuTlVNQkVSLCAndG9TdHJpbmcnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24obG9jYWxlcywgb3B0aW9ucykge1xuICAgIGxvY2FsZXMgPSBsb2NhbGVzID8gdGhpc0ludGVycHJldGVyLnBzZXVkb1RvTmF0aXZlKGxvY2FsZXMpIDogdW5kZWZpbmVkO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gdGhpc0ludGVycHJldGVyLnBzZXVkb1RvTmF0aXZlKG9wdGlvbnMpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFxuICAgICAgICB0aGlzLnRvTnVtYmVyKCkudG9Mb2NhbGVTdHJpbmcobG9jYWxlcywgb3B0aW9ucykpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuTlVNQkVSLCAndG9Mb2NhbGVTdHJpbmcnLCB3cmFwcGVyKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgU3RyaW5nIGNsYXNzLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5pbml0U3RyaW5nID0gZnVuY3Rpb24oc2NvcGUpIHtcbiAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG4gIHZhciB3cmFwcGVyO1xuICAvLyBTdHJpbmcgY29uc3RydWN0b3IuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZS50b1N0cmluZygpIDogJyc7XG4gICAgaWYgKHRoaXNJbnRlcnByZXRlci5jYWxsZWRXaXRoTmV3KCkpIHtcbiAgICAgIC8vIENhbGxlZCBhcyBuZXcgU3RyaW5nKCkuXG4gICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYWxsZWQgYXMgU3RyaW5nKCkuXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xuICB0aGlzLlNUUklORyA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgdHJ1ZSk7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdTdHJpbmcnLCB0aGlzLlNUUklORyk7XG5cbiAgLy8gU3RhdGljIG1ldGhvZHMgb24gU3RyaW5nLlxuICB3cmFwcGVyID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJndW1lbnRzW2ldID0gYXJndW1lbnRzW2ldLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgYXJndW1lbnRzKSk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcsICdmcm9tQ2hhckNvZGUnLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIC8vIEluc3RhbmNlIG1ldGhvZHMgb24gU3RyaW5nLlxuICAvLyBNZXRob2RzIHdpdGggbm8gYXJndW1lbnRzLlxuICB2YXIgZnVuY3Rpb25zID0gWyd0b0xvd2VyQ2FzZScsICd0b1VwcGVyQ2FzZScsXG4gICAgICAgICAgICAgICAgICAgJ3RvTG9jYWxlTG93ZXJDYXNlJywgJ3RvTG9jYWxlVXBwZXJDYXNlJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZUZ1bmMuYXBwbHkodGhpcykpO1xuICAgICAgfTtcbiAgICB9KShTdHJpbmcucHJvdG90eXBlW2Z1bmN0aW9uc1tpXV0pO1xuICAgIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5TVFJJTkcsIGZ1bmN0aW9uc1tpXSwgd3JhcHBlcik7XG4gIH1cblxuICAvLyBUcmltIGZ1bmN0aW9uIG1heSBub3QgZXhpc3QgaW4gaG9zdCBicm93c2VyLiAgV3JpdGUgdGhlbSBmcm9tIHNjcmF0Y2guXG4gIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuU1RSSU5HLCAndHJpbScsIHdyYXBwZXIpO1xuICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIucmVwbGFjZSgvXlxccysvZywgJycpKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLlNUUklORywgJ3RyaW1MZWZ0Jywgd3JhcHBlcik7XG4gIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5yZXBsYWNlKC9cXHMrJC9nLCAnJykpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuU1RSSU5HLCAndHJpbVJpZ2h0Jywgd3JhcHBlcik7XG5cbiAgLy8gTWV0aG9kcyB3aXRoIG9ubHkgbnVtZXJpYyBhcmd1bWVudHMuXG4gIGZ1bmN0aW9ucyA9IFsnY2hhckF0JywgJ2NoYXJDb2RlQXQnLCAnc3Vic3RyaW5nJywgJ3NsaWNlJywgJ3N1YnN0ciddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHdyYXBwZXIgPSAoZnVuY3Rpb24obmF0aXZlRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyZ3VtZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGFyZ3VtZW50c1tqXSA9IGFyZ3VtZW50c1tqXS50b051bWJlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFxuICAgICAgICAgICAgbmF0aXZlRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH07XG4gICAgfSkoU3RyaW5nLnByb3RvdHlwZVtmdW5jdGlvbnNbaV1dKTtcbiAgICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuU1RSSU5HLCBmdW5jdGlvbnNbaV0sIHdyYXBwZXIpO1xuICB9XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICAgIHNlYXJjaFZhbHVlID0gKHNlYXJjaFZhbHVlIHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQpLnRvU3RyaW5nKCk7XG4gICAgZnJvbUluZGV4ID0gZnJvbUluZGV4ID8gZnJvbUluZGV4LnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoXG4gICAgICAgIHN0ci5pbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLlNUUklORywgJ2luZGV4T2YnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgc2VhcmNoVmFsdWUgPSAoc2VhcmNoVmFsdWUgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICBmcm9tSW5kZXggPSBmcm9tSW5kZXggPyBmcm9tSW5kZXgudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShcbiAgICAgICAgc3RyLmxhc3RJbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpKTtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLlNUUklORywgJ2xhc3RJbmRleE9mJywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKGNvbXBhcmVTdHJpbmcsIGxvY2FsZXMsIG9wdGlvbnMpIHtcbiAgICBjb21wYXJlU3RyaW5nID0gKGNvbXBhcmVTdHJpbmcgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICBsb2NhbGVzID0gbG9jYWxlcyA/IHRoaXNJbnRlcnByZXRlci5wc2V1ZG9Ub05hdGl2ZShsb2NhbGVzKSA6IHVuZGVmaW5lZDtcbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IHRoaXNJbnRlcnByZXRlci5wc2V1ZG9Ub05hdGl2ZShvcHRpb25zKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShcbiAgICAgICAgdGhpcy50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoY29tcGFyZVN0cmluZywgbG9jYWxlcywgb3B0aW9ucykpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuU1RSSU5HLCAnbG9jYWxlQ29tcGFyZScsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICBpZiAoc2VwYXJhdG9yKSB7XG4gICAgICBzZXBhcmF0b3IgPSB0aGlzSW50ZXJwcmV0ZXIuaXNhKHNlcGFyYXRvciwgdGhpc0ludGVycHJldGVyLlJFR0VYUCkgP1xuICAgICAgICAgIHNlcGFyYXRvci5kYXRhIDogc2VwYXJhdG9yLnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIHsgLy8gaXMgdGhpcyByZWFsbHkgbmVjZXNzYXJ5P1xuICAgICAgc2VwYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsaW1pdCA9IGxpbWl0ID8gbGltaXQudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIganNMaXN0ID0gc3RyLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIHZhciBwc2V1ZG9MaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkocHNldWRvTGlzdCwgaSxcbiAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGpzTGlzdFtpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcHNldWRvTGlzdDtcbiAgfTtcbiAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLlNUUklORywgJ3NwbGl0Jywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyICs9IGFyZ3VtZW50c1tpXS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuU1RSSU5HLCAnY29uY2F0Jywgd3JhcHBlcik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgcmVnZXhwID0gcmVnZXhwID8gcmVnZXhwLmRhdGEgOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4cCk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLk5VTEw7XG4gICAgfVxuICAgIHZhciBwc2V1ZG9MaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShwc2V1ZG9MaXN0LCBpLFxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobWF0Y2hbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHBzZXVkb0xpc3Q7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5TVFJJTkcsICdtYXRjaCcsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICAgIHJlZ2V4cCA9IHJlZ2V4cCA/IHJlZ2V4cC5kYXRhIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5zZWFyY2gocmVnZXhwKSk7XG4gIH07XG4gIHRoaXMuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUodGhpcy5TVFJJTkcsICdzZWFyY2gnLCB3cmFwcGVyKTtcblxuICB3cmFwcGVyID0gZnVuY3Rpb24oc3Vic3RyLCBuZXdTdWJTdHIpIHtcbiAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICAgIHN1YnN0ciA9IChzdWJzdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudmFsdWVPZigpO1xuICAgIG5ld1N1YlN0ciA9IChuZXdTdWJTdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIucmVwbGFjZShzdWJzdHIsIG5ld1N1YlN0cikpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuU1RSSU5HLCAncmVwbGFjZScsIHdyYXBwZXIpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBCb29sZWFuIGNsYXNzLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5pbml0Qm9vbGVhbiA9IGZ1bmN0aW9uKHNjb3BlKSB7XG4gIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuICB2YXIgd3JhcHBlcjtcbiAgLy8gQm9vbGVhbiBjb25zdHJ1Y3Rvci5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlLnRvQm9vbGVhbigpIDogZmFsc2U7XG4gICAgaWYgKHRoaXNJbnRlcnByZXRlci5jYWxsZWRXaXRoTmV3KCkpIHtcbiAgICAgIC8vIENhbGxlZCBhcyBuZXcgQm9vbGVhbigpLlxuICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FsbGVkIGFzIEJvb2xlYW4oKS5cbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHZhbHVlKTtcbiAgICB9XG4gIH07XG4gIHRoaXMuQk9PTEVBTiA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgdHJ1ZSk7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdCb29sZWFuJywgdGhpcy5CT09MRUFOKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgRGF0ZSBjbGFzcy5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuaW5pdERhdGUgPSBmdW5jdGlvbihzY29wZSkge1xuICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcbiAgdmFyIHdyYXBwZXI7XG4gIC8vIERhdGUgY29uc3RydWN0b3IuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbih2YWx1ZSwgdmFyX2FyZ3MpIHtcbiAgICBpZiAodGhpc0ludGVycHJldGVyLmNhbGxlZFdpdGhOZXcoKSkge1xuICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBEYXRlKCkuXG4gICAgICB2YXIgbmV3RGF0ZSA9IHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhbGxlZCBhcyBEYXRlKCkuXG4gICAgICAvLyBDYWxsaW5nIERhdGUoKSBhcyBhIGZ1bmN0aW9uIHJldHVybnMgYSBzdHJpbmcsIG5vIGFyZ3VtZW50cyBhcmUgaGVlZGVkLlxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoRGF0ZSgpKTtcbiAgICB9XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBuZXdEYXRlLmRhdGEgPSBuZXcgRGF0ZSgpO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxICYmICh2YWx1ZS50eXBlID09ICdzdHJpbmcnIHx8XG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5pc2EodmFsdWUsIHRoaXNJbnRlcnByZXRlci5TVFJJTkcpKSkge1xuICAgICAgbmV3RGF0ZS5kYXRhID0gbmV3IERhdGUodmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW251bGxdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpICsgMV0gPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0udG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIG5ld0RhdGUuZGF0YSA9IG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoRGF0ZSwgYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0ZTtcbiAgfTtcbiAgdGhpcy5EQVRFID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCB0cnVlKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0RhdGUnLCB0aGlzLkRBVEUpO1xuXG4gIC8vIFN0YXRpYyBtZXRob2RzIG9uIERhdGUuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5EQVRFLCAnbm93JywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihkYXRlU3RyaW5nKSB7XG4gICAgZGF0ZVN0cmluZyA9IGRhdGVTdHJpbmcgPyBkYXRlU3RyaW5nLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoRGF0ZS5wYXJzZShkYXRlU3RyaW5nKSk7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5EQVRFLCAncGFyc2UnLFxuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0udG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYXJncykpO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURSwgJ1VUQycsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcblxuICAvLyBJbnN0YW5jZSBtZXRob2RzIG9uIERhdGUuXG4gIHZhciBmdW5jdGlvbnMgPSBbJ2dldERhdGUnLCAnZ2V0RGF5JywgJ2dldEZ1bGxZZWFyJywgJ2dldEhvdXJzJyxcbiAgICAgICdnZXRNaWxsaXNlY29uZHMnLCAnZ2V0TWludXRlcycsICdnZXRNb250aCcsICdnZXRTZWNvbmRzJywgJ2dldFRpbWUnLFxuICAgICAgJ2dldFRpbWV6b25lT2Zmc2V0JywgJ2dldFVUQ0RhdGUnLCAnZ2V0VVRDRGF5JywgJ2dldFVUQ0Z1bGxZZWFyJyxcbiAgICAgICdnZXRVVENIb3VycycsICdnZXRVVENNaWxsaXNlY29uZHMnLCAnZ2V0VVRDTWludXRlcycsICdnZXRVVENNb250aCcsXG4gICAgICAnZ2V0VVRDU2Vjb25kcycsICdnZXRZZWFyJyxcbiAgICAgICdzZXREYXRlJywgJ3NldEZ1bGxZZWFyJywgJ3NldEhvdXJzJywgJ3NldE1pbGxpc2Vjb25kcycsXG4gICAgICAnc2V0TWludXRlcycsICdzZXRNb250aCcsICdzZXRTZWNvbmRzJywgJ3NldFRpbWUnLCAnc2V0VVRDRGF0ZScsXG4gICAgICAnc2V0VVRDRnVsbFllYXInLCAnc2V0VVRDSG91cnMnLCAnc2V0VVRDTWlsbGlzZWNvbmRzJywgJ3NldFVUQ01pbnV0ZXMnLFxuICAgICAgJ3NldFVUQ01vbnRoJywgJ3NldFVUQ1NlY29uZHMnLCAnc2V0WWVhcicsXG4gICAgICAndG9EYXRlU3RyaW5nJywgJ3RvSVNPU3RyaW5nJywgJ3RvSlNPTicsICd0b0dNVFN0cmluZycsXG4gICAgICAndG9Mb2NhbGVEYXRlU3RyaW5nJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvTG9jYWxlVGltZVN0cmluZycsXG4gICAgICAndG9UaW1lU3RyaW5nJywgJ3RvVVRDU3RyaW5nJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gdGhpc0ludGVycHJldGVyLnBzZXVkb1RvTmF0aXZlKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoXG4gICAgICAgICAgICB0aGlzLmRhdGFbbmF0aXZlRnVuY10uYXBwbHkodGhpcy5kYXRhLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pKGZ1bmN0aW9uc1tpXSk7XG4gICAgdGhpcy5zZXROYXRpdmVGdW5jdGlvblByb3RvdHlwZSh0aGlzLkRBVEUsIGZ1bmN0aW9uc1tpXSwgd3JhcHBlcik7XG4gIH1cbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBNYXRoIG9iamVjdC5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuaW5pdE1hdGggPSBmdW5jdGlvbihzY29wZSkge1xuICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcbiAgdmFyIG15TWF0aCA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuT0JKRUNUKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ01hdGgnLCBteU1hdGgpO1xuICB2YXIgbWF0aENvbnN0cyA9IFsnRScsICdMTjInLCAnTE4xMCcsICdMT0cyRScsICdMT0cxMEUnLCAnUEknLFxuICAgICAgICAgICAgICAgICAgICAnU1FSVDFfMicsICdTUVJUMiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGhDb25zdHMubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KG15TWF0aCwgbWF0aENvbnN0c1tpXSxcbiAgICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUoTWF0aFttYXRoQ29uc3RzW2ldXSksXG4gICAgICAgIEludGVycHJldGVyLlJFQURPTkxZX05PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gIH1cbiAgdmFyIG51bUZ1bmN0aW9ucyA9IFsnYWJzJywgJ2Fjb3MnLCAnYXNpbicsICdhdGFuJywgJ2F0YW4yJywgJ2NlaWwnLCAnY29zJyxcbiAgICAgICAgICAgICAgICAgICAgICAnZXhwJywgJ2Zsb29yJywgJ2xvZycsICdtYXgnLCAnbWluJywgJ3BvdycsICdyYW5kb20nLFxuICAgICAgICAgICAgICAgICAgICAgICdyb3VuZCcsICdzaW4nLCAnc3FydCcsICd0YW4nXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYXJndW1lbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgYXJndW1lbnRzW2pdID0gYXJndW1lbnRzW2pdLnRvTnVtYmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoXG4gICAgICAgICAgICBuYXRpdmVGdW5jLmFwcGx5KE1hdGgsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9KShNYXRoW251bUZ1bmN0aW9uc1tpXV0pO1xuICAgIHRoaXMuc2V0UHJvcGVydHkobXlNYXRoLCBudW1GdW5jdGlvbnNbaV0sXG4gICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuICB9XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgUmVndWxhciBFeHByZXNzaW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuaW5pdFJlZ0V4cCA9IGZ1bmN0aW9uKHNjb3BlKSB7XG4gIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuICB2YXIgd3JhcHBlcjtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yLlxuICB3cmFwcGVyID0gZnVuY3Rpb24ocGF0dGVybiwgZmxhZ3MpIHtcbiAgICBpZiAodGhpc0ludGVycHJldGVyLmNhbGxlZFdpdGhOZXcoKSkge1xuICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBSZWdFeHAoKS5cbiAgICAgIHZhciByZ3ggPSB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYWxsZWQgYXMgUmVnRXhwKCkuXG4gICAgICB2YXIgcmd4ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuUkVHRVhQKTtcbiAgICB9XG4gICAgcGF0dGVybiA9IHBhdHRlcm4gPyBwYXR0ZXJuLnRvU3RyaW5nKCkgOiAnJztcbiAgICBmbGFncyA9IGZsYWdzID8gZmxhZ3MudG9TdHJpbmcoKSA6ICcnO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIucG9wdWxhdGVSZWdFeHBfKHJneCwgbmV3IFJlZ0V4cChwYXR0ZXJuLCBmbGFncykpO1xuICB9O1xuICB0aGlzLlJFR0VYUCA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgdHJ1ZSk7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdSZWdFeHAnLCB0aGlzLlJFR0VYUCk7XG5cbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlJFR0VYUC5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXSwgJ2dsb2JhbCcsXG4gICAgICB0aGlzLlVOREVGSU5FRCwgSW50ZXJwcmV0ZXIuUkVBRE9OTFlfTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlJFR0VYUC5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXSwgJ2lnbm9yZUNhc2UnLFxuICAgICAgdGhpcy5VTkRFRklORUQsIEludGVycHJldGVyLlJFQURPTkxZX05PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5SRUdFWFAucHJvcGVydGllc1sncHJvdG90eXBlJ10sICdtdWx0aWxpbmUnLFxuICAgICAgdGhpcy5VTkRFRklORUQsIEludGVycHJldGVyLlJFQURPTkxZX05PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gIHRoaXMuc2V0UHJvcGVydHkodGhpcy5SRUdFWFAucHJvcGVydGllc1sncHJvdG90eXBlJ10sICdzb3VyY2UnLFxuICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUoJyg/OiknKSxcbiAgICAgIEludGVycHJldGVyLlJFQURPTkxZX05PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG5cbiAgd3JhcHBlciA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHN0ciA9IHN0ci50b1N0cmluZygpO1xuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMuZGF0YS50ZXN0KHN0cikpO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuUkVHRVhQLCAndGVzdCcsIHdyYXBwZXIpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcbiAgICAvLyBHZXQgbGFzdEluZGV4IGZyb20gd3JhcHBlZCByZWdleCwgc2luY2UgdGhpcyBpcyBzZXR0YWJsZS5cbiAgICB0aGlzLmRhdGEubGFzdEluZGV4ID1cbiAgICAgICAgdGhpc0ludGVycHJldGVyLmdldFByb3BlcnR5KHRoaXMsICdsYXN0SW5kZXgnKS50b051bWJlcigpO1xuICAgIHZhciBtYXRjaCA9IHRoaXMuZGF0YS5leGVjKHN0cik7XG4gICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHRoaXMsICdsYXN0SW5kZXgnLFxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMuZGF0YS5sYXN0SW5kZXgpKTtcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkFSUkFZKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHJlc3VsdCwgaSxcbiAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobWF0Y2hbaV0pKTtcbiAgICAgIH1cbiAgICAgIC8vIG1hdGNoIGhhcyBhZGRpdGlvbmFsIHByb3BlcnRpZXMuXG4gICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkocmVzdWx0LCAnaW5kZXgnLFxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobWF0Y2guaW5kZXgpKTtcbiAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShyZXN1bHQsICdpbnB1dCcsXG4gICAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShtYXRjaC5pbnB1dCkpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5OVUxMO1xuICB9O1xuICB0aGlzLnNldE5hdGl2ZUZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuUkVHRVhQLCAnZXhlYycsIHdyYXBwZXIpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIEpTT04gb2JqZWN0LlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5pbml0SlNPTiA9IGZ1bmN0aW9uKHNjb3BlKSB7XG4gIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuICB2YXIgbXlKU09OID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCk7XG4gIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdKU09OJywgbXlKU09OKTtcblxuICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG5hdGl2ZU9iaiA9IEpTT04ucGFyc2UodGV4dC50b1N0cmluZygpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlNZTlRBWF9FUlJPUiwgZS5tZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5uYXRpdmVUb1BzZXVkbyhuYXRpdmVPYmopO1xuICB9O1xuICB0aGlzLnNldFByb3BlcnR5KG15SlNPTiwgJ3BhcnNlJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyLCBmYWxzZSkpO1xuXG4gIHdyYXBwZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBuYXRpdmVPYmogPSB0aGlzSW50ZXJwcmV0ZXIucHNldWRvVG9OYXRpdmUodmFsdWUpO1xuICAgIHRyeSB7XG4gICAgICB2YXIgc3RyID0gSlNPTi5zdHJpbmdpZnkobmF0aXZlT2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlRZUEVfRVJST1IsIGUubWVzc2FnZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0cik7XG4gIH07XG4gIHRoaXMuc2V0UHJvcGVydHkobXlKU09OLCAnc3RyaW5naWZ5JyxcbiAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgRXJyb3IgY2xhc3MuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmluaXRFcnJvciA9IGZ1bmN0aW9uKHNjb3BlKSB7XG4gIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuICAvLyBFcnJvciBjb25zdHJ1Y3Rvci5cbiAgdGhpcy5FUlJPUiA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24oZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcbiAgICBpZiAodGhpc0ludGVycHJldGVyLmNhbGxlZFdpdGhOZXcoKSkge1xuICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBFcnJvcigpLlxuICAgICAgdmFyIG5ld0Vycm9yID0gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FsbGVkIGFzIEVycm9yKCkuXG4gICAgICB2YXIgbmV3RXJyb3IgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5FUlJPUik7XG4gICAgfVxuICAgIGlmIChvcHRfbWVzc2FnZSkge1xuICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KG5ld0Vycm9yLCAnbWVzc2FnZScsXG4gICAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShTdHJpbmcob3B0X21lc3NhZ2UpKSxcbiAgICAgICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RXJyb3I7XG4gIH0sIHRydWUpO1xuICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnRXJyb3InLCB0aGlzLkVSUk9SKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkVSUk9SLnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddLCAnbWVzc2FnZScsXG4gICAgICB0aGlzLlNUUklOR19FTVBUWSwgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkVSUk9SLnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddLCAnbmFtZScsXG4gICAgICB0aGlzLmNyZWF0ZVByaW1pdGl2ZSgnRXJyb3InKSwgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcblxuICB2YXIgY3JlYXRlRXJyb3JTdWJjbGFzcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgY29uc3RydWN0b3IgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlTmF0aXZlRnVuY3Rpb24oXG4gICAgICAgIGZ1bmN0aW9uKG9wdF9tZXNzYWdlKSB7XG4gICAgICAgICAgaWYgKHRoaXNJbnRlcnByZXRlci5jYWxsZWRXaXRoTmV3KCkpIHtcbiAgICAgICAgICAgIC8vIENhbGxlZCBhcyBuZXcgWHl6RXJyb3IoKS5cbiAgICAgICAgICAgIHZhciBuZXdFcnJvciA9IHRoaXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENhbGxlZCBhcyBYeXpFcnJvcigpLlxuICAgICAgICAgICAgdmFyIG5ld0Vycm9yID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdChjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRfbWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KG5ld0Vycm9yLCAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShTdHJpbmcob3B0X21lc3NhZ2UpKSxcbiAgICAgICAgICAgICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3RXJyb3I7XG4gICAgICAgIH0sIHRydWUpO1xuICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3Byb3RvdHlwZScsXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkVSUk9SKSk7XG4gICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGNvbnN0cnVjdG9yLnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddLCAnbmFtZScsXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobmFtZSksXG4gICAgICAgIEludGVycHJldGVyLk5PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHNjb3BlLCBuYW1lLCBjb25zdHJ1Y3Rvcik7XG5cbiAgICByZXR1cm4gY29uc3RydWN0b3I7XG4gIH07XG5cbiAgdGhpcy5FVkFMX0VSUk9SID0gY3JlYXRlRXJyb3JTdWJjbGFzcygnRXZhbEVycm9yJyk7XG4gIHRoaXMuUkFOR0VfRVJST1IgPSBjcmVhdGVFcnJvclN1YmNsYXNzKCdSYW5nZUVycm9yJyk7XG4gIHRoaXMuUkVGRVJFTkNFX0VSUk9SID0gY3JlYXRlRXJyb3JTdWJjbGFzcygnUmVmZXJlbmNlRXJyb3InKTtcbiAgdGhpcy5TWU5UQVhfRVJST1IgPSBjcmVhdGVFcnJvclN1YmNsYXNzKCdTeW50YXhFcnJvcicpO1xuICB0aGlzLlRZUEVfRVJST1IgPSBjcmVhdGVFcnJvclN1YmNsYXNzKCdUeXBlRXJyb3InKTtcbiAgdGhpcy5VUklfRVJST1IgPSBjcmVhdGVFcnJvclN1YmNsYXNzKCdVUklFcnJvcicpO1xufTtcblxuLyoqXG4gKiBJcyBhbiBvYmplY3Qgb2YgYSBjZXJ0YWluIGNsYXNzP1xuICogQHBhcmFtIHtPYmplY3R9IGNoaWxkIE9iamVjdCB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciBvZiBvYmplY3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG9iamVjdCBpcyB0aGUgY2xhc3Mgb3IgaW5oZXJpdHMgZnJvbSBpdC5cbiAqICAgICBGYWxzZSBvdGhlcndpc2UuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5pc2EgPSBmdW5jdGlvbihjaGlsZCwgY29uc3RydWN0b3IpIHtcbiAgaWYgKCFjaGlsZCB8fCAhY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gY29uc3RydWN0b3IucHJvcGVydGllc1sncHJvdG90eXBlJ107XG4gIGRvIHtcbiAgICBpZiAoY2hpbGQgPT0gcHJvdG8pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJvdG8pKTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBDb21wYXJlcyB0d28gb2JqZWN0cyBhZ2FpbnN0IGVhY2ggb3RoZXIuXG4gKiBAcGFyYW0geyFPYmplY3R9IGEgRmlyc3Qgb2JqZWN0LlxuICogQHBhcmFtIHshT2JqZWN0fSBiIFNlY29uZCBvYmplY3QuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0xIGlmIGEgaXMgc21hbGxlciwgMCBpZiBhID09IGIsIDEgaWYgYSBpcyBiaWdnZXIsXG4gKiAgICAgTmFOIGlmIHRoZXkgYXJlIG5vdCBjb21wYXJhYmxlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuY29tcCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKGEuaXNQcmltaXRpdmUgJiYgdHlwZW9mIGEuZGF0YSA9PSAnbnVtYmVyJyAmJiBpc05hTihhLmRhdGEpIHx8XG4gICAgICBiLmlzUHJpbWl0aXZlICYmIHR5cGVvZiBiLmRhdGEgPT0gJ251bWJlcicgJiYgaXNOYU4oYi5kYXRhKSkge1xuICAgIC8vIE5hTiBpcyBub3QgY29tcGFyYWJsZSB0byBhbnl0aGluZywgaW5jbHVkaW5nIGl0c2VsZi5cbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgdmFyIGFWYWx1ZSA9IGEuaXNQcmltaXRpdmUgPyBhLmRhdGEgOiBhLnRvU3RyaW5nKCk7XG4gIHZhciBiVmFsdWUgPSBiLmlzUHJpbWl0aXZlID8gYi5kYXRhIDogYi50b1N0cmluZygpO1xuICBpZiAoYVZhbHVlIDwgYlZhbHVlKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGFWYWx1ZSA+IGJWYWx1ZSkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKCFhLmlzUHJpbWl0aXZlICYmICFiLmlzUHJpbWl0aXZlKSB7XG4gICAgLy8gVHdvIG9iamVjdHMgdGhhdCBoYXZlIGVxdWFsIHZhbHVlcyBhcmUgc3RpbGwgbm90IGVxdWFsLlxuICAgIC8vIGUuZy4gWzEsIDJdICE9IFsxLCAyXVxuICAgIHJldHVybiBOYU47XG4gIH0gZWxzZSBpZiAoYVZhbHVlID09IGJWYWx1ZSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBOYU47XG59O1xuXG4vKipcbiAqIElzIGEgdmFsdWUgYSBsZWdhbCBpbnRlZ2VyIGZvciBhbiBhcnJheT9cbiAqIEBwYXJhbSB7Kn0gbiBWYWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm4ge251bWJlcn0gWmVybywgb3IgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHRoZSB2YWx1ZSBjYW4gYmVcbiAqICAgICBjb252ZXJ0ZWQgdG8gc3VjaC4gIE5hTiBvdGhlcndpc2UuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5hcnJheUluZGV4ID0gZnVuY3Rpb24obikge1xuICBuID0gTnVtYmVyKG4pO1xuICBpZiAoIWlzRmluaXRlKG4pIHx8IG4gIT0gTWF0aC5mbG9vcihuKSB8fCBuIDwgMCB8fCBuID49IE1hdGgucG93KDIsIDMyKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgcmV0dXJuIG47XG59O1xuXG4vKipcbiAqIENsYXNzIGZvciBhIG51bWJlciwgc3RyaW5nLCBib29sZWFuLCBudWxsLCBvciB1bmRlZmluZWQuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfHVuZGVmaW5lZH0gZGF0YSBQcmltaXRpdmUgdmFsdWUuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlcn0gaW50ZXJwcmV0ZXIgVGhlIEpTIEludGVycHJldGVyIHRvIGJpbmQgdG8uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuSW50ZXJwcmV0ZXIuUHJpbWl0aXZlID0gZnVuY3Rpb24oZGF0YSwgaW50ZXJwcmV0ZXIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgZGF0YTtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicpIHtcbiAgICB0aGlzLnByb3RvID0gaW50ZXJwcmV0ZXIuTlVNQkVSLnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddO1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLnByb3RvID0gaW50ZXJwcmV0ZXIuU1RSSU5HLnByb3BlcnRpZXNbJ3Byb3RvdHlwZSddO1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgdGhpcy5wcm90byA9IGludGVycHJldGVyLkJPT0xFQU4ucHJvcGVydGllc1sncHJvdG90eXBlJ107XG4gIH1cbn07XG5cbi8qKlxuICogQHR5cGUge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfHVuZGVmaW5lZH1cbiAqL1xuSW50ZXJwcmV0ZXIuUHJpbWl0aXZlLnByb3RvdHlwZS5kYXRhID0gdW5kZWZpbmVkO1xuXG4vKipcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbkludGVycHJldGVyLlByaW1pdGl2ZS5wcm90b3R5cGUudHlwZSA9ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIEB0eXBlIHtJbnRlcnByZXRlci5PYmplY3R9XG4gKi9cbkludGVycHJldGVyLlByaW1pdGl2ZS5wcm90b3R5cGUucHJvdG8gPSBudWxsO1xuXG4vKipcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5JbnRlcnByZXRlci5QcmltaXRpdmUucHJvdG90eXBlLmlzUHJpbWl0aXZlID0gdHJ1ZTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoaXMgcHJpbWl0aXZlIGludG8gYSBib29sZWFuLlxuICogQHJldHVybiB7Ym9vbGVhbn0gQm9vbGVhbiB2YWx1ZS5cbiAqL1xuSW50ZXJwcmV0ZXIuUHJpbWl0aXZlLnByb3RvdHlwZS50b0Jvb2xlYW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEJvb2xlYW4odGhpcy5kYXRhKTtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGlzIHByaW1pdGl2ZSBpbnRvIGEgbnVtYmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgdmFsdWUuXG4gKi9cbkludGVycHJldGVyLlByaW1pdGl2ZS5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE51bWJlcih0aGlzLmRhdGEpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoaXMgcHJpbWl0aXZlIGludG8gYSBzdHJpbmcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0cmluZyB2YWx1ZS5cbiAqIEBvdmVycmlkZVxuICovXG5JbnRlcnByZXRlci5QcmltaXRpdmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBTdHJpbmcodGhpcy5kYXRhKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBwcmltaXRpdmUgdmFsdWUuXG4gKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfGJvb2xlYW58bnVsbHx1bmRlZmluZWR9IFByaW1pdGl2ZSB2YWx1ZS5cbiAqIEBvdmVycmlkZVxuICovXG5JbnRlcnByZXRlci5QcmltaXRpdmUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGRhdGEgb2JqZWN0IGZvciBhIHByaW1pdGl2ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xib29sZWFufG51bGx8dW5kZWZpbmVkfFJlZ0V4cH0gZGF0YSBEYXRhIHRvXG4gKiAgICAgZW5jYXBzdWxhdGUuXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuUHJpbWl0aXZlfCFJbnRlcnByZXRlci5PYmplY3R9IE5ldyBkYXRhIG9iamVjdC5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmNyZWF0ZVByaW1pdGl2ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgLy8gUmV1c2UgYSBwcmVkZWZpbmVkIHByaW1pdGl2ZSBjb25zdGFudCBpZiBwb3NzaWJsZS5cbiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0aGlzLlVOREVGSU5FRDtcbiAgfSBlbHNlIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuTlVMTDtcbiAgfSBlbHNlIGlmIChkYXRhID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRoaXMuVFJVRTtcbiAgfSBlbHNlIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgIHJldHVybiB0aGlzLkZBTFNFO1xuICB9IGVsc2UgaWYgKGRhdGEgPT09IDApIHtcbiAgICByZXR1cm4gdGhpcy5OVU1CRVJfWkVSTztcbiAgfSBlbHNlIGlmIChkYXRhID09PSAxKSB7XG4gICAgcmV0dXJuIHRoaXMuTlVNQkVSX09ORTtcbiAgfSBlbHNlIGlmIChkYXRhID09PSAnJykge1xuICAgIHJldHVybiB0aGlzLlNUUklOR19FTVBUWTtcbiAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHRoaXMucG9wdWxhdGVSZWdFeHBfKHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuUkVHRVhQKSwgZGF0YSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoZGF0YSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIENsYXNzIGZvciBhbiBvYmplY3QuXG4gKiBAcGFyYW0ge0ludGVycHJldGVyLk9iamVjdH0gcHJvdG8gUHJvdG90eXBlIG9iamVjdCBvciBudWxsLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbkludGVycHJldGVyLk9iamVjdCA9IGZ1bmN0aW9uKHByb3RvKSB7XG4gIHRoaXMubm90Q29uZmlndXJhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5ub3RFbnVtZXJhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5ub3RXcml0YWJsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuZ2V0dGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5zZXR0ZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLnByb3BlcnRpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLnByb3RvID0gcHJvdG87XG59O1xuXG4vKipcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbkludGVycHJldGVyLk9iamVjdC5wcm90b3R5cGUudHlwZSA9ICdvYmplY3QnO1xuXG4vKipcbiAqIEB0eXBlIHtJbnRlcnByZXRlci5PYmplY3R9XG4gKi9cbkludGVycHJldGVyLk9iamVjdC5wcm90b3R5cGUucHJvdG8gPSBudWxsO1xuXG4vKipcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5JbnRlcnByZXRlci5PYmplY3QucHJvdG90eXBlLmlzUHJpbWl0aXZlID0gZmFsc2U7XG5cbi8qKlxuICogQHR5cGUge251bWJlcnxzdHJpbmd8Ym9vbGVhbnx1bmRlZmluZWR8IVJlZ0V4cH1cbiAqL1xuSW50ZXJwcmV0ZXIuT2JqZWN0LnByb3RvdHlwZS5kYXRhID0gdW5kZWZpbmVkO1xuXG4vKipcbiAqIENvbnZlcnQgdGhpcyBvYmplY3QgaW50byBhIGJvb2xlYW4uXG4gKiBAcmV0dXJuIHtib29sZWFufSBCb29sZWFuIHZhbHVlLlxuICovXG5JbnRlcnByZXRlci5PYmplY3QucHJvdG90eXBlLnRvQm9vbGVhbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGlzIG9iamVjdCBpbnRvIGEgbnVtYmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgdmFsdWUuXG4gKi9cbkludGVycHJldGVyLk9iamVjdC5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE51bWJlcih0aGlzLmRhdGEgPT09IHVuZGVmaW5lZCA/IHRoaXMudG9TdHJpbmcoKSA6IHRoaXMuZGF0YSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhpcyBvYmplY3QgaW50byBhIHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIHZhbHVlLlxuICogQG92ZXJyaWRlXG4gKi9cbkludGVycHJldGVyLk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID49IDApIHtcbiAgICAvLyBBcnJheVxuICAgIHZhciBjeWNsZXMgPSBJbnRlcnByZXRlci50b1N0cmluZ0N5Y2xlc187XG4gICAgY3ljbGVzLnB1c2godGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdHJzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xuICAgICAgICBzdHJzW2ldID0gKCF2YWx1ZSB8fCAodmFsdWUuaXNQcmltaXRpdmUgJiYgKHZhbHVlLmRhdGEgPT09IG51bGwgfHxcbiAgICAgICAgICAgIHZhbHVlLmRhdGEgPT09IHVuZGVmaW5lZCkpIHx8XG4gICAgICAgICAgICBjeWNsZXMuaW5kZXhPZih2YWx1ZSkgIT0gLTEpID8gJycgOiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjeWNsZXMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHJzLmpvaW4oJywnKTtcbiAgfVxuICBpZiAodGhpcy5lcnJvcikge1xuICAgIHZhciBjeWNsZXMgPSBJbnRlcnByZXRlci50b1N0cmluZ0N5Y2xlc187XG4gICAgaWYgKGN5Y2xlcy5pbmRleE9mKHRoaXMpICE9IC0xKSB7XG4gICAgICByZXR1cm4gJ1tFcnJvcl0nO1xuICAgIH1cbiAgICB2YXIgbmFtZSwgbWVzc2FnZTtcbiAgICAvLyBCdWc6IERvZXMgbm90IHN1cHBvcnQgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgbmFtZSBvciBtZXNzYWdlLlxuICAgIHZhciBvYmogPSB0aGlzO1xuICAgIGRvIHtcbiAgICAgIGlmICgnbmFtZScgaW4gb2JqLnByb3BlcnRpZXMpIHtcbiAgICAgICAgbmFtZSA9IG9iai5wcm9wZXJ0aWVzWyduYW1lJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKG9iai5wcm90byAhPSBvYmogJiYgKG9iaiA9IG9iai5wcm90bykpO1xuICAgIHZhciBvYmogPSB0aGlzO1xuICAgIGRvIHtcbiAgICAgIGlmICgnbWVzc2FnZScgaW4gb2JqLnByb3BlcnRpZXMpIHtcbiAgICAgICAgbWVzc2FnZSA9IG9iai5wcm9wZXJ0aWVzWydtZXNzYWdlJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKChvYmogPSBvYmoucHJvdG8pKTtcbiAgICBjeWNsZXMucHVzaCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgbmFtZSA9IG5hbWUgJiYgbmFtZS50b1N0cmluZygpO1xuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgJiYgbWVzc2FnZS50b1N0cmluZygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBjeWNsZXMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlID8gbmFtZSArICc6ICcgKyBtZXNzYWdlIDogbmFtZSArICcnO1xuICB9XG4gIGlmICh0aGlzLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5kYXRhKTtcbiAgfVxuICByZXR1cm4gJ1snICsgdGhpcy50eXBlICsgJ10nO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG9iamVjdCB2YWx1ZS5cbiAqIEByZXR1cm4geyp9IFZhbHVlLlxuICogQG92ZXJyaWRlXG4gKi9cbkludGVycHJldGVyLk9iamVjdC5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5kYXRhID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5kYXRhO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge0ludGVycHJldGVyLk9iamVjdH0gY29uc3RydWN0b3IgUGFyZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLFxuICogICAgIG9yIG51bGwgaWYgc2NvcGUgb2JqZWN0LlxuICogQHJldHVybiB7IUludGVycHJldGVyLk9iamVjdH0gTmV3IGRhdGEgb2JqZWN0LlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuY3JlYXRlT2JqZWN0ID0gZnVuY3Rpb24oY29uc3RydWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMuY3JlYXRlT2JqZWN0UHJvdG8oY29uc3RydWN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IucHJvcGVydGllc1sncHJvdG90eXBlJ10pO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge0ludGVycHJldGVyLk9iamVjdH0gcHJvdG8gUHJvdG90eXBlIG9iamVjdC5cbiAqIEByZXR1cm4geyFJbnRlcnByZXRlci5PYmplY3R9IE5ldyBkYXRhIG9iamVjdC5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFByb3RvID0gZnVuY3Rpb24ocHJvdG8pIHtcbiAgdmFyIG9iaiA9IG5ldyBJbnRlcnByZXRlci5PYmplY3QocHJvdG8pO1xuICAvLyBGdW5jdGlvbnMgaGF2ZSBwcm90b3R5cGUgb2JqZWN0cy5cbiAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5GVU5DVElPTikpIHtcbiAgICBvYmoudHlwZSA9ICdmdW5jdGlvbic7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eShvYmosICdwcm90b3R5cGUnLCB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCB8fCBudWxsKSk7XG4gIH1cbiAgLy8gQXJyYXlzIGhhdmUgbGVuZ3RoLlxuICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkge1xuICAgIG9iai5sZW5ndGggPSAwO1xuICB9XG4gIGlmICh0aGlzLmlzYShvYmosIHRoaXMuRVJST1IpKSB7XG4gICAgb2JqLmVycm9yID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgcHNldWRvIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QgYmFzZWQgb24gYSBuYXRpdmUgcmVndWxhclxuICogZXhwcmVzc2lvbiBvYmplY3QuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IHBzZXVkb1JlZ2V4cCBUaGUgZXhpc3Rpbmcgb2JqZWN0IHRvIHNldC5cbiAqIEBwYXJhbSB7IVJlZ0V4cH0gbmF0aXZlUmVnZXhwIFRoZSBuYXRpdmUgcmVndWxhciBleHByZXNzaW9uLlxuICogQHJldHVybiB7IUludGVycHJldGVyLk9iamVjdH0gTmV3bHkgcG9wdWxhdGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUucG9wdWxhdGVSZWdFeHBfID0gZnVuY3Rpb24ocHNldWRvUmVnZXhwLCBuYXRpdmVSZWdleHApIHtcbiAgcHNldWRvUmVnZXhwLmRhdGEgPSBuYXRpdmVSZWdleHA7XG4gIC8vIGxhc3RJbmRleCBpcyBzZXR0YWJsZSwgYWxsIG90aGVycyBhcmUgcmVhZC1vbmx5IGF0dHJpYnV0ZXNcbiAgdGhpcy5zZXRQcm9wZXJ0eShwc2V1ZG9SZWdleHAsICdsYXN0SW5kZXgnLFxuICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUobmF0aXZlUmVnZXhwLmxhc3RJbmRleCksXG4gICAgICBJbnRlcnByZXRlci5OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IpO1xuICB0aGlzLnNldFByb3BlcnR5KHBzZXVkb1JlZ2V4cCwgJ3NvdXJjZScsXG4gICAgICB0aGlzLmNyZWF0ZVByaW1pdGl2ZShuYXRpdmVSZWdleHAuc291cmNlKSxcbiAgICAgIEludGVycHJldGVyLlJFQURPTkxZX05PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gIHRoaXMuc2V0UHJvcGVydHkocHNldWRvUmVnZXhwLCAnZ2xvYmFsJyxcbiAgICAgIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZVJlZ2V4cC5nbG9iYWwpLFxuICAgICAgSW50ZXJwcmV0ZXIuUkVBRE9OTFlfTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcbiAgdGhpcy5zZXRQcm9wZXJ0eShwc2V1ZG9SZWdleHAsICdpZ25vcmVDYXNlJyxcbiAgICAgIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZVJlZ2V4cC5pZ25vcmVDYXNlKSxcbiAgICAgIEludGVycHJldGVyLlJFQURPTkxZX05PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gIHRoaXMuc2V0UHJvcGVydHkocHNldWRvUmVnZXhwLCAnbXVsdGlsaW5lJyxcbiAgICAgIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZVJlZ2V4cC5tdWx0aWxpbmUpLFxuICAgICAgSW50ZXJwcmV0ZXIuUkVBRE9OTFlfTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcbiAgLy8gT3ZlcnJpZGUgYSBjb3VwbGUgb2YgT2JqZWN0J3MgY29udmVyc2lvbiBmdW5jdGlvbnMuXG4gIHBzZXVkb1JlZ2V4cC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge3JldHVybiBTdHJpbmcodGhpcy5kYXRhKTt9O1xuICBwc2V1ZG9SZWdleHAudmFsdWVPZiA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLmRhdGE7fTtcbiAgcmV0dXJuIHBzZXVkb1JlZ2V4cDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHshT2JqZWN0fSBub2RlIEFTVCBub2RlIGRlZmluaW5nIHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgUGFyZW50IHNjb3BlLlxuICogQHJldHVybiB7IUludGVycHJldGVyLk9iamVjdH0gTmV3IGZ1bmN0aW9uLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuY3JlYXRlRnVuY3Rpb24gPSBmdW5jdGlvbihub2RlLCBzY29wZSkge1xuICB2YXIgZnVuYyA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuRlVOQ1RJT04pO1xuICBmdW5jLnBhcmVudFNjb3BlID0gc2NvcGU7XG4gIGZ1bmMubm9kZSA9IG5vZGU7XG4gIHRoaXMuc2V0UHJvcGVydHkoZnVuYywgJ2xlbmd0aCcsXG4gICAgICB0aGlzLmNyZWF0ZVByaW1pdGl2ZShmdW5jLm5vZGVbJ3BhcmFtcyddLmxlbmd0aCksXG4gICAgICBJbnRlcnByZXRlci5SRUFET05MWV9ERVNDUklQVE9SKTtcbiAgcmV0dXJuIGZ1bmM7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBuYXRpdmUgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbmF0aXZlRnVuYyBKYXZhU2NyaXB0IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NvbnN0cnVjdG9yIElmIHRydWUsIHRoZSBmdW5jdGlvbidzXG4gKiBwcm90b3R5cGUgd2lsbCBoYXZlIGl0cyBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBzZXQgdG8gdGhlIGZ1bmN0aW9uLlxuICogSWYgZmFsc2UsIHRoZSBmdW5jdGlvbiBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgY29uc3RydWN0b3IgKGUuZy4gZXNjYXBlKS5cbiAqIERlZmF1bHRzIHRvIHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFJbnRlcnByZXRlci5PYmplY3R9IE5ldyBmdW5jdGlvbi5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uID1cbiAgICBmdW5jdGlvbihuYXRpdmVGdW5jLCBvcHRfY29uc3RydWN0b3IpIHtcbiAgdmFyIGZ1bmMgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkZVTkNUSU9OKTtcbiAgZnVuYy5uYXRpdmVGdW5jID0gbmF0aXZlRnVuYztcbiAgbmF0aXZlRnVuYy5pZCA9IHRoaXMuZnVuY3Rpb25Db3VudGVyXysrO1xuICB0aGlzLnNldFByb3BlcnR5KGZ1bmMsICdsZW5ndGgnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShuYXRpdmVGdW5jLmxlbmd0aCksXG4gICAgICBJbnRlcnByZXRlci5SRUFET05MWV9ERVNDUklQVE9SKTtcbiAgaWYgKG9wdF9jb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMuc2V0UHJvcGVydHkoZnVuYy5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXSwgJ2NvbnN0cnVjdG9yJyxcbiAgICAgICAgZnVuYywgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcbiAgfSBlbHNlIGlmIChvcHRfY29uc3RydWN0b3IgPT09IGZhbHNlKSB7XG4gICAgZnVuYy5pbGxlZ2FsQ29uc3RydWN0b3IgPSB0cnVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkoZnVuYywgJ3Byb3RvdHlwZScsIHRoaXMuVU5ERUZJTkVEKTtcbiAgfVxuICByZXR1cm4gZnVuYztcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG5hdGl2ZSBhc3luY2hyb25vdXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gYXN5bmNGdW5jIEphdmFTY3JpcHQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBOZXcgZnVuY3Rpb24uXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5jcmVhdGVBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24oYXN5bmNGdW5jKSB7XG4gIHZhciBmdW5jID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5GVU5DVElPTik7XG4gIGZ1bmMuYXN5bmNGdW5jID0gYXN5bmNGdW5jO1xuICBhc3luY0Z1bmMuaWQgPSB0aGlzLmZ1bmN0aW9uQ291bnRlcl8rKztcbiAgdGhpcy5zZXRQcm9wZXJ0eShmdW5jLCAnbGVuZ3RoJywgdGhpcy5jcmVhdGVQcmltaXRpdmUoYXN5bmNGdW5jLmxlbmd0aCksXG4gICAgICBJbnRlcnByZXRlci5SRUFET05MWV9ERVNDUklQVE9SKTtcbiAgcmV0dXJuIGZ1bmM7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGZyb20gYSBuYXRpdmUgSlMgb2JqZWN0IG9yIHZhbHVlIHRvIGEgSlMgaW50ZXJwcmV0ZXIgb2JqZWN0LlxuICogQ2FuIGhhbmRsZSBKU09OLXN0eWxlIHZhbHVlcy5cbiAqIEBwYXJhbSB7Kn0gbmF0aXZlT2JqIFRoZSBuYXRpdmUgSlMgb2JqZWN0IHRvIGJlIGNvbnZlcnRlZC5cbiAqIEByZXR1cm4geyFJbnRlcnByZXRlci5PYmplY3R8IUludGVycHJldGVyLlByaW1pdGl2ZX0gVGhlIGVxdWl2YWxlbnRcbiAqICAgICBKUyBpbnRlcnByZXRlciBvYmplY3QuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5uYXRpdmVUb1BzZXVkbyA9IGZ1bmN0aW9uKG5hdGl2ZU9iaikge1xuICBpZiAodHlwZW9mIG5hdGl2ZU9iaiA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHR5cGVvZiBuYXRpdmVPYmogPT0gJ251bWJlcicgfHxcbiAgICAgIHR5cGVvZiBuYXRpdmVPYmogPT0gJ3N0cmluZycgfHxcbiAgICAgIG5hdGl2ZU9iaiA9PT0gbnVsbCB8fCBuYXRpdmVPYmogPT09IHVuZGVmaW5lZCB8fFxuICAgICAgbmF0aXZlT2JqIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZU9iaik7XG4gIH1cblxuICBpZiAobmF0aXZlT2JqIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICB2YXIgaW50ZXJwcmV0ZXIgPSB0aGlzO1xuICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaW50ZXJwcmV0ZXIubmF0aXZlVG9Qc2V1ZG8oXG4gICAgICAgIG5hdGl2ZU9iai5hcHBseShpbnRlcnByZXRlcixcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgICAgLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJwcmV0ZXIucHNldWRvVG9OYXRpdmUoaSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIsIHVuZGVmaW5lZCk7XG4gIH1cblxuICB2YXIgcHNldWRvT2JqO1xuICBpZiAobmF0aXZlT2JqIGluc3RhbmNlb2YgQXJyYXkpIHsgIC8vIEFycmF5LlxuICAgIHBzZXVkb09iaiA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuQVJSQVkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmF0aXZlT2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnNldFByb3BlcnR5KHBzZXVkb09iaiwgaSwgdGhpcy5uYXRpdmVUb1BzZXVkbyhuYXRpdmVPYmpbaV0pKTtcbiAgICB9XG4gIH0gZWxzZSB7ICAvLyBPYmplY3QuXG4gICAgcHNldWRvT2JqID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5PQkpFQ1QpO1xuICAgIGZvciAodmFyIGtleSBpbiBuYXRpdmVPYmopIHtcbiAgICAgIHRoaXMuc2V0UHJvcGVydHkocHNldWRvT2JqLCBrZXksIHRoaXMubmF0aXZlVG9Qc2V1ZG8obmF0aXZlT2JqW2tleV0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBzZXVkb09iajtcbn07XG5cbi8qKlxuICogQ29udmVydHMgZnJvbSBhIEpTIGludGVycHJldGVyIG9iamVjdCB0byBuYXRpdmUgSlMgb2JqZWN0LlxuICogQ2FuIGhhbmRsZSBKU09OLXN0eWxlIHZhbHVlcywgcGx1cyBjeWNsZXMuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R8IUludGVycHJldGVyLlByaW1pdGl2ZX0gcHNldWRvT2JqIFRoZSBKU1xuICogICAgIGludGVycHJldGVyIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9jeWNsZXMgQ3ljbGUgZGV0ZWN0aW9uICh1c2VkIGluIHJlY3Vyc2l2ZSBjYWxscykuXG4gKiBAcmV0dXJuIHsqfSBUaGUgZXF1aXZhbGVudCBuYXRpdmUgSlMgb2JqZWN0IG9yIHZhbHVlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUucHNldWRvVG9OYXRpdmUgPSBmdW5jdGlvbihwc2V1ZG9PYmosIG9wdF9jeWNsZXMpIHtcbiAgaWYgKHBzZXVkb09iai5pc1ByaW1pdGl2ZSB8fFxuICAgICAgdGhpcy5pc2EocHNldWRvT2JqLCB0aGlzLk5VTUJFUikgfHxcbiAgICAgIHRoaXMuaXNhKHBzZXVkb09iaiwgdGhpcy5TVFJJTkcpIHx8XG4gICAgICB0aGlzLmlzYShwc2V1ZG9PYmosIHRoaXMuQk9PTEVBTikpIHtcbiAgICByZXR1cm4gcHNldWRvT2JqLmRhdGE7XG4gIH1cbiAgdmFyIGN5Y2xlcyA9IG9wdF9jeWNsZXMgfHwge1xuICAgIHBzZXVkbzogW10sXG4gICAgbmF0aXZlOiBbXVxuICB9O1xuICB2YXIgaSA9IGN5Y2xlcy5wc2V1ZG8uaW5kZXhPZihwc2V1ZG9PYmopO1xuICBpZiAoaSAhPSAtMSkge1xuICAgIHJldHVybiBjeWNsZXMubmF0aXZlW2ldO1xuICB9XG4gIGN5Y2xlcy5wc2V1ZG8ucHVzaChwc2V1ZG9PYmopO1xuICB2YXIgbmF0aXZlT2JqO1xuICBpZiAodGhpcy5pc2EocHNldWRvT2JqLCB0aGlzLkFSUkFZKSkgeyAgLy8gQXJyYXkuXG4gICAgbmF0aXZlT2JqID0gW107XG4gICAgY3ljbGVzLm5hdGl2ZS5wdXNoKG5hdGl2ZU9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwc2V1ZG9PYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hdGl2ZU9ialtpXSA9IHRoaXMucHNldWRvVG9OYXRpdmUocHNldWRvT2JqLnByb3BlcnRpZXNbaV0sIGN5Y2xlcyk7XG4gICAgfVxuICB9IGVsc2UgeyAgLy8gT2JqZWN0LlxuICAgIG5hdGl2ZU9iaiA9IHt9O1xuICAgIGN5Y2xlcy5uYXRpdmUucHVzaChuYXRpdmVPYmopO1xuICAgIHZhciB2YWw7XG4gICAgZm9yICh2YXIga2V5IGluIHBzZXVkb09iai5wcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAocHNldWRvT2JqLm5vdEVudW1lcmFibGVba2V5XSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhbCA9IHBzZXVkb09iai5wcm9wZXJ0aWVzW2tleV07XG4gICAgICBuYXRpdmVPYmpba2V5XSA9IHRoaXMucHNldWRvVG9OYXRpdmUodmFsLCBjeWNsZXMpO1xuICAgIH1cbiAgfVxuICBjeWNsZXMucHNldWRvLnBvcCgpO1xuICBjeWNsZXMubmF0aXZlLnBvcCgpO1xuICByZXR1cm4gbmF0aXZlT2JqO1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBvZiBhIGNoaWxkIG5vZGVcbiAqIGV4YW1wbGU6IGJhei0+Zm9vLmJhci5iYXpcbiAqIGV4YW1wbGU6IGJhci0+Zm9vWzBdLmJhclxuICogQHBhcmFtIHtub2RlfSBvYmplY3QgVGhlIGNoaWxkIG5vZGUgb2YgdGhlIG9iamVjdCBjYWxsIHN0YWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBvZiB0aGUgY2hpbGQgbm9kZS5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGZ1bGx5UXVhbGlmaWVkTmFtZSA9ICcnO1xuICB3aGlsZSAobm9kZS5vYmplY3QgJiYgbm9kZS5wcm9wZXJ0eSkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gbm9kZS5wcm9wZXJ0eTtcbiAgICAvLyAnY29tcHV0ZWQnIGlzIGEgZmxhZyBpbiBhY29ybiB0aGF0IGluZGljYXRlcyBzcXVhcmUgYnJhY2tldHMgd2VyZSB1c2VkXG4gICAgaWYgKG5vZGUuY29tcHV0ZWQpIHtcbiAgICAgIHZhciBuYW1lID0gcHJvcGVydGllcy5uYW1lID8gcHJvcGVydGllcy5uYW1lIDogcHJvcGVydGllcy5yYXc7XG4gICAgICBmdWxseVF1YWxpZmllZE5hbWUgPSAnWycgKyBuYW1lICsgJ10nICsgZnVsbHlRdWFsaWZpZWROYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxseVF1YWxpZmllZE5hbWUgPSAnLicgKyBwcm9wZXJ0aWVzLm5hbWUgKyBmdWxseVF1YWxpZmllZE5hbWU7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLm9iamVjdDtcbiAgfVxuICAvLyBSZS1jb25zdHJ1Y3QgdGhlIGhpZ2hlc3QtbGV2ZWwgcGFyZW50IG5vZGVcbiAgaWYgKFwiQXJyYXlFeHByZXNzaW9uXCIgPT0gbm9kZS50eXBlKSB7XG4gICAgLy8gSGFuZGxlIGNhc2Ugb2YgWzBdLmZvbygpXG4gICAgZnVsbHlRdWFsaWZpZWROYW1lID0gXCJBcnJheVwiICsgZnVsbHlRdWFsaWZpZWROYW1lO1xuICB9IGVsc2Uge1xuICAgIGZ1bGx5UXVhbGlmaWVkTmFtZSA9IG5vZGUubmFtZSArIGZ1bGx5UXVhbGlmaWVkTmFtZTtcbiAgfVxuICByZXR1cm4gZnVsbHlRdWFsaWZpZWROYW1lO1xufTtcblxuLyoqXG4gKiBGZXRjaCBhIHByb3BlcnR5IHZhbHVlIGZyb20gYSBkYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdHwhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlfSBvYmogRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0geyp9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eS5cbiAqIEByZXR1cm4geyFJbnRlcnByZXRlci5PYmplY3R8IUludGVycHJldGVyLlByaW1pdGl2ZXxudWxsfSBQcm9wZXJ0eSB2YWx1ZVxuICogICAgIChtYXkgYmUgVU5ERUZJTkVEKSwgb3IgbnVsbCBpZiBhbiBlcnJvciB3YXMgdGhyb3duIGFuZCB3aWxsIGJlIGNhdWdodC5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24ob2JqLCBuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnRvU3RyaW5nKCk7XG4gIGlmIChvYmogPT0gdGhpcy5VTkRFRklORUQgfHwgb2JqID09IHRoaXMuTlVMTCkge1xuICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5UWVBFX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnXCIgKyBuYW1lICsgXCInIG9mIFwiICsgb2JqKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAobmFtZSA9PSAnbGVuZ3RoJykge1xuICAgIC8vIFNwZWNpYWwgY2FzZXMgZm9yIG1hZ2ljIGxlbmd0aCBwcm9wZXJ0eS5cbiAgICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLlNUUklORykpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVByaW1pdGl2ZShvYmouZGF0YS5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5sZW5ndGgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChuYW1lLmNoYXJDb2RlQXQoMCkgPCAweDQwKSB7XG4gICAgLy8gTWlnaHQgaGF2ZSBudW1iZXJzIGluIHRoZXJlP1xuICAgIC8vIFNwZWNpYWwgY2FzZXMgZm9yIHN0cmluZyBhcnJheSBpbmRleGluZ1xuICAgIGlmICh0aGlzLmlzYShvYmosIHRoaXMuU1RSSU5HKSkge1xuICAgICAgdmFyIG4gPSB0aGlzLmFycmF5SW5kZXgobmFtZSk7XG4gICAgICBpZiAoIWlzTmFOKG4pICYmIG4gPCBvYmouZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhW25dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZG8ge1xuICAgIGlmIChvYmoucHJvcGVydGllcyAmJiBuYW1lIGluIG9iai5wcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gb2JqLmdldHRlcltuYW1lXTtcbiAgICAgIGlmIChnZXR0ZXIpIHtcbiAgICAgICAgLy8gRmxhZyB0aGlzIGZ1bmN0aW9uIGFzIGJlaW5nIGEgZ2V0dGVyIGFuZCB0aHVzIG5lZWRpbmcgaW1tZWRpYXRlXG4gICAgICAgIC8vIGV4ZWN1dGlvbiAocmF0aGVyIHRoYW4gYmVpbmcgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSkuXG4gICAgICAgIGdldHRlci5pc0dldHRlciA9IHRydWU7XG4gICAgICAgIHJldHVybiBnZXR0ZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqLnByb3BlcnRpZXNbbmFtZV07XG4gICAgfVxuICB9IHdoaWxlICgob2JqID0gb2JqLnByb3RvKSk7XG4gIHJldHVybiB0aGlzLlVOREVGSU5FRDtcbn07XG5cbi8qKlxuICogRG9lcyB0aGUgbmFtZWQgcHJvcGVydHkgZXhpc3Qgb24gYSBkYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdHwhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlfSBvYmogRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0geyp9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgcHJvcGVydHkgZXhpc3RzLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuaGFzUHJvcGVydHkgPSBmdW5jdGlvbihvYmosIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgaWYgKG9iai5pc1ByaW1pdGl2ZSkge1xuICAgIHRocm93IFR5cGVFcnJvcignUHJpbWl0aXZlIGRhdGEgdHlwZSBoYXMgbm8gcHJvcGVydGllcycpO1xuICB9XG4gIGlmIChuYW1lID09ICdsZW5ndGgnICYmXG4gICAgICAodGhpcy5pc2Eob2JqLCB0aGlzLlNUUklORykgfHwgdGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLlNUUklORykpIHtcbiAgICB2YXIgbiA9IHRoaXMuYXJyYXlJbmRleChuYW1lKTtcbiAgICBpZiAoIWlzTmFOKG4pICYmIG4gPCBvYmouZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBkbyB7XG4gICAgaWYgKG9iai5wcm9wZXJ0aWVzICYmIG5hbWUgaW4gb2JqLnByb3BlcnRpZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSB3aGlsZSAoKG9iaiA9IG9iai5wcm90bykpO1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IHZhbHVlIG9uIGEgZGF0YSBvYmplY3QuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IG9iaiBEYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gbmFtZSBOYW1lIG9mIHByb3BlcnR5LlxuICogQHBhcmFtIHtJbnRlcnByZXRlci5PYmplY3R8SW50ZXJwcmV0ZXIuUHJpbWl0aXZlfSB2YWx1ZVxuICogICAgIE5ldyBwcm9wZXJ0eSB2YWx1ZSBvciBudWxsIGlmIGdldHRlci9zZXR0ZXIgaXMgZGVzY3JpYmVkLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfZGVzY3JpcHRvciBPcHRpb25hbCBkZXNjcmlwdG9yIG9iamVjdC5cbiAqIEByZXR1cm4geyFJbnRlcnByZXRlci5PYmplY3R8dW5kZWZpbmVkfSBSZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIGlmIG9uZVxuICogICAgIG5lZWRzIHRvIGJlIGNhbGxlZCwgb3RoZXJ3aXNlIHVuZGVmaW5lZC5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSwgb3B0X2Rlc2NyaXB0b3IpIHtcbiAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgaWYgKG9wdF9kZXNjcmlwdG9yICYmIG9iai5ub3RDb25maWd1cmFibGVbbmFtZV0pIHtcbiAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgJ0Nhbm5vdCByZWRlZmluZSBwcm9wZXJ0eTogJyArIG5hbWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBFcnJvcignRmFpbHVyZSB0byB3cmFwIGEgdmFsdWU6ICcgKyB2YWx1ZSk7XG4gIH1cbiAgaWYgKG9iaiA9PSB0aGlzLlVOREVGSU5FRCB8fCBvYmogPT0gdGhpcy5OVUxMKSB7XG4gICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNhbm5vdCBzZXQgcHJvcGVydHkgJ1wiICsgbmFtZSArIFwiJyBvZiBcIiArIG9iaik7XG4gIH1cbiAgaWYgKG9wdF9kZXNjcmlwdG9yICYmIChvcHRfZGVzY3JpcHRvci5nZXQgfHwgb3B0X2Rlc2NyaXB0b3Iuc2V0KSAmJlxuICAgICAgKHZhbHVlIHx8IG9wdF9kZXNjcmlwdG9yLndyaXRhYmxlICE9PSB1bmRlZmluZWQpKSB7XG4gICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsICdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuICcgK1xuICAgICAgICAnQ2Fubm90IGJvdGggc3BlY2lmeSBhY2Nlc3NvcnMgYW5kIGEgdmFsdWUgb3Igd3JpdGFibGUgYXR0cmlidXRlJyk7XG4gIH1cbiAgdmFyIHN0cmljdCA9ICF0aGlzLnN0YXRlU3RhY2sgfHwgdGhpcy5nZXRTY29wZSgpLnN0cmljdDtcbiAgaWYgKG9iai5pc1ByaW1pdGl2ZSkge1xuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5UWVBFX0VSUk9SLCAnQ2FuXFwndCBjcmVhdGUgcHJvcGVydHkgXFwnJyArIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnXFwnIG9uIFxcJycgKyBvYmouZGF0YSArICdcXCcnKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0aGlzLmlzYShvYmosIHRoaXMuU1RSSU5HKSkge1xuICAgIHZhciBuID0gdGhpcy5hcnJheUluZGV4KG5hbWUpO1xuICAgIGlmIChuYW1lID09ICdsZW5ndGgnIHx8ICghaXNOYU4obikgJiYgbiA8IG9iai5kYXRhLmxlbmd0aCkpIHtcbiAgICAgIC8vIENhbid0IHNldCBsZW5ndGggb3IgbGV0dGVycyBvbiBTdHJpbmcgb2JqZWN0cy5cbiAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsICdDYW5ub3QgYXNzaWduIHRvIHJlYWQgb25seSAnICtcbiAgICAgICAgICAgICdwcm9wZXJ0eSBcXCcnICsgbmFtZSArICdcXCcgb2YgU3RyaW5nIFxcJycgKyBvYmouZGF0YSArICdcXCcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5BUlJBWSkpIHtcbiAgICAvLyBBcnJheXMgaGF2ZSBhIG1hZ2ljIGxlbmd0aCB2YXJpYWJsZSB0aGF0IGlzIGJvdW5kIHRvIHRoZSBlbGVtZW50cy5cbiAgICB2YXIgaTtcbiAgICBpZiAobmFtZSA9PSAnbGVuZ3RoJykge1xuICAgICAgLy8gRGVsZXRlIGVsZW1lbnRzIGlmIGxlbmd0aCBpcyBzbWFsbGVyLlxuICAgICAgdmFyIG5ld0xlbmd0aCA9IHRoaXMuYXJyYXlJbmRleCh2YWx1ZS50b051bWJlcigpKTtcbiAgICAgIGlmIChpc05hTihuZXdMZW5ndGgpKSB7XG4gICAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5SQU5HRV9FUlJPUiwgJ0ludmFsaWQgYXJyYXkgbGVuZ3RoJyk7XG4gICAgICB9XG4gICAgICBpZiAobmV3TGVuZ3RoIDwgb2JqLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGkgaW4gb2JqLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICBpID0gdGhpcy5hcnJheUluZGV4KGkpO1xuICAgICAgICAgIGlmICghaXNOYU4oaSkgJiYgbmV3TGVuZ3RoIDw9IGkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmoucHJvcGVydGllc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9iai5sZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICByZXR1cm47ICAvLyBEb24ndCBzZXQgYSByZWFsIGxlbmd0aCBwcm9wZXJ0eS5cbiAgICB9IGVsc2UgaWYgKCFpc05hTihpID0gdGhpcy5hcnJheUluZGV4KG5hbWUpKSkge1xuICAgICAgLy8gSW5jcmVhc2UgbGVuZ3RoIGlmIHRoaXMgaW5kZXggaXMgbGFyZ2VyLlxuICAgICAgb2JqLmxlbmd0aCA9IE1hdGgubWF4KG9iai5sZW5ndGgsIGkgKyAxKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFvYmoucHJvcGVydGllc1tuYW1lXSAmJiBvYmoucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgJ0NhblxcJ3QgYWRkIHByb3BlcnR5ICcgKyBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJywgb2JqZWN0IGlzIG5vdCBleHRlbnNpYmxlJyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAob3B0X2Rlc2NyaXB0b3IpIHtcbiAgICAvLyBEZWZpbmUgdGhlIHByb3BlcnR5LlxuICAgIG9iai5wcm9wZXJ0aWVzW25hbWVdID0gdmFsdWU7XG4gICAgaWYgKCFvcHRfZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAgIG9iai5ub3RDb25maWd1cmFibGVbbmFtZV0gPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZ2V0dGVyID0gb3B0X2Rlc2NyaXB0b3IuZ2V0O1xuICAgIGlmIChnZXR0ZXIpIHtcbiAgICAgIG9iai5nZXR0ZXJbbmFtZV0gPSBnZXR0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBvYmouZ2V0dGVyW25hbWVdO1xuICAgIH1cbiAgICB2YXIgc2V0dGVyID0gb3B0X2Rlc2NyaXB0b3Iuc2V0O1xuICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgIG9iai5zZXR0ZXJbbmFtZV0gPSBzZXR0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBvYmouc2V0dGVyW25hbWVdO1xuICAgIH1cbiAgICB2YXIgZW51bWVyYWJsZSA9IG9wdF9kZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgaWYgKGVudW1lcmFibGUpIHtcbiAgICAgIGRlbGV0ZSBvYmoubm90RW51bWVyYWJsZVtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqLm5vdEVudW1lcmFibGVbbmFtZV0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZ2V0dGVyIHx8IHNldHRlcikge1xuICAgICAgZGVsZXRlIG9iai5ub3RXcml0YWJsZVtuYW1lXTtcbiAgICAgIG9iai5wcm9wZXJ0aWVzW25hbWVdID0gdGhpcy5VTkRFRklORUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB3cml0YWJsZSA9IG9wdF9kZXNjcmlwdG9yLndyaXRhYmxlIHx8IGZhbHNlO1xuICAgICAgaWYgKHdyaXRhYmxlKSB7XG4gICAgICAgIGRlbGV0ZSBvYmoubm90V3JpdGFibGVbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmoubm90V3JpdGFibGVbbmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgdGhlIHByb3BlcnR5LlxuICAgIC8vIERldGVybWluZSBpZiB0aGVyZSBpcyBhIHNldHRlciBhbnl3aGVyZSBpbiB0aGUgcGFyZW50IGNoYWluLlxuICAgIHZhciBwYXJlbnQgPSBvYmo7XG4gICAgZG8ge1xuICAgICAgaWYgKHBhcmVudC5zZXR0ZXIgJiYgcGFyZW50LnNldHRlcltuYW1lXSkge1xuICAgICAgICByZXR1cm4gcGFyZW50LnNldHRlcltuYW1lXTtcbiAgICAgIH1cbiAgICB9IHdoaWxlICgocGFyZW50ID0gcGFyZW50LnByb3RvKSk7XG4gICAgaWYgKG9iai5nZXR0ZXIgJiYgb2JqLmdldHRlcltuYW1lXSkge1xuICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgJ0Nhbm5vdCBzZXQgcHJvcGVydHkgXFwnJyArIG5hbWUgK1xuICAgICAgICAgICAgJ1xcJyBvZiBvYmplY3QgXFwnJyArIG9iaiArICdcXCcgd2hpY2ggb25seSBoYXMgYSBnZXR0ZXInKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gc2V0dGVyLCBzaW1wbGUgYXNzaWdubWVudC5cbiAgICAgIGlmICghb2JqLm5vdFdyaXRhYmxlW25hbWVdKSB7XG4gICAgICAgIG9iai5wcm9wZXJ0aWVzW25hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHN0cmljdCkge1xuICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgJ0Nhbm5vdCBhc3NpZ24gdG8gcmVhZCBvbmx5ICcgK1xuICAgICAgICAgICAgJ3Byb3BlcnR5IFxcJycgKyBuYW1lICsgJ1xcJyBvZiBvYmplY3QgXFwnJyArIG9iaiArICdcXCcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBhZGRpbmcgYSBuYXRpdmUgZnVuY3Rpb24gYXMgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuICogb250byBhbiBvYmplY3QncyBwcm90b3R5cGUuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IG9iaiBEYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gbmFtZSBOYW1lIG9mIHByb3BlcnR5LlxuICogQHBhcmFtIHshRnVuY3Rpb259IHdyYXBwZXIgRnVuY3Rpb24gb2JqZWN0LlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuc2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUgPVxuICAgIGZ1bmN0aW9uKG9iaiwgbmFtZSwgd3JhcHBlcikge1xuICB0aGlzLnNldFByb3BlcnR5KG9iai5wcm9wZXJ0aWVzWydwcm90b3R5cGUnXSwgbmFtZSxcbiAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciwgZmFsc2UpLFxuICAgICAgSW50ZXJwcmV0ZXIuTk9ORU5VTUVSQUJMRV9ERVNDUklQVE9SKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgdmFsdWUgb24gYSBkYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdH0gb2JqIERhdGEgb2JqZWN0LlxuICogQHBhcmFtIHsqfSBuYW1lIE5hbWUgb2YgcHJvcGVydHkuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGRlbGV0ZWQsIGZhbHNlIGlmIHVuZGVsZXRhYmxlLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuZGVsZXRlUHJvcGVydHkgPSBmdW5jdGlvbihvYmosIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgaWYgKG9iai5pc1ByaW1pdGl2ZSB8fCBvYmoubm90V3JpdGFibGVbbmFtZV0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5hbWUgPT0gJ2xlbmd0aCcgJiYgdGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGVsZXRlIG9iai5wcm9wZXJ0aWVzW25hbWVdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHNjb3BlIGZyb20gdGhlIHN0YXRlU3RhY2suXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBDdXJyZW50IHNjb3BlIGRpY3Rpb25hcnkuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5nZXRTY29wZSA9IGZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBpID0gdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHRoaXMuc3RhdGVTdGFja1tpXS5zY29wZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGVTdGFja1tpXS5zY29wZTtcbiAgICB9XG4gIH1cbiAgdGhyb3cgRXJyb3IoJ05vIHNjb3BlIGZvdW5kLicpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2NvcGUgZGljdGlvbmFyeS5cbiAqIEBwYXJhbSB7IU9iamVjdH0gbm9kZSBBU1Qgbm9kZSBkZWZpbmluZyB0aGUgc2NvcGUgY29udGFpbmVyXG4gKiAgICAgKGUuZy4gYSBmdW5jdGlvbikuXG4gKiBAcGFyYW0ge0ludGVycHJldGVyLk9iamVjdH0gcGFyZW50U2NvcGUgU2NvcGUgdG8gbGluayB0by5cbiAqIEByZXR1cm4geyFJbnRlcnByZXRlci5PYmplY3R9IE5ldyBzY29wZS5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmNyZWF0ZVNjb3BlID0gZnVuY3Rpb24obm9kZSwgcGFyZW50U2NvcGUpIHtcbiAgdmFyIHNjb3BlID0gdGhpcy5jcmVhdGVPYmplY3QobnVsbCk7XG4gIHNjb3BlLnBhcmVudFNjb3BlID0gcGFyZW50U2NvcGU7XG4gIGlmICghcGFyZW50U2NvcGUpIHtcbiAgICB0aGlzLmluaXRHbG9iYWxTY29wZShzY29wZSk7XG4gIH1cbiAgdGhpcy5wb3B1bGF0ZVNjb3BlXyhub2RlLCBzY29wZSk7XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgc2NvcGUgc3RhcnRzIHdpdGggJ3VzZSBzdHJpY3QnLlxuICBzY29wZS5zdHJpY3QgPSBmYWxzZTtcbiAgaWYgKHBhcmVudFNjb3BlICYmIHBhcmVudFNjb3BlLnN0cmljdCkge1xuICAgIHNjb3BlLnN0cmljdCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZpcnN0Tm9kZSA9IG5vZGVbJ2JvZHknXSAmJiBub2RlWydib2R5J11bMF07XG4gICAgaWYgKGZpcnN0Tm9kZSAmJiBmaXJzdE5vZGUuZXhwcmVzc2lvbiAmJlxuICAgICAgICBmaXJzdE5vZGUuZXhwcmVzc2lvblsndHlwZSddID09ICdMaXRlcmFsJyAmJlxuICAgICAgICBmaXJzdE5vZGUuZXhwcmVzc2lvbi52YWx1ZSA9PSAndXNlIHN0cmljdCcpIHtcbiAgICAgIHNjb3BlLnN0cmljdCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBzY29wZTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNwZWNpYWwgc2NvcGUgZGljdGlvbmFyeS4gU2ltaWxhciB0byBjcmVhdGVTY29wZSgpLCBidXRcbiAqIGRvZXNuJ3QgYXNzdW1lIHRoYXQgdGhlIHNjb3BlIGlzIGZvciBhIGZ1bmN0aW9uIGJvZHkuIFRoaXMgaXMgdXNlZCBmb3JcbiAqIHRoZSBjYXRjaCBjbGF1c2UgYW5kIHdpdGggc3RhdGVtZW50LlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBwYXJlbnRTY29wZSBTY29wZSB0byBsaW5rIHRvLlxuICogQHBhcmFtIHtJbnRlcnByZXRlci5PYmplY3Q9fSBvcHRfc2NvcGUgT3B0aW9uYWwgb2JqZWN0IHRvIHRyYW5zZm9ybSBpbnRvXG4gKiAgICAgc2NvcGUuXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBOZXcgc2NvcGUuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5jcmVhdGVTcGVjaWFsU2NvcGUgPSBmdW5jdGlvbihwYXJlbnRTY29wZSwgb3B0X3Njb3BlKSB7XG4gIGlmICghcGFyZW50U2NvcGUpIHtcbiAgICB0aHJvdyBFcnJvcigncGFyZW50U2NvcGUgcmVxdWlyZWQnKTtcbiAgfVxuICB2YXIgc2NvcGUgPSBvcHRfc2NvcGUgfHwgdGhpcy5jcmVhdGVPYmplY3QobnVsbCk7XG4gIHNjb3BlLnBhcmVudFNjb3BlID0gcGFyZW50U2NvcGU7XG4gIHNjb3BlLnN0cmljdCA9IHBhcmVudFNjb3BlLnN0cmljdDtcbiAgcmV0dXJuIHNjb3BlO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIHRoZSBzY29wZSBjaGFpbi5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdHwhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlfSBuYW1lIE5hbWUgb2YgdmFyaWFibGUuXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuT2JqZWN0fCFJbnRlcnByZXRlci5QcmltaXRpdmV8bnVsbH0gVGhlIHZhbHVlXG4gKiAgICAgb3IgbnVsbCBpZiBhbiBlcnJvciB3YXMgdGhyb3duIGFuZCB3aWxsIGJlIGNhdWdodC5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmdldFZhbHVlRnJvbVNjb3BlID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gIHZhciBuYW1lU3RyID0gbmFtZS50b1N0cmluZygpO1xuICB3aGlsZSAoc2NvcGUgJiYgc2NvcGUgIT0gdGhpcy5nbG9iYWwpIHtcbiAgICBpZiAobmFtZVN0ciBpbiBzY29wZS5wcm9wZXJ0aWVzKSB7XG4gICAgICByZXR1cm4gc2NvcGUucHJvcGVydGllc1tuYW1lU3RyXTtcbiAgICB9XG4gICAgc2NvcGUgPSBzY29wZS5wYXJlbnRTY29wZTtcbiAgfVxuICAvLyBUaGUgcm9vdCBzY29wZSBpcyBhbHNvIGFuIG9iamVjdCB3aGljaCBoYXMgaW5oZXJpdGVkIHByb3BlcnRpZXMgYW5kXG4gIC8vIGNvdWxkIGFsc28gaGF2ZSBnZXR0ZXJzLlxuICBpZiAoc2NvcGUgPT0gdGhpcy5nbG9iYWwgJiYgdGhpcy5oYXNQcm9wZXJ0eShzY29wZSwgbmFtZVN0cikpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eShzY29wZSwgbmFtZVN0cik7XG4gIH1cbiAgLy8gVHlwZW9mIG9wZXJhdG9yIGlzIHVuaXF1ZTogaXQgY2FuIHNhZmVseSBsb29rIGF0IG5vbi1kZWZpbmVkIHZhcmlhYmxlcy5cbiAgdmFyIHByZXZOb2RlID0gdGhpcy5zdGF0ZVN0YWNrW3RoaXMuc3RhdGVTdGFjay5sZW5ndGggLSAxXS5ub2RlO1xuICBpZiAocHJldk5vZGVbJ3R5cGUnXSA9PSAnVW5hcnlFeHByZXNzaW9uJyAmJlxuICAgICAgcHJldk5vZGVbJ29wZXJhdG9yJ10gPT0gJ3R5cGVvZicpIHtcbiAgICByZXR1cm4gdGhpcy5VTkRFRklORUQ7XG4gIH1cbiAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlJFRkVSRU5DRV9FUlJPUiwgbmFtZVN0ciArICcgaXMgbm90IGRlZmluZWQnKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFNldHMgYSB2YWx1ZSB0byB0aGUgY3VycmVudCBzY29wZS5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdHwhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlfSBuYW1lIE5hbWUgb2YgdmFyaWFibGUuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R8IUludGVycHJldGVyLlByaW1pdGl2ZX0gdmFsdWUgVmFsdWUuXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuT2JqZWN0fHVuZGVmaW5lZH0gUmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiBpZiBvbmVcbiAqICAgICBuZWVkcyB0byBiZSBjYWxsZWQsIG90aGVyd2lzZSB1bmRlZmluZWQuXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5zZXRWYWx1ZVRvU2NvcGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gIHZhciBuYW1lU3RyID0gbmFtZS50b1N0cmluZygpO1xuICB3aGlsZSAoc2NvcGUgJiYgc2NvcGUgIT0gdGhpcy5nbG9iYWwpIHtcbiAgICBpZiAobmFtZVN0ciBpbiBzY29wZS5wcm9wZXJ0aWVzKSB7XG4gICAgICBzY29wZS5wcm9wZXJ0aWVzW25hbWVTdHJdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlO1xuICB9XG4gIC8vIFRoZSByb290IHNjb3BlIGlzIGFsc28gYW4gb2JqZWN0IHdoaWNoIGhhcyByZWFkb25seSBwcm9wZXJ0aWVzIGFuZFxuICAvLyBjb3VsZCBhbHNvIGhhdmUgc2V0dGVycy5cbiAgaWYgKHNjb3BlID09IHRoaXMuZ2xvYmFsICYmXG4gICAgICAoIXNjb3BlLnN0cmljdCB8fCB0aGlzLmhhc1Byb3BlcnR5KHNjb3BlLCBuYW1lU3RyKSkpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgbmFtZVN0ciwgdmFsdWUpO1xuICB9XG4gIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5SRUZFUkVOQ0VfRVJST1IsIG5hbWVTdHIgKyAnIGlzIG5vdCBkZWZpbmVkJyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzY29wZSBmb3IgdGhlIGdpdmVuIG5vZGUuXG4gKiBAcGFyYW0geyFPYmplY3R9IG5vZGUgQVNUIG5vZGUgKHByb2dyYW0gb3IgZnVuY3Rpb24pLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBzY29wZSBTY29wZSBkaWN0aW9uYXJ5IHRvIHBvcHVsYXRlLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLnBvcHVsYXRlU2NvcGVfID0gZnVuY3Rpb24obm9kZSwgc2NvcGUpIHtcbiAgaWYgKG5vZGVbJ3R5cGUnXSA9PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVbJ2RlY2xhcmF0aW9ucyddLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCBub2RlWydkZWNsYXJhdGlvbnMnXVtpXVsnaWQnXVsnbmFtZSddLFxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlVOREVGSU5FRCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGVbJ3R5cGUnXSA9PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicpIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCBub2RlWydpZCddWyduYW1lJ10sXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUZ1bmN0aW9uKG5vZGUsIHNjb3BlKSk7XG4gICAgcmV0dXJuOyAgLy8gRG8gbm90IHJlY3Vyc2UgaW50byBmdW5jdGlvbi5cbiAgfSBlbHNlIGlmIChub2RlWyd0eXBlJ10gPT0gJ0Z1bmN0aW9uRXhwcmVzc2lvbicpIHtcbiAgICByZXR1cm47ICAvLyBEbyBub3QgcmVjdXJzZSBpbnRvIGZ1bmN0aW9uLlxuICB9IGVsc2UgaWYgKG5vZGVbJ3R5cGUnXSA9PSAnRXhwcmVzc2lvblN0YXRlbWVudCcpIHtcbiAgICByZXR1cm47ICAvLyBFeHByZXNzaW9ucyBjYW4ndCBjb250YWluIHZhcmlhYmxlL2Z1bmN0aW9uIGRlY2xhcmF0aW9ucy5cbiAgfVxuICB2YXIgbm9kZUNsYXNzID0gbm9kZVsnY29uc3RydWN0b3InXTtcbiAgZm9yICh2YXIgbmFtZSBpbiBub2RlKSB7XG4gICAgdmFyIHByb3AgPSBub2RlW25hbWVdO1xuICAgIGlmIChwcm9wICYmIHR5cGVvZiBwcm9wID09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChwcm9wW2ldICYmIHByb3BbaV0uY29uc3RydWN0b3IgPT0gbm9kZUNsYXNzKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlU2NvcGVfKHByb3BbaV0sIHNjb3BlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9wLmNvbnN0cnVjdG9yID09IG5vZGVDbGFzcykge1xuICAgICAgICAgIHRoaXMucG9wdWxhdGVTY29wZV8ocHJvcCwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzdGFydCBhbmQgZW5kIHZhbHVlcyBmcm9tIEFTVCwgb3Igc2V0IHN0YXJ0IGFuZCBlbmQgdmFsdWVzIHRvIGFcbiAqIGNvbnN0YW50IHZhbHVlLiAgVXNlZCB0byByZW1vdmUgaGlnaGxpZ2h0aW5nIGZyb20gcG9seWZpbGxzIGFuZCB0byBzZXRcbiAqIGhpZ2hsaWdodGluZyBpbiBhbiBldmFsIHRvIGNvdmVyIHRoZSBlbnRpcmUgZXZhbCBleHByZXNzaW9uLlxuICogQHBhcmFtIHshT2JqZWN0fSBub2RlIEFTVCBub2RlLlxuICogQHBhcmFtIHtudW1iZXI9fSBzdGFydCBTdGFydGluZyBjaGFyYWN0ZXIgb2YgYWxsIG5vZGVzLCBvciB1bmRlZmluZWQuXG4gKiBAcGFyYW0ge251bWJlcj19IGVuZCBFbmRpbmcgY2hhcmFjdGVyIG9mIGFsbCBub2Rlcywgb3IgdW5kZWZpbmVkLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLnN0cmlwTG9jYXRpb25zXyA9IGZ1bmN0aW9uKG5vZGUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0KSB7XG4gICAgbm9kZVsnc3RhcnQnXSA9IHN0YXJ0O1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBub2RlWydzdGFydCddO1xuICB9XG4gIGlmIChlbmQpIHtcbiAgICBub2RlWydlbmQnXSA9IGVuZDtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgbm9kZVsnZW5kJ107XG4gIH1cbiAgZm9yICh2YXIgbmFtZSBpbiBub2RlKSB7XG4gICAgaWYgKG5vZGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHZhciBwcm9wID0gbm9kZVtuYW1lXTtcbiAgICAgIGlmIChwcm9wICYmIHR5cGVvZiBwcm9wID09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuc3RyaXBMb2NhdGlvbnNfKHByb3AsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJcyB0aGUgY3VycmVudCBzdGF0ZSBkaXJlY3RseSBiZWluZyBjYWxsZWQgd2l0aCBhcyBhIGNvbnN0cnVjdGlvbiB3aXRoICduZXcnLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiAnbmV3IGZvbygpJywgZmFsc2UgaWYgJ2ZvbygpJy5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmNhbGxlZFdpdGhOZXcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGVTdGFja1t0aGlzLnN0YXRlU3RhY2subGVuZ3RoIC0gMV0uaXNDb25zdHJ1Y3Rvcjtcbn07XG5cbi8qKlxuICogR2V0cyBhIHZhbHVlIGZyb20gdGhlIHNjb3BlIGNoYWluIG9yIGZyb20gYW4gb2JqZWN0IHByb3BlcnR5LlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fCFJbnRlcnByZXRlci5QcmltaXRpdmV8IUFycmF5fSBsZWZ0XG4gKiAgICAgTmFtZSBvZiB2YXJpYWJsZSBvciBvYmplY3QvcHJvcG5hbWUgdHVwbGUuXG4gKiBAcmV0dXJuIHshSW50ZXJwcmV0ZXIuT2JqZWN0fCFJbnRlcnByZXRlci5QcmltaXRpdmV8bnVsbH0gVmFsdWVcbiAqICAgICBvciBudWxsIGlmIGFuIGVycm9yIHdhcyB0aHJvd24gYW5kIHdpbGwgYmUgY2F1Z2h0LlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbihsZWZ0KSB7XG4gIGlmIChsZWZ0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgb2JqID0gbGVmdFswXTtcbiAgICB2YXIgcHJvcCA9IGxlZnRbMV07XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvcGVydHkob2JqLCBwcm9wKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUZyb21TY29wZShsZWZ0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIGEgdmFsdWUgdG8gdGhlIHNjb3BlIGNoYWluIG9yIHRvIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdHwhSW50ZXJwcmV0ZXIuUHJpbWl0aXZlfCFBcnJheX0gbGVmdFxuICogICAgIE5hbWUgb2YgdmFyaWFibGUgb3Igb2JqZWN0L3Byb3BuYW1lIHR1cGxlLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fCFJbnRlcnByZXRlci5QcmltaXRpdmV9IHZhbHVlIFZhbHVlLlxuICogQHJldHVybiB7IUludGVycHJldGVyLk9iamVjdHx1bmRlZmluZWR9IFJldHVybnMgYSBzZXR0ZXIgZnVuY3Rpb24gaWYgb25lXG4gKiAgICAgbmVlZHMgdG8gYmUgY2FsbGVkLCBvdGhlcndpc2UgdW5kZWZpbmVkLlxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbihsZWZ0LCB2YWx1ZSkge1xuICBpZiAobGVmdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgdmFyIG9iaiA9IGxlZnRbMF07XG4gICAgdmFyIHByb3AgPSBsZWZ0WzFdO1xuICAgIHJldHVybiB0aGlzLnNldFByb3BlcnR5KG9iaiwgcHJvcCwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlVG9TY29wZShsZWZ0LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhyb3cgYW4gZXhjZXB0aW9uIGluIHRoZSBpbnRlcnByZXRlciB0aGF0IGNhbiBiZSBoYW5kbGVkIGJ5IGFcbiAqIGludGVycHJldGVyIHRyeS9jYXRjaCBzdGF0ZW1lbnQuICBJZiB1bmhhbmRsZWQsIGEgcmVhbCBleGNlcHRpb24gd2lsbFxuICogYmUgdGhyb3duLiAgQ2FuIGJlIGNhbGxlZCB3aXRoIGVpdGhlciBhbiBlcnJvciBjbGFzcyBhbmQgYSBtZXNzYWdlLCBvclxuICogd2l0aCBhbiBhY3R1YWwgb2JqZWN0IHRvIGJlIHRocm93bi5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdH0gZXJyb3JDbGFzcyBUeXBlIG9mIGVycm9yIChpZiBtZXNzYWdlIGlzXG4gKiAgIHByb3ZpZGVkKSBvciB0aGUgdmFsdWUgdG8gdGhyb3cgKGlmIG5vIG1lc3NhZ2UpLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBNZXNzYWdlIGJlaW5nIHRocm93bi5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLnRocm93RXhjZXB0aW9uID0gZnVuY3Rpb24oZXJyb3JDbGFzcywgb3B0X21lc3NhZ2UpIHtcbiAgaWYgKG9wdF9tZXNzYWdlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXJyb3IgPSBlcnJvckNsYXNzOyAgLy8gVGhpcyBpcyBhIHZhbHVlIHRvIHRocm93LCBub3QgYW4gZXJyb3IgY2xhc3MuXG4gIH0gZWxzZSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVPYmplY3QoZXJyb3JDbGFzcyk7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShvcHRfbWVzc2FnZSksXG4gICAgICAgIEludGVycHJldGVyLk5PTkVOVU1FUkFCTEVfREVTQ1JJUFRPUik7XG4gIH1cbiAgdGhpcy5leGVjdXRlRXhjZXB0aW9uKGVycm9yKTtcbn07XG5cbi8qKlxuICogVGhyb3cgYW4gZXhjZXB0aW9uIGluIHRoZSBpbnRlcnByZXRlciB0aGF0IGNhbiBiZSBoYW5kbGVkIGJ5IGFcbiAqIGludGVycHJldGVyIHRyeS9jYXRjaCBzdGF0ZW1lbnQuICBJZiB1bmhhbmRsZWQsIGEgcmVhbCBleGNlcHRpb24gd2lsbFxuICogYmUgdGhyb3duLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBlcnJvciBFcnJvciBvYmplY3QgdG8gZXhlY3V0ZS5cbiAqL1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlLmV4ZWN1dGVFeGNlcHRpb24gPSBmdW5jdGlvbihlcnJvcikge1xuICAvLyBTZWFyY2ggZm9yIGEgdHJ5IHN0YXRlbWVudC5cbiAgZG8ge1xuICAgIHRoaXMuc3RhdGVTdGFjay5wb3AoKTtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGlmIChzdGF0ZS5ub2RlWyd0eXBlJ10gPT0gJ1RyeVN0YXRlbWVudCcpIHtcbiAgICAgIHN0YXRlLnRocm93VmFsdWUgPSBlcnJvcjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gd2hpbGUgKHN0YXRlICYmIHN0YXRlLm5vZGVbJ3R5cGUnXSAhPSAnUHJvZ3JhbScpO1xuXG4gIC8vIFRocm93IGEgcmVhbCBlcnJvci5cbiAgdmFyIHJlYWxFcnJvcjtcbiAgaWYgKHRoaXMuaXNhKGVycm9yLCB0aGlzLkVSUk9SKSkge1xuICAgIHZhciBlcnJvclRhYmxlID0ge1xuICAgICAgJ0V2YWxFcnJvcic6IEV2YWxFcnJvcixcbiAgICAgICdSYW5nZUVycm9yJzogUmFuZ2VFcnJvcixcbiAgICAgICdSZWZlcmVuY2VFcnJvcic6IFJlZmVyZW5jZUVycm9yLFxuICAgICAgJ1N5bnRheEVycm9yJzogU3ludGF4RXJyb3IsXG4gICAgICAnVHlwZUVycm9yJzogVHlwZUVycm9yLFxuICAgICAgJ1VSSUVycm9yJzogVVJJRXJyb3JcbiAgICB9O1xuICAgIHZhciBuYW1lID0gdGhpcy5nZXRQcm9wZXJ0eShlcnJvciwgJ25hbWUnKS50b1N0cmluZygpO1xuICAgIHZhciBtZXNzYWdlID0gdGhpcy5nZXRQcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnKS52YWx1ZU9mKCk7XG4gICAgdmFyIHR5cGUgPSBlcnJvclRhYmxlW25hbWVdIHx8IEVycm9yO1xuICAgIHJlYWxFcnJvciA9IHR5cGUobWVzc2FnZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVhbEVycm9yID0gZXJyb3IudG9TdHJpbmcoKTtcbiAgfVxuICB0aHJvdyByZWFsRXJyb3I7XG59O1xuXG4vKipcbiAqIFB1c2ggYSBjYWxsIHRvIGEgZ2V0dGVyIG9udG8gdGhlIHN0YXRlc3RhY2suXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R9IGZ1bmMgRnVuY3Rpb24gdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7IUludGVycHJldGVyLk9iamVjdHwhQXJyYXl9IGxlZnRcbiAqICAgICBOYW1lIG9mIHZhcmlhYmxlIG9yIG9iamVjdC9wcm9wbmFtZSB0dXBsZS5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVycHJldGVyLnByb3RvdHlwZS5wdXNoR2V0dGVyXyA9IGZ1bmN0aW9uKGZ1bmMsIGxlZnQpIHtcbiAgLy8gTm9ybWFsbHkgJ3RoaXMnIHdpbGwgYmUgc3BlY2lmaWVkIGFzIHRoZSBvYmplY3QgY29tcG9uZW50IChvLngpLlxuICAvLyBTb21ldGltZXMgJ3RoaXMnIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgKG8pLlxuICB2YXIgZnVuY1RoaXMgPSAobGVmdCBpbnN0YW5jZW9mIEFycmF5KSA/IGxlZnRbMF0gOiBsZWZ0O1xuICB0aGlzLnN0YXRlU3RhY2sucHVzaCh7XG4gICAgbm9kZToge3R5cGU6ICdDYWxsRXhwcmVzc2lvbid9LFxuICAgIGRvbmVDYWxsZWVfOiB0cnVlLFxuICAgIGZ1bmNUaGlzXzogZnVuY1RoaXMsXG4gICAgZnVuY186IGZ1bmMsXG4gICAgZG9uZUFyZ3NfOiB0cnVlLFxuICAgIGFyZ3VtZW50c186IFtdXG4gIH0pO1xufTtcblxuLyoqXG4gKiBQdXNoIGEgY2FsbCB0byBhIHNldHRlciBvbnRvIHRoZSBzdGF0ZXN0YWNrLlxuICogQHBhcmFtIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSBmdW5jIEZ1bmN0aW9uIHRvIGV4ZWN1dGUuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R8IUFycmF5fSBsZWZ0XG4gKiAgICAgTmFtZSBvZiB2YXJpYWJsZSBvciBvYmplY3QvcHJvcG5hbWUgdHVwbGUuXG4gKiBAcGFyYW0geyFJbnRlcnByZXRlci5PYmplY3R8SW50ZXJwcmV0ZXIuUHJpbWl0aXZlfSB2YWx1ZSBWYWx1ZSB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnByZXRlci5wcm90b3R5cGUucHVzaFNldHRlcl8gPSBmdW5jdGlvbihmdW5jLCBsZWZ0LCB2YWx1ZSkge1xuICAvLyBOb3JtYWxseSAndGhpcycgd2lsbCBiZSBzcGVjaWZpZWQgYXMgdGhlIG9iamVjdCBjb21wb25lbnQgKG8ueCkuXG4gIC8vIFNvbWV0aW1lcyAndGhpcycgaXMgaW1wbGljaXRseSB0aGUgZ2xvYmFsIG9iamVjdCAoeCkuXG4gIHZhciBmdW5jVGhpcyA9IChsZWZ0IGluc3RhbmNlb2YgQXJyYXkpID8gbGVmdFswXSA6IHRoaXMuZ2xvYmFsO1xuICB0aGlzLnN0YXRlU3RhY2sucHVzaCh7XG4gICAgbm9kZToge3R5cGU6ICdDYWxsRXhwcmVzc2lvbid9LFxuICAgIGRvbmVDYWxsZWVfOiB0cnVlLFxuICAgIGZ1bmNUaGlzXzogZnVuY1RoaXMsXG4gICAgZnVuY186IGZ1bmMsXG4gICAgZG9uZUFyZ3NfOiB0cnVlLFxuICAgIGFyZ3VtZW50c186IFt2YWx1ZV1cbiAgfSk7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgdG8gaGFuZGxlIGVhY2ggbm9kZSB0eXBlLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBBcnJheUV4cHJlc3Npb24nXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIHZhciBuID0gc3RhdGUubl8gfHwgMDtcbiAgaWYgKCFzdGF0ZS5hcnJheV8pIHtcbiAgICBzdGF0ZS5hcnJheV8gPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkFSUkFZKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS52YWx1ZSkge1xuICAgIHRoaXMuc2V0UHJvcGVydHkoc3RhdGUuYXJyYXlfLCBuIC0gMSwgc3RhdGUudmFsdWUpO1xuICB9XG4gIGlmIChuIDwgbm9kZVsnZWxlbWVudHMnXS5sZW5ndGgpIHtcbiAgICBzdGF0ZS5uXyA9IG4gKyAxO1xuICAgIGlmIChub2RlWydlbGVtZW50cyddW25dKSB7XG4gICAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydlbGVtZW50cyddW25dfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFswLCAxLCAsIDNdWzJdIC0+IHVuZGVmaW5lZFxuICAgICAgLy8gTWlzc2luZyBlbGVtZW50cyBhcmUgbm90IGRlZmluZWQsIHRoZXkgYXJlbid0IHVuZGVmaW5lZC5cbiAgICAgIHN0YXRlLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5hcnJheV8ubGVuZ3RoID0gc3RhdGUubl8gfHwgMDtcbiAgICBzdGFjay5wb3AoKTtcbiAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHN0YXRlLmFycmF5XztcbiAgfVxufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwQXNzaWdubWVudEV4cHJlc3Npb24nXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIGlmICghc3RhdGUuZG9uZUxlZnRfKSB7XG4gICAgc3RhdGUuZG9uZUxlZnRfID0gdHJ1ZTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydsZWZ0J10sIGNvbXBvbmVudHM6IHRydWV9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzdGF0ZS5kb25lUmlnaHRfKSB7XG4gICAgaWYgKCFzdGF0ZS5sZWZ0U2lkZV8pIHtcbiAgICAgIHN0YXRlLmxlZnRTaWRlXyA9IHN0YXRlLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuZG9uZUdldHRlcl8pIHtcbiAgICAgIHN0YXRlLmxlZnRWYWx1ZV8gPSBzdGF0ZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZS5kb25lR2V0dGVyXyAmJiBub2RlWydvcGVyYXRvciddICE9ICc9Jykge1xuICAgICAgc3RhdGUubGVmdFZhbHVlXyA9IHRoaXMuZ2V0VmFsdWUoc3RhdGUubGVmdFNpZGVfKTtcbiAgICAgIGlmIChzdGF0ZS5sZWZ0VmFsdWVfLmlzR2V0dGVyKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBnZXR0ZXIgZmxhZyBhbmQgY2FsbCB0aGUgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAgICBzdGF0ZS5sZWZ0VmFsdWVfLmlzR2V0dGVyID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmRvbmVHZXR0ZXJfID0gdHJ1ZTtcbiAgICAgICAgdmFyIGZ1bmMgPSAvKiogQHR5cGUgeyFJbnRlcnByZXRlci5PYmplY3R9ICovIChzdGF0ZS5sZWZ0VmFsdWVfKTtcbiAgICAgICAgdGhpcy5wdXNoR2V0dGVyXyhmdW5jLCBzdGF0ZS5sZWZ0U2lkZV8pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLmRvbmVSaWdodF8gPSB0cnVlO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ3JpZ2h0J119KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN0YXRlLmRvbmVTZXR0ZXJfKSB7XG4gICAgLy8gUmV0dXJuIGlmIHNldHRlciBmdW5jdGlvbi5cbiAgICAvLyBTZXR0ZXIgbWV0aG9kIG9uIHByb3BlcnR5IGhhcyBjb21wbGV0ZWQuXG4gICAgLy8gSWdub3JlIGl0cyByZXR1cm4gdmFsdWUsIGFuZCB1c2UgdGhlIG9yaWdpbmFsIHNldCB2YWx1ZSBpbnN0ZWFkLlxuICAgIHN0YWNrLnBvcCgpO1xuICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gc3RhdGUuZG9uZVNldHRlcl87XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciByaWdodFNpZGUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIHZhbHVlO1xuICBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnPScpIHtcbiAgICB2YWx1ZSA9IHJpZ2h0U2lkZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmlnaHRWYWx1ZSA9IHJpZ2h0U2lkZTtcbiAgICB2YXIgbGVmdE51bWJlciA9IHN0YXRlLmxlZnRWYWx1ZV8udG9OdW1iZXIoKTtcbiAgICB2YXIgcmlnaHROdW1iZXIgPSByaWdodFZhbHVlLnRvTnVtYmVyKCk7XG4gICAgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJys9Jykge1xuICAgICAgdmFyIGxlZnQsIHJpZ2h0O1xuICAgICAgaWYgKHN0YXRlLmxlZnRWYWx1ZV8udHlwZSA9PSAnc3RyaW5nJyB8fCByaWdodFZhbHVlLnR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGVmdCA9IHN0YXRlLmxlZnRWYWx1ZV8udG9TdHJpbmcoKTtcbiAgICAgICAgcmlnaHQgPSByaWdodFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWZ0ID0gbGVmdE51bWJlcjtcbiAgICAgICAgcmlnaHQgPSByaWdodE51bWJlcjtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gbGVmdCArIHJpZ2h0O1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnLT0nKSB7XG4gICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgLSByaWdodE51bWJlcjtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJyo9Jykge1xuICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyICogcmlnaHROdW1iZXI7XG4gICAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICcvPScpIHtcbiAgICAgIHZhbHVlID0gbGVmdE51bWJlciAvIHJpZ2h0TnVtYmVyO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnJT0nKSB7XG4gICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgJSByaWdodE51bWJlcjtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJzw8PScpIHtcbiAgICAgIHZhbHVlID0gbGVmdE51bWJlciA8PCByaWdodE51bWJlcjtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJz4+PScpIHtcbiAgICAgIHZhbHVlID0gbGVmdE51bWJlciA+PiByaWdodE51bWJlcjtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJz4+Pj0nKSB7XG4gICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgPj4+IHJpZ2h0TnVtYmVyO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnJj0nKSB7XG4gICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgJiByaWdodE51bWJlcjtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJ149Jykge1xuICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyIF4gcmlnaHROdW1iZXI7XG4gICAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICd8PScpIHtcbiAgICAgIHZhbHVlID0gbGVmdE51bWJlciB8IHJpZ2h0TnVtYmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBTeW50YXhFcnJvcignVW5rbm93biBhc3NpZ25tZW50IGV4cHJlc3Npb246ICcgKyBub2RlWydvcGVyYXRvciddKTtcbiAgICB9XG4gICAgdmFsdWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XG4gIH1cbiAgdmFyIHNldHRlciA9IHRoaXMuc2V0VmFsdWUoc3RhdGUubGVmdFNpZGVfLCB2YWx1ZSk7XG4gIGlmIChzZXR0ZXIpIHtcbiAgICBzdGF0ZS5kb25lU2V0dGVyXyA9IHZhbHVlO1xuICAgIHRoaXMucHVzaFNldHRlcl8oc2V0dGVyLCBzdGF0ZS5sZWZ0U2lkZV8sIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gUmV0dXJuIGlmIG5vIHNldHRlciBmdW5jdGlvbi5cbiAgc3RhY2sucG9wKCk7XG4gIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gdmFsdWU7XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBCaW5hcnlFeHByZXNzaW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVMZWZ0Xykge1xuICAgIHN0YXRlLmRvbmVMZWZ0XyA9IHRydWU7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnbGVmdCddfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3RhdGUuZG9uZVJpZ2h0Xykge1xuICAgIHN0YXRlLmRvbmVSaWdodF8gPSB0cnVlO1xuICAgIHN0YXRlLmxlZnRWYWx1ZV8gPSBzdGF0ZS52YWx1ZTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydyaWdodCddfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN0YWNrLnBvcCgpO1xuICB2YXIgbGVmdFNpZGUgPSBzdGF0ZS5sZWZ0VmFsdWVfO1xuICB2YXIgcmlnaHRTaWRlID0gc3RhdGUudmFsdWU7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIGNvbXAgPSB0aGlzLmNvbXAobGVmdFNpZGUsIHJpZ2h0U2lkZSk7XG4gIGlmIChub2RlWydvcGVyYXRvciddID09ICc9PScgfHwgbm9kZVsnb3BlcmF0b3InXSA9PSAnIT0nKSB7XG4gICAgaWYgKGxlZnRTaWRlLmlzUHJpbWl0aXZlICYmIHJpZ2h0U2lkZS5pc1ByaW1pdGl2ZSkge1xuICAgICAgdmFsdWUgPSBsZWZ0U2lkZS5kYXRhID09IHJpZ2h0U2lkZS5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGNvbXAgPT09IDA7XG4gICAgfVxuICAgIGlmIChub2RlWydvcGVyYXRvciddID09ICchPScpIHtcbiAgICAgIHZhbHVlID0gIXZhbHVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICc9PT0nIHx8IG5vZGVbJ29wZXJhdG9yJ10gPT0gJyE9PScpIHtcbiAgICBpZiAobGVmdFNpZGUuaXNQcmltaXRpdmUgJiYgcmlnaHRTaWRlLmlzUHJpbWl0aXZlKSB7XG4gICAgICB2YWx1ZSA9IGxlZnRTaWRlLmRhdGEgPT09IHJpZ2h0U2lkZS5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGxlZnRTaWRlID09PSByaWdodFNpZGU7XG4gICAgfVxuICAgIGlmIChub2RlWydvcGVyYXRvciddID09ICchPT0nKSB7XG4gICAgICB2YWx1ZSA9ICF2YWx1ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnPicpIHtcbiAgICB2YWx1ZSA9IGNvbXAgPT0gMTtcbiAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICc+PScpIHtcbiAgICB2YWx1ZSA9IGNvbXAgPT0gMSB8fCBjb21wID09PSAwO1xuICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJzwnKSB7XG4gICAgdmFsdWUgPSBjb21wID09IC0xO1xuICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJzw9Jykge1xuICAgIHZhbHVlID0gY29tcCA9PSAtMSB8fCBjb21wID09PSAwO1xuICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJysnKSB7XG4gICAgdmFyIGxlZnRWYWx1ZSA9XG4gICAgICAgIGxlZnRTaWRlLmlzUHJpbWl0aXZlID8gbGVmdFNpZGUuZGF0YSA6IGxlZnRTaWRlLnRvU3RyaW5nKCk7XG4gICAgdmFyIHJpZ2h0VmFsdWUgPVxuICAgICAgICByaWdodFNpZGUuaXNQcmltaXRpdmUgPyByaWdodFNpZGUuZGF0YSA6IHJpZ2h0U2lkZS50b1N0cmluZygpO1xuICAgIHZhbHVlID0gbGVmdFZhbHVlICsgcmlnaHRWYWx1ZTtcbiAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICdpbicpIHtcbiAgICBpZiAocmlnaHRTaWRlLmlzUHJpbWl0aXZlKSB7XG4gICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUixcbiAgICAgICAgICAnRXhwZWN0aW5nIGFuIG9iamVjdCBldmFsdWF0aW5nIFxcJ2luXFwnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gdGhpcy5oYXNQcm9wZXJ0eShyaWdodFNpZGUsIGxlZnRTaWRlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnaW5zdGFuY2VvZicpIHtcbiAgICBpZiAoIXRoaXMuaXNhKHJpZ2h0U2lkZSwgdGhpcy5GVU5DVElPTikpIHtcbiAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5UWVBFX0VSUk9SLFxuICAgICAgICAgICdFeHBlY3RpbmcgYSBmdW5jdGlvbiBpbiBpbnN0YW5jZW9mIGNoZWNrJyk7XG4gICAgfSBlbHNlIGlmIChsZWZ0U2lkZS5pc1ByaW1pdGl2ZSkge1xuICAgICAgdmFsdWUgPSB0aGlzLkZBTFNFO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuaXNhKGxlZnRTaWRlLCByaWdodFNpZGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVmdFZhbHVlID0gbGVmdFNpZGUudG9OdW1iZXIoKTtcbiAgICB2YXIgcmlnaHRWYWx1ZSA9IHJpZ2h0U2lkZS50b051bWJlcigpO1xuICAgIGlmIChub2RlWydvcGVyYXRvciddID09ICctJykge1xuICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgLSByaWdodFZhbHVlO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnKicpIHtcbiAgICAgIHZhbHVlID0gbGVmdFZhbHVlICogcmlnaHRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJy8nKSB7XG4gICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAvIHJpZ2h0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICclJykge1xuICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgJSByaWdodFZhbHVlO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnJicpIHtcbiAgICAgIHZhbHVlID0gbGVmdFZhbHVlICYgcmlnaHRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJ3wnKSB7XG4gICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSB8IHJpZ2h0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICdeJykge1xuICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgXiByaWdodFZhbHVlO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnPDwnKSB7XG4gICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA8PCByaWdodFZhbHVlO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnPj4nKSB7XG4gICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA+PiByaWdodFZhbHVlO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnPj4+Jykge1xuICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgPj4+IHJpZ2h0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFN5bnRheEVycm9yKCdVbmtub3duIGJpbmFyeSBvcGVyYXRvcjogJyArIG5vZGVbJ29wZXJhdG9yJ10pO1xuICAgIH1cbiAgfVxuICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHZhbHVlKTtcbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcEJsb2NrU3RhdGVtZW50J10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICB2YXIgbiA9IHN0YXRlLm5fIHx8IDA7XG4gIGlmIChub2RlWydib2R5J11bbl0pIHtcbiAgICBzdGF0ZS5uXyA9IG4gKyAxO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2JvZHknXVtuXX0pO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnBvcCgpO1xuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBCcmVha1N0YXRlbWVudCddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2sucG9wKCk7XG4gIHZhciBsYWJlbCA9IG51bGw7XG4gIGlmIChzdGF0ZS5ub2RlWydsYWJlbCddKSB7XG4gICAgbGFiZWwgPSBzdGF0ZS5ub2RlWydsYWJlbCddWyduYW1lJ107XG4gIH1cbiAgd2hpbGUgKHN0YXRlICYmXG4gICAgICAgICBzdGF0ZS5ub2RlWyd0eXBlJ10gIT0gJ0NhbGxFeHByZXNzaW9uJyAmJlxuICAgICAgICAgc3RhdGUubm9kZVsndHlwZSddICE9ICdOZXdFeHByZXNzaW9uJykge1xuICAgIGlmIChsYWJlbCkge1xuICAgICAgaWYgKHN0YXRlLmxhYmVscyAmJiBzdGF0ZS5sYWJlbHMuaW5kZXhPZihsYWJlbCkgIT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdGUuaXNMb29wIHx8IHN0YXRlLmlzU3dpdGNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXRlID0gc3RhY2sucG9wKCk7XG4gIH1cbiAgLy8gU3ludGF4IGVycm9yLCBkbyBub3QgYWxsb3cgdGhpcyBlcnJvciB0byBiZSB0cmFwcGVkLlxuICB0aHJvdyBTeW50YXhFcnJvcignSWxsZWdhbCBicmVhayBzdGF0ZW1lbnQnKTtcbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcENhbGxFeHByZXNzaW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVDYWxsZWVfKSB7XG4gICAgc3RhdGUuZG9uZUNhbGxlZV8gPSB0cnVlO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2NhbGxlZSddLCBjb21wb25lbnRzOiB0cnVlfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3RhdGUuZnVuY18pIHtcbiAgICAvLyBEZXRlcm1pbmUgdmFsdWUgb2YgdGhlIGZ1bmN0aW9uLlxuICAgIGlmIChzdGF0ZS52YWx1ZS50eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLmZ1bmNfID0gc3RhdGUudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmZ1bmNfID0gdGhpcy5nZXRWYWx1ZShzdGF0ZS52YWx1ZSk7XG4gICAgICBpZiAoc3RhdGUuZnVuY18uaXNHZXR0ZXIpIHtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIGdldHRlciBmbGFnIGFuZCBjYWxsIHRoZSBnZXR0ZXIgZnVuY3Rpb24uXG4gICAgICAgIHN0YXRlLmZ1bmNfLmlzR2V0dGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHVzaEdldHRlcl8oLyoqIEB0eXBlIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSAqLyAoc3RhdGUuZnVuY18pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlKTtcbiAgICAgICAgc3RhdGUuZnVuY18gPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXN0YXRlLmZ1bmNfKSB7XG4gICAgICAgIHJldHVybjsgIC8vIFRocm93biBlcnJvciwgYnV0IHRyYXBwZWQuXG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmZ1bmNfLnR5cGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gdGhpcy5nZXRGdWxseVF1YWxpZmllZE5hbWUobm9kZVsnY2FsbGVlJ10pO1xuICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUixcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBEZXRlcm1pbmUgdmFsdWUgb2YgJ3RoaXMnIGluIGZ1bmN0aW9uLlxuICAgIGlmIChzdGF0ZS5ub2RlWyd0eXBlJ10gPT0gJ05ld0V4cHJlc3Npb24nKSB7XG4gICAgICBpZiAoc3RhdGUuZnVuY18uaWxsZWdhbENvbnN0cnVjdG9yKSB7XG4gICAgICAgIC8vIElsbGVnYWw6IG5ldyBlc2NhcGUoKTtcbiAgICAgICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsICdmdW5jdGlvbiBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBDb25zdHJ1Y3RvciwgJ3RoaXMnIGlzIG5ldyBvYmplY3QuXG4gICAgICBzdGF0ZS5mdW5jVGhpc18gPSB0aGlzLmNyZWF0ZU9iamVjdChzdGF0ZS5mdW5jXyk7XG4gICAgICBzdGF0ZS5pc0NvbnN0cnVjdG9yID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnZhbHVlLmxlbmd0aCkge1xuICAgICAgLy8gTWV0aG9kIGZ1bmN0aW9uLCAndGhpcycgaXMgb2JqZWN0LlxuICAgICAgc3RhdGUuZnVuY1RoaXNfID0gc3RhdGUudmFsdWVbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdsb2JhbCBmdW5jdGlvbiwgJ3RoaXMnIGlzIGdsb2JhbCBvYmplY3QgKG9yICd1bmRlZmluZWQnIGlmIHN0cmljdCkuXG4gICAgICBzdGF0ZS5mdW5jVGhpc18gPSB0aGlzLmdldFNjb3BlKCkuc3RyaWN0ID9cbiAgICAgICAgICB0aGlzLlVOREVGSU5FRCA6IHRoaXMuZ2xvYmFsO1xuICAgIH1cbiAgICBzdGF0ZS5hcmd1bWVudHNfID0gW107XG4gICAgc3RhdGUubl8gPSAwO1xuICB9XG4gIGlmICghc3RhdGUuZG9uZUFyZ3NfKSB7XG4gICAgaWYgKHN0YXRlLm5fICE9IDApIHtcbiAgICAgIHN0YXRlLmFyZ3VtZW50c18ucHVzaChzdGF0ZS52YWx1ZSk7XG4gICAgfVxuICAgIGlmIChub2RlWydhcmd1bWVudHMnXVtzdGF0ZS5uX10pIHtcbiAgICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2FyZ3VtZW50cyddW3N0YXRlLm5fXX0pO1xuICAgICAgc3RhdGUubl8rKztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGUuZG9uZUFyZ3NfID0gdHJ1ZTtcbiAgfVxuICBpZiAoIXN0YXRlLmRvbmVFeGVjXykge1xuICAgIHN0YXRlLmRvbmVFeGVjXyA9IHRydWU7XG4gICAgdmFyIGZ1bmNOb2RlID0gc3RhdGUuZnVuY18ubm9kZTtcbiAgICBpZiAoZnVuY05vZGUpIHtcbiAgICAgIHZhciBzY29wZSA9XG4gICAgICAgICAgdGhpcy5jcmVhdGVTY29wZShmdW5jTm9kZVsnYm9keSddLCBzdGF0ZS5mdW5jXy5wYXJlbnRTY29wZSk7XG4gICAgICAvLyBBZGQgYWxsIGFyZ3VtZW50cy5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY05vZGVbJ3BhcmFtcyddLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJhbU5hbWUgPVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUoZnVuY05vZGVbJ3BhcmFtcyddW2ldWyduYW1lJ10pO1xuICAgICAgICB2YXIgcGFyYW1WYWx1ZSA9IHN0YXRlLmFyZ3VtZW50c18ubGVuZ3RoID4gaSA/IHN0YXRlLmFyZ3VtZW50c19baV0gOlxuICAgICAgICAgICAgdGhpcy5VTkRFRklORUQ7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsIHBhcmFtTmFtZSwgcGFyYW1WYWx1ZSk7XG4gICAgICB9XG4gICAgICAvLyBCdWlsZCBhcmd1bWVudHMgdmFyaWFibGUuXG4gICAgICB2YXIgYXJnc0xpc3QgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkFSUkFZKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuYXJndW1lbnRzXy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KGFyZ3NMaXN0LCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5hcmd1bWVudHNfW2ldKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdhcmd1bWVudHMnLCBhcmdzTGlzdCk7XG4gICAgICAvLyBBZGQgdGhlIGZ1bmN0aW9uJ3MgbmFtZSAodmFyIHggPSBmdW5jdGlvbiBmb28oKXt9OylcbiAgICAgIHZhciBuYW1lID0gZnVuY05vZGVbJ2lkJ10gJiYgZnVuY05vZGVbJ2lkJ11bJ25hbWUnXTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsIG5hbWUsIHN0YXRlLmZ1bmNfKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jU3RhdGUgPSB7XG4gICAgICAgIG5vZGU6IGZ1bmNOb2RlWydib2R5J10sXG4gICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgdGhpc0V4cHJlc3Npb246IHN0YXRlLmZ1bmNUaGlzX1xuICAgICAgfTtcbiAgICAgIHN0YWNrLnB1c2goZnVuY1N0YXRlKTtcbiAgICAgIHN0YXRlLnZhbHVlID0gdGhpcy5VTkRFRklORUQ7ICAvLyBEZWZhdWx0IHZhbHVlIGlmIG5vIGV4cGxpY2l0IHJldHVybi5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLmZ1bmNfLm5hdGl2ZUZ1bmMpIHtcbiAgICAgIHN0YXRlLnZhbHVlID1cbiAgICAgICAgICBzdGF0ZS5mdW5jXy5uYXRpdmVGdW5jLmFwcGx5KHN0YXRlLmZ1bmNUaGlzXywgc3RhdGUuYXJndW1lbnRzXyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5mdW5jXy5hc3luY0Z1bmMpIHtcbiAgICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIucGF1c2VkXyA9IGZhbHNlO1xuICAgICAgfTtcbiAgICAgIHZhciBhcmdzV2l0aENhbGxiYWNrID0gc3RhdGUuYXJndW1lbnRzXy5jb25jYXQoY2FsbGJhY2spO1xuICAgICAgdGhpcy5wYXVzZWRfID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmZ1bmNfLmFzeW5jRnVuYy5hcHBseShzdGF0ZS5mdW5jVGhpc18sIGFyZ3NXaXRoQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuZnVuY18uZXZhbCkge1xuICAgICAgdmFyIGNvZGUgPSBzdGF0ZS5hcmd1bWVudHNfWzBdO1xuICAgICAgaWYgKCFjb2RlKSB7ICAvLyBldmFsKClcbiAgICAgICAgc3RhdGUudmFsdWUgPSB0aGlzLlVOREVGSU5FRDtcbiAgICAgIH0gZWxzZSBpZiAoIWNvZGUuaXNQcmltaXRpdmUpIHtcbiAgICAgICAgLy8gSlMgZG9lcyBub3QgcGFyc2UgU3RyaW5nIG9iamVjdHM6XG4gICAgICAgIC8vIGV2YWwobmV3IFN0cmluZygnMSArIDEnKSkgLT4gJzEgKyAxJ1xuICAgICAgICBzdGF0ZS52YWx1ZSA9IGNvZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXN0ID0gYWNvcm4ucGFyc2UoY29kZS50b1N0cmluZygpLCBJbnRlcnByZXRlci5QQVJTRV9PUFRJT05TKTtcbiAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgbm9kZToge3R5cGU6ICdFdmFsUHJvZ3JhbV8nLCBib2R5OiBhc3RbJ2JvZHknXX1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdHJpcExvY2F0aW9uc18oc3RhdGUubm9kZSwgbm9kZVsnc3RhcnQnXSwgbm9kZVsnZW5kJ10pO1xuICAgICAgICAvLyBVcGRhdGUgY3VycmVudCBzY29wZSB3aXRoIGRlZmluaXRpb25zIGluIGV2YWwoKS5cbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICB0aGlzLnBvcHVsYXRlU2NvcGVfKGFzdCwgc2NvcGUpO1xuICAgICAgICBzdGFjay5wdXNoKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogQSBjaGlsZCBvZiBhIGZ1bmN0aW9uIGlzIGEgZnVuY3Rpb24gYnV0IGlzIG5vdCBjYWxsYWJsZS4gIEZvciBleGFtcGxlOlxuICAgICAgdmFyIEYgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgRi5wcm90b3R5cGUgPSBlc2NhcGU7XG4gICAgICB2YXIgZiA9IG5ldyBGKCk7XG4gICAgICBmKCk7XG4gICAgICAqL1xuICAgICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsICdmdW5jdGlvbiBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFeGVjdXRpb24gY29tcGxldGUuICBQdXQgdGhlIHJldHVybiB2YWx1ZSBvbiB0aGUgc3RhY2suXG4gICAgc3RhY2sucG9wKCk7XG4gICAgaWYgKHN0YXRlLmlzQ29uc3RydWN0b3IgJiYgc3RhdGUudmFsdWUudHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gc3RhdGUuZnVuY1RoaXNfO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwQ2F0Y2hDbGF1c2UnXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIGlmICghc3RhdGUuZG9uZV8pIHtcbiAgICBzdGF0ZS5kb25lXyA9IHRydWU7XG4gICAgdmFyIHNjb3BlO1xuICAgIGlmIChub2RlWydwYXJhbSddKSB7XG4gICAgICBzY29wZSA9IHRoaXMuY3JlYXRlU3BlY2lhbFNjb3BlKHRoaXMuZ2V0U2NvcGUoKSk7XG4gICAgICAvLyBBZGQgdGhlIGFyZ3VtZW50LlxuICAgICAgdmFyIHBhcmFtTmFtZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5vZGVbJ3BhcmFtJ11bJ25hbWUnXSk7XG4gICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCBwYXJhbU5hbWUsIHN0YXRlLnRocm93VmFsdWUpO1xuICAgIH1cbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydib2R5J10sIHNjb3BlOiBzY29wZX0pO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnBvcCgpO1xuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBDb25kaXRpb25hbEV4cHJlc3Npb24nXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbW9kZSA9IHN0YXRlLm1vZGVfIHx8IDA7XG4gIGlmIChtb2RlID09IDApIHtcbiAgICBzdGF0ZS5tb2RlXyA9IDE7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogc3RhdGUubm9kZVsndGVzdCddfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtb2RlID09IDEpIHtcbiAgICBzdGF0ZS5tb2RlXyA9IDI7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWUudG9Cb29sZWFuKCk7XG4gICAgaWYgKHZhbHVlICYmIHN0YXRlLm5vZGVbJ2NvbnNlcXVlbnQnXSkge1xuICAgICAgc3RhY2sucHVzaCh7bm9kZTogc3RhdGUubm9kZVsnY29uc2VxdWVudCddfSk7XG4gICAgICByZXR1cm47ICAvLyBFeGVjdXRlICdpZicgYmxvY2suXG4gICAgfSBlbHNlIGlmICghdmFsdWUgJiYgc3RhdGUubm9kZVsnYWx0ZXJuYXRlJ10pIHtcbiAgICAgIHN0YWNrLnB1c2goe25vZGU6IHN0YXRlLm5vZGVbJ2FsdGVybmF0ZSddfSk7XG4gICAgICByZXR1cm47ICAvLyBFeGVjdXRlICdlbHNlJyBibG9jay5cbiAgICB9XG4gICAgLy8gZXZhbCgnMTtpZihmYWxzZSl7Mn0nKSAtPiB1bmRlZmluZWRcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5VTkRFRklORUQ7XG4gIH1cbiAgc3RhY2sucG9wKCk7XG4gIGlmIChzdGF0ZS5ub2RlWyd0eXBlJ10gPT0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbicpIHtcbiAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBDb250aW51ZVN0YXRlbWVudCddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2sucG9wKCk7XG4gIHZhciBsYWJlbCA9IG51bGw7XG4gIGlmIChzdGF0ZS5ub2RlWydsYWJlbCddKSB7XG4gICAgbGFiZWwgPSBzdGF0ZS5ub2RlWydsYWJlbCddWyduYW1lJ107XG4gIH1cbiAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgd2hpbGUgKHN0YXRlICYmXG4gICAgICAgICBzdGF0ZS5ub2RlWyd0eXBlJ10gIT0gJ0NhbGxFeHByZXNzaW9uJyAmJlxuICAgICAgICAgc3RhdGUubm9kZVsndHlwZSddICE9ICdOZXdFeHByZXNzaW9uJykge1xuICAgIGlmIChzdGF0ZS5pc0xvb3ApIHtcbiAgICAgIGlmICghbGFiZWwgfHwgKHN0YXRlLmxhYmVscyAmJiBzdGF0ZS5sYWJlbHMuaW5kZXhPZihsYWJlbCkgIT0gLTEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhY2sucG9wKCk7XG4gICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBTeW50YXggZXJyb3IsIGRvIG5vdCBhbGxvdyB0aGlzIGVycm9yIHRvIGJlIHRyYXBwZWQuXG4gIHRocm93IFN5bnRheEVycm9yKCdJbGxlZ2FsIGNvbnRpbnVlIHN0YXRlbWVudCcpO1xufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwRGVidWdnZXInXSA9IGZ1bmN0aW9uKCkge1xuICAvLyBEbyBub3RoaW5nLiAgTWF5IGJlIG92ZXJyaWRkZW4gYnkgZGV2ZWxvcGVycy5cbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcERvV2hpbGVTdGF0ZW1lbnQnXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICBpZiAoc3RhdGUubm9kZVsndHlwZSddID09ICdEb1doaWxlU3RhdGVtZW50JyAmJiBzdGF0ZS50ZXN0XyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gRmlyc3QgaXRlcmF0aW9uIG9mIGRvL3doaWxlIGV4ZWN1dGVzIHdpdGhvdXQgY2hlY2tpbmcgdGVzdC5cbiAgICBzdGF0ZS52YWx1ZSA9IHRoaXMuVFJVRTtcbiAgICBzdGF0ZS50ZXN0XyA9IHRydWU7XG4gIH1cbiAgaWYgKCFzdGF0ZS50ZXN0Xykge1xuICAgIHN0YXRlLnRlc3RfID0gdHJ1ZTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBzdGF0ZS5ub2RlWyd0ZXN0J119KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXN0YXRlLnZhbHVlLnRvQm9vbGVhbigpKSB7ICAvLyBEb25lLCBleGl0IGxvb3AuXG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm5vZGVbJ2JvZHknXSkgeyAgLy8gRXhlY3V0ZSB0aGUgYm9keS5cbiAgICAgIHN0YXRlLnRlc3RfID0gZmFsc2U7XG4gICAgICBzdGF0ZS5pc0xvb3AgPSB0cnVlO1xuICAgICAgc3RhY2sucHVzaCh7bm9kZTogc3RhdGUubm9kZVsnYm9keSddfSk7XG4gICAgfVxuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBFbXB0eVN0YXRlbWVudCddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RhdGVTdGFjay5wb3AoKTtcbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcEV2YWxQcm9ncmFtXyddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIHZhciBub2RlID0gc3RhdGUubm9kZTtcbiAgdmFyIG4gPSBzdGF0ZS5uXyB8fCAwO1xuICBpZiAobm9kZVsnYm9keSddW25dKSB7XG4gICAgc3RhdGUubl8gPSBuICsgMTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydib2R5J11bbl19KTtcbiAgfSBlbHNlIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHRoaXMudmFsdWU7XG4gIH1cbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcEV4cHJlc3Npb25TdGF0ZW1lbnQnXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICBpZiAoIXN0YXRlLmRvbmVfKSB7XG4gICAgc3RhdGUuZG9uZV8gPSB0cnVlO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IHN0YXRlLm5vZGVbJ2V4cHJlc3Npb24nXX0pO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnBvcCgpO1xuICAgIC8vIFNhdmUgdGhpcyB2YWx1ZSB0byBpbnRlcnByZXRlci52YWx1ZSBmb3IgdXNlIGFzIGEgcmV0dXJuIHZhbHVlIGlmXG4gICAgLy8gdGhpcyBjb2RlIGlzIGluc2lkZSBhbiBldmFsIGZ1bmN0aW9uLlxuICAgIHRoaXMudmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgfVxufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwRm9ySW5TdGF0ZW1lbnQnXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIC8vIEZpcnN0LCBpbml0aWFsaXplIGEgdmFyaWFibGUgaWYgZXhpc3RzLiAgT25seSBkbyBzbyBvbmNlLCBldmVyLlxuICBpZiAoIXN0YXRlLmRvbmVJbml0Xykge1xuICAgIHN0YXRlLmRvbmVJbml0XyA9IHRydWU7XG4gICAgaWYgKG5vZGVbJ2xlZnQnXVsnZGVjbGFyYXRpb25zJ10gJiZcbiAgICAgICAgbm9kZVsnbGVmdCddWydkZWNsYXJhdGlvbnMnXVswXVsnaW5pdCddKSB7XG4gICAgICBpZiAodGhpcy5nZXRTY29wZSgpLnN0cmljdCkge1xuICAgICAgICB0aHJvdyBTeW50YXhFcnJvcihcbiAgICAgICAgICAgICdmb3ItaW4gbG9vcCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBtYXkgbm90IGhhdmUgYW4gaW5pdGlhbGl6ZXIuJyk7XG4gICAgICB9XG4gICAgICAvLyBWYXJpYWJsZSBpbml0aWFsaXphdGlvbjogZm9yICh2YXIgeCA9IDQgaW4geSlcbiAgICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2xlZnQnXX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICAvLyBTZWNvbmQsIGxvb2sgdXAgdGhlIG9iamVjdC4gIE9ubHkgZG8gc28gb25jZSwgZXZlci5cbiAgaWYgKCFzdGF0ZS5kb25lT2JqZWN0Xykge1xuICAgIHN0YXRlLmRvbmVPYmplY3RfID0gdHJ1ZTtcbiAgICBpZiAoIXN0YXRlLnZhcmlhYmxlXykge1xuICAgICAgc3RhdGUudmFyaWFibGVfID0gc3RhdGUudmFsdWU7XG4gICAgfVxuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ3JpZ2h0J119KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzdGF0ZS5vYmplY3RfKSB7XG4gICAgLy8gRmlyc3QgaXRlcmF0aW9uLlxuICAgIHN0YXRlLmlzTG9vcCA9IHRydWU7XG4gICAgc3RhdGUub2JqZWN0XyA9IHN0YXRlLnZhbHVlO1xuICAgIHN0YXRlLnZpc2l0ZWRfID0gW107XG4gIH1cbiAgLy8gVGhpcmQsIGZpbmQgdGhlIHByb3BlcnR5IG5hbWUgZm9yIHRoaXMgaXRlcmF0aW9uLlxuICBpZiAoc3RhdGUubmFtZV8gPT09IHVuZGVmaW5lZCkge1xuICAgIGRvbmU6IGRvIHtcbiAgICAgIGlmIChzdGF0ZS5vYmplY3RfLmlzUHJpbWl0aXZlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc3RhdGUub2JqZWN0Xy5kYXRhKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLnZpc2l0ZWRfLmluZGV4T2YocHJvcCkgPT0gLTEpIHtcbiAgICAgICAgICAgIHN0YXRlLnZpc2l0ZWRfLnB1c2gocHJvcCk7XG4gICAgICAgICAgICBzdGF0ZS5uYW1lXyA9IHByb3A7XG4gICAgICAgICAgICBzdGF0ZS52aXNpdGVkXy5wdXNoKHByb3ApO1xuICAgICAgICAgICAgYnJlYWsgZG9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc3RhdGUub2JqZWN0Xy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLnZpc2l0ZWRfLmluZGV4T2YocHJvcCkgPT0gLTEpIHtcbiAgICAgICAgICAgIHN0YXRlLnZpc2l0ZWRfLnB1c2gocHJvcCk7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLm9iamVjdF8ubm90RW51bWVyYWJsZVtwcm9wXSkge1xuICAgICAgICAgICAgICBzdGF0ZS5uYW1lXyA9IHByb3A7XG4gICAgICAgICAgICAgIHN0YXRlLnZpc2l0ZWRfLnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgIGJyZWFrIGRvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGF0ZS5vYmplY3RfID0gc3RhdGUub2JqZWN0Xy5wcm90bztcbiAgICB9IHdoaWxlIChzdGF0ZS5vYmplY3RfKTtcbiAgICBpZiAoIXN0YXRlLm9iamVjdF8pIHtcbiAgICAgIC8vIERvbmUsIGV4aXQgbG9vcC5cbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICAvLyBGb3VydGgsIGZpbmQgdGhlIHZhcmlhYmxlXG4gIGlmICghc3RhdGUuZG9uZVZhcmlhYmxlXykge1xuICAgIHN0YXRlLmRvbmVWYXJpYWJsZV8gPSB0cnVlO1xuICAgIHZhciBsZWZ0ID0gbm9kZVsnbGVmdCddO1xuICAgIGlmIChsZWZ0Wyd0eXBlJ10gPT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nKSB7XG4gICAgICAvLyBJbmxpbmUgdmFyaWFibGUgZGVjbGFyYXRpb246IGZvciAodmFyIHggaW4geSlcbiAgICAgIHN0YXRlLnZhcmlhYmxlXyA9IGxlZnRbJ2RlY2xhcmF0aW9ucyddWzBdWydpZCddWyduYW1lJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFyYml0cmFyeSBsZWZ0IHNpZGU6IGZvciAoZm9vKCkuYmFyIGluIHkpXG4gICAgICBzdGF0ZS52YXJpYWJsZV8gPSBudWxsO1xuICAgICAgc3RhY2sucHVzaCh7bm9kZTogbGVmdCwgY29tcG9uZW50czogdHJ1ZX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoIXN0YXRlLnZhcmlhYmxlXykge1xuICAgIHN0YXRlLnZhcmlhYmxlXyA9IHN0YXRlLnZhbHVlO1xuICB9XG4gIC8vIEZpZnRoLCBzZXQgdGhlIHZhcmlhYmxlLlxuICBpZiAoIXN0YXRlLmRvbmVTZXR0ZXJfKSB7XG4gICAgc3RhdGUuZG9uZVNldHRlcl8gPSB0cnVlO1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHN0YXRlLm5hbWVfKTtcbiAgICB2YXIgc2V0dGVyID0gdGhpcy5zZXRWYWx1ZShzdGF0ZS52YXJpYWJsZV8sIHZhbHVlKTtcbiAgICBpZiAoc2V0dGVyKSB7XG4gICAgICB0aGlzLnB1c2hTZXR0ZXJfKHNldHRlciwgc3RhdGUudmFyaWFibGVfLCB2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIC8vIFNpeHRoLCBleGVjdXRlIHRoZSBib2R5LlxuICBpZiAobm9kZVsnYm9keSddKSB7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnYm9keSddfSk7XG4gIH1cbiAgLy8gUmVzZXQgYmFjayB0byBzdGVwIHRocmVlLlxuICBzdGF0ZS5uYW1lXyA9IHVuZGVmaW5lZDtcbiAgaWYgKHN0YXRlLnZhcmlhYmxlXyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgc3RhdGUuZG9uZVZhcmlhYmxlXyA9IGZhbHNlO1xuICB9XG4gIHN0YXRlLmRvbmVTZXR0ZXJfID0gZmFsc2U7XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBGb3JTdGF0ZW1lbnQnXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIHZhciBtb2RlID0gc3RhdGUubW9kZV8gfHwgMDtcbiAgaWYgKG1vZGUgPT0gMCkge1xuICAgIHN0YXRlLm1vZGVfID0gMTtcbiAgICBpZiAobm9kZVsnaW5pdCddKSB7XG4gICAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydpbml0J119KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobW9kZSA9PSAxKSB7XG4gICAgc3RhdGUubW9kZV8gPSAyO1xuICAgIGlmIChub2RlWyd0ZXN0J10pIHtcbiAgICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ3Rlc3QnXX0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChtb2RlID09IDIpIHtcbiAgICBzdGF0ZS5tb2RlXyA9IDM7XG4gICAgaWYgKG5vZGVbJ3Rlc3QnXSAmJiBzdGF0ZS52YWx1ZSAmJiAhc3RhdGUudmFsdWUudG9Cb29sZWFuKCkpIHtcbiAgICAgIC8vIERvbmUsIGV4aXQgbG9vcC5cbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAobm9kZVsnYm9keSddKSB7IC8vIEV4ZWN1dGUgdGhlIGJvZHkuXG4gICAgICBzdGF0ZS5pc0xvb3AgPSB0cnVlO1xuICAgICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnYm9keSddfSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vZGUgPT0gMykge1xuICAgIHN0YXRlLm1vZGVfID0gMTtcbiAgICBpZiAobm9kZVsndXBkYXRlJ10pIHtcbiAgICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ3VwZGF0ZSddfSk7XG4gICAgfVxuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBGdW5jdGlvbkRlY2xhcmF0aW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgLy8gVGhpcyB3YXMgZm91bmQgYW5kIGhhbmRsZWQgd2hlbiB0aGUgc2NvcGUgd2FzIHBvcHVsYXRlZC5cbiAgdGhpcy5zdGF0ZVN0YWNrLnBvcCgpO1xufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwRnVuY3Rpb25FeHByZXNzaW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFjay5wb3AoKTtcbiAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0udmFsdWUgPVxuICAgICAgdGhpcy5jcmVhdGVGdW5jdGlvbihzdGF0ZS5ub2RlLCB0aGlzLmdldFNjb3BlKCkpO1xufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwSWRlbnRpZmllciddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2sucG9wKCk7XG4gIHZhciBuYW1lU3RyID0gc3RhdGUubm9kZVsnbmFtZSddO1xuICB2YXIgbmFtZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5hbWVTdHIpO1xuICB2YXIgdmFsdWUgPSBzdGF0ZS5jb21wb25lbnRzID8gbmFtZSA6IHRoaXMuZ2V0VmFsdWVGcm9tU2NvcGUobmFtZSk7XG4gIC8vIEFuIGlkZW50aWZpZXIgY291bGQgYmUgYSBnZXR0ZXIgaWYgaXQncyBhIHByb3BlcnR5IG9uIHRoZSBnbG9iYWwgb2JqZWN0LlxuICBpZiAodmFsdWUgJiYgdmFsdWUuaXNHZXR0ZXIpIHtcbiAgICAvLyBDbGVhciB0aGUgZ2V0dGVyIGZsYWcgYW5kIGNhbGwgdGhlIGdldHRlciBmdW5jdGlvbi5cbiAgICB2YWx1ZS5pc0dldHRlciA9IGZhbHNlO1xuICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICB3aGlsZSAoIXRoaXMuaGFzUHJvcGVydHkoc2NvcGUsIG5hbWVTdHIpKSB7XG4gICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlO1xuICAgIH1cbiAgICB2YXIgZnVuYyA9IC8qKiBAdHlwZSB7IUludGVycHJldGVyLk9iamVjdH0gKi8gKHZhbHVlKTtcbiAgICB0aGlzLnB1c2hHZXR0ZXJfKGZ1bmMsIHRoaXMuZ2xvYmFsKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHZhbHVlO1xuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBJZlN0YXRlbWVudCddID1cbiAgICBJbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBDb25kaXRpb25hbEV4cHJlc3Npb24nXTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwTGFiZWxlZFN0YXRlbWVudCddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgLy8gTm8gbmVlZCB0byBoaXQgdGhpcyBub2RlIGFnYWluIG9uIHRoZSB3YXkgYmFjayB1cCB0aGUgc3RhY2suXG4gIHZhciBzdGF0ZSA9IHN0YWNrLnBvcCgpO1xuICAvLyBOb3RlIHRoYXQgYSBzdGF0ZW1lbnQgbWlnaHQgaGF2ZSBtdWx0aXBsZSBsYWJlbHMsXG4gIHZhciBsYWJlbHMgPSBzdGF0ZS5sYWJlbHMgfHwgW107XG4gIGxhYmVscy5wdXNoKHN0YXRlLm5vZGVbJ2xhYmVsJ11bJ25hbWUnXSk7XG4gIHN0YWNrLnB1c2goe25vZGU6IHN0YXRlLm5vZGVbJ2JvZHknXSwgbGFiZWxzOiBsYWJlbHN9KTtcbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcExpdGVyYWwnXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrLnBvcCgpO1xuICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHN0YXRlLm5vZGVbJ3ZhbHVlJ10pO1xufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwTG9naWNhbEV4cHJlc3Npb24nXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIGlmIChub2RlWydvcGVyYXRvciddICE9ICcmJicgJiYgbm9kZVsnb3BlcmF0b3InXSAhPSAnfHwnKSB7XG4gICAgdGhyb3cgU3ludGF4RXJyb3IoJ1Vua25vd24gbG9naWNhbCBvcGVyYXRvcjogJyArIG5vZGVbJ29wZXJhdG9yJ10pO1xuICB9XG4gIGlmICghc3RhdGUuZG9uZUxlZnRfKSB7XG4gICAgc3RhdGUuZG9uZUxlZnRfID0gdHJ1ZTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydsZWZ0J119KTtcbiAgfSBlbHNlIGlmICghc3RhdGUuZG9uZVJpZ2h0Xykge1xuICAgIGlmICgobm9kZVsnb3BlcmF0b3InXSA9PSAnJiYnICYmICFzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKSkgfHxcbiAgICAgICAgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJ3x8JyAmJiBzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKSkpIHtcbiAgICAgIC8vIFNob3J0Y3V0IGV2YWx1YXRpb24uXG4gICAgICBzdGFjay5wb3AoKTtcbiAgICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmRvbmVSaWdodF8gPSB0cnVlO1xuICAgICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsncmlnaHQnXX0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBNZW1iZXJFeHByZXNzaW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVPYmplY3RfKSB7XG4gICAgc3RhdGUuZG9uZU9iamVjdF8gPSB0cnVlO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ29iamVjdCddfSk7XG4gIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVQcm9wZXJ0eV8pIHtcbiAgICBzdGF0ZS5kb25lUHJvcGVydHlfID0gdHJ1ZTtcbiAgICBzdGF0ZS5vYmplY3RfID0gc3RhdGUudmFsdWU7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsncHJvcGVydHknXSwgY29tcG9uZW50czogIW5vZGVbJ2NvbXB1dGVkJ119KTtcbiAgfSBlbHNlIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgICBpZiAoc3RhdGUuY29tcG9uZW50cykge1xuICAgICAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0udmFsdWUgPSBbc3RhdGUub2JqZWN0Xywgc3RhdGUudmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUub2JqZWN0XyA9PSB0aGlzLk5VTEwgfHwgc3RhdGUub2JqZWN0XyA9PSB0aGlzLlVOREVGSU5FRClcbiAgICAgIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmdldEZ1bGx5UXVhbGlmaWVkTmFtZShub2RlLm9iamVjdCk7XG4gICAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5UWVBFX0VSUk9SLCBuYW1lICsgXCIgaXMgXCIgK1xuICAgICAgICAgICAgc3RhdGUub2JqZWN0Xy50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRQcm9wZXJ0eShzdGF0ZS5vYmplY3RfLCBzdGF0ZS52YWx1ZSk7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHN0YWNrLnB1c2goe30pO1xuICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUixcbiAgICAgICAgICAgIFwiQ2Fubm90IHJlYWQgcHJvcGVydHkgJ1wiICsgc3RhdGUudmFsdWUgKyBcIicgb2YgXCIgK1xuICAgICAgICAgICAgc3RhdGUub2JqZWN0Xy50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmlzR2V0dGVyKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBnZXR0ZXIgZmxhZyBhbmQgY2FsbCB0aGUgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAgICB2YWx1ZS5pc0dldHRlciA9IGZhbHNlO1xuICAgICAgICB2YXIgZnVuYyA9IC8qKiBAdHlwZSB7IUludGVycHJldGVyLk9iamVjdH0gKi8gKHZhbHVlKTtcbiAgICAgICAgdGhpcy5wdXNoR2V0dGVyXyhmdW5jLCBzdGF0ZS5vYmplY3RfKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBOZXdFeHByZXNzaW9uJ10gPVxuICAgIEludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcENhbGxFeHByZXNzaW9uJ107XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcE9iamVjdEV4cHJlc3Npb24nXSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YXRlU3RhY2s7XG4gIHZhciBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG4gIHZhciB2YWx1ZVRvZ2dsZSA9IHN0YXRlLnZhbHVlVG9nZ2xlXztcbiAgdmFyIG4gPSBzdGF0ZS5uXyB8fCAwO1xuICBpZiAoIXN0YXRlLm9iamVjdCkge1xuICAgIHN0YXRlLm9iamVjdCA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuT0JKRUNUKTtcbiAgICBzdGF0ZS5wcm9wZXJ0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWVUb2dnbGUpIHtcbiAgICAgIHN0YXRlLmtleV8gPSBzdGF0ZS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzdGF0ZS5wcm9wZXJ0aWVzW3N0YXRlLmtleV9dKSB7XG4gICAgICAgIC8vIENyZWF0ZSB0ZW1wIG9iamVjdCB0byBjb2xsZWN0IHZhbHVlLCBnZXR0ZXIsIGFuZC9vciBzZXR0ZXIuXG4gICAgICAgIHN0YXRlLnByb3BlcnRpZXNbc3RhdGUua2V5X10gPSB7fTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLnByb3BlcnRpZXNbc3RhdGUua2V5X11bc3RhdGUua2luZF9dID0gc3RhdGUudmFsdWU7XG4gICAgfVxuICB9XG4gIGlmIChub2RlWydwcm9wZXJ0aWVzJ11bbl0pIHtcbiAgICBpZiAodmFsdWVUb2dnbGUpIHtcbiAgICAgIHN0YXRlLm5fID0gbiArIDE7XG4gICAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydwcm9wZXJ0aWVzJ11bbl1bJ3ZhbHVlJ119KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUua2luZF8gPSBub2RlWydwcm9wZXJ0aWVzJ11bbl1bJ2tpbmQnXTtcbiAgICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ3Byb3BlcnRpZXMnXVtuXVsna2V5J10sIGNvbXBvbmVudHM6IHRydWV9KTtcbiAgICB9XG4gICAgc3RhdGUudmFsdWVUb2dnbGVfID0gIXZhbHVlVG9nZ2xlO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGtleSBpbiBzdGF0ZS5wcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIga2luZHMgPSBzdGF0ZS5wcm9wZXJ0aWVzW2tleV07XG4gICAgICBpZiAoJ2dldCcgaW4ga2luZHMgfHwgJ3NldCcgaW4ga2luZHMpIHtcbiAgICAgICAgLy8gU2V0IGEgcHJvcGVydHkgd2l0aCBhIGdldHRlciBvciBzZXR0ZXIuXG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDoga2luZHNbJ2dldCddLFxuICAgICAgICAgIHNldDoga2luZHNbJ3NldCddXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoc3RhdGUub2JqZWN0LCBrZXksIG51bGwsIGRlc2NyaXB0b3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0IGEgbm9ybWFsIHByb3BlcnR5IHdpdGggYSB2YWx1ZS5cbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzdGF0ZS5vYmplY3QsIGtleSwga2luZHNbJ2luaXQnXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YWNrLnBvcCgpO1xuICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gc3RhdGUub2JqZWN0O1xuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBQcm9ncmFtJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICB2YXIgbiA9IHN0YXRlLm5fIHx8IDA7XG4gIGlmIChub2RlWydib2R5J11bbl0pIHtcbiAgICBzdGF0ZS5kb25lID0gZmFsc2U7XG4gICAgc3RhdGUubl8gPSBuICsgMTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydib2R5J11bbl19KTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAvLyBEb24ndCBwb3AgdGhlIHN0YXRlU3RhY2suXG4gICAgLy8gTGVhdmUgdGhlIHJvb3Qgc2NvcGUgb24gdGhlIHRyZWUgaW4gY2FzZSB0aGUgcHJvZ3JhbSBpcyBhcHBlbmRlZCB0by5cbiAgfVxufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwUmV0dXJuU3RhdGVtZW50J10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAobm9kZVsnYXJndW1lbnQnXSAmJiAhc3RhdGUuZG9uZV8pIHtcbiAgICBzdGF0ZS5kb25lXyA9IHRydWU7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnYXJndW1lbnQnXX0pO1xuICB9IGVsc2Uge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlIHx8IHRoaXMuVU5ERUZJTkVEO1xuICAgIHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTtcbiAgICBzdGF0ZSA9IHN0YWNrW2ldO1xuICAgIHdoaWxlIChzdGF0ZS5ub2RlWyd0eXBlJ10gIT0gJ0NhbGxFeHByZXNzaW9uJyAmJlxuICAgICAgICAgICBzdGF0ZS5ub2RlWyd0eXBlJ10gIT0gJ05ld0V4cHJlc3Npb24nKSB7XG4gICAgICBpZiAoc3RhdGUubm9kZVsndHlwZSddICE9ICdUcnlTdGF0ZW1lbnQnKSB7XG4gICAgICAgIHN0YWNrLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICAgIGktLTtcbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAvLyBTeW50YXggZXJyb3IsIGRvIG5vdCBhbGxvdyB0aGlzIGVycm9yIHRvIGJlIHRyYXBwZWQuXG4gICAgICAgIHRocm93IFN5bnRheEVycm9yKCdJbGxlZ2FsIHJldHVybiBzdGF0ZW1lbnQnKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlID0gc3RhY2tbaV07XG4gICAgfVxuICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIH1cbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcFNlcXVlbmNlRXhwcmVzc2lvbiddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIHZhciBub2RlID0gc3RhdGUubm9kZTtcbiAgdmFyIG4gPSBzdGF0ZS5uXyB8fCAwO1xuICBpZiAobm9kZVsnZXhwcmVzc2lvbnMnXVtuXSkge1xuICAgIHN0YXRlLm5fID0gbiArIDE7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnZXhwcmVzc2lvbnMnXVtuXX0pO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnBvcCgpO1xuICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnZhbHVlID0gc3RhdGUudmFsdWU7XG4gIH1cbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcFN3aXRjaFN0YXRlbWVudCddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIGlmICghc3RhdGUudGVzdF8pIHtcbiAgICBzdGF0ZS50ZXN0XyA9IHRydWU7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogc3RhdGUubm9kZVsnZGlzY3JpbWluYW50J119KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzdGF0ZS5zd2l0Y2hWYWx1ZV8pIHtcbiAgICAvLyBQcmVzZXJ2ZSBzd2l0Y2ggdmFsdWUgYmV0d2VlbiBjYXNlIHRlc3RzLlxuICAgIHN0YXRlLnN3aXRjaFZhbHVlXyA9IHN0YXRlLnZhbHVlO1xuICB9XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleF8gfHwgMDtcbiAgICB2YXIgc3dpdGNoQ2FzZSA9IHN0YXRlLm5vZGVbJ2Nhc2VzJ11baW5kZXhdO1xuICAgIGlmICghc3RhdGUubWF0Y2hlZF8gJiYgc3dpdGNoQ2FzZSAmJiAhc3dpdGNoQ2FzZVsndGVzdCddKSB7XG4gICAgICAvLyBUZXN0IG9uIHRoZSBkZWZhdWx0IGNhc2UgaXMgbnVsbC5cbiAgICAgIC8vIEJ5cGFzcyAoYnV0IHN0b3JlKSB0aGUgZGVmYXVsdCBjYXNlLCBhbmQgZ2V0IGJhY2sgdG8gaXQgbGF0ZXIuXG4gICAgICBzdGF0ZS5kZWZhdWx0Q2FzZV8gPSBpbmRleDtcbiAgICAgIHN0YXRlLmluZGV4XyA9IGluZGV4ICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIXN3aXRjaENhc2UgJiYgIXN0YXRlLm1hdGNoZWRfICYmIHN0YXRlLmRlZmF1bHRDYXNlXykge1xuICAgICAgLy8gUmFuIHRocm91Z2ggYWxsIGNhc2VzLCBubyBtYXRjaC4gIEp1bXAgdG8gdGhlIGRlZmF1bHQuXG4gICAgICBzdGF0ZS5tYXRjaGVkXyA9IHRydWU7XG4gICAgICBzdGF0ZS5pbmRleF8gPSBzdGF0ZS5kZWZhdWx0Q2FzZV87XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHN3aXRjaENhc2UpIHtcbiAgICAgIGlmICghc3RhdGUubWF0Y2hlZF8gJiYgIXN0YXRlLnRlc3RlZF8gJiYgc3dpdGNoQ2FzZVsndGVzdCddKSB7XG4gICAgICAgIHN0YXRlLnRlc3RlZF8gPSB0cnVlO1xuICAgICAgICBzdGFjay5wdXNoKHtub2RlOiBzd2l0Y2hDYXNlWyd0ZXN0J119KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLm1hdGNoZWRfIHx8IHRoaXMuY29tcChzdGF0ZS52YWx1ZSwgc3RhdGUuc3dpdGNoVmFsdWVfKSA9PSAwKSB7XG4gICAgICAgIHN0YXRlLm1hdGNoZWRfID0gdHJ1ZTtcbiAgICAgICAgdmFyIG4gPSBzdGF0ZS5uXyB8fCAwO1xuICAgICAgICBpZiAoc3dpdGNoQ2FzZVsnY29uc2VxdWVudCddW25dKSB7XG4gICAgICAgICAgc3RhdGUuaXNTd2l0Y2ggPSB0cnVlO1xuICAgICAgICAgIHN0YWNrLnB1c2goe25vZGU6IHN3aXRjaENhc2VbJ2NvbnNlcXVlbnQnXVtuXX0pO1xuICAgICAgICAgIHN0YXRlLm5fID0gbiArIDE7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBNb3ZlIG9uIHRvIG5leHQgY2FzZS5cbiAgICAgIHN0YXRlLnRlc3RlZF8gPSBmYWxzZTtcbiAgICAgIHN0YXRlLm5fID0gMDtcbiAgICAgIHN0YXRlLmluZGV4XyA9IGluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhY2sucG9wKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBUaGlzRXhwcmVzc2lvbiddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgc3RhY2sucG9wKCk7XG4gIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChzdGFja1tpXS50aGlzRXhwcmVzc2lvbikge1xuICAgICAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0udmFsdWUgPSBzdGFja1tpXS50aGlzRXhwcmVzc2lvbjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgdGhyb3cgRXJyb3IoJ05vIHRoaXMgZXhwcmVzc2lvbiBmb3VuZC4nKTtcbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcFRocm93U3RhdGVtZW50J10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVfKSB7XG4gICAgc3RhdGUuZG9uZV8gPSB0cnVlO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2FyZ3VtZW50J119KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRocm93RXhjZXB0aW9uKHN0YXRlLnZhbHVlKTtcbiAgfVxufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwVHJ5U3RhdGVtZW50J10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVCbG9ja18pIHtcbiAgICBzdGF0ZS5kb25lQmxvY2tfID0gdHJ1ZTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydibG9jayddfSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUudGhyb3dWYWx1ZSAmJiAhc3RhdGUuZG9uZUhhbmRsZXJfICYmIG5vZGVbJ2hhbmRsZXInXSkge1xuICAgIHN0YXRlLmRvbmVIYW5kbGVyXyA9IHRydWU7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnaGFuZGxlciddLCB0aHJvd1ZhbHVlOiBzdGF0ZS50aHJvd1ZhbHVlfSk7XG4gICAgc3RhdGUudGhyb3dWYWx1ZSA9IG51bGw7ICAvLyBUaGlzIGVycm9yIGhhcyBiZWVuIGhhbmRsZWQsIGRvbid0IHJldGhyb3cuXG4gIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVGaW5hbGl6ZXJfICYmIG5vZGVbJ2ZpbmFsaXplciddKSB7XG4gICAgc3RhdGUuZG9uZUZpbmFsaXplcl8gPSB0cnVlO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2ZpbmFsaXplciddfSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUudGhyb3dWYWx1ZSkge1xuICAgIC8vIFRoZXJlIHdhcyBubyBjYXRjaCBoYW5kbGVyLCBvciB0aGUgY2F0Y2gvZmluYWxseSB0aHJldyBhbiBlcnJvci5cbiAgICAvLyBUaHJvdyB0aGUgZXJyb3IgdXAgdG8gYSBoaWdoZXIgdHJ5LlxuICAgIHRoaXMuZXhlY3V0ZUV4Y2VwdGlvbihzdGF0ZS50aHJvd1ZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgfVxufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwVW5hcnlFeHByZXNzaW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVfKSB7XG4gICAgc3RhdGUuZG9uZV8gPSB0cnVlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7XG4gICAgICBub2RlOiBub2RlWydhcmd1bWVudCddLFxuICAgICAgY29tcG9uZW50czogbm9kZVsnb3BlcmF0b3InXSA9PSAnZGVsZXRlJ1xuICAgIH07XG4gICAgc3RhY2sucHVzaChuZXh0U3RhdGUpO1xuICAgIHJldHVybjtcbiAgfVxuICBzdGFjay5wb3AoKTtcbiAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gIGlmIChub2RlWydvcGVyYXRvciddID09ICctJykge1xuICAgIHZhbHVlID0gLXZhbHVlLnRvTnVtYmVyKCk7XG4gIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnKycpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnRvTnVtYmVyKCk7XG4gIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnIScpIHtcbiAgICB2YWx1ZSA9ICF2YWx1ZS50b0Jvb2xlYW4oKTtcbiAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICd+Jykge1xuICAgIHZhbHVlID0gfnZhbHVlLnRvTnVtYmVyKCk7XG4gIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAnZGVsZXRlJykge1xuICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHZhciBvYmogPSB2YWx1ZVswXTtcbiAgICAgIHZhciBuYW1lID0gdmFsdWVbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLmdldFNjb3BlKCk7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IHRoaXMuZGVsZXRlUHJvcGVydHkob2JqLCBuYW1lKTtcbiAgICBpZiAoIXZhbHVlICYmIHRoaXMuZ2V0U2NvcGUoKS5zdHJpY3QpIHtcbiAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5UWVBFX0VSUk9SLCAnQ2Fubm90IGRlbGV0ZSBwcm9wZXJ0eSBcXCcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArICdcXCcgb2YgXFwnJyArIG9iaiArICdcXCcnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZVsnb3BlcmF0b3InXSA9PSAndHlwZW9mJykge1xuICAgIHZhbHVlID0gdmFsdWUudHlwZTtcbiAgfSBlbHNlIGlmIChub2RlWydvcGVyYXRvciddID09ICd2b2lkJykge1xuICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHRocm93IFN5bnRheEVycm9yKCdVbmtub3duIHVuYXJ5IG9wZXJhdG9yOiAnICsgbm9kZVsnb3BlcmF0b3InXSk7XG4gIH1cbiAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0udmFsdWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XG59O1xuXG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3N0ZXBVcGRhdGVFeHByZXNzaW9uJ10gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGF0ZVN0YWNrO1xuICB2YXIgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuICBpZiAoIXN0YXRlLmRvbmVMZWZ0Xykge1xuICAgIHN0YXRlLmRvbmVMZWZ0XyA9IHRydWU7XG4gICAgc3RhY2sucHVzaCh7bm9kZTogbm9kZVsnYXJndW1lbnQnXSwgY29tcG9uZW50czogdHJ1ZX0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN0YXRlLmxlZnRTaWRlXykge1xuICAgIHN0YXRlLmxlZnRTaWRlXyA9IHN0YXRlLnZhbHVlO1xuICB9XG4gIGlmIChzdGF0ZS5kb25lR2V0dGVyXykge1xuICAgIHN0YXRlLmxlZnRWYWx1ZV8gPSBzdGF0ZS52YWx1ZTtcbiAgfVxuICBpZiAoIXN0YXRlLmRvbmVHZXR0ZXJfKSB7XG4gICAgc3RhdGUubGVmdFZhbHVlXyA9IHRoaXMuZ2V0VmFsdWUoc3RhdGUubGVmdFNpZGVfKTtcbiAgICBpZiAoIXN0YXRlLmxlZnRWYWx1ZV8pIHtcbiAgICAgIHJldHVybjsgIC8vIFRocm93biBlcnJvciwgYnV0IHRyYXBwZWQuXG4gICAgfVxuICAgIGlmIChzdGF0ZS5sZWZ0VmFsdWVfLmlzR2V0dGVyKSB7XG4gICAgICAvLyBDbGVhciB0aGUgZ2V0dGVyIGZsYWcgYW5kIGNhbGwgdGhlIGdldHRlciBmdW5jdGlvbi5cbiAgICAgIHN0YXRlLmxlZnRWYWx1ZV8uaXNHZXR0ZXIgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmRvbmVHZXR0ZXJfID0gdHJ1ZTtcbiAgICAgIHZhciBmdW5jID0gLyoqIEB0eXBlIHshSW50ZXJwcmV0ZXIuT2JqZWN0fSAqLyAoc3RhdGUubGVmdFZhbHVlXyk7XG4gICAgICB0aGlzLnB1c2hHZXR0ZXJfKGZ1bmMsIHN0YXRlLmxlZnRTaWRlXyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChzdGF0ZS5kb25lU2V0dGVyXykge1xuICAgIC8vIFJldHVybiBpZiBzZXR0ZXIgZnVuY3Rpb24uXG4gICAgLy8gU2V0dGVyIG1ldGhvZCBvbiBwcm9wZXJ0eSBoYXMgY29tcGxldGVkLlxuICAgIC8vIElnbm9yZSBpdHMgcmV0dXJuIHZhbHVlLCBhbmQgdXNlIHRoZSBvcmlnaW5hbCBzZXQgdmFsdWUgaW5zdGVhZC5cbiAgICBzdGFjay5wb3AoKTtcbiAgICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHN0YXRlLmRvbmVTZXR0ZXJfO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbGVmdFZhbHVlID0gc3RhdGUubGVmdFZhbHVlXy50b051bWJlcigpO1xuICB2YXIgY2hhbmdlVmFsdWU7XG4gIGlmIChub2RlWydvcGVyYXRvciddID09ICcrKycpIHtcbiAgICBjaGFuZ2VWYWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKGxlZnRWYWx1ZSArIDEpO1xuICB9IGVsc2UgaWYgKG5vZGVbJ29wZXJhdG9yJ10gPT0gJy0tJykge1xuICAgIGNoYW5nZVZhbHVlID0gdGhpcy5jcmVhdGVQcmltaXRpdmUobGVmdFZhbHVlIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgU3ludGF4RXJyb3IoJ1Vua25vd24gdXBkYXRlIGV4cHJlc3Npb246ICcgKyBub2RlWydvcGVyYXRvciddKTtcbiAgfVxuICB2YXIgcmV0dXJuVmFsdWUgPSBub2RlWydwcmVmaXgnXSA/IGNoYW5nZVZhbHVlIDpcbiAgICAgIHRoaXMuY3JlYXRlUHJpbWl0aXZlKGxlZnRWYWx1ZSk7XG4gIHZhciBzZXR0ZXIgPSB0aGlzLnNldFZhbHVlKHN0YXRlLmxlZnRTaWRlXywgY2hhbmdlVmFsdWUpO1xuICBpZiAoc2V0dGVyKSB7XG4gICAgc3RhdGUuZG9uZVNldHRlcl8gPSByZXR1cm5WYWx1ZTtcbiAgICB0aGlzLnB1c2hTZXR0ZXJfKHNldHRlciwgc3RhdGUubGVmdFNpZGVfLCBjaGFuZ2VWYWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFJldHVybiBpZiBubyBzZXR0ZXIgZnVuY3Rpb24uXG4gIHN0YWNrLnBvcCgpO1xuICBzdGFja1tzdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHJldHVyblZhbHVlO1xufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwVmFyaWFibGVEZWNsYXJhdGlvbiddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIHZhciBub2RlID0gc3RhdGUubm9kZTtcbiAgdmFyIG4gPSBzdGF0ZS5uXyB8fCAwO1xuICB2YXIgZGVjbGFyYXRpb25Ob2RlID0gbm9kZVsnZGVjbGFyYXRpb25zJ11bbl07XG4gIGlmIChzdGF0ZS52YWx1ZSAmJiBkZWNsYXJhdGlvbk5vZGUpIHtcbiAgICAvLyBUaGlzIHNldFZhbHVlIGNhbGwgbmV2ZXIgbmVlZHMgdG8gZGVhbCB3aXRoIGNhbGxpbmcgYSBzZXR0ZXIgZnVuY3Rpb24uXG4gICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmNyZWF0ZVByaW1pdGl2ZShkZWNsYXJhdGlvbk5vZGVbJ2lkJ11bJ25hbWUnXSksXG4gICAgICAgICAgICAgICAgICBzdGF0ZS52YWx1ZSk7XG4gICAgc3RhdGUudmFsdWUgPSBudWxsO1xuICAgIGRlY2xhcmF0aW9uTm9kZSA9IG5vZGVbJ2RlY2xhcmF0aW9ucyddWysrbl07XG4gIH1cbiAgd2hpbGUgKGRlY2xhcmF0aW9uTm9kZSkge1xuICAgIC8vIFNraXAgYW55IGRlY2xhcmF0aW9ucyB0aGF0IGFyZSBub3QgaW5pdGlhbGl6ZWQuICBUaGV5IGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gZGVmaW5lZCBhcyB1bmRlZmluZWQgaW4gcG9wdWxhdGVTY29wZV8uXG4gICAgaWYgKGRlY2xhcmF0aW9uTm9kZVsnaW5pdCddKSB7XG4gICAgICBzdGF0ZS5uXyA9IG47XG4gICAgICBzdGFjay5wdXNoKHtub2RlOiBkZWNsYXJhdGlvbk5vZGVbJ2luaXQnXX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWNsYXJhdGlvbk5vZGUgPSBub2RlWydkZWNsYXJhdGlvbnMnXVsrK25dO1xuICB9XG4gIHN0YWNrLnBvcCgpO1xufTtcblxuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydzdGVwV2l0aFN0YXRlbWVudCddID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGFjayA9IHRoaXMuc3RhdGVTdGFjaztcbiAgdmFyIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIHZhciBub2RlID0gc3RhdGUubm9kZTtcbiAgaWYgKCFzdGF0ZS5kb25lT2JqZWN0Xykge1xuICAgIHN0YXRlLmRvbmVPYmplY3RfID0gdHJ1ZTtcbiAgICBzdGFjay5wdXNoKHtub2RlOiBub2RlWydvYmplY3QnXX0pO1xuICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lQm9keV8pIHtcbiAgICBzdGF0ZS5kb25lQm9keV8gPSB0cnVlO1xuICAgIHZhciBzY29wZSA9IHRoaXMuY3JlYXRlU3BlY2lhbFNjb3BlKHRoaXMuZ2V0U2NvcGUoKSwgc3RhdGUudmFsdWUpO1xuICAgIHN0YWNrLnB1c2goe25vZGU6IG5vZGVbJ2JvZHknXSwgc2NvcGU6IHNjb3BlfSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhY2sucG9wKCk7XG4gIH1cbn07XG5cbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcFdoaWxlU3RhdGVtZW50J10gPVxuICAgIEludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcERvV2hpbGVTdGF0ZW1lbnQnXTtcblxuLy8gUHJlc2VydmUgdG9wLWxldmVsIEFQSSBmdW5jdGlvbnMgZnJvbSBiZWluZyBwcnVuZWQvcmVuYW1lZCBieSBKUyBjb21waWxlcnMuXG4vLyBBZGQgb3RoZXJzIGFzIG5lZWRlZC5cbi8vIFRoZSBnbG9iYWwgb2JqZWN0ICgnd2luZG93JyBpbiBhIGJyb3dzZXIsICdnbG9iYWwnIGluIG5vZGUuanMpIGlzICd0aGlzJy5cbnRoaXNbJ0ludGVycHJldGVyJ10gPSBJbnRlcnByZXRlcjtcbkludGVycHJldGVyLnByb3RvdHlwZVsnc3RlcCddID0gSW50ZXJwcmV0ZXIucHJvdG90eXBlLnN0ZXA7XG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3J1biddID0gSW50ZXJwcmV0ZXIucHJvdG90eXBlLnJ1bjtcbkludGVycHJldGVyLnByb3RvdHlwZVsnYXBwZW5kQ29kZSddID0gSW50ZXJwcmV0ZXIucHJvdG90eXBlLmFwcGVuZENvZGU7XG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ2NyZWF0ZVByaW1pdGl2ZSddID1cbiAgICBJbnRlcnByZXRlci5wcm90b3R5cGUuY3JlYXRlUHJpbWl0aXZlO1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydjcmVhdGVBc3luY0Z1bmN0aW9uJ10gPVxuICAgIEludGVycHJldGVyLnByb3RvdHlwZS5jcmVhdGVBc3luY0Z1bmN0aW9uO1xuSW50ZXJwcmV0ZXIucHJvdG90eXBlWydjcmVhdGVOYXRpdmVGdW5jdGlvbiddID1cbiAgICBJbnRlcnByZXRlci5wcm90b3R5cGUuY3JlYXRlTmF0aXZlRnVuY3Rpb247XG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ2dldFByb3BlcnR5J10gPSBJbnRlcnByZXRlci5wcm90b3R5cGUuZ2V0UHJvcGVydHk7XG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3NldFByb3BlcnR5J10gPSBJbnRlcnByZXRlci5wcm90b3R5cGUuc2V0UHJvcGVydHk7XG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ25hdGl2ZVRvUHNldWRvJ10gPSBJbnRlcnByZXRlci5wcm90b3R5cGUubmF0aXZlVG9Qc2V1ZG87XG5JbnRlcnByZXRlci5wcm90b3R5cGVbJ3BzZXVkb1RvTmF0aXZlJ10gPSBJbnRlcnByZXRlci5wcm90b3R5cGUucHNldWRvVG9OYXRpdmU7XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkltbWVyc2l2ZVJlYWRlcj10KCk6ZS5JbW1lcnNpdmVSZWFkZXI9dCgpfSh3aW5kb3csKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciBvPXRbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHIpLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIHIubT1lLHIuYz10LHIuZD1mdW5jdGlvbihlLHQsbil7ci5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om59KX0sci5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHIudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9cihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSlyLmQobixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiBufSxyLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHIuZCh0LFwiYVwiLHQpLHR9LHIubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sci5wPVwiXCIscihyLnM9MSl9KFtmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Db29raWVQb2xpY3k9dm9pZCAwLGZ1bmN0aW9uKGUpe2VbZS5EaXNhYmxlPTBdPVwiRGlzYWJsZVwiLGVbZS5FbmFibGU9MV09XCJFbmFibGVcIn0odC5Db29raWVQb2xpY3l8fCh0LkNvb2tpZVBvbGljeT17fSkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Db29raWVQb2xpY3k9dC5sYXVuY2hBc3luYz10LmNsb3NlPXQucmVuZGVyQnV0dG9ucz12b2lkIDA7dmFyIG49cigyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInJlbmRlckJ1dHRvbnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5yZW5kZXJCdXR0b25zfX0pO3ZhciBvPXIoMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJjbG9zZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvLmNsb3NlfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwibGF1bmNoQXN5bmNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5sYXVuY2hBc3luY319KTt2YXIgaT1yKDApO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiQ29va2llUG9saWN5XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuQ29va2llUG9saWN5fX0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe3ZhciBlLHQ7d2luZG93Lmhhc093blByb3BlcnR5KFwiUHJvbWlzZVwiKXx8KGU9XCJodHRwczovL2NvbnRlbnRzdG9yYWdlLm9uZW5vdGUub2ZmaWNlLm5ldC9vbmVub3RlbHRpci9wZXJtYW5lbnQtc3RhdGljLXJlc291cmNlcy9wcm9taXNlLXBvbHlmaWxsLm1pbi5qc1wiLCh0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpLnNyYz1lLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodCkpLG4ucmVuZGVyQnV0dG9ucygpfSkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5yZW5kZXJCdXR0b25zPXZvaWQgMDt2YXIgbj17YWY6XCJJbmRvbXBlbGVuZGUgbGVzZXJcIixhbTpcIuGJoOGIheGLq+GLjSDhiLXhiJzhibUg4Y2I4Yyj4YiqIOGLleGLreGJsyDhiqDhipXhiaPhiaJcIixhcjpcItin2YTZgtin2LHYpiDYp9mE2LTYp9mF2YRcIixhczpcIuCmh+CmruCmvuCnsOCmmuCmv+CmrSDgp7Dgpr/gpqHgpr7gp7BcIixhejpcIsSwbW1lcnNpdiBPeHV5dWN1XCIsYmU6XCLQhtC80LXRgNGB0ZbRntC90Ysg0YfRi9GC0LDQu9GM0L3RltC6XCIsYmc6XCLQmtC+0L3RhtC10L3RgtGA0LjRgNCw0L0g0YfQtdGC0LXRhlwiLGJuOlwi4Kau4Kao4KeL4KaX4KeN4Kaw4Ka+4Ka54KeAIOCmquCmvuCmoOCmlVwiLFwiYm4tYmRcIjpcIuCmh+CmruCmvuCmsOCnjeCmuOCmv+CmrSDgpqrgpr7gpqDgppVcIixiczpcIktvbmNlbnRyaXJhbmkgxI1pdGFsYWNcIixjYTpcIkxlY3RvciBpbW1lcnNpdVwiLGNzOlwiQXNpc3Rpdm7DrSDEjXRlxI1rYVwiLFwiY3ktZ2JcIjpcIkRhcmxsZW55ZGQgWW1kcnd5dGhvbFwiLGRhOlwiRm9yZW5rbGV0IGzDpnNlclwiLGRlOlwiUGxhc3Rpc2NoZXIgUmVhZGVyXCIsZWw6XCLOoM+Bzr/Ot86zzrzOrc69zr8gz4DPgc+MzrPPgc6xzrzOvM6xIM6xzr3OrM6zzr3Pic+DzrfPglwiLGVuOlwiSW1tZXJzaXZlIFJlYWRlclwiLGVzOlwiTGVjdG9yIGlubWVyc2l2b1wiLGV0OlwiU8O8dmFsdWdlclwiLGV1OlwiSXJha3VyZ2FpbHUgbXVyZ2lsdHphaWxlYVwiLGZhOlwi2K7ZiNin2YbZhtiv2Ycg2YfZhdmH4oCM2KzYp9mG2KjZh1wiLGZpOlwiU3l2ZW50w6R2w6QgbHVrdW9oamVsbWFcIixmaWw6XCJJbW1lcnNpdmUgUmVhZGVyXCIsZnI6XCJMZWN0ZXVyIGltbWVyc2lmXCIsXCJnYS1pZVwiOlwiTMOpaXRoZW9pciB0dW10aGFjaFwiLGdkOlwiQW4gbGV1Z2hhZGFpciDDuXItbsOyc2FjaFwiLGdsOlwiTGVjdG9yIGF2YW56YWRvXCIsZ3U6XCLgqofgqq7gqrDgq43gqrjgqr/gqrUg4Kqw4KuA4Kqh4KqwXCIsaGE6XCJNYWkga2FyYXR1IE1haSBiYXJiYXphd2FcIixoZTpcIteq16bXldeS16og16fXqNeZ15DXlCDXnteV15PXqNeg15nXqlwiLGhpOlwi4KSH4KSu4KSw4KWN4KS44KS/4KS1IOCksOClgOCkoeCksFwiLGhyOlwiU3RvcGxqZW5pIMSNaXRhxI1cIixodTpcIk1vZGVybiBvbHZhc8OzXCIsaHk6XCLUvdW41oDVodW91bjWgtWm1b7VodWuINWo1bbVqdWl1oDWgdWr1blcIixpZDpcIlBlbWJhY2EgSW1lcnNpZlwiLGlnOlwi4buMZ+G7peG7pSBLZW56aXDhu6V0YXJhXCIsaXM6XCJBw7BnZW5naWxlZ3QgbGVzdHJhcnVtaHZlcmZpXCIsaXQ6XCJTdHJ1bWVudG8gZGkgbGV0dHVyYSBpbW1lcnNpdmFcIixqYTpcIuOCpOODnuODvOOCt+ODliDjg6rjg7zjg4Djg7xcIixrYTpcIuGDmOGDm+GDlOGDoOGDoeGDmOGDo+GDmuGDmCDhg6zhg5Dhg5vhg5nhg5jhg5fhg67hg5Xhg5Thg5rhg5hcIixrazpcItCY0LzQvNC10YDRgdC40LLRgtGWINC+0pvRgyDSm9Kx0YDQsNC70YtcIixrbTpcIuGegOGemOGfkuGemOGenOGet+GekuGeuOGeouGetuGek+GeluGejuGfjOGemuGfhuGem+GfgeGeheGek+GfheGem+GevuGeouGfgeGegOGfkuGemuGehOGfi1wiLGtuOlwi4LKH4LKu4LON4LKu4LKw4LON4LK44LK/4LK14LONIOCyk+CypuCzgeCyl1wiLGtvOlwi66qw7J6F7ZiVIOumrOuNlFwiLGtvazpcIuCkpOCkguCkpuCljeCksOClgCDgpLLgpL7gpJfgpL/gpLLgpY3gpLLgpYsg4KS14KS+4KSa4KSVXCIsXCJrdS1hcmFiXCI6XCLYrtmI247ZhtuV2LHbjCDZvtqVXCIsa3k6XCLQmtGD0YDRh9Cw0LPQsNC9INCe0LrRg9Cz0YPRh1wiLGxiOlwiSW1tZXJzaXZlIFJlYWRlclwiLGxvOlwi4LqV4Lq74Lqn4Lqt4LuI4Lqy4LqZ4Lqt4Lq04Lqh4LuA4Lqh4Lq14Lqq4Lq14LqaXCIsbHQ6XCLErnRyYXVraWFudGkgc2thaXR5dHV2xJdcIixsdjpcIlTEq3Jza2F0YSBsYXPEq3TEgWpzXCIsbWk6XCJQxatwxIFudWkgUnVtYWtpXCIsbWs6XCLQodC10L7Qv9GE0LDRgtC10L0g0YfQuNGC0LDRh1wiLG1sOlwi4LSH4LSu4LWN4LSu4LWH4LS04LWN4oCM4LS44LWA4LS14LWNIOC0seC1gOC0oeC1vFwiLG1uOlwi0JjQtNGN0LLRhdGC0Y3QuSDRg9C90YjQuNCz0YdcIixtcjpcIuCkh+CkruCksOCljeCkuOCkv+CkteCljeCkuSDgpLXgpL7gpJrgpJVcIixtczpcIlBlbWJhY2EgSW1lcnNpZlwiLG10OlwiUWFycmVqIEltbWVyc2l2XCIsbmU6XCLgpIfgpK7gpYfgpLDgpY3gpLjgpL/gpK0g4KSw4KS/4KSh4KSwXCIsbmw6XCJJbnNsdWl0ZW5kZSBsZXplclwiLFwibm4tbm9cIjpcIkVuZ2FzamVyYW5kZSBsZXNhclwiLG5vOlwiRW5nYXNqZXJlbmRlIGxlc2VyXCIsbnNvOlwiR28gQmFsYSBrYSBNb25nd2FsbyBvIE1va290b1wiLG9yOlwi4KyH4Kyu4Kyw4Ky44Ky/4Kyt4K2NIOCssOCsv+CsoeCssOCtjVwiLHBhOlwi4KiH4Kiu4Kiw4Ki44Ki/4Ki1IOCosOCpgOCooeCosFwiLFwicGEtYXJhYlwiOlwi2q/avtuM2LHZhiDYotmE2Kcg2YXYt9in2YTYuduBINqp2KfYsVwiLHBsOlwiQ3p5dG5payBpbW1lcnN5am55XCIscHJzOlwi2K7ZiNin2YbZhtiv2Ycg2YbZhdin24zYtFwiLHB0OlwiTGVpdHVyYSBBdmFuw6dhZGFcIixxdWM6XCJOaW0gdWNob2xhamlsIHNpaydpbmVsIHV3YWNoXCIscXV6OlwiV2Fua2lzcWEgw5Fhd2lxXCIscm86XCJJbW1lcnNpdmUgUmVhZGVyXCIscnU6XCLQmNC80LzQtdGA0YHQuNCy0L3QvtC1INGB0YDQtdC00YHRgtCy0L4g0YfRgtC10L3QuNGPXCIscnc6XCJJbnNha2F6YXNvbWFcIixzZDpcItin2YXYsdiz2Ygg2LHZitqK2LFcIixzaTpcIuC2nOC3kuC2veC3meC2sSDgt4Pgt5Tgt4Xgt5Qg4Laa4LeS4La64LeA4Lax4La6XCIsc2s6XCJJbWVyem7DoSDEjcOtdGHEjWthXCIsc2w6XCJQb3RvcG5pIGJyYWxuaWtcIixzcTpcIkxleHVlc2kga3JlZGjDq3NcIixcInNyLWN5cmwtYmFcIjpcItCa0L7QvdGG0LXQvdGC0YDQuNGB0LDQvdC4INGH0LjRgtCw0LvQsNGGXCIsXCJzci1jeXJsLXJzXCI6XCLQmtC+0L3RhtC10L3RgtGA0LjRgdCw0L3QuCDRh9C40YLQsNC70LDRhlwiLFwic3ItbGF0bi1yc1wiOlwiS29uY2VudHJpc2FuaSDEjWl0YWxhY1wiLHN2OlwiQXZhbmNlcmFkIGzDpHNhcmVcIixzdzpcIktpc29tYWppIGNoYSBLdXphbWlzaGFcIix0YTpcIuCuheCuseCvjeCuquCvgeCupOCuruCuvuCuqSDgrrDgr4Dgrp/grrDgr41cIix0ZTpcIuCwruCwguCwpOCxjeCwsOCwruCxgeCwl+CxjeCwp+CxgeCwsuCwqOCxgSDgsJrgsYfgsLjgsYcg4LCq4LCg4LCoIOCwuOCwvuCwp+CwqOCwglwiLFwidGctY3lybC10alwiOlwi0KXQvtC90LDQvdC00LDQuCDRhNCw0YDQvtCz0LjRgFwiLHRoOlwi4LmC4Lib4Lij4LmB4LiB4Lij4Lih4LiK4LmI4Lin4Lii4Lit4LmI4Liy4LiZXCIsdGk6XCLhiqPhipXhiaPhiaIg4YiV4YiJ4YuNIOGIteGIneGLkuGJtSDhjYjhjKPhiKpcIix0azpcIkdpxYhpxZ9sZcO9aW4gb2thw71qeVwiLHRuOlwiU2ViYWRpIHNhIEltZXNpZmVcIix0cjpcIlRhbSBFa3JhbiBPa3V5dWN1XCIsdHQ6XCLQp9C+0LvQs9Cw0L8g0LDQu9GD0YfRiyDRg9C60YMg0YfQsNGA0LDRgdGLXCIsXCJ1Zy1jblwiOlwi2obbhtmD2YXblSDYptmI2YLbh9i624fahlwiLHVrOlwi0JfQsNC90YPRgNC10L3QvdGPINCyINGC0LXQutGB0YJcIix1cjpcItin2YXYsdiz24zZiCDZhdi32KfZhNi524Eg2qnYp9ixXCIsdXo6XCJJbW1lcnNpdiBtdXRvbGFhIHZvc2l0YXNpXCIsdmk6XCJUcsOsbmggxJHhu41jIENow6JuIHRo4buxY1wiLHdvOlwiSsOgbmd1a2FheSBidSBSYWZldFwiLHhoOlwiSXNpZnVuZGkgRXNpa2h1bHVcIix5bzpcIsOMd8OyIEFsw6Ftw7l0w6FuXCIsemg6XCLmsonmtbjlvI/pmIXor7vlmahcIixcInpoLWhhbnRcIjpcIuayiOa1uOW8j+mWseiugOeoi+W8j1wiLHp1OlwiSXNpZnVuZGkgU29rdXppendpc2FcIn07ZnVuY3Rpb24gbyhlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO3Quc3JjPVwiaHR0cHM6Ly9jb250ZW50c3RvcmFnZS5vbmVub3RlLm9mZmljZS5uZXQvb25lbm90ZWx0aXIvcGVybWFuZW50LXN0YXRpYy1yZXNvdXJjZXMvaW1tZXJzaXZlLXJlYWRlci1pY29uLnN2Z1wiO3ZhciByPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1pY29uLXB4LXNpemVcIil8fFwiMjBcIjt0LnN0eWxlLmhlaWdodD10LnN0eWxlLndpZHRoPXIrXCJweFwiLHQuc3R5bGUudmVydGljYWxBbGlnbj1cIm1pZGRsZVwiLHQuc3R5bGUubWFyZ2luVG9wPVwiLTJweFwiO3ZhciBuPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1sb2NhbGVcIil8fFwiZW5cIjt0LmFsdD1zKG4pLGUuYXBwZW5kQ2hpbGQodCl9ZnVuY3Rpb24gaShlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTt0LnN0eWxlLm1hcmdpbkxlZnQ9XCI4cHhcIixlLmFwcGVuZENoaWxkKHQpfWZ1bmN0aW9uIGEoZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIikscj1lLmdldEF0dHJpYnV0ZShcImRhdGEtbG9jYWxlXCIpfHxcImVuXCI7dC50ZXh0Q29udGVudD1zKHIpLGUuYXBwZW5kQ2hpbGQodCl9ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZT1lLnRvTG93ZXJDYXNlKCksbltlXT9uW2VdOlwiemgtaGtcIj09PWV8fFwiemgtbW9cIj09PWV8fFwiemgtdHdcIj09PWU/bltcInpoLWhhbnRcIl06KGU9ZS5zdWJzdHJpbmcoMCxlLmxhc3RJbmRleE9mKFwiLVwiKSksbltlXT9uW2VdOihlPWUuc3Vic3RyaW5nKDAsZS5sYXN0SW5kZXhPZihcIi1cIikpLG5bZV0/bltlXTpuLmVuKSl9dC5yZW5kZXJCdXR0b25zPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTt0LmlubmVySFRNTD1cIi5pbW1lcnNpdmUtcmVhZGVyLWJ1dHRvbntjdXJzb3I6cG9pbnRlcjtkaXNwbGF5OmlubGluZS1ibG9jaztwYWRkaW5nOjVweDt9IC5pbW1lcnNpdmUtcmVhZGVyLWJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjA1KTtib3JkZXItcmFkaXVzOjJweFwiLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodCk7dmFyIHI9W10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW1tZXJzaXZlLXJlYWRlci1idXR0b25cIikpO2UmJmUuZWxlbWVudHMmJihyPWUuZWxlbWVudHMpO2Zvcih2YXIgbj0wLGQ9cjtuPGQubGVuZ3RoO24rKyl7dmFyIHU9ZFtuXTt1LnNldEF0dHJpYnV0ZShcInJvbGVcIixcImJ1dHRvblwiKTt2YXIgbD11LmdldEF0dHJpYnV0ZShcImRhdGEtbG9jYWxlXCIpfHxcImVuXCI7c3dpdGNoKHUuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLHMobCkpLHUuZ2V0QXR0cmlidXRlKFwiZGF0YS1idXR0b24tc3R5bGVcIil8fFwiaWNvblwiKXtjYXNlXCJpY29uXCI6byh1KTticmVhaztjYXNlXCJ0ZXh0XCI6YSh1KTticmVhaztjYXNlXCJpY29uQW5kVGV4dFwiOm8odSksaSh1KSxhKHUpfX19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4obj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQscj0xLG49YXJndW1lbnRzLmxlbmd0aDtyPG47cisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tyXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuaXNWYWxpZFN1YmRvbWFpbj10LmNsb3NlPXQubGF1bmNoQXN5bmM9dm9pZCAwO3ZhciBvPXIoMCksaT1yKDQpLGE9e307YVtpLkVycm9yQ29kZS5Ub2tlbkV4cGlyZWRdPVwiVGhlIGFjY2VzcyB0b2tlbiBzdXBwbGllZCBpcyBleHBpcmVkLlwiLGFbaS5FcnJvckNvZGUuVGhyb3R0bGVkXT1cIllvdSBoYXZlIGV4Y2VlZGVkIHlvdXIgcXVvdGEuXCIsYVtpLkVycm9yQ29kZS5TZXJ2ZXJFcnJvcl09XCJBbiBlcnJvciBvY2N1cnJlZCB3aGVuIGNhbGxpbmcgdGhlIHNlcnZlciB0byBwcm9jZXNzIHRoZSB0ZXh0LlwiLGFbaS5FcnJvckNvZGUuSW52YWxpZFN1YmRvbWFpbl09XCJUaGUgc3ViZG9tYWluIHN1cHBsaWVkIGlzIGludmFsaWQuXCI7dmFyIHM9ITE7ZnVuY3Rpb24gZChlKXtpZighZSlyZXR1cm4hMTtyZXR1cm4gbmV3IFJlZ0V4cChcIl4oW2EtekEtWjAtOV18W2EtekEtWjAtOV1bYS16QS1aMC05XFxcXC1dezAsNjF9W2EtekEtWjAtOV0pJFwiKS50ZXN0KGUpfXQubGF1bmNoQXN5bmM9ZnVuY3Rpb24oZSx0LHIsdSl7cmV0dXJuIHM/UHJvbWlzZS5yZWplY3QoXCJJbW1lcnNpdmUgUmVhZGVyIGlzIGFscmVhZHkgbGF1bmNoaW5nXCIpOm5ldyBQcm9taXNlKChmdW5jdGlvbihsLGMpe2lmKGUpaWYocilpZihyLmNodW5rcylpZihyLmNodW5rcy5sZW5ndGgpaWYoZCh0KXx8dSYmdS5jdXN0b21Eb21haW4pe3M9ITA7dmFyIG09RGF0ZS5ub3coKTsodT1uKHt1aVpJbmRleDoxZTMsdGltZW91dDoxNWUzLHVzZVdlYnZpZXc6ITEsYWxsb3dGdWxsc2NyZWVuOiEwLGhpZGVFeGl0QnV0dG9uOiExLGNvb2tpZVBvbGljeTpvLkNvb2tpZVBvbGljeS5EaXNhYmxlfSx1KSkudWlaSW5kZXgmJlwibnVtYmVyXCI9PXR5cGVvZiB1LnVpWkluZGV4fHwodS51aVpJbmRleD0xZTMpO3ZhciBmPW51bGwscD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHY9dS51c2VXZWJ2aWV3P2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ3ZWJ2aWV3XCIpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7di5hbGxvdz1cImF1dG9wbGF5XCI7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO2guaW5uZXJIVE1MPVwiYm9keXtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW47fVwiO3ZhciBiPWZ1bmN0aW9uKCl7ZiYmKHdpbmRvdy5jbGVhclRpbWVvdXQoZiksZj1udWxsKX0sZz1mdW5jdGlvbigpe2RvY3VtZW50LmJvZHkuY29udGFpbnMocCkmJmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocCksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsayksYigpLGgucGFyZW50Tm9kZSYmaC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpfSx5PWZ1bmN0aW9uKCl7aWYoZygpLHUub25FeGl0KXRyeXt1Lm9uRXhpdCgpfWNhdGNoKGUpe319O2coKTt2YXIgaz1mdW5jdGlvbihuKXtpZihuJiZuLmRhdGEmJlwic3RyaW5nXCI9PXR5cGVvZiBuLmRhdGEpaWYoXCJJbW1lcnNpdmVSZWFkZXItUmVhZHlGb3JDb250ZW50XCI9PT1uLmRhdGEpe2IoKTt2YXIgbz17Y29nU3Zjc0FjY2Vzc1Rva2VuOmUsY29nU3Zjc1N1YmRvbWFpbjp0LHJlcXVlc3Q6cixsYXVuY2hUb1Bvc3RNZXNzYWdlU2VudER1cmF0aW9uSW5NczpEYXRlLm5vdygpLW0sZGlzYWJsZUZpcnN0UnVuOnUuZGlzYWJsZUZpcnN0UnVuLHJlYWRBbG91ZE9wdGlvbnM6dS5yZWFkQWxvdWRPcHRpb25zLHRyYW5zbGF0aW9uT3B0aW9uczp1LnRyYW5zbGF0aW9uT3B0aW9ucyxkaXNwbGF5T3B0aW9uczp1LmRpc3BsYXlPcHRpb25zLHNlbmRQcmVmZXJlbmNlczohIXUub25QcmVmZXJlbmNlc0NoYW5nZWQscHJlZmVyZW5jZXM6dS5wcmVmZXJlbmNlc307di5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHttZXNzYWdlVHlwZTpcIkNvbnRlbnRcIixtZXNzYWdlVmFsdWU6b30pLFwiKlwiKX1lbHNlIGlmKFwiSW1tZXJzaXZlUmVhZGVyLUV4aXRcIj09PW4uZGF0YSl5KCk7ZWxzZSBpZihuLmRhdGEuc3RhcnRzV2l0aChcIkltbWVyc2l2ZVJlYWRlci1MYXVuY2hSZXNwb25zZTpcIikpe3ZhciBkPW51bGwsZj1udWxsLGg9bnVsbDt0cnl7aD1KU09OLnBhcnNlKG4uZGF0YS5zdWJzdHJpbmcoXCJJbW1lcnNpdmVSZWFkZXItTGF1bmNoUmVzcG9uc2U6XCIubGVuZ3RoKSl9Y2F0Y2goZSl7fWgmJmguc3VjY2Vzcz9kPXtjb250YWluZXI6cCxzZXNzaW9uSWQ6aC5zZXNzaW9uSWQsY2hhcmFjdGVyc1Byb2Nlc3NlZDpoLm1ldGVyZWRDb250ZW50U2l6ZX06Zj1oJiYhaC5zdWNjZXNzP3tjb2RlOmguZXJyb3JDb2RlLG1lc3NhZ2U6YVtoLmVycm9yQ29kZV0sc2Vzc2lvbklkOmguc2Vzc2lvbklkfTp7Y29kZTppLkVycm9yQ29kZS5TZXJ2ZXJFcnJvcixtZXNzYWdlOmFbaS5FcnJvckNvZGUuU2VydmVyRXJyb3JdfSxzPSExLGQ/KGIoKSxsKGQpKTpmJiYoeSgpLGMoZikpfWVsc2UgaWYobi5kYXRhLnN0YXJ0c1dpdGgoXCJJbW1lcnNpdmVSZWFkZXItUHJlZmVyZW5jZXM6XCIpJiZ1Lm9uUHJlZmVyZW5jZXNDaGFuZ2VkJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB1Lm9uUHJlZmVyZW5jZXNDaGFuZ2VkKXRyeXt1Lm9uUHJlZmVyZW5jZXNDaGFuZ2VkKG4uZGF0YS5zdWJzdHJpbmcoXCJJbW1lcnNpdmVSZWFkZXItUHJlZmVyZW5jZXM6XCIubGVuZ3RoKSl9Y2F0Y2goZSl7fX07d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsayksZj13aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtnKCkscz0hMSxjKHtjb2RlOmkuRXJyb3JDb2RlLlRpbWVvdXQsbWVzc2FnZTpcIlBhZ2UgZmFpbGVkIHRvIGxvYWQgYWZ0ZXIgdGltZW91dCAoXCIrdS50aW1lb3V0K1wiIG1zKVwifSl9KSx1LnRpbWVvdXQpLHUuYWxsb3dGdWxsc2NyZWVuJiZ2LnNldEF0dHJpYnV0ZShcImFsbG93ZnVsbHNjcmVlblwiLFwiXCIpLHYuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOiBzdGF0aWM7IHdpZHRoOiAxMDB2dzsgaGVpZ2h0OiAxMDB2aDsgbGVmdDogMDsgdG9wOiAwOyBib3JkZXItd2lkdGg6IDBcIix1LnVzZVdlYnZpZXcmJnYuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRzdG9wXCIsKGZ1bmN0aW9uKCl7di5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHttZXNzYWdlVHlwZTpcIldlYnZpZXdIb3N0XCJ9KSxcIipcIil9KSk7dmFyIHc9KHUuY3VzdG9tRG9tYWluP3UuY3VzdG9tRG9tYWluOlwiaHR0cHM6Ly9cIit0K1wiLmNvZ25pdGl2ZXNlcnZpY2VzLmF6dXJlLmNvbS9pbW1lcnNpdmVyZWFkZXIvd2ViYXBwL3YxLjAvXCIpK1wicmVhZGVyP2V4aXRDYWxsYmFjaz1JbW1lcnNpdmVSZWFkZXItRXhpdCZzZGtQbGF0Zm9ybT1qcyZzZGtWZXJzaW9uPTEuMS4wXCI7dys9XCImY29va2llUG9saWN5PVwiKyh1LmNvb2tpZVBvbGljeT09PW8uQ29va2llUG9saWN5LkVuYWJsZT9cImVuYWJsZVwiOlwiZGlzYWJsZVwiKSx1LmhpZGVFeGl0QnV0dG9uJiYodys9XCImaGlkZUV4aXRCdXR0b249dHJ1ZVwiKSx1LnVpTGFuZyYmKHcrPVwiJm9ta3Q9XCIrdS51aUxhbmcpLHYuc3JjPXcscC5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246IGZpeGVkOyB3aWR0aDogMTAwdnc7IGhlaWdodDogMTAwdmg7IGxlZnQ6IDA7IHRvcDogMDsgYm9yZGVyLXdpZHRoOiAwOyAtd2Via2l0LXBlcnNwZWN0aXZlOiAxcHg7IHotaW5kZXg6IFwiK3UudWlaSW5kZXgrXCI7IGJhY2tncm91bmQ6IHdoaXRlOyBvdmVyZmxvdzogaGlkZGVuXCIscC5hcHBlbmRDaGlsZCh2KSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHApLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoaCl9ZWxzZSBjKHtjb2RlOmkuRXJyb3JDb2RlLkludmFsaWRTdWJkb21haW4sbWVzc2FnZTphW2kuRXJyb3JDb2RlLkludmFsaWRTdWJkb21haW5dfSk7ZWxzZSBjKHtjb2RlOmkuRXJyb3JDb2RlLkJhZEFyZ3VtZW50LG1lc3NhZ2U6XCJDaHVua3MgbXVzdCBub3QgYmUgZW1wdHlcIn0pO2Vsc2UgYyh7Y29kZTppLkVycm9yQ29kZS5CYWRBcmd1bWVudCxtZXNzYWdlOlwiQ2h1bmtzIG11c3Qgbm90IGJlIG51bGxcIn0pO2Vsc2UgYyh7Y29kZTppLkVycm9yQ29kZS5CYWRBcmd1bWVudCxtZXNzYWdlOlwiQ29udGVudCBtdXN0IG5vdCBiZSBudWxsXCJ9KTtlbHNlIGMoe2NvZGU6aS5FcnJvckNvZGUuQmFkQXJndW1lbnQsbWVzc2FnZTpcIlRva2VuIG11c3Qgbm90IGJlIG51bGxcIn0pfSkpfSx0LmNsb3NlPWZ1bmN0aW9uKCl7d2luZG93LnBvc3RNZXNzYWdlKFwiSW1tZXJzaXZlUmVhZGVyLUV4aXRcIixcIipcIil9LHQuaXNWYWxpZFN1YmRvbWFpbj1kfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5FcnJvckNvZGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuQmFkQXJndW1lbnQ9XCJCYWRBcmd1bWVudFwiLGUuVGltZW91dD1cIlRpbWVvdXRcIixlLlRva2VuRXhwaXJlZD1cIlRva2VuRXhwaXJlZFwiLGUuVGhyb3R0bGVkPVwiVGhyb3R0bGVkXCIsZS5TZXJ2ZXJFcnJvcj1cIlNlcnZlckVycm9yXCIsZS5JbnZhbGlkU3ViZG9tYWluPVwiSW52YWxpZFN1YmRvbWFpblwifSh0LkVycm9yQ29kZXx8KHQuRXJyb3JDb2RlPXt9KSl9XSl9KSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHRMZWdhY3kgKGUpIHsgcmV0dXJuIGUgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmICdkZWZhdWx0JyBpbiBlID8gZSA6IHsgJ2RlZmF1bHQnOiBlIH07IH1cblxudmFyIFJlYWN0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShSZWFjdCk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFNrZWxldG9uVGhlbWVDb250ZXh0ID0gUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUNvbnRleHQoe30pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXkgKi9cbmNvbnN0IGRlZmF1bHRFbmFibGVBbmltYXRpb24gPSB0cnVlO1xuLy8gRm9yIHBlcmZvcm1hbmNlICYgY2xlYW5saW5lc3MsIGRvbid0IGFkZCBhbnkgaW5saW5lIHN0eWxlcyB1bmxlc3Mgd2UgaGF2ZSB0b1xuZnVuY3Rpb24gc3R5bGVPcHRpb25zVG9Dc3NQcm9wZXJ0aWVzKHsgYmFzZUNvbG9yLCBoaWdobGlnaHRDb2xvciwgd2lkdGgsIGhlaWdodCwgYm9yZGVyUmFkaXVzLCBjaXJjbGUsIGRpcmVjdGlvbiwgZHVyYXRpb24sIGVuYWJsZUFuaW1hdGlvbiA9IGRlZmF1bHRFbmFibGVBbmltYXRpb24sIH0pIHtcbiAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKVxuICAgICAgICBzdHlsZVsnLS1hbmltYXRpb24tZGlyZWN0aW9uJ10gPSAncmV2ZXJzZSc7XG4gICAgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ251bWJlcicpXG4gICAgICAgIHN0eWxlWyctLWFuaW1hdGlvbi1kdXJhdGlvbiddID0gYCR7ZHVyYXRpb259c2A7XG4gICAgaWYgKCFlbmFibGVBbmltYXRpb24pXG4gICAgICAgIHN0eWxlWyctLXBzZXVkby1lbGVtZW50LWRpc3BsYXknXSA9ICdub25lJztcbiAgICBpZiAodHlwZW9mIHdpZHRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInKVxuICAgICAgICBzdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgIGlmICh0eXBlb2YgaGVpZ2h0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaGVpZ2h0ID09PSAnbnVtYmVyJylcbiAgICAgICAgc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGlmICh0eXBlb2YgYm9yZGVyUmFkaXVzID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYm9yZGVyUmFkaXVzID09PSAnbnVtYmVyJylcbiAgICAgICAgc3R5bGUuYm9yZGVyUmFkaXVzID0gYm9yZGVyUmFkaXVzO1xuICAgIGlmIChjaXJjbGUpXG4gICAgICAgIHN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MCUnO1xuICAgIGlmICh0eXBlb2YgYmFzZUNvbG9yICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgc3R5bGVbJy0tYmFzZS1jb2xvciddID0gYmFzZUNvbG9yO1xuICAgIGlmICh0eXBlb2YgaGlnaGxpZ2h0Q29sb3IgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICBzdHlsZVsnLS1oaWdobGlnaHQtY29sb3InXSA9IGhpZ2hsaWdodENvbG9yO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIFNrZWxldG9uKHsgY291bnQgPSAxLCB3cmFwcGVyOiBXcmFwcGVyLCBjbGFzc05hbWU6IGN1c3RvbUNsYXNzTmFtZSwgY29udGFpbmVyQ2xhc3NOYW1lLCBjb250YWluZXJUZXN0SWQsIGNpcmNsZSA9IGZhbHNlLCBzdHlsZTogc3R5bGVQcm9wLCAuLi5vcmlnaW5hbFByb3BzU3R5bGVPcHRpb25zIH0pIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBjb250ZXh0U3R5bGVPcHRpb25zID0gUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnVzZUNvbnRleHQoU2tlbGV0b25UaGVtZUNvbnRleHQpO1xuICAgIGNvbnN0IHByb3BzU3R5bGVPcHRpb25zID0geyAuLi5vcmlnaW5hbFByb3BzU3R5bGVPcHRpb25zIH07XG4gICAgLy8gRE8gTk9UIG92ZXJ3cml0ZSBzdHlsZSBvcHRpb25zIGZyb20gdGhlIGNvbnRleHQgaWYgYHByb3BzU3R5bGVPcHRpb25zYFxuICAgIC8vIGhhcyBwcm9wZXJ0aWVzIGV4cGxpY2l0eSBzZXQgdG8gdW5kZWZpbmVkXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3JpZ2luYWxQcm9wc1N0eWxlT3B0aW9ucykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwcm9wc1N0eWxlT3B0aW9uc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByb3BzIHRha2UgcHJpb3JpdHkgb3ZlciBjb250ZXh0XG4gICAgY29uc3Qgc3R5bGVPcHRpb25zID0ge1xuICAgICAgICAuLi5jb250ZXh0U3R5bGVPcHRpb25zLFxuICAgICAgICAuLi5wcm9wc1N0eWxlT3B0aW9ucyxcbiAgICAgICAgY2lyY2xlLFxuICAgIH07XG4gICAgLy8gYHN0eWxlUHJvcGAgaGFzIHRoZSBsZWFzdCBwcmlvcml0eSBvdXQgb2YgZXZlcnl0aGluZ1xuICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAuLi5zdHlsZVByb3AsXG4gICAgICAgIC4uLnN0eWxlT3B0aW9uc1RvQ3NzUHJvcGVydGllcyhzdHlsZU9wdGlvbnMpLFxuICAgIH07XG4gICAgbGV0IGNsYXNzTmFtZSA9ICdyZWFjdC1sb2FkaW5nLXNrZWxldG9uJztcbiAgICBpZiAoY3VzdG9tQ2xhc3NOYW1lKVxuICAgICAgICBjbGFzc05hbWUgKz0gYCAke2N1c3RvbUNsYXNzTmFtZX1gO1xuICAgIGNvbnN0IGlubGluZSA9IChfYSA9IHN0eWxlT3B0aW9ucy5pbmxpbmUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgY29uc3QgY291bnRDZWlsID0gTWF0aC5jZWlsKGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50Q2VpbDsgaSsrKSB7XG4gICAgICAgIGxldCB0aGlzU3R5bGUgPSBzdHlsZTtcbiAgICAgICAgaWYgKGNvdW50Q2VpbCA+IGNvdW50ICYmIGkgPT09IGNvdW50Q2VpbCAtIDEpIHtcbiAgICAgICAgICAgIC8vIGNvdW50IGlzIG5vdCBhbiBpbnRlZ2VyIGFuZCB3ZSd2ZSByZWFjaGVkIHRoZSBsYXN0IGl0ZXJhdGlvbiBvZlxuICAgICAgICAgICAgLy8gdGhlIGxvb3AsIHNvIGFkZCBhIFwiZnJhY3Rpb25hbFwiIHNrZWxldG9uLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiBjb3VudCBpcyAzLjUsIHdlJ3ZlIGFscmVhZHkgYWRkZWQgMyBmdWxsXG4gICAgICAgICAgICAvLyBza2VsZXRvbnMsIHNvIG5vdyB3ZSBhZGQgb25lIG1vcmUgc2tlbGV0b24gdGhhdCBpcyAwLjUgdGltZXMgdGhlXG4gICAgICAgICAgICAvLyBvcmlnaW5hbCB3aWR0aC5cbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gKF9iID0gdGhpc1N0eWxlLndpZHRoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnMTAwJSc7IC8vIDEwMCUgaXMgdGhlIGRlZmF1bHQgc2luY2UgdGhhdCdzIHdoYXQncyBpbiB0aGUgQ1NTXG4gICAgICAgICAgICBjb25zdCBmcmFjdGlvbmFsUGFydCA9IGNvdW50ICUgMTtcbiAgICAgICAgICAgIGNvbnN0IGZyYWN0aW9uYWxXaWR0aCA9IHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICA/IHdpZHRoICogZnJhY3Rpb25hbFBhcnRcbiAgICAgICAgICAgICAgICA6IGBjYWxjKCR7d2lkdGh9ICogJHtmcmFjdGlvbmFsUGFydH0pYDtcbiAgICAgICAgICAgIHRoaXNTdHlsZSA9IHsgLi4udGhpc1N0eWxlLCB3aWR0aDogZnJhY3Rpb25hbFdpZHRoIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2tlbGV0b25TcGFuID0gKFJlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogdGhpc1N0eWxlLCBrZXk6IGkgfSwgXCJcXHUyMDBDXCIpKTtcbiAgICAgICAgaWYgKGlubGluZSkge1xuICAgICAgICAgICAgZWxlbWVudHMucHVzaChza2VsZXRvblNwYW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2l0aG91dCB0aGUgPGJyIC8+LCB0aGUgc2tlbGV0b24gbGluZXMgd2lsbCBhbGwgcnVuIHRvZ2V0aGVyIGlmXG4gICAgICAgICAgICAvLyBgd2lkdGhgIGlzIHNwZWNpZmllZFxuICAgICAgICAgICAgZWxlbWVudHMucHVzaChSZWFjdF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChSZWFjdF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRnJhZ21lbnQsIHsga2V5OiBpIH0sXG4gICAgICAgICAgICAgICAgc2tlbGV0b25TcGFuLFxuICAgICAgICAgICAgICAgIFJlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiYnJcIiwgbnVsbCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFJlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY29udGFpbmVyQ2xhc3NOYW1lLCBcImRhdGEtdGVzdGlkXCI6IGNvbnRhaW5lclRlc3RJZCwgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIiwgXCJhcmlhLWJ1c3lcIjogKF9jID0gc3R5bGVPcHRpb25zLmVuYWJsZUFuaW1hdGlvbikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZGVmYXVsdEVuYWJsZUFuaW1hdGlvbiB9LCBXcmFwcGVyXG4gICAgICAgID8gZWxlbWVudHMubWFwKChlbCwgaSkgPT4gUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoV3JhcHBlciwgeyBrZXk6IGkgfSwgZWwpKVxuICAgICAgICA6IGVsZW1lbnRzKSk7XG59XG5cbmZ1bmN0aW9uIFNrZWxldG9uVGhlbWUoeyBjaGlsZHJlbiwgLi4uc3R5bGVPcHRpb25zIH0pIHtcbiAgICByZXR1cm4gKFJlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFNrZWxldG9uVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBzdHlsZU9wdGlvbnMgfSwgY2hpbGRyZW4pKTtcbn1cblxuZXhwb3J0cy5Ta2VsZXRvblRoZW1lID0gU2tlbGV0b25UaGVtZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU2tlbGV0b247XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5mdW5jdGlvbiBwYWQyKG4pIHtcbiAgbiB8PSAwO1xuICByZXR1cm4gbiA8IDEwID8gYDAke259YCA6IGAke01hdGgubWluKG4sIDk5KX1gO1xufVxuXG5mdW5jdGlvbiBpbmxpbmVXb3JrZXIoKSB7XG4gIC8vIFRPRE8oS2FnYW1pKTogQ2FjaGUgY29tcGlsZWQgbW9kdWxlIGluIEluZGV4ZWREQj8gSXQgd29ya3MgaW4gRkZcbiAgLy8gYW5kIEVkZ2UsIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL21kbi93ZWJhc3NlbWJseS1leGFtcGxlcy9pc3N1ZXMvNFxuICAvLyBUaG91Z2ggZ3ppcHBlZCBXQVNNIG1vZHVsZSBjdXJyZW50bHkgd2VpZ2h0cyB+NzBrYiBzbyBpdCBzaG91bGQgYmVcbiAgLy8gcGVyZmVjdGx5IGNhY2hlZCBieSB0aGUgYnJvd3NlciBpdHNlbGYuXG4gIGZ1bmN0aW9uIGZldGNoQW5kSW5zdGFudGlhdGUodXJsLCBpbXBvcnRzKSB7XG4gICAgaWYgKCFXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZykgcmV0dXJuIGZldGNoQW5kSW5zdGFudGlhdGVGYWxsYmFjayh1cmwsIGltcG9ydHMpO1xuICAgIGNvbnN0IHJlcSA9IGZldGNoKHVybCwge2NyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJ9KTtcbiAgICByZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVxLCBpbXBvcnRzKS5jYXRjaChlcnIgPT4ge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0thZ2FtaS92bXNnL2lzc3Vlcy8xMVxuICAgICAgaWYgKGVyci5tZXNzYWdlICYmIGVyci5tZXNzYWdlLmluZGV4T2YoXCJBcmd1bWVudCAwIG11c3QgYmUgcHJvdmlkZWQgYW5kIG11c3QgYmUgYSBSZXNwb25zZVwiKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZldGNoQW5kSW5zdGFudGlhdGVGYWxsYmFjayh1cmwsIGltcG9ydHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2hBbmRJbnN0YW50aWF0ZUZhbGxiYWNrKHVybCwgaW1wb3J0cykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHJlcS5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICByZXEucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShyZXEucmVzcG9uc2UsIGltcG9ydHMpKTtcbiAgICAgIH07XG4gICAgICByZXEub25lcnJvciA9IHJlamVjdDtcbiAgICAgIHJlcS5zZW5kKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBNdXN0IGJlIGluIHN5bmMgd2l0aCBlbWNjIHNldHRpbmdzIVxuICBjb25zdCBUT1RBTF9TVEFDSyA9IDUgKiAxMDI0ICogMTAyNDtcbiAgY29uc3QgVE9UQUxfTUVNT1JZID0gMTYgKiAxMDI0ICogMTAyNDtcbiAgY29uc3QgV0FTTV9QQUdFX1NJWkUgPSA2NCAqIDEwMjQ7XG4gIGxldCBtZW1vcnkgPSBudWxsO1xuICBsZXQgZHluYW1pY1RvcCA9IFRPVEFMX1NUQUNLO1xuICAvLyBUT0RPKEthZ2FtaSk6IEdyb3cgbWVtb3J5P1xuICBmdW5jdGlvbiBzYnJrKGluY3JlbWVudCkge1xuICAgIGNvbnN0IG9sZER5bmFtaWNUb3AgPSBkeW5hbWljVG9wO1xuICAgIGR5bmFtaWNUb3AgKz0gaW5jcmVtZW50O1xuICAgIHJldHVybiBvbGREeW5hbWljVG9wO1xuICB9XG4gIC8vIFRPRE8oS2FnYW1pKTogTEFNRSBjYWxscyBleGl0KC0xKSBvbiBpbnRlcm5hbCBlcnJvci4gV291bGQgYmUgbmljZVxuICAvLyB0byBwcm92aWRlIGN1c3RvbSBERUJVR0YvRVJST1JGIGZvciBlYXNpZXIgZGVidWdnaW5nLiBDdXJyZW50eVxuICAvLyB0aG9zZSBmdW5jdGlvbnMgZG8gbm90aGluZy5cbiAgZnVuY3Rpb24gZXhpdChzdGF0dXMpIHtcbiAgICBwb3N0TWVzc2FnZSh7dHlwZTogXCJpbnRlcm5hbC1lcnJvclwiLCBkYXRhOiBzdGF0dXN9KTtcbiAgfVxuXG4gIGxldCBGRkkgPSBudWxsO1xuICBsZXQgcmVmID0gbnVsbDtcbiAgbGV0IHBjbV9sID0gbnVsbDtcbiAgZnVuY3Rpb24gdm1zZ19pbml0KHJhdGUpIHtcbiAgICByZWYgPSBGRkkudm1zZ19pbml0KHJhdGUpO1xuICAgIGlmICghcmVmKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgcGNtX2xfcmVmID0gbmV3IFVpbnQzMkFycmF5KG1lbW9yeS5idWZmZXIsIHJlZiwgMSlbMF07XG4gICAgcGNtX2wgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeS5idWZmZXIsIHBjbV9sX3JlZik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gdm1zZ19lbmNvZGUoZGF0YSkge1xuICAgIHBjbV9sLnNldChkYXRhKTtcbiAgICByZXR1cm4gRkZJLnZtc2dfZW5jb2RlKHJlZiwgZGF0YS5sZW5ndGgpID49IDA7XG4gIH1cbiAgZnVuY3Rpb24gdm1zZ19mbHVzaCgpIHtcbiAgICBpZiAoRkZJLnZtc2dfZmx1c2gocmVmKSA8IDApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG1wM19yZWYgPSBuZXcgVWludDMyQXJyYXkobWVtb3J5LmJ1ZmZlciwgcmVmICsgNCwgMSlbMF07XG4gICAgY29uc3Qgc2l6ZSA9IG5ldyBVaW50MzJBcnJheShtZW1vcnkuYnVmZmVyLCByZWYgKyA4LCAxKVswXTtcbiAgICBjb25zdCBtcDMgPSBuZXcgVWludDhBcnJheShtZW1vcnkuYnVmZmVyLCBtcDNfcmVmLCBzaXplKTtcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW21wM10sIHt0eXBlOiBcImF1ZGlvL21wZWdcIn0pO1xuICAgIEZGSS52bXNnX2ZyZWUocmVmKTtcbiAgICByZWYgPSBudWxsO1xuICAgIHBjbV9sID0gbnVsbDtcbiAgICByZXR1cm4gYmxvYjtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9icmlvbi9taW4td2FzbS1mYWlsXG4gIGZ1bmN0aW9uIHRlc3RTYWZhcmlXZWJBc3NlbWJseUJ1ZygpIHtcbiAgICBjb25zdCBiaW4gPSBuZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDAsMSw2LDEsOTYsMSwxMjcsMSwxMjcsMywyLDEsMCw1LDMsMSwwLDEsNyw4LDEsNCwxMTYsMTAxLDExNSwxMTYsMCwwLDEwLDE2LDEsMTQsMCwzMiwwLDY1LDEsNTQsMiwwLDMyLDAsNDAsMiwwLDExXSk7XG4gICAgY29uc3QgbW9kID0gbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShiaW4pO1xuICAgIGNvbnN0IGluc3QgPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UobW9kLCB7fSk7XG4gICAgLy8gdGVzdCBzdG9yaW5nIHRvIGFuZCBsb2FkaW5nIGZyb20gYSBub24temVybyBsb2NhdGlvbiB2aWEgYSBwYXJhbWV0ZXIuXG4gICAgLy8gU2FmYXJpIG9uIGlPUyAxMS4yLjUgcmV0dXJucyAwIHVuZXhwZWN0ZWRseSBhdCBub24temVybyBsb2NhdGlvbnNcbiAgICByZXR1cm4gKGluc3QuZXhwb3J0cy50ZXN0KDQpICE9PSAwKTtcbiAgfVxuXG4gIG9ubWVzc2FnZSA9IChlKSA9PiB7XG4gICAgY29uc3QgbXNnID0gZS5kYXRhO1xuICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICBjYXNlIFwiaW5pdFwiOlxuICAgICAgY29uc3QgeyB3YXNtVVJMLCBzaGltVVJMIH0gPSBtc2cuZGF0YTtcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoc2VsZi5XZWJBc3NlbWJseSAmJiAhdGVzdFNhZmFyaVdlYkFzc2VtYmx5QnVnKCkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZi5XZWJBc3NlbWJseTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuV2ViQXNzZW1ibHkpIHtcbiAgICAgICAgICBpbXBvcnRTY3JpcHRzKHNoaW1VUkwpO1xuICAgICAgICB9XG4gICAgICAgIG1lbW9yeSA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe1xuICAgICAgICAgIGluaXRpYWw6IFRPVEFMX01FTU9SWSAvIFdBU01fUEFHRV9TSVpFLFxuICAgICAgICAgIG1heGltdW06IFRPVEFMX01FTU9SWSAvIFdBU01fUEFHRV9TSVpFLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZW1vcnk6IG1lbW9yeSxcbiAgICAgICAgICBwb3c6IE1hdGgucG93LFxuICAgICAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICAgICAgcG93ZjogTWF0aC5wb3csXG4gICAgICAgICAgZXhwOiBNYXRoLmV4cCxcbiAgICAgICAgICBzcXJ0ZjogTWF0aC5zcXJ0LFxuICAgICAgICAgIGNvczogTWF0aC5jb3MsXG4gICAgICAgICAgbG9nOiBNYXRoLmxvZyxcbiAgICAgICAgICBzaW46IE1hdGguc2luLFxuICAgICAgICAgIHNicms6IHNicmssXG4gICAgICAgIH07XG4gICAgICB9KS50aGVuKFJ1bnRpbWUgPT4ge1xuICAgICAgICByZXR1cm4gZmV0Y2hBbmRJbnN0YW50aWF0ZSh3YXNtVVJMLCB7ZW52OiBSdW50aW1lfSlcbiAgICAgIH0pLnRoZW4od2FzbSA9PiB7XG4gICAgICAgIEZGSSA9IHdhc20uaW5zdGFuY2UuZXhwb3J0cztcbiAgICAgICAgcG9zdE1lc3NhZ2Uoe3R5cGU6IFwiaW5pdFwiLCBkYXRhOiBudWxsfSk7XG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBwb3N0TWVzc2FnZSh7dHlwZTogXCJpbml0LWVycm9yXCIsIGRhdGE6IGVyci50b1N0cmluZygpfSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgaWYgKCF2bXNnX2luaXQobXNnLmRhdGEpKSByZXR1cm4gcG9zdE1lc3NhZ2Uoe3R5cGU6IFwiZXJyb3JcIiwgZGF0YTogXCJ2bXNnX2luaXRcIn0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhdGFcIjpcbiAgICAgIGlmICghdm1zZ19lbmNvZGUobXNnLmRhdGEpKSByZXR1cm4gcG9zdE1lc3NhZ2Uoe3R5cGU6IFwiZXJyb3JcIiwgZGF0YTogXCJ2bXNnX2VuY29kZVwifSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgY29uc3QgYmxvYiA9IHZtc2dfZmx1c2goKTtcbiAgICAgIGlmICghYmxvYikgcmV0dXJuIHBvc3RNZXNzYWdlKHt0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwidm1zZ19mbHVzaFwifSk7XG4gICAgICBwb3N0TWVzc2FnZSh7dHlwZTogXCJzdG9wXCIsIGRhdGE6IGJsb2J9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFJlY29yZGVyIHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9LCBvblN0b3AgPSBudWxsKSB7XG4gICAgLy8gQ2FuJ3QgdXNlIHJlbGF0aXZlIFVSTCBpbiBibG9iIHdvcmtlciwgc2VlOlxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjU4MjY5NVxuICAgIHRoaXMud2FzbVVSTCA9IG5ldyBVUkwob3B0cy53YXNtVVJMIHx8IFwiL3N0YXRpYy9qcy92bXNnLndhc21cIiwgbG9jYXRpb24pLmhyZWY7XG4gICAgdGhpcy5zaGltVVJMID0gbmV3IFVSTChvcHRzLnNoaW1VUkwgfHwgXCIvc3RhdGljL2pzL3dhc20tcG9seWZpbGwuanNcIiwgbG9jYXRpb24pLmhyZWY7XG4gICAgdGhpcy5vblN0b3AgPSBvblN0b3A7XG4gICAgdGhpcy5waXRjaCA9IG9wdHMucGl0Y2ggfHwgMDtcbiAgICB0aGlzLnN0cmVhbSA9IG51bGw7XG4gICAgdGhpcy5hdWRpb0N0eCA9IG51bGw7XG4gICAgdGhpcy5nYWluTm9kZSA9IG51bGw7XG4gICAgdGhpcy5waXRjaEZYID0gbnVsbDtcbiAgICB0aGlzLmVuY05vZGUgPSBudWxsO1xuICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICB0aGlzLndvcmtlclVSTCA9IG51bGw7XG4gICAgdGhpcy5ibG9iID0gbnVsbDtcbiAgICB0aGlzLmJsb2JVUkwgPSBudWxsO1xuICAgIHRoaXMucmVzb2x2ZSA9IG51bGw7XG4gICAgdGhpcy5yZWplY3QgPSBudWxsO1xuICAgIE9iamVjdC5zZWFsKHRoaXMpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMuZW5jTm9kZSkgdGhpcy5lbmNOb2RlLmRpc2Nvbm5lY3QoKTtcbiAgICBpZiAodGhpcy5lbmNOb2RlKSB0aGlzLmVuY05vZGUub25hdWRpb3Byb2Nlc3MgPSBudWxsO1xuICAgIGlmICh0aGlzLnN0cmVhbSkgdGhpcy5zdG9wVHJhY2tzKCk7XG4gICAgaWYgKHRoaXMuYXVkaW9DdHgpIHRoaXMuYXVkaW9DdHguY2xvc2UoKTtcbiAgICBpZiAodGhpcy53b3JrZXIpIHRoaXMud29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgIGlmICh0aGlzLndvcmtlclVSTCkgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLndvcmtlclVSTCk7XG4gICAgaWYgKHRoaXMuYmxvYlVSTCkgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLmJsb2JVUkwpO1xuICB9XG5cbiAgLy8gV2l0aG91dCBwaXRjaCBzaGlmdDpcbiAgLy8gICBbc291cmNlTm9kZV0gLT4gW2dhaW5Ob2RlXSAtPiBbZW5jTm9kZV0gLT4gW2F1ZGlvQ3R4LmRlc3RpbmF0aW9uXVxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+IFt3b3JrZXJdXG4gIC8vIFdpdGggcGl0Y2ggc2hpZnQ6XG4gIC8vICAgW3NvdXJjZU5vZGVdIC0+IFtnYWluTm9kZV0gLT4gW3BpdGNoRlhdIC0+IFtlbmNOb2RlXSAtPiBbYXVkaW9DdHguZGVzdGluYXRpb25dXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPiBbd29ya2VyXVxuICBpbml0QXVkaW8oKSB7XG4gICAgY29uc3QgZ2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYVxuICAgICAgPyBmdW5jdGlvbihjb25zdHJhaW50cykge1xuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyk7XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oY29uc3RyYWludHMpIHtcbiAgICAgICAgICBjb25zdCBvbGRHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhIHx8IG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWE7XG4gICAgICAgICAgaWYgKCFvbGRHZXRVc2VyTWVkaWEpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJnZXRVc2VyTWVkaWEgaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgYnJvd3NlclwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIG9sZEdldFVzZXJNZWRpYS5jYWxsKG5hdmlnYXRvciwgY29uc3RyYWludHMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gZ2V0VXNlck1lZGlhKHthdWRpbzogdHJ1ZX0pLnRoZW4oKHN0cmVhbSkgPT4ge1xuICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICBjb25zdCBhdWRpb0N0eCA9IHRoaXMuYXVkaW9DdHggPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHRcbiAgICAgICAgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcblxuICAgICAgY29uc3Qgc291cmNlTm9kZSA9IGF1ZGlvQ3R4LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG4gICAgICBjb25zdCBnYWluTm9kZSA9IHRoaXMuZ2Fpbk5vZGUgPSAoYXVkaW9DdHguY3JlYXRlR2FpblxuICAgICAgICB8fCBhdWRpb0N0eC5jcmVhdGVHYWluTm9kZSkuY2FsbChhdWRpb0N0eCk7XG4gICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gMTtcbiAgICAgIHNvdXJjZU5vZGUuY29ubmVjdChnYWluTm9kZSk7XG5cbiAgICAgIGNvbnN0IHBpdGNoRlggPSB0aGlzLnBpdGNoRlggPSBuZXcgSnVuZ2xlKGF1ZGlvQ3R4KTtcbiAgICAgIHBpdGNoRlguc2V0UGl0Y2hPZmZzZXQodGhpcy5waXRjaCk7XG5cbiAgICAgIGNvbnN0IGVuY05vZGUgPSB0aGlzLmVuY05vZGUgPSAoYXVkaW9DdHguY3JlYXRlU2NyaXB0UHJvY2Vzc29yXG4gICAgICAgIHx8IGF1ZGlvQ3R4LmNyZWF0ZUphdmFTY3JpcHROb2RlKS5jYWxsKGF1ZGlvQ3R4LCAwLCAxLCAxKTtcbiAgICAgIHBpdGNoRlgub3V0cHV0LmNvbm5lY3QoZW5jTm9kZSk7XG5cbiAgICAgIGdhaW5Ob2RlLmNvbm5lY3QodGhpcy5waXRjaCA9PT0gMCA/IGVuY05vZGUgOiBwaXRjaEZYLmlucHV0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGluaXRXb3JrZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0cmVhbSkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBhdWRpbyBpbml0aWFsaXphdGlvblwiKTtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTkyMDEyOTJcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoXG4gICAgICBbXCIoXCIsIGlubGluZVdvcmtlci50b1N0cmluZygpLCBcIikoKVwiXSxcbiAgICAgIHt0eXBlOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIn0pO1xuICAgIGNvbnN0IHdvcmtlclVSTCA9IHRoaXMud29ya2VyVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBjb25zdCB3b3JrZXIgPSB0aGlzLndvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyVVJMKTtcbiAgICBjb25zdCB7IHdhc21VUkwsIHNoaW1VUkwgfSA9IHRoaXM7XG4gICAgd29ya2VyLnBvc3RNZXNzYWdlKHt0eXBlOiBcImluaXRcIiwgZGF0YToge3dhc21VUkwsIHNoaW1VUkx9fSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHdvcmtlci5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBtc2cgPSBlLmRhdGE7XG4gICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImluaXRcIjpcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbml0LWVycm9yXCI6XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihtc2cuZGF0YSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBUT0RPKEthZ2FtaSk6IEVycm9yIGhhbmRsaW5nLlxuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgY2FzZSBcImludGVybmFsLWVycm9yXCI6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIldvcmtlciBlcnJvcjpcIiwgbXNnLmRhdGEpO1xuICAgICAgICAgIGlmICh0aGlzLnJlamVjdCkgdGhpcy5yZWplY3QobXNnLmRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgICAgIHRoaXMuYmxvYiA9IG1zZy5kYXRhO1xuICAgICAgICAgIHRoaXMuYmxvYlVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobXNnLmRhdGEpO1xuICAgICAgICAgIGlmICh0aGlzLm9uU3RvcCkgdGhpcy5vblN0b3AoKTtcbiAgICAgICAgICBpZiAodGhpcy5yZXNvbHZlKSB0aGlzLnJlc29sdmUodGhpcy5ibG9iKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbml0QXVkaW8oKS50aGVuKHRoaXMuaW5pdFdvcmtlci5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHN0YXJ0UmVjb3JkaW5nKCkge1xuICAgIGlmICghdGhpcy5zdHJlYW0pIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgYXVkaW8gaW5pdGlhbGl6YXRpb25cIik7XG4gICAgaWYgKCF0aGlzLndvcmtlcikgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyB3b3JrZXIgaW5pdGlhbGl6YXRpb25cIik7XG4gICAgdGhpcy5ibG9iID0gbnVsbDtcbiAgICBpZiAodGhpcy5ibG9iVVJMKSBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMuYmxvYlVSTCk7XG4gICAgdGhpcy5ibG9iVVJMID0gbnVsbDtcbiAgICB0aGlzLnJlc29sdmUgPSBudWxsO1xuICAgIHRoaXMucmVqZWN0ID0gbnVsbDtcbiAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7dHlwZTogXCJzdGFydFwiLCBkYXRhOiB0aGlzLmF1ZGlvQ3R4LnNhbXBsZVJhdGV9KTtcbiAgICB0aGlzLmVuY05vZGUub25hdWRpb3Byb2Nlc3MgPSAoZSkgPT4ge1xuICAgICAgY29uc3Qgc2FtcGxlcyA9IGUuaW5wdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7XG4gICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7dHlwZTogXCJkYXRhXCIsIGRhdGE6IHNhbXBsZXN9KTtcbiAgICB9O1xuICAgIHRoaXMuZW5jTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9DdHguZGVzdGluYXRpb24pO1xuICB9XG5cbiAgc3RvcFJlY29yZGluZygpIHtcbiAgICBpZiAoIXRoaXMuc3RyZWFtKSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIGF1ZGlvIGluaXRpYWxpemF0aW9uXCIpO1xuICAgIGlmICghdGhpcy53b3JrZXIpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmcgd29ya2VyIGluaXRpYWxpemF0aW9uXCIpO1xuICAgIHRoaXMuZW5jTm9kZS5kaXNjb25uZWN0KCk7XG4gICAgdGhpcy5lbmNOb2RlLm9uYXVkaW9wcm9jZXNzID0gbnVsbDtcbiAgICB0aGlzLnN0b3BUcmFja3MoKTtcbiAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7dHlwZTogXCJzdG9wXCIsIGRhdGE6IG51bGx9KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuICB9XG5cbiAgc3RvcFRyYWNrcygpIHtcbiAgICAvLyBNaWdodCBiZSBtaXNzZWQgaW4gU2FmYXJpIGFuZCBvbGQgRkYvQ2hyb21lIHBlciBNRE4uXG4gICAgaWYgKHRoaXMuc3RyZWFtLmdldFRyYWNrcykge1xuICAgICAgLy8gSGlkZSBicm93c2VyJ3MgcmVjb3JkaW5nIGluZGljYXRvci5cbiAgICAgIHRoaXMuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB0cmFjay5zdG9wKCkpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRm9ybSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSwgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdGhpcy5yZWNvcmRlciA9IG5ldyBSZWNvcmRlcihvcHRzLCB0aGlzLm9uU3RvcC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgIHRoaXMuYmFja2Ryb3AgPSBudWxsO1xuICAgIHRoaXMucG9wdXAgPSBudWxsO1xuICAgIHRoaXMucmVjb3JkQnRuID0gbnVsbDtcbiAgICB0aGlzLnN0b3BCdG4gPSBudWxsO1xuICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgIHRoaXMuYXVkaW8gPSBudWxsO1xuICAgIHRoaXMuc2F2ZUJ0biA9IG51bGw7XG4gICAgdGhpcy50aWQgPSAwO1xuICAgIHRoaXMuc3RhcnQgPSAwO1xuICAgIE9iamVjdC5zZWFsKHRoaXMpO1xuXG4gICAgdGhpcy5yZWNvcmRlci5pbml0QXVkaW8oKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5kcmF3SW5pdCgpKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5yZWNvcmRlci5pbml0V29ya2VyKCkpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLmRyYXdBbGwoKSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB0aGlzLmRyYXdFcnJvcihlcnIpKTtcbiAgfVxuXG4gIGRyYXdJbml0KCkge1xuICAgIGlmICh0aGlzLmJhY2tkcm9wKSByZXR1cm47XG4gICAgY29uc3QgYmFja2Ryb3AgPSB0aGlzLmJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBiYWNrZHJvcC5jbGFzc05hbWUgPSBcInZtc2ctYmFja2Ryb3BcIjtcbiAgICBiYWNrZHJvcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jbG9zZShudWxsKSk7XG5cbiAgICBjb25zdCBwb3B1cCA9IHRoaXMucG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHBvcHVwLmNsYXNzTmFtZSA9IFwidm1zZy1wb3B1cFwiO1xuICAgIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKSk7XG5cbiAgICBjb25zdCBwcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcHJvZ3Jlc3MuY2xhc3NOYW1lID0gXCJ2bXNnLXByb2dyZXNzXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgIGNvbnN0IHByb2dyZXNzRG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHByb2dyZXNzRG90LmNsYXNzTmFtZSA9IFwidm1zZy1wcm9ncmVzcy1kb3RcIjtcbiAgICAgIHByb2dyZXNzLmFwcGVuZENoaWxkKHByb2dyZXNzRG90KTtcbiAgICB9XG4gICAgcG9wdXAuYXBwZW5kQ2hpbGQocHJvZ3Jlc3MpO1xuXG4gICAgYmFja2Ryb3AuYXBwZW5kQ2hpbGQocG9wdXApO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYmFja2Ryb3ApO1xuICB9XG5cbiAgZHJhd1RpbWUobXNlY3MpIHtcbiAgICBjb25zdCBzZWNzID0gTWF0aC5yb3VuZChtc2VjcyAvIDEwMDApO1xuICAgIHRoaXMudGltZXIudGV4dENvbnRlbnQgPSBwYWQyKHNlY3MgLyA2MCkgKyBcIjpcIiArIHBhZDIoc2VjcyAlIDYwKTtcbiAgfVxuXG4gIGRyYXdBbGwoKSB7XG4gICAgdGhpcy5kcmF3SW5pdCgpO1xuICAgIHRoaXMuY2xlYXJBbGwoKTtcblxuICAgIGNvbnN0IHJlY29yZFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcmVjb3JkUm93LmNsYXNzTmFtZSA9IFwidm1zZy1yZWNvcmQtcm93XCI7XG4gICAgdGhpcy5wb3B1cC5hcHBlbmRDaGlsZChyZWNvcmRSb3cpO1xuXG4gICAgY29uc3QgcmVjb3JkQnRuID0gdGhpcy5yZWNvcmRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHJlY29yZEJ0bi5jbGFzc05hbWUgPSBcInZtc2ctYnV0dG9uIHZtc2ctcmVjb3JkLWJ1dHRvblwiO1xuICAgIHJlY29yZEJ0bi50ZXh0Q29udGVudCA9IFwi4pePXCI7XG4gICAgcmVjb3JkQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLnN0YXJ0UmVjb3JkaW5nKCkpO1xuICAgIHJlY29yZFJvdy5hcHBlbmRDaGlsZChyZWNvcmRCdG4pO1xuXG4gICAgY29uc3Qgc3RvcEJ0biA9IHRoaXMuc3RvcEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgc3RvcEJ0bi5jbGFzc05hbWUgPSBcInZtc2ctYnV0dG9uIHZtc2ctc3RvcC1idXR0b25cIjtcbiAgICBzdG9wQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBzdG9wQnRuLnRleHRDb250ZW50ID0gXCLilqBcIjtcbiAgICBzdG9wQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLnN0b3BSZWNvcmRpbmcoKSk7XG4gICAgcmVjb3JkUm93LmFwcGVuZENoaWxkKHN0b3BCdG4pO1xuXG4gICAgY29uc3QgYXVkaW8gPSB0aGlzLmF1ZGlvID0gbmV3IEF1ZGlvKCk7XG4gICAgYXVkaW8uYXV0b3BsYXkgPSB0cnVlO1xuXG4gICAgY29uc3QgdGltZXIgPSB0aGlzLnRpbWVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdGltZXIuY2xhc3NOYW1lID0gXCJ2bXNnLXRpbWVyXCI7XG4gICAgdGltZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGlmIChhdWRpby5wYXVzZWQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjb3JkZXIuYmxvYlVSTCkge1xuICAgICAgICAgIGF1ZGlvLnNyYyA9IHRoaXMucmVjb3JkZXIuYmxvYlVSTDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXVkaW8ucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmRyYXdUaW1lKDApO1xuICAgIHJlY29yZFJvdy5hcHBlbmRDaGlsZCh0aW1lcik7XG5cbiAgICBjb25zdCBzYXZlQnRuID0gdGhpcy5zYXZlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBzYXZlQnRuLmNsYXNzTmFtZSA9IFwidm1zZy1idXR0b24gdm1zZy1zYXZlLWJ1dHRvblwiO1xuICAgIHNhdmVCdG4udGV4dENvbnRlbnQgPSBcIuKck1wiO1xuICAgIHNhdmVCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHNhdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuY2xvc2UodGhpcy5yZWNvcmRlci5ibG9iKSk7XG4gICAgcmVjb3JkUm93LmFwcGVuZENoaWxkKHNhdmVCdG4pO1xuXG4gICAgY29uc3QgZ2FpbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGdhaW5XcmFwcGVyLmNsYXNzTmFtZSA9IFwidm1zZy1zbGlkZXItd3JhcHBlciB2bXNnLWdhaW4tc2xpZGVyLXdyYXBwZXJcIjtcbiAgICBjb25zdCBnYWluU2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGdhaW5TbGlkZXIuY2xhc3NOYW1lID0gXCJ2bXNnLXNsaWRlciB2bXNnLWdhaW4tc2xpZGVyXCI7XG4gICAgZ2FpblNsaWRlci5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwicmFuZ2VcIik7XG4gICAgZ2FpblNsaWRlci5taW4gPSAwO1xuICAgIGdhaW5TbGlkZXIubWF4ID0gMjtcbiAgICBnYWluU2xpZGVyLnN0ZXAgPSAwLjI7XG4gICAgZ2FpblNsaWRlci52YWx1ZSA9IDE7XG4gICAgZ2FpblNsaWRlci5vbmNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGdhaW4gPSArZ2FpblNsaWRlci52YWx1ZTtcbiAgICAgIHRoaXMucmVjb3JkZXIuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IGdhaW47XG4gICAgfTtcbiAgICBnYWluV3JhcHBlci5hcHBlbmRDaGlsZChnYWluU2xpZGVyKTtcbiAgICB0aGlzLnBvcHVwLmFwcGVuZENoaWxkKGdhaW5XcmFwcGVyKTtcblxuICAgIGNvbnN0IHBpdGNoV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcGl0Y2hXcmFwcGVyLmNsYXNzTmFtZSA9IFwidm1zZy1zbGlkZXItd3JhcHBlciB2bXNnLXBpdGNoLXNsaWRlci13cmFwcGVyXCI7XG4gICAgY29uc3QgcGl0Y2hTbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgcGl0Y2hTbGlkZXIuY2xhc3NOYW1lID0gXCJ2bXNnLXNsaWRlciB2bXNnLXBpdGNoLXNsaWRlclwiO1xuICAgIHBpdGNoU2xpZGVyLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyYW5nZVwiKTtcbiAgICBwaXRjaFNsaWRlci5taW4gPSAtMTtcbiAgICBwaXRjaFNsaWRlci5tYXggPSAxO1xuICAgIHBpdGNoU2xpZGVyLnN0ZXAgPSAwLjI7XG4gICAgcGl0Y2hTbGlkZXIudmFsdWUgPSB0aGlzLnJlY29yZGVyLnBpdGNoO1xuICAgIHBpdGNoU2xpZGVyLm9uY2hhbmdlID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGl0Y2ggPSArcGl0Y2hTbGlkZXIudmFsdWU7XG4gICAgICB0aGlzLnJlY29yZGVyLnBpdGNoRlguc2V0UGl0Y2hPZmZzZXQocGl0Y2gpO1xuICAgICAgdGhpcy5yZWNvcmRlci5nYWluTm9kZS5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLnJlY29yZGVyLmdhaW5Ob2RlLmNvbm5lY3QoXG4gICAgICAgIHBpdGNoID09PSAwID8gdGhpcy5yZWNvcmRlci5lbmNOb2RlIDogdGhpcy5yZWNvcmRlci5waXRjaEZYLmlucHV0XG4gICAgICApO1xuICAgIH07XG4gICAgcGl0Y2hXcmFwcGVyLmFwcGVuZENoaWxkKHBpdGNoU2xpZGVyKTtcbiAgICB0aGlzLnBvcHVwLmFwcGVuZENoaWxkKHBpdGNoV3JhcHBlcik7XG4gIH1cblxuICBkcmF3RXJyb3IoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIHRoaXMuZHJhd0luaXQoKTtcbiAgICB0aGlzLmNsZWFyQWxsKCk7XG4gICAgY29uc3QgZXJyb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGVycm9yLmNsYXNzTmFtZSA9IFwidm1zZy1lcnJvclwiO1xuICAgIGVycm9yLnRleHRDb250ZW50ID0gZXJyLnRvU3RyaW5nKCk7XG4gICAgdGhpcy5wb3B1cC5hcHBlbmRDaGlsZChlcnJvcik7XG4gIH1cblxuICBjbGVhckFsbCgpIHtcbiAgICBpZiAoIXRoaXMucG9wdXApIHJldHVybjtcbiAgICB0aGlzLnBvcHVwLmlubmVySFRNTCA9IFwiXCI7XG4gIH1cblxuICBjbG9zZShibG9iKSB7XG4gICAgaWYgKHRoaXMuYXVkaW8pIHRoaXMuYXVkaW8ucGF1c2UoKTtcbiAgICBpZiAodGhpcy50aWQpIGNsZWFyVGltZW91dCh0aGlzLnRpZCk7XG4gICAgdGhpcy5yZWNvcmRlci5jbG9zZSgpO1xuICAgIHRoaXMuYmFja2Ryb3AucmVtb3ZlKCk7XG4gICAgaWYgKGJsb2IpIHtcbiAgICAgIHRoaXMucmVzb2x2ZShibG9iKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWplY3QobmV3IEVycm9yKFwiTm8gcmVjb3JkIG1hZGVcIikpO1xuICAgIH1cbiAgfVxuXG4gIG9uU3RvcCgpIHtcbiAgICB0aGlzLnJlY29yZEJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcbiAgICB0aGlzLnN0b3BCdG4uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIHRoaXMuc3RvcEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2F2ZUJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgc3RhcnRSZWNvcmRpbmcoKSB7XG4gICAgdGhpcy5hdWRpby5wYXVzZSgpO1xuICAgIHRoaXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMudXBkYXRlVGltZSgpO1xuICAgIHRoaXMucmVjb3JkQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB0aGlzLnN0b3BCdG4uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgdGhpcy5zYXZlQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlY29yZGVyLnN0YXJ0UmVjb3JkaW5nKCk7XG4gIH1cblxuICBzdG9wUmVjb3JkaW5nKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpZCk7XG4gICAgdGhpcy50aWQgPSAwO1xuICAgIHRoaXMuc3RvcEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgdGhpcy5yZWNvcmRlci5zdG9wUmVjb3JkaW5nKCk7XG4gIH1cblxuICB1cGRhdGVUaW1lKCkge1xuICAgIC8vIE5PVEUoS2FnYW1pKTogV2UgY2FuIGRvIHRoaXMgaW4gYG9uYXVkaW9wcm9jZXNzYCBidXQgdGhhdCB3b3VsZFxuICAgIC8vIHJ1biB0b28gb2Z0ZW4gYW5kIGNyZWF0ZSB1bm5lY2Vzc2FyeSBET00gdXBkYXRlcy5cbiAgICB0aGlzLmRyYXdUaW1lKERhdGUubm93KCkgLSB0aGlzLnN0YXJ0KTtcbiAgICB0aGlzLnRpZCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVUaW1lKCksIDMwMCk7XG4gIH1cbn1cblxubGV0IHNob3duID0gZmFsc2U7XG5cbi8qKlxuICogUmVjb3JkIGEgbmV3IHZvaWNlIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRzIC0gT3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRzLndhc21VUkwgLSBVUkwgb2YgdGhlIG1vZHVsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCIvc3RhdGljL2pzL3Ztc2cud2FzbVwiIGJ5IGRlZmF1bHQpXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdHMuc2hpbVVSTCAtIFVSTCBvZiB0aGUgV2ViQXNzZW1ibHkgcG9seWZpbGxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwiL3N0YXRpYy9qcy93YXNtLXBvbHlmaWxsLmpzXCIgYnkgZGVmYXVsdClcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0cy5waXRjaCAtIEluaXRpYWwgcGl0Y2ggc2hpZnQgKFstMSwgMV0sIDAgYnkgZGVmYXVsdClcbiAqIEByZXR1cm4ge1Byb21pc2UuPEJsb2I+fSBBIHByb21pc2UgdGhhdCBjb250YWlucyByZWNvcmRlZCBibG9iIHdoZW4gZnVsZmlsbGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoc2hvd24pIHRocm93IG5ldyBFcnJvcihcIlJlY29yZCBmb3JtIGlzIGFscmVhZHkgb3BlbmVkXCIpO1xuICAgIHNob3duID0gdHJ1ZTtcbiAgICBuZXcgRm9ybShvcHRzLCByZXNvbHZlLCByZWplY3QpO1xuICAvLyBVc2UgYC5maW5hbGx5YCBvbmNlIGl0J3MgYXZhaWxhYmxlIGluIFNhZmFyaSBhbmQgRWRnZS5cbiAgfSkudGhlbihyZXN1bHQgPT4ge1xuICAgIHNob3duID0gZmFsc2U7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgZXJyID0+IHtcbiAgICBzaG93biA9IGZhbHNlO1xuICAgIHRocm93IGVycjtcbiAgfSk7XG59XG5cbi8qKlxuICogQWxsIGF2YWlsYWJsZSBwdWJsaWMgaXRlbXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHsgUmVjb3JkZXIsIEZvcm0sIHJlY29yZCB9O1xuXG4vLyBCb3Jyb3dlZCBmcm9tIGFuZCBzbGlnaHRseSBtb2RpZmllZDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jd2lsc28vQXVkaW8tSW5wdXQtRWZmZWN0cy9ibG9iL21hc3Rlci9qcy9qdW5nbGUuanNcblxuLy8gQ29weXJpZ2h0IDIwMTIsIEdvb2dsZSBJbmMuXG4vLyBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy9cbi8vIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuLy8gbWV0OlxuLy9cbi8vICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4vLyBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyXG4vLyBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4vLyBkaXN0cmlidXRpb24uXG4vLyAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4vLyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuLy8gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4vLyBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4vLyBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1Jcbi8vIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4vLyBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbi8vIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1Rcbi8vIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuLy8gREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4vLyBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0Vcbi8vIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbmNvbnN0IGRlbGF5VGltZSA9IDAuMTAwO1xuY29uc3QgZmFkZVRpbWUgPSAwLjA1MDtcbmNvbnN0IGJ1ZmZlclRpbWUgPSAwLjEwMDtcblxuZnVuY3Rpb24gY3JlYXRlRmFkZUJ1ZmZlcihjb250ZXh0LCBhY3RpdmVUaW1lLCBmYWRlVGltZSkge1xuICB2YXIgbGVuZ3RoMSA9IGFjdGl2ZVRpbWUgKiBjb250ZXh0LnNhbXBsZVJhdGU7XG4gIHZhciBsZW5ndGgyID0gKGFjdGl2ZVRpbWUgLSAyKmZhZGVUaW1lKSAqIGNvbnRleHQuc2FtcGxlUmF0ZTtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aDEgKyBsZW5ndGgyO1xuICB2YXIgYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoMSwgbGVuZ3RoLCBjb250ZXh0LnNhbXBsZVJhdGUpO1xuICB2YXIgcCA9IGJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcblxuICB2YXIgZmFkZUxlbmd0aCA9IGZhZGVUaW1lICogY29udGV4dC5zYW1wbGVSYXRlO1xuXG4gIHZhciBmYWRlSW5kZXgxID0gZmFkZUxlbmd0aDtcbiAgdmFyIGZhZGVJbmRleDIgPSBsZW5ndGgxIC0gZmFkZUxlbmd0aDtcblxuICAvLyAxc3QgcGFydCBvZiBjeWNsZVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDE7ICsraSkge1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGlmIChpIDwgZmFkZUluZGV4MSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGguc3FydChpIC8gZmFkZUxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChpID49IGZhZGVJbmRleDIpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLnNxcnQoMSAtIChpIC0gZmFkZUluZGV4MikgLyBmYWRlTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IDE7XG4gICAgfVxuXG4gICAgcFtpXSA9IHZhbHVlO1xuICB9XG5cbiAgLy8gMm5kIHBhcnRcbiAgZm9yICh2YXIgaSA9IGxlbmd0aDE7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHBbaV0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVsYXlUaW1lQnVmZmVyKGNvbnRleHQsIGFjdGl2ZVRpbWUsIGZhZGVUaW1lLCBzaGlmdFVwKSB7XG4gIHZhciBsZW5ndGgxID0gYWN0aXZlVGltZSAqIGNvbnRleHQuc2FtcGxlUmF0ZTtcbiAgdmFyIGxlbmd0aDIgPSAoYWN0aXZlVGltZSAtIDIqZmFkZVRpbWUpICogY29udGV4dC5zYW1wbGVSYXRlO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoMSArIGxlbmd0aDI7XG4gIHZhciBidWZmZXIgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlcigxLCBsZW5ndGgsIGNvbnRleHQuc2FtcGxlUmF0ZSk7XG4gIHZhciBwID0gYnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuXG4gIC8vIDFzdCBwYXJ0IG9mIGN5Y2xlXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoMTsgKytpKSB7XG4gICAgaWYgKHNoaWZ0VXApXG4gICAgICAvLyBUaGlzIGxpbmUgZG9lcyBzaGlmdC11cCB0cmFuc3Bvc2VcbiAgICAgIHBbaV0gPSAobGVuZ3RoMS1pKS9sZW5ndGg7XG4gICAgZWxzZVxuICAgICAgLy8gVGhpcyBsaW5lIGRvZXMgc2hpZnQtZG93biB0cmFuc3Bvc2VcbiAgICAgIHBbaV0gPSBpIC8gbGVuZ3RoMTtcbiAgfVxuXG4gIC8vIDJuZCBwYXJ0XG4gIGZvciAodmFyIGkgPSBsZW5ndGgxOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBwW2ldID0gMDtcbiAgfVxuXG4gIHJldHVybiBidWZmZXI7XG59XG5cbmZ1bmN0aW9uIEp1bmdsZShjb250ZXh0KSB7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIC8vIENyZWF0ZSBub2RlcyBmb3IgdGhlIGlucHV0IGFuZCBvdXRwdXQgb2YgdGhpcyBcIm1vZHVsZVwiLlxuICB2YXIgaW5wdXQgPSAoY29udGV4dC5jcmVhdGVHYWluIHx8IGNvbnRleHQuY3JlYXRlR2Fpbk5vZGUpLmNhbGwoY29udGV4dCk7XG4gIHZhciBvdXRwdXQgPSAoY29udGV4dC5jcmVhdGVHYWluIHx8IGNvbnRleHQuY3JlYXRlR2Fpbk5vZGUpLmNhbGwoY29udGV4dCk7XG4gIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7XG5cbiAgLy8gRGVsYXkgbW9kdWxhdGlvbi5cbiAgdmFyIG1vZDEgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICB2YXIgbW9kMiA9IGNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gIHZhciBtb2QzID0gY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgdmFyIG1vZDQgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICB0aGlzLnNoaWZ0RG93bkJ1ZmZlciA9IGNyZWF0ZURlbGF5VGltZUJ1ZmZlcihjb250ZXh0LCBidWZmZXJUaW1lLCBmYWRlVGltZSwgZmFsc2UpO1xuICB0aGlzLnNoaWZ0VXBCdWZmZXIgPSBjcmVhdGVEZWxheVRpbWVCdWZmZXIoY29udGV4dCwgYnVmZmVyVGltZSwgZmFkZVRpbWUsIHRydWUpO1xuICBtb2QxLmJ1ZmZlciA9IHRoaXMuc2hpZnREb3duQnVmZmVyO1xuICBtb2QyLmJ1ZmZlciA9IHRoaXMuc2hpZnREb3duQnVmZmVyO1xuICBtb2QzLmJ1ZmZlciA9IHRoaXMuc2hpZnRVcEJ1ZmZlcjtcbiAgbW9kNC5idWZmZXIgPSB0aGlzLnNoaWZ0VXBCdWZmZXI7XG4gIG1vZDEubG9vcCA9IHRydWU7XG4gIG1vZDIubG9vcCA9IHRydWU7XG4gIG1vZDMubG9vcCA9IHRydWU7XG4gIG1vZDQubG9vcCA9IHRydWU7XG5cbiAgLy8gZm9yIHN3aXRjaGluZyBiZXR3ZWVuIG9jdC11cCBhbmQgb2N0LWRvd25cbiAgdmFyIG1vZDFHYWluID0gKGNvbnRleHQuY3JlYXRlR2FpbiB8fCBjb250ZXh0LmNyZWF0ZUdhaW5Ob2RlKS5jYWxsKGNvbnRleHQpO1xuICB2YXIgbW9kMkdhaW4gPSAoY29udGV4dC5jcmVhdGVHYWluIHx8IGNvbnRleHQuY3JlYXRlR2Fpbk5vZGUpLmNhbGwoY29udGV4dCk7XG4gIHZhciBtb2QzR2FpbiA9IChjb250ZXh0LmNyZWF0ZUdhaW4gfHwgY29udGV4dC5jcmVhdGVHYWluTm9kZSkuY2FsbChjb250ZXh0KTtcbiAgbW9kM0dhaW4uZ2Fpbi52YWx1ZSA9IDA7XG4gIHZhciBtb2Q0R2FpbiA9IChjb250ZXh0LmNyZWF0ZUdhaW4gfHwgY29udGV4dC5jcmVhdGVHYWluTm9kZSkuY2FsbChjb250ZXh0KTtcbiAgbW9kNEdhaW4uZ2Fpbi52YWx1ZSA9IDA7XG5cbiAgbW9kMS5jb25uZWN0KG1vZDFHYWluKTtcbiAgbW9kMi5jb25uZWN0KG1vZDJHYWluKTtcbiAgbW9kMy5jb25uZWN0KG1vZDNHYWluKTtcbiAgbW9kNC5jb25uZWN0KG1vZDRHYWluKTtcblxuICAvLyBEZWxheSBhbW91bnQgZm9yIGNoYW5naW5nIHBpdGNoLlxuICB2YXIgbW9kR2FpbjEgPSAoY29udGV4dC5jcmVhdGVHYWluIHx8IGNvbnRleHQuY3JlYXRlR2Fpbk5vZGUpLmNhbGwoY29udGV4dCk7XG4gIHZhciBtb2RHYWluMiA9IChjb250ZXh0LmNyZWF0ZUdhaW4gfHwgY29udGV4dC5jcmVhdGVHYWluTm9kZSkuY2FsbChjb250ZXh0KTtcblxuICB2YXIgZGVsYXkxID0gKGNvbnRleHQuY3JlYXRlRGVsYXkgfHwgY29udGV4dC5jcmVhdGVEZWxheU5vZGUpLmNhbGwoY29udGV4dCk7XG4gIHZhciBkZWxheTIgPSAoY29udGV4dC5jcmVhdGVEZWxheSB8fCBjb250ZXh0LmNyZWF0ZURlbGF5Tm9kZSkuY2FsbChjb250ZXh0KTtcbiAgbW9kMUdhaW4uY29ubmVjdChtb2RHYWluMSk7XG4gIG1vZDJHYWluLmNvbm5lY3QobW9kR2FpbjIpO1xuICBtb2QzR2Fpbi5jb25uZWN0KG1vZEdhaW4xKTtcbiAgbW9kNEdhaW4uY29ubmVjdChtb2RHYWluMik7XG4gIG1vZEdhaW4xLmNvbm5lY3QoZGVsYXkxLmRlbGF5VGltZSk7XG4gIG1vZEdhaW4yLmNvbm5lY3QoZGVsYXkyLmRlbGF5VGltZSk7XG5cbiAgLy8gQ3Jvc3NmYWRpbmcuXG4gIHZhciBmYWRlMSA9IGNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gIHZhciBmYWRlMiA9IGNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gIHZhciBmYWRlQnVmZmVyID0gY3JlYXRlRmFkZUJ1ZmZlcihjb250ZXh0LCBidWZmZXJUaW1lLCBmYWRlVGltZSk7XG4gIGZhZGUxLmJ1ZmZlciA9IGZhZGVCdWZmZXJcbiAgZmFkZTIuYnVmZmVyID0gZmFkZUJ1ZmZlcjtcbiAgZmFkZTEubG9vcCA9IHRydWU7XG4gIGZhZGUyLmxvb3AgPSB0cnVlO1xuXG4gIHZhciBtaXgxID0gKGNvbnRleHQuY3JlYXRlR2FpbiB8fCBjb250ZXh0LmNyZWF0ZUdhaW5Ob2RlKS5jYWxsKGNvbnRleHQpO1xuICB2YXIgbWl4MiA9IChjb250ZXh0LmNyZWF0ZUdhaW4gfHwgY29udGV4dC5jcmVhdGVHYWluTm9kZSkuY2FsbChjb250ZXh0KTtcbiAgbWl4MS5nYWluLnZhbHVlID0gMDtcbiAgbWl4Mi5nYWluLnZhbHVlID0gMDtcblxuICBmYWRlMS5jb25uZWN0KG1peDEuZ2Fpbik7XG4gIGZhZGUyLmNvbm5lY3QobWl4Mi5nYWluKTtcblxuICAvLyBDb25uZWN0IHByb2Nlc3NpbmcgZ3JhcGguXG4gIGlucHV0LmNvbm5lY3QoZGVsYXkxKTtcbiAgaW5wdXQuY29ubmVjdChkZWxheTIpO1xuICBkZWxheTEuY29ubmVjdChtaXgxKTtcbiAgZGVsYXkyLmNvbm5lY3QobWl4Mik7XG4gIG1peDEuY29ubmVjdChvdXRwdXQpO1xuICBtaXgyLmNvbm5lY3Qob3V0cHV0KTtcblxuICAvLyBTdGFydFxuICB2YXIgdCA9IGNvbnRleHQuY3VycmVudFRpbWUgKyAwLjA1MDtcbiAgdmFyIHQyID0gdCArIGJ1ZmZlclRpbWUgLSBmYWRlVGltZTtcbiAgbW9kMS5zdGFydCh0KTtcbiAgbW9kMi5zdGFydCh0Mik7XG4gIG1vZDMuc3RhcnQodCk7XG4gIG1vZDQuc3RhcnQodDIpO1xuICBmYWRlMS5zdGFydCh0KTtcbiAgZmFkZTIuc3RhcnQodDIpO1xuXG4gIHRoaXMubW9kMSA9IG1vZDE7XG4gIHRoaXMubW9kMiA9IG1vZDI7XG4gIHRoaXMubW9kMUdhaW4gPSBtb2QxR2FpbjtcbiAgdGhpcy5tb2QyR2FpbiA9IG1vZDJHYWluO1xuICB0aGlzLm1vZDNHYWluID0gbW9kM0dhaW47XG4gIHRoaXMubW9kNEdhaW4gPSBtb2Q0R2FpbjtcbiAgdGhpcy5tb2RHYWluMSA9IG1vZEdhaW4xO1xuICB0aGlzLm1vZEdhaW4yID0gbW9kR2FpbjI7XG4gIHRoaXMuZmFkZTEgPSBmYWRlMTtcbiAgdGhpcy5mYWRlMiA9IGZhZGUyO1xuICB0aGlzLm1peDEgPSBtaXgxO1xuICB0aGlzLm1peDIgPSBtaXgyO1xuICB0aGlzLmRlbGF5MSA9IGRlbGF5MTtcbiAgdGhpcy5kZWxheTIgPSBkZWxheTI7XG5cbiAgdGhpcy5zZXREZWxheShkZWxheVRpbWUpO1xufVxuXG5KdW5nbGUucHJvdG90eXBlLnNldERlbGF5ID0gZnVuY3Rpb24oZGVsYXlUaW1lKSB7XG4gIHRoaXMubW9kR2FpbjEuZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoMC41KmRlbGF5VGltZSwgMCwgMC4wMTApO1xuICB0aGlzLm1vZEdhaW4yLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKDAuNSpkZWxheVRpbWUsIDAsIDAuMDEwKTtcbn07XG5cbkp1bmdsZS5wcm90b3R5cGUuc2V0UGl0Y2hPZmZzZXQgPSBmdW5jdGlvbihtdWx0KSB7XG4gIGlmIChtdWx0PjApIHsgLy8gcGl0Y2ggdXBcbiAgICB0aGlzLm1vZDFHYWluLmdhaW4udmFsdWUgPSAwO1xuICAgIHRoaXMubW9kMkdhaW4uZ2Fpbi52YWx1ZSA9IDA7XG4gICAgdGhpcy5tb2QzR2Fpbi5nYWluLnZhbHVlID0gMTtcbiAgICB0aGlzLm1vZDRHYWluLmdhaW4udmFsdWUgPSAxO1xuICB9IGVsc2UgeyAvLyBwaXRjaCBkb3duXG4gICAgdGhpcy5tb2QxR2Fpbi5nYWluLnZhbHVlID0gMTtcbiAgICB0aGlzLm1vZDJHYWluLmdhaW4udmFsdWUgPSAxO1xuICAgIHRoaXMubW9kM0dhaW4uZ2Fpbi52YWx1ZSA9IDA7XG4gICAgdGhpcy5tb2Q0R2Fpbi5nYWluLnZhbHVlID0gMDtcbiAgfVxuICB0aGlzLnNldERlbGF5KGRlbGF5VGltZSpNYXRoLmFicyhtdWx0KSk7XG59O1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGtleWZyYW1lcyByZWFjdC1sb2FkaW5nLXNrZWxldG9uIHtcXG4gICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7XFxuICAgIH1cXG59XFxuXFxuLnJlYWN0LWxvYWRpbmctc2tlbGV0b24ge1xcbiAgICAtLWJhc2UtY29sb3I6ICNlYmViZWI7XFxuICAgIC0taGlnaGxpZ2h0LWNvbG9yOiAjZjVmNWY1O1xcbiAgICAtLWFuaW1hdGlvbi1kdXJhdGlvbjogMS41cztcXG4gICAgLS1hbmltYXRpb24tZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgIC0tcHNldWRvLWVsZW1lbnQtZGlzcGxheTogYmxvY2s7IC8qIEVuYWJsZSBhbmltYXRpb24gKi9cXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFzZS1jb2xvcik7XFxuXFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gICAgbGluZS1oZWlnaHQ6IDE7XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgei1pbmRleDogMTsgLyogTmVjZXNzYXJ5IGZvciBvdmVyZmxvdzogaGlkZGVuIHRvIHdvcmsgY29ycmVjdGx5IGluIFNhZmFyaSAqL1xcbn1cXG5cXG4ucmVhY3QtbG9hZGluZy1za2VsZXRvbjo6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnICc7XFxuICAgIGRpc3BsYXk6IHZhcigtLXBzZXVkby1lbGVtZW50LWRpc3BsYXkpO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxcbiAgICAgICAgOTBkZWcsXFxuICAgICAgICB2YXIoLS1iYXNlLWNvbG9yKSxcXG4gICAgICAgIHZhcigtLWhpZ2hsaWdodC1jb2xvciksXFxuICAgICAgICB2YXIoLS1iYXNlLWNvbG9yKVxcbiAgICApO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xcblxcbiAgICBhbmltYXRpb24tbmFtZTogcmVhY3QtbG9hZGluZy1za2VsZXRvbjtcXG4gICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tYW5pbWF0aW9uLWRpcmVjdGlvbik7XFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tYW5pbWF0aW9uLWR1cmF0aW9uKTtcXG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XFxuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1za2VsZXRvbi9kaXN0L3NrZWxldG9uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJO1FBQ0ksMkJBQTJCO0lBQy9CO0FBQ0o7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiw2QkFBNkI7SUFDN0IsK0JBQStCLEVBQUUscUJBQXFCOztJQUV0RCxtQ0FBbUM7O0lBRW5DLFdBQVc7SUFDWCxzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLGNBQWM7O0lBRWQsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixVQUFVLEVBQUUsK0RBQStEO0FBQy9FOztBQUVBO0lBQ0ksWUFBWTtJQUNaLHNDQUFzQztJQUN0QyxrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsWUFBWTtJQUNaLDRCQUE0QjtJQUM1Qjs7Ozs7S0FLQztJQUNELDRCQUE0Qjs7SUFFNUIsc0NBQXNDO0lBQ3RDLCtDQUErQztJQUMvQyw2Q0FBNkM7SUFDN0Msc0NBQXNDO0lBQ3RDLG1DQUFtQztBQUN2Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAa2V5ZnJhbWVzIHJlYWN0LWxvYWRpbmctc2tlbGV0b24ge1xcbiAgICAxMDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcXG4gICAgfVxcbn1cXG5cXG4ucmVhY3QtbG9hZGluZy1za2VsZXRvbiB7XFxuICAgIC0tYmFzZS1jb2xvcjogI2ViZWJlYjtcXG4gICAgLS1oaWdobGlnaHQtY29sb3I6ICNmNWY1ZjU7XFxuICAgIC0tYW5pbWF0aW9uLWR1cmF0aW9uOiAxLjVzO1xcbiAgICAtLWFuaW1hdGlvbi1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgLS1wc2V1ZG8tZWxlbWVudC1kaXNwbGF5OiBibG9jazsgLyogRW5hYmxlIGFuaW1hdGlvbiAqL1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYXNlLWNvbG9yKTtcXG5cXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBsaW5lLWhlaWdodDogMTtcXG5cXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB6LWluZGV4OiAxOyAvKiBOZWNlc3NhcnkgZm9yIG92ZXJmbG93OiBoaWRkZW4gdG8gd29yayBjb3JyZWN0bHkgaW4gU2FmYXJpICovXFxufVxcblxcbi5yZWFjdC1sb2FkaW5nLXNrZWxldG9uOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICcgJztcXG4gICAgZGlzcGxheTogdmFyKC0tcHNldWRvLWVsZW1lbnQtZGlzcGxheSk7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICA5MGRlZyxcXG4gICAgICAgIHZhcigtLWJhc2UtY29sb3IpLFxcbiAgICAgICAgdmFyKC0taGlnaGxpZ2h0LWNvbG9yKSxcXG4gICAgICAgIHZhcigtLWJhc2UtY29sb3IpXFxuICAgICk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuXFxuICAgIGFuaW1hdGlvbi1uYW1lOiByZWFjdC1sb2FkaW5nLXNrZWxldG9uO1xcbiAgICBhbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1hbmltYXRpb24tZGlyZWN0aW9uKTtcXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1hbmltYXRpb24tZHVyYXRpb24pO1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTsgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jb25mZXR0aSA9IGNvbmZldHRpO1xudmFyIGRlZmF1bHRDb2xvcnMgPSBbXCIjYTg2NGZkXCIsIFwiIzI5Y2RmZlwiLCBcIiM3OGZmNDRcIiwgXCIjZmY3MThkXCIsIFwiI2ZkZmY2YVwiXTtcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudHMocm9vdCwgZWxlbWVudENvdW50LCBjb2xvcnMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGVsZW1lbnRDb3VudCB9KS5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHZhciBjb2xvciA9IGNvbG9yc1tpbmRleCAlIGNvbG9ycy5sZW5ndGhdO1xuICAgIGVsZW1lbnQuc3R5bGVbXCJiYWNrZ3JvdW5kLWNvbG9yXCJdID0gY29sb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgc3BhY2UtaW5maXgtb3BzXG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgZWxlbWVudC5zdHlsZS53aWxsQ2hhbmdlID0gXCJ0cmFuc2Zvcm0sIG9wYWNpdHlcIjtcbiAgICBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIHJvb3QuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByYW5kb21QaHlzaWNzKGFuZ2xlLCBzcHJlYWQsIHN0YXJ0VmVsb2NpdHksIHJhbmRvbSkge1xuICB2YXIgcmFkQW5nbGUgPSBhbmdsZSAqIChNYXRoLlBJIC8gMTgwKTtcbiAgdmFyIHJhZFNwcmVhZCA9IHNwcmVhZCAqIChNYXRoLlBJIC8gMTgwKTtcbiAgcmV0dXJuIHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgejogMCxcbiAgICB3b2JibGU6IHJhbmRvbSgpICogMTAsXG4gICAgd29iYmxlU3BlZWQ6IDAuMSArIHJhbmRvbSgpICogMC4xLFxuICAgIHZlbG9jaXR5OiBzdGFydFZlbG9jaXR5ICogMC41ICsgcmFuZG9tKCkgKiBzdGFydFZlbG9jaXR5LFxuICAgIGFuZ2xlMkQ6IC1yYWRBbmdsZSArICgwLjUgKiByYWRTcHJlYWQgLSByYW5kb20oKSAqIHJhZFNwcmVhZCksXG4gICAgYW5nbGUzRDogLShNYXRoLlBJIC8gNCkgKyByYW5kb20oKSAqIChNYXRoLlBJIC8gMiksXG4gICAgdGlsdEFuZ2xlOiByYW5kb20oKSAqIE1hdGguUEksXG4gICAgdGlsdEFuZ2xlU3BlZWQ6IDAuMSArIHJhbmRvbSgpICogMC4zXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUZldHRpKGZldHRpLCBwcm9ncmVzcywgZHJhZ0ZyaWN0aW9uLCBkZWNheSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICBmZXR0aS5waHlzaWNzLnggKz0gTWF0aC5jb3MoZmV0dGkucGh5c2ljcy5hbmdsZTJEKSAqIGZldHRpLnBoeXNpY3MudmVsb2NpdHk7XG4gIGZldHRpLnBoeXNpY3MueSArPSBNYXRoLnNpbihmZXR0aS5waHlzaWNzLmFuZ2xlMkQpICogZmV0dGkucGh5c2ljcy52ZWxvY2l0eTtcbiAgZmV0dGkucGh5c2ljcy56ICs9IE1hdGguc2luKGZldHRpLnBoeXNpY3MuYW5nbGUzRCkgKiBmZXR0aS5waHlzaWNzLnZlbG9jaXR5O1xuICBmZXR0aS5waHlzaWNzLndvYmJsZSArPSBmZXR0aS5waHlzaWNzLndvYmJsZVNwZWVkO1xuICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gIGlmIChkZWNheSkge1xuICAgIGZldHRpLnBoeXNpY3MudmVsb2NpdHkgKj0gZGVjYXk7XG4gIH0gZWxzZSB7XG4gICAgZmV0dGkucGh5c2ljcy52ZWxvY2l0eSAtPSBmZXR0aS5waHlzaWNzLnZlbG9jaXR5ICogZHJhZ0ZyaWN0aW9uO1xuICB9XG4gIGZldHRpLnBoeXNpY3MueSArPSAzO1xuICBmZXR0aS5waHlzaWNzLnRpbHRBbmdsZSArPSBmZXR0aS5waHlzaWNzLnRpbHRBbmdsZVNwZWVkO1xuXG4gIHZhciBfZmV0dGkkcGh5c2ljcyA9IGZldHRpLnBoeXNpY3MsXG4gICAgICB4ID0gX2ZldHRpJHBoeXNpY3MueCxcbiAgICAgIHkgPSBfZmV0dGkkcGh5c2ljcy55LFxuICAgICAgeiA9IF9mZXR0aSRwaHlzaWNzLnosXG4gICAgICB0aWx0QW5nbGUgPSBfZmV0dGkkcGh5c2ljcy50aWx0QW5nbGUsXG4gICAgICB3b2JibGUgPSBfZmV0dGkkcGh5c2ljcy53b2JibGU7XG5cbiAgdmFyIHdvYmJsZVggPSB4ICsgMTAgKiBNYXRoLmNvcyh3b2JibGUpO1xuICB2YXIgd29iYmxlWSA9IHkgKyAxMCAqIE1hdGguc2luKHdvYmJsZSk7XG4gIHZhciB0cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgd29iYmxlWCArIFwicHgsIFwiICsgd29iYmxlWSArIFwicHgsIFwiICsgeiArIFwicHgpIHJvdGF0ZTNkKDEsIDEsIDEsIFwiICsgdGlsdEFuZ2xlICsgXCJyYWQpXCI7XG5cbiAgZmV0dGkuZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gIGZldHRpLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICBmZXR0aS5lbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAxIC0gcHJvZ3Jlc3M7XG5cbiAgLyogZXNsaW50LWVuYWJsZSAqL1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKHJvb3QsIGZldHRpcywgZHJhZ0ZyaWN0aW9uLCBkZWNheSwgZHVyYXRpb24sIHN0YWdnZXIpIHtcbiAgdmFyIHN0YXJ0VGltZSA9IHZvaWQgMDtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBmdW5jdGlvbiB1cGRhdGUodGltZSkge1xuICAgICAgaWYgKCFzdGFydFRpbWUpIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICB2YXIgZWxhcHNlZCA9IHRpbWUgLSBzdGFydFRpbWU7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBzdGFydFRpbWUgPT09IHRpbWUgPyAwIDogKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb247XG4gICAgICBmZXR0aXMuc2xpY2UoMCwgTWF0aC5jZWlsKGVsYXBzZWQgLyBzdGFnZ2VyKSkuZm9yRWFjaChmdW5jdGlvbiAoZmV0dGkpIHtcbiAgICAgICAgdXBkYXRlRmV0dGkoZmV0dGksIHByb2dyZXNzLCBkcmFnRnJpY3Rpb24sIGRlY2F5KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGltZSAtIHN0YXJ0VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0dGlzLmZvckVhY2goZnVuY3Rpb24gKGZldHRpKSB7XG4gICAgICAgICAgaWYgKGZldHRpLmVsZW1lbnQucGFyZW50Tm9kZSA9PT0gcm9vdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvb3QucmVtb3ZlQ2hpbGQoZmV0dGkuZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICB9KTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhbmdsZTogOTAsXG4gIHNwcmVhZDogNDUsXG4gIHN0YXJ0VmVsb2NpdHk6IDQ1LFxuICBlbGVtZW50Q291bnQ6IDUwLFxuICB3aWR0aDogXCIxMHB4XCIsXG4gIGhlaWdodDogXCIxMHB4XCIsXG4gIHBlcnNwZWN0aXZlOiBcIlwiLFxuICBjb2xvcnM6IGRlZmF1bHRDb2xvcnMsXG4gIGR1cmF0aW9uOiAzMDAwLFxuICBzdGFnZ2VyOiAwLFxuICBkcmFnRnJpY3Rpb246IDAuMSxcbiAgcmFuZG9tOiBNYXRoLnJhbmRvbVxufTtcblxuZnVuY3Rpb24gYmFja3dhcmRQYXRjaChjb25maWcpIHtcbiAgaWYgKCFjb25maWcuc3RhZ2dlciAmJiBjb25maWcuZGVsYXkpIHtcbiAgICBjb25maWcuc3RhZ2dlciA9IGNvbmZpZy5kZWxheTtcbiAgfVxuICByZXR1cm4gY29uZmlnO1xufVxuXG5mdW5jdGlvbiBjb25mZXR0aShyb290KSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBfT2JqZWN0JGFzc2lnbiA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBiYWNrd2FyZFBhdGNoKGNvbmZpZykpLFxuICAgICAgZWxlbWVudENvdW50ID0gX09iamVjdCRhc3NpZ24uZWxlbWVudENvdW50LFxuICAgICAgY29sb3JzID0gX09iamVjdCRhc3NpZ24uY29sb3JzLFxuICAgICAgd2lkdGggPSBfT2JqZWN0JGFzc2lnbi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9PYmplY3QkYXNzaWduLmhlaWdodCxcbiAgICAgIHBlcnNwZWN0aXZlID0gX09iamVjdCRhc3NpZ24ucGVyc3BlY3RpdmUsXG4gICAgICBhbmdsZSA9IF9PYmplY3QkYXNzaWduLmFuZ2xlLFxuICAgICAgc3ByZWFkID0gX09iamVjdCRhc3NpZ24uc3ByZWFkLFxuICAgICAgc3RhcnRWZWxvY2l0eSA9IF9PYmplY3QkYXNzaWduLnN0YXJ0VmVsb2NpdHksXG4gICAgICBkZWNheSA9IF9PYmplY3QkYXNzaWduLmRlY2F5LFxuICAgICAgZHJhZ0ZyaWN0aW9uID0gX09iamVjdCRhc3NpZ24uZHJhZ0ZyaWN0aW9uLFxuICAgICAgZHVyYXRpb24gPSBfT2JqZWN0JGFzc2lnbi5kdXJhdGlvbixcbiAgICAgIHN0YWdnZXIgPSBfT2JqZWN0JGFzc2lnbi5zdGFnZ2VyLFxuICAgICAgcmFuZG9tID0gX09iamVjdCRhc3NpZ24ucmFuZG9tO1xuXG4gIHJvb3Quc3R5bGUucGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZTtcbiAgdmFyIGVsZW1lbnRzID0gY3JlYXRlRWxlbWVudHMocm9vdCwgZWxlbWVudENvdW50LCBjb2xvcnMsIHdpZHRoLCBoZWlnaHQpO1xuICB2YXIgZmV0dGlzID0gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBwaHlzaWNzOiByYW5kb21QaHlzaWNzKGFuZ2xlLCBzcHJlYWQsIHN0YXJ0VmVsb2NpdHksIHJhbmRvbSlcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4gYW5pbWF0ZShyb290LCBmZXR0aXMsIGRyYWdGcmljdGlvbiwgZGVjYXksIGR1cmF0aW9uLCBzdGFnZ2VyKTtcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJ2YXIgV09SS0VSX0VOQUJMRUQgPSAhIShnbG9iYWwgPT09IGdsb2JhbC53aW5kb3cgJiYgZ2xvYmFsLlVSTCAmJiBnbG9iYWwuQmxvYiAmJiBnbG9iYWwuV29ya2VyKTtcblxuZnVuY3Rpb24gSW5saW5lV29ya2VyKGZ1bmMsIHNlbGYpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdmFyIGZ1bmN0aW9uQm9keTtcblxuICBzZWxmID0gc2VsZiB8fCB7fTtcblxuICBpZiAoV09SS0VSX0VOQUJMRUQpIHtcbiAgICBmdW5jdGlvbkJvZHkgPSBmdW5jLnRvU3RyaW5nKCkudHJpbSgpLm1hdGNoKFxuICAgICAgL15mdW5jdGlvblxccypcXHcqXFxzKlxcKFtcXHdcXHMsXSpcXClcXHMqeyhbXFx3XFxXXSo/KX0kL1xuICAgIClbMV07XG5cbiAgICByZXR1cm4gbmV3IGdsb2JhbC5Xb3JrZXIoZ2xvYmFsLlVSTC5jcmVhdGVPYmplY3RVUkwoXG4gICAgICBuZXcgZ2xvYmFsLkJsb2IoWyBmdW5jdGlvbkJvZHkgXSwgeyB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiIH0pXG4gICAgKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwb3N0TWVzc2FnZShkYXRhKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLm9ubWVzc2FnZSh7IGRhdGE6IGRhdGEgfSk7XG4gICAgfSwgMCk7XG4gIH1cblxuICB0aGlzLnNlbGYgPSBzZWxmO1xuICB0aGlzLnNlbGYucG9zdE1lc3NhZ2UgPSBwb3N0TWVzc2FnZTtcblxuICBzZXRUaW1lb3V0KGZ1bmMuYmluZChzZWxmLCBzZWxmKSwgMCk7XG59XG5cbklubGluZVdvcmtlci5wcm90b3R5cGUucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiBwb3N0TWVzc2FnZShkYXRhKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBfdGhpcy5zZWxmLm9ubWVzc2FnZSh7IGRhdGE6IGRhdGEgfSk7XG4gIH0sIDApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmxpbmVXb3JrZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIGNvbXBvbmVudHMgPSB7fTtcblxudmFyIHRyYWNrID0gZnVuY3Rpb24gdHJhY2soY29tcG9uZW50LCBtb2R1bGVzKSB7XG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcblxuICB2YXIgaWQgPSBtb2R1bGVzLmpvaW4oJy0nKTtcbiAgaWYgKGluZGV4KSBpZCArPSAnLScgKyBpbmRleDtcbiAgaWYgKGNvbXBvbmVudHNbaWRdKSB7XG4gICAgcmV0dXJuIHRyYWNrKGNvbXBvbmVudCwgbW9kdWxlcywgaW5kZXggKyAxKTtcbiAgfVxuICBjb21wb25lbnRzW2lkXSA9IGNvbXBvbmVudDtcbiAgcmV0dXJuIGlkO1xufTtcblxudmFyIGdldCQxID0gZnVuY3Rpb24gZ2V0JCQxKGlkKSB7XG4gIHJldHVybiBjb21wb25lbnRzW2lkXTtcbn07XG52YXIgZ2V0QWxsID0gZnVuY3Rpb24gZ2V0QWxsKCkge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbXBvbmVudHMpO1xufTtcbnZhciByZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBjb21wb25lbnRzID0ge307XG59O1xuXG52YXIgdHJhY2tlciA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgdHJhY2s6IHRyYWNrLFxuICBnZXQ6IGdldCQxLFxuICBnZXRBbGw6IGdldEFsbCxcbiAgcmVzZXQ6IHJlc2V0XG59KTtcblxudmFyIExPQURBQkxFX1NUQVRFID0gJ19fTE9BREFCTEVfU1RBVEVfXyc7XG52YXIgTE9BREFCTEUgPSAnQEBsb2FkYWJsZS1jb21wb25lbnRzL2xvYWRhYmxlJztcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbmZ1bmN0aW9uIGxvYWRTdGF0ZShyb290U3RhdGUpIHtcbiAgaWYgKCFyb290U3RhdGUuY2hpbGRyZW4pIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKHJvb3RTdGF0ZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IGdldCQxKHN0YXRlLmlkKTtcblxuICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnNvbGUud2FybignbG9hZGFibGUtY29tcG9uZW50IGNsaWVudCBtb2R1bGVzOicsIGdldEFsbCgpKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgY29uc29sZS53YXJuKCdsb2FkYWJsZS1jb21wb25lbnQgc2VydmVyIG1vZHVsZXM6Jywgd2luZG93W0xPQURBQkxFX1NUQVRFXSk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2xvYWRhYmxlLWNvbXBvbmVudHM6IG1vZHVsZSBcIicgKyBzdGF0ZS5pZCArICdcIiBpcyBub3QgZm91bmQsIGNsaWVudCBhbmQgc2VydmVyIG1vZHVsZXMgYXJlIG5vdCBzeW5jLiBZb3UgYXJlIHByb2JhYmx5IG5vdCB1c2luZyB0aGUgc2FtZSByZXNvbHZlciBvbiBzZXJ2ZXIgYW5kIGNsaWVudC4nKSk7XG4gICAgfVxuXG4gICAgdmFyIGdldExvYWRhYmxlID0gY29tcG9uZW50W0xPQURBQkxFXTtcblxuICAgIGlmICh0eXBlb2YgZ2V0TG9hZGFibGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2xvYWRhYmxlLWNvbXBvbmVudHM6IG1vZHVsZSBcIicgKyBzdGF0ZS5pZCArICdcIiBpcyBub3QgYSBsb2FkYWJsZSBjb21wb25lbnQsIHBsZWFzZSB2ZXJpZnkgeW91ciBTU1Igc2V0dXAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldExvYWRhYmxlKCkubG9hZCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGxvYWRTdGF0ZShzdGF0ZSk7XG4gICAgfSk7XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gbG9hZENvbXBvbmVudHMoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2xvYWRhYmxlLWNvbXBvbmVudHM6IGBsb2FkQ29tcG9uZW50c2AgbXVzdCAnICsgJ2JlIGNhbGxlZCBjbGllbnQtc2lkZTogYHdpbmRvd2AgaXMgdW5kZWZpbmVkJykpO1xuICB9XG5cbiAgdmFyIHN0YXRlID0gd2luZG93W0xPQURBQkxFX1NUQVRFXTtcbiAgaWYgKCFzdGF0ZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2xvYWRhYmxlLWNvbXBvbmVudHMgc3RhdGUgbm90IGZvdW5kLiAnICsgJ1lvdSBoYXZlIGEgcHJvYmxlbSBzZXJ2ZXItc2lkZS4gJyArICdQbGVhc2UgdmVyaWZ5IHRoYXQgeW91IGhhdmUgY2FsbGVkIGBsb2FkYWJsZVN0YXRlLmdldFNjcmlwdFRhZygpYCBzZXJ2ZXItc2lkZS4nKSk7XG4gIH1cblxuICByZXR1cm4gbG9hZFN0YXRlKHN0YXRlKTtcbn1cblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbmZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgY29tcG9uZW50QnlJZHMgPSBnZXRBbGwoKTtcbiAgdmFyIGNoaWxkcmVuID0gT2JqZWN0LmtleXMoY29tcG9uZW50QnlJZHMpLnJlZHVjZShmdW5jdGlvbiAoaWRzLCBpZCkge1xuICAgIHZhciBjb21wb25lbnQgPSBjb21wb25lbnRCeUlkc1tpZF07XG4gICAgaWYgKGNvbXBvbmVudC5sb2FkaW5nUHJvbWlzZSkgcmV0dXJuIFtdLmNvbmNhdChpZHMsIFt7IGlkOiBjb21wb25lbnQuY29tcG9uZW50SWQgfV0pO1xuICAgIHJldHVybiBpZHM7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltMT0FEQUJMRV9TVEFURV0gPSB7IGNoaWxkcmVuOiBjaGlsZHJlbiB9LCBfcmVmO1xufVxuXG52YXIgcmVzb2x2ZU1vZHVsZURlZmF1bHQgPSBmdW5jdGlvbiByZXNvbHZlTW9kdWxlRGVmYXVsdChtb2R1bGUpIHtcbiAgcmV0dXJuIG1vZHVsZS5kZWZhdWx0IHx8IG1vZHVsZTtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3NvcnQtY29tcCAqL1xuXG52YXIgRW1wdHlDb21wb25lbnQgPSBmdW5jdGlvbiBFbXB0eUNvbXBvbmVudCgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5mdW5jdGlvbiBsb2FkYWJsZShnZXRDb21wb25lbnQpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRFcnJvckNvbXBvbmVudCA9IF9yZWYuRXJyb3JDb21wb25lbnQsXG4gICAgICBFcnJvckNvbXBvbmVudCA9IF9yZWYkRXJyb3JDb21wb25lbnQgPT09IHVuZGVmaW5lZCA/IEVtcHR5Q29tcG9uZW50IDogX3JlZiRFcnJvckNvbXBvbmVudCxcbiAgICAgIF9yZWYkTG9hZGluZ0NvbXBvbmVudCA9IF9yZWYuTG9hZGluZ0NvbXBvbmVudCxcbiAgICAgIExvYWRpbmdDb21wb25lbnQgPSBfcmVmJExvYWRpbmdDb21wb25lbnQgPT09IHVuZGVmaW5lZCA/IEVtcHR5Q29tcG9uZW50IDogX3JlZiRMb2FkaW5nQ29tcG9uZW50LFxuICAgICAgX3JlbmRlciA9IF9yZWYucmVuZGVyLFxuICAgICAgbW9kdWxlcyA9IF9yZWYubW9kdWxlcyxcbiAgICAgIGFzeW5jTW9kZSA9IF9yZWYuYXN5bmNNb2RlO1xuXG4gIHZhciBMb2FkYWJsZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoTG9hZGFibGVDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgTG9hZGFibGVDb21wb25lbnQubG9hZCA9IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICBpZiAoIUxvYWRhYmxlQ29tcG9uZW50LmxvYWRpbmdQcm9taXNlKSB7XG4gICAgICAgIExvYWRhYmxlQ29tcG9uZW50LmxvYWRpbmdQcm9taXNlID0gZ2V0Q29tcG9uZW50KCkudGhlbihmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgICAgICAgdmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcztcblxuICAgICAgICAgIHZhciBDb21wb25lbnQgPSByZXNvbHZlTW9kdWxlRGVmYXVsdChtb2R1bGUpO1xuICAgICAgICAgIExvYWRhYmxlQ29tcG9uZW50LkNvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyhMb2FkYWJsZUNvbXBvbmVudCwgQ29tcG9uZW50LCAoX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0ge1xuICAgICAgICAgICAgQ29tcG9uZW50OiB0cnVlLFxuICAgICAgICAgICAgbG9hZGluZ1Byb21pc2U6IHRydWUsXG4gICAgICAgICAgICBsb2FkOiB0cnVlXG4gICAgICAgICAgfSwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzW0xPQURBQkxFXSA9IHRydWUsIF9ob2lzdE5vblJlYWN0U3RhdGljcy5jb21wb25lbnRJZCA9IHRydWUsIF9ob2lzdE5vblJlYWN0U3RhdGljcykpO1xuICAgICAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIExvYWRhYmxlQ29tcG9uZW50LmxvYWRpbmdQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBMb2FkYWJsZUNvbXBvbmVudC5sb2FkaW5nUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gTG9hZGFibGVDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRhYmxlQ29tcG9uZW50KTtcblxuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIENvbXBvbmVudDogTG9hZGFibGVDb21wb25lbnQuQ29tcG9uZW50LFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgbG9hZGluZzogIUxvYWRhYmxlQ29tcG9uZW50LkNvbXBvbmVudFxuICAgICAgfTtcbiAgICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmxvYWRpbmdQcm9taXNlID0gbnVsbDtcblxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnN0YXRlLkNvbXBvbmVudCA9PT0gbnVsbCAmJiBfdGhpcy5sb2FkaW5nUHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5sb2FkaW5nUHJvbWlzZSA9IExvYWRhYmxlQ29tcG9uZW50LmxvYWQoKS50aGVuKGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICAgICAgICBfdGhpcy5zYWZlU2V0U3RhdGUoeyBDb21wb25lbnQ6IENvbXBvbmVudCwgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIF90aGlzLnNhZmVTZXRTdGF0ZSh7IGVycm9yOiBlcnJvciwgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgTG9hZGFibGVDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgTG9hZGFibGVDb21wb25lbnQucHJvdG90eXBlLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShzdGF0ZSkge1xuICAgICAgaWYgKCF0aGlzLm1vdW50ZWQpIHJldHVybjtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH07XG5cbiAgICBMb2FkYWJsZUNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3N0YXRlLkNvbXBvbmVudCxcbiAgICAgICAgICBlcnJvciA9IF9zdGF0ZS5lcnJvcjtcblxuXG4gICAgICBpZiAodHlwZW9mIF9yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXIoX2V4dGVuZHMoe30sIHRoaXMuc3RhdGUsIHtcbiAgICAgICAgICBvd25Qcm9wczogdGhpcy5wcm9wc1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChDb21wb25lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB0aGlzLnByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVycm9yQ29tcG9uZW50LCB7IGVycm9yOiBlcnJvciwgb3duUHJvcHM6IHRoaXMucHJvcHMgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhc3luY01vZGUpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5sb2FkaW5nUHJvbWlzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0NvbXBvbmVudCwgdGhpcy5wcm9wcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBMb2FkYWJsZUNvbXBvbmVudDtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuXG4gIExvYWRhYmxlQ29tcG9uZW50LkNvbXBvbmVudCA9IG51bGw7XG4gIExvYWRhYmxlQ29tcG9uZW50LmxvYWRpbmdQcm9taXNlID0gbnVsbDtcblxuXG4gIExvYWRhYmxlQ29tcG9uZW50W0xPQURBQkxFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTG9hZGFibGVDb21wb25lbnQ7XG4gIH07XG5cbiAgaWYgKG1vZHVsZXMpIHtcbiAgICB2YXIgaWQgPSB0cmFjayhMb2FkYWJsZUNvbXBvbmVudCwgbW9kdWxlcyk7XG4gICAgTG9hZGFibGVDb21wb25lbnQuY29tcG9uZW50SWQgPSBpZDtcbiAgfVxuXG4gIHJldHVybiBMb2FkYWJsZUNvbXBvbmVudDtcbn1cblxudmFyIGNvbXBvbmVudFRyYWNrZXIgPSB0cmFja2VyO1xuXG5leHBvcnQgZGVmYXVsdCBsb2FkYWJsZTtcbmV4cG9ydCB7IGNvbXBvbmVudFRyYWNrZXIsIGxvYWRDb21wb25lbnRzLCBnZXRTdGF0ZSwgTE9BREFCTEUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWRhYmxlLWNvbXBvbmVudHMuZXMuanMubWFwXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgbm93ID0gcmVxdWlyZSgnLi9ub3cnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCJ2YXIgbW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpO1xuXG5mdW5jdGlvbiBRUjhiaXRCeXRlKGRhdGEpIHtcblx0dGhpcy5tb2RlID0gbW9kZS5NT0RFXzhCSVRfQllURTtcblx0dGhpcy5kYXRhID0gZGF0YTtcbn1cblxuUVI4Yml0Qnl0ZS5wcm90b3R5cGUgPSB7XG5cblx0Z2V0TGVuZ3RoIDogZnVuY3Rpb24oYnVmZmVyKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5sZW5ndGg7XG5cdH0sXG5cdFxuXHR3cml0ZSA6IGZ1bmN0aW9uKGJ1ZmZlcikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHQvLyBub3QgSklTIC4uLlxuXHRcdFx0YnVmZmVyLnB1dCh0aGlzLmRhdGEuY2hhckNvZGVBdChpKSwgOCk7XG5cdFx0fVxuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFFSOGJpdEJ5dGU7XG5cbiIsImZ1bmN0aW9uIFFSQml0QnVmZmVyKCkge1xuXHR0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSgpO1xuXHR0aGlzLmxlbmd0aCA9IDA7XG59XG5cblFSQml0QnVmZmVyLnByb3RvdHlwZSA9IHtcblxuXHRnZXQgOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KTtcblx0XHRyZXR1cm4gKCAodGhpcy5idWZmZXJbYnVmSW5kZXhdID4+PiAoNyAtIGluZGV4ICUgOCkgKSAmIDEpID09IDE7XG5cdH0sXG5cdFxuXHRwdXQgOiBmdW5jdGlvbihudW0sIGxlbmd0aCkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMucHV0Qml0KCAoIChudW0gPj4+IChsZW5ndGggLSBpIC0gMSkgKSAmIDEpID09IDEpO1xuXHRcdH1cblx0fSxcblx0XG5cdGdldExlbmd0aEluQml0cyA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmxlbmd0aDtcblx0fSxcblx0XG5cdHB1dEJpdCA6IGZ1bmN0aW9uKGJpdCkge1xuXHRcblx0XHR2YXIgYnVmSW5kZXggPSBNYXRoLmZsb29yKHRoaXMubGVuZ3RoIC8gOCk7XG5cdFx0aWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8PSBidWZJbmRleCkge1xuXHRcdFx0dGhpcy5idWZmZXIucHVzaCgwKTtcblx0XHR9XG5cdFxuXHRcdGlmIChiaXQpIHtcblx0XHRcdHRoaXMuYnVmZmVyW2J1ZkluZGV4XSB8PSAoMHg4MCA+Pj4gKHRoaXMubGVuZ3RoICUgOCkgKTtcblx0XHR9XG5cdFxuXHRcdHRoaXMubGVuZ3RoKys7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVJCaXRCdWZmZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcblx0TCA6IDEsXG5cdE0gOiAwLFxuXHRRIDogMyxcblx0SCA6IDJcbn07XG5cbiIsInZhciBtYXRoID0gcmVxdWlyZSgnLi9tYXRoJyk7XG5cbmZ1bmN0aW9uIFFSUG9seW5vbWlhbChudW0sIHNoaWZ0KSB7XG5cblx0aWYgKG51bS5sZW5ndGggPT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKG51bS5sZW5ndGggKyBcIi9cIiArIHNoaWZ0KTtcblx0fVxuXG5cdHZhciBvZmZzZXQgPSAwO1xuXG5cdHdoaWxlIChvZmZzZXQgPCBudW0ubGVuZ3RoICYmIG51bVtvZmZzZXRdID09IDApIHtcblx0XHRvZmZzZXQrKztcblx0fVxuXG5cdHRoaXMubnVtID0gbmV3IEFycmF5KG51bS5sZW5ndGggLSBvZmZzZXQgKyBzaGlmdCk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aCAtIG9mZnNldDsgaSsrKSB7XG5cdFx0dGhpcy5udW1baV0gPSBudW1baSArIG9mZnNldF07XG5cdH1cbn1cblxuUVJQb2x5bm9taWFsLnByb3RvdHlwZSA9IHtcblxuXHRnZXQgOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHJldHVybiB0aGlzLm51bVtpbmRleF07XG5cdH0sXG5cdFxuXHRnZXRMZW5ndGggOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5udW0ubGVuZ3RoO1xuXHR9LFxuXHRcblx0bXVsdGlwbHkgOiBmdW5jdGlvbihlKSB7XG5cdFxuXHRcdHZhciBudW0gPSBuZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSArIGUuZ2V0TGVuZ3RoKCkgLSAxKTtcblx0XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdldExlbmd0aCgpOyBpKyspIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZS5nZXRMZW5ndGgoKTsgaisrKSB7XG5cdFx0XHRcdG51bVtpICsgal0gXj0gbWF0aC5nZXhwKG1hdGguZ2xvZyh0aGlzLmdldChpKSApICsgbWF0aC5nbG9nKGUuZ2V0KGopICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBuZXcgUVJQb2x5bm9taWFsKG51bSwgMCk7XG5cdH0sXG5cdFxuXHRtb2QgOiBmdW5jdGlvbihlKSB7XG5cdFxuXHRcdGlmICh0aGlzLmdldExlbmd0aCgpIC0gZS5nZXRMZW5ndGgoKSA8IDApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XG5cdFx0dmFyIHJhdGlvID0gbWF0aC5nbG9nKHRoaXMuZ2V0KDApICkgLSBtYXRoLmdsb2coZS5nZXQoMCkgKTtcblx0XG5cdFx0dmFyIG51bSA9IG5ldyBBcnJheSh0aGlzLmdldExlbmd0aCgpICk7XG5cdFx0XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdldExlbmd0aCgpOyBpKyspIHtcblx0XHRcdG51bVtpXSA9IHRoaXMuZ2V0KGkpO1xuXHRcdH1cblx0XHRcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGUuZ2V0TGVuZ3RoKCk7IGkrKykge1xuXHRcdFx0bnVtW2ldIF49IG1hdGguZ2V4cChtYXRoLmdsb2coZS5nZXQoaSkgKSArIHJhdGlvKTtcblx0XHR9XG5cdFxuXHRcdC8vIHJlY3Vyc2l2ZSBjYWxsXG5cdFx0cmV0dXJuIG5ldyBRUlBvbHlub21pYWwobnVtLCAwKS5tb2QoZSk7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVJQb2x5bm9taWFsO1xuIiwidmFyIEJpdEJ5dGUgPSByZXF1aXJlKCcuLzhCaXRCeXRlJyk7XG52YXIgUlNCbG9jayA9IHJlcXVpcmUoJy4vUlNCbG9jaycpO1xudmFyIEJpdEJ1ZmZlciA9IHJlcXVpcmUoJy4vQml0QnVmZmVyJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIFBvbHlub21pYWwgPSByZXF1aXJlKCcuL1BvbHlub21pYWwnKTtcblxuZnVuY3Rpb24gUVJDb2RlKHR5cGVOdW1iZXIsIGVycm9yQ29ycmVjdExldmVsKSB7XG5cdHRoaXMudHlwZU51bWJlciA9IHR5cGVOdW1iZXI7XG5cdHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwgPSBlcnJvckNvcnJlY3RMZXZlbDtcblx0dGhpcy5tb2R1bGVzID0gbnVsbDtcblx0dGhpcy5tb2R1bGVDb3VudCA9IDA7XG5cdHRoaXMuZGF0YUNhY2hlID0gbnVsbDtcblx0dGhpcy5kYXRhTGlzdCA9IFtdO1xufVxuXG4vLyBmb3IgY2xpZW50IHNpZGUgbWluaWZpY2F0aW9uXG52YXIgcHJvdG8gPSBRUkNvZGUucHJvdG90eXBlO1xuXG5wcm90by5hZGREYXRhID0gZnVuY3Rpb24oZGF0YSkge1xuXHR2YXIgbmV3RGF0YSA9IG5ldyBCaXRCeXRlKGRhdGEpO1xuXHR0aGlzLmRhdGFMaXN0LnB1c2gobmV3RGF0YSk7XG5cdHRoaXMuZGF0YUNhY2hlID0gbnVsbDtcbn07XG5cbnByb3RvLmlzRGFyayA9IGZ1bmN0aW9uKHJvdywgY29sKSB7XG5cdGlmIChyb3cgPCAwIHx8IHRoaXMubW9kdWxlQ291bnQgPD0gcm93IHx8IGNvbCA8IDAgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSBjb2wpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3Iocm93ICsgXCIsXCIgKyBjb2wpO1xuXHR9XG5cdHJldHVybiB0aGlzLm1vZHVsZXNbcm93XVtjb2xdO1xufTtcblxucHJvdG8uZ2V0TW9kdWxlQ291bnQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMubW9kdWxlQ291bnQ7XG59O1xuXG5wcm90by5tYWtlID0gZnVuY3Rpb24oKSB7XG5cdC8vIENhbGN1bGF0ZSBhdXRvbWF0aWNhbGx5IHR5cGVOdW1iZXIgaWYgcHJvdmlkZWQgaXMgPCAxXG5cdGlmICh0aGlzLnR5cGVOdW1iZXIgPCAxICl7XG5cdFx0dmFyIHR5cGVOdW1iZXIgPSAxO1xuXHRcdGZvciAodHlwZU51bWJlciA9IDE7IHR5cGVOdW1iZXIgPCA0MDsgdHlwZU51bWJlcisrKSB7XG5cdFx0XHR2YXIgcnNCbG9ja3MgPSBSU0Jsb2NrLmdldFJTQmxvY2tzKHR5cGVOdW1iZXIsIHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwpO1xuXG5cdFx0XHR2YXIgYnVmZmVyID0gbmV3IEJpdEJ1ZmZlcigpO1xuXHRcdFx0dmFyIHRvdGFsRGF0YUNvdW50ID0gMDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcnNCbG9ja3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dG90YWxEYXRhQ291bnQgKz0gcnNCbG9ja3NbaV0uZGF0YUNvdW50O1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGF0YUxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGRhdGEgPSB0aGlzLmRhdGFMaXN0W2ldO1xuXHRcdFx0XHRidWZmZXIucHV0KGRhdGEubW9kZSwgNCk7XG5cdFx0XHRcdGJ1ZmZlci5wdXQoZGF0YS5nZXRMZW5ndGgoKSwgdXRpbC5nZXRMZW5ndGhJbkJpdHMoZGF0YS5tb2RlLCB0eXBlTnVtYmVyKSApO1xuXHRcdFx0XHRkYXRhLndyaXRlKGJ1ZmZlcik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpIDw9IHRvdGFsRGF0YUNvdW50ICogOClcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHRoaXMudHlwZU51bWJlciA9IHR5cGVOdW1iZXI7XG5cdH1cblx0dGhpcy5tYWtlSW1wbChmYWxzZSwgdGhpcy5nZXRCZXN0TWFza1BhdHRlcm4oKSApO1xufTtcblxucHJvdG8ubWFrZUltcGwgPSBmdW5jdGlvbih0ZXN0LCBtYXNrUGF0dGVybikge1xuXHRcblx0dGhpcy5tb2R1bGVDb3VudCA9IHRoaXMudHlwZU51bWJlciAqIDQgKyAxNztcblx0dGhpcy5tb2R1bGVzID0gbmV3IEFycmF5KHRoaXMubW9kdWxlQ291bnQpO1xuXHRcblx0Zm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5tb2R1bGVDb3VudDsgcm93KyspIHtcblx0XHRcblx0XHR0aGlzLm1vZHVsZXNbcm93XSA9IG5ldyBBcnJheSh0aGlzLm1vZHVsZUNvdW50KTtcblx0XHRcblx0XHRmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLm1vZHVsZUNvdW50OyBjb2wrKykge1xuXHRcdFx0dGhpcy5tb2R1bGVzW3Jvd11bY29sXSA9IG51bGw7Ly8oY29sICsgcm93KSAlIDM7XG5cdFx0fVxuXHR9XG5cblx0dGhpcy5zZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuKDAsIDApO1xuXHR0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4odGhpcy5tb2R1bGVDb3VudCAtIDcsIDApO1xuXHR0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4oMCwgdGhpcy5tb2R1bGVDb3VudCAtIDcpO1xuXHR0aGlzLnNldHVwUG9zaXRpb25BZGp1c3RQYXR0ZXJuKCk7XG5cdHRoaXMuc2V0dXBUaW1pbmdQYXR0ZXJuKCk7XG5cdHRoaXMuc2V0dXBUeXBlSW5mbyh0ZXN0LCBtYXNrUGF0dGVybik7XG5cdFxuXHRpZiAodGhpcy50eXBlTnVtYmVyID49IDcpIHtcblx0XHR0aGlzLnNldHVwVHlwZU51bWJlcih0ZXN0KTtcblx0fVxuXG5cdGlmICh0aGlzLmRhdGFDYWNoZSA9PSBudWxsKSB7XG5cdFx0dGhpcy5kYXRhQ2FjaGUgPSBRUkNvZGUuY3JlYXRlRGF0YSh0aGlzLnR5cGVOdW1iZXIsIHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwsIHRoaXMuZGF0YUxpc3QpO1xuXHR9XG5cblx0dGhpcy5tYXBEYXRhKHRoaXMuZGF0YUNhY2hlLCBtYXNrUGF0dGVybik7XG59O1xuXG5wcm90by5zZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuID0gZnVuY3Rpb24ocm93LCBjb2wpICB7XG5cdFxuXHRmb3IgKHZhciByID0gLTE7IHIgPD0gNzsgcisrKSB7XG5cdFx0XG5cdFx0aWYgKHJvdyArIHIgPD0gLTEgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSByb3cgKyByKSBjb250aW51ZTtcblx0XHRcblx0XHRmb3IgKHZhciBjID0gLTE7IGMgPD0gNzsgYysrKSB7XG5cdFx0XHRcblx0XHRcdGlmIChjb2wgKyBjIDw9IC0xIHx8IHRoaXMubW9kdWxlQ291bnQgPD0gY29sICsgYykgY29udGludWU7XG5cdFx0XHRcblx0XHRcdGlmICggKDAgPD0gciAmJiByIDw9IDYgJiYgKGMgPT0gMCB8fCBjID09IDYpIClcblx0XHRcdFx0XHR8fCAoMCA8PSBjICYmIGMgPD0gNiAmJiAociA9PSAwIHx8IHIgPT0gNikgKVxuXHRcdFx0XHRcdHx8ICgyIDw9IHIgJiYgciA8PSA0ICYmIDIgPD0gYyAmJiBjIDw9IDQpICkge1xuXHRcdFx0XHR0aGlzLm1vZHVsZXNbcm93ICsgcl1bY29sICsgY10gPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5tb2R1bGVzW3JvdyArIHJdW2NvbCArIGNdID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVx0XHRcblx0fVx0XHRcbn07XG5cbnByb3RvLmdldEJlc3RNYXNrUGF0dGVybiA9IGZ1bmN0aW9uKCkge1xuXG5cdHZhciBtaW5Mb3N0UG9pbnQgPSAwO1xuXHR2YXIgcGF0dGVybiA9IDA7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0XHRcblx0XHR0aGlzLm1ha2VJbXBsKHRydWUsIGkpO1xuXG5cdFx0dmFyIGxvc3RQb2ludCA9IHV0aWwuZ2V0TG9zdFBvaW50KHRoaXMpO1xuXG5cdFx0aWYgKGkgPT0gMCB8fCBtaW5Mb3N0UG9pbnQgPiAgbG9zdFBvaW50KSB7XG5cdFx0XHRtaW5Mb3N0UG9pbnQgPSBsb3N0UG9pbnQ7XG5cdFx0XHRwYXR0ZXJuID0gaTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcGF0dGVybjtcbn07XG5cbnByb3RvLmNyZWF0ZU1vdmllQ2xpcCA9IGZ1bmN0aW9uKHRhcmdldF9tYywgaW5zdGFuY2VfbmFtZSwgZGVwdGgpIHtcblxuXHR2YXIgcXJfbWMgPSB0YXJnZXRfbWMuY3JlYXRlRW1wdHlNb3ZpZUNsaXAoaW5zdGFuY2VfbmFtZSwgZGVwdGgpO1xuXHR2YXIgY3MgPSAxO1xuXG5cdHRoaXMubWFrZSgpO1xuXG5cdGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMubW9kdWxlcy5sZW5ndGg7IHJvdysrKSB7XG5cdFx0XG5cdFx0dmFyIHkgPSByb3cgKiBjcztcblx0XHRcblx0XHRmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLm1vZHVsZXNbcm93XS5sZW5ndGg7IGNvbCsrKSB7XG5cblx0XHRcdHZhciB4ID0gY29sICogY3M7XG5cdFx0XHR2YXIgZGFyayA9IHRoaXMubW9kdWxlc1tyb3ddW2NvbF07XG5cdFx0XG5cdFx0XHRpZiAoZGFyaykge1xuXHRcdFx0XHRxcl9tYy5iZWdpbkZpbGwoMCwgMTAwKTtcblx0XHRcdFx0cXJfbWMubW92ZVRvKHgsIHkpO1xuXHRcdFx0XHRxcl9tYy5saW5lVG8oeCArIGNzLCB5KTtcblx0XHRcdFx0cXJfbWMubGluZVRvKHggKyBjcywgeSArIGNzKTtcblx0XHRcdFx0cXJfbWMubGluZVRvKHgsIHkgKyBjcyk7XG5cdFx0XHRcdHFyX21jLmVuZEZpbGwoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHJldHVybiBxcl9tYztcbn07XG5cbnByb3RvLnNldHVwVGltaW5nUGF0dGVybiA9IGZ1bmN0aW9uKCkge1xuXHRcblx0Zm9yICh2YXIgciA9IDg7IHIgPCB0aGlzLm1vZHVsZUNvdW50IC0gODsgcisrKSB7XG5cdFx0aWYgKHRoaXMubW9kdWxlc1tyXVs2XSAhPSBudWxsKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0dGhpcy5tb2R1bGVzW3JdWzZdID0gKHIgJSAyID09IDApO1xuXHR9XG5cblx0Zm9yICh2YXIgYyA9IDg7IGMgPCB0aGlzLm1vZHVsZUNvdW50IC0gODsgYysrKSB7XG5cdFx0aWYgKHRoaXMubW9kdWxlc1s2XVtjXSAhPSBudWxsKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0dGhpcy5tb2R1bGVzWzZdW2NdID0gKGMgJSAyID09IDApO1xuXHR9XG59O1xuXG5wcm90by5zZXR1cFBvc2l0aW9uQWRqdXN0UGF0dGVybiA9IGZ1bmN0aW9uKCkge1xuXG5cdHZhciBwb3MgPSB1dGlsLmdldFBhdHRlcm5Qb3NpdGlvbih0aGlzLnR5cGVOdW1iZXIpO1xuXHRcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwb3MubGVuZ3RoOyBpKyspIHtcblx0XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBwb3MubGVuZ3RoOyBqKyspIHtcblx0XHRcblx0XHRcdHZhciByb3cgPSBwb3NbaV07XG5cdFx0XHR2YXIgY29sID0gcG9zW2pdO1xuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5tb2R1bGVzW3Jvd11bY29sXSAhPSBudWxsKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRmb3IgKHZhciByID0gLTI7IHIgPD0gMjsgcisrKSB7XG5cdFx0XHRcblx0XHRcdFx0Zm9yICh2YXIgYyA9IC0yOyBjIDw9IDI7IGMrKykge1xuXHRcdFx0XHRcblx0XHRcdFx0XHRpZiAociA9PSAtMiB8fCByID09IDIgfHwgYyA9PSAtMiB8fCBjID09IDJcblx0XHRcdFx0XHRcdFx0fHwgKHIgPT0gMCAmJiBjID09IDApICkge1xuXHRcdFx0XHRcdFx0dGhpcy5tb2R1bGVzW3JvdyArIHJdW2NvbCArIGNdID0gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5tb2R1bGVzW3JvdyArIHJdW2NvbCArIGNdID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5wcm90by5zZXR1cFR5cGVOdW1iZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG5cblx0dmFyIGJpdHMgPSB1dGlsLmdldEJDSFR5cGVOdW1iZXIodGhpcy50eXBlTnVtYmVyKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IDE4OyBpKyspIHtcblx0XHR2YXIgbW9kID0gKCF0ZXN0ICYmICggKGJpdHMgPj4gaSkgJiAxKSA9PSAxKTtcblx0XHR0aGlzLm1vZHVsZXNbTWF0aC5mbG9vcihpIC8gMyldW2kgJSAzICsgdGhpcy5tb2R1bGVDb3VudCAtIDggLSAzXSA9IG1vZDtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMTg7IGkrKykge1xuXHRcdHZhciBtb2QgPSAoIXRlc3QgJiYgKCAoYml0cyA+PiBpKSAmIDEpID09IDEpO1xuXHRcdHRoaXMubW9kdWxlc1tpICUgMyArIHRoaXMubW9kdWxlQ291bnQgLSA4IC0gM11bTWF0aC5mbG9vcihpIC8gMyldID0gbW9kO1xuXHR9XG59O1xuXG5wcm90by5zZXR1cFR5cGVJbmZvID0gZnVuY3Rpb24odGVzdCwgbWFza1BhdHRlcm4pIHtcblxuXHR2YXIgZGF0YSA9ICh0aGlzLmVycm9yQ29ycmVjdExldmVsIDw8IDMpIHwgbWFza1BhdHRlcm47XG5cdHZhciBiaXRzID0gdXRpbC5nZXRCQ0hUeXBlSW5mbyhkYXRhKTtcblxuXHQvLyB2ZXJ0aWNhbFx0XHRcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG5cblx0XHR2YXIgbW9kID0gKCF0ZXN0ICYmICggKGJpdHMgPj4gaSkgJiAxKSA9PSAxKTtcblxuXHRcdGlmIChpIDwgNikge1xuXHRcdFx0dGhpcy5tb2R1bGVzW2ldWzhdID0gbW9kO1xuXHRcdH0gZWxzZSBpZiAoaSA8IDgpIHtcblx0XHRcdHRoaXMubW9kdWxlc1tpICsgMV1bOF0gPSBtb2Q7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubW9kdWxlc1t0aGlzLm1vZHVsZUNvdW50IC0gMTUgKyBpXVs4XSA9IG1vZDtcblx0XHR9XG5cdH1cblxuXHQvLyBob3Jpem9udGFsXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMTU7IGkrKykge1xuXG5cdFx0dmFyIG1vZCA9ICghdGVzdCAmJiAoIChiaXRzID4+IGkpICYgMSkgPT0gMSk7XG5cdFx0XG5cdFx0aWYgKGkgPCA4KSB7XG5cdFx0XHR0aGlzLm1vZHVsZXNbOF1bdGhpcy5tb2R1bGVDb3VudCAtIGkgLSAxXSA9IG1vZDtcblx0XHR9IGVsc2UgaWYgKGkgPCA5KSB7XG5cdFx0XHR0aGlzLm1vZHVsZXNbOF1bMTUgLSBpIC0gMSArIDFdID0gbW9kO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLm1vZHVsZXNbOF1bMTUgLSBpIC0gMV0gPSBtb2Q7XG5cdFx0fVxuXHR9XG5cblx0Ly8gZml4ZWQgbW9kdWxlXG5cdHRoaXMubW9kdWxlc1t0aGlzLm1vZHVsZUNvdW50IC0gOF1bOF0gPSAoIXRlc3QpO1xufTtcblxucHJvdG8ubWFwRGF0YSA9IGZ1bmN0aW9uKGRhdGEsIG1hc2tQYXR0ZXJuKSB7XG5cdFxuXHR2YXIgaW5jID0gLTE7XG5cdHZhciByb3cgPSB0aGlzLm1vZHVsZUNvdW50IC0gMTtcblx0dmFyIGJpdEluZGV4ID0gNztcblx0dmFyIGJ5dGVJbmRleCA9IDA7XG5cdFxuXHRmb3IgKHZhciBjb2wgPSB0aGlzLm1vZHVsZUNvdW50IC0gMTsgY29sID4gMDsgY29sIC09IDIpIHtcblxuXHRcdGlmIChjb2wgPT0gNikgY29sLS07XG5cblx0XHR3aGlsZSAodHJ1ZSkge1xuXG5cdFx0XHRmb3IgKHZhciBjID0gMDsgYyA8IDI7IGMrKykge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKHRoaXMubW9kdWxlc1tyb3ddW2NvbCAtIGNdID09IG51bGwpIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgZGFyayA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKGJ5dGVJbmRleCA8IGRhdGEubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRkYXJrID0gKCAoIChkYXRhW2J5dGVJbmRleF0gPj4+IGJpdEluZGV4KSAmIDEpID09IDEpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBtYXNrID0gdXRpbC5nZXRNYXNrKG1hc2tQYXR0ZXJuLCByb3csIGNvbCAtIGMpO1xuXG5cdFx0XHRcdFx0aWYgKG1hc2spIHtcblx0XHRcdFx0XHRcdGRhcmsgPSAhZGFyaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5tb2R1bGVzW3Jvd11bY29sIC0gY10gPSBkYXJrO1xuXHRcdFx0XHRcdGJpdEluZGV4LS07XG5cblx0XHRcdFx0XHRpZiAoYml0SW5kZXggPT0gLTEpIHtcblx0XHRcdFx0XHRcdGJ5dGVJbmRleCsrO1xuXHRcdFx0XHRcdFx0Yml0SW5kZXggPSA3O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdHJvdyArPSBpbmM7XG5cblx0XHRcdGlmIChyb3cgPCAwIHx8IHRoaXMubW9kdWxlQ291bnQgPD0gcm93KSB7XG5cdFx0XHRcdHJvdyAtPSBpbmM7XG5cdFx0XHRcdGluYyA9IC1pbmM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuUVJDb2RlLlBBRDAgPSAweEVDO1xuUVJDb2RlLlBBRDEgPSAweDExO1xuXG5RUkNvZGUuY3JlYXRlRGF0YSA9IGZ1bmN0aW9uKHR5cGVOdW1iZXIsIGVycm9yQ29ycmVjdExldmVsLCBkYXRhTGlzdCkge1xuXHRcblx0dmFyIHJzQmxvY2tzID0gUlNCbG9jay5nZXRSU0Jsb2Nrcyh0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCk7XG5cdFxuXHR2YXIgYnVmZmVyID0gbmV3IEJpdEJ1ZmZlcigpO1xuXHRcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBkYXRhID0gZGF0YUxpc3RbaV07XG5cdFx0YnVmZmVyLnB1dChkYXRhLm1vZGUsIDQpO1xuXHRcdGJ1ZmZlci5wdXQoZGF0YS5nZXRMZW5ndGgoKSwgdXRpbC5nZXRMZW5ndGhJbkJpdHMoZGF0YS5tb2RlLCB0eXBlTnVtYmVyKSApO1xuXHRcdGRhdGEud3JpdGUoYnVmZmVyKTtcblx0fVxuXG5cdC8vIGNhbGMgbnVtIG1heCBkYXRhLlxuXHR2YXIgdG90YWxEYXRhQ291bnQgPSAwO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJzQmxvY2tzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dG90YWxEYXRhQ291bnQgKz0gcnNCbG9ja3NbaV0uZGF0YUNvdW50O1xuXHR9XG5cblx0aWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSA+IHRvdGFsRGF0YUNvdW50ICogOCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNvZGUgbGVuZ3RoIG92ZXJmbG93LiAoXCJcblx0XHRcdCsgYnVmZmVyLmdldExlbmd0aEluQml0cygpXG5cdFx0XHQrIFwiPlwiXG5cdFx0XHQrICB0b3RhbERhdGFDb3VudCAqIDhcblx0XHRcdCsgXCIpXCIpO1xuXHR9XG5cblx0Ly8gZW5kIGNvZGVcblx0aWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSArIDQgPD0gdG90YWxEYXRhQ291bnQgKiA4KSB7XG5cdFx0YnVmZmVyLnB1dCgwLCA0KTtcblx0fVxuXG5cdC8vIHBhZGRpbmdcblx0d2hpbGUgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSAlIDggIT0gMCkge1xuXHRcdGJ1ZmZlci5wdXRCaXQoZmFsc2UpO1xuXHR9XG5cblx0Ly8gcGFkZGluZ1xuXHR3aGlsZSAodHJ1ZSkge1xuXHRcdFxuXHRcdGlmIChidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgPj0gdG90YWxEYXRhQ291bnQgKiA4KSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0YnVmZmVyLnB1dChRUkNvZGUuUEFEMCwgOCk7XG5cdFx0XG5cdFx0aWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSA+PSB0b3RhbERhdGFDb3VudCAqIDgpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRidWZmZXIucHV0KFFSQ29kZS5QQUQxLCA4KTtcblx0fVxuXG5cdHJldHVybiBRUkNvZGUuY3JlYXRlQnl0ZXMoYnVmZmVyLCByc0Jsb2Nrcyk7XG59O1xuXG5RUkNvZGUuY3JlYXRlQnl0ZXMgPSBmdW5jdGlvbihidWZmZXIsIHJzQmxvY2tzKSB7XG5cblx0dmFyIG9mZnNldCA9IDA7XG5cdFxuXHR2YXIgbWF4RGNDb3VudCA9IDA7XG5cdHZhciBtYXhFY0NvdW50ID0gMDtcblx0XG5cdHZhciBkY2RhdGEgPSBuZXcgQXJyYXkocnNCbG9ja3MubGVuZ3RoKTtcblx0dmFyIGVjZGF0YSA9IG5ldyBBcnJheShyc0Jsb2Nrcy5sZW5ndGgpO1xuXHRcblx0Zm9yICh2YXIgciA9IDA7IHIgPCByc0Jsb2Nrcy5sZW5ndGg7IHIrKykge1xuXG5cdFx0dmFyIGRjQ291bnQgPSByc0Jsb2Nrc1tyXS5kYXRhQ291bnQ7XG5cdFx0dmFyIGVjQ291bnQgPSByc0Jsb2Nrc1tyXS50b3RhbENvdW50IC0gZGNDb3VudDtcblxuXHRcdG1heERjQ291bnQgPSBNYXRoLm1heChtYXhEY0NvdW50LCBkY0NvdW50KTtcblx0XHRtYXhFY0NvdW50ID0gTWF0aC5tYXgobWF4RWNDb3VudCwgZWNDb3VudCk7XG5cdFx0XG5cdFx0ZGNkYXRhW3JdID0gbmV3IEFycmF5KGRjQ291bnQpO1xuXHRcdFxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGNkYXRhW3JdLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRkY2RhdGFbcl1baV0gPSAweGZmICYgYnVmZmVyLmJ1ZmZlcltpICsgb2Zmc2V0XTtcblx0XHR9XG5cdFx0b2Zmc2V0ICs9IGRjQ291bnQ7XG5cdFx0XG5cdFx0dmFyIHJzUG9seSA9IHV0aWwuZ2V0RXJyb3JDb3JyZWN0UG9seW5vbWlhbChlY0NvdW50KTtcblx0XHR2YXIgcmF3UG9seSA9IG5ldyBQb2x5bm9taWFsKGRjZGF0YVtyXSwgcnNQb2x5LmdldExlbmd0aCgpIC0gMSk7XG5cblx0XHR2YXIgbW9kUG9seSA9IHJhd1BvbHkubW9kKHJzUG9seSk7XG5cdFx0ZWNkYXRhW3JdID0gbmV3IEFycmF5KHJzUG9seS5nZXRMZW5ndGgoKSAtIDEpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWNkYXRhW3JdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbW9kSW5kZXggPSBpICsgbW9kUG9seS5nZXRMZW5ndGgoKSAtIGVjZGF0YVtyXS5sZW5ndGg7XG5cdFx0XHRlY2RhdGFbcl1baV0gPSAobW9kSW5kZXggPj0gMCk/IG1vZFBvbHkuZ2V0KG1vZEluZGV4KSA6IDA7XG5cdFx0fVxuXG5cdH1cblx0XG5cdHZhciB0b3RhbENvZGVDb3VudCA9IDA7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcnNCbG9ja3MubGVuZ3RoOyBpKyspIHtcblx0XHR0b3RhbENvZGVDb3VudCArPSByc0Jsb2Nrc1tpXS50b3RhbENvdW50O1xuXHR9XG5cblx0dmFyIGRhdGEgPSBuZXcgQXJyYXkodG90YWxDb2RlQ291bnQpO1xuXHR2YXIgaW5kZXggPSAwO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbWF4RGNDb3VudDsgaSsrKSB7XG5cdFx0Zm9yICh2YXIgciA9IDA7IHIgPCByc0Jsb2Nrcy5sZW5ndGg7IHIrKykge1xuXHRcdFx0aWYgKGkgPCBkY2RhdGFbcl0ubGVuZ3RoKSB7XG5cdFx0XHRcdGRhdGFbaW5kZXgrK10gPSBkY2RhdGFbcl1baV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXhFY0NvdW50OyBpKyspIHtcblx0XHRmb3IgKHZhciByID0gMDsgciA8IHJzQmxvY2tzLmxlbmd0aDsgcisrKSB7XG5cdFx0XHRpZiAoaSA8IGVjZGF0YVtyXS5sZW5ndGgpIHtcblx0XHRcdFx0ZGF0YVtpbmRleCsrXSA9IGVjZGF0YVtyXVtpXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVJDb2RlO1xuXG4iLCIvLyBFcnJvckNvcnJlY3RMZXZlbFxudmFyIEVDTCA9IHJlcXVpcmUoJy4vRXJyb3JDb3JyZWN0TGV2ZWwnKTtcblxuZnVuY3Rpb24gUVJSU0Jsb2NrKHRvdGFsQ291bnQsIGRhdGFDb3VudCkge1xuXHR0aGlzLnRvdGFsQ291bnQgPSB0b3RhbENvdW50O1xuXHR0aGlzLmRhdGFDb3VudCAgPSBkYXRhQ291bnQ7XG59XG5cblFSUlNCbG9jay5SU19CTE9DS19UQUJMRSA9IFtcblxuXHQvLyBMXG5cdC8vIE1cblx0Ly8gUVxuXHQvLyBIXG5cblx0Ly8gMVxuXHRbMSwgMjYsIDE5XSxcblx0WzEsIDI2LCAxNl0sXG5cdFsxLCAyNiwgMTNdLFxuXHRbMSwgMjYsIDldLFxuXHRcblx0Ly8gMlxuXHRbMSwgNDQsIDM0XSxcblx0WzEsIDQ0LCAyOF0sXG5cdFsxLCA0NCwgMjJdLFxuXHRbMSwgNDQsIDE2XSxcblxuXHQvLyAzXG5cdFsxLCA3MCwgNTVdLFxuXHRbMSwgNzAsIDQ0XSxcblx0WzIsIDM1LCAxN10sXG5cdFsyLCAzNSwgMTNdLFxuXG5cdC8vIDRcdFx0XG5cdFsxLCAxMDAsIDgwXSxcblx0WzIsIDUwLCAzMl0sXG5cdFsyLCA1MCwgMjRdLFxuXHRbNCwgMjUsIDldLFxuXHRcblx0Ly8gNVxuXHRbMSwgMTM0LCAxMDhdLFxuXHRbMiwgNjcsIDQzXSxcblx0WzIsIDMzLCAxNSwgMiwgMzQsIDE2XSxcblx0WzIsIDMzLCAxMSwgMiwgMzQsIDEyXSxcblx0XG5cdC8vIDZcblx0WzIsIDg2LCA2OF0sXG5cdFs0LCA0MywgMjddLFxuXHRbNCwgNDMsIDE5XSxcblx0WzQsIDQzLCAxNV0sXG5cdFxuXHQvLyA3XHRcdFxuXHRbMiwgOTgsIDc4XSxcblx0WzQsIDQ5LCAzMV0sXG5cdFsyLCAzMiwgMTQsIDQsIDMzLCAxNV0sXG5cdFs0LCAzOSwgMTMsIDEsIDQwLCAxNF0sXG5cdFxuXHQvLyA4XG5cdFsyLCAxMjEsIDk3XSxcblx0WzIsIDYwLCAzOCwgMiwgNjEsIDM5XSxcblx0WzQsIDQwLCAxOCwgMiwgNDEsIDE5XSxcblx0WzQsIDQwLCAxNCwgMiwgNDEsIDE1XSxcblx0XG5cdC8vIDlcblx0WzIsIDE0NiwgMTE2XSxcblx0WzMsIDU4LCAzNiwgMiwgNTksIDM3XSxcblx0WzQsIDM2LCAxNiwgNCwgMzcsIDE3XSxcblx0WzQsIDM2LCAxMiwgNCwgMzcsIDEzXSxcblx0XG5cdC8vIDEwXHRcdFxuXHRbMiwgODYsIDY4LCAyLCA4NywgNjldLFxuXHRbNCwgNjksIDQzLCAxLCA3MCwgNDRdLFxuXHRbNiwgNDMsIDE5LCAyLCA0NCwgMjBdLFxuXHRbNiwgNDMsIDE1LCAyLCA0NCwgMTZdLFxuXG5cdC8vIDExXG5cdFs0LCAxMDEsIDgxXSxcblx0WzEsIDgwLCA1MCwgNCwgODEsIDUxXSxcblx0WzQsIDUwLCAyMiwgNCwgNTEsIDIzXSxcblx0WzMsIDM2LCAxMiwgOCwgMzcsIDEzXSxcblxuXHQvLyAxMlxuXHRbMiwgMTE2LCA5MiwgMiwgMTE3LCA5M10sXG5cdFs2LCA1OCwgMzYsIDIsIDU5LCAzN10sXG5cdFs0LCA0NiwgMjAsIDYsIDQ3LCAyMV0sXG5cdFs3LCA0MiwgMTQsIDQsIDQzLCAxNV0sXG5cblx0Ly8gMTNcblx0WzQsIDEzMywgMTA3XSxcblx0WzgsIDU5LCAzNywgMSwgNjAsIDM4XSxcblx0WzgsIDQ0LCAyMCwgNCwgNDUsIDIxXSxcblx0WzEyLCAzMywgMTEsIDQsIDM0LCAxMl0sXG5cblx0Ly8gMTRcblx0WzMsIDE0NSwgMTE1LCAxLCAxNDYsIDExNl0sXG5cdFs0LCA2NCwgNDAsIDUsIDY1LCA0MV0sXG5cdFsxMSwgMzYsIDE2LCA1LCAzNywgMTddLFxuXHRbMTEsIDM2LCAxMiwgNSwgMzcsIDEzXSxcblxuXHQvLyAxNVxuXHRbNSwgMTA5LCA4NywgMSwgMTEwLCA4OF0sXG5cdFs1LCA2NSwgNDEsIDUsIDY2LCA0Ml0sXG5cdFs1LCA1NCwgMjQsIDcsIDU1LCAyNV0sXG5cdFsxMSwgMzYsIDEyXSxcblxuXHQvLyAxNlxuXHRbNSwgMTIyLCA5OCwgMSwgMTIzLCA5OV0sXG5cdFs3LCA3MywgNDUsIDMsIDc0LCA0Nl0sXG5cdFsxNSwgNDMsIDE5LCAyLCA0NCwgMjBdLFxuXHRbMywgNDUsIDE1LCAxMywgNDYsIDE2XSxcblxuXHQvLyAxN1xuXHRbMSwgMTM1LCAxMDcsIDUsIDEzNiwgMTA4XSxcblx0WzEwLCA3NCwgNDYsIDEsIDc1LCA0N10sXG5cdFsxLCA1MCwgMjIsIDE1LCA1MSwgMjNdLFxuXHRbMiwgNDIsIDE0LCAxNywgNDMsIDE1XSxcblxuXHQvLyAxOFxuXHRbNSwgMTUwLCAxMjAsIDEsIDE1MSwgMTIxXSxcblx0WzksIDY5LCA0MywgNCwgNzAsIDQ0XSxcblx0WzE3LCA1MCwgMjIsIDEsIDUxLCAyM10sXG5cdFsyLCA0MiwgMTQsIDE5LCA0MywgMTVdLFxuXG5cdC8vIDE5XG5cdFszLCAxNDEsIDExMywgNCwgMTQyLCAxMTRdLFxuXHRbMywgNzAsIDQ0LCAxMSwgNzEsIDQ1XSxcblx0WzE3LCA0NywgMjEsIDQsIDQ4LCAyMl0sXG5cdFs5LCAzOSwgMTMsIDE2LCA0MCwgMTRdLFxuXG5cdC8vIDIwXG5cdFszLCAxMzUsIDEwNywgNSwgMTM2LCAxMDhdLFxuXHRbMywgNjcsIDQxLCAxMywgNjgsIDQyXSxcblx0WzE1LCA1NCwgMjQsIDUsIDU1LCAyNV0sXG5cdFsxNSwgNDMsIDE1LCAxMCwgNDQsIDE2XSxcblxuXHQvLyAyMVxuXHRbNCwgMTQ0LCAxMTYsIDQsIDE0NSwgMTE3XSxcblx0WzE3LCA2OCwgNDJdLFxuXHRbMTcsIDUwLCAyMiwgNiwgNTEsIDIzXSxcblx0WzE5LCA0NiwgMTYsIDYsIDQ3LCAxN10sXG5cblx0Ly8gMjJcblx0WzIsIDEzOSwgMTExLCA3LCAxNDAsIDExMl0sXG5cdFsxNywgNzQsIDQ2XSxcblx0WzcsIDU0LCAyNCwgMTYsIDU1LCAyNV0sXG5cdFszNCwgMzcsIDEzXSxcblxuXHQvLyAyM1xuXHRbNCwgMTUxLCAxMjEsIDUsIDE1MiwgMTIyXSxcblx0WzQsIDc1LCA0NywgMTQsIDc2LCA0OF0sXG5cdFsxMSwgNTQsIDI0LCAxNCwgNTUsIDI1XSxcblx0WzE2LCA0NSwgMTUsIDE0LCA0NiwgMTZdLFxuXG5cdC8vIDI0XG5cdFs2LCAxNDcsIDExNywgNCwgMTQ4LCAxMThdLFxuXHRbNiwgNzMsIDQ1LCAxNCwgNzQsIDQ2XSxcblx0WzExLCA1NCwgMjQsIDE2LCA1NSwgMjVdLFxuXHRbMzAsIDQ2LCAxNiwgMiwgNDcsIDE3XSxcblxuXHQvLyAyNVxuXHRbOCwgMTMyLCAxMDYsIDQsIDEzMywgMTA3XSxcblx0WzgsIDc1LCA0NywgMTMsIDc2LCA0OF0sXG5cdFs3LCA1NCwgMjQsIDIyLCA1NSwgMjVdLFxuXHRbMjIsIDQ1LCAxNSwgMTMsIDQ2LCAxNl0sXG5cblx0Ly8gMjZcblx0WzEwLCAxNDIsIDExNCwgMiwgMTQzLCAxMTVdLFxuXHRbMTksIDc0LCA0NiwgNCwgNzUsIDQ3XSxcblx0WzI4LCA1MCwgMjIsIDYsIDUxLCAyM10sXG5cdFszMywgNDYsIDE2LCA0LCA0NywgMTddLFxuXG5cdC8vIDI3XG5cdFs4LCAxNTIsIDEyMiwgNCwgMTUzLCAxMjNdLFxuXHRbMjIsIDczLCA0NSwgMywgNzQsIDQ2XSxcblx0WzgsIDUzLCAyMywgMjYsIDU0LCAyNF0sXG5cdFsxMiwgNDUsIDE1LCAyOCwgNDYsIDE2XSxcblxuXHQvLyAyOFxuXHRbMywgMTQ3LCAxMTcsIDEwLCAxNDgsIDExOF0sXG5cdFszLCA3MywgNDUsIDIzLCA3NCwgNDZdLFxuXHRbNCwgNTQsIDI0LCAzMSwgNTUsIDI1XSxcblx0WzExLCA0NSwgMTUsIDMxLCA0NiwgMTZdLFxuXG5cdC8vIDI5XG5cdFs3LCAxNDYsIDExNiwgNywgMTQ3LCAxMTddLFxuXHRbMjEsIDczLCA0NSwgNywgNzQsIDQ2XSxcblx0WzEsIDUzLCAyMywgMzcsIDU0LCAyNF0sXG5cdFsxOSwgNDUsIDE1LCAyNiwgNDYsIDE2XSxcblxuXHQvLyAzMFxuXHRbNSwgMTQ1LCAxMTUsIDEwLCAxNDYsIDExNl0sXG5cdFsxOSwgNzUsIDQ3LCAxMCwgNzYsIDQ4XSxcblx0WzE1LCA1NCwgMjQsIDI1LCA1NSwgMjVdLFxuXHRbMjMsIDQ1LCAxNSwgMjUsIDQ2LCAxNl0sXG5cblx0Ly8gMzFcblx0WzEzLCAxNDUsIDExNSwgMywgMTQ2LCAxMTZdLFxuXHRbMiwgNzQsIDQ2LCAyOSwgNzUsIDQ3XSxcblx0WzQyLCA1NCwgMjQsIDEsIDU1LCAyNV0sXG5cdFsyMywgNDUsIDE1LCAyOCwgNDYsIDE2XSxcblxuXHQvLyAzMlxuXHRbMTcsIDE0NSwgMTE1XSxcblx0WzEwLCA3NCwgNDYsIDIzLCA3NSwgNDddLFxuXHRbMTAsIDU0LCAyNCwgMzUsIDU1LCAyNV0sXG5cdFsxOSwgNDUsIDE1LCAzNSwgNDYsIDE2XSxcblxuXHQvLyAzM1xuXHRbMTcsIDE0NSwgMTE1LCAxLCAxNDYsIDExNl0sXG5cdFsxNCwgNzQsIDQ2LCAyMSwgNzUsIDQ3XSxcblx0WzI5LCA1NCwgMjQsIDE5LCA1NSwgMjVdLFxuXHRbMTEsIDQ1LCAxNSwgNDYsIDQ2LCAxNl0sXG5cblx0Ly8gMzRcblx0WzEzLCAxNDUsIDExNSwgNiwgMTQ2LCAxMTZdLFxuXHRbMTQsIDc0LCA0NiwgMjMsIDc1LCA0N10sXG5cdFs0NCwgNTQsIDI0LCA3LCA1NSwgMjVdLFxuXHRbNTksIDQ2LCAxNiwgMSwgNDcsIDE3XSxcblxuXHQvLyAzNVxuXHRbMTIsIDE1MSwgMTIxLCA3LCAxNTIsIDEyMl0sXG5cdFsxMiwgNzUsIDQ3LCAyNiwgNzYsIDQ4XSxcblx0WzM5LCA1NCwgMjQsIDE0LCA1NSwgMjVdLFxuXHRbMjIsIDQ1LCAxNSwgNDEsIDQ2LCAxNl0sXG5cblx0Ly8gMzZcblx0WzYsIDE1MSwgMTIxLCAxNCwgMTUyLCAxMjJdLFxuXHRbNiwgNzUsIDQ3LCAzNCwgNzYsIDQ4XSxcblx0WzQ2LCA1NCwgMjQsIDEwLCA1NSwgMjVdLFxuXHRbMiwgNDUsIDE1LCA2NCwgNDYsIDE2XSxcblxuXHQvLyAzN1xuXHRbMTcsIDE1MiwgMTIyLCA0LCAxNTMsIDEyM10sXG5cdFsyOSwgNzQsIDQ2LCAxNCwgNzUsIDQ3XSxcblx0WzQ5LCA1NCwgMjQsIDEwLCA1NSwgMjVdLFxuXHRbMjQsIDQ1LCAxNSwgNDYsIDQ2LCAxNl0sXG5cblx0Ly8gMzhcblx0WzQsIDE1MiwgMTIyLCAxOCwgMTUzLCAxMjNdLFxuXHRbMTMsIDc0LCA0NiwgMzIsIDc1LCA0N10sXG5cdFs0OCwgNTQsIDI0LCAxNCwgNTUsIDI1XSxcblx0WzQyLCA0NSwgMTUsIDMyLCA0NiwgMTZdLFxuXG5cdC8vIDM5XG5cdFsyMCwgMTQ3LCAxMTcsIDQsIDE0OCwgMTE4XSxcblx0WzQwLCA3NSwgNDcsIDcsIDc2LCA0OF0sXG5cdFs0MywgNTQsIDI0LCAyMiwgNTUsIDI1XSxcblx0WzEwLCA0NSwgMTUsIDY3LCA0NiwgMTZdLFxuXG5cdC8vIDQwXG5cdFsxOSwgMTQ4LCAxMTgsIDYsIDE0OSwgMTE5XSxcblx0WzE4LCA3NSwgNDcsIDMxLCA3NiwgNDhdLFxuXHRbMzQsIDU0LCAyNCwgMzQsIDU1LCAyNV0sXG5cdFsyMCwgNDUsIDE1LCA2MSwgNDYsIDE2XVxuXTtcblxuUVJSU0Jsb2NrLmdldFJTQmxvY2tzID0gZnVuY3Rpb24odHlwZU51bWJlciwgZXJyb3JDb3JyZWN0TGV2ZWwpIHtcblx0XG5cdHZhciByc0Jsb2NrID0gUVJSU0Jsb2NrLmdldFJzQmxvY2tUYWJsZSh0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCk7XG5cdFxuXHRpZiAocnNCbG9jayA9PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcnMgYmxvY2sgQCB0eXBlTnVtYmVyOlwiICsgdHlwZU51bWJlciArIFwiL2Vycm9yQ29ycmVjdExldmVsOlwiICsgZXJyb3JDb3JyZWN0TGV2ZWwpO1xuXHR9XG5cblx0dmFyIGxlbmd0aCA9IHJzQmxvY2subGVuZ3RoIC8gMztcblx0XG5cdHZhciBsaXN0ID0gbmV3IEFycmF5KCk7XG5cdFxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cblx0XHR2YXIgY291bnQgPSByc0Jsb2NrW2kgKiAzICsgMF07XG5cdFx0dmFyIHRvdGFsQ291bnQgPSByc0Jsb2NrW2kgKiAzICsgMV07XG5cdFx0dmFyIGRhdGFDb3VudCAgPSByc0Jsb2NrW2kgKiAzICsgMl07XG5cblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcblx0XHRcdGxpc3QucHVzaChuZXcgUVJSU0Jsb2NrKHRvdGFsQ291bnQsIGRhdGFDb3VudCkgKTtcdFxuXHRcdH1cblx0fVxuXHRcblx0cmV0dXJuIGxpc3Q7XG59XG5cblFSUlNCbG9jay5nZXRSc0Jsb2NrVGFibGUgPSBmdW5jdGlvbih0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCkge1xuXG5cdHN3aXRjaChlcnJvckNvcnJlY3RMZXZlbCkge1xuXHRjYXNlIEVDTC5MIDpcblx0XHRyZXR1cm4gUVJSU0Jsb2NrLlJTX0JMT0NLX1RBQkxFWyh0eXBlTnVtYmVyIC0gMSkgKiA0ICsgMF07XG5cdGNhc2UgRUNMLk0gOlxuXHRcdHJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyAxXTtcblx0Y2FzZSBFQ0wuUSA6XG5cdFx0cmV0dXJuIFFSUlNCbG9jay5SU19CTE9DS19UQUJMRVsodHlwZU51bWJlciAtIDEpICogNCArIDJdO1xuXHRjYXNlIEVDTC5IIDpcblx0XHRyZXR1cm4gUVJSU0Jsb2NrLlJTX0JMT0NLX1RBQkxFWyh0eXBlTnVtYmVyIC0gMSkgKiA0ICsgM107XG5cdGRlZmF1bHQgOlxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRUlJTQmxvY2s7XG4iLCJ2YXIgUVJNYXRoID0ge1xuXG5cdGdsb2cgOiBmdW5jdGlvbihuKSB7XG5cdFxuXHRcdGlmIChuIDwgMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiZ2xvZyhcIiArIG4gKyBcIilcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBRUk1hdGguTE9HX1RBQkxFW25dO1xuXHR9LFxuXHRcblx0Z2V4cCA6IGZ1bmN0aW9uKG4pIHtcblx0XG5cdFx0d2hpbGUgKG4gPCAwKSB7XG5cdFx0XHRuICs9IDI1NTtcblx0XHR9XG5cdFxuXHRcdHdoaWxlIChuID49IDI1Nikge1xuXHRcdFx0biAtPSAyNTU7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gUVJNYXRoLkVYUF9UQUJMRVtuXTtcblx0fSxcblx0XG5cdEVYUF9UQUJMRSA6IG5ldyBBcnJheSgyNTYpLFxuXHRcblx0TE9HX1RBQkxFIDogbmV3IEFycmF5KDI1NilcblxufTtcblx0XG5mb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHRRUk1hdGguRVhQX1RBQkxFW2ldID0gMSA8PCBpO1xufVxuZm9yICh2YXIgaSA9IDg7IGkgPCAyNTY7IGkrKykge1xuXHRRUk1hdGguRVhQX1RBQkxFW2ldID0gUVJNYXRoLkVYUF9UQUJMRVtpIC0gNF1cblx0XHReIFFSTWF0aC5FWFBfVEFCTEVbaSAtIDVdXG5cdFx0XiBRUk1hdGguRVhQX1RBQkxFW2kgLSA2XVxuXHRcdF4gUVJNYXRoLkVYUF9UQUJMRVtpIC0gOF07XG59XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG5cdFFSTWF0aC5MT0dfVEFCTEVbUVJNYXRoLkVYUF9UQUJMRVtpXSBdID0gaTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRUk1hdGg7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcblx0TU9ERV9OVU1CRVIgOlx0XHQxIDw8IDAsXG5cdE1PREVfQUxQSEFfTlVNIDogXHQxIDw8IDEsXG5cdE1PREVfOEJJVF9CWVRFIDogXHQxIDw8IDIsXG5cdE1PREVfS0FOSkkgOlx0XHQxIDw8IDNcbn07XG4iLCJ2YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpO1xudmFyIFBvbHlub21pYWwgPSByZXF1aXJlKCcuL1BvbHlub21pYWwnKTtcbnZhciBtYXRoID0gcmVxdWlyZSgnLi9tYXRoJyk7XG5cbnZhciBRUk1hc2tQYXR0ZXJuID0ge1xuXHRQQVRURVJOMDAwIDogMCxcblx0UEFUVEVSTjAwMSA6IDEsXG5cdFBBVFRFUk4wMTAgOiAyLFxuXHRQQVRURVJOMDExIDogMyxcblx0UEFUVEVSTjEwMCA6IDQsXG5cdFBBVFRFUk4xMDEgOiA1LFxuXHRQQVRURVJOMTEwIDogNixcblx0UEFUVEVSTjExMSA6IDdcbn07XG5cbnZhciBRUlV0aWwgPSB7XG5cbiAgICBQQVRURVJOX1BPU0lUSU9OX1RBQkxFIDogW1xuXHQgICAgW10sXG5cdCAgICBbNiwgMThdLFxuXHQgICAgWzYsIDIyXSxcblx0ICAgIFs2LCAyNl0sXG5cdCAgICBbNiwgMzBdLFxuXHQgICAgWzYsIDM0XSxcblx0ICAgIFs2LCAyMiwgMzhdLFxuXHQgICAgWzYsIDI0LCA0Ml0sXG5cdCAgICBbNiwgMjYsIDQ2XSxcblx0ICAgIFs2LCAyOCwgNTBdLFxuXHQgICAgWzYsIDMwLCA1NF0sXHRcdFxuXHQgICAgWzYsIDMyLCA1OF0sXG5cdCAgICBbNiwgMzQsIDYyXSxcblx0ICAgIFs2LCAyNiwgNDYsIDY2XSxcblx0ICAgIFs2LCAyNiwgNDgsIDcwXSxcblx0ICAgIFs2LCAyNiwgNTAsIDc0XSxcblx0ICAgIFs2LCAzMCwgNTQsIDc4XSxcblx0ICAgIFs2LCAzMCwgNTYsIDgyXSxcblx0ICAgIFs2LCAzMCwgNTgsIDg2XSxcblx0ICAgIFs2LCAzNCwgNjIsIDkwXSxcblx0ICAgIFs2LCAyOCwgNTAsIDcyLCA5NF0sXG5cdCAgICBbNiwgMjYsIDUwLCA3NCwgOThdLFxuXHQgICAgWzYsIDMwLCA1NCwgNzgsIDEwMl0sXG5cdCAgICBbNiwgMjgsIDU0LCA4MCwgMTA2XSxcblx0ICAgIFs2LCAzMiwgNTgsIDg0LCAxMTBdLFxuXHQgICAgWzYsIDMwLCA1OCwgODYsIDExNF0sXG5cdCAgICBbNiwgMzQsIDYyLCA5MCwgMTE4XSxcblx0ICAgIFs2LCAyNiwgNTAsIDc0LCA5OCwgMTIyXSxcblx0ICAgIFs2LCAzMCwgNTQsIDc4LCAxMDIsIDEyNl0sXG5cdCAgICBbNiwgMjYsIDUyLCA3OCwgMTA0LCAxMzBdLFxuXHQgICAgWzYsIDMwLCA1NiwgODIsIDEwOCwgMTM0XSxcblx0ICAgIFs2LCAzNCwgNjAsIDg2LCAxMTIsIDEzOF0sXG5cdCAgICBbNiwgMzAsIDU4LCA4NiwgMTE0LCAxNDJdLFxuXHQgICAgWzYsIDM0LCA2MiwgOTAsIDExOCwgMTQ2XSxcblx0ICAgIFs2LCAzMCwgNTQsIDc4LCAxMDIsIDEyNiwgMTUwXSxcblx0ICAgIFs2LCAyNCwgNTAsIDc2LCAxMDIsIDEyOCwgMTU0XSxcblx0ICAgIFs2LCAyOCwgNTQsIDgwLCAxMDYsIDEzMiwgMTU4XSxcblx0ICAgIFs2LCAzMiwgNTgsIDg0LCAxMTAsIDEzNiwgMTYyXSxcblx0ICAgIFs2LCAyNiwgNTQsIDgyLCAxMTAsIDEzOCwgMTY2XSxcblx0ICAgIFs2LCAzMCwgNTgsIDg2LCAxMTQsIDE0MiwgMTcwXVxuICAgIF0sXG5cbiAgICBHMTUgOiAoMSA8PCAxMCkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgNCkgfCAoMSA8PCAyKSB8ICgxIDw8IDEpIHwgKDEgPDwgMCksXG4gICAgRzE4IDogKDEgPDwgMTIpIHwgKDEgPDwgMTEpIHwgKDEgPDwgMTApIHwgKDEgPDwgOSkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgMikgfCAoMSA8PCAwKSxcbiAgICBHMTVfTUFTSyA6ICgxIDw8IDE0KSB8ICgxIDw8IDEyKSB8ICgxIDw8IDEwKVx0fCAoMSA8PCA0KSB8ICgxIDw8IDEpLFxuXG4gICAgZ2V0QkNIVHlwZUluZm8gOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICB2YXIgZCA9IGRhdGEgPDwgMTA7XG5cdCAgICB3aGlsZSAoUVJVdGlsLmdldEJDSERpZ2l0KGQpIC0gUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTUpID49IDApIHtcblx0XHQgICAgZCBePSAoUVJVdGlsLkcxNSA8PCAoUVJVdGlsLmdldEJDSERpZ2l0KGQpIC0gUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTUpICkgKTsgXHRcblx0ICAgIH1cblx0ICAgIHJldHVybiAoIChkYXRhIDw8IDEwKSB8IGQpIF4gUVJVdGlsLkcxNV9NQVNLO1xuICAgIH0sXG5cbiAgICBnZXRCQ0hUeXBlTnVtYmVyIDogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgdmFyIGQgPSBkYXRhIDw8IDEyO1xuXHQgICAgd2hpbGUgKFFSVXRpbC5nZXRCQ0hEaWdpdChkKSAtIFFSVXRpbC5nZXRCQ0hEaWdpdChRUlV0aWwuRzE4KSA+PSAwKSB7XG5cdFx0ICAgIGQgXj0gKFFSVXRpbC5HMTggPDwgKFFSVXRpbC5nZXRCQ0hEaWdpdChkKSAtIFFSVXRpbC5nZXRCQ0hEaWdpdChRUlV0aWwuRzE4KSApICk7IFx0XG5cdCAgICB9XG5cdCAgICByZXR1cm4gKGRhdGEgPDwgMTIpIHwgZDtcbiAgICB9LFxuXG4gICAgZ2V0QkNIRGlnaXQgOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0ICAgIHZhciBkaWdpdCA9IDA7XG5cblx0ICAgIHdoaWxlIChkYXRhICE9IDApIHtcblx0XHQgICAgZGlnaXQrKztcblx0XHQgICAgZGF0YSA+Pj49IDE7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBkaWdpdDtcbiAgICB9LFxuXG4gICAgZ2V0UGF0dGVyblBvc2l0aW9uIDogZnVuY3Rpb24odHlwZU51bWJlcikge1xuXHQgICAgcmV0dXJuIFFSVXRpbC5QQVRURVJOX1BPU0lUSU9OX1RBQkxFW3R5cGVOdW1iZXIgLSAxXTtcbiAgICB9LFxuXG4gICAgZ2V0TWFzayA6IGZ1bmN0aW9uKG1hc2tQYXR0ZXJuLCBpLCBqKSB7XG5cdCAgICBcblx0ICAgIHN3aXRjaCAobWFza1BhdHRlcm4pIHtcblx0XHQgICAgXG5cdCAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAwMCA6IHJldHVybiAoaSArIGopICUgMiA9PSAwO1xuXHQgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4wMDEgOiByZXR1cm4gaSAlIDIgPT0gMDtcblx0ICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDEwIDogcmV0dXJuIGogJSAzID09IDA7XG5cdCAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAxMSA6IHJldHVybiAoaSArIGopICUgMyA9PSAwO1xuXHQgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4xMDAgOiByZXR1cm4gKE1hdGguZmxvb3IoaSAvIDIpICsgTWF0aC5mbG9vcihqIC8gMykgKSAlIDIgPT0gMDtcblx0ICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTAxIDogcmV0dXJuIChpICogaikgJSAyICsgKGkgKiBqKSAlIDMgPT0gMDtcblx0ICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTEwIDogcmV0dXJuICggKGkgKiBqKSAlIDIgKyAoaSAqIGopICUgMykgJSAyID09IDA7XG5cdCAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjExMSA6IHJldHVybiAoIChpICogaikgJSAzICsgKGkgKyBqKSAlIDIpICUgMiA9PSAwO1xuXG5cdCAgICBkZWZhdWx0IDpcblx0XHQgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIG1hc2tQYXR0ZXJuOlwiICsgbWFza1BhdHRlcm4pO1xuXHQgICAgfVxuICAgIH0sXG5cbiAgICBnZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsIDogZnVuY3Rpb24oZXJyb3JDb3JyZWN0TGVuZ3RoKSB7XG5cblx0ICAgIHZhciBhID0gbmV3IFBvbHlub21pYWwoWzFdLCAwKTtcblxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlcnJvckNvcnJlY3RMZW5ndGg7IGkrKykge1xuXHRcdCAgICBhID0gYS5tdWx0aXBseShuZXcgUG9seW5vbWlhbChbMSwgbWF0aC5nZXhwKGkpXSwgMCkgKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGE7XG4gICAgfSxcblxuICAgIGdldExlbmd0aEluQml0cyA6IGZ1bmN0aW9uKG1vZGUsIHR5cGUpIHtcblxuXHQgICAgaWYgKDEgPD0gdHlwZSAmJiB0eXBlIDwgMTApIHtcblxuXHRcdCAgICAvLyAxIC0gOVxuXG5cdFx0ICAgIHN3aXRjaChtb2RlKSB7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX05VTUJFUiBcdDogcmV0dXJuIDEwO1xuXHRcdCAgICBjYXNlIE1vZGUuTU9ERV9BTFBIQV9OVU0gXHQ6IHJldHVybiA5O1xuXHRcdCAgICBjYXNlIE1vZGUuTU9ERV84QklUX0JZVEVcdDogcmV0dXJuIDg7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX0tBTkpJICBcdDogcmV0dXJuIDg7XG5cdFx0ICAgIGRlZmF1bHQgOlxuXHRcdFx0ICAgIHRocm93IG5ldyBFcnJvcihcIm1vZGU6XCIgKyBtb2RlKTtcblx0XHQgICAgfVxuXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPCAyNykge1xuXG5cdFx0ICAgIC8vIDEwIC0gMjZcblxuXHRcdCAgICBzd2l0Y2gobW9kZSkge1xuXHRcdCAgICBjYXNlIE1vZGUuTU9ERV9OVU1CRVIgXHQ6IHJldHVybiAxMjtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfQUxQSEFfTlVNIFx0OiByZXR1cm4gMTE7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFXzhCSVRfQllURVx0OiByZXR1cm4gMTY7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX0tBTkpJICBcdDogcmV0dXJuIDEwO1xuXHRcdCAgICBkZWZhdWx0IDpcblx0XHRcdCAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2RlOlwiICsgbW9kZSk7XG5cdFx0ICAgIH1cblxuXHQgICAgfSBlbHNlIGlmICh0eXBlIDwgNDEpIHtcblxuXHRcdCAgICAvLyAyNyAtIDQwXG5cblx0XHQgICAgc3dpdGNoKG1vZGUpIHtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfTlVNQkVSIFx0OiByZXR1cm4gMTQ7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX0FMUEhBX05VTVx0OiByZXR1cm4gMTM7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFXzhCSVRfQllURVx0OiByZXR1cm4gMTY7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX0tBTkpJICBcdDogcmV0dXJuIDEyO1xuXHRcdCAgICBkZWZhdWx0IDpcblx0XHRcdCAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2RlOlwiICsgbW9kZSk7XG5cdFx0ICAgIH1cblxuXHQgICAgfSBlbHNlIHtcblx0XHQgICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZTpcIiArIHR5cGUpO1xuXHQgICAgfVxuICAgIH0sXG5cbiAgICBnZXRMb3N0UG9pbnQgOiBmdW5jdGlvbihxckNvZGUpIHtcblx0ICAgIFxuXHQgICAgdmFyIG1vZHVsZUNvdW50ID0gcXJDb2RlLmdldE1vZHVsZUNvdW50KCk7XG5cdCAgICBcblx0ICAgIHZhciBsb3N0UG9pbnQgPSAwO1xuXHQgICAgXG5cdCAgICAvLyBMRVZFTDFcblx0ICAgIFxuXHQgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQ7IHJvdysrKSB7XG5cblx0XHQgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgbW9kdWxlQ291bnQ7IGNvbCsrKSB7XG5cblx0XHRcdCAgICB2YXIgc2FtZUNvdW50ID0gMDtcblx0XHRcdCAgICB2YXIgZGFyayA9IHFyQ29kZS5pc0Rhcmsocm93LCBjb2wpO1xuXG5cdFx0XHRcdGZvciAodmFyIHIgPSAtMTsgciA8PSAxOyByKyspIHtcblxuXHRcdFx0XHQgICAgaWYgKHJvdyArIHIgPCAwIHx8IG1vZHVsZUNvdW50IDw9IHJvdyArIHIpIHtcblx0XHRcdFx0XHQgICAgY29udGludWU7XG5cdFx0XHRcdCAgICB9XG5cblx0XHRcdFx0ICAgIGZvciAodmFyIGMgPSAtMTsgYyA8PSAxOyBjKyspIHtcblxuXHRcdFx0XHRcdCAgICBpZiAoY29sICsgYyA8IDAgfHwgbW9kdWxlQ291bnQgPD0gY29sICsgYykge1xuXHRcdFx0XHRcdFx0ICAgIGNvbnRpbnVlO1xuXHRcdFx0XHRcdCAgICB9XG5cblx0XHRcdFx0XHQgICAgaWYgKHIgPT0gMCAmJiBjID09IDApIHtcblx0XHRcdFx0XHRcdCAgICBjb250aW51ZTtcblx0XHRcdFx0XHQgICAgfVxuXG5cdFx0XHRcdFx0ICAgIGlmIChkYXJrID09IHFyQ29kZS5pc0Rhcmsocm93ICsgciwgY29sICsgYykgKSB7XG5cdFx0XHRcdFx0XHQgICAgc2FtZUNvdW50Kys7XG5cdFx0XHRcdFx0ICAgIH1cblx0XHRcdFx0ICAgIH1cblx0XHRcdCAgICB9XG5cblx0XHRcdCAgICBpZiAoc2FtZUNvdW50ID4gNSkge1xuXHRcdFx0XHQgICAgbG9zdFBvaW50ICs9ICgzICsgc2FtZUNvdW50IC0gNSk7XG5cdFx0XHQgICAgfVxuXHRcdCAgICB9XG5cdCAgICB9XG5cblx0ICAgIC8vIExFVkVMMlxuXG5cdCAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudCAtIDE7IHJvdysrKSB7XG5cdFx0ICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG1vZHVsZUNvdW50IC0gMTsgY29sKyspIHtcblx0XHRcdCAgICB2YXIgY291bnQgPSAwO1xuXHRcdFx0ICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdywgICAgIGNvbCAgICApICkgY291bnQrKztcblx0XHRcdCAgICBpZiAocXJDb2RlLmlzRGFyayhyb3cgKyAxLCBjb2wgICAgKSApIGNvdW50Kys7XG5cdFx0XHQgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93LCAgICAgY29sICsgMSkgKSBjb3VudCsrO1xuXHRcdFx0ICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdyArIDEsIGNvbCArIDEpICkgY291bnQrKztcblx0XHRcdCAgICBpZiAoY291bnQgPT0gMCB8fCBjb3VudCA9PSA0KSB7XG5cdFx0XHRcdCAgICBsb3N0UG9pbnQgKz0gMztcblx0XHRcdCAgICB9XG5cdFx0ICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gTEVWRUwzXG5cblx0ICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IG1vZHVsZUNvdW50OyByb3crKykge1xuXHRcdCAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudCAtIDY7IGNvbCsrKSB7XG5cdFx0XHQgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93LCBjb2wpXG5cdFx0XHRcdFx0ICAgICYmICFxckNvZGUuaXNEYXJrKHJvdywgY29sICsgMSlcblx0XHRcdFx0XHQgICAgJiYgIHFyQ29kZS5pc0Rhcmsocm93LCBjb2wgKyAyKVxuXHRcdFx0XHRcdCAgICAmJiAgcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDMpXG5cdFx0XHRcdFx0ICAgICYmICBxckNvZGUuaXNEYXJrKHJvdywgY29sICsgNClcblx0XHRcdFx0XHQgICAgJiYgIXFyQ29kZS5pc0Rhcmsocm93LCBjb2wgKyA1KVxuXHRcdFx0XHRcdCAgICAmJiAgcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDYpICkge1xuXHRcdFx0XHQgICAgbG9zdFBvaW50ICs9IDQwO1xuXHRcdFx0ICAgIH1cblx0XHQgICAgfVxuXHQgICAgfVxuXG5cdCAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudDsgY29sKyspIHtcblx0XHQgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQgLSA2OyByb3crKykge1xuXHRcdFx0ICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdywgY29sKVxuXHRcdFx0XHRcdCAgICAmJiAhcXJDb2RlLmlzRGFyayhyb3cgKyAxLCBjb2wpXG5cdFx0XHRcdFx0ICAgICYmICBxckNvZGUuaXNEYXJrKHJvdyArIDIsIGNvbClcblx0XHRcdFx0XHQgICAgJiYgIHFyQ29kZS5pc0Rhcmsocm93ICsgMywgY29sKVxuXHRcdFx0XHRcdCAgICAmJiAgcXJDb2RlLmlzRGFyayhyb3cgKyA0LCBjb2wpXG5cdFx0XHRcdFx0ICAgICYmICFxckNvZGUuaXNEYXJrKHJvdyArIDUsIGNvbClcblx0XHRcdFx0XHQgICAgJiYgIHFyQ29kZS5pc0Rhcmsocm93ICsgNiwgY29sKSApIHtcblx0XHRcdFx0ICAgIGxvc3RQb2ludCArPSA0MDtcblx0XHRcdCAgICB9XG5cdFx0ICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gTEVWRUw0XG5cdCAgICBcblx0ICAgIHZhciBkYXJrQ291bnQgPSAwO1xuXG5cdCAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudDsgY29sKyspIHtcblx0XHQgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQ7IHJvdysrKSB7XG5cdFx0XHQgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93LCBjb2wpICkge1xuXHRcdFx0XHQgICAgZGFya0NvdW50Kys7XG5cdFx0XHQgICAgfVxuXHRcdCAgICB9XG5cdCAgICB9XG5cdCAgICBcblx0ICAgIHZhciByYXRpbyA9IE1hdGguYWJzKDEwMCAqIGRhcmtDb3VudCAvIG1vZHVsZUNvdW50IC8gbW9kdWxlQ291bnQgLSA1MCkgLyA1O1xuXHQgICAgbG9zdFBvaW50ICs9IHJhdGlvICogMTA7XG5cblx0ICAgIHJldHVybiBsb3N0UG9pbnQ7XHRcdFxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVJVdGlsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpOyAvLyBxci5qcyBkb2Vzbid0IGhhbmRsZSBlcnJvciBsZXZlbCBvZiB6ZXJvIChNKSBzbyB3ZSBuZWVkIHRvIGRvIGl0IHJpZ2h0LFxuLy8gdGh1cyB0aGUgZGVlcCByZXF1aXJlLlxuXG5cbnZhciBRUkNvZGVJbXBsID0gcmVxdWlyZSgncXIuanMvbGliL1FSQ29kZScpO1xuXG52YXIgRXJyb3JDb3JyZWN0TGV2ZWwgPSByZXF1aXJlKCdxci5qcy9saWIvRXJyb3JDb3JyZWN0TGV2ZWwnKTtcblxuZnVuY3Rpb24gZ2V0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyhjdHgpIHtcbiAgcmV0dXJuICgvLyAkRmxvd0ZpeE1lXG4gICAgY3R4LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgLy8gJEZsb3dGaXhNZVxuICAgIGN0eC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IC8vICRGbG93Rml4TWVcbiAgICBjdHgubXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IC8vICRGbG93Rml4TWVcbiAgICBjdHgub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgLy8gJEZsb3dGaXhNZVxuICAgIGN0eC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IDFcbiAgKTtcbn0gLy8gQ29udmVydCBmcm9tIFVURi0xNiwgZm9yY2luZyB0aGUgdXNlIG9mIGJ5dGUtbW9kZSBlbmNvZGluZyBpbiBvdXIgUVIgQ29kZS5cbi8vIFRoaXMgYWxsb3dzIHVzIHRvIGVuY29kZSBIYW5qaSwgS2FuamksIGVtb2ppLCBldGMuIElkZWFsbHkgd2UnZCBkbyBtb3JlXG4vLyBkZXRlY3Rpb24gYW5kIG5vdCByZXNvcnQgdG8gYnl0ZS1tb2RlIGlmIHBvc3NpYmxlLCBidXQgd2UncmUgdHJhZGluZyBvZmZcbi8vIGEgc21hbGxlciBsaWJyYXJ5IGZvciBhIHNtYWxsZXIgYW1vdW50IG9mIGRhdGEgd2UgY2FuIHBvdGVudGlhbGx5IGVuY29kZS5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9qb25pc2Fsb25lbi5jb20vMjAxMi9mcm9tLXV0Zi0xNi10by11dGYtOC1pbi1qYXZhc2NyaXB0L1xuXG5cbmZ1bmN0aW9uIGNvbnZlcnRTdHIoc3RyKSB7XG4gIHZhciBvdXQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGFyY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGNoYXJjb2RlIDwgMHgwMDgwKSB7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyY29kZSk7XG4gICAgfSBlbHNlIGlmIChjaGFyY29kZSA8IDB4MDgwMCkge1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhjMCB8IGNoYXJjb2RlID4+IDYpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgfSBlbHNlIGlmIChjaGFyY29kZSA8IDB4ZDgwMCB8fCBjaGFyY29kZSA+PSAweGUwMDApIHtcbiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZTAgfCBjaGFyY29kZSA+PiAxMik7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhcmNvZGUgPj4gNiAmIDB4M2YpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzdXJyb2dhdGUgcGFpciwgc28gd2UnbGwgcmVjb25zaXR1dGUgdGhlIHBpZWNlcyBhbmQgd29ya1xuICAgICAgLy8gZnJvbSB0aGF0XG4gICAgICBpKys7XG4gICAgICBjaGFyY29kZSA9IDB4MTAwMDAgKyAoKGNoYXJjb2RlICYgMHgzZmYpIDw8IDEwIHwgc3RyLmNoYXJDb2RlQXQoaSkgJiAweDNmZik7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGYwIHwgY2hhcmNvZGUgPj4gMTgpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlID4+IDEyICYgMHgzZik7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhcmNvZGUgPj4gNiAmIDB4M2YpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cblxudmFyIERFRkFVTFRfUFJPUFMgPSB7XG4gIHNpemU6IDEyOCxcbiAgbGV2ZWw6ICdMJyxcbiAgYmdDb2xvcjogJyNGRkZGRkYnLFxuICBmZ0NvbG9yOiAnIzAwMDAwMCdcbn07XG52YXIgUFJPUF9UWVBFUyA9IHtcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgbGV2ZWw6IFByb3BUeXBlcy5vbmVPZihbJ0wnLCAnTScsICdRJywgJ0gnXSksXG4gIGJnQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZnQ29sb3I6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBRUkNvZGVDYW52YXMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFFSQ29kZUNhbnZhcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUVJDb2RlQ2FudmFzKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRUkNvZGVDYW52YXMpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgKF90ZW1wID0gX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFFSQ29kZUNhbnZhcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFFSQ29kZUNhbnZhcykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX2NhbnZhc1wiLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdm9pZCAwXG4gICAgfSksIF90ZW1wKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUVJDb2RlQ2FudmFzLCBbe1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhRUkNvZGVDYW52YXMucHJvcFR5cGVzKS5zb21lKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIucHJvcHNba10gIT09IG5leHRQcm9wc1trXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgc2l6ZSA9IF9wcm9wcy5zaXplLFxuICAgICAgICAgIGxldmVsID0gX3Byb3BzLmxldmVsLFxuICAgICAgICAgIGJnQ29sb3IgPSBfcHJvcHMuYmdDb2xvcixcbiAgICAgICAgICBmZ0NvbG9yID0gX3Byb3BzLmZnQ29sb3I7IC8vIFdlJ2xsIHVzZSB0eXBlPT09LTEgdG8gZm9yY2UgUVJDb2RlIHRvIGF1dG9tYXRpY2FsbHkgcGljayB0aGUgYmVzdCB0eXBlXG5cbiAgICAgIHZhciBxcmNvZGUgPSBuZXcgUVJDb2RlSW1wbCgtMSwgRXJyb3JDb3JyZWN0TGV2ZWxbbGV2ZWxdKTtcbiAgICAgIHFyY29kZS5hZGREYXRhKGNvbnZlcnRTdHIodmFsdWUpKTtcbiAgICAgIHFyY29kZS5tYWtlKCk7XG5cbiAgICAgIGlmICh0aGlzLl9jYW52YXMgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2VsbHMgPSBxcmNvZGUubW9kdWxlcztcblxuICAgICAgICBpZiAoY2VsbHMgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGlsZVcgPSBzaXplIC8gY2VsbHMubGVuZ3RoO1xuICAgICAgICB2YXIgdGlsZUggPSBzaXplIC8gY2VsbHMubGVuZ3RoO1xuICAgICAgICB2YXIgc2NhbGUgPSAod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkgLyBnZXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvKGN0eCk7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggPSBzaXplICogc2NhbGU7XG4gICAgICAgIGN0eC5zY2FsZShzY2FsZSwgc2NhbGUpO1xuICAgICAgICBjZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChyb3csIHJkeCkge1xuICAgICAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsLCBjZHgpIHtcbiAgICAgICAgICAgIGN0eCAmJiAoY3R4LmZpbGxTdHlsZSA9IGNlbGwgPyBmZ0NvbG9yIDogYmdDb2xvcik7XG4gICAgICAgICAgICB2YXIgdyA9IE1hdGguY2VpbCgoY2R4ICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKGNkeCAqIHRpbGVXKTtcbiAgICAgICAgICAgIHZhciBoID0gTWF0aC5jZWlsKChyZHggKyAxKSAqIHRpbGVIKSAtIE1hdGguZmxvb3IocmR4ICogdGlsZUgpO1xuICAgICAgICAgICAgY3R4ICYmIGN0eC5maWxsUmVjdChNYXRoLnJvdW5kKGNkeCAqIHRpbGVXKSwgTWF0aC5yb3VuZChyZHggKiB0aWxlSCksIHcsIGgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMyLnZhbHVlLFxuICAgICAgICAgIHNpemUgPSBfcHJvcHMyLnNpemUsXG4gICAgICAgICAgbGV2ZWwgPSBfcHJvcHMyLmxldmVsLFxuICAgICAgICAgIGJnQ29sb3IgPSBfcHJvcHMyLmJnQ29sb3IsXG4gICAgICAgICAgZmdDb2xvciA9IF9wcm9wczIuZmdDb2xvcixcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wczIuc3R5bGUsXG4gICAgICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMyLCBbXCJ2YWx1ZVwiLCBcInNpemVcIiwgXCJsZXZlbFwiLCBcImJnQ29sb3JcIiwgXCJmZ0NvbG9yXCIsIFwic3R5bGVcIl0pO1xuXG4gICAgICB2YXIgY2FudmFzU3R5bGUgPSBfZXh0ZW5kcyh7XG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgd2lkdGg6IHNpemVcbiAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogY2FudmFzU3R5bGUsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5fY2FudmFzID0gX3JlZjI7XG4gICAgICAgIH1cbiAgICAgIH0sIG90aGVyUHJvcHMpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUVJDb2RlQ2FudmFzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUVJDb2RlQ2FudmFzLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiBERUZBVUxUX1BST1BTXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShRUkNvZGVDYW52YXMsIFwicHJvcFR5cGVzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IFBST1BfVFlQRVNcbn0pO1xuXG52YXIgUVJDb2RlU1ZHID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoUVJDb2RlU1ZHLCBfUmVhY3QkQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gUVJDb2RlU1ZHKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRUkNvZGVTVkcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChRUkNvZGVTVkcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihRUkNvZGVTVkcpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRUkNvZGVTVkcsIFt7XG4gICAga2V5OiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKFFSQ29kZUNhbnZhcy5wcm9wVHlwZXMpLnNvbWUoZnVuY3Rpb24gKGspIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5wcm9wc1trXSAhPT0gbmV4dFByb3BzW2tdO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMzLnZhbHVlLFxuICAgICAgICAgIHNpemUgPSBfcHJvcHMzLnNpemUsXG4gICAgICAgICAgbGV2ZWwgPSBfcHJvcHMzLmxldmVsLFxuICAgICAgICAgIGJnQ29sb3IgPSBfcHJvcHMzLmJnQ29sb3IsXG4gICAgICAgICAgZmdDb2xvciA9IF9wcm9wczMuZmdDb2xvcixcbiAgICAgICAgICBvdGhlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczMsIFtcInZhbHVlXCIsIFwic2l6ZVwiLCBcImxldmVsXCIsIFwiYmdDb2xvclwiLCBcImZnQ29sb3JcIl0pOyAvLyBXZSdsbCB1c2UgdHlwZT09PS0xIHRvIGZvcmNlIFFSQ29kZSB0byBhdXRvbWF0aWNhbGx5IHBpY2sgdGhlIGJlc3QgdHlwZVxuXG5cbiAgICAgIHZhciBxcmNvZGUgPSBuZXcgUVJDb2RlSW1wbCgtMSwgRXJyb3JDb3JyZWN0TGV2ZWxbbGV2ZWxdKTtcbiAgICAgIHFyY29kZS5hZGREYXRhKGNvbnZlcnRTdHIodmFsdWUpKTtcbiAgICAgIHFyY29kZS5tYWtlKCk7XG4gICAgICB2YXIgY2VsbHMgPSBxcmNvZGUubW9kdWxlcztcblxuICAgICAgaWYgKGNlbGxzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRHJhd2luZyBzdHJhdGVneTogaW5zdGVhZCBvZiBhIHJlY3QgcGVyIG1vZHVsZSwgd2UncmUgZ29pbmcgdG8gY3JlYXRlIGFcbiAgICAgIC8vIHNpbmdsZSBwYXRoIGZvciB0aGUgZGFyayBtb2R1bGVzIGFuZCBsYXllciB0aGF0IG9uIHRvcCBvZiBhIGxpZ2h0IHJlY3QsXG4gICAgICAvLyBmb3IgYSB0b3RhbCBvZiAyIERPTSBub2Rlcy4gV2UgcGF5IGEgYml0IG1vcmUgaW4gc3RyaW5nIGNvbmNhdCBidXQgdGhhdCdzXG4gICAgICAvLyB3YXkgZmFzdGVyIHRoYW4gRE9NIG9wcy5cbiAgICAgIC8vIEZvciBsZXZlbCAxLCA0NDEgbm9kZXMgLT4gMlxuICAgICAgLy8gRm9yIGxldmVsIDQwLCAzMTMyOSAtPiAyXG5cblxuICAgICAgdmFyIG9wcyA9IFtdO1xuICAgICAgY2VsbHMuZm9yRWFjaChmdW5jdGlvbiAocm93LCB5KSB7XG4gICAgICAgIHZhciBsYXN0SXNEYXJrID0gZmFsc2U7XG4gICAgICAgIHZhciBzdGFydCA9IG51bGw7XG4gICAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsLCB4KSB7XG4gICAgICAgICAgaWYgKCFjZWxsICYmIHN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBNMCAwaDd2MUgweiBpbmplY3RzIHRoZSBzcGFjZSB3aXRoIHRoZSBtb3ZlIGFuZCBkcm9wZCB0aGUgY29tbWEsXG4gICAgICAgICAgICAvLyBzYXZpbmcgYSBjaGFyIHBlciBvcGVyYXRpb25cbiAgICAgICAgICAgIG9wcy5wdXNoKFwiTVwiLmNvbmNhdChzdGFydCwgXCIgXCIpLmNvbmNhdCh5LCBcImhcIikuY29uY2F0KHggLSBzdGFydCwgXCJ2MUhcIikuY29uY2F0KHN0YXJ0LCBcInpcIikpO1xuICAgICAgICAgICAgc3RhcnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gZW5kIG9mIHJvdywgY2xlYW4gdXAgb3Igc2tpcFxuXG5cbiAgICAgICAgICBpZiAoeCA9PT0gcm93Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgICAgICAvLyBXZSB3b3VsZCBoYXZlIGNsb3NlZCB0aGUgb3AgYWJvdmUgYWxyZWFkeSBzbyB0aGlzIGNhbiBvbmx5IG1lYW5cbiAgICAgICAgICAgICAgLy8gMisgbGlnaHQgbW9kdWxlcyBpbiBhIHJvdy5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gSnVzdCBhIHNpbmdsZSBkYXJrIG1vZHVsZS5cbiAgICAgICAgICAgICAgb3BzLnB1c2goXCJNXCIuY29uY2F0KHgsIFwiLFwiKS5jb25jYXQoeSwgXCIgaDF2MUhcIikuY29uY2F0KHgsIFwielwiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgZmluaXNoIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgICAgICAgICAgIG9wcy5wdXNoKFwiTVwiLmNvbmNhdChzdGFydCwgXCIsXCIpLmNvbmNhdCh5LCBcIiBoXCIpLmNvbmNhdCh4ICsgMSAtIHN0YXJ0LCBcInYxSFwiKS5jb25jYXQoc3RhcnQsIFwielwiKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2VsbCAmJiBzdGFydCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnQgPSB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICAgICAgc2hhcGVSZW5kZXJpbmc6IFwiY3Jpc3BFZGdlc1wiLFxuICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICB2aWV3Qm94OiBcIjAgMCBcIi5jb25jYXQoY2VsbHMubGVuZ3RoLCBcIiBcIikuY29uY2F0KGNlbGxzLmxlbmd0aClcbiAgICAgIH0sIG90aGVyUHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgICAgIGZpbGw6IGJnQ29sb3IsXG4gICAgICAgIGQ6IFwiTTAsMCBoXCIuY29uY2F0KGNlbGxzLmxlbmd0aCwgXCJ2XCIpLmNvbmNhdChjZWxscy5sZW5ndGgsIFwiSDB6XCIpXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgICAgICBmaWxsOiBmZ0NvbG9yLFxuICAgICAgICBkOiBvcHMuam9pbignJylcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUVJDb2RlU1ZHO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUVJDb2RlU1ZHLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiBERUZBVUxUX1BST1BTXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShRUkNvZGVTVkcsIFwicHJvcFR5cGVzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IFBST1BfVFlQRVNcbn0pO1xuXG52YXIgUVJDb2RlID0gZnVuY3Rpb24gUVJDb2RlKHByb3BzKSB7XG4gIHZhciByZW5kZXJBcyA9IHByb3BzLnJlbmRlckFzLFxuICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wicmVuZGVyQXNcIl0pO1xuXG4gIHZhciBDb21wb25lbnQgPSByZW5kZXJBcyA9PT0gJ3N2ZycgPyBRUkNvZGVTVkcgOiBRUkNvZGVDYW52YXM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgb3RoZXJQcm9wcyk7XG59O1xuXG5RUkNvZGUuZGVmYXVsdFByb3BzID0gX2V4dGVuZHMoe1xuICByZW5kZXJBczogJ2NhbnZhcydcbn0sIERFRkFVTFRfUFJPUFMpO1xubW9kdWxlLmV4cG9ydHMgPSBRUkNvZGU7IiwiLyogcVRpcDIgdjIuMi4wIHRpcHMgbW9kYWwgdmlld3BvcnQgc3ZnIGltYWdlbWFwIGllNiB8IHF0aXAyLmNvbSB8IExpY2Vuc2VkIE1JVCwgR1BMIHwgVGh1IE5vdiAyMSAyMDEzIDIwOjM0OjU5ICovXG4oZnVuY3Rpb24odCxlLGkpeyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSx0KTpqUXVlcnkmJiFqUXVlcnkuZm4ucXRpcCYmdChqUXVlcnkpfSkoZnVuY3Rpb24ocyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyh0LGUsaSxvKXt0aGlzLmlkPWksdGhpcy50YXJnZXQ9dCx0aGlzLnRvb2x0aXA9RSx0aGlzLmVsZW1lbnRzPXt0YXJnZXQ6dH0sdGhpcy5faWQ9WCtcIi1cIitpLHRoaXMudGltZXJzPXtpbWc6e319LHRoaXMub3B0aW9ucz1lLHRoaXMucGx1Z2lucz17fSx0aGlzLmNhY2hlPXtldmVudDp7fSx0YXJnZXQ6cygpLGRpc2FibGVkOmssYXR0cjpvLG9uVG9vbHRpcDprLGxhc3RDbGFzczpcIlwifSx0aGlzLnJlbmRlcmVkPXRoaXMuZGVzdHJveWVkPXRoaXMuZGlzYWJsZWQ9dGhpcy53YWl0aW5nPXRoaXMuaGlkZGVuRHVyaW5nV2FpdD10aGlzLnBvc2l0aW9uaW5nPXRoaXMudHJpZ2dlcmluZz1rfWZ1bmN0aW9uIG4odCl7cmV0dXJuIHQ9PT1FfHxcIm9iamVjdFwiIT09cy50eXBlKHQpfWZ1bmN0aW9uIHIodCl7cmV0dXJuIShzLmlzRnVuY3Rpb24odCl8fHQmJnQuYXR0cnx8dC5sZW5ndGh8fFwib2JqZWN0XCI9PT1zLnR5cGUodCkmJih0LmpxdWVyeXx8dC50aGVuKSl9ZnVuY3Rpb24gYSh0KXt2YXIgZSxpLG8sYTtyZXR1cm4gbih0KT9rOihuKHQubWV0YWRhdGEpJiYodC5tZXRhZGF0YT17dHlwZTp0Lm1ldGFkYXRhfSksXCJjb250ZW50XCJpbiB0JiYoZT10LmNvbnRlbnQsbihlKXx8ZS5qcXVlcnl8fGUuZG9uZT9lPXQuY29udGVudD17dGV4dDppPXIoZSk/azplfTppPWUudGV4dCxcImFqYXhcImluIGUmJihvPWUuYWpheCxhPW8mJm8ub25jZSE9PWssZGVsZXRlIGUuYWpheCxlLnRleHQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1pfHxzKHRoaXMpLmF0dHIoZS5vcHRpb25zLmNvbnRlbnQuYXR0cil8fFwiTG9hZGluZy4uLlwiLHI9cy5hamF4KHMuZXh0ZW5kKHt9LG8se2NvbnRleHQ6ZX0pKS50aGVuKG8uc3VjY2VzcyxFLG8uZXJyb3IpLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIHQmJmEmJmUuc2V0KFwiY29udGVudC50ZXh0XCIsdCksdH0sZnVuY3Rpb24odCxpLHMpe2UuZGVzdHJveWVkfHwwPT09dC5zdGF0dXN8fGUuc2V0KFwiY29udGVudC50ZXh0XCIsaStcIjogXCIrcyl9KTtyZXR1cm4gYT9uOihlLnNldChcImNvbnRlbnQudGV4dFwiLG4pLHIpfSksXCJ0aXRsZVwiaW4gZSYmKG4oZS50aXRsZSl8fChlLmJ1dHRvbj1lLnRpdGxlLmJ1dHRvbixlLnRpdGxlPWUudGl0bGUudGV4dCkscihlLnRpdGxlfHxrKSYmKGUudGl0bGU9aykpKSxcInBvc2l0aW9uXCJpbiB0JiZuKHQucG9zaXRpb24pJiYodC5wb3NpdGlvbj17bXk6dC5wb3NpdGlvbixhdDp0LnBvc2l0aW9ufSksXCJzaG93XCJpbiB0JiZuKHQuc2hvdykmJih0LnNob3c9dC5zaG93LmpxdWVyeT97dGFyZ2V0OnQuc2hvd306dC5zaG93PT09Vz97cmVhZHk6V306e2V2ZW50OnQuc2hvd30pLFwiaGlkZVwiaW4gdCYmbih0LmhpZGUpJiYodC5oaWRlPXQuaGlkZS5qcXVlcnk/e3RhcmdldDp0LmhpZGV9OntldmVudDp0LmhpZGV9KSxcInN0eWxlXCJpbiB0JiZuKHQuc3R5bGUpJiYodC5zdHlsZT17Y2xhc3Nlczp0LnN0eWxlfSkscy5lYWNoKFIsZnVuY3Rpb24oKXt0aGlzLnNhbml0aXplJiZ0aGlzLnNhbml0aXplKHQpfSksdCl9ZnVuY3Rpb24gaCh0LGUpe2Zvcih2YXIgaSxzPTAsbz10LG49ZS5zcGxpdChcIi5cIik7bz1vW25bcysrXV07KW4ubGVuZ3RoPnMmJihpPW8pO3JldHVybltpfHx0LG4ucG9wKCldfWZ1bmN0aW9uIGwodCxlKXt2YXIgaSxzLG87Zm9yKGkgaW4gdGhpcy5jaGVja3MpZm9yKHMgaW4gdGhpcy5jaGVja3NbaV0pKG89UmVnRXhwKHMsXCJpXCIpLmV4ZWModCkpJiYoZS5wdXNoKG8pLChcImJ1aWx0aW5cIj09PWl8fHRoaXMucGx1Z2luc1tpXSkmJnRoaXMuY2hlY2tzW2ldW3NdLmFwcGx5KHRoaXMucGx1Z2luc1tpXXx8dGhpcyxlKSl9ZnVuY3Rpb24gYyh0KXtyZXR1cm4gRy5jb25jYXQoXCJcIikuam9pbih0P1wiLVwiK3QrXCIgXCI6XCIgXCIpfWZ1bmN0aW9uIGQoaSl7cmV0dXJuIGkmJnt0eXBlOmkudHlwZSxwYWdlWDppLnBhZ2VYLHBhZ2VZOmkucGFnZVksdGFyZ2V0OmkudGFyZ2V0LHJlbGF0ZWRUYXJnZXQ6aS5yZWxhdGVkVGFyZ2V0LHNjcm9sbFg6aS5zY3JvbGxYfHx0LnBhZ2VYT2Zmc2V0fHxlLmJvZHkuc2Nyb2xsTGVmdHx8ZS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxzY3JvbGxZOmkuc2Nyb2xsWXx8dC5wYWdlWU9mZnNldHx8ZS5ib2R5LnNjcm9sbFRvcHx8ZS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wfXx8e319ZnVuY3Rpb24gcCh0LGUpe3JldHVybiBlPjA/c2V0VGltZW91dChzLnByb3h5KHQsdGhpcyksZSk6KHQuY2FsbCh0aGlzKSxpKX1mdW5jdGlvbiB1KHQpe3JldHVybiB0aGlzLnRvb2x0aXAuaGFzQ2xhc3MoZWUpP2s6KGNsZWFyVGltZW91dCh0aGlzLnRpbWVycy5zaG93KSxjbGVhclRpbWVvdXQodGhpcy50aW1lcnMuaGlkZSksdGhpcy50aW1lcnMuc2hvdz1wLmNhbGwodGhpcyxmdW5jdGlvbigpe3RoaXMudG9nZ2xlKFcsdCl9LHRoaXMub3B0aW9ucy5zaG93LmRlbGF5KSxpKX1mdW5jdGlvbiBmKHQpe2lmKHRoaXMudG9vbHRpcC5oYXNDbGFzcyhlZSkpcmV0dXJuIGs7dmFyIGU9cyh0LnJlbGF0ZWRUYXJnZXQpLGk9ZS5jbG9zZXN0KFUpWzBdPT09dGhpcy50b29sdGlwWzBdLG89ZVswXT09PXRoaXMub3B0aW9ucy5zaG93LnRhcmdldFswXTtpZihjbGVhclRpbWVvdXQodGhpcy50aW1lcnMuc2hvdyksY2xlYXJUaW1lb3V0KHRoaXMudGltZXJzLmhpZGUpLHRoaXMhPT1lWzBdJiZcIm1vdXNlXCI9PT10aGlzLm9wdGlvbnMucG9zaXRpb24udGFyZ2V0JiZpfHx0aGlzLm9wdGlvbnMuaGlkZS5maXhlZCYmL21vdXNlKG91dHxsZWF2ZXxtb3ZlKS8udGVzdCh0LnR5cGUpJiYoaXx8bykpdHJ5e3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpfWNhdGNoKG4pe31lbHNlIHRoaXMudGltZXJzLmhpZGU9cC5jYWxsKHRoaXMsZnVuY3Rpb24oKXt0aGlzLnRvZ2dsZShrLHQpfSx0aGlzLm9wdGlvbnMuaGlkZS5kZWxheSx0aGlzKX1mdW5jdGlvbiBnKHQpe3JldHVybiB0aGlzLnRvb2x0aXAuaGFzQ2xhc3MoZWUpfHwhdGhpcy5vcHRpb25zLmhpZGUuaW5hY3RpdmU/azooY2xlYXJUaW1lb3V0KHRoaXMudGltZXJzLmluYWN0aXZlKSx0aGlzLnRpbWVycy5pbmFjdGl2ZT1wLmNhbGwodGhpcyxmdW5jdGlvbigpe3RoaXMuaGlkZSh0KX0sdGhpcy5vcHRpb25zLmhpZGUuaW5hY3RpdmUpLGkpfWZ1bmN0aW9uIG0odCl7dGhpcy5yZW5kZXJlZCYmdGhpcy50b29sdGlwWzBdLm9mZnNldFdpZHRoPjAmJnRoaXMucmVwb3NpdGlvbih0KX1mdW5jdGlvbiB2KHQsaSxvKXtzKGUuYm9keSkuZGVsZWdhdGUodCwoaS5zcGxpdD9pOmkuam9pbihoZStcIiBcIikpK2hlLGZ1bmN0aW9uKCl7dmFyIHQ9VC5hcGlbcy5hdHRyKHRoaXMsSCldO3QmJiF0LmRpc2FibGVkJiZvLmFwcGx5KHQsYXJndW1lbnRzKX0pfWZ1bmN0aW9uIHkodCxpLG4pe3ZhciByLGgsbCxjLGQscD1zKGUuYm9keSksdT10WzBdPT09ZT9wOnQsZj10Lm1ldGFkYXRhP3QubWV0YWRhdGEobi5tZXRhZGF0YSk6RSxnPVwiaHRtbDVcIj09PW4ubWV0YWRhdGEudHlwZSYmZj9mW24ubWV0YWRhdGEubmFtZV06RSxtPXQuZGF0YShuLm1ldGFkYXRhLm5hbWV8fFwicXRpcG9wdHNcIik7dHJ5e209XCJzdHJpbmdcIj09dHlwZW9mIG0/cy5wYXJzZUpTT04obSk6bX1jYXRjaCh2KXt9aWYoYz1zLmV4dGVuZChXLHt9LFQuZGVmYXVsdHMsbixcIm9iamVjdFwiPT10eXBlb2YgbT9hKG0pOkUsYShnfHxmKSksaD1jLnBvc2l0aW9uLGMuaWQ9aSxcImJvb2xlYW5cIj09dHlwZW9mIGMuY29udGVudC50ZXh0KXtpZihsPXQuYXR0cihjLmNvbnRlbnQuYXR0ciksYy5jb250ZW50LmF0dHI9PT1rfHwhbClyZXR1cm4gaztjLmNvbnRlbnQudGV4dD1sfWlmKGguY29udGFpbmVyLmxlbmd0aHx8KGguY29udGFpbmVyPXApLGgudGFyZ2V0PT09ayYmKGgudGFyZ2V0PXUpLGMuc2hvdy50YXJnZXQ9PT1rJiYoYy5zaG93LnRhcmdldD11KSxjLnNob3cuc29sbz09PVcmJihjLnNob3cuc29sbz1oLmNvbnRhaW5lci5jbG9zZXN0KFwiYm9keVwiKSksYy5oaWRlLnRhcmdldD09PWsmJihjLmhpZGUudGFyZ2V0PXUpLGMucG9zaXRpb24udmlld3BvcnQ9PT1XJiYoYy5wb3NpdGlvbi52aWV3cG9ydD1oLmNvbnRhaW5lciksaC5jb250YWluZXI9aC5jb250YWluZXIuZXEoMCksaC5hdD1uZXcgeihoLmF0LFcpLGgubXk9bmV3IHooaC5teSksdC5kYXRhKFgpKWlmKGMub3ZlcndyaXRlKXQucXRpcChcImRlc3Ryb3lcIiwhMCk7ZWxzZSBpZihjLm92ZXJ3cml0ZT09PWspcmV0dXJuIGs7cmV0dXJuIHQuYXR0cihZLGkpLGMuc3VwcHJlc3MmJihkPXQuYXR0cihcInRpdGxlXCIpKSYmdC5yZW1vdmVBdHRyKFwidGl0bGVcIikuYXR0cihzZSxkKS5hdHRyKFwidGl0bGVcIixcIlwiKSxyPW5ldyBvKHQsYyxpLCEhbCksdC5kYXRhKFgsciksdC5vbmUoXCJyZW1vdmUucXRpcC1cIitpK1wiIHJlbW92ZXF0aXAucXRpcC1cIitpLGZ1bmN0aW9uKCl7dmFyIHQ7KHQ9cyh0aGlzKS5kYXRhKFgpKSYmdC5kZXN0cm95KCEwKX0pLHJ9ZnVuY3Rpb24gYih0KXtyZXR1cm4gdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpfWZ1bmN0aW9uIHcodCxlKXt2YXIgcyxvLG49ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLHI9KGUrXCIgXCIrYmUuam9pbihuK1wiIFwiKStuKS5zcGxpdChcIiBcIiksYT0wO2lmKHllW2VdKXJldHVybiB0LmNzcyh5ZVtlXSk7Zm9yKDtzPXJbYSsrXTspaWYoKG89dC5jc3MocykpIT09aSlyZXR1cm4geWVbZV09cyxvfWZ1bmN0aW9uIF8odCxlKXtyZXR1cm4gTWF0aC5jZWlsKHBhcnNlRmxvYXQodyh0LGUpKSl9ZnVuY3Rpb24geCh0LGUpe3RoaXMuX25zPVwidGlwXCIsdGhpcy5vcHRpb25zPWUsdGhpcy5vZmZzZXQ9ZS5vZmZzZXQsdGhpcy5zaXplPVtlLndpZHRoLGUuaGVpZ2h0XSx0aGlzLmluaXQodGhpcy5xdGlwPXQpfWZ1bmN0aW9uIHEodCxlKXt0aGlzLm9wdGlvbnM9ZSx0aGlzLl9ucz1cIi1tb2RhbFwiLHRoaXMuaW5pdCh0aGlzLnF0aXA9dCl9ZnVuY3Rpb24gQyh0KXt0aGlzLl9ucz1cImllNlwiLHRoaXMuaW5pdCh0aGlzLnF0aXA9dCl9dmFyIFQsaix6LE0sSSxXPSEwLGs9ITEsRT1udWxsLFM9XCJ4XCIsTD1cInlcIixBPVwid2lkdGhcIixCPVwiaGVpZ2h0XCIsRD1cInRvcFwiLEY9XCJsZWZ0XCIsTz1cImJvdHRvbVwiLFA9XCJyaWdodFwiLE49XCJjZW50ZXJcIiwkPVwiZmxpcGludmVydFwiLFY9XCJzaGlmdFwiLFI9e30sWD1cInF0aXBcIixZPVwiZGF0YS1oYXNxdGlwXCIsSD1cImRhdGEtcXRpcC1pZFwiLEc9W1widWktd2lkZ2V0XCIsXCJ1aS10b29sdGlwXCJdLFU9XCIuXCIrWCxRPVwiY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlbGVhdmUgbW91c2VlbnRlclwiLnNwbGl0KFwiIFwiKSxKPVgrXCItZml4ZWRcIixLPVgrXCItZGVmYXVsdFwiLFo9WCtcIi1mb2N1c1wiLHRlPVgrXCItaG92ZXJcIixlZT1YK1wiLWRpc2FibGVkXCIsaWU9XCJfcmVwbGFjZWRCeXFUaXBcIixzZT1cIm9sZHRpdGxlXCIsb2U9e2llOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTMsaT1lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7KGkuaW5uZXJIVE1MPVwiPCEtLVtpZiBndCBJRSBcIisgKyt0K1wiXT48aT48L2k+PCFbZW5kaWZdLS0+XCIpJiZpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaVwiKVswXTspO3JldHVybiB0PjQ/dDowLzB9KCksaU9TOnBhcnNlRmxvYXQoKFwiXCIrKC9DUFUuKk9TIChbMC05X117MSw1fSl8KENQVSBsaWtlKS4qQXBwbGVXZWJLaXQuKk1vYmlsZS9pLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCl8fFswLFwiXCJdKVsxXSkucmVwbGFjZShcInVuZGVmaW5lZFwiLFwiM18yXCIpLnJlcGxhY2UoXCJfXCIsXCIuXCIpLnJlcGxhY2UoXCJfXCIsXCJcIikpfHxrfTtqPW8ucHJvdG90eXBlLGouX3doZW49ZnVuY3Rpb24odCl7cmV0dXJuIHMud2hlbi5hcHBseShzLHQpfSxqLnJlbmRlcj1mdW5jdGlvbih0KXtpZih0aGlzLnJlbmRlcmVkfHx0aGlzLmRlc3Ryb3llZClyZXR1cm4gdGhpczt2YXIgZSxpPXRoaXMsbz10aGlzLm9wdGlvbnMsbj10aGlzLmNhY2hlLHI9dGhpcy5lbGVtZW50cyxhPW8uY29udGVudC50ZXh0LGg9by5jb250ZW50LnRpdGxlLGw9by5jb250ZW50LmJ1dHRvbixjPW8ucG9zaXRpb24sZD0oXCIuXCIrdGhpcy5faWQrXCIgXCIsW10pO3JldHVybiBzLmF0dHIodGhpcy50YXJnZXRbMF0sXCJhcmlhLWRlc2NyaWJlZGJ5XCIsdGhpcy5faWQpLHRoaXMudG9vbHRpcD1yLnRvb2x0aXA9ZT1zKFwiPGRpdi8+XCIse2lkOnRoaXMuX2lkLFwiY2xhc3NcIjpbWCxLLG8uc3R5bGUuY2xhc3NlcyxYK1wiLXBvcy1cIitvLnBvc2l0aW9uLm15LmFiYnJldigpXS5qb2luKFwiIFwiKSx3aWR0aDpvLnN0eWxlLndpZHRofHxcIlwiLGhlaWdodDpvLnN0eWxlLmhlaWdodHx8XCJcIix0cmFja2luZzpcIm1vdXNlXCI9PT1jLnRhcmdldCYmYy5hZGp1c3QubW91c2Uscm9sZTpcImFsZXJ0XCIsXCJhcmlhLWxpdmVcIjpcInBvbGl0ZVwiLFwiYXJpYS1hdG9taWNcIjprLFwiYXJpYS1kZXNjcmliZWRieVwiOnRoaXMuX2lkK1wiLWNvbnRlbnRcIixcImFyaWEtaGlkZGVuXCI6V30pLnRvZ2dsZUNsYXNzKGVlLHRoaXMuZGlzYWJsZWQpLmF0dHIoSCx0aGlzLmlkKS5kYXRhKFgsdGhpcykuYXBwZW5kVG8oYy5jb250YWluZXIpLmFwcGVuZChyLmNvbnRlbnQ9cyhcIjxkaXYgLz5cIix7XCJjbGFzc1wiOlgrXCItY29udGVudFwiLGlkOnRoaXMuX2lkK1wiLWNvbnRlbnRcIixcImFyaWEtYXRvbWljXCI6V30pKSx0aGlzLnJlbmRlcmVkPS0xLHRoaXMucG9zaXRpb25pbmc9VyxoJiYodGhpcy5fY3JlYXRlVGl0bGUoKSxzLmlzRnVuY3Rpb24oaCl8fGQucHVzaCh0aGlzLl91cGRhdGVUaXRsZShoLGspKSksbCYmdGhpcy5fY3JlYXRlQnV0dG9uKCkscy5pc0Z1bmN0aW9uKGEpfHxkLnB1c2godGhpcy5fdXBkYXRlQ29udGVudChhLGspKSx0aGlzLnJlbmRlcmVkPVcsdGhpcy5fc2V0V2lkZ2V0KCkscy5lYWNoKFIsZnVuY3Rpb24odCl7dmFyIGU7XCJyZW5kZXJcIj09PXRoaXMuaW5pdGlhbGl6ZSYmKGU9dGhpcyhpKSkmJihpLnBsdWdpbnNbdF09ZSl9KSx0aGlzLl91bmFzc2lnbkV2ZW50cygpLHRoaXMuX2Fzc2lnbkV2ZW50cygpLHRoaXMuX3doZW4oZCkudGhlbihmdW5jdGlvbigpe2kuX3RyaWdnZXIoXCJyZW5kZXJcIiksaS5wb3NpdGlvbmluZz1rLGkuaGlkZGVuRHVyaW5nV2FpdHx8IW8uc2hvdy5yZWFkeSYmIXR8fGkudG9nZ2xlKFcsbi5ldmVudCxrKSxpLmhpZGRlbkR1cmluZ1dhaXQ9a30pLFQuYXBpW3RoaXMuaWRdPXRoaXMsdGhpc30sai5kZXN0cm95PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtpZighdGhpcy5kZXN0cm95ZWQpe3RoaXMuZGVzdHJveWVkPVc7dmFyIHQ9dGhpcy50YXJnZXQsZT10LmF0dHIoc2UpO3RoaXMucmVuZGVyZWQmJnRoaXMudG9vbHRpcC5zdG9wKDEsMCkuZmluZChcIipcIikucmVtb3ZlKCkuZW5kKCkucmVtb3ZlKCkscy5lYWNoKHRoaXMucGx1Z2lucyxmdW5jdGlvbigpe3RoaXMuZGVzdHJveSYmdGhpcy5kZXN0cm95KCl9KSxjbGVhclRpbWVvdXQodGhpcy50aW1lcnMuc2hvdyksY2xlYXJUaW1lb3V0KHRoaXMudGltZXJzLmhpZGUpLHRoaXMuX3VuYXNzaWduRXZlbnRzKCksdC5yZW1vdmVEYXRhKFgpLnJlbW92ZUF0dHIoSCkucmVtb3ZlQXR0cihZKS5yZW1vdmVBdHRyKFwiYXJpYS1kZXNjcmliZWRieVwiKSx0aGlzLm9wdGlvbnMuc3VwcHJlc3MmJmUmJnQuYXR0cihcInRpdGxlXCIsZSkucmVtb3ZlQXR0cihzZSksdGhpcy5fdW5iaW5kKHQpLHRoaXMub3B0aW9ucz10aGlzLmVsZW1lbnRzPXRoaXMuY2FjaGU9dGhpcy50aW1lcnM9dGhpcy5wbHVnaW5zPXRoaXMubW91c2U9RSxkZWxldGUgVC5hcGlbdGhpcy5pZF19fXJldHVybiB0aGlzLmRlc3Ryb3llZD90aGlzLnRhcmdldDoodD09PVcmJlwiaGlkZVwiIT09dGhpcy50cmlnZ2VyaW5nfHwhdGhpcy5yZW5kZXJlZD9lLmNhbGwodGhpcyk6KHRoaXMudG9vbHRpcC5vbmUoXCJ0b29sdGlwaGlkZGVuXCIscy5wcm94eShlLHRoaXMpKSwhdGhpcy50cmlnZ2VyaW5nJiZ0aGlzLmhpZGUoKSksdGhpcy50YXJnZXQpfSxNPWouY2hlY2tzPXtidWlsdGluOntcIl5pZCRcIjpmdW5jdGlvbih0LGUsaSxvKXt2YXIgbj1pPT09Vz9ULm5leHRpZDppLHI9WCtcIi1cIituO24hPT1rJiZuLmxlbmd0aD4wJiYhcyhcIiNcIityKS5sZW5ndGg/KHRoaXMuX2lkPXIsdGhpcy5yZW5kZXJlZCYmKHRoaXMudG9vbHRpcFswXS5pZD10aGlzLl9pZCx0aGlzLmVsZW1lbnRzLmNvbnRlbnRbMF0uaWQ9dGhpcy5faWQrXCItY29udGVudFwiLHRoaXMuZWxlbWVudHMudGl0bGVbMF0uaWQ9dGhpcy5faWQrXCItdGl0bGVcIikpOnRbZV09b30sXCJecHJlcmVuZGVyXCI6ZnVuY3Rpb24odCxlLGkpe2kmJiF0aGlzLnJlbmRlcmVkJiZ0aGlzLnJlbmRlcih0aGlzLm9wdGlvbnMuc2hvdy5yZWFkeSl9LFwiXmNvbnRlbnQudGV4dCRcIjpmdW5jdGlvbih0LGUsaSl7dGhpcy5fdXBkYXRlQ29udGVudChpKX0sXCJeY29udGVudC5hdHRyJFwiOmZ1bmN0aW9uKHQsZSxpLHMpe3RoaXMub3B0aW9ucy5jb250ZW50LnRleHQ9PT10aGlzLnRhcmdldC5hdHRyKHMpJiZ0aGlzLl91cGRhdGVDb250ZW50KHRoaXMudGFyZ2V0LmF0dHIoaSkpfSxcIl5jb250ZW50LnRpdGxlJFwiOmZ1bmN0aW9uKHQsZSxzKXtyZXR1cm4gcz8ocyYmIXRoaXMuZWxlbWVudHMudGl0bGUmJnRoaXMuX2NyZWF0ZVRpdGxlKCksdGhpcy5fdXBkYXRlVGl0bGUocyksaSk6dGhpcy5fcmVtb3ZlVGl0bGUoKX0sXCJeY29udGVudC5idXR0b24kXCI6ZnVuY3Rpb24odCxlLGkpe3RoaXMuX3VwZGF0ZUJ1dHRvbihpKX0sXCJeY29udGVudC50aXRsZS4odGV4dHxidXR0b24pJFwiOmZ1bmN0aW9uKHQsZSxpKXt0aGlzLnNldChcImNvbnRlbnQuXCIrZSxpKX0sXCJecG9zaXRpb24uKG15fGF0KSRcIjpmdW5jdGlvbih0LGUsaSl7XCJzdHJpbmdcIj09dHlwZW9mIGkmJih0W2VdPW5ldyB6KGksXCJhdFwiPT09ZSkpfSxcIl5wb3NpdGlvbi5jb250YWluZXIkXCI6ZnVuY3Rpb24odCxlLGkpe3RoaXMucmVuZGVyZWQmJnRoaXMudG9vbHRpcC5hcHBlbmRUbyhpKX0sXCJec2hvdy5yZWFkeSRcIjpmdW5jdGlvbih0LGUsaSl7aSYmKCF0aGlzLnJlbmRlcmVkJiZ0aGlzLnJlbmRlcihXKXx8dGhpcy50b2dnbGUoVykpfSxcIl5zdHlsZS5jbGFzc2VzJFwiOmZ1bmN0aW9uKHQsZSxpLHMpe3RoaXMucmVuZGVyZWQmJnRoaXMudG9vbHRpcC5yZW1vdmVDbGFzcyhzKS5hZGRDbGFzcyhpKX0sXCJec3R5bGUuKHdpZHRofGhlaWdodClcIjpmdW5jdGlvbih0LGUsaSl7dGhpcy5yZW5kZXJlZCYmdGhpcy50b29sdGlwLmNzcyhlLGkpfSxcIl5zdHlsZS53aWRnZXR8Y29udGVudC50aXRsZVwiOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXJlZCYmdGhpcy5fc2V0V2lkZ2V0KCl9LFwiXnN0eWxlLmRlZlwiOmZ1bmN0aW9uKHQsZSxpKXt0aGlzLnJlbmRlcmVkJiZ0aGlzLnRvb2x0aXAudG9nZ2xlQ2xhc3MoSywhIWkpfSxcIl5ldmVudHMuKHJlbmRlcnxzaG93fG1vdmV8aGlkZXxmb2N1c3xibHVyKSRcIjpmdW5jdGlvbih0LGUsaSl7dGhpcy5yZW5kZXJlZCYmdGhpcy50b29sdGlwWyhzLmlzRnVuY3Rpb24oaSk/XCJcIjpcInVuXCIpK1wiYmluZFwiXShcInRvb2x0aXBcIitlLGkpfSxcIl4oc2hvd3xoaWRlfHBvc2l0aW9uKS4oZXZlbnR8dGFyZ2V0fGZpeGVkfGluYWN0aXZlfGxlYXZlfGRpc3RhbmNlfHZpZXdwb3J0fGFkanVzdClcIjpmdW5jdGlvbigpe2lmKHRoaXMucmVuZGVyZWQpe3ZhciB0PXRoaXMub3B0aW9ucy5wb3NpdGlvbjt0aGlzLnRvb2x0aXAuYXR0cihcInRyYWNraW5nXCIsXCJtb3VzZVwiPT09dC50YXJnZXQmJnQuYWRqdXN0Lm1vdXNlKSx0aGlzLl91bmFzc2lnbkV2ZW50cygpLHRoaXMuX2Fzc2lnbkV2ZW50cygpfX19fSxqLmdldD1mdW5jdGlvbih0KXtpZih0aGlzLmRlc3Ryb3llZClyZXR1cm4gdGhpczt2YXIgZT1oKHRoaXMub3B0aW9ucyx0LnRvTG93ZXJDYXNlKCkpLGk9ZVswXVtlWzFdXTtyZXR1cm4gaS5wcmVjZWRhbmNlP2kuc3RyaW5nKCk6aX07dmFyIG5lPS9ecG9zaXRpb25cXC4obXl8YXR8YWRqdXN0fHRhcmdldHxjb250YWluZXJ8dmlld3BvcnQpfHN0eWxlfGNvbnRlbnR8c2hvd1xcLnJlYWR5L2kscmU9L15wcmVyZW5kZXJ8c2hvd1xcLnJlYWR5L2k7ai5zZXQ9ZnVuY3Rpb24odCxlKXtpZih0aGlzLmRlc3Ryb3llZClyZXR1cm4gdGhpczt2YXIgbyxuPXRoaXMucmVuZGVyZWQscj1rLGM9dGhpcy5vcHRpb25zO3JldHVybiB0aGlzLmNoZWNrcyxcInN0cmluZ1wiPT10eXBlb2YgdD8obz10LHQ9e30sdFtvXT1lKTp0PXMuZXh0ZW5kKHt9LHQpLHMuZWFjaCh0LGZ1bmN0aW9uKGUsbyl7aWYobiYmcmUudGVzdChlKSlyZXR1cm4gZGVsZXRlIHRbZV0saTt2YXIgYSxsPWgoYyxlLnRvTG93ZXJDYXNlKCkpO2E9bFswXVtsWzFdXSxsWzBdW2xbMV1dPW8mJm8ubm9kZVR5cGU/cyhvKTpvLHI9bmUudGVzdChlKXx8cix0W2VdPVtsWzBdLGxbMV0sbyxhXX0pLGEoYyksdGhpcy5wb3NpdGlvbmluZz1XLHMuZWFjaCh0LHMucHJveHkobCx0aGlzKSksdGhpcy5wb3NpdGlvbmluZz1rLHRoaXMucmVuZGVyZWQmJnRoaXMudG9vbHRpcFswXS5vZmZzZXRXaWR0aD4wJiZyJiZ0aGlzLnJlcG9zaXRpb24oXCJtb3VzZVwiPT09Yy5wb3NpdGlvbi50YXJnZXQ/RTp0aGlzLmNhY2hlLmV2ZW50KSx0aGlzfSxqLl91cGRhdGU9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLG89dGhpcy5jYWNoZTtyZXR1cm4gdGhpcy5yZW5kZXJlZCYmdD8ocy5pc0Z1bmN0aW9uKHQpJiYodD10LmNhbGwodGhpcy5lbGVtZW50cy50YXJnZXQsby5ldmVudCx0aGlzKXx8XCJcIikscy5pc0Z1bmN0aW9uKHQudGhlbik/KG8ud2FpdGluZz1XLHQudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gby53YWl0aW5nPWssaS5fdXBkYXRlKHQsZSl9LEUsZnVuY3Rpb24odCl7cmV0dXJuIGkuX3VwZGF0ZSh0LGUpfSkpOnQ9PT1rfHwhdCYmXCJcIiE9PXQ/azoodC5qcXVlcnkmJnQubGVuZ3RoPjA/ZS5lbXB0eSgpLmFwcGVuZCh0LmNzcyh7ZGlzcGxheTpcImJsb2NrXCIsdmlzaWJpbGl0eTpcInZpc2libGVcIn0pKTplLmh0bWwodCksdGhpcy5fd2FpdEZvckNvbnRlbnQoZSkudGhlbihmdW5jdGlvbih0KXt0LmltYWdlcyYmdC5pbWFnZXMubGVuZ3RoJiZpLnJlbmRlcmVkJiZpLnRvb2x0aXBbMF0ub2Zmc2V0V2lkdGg+MCYmaS5yZXBvc2l0aW9uKG8uZXZlbnQsIXQubGVuZ3RoKX0pKSk6a30sai5fd2FpdEZvckNvbnRlbnQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jYWNoZTtyZXR1cm4gZS53YWl0aW5nPVcsKHMuZm4uaW1hZ2VzTG9hZGVkP3QuaW1hZ2VzTG9hZGVkKCk6cy5EZWZlcnJlZCgpLnJlc29sdmUoW10pKS5kb25lKGZ1bmN0aW9uKCl7ZS53YWl0aW5nPWt9KS5wcm9taXNlKCl9LGouX3VwZGF0ZUNvbnRlbnQ9ZnVuY3Rpb24odCxlKXt0aGlzLl91cGRhdGUodCx0aGlzLmVsZW1lbnRzLmNvbnRlbnQsZSl9LGouX3VwZGF0ZVRpdGxlPWZ1bmN0aW9uKHQsZSl7dGhpcy5fdXBkYXRlKHQsdGhpcy5lbGVtZW50cy50aXRsZSxlKT09PWsmJnRoaXMuX3JlbW92ZVRpdGxlKGspfSxqLl9jcmVhdGVUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudHMsZT10aGlzLl9pZCtcIi10aXRsZVwiO3QudGl0bGViYXImJnRoaXMuX3JlbW92ZVRpdGxlKCksdC50aXRsZWJhcj1zKFwiPGRpdiAvPlwiLHtcImNsYXNzXCI6WCtcIi10aXRsZWJhciBcIisodGhpcy5vcHRpb25zLnN0eWxlLndpZGdldD9jKFwiaGVhZGVyXCIpOlwiXCIpfSkuYXBwZW5kKHQudGl0bGU9cyhcIjxkaXYgLz5cIix7aWQ6ZSxcImNsYXNzXCI6WCtcIi10aXRsZVwiLFwiYXJpYS1hdG9taWNcIjpXfSkpLmluc2VydEJlZm9yZSh0LmNvbnRlbnQpLmRlbGVnYXRlKFwiLnF0aXAtY2xvc2VcIixcIm1vdXNlZG93biBrZXlkb3duIG1vdXNldXAga2V5dXAgbW91c2VvdXRcIixmdW5jdGlvbih0KXtzKHRoaXMpLnRvZ2dsZUNsYXNzKFwidWktc3RhdGUtYWN0aXZlIHVpLXN0YXRlLWZvY3VzXCIsXCJkb3duXCI9PT10LnR5cGUuc3Vic3RyKC00KSl9KS5kZWxlZ2F0ZShcIi5xdGlwLWNsb3NlXCIsXCJtb3VzZW92ZXIgbW91c2VvdXRcIixmdW5jdGlvbih0KXtzKHRoaXMpLnRvZ2dsZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIixcIm1vdXNlb3ZlclwiPT09dC50eXBlKX0pLHRoaXMub3B0aW9ucy5jb250ZW50LmJ1dHRvbiYmdGhpcy5fY3JlYXRlQnV0dG9uKCl9LGouX3JlbW92ZVRpdGxlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZWxlbWVudHM7ZS50aXRsZSYmKGUudGl0bGViYXIucmVtb3ZlKCksZS50aXRsZWJhcj1lLnRpdGxlPWUuYnV0dG9uPUUsdCE9PWsmJnRoaXMucmVwb3NpdGlvbigpKX0sai5yZXBvc2l0aW9uPWZ1bmN0aW9uKGksbyl7aWYoIXRoaXMucmVuZGVyZWR8fHRoaXMucG9zaXRpb25pbmd8fHRoaXMuZGVzdHJveWVkKXJldHVybiB0aGlzO3RoaXMucG9zaXRpb25pbmc9Vzt2YXIgbixyLGE9dGhpcy5jYWNoZSxoPXRoaXMudG9vbHRpcCxsPXRoaXMub3B0aW9ucy5wb3NpdGlvbixjPWwudGFyZ2V0LGQ9bC5teSxwPWwuYXQsdT1sLnZpZXdwb3J0LGY9bC5jb250YWluZXIsZz1sLmFkanVzdCxtPWcubWV0aG9kLnNwbGl0KFwiIFwiKSx2PWgub3V0ZXJXaWR0aChrKSx5PWgub3V0ZXJIZWlnaHQoayksYj0wLHc9MCxfPWguY3NzKFwicG9zaXRpb25cIikseD17bGVmdDowLHRvcDowfSxxPWhbMF0ub2Zmc2V0V2lkdGg+MCxDPWkmJlwic2Nyb2xsXCI9PT1pLnR5cGUsVD1zKHQpLGo9ZlswXS5vd25lckRvY3VtZW50LHo9dGhpcy5tb3VzZTtpZihzLmlzQXJyYXkoYykmJjI9PT1jLmxlbmd0aClwPXt4OkYseTpEfSx4PXtsZWZ0OmNbMF0sdG9wOmNbMV19O2Vsc2UgaWYoXCJtb3VzZVwiPT09YylwPXt4OkYseTpEfSwhenx8IXoucGFnZVh8fCFnLm1vdXNlJiZpJiZpLnBhZ2VYP2kmJmkucGFnZVh8fCgoIWcubW91c2V8fHRoaXMub3B0aW9ucy5zaG93LmRpc3RhbmNlKSYmYS5vcmlnaW4mJmEub3JpZ2luLnBhZ2VYP2k9YS5vcmlnaW46KCFpfHxpJiYoXCJyZXNpemVcIj09PWkudHlwZXx8XCJzY3JvbGxcIj09PWkudHlwZSkpJiYoaT1hLmV2ZW50KSk6aT16LFwic3RhdGljXCIhPT1fJiYoeD1mLm9mZnNldCgpKSxqLmJvZHkub2Zmc2V0V2lkdGghPT0odC5pbm5lcldpZHRofHxqLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkmJihyPXMoZS5ib2R5KS5vZmZzZXQoKSkseD17bGVmdDppLnBhZ2VYLXgubGVmdCsociYmci5sZWZ0fHwwKSx0b3A6aS5wYWdlWS14LnRvcCsociYmci50b3B8fDApfSxnLm1vdXNlJiZDJiZ6JiYoeC5sZWZ0LT0oei5zY3JvbGxYfHwwKS1ULnNjcm9sbExlZnQoKSx4LnRvcC09KHouc2Nyb2xsWXx8MCktVC5zY3JvbGxUb3AoKSk7ZWxzZXtpZihcImV2ZW50XCI9PT1jP2kmJmkudGFyZ2V0JiZcInNjcm9sbFwiIT09aS50eXBlJiZcInJlc2l6ZVwiIT09aS50eXBlP2EudGFyZ2V0PXMoaS50YXJnZXQpOmkudGFyZ2V0fHwoYS50YXJnZXQ9dGhpcy5lbGVtZW50cy50YXJnZXQpOlwiZXZlbnRcIiE9PWMmJihhLnRhcmdldD1zKGMuanF1ZXJ5P2M6dGhpcy5lbGVtZW50cy50YXJnZXQpKSxjPWEudGFyZ2V0LGM9cyhjKS5lcSgwKSwwPT09Yy5sZW5ndGgpcmV0dXJuIHRoaXM7Y1swXT09PWV8fGNbMF09PT10PyhiPW9lLmlPUz90LmlubmVyV2lkdGg6Yy53aWR0aCgpLHc9b2UuaU9TP3QuaW5uZXJIZWlnaHQ6Yy5oZWlnaHQoKSxjWzBdPT09dCYmKHg9e3RvcDoodXx8Yykuc2Nyb2xsVG9wKCksbGVmdDoodXx8Yykuc2Nyb2xsTGVmdCgpfSkpOlIuaW1hZ2VtYXAmJmMuaXMoXCJhcmVhXCIpP249Ui5pbWFnZW1hcCh0aGlzLGMscCxSLnZpZXdwb3J0P206ayk6Ui5zdmcmJmMmJmNbMF0ub3duZXJTVkdFbGVtZW50P249Ui5zdmcodGhpcyxjLHAsUi52aWV3cG9ydD9tOmspOihiPWMub3V0ZXJXaWR0aChrKSx3PWMub3V0ZXJIZWlnaHQoaykseD1jLm9mZnNldCgpKSxuJiYoYj1uLndpZHRoLHc9bi5oZWlnaHQscj1uLm9mZnNldCx4PW4ucG9zaXRpb24pLHg9dGhpcy5yZXBvc2l0aW9uLm9mZnNldChjLHgsZiksKG9lLmlPUz4zLjEmJjQuMT5vZS5pT1N8fG9lLmlPUz49NC4zJiY0LjMzPm9lLmlPU3x8IW9lLmlPUyYmXCJmaXhlZFwiPT09XykmJih4LmxlZnQtPVQuc2Nyb2xsTGVmdCgpLHgudG9wLT1ULnNjcm9sbFRvcCgpKSwoIW58fG4mJm4uYWRqdXN0YWJsZSE9PWspJiYoeC5sZWZ0Kz1wLng9PT1QP2I6cC54PT09Tj9iLzI6MCx4LnRvcCs9cC55PT09Tz93OnAueT09PU4/dy8yOjApfXJldHVybiB4LmxlZnQrPWcueCsoZC54PT09UD8tdjpkLng9PT1OPy12LzI6MCkseC50b3ArPWcueSsoZC55PT09Tz8teTpkLnk9PT1OPy15LzI6MCksUi52aWV3cG9ydD8oeC5hZGp1c3RlZD1SLnZpZXdwb3J0KHRoaXMseCxsLGIsdyx2LHkpLHImJnguYWRqdXN0ZWQubGVmdCYmKHgubGVmdCs9ci5sZWZ0KSxyJiZ4LmFkanVzdGVkLnRvcCYmKHgudG9wKz1yLnRvcCkpOnguYWRqdXN0ZWQ9e2xlZnQ6MCx0b3A6MH0sdGhpcy5fdHJpZ2dlcihcIm1vdmVcIixbeCx1LmVsZW18fHVdLGkpPyhkZWxldGUgeC5hZGp1c3RlZCxvPT09a3x8IXF8fGlzTmFOKHgubGVmdCl8fGlzTmFOKHgudG9wKXx8XCJtb3VzZVwiPT09Y3x8IXMuaXNGdW5jdGlvbihsLmVmZmVjdCk/aC5jc3MoeCk6cy5pc0Z1bmN0aW9uKGwuZWZmZWN0KSYmKGwuZWZmZWN0LmNhbGwoaCx0aGlzLHMuZXh0ZW5kKHt9LHgpKSxoLnF1ZXVlKGZ1bmN0aW9uKHQpe3ModGhpcykuY3NzKHtvcGFjaXR5OlwiXCIsaGVpZ2h0OlwiXCJ9KSxvZS5pZSYmdGhpcy5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJmaWx0ZXJcIiksdCgpfSkpLHRoaXMucG9zaXRpb25pbmc9ayx0aGlzKTp0aGlzfSxqLnJlcG9zaXRpb24ub2Zmc2V0PWZ1bmN0aW9uKHQsaSxvKXtmdW5jdGlvbiBuKHQsZSl7aS5sZWZ0Kz1lKnQuc2Nyb2xsTGVmdCgpLGkudG9wKz1lKnQuc2Nyb2xsVG9wKCl9aWYoIW9bMF0pcmV0dXJuIGk7dmFyIHIsYSxoLGwsYz1zKHRbMF0ub3duZXJEb2N1bWVudCksZD0hIW9lLmllJiZcIkNTUzFDb21wYXRcIiE9PWUuY29tcGF0TW9kZSxwPW9bMF07ZG9cInN0YXRpY1wiIT09KGE9cy5jc3MocCxcInBvc2l0aW9uXCIpKSYmKFwiZml4ZWRcIj09PWE/KGg9cC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuKGMsLTEpKTooaD1zKHApLnBvc2l0aW9uKCksaC5sZWZ0Kz1wYXJzZUZsb2F0KHMuY3NzKHAsXCJib3JkZXJMZWZ0V2lkdGhcIikpfHwwLGgudG9wKz1wYXJzZUZsb2F0KHMuY3NzKHAsXCJib3JkZXJUb3BXaWR0aFwiKSl8fDApLGkubGVmdC09aC5sZWZ0KyhwYXJzZUZsb2F0KHMuY3NzKHAsXCJtYXJnaW5MZWZ0XCIpKXx8MCksaS50b3AtPWgudG9wKyhwYXJzZUZsb2F0KHMuY3NzKHAsXCJtYXJnaW5Ub3BcIikpfHwwKSxyfHxcImhpZGRlblwiPT09KGw9cy5jc3MocCxcIm92ZXJmbG93XCIpKXx8XCJ2aXNpYmxlXCI9PT1sfHwocj1zKHApKSk7d2hpbGUocD1wLm9mZnNldFBhcmVudCk7cmV0dXJuIHImJihyWzBdIT09Y1swXXx8ZCkmJm4ociwxKSxpfTt2YXIgYWU9KHo9ai5yZXBvc2l0aW9uLkNvcm5lcj1mdW5jdGlvbih0LGUpe3Q9KFwiXCIrdCkucmVwbGFjZSgvKFtBLVpdKS8sXCIgJDFcIikucmVwbGFjZSgvbWlkZGxlL2dpLE4pLnRvTG93ZXJDYXNlKCksdGhpcy54PSh0Lm1hdGNoKC9sZWZ0fHJpZ2h0L2kpfHx0Lm1hdGNoKC9jZW50ZXIvKXx8W1wiaW5oZXJpdFwiXSlbMF0udG9Mb3dlckNhc2UoKSx0aGlzLnk9KHQubWF0Y2goL3RvcHxib3R0b218Y2VudGVyL2kpfHxbXCJpbmhlcml0XCJdKVswXS50b0xvd2VyQ2FzZSgpLHRoaXMuZm9yY2VZPSEhZTt2YXIgaT10LmNoYXJBdCgwKTt0aGlzLnByZWNlZGFuY2U9XCJ0XCI9PT1pfHxcImJcIj09PWk/TDpTfSkucHJvdG90eXBlO2FlLmludmVydD1mdW5jdGlvbih0LGUpe3RoaXNbdF09dGhpc1t0XT09PUY/UDp0aGlzW3RdPT09UD9GOmV8fHRoaXNbdF19LGFlLnN0cmluZz1mdW5jdGlvbigpe3ZhciB0PXRoaXMueCxlPXRoaXMueTtyZXR1cm4gdD09PWU/dDp0aGlzLnByZWNlZGFuY2U9PT1MfHx0aGlzLmZvcmNlWSYmXCJjZW50ZXJcIiE9PWU/ZStcIiBcIit0OnQrXCIgXCIrZX0sYWUuYWJicmV2PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zdHJpbmcoKS5zcGxpdChcIiBcIik7cmV0dXJuIHRbMF0uY2hhckF0KDApKyh0WzFdJiZ0WzFdLmNoYXJBdCgwKXx8XCJcIil9LGFlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB6KHRoaXMuc3RyaW5nKCksdGhpcy5mb3JjZVkpfSxqLnRvZ2dsZT1mdW5jdGlvbih0LGkpe3ZhciBvPXRoaXMuY2FjaGUsbj10aGlzLm9wdGlvbnMscj10aGlzLnRvb2x0aXA7aWYoaSl7aWYoL292ZXJ8ZW50ZXIvLnRlc3QoaS50eXBlKSYmL291dHxsZWF2ZS8udGVzdChvLmV2ZW50LnR5cGUpJiZuLnNob3cudGFyZ2V0LmFkZChpLnRhcmdldCkubGVuZ3RoPT09bi5zaG93LnRhcmdldC5sZW5ndGgmJnIuaGFzKGkucmVsYXRlZFRhcmdldCkubGVuZ3RoKXJldHVybiB0aGlzO28uZXZlbnQ9ZChpKX1pZih0aGlzLndhaXRpbmcmJiF0JiYodGhpcy5oaWRkZW5EdXJpbmdXYWl0PVcpLCF0aGlzLnJlbmRlcmVkKXJldHVybiB0P3RoaXMucmVuZGVyKDEpOnRoaXM7aWYodGhpcy5kZXN0cm95ZWR8fHRoaXMuZGlzYWJsZWQpcmV0dXJuIHRoaXM7dmFyIGEsaCxsLGM9dD9cInNob3dcIjpcImhpZGVcIixwPXRoaXMub3B0aW9uc1tjXSx1PSh0aGlzLm9wdGlvbnNbdD9cImhpZGVcIjpcInNob3dcIl0sdGhpcy5vcHRpb25zLnBvc2l0aW9uKSxmPXRoaXMub3B0aW9ucy5jb250ZW50LGc9dGhpcy50b29sdGlwLmNzcyhcIndpZHRoXCIpLG09dGhpcy50b29sdGlwLmlzKFwiOnZpc2libGVcIiksdj10fHwxPT09cC50YXJnZXQubGVuZ3RoLHk9IWl8fDI+cC50YXJnZXQubGVuZ3RofHxvLnRhcmdldFswXT09PWkudGFyZ2V0O3JldHVybih0eXBlb2YgdCkuc2VhcmNoKFwiYm9vbGVhbnxudW1iZXJcIikmJih0PSFtKSxhPSFyLmlzKFwiOmFuaW1hdGVkXCIpJiZtPT09dCYmeSxoPWE/RTohIXRoaXMuX3RyaWdnZXIoYyxbOTBdKSx0aGlzLmRlc3Ryb3llZD90aGlzOihoIT09ayYmdCYmdGhpcy5mb2N1cyhpKSwhaHx8YT90aGlzOihzLmF0dHIoclswXSxcImFyaWEtaGlkZGVuXCIsIXQpLHQ/KG8ub3JpZ2luPWQodGhpcy5tb3VzZSkscy5pc0Z1bmN0aW9uKGYudGV4dCkmJnRoaXMuX3VwZGF0ZUNvbnRlbnQoZi50ZXh0LGspLHMuaXNGdW5jdGlvbihmLnRpdGxlKSYmdGhpcy5fdXBkYXRlVGl0bGUoZi50aXRsZSxrKSwhSSYmXCJtb3VzZVwiPT09dS50YXJnZXQmJnUuYWRqdXN0Lm1vdXNlJiYocyhlKS5iaW5kKFwibW91c2Vtb3ZlLlwiK1gsdGhpcy5fc3RvcmVNb3VzZSksST1XKSxnfHxyLmNzcyhcIndpZHRoXCIsci5vdXRlcldpZHRoKGspKSx0aGlzLnJlcG9zaXRpb24oaSxhcmd1bWVudHNbMl0pLGd8fHIuY3NzKFwid2lkdGhcIixcIlwiKSxwLnNvbG8mJihcInN0cmluZ1wiPT10eXBlb2YgcC5zb2xvP3MocC5zb2xvKTpzKFUscC5zb2xvKSkubm90KHIpLm5vdChwLnRhcmdldCkucXRpcChcImhpZGVcIixzLkV2ZW50KFwidG9vbHRpcHNvbG9cIikpKTooY2xlYXJUaW1lb3V0KHRoaXMudGltZXJzLnNob3cpLGRlbGV0ZSBvLm9yaWdpbixJJiYhcyhVKydbdHJhY2tpbmc9XCJ0cnVlXCJdOnZpc2libGUnLHAuc29sbykubm90KHIpLmxlbmd0aCYmKHMoZSkudW5iaW5kKFwibW91c2Vtb3ZlLlwiK1gpLEk9ayksdGhpcy5ibHVyKGkpKSxsPXMucHJveHkoZnVuY3Rpb24oKXt0PyhvZS5pZSYmclswXS5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJmaWx0ZXJcIiksci5jc3MoXCJvdmVyZmxvd1wiLFwiXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBwLmF1dG9mb2N1cyYmcyh0aGlzLm9wdGlvbnMuc2hvdy5hdXRvZm9jdXMscikuZm9jdXMoKSx0aGlzLm9wdGlvbnMuc2hvdy50YXJnZXQudHJpZ2dlcihcInF0aXAtXCIrdGhpcy5pZCtcIi1pbmFjdGl2ZVwiKSk6ci5jc3Moe2Rpc3BsYXk6XCJcIix2aXNpYmlsaXR5OlwiXCIsb3BhY2l0eTpcIlwiLGxlZnQ6XCJcIix0b3A6XCJcIn0pLHRoaXMuX3RyaWdnZXIodD9cInZpc2libGVcIjpcImhpZGRlblwiKX0sdGhpcykscC5lZmZlY3Q9PT1rfHx2PT09az8ocltjXSgpLGwoKSk6cy5pc0Z1bmN0aW9uKHAuZWZmZWN0KT8oci5zdG9wKDEsMSkscC5lZmZlY3QuY2FsbChyLHRoaXMpLHIucXVldWUoXCJmeFwiLGZ1bmN0aW9uKHQpe2woKSx0KCl9KSk6ci5mYWRlVG8oOTAsdD8xOjAsbCksdCYmcC50YXJnZXQudHJpZ2dlcihcInF0aXAtXCIrdGhpcy5pZCtcIi1pbmFjdGl2ZVwiKSx0aGlzKSl9LGouc2hvdz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50b2dnbGUoVyx0KX0sai5oaWRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRvZ2dsZShrLHQpfSxqLmZvY3VzPWZ1bmN0aW9uKHQpe2lmKCF0aGlzLnJlbmRlcmVkfHx0aGlzLmRlc3Ryb3llZClyZXR1cm4gdGhpczt2YXIgZT1zKFUpLGk9dGhpcy50b29sdGlwLG89cGFyc2VJbnQoaVswXS5zdHlsZS56SW5kZXgsMTApLG49VC56aW5kZXgrZS5sZW5ndGg7cmV0dXJuIGkuaGFzQ2xhc3MoWil8fHRoaXMuX3RyaWdnZXIoXCJmb2N1c1wiLFtuXSx0KSYmKG8hPT1uJiYoZS5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5zdHlsZS56SW5kZXg+byYmKHRoaXMuc3R5bGUuekluZGV4PXRoaXMuc3R5bGUuekluZGV4LTEpfSksZS5maWx0ZXIoXCIuXCIrWikucXRpcChcImJsdXJcIix0KSksaS5hZGRDbGFzcyhaKVswXS5zdHlsZS56SW5kZXg9biksdGhpc30sai5ibHVyPWZ1bmN0aW9uKHQpe3JldHVybiF0aGlzLnJlbmRlcmVkfHx0aGlzLmRlc3Ryb3llZD90aGlzOih0aGlzLnRvb2x0aXAucmVtb3ZlQ2xhc3MoWiksdGhpcy5fdHJpZ2dlcihcImJsdXJcIixbdGhpcy50b29sdGlwLmNzcyhcInpJbmRleFwiKV0sdCksdGhpcyl9LGouZGlzYWJsZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kZXN0cm95ZWQ/dGhpczooXCJ0b2dnbGVcIj09PXQ/dD0hKHRoaXMucmVuZGVyZWQ/dGhpcy50b29sdGlwLmhhc0NsYXNzKGVlKTp0aGlzLmRpc2FibGVkKTpcImJvb2xlYW5cIiE9dHlwZW9mIHQmJih0PVcpLHRoaXMucmVuZGVyZWQmJnRoaXMudG9vbHRpcC50b2dnbGVDbGFzcyhlZSx0KS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLHQpLHRoaXMuZGlzYWJsZWQ9ISF0LHRoaXMpfSxqLmVuYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc2FibGUoayl9LGouX2NyZWF0ZUJ1dHRvbj1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLmVsZW1lbnRzLGk9ZS50b29sdGlwLG89dGhpcy5vcHRpb25zLmNvbnRlbnQuYnV0dG9uLG49XCJzdHJpbmdcIj09dHlwZW9mIG8scj1uP286XCJDbG9zZSB0b29sdGlwXCI7ZS5idXR0b24mJmUuYnV0dG9uLnJlbW92ZSgpLGUuYnV0dG9uPW8uanF1ZXJ5P286cyhcIjxhIC8+XCIse1wiY2xhc3NcIjpcInF0aXAtY2xvc2UgXCIrKHRoaXMub3B0aW9ucy5zdHlsZS53aWRnZXQ/XCJcIjpYK1wiLWljb25cIiksdGl0bGU6cixcImFyaWEtbGFiZWxcIjpyfSkucHJlcGVuZChzKFwiPHNwYW4gLz5cIix7XCJjbGFzc1wiOlwidWktaWNvbiB1aS1pY29uLWNsb3NlXCIsaHRtbDpcIiZ0aW1lcztcIn0pKSxlLmJ1dHRvbi5hcHBlbmRUbyhlLnRpdGxlYmFyfHxpKS5hdHRyKFwicm9sZVwiLFwiYnV0dG9uXCIpLmNsaWNrKGZ1bmN0aW9uKGUpe3JldHVybiBpLmhhc0NsYXNzKGVlKXx8dC5oaWRlKGUpLGt9KX0sai5fdXBkYXRlQnV0dG9uPWZ1bmN0aW9uKHQpe2lmKCF0aGlzLnJlbmRlcmVkKXJldHVybiBrO3ZhciBlPXRoaXMuZWxlbWVudHMuYnV0dG9uO3Q/dGhpcy5fY3JlYXRlQnV0dG9uKCk6ZS5yZW1vdmUoKX0sai5fc2V0V2lkZ2V0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLnN0eWxlLndpZGdldCxlPXRoaXMuZWxlbWVudHMsaT1lLnRvb2x0aXAscz1pLmhhc0NsYXNzKGVlKTtpLnJlbW92ZUNsYXNzKGVlKSxlZT10P1widWktc3RhdGUtZGlzYWJsZWRcIjpcInF0aXAtZGlzYWJsZWRcIixpLnRvZ2dsZUNsYXNzKGVlLHMpLGkudG9nZ2xlQ2xhc3MoXCJ1aS1oZWxwZXItcmVzZXQgXCIrYygpLHQpLnRvZ2dsZUNsYXNzKEssdGhpcy5vcHRpb25zLnN0eWxlLmRlZiYmIXQpLGUuY29udGVudCYmZS5jb250ZW50LnRvZ2dsZUNsYXNzKGMoXCJjb250ZW50XCIpLHQpLGUudGl0bGViYXImJmUudGl0bGViYXIudG9nZ2xlQ2xhc3MoYyhcImhlYWRlclwiKSx0KSxlLmJ1dHRvbiYmZS5idXR0b24udG9nZ2xlQ2xhc3MoWCtcIi1pY29uXCIsIXQpfSxqLl9zdG9yZU1vdXNlPWZ1bmN0aW9uKHQpeyh0aGlzLm1vdXNlPWQodCkpLnR5cGU9XCJtb3VzZW1vdmVcIn0sai5fYmluZD1mdW5jdGlvbih0LGUsaSxvLG4pe3ZhciByPVwiLlwiK3RoaXMuX2lkKyhvP1wiLVwiK286XCJcIik7ZS5sZW5ndGgmJnModCkuYmluZCgoZS5zcGxpdD9lOmUuam9pbihyK1wiIFwiKSkrcixzLnByb3h5KGksbnx8dGhpcykpfSxqLl91bmJpbmQ9ZnVuY3Rpb24odCxlKXtzKHQpLnVuYmluZChcIi5cIit0aGlzLl9pZCsoZT9cIi1cIitlOlwiXCIpKX07dmFyIGhlPVwiLlwiK1g7cyhmdW5jdGlvbigpe3YoVSxbXCJtb3VzZWVudGVyXCIsXCJtb3VzZWxlYXZlXCJdLGZ1bmN0aW9uKHQpe3ZhciBlPVwibW91c2VlbnRlclwiPT09dC50eXBlLGk9cyh0LmN1cnJlbnRUYXJnZXQpLG89cyh0LnJlbGF0ZWRUYXJnZXR8fHQudGFyZ2V0KSxuPXRoaXMub3B0aW9ucztlPyh0aGlzLmZvY3VzKHQpLGkuaGFzQ2xhc3MoSikmJiFpLmhhc0NsYXNzKGVlKSYmY2xlYXJUaW1lb3V0KHRoaXMudGltZXJzLmhpZGUpKTpcIm1vdXNlXCI9PT1uLnBvc2l0aW9uLnRhcmdldCYmbi5oaWRlLmV2ZW50JiZuLnNob3cudGFyZ2V0JiYhby5jbG9zZXN0KG4uc2hvdy50YXJnZXRbMF0pLmxlbmd0aCYmdGhpcy5oaWRlKHQpLGkudG9nZ2xlQ2xhc3ModGUsZSl9KSx2KFwiW1wiK0grXCJdXCIsUSxnKX0pLGouX3RyaWdnZXI9ZnVuY3Rpb24odCxlLGkpe3ZhciBvPXMuRXZlbnQoXCJ0b29sdGlwXCIrdCk7cmV0dXJuIG8ub3JpZ2luYWxFdmVudD1pJiZzLmV4dGVuZCh7fSxpKXx8dGhpcy5jYWNoZS5ldmVudHx8RSx0aGlzLnRyaWdnZXJpbmc9dCx0aGlzLnRvb2x0aXAudHJpZ2dlcihvLFt0aGlzXS5jb25jYXQoZXx8W10pKSx0aGlzLnRyaWdnZXJpbmc9aywhby5pc0RlZmF1bHRQcmV2ZW50ZWQoKX0sai5fYmluZEV2ZW50cz1mdW5jdGlvbih0LGUsbyxuLHIsYSl7aWYobi5hZGQobykubGVuZ3RoPT09bi5sZW5ndGgpe3ZhciBoPVtdO2U9cy5tYXAoZSxmdW5jdGlvbihlKXt2YXIgbz1zLmluQXJyYXkoZSx0KTtyZXR1cm4gbz4tMT8oaC5wdXNoKHQuc3BsaWNlKG8sMSlbMF0pLGkpOmV9KSxoLmxlbmd0aCYmdGhpcy5fYmluZChvLGgsZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZW5kZXJlZD90aGlzLnRvb2x0aXBbMF0ub2Zmc2V0V2lkdGg+MDohMTsoZT9hOnIpLmNhbGwodGhpcyx0KX0pfXRoaXMuX2JpbmQobyx0LHIpLHRoaXMuX2JpbmQobixlLGEpfSxqLl9hc3NpZ25Jbml0aWFsRXZlbnRzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7cmV0dXJuIHRoaXMuZGlzYWJsZWR8fHRoaXMuZGVzdHJveWVkP2s6KHRoaXMuY2FjaGUuZXZlbnQ9ZCh0KSx0aGlzLmNhY2hlLnRhcmdldD10P3ModC50YXJnZXQpOltpXSxjbGVhclRpbWVvdXQodGhpcy50aW1lcnMuc2hvdyksdGhpcy50aW1lcnMuc2hvdz1wLmNhbGwodGhpcyxmdW5jdGlvbigpe3RoaXMucmVuZGVyKFwib2JqZWN0XCI9PXR5cGVvZiB0fHxvLnNob3cucmVhZHkpfSxvLnNob3cuZGVsYXkpLGkpfXZhciBvPXRoaXMub3B0aW9ucyxuPW8uc2hvdy50YXJnZXQscj1vLmhpZGUudGFyZ2V0LGE9by5zaG93LmV2ZW50P3MudHJpbShcIlwiK28uc2hvdy5ldmVudCkuc3BsaXQoXCIgXCIpOltdLGg9by5oaWRlLmV2ZW50P3MudHJpbShcIlwiK28uaGlkZS5ldmVudCkuc3BsaXQoXCIgXCIpOltdOy9tb3VzZShvdmVyfGVudGVyKS9pLnRlc3Qoby5zaG93LmV2ZW50KSYmIS9tb3VzZShvdXR8bGVhdmUpL2kudGVzdChvLmhpZGUuZXZlbnQpJiZoLnB1c2goXCJtb3VzZWxlYXZlXCIpLHRoaXMuX2JpbmQobixcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKHQpe3RoaXMuX3N0b3JlTW91c2UodCksdGhpcy5jYWNoZS5vblRhcmdldD1XfSksdGhpcy5fYmluZEV2ZW50cyhhLGgsbixyLGUsZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy50aW1lcnMuc2hvdyl9KSwoby5zaG93LnJlYWR5fHxvLnByZXJlbmRlcikmJmUuY2FsbCh0aGlzLHQpfSxqLl9hc3NpZ25FdmVudHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLG89dGhpcy5vcHRpb25zLG49by5wb3NpdGlvbixyPXRoaXMudG9vbHRpcCxhPW8uc2hvdy50YXJnZXQsaD1vLmhpZGUudGFyZ2V0LGw9bi5jb250YWluZXIsYz1uLnZpZXdwb3J0LGQ9cyhlKSxwPShzKGUuYm9keSkscyh0KSksdj1vLnNob3cuZXZlbnQ/cy50cmltKFwiXCIrby5zaG93LmV2ZW50KS5zcGxpdChcIiBcIik6W10seT1vLmhpZGUuZXZlbnQ/cy50cmltKFwiXCIrby5oaWRlLmV2ZW50KS5zcGxpdChcIiBcIik6W107cy5lYWNoKG8uZXZlbnRzLGZ1bmN0aW9uKHQsZSl7aS5fYmluZChyLFwidG9nZ2xlXCI9PT10P1tcInRvb2x0aXBzaG93XCIsXCJ0b29sdGlwaGlkZVwiXTpbXCJ0b29sdGlwXCIrdF0sZSxudWxsLHIpfSksL21vdXNlKG91dHxsZWF2ZSkvaS50ZXN0KG8uaGlkZS5ldmVudCkmJlwid2luZG93XCI9PT1vLmhpZGUubGVhdmUmJnRoaXMuX2JpbmQoZCxbXCJtb3VzZW91dFwiLFwiYmx1clwiXSxmdW5jdGlvbih0KXsvc2VsZWN0fG9wdGlvbi8udGVzdCh0LnRhcmdldC5ub2RlTmFtZSl8fHQucmVsYXRlZFRhcmdldHx8dGhpcy5oaWRlKHQpfSksby5oaWRlLmZpeGVkP2g9aC5hZGQoci5hZGRDbGFzcyhKKSk6L21vdXNlKG92ZXJ8ZW50ZXIpL2kudGVzdChvLnNob3cuZXZlbnQpJiZ0aGlzLl9iaW5kKGgsXCJtb3VzZWxlYXZlXCIsZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy50aW1lcnMuc2hvdyl9KSwoXCJcIitvLmhpZGUuZXZlbnQpLmluZGV4T2YoXCJ1bmZvY3VzXCIpPi0xJiZ0aGlzLl9iaW5kKGwuY2xvc2VzdChcImh0bWxcIiksW1wibW91c2Vkb3duXCIsXCJ0b3VjaHN0YXJ0XCJdLGZ1bmN0aW9uKHQpe3ZhciBlPXModC50YXJnZXQpLGk9dGhpcy5yZW5kZXJlZCYmIXRoaXMudG9vbHRpcC5oYXNDbGFzcyhlZSkmJnRoaXMudG9vbHRpcFswXS5vZmZzZXRXaWR0aD4wLG89ZS5wYXJlbnRzKFUpLmZpbHRlcih0aGlzLnRvb2x0aXBbMF0pLmxlbmd0aD4wO2VbMF09PT10aGlzLnRhcmdldFswXXx8ZVswXT09PXRoaXMudG9vbHRpcFswXXx8b3x8dGhpcy50YXJnZXQuaGFzKGVbMF0pLmxlbmd0aHx8IWl8fHRoaXMuaGlkZSh0KX0pLFwibnVtYmVyXCI9PXR5cGVvZiBvLmhpZGUuaW5hY3RpdmUmJih0aGlzLl9iaW5kKGEsXCJxdGlwLVwiK3RoaXMuaWQrXCItaW5hY3RpdmVcIixnKSx0aGlzLl9iaW5kKGguYWRkKHIpLFQuaW5hY3RpdmVFdmVudHMsZyxcIi1pbmFjdGl2ZVwiKSksdGhpcy5fYmluZEV2ZW50cyh2LHksYSxoLHUsZiksdGhpcy5fYmluZChhLmFkZChyKSxcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKHQpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBvLmhpZGUuZGlzdGFuY2Upe3ZhciBlPXRoaXMuY2FjaGUub3JpZ2lufHx7fSxpPXRoaXMub3B0aW9ucy5oaWRlLmRpc3RhbmNlLHM9TWF0aC5hYnM7KHModC5wYWdlWC1lLnBhZ2VYKT49aXx8cyh0LnBhZ2VZLWUucGFnZVkpPj1pKSYmdGhpcy5oaWRlKHQpfXRoaXMuX3N0b3JlTW91c2UodCl9KSxcIm1vdXNlXCI9PT1uLnRhcmdldCYmbi5hZGp1c3QubW91c2UmJihvLmhpZGUuZXZlbnQmJnRoaXMuX2JpbmQoYSxbXCJtb3VzZWVudGVyXCIsXCJtb3VzZWxlYXZlXCJdLGZ1bmN0aW9uKHQpe3RoaXMuY2FjaGUub25UYXJnZXQ9XCJtb3VzZWVudGVyXCI9PT10LnR5cGV9KSx0aGlzLl9iaW5kKGQsXCJtb3VzZW1vdmVcIixmdW5jdGlvbih0KXt0aGlzLnJlbmRlcmVkJiZ0aGlzLmNhY2hlLm9uVGFyZ2V0JiYhdGhpcy50b29sdGlwLmhhc0NsYXNzKGVlKSYmdGhpcy50b29sdGlwWzBdLm9mZnNldFdpZHRoPjAmJnRoaXMucmVwb3NpdGlvbih0KX0pKSwobi5hZGp1c3QucmVzaXplfHxjLmxlbmd0aCkmJnRoaXMuX2JpbmQocy5ldmVudC5zcGVjaWFsLnJlc2l6ZT9jOnAsXCJyZXNpemVcIixtKSxuLmFkanVzdC5zY3JvbGwmJnRoaXMuX2JpbmQocC5hZGQobi5jb250YWluZXIpLFwic2Nyb2xsXCIsbSl9LGouX3VuYXNzaWduRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGk9W3RoaXMub3B0aW9ucy5zaG93LnRhcmdldFswXSx0aGlzLm9wdGlvbnMuaGlkZS50YXJnZXRbMF0sdGhpcy5yZW5kZXJlZCYmdGhpcy50b29sdGlwWzBdLHRoaXMub3B0aW9ucy5wb3NpdGlvbi5jb250YWluZXJbMF0sdGhpcy5vcHRpb25zLnBvc2l0aW9uLnZpZXdwb3J0WzBdLHRoaXMub3B0aW9ucy5wb3NpdGlvbi5jb250YWluZXIuY2xvc2VzdChcImh0bWxcIilbMF0sdCxlXTt0aGlzLl91bmJpbmQocyhbXSkucHVzaFN0YWNrKHMuZ3JlcChpLGZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0fSkpKX0sVD1zLmZuLnF0aXA9ZnVuY3Rpb24odCxlLG8pe3ZhciBuPShcIlwiK3QpLnRvTG93ZXJDYXNlKCkscj1FLGg9cy5tYWtlQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKSxsPWhbaC5sZW5ndGgtMV0sYz10aGlzWzBdP3MuZGF0YSh0aGlzWzBdLFgpOkU7cmV0dXJuIWFyZ3VtZW50cy5sZW5ndGgmJmN8fFwiYXBpXCI9PT1uP2M6XCJzdHJpbmdcIj09dHlwZW9mIHQ/KHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXMuZGF0YSh0aGlzLFgpO2lmKCF0KXJldHVybiBXO2lmKGwmJmwudGltZVN0YW1wJiYodC5jYWNoZS5ldmVudD1sKSwhZXx8XCJvcHRpb25cIiE9PW4mJlwib3B0aW9uc1wiIT09bil0W25dJiZ0W25dLmFwcGx5KHQsaCk7ZWxzZXtpZihvPT09aSYmIXMuaXNQbGFpbk9iamVjdChlKSlyZXR1cm4gcj10LmdldChlKSxrO3Quc2V0KGUsbyl9fSksciE9PUU/cjp0aGlzKTpcIm9iamVjdFwiIT10eXBlb2YgdCYmYXJndW1lbnRzLmxlbmd0aD9pOihjPWEocy5leHRlbmQoVyx7fSx0KSksdGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBlLG87cmV0dXJuIG89cy5pc0FycmF5KGMuaWQpP2MuaWRbdF06Yy5pZCxvPSFvfHxvPT09a3x8MT5vLmxlbmd0aHx8VC5hcGlbb10/VC5uZXh0aWQrKzpvLGU9eShzKHRoaXMpLG8sYyksZT09PWs/VzooVC5hcGlbb109ZSxzLmVhY2goUixmdW5jdGlvbigpe1wiaW5pdGlhbGl6ZVwiPT09dGhpcy5pbml0aWFsaXplJiZ0aGlzKGUpfSksZS5fYXNzaWduSW5pdGlhbEV2ZW50cyhsKSxpKX0pKX0scy5xdGlwPW8sVC5hcGk9e30scy5lYWNoKHthdHRyOmZ1bmN0aW9uKHQsZSl7aWYodGhpcy5sZW5ndGgpe3ZhciBpPXRoaXNbMF0sbz1cInRpdGxlXCIsbj1zLmRhdGEoaSxcInF0aXBcIik7aWYodD09PW8mJm4mJlwib2JqZWN0XCI9PXR5cGVvZiBuJiZuLm9wdGlvbnMuc3VwcHJlc3MpcmV0dXJuIDI+YXJndW1lbnRzLmxlbmd0aD9zLmF0dHIoaSxzZSk6KG4mJm4ub3B0aW9ucy5jb250ZW50LmF0dHI9PT1vJiZuLmNhY2hlLmF0dHImJm4uc2V0KFwiY29udGVudC50ZXh0XCIsZSksdGhpcy5hdHRyKHNlLGUpKX1yZXR1cm4gcy5mbltcImF0dHJcIitpZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjbG9uZTpmdW5jdGlvbih0KXt2YXIgZT0ocyhbXSkscy5mbltcImNsb25lXCIraWVdLmFwcGx5KHRoaXMsYXJndW1lbnRzKSk7cmV0dXJuIHR8fGUuZmlsdGVyKFwiW1wiK3NlK1wiXVwiKS5hdHRyKFwidGl0bGVcIixmdW5jdGlvbigpe3JldHVybiBzLmF0dHIodGhpcyxzZSl9KS5yZW1vdmVBdHRyKHNlKSxlfX0sZnVuY3Rpb24odCxlKXtpZighZXx8cy5mblt0K2llXSlyZXR1cm4gVzt2YXIgaT1zLmZuW3QraWVdPXMuZm5bdF07cy5mblt0XT1mdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8aS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkscy51aXx8KHNbXCJjbGVhbkRhdGFcIitpZV09cy5jbGVhbkRhdGEscy5jbGVhbkRhdGE9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLGk9MDsoZT1zKHRbaV0pKS5sZW5ndGg7aSsrKWlmKGUuYXR0cihZKSl0cnl7ZS50cmlnZ2VySGFuZGxlcihcInJlbW92ZXF0aXBcIil9Y2F0Y2gobyl7fXNbXCJjbGVhbkRhdGFcIitpZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpfSksVC52ZXJzaW9uPVwiMi4yLjBcIixULm5leHRpZD0wLFQuaW5hY3RpdmVFdmVudHM9USxULnppbmRleD0xNWUzLFQuZGVmYXVsdHM9e3ByZXJlbmRlcjprLGlkOmssb3ZlcndyaXRlOlcsc3VwcHJlc3M6Vyxjb250ZW50Ont0ZXh0OlcsYXR0cjpcInRpdGxlXCIsdGl0bGU6ayxidXR0b246a30scG9zaXRpb246e215OlwidG9wIGxlZnRcIixhdDpcImJvdHRvbSByaWdodFwiLHRhcmdldDprLGNvbnRhaW5lcjprLHZpZXdwb3J0OmssYWRqdXN0Ont4OjAseTowLG1vdXNlOlcsc2Nyb2xsOlcscmVzaXplOlcsbWV0aG9kOlwiZmxpcGludmVydCBmbGlwaW52ZXJ0XCJ9LGVmZmVjdDpmdW5jdGlvbih0LGUpe3ModGhpcykuYW5pbWF0ZShlLHtkdXJhdGlvbjoyMDAscXVldWU6a30pfX0sc2hvdzp7dGFyZ2V0OmssZXZlbnQ6XCJtb3VzZWVudGVyXCIsZWZmZWN0OlcsZGVsYXk6OTAsc29sbzprLHJlYWR5OmssYXV0b2ZvY3VzOmt9LGhpZGU6e3RhcmdldDprLGV2ZW50OlwibW91c2VsZWF2ZVwiLGVmZmVjdDpXLGRlbGF5OjAsZml4ZWQ6ayxpbmFjdGl2ZTprLGxlYXZlOlwid2luZG93XCIsZGlzdGFuY2U6a30sc3R5bGU6e2NsYXNzZXM6XCJcIix3aWRnZXQ6ayx3aWR0aDprLGhlaWdodDprLGRlZjpXfSxldmVudHM6e3JlbmRlcjpFLG1vdmU6RSxzaG93OkUsaGlkZTpFLHRvZ2dsZTpFLHZpc2libGU6RSxoaWRkZW46RSxmb2N1czpFLGJsdXI6RX19O3ZhciBsZSxjZT1cIm1hcmdpblwiLGRlPVwiYm9yZGVyXCIscGU9XCJjb2xvclwiLHVlPVwiYmFja2dyb3VuZC1jb2xvclwiLGZlPVwidHJhbnNwYXJlbnRcIixnZT1cIiAhaW1wb3J0YW50XCIsbWU9ISFlLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dCx2ZT0vcmdiYT9cXCgwLCAwLCAwKCwgMCk/XFwpfHRyYW5zcGFyZW50fCMxMjM0NTYvaSx5ZT17fSxiZT1bXCJXZWJraXRcIixcIk9cIixcIk1velwiLFwibXNcIl07aWYobWUpdmFyIHdlPXQuZGV2aWNlUGl4ZWxSYXRpb3x8MSxfZT1mdW5jdGlvbigpe3ZhciB0PWUuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7cmV0dXJuIHQuYmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHx0Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQubXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHx0Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvfHwxfSgpLHhlPXdlL19lO2Vsc2UgdmFyIHFlPWZ1bmN0aW9uKHQsZSxpKXtyZXR1cm5cIjxxdGlwdm1sOlwiK3QrJyB4bWxucz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC5jb206dm1sXCIgY2xhc3M9XCJxdGlwLXZtbFwiICcrKGV8fFwiXCIpKycgc3R5bGU9XCJiZWhhdmlvcjogdXJsKCNkZWZhdWx0I1ZNTCk7ICcrKGl8fFwiXCIpKydcIiAvPid9O3MuZXh0ZW5kKHgucHJvdG90eXBlLHtpbml0OmZ1bmN0aW9uKHQpe3ZhciBlLGk7aT10aGlzLmVsZW1lbnQ9dC5lbGVtZW50cy50aXA9cyhcIjxkaXYgLz5cIix7XCJjbGFzc1wiOlgrXCItdGlwXCJ9KS5wcmVwZW5kVG8odC50b29sdGlwKSxtZT8oZT1zKFwiPGNhbnZhcyAvPlwiKS5hcHBlbmRUbyh0aGlzLmVsZW1lbnQpWzBdLmdldENvbnRleHQoXCIyZFwiKSxlLmxpbmVKb2luPVwibWl0ZXJcIixlLm1pdGVyTGltaXQ9MWU1LGUuc2F2ZSgpKTooZT1xZShcInNoYXBlXCIsJ2Nvb3Jkb3JpZ2luPVwiMCwwXCInLFwicG9zaXRpb246YWJzb2x1dGU7XCIpLHRoaXMuZWxlbWVudC5odG1sKGUrZSksdC5fYmluZChzKFwiKlwiLGkpLmFkZChpKSxbXCJjbGlja1wiLFwibW91c2Vkb3duXCJdLGZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCl9LHRoaXMuX25zKSksdC5fYmluZCh0LnRvb2x0aXAsXCJ0b29sdGlwbW92ZVwiLHRoaXMucmVwb3NpdGlvbix0aGlzLl9ucyx0aGlzKSx0aGlzLmNyZWF0ZSgpfSxfc3dhcERpbWVuc2lvbnM6ZnVuY3Rpb24oKXt0aGlzLnNpemVbMF09dGhpcy5vcHRpb25zLmhlaWdodCx0aGlzLnNpemVbMV09dGhpcy5vcHRpb25zLndpZHRofSxfcmVzZXREaW1lbnNpb25zOmZ1bmN0aW9uKCl7dGhpcy5zaXplWzBdPXRoaXMub3B0aW9ucy53aWR0aCx0aGlzLnNpemVbMV09dGhpcy5vcHRpb25zLmhlaWdodH0sX3VzZVRpdGxlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucXRpcC5lbGVtZW50cy50aXRsZWJhcjtyZXR1cm4gZSYmKHQueT09PUR8fHQueT09PU4mJnRoaXMuZWxlbWVudC5wb3NpdGlvbigpLnRvcCt0aGlzLnNpemVbMV0vMit0aGlzLm9wdGlvbnMub2Zmc2V0PGUub3V0ZXJIZWlnaHQoVykpfSxfcGFyc2VDb3JuZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5xdGlwLm9wdGlvbnMucG9zaXRpb24ubXk7cmV0dXJuIHQ9PT1rfHxlPT09az90PWs6dD09PVc/dD1uZXcgeihlLnN0cmluZygpKTp0LnN0cmluZ3x8KHQ9bmV3IHoodCksdC5maXhlZD1XKSx0fSxfcGFyc2VXaWR0aDpmdW5jdGlvbih0LGUsaSl7dmFyIHM9dGhpcy5xdGlwLmVsZW1lbnRzLG89ZGUrYihlKStcIldpZHRoXCI7cmV0dXJuKGk/XyhpLG8pOl8ocy5jb250ZW50LG8pfHxfKHRoaXMuX3VzZVRpdGxlKHQpJiZzLnRpdGxlYmFyfHxzLmNvbnRlbnQsbyl8fF8ocy50b29sdGlwLG8pKXx8MH0sX3BhcnNlUmFkaXVzOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucXRpcC5lbGVtZW50cyxpPWRlK2IodC55KStiKHQueCkrXCJSYWRpdXNcIjtyZXR1cm4gOT5vZS5pZT8wOl8odGhpcy5fdXNlVGl0bGUodCkmJmUudGl0bGViYXJ8fGUuY29udGVudCxpKXx8XyhlLnRvb2x0aXAsaSl8fDB9LF9pbnZhbGlkQ29sb3VyOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcz10LmNzcyhlKTtyZXR1cm4hc3x8aSYmcz09PXQuY3NzKGkpfHx2ZS50ZXN0KHMpP2s6c30sX3BhcnNlQ29sb3VyczpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnF0aXAuZWxlbWVudHMsaT10aGlzLmVsZW1lbnQuY3NzKFwiY3NzVGV4dFwiLFwiXCIpLG89ZGUrYih0W3QucHJlY2VkYW5jZV0pK2IocGUpLG49dGhpcy5fdXNlVGl0bGUodCkmJmUudGl0bGViYXJ8fGUuY29udGVudCxyPXRoaXMuX2ludmFsaWRDb2xvdXIsYT1bXTtyZXR1cm4gYVswXT1yKGksdWUpfHxyKG4sdWUpfHxyKGUuY29udGVudCx1ZSl8fHIoZS50b29sdGlwLHVlKXx8aS5jc3ModWUpLGFbMV09cihpLG8scGUpfHxyKG4sbyxwZSl8fHIoZS5jb250ZW50LG8scGUpfHxyKGUudG9vbHRpcCxvLHBlKXx8ZS50b29sdGlwLmNzcyhvKSxzKFwiKlwiLGkpLmFkZChpKS5jc3MoXCJjc3NUZXh0XCIsdWUrXCI6XCIrZmUrZ2UrXCI7XCIrZGUrXCI6MFwiK2dlK1wiO1wiKSxhfSxfY2FsY3VsYXRlU2l6ZTpmdW5jdGlvbih0KXt2YXIgZSxpLHMsbz10LnByZWNlZGFuY2U9PT1MLG49dGhpcy5vcHRpb25zLndpZHRoLHI9dGhpcy5vcHRpb25zLmhlaWdodCxhPVwiY1wiPT09dC5hYmJyZXYoKSxoPShvP246cikqKGE/LjU6MSksbD1NYXRoLnBvdyxjPU1hdGgucm91bmQsZD1NYXRoLnNxcnQobChoLDIpK2wociwyKSkscD1bdGhpcy5ib3JkZXIvaCpkLHRoaXMuYm9yZGVyL3IqZF07cmV0dXJuIHBbMl09TWF0aC5zcXJ0KGwocFswXSwyKS1sKHRoaXMuYm9yZGVyLDIpKSxwWzNdPU1hdGguc3FydChsKHBbMV0sMiktbCh0aGlzLmJvcmRlciwyKSksZT1kK3BbMl0rcFszXSsoYT8wOnBbMF0pLGk9ZS9kLHM9W2MoaSpuKSxjKGkqcildLG8/czpzLnJldmVyc2UoKX0sX2NhbGN1bGF0ZVRpcDpmdW5jdGlvbih0LGUsaSl7aT1pfHwxLGU9ZXx8dGhpcy5zaXplO3ZhciBzPWVbMF0qaSxvPWVbMV0qaSxuPU1hdGguY2VpbChzLzIpLHI9TWF0aC5jZWlsKG8vMiksYT17YnI6WzAsMCxzLG8scywwXSxibDpbMCwwLHMsMCwwLG9dLHRyOlswLG8scywwLHMsb10sdGw6WzAsMCwwLG8scyxvXSx0YzpbMCxvLG4sMCxzLG9dLGJjOlswLDAscywwLG4sb10scmM6WzAsMCxzLHIsMCxvXSxsYzpbcywwLHMsbywwLHJdfTtyZXR1cm4gYS5sdD1hLmJyLGEucnQ9YS5ibCxhLmxiPWEudHIsYS5yYj1hLnRsLGFbdC5hYmJyZXYoKV19LF9kcmF3Q29vcmRzOmZ1bmN0aW9uKHQsZSl7dC5iZWdpblBhdGgoKSx0Lm1vdmVUbyhlWzBdLGVbMV0pLHQubGluZVRvKGVbMl0sZVszXSksdC5saW5lVG8oZVs0XSxlWzVdKSx0LmNsb3NlUGF0aCgpfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNvcm5lcj0obWV8fG9lLmllKSYmdGhpcy5fcGFyc2VDb3JuZXIodGhpcy5vcHRpb25zLmNvcm5lcik7cmV0dXJuKHRoaXMuZW5hYmxlZD0hIXRoaXMuY29ybmVyJiZcImNcIiE9PXRoaXMuY29ybmVyLmFiYnJldigpKSYmKHRoaXMucXRpcC5jYWNoZS5jb3JuZXI9dC5jbG9uZSgpLHRoaXMudXBkYXRlKCkpLHRoaXMuZWxlbWVudC50b2dnbGUodGhpcy5lbmFibGVkKSx0aGlzLmNvcm5lcn0sdXBkYXRlOmZ1bmN0aW9uKGUsaSl7aWYoIXRoaXMuZW5hYmxlZClyZXR1cm4gdGhpczt2YXIgbyxuLHIsYSxoLGwsYyxkLHA9dGhpcy5xdGlwLmVsZW1lbnRzLHU9dGhpcy5lbGVtZW50LGY9dS5jaGlsZHJlbigpLGc9dGhpcy5vcHRpb25zLG09dGhpcy5zaXplLHY9Zy5taW1pYyx5PU1hdGgucm91bmQ7ZXx8KGU9dGhpcy5xdGlwLmNhY2hlLmNvcm5lcnx8dGhpcy5jb3JuZXIpLHY9PT1rP3Y9ZToodj1uZXcgeih2KSx2LnByZWNlZGFuY2U9ZS5wcmVjZWRhbmNlLFwiaW5oZXJpdFwiPT09di54P3YueD1lLng6XCJpbmhlcml0XCI9PT12Lnk/di55PWUueTp2Lng9PT12LnkmJih2W2UucHJlY2VkYW5jZV09ZVtlLnByZWNlZGFuY2VdKSksbj12LnByZWNlZGFuY2UsZS5wcmVjZWRhbmNlPT09Uz90aGlzLl9zd2FwRGltZW5zaW9ucygpOnRoaXMuX3Jlc2V0RGltZW5zaW9ucygpLG89dGhpcy5jb2xvcj10aGlzLl9wYXJzZUNvbG91cnMoZSksb1sxXSE9PWZlPyhkPXRoaXMuYm9yZGVyPXRoaXMuX3BhcnNlV2lkdGgoZSxlW2UucHJlY2VkYW5jZV0pLGcuYm9yZGVyJiYxPmQmJiF2ZS50ZXN0KG9bMV0pJiYob1swXT1vWzFdKSx0aGlzLmJvcmRlcj1kPWcuYm9yZGVyIT09Vz9nLmJvcmRlcjpkKTp0aGlzLmJvcmRlcj1kPTAsYz10aGlzLnNpemU9dGhpcy5fY2FsY3VsYXRlU2l6ZShlKSx1LmNzcyh7d2lkdGg6Y1swXSxoZWlnaHQ6Y1sxXSxsaW5lSGVpZ2h0OmNbMV0rXCJweFwifSksbD1lLnByZWNlZGFuY2U9PT1MP1t5KHYueD09PUY/ZDp2Lng9PT1QP2NbMF0tbVswXS1kOihjWzBdLW1bMF0pLzIpLHkodi55PT09RD9jWzFdLW1bMV06MCldOlt5KHYueD09PUY/Y1swXS1tWzBdOjApLHkodi55PT09RD9kOnYueT09PU8/Y1sxXS1tWzFdLWQ6KGNbMV0tbVsxXSkvMildLG1lPyhyPWZbMF0uZ2V0Q29udGV4dChcIjJkXCIpLHIucmVzdG9yZSgpLHIuc2F2ZSgpLHIuY2xlYXJSZWN0KDAsMCw2ZTMsNmUzKSxhPXRoaXMuX2NhbGN1bGF0ZVRpcCh2LG0seGUpLGg9dGhpcy5fY2FsY3VsYXRlVGlwKHYsdGhpcy5zaXplLHhlKSxmLmF0dHIoQSxjWzBdKnhlKS5hdHRyKEIsY1sxXSp4ZSksZi5jc3MoQSxjWzBdKS5jc3MoQixjWzFdKSx0aGlzLl9kcmF3Q29vcmRzKHIsaCksci5maWxsU3R5bGU9b1sxXSxyLmZpbGwoKSxyLnRyYW5zbGF0ZShsWzBdKnhlLGxbMV0qeGUpLHRoaXMuX2RyYXdDb29yZHMocixhKSxyLmZpbGxTdHlsZT1vWzBdLHIuZmlsbCgpKTooYT10aGlzLl9jYWxjdWxhdGVUaXAodiksYT1cIm1cIithWzBdK1wiLFwiK2FbMV0rXCIgbFwiK2FbMl0rXCIsXCIrYVszXStcIiBcIithWzRdK1wiLFwiK2FbNV0rXCIgeGVcIixsWzJdPWQmJi9eKHJ8YikvaS50ZXN0KGUuc3RyaW5nKCkpPzg9PT1vZS5pZT8yOjE6MCxmLmNzcyh7Y29vcmRzaXplOmNbMF0rZCtcIiBcIisoY1sxXStkKSxhbnRpYWxpYXM6XCJcIisodi5zdHJpbmcoKS5pbmRleE9mKE4pPi0xKSxsZWZ0OmxbMF0tbFsyXSpOdW1iZXIobj09PVMpLHRvcDpsWzFdLWxbMl0qTnVtYmVyKG49PT1MKSx3aWR0aDpjWzBdK2QsaGVpZ2h0OmNbMV0rZH0pLmVhY2goZnVuY3Rpb24odCl7dmFyIGU9cyh0aGlzKTtlW2UucHJvcD9cInByb3BcIjpcImF0dHJcIl0oe2Nvb3Jkc2l6ZTpjWzBdK2QrXCIgXCIrKGNbMV0rZCkscGF0aDphLGZpbGxjb2xvcjpvWzBdLGZpbGxlZDohIXQsc3Ryb2tlZDohdH0pLnRvZ2dsZSghKCFkJiYhdCkpLCF0JiZlLmh0bWwocWUoXCJzdHJva2VcIiwnd2VpZ2h0PVwiJysyKmQrJ3B4XCIgY29sb3I9XCInK29bMV0rJ1wiIG1pdGVybGltaXQ9XCIxMDAwXCIgam9pbnN0eWxlPVwibWl0ZXJcIicpKX0pKSx0Lm9wZXJhJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cC50aXAuY3NzKHtkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsdmlzaWJpbGl0eTpcInZpc2libGVcIn0pfSwxKSxpIT09ayYmdGhpcy5jYWxjdWxhdGUoZSxjKX0sY2FsY3VsYXRlOmZ1bmN0aW9uKHQsZSl7aWYoIXRoaXMuZW5hYmxlZClyZXR1cm4gazt2YXIgaSxvLG49dGhpcyxyPXRoaXMucXRpcC5lbGVtZW50cyxhPXRoaXMuZWxlbWVudCxoPXRoaXMub3B0aW9ucy5vZmZzZXQsbD0oci50b29sdGlwLmhhc0NsYXNzKFwidWktd2lkZ2V0XCIpLHt9KTtyZXR1cm4gdD10fHx0aGlzLmNvcm5lcixpPXQucHJlY2VkYW5jZSxlPWV8fHRoaXMuX2NhbGN1bGF0ZVNpemUodCksbz1bdC54LHQueV0saT09PVMmJm8ucmV2ZXJzZSgpLHMuZWFjaChvLGZ1bmN0aW9uKHMsbyl7dmFyIGEsYyxkO289PT1OPyhhPWk9PT1MP0Y6RCxsW2FdPVwiNTAlXCIsbFtjZStcIi1cIithXT0tTWF0aC5yb3VuZChlW2k9PT1MPzA6MV0vMikraCk6KGE9bi5fcGFyc2VXaWR0aCh0LG8sci50b29sdGlwKSxjPW4uX3BhcnNlV2lkdGgodCxvLHIuY29udGVudCksZD1uLl9wYXJzZVJhZGl1cyh0KSxsW29dPU1hdGgubWF4KC1uLmJvcmRlcixzP2M6aCsoZD5hP2Q6LWEpKSlcbn0pLGxbdFtpXV0tPWVbaT09PVM/MDoxXSxhLmNzcyh7bWFyZ2luOlwiXCIsdG9wOlwiXCIsYm90dG9tOlwiXCIsbGVmdDpcIlwiLHJpZ2h0OlwiXCJ9KS5jc3MobCksbH0scmVwb3NpdGlvbjpmdW5jdGlvbih0LGUscyl7ZnVuY3Rpb24gbyh0LGUsaSxzLG8pe3Q9PT1WJiZsLnByZWNlZGFuY2U9PT1lJiZjW3NdJiZsW2ldIT09Tj9sLnByZWNlZGFuY2U9bC5wcmVjZWRhbmNlPT09Uz9MOlM6dCE9PVYmJmNbc10mJihsW2VdPWxbZV09PT1OP2Nbc10+MD9zOm86bFtlXT09PXM/bzpzKX1mdW5jdGlvbiBuKHQsZSxvKXtsW3RdPT09Tj9nW2NlK1wiLVwiK2VdPWZbdF09cltjZStcIi1cIitlXS1jW2VdOihhPXJbb10hPT1pP1tjW2VdLC1yW2VdXTpbLWNbZV0scltlXV0sKGZbdF09TWF0aC5tYXgoYVswXSxhWzFdKSk+YVswXSYmKHNbZV0tPWNbZV0sZltlXT1rKSxnW3Jbb10hPT1pP286ZV09Zlt0XSl9aWYodGhpcy5lbmFibGVkKXt2YXIgcixhLGg9ZS5jYWNoZSxsPXRoaXMuY29ybmVyLmNsb25lKCksYz1zLmFkanVzdGVkLGQ9ZS5vcHRpb25zLnBvc2l0aW9uLmFkanVzdC5tZXRob2Quc3BsaXQoXCIgXCIpLHA9ZFswXSx1PWRbMV18fGRbMF0sZj17bGVmdDprLHRvcDprLHg6MCx5OjB9LGc9e307dGhpcy5jb3JuZXIuZml4ZWQhPT1XJiYobyhwLFMsTCxGLFApLG8odSxMLFMsRCxPKSxsLnN0cmluZygpPT09aC5jb3JuZXIuc3RyaW5nKCl8fGguY29ybmVyVG9wPT09Yy50b3AmJmguY29ybmVyTGVmdD09PWMubGVmdHx8dGhpcy51cGRhdGUobCxrKSkscj10aGlzLmNhbGN1bGF0ZShsKSxyLnJpZ2h0IT09aSYmKHIubGVmdD0tci5yaWdodCksci5ib3R0b20hPT1pJiYoci50b3A9LXIuYm90dG9tKSxyLnVzZXI9dGhpcy5vZmZzZXQsKGYubGVmdD1wPT09ViYmISFjLmxlZnQpJiZuKFMsRixQKSwoZi50b3A9dT09PVYmJiEhYy50b3ApJiZuKEwsRCxPKSx0aGlzLmVsZW1lbnQuY3NzKGcpLnRvZ2dsZSghKGYueCYmZi55fHxsLng9PT1OJiZmLnl8fGwueT09PU4mJmYueCkpLHMubGVmdC09ci5sZWZ0LmNoYXJBdD9yLnVzZXI6cCE9PVZ8fGYudG9wfHwhZi5sZWZ0JiYhZi50b3A/ci5sZWZ0K3RoaXMuYm9yZGVyOjAscy50b3AtPXIudG9wLmNoYXJBdD9yLnVzZXI6dSE9PVZ8fGYubGVmdHx8IWYubGVmdCYmIWYudG9wP3IudG9wK3RoaXMuYm9yZGVyOjAsaC5jb3JuZXJMZWZ0PWMubGVmdCxoLmNvcm5lclRvcD1jLnRvcCxoLmNvcm5lcj1sLmNsb25lKCl9fSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5xdGlwLl91bmJpbmQodGhpcy5xdGlwLnRvb2x0aXAsdGhpcy5fbnMpLHRoaXMucXRpcC5lbGVtZW50cy50aXAmJnRoaXMucXRpcC5lbGVtZW50cy50aXAuZmluZChcIipcIikucmVtb3ZlKCkuZW5kKCkucmVtb3ZlKCl9fSksbGU9Ui50aXA9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB4KHQsdC5vcHRpb25zLnN0eWxlLnRpcCl9LGxlLmluaXRpYWxpemU9XCJyZW5kZXJcIixsZS5zYW5pdGl6ZT1mdW5jdGlvbih0KXtpZih0LnN0eWxlJiZcInRpcFwiaW4gdC5zdHlsZSl7dmFyIGU9dC5zdHlsZS50aXA7XCJvYmplY3RcIiE9dHlwZW9mIGUmJihlPXQuc3R5bGUudGlwPXtjb3JuZXI6ZX0pLC9zdHJpbmd8Ym9vbGVhbi9pLnRlc3QodHlwZW9mIGUuY29ybmVyKXx8KGUuY29ybmVyPVcpfX0sTS50aXA9e1wiXnBvc2l0aW9uLm15fHN0eWxlLnRpcC4oY29ybmVyfG1pbWljfGJvcmRlcikkXCI6ZnVuY3Rpb24oKXt0aGlzLmNyZWF0ZSgpLHRoaXMucXRpcC5yZXBvc2l0aW9uKCl9LFwiXnN0eWxlLnRpcC4oaGVpZ2h0fHdpZHRoKSRcIjpmdW5jdGlvbih0KXt0aGlzLnNpemU9W3Qud2lkdGgsdC5oZWlnaHRdLHRoaXMudXBkYXRlKCksdGhpcy5xdGlwLnJlcG9zaXRpb24oKX0sXCJeY29udGVudC50aXRsZXxzdHlsZS4oY2xhc3Nlc3x3aWRnZXQpJFwiOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGUoKX19LHMuZXh0ZW5kKFcsVC5kZWZhdWx0cyx7c3R5bGU6e3RpcDp7Y29ybmVyOlcsbWltaWM6ayx3aWR0aDo2LGhlaWdodDo2LGJvcmRlcjpXLG9mZnNldDowfX19KTt2YXIgQ2UsVGUsamU9XCJxdGlwLW1vZGFsXCIsemU9XCIuXCIramU7VGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2lmKHMuZXhwcltcIjpcIl0uZm9jdXNhYmxlKXJldHVybiBzLmV4cHJbXCI6XCJdLmZvY3VzYWJsZTt2YXIgZSxpLG8sbj0haXNOYU4ocy5hdHRyKHQsXCJ0YWJpbmRleFwiKSkscj10Lm5vZGVOYW1lJiZ0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJhcmVhXCI9PT1yPyhlPXQucGFyZW50Tm9kZSxpPWUubmFtZSx0LmhyZWYmJmkmJlwibWFwXCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/KG89cyhcImltZ1t1c2VtYXA9I1wiK2krXCJdXCIpWzBdLCEhbyYmby5pcyhcIjp2aXNpYmxlXCIpKTohMSk6L2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KHIpPyF0LmRpc2FibGVkOlwiYVwiPT09cj90LmhyZWZ8fG46bn1mdW5jdGlvbiBpKHQpezE+Yy5sZW5ndGgmJnQubGVuZ3RoP3Qubm90KFwiYm9keVwiKS5ibHVyKCk6Yy5maXJzdCgpLmZvY3VzKCl9ZnVuY3Rpb24gbyh0KXtpZihoLmlzKFwiOnZpc2libGVcIikpe3ZhciBlLG89cyh0LnRhcmdldCksYT1uLnRvb2x0aXAsbD1vLmNsb3Nlc3QoVSk7ZT0xPmwubGVuZ3RoP2s6cGFyc2VJbnQobFswXS5zdHlsZS56SW5kZXgsMTApPnBhcnNlSW50KGFbMF0uc3R5bGUuekluZGV4LDEwKSxlfHxvLmNsb3Nlc3QoVSlbMF09PT1hWzBdfHxpKG8pLHI9dC50YXJnZXQ9PT1jW2MubGVuZ3RoLTFdfX12YXIgbixyLGEsaCxsPXRoaXMsYz17fTtzLmV4dGVuZChsLHtpbml0OmZ1bmN0aW9uKCl7cmV0dXJuIGg9bC5lbGVtPXMoXCI8ZGl2IC8+XCIse2lkOlwicXRpcC1vdmVybGF5XCIsaHRtbDpcIjxkaXY+PC9kaXY+XCIsbW91c2Vkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIGt9fSkuaGlkZSgpLHMoZS5ib2R5KS5iaW5kKFwiZm9jdXNpblwiK3plLG8pLHMoZSkuYmluZChcImtleWRvd25cIit6ZSxmdW5jdGlvbih0KXtuJiZuLm9wdGlvbnMuc2hvdy5tb2RhbC5lc2NhcGUmJjI3PT09dC5rZXlDb2RlJiZuLmhpZGUodCl9KSxoLmJpbmQoXCJjbGlja1wiK3plLGZ1bmN0aW9uKHQpe24mJm4ub3B0aW9ucy5zaG93Lm1vZGFsLmJsdXImJm4uaGlkZSh0KX0pLGx9LHVwZGF0ZTpmdW5jdGlvbihlKXtuPWUsYz1lLm9wdGlvbnMuc2hvdy5tb2RhbC5zdGVhbGZvY3VzIT09az9lLnRvb2x0aXAuZmluZChcIipcIikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyl9KTpbXX0sdG9nZ2xlOmZ1bmN0aW9uKHQsbyxyKXt2YXIgYz0ocyhlLmJvZHkpLHQudG9vbHRpcCksZD10Lm9wdGlvbnMuc2hvdy5tb2RhbCxwPWQuZWZmZWN0LHU9bz9cInNob3dcIjpcImhpZGVcIixmPWguaXMoXCI6dmlzaWJsZVwiKSxnPXMoemUpLmZpbHRlcihcIjp2aXNpYmxlOm5vdCg6YW5pbWF0ZWQpXCIpLm5vdChjKTtyZXR1cm4gbC51cGRhdGUodCksbyYmZC5zdGVhbGZvY3VzIT09ayYmaShzKFwiOmZvY3VzXCIpKSxoLnRvZ2dsZUNsYXNzKFwiYmx1cnNcIixkLmJsdXIpLG8mJmguYXBwZW5kVG8oZS5ib2R5KSxoLmlzKFwiOmFuaW1hdGVkXCIpJiZmPT09byYmYSE9PWt8fCFvJiZnLmxlbmd0aD9sOihoLnN0b3AoVyxrKSxzLmlzRnVuY3Rpb24ocCk/cC5jYWxsKGgsbyk6cD09PWs/aFt1XSgpOmguZmFkZVRvKHBhcnNlSW50KHIsMTApfHw5MCxvPzE6MCxmdW5jdGlvbigpe298fGguaGlkZSgpfSksb3x8aC5xdWV1ZShmdW5jdGlvbih0KXtoLmNzcyh7bGVmdDpcIlwiLHRvcDpcIlwifSkscyh6ZSkubGVuZ3RofHxoLmRldGFjaCgpLHQoKX0pLGE9byxuLmRlc3Ryb3llZCYmKG49RSksbCl9fSksbC5pbml0KCl9LFRlPW5ldyBUZSxzLmV4dGVuZChxLnByb3RvdHlwZSx7aW5pdDpmdW5jdGlvbih0KXt2YXIgZT10LnRvb2x0aXA7cmV0dXJuIHRoaXMub3B0aW9ucy5vbj8odC5lbGVtZW50cy5vdmVybGF5PVRlLmVsZW0sZS5hZGRDbGFzcyhqZSkuY3NzKFwiei1pbmRleFwiLFQubW9kYWxfemluZGV4K3MoemUpLmxlbmd0aCksdC5fYmluZChlLFtcInRvb2x0aXBzaG93XCIsXCJ0b29sdGlwaGlkZVwiXSxmdW5jdGlvbih0LGksbyl7dmFyIG49dC5vcmlnaW5hbEV2ZW50O2lmKHQudGFyZ2V0PT09ZVswXSlpZihuJiZcInRvb2x0aXBoaWRlXCI9PT10LnR5cGUmJi9tb3VzZShsZWF2ZXxlbnRlcikvLnRlc3Qobi50eXBlKSYmcyhuLnJlbGF0ZWRUYXJnZXQpLmNsb3Nlc3QoVGUuZWxlbVswXSkubGVuZ3RoKXRyeXt0LnByZXZlbnREZWZhdWx0KCl9Y2F0Y2gocil7fWVsc2UoIW58fG4mJlwidG9vbHRpcHNvbG9cIiE9PW4udHlwZSkmJnRoaXMudG9nZ2xlKHQsXCJ0b29sdGlwc2hvd1wiPT09dC50eXBlLG8pfSx0aGlzLl9ucyx0aGlzKSx0Ll9iaW5kKGUsXCJ0b29sdGlwZm9jdXNcIixmdW5jdGlvbih0LGkpe2lmKCF0LmlzRGVmYXVsdFByZXZlbnRlZCgpJiZ0LnRhcmdldD09PWVbMF0pe3ZhciBvPXMoemUpLG49VC5tb2RhbF96aW5kZXgrby5sZW5ndGgscj1wYXJzZUludChlWzBdLnN0eWxlLnpJbmRleCwxMCk7VGUuZWxlbVswXS5zdHlsZS56SW5kZXg9bi0xLG8uZWFjaChmdW5jdGlvbigpe3RoaXMuc3R5bGUuekluZGV4PnImJih0aGlzLnN0eWxlLnpJbmRleC09MSl9KSxvLmZpbHRlcihcIi5cIitaKS5xdGlwKFwiYmx1clwiLHQub3JpZ2luYWxFdmVudCksZS5hZGRDbGFzcyhaKVswXS5zdHlsZS56SW5kZXg9bixUZS51cGRhdGUoaSk7dHJ5e3QucHJldmVudERlZmF1bHQoKX1jYXRjaChhKXt9fX0sdGhpcy5fbnMsdGhpcyksdC5fYmluZChlLFwidG9vbHRpcGhpZGVcIixmdW5jdGlvbih0KXt0LnRhcmdldD09PWVbMF0mJnMoemUpLmZpbHRlcihcIjp2aXNpYmxlXCIpLm5vdChlKS5sYXN0KCkucXRpcChcImZvY3VzXCIsdCl9LHRoaXMuX25zLHRoaXMpLGkpOnRoaXN9LHRvZ2dsZTpmdW5jdGlvbih0LGUscyl7cmV0dXJuIHQmJnQuaXNEZWZhdWx0UHJldmVudGVkKCk/dGhpczooVGUudG9nZ2xlKHRoaXMucXRpcCwhIWUscyksaSl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnF0aXAudG9vbHRpcC5yZW1vdmVDbGFzcyhqZSksdGhpcy5xdGlwLl91bmJpbmQodGhpcy5xdGlwLnRvb2x0aXAsdGhpcy5fbnMpLFRlLnRvZ2dsZSh0aGlzLnF0aXAsayksZGVsZXRlIHRoaXMucXRpcC5lbGVtZW50cy5vdmVybGF5fX0pLENlPVIubW9kYWw9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBxKHQsdC5vcHRpb25zLnNob3cubW9kYWwpfSxDZS5zYW5pdGl6ZT1mdW5jdGlvbih0KXt0LnNob3cmJihcIm9iamVjdFwiIT10eXBlb2YgdC5zaG93Lm1vZGFsP3Quc2hvdy5tb2RhbD17b246ISF0LnNob3cubW9kYWx9OnQuc2hvdy5tb2RhbC5vbj09PWkmJih0LnNob3cubW9kYWwub249VykpfSxULm1vZGFsX3ppbmRleD1ULnppbmRleC0yMDAsQ2UuaW5pdGlhbGl6ZT1cInJlbmRlclwiLE0ubW9kYWw9e1wiXnNob3cubW9kYWwuKG9ufGJsdXIpJFwiOmZ1bmN0aW9uKCl7dGhpcy5kZXN0cm95KCksdGhpcy5pbml0KCksdGhpcy5xdGlwLmVsZW1zLm92ZXJsYXkudG9nZ2xlKHRoaXMucXRpcC50b29sdGlwWzBdLm9mZnNldFdpZHRoPjApfX0scy5leHRlbmQoVyxULmRlZmF1bHRzLHtzaG93Onttb2RhbDp7b246ayxlZmZlY3Q6VyxibHVyOlcsc3RlYWxmb2N1czpXLGVzY2FwZTpXfX19KSxSLnZpZXdwb3J0PWZ1bmN0aW9uKGkscyxvLG4scixhLGgpe2Z1bmN0aW9uIGwodCxlLGksbyxuLHIsYSxoLGwpe3ZhciBjPXNbbl0scD1fW3RdLGI9eFt0XSx3PWk9PT1WLHE9cD09PW4/bDpwPT09cj8tbDotbC8yLEM9Yj09PW4/aDpiPT09cj8taDotaC8yLFQ9dltuXSt5W25dLShmPzA6dVtuXSksaj1ULWMsej1jK2wtKGE9PT1BP2c6bSktVCxNPXEtKF8ucHJlY2VkYW5jZT09PXR8fHA9PT1fW2VdP0M6MCktKGI9PT1OP2gvMjowKTtyZXR1cm4gdz8oTT0ocD09PW4/MTotMSkqcSxzW25dKz1qPjA/ajp6PjA/LXo6MCxzW25dPU1hdGgubWF4KC11W25dK3lbbl0sYy1NLE1hdGgubWluKE1hdGgubWF4KC11W25dK3lbbl0rKGE9PT1BP2c6bSksYytNKSxzW25dLFwiY2VudGVyXCI9PT1wP2MtcToxZTkpKSk6KG8qPWk9PT0kPzI6MCxqPjAmJihwIT09bnx8ej4wKT8oc1tuXS09TStvLGQuaW52ZXJ0KHQsbikpOno+MCYmKHAhPT1yfHxqPjApJiYoc1tuXS09KHA9PT1OPy1NOk0pK28sZC5pbnZlcnQodCxyKSksdj5zW25dJiYtc1tuXT56JiYoc1tuXT1jLGQ9Xy5jbG9uZSgpKSksc1tuXS1jfXZhciBjLGQscCx1LGYsZyxtLHYseSxiPW8udGFyZ2V0LHc9aS5lbGVtZW50cy50b29sdGlwLF89by5teSx4PW8uYXQscT1vLmFkanVzdCxDPXEubWV0aG9kLnNwbGl0KFwiIFwiKSxUPUNbMF0saj1DWzFdfHxDWzBdLHo9by52aWV3cG9ydCxNPW8uY29udGFpbmVyLEk9aS5jYWNoZSxXPXtsZWZ0OjAsdG9wOjB9O3JldHVybiB6LmpxdWVyeSYmYlswXSE9PXQmJmJbMF0hPT1lLmJvZHkmJlwibm9uZVwiIT09cS5tZXRob2Q/KHU9TS5vZmZzZXQoKXx8VyxmPVwic3RhdGljXCI9PT1NLmNzcyhcInBvc2l0aW9uXCIpLGM9XCJmaXhlZFwiPT09dy5jc3MoXCJwb3NpdGlvblwiKSxnPXpbMF09PT10P3oud2lkdGgoKTp6Lm91dGVyV2lkdGgoayksbT16WzBdPT09dD96LmhlaWdodCgpOnoub3V0ZXJIZWlnaHQoayksdj17bGVmdDpjPzA6ei5zY3JvbGxMZWZ0KCksdG9wOmM/MDp6LnNjcm9sbFRvcCgpfSx5PXoub2Zmc2V0KCl8fFcsKFwic2hpZnRcIiE9PVR8fFwic2hpZnRcIiE9PWopJiYoZD1fLmNsb25lKCkpLFc9e2xlZnQ6XCJub25lXCIhPT1UP2woUyxMLFQscS54LEYsUCxBLG4sYSk6MCx0b3A6XCJub25lXCIhPT1qP2woTCxTLGoscS55LEQsTyxCLHIsaCk6MH0sZCYmSS5sYXN0Q2xhc3MhPT0ocD1YK1wiLXBvcy1cIitkLmFiYnJldigpKSYmdy5yZW1vdmVDbGFzcyhpLmNhY2hlLmxhc3RDbGFzcykuYWRkQ2xhc3MoaS5jYWNoZS5sYXN0Q2xhc3M9cCksVyk6V30sUi5wb2x5cz17cG9seWdvbjpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbyxuPXt3aWR0aDowLGhlaWdodDowLHBvc2l0aW9uOnt0b3A6MWUxMCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MWUxMH0sYWRqdXN0YWJsZTprfSxyPTAsYT1bXSxoPTEsbD0xLGM9MCxkPTA7Zm9yKHI9dC5sZW5ndGg7ci0tOylpPVtwYXJzZUludCh0Wy0tcl0sMTApLHBhcnNlSW50KHRbcisxXSwxMCldLGlbMF0+bi5wb3NpdGlvbi5yaWdodCYmKG4ucG9zaXRpb24ucmlnaHQ9aVswXSksaVswXTxuLnBvc2l0aW9uLmxlZnQmJihuLnBvc2l0aW9uLmxlZnQ9aVswXSksaVsxXT5uLnBvc2l0aW9uLmJvdHRvbSYmKG4ucG9zaXRpb24uYm90dG9tPWlbMV0pLGlbMV08bi5wb3NpdGlvbi50b3AmJihuLnBvc2l0aW9uLnRvcD1pWzFdKSxhLnB1c2goaSk7aWYocz1uLndpZHRoPU1hdGguYWJzKG4ucG9zaXRpb24ucmlnaHQtbi5wb3NpdGlvbi5sZWZ0KSxvPW4uaGVpZ2h0PU1hdGguYWJzKG4ucG9zaXRpb24uYm90dG9tLW4ucG9zaXRpb24udG9wKSxcImNcIj09PWUuYWJicmV2KCkpbi5wb3NpdGlvbj17bGVmdDpuLnBvc2l0aW9uLmxlZnQrbi53aWR0aC8yLHRvcDpuLnBvc2l0aW9uLnRvcCtuLmhlaWdodC8yfTtlbHNle2Zvcig7cz4wJiZvPjAmJmg+MCYmbD4wOylmb3Iocz1NYXRoLmZsb29yKHMvMiksbz1NYXRoLmZsb29yKG8vMiksZS54PT09Rj9oPXM6ZS54PT09UD9oPW4ud2lkdGgtczpoKz1NYXRoLmZsb29yKHMvMiksZS55PT09RD9sPW86ZS55PT09Tz9sPW4uaGVpZ2h0LW86bCs9TWF0aC5mbG9vcihvLzIpLHI9YS5sZW5ndGg7ci0tJiYhKDI+YS5sZW5ndGgpOyljPWFbcl1bMF0tbi5wb3NpdGlvbi5sZWZ0LGQ9YVtyXVsxXS1uLnBvc2l0aW9uLnRvcCwoZS54PT09RiYmYz49aHx8ZS54PT09UCYmaD49Y3x8ZS54PT09TiYmKGg+Y3x8Yz5uLndpZHRoLWgpfHxlLnk9PT1EJiZkPj1sfHxlLnk9PT1PJiZsPj1kfHxlLnk9PT1OJiYobD5kfHxkPm4uaGVpZ2h0LWwpKSYmYS5zcGxpY2UociwxKTtuLnBvc2l0aW9uPXtsZWZ0OmFbMF1bMF0sdG9wOmFbMF1bMV19fXJldHVybiBufSxyZWN0OmZ1bmN0aW9uKHQsZSxpLHMpe3JldHVybnt3aWR0aDpNYXRoLmFicyhpLXQpLGhlaWdodDpNYXRoLmFicyhzLWUpLHBvc2l0aW9uOntsZWZ0Ok1hdGgubWluKHQsaSksdG9wOk1hdGgubWluKGUscyl9fX0sX2FuZ2xlczp7dGM6MS41LHRyOjcvNCx0bDo1LzQsYmM6LjUsYnI6LjI1LGJsOi43NSxyYzoyLGxjOjEsYzowfSxlbGxpcHNlOmZ1bmN0aW9uKHQsZSxpLHMsbyl7dmFyIG49Ui5wb2x5cy5fYW5nbGVzW28uYWJicmV2KCldLHI9MD09PW4/MDppKk1hdGguY29zKG4qTWF0aC5QSSksYT1zKk1hdGguc2luKG4qTWF0aC5QSSk7cmV0dXJue3dpZHRoOjIqaS1NYXRoLmFicyhyKSxoZWlnaHQ6MipzLU1hdGguYWJzKGEpLHBvc2l0aW9uOntsZWZ0OnQrcix0b3A6ZSthfSxhZGp1c3RhYmxlOmt9fSxjaXJjbGU6ZnVuY3Rpb24odCxlLGkscyl7cmV0dXJuIFIucG9seXMuZWxsaXBzZSh0LGUsaSxpLHMpfX0sUi5zdmc9ZnVuY3Rpb24odCxpLG8pe2Zvcih2YXIgbixyLGEsaCxsLGMsZCxwLHUsZixnLG09cyhlKSx2PWlbMF0seT1zKHYub3duZXJTVkdFbGVtZW50KSxiPTEsdz0xLF89ITA7IXYuZ2V0QkJveDspdj12LnBhcmVudE5vZGU7aWYoIXYuZ2V0QkJveHx8IXYucGFyZW50Tm9kZSlyZXR1cm4gaztuPXkuYXR0cihcIndpZHRoXCIpfHx5LndpZHRoKCl8fHBhcnNlSW50KHkuY3NzKFwid2lkdGhcIiksMTApLHI9eS5hdHRyKFwiaGVpZ2h0XCIpfHx5LmhlaWdodCgpfHxwYXJzZUludCh5LmNzcyhcImhlaWdodFwiKSwxMCk7dmFyIHg9KHBhcnNlSW50KGkuY3NzKFwic3Ryb2tlLXdpZHRoXCIpLDEwKXx8MCkvMjtzd2l0Y2goeCYmKGIrPXgvbix3Kz14L3IpLHYubm9kZU5hbWUpe2Nhc2VcImVsbGlwc2VcIjpjYXNlXCJjaXJjbGVcIjpmPVIucG9seXMuZWxsaXBzZSh2LmN4LmJhc2VWYWwudmFsdWUsdi5jeS5iYXNlVmFsLnZhbHVlLCh2LnJ4fHx2LnIpLmJhc2VWYWwudmFsdWUreCwodi5yeXx8di5yKS5iYXNlVmFsLnZhbHVlK3gsbyk7YnJlYWs7Y2FzZVwibGluZVwiOmNhc2VcInBvbHlnb25cIjpjYXNlXCJwb2x5bGluZVwiOmZvcih1PXYucG9pbnRzfHxbe3g6di54MS5iYXNlVmFsLnZhbHVlLHk6di55MS5iYXNlVmFsLnZhbHVlfSx7eDp2LngyLmJhc2VWYWwudmFsdWUseTp2LnkyLmJhc2VWYWwudmFsdWV9XSxmPVtdLHA9LTEsYz11Lm51bWJlck9mSXRlbXN8fHUubGVuZ3RoO2M+KytwOylkPXUuZ2V0SXRlbT91LmdldEl0ZW0ocCk6dVtwXSxmLnB1c2guYXBwbHkoZixbZC54LGQueV0pO2Y9Ui5wb2x5cy5wb2x5Z29uKGYsbyk7YnJlYWs7ZGVmYXVsdDpmPXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZj17d2lkdGg6Zi53aWR0aCxoZWlnaHQ6Zi5oZWlnaHQscG9zaXRpb246e2xlZnQ6Zi5sZWZ0LHRvcDpmLnRvcH19LF89ITF9cmV0dXJuIGc9Zi5wb3NpdGlvbix5PXlbMF0sXyYmKHkuY3JlYXRlU1ZHUG9pbnQmJihhPXYuZ2V0U2NyZWVuQ1RNKCksdT15LmNyZWF0ZVNWR1BvaW50KCksdS54PWcubGVmdCx1Lnk9Zy50b3AsaD11Lm1hdHJpeFRyYW5zZm9ybShhKSxnLmxlZnQ9aC54LGcudG9wPWgueSkseS52aWV3Qm94JiYobD15LnZpZXdCb3guYmFzZVZhbCkmJmwud2lkdGgmJmwuaGVpZ2h0JiYoYio9bi9sLndpZHRoLHcqPXIvbC5oZWlnaHQpKSxnLmxlZnQrPW0uc2Nyb2xsTGVmdCgpLGcudG9wKz1tLnNjcm9sbFRvcCgpLGZ9LFIuaW1hZ2VtYXA9ZnVuY3Rpb24odCxlLGkpe2UuanF1ZXJ5fHwoZT1zKGUpKTt2YXIgbyxuLHIsYSxoLGw9ZS5hdHRyKFwic2hhcGVcIikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKFwicG9seVwiLFwicG9seWdvblwiKSxjPXMoJ2ltZ1t1c2VtYXA9XCIjJytlLnBhcmVudChcIm1hcFwiKS5hdHRyKFwibmFtZVwiKSsnXCJdJyksZD1zLnRyaW0oZS5hdHRyKFwiY29vcmRzXCIpKSxwPWQucmVwbGFjZSgvLCQvLFwiXCIpLnNwbGl0KFwiLFwiKTtpZighYy5sZW5ndGgpcmV0dXJuIGs7aWYoXCJwb2x5Z29uXCI9PT1sKWE9Ui5wb2x5cy5wb2x5Z29uKHAsaSk7ZWxzZXtpZighUi5wb2x5c1tsXSlyZXR1cm4gaztmb3Iocj0tMSxoPXAubGVuZ3RoLG49W107aD4rK3I7KW4ucHVzaChwYXJzZUludChwW3JdLDEwKSk7YT1SLnBvbHlzW2xdLmFwcGx5KHRoaXMsbi5jb25jYXQoaSkpfXJldHVybiBvPWMub2Zmc2V0KCksby5sZWZ0Kz1NYXRoLmNlaWwoKGMub3V0ZXJXaWR0aChrKS1jLndpZHRoKCkpLzIpLG8udG9wKz1NYXRoLmNlaWwoKGMub3V0ZXJIZWlnaHQoayktYy5oZWlnaHQoKSkvMiksYS5wb3NpdGlvbi5sZWZ0Kz1vLmxlZnQsYS5wb3NpdGlvbi50b3ArPW8udG9wLGF9O3ZhciBNZSxJZT0nPGlmcmFtZSBjbGFzcz1cInF0aXAtYmdpZnJhbWVcIiBmcmFtZWJvcmRlcj1cIjBcIiB0YWJpbmRleD1cIi0xXCIgc3JjPVwiamF2YXNjcmlwdDpcXCdcXCc7XCIgIHN0eWxlPVwiZGlzcGxheTpibG9jazsgcG9zaXRpb246YWJzb2x1dGU7IHotaW5kZXg6LTE7IGZpbHRlcjphbHBoYShvcGFjaXR5PTApOyAtbXMtZmlsdGVyOlwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MClcIjtcIj48L2lmcmFtZT4nO3MuZXh0ZW5kKEMucHJvdG90eXBlLHtfc2Nyb2xsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5xdGlwLmVsZW1lbnRzLm92ZXJsYXk7ZSYmKGVbMF0uc3R5bGUudG9wPXModCkuc2Nyb2xsVG9wKCkrXCJweFwiKX0saW5pdDpmdW5jdGlvbihpKXt2YXIgbz1pLnRvb2x0aXA7MT5zKFwic2VsZWN0LCBvYmplY3RcIikubGVuZ3RoJiYodGhpcy5iZ2lmcmFtZT1pLmVsZW1lbnRzLmJnaWZyYW1lPXMoSWUpLmFwcGVuZFRvKG8pLGkuX2JpbmQobyxcInRvb2x0aXBtb3ZlXCIsdGhpcy5hZGp1c3RCR0lGcmFtZSx0aGlzLl9ucyx0aGlzKSksdGhpcy5yZWRyYXdDb250YWluZXI9cyhcIjxkaXYvPlwiLHtpZDpYK1wiLXJjb250YWluZXJcIn0pLmFwcGVuZFRvKGUuYm9keSksaS5lbGVtZW50cy5vdmVybGF5JiZpLmVsZW1lbnRzLm92ZXJsYXkuYWRkQ2xhc3MoXCJxdGlwbW9kYWwtaWU2Zml4XCIpJiYoaS5fYmluZCh0LFtcInNjcm9sbFwiLFwicmVzaXplXCJdLHRoaXMuX3Njcm9sbCx0aGlzLl9ucyx0aGlzKSxpLl9iaW5kKG8sW1widG9vbHRpcHNob3dcIl0sdGhpcy5fc2Nyb2xsLHRoaXMuX25zLHRoaXMpKSx0aGlzLnJlZHJhdygpfSxhZGp1c3RCR0lGcmFtZTpmdW5jdGlvbigpe3ZhciB0LGUsaT10aGlzLnF0aXAudG9vbHRpcCxzPXtoZWlnaHQ6aS5vdXRlckhlaWdodChrKSx3aWR0aDppLm91dGVyV2lkdGgoayl9LG89dGhpcy5xdGlwLnBsdWdpbnMudGlwLG49dGhpcy5xdGlwLmVsZW1lbnRzLnRpcDtlPXBhcnNlSW50KGkuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLDEwKXx8MCxlPXtsZWZ0Oi1lLHRvcDotZX0sbyYmbiYmKHQ9XCJ4XCI9PT1vLmNvcm5lci5wcmVjZWRhbmNlP1tBLEZdOltCLERdLGVbdFsxXV0tPW5bdFswXV0oKSksdGhpcy5iZ2lmcmFtZS5jc3MoZSkuY3NzKHMpfSxyZWRyYXc6ZnVuY3Rpb24oKXtpZigxPnRoaXMucXRpcC5yZW5kZXJlZHx8dGhpcy5kcmF3aW5nKXJldHVybiB0aGlzO3ZhciB0LGUsaSxzLG89dGhpcy5xdGlwLnRvb2x0aXAsbj10aGlzLnF0aXAub3B0aW9ucy5zdHlsZSxyPXRoaXMucXRpcC5vcHRpb25zLnBvc2l0aW9uLmNvbnRhaW5lcjtyZXR1cm4gdGhpcy5xdGlwLmRyYXdpbmc9MSxuLmhlaWdodCYmby5jc3MoQixuLmhlaWdodCksbi53aWR0aD9vLmNzcyhBLG4ud2lkdGgpOihvLmNzcyhBLFwiXCIpLmFwcGVuZFRvKHRoaXMucmVkcmF3Q29udGFpbmVyKSxlPW8ud2lkdGgoKSwxPmUlMiYmKGUrPTEpLGk9by5jc3MoXCJtYXhXaWR0aFwiKXx8XCJcIixzPW8uY3NzKFwibWluV2lkdGhcIil8fFwiXCIsdD0oaStzKS5pbmRleE9mKFwiJVwiKT4tMT9yLndpZHRoKCkvMTAwOjAsaT0oaS5pbmRleE9mKFwiJVwiKT4tMT90OjEpKnBhcnNlSW50KGksMTApfHxlLHM9KHMuaW5kZXhPZihcIiVcIik+LTE/dDoxKSpwYXJzZUludChzLDEwKXx8MCxlPWkrcz9NYXRoLm1pbihNYXRoLm1heChlLHMpLGkpOmUsby5jc3MoQSxNYXRoLnJvdW5kKGUpKS5hcHBlbmRUbyhyKSksdGhpcy5kcmF3aW5nPTAsdGhpc30sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuYmdpZnJhbWUmJnRoaXMuYmdpZnJhbWUucmVtb3ZlKCksdGhpcy5xdGlwLl91bmJpbmQoW3QsdGhpcy5xdGlwLnRvb2x0aXBdLHRoaXMuX25zKX19KSxNZT1SLmllNj1mdW5jdGlvbih0KXtyZXR1cm4gNj09PW9lLmllP25ldyBDKHQpOmt9LE1lLmluaXRpYWxpemU9XCJyZW5kZXJcIixNLmllNj17XCJeY29udGVudHxzdHlsZSRcIjpmdW5jdGlvbigpe3RoaXMucmVkcmF3KCl9fX0pfSkod2luZG93LGRvY3VtZW50KTtcbi8vQCBzb3VyY2VNYXBwaW5nVVJMPWh0dHA6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcXRpcDIvMi4yLjAvanF1ZXJ5LnF0aXAubWluLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9kb21Db25mZXR0aSA9IHJlcXVpcmUoXCJkb20tY29uZmV0dGlcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHN0eWxlID0ge1xuICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG59O1xuXG52YXIgQ29uZmV0dGkgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29uZmV0dGksIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbmZldHRpKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbmZldHRpKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb25mZXR0aS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbmZldHRpKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc2V0UmVmID0gX3RoaXMuc2V0UmVmLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb25mZXR0aSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmICghcHJldlByb3BzLmFjdGl2ZSAmJiB0aGlzLnByb3BzLmFjdGl2ZSkge1xuICAgICAgICAoMCwgX2RvbUNvbmZldHRpLmNvbmZldHRpKSh0aGlzLmNvbnRhaW5lciwgdGhpcy5wcm9wcy5jb25maWcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRSZWZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmVmKHJlZikge1xuICAgICAgdGhpcy5jb250YWluZXIgPSByZWY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLCBzdHlsZTogc3R5bGUsIHJlZjogdGhpcy5zZXRSZWYgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbmZldHRpO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29uZmV0dGk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCIvKipcbiAqIGRlZmluZXMgYSBmb2N1cyBncm91cFxuICovXG5leHBvcnQgdmFyIEZPQ1VTX0dST1VQID0gJ2RhdGEtZm9jdXMtbG9jayc7XG4vKipcbiAqIGRpc2FibGVzIGVsZW1lbnQgZGlzY292ZXJ5IGluc2lkZSBhIGdyb3VwIG1hcmtlZCBieSBrZXlcbiAqL1xuZXhwb3J0IHZhciBGT0NVU19ESVNBQkxFRCA9ICdkYXRhLWZvY3VzLWxvY2stZGlzYWJsZWQnO1xuLyoqXG4gKiBhbGxvd3MgdW5jb250cm9sbGVkIGZvY3VzIHdpdGhpbiB0aGUgbWFya2VkIGFyZWEsIGVmZmVjdGl2ZWx5IGRpc2FibGluZyBmb2N1cyBsb2NrIGZvciBpdCdzIGNvbnRlbnRcbiAqL1xuZXhwb3J0IHZhciBGT0NVU19BTExPVyA9ICdkYXRhLW5vLWZvY3VzLWxvY2snO1xuLyoqXG4gKiBpbnN0cnVjdHMgYXV0b2ZvY3VzIGVuZ2luZSB0byBwaWNrIGRlZmF1bHQgYXV0b2ZvY3VzIGluc2lkZSBhIGdpdmVuIG5vZGVcbiAqIGNhbiBiZSBzZXQgb24gdGhlIGVsZW1lbnQgb3IgY29udGFpbmVyXG4gKi9cbmV4cG9ydCB2YXIgRk9DVVNfQVVUTyA9ICdkYXRhLWF1dG9mb2N1cy1pbnNpZGUnO1xuLyoqXG4gKiBpbnN0cnVjdHMgYXV0b2ZvY3VzIHRvIGlnbm9yZSBlbGVtZW50cyB3aXRoaW4gYSBnaXZlbiBub2RlXG4gKiBjYW4gYmUgc2V0IG9uIHRoZSBlbGVtZW50IG9yIGNvbnRhaW5lclxuICovXG5leHBvcnQgdmFyIEZPQ1VTX05PX0FVVE9GT0NVUyA9ICdkYXRhLW5vLWF1dG9mb2N1cyc7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuZXhwb3J0IHZhciBoaWRkZW5HdWFyZCA9IHtcbiAgd2lkdGg6ICcxcHgnLFxuICBoZWlnaHQ6ICcwcHgnLFxuICBwYWRkaW5nOiAwLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6ICcxcHgnLFxuICBsZWZ0OiAnMXB4J1xufTtcbnZhciBJbkZvY3VzR3VhcmQgPSBmdW5jdGlvbiBJbkZvY3VzR3VhcmQoX3JlZikge1xuICB2YXIgX3JlZiRjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgY2hpbGRyZW4gPSBfcmVmJGNoaWxkcmVuID09PSB2b2lkIDAgPyBudWxsIDogX3JlZiRjaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAga2V5OiBcImd1YXJkLWZpcnN0XCIsXG4gICAgXCJkYXRhLWZvY3VzLWd1YXJkXCI6IHRydWUsXG4gICAgXCJkYXRhLWZvY3VzLWF1dG8tZ3VhcmRcIjogdHJ1ZSxcbiAgICBzdHlsZTogaGlkZGVuR3VhcmRcbiAgfSksIGNoaWxkcmVuLCBjaGlsZHJlbiAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAga2V5OiBcImd1YXJkLWxhc3RcIixcbiAgICBcImRhdGEtZm9jdXMtZ3VhcmRcIjogdHJ1ZSxcbiAgICBcImRhdGEtZm9jdXMtYXV0by1ndWFyZFwiOiB0cnVlLFxuICAgIHN0eWxlOiBoaWRkZW5HdWFyZFxuICB9KSk7XG59O1xuSW5Gb2N1c0d1YXJkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBJbkZvY3VzR3VhcmQ7IiwiaW1wb3J0IHsgY3JlYXRlTWVkaXVtLCBjcmVhdGVTaWRlY2FyTWVkaXVtIH0gZnJvbSAndXNlLXNpZGVjYXInO1xuZXhwb3J0IHZhciBtZWRpdW1Gb2N1cyA9IGNyZWF0ZU1lZGl1bSh7fSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgIGN1cnJlbnRUYXJnZXQgPSBfcmVmLmN1cnJlbnRUYXJnZXQ7XG4gIHJldHVybiB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgY3VycmVudFRhcmdldDogY3VycmVudFRhcmdldFxuICB9O1xufSk7XG5leHBvcnQgdmFyIG1lZGl1bUJsdXIgPSBjcmVhdGVNZWRpdW0oKTtcbmV4cG9ydCB2YXIgbWVkaXVtRWZmZWN0ID0gY3JlYXRlTWVkaXVtKCk7XG5leHBvcnQgdmFyIG1lZGl1bVNpZGVjYXIgPSBjcmVhdGVTaWRlY2FyTWVkaXVtKHtcbiAgYXN5bmM6IHRydWUsXG4gIHNzcjogdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xufSk7IiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgZm9jdXNTY29wZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBub2RlLCBib29sLCBzdHJpbmcsIGFueSwgYXJyYXlPZiwgb25lT2ZUeXBlLCBvYmplY3QsIGZ1bmMgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICdmb2N1cy1sb2NrL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB1c2VNZXJnZVJlZnMgfSBmcm9tICd1c2UtY2FsbGJhY2stcmVmJztcbmltcG9ydCB7IGhpZGRlbkd1YXJkIH0gZnJvbSAnLi9Gb2N1c0d1YXJkJztcbmltcG9ydCB7IG1lZGl1bUZvY3VzLCBtZWRpdW1CbHVyLCBtZWRpdW1TaWRlY2FyIH0gZnJvbSAnLi9tZWRpdW0nO1xuaW1wb3J0IHsgZm9jdXNTY29wZSB9IGZyb20gJy4vc2NvcGUnO1xudmFyIGVtcHR5QXJyYXkgPSBbXTtcbnZhciBGb2N1c0xvY2sgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb2N1c0xvY2tVSShwcm9wcywgcGFyZW50UmVmKSB7XG4gIHZhciBfZXh0ZW5kczI7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSgpLFxuICAgIHJlYWxPYnNlcnZlZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICBzZXRPYnNlcnZlZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcbiAgdmFyIG9ic2VydmVkID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBpc0FjdGl2ZSA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBvcmlnaW5hbEZvY3VzZWRFbGVtZW50ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKHt9KSxcbiAgICB1cGRhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgX3Byb3BzJG5vRm9jdXNHdWFyZHMgPSBwcm9wcy5ub0ZvY3VzR3VhcmRzLFxuICAgIG5vRm9jdXNHdWFyZHMgPSBfcHJvcHMkbm9Gb2N1c0d1YXJkcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9Gb2N1c0d1YXJkcyxcbiAgICBfcHJvcHMkcGVyc2lzdGVudEZvY3UgPSBwcm9wcy5wZXJzaXN0ZW50Rm9jdXMsXG4gICAgcGVyc2lzdGVudEZvY3VzID0gX3Byb3BzJHBlcnNpc3RlbnRGb2N1ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwZXJzaXN0ZW50Rm9jdSxcbiAgICBfcHJvcHMkY3Jvc3NGcmFtZSA9IHByb3BzLmNyb3NzRnJhbWUsXG4gICAgY3Jvc3NGcmFtZSA9IF9wcm9wcyRjcm9zc0ZyYW1lID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJGNyb3NzRnJhbWUsXG4gICAgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICBhdXRvRm9jdXMgPSBfcHJvcHMkYXV0b0ZvY3VzID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJGF1dG9Gb2N1cyxcbiAgICBhbGxvd1RleHRTZWxlY3Rpb24gPSBwcm9wcy5hbGxvd1RleHRTZWxlY3Rpb24sXG4gICAgZ3JvdXAgPSBwcm9wcy5ncm91cCxcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgd2hpdGVMaXN0ID0gcHJvcHMud2hpdGVMaXN0LFxuICAgIGhhc1Bvc2l0aXZlSW5kaWNlcyA9IHByb3BzLmhhc1Bvc2l0aXZlSW5kaWNlcyxcbiAgICBfcHJvcHMkc2hhcmRzID0gcHJvcHMuc2hhcmRzLFxuICAgIHNoYXJkcyA9IF9wcm9wcyRzaGFyZHMgPT09IHZvaWQgMCA/IGVtcHR5QXJyYXkgOiBfcHJvcHMkc2hhcmRzLFxuICAgIF9wcm9wcyRhcyA9IHByb3BzLmFzLFxuICAgIENvbnRhaW5lciA9IF9wcm9wcyRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkYXMsXG4gICAgX3Byb3BzJGxvY2tQcm9wcyA9IHByb3BzLmxvY2tQcm9wcyxcbiAgICBjb250YWluZXJQcm9wcyA9IF9wcm9wcyRsb2NrUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJGxvY2tQcm9wcyxcbiAgICBTaWRlQ2FyID0gcHJvcHMuc2lkZUNhcixcbiAgICBfcHJvcHMkcmV0dXJuRm9jdXMgPSBwcm9wcy5yZXR1cm5Gb2N1cyxcbiAgICBzaG91bGRSZXR1cm5Gb2N1cyA9IF9wcm9wcyRyZXR1cm5Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmV0dXJuRm9jdXMsXG4gICAgZm9jdXNPcHRpb25zID0gcHJvcHMuZm9jdXNPcHRpb25zLFxuICAgIG9uQWN0aXZhdGlvbkNhbGxiYWNrID0gcHJvcHMub25BY3RpdmF0aW9uLFxuICAgIG9uRGVhY3RpdmF0aW9uQ2FsbGJhY2sgPSBwcm9wcy5vbkRlYWN0aXZhdGlvbjtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgaWQgPSBfUmVhY3QkdXNlU3RhdGUzWzBdO1xuICB2YXIgb25BY3RpdmF0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgY2FwdHVyZUZvY3VzUmVzdG9yZSA9IF9yZWYuY2FwdHVyZUZvY3VzUmVzdG9yZTtcbiAgICBpZiAoIW9yaWdpbmFsRm9jdXNlZEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgdmFyIF9kb2N1bWVudDtcbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gKF9kb2N1bWVudCA9IGRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICBvcmlnaW5hbEZvY3VzZWRFbGVtZW50LmN1cnJlbnQgPSBhY3RpdmVFbGVtZW50O1xuICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgb3JpZ2luYWxGb2N1c2VkRWxlbWVudC5jdXJyZW50ID0gY2FwdHVyZUZvY3VzUmVzdG9yZShhY3RpdmVFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9ic2VydmVkLmN1cnJlbnQgJiYgb25BY3RpdmF0aW9uQ2FsbGJhY2spIHtcbiAgICAgIG9uQWN0aXZhdGlvbkNhbGxiYWNrKG9ic2VydmVkLmN1cnJlbnQpO1xuICAgIH1cbiAgICBpc0FjdGl2ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB1cGRhdGUoKTtcbiAgfSwgW29uQWN0aXZhdGlvbkNhbGxiYWNrXSk7XG4gIHZhciBvbkRlYWN0aXZhdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpc0FjdGl2ZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgaWYgKG9uRGVhY3RpdmF0aW9uQ2FsbGJhY2spIHtcbiAgICAgIG9uRGVhY3RpdmF0aW9uQ2FsbGJhY2sob2JzZXJ2ZWQuY3VycmVudCk7XG4gICAgfVxuICAgIHVwZGF0ZSgpO1xuICB9LCBbb25EZWFjdGl2YXRpb25DYWxsYmFja10pO1xuICB2YXIgcmV0dXJuRm9jdXMgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoYWxsb3dEZWZlcikge1xuICAgIHZhciBmb2N1c1Jlc3RvcmUgPSBvcmlnaW5hbEZvY3VzZWRFbGVtZW50LmN1cnJlbnQ7XG4gICAgaWYgKGZvY3VzUmVzdG9yZSkge1xuICAgICAgdmFyIHJldHVybkZvY3VzVG8gPSAodHlwZW9mIGZvY3VzUmVzdG9yZSA9PT0gJ2Z1bmN0aW9uJyA/IGZvY3VzUmVzdG9yZSgpIDogZm9jdXNSZXN0b3JlKSB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgdmFyIGhvd1RvUmV0dXJuRm9jdXMgPSB0eXBlb2Ygc2hvdWxkUmV0dXJuRm9jdXMgPT09ICdmdW5jdGlvbicgPyBzaG91bGRSZXR1cm5Gb2N1cyhyZXR1cm5Gb2N1c1RvKSA6IHNob3VsZFJldHVybkZvY3VzO1xuICAgICAgaWYgKGhvd1RvUmV0dXJuRm9jdXMpIHtcbiAgICAgICAgdmFyIHJldHVybkZvY3VzT3B0aW9ucyA9IHR5cGVvZiBob3dUb1JldHVybkZvY3VzID09PSAnb2JqZWN0JyA/IGhvd1RvUmV0dXJuRm9jdXMgOiB1bmRlZmluZWQ7XG4gICAgICAgIG9yaWdpbmFsRm9jdXNlZEVsZW1lbnQuY3VycmVudCA9IG51bGw7XG4gICAgICAgIGlmIChhbGxvd0RlZmVyKSB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuRm9jdXNUby5mb2N1cyhyZXR1cm5Gb2N1c09wdGlvbnMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybkZvY3VzVG8uZm9jdXMocmV0dXJuRm9jdXNPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwgW3Nob3VsZFJldHVybkZvY3VzXSk7XG4gIHZhciBvbkZvY3VzID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGlzQWN0aXZlLmN1cnJlbnQpIHtcbiAgICAgIG1lZGl1bUZvY3VzLnVzZU1lZGl1bShldmVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHZhciBvbkJsdXIgPSBtZWRpdW1CbHVyLnVzZU1lZGl1bTtcbiAgdmFyIHNldE9ic2VydmVOb2RlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5ld09ic2VydmVkKSB7XG4gICAgaWYgKG9ic2VydmVkLmN1cnJlbnQgIT09IG5ld09ic2VydmVkKSB7XG4gICAgICBvYnNlcnZlZC5jdXJyZW50ID0gbmV3T2JzZXJ2ZWQ7XG4gICAgICBzZXRPYnNlcnZlZChuZXdPYnNlcnZlZCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBhbGxvd1RleHRTZWxlY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1JlYWN0LUZvY3VzLUxvY2s6IGFsbG93VGV4dFNlbGVjdGlvbiBpcyBkZXByZWNhdGVkIGFuZCBlbmFibGVkIGJ5IGRlZmF1bHQnKTtcbiAgICB9XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghb2JzZXJ2ZWQuY3VycmVudCAmJiB0eXBlb2YgQ29udGFpbmVyICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGb2N1c0xvY2s6IGNvdWxkIG5vdCBvYnRhaW4gcmVmIHRvIGludGVybmFsIG5vZGUnKTtcbiAgICAgIH1cbiAgICB9LCBbXSk7XG4gIH1cbiAgdmFyIGxvY2tQcm9wcyA9IF9leHRlbmRzKChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2NvbnN0YW50cy5GT0NVU19ESVNBQkxFRF0gPSBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBfZXh0ZW5kczJbY29uc3RhbnRzLkZPQ1VTX0dST1VQXSA9IGdyb3VwLCBfZXh0ZW5kczIpLCBjb250YWluZXJQcm9wcyk7XG4gIHZhciBoYXNMZWFkaW5nR3VhcmRzID0gbm9Gb2N1c0d1YXJkcyAhPT0gdHJ1ZTtcbiAgdmFyIGhhc1RhaWxpbmdHdWFyZHMgPSBoYXNMZWFkaW5nR3VhcmRzICYmIG5vRm9jdXNHdWFyZHMgIT09ICd0YWlsJztcbiAgdmFyIG1lcmdlZFJlZiA9IHVzZU1lcmdlUmVmcyhbcGFyZW50UmVmLCBzZXRPYnNlcnZlTm9kZV0pO1xuICB2YXIgZm9jdXNTY29wZVZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9ic2VydmVkOiBvYnNlcnZlZCxcbiAgICAgIHNoYXJkczogc2hhcmRzLFxuICAgICAgZW5hYmxlZDogIWRpc2FibGVkLFxuICAgICAgYWN0aXZlOiBpc0FjdGl2ZS5jdXJyZW50XG4gICAgfTtcbiAgfSwgW2Rpc2FibGVkLCBpc0FjdGl2ZS5jdXJyZW50LCBzaGFyZHMsIHJlYWxPYnNlcnZlZF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGhhc0xlYWRpbmdHdWFyZHMgJiYgW1xuICAvKiNfX1BVUkVfXyovXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGtleTogXCJndWFyZC1maXJzdFwiLFxuICAgIFwiZGF0YS1mb2N1cy1ndWFyZFwiOiB0cnVlLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogMCxcbiAgICBzdHlsZTogaGlkZGVuR3VhcmRcbiAgfSksIGhhc1Bvc2l0aXZlSW5kaWNlcyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBrZXk6IFwiZ3VhcmQtbmVhcmVzdFwiLFxuICAgIFwiZGF0YS1mb2N1cy1ndWFyZFwiOiB0cnVlLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogMSxcbiAgICBzdHlsZTogaGlkZGVuR3VhcmRcbiAgfSkgOiBudWxsXSwgIWRpc2FibGVkICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNpZGVDYXIsIHtcbiAgICBpZDogaWQsXG4gICAgc2lkZUNhcjogbWVkaXVtU2lkZWNhcixcbiAgICBvYnNlcnZlZDogcmVhbE9ic2VydmVkLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBwZXJzaXN0ZW50Rm9jdXM6IHBlcnNpc3RlbnRGb2N1cyxcbiAgICBjcm9zc0ZyYW1lOiBjcm9zc0ZyYW1lLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIHdoaXRlTGlzdDogd2hpdGVMaXN0LFxuICAgIHNoYXJkczogc2hhcmRzLFxuICAgIG9uQWN0aXZhdGlvbjogb25BY3RpdmF0aW9uLFxuICAgIG9uRGVhY3RpdmF0aW9uOiBvbkRlYWN0aXZhdGlvbixcbiAgICByZXR1cm5Gb2N1czogcmV0dXJuRm9jdXMsXG4gICAgZm9jdXNPcHRpb25zOiBmb2N1c09wdGlvbnNcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRhaW5lciwgX2V4dGVuZHMoe1xuICAgIHJlZjogbWVyZ2VkUmVmXG4gIH0sIGxvY2tQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uRm9jdXM6IG9uRm9jdXNcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGZvY3VzU2NvcGUuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZm9jdXNTY29wZVZhbHVlXG4gIH0sIGNoaWxkcmVuKSksIGhhc1RhaWxpbmdHdWFyZHMgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIFwiZGF0YS1mb2N1cy1ndWFyZFwiOiB0cnVlLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogMCxcbiAgICBzdHlsZTogaGlkZGVuR3VhcmRcbiAgfSkpO1xufSk7XG5Gb2N1c0xvY2sucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogbm9kZSxcbiAgZGlzYWJsZWQ6IGJvb2wsXG4gIHJldHVybkZvY3VzOiBvbmVPZlR5cGUoW2Jvb2wsIG9iamVjdCwgZnVuY10pLFxuICBmb2N1c09wdGlvbnM6IG9iamVjdCxcbiAgbm9Gb2N1c0d1YXJkczogYm9vbCxcbiAgaGFzUG9zaXRpdmVJbmRpY2VzOiBib29sLFxuICBhbGxvd1RleHRTZWxlY3Rpb246IGJvb2wsXG4gIGF1dG9Gb2N1czogYm9vbCxcbiAgcGVyc2lzdGVudEZvY3VzOiBib29sLFxuICBjcm9zc0ZyYW1lOiBib29sLFxuICBncm91cDogc3RyaW5nLFxuICBjbGFzc05hbWU6IHN0cmluZyxcbiAgd2hpdGVMaXN0OiBmdW5jLFxuICBzaGFyZHM6IGFycmF5T2YoYW55KSxcbiAgYXM6IG9uZU9mVHlwZShbc3RyaW5nLCBmdW5jLCBvYmplY3RdKSxcbiAgbG9ja1Byb3BzOiBvYmplY3QsXG4gIG9uQWN0aXZhdGlvbjogZnVuYyxcbiAgb25EZWFjdGl2YXRpb246IGZ1bmMsXG4gIHNpZGVDYXI6IGFueS5pc1JlcXVpcmVkXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBGb2N1c0xvY2s7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIF90eXBlb2Yobyk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgdG9QcmltaXRpdmUgZnJvbSBcIi4vdG9QcmltaXRpdmUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IHRvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IFN0cmluZyhpKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUHJpbWl0aXZlKHQsIHIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gd2l0aFNpZGVFZmZlY3QocmVkdWNlUHJvcHNUb1N0YXRlLCBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIHJlZHVjZVByb3BzVG9TdGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCByZWR1Y2VQcm9wc1RvU3RhdGUgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudCB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICByZXR1cm4gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgV3JhcHBlZENvbXBvbmVudCB0byBiZSBhIFJlYWN0IGNvbXBvbmVudC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbW91bnRlZEluc3RhbmNlcyA9IFtdO1xuICAgIHZhciBzdGF0ZTtcblxuICAgIGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XG4gICAgICBzdGF0ZSA9IHJlZHVjZVByb3BzVG9TdGF0ZShtb3VudGVkSW5zdGFuY2VzLm1hcChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzO1xuICAgICAgfSkpO1xuICAgICAgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudChzdGF0ZSk7XG4gICAgfVxuXG4gICAgdmFyIFNpZGVFZmZlY3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShTaWRlRWZmZWN0LCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFNpZGVFZmZlY3QoKSB7XG4gICAgICAgIHJldHVybiBfUHVyZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSB0byB1c2UgZGlzcGxheU5hbWUgb2Ygd3JhcHBlZCBjb21wb25lbnRcbiAgICAgIFNpZGVFZmZlY3QucGVlayA9IGZ1bmN0aW9uIHBlZWsoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBfcHJvdG8gPSBTaWRlRWZmZWN0LnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIG1vdW50ZWRJbnN0YW5jZXMucHVzaCh0aGlzKTtcbiAgICAgICAgZW1pdENoYW5nZSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdENoYW5nZSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG1vdW50ZWRJbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgbW91bnRlZEluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBlbWl0Q2hhbmdlKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2lkZUVmZmVjdDtcbiAgICB9KFB1cmVDb21wb25lbnQpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KFNpZGVFZmZlY3QsIFwiZGlzcGxheU5hbWVcIiwgXCJTaWRlRWZmZWN0KFwiICsgZ2V0RGlzcGxheU5hbWUoV3JhcHBlZENvbXBvbmVudCkgKyBcIilcIik7XG5cbiAgICByZXR1cm4gU2lkZUVmZmVjdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFNpZGVFZmZlY3Q7XG4iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufSIsIi8qXG5JRTExIHN1cHBvcnRcbiAqL1xuZXhwb3J0IHZhciB0b0FycmF5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgcmV0ID0gQXJyYXkoYS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXRbaV0gPSBhW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcbmV4cG9ydCB2YXIgYXNBcnJheSA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiAoQXJyYXkuaXNBcnJheShhKSA/IGEgOiBbYV0pOyB9O1xuZXhwb3J0IHZhciBnZXRGaXJzdCA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiAoQXJyYXkuaXNBcnJheShhKSA/IGFbMF0gOiBhKTsgfTtcbiIsImltcG9ydCB7IEZPQ1VTX05PX0FVVE9GT0NVUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG52YXIgaXNFbGVtZW50SGlkZGVuID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAvLyB3ZSBjYW4gbWVhc3VyZSBvbmx5IFwiZWxlbWVudHNcIlxuICAgIC8vIGNvbnNpZGVyIG90aGVycyBhcyBcInZpc2libGVcIlxuICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCk7XG4gICAgaWYgKCFjb21wdXRlZFN0eWxlIHx8ICFjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScgfHwgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd2aXNpYmlsaXR5JykgPT09ICdoaWRkZW4nKTtcbn07XG52YXIgZ2V0UGFyZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSBjYW4gYWxzbyBwb2ludCBvbiBTaGFkb3dSb290LiBJbiB0aGlzIGNhc2UgLmhvc3Qgd2lsbCBwb2ludCBvbiB0aGUgbmV4dCBub2RlXG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERVxuICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaG9zdFxuICAgICAgICA6IG5vZGUucGFyZW50Tm9kZTtcbn07XG52YXIgaXNUb3BOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIG5vZGUgPT09IGRvY3VtZW50IHx8IChub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERSk7XG59O1xudmFyIGlzSW5lcnQgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoJ2luZXJ0Jyk7IH07XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3Rlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9ibG9iL21haW4vc3JjL3RvLWJlLXZpc2libGUuanNcbiAqL1xudmFyIGlzVmlzaWJsZVVuY2FjaGVkID0gZnVuY3Rpb24gKG5vZGUsIGNoZWNrUGFyZW50KSB7XG4gICAgcmV0dXJuICFub2RlIHx8IGlzVG9wTm9kZShub2RlKSB8fCAoIWlzRWxlbWVudEhpZGRlbihub2RlKSAmJiAhaXNJbmVydChub2RlKSAmJiBjaGVja1BhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKSk7XG59O1xuZXhwb3J0IHZhciBpc1Zpc2libGVDYWNoZWQgPSBmdW5jdGlvbiAodmlzaWJpbGl0eUNhY2hlLCBub2RlKSB7XG4gICAgdmFyIGNhY2hlZCA9IHZpc2liaWxpdHlDYWNoZS5nZXQobm9kZSk7XG4gICAgaWYgKGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBpc1Zpc2libGVVbmNhY2hlZChub2RlLCBpc1Zpc2libGVDYWNoZWQuYmluZCh1bmRlZmluZWQsIHZpc2liaWxpdHlDYWNoZSkpO1xuICAgIHZpc2liaWxpdHlDYWNoZS5zZXQobm9kZSwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBpc0F1dG9Gb2N1c0FsbG93ZWRVbmNhY2hlZCA9IGZ1bmN0aW9uIChub2RlLCBjaGVja1BhcmVudCkge1xuICAgIHJldHVybiBub2RlICYmICFpc1RvcE5vZGUobm9kZSkgPyAoaXNBdXRvRm9jdXNBbGxvd2VkKG5vZGUpID8gY2hlY2tQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSkgOiBmYWxzZSkgOiB0cnVlO1xufTtcbmV4cG9ydCB2YXIgaXNBdXRvRm9jdXNBbGxvd2VkQ2FjaGVkID0gZnVuY3Rpb24gKGNhY2hlLCBub2RlKSB7XG4gICAgdmFyIGNhY2hlZCA9IGNhY2hlLmdldChub2RlKTtcbiAgICBpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGlzQXV0b0ZvY3VzQWxsb3dlZFVuY2FjaGVkKG5vZGUsIGlzQXV0b0ZvY3VzQWxsb3dlZENhY2hlZC5iaW5kKHVuZGVmaW5lZCwgY2FjaGUpKTtcbiAgICBjYWNoZS5zZXQobm9kZSwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCB2YXIgZ2V0RGF0YXNldCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBub2RlLmRhdGFzZXQ7XG59O1xuZXhwb3J0IHZhciBpc0hUTUxCdXR0b25FbGVtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ0JVVFRPTic7IH07XG5leHBvcnQgdmFyIGlzSFRNTElucHV0RWxlbWVudCA9IGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLnRhZ05hbWUgPT09ICdJTlBVVCc7IH07XG5leHBvcnQgdmFyIGlzUmFkaW9FbGVtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gaXNIVE1MSW5wdXRFbGVtZW50KG5vZGUpICYmIG5vZGUudHlwZSA9PT0gJ3JhZGlvJztcbn07XG5leHBvcnQgdmFyIG5vdEhpZGRlbklucHV0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gISgoaXNIVE1MSW5wdXRFbGVtZW50KG5vZGUpIHx8IGlzSFRNTEJ1dHRvbkVsZW1lbnQobm9kZSkpICYmIChub2RlLnR5cGUgPT09ICdoaWRkZW4nIHx8IG5vZGUuZGlzYWJsZWQpKTtcbn07XG5leHBvcnQgdmFyIGlzQXV0b0ZvY3VzQWxsb3dlZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIGF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKEZPQ1VTX05PX0FVVE9GT0NVUyk7XG4gICAgcmV0dXJuICFbdHJ1ZSwgJ3RydWUnLCAnJ10uaW5jbHVkZXMoYXR0cmlidXRlKTtcbn07XG5leHBvcnQgdmFyIGlzR3VhcmQgPSBmdW5jdGlvbiAobm9kZSkgeyB2YXIgX2E7IHJldHVybiBCb29sZWFuKG5vZGUgJiYgKChfYSA9IGdldERhdGFzZXQobm9kZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1c0d1YXJkKSk7IH07XG5leHBvcnQgdmFyIGlzTm90QUd1YXJkID0gZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuICFpc0d1YXJkKG5vZGUpOyB9O1xuZXhwb3J0IHZhciBpc0RlZmluZWQgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4gQm9vbGVhbih4KTsgfTtcbiIsImltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL2FycmF5JztcbmV4cG9ydCB2YXIgdGFiU29ydCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGFUYWIgPSBNYXRoLm1heCgwLCBhLnRhYkluZGV4KTtcbiAgICB2YXIgYlRhYiA9IE1hdGgubWF4KDAsIGIudGFiSW5kZXgpO1xuICAgIHZhciB0YWJEaWZmID0gYVRhYiAtIGJUYWI7XG4gICAgdmFyIGluZGV4RGlmZiA9IGEuaW5kZXggLSBiLmluZGV4O1xuICAgIGlmICh0YWJEaWZmKSB7XG4gICAgICAgIGlmICghYVRhYikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFiVGFiKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhYkRpZmYgfHwgaW5kZXhEaWZmO1xufTtcbnZhciBnZXRUYWJJbmRleCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUudGFiSW5kZXggPCAwKSB7XG4gICAgICAgIC8vIGFsbCBcImZvY3VzYWJsZVwiIGVsZW1lbnRzIGFyZSBhbHJlYWR5IHByZXNlbGVjdGVkXG4gICAgICAgIC8vIGJ1dCBzb21lIG1pZ2h0IGhhdmUgaW1wbGljaXQgbmVnYXRpdmUgdGFiSW5kZXhcbiAgICAgICAgLy8gcmV0dXJuIDAgZm9yIDxhdWRpbyB3aXRob3V0IHRhYkluZGV4IGF0dHJpYnV0ZSAtIGl0IGlzIFwidGFiYmFibGVcIlxuICAgICAgICBpZiAoIW5vZGUuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZS50YWJJbmRleDtcbn07XG5leHBvcnQgdmFyIG9yZGVyQnlUYWJJbmRleCA9IGZ1bmN0aW9uIChub2RlcywgZmlsdGVyTmVnYXRpdmUsIGtlZXBHdWFyZHMpIHtcbiAgICByZXR1cm4gdG9BcnJheShub2RlcylcbiAgICAgICAgLm1hcChmdW5jdGlvbiAobm9kZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHRhYkluZGV4ID0gZ2V0VGFiSW5kZXgobm9kZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgdGFiSW5kZXg6IGtlZXBHdWFyZHMgJiYgdGFiSW5kZXggPT09IC0xID8gKChub2RlLmRhdGFzZXQgfHwge30pLmZvY3VzR3VhcmQgPyAwIDogLTEpIDogdGFiSW5kZXgsXG4gICAgICAgIH07XG4gICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gIWZpbHRlck5lZ2F0aXZlIHx8IGRhdGEudGFiSW5kZXggPj0gMDsgfSlcbiAgICAgICAgLnNvcnQodGFiU29ydCk7XG59O1xuIiwiaW1wb3J0IHsgRk9DVVNfQVVUTyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi9hcnJheSc7XG5pbXBvcnQgeyB0YWJiYWJsZXMgfSBmcm9tICcuL3RhYmJhYmxlcyc7XG52YXIgcXVlcnlUYWJiYWJsZXMgPSB0YWJiYWJsZXMuam9pbignLCcpO1xudmFyIHF1ZXJ5R3VhcmRUYWJiYWJsZXMgPSBcIlwiLmNvbmNhdChxdWVyeVRhYmJhYmxlcywgXCIsIFtkYXRhLWZvY3VzLWd1YXJkXVwiKTtcbnZhciBnZXRGb2N1c2FibGVzV2l0aFNoYWRvd0RvbSA9IGZ1bmN0aW9uIChwYXJlbnQsIHdpdGhHdWFyZHMpIHtcbiAgICByZXR1cm4gdG9BcnJheSgocGFyZW50LnNoYWRvd1Jvb3QgfHwgcGFyZW50KS5jaGlsZHJlbikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBhY2MuY29uY2F0KGNoaWxkLm1hdGNoZXMod2l0aEd1YXJkcyA/IHF1ZXJ5R3VhcmRUYWJiYWJsZXMgOiBxdWVyeVRhYmJhYmxlcykgPyBbY2hpbGRdIDogW10sIGdldEZvY3VzYWJsZXNXaXRoU2hhZG93RG9tKGNoaWxkKSk7XG4gICAgfSwgW10pO1xufTtcbnZhciBnZXRGb2N1c2FibGVzV2l0aElGcmFtZSA9IGZ1bmN0aW9uIChwYXJlbnQsIHdpdGhHdWFyZHMpIHtcbiAgICB2YXIgX2E7XG4gICAgLy8gY29udGVudERvY3VtZW50IG9mIGlmcmFtZSB3aWxsIGJlIG51bGwgaWYgY3VycmVudCBvcmlnaW4gY2Fubm90IGFjY2VzcyBpdFxuICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBIVE1MSUZyYW1lRWxlbWVudCAmJiAoKF9hID0gcGFyZW50LmNvbnRlbnREb2N1bWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmJvZHkpKSB7XG4gICAgICAgIHJldHVybiBnZXRGb2N1c2FibGVzKFtwYXJlbnQuY29udGVudERvY3VtZW50LmJvZHldLCB3aXRoR3VhcmRzKTtcbiAgICB9XG4gICAgcmV0dXJuIFtwYXJlbnRdO1xufTtcbmV4cG9ydCB2YXIgZ2V0Rm9jdXNhYmxlcyA9IGZ1bmN0aW9uIChwYXJlbnRzLCB3aXRoR3VhcmRzKSB7XG4gICAgcmV0dXJuIHBhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBhcmVudCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb2N1c2FibGVXaXRoU2hhZG93RG9tID0gZ2V0Rm9jdXNhYmxlc1dpdGhTaGFkb3dEb20ocGFyZW50LCB3aXRoR3VhcmRzKTtcbiAgICAgICAgdmFyIGZvY3VzYWJsZVdpdGhJZnJhbWVzID0gKF9hID0gW10pLmNvbmNhdC5hcHBseShfYSwgZm9jdXNhYmxlV2l0aFNoYWRvd0RvbS5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGdldEZvY3VzYWJsZXNXaXRoSUZyYW1lKG5vZGUsIHdpdGhHdWFyZHMpOyB9KSk7XG4gICAgICAgIHJldHVybiBhY2MuY29uY2F0KFxuICAgICAgICAvLyBhZGQgYWxsIHRhYmJhYmxlcyBpbnNpZGUgYW5kIHdpdGhpbiBzaGFkb3cgRE9NcyBpbiBET00gb3JkZXJcbiAgICAgICAgZm9jdXNhYmxlV2l0aElmcmFtZXMsIFxuICAgICAgICAvLyBhZGQgaWYgbm9kZSBpcyB0YWJiYWJsZSBpdHNlbGZcbiAgICAgICAgcGFyZW50LnBhcmVudE5vZGVcbiAgICAgICAgICAgID8gdG9BcnJheShwYXJlbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5VGFiYmFibGVzKSkuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlID09PSBwYXJlbnQ7IH0pXG4gICAgICAgICAgICA6IFtdKTtcbiAgICB9LCBbXSk7XG59O1xuLyoqXG4gKiByZXR1cm4gYSBsaXN0IG9mIGZvY3VzYWJsZSBub2RlcyB3aXRoaW4gYW4gYXJlYSBtYXJrZWQgYXMgXCJhdXRvLWZvY3VzYWJsZVwiXG4gKiBAcGFyYW0gcGFyZW50XG4gKi9cbmV4cG9ydCB2YXIgZ2V0UGFyZW50QXV0b2ZvY3VzYWJsZXMgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgdmFyIHBhcmVudEZvY3VzID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIuY29uY2F0KEZPQ1VTX0FVVE8sIFwiXVwiKSk7XG4gICAgcmV0dXJuIHRvQXJyYXkocGFyZW50Rm9jdXMpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGdldEZvY3VzYWJsZXMoW25vZGVdKTsgfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBub2RlcykgeyByZXR1cm4gYWNjLmNvbmNhdChub2Rlcyk7IH0sIFtdKTtcbn07XG4iLCIvKipcbiAqIGxpc3Qgb2YgdGhlIG9iamVjdCB0byBiZSBjb25zaWRlcmVkIGFzIGZvY3VzYWJsZVxuICovXG5leHBvcnQgdmFyIHRhYmJhYmxlcyA9IFtcbiAgICAnYnV0dG9uOmVuYWJsZWQnLFxuICAgICdzZWxlY3Q6ZW5hYmxlZCcsXG4gICAgJ3RleHRhcmVhOmVuYWJsZWQnLFxuICAgICdpbnB1dDplbmFibGVkJyxcbiAgICAvLyBlbGVtZW50cyB3aXRoIGV4cGxpY2l0IHJvbGVzIHdpbGwgYWxzbyB1c2UgZXhwbGljaXQgdGFiaW5kZXhcbiAgICAvLyAnW3JvbGU9XCJidXR0b25cIl0nLFxuICAgICdhW2hyZWZdJyxcbiAgICAnYXJlYVtocmVmXScsXG4gICAgJ3N1bW1hcnknLFxuICAgICdpZnJhbWUnLFxuICAgICdvYmplY3QnLFxuICAgICdlbWJlZCcsXG4gICAgJ2F1ZGlvW2NvbnRyb2xzXScsXG4gICAgJ3ZpZGVvW2NvbnRyb2xzXScsXG4gICAgJ1t0YWJpbmRleF0nLFxuICAgICdbY29udGVudGVkaXRhYmxlXScsXG4gICAgJ1thdXRvZm9jdXNdJyxcbl07XG4iLCJpbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi9hcnJheSc7XG5pbXBvcnQgeyBpc0F1dG9Gb2N1c0FsbG93ZWRDYWNoZWQsIGlzVmlzaWJsZUNhY2hlZCwgbm90SGlkZGVuSW5wdXQgfSBmcm9tICcuL2lzJztcbmltcG9ydCB7IG9yZGVyQnlUYWJJbmRleCB9IGZyb20gJy4vdGFiT3JkZXInO1xuaW1wb3J0IHsgZ2V0Rm9jdXNhYmxlcywgZ2V0UGFyZW50QXV0b2ZvY3VzYWJsZXMgfSBmcm9tICcuL3RhYlV0aWxzJztcbi8qKlxuICogZ2l2ZW4gbGlzdCBvZiBmb2N1c2FibGUgZWxlbWVudHMga2VlcHMgdGhlIG9uZXMgdXNlciBjYW4gaW50ZXJhY3Qgd2l0aFxuICogQHBhcmFtIG5vZGVzXG4gKiBAcGFyYW0gdmlzaWJpbGl0eUNhY2hlXG4gKi9cbmV4cG9ydCB2YXIgZmlsdGVyRm9jdXNhYmxlID0gZnVuY3Rpb24gKG5vZGVzLCB2aXNpYmlsaXR5Q2FjaGUpIHtcbiAgICByZXR1cm4gdG9BcnJheShub2RlcylcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gaXNWaXNpYmxlQ2FjaGVkKHZpc2liaWxpdHlDYWNoZSwgbm9kZSk7IH0pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vdEhpZGRlbklucHV0KG5vZGUpOyB9KTtcbn07XG5leHBvcnQgdmFyIGZpbHRlckF1dG9Gb2N1c2FibGUgPSBmdW5jdGlvbiAobm9kZXMsIGNhY2hlKSB7XG4gICAgaWYgKGNhY2hlID09PSB2b2lkIDApIHsgY2FjaGUgPSBuZXcgTWFwKCk7IH1cbiAgICByZXR1cm4gdG9BcnJheShub2RlcykuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBpc0F1dG9Gb2N1c0FsbG93ZWRDYWNoZWQoY2FjaGUsIG5vZGUpOyB9KTtcbn07XG4vKipcbiAqICFfX1dBUk5JTkdfXyEgTG93IGxldmVsIEFQSS5cbiAqIEByZXR1cm5zIGFsbCB0YWJiYWJsZSBub2Rlc1xuICpcbiAqIEBzZWUge0BsaW5rIGdldEZvY3VzYWJsZU5vZGVzfSB0byBnZXQgYW55IGZvY3VzYWJsZSBlbGVtZW50XG4gKlxuICogQHBhcmFtIHRvcE5vZGVzIC0gYXJyYXkgb2YgdG9wIGxldmVsIEhUTUxFbGVtZW50cyB0byBzZWFyY2ggaW5zaWRlXG4gKiBAcGFyYW0gdmlzaWJpbGl0eUNhY2hlIC0gYW4gY2FjaGUgdG8gc3RvcmUgaW50ZXJtZWRpYXRlIG1lYXN1cmVtZW50cy4gRXhwZWN0ZWQgdG8gYmUgYSBmcmVzaCBgbmV3IE1hcGAgb24gZXZlcnkgY2FsbFxuICovXG5leHBvcnQgdmFyIGdldFRhYmJhYmxlTm9kZXMgPSBmdW5jdGlvbiAodG9wTm9kZXMsIHZpc2liaWxpdHlDYWNoZSwgd2l0aEd1YXJkcykge1xuICAgIHJldHVybiBvcmRlckJ5VGFiSW5kZXgoZmlsdGVyRm9jdXNhYmxlKGdldEZvY3VzYWJsZXModG9wTm9kZXMsIHdpdGhHdWFyZHMpLCB2aXNpYmlsaXR5Q2FjaGUpLCB0cnVlLCB3aXRoR3VhcmRzKTtcbn07XG4vKipcbiAqICFfX1dBUk5JTkdfXyEgTG93IGxldmVsIEFQSS5cbiAqXG4gKiBAcmV0dXJucyBhbnl0aGluZyBcImZvY3VzYWJsZVwiLCBub3Qgb25seSB0YWJiYWJsZS4gVGhlIGRpZmZlcmVuY2UgaXMgaW4gYHRhYkluZGV4PS0xYFxuICogKHdpdGhvdXQgZ3VhcmRzLCBhcyBsb25nIGFzIHRoZXkgYXJlIG5vdCBleHBlY3RlZCB0byBiZSBldmVyIGZvY3VzZWQpXG4gKlxuICogQHNlZSB7QGxpbmsgZ2V0VGFiYmFibGVOb2Rlc30gdG8gZ2V0IG9ubHkgdGFiYmxlIG5vZGVzIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gdG9wTm9kZXMgLSBhcnJheSBvZiB0b3AgbGV2ZWwgSFRNTEVsZW1lbnRzIHRvIHNlYXJjaCBpbnNpZGVcbiAqIEBwYXJhbSB2aXNpYmlsaXR5Q2FjaGUgLSBhbiBjYWNoZSB0byBzdG9yZSBpbnRlcm1lZGlhdGUgbWVhc3VyZW1lbnRzLiBFeHBlY3RlZCB0byBiZSBhIGZyZXNoIGBuZXcgTWFwYCBvbiBldmVyeSBjYWxsXG4gKi9cbmV4cG9ydCB2YXIgZ2V0Rm9jdXNhYmxlTm9kZXMgPSBmdW5jdGlvbiAodG9wTm9kZXMsIHZpc2liaWxpdHlDYWNoZSkge1xuICAgIHJldHVybiBvcmRlckJ5VGFiSW5kZXgoZmlsdGVyRm9jdXNhYmxlKGdldEZvY3VzYWJsZXModG9wTm9kZXMpLCB2aXNpYmlsaXR5Q2FjaGUpLCBmYWxzZSk7XG59O1xuLyoqXG4gKiByZXR1cm4gbGlzdCBvZiBub2RlcyB3aGljaCBhcmUgZXhwZWN0ZWQgdG8gYmUgYXV0by1mb2N1c2VkXG4gKiBAcGFyYW0gdG9wTm9kZVxuICogQHBhcmFtIHZpc2liaWxpdHlDYWNoZVxuICovXG5leHBvcnQgdmFyIHBhcmVudEF1dG9mb2N1c2FibGVzID0gZnVuY3Rpb24gKHRvcE5vZGUsIHZpc2liaWxpdHlDYWNoZSkge1xuICAgIHJldHVybiBmaWx0ZXJGb2N1c2FibGUoZ2V0UGFyZW50QXV0b2ZvY3VzYWJsZXModG9wTm9kZSksIHZpc2liaWxpdHlDYWNoZSk7XG59O1xuLypcbiAqIERldGVybWluZXMgaWYgZWxlbWVudCBpcyBjb250YWluZWQgaW4gc2NvcGUsIGluY2x1ZGluZyBuZXN0ZWQgc2hhZG93IERPTXNcbiAqL1xuZXhwb3J0IHZhciBjb250YWlucyA9IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCkge1xuICAgIGlmIChzY29wZS5zaGFkb3dSb290KSB7XG4gICAgICAgIHJldHVybiBjb250YWlucyhzY29wZS5zaGFkb3dSb290LCBlbGVtZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGUpLmNvbnRhaW5zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihzY29wZSkuY29udGFpbnMuY2FsbChzY29wZSwgZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0FycmF5KHNjb3BlLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lQm9keSA9IChfYSA9IGNoaWxkLmNvbnRlbnREb2N1bWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmJvZHk7XG4gICAgICAgICAgICAgICAgaWYgKGlmcmFtZUJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5zKGlmcmFtZUJvZHksIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbnMoY2hpbGQsIGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuIiwiLyoqXG4gKiByZXR1cm5zIGFjdGl2ZSBlbGVtZW50IGZyb20gZG9jdW1lbnQgb3IgZnJvbSBuZXN0ZWQgc2hhZG93ZG9tc1xuICovXG5pbXBvcnQgeyBzYWZlUHJvYmUgfSBmcm9tICcuL3NhZmUnO1xuLyoqXG4gKiByZXR1cm5zIGN1cnJlbnQgYWN0aXZlIGVsZW1lbnQuIElmIHRoZSBhY3RpdmUgZWxlbWVudCBpcyBhIFwiY29udGFpbmVyXCIgaXRzZWxmKHNoYWRvd1Jvb3Qgb3IgaWZyYW1lKSByZXR1cm5zIGFjdGl2ZSBlbGVtZW50IGluc2lkZSBpdFxuICogQHBhcmFtIFtpbkRvY3VtZW50XVxuICovXG5leHBvcnQgdmFyIGdldEFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiAoaW5Eb2N1bWVudCkge1xuICAgIGlmIChpbkRvY3VtZW50ID09PSB2b2lkIDApIHsgaW5Eb2N1bWVudCA9IGRvY3VtZW50OyB9XG4gICAgaWYgKCFpbkRvY3VtZW50IHx8ICFpbkRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBpbkRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgcmV0dXJuIChhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3RcbiAgICAgICAgPyBnZXRBY3RpdmVFbGVtZW50KGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdClcbiAgICAgICAgOiBhY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTElGcmFtZUVsZW1lbnQgJiYgc2FmZVByb2JlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFjdGl2ZUVsZW1lbnQuY29udGVudFdpbmRvdy5kb2N1bWVudDsgfSlcbiAgICAgICAgICAgID8gZ2V0QWN0aXZlRWxlbWVudChhY3RpdmVFbGVtZW50LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpXG4gICAgICAgICAgICA6IGFjdGl2ZUVsZW1lbnQpO1xufTtcbiIsImV4cG9ydCB2YXIgc2FmZVByb2JlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNiKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IEZPQ1VTX0RJU0FCTEVELCBGT0NVU19HUk9VUCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBhc0FycmF5LCB0b0FycmF5IH0gZnJvbSAnLi9hcnJheSc7XG4vKipcbiAqIGluIGNhc2Ugb2YgbXVsdGlwbGUgbm9kZXMgbmVzdGVkIGluc2lkZSBlYWNoIG90aGVyXG4gKiBrZWVwcyBvbmx5IHRvcCBvbmVzXG4gKiB0aGlzIGlzIE8obmxvZ24pXG4gKiBAcGFyYW0gbm9kZXNcbiAqIEByZXR1cm5zIHsqfVxuICovXG52YXIgZmlsdGVyTmVzdGVkID0gZnVuY3Rpb24gKG5vZGVzKSB7XG4gICAgdmFyIGNvbnRhaW5lZCA9IG5ldyBTZXQoKTtcbiAgICB2YXIgbCA9IG5vZGVzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBsOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IG5vZGVzW2ldLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGVzW2pdKTtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbiAgICAgICAgICAgIGlmICgocG9zaXRpb24gJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVkLmFkZChqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgocG9zaXRpb24gJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TKSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250YWluZWQuYWRkKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKF8sIGluZGV4KSB7IHJldHVybiAhY29udGFpbmVkLmhhcyhpbmRleCk7IH0pO1xufTtcbi8qKlxuICogZmluZHMgdG9wIG1vc3QgcGFyZW50IGZvciBhIG5vZGVcbiAqIEBwYXJhbSBub2RlXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xudmFyIGdldFRvcFBhcmVudCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZSA/IGdldFRvcFBhcmVudChub2RlLnBhcmVudE5vZGUpIDogbm9kZTtcbn07XG4vKipcbiAqIHJldHVybnMgYWxsIFwiZm9jdXMgY29udGFpbmVyc1wiIGluc2lkZSBhIGdpdmVuIG5vZGVcbiAqIEBwYXJhbSBub2RlIC0gbm9kZSBvciBub2RlcyB0byBsb29rIGluc2lkZVxuICogQHJldHVybnMgRWxlbWVudFtdXG4gKi9cbmV4cG9ydCB2YXIgZ2V0QWxsQWZmZWN0ZWROb2RlcyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIG5vZGVzID0gYXNBcnJheShub2RlKTtcbiAgICByZXR1cm4gbm9kZXMuZmlsdGVyKEJvb2xlYW4pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyZW50Tm9kZSkge1xuICAgICAgICB2YXIgZ3JvdXAgPSBjdXJyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoRk9DVVNfR1JPVVApO1xuICAgICAgICBhY2MucHVzaC5hcHBseShhY2MsIChncm91cFxuICAgICAgICAgICAgPyBmaWx0ZXJOZXN0ZWQodG9BcnJheShnZXRUb3BQYXJlbnQoY3VycmVudE5vZGUpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIuY29uY2F0KEZPQ1VTX0dST1VQLCBcIj1cXFwiXCIpLmNvbmNhdChncm91cCwgXCJcXFwiXTpub3QoW1wiKS5jb25jYXQoRk9DVVNfRElTQUJMRUQsIFwiPVxcXCJkaXNhYmxlZFxcXCJdKVwiKSkpKVxuICAgICAgICAgICAgOiBbY3VycmVudE5vZGVdKSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xufTtcbiIsImltcG9ydCB7IGNvbnRhaW5zIH0gZnJvbSAnLi91dGlscy9ET011dGlscyc7XG5pbXBvcnQgeyBnZXRBbGxBZmZlY3RlZE5vZGVzIH0gZnJvbSAnLi91dGlscy9hbGwtYWZmZWN0ZWQnO1xuaW1wb3J0IHsgZ2V0Rmlyc3QsIHRvQXJyYXkgfSBmcm9tICcuL3V0aWxzL2FycmF5JztcbmltcG9ydCB7IGdldEFjdGl2ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzL2dldEFjdGl2ZUVsZW1lbnQnO1xudmFyIGZvY3VzSW5GcmFtZSA9IGZ1bmN0aW9uIChmcmFtZSwgYWN0aXZlRWxlbWVudCkgeyByZXR1cm4gZnJhbWUgPT09IGFjdGl2ZUVsZW1lbnQ7IH07XG52YXIgZm9jdXNJbnNpZGVJZnJhbWUgPSBmdW5jdGlvbiAodG9wTm9kZSwgYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybiBCb29sZWFuKHRvQXJyYXkodG9wTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKSkuc29tZShmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZm9jdXNJbkZyYW1lKG5vZGUsIGFjdGl2ZUVsZW1lbnQpOyB9KSk7XG59O1xuLyoqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSwgaWYgdGhlIGN1cnJlbnQgZm9jdXMgaXMgaW5zaWRlIGdpdmVuIG5vZGUgb3Igbm9kZXMuXG4gKiBTdXBwb3J0cyBub2RlcyBoaWRkZW4gaW5zaWRlIHNoYWRvd0RvbVxuICovXG5leHBvcnQgdmFyIGZvY3VzSW5zaWRlID0gZnVuY3Rpb24gKHRvcE5vZGUsIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAvLyBjb25zdCBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQgJiYgZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIGlmIChhY3RpdmVFbGVtZW50ID09PSB2b2lkIDApIHsgYWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoZ2V0Rmlyc3QodG9wTm9kZSkub3duZXJEb2N1bWVudCk7IH1cbiAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgKGFjdGl2ZUVsZW1lbnQuZGF0YXNldCAmJiBhY3RpdmVFbGVtZW50LmRhdGFzZXQuZm9jdXNHdWFyZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWxsQWZmZWN0ZWROb2Rlcyh0b3BOb2RlKS5zb21lKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBjb250YWlucyhub2RlLCBhY3RpdmVFbGVtZW50KSB8fCBmb2N1c0luc2lkZUlmcmFtZShub2RlLCBhY3RpdmVFbGVtZW50KTtcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgdmFyIGZvY3VzT24gPSBmdW5jdGlvbiAodGFyZ2V0LCBmb2N1c09wdGlvbnMpIHtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAvLyBub3QgY2xlYXIgaG93LCBidXQgaXMgcG9zc2libGUgaHR0cHM6Ly9naXRodWIuY29tL3RoZUthc2hleS9mb2N1cy1sb2NrL2lzc3Vlcy81M1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgnZm9jdXMnIGluIHRhcmdldCkge1xuICAgICAgICB0YXJnZXQuZm9jdXMoZm9jdXNPcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKCdjb250ZW50V2luZG93JyBpbiB0YXJnZXQgJiYgdGFyZ2V0LmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgdGFyZ2V0LmNvbnRlbnRXaW5kb3cuZm9jdXMoKTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgaXNSYWRpb0VsZW1lbnQgfSBmcm9tICcuL2lzJztcbnZhciBmaW5kU2VsZWN0ZWRSYWRpbyA9IGZ1bmN0aW9uIChub2RlLCBub2Rlcykge1xuICAgIHJldHVybiBub2Rlc1xuICAgICAgICAuZmlsdGVyKGlzUmFkaW9FbGVtZW50KVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwubmFtZSA9PT0gbm9kZS5uYW1lOyB9KVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuY2hlY2tlZDsgfSlbMF0gfHwgbm9kZTtcbn07XG5leHBvcnQgdmFyIGNvcnJlY3ROb2RlID0gZnVuY3Rpb24gKG5vZGUsIG5vZGVzKSB7XG4gICAgaWYgKGlzUmFkaW9FbGVtZW50KG5vZGUpICYmIG5vZGUubmFtZSkge1xuICAgICAgICByZXR1cm4gZmluZFNlbGVjdGVkUmFkaW8obm9kZSwgbm9kZXMpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn07XG4vKipcbiAqIGdpdmluZyBhIHNldCBvZiByYWRpbyBpbnB1dHMga2VlcHMgb25seSBzZWxlY3RlZCAodGFiYmFibGUpIG9uZXNcbiAqIEBwYXJhbSBub2Rlc1xuICovXG5leHBvcnQgdmFyIGNvcnJlY3ROb2RlcyA9IGZ1bmN0aW9uIChub2Rlcykge1xuICAgIC8vIElFMTEgaGFzIG5vIFNldChhcnJheSkgY29uc3RydWN0b3JcbiAgICB2YXIgcmVzdWx0U2V0ID0gbmV3IFNldCgpO1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIHJlc3VsdFNldC5hZGQoY29ycmVjdE5vZGUobm9kZSwgbm9kZXMpKTsgfSk7XG4gICAgLy8gdXNpbmcgZmlsdGVyIHRvIHN1cHBvcnQgSUUxMVxuICAgIHJldHVybiBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIHJlc3VsdFNldC5oYXMobm9kZSk7IH0pO1xufTtcbiIsImltcG9ydCB7IGNvcnJlY3ROb2RlIH0gZnJvbSAnLi9jb3JyZWN0Rm9jdXMnO1xuZXhwb3J0IHZhciBwaWNrRmlyc3RGb2N1cyA9IGZ1bmN0aW9uIChub2Rlcykge1xuICAgIGlmIChub2Rlc1swXSAmJiBub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBjb3JyZWN0Tm9kZShub2Rlc1swXSwgbm9kZXMpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXNbMF07XG59O1xuZXhwb3J0IHZhciBwaWNrRm9jdXNhYmxlID0gZnVuY3Rpb24gKG5vZGVzLCBub2RlKSB7XG4gICAgcmV0dXJuIG5vZGVzLmluZGV4T2YoY29ycmVjdE5vZGUobm9kZSwgbm9kZXMpKTtcbn07XG4iLCJpbXBvcnQgeyBjb3JyZWN0Tm9kZXMgfSBmcm9tICcuL3V0aWxzL2NvcnJlY3RGb2N1cyc7XG5pbXBvcnQgeyBwaWNrRm9jdXNhYmxlIH0gZnJvbSAnLi91dGlscy9maXJzdEZvY3VzJztcbmltcG9ydCB7IGlzR3VhcmQgfSBmcm9tICcuL3V0aWxzL2lzJztcbmV4cG9ydCB2YXIgTkVXX0ZPQ1VTID0gJ05FV19GT0NVUyc7XG4vKipcbiAqIE1haW4gc29sdmVyIGZvciB0aGUgXCJmaW5kIG5leHQgZm9jdXNcIiBxdWVzdGlvblxuICogQHBhcmFtIGlubmVyTm9kZXMgLSB1c2VkIHRvIGNvbnRyb2wgXCJyZXR1cm4gZm9jdXNcIlxuICogQHBhcmFtIGlubmVyVGFiYmFibGVzIC0gdXNlZCB0byBjb250cm9sIFwiYXV0b2ZvY3VzXCJcbiAqIEBwYXJhbSBvdXRlck5vZGVzXG4gKiBAcGFyYW0gYWN0aXZlRWxlbWVudFxuICogQHBhcmFtIGxhc3ROb2RlXG4gKiBAcmV0dXJucyB7bnVtYmVyfHN0cmluZ3x1bmRlZmluZWR8Kn1cbiAqL1xuZXhwb3J0IHZhciBuZXdGb2N1cyA9IGZ1bmN0aW9uIChpbm5lck5vZGVzLCBpbm5lclRhYmJhYmxlcywgb3V0ZXJOb2RlcywgYWN0aXZlRWxlbWVudCwgbGFzdE5vZGUpIHtcbiAgICB2YXIgY250ID0gaW5uZXJOb2Rlcy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0Rm9jdXMgPSBpbm5lck5vZGVzWzBdO1xuICAgIHZhciBsYXN0Rm9jdXMgPSBpbm5lck5vZGVzW2NudCAtIDFdO1xuICAgIHZhciBpc09uR3VhcmQgPSBpc0d1YXJkKGFjdGl2ZUVsZW1lbnQpO1xuICAgIC8vIGZvY3VzIGlzIGluc2lkZVxuICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGlubmVyTm9kZXMuaW5kZXhPZihhY3RpdmVFbGVtZW50KSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciBhY3RpdmVJbmRleCA9IGFjdGl2ZUVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG91dGVyTm9kZXMuaW5kZXhPZihhY3RpdmVFbGVtZW50KSA6IC0xO1xuICAgIHZhciBsYXN0SW5kZXggPSBsYXN0Tm9kZSA/IG91dGVyTm9kZXMuaW5kZXhPZihsYXN0Tm9kZSkgOiBhY3RpdmVJbmRleDtcbiAgICB2YXIgbGFzdE5vZGVJbnNpZGUgPSBsYXN0Tm9kZSA/IGlubmVyTm9kZXMuaW5kZXhPZihsYXN0Tm9kZSkgOiAtMTtcbiAgICAvLyBubyBhY3RpdmUgZm9jdXMgKG9yIGZvY3VzIGlzIG9uIHRoZSBib2R5KVxuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgLy8ga25vd24gZmFsbGJhY2tcbiAgICAgICAgaWYgKGxhc3ROb2RlSW5zaWRlICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3ROb2RlSW5zaWRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBORVdfRk9DVVM7XG4gICAgfVxuICAgIC8vIG5ldyBmb2N1cywgbm90aGluZyB0byBjYWxjdWxhdGVcbiAgICBpZiAobGFzdE5vZGVJbnNpZGUgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBORVdfRk9DVVM7XG4gICAgfVxuICAgIHZhciBpbmRleERpZmYgPSBhY3RpdmVJbmRleCAtIGxhc3RJbmRleDtcbiAgICB2YXIgZmlyc3ROb2RlSW5kZXggPSBvdXRlck5vZGVzLmluZGV4T2YoZmlyc3RGb2N1cyk7XG4gICAgdmFyIGxhc3ROb2RlSW5kZXggPSBvdXRlck5vZGVzLmluZGV4T2YobGFzdEZvY3VzKTtcbiAgICB2YXIgY29ycmVjdGVkTm9kZXMgPSBjb3JyZWN0Tm9kZXMob3V0ZXJOb2Rlcyk7XG4gICAgdmFyIGNvcnJlY3RlZEluZGV4ID0gYWN0aXZlRWxlbWVudCAhPT0gdW5kZWZpbmVkID8gY29ycmVjdGVkTm9kZXMuaW5kZXhPZihhY3RpdmVFbGVtZW50KSA6IC0xO1xuICAgIHZhciBjb3JyZWN0ZWRJbmRleERpZmYgPSBjb3JyZWN0ZWRJbmRleCAtIChsYXN0Tm9kZSA/IGNvcnJlY3RlZE5vZGVzLmluZGV4T2YobGFzdE5vZGUpIDogYWN0aXZlSW5kZXgpO1xuICAgIC8vIG9sZCBmb2N1c1xuICAgIGlmICghaW5kZXhEaWZmICYmIGxhc3ROb2RlSW5zaWRlID49IDApIHtcbiAgICAgICAgcmV0dXJuIGxhc3ROb2RlSW5zaWRlO1xuICAgIH1cbiAgICAvLyBubyB0YWJiYWJsZSBlbGVtZW50cywgYXV0b2ZvY3VzIGlzIG5vdCBwb3NzaWJsZVxuICAgIGlmIChpbm5lclRhYmJhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gYW4gZWRnZSBjYXNlIHdpdGggbm8gdGFiYmFibGUgZWxlbWVudHNcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBsYXN0IGZvY3VzYWJsZSBvbmVcbiAgICAgICAgLy8gd2l0aCBzb21lIHByb2JhYmlsaXR5IHRoaXMgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gY3ljbGluZyBhY3Jvc3MgdGhlIGxvY2ssIGJ1dCB0aGVyZSBpcyBubyB0YWJiYWxlIGVsZW1lbnRzIHRvIGN5Y2xlIHRvXG4gICAgICAgIHJldHVybiBsYXN0Tm9kZUluc2lkZTtcbiAgICB9XG4gICAgdmFyIHJldHVybkZpcnN0Tm9kZSA9IHBpY2tGb2N1c2FibGUoaW5uZXJOb2RlcywgaW5uZXJUYWJiYWJsZXNbMF0pO1xuICAgIHZhciByZXR1cm5MYXN0Tm9kZSA9IHBpY2tGb2N1c2FibGUoaW5uZXJOb2RlcywgaW5uZXJUYWJiYWJsZXNbaW5uZXJUYWJiYWJsZXMubGVuZ3RoIC0gMV0pO1xuICAgIC8vIGZpcnN0IGVsZW1lbnRcbiAgICBpZiAoYWN0aXZlSW5kZXggPD0gZmlyc3ROb2RlSW5kZXggJiYgaXNPbkd1YXJkICYmIE1hdGguYWJzKGluZGV4RGlmZikgPiAxKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5MYXN0Tm9kZTtcbiAgICB9XG4gICAgLy8gbGFzdCBlbGVtZW50XG4gICAgaWYgKGFjdGl2ZUluZGV4ID49IGxhc3ROb2RlSW5kZXggJiYgaXNPbkd1YXJkICYmIE1hdGguYWJzKGluZGV4RGlmZikgPiAxKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5GaXJzdE5vZGU7XG4gICAgfVxuICAgIC8vIGp1bXAgb3V0LCBidXQgbm90IG9uIHRoZSBndWFyZFxuICAgIGlmIChpbmRleERpZmYgJiYgTWF0aC5hYnMoY29ycmVjdGVkSW5kZXhEaWZmKSA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGxhc3ROb2RlSW5zaWRlO1xuICAgIH1cbiAgICAvLyBmb2N1cyBhYm92ZSBsb2NrXG4gICAgaWYgKGFjdGl2ZUluZGV4IDw9IGZpcnN0Tm9kZUluZGV4KSB7XG4gICAgICAgIHJldHVybiByZXR1cm5MYXN0Tm9kZTtcbiAgICB9XG4gICAgLy8gZm9jdXMgYmVsb3cgbG9ja1xuICAgIGlmIChhY3RpdmVJbmRleCA+IGxhc3ROb2RlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHJldHVybkZpcnN0Tm9kZTtcbiAgICB9XG4gICAgLy8gaW5kZXggaXMgaW5zaWRlIHRhYiBvcmRlciwgYnV0IG91dHNpZGUgTG9ja1xuICAgIGlmIChpbmRleERpZmYpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGluZGV4RGlmZikgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdE5vZGVJbnNpZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChjbnQgKyBsYXN0Tm9kZUluc2lkZSArIGluZGV4RGlmZikgJSBjbnQ7XG4gICAgfVxuICAgIC8vIGRvIG5vdGhpbmdcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiIsImltcG9ydCB7IGZpbHRlckF1dG9Gb2N1c2FibGUgfSBmcm9tICcuL0RPTXV0aWxzJztcbmltcG9ydCB7IHBpY2tGaXJzdEZvY3VzIH0gZnJvbSAnLi9maXJzdEZvY3VzJztcbmltcG9ydCB7IGdldERhdGFzZXQgfSBmcm9tICcuL2lzJztcbnZhciBmaW5kQXV0b0ZvY3VzZWQgPSBmdW5jdGlvbiAoYXV0b0ZvY3VzYWJsZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYXV0b2ZvY3VzID0gKF9hID0gZ2V0RGF0YXNldChub2RlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF1dG9mb2N1cztcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBub2RlLmF1dG9mb2N1cyB8fFxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIChhdXRvZm9jdXMgIT09IHVuZGVmaW5lZCAmJiBhdXRvZm9jdXMgIT09ICdmYWxzZScpIHx8XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgYXV0b0ZvY3VzYWJsZXMuaW5kZXhPZihub2RlKSA+PSAwKTtcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgcGlja0F1dG9mb2N1cyA9IGZ1bmN0aW9uIChub2Rlc0luZGV4ZXMsIG9yZGVyZWROb2RlcywgZ3JvdXBzKSB7XG4gICAgdmFyIG5vZGVzID0gbm9kZXNJbmRleGVzLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfYS5ub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcbiAgICB2YXIgYXV0b0ZvY3VzYWJsZSA9IGZpbHRlckF1dG9Gb2N1c2FibGUobm9kZXMuZmlsdGVyKGZpbmRBdXRvRm9jdXNlZChncm91cHMpKSk7XG4gICAgaWYgKGF1dG9Gb2N1c2FibGUgJiYgYXV0b0ZvY3VzYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHBpY2tGaXJzdEZvY3VzKGF1dG9Gb2N1c2FibGUpO1xuICAgIH1cbiAgICByZXR1cm4gcGlja0ZpcnN0Rm9jdXMoZmlsdGVyQXV0b0ZvY3VzYWJsZShvcmRlcmVkTm9kZXMpKTtcbn07XG4iLCJpbXBvcnQgeyBwYXJlbnRBdXRvZm9jdXNhYmxlcyB9IGZyb20gJy4vRE9NdXRpbHMnO1xuaW1wb3J0IHsgY29udGFpbnMgfSBmcm9tICcuL0RPTXV0aWxzJztcbmltcG9ydCB7IGFzQXJyYXkgfSBmcm9tICcuL2FycmF5JztcbnZhciBnZXRQYXJlbnRzID0gZnVuY3Rpb24gKG5vZGUsIHBhcmVudHMpIHtcbiAgICBpZiAocGFyZW50cyA9PT0gdm9pZCAwKSB7IHBhcmVudHMgPSBbXTsgfVxuICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIGdldFBhcmVudHMobm9kZS5wYXJlbnROb2RlLmhvc3QgfHwgbm9kZS5wYXJlbnROb2RlLCBwYXJlbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudHM7XG59O1xuLyoqXG4gKiBmaW5kcyBhIHBhcmVudCBmb3IgYm90aCBub2RlQSBhbmQgbm9kZUJcbiAqIEBwYXJhbSBub2RlQVxuICogQHBhcmFtIG5vZGVCXG4gKiBAcmV0dXJucyB7Ym9vbGVhbnwqfVxuICovXG5leHBvcnQgdmFyIGdldENvbW1vblBhcmVudCA9IGZ1bmN0aW9uIChub2RlQSwgbm9kZUIpIHtcbiAgICB2YXIgcGFyZW50c0EgPSBnZXRQYXJlbnRzKG5vZGVBKTtcbiAgICB2YXIgcGFyZW50c0IgPSBnZXRQYXJlbnRzKG5vZGVCKTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZvci1vZlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50c0EubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnRzQVtpXTtcbiAgICAgICAgaWYgKHBhcmVudHNCLmluZGV4T2YoY3VycmVudFBhcmVudCkgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCB2YXIgZ2V0VG9wQ29tbW9uUGFyZW50ID0gZnVuY3Rpb24gKGJhc2VBY3RpdmVFbGVtZW50LCBsZWZ0RW50cnksIHJpZ2h0RW50cmllcykge1xuICAgIHZhciBhY3RpdmVFbGVtZW50cyA9IGFzQXJyYXkoYmFzZUFjdGl2ZUVsZW1lbnQpO1xuICAgIHZhciBsZWZ0RW50cmllcyA9IGFzQXJyYXkobGVmdEVudHJ5KTtcbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGFjdGl2ZUVsZW1lbnRzWzBdO1xuICAgIHZhciB0b3BDb21tb24gPSBmYWxzZTtcbiAgICBsZWZ0RW50cmllcy5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgdG9wQ29tbW9uID0gZ2V0Q29tbW9uUGFyZW50KHRvcENvbW1vbiB8fCBlbnRyeSwgZW50cnkpIHx8IHRvcENvbW1vbjtcbiAgICAgICAgcmlnaHRFbnRyaWVzLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJFbnRyeSkge1xuICAgICAgICAgICAgdmFyIGNvbW1vbiA9IGdldENvbW1vblBhcmVudChhY3RpdmVFbGVtZW50LCBzdWJFbnRyeSk7XG4gICAgICAgICAgICBpZiAoY29tbW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0b3BDb21tb24gfHwgY29udGFpbnMoY29tbW9uLCB0b3BDb21tb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcENvbW1vbiA9IGNvbW1vbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcENvbW1vbiA9IGdldENvbW1vblBhcmVudChjb21tb24sIHRvcENvbW1vbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBUT0RPOiBhZGQgYXNzZXJ0IGhlcmU/XG4gICAgcmV0dXJuIHRvcENvbW1vbjtcbn07XG4vKipcbiAqIHJldHVybiBsaXN0IG9mIG5vZGVzIHdoaWNoIGFyZSBleHBlY3RlZCB0byBiZSBhdXRvZm9jdXNlZCBpbnNpZGUgYSBnaXZlbiB0b3Agbm9kZXNcbiAqIEBwYXJhbSBlbnRyaWVzXG4gKiBAcGFyYW0gdmlzaWJpbGl0eUNhY2hlXG4gKi9cbmV4cG9ydCB2YXIgYWxsUGFyZW50QXV0b2ZvY3VzYWJsZXMgPSBmdW5jdGlvbiAoZW50cmllcywgdmlzaWJpbGl0eUNhY2hlKSB7XG4gICAgcmV0dXJuIGVudHJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHsgcmV0dXJuIGFjYy5jb25jYXQocGFyZW50QXV0b2ZvY3VzYWJsZXMobm9kZSwgdmlzaWJpbGl0eUNhY2hlKSk7IH0sIFtdKTtcbn07XG4iLCJpbXBvcnQgeyBORVdfRk9DVVMsIG5ld0ZvY3VzIH0gZnJvbSAnLi9zb2x2ZXInO1xuaW1wb3J0IHsgZ2V0Rm9jdXNhYmxlTm9kZXMgfSBmcm9tICcuL3V0aWxzL0RPTXV0aWxzJztcbmltcG9ydCB7IGdldEFsbEFmZmVjdGVkTm9kZXMgfSBmcm9tICcuL3V0aWxzL2FsbC1hZmZlY3RlZCc7XG5pbXBvcnQgeyBhc0FycmF5LCBnZXRGaXJzdCB9IGZyb20gJy4vdXRpbHMvYXJyYXknO1xuaW1wb3J0IHsgcGlja0F1dG9mb2N1cyB9IGZyb20gJy4vdXRpbHMvYXV0by1mb2N1cyc7XG5pbXBvcnQgeyBnZXRBY3RpdmVFbGVtZW50IH0gZnJvbSAnLi91dGlscy9nZXRBY3RpdmVFbGVtZW50JztcbmltcG9ydCB7IGlzRGVmaW5lZCwgaXNOb3RBR3VhcmQgfSBmcm9tICcuL3V0aWxzL2lzJztcbmltcG9ydCB7IGFsbFBhcmVudEF1dG9mb2N1c2FibGVzLCBnZXRUb3BDb21tb25QYXJlbnQgfSBmcm9tICcuL3V0aWxzL3BhcmVudGluZyc7XG52YXIgcmVvcmRlck5vZGVzID0gZnVuY3Rpb24gKHNyY05vZGVzLCBkc3ROb2Rlcykge1xuICAgIHZhciByZW1hcCA9IG5ldyBNYXAoKTtcbiAgICAvLyBubyBTZXQoZHN0Tm9kZXMpIGZvciBJRTExIDooXG4gICAgZHN0Tm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50aXR5KSB7IHJldHVybiByZW1hcC5zZXQoZW50aXR5Lm5vZGUsIGVudGl0eSk7IH0pO1xuICAgIC8vIHJlbWFwIHRvIGRzdE5vZGVzXG4gICAgcmV0dXJuIHNyY05vZGVzLm1hcChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gcmVtYXAuZ2V0KG5vZGUpOyB9KS5maWx0ZXIoaXNEZWZpbmVkKTtcbn07XG4vKipcbiAqIGNvbnRhaW5zIHRoZSBtYWluIGxvZ2ljIG9mIHRoZSBgZm9jdXMtbG9ja2AgcGFja2FnZS5cbiAqXG4gKiAhIHlvdSBwcm9iYWJseSBkb250IG5lZWQgdGhpcyBmdW5jdGlvbiAhXG4gKlxuICogZ2l2ZW4gdG9wIG5vZGUocykgYW5kIHRoZSBsYXN0IGFjdGl2ZSBlbGVtZW50IHJldHVybnMgdGhlIGVsZW1lbnQgdG8gYmUgZm9jdXNlZCBuZXh0XG4gKiBAcmV0dXJucyBlbGVtZW50IHdoaWNoIHNob3VsZCBiZSBmb2N1c2VkIHRvIG1vdmUgZm9jdXMgaW5zaWRlXG4gKiBAcGFyYW0gdG9wTm9kZVxuICogQHBhcmFtIGxhc3ROb2RlXG4gKi9cbmV4cG9ydCB2YXIgZm9jdXNTb2x2ZXIgPSBmdW5jdGlvbiAodG9wTm9kZSwgbGFzdE5vZGUpIHtcbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoYXNBcnJheSh0b3BOb2RlKS5sZW5ndGggPiAwID8gZG9jdW1lbnQgOiBnZXRGaXJzdCh0b3BOb2RlKS5vd25lckRvY3VtZW50KTtcbiAgICB2YXIgZW50cmllcyA9IGdldEFsbEFmZmVjdGVkTm9kZXModG9wTm9kZSkuZmlsdGVyKGlzTm90QUd1YXJkKTtcbiAgICB2YXIgY29tbW9uUGFyZW50ID0gZ2V0VG9wQ29tbW9uUGFyZW50KGFjdGl2ZUVsZW1lbnQgfHwgdG9wTm9kZSwgdG9wTm9kZSwgZW50cmllcyk7XG4gICAgdmFyIHZpc2liaWxpdHlDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB2YXIgYW55Rm9jdXNhYmxlID0gZ2V0Rm9jdXNhYmxlTm9kZXMoZW50cmllcywgdmlzaWJpbGl0eUNhY2hlKTtcbiAgICB2YXIgaW5uZXJFbGVtZW50cyA9IGFueUZvY3VzYWJsZS5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBub2RlID0gX2Eubm9kZTtcbiAgICAgICAgcmV0dXJuIGlzTm90QUd1YXJkKG5vZGUpO1xuICAgIH0pO1xuICAgIGlmICghaW5uZXJFbGVtZW50c1swXSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgb3V0ZXJOb2RlcyA9IGdldEZvY3VzYWJsZU5vZGVzKFtjb21tb25QYXJlbnRdLCB2aXNpYmlsaXR5Q2FjaGUpLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfYS5ub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcbiAgICB2YXIgb3JkZXJlZElubmVyRWxlbWVudHMgPSByZW9yZGVyTm9kZXMob3V0ZXJOb2RlcywgaW5uZXJFbGVtZW50cyk7XG4gICAgLy8gY29sbGVjdCBpbm5lciBmb2N1c2FibGUgYW5kIHNlcGFyYXRlbHkgdGFiYmFibGVzXG4gICAgdmFyIGlubmVyRm9jdXNhYmxlcyA9IG9yZGVyZWRJbm5lckVsZW1lbnRzLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfYS5ub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcbiAgICB2YXIgaW5uZXJUYWJiYWJsZSA9IG9yZGVyZWRJbm5lckVsZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHRhYkluZGV4ID0gX2EudGFiSW5kZXg7XG4gICAgICAgIHJldHVybiB0YWJJbmRleCA+PSAwO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfYS5ub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcbiAgICB2YXIgbmV3SWQgPSBuZXdGb2N1cyhpbm5lckZvY3VzYWJsZXMsIGlubmVyVGFiYmFibGUsIG91dGVyTm9kZXMsIGFjdGl2ZUVsZW1lbnQsIGxhc3ROb2RlKTtcbiAgICBpZiAobmV3SWQgPT09IE5FV19GT0NVUykge1xuICAgICAgICB2YXIgZm9jdXNOb2RlID0gXG4gICAgICAgIC8vIGZpcnN0IHRyeSBvbmx5IHRhYmJhYmxlLCBhbmQgdGhlIGZhbGxiYWNrIHRvIGFsbCBmb2N1c2FibGUsIGFzIGxvbmcgYXMgYXQgbGVhc3Qgb25lIGVsZW1lbnQgc2hvdWxkIGJlIHBpY2tlZCBmb3IgZm9jdXNcbiAgICAgICAgcGlja0F1dG9mb2N1cyhhbnlGb2N1c2FibGUsIGlubmVyVGFiYmFibGUsIGFsbFBhcmVudEF1dG9mb2N1c2FibGVzKGVudHJpZXMsIHZpc2liaWxpdHlDYWNoZSkpIHx8XG4gICAgICAgICAgICBwaWNrQXV0b2ZvY3VzKGFueUZvY3VzYWJsZSwgaW5uZXJGb2N1c2FibGVzLCBhbGxQYXJlbnRBdXRvZm9jdXNhYmxlcyhlbnRyaWVzLCB2aXNpYmlsaXR5Q2FjaGUpKTtcbiAgICAgICAgaWYgKGZvY3VzTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogZm9jdXNOb2RlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2ZvY3VzLWxvY2s6IGNhbm5vdCBmaW5kIGFueSBub2RlIHRvIG1vdmUgZm9jdXMgaW50bycpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV3SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmV3SWQ7XG4gICAgfVxuICAgIHJldHVybiBvcmRlcmVkSW5uZXJFbGVtZW50c1tuZXdJZF07XG59O1xuIiwiaW1wb3J0IHsgZm9jdXNPbiB9IGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IHsgZm9jdXNTb2x2ZXIgfSBmcm9tICcuL2ZvY3VzU29sdmVyJztcbnZhciBndWFyZENvdW50ID0gMDtcbnZhciBsb2NrRGlzYWJsZWQgPSBmYWxzZTtcbi8qKlxuICogVGhlIG1haW4gZnVuY3Rpb25hbGl0eSBvZiB0aGUgZm9jdXMtbG9jayBwYWNrYWdlXG4gKlxuICogQ29udGFpbnMgZm9jdXMgYXQgYSBnaXZlbiBub2RlLlxuICogVGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdpbGwgaGVscCB0byBkZXRlcm1pbmUgd2hpY2ggZWxlbWVudChmaXJzdCBvciBsYXN0KSBzaG91bGQgYmUgZm9jdXNlZC5cbiAqIFRoZSBmb3VuZCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZC5cbiAqXG4gKiBUaGlzIGlzIG9uZSB0aW1lIGFjdGlvbiAobW92ZSksIG5vdCBhIHBlcnNpc3RlbnQgZm9jdXMtbG9ja1xuICpcbiAqIEhUTUwgbWFya2VycyAoc2VlIHtAbGluayBpbXBvcnQoJy4vY29uc3RhbnRzJykuRk9DVVNfQVVUT30gY29uc3RhbnRzKSBjYW4gY29udHJvbCBhdXRvZm9jdXNcbiAqIEBzZWUge0BsaW5rIGZvY3VzU29sdmVyfSBmb3IgdGhlIHNhbWUgZnVuY3Rpb25hbGl0eSB3aXRob3V0IGF1dG9mb2N1c1xuICovXG5leHBvcnQgdmFyIG1vdmVGb2N1c0luc2lkZSA9IGZ1bmN0aW9uICh0b3BOb2RlLCBsYXN0Tm9kZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGZvY3VzYWJsZSA9IGZvY3VzU29sdmVyKHRvcE5vZGUsIGxhc3ROb2RlKTtcbiAgICAvLyBnbG9iYWwgbG9jYWwgc2lkZSBlZmZlY3QgdG8gY291bnRhaW4gcmVjdXJzaXZlIGxvY2sgYWN0aXZhdGlvbiBhbmQgcmVzb2x2ZSBmb2N1cy1maWdodGluZ1xuICAgIGlmIChsb2NrRGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZm9jdXNhYmxlKSB7XG4gICAgICAgIC8qKiArRk9DVVMtRklHSFRJTkcgcHJldmVudGlvbiAqKi9cbiAgICAgICAgaWYgKGd1YXJkQ291bnQgPiAyKSB7XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIHJlY3Vyc2l2ZSBlbnRlcmVkIGJhY2sgdGhlIGxvY2sgYWN0aXZhdGlvblxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRm9jdXNMb2NrOiBmb2N1cy1maWdodGluZyBkZXRlY3RlZC4gT25seSBvbmUgZm9jdXMgbWFuYWdlbWVudCBzeXN0ZW0gY291bGQgYmUgYWN0aXZlLiAnICtcbiAgICAgICAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90aGVLYXNoZXkvZm9jdXMtbG9jay8jZm9jdXMtZmlnaHRpbmcnKTtcbiAgICAgICAgICAgIGxvY2tEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsb2NrRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGd1YXJkQ291bnQrKztcbiAgICAgICAgZm9jdXNPbihmb2N1c2FibGUubm9kZSwgb3B0aW9ucy5mb2N1c09wdGlvbnMpO1xuICAgICAgICBndWFyZENvdW50LS07XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGZvY3VzT24gfSBmcm9tICcuL2NvbW1hbmRzJztcbmltcG9ydCB7IGdldFRhYmJhYmxlTm9kZXMsIGNvbnRhaW5zLCBnZXRGb2N1c2FibGVOb2RlcyB9IGZyb20gJy4vdXRpbHMvRE9NdXRpbHMnO1xuaW1wb3J0IHsgYXNBcnJheSB9IGZyb20gJy4vdXRpbHMvYXJyYXknO1xuLyoqXG4gKiBmb3IgYSBnaXZlbiBgZWxlbWVudGAgaW4gYSBnaXZlbiBgc2NvcGVgIHJldHVybnMgZm9jdXNhYmxlIHNpYmxpbmdzXG4gKiBAcGFyYW0gZWxlbWVudCAtIGJhc2UgZWxlbWVudFxuICogQHBhcmFtIHNjb3BlIC0gY29tbW9uIHBhcmVudC4gQ2FuIGJlIGRvY3VtZW50LCBidXQgYmV0dGVyIHRvIG5hcnJvdyBpdCBkb3duIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gKiBAcmV0dXJucyB7cHJldixuZXh0fSAtIHJlZmVyZW5jZXMgdG8gYSBmb2N1c2FibGUgZWxlbWVudCBiZWZvcmUgYW5kIGFmdGVyXG4gKiBAcmV0dXJucyB1bmRlZmluZWQgLSBpZiBvcGVyYXRpb24gaXMgbm90IGFwcGxpY2FibGVcbiAqL1xuZXhwb3J0IHZhciBnZXRSZWxhdGl2ZUZvY3VzYWJsZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBzY29wZSwgdXNlVGFiYmFibGVzKSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFzY29wZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdubyBlbGVtZW50IG9yIHNjb3BlIGdpdmVuJyk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIHNoYXJkcyA9IGFzQXJyYXkoc2NvcGUpO1xuICAgIGlmIChzaGFyZHMuZXZlcnkoZnVuY3Rpb24gKHNoYXJkKSB7IHJldHVybiAhY29udGFpbnMoc2hhcmQsIGVsZW1lbnQpOyB9KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBY3RpdmUgZWxlbWVudCBpcyBub3QgY29udGFpbmVkIGluIHRoZSBzY29wZScpO1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHZhciBmb2N1c2FibGVzID0gdXNlVGFiYmFibGVzXG4gICAgICAgID8gZ2V0VGFiYmFibGVOb2RlcyhzaGFyZHMsIG5ldyBNYXAoKSlcbiAgICAgICAgOiBnZXRGb2N1c2FibGVOb2RlcyhzaGFyZHMsIG5ldyBNYXAoKSk7XG4gICAgdmFyIGN1cnJlbnQgPSBmb2N1c2FibGVzLmZpbmRJbmRleChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfYS5ub2RlO1xuICAgICAgICByZXR1cm4gbm9kZSA9PT0gZWxlbWVudDtcbiAgICB9KTtcbiAgICBpZiAoY3VycmVudCA9PT0gLTEpIHtcbiAgICAgICAgLy8gYW4gZWRnZSBjYXNlLCB3aGVuIGFuY2hvciBlbGVtZW50IGlzIG5vdCBmb3VuZFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcmV2OiBmb2N1c2FibGVzW2N1cnJlbnQgLSAxXSxcbiAgICAgICAgbmV4dDogZm9jdXNhYmxlc1tjdXJyZW50ICsgMV0sXG4gICAgICAgIGZpcnN0OiBmb2N1c2FibGVzWzBdLFxuICAgICAgICBsYXN0OiBmb2N1c2FibGVzW2ZvY3VzYWJsZXMubGVuZ3RoIC0gMV0sXG4gICAgfTtcbn07XG52YXIgZ2V0Qm91bmRhcnkgPSBmdW5jdGlvbiAoc2hhcmRzLCB1c2VUYWJiYWJsZXMpIHtcbiAgICB2YXIgc2V0ID0gdXNlVGFiYmFibGVzXG4gICAgICAgID8gZ2V0VGFiYmFibGVOb2Rlcyhhc0FycmF5KHNoYXJkcyksIG5ldyBNYXAoKSlcbiAgICAgICAgOiBnZXRGb2N1c2FibGVOb2Rlcyhhc0FycmF5KHNoYXJkcyksIG5ldyBNYXAoKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmlyc3Q6IHNldFswXSxcbiAgICAgICAgbGFzdDogc2V0W3NldC5sZW5ndGggLSAxXSxcbiAgICB9O1xufTtcbnZhciBkZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBzY29wZTogZG9jdW1lbnQuYm9keSxcbiAgICAgICAgY3ljbGU6IHRydWUsXG4gICAgICAgIG9ubHlUYWJiYWJsZTogdHJ1ZSxcbiAgICB9LCBvcHRpb25zKTtcbn07XG52YXIgbW92ZUZvY3VzID0gZnVuY3Rpb24gKGZyb21FbGVtZW50LCBvcHRpb25zLCBjYikge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIG5ld09wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB2YXIgc29sdXRpb24gPSBnZXRSZWxhdGl2ZUZvY3VzYWJsZShmcm9tRWxlbWVudCwgbmV3T3B0aW9ucy5zY29wZSwgbmV3T3B0aW9ucy5vbmx5VGFiYmFibGUpO1xuICAgIGlmICghc29sdXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGFyZ2V0ID0gY2Ioc29sdXRpb24sIG5ld09wdGlvbnMuY3ljbGUpO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgZm9jdXNPbih0YXJnZXQubm9kZSwgbmV3T3B0aW9ucy5mb2N1c09wdGlvbnMpO1xuICAgIH1cbn07XG4vKipcbiAqIGZvY3VzZXMgbmV4dCBlbGVtZW50IGluIHRoZSB0YWItb3JkZXJcbiAqIEBwYXJhbSBmcm9tRWxlbWVudCAtIGNvbW1vbiBwYXJlbnQgdG8gc2NvcGUgYWN0aXZlIGVsZW1lbnQgc2VhcmNoIG9yIHRhYiBjeWNsZSBvcmRlclxuICogQHBhcmFtIHtGb2N1c05leHRPcHRpb25zfSBbb3B0aW9uc10gLSBmb2N1cyBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgZm9jdXNOZXh0RWxlbWVudCA9IGZ1bmN0aW9uIChmcm9tRWxlbWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgbW92ZUZvY3VzKGZyb21FbGVtZW50LCBvcHRpb25zLCBmdW5jdGlvbiAoX2EsIGN5Y2xlKSB7XG4gICAgICAgIHZhciBuZXh0ID0gX2EubmV4dCwgZmlyc3QgPSBfYS5maXJzdDtcbiAgICAgICAgcmV0dXJuIG5leHQgfHwgKGN5Y2xlICYmIGZpcnN0KTtcbiAgICB9KTtcbn07XG4vKipcbiAqIGZvY3VzZXMgcHJldiBlbGVtZW50IGluIHRoZSB0YWIgb3JkZXJcbiAqIEBwYXJhbSBmcm9tRWxlbWVudCAtIGNvbW1vbiBwYXJlbnQgdG8gc2NvcGUgYWN0aXZlIGVsZW1lbnQgc2VhcmNoIG9yIHRhYiBjeWNsZSBvcmRlclxuICogQHBhcmFtIHtGb2N1c05leHRPcHRpb25zfSBbb3B0aW9uc10gLSBmb2N1cyBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgZm9jdXNQcmV2RWxlbWVudCA9IGZ1bmN0aW9uIChmcm9tRWxlbWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgbW92ZUZvY3VzKGZyb21FbGVtZW50LCBvcHRpb25zLCBmdW5jdGlvbiAoX2EsIGN5Y2xlKSB7XG4gICAgICAgIHZhciBwcmV2ID0gX2EucHJldiwgbGFzdCA9IF9hLmxhc3Q7XG4gICAgICAgIHJldHVybiBwcmV2IHx8IChjeWNsZSAmJiBsYXN0KTtcbiAgICB9KTtcbn07XG52YXIgcGlja0JvdW5kYXJ5ID0gZnVuY3Rpb24gKHNjb3BlLCBvcHRpb25zLCB3aGF0KSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBib3VuZGFyeSA9IGdldEJvdW5kYXJ5KHNjb3BlLCAoX2EgPSBvcHRpb25zLm9ubHlUYWJiYWJsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZSk7XG4gICAgdmFyIG5vZGUgPSBib3VuZGFyeVt3aGF0XTtcbiAgICBpZiAobm9kZSkge1xuICAgICAgICBmb2N1c09uKG5vZGUubm9kZSwgb3B0aW9ucy5mb2N1c09wdGlvbnMpO1xuICAgIH1cbn07XG4vKipcbiAqIGZvY3VzZXMgZmlyc3QgZWxlbWVudCBpbiB0aGUgdGFiLW9yZGVyXG4gKiBAcGFyYW0ge0ZvY3VzTmV4dE9wdGlvbnN9IG9wdGlvbnMgLSBmb2N1cyBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgZm9jdXNGaXJzdEVsZW1lbnQgPSBmdW5jdGlvbiAoc2NvcGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHBpY2tCb3VuZGFyeShzY29wZSwgb3B0aW9ucywgJ2ZpcnN0Jyk7XG59O1xuLyoqXG4gKiBmb2N1c2VzIGxhc3QgZWxlbWVudCBpbiB0aGUgdGFiIG9yZGVyXG4gKiBAcGFyYW0ge0ZvY3VzTmV4dE9wdGlvbnN9IG9wdGlvbnMgLSBmb2N1cyBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgZm9jdXNMYXN0RWxlbWVudCA9IGZ1bmN0aW9uIChzY29wZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgcGlja0JvdW5kYXJ5KHNjb3BlLCBvcHRpb25zLCAnbGFzdCcpO1xufTtcbiIsImltcG9ydCB7IGdldFRhYmJhYmxlTm9kZXMgfSBmcm9tICcuL3V0aWxzL0RPTXV0aWxzJztcbmZ1bmN0aW9uIHdlYWtSZWYodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB2YXIgdyA9IHZhbHVlID8gbmV3IFdlYWtSZWYodmFsdWUpIDogbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHcgPT09IG51bGwgfHwgdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdy5kZXJlZigpKSB8fCBudWxsOyB9O1xufVxuZXhwb3J0IHZhciByZWNvcmRFbGVtZW50TG9jYXRpb24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgdmFyIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgICB3aGlsZSAoY3VycmVudEVsZW1lbnQgJiYgY3VycmVudEVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgc3RhY2sucHVzaCh7XG4gICAgICAgICAgICBjdXJyZW50OiB3ZWFrUmVmKGN1cnJlbnRFbGVtZW50KSxcbiAgICAgICAgICAgIHBhcmVudDogd2Vha1JlZihjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50KSxcbiAgICAgICAgICAgIGxlZnQ6IHdlYWtSZWYoY3VycmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZyksXG4gICAgICAgICAgICByaWdodDogd2Vha1JlZihjdXJyZW50RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLFxuICAgICAgICB9KTtcbiAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50OiB3ZWFrUmVmKGVsZW1lbnQpLFxuICAgICAgICBzdGFjazogc3RhY2ssXG4gICAgICAgIG93bmVyRG9jdW1lbnQ6IGVsZW1lbnQub3duZXJEb2N1bWVudCxcbiAgICB9O1xufTtcbnZhciByZXN0b3JlRm9jdXNUbyA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgaWYgKCFsb2NhdGlvbikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgc3RhY2sgPSBsb2NhdGlvbi5zdGFjaywgb3duZXJEb2N1bWVudCA9IGxvY2F0aW9uLm93bmVyRG9jdW1lbnQ7XG4gICAgdmFyIHZpc2liaWxpdHlDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHN0YWNrXzEgPSBzdGFjazsgX2kgPCBzdGFja18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgbGluZSA9IHN0YWNrXzFbX2ldO1xuICAgICAgICB2YXIgcGFyZW50XzEgPSAoX2EgPSBsaW5lLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwobGluZSk7XG4gICAgICAgIC8vIGlzIGl0IHN0aWxsIGhlcmU/XG4gICAgICAgIGlmIChwYXJlbnRfMSAmJiBvd25lckRvY3VtZW50LmNvbnRhaW5zKHBhcmVudF8xKSkge1xuICAgICAgICAgICAgdmFyIGxlZnQgPSAoX2IgPSBsaW5lLmxlZnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGxpbmUpO1xuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gKF9jID0gbGluZS5yaWdodCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwobGluZSk7XG4gICAgICAgICAgICB2YXIgZm9jdXNhYmxlcyA9IGdldFRhYmJhYmxlTm9kZXMoW3BhcmVudF8xXSwgdmlzaWJpbGl0eUNhY2hlKTtcbiAgICAgICAgICAgIHZhciBhaW0gPSBcbiAgICAgICAgICAgIC8vIHRoYXQgaXMgZWxlbWVudCBpdHNlbGZcbiAgICAgICAgICAgIChfZSA9IChfZCA9IGxlZnQgPT09IG51bGwgfHwgbGVmdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGVmdC5uZXh0RWxlbWVudFNpYmxpbmcpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFxuICAgICAgICAgICAgLy8gb3Igc29tZWJvZHkgdG8gdGhlIHJpZ2h0P1xuICAgICAgICAgICAgcmlnaHQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IFxuICAgICAgICAgICAgLy8gb3Igc29tZWJvZHkgdG8gdGhlIGxlZnRcbiAgICAgICAgICAgIGxlZnQ7XG4gICAgICAgICAgICB3aGlsZSAoYWltKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2YgPSAwLCBmb2N1c2FibGVzXzEgPSBmb2N1c2FibGVzOyBfZiA8IGZvY3VzYWJsZXNfMS5sZW5ndGg7IF9mKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZSA9IGZvY3VzYWJsZXNfMVtfZl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChhaW0gPT09IG51bGwgfHwgYWltID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhaW0uY29udGFpbnMoZm9jdXNhYmxlLm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNhYmxlLm5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWltID0gYWltLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb2N1c2FibGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHBhcmVudCBjb250YWlucyBhIGZvY3VzYWJsZSAtIG1vdmUgdGhlcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNhYmxlc1swXS5ub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG5vdGhpbmcgbWF0Y2hlZFxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuLyoqXG4gKiBDYXB0dXJlcyB0aGUgY3VycmVudCBmb2N1c2VkIGVsZW1lbnQgdG8gcmVzdG9yZSBmb2N1cyBhcyBjbG9zZSBhcyBwb3NzaWJsZSBpbiB0aGUgZnV0dXJlXG4gKiBIYW5kbGVzIHNpdHVhdGlvbnMgd2hlcmUgdGhlIGZvY3VzZWQgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSBvciBubyBsb25nZXIgZm9jdXNhYmxlXG4gKiBtb3ZpbmcgZm9jdXMgdG8gdGhlIGNsb3Nlc3QgZm9jdXNhYmxlIGVsZW1lbnRcbiAqIEBwYXJhbSB0YXJnZXRFbGVtZW50IC0gZWxlbWVudCB3aGVyZSBmb2N1cyBzaG91bGQgYmUgcmVzdG9yZWRcbiAqIEByZXR1cm5zIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgbmV3IGVsZW1lbnQgdG8gZm9jdXNcbiAqL1xuZXhwb3J0IHZhciBjYXB0dXJlRm9jdXNSZXN0b3JlID0gZnVuY3Rpb24gKHRhcmdldEVsZW1lbnQpIHtcbiAgICB2YXIgbG9jYXRpb24gPSByZWNvcmRFbGVtZW50TG9jYXRpb24odGFyZ2V0RWxlbWVudCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3RvcmVGb2N1c1RvKGxvY2F0aW9uKTtcbiAgICB9O1xufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZlckFjdGlvbihhY3Rpb24pIHtcbiAgc2V0VGltZW91dChhY3Rpb24sIDEpO1xufVxuZXhwb3J0IHZhciBpbmxpbmVQcm9wID0gZnVuY3Rpb24gaW5saW5lUHJvcChuYW1lLCB2YWx1ZSkge1xuICB2YXIgb2JqID0ge307XG4gIG9ialtuYW1lXSA9IHZhbHVlO1xuICByZXR1cm4gb2JqO1xufTtcbmV4cG9ydCB2YXIgZXh0cmFjdFJlZiA9IGZ1bmN0aW9uIGV4dHJhY3RSZWYocmVmKSB7XG4gIHJldHVybiByZWYgJiYgJ2N1cnJlbnQnIGluIHJlZiA/IHJlZi5jdXJyZW50IDogcmVmO1xufTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdpdGhTaWRlRWZmZWN0IGZyb20gJ3JlYWN0LWNsaWVudHNpZGUtZWZmZWN0JztcbmltcG9ydCB7IG1vdmVGb2N1c0luc2lkZSwgZm9jdXNJbnNpZGUsIGZvY3VzSXNIaWRkZW4sIGV4cGFuZEZvY3VzYWJsZU5vZGVzLCBmb2N1c05leHRFbGVtZW50LCBmb2N1c1ByZXZFbGVtZW50LCBmb2N1c0ZpcnN0RWxlbWVudCwgZm9jdXNMYXN0RWxlbWVudCwgY2FwdHVyZUZvY3VzUmVzdG9yZSB9IGZyb20gJ2ZvY3VzLWxvY2snO1xuaW1wb3J0IHsgZGVmZXJBY3Rpb24sIGV4dHJhY3RSZWYgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgbWVkaXVtRm9jdXMsIG1lZGl1bUJsdXIsIG1lZGl1bUVmZmVjdCB9IGZyb20gJy4vbWVkaXVtJztcbnZhciBmb2N1c09uQm9keSA9IGZ1bmN0aW9uIGZvY3VzT25Cb2R5KCkge1xuICByZXR1cm4gZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keTtcbn07XG52YXIgaXNGcmVlRm9jdXMgPSBmdW5jdGlvbiBpc0ZyZWVGb2N1cygpIHtcbiAgcmV0dXJuIGZvY3VzT25Cb2R5KCkgfHwgZm9jdXNJc0hpZGRlbigpO1xufTtcbnZhciBsYXN0QWN0aXZlVHJhcCA9IG51bGw7XG52YXIgbGFzdEFjdGl2ZUZvY3VzID0gbnVsbDtcbnZhciBsYXN0UG9ydGFsZWRFbGVtZW50ID0gbnVsbDtcbnZhciBmb2N1c1dhc091dHNpZGVXaW5kb3cgPSBmYWxzZTtcbnZhciBkZWZhdWx0V2hpdGVsaXN0ID0gZnVuY3Rpb24gZGVmYXVsdFdoaXRlbGlzdCgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIGZvY3VzV2hpdGVsaXN0ZWQgPSBmdW5jdGlvbiBmb2N1c1doaXRlbGlzdGVkKGFjdGl2ZUVsZW1lbnQpIHtcbiAgcmV0dXJuIChsYXN0QWN0aXZlVHJhcC53aGl0ZUxpc3QgfHwgZGVmYXVsdFdoaXRlbGlzdCkoYWN0aXZlRWxlbWVudCk7XG59O1xudmFyIHJlY29yZFBvcnRhbCA9IGZ1bmN0aW9uIHJlY29yZFBvcnRhbChvYnNlcnZlck5vZGUsIHBvcnRhbGVkRWxlbWVudCkge1xuICBsYXN0UG9ydGFsZWRFbGVtZW50ID0ge1xuICAgIG9ic2VydmVyTm9kZTogb2JzZXJ2ZXJOb2RlLFxuICAgIHBvcnRhbGVkRWxlbWVudDogcG9ydGFsZWRFbGVtZW50XG4gIH07XG59O1xudmFyIGZvY3VzSXNQb3J0YWxlZFBhaXIgPSBmdW5jdGlvbiBmb2N1c0lzUG9ydGFsZWRQYWlyKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGxhc3RQb3J0YWxlZEVsZW1lbnQgJiYgbGFzdFBvcnRhbGVkRWxlbWVudC5wb3J0YWxlZEVsZW1lbnQgPT09IGVsZW1lbnQ7XG59O1xuZnVuY3Rpb24gYXV0b0d1YXJkKHN0YXJ0SW5kZXgsIGVuZCwgc3RlcCwgYWxsTm9kZXMpIHtcbiAgdmFyIGxhc3RHdWFyZCA9IG51bGw7XG4gIHZhciBpID0gc3RhcnRJbmRleDtcbiAgZG8ge1xuICAgIHZhciBpdGVtID0gYWxsTm9kZXNbaV07XG4gICAgaWYgKGl0ZW0uZ3VhcmQpIHtcbiAgICAgIGlmIChpdGVtLm5vZGUuZGF0YXNldC5mb2N1c0F1dG9HdWFyZCkge1xuICAgICAgICBsYXN0R3VhcmQgPSBpdGVtO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXRlbS5sb2NrSXRlbSkge1xuICAgICAgaWYgKGkgIT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGFzdEd1YXJkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IHdoaWxlICgoaSArPSBzdGVwKSAhPT0gZW5kKTtcbiAgaWYgKGxhc3RHdWFyZCkge1xuICAgIGxhc3RHdWFyZC5ub2RlLnRhYkluZGV4ID0gMDtcbiAgfVxufVxudmFyIGZvY3VzV2FzT3V0c2lkZSA9IGZ1bmN0aW9uIGZvY3VzV2FzT3V0c2lkZShjcm9zc0ZyYW1lT3B0aW9uKSB7XG4gIGlmIChjcm9zc0ZyYW1lT3B0aW9uKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZm9jdXNXYXNPdXRzaWRlV2luZG93KTtcbiAgfVxuICByZXR1cm4gZm9jdXNXYXNPdXRzaWRlV2luZG93ID09PSAnbWVhbndoaWxlJztcbn07XG52YXIgY2hlY2tJbkhvc3QgPSBmdW5jdGlvbiBjaGVja0luSG9zdChjaGVjaywgZWwsIGJvdW5kYXJ5KSB7XG4gIHJldHVybiBlbCAmJiAoZWwuaG9zdCA9PT0gY2hlY2sgJiYgKCFlbC5hY3RpdmVFbGVtZW50IHx8IGJvdW5kYXJ5LmNvbnRhaW5zKGVsLmFjdGl2ZUVsZW1lbnQpKSB8fCBlbC5wYXJlbnROb2RlICYmIGNoZWNrSW5Ib3N0KGNoZWNrLCBlbC5wYXJlbnROb2RlLCBib3VuZGFyeSkpO1xufTtcbnZhciB3aXRoaW5Ib3N0ID0gZnVuY3Rpb24gd2l0aGluSG9zdChhY3RpdmVFbGVtZW50LCB3b3JraW5nQXJlYSkge1xuICByZXR1cm4gd29ya2luZ0FyZWEuc29tZShmdW5jdGlvbiAoYXJlYSkge1xuICAgIHJldHVybiBjaGVja0luSG9zdChhY3RpdmVFbGVtZW50LCBhcmVhLCBhcmVhKTtcbiAgfSk7XG59O1xudmFyIGFjdGl2YXRlVHJhcCA9IGZ1bmN0aW9uIGFjdGl2YXRlVHJhcCgpIHtcbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAobGFzdEFjdGl2ZVRyYXApIHtcbiAgICB2YXIgX2xhc3RBY3RpdmVUcmFwID0gbGFzdEFjdGl2ZVRyYXAsXG4gICAgICBvYnNlcnZlZCA9IF9sYXN0QWN0aXZlVHJhcC5vYnNlcnZlZCxcbiAgICAgIHBlcnNpc3RlbnRGb2N1cyA9IF9sYXN0QWN0aXZlVHJhcC5wZXJzaXN0ZW50Rm9jdXMsXG4gICAgICBhdXRvRm9jdXMgPSBfbGFzdEFjdGl2ZVRyYXAuYXV0b0ZvY3VzLFxuICAgICAgc2hhcmRzID0gX2xhc3RBY3RpdmVUcmFwLnNoYXJkcyxcbiAgICAgIGNyb3NzRnJhbWUgPSBfbGFzdEFjdGl2ZVRyYXAuY3Jvc3NGcmFtZSxcbiAgICAgIGZvY3VzT3B0aW9ucyA9IF9sYXN0QWN0aXZlVHJhcC5mb2N1c09wdGlvbnM7XG4gICAgdmFyIHdvcmtpbmdOb2RlID0gb2JzZXJ2ZWQgfHwgbGFzdFBvcnRhbGVkRWxlbWVudCAmJiBsYXN0UG9ydGFsZWRFbGVtZW50LnBvcnRhbGVkRWxlbWVudDtcbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKHdvcmtpbmdOb2RlKSB7XG4gICAgICB2YXIgd29ya2luZ0FyZWEgPSBbd29ya2luZ05vZGVdLmNvbmNhdChzaGFyZHMubWFwKGV4dHJhY3RSZWYpLmZpbHRlcihCb29sZWFuKSk7XG4gICAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgZm9jdXNXaGl0ZWxpc3RlZChhY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBpZiAocGVyc2lzdGVudEZvY3VzIHx8IGZvY3VzV2FzT3V0c2lkZShjcm9zc0ZyYW1lKSB8fCAhaXNGcmVlRm9jdXMoKSB8fCAhbGFzdEFjdGl2ZUZvY3VzICYmIGF1dG9Gb2N1cykge1xuICAgICAgICAgIGlmICh3b3JraW5nTm9kZSAmJiAhKGZvY3VzSW5zaWRlKHdvcmtpbmdBcmVhKSB8fCBhY3RpdmVFbGVtZW50ICYmIHdpdGhpbkhvc3QoYWN0aXZlRWxlbWVudCwgd29ya2luZ0FyZWEpIHx8IGZvY3VzSXNQb3J0YWxlZFBhaXIoYWN0aXZlRWxlbWVudCwgd29ya2luZ05vZGUpKSkge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50ICYmICFsYXN0QWN0aXZlRm9jdXMgJiYgYWN0aXZlRWxlbWVudCAmJiAhYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50LmJsdXIpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQgPSBtb3ZlRm9jdXNJbnNpZGUod29ya2luZ0FyZWEsIGxhc3RBY3RpdmVGb2N1cywge1xuICAgICAgICAgICAgICAgIGZvY3VzT3B0aW9uczogZm9jdXNPcHRpb25zXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBsYXN0UG9ydGFsZWRFbGVtZW50ID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvY3VzV2FzT3V0c2lkZVdpbmRvdyA9IGZhbHNlO1xuICAgICAgICAgIGxhc3RBY3RpdmVGb2N1cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudCAmJiBhY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWZvY3VzLWF1dG8tZ3VhcmRdJykpIHtcbiAgICAgICAgdmFyIG5ld0FjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgICB2YXIgYWxsTm9kZXMgPSBleHBhbmRGb2N1c2FibGVOb2Rlcyh3b3JraW5nQXJlYSk7XG4gICAgICAgIHZhciBmb2N1c2VkSW5kZXggPSBhbGxOb2Rlcy5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9yZWYubm9kZTtcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSkuaW5kZXhPZihuZXdBY3RpdmVFbGVtZW50KTtcbiAgICAgICAgaWYgKGZvY3VzZWRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgYWxsTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIGd1YXJkID0gX3JlZjIuZ3VhcmQsXG4gICAgICAgICAgICAgIG5vZGUgPSBfcmVmMi5ub2RlO1xuICAgICAgICAgICAgcmV0dXJuIGd1YXJkICYmIG5vZGUuZGF0YXNldC5mb2N1c0F1dG9HdWFyZDtcbiAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBfcmVmMy5ub2RlO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUucmVtb3ZlQXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGF1dG9HdWFyZChmb2N1c2VkSW5kZXgsIGFsbE5vZGVzLmxlbmd0aCwgKzEsIGFsbE5vZGVzKTtcbiAgICAgICAgICBhdXRvR3VhcmQoZm9jdXNlZEluZGV4LCAtMSwgLTEsIGFsbE5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBvblRyYXAgPSBmdW5jdGlvbiBvblRyYXAoZXZlbnQpIHtcbiAgaWYgKGFjdGl2YXRlVHJhcCgpICYmIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcbnZhciBvbkJsdXIgPSBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gIHJldHVybiBkZWZlckFjdGlvbihhY3RpdmF0ZVRyYXApO1xufTtcbnZhciBvbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cyhldmVudCkge1xuICB2YXIgc291cmNlID0gZXZlbnQudGFyZ2V0O1xuICB2YXIgY3VycmVudE5vZGUgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICBpZiAoIWN1cnJlbnROb2RlLmNvbnRhaW5zKHNvdXJjZSkpIHtcbiAgICByZWNvcmRQb3J0YWwoY3VycmVudE5vZGUsIHNvdXJjZSk7XG4gIH1cbn07XG52YXIgRm9jdXNXYXRjaGVyID0gZnVuY3Rpb24gRm9jdXNXYXRjaGVyKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG52YXIgRm9jdXNUcmFwID0gZnVuY3Rpb24gRm9jdXNUcmFwKF9yZWY0KSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWY0LmNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uRm9jdXM6IG9uRm9jdXNcbiAgfSwgY2hpbGRyZW4pO1xufTtcbkZvY3VzVHJhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkXG59IDoge307XG52YXIgb25XaW5kb3dCbHVyID0gZnVuY3Rpb24gb25XaW5kb3dCbHVyKCkge1xuICBmb2N1c1dhc091dHNpZGVXaW5kb3cgPSAnanVzdCc7XG4gIGRlZmVyQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBmb2N1c1dhc091dHNpZGVXaW5kb3cgPSAnbWVhbndoaWxlJztcbiAgfSk7XG59O1xudmFyIGF0dGFjaEhhbmRsZXIgPSBmdW5jdGlvbiBhdHRhY2hIYW5kbGVyKCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25UcmFwKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBvbkJsdXIpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uV2luZG93Qmx1cik7XG59O1xudmFyIGRldGFjaEhhbmRsZXIgPSBmdW5jdGlvbiBkZXRhY2hIYW5kbGVyKCkge1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25UcmFwKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBvbkJsdXIpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uV2luZG93Qmx1cik7XG59O1xuZnVuY3Rpb24gcmVkdWNlUHJvcHNUb1N0YXRlKHByb3BzTGlzdCkge1xuICByZXR1cm4gcHJvcHNMaXN0LmZpbHRlcihmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICB2YXIgZGlzYWJsZWQgPSBfcmVmNS5kaXNhYmxlZDtcbiAgICByZXR1cm4gIWRpc2FibGVkO1xuICB9KTtcbn1cbnZhciBmb2N1c0xvY2tBUEkgPSB7XG4gIG1vdmVGb2N1c0luc2lkZTogbW92ZUZvY3VzSW5zaWRlLFxuICBmb2N1c0luc2lkZTogZm9jdXNJbnNpZGUsXG4gIGZvY3VzTmV4dEVsZW1lbnQ6IGZvY3VzTmV4dEVsZW1lbnQsXG4gIGZvY3VzUHJldkVsZW1lbnQ6IGZvY3VzUHJldkVsZW1lbnQsXG4gIGZvY3VzRmlyc3RFbGVtZW50OiBmb2N1c0ZpcnN0RWxlbWVudCxcbiAgZm9jdXNMYXN0RWxlbWVudDogZm9jdXNMYXN0RWxlbWVudCxcbiAgY2FwdHVyZUZvY3VzUmVzdG9yZTogY2FwdHVyZUZvY3VzUmVzdG9yZVxufTtcbmZ1bmN0aW9uIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQodHJhcHMpIHtcbiAgdmFyIHRyYXAgPSB0cmFwcy5zbGljZSgtMSlbMF07XG4gIGlmICh0cmFwICYmICFsYXN0QWN0aXZlVHJhcCkge1xuICAgIGF0dGFjaEhhbmRsZXIoKTtcbiAgfVxuICB2YXIgbGFzdFRyYXAgPSBsYXN0QWN0aXZlVHJhcDtcbiAgdmFyIHNhbWVUcmFwID0gbGFzdFRyYXAgJiYgdHJhcCAmJiB0cmFwLmlkID09PSBsYXN0VHJhcC5pZDtcbiAgbGFzdEFjdGl2ZVRyYXAgPSB0cmFwO1xuICBpZiAobGFzdFRyYXAgJiYgIXNhbWVUcmFwKSB7XG4gICAgbGFzdFRyYXAub25EZWFjdGl2YXRpb24oKTtcbiAgICBpZiAoIXRyYXBzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgIHZhciBpZCA9IF9yZWY2LmlkO1xuICAgICAgcmV0dXJuIGlkID09PSBsYXN0VHJhcC5pZDtcbiAgICB9KS5sZW5ndGgpIHtcbiAgICAgIGxhc3RUcmFwLnJldHVybkZvY3VzKCF0cmFwKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRyYXApIHtcbiAgICBsYXN0QWN0aXZlRm9jdXMgPSBudWxsO1xuICAgIGlmICghc2FtZVRyYXAgfHwgbGFzdFRyYXAub2JzZXJ2ZWQgIT09IHRyYXAub2JzZXJ2ZWQpIHtcbiAgICAgIHRyYXAub25BY3RpdmF0aW9uKGZvY3VzTG9ja0FQSSk7XG4gICAgfVxuICAgIGFjdGl2YXRlVHJhcCh0cnVlKTtcbiAgICBkZWZlckFjdGlvbihhY3RpdmF0ZVRyYXApO1xuICB9IGVsc2Uge1xuICAgIGRldGFjaEhhbmRsZXIoKTtcbiAgICBsYXN0QWN0aXZlRm9jdXMgPSBudWxsO1xuICB9XG59XG5tZWRpdW1Gb2N1cy5hc3NpZ25TeW5jTWVkaXVtKG9uRm9jdXMpO1xubWVkaXVtQmx1ci5hc3NpZ25NZWRpdW0ob25CbHVyKTtcbm1lZGl1bUVmZmVjdC5hc3NpZ25NZWRpdW0oZnVuY3Rpb24gKGNiKSB7XG4gIHJldHVybiBjYihmb2N1c0xvY2tBUEkpO1xufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoU2lkZUVmZmVjdChyZWR1Y2VQcm9wc1RvU3RhdGUsIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQpKEZvY3VzV2F0Y2hlcik7IiwiaW1wb3J0IHsgRk9DVVNfQUxMT1cgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjb250YWlucyB9IGZyb20gJy4vdXRpbHMvRE9NdXRpbHMnO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdXRpbHMvYXJyYXknO1xuaW1wb3J0IHsgZ2V0QWN0aXZlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZ2V0QWN0aXZlRWxlbWVudCc7XG4vKipcbiAqIGNoZWNrcyBpZiBmb2N1cyBpcyBoaWRkZW4gRlJPTSB0aGUgZm9jdXMtbG9ja1xuICogaWUgY29udGFpbmVkIGluc2lkZSBhIG5vZGUgZm9jdXMtbG9jayBzaGFsbCBpZ25vcmVcbiAqXG4gKiBUaGlzIGlzIGEgdXRpbGl0eSBmdW5jdGlvbiBjb3VwbGVkIHdpdGgge0BsaW5rIEZPQ1VTX0FMTE9XfSBjb25zdGFudFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBmb2N1cyBpcyBjdXJyZW50bHkgaXMgaW4gXCJhbGxvd1wiIGFyZWFcbiAqL1xuZXhwb3J0IHZhciBmb2N1c0lzSGlkZGVuID0gZnVuY3Rpb24gKGluRG9jdW1lbnQpIHtcbiAgICBpZiAoaW5Eb2N1bWVudCA9PT0gdm9pZCAwKSB7IGluRG9jdW1lbnQgPSBkb2N1bWVudDsgfVxuICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudChpbkRvY3VtZW50KTtcbiAgICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyB0aGlzIGRvZXMgbm90IHN1cHBvcnQgc2V0dGluZyBGT0NVU19BTExPVyB3aXRoaW4gc2hhZG93IGRvbVxuICAgIHJldHVybiB0b0FycmF5KGluRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltcIi5jb25jYXQoRk9DVVNfQUxMT1csIFwiXVwiKSkpLnNvbWUoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGNvbnRhaW5zKG5vZGUsIGFjdGl2ZUVsZW1lbnQpOyB9KTtcbn07XG4iLCJpbXBvcnQgeyBnZXRBbGxBZmZlY3RlZE5vZGVzIH0gZnJvbSAnLi91dGlscy9hbGwtYWZmZWN0ZWQnO1xuaW1wb3J0IHsgaXNHdWFyZCwgaXNOb3RBR3VhcmQgfSBmcm9tICcuL3V0aWxzL2lzJztcbmltcG9ydCB7IGdldFRvcENvbW1vblBhcmVudCB9IGZyb20gJy4vdXRpbHMvcGFyZW50aW5nJztcbmltcG9ydCB7IG9yZGVyQnlUYWJJbmRleCB9IGZyb20gJy4vdXRpbHMvdGFiT3JkZXInO1xuaW1wb3J0IHsgZ2V0Rm9jdXNhYmxlcyB9IGZyb20gJy4vdXRpbHMvdGFiVXRpbHMnO1xuLyoqXG4gKiB0cmF2ZXJzZXMgYWxsIHJlbGF0ZWQgbm9kZXMgKGluY2x1ZGluZyBncm91cHMpIHJldHVybmluZyBhIGxpc3Qgb2YgYWxsIG5vZGVzKG91dGVyIGFuZCBpbnRlcm5hbCkgd2l0aCBtZXRhIGluZm9ybWF0aW9uXG4gKiBUaGlzIGlzIGxvdy1sZXZlbCBBUEkhXG4gKiBAcmV0dXJucyBsaXN0IG9mIGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgYSBnaXZlbiB0b3AoISkgbm9kZS5cbiAqIEBzZWUge0BsaW5rIGdldEZvY3VzYWJsZU5vZGVzfSBwcm92aWRpbmcgYSBzaW1wbGVyIEFQSVxuICovXG5leHBvcnQgdmFyIGV4cGFuZEZvY3VzYWJsZU5vZGVzID0gZnVuY3Rpb24gKHRvcE5vZGUpIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEFsbEFmZmVjdGVkTm9kZXModG9wTm9kZSkuZmlsdGVyKGlzTm90QUd1YXJkKTtcbiAgICB2YXIgY29tbW9uUGFyZW50ID0gZ2V0VG9wQ29tbW9uUGFyZW50KHRvcE5vZGUsIHRvcE5vZGUsIGVudHJpZXMpO1xuICAgIHZhciBvdXRlck5vZGVzID0gb3JkZXJCeVRhYkluZGV4KGdldEZvY3VzYWJsZXMoW2NvbW1vblBhcmVudF0sIHRydWUpLCB0cnVlLCB0cnVlKTtcbiAgICB2YXIgaW5uZXJFbGVtZW50cyA9IGdldEZvY3VzYWJsZXMoZW50cmllcywgZmFsc2UpO1xuICAgIHJldHVybiBvdXRlck5vZGVzLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfYS5ub2RlLCBpbmRleCA9IF9hLmluZGV4O1xuICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICBsb2NrSXRlbTogaW5uZXJFbGVtZW50cy5pbmRleE9mKG5vZGUpID49IDAsXG4gICAgICAgICAgICBndWFyZDogaXNHdWFyZChub2RlKSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb2N1c0xvY2tVSSBmcm9tICcuL0xvY2snO1xuaW1wb3J0IEZvY3VzVHJhcCBmcm9tICcuL1RyYXAnO1xudmFyIEZvY3VzTG9ja0NvbWJpbmF0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9jdXNMb2NrVUlDb21iaW5hdGlvbihwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c0xvY2tVSSwgX2V4dGVuZHMoe1xuICAgIHNpZGVDYXI6IEZvY3VzVHJhcCxcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcykpO1xufSk7XG52YXIgX3JlZiA9IEZvY3VzTG9ja1VJLnByb3BUeXBlcyB8fCB7fSxcbiAgc2lkZUNhciA9IF9yZWYuc2lkZUNhcixcbiAgcHJvcFR5cGVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wic2lkZUNhclwiXSk7XG5Gb2N1c0xvY2tDb21iaW5hdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbmV4cG9ydCBkZWZhdWx0IEZvY3VzTG9ja0NvbWJpbmF0aW9uOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICdmb2N1cy1sb2NrL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpbmxpbmVQcm9wIH0gZnJvbSAnLi91dGlsJztcbnZhciBBdXRvRm9jdXNJbnNpZGUgPSBmdW5jdGlvbiBBdXRvRm9jdXNJbnNpZGUoX3JlZikge1xuICB2YXIgX3JlZiRkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgZGlzYWJsZWQgPSBfcmVmJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGlzYWJsZWQsXG4gICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkY2xhc3NOYW1lO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGlubGluZVByb3AoY29uc3RhbnRzLkZPQ1VTX0FVVE8sICFkaXNhYmxlZCksIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9KSwgY2hpbGRyZW4pO1xufTtcbkF1dG9Gb2N1c0luc2lkZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQXV0b0ZvY3VzSW5zaWRlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICdmb2N1cy1sb2NrL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpbmxpbmVQcm9wIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IG1lZGl1bUVmZmVjdCB9IGZyb20gJy4vbWVkaXVtJztcbmV4cG9ydCB2YXIgdXNlRm9jdXNJbnNpZGUgPSBmdW5jdGlvbiB1c2VGb2N1c0luc2lkZShvYnNlcnZlZFJlZikge1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbmFibGVkID0gdHJ1ZTtcbiAgICBtZWRpdW1FZmZlY3QudXNlTWVkaXVtKGZ1bmN0aW9uIChjYXIpIHtcbiAgICAgIHZhciBvYnNlcnZlZCA9IG9ic2VydmVkUmVmICYmIG9ic2VydmVkUmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoZW5hYmxlZCAmJiBvYnNlcnZlZCkge1xuICAgICAgICBpZiAoIWNhci5mb2N1c0luc2lkZShvYnNlcnZlZCkpIHtcbiAgICAgICAgICBjYXIubW92ZUZvY3VzSW5zaWRlKG9ic2VydmVkLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW29ic2VydmVkUmVmXSk7XG59O1xuZnVuY3Rpb24gTW92ZUZvY3VzSW5zaWRlKF9yZWYpIHtcbiAgdmFyIF9yZWYkZGlzYWJsZWQgPSBfcmVmLmRpc2FibGVkLFxuICAgIGlzRGlzYWJsZWQgPSBfcmVmJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGlzYWJsZWQsXG4gICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB1c2VGb2N1c0luc2lkZShpc0Rpc2FibGVkID8gdW5kZWZpbmVkIDogcmVmKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBpbmxpbmVQcm9wKGNvbnN0YW50cy5GT0NVU19BVVRPLCAhaXNEaXNhYmxlZCksIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9KSwgY2hpbGRyZW4pO1xufVxuTW92ZUZvY3VzSW5zaWRlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBNb3ZlRm9jdXNJbnNpZGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gJ2ZvY3VzLWxvY2svY29uc3RhbnRzJztcbmltcG9ydCB7IGlubGluZVByb3AgfSBmcm9tICcuL3V0aWwnO1xudmFyIEZyZWVGb2N1c0luc2lkZSA9IGZ1bmN0aW9uIEZyZWVGb2N1c0luc2lkZShfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5saW5lUHJvcChjb25zdGFudHMuRk9DVVNfQUxMT1csIHRydWUpLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSksIGNoaWxkcmVuKTtcbn07XG5GcmVlRm9jdXNJbnNpZGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBGcmVlRm9jdXNJbnNpZGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmb2N1c1Njb3BlIH0gZnJvbSAnLi9zY29wZSc7XG5pbXBvcnQgeyBtZWRpdW1FZmZlY3QgfSBmcm9tICcuL21lZGl1bSc7XG5pbXBvcnQgeyBleHRyYWN0UmVmIH0gZnJvbSAnLi91dGlsJztcbnZhciBjb2xsYXBzZVJlZnMgPSBmdW5jdGlvbiBjb2xsYXBzZVJlZnMoc2hhcmRzKSB7XG4gIHJldHVybiBzaGFyZHMubWFwKGV4dHJhY3RSZWYpLmZpbHRlcihCb29sZWFuKTtcbn07XG52YXIgd2l0aE1lZGl1bSA9IGZ1bmN0aW9uIHdpdGhNZWRpdW0oZm4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgcmV0dXJuIG1lZGl1bUVmZmVjdC51c2VNZWRpdW0oZnVuY3Rpb24gKCkge1xuICAgICAgcmVzb2x2ZShmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH0pO1xuICB9KTtcbn07XG5leHBvcnQgdmFyIHVzZUZvY3VzQ29udHJvbGxlciA9IGZ1bmN0aW9uIHVzZUZvY3VzQ29udHJvbGxlcigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNoYXJkcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzaGFyZHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgaWYgKCFzaGFyZHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VGb2N1c0NvbnRyb2xsZXIgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIHRhcmdldCBlbGVtZW50Jyk7XG4gIH1cbiAgdmFyIHJlZiA9IHVzZVJlZihzaGFyZHMpO1xuICByZWYuY3VycmVudCA9IHNoYXJkcztcbiAgcmV0dXJuIHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdXRvRm9jdXM6IGZ1bmN0aW9uIGF1dG9Gb2N1cyhmb2N1c09wdGlvbnMpIHtcbiAgICAgICAgaWYgKGZvY3VzT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZm9jdXNPcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpdGhNZWRpdW0oZnVuY3Rpb24gKGNhcikge1xuICAgICAgICAgIHJldHVybiBjYXIubW92ZUZvY3VzSW5zaWRlKGNvbGxhcHNlUmVmcyhyZWYuY3VycmVudCksIG51bGwsIGZvY3VzT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvY3VzTmV4dDogZnVuY3Rpb24gZm9jdXNOZXh0KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhNZWRpdW0oZnVuY3Rpb24gKGNhcikge1xuICAgICAgICAgIGNhci5tb3ZlRm9jdXNJbnNpZGUoY29sbGFwc2VSZWZzKHJlZi5jdXJyZW50KSwgbnVsbCk7XG4gICAgICAgICAgY2FyLmZvY3VzTmV4dEVsZW1lbnQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgX2V4dGVuZHMoe1xuICAgICAgICAgICAgc2NvcGU6IGNvbGxhcHNlUmVmcyhyZWYuY3VycmVudClcbiAgICAgICAgICB9LCBvcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvY3VzUHJldjogZnVuY3Rpb24gZm9jdXNQcmV2KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhNZWRpdW0oZnVuY3Rpb24gKGNhcikge1xuICAgICAgICAgIGNhci5tb3ZlRm9jdXNJbnNpZGUoY29sbGFwc2VSZWZzKHJlZi5jdXJyZW50KSwgbnVsbCk7XG4gICAgICAgICAgY2FyLmZvY3VzUHJldkVsZW1lbnQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgX2V4dGVuZHMoe1xuICAgICAgICAgICAgc2NvcGU6IGNvbGxhcHNlUmVmcyhyZWYuY3VycmVudClcbiAgICAgICAgICB9LCBvcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvY3VzRmlyc3Q6IGZ1bmN0aW9uIGZvY3VzRmlyc3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gd2l0aE1lZGl1bShmdW5jdGlvbiAoY2FyKSB7XG4gICAgICAgICAgY2FyLmZvY3VzRmlyc3RFbGVtZW50KGNvbGxhcHNlUmVmcyhyZWYuY3VycmVudCksIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmb2N1c0xhc3Q6IGZ1bmN0aW9uIGZvY3VzTGFzdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB3aXRoTWVkaXVtKGZ1bmN0aW9uIChjYXIpIHtcbiAgICAgICAgICBjYXIuZm9jdXNMYXN0RWxlbWVudChjb2xsYXBzZVJlZnMocmVmLmN1cnJlbnQpLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xufTtcbmV4cG9ydCB2YXIgdXNlRm9jdXNTY29wZSA9IGZ1bmN0aW9uIHVzZUZvY3VzU2NvcGUoKSB7XG4gIHZhciBzY29wZSA9IHVzZUNvbnRleHQoZm9jdXNTY29wZSk7XG4gIGlmICghc2NvcGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvY3VzTG9jayBpcyByZXF1aXJlZCB0byBvcGVyYXRlIHdpdGggRm9jdXNTY29wZScpO1xuICB9XG4gIHJldHVybiB1c2VGb2N1c0NvbnRyb2xsZXIuYXBwbHkodm9pZCAwLCBbc2NvcGUub2JzZXJ2ZWRdLmNvbmNhdChzY29wZS5zaGFyZHMpKTtcbn07IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZU5hbm9FdmVudHMgfSBmcm9tICcuL25hbm8tZXZlbnRzJztcbnZhciBtYWluYnVzID0gY3JlYXRlTmFub0V2ZW50cygpO1xudmFyIHN1YnNjcmliZUNvdW50ZXIgPSAwO1xudmFyIG9uRm9jdXNJbiA9IGZ1bmN0aW9uIG9uRm9jdXNJbihldmVudCkge1xuICByZXR1cm4gbWFpbmJ1cy5lbWl0KCdhc3NpZ24nLCBldmVudC50YXJnZXQpO1xufTtcbnZhciBvbkZvY3VzT3V0ID0gZnVuY3Rpb24gb25Gb2N1c091dChldmVudCkge1xuICByZXR1cm4gbWFpbmJ1cy5lbWl0KCdyZXNldCcsIGV2ZW50LnRhcmdldCk7XG59O1xudmFyIHVzZURvY3VtZW50Rm9jdXNTdWJzY3JpYmUgPSBmdW5jdGlvbiB1c2VEb2N1bWVudEZvY3VzU3Vic2NyaWJlKCkge1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3Vic2NyaWJlQ291bnRlcikge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIG9uRm9jdXNJbik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uRm9jdXNPdXQpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVDb3VudGVyICs9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmliZUNvdW50ZXIgLT0gMTtcbiAgICAgIGlmICghc3Vic2NyaWJlQ291bnRlcikge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25Gb2N1c0luKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBvbkZvY3VzT3V0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG59O1xudmFyIGdldEZvY3VzU3RhdGUgPSBmdW5jdGlvbiBnZXRGb2N1c1N0YXRlKHRhcmdldCwgY3VycmVudCkge1xuICBpZiAodGFyZ2V0ID09PSBjdXJyZW50KSB7XG4gICAgcmV0dXJuICdzZWxmJztcbiAgfVxuICBpZiAoY3VycmVudC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgcmV0dXJuICd3aXRoaW4nO1xuICB9XG4gIHJldHVybiAnd2l0aGluLWJvdW5kYXJ5Jztcbn07XG5leHBvcnQgdmFyIHVzZUZvY3VzU3RhdGUgPSBmdW5jdGlvbiB1c2VGb2N1c1N0YXRlKGNhbGxiYWNrcykge1xuICBpZiAoY2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBjYWxsYmFja3MgPSB7fTtcbiAgfVxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgIGFjdGl2ZSA9IF91c2VTdGF0ZVswXSxcbiAgICBzZXRBY3RpdmUgPSBfdXNlU3RhdGVbMV07XG4gIHZhciBfdXNlU3RhdGUyID0gdXNlU3RhdGUoJycpLFxuICAgIHN0YXRlID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRTdGF0ZSA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciByZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBmb2N1c1N0YXRlID0gdXNlUmVmKHt9KTtcbiAgdmFyIHN0YXRlVHJhY2tlciA9IHVzZVJlZihmYWxzZSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgaXNBbHJlYWR5Rm9jdXNlZCA9IHJlZi5jdXJyZW50ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IHJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgc2V0QWN0aXZlKGlzQWxyZWFkeUZvY3VzZWQpO1xuICAgICAgc2V0U3RhdGUoZ2V0Rm9jdXNTdGF0ZShkb2N1bWVudC5hY3RpdmVFbGVtZW50LCByZWYuY3VycmVudCkpO1xuICAgICAgaWYgKGlzQWxyZWFkeUZvY3VzZWQgJiYgY2FsbGJhY2tzLm9uRm9jdXMpIHtcbiAgICAgICAgY2FsbGJhY2tzLm9uRm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKTtcbiAgdmFyIG9uRm9jdXMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZSkge1xuICAgIGZvY3VzU3RhdGUuY3VycmVudCA9IHtcbiAgICAgIGZvY3VzZWQ6IHRydWUsXG4gICAgICBzdGF0ZTogZ2V0Rm9jdXNTdGF0ZShlLnRhcmdldCwgZS5jdXJyZW50VGFyZ2V0KVxuICAgIH07XG4gIH0sIFtdKTtcbiAgdXNlRG9jdW1lbnRGb2N1c1N1YnNjcmliZSgpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBmb3V0ID0gbWFpbmJ1cy5vbigncmVzZXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb2N1c1N0YXRlLmN1cnJlbnQgPSB7fTtcbiAgICB9KTtcbiAgICB2YXIgZmluID0gbWFpbmJ1cy5vbignYXNzaWduJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5ld1N0YXRlID0gZm9jdXNTdGF0ZS5jdXJyZW50LmZvY3VzZWQgfHwgZmFsc2U7XG4gICAgICBzZXRBY3RpdmUobmV3U3RhdGUpO1xuICAgICAgc2V0U3RhdGUoZm9jdXNTdGF0ZS5jdXJyZW50LnN0YXRlIHx8ICcnKTtcbiAgICAgIGlmIChuZXdTdGF0ZSAhPT0gc3RhdGVUcmFja2VyLmN1cnJlbnQpIHtcbiAgICAgICAgc3RhdGVUcmFja2VyLmN1cnJlbnQgPSBuZXdTdGF0ZTtcbiAgICAgICAgaWYgKG5ld1N0YXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2tzLm9uRm9jdXMgJiYgY2FsbGJhY2tzLm9uRm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFja3Mub25CbHVyICYmIGNhbGxiYWNrcy5vbkJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3V0KCk7XG4gICAgICBmaW4oKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgcmVmOiByZWZcbiAgfTtcbn07IiwiZXhwb3J0IHZhciBjcmVhdGVOYW5vRXZlbnRzID0gZnVuY3Rpb24gY3JlYXRlTmFub0V2ZW50cygpIHtcbiAgcmV0dXJuIHtcbiAgICBlbWl0OiBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNhbGxiYWNrcyA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXSwgbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5hcHBseShjYWxsYmFja3MsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXZlbnRzOiB7fSxcbiAgICBvbjogZnVuY3Rpb24gb24oZXZlbnQsIGNiKSB7XG4gICAgICB2YXIgX3RoaXMkZXZlbnRzLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICAoKF90aGlzJGV2ZW50cyA9IHRoaXMuZXZlbnRzKVtldmVudF0gfHwgKF90aGlzJGV2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goY2IpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJGV2ZW50cyRldmVudDtcbiAgICAgICAgX3RoaXMuZXZlbnRzW2V2ZW50XSA9IChfdGhpcyRldmVudHMkZXZlbnQgPSBfdGhpcy5ldmVudHNbZXZlbnRdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkZXZlbnRzJGV2ZW50LmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBjYiAhPT0gaTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IiwiaW1wb3J0IEZvY3VzTG9ja1VJIGZyb20gJy4vTG9jayc7XG5pbXBvcnQgQXV0b0ZvY3VzSW5zaWRlIGZyb20gJy4vQXV0b0ZvY3VzSW5zaWRlJztcbmltcG9ydCBNb3ZlRm9jdXNJbnNpZGUsIHsgdXNlRm9jdXNJbnNpZGUgfSBmcm9tICcuL01vdmVGb2N1c0luc2lkZSc7XG5pbXBvcnQgRnJlZUZvY3VzSW5zaWRlIGZyb20gJy4vRnJlZUZvY3VzSW5zaWRlJztcbmltcG9ydCBJbkZvY3VzR3VhcmQgZnJvbSAnLi9Gb2N1c0d1YXJkJztcbmltcG9ydCB7IHVzZUZvY3VzQ29udHJvbGxlciwgdXNlRm9jdXNTY29wZSB9IGZyb20gJy4vdXNlLWZvY3VzLXNjb3BlJztcbmltcG9ydCB7IHVzZUZvY3VzU3RhdGUgfSBmcm9tICcuL3VzZS1mb2N1cy1zdGF0ZSc7XG5leHBvcnQgeyBBdXRvRm9jdXNJbnNpZGUsIE1vdmVGb2N1c0luc2lkZSwgRnJlZUZvY3VzSW5zaWRlLCBJbkZvY3VzR3VhcmQsIEZvY3VzTG9ja1VJLCB1c2VGb2N1c0luc2lkZSwgdXNlRm9jdXNDb250cm9sbGVyLCB1c2VGb2N1c1Njb3BlLCB1c2VGb2N1c1N0YXRlIH07XG5leHBvcnQgZGVmYXVsdCBGb2N1c0xvY2tVSTsiLCJpbXBvcnQgRm9jdXNMb2NrIGZyb20gJy4vQ29tYmluYXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9VSSc7XG5leHBvcnQgZGVmYXVsdCBGb2N1c0xvY2s7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2luZGV4LmpzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfbWljcm9waG9uZSA9IHJlcXVpcmUoJy4vbWljcm9waG9uZScpO1xuXG52YXIgX21pY3JvcGhvbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWljcm9waG9uZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICBuRnJlcXVlbmN5QmFyczogMjU1LFxuICBvbkFuYWx5c2VkOiBudWxsXG59O1xuXG52YXIgUmVjb3JkZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlY29yZGVyKGF1ZGlvQ29udGV4dCkge1xuICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlY29yZGVyKTtcblxuICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgY29uZmlnKTtcblxuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0O1xuICAgIHRoaXMuYXVkaW9JbnB1dCA9IG51bGw7XG4gICAgdGhpcy5yZWFsQXVkaW9JbnB1dCA9IG51bGw7XG4gICAgdGhpcy5pbnB1dFBvaW50ID0gbnVsbDtcbiAgICB0aGlzLmF1ZGlvUmVjb3JkZXIgPSBudWxsO1xuICAgIHRoaXMucmFmSUQgPSBudWxsO1xuICAgIHRoaXMuYW5hbHlzZXJDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLnJlY0luZGV4ID0gMDtcbiAgICB0aGlzLnN0cmVhbSA9IG51bGw7XG5cbiAgICB0aGlzLnVwZGF0ZUFuYWx5c2VycyA9IHRoaXMudXBkYXRlQW5hbHlzZXJzLmJpbmQodGhpcyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVjb3JkZXIsIFt7XG4gICAga2V5OiAnaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoc3RyZWFtKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgX3RoaXMuaW5wdXRQb2ludCA9IF90aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG5cbiAgICAgICAgX3RoaXMuc3RyZWFtID0gc3RyZWFtO1xuXG4gICAgICAgIF90aGlzLnJlYWxBdWRpb0lucHV0ID0gX3RoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG4gICAgICAgIF90aGlzLmF1ZGlvSW5wdXQgPSBfdGhpcy5yZWFsQXVkaW9JbnB1dDtcbiAgICAgICAgX3RoaXMuYXVkaW9JbnB1dC5jb25uZWN0KF90aGlzLmlucHV0UG9pbnQpO1xuXG4gICAgICAgIF90aGlzLmFuYWx5c2VyTm9kZSA9IF90aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVBbmFseXNlcigpO1xuICAgICAgICBfdGhpcy5hbmFseXNlck5vZGUuZmZ0U2l6ZSA9IDIwNDg7XG4gICAgICAgIF90aGlzLmlucHV0UG9pbnQuY29ubmVjdChfdGhpcy5hbmFseXNlck5vZGUpO1xuXG4gICAgICAgIF90aGlzLmF1ZGlvUmVjb3JkZXIgPSBuZXcgX21pY3JvcGhvbmUyLmRlZmF1bHQoX3RoaXMuaW5wdXRQb2ludCk7XG5cbiAgICAgICAgdmFyIHplcm9HYWluID0gX3RoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgemVyb0dhaW4uZ2Fpbi52YWx1ZSA9IDAuMDtcblxuICAgICAgICBfdGhpcy5pbnB1dFBvaW50LmNvbm5lY3QoemVyb0dhaW4pO1xuICAgICAgICB6ZXJvR2Fpbi5jb25uZWN0KF90aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG5cbiAgICAgICAgX3RoaXMudXBkYXRlQW5hbHlzZXJzKCk7XG5cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoIV90aGlzMi5hdWRpb1JlY29yZGVyKSB7XG4gICAgICAgICAgcmVqZWN0KCdOb3QgY3VycmVudGx5IHJlY29yZGluZycpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5hdWRpb1JlY29yZGVyLmNsZWFyKCk7XG4gICAgICAgIF90aGlzMi5hdWRpb1JlY29yZGVyLnJlY29yZCgpO1xuXG4gICAgICAgIHJlc29sdmUoX3RoaXMyLnN0cmVhbSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgX3RoaXMzLmF1ZGlvUmVjb3JkZXIuc3RvcCgpO1xuXG4gICAgICAgIF90aGlzMy5hdWRpb1JlY29yZGVyLmdldEJ1ZmZlcihmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgICAgX3RoaXMzLmF1ZGlvUmVjb3JkZXIuZXhwb3J0V0FWKGZ1bmN0aW9uIChibG9iKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IGJ1ZmZlcjogYnVmZmVyLCBibG9iOiBibG9iIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUFuYWx5c2VycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUFuYWx5c2VycygpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5vbkFuYWx5c2VkKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZUFuYWx5c2Vycyk7XG5cbiAgICAgICAgdmFyIGZyZXFCeXRlRGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuYW5hbHlzZXJOb2RlLmZyZXF1ZW5jeUJpbkNvdW50KTtcblxuICAgICAgICB0aGlzLmFuYWx5c2VyTm9kZS5nZXRCeXRlRnJlcXVlbmN5RGF0YShmcmVxQnl0ZURhdGEpO1xuXG4gICAgICAgIHZhciBkYXRhID0gbmV3IEFycmF5KDI1NSk7XG4gICAgICAgIHZhciBsYXN0Tm9uWmVybyA9IDA7XG4gICAgICAgIHZhciBkYXR1bSA9IHZvaWQgMDtcblxuICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCAyNTU7IGlkeCArPSAxKSB7XG4gICAgICAgICAgZGF0dW0gPSBNYXRoLmZsb29yKGZyZXFCeXRlRGF0YVtpZHhdKSAtIE1hdGguZmxvb3IoZnJlcUJ5dGVEYXRhW2lkeF0pICUgNTtcblxuICAgICAgICAgIGlmIChkYXR1bSAhPT0gMCkge1xuICAgICAgICAgICAgbGFzdE5vblplcm8gPSBpZHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtpZHhdID0gZGF0dW07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmZpZy5vbkFuYWx5c2VkKHsgZGF0YTogZGF0YSwgbGluZVRvOiBsYXN0Tm9uWmVybyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRPbkFuYWx5c2VkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T25BbmFseXNlZChoYW5kbGVyKSB7XG4gICAgICB0aGlzLmNvbmZpZy5vbkFuYWx5c2VkID0gaGFuZGxlcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVjb3JkZXI7XG59KCk7XG5cblJlY29yZGVyLmRvd25sb2FkID0gZnVuY3Rpb24gZG93bmxvYWQoYmxvYikge1xuICB2YXIgZmlsZW5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdhdWRpbyc7XG5cbiAgX21pY3JvcGhvbmUyLmRlZmF1bHQuZm9yY2VEb3dubG9hZChibG9iLCBmaWxlbmFtZSArICcud2F2Jyk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWNvcmRlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7IC8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgwqkgMjAxMyBNYXR0IERpYW1vbmRcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLFxuICogdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvblxuICogdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsXG4gKiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTExcbiAqIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKlxuICovXG5cblxudmFyIF9pbmxpbmVXb3JrZXIgPSByZXF1aXJlKCdpbmxpbmUtd29ya2VyJyk7XG5cbnZhciBfaW5saW5lV29ya2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZVdvcmtlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICBidWZmZXJMZW46IDQwOTYsXG4gIG51bUNoYW5uZWxzOiAyLFxuICBtaW1lVHlwZTogJ2F1ZGlvL3dhdidcbn07XG5cbnZhciBNaWNyb3Bob25lID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNaWNyb3Bob25lKHNvdXJjZSwgY29uZmlnKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaWNyb3Bob25lKTtcblxuICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgY29uZmlnKTtcblxuICAgIHRoaXMucmVjb3JkaW5nID0gZmFsc2U7XG5cbiAgICB0aGlzLmNhbGxiYWNrcyA9IHtcbiAgICAgIGdldEJ1ZmZlcjogW10sXG4gICAgICBleHBvcnRXQVY6IFtdXG4gICAgfTtcblxuICAgIHRoaXMuY29udGV4dCA9IHNvdXJjZS5jb250ZXh0O1xuICAgIHRoaXMubm9kZSA9ICh0aGlzLmNvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yIHx8IHRoaXMuY29udGV4dC5jcmVhdGVKYXZhU2NyaXB0Tm9kZSkuY2FsbCh0aGlzLmNvbnRleHQsIHRoaXMuY29uZmlnLmJ1ZmZlckxlbiwgdGhpcy5jb25maWcubnVtQ2hhbm5lbHMsIHRoaXMuY29uZmlnLm51bUNoYW5uZWxzKTtcblxuICAgIHRoaXMubm9kZS5vbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnJlY29yZGluZykgcmV0dXJuO1xuXG4gICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICBmb3IgKHZhciBjaGFubmVsID0gMDsgY2hhbm5lbCA8IF90aGlzLmNvbmZpZy5udW1DaGFubmVsczsgY2hhbm5lbCsrKSB7XG4gICAgICAgIGJ1ZmZlci5wdXNoKGUuaW5wdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoY2hhbm5lbCkpO1xuICAgICAgfVxuICAgICAgX3RoaXMud29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgY29tbWFuZDogJ3JlY29yZCcsXG4gICAgICAgIGJ1ZmZlcjogYnVmZmVyXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc291cmNlLmNvbm5lY3QodGhpcy5ub2RlKTtcbiAgICB0aGlzLm5vZGUuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pOyAvL3RoaXMgc2hvdWxkIG5vdCBiZSBuZWNlc3NhcnlcblxuICAgIHZhciBzZWxmID0ge307XG4gICAgdGhpcy53b3JrZXIgPSBuZXcgX2lubGluZVdvcmtlcjIuZGVmYXVsdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVjTGVuZ3RoID0gMCxcbiAgICAgICAgICByZWNCdWZmZXJzID0gW10sXG4gICAgICAgICAgc2FtcGxlUmF0ZSA9IHZvaWQgMCxcbiAgICAgICAgICBudW1DaGFubmVscyA9IHZvaWQgMDtcblxuICAgICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBzd2l0Y2ggKGUuZGF0YS5jb21tYW5kKSB7XG4gICAgICAgICAgY2FzZSAnaW5pdCc6XG4gICAgICAgICAgICBpbml0KGUuZGF0YS5jb25maWcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmVjb3JkJzpcbiAgICAgICAgICAgIHJlY29yZChlLmRhdGEuYnVmZmVyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2V4cG9ydFdBVic6XG4gICAgICAgICAgICBleHBvcnRXQVYoZS5kYXRhLnR5cGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZ2V0QnVmZmVyJzpcbiAgICAgICAgICAgIGdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY2xlYXInOlxuICAgICAgICAgICAgY2xlYXIoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBpbml0KGNvbmZpZykge1xuICAgICAgICBzYW1wbGVSYXRlID0gY29uZmlnLnNhbXBsZVJhdGU7XG4gICAgICAgIG51bUNoYW5uZWxzID0gY29uZmlnLm51bUNoYW5uZWxzO1xuICAgICAgICBpbml0QnVmZmVycygpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWNvcmQoaW5wdXRCdWZmZXIpIHtcbiAgICAgICAgZm9yICh2YXIgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBudW1DaGFubmVsczsgY2hhbm5lbCsrKSB7XG4gICAgICAgICAgcmVjQnVmZmVyc1tjaGFubmVsXS5wdXNoKGlucHV0QnVmZmVyW2NoYW5uZWxdKTtcbiAgICAgICAgfVxuICAgICAgICByZWNMZW5ndGggKz0gaW5wdXRCdWZmZXJbMF0ubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBleHBvcnRXQVYodHlwZSkge1xuICAgICAgICB2YXIgYnVmZmVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBjaGFubmVsID0gMDsgY2hhbm5lbCA8IG51bUNoYW5uZWxzOyBjaGFubmVsKyspIHtcbiAgICAgICAgICBidWZmZXJzLnB1c2gobWVyZ2VCdWZmZXJzKHJlY0J1ZmZlcnNbY2hhbm5lbF0sIHJlY0xlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnRlcmxlYXZlZCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKG51bUNoYW5uZWxzID09PSAyKSB7XG4gICAgICAgICAgaW50ZXJsZWF2ZWQgPSBpbnRlcmxlYXZlKGJ1ZmZlcnNbMF0sIGJ1ZmZlcnNbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVybGVhdmVkID0gYnVmZmVyc1swXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YXZpZXcgPSBlbmNvZGVXQVYoaW50ZXJsZWF2ZWQpO1xuICAgICAgICB2YXIgYXVkaW9CbG9iID0gbmV3IEJsb2IoW2RhdGF2aWV3XSwgeyB0eXBlOiB0eXBlIH0pO1xuXG4gICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiAnZXhwb3J0V0FWJywgZGF0YTogYXVkaW9CbG9iIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gICAgICAgIHZhciBidWZmZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgbnVtQ2hhbm5lbHM7IGNoYW5uZWwrKykge1xuICAgICAgICAgIGJ1ZmZlcnMucHVzaChtZXJnZUJ1ZmZlcnMocmVjQnVmZmVyc1tjaGFubmVsXSwgcmVjTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3N0TWVzc2FnZSh7IGNvbW1hbmQ6ICdnZXRCdWZmZXInLCBkYXRhOiBidWZmZXJzIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgcmVjTGVuZ3RoID0gMDtcbiAgICAgICAgcmVjQnVmZmVycyA9IFtdO1xuICAgICAgICBpbml0QnVmZmVycygpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbml0QnVmZmVycygpIHtcbiAgICAgICAgZm9yICh2YXIgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBudW1DaGFubmVsczsgY2hhbm5lbCsrKSB7XG4gICAgICAgICAgcmVjQnVmZmVyc1tjaGFubmVsXSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlQnVmZmVycyhyZWNCdWZmZXJzLCByZWNMZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkocmVjTGVuZ3RoKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjQnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlc3VsdC5zZXQocmVjQnVmZmVyc1tpXSwgb2Zmc2V0KTtcbiAgICAgICAgICBvZmZzZXQgKz0gcmVjQnVmZmVyc1tpXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW50ZXJsZWF2ZShpbnB1dEwsIGlucHV0Uikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gaW5wdXRMLmxlbmd0aCArIGlucHV0Ui5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgIGlucHV0SW5kZXggPSAwO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtpbmRleCsrXSA9IGlucHV0TFtpbnB1dEluZGV4XTtcbiAgICAgICAgICByZXN1bHRbaW5kZXgrK10gPSBpbnB1dFJbaW5wdXRJbmRleF07XG4gICAgICAgICAgaW5wdXRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsb2F0VG8xNkJpdFBDTShvdXRwdXQsIG9mZnNldCwgaW5wdXQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKywgb2Zmc2V0ICs9IDIpIHtcbiAgICAgICAgICB2YXIgcyA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBpbnB1dFtpXSkpO1xuICAgICAgICAgIG91dHB1dC5zZXRJbnQxNihvZmZzZXQsIHMgPCAwID8gcyAqIDB4ODAwMCA6IHMgKiAweDdGRkYsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHdyaXRlU3RyaW5nKHZpZXcsIG9mZnNldCwgc3RyaW5nKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQgKyBpLCBzdHJpbmcuY2hhckNvZGVBdChpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZW5jb2RlV0FWKHNhbXBsZXMpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig0NCArIHNhbXBsZXMubGVuZ3RoICogMik7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG5cbiAgICAgICAgLyogUklGRiBpZGVudGlmaWVyICovXG4gICAgICAgIHdyaXRlU3RyaW5nKHZpZXcsIDAsICdSSUZGJyk7XG4gICAgICAgIC8qIFJJRkYgY2h1bmsgbGVuZ3RoICovXG4gICAgICAgIHZpZXcuc2V0VWludDMyKDQsIDM2ICsgc2FtcGxlcy5sZW5ndGggKiAyLCB0cnVlKTtcbiAgICAgICAgLyogUklGRiB0eXBlICovXG4gICAgICAgIHdyaXRlU3RyaW5nKHZpZXcsIDgsICdXQVZFJyk7XG4gICAgICAgIC8qIGZvcm1hdCBjaHVuayBpZGVudGlmaWVyICovXG4gICAgICAgIHdyaXRlU3RyaW5nKHZpZXcsIDEyLCAnZm10ICcpO1xuICAgICAgICAvKiBmb3JtYXQgY2h1bmsgbGVuZ3RoICovXG4gICAgICAgIHZpZXcuc2V0VWludDMyKDE2LCAxNiwgdHJ1ZSk7XG4gICAgICAgIC8qIHNhbXBsZSBmb3JtYXQgKHJhdykgKi9cbiAgICAgICAgdmlldy5zZXRVaW50MTYoMjAsIDEsIHRydWUpO1xuICAgICAgICAvKiBjaGFubmVsIGNvdW50ICovXG4gICAgICAgIHZpZXcuc2V0VWludDE2KDIyLCBudW1DaGFubmVscywgdHJ1ZSk7XG4gICAgICAgIC8qIHNhbXBsZSByYXRlICovXG4gICAgICAgIHZpZXcuc2V0VWludDMyKDI0LCBzYW1wbGVSYXRlLCB0cnVlKTtcbiAgICAgICAgLyogYnl0ZSByYXRlIChzYW1wbGUgcmF0ZSAqIGJsb2NrIGFsaWduKSAqL1xuICAgICAgICB2aWV3LnNldFVpbnQzMigyOCwgc2FtcGxlUmF0ZSAqIDQsIHRydWUpO1xuICAgICAgICAvKiBibG9jayBhbGlnbiAoY2hhbm5lbCBjb3VudCAqIGJ5dGVzIHBlciBzYW1wbGUpICovXG4gICAgICAgIHZpZXcuc2V0VWludDE2KDMyLCBudW1DaGFubmVscyAqIDIsIHRydWUpO1xuICAgICAgICAvKiBiaXRzIHBlciBzYW1wbGUgKi9cbiAgICAgICAgdmlldy5zZXRVaW50MTYoMzQsIDE2LCB0cnVlKTtcbiAgICAgICAgLyogZGF0YSBjaHVuayBpZGVudGlmaWVyICovXG4gICAgICAgIHdyaXRlU3RyaW5nKHZpZXcsIDM2LCAnZGF0YScpO1xuICAgICAgICAvKiBkYXRhIGNodW5rIGxlbmd0aCAqL1xuICAgICAgICB2aWV3LnNldFVpbnQzMig0MCwgc2FtcGxlcy5sZW5ndGggKiAyLCB0cnVlKTtcblxuICAgICAgICBmbG9hdFRvMTZCaXRQQ00odmlldywgNDQsIHNhbXBsZXMpO1xuXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgfVxuICAgIH0sIHNlbGYpO1xuXG4gICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgY29tbWFuZDogJ2luaXQnLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIHNhbXBsZVJhdGU6IHRoaXMuY29udGV4dC5zYW1wbGVSYXRlLFxuICAgICAgICBudW1DaGFubmVsczogdGhpcy5jb25maWcubnVtQ2hhbm5lbHNcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMud29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY2IgPSBfdGhpcy5jYWxsYmFja3NbZS5kYXRhLmNvbW1hbmRdLnBvcCgpO1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYihlLmRhdGEuZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNaWNyb3Bob25lLCBbe1xuICAgIGtleTogJ3JlY29yZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29yZCgpIHtcbiAgICAgIHRoaXMucmVjb3JkaW5nID0gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMucmVjb3JkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogJ2NsZWFyJyB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRCdWZmZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCdWZmZXIoY2IpIHtcbiAgICAgIGNiID0gY2IgfHwgdGhpcy5jb25maWcuY2FsbGJhY2s7XG5cbiAgICAgIGlmICghY2IpIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbm90IHNldCcpO1xuXG4gICAgICB0aGlzLmNhbGxiYWNrcy5nZXRCdWZmZXIucHVzaChjYik7XG5cbiAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogJ2dldEJ1ZmZlcicgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZXhwb3J0V0FWJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0V0FWKGNiLCBtaW1lVHlwZSkge1xuICAgICAgbWltZVR5cGUgPSBtaW1lVHlwZSB8fCB0aGlzLmNvbmZpZy5taW1lVHlwZTtcbiAgICAgIGNiID0gY2IgfHwgdGhpcy5jb25maWcuY2FsbGJhY2s7XG5cbiAgICAgIGlmICghY2IpIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbm90IHNldCcpO1xuXG4gICAgICB0aGlzLmNhbGxiYWNrcy5leHBvcnRXQVYucHVzaChjYik7XG5cbiAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgY29tbWFuZDogJ2V4cG9ydFdBVicsXG4gICAgICAgIHR5cGU6IG1pbWVUeXBlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWljcm9waG9uZTtcbn0oKTtcblxuTWljcm9waG9uZS5mb3JjZURvd25sb2FkID0gZnVuY3Rpb24gZm9yY2VEb3dubG9hZChibG9iLCBmaWxlbmFtZSkge1xuICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICBhLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmUnO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuXG4gIHZhciB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuICBhLmhyZWYgPSB1cmw7XG4gIGEuZG93bmxvYWQgPSBmaWxlbmFtZTtcbiAgYS5jbGljaygpO1xuXG4gIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1pY3JvcGhvbmU7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2tlbGV0b24uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NrZWxldG9uLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8qKlxuICogQXNzaWducyBhIHZhbHVlIGZvciBhIGdpdmVuIHJlZiwgbm8gbWF0dGVyIG9mIHRoZSByZWYgZm9ybWF0XG4gKiBAcGFyYW0ge1JlZk9iamVjdH0gcmVmIC0gYSBjYWxsYmFjayBmdW5jdGlvbiBvciByZWYgb2JqZWN0XG4gKiBAcGFyYW0gdmFsdWUgLSBhIG5ldyB2YWx1ZVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3RoZUthc2hleS91c2UtY2FsbGJhY2stcmVmI2Fzc2lnbnJlZlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlZk9iamVjdCA9IHVzZVJlZigpO1xuICogY29uc3QgcmVmRm4gPSAocmVmKSA9PiB7Li4uLn1cbiAqXG4gKiBhc3NpZ25SZWYocmVmT2JqZWN0LCBcInJlZlZhbHVlXCIpO1xuICogYXNzaWduUmVmKHJlZkZuLCBcInJlZlZhbHVlXCIpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduUmVmKHJlZiwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZWYodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWYpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGFzc2lnblJlZiB9IGZyb20gJy4vYXNzaWduUmVmJztcbmltcG9ydCB7IHVzZUNhbGxiYWNrUmVmIH0gZnJvbSAnLi91c2VSZWYnO1xudmFyIGN1cnJlbnRWYWx1ZXMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBNZXJnZXMgdHdvIG9yIG1vcmUgcmVmcyB0b2dldGhlciBwcm92aWRpbmcgYSBzaW5nbGUgaW50ZXJmYWNlIHRvIHNldCB0aGVpciB2YWx1ZVxuICogQHBhcmFtIHtSZWZPYmplY3R8UmVmfSByZWZzXG4gKiBAcmV0dXJucyB7TXV0YWJsZVJlZk9iamVjdH0gLSBhIG5ldyByZWYsIHdoaWNoIHRyYW5zbGF0ZXMgYWxsIGNoYW5nZXMgdG8ge3JlZnN9XG4gKlxuICogQHNlZSB7QGxpbmsgbWVyZ2VSZWZzfSBhIHZlcnNpb24gd2l0aG91dCBidWl0LWluIG1lbW9pemF0aW9uXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90aGVLYXNoZXkvdXNlLWNhbGxiYWNrLXJlZiN1c2VtZXJnZXJlZnNcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gKiAgIGNvbnN0IG93blJlZiA9IHVzZVJlZigpO1xuICogICBjb25zdCBkb21SZWYgPSB1c2VNZXJnZVJlZnMoW3JlZiwgb3duUmVmXSk7IC8vIPCfkYggbWVyZ2UgdG9nZXRoZXJcbiAqICAgcmV0dXJuIDxkaXYgcmVmPXtkb21SZWZ9Pi4uLjwvZGl2PlxuICogfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VSZWZzKHJlZnMsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBjYWxsYmFja1JlZiA9IHVzZUNhbGxiYWNrUmVmKGRlZmF1bHRWYWx1ZSB8fCBudWxsLCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHJlZnMuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7IHJldHVybiBhc3NpZ25SZWYocmVmLCBuZXdWYWx1ZSk7IH0pO1xuICAgIH0pO1xuICAgIC8vIGhhbmRsZSByZWZzIGNoYW5nZXMgLSBhZGRlZCBvciByZW1vdmVkXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gY3VycmVudFZhbHVlcy5nZXQoY2FsbGJhY2tSZWYpO1xuICAgICAgICBpZiAob2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBwcmV2UmVmc18xID0gbmV3IFNldChvbGRWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgbmV4dFJlZnNfMSA9IG5ldyBTZXQocmVmcyk7XG4gICAgICAgICAgICB2YXIgY3VycmVudF8xID0gY2FsbGJhY2tSZWYuY3VycmVudDtcbiAgICAgICAgICAgIHByZXZSZWZzXzEuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0UmVmc18xLmhhcyhyZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnblJlZihyZWYsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV4dFJlZnNfMS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXZSZWZzXzEuaGFzKHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduUmVmKHJlZiwgY3VycmVudF8xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50VmFsdWVzLnNldChjYWxsYmFja1JlZiwgcmVmcyk7XG4gICAgfSwgW3JlZnNdKTtcbiAgICByZXR1cm4gY2FsbGJhY2tSZWY7XG59XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogY3JlYXRlcyBhIE11dGFibGVSZWYgd2l0aCByZWYgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0gaW5pdGlhbFZhbHVlIC0gaW5pdGlhbCByZWYgdmFsdWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gYSBjYWxsYmFjayB0byBydW4gd2hlbiB2YWx1ZSBjaGFuZ2VzXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlZiA9IHVzZUNhbGxiYWNrUmVmKDAsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IGNvbnNvbGUubG9nKG9sZFZhbHVlLCAnLT4nLCBuZXdWYWx1ZSk7XG4gKiByZWYuY3VycmVudCA9IDE7XG4gKiAvLyBwcmludHMgMCAtPiAxXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlcmVmXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90aGVLYXNoZXkvdXNlLWNhbGxiYWNrLXJlZiN1c2VjYWxsYmFja3JlZi0tLXRvLXJlcGxhY2UtcmVhY3R1c2VyZWZcbiAqIEByZXR1cm5zIHtNdXRhYmxlUmVmT2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FsbGJhY2tSZWYoaW5pdGlhbFZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciByZWYgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICAvLyB2YWx1ZVxuICAgICAgICB2YWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgICAgICAvLyBsYXN0IGNhbGxiYWNrXG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgLy8gXCJtZW1vaXplZFwiIHB1YmxpYyBpbnRlcmZhY2VcbiAgICAgICAgZmFjYWRlOiB7XG4gICAgICAgICAgICBnZXQgY3VycmVudCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVmLnZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBjdXJyZW50KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3QgPSByZWYudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZWYuY2FsbGJhY2sodmFsdWUsIGxhc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSk7IH0pWzBdO1xuICAgIC8vIHVwZGF0ZSBjYWxsYmFja1xuICAgIHJlZi5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHJldHVybiByZWYuZmFjYWRlO1xufVxuIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmZ1bmN0aW9uIEl0b0koYSkge1xuICAgIHJldHVybiBhO1xufVxuZnVuY3Rpb24gaW5uZXJDcmVhdGVNZWRpdW0oZGVmYXVsdHMsIG1pZGRsZXdhcmUpIHtcbiAgICBpZiAobWlkZGxld2FyZSA9PT0gdm9pZCAwKSB7IG1pZGRsZXdhcmUgPSBJdG9JOyB9XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhc3NpZ25lZCA9IGZhbHNlO1xuICAgIHZhciBtZWRpdW0gPSB7XG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChhc3NpZ25lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2lkZWNhcjogY291bGQgbm90IGByZWFkYCBmcm9tIGFuIGBhc3NpZ25lZGAgbWVkaXVtLiBgcmVhZGAgY291bGQgYmUgdXNlZCBvbmx5IHdpdGggYHVzZU1lZGl1bWAuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgICAgICB9LFxuICAgICAgICB1c2VNZWRpdW06IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IG1pZGRsZXdhcmUoZGF0YSwgYXNzaWduZWQpO1xuICAgICAgICAgICAgYnVmZmVyLnB1c2goaXRlbSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggIT09IGl0ZW07IH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYXNzaWduU3luY01lZGl1bTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBhc3NpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjYnMgPSBidWZmZXI7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgY2JzLmZvckVhY2goY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0ge1xuICAgICAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uICh4KSB7IHJldHVybiBjYih4KTsgfSxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJ1ZmZlcjsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFzc2lnbk1lZGl1bTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBhc3NpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgcGVuZGluZ1F1ZXVlID0gW107XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjYnMgPSBidWZmZXI7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgY2JzLmZvckVhY2goY2IpO1xuICAgICAgICAgICAgICAgIHBlbmRpbmdRdWV1ZSA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBleGVjdXRlUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNicyA9IHBlbmRpbmdRdWV1ZTtcbiAgICAgICAgICAgICAgICBwZW5kaW5nUXVldWUgPSBbXTtcbiAgICAgICAgICAgICAgICBjYnMuZm9yRWFjaChjYik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGN5Y2xlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihleGVjdXRlUXVldWUpOyB9O1xuICAgICAgICAgICAgY3ljbGUoKTtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHtcbiAgICAgICAgICAgICAgICBwdXNoOiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUXVldWUucHVzaCh4KTtcbiAgICAgICAgICAgICAgICAgICAgY3ljbGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUXVldWUgPSBwZW5kaW5nUXVldWUuZmlsdGVyKGZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gbWVkaXVtO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1lZGl1bShkZWZhdWx0cywgbWlkZGxld2FyZSkge1xuICAgIGlmIChtaWRkbGV3YXJlID09PSB2b2lkIDApIHsgbWlkZGxld2FyZSA9IEl0b0k7IH1cbiAgICByZXR1cm4gaW5uZXJDcmVhdGVNZWRpdW0oZGVmYXVsdHMsIG1pZGRsZXdhcmUpO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaWRlY2FyTWVkaXVtKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBtZWRpdW0gPSBpbm5lckNyZWF0ZU1lZGl1bShudWxsKTtcbiAgICBtZWRpdW0ub3B0aW9ucyA9IF9fYXNzaWduKHsgYXN5bmM6IHRydWUsIHNzcjogZmFsc2UgfSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG1lZGl1bTtcbn1cbiJdLCJuYW1lcyI6WyJtb2QiLCJleHBvcnRzIiwib3B0aW9ucyIsImlucHV0IiwiaW5wdXRMZW4iLCJzb3VyY2VGaWxlIiwidmVyc2lvbiIsInBhcnNlIiwiaW5wdCIsIm9wdHMiLCJTdHJpbmciLCJsZW5ndGgiLCJzZXRPcHRpb25zIiwiaW5pdFRva2VuU3RhdGUiLCJwYXJzZVRvcExldmVsIiwicHJvZ3JhbSIsImxhc3RTdGFydCIsImxhc3RFbmQiLCJ0b2tQb3MiLCJsb2NhdGlvbnMiLCJsYXN0RW5kTG9jIiwibGluZV9sb2NfdCIsImluRnVuY3Rpb24iLCJzdHJpY3QiLCJsYWJlbHMiLCJyZWFkVG9rZW4iLCJub2RlIiwic3RhcnROb2RlIiwiZmlyc3QiLCJib2R5IiwidG9rVHlwZSIsIl9lb2YiLCJzdG10IiwicGFyc2VTdGF0ZW1lbnQiLCJwdXNoIiwiaXNVc2VTdHJpY3QiLCJzZXRTdHJpY3QiLCJmaW5pc2hOb2RlIiwiZGVmYXVsdE9wdGlvbnMiLCJlY21hVmVyc2lvbiIsInN0cmljdFNlbWljb2xvbnMiLCJhbGxvd1RyYWlsaW5nQ29tbWFzIiwiZm9yYmlkUmVzZXJ2ZWQiLCJvbkNvbW1lbnQiLCJyYW5nZXMiLCJkaXJlY3RTb3VyY2VGaWxlIiwib3B0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidG9rU3RhcnQiLCJ0b2tFbmQiLCJ0b2tTdGFydExvYyIsInRva0VuZExvYyIsInRva1ZhbCIsInRva1JlZ2V4cEFsbG93ZWQiLCJ0b2tDdXJMaW5lIiwidG9rTGluZVN0YXJ0IiwiZ2V0TGluZUluZm8iLCJvZmZzZXQiLCJsaW5lIiwiY3VyIiwibGluZUJyZWFrIiwibGFzdEluZGV4IiwibWF0Y2giLCJleGVjIiwiaW5kZXgiLCJjb2x1bW4iLCJyYWlzZSIsInBvcyIsIm1lc3NhZ2UiLCJsb2MiLCJlcnIiLCJTeW50YXhFcnJvciIsInJhaXNlZEF0IiwidG9rZW5pemUiLCJ0IiwiZ2V0VG9rZW4iLCJmb3JjZVJlZ2V4cCIsInN0YXJ0IiwiZW5kIiwic3RhcnRMb2MiLCJlbmRMb2MiLCJ0eXBlIiwidmFsdWUiLCJqdW1wVG8iLCJyZUFsbG93ZWQiLCJza2lwU3BhY2UiLCJlbXB0eSIsIl9udW0iLCJfcmVnZXhwIiwiX3N0cmluZyIsIl9uYW1lIiwiX2JyZWFrIiwia2V5d29yZCIsIl9jYXNlIiwiYmVmb3JlRXhwciIsIl9jYXRjaCIsIl9jb250aW51ZSIsIl9kZWJ1Z2dlciIsIl9kZWZhdWx0IiwiX2RvIiwiaXNMb29wIiwiX2Vsc2UiLCJfZmluYWxseSIsIl9mb3IiLCJfZnVuY3Rpb24iLCJfaWYiLCJfcmV0dXJuIiwiX3N3aXRjaCIsIl90aHJvdyIsIl90cnkiLCJfdmFyIiwiX3doaWxlIiwiX3dpdGgiLCJfbmV3IiwiX3RoaXMiLCJfbnVsbCIsImF0b21WYWx1ZSIsIl90cnVlIiwiX2ZhbHNlIiwiX2luIiwiYmlub3AiLCJrZXl3b3JkVHlwZXMiLCJwcmVmaXgiLCJfYnJhY2tldEwiLCJfYnJhY2tldFIiLCJfYnJhY2VMIiwiX2JyYWNlUiIsIl9wYXJlbkwiLCJfcGFyZW5SIiwiX2NvbW1hIiwiX3NlbWkiLCJfY29sb24iLCJfZG90IiwiX3F1ZXN0aW9uIiwiX3NsYXNoIiwiX2VxIiwiaXNBc3NpZ24iLCJfYXNzaWduIiwiX2luY0RlYyIsInBvc3RmaXgiLCJpc1VwZGF0ZSIsIl9wcmVmaXgiLCJfbG9naWNhbE9SIiwiX2xvZ2ljYWxBTkQiLCJfYml0d2lzZU9SIiwiX2JpdHdpc2VYT1IiLCJfYml0d2lzZUFORCIsIl9lcXVhbGl0eSIsIl9yZWxhdGlvbmFsIiwiX2JpdFNoaWZ0IiwiX3BsdXNNaW4iLCJfbXVsdGlwbHlNb2R1bG8iLCJrdyIsInRva1R5cGVzIiwiYnJhY2tldEwiLCJicmFja2V0UiIsImJyYWNlTCIsImJyYWNlUiIsInBhcmVuTCIsInBhcmVuUiIsImNvbW1hIiwic2VtaSIsImNvbG9uIiwiZG90IiwicXVlc3Rpb24iLCJzbGFzaCIsImVxIiwibmFtZSIsImVvZiIsIm51bSIsInJlZ2V4cCIsInN0cmluZyIsIm1ha2VQcmVkaWNhdGUiLCJ3b3JkcyIsInNwbGl0IiwiZiIsImNhdHMiLCJvdXQiLCJpIiwiaiIsImNvbXBhcmVUbyIsImFyciIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3J0IiwiYSIsImIiLCJjYXQiLCJGdW5jdGlvbiIsImNvbnRhaW5zRXNjIiwiaXNSZXNlcnZlZFdvcmQzIiwiaXNSZXNlcnZlZFdvcmQ1IiwiaXNTdHJpY3RSZXNlcnZlZFdvcmQiLCJpc1N0cmljdEJhZElkV29yZCIsImlzS2V5d29yZCIsIm5vbkFTQ0lJd2hpdGVzcGFjZSIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMiLCJub25BU0NJSWlkZW50aWZpZXJTdGFydCIsIlJlZ0V4cCIsIm5vbkFTQ0lJaWRlbnRpZmllciIsIm5ld2xpbmUiLCJpc0lkZW50aWZpZXJTdGFydCIsImNvZGUiLCJ0ZXN0IiwiZnJvbUNoYXJDb2RlIiwiaXNJZGVudGlmaWVyQ2hhciIsInRoaXMiLCJmaW5pc2hUb2tlbiIsInZhbCIsInNraXBCbG9ja0NvbW1lbnQiLCJpbmRleE9mIiwic2xpY2UiLCJza2lwTGluZUNvbW1lbnQiLCJjaCIsImNoYXJDb2RlQXQiLCJuZXh0IiwiZ2V0VG9rZW5Gcm9tQ29kZSIsInJlYWRUb2tlbl9kb3QiLCJyZWFkTnVtYmVyIiwicmVhZEhleE51bWJlciIsInJlYWRJbnQiLCJyZWFkU3RyaW5nIiwicXVvdGUiLCJvY3RhbCIsInBhcnNlSW50IiwicmVhZEhleENoYXIiLCJyZWFkVG9rZW5fc2xhc2giLCJyZWFkUmVnZXhwIiwiZmluaXNoT3AiLCJyZWFkVG9rZW5fbXVsdF9tb2R1bG8iLCJyZWFkVG9rZW5fcGlwZV9hbXAiLCJyZWFkVG9rZW5fY2FyZXQiLCJyZWFkVG9rZW5fcGx1c19taW4iLCJyZWFkVG9rZW5fbHRfZ3QiLCJzaXplIiwicmVhZFRva2VuX2VxX2V4Y2wiLCJyZWFkV29yZCIsInRvayIsInN0ciIsImVzY2FwZWQiLCJpbkNsYXNzIiwiY2hhckF0IiwiY29udGVudCIsIm1vZHMiLCJyZWFkV29yZDEiLCJyYWRpeCIsImxlbiIsInRvdGFsIiwiZSIsIkluZmluaXR5Iiwic3RhcnRzV2l0aERvdCIsImlzRmxvYXQiLCJwYXJzZUZsb2F0IiwibiIsIndvcmQiLCJlc2MiLCJlc2NTdHIiLCJzdHJjdCIsImxhc3RJbmRleE9mIiwibm9kZV90Iiwibm9kZV9sb2NfdCIsInNvdXJjZSIsInJhbmdlIiwic3RhcnROb2RlRnJvbSIsIm90aGVyIiwiZXhwcmVzc2lvbiIsImVhdCIsImNhbkluc2VydFNlbWljb2xvbiIsInNlbWljb2xvbiIsInVuZXhwZWN0ZWQiLCJleHBlY3QiLCJjaGVja0xWYWwiLCJleHByIiwibG9vcExhYmVsIiwia2luZCIsInN3aXRjaExhYmVsIiwic3RhcnR0eXBlIiwiaXNCcmVhayIsImxhYmVsIiwicGFyc2VJZGVudCIsImxhYiIsInBvcCIsInBhcnNlUGFyZW5FeHByZXNzaW9uIiwicGFyc2VGb3IiLCJpbml0IiwicGFyc2VWYXIiLCJkZWNsYXJhdGlvbnMiLCJwYXJzZUZvckluIiwicGFyc2VFeHByZXNzaW9uIiwicGFyc2VGdW5jdGlvbiIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJhcmd1bWVudCIsImRpc2NyaW1pbmFudCIsImNhc2VzIiwic2F3RGVmYXVsdCIsImlzQ2FzZSIsImJsb2NrIiwicGFyc2VCbG9jayIsImhhbmRsZXIiLCJjbGF1c2UiLCJwYXJhbSIsImd1YXJkIiwiZ3VhcmRlZEhhbmRsZXJzIiwiZmluYWxpemVyIiwib2JqZWN0IiwibWF5YmVOYW1lIiwiYWxsb3dTdHJpY3QiLCJvbGRTdHJpY3QiLCJ1cGRhdGUiLCJsZWZ0IiwicmlnaHQiLCJub0luIiwiZGVjbCIsImlkIiwibm9Db21tYSIsInBhcnNlTWF5YmVBc3NpZ24iLCJleHByZXNzaW9ucyIsInBhcnNlTWF5YmVDb25kaXRpb25hbCIsInBhcnNlRXhwck9wcyIsInBhcnNlRXhwck9wIiwicGFyc2VNYXliZVVuYXJ5Iiwib3BlcmF0b3IiLCJtaW5QcmVjIiwicHJlYyIsIm9wIiwicGFyc2VFeHByU3Vic2NyaXB0cyIsInBhcnNlU3Vic2NyaXB0cyIsInBhcnNlRXhwckF0b20iLCJiYXNlIiwibm9DYWxscyIsInByb3BlcnR5IiwiY29tcHV0ZWQiLCJjYWxsZWUiLCJhcmd1bWVudHMiLCJwYXJzZUV4cHJMaXN0IiwicmF3IiwidG9rU3RhcnRMb2MxIiwidG9rU3RhcnQxIiwiZWxlbWVudHMiLCJwYXJzZU9iaiIsInNhd0dldFNldCIsInByb3BlcnRpZXMiLCJwcm9wIiwia2V5IiwicGFyc2VQcm9wZXJ0eU5hbWUiLCJpc0dldFNldCIsImNvbmZsaWN0IiwicGFyc2VOZXciLCJpc1N0YXRlbWVudCIsInBhcmFtcyIsIm9sZEluRnVuYyIsIm9sZExhYmVscyIsImNsb3NlIiwiYWxsb3dUcmFpbGluZ0NvbW1hIiwiYWxsb3dFbXB0eSIsImVsdHMiLCJsaWJlcmFsIiwiYWNvcm4iLCJJbnRlcnByZXRlciIsIm1vZHVsZSIsIm9wdF9pbml0RnVuYyIsIlBBUlNFX09QVElPTlMiLCJhc3QiLCJpbml0RnVuY18iLCJwYXVzZWRfIiwicG9seWZpbGxzXyIsImZ1bmN0aW9uQ291bnRlcl8iLCJmdW5jdGlvbk1hcF8iLCJjcmVhdGUiLCJtIiwic3RlcE1hdGNoIiwibWV0aG9kTmFtZSIsImJpbmQiLCJtb2NrT2JqZWN0IiwiTlVNQkVSIiwiQk9PTEVBTiIsIlNUUklORyIsIlVOREVGSU5FRCIsIlByaW1pdGl2ZSIsInVuZGVmaW5lZCIsIk5VTEwiLCJOQU4iLCJOYU4iLCJUUlVFIiwiRkFMU0UiLCJOVU1CRVJfWkVSTyIsIk5VTUJFUl9PTkUiLCJTVFJJTkdfRU1QVFkiLCJnbG9iYWwiLCJjcmVhdGVTY29wZSIsInByb3RvIiwiam9pbiIsInN0cmlwTG9jYXRpb25zXyIsInN0YXRlU3RhY2siLCJzY29wZSIsInRoaXNFeHByZXNzaW9uIiwiZG9uZSIsInJ1biIsIlJFQURPTkxZX0RFU0NSSVBUT1IiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJOT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IiLCJSRUFET05MWV9OT05FTlVNRVJBQkxFX0RFU0NSSVBUT1IiLCJ0b1N0cmluZ0N5Y2xlc18iLCJnZW5lcmF0ZUFTVCIsInBhcnNlT3B0aW9ucyIsImtleXMiLCJmb3JFYWNoIiwiYXBwZW5kQ29kZSIsImFkZGl0aW9uYWxPcHRpb25zIiwic3RhdGUiLCJFcnJvciIsImFjb3JuT3B0aW9ucyIsImF0dHJpYnV0ZSIsInBvcHVsYXRlU2NvcGVfIiwic3RlcCIsInN0YWNrIiwiaW5pdEdsb2JhbFNjb3BlIiwic2V0UHJvcGVydHkiLCJjcmVhdGVQcmltaXRpdmUiLCJpbml0RnVuY3Rpb24iLCJpbml0T2JqZWN0IiwiT0JKRUNUIiwiaW5pdEFycmF5IiwiaW5pdE51bWJlciIsImluaXRTdHJpbmciLCJpbml0Qm9vbGVhbiIsImluaXREYXRlIiwiaW5pdE1hdGgiLCJpbml0UmVnRXhwIiwiaW5pdEpTT04iLCJpbml0RXJyb3IiLCJ3cmFwcGVyIiwidGhpc0ludGVycHJldGVyIiwiaXNOYU4iLCJ0b051bWJlciIsImNyZWF0ZU5hdGl2ZUZ1bmN0aW9uIiwiaXNGaW5pdGUiLCJnZXRQcm9wZXJ0eSIsImZ1bmMiLCJjcmVhdGVPYmplY3QiLCJGVU5DVElPTiIsImV2YWwiLCJzdHJGdW5jdGlvbnMiLCJlc2NhcGUiLCJ1bmVzY2FwZSIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5hdGl2ZUZ1bmMiLCJ0b1N0cmluZyIsInRocm93RXhjZXB0aW9uIiwiVVJJX0VSUk9SIiwiaWRlbnRpZmllclJlZ2V4cCIsInZhcl9hcmdzIiwiY2FsbGVkV2l0aE5ldyIsIm5ld0Z1bmMiLCJhcmdzIiwiU1lOVEFYX0VSUk9SIiwicGFyZW50U2NvcGUiLCJib3hUaGlzIiwiaXNQcmltaXRpdmUiLCJnZXRTY29wZSIsImJveCIsImRhdGEiLCJ0aGlzQXJnIiwiZnVuY18iLCJmdW5jVGhpc18iLCJhcmd1bWVudHNfIiwiaXNhIiwiQVJSQVkiLCJUWVBFX0VSUk9SIiwiZG9uZUFyZ3NfIiwiZG9uZUV4ZWNfIiwic2V0TmF0aXZlRnVuY3Rpb25Qcm90b3R5cGUiLCJ2YWx1ZU9mIiwib2JqIiwicHJvcHMiLCJuYXRpdmVUb1BzZXVkbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJsaXN0Iiwibm90RW51bWVyYWJsZSIsImNyZWF0ZU9iamVjdFByb3RvIiwiZGVzY3JpcHRvciIsInByZXZlbnRFeHRlbnNpb25zIiwiZ2V0Iiwic2V0IiwibmF0aXZlRGVzY3JpcHRvciIsInBzZXVkb1RvTmF0aXZlIiwibm90Q29uZmlndXJhYmxlIiwibm90V3JpdGFibGUiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJnZXRJbnQiLCJkZWYiLCJNYXRoIiwiZmxvb3IiLCJzdHJpY3RDb21wIiwibmV3QXJyYXkiLCJhcnJheUluZGV4IiwiUkFOR0VfRVJST1IiLCJ0bXAiLCJob3dtYW55IiwibWF4IiwibWluIiwicmVtb3ZlZCIsIm9wdF9iZWdpbiIsIm9wdF9lbmQiLCJiZWdpbiIsImVsZW1lbnQiLCJvcHRfc2VwYXJhdG9yIiwiY3ljbGVzIiwic2VwIiwidGV4dCIsInNlYXJjaEVsZW1lbnQiLCJvcHRfZnJvbUluZGV4IiwiZnJvbUluZGV4IiwibnVtQ29uc3RzIiwiTnVtYmVyIiwiZnJhY3Rpb25EaWdpdHMiLCJ0b0V4cG9uZW50aWFsIiwiZGlnaXRzIiwidG9GaXhlZCIsInByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwibG9jYWxlcyIsInRvTG9jYWxlU3RyaW5nIiwiYXBwbHkiLCJmdW5jdGlvbnMiLCJyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJjb21wYXJlU3RyaW5nIiwibG9jYWxlQ29tcGFyZSIsInNlcGFyYXRvciIsImxpbWl0IiwiUkVHRVhQIiwianNMaXN0IiwicHNldWRvTGlzdCIsInNlYXJjaCIsInN1YnN0ciIsIm5ld1N1YlN0ciIsInRvQm9vbGVhbiIsIkRhdGUiLCJuZXdEYXRlIiwiREFURSIsImdldFRpbWUiLCJkYXRlU3RyaW5nIiwiVVRDIiwibXlNYXRoIiwibWF0aENvbnN0cyIsIm51bUZ1bmN0aW9ucyIsInBhdHRlcm4iLCJmbGFncyIsInJneCIsInBvcHVsYXRlUmVnRXhwXyIsInJlc3VsdCIsIm15SlNPTiIsIm5hdGl2ZU9iaiIsIkVSUk9SIiwib3B0X21lc3NhZ2UiLCJuZXdFcnJvciIsImNyZWF0ZUVycm9yU3ViY2xhc3MiLCJjb25zdHJ1Y3RvciIsIkVWQUxfRVJST1IiLCJSRUZFUkVOQ0VfRVJST1IiLCJjaGlsZCIsImNvbXAiLCJhVmFsdWUiLCJiVmFsdWUiLCJwb3ciLCJpbnRlcnByZXRlciIsIkJvb2xlYW4iLCJzdHJzIiwiZXJyb3IiLCJwc2V1ZG9SZWdleHAiLCJuYXRpdmVSZWdleHAiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwiY3JlYXRlRnVuY3Rpb24iLCJvcHRfY29uc3RydWN0b3IiLCJpbGxlZ2FsQ29uc3RydWN0b3IiLCJjcmVhdGVBc3luY0Z1bmN0aW9uIiwiYXN5bmNGdW5jIiwiQXJyYXkiLCJtYXAiLCJwc2V1ZG9PYmoiLCJvcHRfY3ljbGVzIiwicHNldWRvIiwibmF0aXZlIiwiZ2V0RnVsbHlRdWFsaWZpZWROYW1lIiwiZnVsbHlRdWFsaWZpZWROYW1lIiwiaXNHZXR0ZXIiLCJoYXNQcm9wZXJ0eSIsIlR5cGVFcnJvciIsIm9wdF9kZXNjcmlwdG9yIiwibmV3TGVuZ3RoIiwicGFyZW50IiwiZGVsZXRlUHJvcGVydHkiLCJmaXJzdE5vZGUiLCJjcmVhdGVTcGVjaWFsU2NvcGUiLCJvcHRfc2NvcGUiLCJnZXRWYWx1ZUZyb21TY29wZSIsIm5hbWVTdHIiLCJwcmV2Tm9kZSIsInNldFZhbHVlVG9TY29wZSIsIm5vZGVDbGFzcyIsImlzQ29uc3RydWN0b3IiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwiZXJyb3JDbGFzcyIsImV4ZWN1dGVFeGNlcHRpb24iLCJ0aHJvd1ZhbHVlIiwicmVhbEVycm9yIiwiZXJyb3JUYWJsZSIsInB1c2hHZXR0ZXJfIiwiZnVuY1RoaXMiLCJkb25lQ2FsbGVlXyIsInB1c2hTZXR0ZXJfIiwibl8iLCJhcnJheV8iLCJkb25lTGVmdF8iLCJjb21wb25lbnRzIiwiZG9uZVJpZ2h0XyIsImxlZnRTaWRlXyIsImRvbmVHZXR0ZXJfIiwibGVmdFZhbHVlXyIsImRvbmVTZXR0ZXJfIiwicmlnaHRTaWRlIiwicmlnaHRWYWx1ZSIsImxlZnROdW1iZXIiLCJyaWdodE51bWJlciIsImxlZnRTaWRlIiwibGVmdFZhbHVlIiwiaXNTd2l0Y2giLCJmdW5jdGlvbk5hbWUiLCJmdW5jTm9kZSIsInBhcmFtTmFtZSIsInBhcmFtVmFsdWUiLCJhcmdzTGlzdCIsImZ1bmNTdGF0ZSIsImFyZ3NXaXRoQ2FsbGJhY2siLCJjb25jYXQiLCJkb25lXyIsIm1vZGUiLCJtb2RlXyIsInRlc3RfIiwiZG9uZUluaXRfIiwiZG9uZU9iamVjdF8iLCJ2YXJpYWJsZV8iLCJvYmplY3RfIiwidmlzaXRlZF8iLCJuYW1lXyIsImRvbmVWYXJpYWJsZV8iLCJkb25lUHJvcGVydHlfIiwidmFsdWVUb2dnbGUiLCJ2YWx1ZVRvZ2dsZV8iLCJrZXlfIiwia2luZF8iLCJraW5kcyIsInNwbGljZSIsInN3aXRjaFZhbHVlXyIsImluZGV4XyIsInN3aXRjaENhc2UiLCJtYXRjaGVkXyIsImRlZmF1bHRDYXNlXyIsInRlc3RlZF8iLCJkb25lQmxvY2tfIiwiZG9uZUhhbmRsZXJfIiwiZG9uZUZpbmFsaXplcl8iLCJuZXh0U3RhdGUiLCJjaGFuZ2VWYWx1ZSIsInJldHVyblZhbHVlIiwiZGVjbGFyYXRpb25Ob2RlIiwiZG9uZUJvZHlfIiwid2luZG93IiwiciIsIm8iLCJsIiwiYyIsImQiLCJkZWZpbmVQcm9wZXJ0eSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJwIiwicyIsIkNvb2tpZVBvbGljeSIsIkRpc2FibGUiLCJFbmFibGUiLCJsYXVuY2hBc3luYyIsInJlbmRlckJ1dHRvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiYWYiLCJhbSIsImFyIiwiYXMiLCJheiIsImJlIiwiYmciLCJibiIsImJzIiwiY2EiLCJjcyIsImRhIiwiZGUiLCJlbCIsImVuIiwiZXMiLCJldCIsImV1IiwiZmEiLCJmaSIsImZpbCIsImZyIiwiZ2QiLCJnbCIsImd1IiwiaGEiLCJoZSIsImhpIiwiaHIiLCJodSIsImh5IiwiaWciLCJpcyIsIml0IiwiamEiLCJrYSIsImtrIiwia20iLCJrbiIsImtvIiwia29rIiwia3kiLCJsYiIsImxvIiwibHQiLCJsdiIsIm1pIiwibWsiLCJtbCIsIm1uIiwibXIiLCJtcyIsIm10IiwibmUiLCJubCIsIm5vIiwibnNvIiwib3IiLCJwYSIsInBsIiwicHJzIiwicHQiLCJxdWMiLCJxdXoiLCJybyIsInJ1IiwicnciLCJzZCIsInNpIiwic2siLCJzbCIsInNxIiwic3YiLCJzdyIsInRhIiwidGUiLCJ0aCIsInRpIiwidGsiLCJ0biIsInRyIiwidHQiLCJ1ayIsInVyIiwidXoiLCJ2aSIsIndvIiwieGgiLCJ5byIsInpoIiwienUiLCJnZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImhlaWdodCIsIndpZHRoIiwidmVydGljYWxBbGlnbiIsIm1hcmdpblRvcCIsImFsdCIsIm1hcmdpbkxlZnQiLCJ0ZXh0Q29udGVudCIsInRvTG93ZXJDYXNlIiwic3Vic3RyaW5nIiwiaW5uZXJIVE1MIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInUiLCJzZXRBdHRyaWJ1dGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImlzVmFsaWRTdWJkb21haW4iLCJFcnJvckNvZGUiLCJUb2tlbkV4cGlyZWQiLCJUaHJvdHRsZWQiLCJTZXJ2ZXJFcnJvciIsIkludmFsaWRTdWJkb21haW4iLCJQcm9taXNlIiwicmVqZWN0IiwiY2h1bmtzIiwiY3VzdG9tRG9tYWluIiwibm93IiwidWlaSW5kZXgiLCJ0aW1lb3V0IiwidXNlV2VidmlldyIsImFsbG93RnVsbHNjcmVlbiIsImhpZGVFeGl0QnV0dG9uIiwiY29va2llUG9saWN5IiwidiIsImFsbG93IiwiaCIsImNsZWFyVGltZW91dCIsImciLCJjb250YWlucyIsInJlbW92ZUNoaWxkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImsiLCJwYXJlbnROb2RlIiwieSIsIm9uRXhpdCIsImNvZ1N2Y3NBY2Nlc3NUb2tlbiIsImNvZ1N2Y3NTdWJkb21haW4iLCJyZXF1ZXN0IiwibGF1bmNoVG9Qb3N0TWVzc2FnZVNlbnREdXJhdGlvbkluTXMiLCJkaXNhYmxlRmlyc3RSdW4iLCJyZWFkQWxvdWRPcHRpb25zIiwidHJhbnNsYXRpb25PcHRpb25zIiwiZGlzcGxheU9wdGlvbnMiLCJzZW5kUHJlZmVyZW5jZXMiLCJvblByZWZlcmVuY2VzQ2hhbmdlZCIsInByZWZlcmVuY2VzIiwiY29udGVudFdpbmRvdyIsInBvc3RNZXNzYWdlIiwibWVzc2FnZVR5cGUiLCJtZXNzYWdlVmFsdWUiLCJzdGFydHNXaXRoIiwic3VjY2VzcyIsImNvbnRhaW5lciIsInNlc3Npb25JZCIsImNoYXJhY3RlcnNQcm9jZXNzZWQiLCJtZXRlcmVkQ29udGVudFNpemUiLCJlcnJvckNvZGUiLCJzZXRUaW1lb3V0IiwiVGltZW91dCIsImNzc1RleHQiLCJ3IiwidWlMYW5nIiwiQmFkQXJndW1lbnQiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJpc0FycmF5IiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiaXRlcmF0b3IiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsImZyb20iLCJfbm9uSXRlcmFibGVSZXN0IiwiYXJyMiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfdG9Qcm9wZXJ0eUtleSIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJ0b1ByaW1pdGl2ZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwidGFyZ2V0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VLZXlzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX2ludGVyb3BEZWZhdWx0TGVnYWN5IiwiUmVhY3RfX2RlZmF1bHQiLCJyZXF1aXJlIiwiU2tlbGV0b25UaGVtZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdEVuYWJsZUFuaW1hdGlvbiIsIlNrZWxldG9uVGhlbWUiLCJfcmVmMyIsImNoaWxkcmVuIiwic3R5bGVPcHRpb25zIiwiUHJvdmlkZXIiLCJTa2VsZXRvbiIsIl9yZWYyIiwiX2EiLCJfYiIsIl9jIiwiX3JlZjIkY291bnQiLCJjb3VudCIsIldyYXBwZXIiLCJjdXN0b21DbGFzc05hbWUiLCJjbGFzc05hbWUiLCJjb250YWluZXJDbGFzc05hbWUiLCJjb250YWluZXJUZXN0SWQiLCJfcmVmMiRjaXJjbGUiLCJjaXJjbGUiLCJzdHlsZVByb3AiLCJvcmlnaW5hbFByb3BzU3R5bGVPcHRpb25zIiwiY29udGV4dFN0eWxlT3B0aW9ucyIsInVzZUNvbnRleHQiLCJwcm9wc1N0eWxlT3B0aW9ucyIsIl9pIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsInN0eWxlT3B0aW9uc1RvQ3NzUHJvcGVydGllcyIsIl9yZWYiLCJiYXNlQ29sb3IiLCJoaWdobGlnaHRDb2xvciIsImJvcmRlclJhZGl1cyIsImRpcmVjdGlvbiIsImR1cmF0aW9uIiwiX3JlZiRlbmFibGVBbmltYXRpb24iLCJlbmFibGVBbmltYXRpb24iLCJpbmxpbmUiLCJjb3VudENlaWwiLCJjZWlsIiwidGhpc1N0eWxlIiwiZnJhY3Rpb25hbFBhcnQiLCJmcmFjdGlvbmFsV2lkdGgiLCJza2VsZXRvblNwYW4iLCJGcmFnbWVudCIsInBhZDIiLCJpbmxpbmVXb3JrZXIiLCJmZXRjaEFuZEluc3RhbnRpYXRlRmFsbGJhY2siLCJ1cmwiLCJpbXBvcnRzIiwicmVzb2x2ZSIsInJlcSIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsIm9ubG9hZCIsIldlYkFzc2VtYmx5IiwiaW5zdGFudGlhdGUiLCJyZXNwb25zZSIsIm9uZXJyb3IiLCJzZW5kIiwibWVtb3J5IiwiZHluYW1pY1RvcCIsInNicmsiLCJpbmNyZW1lbnQiLCJvbGREeW5hbWljVG9wIiwiZXhpdCIsInN0YXR1cyIsIkZGSSIsInJlZiIsInBjbV9sIiwib25tZXNzYWdlIiwibXNnIiwiX21zZyRkYXRhIiwid2FzbVVSTCIsInNoaW1VUkwiLCJ0aGVuIiwic2VsZiIsInRlc3RTYWZhcmlXZWJBc3NlbWJseUJ1ZyIsImJpbiIsIlVpbnQ4QXJyYXkiLCJNb2R1bGUiLCJJbnN0YW5jZSIsImltcG9ydFNjcmlwdHMiLCJNZW1vcnkiLCJpbml0aWFsIiwiVE9UQUxfTUVNT1JZIiwibWF4aW11bSIsInBvd2YiLCJleHAiLCJzcXJ0ZiIsInNxcnQiLCJjb3MiLCJsb2ciLCJzaW4iLCJSdW50aW1lIiwiZmV0Y2hBbmRJbnN0YW50aWF0ZSIsImluc3RhbnRpYXRlU3RyZWFtaW5nIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsImVudiIsIndhc20iLCJpbnN0YW5jZSIsInZtc2dfaW5pdCIsInJhdGUiLCJwY21fbF9yZWYiLCJVaW50MzJBcnJheSIsImJ1ZmZlciIsIkZsb2F0MzJBcnJheSIsInZtc2dfZW5jb2RlIiwiYmxvYiIsInZtc2dfZmx1c2giLCJtcDNfcmVmIiwibXAzIiwiQmxvYiIsInZtc2dfZnJlZSIsIlJlY29yZGVyIiwib25TdG9wIiwiVVJMIiwibG9jYXRpb24iLCJocmVmIiwicGl0Y2giLCJzdHJlYW0iLCJhdWRpb0N0eCIsImdhaW5Ob2RlIiwicGl0Y2hGWCIsImVuY05vZGUiLCJ3b3JrZXIiLCJ3b3JrZXJVUkwiLCJibG9iVVJMIiwic2VhbCIsIl9wcm90byIsImRpc2Nvbm5lY3QiLCJvbmF1ZGlvcHJvY2VzcyIsInN0b3BUcmFja3MiLCJ0ZXJtaW5hdGUiLCJyZXZva2VPYmplY3RVUkwiLCJpbml0QXVkaW8iLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJjb25zdHJhaW50cyIsIm9sZEdldFVzZXJNZWRpYSIsIndlYmtpdEdldFVzZXJNZWRpYSIsIm1vekdldFVzZXJNZWRpYSIsImF1ZGlvIiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0Iiwic291cmNlTm9kZSIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwiY3JlYXRlR2FpbiIsImNyZWF0ZUdhaW5Ob2RlIiwiZ2FpbiIsImNvbm5lY3QiLCJKdW5nbGUiLCJzZXRQaXRjaE9mZnNldCIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsImNyZWF0ZUphdmFTY3JpcHROb2RlIiwib3V0cHV0IiwiaW5pdFdvcmtlciIsIl90aGlzMiIsImNyZWF0ZU9iamVjdFVSTCIsIldvcmtlciIsImNvbnNvbGUiLCJzdGFydFJlY29yZGluZyIsIl90aGlzMyIsInNhbXBsZVJhdGUiLCJzYW1wbGVzIiwiaW5wdXRCdWZmZXIiLCJnZXRDaGFubmVsRGF0YSIsImRlc3RpbmF0aW9uIiwic3RvcFJlY29yZGluZyIsIl90aGlzNCIsImdldFRyYWNrcyIsInRyYWNrIiwic3RvcCIsIkZvcm0iLCJfdGhpczUiLCJyZWNvcmRlciIsImJhY2tkcm9wIiwicG9wdXAiLCJyZWNvcmRCdG4iLCJzdG9wQnRuIiwidGltZXIiLCJzYXZlQnRuIiwidGlkIiwiZHJhd0luaXQiLCJkcmF3QWxsIiwiZHJhd0Vycm9yIiwiX3Byb3RvMiIsIl90aGlzNiIsInN0b3BQcm9wYWdhdGlvbiIsInByb2dyZXNzIiwicHJvZ3Jlc3NEb3QiLCJkcmF3VGltZSIsIm1zZWNzIiwic2VjcyIsInJvdW5kIiwiX3RoaXM3IiwiY2xlYXJBbGwiLCJyZWNvcmRSb3ciLCJkaXNwbGF5IiwiQXVkaW8iLCJhdXRvcGxheSIsInBhdXNlZCIsInBhdXNlIiwiZGlzYWJsZWQiLCJnYWluV3JhcHBlciIsImdhaW5TbGlkZXIiLCJvbmNoYW5nZSIsInBpdGNoV3JhcHBlciIsInBpdGNoU2xpZGVyIiwicmVtb3ZlIiwidXBkYXRlVGltZSIsIl90aGlzOCIsInNob3duIiwicmVjb3JkIiwiZGVsYXlUaW1lIiwiZmFkZVRpbWUiLCJidWZmZXJUaW1lIiwiY3JlYXRlRGVsYXlUaW1lQnVmZmVyIiwiY29udGV4dCIsImFjdGl2ZVRpbWUiLCJzaGlmdFVwIiwibGVuZ3RoMSIsImNyZWF0ZUJ1ZmZlciIsIm1vZDEiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJtb2QyIiwibW9kMyIsIm1vZDQiLCJzaGlmdERvd25CdWZmZXIiLCJzaGlmdFVwQnVmZmVyIiwibG9vcCIsIm1vZDFHYWluIiwibW9kMkdhaW4iLCJtb2QzR2FpbiIsIm1vZDRHYWluIiwibW9kR2FpbjEiLCJtb2RHYWluMiIsImRlbGF5MSIsImNyZWF0ZURlbGF5IiwiY3JlYXRlRGVsYXlOb2RlIiwiZGVsYXkyIiwiZmFkZTEiLCJmYWRlMiIsImZhZGVCdWZmZXIiLCJjcmVhdGVGYWRlQnVmZmVyIiwiZmFkZUxlbmd0aCIsImZhZGVJbmRleDEiLCJmYWRlSW5kZXgyIiwibWl4MSIsIm1peDIiLCJjdXJyZW50VGltZSIsInQyIiwic2V0RGVsYXkiLCJzZXRUYXJnZXRBdFRpbWUiLCJtdWx0IiwiYWJzIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJoYXNoIiwibmVlZFF1b3RlcyIsImNvbmZldHRpIiwicm9vdCIsImNvbmZpZyIsIl9PYmplY3QkYXNzaWduIiwiZGVmYXVsdHMiLCJiYWNrd2FyZFBhdGNoIiwic3RhZ2dlciIsImRlbGF5IiwiZWxlbWVudENvdW50IiwiY29sb3JzIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsInNwcmVhZCIsInN0YXJ0VmVsb2NpdHkiLCJkZWNheSIsImRyYWdGcmljdGlvbiIsInJhbmRvbSIsImZldHRpcyIsImNyZWF0ZUVsZW1lbnRzIiwiXyIsImNvbG9yIiwicG9zaXRpb24iLCJ3aWxsQ2hhbmdlIiwidmlzaWJpbGl0eSIsInBoeXNpY3MiLCJyYW5kb21QaHlzaWNzIiwiYW5pbWF0ZSIsInN0YXJ0VGltZSIsInRpbWUiLCJlbGFwc2VkIiwiZmV0dGkiLCJ1cGRhdGVGZXR0aSIsIngiLCJhbmdsZTJEIiwidmVsb2NpdHkiLCJ6IiwiYW5nbGUzRCIsIndvYmJsZSIsIndvYmJsZVNwZWVkIiwidGlsdEFuZ2xlIiwidGlsdEFuZ2xlU3BlZWQiLCJfZmV0dGkkcGh5c2ljcyIsIndvYmJsZVgiLCJ3b2JibGVZIiwidHJhbnNmb3JtIiwib3BhY2l0eSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZEFuZ2xlIiwiUEkiLCJyYWRTcHJlYWQiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJOdW1iZXJJc05hTiIsIkV2ZW50RW1pdHRlciIsIm9uY2UiLCJlbWl0dGVyIiwiZXJyb3JMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVzb2x2ZXIiLCJldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIiLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIm9uIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJ1bnNoaWZ0Iiwid2FybmVkIiwiUHJvY2Vzc0VtaXRXYXJuaW5nIiwid2FybmluZyIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwicmV0IiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5Iiwid3JhcExpc3RlbmVyIiwiYXJnIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0Iiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIlJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsIldPUktFUl9FTkFCTEVEIiwiSW5saW5lV29ya2VyIiwiZnVuY3Rpb25Cb2R5IiwidHJpbSIsIl9leHRlbmRzIiwibW9kdWxlcyIsImdldCQxIiwiZ2V0JCQxIiwiZ2V0QWxsIiwiTE9BREFCTEVfU1RBVEUiLCJMT0FEQUJMRSIsImxvYWRTdGF0ZSIsInJvb3RTdGF0ZSIsImFsbCIsImdldExvYWRhYmxlIiwibG9hZCIsImxvYWRDb21wb25lbnRzIiwiZ2V0U3RhdGUiLCJjb21wb25lbnRCeUlkcyIsInJlZHVjZSIsImlkcyIsImxvYWRpbmdQcm9taXNlIiwiY29tcG9uZW50SWQiLCJFbXB0eUNvbXBvbmVudCIsImNvbXBvbmVudFRyYWNrZXIiLCJmcmVlemUiLCJyZXNldCIsImxvYWRhYmxlIiwiZ2V0Q29tcG9uZW50IiwiX3JlZiRFcnJvckNvbXBvbmVudCIsIkVycm9yQ29tcG9uZW50IiwiX3JlZiRMb2FkaW5nQ29tcG9uZW50IiwiTG9hZGluZ0NvbXBvbmVudCIsIl9yZW5kZXIiLCJhc3luY01vZGUiLCJMb2FkYWJsZUNvbXBvbmVudCIsIl9SZWFjdCRDb21wb25lbnQiLCJDb25zdHJ1Y3RvciIsImNsYXNzQ2FsbENoZWNrIiwiUmVmZXJlbmNlRXJyb3IiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQ29tcG9uZW50IiwibG9hZGluZyIsIm1vdW50ZWQiLCJzYWZlU2V0U3RhdGUiLCJjYXRjaCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiaW5oZXJpdHMiLCJfaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJyZXNvbHZlTW9kdWxlRGVmYXVsdCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzZXRTdGF0ZSIsIl9zdGF0ZSIsIm93blByb3BzIiwiaXNPYmplY3QiLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJkZWJvdW5jZSIsIndhaXQiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsImludm9rZUZ1bmMiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInJlbWFpbmluZ1dhaXQiLCJ0aW1lV2FpdGluZyIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiUVI4Yml0Qnl0ZSIsIk1PREVfOEJJVF9CWVRFIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJwdXQiLCJRUkJpdEJ1ZmZlciIsImJ1ZkluZGV4IiwicHV0Qml0IiwiZ2V0TGVuZ3RoSW5CaXRzIiwiYml0IiwiTCIsIk0iLCJRIiwiSCIsIm1hdGgiLCJRUlBvbHlub21pYWwiLCJtdWx0aXBseSIsImdleHAiLCJnbG9nIiwicmF0aW8iLCJCaXRCeXRlIiwiUlNCbG9jayIsIkJpdEJ1ZmZlciIsInV0aWwiLCJQb2x5bm9taWFsIiwiUVJDb2RlIiwidHlwZU51bWJlciIsImVycm9yQ29ycmVjdExldmVsIiwibW9kdWxlQ291bnQiLCJkYXRhQ2FjaGUiLCJkYXRhTGlzdCIsImFkZERhdGEiLCJuZXdEYXRhIiwiaXNEYXJrIiwicm93IiwiY29sIiwiZ2V0TW9kdWxlQ291bnQiLCJtYWtlIiwicnNCbG9ja3MiLCJnZXRSU0Jsb2NrcyIsInRvdGFsRGF0YUNvdW50IiwiZGF0YUNvdW50IiwibWFrZUltcGwiLCJnZXRCZXN0TWFza1BhdHRlcm4iLCJtYXNrUGF0dGVybiIsInNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4iLCJzZXR1cFBvc2l0aW9uQWRqdXN0UGF0dGVybiIsInNldHVwVGltaW5nUGF0dGVybiIsInNldHVwVHlwZUluZm8iLCJzZXR1cFR5cGVOdW1iZXIiLCJjcmVhdGVEYXRhIiwibWFwRGF0YSIsIm1pbkxvc3RQb2ludCIsImxvc3RQb2ludCIsImdldExvc3RQb2ludCIsImNyZWF0ZU1vdmllQ2xpcCIsInRhcmdldF9tYyIsImluc3RhbmNlX25hbWUiLCJkZXB0aCIsInFyX21jIiwiY3JlYXRlRW1wdHlNb3ZpZUNsaXAiLCJiZWdpbkZpbGwiLCJtb3ZlVG8iLCJsaW5lVG8iLCJlbmRGaWxsIiwiZ2V0UGF0dGVyblBvc2l0aW9uIiwiYml0cyIsImdldEJDSFR5cGVOdW1iZXIiLCJnZXRCQ0hUeXBlSW5mbyIsImluYyIsImJpdEluZGV4IiwiYnl0ZUluZGV4IiwiZGFyayIsImdldE1hc2siLCJQQUQwIiwiUEFEMSIsImNyZWF0ZUJ5dGVzIiwibWF4RGNDb3VudCIsIm1heEVjQ291bnQiLCJkY2RhdGEiLCJlY2RhdGEiLCJkY0NvdW50IiwiZWNDb3VudCIsInRvdGFsQ291bnQiLCJyc1BvbHkiLCJnZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsIiwibW9kUG9seSIsIm1vZEluZGV4IiwidG90YWxDb2RlQ291bnQiLCJFQ0wiLCJRUlJTQmxvY2siLCJSU19CTE9DS19UQUJMRSIsInJzQmxvY2siLCJnZXRSc0Jsb2NrVGFibGUiLCJRUk1hdGgiLCJMT0dfVEFCTEUiLCJFWFBfVEFCTEUiLCJNT0RFX05VTUJFUiIsIk1PREVfQUxQSEFfTlVNIiwiTU9ERV9LQU5KSSIsIk1vZGUiLCJRUk1hc2tQYXR0ZXJuIiwiUVJVdGlsIiwiUEFUVEVSTl9QT1NJVElPTl9UQUJMRSIsIkcxNSIsIkcxOCIsIkcxNV9NQVNLIiwiZ2V0QkNIRGlnaXQiLCJkaWdpdCIsImVycm9yQ29ycmVjdExlbmd0aCIsInFyQ29kZSIsInNhbWVDb3VudCIsImRhcmtDb3VudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfaW5oZXJpdHMiLCJSZWFjdCIsIlByb3BUeXBlcyIsIlFSQ29kZUltcGwiLCJFcnJvckNvcnJlY3RMZXZlbCIsImNvbnZlcnRTdHIiLCJjaGFyY29kZSIsIkRFRkFVTFRfUFJPUFMiLCJsZXZlbCIsImJnQ29sb3IiLCJmZ0NvbG9yIiwiUFJPUF9UWVBFUyIsImlzUmVxdWlyZWQiLCJudW1iZXIiLCJvbmVPZiIsIlFSQ29kZUNhbnZhcyIsIl90ZW1wIiwiX2xlbiIsIl9rZXkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwic29tZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl9wcm9wcyIsInFyY29kZSIsIl9jYW52YXMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiY2VsbHMiLCJ0aWxlVyIsInRpbGVIIiwic2NhbGUiLCJkZXZpY2VQaXhlbFJhdGlvIiwiZ2V0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwib0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJiYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwicmR4IiwiY2VsbCIsImNkeCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiX3Byb3BzMiIsIm90aGVyUHJvcHMiLCJjYW52YXNTdHlsZSIsIlFSQ29kZVNWRyIsIl9SZWFjdCRDb21wb25lbnQyIiwiX3Byb3BzMyIsIm9wcyIsInNoYXBlUmVuZGVyaW5nIiwidmlld0JveCIsImZpbGwiLCJyZW5kZXJBcyIsInRvb2x0aXAiLCJFIiwiX2lkIiwiWCIsInRpbWVycyIsImltZyIsInBsdWdpbnMiLCJjYWNoZSIsImV2ZW50IiwiYXR0ciIsIm9uVG9vbHRpcCIsImxhc3RDbGFzcyIsInJlbmRlcmVkIiwiZGVzdHJveWVkIiwid2FpdGluZyIsImhpZGRlbkR1cmluZ1dhaXQiLCJwb3NpdGlvbmluZyIsInRyaWdnZXJpbmciLCJpc0Z1bmN0aW9uIiwianF1ZXJ5IiwibWV0YWRhdGEiLCJhamF4IiwiZXh0ZW5kIiwidGl0bGUiLCJidXR0b24iLCJteSIsImF0Iiwic2hvdyIsIlciLCJyZWFkeSIsImhpZGUiLCJjbGFzc2VzIiwiZWFjaCIsInNhbml0aXplIiwiY2hlY2tzIiwiRyIsInBhZ2VYIiwicGFnZVkiLCJyZWxhdGVkVGFyZ2V0Iiwic2Nyb2xsWCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsInByb3h5IiwiaGFzQ2xhc3MiLCJlZSIsInRvZ2dsZSIsImNsb3Nlc3QiLCJVIiwiZml4ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImluYWN0aXZlIiwib2Zmc2V0V2lkdGgiLCJyZXBvc2l0aW9uIiwiZGVsZWdhdGUiLCJUIiwiYXBpIiwicGFyc2VKU09OIiwic29sbyIsInZpZXdwb3J0Iiwib3ZlcndyaXRlIiwicXRpcCIsIlkiLCJzdXBwcmVzcyIsInJlbW92ZUF0dHIiLCJzZSIsIm9uZSIsImRlc3Ryb3kiLCJ0b1VwcGVyQ2FzZSIsInllIiwiY3NzIiwiX25zIiwicSIsIkMiLCJJIiwiUyIsIkEiLCJCIiwiRCIsIkYiLCJPIiwiUCIsIk4iLCJWIiwiSiIsIksiLCJaIiwiaWUiLCJvZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaU9TIiwidXNlckFnZW50IiwiX3doZW4iLCJ3aGVuIiwiYWJicmV2IiwidHJhY2tpbmciLCJhZGp1c3QiLCJtb3VzZSIsInJvbGUiLCJ0b2dnbGVDbGFzcyIsImFwcGVuZFRvIiwiYXBwZW5kIiwiX2NyZWF0ZVRpdGxlIiwiX3VwZGF0ZVRpdGxlIiwiX2NyZWF0ZUJ1dHRvbiIsIl91cGRhdGVDb250ZW50IiwiX3NldFdpZGdldCIsImluaXRpYWxpemUiLCJfdW5hc3NpZ25FdmVudHMiLCJfYXNzaWduRXZlbnRzIiwiX3RyaWdnZXIiLCJmaW5kIiwicmVtb3ZlRGF0YSIsIl91bmJpbmQiLCJidWlsdGluIiwibmV4dGlkIiwiX3JlbW92ZVRpdGxlIiwiX3VwZGF0ZUJ1dHRvbiIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJwcmVjZWRhbmNlIiwicmUiLCJub2RlVHlwZSIsIl91cGRhdGUiLCJodG1sIiwiX3dhaXRGb3JDb250ZW50IiwiaW1hZ2VzIiwiZm4iLCJpbWFnZXNMb2FkZWQiLCJEZWZlcnJlZCIsInByb21pc2UiLCJ0aXRsZWJhciIsIndpZGdldCIsImluc2VydEJlZm9yZSIsIm1ldGhvZCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsInRvcCIsIm93bmVyRG9jdW1lbnQiLCJkaXN0YW5jZSIsIm9yaWdpbiIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImlubmVySGVpZ2h0IiwiaW1hZ2VtYXAiLCJzdmciLCJvd25lclNWR0VsZW1lbnQiLCJhZGp1c3RhYmxlIiwiYWRqdXN0ZWQiLCJlbGVtIiwiZWZmZWN0IiwicXVldWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjb21wYXRNb2RlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib2Zmc2V0UGFyZW50IiwiYWUiLCJDb3JuZXIiLCJmb3JjZVkiLCJpbnZlcnQiLCJjbG9uZSIsImFkZCIsImhhcyIsImZvY3VzIiwiX3N0b3JlTW91c2UiLCJub3QiLCJFdmVudCIsInVuYmluZCIsImJsdXIiLCJhdXRvZm9jdXMiLCJ0cmlnZ2VyIiwiZmFkZVRvIiwiekluZGV4IiwiemluZGV4IiwiZGlzYWJsZSIsImVuYWJsZSIsImNsaWNrIiwiX2JpbmQiLCJjdXJyZW50VGFyZ2V0Iiwib3JpZ2luYWxFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9iaW5kRXZlbnRzIiwiaW5BcnJheSIsIl9hc3NpZ25Jbml0aWFsRXZlbnRzIiwib25UYXJnZXQiLCJwcmVyZW5kZXIiLCJsZWF2ZSIsIm5vZGVOYW1lIiwicGFyZW50cyIsImluYWN0aXZlRXZlbnRzIiwicmVzaXplIiwic3BlY2lhbCIsInNjcm9sbCIsInB1c2hTdGFjayIsImdyZXAiLCJtYWtlQXJyYXkiLCJ0aW1lU3RhbXAiLCJpc1BsYWluT2JqZWN0IiwidWkiLCJjbGVhbkRhdGEiLCJ0cmlnZ2VySGFuZGxlciIsIm1vdmUiLCJ2aXNpYmxlIiwiaGlkZGVuIiwibGUiLCJjZSIsInBlIiwidWUiLCJmZSIsImdlIiwibWUiLCJ2ZSIsIndlIiwiX2UiLCJ4ZSIsInFlIiwidGlwIiwicHJlcGVuZFRvIiwibGluZUpvaW4iLCJtaXRlckxpbWl0Iiwic2F2ZSIsIl9zd2FwRGltZW5zaW9ucyIsIl9yZXNldERpbWVuc2lvbnMiLCJfdXNlVGl0bGUiLCJfcGFyc2VDb3JuZXIiLCJfcGFyc2VXaWR0aCIsIl9wYXJzZVJhZGl1cyIsIl9pbnZhbGlkQ29sb3VyIiwiX3BhcnNlQ29sb3VycyIsIl9jYWxjdWxhdGVTaXplIiwiYm9yZGVyIiwicmV2ZXJzZSIsIl9jYWxjdWxhdGVUaXAiLCJiciIsImJsIiwidGwiLCJ0YyIsImJjIiwicmMiLCJsYyIsInJ0IiwicmIiLCJfZHJhd0Nvb3JkcyIsImJlZ2luUGF0aCIsImNsb3NlUGF0aCIsImNvcm5lciIsImVuYWJsZWQiLCJtaW1pYyIsImxpbmVIZWlnaHQiLCJyZXN0b3JlIiwiY2xlYXJSZWN0IiwidHJhbnNsYXRlIiwiY29vcmRzaXplIiwiYW50aWFsaWFzIiwicGF0aCIsImZpbGxjb2xvciIsImZpbGxlZCIsInN0cm9rZWQiLCJvcGVyYSIsImNhbGN1bGF0ZSIsIm1hcmdpbiIsImJvdHRvbSIsImNvcm5lclRvcCIsImNvcm5lckxlZnQiLCJ1c2VyIiwiQ2UiLCJUZSIsIk1lIiwiamUiLCJ6ZSIsIm1vdXNlZG93biIsIm1vZGFsIiwia2V5Q29kZSIsInN0ZWFsZm9jdXMiLCJmb2N1c2FibGUiLCJkZXRhY2giLCJvdmVybGF5IiwibW9kYWxfemluZGV4IiwibGFzdCIsImVsZW1zIiwicG9seXMiLCJwb2x5Z29uIiwicmVjdCIsIl9hbmdsZXMiLCJlbGxpcHNlIiwiZ2V0QkJveCIsImN4IiwiYmFzZVZhbCIsImN5IiwicngiLCJyeSIsInBvaW50cyIsIngxIiwieTEiLCJ4MiIsInkyIiwibnVtYmVyT2ZJdGVtcyIsImdldEl0ZW0iLCJjcmVhdGVTVkdQb2ludCIsImdldFNjcmVlbkNUTSIsIm1hdHJpeFRyYW5zZm9ybSIsIl9zY3JvbGwiLCJiZ2lmcmFtZSIsImFkanVzdEJHSUZyYW1lIiwicmVkcmF3Q29udGFpbmVyIiwicmVkcmF3IiwiZHJhd2luZyIsImllNiIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2RvbUNvbmZldHRpIiwiQ29uZmV0dGkiLCJfQ29tcG9uZW50Iiwic2V0UmVmIiwicHJldlByb3BzIiwiYWN0aXZlIiwiRk9DVVNfQVVUTyIsImhpZGRlbkd1YXJkIiwicGFkZGluZyIsIm92ZXJmbG93IiwiSW5Gb2N1c0d1YXJkIiwiX3JlZiRjaGlsZHJlbiIsIm1lZGl1bUZvY3VzIiwibWVkaXVtQmx1ciIsIm1lZGl1bUVmZmVjdCIsIm1lZGl1bVNpZGVjYXIiLCJhc3luYyIsInNzciIsImZvY3VzU2NvcGUiLCJlbXB0eUFycmF5IiwiRm9jdXNMb2NrIiwiRm9jdXNMb2NrVUkiLCJwYXJlbnRSZWYiLCJfZXh0ZW5kczIiLCJfUmVhY3QkdXNlU3RhdGUiLCJyZWFsT2JzZXJ2ZWQiLCJzZXRPYnNlcnZlZCIsIm9ic2VydmVkIiwiaXNBY3RpdmUiLCJvcmlnaW5hbEZvY3VzZWRFbGVtZW50IiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJG5vRm9jdXNHdWFyZHMiLCJub0ZvY3VzR3VhcmRzIiwiX3Byb3BzJHBlcnNpc3RlbnRGb2N1IiwicGVyc2lzdGVudEZvY3VzIiwiX3Byb3BzJGNyb3NzRnJhbWUiLCJjcm9zc0ZyYW1lIiwiX3Byb3BzJGF1dG9Gb2N1cyIsImF1dG9Gb2N1cyIsImdyb3VwIiwiYWxsb3dUZXh0U2VsZWN0aW9uIiwid2hpdGVMaXN0IiwiaGFzUG9zaXRpdmVJbmRpY2VzIiwiX3Byb3BzJHNoYXJkcyIsInNoYXJkcyIsIl9wcm9wcyRhcyIsIkNvbnRhaW5lciIsIl9wcm9wcyRsb2NrUHJvcHMiLCJsb2NrUHJvcHMiLCJjb250YWluZXJQcm9wcyIsIlNpZGVDYXIiLCJzaWRlQ2FyIiwiX3Byb3BzJHJldHVybkZvY3VzIiwicmV0dXJuRm9jdXMiLCJzaG91bGRSZXR1cm5Gb2N1cyIsImZvY3VzT3B0aW9ucyIsIm9uQWN0aXZhdGlvbkNhbGxiYWNrIiwib25BY3RpdmF0aW9uIiwib25EZWFjdGl2YXRpb25DYWxsYmFjayIsIm9uRGVhY3RpdmF0aW9uIiwiY2FwdHVyZUZvY3VzUmVzdG9yZSIsImN1cnJlbnQiLCJfZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiYWxsb3dEZWZlciIsImZvY3VzUmVzdG9yZSIsInJldHVybkZvY3VzVG8iLCJob3dUb1JldHVybkZvY3VzIiwicmV0dXJuRm9jdXNPcHRpb25zIiwib25Gb2N1cyIsInVzZU1lZGl1bSIsIm9uQmx1ciIsInNldE9ic2VydmVOb2RlIiwibmV3T2JzZXJ2ZWQiLCJoYXNMZWFkaW5nR3VhcmRzIiwiaGFzVGFpbGluZ0d1YXJkcyIsIm1lcmdlZFJlZiIsInVzZU1lcmdlUmVmIiwiZm9jdXNTY29wZVZhbHVlIiwidGFiSW5kZXgiLCJfc2V0UHJvdG90eXBlT2YiLCJ0b1Byb3BlcnR5S2V5Iiwid2l0aFNpZGVFZmZlY3QiLCJyZWR1Y2VQcm9wc1RvU3RhdGUiLCJoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50Iiwid3JhcCIsIldyYXBwZWRDb21wb25lbnQiLCJtb3VudGVkSW5zdGFuY2VzIiwiZW1pdENoYW5nZSIsIlNpZGVFZmZlY3QiLCJfUHVyZUNvbXBvbmVudCIsIl9pbmhlcml0c0xvb3NlIiwicGVlayIsIlB1cmVDb21wb25lbnQiLCJnZXREaXNwbGF5TmFtZSIsInRvQXJyYXkiLCJhc0FycmF5IiwiZ2V0Rmlyc3QiLCJnZXRQYXJlbnROb2RlIiwiTm9kZSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJob3N0IiwiaXNUb3BOb2RlIiwiRE9DVU1FTlRfTk9ERSIsImlzVmlzaWJsZVVuY2FjaGVkIiwiY2hlY2tQYXJlbnQiLCJFTEVNRU5UX05PREUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJpc0VsZW1lbnRIaWRkZW4iLCJoYXNBdHRyaWJ1dGUiLCJpc0luZXJ0IiwiaXNWaXNpYmxlQ2FjaGVkIiwidmlzaWJpbGl0eUNhY2hlIiwiY2FjaGVkIiwiaXNBdXRvRm9jdXNBbGxvd2VkQ2FjaGVkIiwiaXNBdXRvRm9jdXNBbGxvd2VkIiwiaXNBdXRvRm9jdXNBbGxvd2VkVW5jYWNoZWQiLCJnZXREYXRhc2V0IiwiZGF0YXNldCIsImlzSFRNTElucHV0RWxlbWVudCIsInRhZ05hbWUiLCJpc1JhZGlvRWxlbWVudCIsImluY2x1ZGVzIiwiaXNHdWFyZCIsImZvY3VzR3VhcmQiLCJpc05vdEFHdWFyZCIsImlzRGVmaW5lZCIsInRhYlNvcnQiLCJhVGFiIiwiYlRhYiIsInRhYkRpZmYiLCJpbmRleERpZmYiLCJvcmRlckJ5VGFiSW5kZXgiLCJub2RlcyIsImZpbHRlck5lZ2F0aXZlIiwia2VlcEd1YXJkcyIsImdldFRhYkluZGV4IiwicXVlcnlUYWJiYWJsZXMiLCJxdWVyeUd1YXJkVGFiYmFibGVzIiwiZ2V0Rm9jdXNhYmxlc1dpdGhTaGFkb3dEb20iLCJ3aXRoR3VhcmRzIiwic2hhZG93Um9vdCIsImFjYyIsIm1hdGNoZXMiLCJnZXRGb2N1c2FibGVzIiwiZm9jdXNhYmxlV2l0aFNoYWRvd0RvbSIsImZvY3VzYWJsZVdpdGhJZnJhbWVzIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRGb2N1c2FibGVzV2l0aElGcmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXJGb2N1c2FibGUiLCJpc0hUTUxCdXR0b25FbGVtZW50Iiwibm90SGlkZGVuSW5wdXQiLCJmaWx0ZXJBdXRvRm9jdXNhYmxlIiwiTWFwIiwiZ2V0VGFiYmFibGVOb2RlcyIsInRvcE5vZGVzIiwiZ2V0Rm9jdXNhYmxlTm9kZXMiLCJwYXJlbnRBdXRvZm9jdXNhYmxlcyIsInRvcE5vZGUiLCJwYXJlbnRGb2N1cyIsImlmcmFtZUJvZHkiLCJnZXRBY3RpdmVFbGVtZW50IiwiaW5Eb2N1bWVudCIsImNiIiwic2FmZVByb2JlIiwiZ2V0VG9wUGFyZW50IiwiZ2V0QWxsQWZmZWN0ZWROb2RlcyIsImN1cnJlbnROb2RlIiwiY29udGFpbmVkIiwiU2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkiLCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyIsImZpbHRlck5lc3RlZCIsImZvY3VzSW5zaWRlIiwiZnJhbWUiLCJmb2N1c0luRnJhbWUiLCJmb2N1c0luc2lkZUlmcmFtZSIsImZvY3VzT24iLCJjb3JyZWN0Tm9kZSIsImNoZWNrZWQiLCJmaW5kU2VsZWN0ZWRSYWRpbyIsInBpY2tGaXJzdEZvY3VzIiwicGlja0ZvY3VzYWJsZSIsIm5ld0ZvY3VzIiwiaW5uZXJOb2RlcyIsImlubmVyVGFiYmFibGVzIiwib3V0ZXJOb2RlcyIsImxhc3ROb2RlIiwiY250IiwiZmlyc3RGb2N1cyIsImxhc3RGb2N1cyIsImlzT25HdWFyZCIsImFjdGl2ZUluZGV4IiwibGFzdE5vZGVJbnNpZGUiLCJyZXN1bHRTZXQiLCJmaXJzdE5vZGVJbmRleCIsImxhc3ROb2RlSW5kZXgiLCJjb3JyZWN0ZWROb2RlcyIsImNvcnJlY3RlZEluZGV4RGlmZiIsInJldHVybkZpcnN0Tm9kZSIsInJldHVybkxhc3ROb2RlIiwicGlja0F1dG9mb2N1cyIsIm5vZGVzSW5kZXhlcyIsIm9yZGVyZWROb2RlcyIsImdyb3VwcyIsImF1dG9Gb2N1c2FibGVzIiwiYXV0b0ZvY3VzYWJsZSIsImdldFBhcmVudHMiLCJnZXRDb21tb25QYXJlbnQiLCJub2RlQSIsIm5vZGVCIiwicGFyZW50c0EiLCJwYXJlbnRzQiIsImN1cnJlbnRQYXJlbnQiLCJnZXRUb3BDb21tb25QYXJlbnQiLCJiYXNlQWN0aXZlRWxlbWVudCIsImxlZnRFbnRyeSIsInJpZ2h0RW50cmllcyIsImFjdGl2ZUVsZW1lbnRzIiwibGVmdEVudHJpZXMiLCJ0b3BDb21tb24iLCJlbnRyeSIsInN1YkVudHJ5IiwiY29tbW9uIiwiYWxsUGFyZW50QXV0b2ZvY3VzYWJsZXMiLCJmb2N1c1NvbHZlciIsImNvbW1vblBhcmVudCIsImFueUZvY3VzYWJsZSIsImlubmVyRWxlbWVudHMiLCJzcmNOb2RlcyIsImRzdE5vZGVzIiwicmVtYXAiLCJvcmRlcmVkSW5uZXJFbGVtZW50cyIsImVudGl0eSIsImlubmVyRm9jdXNhYmxlcyIsImlubmVyVGFiYmFibGUiLCJuZXdJZCIsImZvY3VzTm9kZSIsImd1YXJkQ291bnQiLCJsb2NrRGlzYWJsZWQiLCJtb3ZlRm9jdXNJbnNpZGUiLCJtb3ZlRm9jdXMiLCJmcm9tRWxlbWVudCIsIm5ld09wdGlvbnMiLCJjeWNsZSIsIm9ubHlUYWJiYWJsZSIsInNvbHV0aW9uIiwidXNlVGFiYmFibGVzIiwiZXZlcnkiLCJzaGFyZCIsImZvY3VzYWJsZXMiLCJmaW5kSW5kZXgiLCJwcmV2IiwiZ2V0UmVsYXRpdmVGb2N1c2FibGUiLCJwaWNrQm91bmRhcnkiLCJ3aGF0Iiwid2Vha1JlZiIsIldlYWtSZWYiLCJkZXJlZiIsImRlZmVyQWN0aW9uIiwiYWN0aW9uIiwiaW5saW5lUHJvcCIsImV4dHJhY3RSZWYiLCJpc0ZyZWVGb2N1cyIsImZvY3VzT25Cb2R5IiwiZm9jdXNJc0hpZGRlbiIsImxhc3RBY3RpdmVUcmFwIiwibGFzdEFjdGl2ZUZvY3VzIiwibGFzdFBvcnRhbGVkRWxlbWVudCIsImZvY3VzV2FzT3V0c2lkZVdpbmRvdyIsImRlZmF1bHRXaGl0ZWxpc3QiLCJhdXRvR3VhcmQiLCJzdGFydEluZGV4IiwiYWxsTm9kZXMiLCJsYXN0R3VhcmQiLCJpdGVtIiwiZm9jdXNBdXRvR3VhcmQiLCJsb2NrSXRlbSIsImNoZWNrSW5Ib3N0IiwiY2hlY2siLCJib3VuZGFyeSIsImFjdGl2YXRlVHJhcCIsIl9sYXN0QWN0aXZlVHJhcCIsIndvcmtpbmdOb2RlIiwicG9ydGFsZWRFbGVtZW50Iiwid29ya2luZ0FyZWEiLCJmb2N1c1doaXRlbGlzdGVkIiwiZm9jdXNXYXNPdXRzaWRlIiwiY3Jvc3NGcmFtZU9wdGlvbiIsIndpdGhpbkhvc3QiLCJhcmVhIiwiZm9jdXNJc1BvcnRhbGVkUGFpciIsInF1ZXJ5U2VsZWN0b3IiLCJuZXdBY3RpdmVFbGVtZW50IiwiZm9jdXNlZEluZGV4Iiwib25UcmFwIiwicmVjb3JkUG9ydGFsIiwib2JzZXJ2ZXJOb2RlIiwib25XaW5kb3dCbHVyIiwiZm9jdXNMb2NrQVBJIiwiZm9jdXNOZXh0RWxlbWVudCIsImZvY3VzUHJldkVsZW1lbnQiLCJmb2N1c0ZpcnN0RWxlbWVudCIsImZvY3VzTGFzdEVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsInJlY29yZEVsZW1lbnRMb2NhdGlvbiIsIl9kIiwic3RhY2tfMSIsInBhcmVudF8xIiwiYWltIiwiX2YiLCJmb2N1c2FibGVzXzEiLCJyZXN0b3JlRm9jdXNUbyIsImFzc2lnblN5bmNNZWRpdW0iLCJhc3NpZ25NZWRpdW0iLCJwcm9wc0xpc3QiLCJfcmVmNSIsInRyYXBzIiwidHJhcCIsImF0dGFjaEhhbmRsZXIiLCJsYXN0VHJhcCIsInNhbWVUcmFwIiwiX3JlZjYiLCJkZXRhY2hIYW5kbGVyIiwiRm9jdXNXYXRjaGVyIiwiRm9jdXNMb2NrQ29tYmluYXRpb24iLCJGb2N1c0xvY2tVSUNvbWJpbmF0aW9uIiwiQXV0b0ZvY3VzSW5zaWRlIiwiX3JlZiRkaXNhYmxlZCIsIl9yZWYkY2xhc3NOYW1lIiwidXNlRm9jdXNJbnNpZGUiLCJvYnNlcnZlZFJlZiIsImNhciIsIk1vdmVGb2N1c0luc2lkZSIsImlzRGlzYWJsZWQiLCJGcmVlRm9jdXNJbnNpZGUiLCJjb2xsYXBzZVJlZnMiLCJ3aXRoTWVkaXVtIiwidXNlRm9jdXNDb250cm9sbGVyIiwidXNlUmVmIiwidXNlTWVtbyIsImZvY3VzTmV4dCIsImZvY3VzUHJldiIsImZvY3VzRmlyc3QiLCJmb2N1c0xhc3QiLCJ1c2VGb2N1c1Njb3BlIiwibWFpbmJ1cyIsImNyZWF0ZU5hbm9FdmVudHMiLCJjYWxsYmFja3MiLCJfdGhpcyRldmVudHMiLCJfdGhpcyRldmVudHMkZXZlbnQiLCJzdWJzY3JpYmVDb3VudGVyIiwib25Gb2N1c0luIiwib25Gb2N1c091dCIsImdldEZvY3VzU3RhdGUiLCJ1c2VGb2N1c1N0YXRlIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJzZXRBY3RpdmUiLCJfdXNlU3RhdGUyIiwiZm9jdXNTdGF0ZSIsInN0YXRlVHJhY2tlciIsInVzZUVmZmVjdCIsImlzQWxyZWFkeUZvY3VzZWQiLCJ1c2VDYWxsYmFjayIsImZvY3VzZWQiLCJ1c2VEb2N1bWVudEZvY3VzU3Vic2NyaWJlIiwiZm91dCIsImZpbiIsIm5ld1N0YXRlIiwiZm9yIiwiJCR0eXBlb2YiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiX21pY3JvcGhvbmUyIiwiZGVmYXVsdENvbmZpZyIsIm5GcmVxdWVuY3lCYXJzIiwib25BbmFseXNlZCIsImF1ZGlvQ29udGV4dCIsImF1ZGlvSW5wdXQiLCJyZWFsQXVkaW9JbnB1dCIsImlucHV0UG9pbnQiLCJhdWRpb1JlY29yZGVyIiwicmFmSUQiLCJhbmFseXNlckNvbnRleHQiLCJyZWNJbmRleCIsInVwZGF0ZUFuYWx5c2VycyIsImFuYWx5c2VyTm9kZSIsImNyZWF0ZUFuYWx5c2VyIiwiZmZ0U2l6ZSIsInplcm9HYWluIiwiY2xlYXIiLCJnZXRCdWZmZXIiLCJleHBvcnRXQVYiLCJmcmVxQnl0ZURhdGEiLCJmcmVxdWVuY3lCaW5Db3VudCIsImdldEJ5dGVGcmVxdWVuY3lEYXRhIiwibGFzdE5vblplcm8iLCJkYXR1bSIsImlkeCIsInNldE9uQW5hbHlzZWQiLCJkb3dubG9hZCIsImZpbGVuYW1lIiwiZm9yY2VEb3dubG9hZCIsIl9pbmxpbmVXb3JrZXIyIiwiYnVmZmVyTGVuIiwibnVtQ2hhbm5lbHMiLCJtaW1lVHlwZSIsIk1pY3JvcGhvbmUiLCJyZWNvcmRpbmciLCJjaGFubmVsIiwiY29tbWFuZCIsInJlY0xlbmd0aCIsInJlY0J1ZmZlcnMiLCJpbml0QnVmZmVycyIsIm1lcmdlQnVmZmVycyIsIndyaXRlU3RyaW5nIiwidmlldyIsInNldFVpbnQ4IiwiYnVmZmVycyIsImludGVybGVhdmVkIiwiaW50ZXJsZWF2ZSIsImlucHV0TCIsImlucHV0UiIsImlucHV0SW5kZXgiLCJkYXRhdmlldyIsImVuY29kZVdBViIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJzZXRVaW50MzIiLCJzZXRVaW50MTYiLCJmbG9hdFRvMTZCaXRQQ00iLCJzZXRJbnQxNiIsImF1ZGlvQmxvYiIsImNhbGxiYWNrIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJzZXRBdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibG9jYWxzIiwiYXNzaWduUmVmIiwiY3VycmVudFZhbHVlcyIsIldlYWtNYXAiLCJ1c2VNZXJnZVJlZnMiLCJyZWZzIiwiZGVmYXVsdFZhbHVlIiwiY2FsbGJhY2tSZWYiLCJ1c2VDYWxsYmFja1JlZiIsImluaXRpYWxWYWx1ZSIsImZhY2FkZSIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJwcmV2UmVmc18xIiwibmV4dFJlZnNfMSIsImN1cnJlbnRfMSIsIkl0b0kiLCJpbm5lckNyZWF0ZU1lZGl1bSIsIm1pZGRsZXdhcmUiLCJhc3NpZ25lZCIsInJlYWQiLCJjYnMiLCJwZW5kaW5nUXVldWUiLCJleGVjdXRlUXVldWUiLCJjcmVhdGVNZWRpdW0iLCJjcmVhdGVTaWRlY2FyTWVkaXVtIiwibWVkaXVtIl0sInNvdXJjZVJvb3QiOiIifQ==