/*! For license information please see 8701.233fbc8b.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8701],{"./node_modules/@babel/runtime-corejs2/core-js/array/from.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/core-js/library/fn/array/from.js")},"./node_modules/@babel/runtime-corejs2/core-js/array/is-array.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/core-js/library/fn/array/is-array.js")},"./node_modules/@babel/runtime-corejs2/core-js/object/values.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/core-js/library/fn/object/values.js")},"./node_modules/@babel/runtime-corejs2/core-js/parse-int.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/core-js/library/fn/parse-int.js")},"./node_modules/core-js/library/fn/array/from.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/core-js/library/modules/es6.string.iterator.js"),__webpack_require__("./node_modules/core-js/library/modules/es6.array.from.js"),module.exports=__webpack_require__("./node_modules/core-js/library/modules/_core.js").Array.from},"./node_modules/core-js/library/fn/array/is-array.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/core-js/library/modules/es6.array.is-array.js"),module.exports=__webpack_require__("./node_modules/core-js/library/modules/_core.js").Array.isArray},"./node_modules/core-js/library/fn/object/values.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/core-js/library/modules/es7.object.values.js"),module.exports=__webpack_require__("./node_modules/core-js/library/modules/_core.js").Object.values},"./node_modules/core-js/library/fn/parse-int.js":(module,__unused_webpack_exports,__webpack_require__)=>{__webpack_require__("./node_modules/core-js/library/modules/es6.parse-int.js"),module.exports=__webpack_require__("./node_modules/core-js/library/modules/_core.js").parseInt},"./node_modules/core-js/library/modules/_classof.js":(module,__unused_webpack_exports,__webpack_require__)=>{var cof=__webpack_require__("./node_modules/core-js/library/modules/_cof.js"),TAG=__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("toStringTag"),ARG="Arguments"==cof(function(){return arguments}());module.exports=function(it){var O,T,B;return void 0===it?"Undefined":null===it?"Null":"string"==typeof(T=function(it,key){try{return it[key]}catch(e){}}(O=Object(it),TAG))?T:ARG?cof(O):"Object"==(B=cof(O))&&"function"==typeof O.callee?"Arguments":B}},"./node_modules/core-js/library/modules/_create-property.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var $defineProperty=__webpack_require__("./node_modules/core-js/library/modules/_object-dp.js"),createDesc=__webpack_require__("./node_modules/core-js/library/modules/_property-desc.js");module.exports=function(object,index,value){index in object?$defineProperty.f(object,index,createDesc(0,value)):object[index]=value}},"./node_modules/core-js/library/modules/_is-array-iter.js":(module,__unused_webpack_exports,__webpack_require__)=>{var Iterators=__webpack_require__("./node_modules/core-js/library/modules/_iterators.js"),ITERATOR=__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator"),ArrayProto=Array.prototype;module.exports=function(it){return void 0!==it&&(Iterators.Array===it||ArrayProto[ITERATOR]===it)}},"./node_modules/core-js/library/modules/_is-array.js":(module,__unused_webpack_exports,__webpack_require__)=>{var cof=__webpack_require__("./node_modules/core-js/library/modules/_cof.js");module.exports=Array.isArray||function isArray(arg){return"Array"==cof(arg)}},"./node_modules/core-js/library/modules/_iter-call.js":(module,__unused_webpack_exports,__webpack_require__)=>{var anObject=__webpack_require__("./node_modules/core-js/library/modules/_an-object.js");module.exports=function(iterator,fn,value,entries){try{return entries?fn(anObject(value)[0],value[1]):fn(value)}catch(e){var ret=iterator.return;throw void 0!==ret&&anObject(ret.call(iterator)),e}}},"./node_modules/core-js/library/modules/_iter-create.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var create=__webpack_require__("./node_modules/core-js/library/modules/_object-create.js"),descriptor=__webpack_require__("./node_modules/core-js/library/modules/_property-desc.js"),setToStringTag=__webpack_require__("./node_modules/core-js/library/modules/_set-to-string-tag.js"),IteratorPrototype={};__webpack_require__("./node_modules/core-js/library/modules/_hide.js")(IteratorPrototype,__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator"),(function(){return this})),module.exports=function(Constructor,NAME,next){Constructor.prototype=create(IteratorPrototype,{next:descriptor(1,next)}),setToStringTag(Constructor,NAME+" Iterator")}},"./node_modules/core-js/library/modules/_iter-define.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var LIBRARY=__webpack_require__("./node_modules/core-js/library/modules/_library.js"),$export=__webpack_require__("./node_modules/core-js/library/modules/_export.js"),redefine=__webpack_require__("./node_modules/core-js/library/modules/_redefine.js"),hide=__webpack_require__("./node_modules/core-js/library/modules/_hide.js"),Iterators=__webpack_require__("./node_modules/core-js/library/modules/_iterators.js"),$iterCreate=__webpack_require__("./node_modules/core-js/library/modules/_iter-create.js"),setToStringTag=__webpack_require__("./node_modules/core-js/library/modules/_set-to-string-tag.js"),getPrototypeOf=__webpack_require__("./node_modules/core-js/library/modules/_object-gpo.js"),ITERATOR=__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator"),BUGGY=!([].keys&&"next"in[].keys()),returnThis=function(){return this};module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCED){$iterCreate(Constructor,NAME,next);var methods,key,IteratorPrototype,getMethod=function(kind){if(!BUGGY&&kind in proto)return proto[kind];switch(kind){case"keys":return function keys(){return new Constructor(this,kind)};case"values":return function values(){return new Constructor(this,kind)}}return function entries(){return new Constructor(this,kind)}},TAG=NAME+" Iterator",DEF_VALUES="values"==DEFAULT,VALUES_BUG=!1,proto=Base.prototype,$native=proto[ITERATOR]||proto["@@iterator"]||DEFAULT&&proto[DEFAULT],$default=$native||getMethod(DEFAULT),$entries=DEFAULT?DEF_VALUES?getMethod("entries"):$default:void 0,$anyNative="Array"==NAME&&proto.entries||$native;if($anyNative&&(IteratorPrototype=getPrototypeOf($anyNative.call(new Base)))!==Object.prototype&&IteratorPrototype.next&&(setToStringTag(IteratorPrototype,TAG,!0),LIBRARY||"function"==typeof IteratorPrototype[ITERATOR]||hide(IteratorPrototype,ITERATOR,returnThis)),DEF_VALUES&&$native&&"values"!==$native.name&&(VALUES_BUG=!0,$default=function values(){return $native.call(this)}),LIBRARY&&!FORCED||!BUGGY&&!VALUES_BUG&&proto[ITERATOR]||hide(proto,ITERATOR,$default),Iterators[NAME]=$default,Iterators[TAG]=returnThis,DEFAULT)if(methods={values:DEF_VALUES?$default:getMethod("values"),keys:IS_SET?$default:getMethod("keys"),entries:$entries},FORCED)for(key in methods)key in proto||redefine(proto,key,methods[key]);else $export($export.P+$export.F*(BUGGY||VALUES_BUG),NAME,methods);return methods}},"./node_modules/core-js/library/modules/_iter-detect.js":(module,__unused_webpack_exports,__webpack_require__)=>{var ITERATOR=__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator"),SAFE_CLOSING=!1;try{var riter=[7][ITERATOR]();riter.return=function(){SAFE_CLOSING=!0},Array.from(riter,(function(){throw 2}))}catch(e){}module.exports=function(exec,skipClosing){if(!skipClosing&&!SAFE_CLOSING)return!1;var safe=!1;try{var arr=[7],iter=arr[ITERATOR]();iter.next=function(){return{done:safe=!0}},arr[ITERATOR]=function(){return iter},exec(arr)}catch(e){}return safe}},"./node_modules/core-js/library/modules/_iterators.js":module=>{module.exports={}},"./node_modules/core-js/library/modules/_object-gpo.js":(module,__unused_webpack_exports,__webpack_require__)=>{var has=__webpack_require__("./node_modules/core-js/library/modules/_has.js"),toObject=__webpack_require__("./node_modules/core-js/library/modules/_to-object.js"),IE_PROTO=__webpack_require__("./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO"),ObjectProto=Object.prototype;module.exports=Object.getPrototypeOf||function(O){return O=toObject(O),has(O,IE_PROTO)?O[IE_PROTO]:"function"==typeof O.constructor&&O instanceof O.constructor?O.constructor.prototype:O instanceof Object?ObjectProto:null}},"./node_modules/core-js/library/modules/_parse-int.js":(module,__unused_webpack_exports,__webpack_require__)=>{var $parseInt=__webpack_require__("./node_modules/core-js/library/modules/_global.js").parseInt,$trim=__webpack_require__("./node_modules/core-js/library/modules/_string-trim.js").trim,ws=__webpack_require__("./node_modules/core-js/library/modules/_string-ws.js"),hex=/^[-+]?0[xX]/;module.exports=8!==$parseInt(ws+"08")||22!==$parseInt(ws+"0x16")?function parseInt(str,radix){var string=$trim(String(str),3);return $parseInt(string,radix>>>0||(hex.test(string)?16:10))}:$parseInt},"./node_modules/core-js/library/modules/_redefine.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/core-js/library/modules/_hide.js")},"./node_modules/core-js/library/modules/_set-to-string-tag.js":(module,__unused_webpack_exports,__webpack_require__)=>{var def=__webpack_require__("./node_modules/core-js/library/modules/_object-dp.js").f,has=__webpack_require__("./node_modules/core-js/library/modules/_has.js"),TAG=__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("toStringTag");module.exports=function(it,tag,stat){it&&!has(it=stat?it:it.prototype,TAG)&&def(it,TAG,{configurable:!0,value:tag})}},"./node_modules/core-js/library/modules/_string-at.js":(module,__unused_webpack_exports,__webpack_require__)=>{var toInteger=__webpack_require__("./node_modules/core-js/library/modules/_to-integer.js"),defined=__webpack_require__("./node_modules/core-js/library/modules/_defined.js");module.exports=function(TO_STRING){return function(that,pos){var a,b,s=String(defined(that)),i=toInteger(pos),l=s.length;return i<0||i>=l?TO_STRING?"":void 0:(a=s.charCodeAt(i))<55296||a>56319||i+1===l||(b=s.charCodeAt(i+1))<56320||b>57343?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):b-56320+(a-55296<<10)+65536}}},"./node_modules/core-js/library/modules/_string-trim.js":(module,__unused_webpack_exports,__webpack_require__)=>{var $export=__webpack_require__("./node_modules/core-js/library/modules/_export.js"),defined=__webpack_require__("./node_modules/core-js/library/modules/_defined.js"),fails=__webpack_require__("./node_modules/core-js/library/modules/_fails.js"),spaces=__webpack_require__("./node_modules/core-js/library/modules/_string-ws.js"),space="["+spaces+"]",ltrim=RegExp("^"+space+space+"*"),rtrim=RegExp(space+space+"*$"),exporter=function(KEY,exec,ALIAS){var exp={},FORCE=fails((function(){return!!spaces[KEY]()||"​"!="​"[KEY]()})),fn=exp[KEY]=FORCE?exec(trim):spaces[KEY];ALIAS&&(exp[ALIAS]=fn),$export($export.P+$export.F*FORCE,"String",exp)},trim=exporter.trim=function(string,TYPE){return string=String(defined(string)),1&TYPE&&(string=string.replace(ltrim,"")),2&TYPE&&(string=string.replace(rtrim,"")),string};module.exports=exporter},"./node_modules/core-js/library/modules/_string-ws.js":module=>{module.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},"./node_modules/core-js/library/modules/_wks.js":(module,__unused_webpack_exports,__webpack_require__)=>{var store=__webpack_require__("./node_modules/core-js/library/modules/_shared.js")("wks"),uid=__webpack_require__("./node_modules/core-js/library/modules/_uid.js"),Symbol=__webpack_require__("./node_modules/core-js/library/modules/_global.js").Symbol,USE_SYMBOL="function"==typeof Symbol;(module.exports=function(name){return store[name]||(store[name]=USE_SYMBOL&&Symbol[name]||(USE_SYMBOL?Symbol:uid)("Symbol."+name))}).store=store},"./node_modules/core-js/library/modules/core.get-iterator-method.js":(module,__unused_webpack_exports,__webpack_require__)=>{var classof=__webpack_require__("./node_modules/core-js/library/modules/_classof.js"),ITERATOR=__webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator"),Iterators=__webpack_require__("./node_modules/core-js/library/modules/_iterators.js");module.exports=__webpack_require__("./node_modules/core-js/library/modules/_core.js").getIteratorMethod=function(it){if(null!=it)return it[ITERATOR]||it["@@iterator"]||Iterators[classof(it)]}},"./node_modules/core-js/library/modules/es6.array.from.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ctx=__webpack_require__("./node_modules/core-js/library/modules/_ctx.js"),$export=__webpack_require__("./node_modules/core-js/library/modules/_export.js"),toObject=__webpack_require__("./node_modules/core-js/library/modules/_to-object.js"),call=__webpack_require__("./node_modules/core-js/library/modules/_iter-call.js"),isArrayIter=__webpack_require__("./node_modules/core-js/library/modules/_is-array-iter.js"),toLength=__webpack_require__("./node_modules/core-js/library/modules/_to-length.js"),createProperty=__webpack_require__("./node_modules/core-js/library/modules/_create-property.js"),getIterFn=__webpack_require__("./node_modules/core-js/library/modules/core.get-iterator-method.js");$export($export.S+$export.F*!__webpack_require__("./node_modules/core-js/library/modules/_iter-detect.js")((function(iter){Array.from(iter)})),"Array",{from:function from(arrayLike){var length,result,step,iterator,O=toObject(arrayLike),C="function"==typeof this?this:Array,aLen=arguments.length,mapfn=aLen>1?arguments[1]:void 0,mapping=void 0!==mapfn,index=0,iterFn=getIterFn(O);if(mapping&&(mapfn=ctx(mapfn,aLen>2?arguments[2]:void 0,2)),null==iterFn||C==Array&&isArrayIter(iterFn))for(result=new C(length=toLength(O.length));length>index;index++)createProperty(result,index,mapping?mapfn(O[index],index):O[index]);else for(iterator=iterFn.call(O),result=new C;!(step=iterator.next()).done;index++)createProperty(result,index,mapping?call(iterator,mapfn,[step.value,index],!0):step.value);return result.length=index,result}})},"./node_modules/core-js/library/modules/es6.array.is-array.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var $export=__webpack_require__("./node_modules/core-js/library/modules/_export.js");$export($export.S,"Array",{isArray:__webpack_require__("./node_modules/core-js/library/modules/_is-array.js")})},"./node_modules/core-js/library/modules/es6.parse-int.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var $export=__webpack_require__("./node_modules/core-js/library/modules/_export.js"),$parseInt=__webpack_require__("./node_modules/core-js/library/modules/_parse-int.js");$export($export.G+$export.F*(parseInt!=$parseInt),{parseInt:$parseInt})},"./node_modules/core-js/library/modules/es6.string.iterator.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var $at=__webpack_require__("./node_modules/core-js/library/modules/_string-at.js")(!0);__webpack_require__("./node_modules/core-js/library/modules/_iter-define.js")(String,"String",(function(iterated){this._t=String(iterated),this._i=0}),(function(){var point,O=this._t,index=this._i;return index>=O.length?{value:void 0,done:!0}:(point=$at(O,index),this._i+=point.length,{value:point,done:!1})}))},"./node_modules/core-js/library/modules/es7.object.values.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var $export=__webpack_require__("./node_modules/core-js/library/modules/_export.js"),$values=__webpack_require__("./node_modules/core-js/library/modules/_object-to-array.js")(!1);$export($export.S,"Object",{values:function values(it){return $values(it)}})},"./node_modules/dom-helpers/activeElement.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function activeElement(doc){void 0===doc&&(doc=(0,_ownerDocument.default)());try{return doc.activeElement}catch(e){}};var _ownerDocument=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/ownerDocument.js"));module.exports=exports.default},"./node_modules/dom-helpers/class/addClass.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function addClass(element,className){element.classList?element.classList.add(className):(0,_hasClass.default)(element,className)||("string"==typeof element.className?element.className=element.className+" "+className:element.setAttribute("class",(element.className&&element.className.baseVal||"")+" "+className))};var _hasClass=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/class/hasClass.js"));module.exports=exports.default},"./node_modules/dom-helpers/class/hasClass.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function hasClass(element,className){return element.classList?!!className&&element.classList.contains(className):-1!==(" "+(element.className.baseVal||element.className)+" ").indexOf(" "+className+" ")},module.exports=exports.default},"./node_modules/dom-helpers/class/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=void 0;var _addClass=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/class/addClass.js"));exports.addClass=_addClass.default;var _removeClass=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/class/removeClass.js"));exports.removeClass=_removeClass.default;var _hasClass=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/class/hasClass.js"));exports.hasClass=_hasClass.default;var _default={addClass:_addClass.default,removeClass:_removeClass.default,hasClass:_hasClass.default};exports.default=_default},"./node_modules/dom-helpers/class/removeClass.js":module=>{"use strict";function replaceClassName(origClass,classToRemove){return origClass.replace(new RegExp("(^|\\s)"+classToRemove+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}module.exports=function removeClass(element,className){element.classList?element.classList.remove(className):"string"==typeof element.className?element.className=replaceClassName(element.className,className):element.setAttribute("class",replaceClassName(element.className&&element.className.baseVal||"",className))}},"./node_modules/dom-helpers/events/filter.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function filterEvents(selector,handler){return function filterHandler(e){var top=e.currentTarget,target=e.target;(0,_querySelectorAll.default)(top,selector).some((function(match){return(0,_contains.default)(match,target)}))&&handler.call(this,e)}};var _contains=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/contains.js")),_querySelectorAll=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/querySelectorAll.js"));module.exports=exports.default},"./node_modules/dom-helpers/events/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.Ay=void 0;var _on=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/on.js"));_on.default;var _off=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/off.js"));_off.default;var _filter=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/filter.js"));_filter.default;var _listen=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/listen.js"));_listen.default;var _default={on:_on.default,off:_off.default,filter:_filter.default,listen:_listen.default};exports.Ay=_default},"./node_modules/dom-helpers/events/listen.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=void 0;var _inDOM=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")),_on=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/on.js")),_off=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/off.js")),listen=function listen(){};_inDOM.default&&(listen=function listen(node,eventName,handler,capture){return(0,_on.default)(node,eventName,handler,capture),function(){(0,_off.default)(node,eventName,handler,capture)}});var _default=listen;exports.default=_default,module.exports=exports.default},"./node_modules/dom-helpers/events/off.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=void 0;var off=function off(){};_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")).default&&(off=document.addEventListener?function(node,eventName,handler,capture){return node.removeEventListener(eventName,handler,capture||!1)}:document.attachEvent?function(node,eventName,handler){return node.detachEvent("on"+eventName,handler)}:void 0);var _default=off;exports.default=_default,module.exports=exports.default},"./node_modules/dom-helpers/events/on.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=void 0;var on=function on(){};_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")).default&&(on=document.addEventListener?function(node,eventName,handler,capture){return node.addEventListener(eventName,handler,capture||!1)}:document.attachEvent?function(node,eventName,handler){return node.attachEvent("on"+eventName,(function(e){(e=e||window.event).target=e.target||e.srcElement,e.currentTarget=node,handler.call(node,e)}))}:void 0);var _default=on;exports.default=_default,module.exports=exports.default},"./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/extends.js":module=>{function _extends(){return module.exports=_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}module.exports=_extends},"./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js":module=>{module.exports=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}},"./node_modules/dom-helpers/ownerDocument.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function ownerDocument(node){return node&&node.ownerDocument||document},module.exports=exports.default},"./node_modules/dom-helpers/query/contains.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=void 0;var _default=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")).default?function(context,node){return context.contains?context.contains(node):context.compareDocumentPosition?context===node||!!(16&context.compareDocumentPosition(node)):fallback(context,node)}:fallback;function fallback(context,node){if(node)do{if(node===context)return!0}while(node=node.parentNode);return!1}exports.default=_default,module.exports=exports.default},"./node_modules/dom-helpers/query/isWindow.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function getWindow(node){return node===node.window?node:9===node.nodeType&&(node.defaultView||node.parentWindow)},module.exports=exports.default},"./node_modules/dom-helpers/query/offset.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function offset(node){var doc=(0,_ownerDocument.default)(node),win=(0,_isWindow.default)(doc),docElem=doc&&doc.documentElement,box={top:0,left:0,height:0,width:0};if(!doc)return;if(!(0,_contains.default)(docElem,node))return box;void 0!==node.getBoundingClientRect&&(box=node.getBoundingClientRect());return box={top:box.top+(win.pageYOffset||docElem.scrollTop)-(docElem.clientTop||0),left:box.left+(win.pageXOffset||docElem.scrollLeft)-(docElem.clientLeft||0),width:(null==box.width?node.offsetWidth:box.width)||0,height:(null==box.height?node.offsetHeight:box.height)||0}};var _contains=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/contains.js")),_isWindow=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/isWindow.js")),_ownerDocument=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/ownerDocument.js"));module.exports=exports.default},"./node_modules/dom-helpers/query/offsetParent.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function offsetParent(node){var doc=(0,_ownerDocument.default)(node),offsetParent=node&&node.offsetParent;for(;offsetParent&&"html"!==nodeName(node)&&"static"===(0,_style.default)(offsetParent,"position");)offsetParent=offsetParent.offsetParent;return offsetParent||doc.documentElement};var _ownerDocument=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/ownerDocument.js")),_style=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/style/index.js"));function nodeName(node){return node.nodeName&&node.nodeName.toLowerCase()}module.exports=exports.default},"./node_modules/dom-helpers/query/position.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function position(node,offsetParent){var offset,parentOffset={top:0,left:0};"fixed"===(0,_style.default)(node,"position")?offset=node.getBoundingClientRect():(offsetParent=offsetParent||(0,_offsetParent.default)(node),offset=(0,_offset.default)(node),"html"!==function nodeName(node){return node.nodeName&&node.nodeName.toLowerCase()}(offsetParent)&&(parentOffset=(0,_offset.default)(offsetParent)),parentOffset.top+=parseInt((0,_style.default)(offsetParent,"borderTopWidth"),10)-(0,_scrollTop.default)(offsetParent)||0,parentOffset.left+=parseInt((0,_style.default)(offsetParent,"borderLeftWidth"),10)-(0,_scrollLeft.default)(offsetParent)||0);return(0,_extends2.default)({},offset,{top:offset.top-parentOffset.top-(parseInt((0,_style.default)(node,"marginTop"),10)||0),left:offset.left-parentOffset.left-(parseInt((0,_style.default)(node,"marginLeft"),10)||0)})};var _extends2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/extends.js")),_offset=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/offset.js")),_offsetParent=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/offsetParent.js")),_scrollTop=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/scrollTop.js")),_scrollLeft=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/scrollLeft.js")),_style=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/style/index.js"));module.exports=exports.default},"./node_modules/dom-helpers/query/querySelectorAll.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function qsa(element,selector){var found,maybeID="#"===selector[0],maybeClass="."===selector[0],nameOnly=maybeID||maybeClass?selector.slice(1):selector;if(simpleSelectorRE.test(nameOnly))return maybeID?(found=(element=element.getElementById?element:document).getElementById(nameOnly))?[found]:[]:element.getElementsByClassName&&maybeClass?toArray(element.getElementsByClassName(nameOnly)):toArray(element.getElementsByTagName(selector));return toArray(element.querySelectorAll(selector))};var simpleSelectorRE=/^[\w-]*$/,toArray=Function.prototype.bind.call(Function.prototype.call,[].slice);module.exports=exports.default},"./node_modules/dom-helpers/query/scrollLeft.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function scrollTop(node,val){var win=(0,_isWindow.default)(node);if(void 0===val)return win?"pageXOffset"in win?win.pageXOffset:win.document.documentElement.scrollLeft:node.scrollLeft;win?win.scrollTo(val,"pageYOffset"in win?win.pageYOffset:win.document.documentElement.scrollTop):node.scrollLeft=val};var _isWindow=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/isWindow.js"));module.exports=exports.default},"./node_modules/dom-helpers/query/scrollTop.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function scrollTop(node,val){var win=(0,_isWindow.default)(node);if(void 0===val)return win?"pageYOffset"in win?win.pageYOffset:win.document.documentElement.scrollTop:node.scrollTop;win?win.scrollTo("pageXOffset"in win?win.pageXOffset:win.document.documentElement.scrollLeft,val):node.scrollTop=val};var _isWindow=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/isWindow.js"));module.exports=exports.default},"./node_modules/dom-helpers/style/getComputedStyle.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function _getComputedStyle(node){if(!node)throw new TypeError("No Element passed to `getComputedStyle()`");var doc=node.ownerDocument;return"defaultView"in doc?doc.defaultView.opener?node.ownerDocument.defaultView.getComputedStyle(node,null):window.getComputedStyle(node,null):{getPropertyValue:function getPropertyValue(prop){var style=node.style;"float"==(prop=(0,_camelizeStyle.default)(prop))&&(prop="styleFloat");var current=node.currentStyle[prop]||null;if(null==current&&style&&style[prop]&&(current=style[prop]),rnumnonpx.test(current)&&!rposition.test(prop)){var left=style.left,runStyle=node.runtimeStyle,rsLeft=runStyle&&runStyle.left;rsLeft&&(runStyle.left=node.currentStyle.left),style.left="fontSize"===prop?"1em":current,current=style.pixelLeft+"px",style.left=left,rsLeft&&(runStyle.left=rsLeft)}return current}}};var _camelizeStyle=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/camelizeStyle.js")),rposition=/^(top|right|bottom|left)$/,rnumnonpx=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;module.exports=exports.default},"./node_modules/dom-helpers/style/index.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function style(node,property,value){var css="",transforms="",props=property;if("string"==typeof property){if(void 0===value)return node.style[(0,_camelizeStyle.default)(property)]||(0,_getComputedStyle2.default)(node).getPropertyValue((0,_hyphenateStyle.default)(property));(props={})[property]=value}Object.keys(props).forEach((function(key){var value=props[key];value||0===value?(0,_isTransform.default)(key)?transforms+=key+"("+value+") ":css+=(0,_hyphenateStyle.default)(key)+": "+value+";":(0,_removeStyle.default)(node,(0,_hyphenateStyle.default)(key))})),transforms&&(css+=_properties.transform+": "+transforms+";");node.style.cssText+=";"+css};var _camelizeStyle=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/camelizeStyle.js")),_hyphenateStyle=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/hyphenateStyle.js")),_getComputedStyle2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/style/getComputedStyle.js")),_removeStyle=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/style/removeStyle.js")),_properties=__webpack_require__("./node_modules/dom-helpers/transition/properties.js"),_isTransform=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/transition/isTransform.js"));module.exports=exports.default},"./node_modules/dom-helpers/style/removeStyle.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function removeStyle(node,key){return"removeProperty"in node.style?node.style.removeProperty(key):node.style.removeAttribute(key)},module.exports=exports.default},"./node_modules/dom-helpers/transition/end.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=void 0;var _properties=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/transition/properties.js")),_style=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/style/index.js"));function onEnd(node,handler,duration){var backup,fakeEvent={target:node,currentTarget:node};function done(event){event.target===event.currentTarget&&(clearTimeout(backup),event.target.removeEventListener(_properties.default.end,done),handler.call(this))}_properties.default.end?null==duration&&(duration=parseDuration(node)||0):duration=0,_properties.default.end?(node.addEventListener(_properties.default.end,done,!1),backup=setTimeout((function(){return done(fakeEvent)}),1.5*(duration||100))):setTimeout(done.bind(null,fakeEvent),0)}onEnd._parseDuration=parseDuration;var _default=onEnd;function parseDuration(node){var str=(0,_style.default)(node,_properties.default.duration),mult=-1===str.indexOf("ms")?1e3:1;return parseFloat(str)*mult}exports.default=_default,module.exports=exports.default},"./node_modules/dom-helpers/transition/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.Ay=void 0;var _end=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/transition/end.js"));_end.default;var _properties=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/transition/properties.js"));_properties.default;var _default={end:_end.default,properties:_properties.default};exports.Ay=_default},"./node_modules/dom-helpers/transition/isTransform.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function isTransform(property){return!(!property||!supportedTransforms.test(property))};var supportedTransforms=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;module.exports=exports.default},"./node_modules/dom-helpers/transition/properties.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=exports.animationEnd=exports.animationDelay=exports.animationTiming=exports.animationDuration=exports.animationName=exports.transitionEnd=exports.transitionDuration=exports.transitionDelay=exports.transitionTiming=exports.transitionProperty=exports.transform=void 0;var prefix,transitionEnd,animationEnd,transitionProperty,transitionDuration,transitionTiming,transitionDelay,animationName,animationDuration,animationTiming,animationDelay,_inDOM=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")),transform="transform";if(exports.transform=transform,exports.animationEnd=animationEnd,exports.transitionEnd=transitionEnd,exports.transitionDelay=transitionDelay,exports.transitionTiming=transitionTiming,exports.transitionDuration=transitionDuration,exports.transitionProperty=transitionProperty,exports.animationDelay=animationDelay,exports.animationTiming=animationTiming,exports.animationDuration=animationDuration,exports.animationName=animationName,_inDOM.default){var _getTransitionPropert=function getTransitionProperties(){for(var transitionEnd,animationEnd,style=document.createElement("div").style,vendorMap={O:function O(e){return"o"+e.toLowerCase()},Moz:function Moz(e){return e.toLowerCase()},Webkit:function Webkit(e){return"webkit"+e},ms:function ms(e){return"MS"+e}},vendors=Object.keys(vendorMap),prefix="",i=0;i<vendors.length;i++){var vendor=vendors[i];if(vendor+"TransitionProperty"in style){prefix="-"+vendor.toLowerCase(),transitionEnd=vendorMap[vendor]("TransitionEnd"),animationEnd=vendorMap[vendor]("AnimationEnd");break}}!transitionEnd&&"transitionProperty"in style&&(transitionEnd="transitionend");!animationEnd&&"animationName"in style&&(animationEnd="animationend");return style=null,{animationEnd,transitionEnd,prefix}}();prefix=_getTransitionPropert.prefix,exports.transitionEnd=transitionEnd=_getTransitionPropert.transitionEnd,exports.animationEnd=animationEnd=_getTransitionPropert.animationEnd,exports.transform=transform=prefix+"-"+transform,exports.transitionProperty=transitionProperty=prefix+"-transition-property",exports.transitionDuration=transitionDuration=prefix+"-transition-duration",exports.transitionDelay=transitionDelay=prefix+"-transition-delay",exports.transitionTiming=transitionTiming=prefix+"-transition-timing-function",exports.animationName=animationName=prefix+"-animation-name",exports.animationDuration=animationDuration=prefix+"-animation-duration",exports.animationTiming=animationTiming=prefix+"-animation-delay",exports.animationDelay=animationDelay=prefix+"-animation-timing-function"}var _default={transform,end:transitionEnd,property:transitionProperty,timing:transitionTiming,delay:transitionDelay,duration:transitionDuration};exports.default=_default},"./node_modules/dom-helpers/util/camelize.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function camelize(string){return string.replace(rHyphen,(function(_,chr){return chr.toUpperCase()}))};var rHyphen=/-(.)/g;module.exports=exports.default},"./node_modules/dom-helpers/util/camelizeStyle.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function camelizeStyleName(string){return(0,_camelize.default)(string.replace(msPattern,"ms-"))};var _camelize=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/camelize.js")),msPattern=/^-ms-/;module.exports=exports.default},"./node_modules/dom-helpers/util/hyphenate.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function hyphenate(string){return string.replace(rUpper,"-$1").toLowerCase()};var rUpper=/([A-Z])/g;module.exports=exports.default},"./node_modules/dom-helpers/util/hyphenateStyle.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function hyphenateStyleName(string){return(0,_hyphenate.default)(string).replace(msPattern,"-ms-")};var _hyphenate=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/hyphenate.js")),msPattern=/^ms-/;module.exports=exports.default},"./node_modules/dom-helpers/util/inDOM.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=void 0;var _default=!("undefined"==typeof window||!window.document||!window.document.createElement);exports.default=_default,module.exports=exports.default},"./node_modules/dom-helpers/util/scrollbarSize.js":(module,exports,__webpack_require__)=>{"use strict";var _interopRequireDefault=__webpack_require__("./node_modules/dom-helpers/node_modules/@babel/runtime/helpers/interopRequireDefault.js");exports.__esModule=!0,exports.default=function scrollbarSize(recalc){if((!size&&0!==size||recalc)&&_inDOM.default){var scrollDiv=document.createElement("div");scrollDiv.style.position="absolute",scrollDiv.style.top="-9999px",scrollDiv.style.width="50px",scrollDiv.style.height="50px",scrollDiv.style.overflow="scroll",document.body.appendChild(scrollDiv),size=scrollDiv.offsetWidth-scrollDiv.clientWidth,document.body.removeChild(scrollDiv)}return size};var size,_inDOM=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js"));module.exports=exports.default},"./node_modules/keycode/index.js":(module,exports)=>{function keyCode(searchInput){if(searchInput&&"object"==typeof searchInput){var hasKeyCode=searchInput.which||searchInput.keyCode||searchInput.charCode;hasKeyCode&&(searchInput=hasKeyCode)}if("number"==typeof searchInput)return names[searchInput];var foundNamedKey,search=String(searchInput);return(foundNamedKey=codes[search.toLowerCase()])?foundNamedKey:(foundNamedKey=aliases[search.toLowerCase()])||(1===search.length?search.charCodeAt(0):void 0)}keyCode.isEventKey=function isEventKey(event,nameOrCode){if(event&&"object"==typeof event){var keyCode=event.which||event.keyCode||event.charCode;if(null==keyCode)return!1;if("string"==typeof nameOrCode){var foundNamedKey;if(foundNamedKey=codes[nameOrCode.toLowerCase()])return foundNamedKey===keyCode;if(foundNamedKey=aliases[nameOrCode.toLowerCase()])return foundNamedKey===keyCode}else if("number"==typeof nameOrCode)return nameOrCode===keyCode;return!1}};var codes=(exports=module.exports=keyCode).code=exports.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},aliases=exports.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};for(i=97;i<123;i++)codes[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)codes[i-48]=i;for(i=1;i<13;i++)codes["f"+i]=i+111;for(i=0;i<10;i++)codes["numpad "+i]=i+96;var names=exports.names=exports.title={};for(i in codes)names[codes[i]]=i;for(var alias in aliases)codes[alias]=aliases[alias]},"./node_modules/prop-types-extra/lib/all.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function all(){for(var _len=arguments.length,validators=Array(_len),_key=0;_key<_len;_key++)validators[_key]=arguments[_key];return(0,_createChainableTypeChecker2.default)((function allPropTypes(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];var error=null;return validators.forEach((function(validator){if(null==error){var result=validator.apply(void 0,args);null!=result&&(error=result)}})),error}))};var _createChainableTypeChecker2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js"));module.exports=exports.default},"./node_modules/prop-types-extra/lib/componentOrElement.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_createChainableTypeChecker2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default=(0,_createChainableTypeChecker2.default)((function validate(props,propName,componentName,location,propFullName){var propValue=props[propName],propType=void 0===propValue?"undefined":_typeof(propValue);return _react2.default.isValidElement(propValue)?new Error("Invalid "+location+" `"+propFullName+"` of type ReactElement supplied to `"+componentName+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===propType&&"function"==typeof propValue.render||1===propValue.nodeType?null:new Error("Invalid "+location+" `"+propFullName+"` of value `"+propValue+"` supplied to `"+componentName+"`, expected a ReactComponent or a DOMElement.")})),module.exports=exports.default},"./node_modules/prop-types-extra/lib/deprecated.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=deprecated;var _warning2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/warning/browser.js"));var warned={};function deprecated(validator,reason){return function validate(props,propName,componentName,location,propFullName){var componentNameSafe=componentName||"<<anonymous>>",propFullNameSafe=propFullName||propName;if(null!=props[propName]){var messageKey=componentName+"."+propName;(0,_warning2.default)(warned[messageKey],"The "+location+" `"+propFullNameSafe+"` of `"+componentNameSafe+"` is deprecated. "+reason+"."),warned[messageKey]=!0}for(var _len=arguments.length,args=Array(_len>5?_len-5:0),_key=5;_key<_len;_key++)args[_key-5]=arguments[_key];return validator.apply(void 0,[props,propName,componentName,location,propFullName].concat(args))}}deprecated._resetWarned=function _resetWarned(){warned={}},module.exports=exports.default},"./node_modules/prop-types-extra/lib/isRequiredForA11y.js":(module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function isRequiredForA11y(validator){return function validate(props,propName,componentName,location,propFullName){var componentNameSafe=componentName||"<<anonymous>>",propFullNameSafe=propFullName||propName;if(null==props[propName])return new Error("The "+location+" `"+propFullNameSafe+"` is required to make `"+componentNameSafe+"` accessible for users of assistive technologies such as screen readers.");for(var _len=arguments.length,args=Array(_len>5?_len-5:0),_key=5;_key<_len;_key++)args[_key-5]=arguments[_key];return validator.apply(void 0,[props,propName,componentName,location,propFullName].concat(args))}},module.exports=exports.default},"./node_modules/react-bootstrap/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Accordion:()=>es_Accordion,Alert:()=>es_Alert,Badge:()=>es_Badge,Breadcrumb:()=>es_Breadcrumb,BreadcrumbItem:()=>es_BreadcrumbItem,Button:()=>es_Button,ButtonGroup:()=>es_ButtonGroup,ButtonToolbar:()=>es_ButtonToolbar,Carousel:()=>es_Carousel,CarouselItem:()=>es_CarouselItem,Checkbox:()=>es_Checkbox,Clearfix:()=>es_Clearfix,CloseButton:()=>es_CloseButton,Col:()=>es_Col,Collapse:()=>es_Collapse,ControlLabel:()=>es_ControlLabel,Dropdown:()=>es_Dropdown,DropdownButton:()=>es_DropdownButton,Fade:()=>es_Fade,Form:()=>es_Form,FormControl:()=>es_FormControl,FormGroup:()=>es_FormGroup,Glyphicon:()=>es_Glyphicon,Grid:()=>es_Grid,HelpBlock:()=>es_HelpBlock,Image:()=>es_Image,InputGroup:()=>es_InputGroup,Jumbotron:()=>es_Jumbotron,Label:()=>es_Label,ListGroup:()=>es_ListGroup,ListGroupItem:()=>es_ListGroupItem,Media:()=>es_Media,MenuItem:()=>es_MenuItem,Modal:()=>es_Modal,ModalBody:()=>es_ModalBody,ModalDialog:()=>es_ModalDialog,ModalFooter:()=>es_ModalFooter,ModalHeader:()=>es_ModalHeader,ModalTitle:()=>es_ModalTitle,Nav:()=>es_Nav,NavDropdown:()=>es_NavDropdown,NavItem:()=>es_NavItem,Navbar:()=>es_Navbar,NavbarBrand:()=>es_NavbarBrand,Overlay:()=>es_Overlay,OverlayTrigger:()=>es_OverlayTrigger,PageHeader:()=>es_PageHeader,PageItem:()=>PageItem,Pager:()=>es_Pager,Pagination:()=>es_Pagination,Panel:()=>es_Panel,PanelGroup:()=>es_PanelGroup,Popover:()=>es_Popover,ProgressBar:()=>es_ProgressBar,Radio:()=>es_Radio,ResponsiveEmbed:()=>es_ResponsiveEmbed,Row:()=>es_Row,SafeAnchor:()=>es_SafeAnchor,SplitButton:()=>es_SplitButton,Tab:()=>es_Tab,TabContainer:()=>es_TabContainer,TabContent:()=>es_TabContent,TabPane:()=>es_TabPane,Table:()=>es_Table,Tabs:()=>es_Tabs,Thumbnail:()=>es_Thumbnail,ToggleButton:()=>es_ToggleButton,ToggleButtonGroup:()=>es_ToggleButtonGroup,Tooltip:()=>es_Tooltip,Well:()=>es_Well,utils:()=>utils_namespaceObject});var bootstrapUtils_namespaceObject={};__webpack_require__.r(bootstrapUtils_namespaceObject),__webpack_require__.d(bootstrapUtils_namespaceObject,{_curry:()=>_curry,addStyle:()=>addStyle,bsClass:()=>bsClass,bsSizes:()=>bsSizes,bsStyles:()=>bsStyles,getClassSet:()=>getClassSet,prefix:()=>prefix,splitBsProps:()=>splitBsProps,splitBsPropsAndOmit:()=>splitBsPropsAndOmit});var utils_namespaceObject={};__webpack_require__.r(utils_namespaceObject),__webpack_require__.d(utils_namespaceObject,{ValidComponentChildren:()=>ValidComponentChildren,bootstrapUtils:()=>bootstrapUtils_namespaceObject,createChainedFunction:()=>utils_createChainedFunction});var object_assign=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/object/assign.js"),assign_default=__webpack_require__.n(object_assign);function _extends(){return _extends=assign_default()||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var create=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/object/create.js"),create_default=__webpack_require__.n(create);function _inheritsLoose(subClass,superClass){subClass.prototype=create_default()(superClass.prototype),subClass.prototype.constructor=subClass,subClass.__proto__=superClass}var react=__webpack_require__("./node_modules/react/index.js"),keys=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/object/keys.js"),keys_default=__webpack_require__.n(keys);function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=keys_default()(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}var classnames=__webpack_require__("./node_modules/react-bootstrap/node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),esm=__webpack_require__("./node_modules/uncontrollable/lib/esm/index.js"),entries=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/object/entries.js"),entries_default=__webpack_require__.n(entries),browser=__webpack_require__("./node_modules/invariant/browser.js"),browser_default=__webpack_require__.n(browser),Size_LARGE="large",Size_SMALL="small",Size_XSMALL="xsmall",SIZE_MAP={large:"lg",medium:"md",small:"sm",xsmall:"xs",lg:"lg",md:"md",sm:"sm",xs:"xs"},DEVICE_SIZES=["lg","md","sm","xs"],State={SUCCESS:"success",WARNING:"warning",DANGER:"danger",INFO:"info"},Style_DEFAULT="default",Style_PRIMARY="primary",Style_LINK="link",Style_INVERSE="inverse";function curry(fn){return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return"function"==typeof args[args.length-1]?fn.apply(void 0,args):function(Component){return fn.apply(void 0,args.concat([Component]))}}}function prefix(props,variant){var bsClass=(props.bsClass||"").trim();return null==bsClass&&browser_default()(!1),bsClass+(variant?"-"+variant:"")}var bsClass=curry((function(defaultClass,Component){var propTypes=Component.propTypes||(Component.propTypes={}),defaultProps=Component.defaultProps||(Component.defaultProps={});return propTypes.bsClass=prop_types_default().string,defaultProps.bsClass=defaultClass,Component})),bsStyles=curry((function(styles,defaultStyle,Component){"string"!=typeof defaultStyle&&(Component=defaultStyle,defaultStyle=void 0);var existing=Component.STYLES||[],propTypes=Component.propTypes||{};styles.forEach((function(style){-1===existing.indexOf(style)&&existing.push(style)}));var propType=prop_types_default().oneOf(existing);(Component.STYLES=existing,propType._values=existing,Component.propTypes=_extends({},propTypes,{bsStyle:propType}),void 0!==defaultStyle)&&((Component.defaultProps||(Component.defaultProps={})).bsStyle=defaultStyle);return Component})),bsSizes=curry((function(sizes,defaultSize,Component){"string"!=typeof defaultSize&&(Component=defaultSize,defaultSize=void 0);var existing=Component.SIZES||[],propTypes=Component.propTypes||{};sizes.forEach((function(size){-1===existing.indexOf(size)&&existing.push(size)}));var values=[];existing.forEach((function(size){var mappedSize=SIZE_MAP[size];mappedSize&&mappedSize!==size&&values.push(mappedSize),values.push(size)}));var propType=prop_types_default().oneOf(values);return propType._values=values,Component.SIZES=existing,Component.propTypes=_extends({},propTypes,{bsSize:propType}),void 0!==defaultSize&&(Component.defaultProps||(Component.defaultProps={}),Component.defaultProps.bsSize=defaultSize),Component}));function getClassSet(props){var _classes,classes=((_classes={})[prefix(props)]=!0,_classes);props.bsSize&&(classes[prefix(props,SIZE_MAP[props.bsSize]||props.bsSize)]=!0);return props.bsStyle&&(classes[prefix(props,props.bsStyle)]=!0),classes}function getBsProps(props){return{bsClass:props.bsClass,bsSize:props.bsSize,bsStyle:props.bsStyle,bsRole:props.bsRole}}function isBsProp(propName){return"bsClass"===propName||"bsSize"===propName||"bsStyle"===propName||"bsRole"===propName}function splitBsProps(props){var elementProps={};return entries_default()(props).forEach((function(_ref){var propName=_ref[0],propValue=_ref[1];isBsProp(propName)||(elementProps[propName]=propValue)})),[getBsProps(props),elementProps]}function splitBsPropsAndOmit(props,omittedPropNames){var isOmittedProp={};omittedPropNames.forEach((function(propName){isOmittedProp[propName]=!0}));var elementProps={};return entries_default()(props).forEach((function(_ref2){var propName=_ref2[0],propValue=_ref2[1];isBsProp(propName)||isOmittedProp[propName]||(elementProps[propName]=propValue)})),[getBsProps(props),elementProps]}function addStyle(Component){for(var _len2=arguments.length,styleVariant=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)styleVariant[_key2-1]=arguments[_key2];bsStyles(styleVariant)(Component)}var _curry=curry;const ValidComponentChildren={map:function map(children,func,context){var index=0;return react.Children.map(children,(function(child){return react.isValidElement(child)?func.call(context,child,index++):child}))},forEach:function forEach(children,func,context){var index=0;react.Children.forEach(children,(function(child){react.isValidElement(child)&&func.call(context,child,index++)}))},count:function count(children){var result=0;return react.Children.forEach(children,(function(child){react.isValidElement(child)&&++result})),result},find:function find(children,func,context){var result,index=0;return react.Children.forEach(children,(function(child){result||react.isValidElement(child)&&func.call(context,child,index++)&&(result=child)})),result},filter:function filter(children,func,context){var index=0,result=[];return react.Children.forEach(children,(function(child){react.isValidElement(child)&&func.call(context,child,index++)&&result.push(child)})),result},every:function every(children,func,context){var index=0,result=!0;return react.Children.forEach(children,(function(child){result&&react.isValidElement(child)&&(func.call(context,child,index++)||(result=!1))})),result},some:function some(children,func,context){var index=0,result=!1;return react.Children.forEach(children,(function(child){result||react.isValidElement(child)&&func.call(context,child,index++)&&(result=!0)})),result},toArray:function toArray(children){var result=[];return react.Children.forEach(children,(function(child){react.isValidElement(child)&&result.push(child)})),result}};var createChainableTypeChecker=__webpack_require__("./node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js"),createChainableTypeChecker_default=__webpack_require__.n(createChainableTypeChecker),idPropType=prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number]);var propTypes={accordion:prop_types_default().bool,activeKey:prop_types_default().any,onSelect:prop_types_default().func,role:prop_types_default().string,generateChildId:prop_types_default().func,id:function generatedId(name){return function(props){var error=null;if(!props.generateChildId){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];(error=idPropType.apply(void 0,[props].concat(args)))||props.id||(error=new Error("In order to properly initialize the "+name+" in a way that is accessible to assistive technologies (such as screen readers) an `id` or a `generateChildId` prop to "+name+" is required"))}return error}}("PanelGroup")},childContextTypes={$bs_panelGroup:prop_types_default().shape({getId:prop_types_default().func,headerRole:prop_types_default().string,panelRole:prop_types_default().string,activeKey:prop_types_default().any,onToggle:prop_types_default().func})},PanelGroup=function(_React$Component){function PanelGroup(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).handleSelect=function(key,expanded,e){expanded?_this.props.onSelect(key,e):_this.props.activeKey===key&&_this.props.onSelect(null,e)},_this}_inheritsLoose(PanelGroup,_React$Component);var _proto=PanelGroup.prototype;return _proto.getChildContext=function getChildContext(){var _this$props=this.props,activeKey=_this$props.activeKey,accordion=_this$props.accordion,generateChildId=_this$props.generateChildId,id=_this$props.id,getId=null;return accordion&&(getId=generateChildId||function(key,type){return id?id+"-"+type+"-"+key:null}),{$bs_panelGroup:_extends({getId,headerRole:"tab",panelRole:"tabpanel"},accordion&&{activeKey,onToggle:this.handleSelect})}},_proto.render=function render(){var _this$props2=this.props,accordion=_this$props2.accordion,className=_this$props2.className,children=_this$props2.children,_splitBsPropsAndOmit=splitBsPropsAndOmit(_objectWithoutPropertiesLoose(_this$props2,["accordion","className","children"]),["onSelect","activeKey"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1];accordion&&(elementProps.role=elementProps.role||"tablist");var classes=getClassSet(bsProps);return react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}),ValidComponentChildren.map(children,(function(child){return(0,react.cloneElement)(child,{bsStyle:child.props.bsStyle||bsProps.bsStyle})})))},PanelGroup}(react.Component);PanelGroup.propTypes=propTypes,PanelGroup.defaultProps={accordion:!1},PanelGroup.childContextTypes=childContextTypes;const es_PanelGroup=(0,esm.Pd)(bsClass("panel-group",PanelGroup),{activeKey:"onSelect"});const es_Accordion=function(_React$Component){function Accordion(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Accordion,_React$Component),Accordion.prototype.render=function render(){return react.createElement(es_PanelGroup,_extends({},this.props,{accordion:!0}),this.props.children)},Accordion}(react.Component);var values=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/object/values.js"),values_default=__webpack_require__.n(values),CloseButton_propTypes={label:prop_types_default().string.isRequired,onClick:prop_types_default().func},CloseButton=function(_React$Component){function CloseButton(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(CloseButton,_React$Component),CloseButton.prototype.render=function render(){var _this$props=this.props,label=_this$props.label,onClick=_this$props.onClick;return react.createElement("button",{type:"button",className:"close",onClick},react.createElement("span",{"aria-hidden":"true"},"×"),react.createElement("span",{className:"sr-only"},label))},CloseButton}(react.Component);CloseButton.propTypes=CloseButton_propTypes,CloseButton.defaultProps={label:"Close"};const es_CloseButton=CloseButton;var Alert_propTypes={onDismiss:prop_types_default().func,closeLabel:prop_types_default().string},Alert=function(_React$Component){function Alert(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Alert,_React$Component),Alert.prototype.render=function render(){var _extends2,_this$props=this.props,onDismiss=_this$props.onDismiss,closeLabel=_this$props.closeLabel,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["onDismiss","closeLabel","className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],dismissable=!!onDismiss,classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,"dismissable")]=dismissable,_extends2));return react.createElement("div",_extends({},elementProps,{role:"alert",className:classnames_default()(className,classes)}),dismissable&&react.createElement(es_CloseButton,{onClick:onDismiss,label:closeLabel}),children)},Alert}(react.Component);Alert.propTypes=Alert_propTypes,Alert.defaultProps={closeLabel:"Close alert"};const es_Alert=bsStyles(values_default()(State),State.INFO,bsClass("alert",Alert));var Badge_propTypes={pullRight:prop_types_default().bool},Badge=function(_React$Component){function Badge(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(Badge,_React$Component);var _proto=Badge.prototype;return _proto.hasContent=function hasContent(children){var result=!1;return react.Children.forEach(children,(function(child){result||(child||0===child)&&(result=!0)})),result},_proto.render=function render(){var _this$props=this.props,pullRight=_this$props.pullRight,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["pullRight","className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),{"pull-right":pullRight,hidden:!this.hasContent(children)});return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}),children)},Badge}(react.Component);Badge.propTypes=Badge_propTypes,Badge.defaultProps={pullRight:!1};const es_Badge=bsClass("badge",Badge);function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}var elementType=__webpack_require__("./node_modules/prop-types-extra/lib/elementType.js"),elementType_default=__webpack_require__.n(elementType);const utils_createChainedFunction=function createChainedFunction(){for(var _len=arguments.length,funcs=new Array(_len),_key=0;_key<_len;_key++)funcs[_key]=arguments[_key];return funcs.filter((function(f){return null!=f})).reduce((function(acc,f){if("function"!=typeof f)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===acc?f:function chainedFunction(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];acc.apply(this,args),f.apply(this,args)}}),null)};var SafeAnchor_propTypes={href:prop_types_default().string,onClick:prop_types_default().func,onKeyDown:prop_types_default().func,disabled:prop_types_default().bool,role:prop_types_default().string,tabIndex:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),componentClass:elementType_default()};function isTrivialHref(href){return!href||"#"===href.trim()}var SafeAnchor=function(_React$Component){function SafeAnchor(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleClick=_this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleKeyDown=_this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(SafeAnchor,_React$Component);var _proto=SafeAnchor.prototype;return _proto.handleClick=function handleClick(event){var _this$props=this.props,disabled=_this$props.disabled,href=_this$props.href,onClick=_this$props.onClick;(disabled||isTrivialHref(href))&&event.preventDefault(),disabled?event.stopPropagation():onClick&&onClick(event)},_proto.handleKeyDown=function handleKeyDown(event){" "===event.key&&(event.preventDefault(),this.handleClick(event))},_proto.render=function render(){var _this$props2=this.props,Component=_this$props2.componentClass,disabled=_this$props2.disabled,onKeyDown=_this$props2.onKeyDown,props=_objectWithoutPropertiesLoose(_this$props2,["componentClass","disabled","onKeyDown"]);return isTrivialHref(props.href)&&(props.role=props.role||"button",props.href=props.href||"#"),disabled&&(props.tabIndex=-1,props.style=_extends({pointerEvents:"none"},props.style)),react.createElement(Component,_extends({},props,{onClick:this.handleClick,onKeyDown:utils_createChainedFunction(this.handleKeyDown,onKeyDown)}))},SafeAnchor}(react.Component);SafeAnchor.propTypes=SafeAnchor_propTypes,SafeAnchor.defaultProps={componentClass:"a"};const es_SafeAnchor=SafeAnchor;var BreadcrumbItem_propTypes={active:prop_types_default().bool,href:prop_types_default().string,title:prop_types_default().node,target:prop_types_default().string},BreadcrumbItem=function(_React$Component){function BreadcrumbItem(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(BreadcrumbItem,_React$Component),BreadcrumbItem.prototype.render=function render(){var _this$props=this.props,active=_this$props.active,href=_this$props.href,title=_this$props.title,target=_this$props.target,className=_this$props.className,props=_objectWithoutPropertiesLoose(_this$props,["active","href","title","target","className"]),linkProps={href,title,target};return react.createElement("li",{className:classnames_default()(className,{active})},active?react.createElement("span",props):react.createElement(es_SafeAnchor,_extends({},props,linkProps)))},BreadcrumbItem}(react.Component);BreadcrumbItem.propTypes=BreadcrumbItem_propTypes,BreadcrumbItem.defaultProps={active:!1};const es_BreadcrumbItem=BreadcrumbItem;var Breadcrumb=function(_React$Component){function Breadcrumb(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Breadcrumb,_React$Component),Breadcrumb.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("ol",_extends({},elementProps,{role:"navigation","aria-label":"breadcrumbs",className:classnames_default()(className,classes)}))},Breadcrumb}(react.Component);Breadcrumb.Item=es_BreadcrumbItem;const es_Breadcrumb=bsClass("breadcrumb",Breadcrumb);var Button_propTypes={active:prop_types_default().bool,disabled:prop_types_default().bool,block:prop_types_default().bool,onClick:prop_types_default().func,componentClass:elementType_default(),href:prop_types_default().string,type:prop_types_default().oneOf(["button","reset","submit"])},Button=function(_React$Component){function Button(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(Button,_React$Component);var _proto=Button.prototype;return _proto.renderAnchor=function renderAnchor(elementProps,className){return react.createElement(es_SafeAnchor,_extends({},elementProps,{className:classnames_default()(className,elementProps.disabled&&"disabled")}))},_proto.renderButton=function renderButton(_ref,className){var componentClass=_ref.componentClass,elementProps=_objectWithoutPropertiesLoose(_ref,["componentClass"]),Component=componentClass||"button";return react.createElement(Component,_extends({},elementProps,{type:elementProps.type||"button",className}))},_proto.render=function render(){var _extends2,_this$props=this.props,active=_this$props.active,block=_this$props.block,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["active","block","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={active})[prefix(bsProps,"block")]=block,_extends2)),fullClassName=classnames_default()(className,classes);return elementProps.href?this.renderAnchor(elementProps,fullClassName):this.renderButton(elementProps,fullClassName)},Button}(react.Component);Button.propTypes=Button_propTypes,Button.defaultProps={active:!1,block:!1,disabled:!1};const es_Button=bsClass("btn",bsSizes([Size_LARGE,Size_SMALL,Size_XSMALL],bsStyles(values_default()(State).concat([Style_DEFAULT,Style_PRIMARY,Style_LINK]),Style_DEFAULT,Button)));var lib_all=__webpack_require__("./node_modules/prop-types-extra/lib/all.js"),all_default=__webpack_require__.n(lib_all),ButtonGroup_propTypes={vertical:prop_types_default().bool,justified:prop_types_default().bool,block:all_default()(prop_types_default().bool,(function(_ref){var block=_ref.block,vertical=_ref.vertical;return block&&!vertical?new Error("`block` requires `vertical` to be set to have any effect"):null}))},ButtonGroup=function(_React$Component){function ButtonGroup(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ButtonGroup,_React$Component),ButtonGroup.prototype.render=function render(){var _extends2,_this$props=this.props,block=_this$props.block,justified=_this$props.justified,vertical=_this$props.vertical,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["block","justified","vertical","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps)]=!vertical,_extends2[prefix(bsProps,"vertical")]=vertical,_extends2[prefix(bsProps,"justified")]=justified,_extends2[prefix(es_Button.defaultProps,"block")]=block,_extends2));return react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}))},ButtonGroup}(react.Component);ButtonGroup.propTypes=ButtonGroup_propTypes,ButtonGroup.defaultProps={block:!1,justified:!1,vertical:!1};const es_ButtonGroup=bsClass("btn-group",ButtonGroup);var ButtonToolbar=function(_React$Component){function ButtonToolbar(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ButtonToolbar,_React$Component),ButtonToolbar.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("div",_extends({},elementProps,{role:"toolbar",className:classnames_default()(className,classes)}))},ButtonToolbar}(react.Component);const es_ButtonToolbar=bsClass("btn-toolbar",ButtonToolbar);var CarouselCaption_propTypes={componentClass:elementType_default()},CarouselCaption=function(_React$Component){function CarouselCaption(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(CarouselCaption,_React$Component),CarouselCaption.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},CarouselCaption}(react.Component);CarouselCaption.propTypes=CarouselCaption_propTypes,CarouselCaption.defaultProps={componentClass:"div"};const es_CarouselCaption=bsClass("carousel-caption",CarouselCaption);var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),transition=__webpack_require__("./node_modules/dom-helpers/transition/index.js"),CarouselItem_propTypes={direction:prop_types_default().oneOf(["prev","next"]),onAnimateOutEnd:prop_types_default().func,active:prop_types_default().bool,animateIn:prop_types_default().bool,animateOut:prop_types_default().bool,index:prop_types_default().number},CarouselItem=function(_React$Component){function CarouselItem(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleAnimateOutEnd=_this.handleAnimateOutEnd.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.state={direction:null},_this.isUnmounted=!1,_this}_inheritsLoose(CarouselItem,_React$Component);var _proto=CarouselItem.prototype;return _proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){this.props.active!==nextProps.active&&this.setState({direction:null})},_proto.componentDidUpdate=function componentDidUpdate(prevProps){var _this2=this,active=this.props.active,prevActive=prevProps.active;!active&&prevActive&&transition.Ay.end(react_dom.findDOMNode(this),this.handleAnimateOutEnd),active!==prevActive&&setTimeout((function(){return _this2.startAnimation()}),20)},_proto.componentWillUnmount=function componentWillUnmount(){this.isUnmounted=!0},_proto.handleAnimateOutEnd=function handleAnimateOutEnd(){this.isUnmounted||this.props.onAnimateOutEnd&&this.props.onAnimateOutEnd(this.props.index)},_proto.startAnimation=function startAnimation(){this.isUnmounted||this.setState({direction:"prev"===this.props.direction?"right":"left"})},_proto.render=function render(){var _this$props=this.props,direction=_this$props.direction,active=_this$props.active,animateIn=_this$props.animateIn,animateOut=_this$props.animateOut,className=_this$props.className,props=_objectWithoutPropertiesLoose(_this$props,["direction","active","animateIn","animateOut","className"]);delete props.onAnimateOutEnd,delete props.index;var classes={item:!0,active:active&&!animateIn||animateOut};return direction&&active&&animateIn&&(classes[direction]=!0),this.state.direction&&(animateIn||animateOut)&&(classes[this.state.direction]=!0),react.createElement("div",_extends({},props,{className:classnames_default()(className,classes)}))},CarouselItem}(react.Component);CarouselItem.propTypes=CarouselItem_propTypes,CarouselItem.defaultProps={active:!1,animateIn:!1,animateOut:!1};const es_CarouselItem=CarouselItem;var Glyphicon_propTypes={glyph:prop_types_default().string.isRequired},Glyphicon=function(_React$Component){function Glyphicon(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Glyphicon,_React$Component),Glyphicon.prototype.render=function render(){var _extends2,_this$props=this.props,glyph=_this$props.glyph,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["glyph","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,glyph)]=!0,_extends2));return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}))},Glyphicon}(react.Component);Glyphicon.propTypes=Glyphicon_propTypes;const es_Glyphicon=bsClass("glyphicon",Glyphicon);var Carousel_propTypes={slide:prop_types_default().bool,indicators:prop_types_default().bool,interval:prop_types_default().number,controls:prop_types_default().bool,pauseOnHover:prop_types_default().bool,wrap:prop_types_default().bool,onSelect:prop_types_default().func,onSlideEnd:prop_types_default().func,activeIndex:prop_types_default().number,defaultActiveIndex:prop_types_default().number,direction:prop_types_default().oneOf(["prev","next"]),prevIcon:prop_types_default().node,prevLabel:prop_types_default().string,nextIcon:prop_types_default().node,nextLabel:prop_types_default().string},Carousel_defaultProps={slide:!0,interval:5e3,pauseOnHover:!0,wrap:!0,indicators:!0,controls:!0,prevIcon:react.createElement(es_Glyphicon,{glyph:"chevron-left"}),prevLabel:"Previous",nextIcon:react.createElement(es_Glyphicon,{glyph:"chevron-right"}),nextLabel:"Next"},Carousel=function(_React$Component){function Carousel(props,context){var _this;(_this=_React$Component.call(this,props,context)||this).handleMouseOver=_this.handleMouseOver.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleMouseOut=_this.handleMouseOut.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handlePrev=_this.handlePrev.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleNext=_this.handleNext.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleItemAnimateOutEnd=_this.handleItemAnimateOutEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));var defaultActiveIndex=props.defaultActiveIndex;return _this.state={activeIndex:null!=defaultActiveIndex?defaultActiveIndex:0,previousActiveIndex:null,direction:null},_this.isUnmounted=!1,_this}_inheritsLoose(Carousel,_React$Component);var _proto=Carousel.prototype;return _proto.componentDidMount=function componentDidMount(){this.waitForNext()},_proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){var activeIndex=this.getActiveIndex();null!=nextProps.activeIndex&&nextProps.activeIndex!==activeIndex&&(clearTimeout(this.timeout),this.setState({previousActiveIndex:activeIndex,direction:null!=nextProps.direction?nextProps.direction:this.getDirection(activeIndex,nextProps.activeIndex)})),null==nextProps.activeIndex&&this.state.activeIndex>=nextProps.children.length&&this.setState({activeIndex:0,previousActiveIndex:null,direction:null})},_proto.componentWillUnmount=function componentWillUnmount(){clearTimeout(this.timeout),this.isUnmounted=!0},_proto.getActiveIndex=function getActiveIndex(){var activeIndexProp=this.props.activeIndex;return null!=activeIndexProp?activeIndexProp:this.state.activeIndex},_proto.getDirection=function getDirection(prevIndex,index){return prevIndex===index?null:prevIndex>index?"prev":"next"},_proto.handleItemAnimateOutEnd=function handleItemAnimateOutEnd(){var _this2=this;this.setState({previousActiveIndex:null,direction:null},(function(){_this2.waitForNext(),_this2.props.onSlideEnd&&_this2.props.onSlideEnd()}))},_proto.handleMouseOut=function handleMouseOut(){this.isPaused&&this.play()},_proto.handleMouseOver=function handleMouseOver(){this.props.pauseOnHover&&this.pause()},_proto.handleNext=function handleNext(e){var index=this.getActiveIndex()+1;if(index>ValidComponentChildren.count(this.props.children)-1){if(!this.props.wrap)return;index=0}this.select(index,e,"next")},_proto.handlePrev=function handlePrev(e){var index=this.getActiveIndex()-1;if(index<0){if(!this.props.wrap)return;index=ValidComponentChildren.count(this.props.children)-1}this.select(index,e,"prev")},_proto.pause=function pause(){this.isPaused=!0,clearTimeout(this.timeout)},_proto.play=function play(){this.isPaused=!1,this.waitForNext()},_proto.select=function select(index,e,direction){if(clearTimeout(this.timeout),!this.isUnmounted){var previousActiveIndex=this.props.slide?this.getActiveIndex():null;direction=direction||this.getDirection(previousActiveIndex,index);var onSelect=this.props.onSelect;if(onSelect&&(onSelect.length>1?(e?(e.persist(),e.direction=direction):e={direction},onSelect(index,e)):onSelect(index)),null==this.props.activeIndex&&index!==previousActiveIndex){if(null!=this.state.previousActiveIndex)return;this.setState({activeIndex:index,previousActiveIndex,direction})}}},_proto.waitForNext=function waitForNext(){var _this$props=this.props,slide=_this$props.slide,interval=_this$props.interval,activeIndexProp=_this$props.activeIndex;!this.isPaused&&slide&&interval&&null==activeIndexProp&&(this.timeout=setTimeout(this.handleNext,interval))},_proto.renderControls=function renderControls(properties){var wrap=properties.wrap,children=properties.children,activeIndex=properties.activeIndex,prevIcon=properties.prevIcon,nextIcon=properties.nextIcon,bsProps=properties.bsProps,prevLabel=properties.prevLabel,nextLabel=properties.nextLabel,controlClassName=prefix(bsProps,"control"),count=ValidComponentChildren.count(children);return[(wrap||0!==activeIndex)&&react.createElement(es_SafeAnchor,{key:"prev",className:classnames_default()(controlClassName,"left"),onClick:this.handlePrev},prevIcon,prevLabel&&react.createElement("span",{className:"sr-only"},prevLabel)),(wrap||activeIndex!==count-1)&&react.createElement(es_SafeAnchor,{key:"next",className:classnames_default()(controlClassName,"right"),onClick:this.handleNext},nextIcon,nextLabel&&react.createElement("span",{className:"sr-only"},nextLabel))]},_proto.renderIndicators=function renderIndicators(children,activeIndex,bsProps){var _this3=this,indicators=[];return ValidComponentChildren.forEach(children,(function(child,index){indicators.push(react.createElement("li",{key:index,className:index===activeIndex?"active":null,onClick:function onClick(e){return _this3.select(index,e)}})," ")})),react.createElement("ol",{className:prefix(bsProps,"indicators")},indicators)},_proto.render=function render(){var _this4=this,_this$props2=this.props,slide=_this$props2.slide,indicators=_this$props2.indicators,controls=_this$props2.controls,wrap=_this$props2.wrap,prevIcon=_this$props2.prevIcon,prevLabel=_this$props2.prevLabel,nextIcon=_this$props2.nextIcon,nextLabel=_this$props2.nextLabel,className=_this$props2.className,children=_this$props2.children,props=_objectWithoutPropertiesLoose(_this$props2,["slide","indicators","controls","wrap","prevIcon","prevLabel","nextIcon","nextLabel","className","children"]),_this$state=this.state,previousActiveIndex=_this$state.previousActiveIndex,direction=_this$state.direction,_splitBsPropsAndOmit=splitBsPropsAndOmit(props,["interval","pauseOnHover","onSelect","onSlideEnd","activeIndex","defaultActiveIndex","direction"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1],activeIndex=this.getActiveIndex(),classes=_extends({},getClassSet(bsProps),{slide});return react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes),onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut}),indicators&&this.renderIndicators(children,activeIndex,bsProps),react.createElement("div",{className:prefix(bsProps,"inner")},ValidComponentChildren.map(children,(function(child,index){var active=index===activeIndex,previousActive=slide&&index===previousActiveIndex;return(0,react.cloneElement)(child,{active,index,animateOut:previousActive,animateIn:active&&null!=previousActiveIndex&&slide,direction,onAnimateOutEnd:previousActive?_this4.handleItemAnimateOutEnd:null})}))),controls&&this.renderControls({wrap,children,activeIndex,prevIcon,prevLabel,nextIcon,nextLabel,bsProps}))},Carousel}(react.Component);Carousel.propTypes=Carousel_propTypes,Carousel.defaultProps=Carousel_defaultProps,Carousel.Caption=es_CarouselCaption,Carousel.Item=es_CarouselItem;const es_Carousel=bsClass("carousel",Carousel);__webpack_require__("./node_modules/warning/browser.js");var Checkbox_propTypes={inline:prop_types_default().bool,disabled:prop_types_default().bool,title:prop_types_default().string,validationState:prop_types_default().oneOf(["success","warning","error",null]),inputRef:prop_types_default().func},Checkbox=function(_React$Component){function Checkbox(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Checkbox,_React$Component),Checkbox.prototype.render=function render(){var _this$props=this.props,inline=_this$props.inline,disabled=_this$props.disabled,validationState=_this$props.validationState,inputRef=_this$props.inputRef,className=_this$props.className,style=_this$props.style,title=_this$props.title,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["inline","disabled","validationState","inputRef","className","style","title","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],input=react.createElement("input",_extends({},elementProps,{ref:inputRef,type:"checkbox",disabled}));if(inline){var _classes2,_classes=((_classes2={})[prefix(bsProps,"inline")]=!0,_classes2.disabled=disabled,_classes2);return react.createElement("label",{className:classnames_default()(className,_classes),style,title},input,children)}var classes=_extends({},getClassSet(bsProps),{disabled});return validationState&&(classes["has-"+validationState]=!0),react.createElement("div",{className:classnames_default()(className,classes),style},react.createElement("label",{title},input,children))},Checkbox}(react.Component);Checkbox.propTypes=Checkbox_propTypes,Checkbox.defaultProps={inline:!1,disabled:!1,title:""};const es_Checkbox=bsClass("checkbox",Checkbox);function capitalize(string){return""+string.charAt(0).toUpperCase()+string.slice(1)}var Clearfix_propTypes={componentClass:elementType_default(),visibleXsBlock:prop_types_default().bool,visibleSmBlock:prop_types_default().bool,visibleMdBlock:prop_types_default().bool,visibleLgBlock:prop_types_default().bool},Clearfix=function(_React$Component){function Clearfix(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Clearfix,_React$Component),Clearfix.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return DEVICE_SIZES.forEach((function(size){var propName="visible"+capitalize(size)+"Block";elementProps[propName]&&(classes["visible-"+size+"-block"]=!0),delete elementProps[propName]})),react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Clearfix}(react.Component);Clearfix.propTypes=Clearfix_propTypes,Clearfix.defaultProps={componentClass:"div"};const es_Clearfix=bsClass("clearfix",Clearfix);var ControlLabel_propTypes={htmlFor:prop_types_default().string,srOnly:prop_types_default().bool},contextTypes={$bs_formGroup:prop_types_default().object},ControlLabel=function(_React$Component){function ControlLabel(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ControlLabel,_React$Component),ControlLabel.prototype.render=function render(){var formGroup=this.context.$bs_formGroup,controlId=formGroup&&formGroup.controlId,_this$props=this.props,_this$props$htmlFor=_this$props.htmlFor,htmlFor=void 0===_this$props$htmlFor?controlId:_this$props$htmlFor,srOnly=_this$props.srOnly,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["htmlFor","srOnly","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),{"sr-only":srOnly});return react.createElement("label",_extends({},elementProps,{htmlFor,className:classnames_default()(className,classes)}))},ControlLabel}(react.Component);ControlLabel.propTypes=ControlLabel_propTypes,ControlLabel.defaultProps={srOnly:!1},ControlLabel.contextTypes=contextTypes;const es_ControlLabel=bsClass("control-label",ControlLabel);var Col_propTypes={componentClass:elementType_default(),xs:prop_types_default().number,sm:prop_types_default().number,md:prop_types_default().number,lg:prop_types_default().number,xsHidden:prop_types_default().bool,smHidden:prop_types_default().bool,mdHidden:prop_types_default().bool,lgHidden:prop_types_default().bool,xsOffset:prop_types_default().number,smOffset:prop_types_default().number,mdOffset:prop_types_default().number,lgOffset:prop_types_default().number,xsPush:prop_types_default().number,smPush:prop_types_default().number,mdPush:prop_types_default().number,lgPush:prop_types_default().number,xsPull:prop_types_default().number,smPull:prop_types_default().number,mdPull:prop_types_default().number,lgPull:prop_types_default().number},Col=function(_React$Component){function Col(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Col,_React$Component),Col.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=[];return DEVICE_SIZES.forEach((function(size){function popProp(propSuffix,modifier){var propName=""+size+propSuffix,propValue=elementProps[propName];null!=propValue&&classes.push(prefix(bsProps,""+size+modifier+"-"+propValue)),delete elementProps[propName]}popProp("",""),popProp("Offset","-offset"),popProp("Push","-push"),popProp("Pull","-pull");var hiddenPropName=size+"Hidden";elementProps[hiddenPropName]&&classes.push("hidden-"+size),delete elementProps[hiddenPropName]})),react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Col}(react.Component);Col.propTypes=Col_propTypes,Col.defaultProps={componentClass:"div"};const es_Col=bsClass("col",Col);var _collapseStyles,parse_int=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/parse-int.js"),parse_int_default=__webpack_require__.n(parse_int),style=__webpack_require__("./node_modules/dom-helpers/style/index.js"),style_default=__webpack_require__.n(style),Transition=__webpack_require__("./node_modules/react-bootstrap/node_modules/react-transition-group/Transition.js"),MARGINS={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};var collapseStyles=((_collapseStyles={})[Transition.kp]="collapse",_collapseStyles[Transition.ze]="collapsing",_collapseStyles[Transition.ns]="collapsing",_collapseStyles[Transition._K]="collapse in",_collapseStyles),Collapse_propTypes={in:prop_types_default().bool,mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool,appear:prop_types_default().bool,timeout:prop_types_default().number,onEnter:prop_types_default().func,onEntering:prop_types_default().func,onEntered:prop_types_default().func,onExit:prop_types_default().func,onExiting:prop_types_default().func,onExited:prop_types_default().func,dimension:prop_types_default().oneOfType([prop_types_default().oneOf(["height","width"]),prop_types_default().func]),getDimensionValue:prop_types_default().func,role:prop_types_default().string},Collapse_defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,dimension:"height",getDimensionValue:function getDimensionValue(dimension,elem){var value=elem["offset"+capitalize(dimension)],margins=MARGINS[dimension];return value+parse_int_default()(style_default()(elem,margins[0]),10)+parse_int_default()(style_default()(elem,margins[1]),10)}},Collapse=function(_React$Component){function Collapse(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).handleEnter=function(elem){elem.style[_this.getDimension()]="0"},_this.handleEntering=function(elem){var dimension=_this.getDimension();elem.style[dimension]=_this._getScrollDimensionValue(elem,dimension)},_this.handleEntered=function(elem){elem.style[_this.getDimension()]=null},_this.handleExit=function(elem){var dimension=_this.getDimension();elem.style[dimension]=_this.props.getDimensionValue(dimension,elem)+"px",function triggerBrowserReflow(node){node.offsetHeight}(elem)},_this.handleExiting=function(elem){elem.style[_this.getDimension()]="0"},_this}_inheritsLoose(Collapse,_React$Component);var _proto=Collapse.prototype;return _proto.getDimension=function getDimension(){return"function"==typeof this.props.dimension?this.props.dimension():this.props.dimension},_proto._getScrollDimensionValue=function _getScrollDimensionValue(elem,dimension){return elem["scroll"+capitalize(dimension)]+"px"},_proto.render=function render(){var _this2=this,_this$props=this.props,onEnter=_this$props.onEnter,onEntering=_this$props.onEntering,onEntered=_this$props.onEntered,onExit=_this$props.onExit,onExiting=_this$props.onExiting,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["onEnter","onEntering","onEntered","onExit","onExiting","className","children"]);delete props.dimension,delete props.getDimensionValue;var handleEnter=utils_createChainedFunction(this.handleEnter,onEnter),handleEntering=utils_createChainedFunction(this.handleEntering,onEntering),handleEntered=utils_createChainedFunction(this.handleEntered,onEntered),handleExit=utils_createChainedFunction(this.handleExit,onExit),handleExiting=utils_createChainedFunction(this.handleExiting,onExiting);return react.createElement(Transition.Ay,_extends({},props,{"aria-expanded":props.role?props.in:null,onEnter:handleEnter,onEntering:handleEntering,onEntered:handleEntered,onExit:handleExit,onExiting:handleExiting}),(function(state,innerProps){return react.cloneElement(children,_extends({},innerProps,{className:classnames_default()(className,children.props.className,collapseStyles[state],"width"===_this2.getDimension()&&"width")}))}))},Collapse}(react.Component);Collapse.propTypes=Collapse_propTypes,Collapse.defaultProps=Collapse_defaultProps;const es_Collapse=Collapse;var activeElement=__webpack_require__("./node_modules/dom-helpers/activeElement.js"),activeElement_default=__webpack_require__.n(activeElement),contains=__webpack_require__("./node_modules/dom-helpers/query/contains.js"),contains_default=__webpack_require__.n(contains),keycode=__webpack_require__("./node_modules/keycode/index.js"),keycode_default=__webpack_require__.n(keycode),isRequiredForA11y=__webpack_require__("./node_modules/prop-types-extra/lib/isRequiredForA11y.js"),isRequiredForA11y_default=__webpack_require__.n(isRequiredForA11y),from=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/array/from.js"),from_default=__webpack_require__.n(from),RootCloseWrapper=__webpack_require__("./node_modules/react-overlays/lib/RootCloseWrapper.js"),RootCloseWrapper_default=__webpack_require__.n(RootCloseWrapper),DropdownMenu_propTypes={open:prop_types_default().bool,pullRight:prop_types_default().bool,onClose:prop_types_default().func,labelledBy:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number]),onSelect:prop_types_default().func,rootCloseEvent:prop_types_default().oneOf(["click","mousedown"])},DropdownMenu=function(_React$Component){function DropdownMenu(props){var _this;return(_this=_React$Component.call(this,props)||this).handleRootClose=_this.handleRootClose.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleKeyDown=_this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(DropdownMenu,_React$Component);var _proto=DropdownMenu.prototype;return _proto.getFocusableMenuItems=function getFocusableMenuItems(){var node=react_dom.findDOMNode(this);return node?from_default()(node.querySelectorAll('[tabIndex="-1"]')):[]},_proto.getItemsAndActiveIndex=function getItemsAndActiveIndex(){var items=this.getFocusableMenuItems(),activeIndex=items.indexOf(document.activeElement);return{items,activeIndex}},_proto.focusNext=function focusNext(){var _this$getItemsAndActi=this.getItemsAndActiveIndex(),items=_this$getItemsAndActi.items,activeIndex=_this$getItemsAndActi.activeIndex;0!==items.length&&items[activeIndex===items.length-1?0:activeIndex+1].focus()},_proto.focusPrevious=function focusPrevious(){var _this$getItemsAndActi2=this.getItemsAndActiveIndex(),items=_this$getItemsAndActi2.items,activeIndex=_this$getItemsAndActi2.activeIndex;0!==items.length&&items[0===activeIndex?items.length-1:activeIndex-1].focus()},_proto.handleKeyDown=function handleKeyDown(event){switch(event.keyCode){case keycode_default().codes.down:this.focusNext(),event.preventDefault();break;case keycode_default().codes.up:this.focusPrevious(),event.preventDefault();break;case keycode_default().codes.esc:case keycode_default().codes.tab:this.props.onClose(event,{source:"keydown"})}},_proto.handleRootClose=function handleRootClose(event){this.props.onClose(event,{source:"rootClose"})},_proto.render=function render(){var _extends2,_this2=this,_this$props=this.props,open=_this$props.open,pullRight=_this$props.pullRight,labelledBy=_this$props.labelledBy,onSelect=_this$props.onSelect,className=_this$props.className,rootCloseEvent=_this$props.rootCloseEvent,children=_this$props.children,_splitBsPropsAndOmit=splitBsPropsAndOmit(_objectWithoutPropertiesLoose(_this$props,["open","pullRight","labelledBy","onSelect","className","rootCloseEvent","children"]),["onClose"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,"right")]=pullRight,_extends2));return react.createElement(RootCloseWrapper_default(),{disabled:!open,onRootClose:this.handleRootClose,event:rootCloseEvent},react.createElement("ul",_extends({},elementProps,{role:"menu",className:classnames_default()(className,classes),"aria-labelledby":labelledBy}),ValidComponentChildren.map(children,(function(child){return react.cloneElement(child,{onKeyDown:utils_createChainedFunction(child.props.onKeyDown,_this2.handleKeyDown),onSelect:utils_createChainedFunction(child.props.onSelect,onSelect)})}))))},DropdownMenu}(react.Component);DropdownMenu.propTypes=DropdownMenu_propTypes,DropdownMenu.defaultProps={bsRole:"menu",pullRight:!1};const es_DropdownMenu=bsClass("dropdown-menu",DropdownMenu);var DropdownToggle_propTypes={noCaret:prop_types_default().bool,open:prop_types_default().bool,title:prop_types_default().string,useAnchor:prop_types_default().bool},DropdownToggle=function(_React$Component){function DropdownToggle(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(DropdownToggle,_React$Component),DropdownToggle.prototype.render=function render(){var _this$props=this.props,noCaret=_this$props.noCaret,open=_this$props.open,useAnchor=_this$props.useAnchor,bsClass=_this$props.bsClass,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["noCaret","open","useAnchor","bsClass","className","children"]);delete props.bsRole;var Component=useAnchor?es_SafeAnchor:es_Button,useCaret=!noCaret;return react.createElement(Component,_extends({},props,{role:"button",className:classnames_default()(className,bsClass),"aria-haspopup":!0,"aria-expanded":open}),children||props.title,useCaret&&" ",useCaret&&react.createElement("span",{className:"caret"}))},DropdownToggle}(react.Component);DropdownToggle.propTypes=DropdownToggle_propTypes,DropdownToggle.defaultProps={open:!1,useAnchor:!1,bsRole:"toggle"};const es_DropdownToggle=bsClass("dropdown-toggle",DropdownToggle);var TOGGLE_ROLE=es_DropdownToggle.defaultProps.bsRole,MENU_ROLE=es_DropdownMenu.defaultProps.bsRole,Dropdown_propTypes={dropup:prop_types_default().bool,id:isRequiredForA11y_default()(prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number])),componentClass:elementType_default(),children:all_default()(function requiredRoles(){for(var _len2=arguments.length,roles=new Array(_len2),_key2=0;_key2<_len2;_key2++)roles[_key2]=arguments[_key2];return createChainableTypeChecker_default()((function(props,propName,component){var missing;return roles.every((function(role){return!!ValidComponentChildren.some(props.children,(function(child){return child.props.bsRole===role}))||(missing=role,!1)})),missing?new Error("(children) "+component+" - Missing a required child with bsRole: "+missing+". "+component+" must have at least one child of each of the following bsRoles: "+roles.join(", ")):null}))}(TOGGLE_ROLE,MENU_ROLE),function exclusiveRoles(){for(var _len3=arguments.length,roles=new Array(_len3),_key3=0;_key3<_len3;_key3++)roles[_key3]=arguments[_key3];return createChainableTypeChecker_default()((function(props,propName,component){var duplicate;return roles.every((function(role){return!(ValidComponentChildren.filter(props.children,(function(child){return child.props.bsRole===role})).length>1)||(duplicate=role,!1)})),duplicate?new Error("(children) "+component+" - Duplicate children detected of bsRole: "+duplicate+". Only one child each allowed with the following bsRoles: "+roles.join(", ")):null}))}(MENU_ROLE)),disabled:prop_types_default().bool,pullRight:prop_types_default().bool,open:prop_types_default().bool,defaultOpen:prop_types_default().bool,onToggle:prop_types_default().func,onSelect:prop_types_default().func,role:prop_types_default().string,rootCloseEvent:prop_types_default().oneOf(["click","mousedown"]),onMouseEnter:prop_types_default().func,onMouseLeave:prop_types_default().func},Dropdown_defaultProps={componentClass:es_ButtonGroup},Dropdown=function(_React$Component){function Dropdown(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleClick=_this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleKeyDown=_this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleClose=_this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this._focusInDropdown=!1,_this.lastOpenEventType=null,_this}_inheritsLoose(Dropdown,_React$Component);var _proto=Dropdown.prototype;return _proto.componentDidMount=function componentDidMount(){this.focusNextOnOpen()},_proto.UNSAFE_componentWillUpdate=function UNSAFE_componentWillUpdate(nextProps){!nextProps.open&&this.props.open&&(this._focusInDropdown=contains_default()(react_dom.findDOMNode(this.menu),activeElement_default()(document)))},_proto.componentDidUpdate=function componentDidUpdate(prevProps){var open=this.props.open,prevOpen=prevProps.open;open&&!prevOpen&&this.focusNextOnOpen(),!open&&prevOpen&&this._focusInDropdown&&(this._focusInDropdown=!1,this.focus())},_proto.focus=function focus(){var toggle=react_dom.findDOMNode(this.toggle);toggle&&toggle.focus&&toggle.focus()},_proto.focusNextOnOpen=function focusNextOnOpen(){var menu=this.menu;menu&&menu.focusNext&&("keydown"!==this.lastOpenEventType&&"menuitem"!==this.props.role||menu.focusNext())},_proto.handleClick=function handleClick(event){this.props.disabled||this.toggleOpen(event,{source:"click"})},_proto.handleClose=function handleClose(event,eventDetails){this.props.open&&this.toggleOpen(event,eventDetails)},_proto.handleKeyDown=function handleKeyDown(event){if(!this.props.disabled)switch(event.keyCode){case keycode_default().codes.down:this.props.open?this.menu.focusNext&&this.menu.focusNext():this.toggleOpen(event,{source:"keydown"}),event.preventDefault();break;case keycode_default().codes.esc:case keycode_default().codes.tab:this.handleClose(event,{source:"keydown"})}},_proto.toggleOpen=function toggleOpen(event,eventDetails){var open=!this.props.open;open&&(this.lastOpenEventType=eventDetails.source),this.props.onToggle&&this.props.onToggle(open,event,eventDetails)},_proto.renderMenu=function renderMenu(child,_ref){var _this2=this,id=_ref.id,onSelect=_ref.onSelect,rootCloseEvent=_ref.rootCloseEvent,props=_objectWithoutPropertiesLoose(_ref,["id","onSelect","rootCloseEvent"]),ref=function ref(c){_this2.menu=c};return"string"==typeof child.ref||(ref=utils_createChainedFunction(child.ref,ref)),(0,react.cloneElement)(child,_extends({},props,{ref,labelledBy:id,bsClass:prefix(props,"menu"),onClose:utils_createChainedFunction(child.props.onClose,this.handleClose),onSelect:utils_createChainedFunction(child.props.onSelect,onSelect,(function(key,event){return _this2.handleClose(event,{source:"select"})})),rootCloseEvent}))},_proto.renderToggle=function renderToggle(child,props){var _this3=this,ref=function ref(c){_this3.toggle=c};return"string"==typeof child.ref||(ref=utils_createChainedFunction(child.ref,ref)),(0,react.cloneElement)(child,_extends({},props,{ref,bsClass:prefix(props,"toggle"),onClick:utils_createChainedFunction(child.props.onClick,this.handleClick),onKeyDown:utils_createChainedFunction(child.props.onKeyDown,this.handleKeyDown)}))},_proto.render=function render(){var _classes,_this4=this,_this$props=this.props,Component=_this$props.componentClass,id=_this$props.id,dropup=_this$props.dropup,disabled=_this$props.disabled,pullRight=_this$props.pullRight,open=_this$props.open,onSelect=_this$props.onSelect,role=_this$props.role,bsClass=_this$props.bsClass,className=_this$props.className,rootCloseEvent=_this$props.rootCloseEvent,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["componentClass","id","dropup","disabled","pullRight","open","onSelect","role","bsClass","className","rootCloseEvent","children"]);delete props.onToggle;var classes=((_classes={})[bsClass]=!0,_classes.open=open,_classes.disabled=disabled,_classes);return dropup&&(classes[bsClass]=!1,classes.dropup=!0),react.createElement(Component,_extends({},props,{className:classnames_default()(className,classes)}),ValidComponentChildren.map(children,(function(child){switch(child.props.bsRole){case TOGGLE_ROLE:return _this4.renderToggle(child,{id,disabled,open,role,bsClass});case MENU_ROLE:return _this4.renderMenu(child,{id,open,pullRight,bsClass,onSelect,rootCloseEvent});default:return child}})))},Dropdown}(react.Component);Dropdown.propTypes=Dropdown_propTypes,Dropdown.defaultProps=Dropdown_defaultProps,bsClass("dropdown",Dropdown);var UncontrolledDropdown=(0,esm.Pd)(Dropdown,{open:"onToggle"});UncontrolledDropdown.Toggle=es_DropdownToggle,UncontrolledDropdown.Menu=es_DropdownMenu;const es_Dropdown=UncontrolledDropdown;function splitComponentProps(props,Component){var componentPropTypes=Component.propTypes,parentProps={},childProps={};return entries_default()(props).forEach((function(_ref){var propName=_ref[0],propValue=_ref[1];componentPropTypes[propName]?parentProps[propName]=propValue:childProps[propName]=propValue})),[parentProps,childProps]}var DropdownButton_propTypes=_extends({},es_Dropdown.propTypes,{bsStyle:prop_types_default().string,bsSize:prop_types_default().string,title:prop_types_default().node.isRequired,noCaret:prop_types_default().bool,children:prop_types_default().node}),DropdownButton=function(_React$Component){function DropdownButton(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(DropdownButton,_React$Component),DropdownButton.prototype.render=function render(){var _this$props=this.props,bsSize=_this$props.bsSize,bsStyle=_this$props.bsStyle,title=_this$props.title,children=_this$props.children,_splitComponentProps=splitComponentProps(_objectWithoutPropertiesLoose(_this$props,["bsSize","bsStyle","title","children"]),es_Dropdown.ControlledComponent),dropdownProps=_splitComponentProps[0],toggleProps=_splitComponentProps[1];return react.createElement(es_Dropdown,_extends({},dropdownProps,{bsSize,bsStyle}),react.createElement(es_Dropdown.Toggle,_extends({},toggleProps,{bsSize,bsStyle}),title),react.createElement(es_Dropdown.Menu,null,children))},DropdownButton}(react.Component);DropdownButton.propTypes=DropdownButton_propTypes;const es_DropdownButton=DropdownButton;var _fadeStyles,Fade_propTypes={in:prop_types_default().bool,mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool,appear:prop_types_default().bool,timeout:prop_types_default().number,onEnter:prop_types_default().func,onEntering:prop_types_default().func,onEntered:prop_types_default().func,onExit:prop_types_default().func,onExiting:prop_types_default().func,onExited:prop_types_default().func},fadeStyles=((_fadeStyles={})[Transition.ns]="in",_fadeStyles[Transition._K]="in",_fadeStyles),Fade=function(_React$Component){function Fade(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Fade,_React$Component),Fade.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["className","children"]);return react.createElement(Transition.Ay,props,(function(status,innerProps){return react.cloneElement(children,_extends({},innerProps,{className:classnames_default()("fade",className,children.props.className,fadeStyles[status])}))}))},Fade}(react.Component);Fade.propTypes=Fade_propTypes,Fade.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1};const es_Fade=Fade;var Form_propTypes={horizontal:prop_types_default().bool,inline:prop_types_default().bool,componentClass:elementType_default()},Form=function(_React$Component){function Form(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Form,_React$Component),Form.prototype.render=function render(){var _this$props=this.props,horizontal=_this$props.horizontal,inline=_this$props.inline,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["horizontal","inline","componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=[];return horizontal&&classes.push(prefix(bsProps,"horizontal")),inline&&classes.push(prefix(bsProps,"inline")),react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Form}(react.Component);Form.propTypes=Form_propTypes,Form.defaultProps={horizontal:!1,inline:!1,componentClass:"form"};const es_Form=bsClass("form",Form);var FormControlFeedback_contextTypes={$bs_formGroup:prop_types_default().object},FormControlFeedback=function(_React$Component){function FormControlFeedback(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(FormControlFeedback,_React$Component);var _proto=FormControlFeedback.prototype;return _proto.getGlyph=function getGlyph(validationState){switch(validationState){case"success":return"ok";case"warning":return"warning-sign";case"error":return"remove";default:return null}},_proto.renderDefaultFeedback=function renderDefaultFeedback(formGroup,className,classes,elementProps){var glyph=this.getGlyph(formGroup&&formGroup.validationState);return glyph?react.createElement(es_Glyphicon,_extends({},elementProps,{glyph,className:classnames_default()(className,classes)})):null},_proto.render=function render(){var _this$props=this.props,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);if(!children)return this.renderDefaultFeedback(this.context.$bs_formGroup,className,classes,elementProps);var child=react.Children.only(children);return react.cloneElement(child,_extends({},elementProps,{className:classnames_default()(child.props.className,className,classes)}))},FormControlFeedback}(react.Component);FormControlFeedback.defaultProps={bsRole:"feedback"},FormControlFeedback.contextTypes=FormControlFeedback_contextTypes;const es_FormControlFeedback=bsClass("form-control-feedback",FormControlFeedback);var FormControlStatic_propTypes={componentClass:elementType_default()},FormControlStatic=function(_React$Component){function FormControlStatic(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(FormControlStatic,_React$Component),FormControlStatic.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},FormControlStatic}(react.Component);FormControlStatic.propTypes=FormControlStatic_propTypes,FormControlStatic.defaultProps={componentClass:"p"};const es_FormControlStatic=bsClass("form-control-static",FormControlStatic);var FormControl_propTypes={componentClass:elementType_default(),type:prop_types_default().string,id:prop_types_default().string,inputRef:prop_types_default().func},FormControl_contextTypes={$bs_formGroup:prop_types_default().object},FormControl=function(_React$Component){function FormControl(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(FormControl,_React$Component),FormControl.prototype.render=function render(){var classes,formGroup=this.context.$bs_formGroup,controlId=formGroup&&formGroup.controlId,_this$props=this.props,Component=_this$props.componentClass,type=_this$props.type,_this$props$id=_this$props.id,id=void 0===_this$props$id?controlId:_this$props$id,inputRef=_this$props.inputRef,className=_this$props.className,bsSize=_this$props.bsSize,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","type","id","inputRef","className","bsSize"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1];("file"!==type&&(classes=getClassSet(bsProps)),bsSize)&&(classes[prefix({bsClass:"input"},SIZE_MAP[bsSize]||bsSize)]=!0);return react.createElement(Component,_extends({},elementProps,{type,id,ref:inputRef,className:classnames_default()(className,classes)}))},FormControl}(react.Component);FormControl.propTypes=FormControl_propTypes,FormControl.defaultProps={componentClass:"input"},FormControl.contextTypes=FormControl_contextTypes,FormControl.Feedback=es_FormControlFeedback,FormControl.Static=es_FormControlStatic;const es_FormControl=bsClass("form-control",bsSizes([Size_SMALL,Size_LARGE],FormControl));var FormGroup_propTypes={controlId:prop_types_default().string,validationState:prop_types_default().oneOf(["success","warning","error",null])},FormGroup_childContextTypes={$bs_formGroup:prop_types_default().object.isRequired},FormGroup=function(_React$Component){function FormGroup(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(FormGroup,_React$Component);var _proto=FormGroup.prototype;return _proto.getChildContext=function getChildContext(){var _this$props=this.props;return{$bs_formGroup:{controlId:_this$props.controlId,validationState:_this$props.validationState}}},_proto.hasFeedback=function hasFeedback(children){var _this=this;return ValidComponentChildren.some(children,(function(child){return"feedback"===child.props.bsRole||child.props.children&&_this.hasFeedback(child.props.children)}))},_proto.render=function render(){var _this$props2=this.props,validationState=_this$props2.validationState,className=_this$props2.className,children=_this$props2.children,_splitBsPropsAndOmit=splitBsPropsAndOmit(_objectWithoutPropertiesLoose(_this$props2,["validationState","className","children"]),["controlId"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1],classes=_extends({},getClassSet(bsProps),{"has-feedback":this.hasFeedback(children)});return validationState&&(classes["has-"+validationState]=!0),react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}),children)},FormGroup}(react.Component);FormGroup.propTypes=FormGroup_propTypes,FormGroup.childContextTypes=FormGroup_childContextTypes;const es_FormGroup=bsClass("form-group",bsSizes([Size_LARGE,Size_SMALL],FormGroup));var Grid_propTypes={fluid:prop_types_default().bool,componentClass:elementType_default()},Grid=function(_React$Component){function Grid(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Grid,_React$Component),Grid.prototype.render=function render(){var _this$props=this.props,fluid=_this$props.fluid,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["fluid","componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=prefix(bsProps,fluid&&"fluid");return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Grid}(react.Component);Grid.propTypes=Grid_propTypes,Grid.defaultProps={componentClass:"div",fluid:!1};const es_Grid=bsClass("container",Grid);var HelpBlock=function(_React$Component){function HelpBlock(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(HelpBlock,_React$Component),HelpBlock.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}))},HelpBlock}(react.Component);const es_HelpBlock=bsClass("help-block",HelpBlock);var Image_propTypes={responsive:prop_types_default().bool,rounded:prop_types_default().bool,circle:prop_types_default().bool,thumbnail:prop_types_default().bool},Image=function(_React$Component){function Image(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Image,_React$Component),Image.prototype.render=function render(){var _classes,_this$props=this.props,responsive=_this$props.responsive,rounded=_this$props.rounded,circle=_this$props.circle,thumbnail=_this$props.thumbnail,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["responsive","rounded","circle","thumbnail","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=((_classes={})[prefix(bsProps,"responsive")]=responsive,_classes[prefix(bsProps,"rounded")]=rounded,_classes[prefix(bsProps,"circle")]=circle,_classes[prefix(bsProps,"thumbnail")]=thumbnail,_classes);return react.createElement("img",_extends({},elementProps,{className:classnames_default()(className,classes)}))},Image}(react.Component);Image.propTypes=Image_propTypes,Image.defaultProps={responsive:!1,rounded:!1,circle:!1,thumbnail:!1};const es_Image=bsClass("img",Image);var InputGroupAddon=function(_React$Component){function InputGroupAddon(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(InputGroupAddon,_React$Component),InputGroupAddon.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}))},InputGroupAddon}(react.Component);const es_InputGroupAddon=bsClass("input-group-addon",InputGroupAddon);var InputGroupButton=function(_React$Component){function InputGroupButton(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(InputGroupButton,_React$Component),InputGroupButton.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}))},InputGroupButton}(react.Component);const es_InputGroupButton=bsClass("input-group-btn",InputGroupButton);var InputGroup=function(_React$Component){function InputGroup(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(InputGroup,_React$Component),InputGroup.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}))},InputGroup}(react.Component);InputGroup.Addon=es_InputGroupAddon,InputGroup.Button=es_InputGroupButton;const es_InputGroup=bsClass("input-group",bsSizes([Size_LARGE,Size_SMALL],InputGroup));var Jumbotron_propTypes={componentClass:elementType_default()},Jumbotron=function(_React$Component){function Jumbotron(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Jumbotron,_React$Component),Jumbotron.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Jumbotron}(react.Component);Jumbotron.propTypes=Jumbotron_propTypes,Jumbotron.defaultProps={componentClass:"div"};const es_Jumbotron=bsClass("jumbotron",Jumbotron);var Label=function(_React$Component){function Label(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(Label,_React$Component);var _proto=Label.prototype;return _proto.hasContent=function hasContent(children){var result=!1;return react.Children.forEach(children,(function(child){result||(child||0===child)&&(result=!0)})),result},_proto.render=function render(){var _this$props=this.props,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),{hidden:!this.hasContent(children)});return react.createElement("span",_extends({},elementProps,{className:classnames_default()(className,classes)}),children)},Label}(react.Component);const es_Label=bsClass("label",bsStyles(values_default()(State).concat([Style_DEFAULT,Style_PRIMARY]),Style_DEFAULT,Label));var ListGroupItem_propTypes={active:prop_types_default().any,disabled:prop_types_default().any,header:prop_types_default().node,listItem:prop_types_default().bool,onClick:prop_types_default().func,href:prop_types_default().string,type:prop_types_default().string},ListGroupItem=function(_React$Component){function ListGroupItem(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(ListGroupItem,_React$Component);var _proto=ListGroupItem.prototype;return _proto.renderHeader=function renderHeader(header,headingClassName){return react.isValidElement(header)?(0,react.cloneElement)(header,{className:classnames_default()(header.props.className,headingClassName)}):react.createElement("h4",{className:headingClassName},header)},_proto.render=function render(){var Component,_this$props=this.props,active=_this$props.active,disabled=_this$props.disabled,className=_this$props.className,header=_this$props.header,listItem=_this$props.listItem,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["active","disabled","className","header","listItem","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),{active,disabled});return elementProps.href?Component="a":elementProps.onClick?(Component="button",elementProps.type=elementProps.type||"button"):Component=listItem?"li":"span",elementProps.className=classnames_default()(className,classes),header?react.createElement(Component,elementProps,this.renderHeader(header,prefix(bsProps,"heading")),react.createElement("p",{className:prefix(bsProps,"text")},children)):react.createElement(Component,elementProps,children)},ListGroupItem}(react.Component);ListGroupItem.propTypes=ListGroupItem_propTypes,ListGroupItem.defaultProps={listItem:!1};const es_ListGroupItem=bsClass("list-group-item",bsStyles(values_default()(State),ListGroupItem));var ListGroup_propTypes={componentClass:elementType_default()};var ListGroup=function(_React$Component){function ListGroup(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ListGroup,_React$Component),ListGroup.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,_this$props$component=_this$props.componentClass,Component=void 0===_this$props$component?function getDefaultComponent(children){return children?ValidComponentChildren.some(children,(function(child){return child.type!==es_ListGroupItem||child.props.href||child.props.onClick}))?"div":"ul":"div"}(children):_this$props$component,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["children","componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps),useListItem="ul"===Component&&ValidComponentChildren.every(children,(function(child){return child.type===es_ListGroupItem}));return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}),useListItem?ValidComponentChildren.map(children,(function(child){return(0,react.cloneElement)(child,{listItem:!0})})):children)},ListGroup}(react.Component);ListGroup.propTypes=ListGroup_propTypes;const es_ListGroup=bsClass("list-group",ListGroup);var MediaBody_propTypes={align:prop_types_default().oneOf(["top","middle","bottom"]),componentClass:elementType_default()},MediaBody=function(_React$Component){function MediaBody(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(MediaBody,_React$Component),MediaBody.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,align=_this$props.align,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","align","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return align&&(classes[prefix(es_Media.defaultProps,align)]=!0),react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},MediaBody}(react.Component);MediaBody.propTypes=MediaBody_propTypes,MediaBody.defaultProps={componentClass:"div"};const es_MediaBody=bsClass("media-body",MediaBody);var MediaHeading_propTypes={componentClass:elementType_default()},MediaHeading=function(_React$Component){function MediaHeading(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(MediaHeading,_React$Component),MediaHeading.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},MediaHeading}(react.Component);MediaHeading.propTypes=MediaHeading_propTypes,MediaHeading.defaultProps={componentClass:"h4"};const es_MediaHeading=bsClass("media-heading",MediaHeading);var MediaLeft_propTypes={align:prop_types_default().oneOf(["top","middle","bottom"])},MediaLeft=function(_React$Component){function MediaLeft(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(MediaLeft,_React$Component),MediaLeft.prototype.render=function render(){var _this$props=this.props,align=_this$props.align,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["align","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return align&&(classes[prefix(es_Media.defaultProps,align)]=!0),react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}))},MediaLeft}(react.Component);MediaLeft.propTypes=MediaLeft_propTypes;const es_MediaLeft=bsClass("media-left",MediaLeft);var MediaList=function(_React$Component){function MediaList(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(MediaList,_React$Component),MediaList.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("ul",_extends({},elementProps,{className:classnames_default()(className,classes)}))},MediaList}(react.Component);const es_MediaList=bsClass("media-list",MediaList);var MediaListItem=function(_React$Component){function MediaListItem(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(MediaListItem,_React$Component),MediaListItem.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("li",_extends({},elementProps,{className:classnames_default()(className,classes)}))},MediaListItem}(react.Component);const es_MediaListItem=bsClass("media",MediaListItem);var MediaRight_propTypes={align:prop_types_default().oneOf(["top","middle","bottom"])},MediaRight=function(_React$Component){function MediaRight(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(MediaRight,_React$Component),MediaRight.prototype.render=function render(){var _this$props=this.props,align=_this$props.align,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["align","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return align&&(classes[prefix(es_Media.defaultProps,align)]=!0),react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}))},MediaRight}(react.Component);MediaRight.propTypes=MediaRight_propTypes;const es_MediaRight=bsClass("media-right",MediaRight);var Media_propTypes={componentClass:elementType_default()},Media=function(_React$Component){function Media(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Media,_React$Component),Media.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Media}(react.Component);Media.propTypes=Media_propTypes,Media.defaultProps={componentClass:"div"},Media.Heading=es_MediaHeading,Media.Body=es_MediaBody,Media.Left=es_MediaLeft,Media.Right=es_MediaRight,Media.List=es_MediaList,Media.ListItem=es_MediaListItem;const es_Media=bsClass("media",Media);var MenuItem_propTypes={active:prop_types_default().bool,disabled:prop_types_default().bool,divider:all_default()(prop_types_default().bool,(function(_ref){var divider=_ref.divider,children=_ref.children;return divider&&children?new Error("Children will not be rendered for dividers"):null})),eventKey:prop_types_default().any,header:prop_types_default().bool,href:prop_types_default().string,onClick:prop_types_default().func,onSelect:prop_types_default().func},MenuItem=function(_React$Component){function MenuItem(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleClick=_this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(MenuItem,_React$Component);var _proto=MenuItem.prototype;return _proto.handleClick=function handleClick(event){var _this$props=this.props,href=_this$props.href,disabled=_this$props.disabled,onSelect=_this$props.onSelect,eventKey=_this$props.eventKey;href&&!disabled||event.preventDefault(),disabled||onSelect&&onSelect(eventKey,event)},_proto.render=function render(){var _this$props2=this.props,active=_this$props2.active,disabled=_this$props2.disabled,divider=_this$props2.divider,header=_this$props2.header,onClick=_this$props2.onClick,className=_this$props2.className,style=_this$props2.style,_splitBsPropsAndOmit=splitBsPropsAndOmit(_objectWithoutPropertiesLoose(_this$props2,["active","disabled","divider","header","onClick","className","style"]),["eventKey","onSelect"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1];return divider?(elementProps.children=void 0,react.createElement("li",_extends({},elementProps,{role:"separator",className:classnames_default()(className,"divider"),style}))):header?react.createElement("li",_extends({},elementProps,{role:"heading",className:classnames_default()(className,prefix(bsProps,"header")),style})):react.createElement("li",{role:"presentation",className:classnames_default()(className,{active,disabled}),style},react.createElement(es_SafeAnchor,_extends({},elementProps,{role:"menuitem",tabIndex:"-1",onClick:utils_createChainedFunction(onClick,this.handleClick)})))},MenuItem}(react.Component);MenuItem.propTypes=MenuItem_propTypes,MenuItem.defaultProps={divider:!1,disabled:!1,header:!1};const es_MenuItem=bsClass("dropdown",MenuItem);var events=__webpack_require__("./node_modules/dom-helpers/events/index.js"),ownerDocument=__webpack_require__("./node_modules/dom-helpers/ownerDocument.js"),ownerDocument_default=__webpack_require__.n(ownerDocument),inDOM=__webpack_require__("./node_modules/dom-helpers/util/inDOM.js"),inDOM_default=__webpack_require__.n(inDOM),scrollbarSize=__webpack_require__("./node_modules/dom-helpers/util/scrollbarSize.js"),scrollbarSize_default=__webpack_require__.n(scrollbarSize),lib_Modal=__webpack_require__("./node_modules/react-overlays/lib/Modal.js"),Modal_default=__webpack_require__.n(lib_Modal),isOverflowing=__webpack_require__("./node_modules/react-overlays/lib/utils/isOverflowing.js"),isOverflowing_default=__webpack_require__.n(isOverflowing),ModalBody_propTypes={componentClass:elementType_default()},ModalBody=function(_React$Component){function ModalBody(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ModalBody,_React$Component),ModalBody.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},ModalBody}(react.Component);ModalBody.propTypes=ModalBody_propTypes,ModalBody.defaultProps={componentClass:"div"};const es_ModalBody=bsClass("modal-body",ModalBody);var ModalDialog_propTypes={dialogClassName:prop_types_default().string},ModalDialog=function(_React$Component){function ModalDialog(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ModalDialog,_React$Component),ModalDialog.prototype.render=function render(){var _extends2,_this$props=this.props,dialogClassName=_this$props.dialogClassName,className=_this$props.className,style=_this$props.style,children=_this$props.children,onMouseDownDialog=_this$props.onMouseDownDialog,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["dialogClassName","className","style","children","onMouseDownDialog"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],bsClassName=prefix(bsProps),modalStyle=_extends({display:"block"},style),dialogClasses=_extends({},getClassSet(bsProps),((_extends2={})[bsClassName]=!1,_extends2[prefix(bsProps,"dialog")]=!0,_extends2));return react.createElement("div",_extends({},elementProps,{tabIndex:"-1",role:"dialog",style:modalStyle,className:classnames_default()(className,bsClassName)}),react.createElement("div",{className:classnames_default()(dialogClassName,dialogClasses),onMouseDown:onMouseDownDialog},react.createElement("div",{className:prefix(bsProps,"content"),role:"document"},children)))},ModalDialog}(react.Component);ModalDialog.propTypes=ModalDialog_propTypes;const es_ModalDialog=bsClass("modal",bsSizes([Size_LARGE,Size_SMALL],ModalDialog));var ModalFooter_propTypes={componentClass:elementType_default()},ModalFooter=function(_React$Component){function ModalFooter(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ModalFooter,_React$Component),ModalFooter.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},ModalFooter}(react.Component);ModalFooter.propTypes=ModalFooter_propTypes,ModalFooter.defaultProps={componentClass:"div"};const es_ModalFooter=bsClass("modal-footer",ModalFooter);var ModalHeader_propTypes={closeLabel:prop_types_default().string,closeButton:prop_types_default().bool,onHide:prop_types_default().func},ModalHeader_contextTypes={$bs_modal:prop_types_default().shape({onHide:prop_types_default().func})},ModalHeader=function(_React$Component){function ModalHeader(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ModalHeader,_React$Component),ModalHeader.prototype.render=function render(){var _this$props=this.props,closeLabel=_this$props.closeLabel,closeButton=_this$props.closeButton,onHide=_this$props.onHide,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["closeLabel","closeButton","onHide","className","children"]),modal=this.context.$bs_modal,_splitBsProps=splitBsProps(props),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}),closeButton&&react.createElement(es_CloseButton,{label:closeLabel,onClick:utils_createChainedFunction(modal&&modal.onHide,onHide)}),children)},ModalHeader}(react.Component);ModalHeader.propTypes=ModalHeader_propTypes,ModalHeader.defaultProps={closeLabel:"Close",closeButton:!1},ModalHeader.contextTypes=ModalHeader_contextTypes;const es_ModalHeader=bsClass("modal-header",ModalHeader);var ModalTitle_propTypes={componentClass:elementType_default()},ModalTitle=function(_React$Component){function ModalTitle(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ModalTitle,_React$Component),ModalTitle.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},ModalTitle}(react.Component);ModalTitle.propTypes=ModalTitle_propTypes,ModalTitle.defaultProps={componentClass:"h4"};const es_ModalTitle=bsClass("modal-title",ModalTitle);var Modal_propTypes=_extends({},Modal_default().propTypes,es_ModalDialog.propTypes,{backdrop:prop_types_default().oneOf(["static",!0,!1]),backdropClassName:prop_types_default().string,keyboard:prop_types_default().bool,animation:prop_types_default().bool,dialogComponentClass:elementType_default(),autoFocus:prop_types_default().bool,enforceFocus:prop_types_default().bool,restoreFocus:prop_types_default().bool,show:prop_types_default().bool,onHide:prop_types_default().func,onEnter:prop_types_default().func,onEntering:prop_types_default().func,onEntered:prop_types_default().func,onExit:prop_types_default().func,onExiting:prop_types_default().func,onExited:prop_types_default().func,container:Modal_default().propTypes.container}),Modal_defaultProps=_extends({},Modal_default().defaultProps,{animation:!0,dialogComponentClass:es_ModalDialog}),Modal_childContextTypes={$bs_modal:prop_types_default().shape({onHide:prop_types_default().func})};function DialogTransition(props){return react.createElement(es_Fade,_extends({},props,{timeout:Modal.TRANSITION_DURATION}))}function BackdropTransition(props){return react.createElement(es_Fade,_extends({},props,{timeout:Modal.BACKDROP_TRANSITION_DURATION}))}var Modal=function(_React$Component){function Modal(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleDialogBackdropMouseDown=function(){_this._waitingForMouseUp=!0},_this.handleMouseUp=function(ev){var dialogNode=_this._modal.getDialogElement();_this._waitingForMouseUp&&ev.target===dialogNode&&(_this._ignoreBackdropClick=!0),_this._waitingForMouseUp=!1},_this.handleEntering=_this.handleEntering.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleExited=_this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleWindowResize=_this.handleWindowResize.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleDialogClick=_this.handleDialogClick.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.setModalRef=_this.setModalRef.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.state={style:{}},_this}_inheritsLoose(Modal,_React$Component);var _proto=Modal.prototype;return _proto.getChildContext=function getChildContext(){return{$bs_modal:{onHide:this.props.onHide}}},_proto.componentWillUnmount=function componentWillUnmount(){this.handleExited()},_proto.setModalRef=function setModalRef(ref){this._modal=ref},_proto.handleDialogClick=function handleDialogClick(e){this._ignoreBackdropClick||e.target!==e.currentTarget?this._ignoreBackdropClick=!1:this.props.onHide()},_proto.handleEntering=function handleEntering(){events.Ay.on(window,"resize",this.handleWindowResize),this.updateStyle()},_proto.handleExited=function handleExited(){events.Ay.off(window,"resize",this.handleWindowResize)},_proto.handleWindowResize=function handleWindowResize(){this.updateStyle()},_proto.updateStyle=function updateStyle(){if(inDOM_default()){var dialogNode=this._modal.getDialogElement(),dialogHeight=dialogNode.scrollHeight,document=ownerDocument_default()(dialogNode),bodyIsOverflowing=isOverflowing_default()(react_dom.findDOMNode(this.props.container||document.body)),modalIsOverflowing=dialogHeight>document.documentElement.clientHeight;this.setState({style:{paddingRight:bodyIsOverflowing&&!modalIsOverflowing?scrollbarSize_default()():void 0,paddingLeft:!bodyIsOverflowing&&modalIsOverflowing?scrollbarSize_default()():void 0}})}},_proto.render=function render(){var _this$props=this.props,backdrop=_this$props.backdrop,backdropClassName=_this$props.backdropClassName,animation=_this$props.animation,show=_this$props.show,Dialog=_this$props.dialogComponentClass,className=_this$props.className,style=_this$props.style,children=_this$props.children,onEntering=_this$props.onEntering,onExited=_this$props.onExited,props=_objectWithoutPropertiesLoose(_this$props,["backdrop","backdropClassName","animation","show","dialogComponentClass","className","style","children","onEntering","onExited"]),_splitComponentProps=splitComponentProps(props,Modal_default()),baseModalProps=_splitComponentProps[0],dialogProps=_splitComponentProps[1],inClassName=show&&!animation&&"in";return react.createElement(Modal_default(),_extends({},baseModalProps,{ref:this.setModalRef,show,containerClassName:prefix(props,"open"),transition:animation?DialogTransition:void 0,backdrop,backdropTransition:animation?BackdropTransition:void 0,backdropClassName:classnames_default()(prefix(props,"backdrop"),backdropClassName,inClassName),onEntering:utils_createChainedFunction(onEntering,this.handleEntering),onExited:utils_createChainedFunction(onExited,this.handleExited),onMouseUp:this.handleMouseUp}),react.createElement(Dialog,_extends({},dialogProps,{style:_extends({},this.state.style,style),className:classnames_default()(className,inClassName),onClick:!0===backdrop?this.handleDialogClick:null,onMouseDownDialog:this.handleDialogBackdropMouseDown}),children))},Modal}(react.Component);Modal.propTypes=Modal_propTypes,Modal.defaultProps=Modal_defaultProps,Modal.childContextTypes=Modal_childContextTypes,Modal.Body=es_ModalBody,Modal.Header=es_ModalHeader,Modal.Title=es_ModalTitle,Modal.Footer=es_ModalFooter,Modal.Dialog=es_ModalDialog,Modal.TRANSITION_DURATION=300,Modal.BACKDROP_TRANSITION_DURATION=150;const es_Modal=bsClass("modal",bsSizes([Size_LARGE,Size_SMALL],Modal));var Nav_propTypes={activeKey:prop_types_default().any,activeHref:prop_types_default().string,stacked:prop_types_default().bool,justified:all_default()(prop_types_default().bool,(function(_ref){var justified=_ref.justified,navbar=_ref.navbar;return justified&&navbar?Error("justified navbar `Nav`s are not supported"):null})),onSelect:prop_types_default().func,role:prop_types_default().string,navbar:prop_types_default().bool,pullRight:prop_types_default().bool,pullLeft:prop_types_default().bool},Nav_contextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string,onSelect:prop_types_default().func}),$bs_tabContainer:prop_types_default().shape({activeKey:prop_types_default().any,onSelect:prop_types_default().func.isRequired,getTabId:prop_types_default().func.isRequired,getPaneId:prop_types_default().func.isRequired})},Nav=function(_React$Component){function Nav(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(Nav,_React$Component);var _proto=Nav.prototype;return _proto.componentDidUpdate=function componentDidUpdate(){var _this=this;if(this._needsRefocus){this._needsRefocus=!1;var children=this.props.children,_this$getActiveProps=this.getActiveProps(),activeKey=_this$getActiveProps.activeKey,activeHref=_this$getActiveProps.activeHref,activeChild=ValidComponentChildren.find(children,(function(child){return _this.isActive(child,activeKey,activeHref)})),activeChildIndex=ValidComponentChildren.toArray(children).indexOf(activeChild),childNodes=react_dom.findDOMNode(this).children,activeNode=childNodes&&childNodes[activeChildIndex];activeNode&&activeNode.firstChild&&activeNode.firstChild.focus()}},_proto.getActiveProps=function getActiveProps(){var tabContainer=this.context.$bs_tabContainer;return tabContainer||this.props},_proto.getNextActiveChild=function getNextActiveChild(offset){var _this2=this,children=this.props.children,validChildren=ValidComponentChildren.filter(children,(function(child){return null!=child.props.eventKey&&!child.props.disabled})),_this$getActiveProps2=this.getActiveProps(),activeKey=_this$getActiveProps2.activeKey,activeHref=_this$getActiveProps2.activeHref,activeChild=ValidComponentChildren.find(children,(function(child){return _this2.isActive(child,activeKey,activeHref)})),activeChildIndex=validChildren.indexOf(activeChild);if(-1===activeChildIndex)return validChildren[0];var nextIndex=activeChildIndex+offset,numValidChildren=validChildren.length;return nextIndex>=numValidChildren?nextIndex=0:nextIndex<0&&(nextIndex=numValidChildren-1),validChildren[nextIndex]},_proto.getTabProps=function getTabProps(child,tabContainer,navRole,active,onSelect){var _this3=this;if(!tabContainer&&"tablist"!==navRole)return null;var _child$props=child.props,id=_child$props.id,controls=_child$props["aria-controls"],eventKey=_child$props.eventKey,role=_child$props.role,onKeyDown=_child$props.onKeyDown,tabIndex=_child$props.tabIndex;return tabContainer&&(id=tabContainer.getTabId(eventKey),controls=tabContainer.getPaneId(eventKey)),"tablist"===navRole&&(role=role||"tab",onKeyDown=utils_createChainedFunction((function(event){return _this3.handleTabKeyDown(onSelect,event)}),onKeyDown),tabIndex=active?tabIndex:-1),{id,role,onKeyDown,"aria-controls":controls,tabIndex}},_proto.handleTabKeyDown=function handleTabKeyDown(onSelect,event){var nextActiveChild;switch(event.keyCode){case keycode_default().codes.left:case keycode_default().codes.up:nextActiveChild=this.getNextActiveChild(-1);break;case keycode_default().codes.right:case keycode_default().codes.down:nextActiveChild=this.getNextActiveChild(1);break;default:return}event.preventDefault(),onSelect&&nextActiveChild&&null!=nextActiveChild.props.eventKey&&onSelect(nextActiveChild.props.eventKey),this._needsRefocus=!0},_proto.isActive=function isActive(_ref2,activeKey,activeHref){var props=_ref2.props;return!!(props.active||null!=activeKey&&props.eventKey===activeKey||activeHref&&props.href===activeHref)||props.active},_proto.render=function render(){var _extends2,_this4=this,_this$props=this.props,stacked=_this$props.stacked,justified=_this$props.justified,onSelect=_this$props.onSelect,propsRole=_this$props.role,propsNavbar=_this$props.navbar,pullRight=_this$props.pullRight,pullLeft=_this$props.pullLeft,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["stacked","justified","onSelect","role","navbar","pullRight","pullLeft","className","children"]),tabContainer=this.context.$bs_tabContainer,role=propsRole||(tabContainer?"tablist":null),_this$getActiveProps3=this.getActiveProps(),activeKey=_this$getActiveProps3.activeKey,activeHref=_this$getActiveProps3.activeHref;delete props.activeKey,delete props.activeHref;var pullLeftClassName,pullRightClassName,_splitBsProps=splitBsProps(props),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,"stacked")]=stacked,_extends2[prefix(bsProps,"justified")]=justified,_extends2)),navbar=null!=propsNavbar?propsNavbar:this.context.$bs_navbar;if(navbar){var navbarProps=this.context.$bs_navbar||{bsClass:"navbar"};classes[prefix(navbarProps,"nav")]=!0,pullRightClassName=prefix(navbarProps,"right"),pullLeftClassName=prefix(navbarProps,"left")}else pullRightClassName="pull-right",pullLeftClassName="pull-left";return classes[pullRightClassName]=pullRight,classes[pullLeftClassName]=pullLeft,react.createElement("ul",_extends({},elementProps,{role,className:classnames_default()(className,classes)}),ValidComponentChildren.map(children,(function(child){var active=_this4.isActive(child,activeKey,activeHref),childOnSelect=utils_createChainedFunction(child.props.onSelect,onSelect,navbar&&navbar.onSelect,tabContainer&&tabContainer.onSelect);return(0,react.cloneElement)(child,_extends({},_this4.getTabProps(child,tabContainer,role,active,childOnSelect),{active,activeKey,activeHref,onSelect:childOnSelect}))})))},Nav}(react.Component);Nav.propTypes=Nav_propTypes,Nav.defaultProps={justified:!1,pullRight:!1,pullLeft:!1,stacked:!1},Nav.contextTypes=Nav_contextTypes;const es_Nav=bsClass("nav",bsStyles(["tabs","pills"],Nav));var NavbarBrand_contextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string})},NavbarBrand=function(_React$Component){function NavbarBrand(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(NavbarBrand,_React$Component),NavbarBrand.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["className","children"]),bsClassName=prefix(this.context.$bs_navbar||{bsClass:"navbar"},"brand");return react.isValidElement(children)?react.cloneElement(children,{className:classnames_default()(children.props.className,className,bsClassName)}):react.createElement("span",_extends({},props,{className:classnames_default()(className,bsClassName)}),children)},NavbarBrand}(react.Component);NavbarBrand.contextTypes=NavbarBrand_contextTypes;const es_NavbarBrand=NavbarBrand;var NavbarCollapse_contextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string,expanded:prop_types_default().bool})},NavbarCollapse=function(_React$Component){function NavbarCollapse(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(NavbarCollapse,_React$Component),NavbarCollapse.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["children"]),navbarProps=this.context.$bs_navbar||{bsClass:"navbar"},bsClassName=prefix(navbarProps,"collapse");return react.createElement(es_Collapse,_extends({in:navbarProps.expanded},props),react.createElement("div",{className:bsClassName},children))},NavbarCollapse}(react.Component);NavbarCollapse.contextTypes=NavbarCollapse_contextTypes;const es_NavbarCollapse=NavbarCollapse;var NavbarHeader_contextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string})},NavbarHeader=function(_React$Component){function NavbarHeader(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(NavbarHeader,_React$Component),NavbarHeader.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,props=_objectWithoutPropertiesLoose(_this$props,["className"]),bsClassName=prefix(this.context.$bs_navbar||{bsClass:"navbar"},"header");return react.createElement("div",_extends({},props,{className:classnames_default()(className,bsClassName)}))},NavbarHeader}(react.Component);NavbarHeader.contextTypes=NavbarHeader_contextTypes;const es_NavbarHeader=NavbarHeader;var NavbarToggle_propTypes={onClick:prop_types_default().func,children:prop_types_default().node},NavbarToggle_contextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string,expanded:prop_types_default().bool,onToggle:prop_types_default().func.isRequired})},NavbarToggle=function(_React$Component){function NavbarToggle(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(NavbarToggle,_React$Component),NavbarToggle.prototype.render=function render(){var _this$props=this.props,onClick=_this$props.onClick,className=_this$props.className,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["onClick","className","children"]),navbarProps=this.context.$bs_navbar||{bsClass:"navbar"},buttonProps=_extends({type:"button"},props,{onClick:utils_createChainedFunction(onClick,navbarProps.onToggle),className:classnames_default()(className,prefix(navbarProps,"toggle"),!navbarProps.expanded&&"collapsed")});return children?react.createElement("button",buttonProps,children):react.createElement("button",buttonProps,react.createElement("span",{className:"sr-only"},"Toggle navigation"),react.createElement("span",{className:"icon-bar"}),react.createElement("span",{className:"icon-bar"}),react.createElement("span",{className:"icon-bar"}))},NavbarToggle}(react.Component);NavbarToggle.propTypes=NavbarToggle_propTypes,NavbarToggle.contextTypes=NavbarToggle_contextTypes;const es_NavbarToggle=NavbarToggle;var Navbar_propTypes={fixedTop:prop_types_default().bool,fixedBottom:prop_types_default().bool,staticTop:prop_types_default().bool,inverse:prop_types_default().bool,fluid:prop_types_default().bool,componentClass:elementType_default(),onToggle:prop_types_default().func,onSelect:prop_types_default().func,collapseOnSelect:prop_types_default().bool,expanded:prop_types_default().bool,role:prop_types_default().string},Navbar_childContextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string,expanded:prop_types_default().bool,onToggle:prop_types_default().func.isRequired,onSelect:prop_types_default().func})},Navbar=function(_React$Component){function Navbar(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleToggle=_this.handleToggle.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleCollapse=_this.handleCollapse.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(Navbar,_React$Component);var _proto=Navbar.prototype;return _proto.getChildContext=function getChildContext(){var _this$props=this.props,bsClass=_this$props.bsClass,expanded=_this$props.expanded,onSelect=_this$props.onSelect,collapseOnSelect=_this$props.collapseOnSelect;return{$bs_navbar:{bsClass,expanded,onToggle:this.handleToggle,onSelect:utils_createChainedFunction(onSelect,collapseOnSelect?this.handleCollapse:null)}}},_proto.handleCollapse=function handleCollapse(){var _this$props2=this.props,onToggle=_this$props2.onToggle;_this$props2.expanded&&onToggle(!1)},_proto.handleToggle=function handleToggle(){var _this$props3=this.props;(0,_this$props3.onToggle)(!_this$props3.expanded)},_proto.render=function render(){var _extends2,_this$props4=this.props,Component=_this$props4.componentClass,fixedTop=_this$props4.fixedTop,fixedBottom=_this$props4.fixedBottom,staticTop=_this$props4.staticTop,inverse=_this$props4.inverse,fluid=_this$props4.fluid,className=_this$props4.className,children=_this$props4.children,_splitBsPropsAndOmit=splitBsPropsAndOmit(_objectWithoutPropertiesLoose(_this$props4,["componentClass","fixedTop","fixedBottom","staticTop","inverse","fluid","className","children"]),["expanded","onToggle","onSelect","collapseOnSelect"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1];void 0===elementProps.role&&"nav"!==Component&&(elementProps.role="navigation"),inverse&&(bsProps.bsStyle=Style_INVERSE);var classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,"fixed-top")]=fixedTop,_extends2[prefix(bsProps,"fixed-bottom")]=fixedBottom,_extends2[prefix(bsProps,"static-top")]=staticTop,_extends2));return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}),react.createElement(es_Grid,{fluid},children))},Navbar}(react.Component);Navbar.propTypes=Navbar_propTypes,Navbar.defaultProps={componentClass:"nav",fixedTop:!1,fixedBottom:!1,staticTop:!1,inverse:!1,fluid:!1,collapseOnSelect:!1},Navbar.childContextTypes=Navbar_childContextTypes,bsClass("navbar",Navbar);var UncontrollableNavbar=(0,esm.Pd)(Navbar,{expanded:"onToggle"});function createSimpleWrapper(tag,suffix,displayName){var Wrapper=function Wrapper(_ref,_ref2){var Component=_ref.componentClass,className=_ref.className,pullRight=_ref.pullRight,pullLeft=_ref.pullLeft,props=_objectWithoutPropertiesLoose(_ref,["componentClass","className","pullRight","pullLeft"]),_ref2$$bs_navbar=_ref2.$bs_navbar,navbarProps=void 0===_ref2$$bs_navbar?{bsClass:"navbar"}:_ref2$$bs_navbar;return react.createElement(Component,_extends({},props,{className:classnames_default()(className,prefix(navbarProps,suffix),pullRight&&prefix(navbarProps,"right"),pullLeft&&prefix(navbarProps,"left"))}))};return Wrapper.displayName=displayName,Wrapper.propTypes={componentClass:elementType_default(),pullRight:prop_types_default().bool,pullLeft:prop_types_default().bool},Wrapper.defaultProps={componentClass:tag,pullRight:!1,pullLeft:!1},Wrapper.contextTypes={$bs_navbar:prop_types_default().shape({bsClass:prop_types_default().string})},Wrapper}UncontrollableNavbar.Brand=es_NavbarBrand,UncontrollableNavbar.Header=es_NavbarHeader,UncontrollableNavbar.Toggle=es_NavbarToggle,UncontrollableNavbar.Collapse=es_NavbarCollapse,UncontrollableNavbar.Form=createSimpleWrapper("div","form","NavbarForm"),UncontrollableNavbar.Text=createSimpleWrapper("p","text","NavbarText"),UncontrollableNavbar.Link=createSimpleWrapper("a","link","NavbarLink");const es_Navbar=bsStyles([Style_DEFAULT,Style_INVERSE],Style_DEFAULT)(UncontrollableNavbar);var NavDropdown_propTypes=_extends({},es_Dropdown.propTypes,{title:prop_types_default().node.isRequired,noCaret:prop_types_default().bool,active:prop_types_default().bool,activeKey:prop_types_default().any,activeHref:prop_types_default().string,children:prop_types_default().node}),NavDropdown=function(_React$Component){function NavDropdown(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(NavDropdown,_React$Component);var _proto=NavDropdown.prototype;return _proto.isActive=function isActive(_ref,activeKey,activeHref){var _this=this,props=_ref.props;return!!(props.active||null!=activeKey&&props.eventKey===activeKey||activeHref&&props.href===activeHref)||(!!ValidComponentChildren.some(props.children,(function(child){return _this.isActive(child,activeKey,activeHref)}))||props.active)},_proto.render=function render(){var _this2=this,_this$props=this.props,title=_this$props.title,activeKey=_this$props.activeKey,activeHref=_this$props.activeHref,className=_this$props.className,style=_this$props.style,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["title","activeKey","activeHref","className","style","children"]),active=this.isActive(this,activeKey,activeHref);delete props.active,delete props.eventKey;var _splitComponentProps=splitComponentProps(props,es_Dropdown.ControlledComponent),dropdownProps=_splitComponentProps[0],toggleProps=_splitComponentProps[1];return react.createElement(es_Dropdown,_extends({},dropdownProps,{componentClass:"li",className:classnames_default()(className,{active}),style}),react.createElement(es_Dropdown.Toggle,_extends({},toggleProps,{useAnchor:!0}),title),react.createElement(es_Dropdown.Menu,null,ValidComponentChildren.map(children,(function(child){return react.cloneElement(child,{active:_this2.isActive(child,activeKey,activeHref)})}))))},NavDropdown}(react.Component);NavDropdown.propTypes=NavDropdown_propTypes;const es_NavDropdown=NavDropdown;var NavItem_propTypes={active:prop_types_default().bool,disabled:prop_types_default().bool,role:prop_types_default().string,href:prop_types_default().string,onClick:prop_types_default().func,onSelect:prop_types_default().func,eventKey:prop_types_default().any},NavItem=function(_React$Component){function NavItem(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleClick=_this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(NavItem,_React$Component);var _proto=NavItem.prototype;return _proto.handleClick=function handleClick(e){this.props.disabled?e.preventDefault():this.props.onSelect&&this.props.onSelect(this.props.eventKey,e)},_proto.render=function render(){var _this$props=this.props,active=_this$props.active,disabled=_this$props.disabled,onClick=_this$props.onClick,className=_this$props.className,style=_this$props.style,props=_objectWithoutPropertiesLoose(_this$props,["active","disabled","onClick","className","style"]);return delete props.onSelect,delete props.eventKey,delete props.activeKey,delete props.activeHref,props.role?"tab"===props.role&&(props["aria-selected"]=active):"#"===props.href&&(props.role="button"),react.createElement("li",{role:"presentation",className:classnames_default()(className,{active,disabled}),style},react.createElement(es_SafeAnchor,_extends({},props,{disabled,onClick:utils_createChainedFunction(onClick,this.handleClick)})))},NavItem}(react.Component);NavItem.propTypes=NavItem_propTypes,NavItem.defaultProps={active:!1,disabled:!1};const es_NavItem=NavItem;var lib_Overlay=__webpack_require__("./node_modules/react-overlays/lib/Overlay.js"),Overlay_default=__webpack_require__.n(lib_Overlay),Overlay_propTypes=_extends({},Overlay_default().propTypes,{show:prop_types_default().bool,rootClose:prop_types_default().bool,onHide:prop_types_default().func,animation:prop_types_default().oneOfType([prop_types_default().bool,elementType_default()]),onEnter:prop_types_default().func,onEntering:prop_types_default().func,onEntered:prop_types_default().func,onExit:prop_types_default().func,onExiting:prop_types_default().func,onExited:prop_types_default().func,placement:prop_types_default().oneOf(["top","right","bottom","left"])}),Overlay_defaultProps={animation:es_Fade,rootClose:!1,show:!1,placement:"right"},Overlay=function(_React$Component){function Overlay(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Overlay,_React$Component),Overlay.prototype.render=function render(){var child,_this$props=this.props,animation=_this$props.animation,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["animation","children"]),transition=!0===animation?es_Fade:animation||null;return child=transition?children:(0,react.cloneElement)(children,{className:classnames_default()(children.props.className,"in")}),react.createElement(Overlay_default(),_extends({},props,{transition}),child)},Overlay}(react.Component);Overlay.propTypes=Overlay_propTypes,Overlay.defaultProps=Overlay_defaultProps;const es_Overlay=Overlay;var is_array=__webpack_require__("./node_modules/@babel/runtime-corejs2/core-js/array/is-array.js"),is_array_default=__webpack_require__.n(is_array);function isOneOf(one,of){return is_array_default()(of)?of.indexOf(one)>=0:one===of}var triggerType=prop_types_default().oneOf(["click","hover","focus"]),OverlayTrigger_propTypes=_extends({},es_Overlay.propTypes,{trigger:prop_types_default().oneOfType([triggerType,prop_types_default().arrayOf(triggerType)]),delay:prop_types_default().number,delayShow:prop_types_default().number,delayHide:prop_types_default().number,defaultOverlayShown:prop_types_default().bool,overlay:prop_types_default().node.isRequired,onBlur:prop_types_default().func,onClick:prop_types_default().func,onFocus:prop_types_default().func,onMouseOut:prop_types_default().func,onMouseOver:prop_types_default().func,target:prop_types_default().oneOf([null]),onHide:prop_types_default().oneOf([null]),show:prop_types_default().oneOf([null])}),OverlayTrigger=function(_React$Component){function OverlayTrigger(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleToggle=_this.handleToggle.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleDelayedShow=_this.handleDelayedShow.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleDelayedHide=_this.handleDelayedHide.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleHide=_this.handleHide.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleMouseOver=function(e){return _this.handleMouseOverOut(_this.handleDelayedShow,e,"fromElement")},_this.handleMouseOut=function(e){return _this.handleMouseOverOut(_this.handleDelayedHide,e,"toElement")},_this._mountNode=null,_this.state={show:props.defaultOverlayShown},_this}_inheritsLoose(OverlayTrigger,_React$Component);var _proto=OverlayTrigger.prototype;return _proto.componentDidMount=function componentDidMount(){this._mountNode=document.createElement("div"),this.renderOverlay()},_proto.componentDidUpdate=function componentDidUpdate(){this.renderOverlay()},_proto.componentWillUnmount=function componentWillUnmount(){react_dom.unmountComponentAtNode(this._mountNode),this._mountNode=null,clearTimeout(this._hoverShowDelay),clearTimeout(this._hoverHideDelay)},_proto.handleDelayedHide=function handleDelayedHide(){var _this2=this;if(null!=this._hoverShowDelay)return clearTimeout(this._hoverShowDelay),void(this._hoverShowDelay=null);if(this.state.show&&null==this._hoverHideDelay){var delay=null!=this.props.delayHide?this.props.delayHide:this.props.delay;delay?this._hoverHideDelay=setTimeout((function(){_this2._hoverHideDelay=null,_this2.hide()}),delay):this.hide()}},_proto.handleDelayedShow=function handleDelayedShow(){var _this3=this;if(null!=this._hoverHideDelay)return clearTimeout(this._hoverHideDelay),void(this._hoverHideDelay=null);if(!this.state.show&&null==this._hoverShowDelay){var delay=null!=this.props.delayShow?this.props.delayShow:this.props.delay;delay?this._hoverShowDelay=setTimeout((function(){_this3._hoverShowDelay=null,_this3.show()}),delay):this.show()}},_proto.handleHide=function handleHide(){this.hide()},_proto.handleMouseOverOut=function handleMouseOverOut(handler,e,relatedNative){var target=e.currentTarget,related=e.relatedTarget||e.nativeEvent[relatedNative];related&&related===target||contains_default()(target,related)||handler(e)},_proto.handleToggle=function handleToggle(){this.state.show?this.hide():this.show()},_proto.hide=function hide(){this.setState({show:!1})},_proto.makeOverlay=function makeOverlay(overlay,props){return react.createElement(es_Overlay,_extends({},props,{show:this.state.show,onHide:this.handleHide,target:this}),overlay)},_proto.show=function show(){this.setState({show:!0})},_proto.renderOverlay=function renderOverlay(){react_dom.unstable_renderSubtreeIntoContainer(this,this._overlay,this._mountNode)},_proto.render=function render(){var _this$props=this.props,trigger=_this$props.trigger,overlay=_this$props.overlay,children=_this$props.children,onBlur=_this$props.onBlur,onClick=_this$props.onClick,onFocus=_this$props.onFocus,onMouseOut=_this$props.onMouseOut,onMouseOver=_this$props.onMouseOver,props=_objectWithoutPropertiesLoose(_this$props,["trigger","overlay","children","onBlur","onClick","onFocus","onMouseOut","onMouseOver"]);delete props.delay,delete props.delayShow,delete props.delayHide,delete props.defaultOverlayShown;var child=react.Children.only(children),childProps=child.props,triggerProps={};return this.state.show&&(triggerProps["aria-describedby"]=overlay.props.id),triggerProps.onClick=utils_createChainedFunction(childProps.onClick,onClick),isOneOf("click",trigger)&&(triggerProps.onClick=utils_createChainedFunction(triggerProps.onClick,this.handleToggle)),isOneOf("hover",trigger)&&(triggerProps.onMouseOver=utils_createChainedFunction(childProps.onMouseOver,onMouseOver,this.handleMouseOver),triggerProps.onMouseOut=utils_createChainedFunction(childProps.onMouseOut,onMouseOut,this.handleMouseOut)),isOneOf("focus",trigger)&&(triggerProps.onFocus=utils_createChainedFunction(childProps.onFocus,onFocus,this.handleDelayedShow),triggerProps.onBlur=utils_createChainedFunction(childProps.onBlur,onBlur,this.handleDelayedHide)),this._overlay=this.makeOverlay(overlay,props),(0,react.cloneElement)(child,triggerProps)},OverlayTrigger}(react.Component);OverlayTrigger.propTypes=OverlayTrigger_propTypes,OverlayTrigger.defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]};const es_OverlayTrigger=OverlayTrigger;var PageHeader=function(_React$Component){function PageHeader(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(PageHeader,_React$Component),PageHeader.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}),react.createElement("h1",null,children))},PageHeader}(react.Component);const es_PageHeader=bsClass("page-header",PageHeader);var PagerItem_propTypes={disabled:prop_types_default().bool,previous:prop_types_default().bool,next:prop_types_default().bool,onClick:prop_types_default().func,onSelect:prop_types_default().func,eventKey:prop_types_default().any},PagerItem=function(_React$Component){function PagerItem(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleSelect=_this.handleSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(PagerItem,_React$Component);var _proto=PagerItem.prototype;return _proto.handleSelect=function handleSelect(e){var _this$props=this.props,disabled=_this$props.disabled,onSelect=_this$props.onSelect,eventKey=_this$props.eventKey;disabled?e.preventDefault():onSelect&&onSelect(eventKey,e)},_proto.render=function render(){var _this$props2=this.props,disabled=_this$props2.disabled,previous=_this$props2.previous,next=_this$props2.next,onClick=_this$props2.onClick,className=_this$props2.className,style=_this$props2.style,props=_objectWithoutPropertiesLoose(_this$props2,["disabled","previous","next","onClick","className","style"]);return delete props.onSelect,delete props.eventKey,react.createElement("li",{className:classnames_default()(className,{disabled,previous,next}),style},react.createElement(es_SafeAnchor,_extends({},props,{disabled,onClick:utils_createChainedFunction(onClick,this.handleSelect)})))},PagerItem}(react.Component);PagerItem.propTypes=PagerItem_propTypes,PagerItem.defaultProps={disabled:!1,previous:!1,next:!1};const es_PagerItem=PagerItem;var warned={};function deprecationWarning(oldname,newname,link){var message;"object"==typeof oldname?message=oldname.message:(message=oldname+" is deprecated. Use "+newname+" instead.",link&&(message+="\nYou can read more about it at "+link)),warned[message]||(warned[message]=!0)}deprecationWarning.wrapper=function(Component){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];return function(_Component){function DeprecatedComponent(){return _Component.apply(this,arguments)||this}return _inheritsLoose(DeprecatedComponent,_Component),DeprecatedComponent.prototype.UNSAFE_componentWillMount=function UNSAFE_componentWillMount(){if(deprecationWarning.apply(void 0,args),_Component.prototype.UNSAFE_componentWillMount){for(var _Component$prototype$,_len2=arguments.length,methodArgs=new Array(_len2),_key2=0;_key2<_len2;_key2++)methodArgs[_key2]=arguments[_key2];(_Component$prototype$=_Component.prototype.UNSAFE_componentWillMount).call.apply(_Component$prototype$,[this].concat(methodArgs))}},DeprecatedComponent}(Component)};const PageItem=deprecationWarning.wrapper(es_PagerItem,"`<PageItem>`","`<Pager.Item>`");var Pager_propTypes={onSelect:prop_types_default().func},Pager=function(_React$Component){function Pager(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Pager,_React$Component),Pager.prototype.render=function render(){var _this$props=this.props,onSelect=_this$props.onSelect,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["onSelect","className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("ul",_extends({},elementProps,{className:classnames_default()(className,classes)}),ValidComponentChildren.map(children,(function(child){return(0,react.cloneElement)(child,{onSelect:utils_createChainedFunction(child.props.onSelect,onSelect)})})))},Pager}(react.Component);Pager.propTypes=Pager_propTypes,Pager.Item=es_PagerItem;const es_Pager=bsClass("pager",Pager);var PaginationItem_propTypes={eventKey:prop_types_default().any,className:prop_types_default().string,onSelect:prop_types_default().func,disabled:prop_types_default().bool,active:prop_types_default().bool,activeLabel:prop_types_default().string.isRequired};function PaginationItem(_ref){var active=_ref.active,disabled=_ref.disabled,className=_ref.className,style=_ref.style,activeLabel=_ref.activeLabel,children=_ref.children,props=_objectWithoutPropertiesLoose(_ref,["active","disabled","className","style","activeLabel","children"]),Component=active||disabled?"span":es_SafeAnchor;return react.createElement("li",{style,className:classnames_default()(className,{active,disabled})},react.createElement(Component,_extends({disabled},props),children,active&&react.createElement("span",{className:"sr-only"},activeLabel)))}function createButton(name,defaultValue,label){var _class,_temp;return void 0===label&&(label=name),_temp=_class=function(_React$Component){function _class(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(_class,_React$Component),_class.prototype.render=function render(){var _this$props=this.props,disabled=_this$props.disabled,children=_this$props.children,className=_this$props.className,props=_objectWithoutPropertiesLoose(_this$props,["disabled","children","className"]),Component=disabled?"span":es_SafeAnchor;return react.createElement("li",_extends({"aria-label":label,className:classnames_default()(className,{disabled})},props),react.createElement(Component,null,children||defaultValue))},_class}(react.Component),_class.displayName=name,_class.propTypes={disabled:prop_types_default().bool},_temp}PaginationItem.propTypes=PaginationItem_propTypes,PaginationItem.defaultProps={active:!1,disabled:!1,activeLabel:"(current)"};var First=createButton("First","«"),Prev=createButton("Prev","‹"),Ellipsis=createButton("Ellipsis","…","More"),Next=createButton("Next","›"),Last=createButton("Last","»"),Pagination=function(_React$Component){function Pagination(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Pagination,_React$Component),Pagination.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("ul",_extends({},elementProps,{className:classnames_default()(className,classes)}),children)},Pagination}(react.Component);bsClass("pagination",Pagination),Pagination.First=First,Pagination.Prev=Prev,Pagination.Ellipsis=Ellipsis,Pagination.Item=PaginationItem,Pagination.Next=Next,Pagination.Last=Last;const es_Pagination=Pagination;var PanelCollapse_propTypes={onEnter:prop_types_default().func,onEntering:prop_types_default().func,onEntered:prop_types_default().func,onExit:prop_types_default().func,onExiting:prop_types_default().func,onExited:prop_types_default().func},PanelCollapse_contextTypes={$bs_panel:prop_types_default().shape({headingId:prop_types_default().string,bodyId:prop_types_default().string,bsClass:prop_types_default().string,expanded:prop_types_default().bool})},PanelCollapse=function(_React$Component){function PanelCollapse(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(PanelCollapse,_React$Component),PanelCollapse.prototype.render=function render(){var children=this.props.children,_ref=this.context.$bs_panel||{},headingId=_ref.headingId,bodyId=_ref.bodyId,_bsClass=_ref.bsClass,expanded=_ref.expanded,_splitBsProps=splitBsProps(this.props),bsProps=_splitBsProps[0],props=_splitBsProps[1];return bsProps.bsClass=_bsClass||bsProps.bsClass,headingId&&bodyId&&(props.id=bodyId,props.role=props.role||"tabpanel",props["aria-labelledby"]=headingId),react.createElement(es_Collapse,_extends({in:expanded},props),react.createElement("div",{className:prefix(bsProps,"collapse")},children))},PanelCollapse}(react.Component);PanelCollapse.propTypes=PanelCollapse_propTypes,PanelCollapse.contextTypes=PanelCollapse_contextTypes;const es_PanelCollapse=bsClass("panel",PanelCollapse);var PanelBody_propTypes={collapsible:prop_types_default().bool.isRequired},PanelBody_contextTypes={$bs_panel:prop_types_default().shape({bsClass:prop_types_default().string})},PanelBody=function(_React$Component){function PanelBody(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(PanelBody,_React$Component),PanelBody.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,className=_this$props.className,collapsible=_this$props.collapsible,_bsClass=(this.context.$bs_panel||{}).bsClass,_splitBsPropsAndOmit=splitBsPropsAndOmit(this.props,["collapsible"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1];bsProps.bsClass=_bsClass||bsProps.bsClass;var body=react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,prefix(bsProps,"body"))}),children);return collapsible&&(body=react.createElement(es_PanelCollapse,null,body)),body},PanelBody}(react.Component);PanelBody.propTypes=PanelBody_propTypes,PanelBody.defaultProps={collapsible:!1},PanelBody.contextTypes=PanelBody_contextTypes;const es_PanelBody=bsClass("panel",PanelBody);var lib_elementType=__webpack_require__("./node_modules/react-prop-types/lib/elementType.js"),PanelHeading_propTypes={componentClass:lib_elementType.default},PanelHeading_contextTypes={$bs_panel:prop_types_default().shape({headingId:prop_types_default().string,bsClass:prop_types_default().string})},PanelHeading=function(_React$Component){function PanelHeading(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(PanelHeading,_React$Component),PanelHeading.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,className=_this$props.className,Component=_this$props.componentClass,props=_objectWithoutPropertiesLoose(_this$props,["children","className","componentClass"]),_ref=this.context.$bs_panel||{},headingId=_ref.headingId,_bsClass=_ref.bsClass,_splitBsProps=splitBsProps(props),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1];return bsProps.bsClass=_bsClass||bsProps.bsClass,headingId&&(elementProps.role=elementProps.role||"tab",elementProps.id=headingId),react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,prefix(bsProps,"heading"))}),children)},PanelHeading}(react.Component);PanelHeading.propTypes=PanelHeading_propTypes,PanelHeading.defaultProps={componentClass:"div"},PanelHeading.contextTypes=PanelHeading_contextTypes;const es_PanelHeading=bsClass("panel",PanelHeading);var PanelToggle_propTypes={onClick:prop_types_default().func,componentClass:lib_elementType.default},PanelToggle_defaultProps={componentClass:es_SafeAnchor},PanelToggle_contextTypes={$bs_panel:prop_types_default().shape({bodyId:prop_types_default().string,onToggle:prop_types_default().func,expanded:prop_types_default().bool})},PanelToggle=function(_React$Component){function PanelToggle(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).handleToggle=_this.handleToggle.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this}_inheritsLoose(PanelToggle,_React$Component);var _proto=PanelToggle.prototype;return _proto.handleToggle=function handleToggle(event){var onToggle=(this.context.$bs_panel||{}).onToggle;onToggle&&onToggle(event)},_proto.render=function render(){var _this$props=this.props,onClick=_this$props.onClick,className=_this$props.className,componentClass=_this$props.componentClass,props=_objectWithoutPropertiesLoose(_this$props,["onClick","className","componentClass"]),_ref2=this.context.$bs_panel||{},expanded=_ref2.expanded,bodyId=_ref2.bodyId,Component=componentClass;return props.onClick=utils_createChainedFunction(onClick,this.handleToggle),props["aria-expanded"]=expanded,props.className=classnames_default()(className,!expanded&&"collapsed"),bodyId&&(props["aria-controls"]=bodyId),react.createElement(Component,props)},PanelToggle}(react.Component);PanelToggle.propTypes=PanelToggle_propTypes,PanelToggle.defaultProps=PanelToggle_defaultProps,PanelToggle.contextTypes=PanelToggle_contextTypes;const es_PanelToggle=PanelToggle;var PanelTitle_propTypes={componentClass:lib_elementType.default,toggle:prop_types_default().bool},PanelTitle_contextTypes={$bs_panel:prop_types_default().shape({bsClass:prop_types_default().string})},PanelTitle=function(_React$Component){function PanelTitle(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(PanelTitle,_React$Component),PanelTitle.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,className=_this$props.className,toggle=_this$props.toggle,Component=_this$props.componentClass,props=_objectWithoutPropertiesLoose(_this$props,["children","className","toggle","componentClass"]),_bsClass=(this.context.$bs_panel||{}).bsClass,_splitBsProps=splitBsProps(props),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1];return bsProps.bsClass=_bsClass||bsProps.bsClass,toggle&&(children=react.createElement(es_PanelToggle,null,children)),react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,prefix(bsProps,"title"))}),children)},PanelTitle}(react.Component);PanelTitle.propTypes=PanelTitle_propTypes,PanelTitle.defaultProps={componentClass:"div"},PanelTitle.contextTypes=PanelTitle_contextTypes;const es_PanelTitle=bsClass("panel",PanelTitle);var PanelFooter_contextTypes={$bs_panel:prop_types_default().shape({bsClass:prop_types_default().string})},PanelFooter=function(_React$Component){function PanelFooter(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(PanelFooter,_React$Component),PanelFooter.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,className=_this$props.className,_bsClass=(this.context.$bs_panel||{}).bsClass,_splitBsProps=splitBsProps(this.props),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1];return bsProps.bsClass=_bsClass||bsProps.bsClass,react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,prefix(bsProps,"footer"))}),children)},PanelFooter}(react.Component);PanelFooter.contextTypes=PanelFooter_contextTypes;const es_PanelFooter=bsClass("panel",PanelFooter);var has=Object.prototype.hasOwnProperty,defaultGetId=function defaultGetId(id,type){return id?id+"--"+type:null},Panel_propTypes={expanded:prop_types_default().bool,onToggle:prop_types_default().func,eventKey:prop_types_default().any,id:prop_types_default().string},Panel_contextTypes={$bs_panelGroup:prop_types_default().shape({getId:prop_types_default().func,activeKey:prop_types_default().any,onToggle:prop_types_default().func})},Panel_childContextTypes={$bs_panel:prop_types_default().shape({headingId:prop_types_default().string,bodyId:prop_types_default().string,bsClass:prop_types_default().string,onToggle:prop_types_default().func,expanded:prop_types_default().bool})},Panel=function(_React$Component){function Panel(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).handleToggle=function(e){var panelGroup=_this.context.$bs_panelGroup,expanded=!_this.getExpanded();panelGroup&&panelGroup.onToggle?panelGroup.onToggle(_this.props.eventKey,expanded,e):_this.props.onToggle(expanded,e)},_this}_inheritsLoose(Panel,_React$Component);var _proto=Panel.prototype;return _proto.getChildContext=function getChildContext(){var ids,_this$props=this.props,eventKey=_this$props.eventKey,id=_this$props.id,idKey=null==eventKey?id:eventKey;if(null!==idKey){var panelGroup=this.context.$bs_panelGroup,getId=panelGroup&&panelGroup.getId||defaultGetId;ids={headingId:getId(idKey,"heading"),bodyId:getId(idKey,"body")}}return{$bs_panel:_extends({},ids,{bsClass:this.props.bsClass,expanded:this.getExpanded(),onToggle:this.handleToggle})}},_proto.getExpanded=function getExpanded(){var panelGroup=this.context.$bs_panelGroup;return panelGroup&&has.call(panelGroup,"activeKey")?panelGroup.activeKey===this.props.eventKey:!!this.props.expanded},_proto.render=function render(){var _this$props2=this.props,className=_this$props2.className,children=_this$props2.children,_splitBsPropsAndOmit=splitBsPropsAndOmit(this.props,["onToggle","eventKey","expanded"]),bsProps=_splitBsPropsAndOmit[0],props=_splitBsPropsAndOmit[1];return react.createElement("div",_extends({},props,{className:classnames_default()(className,getClassSet(bsProps))}),children)},Panel}(react.Component);Panel.propTypes=Panel_propTypes,Panel.contextTypes=Panel_contextTypes,Panel.childContextTypes=Panel_childContextTypes;var UncontrolledPanel=(0,esm.Pd)(bsClass("panel",bsStyles(values_default()(State).concat([Style_DEFAULT,Style_PRIMARY]),Style_DEFAULT,Panel)),{expanded:"onToggle"});assign_default()(UncontrolledPanel,{Heading:es_PanelHeading,Title:es_PanelTitle,Body:es_PanelBody,Footer:es_PanelFooter,Toggle:es_PanelToggle,Collapse:es_PanelCollapse});const es_Panel=UncontrolledPanel;var Popover_propTypes={id:isRequiredForA11y_default()(prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number])),placement:prop_types_default().oneOf(["top","right","bottom","left"]),positionTop:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),positionLeft:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),arrowOffsetTop:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),arrowOffsetLeft:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),title:prop_types_default().node},Popover=function(_React$Component){function Popover(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Popover,_React$Component),Popover.prototype.render=function render(){var _extends2,_this$props=this.props,placement=_this$props.placement,positionTop=_this$props.positionTop,positionLeft=_this$props.positionLeft,arrowOffsetTop=_this$props.arrowOffsetTop,arrowOffsetLeft=_this$props.arrowOffsetLeft,title=_this$props.title,className=_this$props.className,style=_this$props.style,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","title","className","style","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[placement]=!0,_extends2)),outerStyle=_extends({display:"block",top:positionTop,left:positionLeft},style),arrowStyle={top:arrowOffsetTop,left:arrowOffsetLeft};return react.createElement("div",_extends({},elementProps,{role:"tooltip",className:classnames_default()(className,classes),style:outerStyle}),react.createElement("div",{className:"arrow",style:arrowStyle}),title&&react.createElement("h3",{className:prefix(bsProps,"title")},title),react.createElement("div",{className:prefix(bsProps,"content")},children))},Popover}(react.Component);Popover.propTypes=Popover_propTypes,Popover.defaultProps={placement:"right"};const es_Popover=bsClass("popover",Popover);var ProgressBar_propTypes={min:prop_types_default().number,now:prop_types_default().number,max:prop_types_default().number,label:prop_types_default().node,srOnly:prop_types_default().bool,striped:prop_types_default().bool,active:prop_types_default().bool,children:function onlyProgressBar(props,propName,componentName){var children=props[propName];if(!children)return null;var error=null;return react.Children.forEach(children,(function(child){if(!error){var element=react.createElement(ProgressBar,null);if(child.type!==element.type){var childIdentifier=react.isValidElement(child)?child.type.displayName||child.type.name||child.type:child;error=new Error("Children of "+componentName+" can contain only ProgressBar components. Found "+childIdentifier+".")}}})),error},isChild:prop_types_default().bool};function getPercentage(now,min,max){var percentage=(now-min)/(max-min)*100;return Math.round(1e3*percentage)/1e3}var ProgressBar=function(_React$Component){function ProgressBar(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(ProgressBar,_React$Component);var _proto=ProgressBar.prototype;return _proto.renderProgressBar=function renderProgressBar(_ref){var _extends2,min=_ref.min,now=_ref.now,max=_ref.max,label=_ref.label,srOnly=_ref.srOnly,striped=_ref.striped,active=_ref.active,className=_ref.className,style=_ref.style,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_ref,["min","now","max","label","srOnly","striped","active","className","style"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={active})[prefix(bsProps,"striped")]=active||striped,_extends2));return react.createElement("div",_extends({},elementProps,{role:"progressbar",className:classnames_default()(className,classes),style:_extends({width:getPercentage(now,min,max)+"%"},style),"aria-valuenow":now,"aria-valuemin":min,"aria-valuemax":max}),srOnly?react.createElement("span",{className:"sr-only"},label):label)},_proto.render=function render(){var _this$props=this.props,isChild=_this$props.isChild,props=_objectWithoutPropertiesLoose(_this$props,["isChild"]);if(isChild)return this.renderProgressBar(props);var min=props.min,now=props.now,max=props.max,label=props.label,srOnly=props.srOnly,striped=props.striped,active=props.active,bsClass=props.bsClass,bsStyle=props.bsStyle,className=props.className,children=props.children,wrapperProps=_objectWithoutPropertiesLoose(props,["min","now","max","label","srOnly","striped","active","bsClass","bsStyle","className","children"]);return react.createElement("div",_extends({},wrapperProps,{className:classnames_default()(className,"progress")}),children?ValidComponentChildren.map(children,(function(child){return(0,react.cloneElement)(child,{isChild:!0})})):this.renderProgressBar({min,now,max,label,srOnly,striped,active,bsClass,bsStyle}))},ProgressBar}(react.Component);ProgressBar.propTypes=ProgressBar_propTypes,ProgressBar.defaultProps={min:0,max:100,active:!1,isChild:!1,srOnly:!1,striped:!1};const es_ProgressBar=bsClass("progress-bar",bsStyles(values_default()(State),ProgressBar));var Radio_propTypes={inline:prop_types_default().bool,disabled:prop_types_default().bool,title:prop_types_default().string,validationState:prop_types_default().oneOf(["success","warning","error",null]),inputRef:prop_types_default().func},Radio=function(_React$Component){function Radio(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Radio,_React$Component),Radio.prototype.render=function render(){var _this$props=this.props,inline=_this$props.inline,disabled=_this$props.disabled,validationState=_this$props.validationState,inputRef=_this$props.inputRef,className=_this$props.className,style=_this$props.style,title=_this$props.title,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["inline","disabled","validationState","inputRef","className","style","title","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],input=react.createElement("input",_extends({},elementProps,{ref:inputRef,type:"radio",disabled}));if(inline){var _classes2,_classes=((_classes2={})[prefix(bsProps,"inline")]=!0,_classes2.disabled=disabled,_classes2);return react.createElement("label",{className:classnames_default()(className,_classes),style,title},input,children)}var classes=_extends({},getClassSet(bsProps),{disabled});return validationState&&(classes["has-"+validationState]=!0),react.createElement("div",{className:classnames_default()(className,classes),style},react.createElement("label",{title},input,children))},Radio}(react.Component);Radio.propTypes=Radio_propTypes,Radio.defaultProps={inline:!1,disabled:!1,title:""};const es_Radio=bsClass("radio",Radio);var ResponsiveEmbed_propTypes={children:prop_types_default().element.isRequired,a16by9:prop_types_default().bool,a4by3:prop_types_default().bool},ResponsiveEmbed=function(_React$Component){function ResponsiveEmbed(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ResponsiveEmbed,_React$Component),ResponsiveEmbed.prototype.render=function render(){var _extends2,_this$props=this.props,a16by9=_this$props.a16by9,a4by3=_this$props.a4by3,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["a16by9","a4by3","className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,"16by9")]=a16by9,_extends2[prefix(bsProps,"4by3")]=a4by3,_extends2));return react.createElement("div",{className:classnames_default()(classes)},(0,react.cloneElement)(children,_extends({},elementProps,{className:classnames_default()(className,prefix(bsProps,"item"))})))},ResponsiveEmbed}(react.Component);ResponsiveEmbed.propTypes=ResponsiveEmbed_propTypes,ResponsiveEmbed.defaultProps={a16by9:!1,a4by3:!1};const es_ResponsiveEmbed=bsClass("embed-responsive",ResponsiveEmbed);var Row_propTypes={componentClass:elementType_default()},Row=function(_React$Component){function Row(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Row,_React$Component),Row.prototype.render=function render(){var _this$props=this.props,Component=_this$props.componentClass,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["componentClass","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}))},Row}(react.Component);Row.propTypes=Row_propTypes,Row.defaultProps={componentClass:"div"};const es_Row=bsClass("row",Row);var SplitToggle=function(_React$Component){function SplitToggle(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(SplitToggle,_React$Component),SplitToggle.prototype.render=function render(){return react.createElement(es_DropdownToggle,_extends({},this.props,{useAnchor:!1,noCaret:!1}))},SplitToggle}(react.Component);SplitToggle.defaultProps=es_DropdownToggle.defaultProps;const es_SplitToggle=SplitToggle;var SplitButton_propTypes=_extends({},es_Dropdown.propTypes,{bsStyle:prop_types_default().string,bsSize:prop_types_default().string,href:prop_types_default().string,onClick:prop_types_default().func,title:prop_types_default().node.isRequired,toggleLabel:prop_types_default().string,children:prop_types_default().node}),SplitButton=function(_React$Component){function SplitButton(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(SplitButton,_React$Component),SplitButton.prototype.render=function render(){var _this$props=this.props,bsSize=_this$props.bsSize,bsStyle=_this$props.bsStyle,title=_this$props.title,toggleLabel=_this$props.toggleLabel,children=_this$props.children,props=_objectWithoutPropertiesLoose(_this$props,["bsSize","bsStyle","title","toggleLabel","children"]),_splitComponentProps=splitComponentProps(props,es_Dropdown.ControlledComponent),dropdownProps=_splitComponentProps[0],buttonProps=_splitComponentProps[1];return react.createElement(es_Dropdown,_extends({},dropdownProps,{bsSize,bsStyle}),react.createElement(es_Button,_extends({},buttonProps,{disabled:props.disabled,bsSize,bsStyle}),title),react.createElement(es_SplitToggle,{"aria-label":toggleLabel||title,bsSize,bsStyle}),react.createElement(es_Dropdown.Menu,null,children))},SplitButton}(react.Component);SplitButton.propTypes=SplitButton_propTypes,SplitButton.Toggle=es_SplitToggle;const es_SplitButton=SplitButton;var TabContainer_idPropType=prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number]),TabContainer_propTypes={id:function id(props){var error=null;if(!props.generateChildId){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];(error=TabContainer_idPropType.apply(void 0,[props].concat(args)))||props.id||(error=new Error("In order to properly initialize Tabs in a way that is accessible to assistive technologies (such as screen readers) an `id` or a `generateChildId` prop to TabContainer is required"))}return error},generateChildId:prop_types_default().func,onSelect:prop_types_default().func,activeKey:prop_types_default().any},TabContainer_childContextTypes={$bs_tabContainer:prop_types_default().shape({activeKey:prop_types_default().any,onSelect:prop_types_default().func.isRequired,getTabId:prop_types_default().func.isRequired,getPaneId:prop_types_default().func.isRequired})},TabContainer=function(_React$Component){function TabContainer(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(TabContainer,_React$Component);var _proto=TabContainer.prototype;return _proto.getChildContext=function getChildContext(){var _this$props=this.props,activeKey=_this$props.activeKey,onSelect=_this$props.onSelect,generateChildId=_this$props.generateChildId,id=_this$props.id,getId=generateChildId||function(key,type){return id?id+"-"+type+"-"+key:null};return{$bs_tabContainer:{activeKey,onSelect,getTabId:function getTabId(key){return getId(key,"tab")},getPaneId:function getPaneId(key){return getId(key,"pane")}}}},_proto.render=function render(){var _this$props2=this.props,children=_this$props2.children,props=_objectWithoutPropertiesLoose(_this$props2,["children"]);return delete props.generateChildId,delete props.onSelect,delete props.activeKey,react.cloneElement(react.Children.only(children),props)},TabContainer}(react.Component);TabContainer.propTypes=TabContainer_propTypes,TabContainer.childContextTypes=TabContainer_childContextTypes;const es_TabContainer=(0,esm.Pd)(TabContainer,{activeKey:"onSelect"});var TabContent_propTypes={componentClass:elementType_default(),animation:prop_types_default().oneOfType([prop_types_default().bool,elementType_default()]),mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool},TabContent_contextTypes={$bs_tabContainer:prop_types_default().shape({activeKey:prop_types_default().any})},TabContent_childContextTypes={$bs_tabContent:prop_types_default().shape({bsClass:prop_types_default().string,animation:prop_types_default().oneOfType([prop_types_default().bool,elementType_default()]),activeKey:prop_types_default().any,mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool,onPaneEnter:prop_types_default().func.isRequired,onPaneExited:prop_types_default().func.isRequired,exiting:prop_types_default().bool.isRequired})},TabContent=function(_React$Component){function TabContent(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handlePaneEnter=_this.handlePaneEnter.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handlePaneExited=_this.handlePaneExited.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.state={activeKey:null,activeChild:null},_this}_inheritsLoose(TabContent,_React$Component);var _proto=TabContent.prototype;return _proto.getChildContext=function getChildContext(){var _this$props=this.props,bsClass=_this$props.bsClass,animation=_this$props.animation,mountOnEnter=_this$props.mountOnEnter,unmountOnExit=_this$props.unmountOnExit,stateActiveKey=this.state.activeKey,containerActiveKey=this.getContainerActiveKey(),exiting=null!=stateActiveKey&&stateActiveKey!==containerActiveKey;return{$bs_tabContent:{bsClass,animation,activeKey:null!=stateActiveKey?stateActiveKey:containerActiveKey,mountOnEnter,unmountOnExit,onPaneEnter:this.handlePaneEnter,onPaneExited:this.handlePaneExited,exiting}}},_proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){!nextProps.animation&&this.state.activeChild&&this.setState({activeKey:null,activeChild:null})},_proto.componentWillUnmount=function componentWillUnmount(){this.isUnmounted=!0},_proto.getContainerActiveKey=function getContainerActiveKey(){var tabContainer=this.context.$bs_tabContainer;return tabContainer&&tabContainer.activeKey},_proto.handlePaneEnter=function handlePaneEnter(child,childKey){return!!this.props.animation&&(childKey===this.getContainerActiveKey()&&(this.setState({activeKey:childKey,activeChild:child}),!0))},_proto.handlePaneExited=function handlePaneExited(child){this.isUnmounted||this.setState((function(_ref){return _ref.activeChild!==child?null:{activeKey:null,activeChild:null}}))},_proto.render=function render(){var _this$props2=this.props,Component=_this$props2.componentClass,className=_this$props2.className,_splitBsPropsAndOmit=splitBsPropsAndOmit(_objectWithoutPropertiesLoose(_this$props2,["componentClass","className"]),["animation","mountOnEnter","unmountOnExit"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1];return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,prefix(bsProps,"content"))}))},TabContent}(react.Component);TabContent.propTypes=TabContent_propTypes,TabContent.defaultProps={componentClass:"div",animation:!0,mountOnEnter:!1,unmountOnExit:!1},TabContent.contextTypes=TabContent_contextTypes,TabContent.childContextTypes=TabContent_childContextTypes;const es_TabContent=bsClass("tab",TabContent);var TabPane_propTypes={eventKey:prop_types_default().any,animation:prop_types_default().oneOfType([prop_types_default().bool,elementType_default()]),id:prop_types_default().string,"aria-labelledby":prop_types_default().string,bsClass:prop_types_default().string,onEnter:prop_types_default().func,onEntering:prop_types_default().func,onEntered:prop_types_default().func,onExit:prop_types_default().func,onExiting:prop_types_default().func,onExited:prop_types_default().func,mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool},TabPane_contextTypes={$bs_tabContainer:prop_types_default().shape({getTabId:prop_types_default().func,getPaneId:prop_types_default().func}),$bs_tabContent:prop_types_default().shape({bsClass:prop_types_default().string,animation:prop_types_default().oneOfType([prop_types_default().bool,elementType_default()]),activeKey:prop_types_default().any,mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool,onPaneEnter:prop_types_default().func.isRequired,onPaneExited:prop_types_default().func.isRequired,exiting:prop_types_default().bool.isRequired})},TabPane_childContextTypes={$bs_tabContainer:prop_types_default().oneOf([null])},TabPane=function(_React$Component){function TabPane(props,context){var _this;return(_this=_React$Component.call(this,props,context)||this).handleEnter=_this.handleEnter.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.handleExited=_this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))),_this.in=!1,_this}_inheritsLoose(TabPane,_React$Component);var _proto=TabPane.prototype;return _proto.getChildContext=function getChildContext(){return{$bs_tabContainer:null}},_proto.componentDidMount=function componentDidMount(){this.shouldBeIn()&&this.handleEnter()},_proto.componentDidUpdate=function componentDidUpdate(){this.in?this.shouldBeIn()||this.handleExited():this.shouldBeIn()&&this.handleEnter()},_proto.componentWillUnmount=function componentWillUnmount(){this.in&&this.handleExited()},_proto.getAnimation=function getAnimation(){if(null!=this.props.animation)return this.props.animation;var tabContent=this.context.$bs_tabContent;return tabContent&&tabContent.animation},_proto.handleEnter=function handleEnter(){var tabContent=this.context.$bs_tabContent;tabContent&&(this.in=tabContent.onPaneEnter(this,this.props.eventKey))},_proto.handleExited=function handleExited(){var tabContent=this.context.$bs_tabContent;tabContent&&(tabContent.onPaneExited(this),this.in=!1)},_proto.isActive=function isActive(){var tabContent=this.context.$bs_tabContent,activeKey=tabContent&&tabContent.activeKey;return this.props.eventKey===activeKey},_proto.shouldBeIn=function shouldBeIn(){return this.getAnimation()&&this.isActive()},_proto.render=function render(){var _this$props=this.props,eventKey=_this$props.eventKey,className=_this$props.className,onEnter=_this$props.onEnter,onEntering=_this$props.onEntering,onEntered=_this$props.onEntered,onExit=_this$props.onExit,onExiting=_this$props.onExiting,onExited=_this$props.onExited,propsMountOnEnter=_this$props.mountOnEnter,propsUnmountOnExit=_this$props.unmountOnExit,props=_objectWithoutPropertiesLoose(_this$props,["eventKey","className","onEnter","onEntering","onEntered","onExit","onExiting","onExited","mountOnEnter","unmountOnExit"]),_this$context=this.context,tabContent=_this$context.$bs_tabContent,tabContainer=_this$context.$bs_tabContainer,_splitBsPropsAndOmit=splitBsPropsAndOmit(props,["animation"]),bsProps=_splitBsPropsAndOmit[0],elementProps=_splitBsPropsAndOmit[1],active=this.isActive(),animation=this.getAnimation(),mountOnEnter=null!=propsMountOnEnter?propsMountOnEnter:tabContent&&tabContent.mountOnEnter,unmountOnExit=null!=propsUnmountOnExit?propsUnmountOnExit:tabContent&&tabContent.unmountOnExit;if(!active&&!animation&&unmountOnExit)return null;var Transition=!0===animation?es_Fade:animation||null;tabContent&&(bsProps.bsClass=prefix(tabContent,"pane"));var classes=_extends({},getClassSet(bsProps),{active});tabContainer&&(elementProps.id=tabContainer.getPaneId(eventKey),elementProps["aria-labelledby"]=tabContainer.getTabId(eventKey));var pane=react.createElement("div",_extends({},elementProps,{role:"tabpanel","aria-hidden":!active,className:classnames_default()(className,classes)}));if(Transition){var exiting=tabContent&&tabContent.exiting;return react.createElement(Transition,{in:active&&!exiting,onEnter:utils_createChainedFunction(this.handleEnter,onEnter),onEntering,onEntered,onExit,onExiting,onExited:utils_createChainedFunction(this.handleExited,onExited),mountOnEnter,unmountOnExit},pane)}return pane},TabPane}(react.Component);TabPane.propTypes=TabPane_propTypes,TabPane.contextTypes=TabPane_contextTypes,TabPane.childContextTypes=TabPane_childContextTypes;const es_TabPane=bsClass("tab-pane",TabPane);var Tab_propTypes=_extends({},es_TabPane.propTypes,{disabled:prop_types_default().bool,title:prop_types_default().node,tabClassName:prop_types_default().string}),Tab=function(_React$Component){function Tab(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Tab,_React$Component),Tab.prototype.render=function render(){var props=_extends({},this.props);return delete props.title,delete props.disabled,delete props.tabClassName,react.createElement(es_TabPane,props)},Tab}(react.Component);Tab.propTypes=Tab_propTypes,Tab.Container=es_TabContainer,Tab.Content=es_TabContent,Tab.Pane=es_TabPane;const es_Tab=Tab;var Table_propTypes={striped:prop_types_default().bool,bordered:prop_types_default().bool,condensed:prop_types_default().bool,hover:prop_types_default().bool,responsive:prop_types_default().bool},Table=function(_React$Component){function Table(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Table,_React$Component),Table.prototype.render=function render(){var _extends2,_this$props=this.props,striped=_this$props.striped,bordered=_this$props.bordered,condensed=_this$props.condensed,hover=_this$props.hover,responsive=_this$props.responsive,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["striped","bordered","condensed","hover","responsive","className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[prefix(bsProps,"striped")]=striped,_extends2[prefix(bsProps,"bordered")]=bordered,_extends2[prefix(bsProps,"condensed")]=condensed,_extends2[prefix(bsProps,"hover")]=hover,_extends2)),table=react.createElement("table",_extends({},elementProps,{className:classnames_default()(className,classes)}));return responsive?react.createElement("div",{className:prefix(bsProps,"responsive")},table):table},Table}(react.Component);Table.propTypes=Table_propTypes,Table.defaultProps={bordered:!1,condensed:!1,hover:!1,responsive:!1,striped:!1};const es_Table=bsClass("table",Table);var Tabs_TabContainer=es_TabContainer.ControlledComponent,Tabs_propTypes={activeKey:prop_types_default().any,bsStyle:prop_types_default().oneOf(["tabs","pills"]),animation:prop_types_default().oneOfType([prop_types_default().bool,elementType_default()]),id:isRequiredForA11y_default()(prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number])),onSelect:prop_types_default().func,mountOnEnter:prop_types_default().bool,unmountOnExit:prop_types_default().bool};var Tabs=function(_React$Component){function Tabs(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(Tabs,_React$Component);var _proto=Tabs.prototype;return _proto.renderTab=function renderTab(child){var _child$props=child.props,title=_child$props.title,eventKey=_child$props.eventKey,disabled=_child$props.disabled,tabClassName=_child$props.tabClassName;return null==title?null:react.createElement(es_NavItem,{eventKey,disabled,className:tabClassName},title)},_proto.render=function render(){var _this$props=this.props,id=_this$props.id,onSelect=_this$props.onSelect,animation=_this$props.animation,mountOnEnter=_this$props.mountOnEnter,unmountOnExit=_this$props.unmountOnExit,bsClass=_this$props.bsClass,className=_this$props.className,style=_this$props.style,children=_this$props.children,_this$props$activeKey=_this$props.activeKey,activeKey=void 0===_this$props$activeKey?function getDefaultActiveKey(children){var defaultActiveKey;return ValidComponentChildren.forEach(children,(function(child){null==defaultActiveKey&&(defaultActiveKey=child.props.eventKey)})),defaultActiveKey}(children):_this$props$activeKey,props=_objectWithoutPropertiesLoose(_this$props,["id","onSelect","animation","mountOnEnter","unmountOnExit","bsClass","className","style","children","activeKey"]);return react.createElement(Tabs_TabContainer,{id,activeKey,onSelect,className,style},react.createElement("div",null,react.createElement(es_Nav,_extends({},props,{role:"tablist"}),ValidComponentChildren.map(children,this.renderTab)),react.createElement(es_TabContent,{bsClass,animation,mountOnEnter,unmountOnExit},children)))},Tabs}(react.Component);Tabs.propTypes=Tabs_propTypes,Tabs.defaultProps={bsStyle:"tabs",animation:!0,mountOnEnter:!1,unmountOnExit:!1},bsClass("tab",Tabs);const es_Tabs=(0,esm.Pd)(Tabs,{activeKey:"onSelect"});var Thumbnail_propTypes={src:prop_types_default().string,alt:prop_types_default().string,href:prop_types_default().string,onError:prop_types_default().func,onLoad:prop_types_default().func},Thumbnail=function(_React$Component){function Thumbnail(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Thumbnail,_React$Component),Thumbnail.prototype.render=function render(){var _this$props=this.props,src=_this$props.src,alt=_this$props.alt,onError=_this$props.onError,onLoad=_this$props.onLoad,className=_this$props.className,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["src","alt","onError","onLoad","className","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],Component=elementProps.href?es_SafeAnchor:"div",classes=getClassSet(bsProps);return react.createElement(Component,_extends({},elementProps,{className:classnames_default()(className,classes)}),react.createElement("img",{src,alt,onError,onLoad}),children&&react.createElement("div",{className:"caption"},children))},Thumbnail}(react.Component);Thumbnail.propTypes=Thumbnail_propTypes;const es_Thumbnail=bsClass("thumbnail",Thumbnail);var ToggleButton_propTypes={type:prop_types_default().oneOf(["checkbox","radio"]),name:prop_types_default().string,checked:prop_types_default().bool,disabled:prop_types_default().bool,onChange:prop_types_default().func,value:prop_types_default().any.isRequired},ToggleButton=function(_React$Component){function ToggleButton(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(ToggleButton,_React$Component),ToggleButton.prototype.render=function render(){var _this$props=this.props,children=_this$props.children,name=_this$props.name,checked=_this$props.checked,type=_this$props.type,onChange=_this$props.onChange,value=_this$props.value,props=_objectWithoutPropertiesLoose(_this$props,["children","name","checked","type","onChange","value"]),disabled=props.disabled;return react.createElement(es_Button,_extends({},props,{active:!!checked,componentClass:"label"}),react.createElement("input",{name,type,autoComplete:"off",value,checked:!!checked,disabled:!!disabled,onChange}),children)},ToggleButton}(react.Component);ToggleButton.propTypes=ToggleButton_propTypes;const es_ToggleButton=ToggleButton;var ToggleButtonGroup_propTypes={name:prop_types_default().string,value:prop_types_default().any,onChange:prop_types_default().func,type:prop_types_default().oneOf(["checkbox","radio"]).isRequired},ToggleButtonGroup=function(_React$Component){function ToggleButtonGroup(){return _React$Component.apply(this,arguments)||this}_inheritsLoose(ToggleButtonGroup,_React$Component);var _proto=ToggleButtonGroup.prototype;return _proto.getValues=function getValues(){var value=this.props.value;return null==value?[]:[].concat(value)},_proto.handleToggle=function handleToggle(value){var _this$props=this.props,type=_this$props.type,onChange=_this$props.onChange,values=this.getValues(),isActive=-1!==values.indexOf(value);"radio"!==type?onChange(isActive?values.filter((function(n){return n!==value})):values.concat([value])):isActive||onChange(value)},_proto.render=function render(){var _this=this,_this$props2=this.props,children=_this$props2.children,type=_this$props2.type,name=_this$props2.name,props=_objectWithoutPropertiesLoose(_this$props2,["children","type","name"]),values=this.getValues();return"radio"!==type||name||browser_default()(!1),delete props.onChange,delete props.value,react.createElement(es_ButtonGroup,_extends({},props,{"data-toggle":"buttons"}),ValidComponentChildren.map(children,(function(child){var _child$props=child.props,value=_child$props.value,onChange=_child$props.onChange;return react.cloneElement(child,{type,name:child.name||name,checked:-1!==values.indexOf(value),onChange:utils_createChainedFunction(onChange,(function handler(){return _this.handleToggle(value)}))})})))},ToggleButtonGroup}(react.Component);ToggleButtonGroup.propTypes=ToggleButtonGroup_propTypes,ToggleButtonGroup.defaultProps={type:"radio"};var UncontrolledToggleButtonGroup=(0,esm.Pd)(ToggleButtonGroup,{value:"onChange"});UncontrolledToggleButtonGroup.Button=es_ToggleButton;const es_ToggleButtonGroup=UncontrolledToggleButtonGroup;var Tooltip_propTypes={id:isRequiredForA11y_default()(prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number])),placement:prop_types_default().oneOf(["top","right","bottom","left"]),positionTop:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),positionLeft:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),arrowOffsetTop:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),arrowOffsetLeft:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string])},Tooltip=function(_React$Component){function Tooltip(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Tooltip,_React$Component),Tooltip.prototype.render=function render(){var _extends2,_this$props=this.props,placement=_this$props.placement,positionTop=_this$props.positionTop,positionLeft=_this$props.positionLeft,arrowOffsetTop=_this$props.arrowOffsetTop,arrowOffsetLeft=_this$props.arrowOffsetLeft,className=_this$props.className,style=_this$props.style,children=_this$props.children,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","className","style","children"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=_extends({},getClassSet(bsProps),((_extends2={})[placement]=!0,_extends2)),outerStyle=_extends({top:positionTop,left:positionLeft},style),arrowStyle={top:arrowOffsetTop,left:arrowOffsetLeft};return react.createElement("div",_extends({},elementProps,{role:"tooltip",className:classnames_default()(className,classes),style:outerStyle}),react.createElement("div",{className:prefix(bsProps,"arrow"),style:arrowStyle}),react.createElement("div",{className:prefix(bsProps,"inner")},children))},Tooltip}(react.Component);Tooltip.propTypes=Tooltip_propTypes,Tooltip.defaultProps={placement:"right"};const es_Tooltip=bsClass("tooltip",Tooltip);var Well=function(_React$Component){function Well(){return _React$Component.apply(this,arguments)||this}return _inheritsLoose(Well,_React$Component),Well.prototype.render=function render(){var _this$props=this.props,className=_this$props.className,_splitBsProps=splitBsProps(_objectWithoutPropertiesLoose(_this$props,["className"])),bsProps=_splitBsProps[0],elementProps=_splitBsProps[1],classes=getClassSet(bsProps);return react.createElement("div",_extends({},elementProps,{className:classnames_default()(className,classes)}))},Well}(react.Component);const es_Well=bsClass("well",bsSizes([Size_LARGE,Size_SMALL],Well))},"./node_modules/react-bootstrap/node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg))classes.push(classNames.apply(null,arg));else if("object"===argType)for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}return classes.join(" ")}module.exports?module.exports=classNames:void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/react-bootstrap/node_modules/react-transition-group/Transition.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";exports.Ay=exports.ze=exports._K=exports.ns=exports.kp=void 0;var PropTypes=function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};desc.get||desc.set?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,newObj}(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_reactLifecyclesCompat=__webpack_require__("./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js");__webpack_require__("./node_modules/react-bootstrap/node_modules/react-transition-group/utils/PropTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.kp="exited";exports.ns="entering";exports._K="entered";exports.ze="exiting";var Transition=function(_React$Component){function Transition(props,context){var _this;_this=_React$Component.call(this,props,context)||this;var initialStatus,parentGroup=context.transitionGroup,appear=parentGroup&&!parentGroup.isMounting?props.enter:props.appear;return _this.appearStatus=null,props.in?appear?(initialStatus="exited",_this.appearStatus="entering"):initialStatus="entered":initialStatus=props.unmountOnExit||props.mountOnEnter?"unmounted":"exited",_this.state={status:initialStatus},_this.nextCallback=null,_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,subClass.__proto__=superClass}(Transition,_React$Component);var _proto=Transition.prototype;return _proto.getChildContext=function getChildContext(){return{transitionGroup:null}},Transition.getDerivedStateFromProps=function getDerivedStateFromProps(_ref,prevState){return _ref.in&&"unmounted"===prevState.status?{status:"exited"}:null},_proto.componentDidMount=function componentDidMount(){this.updateStatus(!0,this.appearStatus)},_proto.componentDidUpdate=function componentDidUpdate(prevProps){var nextStatus=null;if(prevProps!==this.props){var status=this.state.status;this.props.in?"entering"!==status&&"entered"!==status&&(nextStatus="entering"):"entering"!==status&&"entered"!==status||(nextStatus="exiting")}this.updateStatus(!1,nextStatus)},_proto.componentWillUnmount=function componentWillUnmount(){this.cancelNextCallback()},_proto.getTimeouts=function getTimeouts(){var exit,enter,appear,timeout=this.props.timeout;return exit=enter=appear=timeout,null!=timeout&&"number"!=typeof timeout&&(exit=timeout.exit,enter=timeout.enter,appear=void 0!==timeout.appear?timeout.appear:enter),{exit,enter,appear}},_proto.updateStatus=function updateStatus(mounting,nextStatus){if(void 0===mounting&&(mounting=!1),null!==nextStatus){this.cancelNextCallback();var node=_reactDom.default.findDOMNode(this);"entering"===nextStatus?this.performEnter(node,mounting):this.performExit(node)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},_proto.performEnter=function performEnter(node,mounting){var _this2=this,enter=this.props.enter,appearing=this.context.transitionGroup?this.context.transitionGroup.isMounting:mounting,timeouts=this.getTimeouts(),enterTimeout=appearing?timeouts.appear:timeouts.enter;mounting||enter?(this.props.onEnter(node,appearing),this.safeSetState({status:"entering"},(function(){_this2.props.onEntering(node,appearing),_this2.onTransitionEnd(node,enterTimeout,(function(){_this2.safeSetState({status:"entered"},(function(){_this2.props.onEntered(node,appearing)}))}))}))):this.safeSetState({status:"entered"},(function(){_this2.props.onEntered(node)}))},_proto.performExit=function performExit(node){var _this3=this,exit=this.props.exit,timeouts=this.getTimeouts();exit?(this.props.onExit(node),this.safeSetState({status:"exiting"},(function(){_this3.props.onExiting(node),_this3.onTransitionEnd(node,timeouts.exit,(function(){_this3.safeSetState({status:"exited"},(function(){_this3.props.onExited(node)}))}))}))):this.safeSetState({status:"exited"},(function(){_this3.props.onExited(node)}))},_proto.cancelNextCallback=function cancelNextCallback(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},_proto.safeSetState=function safeSetState(nextState,callback){callback=this.setNextCallback(callback),this.setState(nextState,callback)},_proto.setNextCallback=function setNextCallback(callback){var _this4=this,active=!0;return this.nextCallback=function(event){active&&(active=!1,_this4.nextCallback=null,callback(event))},this.nextCallback.cancel=function(){active=!1},this.nextCallback},_proto.onTransitionEnd=function onTransitionEnd(node,timeout,handler){this.setNextCallback(handler);var doesNotHaveTimeoutOrListener=null==timeout&&!this.props.addEndListener;node&&!doesNotHaveTimeoutOrListener?(this.props.addEndListener&&this.props.addEndListener(node,this.nextCallback),null!=timeout&&setTimeout(this.nextCallback,timeout)):setTimeout(this.nextCallback,0)},_proto.render=function render(){var status=this.state.status;if("unmounted"===status)return null;var _this$props=this.props,children=_this$props.children,childProps=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_this$props,["children"]);if(delete childProps.in,delete childProps.mountOnEnter,delete childProps.unmountOnExit,delete childProps.appear,delete childProps.enter,delete childProps.exit,delete childProps.timeout,delete childProps.addEndListener,delete childProps.onEnter,delete childProps.onEntering,delete childProps.onEntered,delete childProps.onExit,delete childProps.onExiting,delete childProps.onExited,"function"==typeof children)return children(status,childProps);var child=_react.default.Children.only(children);return _react.default.cloneElement(child,childProps)},Transition}(_react.default.Component);function noop(){}Transition.contextTypes={transitionGroup:PropTypes.object},Transition.childContextTypes={transitionGroup:function transitionGroup(){}},Transition.propTypes={},Transition.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:noop,onEntering:noop,onEntered:noop,onExit:noop,onExiting:noop,onExited:noop},Transition.UNMOUNTED=0,Transition.EXITED=1,Transition.ENTERING=2,Transition.ENTERED=3,Transition.EXITING=4;var _default=(0,_reactLifecyclesCompat.polyfill)(Transition);exports.Ay=_default},"./node_modules/react-bootstrap/node_modules/react-transition-group/utils/PropTypes.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0,exports.classNamesShape=exports.timeoutsShape=void 0;(function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}})(__webpack_require__("./node_modules/prop-types/index.js"));exports.timeoutsShape=null;exports.classNamesShape=null},"./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function componentWillMount(){var state=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=state&&this.setState(state)}function componentWillReceiveProps(nextProps){this.setState(function updater(prevState){var state=this.constructor.getDerivedStateFromProps(nextProps,prevState);return null!=state?state:null}.bind(this))}function componentWillUpdate(nextProps,nextState){try{var prevProps=this.props,prevState=this.state;this.props=nextProps,this.state=nextState,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(prevProps,prevState)}finally{this.props=prevProps,this.state=prevState}}function polyfill(Component){var prototype=Component.prototype;if(!prototype||!prototype.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof Component.getDerivedStateFromProps&&"function"!=typeof prototype.getSnapshotBeforeUpdate)return Component;var foundWillMountName=null,foundWillReceivePropsName=null,foundWillUpdateName=null;if("function"==typeof prototype.componentWillMount?foundWillMountName="componentWillMount":"function"==typeof prototype.UNSAFE_componentWillMount&&(foundWillMountName="UNSAFE_componentWillMount"),"function"==typeof prototype.componentWillReceiveProps?foundWillReceivePropsName="componentWillReceiveProps":"function"==typeof prototype.UNSAFE_componentWillReceiveProps&&(foundWillReceivePropsName="UNSAFE_componentWillReceiveProps"),"function"==typeof prototype.componentWillUpdate?foundWillUpdateName="componentWillUpdate":"function"==typeof prototype.UNSAFE_componentWillUpdate&&(foundWillUpdateName="UNSAFE_componentWillUpdate"),null!==foundWillMountName||null!==foundWillReceivePropsName||null!==foundWillUpdateName){var componentName=Component.displayName||Component.name,newApiName="function"==typeof Component.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+componentName+" uses "+newApiName+" but also contains the following legacy lifecycles:"+(null!==foundWillMountName?"\n  "+foundWillMountName:"")+(null!==foundWillReceivePropsName?"\n  "+foundWillReceivePropsName:"")+(null!==foundWillUpdateName?"\n  "+foundWillUpdateName:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof Component.getDerivedStateFromProps&&(prototype.componentWillMount=componentWillMount,prototype.componentWillReceiveProps=componentWillReceiveProps),"function"==typeof prototype.getSnapshotBeforeUpdate){if("function"!=typeof prototype.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");prototype.componentWillUpdate=componentWillUpdate;var componentDidUpdate=prototype.componentDidUpdate;prototype.componentDidUpdate=function componentDidUpdatePolyfill(prevProps,prevState,maybeSnapshot){var snapshot=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:maybeSnapshot;componentDidUpdate.call(this,prevProps,prevState,snapshot)}}return Component}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{polyfill:()=>polyfill}),componentWillMount.__suppressDeprecationWarning=!0,componentWillReceiveProps.__suppressDeprecationWarning=!0,componentWillUpdate.__suppressDeprecationWarning=!0},"./node_modules/react-overlays/lib/LegacyPortal.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_componentOrElement2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/componentOrElement.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom2=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_getContainer2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/getContainer.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var Portal=function(_React$Component){function Portal(){var _temp,_this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this._mountOverlayTarget=function(){_this._overlayTarget||(_this._overlayTarget=document.createElement("div"),_this._portalContainerNode=(0,_getContainer2.default)(_this.props.container,(0,_ownerDocument2.default)(_this).body),_this._portalContainerNode.appendChild(_this._overlayTarget))},_this._unmountOverlayTarget=function(){_this._overlayTarget&&(_this._portalContainerNode.removeChild(_this._overlayTarget),_this._overlayTarget=null),_this._portalContainerNode=null},_this._renderOverlay=function(){var overlay=_this.props.children?_react2.default.Children.only(_this.props.children):null;if(null!==overlay){_this._mountOverlayTarget();var initialRender=!_this._overlayInstance;_this._overlayInstance=_reactDom2.default.unstable_renderSubtreeIntoContainer(_this,overlay,_this._overlayTarget,(function(){initialRender&&_this.props.onRendered&&_this.props.onRendered()}))}else _this._unrenderOverlay(),_this._unmountOverlayTarget()},_this._unrenderOverlay=function(){_this._overlayTarget&&(_reactDom2.default.unmountComponentAtNode(_this._overlayTarget),_this._overlayInstance=null)},_this.getMountNode=function(){return _this._overlayTarget},_possibleConstructorReturn(_this,_temp)}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),Portal.prototype.componentDidMount=function componentDidMount(){this._isMounted=!0,this._renderOverlay()},Portal.prototype.componentDidUpdate=function componentDidUpdate(){this._renderOverlay()},Portal.prototype.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){this._overlayTarget&&nextProps.container!==this.props.container&&(this._portalContainerNode.removeChild(this._overlayTarget),this._portalContainerNode=(0,_getContainer2.default)(nextProps.container,(0,_ownerDocument2.default)(this).body),this._portalContainerNode.appendChild(this._overlayTarget))},Portal.prototype.componentWillUnmount=function componentWillUnmount(){this._isMounted=!1,this._unrenderOverlay(),this._unmountOverlayTarget()},Portal.prototype.render=function render(){return null},Portal}(_react2.default.Component);Portal.displayName="Portal",Portal.propTypes={container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),onRendered:_propTypes2.default.func},exports.default=Portal,module.exports=exports.default},"./node_modules/react-overlays/lib/Modal.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_activeElement2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/activeElement.js")),_contains2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/contains.js")),_inDOM2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_componentOrElement2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/componentOrElement.js")),_deprecated2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/deprecated.js")),_elementType2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/elementType.js")),_react=__webpack_require__("./node_modules/react/index.js"),_react2=_interopRequireDefault(_react),_reactDom2=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_warning2=_interopRequireDefault(__webpack_require__("./node_modules/warning/browser.js")),_ModalManager2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/ModalManager.js")),_Portal2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/Portal.js")),_RefHolder2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/RefHolder.js")),_addEventListener2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/addEventListener.js")),_addFocusListener2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/addFocusListener.js")),_getContainer2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/getContainer.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var modalManager=new _ModalManager2.default,Modal=function(_React$Component){function Modal(){var _temp,_this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Modal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_initialiseProps.call(_this),_possibleConstructorReturn(_this,_temp)}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Modal,_React$Component),Modal.prototype.omitProps=function omitProps(props,propTypes){var keys=Object.keys(props),newProps={};return keys.map((function(prop){Object.prototype.hasOwnProperty.call(propTypes,prop)||(newProps[prop]=props[prop])})),newProps},Modal.prototype.render=function render(){var _props=this.props,show=_props.show,container=_props.container,children=_props.children,Transition=_props.transition,backdrop=_props.backdrop,className=_props.className,style=_props.style,onExit=_props.onExit,onExiting=_props.onExiting,onEnter=_props.onEnter,onEntering=_props.onEntering,onEntered=_props.onEntered,dialog=_react2.default.Children.only(children),filteredProps=this.omitProps(this.props,Modal.propTypes);if(!(show||Transition&&!this.state.exited))return null;var _dialog$props=dialog.props,role=_dialog$props.role,tabIndex=_dialog$props.tabIndex;return void 0!==role&&void 0!==tabIndex||(dialog=(0,_react.cloneElement)(dialog,{role:void 0===role?"document":role,tabIndex:null==tabIndex?"-1":tabIndex})),Transition&&(dialog=_react2.default.createElement(Transition,{appear:!0,unmountOnExit:!0,in:show,onExit,onExiting,onExited:this.handleHidden,onEnter,onEntering,onEntered},dialog)),_react2.default.createElement(_Portal2.default,{ref:this.setMountNode,container,onRendered:this.onPortalRendered},_react2.default.createElement("div",_extends({ref:this.setModalNodeRef,role:role||"dialog"},filteredProps,{style,className}),backdrop&&this.renderBackdrop(),_react2.default.createElement(_RefHolder2.default,{ref:this.setDialogRef},dialog)))},Modal.prototype.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){nextProps.show?this.setState({exited:!1}):nextProps.transition||this.setState({exited:!0})},Modal.prototype.UNSAFE_componentWillUpdate=function UNSAFE_componentWillUpdate(nextProps){!this.props.show&&nextProps.show&&this.checkForFocus()},Modal.prototype.componentDidMount=function componentDidMount(){this._isMounted=!0,this.props.show&&this.onShow()},Modal.prototype.componentDidUpdate=function componentDidUpdate(prevProps){var transition=this.props.transition;!prevProps.show||this.props.show||transition?!prevProps.show&&this.props.show&&this.onShow():this.onHide()},Modal.prototype.componentWillUnmount=function componentWillUnmount(){var _props2=this.props,show=_props2.show,transition=_props2.transition;this._isMounted=!1,(show||transition&&!this.state.exited)&&this.onHide()},Modal.prototype.autoFocus=function autoFocus(){if(this.props.autoFocus){var dialogElement=this.getDialogElement(),currentActiveElement=(0,_activeElement2.default)((0,_ownerDocument2.default)(this));dialogElement&&!(0,_contains2.default)(dialogElement,currentActiveElement)&&(this.lastFocus=currentActiveElement,dialogElement.hasAttribute("tabIndex")||((0,_warning2.default)(!1,'The modal content node does not accept focus. For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'),dialogElement.setAttribute("tabIndex",-1)),dialogElement.focus())}},Modal.prototype.restoreLastFocus=function restoreLastFocus(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},Modal.prototype.getDialogElement=function getDialogElement(){return _reactDom2.default.findDOMNode(this.dialog)},Modal.prototype.isTopModal=function isTopModal(){return this.props.manager.isTopModal(this)},Modal}(_react2.default.Component);Modal.propTypes=_extends({},_Portal2.default.propTypes,{show:_propTypes2.default.bool,container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),onShow:_propTypes2.default.func,onHide:_propTypes2.default.func,backdrop:_propTypes2.default.oneOfType([_propTypes2.default.bool,_propTypes2.default.oneOf(["static"])]),renderBackdrop:_propTypes2.default.func,onEscapeKeyDown:_propTypes2.default.func,onEscapeKeyUp:(0,_deprecated2.default)(_propTypes2.default.func,"Please use onEscapeKeyDown instead for consistency"),onBackdropClick:_propTypes2.default.func,backdropStyle:_propTypes2.default.object,backdropClassName:_propTypes2.default.string,containerClassName:_propTypes2.default.string,keyboard:_propTypes2.default.bool,transition:_elementType2.default,backdropTransition:_elementType2.default,autoFocus:_propTypes2.default.bool,enforceFocus:_propTypes2.default.bool,restoreFocus:_propTypes2.default.bool,onEnter:_propTypes2.default.func,onEntering:_propTypes2.default.func,onEntered:_propTypes2.default.func,onExit:_propTypes2.default.func,onExiting:_propTypes2.default.func,onExited:_propTypes2.default.func,manager:_propTypes2.default.object.isRequired}),Modal.defaultProps={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function onHide(){},manager:modalManager,renderBackdrop:function renderBackdrop(props){return _react2.default.createElement("div",props)}};var _initialiseProps=function _initialiseProps(){var _this2=this;this.state={exited:!this.props.show},this.renderBackdrop=function(){var _props3=_this2.props,backdropStyle=_props3.backdropStyle,backdropClassName=_props3.backdropClassName,renderBackdrop=_props3.renderBackdrop,Transition=_props3.backdropTransition,backdrop=renderBackdrop({ref:function backdropRef(ref){return _this2.backdrop=ref},style:backdropStyle,className:backdropClassName,onClick:_this2.handleBackdropClick});return Transition&&(backdrop=_react2.default.createElement(Transition,{appear:!0,in:_this2.props.show},backdrop)),backdrop},this.onPortalRendered=function(){_this2.autoFocus(),_this2.props.onShow&&_this2.props.onShow()},this.onShow=function(){var doc=(0,_ownerDocument2.default)(_this2),container=(0,_getContainer2.default)(_this2.props.container,doc.body);_this2.props.manager.add(_this2,container,_this2.props.containerClassName),_this2._onDocumentKeydownListener=(0,_addEventListener2.default)(doc,"keydown",_this2.handleDocumentKeyDown),_this2._onDocumentKeyupListener=(0,_addEventListener2.default)(doc,"keyup",_this2.handleDocumentKeyUp),_this2._onFocusinListener=(0,_addFocusListener2.default)(_this2.enforceFocus)},this.onHide=function(){_this2.props.manager.remove(_this2),_this2._onDocumentKeydownListener.remove(),_this2._onDocumentKeyupListener.remove(),_this2._onFocusinListener.remove(),_this2.props.restoreFocus&&_this2.restoreLastFocus()},this.setMountNode=function(ref){_this2.mountNode=ref?ref.getMountNode():ref},this.setModalNodeRef=function(ref){_this2.modalNode=ref},this.setDialogRef=function(ref){_this2.dialog=ref},this.handleHidden=function(){var _props4;(_this2.setState({exited:!0}),_this2.onHide(),_this2.props.onExited)&&(_props4=_this2.props).onExited.apply(_props4,arguments)},this.handleBackdropClick=function(e){e.target===e.currentTarget&&(_this2.props.onBackdropClick&&_this2.props.onBackdropClick(e),!0===_this2.props.backdrop&&_this2.props.onHide())},this.handleDocumentKeyDown=function(e){_this2.props.keyboard&&27===e.keyCode&&_this2.isTopModal()&&(_this2.props.onEscapeKeyDown&&_this2.props.onEscapeKeyDown(e),_this2.props.onHide())},this.handleDocumentKeyUp=function(e){_this2.props.keyboard&&27===e.keyCode&&_this2.isTopModal()&&_this2.props.onEscapeKeyUp&&_this2.props.onEscapeKeyUp(e)},this.checkForFocus=function(){_inDOM2.default&&(_this2.lastFocus=(0,_activeElement2.default)())},this.enforceFocus=function(){if(_this2.props.enforceFocus&&_this2._isMounted&&_this2.isTopModal()){var dialogElement=_this2.getDialogElement(),currentActiveElement=(0,_activeElement2.default)((0,_ownerDocument2.default)(_this2));dialogElement&&!(0,_contains2.default)(dialogElement,currentActiveElement)&&dialogElement.focus()}}};Modal.Manager=_ModalManager2.default,exports.default=Modal,module.exports=exports.default},"./node_modules/react-overlays/lib/ModalManager.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _class2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/class/index.js")),_style2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/style/index.js")),_scrollbarSize2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/scrollbarSize.js")),_isOverflowing2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/isOverflowing.js")),_manageAriaHidden=__webpack_require__("./node_modules/react-overlays/lib/utils/manageAriaHidden.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default=function ModalManager(){var _this=this,_ref2=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},_ref2$hideSiblingNode=_ref2.hideSiblingNodes,hideSiblingNodes=void 0===_ref2$hideSiblingNode||_ref2$hideSiblingNode,_ref2$handleContainer=_ref2.handleContainerOverflow,handleContainerOverflow=void 0===_ref2$handleContainer||_ref2$handleContainer;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,ModalManager),this.add=function(modal,container,className){var modalIdx=_this.modals.indexOf(modal),containerIdx=_this.containers.indexOf(container);if(-1!==modalIdx)return modalIdx;if(modalIdx=_this.modals.length,_this.modals.push(modal),_this.hideSiblingNodes&&(0,_manageAriaHidden.hideSiblings)(container,modal.modalNode),-1!==containerIdx)return _this.data[containerIdx].modals.push(modal),modalIdx;var data={modals:[modal],classes:className?className.split(/\s+/):[],overflowing:(0,_isOverflowing2.default)(container)};return _this.handleContainerOverflow&&function setContainerStyle(state,container){var style={overflow:"hidden"};state.style={overflow:container.style.overflow,paddingRight:container.style.paddingRight},state.overflowing&&(style.paddingRight=parseInt((0,_style2.default)(container,"paddingRight")||0,10)+(0,_scrollbarSize2.default)()+"px"),(0,_style2.default)(container,style)}(data,container),data.classes.forEach(_class2.default.addClass.bind(null,container)),_this.containers.push(container),_this.data.push(data),modalIdx},this.remove=function(modal){var modalIdx=_this.modals.indexOf(modal);if(-1!==modalIdx){var containerIdx=function findContainer(data,modal){return function findIndexOf(arr,cb){var idx=-1;return arr.some((function(d,i){if(cb(d,i))return idx=i,!0})),idx}(data,(function(d){return-1!==d.modals.indexOf(modal)}))}(_this.data,modal),data=_this.data[containerIdx],container=_this.containers[containerIdx];data.modals.splice(data.modals.indexOf(modal),1),_this.modals.splice(modalIdx,1),0===data.modals.length?(data.classes.forEach(_class2.default.removeClass.bind(null,container)),_this.handleContainerOverflow&&function removeContainerStyle(_ref,container){var style=_ref.style;Object.keys(style).forEach((function(key){return container.style[key]=style[key]}))}(data,container),_this.hideSiblingNodes&&(0,_manageAriaHidden.showSiblings)(container,modal.modalNode),_this.containers.splice(containerIdx,1),_this.data.splice(containerIdx,1)):_this.hideSiblingNodes&&(0,_manageAriaHidden.ariaHidden)(!1,data.modals[data.modals.length-1].modalNode)}},this.isTopModal=function(modal){return!!_this.modals.length&&_this.modals[_this.modals.length-1]===modal},this.hideSiblingNodes=hideSiblingNodes,this.handleContainerOverflow=handleContainerOverflow,this.modals=[],this.containers=[],this.data=[]},module.exports=exports.default},"./node_modules/react-overlays/lib/Overlay.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_elementType2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/elementType.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_Portal2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/Portal.js")),_Position2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/Position.js")),_RootCloseWrapper2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/RootCloseWrapper.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var Overlay=function(_React$Component){function Overlay(props,context){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Overlay);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.call(this,props,context));return _this.handleHidden=function(){var _this$props;(_this.setState({exited:!0}),_this.props.onExited)&&(_this$props=_this.props).onExited.apply(_this$props,arguments)},_this.state={exited:!props.show},_this.onHiddenListener=_this.handleHidden.bind(_this),_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Overlay,_React$Component),Overlay.prototype.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){nextProps.show?this.setState({exited:!1}):nextProps.transition||this.setState({exited:!0})},Overlay.prototype.render=function render(){var _props=this.props,container=_props.container,containerPadding=_props.containerPadding,target=_props.target,placement=_props.placement,shouldUpdatePosition=_props.shouldUpdatePosition,rootClose=_props.rootClose,children=_props.children,Transition=_props.transition,props=function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props,["container","containerPadding","target","placement","shouldUpdatePosition","rootClose","children","transition"]);if(!(props.show||Transition&&!this.state.exited))return null;var child=children;if(child=_react2.default.createElement(_Position2.default,{container,containerPadding,target,placement,shouldUpdatePosition},child),Transition){var onExit=props.onExit,onExiting=props.onExiting,onEnter=props.onEnter,onEntering=props.onEntering,onEntered=props.onEntered;child=_react2.default.createElement(Transition,{in:props.show,appear:!0,onExit,onExiting,onExited:this.onHiddenListener,onEnter,onEntering,onEntered},child)}return rootClose&&(child=_react2.default.createElement(_RootCloseWrapper2.default,{onRootClose:props.onHide,event:props.rootCloseEvent},child)),_react2.default.createElement(_Portal2.default,{container},child)},Overlay}(_react2.default.Component);Overlay.propTypes=_extends({},_Portal2.default.propTypes,_Position2.default.propTypes,{show:_propTypes2.default.bool,rootClose:_propTypes2.default.bool,rootCloseEvent:_RootCloseWrapper2.default.propTypes.event,onHide:function onHide(props){var propType=_propTypes2.default.func;props.rootClose&&(propType=propType.isRequired);for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];return propType.apply(void 0,[props].concat(args))},transition:_elementType2.default,onEnter:_propTypes2.default.func,onEntering:_propTypes2.default.func,onEntered:_propTypes2.default.func,onExit:_propTypes2.default.func,onExiting:_propTypes2.default.func,onExited:_propTypes2.default.func}),exports.default=Overlay,module.exports=exports.default},"./node_modules/react-overlays/lib/Portal.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _inDOM2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/util/inDOM.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_componentOrElement2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/componentOrElement.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom2=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_getContainer2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/getContainer.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/ownerDocument.js")),_LegacyPortal2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/LegacyPortal.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}var Portal=function(_React$Component){function Portal(){var _temp,_this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,_React$Component.call.apply(_React$Component,[this].concat(args))),_this.getMountNode=function(){return _this._portalContainerNode},_possibleConstructorReturn(_this,_temp)}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),Portal.prototype.UNSAFE_componentWillMount=function UNSAFE_componentWillMount(){if(_inDOM2.default){var container=this.props.container;"function"==typeof container&&(container=container()),container&&!_reactDom2.default.findDOMNode(container)||this.setContainer(container)}},Portal.prototype.componentDidMount=function componentDidMount(){this._portalContainerNode?this.props.onRendered&&this.props.onRendered():(this.setContainer(this.props.container),this.forceUpdate(this.props.onRendered))},Portal.prototype.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){nextProps.container!==this.props.container&&this.setContainer(nextProps.container)},Portal.prototype.componentWillUnmount=function componentWillUnmount(){this._portalContainerNode=null},Portal.prototype.setContainer=function setContainer(container){this._portalContainerNode=(0,_getContainer2.default)(container,(0,_ownerDocument2.default)(this).body)},Portal.prototype.render=function render(){return this.props.children&&this._portalContainerNode?_reactDom2.default.createPortal(this.props.children,this._portalContainerNode):null},Portal}(_react2.default.Component);Portal.displayName="Portal",Portal.propTypes={container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),onRendered:_propTypes2.default.func},exports.default=_reactDom2.default.createPortal?Portal:_LegacyPortal2.default,module.exports=exports.default},"./node_modules/react-overlays/lib/Position.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_classnames2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/node_modules/classnames/index.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_componentOrElement2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types-extra/lib/componentOrElement.js")),_react=__webpack_require__("./node_modules/react/index.js"),_react2=_interopRequireDefault(_react),_reactDom2=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_calculatePosition2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/calculatePosition.js")),_getContainer2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/getContainer.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var Position=function(_React$Component){function Position(props,context){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Position);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.call(this,props,context));return _this.getTarget=function(){var target=_this.props.target,targetElement="function"==typeof target?target():target;return targetElement&&_reactDom2.default.findDOMNode(targetElement)||null},_this.maybeUpdatePosition=function(placementChanged){var target=_this.getTarget();(_this.props.shouldUpdatePosition||target!==_this._lastTarget||placementChanged)&&_this.updatePosition(target)},_this.state={positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null},_this._needsFlush=!1,_this._lastTarget=null,_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Position,_React$Component),Position.prototype.componentDidMount=function componentDidMount(){this.updatePosition(this.getTarget())},Position.prototype.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(){this._needsFlush=!0},Position.prototype.componentDidUpdate=function componentDidUpdate(prevProps){this._needsFlush&&(this._needsFlush=!1,this.maybeUpdatePosition(this.props.placement!==prevProps.placement))},Position.prototype.render=function render(){var _props=this.props,children=_props.children,className=_props.className,props=_objectWithoutProperties(_props,["children","className"]),_state=this.state,positionLeft=_state.positionLeft,positionTop=_state.positionTop,arrowPosition=_objectWithoutProperties(_state,["positionLeft","positionTop"]);delete props.target,delete props.container,delete props.containerPadding,delete props.shouldUpdatePosition;var child=_react2.default.Children.only(children);return(0,_react.cloneElement)(child,_extends({},props,arrowPosition,{positionLeft,positionTop,className:(0,_classnames2.default)(className,child.props.className),style:_extends({},child.props.style,{left:positionLeft,top:positionTop})}))},Position.prototype.updatePosition=function updatePosition(target){if(this._lastTarget=target,target){var overlay=_reactDom2.default.findDOMNode(this),container=(0,_getContainer2.default)(this.props.container,(0,_ownerDocument2.default)(this).body);this.setState((0,_calculatePosition2.default)(this.props.placement,overlay,target,container,this.props.containerPadding))}else this.setState({positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null})},Position}(_react2.default.Component);Position.propTypes={target:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),containerPadding:_propTypes2.default.number,placement:_propTypes2.default.oneOf(["top","right","bottom","left"]),shouldUpdatePosition:_propTypes2.default.bool},Position.displayName="Position",Position.defaultProps={containerPadding:0,placement:"right",shouldUpdatePosition:!1},exports.default=Position,module.exports=exports.default},"./node_modules/react-overlays/lib/RefHolder.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var propTypes={children:_propTypes2.default.node},RefHolder=function(_React$Component){function RefHolder(){return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,RefHolder),function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.apply(this,arguments))}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(RefHolder,_React$Component),RefHolder.prototype.render=function render(){return this.props.children},RefHolder}(_react2.default.Component);RefHolder.propTypes=propTypes,exports.default=RefHolder,module.exports=exports.default},"./node_modules/react-overlays/lib/RootCloseWrapper.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0;var _contains2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/contains.js")),_propTypes2=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react2=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactDom2=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_addEventListener2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/addEventListener.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var RootCloseWrapper=function(_React$Component){function RootCloseWrapper(props,context){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,RootCloseWrapper);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_React$Component.call(this,props,context));return _this.addEventListeners=function(){_this.currentEvent=window.event;var event=_this.props.event,doc=(0,_ownerDocument2.default)(_this);_this.documentMouseCaptureListener=(0,_addEventListener2.default)(doc,event,_this.handleMouseCapture,!0),_this.documentMouseListener=(0,_addEventListener2.default)(doc,event,_this.handleMouse),_this.documentKeyupListener=(0,_addEventListener2.default)(doc,"keyup",_this.handleKeyUp)},_this.removeEventListeners=function(){_this.documentMouseCaptureListener&&_this.documentMouseCaptureListener.remove(),_this.documentMouseListener&&_this.documentMouseListener.remove(),_this.documentKeyupListener&&_this.documentKeyupListener.remove()},_this.handleMouseCapture=function(e){_this.preventMouseRootClose=function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey)}(e)||!function isLeftClickEvent(event){return 0===event.button}(e)||(0,_contains2.default)(_reactDom2.default.findDOMNode(_this),e.target)},_this.handleMouse=function(e){e!==_this.currentEvent?!_this.preventMouseRootClose&&_this.props.onRootClose&&_this.props.onRootClose(e):_this.currentEvent=void 0},_this.handleKeyUp=function(e){e!==_this.currentEvent?27===e.keyCode&&_this.props.onRootClose&&_this.props.onRootClose(e):_this.currentEvent=void 0},_this.preventMouseRootClose=!1,_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(RootCloseWrapper,_React$Component),RootCloseWrapper.prototype.componentDidMount=function componentDidMount(){this.props.disabled||this.addEventListeners()},RootCloseWrapper.prototype.componentDidUpdate=function componentDidUpdate(prevProps){!this.props.disabled&&prevProps.disabled?this.addEventListeners():this.props.disabled&&!prevProps.disabled&&this.removeEventListeners()},RootCloseWrapper.prototype.componentWillUnmount=function componentWillUnmount(){this.props.disabled||this.removeEventListeners()},RootCloseWrapper.prototype.render=function render(){return this.props.children},RootCloseWrapper}(_react2.default.Component);RootCloseWrapper.displayName="RootCloseWrapper",RootCloseWrapper.propTypes={onRootClose:_propTypes2.default.func,children:_propTypes2.default.element,disabled:_propTypes2.default.bool,event:_propTypes2.default.oneOf(["click","mousedown"])},RootCloseWrapper.defaultProps={event:"click"},exports.default=RootCloseWrapper,module.exports=exports.default},"./node_modules/react-overlays/lib/utils/addEventListener.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0,exports.default=function(node,event,handler,capture){return(0,_on2.default)(node,event,handler,capture),{remove:function remove(){(0,_off2.default)(node,event,handler,capture)}}};var _on2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/on.js")),_off2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/events/off.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}module.exports=exports.default},"./node_modules/react-overlays/lib/utils/addFocusListener.js":(module,exports)=>{"use strict";exports.__esModule=!0,exports.default=function addFocusListener(handler){var useFocusin=!document.addEventListener,remove=void 0;useFocusin?(document.attachEvent("onfocusin",handler),remove=function remove(){return document.detachEvent("onfocusin",handler)}):(document.addEventListener("focus",handler,!0),remove=function remove(){return document.removeEventListener("focus",handler,!0)});return{remove}},module.exports=exports.default},"./node_modules/react-overlays/lib/utils/calculatePosition.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0,exports.default=function calculatePosition(placement,overlayNode,target,container,padding){var childOffset="BODY"===container.tagName?(0,_offset2.default)(target):(0,_position2.default)(target,container),_getOffset2=(0,_offset2.default)(overlayNode),overlayHeight=_getOffset2.height,overlayWidth=_getOffset2.width,positionLeft=void 0,positionTop=void 0,arrowOffsetLeft=void 0,arrowOffsetTop=void 0;if("left"===placement||"right"===placement){positionTop=childOffset.top+(childOffset.height-overlayHeight)/2,positionLeft="left"===placement?childOffset.left-overlayWidth:childOffset.left+childOffset.width;var topDelta=function getTopDelta(top,overlayHeight,container,padding){var containerDimensions=getContainerDimensions(container),containerScroll=containerDimensions.scroll,containerHeight=containerDimensions.height,topEdgeOffset=top-padding-containerScroll,bottomEdgeOffset=top+padding-containerScroll+overlayHeight;return topEdgeOffset<0?-topEdgeOffset:bottomEdgeOffset>containerHeight?containerHeight-bottomEdgeOffset:0}(positionTop,overlayHeight,container,padding);positionTop+=topDelta,arrowOffsetTop=50*(1-2*topDelta/overlayHeight)+"%",arrowOffsetLeft=void 0}else{if("top"!==placement&&"bottom"!==placement)throw new Error('calcOverlayPosition(): No such placement of "'+placement+'" found.');positionLeft=childOffset.left+(childOffset.width-overlayWidth)/2,positionTop="top"===placement?childOffset.top-overlayHeight:childOffset.top+childOffset.height;var leftDelta=function getLeftDelta(left,overlayWidth,container,padding){var containerDimensions=getContainerDimensions(container),containerWidth=containerDimensions.width,leftEdgeOffset=left-padding,rightEdgeOffset=left+padding+overlayWidth;if(leftEdgeOffset<0)return-leftEdgeOffset;if(rightEdgeOffset>containerWidth)return containerWidth-rightEdgeOffset;return 0}(positionLeft,overlayWidth,container,padding);positionLeft+=leftDelta,arrowOffsetLeft=50*(1-2*leftDelta/overlayWidth)+"%",arrowOffsetTop=void 0}return{positionLeft,positionTop,arrowOffsetLeft,arrowOffsetTop}};var _offset2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/offset.js")),_position2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/position.js")),_scrollTop2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/scrollTop.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/react-overlays/lib/utils/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function getContainerDimensions(containerNode){var width=void 0,height=void 0,scroll=void 0;if("BODY"===containerNode.tagName)width=window.innerWidth,height=window.innerHeight,scroll=(0,_scrollTop2.default)((0,_ownerDocument2.default)(containerNode).documentElement)||(0,_scrollTop2.default)(containerNode);else{var _getOffset=(0,_offset2.default)(containerNode);width=_getOffset.width,height=_getOffset.height,scroll=(0,_scrollTop2.default)(containerNode)}return{width,height,scroll}}module.exports=exports.default},"./node_modules/react-overlays/lib/utils/getContainer.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0,exports.default=function getContainer(container,defaultContainer){return container="function"==typeof container?container():container,_reactDom2.default.findDOMNode(container)||defaultContainer};var _reactDom2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react-dom/index.js"));module.exports=exports.default},"./node_modules/react-overlays/lib/utils/isOverflowing.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0,exports.default=function isOverflowing(container){return(0,_isWindow2.default)(container)||function isBody(node){return node&&"body"===node.tagName.toLowerCase()}(container)?function bodyIsOverflowing(node){var doc=(0,_ownerDocument2.default)(node),win=(0,_isWindow2.default)(doc),fullWidth=win.innerWidth;if(!fullWidth){var documentElementRect=doc.documentElement.getBoundingClientRect();fullWidth=documentElementRect.right-Math.abs(documentElementRect.left)}return doc.body.clientWidth<fullWidth}(container):container.scrollHeight>container.clientHeight};var _isWindow2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/query/isWindow.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}module.exports=exports.default},"./node_modules/react-overlays/lib/utils/manageAriaHidden.js":(__unused_webpack_module,exports)=>{"use strict";exports.__esModule=!0,exports.ariaHidden=ariaHidden,exports.hideSiblings=function hideSiblings(container,mountNode){siblings(container,mountNode,(function(node){return ariaHidden(!0,node)}))},exports.showSiblings=function showSiblings(container,mountNode){siblings(container,mountNode,(function(node){return ariaHidden(!1,node)}))};var BLACKLIST=["template","script","style"],siblings=function siblings(container,mount,cb){mount=[].concat(mount),[].forEach.call(container.children,(function(node){-1===mount.indexOf(node)&&function isHidable(_ref){var nodeType=_ref.nodeType,tagName=_ref.tagName;return 1===nodeType&&-1===BLACKLIST.indexOf(tagName.toLowerCase())}(node)&&cb(node)}))};function ariaHidden(show,node){node&&(show?node.setAttribute("aria-hidden","true"):node.removeAttribute("aria-hidden"))}},"./node_modules/react-overlays/lib/utils/ownerDocument.js":(module,exports,__webpack_require__)=>{"use strict";exports.__esModule=!0,exports.default=function(componentOrElement){return(0,_ownerDocument2.default)(_reactDom2.default.findDOMNode(componentOrElement))};var _reactDom2=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_ownerDocument2=_interopRequireDefault(__webpack_require__("./node_modules/dom-helpers/ownerDocument.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}module.exports=exports.default},"./node_modules/react-overlays/node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg))classes.push(classNames.apply(null,arg));else if("object"===argType)for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}return classes.join(" ")}module.exports?module.exports=classNames:void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/uncontrollable/lib/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}__webpack_require__.d(__webpack_exports__,{Pd:()=>uncontrollable,Zw:()=>useUncontrolled,iC:()=>useUncontrolledProp});var react=__webpack_require__("./node_modules/react/index.js"),browser=__webpack_require__("./node_modules/invariant/browser.js"),browser_default=__webpack_require__.n(browser),noop=function noop(){};function isProp(props,prop){return void 0!==props[prop]}function defaultKey(key){return"default"+key.charAt(0).toUpperCase()+key.substr(1)}function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}function useUncontrolledProp(propValue,defaultValue,handler){var wasPropRef=(0,react.useRef)(void 0!==propValue),_useState=(0,react.useState)(defaultValue),stateValue=_useState[0],setState=_useState[1],isProp=void 0!==propValue,wasProp=wasPropRef.current;return wasPropRef.current=isProp,!isProp&&wasProp&&stateValue!==defaultValue&&setState(defaultValue),[isProp?propValue:stateValue,(0,react.useCallback)((function(value){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];handler&&handler.apply(void 0,[value].concat(args)),setState(value)}),[handler])]}function useUncontrolled(props,config){return Object.keys(config).reduce((function(result,fieldName){var _extends2,_ref=result,defaultValue=_ref[defaultKey(fieldName)],propsValue=_ref[fieldName],rest=_objectWithoutPropertiesLoose(_ref,[defaultKey(fieldName),fieldName].map(_toPropertyKey)),handlerName=config[fieldName],_useUncontrolledProp=useUncontrolledProp(propsValue,defaultValue,props[handlerName]),value=_useUncontrolledProp[0],handler=_useUncontrolledProp[1];return _extends({},rest,((_extends2={})[fieldName]=value,_extends2[handlerName]=handler,_extends2))}),props)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var react_lifecycles_compat_es=__webpack_require__("./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"),_jsxFileName="/Users/jquense/src/uncontrollable/src/uncontrollable.js";function uncontrollable(Component,controlledValues,methods){void 0===methods&&(methods=[]);var displayName=Component.displayName||Component.name||"Component",canAcceptRef=function utils_canAcceptRef(component){return!!component&&("function"!=typeof component||component.prototype&&component.prototype.isReactComponent)}(Component),controlledProps=Object.keys(controlledValues),PROPS_TO_OMIT=controlledProps.map(defaultKey);!canAcceptRef&&methods.length&&browser_default()(!1);var UncontrolledComponent=function(_React$Component){function UncontrolledComponent(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).handlers=Object.create(null),controlledProps.forEach((function(propName){var handlerName=controlledValues[propName];_this.handlers[handlerName]=function handleChange(value){if(_this.props[handlerName]){var _this$props;_this._notifying=!0;for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];(_this$props=_this.props)[handlerName].apply(_this$props,[value].concat(args)),_this._notifying=!1}_this.unmounted||_this.setState((function(_ref){var _extends2,values=_ref.values;return{values:_extends(Object.create(null),values,(_extends2={},_extends2[propName]=value,_extends2))}}))}})),methods.length&&(_this.attachRef=function(ref){_this.inner=ref});var values=Object.create(null);return controlledProps.forEach((function(key){values[key]=_this.props[defaultKey(key)]})),_this.state={values,prevProps:{}},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(UncontrolledComponent,_React$Component);var _proto=UncontrolledComponent.prototype;return _proto.shouldComponentUpdate=function shouldComponentUpdate(){return!this._notifying},UncontrolledComponent.getDerivedStateFromProps=function getDerivedStateFromProps(props,_ref2){var values=_ref2.values,prevProps=_ref2.prevProps,nextState={values:_extends(Object.create(null),values),prevProps:{}};return controlledProps.forEach((function(key){nextState.prevProps[key]=props[key],!isProp(props,key)&&isProp(prevProps,key)&&(nextState.values[key]=props[defaultKey(key)])})),nextState},_proto.componentWillUnmount=function componentWillUnmount(){this.unmounted=!0},_proto.render=function render(){var _this2=this,_this$props2=this.props,innerRef=_this$props2.innerRef,props=_objectWithoutPropertiesLoose(_this$props2,["innerRef"]);PROPS_TO_OMIT.forEach((function(prop){delete props[prop]}));var newProps={};return controlledProps.forEach((function(propName){var propValue=_this2.props[propName];newProps[propName]=void 0!==propValue?propValue:_this2.state.values[propName]})),react.createElement(Component,_extends({},props,newProps,this.handlers,{ref:innerRef||this.attachRef}))},UncontrolledComponent}(react.Component);(0,react_lifecycles_compat_es.polyfill)(UncontrolledComponent),UncontrolledComponent.displayName="Uncontrolled("+displayName+")",UncontrolledComponent.propTypes=_extends({innerRef:function innerRef(){}},function uncontrolledPropTypes(controlledValues,displayName){var propTypes={};return Object.keys(controlledValues).forEach((function(prop){propTypes[defaultKey(prop)]=noop})),propTypes}(controlledValues)),methods.forEach((function(method){UncontrolledComponent.prototype[method]=function $proxiedMethod(){var _this$inner;return(_this$inner=this.inner)[method].apply(_this$inner,arguments)}}));var WrappedComponent=UncontrolledComponent;return react.forwardRef&&((WrappedComponent=react.forwardRef((function(props,ref){return react.createElement(UncontrolledComponent,_extends({},props,{innerRef:ref,__source:{fileName:_jsxFileName,lineNumber:128},__self:this}))}))).propTypes=UncontrolledComponent.propTypes),WrappedComponent.ControlledComponent=Component,WrappedComponent.deferControlTo=function(newComponent,additions,nextMethods){return void 0===additions&&(additions={}),uncontrollable(newComponent,_extends({},controlledValues,additions),nextMethods)},WrappedComponent}},"./node_modules/warning/browser.js":module=>{"use strict";module.exports=function(){}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dkIsc0JBQXVCdHBDLFNBQVMsQ0FBQyxFQUFHOEUsTUFBTyxDQUNwRWdsQyxTQUFVbndCLElBQ1Z5d0IsU0FBVSxDQUNSQyxTQUFVckIsYUFDVnNCLFdBQVksS0FFZEMsT0FBUWgxQyxPQUVaLEtBQ2lCNFksVUFBWW03QixzQkFBc0JuN0IsV0FHckRnOEIsaUJBQWlCMW9CLG9CQUFzQjFULFVBTXZDbzhCLGlCQUFpQkssZUFBaUIsU0FBVUMsYUFBY0MsVUFBV0MsYUFLbkUsWUFKa0IsSUFBZEQsWUFDRkEsVUFBWSxDQUFDLEdBR1J6QixlQUFld0IsYUFBY3pxQyxTQUFTLENBQUMsRUFBR2twQyxpQkFBa0J3QixXQUFZQyxZQUNqRixFQUVPUixnQkFDVCw2REVwSEFuM0MsT0FBT0MsUUF6Q08sV0FBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2FycmF5L2lzLWFycmF5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2hhc0NsYXNzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3Rlbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29mZi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9pc1dpbmRvdy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvb2Zmc2V0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L3Bvc2l0aW9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxMZWZ0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxUb3AuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2dldENvbXB1dGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9yZW1vdmVTdHlsZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZVN0eWxlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGVTdHlsZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9rZXljb2RlL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvZGVwcmVjYXRlZC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvaXNSZXF1aXJlZEZvckExMXkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9TdHlsZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL2Jvb3RzdHJhcFV0aWxzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhbmVsR3JvdXAuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9BY2NvcmRpb24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DbG9zZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0FsZXJ0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU2FmZUFuY2hvci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0JyZWFkY3J1bWJJdGVtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQnJlYWRjcnVtYi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0J1dHRvbkdyb3VwLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQnV0dG9uVG9vbGJhci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsQ2FwdGlvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsSXRlbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0dseXBoaWNvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ2xlYXJmaXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Db250cm9sTGFiZWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Db2wuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Db2xsYXBzZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Ryb3Bkb3duTWVudS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Ryb3Bkb3duVG9nZ2xlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9zcGxpdENvbXBvbmVudFByb3BzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRHJvcGRvd25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GYWRlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1Db250cm9sRmVlZGJhY2suanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtQ29udHJvbFN0YXRpYy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybUdyb3VwLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvR3JpZC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0hlbHBCbG9jay5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0ltYWdlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvSW5wdXRHcm91cEFkZG9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvSW5wdXRHcm91cEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0lucHV0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9KdW1ib3Ryb24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9MYWJlbC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0xpc3RHcm91cEl0ZW0uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9MaXN0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYUJvZHkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYUhlYWRpbmcuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYUxlZnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYUxpc3QuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYUxpc3RJdGVtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVkaWFSaWdodC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01lZGlhLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbEJvZHkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbERpYWxvZy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsRm9vdGVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWxIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbFRpdGxlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXYuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZiYXJCcmFuZC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhckNvbGxhcHNlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2YmFySGVhZGVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2YmFyVG9nZ2xlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2YmFyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2RHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZJdGVtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvT3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL092ZXJsYXlUcmlnZ2VyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFnZUhlYWRlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhZ2VySXRlbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL2RlcHJlY2F0aW9uV2FybmluZy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhZ2VJdGVtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFnZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYWdpbmF0aW9uSXRlbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYW5lbENvbGxhcHNlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxCb2R5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxIZWFkaW5nLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYW5lbFRpdGxlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxGb290ZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYW5lbC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Qcm9ncmVzc0Jhci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1JhZGlvLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUmVzcG9uc2l2ZUVtYmVkLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUm93LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU3BsaXRUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9TcGxpdEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYkNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYkNvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJQYW5lLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFiLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFibGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGh1bWJuYWlsLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVG9nZ2xlQnV0dG9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVG9nZ2xlQnV0dG9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ub29sdGlwLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvV2VsbC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQuZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9MZWdhY3lQb3J0YWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Nb2RhbC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL092ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Qb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1JlZkhvbGRlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1Jvb3RDbG9zZVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9hZGRFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvYWRkRm9jdXNMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2NhbGN1bGF0ZVBvc2l0aW9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvZ2V0Q29udGFpbmVyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvaXNPdmVyZmxvd2luZy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL21hbmFnZUFyaWFIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3VuY29udHJvbGxhYmxlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9saWIvZXNtL3V0aWxzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9saWIvZXNtL2hvb2suanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3VuY29udHJvbGxhYmxlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvbGliL2VzbS91bmNvbnRyb2xsYWJsZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvaXMtYXJyYXlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3BhcnNlLWludFwiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZyb207XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaXNBcnJheTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLnBhcnNlSW50O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIGFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGlmIChkb2MgPT09IHZvaWQgMCkge1xuICAgIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSgpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiBpZSB0aHJvd3MgaWYgbm8gYWN0aXZlIGVsZW1lbnQgKi9cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZENsYXNzO1xuXG52YXIgX2hhc0NsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9oYXNDbGFzc1wiKSk7XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO2Vsc2UgaWYgKCEoMCwgX2hhc0NsYXNzLmRlZmF1bHQpKGVsZW1lbnQsIGNsYXNzTmFtZSkpIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO2Vsc2UgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycpICsgJyAnICsgY2xhc3NOYW1lKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2FkZENsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRDbGFzc1wiKSk7XG5cbmV4cG9ydHMuYWRkQ2xhc3MgPSBfYWRkQ2xhc3MuZGVmYXVsdDtcblxudmFyIF9yZW1vdmVDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVtb3ZlQ2xhc3NcIikpO1xuXG5leHBvcnRzLnJlbW92ZUNsYXNzID0gX3JlbW92ZUNsYXNzLmRlZmF1bHQ7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZXhwb3J0cy5oYXNDbGFzcyA9IF9oYXNDbGFzcy5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBhZGRDbGFzczogX2FkZENsYXNzLmRlZmF1bHQsXG4gIHJlbW92ZUNsYXNzOiBfcmVtb3ZlQ2xhc3MuZGVmYXVsdCxcbiAgaGFzQ2xhc3M6IF9oYXNDbGFzcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZpbHRlckV2ZW50cztcblxudmFyIF9jb250YWlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3F1ZXJ5L2NvbnRhaW5zXCIpKTtcblxudmFyIF9xdWVyeVNlbGVjdG9yQWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcXVlcnkvcXVlcnlTZWxlY3RvckFsbFwiKSk7XG5cbmZ1bmN0aW9uIGZpbHRlckV2ZW50cyhzZWxlY3RvciwgaGFuZGxlcikge1xuICByZXR1cm4gZnVuY3Rpb24gZmlsdGVySGFuZGxlcihlKSB7XG4gICAgdmFyIHRvcCA9IGUuY3VycmVudFRhcmdldCxcbiAgICAgICAgdGFyZ2V0ID0gZS50YXJnZXQsXG4gICAgICAgIG1hdGNoZXMgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkodG9wLCBzZWxlY3Rvcik7XG4gICAgaWYgKG1hdGNoZXMuc29tZShmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiAoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKG1hdGNoLCB0YXJnZXQpO1xuICAgIH0pKSBoYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblwiKSk7XG5cbmV4cG9ydHMub24gPSBfb24uZGVmYXVsdDtcblxudmFyIF9vZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZlwiKSk7XG5cbmV4cG9ydHMub2ZmID0gX29mZi5kZWZhdWx0O1xuXG52YXIgX2ZpbHRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZmlsdGVyXCIpKTtcblxuZXhwb3J0cy5maWx0ZXIgPSBfZmlsdGVyLmRlZmF1bHQ7XG5cbnZhciBfbGlzdGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saXN0ZW5cIikpO1xuXG5leHBvcnRzLmxpc3RlbiA9IF9saXN0ZW4uZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgb246IF9vbi5kZWZhdWx0LFxuICBvZmY6IF9vZmYuZGVmYXVsdCxcbiAgZmlsdGVyOiBfZmlsdGVyLmRlZmF1bHQsXG4gIGxpc3RlbjogX2xpc3Rlbi5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29uXCIpKTtcblxudmFyIF9vZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZlwiKSk7XG5cbnZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4oKSB7fTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAoMCwgX29uLmRlZmF1bHQpKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICgwLCBfb2ZmLmRlZmF1bHQpKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gbGlzdGVuO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb2ZmID0gZnVuY3Rpb24gb2ZmKCkge307XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICBvZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb2ZmO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb24gPSBmdW5jdGlvbiBvbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgIGUuY3VycmVudFRhcmdldCA9IG5vZGU7XG4gICAgICAgIGhhbmRsZXIuY2FsbChub2RlLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gSFRNTCBET00gYW5kIFNWRyBET00gbWF5IGhhdmUgZGlmZmVyZW50IHN1cHBvcnQgbGV2ZWxzLFxuICAvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIG9uIGNvbnRleHQgaW5zdGVhZCBvZiBhIGRvY3VtZW50IHJvb3QgZWxlbWVudC5cbiAgcmV0dXJuIF9pbkRPTS5kZWZhdWx0ID8gZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgICBpZiAoY29udGV4dC5jb250YWlucykge1xuICAgICAgcmV0dXJuIGNvbnRleHQuY29udGFpbnMobm9kZSk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gY29udGV4dCA9PT0gbm9kZSB8fCAhIShjb250ZXh0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgMTYpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsbGJhY2soY29udGV4dCwgbm9kZSk7XG4gICAgfVxuICB9IDogZmFsbGJhY2s7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBmYWxsYmFjayhjb250ZXh0LCBub2RlKSB7XG4gIGlmIChub2RlKSBkbyB7XG4gICAgaWYgKG5vZGUgPT09IGNvbnRleHQpIHJldHVybiB0cnVlO1xuICB9IHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnROb2RlKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0V2luZG93O1xuXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICByZXR1cm4gbm9kZSA9PT0gbm9kZS53aW5kb3cgPyBub2RlIDogbm9kZS5ub2RlVHlwZSA9PT0gOSA/IG5vZGUuZGVmYXVsdFZpZXcgfHwgbm9kZS5wYXJlbnRXaW5kb3cgOiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBvZmZzZXQ7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnRhaW5zXCIpKTtcblxudmFyIF9pc1dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNXaW5kb3dcIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9vd25lckRvY3VtZW50XCIpKTtcblxuZnVuY3Rpb24gb2Zmc2V0KG5vZGUpIHtcbiAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShub2RlKSxcbiAgICAgIHdpbiA9ICgwLCBfaXNXaW5kb3cuZGVmYXVsdCkoZG9jKSxcbiAgICAgIGRvY0VsZW0gPSBkb2MgJiYgZG9jLmRvY3VtZW50RWxlbWVudCxcbiAgICAgIGJveCA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgd2lkdGg6IDBcbiAgfTtcbiAgaWYgKCFkb2MpIHJldHVybjsgLy8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG5cbiAgaWYgKCEoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKGRvY0VsZW0sIG5vZGUpKSByZXR1cm4gYm94O1xuICBpZiAobm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHVuZGVmaW5lZCkgYm94ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gSUU4IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBkb2Vzbid0IHN1cHBvcnQgd2lkdGggJiBoZWlnaHRcblxuICBib3ggPSB7XG4gICAgdG9wOiBib3gudG9wICsgKHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcCkgLSAoZG9jRWxlbS5jbGllbnRUb3AgfHwgMCksXG4gICAgbGVmdDogYm94LmxlZnQgKyAod2luLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsTGVmdCkgLSAoZG9jRWxlbS5jbGllbnRMZWZ0IHx8IDApLFxuICAgIHdpZHRoOiAoYm94LndpZHRoID09IG51bGwgPyBub2RlLm9mZnNldFdpZHRoIDogYm94LndpZHRoKSB8fCAwLFxuICAgIGhlaWdodDogKGJveC5oZWlnaHQgPT0gbnVsbCA/IG5vZGUub2Zmc2V0SGVpZ2h0IDogYm94LmhlaWdodCkgfHwgMFxuICB9O1xuICByZXR1cm4gYm94O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9mZnNldFBhcmVudDtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZVwiKSk7XG5cbmZ1bmN0aW9uIG5vZGVOYW1lKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgJiYgbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBvZmZzZXRQYXJlbnQobm9kZSkge1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKG5vZGUpLFxuICAgICAgb2Zmc2V0UGFyZW50ID0gbm9kZSAmJiBub2RlLm9mZnNldFBhcmVudDtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIG5vZGVOYW1lKG5vZGUpICE9PSAnaHRtbCcgJiYgKDAsIF9zdHlsZS5kZWZhdWx0KShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcG9zaXRpb247XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29mZnNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2Zmc2V0XCIpKTtcblxudmFyIF9vZmZzZXRQYXJlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZnNldFBhcmVudFwiKSk7XG5cbnZhciBfc2Nyb2xsVG9wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxUb3BcIikpO1xuXG52YXIgX3Njcm9sbExlZnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbExlZnRcIikpO1xuXG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVcIikpO1xuXG5mdW5jdGlvbiBub2RlTmFtZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVOYW1lICYmIG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb24obm9kZSwgb2Zmc2V0UGFyZW50KSB7XG4gIHZhciBwYXJlbnRPZmZzZXQgPSB7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDBcbiAgfSxcbiAgICAgIG9mZnNldDsgLy8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcbiAgLy8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cbiAgaWYgKCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICBvZmZzZXQgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudCB8fCAoMCwgX29mZnNldFBhcmVudC5kZWZhdWx0KShub2RlKTtcbiAgICBvZmZzZXQgPSAoMCwgX29mZnNldC5kZWZhdWx0KShub2RlKTtcbiAgICBpZiAobm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2h0bWwnKSBwYXJlbnRPZmZzZXQgPSAoMCwgX29mZnNldC5kZWZhdWx0KShvZmZzZXRQYXJlbnQpO1xuICAgIHBhcmVudE9mZnNldC50b3AgKz0gcGFyc2VJbnQoKDAsIF9zdHlsZS5kZWZhdWx0KShvZmZzZXRQYXJlbnQsICdib3JkZXJUb3BXaWR0aCcpLCAxMCkgLSAoMCwgX3Njcm9sbFRvcC5kZWZhdWx0KShvZmZzZXRQYXJlbnQpIHx8IDA7XG4gICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VJbnQoKDAsIF9zdHlsZS5kZWZhdWx0KShvZmZzZXRQYXJlbnQsICdib3JkZXJMZWZ0V2lkdGgnKSwgMTApIC0gKDAsIF9zY3JvbGxMZWZ0LmRlZmF1bHQpKG9mZnNldFBhcmVudCkgfHwgMDtcbiAgfSAvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgbm9kZSBtYXJnaW5zXG5cblxuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb2Zmc2V0LCB7XG4gICAgdG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIChwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsICdtYXJnaW5Ub3AnKSwgMTApIHx8IDApLFxuICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSAocGFyc2VJbnQoKDAsIF9zdHlsZS5kZWZhdWx0KShub2RlLCAnbWFyZ2luTGVmdCcpLCAxMCkgfHwgMClcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBxc2E7XG4vLyBaZXB0by5qc1xuLy8gKGMpIDIwMTAtMjAxNSBUaG9tYXMgRnVjaHNcbi8vIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIHNpbXBsZVNlbGVjdG9yUkUgPSAvXltcXHctXSokLztcbnZhciB0b0FycmF5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCwgW10uc2xpY2UpO1xuXG5mdW5jdGlvbiBxc2EoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgdmFyIG1heWJlSUQgPSBzZWxlY3RvclswXSA9PT0gJyMnLFxuICAgICAgbWF5YmVDbGFzcyA9IHNlbGVjdG9yWzBdID09PSAnLicsXG4gICAgICBuYW1lT25seSA9IG1heWJlSUQgfHwgbWF5YmVDbGFzcyA/IHNlbGVjdG9yLnNsaWNlKDEpIDogc2VsZWN0b3IsXG4gICAgICBpc1NpbXBsZSA9IHNpbXBsZVNlbGVjdG9yUkUudGVzdChuYW1lT25seSksXG4gICAgICBmb3VuZDtcblxuICBpZiAoaXNTaW1wbGUpIHtcbiAgICBpZiAobWF5YmVJRCkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQgPyBlbGVtZW50IDogZG9jdW1lbnQ7XG4gICAgICByZXR1cm4gKGZvdW5kID0gZWxlbWVudC5nZXRFbGVtZW50QnlJZChuYW1lT25seSkpID8gW2ZvdW5kXSA6IFtdO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgbWF5YmVDbGFzcykgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG5hbWVPbmx5KSk7XG4gICAgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3RvcikpO1xuICB9XG5cbiAgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsVG9wO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIHNjcm9sbFRvcChub2RlLCB2YWwpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cuZGVmYXVsdCkobm9kZSk7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHdpbiA/ICdwYWdlWE9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IDogbm9kZS5zY3JvbGxMZWZ0O1xuICBpZiAod2luKSB3aW4uc2Nyb2xsVG8odmFsLCAncGFnZVlPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWU9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKTtlbHNlIG5vZGUuc2Nyb2xsTGVmdCA9IHZhbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzY3JvbGxUb3A7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzV2luZG93XCIpKTtcblxuZnVuY3Rpb24gc2Nyb2xsVG9wKG5vZGUsIHZhbCkge1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdy5kZWZhdWx0KShub2RlKTtcbiAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gd2luID8gJ3BhZ2VZT2Zmc2V0JyBpbiB3aW4gPyB3aW4ucGFnZVlPZmZzZXQgOiB3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IG5vZGUuc2Nyb2xsVG9wO1xuICBpZiAod2luKSB3aW4uc2Nyb2xsVG8oJ3BhZ2VYT2Zmc2V0JyBpbiB3aW4gPyB3aW4ucGFnZVhPZmZzZXQgOiB3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsIHZhbCk7ZWxzZSBub2RlLnNjcm9sbFRvcCA9IHZhbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZTtcblxudmFyIF9jYW1lbGl6ZVN0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9jYW1lbGl6ZVN0eWxlXCIpKTtcblxudmFyIHJwb3NpdGlvbiA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLztcbnZhciBybnVtbm9ucHggPSAvXihbKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkpKD8hcHgpW2EteiVdKyQvaTtcblxuZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUobm9kZSkge1xuICBpZiAoIW5vZGUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIEVsZW1lbnQgcGFzc2VkIHRvIGBnZXRDb21wdXRlZFN0eWxlKClgJyk7XG4gIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiAnZGVmYXVsdFZpZXcnIGluIGRvYyA/IGRvYy5kZWZhdWx0Vmlldy5vcGVuZXIgPyBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSA6IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpIDoge1xuICAgIC8vaWUgOCBcIm1hZ2ljXCIgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvYmxvYi8xLjExLXN0YWJsZS9zcmMvY3NzL2N1ckNTUy5qcyNMNzJcbiAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKHByb3ApIHtcbiAgICAgIHZhciBzdHlsZSA9IG5vZGUuc3R5bGU7XG4gICAgICBwcm9wID0gKDAsIF9jYW1lbGl6ZVN0eWxlLmRlZmF1bHQpKHByb3ApO1xuICAgICAgaWYgKHByb3AgPT0gJ2Zsb2F0JykgcHJvcCA9ICdzdHlsZUZsb2F0JztcbiAgICAgIHZhciBjdXJyZW50ID0gbm9kZS5jdXJyZW50U3R5bGVbcHJvcF0gfHwgbnVsbDtcbiAgICAgIGlmIChjdXJyZW50ID09IG51bGwgJiYgc3R5bGUgJiYgc3R5bGVbcHJvcF0pIGN1cnJlbnQgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHJudW1ub25weC50ZXN0KGN1cnJlbnQpICYmICFycG9zaXRpb24udGVzdChwcm9wKSkge1xuICAgICAgICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gICAgICAgIHZhciBsZWZ0ID0gc3R5bGUubGVmdDtcbiAgICAgICAgdmFyIHJ1blN0eWxlID0gbm9kZS5ydW50aW1lU3R5bGU7XG4gICAgICAgIHZhciByc0xlZnQgPSBydW5TdHlsZSAmJiBydW5TdHlsZS5sZWZ0OyAvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cbiAgICAgICAgaWYgKHJzTGVmdCkgcnVuU3R5bGUubGVmdCA9IG5vZGUuY3VycmVudFN0eWxlLmxlZnQ7XG4gICAgICAgIHN0eWxlLmxlZnQgPSBwcm9wID09PSAnZm9udFNpemUnID8gJzFlbScgOiBjdXJyZW50O1xuICAgICAgICBjdXJyZW50ID0gc3R5bGUucGl4ZWxMZWZ0ICsgJ3B4JzsgLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXG4gICAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgICAgICBpZiAocnNMZWZ0KSBydW5TdHlsZS5sZWZ0ID0gcnNMZWZ0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29tcHV0ZWRTdHlsZVwiKSk7XG5cbnZhciBfcmVtb3ZlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpKTtcblxudmFyIF9wcm9wZXJ0aWVzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcHJvcGVydGllc1wiKTtcblxudmFyIF9pc1RyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm1cIikpO1xuXG5mdW5jdGlvbiBzdHlsZShub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICB2YXIgcHJvcHMgPSBwcm9wZXJ0eTtcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZS5zdHlsZVsoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpXSB8fCAoMCwgX2dldENvbXB1dGVkU3R5bGUyLmRlZmF1bHQpKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoKDAsIF9oeXBoZW5hdGVTdHlsZS5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAoMCwgX3JlbW92ZVN0eWxlLmRlZmF1bHQpKG5vZGUsICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyBcIjogXCIgKyB0cmFuc2Zvcm1zICsgXCI7XCI7XG4gIH1cblxuICBub2RlLnN0eWxlLmNzc1RleHQgKz0gJzsnICsgY3NzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlU3R5bGU7XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlKG5vZGUsIGtleSkge1xuICByZXR1cm4gJ3JlbW92ZVByb3BlcnR5JyBpbiBub2RlLnN0eWxlID8gbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpIDogbm9kZS5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcGVydGllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcHJvcGVydGllc1wiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZVwiKSk7XG5cbmZ1bmN0aW9uIG9uRW5kKG5vZGUsIGhhbmRsZXIsIGR1cmF0aW9uKSB7XG4gIHZhciBmYWtlRXZlbnQgPSB7XG4gICAgdGFyZ2V0OiBub2RlLFxuICAgIGN1cnJlbnRUYXJnZXQ6IG5vZGVcbiAgfSxcbiAgICAgIGJhY2t1cDtcbiAgaWYgKCFfcHJvcGVydGllcy5kZWZhdWx0LmVuZCkgZHVyYXRpb24gPSAwO2Vsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIGR1cmF0aW9uID0gcGFyc2VEdXJhdGlvbihub2RlKSB8fCAwO1xuXG4gIGlmIChfcHJvcGVydGllcy5kZWZhdWx0LmVuZCkge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihfcHJvcGVydGllcy5kZWZhdWx0LmVuZCwgZG9uZSwgZmFsc2UpO1xuICAgIGJhY2t1cCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRvbmUoZmFrZUV2ZW50KTtcbiAgICB9LCAoZHVyYXRpb24gfHwgMTAwKSAqIDEuNSk7XG4gIH0gZWxzZSBzZXRUaW1lb3V0KGRvbmUuYmluZChudWxsLCBmYWtlRXZlbnQpLCAwKTtcblxuICBmdW5jdGlvbiBkb25lKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkgcmV0dXJuO1xuICAgIGNsZWFyVGltZW91dChiYWNrdXApO1xuICAgIGV2ZW50LnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKF9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kLCBkb25lKTtcbiAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gIH1cbn1cblxub25FbmQuX3BhcnNlRHVyYXRpb24gPSBwYXJzZUR1cmF0aW9uO1xudmFyIF9kZWZhdWx0ID0gb25FbmQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gcGFyc2VEdXJhdGlvbihub2RlKSB7XG4gIHZhciBzdHIgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsIF9wcm9wZXJ0aWVzLmRlZmF1bHQuZHVyYXRpb24pLFxuICAgICAgbXVsdCA9IHN0ci5pbmRleE9mKCdtcycpID09PSAtMSA/IDEwMDAgOiAxO1xuICByZXR1cm4gcGFyc2VGbG9hdChzdHIpICogbXVsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZW5kID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9lbmRcIikpO1xuXG5leHBvcnRzLmVuZCA9IF9lbmQuZGVmYXVsdDtcblxudmFyIF9wcm9wZXJ0aWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpKTtcblxuZXhwb3J0cy5wcm9wZXJ0aWVzID0gX3Byb3BlcnRpZXMuZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgZW5kOiBfZW5kLmRlZmF1bHQsXG4gIHByb3BlcnRpZXM6IF9wcm9wZXJ0aWVzLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVHJhbnNmb3JtO1xudmFyIHN1cHBvcnRlZFRyYW5zZm9ybXMgPSAvXigodHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSkoWHxZfFp8M2QpP3xtYXRyaXgoM2QpP3xwZXJzcGVjdGl2ZXxza2V3KFh8WSk/KSQvaTtcblxuZnVuY3Rpb24gaXNUcmFuc2Zvcm0ocHJvcGVydHkpIHtcbiAgcmV0dXJuICEhKHByb3BlcnR5ICYmIHN1cHBvcnRlZFRyYW5zZm9ybXMudGVzdChwcm9wZXJ0eSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IGV4cG9ydHMudHJhbnNmb3JtID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciB0cmFuc2Zvcm0gPSAndHJhbnNmb3JtJztcbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xudmFyIHByZWZpeCwgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQ7XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSwgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uVGltaW5nLCB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmc7XG5leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbmV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5O1xudmFyIGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25UaW1pbmcsIGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmc7XG5leHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb247XG5leHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lO1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcGVydCA9IGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCk7XG5cbiAgcHJlZml4ID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnByZWZpeDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC50cmFuc2l0aW9uRW5kO1xuICBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5hbmltYXRpb25FbmQ7XG4gIGV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtID0gcHJlZml4ICsgXCItXCIgKyB0cmFuc2Zvcm07XG4gIGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1wcm9wZXJ0eVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLW5hbWVcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgZW5kOiB0cmFuc2l0aW9uRW5kLFxuICBwcm9wZXJ0eTogdHJhbnNpdGlvblByb3BlcnR5LFxuICB0aW1pbmc6IHRyYW5zaXRpb25UaW1pbmcsXG4gIGRlbGF5OiB0cmFuc2l0aW9uRGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICB2YXIgdmVuZG9yTWFwID0ge1xuICAgIE86IGZ1bmN0aW9uIE8oZSkge1xuICAgICAgcmV0dXJuIFwib1wiICsgZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgTW96OiBmdW5jdGlvbiBNb3ooZSkge1xuICAgICAgcmV0dXJuIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIFdlYmtpdDogZnVuY3Rpb24gV2Via2l0KGUpIHtcbiAgICAgIHJldHVybiBcIndlYmtpdFwiICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gXCJNU1wiICsgZTtcbiAgICB9XG4gIH07XG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcbiAgdmFyIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArIFwiVHJhbnNpdGlvblByb3BlcnR5XCIgaW4gc3R5bGUpIHtcbiAgICAgIHByZWZpeCA9IFwiLVwiICsgdmVuZG9yLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0cmFuc2l0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ1RyYW5zaXRpb25FbmQnKTtcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdBbmltYXRpb25FbmQnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdHJhbnNpdGlvbkVuZCAmJiAndHJhbnNpdGlvblByb3BlcnR5JyBpbiBzdHlsZSkgdHJhbnNpdGlvbkVuZCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgaWYgKCFhbmltYXRpb25FbmQgJiYgJ2FuaW1hdGlvbk5hbWUnIGluIHN0eWxlKSBhbmltYXRpb25FbmQgPSAnYW5pbWF0aW9uZW5kJztcbiAgc3R5bGUgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLFxuICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQsXG4gICAgcHJlZml4OiBwcmVmaXhcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplO1xudmFyIHJIeXBoZW4gPSAvLSguKS9nO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJIeXBoZW4sIGZ1bmN0aW9uIChfLCBjaHIpIHtcbiAgICByZXR1cm4gY2hyLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplU3R5bGVOYW1lO1xuXG52YXIgX2NhbWVsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYW1lbGl6ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9jYW1lbGl6ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2NhbWVsaXplLmRlZmF1bHQpKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZTtcbnZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIF9oeXBoZW5hdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGUuZGVmYXVsdCkoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbGJhclNpemU7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2luRE9NXCIpKTtcblxudmFyIHNpemU7XG5cbmZ1bmN0aW9uIHNjcm9sbGJhclNpemUocmVjYWxjKSB7XG4gIGlmICghc2l6ZSAmJiBzaXplICE9PSAwIHx8IHJlY2FsYykge1xuICAgIGlmIChfaW5ET00uZGVmYXVsdCkge1xuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaXplO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8vIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC92V3g4Vi9cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTYwMzE5NS9mdWxsLWxpc3Qtb2YtamF2YXNjcmlwdC1rZXljb2Rlc1xuXG4vKipcbiAqIENvbmVuaWVuY2UgbWV0aG9kIHJldHVybnMgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgZ2l2ZW4ga2V5TmFtZSBvciBrZXlDb2RlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGtleUNvZGUoc2VhcmNoSW5wdXQpIHtcbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIGlmIChzZWFyY2hJbnB1dCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSB7XG4gICAgdmFyIGhhc0tleUNvZGUgPSBzZWFyY2hJbnB1dC53aGljaCB8fCBzZWFyY2hJbnB1dC5rZXlDb2RlIHx8IHNlYXJjaElucHV0LmNoYXJDb2RlXG4gICAgaWYgKGhhc0tleUNvZGUpIHNlYXJjaElucHV0ID0gaGFzS2V5Q29kZVxuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkgcmV0dXJuIG5hbWVzW3NlYXJjaElucHV0XVxuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoY2FzdCB0byBzdHJpbmcpXG4gIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoSW5wdXQpXG5cbiAgLy8gY2hlY2sgY29kZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gY2hlY2sgYWxpYXNlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIHdlaXJkIGNoYXJhY3Rlcj9cbiAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDEpIHJldHVybiBzZWFyY2guY2hhckNvZGVBdCgwKVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhIGtleWJvYXJkIGV2ZW50IHdpdGggYSBnaXZlbiBrZXlDb2RlIG9yIGtleU5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgS2V5Ym9hcmQgZXZlbnQgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5rZXlDb2RlLmlzRXZlbnRLZXkgPSBmdW5jdGlvbiBpc0V2ZW50S2V5KGV2ZW50LCBuYW1lT3JDb2RlKSB7XG4gIGlmIChldmVudCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIGV2ZW50KSB7XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlXG4gICAgaWYgKGtleUNvZGUgPT09IG51bGwgfHwga2V5Q29kZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNoZWNrIGNvZGVzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgXG4gICAgICAvLyBjaGVjayBhbGlhc2VzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5hbWVPckNvZGUgPT09IGtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBrZXlDb2RlO1xuXG4vKipcbiAqIEdldCBieSBuYW1lXG4gKlxuICogICBleHBvcnRzLmNvZGVbJ2VudGVyJ10gLy8gPT4gMTNcbiAqL1xuXG52YXIgY29kZXMgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLmNvZGVzID0ge1xuICAnYmFja3NwYWNlJzogOCxcbiAgJ3RhYic6IDksXG4gICdlbnRlcic6IDEzLFxuICAnc2hpZnQnOiAxNixcbiAgJ2N0cmwnOiAxNyxcbiAgJ2FsdCc6IDE4LFxuICAncGF1c2UvYnJlYWsnOiAxOSxcbiAgJ2NhcHMgbG9jayc6IDIwLFxuICAnZXNjJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZSB1cCc6IDMzLFxuICAncGFnZSBkb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnQnOiAzNyxcbiAgJ3VwJzogMzgsXG4gICdyaWdodCc6IDM5LFxuICAnZG93bic6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJ2NvbW1hbmQnOiA5MSxcbiAgJ2xlZnQgY29tbWFuZCc6IDkxLFxuICAncmlnaHQgY29tbWFuZCc6IDkzLFxuICAnbnVtcGFkIConOiAxMDYsXG4gICdudW1wYWQgKyc6IDEwNyxcbiAgJ251bXBhZCAtJzogMTA5LFxuICAnbnVtcGFkIC4nOiAxMTAsXG4gICdudW1wYWQgLyc6IDExMSxcbiAgJ251bSBsb2NrJzogMTQ0LFxuICAnc2Nyb2xsIGxvY2snOiAxNDUsXG4gICdteSBjb21wdXRlcic6IDE4MixcbiAgJ215IGNhbGN1bGF0b3InOiAxODMsXG4gICc7JzogMTg2LFxuICAnPSc6IDE4NyxcbiAgJywnOiAxODgsXG4gICctJzogMTg5LFxuICAnLic6IDE5MCxcbiAgJy8nOiAxOTEsXG4gICdgJzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ1xcXFwnOiAyMjAsXG4gICddJzogMjIxLFxuICBcIidcIjogMjIyXG59XG5cbi8vIEhlbHBlciBhbGlhc2VzXG5cbnZhciBhbGlhc2VzID0gZXhwb3J0cy5hbGlhc2VzID0ge1xuICAnd2luZG93cyc6IDkxLFxuICAn4oenJzogMTYsXG4gICfijKUnOiAxOCxcbiAgJ+KMgyc6IDE3LFxuICAn4oyYJzogOTEsXG4gICdjdGwnOiAxNyxcbiAgJ2NvbnRyb2wnOiAxNyxcbiAgJ29wdGlvbic6IDE4LFxuICAncGF1c2UnOiAxOSxcbiAgJ2JyZWFrJzogMTksXG4gICdjYXBzJzogMjAsXG4gICdyZXR1cm4nOiAxMyxcbiAgJ2VzY2FwZSc6IDI3LFxuICAnc3BjJzogMzIsXG4gICdzcGFjZWJhcic6IDMyLFxuICAncGd1cCc6IDMzLFxuICAncGdkbic6IDM0LFxuICAnaW5zJzogNDUsXG4gICdkZWwnOiA0NixcbiAgJ2NtZCc6IDkxXG59XG5cbi8qIVxuICogUHJvZ3JhbWF0aWNhbGx5IGFkZCB0aGUgZm9sbG93aW5nXG4gKi9cblxuLy8gbG93ZXIgY2FzZSBjaGFyc1xuZm9yIChpID0gOTc7IGkgPCAxMjM7IGkrKykgY29kZXNbU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpIC0gMzJcblxuLy8gbnVtYmVyc1xuZm9yICh2YXIgaSA9IDQ4OyBpIDwgNTg7IGkrKykgY29kZXNbaSAtIDQ4XSA9IGlcblxuLy8gZnVuY3Rpb24ga2V5c1xuZm9yIChpID0gMTsgaSA8IDEzOyBpKyspIGNvZGVzWydmJytpXSA9IGkgKyAxMTFcblxuLy8gbnVtcGFkIGtleXNcbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBjb2Rlc1snbnVtcGFkICcraV0gPSBpICsgOTZcblxuLyoqXG4gKiBHZXQgYnkgY29kZVxuICpcbiAqICAgZXhwb3J0cy5uYW1lWzEzXSAvLyA9PiAnRW50ZXInXG4gKi9cblxudmFyIG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IGV4cG9ydHMudGl0bGUgPSB7fSAvLyB0aXRsZSBmb3IgYmFja3dhcmQgY29tcGF0XG5cbi8vIENyZWF0ZSByZXZlcnNlIG1hcHBpbmdcbmZvciAoaSBpbiBjb2RlcykgbmFtZXNbY29kZXNbaV1dID0gaVxuXG4vLyBBZGQgYWxpYXNlc1xuZm9yICh2YXIgYWxpYXMgaW4gYWxpYXNlcykge1xuICBjb2Rlc1thbGlhc10gPSBhbGlhc2VzW2FsaWFzXVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWxsO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gYWxsKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsaWRhdG9ycyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbGlkYXRvcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxQcm9wVHlwZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgdmFsaWRhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGVycm9yID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGFsbFByb3BUeXBlcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb3BWYWx1ZSk7XG5cbiAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBSZWFjdEVsZW1lbnQgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LiBZb3UgY2FuIHVzdWFsbHkgb2J0YWluIGEgUmVhY3RDb21wb25lbnQgb3IgRE9NRWxlbWVudCAnICsgJ2Zyb20gYSBSZWFjdEVsZW1lbnQgYnkgYXR0YWNoaW5nIGEgcmVmIHRvIGl0LicpO1xuICB9XG5cbiAgaWYgKChwcm9wVHlwZSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BWYWx1ZS5yZW5kZXIgIT09ICdmdW5jdGlvbicpICYmIHByb3BWYWx1ZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgcHJvcFZhbHVlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKHZhbGlkYXRlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlcHJlY2F0ZWQ7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgd2FybmVkID0ge307XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWQodmFsaWRhdG9yLCByZWFzb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPSBudWxsKSB7XG4gICAgICB2YXIgbWVzc2FnZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnLicgKyBwcm9wTmFtZTtcblxuICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSh3YXJuZWRbbWVzc2FnZUtleV0sICdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZVNhZmUgKyAnYCBvZiAnICsgKCdgJyArIGNvbXBvbmVudE5hbWVTYWZlICsgJ2AgaXMgZGVwcmVjYXRlZC4gJyArIHJlYXNvbiArICcuJykpO1xuXG4gICAgICB3YXJuZWRbbWVzc2FnZUtleV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDUgPyBfbGVuIC0gNSA6IDApLCBfa2V5ID0gNTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gNV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWVdLmNvbmNhdChhcmdzKSk7XG4gIH07XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5mdW5jdGlvbiBfcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuXG5kZXByZWNhdGVkLl9yZXNldFdhcm5lZCA9IF9yZXNldFdhcm5lZDtcbi8qIGVzbGludC1lbmFibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNSZXF1aXJlZEZvckExMXk7XG5mdW5jdGlvbiBpc1JlcXVpcmVkRm9yQTExeSh2YWxpZGF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZVNhZmUgKyAnYCBpcyByZXF1aXJlZCB0byBtYWtlICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZVNhZmUgKyAnYCBhY2Nlc3NpYmxlIGZvciB1c2VycyBvZiBhc3Npc3RpdmUgJykgKyAndGVjaG5vbG9naWVzIHN1Y2ggYXMgc2NyZWVuIHJlYWRlcnMuJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNSA/IF9sZW4gLSA1IDogMCksIF9rZXkgPSA1OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA1XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yLmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImltcG9ydCBfT2JqZWN0JGFzc2lnbiBmcm9tIFwiLi4vLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBfT2JqZWN0JGFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgX09iamVjdCRjcmVhdGUgZnJvbSBcIi4uLy4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gX09iamVjdCRjcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJpbXBvcnQgX09iamVjdCRrZXlzIGZyb20gXCIuLi8uLi9jb3JlLWpzL29iamVjdC9rZXlzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgdmFyIHNvdXJjZUtleXMgPSBfT2JqZWN0JGtleXMoc291cmNlKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCB2YXIgU2l6ZSA9IHtcbiAgTEFSR0U6ICdsYXJnZScsXG4gIFNNQUxMOiAnc21hbGwnLFxuICBYU01BTEw6ICd4c21hbGwnXG59O1xuZXhwb3J0IHZhciBTSVpFX01BUCA9IHtcbiAgbGFyZ2U6ICdsZycsXG4gIG1lZGl1bTogJ21kJyxcbiAgc21hbGw6ICdzbScsXG4gIHhzbWFsbDogJ3hzJyxcbiAgbGc6ICdsZycsXG4gIG1kOiAnbWQnLFxuICBzbTogJ3NtJyxcbiAgeHM6ICd4cydcbn07XG5leHBvcnQgdmFyIERFVklDRV9TSVpFUyA9IFsnbGcnLCAnbWQnLCAnc20nLCAneHMnXTtcbmV4cG9ydCB2YXIgU3RhdGUgPSB7XG4gIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgV0FSTklORzogJ3dhcm5pbmcnLFxuICBEQU5HRVI6ICdkYW5nZXInLFxuICBJTkZPOiAnaW5mbydcbn07XG5leHBvcnQgdmFyIFN0eWxlID0ge1xuICBERUZBVUxUOiAnZGVmYXVsdCcsXG4gIFBSSU1BUlk6ICdwcmltYXJ5JyxcbiAgTElOSzogJ2xpbmsnLFxuICBJTlZFUlNFOiAnaW52ZXJzZSdcbn07IiwiaW1wb3J0IF9PYmplY3QkZW50cmllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9lbnRyaWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gVE9ETzogVGhlIHB1YmxpY2x5IGV4cG9zZWQgcGFydHMgb2YgdGhpcyBzaG91bGQgYmUgaW4gbGliL0Jvb3RzdHJhcFV0aWxzLlxuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFNJWkVfTUFQIH0gZnJvbSAnLi9TdHlsZUNvbmZpZyc7XG5cbmZ1bmN0aW9uIGN1cnJ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBsYXN0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHR5cGVvZiBsYXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHZvaWQgMCwgYXJncy5jb25jYXQoW0NvbXBvbmVudF0pKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4KHByb3BzLCB2YXJpYW50KSB7XG4gIHZhciBic0NsYXNzID0gKHByb3BzLmJzQ2xhc3MgfHwgJycpLnRyaW0oKTtcbiAgIShic0NsYXNzICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBgYnNDbGFzc2AgcHJvcCBpcyByZXF1aXJlZCBmb3IgdGhpcyBjb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBic0NsYXNzICsgKHZhcmlhbnQgPyBcIi1cIiArIHZhcmlhbnQgOiAnJyk7XG59XG5leHBvcnQgdmFyIGJzQ2xhc3MgPSBjdXJyeShmdW5jdGlvbiAoZGVmYXVsdENsYXNzLCBDb21wb25lbnQpIHtcbiAgdmFyIHByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXMgfHwgKENvbXBvbmVudC5wcm9wVHlwZXMgPSB7fSk7XG4gIHZhciBkZWZhdWx0UHJvcHMgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzIHx8IChDb21wb25lbnQuZGVmYXVsdFByb3BzID0ge30pO1xuICBwcm9wVHlwZXMuYnNDbGFzcyA9IFByb3BUeXBlcy5zdHJpbmc7XG4gIGRlZmF1bHRQcm9wcy5ic0NsYXNzID0gZGVmYXVsdENsYXNzO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5leHBvcnQgdmFyIGJzU3R5bGVzID0gY3VycnkoZnVuY3Rpb24gKHN0eWxlcywgZGVmYXVsdFN0eWxlLCBDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBkZWZhdWx0U3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlO1xuICAgIGRlZmF1bHRTdHlsZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBleGlzdGluZyA9IENvbXBvbmVudC5TVFlMRVMgfHwgW107XG4gIHZhciBwcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzIHx8IHt9O1xuICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICBpZiAoZXhpc3RpbmcuaW5kZXhPZihzdHlsZSkgPT09IC0xKSB7XG4gICAgICBleGlzdGluZy5wdXNoKHN0eWxlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgcHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2YoZXhpc3RpbmcpOyAvLyBleHBvc2UgdGhlIHZhbHVlcyBvbiB0aGUgcHJvcFR5cGUgZnVuY3Rpb24gZm9yIGRvY3VtZW50YXRpb25cblxuICBDb21wb25lbnQuU1RZTEVTID0gZXhpc3Rpbmc7XG4gIHByb3BUeXBlLl92YWx1ZXMgPSBleGlzdGluZztcbiAgQ29tcG9uZW50LnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBwcm9wVHlwZXMsIHtcbiAgICBic1N0eWxlOiBwcm9wVHlwZVxuICB9KTtcblxuICBpZiAoZGVmYXVsdFN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcyB8fCAoQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IHt9KTtcbiAgICBkZWZhdWx0UHJvcHMuYnNTdHlsZSA9IGRlZmF1bHRTdHlsZTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59KTtcbmV4cG9ydCB2YXIgYnNTaXplcyA9IGN1cnJ5KGZ1bmN0aW9uIChzaXplcywgZGVmYXVsdFNpemUsIENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIGRlZmF1bHRTaXplICE9PSAnc3RyaW5nJykge1xuICAgIENvbXBvbmVudCA9IGRlZmF1bHRTaXplO1xuICAgIGRlZmF1bHRTaXplID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGV4aXN0aW5nID0gQ29tcG9uZW50LlNJWkVTIHx8IFtdO1xuICB2YXIgcHJvcFR5cGVzID0gQ29tcG9uZW50LnByb3BUeXBlcyB8fCB7fTtcbiAgc2l6ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgIGlmIChleGlzdGluZy5pbmRleE9mKHNpemUpID09PSAtMSkge1xuICAgICAgZXhpc3RpbmcucHVzaChzaXplKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgdmFsdWVzID0gW107XG4gIGV4aXN0aW5nLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIgbWFwcGVkU2l6ZSA9IFNJWkVfTUFQW3NpemVdO1xuXG4gICAgaWYgKG1hcHBlZFNpemUgJiYgbWFwcGVkU2l6ZSAhPT0gc2l6ZSkge1xuICAgICAgdmFsdWVzLnB1c2gobWFwcGVkU2l6ZSk7XG4gICAgfVxuXG4gICAgdmFsdWVzLnB1c2goc2l6ZSk7XG4gIH0pO1xuICB2YXIgcHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2YodmFsdWVzKTtcbiAgcHJvcFR5cGUuX3ZhbHVlcyA9IHZhbHVlczsgLy8gZXhwb3NlIHRoZSB2YWx1ZXMgb24gdGhlIHByb3BUeXBlIGZ1bmN0aW9uIGZvciBkb2N1bWVudGF0aW9uXG5cbiAgQ29tcG9uZW50LlNJWkVTID0gZXhpc3Rpbmc7XG4gIENvbXBvbmVudC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgcHJvcFR5cGVzLCB7XG4gICAgYnNTaXplOiBwcm9wVHlwZVxuICB9KTtcblxuICBpZiAoZGVmYXVsdFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghQ29tcG9uZW50LmRlZmF1bHRQcm9wcykge1xuICAgICAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIENvbXBvbmVudC5kZWZhdWx0UHJvcHMuYnNTaXplID0gZGVmYXVsdFNpemU7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xhc3NTZXQocHJvcHMpIHtcbiAgdmFyIF9jbGFzc2VzO1xuXG4gIHZhciBjbGFzc2VzID0gKF9jbGFzc2VzID0ge30sIF9jbGFzc2VzW3ByZWZpeChwcm9wcyldID0gdHJ1ZSwgX2NsYXNzZXMpO1xuXG4gIGlmIChwcm9wcy5ic1NpemUpIHtcbiAgICB2YXIgYnNTaXplID0gU0laRV9NQVBbcHJvcHMuYnNTaXplXSB8fCBwcm9wcy5ic1NpemU7XG4gICAgY2xhc3Nlc1twcmVmaXgocHJvcHMsIGJzU2l6ZSldID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9wcy5ic1N0eWxlKSB7XG4gICAgY2xhc3Nlc1twcmVmaXgocHJvcHMsIHByb3BzLmJzU3R5bGUpXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuZnVuY3Rpb24gZ2V0QnNQcm9wcyhwcm9wcykge1xuICByZXR1cm4ge1xuICAgIGJzQ2xhc3M6IHByb3BzLmJzQ2xhc3MsXG4gICAgYnNTaXplOiBwcm9wcy5ic1NpemUsXG4gICAgYnNTdHlsZTogcHJvcHMuYnNTdHlsZSxcbiAgICBic1JvbGU6IHByb3BzLmJzUm9sZVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0JzUHJvcChwcm9wTmFtZSkge1xuICByZXR1cm4gcHJvcE5hbWUgPT09ICdic0NsYXNzJyB8fCBwcm9wTmFtZSA9PT0gJ2JzU2l6ZScgfHwgcHJvcE5hbWUgPT09ICdic1N0eWxlJyB8fCBwcm9wTmFtZSA9PT0gJ2JzUm9sZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdEJzUHJvcHMocHJvcHMpIHtcbiAgdmFyIGVsZW1lbnRQcm9wcyA9IHt9O1xuXG4gIF9PYmplY3QkZW50cmllcyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcm9wTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgIHByb3BWYWx1ZSA9IF9yZWZbMV07XG5cbiAgICBpZiAoIWlzQnNQcm9wKHByb3BOYW1lKSkge1xuICAgICAgZWxlbWVudFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBbZ2V0QnNQcm9wcyhwcm9wcyksIGVsZW1lbnRQcm9wc107XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRCc1Byb3BzQW5kT21pdChwcm9wcywgb21pdHRlZFByb3BOYW1lcykge1xuICB2YXIgaXNPbWl0dGVkUHJvcCA9IHt9O1xuICBvbWl0dGVkUHJvcE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgaXNPbWl0dGVkUHJvcFtwcm9wTmFtZV0gPSB0cnVlO1xuICB9KTtcbiAgdmFyIGVsZW1lbnRQcm9wcyA9IHt9O1xuXG4gIF9PYmplY3QkZW50cmllcyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBfcmVmMlswXSxcbiAgICAgICAgcHJvcFZhbHVlID0gX3JlZjJbMV07XG5cbiAgICBpZiAoIWlzQnNQcm9wKHByb3BOYW1lKSAmJiAhaXNPbWl0dGVkUHJvcFtwcm9wTmFtZV0pIHtcbiAgICAgIGVsZW1lbnRQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gW2dldEJzUHJvcHMocHJvcHMpLCBlbGVtZW50UHJvcHNdO1xufVxuLyoqXG4gKiBBZGQgYSBzdHlsZSB2YXJpYW50IHRvIGEgQ29tcG9uZW50LiBNdXRhdGVzIHRoZSBwcm9wVHlwZXMgb2YgdGhlIGNvbXBvbmVudFxuICogaW4gb3JkZXIgdG8gdmFsaWRhdGUgdGhlIG5ldyB2YXJpYW50LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRTdHlsZShDb21wb25lbnQpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZVZhcmlhbnQgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHN0eWxlVmFyaWFudFtfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGJzU3R5bGVzKHN0eWxlVmFyaWFudCkoQ29tcG9uZW50KTtcbn1cbmV4cG9ydCB2YXIgX2N1cnJ5ID0gY3Vycnk7IiwiLy8gVE9ETzogVGhpcyBtb2R1bGUgc2hvdWxkIGJlIEVsZW1lbnRDaGlsZHJlbiwgYW5kIHNob3VsZCB1c2UgbmFtZWQgZXhwb3J0cy5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgbWFwcyBvdmVyIGNoaWxkcmVuIHRoYXQgYXJlIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICpcbiAqIFRoZSBtYXBGdW5jdGlvbiBwcm92aWRlZCBpbmRleCB3aWxsIGJlIG5vcm1hbGlzZWQgdG8gdGhlIGNvbXBvbmVudHMgbWFwcGVkLFxuICogc28gYW4gaW52YWxpZCBjb21wb25lbnQgd291bGQgbm90IGluY3JlYXNlIHRoZSBpbmRleC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYy5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqL1xuXG5mdW5jdGlvbiBtYXAoY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKTtcbiAgfSk7XG59XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQgd2l0aCB0aGUgaW5kZXggcmVmbGVjdGluZyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMuXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgY29udGV4dC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZvckVhY2goY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspO1xuICB9KTtcbn1cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBcInZhbGlkIGNvbXBvbmVudHNcIiBpbiB0aGUgQ2hpbGRyZW4gY29udGFpbmVyLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvdW50KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSAwO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICsrcmVzdWx0O1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogRmluZHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgaXRlcmF0ZXMgb3ZlciBjaGlsZHJlbiB0aGF0IGFyZSBcInZhbGlkIGNvbXBvbmVudHNcIi5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZCB3aXRoIHRoZSBpbmRleCByZWZsZWN0aW5nIHRoZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBcInZhbGlkIGNvbXBvbmVudHNcIi5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYy5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jLlxuICogQHJldHVybnMge2FycmF5fSBvZiBjaGlsZHJlbiB0aGF0IG1lZXQgdGhlIGZ1bmMgcmV0dXJuIHN0YXRlbWVudFxuICovXG5cblxuZnVuY3Rpb24gZmlsdGVyKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKSkge1xuICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZpbmQoY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdDtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKykpIHtcbiAgICAgIHJlc3VsdCA9IGNoaWxkO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzb21lKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKykpIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBtYXA6IG1hcCxcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgY291bnQ6IGNvdW50LFxuICBmaW5kOiBmaW5kLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgZXZlcnk6IGV2ZXJ5LFxuICBzb21lOiBzb21lLFxuICB0b0FycmF5OiB0b0FycmF5XG59OyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInO1xuaW1wb3J0IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4gZnJvbSAnLi9WYWxpZENvbXBvbmVudENoaWxkcmVuJztcbnZhciBpZFByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pO1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlZElkKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLmdlbmVyYXRlQ2hpbGRJZCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgZXJyb3IgPSBpZFByb3BUeXBlLmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuXG4gICAgICBpZiAoIWVycm9yICYmICFwcm9wcy5pZCkge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcIkluIG9yZGVyIHRvIHByb3Blcmx5IGluaXRpYWxpemUgdGhlIFwiICsgbmFtZSArIFwiIGluIGEgd2F5IHRoYXQgaXMgYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzIFwiICsgKFwiKHN1Y2ggYXMgc2NyZWVuIHJlYWRlcnMpIGFuIGBpZGAgb3IgYSBgZ2VuZXJhdGVDaGlsZElkYCBwcm9wIHRvIFwiICsgbmFtZSArIFwiIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXJyb3I7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZWRSb2xlcygpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCByb2xlcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHJvbGVzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50KSB7XG4gICAgdmFyIG1pc3Npbmc7XG4gICAgcm9sZXMuZXZlcnkoZnVuY3Rpb24gKHJvbGUpIHtcbiAgICAgIGlmICghVmFsaWRDb21wb25lbnRDaGlsZHJlbi5zb21lKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLmJzUm9sZSA9PT0gcm9sZTtcbiAgICAgIH0pKSB7XG4gICAgICAgIG1pc3NpbmcgPSByb2xlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgaWYgKG1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCIoY2hpbGRyZW4pIFwiICsgY29tcG9uZW50ICsgXCIgLSBNaXNzaW5nIGEgcmVxdWlyZWQgY2hpbGQgd2l0aCBic1JvbGU6IFwiICsgKG1pc3NpbmcgKyBcIi4gXCIgKyBjb21wb25lbnQgKyBcIiBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGNoaWxkIG9mIGVhY2ggb2YgXCIpICsgKFwidGhlIGZvbGxvd2luZyBic1JvbGVzOiBcIiArIHJvbGVzLmpvaW4oJywgJykpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXhjbHVzaXZlUm9sZXMoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcm9sZXMgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICByb2xlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudCkge1xuICAgIHZhciBkdXBsaWNhdGU7XG4gICAgcm9sZXMuZXZlcnkoZnVuY3Rpb24gKHJvbGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbldpdGhSb2xlID0gVmFsaWRDb21wb25lbnRDaGlsZHJlbi5maWx0ZXIocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQucHJvcHMuYnNSb2xlID09PSByb2xlO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjaGlsZHJlbldpdGhSb2xlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZHVwbGljYXRlID0gcm9sZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCIoY2hpbGRyZW4pIFwiICsgY29tcG9uZW50ICsgXCIgLSBEdXBsaWNhdGUgY2hpbGRyZW4gZGV0ZWN0ZWQgb2YgYnNSb2xlOiBcIiArIChkdXBsaWNhdGUgKyBcIi4gT25seSBvbmUgY2hpbGQgZWFjaCBhbGxvd2VkIHdpdGggdGhlIGZvbGxvd2luZyBcIikgKyAoXCJic1JvbGVzOiBcIiArIHJvbGVzLmpvaW4oJywgJykpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVuY29udHJvbGxhYmxlIH0gZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wc0FuZE9taXQgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5pbXBvcnQgeyBnZW5lcmF0ZWRJZCB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGFjY29yZGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYGFjY29yZGlvbmAgaXMgZW5hYmxlZCwgYGFjdGl2ZUtleWAgY29udHJvbHMgdGhlIHdoaWNoIGNoaWxkIGBQYW5lbGAgaXMgZXhwYW5kZWQuIGBhY3RpdmVLZXlgIHNob3VsZFxuICAgKiBtYXRjaCBhIGNoaWxkIFBhbmVsIGBldmVudEtleWAgcHJvcCBleGFjdGx5LlxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uU2VsZWN0XG4gICAqL1xuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIGNoaWxkIFBhbmVsIGNvbGxhcHNlIHN0YXRlIGNoYW5nZXMuIEl0J3MgY2FsbGVkIHdpdGggdGhlIG5leHQgZXhwYW5kZWQgYGFjdGl2ZUtleWBcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBhY3RpdmVLZXlcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQW4gSFRNTCByb2xlIGF0dHJpYnV0ZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGFuIGV2ZW50S2V5IGFuZCB0eXBlIGFuZCByZXR1cm5zIGFcbiAgICogdW5pcXVlIGlkIGZvciBlYWNoIFBhbmVsIGhlYWRpbmcgYW5kIFBhbmVsIENvbGxhcHNlLiBUaGUgZnVuY3Rpb24gX211c3RfIGJlIGEgcHVyZSBmdW5jdGlvbixcbiAgICogbWVhbmluZyBpdCBzaG91bGQgYWx3YXlzIHJldHVybiB0aGUgX3NhbWVfIGlkIGZvciB0aGUgc2FtZSBzZXQgb2YgaW5wdXRzLiBUaGUgZGVmYXVsdFxuICAgKiB2YWx1ZSByZXF1aXJlcyB0aGF0IGFuIGBpZGAgdG8gYmUgc2V0IGZvciB0aGUgUGFuZWxHcm91cC5cbiAgICpcbiAgICogVGhlIGB0eXBlYCBhcmd1bWVudCB3aWxsIGVpdGhlciBiZSBgXCJib2R5XCJgIG9yIGBcImhlYWRpbmdcImAuXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgKGV2ZW50S2V5LCB0eXBlKSA9PiBgJHt0aGlzLnByb3BzLmlkfS0ke3R5cGV9LSR7a2V5fWBcbiAgICovXG4gIGdlbmVyYXRlQ2hpbGRJZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEhUTUwgaWQgYXR0cmlidXRlLCByZXF1aXJlZCBpZiBubyBgZ2VuZXJhdGVDaGlsZElkYCBwcm9wXG4gICAqIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIGlkOiBnZW5lcmF0ZWRJZCgnUGFuZWxHcm91cCcpXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWNjb3JkaW9uOiBmYWxzZVxufTtcbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX3BhbmVsR3JvdXA6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZ2V0SWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhlYWRlclJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGFuZWxSb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueSxcbiAgICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmNcbiAgfSlcbn07XG5cbnZhciBQYW5lbEdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhbmVsR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhbmVsR3JvdXAoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3QgPSBmdW5jdGlvbiAoa2V5LCBleHBhbmRlZCwgZSkge1xuICAgICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uU2VsZWN0KGtleSwgZSk7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnByb3BzLmFjdGl2ZUtleSA9PT0ga2V5KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uU2VsZWN0KG51bGwsIGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGFuZWxHcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmVLZXkgPSBfdGhpcyRwcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIGFjY29yZGlvbiA9IF90aGlzJHByb3BzLmFjY29yZGlvbixcbiAgICAgICAgZ2VuZXJhdGVDaGlsZElkID0gX3RoaXMkcHJvcHMuZ2VuZXJhdGVDaGlsZElkLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkO1xuICAgIHZhciBnZXRJZCA9IG51bGw7XG5cbiAgICBpZiAoYWNjb3JkaW9uKSB7XG4gICAgICBnZXRJZCA9IGdlbmVyYXRlQ2hpbGRJZCB8fCBmdW5jdGlvbiAoa2V5LCB0eXBlKSB7XG4gICAgICAgIHJldHVybiBpZCA/IGlkICsgXCItXCIgKyB0eXBlICsgXCItXCIgKyBrZXkgOiBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgJGJzX3BhbmVsR3JvdXA6IF9leHRlbmRzKHtcbiAgICAgICAgZ2V0SWQ6IGdldElkLFxuICAgICAgICBoZWFkZXJSb2xlOiAndGFiJyxcbiAgICAgICAgcGFuZWxSb2xlOiAndGFicGFuZWwnXG4gICAgICB9LCBhY2NvcmRpb24gJiYge1xuICAgICAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICAgICAgb25Ub2dnbGU6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWNjb3JkaW9uID0gX3RoaXMkcHJvcHMyLmFjY29yZGlvbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJhY2NvcmRpb25cIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wc0FuZE9taXQgPSBzcGxpdEJzUHJvcHNBbmRPbWl0KHByb3BzLCBbJ29uU2VsZWN0JywgJ2FjdGl2ZUtleSddKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFsxXTtcblxuICAgIGlmIChhY2NvcmRpb24pIHtcbiAgICAgIGVsZW1lbnRQcm9wcy5yb2xlID0gZWxlbWVudFByb3BzLnJvbGUgfHwgJ3RhYmxpc3QnO1xuICAgIH1cblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSwgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBic1N0eWxlOiBjaGlsZC5wcm9wcy5ic1N0eWxlIHx8IGJzUHJvcHMuYnNTdHlsZVxuICAgICAgfSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbEdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbEdyb3VwLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuUGFuZWxHcm91cC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoYnNDbGFzcygncGFuZWwtZ3JvdXAnLCBQYW5lbEdyb3VwKSwge1xuICBhY3RpdmVLZXk6ICdvblNlbGVjdCdcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQYW5lbEdyb3VwIGZyb20gJy4vUGFuZWxHcm91cCc7XG5cbnZhciBBY2NvcmRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQWNjb3JkaW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBY2NvcmRpb24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFjY29yZGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQYW5lbEdyb3VwLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgYWNjb3JkaW9uOiB0cnVlXG4gICAgfSksIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBBY2NvcmRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbjsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGxhYmVsOiAnQ2xvc2UnXG59O1xuXG52YXIgQ2xvc2VCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2xvc2VCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENsb3NlQnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDbG9zZUJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBsYWJlbCA9IF90aGlzJHByb3BzLmxhYmVsLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgY2xhc3NOYW1lOiBcImNsb3NlXCIsXG4gICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICAgIH0sIFwiXFx4RDdcIiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgICB9LCBsYWJlbCkpO1xuICB9O1xuXG4gIHJldHVybiBDbG9zZUJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2xvc2VCdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2xvc2VCdXR0b24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VCdXR0b247IiwiaW1wb3J0IF9PYmplY3QkdmFsdWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGJzQ2xhc3MsIGJzU3R5bGVzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5pbXBvcnQgQ2xvc2VCdXR0b24gZnJvbSAnLi9DbG9zZUJ1dHRvbic7XG52YXIgcHJvcFR5cGVzID0ge1xuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLFxuICBjbG9zZUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2xvc2VMYWJlbDogJ0Nsb3NlIGFsZXJ0J1xufTtcblxudmFyIEFsZXJ0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEFsZXJ0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBbGVydCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQWxlcnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRGlzbWlzcyA9IF90aGlzJHByb3BzLm9uRGlzbWlzcyxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF90aGlzJHByb3BzLmNsb3NlTGFiZWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wib25EaXNtaXNzXCIsIFwiY2xvc2VMYWJlbFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgZGlzbWlzc2FibGUgPSAhIW9uRGlzbWlzcztcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2Rpc21pc3NhYmxlJyldID0gZGlzbWlzc2FibGUsIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcm9sZTogXCJhbGVydFwiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSwgZGlzbWlzc2FibGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgICAgb25DbGljazogb25EaXNtaXNzLFxuICAgICAgbGFiZWw6IGNsb3NlTGFiZWxcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBBbGVydDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQWxlcnQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQWxlcnQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNTdHlsZXMoX09iamVjdCR2YWx1ZXMoU3RhdGUpLCBTdGF0ZS5JTkZPLCBic0NsYXNzKCdhbGVydCcsIEFsZXJ0KSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJzsgLy8gVE9ETzogYHB1bGxSaWdodGAgZG9lc24ndCBiZWxvbmcgaGVyZS4gVGhlcmUncyBubyBzcGVjaWFsIGhhbmRsaW5nIGhlcmUuXG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHB1bGxSaWdodDogUHJvcFR5cGVzLmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwdWxsUmlnaHQ6IGZhbHNlXG59O1xuXG52YXIgQmFkZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQmFkZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJhZGdlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCYWRnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiBoYXNDb250ZW50KGNoaWxkcmVuKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZCB8fCBjaGlsZCA9PT0gMCkge1xuICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdWxsUmlnaHQgPSBfdGhpcyRwcm9wcy5wdWxsUmlnaHQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wicHVsbFJpZ2h0XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCB7XG4gICAgICAncHVsbC1yaWdodCc6IHB1bGxSaWdodCxcbiAgICAgIC8vIEhhY2sgZm9yIGNvbGxhcHNpbmcgb24gSUU4LlxuICAgICAgaGlkZGVuOiAhdGhpcy5oYXNDb250ZW50KGNoaWxkcmVuKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gQmFkZ2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJhZGdlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJhZGdlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2JhZGdlJywgQmFkZ2UpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZiAhPSBudWxsO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgIH1cblxuICAgIGlmIChhY2MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDaGFpbmVkRnVuY3Rpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIHRoaXMgaXMgc29ydCBvZiBzaWxseSBidXQgbmVlZGVkIGZvciBCdXR0b25cbiAgICovXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnYSdcbn07XG5cbmZ1bmN0aW9uIGlzVHJpdmlhbEhyZWYoaHJlZikge1xuICByZXR1cm4gIWhyZWYgfHwgaHJlZi50cmltKCkgPT09ICcjJztcbn1cbi8qKlxuICogVGhlcmUgYXJlIHNpdHVhdGlvbnMgZHVlIHRvIGJyb3dzZXIgcXVpcmtzIG9yIEJvb3RzdHJhcCBDU1Mgd2hlcmVcbiAqIGFuIGFuY2hvciB0YWcgaXMgbmVlZGVkLCB3aGVuIHNlbWFudGljYWxseSBhIGJ1dHRvbiB0YWcgaXMgdGhlXG4gKiBiZXR0ZXIgY2hvaWNlLiBTYWZlQW5jaG9yIGVuc3VyZXMgdGhhdCB3aGVuIGFuIGFuY2hvciBpcyB1c2VkIGxpa2UgYVxuICogYnV0dG9uIGl0cyBhY2Nlc3NpYmxlLiBJdCBhbHNvIGVtdWxhdGVzIGlucHV0IGBkaXNhYmxlZGAgYmVoYXZpb3IgZm9yXG4gKiBsaW5rcywgd2hpY2ggaXMgdXN1YWxseSBkZXNpcmFibGUgZm9yIEJ1dHRvbnMsIE5hdkl0ZW1zLCBNZW51SXRlbXMsIGV0Yy5cbiAqL1xuXG5cbnZhciBTYWZlQW5jaG9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFNhZmVBbmNob3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNhZmVBbmNob3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBfdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTYWZlQW5jaG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGhyZWYgPSBfdGhpcyRwcm9wcy5ocmVmLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljaztcblxuICAgIGlmIChkaXNhYmxlZCB8fCBpc1RyaXZpYWxIcmVmKGhyZWYpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMyLm9uS2V5RG93bixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiZGlzYWJsZWRcIiwgXCJvbktleURvd25cIl0pO1xuXG4gICAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgICAvLyBvdGhlcndpc2UsIHRoZSBjdXJzb3IgaW5jb3JyZWN0bHkgc3R5bGVkIChleGNlcHQgd2l0aCByb2xlPSdidXR0b24nKVxuXG4gICAgICBwcm9wcy5ocmVmID0gcHJvcHMuaHJlZiB8fCAnIyc7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xuICAgICAgcHJvcHMuc3R5bGUgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgICAgfSwgcHJvcHMuc3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgb25LZXlEb3duOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odGhpcy5oYW5kbGVLZXlEb3duLCBvbktleURvd24pXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTYWZlQW5jaG9yO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TYWZlQW5jaG9yLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblNhZmVBbmNob3IuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgU2FmZUFuY2hvcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgcmVuZGVycyBgc3BhbmAgaW5zdGVhZCBvZiBgYWBcbiAgICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIGBocmVmYCBhdHRyaWJ1dGUgZm9yIHRoZSBpbm5lciBgYWAgZWxlbWVudFxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogYHRpdGxlYCBhdHRyaWJ1dGUgZm9yIHRoZSBpbm5lciBgYWAgZWxlbWVudFxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBgdGFyZ2V0YCBhdHRyaWJ1dGUgZm9yIHRoZSBpbm5lciBgYWAgZWxlbWVudFxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZVxufTtcblxudmFyIEJyZWFkY3J1bWJJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyZWFkY3J1bWJJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcmVhZGNydW1iSXRlbSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJlYWRjcnVtYkl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZixcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgdGFyZ2V0ID0gX3RoaXMkcHJvcHMudGFyZ2V0LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFjdGl2ZVwiLCBcImhyZWZcIiwgXCJ0aXRsZVwiLCBcInRhcmdldFwiLCBcImNsYXNzTmFtZVwiXSk7IC8vIERvbid0IHRyeSB0byByZW5kZXIgdGhlc2UgcHJvcHMgb24gbm9uLWFjdGl2ZSA8c3Bhbj4uXG5cblxuICAgIHZhciBsaW5rUHJvcHMgPSB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwge1xuICAgICAgICBhY3RpdmU6IGFjdGl2ZVxuICAgICAgfSlcbiAgICB9LCBhY3RpdmUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBwcm9wcykgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFNhZmVBbmNob3IsIF9leHRlbmRzKHt9LCBwcm9wcywgbGlua1Byb3BzKSkpO1xuICB9O1xuXG4gIHJldHVybiBCcmVhZGNydW1iSXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJlYWRjcnVtYkl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQnJlYWRjcnVtYkl0ZW0uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQnJlYWRjcnVtYkl0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJyZWFkY3J1bWJJdGVtIGZyb20gJy4vQnJlYWRjcnVtYkl0ZW0nO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgQnJlYWRjcnVtYiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcmVhZGNydW1iLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcmVhZGNydW1iKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcmVhZGNydW1iLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwib2xcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcm9sZTogXCJuYXZpZ2F0aW9uXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogXCJicmVhZGNydW1ic1wiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyZWFkY3J1bWI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyZWFkY3J1bWIuSXRlbSA9IEJyZWFkY3J1bWJJdGVtO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnYnJlYWRjcnVtYicsIEJyZWFkY3J1bWIpOyIsImltcG9ydCBfT2JqZWN0JHZhbHVlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgYnNTaXplcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU2l6ZSwgU3RhdGUsIFN0eWxlIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBibG9jazogUHJvcFR5cGVzLmJvb2wsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgSFRNTCBidXR0b24gdHlwZSBhdHRyaWJ1dGVcbiAgICogQGRlZmF1bHRWYWx1ZSAnYnV0dG9uJ1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZTogZmFsc2UsXG4gIGJsb2NrOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG52YXIgQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXJBbmNob3IgPSBmdW5jdGlvbiByZW5kZXJBbmNob3IoZWxlbWVudFByb3BzLCBjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBlbGVtZW50UHJvcHMuZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJylcbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlckJ1dHRvbiA9IGZ1bmN0aW9uIHJlbmRlckJ1dHRvbihfcmVmLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBfcmVmLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJjb21wb25lbnRDbGFzc1wiXSk7XG5cbiAgICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50Q2xhc3MgfHwgJ2J1dHRvbic7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICB0eXBlOiBlbGVtZW50UHJvcHMudHlwZSB8fCAnYnV0dG9uJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wcy5ibG9jayxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhY3RpdmVcIiwgXCJibG9ja1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7XG4gICAgICBhY3RpdmU6IGFjdGl2ZVxuICAgIH0sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2Jsb2NrJyldID0gYmxvY2ssIF9leHRlbmRzMikpO1xuXG4gICAgdmFyIGZ1bGxDbGFzc05hbWUgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3Nlcyk7XG5cbiAgICBpZiAoZWxlbWVudFByb3BzLmhyZWYpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckFuY2hvcihlbGVtZW50UHJvcHMsIGZ1bGxDbGFzc05hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbmRlckJ1dHRvbihlbGVtZW50UHJvcHMsIGZ1bGxDbGFzc05hbWUpO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5CdXR0b24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnYnRuJywgYnNTaXplcyhbU2l6ZS5MQVJHRSwgU2l6ZS5TTUFMTCwgU2l6ZS5YU01BTExdLCBic1N0eWxlcyhfT2JqZWN0JHZhbHVlcyhTdGF0ZSkuY29uY2F0KFtTdHlsZS5ERUZBVUxULCBTdHlsZS5QUklNQVJZLCBTdHlsZS5MSU5LXSksIFN0eWxlLkRFRkFVTFQsIEJ1dHRvbikpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGFsbCBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIHZlcnRpY2FsOiBQcm9wVHlwZXMuYm9vbCxcbiAganVzdGlmaWVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzcGxheSBibG9jayBidXR0b25zOyBvbmx5IHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCB0aGUgXCJ2ZXJ0aWNhbFwiIHByb3AuXG4gICAqIEB0eXBlIHtib29sfVxuICAgKi9cbiAgYmxvY2s6IGFsbChQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgYmxvY2sgPSBfcmVmLmJsb2NrLFxuICAgICAgICB2ZXJ0aWNhbCA9IF9yZWYudmVydGljYWw7XG4gICAgcmV0dXJuIGJsb2NrICYmICF2ZXJ0aWNhbCA/IG5ldyBFcnJvcignYGJsb2NrYCByZXF1aXJlcyBgdmVydGljYWxgIHRvIGJlIHNldCB0byBoYXZlIGFueSBlZmZlY3QnKSA6IG51bGw7XG4gIH0pXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYmxvY2s6IGZhbHNlLFxuICBqdXN0aWZpZWQ6IGZhbHNlLFxuICB2ZXJ0aWNhbDogZmFsc2Vcbn07XG5cbnZhciBCdXR0b25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCdXR0b25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uR3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJ1dHRvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzLmJsb2NrLFxuICAgICAgICBqdXN0aWZpZWQgPSBfdGhpcyRwcm9wcy5qdXN0aWZpZWQsXG4gICAgICAgIHZlcnRpY2FsID0gX3RoaXMkcHJvcHMudmVydGljYWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYmxvY2tcIiwgXCJqdXN0aWZpZWRcIiwgXCJ2ZXJ0aWNhbFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzKV0gPSAhdmVydGljYWwsIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ3ZlcnRpY2FsJyldID0gdmVydGljYWwsIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2p1c3RpZmllZCcpXSA9IGp1c3RpZmllZCwgX2V4dGVuZHMyW3ByZWZpeChCdXR0b24uZGVmYXVsdFByb3BzLCAnYmxvY2snKV0gPSBibG9jaywgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbkdyb3VwLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJ1dHRvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2J0bi1ncm91cCcsIEJ1dHRvbkdyb3VwKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBCdXR0b25Ub29sYmFyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJ1dHRvblRvb2xiYXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJ1dHRvblRvb2xiYXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJ1dHRvblRvb2xiYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcm9sZTogXCJ0b29sYmFyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uVG9vbGJhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnYnRuLXRvb2xiYXInLCBCdXR0b25Ub29sYmFyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgQ2Fyb3VzZWxDYXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENhcm91c2VsQ2FwdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2Fyb3VzZWxDYXB0aW9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDYXJvdXNlbENhcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWxDYXB0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJvdXNlbENhcHRpb24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2Fyb3VzZWxDYXB0aW9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Nhcm91c2VsLWNhcHRpb24nLCBDYXJvdXNlbENhcHRpb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAnZG9tLWhlbHBlcnMvdHJhbnNpdGlvbic7XG52YXIgcHJvcFR5cGVzID0ge1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ3ByZXYnLCAnbmV4dCddKSxcbiAgb25BbmltYXRlT3V0RW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgYW5pbWF0ZUluOiBQcm9wVHlwZXMuYm9vbCxcbiAgYW5pbWF0ZU91dDogUHJvcFR5cGVzLmJvb2wsXG4gIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgYW5pbWF0ZUluOiBmYWxzZSxcbiAgYW5pbWF0ZU91dDogZmFsc2Vcbn07XG5cbnZhciBDYXJvdXNlbEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2Fyb3VzZWxJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJvdXNlbEl0ZW0ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVBbmltYXRlT3V0RW5kID0gX3RoaXMuaGFuZGxlQW5pbWF0ZU91dEVuZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRpcmVjdGlvbjogbnVsbFxuICAgIH07XG4gICAgX3RoaXMuaXNVbm1vdW50ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2Fyb3VzZWxJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHRoaXMucHJvcHMuYWN0aXZlICE9PSBuZXh0UHJvcHMuYWN0aXZlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0aGlzLnByb3BzLmFjdGl2ZTtcbiAgICB2YXIgcHJldkFjdGl2ZSA9IHByZXZQcm9wcy5hY3RpdmU7XG5cbiAgICBpZiAoIWFjdGl2ZSAmJiBwcmV2QWN0aXZlKSB7XG4gICAgICB0cmFuc2l0aW9uLmVuZChSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgdGhpcy5oYW5kbGVBbmltYXRlT3V0RW5kKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlICE9PSBwcmV2QWN0aXZlKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zdGFydEFuaW1hdGlvbigpO1xuICAgICAgfSwgMjApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQW5pbWF0ZU91dEVuZCA9IGZ1bmN0aW9uIGhhbmRsZUFuaW1hdGVPdXRFbmQoKSB7XG4gICAgaWYgKHRoaXMuaXNVbm1vdW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkFuaW1hdGVPdXRFbmQpIHtcbiAgICAgIHRoaXMucHJvcHMub25BbmltYXRlT3V0RW5kKHRoaXMucHJvcHMuaW5kZXgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbigpIHtcbiAgICBpZiAodGhpcy5pc1VubW91bnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGlyZWN0aW9uOiB0aGlzLnByb3BzLmRpcmVjdGlvbiA9PT0gJ3ByZXYnID8gJ3JpZ2h0JyA6ICdsZWZ0J1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgIGFuaW1hdGVJbiA9IF90aGlzJHByb3BzLmFuaW1hdGVJbixcbiAgICAgICAgYW5pbWF0ZU91dCA9IF90aGlzJHByb3BzLmFuaW1hdGVPdXQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiZGlyZWN0aW9uXCIsIFwiYWN0aXZlXCIsIFwiYW5pbWF0ZUluXCIsIFwiYW5pbWF0ZU91dFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICBkZWxldGUgcHJvcHMub25BbmltYXRlT3V0RW5kO1xuICAgIGRlbGV0ZSBwcm9wcy5pbmRleDtcbiAgICB2YXIgY2xhc3NlcyA9IHtcbiAgICAgIGl0ZW06IHRydWUsXG4gICAgICBhY3RpdmU6IGFjdGl2ZSAmJiAhYW5pbWF0ZUluIHx8IGFuaW1hdGVPdXRcbiAgICB9O1xuXG4gICAgaWYgKGRpcmVjdGlvbiAmJiBhY3RpdmUgJiYgYW5pbWF0ZUluKSB7XG4gICAgICBjbGFzc2VzW2RpcmVjdGlvbl0gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLmRpcmVjdGlvbiAmJiAoYW5pbWF0ZUluIHx8IGFuaW1hdGVPdXQpKSB7XG4gICAgICBjbGFzc2VzW3RoaXMuc3RhdGUuZGlyZWN0aW9uXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWxJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJvdXNlbEl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2Fyb3VzZWxJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENhcm91c2VsSXRlbTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQW4gaWNvbiBuYW1lIHdpdGhvdXQgXCJnbHlwaGljb24tXCIgcHJlZml4LiBTZWUgZS5nLiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9jb21wb25lbnRzLyNnbHlwaGljb25zXG4gICAqL1xuICBnbHlwaDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG52YXIgR2x5cGhpY29uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEdseXBoaWNvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gR2x5cGhpY29uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBHbHlwaGljb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGdseXBoID0gX3RoaXMkcHJvcHMuZ2x5cGgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiZ2x5cGhcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgZ2x5cGgpXSA9IHRydWUsIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBHbHlwaGljb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkdseXBoaWNvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdnbHlwaGljb24nLCBHbHlwaGljb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBDYXJvdXNlbENhcHRpb24gZnJvbSAnLi9DYXJvdXNlbENhcHRpb24nO1xuaW1wb3J0IENhcm91c2VsSXRlbSBmcm9tICcuL0Nhcm91c2VsSXRlbSc7XG5pbXBvcnQgR2x5cGhpY29uIGZyb20gJy4vR2x5cGhpY29uJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHNBbmRPbWl0IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nOyAvLyBUT0RPOiBgc2xpZGVgIHNob3VsZCBiZSBgYW5pbWF0ZWAuXG4vLyBUT0RPOiBVc2UgdW5jb250cm9sbGFibGUuXG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHNsaWRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW5kaWNhdG9yczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgb2YgdGltZSB0byBkZWxheSBiZXR3ZWVuIGF1dG9tYXRpY2FsbHkgY3ljbGluZyBhbiBpdGVtLlxuICAgKiBJZiBgbnVsbGAsIGNhcm91c2VsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgY3ljbGUuXG4gICAqL1xuICBpbnRlcnZhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgY29udHJvbHM6IFByb3BUeXBlcy5ib29sLFxuICBwYXVzZU9uSG92ZXI6IFByb3BUeXBlcy5ib29sLFxuICB3cmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYWN0aXZlIGl0ZW0gY2hhbmdlcy5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50S2V5OiBhbnksID9ldmVudDogT2JqZWN0KSA9PiBhbnlcbiAgICogYGBgXG4gICAqXG4gICAqIElmIHRoaXMgY2FsbGJhY2sgdGFrZXMgdHdvIG9yIG1vcmUgYXJndW1lbnRzLCB0aGUgc2Vjb25kIGFyZ3VtZW50IHdpbGxcbiAgICogYmUgYSBwZXJzaXN0ZWQgZXZlbnQgb2JqZWN0IHdpdGggYGRpcmVjdGlvbmAgc2V0IHRvIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIHRyYW5zaXRpb24uXG4gICAqL1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2xpZGVFbmQ6IFByb3BUeXBlcy5mdW5jLFxuICBhY3RpdmVJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZGVmYXVsdEFjdGl2ZUluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ3ByZXYnLCAnbmV4dCddKSxcbiAgcHJldkljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBMYWJlbCBzaG93biB0byBzY3JlZW4gcmVhZGVycyBvbmx5LCBjYW4gYmUgdXNlZCB0byBzaG93IHRoZSBwcmV2aW91cyBlbGVtZW50XG4gICAqIGluIHRoZSBjYXJvdXNlbC5cbiAgICogU2V0IHRvIG51bGwgdG8gZGVhY3RpdmF0ZS5cbiAgICovXG4gIHByZXZMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmV4dEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBMYWJlbCBzaG93biB0byBzY3JlZW4gcmVhZGVycyBvbmx5LCBjYW4gYmUgdXNlZCB0byBzaG93IHRoZSBuZXh0IGVsZW1lbnRcbiAgICogaW4gdGhlIGNhcm91c2VsLlxuICAgKiBTZXQgdG8gbnVsbCB0byBkZWFjdGl2YXRlLlxuICAgKi9cbiAgbmV4dExhYmVsOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc2xpZGU6IHRydWUsXG4gIGludGVydmFsOiA1MDAwLFxuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIHdyYXA6IHRydWUsXG4gIGluZGljYXRvcnM6IHRydWUsXG4gIGNvbnRyb2xzOiB0cnVlLFxuICBwcmV2SWNvbjogUmVhY3QuY3JlYXRlRWxlbWVudChHbHlwaGljb24sIHtcbiAgICBnbHlwaDogXCJjaGV2cm9uLWxlZnRcIlxuICB9KSxcbiAgcHJldkxhYmVsOiAnUHJldmlvdXMnLFxuICBuZXh0SWNvbjogUmVhY3QuY3JlYXRlRWxlbWVudChHbHlwaGljb24sIHtcbiAgICBnbHlwaDogXCJjaGV2cm9uLXJpZ2h0XCJcbiAgfSksXG4gIG5leHRMYWJlbDogJ05leHQnXG59O1xuXG52YXIgQ2Fyb3VzZWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2Fyb3VzZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhcm91c2VsKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdmVyID0gX3RoaXMuaGFuZGxlTW91c2VPdmVyLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZU1vdXNlT3V0ID0gX3RoaXMuaGFuZGxlTW91c2VPdXQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlUHJldiA9IF90aGlzLmhhbmRsZVByZXYuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlTmV4dCA9IF90aGlzLmhhbmRsZU5leHQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlSXRlbUFuaW1hdGVPdXRFbmQgPSBfdGhpcy5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICB2YXIgZGVmYXVsdEFjdGl2ZUluZGV4ID0gcHJvcHMuZGVmYXVsdEFjdGl2ZUluZGV4O1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgYWN0aXZlSW5kZXg6IGRlZmF1bHRBY3RpdmVJbmRleCAhPSBudWxsID8gZGVmYXVsdEFjdGl2ZUluZGV4IDogMCxcbiAgICAgIHByZXZpb3VzQWN0aXZlSW5kZXg6IG51bGwsXG4gICAgICBkaXJlY3Rpb246IG51bGxcbiAgICB9O1xuICAgIF90aGlzLmlzVW5tb3VudGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLndhaXRGb3JOZXh0KCk7XG4gIH07XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0QWN0aXZlSW5kZXgoKTtcblxuICAgIGlmIChuZXh0UHJvcHMuYWN0aXZlSW5kZXggIT0gbnVsbCAmJiBuZXh0UHJvcHMuYWN0aXZlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBhY3RpdmVJbmRleCxcbiAgICAgICAgZGlyZWN0aW9uOiBuZXh0UHJvcHMuZGlyZWN0aW9uICE9IG51bGwgPyBuZXh0UHJvcHMuZGlyZWN0aW9uIDogdGhpcy5nZXREaXJlY3Rpb24oYWN0aXZlSW5kZXgsIG5leHRQcm9wcy5hY3RpdmVJbmRleClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChuZXh0UHJvcHMuYWN0aXZlSW5kZXggPT0gbnVsbCAmJiB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4ID49IG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgcHJldmlvdXNBY3RpdmVJbmRleDogbnVsbCxcbiAgICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgdGhpcy5pc1VubW91bnRlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmdldEFjdGl2ZUluZGV4ID0gZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXgoKSB7XG4gICAgdmFyIGFjdGl2ZUluZGV4UHJvcCA9IHRoaXMucHJvcHMuYWN0aXZlSW5kZXg7XG4gICAgcmV0dXJuIGFjdGl2ZUluZGV4UHJvcCAhPSBudWxsID8gYWN0aXZlSW5kZXhQcm9wIDogdGhpcy5zdGF0ZS5hY3RpdmVJbmRleDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHByZXZJbmRleCwgaW5kZXgpIHtcbiAgICBpZiAocHJldkluZGV4ID09PSBpbmRleCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZJbmRleCA+IGluZGV4ID8gJ3ByZXYnIDogJ25leHQnO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZCA9IGZ1bmN0aW9uIGhhbmRsZUl0ZW1BbmltYXRlT3V0RW5kKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBudWxsLFxuICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLndhaXRGb3JOZXh0KCk7XG5cbiAgICAgIGlmIChfdGhpczIucHJvcHMub25TbGlkZUVuZCkge1xuICAgICAgICBfdGhpczIucHJvcHMub25TbGlkZUVuZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3V0KCkge1xuICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3ZlcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZU5leHQgPSBmdW5jdGlvbiBoYW5kbGVOZXh0KGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEFjdGl2ZUluZGV4KCkgKyAxO1xuICAgIHZhciBjb3VudCA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICBpZiAoaW5kZXggPiBjb3VudCAtIDEpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53cmFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSAwO1xuICAgIH1cblxuICAgIHRoaXMuc2VsZWN0KGluZGV4LCBlLCAnbmV4dCcpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVQcmV2ID0gZnVuY3Rpb24gaGFuZGxlUHJldihlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5nZXRBY3RpdmVJbmRleCgpIC0gMTtcblxuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53cmFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBWYWxpZENvbXBvbmVudENoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pIC0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdChpbmRleCwgZSwgJ3ByZXYnKTtcbiAgfTsgLy8gVGhpcyBtaWdodCBiZSBhIHB1YmxpYyBBUEkuXG5cblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgfTsgLy8gVGhpcyBtaWdodCBiZSBhIHB1YmxpYyBBUEkuXG5cblxuICBfcHJvdG8ucGxheSA9IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMud2FpdEZvck5leHQoKTtcbiAgfTtcblxuICBfcHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24gc2VsZWN0KGluZGV4LCBlLCBkaXJlY3Rpb24pIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTsgLy8gVE9ETzogSXMgdGhpcyBuZWNlc3Nhcnk/IFNlZW1zIGxpa2UgdGhlIG9ubHkgcmlzayBpcyBpZiB0aGUgY29tcG9uZW50XG4gICAgLy8gdW5tb3VudHMgd2hpbGUgaGFuZGxlSXRlbUFuaW1hdGVPdXRFbmQgZmlyZXMuXG5cbiAgICBpZiAodGhpcy5pc1VubW91bnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c0FjdGl2ZUluZGV4ID0gdGhpcy5wcm9wcy5zbGlkZSA/IHRoaXMuZ2V0QWN0aXZlSW5kZXgoKSA6IG51bGw7XG4gICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IHRoaXMuZ2V0RGlyZWN0aW9uKHByZXZpb3VzQWN0aXZlSW5kZXgsIGluZGV4KTtcbiAgICB2YXIgb25TZWxlY3QgPSB0aGlzLnByb3BzLm9uU2VsZWN0O1xuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBpZiAob25TZWxlY3QubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBSZWFjdCBTeW50aGV0aWNFdmVudHMgYXJlIHBvb2xlZCwgc28gd2UgbmVlZCB0byByZW1vdmUgdGhpcyBldmVudFxuICAgICAgICAvLyBmcm9tIHRoZSBwb29sIHRvIGFkZCBhIGN1c3RvbSBwcm9wZXJ0eS4gVG8gYXZvaWQgdW5uZWNlc3NhcmlseVxuICAgICAgICAvLyByZW1vdmluZyBvYmplY3RzIGZyb20gdGhlIHBvb2wsIG9ubHkgZG8gdGhpcyB3aGVuIHRoZSBsaXN0ZW5lclxuICAgICAgICAvLyBhY3R1YWxseSB3YW50cyB0aGUgZXZlbnQuXG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgZS5wZXJzaXN0KCk7XG4gICAgICAgICAgZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZSA9IHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uU2VsZWN0KGluZGV4LCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uU2VsZWN0KGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hY3RpdmVJbmRleCA9PSBudWxsICYmIGluZGV4ICE9PSBwcmV2aW91c0FjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5wcmV2aW91c0FjdGl2ZUluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgLy8gSWYgY3VycmVudGx5IGFuaW1hdGluZyBkb24ndCBhY3RpdmF0ZSB0aGUgbmV3IGluZGV4LlxuICAgICAgICAvLyBUT0RPOiBsb29rIGludG8gcXVldWVpbmcgdGhpcyBjYW5jZWxlZCBjYWxsIGFuZFxuICAgICAgICAvLyBhbmltYXRpbmcgYWZ0ZXIgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGhhcyBlbmRlZC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWN0aXZlSW5kZXg6IGluZGV4LFxuICAgICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBwcmV2aW91c0FjdGl2ZUluZGV4LFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by53YWl0Rm9yTmV4dCA9IGZ1bmN0aW9uIHdhaXRGb3JOZXh0KCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNsaWRlID0gX3RoaXMkcHJvcHMuc2xpZGUsXG4gICAgICAgIGludGVydmFsID0gX3RoaXMkcHJvcHMuaW50ZXJ2YWwsXG4gICAgICAgIGFjdGl2ZUluZGV4UHJvcCA9IF90aGlzJHByb3BzLmFjdGl2ZUluZGV4O1xuXG4gICAgaWYgKCF0aGlzLmlzUGF1c2VkICYmIHNsaWRlICYmIGludGVydmFsICYmIGFjdGl2ZUluZGV4UHJvcCA9PSBudWxsKSB7XG4gICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuaGFuZGxlTmV4dCwgaW50ZXJ2YWwpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyQ29udHJvbHMgPSBmdW5jdGlvbiByZW5kZXJDb250cm9scyhwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHdyYXAgPSBwcm9wZXJ0aWVzLndyYXAsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcGVydGllcy5jaGlsZHJlbixcbiAgICAgICAgYWN0aXZlSW5kZXggPSBwcm9wZXJ0aWVzLmFjdGl2ZUluZGV4LFxuICAgICAgICBwcmV2SWNvbiA9IHByb3BlcnRpZXMucHJldkljb24sXG4gICAgICAgIG5leHRJY29uID0gcHJvcGVydGllcy5uZXh0SWNvbixcbiAgICAgICAgYnNQcm9wcyA9IHByb3BlcnRpZXMuYnNQcm9wcyxcbiAgICAgICAgcHJldkxhYmVsID0gcHJvcGVydGllcy5wcmV2TGFiZWwsXG4gICAgICAgIG5leHRMYWJlbCA9IHByb3BlcnRpZXMubmV4dExhYmVsO1xuICAgIHZhciBjb250cm9sQ2xhc3NOYW1lID0gcHJlZml4KGJzUHJvcHMsICdjb250cm9sJyk7XG4gICAgdmFyIGNvdW50ID0gVmFsaWRDb21wb25lbnRDaGlsZHJlbi5jb3VudChjaGlsZHJlbik7XG4gICAgcmV0dXJuIFsod3JhcCB8fCBhY3RpdmVJbmRleCAhPT0gMCkgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCB7XG4gICAgICBrZXk6IFwicHJldlwiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNvbnRyb2xDbGFzc05hbWUsICdsZWZ0JyksXG4gICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZVByZXZcbiAgICB9LCBwcmV2SWNvbiwgcHJldkxhYmVsICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgICB9LCBwcmV2TGFiZWwpKSwgKHdyYXAgfHwgYWN0aXZlSW5kZXggIT09IGNvdW50IC0gMSkgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCB7XG4gICAgICBrZXk6IFwibmV4dFwiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNvbnRyb2xDbGFzc05hbWUsICdyaWdodCcpLFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVOZXh0XG4gICAgfSwgbmV4dEljb24sIG5leHRMYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgbmV4dExhYmVsKSldO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJJbmRpY2F0b3JzID0gZnVuY3Rpb24gcmVuZGVySW5kaWNhdG9ycyhjaGlsZHJlbiwgYWN0aXZlSW5kZXgsIGJzUHJvcHMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBpbmRpY2F0b3JzID0gW107XG4gICAgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICBpbmRpY2F0b3JzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgY2xhc3NOYW1lOiBpbmRleCA9PT0gYWN0aXZlSW5kZXggPyAnYWN0aXZlJyA6IG51bGwsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2VsZWN0KGluZGV4LCBlKTtcbiAgICAgICAgfVxuICAgICAgfSksIC8vIEZvcmNlIHdoaXRlc3BhY2UgYmV0d2VlbiBpbmRpY2F0b3IgZWxlbWVudHMuIEJvb3RzdHJhcCByZXF1aXJlc1xuICAgICAgLy8gdGhpcyBmb3IgY29ycmVjdCBzcGFjaW5nIG9mIGVsZW1lbnRzLlxuICAgICAgJyAnKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcIm9sXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICdpbmRpY2F0b3JzJylcbiAgICB9LCBpbmRpY2F0b3JzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNsaWRlID0gX3RoaXMkcHJvcHMyLnNsaWRlLFxuICAgICAgICBpbmRpY2F0b3JzID0gX3RoaXMkcHJvcHMyLmluZGljYXRvcnMsXG4gICAgICAgIGNvbnRyb2xzID0gX3RoaXMkcHJvcHMyLmNvbnRyb2xzLFxuICAgICAgICB3cmFwID0gX3RoaXMkcHJvcHMyLndyYXAsXG4gICAgICAgIHByZXZJY29uID0gX3RoaXMkcHJvcHMyLnByZXZJY29uLFxuICAgICAgICBwcmV2TGFiZWwgPSBfdGhpcyRwcm9wczIucHJldkxhYmVsLFxuICAgICAgICBuZXh0SWNvbiA9IF90aGlzJHByb3BzMi5uZXh0SWNvbixcbiAgICAgICAgbmV4dExhYmVsID0gX3RoaXMkcHJvcHMyLm5leHRMYWJlbCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJzbGlkZVwiLCBcImluZGljYXRvcnNcIiwgXCJjb250cm9sc1wiLCBcIndyYXBcIiwgXCJwcmV2SWNvblwiLCBcInByZXZMYWJlbFwiLCBcIm5leHRJY29uXCIsIFwibmV4dExhYmVsXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgcHJldmlvdXNBY3RpdmVJbmRleCA9IF90aGlzJHN0YXRlLnByZXZpb3VzQWN0aXZlSW5kZXgsXG4gICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHN0YXRlLmRpcmVjdGlvbjtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnaW50ZXJ2YWwnLCAncGF1c2VPbkhvdmVyJywgJ29uU2VsZWN0JywgJ29uU2xpZGVFbmQnLCAnYWN0aXZlSW5kZXgnLCAvLyBBY2Nlc3NlZCB2aWEgdGhpcy5nZXRBY3RpdmVJbmRleCgpLlxuICAgICdkZWZhdWx0QWN0aXZlSW5kZXgnLCAnZGlyZWN0aW9uJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRBY3RpdmVJbmRleCgpO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgIHNsaWRlOiBzbGlkZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICBvbk1vdXNlT3ZlcjogdGhpcy5oYW5kbGVNb3VzZU92ZXIsXG4gICAgICBvbk1vdXNlT3V0OiB0aGlzLmhhbmRsZU1vdXNlT3V0XG4gICAgfSksIGluZGljYXRvcnMgJiYgdGhpcy5yZW5kZXJJbmRpY2F0b3JzKGNoaWxkcmVuLCBhY3RpdmVJbmRleCwgYnNQcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ2lubmVyJylcbiAgICB9LCBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgdmFyIGFjdGl2ZSA9IGluZGV4ID09PSBhY3RpdmVJbmRleDtcbiAgICAgIHZhciBwcmV2aW91c0FjdGl2ZSA9IHNsaWRlICYmIGluZGV4ID09PSBwcmV2aW91c0FjdGl2ZUluZGV4O1xuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBhbmltYXRlT3V0OiBwcmV2aW91c0FjdGl2ZSxcbiAgICAgICAgYW5pbWF0ZUluOiBhY3RpdmUgJiYgcHJldmlvdXNBY3RpdmVJbmRleCAhPSBudWxsICYmIHNsaWRlLFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgb25BbmltYXRlT3V0RW5kOiBwcmV2aW91c0FjdGl2ZSA/IF90aGlzNC5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZCA6IG51bGxcbiAgICAgIH0pO1xuICAgIH0pKSwgY29udHJvbHMgJiYgdGhpcy5yZW5kZXJDb250cm9scyh7XG4gICAgICB3cmFwOiB3cmFwLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgYWN0aXZlSW5kZXg6IGFjdGl2ZUluZGV4LFxuICAgICAgcHJldkljb246IHByZXZJY29uLFxuICAgICAgcHJldkxhYmVsOiBwcmV2TGFiZWwsXG4gICAgICBuZXh0SWNvbjogbmV4dEljb24sXG4gICAgICBuZXh0TGFiZWw6IG5leHRMYWJlbCxcbiAgICAgIGJzUHJvcHM6IGJzUHJvcHNcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIENhcm91c2VsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJvdXNlbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5DYXJvdXNlbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5DYXJvdXNlbC5DYXB0aW9uID0gQ2Fyb3VzZWxDYXB0aW9uO1xuQ2Fyb3VzZWwuSXRlbSA9IENhcm91c2VsSXRlbTtcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Nhcm91c2VsJywgQ2Fyb3VzZWwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbGFiZWwtaGFzLWZvciAqL1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBPbmx5IHZhbGlkIGlmIGBpbmxpbmVgIGlzIG5vdCBzZXQuXG4gICAqL1xuICB2YWxpZGF0aW9uU3RhdGU6IFByb3BUeXBlcy5vbmVPZihbJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdlcnJvcicsIG51bGxdKSxcblxuICAvKipcbiAgICogQXR0YWNoZXMgYSByZWYgdG8gdGhlIGA8aW5wdXQ+YCBlbGVtZW50LiBPbmx5IGZ1bmN0aW9ucyBjYW4gYmUgdXNlZCBoZXJlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiA8Q2hlY2tib3ggaW5wdXRSZWY9e3JlZiA9PiB7IHRoaXMuaW5wdXQgPSByZWY7IH19IC8+XG4gICAqIGBgYFxuICAgKi9cbiAgaW5wdXRSZWY6IFByb3BUeXBlcy5mdW5jXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgaW5saW5lOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICB0aXRsZTogJydcbn07XG5cbnZhciBDaGVja2JveCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDaGVja2JveCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2hlY2tib3goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENoZWNrYm94LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlubGluZSA9IF90aGlzJHByb3BzLmlubGluZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3RoaXMkcHJvcHMudmFsaWRhdGlvblN0YXRlLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImlubGluZVwiLCBcImRpc2FibGVkXCIsIFwidmFsaWRhdGlvblN0YXRlXCIsIFwiaW5wdXRSZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBpbnB1dCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSkpO1xuXG4gICAgaWYgKGlubGluZSkge1xuICAgICAgdmFyIF9jbGFzc2VzMjtcblxuICAgICAgdmFyIF9jbGFzc2VzID0gKF9jbGFzc2VzMiA9IHt9LCBfY2xhc3NlczJbcHJlZml4KGJzUHJvcHMsICdpbmxpbmUnKV0gPSB0cnVlLCBfY2xhc3NlczIuZGlzYWJsZWQgPSBkaXNhYmxlZCwgX2NsYXNzZXMyKTsgLy8gVXNlIGEgd2FybmluZyBoZXJlIGluc3RlYWQgb2YgaW4gcHJvcFR5cGVzIHRvIGdldCBiZXR0ZXItbG9va2luZ1xuICAgICAgLy8gZ2VuZXJhdGVkIGRvY3VtZW50YXRpb24uXG5cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdmFsaWRhdGlvblN0YXRlLCAnYHZhbGlkYXRpb25TdGF0ZWAgaXMgaWdub3JlZCBvbiBgPENoZWNrYm94IGlubGluZT5gLiBUbyBkaXNwbGF5ICcgKyAndmFsaWRhdGlvbiBzdGF0ZSBvbiBhbiBpbmxpbmUgY2hlY2tib3gsIHNldCBgdmFsaWRhdGlvblN0YXRlYCBvbiBhICcgKyAncGFyZW50IGA8Rm9ybUdyb3VwPmAgb3Igb3RoZXIgZWxlbWVudCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIF9jbGFzc2VzKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgIH0sIGlucHV0LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pO1xuXG4gICAgaWYgKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2xhc3Nlc1tcImhhcy1cIiArIHZhbGlkYXRpb25TdGF0ZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgIHRpdGxlOiB0aXRsZVxuICAgIH0sIGlucHV0LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBDaGVja2JveDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2hlY2tib3gucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2hlY2tib3guZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnY2hlY2tib3gnLCBDaGVja2JveCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIFwiXCIgKyBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgREVWSUNFX1NJWkVTIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEFwcGx5IGNsZWFyZml4XG4gICAqXG4gICAqIG9uIEV4dHJhIHNtYWxsIGRldmljZXMgUGhvbmVzXG4gICAqXG4gICAqIGFkZHMgY2xhc3MgYHZpc2libGUteHMtYmxvY2tgXG4gICAqL1xuICB2aXNpYmxlWHNCbG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFwcGx5IGNsZWFyZml4XG4gICAqXG4gICAqIG9uIFNtYWxsIGRldmljZXMgVGFibGV0c1xuICAgKlxuICAgKiBhZGRzIGNsYXNzIGB2aXNpYmxlLXNtLWJsb2NrYFxuICAgKi9cbiAgdmlzaWJsZVNtQmxvY2s6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBseSBjbGVhcmZpeFxuICAgKlxuICAgKiBvbiBNZWRpdW0gZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBhZGRzIGNsYXNzIGB2aXNpYmxlLW1kLWJsb2NrYFxuICAgKi9cbiAgdmlzaWJsZU1kQmxvY2s6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBseSBjbGVhcmZpeFxuICAgKlxuICAgKiBvbiBMYXJnZSBkZXZpY2VzIERlc2t0b3BzXG4gICAqXG4gICAqIGFkZHMgY2xhc3MgYHZpc2libGUtbGctYmxvY2tgXG4gICAqL1xuICB2aXNpYmxlTGdCbG9jazogUHJvcFR5cGVzLmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBDbGVhcmZpeCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDbGVhcmZpeCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2xlYXJmaXgoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENsZWFyZml4LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICB2YXIgcHJvcE5hbWUgPSBcInZpc2libGVcIiArIGNhcGl0YWxpemUoc2l6ZSkgKyBcIkJsb2NrXCI7XG5cbiAgICAgIGlmIChlbGVtZW50UHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICAgIGNsYXNzZXNbXCJ2aXNpYmxlLVwiICsgc2l6ZSArIFwiLWJsb2NrXCJdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGVsZW1lbnRQcm9wc1twcm9wTmFtZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ2xlYXJmaXg7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNsZWFyZml4LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNsZWFyZml4LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2NsZWFyZml4JywgQ2xlYXJmaXgpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBVc2VzIGBjb250cm9sSWRgIGZyb20gYDxGb3JtR3JvdXA+YCBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQuXG4gICAqL1xuICBodG1sRm9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzck9ubHk6IFByb3BUeXBlcy5ib29sXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc3JPbmx5OiBmYWxzZVxufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19mb3JtR3JvdXA6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbnZhciBDb250cm9sTGFiZWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ29udHJvbExhYmVsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250cm9sTGFiZWwoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENvbnRyb2xMYWJlbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgZm9ybUdyb3VwID0gdGhpcy5jb250ZXh0LiRic19mb3JtR3JvdXA7XG4gICAgdmFyIGNvbnRyb2xJZCA9IGZvcm1Hcm91cCAmJiBmb3JtR3JvdXAuY29udHJvbElkO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkaHRtbEZvciA9IF90aGlzJHByb3BzLmh0bWxGb3IsXG4gICAgICAgIGh0bWxGb3IgPSBfdGhpcyRwcm9wcyRodG1sRm9yID09PSB2b2lkIDAgPyBjb250cm9sSWQgOiBfdGhpcyRwcm9wcyRodG1sRm9yLFxuICAgICAgICBzck9ubHkgPSBfdGhpcyRwcm9wcy5zck9ubHksXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaHRtbEZvclwiLCBcInNyT25seVwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjb250cm9sSWQgPT0gbnVsbCB8fCBodG1sRm9yID09PSBjb250cm9sSWQsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Q29udHJvbExhYmVsPmAgd2hlbiBgaHRtbEZvcmAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgICdzci1vbmx5Jzogc3JPbmx5XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ29udHJvbExhYmVsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Db250cm9sTGFiZWwucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ29udHJvbExhYmVsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkNvbnRyb2xMYWJlbC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdjb250cm9sLWxhYmVsJywgQ29udHJvbExhYmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB7IGJzQ2xhc3MsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBERVZJQ0VfU0laRVMgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIHlvdSB3aXNoIHRvIHNwYW5cbiAgICpcbiAgICogZm9yIEV4dHJhIHNtYWxsIGRldmljZXMgUGhvbmVzICg8NzY4cHgpXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLXhzLWBcbiAgICovXG4gIHhzOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgeW91IHdpc2ggdG8gc3BhblxuICAgKlxuICAgKiBmb3IgU21hbGwgZGV2aWNlcyBUYWJsZXRzICjiiaU3NjhweClcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wtc20tYFxuICAgKi9cbiAgc206IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucyB5b3Ugd2lzaCB0byBzcGFuXG4gICAqXG4gICAqIGZvciBNZWRpdW0gZGV2aWNlcyBEZXNrdG9wcyAo4omlOTkycHgpXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLW1kLWBcbiAgICovXG4gIG1kOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgeW91IHdpc2ggdG8gc3BhblxuICAgKlxuICAgKiBmb3IgTGFyZ2UgZGV2aWNlcyBEZXNrdG9wcyAo4omlMTIwMHB4KVxuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1sZy1gXG4gICAqL1xuICBsZzogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSGlkZSBjb2x1bW5cbiAgICpcbiAgICogb24gRXh0cmEgc21hbGwgZGV2aWNlcyBQaG9uZXNcbiAgICpcbiAgICogYWRkcyBjbGFzcyBgaGlkZGVuLXhzYFxuICAgKi9cbiAgeHNIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBIaWRlIGNvbHVtblxuICAgKlxuICAgKiBvbiBTbWFsbCBkZXZpY2VzIFRhYmxldHNcbiAgICpcbiAgICogYWRkcyBjbGFzcyBgaGlkZGVuLXNtYFxuICAgKi9cbiAgc21IaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBIaWRlIGNvbHVtblxuICAgKlxuICAgKiBvbiBNZWRpdW0gZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBhZGRzIGNsYXNzIGBoaWRkZW4tbWRgXG4gICAqL1xuICBtZEhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEhpZGUgY29sdW1uXG4gICAqXG4gICAqIG9uIExhcmdlIGRldmljZXMgRGVza3RvcHNcbiAgICpcbiAgICogYWRkcyBjbGFzcyBgaGlkZGVuLWxnYFxuICAgKi9cbiAgbGdIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNb3ZlIGNvbHVtbnMgdG8gdGhlIHJpZ2h0XG4gICAqXG4gICAqIGZvciBFeHRyYSBzbWFsbCBkZXZpY2VzIFBob25lc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC14cy1vZmZzZXQtYFxuICAgKi9cbiAgeHNPZmZzZXQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE1vdmUgY29sdW1ucyB0byB0aGUgcmlnaHRcbiAgICpcbiAgICogZm9yIFNtYWxsIGRldmljZXMgVGFibGV0c1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1zbS1vZmZzZXQtYFxuICAgKi9cbiAgc21PZmZzZXQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE1vdmUgY29sdW1ucyB0byB0aGUgcmlnaHRcbiAgICpcbiAgICogZm9yIE1lZGl1bSBkZXZpY2VzIERlc2t0b3BzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLW1kLW9mZnNldC1gXG4gICAqL1xuICBtZE9mZnNldDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogTW92ZSBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgTGFyZ2UgZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1sZy1vZmZzZXQtYFxuICAgKi9cbiAgbGdPZmZzZXQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgRXh0cmEgc21hbGwgZGV2aWNlcyBQaG9uZXNcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wteHMtcHVzaC1gXG4gICAqL1xuICB4c1B1c2g6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgU21hbGwgZGV2aWNlcyBUYWJsZXRzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLXNtLXB1c2gtYFxuICAgKi9cbiAgc21QdXNoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIGdyaWQgY29sdW1ucyB0byB0aGUgcmlnaHRcbiAgICpcbiAgICogZm9yIE1lZGl1bSBkZXZpY2VzIERlc2t0b3BzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLW1kLXB1c2gtYFxuICAgKi9cbiAgbWRQdXNoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIGdyaWQgY29sdW1ucyB0byB0aGUgcmlnaHRcbiAgICpcbiAgICogZm9yIExhcmdlIGRldmljZXMgRGVza3RvcHNcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wtbGctcHVzaC1gXG4gICAqL1xuICBsZ1B1c2g6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSBsZWZ0XG4gICAqXG4gICAqIGZvciBFeHRyYSBzbWFsbCBkZXZpY2VzIFBob25lc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC14cy1wdWxsLWBcbiAgICovXG4gIHhzUHVsbDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBvcmRlciBvZiBncmlkIGNvbHVtbnMgdG8gdGhlIGxlZnRcbiAgICpcbiAgICogZm9yIFNtYWxsIGRldmljZXMgVGFibGV0c1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1zbS1wdWxsLWBcbiAgICovXG4gIHNtUHVsbDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBvcmRlciBvZiBncmlkIGNvbHVtbnMgdG8gdGhlIGxlZnRcbiAgICpcbiAgICogZm9yIE1lZGl1bSBkZXZpY2VzIERlc2t0b3BzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLW1kLXB1bGwtYFxuICAgKi9cbiAgbWRQdWxsOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIGdyaWQgY29sdW1ucyB0byB0aGUgbGVmdFxuICAgKlxuICAgKiBmb3IgTGFyZ2UgZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1sZy1wdWxsLWBcbiAgICovXG4gIGxnUHVsbDogUHJvcFR5cGVzLm51bWJlclxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIENvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDb2wsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29sLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICBmdW5jdGlvbiBwb3BQcm9wKHByb3BTdWZmaXgsIG1vZGlmaWVyKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IFwiXCIgKyBzaXplICsgcHJvcFN1ZmZpeDtcbiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IGVsZW1lbnRQcm9wc1twcm9wTmFtZV07XG5cbiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgY2xhc3Nlcy5wdXNoKHByZWZpeChic1Byb3BzLCBcIlwiICsgc2l6ZSArIG1vZGlmaWVyICsgXCItXCIgKyBwcm9wVmFsdWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBlbGVtZW50UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuXG4gICAgICBwb3BQcm9wKCcnLCAnJyk7XG4gICAgICBwb3BQcm9wKCdPZmZzZXQnLCAnLW9mZnNldCcpO1xuICAgICAgcG9wUHJvcCgnUHVzaCcsICctcHVzaCcpO1xuICAgICAgcG9wUHJvcCgnUHVsbCcsICctcHVsbCcpO1xuICAgICAgdmFyIGhpZGRlblByb3BOYW1lID0gc2l6ZSArIFwiSGlkZGVuXCI7XG5cbiAgICAgIGlmIChlbGVtZW50UHJvcHNbaGlkZGVuUHJvcE5hbWVdKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcImhpZGRlbi1cIiArIHNpemUpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgZWxlbWVudFByb3BzW2hpZGRlblByb3BOYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDb2w7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNvbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Db2wuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnY29sJywgQ29sKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX3BhcnNlSW50IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvcGFyc2UtaW50XCI7XG5cbnZhciBfY29sbGFwc2VTdHlsZXM7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGNzcyBmcm9tICdkb20taGVscGVycy9zdHlsZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUcmFuc2l0aW9uLCB7IEVYSVRFRCwgRU5URVJFRCwgRU5URVJJTkcsIEVYSVRJTkcgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xudmFyIE1BUkdJTlMgPSB7XG4gIGhlaWdodDogWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJ10sXG4gIHdpZHRoOiBbJ21hcmdpbkxlZnQnLCAnbWFyZ2luUmlnaHQnXVxufTsgLy8gcmVhZGluZyBhIGRpbWVuc2lvbiBwcm9wIHdpbGwgY2F1c2UgdGhlIGJyb3dzZXIgdG8gcmVjYWxjdWxhdGUsXG4vLyB3aGljaCB3aWxsIGxldCBvdXIgYW5pbWF0aW9ucyB3b3JrXG5cbmZ1bmN0aW9uIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpIHtcbiAgbm9kZS5vZmZzZXRIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG59XG5cbmZ1bmN0aW9uIGdldERpbWVuc2lvblZhbHVlKGRpbWVuc2lvbiwgZWxlbSkge1xuICB2YXIgdmFsdWUgPSBlbGVtW1wib2Zmc2V0XCIgKyBjYXBpdGFsaXplKGRpbWVuc2lvbildO1xuICB2YXIgbWFyZ2lucyA9IE1BUkdJTlNbZGltZW5zaW9uXTtcbiAgcmV0dXJuIHZhbHVlICsgX3BhcnNlSW50KGNzcyhlbGVtLCBtYXJnaW5zWzBdKSwgMTApICsgX3BhcnNlSW50KGNzcyhlbGVtLCBtYXJnaW5zWzFdKSwgMTApO1xufVxuXG52YXIgY29sbGFwc2VTdHlsZXMgPSAoX2NvbGxhcHNlU3R5bGVzID0ge30sIF9jb2xsYXBzZVN0eWxlc1tFWElURURdID0gJ2NvbGxhcHNlJywgX2NvbGxhcHNlU3R5bGVzW0VYSVRJTkddID0gJ2NvbGxhcHNpbmcnLCBfY29sbGFwc2VTdHlsZXNbRU5URVJJTkddID0gJ2NvbGxhcHNpbmcnLCBfY29sbGFwc2VTdHlsZXNbRU5URVJFRF0gPSAnY29sbGFwc2UgaW4nLCBfY29sbGFwc2VTdHlsZXMpO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGV4cGFuZCBvciBjb2xsYXBzZSBhbmltYXRpb25cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2FpdCB1bnRpbCB0aGUgZmlyc3QgXCJlbnRlclwiIHRyYW5zaXRpb24gdG8gbW91bnQgdGhlIGNvbXBvbmVudCAoYWRkIGl0IHRvIHRoZSBET00pXG4gICAqL1xuICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBVbm1vdW50IHRoZSBjb21wb25lbnQgKHJlbW92ZSBpdCBmcm9tIHRoZSBET00pIHdoZW4gaXQgaXMgY29sbGFwc2VkXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUnVuIHRoZSBleHBhbmQgYW5pbWF0aW9uIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMsIGlmIGl0IGlzIGluaXRpYWxseVxuICAgKiBzaG93blxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRHVyYXRpb24gb2YgdGhlIGNvbGxhcHNlIGFuaW1hdGlvbiBpbiBtaWxsaXNlY29uZHMsIHRvIGVuc3VyZSB0aGF0XG4gICAqIGZpbmlzaGluZyBjYWxsYmFja3MgYXJlIGZpcmVkIGV2ZW4gaWYgdGhlIG9yaWdpbmFsIGJyb3dzZXIgdHJhbnNpdGlvbiBlbmRcbiAgICogZXZlbnRzIGFyZSBjYW5jZWxlZFxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgZXhwYW5kc1xuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgc3RhcnRzIHRvIGV4cGFuZFxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGV4cGFuZGVkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBjb2xsYXBzZXNcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgc3RhcnRzIHRvIGNvbGxhcHNlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBjb2xsYXBzZWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGRpbWVuc2lvbiB1c2VkIHdoZW4gY29sbGFwc2luZywgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAqIGRpbWVuc2lvblxuICAgKlxuICAgKiBfTm90ZTogQm9vdHN0cmFwIG9ubHkgcGFydGlhbGx5IHN1cHBvcnRzICd3aWR0aCchXG4gICAqIFlvdSB3aWxsIG5lZWQgdG8gc3VwcGx5IHlvdXIgb3duIENTUyBhbmltYXRpb24gZm9yIHRoZSBgLndpZHRoYCBDU1MgY2xhc3MuX1xuICAgKi9cbiAgZGltZW5zaW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydoZWlnaHQnLCAnd2lkdGgnXSksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgaGVpZ2h0IG9yIHdpZHRoIG9mIHRoZSBhbmltYXRpbmcgRE9NIG5vZGVcbiAgICpcbiAgICogQWxsb3dzIGZvciBwcm92aWRpbmcgc29tZSBjdXN0b20gbG9naWMgZm9yIGhvdyBtdWNoIHRoZSBDb2xsYXBzZSBjb21wb25lbnRcbiAgICogc2hvdWxkIGFuaW1hdGUgaW4gaXRzIHNwZWNpZmllZCBkaW1lbnNpb24uIENhbGxlZCB3aXRoIHRoZSBjdXJyZW50XG4gICAqIGRpbWVuc2lvbiBwcm9wIHZhbHVlIGFuZCB0aGUgRE9NIG5vZGUuXG4gICAqL1xuICBnZXREaW1lbnNpb25WYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEFSSUEgcm9sZSBvZiBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICB0aW1lb3V0OiAzMDAsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBkaW1lbnNpb246ICdoZWlnaHQnLFxuICBnZXREaW1lbnNpb25WYWx1ZTogZ2V0RGltZW5zaW9uVmFsdWVcbn07XG5cbnZhciBDb2xsYXBzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDb2xsYXBzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29sbGFwc2UoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICBlbGVtLnN0eWxlW190aGlzLmdldERpbWVuc2lvbigpXSA9ICcwJztcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IF90aGlzLmdldERpbWVuc2lvbigpO1xuXG4gICAgICBlbGVtLnN0eWxlW2RpbWVuc2lvbl0gPSBfdGhpcy5fZ2V0U2Nyb2xsRGltZW5zaW9uVmFsdWUoZWxlbSwgZGltZW5zaW9uKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJlZCA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICBlbGVtLnN0eWxlW190aGlzLmdldERpbWVuc2lvbigpXSA9IG51bGw7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXQgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IF90aGlzLmdldERpbWVuc2lvbigpO1xuXG4gICAgICBlbGVtLnN0eWxlW2RpbWVuc2lvbl0gPSBfdGhpcy5wcm9wcy5nZXREaW1lbnNpb25WYWx1ZShkaW1lbnNpb24sIGVsZW0pICsgXCJweFwiO1xuICAgICAgdHJpZ2dlckJyb3dzZXJSZWZsb3coZWxlbSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXRpbmcgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgZWxlbS5zdHlsZVtfdGhpcy5nZXREaW1lbnNpb24oKV0gPSAnMCc7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldERpbWVuc2lvbiA9IGZ1bmN0aW9uIGdldERpbWVuc2lvbigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucHJvcHMuZGltZW5zaW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5wcm9wcy5kaW1lbnNpb24oKSA6IHRoaXMucHJvcHMuZGltZW5zaW9uO1xuICB9OyAvLyBmb3IgdGVzdGluZ1xuXG5cbiAgX3Byb3RvLl9nZXRTY3JvbGxEaW1lbnNpb25WYWx1ZSA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxEaW1lbnNpb25WYWx1ZShlbGVtLCBkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gZWxlbVtcInNjcm9sbFwiICsgY2FwaXRhbGl6ZShkaW1lbnNpb24pXSArIFwicHhcIjtcbiAgfTtcbiAgLyogLS0gRXhwYW5kaW5nIC0tICovXG5cblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfdGhpcyRwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgb25FeGl0aW5nID0gX3RoaXMkcHJvcHMub25FeGl0aW5nLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLmRpbWVuc2lvbjtcbiAgICBkZWxldGUgcHJvcHMuZ2V0RGltZW5zaW9uVmFsdWU7XG4gICAgdmFyIGhhbmRsZUVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRW50ZXIsIG9uRW50ZXIpO1xuICAgIHZhciBoYW5kbGVFbnRlcmluZyA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyaW5nLCBvbkVudGVyaW5nKTtcbiAgICB2YXIgaGFuZGxlRW50ZXJlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyZWQsIG9uRW50ZXJlZCk7XG4gICAgdmFyIGhhbmRsZUV4aXQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odGhpcy5oYW5kbGVFeGl0LCBvbkV4aXQpO1xuICAgIHZhciBoYW5kbGVFeGl0aW5nID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRXhpdGluZywgb25FeGl0aW5nKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIFwiYXJpYS1leHBhbmRlZFwiOiBwcm9wcy5yb2xlID8gcHJvcHMuaW4gOiBudWxsLFxuICAgICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZ1xuICAgIH0pLCBmdW5jdGlvbiAoc3RhdGUsIGlubmVyUHJvcHMpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHt9LCBpbm5lclByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgY29sbGFwc2VTdHlsZXNbc3RhdGVdLCBfdGhpczIuZ2V0RGltZW5zaW9uKCkgPT09ICd3aWR0aCcgJiYgJ3dpZHRoJylcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQ29sbGFwc2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNvbGxhcHNlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNvbGxhcHNlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9BcnJheSRmcm9tIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvZnJvbVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQga2V5Y29kZSBmcm9tICdrZXljb2RlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUm9vdENsb3NlV3JhcHBlciBmcm9tICdyZWFjdC1vdmVybGF5cy9saWIvUm9vdENsb3NlV3JhcHBlcic7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHNBbmRPbWl0IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG52YXIgcHJvcFR5cGVzID0ge1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgcHVsbFJpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGxhYmVsbGVkQnk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICByb290Q2xvc2VFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnY2xpY2snLCAnbW91c2Vkb3duJ10pXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYnNSb2xlOiAnbWVudScsXG4gIHB1bGxSaWdodDogZmFsc2Vcbn07XG5cbnZhciBEcm9wZG93bk1lbnUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJvcGRvd25NZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bk1lbnUocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVSb290Q2xvc2UgPSBfdGhpcy5oYW5kbGVSb290Q2xvc2UuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IF90aGlzLmhhbmRsZUtleURvd24uYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3Bkb3duTWVudS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldEZvY3VzYWJsZU1lbnVJdGVtcyA9IGZ1bmN0aW9uIGdldEZvY3VzYWJsZU1lbnVJdGVtcygpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BcnJheSRmcm9tKG5vZGUucXVlcnlTZWxlY3RvckFsbCgnW3RhYkluZGV4PVwiLTFcIl0nKSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEl0ZW1zQW5kQWN0aXZlSW5kZXggPSBmdW5jdGlvbiBnZXRJdGVtc0FuZEFjdGl2ZUluZGV4KCkge1xuICAgIHZhciBpdGVtcyA9IHRoaXMuZ2V0Rm9jdXNhYmxlTWVudUl0ZW1zKCk7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gaXRlbXMuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgYWN0aXZlSW5kZXg6IGFjdGl2ZUluZGV4XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uZm9jdXNOZXh0ID0gZnVuY3Rpb24gZm9jdXNOZXh0KCkge1xuICAgIHZhciBfdGhpcyRnZXRJdGVtc0FuZEFjdGkgPSB0aGlzLmdldEl0ZW1zQW5kQWN0aXZlSW5kZXgoKSxcbiAgICAgICAgaXRlbXMgPSBfdGhpcyRnZXRJdGVtc0FuZEFjdGkuaXRlbXMsXG4gICAgICAgIGFjdGl2ZUluZGV4ID0gX3RoaXMkZ2V0SXRlbXNBbmRBY3RpLmFjdGl2ZUluZGV4O1xuXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SW5kZXggPSBhY3RpdmVJbmRleCA9PT0gaXRlbXMubGVuZ3RoIC0gMSA/IDAgOiBhY3RpdmVJbmRleCArIDE7XG4gICAgaXRlbXNbbmV4dEluZGV4XS5mb2N1cygpO1xuICB9O1xuXG4gIF9wcm90by5mb2N1c1ByZXZpb3VzID0gZnVuY3Rpb24gZm9jdXNQcmV2aW91cygpIHtcbiAgICB2YXIgX3RoaXMkZ2V0SXRlbXNBbmRBY3RpMiA9IHRoaXMuZ2V0SXRlbXNBbmRBY3RpdmVJbmRleCgpLFxuICAgICAgICBpdGVtcyA9IF90aGlzJGdldEl0ZW1zQW5kQWN0aTIuaXRlbXMsXG4gICAgICAgIGFjdGl2ZUluZGV4ID0gX3RoaXMkZ2V0SXRlbXNBbmRBY3RpMi5hY3RpdmVJbmRleDtcblxuICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJldkluZGV4ID0gYWN0aXZlSW5kZXggPT09IDAgPyBpdGVtcy5sZW5ndGggLSAxIDogYWN0aXZlSW5kZXggLSAxO1xuICAgIGl0ZW1zW3ByZXZJbmRleF0uZm9jdXMoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5kb3duOlxuICAgICAgICB0aGlzLmZvY3VzTmV4dCgpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBrZXljb2RlLmNvZGVzLnVwOlxuICAgICAgICB0aGlzLmZvY3VzUHJldmlvdXMoKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5lc2M6XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMudGFiOlxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsIHtcbiAgICAgICAgICBzb3VyY2U6ICdrZXlkb3duJ1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVSb290Q2xvc2UgPSBmdW5jdGlvbiBoYW5kbGVSb290Q2xvc2UoZXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsIHtcbiAgICAgIHNvdXJjZTogJ3Jvb3RDbG9zZSdcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczIsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHMub3BlbixcbiAgICAgICAgcHVsbFJpZ2h0ID0gX3RoaXMkcHJvcHMucHVsbFJpZ2h0LFxuICAgICAgICBsYWJlbGxlZEJ5ID0gX3RoaXMkcHJvcHMubGFiZWxsZWRCeSxcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICByb290Q2xvc2VFdmVudCA9IF90aGlzJHByb3BzLnJvb3RDbG9zZUV2ZW50LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJvcGVuXCIsIFwicHVsbFJpZ2h0XCIsIFwibGFiZWxsZWRCeVwiLCBcIm9uU2VsZWN0XCIsIFwiY2xhc3NOYW1lXCIsIFwicm9vdENsb3NlRXZlbnRcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wc0FuZE9taXQgPSBzcGxpdEJzUHJvcHNBbmRPbWl0KHByb3BzLCBbJ29uQ2xvc2UnXSksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFswXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdyaWdodCcpXSA9IHB1bGxSaWdodCwgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb290Q2xvc2VXcmFwcGVyLCB7XG4gICAgICBkaXNhYmxlZDogIW9wZW4sXG4gICAgICBvblJvb3RDbG9zZTogdGhpcy5oYW5kbGVSb290Q2xvc2UsXG4gICAgICBldmVudDogcm9vdENsb3NlRXZlbnRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcm9sZTogXCJtZW51XCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSxcbiAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGxhYmVsbGVkQnlcbiAgICB9KSwgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbktleURvd246IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5wcm9wcy5vbktleURvd24sIF90aGlzMi5oYW5kbGVLZXlEb3duKSxcbiAgICAgICAgb25TZWxlY3Q6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5wcm9wcy5vblNlbGVjdCwgb25TZWxlY3QpXG4gICAgICB9KTtcbiAgICB9KSkpO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duTWVudS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ecm9wZG93bk1lbnUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnZHJvcGRvd24tbWVudScsIERyb3Bkb3duTWVudSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCB7IGJzQ2xhc3MgYXMgc2V0QnNDbGFzcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgbm9DYXJldDogUHJvcFR5cGVzLmJvb2wsXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdXNlQW5jaG9yOiBQcm9wVHlwZXMuYm9vbFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIG9wZW46IGZhbHNlLFxuICB1c2VBbmNob3I6IGZhbHNlLFxuICBic1JvbGU6ICd0b2dnbGUnXG59O1xuXG52YXIgRHJvcGRvd25Ub2dnbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJvcGRvd25Ub2dnbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duVG9nZ2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcm9wZG93blRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBub0NhcmV0ID0gX3RoaXMkcHJvcHMubm9DYXJldCxcbiAgICAgICAgb3BlbiA9IF90aGlzJHByb3BzLm9wZW4sXG4gICAgICAgIHVzZUFuY2hvciA9IF90aGlzJHByb3BzLnVzZUFuY2hvcixcbiAgICAgICAgYnNDbGFzcyA9IF90aGlzJHByb3BzLmJzQ2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wibm9DYXJldFwiLCBcIm9wZW5cIiwgXCJ1c2VBbmNob3JcIiwgXCJic0NsYXNzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLmJzUm9sZTtcbiAgICB2YXIgQ29tcG9uZW50ID0gdXNlQW5jaG9yID8gU2FmZUFuY2hvciA6IEJ1dHRvbjtcbiAgICB2YXIgdXNlQ2FyZXQgPSAhbm9DYXJldDsgLy8gVGhpcyBpbnRlbnRpb25hbGx5IGZvcndhcmRzIGJzU2l6ZSBhbmQgYnNTdHlsZSAoaWYgc2V0KSB0byB0aGVcbiAgICAvLyB1bmRlcmx5aW5nIGNvbXBvbmVudCwgdG8gYWxsb3cgaXQgdG8gcmVuZGVyIHNpemUgYW5kIHN0eWxlIHZhcmlhbnRzLlxuICAgIC8vIEZJWE1FOiBTaG91bGQgdGhpcyByZWFsbHkgZmFsbCBiYWNrIHRvIGB0aXRsZWAgYXMgY2hpbGRyZW4/XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzQ2xhc3MpLFxuICAgICAgXCJhcmlhLWhhc3BvcHVwXCI6IHRydWUsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlblxuICAgIH0pLCBjaGlsZHJlbiB8fCBwcm9wcy50aXRsZSwgdXNlQ2FyZXQgJiYgJyAnLCB1c2VDYXJldCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiY2FyZXRcIlxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd25Ub2dnbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duVG9nZ2xlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkRyb3Bkb3duVG9nZ2xlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IHNldEJzQ2xhc3MoJ2Ryb3Bkb3duLXRvZ2dsZScsIERyb3Bkb3duVG9nZ2xlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGFjdGl2ZUVsZW1lbnQgZnJvbSAnZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudCc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMnO1xuaW1wb3J0IGtleWNvZGUgZnJvbSAna2V5Y29kZSc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGFsbCBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCBpc1JlcXVpcmVkRm9yQTExeSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeSc7XG5pbXBvcnQgeyB1bmNvbnRyb2xsYWJsZSB9IGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IEJ1dHRvbkdyb3VwIGZyb20gJy4vQnV0dG9uR3JvdXAnO1xuaW1wb3J0IERyb3Bkb3duTWVudSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5pbXBvcnQgRHJvcGRvd25Ub2dnbGUgZnJvbSAnLi9Ecm9wZG93blRvZ2dsZSc7XG5pbXBvcnQgeyBic0NsYXNzIGFzIHNldEJzQ2xhc3MsIHByZWZpeCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgeyBleGNsdXNpdmVSb2xlcywgcmVxdWlyZWRSb2xlcyB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG52YXIgVE9HR0xFX1JPTEUgPSBEcm9wZG93blRvZ2dsZS5kZWZhdWx0UHJvcHMuYnNSb2xlO1xudmFyIE1FTlVfUk9MRSA9IERyb3Bkb3duTWVudS5kZWZhdWx0UHJvcHMuYnNSb2xlO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBtZW51IHdpbGwgb3BlbiBhYm92ZSB0aGUgZHJvcGRvd24gYnV0dG9uLCBpbnN0ZWFkIG9mIGJlbG93IGl0LlxuICAgKi9cbiAgZHJvcHVwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQW4gaHRtbCBpZCBhdHRyaWJ1dGUsIG5lY2Vzc2FyeSBmb3IgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy5cbiAgICogQHR5cGUge3N0cmluZ3xudW1iZXJ9XG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgaWQ6IGlzUmVxdWlyZWRGb3JBMTF5KFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSksXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIG9mIGEgRHJvcGRvd24gbWF5IGJlIGEgYDxEcm9wZG93bi5Ub2dnbGU+YCBvciBhIGA8RHJvcGRvd24uTWVudT5gLlxuICAgKiBAdHlwZSB7bm9kZX1cbiAgICovXG4gIGNoaWxkcmVuOiBhbGwocmVxdWlyZWRSb2xlcyhUT0dHTEVfUk9MRSwgTUVOVV9ST0xFKSwgZXhjbHVzaXZlUm9sZXMoTUVOVV9ST0xFKSksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWxpZ24gdGhlIG1lbnUgdG8gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIERyb3Bkb3duIHRvZ2dsZVxuICAgKi9cbiAgcHVsbFJpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhlIERyb3Bkb3duIGlzIHZpc2libGUuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgb25Ub2dnbGVcbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgRHJvcGRvd24gd2lzaGVzIHRvIGNoYW5nZSB2aXNpYmlsaXR5LiBDYWxsZWQgd2l0aCB0aGUgcmVxdWVzdGVkXG4gICAqIGBvcGVuYCB2YWx1ZSwgdGhlIERPTSBldmVudCwgYW5kIHRoZSBzb3VyY2UgdGhhdCBmaXJlZCBpdDogYCdjbGljaydgLGAna2V5ZG93bidgLGAncm9vdENsb3NlJ2AsIG9yIGAnc2VsZWN0J2AuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uKEJvb2xlYW4gaXNPcGVuLCBPYmplY3QgZXZlbnQsIHsgU3RyaW5nIHNvdXJjZSB9KSB7fVxuICAgKiBgYGBcbiAgICogQGNvbnRyb2xsYWJsZSBvcGVuXG4gICAqL1xuICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50S2V5OiBhbnksIGV2ZW50OiBPYmplY3QpID0+IGFueVxuICAgKiBgYGBcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYCdtZW51aXRlbSdgLCBjYXVzZXMgdGhlIGRyb3Bkb3duIHRvIGJlaGF2ZSBsaWtlIGEgbWVudSBpdGVtIHJhdGhlciB0aGFuXG4gICAqIGEgbWVudSBidXR0b24uXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGljaCBldmVudCB3aGVuIGZpcmVkIG91dHNpZGUgdGhlIGNvbXBvbmVudCB3aWxsIGNhdXNlIGl0IHRvIGJlIGNsb3NlZFxuICAgKlxuICAgKiAqTm90ZTogRm9yIGN1c3RvbSBkcm9wZG93biBjb21wb25lbnRzLCB5b3Ugd2lsbCBoYXZlIHRvIHBhc3MgdGhlXG4gICAqIGByb290Q2xvc2VFdmVudGAgdG8gYDxSb290Q2xvc2VXcmFwcGVyPmAgaW4geW91ciBjdXN0b20gZHJvcGRvd24gbWVudVxuICAgKiBjb21wb25lbnQgKFtzaW1pbGFybHkgdG8gaG93IGl0IGlzIGltcGxlbWVudGVkIGluIGA8RHJvcGRvd24uTWVudT5gXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtYm9vdHN0cmFwL3JlYWN0LWJvb3RzdHJhcC9ibG9iL3YwLjMxLjUvc3JjL0Ryb3Bkb3duTWVudS5qcyNMMTE1LUwxMTkpKS4qXG4gICAqL1xuICByb290Q2xvc2VFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnY2xpY2snLCAnbW91c2Vkb3duJ10pLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogQnV0dG9uR3JvdXBcbn07XG5cbnZhciBEcm9wZG93biA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBfdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUNsb3NlID0gX3RoaXMuaGFuZGxlQ2xvc2UuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuX2ZvY3VzSW5Ecm9wZG93biA9IGZhbHNlO1xuICAgIF90aGlzLmxhc3RPcGVuRXZlbnRUeXBlID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuZm9jdXNOZXh0T25PcGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmICghbmV4dFByb3BzLm9wZW4gJiYgdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICB0aGlzLl9mb2N1c0luRHJvcGRvd24gPSBjb250YWlucyhSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLm1lbnUpLCBhY3RpdmVFbGVtZW50KGRvY3VtZW50KSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG9wZW4gPSB0aGlzLnByb3BzLm9wZW47XG4gICAgdmFyIHByZXZPcGVuID0gcHJldlByb3BzLm9wZW47XG5cbiAgICBpZiAob3BlbiAmJiAhcHJldk9wZW4pIHtcbiAgICAgIHRoaXMuZm9jdXNOZXh0T25PcGVuKCk7XG4gICAgfVxuXG4gICAgaWYgKCFvcGVuICYmIHByZXZPcGVuKSB7XG4gICAgICAvLyBpZiBmb2N1cyBoYXNuJ3QgYWxyZWFkeSBtb3ZlZCBmcm9tIHRoZSBtZW51IGxldCdzIHJldHVybiBpdFxuICAgICAgLy8gdG8gdGhlIHRvZ2dsZVxuICAgICAgaWYgKHRoaXMuX2ZvY3VzSW5Ecm9wZG93bikge1xuICAgICAgICB0aGlzLl9mb2N1c0luRHJvcGRvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZm9jdXMgPSBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICB2YXIgdG9nZ2xlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcy50b2dnbGUpO1xuXG4gICAgaWYgKHRvZ2dsZSAmJiB0b2dnbGUuZm9jdXMpIHtcbiAgICAgIHRvZ2dsZS5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZm9jdXNOZXh0T25PcGVuID0gZnVuY3Rpb24gZm9jdXNOZXh0T25PcGVuKCkge1xuICAgIHZhciBtZW51ID0gdGhpcy5tZW51O1xuXG4gICAgaWYgKCFtZW51IHx8ICFtZW51LmZvY3VzTmV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxhc3RPcGVuRXZlbnRUeXBlID09PSAna2V5ZG93bicgfHwgdGhpcy5wcm9wcy5yb2xlID09PSAnbWVudWl0ZW0nKSB7XG4gICAgICBtZW51LmZvY3VzTmV4dCgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50b2dnbGVPcGVuKGV2ZW50LCB7XG4gICAgICBzb3VyY2U6ICdjbGljaydcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiBoYW5kbGVDbG9zZShldmVudCwgZXZlbnREZXRhaWxzKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRvZ2dsZU9wZW4oZXZlbnQsIGV2ZW50RGV0YWlscyk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5kb3duOlxuICAgICAgICBpZiAoIXRoaXMucHJvcHMub3Blbikge1xuICAgICAgICAgIHRoaXMudG9nZ2xlT3BlbihldmVudCwge1xuICAgICAgICAgICAgc291cmNlOiAna2V5ZG93bidcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1lbnUuZm9jdXNOZXh0KSB7XG4gICAgICAgICAgdGhpcy5tZW51LmZvY3VzTmV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5lc2M6XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMudGFiOlxuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKGV2ZW50LCB7XG4gICAgICAgICAgc291cmNlOiAna2V5ZG93bidcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udG9nZ2xlT3BlbiA9IGZ1bmN0aW9uIHRvZ2dsZU9wZW4oZXZlbnQsIGV2ZW50RGV0YWlscykge1xuICAgIHZhciBvcGVuID0gIXRoaXMucHJvcHMub3BlbjtcblxuICAgIGlmIChvcGVuKSB7XG4gICAgICB0aGlzLmxhc3RPcGVuRXZlbnRUeXBlID0gZXZlbnREZXRhaWxzLnNvdXJjZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vblRvZ2dsZSkge1xuICAgICAgdGhpcy5wcm9wcy5vblRvZ2dsZShvcGVuLCBldmVudCwgZXZlbnREZXRhaWxzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlck1lbnUgPSBmdW5jdGlvbiByZW5kZXJNZW51KGNoaWxkLCBfcmVmKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgICBvblNlbGVjdCA9IF9yZWYub25TZWxlY3QsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3JlZi5yb290Q2xvc2VFdmVudCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpZFwiLCBcIm9uU2VsZWN0XCIsIFwicm9vdENsb3NlRXZlbnRcIl0pO1xuXG4gICAgdmFyIHJlZiA9IGZ1bmN0aW9uIHJlZihjKSB7XG4gICAgICBfdGhpczIubWVudSA9IGM7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY2hpbGQucmVmID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1N0cmluZyByZWZzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIGA8RHJvcGRvd24uTWVudT5gIGNvbXBvbmVudHMuICcgKyAnVG8gYXBwbHkgYSByZWYgdG8gdGhlIGNvbXBvbmVudCB1c2UgdGhlIGNhbGxiYWNrIHNpZ25hdHVyZTpcXG5cXG4gJyArICdodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL21vcmUtYWJvdXQtcmVmcy5odG1sI3RoZS1yZWYtY2FsbGJhY2stYXR0cmlidXRlJykgOiB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZiA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5yZWYsIHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGxhYmVsbGVkQnk6IGlkLFxuICAgICAgYnNDbGFzczogcHJlZml4KHByb3BzLCAnbWVudScpLFxuICAgICAgb25DbG9zZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnByb3BzLm9uQ2xvc2UsIHRoaXMuaGFuZGxlQ2xvc2UpLFxuICAgICAgb25TZWxlY3Q6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5wcm9wcy5vblNlbGVjdCwgb25TZWxlY3QsIGZ1bmN0aW9uIChrZXksIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2xvc2UoZXZlbnQsIHtcbiAgICAgICAgICBzb3VyY2U6ICdzZWxlY3QnXG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICByb290Q2xvc2VFdmVudDogcm9vdENsb3NlRXZlbnRcbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlclRvZ2dsZSA9IGZ1bmN0aW9uIHJlbmRlclRvZ2dsZShjaGlsZCwgcHJvcHMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciByZWYgPSBmdW5jdGlvbiByZWYoYykge1xuICAgICAgX3RoaXMzLnRvZ2dsZSA9IGM7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY2hpbGQucmVmID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1N0cmluZyByZWZzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIGA8RHJvcGRvd24uVG9nZ2xlPmAgY29tcG9uZW50cy4gJyArICdUbyBhcHBseSBhIHJlZiB0byB0aGUgY29tcG9uZW50IHVzZSB0aGUgY2FsbGJhY2sgc2lnbmF0dXJlOlxcblxcbiAnICsgJ2h0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvbW9yZS1hYm91dC1yZWZzLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGUnKSA6IHZvaWQgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVmID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnJlZiwgcmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgYnNDbGFzczogcHJlZml4KHByb3BzLCAndG9nZ2xlJyksXG4gICAgICBvbkNsaWNrOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGQucHJvcHMub25DbGljaywgdGhpcy5oYW5kbGVDbGljayksXG4gICAgICBvbktleURvd246IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5wcm9wcy5vbktleURvd24sIHRoaXMuaGFuZGxlS2V5RG93bilcbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzZXMsXG4gICAgICAgIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgZHJvcHVwID0gX3RoaXMkcHJvcHMuZHJvcHVwLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICBwdWxsUmlnaHQgPSBfdGhpcyRwcm9wcy5wdWxsUmlnaHQsXG4gICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wcy5vcGVuLFxuICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICByb2xlID0gX3RoaXMkcHJvcHMucm9sZSxcbiAgICAgICAgYnNDbGFzcyA9IF90aGlzJHByb3BzLmJzQ2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQgPSBfdGhpcyRwcm9wcy5yb290Q2xvc2VFdmVudCxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJpZFwiLCBcImRyb3B1cFwiLCBcImRpc2FibGVkXCIsIFwicHVsbFJpZ2h0XCIsIFwib3BlblwiLCBcIm9uU2VsZWN0XCIsIFwicm9sZVwiLCBcImJzQ2xhc3NcIiwgXCJjbGFzc05hbWVcIiwgXCJyb290Q2xvc2VFdmVudFwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vblRvZ2dsZTtcbiAgICB2YXIgY2xhc3NlcyA9IChfY2xhc3NlcyA9IHt9LCBfY2xhc3Nlc1tic0NsYXNzXSA9IHRydWUsIF9jbGFzc2VzLm9wZW4gPSBvcGVuLCBfY2xhc3Nlcy5kaXNhYmxlZCA9IGRpc2FibGVkLCBfY2xhc3Nlcyk7XG5cbiAgICBpZiAoZHJvcHVwKSB7XG4gICAgICBjbGFzc2VzW2JzQ2xhc3NdID0gZmFsc2U7XG4gICAgICBjbGFzc2VzLmRyb3B1cCA9IHRydWU7XG4gICAgfSAvLyBUaGlzIGludGVudGlvbmFsbHkgZm9yd2FyZHMgYnNTaXplIGFuZCBic1N0eWxlIChpZiBzZXQpIHRvIHRoZVxuICAgIC8vIHVuZGVybHlpbmcgY29tcG9uZW50LCB0byBhbGxvdyBpdCB0byByZW5kZXIgc2l6ZSBhbmQgc3R5bGUgdmFyaWFudHMuXG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pLCBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBzd2l0Y2ggKGNoaWxkLnByb3BzLmJzUm9sZSkge1xuICAgICAgICBjYXNlIFRPR0dMRV9ST0xFOlxuICAgICAgICAgIHJldHVybiBfdGhpczQucmVuZGVyVG9nZ2xlKGNoaWxkLCB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICAgICAgcm9sZTogcm9sZSxcbiAgICAgICAgICAgIGJzQ2xhc3M6IGJzQ2xhc3NcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlIE1FTlVfUk9MRTpcbiAgICAgICAgICByZXR1cm4gX3RoaXM0LnJlbmRlck1lbnUoY2hpbGQsIHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgICAgICBwdWxsUmlnaHQ6IHB1bGxSaWdodCxcbiAgICAgICAgICAgIGJzQ2xhc3M6IGJzQ2xhc3MsXG4gICAgICAgICAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgICAgICAgICByb290Q2xvc2VFdmVudDogcm9vdENsb3NlRXZlbnRcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ecm9wZG93bi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5zZXRCc0NsYXNzKCdkcm9wZG93bicsIERyb3Bkb3duKTtcbnZhciBVbmNvbnRyb2xsZWREcm9wZG93biA9IHVuY29udHJvbGxhYmxlKERyb3Bkb3duLCB7XG4gIG9wZW46ICdvblRvZ2dsZSdcbn0pO1xuVW5jb250cm9sbGVkRHJvcGRvd24uVG9nZ2xlID0gRHJvcGRvd25Ub2dnbGU7XG5VbmNvbnRyb2xsZWREcm9wZG93bi5NZW51ID0gRHJvcGRvd25NZW51O1xuZXhwb3J0IGRlZmF1bHQgVW5jb250cm9sbGVkRHJvcGRvd247IiwiaW1wb3J0IF9PYmplY3QkZW50cmllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9lbnRyaWVzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcGxpdENvbXBvbmVudFByb3BzKHByb3BzLCBDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudFByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXM7XG4gIHZhciBwYXJlbnRQcm9wcyA9IHt9O1xuICB2YXIgY2hpbGRQcm9wcyA9IHt9O1xuXG4gIF9PYmplY3QkZW50cmllcyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcm9wTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgIHByb3BWYWx1ZSA9IF9yZWZbMV07XG5cbiAgICBpZiAoY29tcG9uZW50UHJvcFR5cGVzW3Byb3BOYW1lXSkge1xuICAgICAgcGFyZW50UHJvcHNbcHJvcE5hbWVdID0gcHJvcFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBbcGFyZW50UHJvcHMsIGNoaWxkUHJvcHNdO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vRHJvcGRvd24nO1xuaW1wb3J0IHNwbGl0Q29tcG9uZW50UHJvcHMgZnJvbSAnLi91dGlscy9zcGxpdENvbXBvbmVudFByb3BzJztcblxudmFyIHByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBEcm9wZG93bi5wcm9wVHlwZXMsIHtcbiAgLy8gVG9nZ2xlIHByb3BzLlxuICBic1N0eWxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBic1NpemU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBub0NhcmV0OiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gT3ZlcnJpZGUgZ2VuZXJhdGVkIGRvY3MgZnJvbSA8RHJvcGRvd24+LlxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59KTtcblxudmFyIERyb3Bkb3duQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyb3Bkb3duQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bkJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd25CdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNTaXplID0gX3RoaXMkcHJvcHMuYnNTaXplLFxuICAgICAgICBic1N0eWxlID0gX3RoaXMkcHJvcHMuYnNTdHlsZSxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNTaXplXCIsIFwiYnNTdHlsZVwiLCBcInRpdGxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdENvbXBvbmVudFByb3BzID0gc3BsaXRDb21wb25lbnRQcm9wcyhwcm9wcywgRHJvcGRvd24uQ29udHJvbGxlZENvbXBvbmVudCksXG4gICAgICAgIGRyb3Bkb3duUHJvcHMgPSBfc3BsaXRDb21wb25lbnRQcm9wc1swXSxcbiAgICAgICAgdG9nZ2xlUHJvcHMgPSBfc3BsaXRDb21wb25lbnRQcm9wc1sxXTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLCBfZXh0ZW5kcyh7fSwgZHJvcGRvd25Qcm9wcywge1xuICAgICAgYnNTaXplOiBic1NpemUsXG4gICAgICBic1N0eWxlOiBic1N0eWxlXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uVG9nZ2xlLCBfZXh0ZW5kcyh7fSwgdG9nZ2xlUHJvcHMsIHtcbiAgICAgIGJzU2l6ZTogYnNTaXplLFxuICAgICAgYnNTdHlsZTogYnNTdHlsZVxuICAgIH0pLCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uTWVudSwgbnVsbCwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd25CdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duQnV0dG9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcblxudmFyIF9mYWRlU3R5bGVzO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb24sIHsgRU5URVJFRCwgRU5URVJJTkcgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGZhZGUgaW4gb3IgZmFkZSBvdXQgYW5pbWF0aW9uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdhaXQgdW50aWwgdGhlIGZpcnN0IFwiZW50ZXJcIiB0cmFuc2l0aW9uIHRvIG1vdW50IHRoZSBjb21wb25lbnQgKGFkZCBpdCB0byB0aGUgRE9NKVxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVW5tb3VudCB0aGUgY29tcG9uZW50IChyZW1vdmUgaXQgZnJvbSB0aGUgRE9NKSB3aGVuIGl0IGlzIGZhZGVkIG91dFxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJ1biB0aGUgZmFkZSBpbiBhbmltYXRpb24gd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cywgaWYgaXQgaXMgaW5pdGlhbGx5XG4gICAqIHNob3duXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEdXJhdGlvbiBvZiB0aGUgZmFkZSBhbmltYXRpb24gaW4gbWlsbGlzZWNvbmRzLCB0byBlbnN1cmUgdGhhdCBmaW5pc2hpbmdcbiAgICogY2FsbGJhY2tzIGFyZSBmaXJlZCBldmVuIGlmIHRoZSBvcmlnaW5hbCBicm93c2VyIHRyYW5zaXRpb24gZW5kIGV2ZW50cyBhcmVcbiAgICogY2FuY2VsZWRcbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGZhZGVzIGluXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBzdGFydHMgdG8gZmFkZSBpblxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBoYXMgY29tcG9uZW50IGZhZGVkIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBmYWRlcyBvdXRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgc3RhcnRzIHRvIGZhZGUgb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBmYWRlZCBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZVxufTtcbnZhciBmYWRlU3R5bGVzID0gKF9mYWRlU3R5bGVzID0ge30sIF9mYWRlU3R5bGVzW0VOVEVSSU5HXSA9ICdpbicsIF9mYWRlU3R5bGVzW0VOVEVSRURdID0gJ2luJywgX2ZhZGVTdHlsZXMpO1xuXG52YXIgRmFkZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGYWRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGYWRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGYWRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgcHJvcHMsIGZ1bmN0aW9uIChzdGF0dXMsIGlubmVyUHJvcHMpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHt9LCBpbm5lclByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcygnZmFkZScsIGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBmYWRlU3R5bGVzW3N0YXR1c10pXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEZhZGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZhZGUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRmFkZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGhvcml6b250YWw6IFByb3BUeXBlcy5ib29sLFxuICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBob3Jpem9udGFsOiBmYWxzZSxcbiAgaW5saW5lOiBmYWxzZSxcbiAgY29tcG9uZW50Q2xhc3M6ICdmb3JtJ1xufTtcblxudmFyIEZvcm0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRm9ybSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBob3Jpem9udGFsID0gX3RoaXMkcHJvcHMuaG9yaXpvbnRhbCxcbiAgICAgICAgaW5saW5lID0gX3RoaXMkcHJvcHMuaW5saW5lLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJob3Jpem9udGFsXCIsIFwiaW5saW5lXCIsIFwiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gW107XG5cbiAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgY2xhc3Nlcy5wdXNoKHByZWZpeChic1Byb3BzLCAnaG9yaXpvbnRhbCcpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICBjbGFzc2VzLnB1c2gocHJlZml4KGJzUHJvcHMsICdpbmxpbmUnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRm9ybS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Gb3JtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Zvcm0nLCBGb3JtKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEdseXBoaWNvbiBmcm9tICcuL0dseXBoaWNvbic7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBic1JvbGU6ICdmZWVkYmFjaydcbn07XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfZm9ybUdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG52YXIgRm9ybUNvbnRyb2xGZWVkYmFjayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGb3JtQ29udHJvbEZlZWRiYWNrLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbEZlZWRiYWNrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGb3JtQ29udHJvbEZlZWRiYWNrLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0R2x5cGggPSBmdW5jdGlvbiBnZXRHbHlwaCh2YWxpZGF0aW9uU3RhdGUpIHtcbiAgICBzd2l0Y2ggKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgIHJldHVybiAnb2snO1xuXG4gICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgcmV0dXJuICd3YXJuaW5nLXNpZ24nO1xuXG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIHJldHVybiAncmVtb3ZlJztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXJEZWZhdWx0RmVlZGJhY2sgPSBmdW5jdGlvbiByZW5kZXJEZWZhdWx0RmVlZGJhY2soZm9ybUdyb3VwLCBjbGFzc05hbWUsIGNsYXNzZXMsIGVsZW1lbnRQcm9wcykge1xuICAgIHZhciBnbHlwaCA9IHRoaXMuZ2V0R2x5cGgoZm9ybUdyb3VwICYmIGZvcm1Hcm91cC52YWxpZGF0aW9uU3RhdGUpO1xuXG4gICAgaWYgKCFnbHlwaCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2x5cGhpY29uLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBnbHlwaDogZ2x5cGgsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZWZhdWx0RmVlZGJhY2sodGhpcy5jb250ZXh0LiRic19mb3JtR3JvdXAsIGNsYXNzTmFtZSwgY2xhc3NlcywgZWxlbWVudFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGb3JtQ29udHJvbEZlZWRiYWNrO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbEZlZWRiYWNrLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkZvcm1Db250cm9sRmVlZGJhY2suY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnZm9ybS1jb250cm9sLWZlZWRiYWNrJywgRm9ybUNvbnRyb2xGZWVkYmFjayk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAncCdcbn07XG5cbnZhciBGb3JtQ29udHJvbFN0YXRpYyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGb3JtQ29udHJvbFN0YXRpYywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2xTdGF0aWMoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1Db250cm9sU3RhdGljLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sU3RhdGljO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbFN0YXRpYy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Gb3JtQ29udHJvbFN0YXRpYy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdmb3JtLWNvbnRyb2wtc3RhdGljJywgRm9ybUNvbnRyb2xTdGF0aWMpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgRm9ybUNvbnRyb2xGZWVkYmFjayBmcm9tICcuL0Zvcm1Db250cm9sRmVlZGJhY2snO1xuaW1wb3J0IEZvcm1Db250cm9sU3RhdGljIGZyb20gJy4vRm9ybUNvbnRyb2xTdGF0aWMnO1xuaW1wb3J0IHsgcHJlZml4LCBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzLCBic1NpemVzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBTSVpFX01BUCwgU2l6ZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBPbmx5IHJlbGV2YW50IGlmIGBjb21wb25lbnRDbGFzc2AgaXMgYCdpbnB1dCdgLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlcyBgY29udHJvbElkYCBmcm9tIGA8Rm9ybUdyb3VwPmAgaWYgbm90IGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgcmVmIHRvIHRoZSBgPGlucHV0PmAgZWxlbWVudC4gT25seSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgaGVyZS5cbiAgICpcbiAgICogYGBganNcbiAgICogPEZvcm1Db250cm9sIGlucHV0UmVmPXtyZWYgPT4geyB0aGlzLmlucHV0ID0gcmVmOyB9fSAvPlxuICAgKiBgYGBcbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnaW5wdXQnXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogUHJvcFR5cGVzLm9iamVjdFxufTtcblxudmFyIEZvcm1Db250cm9sID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEZvcm1Db250cm9sLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGZvcm1Hcm91cCA9IHRoaXMuY29udGV4dC4kYnNfZm9ybUdyb3VwO1xuICAgIHZhciBjb250cm9sSWQgPSBmb3JtR3JvdXAgJiYgZm9ybUdyb3VwLmNvbnRyb2xJZDtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcyRpZCA9PT0gdm9pZCAwID8gY29udHJvbElkIDogX3RoaXMkcHJvcHMkaWQsXG4gICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYnNTaXplID0gX3RoaXMkcHJvcHMuYnNTaXplLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcInR5cGVcIiwgXCJpZFwiLCBcImlucHV0UmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwiYnNTaXplXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbnRyb2xJZCA9PSBudWxsIHx8IGlkID09PSBjb250cm9sSWQsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Rm9ybUNvbnRyb2w+YCB3aGVuIGBpZGAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwOyAvLyBpbnB1dFt0eXBlPVwiZmlsZVwiXSBzaG91bGQgbm90IGhhdmUgLmZvcm0tY29udHJvbC5cblxuICAgIHZhciBjbGFzc2VzO1xuXG4gICAgaWYgKHR5cGUgIT09ICdmaWxlJykge1xuICAgICAgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIH0gLy8gSWYgdXNlciBwcm92aWRlcyBhIHNpemUsIG1ha2Ugc3VyZSB0byBhcHBlbmQgaXQgdG8gY2xhc3NlcyBhcyBpbnB1dC1cbiAgICAvLyBlLmcuIGlmIGJzU2l6ZSBpcyBzbWFsbCwgaXQgd2lsbCBhcHBlbmQgaW5wdXQtc21cblxuXG4gICAgaWYgKGJzU2l6ZSkge1xuICAgICAgdmFyIHNpemUgPSBTSVpFX01BUFtic1NpemVdIHx8IGJzU2l6ZTtcbiAgICAgIGNsYXNzZXNbcHJlZml4KHtcbiAgICAgICAgYnNDbGFzczogJ2lucHV0J1xuICAgICAgfSwgc2l6ZSldID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBpZDogaWQsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Gb3JtQ29udHJvbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5Gb3JtQ29udHJvbC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5Gb3JtQ29udHJvbC5GZWVkYmFjayA9IEZvcm1Db250cm9sRmVlZGJhY2s7XG5Gb3JtQ29udHJvbC5TdGF0aWMgPSBGb3JtQ29udHJvbFN0YXRpYztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Zvcm0tY29udHJvbCcsIGJzU2l6ZXMoW1NpemUuU01BTEwsIFNpemUuTEFSR0VdLCBGb3JtQ29udHJvbCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBic0NsYXNzLCBic1NpemVzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xuaW1wb3J0IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4gZnJvbSAnLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXRzIGBpZGAgb24gYDxGb3JtQ29udHJvbD5gIGFuZCBgaHRtbEZvcmAgb24gYDxGb3JtR3JvdXAuTGFiZWw+YC5cbiAgICovXG4gIGNvbnRyb2xJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmFsaWRhdGlvblN0YXRlOiBQcm9wVHlwZXMub25lT2YoWydzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InLCBudWxsXSlcbn07XG52YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICRic19mb3JtR3JvdXA6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxudmFyIEZvcm1Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGb3JtR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvcm1Hcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvbnRyb2xJZCA9IF90aGlzJHByb3BzLmNvbnRyb2xJZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3RoaXMkcHJvcHMudmFsaWRhdGlvblN0YXRlO1xuICAgIHJldHVybiB7XG4gICAgICAkYnNfZm9ybUdyb3VwOiB7XG4gICAgICAgIGNvbnRyb2xJZDogY29udHJvbElkLFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGU6IHZhbGlkYXRpb25TdGF0ZVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhc0ZlZWRiYWNrID0gZnVuY3Rpb24gaGFzRmVlZGJhY2soY2hpbGRyZW4pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uc29tZShjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQucHJvcHMuYnNSb2xlID09PSAnZmVlZGJhY2snIHx8IGNoaWxkLnByb3BzLmNoaWxkcmVuICYmIF90aGlzLmhhc0ZlZWRiYWNrKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGUgPSBfdGhpcyRwcm9wczIudmFsaWRhdGlvblN0YXRlLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcInZhbGlkYXRpb25TdGF0ZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnY29udHJvbElkJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgICdoYXMtZmVlZGJhY2snOiB0aGlzLmhhc0ZlZWRiYWNrKGNoaWxkcmVuKVxuICAgIH0pO1xuXG4gICAgaWYgKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2xhc3Nlc1tcImhhcy1cIiArIHZhbGlkYXRpb25TdGF0ZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybUdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtR3JvdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRm9ybUdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdmb3JtLWdyb3VwJywgYnNTaXplcyhbU2l6ZS5MQVJHRSwgU2l6ZS5TTUFMTF0sIEZvcm1Hcm91cCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUdXJuIGFueSBmaXhlZC13aWR0aCBncmlkIGxheW91dCBpbnRvIGEgZnVsbC13aWR0aCBsYXlvdXQgYnkgdGhpcyBwcm9wZXJ0eS5cbiAgICpcbiAgICogQWRkcyBgY29udGFpbmVyLWZsdWlkYCBjbGFzcy5cbiAgICovXG4gIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IGNhbiB1c2UgYSBjdXN0b20gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnRcbiAgICovXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2JyxcbiAgZmx1aWQ6IGZhbHNlXG59O1xuXG52YXIgR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShHcmlkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBHcmlkKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBHcmlkLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZsdWlkID0gX3RoaXMkcHJvcHMuZmx1aWQsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImZsdWlkXCIsIFwiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gcHJlZml4KGJzUHJvcHMsIGZsdWlkICYmICdmbHVpZCcpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEdyaWQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkdyaWQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuR3JpZC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdjb250YWluZXInLCBHcmlkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBIZWxwQmxvY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGVscEJsb2NrLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIZWxwQmxvY2soKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhlbHBCbG9jay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEhlbHBCbG9jaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnaGVscC1ibG9jaycsIEhlbHBCbG9jayk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGJzQ2xhc3MsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V0cyBpbWFnZSBhcyByZXNwb25zaXZlIGltYWdlXG4gICAqL1xuICByZXNwb25zaXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0cyBpbWFnZSBzaGFwZSBhcyByb3VuZGVkXG4gICAqL1xuICByb3VuZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0cyBpbWFnZSBzaGFwZSBhcyBjaXJjbGVcbiAgICovXG4gIGNpcmNsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNldHMgaW1hZ2Ugc2hhcGUgYXMgdGh1bWJuYWlsXG4gICAqL1xuICB0aHVtYm5haWw6IFByb3BUeXBlcy5ib29sXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gIHJvdW5kZWQ6IGZhbHNlLFxuICBjaXJjbGU6IGZhbHNlLFxuICB0aHVtYm5haWw6IGZhbHNlXG59O1xuXG52YXIgSW1hZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW1hZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEltYWdlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbWFnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzZXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXNwb25zaXZlID0gX3RoaXMkcHJvcHMucmVzcG9uc2l2ZSxcbiAgICAgICAgcm91bmRlZCA9IF90aGlzJHByb3BzLnJvdW5kZWQsXG4gICAgICAgIGNpcmNsZSA9IF90aGlzJHByb3BzLmNpcmNsZSxcbiAgICAgICAgdGh1bWJuYWlsID0gX3RoaXMkcHJvcHMudGh1bWJuYWlsLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcInJlc3BvbnNpdmVcIiwgXCJyb3VuZGVkXCIsIFwiY2lyY2xlXCIsIFwidGh1bWJuYWlsXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IChfY2xhc3NlcyA9IHt9LCBfY2xhc3Nlc1twcmVmaXgoYnNQcm9wcywgJ3Jlc3BvbnNpdmUnKV0gPSByZXNwb25zaXZlLCBfY2xhc3Nlc1twcmVmaXgoYnNQcm9wcywgJ3JvdW5kZWQnKV0gPSByb3VuZGVkLCBfY2xhc3Nlc1twcmVmaXgoYnNQcm9wcywgJ2NpcmNsZScpXSA9IGNpcmNsZSwgX2NsYXNzZXNbcHJlZml4KGJzUHJvcHMsICd0aHVtYm5haWwnKV0gPSB0aHVtYm5haWwsIF9jbGFzc2VzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW1hZ2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkltYWdlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkltYWdlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2ltZycsIEltYWdlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBJbnB1dEdyb3VwQWRkb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5wdXRHcm91cEFkZG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbnB1dEdyb3VwQWRkb24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IElucHV0R3JvdXBBZGRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIElucHV0R3JvdXBBZGRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnaW5wdXQtZ3JvdXAtYWRkb24nLCBJbnB1dEdyb3VwQWRkb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIElucHV0R3JvdXBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5wdXRHcm91cEJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cEJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW5wdXRHcm91cEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIElucHV0R3JvdXBCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2lucHV0LWdyb3VwLWJ0bicsIElucHV0R3JvdXBCdXR0b24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbnB1dEdyb3VwQWRkb24gZnJvbSAnLi9JbnB1dEdyb3VwQWRkb24nO1xuaW1wb3J0IElucHV0R3JvdXBCdXR0b24gZnJvbSAnLi9JbnB1dEdyb3VwQnV0dG9uJztcbmltcG9ydCB7IGJzQ2xhc3MsIGJzU2l6ZXMsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIElucHV0R3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5wdXRHcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW5wdXRHcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIElucHV0R3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbklucHV0R3JvdXAuQWRkb24gPSBJbnB1dEdyb3VwQWRkb247XG5JbnB1dEdyb3VwLkJ1dHRvbiA9IElucHV0R3JvdXBCdXR0b247XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdpbnB1dC1ncm91cCcsIGJzU2l6ZXMoW1NpemUuTEFSR0UsIFNpemUuU01BTExdLCBJbnB1dEdyb3VwKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIEp1bWJvdHJvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShKdW1ib3Ryb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEp1bWJvdHJvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSnVtYm90cm9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEp1bWJvdHJvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSnVtYm90cm9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkp1bWJvdHJvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdqdW1ib3Ryb24nLCBKdW1ib3Ryb24pOyIsImltcG9ydCBfT2JqZWN0JHZhbHVlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGJzQ2xhc3MsIGJzU3R5bGVzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBTdGF0ZSwgU3R5bGUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIExhYmVsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExhYmVsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMYWJlbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGFiZWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYXNDb250ZW50ID0gZnVuY3Rpb24gaGFzQ29udGVudChjaGlsZHJlbikge1xuICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQgfHwgY2hpbGQgPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgIC8vIEhhY2sgZm9yIGNvbGxhcHNpbmcgb24gSUU4LlxuICAgICAgaGlkZGVuOiAhdGhpcy5oYXNDb250ZW50KGNoaWxkcmVuKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gTGFiZWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2xhYmVsJywgYnNTdHlsZXMoX09iamVjdCR2YWx1ZXMoU3RhdGUpLmNvbmNhdChbU3R5bGUuREVGQVVMVCwgU3R5bGUuUFJJTUFSWV0pLCBTdHlsZS5ERUZBVUxULCBMYWJlbCkpOyIsImltcG9ydCBfT2JqZWN0JHZhbHVlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBic0NsYXNzLCBic1N0eWxlcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYW55LFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmFueSxcbiAgaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcbiAgbGlzdEl0ZW06IFByb3BUeXBlcy5ib29sLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGxpc3RJdGVtOiBmYWxzZVxufTtcblxudmFyIExpc3RHcm91cEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlzdEdyb3VwSXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdEdyb3VwSXRlbSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwSXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlckhlYWRlciA9IGZ1bmN0aW9uIHJlbmRlckhlYWRlcihoZWFkZXIsIGhlYWRpbmdDbGFzc05hbWUpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoaGVhZGVyKSkge1xuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChoZWFkZXIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGhlYWRlci5wcm9wcy5jbGFzc05hbWUsIGhlYWRpbmdDbGFzc05hbWUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImg0XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogaGVhZGluZ0NsYXNzTmFtZVxuICAgIH0sIGhlYWRlcik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgaGVhZGVyID0gX3RoaXMkcHJvcHMuaGVhZGVyLFxuICAgICAgICBsaXN0SXRlbSA9IF90aGlzJHByb3BzLmxpc3RJdGVtLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhY3RpdmVcIiwgXCJkaXNhYmxlZFwiLCBcImNsYXNzTmFtZVwiLCBcImhlYWRlclwiLCBcImxpc3RJdGVtXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCB7XG4gICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pO1xuXG4gICAgdmFyIENvbXBvbmVudDtcblxuICAgIGlmIChlbGVtZW50UHJvcHMuaHJlZikge1xuICAgICAgQ29tcG9uZW50ID0gJ2EnO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFByb3BzLm9uQ2xpY2spIHtcbiAgICAgIENvbXBvbmVudCA9ICdidXR0b24nO1xuICAgICAgZWxlbWVudFByb3BzLnR5cGUgPSBlbGVtZW50UHJvcHMudHlwZSB8fCAnYnV0dG9uJztcbiAgICB9IGVsc2UgaWYgKGxpc3RJdGVtKSB7XG4gICAgICBDb21wb25lbnQgPSAnbGknO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb21wb25lbnQgPSAnc3Bhbic7XG4gICAgfVxuXG4gICAgZWxlbWVudFByb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKTsgLy8gVE9ETzogRGVwcmVjYXRlIGBoZWFkZXJgIHByb3AuXG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnRQcm9wcywgdGhpcy5yZW5kZXJIZWFkZXIoaGVhZGVyLCBwcmVmaXgoYnNQcm9wcywgJ2hlYWRpbmcnKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ3RleHQnKVxuICAgICAgfSwgY2hpbGRyZW4pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnRQcm9wcywgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBMaXN0R3JvdXBJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaXN0R3JvdXBJdGVtLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkxpc3RHcm91cEl0ZW0uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbGlzdC1ncm91cC1pdGVtJywgYnNTdHlsZXMoX09iamVjdCR2YWx1ZXMoU3RhdGUpLCBMaXN0R3JvdXBJdGVtKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCBMaXN0R3JvdXBJdGVtIGZyb20gJy4vTGlzdEdyb3VwSXRlbSc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIGEgY3VzdG9tIGVsZW1lbnQgdHlwZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIGl0IHdpbGwgYmUgdHJlYXRlZCBhcyBgJ2xpJ2AgaWYgZXZlcnkgY2hpbGQgaXMgYVxuICAgKiBub24tYWN0aW9uYWJsZSBgPExpc3RHcm91cEl0ZW0+YCwgYW5kIGAnZGl2J2Agb3RoZXJ3aXNlLlxuICAgKi9cbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0Q29tcG9uZW50KGNoaWxkcmVuKSB7XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICAvLyBGSVhNRTogVGhpcyBpcyB0aGUgb2xkIGJlaGF2aW9yLiBJcyB0aGlzIHJpZ2h0P1xuICAgIHJldHVybiAnZGl2JztcbiAgfVxuXG4gIGlmIChWYWxpZENvbXBvbmVudENoaWxkcmVuLnNvbWUoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC50eXBlICE9PSBMaXN0R3JvdXBJdGVtIHx8IGNoaWxkLnByb3BzLmhyZWYgfHwgY2hpbGQucHJvcHMub25DbGljaztcbiAgfSkpIHtcbiAgICByZXR1cm4gJ2Rpdic7XG4gIH1cblxuICByZXR1cm4gJ3VsJztcbn1cblxudmFyIExpc3RHcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaXN0R3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3RHcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIF90aGlzJHByb3BzJGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/IGdldERlZmF1bHRDb21wb25lbnQoY2hpbGRyZW4pIDogX3RoaXMkcHJvcHMkY29tcG9uZW50LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgdmFyIHVzZUxpc3RJdGVtID0gQ29tcG9uZW50ID09PSAndWwnICYmIFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZXZlcnkoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnR5cGUgPT09IExpc3RHcm91cEl0ZW07XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pLCB1c2VMaXN0SXRlbSA/IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgbGlzdEl0ZW06IHRydWVcbiAgICAgIH0pO1xuICAgIH0pIDogY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBMaXN0R3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3RHcm91cC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdsaXN0LWdyb3VwJywgTGlzdEdyb3VwKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCBNZWRpYSBmcm9tICcuL01lZGlhJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFsaWduIHRoZSBtZWRpYSB0byB0aGUgdG9wLCBtaWRkbGUsIG9yIGJvdHRvbSBvZiB0aGUgbWVkaWEgb2JqZWN0LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdtaWRkbGUnLCAnYm90dG9tJ10pLFxuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBNZWRpYUJvZHkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVkaWFCb2R5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZWRpYUJvZHkoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lZGlhQm9keS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgYWxpZ24gPSBfdGhpcyRwcm9wcy5hbGlnbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImFsaWduXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgaWYgKGFsaWduKSB7XG4gICAgICAvLyBUaGUgY2xhc3MgaXMgZS5nLiBgbWVkaWEtdG9wYCwgbm90IGBtZWRpYS1sZWZ0LXRvcGAuXG4gICAgICBjbGFzc2VzW3ByZWZpeChNZWRpYS5kZWZhdWx0UHJvcHMsIGFsaWduKV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lZGlhQm9keTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVkaWFCb2R5LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1lZGlhQm9keS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtZWRpYS1ib2R5JywgTWVkaWFCb2R5KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdoNCdcbn07XG5cbnZhciBNZWRpYUhlYWRpbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVkaWFIZWFkaW5nLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZWRpYUhlYWRpbmcoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lZGlhSGVhZGluZy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNZWRpYUhlYWRpbmc7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhSGVhZGluZy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5NZWRpYUhlYWRpbmcuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEtaGVhZGluZycsIE1lZGlhSGVhZGluZyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBNZWRpYSBmcm9tICcuL01lZGlhJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFsaWduIHRoZSBtZWRpYSB0byB0aGUgdG9wLCBtaWRkbGUsIG9yIGJvdHRvbSBvZiB0aGUgbWVkaWEgb2JqZWN0LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdtaWRkbGUnLCAnYm90dG9tJ10pXG59O1xuXG52YXIgTWVkaWFMZWZ0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lZGlhTGVmdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVkaWFMZWZ0KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZWRpYUxlZnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWxpZ24gPSBfdGhpcyRwcm9wcy5hbGlnbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIGlmIChhbGlnbikge1xuICAgICAgLy8gVGhlIGNsYXNzIGlzIGUuZy4gYG1lZGlhLXRvcGAsIG5vdCBgbWVkaWEtbGVmdC10b3BgLlxuICAgICAgY2xhc3Nlc1twcmVmaXgoTWVkaWEuZGVmYXVsdFByb3BzLCBhbGlnbildID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWFMZWZ0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZWRpYUxlZnQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEtbGVmdCcsIE1lZGlhTGVmdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgTWVkaWFMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lZGlhTGlzdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVkaWFMaXN0KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZWRpYUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWFMaXN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtZWRpYS1saXN0JywgTWVkaWFMaXN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBNZWRpYUxpc3RJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lZGlhTGlzdEl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhTGlzdEl0ZW0oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lZGlhTGlzdEl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWFMaXN0SXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEnLCBNZWRpYUxpc3RJdGVtKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQWxpZ24gdGhlIG1lZGlhIHRvIHRoZSB0b3AsIG1pZGRsZSwgb3IgYm90dG9tIG9mIHRoZSBtZWRpYSBvYmplY3QuXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ21pZGRsZScsICdib3R0b20nXSlcbn07XG5cbnZhciBNZWRpYVJpZ2h0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lZGlhUmlnaHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhUmlnaHQoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lZGlhUmlnaHQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWxpZ24gPSBfdGhpcyRwcm9wcy5hbGlnbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIGlmIChhbGlnbikge1xuICAgICAgLy8gVGhlIGNsYXNzIGlzIGUuZy4gYG1lZGlhLXRvcGAsIG5vdCBgbWVkaWEtcmlnaHQtdG9wYC5cbiAgICAgIGNsYXNzZXNbcHJlZml4KE1lZGlhLmRlZmF1bHRQcm9wcywgYWxpZ24pXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lZGlhUmlnaHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhUmlnaHQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEtcmlnaHQnLCBNZWRpYVJpZ2h0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IE1lZGlhQm9keSBmcm9tICcuL01lZGlhQm9keSc7XG5pbXBvcnQgTWVkaWFIZWFkaW5nIGZyb20gJy4vTWVkaWFIZWFkaW5nJztcbmltcG9ydCBNZWRpYUxlZnQgZnJvbSAnLi9NZWRpYUxlZnQnO1xuaW1wb3J0IE1lZGlhTGlzdCBmcm9tICcuL01lZGlhTGlzdCc7XG5pbXBvcnQgTWVkaWFMaXN0SXRlbSBmcm9tICcuL01lZGlhTGlzdEl0ZW0nO1xuaW1wb3J0IE1lZGlhUmlnaHQgZnJvbSAnLi9NZWRpYVJpZ2h0JztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIE1lZGlhID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lZGlhLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZWRpYSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVkaWEucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWE7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1lZGlhLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk1lZGlhLkhlYWRpbmcgPSBNZWRpYUhlYWRpbmc7XG5NZWRpYS5Cb2R5ID0gTWVkaWFCb2R5O1xuTWVkaWEuTGVmdCA9IE1lZGlhTGVmdDtcbk1lZGlhLlJpZ2h0ID0gTWVkaWFSaWdodDtcbk1lZGlhLkxpc3QgPSBNZWRpYUxpc3Q7XG5NZWRpYS5MaXN0SXRlbSA9IE1lZGlhTGlzdEl0ZW07XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtZWRpYScsIE1lZGlhKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgYWxsIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2FsbCc7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgYnNDbGFzcywgcHJlZml4LCBzcGxpdEJzUHJvcHNBbmRPbWl0IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBIaWdobGlnaHQgdGhlIG1lbnUgaXRlbSBhcyBhY3RpdmUuXG4gICAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBtZW51IGl0ZW0sIG1ha2luZyBpdCB1bnNlbGVjdGFibGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFN0eWxlcyB0aGUgbWVudSBpdGVtIGFzIGEgaG9yaXpvbnRhbCBydWxlLCBwcm92aWRpbmcgdmlzdWFsIHNlcGFyYXRpb24gYmV0d2VlblxuICAgKiBncm91cHMgb2YgbWVudSBpdGVtcy5cbiAgICovXG4gIGRpdmlkZXI6IGFsbChQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGl2aWRlciA9IF9yZWYuZGl2aWRlcixcbiAgICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICAgIHJldHVybiBkaXZpZGVyICYmIGNoaWxkcmVuID8gbmV3IEVycm9yKCdDaGlsZHJlbiB3aWxsIG5vdCBiZSByZW5kZXJlZCBmb3IgZGl2aWRlcnMnKSA6IG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBWYWx1ZSBwYXNzZWQgdG8gdGhlIGBvblNlbGVjdGAgaGFuZGxlciwgdXNlZnVsIGZvciBpZGVudGlmeWluZyB0aGUgc2VsZWN0ZWQgbWVudSBpdGVtLlxuICAgKi9cbiAgZXZlbnRLZXk6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFN0eWxlcyB0aGUgbWVudSBpdGVtIGFzIGEgaGVhZGVyIGxhYmVsLCB1c2VmdWwgZm9yIGRlc2NyaWJpbmcgYSBncm91cCBvZiBtZW51IGl0ZW1zLlxuICAgKi9cbiAgaGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSFRNTCBgaHJlZmAgYXR0cmlidXRlIGNvcnJlc3BvbmRpbmcgdG8gYGEuaHJlZmAuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBtZW51IGl0ZW0gaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIChldmVudEtleTogYW55LCBldmVudDogT2JqZWN0KSA9PiBhbnlcbiAgICogYGBgXG4gICAqL1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkaXZpZGVyOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBoZWFkZXI6IGZhbHNlXG59O1xuXG52YXIgTWVudUl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVudUl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbnVJdGVtKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaHJlZiA9IF90aGlzJHByb3BzLmhyZWYsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgIGV2ZW50S2V5ID0gX3RoaXMkcHJvcHMuZXZlbnRLZXk7XG5cbiAgICBpZiAoIWhyZWYgfHwgZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBvblNlbGVjdChldmVudEtleSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wczIuYWN0aXZlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgZGl2aWRlciA9IF90aGlzJHByb3BzMi5kaXZpZGVyLFxuICAgICAgICBoZWFkZXIgPSBfdGhpcyRwcm9wczIuaGVhZGVyLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMyLm9uQ2xpY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYWN0aXZlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXZpZGVyXCIsIFwiaGVhZGVyXCIsIFwib25DbGlja1wiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnZXZlbnRLZXknLCAnb25TZWxlY3QnXSksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFswXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMV07XG5cbiAgICBpZiAoZGl2aWRlcikge1xuICAgICAgLy8gRm9yY2libHkgYmxhbmsgb3V0IHRoZSBjaGlsZHJlbjsgc2VwYXJhdG9ycyBzaG91bGRuJ3QgcmVuZGVyIGFueS5cbiAgICAgIGVsZW1lbnRQcm9wcy5jaGlsZHJlbiA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgICByb2xlOiBcInNlcGFyYXRvclwiLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAnZGl2aWRlcicpLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgICAgcm9sZTogXCJoZWFkaW5nXCIsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAnaGVhZGVyJykpLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB7XG4gICAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICByb2xlOiBcIm1lbnVpdGVtXCIsXG4gICAgICB0YWJJbmRleDogXCItMVwiLFxuICAgICAgb25DbGljazogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uQ2xpY2ssIHRoaXMuaGFuZGxlQ2xpY2spXG4gICAgfSkpKTtcbiAgfTtcblxuICByZXR1cm4gTWVudUl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbnVJdGVtLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1lbnVJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Ryb3Bkb3duJywgTWVudUl0ZW0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBNb2RhbEJvZHkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTW9kYWxCb2R5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEJvZHkoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsQm9keS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEJvZHk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsQm9keS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbEJvZHkuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbW9kYWwtYm9keScsIE1vZGFsQm9keSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGJzQ2xhc3MsIGJzU2l6ZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgY3NzIGNsYXNzIHRvIGFwcGx5IHRvIHRoZSBNb2RhbCBkaWFsb2cgRE9NIG5vZGUuXG4gICAqL1xuICBkaWFsb2dDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBNb2RhbERpYWxvZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbERpYWxvZywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxEaWFsb2coKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsRGlhbG9nLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBkaWFsb2dDbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5kaWFsb2dDbGFzc05hbWUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgb25Nb3VzZURvd25EaWFsb2cgPSBfdGhpcyRwcm9wcy5vbk1vdXNlRG93bkRpYWxvZyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiZGlhbG9nQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJjaGlsZHJlblwiLCBcIm9uTW91c2VEb3duRGlhbG9nXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgYnNDbGFzc05hbWUgPSBwcmVmaXgoYnNQcm9wcyk7XG5cbiAgICB2YXIgbW9kYWxTdHlsZSA9IF9leHRlbmRzKHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LCBzdHlsZSk7XG5cbiAgICB2YXIgZGlhbG9nQ2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbYnNDbGFzc05hbWVdID0gZmFsc2UsIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2RpYWxvZycpXSA9IHRydWUsIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgICBzdHlsZTogbW9kYWxTdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzQ2xhc3NOYW1lKVxuICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhkaWFsb2dDbGFzc05hbWUsIGRpYWxvZ0NsYXNzZXMpLFxuICAgICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duRGlhbG9nXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IHByZWZpeChic1Byb3BzLCAnY29udGVudCcpLFxuICAgICAgcm9sZTogXCJkb2N1bWVudFwiXG4gICAgfSwgY2hpbGRyZW4pKSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsRGlhbG9nO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbERpYWxvZy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtb2RhbCcsIGJzU2l6ZXMoW1NpemUuTEFSR0UsIFNpemUuU01BTExdLCBNb2RhbERpYWxvZykpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBNb2RhbEZvb3RlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbEZvb3RlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxGb290ZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsRm9vdGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsRm9vdGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbEZvb3Rlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbEZvb3Rlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtb2RhbC1mb290ZXInLCBNb2RhbEZvb3Rlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IENsb3NlQnV0dG9uIGZyb20gJy4vQ2xvc2VCdXR0b24nOyAvLyBUT0RPOiBgYXJpYS1sYWJlbGAgc2hvdWxkIGJlIGBjbG9zZUxhYmVsYC5cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFuIGFjY2Vzc2libGUgbGFiZWwgZm9yIHRoZSBjbG9zZVxuICAgKiBidXR0b24uIEl0IGlzIHVzZWQgZm9yIEFzc2lzdGl2ZSBUZWNobm9sb2d5IHdoZW4gdGhlIGxhYmVsIHRleHQgaXMgbm90XG4gICAqIHJlYWRhYmxlLlxuICAgKi9cbiAgY2xvc2VMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBDb21wb25lbnQgc2hvdWxkIGNvbnRhaW4gYSBjbG9zZSBidXR0b25cbiAgICovXG4gIGNsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjbG9zZSBidXR0b24gaXMgY2xpY2tlZC4gSWYgdXNlZCBkaXJlY3RseSBpbnNpZGVcbiAgICogYSBNb2RhbCBjb21wb25lbnQsIHRoZSBvbkhpZGUgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHByb3BhZ2F0ZWQgdXAgdG8gdGhlXG4gICAqIHBhcmVudCBNb2RhbCBgb25IaWRlYC5cbiAgICovXG4gIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjbG9zZUxhYmVsOiAnQ2xvc2UnLFxuICBjbG9zZUJ1dHRvbjogZmFsc2Vcbn07XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfbW9kYWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgb25IaWRlOiBQcm9wVHlwZXMuZnVuY1xuICB9KVxufTtcblxudmFyIE1vZGFsSGVhZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEhlYWRlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxIZWFkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF90aGlzJHByb3BzLmNsb3NlTGFiZWwsXG4gICAgICAgIGNsb3NlQnV0dG9uID0gX3RoaXMkcHJvcHMuY2xvc2VCdXR0b24sXG4gICAgICAgIG9uSGlkZSA9IF90aGlzJHByb3BzLm9uSGlkZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbG9zZUxhYmVsXCIsIFwiY2xvc2VCdXR0b25cIiwgXCJvbkhpZGVcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgbW9kYWwgPSB0aGlzLmNvbnRleHQuJGJzX21vZGFsO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSwgY2xvc2VCdXR0b24gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgICAgbGFiZWw6IGNsb3NlTGFiZWwsXG4gICAgICBvbkNsaWNrOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24obW9kYWwgJiYgbW9kYWwub25IaWRlLCBvbkhpZGUpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxIZWFkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsSGVhZGVyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsSGVhZGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk1vZGFsSGVhZGVyLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ21vZGFsLWhlYWRlcicsIE1vZGFsSGVhZGVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdoNCdcbn07XG5cbnZhciBNb2RhbFRpdGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsVGl0bGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsVGl0bGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsVGl0bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxUaXRsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxUaXRsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbFRpdGxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ21vZGFsLXRpdGxlJywgTW9kYWxUaXRsZSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBldmVudHMgZnJvbSAnZG9tLWhlbHBlcnMvZXZlbnRzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhblVzZURPTSBmcm9tICdkb20taGVscGVycy91dGlsL2luRE9NJztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJ2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEJhc2VNb2RhbCBmcm9tICdyZWFjdC1vdmVybGF5cy9saWIvTW9kYWwnO1xuaW1wb3J0IGlzT3ZlcmZsb3dpbmcgZnJvbSAncmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2lzT3ZlcmZsb3dpbmcnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5pbXBvcnQgQm9keSBmcm9tICcuL01vZGFsQm9keSc7XG5pbXBvcnQgTW9kYWxEaWFsb2cgZnJvbSAnLi9Nb2RhbERpYWxvZyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vTW9kYWxGb290ZXInO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL01vZGFsSGVhZGVyJztcbmltcG9ydCBUaXRsZSBmcm9tICcuL01vZGFsVGl0bGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgYnNTaXplcywgcHJlZml4IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBzcGxpdENvbXBvbmVudFByb3BzIGZyb20gJy4vdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wcyc7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5cbnZhciBwcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgQmFzZU1vZGFsLnByb3BUeXBlcywgTW9kYWxEaWFsb2cucHJvcFR5cGVzLCB7XG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgYmFja2Ryb3AgY29tcG9uZW50LiBTcGVjaWZ5ICdzdGF0aWMnIGZvciBhIGJhY2tkcm9wIHRoYXQgZG9lc24ndFxuICAgKiB0cmlnZ2VyIGFuIFwib25IaWRlXCIgd2hlbiBjbGlja2VkLlxuICAgKi9cbiAgYmFja2Ryb3A6IFByb3BUeXBlcy5vbmVPZihbJ3N0YXRpYycsIHRydWUsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBvcHRpb25hbCBleHRyYSBjbGFzcyBuYW1lIHRvIC5tb2RhbC1iYWNrZHJvcFxuICAgKiBJdCBjb3VsZCBlbmQgdXAgbG9va2luZyBsaWtlIGNsYXNzPVwibW9kYWwtYmFja2Ryb3AgZm9vLW1vZGFsLWJhY2tkcm9wIGluXCIuXG4gICAqL1xuICBiYWNrZHJvcENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2xvc2UgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBrZXlib2FyZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE9wZW4gYW5kIGNsb3NlIHRoZSBNb2RhbCB3aXRoIGEgc2xpZGUgYW5kIGZhZGUgYW5pbWF0aW9uLlxuICAgKi9cbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBDb21wb25lbnQgdHlwZSB0aGF0IHByb3ZpZGVzIHRoZSBtb2RhbCBjb250ZW50IE1hcmt1cC4gVGhpcyBpcyBhIHVzZWZ1bFxuICAgKiBwcm9wIHdoZW4geW91IHdhbnQgdG8gdXNlIHlvdXIgb3duIHN0eWxlcyBhbmQgbWFya3VwIHRvIGNyZWF0ZSBhIGN1c3RvbVxuICAgKiBtb2RhbCBjb21wb25lbnQuXG4gICAqL1xuICBkaWFsb2dDb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXRcbiAgICogb3BlbnMsIGFuZCByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBmYWxzZSBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuLXJlYWRlcnMuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgTW9kYWwgd2hpbGVcbiAgICogb3Blbi4gQ29uc2lkZXIgbGVhdmluZyB0aGUgZGVmYXVsdCB2YWx1ZSBoZXJlLCBhcyBpdCBpcyBuZWNlc3NhcnkgdG8gbWFrZVxuICAgKiB0aGUgTW9kYWwgd29yayB3ZWxsIHdpdGggYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW5cbiAgICovXG4gIHJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHNob3cgaXRzZWxmLlxuICAgKi9cbiAgc2hvdzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgaGVhZGVyIGNsb3NlQnV0dG9uIG9yIG5vbi1zdGF0aWMgYmFja2Ryb3AgaXNcbiAgICogY2xpY2tlZC4gUmVxdWlyZWQgaWYgZWl0aGVyIGFyZSBzcGVjaWZpZWQuXG4gICAqL1xuICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRhaW5lcjogQmFzZU1vZGFsLnByb3BUeXBlcy5jb250YWluZXJcbn0pO1xuXG52YXIgZGVmYXVsdFByb3BzID0gX2V4dGVuZHMoe30sIEJhc2VNb2RhbC5kZWZhdWx0UHJvcHMsIHtcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBkaWFsb2dDb21wb25lbnRDbGFzczogTW9kYWxEaWFsb2dcbn0pO1xuXG52YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICRic19tb2RhbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jXG4gIH0pXG59O1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cblxuZnVuY3Rpb24gRGlhbG9nVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB0aW1lb3V0OiBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gQmFja2Ryb3BUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZhZGUsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHRpbWVvdXQ6IE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT05cbiAgfSkpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG5cbnZhciBNb2RhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWwocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZURpYWxvZ0JhY2tkcm9wTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgdmFyIGRpYWxvZ05vZGUgPSBfdGhpcy5fbW9kYWwuZ2V0RGlhbG9nRWxlbWVudCgpO1xuXG4gICAgICBpZiAoX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwICYmIGV2LnRhcmdldCA9PT0gZGlhbG9nTm9kZSkge1xuICAgICAgICBfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl93YWl0aW5nRm9yTW91c2VVcCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlcmluZyA9IF90aGlzLmhhbmRsZUVudGVyaW5nLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUgPSBfdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlRGlhbG9nQ2xpY2sgPSBfdGhpcy5oYW5kbGVEaWFsb2dDbGljay5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICBfdGhpcy5zZXRNb2RhbFJlZiA9IF90aGlzLnNldE1vZGFsUmVmLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICRic19tb2RhbDoge1xuICAgICAgICBvbkhpZGU6IHRoaXMucHJvcHMub25IaWRlXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAvLyBDbGVhbiB1cCB0aGUgbGlzdGVuZXIgaWYgd2UgbmVlZCB0by5cbiAgICB0aGlzLmhhbmRsZUV4aXRlZCgpO1xuICB9O1xuXG4gIF9wcm90by5zZXRNb2RhbFJlZiA9IGZ1bmN0aW9uIHNldE1vZGFsUmVmKHJlZikge1xuICAgIHRoaXMuX21vZGFsID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVEaWFsb2dDbGljayA9IGZ1bmN0aW9uIGhhbmRsZURpYWxvZ0NsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljayB8fCBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkhpZGUoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZygpIHtcbiAgICAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgIGV2ZW50cy5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgdGhpcy51cGRhdGVTdHlsZSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIHdvcmsgZXZlbiB3aGVuIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICBldmVudHMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlV2luZG93UmVzaXplID0gZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKCkge1xuICAgIHRoaXMudXBkYXRlU3R5bGUoKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3R5bGUgPSBmdW5jdGlvbiB1cGRhdGVTdHlsZSgpIHtcbiAgICBpZiAoIWNhblVzZURPTSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaWFsb2dOb2RlID0gdGhpcy5fbW9kYWwuZ2V0RGlhbG9nRWxlbWVudCgpO1xuXG4gICAgdmFyIGRpYWxvZ0hlaWdodCA9IGRpYWxvZ05vZGUuc2Nyb2xsSGVpZ2h0O1xuICAgIHZhciBkb2N1bWVudCA9IG93bmVyRG9jdW1lbnQoZGlhbG9nTm9kZSk7XG4gICAgdmFyIGJvZHlJc092ZXJmbG93aW5nID0gaXNPdmVyZmxvd2luZyhSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLnByb3BzLmNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5KSk7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IGRpYWxvZ0hlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdHlsZToge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IGJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyBnZXRTY3JvbGxiYXJTaXplKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAhYm9keUlzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gZ2V0U2Nyb2xsYmFyU2l6ZSgpIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYWNrZHJvcCA9IF90aGlzJHByb3BzLmJhY2tkcm9wLFxuICAgICAgICBiYWNrZHJvcENsYXNzTmFtZSA9IF90aGlzJHByb3BzLmJhY2tkcm9wQ2xhc3NOYW1lLFxuICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb24sXG4gICAgICAgIHNob3cgPSBfdGhpcyRwcm9wcy5zaG93LFxuICAgICAgICBEaWFsb2cgPSBfdGhpcyRwcm9wcy5kaWFsb2dDb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYmFja2Ryb3BcIiwgXCJiYWNrZHJvcENsYXNzTmFtZVwiLCBcImFuaW1hdGlvblwiLCBcInNob3dcIiwgXCJkaWFsb2dDb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0ZWRcIl0pO1xuXG4gICAgdmFyIF9zcGxpdENvbXBvbmVudFByb3BzID0gc3BsaXRDb21wb25lbnRQcm9wcyhwcm9wcywgQmFzZU1vZGFsKSxcbiAgICAgICAgYmFzZU1vZGFsUHJvcHMgPSBfc3BsaXRDb21wb25lbnRQcm9wc1swXSxcbiAgICAgICAgZGlhbG9nUHJvcHMgPSBfc3BsaXRDb21wb25lbnRQcm9wc1sxXTtcblxuICAgIHZhciBpbkNsYXNzTmFtZSA9IHNob3cgJiYgIWFuaW1hdGlvbiAmJiAnaW4nO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VNb2RhbCwgX2V4dGVuZHMoe30sIGJhc2VNb2RhbFByb3BzLCB7XG4gICAgICByZWY6IHRoaXMuc2V0TW9kYWxSZWYsXG4gICAgICBzaG93OiBzaG93LFxuICAgICAgY29udGFpbmVyQ2xhc3NOYW1lOiBwcmVmaXgocHJvcHMsICdvcGVuJyksXG4gICAgICB0cmFuc2l0aW9uOiBhbmltYXRpb24gPyBEaWFsb2dUcmFuc2l0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgYmFja2Ryb3A6IGJhY2tkcm9wLFxuICAgICAgYmFja2Ryb3BUcmFuc2l0aW9uOiBhbmltYXRpb24gPyBCYWNrZHJvcFRyYW5zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICBiYWNrZHJvcENsYXNzTmFtZTogY2xhc3NOYW1lcyhwcmVmaXgocHJvcHMsICdiYWNrZHJvcCcpLCBiYWNrZHJvcENsYXNzTmFtZSwgaW5DbGFzc05hbWUpLFxuICAgICAgb25FbnRlcmluZzogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uRW50ZXJpbmcsIHRoaXMuaGFuZGxlRW50ZXJpbmcpLFxuICAgICAgb25FeGl0ZWQ6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbkV4aXRlZCwgdGhpcy5oYW5kbGVFeGl0ZWQpLFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXBcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChEaWFsb2csIF9leHRlbmRzKHt9LCBkaWFsb2dQcm9wcywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB0aGlzLnN0YXRlLnN0eWxlLCBzdHlsZSksXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBpbkNsYXNzTmFtZSksXG4gICAgICBvbkNsaWNrOiBiYWNrZHJvcCA9PT0gdHJ1ZSA/IHRoaXMuaGFuZGxlRGlhbG9nQ2xpY2sgOiBudWxsLFxuICAgICAgb25Nb3VzZURvd25EaWFsb2c6IHRoaXMuaGFuZGxlRGlhbG9nQmFja2Ryb3BNb3VzZURvd25cbiAgICB9KSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk1vZGFsLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5Nb2RhbC5Cb2R5ID0gQm9keTtcbk1vZGFsLkhlYWRlciA9IEhlYWRlcjtcbk1vZGFsLlRpdGxlID0gVGl0bGU7XG5Nb2RhbC5Gb290ZXIgPSBGb290ZXI7XG5Nb2RhbC5EaWFsb2cgPSBNb2RhbERpYWxvZztcbk1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDA7XG5Nb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbW9kYWwnLCBic1NpemVzKFtTaXplLkxBUkdFLCBTaXplLlNNQUxMXSwgTW9kYWwpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBrZXljb2RlIGZyb20gJ2tleWNvZGUnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBhbGwgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvYWxsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgYnNDbGFzcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nOyAvLyBUT0RPOiBTaG91bGQgd2UgZXhwb3NlIGA8TmF2SXRlbT5gIGFzIGA8TmF2Lkl0ZW0+YD9cbi8vIFRPRE86IFRoaXMgYGJzU3R5bGVgIGlzIHZlcnkgdW5saWtlIHRoZSBvdGhlcnMuIFNob3VsZCB3ZSByZW5hbWUgaXQ/XG4vLyBUT0RPOiBgcHVsbFJpZ2h0YCBhbmQgYHB1bGxMZWZ0YCBkb24ndCByZW5kZXIgcmlnaHQgb3V0c2lkZSBvZiBgbmF2YmFyYC5cbi8vIENvbnNpZGVyIHJlbmFtaW5nIG9yIHJlcGxhY2luZyB0aGVtLlxuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogTWFya3MgdGhlIE5hdkl0ZW0gd2l0aCBhIG1hdGNoaW5nIGBldmVudEtleWAgYXMgYWN0aXZlLiBIYXMgYVxuICAgKiBoaWdoZXIgcHJlY2VkZW5jZSBvdmVyIGBhY3RpdmVIcmVmYC5cbiAgICovXG4gIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogTWFya3MgdGhlIGNoaWxkIE5hdkl0ZW0gd2l0aCBhIG1hdGNoaW5nIGBocmVmYCBwcm9wIGFzIGFjdGl2ZS5cbiAgICovXG4gIGFjdGl2ZUhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE5hdkl0ZW1zIGFyZSBiZSBwb3NpdGlvbmVkIHZlcnRpY2FsbHkuXG4gICAqL1xuICBzdGFja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAganVzdGlmaWVkOiBhbGwoUHJvcFR5cGVzLmJvb2wsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGp1c3RpZmllZCA9IF9yZWYuanVzdGlmaWVkLFxuICAgICAgICBuYXZiYXIgPSBfcmVmLm5hdmJhcjtcbiAgICByZXR1cm4ganVzdGlmaWVkICYmIG5hdmJhciA/IEVycm9yKCdqdXN0aWZpZWQgbmF2YmFyIGBOYXZgcyBhcmUgbm90IHN1cHBvcnRlZCcpIDogbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIE5hdkl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIChcbiAgICogIEFueSBldmVudEtleSxcbiAgICogIFN5bnRoZXRpY0V2ZW50IGV2ZW50P1xuICAgKiApXG4gICAqIGBgYFxuICAgKi9cbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBUklBIHJvbGUgZm9yIHRoZSBOYXYsIGluIHRoZSBjb250ZXh0IG9mIGEgVGFiQ29udGFpbmVyLCB0aGUgZGVmYXVsdCB3aWxsXG4gICAqIGJlIHNldCB0byBcInRhYmxpc3RcIiwgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBOYXYgd2hlbiBzZXQgZXhwbGljaXRseS5cbiAgICpcbiAgICogV2hlbiB0aGUgcm9sZSBpcyBzZXQgdG8gXCJ0YWJsaXN0XCIgTmF2SXRlbSBmb2N1cyBpcyBtYW5hZ2VkIGFjY29yZGluZyB0b1xuICAgKiB0aGUgQVJJQSBhdXRob3JpbmcgcHJhY3RpY2VzIGZvciB0YWJzOlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9XRC13YWktYXJpYS1wcmFjdGljZXMtMjAxMzAzMDcvI3RhYnBhbmVsXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBcHBseSBzdHlsaW5nIGFuIGFsaWdubWVudCBmb3IgdXNlIGluIGEgTmF2YmFyLiBUaGlzIHByb3Agd2lsbCBiZSBzZXRcbiAgICogYXV0b21hdGljYWxseSB3aGVuIHRoZSBOYXYgaXMgdXNlZCBpbnNpZGUgYSBOYXZiYXIuXG4gICAqL1xuICBuYXZiYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBGbG9hdCB0aGUgTmF2IHRvIHRoZSByaWdodC4gV2hlbiBgbmF2YmFyYCBpcyBgdHJ1ZWAgdGhlIGFwcHJvcHJpYXRlXG4gICAqIGNvbnRleHR1YWwgY2xhc3NlcyBhcmUgYWRkZWQgYXMgd2VsbC5cbiAgICovXG4gIHB1bGxSaWdodDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEZsb2F0IHRoZSBOYXYgdG8gdGhlIGxlZnQuIFdoZW4gYG5hdmJhcmAgaXMgYHRydWVgIHRoZSBhcHByb3ByaWF0ZVxuICAgKiBjb250ZXh0dWFsIGNsYXNzZXMgYXJlIGFkZGVkIGFzIHdlbGwuXG4gICAqL1xuICBwdWxsTGVmdDogUHJvcFR5cGVzLmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBqdXN0aWZpZWQ6IGZhbHNlLFxuICBwdWxsUmlnaHQ6IGZhbHNlLFxuICBwdWxsTGVmdDogZmFsc2UsXG4gIHN0YWNrZWQ6IGZhbHNlXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuY1xuICB9KSxcbiAgJGJzX3RhYkNvbnRhaW5lcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG4gICAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0VGFiSWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0UGFuZUlkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pXG59O1xuXG52YXIgTmF2ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBOYXYucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICghdGhpcy5fbmVlZHNSZWZvY3VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbmVlZHNSZWZvY3VzID0gZmFsc2U7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBfdGhpcyRnZXRBY3RpdmVQcm9wcyA9IHRoaXMuZ2V0QWN0aXZlUHJvcHMoKSxcbiAgICAgICAgYWN0aXZlS2V5ID0gX3RoaXMkZ2V0QWN0aXZlUHJvcHMuYWN0aXZlS2V5LFxuICAgICAgICBhY3RpdmVIcmVmID0gX3RoaXMkZ2V0QWN0aXZlUHJvcHMuYWN0aXZlSHJlZjtcblxuICAgIHZhciBhY3RpdmVDaGlsZCA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZmluZChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaXNBY3RpdmUoY2hpbGQsIGFjdGl2ZUtleSwgYWN0aXZlSHJlZik7XG4gICAgfSk7XG4gICAgdmFyIGNoaWxkcmVuQXJyYXkgPSBWYWxpZENvbXBvbmVudENoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pO1xuICAgIHZhciBhY3RpdmVDaGlsZEluZGV4ID0gY2hpbGRyZW5BcnJheS5pbmRleE9mKGFjdGl2ZUNoaWxkKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpLmNoaWxkcmVuO1xuICAgIHZhciBhY3RpdmVOb2RlID0gY2hpbGROb2RlcyAmJiBjaGlsZE5vZGVzW2FjdGl2ZUNoaWxkSW5kZXhdO1xuXG4gICAgaWYgKCFhY3RpdmVOb2RlIHx8ICFhY3RpdmVOb2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhY3RpdmVOb2RlLmZpcnN0Q2hpbGQuZm9jdXMoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0QWN0aXZlUHJvcHMgPSBmdW5jdGlvbiBnZXRBY3RpdmVQcm9wcygpIHtcbiAgICB2YXIgdGFiQ29udGFpbmVyID0gdGhpcy5jb250ZXh0LiRic190YWJDb250YWluZXI7XG5cbiAgICBpZiAodGFiQ29udGFpbmVyKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHRoaXMucHJvcHMuYWN0aXZlS2V5ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWN0aXZlSHJlZiwgJ1NwZWNpZnlpbmcgYSBgPE5hdj5gIGBhY3RpdmVLZXlgIG9yIGBhY3RpdmVIcmVmYCBpbiB0aGUgY29udGV4dCBvZiAnICsgJ2EgYDxUYWJDb250YWluZXI+YCBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkIHVzZSBgPFRhYkNvbnRhaW5lciAnICsgKFwiYWN0aXZlS2V5PXtcIiArIHRoaXMucHJvcHMuYWN0aXZlS2V5ICsgXCJ9IC8+YC5cIikpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHRhYkNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgfTtcblxuICBfcHJvdG8uZ2V0TmV4dEFjdGl2ZUNoaWxkID0gZnVuY3Rpb24gZ2V0TmV4dEFjdGl2ZUNoaWxkKG9mZnNldCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgdmFsaWRDaGlsZHJlbiA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZmlsdGVyKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC5wcm9wcy5ldmVudEtleSAhPSBudWxsICYmICFjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICB9KTtcblxuICAgIHZhciBfdGhpcyRnZXRBY3RpdmVQcm9wczIgPSB0aGlzLmdldEFjdGl2ZVByb3BzKCksXG4gICAgICAgIGFjdGl2ZUtleSA9IF90aGlzJGdldEFjdGl2ZVByb3BzMi5hY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUhyZWYgPSBfdGhpcyRnZXRBY3RpdmVQcm9wczIuYWN0aXZlSHJlZjtcblxuICAgIHZhciBhY3RpdmVDaGlsZCA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZmluZChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmlzQWN0aXZlKGNoaWxkLCBhY3RpdmVLZXksIGFjdGl2ZUhyZWYpO1xuICAgIH0pOyAvLyBUaGlzIGFzc3VtZXMgdGhlIGFjdGl2ZSBjaGlsZCBpcyBub3QgZGlzYWJsZWQuXG5cbiAgICB2YXIgYWN0aXZlQ2hpbGRJbmRleCA9IHZhbGlkQ2hpbGRyZW4uaW5kZXhPZihhY3RpdmVDaGlsZCk7XG5cbiAgICBpZiAoYWN0aXZlQ2hpbGRJbmRleCA9PT0gLTEpIHtcbiAgICAgIC8vIFNvbWV0aGluZyBoYXMgZ29uZSB3cm9uZy4gU2VsZWN0IHRoZSBmaXJzdCB2YWxpZCBjaGlsZCB3ZSBjYW4gZmluZC5cbiAgICAgIHJldHVybiB2YWxpZENoaWxkcmVuWzBdO1xuICAgIH1cblxuICAgIHZhciBuZXh0SW5kZXggPSBhY3RpdmVDaGlsZEluZGV4ICsgb2Zmc2V0O1xuICAgIHZhciBudW1WYWxpZENoaWxkcmVuID0gdmFsaWRDaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBpZiAobmV4dEluZGV4ID49IG51bVZhbGlkQ2hpbGRyZW4pIHtcbiAgICAgIG5leHRJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChuZXh0SW5kZXggPCAwKSB7XG4gICAgICBuZXh0SW5kZXggPSBudW1WYWxpZENoaWxkcmVuIC0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRDaGlsZHJlbltuZXh0SW5kZXhdO1xuICB9O1xuXG4gIF9wcm90by5nZXRUYWJQcm9wcyA9IGZ1bmN0aW9uIGdldFRhYlByb3BzKGNoaWxkLCB0YWJDb250YWluZXIsIG5hdlJvbGUsIGFjdGl2ZSwgb25TZWxlY3QpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmICghdGFiQ29udGFpbmVyICYmIG5hdlJvbGUgIT09ICd0YWJsaXN0Jykge1xuICAgICAgLy8gTm8gdGFiIHByb3BzIGhlcmUuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMsXG4gICAgICAgIGlkID0gX2NoaWxkJHByb3BzLmlkLFxuICAgICAgICBjb250cm9scyA9IF9jaGlsZCRwcm9wc1snYXJpYS1jb250cm9scyddLFxuICAgICAgICBldmVudEtleSA9IF9jaGlsZCRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgcm9sZSA9IF9jaGlsZCRwcm9wcy5yb2xlLFxuICAgICAgICBvbktleURvd24gPSBfY2hpbGQkcHJvcHMub25LZXlEb3duLFxuICAgICAgICB0YWJJbmRleCA9IF9jaGlsZCRwcm9wcy50YWJJbmRleDtcblxuICAgIGlmICh0YWJDb250YWluZXIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWlkICYmICFjb250cm9scywgJ0luIHRoZSBjb250ZXh0IG9mIGEgYDxUYWJDb250YWluZXI+YCwgYDxOYXZJdGVtPmBzIGFyZSBnaXZlbiAnICsgJ2dlbmVyYXRlZCBgaWRgIGFuZCBgYXJpYS1jb250cm9sc2AgYXR0cmlidXRlcyBmb3IgdGhlIHNha2Ugb2YgJyArICdwcm9wZXIgY29tcG9uZW50IGFjY2Vzc2liaWxpdHkuIEFueSBwcm92aWRlZCBvbmVzIHdpbGwgYmUgaWdub3JlZC4gJyArICdUbyBjb250cm9sIHRoZXNlIGF0dHJpYnV0ZXMgZGlyZWN0bHksIHByb3ZpZGUgYSBgZ2VuZXJhdGVDaGlsZElkYCAnICsgJ3Byb3AgdG8gdGhlIHBhcmVudCBgPFRhYkNvbnRhaW5lcj5gLicpIDogdm9pZCAwO1xuICAgICAgaWQgPSB0YWJDb250YWluZXIuZ2V0VGFiSWQoZXZlbnRLZXkpO1xuICAgICAgY29udHJvbHMgPSB0YWJDb250YWluZXIuZ2V0UGFuZUlkKGV2ZW50S2V5KTtcbiAgICB9XG5cbiAgICBpZiAobmF2Um9sZSA9PT0gJ3RhYmxpc3QnKSB7XG4gICAgICByb2xlID0gcm9sZSB8fCAndGFiJztcbiAgICAgIG9uS2V5RG93biA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5oYW5kbGVUYWJLZXlEb3duKG9uU2VsZWN0LCBldmVudCk7XG4gICAgICB9LCBvbktleURvd24pO1xuICAgICAgdGFiSW5kZXggPSBhY3RpdmUgPyB0YWJJbmRleCA6IC0xO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpZDogaWQsXG4gICAgICByb2xlOiByb2xlLFxuICAgICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgICAnYXJpYS1jb250cm9scyc6IGNvbnRyb2xzLFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVGFiS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZVRhYktleURvd24ob25TZWxlY3QsIGV2ZW50KSB7XG4gICAgdmFyIG5leHRBY3RpdmVDaGlsZDtcblxuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSBrZXljb2RlLmNvZGVzLmxlZnQ6XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMudXA6XG4gICAgICAgIG5leHRBY3RpdmVDaGlsZCA9IHRoaXMuZ2V0TmV4dEFjdGl2ZUNoaWxkKC0xKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5yaWdodDpcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5kb3duOlxuICAgICAgICBuZXh0QWN0aXZlQ2hpbGQgPSB0aGlzLmdldE5leHRBY3RpdmVDaGlsZCgxKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIEl0IHdhcyBhIGRpZmZlcmVudCBrZXk7IGRvbid0IGhhbmRsZSB0aGlzIGtleXByZXNzLlxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChvblNlbGVjdCAmJiBuZXh0QWN0aXZlQ2hpbGQgJiYgbmV4dEFjdGl2ZUNoaWxkLnByb3BzLmV2ZW50S2V5ICE9IG51bGwpIHtcbiAgICAgIG9uU2VsZWN0KG5leHRBY3RpdmVDaGlsZC5wcm9wcy5ldmVudEtleSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbmVlZHNSZWZvY3VzID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZShfcmVmMiwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKSB7XG4gICAgdmFyIHByb3BzID0gX3JlZjIucHJvcHM7XG5cbiAgICBpZiAocHJvcHMuYWN0aXZlIHx8IGFjdGl2ZUtleSAhPSBudWxsICYmIHByb3BzLmV2ZW50S2V5ID09PSBhY3RpdmVLZXkgfHwgYWN0aXZlSHJlZiAmJiBwcm9wcy5ocmVmID09PSBhY3RpdmVIcmVmKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcHMuYWN0aXZlO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMixcbiAgICAgICAgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0YWNrZWQgPSBfdGhpcyRwcm9wcy5zdGFja2VkLFxuICAgICAgICBqdXN0aWZpZWQgPSBfdGhpcyRwcm9wcy5qdXN0aWZpZWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgIHByb3BzUm9sZSA9IF90aGlzJHByb3BzLnJvbGUsXG4gICAgICAgIHByb3BzTmF2YmFyID0gX3RoaXMkcHJvcHMubmF2YmFyLFxuICAgICAgICBwdWxsUmlnaHQgPSBfdGhpcyRwcm9wcy5wdWxsUmlnaHQsXG4gICAgICAgIHB1bGxMZWZ0ID0gX3RoaXMkcHJvcHMucHVsbExlZnQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wic3RhY2tlZFwiLCBcImp1c3RpZmllZFwiLCBcIm9uU2VsZWN0XCIsIFwicm9sZVwiLCBcIm5hdmJhclwiLCBcInB1bGxSaWdodFwiLCBcInB1bGxMZWZ0XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIHRhYkNvbnRhaW5lciA9IHRoaXMuY29udGV4dC4kYnNfdGFiQ29udGFpbmVyO1xuICAgIHZhciByb2xlID0gcHJvcHNSb2xlIHx8ICh0YWJDb250YWluZXIgPyAndGFibGlzdCcgOiBudWxsKTtcblxuICAgIHZhciBfdGhpcyRnZXRBY3RpdmVQcm9wczMgPSB0aGlzLmdldEFjdGl2ZVByb3BzKCksXG4gICAgICAgIGFjdGl2ZUtleSA9IF90aGlzJGdldEFjdGl2ZVByb3BzMy5hY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUhyZWYgPSBfdGhpcyRnZXRBY3RpdmVQcm9wczMuYWN0aXZlSHJlZjtcblxuICAgIGRlbGV0ZSBwcm9wcy5hY3RpdmVLZXk7IC8vIEFjY2Vzc2VkIHZpYSB0aGlzLmdldEFjdGl2ZVByb3BzKCkuXG5cbiAgICBkZWxldGUgcHJvcHMuYWN0aXZlSHJlZjsgLy8gQWNjZXNzZWQgdmlhIHRoaXMuZ2V0QWN0aXZlUHJvcHMoKS5cblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdzdGFja2VkJyldID0gc3RhY2tlZCwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnanVzdGlmaWVkJyldID0ganVzdGlmaWVkLCBfZXh0ZW5kczIpKTtcblxuICAgIHZhciBuYXZiYXIgPSBwcm9wc05hdmJhciAhPSBudWxsID8gcHJvcHNOYXZiYXIgOiB0aGlzLmNvbnRleHQuJGJzX25hdmJhcjtcbiAgICB2YXIgcHVsbExlZnRDbGFzc05hbWU7XG4gICAgdmFyIHB1bGxSaWdodENsYXNzTmFtZTtcblxuICAgIGlmIChuYXZiYXIpIHtcbiAgICAgIHZhciBuYXZiYXJQcm9wcyA9IHRoaXMuY29udGV4dC4kYnNfbmF2YmFyIHx8IHtcbiAgICAgICAgYnNDbGFzczogJ25hdmJhcidcbiAgICAgIH07XG4gICAgICBjbGFzc2VzW3ByZWZpeChuYXZiYXJQcm9wcywgJ25hdicpXSA9IHRydWU7XG4gICAgICBwdWxsUmlnaHRDbGFzc05hbWUgPSBwcmVmaXgobmF2YmFyUHJvcHMsICdyaWdodCcpO1xuICAgICAgcHVsbExlZnRDbGFzc05hbWUgPSBwcmVmaXgobmF2YmFyUHJvcHMsICdsZWZ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1bGxSaWdodENsYXNzTmFtZSA9ICdwdWxsLXJpZ2h0JztcbiAgICAgIHB1bGxMZWZ0Q2xhc3NOYW1lID0gJ3B1bGwtbGVmdCc7XG4gICAgfVxuXG4gICAgY2xhc3Nlc1twdWxsUmlnaHRDbGFzc05hbWVdID0gcHVsbFJpZ2h0O1xuICAgIGNsYXNzZXNbcHVsbExlZnRDbGFzc05hbWVdID0gcHVsbExlZnQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICByb2xlOiByb2xlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSwgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdmFyIGFjdGl2ZSA9IF90aGlzNC5pc0FjdGl2ZShjaGlsZCwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKTtcblxuICAgICAgdmFyIGNoaWxkT25TZWxlY3QgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGQucHJvcHMub25TZWxlY3QsIG9uU2VsZWN0LCBuYXZiYXIgJiYgbmF2YmFyLm9uU2VsZWN0LCB0YWJDb250YWluZXIgJiYgdGFiQ29udGFpbmVyLm9uU2VsZWN0KTtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIF9leHRlbmRzKHt9LCBfdGhpczQuZ2V0VGFiUHJvcHMoY2hpbGQsIHRhYkNvbnRhaW5lciwgcm9sZSwgYWN0aXZlLCBjaGlsZE9uU2VsZWN0KSwge1xuICAgICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgICAgYWN0aXZlS2V5OiBhY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUhyZWY6IGFjdGl2ZUhyZWYsXG4gICAgICAgIG9uU2VsZWN0OiBjaGlsZE9uU2VsZWN0XG4gICAgICB9KSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBOYXY7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5OYXYuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuTmF2LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ25hdicsIGJzU3R5bGVzKFsndGFicycsICdwaWxscyddLCBOYXYpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcHJlZml4IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfbmF2YmFyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSlcbn07XG5cbnZhciBOYXZiYXJCcmFuZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZiYXJCcmFuZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2YmFyQnJhbmQoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdmJhckJyYW5kLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIG5hdmJhclByb3BzID0gdGhpcy5jb250ZXh0LiRic19uYXZiYXIgfHwge1xuICAgICAgYnNDbGFzczogJ25hdmJhcidcbiAgICB9O1xuICAgIHZhciBic0NsYXNzTmFtZSA9IHByZWZpeChuYXZiYXJQcm9wcywgJ2JyYW5kJyk7XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgYnNDbGFzc05hbWUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic0NsYXNzTmFtZSlcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBOYXZiYXJCcmFuZDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2YmFyQnJhbmQuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgTmF2YmFyQnJhbmQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQ29sbGFwc2UgZnJvbSAnLi9Db2xsYXBzZSc7XG5pbXBvcnQgeyBwcmVmaXggfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19uYXZiYXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2xcbiAgfSlcbn07XG5cbnZhciBOYXZiYXJDb2xsYXBzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZiYXJDb2xsYXBzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2YmFyQ29sbGFwc2UoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdmJhckNvbGxhcHNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBuYXZiYXJQcm9wcyA9IHRoaXMuY29udGV4dC4kYnNfbmF2YmFyIHx8IHtcbiAgICAgIGJzQ2xhc3M6ICduYXZiYXInXG4gICAgfTtcbiAgICB2YXIgYnNDbGFzc05hbWUgPSBwcmVmaXgobmF2YmFyUHJvcHMsICdjb2xsYXBzZScpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbGxhcHNlLCBfZXh0ZW5kcyh7XG4gICAgICBpbjogbmF2YmFyUHJvcHMuZXhwYW5kZWRcbiAgICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBic0NsYXNzTmFtZVxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmJhckNvbGxhcHNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZiYXJDb2xsYXBzZS5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5leHBvcnQgZGVmYXVsdCBOYXZiYXJDb2xsYXBzZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcHJlZml4IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfbmF2YmFyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSlcbn07XG5cbnZhciBOYXZiYXJIZWFkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTmF2YmFySGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJIZWFkZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdmJhckhlYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgbmF2YmFyUHJvcHMgPSB0aGlzLmNvbnRleHQuJGJzX25hdmJhciB8fCB7XG4gICAgICBic0NsYXNzOiAnbmF2YmFyJ1xuICAgIH07XG4gICAgdmFyIGJzQ2xhc3NOYW1lID0gcHJlZml4KG5hdmJhclByb3BzLCAnaGVhZGVyJyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic0NsYXNzTmFtZSlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmJhckhlYWRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2YmFySGVhZGVyLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbmV4cG9ydCBkZWZhdWx0IE5hdmJhckhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcHJlZml4IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdG9nZ2xlIGNvbnRlbnQsIGlmIGxlZnQgZW1wdHkgaXQgd2lsbCByZW5kZXIgdGhlIGRlZmF1bHQgdG9nZ2xlIChzZWVuIGFib3ZlKS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19uYXZiYXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25Ub2dnbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn07XG5cbnZhciBOYXZiYXJUb2dnbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTmF2YmFyVG9nZ2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJUb2dnbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdmJhclRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJvbkNsaWNrXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIG5hdmJhclByb3BzID0gdGhpcy5jb250ZXh0LiRic19uYXZiYXIgfHwge1xuICAgICAgYnNDbGFzczogJ25hdmJhcidcbiAgICB9O1xuXG4gICAgdmFyIGJ1dHRvblByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgdHlwZTogJ2J1dHRvbidcbiAgICB9LCBwcm9wcywge1xuICAgICAgb25DbGljazogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uQ2xpY2ssIG5hdmJhclByb3BzLm9uVG9nZ2xlKSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeChuYXZiYXJQcm9wcywgJ3RvZ2dsZScpLCAhbmF2YmFyUHJvcHMuZXhwYW5kZWQgJiYgJ2NvbGxhcHNlZCcpXG4gICAgfSk7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIGJ1dHRvblByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgYnV0dG9uUHJvcHMsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgICB9LCBcIlRvZ2dsZSBuYXZpZ2F0aW9uXCIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiaWNvbi1iYXJcIlxuICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiaWNvbi1iYXJcIlxuICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiaWNvbi1iYXJcIlxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZiYXJUb2dnbGUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTmF2YmFyVG9nZ2xlLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbmV4cG9ydCBkZWZhdWx0IE5hdmJhclRvZ2dsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbi8vIFRPRE86IFJlbW92ZSB0aGlzIHByYWdtYSBvbmNlIHdlIHVwZ3JhZGUgZXNsaW50LWNvbmZpZy1haXJibmIuXG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgdW5jb250cm9sbGFibGUgfSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgR3JpZCBmcm9tICcuL0dyaWQnO1xuaW1wb3J0IE5hdmJhckJyYW5kIGZyb20gJy4vTmF2YmFyQnJhbmQnO1xuaW1wb3J0IE5hdmJhckNvbGxhcHNlIGZyb20gJy4vTmF2YmFyQ29sbGFwc2UnO1xuaW1wb3J0IE5hdmJhckhlYWRlciBmcm9tICcuL05hdmJhckhlYWRlcic7XG5pbXBvcnQgTmF2YmFyVG9nZ2xlIGZyb20gJy4vTmF2YmFyVG9nZ2xlJztcbmltcG9ydCB7IGJzQ2xhc3MgYXMgc2V0QnNDbGFzcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wc0FuZE9taXQgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFN0eWxlIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmaXhlZCBuYXZiYXIgYWxvbmcgdGhlIHRvcCBvZiB0aGUgc2NyZWVuLCB0aGF0IHNjcm9sbHMgd2l0aCB0aGVcbiAgICogcGFnZVxuICAgKi9cbiAgZml4ZWRUb3A6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmaXhlZCBuYXZiYXIgYWxvbmcgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuLCB0aGF0IHNjcm9sbHMgd2l0aFxuICAgKiB0aGUgcGFnZVxuICAgKi9cbiAgZml4ZWRCb3R0b206IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmdWxsLXdpZHRoIG5hdmJhciB0aGF0IHNjcm9sbHMgYXdheSB3aXRoIHRoZSBwYWdlXG4gICAqL1xuICBzdGF0aWNUb3A6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbiBhbHRlcm5hdGl2ZSBkYXJrIHZpc3VhbCBzdHlsZSBmb3IgdGhlIE5hdmJhclxuICAgKi9cbiAgaW52ZXJzZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsbG93IHRoZSBOYXZiYXIgdG8gZmx1aWRseSBhZGp1c3QgdG8gdGhlIHBhZ2Ugb3IgY29udGFpbmVyIHdpZHRoLCBpbnN0ZWFkXG4gICAqIG9mIGF0IHRoZSBwcmVkZWZpbmVkIHNjcmVlbiBicmVha3BvaW50c1xuICAgKi9cbiAgZmx1aWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTZXQgYSBjdXN0b20gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYDxOYXZiYXI+YCBib2R5IGNvbGxhcHNlcyBvciBleHBhbmRzLiBGaXJlZCB3aGVuXG4gICAqIGEgYDxOYXZiYXIuVG9nZ2xlPmAgaXMgY2xpY2tlZCBhbmQgY2FsbGVkIHdpdGggdGhlIG5ldyBgZXhwYW5kZWRgXG4gICAqIGJvb2xlYW4gdmFsdWUuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgZXhwYW5kZWRcbiAgICovXG4gIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIGEgZGVzY2VuZGFudCBvZiBhIGNoaWxkIGA8TmF2PmAgaXMgc2VsZWN0ZWQuIFNob3VsZFxuICAgKiBiZSB1c2VkIHRvIGV4ZWN1dGUgY29tcGxleCBjbG9zaW5nIG9yIG90aGVyIG1pc2NlbGxhbmVvdXMgYWN0aW9ucyBkZXNpcmVkXG4gICAqIGFmdGVyIHNlbGVjdGluZyBhIGRlc2NlbmRhbnQgb2YgYDxOYXY+YC4gRG9lcyBub3RoaW5nIGlmIG5vIGA8TmF2PmAgb3IgYDxOYXY+YFxuICAgKiBkZXNjZW5kYW50cyBleGlzdC4gVGhlIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIGFuIGV2ZW50S2V5LCB3aGljaCBpcyBhXG4gICAqIHByb3AgZnJvbSB0aGUgc2VsZWN0ZWQgYDxOYXY+YCBkZXNjZW5kYW50LCBhbmQgYW4gZXZlbnQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIChcbiAgICogIEFueSBldmVudEtleSxcbiAgICogIFN5bnRoZXRpY0V2ZW50IGV2ZW50P1xuICAgKiApXG4gICAqIGBgYFxuICAgKlxuICAgKiBGb3IgYmFzaWMgY2xvc2luZyBiZWhhdmlvciBhZnRlciBhbGwgYDxOYXY+YCBkZXNjZW5kYW50IG9uU2VsZWN0IGV2ZW50cyBpblxuICAgKiBtb2JpbGUgdmlld3BvcnRzLCB0cnkgdXNpbmcgY29sbGFwc2VPblNlbGVjdC5cbiAgICpcbiAgICogTm90ZTogSWYgeW91IGFyZSBtYW51YWxseSBjbG9zaW5nIHRoZSBuYXZiYXIgdXNpbmcgdGhpcyBgT25TZWxlY3RgIHByb3AsXG4gICAqIGVuc3VyZSB0aGF0IHlvdSBhcmUgc2V0dGluZyBgZXhwYW5kZWRgIHRvIGZhbHNlIGFuZCBub3QgKnRvZ2dsaW5nKiBiZXR3ZWVuXG4gICAqIHRydWUgYW5kIGZhbHNlLlxuICAgKi9cbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBTZXRzIGBleHBhbmRlZGAgdG8gYGZhbHNlYCBhZnRlciB0aGUgb25TZWxlY3QgZXZlbnQgb2YgYSBkZXNjZW5kYW50IG9mIGFcbiAgICogY2hpbGQgYDxOYXY+YC4gRG9lcyBub3RoaW5nIGlmIG5vIGA8TmF2PmAgb3IgYDxOYXY+YCBkZXNjZW5kYW50cyBleGlzdC5cbiAgICpcbiAgICogVGhlIG9uU2VsZWN0IGNhbGxiYWNrIHNob3VsZCBiZSB1c2VkIGluc3RlYWQgZm9yIG1vcmUgY29tcGxleCBvcGVyYXRpb25zXG4gICAqIHRoYXQgbmVlZCB0byBiZSBleGVjdXRlZCBhZnRlciB0aGUgYHNlbGVjdGAgZXZlbnQgb2YgYDxOYXY+YCBkZXNjZW5kYW50cy5cbiAgICovXG4gIGNvbGxhcHNlT25TZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFeHBsaWNpdGx5IHNldCB0aGUgdmlzaWJsaXR5IG9mIHRoZSBuYXZiYXIgYm9keVxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uVG9nZ2xlXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ25hdicsXG4gIGZpeGVkVG9wOiBmYWxzZSxcbiAgZml4ZWRCb3R0b206IGZhbHNlLFxuICBzdGF0aWNUb3A6IGZhbHNlLFxuICBpbnZlcnNlOiBmYWxzZSxcbiAgZmx1aWQ6IGZhbHNlLFxuICBjb2xsYXBzZU9uU2VsZWN0OiBmYWxzZVxufTtcbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmNcbiAgfSlcbn07XG5cbnZhciBOYXZiYXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTmF2YmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBfdGhpcy5oYW5kbGVUb2dnbGUuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlQ29sbGFwc2UgPSBfdGhpcy5oYW5kbGVDb2xsYXBzZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2YmFyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzQ2xhc3MgPSBfdGhpcyRwcm9wcy5ic0NsYXNzLFxuICAgICAgICBleHBhbmRlZCA9IF90aGlzJHByb3BzLmV4cGFuZGVkLFxuICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICBjb2xsYXBzZU9uU2VsZWN0ID0gX3RoaXMkcHJvcHMuY29sbGFwc2VPblNlbGVjdDtcbiAgICByZXR1cm4ge1xuICAgICAgJGJzX25hdmJhcjoge1xuICAgICAgICBic0NsYXNzOiBic0NsYXNzLFxuICAgICAgICBleHBhbmRlZDogZXhwYW5kZWQsXG4gICAgICAgIG9uVG9nZ2xlOiB0aGlzLmhhbmRsZVRvZ2dsZSxcbiAgICAgICAgb25TZWxlY3Q6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvblNlbGVjdCwgY29sbGFwc2VPblNlbGVjdCA/IHRoaXMuaGFuZGxlQ29sbGFwc2UgOiBudWxsKVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNvbGxhcHNlID0gZnVuY3Rpb24gaGFuZGxlQ29sbGFwc2UoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uVG9nZ2xlID0gX3RoaXMkcHJvcHMyLm9uVG9nZ2xlLFxuICAgICAgICBleHBhbmRlZCA9IF90aGlzJHByb3BzMi5leHBhbmRlZDtcblxuICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgb25Ub2dnbGUoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvblRvZ2dsZSA9IF90aGlzJHByb3BzMy5vblRvZ2dsZSxcbiAgICAgICAgZXhwYW5kZWQgPSBfdGhpcyRwcm9wczMuZXhwYW5kZWQ7XG4gICAgb25Ub2dnbGUoIWV4cGFuZGVkKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHM0LmNvbXBvbmVudENsYXNzLFxuICAgICAgICBmaXhlZFRvcCA9IF90aGlzJHByb3BzNC5maXhlZFRvcCxcbiAgICAgICAgZml4ZWRCb3R0b20gPSBfdGhpcyRwcm9wczQuZml4ZWRCb3R0b20sXG4gICAgICAgIHN0YXRpY1RvcCA9IF90aGlzJHByb3BzNC5zdGF0aWNUb3AsXG4gICAgICAgIGludmVyc2UgPSBfdGhpcyRwcm9wczQuaW52ZXJzZSxcbiAgICAgICAgZmx1aWQgPSBfdGhpcyRwcm9wczQuZmx1aWQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNC5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzNCwgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJmaXhlZFRvcFwiLCBcImZpeGVkQm90dG9tXCIsIFwic3RhdGljVG9wXCIsIFwiaW52ZXJzZVwiLCBcImZsdWlkXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHNBbmRPbWl0ID0gc3BsaXRCc1Byb3BzQW5kT21pdChwcm9wcywgWydleHBhbmRlZCcsICdvblRvZ2dsZScsICdvblNlbGVjdCcsICdjb2xsYXBzZU9uU2VsZWN0J10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdOyAvLyB3aWxsIHJlc3VsdCBpbiBzb21lIGZhbHNlIHBvc2l0aXZlcyBidXQgdGhhdCBzZWVtcyBiZXR0ZXJcbiAgICAvLyB0aGFuIGZhbHNlIG5lZ2F0aXZlcy4gc3RyaWN0IGB1bmRlZmluZWRgIGNoZWNrIGFsbG93cyBleHBsaWNpdFxuICAgIC8vIFwibnVsbGluZ1wiIG9mIHRoZSByb2xlIGlmIHRoZSB1c2VyIHJlYWxseSBkb2Vzbid0IHdhbnQgb25lXG5cblxuICAgIGlmIChlbGVtZW50UHJvcHMucm9sZSA9PT0gdW5kZWZpbmVkICYmIENvbXBvbmVudCAhPT0gJ25hdicpIHtcbiAgICAgIGVsZW1lbnRQcm9wcy5yb2xlID0gJ25hdmlnYXRpb24nO1xuICAgIH1cblxuICAgIGlmIChpbnZlcnNlKSB7XG4gICAgICBic1Byb3BzLmJzU3R5bGUgPSBTdHlsZS5JTlZFUlNFO1xuICAgIH1cblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2ZpeGVkLXRvcCcpXSA9IGZpeGVkVG9wLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdmaXhlZC1ib3R0b20nKV0gPSBmaXhlZEJvdHRvbSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnc3RhdGljLXRvcCcpXSA9IHN0YXRpY1RvcCwgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZCwge1xuICAgICAgZmx1aWQ6IGZsdWlkXG4gICAgfSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZiYXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTmF2YmFyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk5hdmJhci5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuc2V0QnNDbGFzcygnbmF2YmFyJywgTmF2YmFyKTtcbnZhciBVbmNvbnRyb2xsYWJsZU5hdmJhciA9IHVuY29udHJvbGxhYmxlKE5hdmJhciwge1xuICBleHBhbmRlZDogJ29uVG9nZ2xlJ1xufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpbXBsZVdyYXBwZXIodGFnLCBzdWZmaXgsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBXcmFwcGVyID0gZnVuY3Rpb24gV3JhcHBlcihfcmVmLCBfcmVmMikge1xuICAgIHZhciBDb21wb25lbnQgPSBfcmVmLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgICAgcHVsbFJpZ2h0ID0gX3JlZi5wdWxsUmlnaHQsXG4gICAgICAgIHB1bGxMZWZ0ID0gX3JlZi5wdWxsTGVmdCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiLCBcInB1bGxSaWdodFwiLCBcInB1bGxMZWZ0XCJdKTtcblxuICAgIHZhciBfcmVmMiQkYnNfbmF2YmFyID0gX3JlZjIuJGJzX25hdmJhcixcbiAgICAgICAgbmF2YmFyUHJvcHMgPSBfcmVmMiQkYnNfbmF2YmFyID09PSB2b2lkIDAgPyB7XG4gICAgICBic0NsYXNzOiAnbmF2YmFyJ1xuICAgIH0gOiBfcmVmMiQkYnNfbmF2YmFyO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXgobmF2YmFyUHJvcHMsIHN1ZmZpeCksIHB1bGxSaWdodCAmJiBwcmVmaXgobmF2YmFyUHJvcHMsICdyaWdodCcpLCBwdWxsTGVmdCAmJiBwcmVmaXgobmF2YmFyUHJvcHMsICdsZWZ0JykpXG4gICAgfSkpO1xuICB9O1xuXG4gIFdyYXBwZXIuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gICAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuICAgIHB1bGxSaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gICAgcHVsbExlZnQ6IFByb3BUeXBlcy5ib29sXG4gIH07XG4gIFdyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGNvbXBvbmVudENsYXNzOiB0YWcsXG4gICAgcHVsbFJpZ2h0OiBmYWxzZSxcbiAgICBwdWxsTGVmdDogZmFsc2VcbiAgfTtcbiAgV3JhcHBlci5jb250ZXh0VHlwZXMgPSB7XG4gICAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICB9O1xuICByZXR1cm4gV3JhcHBlcjtcbn1cblxuVW5jb250cm9sbGFibGVOYXZiYXIuQnJhbmQgPSBOYXZiYXJCcmFuZDtcblVuY29udHJvbGxhYmxlTmF2YmFyLkhlYWRlciA9IE5hdmJhckhlYWRlcjtcblVuY29udHJvbGxhYmxlTmF2YmFyLlRvZ2dsZSA9IE5hdmJhclRvZ2dsZTtcblVuY29udHJvbGxhYmxlTmF2YmFyLkNvbGxhcHNlID0gTmF2YmFyQ29sbGFwc2U7XG5VbmNvbnRyb2xsYWJsZU5hdmJhci5Gb3JtID0gY3JlYXRlU2ltcGxlV3JhcHBlcignZGl2JywgJ2Zvcm0nLCAnTmF2YmFyRm9ybScpO1xuVW5jb250cm9sbGFibGVOYXZiYXIuVGV4dCA9IGNyZWF0ZVNpbXBsZVdyYXBwZXIoJ3AnLCAndGV4dCcsICdOYXZiYXJUZXh0Jyk7XG5VbmNvbnRyb2xsYWJsZU5hdmJhci5MaW5rID0gY3JlYXRlU2ltcGxlV3JhcHBlcignYScsICdsaW5rJywgJ05hdmJhckxpbmsnKTsgLy8gU2V0IGJzU3R5bGVzIGhlcmUgc28gdGhleSBjYW4gYmUgb3ZlcnJpZGRlbi5cblxuZXhwb3J0IGRlZmF1bHQgYnNTdHlsZXMoW1N0eWxlLkRFRkFVTFQsIFN0eWxlLklOVkVSU0VdLCBTdHlsZS5ERUZBVUxUKShVbmNvbnRyb2xsYWJsZU5hdmJhcik7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbmltcG9ydCBzcGxpdENvbXBvbmVudFByb3BzIGZyb20gJy4vdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wcyc7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIERyb3Bkb3duLnByb3BUeXBlcywge1xuICAvLyBUb2dnbGUgcHJvcHMuXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBub0NhcmV0OiBQcm9wVHlwZXMuYm9vbCxcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55LFxuICBhY3RpdmVIcmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBPdmVycmlkZSBnZW5lcmF0ZWQgZG9jcyBmcm9tIDxEcm9wZG93bj4uXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0pO1xuXG52YXIgTmF2RHJvcGRvd24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTmF2RHJvcGRvd24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdkRyb3Bkb3duKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBOYXZEcm9wZG93bi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoX3JlZiwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBwcm9wcyA9IF9yZWYucHJvcHM7XG5cbiAgICBpZiAocHJvcHMuYWN0aXZlIHx8IGFjdGl2ZUtleSAhPSBudWxsICYmIHByb3BzLmV2ZW50S2V5ID09PSBhY3RpdmVLZXkgfHwgYWN0aXZlSHJlZiAmJiBwcm9wcy5ocmVmID09PSBhY3RpdmVIcmVmKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoVmFsaWRDb21wb25lbnRDaGlsZHJlbi5zb21lKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBfdGhpcy5pc0FjdGl2ZShjaGlsZCwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKTtcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzLmFjdGl2ZTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgYWN0aXZlS2V5ID0gX3RoaXMkcHJvcHMuYWN0aXZlS2V5LFxuICAgICAgICBhY3RpdmVIcmVmID0gX3RoaXMkcHJvcHMuYWN0aXZlSHJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJ0aXRsZVwiLCBcImFjdGl2ZUtleVwiLCBcImFjdGl2ZUhyZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBhY3RpdmUgPSB0aGlzLmlzQWN0aXZlKHRoaXMsIGFjdGl2ZUtleSwgYWN0aXZlSHJlZik7XG4gICAgZGVsZXRlIHByb3BzLmFjdGl2ZTsgLy8gQWNjZXNzZWQgdmlhIHRoaXMuaXNBY3RpdmUoKS5cblxuICAgIGRlbGV0ZSBwcm9wcy5ldmVudEtleTsgLy8gQWNjZXNzZWQgdmlhIHRoaXMuaXNBY3RpdmUoKS5cblxuICAgIHZhciBfc3BsaXRDb21wb25lbnRQcm9wcyA9IHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIERyb3Bkb3duLkNvbnRyb2xsZWRDb21wb25lbnQpLFxuICAgICAgICBkcm9wZG93blByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIHRvZ2dsZVByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07IC8vIFVubGlrZSBmb3IgdGhlIG90aGVyIGRyb3Bkb3ducywgc3R5bGluZyBuZWVkcyB0byBnbyB0byB0aGUgYDxEcm9wZG93bj5gXG4gICAgLy8gcmF0aGVyIHRoYW4gdGhlIGA8RHJvcGRvd24uVG9nZ2xlPmAuXG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLCBfZXh0ZW5kcyh7fSwgZHJvcGRvd25Qcm9wcywge1xuICAgICAgY29tcG9uZW50Q2xhc3M6IFwibGlcIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uVG9nZ2xlLCBfZXh0ZW5kcyh7fSwgdG9nZ2xlUHJvcHMsIHtcbiAgICAgIHVzZUFuY2hvcjogdHJ1ZVxuICAgIH0pLCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uTWVudSwgbnVsbCwgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBhY3RpdmU6IF90aGlzMi5pc0FjdGl2ZShjaGlsZCwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKVxuICAgICAgfSk7XG4gICAgfSkpKTtcbiAgfTtcblxuICByZXR1cm4gTmF2RHJvcGRvd247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdkRyb3Bkb3duLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbmV4cG9ydCBkZWZhdWx0IE5hdkRyb3Bkb3duOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgZXZlbnRLZXk6IFByb3BUeXBlcy5hbnlcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBOYXZJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdkl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdkl0ZW0ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBOYXZJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdCkge1xuICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdCh0aGlzLnByb3BzLmV2ZW50S2V5LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFjdGl2ZVwiLCBcImRpc2FibGVkXCIsIFwib25DbGlja1wiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCJdKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vblNlbGVjdDtcbiAgICBkZWxldGUgcHJvcHMuZXZlbnRLZXk7IC8vIFRoZXNlIGFyZSBpbmplY3RlZCBkb3duIGJ5IGA8TmF2PmAgZm9yIGJ1aWxkaW5nIGA8U3ViTmF2PmBzLlxuXG4gICAgZGVsZXRlIHByb3BzLmFjdGl2ZUtleTtcbiAgICBkZWxldGUgcHJvcHMuYWN0aXZlSHJlZjtcblxuICAgIGlmICghcHJvcHMucm9sZSkge1xuICAgICAgaWYgKHByb3BzLmhyZWYgPT09ICcjJykge1xuICAgICAgICBwcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wcy5yb2xlID09PSAndGFiJykge1xuICAgICAgcHJvcHNbJ2FyaWEtc2VsZWN0ZWQnXSA9IGFjdGl2ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB7XG4gICAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbkNsaWNrLCB0aGlzLmhhbmRsZUNsaWNrKVxuICAgIH0pKSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdkl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdkl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTmF2SXRlbS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBOYXZJdGVtOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQmFzZU92ZXJsYXkgZnJvbSAncmVhY3Qtb3ZlcmxheXMvbGliL092ZXJsYXknO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5cbnZhciBwcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgQmFzZU92ZXJsYXkucHJvcFR5cGVzLCB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE92ZXJsYXlcbiAgICovXG4gIHNob3c6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgb25IaWRlIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIG92ZXJsYXlcbiAgICovXG4gIHJvb3RDbG9zZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgaW52b2tlZCBieSB0aGUgb3ZlcmxheSB3aGVuIGl0IHdpc2hlcyB0byBiZSBoaWRkZW4uIFJlcXVpcmVkIGlmXG4gICAqIGByb290Q2xvc2VgIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFVzZSBhbmltYXRpb25cbiAgICovXG4gIGFuaW1hdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIGVsZW1lbnRUeXBlXSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBpblxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBPdmVybGF5IHRyYW5zaXRpb25zIG91dFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE92ZXJsYXkgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIE92ZXJsYXkuXG4gICAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddKVxufSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFuaW1hdGlvbjogRmFkZSxcbiAgcm9vdENsb3NlOiBmYWxzZSxcbiAgc2hvdzogZmFsc2UsXG4gIHBsYWNlbWVudDogJ3JpZ2h0J1xufTtcblxudmFyIE92ZXJsYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoT3ZlcmxheSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT3ZlcmxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb24sXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFuaW1hdGlvblwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciB0cmFuc2l0aW9uID0gYW5pbWF0aW9uID09PSB0cnVlID8gRmFkZSA6IGFuaW1hdGlvbiB8fCBudWxsO1xuICAgIHZhciBjaGlsZDtcblxuICAgIGlmICghdHJhbnNpdGlvbikge1xuICAgICAgY2hpbGQgPSBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgJ2luJylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VPdmVybGF5LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25cbiAgICB9KSwgY2hpbGQpO1xuICB9O1xuXG4gIHJldHVybiBPdmVybGF5O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5PdmVybGF5LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk92ZXJsYXkuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgT3ZlcmxheTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfQXJyYXkkaXNBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2FycmF5L2lzLWFycmF5XCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IE92ZXJsYXkgZnJvbSAnLi9PdmVybGF5JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBvbmUgaXMgaW5zaWRlIG9yIGVxdWFsIHRvIHRoZSBvZiB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVcbiAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBvZlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaXNPbmVPZihvbmUsIG9mKSB7XG4gIGlmIChfQXJyYXkkaXNBcnJheShvZikpIHtcbiAgICByZXR1cm4gb2YuaW5kZXhPZihvbmUpID49IDA7XG4gIH1cblxuICByZXR1cm4gb25lID09PSBvZjtcbn1cblxudmFyIHRyaWdnZXJUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFsnY2xpY2snLCAnaG92ZXInLCAnZm9jdXMnXSk7XG5cbnZhciBwcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgT3ZlcmxheS5wcm9wVHlwZXMsIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggYWN0aW9uIG9yIGFjdGlvbnMgdHJpZ2dlciBPdmVybGF5IHZpc2liaWxpdHlcbiAgICovXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW3RyaWdnZXJUeXBlLCBQcm9wVHlwZXMuYXJyYXlPZih0cmlnZ2VyVHlwZSldKSxcblxuICAvKipcbiAgICogQSBtaWxsaXNlY29uZCBkZWxheSBhbW91bnQgdG8gc2hvdyBhbmQgaGlkZSB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZFxuICAgKi9cbiAgZGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEEgbWlsbGlzZWNvbmQgZGVsYXkgYW1vdW50IGJlZm9yZSBzaG93aW5nIHRoZSBPdmVybGF5IG9uY2UgdHJpZ2dlcmVkLlxuICAgKi9cbiAgZGVsYXlTaG93OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBBIG1pbGxpc2Vjb25kIGRlbGF5IGFtb3VudCBiZWZvcmUgaGlkaW5nIHRoZSBPdmVybGF5IG9uY2UgdHJpZ2dlcmVkLlxuICAgKi9cbiAgZGVsYXlIaWRlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvLyBGSVhNRTogVGhpcyBzaG91bGQgYmUgYGRlZmF1bHRTaG93YC5cblxuICAvKipcbiAgICogVGhlIGluaXRpYWwgdmlzaWJpbGl0eSBzdGF0ZSBvZiB0aGUgT3ZlcmxheS4gRm9yIG1vcmUgbnVhbmNlZCB2aXNpYmlsaXR5XG4gICAqIGNvbnRyb2wsIGNvbnNpZGVyIHVzaW5nIHRoZSBPdmVybGF5IGNvbXBvbmVudCBkaXJlY3RseS5cbiAgICovXG4gIGRlZmF1bHRPdmVybGF5U2hvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbiBlbGVtZW50IG9yIHRleHQgdG8gb3ZlcmxheSBuZXh0IHRvIHRoZSB0YXJnZXQuXG4gICAqL1xuICBvdmVybGF5OiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbk1vdXNlT3V0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uTW91c2VPdmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLy8gT3ZlcnJpZGRlbiBwcm9wcyBmcm9tIGA8T3ZlcmxheT5gLlxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2YoW251bGxdKSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uSGlkZTogUHJvcFR5cGVzLm9uZU9mKFtudWxsXSksXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzaG93OiBQcm9wVHlwZXMub25lT2YoW251bGxdKVxufSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRlZmF1bHRPdmVybGF5U2hvd246IGZhbHNlLFxuICB0cmlnZ2VyOiBbJ2hvdmVyJywgJ2ZvY3VzJ11cbn07XG5cbnZhciBPdmVybGF5VHJpZ2dlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShPdmVybGF5VHJpZ2dlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheVRyaWdnZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBfdGhpcy5oYW5kbGVUb2dnbGUuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlRGVsYXllZFNob3cgPSBfdGhpcy5oYW5kbGVEZWxheWVkU2hvdy5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVEZWxheWVkSGlkZSA9IF90aGlzLmhhbmRsZURlbGF5ZWRIaWRlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUhpZGUgPSBfdGhpcy5oYW5kbGVIaWRlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdmVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVNb3VzZU92ZXJPdXQoX3RoaXMuaGFuZGxlRGVsYXllZFNob3csIGUsICdmcm9tRWxlbWVudCcpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTW91c2VPdmVyT3V0KF90aGlzLmhhbmRsZURlbGF5ZWRIaWRlLCBlLCAndG9FbGVtZW50Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLl9tb3VudE5vZGUgPSBudWxsO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc2hvdzogcHJvcHMuZGVmYXVsdE92ZXJsYXlTaG93blxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE92ZXJsYXlUcmlnZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9tb3VudE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnJlbmRlck92ZXJsYXkoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMucmVuZGVyT3ZlcmxheSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy5fbW91bnROb2RlKTtcbiAgICB0aGlzLl9tb3VudE5vZGUgPSBudWxsO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlclNob3dEZWxheSk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVySGlkZURlbGF5KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRGVsYXllZEhpZGUgPSBmdW5jdGlvbiBoYW5kbGVEZWxheWVkSGlkZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9ob3ZlclNob3dEZWxheSAhPSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5faG92ZXJTaG93RGVsYXkpO1xuICAgICAgdGhpcy5faG92ZXJTaG93RGVsYXkgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zdGF0ZS5zaG93IHx8IHRoaXMuX2hvdmVySGlkZURlbGF5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSB0aGlzLnByb3BzLmRlbGF5SGlkZSAhPSBudWxsID8gdGhpcy5wcm9wcy5kZWxheUhpZGUgOiB0aGlzLnByb3BzLmRlbGF5O1xuXG4gICAgaWYgKCFkZWxheSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faG92ZXJIaWRlRGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5faG92ZXJIaWRlRGVsYXkgPSBudWxsO1xuXG4gICAgICBfdGhpczIuaGlkZSgpO1xuICAgIH0sIGRlbGF5KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRGVsYXllZFNob3cgPSBmdW5jdGlvbiBoYW5kbGVEZWxheWVkU2hvdygpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9ob3ZlckhpZGVEZWxheSAhPSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5faG92ZXJIaWRlRGVsYXkpO1xuICAgICAgdGhpcy5faG92ZXJIaWRlRGVsYXkgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLnNob3cgfHwgdGhpcy5faG92ZXJTaG93RGVsYXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWxheSA9IHRoaXMucHJvcHMuZGVsYXlTaG93ICE9IG51bGwgPyB0aGlzLnByb3BzLmRlbGF5U2hvdyA6IHRoaXMucHJvcHMuZGVsYXk7XG5cbiAgICBpZiAoIWRlbGF5KSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ob3ZlclNob3dEZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLl9ob3ZlclNob3dEZWxheSA9IG51bGw7XG5cbiAgICAgIF90aGlzMy5zaG93KCk7XG4gICAgfSwgZGVsYXkpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVIaWRlID0gZnVuY3Rpb24gaGFuZGxlSGlkZSgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgfTsgLy8gU2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlRW50ZXIgYW5kIG1vdXNlTGVhdmUuXG4gIC8vIFJlYWN0J3MgYnVpbHQgdmVyc2lvbiBpcyBicm9rZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNDI1MVxuICAvLyBmb3IgY2FzZXMgd2hlbiB0aGUgdHJpZ2dlciBpcyBkaXNhYmxlZCBhbmQgbW91c2VPdXQvT3ZlciBjYW4gY2F1c2UgZmxpY2tlclxuICAvLyBtb3ZpbmcgZnJvbSBvbmUgY2hpbGQgZWxlbWVudCB0byBhbm90aGVyLlxuXG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlT3Zlck91dCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3Zlck91dChoYW5kbGVyLCBlLCByZWxhdGVkTmF0aXZlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICB2YXIgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldCB8fCBlLm5hdGl2ZUV2ZW50W3JlbGF0ZWROYXRpdmVdO1xuXG4gICAgaWYgKCghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQpICYmICFjb250YWlucyh0YXJnZXQsIHJlbGF0ZWQpKSB7XG4gICAgICBoYW5kbGVyKGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNob3cpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvdzogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFrZU92ZXJsYXkgPSBmdW5jdGlvbiBtYWtlT3ZlcmxheShvdmVybGF5LCBwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE92ZXJsYXksIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgc2hvdzogdGhpcy5zdGF0ZS5zaG93LFxuICAgICAgb25IaWRlOiB0aGlzLmhhbmRsZUhpZGUsXG4gICAgICB0YXJnZXQ6IHRoaXNcbiAgICB9KSwgb3ZlcmxheSk7XG4gIH07XG5cbiAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvdzogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJPdmVybGF5ID0gZnVuY3Rpb24gcmVuZGVyT3ZlcmxheSgpIHtcbiAgICBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCB0aGlzLl9vdmVybGF5LCB0aGlzLl9tb3VudE5vZGUpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzLnRyaWdnZXIsXG4gICAgICAgIG92ZXJsYXkgPSBfdGhpcyRwcm9wcy5vdmVybGF5LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wcy5vbkJsdXIsXG4gICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrLFxuICAgICAgICBvbkZvY3VzID0gX3RoaXMkcHJvcHMub25Gb2N1cyxcbiAgICAgICAgb25Nb3VzZU91dCA9IF90aGlzJHByb3BzLm9uTW91c2VPdXQsXG4gICAgICAgIG9uTW91c2VPdmVyID0gX3RoaXMkcHJvcHMub25Nb3VzZU92ZXIsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcInRyaWdnZXJcIiwgXCJvdmVybGF5XCIsIFwiY2hpbGRyZW5cIiwgXCJvbkJsdXJcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcIm9uTW91c2VPdXRcIiwgXCJvbk1vdXNlT3ZlclwiXSk7XG5cbiAgICBkZWxldGUgcHJvcHMuZGVsYXk7XG4gICAgZGVsZXRlIHByb3BzLmRlbGF5U2hvdztcbiAgICBkZWxldGUgcHJvcHMuZGVsYXlIaWRlO1xuICAgIGRlbGV0ZSBwcm9wcy5kZWZhdWx0T3ZlcmxheVNob3duO1xuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHZhciBjaGlsZFByb3BzID0gY2hpbGQucHJvcHM7XG4gICAgdmFyIHRyaWdnZXJQcm9wcyA9IHt9O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuc2hvdykge1xuICAgICAgdHJpZ2dlclByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBvdmVybGF5LnByb3BzLmlkO1xuICAgIH0gLy8gRklYTUU6IFRoZSBsb2dpYyBoZXJlIGZvciBwYXNzaW5nIHRocm91Z2ggaGFuZGxlcnMgb24gdGhpcyBjb21wb25lbnQgaXNcbiAgICAvLyBpbmNvbnNpc3RlbnQuIFdlIHNob3VsZG4ndCBiZSBwYXNzaW5nIGFueSBvZiB0aGVzZSBwcm9wcyB0aHJvdWdoLlxuXG5cbiAgICB0cmlnZ2VyUHJvcHMub25DbGljayA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZFByb3BzLm9uQ2xpY2ssIG9uQ2xpY2spO1xuXG4gICAgaWYgKGlzT25lT2YoJ2NsaWNrJywgdHJpZ2dlcikpIHtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkNsaWNrID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRyaWdnZXJQcm9wcy5vbkNsaWNrLCB0aGlzLmhhbmRsZVRvZ2dsZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzT25lT2YoJ2hvdmVyJywgdHJpZ2dlcikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0cmlnZ2VyID09PSAnaG92ZXInKSwgJ1tyZWFjdC1ib290c3RyYXBdIFNwZWNpZnlpbmcgb25seSB0aGUgYFwiaG92ZXJcImAgdHJpZ2dlciBsaW1pdHMgdGhlICcgKyAndmlzaWJpbGl0eSBvZiB0aGUgb3ZlcmxheSB0byBqdXN0IG1vdXNlIHVzZXJzLiBDb25zaWRlciBhbHNvICcgKyAnaW5jbHVkaW5nIHRoZSBgXCJmb2N1c1wiYCB0cmlnZ2VyIHNvIHRoYXQgdG91Y2ggYW5kIGtleWJvYXJkIG9ubHkgJyArICd1c2VycyBjYW4gc2VlIHRoZSBvdmVybGF5IGFzIHdlbGwuJykgOiB2b2lkIDA7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Nb3VzZU92ZXIgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGRQcm9wcy5vbk1vdXNlT3Zlciwgb25Nb3VzZU92ZXIsIHRoaXMuaGFuZGxlTW91c2VPdmVyKTtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbk1vdXNlT3V0ID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkUHJvcHMub25Nb3VzZU91dCwgb25Nb3VzZU91dCwgdGhpcy5oYW5kbGVNb3VzZU91dCk7XG4gICAgfVxuXG4gICAgaWYgKGlzT25lT2YoJ2ZvY3VzJywgdHJpZ2dlcikpIHtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkZvY3VzID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkUHJvcHMub25Gb2N1cywgb25Gb2N1cywgdGhpcy5oYW5kbGVEZWxheWVkU2hvdyk7XG4gICAgICB0cmlnZ2VyUHJvcHMub25CbHVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkUHJvcHMub25CbHVyLCBvbkJsdXIsIHRoaXMuaGFuZGxlRGVsYXllZEhpZGUpO1xuICAgIH1cblxuICAgIHRoaXMuX292ZXJsYXkgPSB0aGlzLm1ha2VPdmVybGF5KG92ZXJsYXksIHByb3BzKTtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB0cmlnZ2VyUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBPdmVybGF5VHJpZ2dlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuT3ZlcmxheVRyaWdnZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuT3ZlcmxheVRyaWdnZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgT3ZlcmxheVRyaWdnZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgUGFnZUhlYWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQYWdlSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYWdlSGVhZGVyKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQYWdlSGVhZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIG51bGwsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFBhZ2VIZWFkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3BhZ2UtaGVhZGVyJywgUGFnZUhlYWRlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBwcmV2aW91czogUHJvcFR5cGVzLmJvb2wsXG4gIG5leHQ6IFByb3BUeXBlcy5ib29sLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBldmVudEtleTogUHJvcFR5cGVzLmFueVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcHJldmlvdXM6IGZhbHNlLFxuICBuZXh0OiBmYWxzZVxufTtcblxudmFyIFBhZ2VySXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQYWdlckl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhZ2VySXRlbShwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIF90aGlzLmhhbmRsZVNlbGVjdCA9IF90aGlzLmhhbmRsZVNlbGVjdC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGFnZXJJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlU2VsZWN0ID0gZnVuY3Rpb24gaGFuZGxlU2VsZWN0KGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzLmV2ZW50S2V5O1xuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBvblNlbGVjdChldmVudEtleSwgZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICBwcmV2aW91cyA9IF90aGlzJHByb3BzMi5wcmV2aW91cyxcbiAgICAgICAgbmV4dCA9IF90aGlzJHByb3BzMi5uZXh0LFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMyLm9uQ2xpY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiZGlzYWJsZWRcIiwgXCJwcmV2aW91c1wiLCBcIm5leHRcIiwgXCJvbkNsaWNrXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uU2VsZWN0O1xuICAgIGRlbGV0ZSBwcm9wcy5ldmVudEtleTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHtcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICBwcmV2aW91czogcHJldmlvdXMsXG4gICAgICAgIG5leHQ6IG5leHRcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbkNsaWNrLCB0aGlzLmhhbmRsZVNlbGVjdClcbiAgICB9KSkpO1xuICB9O1xuXG4gIHJldHVybiBQYWdlckl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBhZ2VySXRlbS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5QYWdlckl0ZW0uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgUGFnZXJJdGVtOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbnZhciB3YXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKG9sZG5hbWUsIG5ld25hbWUsIGxpbmspIHtcbiAgdmFyIG1lc3NhZ2U7XG5cbiAgaWYgKHR5cGVvZiBvbGRuYW1lID09PSAnb2JqZWN0Jykge1xuICAgIG1lc3NhZ2UgPSBvbGRuYW1lLm1lc3NhZ2U7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSA9IG9sZG5hbWUgKyBcIiBpcyBkZXByZWNhdGVkLiBVc2UgXCIgKyBuZXduYW1lICsgXCIgaW5zdGVhZC5cIjtcblxuICAgIGlmIChsaW5rKSB7XG4gICAgICBtZXNzYWdlICs9IFwiXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgaXQgYXQgXCIgKyBsaW5rO1xuICAgIH1cbiAgfVxuXG4gIGlmICh3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgd2FybmVkW21lc3NhZ2VdID0gdHJ1ZTtcbn1cblxuZGVwcmVjYXRpb25XYXJuaW5nLndyYXBwZXIgPSBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShEZXByZWNhdGVkQ29tcG9uZW50LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gRGVwcmVjYXRlZENvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3RvID0gRGVwcmVjYXRlZENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICBkZXByZWNhdGlvbldhcm5pbmcuYXBwbHkodm9pZCAwLCBhcmdzKTtcblxuICAgICAgICBpZiAoX0NvbXBvbmVudC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgICAgIHZhciBfQ29tcG9uZW50JHByb3RvdHlwZSQ7XG5cbiAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1ldGhvZEFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIG1ldGhvZEFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAoX0NvbXBvbmVudCRwcm90b3R5cGUkID0gX0NvbXBvbmVudC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCkuY2FsbC5hcHBseShfQ29tcG9uZW50JHByb3RvdHlwZSQsIFt0aGlzXS5jb25jYXQobWV0aG9kQXJncykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gRGVwcmVjYXRlZENvbXBvbmVudDtcbiAgICB9KENvbXBvbmVudClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRlcHJlY2F0aW9uV2FybmluZztcbmV4cG9ydCBmdW5jdGlvbiBfcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufSIsImltcG9ydCBQYWdlckl0ZW0gZnJvbSAnLi9QYWdlckl0ZW0nO1xuaW1wb3J0IGRlcHJlY2F0aW9uV2FybmluZyBmcm9tICcuL3V0aWxzL2RlcHJlY2F0aW9uV2FybmluZyc7XG5leHBvcnQgZGVmYXVsdCBkZXByZWNhdGlvbldhcm5pbmcud3JhcHBlcihQYWdlckl0ZW0sICdgPFBhZ2VJdGVtPmAnLCAnYDxQYWdlci5JdGVtPmAnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFBhZ2VySXRlbSBmcm9tICcuL1BhZ2VySXRlbSc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG52YXIgcHJvcFR5cGVzID0ge1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbnZhciBQYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQYWdlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wib25TZWxlY3RcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25TZWxlY3Q6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5wcm9wcy5vblNlbGVjdCwgb25TZWxlY3QpXG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFBhZ2VyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYWdlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5QYWdlci5JdGVtID0gUGFnZXJJdGVtO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygncGFnZXInLCBQYWdlcik7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1tdWx0aS1jb21wICovXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmVMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBhY3RpdmVMYWJlbDogJyhjdXJyZW50KSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYWdpbmF0aW9uSXRlbShfcmVmKSB7XG4gIHZhciBhY3RpdmUgPSBfcmVmLmFjdGl2ZSxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgYWN0aXZlTGFiZWwgPSBfcmVmLmFjdGl2ZUxhYmVsLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhY3RpdmVcIiwgXCJkaXNhYmxlZFwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiYWN0aXZlTGFiZWxcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGFjdGl2ZSB8fCBkaXNhYmxlZCA/ICdzcGFuJyA6IFNhZmVBbmNob3I7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB7XG4gICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIHByb3BzKSwgY2hpbGRyZW4sIGFjdGl2ZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICB9LCBhY3RpdmVMYWJlbCkpKTtcbn1cblBhZ2luYXRpb25JdGVtLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhZ2luYXRpb25JdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uKG5hbWUsIGRlZmF1bHRWYWx1ZSwgbGFiZWwpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgaWYgKGxhYmVsID09PSB2b2lkIDApIHtcbiAgICBsYWJlbCA9IG5hbWU7XG4gIH1cblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoX2NsYXNzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiZGlzYWJsZWRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICAgIHZhciBDb21wb25lbnQgPSBkaXNhYmxlZCA/ICdzcGFuJyA6IFNhZmVBbmNob3I7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIF9leHRlbmRzKHtcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB7XG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgICAgIH0pXG4gICAgICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBudWxsLCBjaGlsZHJlbiB8fCBkZWZhdWx0VmFsdWUpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBuYW1lLCBfY2xhc3MucHJvcFR5cGVzID0ge1xuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxuICB9LCBfdGVtcDtcbn1cblxuZXhwb3J0IHZhciBGaXJzdCA9IGNyZWF0ZUJ1dHRvbignRmlyc3QnLCBcIlxceEFCXCIpO1xuZXhwb3J0IHZhciBQcmV2ID0gY3JlYXRlQnV0dG9uKCdQcmV2JywgXCJcXHUyMDM5XCIpO1xuZXhwb3J0IHZhciBFbGxpcHNpcyA9IGNyZWF0ZUJ1dHRvbignRWxsaXBzaXMnLCBcIlxcdTIwMjZcIiwgJ01vcmUnKTtcbmV4cG9ydCB2YXIgTmV4dCA9IGNyZWF0ZUJ1dHRvbignTmV4dCcsIFwiXFx1MjAzQVwiKTtcbmV4cG9ydCB2YXIgTGFzdCA9IGNyZWF0ZUJ1dHRvbignTGFzdCcsIFwiXFx4QkJcIik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBhZ2luYXRpb25JdGVtLCB7IEZpcnN0LCBQcmV2LCBFbGxpcHNpcywgTmV4dCwgTGFzdCB9IGZyb20gJy4vUGFnaW5hdGlvbkl0ZW0nO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgUGFnaW5hdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQYWdpbmF0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYWdpbmF0aW9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQYWdpbmF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFBhZ2luYXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmJzQ2xhc3MoJ3BhZ2luYXRpb24nLCBQYWdpbmF0aW9uKTtcblBhZ2luYXRpb24uRmlyc3QgPSBGaXJzdDtcblBhZ2luYXRpb24uUHJldiA9IFByZXY7XG5QYWdpbmF0aW9uLkVsbGlwc2lzID0gRWxsaXBzaXM7XG5QYWdpbmF0aW9uLkl0ZW0gPSBQYWdpbmF0aW9uSXRlbTtcblBhZ2luYXRpb24uTmV4dCA9IE5leHQ7XG5QYWdpbmF0aW9uLkxhc3QgPSBMYXN0O1xuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcHJlZml4LCBzcGxpdEJzUHJvcHMsIGJzQ2xhc3MgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuL0NvbGxhcHNlJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBleHBhbmRzXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBzdGFydHMgdG8gZXhwYW5kXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgZXhwYW5kZWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGNvbGxhcHNlc1xuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBzdGFydHMgdG8gY29sbGFwc2VcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGNvbGxhcHNlZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX3BhbmVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhlYWRpbmdJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBib2R5SWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2xcbiAgfSlcbn07XG5cbnZhciBQYW5lbENvbGxhcHNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhbmVsQ29sbGFwc2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhbmVsQ29sbGFwc2UoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhbmVsQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBfcmVmID0gdGhpcy5jb250ZXh0LiRic19wYW5lbCB8fCB7fSxcbiAgICAgICAgaGVhZGluZ0lkID0gX3JlZi5oZWFkaW5nSWQsXG4gICAgICAgIGJvZHlJZCA9IF9yZWYuYm9keUlkLFxuICAgICAgICBfYnNDbGFzcyA9IF9yZWYuYnNDbGFzcyxcbiAgICAgICAgZXhwYW5kZWQgPSBfcmVmLmV4cGFuZGVkO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHModGhpcy5wcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBwcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICBic1Byb3BzLmJzQ2xhc3MgPSBfYnNDbGFzcyB8fCBic1Byb3BzLmJzQ2xhc3M7XG5cbiAgICBpZiAoaGVhZGluZ0lkICYmIGJvZHlJZCkge1xuICAgICAgcHJvcHMuaWQgPSBib2R5SWQ7XG4gICAgICBwcm9wcy5yb2xlID0gcHJvcHMucm9sZSB8fCAndGFicGFuZWwnO1xuICAgICAgcHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddID0gaGVhZGluZ0lkO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbGxhcHNlLCBfZXh0ZW5kcyh7XG4gICAgICBpbjogZXhwYW5kZWRcbiAgICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ2NvbGxhcHNlJylcbiAgICB9LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbENvbGxhcHNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbENvbGxhcHNlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsQ29sbGFwc2UuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygncGFuZWwnLCBQYW5lbENvbGxhcHNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgcHJlZml4LCBzcGxpdEJzUHJvcHNBbmRPbWl0LCBic0NsYXNzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgUGFuZWxDb2xsYXBzZSBmcm9tICcuL1BhbmVsQ29sbGFwc2UnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IHJlbmRlcnMgYSBDb2xsYXBzZSBjb21wb25lbnQgYXJvdW5kIHRoZSBCb2R5IGZvclxuICAgKiBzaXR1YXRpb25zIHdoZW4gdGhlIHBhcmVudCBQYW5lbCBvbmx5IGNvbnRhaW5zIGEgc2luZ2xlIFBhbmVsLkJvZHkgY2hpbGQuXG4gICAqXG4gICAqIHJlbmRlcnM6XG4gICAqIGBgYGpzeFxuICAgKiA8UGFuZWwuQ29sbGFwc2U+XG4gICAqICA8UGFuZWwuQm9keSAvPlxuICAgKiA8L1BhbmVsLkNvbGxhcHNlPlxuICAgKiBgYGBcbiAgICovXG4gIGNvbGxhcHNpYmxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29sbGFwc2libGU6IGZhbHNlXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX3BhbmVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSlcbn07XG5cbnZhciBQYW5lbEJvZHkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGFuZWxCb2R5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYW5lbEJvZHkoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhbmVsQm9keS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNvbGxhcHNpYmxlID0gX3RoaXMkcHJvcHMuY29sbGFwc2libGU7XG5cbiAgICB2YXIgX3JlZiA9IHRoaXMuY29udGV4dC4kYnNfcGFuZWwgfHwge30sXG4gICAgICAgIF9ic0NsYXNzID0gX3JlZi5ic0NsYXNzO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHNBbmRPbWl0ID0gc3BsaXRCc1Byb3BzQW5kT21pdCh0aGlzLnByb3BzLCBbJ2NvbGxhcHNpYmxlJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgYnNQcm9wcy5ic0NsYXNzID0gX2JzQ2xhc3MgfHwgYnNQcm9wcy5ic0NsYXNzO1xuICAgIHZhciBib2R5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNuKGNsYXNzTmFtZSwgcHJlZml4KGJzUHJvcHMsICdib2R5JykpXG4gICAgfSksIGNoaWxkcmVuKTtcblxuICAgIGlmIChjb2xsYXBzaWJsZSkge1xuICAgICAgYm9keSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFuZWxDb2xsYXBzZSwgbnVsbCwgYm9keSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvZHk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsQm9keTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUGFuZWxCb2R5LnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsQm9keS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5QYW5lbEJvZHkuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygncGFuZWwnLCBQYW5lbEJvZHkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3JlYWN0LXByb3AtdHlwZXMvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB7IHByZWZpeCwgYnNDbGFzcywgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGVhZGluZ0lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSlcbn07XG5cbnZhciBQYW5lbEhlYWRpbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGFuZWxIZWFkaW5nLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYW5lbEhlYWRpbmcoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhbmVsSGVhZGluZy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudENsYXNzXCJdKTtcblxuICAgIHZhciBfcmVmID0gdGhpcy5jb250ZXh0LiRic19wYW5lbCB8fCB7fSxcbiAgICAgICAgaGVhZGluZ0lkID0gX3JlZi5oZWFkaW5nSWQsXG4gICAgICAgIF9ic0NsYXNzID0gX3JlZi5ic0NsYXNzO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIGJzUHJvcHMuYnNDbGFzcyA9IF9ic0NsYXNzIHx8IGJzUHJvcHMuYnNDbGFzcztcblxuICAgIGlmIChoZWFkaW5nSWQpIHtcbiAgICAgIGVsZW1lbnRQcm9wcy5yb2xlID0gZWxlbWVudFByb3BzLnJvbGUgfHwgJ3RhYic7XG4gICAgICBlbGVtZW50UHJvcHMuaWQgPSBoZWFkaW5nSWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNuKGNsYXNzTmFtZSwgcHJlZml4KGJzUHJvcHMsICdoZWFkaW5nJykpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gUGFuZWxIZWFkaW5nO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbEhlYWRpbmcucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUGFuZWxIZWFkaW5nLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblBhbmVsSGVhZGluZy5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdwYW5lbCcsIFBhbmVsSGVhZGluZyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncmVhY3QtcHJvcC10eXBlcy9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIG9ubHkgaGVyZSB0byBzYXRpc2Z5IGxpbnRpbmcsIGp1c3QgdGhlIGh0bWwgb25DbGljayBoYW5kbGVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogU2FmZUFuY2hvclxufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19wYW5lbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBib2R5SWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25Ub2dnbGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbFxuICB9KVxufTtcblxudmFyIFBhbmVsVG9nZ2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhbmVsVG9nZ2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYW5lbFRvZ2dsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBfdGhpcy5oYW5kbGVUb2dnbGUuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhbmVsVG9nZ2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKGV2ZW50KSB7XG4gICAgdmFyIF9yZWYgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsIHx8IHt9LFxuICAgICAgICBvblRvZ2dsZSA9IF9yZWYub25Ub2dnbGU7XG5cbiAgICBpZiAob25Ub2dnbGUpIHtcbiAgICAgIG9uVG9nZ2xlKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjb21wb25lbnRDbGFzcyA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJvbkNsaWNrXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50Q2xhc3NcIl0pO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5jb250ZXh0LiRic19wYW5lbCB8fCB7fSxcbiAgICAgICAgZXhwYW5kZWQgPSBfcmVmMi5leHBhbmRlZCxcbiAgICAgICAgYm9keUlkID0gX3JlZjIuYm9keUlkO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudENsYXNzO1xuICAgIHByb3BzLm9uQ2xpY2sgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25DbGljaywgdGhpcy5oYW5kbGVUb2dnbGUpO1xuICAgIHByb3BzWydhcmlhLWV4cGFuZGVkJ10gPSBleHBhbmRlZDtcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgIWV4cGFuZGVkICYmICdjb2xsYXBzZWQnKTtcblxuICAgIGlmIChib2R5SWQpIHtcbiAgICAgIHByb3BzWydhcmlhLWNvbnRyb2xzJ10gPSBib2R5SWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbFRvZ2dsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5QYW5lbFRvZ2dsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5QYW5lbFRvZ2dsZS5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5leHBvcnQgZGVmYXVsdCBQYW5lbFRvZ2dsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdyZWFjdC1wcm9wLXR5cGVzL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgeyBwcmVmaXgsIHNwbGl0QnNQcm9wcywgYnNDbGFzcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IFBhbmVsVG9nZ2xlIGZyb20gJy4vUGFuZWxUb2dnbGUnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCByZW5kZXJzIHRoZSBQYW5lbC5UaXRsZSBhcyBhIHBhbmVsIGNvbGxhcHNlIHRvZ2dsZSBjb21wb25lbnRcbiAgICogZm9yIHRoZSBjb21tb24gdXNlLWNhc2UuXG4gICAqL1xuICB0b2dnbGU6IFByb3BUeXBlcy5ib29sXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX3BhbmVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSlcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBQYW5lbFRpdGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhbmVsVGl0bGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhbmVsVGl0bGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhbmVsVGl0bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0b2dnbGUgPSBfdGhpcyRwcm9wcy50b2dnbGUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcInRvZ2dsZVwiLCBcImNvbXBvbmVudENsYXNzXCJdKTtcblxuICAgIHZhciBfcmVmID0gdGhpcy5jb250ZXh0LiRic19wYW5lbCB8fCB7fSxcbiAgICAgICAgX2JzQ2xhc3MgPSBfcmVmLmJzQ2xhc3M7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgYnNQcm9wcy5ic0NsYXNzID0gX2JzQ2xhc3MgfHwgYnNQcm9wcy5ic0NsYXNzO1xuXG4gICAgaWYgKHRvZ2dsZSkge1xuICAgICAgY2hpbGRyZW4gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFBhbmVsVG9nZ2xlLCBudWxsLCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNuKGNsYXNzTmFtZSwgcHJlZml4KGJzUHJvcHMsICd0aXRsZScpKVxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsVGl0bGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBhbmVsVGl0bGUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUGFuZWxUaXRsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5QYW5lbFRpdGxlLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3BhbmVsJywgUGFuZWxUaXRsZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IHByZWZpeCwgYnNDbGFzcywgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZ1xuICB9KVxufTtcblxudmFyIFBhbmVsRm9vdGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhbmVsRm9vdGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYW5lbEZvb3RlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGFuZWxGb290ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lO1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsIHx8IHt9LFxuICAgICAgICBfYnNDbGFzcyA9IF9yZWYuYnNDbGFzcztcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHRoaXMucHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIGJzUHJvcHMuYnNDbGFzcyA9IF9ic0NsYXNzIHx8IGJzUHJvcHMuYnNDbGFzcztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNuKGNsYXNzTmFtZSwgcHJlZml4KGJzUHJvcHMsICdmb290ZXInKSlcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbEZvb3Rlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUGFuZWxGb290ZXIuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygncGFuZWwnLCBQYW5lbEZvb3Rlcik7IiwiaW1wb3J0IF9PYmplY3QkYXNzaWduIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiO1xuaW1wb3J0IF9PYmplY3QkdmFsdWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5jb250cm9sbGFibGUgfSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGJzU3R5bGVzLCBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU3RhdGUsIFN0eWxlIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5pbXBvcnQgQm9keSBmcm9tICcuL1BhbmVsQm9keSc7XG5pbXBvcnQgSGVhZGluZyBmcm9tICcuL1BhbmVsSGVhZGluZyc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi9QYW5lbFRpdGxlJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9QYW5lbEZvb3Rlcic7XG5pbXBvcnQgVG9nZ2xlIGZyb20gJy4vUGFuZWxUb2dnbGUnO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vUGFuZWxDb2xsYXBzZSc7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGRlZmF1bHRHZXRJZCA9IGZ1bmN0aW9uIGRlZmF1bHRHZXRJZChpZCwgdHlwZSkge1xuICByZXR1cm4gaWQgPyBpZCArIFwiLS1cIiArIHR5cGUgOiBudWxsO1xufTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSBjb2xsYXBzZWQvZXhwYW5kZWQgc3RhdGUgb2Z0aGUgUGFuZWwuIFJlcXVpcmVzXG4gICAqIGEgYFBhbmVsLkNvbGxhcHNlYCBvciBgPFBhbmVsLkJvZHkgY29sbGFwc2libGU+YCBjaGlsZCBjb21wb25lbnRcbiAgICogaW4gb3JkZXIgdG8gYWN0dWFsbHkgYW5pbWF0ZSBvdXQgb3IgaW4uXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgb25Ub2dnbGVcbiAgICovXG4gIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb2xsYXBzZSBzdGF0ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIGV4cGFuZGVkXG4gICAqL1xuICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGBpZGAgYXR0cmlidXRlIHVuaXF1ZWx5IGlkZW50aWZ5aW5nIHRoZSBQYW5lbCBjb21wb25lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZ1xufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19wYW5lbEdyb3VwOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGdldElkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG4gICAgb25Ub2dnbGU6IFByb3BUeXBlcy5mdW5jXG4gIH0pXG59O1xudmFyIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGVhZGluZ0lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGJvZHlJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2xcbiAgfSlcbn07XG5cbnZhciBQYW5lbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQYW5lbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFuZWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHBhbmVsR3JvdXAgPSBfdGhpcy5jb250ZXh0LiRic19wYW5lbEdyb3VwO1xuICAgICAgdmFyIGV4cGFuZGVkID0gIV90aGlzLmdldEV4cGFuZGVkKCk7XG5cbiAgICAgIGlmIChwYW5lbEdyb3VwICYmIHBhbmVsR3JvdXAub25Ub2dnbGUpIHtcbiAgICAgICAgcGFuZWxHcm91cC5vblRvZ2dsZShfdGhpcy5wcm9wcy5ldmVudEtleSwgZXhwYW5kZWQsIGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub2dnbGUoZXhwYW5kZWQsIGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGFuZWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZXZlbnRLZXkgPSBfdGhpcyRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZDtcbiAgICB2YXIgaWRLZXkgPSBldmVudEtleSA9PSBudWxsID8gaWQgOiBldmVudEtleTtcbiAgICB2YXIgaWRzO1xuXG4gICAgaWYgKGlkS2V5ICE9PSBudWxsKSB7XG4gICAgICB2YXIgcGFuZWxHcm91cCA9IHRoaXMuY29udGV4dC4kYnNfcGFuZWxHcm91cDtcbiAgICAgIHZhciBnZXRJZCA9IHBhbmVsR3JvdXAgJiYgcGFuZWxHcm91cC5nZXRJZCB8fCBkZWZhdWx0R2V0SWQ7XG4gICAgICBpZHMgPSB7XG4gICAgICAgIGhlYWRpbmdJZDogZ2V0SWQoaWRLZXksICdoZWFkaW5nJyksXG4gICAgICAgIGJvZHlJZDogZ2V0SWQoaWRLZXksICdib2R5JylcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICRic19wYW5lbDogX2V4dGVuZHMoe30sIGlkcywge1xuICAgICAgICBic0NsYXNzOiB0aGlzLnByb3BzLmJzQ2xhc3MsXG4gICAgICAgIGV4cGFuZGVkOiB0aGlzLmdldEV4cGFuZGVkKCksXG4gICAgICAgIG9uVG9nZ2xlOiB0aGlzLmhhbmRsZVRvZ2dsZVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5nZXRFeHBhbmRlZCA9IGZ1bmN0aW9uIGdldEV4cGFuZGVkKCkge1xuICAgIHZhciBwYW5lbEdyb3VwID0gdGhpcy5jb250ZXh0LiRic19wYW5lbEdyb3VwO1xuXG4gICAgaWYgKHBhbmVsR3JvdXAgJiYgaGFzLmNhbGwocGFuZWxHcm91cCwgJ2FjdGl2ZUtleScpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHRoaXMucHJvcHMuZXhwYW5kZWQgPT0gbnVsbCwgJ1NwZWNpZnlpbmcgYDxQYW5lbD5gIGBleHBhbmRlZGAgaW4gdGhlIGNvbnRleHQgb2YgYW4gYWNjb3JkaW9uICcgKyAnYDxQYW5lbEdyb3VwPmAgaXMgbm90IHN1cHBvcnRlZC4gU2V0IGBhY3RpdmVLZXlgIG9uIHRoZSAnICsgJ2A8UGFuZWxHcm91cD5gIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gcGFuZWxHcm91cC5hY3RpdmVLZXkgPT09IHRoaXMucHJvcHMuZXZlbnRLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5wcm9wcy5leHBhbmRlZDtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbjtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQodGhpcy5wcm9wcywgWydvblRvZ2dsZScsICdldmVudEtleScsICdleHBhbmRlZCddKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzBdLFxuICAgICAgICBwcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBnZXRDbGFzc1NldChic1Byb3BzKSlcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUGFuZWwucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUGFuZWwuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuUGFuZWwuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbnZhciBVbmNvbnRyb2xsZWRQYW5lbCA9IHVuY29udHJvbGxhYmxlKGJzQ2xhc3MoJ3BhbmVsJywgYnNTdHlsZXMoX09iamVjdCR2YWx1ZXMoU3RhdGUpLmNvbmNhdChbU3R5bGUuREVGQVVMVCwgU3R5bGUuUFJJTUFSWV0pLCBTdHlsZS5ERUZBVUxULCBQYW5lbCkpLCB7XG4gIGV4cGFuZGVkOiAnb25Ub2dnbGUnXG59KTtcblxuX09iamVjdCRhc3NpZ24oVW5jb250cm9sbGVkUGFuZWwsIHtcbiAgSGVhZGluZzogSGVhZGluZyxcbiAgVGl0bGU6IFRpdGxlLFxuICBCb2R5OiBCb2R5LFxuICBGb290ZXI6IEZvb3RlcixcbiAgVG9nZ2xlOiBUb2dnbGUsXG4gIENvbGxhcHNlOiBDb2xsYXBzZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFVuY29udHJvbGxlZFBhbmVsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaXNSZXF1aXJlZEZvckExMXkgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvaXNSZXF1aXJlZEZvckExMXknO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQW4gaHRtbCBpZCBhdHRyaWJ1dGUsIG5lY2Vzc2FyeSBmb3IgYWNjZXNzaWJpbGl0eVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcmVxdWlyZWRcbiAgICovXG4gIGlkOiBpc1JlcXVpcmVkRm9yQTExeShQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkpLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gdGhlIFBvcG92ZXIgaXMgcG9zaXRpb25lZCB0b3dhcmRzLlxuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcInRvcFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3Zlci5cbiAgICovXG4gIHBvc2l0aW9uVG9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcImxlZnRcIiBwb3NpdGlvbiB2YWx1ZSBmb3IgdGhlIFBvcG92ZXIuXG4gICAqL1xuICBwb3NpdGlvbkxlZnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwidG9wXCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBQb3BvdmVyIGFycm93LlxuICAgKi9cbiAgYXJyb3dPZmZzZXRUb3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwibGVmdFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3ZlciBhcnJvdy5cbiAgICovXG4gIGFycm93T2Zmc2V0TGVmdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaXRsZSBjb250ZW50XG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbnZhciBQb3BvdmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBvcG92ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBvcG92ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHBsYWNlbWVudCA9IF90aGlzJHByb3BzLnBsYWNlbWVudCxcbiAgICAgICAgcG9zaXRpb25Ub3AgPSBfdGhpcyRwcm9wcy5wb3NpdGlvblRvcCxcbiAgICAgICAgcG9zaXRpb25MZWZ0ID0gX3RoaXMkcHJvcHMucG9zaXRpb25MZWZ0LFxuICAgICAgICBhcnJvd09mZnNldFRvcCA9IF90aGlzJHByb3BzLmFycm93T2Zmc2V0VG9wLFxuICAgICAgICBhcnJvd09mZnNldExlZnQgPSBfdGhpcyRwcm9wcy5hcnJvd09mZnNldExlZnQsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wicGxhY2VtZW50XCIsIFwicG9zaXRpb25Ub3BcIiwgXCJwb3NpdGlvbkxlZnRcIiwgXCJhcnJvd09mZnNldFRvcFwiLCBcImFycm93T2Zmc2V0TGVmdFwiLCBcInRpdGxlXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3BsYWNlbWVudF0gPSB0cnVlLCBfZXh0ZW5kczIpKTtcblxuICAgIHZhciBvdXRlclN0eWxlID0gX2V4dGVuZHMoe1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRvcDogcG9zaXRpb25Ub3AsXG4gICAgICBsZWZ0OiBwb3NpdGlvbkxlZnRcbiAgICB9LCBzdHlsZSk7XG5cbiAgICB2YXIgYXJyb3dTdHlsZSA9IHtcbiAgICAgIHRvcDogYXJyb3dPZmZzZXRUb3AsXG4gICAgICBsZWZ0OiBhcnJvd09mZnNldExlZnRcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICBzdHlsZTogb3V0ZXJTdHlsZVxuICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJhcnJvd1wiLFxuICAgICAgc3R5bGU6IGFycm93U3R5bGVcbiAgICB9KSwgdGl0bGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICd0aXRsZScpXG4gICAgfSwgdGl0bGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICdjb250ZW50JylcbiAgICB9LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBQb3BvdmVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3BvdmVyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBvcG92ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygncG9wb3ZlcicsIFBvcG92ZXIpOyIsImltcG9ydCBfT2JqZWN0JHZhbHVlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBic0NsYXNzIGFzIHNldEJzQ2xhc3MsIGJzU3R5bGVzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xudmFyIFJPVU5EX1BSRUNJU0lPTiA9IDEwMDA7XG4vKipcbiAqIFZhbGlkYXRlIHRoYXQgY2hpbGRyZW4sIGlmIGFueSwgYXJlIGluc3RhbmNlcyBvZiBgPFByb2dyZXNzQmFyPmAuXG4gKi9cblxuZnVuY3Rpb24gb25seVByb2dyZXNzQmFyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGVycm9yID0gbnVsbDtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBhcmUgdHlwZXMgaW4gYSB3YXkgdGhhdCB3b3JrcyB3aXRoIGxpYnJhcmllcyB0aGF0IHBhdGNoIGFuZCBwcm94eVxuICAgICAqIGNvbXBvbmVudHMgbGlrZSByZWFjdC1ob3QtbG9hZGVyLlxuICAgICAqXG4gICAgICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXIjY2hlY2tpbmctZWxlbWVudC10eXBlc1xuICAgICAqL1xuXG5cbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvZ3Jlc3NCYXIsIG51bGwpO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBlbGVtZW50LnR5cGUpIHJldHVybjtcbiAgICB2YXIgY2hpbGRJZGVudGlmaWVyID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gY2hpbGQudHlwZS5kaXNwbGF5TmFtZSB8fCBjaGlsZC50eXBlLm5hbWUgfHwgY2hpbGQudHlwZSA6IGNoaWxkO1xuICAgIGVycm9yID0gbmV3IEVycm9yKFwiQ2hpbGRyZW4gb2YgXCIgKyBjb21wb25lbnROYW1lICsgXCIgY2FuIGNvbnRhaW4gb25seSBQcm9ncmVzc0JhciBcIiArIChcImNvbXBvbmVudHMuIEZvdW5kIFwiICsgY2hpbGRJZGVudGlmaWVyICsgXCIuXCIpKTtcbiAgfSk7XG4gIHJldHVybiBlcnJvcjtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgbWluOiBQcm9wVHlwZXMubnVtYmVyLFxuICBub3c6IFByb3BUeXBlcy5udW1iZXIsXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICBzck9ubHk6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpcGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IG9ubHlQcm9ncmVzc0JhcixcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzQ2hpbGQ6IFByb3BUeXBlcy5ib29sXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbWluOiAwLFxuICBtYXg6IDEwMCxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgaXNDaGlsZDogZmFsc2UsXG4gIHNyT25seTogZmFsc2UsXG4gIHN0cmlwZWQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBnZXRQZXJjZW50YWdlKG5vdywgbWluLCBtYXgpIHtcbiAgdmFyIHBlcmNlbnRhZ2UgPSAobm93IC0gbWluKSAvIChtYXggLSBtaW4pICogMTAwO1xuICByZXR1cm4gTWF0aC5yb3VuZChwZXJjZW50YWdlICogUk9VTkRfUFJFQ0lTSU9OKSAvIFJPVU5EX1BSRUNJU0lPTjtcbn1cblxudmFyIFByb2dyZXNzQmFyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFByb2dyZXNzQmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9ncmVzc0JhcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUHJvZ3Jlc3NCYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXJQcm9ncmVzc0JhciA9IGZ1bmN0aW9uIHJlbmRlclByb2dyZXNzQmFyKF9yZWYpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIG1pbiA9IF9yZWYubWluLFxuICAgICAgICBub3cgPSBfcmVmLm5vdyxcbiAgICAgICAgbWF4ID0gX3JlZi5tYXgsXG4gICAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgICAgc3JPbmx5ID0gX3JlZi5zck9ubHksXG4gICAgICAgIHN0cmlwZWQgPSBfcmVmLnN0cmlwZWQsXG4gICAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlLFxuICAgICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcIm1pblwiLCBcIm5vd1wiLCBcIm1heFwiLCBcImxhYmVsXCIsIFwic3JPbmx5XCIsIFwic3RyaXBlZFwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHtcbiAgICAgIGFjdGl2ZTogYWN0aXZlXG4gICAgfSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnc3RyaXBlZCcpXSA9IGFjdGl2ZSB8fCBzdHJpcGVkLCBfZXh0ZW5kczIpKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgd2lkdGg6IGdldFBlcmNlbnRhZ2Uobm93LCBtaW4sIG1heCkgKyBcIiVcIlxuICAgICAgfSwgc3R5bGUpLFxuICAgICAgXCJhcmlhLXZhbHVlbm93XCI6IG5vdyxcbiAgICAgIFwiYXJpYS12YWx1ZW1pblwiOiBtaW4sXG4gICAgICBcImFyaWEtdmFsdWVtYXhcIjogbWF4XG4gICAgfSksIHNyT25seSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgICB9LCBsYWJlbCkgOiBsYWJlbCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpc0NoaWxkID0gX3RoaXMkcHJvcHMuaXNDaGlsZCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaXNDaGlsZFwiXSk7XG5cbiAgICBpZiAoaXNDaGlsZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUHJvZ3Jlc3NCYXIocHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBtaW4gPSBwcm9wcy5taW4sXG4gICAgICAgIG5vdyA9IHByb3BzLm5vdyxcbiAgICAgICAgbWF4ID0gcHJvcHMubWF4LFxuICAgICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgICBzck9ubHkgPSBwcm9wcy5zck9ubHksXG4gICAgICAgIHN0cmlwZWQgPSBwcm9wcy5zdHJpcGVkLFxuICAgICAgICBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICAgIGJzQ2xhc3MgPSBwcm9wcy5ic0NsYXNzLFxuICAgICAgICBic1N0eWxlID0gcHJvcHMuYnNTdHlsZSxcbiAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wibWluXCIsIFwibm93XCIsIFwibWF4XCIsIFwibGFiZWxcIiwgXCJzck9ubHlcIiwgXCJzdHJpcGVkXCIsIFwiYWN0aXZlXCIsIFwiYnNDbGFzc1wiLCBcImJzU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgd3JhcHBlclByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAncHJvZ3Jlc3MnKVxuICAgIH0pLCBjaGlsZHJlbiA/IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaXNDaGlsZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSkgOiB0aGlzLnJlbmRlclByb2dyZXNzQmFyKHtcbiAgICAgIG1pbjogbWluLFxuICAgICAgbm93OiBub3csXG4gICAgICBtYXg6IG1heCxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIHNyT25seTogc3JPbmx5LFxuICAgICAgc3RyaXBlZDogc3RyaXBlZCxcbiAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgYnNDbGFzczogYnNDbGFzcyxcbiAgICAgIGJzU3R5bGU6IGJzU3R5bGVcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFByb2dyZXNzQmFyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9ncmVzc0Jhci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Qcm9ncmVzc0Jhci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBzZXRCc0NsYXNzKCdwcm9ncmVzcy1iYXInLCBic1N0eWxlcyhfT2JqZWN0JHZhbHVlcyhTdGF0ZSksIFByb2dyZXNzQmFyKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9sYWJlbC1oYXMtZm9yICovXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE9ubHkgdmFsaWQgaWYgYGlubGluZWAgaXMgbm90IHNldC5cbiAgICovXG4gIHZhbGlkYXRpb25TdGF0ZTogUHJvcFR5cGVzLm9uZU9mKFsnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJywgbnVsbF0pLFxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIHJlZiB0byB0aGUgYDxpbnB1dD5gIGVsZW1lbnQuIE9ubHkgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIGhlcmUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIDxSYWRpbyBpbnB1dFJlZj17cmVmID0+IHsgdGhpcy5pbnB1dCA9IHJlZjsgfX0gLz5cbiAgICogYGBgXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbmxpbmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHRpdGxlOiAnJ1xufTtcblxudmFyIFJhZGlvID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJhZGlvLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYWRpbygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmFkaW8ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaW5saW5lID0gX3RoaXMkcHJvcHMuaW5saW5lLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGUgPSBfdGhpcyRwcm9wcy52YWxpZGF0aW9uU3RhdGUsXG4gICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaW5saW5lXCIsIFwiZGlzYWJsZWRcIiwgXCJ2YWxpZGF0aW9uU3RhdGVcIiwgXCJpbnB1dFJlZlwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwidGl0bGVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGlucHV0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICB0eXBlOiBcInJhZGlvXCIsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KSk7XG5cbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICB2YXIgX2NsYXNzZXMyO1xuXG4gICAgICB2YXIgX2NsYXNzZXMgPSAoX2NsYXNzZXMyID0ge30sIF9jbGFzc2VzMltwcmVmaXgoYnNQcm9wcywgJ2lubGluZScpXSA9IHRydWUsIF9jbGFzc2VzMi5kaXNhYmxlZCA9IGRpc2FibGVkLCBfY2xhc3NlczIpOyAvLyBVc2UgYSB3YXJuaW5nIGhlcmUgaW5zdGVhZCBvZiBpbiBwcm9wVHlwZXMgdG8gZ2V0IGJldHRlci1sb29raW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbi5cblxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF2YWxpZGF0aW9uU3RhdGUsICdgdmFsaWRhdGlvblN0YXRlYCBpcyBpZ25vcmVkIG9uIGA8UmFkaW8gaW5saW5lPmAuIFRvIGRpc3BsYXkgJyArICd2YWxpZGF0aW9uIHN0YXRlIG9uIGFuIGlubGluZSByYWRpbywgc2V0IGB2YWxpZGF0aW9uU3RhdGVgIG9uIGEgJyArICdwYXJlbnQgYDxGb3JtR3JvdXA+YCBvciBvdGhlciBlbGVtZW50IGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgX2NsYXNzZXMpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSwgaW5wdXQsIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwge1xuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSk7XG5cbiAgICBpZiAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjbGFzc2VzW1wiaGFzLVwiICsgdmFsaWRhdGlvblN0YXRlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xuICAgICAgdGl0bGU6IHRpdGxlXG4gICAgfSwgaW5wdXQsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFJhZGlvO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SYWRpby5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5SYWRpby5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdyYWRpbycsIFJhZGlvKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJzsgLy8gVE9ETzogVGhpcyBzaG91bGQgcHJvYmFibHkgdGFrZSBhIHNpbmdsZSBgYXNwZWN0UmF0aW9gIHByb3AuXG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIGNvbXBvbmVudCByZXF1aXJlcyBhIHNpbmdsZSBjaGlsZCBlbGVtZW50XG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogMTZieTkgYXNwZWN0IHJhdGlvXG4gICAqL1xuICBhMTZieTk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiA0YnkzIGFzcGVjdCByYXRpb1xuICAgKi9cbiAgYTRieTM6IFByb3BUeXBlcy5ib29sXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYTE2Ynk5OiBmYWxzZSxcbiAgYTRieTM6IGZhbHNlXG59O1xuXG52YXIgUmVzcG9uc2l2ZUVtYmVkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJlc3BvbnNpdmVFbWJlZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZUVtYmVkKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXNwb25zaXZlRW1iZWQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGExNmJ5OSA9IF90aGlzJHByb3BzLmExNmJ5OSxcbiAgICAgICAgYTRieTMgPSBfdGhpcyRwcm9wcy5hNGJ5MyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhMTZieTlcIiwgXCJhNGJ5M1wiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGExNmJ5OSB8fCBhNGJ5MywgJ0VpdGhlciBgYTE2Ynk5YCBvciBgYTRieTNgIG11c3QgYmUgc2V0LicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShhMTZieTkgJiYgYTRieTMpLCAnT25seSBvbmUgb2YgYGExNmJ5OWAgb3IgYGE0YnkzYCBjYW4gYmUgc2V0LicpIDogdm9pZCAwO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnMTZieTknKV0gPSBhMTZieTksIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJzRieTMnKV0gPSBhNGJ5MywgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NlcylcbiAgICB9LCBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAnaXRlbScpKVxuICAgIH0pKSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlc3BvbnNpdmVFbWJlZDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVzcG9uc2l2ZUVtYmVkLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblJlc3BvbnNpdmVFbWJlZC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdlbWJlZC1yZXNwb25zaXZlJywgUmVzcG9uc2l2ZUVtYmVkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgUm93ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm93KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm93O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3cucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUm93LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3JvdycsIFJvdyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERyb3Bkb3duVG9nZ2xlIGZyb20gJy4vRHJvcGRvd25Ub2dnbGUnO1xuXG52YXIgU3BsaXRUb2dnbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3BsaXRUb2dnbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNwbGl0VG9nZ2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTcGxpdFRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93blRvZ2dsZSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHtcbiAgICAgIHVzZUFuY2hvcjogZmFsc2UsXG4gICAgICBub0NhcmV0OiBmYWxzZVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3BsaXRUb2dnbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblNwbGl0VG9nZ2xlLmRlZmF1bHRQcm9wcyA9IERyb3Bkb3duVG9nZ2xlLmRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFNwbGl0VG9nZ2xlOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9Ecm9wZG93bic7XG5pbXBvcnQgU3BsaXRUb2dnbGUgZnJvbSAnLi9TcGxpdFRvZ2dsZSc7XG5pbXBvcnQgc3BsaXRDb21wb25lbnRQcm9wcyBmcm9tICcuL3V0aWxzL3NwbGl0Q29tcG9uZW50UHJvcHMnO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIERyb3Bkb3duLnByb3BUeXBlcywge1xuICAvLyBUb2dnbGUgcHJvcHMuXG4gIGJzU3R5bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJzU2l6ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBzcGxpdCBidXR0b24uXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQWNjZXNzaWJsZSBsYWJlbCBmb3IgdGhlIHRvZ2dsZTsgdGhlIHZhbHVlIG9mIGB0aXRsZWAgaWYgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIHRvZ2dsZUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBPdmVycmlkZSBnZW5lcmF0ZWQgZG9jcyBmcm9tIDxEcm9wZG93bj4uXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0pO1xuXG52YXIgU3BsaXRCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3BsaXRCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNwbGl0QnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTcGxpdEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1NpemUgPSBfdGhpcyRwcm9wcy5ic1NpemUsXG4gICAgICAgIGJzU3R5bGUgPSBfdGhpcyRwcm9wcy5ic1N0eWxlLFxuICAgICAgICB0aXRsZSA9IF90aGlzJHByb3BzLnRpdGxlLFxuICAgICAgICB0b2dnbGVMYWJlbCA9IF90aGlzJHByb3BzLnRvZ2dsZUxhYmVsLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1NpemVcIiwgXCJic1N0eWxlXCIsIFwidGl0bGVcIiwgXCJ0b2dnbGVMYWJlbFwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRDb21wb25lbnRQcm9wcyA9IHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIERyb3Bkb3duLkNvbnRyb2xsZWRDb21wb25lbnQpLFxuICAgICAgICBkcm9wZG93blByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIGJ1dHRvblByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93biwgX2V4dGVuZHMoe30sIGRyb3Bkb3duUHJvcHMsIHtcbiAgICAgIGJzU2l6ZTogYnNTaXplLFxuICAgICAgYnNTdHlsZTogYnNTdHlsZVxuICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgX2V4dGVuZHMoe30sIGJ1dHRvblByb3BzLCB7XG4gICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICBic1NpemU6IGJzU2l6ZSxcbiAgICAgIGJzU3R5bGU6IGJzU3R5bGVcbiAgICB9KSwgdGl0bGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFNwbGl0VG9nZ2xlLCB7XG4gICAgICBcImFyaWEtbGFiZWxcIjogdG9nZ2xlTGFiZWwgfHwgdGl0bGUsXG4gICAgICBic1NpemU6IGJzU2l6ZSxcbiAgICAgIGJzU3R5bGU6IGJzU3R5bGVcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93bi5NZW51LCBudWxsLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBTcGxpdEJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3BsaXRCdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuU3BsaXRCdXR0b24uVG9nZ2xlID0gU3BsaXRUb2dnbGU7XG5leHBvcnQgZGVmYXVsdCBTcGxpdEJ1dHRvbjsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdW5jb250cm9sbGFibGUgfSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG52YXIgVEFCID0gJ3RhYic7XG52YXIgUEFORSA9ICdwYW5lJztcbnZhciBpZFByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEhUTUwgaWQgYXR0cmlidXRlLCByZXF1aXJlZCBpZiBubyBgZ2VuZXJhdGVDaGlsZElkYCBwcm9wXG4gICAqIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIGlkOiBmdW5jdGlvbiBpZChwcm9wcykge1xuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLmdlbmVyYXRlQ2hpbGRJZCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgZXJyb3IgPSBpZFByb3BUeXBlLmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuXG4gICAgICBpZiAoIWVycm9yICYmICFwcm9wcy5pZCkge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcignSW4gb3JkZXIgdG8gcHJvcGVybHkgaW5pdGlhbGl6ZSBUYWJzIGluIGEgd2F5IHRoYXQgaXMgYWNjZXNzaWJsZSAnICsgJ3RvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMgKHN1Y2ggYXMgc2NyZWVuIHJlYWRlcnMpIGFuIGBpZGAgb3IgYSAnICsgJ2BnZW5lcmF0ZUNoaWxkSWRgIHByb3AgdG8gVGFiQ29udGFpbmVyIGlzIHJlcXVpcmVkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9yO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gYGV2ZW50S2V5YCBhbmQgYHR5cGVgIGFuZCByZXR1cm5zIGEgdW5pcXVlIGlkIGZvclxuICAgKiBjaGlsZCB0YWIgYDxOYXZJdGVtPmBzIGFuZCBgPFRhYlBhbmU+YHMuIFRoZSBmdW5jdGlvbiBfbXVzdF8gYmUgYSBwdXJlXG4gICAqIGZ1bmN0aW9uLCBtZWFuaW5nIGl0IHNob3VsZCBhbHdheXMgcmV0dXJuIHRoZSBfc2FtZV8gaWQgZm9yIHRoZSBzYW1lIHNldFxuICAgKiBvZiBpbnB1dHMuIFRoZSBkZWZhdWx0IHZhbHVlIHJlcXVpcmVzIHRoYXQgYW4gYGlkYCB0byBiZSBzZXQgZm9yIHRoZVxuICAgKiBgPFRhYkNvbnRhaW5lcj5gLlxuICAgKlxuICAgKiBUaGUgYHR5cGVgIGFyZ3VtZW50IHdpbGwgZWl0aGVyIGJlIGBcInRhYlwiYCBvciBgXCJwYW5lXCJgLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIChldmVudEtleSwgdHlwZSkgPT4gYCR7dGhpcy5wcm9wcy5pZH0tJHt0eXBlfS0ke2tleX1gXG4gICAqL1xuICBnZW5lcmF0ZUNoaWxkSWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gYSB0YWIgaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgYWN0aXZlS2V5XG4gICAqL1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBgZXZlbnRLZXlgIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRhYi5cbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBvblNlbGVjdFxuICAgKi9cbiAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55XG59O1xudmFyIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAkYnNfdGFiQ29udGFpbmVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueSxcbiAgICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBnZXRUYWJJZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBnZXRQYW5lSWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn07XG5cbnZhciBUYWJDb250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiQ29udGFpbmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYkNvbnRhaW5lci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmVLZXkgPSBfdGhpcyRwcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgIGdlbmVyYXRlQ2hpbGRJZCA9IF90aGlzJHByb3BzLmdlbmVyYXRlQ2hpbGRJZCxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZDtcblxuICAgIHZhciBnZXRJZCA9IGdlbmVyYXRlQ2hpbGRJZCB8fCBmdW5jdGlvbiAoa2V5LCB0eXBlKSB7XG4gICAgICByZXR1cm4gaWQgPyBpZCArIFwiLVwiICsgdHlwZSArIFwiLVwiICsga2V5IDogbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICRic190YWJDb250YWluZXI6IHtcbiAgICAgICAgYWN0aXZlS2V5OiBhY3RpdmVLZXksXG4gICAgICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICAgICAgZ2V0VGFiSWQ6IGZ1bmN0aW9uIGdldFRhYklkKGtleSkge1xuICAgICAgICAgIHJldHVybiBnZXRJZChrZXksIFRBQik7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBhbmVJZDogZnVuY3Rpb24gZ2V0UGFuZUlkKGtleSkge1xuICAgICAgICAgIHJldHVybiBnZXRJZChrZXksIFBBTkUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImNoaWxkcmVuXCJdKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5nZW5lcmF0ZUNoaWxkSWQ7XG4gICAgZGVsZXRlIHByb3BzLm9uU2VsZWN0O1xuICAgIGRlbGV0ZSBwcm9wcy5hY3RpdmVLZXk7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgcHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUYWJDb250YWluZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYkNvbnRhaW5lci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5UYWJDb250YWluZXIuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbmV4cG9ydCBkZWZhdWx0IHVuY29udHJvbGxhYmxlKFRhYkNvbnRhaW5lciwge1xuICBhY3RpdmVLZXk6ICdvblNlbGVjdCdcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgeyBic0NsYXNzIGFzIHNldEJzQ2xhc3MsIHByZWZpeCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgZGVmYXVsdCBhbmltYXRpb24gc3RyYXRlZ3kgZm9yIGFsbCBjaGlsZHJlbiBgPFRhYlBhbmU+YHMuIFVzZVxuICAgKiBgZmFsc2VgIHRvIGRpc2FibGUsIGB0cnVlYCB0byBlbmFibGUgdGhlIGRlZmF1bHQgYDxGYWRlPmAgYW5pbWF0aW9uIG9yXG4gICAqIGEgcmVhY3QtdHJhbnNpdGlvbi1ncm91cCB2MiBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50LlxuICAgKi9cbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgZWxlbWVudFR5cGVdKSxcblxuICAvKipcbiAgICogV2FpdCB1bnRpbCB0aGUgZmlyc3QgXCJlbnRlclwiIHRyYW5zaXRpb24gdG8gbW91bnQgdGFicyAoYWRkIHRoZW0gdG8gdGhlIERPTSlcbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFVubW91bnQgdGFicyAocmVtb3ZlIGl0IGZyb20gdGhlIERPTSkgd2hlbiB0aGV5IGFyZSBubyBsb25nZXIgdmlzaWJsZVxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2RpdicsXG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2Vcbn07XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfdGFiQ29udGFpbmVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueVxuICB9KVxufTtcbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX3RhYkNvbnRlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBlbGVtZW50VHlwZV0pLFxuICAgIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueSxcbiAgICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGFuZUVudGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGFuZUV4aXRlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBleGl0aW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG4gIH0pXG59O1xuXG52YXIgVGFiQ29udGVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUYWJDb250ZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJDb250ZW50KHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlUGFuZUVudGVyID0gX3RoaXMuaGFuZGxlUGFuZUVudGVyLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZVBhbmVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVQYW5lRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBBY3RpdmUgZW50cmllcyBpbiBzdGF0ZSB3aWxsIGJlIGBudWxsYCB1bmxlc3MgYGFuaW1hdGlvbmAgaXMgc2V0LiBOZWVkXG4gICAgLy8gdG8gdHJhY2sgYWN0aXZlIGNoaWxkIGluIGNhc2Uga2V5cyBzd2FwIGFuZCB0aGUgYWN0aXZlIGNoaWxkIGNoYW5nZXNcbiAgICAvLyBidXQgdGhlIGFjdGl2ZSBrZXkgZG9lcyBub3QuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUtleTogbnVsbCxcbiAgICAgIGFjdGl2ZUNoaWxkOiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGFiQ29udGVudC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic0NsYXNzID0gX3RoaXMkcHJvcHMuYnNDbGFzcyxcbiAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBtb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIHVubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0O1xuICAgIHZhciBzdGF0ZUFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5O1xuICAgIHZhciBjb250YWluZXJBY3RpdmVLZXkgPSB0aGlzLmdldENvbnRhaW5lckFjdGl2ZUtleSgpO1xuICAgIHZhciBhY3RpdmVLZXkgPSBzdGF0ZUFjdGl2ZUtleSAhPSBudWxsID8gc3RhdGVBY3RpdmVLZXkgOiBjb250YWluZXJBY3RpdmVLZXk7XG4gICAgdmFyIGV4aXRpbmcgPSBzdGF0ZUFjdGl2ZUtleSAhPSBudWxsICYmIHN0YXRlQWN0aXZlS2V5ICE9PSBjb250YWluZXJBY3RpdmVLZXk7XG4gICAgcmV0dXJuIHtcbiAgICAgICRic190YWJDb250ZW50OiB7XG4gICAgICAgIGJzQ2xhc3M6IGJzQ2xhc3MsXG4gICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICAgICAgbW91bnRPbkVudGVyOiBtb3VudE9uRW50ZXIsXG4gICAgICAgIHVubW91bnRPbkV4aXQ6IHVubW91bnRPbkV4aXQsXG4gICAgICAgIG9uUGFuZUVudGVyOiB0aGlzLmhhbmRsZVBhbmVFbnRlcixcbiAgICAgICAgb25QYW5lRXhpdGVkOiB0aGlzLmhhbmRsZVBhbmVFeGl0ZWQsXG4gICAgICAgIGV4aXRpbmc6IGV4aXRpbmdcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoIW5leHRQcm9wcy5hbmltYXRpb24gJiYgdGhpcy5zdGF0ZS5hY3RpdmVDaGlsZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFjdGl2ZUtleTogbnVsbCxcbiAgICAgICAgYWN0aXZlQ2hpbGQ6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Q29udGFpbmVyQWN0aXZlS2V5ID0gZnVuY3Rpb24gZ2V0Q29udGFpbmVyQWN0aXZlS2V5KCkge1xuICAgIHZhciB0YWJDb250YWluZXIgPSB0aGlzLmNvbnRleHQuJGJzX3RhYkNvbnRhaW5lcjtcbiAgICByZXR1cm4gdGFiQ29udGFpbmVyICYmIHRhYkNvbnRhaW5lci5hY3RpdmVLZXk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZVBhbmVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZVBhbmVFbnRlcihjaGlsZCwgY2hpbGRLZXkpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgdGhpcyBjaGlsZCBzaG91bGQgYmUgdHJhbnNpdGlvbmluZyBvdXQuXG5cblxuICAgIGlmIChjaGlsZEtleSAhPT0gdGhpcy5nZXRDb250YWluZXJBY3RpdmVLZXkoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYWN0aXZlS2V5OiBjaGlsZEtleSxcbiAgICAgIGFjdGl2ZUNoaWxkOiBjaGlsZFxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVQYW5lRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlUGFuZUV4aXRlZChjaGlsZCkge1xuICAgIC8vIFRoaXMgbWlnaHQgaGFwcGVuIGFzIGV2ZXJ5dGhpbmcgaXMgdW5tb3VudGluZy5cbiAgICBpZiAodGhpcy5pc1VubW91bnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBhY3RpdmVDaGlsZCA9IF9yZWYuYWN0aXZlQ2hpbGQ7XG5cbiAgICAgIGlmIChhY3RpdmVDaGlsZCAhPT0gY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjdGl2ZUtleTogbnVsbCxcbiAgICAgICAgYWN0aXZlQ2hpbGQ6IG51bGxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHNBbmRPbWl0ID0gc3BsaXRCc1Byb3BzQW5kT21pdChwcm9wcywgWydhbmltYXRpb24nLCAnbW91bnRPbkVudGVyJywgJ3VubW91bnRPbkV4aXQnXSksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFswXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMV07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAnY29udGVudCcpKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gVGFiQ29udGVudDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFiQ29udGVudC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5UYWJDb250ZW50LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblRhYkNvbnRlbnQuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuVGFiQ29udGVudC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgc2V0QnNDbGFzcygndGFiJywgVGFiQ29udGVudCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgRmFkZSBmcm9tICcuL0ZhZGUnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBgPFRhYlBhbmU+YCBhbW9uZyBpdHMgc2libGluZ3MuXG4gICAqL1xuICBldmVudEtleTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVXNlIGFuaW1hdGlvbiB3aGVuIHNob3dpbmcgb3IgaGlkaW5nIGA8VGFiUGFuZT5gcy4gVXNlIGBmYWxzZWAgdG8gZGlzYWJsZSxcbiAgICogYHRydWVgIHRvIGVuYWJsZSB0aGUgZGVmYXVsdCBgPEZhZGU+YCBhbmltYXRpb24gb3JcbiAgICogYSByZWFjdC10cmFuc2l0aW9uLWdyb3VwIHYyIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQuXG4gICAqL1xuICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBlbGVtZW50VHlwZV0pLFxuXG4gIC8qKiBAcHJpdmF0ZSAqICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBAcHJpdmF0ZSAqICovXG4gICdhcmlhLWxhYmVsbGVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgYW5kIHJlbmRlcmVkIGluIHRoZSBjb250ZXh0IG9mIGFcbiAgICogYDxUYWJDb250ZW50PmAsIHRoZSBgYnNDbGFzc2Agb2YgdGhlIGA8VGFiQ29udGVudD5gIHN1ZmZpeGVkIGJ5IGAtcGFuZWAuXG4gICAqIElmIG90aGVyd2lzZSBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQsIGB0YWItcGFuZWAuXG4gICAqL1xuICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRW50ZXIgY2FsbGJhY2sgd2hlbiBhbmltYXRpb24gaXMgbm90IGBmYWxzZWBcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRW50ZXJpbmcgY2FsbGJhY2sgd2hlbiBhbmltYXRpb24gaXMgbm90IGBmYWxzZWBcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRW50ZXJlZCBjYWxsYmFjayB3aGVuIGFuaW1hdGlvbiBpcyBub3QgYGZhbHNlYFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVHJhbnNpdGlvbiBvbkV4aXQgY2FsbGJhY2sgd2hlbiBhbmltYXRpb24gaXMgbm90IGBmYWxzZWBcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb24gb25FeGl0aW5nIGNhbGxiYWNrIHdoZW4gYW5pbWF0aW9uIGlzIG5vdCBgZmFsc2VgXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRXhpdGVkIGNhbGxiYWNrIHdoZW4gYW5pbWF0aW9uIGlzIG5vdCBgZmFsc2VgXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFdhaXQgdW50aWwgdGhlIGZpcnN0IFwiZW50ZXJcIiB0cmFuc2l0aW9uIHRvIG1vdW50IHRoZSB0YWIgKGFkZCBpdCB0byB0aGUgRE9NKVxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVW5tb3VudCB0aGUgdGFiIChyZW1vdmUgaXQgZnJvbSB0aGUgRE9NKSB3aGVuIGl0IGlzIG5vIGxvbmdlciB2aXNpYmxlXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbFxufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic190YWJDb250YWluZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZ2V0VGFiSWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGdldFBhbmVJZDogUHJvcFR5cGVzLmZ1bmNcbiAgfSksXG4gICRic190YWJDb250ZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYW5pbWF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgZWxlbWVudFR5cGVdKSxcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG4gICAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvblBhbmVFbnRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBhbmVFeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZXhpdGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxuICB9KVxufTtcbi8qKlxuICogV2Ugb3ZlcnJpZGUgdGhlIGA8VGFiQ29udGFpbmVyPmAgY29udGV4dCBzbyBgPE5hdj5gcyBpbiBgPFRhYlBhbmU+YHMgZG9uJ3RcbiAqIGNvbmZsaWN0IHdpdGggdGhlIHRvcCBsZXZlbCBvbmUuXG4gKi9cblxudmFyIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAkYnNfdGFiQ29udGFpbmVyOiBQcm9wVHlwZXMub25lT2YoW251bGxdKVxufTtcblxudmFyIFRhYlBhbmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiUGFuZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiUGFuZShwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIF90aGlzLmhhbmRsZUVudGVyID0gX3RoaXMuaGFuZGxlRW50ZXIuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmluID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYlBhbmUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICRic190YWJDb250YWluZXI6IG51bGxcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnNob3VsZEJlSW4oKSkge1xuICAgICAgLy8gSW4gbGlldSBvZiB0aGUgYWN0aW9uIGV2ZW50IGZpcmluZy5cbiAgICAgIHRoaXMuaGFuZGxlRW50ZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5pbikge1xuICAgICAgaWYgKCF0aGlzLnNob3VsZEJlSW4oKSkge1xuICAgICAgICAvLyBXZSBzaG91bGRuJ3QgYmUgYWN0aXZlIGFueSBtb3JlLiBOb3RpZnkgdGhlIHBhcmVudC5cbiAgICAgICAgdGhpcy5oYW5kbGVFeGl0ZWQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuc2hvdWxkQmVJbigpKSB7XG4gICAgICAvLyBXZSBhcmUgdGhlIGFjdGl2ZSBjaGlsZC4gTm90aWZ5IHRoZSBwYXJlbnQuXG4gICAgICB0aGlzLmhhbmRsZUVudGVyKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmluKSB7XG4gICAgICAvLyBJbiBsaWV1IG9mIHRoZSBhY3Rpb24gZXZlbnQgZmlyaW5nLlxuICAgICAgdGhpcy5oYW5kbGVFeGl0ZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldEFuaW1hdGlvbiA9IGZ1bmN0aW9uIGdldEFuaW1hdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hbmltYXRpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYW5pbWF0aW9uO1xuICAgIH1cblxuICAgIHZhciB0YWJDb250ZW50ID0gdGhpcy5jb250ZXh0LiRic190YWJDb250ZW50O1xuICAgIHJldHVybiB0YWJDb250ZW50ICYmIHRhYkNvbnRlbnQuYW5pbWF0aW9uO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKCkge1xuICAgIHZhciB0YWJDb250ZW50ID0gdGhpcy5jb250ZXh0LiRic190YWJDb250ZW50O1xuXG4gICAgaWYgKCF0YWJDb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbiA9IHRhYkNvbnRlbnQub25QYW5lRW50ZXIodGhpcywgdGhpcy5wcm9wcy5ldmVudEtleSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpIHtcbiAgICB2YXIgdGFiQ29udGVudCA9IHRoaXMuY29udGV4dC4kYnNfdGFiQ29udGVudDtcblxuICAgIGlmICghdGFiQ29udGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhYkNvbnRlbnQub25QYW5lRXhpdGVkKHRoaXMpO1xuICAgIHRoaXMuaW4gPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICB2YXIgdGFiQ29udGVudCA9IHRoaXMuY29udGV4dC4kYnNfdGFiQ29udGVudDtcbiAgICB2YXIgYWN0aXZlS2V5ID0gdGFiQ29udGVudCAmJiB0YWJDb250ZW50LmFjdGl2ZUtleTtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5ldmVudEtleSA9PT0gYWN0aXZlS2V5O1xuICB9O1xuXG4gIF9wcm90by5zaG91bGRCZUluID0gZnVuY3Rpb24gc2hvdWxkQmVJbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbmltYXRpb24oKSAmJiB0aGlzLmlzQWN0aXZlKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIG9uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBvbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkID0gX3RoaXMkcHJvcHMub25FbnRlcmVkLFxuICAgICAgICBvbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgcHJvcHNNb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIHByb3BzVW5tb3VudE9uRXhpdCA9IF90aGlzJHByb3BzLnVubW91bnRPbkV4aXQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImV2ZW50S2V5XCIsIFwiY2xhc3NOYW1lXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvbkV4aXRlZFwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIl0pO1xuXG4gICAgdmFyIF90aGlzJGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhYkNvbnRlbnQgPSBfdGhpcyRjb250ZXh0LiRic190YWJDb250ZW50LFxuICAgICAgICB0YWJDb250YWluZXIgPSBfdGhpcyRjb250ZXh0LiRic190YWJDb250YWluZXI7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wc0FuZE9taXQgPSBzcGxpdEJzUHJvcHNBbmRPbWl0KHByb3BzLCBbJ2FuaW1hdGlvbiddKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFsxXTtcblxuICAgIHZhciBhY3RpdmUgPSB0aGlzLmlzQWN0aXZlKCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMuZ2V0QW5pbWF0aW9uKCk7XG4gICAgdmFyIG1vdW50T25FbnRlciA9IHByb3BzTW91bnRPbkVudGVyICE9IG51bGwgPyBwcm9wc01vdW50T25FbnRlciA6IHRhYkNvbnRlbnQgJiYgdGFiQ29udGVudC5tb3VudE9uRW50ZXI7XG4gICAgdmFyIHVubW91bnRPbkV4aXQgPSBwcm9wc1VubW91bnRPbkV4aXQgIT0gbnVsbCA/IHByb3BzVW5tb3VudE9uRXhpdCA6IHRhYkNvbnRlbnQgJiYgdGFiQ29udGVudC51bm1vdW50T25FeGl0O1xuXG4gICAgaWYgKCFhY3RpdmUgJiYgIWFuaW1hdGlvbiAmJiB1bm1vdW50T25FeGl0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgVHJhbnNpdGlvbiA9IGFuaW1hdGlvbiA9PT0gdHJ1ZSA/IEZhZGUgOiBhbmltYXRpb24gfHwgbnVsbDtcblxuICAgIGlmICh0YWJDb250ZW50KSB7XG4gICAgICBic1Byb3BzLmJzQ2xhc3MgPSBwcmVmaXgodGFiQ29udGVudCwgJ3BhbmUnKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwge1xuICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICB9KTtcblxuICAgIGlmICh0YWJDb250YWluZXIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWVsZW1lbnRQcm9wcy5pZCAmJiAhZWxlbWVudFByb3BzWydhcmlhLWxhYmVsbGVkYnknXSwgJ0luIHRoZSBjb250ZXh0IG9mIGEgYDxUYWJDb250YWluZXI+YCwgYDxUYWJQYW5lcz5gIGFyZSBnaXZlbiAnICsgJ2dlbmVyYXRlZCBgaWRgIGFuZCBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGVzIGZvciB0aGUgc2FrZSBvZiAnICsgJ3Byb3BlciBjb21wb25lbnQgYWNjZXNzaWJpbGl0eS4gQW55IHByb3ZpZGVkIG9uZXMgd2lsbCBiZSBpZ25vcmVkLiAnICsgJ1RvIGNvbnRyb2wgdGhlc2UgYXR0cmlidXRlcyBkaXJlY3RseSBwcm92aWRlIGEgYGdlbmVyYXRlQ2hpbGRJZGAgJyArICdwcm9wIHRvIHRoZSBwYXJlbnQgYDxUYWJDb250YWluZXI+YC4nKSA6IHZvaWQgMDtcbiAgICAgIGVsZW1lbnRQcm9wcy5pZCA9IHRhYkNvbnRhaW5lci5nZXRQYW5lSWQoZXZlbnRLZXkpO1xuICAgICAgZWxlbWVudFByb3BzWydhcmlhLWxhYmVsbGVkYnknXSA9IHRhYkNvbnRhaW5lci5nZXRUYWJJZChldmVudEtleSk7XG4gICAgfVxuXG4gICAgdmFyIHBhbmUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6IFwidGFicGFuZWxcIixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogIWFjdGl2ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuXG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIHZhciBleGl0aW5nID0gdGFiQ29udGVudCAmJiB0YWJDb250ZW50LmV4aXRpbmc7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgICAgIGluOiBhY3RpdmUgJiYgIWV4aXRpbmcsXG4gICAgICAgIG9uRW50ZXI6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyLCBvbkVudGVyKSxcbiAgICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgb25FeGl0ZWQ6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUV4aXRlZCwgb25FeGl0ZWQpLFxuICAgICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdW5tb3VudE9uRXhpdFxuICAgICAgfSwgcGFuZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhbmU7XG4gIH07XG5cbiAgcmV0dXJuIFRhYlBhbmU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYlBhbmUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuVGFiUGFuZS5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5UYWJQYW5lLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCd0YWItcGFuZScsIFRhYlBhbmUpOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVGFiQ29udGFpbmVyIGZyb20gJy4vVGFiQ29udGFpbmVyJztcbmltcG9ydCBUYWJDb250ZW50IGZyb20gJy4vVGFiQ29udGVudCc7XG5pbXBvcnQgVGFiUGFuZSBmcm9tICcuL1RhYlBhbmUnO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIFRhYlBhbmUucHJvcFR5cGVzLCB7XG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiB0YWJDbGFzc05hbWUgaXMgdXNlZCBhcyBjbGFzc05hbWUgZm9yIHRoZSBhc3NvY2lhdGVkIE5hdkl0ZW1cbiAgICovXG4gIHRhYkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSk7XG5cbnZhciBUYWIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7IC8vIFRoZXNlIHByb3BzIGFyZSBmb3IgdGhlIHBhcmVudCBgPFRhYnM+YCByYXRoZXIgdGhhbiB0aGUgYDxUYWJQYW5lPmAuXG5cblxuICAgIGRlbGV0ZSBwcm9wcy50aXRsZTtcbiAgICBkZWxldGUgcHJvcHMuZGlzYWJsZWQ7XG4gICAgZGVsZXRlIHByb3BzLnRhYkNsYXNzTmFtZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJQYW5lLCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFiLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblRhYi5Db250YWluZXIgPSBUYWJDb250YWluZXI7XG5UYWIuQ29udGVudCA9IFRhYkNvbnRlbnQ7XG5UYWIuUGFuZSA9IFRhYlBhbmU7XG5leHBvcnQgZGVmYXVsdCBUYWI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgc3RyaXBlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGJvcmRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29uZGVuc2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgaG92ZXI6IFByb3BUeXBlcy5ib29sLFxuICByZXNwb25zaXZlOiBQcm9wVHlwZXMuYm9vbFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJvcmRlcmVkOiBmYWxzZSxcbiAgY29uZGVuc2VkOiBmYWxzZSxcbiAgaG92ZXI6IGZhbHNlLFxuICByZXNwb25zaXZlOiBmYWxzZSxcbiAgc3RyaXBlZDogZmFsc2Vcbn07XG5cbnZhciBUYWJsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYmxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdHJpcGVkID0gX3RoaXMkcHJvcHMuc3RyaXBlZCxcbiAgICAgICAgYm9yZGVyZWQgPSBfdGhpcyRwcm9wcy5ib3JkZXJlZCxcbiAgICAgICAgY29uZGVuc2VkID0gX3RoaXMkcHJvcHMuY29uZGVuc2VkLFxuICAgICAgICBob3ZlciA9IF90aGlzJHByb3BzLmhvdmVyLFxuICAgICAgICByZXNwb25zaXZlID0gX3RoaXMkcHJvcHMucmVzcG9uc2l2ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJzdHJpcGVkXCIsIFwiYm9yZGVyZWRcIiwgXCJjb25kZW5zZWRcIiwgXCJob3ZlclwiLCBcInJlc3BvbnNpdmVcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ3N0cmlwZWQnKV0gPSBzdHJpcGVkLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdib3JkZXJlZCcpXSA9IGJvcmRlcmVkLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdjb25kZW5zZWQnKV0gPSBjb25kZW5zZWQsIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2hvdmVyJyldID0gaG92ZXIsIF9leHRlbmRzMikpO1xuXG4gICAgdmFyIHRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuXG4gICAgaWYgKHJlc3BvbnNpdmUpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ3Jlc3BvbnNpdmUnKVxuICAgICAgfSwgdGFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0YWJsZTtcbiAgfTtcblxuICByZXR1cm4gVGFibGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYmxlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblRhYmxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3RhYmxlJywgVGFibGUpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlcXVpcmVkRm9yQTExeSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeSc7XG5pbXBvcnQgeyB1bmNvbnRyb2xsYWJsZSB9IGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgTmF2IGZyb20gJy4vTmF2JztcbmltcG9ydCBOYXZJdGVtIGZyb20gJy4vTmF2SXRlbSc7XG5pbXBvcnQgVW5jb250cm9sbGVkVGFiQ29udGFpbmVyIGZyb20gJy4vVGFiQ29udGFpbmVyJztcbmltcG9ydCBUYWJDb250ZW50IGZyb20gJy4vVGFiQ29udGVudCc7XG5pbXBvcnQgeyBic0NsYXNzIGFzIHNldEJzQ2xhc3MgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG52YXIgVGFiQ29udGFpbmVyID0gVW5jb250cm9sbGVkVGFiQ29udGFpbmVyLkNvbnRyb2xsZWRDb21wb25lbnQ7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogTWFyayB0aGUgVGFiIHdpdGggYSBtYXRjaGluZyBgZXZlbnRLZXlgIGFzIGFjdGl2ZS5cbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBvblNlbGVjdFxuICAgKi9cbiAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBOYXZpZ2F0aW9uIHN0eWxlXG4gICAqL1xuICBic1N0eWxlOiBQcm9wVHlwZXMub25lT2YoWyd0YWJzJywgJ3BpbGxzJ10pLFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgZGVmYXVsdCBhbmltYXRpb24gc3RyYXRlZ3kuIFVzZSBgZmFsc2VgIHRvIGRpc2FibGUsIGB0cnVlYFxuICAgKiB0byBlbmFibGUgdGhlIGRlZmF1bHQgYDxGYWRlPmAgYW5pbWF0aW9uLCBvciBhIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcbiAgICogdjIgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudC5cbiAgICovXG4gIGFuaW1hdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIGVsZW1lbnRUeXBlXSksXG4gIGlkOiByZXF1aXJlZEZvckExMXkoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIFRhYiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogYGBganNcbiAgICogZnVuY3Rpb24gKFxuICAgKiAgIEFueSBldmVudEtleSxcbiAgICogICBTeW50aGV0aWNFdmVudCBldmVudD9cbiAgICogKVxuICAgKiBgYGBcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBhY3RpdmVLZXlcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogV2FpdCB1bnRpbCB0aGUgZmlyc3QgXCJlbnRlclwiIHRyYW5zaXRpb24gdG8gbW91bnQgdGFicyAoYWRkIHRoZW0gdG8gdGhlIERPTSlcbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFVubW91bnQgdGFicyAocmVtb3ZlIGl0IGZyb20gdGhlIERPTSkgd2hlbiBpdCBpcyBubyBsb25nZXIgdmlzaWJsZVxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBic1N0eWxlOiAndGFicycsXG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBY3RpdmVLZXkoY2hpbGRyZW4pIHtcbiAgdmFyIGRlZmF1bHRBY3RpdmVLZXk7XG4gIFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGRlZmF1bHRBY3RpdmVLZXkgPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdEFjdGl2ZUtleSA9IGNoaWxkLnByb3BzLmV2ZW50S2V5O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZWZhdWx0QWN0aXZlS2V5O1xufVxuXG52YXIgVGFicyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUYWJzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJzKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUYWJzLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyVGFiID0gZnVuY3Rpb24gcmVuZGVyVGFiKGNoaWxkKSB7XG4gICAgdmFyIF9jaGlsZCRwcm9wcyA9IGNoaWxkLnByb3BzLFxuICAgICAgICB0aXRsZSA9IF9jaGlsZCRwcm9wcy50aXRsZSxcbiAgICAgICAgZXZlbnRLZXkgPSBfY2hpbGQkcHJvcHMuZXZlbnRLZXksXG4gICAgICAgIGRpc2FibGVkID0gX2NoaWxkJHByb3BzLmRpc2FibGVkLFxuICAgICAgICB0YWJDbGFzc05hbWUgPSBfY2hpbGQkcHJvcHMudGFiQ2xhc3NOYW1lO1xuXG4gICAgaWYgKHRpdGxlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdkl0ZW0sIHtcbiAgICAgIGV2ZW50S2V5OiBldmVudEtleSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGNsYXNzTmFtZTogdGFiQ2xhc3NOYW1lXG4gICAgfSwgdGl0bGUpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBtb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIHVubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBic0NsYXNzID0gX3RoaXMkcHJvcHMuYnNDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfdGhpcyRwcm9wcyRhY3RpdmVLZXkgPSBfdGhpcyRwcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUtleSA9IF90aGlzJHByb3BzJGFjdGl2ZUtleSA9PT0gdm9pZCAwID8gZ2V0RGVmYXVsdEFjdGl2ZUtleShjaGlsZHJlbikgOiBfdGhpcyRwcm9wcyRhY3RpdmVLZXksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImlkXCIsIFwib25TZWxlY3RcIiwgXCJhbmltYXRpb25cIiwgXCJtb3VudE9uRW50ZXJcIiwgXCJ1bm1vdW50T25FeGl0XCIsIFwiYnNDbGFzc1wiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJhY3RpdmVLZXlcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiQ29udGFpbmVyLCB7XG4gICAgICBpZDogaWQsXG4gICAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByb2xlOiBcInRhYmxpc3RcIlxuICAgIH0pLCBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgdGhpcy5yZW5kZXJUYWIpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUYWJDb250ZW50LCB7XG4gICAgICBic0NsYXNzOiBic0NsYXNzLFxuICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgIHVubW91bnRPbkV4aXQ6IHVubW91bnRPbkV4aXRcbiAgICB9LCBjaGlsZHJlbikpKTtcbiAgfTtcblxuICByZXR1cm4gVGFicztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFicy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5UYWJzLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnNldEJzQ2xhc3MoJ3RhYicsIFRhYnMpO1xuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoVGFicywge1xuICBhY3RpdmVLZXk6ICdvblNlbGVjdCdcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvYWx0LXRleHQgKi9cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIHNyYyBwcm9wZXJ0eSB0aGF0IGlzIHBhc3NlZCBkb3duIHRvIHRoZSBpbWFnZSBpbnNpZGUgdGhpcyBjb21wb25lbnRcbiAgICovXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogYWx0IHByb3BlcnR5IHRoYXQgaXMgcGFzc2VkIGRvd24gdG8gdGhlIGltYWdlIGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBocmVmIHByb3BlcnR5IHRoYXQgaXMgcGFzc2VkIGRvd24gdG8gdGhlIGltYWdlIGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogb25FcnJvciBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBkb3duIHRvIHRoZSBpbWFnZSBpbnNpZGUgdGhpcyBjb21wb25lbnRcbiAgICovXG4gIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBvbkxvYWQgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgZG93biB0byB0aGUgaW1hZ2UgaW5zaWRlIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBvbkxvYWQ6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgVGh1bWJuYWlsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRodW1ibmFpbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGh1bWJuYWlsKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUaHVtYm5haWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3JjID0gX3RoaXMkcHJvcHMuc3JjLFxuICAgICAgICBhbHQgPSBfdGhpcyRwcm9wcy5hbHQsXG4gICAgICAgIG9uRXJyb3IgPSBfdGhpcyRwcm9wcy5vbkVycm9yLFxuICAgICAgICBvbkxvYWQgPSBfdGhpcyRwcm9wcy5vbkxvYWQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wic3JjXCIsIFwiYWx0XCIsIFwib25FcnJvclwiLCBcIm9uTG9hZFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgQ29tcG9uZW50ID0gZWxlbWVudFByb3BzLmhyZWYgPyBTYWZlQW5jaG9yIDogJ2Rpdic7XG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwge1xuICAgICAgc3JjOiBzcmMsXG4gICAgICBhbHQ6IGFsdCxcbiAgICAgIG9uRXJyb3I6IG9uRXJyb3IsXG4gICAgICBvbkxvYWQ6IG9uTG9hZFxuICAgIH0pLCBjaGlsZHJlbiAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJjYXB0aW9uXCJcbiAgICB9LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUaHVtYm5haWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRodW1ibmFpbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCd0aHVtYm5haWwnLCBUaHVtYm5haWwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGA8aW5wdXQ+YCBgdHlwZWBcbiAgICogQHR5cGUge1t0eXBlXX1cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2NoZWNrYm94JywgJ3JhZGlvJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgSFRNTCBpbnB1dCBuYW1lLCB1c2VkIHRvIGdyb3VwIGxpa2UgY2hlY2tib3hlcyBvciByYWRpbyBidXR0b25zIHRvZ2V0aGVyXG4gICAqIHNlbWFudGljYWxseVxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNoZWNrZWQgc3RhdGUgb2YgdGhlIGlucHV0LCBtYW5hZ2VkIGJ5IGA8VG9nZ2xlQnV0dG9uR3JvdXA+YGAgYXV0b21hdGljYWxseVxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkaXNhYmxlZCBzdGF0ZSBvZiBib3RoIHRoZSBsYWJlbCBhbmQgaW5wdXRcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogW29uQ2hhbmdlIGRlc2NyaXB0aW9uXVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGlucHV0LCBhbmQgdW5pcXVlIGlkZW50aWZpZXIgaW4gdGhlIFRvZ2dsZUJ1dHRvbkdyb3VwXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG59O1xuXG52YXIgVG9nZ2xlQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRvZ2dsZUJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlQnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUb2dnbGVCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWUsXG4gICAgICAgIGNoZWNrZWQgPSBfdGhpcyRwcm9wcy5jaGVja2VkLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJuYW1lXCIsIFwiY2hlY2tlZFwiLCBcInR5cGVcIiwgXCJvbkNoYW5nZVwiLCBcInZhbHVlXCJdKTtcblxuICAgIHZhciBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBhY3RpdmU6ICEhY2hlY2tlZCxcbiAgICAgIGNvbXBvbmVudENsYXNzOiBcImxhYmVsXCJcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgYXV0b0NvbXBsZXRlOiBcIm9mZlwiLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgY2hlY2tlZDogISFjaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6ICEhZGlzYWJsZWQsXG4gICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUb2dnbGVCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRvZ2dsZUJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBUb2dnbGVCdXR0b247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyB1bmNvbnRyb2xsYWJsZSB9IGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCBjaGFpbkZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBWYWxpZENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5pbXBvcnQgQnV0dG9uR3JvdXAgZnJvbSAnLi9CdXR0b25Hcm91cCc7XG5pbXBvcnQgVG9nZ2xlQnV0dG9uIGZyb20gJy4vVG9nZ2xlQnV0dG9uJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbiBIVE1MIGA8aW5wdXQ+YCBuYW1lIGZvciBlYWNoIGNoaWxkIGJ1dHRvbi5cbiAgICpcbiAgICogX19SZXF1aXJlZCBpZiBgdHlwZWAgaXMgc2V0IHRvIGAncmFkaW8nYF9fXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUsIG9yIGFycmF5IG9mIHZhbHVlcywgb2YgdGhlIGFjdGl2ZSAocHJlc3NlZCkgYnV0dG9uc1xuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uQ2hhbmdlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIGJ1dHRvbiBpcyBwcmVzc2VkLCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgYHR5cGVgXG4gICAqIGlzIGAncmFkaW8nYCBvciBgJ2NoZWNrYm94J2AsIGBvbkNoYW5nZWAgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdmFsdWUgb3JcbiAgICogYXJyYXkgb2YgYWN0aXZlIHZhbHVlc1xuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIHZhbHVlc1xuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgYHR5cGVgIG9mIHRoZSByZW5kZXJlZCBidXR0b25zLCBkZXRlcm1pbmVzIHRoZSB0b2dnbGUgYmVoYXZpb3JcbiAgICogb2YgdGhlIGJ1dHRvbnNcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2NoZWNrYm94JywgJ3JhZGlvJ10pLmlzUmVxdWlyZWRcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiAncmFkaW8nXG59O1xuXG52YXIgVG9nZ2xlQnV0dG9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVG9nZ2xlQnV0dG9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvZ2dsZUJ1dHRvbkdyb3VwKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUb2dnbGVCdXR0b25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFZhbHVlcyA9IGZ1bmN0aW9uIGdldFZhbHVlcygpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gW10gOiBbXS5jb25jYXQodmFsdWUpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiBoYW5kbGVUb2dnbGUodmFsdWUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZTtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoKTtcbiAgICB2YXIgaXNBY3RpdmUgPSB2YWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuXG4gICAgaWYgKHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgb25DaGFuZ2UodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICBvbkNoYW5nZSh2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuICE9PSB2YWx1ZTtcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25DaGFuZ2UodmFsdWVzLmNvbmNhdChbdmFsdWVdKSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMi50eXBlLFxuICAgICAgICBuYW1lID0gX3RoaXMkcHJvcHMyLm5hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJjaGlsZHJlblwiLCBcInR5cGVcIiwgXCJuYW1lXCJdKTtcblxuICAgIHZhciB2YWx1ZXMgPSB0aGlzLmdldFZhbHVlcygpO1xuICAgICEodHlwZSAhPT0gJ3JhZGlvJyB8fCAhIW5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBgbmFtZWAgaXMgcmVxdWlyZWQgdG8gZ3JvdXAgdGhlIHRvZ2dsZSBidXR0b25zIHdoZW4gdGhlIGB0eXBlYCAnICsgJ2lzIHNldCB0byBcInJhZGlvXCInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZGVsZXRlIHByb3BzLm9uQ2hhbmdlO1xuICAgIGRlbGV0ZSBwcm9wcy52YWx1ZTsgLy8gdGhlIGRhdGEgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGIvYyB0d2JzIGNzcyB1c2VzIGl0IGluIHRoZSBzZWxlY3RvclxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uR3JvdXAsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcImJ1dHRvbnNcIlxuICAgIH0pLCBWYWxpZENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMsXG4gICAgICAgICAgdmFsdWUgPSBfY2hpbGQkcHJvcHMudmFsdWUsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfY2hpbGQkcHJvcHMub25DaGFuZ2U7XG5cbiAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVRvZ2dsZSh2YWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIG5hbWU6IGNoaWxkLm5hbWUgfHwgbmFtZSxcbiAgICAgICAgY2hlY2tlZDogdmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMSxcbiAgICAgICAgb25DaGFuZ2U6IGNoYWluRnVuY3Rpb24ob25DaGFuZ2UsIGhhbmRsZXIpXG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFRvZ2dsZUJ1dHRvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ub2dnbGVCdXR0b25Hcm91cC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ub2dnbGVCdXR0b25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgVW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAgPSB1bmNvbnRyb2xsYWJsZShUb2dnbGVCdXR0b25Hcm91cCwge1xuICB2YWx1ZTogJ29uQ2hhbmdlJ1xufSk7XG5VbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cC5CdXR0b24gPSBUb2dnbGVCdXR0b247XG5leHBvcnQgZGVmYXVsdCBVbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFuIGh0bWwgaWQgYXR0cmlidXRlLCBuZWNlc3NhcnkgZm9yIGFjY2Vzc2liaWxpdHlcbiAgICogQHR5cGUge3N0cmluZ3xudW1iZXJ9XG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgaWQ6IGlzUmVxdWlyZWRGb3JBMTF5KFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSksXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRpcmVjdGlvbiB0aGUgVG9vbHRpcCBpcyBwb3NpdGlvbmVkIHRvd2FyZHMuXG4gICAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddKSxcblxuICAvKipcbiAgICogVGhlIFwidG9wXCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBUb29sdGlwLlxuICAgKi9cbiAgcG9zaXRpb25Ub3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwibGVmdFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgVG9vbHRpcC5cbiAgICovXG4gIHBvc2l0aW9uTGVmdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgXCJ0b3BcIiBwb3NpdGlvbiB2YWx1ZSBmb3IgdGhlIFRvb2x0aXAgYXJyb3cuXG4gICAqL1xuICBhcnJvd09mZnNldFRvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgXCJsZWZ0XCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBUb29sdGlwIGFycm93LlxuICAgKi9cbiAgYXJyb3dPZmZzZXRMZWZ0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbnZhciBUb29sdGlwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRvb2x0aXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvb2x0aXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRvb2x0aXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHBsYWNlbWVudCA9IF90aGlzJHByb3BzLnBsYWNlbWVudCxcbiAgICAgICAgcG9zaXRpb25Ub3AgPSBfdGhpcyRwcm9wcy5wb3NpdGlvblRvcCxcbiAgICAgICAgcG9zaXRpb25MZWZ0ID0gX3RoaXMkcHJvcHMucG9zaXRpb25MZWZ0LFxuICAgICAgICBhcnJvd09mZnNldFRvcCA9IF90aGlzJHByb3BzLmFycm93T2Zmc2V0VG9wLFxuICAgICAgICBhcnJvd09mZnNldExlZnQgPSBfdGhpcyRwcm9wcy5hcnJvd09mZnNldExlZnQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wicGxhY2VtZW50XCIsIFwicG9zaXRpb25Ub3BcIiwgXCJwb3NpdGlvbkxlZnRcIiwgXCJhcnJvd09mZnNldFRvcFwiLCBcImFycm93T2Zmc2V0TGVmdFwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwbGFjZW1lbnRdID0gdHJ1ZSwgX2V4dGVuZHMyKSk7XG5cbiAgICB2YXIgb3V0ZXJTdHlsZSA9IF9leHRlbmRzKHtcbiAgICAgIHRvcDogcG9zaXRpb25Ub3AsXG4gICAgICBsZWZ0OiBwb3NpdGlvbkxlZnRcbiAgICB9LCBzdHlsZSk7XG5cbiAgICB2YXIgYXJyb3dTdHlsZSA9IHtcbiAgICAgIHRvcDogYXJyb3dPZmZzZXRUb3AsXG4gICAgICBsZWZ0OiBhcnJvd09mZnNldExlZnRcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICBzdHlsZTogb3V0ZXJTdHlsZVxuICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICdhcnJvdycpLFxuICAgICAgc3R5bGU6IGFycm93U3R5bGVcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IHByZWZpeChic1Byb3BzLCAnaW5uZXInKVxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRvb2x0aXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRvb2x0aXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuVG9vbHRpcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCd0b29sdGlwJywgVG9vbHRpcCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYnNDbGFzcywgYnNTaXplcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xuXG52YXIgV2VsbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShXZWxsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBXZWxsKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBXZWxsLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBXZWxsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCd3ZWxsJywgYnNTaXplcyhbU2l6ZS5MQVJHRSwgU2l6ZS5TTUFMTF0sIFdlbGwpKTsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbmV4cG9ydHMuRVhJVElORyA9IEVYSVRJTkc7XG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0LnRyYW5zaXRpb25Hcm91cDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IG51bGwgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcblxuICAgIH07XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwID8gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCwgYCd1bm1vdW50ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZSA6IHt9OztcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNsYXNzTmFtZXNTaGFwZSA9IGV4cG9ydHMudGltZW91dHNTaGFwZSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHRpbWVvdXRzU2hhcGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGFwcGVhcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSkuaXNSZXF1aXJlZF0pIDogbnVsbDtcbmV4cG9ydHMudGltZW91dHNTaGFwZSA9IHRpbWVvdXRzU2hhcGU7XG52YXIgY2xhc3NOYW1lc1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSkgOiBudWxsO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBjbGFzc05hbWVzU2hhcGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gcmVxdWlyZSgnLi91dGlscy9nZXRDb250YWluZXInKTtcblxudmFyIF9nZXRDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBgPFBvcnRhbC8+YCBjb21wb25lbnQgcmVuZGVycyBpdHMgY2hpbGRyZW4gaW50byBhIG5ldyBcInN1YnRyZWVcIiBvdXRzaWRlIG9mIGN1cnJlbnQgY29tcG9uZW50IGhpZXJhcmNoeS5cbiAqIFlvdSBjYW4gdGhpbmsgb2YgaXQgYXMgYSBkZWNsYXJhdGl2ZSBgYXBwZW5kQ2hpbGQoKWAsIG9yIGpRdWVyeSdzIGAkLmZuLmFwcGVuZFRvKClgLlxuICogVGhlIGNoaWxkcmVuIG9mIGA8UG9ydGFsLz5gIGNvbXBvbmVudCB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSBgY29udGFpbmVyYCBzcGVjaWZpZWQuXG4gKi9cbnZhciBQb3J0YWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLl9tb3VudE92ZXJsYXlUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLl9vdmVybGF5VGFyZ2V0KSB7XG4gICAgICAgIF90aGlzLl9vdmVybGF5VGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKF90aGlzLnByb3BzLmNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpcykuYm9keSk7XG4gICAgICAgIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlLmFwcGVuZENoaWxkKF90aGlzLl9vdmVybGF5VGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5fdW5tb3VudE92ZXJsYXlUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuX292ZXJsYXlUYXJnZXQpIHtcbiAgICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUucmVtb3ZlQ2hpbGQoX3RoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgICBfdGhpcy5fb3ZlcmxheVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgICBfdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSA9IG51bGw7XG4gICAgfSwgX3RoaXMuX3JlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3ZlcmxheSA9ICFfdGhpcy5wcm9wcy5jaGlsZHJlbiA/IG51bGwgOiBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlIGZvciBmdXR1cmUgYWNjZXNzLlxuICAgICAgaWYgKG92ZXJsYXkgIT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuX21vdW50T3ZlcmxheVRhcmdldCgpO1xuXG4gICAgICAgIHZhciBpbml0aWFsUmVuZGVyID0gIV90aGlzLl9vdmVybGF5SW5zdGFuY2U7XG5cbiAgICAgICAgX3RoaXMuX292ZXJsYXlJbnN0YW5jZSA9IF9yZWFjdERvbTIuZGVmYXVsdC51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihfdGhpcywgb3ZlcmxheSwgX3RoaXMuX292ZXJsYXlUYXJnZXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaW5pdGlhbFJlbmRlciAmJiBfdGhpcy5wcm9wcy5vblJlbmRlcmVkKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vblJlbmRlcmVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVucmVuZGVyIGlmIHRoZSBjb21wb25lbnQgaXMgbnVsbCBmb3IgdHJhbnNpdGlvbnMgdG8gbnVsbFxuICAgICAgICBfdGhpcy5fdW5yZW5kZXJPdmVybGF5KCk7XG4gICAgICAgIF90aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLl91bnJlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuX292ZXJsYXlUYXJnZXQpIHtcbiAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGUoX3RoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgICBfdGhpcy5fb3ZlcmxheUluc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5nZXRNb3VudE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX292ZXJsYXlUYXJnZXQ7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9yZW5kZXJPdmVybGF5KCk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fcmVuZGVyT3ZlcmxheSgpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5fb3ZlcmxheVRhcmdldCAmJiBuZXh0UHJvcHMuY29udGFpbmVyICE9PSB0aGlzLnByb3BzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9vdmVybGF5VGFyZ2V0KTtcbiAgICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkobmV4dFByb3BzLmNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKS5ib2R5KTtcbiAgICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQodGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl91bnJlbmRlck92ZXJsYXkoKTtcbiAgICB0aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCgpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQb3J0YWw7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwuZGlzcGxheU5hbWUgPSAnUG9ydGFsJztcblBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgUG9ydGFsIGNoaWxkcmVuXG4gICAqIGFwcGVuZGVkIHRvIGl0LlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgb25SZW5kZXJlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gUG9ydGFsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2FjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdkb20taGVscGVycy9hY3RpdmVFbGVtZW50Jyk7XG5cbnZhciBfYWN0aXZlRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3RpdmVFbGVtZW50KTtcblxudmFyIF9jb250YWlucyA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zJyk7XG5cbnZhciBfY29udGFpbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGFpbnMpO1xuXG52YXIgX2luRE9NID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvdXRpbC9pbkRPTScpO1xuXG52YXIgX2luRE9NMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luRE9NKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50Jyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudE9yRWxlbWVudCk7XG5cbnZhciBfZGVwcmVjYXRlZCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2RlcHJlY2F0ZWQnKTtcblxudmFyIF9kZXByZWNhdGVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZWQpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnKTtcblxudmFyIF9lbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbGVtZW50VHlwZSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfTW9kYWxNYW5hZ2VyID0gcmVxdWlyZSgnLi9Nb2RhbE1hbmFnZXInKTtcblxudmFyIF9Nb2RhbE1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9kYWxNYW5hZ2VyKTtcblxudmFyIF9Qb3J0YWwgPSByZXF1aXJlKCcuL1BvcnRhbCcpO1xuXG52YXIgX1BvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3J0YWwpO1xuXG52YXIgX1JlZkhvbGRlciA9IHJlcXVpcmUoJy4vUmVmSG9sZGVyJyk7XG5cbnZhciBfUmVmSG9sZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZkhvbGRlcik7XG5cbnZhciBfYWRkRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJy4vdXRpbHMvYWRkRXZlbnRMaXN0ZW5lcicpO1xuXG52YXIgX2FkZEV2ZW50TGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkRXZlbnRMaXN0ZW5lcik7XG5cbnZhciBfYWRkRm9jdXNMaXN0ZW5lciA9IHJlcXVpcmUoJy4vdXRpbHMvYWRkRm9jdXNMaXN0ZW5lcicpO1xuXG52YXIgX2FkZEZvY3VzTGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkRm9jdXNMaXN0ZW5lcik7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gcmVxdWlyZSgnLi91dGlscy9nZXRDb250YWluZXInKTtcblxudmFyIF9nZXRDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5cbnZhciBtb2RhbE1hbmFnZXIgPSBuZXcgX01vZGFsTWFuYWdlcjIuZGVmYXVsdCgpO1xuXG4vKipcbiAqIExvdmUgdGhlbSBvciBoYXRlIHRoZW0sIGA8TW9kYWwvPmAgcHJvdmlkZXMgYSBzb2xpZCBmb3VuZGF0aW9uIGZvciBjcmVhdGluZyBkaWFsb2dzLCBsaWdodGJveGVzLCBvciB3aGF0ZXZlciBlbHNlLlxuICogVGhlIE1vZGFsIGNvbXBvbmVudCByZW5kZXJzIGl0cyBgY2hpbGRyZW5gIG5vZGUgaW4gZnJvbnQgb2YgYSBiYWNrZHJvcCBjb21wb25lbnQuXG4gKlxuICogVGhlIE1vZGFsIG9mZmVycyBhIGZldyBoZWxwZnVsIGZlYXR1cmVzIG92ZXIgdXNpbmcganVzdCBhIGA8UG9ydGFsLz5gIGNvbXBvbmVudCBhbmQgc29tZSBzdHlsZXM6XG4gKlxuICogLSBNYW5hZ2VzIGRpYWxvZyBzdGFja2luZyB3aGVuIG9uZS1hdC1hLXRpbWUganVzdCBpc24ndCBlbm91Z2guXG4gKiAtIENyZWF0ZXMgYSBiYWNrZHJvcCwgZm9yIGRpc2FibGluZyBpbnRlcmFjdGlvbiBiZWxvdyB0aGUgbW9kYWwuXG4gKiAtIEl0IHByb3Blcmx5IG1hbmFnZXMgZm9jdXM7IG1vdmluZyB0byB0aGUgbW9kYWwgY29udGVudCwgYW5kIGtlZXBpbmcgaXQgdGhlcmUgdW50aWwgdGhlIG1vZGFsIGlzIGNsb3NlZC5cbiAqIC0gSXQgZGlzYWJsZXMgc2Nyb2xsaW5nIG9mIHRoZSBwYWdlIGNvbnRlbnQgd2hpbGUgb3Blbi5cbiAqIC0gQWRkcyB0aGUgYXBwcm9wcmlhdGUgQVJJQSByb2xlcyBhcmUgYXV0b21hdGljYWxseS5cbiAqIC0gRWFzaWx5IHBsdWdnYWJsZSBhbmltYXRpb25zIHZpYSBhIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQuXG4gKlxuICogTm90ZSB0aGF0LCBpbiB0aGUgc2FtZSB3YXkgdGhlIGJhY2tkcm9wIGVsZW1lbnQgcHJldmVudHMgdXNlcnMgZnJvbSBjbGlja2luZyBvciBpbnRlcmFjdGluZ1xuICogd2l0aCB0aGUgcGFnZSBjb250ZW50IHVuZGVybmVhdGggdGhlIE1vZGFsLCBTY3JlZW4gcmVhZGVycyBhbHNvIG5lZWQgdG8gYmUgc2lnbmFsZWQgdG8gbm90IHRvXG4gKiBpbnRlcmFjdCB3aXRoIHBhZ2UgY29udGVudCB3aGlsZSB0aGUgTW9kYWwgaXMgb3Blbi4gVG8gZG8gdGhpcywgd2UgdXNlIGEgY29tbW9uIHRlY2huaXF1ZSBvZiBhcHBseWluZ1xuICogdGhlIGBhcmlhLWhpZGRlbj0ndHJ1ZSdgIGF0dHJpYnV0ZSB0byB0aGUgbm9uLU1vZGFsIGVsZW1lbnRzIGluIHRoZSBNb2RhbCBgY29udGFpbmVyYC4gVGhpcyBtZWFucyB0aGF0IGZvclxuICogYSBNb2RhbCB0byBiZSB0cnVseSBtb2RhbCwgaXQgc2hvdWxkIGhhdmUgYSBgY29udGFpbmVyYCB0aGF0IGlzIF9vdXRzaWRlXyB5b3VyIGFwcCdzXG4gKiBSZWFjdCBoaWVyYXJjaHkgKHN1Y2ggYXMgdGhlIGRlZmF1bHQ6IGRvY3VtZW50LmJvZHkpLlxuICovXG5cbnZhciBNb2RhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWwoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUub21pdFByb3BzID0gZnVuY3Rpb24gb21pdFByb3BzKHByb3BzLCBwcm9wVHlwZXMpIHtcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuICAgIGtleXMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wVHlwZXMsIHByb3ApKSB7XG4gICAgICAgIG5ld1Byb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3UHJvcHM7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvdyA9IF9wcm9wcy5zaG93LFxuICAgICAgICBjb250YWluZXIgPSBfcHJvcHMuY29udGFpbmVyLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgVHJhbnNpdGlvbiA9IF9wcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBiYWNrZHJvcCA9IF9wcm9wcy5iYWNrZHJvcCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIG9uRXhpdCA9IF9wcm9wcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IF9wcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIG9uRW50ZXIgPSBfcHJvcHMub25FbnRlcixcbiAgICAgICAgb25FbnRlcmluZyA9IF9wcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQgPSBfcHJvcHMub25FbnRlcmVkO1xuXG5cbiAgICB2YXIgZGlhbG9nID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHZhciBmaWx0ZXJlZFByb3BzID0gdGhpcy5vbWl0UHJvcHModGhpcy5wcm9wcywgTW9kYWwucHJvcFR5cGVzKTtcblxuICAgIHZhciBtb3VudE1vZGFsID0gc2hvdyB8fCBUcmFuc2l0aW9uICYmICF0aGlzLnN0YXRlLmV4aXRlZDtcbiAgICBpZiAoIW1vdW50TW9kYWwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfZGlhbG9nJHByb3BzID0gZGlhbG9nLnByb3BzLFxuICAgICAgICByb2xlID0gX2RpYWxvZyRwcm9wcy5yb2xlLFxuICAgICAgICB0YWJJbmRleCA9IF9kaWFsb2ckcHJvcHMudGFiSW5kZXg7XG5cblxuICAgIGlmIChyb2xlID09PSB1bmRlZmluZWQgfHwgdGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlhbG9nID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGRpYWxvZywge1xuICAgICAgICByb2xlOiByb2xlID09PSB1bmRlZmluZWQgPyAnZG9jdW1lbnQnIDogcm9sZSxcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4ID09IG51bGwgPyAnLTEnIDogdGFiSW5kZXhcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICBkaWFsb2cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVHJhbnNpdGlvbixcbiAgICAgICAge1xuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICB1bm1vdW50T25FeGl0OiB0cnVlLFxuICAgICAgICAgICdpbic6IHNob3csXG4gICAgICAgICAgb25FeGl0OiBvbkV4aXQsXG4gICAgICAgICAgb25FeGl0aW5nOiBvbkV4aXRpbmcsXG4gICAgICAgICAgb25FeGl0ZWQ6IHRoaXMuaGFuZGxlSGlkZGVuLFxuICAgICAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgICAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZFxuICAgICAgICB9LFxuICAgICAgICBkaWFsb2dcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX1BvcnRhbDIuZGVmYXVsdCxcbiAgICAgIHtcbiAgICAgICAgcmVmOiB0aGlzLnNldE1vdW50Tm9kZSxcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIG9uUmVuZGVyZWQ6IHRoaXMub25Qb3J0YWxSZW5kZXJlZFxuICAgICAgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgIHJlZjogdGhpcy5zZXRNb2RhbE5vZGVSZWYsXG4gICAgICAgICAgcm9sZTogcm9sZSB8fCAnZGlhbG9nJ1xuICAgICAgICB9LCBmaWx0ZXJlZFByb3BzLCB7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0pLFxuICAgICAgICBiYWNrZHJvcCAmJiB0aGlzLnJlbmRlckJhY2tkcm9wKCksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9SZWZIb2xkZXIyLmRlZmF1bHQsXG4gICAgICAgICAgeyByZWY6IHRoaXMuc2V0RGlhbG9nUmVmIH0sXG4gICAgICAgICAgZGlhbG9nXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRlZDogZmFsc2UgfSk7XG4gICAgfSBlbHNlIGlmICghbmV4dFByb3BzLnRyYW5zaXRpb24pIHtcbiAgICAgIC8vIE90aGVyd2lzZSBsZXQgaGFuZGxlSGlkZGVuIHRha2UgY2FyZSBvZiBtYXJraW5nIGV4aXRlZC5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IHRydWUgfSk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgIGlmICghdGhpcy5wcm9wcy5zaG93ICYmIG5leHRQcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLmNoZWNrRm9yRm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciB0cmFuc2l0aW9uID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uO1xuXG5cbiAgICBpZiAocHJldlByb3BzLnNob3cgJiYgIXRoaXMucHJvcHMuc2hvdyAmJiAhdHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGhhbmRsZUhpZGRlbiB3aWxsIGNhbGwgdGhpcy5cbiAgICAgIHRoaXMub25IaWRlKCk7XG4gICAgfSBlbHNlIGlmICghcHJldlByb3BzLnNob3cgJiYgdGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNob3cgPSBfcHJvcHMyLnNob3csXG4gICAgICAgIHRyYW5zaXRpb24gPSBfcHJvcHMyLnRyYW5zaXRpb247XG5cblxuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHNob3cgfHwgdHJhbnNpdGlvbiAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQpIHtcbiAgICAgIHRoaXMub25IaWRlKCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5hdXRvRm9jdXMgPSBmdW5jdGlvbiBhdXRvRm9jdXMoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaWFsb2dFbGVtZW50ID0gdGhpcy5nZXREaWFsb2dFbGVtZW50KCk7XG4gICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gKDAsIF9hY3RpdmVFbGVtZW50Mi5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpKTtcblxuICAgIGlmIChkaWFsb2dFbGVtZW50ICYmICEoMCwgX2NvbnRhaW5zMi5kZWZhdWx0KShkaWFsb2dFbGVtZW50LCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzID0gY3VycmVudEFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgIGlmICghZGlhbG9nRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1RoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLiBGb3IgdGhlIGJlbmVmaXQgb2YgJyArICdhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCB0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0ICcgKyAndG8gXCItMVwiLicpO1xuXG4gICAgICAgIGRpYWxvZ0VsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgZGlhbG9nRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUucmVzdG9yZUxhc3RGb2N1cyA9IGZ1bmN0aW9uIHJlc3RvcmVMYXN0Rm9jdXMoKSB7XG4gICAgLy8gU3VwcG9ydDogPD1JRTExIGRvZXNuJ3Qgc3VwcG9ydCBgZm9jdXMoKWAgb24gc3ZnIGVsZW1lbnRzIChSQjogIzkxNylcbiAgICBpZiAodGhpcy5sYXN0Rm9jdXMgJiYgdGhpcy5sYXN0Rm9jdXMuZm9jdXMpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzLmZvY3VzKCk7XG4gICAgICB0aGlzLmxhc3RGb2N1cyA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5nZXREaWFsb2dFbGVtZW50ID0gZnVuY3Rpb24gZ2V0RGlhbG9nRWxlbWVudCgpIHtcbiAgICByZXR1cm4gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMuZGlhbG9nKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuaXNUb3BNb2RhbCA9IGZ1bmN0aW9uIGlzVG9wTW9kYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMubWFuYWdlci5pc1RvcE1vZGFsKHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBfUG9ydGFsMi5kZWZhdWx0LnByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE1vZGFsXG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgTW9kYWwgaXMgYXBwZW5kZWQgdG8gaXQncyBjb250YWluZXIgZWxlbWVudC5cbiAgICpcbiAgICogRm9yIHRoZSBzYWtlIG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIHRoZSBjb250YWluZXIgc2hvdWxkIHVzdWFsbHkgYmUgdGhlIGRvY3VtZW50IGJvZHksIHNvIHRoYXQgdGhlIHJlc3Qgb2YgdGhlXG4gICAqIHBhZ2UgY29udGVudCBjYW4gYmUgcGxhY2VkIGJlaGluZCBhIHZpcnR1YWwgYmFja2Ryb3AgYXMgd2VsbCBhcyBhIHZpc3VhbCBvbmUuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNb2RhbCBpcyBvcGVuaW5nLlxuICAgKi9cbiAgb25TaG93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBlaXRoZXIgdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQsIG9yIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQuXG4gICAqXG4gICAqIFRoZSBgb25IaWRlYCBjYWxsYmFjayBvbmx5IHNpZ25hbHMgaW50ZW50IGZyb20gdGhlIE1vZGFsLFxuICAgKiB5b3UgbXVzdCBhY3R1YWxseSBzZXQgdGhlIGBzaG93YCBwcm9wIHRvIGBmYWxzZWAgZm9yIHRoZSBNb2RhbCB0byBjbG9zZS5cbiAgICovXG4gIG9uSGlkZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgYmFja2Ryb3AgY29tcG9uZW50LlxuICAgKi9cbiAgYmFja2Ryb3A6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydzdGF0aWMnXSldKSxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBiYWNrZHJvcCBjb21wb25lbnQuIFVzZWZ1bCBmb3IgY3VzdG9tXG4gICAqIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICpcbiAgICogYGBganNcbiAgICogIHJlbmRlckJhY2tkcm9wPXtwcm9wcyA9PiA8TXlCYWNrZHJvcCB7Li4ucHJvcHN9IC8+fVxuICAgKiBgYGBcbiAgICovXG4gIHJlbmRlckJhY2tkcm9wOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSwgaWYgc3BlY2lmaWVkIGluIGBrZXlib2FyZGAsIGlzIHByZXNzZWQuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogU3VwcG9ydCBmb3IgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYG9uRXNjYXBlS2V5RG93bmAgaW5zdGVhZFxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGVzY2FwZSBrZXksIGlmIHNwZWNpZmllZCBpbiBga2V5Ym9hcmRgLCBpcyBwcmVzc2VkLlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgb25Fc2NhcGVLZXlVcDogKDAsIF9kZXByZWNhdGVkMi5kZWZhdWx0KShfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsICdQbGVhc2UgdXNlIG9uRXNjYXBlS2V5RG93biBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeScpLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJhY2tkcm9wLCBpZiBzcGVjaWZpZWQsIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBzdHlsZSBvYmplY3QgZm9yIHRoZSBiYWNrZHJvcCBjb21wb25lbnQuXG4gICAqL1xuICBiYWNrZHJvcFN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQSBjc3MgY2xhc3Mgb3IgY2xhc3NlcyBmb3IgdGhlIGJhY2tkcm9wIGNvbXBvbmVudC5cbiAgICovXG4gIGJhY2tkcm9wQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQSBjc3MgY2xhc3Mgb3Igc2V0IG9mIGNsYXNzZXMgYXBwbGllZCB0byB0aGUgbW9kYWwgY29udGFpbmVyIHdoZW4gdGhlIG1vZGFsIGlzIG9wZW4sXG4gICAqIGFuZCByZW1vdmVkIHdoZW4gaXQgaXMgY2xvc2VkLlxuICAgKi9cbiAgY29udGFpbmVyQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQ2xvc2UgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBrZXlib2FyZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50IHVzZWRcbiAgICogdG8gY29udHJvbCBhbmltYXRpb25zIGZvciB0aGUgZGlhbG9nIGNvbXBvbmVudC5cbiAgICovXG4gIHRyYW5zaXRpb246IF9lbGVtZW50VHlwZTIuZGVmYXVsdCxcblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudCB1c2VkXG4gICAqIHRvIGNvbnRyb2wgYW5pbWF0aW9ucyBmb3IgdGhlIGJhY2tkcm9wIGNvbXBvbmVudHMuXG4gICAqL1xuICBiYWNrZHJvcFRyYW5zaXRpb246IF9lbGVtZW50VHlwZTIuZGVmYXVsdCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLiBUaGlzIGFsc29cbiAgICogd29ya3MgY29ycmVjdGx5IHdpdGggYW55IE1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgZmFsc2VgIGFzIGl0IG1ha2VzIHRoZSBNb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgTW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgZmFsc2VgIGFzIGl0IG1ha2VzIHRoZSBNb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGVuZm9yY2VGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuXG4gICAqL1xuICByZXN0b3JlRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNb2RhbCB0cmFuc2l0aW9ucyBpblxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCByaWdodCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIG91dFxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBNb2RhbCBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgTW9kYWxNYW5hZ2VyIGluc3RhbmNlIHVzZWQgdG8gdHJhY2sgYW5kIG1hbmFnZSB0aGUgc3RhdGUgb2Ygb3BlblxuICAgKiBNb2RhbHMuIFVzZWZ1bCB3aGVuIGN1c3RvbWl6aW5nIGhvdyBtb2RhbHMgaW50ZXJhY3Qgd2l0aGluIGEgY29udGFpbmVyXG4gICAqL1xuICBtYW5hZ2VyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59KTtcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2hvdzogZmFsc2UsXG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgYXV0b0ZvY3VzOiB0cnVlLFxuICBlbmZvcmNlRm9jdXM6IHRydWUsXG4gIHJlc3RvcmVGb2N1czogdHJ1ZSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgbWFuYWdlcjogbW9kYWxNYW5hZ2VyLFxuICByZW5kZXJCYWNrZHJvcDogZnVuY3Rpb24gcmVuZGVyQmFja2Ryb3AocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHByb3BzKTtcbiAgfVxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB0aGlzLnN0YXRlID0geyBleGl0ZWQ6ICF0aGlzLnByb3BzLnNob3cgfTtcblxuICB0aGlzLnJlbmRlckJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHMzID0gX3RoaXMyLnByb3BzLFxuICAgICAgICBiYWNrZHJvcFN0eWxlID0gX3Byb3BzMy5iYWNrZHJvcFN0eWxlLFxuICAgICAgICBiYWNrZHJvcENsYXNzTmFtZSA9IF9wcm9wczMuYmFja2Ryb3BDbGFzc05hbWUsXG4gICAgICAgIHJlbmRlckJhY2tkcm9wID0gX3Byb3BzMy5yZW5kZXJCYWNrZHJvcCxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF9wcm9wczMuYmFja2Ryb3BUcmFuc2l0aW9uO1xuXG5cbiAgICB2YXIgYmFja2Ryb3BSZWYgPSBmdW5jdGlvbiBiYWNrZHJvcFJlZihyZWYpIHtcbiAgICAgIHJldHVybiBfdGhpczIuYmFja2Ryb3AgPSByZWY7XG4gICAgfTtcblxuICAgIHZhciBiYWNrZHJvcCA9IHJlbmRlckJhY2tkcm9wKHtcbiAgICAgIHJlZjogYmFja2Ryb3BSZWYsXG4gICAgICBzdHlsZTogYmFja2Ryb3BTdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogYmFja2Ryb3BDbGFzc05hbWUsXG4gICAgICBvbkNsaWNrOiBfdGhpczIuaGFuZGxlQmFja2Ryb3BDbGlja1xuICAgIH0pO1xuXG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIGJhY2tkcm9wID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgICAgJ2luJzogX3RoaXMyLnByb3BzLnNob3dcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2Ryb3BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhY2tkcm9wO1xuICB9O1xuXG4gIHRoaXMub25Qb3J0YWxSZW5kZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIuYXV0b0ZvY3VzKCk7XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLm9uU2hvdykge1xuICAgICAgX3RoaXMyLnByb3BzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uU2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpczIpO1xuICAgIHZhciBjb250YWluZXIgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkoX3RoaXMyLnByb3BzLmNvbnRhaW5lciwgZG9jLmJvZHkpO1xuXG4gICAgX3RoaXMyLnByb3BzLm1hbmFnZXIuYWRkKF90aGlzMiwgY29udGFpbmVyLCBfdGhpczIucHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleWRvd25MaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5ZG93bicsIF90aGlzMi5oYW5kbGVEb2N1bWVudEtleURvd24pO1xuXG4gICAgX3RoaXMyLl9vbkRvY3VtZW50S2V5dXBMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5dXAnLCBfdGhpczIuaGFuZGxlRG9jdW1lbnRLZXlVcCk7XG5cbiAgICBfdGhpczIuX29uRm9jdXNpbkxpc3RlbmVyID0gKDAsIF9hZGRGb2N1c0xpc3RlbmVyMi5kZWZhdWx0KShfdGhpczIuZW5mb3JjZUZvY3VzKTtcbiAgfTtcblxuICB0aGlzLm9uSGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIucHJvcHMubWFuYWdlci5yZW1vdmUoX3RoaXMyKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleWRvd25MaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleXVwTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpczIuX29uRm9jdXNpbkxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5yZXN0b3JlRm9jdXMpIHtcbiAgICAgIF90aGlzMi5yZXN0b3JlTGFzdEZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc2V0TW91bnROb2RlID0gZnVuY3Rpb24gKHJlZikge1xuICAgIF90aGlzMi5tb3VudE5vZGUgPSByZWYgPyByZWYuZ2V0TW91bnROb2RlKCkgOiByZWY7XG4gIH07XG5cbiAgdGhpcy5zZXRNb2RhbE5vZGVSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgX3RoaXMyLm1vZGFsTm9kZSA9IHJlZjtcbiAgfTtcblxuICB0aGlzLnNldERpYWxvZ1JlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICBfdGhpczIuZGlhbG9nID0gcmVmO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzMi5zZXRTdGF0ZSh7IGV4aXRlZDogdHJ1ZSB9KTtcbiAgICBfdGhpczIub25IaWRlKCk7XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICB2YXIgX3Byb3BzNDtcblxuICAgICAgKF9wcm9wczQgPSBfdGhpczIucHJvcHMpLm9uRXhpdGVkLmFwcGx5KF9wcm9wczQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaGFuZGxlQmFja2Ryb3BDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLm9uQmFja2Ryb3BDbGljaykge1xuICAgICAgX3RoaXMyLnByb3BzLm9uQmFja2Ryb3BDbGljayhlKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLmJhY2tkcm9wID09PSB0cnVlKSB7XG4gICAgICBfdGhpczIucHJvcHMub25IaWRlKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmtleWJvYXJkICYmIGUua2V5Q29kZSA9PT0gMjcgJiYgX3RoaXMyLmlzVG9wTW9kYWwoKSkge1xuICAgICAgaWYgKF90aGlzMi5wcm9wcy5vbkVzY2FwZUtleURvd24pIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5RG93bihlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLnByb3BzLm9uSGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmhhbmRsZURvY3VtZW50S2V5VXAgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChfdGhpczIucHJvcHMua2V5Ym9hcmQgJiYgZS5rZXlDb2RlID09PSAyNyAmJiBfdGhpczIuaXNUb3BNb2RhbCgpKSB7XG4gICAgICBpZiAoX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5VXApIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5VXAoZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY2hlY2tGb3JGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX2luRE9NMi5kZWZhdWx0KSB7XG4gICAgICBfdGhpczIubGFzdEZvY3VzID0gKDAsIF9hY3RpdmVFbGVtZW50Mi5kZWZhdWx0KSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIV90aGlzMi5wcm9wcy5lbmZvcmNlRm9jdXMgfHwgIV90aGlzMi5faXNNb3VudGVkIHx8ICFfdGhpczIuaXNUb3BNb2RhbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpYWxvZ0VsZW1lbnQgPSBfdGhpczIuZ2V0RGlhbG9nRWxlbWVudCgpO1xuICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfYWN0aXZlRWxlbWVudDIuZGVmYXVsdCkoKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpczIpKTtcblxuICAgIGlmIChkaWFsb2dFbGVtZW50ICYmICEoMCwgX2NvbnRhaW5zMi5kZWZhdWx0KShkaWFsb2dFbGVtZW50LCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGRpYWxvZ0VsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH07XG59O1xuXG5Nb2RhbC5NYW5hZ2VyID0gX01vZGFsTWFuYWdlcjIuZGVmYXVsdDtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTW9kYWw7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY2xhc3MgPSByZXF1aXJlKCdkb20taGVscGVycy9jbGFzcycpO1xuXG52YXIgX2NsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzKTtcblxudmFyIF9zdHlsZSA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3N0eWxlJyk7XG5cbnZhciBfc3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3R5bGUpO1xuXG52YXIgX3Njcm9sbGJhclNpemUgPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL3Njcm9sbGJhclNpemUnKTtcblxudmFyIF9zY3JvbGxiYXJTaXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbGJhclNpemUpO1xuXG52YXIgX2lzT3ZlcmZsb3dpbmcgPSByZXF1aXJlKCcuL3V0aWxzL2lzT3ZlcmZsb3dpbmcnKTtcblxudmFyIF9pc092ZXJmbG93aW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzT3ZlcmZsb3dpbmcpO1xuXG52YXIgX21hbmFnZUFyaWFIaWRkZW4gPSByZXF1aXJlKCcuL3V0aWxzL21hbmFnZUFyaWFIaWRkZW4nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gZmluZEluZGV4T2YoYXJyLCBjYikge1xuICB2YXIgaWR4ID0gLTE7XG4gIGFyci5zb21lKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgaWYgKGNiKGQsIGkpKSB7XG4gICAgICBpZHggPSBpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gZmluZENvbnRhaW5lcihkYXRhLCBtb2RhbCkge1xuICByZXR1cm4gZmluZEluZGV4T2YoZGF0YSwgZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gZC5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoc3RhdGUsIGNvbnRhaW5lcikge1xuICB2YXIgc3R5bGUgPSB7IG92ZXJmbG93OiAnaGlkZGVuJyB9O1xuXG4gIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gdGhlIGFjdHVhbCBgc3R5bGVgIGhlcmVcbiAgLy8gYmVjYXN1ZSB3ZSB3aWxsIG92ZXJyaWRlIGl0XG4gIHN0YXRlLnN0eWxlID0ge1xuICAgIG92ZXJmbG93OiBjb250YWluZXIuc3R5bGUub3ZlcmZsb3csXG4gICAgcGFkZGluZ1JpZ2h0OiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0XG4gIH07XG5cbiAgaWYgKHN0YXRlLm92ZXJmbG93aW5nKSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nXG4gICAgLy8gdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGhcbiAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBwYXJzZUludCgoMCwgX3N0eWxlMi5kZWZhdWx0KShjb250YWluZXIsICdwYWRkaW5nUmlnaHQnKSB8fCAwLCAxMCkgKyAoMCwgX3Njcm9sbGJhclNpemUyLmRlZmF1bHQpKCkgKyAncHgnO1xuICB9XG5cbiAgKDAsIF9zdHlsZTIuZGVmYXVsdCkoY29udGFpbmVyLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbnRhaW5lclN0eWxlKF9yZWYsIGNvbnRhaW5lcikge1xuICB2YXIgc3R5bGUgPSBfcmVmLnN0eWxlO1xuXG5cbiAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBjb250YWluZXIuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gIH0pO1xufVxuLyoqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKlxuICogQGludGVybmFsIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5cbnZhciBNb2RhbE1hbmFnZXIgPSBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYyJGhpZGVTaWJsaW5nTm9kZSA9IF9yZWYyLmhpZGVTaWJsaW5nTm9kZXMsXG4gICAgICBoaWRlU2libGluZ05vZGVzID0gX3JlZjIkaGlkZVNpYmxpbmdOb2RlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkaGlkZVNpYmxpbmdOb2RlLFxuICAgICAgX3JlZjIkaGFuZGxlQ29udGFpbmVyID0gX3JlZjIuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3csXG4gICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9yZWYyJGhhbmRsZUNvbnRhaW5lciA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJGhhbmRsZUNvbnRhaW5lcjtcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxNYW5hZ2VyKTtcblxuICB0aGlzLmFkZCA9IGZ1bmN0aW9uIChtb2RhbCwgY29udGFpbmVyLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgbW9kYWxJZHggPSBfdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG4gICAgdmFyIGNvbnRhaW5lcklkeCA9IF90aGlzLmNvbnRhaW5lcnMuaW5kZXhPZihjb250YWluZXIpO1xuXG4gICAgaWYgKG1vZGFsSWR4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIG1vZGFsSWR4ID0gX3RoaXMubW9kYWxzLmxlbmd0aDtcbiAgICBfdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7XG5cbiAgICBpZiAoX3RoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmhpZGVTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbC5tb2RhbE5vZGUpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluZXJJZHggIT09IC0xKSB7XG4gICAgICBfdGhpcy5kYXRhW2NvbnRhaW5lcklkeF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgbW9kYWxzOiBbbW9kYWxdLFxuICAgICAgLy9yaWdodCBub3cgb25seSB0aGUgZmlyc3QgbW9kYWwgb2YgYSBjb250YWluZXIgd2lsbCBoYXZlIGl0cyBjbGFzc2VzIGFwcGxpZWRcbiAgICAgIGNsYXNzZXM6IGNsYXNzTmFtZSA/IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pIDogW10sXG5cbiAgICAgIG92ZXJmbG93aW5nOiAoMCwgX2lzT3ZlcmZsb3dpbmcyLmRlZmF1bHQpKGNvbnRhaW5lcilcbiAgICB9O1xuXG4gICAgaWYgKF90aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICBzZXRDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpO1xuICAgIH1cblxuICAgIGRhdGEuY2xhc3Nlcy5mb3JFYWNoKF9jbGFzczIuZGVmYXVsdC5hZGRDbGFzcy5iaW5kKG51bGwsIGNvbnRhaW5lcikpO1xuXG4gICAgX3RoaXMuY29udGFpbmVycy5wdXNoKGNvbnRhaW5lcik7XG4gICAgX3RoaXMuZGF0YS5wdXNoKGRhdGEpO1xuXG4gICAgcmV0dXJuIG1vZGFsSWR4O1xuICB9O1xuXG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKG1vZGFsKSB7XG4gICAgdmFyIG1vZGFsSWR4ID0gX3RoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgaWYgKG1vZGFsSWR4ID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXJJZHggPSBmaW5kQ29udGFpbmVyKF90aGlzLmRhdGEsIG1vZGFsKTtcbiAgICB2YXIgZGF0YSA9IF90aGlzLmRhdGFbY29udGFpbmVySWR4XTtcbiAgICB2YXIgY29udGFpbmVyID0gX3RoaXMuY29udGFpbmVyc1tjb250YWluZXJJZHhdO1xuXG4gICAgZGF0YS5tb2RhbHMuc3BsaWNlKGRhdGEubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcblxuICAgIF90aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJZHgsIDEpO1xuXG4gICAgLy8gaWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsXG4gICAgLy8gY2xlYW4gdXAgdGhlIGNvbnRhaW5lclxuICAgIGlmIChkYXRhLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEuY2xhc3Nlcy5mb3JFYWNoKF9jbGFzczIuZGVmYXVsdC5yZW1vdmVDbGFzcy5iaW5kKG51bGwsIGNvbnRhaW5lcikpO1xuXG4gICAgICBpZiAoX3RoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgICAgcmVtb3ZlQ29udGFpbmVyU3R5bGUoZGF0YSwgY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLnNob3dTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbC5tb2RhbE5vZGUpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySWR4LCAxKTtcbiAgICAgIF90aGlzLmRhdGEuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAvL290aGVyd2lzZSBtYWtlIHN1cmUgdGhlIG5leHQgdG9wIG1vZGFsIGlzIHZpc2libGUgdG8gYSBTUlxuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW4pKGZhbHNlLCBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXS5tb2RhbE5vZGUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmlzVG9wTW9kYWwgPSBmdW5jdGlvbiAobW9kYWwpIHtcbiAgICByZXR1cm4gISFfdGhpcy5tb2RhbHMubGVuZ3RoICYmIF90aGlzLm1vZGFsc1tfdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9O1xuXG4gIHRoaXMuaGlkZVNpYmxpbmdOb2RlcyA9IGhpZGVTaWJsaW5nTm9kZXM7XG4gIHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBoYW5kbGVDb250YWluZXJPdmVyZmxvdztcbiAgdGhpcy5tb2RhbHMgPSBbXTtcbiAgdGhpcy5jb250YWluZXJzID0gW107XG4gIHRoaXMuZGF0YSA9IFtdO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTW9kYWxNYW5hZ2VyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJyk7XG5cbnZhciBfZWxlbWVudFR5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudFR5cGUpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUG9ydGFsID0gcmVxdWlyZSgnLi9Qb3J0YWwnKTtcblxudmFyIF9Qb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9ydGFsKTtcblxudmFyIF9Qb3NpdGlvbiA9IHJlcXVpcmUoJy4vUG9zaXRpb24nKTtcblxudmFyIF9Qb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3NpdGlvbik7XG5cbnZhciBfUm9vdENsb3NlV3JhcHBlciA9IHJlcXVpcmUoJy4vUm9vdENsb3NlV3JhcHBlcicpO1xuXG52YXIgX1Jvb3RDbG9zZVdyYXBwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm9vdENsb3NlV3JhcHBlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEJ1aWx0IG9uIHRvcCBvZiBgPFBvc2l0aW9uLz5gIGFuZCBgPFBvcnRhbC8+YCwgdGhlIG92ZXJsYXkgY29tcG9uZW50IGlzIGdyZWF0IGZvciBjdXN0b20gdG9vbHRpcCBvdmVybGF5cy5cbiAqL1xudmFyIE92ZXJsYXkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3ZlcmxheSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheShwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdmVybGF5KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IHRydWUgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uRXhpdGVkLmFwcGx5KF90aGlzJHByb3BzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHsgZXhpdGVkOiAhcHJvcHMuc2hvdyB9O1xuICAgIF90aGlzLm9uSGlkZGVuTGlzdGVuZXIgPSBfdGhpcy5oYW5kbGVIaWRkZW4uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgT3ZlcmxheS5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IGZhbHNlIH0pO1xuICAgIH0gZWxzZSBpZiAoIW5leHRQcm9wcy50cmFuc2l0aW9uKSB7XG4gICAgICAvLyBPdGhlcndpc2UgbGV0IGhhbmRsZUhpZGRlbiB0YWtlIGNhcmUgb2YgbWFya2luZyBleGl0ZWQuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiB0cnVlIH0pO1xuICAgIH1cbiAgfTtcblxuICBPdmVybGF5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvbnRhaW5lciA9IF9wcm9wcy5jb250YWluZXIsXG4gICAgICAgIGNvbnRhaW5lclBhZGRpbmcgPSBfcHJvcHMuY29udGFpbmVyUGFkZGluZyxcbiAgICAgICAgdGFyZ2V0ID0gX3Byb3BzLnRhcmdldCxcbiAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzLnBsYWNlbWVudCxcbiAgICAgICAgc2hvdWxkVXBkYXRlUG9zaXRpb24gPSBfcHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb24sXG4gICAgICAgIHJvb3RDbG9zZSA9IF9wcm9wcy5yb290Q2xvc2UsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBUcmFuc2l0aW9uID0gX3Byb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjb250YWluZXInLCAnY29udGFpbmVyUGFkZGluZycsICd0YXJnZXQnLCAncGxhY2VtZW50JywgJ3Nob3VsZFVwZGF0ZVBvc2l0aW9uJywgJ3Jvb3RDbG9zZScsICdjaGlsZHJlbicsICd0cmFuc2l0aW9uJ10pO1xuXG4gICAgLy8gRG9uJ3QgdW4tcmVuZGVyIHRoZSBvdmVybGF5IHdoaWxlIGl0J3MgdHJhbnNpdGlvbmluZyBvdXQuXG5cblxuICAgIHZhciBtb3VudE92ZXJsYXkgPSBwcm9wcy5zaG93IHx8IFRyYW5zaXRpb24gJiYgIXRoaXMuc3RhdGUuZXhpdGVkO1xuICAgIGlmICghbW91bnRPdmVybGF5KSB7XG4gICAgICAvLyBEb24ndCBib3RoZXIgc2hvd2luZyBhbnl0aGluZyBpZiB3ZSBkb24ndCBoYXZlIHRvLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW47XG5cbiAgICAvLyBQb3NpdGlvbiBpcyBiZSBpbm5lci1tb3N0IGJlY2F1c2UgaXQgYWRkcyBpbmxpbmUgc3R5bGVzIGludG8gdGhlIGNoaWxkLFxuICAgIC8vIHdoaWNoIHRoZSBvdGhlciB3cmFwcGVycyBkb24ndCBmb3J3YXJkIGNvcnJlY3RseS5cbiAgICBjaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX1Bvc2l0aW9uMi5kZWZhdWx0LFxuICAgICAgeyBjb250YWluZXI6IGNvbnRhaW5lciwgY29udGFpbmVyUGFkZGluZzogY29udGFpbmVyUGFkZGluZywgdGFyZ2V0OiB0YXJnZXQsIHBsYWNlbWVudDogcGxhY2VtZW50LCBzaG91bGRVcGRhdGVQb3NpdGlvbjogc2hvdWxkVXBkYXRlUG9zaXRpb24gfSxcbiAgICAgIGNoaWxkXG4gICAgKTtcblxuICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICB2YXIgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQ7XG5cbiAgICAgIC8vIFRoaXMgYW5pbWF0ZXMgdGhlIGNoaWxkIG5vZGUgYnkgaW5qZWN0aW5nIHByb3BzLCBzbyBpdCBtdXN0IHByZWNlZGVcbiAgICAgIC8vIGFueXRoaW5nIHRoYXQgYWRkcyBhIHdyYXBwaW5nIGRpdi5cblxuICAgICAgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVHJhbnNpdGlvbixcbiAgICAgICAge1xuICAgICAgICAgICdpbic6IHByb3BzLnNob3csXG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgICAgIG9uRXhpdGVkOiB0aGlzLm9uSGlkZGVuTGlzdGVuZXIsXG4gICAgICAgICAgb25FbnRlcjogb25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZ29lcyBhZnRlciBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBhZGRzIGEgd3JhcHBpbmcgZGl2LlxuICAgIGlmIChyb290Q2xvc2UpIHtcbiAgICAgIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9Sb290Q2xvc2VXcmFwcGVyMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgb25Sb290Q2xvc2U6IHByb3BzLm9uSGlkZSxcbiAgICAgICAgICBldmVudDogcHJvcHMucm9vdENsb3NlRXZlbnRcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX1BvcnRhbDIuZGVmYXVsdCxcbiAgICAgIHsgY29udGFpbmVyOiBjb250YWluZXIgfSxcbiAgICAgIGNoaWxkXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheTtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXkucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIF9Qb3J0YWwyLmRlZmF1bHQucHJvcFR5cGVzLCBfUG9zaXRpb24yLmRlZmF1bHQucHJvcFR5cGVzLCB7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgT3ZlcmxheVxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgYG9uSGlkZWAgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgZXZlbnQgZm9yIHRvZ2dsaW5nIG92ZXJsYXlcbiAgICovXG4gIHJvb3RDbG9zZUV2ZW50OiBfUm9vdENsb3NlV3JhcHBlcjIuZGVmYXVsdC5wcm9wVHlwZXMuZXZlbnQsXG5cbiAgLyoqXG4gICAqIEEgQ2FsbGJhY2sgZmlyZWQgYnkgdGhlIE92ZXJsYXkgd2hlbiBpdCB3aXNoZXMgdG8gYmUgaGlkZGVuLlxuICAgKlxuICAgKiBfX3JlcXVpcmVkX18gd2hlbiBgcm9vdENsb3NlYCBpcyBgdHJ1ZWAuXG4gICAqXG4gICAqIEB0eXBlIGZ1bmNcbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKHByb3BzKSB7XG4gICAgdmFyIHByb3BUeXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jO1xuICAgIGlmIChwcm9wcy5yb290Q2xvc2UpIHtcbiAgICAgIHByb3BUeXBlID0gcHJvcFR5cGUuaXNSZXF1aXJlZDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wVHlwZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50XG4gICAqIHVzZWQgdG8gYW5pbWF0ZSB0aGUgb3ZlcmxheSBhcyBpdCBjaGFuZ2VzIHZpc2liaWxpdHkuXG4gICAqL1xuICB0cmFuc2l0aW9uOiBfZWxlbWVudFR5cGUyLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBpblxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBPdmVybGF5IHRyYW5zaXRpb25zIG91dFxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgb3V0XG4gICAqL1xuICBvbkV4aXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gT3ZlcmxheTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3V0aWwvaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gcmVxdWlyZSgnLi91dGlscy9nZXRDb250YWluZXInKTtcblxudmFyIF9nZXRDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxudmFyIF9MZWdhY3lQb3J0YWwgPSByZXF1aXJlKCcuL0xlZ2FjeVBvcnRhbCcpO1xuXG52YXIgX0xlZ2FjeVBvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MZWdhY3lQb3J0YWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UG9ydGFsLz5gIGNvbXBvbmVudCByZW5kZXJzIGl0cyBjaGlsZHJlbiBpbnRvIGEgbmV3IFwic3VidHJlZVwiIG91dHNpZGUgb2YgY3VycmVudCBjb21wb25lbnQgaGllcmFyY2h5LlxuICogWW91IGNhbiB0aGluayBvZiBpdCBhcyBhIGRlY2xhcmF0aXZlIGBhcHBlbmRDaGlsZCgpYCwgb3IgalF1ZXJ5J3MgYCQuZm4uYXBwZW5kVG8oKWAuXG4gKiBUaGUgY2hpbGRyZW4gb2YgYDxQb3J0YWwvPmAgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGBjb250YWluZXJgIHNwZWNpZmllZC5cbiAqL1xudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuZ2V0TW91bnROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpZiAoIV9pbkRPTTIuZGVmYXVsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXIgPSB0aGlzLnByb3BzLmNvbnRhaW5lcjtcblxuICAgIGlmICh0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb250YWluZXIgPSBjb250YWluZXIoKTtcbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyICYmICFfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSkge1xuICAgICAgLy8gVGhlIGNvbnRhaW5lciBpcyBhIFJlYWN0IGNvbXBvbmVudCB0aGF0IGhhcyBub3QgeWV0IGJlZW4gcmVuZGVyZWQuXG4gICAgICAvLyBEb24ndCBzZXQgdGhlIGNvbnRhaW5lciBub2RlIHlldC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldENvbnRhaW5lcihjb250YWluZXIpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKHRoaXMucHJvcHMuY29udGFpbmVyKTtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUodGhpcy5wcm9wcy5vblJlbmRlcmVkKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMub25SZW5kZXJlZCkge1xuICAgICAgdGhpcy5wcm9wcy5vblJlbmRlcmVkKCk7XG4gICAgfVxuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLmNvbnRhaW5lciAhPT0gdGhpcy5wcm9wcy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKG5leHRQcm9wcy5jb250YWluZXIpO1xuICAgIH1cbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSA9IG51bGw7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5zZXRDb250YWluZXIgPSBmdW5jdGlvbiBzZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSA9ICgwLCBfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KShjb250YWluZXIsICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkodGhpcykuYm9keSk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSA/IF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwodGhpcy5wcm9wcy5jaGlsZHJlbiwgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQb3J0YWw7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwuZGlzcGxheU5hbWUgPSAnUG9ydGFsJztcblBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgUG9ydGFsIGNoaWxkcmVuXG4gICAqIGFwcGVuZGVkIHRvIGl0LlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgb25SZW5kZXJlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmNyZWF0ZVBvcnRhbCA/IFBvcnRhbCA6IF9MZWdhY3lQb3J0YWwyLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnQnKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9uZW50T3JFbGVtZW50KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2NhbGN1bGF0ZVBvc2l0aW9uID0gcmVxdWlyZSgnLi91dGlscy9jYWxjdWxhdGVQb3NpdGlvbicpO1xuXG52YXIgX2NhbGN1bGF0ZVBvc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbGN1bGF0ZVBvc2l0aW9uKTtcblxudmFyIF9nZXRDb250YWluZXIgPSByZXF1aXJlKCcuL3V0aWxzL2dldENvbnRhaW5lcicpO1xuXG52YXIgX2dldENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb250YWluZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgUG9zaXRpb24gY29tcG9uZW50IGNhbGN1bGF0ZXMgdGhlIGNvb3JkaW5hdGVzIGZvciBpdHMgY2hpbGQsIHRvIHBvc2l0aW9uXG4gKiBpdCByZWxhdGl2ZSB0byBhIGB0YXJnZXRgIGNvbXBvbmVudCBvciBub2RlLiBVc2VmdWwgZm9yIGNyZWF0aW5nIGNhbGxvdXRzXG4gKiBhbmQgdG9vbHRpcHMsIHRoZSBQb3NpdGlvbiBjb21wb25lbnQgaW5qZWN0cyBhIGBzdHlsZWAgcHJvcHMgd2l0aCBgbGVmdGAgYW5kXG4gKiBgdG9wYCB2YWx1ZXMgZm9yIHBvc2l0aW9uaW5nIHlvdXIgY29tcG9uZW50LlxuICpcbiAqIEl0IGFsc28gaW5qZWN0cyBcImFycm93XCIgYGxlZnRgLCBhbmQgYHRvcGAgdmFsdWVzIGZvciBzdHlsaW5nIGNhbGxvdXQgYXJyb3dzXG4gKiBmb3IgZ2l2aW5nIHlvdXIgY29tcG9uZW50cyBhIHNlbnNlIG9mIGRpcmVjdGlvbmFsaXR5LlxuICovXG52YXIgUG9zaXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvc2l0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLnByb3BzLnRhcmdldDtcblxuICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gdGFyZ2V0KCkgOiB0YXJnZXQ7XG4gICAgICByZXR1cm4gdGFyZ2V0RWxlbWVudCAmJiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGFyZ2V0RWxlbWVudCkgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMubWF5YmVVcGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uIChwbGFjZW1lbnRDaGFuZ2VkKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuZ2V0VGFyZ2V0KCk7XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb24gJiYgdGFyZ2V0ID09PSBfdGhpcy5fbGFzdFRhcmdldCAmJiAhcGxhY2VtZW50Q2hhbmdlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnVwZGF0ZVBvc2l0aW9uKHRhcmdldCk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgcG9zaXRpb25MZWZ0OiAwLFxuICAgICAgcG9zaXRpb25Ub3A6IDAsXG4gICAgICBhcnJvd09mZnNldExlZnQ6IG51bGwsXG4gICAgICBhcnJvd09mZnNldFRvcDogbnVsbFxuICAgIH07XG5cbiAgICBfdGhpcy5fbmVlZHNGbHVzaCA9IGZhbHNlO1xuICAgIF90aGlzLl9sYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBQb3NpdGlvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKHRoaXMuZ2V0VGFyZ2V0KCkpO1xuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgIHRoaXMuX25lZWRzRmx1c2ggPSB0cnVlO1xuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMuX25lZWRzRmx1c2gpIHtcbiAgICAgIHRoaXMuX25lZWRzRmx1c2ggPSBmYWxzZTtcbiAgICAgIHRoaXMubWF5YmVVcGRhdGVQb3NpdGlvbih0aGlzLnByb3BzLnBsYWNlbWVudCAhPT0gcHJldlByb3BzLnBsYWNlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHBvc2l0aW9uTGVmdCA9IF9zdGF0ZS5wb3NpdGlvbkxlZnQsXG4gICAgICAgIHBvc2l0aW9uVG9wID0gX3N0YXRlLnBvc2l0aW9uVG9wLFxuICAgICAgICBhcnJvd1Bvc2l0aW9uID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9zdGF0ZSwgWydwb3NpdGlvbkxlZnQnLCAncG9zaXRpb25Ub3AnXSk7XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgbm90IGJlIGZvcndhcmRlZCB0byB0aGUgY2hpbGQuXG5cblxuICAgIGRlbGV0ZSBwcm9wcy50YXJnZXQ7XG4gICAgZGVsZXRlIHByb3BzLmNvbnRhaW5lcjtcbiAgICBkZWxldGUgcHJvcHMuY29udGFpbmVyUGFkZGluZztcbiAgICBkZWxldGUgcHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb247XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCBhcnJvd1Bvc2l0aW9uLCB7XG4gICAgICAvLyBGSVhNRTogRG9uJ3QgZm9yd2FyZCBgcG9zaXRpb25MZWZ0YCBhbmQgYHBvc2l0aW9uVG9wYCB2aWEgYm90aCBwcm9wc1xuICAgICAgLy8gYW5kIGBwcm9wcy5zdHlsZWAuXG4gICAgICBwb3NpdGlvbkxlZnQ6IHBvc2l0aW9uTGVmdCxcbiAgICAgIHBvc2l0aW9uVG9wOiBwb3NpdGlvblRvcCxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KShjbGFzc05hbWUsIGNoaWxkLnByb3BzLmNsYXNzTmFtZSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLnN0eWxlLCB7XG4gICAgICAgIGxlZnQ6IHBvc2l0aW9uTGVmdCxcbiAgICAgICAgdG9wOiBwb3NpdGlvblRvcFxuICAgICAgfSlcbiAgICB9KSk7XG4gIH07XG5cbiAgUG9zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24odGFyZ2V0KSB7XG4gICAgdGhpcy5fbGFzdFRhcmdldCA9IHRhcmdldDtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcG9zaXRpb25MZWZ0OiAwLFxuICAgICAgICBwb3NpdGlvblRvcDogMCxcbiAgICAgICAgYXJyb3dPZmZzZXRMZWZ0OiBudWxsLFxuICAgICAgICBhcnJvd09mZnNldFRvcDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxheSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgY29udGFpbmVyID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKHRoaXMucHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpLmJvZHkpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSgoMCwgX2NhbGN1bGF0ZVBvc2l0aW9uMi5kZWZhdWx0KSh0aGlzLnByb3BzLnBsYWNlbWVudCwgb3ZlcmxheSwgdGFyZ2V0LCBjb250YWluZXIsIHRoaXMucHJvcHMuY29udGFpbmVyUGFkZGluZykpO1xuICB9O1xuXG4gIHJldHVybiBQb3NpdGlvbjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvc2l0aW9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgbm9kZSwgZWxlbWVudCwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGNoaWxkIHdpbGwgYmVcbiAgICogYmUgcG9zaXRpb25lZCBuZXh0IHRvIHRoZSBgdGFyZ2V0YCBzcGVjaWZpZWQuXG4gICAqL1xuICB0YXJnZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogXCJvZmZzZXRQYXJlbnRcIiBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gc3BhY2luZyBpbiBwaXhlbHMgYmV0d2VlbiBjb250YWluZXIgYm9yZGVyIGFuZCBjb21wb25lbnQgYm9yZGVyXG4gICAqL1xuICBjb250YWluZXJQYWRkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIEhvdyB0byBwb3NpdGlvbiB0aGUgY29tcG9uZW50IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXRcbiAgICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddKSxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBvc2l0aW9uIHNob3VsZCBiZSBjaGFuZ2VkIG9uIGVhY2ggdXBkYXRlXG4gICAqL1xuICBzaG91bGRVcGRhdGVQb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59O1xuXG5Qb3NpdGlvbi5kaXNwbGF5TmFtZSA9ICdQb3NpdGlvbic7XG5cblBvc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29udGFpbmVyUGFkZGluZzogMCxcbiAgcGxhY2VtZW50OiAncmlnaHQnLFxuICBzaG91bGRVcGRhdGVQb3NpdGlvbjogZmFsc2Vcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBvc2l0aW9uO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIGNvbXBvbmVudCB0byBhbGxvdyBhdHRhY2hpbmcgYSBub24tY29uZmxpY3RpbmcgcmVmIHRvIGFcbiAqIGNoaWxkIGVsZW1lbnQgdGhhdCBtYXkgbm90IGFjY2VwdCByZWZzLlxuICovXG5cbnZhciBSZWZIb2xkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVmSG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWZIb2xkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZkhvbGRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZkhvbGRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBSZWZIb2xkZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZWZIb2xkZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWZIb2xkZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY29udGFpbnMgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9jb250YWlucycpO1xuXG52YXIgX2NvbnRhaW5zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5zKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnLi91dGlscy9hZGRFdmVudExpc3RlbmVyJyk7XG5cbnZhciBfYWRkRXZlbnRMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRFdmVudExpc3RlbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZXNjYXBlS2V5Q29kZSA9IDI3O1xuXG5mdW5jdGlvbiBpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbi8qKlxuICogVGhlIGA8Um9vdENsb3NlV3JhcHBlci8+YCBjb21wb25lbnQgcmVnaXN0ZXJzIHlvdXIgY2FsbGJhY2sgb24gdGhlIGRvY3VtZW50XG4gKiB3aGVuIHJlbmRlcmVkLiBQb3dlcnMgdGhlIGA8T3ZlcmxheS8+YCBjb21wb25lbnQuIFRoaXMgaXMgdXNlZCBhY2hpZXZlIG1vZGFsXG4gKiBzdHlsZSBiZWhhdmlvciB3aGVyZSB5b3VyIGNhbGxiYWNrIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIHRyaWVzIHRvXG4gKiBpbnRlcmFjdCB3aXRoIHRoZSByZXN0IG9mIHRoZSBkb2N1bWVudCBvciBoaXRzIHRoZSBgZXNjYCBrZXkuXG4gKi9cblxudmFyIFJvb3RDbG9zZVdyYXBwZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm9vdENsb3NlV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm9vdENsb3NlV3JhcHBlcihwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb290Q2xvc2VXcmFwcGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBldmVudCB0byBhdm9pZCB0cmlnZ2VyaW5nIGhhbmRsZXJzIGltbWVkaWF0ZWx5XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzIwMDc0XG4gICAgICBfdGhpcy5jdXJyZW50RXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG5cbiAgICAgIHZhciBldmVudCA9IF90aGlzLnByb3BzLmV2ZW50O1xuXG4gICAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpcyk7XG5cbiAgICAgIC8vIFVzZSBjYXB0dXJlIGZvciB0aGlzIGxpc3RlbmVyIHNvIGl0IGZpcmVzIGJlZm9yZSBSZWFjdCdzIGxpc3RlbmVyLCB0b1xuICAgICAgLy8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzIGluIHRoZSBjb250YWlucygpIGNoZWNrIGJlbG93IGlmIHRoZSB0YXJnZXQgRE9NXG4gICAgICAvLyBlbGVtZW50IGlzIHJlbW92ZWQgaW4gdGhlIFJlYWN0IG1vdXNlIGNhbGxiYWNrLlxuICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUNhcHR1cmVMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCBldmVudCwgX3RoaXMuaGFuZGxlTW91c2VDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUxpc3RlbmVyID0gKDAsIF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KShkb2MsIGV2ZW50LCBfdGhpcy5oYW5kbGVNb3VzZSk7XG5cbiAgICAgIF90aGlzLmRvY3VtZW50S2V5dXBMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5dXAnLCBfdGhpcy5oYW5kbGVLZXlVcCk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUNhcHR1cmVMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmRvY3VtZW50TW91c2VMaXN0ZW5lcikge1xuICAgICAgICBfdGhpcy5kb2N1bWVudE1vdXNlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5kb2N1bWVudEtleXVwTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRLZXl1cExpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZUNhcHR1cmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJldmVudE1vdXNlUm9vdENsb3NlID0gaXNNb2RpZmllZEV2ZW50KGUpIHx8ICFpc0xlZnRDbGlja0V2ZW50KGUpIHx8ICgwLCBfY29udGFpbnMyLmRlZmF1bHQpKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcyksIGUudGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gc2tpcCBpZiB0aGlzIGV2ZW50IGlzIHRoZSBzYW1lIGFzIHRoZSBvbmUgcnVubmluZyB3aGVuIHdlIGFkZGVkIHRoZSBoYW5kbGVyc1xuICAgICAgaWYgKGUgPT09IF90aGlzLmN1cnJlbnRFdmVudCkge1xuICAgICAgICBfdGhpcy5jdXJyZW50RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcmV2ZW50TW91c2VSb290Q2xvc2UgJiYgX3RoaXMucHJvcHMub25Sb290Q2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Sb290Q2xvc2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIHNraXAgaWYgdGhpcyBldmVudCBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIHJ1bm5pbmcgd2hlbiB3ZSBhZGRlZCB0aGUgaGFuZGxlcnNcbiAgICAgIGlmIChlID09PSBfdGhpcy5jdXJyZW50RXZlbnQpIHtcbiAgICAgICAgX3RoaXMuY3VycmVudEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlLmtleUNvZGUgPT09IGVzY2FwZUtleUNvZGUgJiYgX3RoaXMucHJvcHMub25Sb290Q2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Sb290Q2xvc2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSA9IGZhbHNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgcHJldlByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmRpc2FibGVkICYmICFwcmV2UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBSb290Q2xvc2VXcmFwcGVyO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUm9vdENsb3NlV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdSb290Q2xvc2VXcmFwcGVyJztcblxuUm9vdENsb3NlV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciBjbGljayBvciBtb3VzZWRvd24uIEFsc28gdHJpZ2dlcnMgd2hlbiB1c2VyIGhpdHMgYGVzY2AuXG4gICAqL1xuICBvblJvb3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2hpbGRyZW4gdG8gcmVuZGVyLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHRoZSBSb290Q2xvc2VXcmFwcGVyLCBwcmV2ZW50aW5nIGl0IGZyb20gdHJpZ2dlcmluZyBgb25Sb290Q2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENob29zZSB3aGljaCBkb2N1bWVudCBtb3VzZSBldmVudCB0byBiaW5kIHRvLlxuICAgKi9cbiAgZXZlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydjbGljaycsICdtb3VzZWRvd24nXSlcbn07XG5cblJvb3RDbG9zZVdyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBldmVudDogJ2NsaWNrJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUm9vdENsb3NlV3JhcHBlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICgwLCBfb24yLmRlZmF1bHQpKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcblxuICByZXR1cm4ge1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgKDAsIF9vZmYyLmRlZmF1bHQpKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgX29uID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvZXZlbnRzL29uJyk7XG5cbnZhciBfb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb24pO1xuXG52YXIgX29mZiA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL2V2ZW50cy9vZmYnKTtcblxudmFyIF9vZmYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2ZmKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkRm9jdXNMaXN0ZW5lcjtcbi8qKlxuICogRmlyZWZveCBkb2Vzbid0IGhhdmUgYSBmb2N1c2luIGV2ZW50IHNvIHVzaW5nIGNhcHR1cmUgaXMgZWFzaWVzdCB3YXkgdG8gZ2V0IGJ1YmJsaW5nXG4gKiBJRTggY2FuJ3QgZG8gYWRkRXZlbnRMaXN0ZW5lciwgYnV0IGRvZXMgaGF2ZSBvbmZvY3VzaW4sIHNvIHdlIHVzZSB0aGF0IGluIGllOFxuICpcbiAqIFdlIG9ubHkgYWxsb3cgb25lIExpc3RlbmVyIGF0IGEgdGltZSB0byBhdm9pZCBzdGFjayBvdmVyZmxvd3NcbiAqL1xuZnVuY3Rpb24gYWRkRm9jdXNMaXN0ZW5lcihoYW5kbGVyKSB7XG4gIHZhciB1c2VGb2N1c2luID0gIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG4gIHZhciByZW1vdmUgPSB2b2lkIDA7XG5cbiAgaWYgKHVzZUZvY3VzaW4pIHtcbiAgICBkb2N1bWVudC5hdHRhY2hFdmVudCgnb25mb2N1c2luJywgaGFuZGxlcik7XG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmRldGFjaEV2ZW50KCdvbmZvY3VzaW4nLCBoYW5kbGVyKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlciwgdHJ1ZSk7XG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlciwgdHJ1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7IHJlbW92ZTogcmVtb3ZlIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjdWxhdGVQb3NpdGlvbjtcblxudmFyIF9vZmZzZXQgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9vZmZzZXQnKTtcblxudmFyIF9vZmZzZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2Zmc2V0KTtcblxudmFyIF9wb3NpdGlvbiA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L3Bvc2l0aW9uJyk7XG5cbnZhciBfcG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zaXRpb24pO1xuXG52YXIgX3Njcm9sbFRvcCA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L3Njcm9sbFRvcCcpO1xuXG52YXIgX3Njcm9sbFRvcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY3JvbGxUb3ApO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRDb250YWluZXJEaW1lbnNpb25zKGNvbnRhaW5lck5vZGUpIHtcbiAgdmFyIHdpZHRoID0gdm9pZCAwLFxuICAgICAgaGVpZ2h0ID0gdm9pZCAwLFxuICAgICAgc2Nyb2xsID0gdm9pZCAwO1xuXG4gIGlmIChjb250YWluZXJOb2RlLnRhZ05hbWUgPT09ICdCT0RZJykge1xuICAgIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgc2Nyb2xsID0gKDAsIF9zY3JvbGxUb3AyLmRlZmF1bHQpKCgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoY29udGFpbmVyTm9kZSkuZG9jdW1lbnRFbGVtZW50KSB8fCAoMCwgX3Njcm9sbFRvcDIuZGVmYXVsdCkoY29udGFpbmVyTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9nZXRPZmZzZXQgPSAoMCwgX29mZnNldDIuZGVmYXVsdCkoY29udGFpbmVyTm9kZSk7XG5cbiAgICB3aWR0aCA9IF9nZXRPZmZzZXQud2lkdGg7XG4gICAgaGVpZ2h0ID0gX2dldE9mZnNldC5oZWlnaHQ7XG5cbiAgICBzY3JvbGwgPSAoMCwgX3Njcm9sbFRvcDIuZGVmYXVsdCkoY29udGFpbmVyTm9kZSk7XG4gIH1cblxuICByZXR1cm4geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBzY3JvbGw6IHNjcm9sbCB9O1xufVxuXG5mdW5jdGlvbiBnZXRUb3BEZWx0YSh0b3AsIG92ZXJsYXlIZWlnaHQsIGNvbnRhaW5lciwgcGFkZGluZykge1xuICB2YXIgY29udGFpbmVyRGltZW5zaW9ucyA9IGdldENvbnRhaW5lckRpbWVuc2lvbnMoY29udGFpbmVyKTtcbiAgdmFyIGNvbnRhaW5lclNjcm9sbCA9IGNvbnRhaW5lckRpbWVuc2lvbnMuc2Nyb2xsO1xuICB2YXIgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyRGltZW5zaW9ucy5oZWlnaHQ7XG5cbiAgdmFyIHRvcEVkZ2VPZmZzZXQgPSB0b3AgLSBwYWRkaW5nIC0gY29udGFpbmVyU2Nyb2xsO1xuICB2YXIgYm90dG9tRWRnZU9mZnNldCA9IHRvcCArIHBhZGRpbmcgLSBjb250YWluZXJTY3JvbGwgKyBvdmVybGF5SGVpZ2h0O1xuXG4gIGlmICh0b3BFZGdlT2Zmc2V0IDwgMCkge1xuICAgIHJldHVybiAtdG9wRWRnZU9mZnNldDtcbiAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gY29udGFpbmVySGVpZ2h0KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lckhlaWdodCAtIGJvdHRvbUVkZ2VPZmZzZXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TGVmdERlbHRhKGxlZnQsIG92ZXJsYXlXaWR0aCwgY29udGFpbmVyLCBwYWRkaW5nKSB7XG4gIHZhciBjb250YWluZXJEaW1lbnNpb25zID0gZ2V0Q29udGFpbmVyRGltZW5zaW9ucyhjb250YWluZXIpO1xuICB2YXIgY29udGFpbmVyV2lkdGggPSBjb250YWluZXJEaW1lbnNpb25zLndpZHRoO1xuXG4gIHZhciBsZWZ0RWRnZU9mZnNldCA9IGxlZnQgLSBwYWRkaW5nO1xuICB2YXIgcmlnaHRFZGdlT2Zmc2V0ID0gbGVmdCArIHBhZGRpbmcgKyBvdmVybGF5V2lkdGg7XG5cbiAgaWYgKGxlZnRFZGdlT2Zmc2V0IDwgMCkge1xuICAgIHJldHVybiAtbGVmdEVkZ2VPZmZzZXQ7XG4gIH0gZWxzZSBpZiAocmlnaHRFZGdlT2Zmc2V0ID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICByZXR1cm4gY29udGFpbmVyV2lkdGggLSByaWdodEVkZ2VPZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb24ocGxhY2VtZW50LCBvdmVybGF5Tm9kZSwgdGFyZ2V0LCBjb250YWluZXIsIHBhZGRpbmcpIHtcbiAgdmFyIGNoaWxkT2Zmc2V0ID0gY29udGFpbmVyLnRhZ05hbWUgPT09ICdCT0RZJyA/ICgwLCBfb2Zmc2V0Mi5kZWZhdWx0KSh0YXJnZXQpIDogKDAsIF9wb3NpdGlvbjIuZGVmYXVsdCkodGFyZ2V0LCBjb250YWluZXIpO1xuXG4gIHZhciBfZ2V0T2Zmc2V0MiA9ICgwLCBfb2Zmc2V0Mi5kZWZhdWx0KShvdmVybGF5Tm9kZSksXG4gICAgICBvdmVybGF5SGVpZ2h0ID0gX2dldE9mZnNldDIuaGVpZ2h0LFxuICAgICAgb3ZlcmxheVdpZHRoID0gX2dldE9mZnNldDIud2lkdGg7XG5cbiAgdmFyIHBvc2l0aW9uTGVmdCA9IHZvaWQgMCxcbiAgICAgIHBvc2l0aW9uVG9wID0gdm9pZCAwLFxuICAgICAgYXJyb3dPZmZzZXRMZWZ0ID0gdm9pZCAwLFxuICAgICAgYXJyb3dPZmZzZXRUb3AgPSB2b2lkIDA7XG5cbiAgaWYgKHBsYWNlbWVudCA9PT0gJ2xlZnQnIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvc2l0aW9uVG9wID0gY2hpbGRPZmZzZXQudG9wICsgKGNoaWxkT2Zmc2V0LmhlaWdodCAtIG92ZXJsYXlIZWlnaHQpIC8gMjtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgICAgcG9zaXRpb25MZWZ0ID0gY2hpbGRPZmZzZXQubGVmdCAtIG92ZXJsYXlXaWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zaXRpb25MZWZ0ID0gY2hpbGRPZmZzZXQubGVmdCArIGNoaWxkT2Zmc2V0LndpZHRoO1xuICAgIH1cblxuICAgIHZhciB0b3BEZWx0YSA9IGdldFRvcERlbHRhKHBvc2l0aW9uVG9wLCBvdmVybGF5SGVpZ2h0LCBjb250YWluZXIsIHBhZGRpbmcpO1xuXG4gICAgcG9zaXRpb25Ub3AgKz0gdG9wRGVsdGE7XG4gICAgYXJyb3dPZmZzZXRUb3AgPSA1MCAqICgxIC0gMiAqIHRvcERlbHRhIC8gb3ZlcmxheUhlaWdodCkgKyAnJSc7XG4gICAgYXJyb3dPZmZzZXRMZWZ0ID0gdm9pZCAwO1xuICB9IGVsc2UgaWYgKHBsYWNlbWVudCA9PT0gJ3RvcCcgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvc2l0aW9uTGVmdCA9IGNoaWxkT2Zmc2V0LmxlZnQgKyAoY2hpbGRPZmZzZXQud2lkdGggLSBvdmVybGF5V2lkdGgpIC8gMjtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgICBwb3NpdGlvblRvcCA9IGNoaWxkT2Zmc2V0LnRvcCAtIG92ZXJsYXlIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uVG9wID0gY2hpbGRPZmZzZXQudG9wICsgY2hpbGRPZmZzZXQuaGVpZ2h0O1xuICAgIH1cblxuICAgIHZhciBsZWZ0RGVsdGEgPSBnZXRMZWZ0RGVsdGEocG9zaXRpb25MZWZ0LCBvdmVybGF5V2lkdGgsIGNvbnRhaW5lciwgcGFkZGluZyk7XG5cbiAgICBwb3NpdGlvbkxlZnQgKz0gbGVmdERlbHRhO1xuICAgIGFycm93T2Zmc2V0TGVmdCA9IDUwICogKDEgLSAyICogbGVmdERlbHRhIC8gb3ZlcmxheVdpZHRoKSArICclJztcbiAgICBhcnJvd09mZnNldFRvcCA9IHZvaWQgMDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGNPdmVybGF5UG9zaXRpb24oKTogTm8gc3VjaCBwbGFjZW1lbnQgb2YgXCInICsgcGxhY2VtZW50ICsgJ1wiIGZvdW5kLicpO1xuICB9XG5cbiAgcmV0dXJuIHsgcG9zaXRpb25MZWZ0OiBwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wOiBwb3NpdGlvblRvcCwgYXJyb3dPZmZzZXRMZWZ0OiBhcnJvd09mZnNldExlZnQsIGFycm93T2Zmc2V0VG9wOiBhcnJvd09mZnNldFRvcCB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0Q29udGFpbmVyO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyLCBkZWZhdWx0Q29udGFpbmVyKSB7XG4gIGNvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjtcbiAgcmV0dXJuIF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShjb250YWluZXIpIHx8IGRlZmF1bHRDb250YWluZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBpc092ZXJmbG93aW5nO1xuXG52YXIgX2lzV2luZG93ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvaXNXaW5kb3cnKTtcblxudmFyIF9pc1dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1dpbmRvdyk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0JvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknO1xufVxuXG5mdW5jdGlvbiBib2R5SXNPdmVyZmxvd2luZyhub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKG5vZGUpO1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdzIuZGVmYXVsdCkoZG9jKTtcbiAgdmFyIGZ1bGxXaWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuXG4gIC8vIFN1cHBvcnQ6IGllOCwgbm8gaW5uZXJXaWR0aFxuICBpZiAoIWZ1bGxXaWR0aCkge1xuICAgIHZhciBkb2N1bWVudEVsZW1lbnRSZWN0ID0gZG9jLmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBmdWxsV2lkdGggPSBkb2N1bWVudEVsZW1lbnRSZWN0LnJpZ2h0IC0gTWF0aC5hYnMoZG9jdW1lbnRFbGVtZW50UmVjdC5sZWZ0KTtcbiAgfVxuXG4gIHJldHVybiBkb2MuYm9keS5jbGllbnRXaWR0aCA8IGZ1bGxXaWR0aDtcbn1cblxuZnVuY3Rpb24gaXNPdmVyZmxvd2luZyhjb250YWluZXIpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cyLmRlZmF1bHQpKGNvbnRhaW5lcik7XG5cbiAgcmV0dXJuIHdpbiB8fCBpc0JvZHkoY29udGFpbmVyKSA/IGJvZHlJc092ZXJmbG93aW5nKGNvbnRhaW5lcikgOiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuYXJpYUhpZGRlbiA9IGFyaWFIaWRkZW47XG5leHBvcnRzLmhpZGVTaWJsaW5ncyA9IGhpZGVTaWJsaW5ncztcbmV4cG9ydHMuc2hvd1NpYmxpbmdzID0gc2hvd1NpYmxpbmdzO1xuXG52YXIgQkxBQ0tMSVNUID0gWyd0ZW1wbGF0ZScsICdzY3JpcHQnLCAnc3R5bGUnXTtcblxudmFyIGlzSGlkYWJsZSA9IGZ1bmN0aW9uIGlzSGlkYWJsZShfcmVmKSB7XG4gIHZhciBub2RlVHlwZSA9IF9yZWYubm9kZVR5cGUsXG4gICAgICB0YWdOYW1lID0gX3JlZi50YWdOYW1lO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgJiYgQkxBQ0tMSVNULmluZGV4T2YodGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG59O1xuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiBzaWJsaW5ncyhjb250YWluZXIsIG1vdW50LCBjYikge1xuICBtb3VudCA9IFtdLmNvbmNhdChtb3VudCk7XG5cbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobW91bnQuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgaXNIaWRhYmxlKG5vZGUpKSB7XG4gICAgICBjYihub2RlKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gYXJpYUhpZGRlbihzaG93LCBub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc2hvdykge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGlkZVNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlKSB7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKHRydWUsIG5vZGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1NpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlKSB7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKGZhbHNlLCBub2RlKTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIHJldHVybiAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShjb21wb25lbnRPckVsZW1lbnQpKTtcbn07XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gcmVhZE9ubHlQcm9wVHlwZShoYW5kbGVyLCBuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXByb3BzW2hhbmRsZXJdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJZb3UgaGF2ZSBwcm92aWRlZCBhIGBcIiArIHByb3BOYW1lICsgXCJgIHByb3AgdG8gYFwiICsgbmFtZSArIFwiYCBcIiArIChcIndpdGhvdXQgYW4gYFwiICsgaGFuZGxlciArIFwiYCBoYW5kbGVyIHByb3AuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIFwiKSArIChcIklmIHRoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYFwiICsgZGVmYXVsdEtleShwcm9wTmFtZSkgKyBcImAuIFwiKSArIChcIk90aGVyd2lzZSwgc2V0IGBcIiArIGhhbmRsZXIgKyBcImAuXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmNvbnRyb2xsZWRQcm9wVHlwZXMoY29udHJvbGxlZFZhbHVlcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHByb3BUeXBlcyA9IHt9O1xuICBPYmplY3Qua2V5cyhjb250cm9sbGVkVmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gYWRkIGRlZmF1bHQgcHJvcFR5cGVzIGZvciBmb2xrcyB0aGF0IHVzZSBydW50aW1lIGNoZWNrc1xuICAgIHByb3BUeXBlc1tkZWZhdWx0S2V5KHByb3ApXSA9IG5vb3A7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGhhbmRsZXIgPSBjb250cm9sbGVkVmFsdWVzW3Byb3BdO1xuICAgICAgISh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycgJiYgaGFuZGxlci50cmltKCkubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1VuY29udHJvbGxhYmxlIC0gWyVzXTogdGhlIHByb3AgYCVzYCBuZWVkcyBhIHZhbGlkIGhhbmRsZXIga2V5IG5hbWUgaW4gb3JkZXIgdG8gbWFrZSBpdCB1bmNvbnRyb2xsYWJsZScsIGRpc3BsYXlOYW1lLCBwcm9wKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBwcm9wVHlwZXNbcHJvcF0gPSByZWFkT25seVByb3BUeXBlKGhhbmRsZXIsIGRpc3BsYXlOYW1lKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvcFR5cGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcChwcm9wcywgcHJvcCkge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0S2V5KGtleSkge1xuICByZXR1cm4gJ2RlZmF1bHQnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbn1cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2FuQWNjZXB0UmVmKGNvbXBvbmVudCkge1xuICByZXR1cm4gISFjb21wb25lbnQgJiYgKHR5cGVvZiBjb21wb25lbnQgIT09ICdmdW5jdGlvbicgfHwgY29tcG9uZW50LnByb3RvdHlwZSAmJiBjb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cblxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIHVzZVVuY29udHJvbGxlZFByb3AocHJvcFZhbHVlLCBkZWZhdWx0VmFsdWUsIGhhbmRsZXIpIHtcbiAgdmFyIHdhc1Byb3BSZWYgPSB1c2VSZWYocHJvcFZhbHVlICE9PSB1bmRlZmluZWQpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShkZWZhdWx0VmFsdWUpLFxuICAgICAgc3RhdGVWYWx1ZSA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldFN0YXRlID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBpc1Byb3AgPSBwcm9wVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgdmFyIHdhc1Byb3AgPSB3YXNQcm9wUmVmLmN1cnJlbnQ7XG4gIHdhc1Byb3BSZWYuY3VycmVudCA9IGlzUHJvcDtcbiAgLyoqXG4gICAqIElmIGEgcHJvcCBzd2l0Y2hlcyBmcm9tIGNvbnRyb2xsZWQgdG8gVW5jb250cm9sbGVkXG4gICAqIHJlc2V0IGl0cyB2YWx1ZSB0byB0aGUgZGVmYXVsdFZhbHVlXG4gICAqL1xuXG4gIGlmICghaXNQcm9wICYmIHdhc1Byb3AgJiYgc3RhdGVWYWx1ZSAhPT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgc2V0U3RhdGUoZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBbaXNQcm9wID8gcHJvcFZhbHVlIDogc3RhdGVWYWx1ZSwgdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZXIpIGhhbmRsZXIuYXBwbHkodm9pZCAwLCBbdmFsdWVdLmNvbmNhdChhcmdzKSk7XG4gICAgc2V0U3RhdGUodmFsdWUpO1xuICB9LCBbaGFuZGxlcl0pXTtcbn1cblxuZXhwb3J0IHsgdXNlVW5jb250cm9sbGVkUHJvcCB9O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVW5jb250cm9sbGVkKHByb3BzLCBjb25maWcpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbmZpZykucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGZpZWxkTmFtZSkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3JlZiA9IHJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gX3JlZltVdGlscy5kZWZhdWx0S2V5KGZpZWxkTmFtZSldLFxuICAgICAgICBwcm9wc1ZhbHVlID0gX3JlZltmaWVsZE5hbWVdLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1V0aWxzLmRlZmF1bHRLZXkoZmllbGROYW1lKSwgZmllbGROYW1lXS5tYXAoX3RvUHJvcGVydHlLZXkpKTtcblxuICAgIHZhciBoYW5kbGVyTmFtZSA9IGNvbmZpZ1tmaWVsZE5hbWVdO1xuXG4gICAgdmFyIF91c2VVbmNvbnRyb2xsZWRQcm9wID0gdXNlVW5jb250cm9sbGVkUHJvcChwcm9wc1ZhbHVlLCBkZWZhdWx0VmFsdWUsIHByb3BzW2hhbmRsZXJOYW1lXSksXG4gICAgICAgIHZhbHVlID0gX3VzZVVuY29udHJvbGxlZFByb3BbMF0sXG4gICAgICAgIGhhbmRsZXIgPSBfdXNlVW5jb250cm9sbGVkUHJvcFsxXTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcmVzdCwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbZmllbGROYW1lXSA9IHZhbHVlLCBfZXh0ZW5kczJbaGFuZGxlck5hbWVdID0gaGFuZGxlciwgX2V4dGVuZHMyKSk7XG4gIH0sIHByb3BzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG52YXIgX2pzeEZpbGVOYW1lID0gXCIvVXNlcnMvanF1ZW5zZS9zcmMvdW5jb250cm9sbGFibGUvc3JjL3VuY29udHJvbGxhYmxlLmpzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuY29udHJvbGxhYmxlKENvbXBvbmVudCwgY29udHJvbGxlZFZhbHVlcywgbWV0aG9kcykge1xuICBpZiAobWV0aG9kcyA9PT0gdm9pZCAwKSB7XG4gICAgbWV0aG9kcyA9IFtdO1xuICB9XG5cbiAgdmFyIGRpc3BsYXlOYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICB2YXIgY2FuQWNjZXB0UmVmID0gVXRpbHMuY2FuQWNjZXB0UmVmKENvbXBvbmVudCk7XG4gIHZhciBjb250cm9sbGVkUHJvcHMgPSBPYmplY3Qua2V5cyhjb250cm9sbGVkVmFsdWVzKTtcbiAgdmFyIFBST1BTX1RPX09NSVQgPSBjb250cm9sbGVkUHJvcHMubWFwKFV0aWxzLmRlZmF1bHRLZXkpO1xuICAhKGNhbkFjY2VwdFJlZiB8fCAhbWV0aG9kcy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnW3VuY29udHJvbGxhYmxlXSBzdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgcGFzcyB0aHJvdWdoIG1ldGhvZHMgJyArICdiZWNhdXNlIHRoZXkgaGF2ZSBubyBhc3NvY2lhdGVkIGluc3RhbmNlcy4gQ2hlY2sgY29tcG9uZW50OiAnICsgZGlzcGxheU5hbWUgKyAnLCAnICsgJ2F0dGVtcHRpbmcgdG8gcGFzcyB0aHJvdWdoIG1ldGhvZHM6ICcgKyBtZXRob2RzLmpvaW4oJywgJykpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgVW5jb250cm9sbGVkQ29tcG9uZW50ID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFVuY29udHJvbGxlZENvbXBvbmVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBVbmNvbnRyb2xsZWRDb21wb25lbnQoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuaGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgY29udHJvbGxlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICAgIHZhciBoYW5kbGVyTmFtZSA9IGNvbnRyb2xsZWRWYWx1ZXNbcHJvcE5hbWVdO1xuXG4gICAgICAgIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHNbaGFuZGxlck5hbWVdKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgICAgIF90aGlzLl9ub3RpZnlpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAoX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcylbaGFuZGxlck5hbWVdLmFwcGx5KF90aGlzJHByb3BzLCBbdmFsdWVdLmNvbmNhdChhcmdzKSk7XG5cbiAgICAgICAgICAgIF90aGlzLl9ub3RpZnlpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV90aGlzLnVubW91bnRlZCkgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBfcmVmLnZhbHVlcztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlczogX2V4dGVuZHMoT2JqZWN0LmNyZWF0ZShudWxsKSwgdmFsdWVzLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwcm9wTmFtZV0gPSB2YWx1ZSwgX2V4dGVuZHMyKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlcnNbaGFuZGxlck5hbWVdID0gaGFuZGxlQ2hhbmdlO1xuICAgICAgfSk7XG4gICAgICBpZiAobWV0aG9kcy5sZW5ndGgpIF90aGlzLmF0dGFjaFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgX3RoaXMuaW5uZXIgPSByZWY7XG4gICAgICB9O1xuICAgICAgdmFyIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBjb250cm9sbGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gX3RoaXMucHJvcHNbVXRpbHMuZGVmYXVsdEtleShrZXkpXTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICBwcmV2UHJvcHM6IHt9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBVbmNvbnRyb2xsZWRDb21wb25lbnQucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgIC8vbGV0IHNldFN0YXRlIHRyaWdnZXIgdGhlIHVwZGF0ZVxuICAgICAgcmV0dXJuICF0aGlzLl9ub3RpZnlpbmc7XG4gICAgfTtcblxuICAgIFVuY29udHJvbGxlZENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIF9yZWYyKSB7XG4gICAgICB2YXIgdmFsdWVzID0gX3JlZjIudmFsdWVzLFxuICAgICAgICAgIHByZXZQcm9wcyA9IF9yZWYyLnByZXZQcm9wcztcbiAgICAgIHZhciBuZXh0U3RhdGUgPSB7XG4gICAgICAgIHZhbHVlczogX2V4dGVuZHMoT2JqZWN0LmNyZWF0ZShudWxsKSwgdmFsdWVzKSxcbiAgICAgICAgcHJldlByb3BzOiB7fVxuICAgICAgfTtcbiAgICAgIGNvbnRyb2xsZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgcHJvcCBzd2l0Y2hlcyBmcm9tIGNvbnRyb2xsZWQgdG8gVW5jb250cm9sbGVkXG4gICAgICAgICAqIHJlc2V0IGl0cyB2YWx1ZSB0byB0aGUgZGVmYXVsdFZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICBuZXh0U3RhdGUucHJldlByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuXG4gICAgICAgIGlmICghVXRpbHMuaXNQcm9wKHByb3BzLCBrZXkpICYmIFV0aWxzLmlzUHJvcChwcmV2UHJvcHMsIGtleSkpIHtcbiAgICAgICAgICBuZXh0U3RhdGUudmFsdWVzW2tleV0gPSBwcm9wc1tVdGlscy5kZWZhdWx0S2V5KGtleSldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bm1vdW50ZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMyLmlubmVyUmVmLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJpbm5lclJlZlwiXSk7XG5cbiAgICAgIFBST1BTX1RPX09NSVQuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBkZWxldGUgcHJvcHNbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuICAgICAgY29udHJvbGxlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICAgIHZhciBwcm9wVmFsdWUgPSBfdGhpczIucHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICBuZXdQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCA/IHByb3BWYWx1ZSA6IF90aGlzMi5zdGF0ZS52YWx1ZXNbcHJvcE5hbWVdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywgbmV3UHJvcHMsIHRoaXMuaGFuZGxlcnMsIHtcbiAgICAgICAgcmVmOiBpbm5lclJlZiB8fCB0aGlzLmF0dGFjaFJlZlxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gVW5jb250cm9sbGVkQ29tcG9uZW50O1xuICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgcG9seWZpbGwoVW5jb250cm9sbGVkQ29tcG9uZW50KTtcbiAgVW5jb250cm9sbGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJVbmNvbnRyb2xsZWQoXCIgKyBkaXNwbGF5TmFtZSArIFwiKVwiO1xuICBVbmNvbnRyb2xsZWRDb21wb25lbnQucHJvcFR5cGVzID0gX2V4dGVuZHMoe1xuICAgIGlubmVyUmVmOiBmdW5jdGlvbiBpbm5lclJlZigpIHt9XG4gIH0sIFV0aWxzLnVuY29udHJvbGxlZFByb3BUeXBlcyhjb250cm9sbGVkVmFsdWVzLCBkaXNwbGF5TmFtZSkpO1xuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgIFVuY29udHJvbGxlZENvbXBvbmVudC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uICRwcm94aWVkTWV0aG9kKCkge1xuICAgICAgdmFyIF90aGlzJGlubmVyO1xuXG4gICAgICByZXR1cm4gKF90aGlzJGlubmVyID0gdGhpcy5pbm5lcilbbWV0aG9kXS5hcHBseShfdGhpcyRpbm5lciwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KTtcbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBVbmNvbnRyb2xsZWRDb21wb25lbnQ7XG5cbiAgaWYgKFJlYWN0LmZvcndhcmRSZWYpIHtcbiAgICBXcmFwcGVkQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVW5jb250cm9sbGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgaW5uZXJSZWY6IHJlZixcbiAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IDEyOFxuICAgICAgICB9LFxuICAgICAgICBfX3NlbGY6IHRoaXNcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICBXcmFwcGVkQ29tcG9uZW50LnByb3BUeXBlcyA9IFVuY29udHJvbGxlZENvbXBvbmVudC5wcm9wVHlwZXM7XG4gIH1cblxuICBXcmFwcGVkQ29tcG9uZW50LkNvbnRyb2xsZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIC8qKlxuICAgKiB1c2VmdWwgd2hlbiB3cmFwcGluZyBhIENvbXBvbmVudCBhbmQgeW91IHdhbnQgdG8gY29udHJvbFxuICAgKiBldmVyeXRoaW5nXG4gICAqL1xuXG4gIFdyYXBwZWRDb21wb25lbnQuZGVmZXJDb250cm9sVG8gPSBmdW5jdGlvbiAobmV3Q29tcG9uZW50LCBhZGRpdGlvbnMsIG5leHRNZXRob2RzKSB7XG4gICAgaWYgKGFkZGl0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBhZGRpdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5jb250cm9sbGFibGUobmV3Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgY29udHJvbGxlZFZhbHVlcywgYWRkaXRpb25zKSwgbmV4dE1ldGhvZHMpO1xuICB9O1xuXG4gIHJldHVybiBXcmFwcGVkQ29tcG9uZW50O1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvZiIsIlRBRyIsIkFSRyIsImFyZ3VtZW50cyIsIml0IiwiTyIsIlQiLCJCIiwidW5kZWZpbmVkIiwia2V5IiwiZSIsInRyeUdldCIsIk9iamVjdCIsImNhbGxlZSIsIiRkZWZpbmVQcm9wZXJ0eSIsImNyZWF0ZURlc2MiLCJvYmplY3QiLCJpbmRleCIsInZhbHVlIiwiZiIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwiQXJyYXlQcm90byIsIkFycmF5IiwicHJvdG90eXBlIiwiaXNBcnJheSIsImFyZyIsImFuT2JqZWN0IiwiaXRlcmF0b3IiLCJmbiIsImVudHJpZXMiLCJyZXQiLCJjYWxsIiwiY3JlYXRlIiwiZGVzY3JpcHRvciIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzIiwiQ29uc3RydWN0b3IiLCJOQU1FIiwibmV4dCIsIkxJQlJBUlkiLCIkZXhwb3J0IiwicmVkZWZpbmUiLCJoaWRlIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsInJldHVyblRoaXMiLCJCYXNlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJnZXRNZXRob2QiLCJraW5kIiwicHJvdG8iLCJ2YWx1ZXMiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsIm5hbWUiLCJQIiwiRiIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwiZnJvbSIsImV4ZWMiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCJpdGVyIiwiZG9uZSIsImhhcyIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImNvbnN0cnVjdG9yIiwiJHBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsImhleCIsInBhcnNlSW50Iiwic3RyIiwicmFkaXgiLCJzdHJpbmciLCJTdHJpbmciLCJ0ZXN0IiwiZGVmIiwidGFnIiwic3RhdCIsImNvbmZpZ3VyYWJsZSIsInRvSW50ZWdlciIsImRlZmluZWQiLCJUT19TVFJJTkciLCJ0aGF0IiwicG9zIiwiYSIsImIiLCJzIiwiaSIsImwiLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiY2hhckF0Iiwic2xpY2UiLCJmYWlscyIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiS0VZIiwiQUxJQVMiLCJleHAiLCJGT1JDRSIsInRyaW0iLCJUWVBFIiwicmVwbGFjZSIsInN0b3JlIiwidWlkIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsImNsYXNzb2YiLCJjdHgiLCJpc0FycmF5SXRlciIsInRvTGVuZ3RoIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyRm4iLCJTIiwiYXJyYXlMaWtlIiwicmVzdWx0Iiwic3RlcCIsIkMiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwiRyIsIiRhdCIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsInBvaW50IiwiJHZhbHVlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYWN0aXZlRWxlbWVudCIsImRvYyIsIl9vd25lckRvY3VtZW50IiwiZGVmYXVsdCIsImFkZENsYXNzIiwiZWxlbWVudCIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFkZCIsIl9oYXNDbGFzcyIsInNldEF0dHJpYnV0ZSIsImJhc2VWYWwiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiaW5kZXhPZiIsIl9hZGRDbGFzcyIsIl9yZW1vdmVDbGFzcyIsInJlbW92ZUNsYXNzIiwiX2RlZmF1bHQiLCJyZXBsYWNlQ2xhc3NOYW1lIiwib3JpZ0NsYXNzIiwiY2xhc3NUb1JlbW92ZSIsInJlbW92ZSIsImZpbHRlckV2ZW50cyIsInNlbGVjdG9yIiwiaGFuZGxlciIsImZpbHRlckhhbmRsZXIiLCJ0b3AiLCJjdXJyZW50VGFyZ2V0IiwidGFyZ2V0IiwiX3F1ZXJ5U2VsZWN0b3JBbGwiLCJzb21lIiwibWF0Y2giLCJfY29udGFpbnMiLCJfb24iLCJfb2ZmIiwiX2ZpbHRlciIsIl9saXN0ZW4iLCJvbiIsIm9mZiIsImZpbHRlciIsImxpc3RlbiIsIl9pbkRPTSIsIm5vZGUiLCJldmVudE5hbWUiLCJjYXB0dXJlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJ3aW5kb3ciLCJldmVudCIsInNyY0VsZW1lbnQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiYXBwbHkiLCJvYmoiLCJvd25lckRvY3VtZW50IiwiY29udGV4dCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZmFsbGJhY2siLCJwYXJlbnROb2RlIiwiZ2V0V2luZG93Iiwibm9kZVR5cGUiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIm9mZnNldCIsIndpbiIsIl9pc1dpbmRvdyIsImRvY0VsZW0iLCJkb2N1bWVudEVsZW1lbnQiLCJib3giLCJsZWZ0IiwiaGVpZ2h0Iiwid2lkdGgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIm9mZnNldFBhcmVudCIsIm5vZGVOYW1lIiwiX3N0eWxlIiwidG9Mb3dlckNhc2UiLCJwb3NpdGlvbiIsInBhcmVudE9mZnNldCIsIl9vZmZzZXRQYXJlbnQiLCJfb2Zmc2V0IiwiX3Njcm9sbFRvcCIsIl9zY3JvbGxMZWZ0IiwiX2V4dGVuZHMyIiwicXNhIiwiZm91bmQiLCJtYXliZUlEIiwibWF5YmVDbGFzcyIsIm5hbWVPbmx5Iiwic2ltcGxlU2VsZWN0b3JSRSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInRvQXJyYXkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJGdW5jdGlvbiIsImJpbmQiLCJ2YWwiLCJzY3JvbGxUbyIsIl9nZXRDb21wdXRlZFN0eWxlIiwiVHlwZUVycm9yIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJwcm9wIiwic3R5bGUiLCJfY2FtZWxpemVTdHlsZSIsImN1cnJlbnQiLCJjdXJyZW50U3R5bGUiLCJybnVtbm9ucHgiLCJycG9zaXRpb24iLCJydW5TdHlsZSIsInJ1bnRpbWVTdHlsZSIsInJzTGVmdCIsInBpeGVsTGVmdCIsInByb3BlcnR5IiwiY3NzIiwidHJhbnNmb3JtcyIsInByb3BzIiwiX2dldENvbXB1dGVkU3R5bGUyIiwiX2h5cGhlbmF0ZVN0eWxlIiwiZm9yRWFjaCIsIl9pc1RyYW5zZm9ybSIsIl9yZW1vdmVTdHlsZSIsIl9wcm9wZXJ0aWVzIiwidHJhbnNmb3JtIiwiY3NzVGV4dCIsInJlbW92ZVN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbkVuZCIsImR1cmF0aW9uIiwiYmFja3VwIiwiZmFrZUV2ZW50IiwiY2xlYXJUaW1lb3V0IiwiZW5kIiwicGFyc2VEdXJhdGlvbiIsInNldFRpbWVvdXQiLCJfcGFyc2VEdXJhdGlvbiIsIm11bHQiLCJwYXJzZUZsb2F0IiwiX2VuZCIsInByb3BlcnRpZXMiLCJpc1RyYW5zZm9ybSIsInN1cHBvcnRlZFRyYW5zZm9ybXMiLCJhbmltYXRpb25FbmQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvblRpbWluZyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uVGltaW5nIiwidHJhbnNpdGlvblByb3BlcnR5IiwicHJlZml4IiwiX2dldFRyYW5zaXRpb25Qcm9wZXJ0IiwiZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMiLCJjcmVhdGVFbGVtZW50IiwidmVuZG9yTWFwIiwiTW96IiwiV2Via2l0IiwibXMiLCJ2ZW5kb3JzIiwidmVuZG9yIiwidGltaW5nIiwiZGVsYXkiLCJjYW1lbGl6ZSIsInJIeXBoZW4iLCJfIiwiY2hyIiwidG9VcHBlckNhc2UiLCJjYW1lbGl6ZVN0eWxlTmFtZSIsIl9jYW1lbGl6ZSIsIm1zUGF0dGVybiIsImh5cGhlbmF0ZSIsInJVcHBlciIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsIl9oeXBoZW5hdGUiLCJzY3JvbGxiYXJTaXplIiwicmVjYWxjIiwic2l6ZSIsInNjcm9sbERpdiIsIm92ZXJmbG93IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpZW50V2lkdGgiLCJyZW1vdmVDaGlsZCIsImtleUNvZGUiLCJzZWFyY2hJbnB1dCIsImhhc0tleUNvZGUiLCJ3aGljaCIsImNoYXJDb2RlIiwibmFtZXMiLCJmb3VuZE5hbWVkS2V5Iiwic2VhcmNoIiwiY29kZXMiLCJhbGlhc2VzIiwiaXNFdmVudEtleSIsIm5hbWVPckNvZGUiLCJjb2RlIiwiZnJvbUNoYXJDb2RlIiwidGl0bGUiLCJhbGlhcyIsImRlZmluZVByb3BlcnR5IiwiYWxsIiwiX2xlbiIsInZhbGlkYXRvcnMiLCJfa2V5IiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiIsImFsbFByb3BUeXBlcyIsIl9sZW4yIiwiYXJncyIsIl9rZXkyIiwiZXJyb3IiLCJ2YWxpZGF0b3IiLCJfdHlwZW9mIiwiX3JlYWN0MiIsInZhbGlkYXRlIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsImlzVmFsaWRFbGVtZW50IiwiRXJyb3IiLCJyZW5kZXIiLCJkZXByZWNhdGVkIiwiX3dhcm5pbmcyIiwid2FybmVkIiwicmVhc29uIiwiY29tcG9uZW50TmFtZVNhZmUiLCJwcm9wRnVsbE5hbWVTYWZlIiwibWVzc2FnZUtleSIsImNvbmNhdCIsIl9yZXNldFdhcm5lZCIsImlzUmVxdWlyZWRGb3JBMTF5IiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIlNpemUiLCJTSVpFX01BUCIsImxhcmdlIiwibWVkaXVtIiwic21hbGwiLCJ4c21hbGwiLCJsZyIsIm1kIiwic20iLCJ4cyIsIkRFVklDRV9TSVpFUyIsIlN0YXRlIiwiU1VDQ0VTUyIsIldBUk5JTkciLCJEQU5HRVIiLCJJTkZPIiwiU3R5bGUiLCJjdXJyeSIsIkNvbXBvbmVudCIsInZhcmlhbnQiLCJic0NsYXNzIiwiZGVmYXVsdENsYXNzIiwicHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiYnNTdHlsZXMiLCJzdHlsZXMiLCJkZWZhdWx0U3R5bGUiLCJleGlzdGluZyIsIlNUWUxFUyIsInB1c2giLCJfdmFsdWVzIiwiYnNTdHlsZSIsImJzU2l6ZXMiLCJzaXplcyIsImRlZmF1bHRTaXplIiwiU0laRVMiLCJtYXBwZWRTaXplIiwiYnNTaXplIiwiZ2V0Q2xhc3NTZXQiLCJfY2xhc3NlcyIsImNsYXNzZXMiLCJnZXRCc1Byb3BzIiwiYnNSb2xlIiwiaXNCc1Byb3AiLCJzcGxpdEJzUHJvcHMiLCJlbGVtZW50UHJvcHMiLCJfcmVmIiwic3BsaXRCc1Byb3BzQW5kT21pdCIsIm9taXR0ZWRQcm9wTmFtZXMiLCJpc09taXR0ZWRQcm9wIiwiX3JlZjIiLCJhZGRTdHlsZSIsInN0eWxlVmFyaWFudCIsIl9jdXJyeSIsIm1hcCIsImNoaWxkcmVuIiwiZnVuYyIsImNoaWxkIiwiY291bnQiLCJmaW5kIiwiZXZlcnkiLCJpZFByb3BUeXBlIiwiYWNjb3JkaW9uIiwiYWN0aXZlS2V5Iiwib25TZWxlY3QiLCJyb2xlIiwiZ2VuZXJhdGVDaGlsZElkIiwiaWQiLCJnZW5lcmF0ZWRJZCIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGJzX3BhbmVsR3JvdXAiLCJnZXRJZCIsImhlYWRlclJvbGUiLCJwYW5lbFJvbGUiLCJvblRvZ2dsZSIsIlBhbmVsR3JvdXAiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RoaXMiLCJoYW5kbGVTZWxlY3QiLCJleHBhbmRlZCIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsIl90aGlzJHByb3BzIiwidHlwZSIsIl90aGlzJHByb3BzMiIsIl9zcGxpdEJzUHJvcHNBbmRPbWl0IiwiYnNQcm9wcyIsIlZhbGlkQ29tcG9uZW50Q2hpbGRyZW4iLCJjbG9uZUVsZW1lbnQiLCJBY2NvcmRpb24iLCJsYWJlbCIsImlzUmVxdWlyZWQiLCJvbkNsaWNrIiwiQ2xvc2VCdXR0b24iLCJvbkRpc21pc3MiLCJjbG9zZUxhYmVsIiwiQWxlcnQiLCJfc3BsaXRCc1Byb3BzIiwiZGlzbWlzc2FibGUiLCJwdWxsUmlnaHQiLCJCYWRnZSIsImhhc0NvbnRlbnQiLCJoaWRkZW4iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJyZWR1Y2UiLCJhY2MiLCJjaGFpbmVkRnVuY3Rpb24iLCJocmVmIiwib25LZXlEb3duIiwiZGlzYWJsZWQiLCJ0YWJJbmRleCIsImNvbXBvbmVudENsYXNzIiwiaXNUcml2aWFsSHJlZiIsIlNhZmVBbmNob3IiLCJoYW5kbGVDbGljayIsImhhbmRsZUtleURvd24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvaW50ZXJFdmVudHMiLCJhY3RpdmUiLCJCcmVhZGNydW1iSXRlbSIsImxpbmtQcm9wcyIsIkJyZWFkY3J1bWIiLCJJdGVtIiwiYmxvY2siLCJCdXR0b24iLCJyZW5kZXJBbmNob3IiLCJyZW5kZXJCdXR0b24iLCJmdWxsQ2xhc3NOYW1lIiwidmVydGljYWwiLCJqdXN0aWZpZWQiLCJCdXR0b25Hcm91cCIsIkJ1dHRvblRvb2xiYXIiLCJDYXJvdXNlbENhcHRpb24iLCJkaXJlY3Rpb24iLCJvbkFuaW1hdGVPdXRFbmQiLCJhbmltYXRlSW4iLCJhbmltYXRlT3V0IiwiQ2Fyb3VzZWxJdGVtIiwiaGFuZGxlQW5pbWF0ZU91dEVuZCIsInN0YXRlIiwiaXNVbm1vdW50ZWQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiX3RoaXMyIiwicHJldkFjdGl2ZSIsInRyYW5zaXRpb24iLCJzdGFydEFuaW1hdGlvbiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiaXRlbSIsImdseXBoIiwiR2x5cGhpY29uIiwic2xpZGUiLCJpbmRpY2F0b3JzIiwiaW50ZXJ2YWwiLCJjb250cm9scyIsInBhdXNlT25Ib3ZlciIsIndyYXAiLCJvblNsaWRlRW5kIiwiYWN0aXZlSW5kZXgiLCJkZWZhdWx0QWN0aXZlSW5kZXgiLCJwcmV2SWNvbiIsInByZXZMYWJlbCIsIm5leHRJY29uIiwibmV4dExhYmVsIiwiQ2Fyb3VzZWwiLCJoYW5kbGVNb3VzZU92ZXIiLCJoYW5kbGVNb3VzZU91dCIsImhhbmRsZVByZXYiLCJoYW5kbGVOZXh0IiwiaGFuZGxlSXRlbUFuaW1hdGVPdXRFbmQiLCJwcmV2aW91c0FjdGl2ZUluZGV4IiwiY29tcG9uZW50RGlkTW91bnQiLCJ3YWl0Rm9yTmV4dCIsImdldEFjdGl2ZUluZGV4IiwidGltZW91dCIsImdldERpcmVjdGlvbiIsImFjdGl2ZUluZGV4UHJvcCIsInByZXZJbmRleCIsImlzUGF1c2VkIiwicGxheSIsInBhdXNlIiwic2VsZWN0IiwicGVyc2lzdCIsInJlbmRlckNvbnRyb2xzIiwiY29udHJvbENsYXNzTmFtZSIsInJlbmRlckluZGljYXRvcnMiLCJfdGhpczMiLCJfdGhpczQiLCJfdGhpcyRzdGF0ZSIsIm9uTW91c2VPdmVyIiwib25Nb3VzZU91dCIsInByZXZpb3VzQWN0aXZlIiwiQ2FwdGlvbiIsImlubGluZSIsInZhbGlkYXRpb25TdGF0ZSIsImlucHV0UmVmIiwiQ2hlY2tib3giLCJpbnB1dCIsInJlZiIsIl9jbGFzc2VzMiIsImNhcGl0YWxpemUiLCJ2aXNpYmxlWHNCbG9jayIsInZpc2libGVTbUJsb2NrIiwidmlzaWJsZU1kQmxvY2siLCJ2aXNpYmxlTGdCbG9jayIsIkNsZWFyZml4IiwiaHRtbEZvciIsInNyT25seSIsImNvbnRleHRUeXBlcyIsIiRic19mb3JtR3JvdXAiLCJDb250cm9sTGFiZWwiLCJmb3JtR3JvdXAiLCJjb250cm9sSWQiLCJfdGhpcyRwcm9wcyRodG1sRm9yIiwieHNIaWRkZW4iLCJzbUhpZGRlbiIsIm1kSGlkZGVuIiwibGdIaWRkZW4iLCJ4c09mZnNldCIsInNtT2Zmc2V0IiwibWRPZmZzZXQiLCJsZ09mZnNldCIsInhzUHVzaCIsInNtUHVzaCIsIm1kUHVzaCIsImxnUHVzaCIsInhzUHVsbCIsInNtUHVsbCIsIm1kUHVsbCIsImxnUHVsbCIsIkNvbCIsInBvcFByb3AiLCJwcm9wU3VmZml4IiwibW9kaWZpZXIiLCJoaWRkZW5Qcm9wTmFtZSIsIl9jb2xsYXBzZVN0eWxlcyIsIk1BUkdJTlMiLCJjb2xsYXBzZVN0eWxlcyIsImluIiwibW91bnRPbkVudGVyIiwidW5tb3VudE9uRXhpdCIsImFwcGVhciIsIm9uRW50ZXIiLCJvbkVudGVyaW5nIiwib25FbnRlcmVkIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJkaW1lbnNpb24iLCJnZXREaW1lbnNpb25WYWx1ZSIsImVsZW0iLCJtYXJnaW5zIiwiQ29sbGFwc2UiLCJoYW5kbGVFbnRlciIsImdldERpbWVuc2lvbiIsImhhbmRsZUVudGVyaW5nIiwiX2dldFNjcm9sbERpbWVuc2lvblZhbHVlIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXQiLCJ0cmlnZ2VyQnJvd3NlclJlZmxvdyIsImhhbmRsZUV4aXRpbmciLCJUcmFuc2l0aW9uIiwiaW5uZXJQcm9wcyIsIm9wZW4iLCJvbkNsb3NlIiwibGFiZWxsZWRCeSIsInJvb3RDbG9zZUV2ZW50IiwiRHJvcGRvd25NZW51IiwiaGFuZGxlUm9vdENsb3NlIiwiZ2V0Rm9jdXNhYmxlTWVudUl0ZW1zIiwiZ2V0SXRlbXNBbmRBY3RpdmVJbmRleCIsIml0ZW1zIiwiZm9jdXNOZXh0IiwiX3RoaXMkZ2V0SXRlbXNBbmRBY3RpIiwiZm9jdXMiLCJmb2N1c1ByZXZpb3VzIiwiX3RoaXMkZ2V0SXRlbXNBbmRBY3RpMiIsImRvd24iLCJ1cCIsImVzYyIsInRhYiIsIm9uUm9vdENsb3NlIiwibm9DYXJldCIsInVzZUFuY2hvciIsIkRyb3Bkb3duVG9nZ2xlIiwidXNlQ2FyZXQiLCJUT0dHTEVfUk9MRSIsIk1FTlVfUk9MRSIsImRyb3B1cCIsInJlcXVpcmVkUm9sZXMiLCJyb2xlcyIsImNvbXBvbmVudCIsIm1pc3NpbmciLCJqb2luIiwiZXhjbHVzaXZlUm9sZXMiLCJfbGVuMyIsIl9rZXkzIiwiZHVwbGljYXRlIiwiZGVmYXVsdE9wZW4iLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJEcm9wZG93biIsImhhbmRsZUNsb3NlIiwiX2ZvY3VzSW5Ecm9wZG93biIsImxhc3RPcGVuRXZlbnRUeXBlIiwiZm9jdXNOZXh0T25PcGVuIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJtZW51IiwicHJldk9wZW4iLCJ0b2dnbGUiLCJ0b2dnbGVPcGVuIiwiZXZlbnREZXRhaWxzIiwicmVuZGVyTWVudSIsImMiLCJyZW5kZXJUb2dnbGUiLCJVbmNvbnRyb2xsZWREcm9wZG93biIsIlRvZ2dsZSIsIk1lbnUiLCJzcGxpdENvbXBvbmVudFByb3BzIiwiY29tcG9uZW50UHJvcFR5cGVzIiwicGFyZW50UHJvcHMiLCJjaGlsZFByb3BzIiwiRHJvcGRvd25CdXR0b24iLCJfc3BsaXRDb21wb25lbnRQcm9wcyIsIkNvbnRyb2xsZWRDb21wb25lbnQiLCJkcm9wZG93blByb3BzIiwidG9nZ2xlUHJvcHMiLCJfZmFkZVN0eWxlcyIsImZhZGVTdHlsZXMiLCJGYWRlIiwic3RhdHVzIiwiaG9yaXpvbnRhbCIsIkZvcm0iLCJGb3JtQ29udHJvbEZlZWRiYWNrIiwiZ2V0R2x5cGgiLCJyZW5kZXJEZWZhdWx0RmVlZGJhY2siLCJvbmx5IiwiRm9ybUNvbnRyb2xTdGF0aWMiLCJGb3JtQ29udHJvbCIsIl90aGlzJHByb3BzJGlkIiwiRmVlZGJhY2siLCJTdGF0aWMiLCJGb3JtR3JvdXAiLCJoYXNGZWVkYmFjayIsImZsdWlkIiwiR3JpZCIsIkhlbHBCbG9jayIsInJlc3BvbnNpdmUiLCJyb3VuZGVkIiwiY2lyY2xlIiwidGh1bWJuYWlsIiwiSW1hZ2UiLCJJbnB1dEdyb3VwQWRkb24iLCJJbnB1dEdyb3VwQnV0dG9uIiwiSW5wdXRHcm91cCIsIkFkZG9uIiwiSnVtYm90cm9uIiwiTGFiZWwiLCJoZWFkZXIiLCJsaXN0SXRlbSIsIkxpc3RHcm91cEl0ZW0iLCJyZW5kZXJIZWFkZXIiLCJoZWFkaW5nQ2xhc3NOYW1lIiwiTGlzdEdyb3VwIiwiX3RoaXMkcHJvcHMkY29tcG9uZW50IiwiZ2V0RGVmYXVsdENvbXBvbmVudCIsInVzZUxpc3RJdGVtIiwiYWxpZ24iLCJNZWRpYUJvZHkiLCJNZWRpYUhlYWRpbmciLCJNZWRpYUxlZnQiLCJNZWRpYUxpc3QiLCJNZWRpYUxpc3RJdGVtIiwiTWVkaWFSaWdodCIsIk1lZGlhIiwiSGVhZGluZyIsIkJvZHkiLCJMZWZ0IiwiUmlnaHQiLCJMaXN0IiwiTGlzdEl0ZW0iLCJkaXZpZGVyIiwiZXZlbnRLZXkiLCJNZW51SXRlbSIsIk1vZGFsQm9keSIsImRpYWxvZ0NsYXNzTmFtZSIsIk1vZGFsRGlhbG9nIiwib25Nb3VzZURvd25EaWFsb2ciLCJic0NsYXNzTmFtZSIsIm1vZGFsU3R5bGUiLCJkaXNwbGF5IiwiZGlhbG9nQ2xhc3NlcyIsIm9uTW91c2VEb3duIiwiTW9kYWxGb290ZXIiLCJjbG9zZUJ1dHRvbiIsIm9uSGlkZSIsIiRic19tb2RhbCIsIk1vZGFsSGVhZGVyIiwibW9kYWwiLCJNb2RhbFRpdGxlIiwiYmFja2Ryb3AiLCJiYWNrZHJvcENsYXNzTmFtZSIsImtleWJvYXJkIiwiYW5pbWF0aW9uIiwiZGlhbG9nQ29tcG9uZW50Q2xhc3MiLCJhdXRvRm9jdXMiLCJlbmZvcmNlRm9jdXMiLCJyZXN0b3JlRm9jdXMiLCJzaG93IiwiY29udGFpbmVyIiwiRGlhbG9nVHJhbnNpdGlvbiIsIk1vZGFsIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsIkJhY2tkcm9wVHJhbnNpdGlvbiIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJoYW5kbGVEaWFsb2dCYWNrZHJvcE1vdXNlRG93biIsIl93YWl0aW5nRm9yTW91c2VVcCIsImhhbmRsZU1vdXNlVXAiLCJldiIsImRpYWxvZ05vZGUiLCJfbW9kYWwiLCJnZXREaWFsb2dFbGVtZW50IiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJoYW5kbGVFeGl0ZWQiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJoYW5kbGVEaWFsb2dDbGljayIsInNldE1vZGFsUmVmIiwiZXZlbnRzIiwidXBkYXRlU3R5bGUiLCJkaWFsb2dIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJib2R5SXNPdmVyZmxvd2luZyIsIm1vZGFsSXNPdmVyZmxvd2luZyIsImNsaWVudEhlaWdodCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdMZWZ0IiwiRGlhbG9nIiwiYmFzZU1vZGFsUHJvcHMiLCJkaWFsb2dQcm9wcyIsImluQ2xhc3NOYW1lIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwiYmFja2Ryb3BUcmFuc2l0aW9uIiwib25Nb3VzZVVwIiwiSGVhZGVyIiwiVGl0bGUiLCJGb290ZXIiLCJhY3RpdmVIcmVmIiwic3RhY2tlZCIsIm5hdmJhciIsInB1bGxMZWZ0IiwiJGJzX25hdmJhciIsIiRic190YWJDb250YWluZXIiLCJnZXRUYWJJZCIsImdldFBhbmVJZCIsIk5hdiIsIl9uZWVkc1JlZm9jdXMiLCJfdGhpcyRnZXRBY3RpdmVQcm9wcyIsImdldEFjdGl2ZVByb3BzIiwiYWN0aXZlQ2hpbGQiLCJpc0FjdGl2ZSIsImFjdGl2ZUNoaWxkSW5kZXgiLCJjaGlsZE5vZGVzIiwiYWN0aXZlTm9kZSIsImZpcnN0Q2hpbGQiLCJ0YWJDb250YWluZXIiLCJnZXROZXh0QWN0aXZlQ2hpbGQiLCJ2YWxpZENoaWxkcmVuIiwiX3RoaXMkZ2V0QWN0aXZlUHJvcHMyIiwibmV4dEluZGV4IiwibnVtVmFsaWRDaGlsZHJlbiIsImdldFRhYlByb3BzIiwibmF2Um9sZSIsIl9jaGlsZCRwcm9wcyIsImhhbmRsZVRhYktleURvd24iLCJuZXh0QWN0aXZlQ2hpbGQiLCJyaWdodCIsInByb3BzUm9sZSIsInByb3BzTmF2YmFyIiwiX3RoaXMkZ2V0QWN0aXZlUHJvcHMzIiwicHVsbExlZnRDbGFzc05hbWUiLCJwdWxsUmlnaHRDbGFzc05hbWUiLCJuYXZiYXJQcm9wcyIsImNoaWxkT25TZWxlY3QiLCJOYXZiYXJCcmFuZCIsIk5hdmJhckNvbGxhcHNlIiwiTmF2YmFySGVhZGVyIiwiTmF2YmFyVG9nZ2xlIiwiYnV0dG9uUHJvcHMiLCJmaXhlZFRvcCIsImZpeGVkQm90dG9tIiwic3RhdGljVG9wIiwiaW52ZXJzZSIsImNvbGxhcHNlT25TZWxlY3QiLCJOYXZiYXIiLCJoYW5kbGVUb2dnbGUiLCJoYW5kbGVDb2xsYXBzZSIsIl90aGlzJHByb3BzMyIsIl90aGlzJHByb3BzNCIsIlVuY29udHJvbGxhYmxlTmF2YmFyIiwiY3JlYXRlU2ltcGxlV3JhcHBlciIsInN1ZmZpeCIsImRpc3BsYXlOYW1lIiwiV3JhcHBlciIsIl9yZWYyJCRic19uYXZiYXIiLCJCcmFuZCIsIlRleHQiLCJMaW5rIiwiTmF2RHJvcGRvd24iLCJOYXZJdGVtIiwicm9vdENsb3NlIiwicGxhY2VtZW50IiwiT3ZlcmxheSIsImlzT25lT2YiLCJvbmUiLCJvZiIsInRyaWdnZXJUeXBlIiwidHJpZ2dlciIsImRlbGF5U2hvdyIsImRlbGF5SGlkZSIsImRlZmF1bHRPdmVybGF5U2hvd24iLCJvdmVybGF5Iiwib25CbHVyIiwib25Gb2N1cyIsIk92ZXJsYXlUcmlnZ2VyIiwiaGFuZGxlRGVsYXllZFNob3ciLCJoYW5kbGVEZWxheWVkSGlkZSIsImhhbmRsZUhpZGUiLCJoYW5kbGVNb3VzZU92ZXJPdXQiLCJfbW91bnROb2RlIiwicmVuZGVyT3ZlcmxheSIsIl9ob3ZlclNob3dEZWxheSIsIl9ob3ZlckhpZGVEZWxheSIsInJlbGF0ZWROYXRpdmUiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsIm5hdGl2ZUV2ZW50IiwibWFrZU92ZXJsYXkiLCJfb3ZlcmxheSIsInRyaWdnZXJQcm9wcyIsIlBhZ2VIZWFkZXIiLCJwcmV2aW91cyIsIlBhZ2VySXRlbSIsImRlcHJlY2F0aW9uV2FybmluZyIsIm9sZG5hbWUiLCJuZXduYW1lIiwibGluayIsIm1lc3NhZ2UiLCJ3cmFwcGVyIiwiX0NvbXBvbmVudCIsIkRlcHJlY2F0ZWRDb21wb25lbnQiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiX0NvbXBvbmVudCRwcm90b3R5cGUkIiwibWV0aG9kQXJncyIsIlBhZ2VyIiwiYWN0aXZlTGFiZWwiLCJQYWdpbmF0aW9uSXRlbSIsImNyZWF0ZUJ1dHRvbiIsImRlZmF1bHRWYWx1ZSIsIl9jbGFzcyIsIl90ZW1wIiwiRmlyc3QiLCJQcmV2IiwiRWxsaXBzaXMiLCJOZXh0IiwiTGFzdCIsIlBhZ2luYXRpb24iLCIkYnNfcGFuZWwiLCJoZWFkaW5nSWQiLCJib2R5SWQiLCJQYW5lbENvbGxhcHNlIiwiX2JzQ2xhc3MiLCJjb2xsYXBzaWJsZSIsIlBhbmVsQm9keSIsIlBhbmVsSGVhZGluZyIsIlBhbmVsVG9nZ2xlIiwiUGFuZWxUaXRsZSIsIlBhbmVsRm9vdGVyIiwiZGVmYXVsdEdldElkIiwiUGFuZWwiLCJwYW5lbEdyb3VwIiwiZ2V0RXhwYW5kZWQiLCJpZHMiLCJpZEtleSIsIlVuY29udHJvbGxlZFBhbmVsIiwicG9zaXRpb25Ub3AiLCJwb3NpdGlvbkxlZnQiLCJhcnJvd09mZnNldFRvcCIsImFycm93T2Zmc2V0TGVmdCIsIlBvcG92ZXIiLCJvdXRlclN0eWxlIiwiYXJyb3dTdHlsZSIsIm1pbiIsIm5vdyIsIm1heCIsInN0cmlwZWQiLCJvbmx5UHJvZ3Jlc3NCYXIiLCJQcm9ncmVzc0JhciIsImNoaWxkSWRlbnRpZmllciIsImlzQ2hpbGQiLCJnZXRQZXJjZW50YWdlIiwicGVyY2VudGFnZSIsIk1hdGgiLCJyb3VuZCIsInJlbmRlclByb2dyZXNzQmFyIiwid3JhcHBlclByb3BzIiwiUmFkaW8iLCJhMTZieTkiLCJhNGJ5MyIsIlJlc3BvbnNpdmVFbWJlZCIsIlJvdyIsIlNwbGl0VG9nZ2xlIiwidG9nZ2xlTGFiZWwiLCJTcGxpdEJ1dHRvbiIsIlRhYkNvbnRhaW5lciIsIiRic190YWJDb250ZW50Iiwib25QYW5lRW50ZXIiLCJvblBhbmVFeGl0ZWQiLCJleGl0aW5nIiwiVGFiQ29udGVudCIsImhhbmRsZVBhbmVFbnRlciIsImhhbmRsZVBhbmVFeGl0ZWQiLCJzdGF0ZUFjdGl2ZUtleSIsImNvbnRhaW5lckFjdGl2ZUtleSIsImdldENvbnRhaW5lckFjdGl2ZUtleSIsImNoaWxkS2V5IiwiVGFiUGFuZSIsInNob3VsZEJlSW4iLCJnZXRBbmltYXRpb24iLCJ0YWJDb250ZW50IiwicHJvcHNNb3VudE9uRW50ZXIiLCJwcm9wc1VubW91bnRPbkV4aXQiLCJfdGhpcyRjb250ZXh0IiwicGFuZSIsInRhYkNsYXNzTmFtZSIsIlRhYiIsIkNvbnRhaW5lciIsIkNvbnRlbnQiLCJQYW5lIiwiYm9yZGVyZWQiLCJjb25kZW5zZWQiLCJob3ZlciIsIlRhYmxlIiwidGFibGUiLCJUYWJzIiwicmVuZGVyVGFiIiwiX3RoaXMkcHJvcHMkYWN0aXZlS2V5IiwiZ2V0RGVmYXVsdEFjdGl2ZUtleSIsImRlZmF1bHRBY3RpdmVLZXkiLCJzcmMiLCJhbHQiLCJvbkVycm9yIiwib25Mb2FkIiwiVGh1bWJuYWlsIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwiVG9nZ2xlQnV0dG9uIiwiYXV0b0NvbXBsZXRlIiwiVG9nZ2xlQnV0dG9uR3JvdXAiLCJnZXRWYWx1ZXMiLCJuIiwiVW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAiLCJUb29sdGlwIiwiV2VsbCIsImhhc093biIsImNsYXNzTmFtZXMiLCJhcmdUeXBlIiwiUHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJuZXdPYmoiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0Iiwic2V0IiwiX3JlYWN0IiwiX3JlYWN0RG9tIiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsImluaXRpYWxTdGF0dXMiLCJwYXJlbnRHcm91cCIsInRyYW5zaXRpb25Hcm91cCIsImlzTW91bnRpbmciLCJlbnRlciIsImFwcGVhclN0YXR1cyIsIm5leHRDYWxsYmFjayIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByZXZTdGF0ZSIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsImV4aXQiLCJtb3VudGluZyIsImZpbmRET01Ob2RlIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uVHJhbnNpdGlvbkVuZCIsImNhbmNlbCIsIm5leHRTdGF0ZSIsImNhbGxiYWNrIiwic2V0TmV4dENhbGxiYWNrIiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiQ2hpbGRyZW4iLCJub29wIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsInBvbHlmaWxsIiwiY2xhc3NOYW1lc1NoYXBlIiwidGltZW91dHNTaGFwZSIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ1cGRhdGVyIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJuZXdBcGlOYW1lIiwiY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwiLCJtYXliZVNuYXBzaG90Iiwic25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiX3Byb3BUeXBlczIiLCJfY29tcG9uZW50T3JFbGVtZW50MiIsIl9yZWFjdERvbTIiLCJfZ2V0Q29udGFpbmVyMiIsIl9vd25lckRvY3VtZW50MiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUG9ydGFsIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJfbW91bnRPdmVybGF5VGFyZ2V0IiwiX292ZXJsYXlUYXJnZXQiLCJfcG9ydGFsQ29udGFpbmVyTm9kZSIsIl91bm1vdW50T3ZlcmxheVRhcmdldCIsIl9yZW5kZXJPdmVybGF5IiwiaW5pdGlhbFJlbmRlciIsIl9vdmVybGF5SW5zdGFuY2UiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIm9uUmVuZGVyZWQiLCJfdW5yZW5kZXJPdmVybGF5IiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsImdldE1vdW50Tm9kZSIsIl9pbmhlcml0cyIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX2lzTW91bnRlZCIsIm9uZU9mVHlwZSIsIl9hY3RpdmVFbGVtZW50MiIsIl9jb250YWluczIiLCJfaW5ET00yIiwiX2RlcHJlY2F0ZWQyIiwiX2VsZW1lbnRUeXBlMiIsIl9Nb2RhbE1hbmFnZXIyIiwiX1BvcnRhbDIiLCJfUmVmSG9sZGVyMiIsIl9hZGRFdmVudExpc3RlbmVyMiIsIl9hZGRGb2N1c0xpc3RlbmVyMiIsIm1vZGFsTWFuYWdlciIsIl9pbml0aWFsaXNlUHJvcHMiLCJvbWl0UHJvcHMiLCJuZXdQcm9wcyIsIl9wcm9wcyIsImRpYWxvZyIsImZpbHRlcmVkUHJvcHMiLCJleGl0ZWQiLCJfZGlhbG9nJHByb3BzIiwiaGFuZGxlSGlkZGVuIiwic2V0TW91bnROb2RlIiwib25Qb3J0YWxSZW5kZXJlZCIsInNldE1vZGFsTm9kZVJlZiIsInJlbmRlckJhY2tkcm9wIiwic2V0RGlhbG9nUmVmIiwiY2hlY2tGb3JGb2N1cyIsIm9uU2hvdyIsIl9wcm9wczIiLCJkaWFsb2dFbGVtZW50IiwiY3VycmVudEFjdGl2ZUVsZW1lbnQiLCJsYXN0Rm9jdXMiLCJoYXNBdHRyaWJ1dGUiLCJyZXN0b3JlTGFzdEZvY3VzIiwiaXNUb3BNb2RhbCIsIm1hbmFnZXIiLCJib29sIiwib25lT2YiLCJvbkVzY2FwZUtleURvd24iLCJvbkVzY2FwZUtleVVwIiwib25CYWNrZHJvcENsaWNrIiwiYmFja2Ryb3BTdHlsZSIsIl9wcm9wczMiLCJiYWNrZHJvcFJlZiIsImhhbmRsZUJhY2tkcm9wQ2xpY2siLCJfb25Eb2N1bWVudEtleWRvd25MaXN0ZW5lciIsImhhbmRsZURvY3VtZW50S2V5RG93biIsIl9vbkRvY3VtZW50S2V5dXBMaXN0ZW5lciIsImhhbmRsZURvY3VtZW50S2V5VXAiLCJfb25Gb2N1c2luTGlzdGVuZXIiLCJtb3VudE5vZGUiLCJtb2RhbE5vZGUiLCJfcHJvcHM0IiwiTWFuYWdlciIsIl9jbGFzczIiLCJfc3R5bGUyIiwiX3Njcm9sbGJhclNpemUyIiwiX2lzT3ZlcmZsb3dpbmcyIiwiX21hbmFnZUFyaWFIaWRkZW4iLCJNb2RhbE1hbmFnZXIiLCJfcmVmMiRoaWRlU2libGluZ05vZGUiLCJoaWRlU2libGluZ05vZGVzIiwiX3JlZjIkaGFuZGxlQ29udGFpbmVyIiwiaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3ciLCJtb2RhbElkeCIsIm1vZGFscyIsImNvbnRhaW5lcklkeCIsImNvbnRhaW5lcnMiLCJoaWRlU2libGluZ3MiLCJkYXRhIiwic3BsaXQiLCJvdmVyZmxvd2luZyIsInNldENvbnRhaW5lclN0eWxlIiwiZmluZENvbnRhaW5lciIsImZpbmRJbmRleE9mIiwiY2IiLCJpZHgiLCJkIiwic3BsaWNlIiwicmVtb3ZlQ29udGFpbmVyU3R5bGUiLCJzaG93U2libGluZ3MiLCJhcmlhSGlkZGVuIiwiX1Bvc2l0aW9uMiIsIl9Sb290Q2xvc2VXcmFwcGVyMiIsIm9uSGlkZGVuTGlzdGVuZXIiLCJjb250YWluZXJQYWRkaW5nIiwic2hvdWxkVXBkYXRlUG9zaXRpb24iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfTGVnYWN5UG9ydGFsMiIsInNldENvbnRhaW5lciIsImZvcmNlVXBkYXRlIiwiY3JlYXRlUG9ydGFsIiwiX2NsYXNzbmFtZXMyIiwiX2NhbGN1bGF0ZVBvc2l0aW9uMiIsIlBvc2l0aW9uIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0RWxlbWVudCIsIm1heWJlVXBkYXRlUG9zaXRpb24iLCJwbGFjZW1lbnRDaGFuZ2VkIiwiX2xhc3RUYXJnZXQiLCJ1cGRhdGVQb3NpdGlvbiIsIl9uZWVkc0ZsdXNoIiwiX3N0YXRlIiwiYXJyb3dQb3NpdGlvbiIsIm51bWJlciIsIlJlZkhvbGRlciIsIlJvb3RDbG9zZVdyYXBwZXIiLCJhZGRFdmVudExpc3RlbmVycyIsImN1cnJlbnRFdmVudCIsImRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIiLCJoYW5kbGVNb3VzZUNhcHR1cmUiLCJkb2N1bWVudE1vdXNlTGlzdGVuZXIiLCJoYW5kbGVNb3VzZSIsImRvY3VtZW50S2V5dXBMaXN0ZW5lciIsImhhbmRsZUtleVVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJwcmV2ZW50TW91c2VSb290Q2xvc2UiLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiaXNMZWZ0Q2xpY2tFdmVudCIsImJ1dHRvbiIsIl9vbjIiLCJfb2ZmMiIsImFkZEZvY3VzTGlzdGVuZXIiLCJ1c2VGb2N1c2luIiwiY2FsY3VsYXRlUG9zaXRpb24iLCJvdmVybGF5Tm9kZSIsInBhZGRpbmciLCJjaGlsZE9mZnNldCIsInRhZ05hbWUiLCJfb2Zmc2V0MiIsIl9wb3NpdGlvbjIiLCJfZ2V0T2Zmc2V0MiIsIm92ZXJsYXlIZWlnaHQiLCJvdmVybGF5V2lkdGgiLCJ0b3BEZWx0YSIsImdldFRvcERlbHRhIiwiY29udGFpbmVyRGltZW5zaW9ucyIsImdldENvbnRhaW5lckRpbWVuc2lvbnMiLCJjb250YWluZXJTY3JvbGwiLCJzY3JvbGwiLCJjb250YWluZXJIZWlnaHQiLCJ0b3BFZGdlT2Zmc2V0IiwiYm90dG9tRWRnZU9mZnNldCIsImxlZnREZWx0YSIsImdldExlZnREZWx0YSIsImNvbnRhaW5lcldpZHRoIiwibGVmdEVkZ2VPZmZzZXQiLCJyaWdodEVkZ2VPZmZzZXQiLCJfc2Nyb2xsVG9wMiIsImNvbnRhaW5lck5vZGUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJfZ2V0T2Zmc2V0IiwiZ2V0Q29udGFpbmVyIiwiZGVmYXVsdENvbnRhaW5lciIsImlzT3ZlcmZsb3dpbmciLCJfaXNXaW5kb3cyIiwiaXNCb2R5IiwiZnVsbFdpZHRoIiwiZG9jdW1lbnRFbGVtZW50UmVjdCIsImFicyIsInNpYmxpbmdzIiwiQkxBQ0tMSVNUIiwibW91bnQiLCJpc0hpZGFibGUiLCJjb21wb25lbnRPckVsZW1lbnQiLCJpc1Byb3AiLCJkZWZhdWx0S2V5Iiwic3Vic3RyIiwiX3RvUHJvcGVydHlLZXkiLCJfdG9QcmltaXRpdmUiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwicmVzIiwiTnVtYmVyIiwidXNlVW5jb250cm9sbGVkUHJvcCIsIndhc1Byb3BSZWYiLCJ1c2VSZWYiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsInN0YXRlVmFsdWUiLCJ3YXNQcm9wIiwidXNlQ2FsbGJhY2siLCJ1c2VVbmNvbnRyb2xsZWQiLCJjb25maWciLCJmaWVsZE5hbWUiLCJwcm9wc1ZhbHVlIiwicmVzdCIsImhhbmRsZXJOYW1lIiwiX3VzZVVuY29udHJvbGxlZFByb3AiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwicCIsIl9qc3hGaWxlTmFtZSIsInVuY29udHJvbGxhYmxlIiwiY29udHJvbGxlZFZhbHVlcyIsImNhbkFjY2VwdFJlZiIsImNvbnRyb2xsZWRQcm9wcyIsIlBST1BTX1RPX09NSVQiLCJVbmNvbnRyb2xsZWRDb21wb25lbnQiLCJoYW5kbGVycyIsImhhbmRsZUNoYW5nZSIsIl9ub3RpZnlpbmciLCJ1bm1vdW50ZWQiLCJhdHRhY2hSZWYiLCJpbm5lciIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlubmVyUmVmIiwidW5jb250cm9sbGVkUHJvcFR5cGVzIiwibWV0aG9kIiwiJHByb3hpZWRNZXRob2QiLCJfdGhpcyRpbm5lciIsIldyYXBwZWRDb21wb25lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIl9fc2VsZiIsImRlZmVyQ29udHJvbFRvIiwibmV3Q29tcG9uZW50IiwiYWRkaXRpb25zIiwibmV4dE1ldGhvZHMiXSwic291cmNlUm9vdCI6IiJ9