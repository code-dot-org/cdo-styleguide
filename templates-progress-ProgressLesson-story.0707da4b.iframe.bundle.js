/*! For license information please see templates-progress-ProgressLesson-story.0707da4b.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4632],{"./src/code-studio/browserNavigation.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.canChangeLevelInPage=function canChangeLevelInPage(currentLevel,newLevel){return(null==currentLevel?void 0:currentLevel.usesLab2)&&(null==newLevel?void 0:newLevel.usesLab2)},exports.setWindowTitle=setWindowTitle,exports.setupNavigationHandler=function setupNavigationHandler(lessonData){window.addEventListener("popstate",(function(event){var path=new URL(document.location).pathname;if(path){var values=path.split("/",9);if(!(values.length<7)){var sublevelNumber,levelNumber=Number(values[6]);if(Number.isInteger(levelNumber)&&!(levelNumber<=0))values.length>8&&(sublevelNumber=Number(values[8]),(!Number.isInteger(sublevelNumber)||sublevelNumber<=0)&&(sublevelNumber=void 0)),(0,_redux.getStore)().dispatch((0,_progressRedux.onLevelIndexChange)(levelNumber-1,sublevelNumber&&sublevelNumber-1))}}}))},exports.updateBrowserForLevelNavigation=function updateBrowserForLevelNavigation(progressStoreState,levelPath,levelId){window.history.pushState({},"",levelPath+window.location.search),setWindowTitle(progressStoreState,levelId)};var _redux=__webpack_require__("./src/redux.js"),_progressRedux=__webpack_require__("./src/code-studio/progressRedux.ts");function setWindowTitle(progressStoreState,newLevelId){var lesson=progressStoreState.lessons.find((function(lesson){return lesson.id===progressStoreState.currentLessonId})),numLessons=lesson.num_script_lessons,lessonName=lesson.name,lessonIndex=lesson.levels.findIndex((function(level){return level.activeId===newLevelId}))+1,scriptDisplayName=progressStoreState.scriptDisplayName;document.title=numLessons>1?"".concat(lessonName," #").concat(lessonIndex," | ").concat(scriptDisplayName," - Code.org"):"".concat(lessonName," #").concat(lessonIndex," - Code.org")}},"./src/code-studio/verifiedInstructorRedux.js":(__unused_webpack_module,exports)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function verifiedInstructor(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_VERIFIED)return _objectSpread(_objectSpread({},state),{},{isVerified:!0});if(action.type===SET_VERIFIED_RESOURCES)return _objectSpread(_objectSpread({},state),{},{hasVerifiedResources:!0});return _objectSpread({},state)},exports.setVerifiedResources=exports.setVerified=void 0;var SET_VERIFIED="verifiedInstructor/SET_VERIFIED",SET_VERIFIED_RESOURCES="verifiedInstructor/SET_VERIFIED_RESOURCES",initialState=(exports.setVerified=function setVerified(){return{type:SET_VERIFIED}},exports.setVerifiedResources=function setVerifiedResources(hasVerifiedResources){return{type:SET_VERIFIED_RESOURCES}},{isVerified:!1,hasVerifiedResources:!1})},"./src/templates/progress/FocusAreaIndicator.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var styles={main:{display:"inline-block",position:"absolute",right:0,top:0,whiteSpace:"nowrap"},arrowContainer:{display:"inline-block",position:"relative",top:10},leftArrow:{display:"inline-block",width:0,height:0,borderStyle:"solid",borderWidth:"17px 20px 17px",borderColor:"transparent ".concat(_color.default.cyan," transparent transparent")},focusArea:{display:"inline-block",backgroundColor:_color.default.cyan,color:_color.default.white,height:34,lineHeight:"34px",position:"relative",top:-3},text:{display:"inline-block"},focusAreaIcon:{display:"inline-block",color:_color.default.white,lineHeight:"13px",padding:5,marginLeft:5,marginRight:5,borderRadius:4,":hover":{backgroundColor:_color.default.default_blue}}};exports.default=(0,_radium.default)((function FocusAreaIndicator(){return _react.default.createElement("div",{style:styles.main},_react.default.createElement("div",{style:styles.arrowContainer},_react.default.createElement("div",{style:styles.leftArrow})),_react.default.createElement("div",{style:styles.focusArea},_react.default.createElement("div",{style:styles.text},"Focus Area"),_react.default.createElement("a",{href:window.location.pathname+"/preview-assignments"},_react.default.createElement("div",{style:styles.focusAreaIcon,"data-tip":!0,"data-for":"focus-area"},_react.default.createElement(_FontAwesome.default,{icon:"pencil"})))),_react.default.createElement(_reactTooltip.default,{id:"focus-area",role:"tooltip",effect:"solid"},"Click to change your focus area."))}));module.exports=exports.default},"./src/templates/progress/ProgressLesson.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressLesson=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_firehose=_interopRequireDefault(__webpack_require__("./src/lib/util/firehose.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_Button=_interopRequireDefault(__webpack_require__("./src/templates/Button.jsx")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_FocusAreaIndicator=_interopRequireDefault(__webpack_require__("./src/templates/progress/FocusAreaIndicator.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_ProgressLessonContent=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonContent.jsx")),_ProgressLessonTeacherInfo=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonTeacherInfo.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLesson=function(_React$Component){function ProgressLesson(props){var _this;return _defineProperty(_this=_React$Component.call(this,props)||this,"toggleCollapsed",(function(){return _this.setState({collapsed:!_this.state.collapsed})})),_defineProperty(_this,"onClickStudentLessonPlan",(function(){_firehose.default.putRecord({study:"script_overview_actions",study_group:"student_lesson_plan",event:"open_student_lesson_plan",data_json:JSON.stringify({lesson_id:_this.props.lesson.id,script_id:_this.props.scriptId})},{includeUserId:!0})})),_this.state={collapsed:props.viewAs!==_viewAsRedux.ViewType.Instructor&&props.currentLessonId!==props.lesson.id},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLesson,_React$Component);var _proto=ProgressLesson.prototype;return _proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){nextProps.currentLessonId!==this.props.currentLessonId&&this.setState({collapsed:this.state.collapsed&&nextProps.currentLessonId!==this.props.lesson.id})},_proto.render=function render(){var _this2=this,_this$props=this.props,lesson=_this$props.lesson,levels=_this$props.levels,viewAs=_this$props.viewAs,isVisible=_this$props.isVisible,hiddenForStudents=_this$props.hiddenForStudents,isLockedForUser=_this$props.isLockedForUser,isLockedForAllStudents=_this$props.isLockedForAllStudents,selectedSectionId=_this$props.selectedSectionId,isRtl=_this$props.isRtl;if(!isVisible)return null;var showAsLocked=isLockedForUser||isLockedForAllStudents,title=lesson.lessonNumber?_locale.default.lessonNumbered({lessonNumber:lesson.lessonNumber,lessonName:lesson.name}):lesson.name,caretStyle=isRtl?styles.caretRTL:styles.caret,caret=this.state.collapsed?"caret-right":"caret-down",lockedTooltipId=_lodash.default.uniqueId(),description=viewAs===_viewAsRedux.ViewType.Instructor?lesson.description_teacher:lesson.description_student,lessonUrl=levels[0]&&levels[0].url,showNotAuthorizedWarning=lesson.lockable&&viewAs===_viewAsRedux.ViewType.Instructor&&this.props.lockableAuthorizedLoaded&&!this.props.lockableAuthorized;return _react.default.createElement("div",{id:"progress-lesson-".concat(lesson.lessonNumber),className:"uitest-progress-lesson",style:_objectSpread(_objectSpread({},styles.outer),(hiddenForStudents||showAsLocked)&&styles.hiddenOrLocked)},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),(hiddenForStudents&&viewAs===_viewAsRedux.ViewType.Participant||isLockedForUser)&&styles.translucent)},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.heading),{marginBottom:this.state.collapsed?0:15})},_react.default.createElement("div",{style:styles.headingText,onClick:this.toggleCollapsed,tabIndex:"0",role:"button",onKeyDown:function onKeyDown(e){[" ","Enter","Spacebar"].includes(e.key)&&(e.preventDefault(),_this2.toggleCollapsed())},"aria-expanded":!this.state.collapsed},_react.default.createElement(_FontAwesome.default,{icon:caret,style:caretStyle}),hiddenForStudents&&_react.default.createElement(_FontAwesome.default,{icon:"eye-slash",style:styles.icon}),lesson.lockable&&this.props.lockStatusLoaded&&_react.default.createElement("span",{"data-tip":!0,"data-for":lockedTooltipId},_react.default.createElement(_FontAwesome.default,{icon:showAsLocked?"lock":"unlock",style:_objectSpread(_objectSpread({},styles.icon),!showAsLocked&&styles.unlockedIcon)}),!showAsLocked&&viewAs===_viewAsRedux.ViewType.Instructor&&_react.default.createElement(_reactTooltip.default,{id:lockedTooltipId,role:"tooltip",wrapper:"span",effect:"solid"},_locale.default.lockAssessmentLong())),_react.default.createElement("span",null,title)),viewAs===_viewAsRedux.ViewType.Participant&&lesson.student_lesson_plan_html_url&&_react.default.createElement("span",{style:styles.buttonStyle},_react.default.createElement(_Button.default,{__useDeprecatedTag:!0,className:"ui-test-lesson-resources",href:lesson.student_lesson_plan_html_url,text:_locale.default.lessonResources(),icon:"file-text",color:"purple",target:"_blank",onClick:this.onClickStudentLessonPlan}))),showNotAuthorizedWarning&&_react.default.createElement("div",{style:styles.notAuthorizedWarning},_locale.default.unverifiedTeacherLockWarning(),_react.default.createElement("a",{style:styles.learnMoreLink,href:"https://support.code.org/hc/en-us/articles/115001550131-Becoming-a-verified-teacher-CS-Principles-and-CS-Discoveries-only-"},_locale.default.learnMoreWithPeriod())),!this.state.collapsed&&_react.default.createElement(_ProgressLessonContent.default,{description,levels,disabled:isLockedForUser,selectedSectionId,lessonName:lesson.name})),viewAs===_viewAsRedux.ViewType.Instructor&&!this.props.isMiniView&&_react.default.createElement(_ProgressLessonTeacherInfo.default,{lesson,lessonUrl,onClickStudentLessonPlan:this.onClickStudentLessonPlan}),lesson.isFocusArea&&_react.default.createElement(_FocusAreaIndicator.default,null))},ProgressLesson}(_react.default.Component);_defineProperty(ProgressLesson,"propTypes",{lesson:_progressTypes.lessonType.isRequired,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,scriptId:_propTypes.default.number,currentLessonId:_propTypes.default.number,viewAs:_propTypes.default.oneOf(Object.values(_viewAsRedux.ViewType)).isRequired,isVisible:_propTypes.default.bool.isRequired,hiddenForStudents:_propTypes.default.bool.isRequired,isLockedForUser:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,lockableAuthorized:_propTypes.default.bool,lockableAuthorizedLoaded:_propTypes.default.bool.isRequired,isLockedForAllStudents:_propTypes.default.bool.isRequired,isRtl:_propTypes.default.bool,isMiniView:_propTypes.default.bool,lockStatusLoaded:_propTypes.default.bool.isRequired});var styles={outer:{position:"relative",display:"table",width:"100%",height:"100%",background:_color.default.lightest_gray,borderColor:_color.default.border_gray,borderStyle:"solid",borderRadius:2,borderWidth:1,marginTop:3,marginBottom:15,marginLeft:3,marginRight:3},main:{padding:20},heading:_objectSpread(_objectSpread({fontSize:18},_fontConstants.default["main-font-semi-bold"]),{},{display:"flex",alignItems:"center"}),headingText:{cursor:"pointer",flexGrow:1},buttonStyle:{marginLeft:"auto"},hiddenOrLocked:{borderStyle:"dashed",borderWidth:4,marginTop:0,marginBottom:12,marginLeft:0,marginRight:0},translucent:{opacity:.6},caret:{marginRight:10},caretRTL:{marginLeft:10},icon:{marginRight:5,fontSize:18,color:_color.default.cyan},unlockedIcon:{color:_color.default.orange},notAuthorizedWarning:_objectSpread(_objectSpread({color:_color.default.red},_fontConstants.default["main-font-semi-bold-italic"]),{},{marginTop:10}),learnMoreLink:{marginLeft:5}};exports.UnconnectedProgressLesson=ProgressLesson,exports.default=(0,_reactRedux.connect)((function(state,ownProps){return{currentLessonId:state.progress.currentLessonId,viewAs:state.viewAs,lockableAuthorized:state.lessonLock.lockableAuthorized,lockableAuthorizedLoaded:state.lessonLock.lockableAuthorizedLoaded,isVisible:(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,state.viewAs),hiddenForStudents:!(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,_viewAsRedux.ViewType.Participant),isLockedForUser:(0,_progressHelpers.lessonIsLockedForUser)(ownProps.lesson,ownProps.levels,state,state.viewAs),isLockedForAllStudents:(0,_progressHelpers.lessonIsLockedForAllStudents)(ownProps.lesson.id,state),selectedSectionId:state.teacherSections.selectedSectionId,scriptId:state.progress.scriptId,isRtl:state.isRtl,isMiniView:state.progress.isMiniView,lockStatusLoaded:state.progress.unitProgressHasLoaded&&state.lessonLock.lessonsBySectionIdLoaded}}))(ProgressLesson)},"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=exports.fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)},fakeLevels=(exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))},exports.fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))}),fakeProgressForLevels=exports.fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress},randomNumberUpTo100=(exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})},exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})},function randomNumberUpTo100(){return Math.floor(100*Math.random())}),lessonId=1,fakeLessonWithLevels=exports.fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)},fakeStudents=exports.fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))},fakeUnitData=exports.fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},fakeStudentLevelProgress=exports.fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress},fakeStudentLastUpdate=exports.fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate},fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./src/code-studio/progressRedux.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var _a,_b,__assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;g&&(g=0,op[0]&&(_=0)),_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.__testonly__=exports.setViewAsUserId=exports.setLessonExtrasEnabled=exports.setScriptCompleted=exports.setCurrentLessonId=exports.setStudentDefaultsSummaryView=exports.setIsMiniView=exports.setIsSummaryView=exports.setIsAge13Required=exports.disablePostMilestone=exports.updateFocusArea=exports.mergePeerReviewProgress=exports.overwriteResults=exports.mergeResults=exports.useDbProgress=exports.clearResults=exports.setScriptProgress=exports.setCurrentLevelId=exports.initProgress=exports.processedLessons=exports.sendPredictLevelReport=exports.sendSuccessReport=exports.navigateToNextLevel=exports.onLevelIndexChange=exports.navigateToLevelId=exports.queryUserProgress=void 0;var jquery_1=__importDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),lodash_1=__importDefault(__webpack_require__("./node_modules/lodash/lodash.js")),progressTypes_1=__webpack_require__("./src/types/progressTypes.ts"),toolkit_1=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),progressHelpers_1=__webpack_require__("./src/templates/progress/progressHelpers.js"),activityUtils_1=__webpack_require__("./src/code-studio/activityUtils.js"),viewAsRedux_1=__webpack_require__("./src/code-studio/viewAsRedux.js"),verifiedInstructorRedux_1=__webpack_require__("./src/code-studio/verifiedInstructorRedux.js"),lessonLockRedux_1=__webpack_require__("./src/code-studio/lessonLockRedux.js"),browserNavigation_1=__webpack_require__("./src/code-studio/browserNavigation.js"),constants_1=__webpack_require__("./src/constants.js"),progressReduxSelectors_1=__webpack_require__("./src/code-studio/progressReduxSelectors.js"),BubbleFactory_1=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),utils_1=__webpack_require__("./src/utils.js"),initialState={currentLevelId:null,currentLessonId:void 0,deeperLearningCourse:null,saveAnswersBeforeNavigation:null,lessons:null,lessonGroups:null,scriptId:null,viewAsUserId:null,scriptName:null,scriptDisplayName:void 0,unitTitle:null,courseId:null,isLessonExtras:!1,unitProgress:{},unitProgressHasLoaded:!1,levelResults:{},focusAreaLessonIds:[],peerReviewLessonInfo:null,peerReviewsPerformed:[],postMilestoneDisabled:!1,isAge13Required:!1,studentDefaultsSummaryView:!0,isSummaryView:!0,isMiniView:!1,hasFullProgress:!1,lessonExtrasEnabled:!1,usingDbProgress:!1,currentPageNumber:progressTypes_1.PUZZLE_PAGE_NONE,courseVersionId:void 0,unitDescription:void 0,unitStudentDescription:void 0,changeFocusAreaPath:void 0,unitCompleted:void 0},progressSlice=(0,toolkit_1.createSlice)({name:"progress",initialState,reducers:{initProgress:function(state,action){var lessons=action.payload.lessons,currentLessonId=state.currentLessonId||(1===lessons.length?lessons[0].id:void 0);state.currentLevelId||(state.currentLevelId=action.payload.currentLevelId),state.deeperLearningCourse=action.payload.deeperLearningCourse,state.saveAnswersBeforeNavigation=action.payload.saveAnswersBeforeNavigation,state.lessons=processedLessons(lessons,action.payload.deeperLearningCourse),state.lessonGroups=action.payload.lessonGroups,state.peerReviewLessonInfo=action.payload.peerReviewLessonInfo,state.scriptId=action.payload.scriptId,state.scriptName=action.payload.scriptName,state.scriptDisplayName=action.payload.scriptDisplayName,state.unitTitle=action.payload.unitTitle,state.unitDescription=action.payload.unitDescription,state.unitStudentDescription=action.payload.unitStudentDescription,state.courseId=action.payload.courseId,state.courseVersionId=action.payload.courseVersionId,state.currentLessonId=currentLessonId,state.hasFullProgress=action.payload.isFullProgress,state.isLessonExtras=action.payload.isLessonExtras,state.currentPageNumber=action.payload.currentPageNumber},setCurrentLevelId:function(state,action){state.currentLevelId=action.payload},setScriptProgress:function(state,action){state.unitProgress=(0,progressHelpers_1.processServerStudentProgress)(action.payload),state.unitProgressHasLoaded=!0},clearResults:function(state){state.levelResults=initialState.levelResults},useDbProgress:function(state){state.usingDbProgress=!0},mergeResults:function(state,action){var newLevelResults={};Object.keys(__assign(__assign({},state.levelResults),action.payload)).forEach((function(key){var levelId=parseInt(key);newLevelResults[levelId]=(0,activityUtils_1.mergeActivityResult)(state.levelResults[levelId],action.payload[levelId])})),state.levelResults=newLevelResults},overwriteResults:function(state,action){state.levelResults=action.payload},mergePeerReviewProgress:function(state,action){state.peerReviewLessonInfo&&(state.peerReviewLessonInfo=__assign(__assign({},state.peerReviewLessonInfo),{levels:state.peerReviewLessonInfo.levels.map((function(level,index){return __assign(__assign({},level),action.payload[index])}))}))},updateFocusArea:{reducer:function(state,action){state.changeFocusAreaPath=action.payload.changeFocusAreaPath,state.focusAreaLessonIds=action.payload.focusAreaLessonIds},prepare:function(changeFocusAreaPath,focusAreaLessonIds){return{payload:{changeFocusAreaPath,focusAreaLessonIds}}}},disablePostMilestone:function(state){state.postMilestoneDisabled=!0},setIsAge13Required:function(state,action){state.isAge13Required=action.payload},setIsSummaryView:function(state,action){state.isSummaryView=action.payload},setIsMiniView:function(state,action){state.isMiniView=action.payload},setStudentDefaultsSummaryView:function(state,action){state.studentDefaultsSummaryView=action.payload},setCurrentLessonId:function(state,action){state.currentLessonId||(state.currentLessonId=action.payload)},setScriptCompleted:function(state){state.unitCompleted=!0},setLessonExtrasEnabled:function(state,action){state.lessonExtrasEnabled=action.payload},setViewAsUserId:function(state,action){state.viewAsUserId=action.payload}},extraReducers:(_a={},_a[viewAsRedux_1.SET_VIEW_TYPE]=function(state,action){state.isSummaryView=action.viewType===progressTypes_1.ViewType.Participant&&state.studentDefaultsSummaryView},_a)});function navigateToLevelId(levelId){return function(dispatch,getState){var state=getState().progress;if(state.currentLessonId&&state.currentLevelId){var newLevel=(0,progressReduxSelectors_1.levelById)(state,state.currentLessonId,levelId);if(newLevel){var currentLevel=(0,progressReduxSelectors_1.getCurrentLevel)(getState());if((0,browserNavigation_1.canChangeLevelInPage)(currentLevel,newLevel))(0,browserNavigation_1.updateBrowserForLevelNavigation)(state,newLevel.path,levelId),dispatch((0,exports.setCurrentLevelId)(levelId));else{var url=(0,BubbleFactory_1.getBubbleUrl)(newLevel.path,void 0,void 0,!0);(0,utils_1.navigateToHref)(url)}}}}}function sendReportHelper(appType,result,dispatch,getState,program){var state=getState().progress,levelId=state.currentLevelId;if(state.currentLessonId&&levelId){var scriptLevelId=(0,progressReduxSelectors_1.getCurrentScriptLevelId)(getState());if(scriptLevelId){var data={app:appType,result:!0,testResult:result};program&&(data.program=program),fetch("/milestone/".concat(0,"/").concat(scriptLevelId,"/").concat(levelId),{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(data)}).then((function(response){var _a;response.ok&&null!==levelId&&dispatch((0,exports.mergeResults)(((_a={})[levelId]=result,_a)))}))}}}exports.queryUserProgress=function(userId,mergeProgress){return void 0===mergeProgress&&(mergeProgress=!0),function(dispatch,getState){var state=getState().progress;return userProgressFromServer(state,dispatch,userId,mergeProgress)}},exports.navigateToLevelId=navigateToLevelId,exports.onLevelIndexChange=function onLevelIndexChange(levelIndex,sublevelIndex){return function(dispatch,getState){var levels=(0,progressReduxSelectors_1.getCurrentLevels)(getState());if(levels&&0!==levels.length){var level=levels[levelIndex];if(void 0!==sublevelIndex&&level.sublevels&&sublevelIndex<level.sublevels.length){var newLevelId=level.sublevels[sublevelIndex].id;dispatch((0,exports.setCurrentLevelId)(newLevelId))}else{newLevelId=level.id;dispatch((0,exports.setCurrentLevelId)(newLevelId))}}}},exports.navigateToNextLevel=function navigateToNextLevel(){return function(dispatch,getState){var levelId=(0,progressReduxSelectors_1.nextLevelId)(getState());void 0!==levelId&&dispatch(navigateToLevelId(levelId))}},exports.sendSuccessReport=function sendSuccessReport(appType){return function(dispatch,getState){sendReportHelper(appType,constants_1.TestResults.ALL_PASS,dispatch,getState)}},exports.sendPredictLevelReport=(0,toolkit_1.createAsyncThunk)("progress/sendPredictLevelReport",(function(payload,thunkAPI){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return sendReportHelper(payload.appType,constants_1.TestResults.CONTAINED_LEVEL_RESULT,thunkAPI.dispatch,thunkAPI.getState,payload.predictResponse),[2]}))}))}));var userProgressFromServer=function(state,dispatch,userId,mergeProgress){if(void 0===userId&&(userId=null),!state.scriptName){var message="Could not request progress for user ID ".concat(userId," from server: scriptName must be present in progress redux.");throw new Error(message)}return userId&&dispatch((0,exports.clearResults)()),jquery_1.default.ajax({url:"/api/user_progress/".concat(state.scriptName),method:"GET",data:{user_id:userId}}).done((function(data){if(data&&!lodash_1.default.isEmpty(data)){data.isVerifiedInstructor&&dispatch((0,verifiedInstructorRedux_1.setVerified)());var onOverviewPage=!state.currentLevelId;if((data.isInstructor||data.teacherViewingStudent)&&!data.deeperLearningCourse&&onOverviewPage&&dispatch((0,exports.setIsSummaryView)(data.teacherViewingStudent)),data.focusAreaLessonIds&&dispatch((0,exports.updateFocusArea)(data.changeFocusAreaPath,data.focusAreaLessonIds)),dispatch((0,lessonLockRedux_1.authorizeLockable)(data.lockableAuthorized)),data.completed&&dispatch((0,exports.setScriptCompleted)()),data.progress){if(dispatch((0,exports.setScriptProgress)(data.progress)),mergeProgress){var levelResults=lodash_1.default.mapValues(data.progress,progressHelpers_1.getLevelResult);dispatch((0,exports.mergeResults)(levelResults))}data.peerReviewsPerformed&&dispatch((0,exports.mergePeerReviewProgress)(data.peerReviewsPerformed)),data.current_lesson&&dispatch((0,exports.setCurrentLessonId)(data.current_lesson))}}}))};function processedLessons(lessons,isPlc){var numLessonsWithLessonPlan=0;return lessons.map((function(lesson){var lessonNumber;return!isPlc&&lesson.numberedLesson&&(lessonNumber=++numLessonsWithLessonPlan),__assign(__assign({},lodash_1.default.omit(lesson,"hidden")),{lessonNumber})}))}exports.processedLessons=processedLessons,exports.initProgress=(_b=progressSlice.actions).initProgress,exports.setCurrentLevelId=_b.setCurrentLevelId,exports.setScriptProgress=_b.setScriptProgress,exports.clearResults=_b.clearResults,exports.useDbProgress=_b.useDbProgress,exports.mergeResults=_b.mergeResults,exports.overwriteResults=_b.overwriteResults,exports.mergePeerReviewProgress=_b.mergePeerReviewProgress,exports.updateFocusArea=_b.updateFocusArea,exports.disablePostMilestone=_b.disablePostMilestone,exports.setIsAge13Required=_b.setIsAge13Required,exports.setIsSummaryView=_b.setIsSummaryView,exports.setIsMiniView=_b.setIsMiniView,exports.setStudentDefaultsSummaryView=_b.setStudentDefaultsSummaryView,exports.setCurrentLessonId=_b.setCurrentLessonId,exports.setScriptCompleted=_b.setScriptCompleted,exports.setLessonExtrasEnabled=_b.setLessonExtrasEnabled,exports.setViewAsUserId=_b.setViewAsUserId,exports.default=progressSlice.reducer,exports.__testonly__={}},"./src/types/progressTypes.ts":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ViewType=exports.ReviewStates=exports.PUZZLE_PAGE_NONE=void 0,exports.PUZZLE_PAGE_NONE=-1,exports.ReviewStates={completed:"completed",keepWorking:"keepWorking",awaitingReview:"awaitingReview"},exports.ViewType={Participant:"Participant",Instructor:"Instructor"}},"./src/templates/progress/ProgressLesson.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithFocusArea=exports.UnlockedLockableLesson=exports.UnlockedLessonAsVerifiedInstructor=exports.LockedLessonSignedOut=exports.LockedLessonAsVerifiedInstructor=exports.LockedLessonAsUnverifiedInstructor=exports.LockedLessonAsParticipant=exports.HiddenAsParticipant=exports.HiddenAsInstructor=exports.ForPeerReviews=exports.Default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_hiddenLessonRedux=_interopRequireDefault(__webpack_require__("./src/code-studio/hiddenLessonRedux.js")),_lessonLockRedux=_interopRequireDefault(__webpack_require__("./src/code-studio/lessonLockRedux.js")),_progressRedux=_interopRequireDefault(__webpack_require__("./src/code-studio/progressRedux.ts")),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_teacherSectionsRedux=_interopRequireDefault(__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_ProgressLesson=__webpack_require__("./src/templates/progress/ProgressLesson.jsx"),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}exports.default={component:_ProgressLesson.UnconnectedProgressLesson};var defaultProps={lesson:(0,_progressTestHelpers.fakeLesson)("Maze",1),levels:[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevels)(1)[0]),{},{name:"First progression"})].concat(function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,_progressTestHelpers.fakeLevels)(5,{startLevel:2}).map((function(level){return _objectSpread(_objectSpread({},level),{},{progression:"Second Progression"})}))),[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevels)(1)[0]),{},{name:"Last progression"})]),viewAs:_viewAsRedux.ViewType.Instructor,isVisible:!0,isLockedForUser:!1,isLockedForAllStudents:!1,lockableAuthorized:!0,lockableAuthorizedLoaded:!0,hiddenForStudents:!1,lockStatusLoaded:!0},store=(0,_redux.createStore)((0,_redux.combineReducers)({teacherSections:_teacherSectionsRedux.default,progress:_progressRedux.default,hiddenLesson:_hiddenLessonRedux.default,lessonLock:_lessonLockRedux.default}),{progress:{lessonGroups:[],lessons:[{levels:[]}],focusAreaLessonIds:[],isSummaryView:!1,deeperLearningCourse:!1,scriptName:"script-name",scriptId:17},teacherSections:{sectionsAreLoaded:!0,sections:{},sectionIds:[]},hiddenLesson:{},lessonLock:{}}),Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store},_react.default.createElement(_ProgressLesson.UnconnectedProgressLesson,_extends({},defaultProps,args)))};exports.Default=Template.bind({});(exports.WithFocusArea=Template.bind({})).args={lesson:_objectSpread(_objectSpread({},defaultProps.lesson),{},{isFocusArea:!0})},(exports.ForPeerReviews=Template.bind({})).args={viewAs:_viewAsRedux.ViewType.Participant,currentLessonId:-1,lesson:{id:-1,isFocusArea:!1,lockable:!1,name:"You must complete 4 reviews for this unit"},levels:[{id:"-1",name:"Link to submitted review",status:_sharedConstants.LevelStatus.perfect,isLocked:!1,url:"/peer_reviews/1",levelNumber:1},{id:"-1",name:"Review a new submission",status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,url:"/pull-review",levelNumber:2},{id:"-1",icon:"fa-lock",name:"Reviews unavailable at this time",status:_sharedConstants.LevelStatus.not_tried,isLocked:!0,url:"",levelNumber:3},{id:"-1",icon:"fa-lock",name:"Reviews unavailable at this time",status:_sharedConstants.LevelStatus.not_tried,isLocked:!0,url:"",levelNumber:4}]},(exports.HiddenAsInstructor=Template.bind({})).args={isVisible:!0},(exports.HiddenAsParticipant=Template.bind({})).args={hiddenForStudents:!0,isVisible:!0},(exports.LockedLessonAsVerifiedInstructor=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Assessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForAllStudents:!0},(exports.UnlockedLessonAsVerifiedInstructor=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForAllStudents:!1},(exports.LockedLessonAsUnverifiedInstructor=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForUser:!0,lockableAuthorized:!1},(exports.LockedLessonSignedOut=Template.bind({})).args={viewAs:_viewAsRedux.ViewType.Participant,lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}),isLockedForUser:!0},(exports.LockedLessonAsParticipant=Template.bind({})).args={viewAs:_viewAsRedux.ViewType.Participant,lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}).map((function(level){return _objectSpread(_objectSpread({},level),{},{isLocked:!0})})),isLockedForUser:!0},(exports.UnlockedLockableLesson=Template.bind({})).args={lesson:(0,_progressTestHelpers.fakeLesson)("Asessment Number One",1,!0),levels:(0,_progressTestHelpers.fakeLevels)(5,{named:!1}).map((function(level){return _objectSpread(_objectSpread({},level),{},{status:_sharedConstants.LevelStatus.not_tried})}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,