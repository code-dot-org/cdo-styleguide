(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9663],{"./src/code-studio/pd/form_components/ButtonList.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.otherString=exports.default=exports.ButtonList=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_utils=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/utils.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var otherString=exports.otherString="Other:",ButtonList=exports.ButtonList=function(_React$Component){function ButtonList(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"handleChange",(function(event){var value;if("radio"===_this.props.type)value=event.target.value;else if("check"===_this.props.type){var currentSelection=new Set(_this.props.selectedItems);event.target.checked?currentSelection.add(event.target.value):currentSelection.delete(event.target.value),value=currentSelection.size>0?Array.from(currentSelection):null}_this.props.onChange(_defineProperty({},_this.props.groupName,value))})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ButtonList,_React$Component);var _proto=ButtonList.prototype;return _proto.handleAnswerInputChange=function handleAnswerInputChange(answer,event){answer.onInputChange(event.target.value)},_proto.renderInputComponents=function renderInputComponents(){var _this2=this,InputComponent={radio:_reactBootstrap.Radio,check:_reactBootstrap.Checkbox}[this.props.type],answers=this.props.answers;return this.props.includeOther&&(answers=_lodash.default.concat(answers,{answerText:otherString,inputId:"".concat(this.props.groupName,"_other")})),answers.map((function(answer,i){var _utils$normalizeAnswe=_utils.default.normalizeAnswer(answer),answerText=_utils$normalizeAnswe.answerText,answerValue=_utils$normalizeAnswe.answerValue,checked="radio"===_this2.props.type?_this2.props.selectedItems===answerValue:!!(_this2.props.selectedItems&&_this2.props.selectedItems.indexOf(answerValue)>=0);return _react.default.createElement(InputComponent,{value:answerValue,label:answerText,key:i,name:_this2.props.groupName,onChange:_this2.props.onChange?_this2.handleChange:void 0,checked:_this2.props.onChange?checked:void 0},"object"===_typeof(answer)&&void 0===answer.answerValue?_react.default.createElement("div",null,_react.default.createElement("span",{style:styles.inputLabel},answerText),"Â ",_react.default.createElement("input",{type:"text",value:answer.onInputChange?answer.inputValue||"":void 0,id:answer.inputId,maxLength:"200",onChange:answer.onInputChange?_this2.handleAnswerInputChange.bind(_this2,answer):void 0})):answerText)}))},_proto.render=function render(){var validationState=this.props.validationState;this.props.errorText&&(validationState="error");var columnCount=this.props.columnCount?this.props.columnCount:1;return _react.default.createElement(_reactBootstrap.FormGroup,{id:this.props.groupName,controlId:this.props.groupName,validationState},_react.default.createElement(_reactBootstrap.ControlLabel,null,this.props.label,this.props.required&&_react.default.createElement("span",{style:{color:"red"}}," *")),_react.default.createElement(_reactBootstrap.FormGroup,{style:{columnCount}},this.renderInputComponents()),this.props.errorText&&_react.default.createElement(_reactBootstrap.HelpBlock,null,this.props.errorText),!this.props.suppressLineBreak&&_react.default.createElement("br",null))},ButtonList}(_react.default.Component);_defineProperty(ButtonList,"propTypes",{type:_propTypes.default.oneOf(["radio","check"]).isRequired,label:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.element]).isRequired,groupName:_propTypes.default.string.isRequired,answers:_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.shape({answerText:_propTypes.default.string.isRequired,inputId:_propTypes.default.string,inputValue:_propTypes.default.string,onInputChange:_propTypes.default.func}),_propTypes.default.shape({answerText:_propTypes.default.string.isRequired,answerValue:_propTypes.default.string.isRequired})])).isRequired,includeOther:_propTypes.default.bool,onChange:_propTypes.default.func,selectedItems:_propTypes.default.oneOfType([_propTypes.default.array,_propTypes.default.string]),required:_propTypes.default.bool,validationState:_propTypes.default.string,errorText:_propTypes.default.string,columnCount:_propTypes.default.number,suppressLineBreak:_propTypes.default.bool}),_defineProperty(ButtonList,"defaultProps",{suppressLineBreak:!1});var styles={inputLabel:{verticalAlign:"top",marginRight:15}};exports.default=ButtonList},"./src/code-studio/pd/form_components/utils.js":module=>{module.exports={},module.exports.normalizeAnswer=function(answer){var answerText="string"==typeof answer?answer:answer.answerText;return{answerText,answerValue:"string"==typeof answer?answer:answer.answerValue||answerText}}},"./src/code-studio/pd/form_components/ButtonList.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.RadioButtons=exports.CheckboxesWithCustom=exports.CheckboxesIncludeOther=exports.Checkboxes=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ButtonList=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/ButtonList.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_ButtonList.default};var Template=function Template(args){return _react.default.createElement(_ButtonList.default,args)};(exports.RadioButtons=Template.bind({})).args={type:"radio",label:"What is your favorite pet?",groupName:"favoritePet",answers:["Cat","Dog"]},(exports.Checkboxes=Template.bind({})).args={type:"check",label:"What is your favorite pet?",groupName:"favoritePet",answers:["Cat","Dog"]},(exports.CheckboxesIncludeOther=Template.bind({})).args={type:"check",label:"What is your favorite pet?",groupName:"favoritePet",answers:["Cat","Dog"],includeOther:!0},(exports.CheckboxesWithCustom=Template.bind({})).args={type:"check",label:"What is your favorite pet?",groupName:"favoritePet",answers:["Cat",{answerText:"Specific dog breed",inputId:"dog-breed-input"}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,