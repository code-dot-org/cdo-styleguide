(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[375],{"./src/code-studio/pd/workshop_dashboard/components/survey_results/free_response_section.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var FreeResponseSection=function(_React$Component){function FreeResponseSection(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FreeResponseSection,_React$Component);var _proto=FreeResponseSection.prototype;return _proto.renderFacilitatorsAndAnswers=function renderFacilitatorsAndAnswers(answers){var _this=this;return Object.keys(answers).map((function(facilitator_name,i){return _react.default.createElement("li",{key:i},facilitator_name,_react.default.createElement("ul",null,answers[facilitator_name].map((function(feedback,j){return _this.renderBullet(feedback,j)}))))}))},_proto.renderAnswers=function renderAnswers(answers){var _this2=this;return answers.map((function(answer,i){return _this2.renderBullet(answer,i)}))},_proto.renderBullet=function renderBullet(text,key){var trimmedText=_lodash.default.trim(text);if(trimmedText)return _react.default.createElement("li",{key},trimmedText)},_proto.renderResponseSection=function renderResponseSection(responses){if(responses)return Array.isArray(responses)?this.renderAnswers(responses):this.renderFacilitatorsAndAnswers(responses)},_proto.render=function render(){var _this3=this;return _react.default.createElement("div",null,this.props.questions.map((function(question,i){return _react.default.createElement(_reactBootstrap.Well,{key:i},_react.default.createElement("b",null,question.text),_this3.renderResponseSection(_this3.props.responseData[question.key]))})))},FreeResponseSection}(_react.default.Component);exports.default=FreeResponseSection,function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(FreeResponseSection,"propTypes",{questions:_propTypes.default.arrayOf(_propTypes.default.object).isRequired,responseData:_propTypes.default.object.isRequired}),module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/code-studio/pd/workshop_dashboard/components/survey_results/free_response_section.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.SingleFacilitator=exports.MultipleFacilitators=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_free_response_section=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/workshop_dashboard/components/survey_results/free_response_section.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default={component:_free_response_section.default};exports.default=_default;var Template=function Template(args){return _react.default.createElement("div",{id:"application-container"},_react.default.createElement(_free_response_section.default,args))},SingleFacilitator=Template.bind({});exports.SingleFacilitator=SingleFacilitator,SingleFacilitator.args={questions:[{text:"Question 1",key:"question_1"},{text:"Question 2",key:"question_2"}],responseData:{question_1:["Feedback 1_1","Feedback 1_2"],question_2:["Feedback 2_1","Feedback 2_2"]}};var MultipleFacilitators=Template.bind({});exports.MultipleFacilitators=MultipleFacilitators,MultipleFacilitators.args={questions:[{text:"Question 1",key:"question_1"},{text:"Question 2",key:"question_2"}],responseData:{question_1:{"Facilitator 1":["Q1F1 feedback","Q1F1 feedback"],"Facilitator 2":["Q1F2 feedback","Q1F2 feedback"]},question_2:{"Facilitator 1":["Q2F1 feedback","Q2F1 feedback"],"Facilitator 2":["Q2F2 feedback","Q2F2 feedback"]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,