"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[5113],{"./src/templates/SafeMarkdown.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _redactableMarkdown=_interopRequireDefault(__webpack_require__("./node_modules/@code-dot-org/redactable-markdown/dist/main.js")),_remarkPlugins=__webpack_require__("./node_modules/@code-dot-org/remark-plugins/src/index.js"),_github=_interopRequireDefault(__webpack_require__("./node_modules/hast-util-sanitize/lib/github.json")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_rehypeRaw=_interopRequireDefault(__webpack_require__("./node_modules/rehype-raw/index.js")),_rehypeReact=_interopRequireDefault(__webpack_require__("./node_modules/rehype-react/index.js")),_rehypeSanitize=_interopRequireDefault(__webpack_require__("./node_modules/rehype-sanitize/index.js")),_remarkRehype=_interopRequireDefault(__webpack_require__("./node_modules/remark-rehype/index.js")),_externalLinks=_interopRequireDefault(__webpack_require__("./src/templates/plugins/externalLinks.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var SafeMarkdown=function(_React$Component){function SafeMarkdown(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SafeMarkdown,_React$Component),SafeMarkdown.prototype.render=function render(){var rendered=(this.props.openExternalLinksInNewTab?markdownToReactExternalLinks:markdownToReact).processSync(this.props.markdown).contents,markdownProps={};return this.props.className&&(markdownProps.className=this.props.className),rendered&&"div"===rendered.type&&!Object.keys(markdownProps).length?rendered:_react.default.createElement("div",markdownProps,rendered)},SafeMarkdown}(_react.default.Component);!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SafeMarkdown,"propTypes",{markdown:_propTypes.default.string.isRequired,openExternalLinksInNewTab:_propTypes.default.bool,className:_propTypes.default.string});var schema=Object.assign({},_github.default);schema.attributes.img.push("height","width"),schema.tagNames.push("span"),schema.attributes.span=["dataUrl","className"],schema.attributes["*"].push("style","className"),schema.attributes.b=["dataId"],schema.clobber=[];var blocklyTags=["block","functional_input","mutation","next","statement","title","field","value","xml"];schema.tagNames=schema.tagNames.concat(blocklyTags);var blocklyComponentWrappers={};blocklyTags.forEach((function(tag){schema.attributes[tag]=["block_text","id","inline","name","type"],blocklyComponentWrappers[tag]=function(props){var BlocklyElement=tag;return _react.default.createElement(BlocklyElement,_extends({is:tag},props))}}));var markdownToReact=_redactableMarkdown.default.create().getParser().use([_remarkPlugins.clickableText,_remarkPlugins.expandableImages,_remarkPlugins.visualCodeBlock,_remarkPlugins.xmlAsTopLevelBlock,_remarkPlugins.details]).use(_remarkRehype.default,{allowDangerousHTML:!0}).use(_rehypeRaw.default).use(_rehypeSanitize.default,schema).use(_rehypeReact.default,{createElement:_react.default.createElement,components:blocklyComponentWrappers}),markdownToReactExternalLinks=markdownToReact().use(_externalLinks.default,{links:"all"});exports.default=SafeMarkdown;module.exports=exports.default},"./src/templates/plugins/externalLinks.js":(__unused_webpack_module,exports)=>{function isExternalLink(url){return!/https?:\/\/([^.]+\.)*code.org(:[0-9]+)?\//.test(function fullyQualified(path){return(a=a||document.createElement("a")).href=path,a.href}(url))}var a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function externalLinks(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},tokenizers=this.Parser.prototype.inlineTokenizers,original=tokenizers.link,all="all"===options.links;tokenizers.link=function(eat,value,silent){var link=original.call(this,eat,value,silent);if(link&&"link"===link.type&&(all||isExternalLink(link.url))){link.data=link.data||{},link.data.hProperties=link.data.hProperties||{};var props=link.data.hProperties;props.target=props.target||"_blank",props.rel="noreferrer noopener"}return link},tokenizers.link.locator=original.locator},exports.isExternalLink=isExternalLink},"./src/templates/progress/FocusAreaIndicator.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var styles={main:{display:"inline-block",position:"absolute",right:0,top:0,whiteSpace:"nowrap"},arrowContainer:{display:"inline-block",position:"relative",top:10},leftArrow:{display:"inline-block",width:0,height:0,borderStyle:"solid",borderWidth:"17px 20px 17px",borderColor:"transparent ".concat(_color.default.cyan," transparent transparent")},focusArea:{display:"inline-block",backgroundColor:_color.default.cyan,color:_color.default.white,height:34,lineHeight:"34px",position:"relative",top:-3},text:{display:"inline-block"},focusAreaIcon:{display:"inline-block",color:_color.default.white,lineHeight:"13px",padding:5,marginLeft:5,marginRight:5,borderRadius:4,":hover":{backgroundColor:_color.default.default_blue}}};exports.default=(0,_radium.default)((function FocusAreaIndicator(){return _react.default.createElement("div",{style:styles.main},_react.default.createElement("div",{style:styles.arrowContainer},_react.default.createElement("div",{style:styles.leftArrow})),_react.default.createElement("div",{style:styles.focusArea},_react.default.createElement("div",{style:styles.text},"Focus Area"),_react.default.createElement("a",{href:window.location.pathname+"/preview-assignments"},_react.default.createElement("div",{style:styles.focusAreaIcon,"data-tip":!0,"data-for":"focus-area"},_react.default.createElement(_FontAwesome.default,{icon:"pencil"})))),_react.default.createElement(_reactTooltip.default,{id:"focus-area",role:"tooltip",effect:"solid"},"Click to change your focus area."))}));module.exports=exports.default},"./src/templates/progress/ProgressBubbleSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressBubbleSet=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_ProgressBubble=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubble.jsx")),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressBubbleSet=function(_React$Component){function ProgressBubbleSet(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"renderBubble",(function(level,index,isSublevel){var _this$props=_this.props,levels=_this$props.levels,selectedSectionId=_this$props.selectedSectionId,selectedStudentId=_this$props.selectedStudentId,isRtl=_this$props.isRtl,backgroundFirstStyle=isRtl?styles.backgroundLast:styles.backgroundFirst,backgroundLastStyle=isRtl?styles.backgroundFirst:styles.backgroundLast,backgroundStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.background),level.isConceptLevel&&styles.backgroundDiamond),isSublevel&&styles.backgroundSublevel),level.isUnplugged&&styles.backgroundPill),!isSublevel&&0===index&&backgroundFirstStyle),!isSublevel&&!level.sublevels&&index===levels.length-1&&backgroundLastStyle),containerStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.container),level.isUnplugged&&styles.pillContainer),level.isConceptLevel&&styles.diamondContainer),isSublevel&&styles.containerSublevel);return _react.default.createElement("div",{style:styles.withBackground,key:index},_react.default.createElement("div",{style:backgroundStyleProp}),_react.default.createElement("div",{style:containerStyleProp},_react.default.createElement(_ProgressBubble.default,{level,disabled:_this.props.disabled,smallBubble:isSublevel,selectedSectionId,selectedStudentId,hideToolTips:_this.props.hideToolTips,onClick:_this.props.onBubbleClick,lessonName:_this.props.lessonName})))})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBubbleSet,_React$Component),ProgressBubbleSet.prototype.render=function render(){var _this2=this,_this$props2=this.props,levels=_this$props2.levels,style=_this$props2.style,showSublevels=_this$props2.showSublevels;return _react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),style)},levels.map((function(level,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(level,index,!1),showSublevels&&level.sublevels&&level.sublevels.map((function(sublevel,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(sublevel,index,!0))})))})))},ProgressBubbleSet}(_react.default.Component);_defineProperty(ProgressBubbleSet,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,style:_propTypes.default.object,selectedSectionId:_propTypes.default.number,selectedStudentId:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),hideToolTips:_propTypes.default.bool,lessonExtrasEnabled:_propTypes.default.bool,showSublevels:_propTypes.default.bool,onBubbleClick:_propTypes.default.func,lessonName:_propTypes.default.string,isRtl:_propTypes.default.bool});var styles={main:{position:"relative",display:"inline-block"},withBackground:{display:"inline-block",position:"relative"},background:{height:10,backgroundColor:_color.default.lighter_gray,position:"absolute",left:0,right:0,top:(_progressStyles.DOT_SIZE+4+6-10)/2},backgroundDiamond:{top:(_progressStyles.DIAMOND_DOT_SIZE+4+12-10)/2},backgroundPill:{top:15},backgroundSublevel:{top:9},backgroundFirst:{left:15},backgroundLast:{right:15},container:{position:"relative"},containerSublevel:{top:5},diamondContainer:{height:36},pillContainer:{marginRight:2,height:37}};exports.UnconnectedProgressBubbleSet=ProgressBubbleSet,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressBubbleSet))},"./src/templates/progress/ProgressLesson.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressLesson=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_reactTooltip=_interopRequireDefault(__webpack_require__("./node_modules/react-tooltip/dist/index.js")),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_firehose=_interopRequireDefault(__webpack_require__("./src/lib/util/firehose.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_FocusAreaIndicator=_interopRequireDefault(__webpack_require__("./src/templates/progress/FocusAreaIndicator.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_ProgressLessonContent=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonContent.jsx")),_ProgressLessonTeacherInfo=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonTeacherInfo.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLesson=function(_React$Component){function ProgressLesson(props){var _this;return _defineProperty(_this=_React$Component.call(this,props)||this,"toggleCollapsed",(function(){return _this.setState({collapsed:!_this.state.collapsed})})),_defineProperty(_this,"onClickStudentLessonPlan",(function(){_firehose.default.putRecord({study:"script_overview_actions",study_group:"student_lesson_plan",event:"open_student_lesson_plan",data_json:JSON.stringify({lesson_id:_this.props.lesson.id,script_id:_this.props.scriptId})},{includeUserId:!0})})),_this.state={collapsed:props.viewAs!==_viewAsRedux.ViewType.Instructor&&props.currentLessonId!==props.lesson.id},_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLesson,_React$Component);var _proto=ProgressLesson.prototype;return _proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(nextProps){nextProps.currentLessonId!==this.props.currentLessonId&&this.setState({collapsed:this.state.collapsed&&nextProps.currentLessonId!==this.props.lesson.id})},_proto.render=function render(){var _this2=this,_this$props=this.props,lesson=_this$props.lesson,levels=_this$props.levels,viewAs=_this$props.viewAs,isVisible=_this$props.isVisible,hiddenForStudents=_this$props.hiddenForStudents,isLockedForUser=_this$props.isLockedForUser,isLockedForAllStudents=_this$props.isLockedForAllStudents,selectedSectionId=_this$props.selectedSectionId,isRtl=_this$props.isRtl;if(!isVisible)return null;var showAsLocked=isLockedForUser||isLockedForAllStudents,title=lesson.lessonNumber?_locale.default.lessonNumbered({lessonNumber:lesson.lessonNumber,lessonName:lesson.name}):lesson.name,caretStyle=isRtl?styles.caretRTL:styles.caret,caret=this.state.collapsed?"caret-right":"caret-down",lockedTooltipId=_lodash.default.uniqueId(),description=viewAs===_viewAsRedux.ViewType.Instructor?lesson.description_teacher:lesson.description_student,lessonUrl=levels[0]&&levels[0].url,showNotAuthorizedWarning=lesson.lockable&&viewAs===_viewAsRedux.ViewType.Instructor&&this.props.lockableAuthorizedLoaded&&!this.props.lockableAuthorized;return _react.default.createElement("div",{id:"progress-lesson-".concat(lesson.lessonNumber),className:"uitest-progress-lesson",style:_objectSpread(_objectSpread({},styles.outer),(hiddenForStudents||showAsLocked)&&styles.hiddenOrLocked)},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),(hiddenForStudents&&viewAs===_viewAsRedux.ViewType.Participant||isLockedForUser)&&styles.translucent)},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.heading),{marginBottom:this.state.collapsed?0:15})},_react.default.createElement("div",{style:styles.headingText,onClick:this.toggleCollapsed,tabIndex:"0",role:"button",onKeyDown:function onKeyDown(e){[" ","Enter","Spacebar"].includes(e.key)&&(e.preventDefault(),_this2.toggleCollapsed())},"aria-expanded":!this.state.collapsed},_react.default.createElement(_FontAwesome.default,{icon:caret,style:caretStyle}),hiddenForStudents&&_react.default.createElement(_FontAwesome.default,{icon:"eye-slash",style:styles.icon}),lesson.lockable&&this.props.lockStatusLoaded&&_react.default.createElement("span",{"data-tip":!0,"data-for":lockedTooltipId},_react.default.createElement(_FontAwesome.default,{icon:showAsLocked?"lock":"unlock",style:_objectSpread(_objectSpread({},styles.icon),!showAsLocked&&styles.unlockedIcon)}),!showAsLocked&&viewAs===_viewAsRedux.ViewType.Instructor&&_react.default.createElement(_reactTooltip.default,{id:lockedTooltipId,role:"tooltip",wrapper:"span",effect:"solid"},_locale.default.lockAssessmentLong())),_react.default.createElement("span",null,title)),viewAs===_viewAsRedux.ViewType.Participant&&lesson.student_lesson_plan_html_url&&_react.default.createElement("span",{style:styles.buttonStyle},_react.default.createElement(_Button.default,{__useDeprecatedTag:!0,className:"ui-test-lesson-resources",href:lesson.student_lesson_plan_html_url,text:_locale.default.lessonResources(),icon:"file-text",color:"purple",target:"_blank",onClick:this.onClickStudentLessonPlan}))),showNotAuthorizedWarning&&_react.default.createElement("div",{style:styles.notAuthorizedWarning},_locale.default.unverifiedTeacherLockWarning(),_react.default.createElement("a",{style:styles.learnMoreLink,href:"https://support.code.org/hc/en-us/articles/115001550131-Becoming-a-verified-teacher-CS-Principles-and-CS-Discoveries-only-"},_locale.default.learnMoreWithPeriod())),!this.state.collapsed&&_react.default.createElement(_ProgressLessonContent.default,{description,levels,disabled:isLockedForUser,selectedSectionId,lessonName:lesson.name})),viewAs===_viewAsRedux.ViewType.Instructor&&!this.props.isMiniView&&_react.default.createElement(_ProgressLessonTeacherInfo.default,{lesson,lessonUrl,onClickStudentLessonPlan:this.onClickStudentLessonPlan}),lesson.isFocusArea&&_react.default.createElement(_FocusAreaIndicator.default,null))},ProgressLesson}(_react.default.Component);_defineProperty(ProgressLesson,"propTypes",{lesson:_progressTypes.lessonType.isRequired,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,scriptId:_propTypes.default.number,currentLessonId:_propTypes.default.number,viewAs:_propTypes.default.oneOf(Object.values(_viewAsRedux.ViewType)).isRequired,isVisible:_propTypes.default.bool.isRequired,hiddenForStudents:_propTypes.default.bool.isRequired,isLockedForUser:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,lockableAuthorized:_propTypes.default.bool,lockableAuthorizedLoaded:_propTypes.default.bool.isRequired,isLockedForAllStudents:_propTypes.default.bool.isRequired,isRtl:_propTypes.default.bool,isMiniView:_propTypes.default.bool,lockStatusLoaded:_propTypes.default.bool.isRequired});var styles={outer:{position:"relative",display:"table",width:"100%",height:"100%",background:_color.default.lightest_gray,borderColor:_color.default.border_gray,borderStyle:"solid",borderRadius:2,borderWidth:1,marginTop:3,marginBottom:15,marginLeft:3,marginRight:3},main:{padding:20},heading:_objectSpread(_objectSpread({fontSize:18},_fontConstants.default["main-font-semi-bold"]),{},{display:"flex",alignItems:"center"}),headingText:{cursor:"pointer",flexGrow:1},buttonStyle:{marginLeft:"auto"},hiddenOrLocked:{borderStyle:"dashed",borderWidth:4,marginTop:0,marginBottom:12,marginLeft:0,marginRight:0},translucent:{opacity:.6},caret:{marginRight:10},caretRTL:{marginLeft:10},icon:{marginRight:5,fontSize:18,color:_color.default.cyan},unlockedIcon:{color:_color.default.orange},notAuthorizedWarning:_objectSpread(_objectSpread({color:_color.default.red},_fontConstants.default["main-font-semi-bold-italic"]),{},{marginTop:10}),learnMoreLink:{marginLeft:5}};exports.UnconnectedProgressLesson=ProgressLesson,exports.default=(0,_reactRedux.connect)((function(state,ownProps){return{currentLessonId:state.progress.currentLessonId,viewAs:state.viewAs,lockableAuthorized:state.lessonLock.lockableAuthorized,lockableAuthorizedLoaded:state.lessonLock.lockableAuthorizedLoaded,isVisible:(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,state.viewAs),hiddenForStudents:!(0,_progressHelpers.lessonIsVisible)(ownProps.lesson,state,_viewAsRedux.ViewType.Participant),isLockedForUser:(0,_progressHelpers.lessonIsLockedForUser)(ownProps.lesson,ownProps.levels,state,state.viewAs),isLockedForAllStudents:(0,_progressHelpers.lessonIsLockedForAllStudents)(ownProps.lesson.id,state),selectedSectionId:state.teacherSections.selectedSectionId,scriptId:state.progress.scriptId,isRtl:state.isRtl,isMiniView:state.progress.isMiniView,lockStatusLoaded:state.progress.unitProgressHasLoaded&&state.lessonLock.lessonsBySectionIdLoaded}}))(ProgressLesson)},"./src/templates/progress/ProgressLessonContent.jsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_progressReduxSelectors=__webpack_require__("./src/code-studio/progressReduxSelectors.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_SafeMarkdown=_interopRequireDefault(__webpack_require__("./src/templates/SafeMarkdown.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_ProgressLevelSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLevelSet.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_defineProperty(exports.default=function(_React$Component){function ProgressLessonContent(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLessonContent,_React$Component),ProgressLessonContent.prototype.render=function render(){var bubbles,_this$props=this.props,description=_this$props.description,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,lessonName=_this$props.lessonName,progressions=(0,_progressReduxSelectors.progressionsFromLevels)(levels);return bubbles=0===progressions.length?_react.default.createElement("span",{style:styles.noLevelsWarning},_locale.default.lessonContainsNoLevels()):1!==progressions.length||progressions[0].name?progressions.map((function(progression,index){return _react.default.createElement(_ProgressLevelSet.default,{key:index,name:progression.displayName,lessonName,levels:progression.levels,disabled,selectedSectionId})})):_react.default.createElement(_ProgressBubbleSet.default,{levels:progressions[0].levels,disabled,selectedSectionId}),_react.default.createElement("div",null,description&&_react.default.createElement("div",{style:styles.summary},_react.default.createElement(_SafeMarkdown.default,{markdown:description})),_react.default.createElement("div",null," ",bubbles," "))},ProgressLessonContent}(_react.default.Component),"propTypes",{description:_propTypes.default.string,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,lessonName:_propTypes.default.string});var styles={summary:function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}({marginTop:20,marginBottom:30,fontSize:14},_fontConstants.default["main-font-regular"]),noLevelsWarning:{fontSize:13}};module.exports=exports.default},"./src/templates/progress/ProgressLevelSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressLevelSet=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_ProgressPill=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressPill.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLevelSet=function(_React$Component){function ProgressLevelSet(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLevelSet,_React$Component),ProgressLevelSet.prototype.render=function render(){var pillText,icon,_this$props=this.props,name=_this$props.name,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,onBubbleClick=_this$props.onBubbleClick,isRtl=_this$props.isRtl,lessonName=_this$props.lessonName,multiLevelStep=levels.length>1,url=multiLevelStep||onBubbleClick?void 0:levels[0].url,onClick=multiLevelStep?void 0:function(){return onBubbleClick(levels[0])},col2Style=isRtl?styles.col2RTL:styles.col2,progressStyle=!1;return levels[0].isUnplugged||levels[levels.length-1].isUnplugged?multiLevelStep?(pillText="",icon=(0,_progressHelpers.getIconForLevel)(levels[0])):(pillText=_locale.default.unpluggedActivity(),progressStyle=!0):(pillText=levels[0].levelNumber.toString(),icon=(0,_progressHelpers.getIconForLevel)(levels[0]),multiLevelStep&&(pillText+="-".concat(levels[levels.length-1].levelNumber))),_react.default.createElement("table",{style:styles.table},_react.default.createElement("tbody",null,_react.default.createElement("tr",null,_react.default.createElement("td",{style:styles.col1},_react.default.createElement(_ProgressPill.default,{levels,icon,text:pillText,disabled,selectedSectionId,progressStyle,onSingleLevelClick:onBubbleClick})),_react.default.createElement("td",{style:col2Style},_react.default.createElement("a",{href:url,onClick},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.nameText),styles.text)},name)))),multiLevelStep&&_react.default.createElement("tr",null,_react.default.createElement("td",null,_react.default.createElement("div",{style:styles.linesAndDot},_react.default.createElement("div",{style:styles.verticalLine}),_react.default.createElement("div",{style:styles.horizontalLine}),_react.default.createElement("div",{style:styles.dot}))),_react.default.createElement("td",{style:styles.col2},_react.default.createElement(_ProgressBubbleSet.default,{levels,disabled,selectedSectionId,onBubbleClick,lessonName})))))},ProgressLevelSet}(_react.default.Component);_defineProperty(ProgressLevelSet,"propTypes",{name:_propTypes.default.string,lessonName:_propTypes.default.string,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,onBubbleClick:_propTypes.default.func,isRtl:_propTypes.default.bool});var styles={table:{marginTop:12},nameText:{color:_color.default.charcoal},text:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:14,letterSpacing:-.12}),col2:{paddingLeft:20},col2RTL:{paddingRight:20},linesAndDot:{whiteSpace:"nowrap",marginLeft:"50%",marginRight:14},verticalLine:{display:"inline-block",backgroundColor:_color.default.lighter_gray,height:15,width:3,position:"relative",bottom:2},horizontalLine:{display:"inline-block",backgroundColor:_color.default.lighter_gray,position:"relative",top:-2,height:3,width:"100%"},dot:{display:"inline-block",position:"relative",left:-2,top:1,backgroundColor:_color.default.lighter_gray,height:10,width:10,borderRadius:10}};exports.UnconnectedProgressLevelSet=ProgressLevelSet,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressLevelSet))},"./src/templates/progress/ProgressPill.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressPill=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_utils=__webpack_require__("./src/code-studio/utils.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/FontAwesome.jsx")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressPill=function(_React$Component){function ProgressPill(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressPill,_React$Component);var _proto=ProgressPill.prototype;return _proto.getUrl=function getUrl(){var _this$props=this.props,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,onSingleLevelClick=_this$props.onSingleLevelClick;if(!disabled&&!onSingleLevelClick&&1===levels.length){var userId=(0,_utils.queryParams)("user_id");return(0,_BubbleFactory.getBubbleUrl)(levels[0].url,userId,selectedSectionId)}},_proto.getTooltipProps=function getTooltipProps(){var tooltip=this.props.tooltip,tooltipProps={};if(tooltip){var id=tooltip.props.tooltipId;tooltipProps["data-tip"]=!0,tooltipProps["data-for"]=id,tooltipProps["aria-describedby"]=id}return tooltipProps},_proto.render=function render(){var _this$props2=this.props,levels=_this$props2.levels,icon=_this$props2.icon,text=_this$props2.text,tooltip=_this$props2.tooltip,disabled=_this$props2.disabled,progressStyle=_this$props2.progressStyle,isRtl=_this$props2.isRtl,onSingleLevelClick=_this$props2.onSingleLevelClick,firstLevel=levels[0],multiLevelStep=levels.length>1,url=this.getUrl(),onClick=multiLevelStep||disabled||url?void 0:function(){return onSingleLevelClick(firstLevel)},style=_objectSpread(_objectSpread(_objectSpread({},styles.levelPill),(url||onClick)&&_progressStyles.hoverStyle),!multiLevelStep&&(0,_progressStyles.levelProgressStyle)(firstLevel.status,firstLevel.kind)),iconMarginStyle=isRtl?styles.iconMarginRTL:styles.iconMargin,tooltipProps=this.getTooltipProps(),hasKeepWorkingFeedback=firstLevel.teacherFeedbackReviewState===_types.ReviewStates.keepWorking,displayBadge=!multiLevelStep&&(hasKeepWorkingFeedback||(0,_progressHelpers.isLevelAssessment)(firstLevel)),textStyle=progressStyle?styles.textProgressStyle:styles.text;return _react.default.createElement("a",{href:url,style:{textDecoration:"none"},className:"uitest-ProgressPill",onClick},_react.default.createElement("div",_extends({},tooltipProps,{style}),icon&&_react.default.createElement(_FontAwesome.default,{icon}),text&&_react.default.createElement("div",{className:"ProgressPillTextAndIcon",style:_objectSpread(_objectSpread({},textStyle),icon&&iconMarginStyle)},text),tooltip,displayBadge&&_react.default.createElement(_BubbleBadge.default,{badgeType:hasKeepWorkingFeedback?_BubbleBadge.BadgeType.keepWorking:_BubbleBadge.BadgeType.assessment,bubbleSize:_BubbleFactory.BubbleSize.full,bubbleShape:_BubbleFactory.BubbleShape.pill})))},ProgressPill}(_react.default.Component);_defineProperty(ProgressPill,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType),icon:_propTypes.default.string,text:_propTypes.default.string,tooltip:_propTypes.default.element,disabled:_propTypes.default.bool,selectedSectionId:_propTypes.default.number,progressStyle:_propTypes.default.bool,onSingleLevelClick:_propTypes.default.func,isRtl:_propTypes.default.bool});var styles={levelPill:_objectSpread(_objectSpread({textAlign:"center",justifyContent:"center",borderWidth:2,borderStyle:"solid",borderColor:_color.default.lighter_gray,color:_color.default.charcoal,display:"flex",fontSize:16},_fontConstants.default["main-font-semi-bold"]),{},{borderRadius:20,paddingLeft:10,paddingRight:10,paddingTop:6,paddingBottom:6,minWidth:70,lineHeight:"18px",marginTop:3,marginBottom:3,position:"relative"}),text:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{letterSpacing:-.12}),textProgressStyle:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:12,letterSpacing:-.12,width:120,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}),iconMargin:{marginLeft:10},iconMarginRTL:{marginRight:10}};exports.UnconnectedProgressPill=ProgressPill,exports.default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressPill))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,