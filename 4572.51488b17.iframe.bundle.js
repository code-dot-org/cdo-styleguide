/*! For license information please see 4572.51488b17.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4572],{"./node_modules/slate-react/dist/index.es.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.useSlate=exports.useSelected=exports.useReadOnly=exports.useFocused=exports.useEditor=exports.Slate=exports.ReactEditor=exports.Editable=exports.DefaultPlaceholder=exports.DefaultLeaf=exports.DefaultElement=exports.DefaultEditable=exports.AndroidEditable=void 0,exports.useSlateSelector=function useSlateSelector(selector){var equalityFn=arguments.length>1&&void 0!==arguments[1]?arguments[1]:refEquality,forceRender=_slicedToArray((0,_react.useReducer)((function(s){return s+1}),0),2)[1],context=(0,_react.useContext)(SlateSelectorContext);if(!context)throw new Error("The `useSlateSelector` hook must be used inside the <Slate> component's context.");var selectedState,getSlate=context.getSlate,addEventListener=context.addEventListener,latestSubscriptionCallbackError=(0,_react.useRef)(),latestSelector=(0,_react.useRef)((function(){return null})),latestSelectedState=(0,_react.useRef)(null);try{selectedState=selector!==latestSelector.current||latestSubscriptionCallbackError.current?selector(getSlate()):latestSelectedState.current}catch(err){throw latestSubscriptionCallbackError.current&&function isError(error){return error instanceof Error}(err)&&(err.message+="\nThe error may be correlated with this previous error:\n".concat(latestSubscriptionCallbackError.current.stack,"\n\n")),err}return useIsomorphicLayoutEffect((function(){latestSelector.current=selector,latestSelectedState.current=selectedState,latestSubscriptionCallbackError.current=void 0})),useIsomorphicLayoutEffect((function(){function checkForUpdates(){try{var newSelectedState=latestSelector.current(getSlate());if(equalityFn(newSelectedState,latestSelectedState.current))return;latestSelectedState.current=newSelectedState}catch(err){latestSubscriptionCallbackError.current=err}forceRender()}var unsubscribe=addEventListener(checkForUpdates);return checkForUpdates(),function(){return unsubscribe()}}),[addEventListener,getSlate]),selectedState},exports.withReact=exports.useSlateStatic=void 0;var _react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_slate=__webpack_require__("./node_modules/slate/dist/index.es.js"),_direction=_interopRequireDefault(__webpack_require__("./node_modules/direction/index.js")),_debounce=_interopRequireDefault(__webpack_require__("./node_modules/lodash/debounce.js")),_throttle=_interopRequireDefault(__webpack_require__("./node_modules/lodash/throttle.js")),_scrollIntoViewIfNeeded=_interopRequireDefault(__webpack_require__("./node_modules/scroll-into-view-if-needed/es/index.js")),_isHotkey=__webpack_require__("./node_modules/is-hotkey/lib/index.js"),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _defineProperty2(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var IS_REACT_VERSION_17_OR_ABOVE=parseInt(_react.default.version.split(".")[0],10)>=17,IS_IOS="undefined"!=typeof navigator&&"undefined"!=typeof window&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,IS_APPLE="undefined"!=typeof navigator&&/Mac OS X/.test(navigator.userAgent),IS_ANDROID="undefined"!=typeof navigator&&/Android/.test(navigator.userAgent),IS_FIREFOX="undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent),IS_SAFARI="undefined"!=typeof navigator&&/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),IS_EDGE_LEGACY="undefined"!=typeof navigator&&/Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent),IS_CHROME="undefined"!=typeof navigator&&/Chrome/i.test(navigator.userAgent),IS_CHROME_LEGACY="undefined"!=typeof navigator&&/Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent),IS_FIREFOX_LEGACY="undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent),IS_QQBROWSER="undefined"!=typeof navigator&&/.*QQBrowser/.test(navigator.userAgent),IS_UC_MOBILE="undefined"!=typeof navigator&&/.*UCBrowser/.test(navigator.userAgent),IS_WECHATBROWSER="undefined"!=typeof navigator&&/.*Wechat/.test(navigator.userAgent),CAN_USE_DOM=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),HAS_BEFORE_INPUT_SUPPORT=!IS_CHROME_LEGACY&&!IS_EDGE_LEGACY&&"undefined"!=typeof globalThis&&globalThis.InputEvent&&"function"==typeof globalThis.InputEvent.prototype.getTargetRanges,useIsomorphicLayoutEffect=CAN_USE_DOM?_react.useLayoutEffect:_react.useEffect,_String=function String(props){var isLast=props.isLast,leaf=props.leaf,parent=props.parent,text=props.text,editor=useSlateStatic(),path=ReactEditor.findPath(editor,text),parentPath=_slate.Path.parent(path);return editor.isVoid(parent)?_react.default.createElement(ZeroWidthString,{length:_slate.Node.string(parent).length}):""!==leaf.text||parent.children[parent.children.length-1]!==text||editor.isInline(parent)||""!==_slate.Editor.string(editor,parentPath)?""===leaf.text?_react.default.createElement(ZeroWidthString,null):isLast&&"\n"===leaf.text.slice(-1)?_react.default.createElement(TextString,{isTrailing:!0,text:leaf.text}):_react.default.createElement(TextString,{text:leaf.text}):_react.default.createElement(ZeroWidthString,{isLineBreak:!0})},TextString=function TextString(props){var text=props.text,_props$isTrailing=props.isTrailing,isTrailing=void 0!==_props$isTrailing&&_props$isTrailing,ref=(0,_react.useRef)(null),getTextContent=function getTextContent(){return"".concat(null!=text?text:"").concat(isTrailing?"\n":"")};return useIsomorphicLayoutEffect((function(){var textWithTrailing=getTextContent();ref.current&&ref.current.textContent!==textWithTrailing&&(ref.current.textContent=textWithTrailing)})),ref.current?_react.default.createElement("span",{"data-slate-string":!0,ref}):_react.default.createElement("span",{"data-slate-string":!0,ref},getTextContent())},ZeroWidthString=function ZeroWidthString(props){var _props$length=props.length,length=void 0===_props$length?0:_props$length,_props$isLineBreak=props.isLineBreak,isLineBreak=void 0!==_props$isLineBreak&&_props$isLineBreak;return _react.default.createElement("span",{"data-slate-zero-width":isLineBreak?"n":"z","data-slate-length":length},"\ufeff",isLineBreak?_react.default.createElement("br",null):null)},NODE_TO_INDEX=new WeakMap,NODE_TO_PARENT=new WeakMap,EDITOR_TO_WINDOW=new WeakMap,EDITOR_TO_ELEMENT=new WeakMap,ELEMENT_TO_NODE=new WeakMap,NODE_TO_ELEMENT=new WeakMap,NODE_TO_KEY=new WeakMap,EDITOR_TO_KEY_TO_ELEMENT=new WeakMap,IS_READ_ONLY=new WeakMap,IS_FOCUSED=new WeakMap,IS_COMPOSING=new WeakMap,IS_ON_COMPOSITION_END=new WeakMap,EDITOR_TO_USER_SELECTION=new WeakMap,EDITOR_ON_COMPOSITION_TEXT=new WeakMap,EDITOR_TO_ON_CHANGE=new WeakMap,NODE_TO_RESTORE_DOM=new WeakMap,PLACEHOLDER_SYMBOL=Symbol("placeholder"),Leaf=function Leaf(props){var leaf=props.leaf,isLast=props.isLast,text=props.text,parent=props.parent,renderPlaceholder=props.renderPlaceholder,_props$renderLeaf=props.renderLeaf,renderLeaf=void 0===_props$renderLeaf?function(props){return _react.default.createElement(DefaultLeaf,Object.assign({},props))}:_props$renderLeaf,placeholderRef=(0,_react.useRef)(null);(0,_react.useEffect)((function(){var placeholderEl=null==placeholderRef?void 0:placeholderRef.current,editorEl=document.querySelector('[data-slate-editor="true"]');if(placeholderEl&&editorEl)return editorEl.style.minHeight="".concat(placeholderEl.clientHeight,"px"),function(){editorEl.style.minHeight="auto"}}),[placeholderRef,leaf]);var children=_react.default.createElement(_String,{isLast,leaf,parent,text});if(leaf[PLACEHOLDER_SYMBOL]){var placeholderProps={children:leaf.placeholder,attributes:{"data-slate-placeholder":!0,style:{position:"absolute",pointerEvents:"none",width:"100%",maxWidth:"100%",display:"block",opacity:"0.333",userSelect:"none",textDecoration:"none"},contentEditable:!1,ref:placeholderRef}};children=_react.default.createElement(_react.default.Fragment,null,renderPlaceholder(placeholderProps),children)}return renderLeaf({attributes:{"data-slate-leaf":!0},children,leaf,text})},MemoizedLeaf=_react.default.memo(Leaf,(function(prev,next){return next.parent===prev.parent&&next.isLast===prev.isLast&&next.renderLeaf===prev.renderLeaf&&next.renderPlaceholder===prev.renderPlaceholder&&next.text===prev.text&&_slate.Text.equals(next.leaf,prev.leaf)&&next.leaf[PLACEHOLDER_SYMBOL]===prev.leaf[PLACEHOLDER_SYMBOL]})),DefaultLeaf=exports.DefaultLeaf=function DefaultLeaf(props){var attributes=props.attributes,children=props.children;return _react.default.createElement("span",Object.assign({},attributes),children)},_excluded$3=["anchor","focus"],_excluded2=["anchor","focus"],shallowCompare=function shallowCompare(obj1,obj2){return Object.keys(obj1).length===Object.keys(obj2).length&&Object.keys(obj1).every((function(key){return obj2.hasOwnProperty(key)&&obj1[key]===obj2[key]}))},isDecoratorRangeListEqual=function isDecoratorRangeListEqual(list,another){if(list.length!==another.length)return!1;for(var i=0;i<list.length;i++){var range=list[i],other=another[i],rangeOwnProps=_objectWithoutProperties(range,_excluded$3),otherOwnProps=_objectWithoutProperties(other,_excluded2);if(!_slate.Range.equals(range,other)||range[PLACEHOLDER_SYMBOL]!==other[PLACEHOLDER_SYMBOL]||!shallowCompare(rangeOwnProps,otherOwnProps))return!1}return!0};function useContentKey(node){var contentKeyRef=(0,_react.useRef)(0),updateAnimationFrameRef=(0,_react.useRef)(null),setForceRerenderCounter=_slicedToArray((0,_react.useState)(0),2)[1];return(0,_react.useEffect)((function(){return NODE_TO_RESTORE_DOM.set(node,(function(){updateAnimationFrameRef.current||(updateAnimationFrameRef.current=requestAnimationFrame((function(){setForceRerenderCounter((function(state){return state+1})),updateAnimationFrameRef.current=null})),contentKeyRef.current++)})),function(){NODE_TO_RESTORE_DOM.delete(node)}}),[node]),updateAnimationFrameRef.current&&(cancelAnimationFrame(updateAnimationFrameRef.current),updateAnimationFrameRef.current=null),contentKeyRef.current}var Text=function Text(props){for(var decorations=props.decorations,isLast=props.isLast,parent=props.parent,renderPlaceholder=props.renderPlaceholder,renderLeaf=props.renderLeaf,text=props.text,editor=useSlateStatic(),ref=(0,_react.useRef)(null),leaves=_slate.Text.decorations(text,decorations),key=ReactEditor.findKey(editor,text),children=[],i=0;i<leaves.length;i++){var leaf=leaves[i];children.push(_react.default.createElement(MemoizedLeaf,{isLast:isLast&&i===leaves.length-1,key:"".concat(key.id,"-").concat(i),renderPlaceholder,leaf,text,parent,renderLeaf}))}useIsomorphicLayoutEffect((function(){var KEY_TO_ELEMENT=EDITOR_TO_KEY_TO_ELEMENT.get(editor);ref.current?(null==KEY_TO_ELEMENT||KEY_TO_ELEMENT.set(key,ref.current),NODE_TO_ELEMENT.set(text,ref.current),ELEMENT_TO_NODE.set(ref.current,text)):(null==KEY_TO_ELEMENT||KEY_TO_ELEMENT.delete(key),NODE_TO_ELEMENT.delete(text))}));var contentKey=IS_ANDROID?useContentKey(text):void 0;return _react.default.createElement("span",{"data-slate-node":"text",ref,key:contentKey},children)},MemoizedText=_react.default.memo(Text,(function(prev,next){return next.parent===prev.parent&&next.isLast===prev.isLast&&next.renderLeaf===prev.renderLeaf&&next.text===prev.text&&isDecoratorRangeListEqual(next.decorations,prev.decorations)})),Element=function Element(props){var decorations=props.decorations,element=props.element,_props$renderElement=props.renderElement,renderElement=void 0===_props$renderElement?function(p){return _react.default.createElement(DefaultElement,Object.assign({},p))}:_props$renderElement,renderPlaceholder=props.renderPlaceholder,renderLeaf=props.renderLeaf,selection=props.selection,ref=(0,_react.useRef)(null),editor=useSlateStatic(),readOnly=useReadOnly(),isInline=editor.isInline(element),key=ReactEditor.findKey(editor,element),children=useChildren({decorations,node:element,renderElement,renderPlaceholder,renderLeaf,selection}),attributes={"data-slate-node":"element",ref};if(isInline&&(attributes["data-slate-inline"]=!0),!isInline&&_slate.Editor.hasInlines(editor,element)){var text=_slate.Node.string(element),dir=(0,_direction.default)(text);"rtl"===dir&&(attributes.dir=dir)}if(_slate.Editor.isVoid(editor,element)){attributes["data-slate-void"]=!0,!readOnly&&isInline&&(attributes.contentEditable=!1);var Tag=isInline?"span":"div",_Node$texts2=_slicedToArray(_slate.Node.texts(element),1),_text=_slicedToArray(_Node$texts2[0],1)[0];children=_react.default.createElement(Tag,{"data-slate-spacer":!0,style:{height:"0",color:"transparent",outline:"none",position:"absolute"}},_react.default.createElement(MemoizedText,{renderPlaceholder,decorations:[],isLast:!1,parent:element,text:_text})),NODE_TO_INDEX.set(_text,0),NODE_TO_PARENT.set(_text,element)}useIsomorphicLayoutEffect((function(){var KEY_TO_ELEMENT=EDITOR_TO_KEY_TO_ELEMENT.get(editor);ref.current?(null==KEY_TO_ELEMENT||KEY_TO_ELEMENT.set(key,ref.current),NODE_TO_ELEMENT.set(element,ref.current),ELEMENT_TO_NODE.set(ref.current,element)):(null==KEY_TO_ELEMENT||KEY_TO_ELEMENT.delete(key),NODE_TO_ELEMENT.delete(element))}));var content=renderElement({attributes,children,element});if(IS_ANDROID){var contentKey=useContentKey(element);return _react.default.createElement(_react.Fragment,{key:contentKey},content)}return content},MemoizedElement=_react.default.memo(Element,(function(prev,next){return prev.element===next.element&&prev.renderElement===next.renderElement&&prev.renderLeaf===next.renderLeaf&&isDecoratorRangeListEqual(prev.decorations,next.decorations)&&(prev.selection===next.selection||!!prev.selection&&!!next.selection&&_slate.Range.equals(prev.selection,next.selection))})),DefaultElement=exports.DefaultElement=function DefaultElement(props){var attributes=props.attributes,children=props.children,element=props.element,Tag=useSlateStatic().isInline(element)?"span":"div";return _react.default.createElement(Tag,Object.assign({},attributes,{style:{position:"relative"}}),children)},EditorContext=(0,_react.createContext)(null),useSlateStatic=exports.useSlateStatic=function useSlateStatic(){var editor=(0,_react.useContext)(EditorContext);if(!editor)throw new Error("The `useSlateStatic` hook must be used inside the <Slate> component's context.");return editor},DecorateContext=(0,_react.createContext)((function(){return[]})),SelectedContext=(0,_react.createContext)(!1),useChildren=(exports.useSelected=function useSelected(){return(0,_react.useContext)(SelectedContext)},function useChildren(props){for(var decorations=props.decorations,node=props.node,renderElement=props.renderElement,renderPlaceholder=props.renderPlaceholder,renderLeaf=props.renderLeaf,selection=props.selection,decorate=function useDecorate(){return(0,_react.useContext)(DecorateContext)}(),editor=useSlateStatic(),path=ReactEditor.findPath(editor,node),children=[],isLeafBlock=_slate.Element.isElement(node)&&!editor.isInline(node)&&_slate.Editor.hasInlines(editor,node),i=0;i<node.children.length;i++){var _step,p=path.concat(i),n=node.children[i],key=ReactEditor.findKey(editor,n),range=_slate.Editor.range(editor,p),sel=selection&&_slate.Range.intersection(range,selection),ds=decorate([n,p]),_iterator=_createForOfIteratorHelper(decorations);try{for(_iterator.s();!(_step=_iterator.n()).done;){var dec=_step.value,d=_slate.Range.intersection(dec,range);d&&ds.push(d)}}catch(err){_iterator.e(err)}finally{_iterator.f()}_slate.Element.isElement(n)?children.push(_react.default.createElement(SelectedContext.Provider,{key:"provider-".concat(key.id),value:!!sel},_react.default.createElement(MemoizedElement,{decorations:ds,element:n,key:key.id,renderElement,renderPlaceholder,renderLeaf,selection:sel}))):children.push(_react.default.createElement(MemoizedText,{decorations:ds,key:key.id,isLast:isLeafBlock&&i===node.children.length-1,parent:node,renderPlaceholder,renderLeaf,text:n})),NODE_TO_INDEX.set(n,i),NODE_TO_PARENT.set(n,node)}return children}),HOTKEYS={bold:"mod+b",compose:["down","left","right","up","backspace","enter"],moveBackward:"left",moveForward:"right",moveWordBackward:"ctrl+left",moveWordForward:"ctrl+right",deleteBackward:"shift?+backspace",deleteForward:"shift?+delete",extendBackward:"shift+left",extendForward:"shift+right",italic:"mod+i",insertSoftBreak:"shift+enter",splitBlock:"enter",undo:"mod+z"},APPLE_HOTKEYS={moveLineBackward:"opt+up",moveLineForward:"opt+down",moveWordBackward:"opt+left",moveWordForward:"opt+right",deleteBackward:["ctrl+backspace","ctrl+h"],deleteForward:["ctrl+delete","ctrl+d"],deleteLineBackward:"cmd+shift?+backspace",deleteLineForward:["cmd+shift?+delete","ctrl+k"],deleteWordBackward:"opt+shift?+backspace",deleteWordForward:"opt+shift?+delete",extendLineBackward:"opt+shift+up",extendLineForward:"opt+shift+down",redo:"cmd+shift+z",transposeCharacter:"ctrl+t"},WINDOWS_HOTKEYS={deleteWordBackward:"ctrl+shift?+backspace",deleteWordForward:"ctrl+shift?+delete",redo:["ctrl+y","ctrl+shift+z"]},create=function create(key){var generic=HOTKEYS[key],apple=APPLE_HOTKEYS[key],windows=WINDOWS_HOTKEYS[key],isGeneric=generic&&(0,_isHotkey.isKeyHotkey)(generic),isApple=apple&&(0,_isHotkey.isKeyHotkey)(apple),isWindows=windows&&(0,_isHotkey.isKeyHotkey)(windows);return function(event){return!(!isGeneric||!isGeneric(event))||(!!(IS_APPLE&&isApple&&isApple(event))||!(IS_APPLE||!isWindows||!isWindows(event)))}},Hotkeys={isBold:create("bold"),isCompose:create("compose"),isMoveBackward:create("moveBackward"),isMoveForward:create("moveForward"),isDeleteBackward:create("deleteBackward"),isDeleteForward:create("deleteForward"),isDeleteLineBackward:create("deleteLineBackward"),isDeleteLineForward:create("deleteLineForward"),isDeleteWordBackward:create("deleteWordBackward"),isDeleteWordForward:create("deleteWordForward"),isExtendBackward:create("extendBackward"),isExtendForward:create("extendForward"),isExtendLineBackward:create("extendLineBackward"),isExtendLineForward:create("extendLineForward"),isItalic:create("italic"),isMoveLineBackward:create("moveLineBackward"),isMoveLineForward:create("moveLineForward"),isMoveWordBackward:create("moveWordBackward"),isMoveWordForward:create("moveWordForward"),isRedo:create("redo"),isSoftBreak:create("insertSoftBreak"),isSplitBlock:create("splitBlock"),isTransposeCharacter:create("transposeCharacter"),isUndo:create("undo")},ReadOnlyContext=(0,_react.createContext)(!1),useReadOnly=exports.useReadOnly=function useReadOnly(){return(0,_react.useContext)(ReadOnlyContext)},SlateContext=(0,_react.createContext)(null),useSlate=exports.useSlate=function useSlate(){var context=(0,_react.useContext)(SlateContext);if(!context)throw new Error("The `useSlate` hook must be used inside the <Slate> component's context.");return _slicedToArray(context,1)[0]},getDefaultView=function getDefaultView(value){return value&&value.ownerDocument&&value.ownerDocument.defaultView||null},isDOMComment=function isDOMComment(value){return isDOMNode(value)&&8===value.nodeType},isDOMElement=function isDOMElement(value){return isDOMNode(value)&&1===value.nodeType},isDOMNode=function isDOMNode(value){var window=getDefaultView(value);return!!window&&value instanceof window.Node},isDOMSelection=function isDOMSelection(value){var window=value&&value.anchorNode&&getDefaultView(value.anchorNode);return!!window&&value instanceof window.Selection},isDOMText=function isDOMText(value){return isDOMNode(value)&&3===value.nodeType},getEditableChildAndIndex=function getEditableChildAndIndex(parent,index,direction){for(var childNodes=parent.childNodes,child=childNodes[index],i=index,triedForward=!1,triedBackward=!1;(isDOMComment(child)||isDOMElement(child)&&0===child.childNodes.length||isDOMElement(child)&&"false"===child.getAttribute("contenteditable"))&&(!triedForward||!triedBackward);)i>=childNodes.length?(triedForward=!0,i=index-1,direction="backward"):i<0?(triedBackward=!0,i=index+1,direction="forward"):(child=childNodes[i],index=i,i+="forward"===direction?1:-1);return[child,index]},getEditableChild=function getEditableChild(parent,index,direction){return _slicedToArray(getEditableChildAndIndex(parent,index,direction),1)[0]},getPlainText=function getPlainText(domNode){var text="";if(isDOMText(domNode)&&domNode.nodeValue)return domNode.nodeValue;if(isDOMElement(domNode)){for(var _i=0,_Array$from=Array.from(domNode.childNodes);_i<_Array$from.length;_i++){text+=getPlainText(_Array$from[_i])}var display=getComputedStyle(domNode).getPropertyValue("display");"block"!==display&&"list"!==display&&"BR"!==domNode.tagName||(text+="\n")}return text},catchSlateFragment=/data-slate-fragment="(.+?)"/m,getSlateFragmentAttribute=function getSlateFragmentAttribute(dataTransfer){return _slicedToArray(dataTransfer.getData("text/html").match(catchSlateFragment)||[],2)[1]},_excluded$2=["autoFocus","decorate","onDOMBeforeInput","placeholder","readOnly","renderElement","renderLeaf","renderPlaceholder","scrollSelectionIntoView","style","as"];function ownKeys$1(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$1(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$1(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$1(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var Children=function Children(props){return _react.default.createElement(_react.default.Fragment,null,useChildren(props))},Editable$1=exports.DefaultEditable=function Editable$1(props){var autoFocus=props.autoFocus,_props$decorate=props.decorate,decorate=void 0===_props$decorate?defaultDecorate:_props$decorate,propsOnDOMBeforeInput=props.onDOMBeforeInput,placeholder=props.placeholder,_props$readOnly=props.readOnly,readOnly=void 0!==_props$readOnly&&_props$readOnly,renderElement=props.renderElement,renderLeaf=props.renderLeaf,_props$renderPlacehol=props.renderPlaceholder,renderPlaceholder=void 0===_props$renderPlacehol?function(props){return _react.default.createElement(DefaultPlaceholder,Object.assign({},props))}:_props$renderPlacehol,_props$scrollSelectio=props.scrollSelectionIntoView,scrollSelectionIntoView=void 0===_props$scrollSelectio?defaultScrollSelectionIntoView:_props$scrollSelectio,_props$style=props.style,style=void 0===_props$style?{}:_props$style,_props$as=props.as,Component=void 0===_props$as?"div":_props$as,attributes=_objectWithoutProperties(props,_excluded$2),editor=useSlate(),_useState4=_slicedToArray((0,_react.useState)(!1),2),isComposing=_useState4[0],setIsComposing=_useState4[1],ref=(0,_react.useRef)(null),deferredOperations=(0,_react.useRef)([]);IS_READ_ONLY.set(editor,readOnly);var state=(0,_react.useMemo)((function(){return{hasInsertPrefixInCompositon:!1,isDraggingInternally:!1,isUpdatingSelection:!1,latestElement:null}}),[]);useIsomorphicLayoutEffect((function(){var window;ref.current&&(window=getDefaultView(ref.current))?(EDITOR_TO_WINDOW.set(editor,window),EDITOR_TO_ELEMENT.set(editor,ref.current),NODE_TO_ELEMENT.set(editor,ref.current),ELEMENT_TO_NODE.set(ref.current,editor)):NODE_TO_ELEMENT.delete(editor);var selection=editor.selection,domSelection=ReactEditor.findDocumentOrShadowRoot(editor).getSelection();if(!ReactEditor.isComposing(editor)&&domSelection&&ReactEditor.isFocused(editor)){var hasDomSelection="None"!==domSelection.type;if(selection||hasDomSelection){var editorElement=EDITOR_TO_ELEMENT.get(editor),hasDomSelectionInEditor=!1;if(editorElement.contains(domSelection.anchorNode)&&editorElement.contains(domSelection.focusNode)&&(hasDomSelectionInEditor=!0),hasDomSelection&&hasDomSelectionInEditor&&selection){var slateRange=ReactEditor.toSlateRange(editor,domSelection,{exactMatch:!0,suppressThrow:!0});if(slateRange&&_slate.Range.equals(slateRange,selection))return}if(!selection||ReactEditor.hasRange(editor,selection)){state.isUpdatingSelection=!0;var newDomRange=selection&&ReactEditor.toDOMRange(editor,selection);newDomRange?(_slate.Range.isBackward(selection)?domSelection.setBaseAndExtent(newDomRange.endContainer,newDomRange.endOffset,newDomRange.startContainer,newDomRange.startOffset):domSelection.setBaseAndExtent(newDomRange.startContainer,newDomRange.startOffset,newDomRange.endContainer,newDomRange.endOffset),scrollSelectionIntoView(editor,newDomRange)):domSelection.removeAllRanges(),setTimeout((function(){newDomRange&&IS_FIREFOX&&ReactEditor.toDOMNode(editor,editor).focus();state.isUpdatingSelection=!1}))}else editor.selection=ReactEditor.toSlateRange(editor,domSelection,{exactMatch:!1,suppressThrow:!1})}}})),(0,_react.useEffect)((function(){ref.current&&autoFocus&&ref.current.focus()}),[autoFocus]);var onDOMSelectionChange=(0,_react.useCallback)((0,_throttle.default)((function(){if(!ReactEditor.isComposing(editor)&&!state.isUpdatingSelection&&!state.isDraggingInternally){var root=ReactEditor.findDocumentOrShadowRoot(editor),activeElement=root.activeElement,el=ReactEditor.toDOMNode(editor,editor),domSelection=root.getSelection();if(activeElement===el?(state.latestElement=activeElement,IS_FOCUSED.set(editor,!0)):IS_FOCUSED.delete(editor),!domSelection)return _slate.Transforms.deselect(editor);var anchorNode=domSelection.anchorNode,focusNode=domSelection.focusNode,anchorNodeSelectable=hasEditableTarget(editor,anchorNode)||isTargetInsideNonReadonlyVoid(editor,anchorNode),focusNodeSelectable=hasEditableTarget(editor,focusNode)||isTargetInsideNonReadonlyVoid(editor,focusNode);if(anchorNodeSelectable&&focusNodeSelectable){var range=ReactEditor.toSlateRange(editor,domSelection,{exactMatch:!1,suppressThrow:!1});_slate.Transforms.select(editor,range)}}}),100),[readOnly]),scheduleOnDOMSelectionChange=(0,_react.useMemo)((function(){return(0,_debounce.default)(onDOMSelectionChange,0)}),[onDOMSelectionChange]),onDOMBeforeInput=(0,_react.useCallback)((function(event){if(!readOnly&&hasEditableTarget(editor,event.target)&&!isDOMEventHandled(event,propsOnDOMBeforeInput)){var _EDITOR_TO_USER_SELEC;scheduleOnDOMSelectionChange.flush(),onDOMSelectionChange.flush();var selection=editor.selection,type=event.inputType,data=event.dataTransfer||event.data||void 0;if("insertCompositionText"===type||"deleteCompositionText"===type)return;var _native=!1;if("insertText"===type&&selection&&_slate.Range.isCollapsed(selection)&&event.data&&1===event.data.length&&/[a-z ]/i.test(event.data)&&0!==selection.anchor.offset){var _node$parentElement;_native=!0,editor.marks&&(_native=!1);var anchor=selection.anchor,_ReactEditor$toDOMPoi2=_slicedToArray(ReactEditor.toDOMPoint(editor,anchor),2),node=_ReactEditor$toDOMPoi2[0],offset=_ReactEditor$toDOMPoi2[1],anchorNode=null===(_node$parentElement=node.parentElement)||void 0===_node$parentElement?void 0:_node$parentElement.closest("a");if(anchorNode&&ReactEditor.hasDOMNode(editor,anchorNode)){var _lastText$textContent,lastText=ReactEditor.getWindow(editor).document.createTreeWalker(anchorNode,NodeFilter.SHOW_TEXT).lastChild();lastText===node&&(null===(_lastText$textContent=lastText.textContent)||void 0===_lastText$textContent?void 0:_lastText$textContent.length)===offset&&(_native=!1)}}if(!type.startsWith("delete")||type.startsWith("deleteBy")){var targetRange=_slicedToArray(event.getTargetRanges(),1)[0];if(targetRange){var range=ReactEditor.toSlateRange(editor,targetRange,{exactMatch:!1,suppressThrow:!1});if(!selection||!_slate.Range.equals(selection,range)){_native=!1;var selectionRef=editor.selection&&_slate.Editor.rangeRef(editor,editor.selection);_slate.Transforms.select(editor,range),selectionRef&&EDITOR_TO_USER_SELECTION.set(editor,selectionRef)}}}if(_native||event.preventDefault(),selection&&_slate.Range.isExpanded(selection)&&type.startsWith("delete")){var direction=type.endsWith("Backward")?"backward":"forward";return void _slate.Editor.deleteFragment(editor,{direction})}switch(type){case"deleteByComposition":case"deleteByCut":case"deleteByDrag":_slate.Editor.deleteFragment(editor);break;case"deleteContent":case"deleteContentForward":_slate.Editor.deleteForward(editor);break;case"deleteContentBackward":_slate.Editor.deleteBackward(editor);break;case"deleteEntireSoftLine":_slate.Editor.deleteBackward(editor,{unit:"line"}),_slate.Editor.deleteForward(editor,{unit:"line"});break;case"deleteHardLineBackward":_slate.Editor.deleteBackward(editor,{unit:"block"});break;case"deleteSoftLineBackward":_slate.Editor.deleteBackward(editor,{unit:"line"});break;case"deleteHardLineForward":_slate.Editor.deleteForward(editor,{unit:"block"});break;case"deleteSoftLineForward":_slate.Editor.deleteForward(editor,{unit:"line"});break;case"deleteWordBackward":_slate.Editor.deleteBackward(editor,{unit:"word"});break;case"deleteWordForward":_slate.Editor.deleteForward(editor,{unit:"word"});break;case"insertLineBreak":_slate.Editor.insertSoftBreak(editor);break;case"insertParagraph":_slate.Editor.insertBreak(editor);break;case"insertFromComposition":case"insertFromDrop":case"insertFromPaste":case"insertFromYank":case"insertReplacementText":case"insertText":var _selection=editor.selection;_selection&&_slate.Range.isExpanded(_selection)&&_slate.Editor.deleteFragment(editor),"insertFromComposition"===type&&ReactEditor.isComposing(editor)&&(setIsComposing(!1),IS_COMPOSING.set(editor,!1)),"DataTransfer"===(null==data?void 0:data.constructor.name)?ReactEditor.insertData(editor,data):"string"==typeof data&&(_native?deferredOperations.current.push((function(){return _slate.Editor.insertText(editor,data)})):_slate.Editor.insertText(editor,data))}var toRestore=null===(_EDITOR_TO_USER_SELEC=EDITOR_TO_USER_SELECTION.get(editor))||void 0===_EDITOR_TO_USER_SELEC?void 0:_EDITOR_TO_USER_SELEC.unref();EDITOR_TO_USER_SELECTION.delete(editor),!toRestore||editor.selection&&_slate.Range.equals(editor.selection,toRestore)||_slate.Transforms.select(editor,toRestore)}}),[readOnly,propsOnDOMBeforeInput]);useIsomorphicLayoutEffect((function(){return ref.current&&HAS_BEFORE_INPUT_SUPPORT&&ref.current.addEventListener("beforeinput",onDOMBeforeInput),function(){ref.current&&HAS_BEFORE_INPUT_SUPPORT&&ref.current.removeEventListener("beforeinput",onDOMBeforeInput)}}),[onDOMBeforeInput]),useIsomorphicLayoutEffect((function(){var window=ReactEditor.getWindow(editor);return window.document.addEventListener("selectionchange",scheduleOnDOMSelectionChange),function(){window.document.removeEventListener("selectionchange",scheduleOnDOMSelectionChange)}}),[scheduleOnDOMSelectionChange]);var decorations=decorate([editor,[]]);if(placeholder&&1===editor.children.length&&1===Array.from(_slate.Node.texts(editor)).length&&""===_slate.Node.string(editor)&&!isComposing){var start=_slate.Editor.start(editor,[]);decorations.push(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({},PLACEHOLDER_SYMBOL,!0),"placeholder",placeholder),"anchor",start),"focus",start))}return _react.default.createElement(ReadOnlyContext.Provider,{value:readOnly},_react.default.createElement(DecorateContext.Provider,{value:decorate},_react.default.createElement(Component,Object.assign({role:readOnly?void 0:"textbox"},attributes,{spellCheck:!(!HAS_BEFORE_INPUT_SUPPORT&&CAN_USE_DOM)&&attributes.spellCheck,autoCorrect:HAS_BEFORE_INPUT_SUPPORT||!CAN_USE_DOM?attributes.autoCorrect:"false",autoCapitalize:HAS_BEFORE_INPUT_SUPPORT||!CAN_USE_DOM?attributes.autoCapitalize:"false","data-slate-editor":!0,"data-slate-node":"value",contentEditable:!readOnly,zindex:-1,suppressContentEditableWarning:!0,ref,style:_objectSpread$1({position:"relative",outline:"none",whiteSpace:"pre-wrap",wordWrap:"break-word"},style),onBeforeInput:(0,_react.useCallback)((function(event){if(!HAS_BEFORE_INPUT_SUPPORT&&!readOnly&&!isEventHandled(event,attributes.onBeforeInput)&&hasEditableTarget(editor,event.target)&&(event.preventDefault(),!ReactEditor.isComposing(editor))){var text=event.data;_slate.Editor.insertText(editor,text)}}),[readOnly]),onInput:(0,_react.useCallback)((function(event){var _step2,_iterator2=_createForOfIteratorHelper(deferredOperations.current);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){(0,_step2.value)()}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}deferredOperations.current=[]}),[]),onBlur:(0,_react.useCallback)((function(event){if(!readOnly&&!state.isUpdatingSelection&&hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onBlur)){var root=ReactEditor.findDocumentOrShadowRoot(editor);if(state.latestElement!==root.activeElement){var relatedTarget=event.relatedTarget;if(!(relatedTarget===ReactEditor.toDOMNode(editor,editor)||isDOMElement(relatedTarget)&&relatedTarget.hasAttribute("data-slate-spacer"))){if(null!=relatedTarget&&isDOMNode(relatedTarget)&&ReactEditor.hasDOMNode(editor,relatedTarget)){var node=ReactEditor.toSlateNode(editor,relatedTarget);if(_slate.Element.isElement(node)&&!editor.isVoid(node))return}if(IS_SAFARI){var domSelection=root.getSelection();null==domSelection||domSelection.removeAllRanges()}IS_FOCUSED.delete(editor)}}}}),[readOnly,attributes.onBlur]),onClick:(0,_react.useCallback)((function(event){if(hasTarget(editor,event.target)&&!isEventHandled(event,attributes.onClick)&&isDOMNode(event.target)){var node=ReactEditor.toSlateNode(editor,event.target),path=ReactEditor.findPath(editor,node);if(!_slate.Editor.hasPath(editor,path)||_slate.Node.get(editor,path)!==node)return;if(3===event.detail&&path.length>=1){var blockPath=path;if(!_slate.Editor.isBlock(editor,node)){var _block$,block=_slate.Editor.above(editor,{match:function match(n){return _slate.Editor.isBlock(editor,n)},at:path});blockPath=null!==(_block$=null==block?void 0:block[1])&&void 0!==_block$?_block$:path.slice(0,1)}var range=_slate.Editor.range(editor,blockPath);return void _slate.Transforms.select(editor,range)}if(readOnly)return;var _start=_slate.Editor.start(editor,path),end=_slate.Editor.end(editor,path),startVoid=_slate.Editor.void(editor,{at:_start}),endVoid=_slate.Editor.void(editor,{at:end});if(startVoid&&endVoid&&_slate.Path.equals(startVoid[1],endVoid[1])){var _range=_slate.Editor.range(editor,_start);_slate.Transforms.select(editor,_range)}}}),[readOnly,attributes.onClick]),onCompositionEnd:(0,_react.useCallback)((function(event){if(hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCompositionEnd)&&(ReactEditor.isComposing(editor)&&(setIsComposing(!1),IS_COMPOSING.set(editor,!1)),IS_SAFARI||IS_FIREFOX_LEGACY||IS_IOS||IS_QQBROWSER||IS_WECHATBROWSER||IS_UC_MOBILE||!event.data||_slate.Editor.insertText(editor,event.data),editor.selection&&_slate.Range.isCollapsed(editor.selection))){var leafPath=editor.selection.anchor.path,currentTextNode=_slate.Node.leaf(editor,leafPath);state.hasInsertPrefixInCompositon&&(state.hasInsertPrefixInCompositon=!1,_slate.Editor.withoutNormalizing(editor,(function(){var text=currentTextNode.text.replace(/^\uFEFF/,"");_slate.Transforms.delete(editor,{distance:currentTextNode.text.length,reverse:!0}),_slate.Editor.insertText(editor,text)})))}}),[attributes.onCompositionEnd]),onCompositionUpdate:(0,_react.useCallback)((function(event){hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCompositionUpdate)&&(ReactEditor.isComposing(editor)||(setIsComposing(!0),IS_COMPOSING.set(editor,!0)))}),[attributes.onCompositionUpdate]),onCompositionStart:(0,_react.useCallback)((function(event){if(hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCompositionStart)){var selection=editor.selection,marks=editor.marks;if(selection){if(_slate.Range.isExpanded(selection))return void _slate.Editor.deleteFragment(editor);var inline=_slate.Editor.above(editor,{match:function match(n){return _slate.Editor.isInline(editor,n)},mode:"highest"});if(inline){var inlinePath=_slicedToArray(inline,2)[1];if(_slate.Editor.isEnd(editor,selection.anchor,inlinePath)){var point=_slate.Editor.after(editor,inlinePath);_slate.Transforms.setSelection(editor,{anchor:point,focus:point})}}marks&&(state.hasInsertPrefixInCompositon=!0,_slate.Transforms.insertNodes(editor,_objectSpread$1({text:"\ufeff"},marks),{select:!0}))}}}),[attributes.onCompositionStart]),onCopy:(0,_react.useCallback)((function(event){hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCopy)&&(event.preventDefault(),ReactEditor.setFragmentData(editor,event.clipboardData,"copy"))}),[attributes.onCopy]),onCut:(0,_react.useCallback)((function(event){if(!readOnly&&hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCut)){event.preventDefault(),ReactEditor.setFragmentData(editor,event.clipboardData,"cut");var selection=editor.selection;if(selection)if(_slate.Range.isExpanded(selection))_slate.Editor.deleteFragment(editor);else{var node=_slate.Node.parent(editor,selection.anchor.path);_slate.Editor.isVoid(editor,node)&&_slate.Transforms.delete(editor)}}}),[readOnly,attributes.onCut]),onDragOver:(0,_react.useCallback)((function(event){if(hasTarget(editor,event.target)&&!isEventHandled(event,attributes.onDragOver)){var node=ReactEditor.toSlateNode(editor,event.target);_slate.Editor.isVoid(editor,node)&&event.preventDefault()}}),[attributes.onDragOver]),onDragStart:(0,_react.useCallback)((function(event){if(!readOnly&&hasTarget(editor,event.target)&&!isEventHandled(event,attributes.onDragStart)){var node=ReactEditor.toSlateNode(editor,event.target),path=ReactEditor.findPath(editor,node);if(_slate.Editor.isVoid(editor,node)||_slate.Editor.void(editor,{at:path,voids:!0})){var range=_slate.Editor.range(editor,path);_slate.Transforms.select(editor,range)}state.isDraggingInternally=!0,ReactEditor.setFragmentData(editor,event.dataTransfer,"drag")}}),[readOnly,attributes.onDragStart]),onDrop:(0,_react.useCallback)((function(event){if(!readOnly&&hasTarget(editor,event.target)&&!isEventHandled(event,attributes.onDrop)){event.preventDefault();var draggedRange=editor.selection,range=ReactEditor.findEventRange(editor,event),data=event.dataTransfer;_slate.Transforms.select(editor,range),state.isDraggingInternally&&(!draggedRange||_slate.Range.equals(draggedRange,range)||_slate.Editor.void(editor,{at:range,voids:!0})||_slate.Transforms.delete(editor,{at:draggedRange})),ReactEditor.insertData(editor,data),ReactEditor.isFocused(editor)||ReactEditor.focus(editor)}state.isDraggingInternally=!1}),[readOnly,attributes.onDrop]),onDragEnd:(0,_react.useCallback)((function(event){!readOnly&&state.isDraggingInternally&&attributes.onDragEnd&&hasTarget(editor,event.target)&&attributes.onDragEnd(event),state.isDraggingInternally=!1}),[readOnly,attributes.onDragEnd]),onFocus:(0,_react.useCallback)((function(event){if(!readOnly&&!state.isUpdatingSelection&&hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onFocus)){var el=ReactEditor.toDOMNode(editor,editor),root=ReactEditor.findDocumentOrShadowRoot(editor);if(state.latestElement=root.activeElement,IS_FIREFOX&&event.target!==el)return void el.focus();IS_FOCUSED.set(editor,!0)}}),[readOnly,attributes.onFocus]),onKeyDown:(0,_react.useCallback)((function(event){if(!readOnly&&hasEditableTarget(editor,event.target)){var nativeEvent=event.nativeEvent;if(ReactEditor.isComposing(editor)&&!1===nativeEvent.isComposing&&(IS_COMPOSING.set(editor,!1),setIsComposing(!1)),isEventHandled(event,attributes.onKeyDown)||ReactEditor.isComposing(editor))return;var selection=editor.selection,element=editor.children[null!==selection?selection.focus.path[0]:0],isRTL="rtl"===(0,_direction.default)(_slate.Node.string(element));if(Hotkeys.isRedo(nativeEvent)){event.preventDefault();var maybeHistoryEditor=editor;return void("function"==typeof maybeHistoryEditor.redo&&maybeHistoryEditor.redo())}if(Hotkeys.isUndo(nativeEvent)){event.preventDefault();var _maybeHistoryEditor=editor;return void("function"==typeof _maybeHistoryEditor.undo&&_maybeHistoryEditor.undo())}if(Hotkeys.isMoveLineBackward(nativeEvent))return event.preventDefault(),void _slate.Transforms.move(editor,{unit:"line",reverse:!0});if(Hotkeys.isMoveLineForward(nativeEvent))return event.preventDefault(),void _slate.Transforms.move(editor,{unit:"line"});if(Hotkeys.isExtendLineBackward(nativeEvent))return event.preventDefault(),void _slate.Transforms.move(editor,{unit:"line",edge:"focus",reverse:!0});if(Hotkeys.isExtendLineForward(nativeEvent))return event.preventDefault(),void _slate.Transforms.move(editor,{unit:"line",edge:"focus"});if(Hotkeys.isMoveBackward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isCollapsed(selection)?_slate.Transforms.move(editor,{reverse:!isRTL}):_slate.Transforms.collapse(editor,{edge:"start"}));if(Hotkeys.isMoveForward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isCollapsed(selection)?_slate.Transforms.move(editor,{reverse:isRTL}):_slate.Transforms.collapse(editor,{edge:"end"}));if(Hotkeys.isMoveWordBackward(nativeEvent))return event.preventDefault(),selection&&_slate.Range.isExpanded(selection)&&_slate.Transforms.collapse(editor,{edge:"focus"}),void _slate.Transforms.move(editor,{unit:"word",reverse:!isRTL});if(Hotkeys.isMoveWordForward(nativeEvent))return event.preventDefault(),selection&&_slate.Range.isExpanded(selection)&&_slate.Transforms.collapse(editor,{edge:"focus"}),void _slate.Transforms.move(editor,{unit:"word",reverse:isRTL});if(HAS_BEFORE_INPUT_SUPPORT){if((IS_CHROME||IS_SAFARI)&&selection&&(Hotkeys.isDeleteBackward(nativeEvent)||Hotkeys.isDeleteForward(nativeEvent))&&_slate.Range.isCollapsed(selection)){var currentNode=_slate.Node.parent(editor,selection.anchor.path);if(_slate.Element.isElement(currentNode)&&_slate.Editor.isVoid(editor,currentNode)&&_slate.Editor.isInline(editor,currentNode))return event.preventDefault(),void _slate.Editor.deleteBackward(editor,{unit:"block"})}}else{if(Hotkeys.isBold(nativeEvent)||Hotkeys.isItalic(nativeEvent)||Hotkeys.isTransposeCharacter(nativeEvent))return void event.preventDefault();if(Hotkeys.isSoftBreak(nativeEvent))return event.preventDefault(),void _slate.Editor.insertSoftBreak(editor);if(Hotkeys.isSplitBlock(nativeEvent))return event.preventDefault(),void _slate.Editor.insertBreak(editor);if(Hotkeys.isDeleteBackward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isExpanded(selection)?_slate.Editor.deleteFragment(editor,{direction:"backward"}):_slate.Editor.deleteBackward(editor));if(Hotkeys.isDeleteForward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isExpanded(selection)?_slate.Editor.deleteFragment(editor,{direction:"forward"}):_slate.Editor.deleteForward(editor));if(Hotkeys.isDeleteLineBackward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isExpanded(selection)?_slate.Editor.deleteFragment(editor,{direction:"backward"}):_slate.Editor.deleteBackward(editor,{unit:"line"}));if(Hotkeys.isDeleteLineForward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isExpanded(selection)?_slate.Editor.deleteFragment(editor,{direction:"forward"}):_slate.Editor.deleteForward(editor,{unit:"line"}));if(Hotkeys.isDeleteWordBackward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isExpanded(selection)?_slate.Editor.deleteFragment(editor,{direction:"backward"}):_slate.Editor.deleteBackward(editor,{unit:"word"}));if(Hotkeys.isDeleteWordForward(nativeEvent))return event.preventDefault(),void(selection&&_slate.Range.isExpanded(selection)?_slate.Editor.deleteFragment(editor,{direction:"forward"}):_slate.Editor.deleteForward(editor,{unit:"word"}))}}}),[readOnly,attributes.onKeyDown]),onPaste:(0,_react.useCallback)((function(event){readOnly||!hasEditableTarget(editor,event.target)||isEventHandled(event,attributes.onPaste)||HAS_BEFORE_INPUT_SUPPORT&&!function isPlainTextOnlyPaste(event){return event.clipboardData&&""!==event.clipboardData.getData("text/plain")&&1===event.clipboardData.types.length}(event.nativeEvent)||(event.preventDefault(),ReactEditor.insertData(editor,event.clipboardData))}),[readOnly,attributes.onPaste])}),_react.default.createElement(Children,{decorations,node:editor,renderElement,renderPlaceholder,renderLeaf,selection:editor.selection}))))},DefaultPlaceholder=exports.DefaultPlaceholder=function DefaultPlaceholder(_ref){var attributes=_ref.attributes,children=_ref.children;return _react.default.createElement("span",Object.assign({},attributes),children)},defaultDecorate=function defaultDecorate(){return[]},defaultScrollSelectionIntoView=function defaultScrollSelectionIntoView(editor,domRange){if(!editor.selection||editor.selection&&_slate.Range.isCollapsed(editor.selection)){var leafEl=domRange.startContainer.parentElement;leafEl.getBoundingClientRect=domRange.getBoundingClientRect.bind(domRange),(0,_scrollIntoViewIfNeeded.default)(leafEl,{scrollMode:"if-needed"}),delete leafEl.getBoundingClientRect}},hasTarget=function hasTarget(editor,target){return isDOMNode(target)&&ReactEditor.hasDOMNode(editor,target)},hasEditableTarget=function hasEditableTarget(editor,target){return isDOMNode(target)&&ReactEditor.hasDOMNode(editor,target,{editable:!0})},isTargetInsideNonReadonlyVoid=function isTargetInsideNonReadonlyVoid(editor,target){if(IS_READ_ONLY.get(editor))return!1;var slateNode=hasTarget(editor,target)&&ReactEditor.toSlateNode(editor,target);return _slate.Editor.isVoid(editor,slateNode)},isEventHandled=function isEventHandled(event,handler){if(!handler)return!1;var shouldTreatEventAsHandled=handler(event);return null!=shouldTreatEventAsHandled?shouldTreatEventAsHandled:event.isDefaultPrevented()||event.isPropagationStopped()},isDOMEventHandled=function isDOMEventHandled(event,handler){if(!handler)return!1;var shouldTreatEventAsHandled=handler(event);return null!=shouldTreatEventAsHandled?shouldTreatEventAsHandled:event.defaultPrevented};function getDiffOffsets(prev,next){if(prev===next)return null;var start=function getDiffStart(prev,next){for(var length=Math.min(prev.length,next.length),i=0;i<length;i++)if(prev.charAt(i)!==next.charAt(i))return i;return prev.length!==next.length?length:null}(prev,next);if(null===start)return null;var end=function getDiffEnd(prev,next,max){for(var prevLength=prev.length,nextLength=next.length,length=Math.min(prevLength,nextLength,max),i=0;i<length;i++)if(prev.charAt(prevLength-i-1)!==next.charAt(nextLength-i-1))return i;return prev.length!==next.length?length:null}(prev,next,Math.min(prev.length-start,next.length-start));return null===end?null:{start,end}}function sliceText(text,offsets){return text.slice(offsets.start,text.length-offsets.end)}function getTextInsertion(editor,domNode){var node=ReactEditor.toSlateNode(editor,domNode);if(_slate.Text.isText(node)){var prevText=node.text,nextText=domNode.textContent;if(nextText.endsWith("\n")&&(nextText=nextText.slice(0,nextText.length-1)),nextText!==prevText){var textDiff=function diffText(prev,next){if(void 0===prev||void 0===next)return null;var offsets=getDiffOffsets(prev,next);if(null==offsets)return null;var insertText=sliceText(next,offsets),removeText=sliceText(prev,offsets);return{start:offsets.start,end:prev.length-offsets.end,insertText,removeText}}(prevText,nextText);if(null!==textDiff)return{text:textDiff,path:ReactEditor.findPath(editor,node)}}}}function normalizeTextInsertionRange(editor,range,_ref2){var path=_ref2.path,text=_ref2.text,insertionRange={anchor:{path,offset:text.start},focus:{path,offset:text.end}};if(!range||!_slate.Range.isCollapsed(range))return insertionRange;var insertText=text.insertText,removeText=text.removeText;if((1===insertText.length||1===removeText.length)&&_slate.Path.equals(range.anchor.path,path)){var _text=_slicedToArray(Array.from(_slate.Editor.nodes(editor,{at:range,match:_slate.Text.isText})),1)[0];if(_text){var node=_slicedToArray(_text,1)[0],anchor=range.anchor,characterBeforeAnchor=node.text[anchor.offset-1],characterAfterAnchor=node.text[anchor.offset];if(1===insertText.length&&insertText===characterAfterAnchor)return range;if(1===removeText.length&&removeText===characterBeforeAnchor)return{anchor:{path,offset:anchor.offset-1},focus:{path,offset:anchor.offset}}}}return insertionRange}var n=0,Key=function Key(){this.id="".concat(n++)},ReactEditor=exports.ReactEditor={isComposing:function isComposing(editor){return!!IS_COMPOSING.get(editor)},getWindow:function getWindow(editor){var window=EDITOR_TO_WINDOW.get(editor);if(!window)throw new Error("Unable to find a host window element for this editor");return window},findKey:function findKey(editor,node){var key=NODE_TO_KEY.get(node);return key||(key=new Key,NODE_TO_KEY.set(node,key)),key},findPath:function findPath(editor,node){for(var path=[],child=node;;){var parent=NODE_TO_PARENT.get(child);if(null==parent){if(_slate.Editor.isEditor(child))return path;break}var i=NODE_TO_INDEX.get(child);if(null==i)break;path.unshift(i),child=parent}throw new Error("Unable to find the path for Slate node: ".concat(_slate.Scrubber.stringify(node)))},findDocumentOrShadowRoot:function findDocumentOrShadowRoot(editor){var el=ReactEditor.toDOMNode(editor,editor),root=el.getRootNode();return(root instanceof Document||root instanceof ShadowRoot)&&null!=root.getSelection?root:el.ownerDocument},isFocused:function isFocused(editor){return!!IS_FOCUSED.get(editor)},isReadOnly:function isReadOnly(editor){return!!IS_READ_ONLY.get(editor)},blur:function blur(editor){var el=ReactEditor.toDOMNode(editor,editor),root=ReactEditor.findDocumentOrShadowRoot(editor);IS_FOCUSED.set(editor,!1),root.activeElement===el&&el.blur()},focus:function focus(editor){var el=ReactEditor.toDOMNode(editor,editor),root=ReactEditor.findDocumentOrShadowRoot(editor);IS_FOCUSED.set(editor,!0),root.activeElement!==el&&el.focus({preventScroll:!0})},deselect:function deselect(editor){ReactEditor.toDOMNode(editor,editor);var selection=editor.selection,domSelection=ReactEditor.findDocumentOrShadowRoot(editor).getSelection();domSelection&&domSelection.rangeCount>0&&domSelection.removeAllRanges(),selection&&_slate.Transforms.deselect(editor)},hasDOMNode:function hasDOMNode(editor,target){var targetEl,_options$editable=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).editable,editable=void 0!==_options$editable&&_options$editable,editorEl=ReactEditor.toDOMNode(editor,editor);try{targetEl=isDOMElement(target)?target:target.parentElement}catch(err){if(!err.message.includes('Permission denied to access property "nodeType"'))throw err}return!!targetEl&&!(targetEl.closest("[data-slate-editor]")!==editorEl||editable&&!targetEl.isContentEditable&&("boolean"!=typeof targetEl.isContentEditable||targetEl.closest('[contenteditable="false"]')!==editorEl)&&!targetEl.getAttribute("data-slate-zero-width"))},insertData:function insertData(editor,data){editor.insertData(data)},insertFragmentData:function insertFragmentData(editor,data){return editor.insertFragmentData(data)},insertTextData:function insertTextData(editor,data){return editor.insertTextData(data)},setFragmentData:function setFragmentData(editor,data,originEvent){editor.setFragmentData(data,originEvent)},toDOMNode:function toDOMNode(editor,node){var KEY_TO_ELEMENT=EDITOR_TO_KEY_TO_ELEMENT.get(editor),domNode=_slate.Editor.isEditor(node)?EDITOR_TO_ELEMENT.get(editor):null==KEY_TO_ELEMENT?void 0:KEY_TO_ELEMENT.get(ReactEditor.findKey(editor,node));if(!domNode)throw new Error("Cannot resolve a DOM node from Slate node: ".concat(_slate.Scrubber.stringify(node)));return domNode},toDOMPoint:function toDOMPoint(editor,point){var domPoint,node=_slicedToArray(_slate.Editor.node(editor,point.path),1)[0],el=ReactEditor.toDOMNode(editor,node);_slate.Editor.void(editor,{at:point})&&(point={path:point.path,offset:0});for(var start=0,_i2=0,_texts=Array.from(el.querySelectorAll("[data-slate-string], [data-slate-zero-width]"));_i2<_texts.length;_i2++){var text=_texts[_i2],domNode=text.childNodes[0];if(null!=domNode&&null!=domNode.textContent){var length=domNode.textContent.length,attr=text.getAttribute("data-slate-length"),end=start+(null==attr?length:parseInt(attr,10));if(point.offset<=end){domPoint=[domNode,Math.min(length,Math.max(0,point.offset-start))];break}start=end}}if(!domPoint)throw new Error("Cannot resolve a DOM point from Slate point: ".concat(_slate.Scrubber.stringify(point)));return domPoint},toDOMRange:function toDOMRange(editor,range){var anchor=range.anchor,focus=range.focus,isBackward=_slate.Range.isBackward(range),domAnchor=ReactEditor.toDOMPoint(editor,anchor),domFocus=_slate.Range.isCollapsed(range)?domAnchor:ReactEditor.toDOMPoint(editor,focus),domRange=ReactEditor.getWindow(editor).document.createRange(),_ref11=_slicedToArray(isBackward?domFocus:domAnchor,2),startNode=_ref11[0],startOffset=_ref11[1],_ref13=_slicedToArray(isBackward?domAnchor:domFocus,2),endNode=_ref13[0],endOffset=_ref13[1],isStartAtZeroWidth=!!(isDOMElement(startNode)?startNode:startNode.parentElement).getAttribute("data-slate-zero-width"),isEndAtZeroWidth=!!(isDOMElement(endNode)?endNode:endNode.parentElement).getAttribute("data-slate-zero-width");return domRange.setStart(startNode,isStartAtZeroWidth?1:startOffset),domRange.setEnd(endNode,isEndAtZeroWidth?1:endOffset),domRange},toSlateNode:function toSlateNode(editor,domNode){var domEl=isDOMElement(domNode)?domNode:domNode.parentElement;domEl&&!domEl.hasAttribute("data-slate-node")&&(domEl=domEl.closest("[data-slate-node]"));var node=domEl?ELEMENT_TO_NODE.get(domEl):null;if(!node)throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));return node},findEventRange:function findEventRange(editor,event){"nativeEvent"in event&&(event=event.nativeEvent);var _event=event,x=_event.clientX,y=_event.clientY,target=_event.target;if(null==x||null==y)throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));var domRange,node=ReactEditor.toSlateNode(editor,event.target),path=ReactEditor.findPath(editor,node);if(_slate.Editor.isVoid(editor,node)){var rect=target.getBoundingClientRect(),isPrev=editor.isInline(node)?x-rect.left<rect.left+rect.width-x:y-rect.top<rect.top+rect.height-y,edge=_slate.Editor.point(editor,path,{edge:isPrev?"start":"end"}),point=isPrev?_slate.Editor.before(editor,edge):_slate.Editor.after(editor,edge);if(point)return _slate.Editor.range(editor,point)}var document=ReactEditor.getWindow(editor).document;if(document.caretRangeFromPoint)domRange=document.caretRangeFromPoint(x,y);else{var position=document.caretPositionFromPoint(x,y);position&&((domRange=document.createRange()).setStart(position.offsetNode,position.offset),domRange.setEnd(position.offsetNode,position.offset))}if(!domRange)throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));return ReactEditor.toSlateRange(editor,domRange,{exactMatch:!1,suppressThrow:!1})},toSlatePoint:function toSlatePoint(editor,domPoint,options){var exactMatch=options.exactMatch,suppressThrow=options.suppressThrow,_ref14=exactMatch?domPoint:function normalizeDOMPoint(domPoint){var _domPoint=_slicedToArray(domPoint,2),node=_domPoint[0],offset=_domPoint[1];if(isDOMElement(node)&&node.childNodes.length){var isLast=offset===node.childNodes.length,index=isLast?offset-1:offset,_getEditableChildAndI2=_slicedToArray(getEditableChildAndIndex(node,index,isLast?"backward":"forward"),2);for(node=_getEditableChildAndI2[0],isLast=(index=_getEditableChildAndI2[1])<offset;isDOMElement(node)&&node.childNodes.length;){var i=isLast?node.childNodes.length-1:0;node=getEditableChild(node,i,isLast?"backward":"forward")}offset=isLast&&null!=node.textContent?node.textContent.length:0}return[node,offset]}(domPoint),_ref15=_slicedToArray(_ref14,2),nearestNode=_ref15[0],nearestOffset=_ref15[1],parentNode=nearestNode.parentNode,textNode=null,offset=0;if(parentNode){var _domNode$textContent,editorEl=ReactEditor.toDOMNode(editor,editor),potentialVoidNode=parentNode.closest('[data-slate-void="true"]'),voidNode=potentialVoidNode&&editorEl.contains(potentialVoidNode)?potentialVoidNode:null,leafNode=parentNode.closest("[data-slate-leaf]"),domNode=null;if(leafNode){if(textNode=leafNode.closest('[data-slate-node="text"]')){var range=ReactEditor.getWindow(editor).document.createRange();range.setStart(textNode,0),range.setEnd(nearestNode,nearestOffset);var contents=range.cloneContents();[].concat(_toConsumableArray(Array.prototype.slice.call(contents.querySelectorAll("[data-slate-zero-width]"))),_toConsumableArray(Array.prototype.slice.call(contents.querySelectorAll("[contenteditable=false]")))).forEach((function(el){el.parentNode.removeChild(el)})),offset=contents.textContent.length,domNode=textNode}}else voidNode&&((leafNode=voidNode.querySelector("[data-slate-leaf]"))?(textNode=leafNode.closest('[data-slate-node="text"]'),offset=(domNode=leafNode).textContent.length,domNode.querySelectorAll("[data-slate-zero-width]").forEach((function(el){offset-=el.textContent.length}))):offset=1);domNode&&offset===domNode.textContent.length&&(parentNode.hasAttribute("data-slate-zero-width")||IS_FIREFOX&&null!==(_domNode$textContent=domNode.textContent)&&void 0!==_domNode$textContent&&_domNode$textContent.endsWith("\n\n"))&&offset--}if(!textNode){if(suppressThrow)return null;throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint))}var slateNode=ReactEditor.toSlateNode(editor,textNode);return{path:ReactEditor.findPath(editor,slateNode),offset}},toSlateRange:function toSlateRange(editor,domRange,options){var anchorNode,anchorOffset,focusNode,focusOffset,isCollapsed,exactMatch=options.exactMatch,suppressThrow=options.suppressThrow;if((isDOMSelection(domRange)?domRange.anchorNode:domRange.startContainer)&&(isDOMSelection(domRange)?(anchorNode=domRange.anchorNode,anchorOffset=domRange.anchorOffset,focusNode=domRange.focusNode,focusOffset=domRange.focusOffset,isCollapsed=IS_CHROME&&function hasShadowRoot(){return!(!window.document.activeElement||!window.document.activeElement.shadowRoot)}()?domRange.anchorNode===domRange.focusNode&&domRange.anchorOffset===domRange.focusOffset:domRange.isCollapsed):(anchorNode=domRange.startContainer,anchorOffset=domRange.startOffset,focusNode=domRange.endContainer,focusOffset=domRange.endOffset,isCollapsed=domRange.collapsed)),null==anchorNode||null==focusNode||null==anchorOffset||null==focusOffset)throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));var anchor=ReactEditor.toSlatePoint(editor,[anchorNode,anchorOffset],{exactMatch,suppressThrow});if(!anchor)return null;var focus=isCollapsed?anchor:ReactEditor.toSlatePoint(editor,[focusNode,focusOffset],{exactMatch,suppressThrow});if(!focus)return null;var range={anchor,focus};return _slate.Range.isExpanded(range)&&_slate.Range.isForward(range)&&isDOMElement(focusNode)&&_slate.Editor.void(editor,{at:range.focus,mode:"highest"})&&(range=_slate.Editor.unhangRange(editor,range,{voids:!0})),range},hasRange:function hasRange(editor,range){var anchor=range.anchor,focus=range.focus;return _slate.Editor.hasPath(editor,anchor.path)&&_slate.Editor.hasPath(editor,focus.path)}};var AndroidInputManager=function AndroidInputManager(editor,restoreDOM){var _this=this;this.editor=editor,this.restoreDOM=restoreDOM,this.flush=function(mutations){try{_this.reconcileMutations(mutations)}catch(err){console.error(err),_this.restoreDOM()}},this.reconcileMutations=function(mutations){var mutationData=function gatherMutationData(editor,mutations){var addedNodes=[],removedNodes=[],insertedText=[],characterDataMutations=[];return mutations.forEach((function(mutation){switch(mutation.type){case"childList":mutation.addedNodes.length&&mutation.addedNodes.forEach((function(addedNode){addedNodes.push(addedNode)})),mutation.removedNodes.forEach((function(removedNode){removedNodes.push(removedNode)}));break;case"characterData":characterDataMutations.push(mutation);var parentNode=mutation.target.parentNode;if(!parentNode)return;var textInsertion=getTextInsertion(editor,parentNode);if(!textInsertion)return;if(insertedText.some((function(_ref){var path=_ref.path;return _slate.Path.equals(path,textInsertion.path)})))return;insertedText.push(textInsertion)}})),{addedNodes,removedNodes,insertedText,characterDataMutations}}(_this.editor,mutations),insertedText=mutationData.insertedText,removedNodes=mutationData.removedNodes;if(function isReplaceExpandedSelection(_ref4,_ref5){var selection=_ref4.selection,removedNodes=_ref5.removedNodes;return!!selection&&_slate.Range.isExpanded(selection)&&removedNodes.length>0}(_this.editor,mutationData)){var text=function combineInsertedText(insertedText){return insertedText.reduce((function(acc,_ref){var text=_ref.text;return"".concat(acc).concat(text.insertText)}),"")}(insertedText);_this.replaceExpandedSelection(text)}else!function isLineBreak(editor,_ref2){var addedNodes=_ref2.addedNodes,selection=editor.selection,parentNode=selection?_slate.Node.parent(editor,selection.anchor.path):null,parentDOMNode=parentNode?ReactEditor.toDOMNode(editor,parentNode):null;return!!parentDOMNode&&addedNodes.some((function(addedNode){return addedNode instanceof HTMLElement&&addedNode.tagName===(null==parentDOMNode?void 0:parentDOMNode.tagName)}))}(_this.editor,mutationData)?!function isRemoveLeafNodes(_,_ref7){var addedNodes=_ref7.addedNodes,characterDataMutations=_ref7.characterDataMutations;return _ref7.removedNodes.length>0&&0===addedNodes.length&&characterDataMutations.length>0}(_this.editor,mutationData)?!function isDeletion(_,_ref3){return _ref3.removedNodes.length>0}(_this.editor,mutationData)?function isTextInsertion(_,_ref6){return _ref6.insertedText.length>0}(_this.editor,mutationData)&&_this.insertText(insertedText):_this.deleteBackward():_this.removeLeafNodes(removedNodes):_this.insertBreak()},this.insertText=function(insertedText){var selection=_this.editor.selection;if(ReactEditor.isComposing(_this.editor)||IS_ON_COMPOSITION_END.get(_this.editor))return EDITOR_ON_COMPOSITION_TEXT.set(_this.editor,insertedText),void IS_ON_COMPOSITION_END.set(_this.editor,!1);insertedText.forEach((function(insertion){var text=insertion.text.insertText,at=normalizeTextInsertionRange(_this.editor,selection,insertion);_slate.Transforms.setSelection(_this.editor,at),_slate.Editor.insertText(_this.editor,text)}))},this.insertBreak=function(){var selection=_this.editor.selection;_slate.Editor.insertBreak(_this.editor),_this.restoreDOM(),selection&&setTimeout((function(){_this.editor.selection&&_slate.Range.equals(selection,_this.editor.selection)&&_slate.Transforms.move(_this.editor)}),100)},this.replaceExpandedSelection=function(text){_slate.Editor.deleteFragment(_this.editor),text.length&&_slate.Editor.insertText(_this.editor,text),_this.restoreDOM()},this.deleteBackward=function(){_slate.Editor.deleteBackward(_this.editor),ReactEditor.focus(_this.editor),_this.restoreDOM()},this.removeLeafNodes=function(nodes){var _step3,_iterator3=_createForOfIteratorHelper(nodes);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var node=_step3.value,slateNode=ReactEditor.toSlateNode(_this.editor,node);if(slateNode){var path=ReactEditor.findPath(_this.editor,slateNode);_slate.Transforms.delete(_this.editor,{at:path}),_this.restoreDOM()}}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}},this.editor=editor,this.restoreDOM=restoreDOM};function useMutationObserver(node,callback,options){var mutationObserver=_slicedToArray((0,_react.useState)((function(){return new MutationObserver(callback)})),1)[0];useIsomorphicLayoutEffect((function(){mutationObserver.disconnect()})),(0,_react.useEffect)((function(){if(!node.current)throw new Error("Failed to attach MutationObserver, `node` is undefined");return mutationObserver.observe(node.current,options),mutationObserver.disconnect.bind(mutationObserver)}))}var MUTATION_OBSERVER_CONFIG$1={childList:!0,characterData:!0,subtree:!0};function findClosestKnowSlateNode(domNode){var _domEl,domEl=isDOMElement(domNode)?domNode:domNode.parentElement;domEl&&!domEl.hasAttribute("data-slate-node")&&(domEl=domEl.closest("[data-slate-node]"));var slateNode=domEl&&ELEMENT_TO_NODE.get(domEl);return slateNode||(null!==(_domEl=domEl)&&void 0!==_domEl&&_domEl.parentElement?findClosestKnowSlateNode(domEl.parentElement):null)}function useRestoreDom(node,receivedUserInput){var editor=useSlateStatic(),mutatedNodes=(0,_react.useRef)(new Set);useMutationObserver(node,(0,_react.useCallback)((function(mutations){receivedUserInput.current&&mutations.forEach((function(_ref){var slateNode=findClosestKnowSlateNode(_ref.target);if(slateNode)return mutatedNodes.current.add(slateNode)}))}),[]),MUTATION_OBSERVER_CONFIG$1),mutatedNodes.current.clear();var restore=(0,_react.useCallback)((function(){var mutated=Array.from(mutatedNodes.current.values()),nodesToRestore=mutated.filter((function(n){return!mutated.some((function(m){return _slate.Path.isParent(ReactEditor.findPath(editor,m),ReactEditor.findPath(editor,n))}))}));nodesToRestore.forEach((function(n){var _NODE_TO_RESTORE_DOM$;null===(_NODE_TO_RESTORE_DOM$=NODE_TO_RESTORE_DOM.get(n))||void 0===_NODE_TO_RESTORE_DOM$||_NODE_TO_RESTORE_DOM$()})),mutatedNodes.current.clear()}),[]);return restore}var MUTATION_OBSERVER_CONFIG={childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0};function useAndroidInputManager(node){var editor=useSlateStatic(),_useTrackUserInput=function useTrackUserInput(){var editor=useSlateStatic(),receivedUserInput=(0,_react.useRef)(!1),animationFrameRef=(0,_react.useRef)(null),onUserInput=(0,_react.useCallback)((function(){if(!1===receivedUserInput.current){var window=ReactEditor.getWindow(editor);receivedUserInput.current=!0,animationFrameRef.current&&window.cancelAnimationFrame(animationFrameRef.current),animationFrameRef.current=window.requestAnimationFrame((function(){receivedUserInput.current=!1,animationFrameRef.current=null}))}}),[]);return(0,_react.useEffect)((function(){receivedUserInput.current&&(receivedUserInput.current=!1)})),{receivedUserInput,onUserInput}}(),receivedUserInput=_useTrackUserInput.receivedUserInput,onUserInput=_useTrackUserInput.onUserInput,restoreDom=useRestoreDom(node,receivedUserInput),inputManager=(0,_react.useMemo)((function(){return new AndroidInputManager(editor,restoreDom)}),[restoreDom,editor]),timeoutId=(0,_react.useRef)(null),isReconciling=(0,_react.useRef)(!1);return useMutationObserver(node,(0,_react.useCallback)((function(mutations){receivedUserInput.current&&(isReconciling.current=!0,inputManager.flush(mutations),timeoutId.current&&clearTimeout(timeoutId.current),timeoutId.current=setTimeout((function(){isReconciling.current=!1,timeoutId.current=null}),250))}),[]),MUTATION_OBSERVER_CONFIG),{isReconciling,onUserInput}}var _excluded$1=["autoFocus","decorate","onDOMBeforeInput","placeholder","readOnly","renderElement","renderLeaf","renderPlaceholder","style","as"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var AndroidEditable=exports.AndroidEditable=function AndroidEditable(props){var autoFocus=props.autoFocus,_props$decorate2=props.decorate,decorate=void 0===_props$decorate2?defaultDecorate:_props$decorate2,propsOnDOMBeforeInput=props.onDOMBeforeInput,placeholder=props.placeholder,_props$readOnly2=props.readOnly,readOnly=void 0!==_props$readOnly2&&_props$readOnly2,renderElement=props.renderElement,renderLeaf=props.renderLeaf,_props$renderPlacehol2=props.renderPlaceholder,renderPlaceholder=void 0===_props$renderPlacehol2?function(props){return _react.default.createElement(DefaultPlaceholder,Object.assign({},props))}:_props$renderPlacehol2,_props$style2=props.style,style=void 0===_props$style2?{}:_props$style2,_props$as2=props.as,Component=void 0===_props$as2?"div":_props$as2,attributes=_objectWithoutProperties(props,_excluded$1),editor=useSlate(),_useState8=_slicedToArray((0,_react.useState)(!1),2),isComposing=_useState8[0],setIsComposing=_useState8[1],ref=(0,_react.useRef)(null),inputManager=useAndroidInputManager(ref);IS_READ_ONLY.set(editor,readOnly);var state=(0,_react.useMemo)((function(){return{isComposing:!1,isUpdatingSelection:!1,latestElement:null}}),[]),contentKey=useContentKey(editor);useIsomorphicLayoutEffect((function(){var window;ref.current&&(window=getDefaultView(ref.current))?(EDITOR_TO_WINDOW.set(editor,window),EDITOR_TO_ELEMENT.set(editor,ref.current),NODE_TO_ELEMENT.set(editor,ref.current),ELEMENT_TO_NODE.set(ref.current,editor)):NODE_TO_ELEMENT.delete(editor);try{var selection=editor.selection,domSelection=ReactEditor.findDocumentOrShadowRoot(editor).getSelection();if(state.isComposing||!domSelection||!ReactEditor.isFocused(editor))return;var hasDomSelection="None"!==domSelection.type;if(!selection&&!hasDomSelection)return;var editorElement=EDITOR_TO_ELEMENT.get(editor),hasDomSelectionInEditor=!1;if(editorElement.contains(domSelection.anchorNode)&&editorElement.contains(domSelection.focusNode)&&(hasDomSelectionInEditor=!0),hasDomSelection&&hasDomSelectionInEditor&&selection){var slateRange=ReactEditor.toSlateRange(editor,domSelection,{exactMatch:!0,suppressThrow:!0});if(slateRange&&_slate.Range.equals(slateRange,selection))return}if(selection&&!ReactEditor.hasRange(editor,selection))return void(editor.selection=ReactEditor.toSlateRange(editor,domSelection,{exactMatch:!1,suppressThrow:!1}));var el=ReactEditor.toDOMNode(editor,editor);state.isUpdatingSelection=!0;var newDomRange=selection&&ReactEditor.toDOMRange(editor,selection);if(newDomRange){_slate.Range.isBackward(selection)?domSelection.setBaseAndExtent(newDomRange.endContainer,newDomRange.endOffset,newDomRange.startContainer,newDomRange.startOffset):domSelection.setBaseAndExtent(newDomRange.startContainer,newDomRange.startOffset,newDomRange.endContainer,newDomRange.endOffset);var leafEl=newDomRange.startContainer.parentElement;leafEl.getBoundingClientRect=newDomRange.getBoundingClientRect.bind(newDomRange),(0,_scrollIntoViewIfNeeded.default)(leafEl,{scrollMode:"if-needed",boundary:el}),delete leafEl.getBoundingClientRect}else domSelection.removeAllRanges();setTimeout((function(){state.isUpdatingSelection=!1}))}catch(_unused){state.isUpdatingSelection=!1}})),(0,_react.useEffect)((function(){ref.current&&autoFocus&&ref.current.focus()}),[autoFocus]);var onDOMSelectionChange=(0,_react.useCallback)((0,_throttle.default)((function(){try{if(!state.isComposing&&!state.isUpdatingSelection&&!inputManager.isReconciling.current){var root=ReactEditor.findDocumentOrShadowRoot(editor),activeElement=root.activeElement,el=ReactEditor.toDOMNode(editor,editor),domSelection=root.getSelection();if(activeElement===el?(state.latestElement=activeElement,IS_FOCUSED.set(editor,!0)):IS_FOCUSED.delete(editor),!domSelection)return _slate.Transforms.deselect(editor);var anchorNode=domSelection.anchorNode,focusNode=domSelection.focusNode,anchorNodeSelectable=hasEditableTarget(editor,anchorNode)||isTargetInsideNonReadonlyVoid(editor,anchorNode),focusNodeSelectable=hasEditableTarget(editor,focusNode)||isTargetInsideNonReadonlyVoid(editor,focusNode);if(anchorNodeSelectable&&focusNodeSelectable){var range=ReactEditor.toSlateRange(editor,domSelection,{exactMatch:!1,suppressThrow:!1});_slate.Transforms.select(editor,range)}else _slate.Transforms.deselect(editor)}}catch(_unused2){}}),100),[readOnly]),scheduleOnDOMSelectionChange=(0,_react.useMemo)((function(){return(0,_debounce.default)(onDOMSelectionChange,0)}),[onDOMSelectionChange]),onDOMBeforeInput=(0,_react.useCallback)((function(event){readOnly||!hasEditableTarget(editor,event.target)||isDOMEventHandled(event,propsOnDOMBeforeInput)||(scheduleOnDOMSelectionChange.flush(),inputManager.onUserInput())}),[readOnly,propsOnDOMBeforeInput]);useIsomorphicLayoutEffect((function(){var node=ref.current;return null==node||node.addEventListener("beforeinput",onDOMBeforeInput),function(){return null==node?void 0:node.removeEventListener("beforeinput",onDOMBeforeInput)}}),[contentKey,propsOnDOMBeforeInput]),useIsomorphicLayoutEffect((function(){var window=ReactEditor.getWindow(editor);return window.document.addEventListener("selectionchange",scheduleOnDOMSelectionChange),function(){window.document.removeEventListener("selectionchange",scheduleOnDOMSelectionChange)}}),[scheduleOnDOMSelectionChange]);var decorations=decorate([editor,[]]);if(placeholder&&1===editor.children.length&&1===Array.from(_slate.Node.texts(editor)).length&&""===_slate.Node.string(editor)&&!isComposing){var start=_slate.Editor.start(editor,[]);decorations.push(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({},PLACEHOLDER_SYMBOL,!0),"placeholder",placeholder),"anchor",start),"focus",start))}return _react.default.createElement(ReadOnlyContext.Provider,{value:readOnly},_react.default.createElement(DecorateContext.Provider,{value:decorate},_react.default.createElement(Component,Object.assign({key:contentKey,role:readOnly?void 0:"textbox"},attributes,{spellCheck:attributes.spellCheck,autoCorrect:attributes.autoCorrect,autoCapitalize:attributes.autoCapitalize,"data-slate-editor":!0,"data-slate-node":"value",contentEditable:!readOnly||void 0,suppressContentEditableWarning:!0,ref,style:_objectSpread({position:"relative",outline:"none",whiteSpace:"pre-wrap",wordWrap:"break-word"},style),onCopy:(0,_react.useCallback)((function(event){hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCopy)&&(event.preventDefault(),ReactEditor.setFragmentData(editor,event.clipboardData,"copy"))}),[attributes.onCopy]),onCut:(0,_react.useCallback)((function(event){if(!readOnly&&hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCut)){event.preventDefault(),ReactEditor.setFragmentData(editor,event.clipboardData,"cut");var selection=editor.selection;if(selection)if(_slate.Range.isExpanded(selection))_slate.Editor.deleteFragment(editor);else{var node=_slate.Node.parent(editor,selection.anchor.path);_slate.Editor.isVoid(editor,node)&&_slate.Transforms.delete(editor)}}}),[readOnly,attributes.onCut]),onFocus:(0,_react.useCallback)((function(event){if(!readOnly&&!state.isUpdatingSelection&&hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onFocus)){var root=ReactEditor.findDocumentOrShadowRoot(editor);state.latestElement=root.activeElement,IS_FOCUSED.set(editor,!0)}}),[readOnly,attributes.onFocus]),onBlur:(0,_react.useCallback)((function(event){if(!readOnly&&!state.isUpdatingSelection&&hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onBlur)){var root=ReactEditor.findDocumentOrShadowRoot(editor);if(state.latestElement!==root.activeElement){var relatedTarget=event.relatedTarget;if(!(relatedTarget===ReactEditor.toDOMNode(editor,editor)||isDOMElement(relatedTarget)&&relatedTarget.hasAttribute("data-slate-spacer"))){if(null!=relatedTarget&&isDOMNode(relatedTarget)&&ReactEditor.hasDOMNode(editor,relatedTarget)){var node=ReactEditor.toSlateNode(editor,relatedTarget);if(_slate.Element.isElement(node)&&!editor.isVoid(node))return}IS_FOCUSED.delete(editor)}}}}),[readOnly,attributes.onBlur]),onClick:(0,_react.useCallback)((function(event){if(!readOnly&&hasTarget(editor,event.target)&&!isEventHandled(event,attributes.onClick)&&isDOMNode(event.target)){var node=ReactEditor.toSlateNode(editor,event.target),path=ReactEditor.findPath(editor,node);if(_slate.Editor.hasPath(editor,path))if(_slate.Node.get(editor,path)===node){var _start=_slate.Editor.start(editor,path),end=_slate.Editor.end(editor,path),startVoid=_slate.Editor.void(editor,{at:_start}),endVoid=_slate.Editor.void(editor,{at:end});if(startVoid&&endVoid&&_slate.Path.equals(startVoid[1],endVoid[1])){var range=_slate.Editor.range(editor,_start);_slate.Transforms.select(editor,range)}}}}),[readOnly,attributes.onClick]),onCompositionEnd:(0,_react.useCallback)((function(event){hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCompositionEnd)&&(scheduleOnDOMSelectionChange.flush(),setTimeout((function(){state.isComposing&&setIsComposing(!1),state.isComposing=!1,IS_COMPOSING.set(editor,!1),IS_ON_COMPOSITION_END.set(editor,!0);var insertedText=EDITOR_ON_COMPOSITION_TEXT.get(editor)||[];if(insertedText.length){EDITOR_ON_COMPOSITION_TEXT.set(editor,[]);var selection=editor.selection;insertedText.forEach((function(insertion){var text=insertion.text.insertText,at=normalizeTextInsertionRange(editor,selection,insertion);_slate.Transforms.setSelection(editor,at),_slate.Editor.insertText(editor,text)}))}}),20))}),[attributes.onCompositionEnd]),onCompositionUpdate:(0,_react.useCallback)((function(event){hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCompositionUpdate)&&(!state.isComposing&&setIsComposing(!0),state.isComposing=!0,IS_COMPOSING.set(editor,!0))}),[attributes.onCompositionUpdate]),onCompositionStart:(0,_react.useCallback)((function(event){hasEditableTarget(editor,event.target)&&!isEventHandled(event,attributes.onCompositionStart)&&(!state.isComposing&&setIsComposing(!0),state.isComposing=!0,IS_COMPOSING.set(editor,!0))}),[attributes.onCompositionStart]),onPaste:(0,_react.useCallback)((function(event){event.clipboardData=function getClipboardData(dataTransfer){if(!dataTransfer.getData("application/x-slate-fragment")){var fragment=getSlateFragmentAttribute(dataTransfer);if(fragment){var clipboardData=new DataTransfer;return dataTransfer.types.forEach((function(type){clipboardData.setData(type,dataTransfer.getData(type))})),clipboardData.setData("application/x-slate-fragment",fragment),clipboardData}}return dataTransfer}(event.clipboardData),!hasEditableTarget(editor,event.target)||isEventHandled(event,attributes.onPaste)||readOnly||(event.preventDefault(),ReactEditor.insertData(editor,event.clipboardData))}),[readOnly,attributes.onPaste])}),useChildren({decorations,node:editor,renderElement,renderPlaceholder,renderLeaf,selection:editor.selection}))))},FocusedContext=(0,_react.createContext)(!1);exports.useFocused=function useFocused(){return(0,_react.useContext)(FocusedContext)};var SlateSelectorContext=(0,_react.createContext)({}),refEquality=function refEquality(a,b){return a===b};var _excluded=["editor","children","onChange","value"],doRectsIntersect=(exports.Slate=function Slate(props){var editor=props.editor,children=props.children,onChange=props.onChange,value=props.value,rest=_objectWithoutProperties(props,_excluded),unmountRef=(0,_react.useRef)(!1),_React$useState2=_slicedToArray(_react.default.useState((function(){if(!_slate.Node.isNodeList(value))throw new Error("[Slate] value is invalid! Expected a list of elements"+"but got: ".concat(_slate.Scrubber.stringify(value)));if(!_slate.Editor.isEditor(editor))throw new Error("[Slate] editor is invalid! you passed:"+"".concat(_slate.Scrubber.stringify(editor)));return editor.children=value,Object.assign(editor,rest),[editor]})),2),context=_React$useState2[0],setContext=_React$useState2[1],_getSelectorContext=function getSelectorContext(editor){var eventListeners=(0,_react.useRef)([]).current,slateRef=(0,_react.useRef)({editor}).current,onChange=(0,_react.useCallback)((function(editor){slateRef.editor=editor,eventListeners.forEach((function(listener){return listener(editor)}))}),[]);return{selectorContext:(0,_react.useMemo)((function(){return{getSlate:function getSlate(){return slateRef.editor},addEventListener:function addEventListener(callback){return eventListeners.push(callback),function(){eventListeners.splice(eventListeners.indexOf(callback),1)}}}}),[eventListeners,slateRef]),onChange}}(editor),selectorContext=_getSelectorContext.selectorContext,handleSelectorChange=_getSelectorContext.onChange,onContextChange=(0,_react.useCallback)((function(){onChange&&onChange(editor.children),setContext([editor]),handleSelectorChange(editor)}),[onChange]);EDITOR_TO_ON_CHANGE.set(editor,onContextChange),(0,_react.useEffect)((function(){return function(){EDITOR_TO_ON_CHANGE.set(editor,(function(){})),unmountRef.current=!0}}),[]);var _useState10=_slicedToArray((0,_react.useState)(ReactEditor.isFocused(editor)),2),isFocused=_useState10[0],setIsFocused=_useState10[1];return(0,_react.useEffect)((function(){setIsFocused(ReactEditor.isFocused(editor))})),useIsomorphicLayoutEffect((function(){var fn=function fn(){return setIsFocused(ReactEditor.isFocused(editor))};return IS_REACT_VERSION_17_OR_ABOVE?(document.addEventListener("focusin",fn),document.addEventListener("focusout",fn),function(){document.removeEventListener("focusin",fn),document.removeEventListener("focusout",fn)}):(document.addEventListener("focus",fn,!0),document.addEventListener("blur",fn,!0),function(){document.removeEventListener("focus",fn,!0),document.removeEventListener("blur",fn,!0)})}),[]),_react.default.createElement(SlateSelectorContext.Provider,{value:selectorContext},_react.default.createElement(SlateContext.Provider,{value:context},_react.default.createElement(EditorContext.Provider,{value:editor},_react.default.createElement(FocusedContext.Provider,{value:isFocused},children))))},exports.useEditor=function useEditor(){var editor=(0,_react.useContext)(EditorContext);if(!editor)throw new Error("The `useEditor` hook must be used inside the <Slate> component's context.");return editor},function doRectsIntersect(rect,compareRect){var middle=(compareRect.top+compareRect.bottom)/2;return rect.top<=middle&&rect.bottom>=middle}),areRangesSameLine=function areRangesSameLine(editor,range1,range2){var rect1=ReactEditor.toDOMRange(editor,range1).getBoundingClientRect(),rect2=ReactEditor.toDOMRange(editor,range2).getBoundingClientRect();return doRectsIntersect(rect1,rect2)&&doRectsIntersect(rect2,rect1)},getMatches=(exports.withReact=function withReact(editor){var e=editor,apply=e.apply,onChange=e.onChange,deleteBackward=e.deleteBackward;return EDITOR_TO_KEY_TO_ELEMENT.set(e,new WeakMap),e.deleteBackward=function(unit){if("line"!==unit)return deleteBackward(unit);if(editor.selection&&_slate.Range.isCollapsed(editor.selection)){var parentBlockEntry=_slate.Editor.above(editor,{match:function match(n){return _slate.Editor.isBlock(editor,n)},at:editor.selection});if(parentBlockEntry){var parentBlockPath=_slicedToArray(parentBlockEntry,2)[1],parentElementRange=_slate.Editor.range(editor,parentBlockPath,editor.selection.anchor),currentLineRange=function findCurrentLineRange(editor,parentRange){var parentRangeBoundary=_slate.Editor.range(editor,_slate.Range.end(parentRange)),positions=Array.from(_slate.Editor.positions(editor,{at:parentRange})),left=0,right=positions.length,middle=Math.floor(right/2);if(areRangesSameLine(editor,_slate.Editor.range(editor,positions[left]),parentRangeBoundary))return _slate.Editor.range(editor,positions[left],parentRangeBoundary);if(positions.length<2)return _slate.Editor.range(editor,positions[positions.length-1],parentRangeBoundary);for(;middle!==positions.length&&middle!==left;)areRangesSameLine(editor,_slate.Editor.range(editor,positions[middle]),parentRangeBoundary)?right=middle:left=middle,middle=Math.floor((left+right)/2);return _slate.Editor.range(editor,positions[right],parentRangeBoundary)}(e,parentElementRange);_slate.Range.isCollapsed(currentLineRange)||_slate.Transforms.delete(editor,{at:currentLineRange})}}},e.apply=function(op){var matches=[];switch(op.type){case"insert_text":case"remove_text":case"set_node":case"split_node":matches.push.apply(matches,_toConsumableArray(getMatches(e,op.path)));break;case"set_selection":var _EDITOR_TO_USER_SELEC;null===(_EDITOR_TO_USER_SELEC=EDITOR_TO_USER_SELECTION.get(editor))||void 0===_EDITOR_TO_USER_SELEC||_EDITOR_TO_USER_SELEC.unref(),EDITOR_TO_USER_SELECTION.delete(editor);break;case"insert_node":case"remove_node":matches.push.apply(matches,_toConsumableArray(getMatches(e,_slate.Path.parent(op.path))));break;case"merge_node":var prevPath=_slate.Path.previous(op.path);matches.push.apply(matches,_toConsumableArray(getMatches(e,prevPath)));break;case"move_node":var commonPath=_slate.Path.common(_slate.Path.parent(op.path),_slate.Path.parent(op.newPath));matches.push.apply(matches,_toConsumableArray(getMatches(e,commonPath)))}apply(op);for(var _i3=0,_matches=matches;_i3<_matches.length;_i3++){var _matches$_i=_slicedToArray(_matches[_i3],2),path=_matches$_i[0],key=_matches$_i[1],node=_slicedToArray(_slate.Editor.node(e,path),1)[0];NODE_TO_KEY.set(node,key)}},e.setFragmentData=function(data){var selection=e.selection;if(selection){var _Range$edges2=_slicedToArray(_slate.Range.edges(selection),2),start=_Range$edges2[0],end=_Range$edges2[1],startVoid=_slate.Editor.void(e,{at:start.path}),endVoid=_slate.Editor.void(e,{at:end.path});if(!_slate.Range.isCollapsed(selection)||startVoid){var domRange=ReactEditor.toDOMRange(e,selection),contents=domRange.cloneContents(),attach=contents.childNodes[0];if(contents.childNodes.forEach((function(node){node.textContent&&""!==node.textContent.trim()&&(attach=node)})),endVoid){var voidNode=_slicedToArray(endVoid,1)[0],r=domRange.cloneRange(),domNode=ReactEditor.toDOMNode(e,voidNode);r.setEndAfter(domNode),contents=r.cloneContents()}if(startVoid&&(attach=contents.querySelector("[data-slate-spacer]")),Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach((function(zw){var isNewline="n"===zw.getAttribute("data-slate-zero-width");zw.textContent=isNewline?"\n":""})),isDOMText(attach)){var span=attach.ownerDocument.createElement("span");span.style.whiteSpace="pre",span.appendChild(attach),contents.appendChild(span),attach=span}var fragment=e.getFragment(),string=JSON.stringify(fragment),encoded=window.btoa(encodeURIComponent(string));attach.setAttribute("data-slate-fragment",encoded),data.setData("application/x-slate-fragment",encoded);var div=contents.ownerDocument.createElement("div");return div.appendChild(contents),div.setAttribute("hidden","true"),contents.ownerDocument.body.appendChild(div),data.setData("text/html",div.innerHTML),data.setData("text/plain",getPlainText(div)),contents.ownerDocument.body.removeChild(div),data}}},e.insertData=function(data){e.insertFragmentData(data)||e.insertTextData(data)},e.insertFragmentData=function(data){var fragment=data.getData("application/x-slate-fragment")||getSlateFragmentAttribute(data);if(fragment){var decoded=decodeURIComponent(window.atob(fragment)),parsed=JSON.parse(decoded);return e.insertFragment(parsed),!0}return!1},e.insertTextData=function(data){var text=data.getData("text/plain");if(text){var _step4,split=!1,_iterator4=_createForOfIteratorHelper(text.split(/\r\n|\r|\n/));try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var line=_step4.value;split&&_slate.Transforms.splitNodes(e,{always:!0}),e.insertText(line),split=!0}}catch(err){_iterator4.e(err)}finally{_iterator4.f()}return!0}return!1},e.onChange=function(){_reactDom.default.unstable_batchedUpdates((function(){var onContextChange=EDITOR_TO_ON_CHANGE.get(e);onContextChange&&onContextChange(),onChange()}))},e},function getMatches(e,path){var _step5,matches=[],_iterator5=_createForOfIteratorHelper(_slate.Editor.levels(e,{at:path}));try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _step5$value=_slicedToArray(_step5.value,2),n=_step5$value[0],p=_step5$value[1],key=ReactEditor.findKey(e,n);matches.push([p,key])}}catch(err){_iterator5.e(err)}finally{_iterator5.f()}return matches});exports.Editable=IS_ANDROID?AndroidEditable:Editable$1},"./node_modules/slate/dist/index.es.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createEditor=exports.Transforms=exports.Text=exports.Span=exports.Scrubber=exports.RangeRef=exports.Range=exports.PointRef=exports.Point=exports.PathRef=exports.Path=exports.Operation=exports.Node=exports.Location=exports.Element=exports.Editor=void 0;var _isPlainObject=__webpack_require__("./node_modules/is-plain-object/dist/is-plain-object.js"),_immer=__webpack_require__("./node_modules/immer/dist/index.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function define(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==_typeof(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function value(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(_typeof(e)+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function reset(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function stop(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function dispatchException(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function abrupt(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function complete(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function finish(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function _catch(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function delegateYield(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _defineProperty2(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var DIRTY_PATHS=new WeakMap,DIRTY_PATH_KEYS=new WeakMap,FLUSHING=new WeakMap,NORMALIZING=new WeakMap,PATH_REFS=new WeakMap,POINT_REFS=new WeakMap,RANGE_REFS=new WeakMap;function ownKeys$9(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$9(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$9(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$9(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}exports.createEditor=function createEditor(){var editor={children:[],operations:[],selection:null,marks:null,isInline:function isInline(){return!1},isVoid:function isVoid(){return!1},onChange:function onChange(){},apply:function apply(op){var _step,_iterator=_createForOfIteratorHelper(Editor.pathRefs(editor));try{for(_iterator.s();!(_step=_iterator.n()).done;){var ref=_step.value;PathRef.transform(ref,op)}}catch(err){_iterator.e(err)}finally{_iterator.f()}var _step2,_iterator2=_createForOfIteratorHelper(Editor.pointRefs(editor));try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _ref=_step2.value;PointRef.transform(_ref,op)}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}var _step3,_iterator3=_createForOfIteratorHelper(Editor.rangeRefs(editor));try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _ref2=_step3.value;RangeRef.transform(_ref2,op)}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}var dirtyPaths,dirtyPathKeys,oldDirtyPaths=DIRTY_PATHS.get(editor)||[],oldDirtyPathKeys=DIRTY_PATH_KEYS.get(editor)||new Set,add=function add(path){if(path){var key=path.join(",");dirtyPathKeys.has(key)||(dirtyPathKeys.add(key),dirtyPaths.push(path))}};if(Path.operationCanTransformPath(op)){dirtyPaths=[],dirtyPathKeys=new Set;var _step4,_iterator4=_createForOfIteratorHelper(oldDirtyPaths);try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var path=_step4.value;add(Path.transform(path,op))}}catch(err){_iterator4.e(err)}finally{_iterator4.f()}}else dirtyPaths=oldDirtyPaths,dirtyPathKeys=oldDirtyPathKeys;var _step5,_iterator5=_createForOfIteratorHelper(getDirtyPaths(op));try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){add(_step5.value)}}catch(err){_iterator5.e(err)}finally{_iterator5.f()}DIRTY_PATHS.set(editor,dirtyPaths),DIRTY_PATH_KEYS.set(editor,dirtyPathKeys),Transforms.transform(editor,op),editor.operations.push(op),Editor.normalize(editor),"set_selection"===op.type&&(editor.marks=null),FLUSHING.get(editor)||(FLUSHING.set(editor,!0),Promise.resolve().then((function(){FLUSHING.set(editor,!1),editor.onChange(),editor.operations=[]})))},addMark:function addMark(key,value){var selection=editor.selection;if(selection)if(Range.isExpanded(selection))Transforms.setNodes(editor,_defineProperty2({},key,value),{match:Text.isText,split:!0});else{var marks=_objectSpread$9(_objectSpread$9({},Editor.marks(editor)||{}),{},_defineProperty2({},key,value));editor.marks=marks,FLUSHING.get(editor)||editor.onChange()}},deleteBackward:function deleteBackward(unit){var selection=editor.selection;selection&&Range.isCollapsed(selection)&&Transforms.delete(editor,{unit,reverse:!0})},deleteForward:function deleteForward(unit){var selection=editor.selection;selection&&Range.isCollapsed(selection)&&Transforms.delete(editor,{unit})},deleteFragment:function deleteFragment(direction){var selection=editor.selection;selection&&Range.isExpanded(selection)&&Transforms.delete(editor,{reverse:"backward"===direction})},getFragment:function getFragment(){var selection=editor.selection;return selection?Node.fragment(editor,selection):[]},insertBreak:function insertBreak(){Transforms.splitNodes(editor,{always:!0})},insertSoftBreak:function insertSoftBreak(){Transforms.splitNodes(editor,{always:!0})},insertFragment:function insertFragment(fragment){Transforms.insertFragment(editor,fragment)},insertNode:function insertNode(node){Transforms.insertNodes(editor,node)},insertText:function insertText(text){var selection=editor.selection,marks=editor.marks;if(selection){if(marks){var node=_objectSpread$9({text},marks);Transforms.insertNodes(editor,node)}else Transforms.insertText(editor,text);editor.marks=null}},normalizeNode:function normalizeNode(entry){var _entry2=_slicedToArray(entry,2),node=_entry2[0],path=_entry2[1];if(!Text.isText(node))if(Element.isElement(node)&&0===node.children.length){Transforms.insertNodes(editor,{text:""},{at:path.concat(0),voids:!0})}else for(var shouldHaveInlines=!Editor.isEditor(node)&&(Element.isElement(node)&&(editor.isInline(node)||0===node.children.length||Text.isText(node.children[0])||editor.isInline(node.children[0]))),n=0,i=0;i<node.children.length;i++,n++){var currentNode=Node.get(editor,path);if(!Text.isText(currentNode)){var _child=node.children[i],prev=currentNode.children[n-1],isLast=i===node.children.length-1;if((Text.isText(_child)||Element.isElement(_child)&&editor.isInline(_child))!==shouldHaveInlines)Transforms.removeNodes(editor,{at:path.concat(n),voids:!0}),n--;else if(Element.isElement(_child)){if(editor.isInline(_child))if(null!=prev&&Text.isText(prev)){if(isLast){Transforms.insertNodes(editor,{text:""},{at:path.concat(n+1),voids:!0}),n++}}else{Transforms.insertNodes(editor,{text:""},{at:path.concat(n),voids:!0}),n++}}else null!=prev&&Text.isText(prev)&&(Text.equals(_child,prev,{loose:!0})?(Transforms.mergeNodes(editor,{at:path.concat(n),voids:!0}),n--):""===prev.text?(Transforms.removeNodes(editor,{at:path.concat(n-1),voids:!0}),n--):""===_child.text&&(Transforms.removeNodes(editor,{at:path.concat(n),voids:!0}),n--))}}},removeMark:function removeMark(key){var selection=editor.selection;if(selection)if(Range.isExpanded(selection))Transforms.unsetNodes(editor,key,{match:Text.isText,split:!0});else{var marks=_objectSpread$9({},Editor.marks(editor)||{});delete marks[key],editor.marks=marks,FLUSHING.get(editor)||editor.onChange()}}};return editor};var getDirtyPaths=function getDirtyPaths(op){switch(op.type){case"insert_text":case"remove_text":case"set_node":var path=op.path;return Path.levels(path);case"insert_node":var node=op.node,_path2=op.path,levels=Path.levels(_path2),descendants=Text.isText(node)?[]:Array.from(Node.nodes(node),(function(_ref3){var p=_slicedToArray(_ref3,2)[1];return _path2.concat(p)}));return[].concat(_toConsumableArray(levels),_toConsumableArray(descendants));case"merge_node":var _path3=op.path,ancestors=Path.ancestors(_path3),previousPath=Path.previous(_path3);return[].concat(_toConsumableArray(ancestors),[previousPath]);case"move_node":var _path4=op.path,newPath=op.newPath;if(Path.equals(_path4,newPath))return[];var _step6,oldAncestors=[],newAncestors=[],_iterator6=_createForOfIteratorHelper(Path.ancestors(_path4));try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var ancestor=_step6.value,p=Path.transform(ancestor,op);oldAncestors.push(p)}}catch(err){_iterator6.e(err)}finally{_iterator6.f()}var _step7,_iterator7=_createForOfIteratorHelper(Path.ancestors(newPath));try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _ancestor=_step7.value,_p=Path.transform(_ancestor,op);newAncestors.push(_p)}}catch(err){_iterator7.e(err)}finally{_iterator7.f()}var newParent=newAncestors[newAncestors.length-1],newIndex=newPath[newPath.length-1],resultPath=newParent.concat(newIndex);return[].concat(oldAncestors,newAncestors,[resultPath]);case"remove_node":var _path5=op.path;return _toConsumableArray(Path.ancestors(_path5));case"split_node":var _path6=op.path,_levels=Path.levels(_path6),nextPath=Path.next(_path6);return[].concat(_toConsumableArray(_levels),[nextPath]);default:return[]}};function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var CodepointType,getCharacterDistance=function getCharacterDistance(str){var _step8,isRTL=arguments.length>1&&void 0!==arguments[1]&&arguments[1],isLTR=!isRTL,codepoints=isRTL?codepointsIteratorRTL(str):str,left=CodepointType.None,right=CodepointType.None,distance=0,gb12Or13=null,_iterator8=_createForOfIteratorHelper(codepoints);try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var _char=_step8.value,code=_char.codePointAt(0);if(!code)break;var type=getCodepointType(_char,code),_ref8=_slicedToArray(isLTR?[right,type]:[type,left],2);if(left=_ref8[0],right=_ref8[1],intersects(left,CodepointType.ZWJ)&&intersects(right,CodepointType.ExtPict)&&!endsWithEmojiZWJ(isLTR?str.substring(0,distance):str.substring(0,str.length-distance)))break;if(intersects(left,CodepointType.RI)&&intersects(right,CodepointType.RI)&&!(gb12Or13=null!==gb12Or13?!gb12Or13:!!isLTR||endsWithOddNumberOfRIs(str.substring(0,str.length-distance))))break;if(left!==CodepointType.None&&right!==CodepointType.None&&isBoundaryPair(left,right))break;distance+=_char.length}}catch(err){_iterator8.e(err)}finally{_iterator8.f()}return distance||1},SPACE=/\s/,PUNCTUATION=/[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/,CHAMELEON=/['\u2018\u2019]/,getWordDistance=function getWordDistance(text){for(var isRTL=arguments.length>1&&void 0!==arguments[1]&&arguments[1],dist=0,started=!1;text.length>0;){var charDist=getCharacterDistance(text,isRTL),_splitByCharacterDist2=_slicedToArray(splitByCharacterDistance(text,charDist,isRTL),2),_char2=_splitByCharacterDist2[0],remaining=_splitByCharacterDist2[1];if(isWordCharacter(_char2,remaining,isRTL))started=!0,dist+=charDist;else{if(started)break;dist+=charDist}text=remaining}return dist},splitByCharacterDistance=function splitByCharacterDistance(str,dist,isRTL){if(isRTL){var at=str.length-dist;return[str.slice(at,str.length),str.slice(0,at)]}return[str.slice(0,dist),str.slice(dist)]},isWordCharacter=function isWordCharacter(_char3,remaining){var isRTL=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(SPACE.test(_char3))return!1;if(CHAMELEON.test(_char3)){var charDist=getCharacterDistance(remaining,isRTL),_splitByCharacterDist4=_slicedToArray(splitByCharacterDistance(remaining,charDist,isRTL),2);if(isWordCharacter(_splitByCharacterDist4[0],_splitByCharacterDist4[1],isRTL))return!0}return!PUNCTUATION.test(_char3)},codepointsIteratorRTL=_regeneratorRuntime().mark((function codepointsIteratorRTL(str){var end,i,char1,char2;return _regeneratorRuntime().wrap((function codepointsIteratorRTL$(_context){for(;;)switch(_context.prev=_context.next){case 0:end=str.length-1,i=0;case 2:if(!(i<str.length)){_context.next=16;break}if(char1=str.charAt(end-i),!isLowSurrogate(char1.charCodeAt(0))){_context.next=11;break}if(char2=str.charAt(end-i-1),!isHighSurrogate(char2.charCodeAt(0))){_context.next=11;break}return _context.next=9,char2+char1;case 9:return i++,_context.abrupt("continue",13);case 11:return _context.next=13,char1;case 13:i++,_context.next=2;break;case 16:case"end":return _context.stop()}}),codepointsIteratorRTL)})),isHighSurrogate=function isHighSurrogate(charCode){return charCode>=55296&&charCode<=56319},isLowSurrogate=function isLowSurrogate(charCode){return charCode>=56320&&charCode<=57343};!function(CodepointType){CodepointType[CodepointType.None=0]="None",CodepointType[CodepointType.Extend=1]="Extend",CodepointType[CodepointType.ZWJ=2]="ZWJ",CodepointType[CodepointType.RI=4]="RI",CodepointType[CodepointType.Prepend=8]="Prepend",CodepointType[CodepointType.SpacingMark=16]="SpacingMark",CodepointType[CodepointType.L=32]="L",CodepointType[CodepointType.V=64]="V",CodepointType[CodepointType.T=128]="T",CodepointType[CodepointType.LV=256]="LV",CodepointType[CodepointType.LVT=512]="LVT",CodepointType[CodepointType.ExtPict=1024]="ExtPict",CodepointType[CodepointType.Any=2048]="Any"}(CodepointType||(CodepointType={}));var reExtend=/^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/,rePrepend=/^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/,reSpacingMark=/^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/,reL=/^[\u1100-\u115F\uA960-\uA97C]$/,reV=/^[\u1160-\u11A7\uD7B0-\uD7C6]$/,reT=/^[\u11A8-\u11FF\uD7CB-\uD7FB]$/,reLV=/^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/,reLVT=/^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/,reExtPict=/^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/,getCodepointType=function getCodepointType(_char4,code){var type=CodepointType.Any;return-1!==_char4.search(reExtend)&&(type|=CodepointType.Extend),8205===code&&(type|=CodepointType.ZWJ),code>=127462&&code<=127487&&(type|=CodepointType.RI),-1!==_char4.search(rePrepend)&&(type|=CodepointType.Prepend),-1!==_char4.search(reSpacingMark)&&(type|=CodepointType.SpacingMark),-1!==_char4.search(reL)&&(type|=CodepointType.L),-1!==_char4.search(reV)&&(type|=CodepointType.V),-1!==_char4.search(reT)&&(type|=CodepointType.T),-1!==_char4.search(reLV)&&(type|=CodepointType.LV),-1!==_char4.search(reLVT)&&(type|=CodepointType.LVT),-1!==_char4.search(reExtPict)&&(type|=CodepointType.ExtPict),type};function intersects(x,y){return!!(x&y)}var NonBoundaryPairs=[[CodepointType.L,CodepointType.L|CodepointType.V|CodepointType.LV|CodepointType.LVT],[CodepointType.LV|CodepointType.V,CodepointType.V|CodepointType.T],[CodepointType.LVT|CodepointType.T,CodepointType.T],[CodepointType.Any,CodepointType.Extend|CodepointType.ZWJ],[CodepointType.Any,CodepointType.SpacingMark],[CodepointType.Prepend,CodepointType.Any],[CodepointType.ZWJ,CodepointType.ExtPict],[CodepointType.RI,CodepointType.RI]];function isBoundaryPair(left,right){return-1===NonBoundaryPairs.findIndex((function(r){return intersects(left,r[0])&&intersects(right,r[1])}))}var endingEmojiZWJ=/(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/,endsWithEmojiZWJ=function endsWithEmojiZWJ(str){return-1!==str.search(endingEmojiZWJ)},endingRIs=/(?:\uD83C[\uDDE6-\uDDFF])+$/g,endsWithOddNumberOfRIs=function endsWithOddNumberOfRIs(str){var match=str.match(endingRIs);return null!==match&&match[0].length/2%2==1},isElement=function isElement(value){return(0,_isPlainObject.isPlainObject)(value)&&Node.isNodeList(value.children)&&!Editor.isEditor(value)},Element=exports.Element={isAncestor:function isAncestor(value){return(0,_isPlainObject.isPlainObject)(value)&&Node.isNodeList(value.children)},isElement,isElementList:function isElementList(value){return Array.isArray(value)&&value.every((function(val){return Element.isElement(val)}))},isElementProps:function isElementProps(props){return void 0!==props.children},isElementType:function isElementType(value,elementVal){var elementKey=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"type";return isElement(value)&&value[elementKey]===elementVal},matches:function matches(element,props){for(var key in props)if("children"!==key&&element[key]!==props[key])return!1;return!0}},_excluded$4=["text"],_excluded2$3=["text"];function ownKeys$8(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$8(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$8(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$8(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var IS_EDITOR_CACHE=new WeakMap,Editor=exports.Editor={above:function above(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_options$voids=options.voids,voids=void 0!==_options$voids&&_options$voids,_options$mode=options.mode,mode=void 0===_options$mode?"lowest":_options$mode,_options$at=options.at,at=void 0===_options$at?editor.selection:_options$at,match=options.match;if(at){var _step9,path=Editor.path(editor,at),reverse="lowest"===mode,_iterator9=_createForOfIteratorHelper(Editor.levels(editor,{at:path,voids,match,reverse}));try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var _step9$value=_slicedToArray(_step9.value,2),n=_step9$value[0],p=_step9$value[1];if(!Text.isText(n)&&!Path.equals(path,p))return[n,p]}}catch(err){_iterator9.e(err)}finally{_iterator9.f()}}},addMark:function addMark(editor,key,value){editor.addMark(key,value)},after:function after(editor,at){var target,_step10,options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},range={anchor:Editor.point(editor,at,{edge:"end"}),focus:Editor.end(editor,[])},_options$distance=options.distance,distance=void 0===_options$distance?1:_options$distance,d=0,_iterator10=_createForOfIteratorHelper(Editor.positions(editor,_objectSpread$8(_objectSpread$8({},options),{},{at:range})));try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var p=_step10.value;if(d>distance)break;0!==d&&(target=p),d++}}catch(err){_iterator10.e(err)}finally{_iterator10.f()}return target},before:function before(editor,at){var target,_step11,options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},range={anchor:Editor.start(editor,[]),focus:Editor.point(editor,at,{edge:"start"})},_options$distance2=options.distance,distance=void 0===_options$distance2?1:_options$distance2,d=0,_iterator11=_createForOfIteratorHelper(Editor.positions(editor,_objectSpread$8(_objectSpread$8({},options),{},{at:range,reverse:!0})));try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var p=_step11.value;if(d>distance)break;0!==d&&(target=p),d++}}catch(err){_iterator11.e(err)}finally{_iterator11.f()}return target},deleteBackward:function deleteBackward(editor){var _options$unit=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).unit,unit=void 0===_options$unit?"character":_options$unit;editor.deleteBackward(unit)},deleteForward:function deleteForward(editor){var _options$unit2=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).unit,unit=void 0===_options$unit2?"character":_options$unit2;editor.deleteForward(unit)},deleteFragment:function deleteFragment(editor){var _options$direction=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).direction,direction=void 0===_options$direction?"forward":_options$direction;editor.deleteFragment(direction)},edges:function edges(editor,at){return[Editor.start(editor,at),Editor.end(editor,at)]},end:function end(editor,at){return Editor.point(editor,at,{edge:"end"})},first:function first(editor,at){var path=Editor.path(editor,at,{edge:"start"});return Editor.node(editor,path)},fragment:function fragment(editor,at){var range=Editor.range(editor,at),fragment=Node.fragment(editor,range);return fragment},hasBlocks:function hasBlocks(editor,element){return element.children.some((function(n){return Editor.isBlock(editor,n)}))},hasInlines:function hasInlines(editor,element){return element.children.some((function(n){return Text.isText(n)||Editor.isInline(editor,n)}))},hasTexts:function hasTexts(editor,element){return element.children.every((function(n){return Text.isText(n)}))},insertBreak:function insertBreak(editor){editor.insertBreak()},insertSoftBreak:function insertSoftBreak(editor){editor.insertSoftBreak()},insertFragment:function insertFragment(editor,fragment){editor.insertFragment(fragment)},insertNode:function insertNode(editor,node){editor.insertNode(node)},insertText:function insertText(editor,text){editor.insertText(text)},isBlock:function isBlock(editor,value){return Element.isElement(value)&&!editor.isInline(value)},isEditor:function isEditor(value){if(!(0,_isPlainObject.isPlainObject)(value))return!1;var cachedIsEditor=IS_EDITOR_CACHE.get(value);if(void 0!==cachedIsEditor)return cachedIsEditor;var isEditor="function"==typeof value.addMark&&"function"==typeof value.apply&&"function"==typeof value.deleteBackward&&"function"==typeof value.deleteForward&&"function"==typeof value.deleteFragment&&"function"==typeof value.insertBreak&&"function"==typeof value.insertSoftBreak&&"function"==typeof value.insertFragment&&"function"==typeof value.insertNode&&"function"==typeof value.insertText&&"function"==typeof value.isInline&&"function"==typeof value.isVoid&&"function"==typeof value.normalizeNode&&"function"==typeof value.onChange&&"function"==typeof value.removeMark&&(null===value.marks||(0,_isPlainObject.isPlainObject)(value.marks))&&(null===value.selection||Range.isRange(value.selection))&&Node.isNodeList(value.children)&&Operation.isOperationList(value.operations);return IS_EDITOR_CACHE.set(value,isEditor),isEditor},isEnd:function isEnd(editor,point,at){var end=Editor.end(editor,at);return Point.equals(point,end)},isEdge:function isEdge(editor,point,at){return Editor.isStart(editor,point,at)||Editor.isEnd(editor,point,at)},isEmpty:function isEmpty(editor,element){var children=element.children,first=_slicedToArray(children,1)[0];return 0===children.length||1===children.length&&Text.isText(first)&&""===first.text&&!editor.isVoid(element)},isInline:function isInline(editor,value){return Element.isElement(value)&&editor.isInline(value)},isNormalizing:function isNormalizing(editor){var isNormalizing=NORMALIZING.get(editor);return void 0===isNormalizing||isNormalizing},isStart:function isStart(editor,point,at){if(0!==point.offset)return!1;var start=Editor.start(editor,at);return Point.equals(point,start)},isVoid:function isVoid(editor,value){return Element.isElement(value)&&editor.isVoid(value)},last:function last(editor,at){var path=Editor.path(editor,at,{edge:"end"});return Editor.node(editor,path)},leaf:function leaf(editor,at){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},path=Editor.path(editor,at,options);return[Node.leaf(editor,path),path]},levels:function levels(editor){var _arguments=arguments;return _regeneratorRuntime().mark((function _callee(){var options,_options$at2,at,_options$reverse,reverse,_options$voids2,voids,match,levels,path,_iterator12,_step12,_step12$value,n,p;return _regeneratorRuntime().wrap((function _callee$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(_options$at2=(options=_arguments.length>1&&void 0!==_arguments[1]?_arguments[1]:{}).at,at=void 0===_options$at2?editor.selection:_options$at2,_options$reverse=options.reverse,reverse=void 0!==_options$reverse&&_options$reverse,_options$voids2=options.voids,voids=void 0!==_options$voids2&&_options$voids2,null==(match=options.match)&&(match=function match(){return!0}),at){_context2.next=6;break}return _context2.abrupt("return");case 6:levels=[],path=Editor.path(editor,at),_iterator12=_createForOfIteratorHelper(Node.levels(editor,path)),_context2.prev=9,_iterator12.s();case 11:if((_step12=_iterator12.n()).done){_context2.next=20;break}if(_step12$value=_slicedToArray(_step12.value,2),n=_step12$value[0],p=_step12$value[1],match(n,p)){_context2.next=15;break}return _context2.abrupt("continue",18);case 15:if(levels.push([n,p]),voids||!Editor.isVoid(editor,n)){_context2.next=18;break}return _context2.abrupt("break",20);case 18:_context2.next=11;break;case 20:_context2.next=25;break;case 22:_context2.prev=22,_context2.t0=_context2.catch(9),_iterator12.e(_context2.t0);case 25:return _context2.prev=25,_iterator12.f(),_context2.finish(25);case 28:return reverse&&levels.reverse(),_context2.delegateYield(levels,"t1",30);case 30:case"end":return _context2.stop()}}),_callee,null,[[9,22,25,28]])}))()},marks:function marks(editor){var marks=editor.marks,selection=editor.selection;if(!selection)return null;if(marks)return marks;if(Range.isExpanded(selection)){var match=_slicedToArray(Editor.nodes(editor,{match:Text.isText}),1)[0];return match?_objectWithoutProperties(_slicedToArray(match,1)[0],_excluded$4):{}}var anchor=selection.anchor,path=anchor.path,node=_slicedToArray(Editor.leaf(editor,path),1)[0];if(0===anchor.offset){var prev=Editor.previous(editor,{at:path,match:Text.isText}),block=Editor.above(editor,{match:function match(n){return Editor.isBlock(editor,n)}});if(prev&&block){var _prev2=_slicedToArray(prev,2),prevNode=_prev2[0],prevPath=_prev2[1],blockPath=_slicedToArray(block,2)[1];Path.isAncestor(blockPath,prevPath)&&(node=prevNode)}}return _objectWithoutProperties(node,_excluded2$3)},next:function next(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_options$mode2=options.mode,mode=void 0===_options$mode2?"lowest":_options$mode2,_options$voids3=options.voids,voids=void 0!==_options$voids3&&_options$voids3,match=options.match,_options$at3=options.at,at=void 0===_options$at3?editor.selection:_options$at3;if(at){var pointAfterLocation=Editor.after(editor,at,{voids});if(pointAfterLocation){var to=_slicedToArray(Editor.last(editor,[]),2)[1],span=[pointAfterLocation.path,to];if(Path.isPath(at)&&0===at.length)throw new Error("Cannot get the next node from the root node!");if(null==match)if(Path.isPath(at)){var parent=_slicedToArray(Editor.parent(editor,at),1)[0];match=function match(n){return parent.children.includes(n)}}else match=function match(){return!0};var next=_slicedToArray(Editor.nodes(editor,{at:span,match,mode,voids}),1)[0];return next}}},node:function node(editor,at){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},path=Editor.path(editor,at,options),node=Node.get(editor,path);return[node,path]},nodes:function nodes(editor){var _arguments2=arguments;return _regeneratorRuntime().mark((function _callee2(){var options,_options$at4,at,_options$mode3,mode,_options$universal,universal,_options$reverse2,reverse,_options$voids4,voids,match,from,to,first,last,nodeEntries,matches,hit,_iterator13,_step13,_step13$value,node,path,isLower,emit;return _regeneratorRuntime().wrap((function _callee2$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:if(_options$at4=(options=_arguments2.length>1&&void 0!==_arguments2[1]?_arguments2[1]:{}).at,at=void 0===_options$at4?editor.selection:_options$at4,_options$mode3=options.mode,mode=void 0===_options$mode3?"all":_options$mode3,_options$universal=options.universal,universal=void 0!==_options$universal&&_options$universal,_options$reverse2=options.reverse,reverse=void 0!==_options$reverse2&&_options$reverse2,_options$voids4=options.voids,voids=void 0!==_options$voids4&&_options$voids4,(match=options.match)||(match=function match(){return!0}),at){_context3.next=6;break}return _context3.abrupt("return");case 6:Span.isSpan(at)?(from=at[0],to=at[1]):(first=Editor.path(editor,at,{edge:"start"}),last=Editor.path(editor,at,{edge:"end"}),from=reverse?last:first,to=reverse?first:last),nodeEntries=Node.nodes(editor,{reverse,from,to,pass:function pass(_ref){var n=_slicedToArray(_ref,1)[0];return!voids&&Editor.isVoid(editor,n)}}),matches=[],_iterator13=_createForOfIteratorHelper(nodeEntries),_context3.prev=10,_iterator13.s();case 12:if((_step13=_iterator13.n()).done){_context3.next=37;break}if(_step13$value=_slicedToArray(_step13.value,2),node=_step13$value[0],path=_step13$value[1],isLower=hit&&0===Path.compare(path,hit[1]),"highest"!==mode||!isLower){_context3.next=17;break}return _context3.abrupt("continue",35);case 17:if(match(node,path)){_context3.next=23;break}if(!universal||isLower||!Text.isText(node)){_context3.next=22;break}return _context3.abrupt("return");case 22:return _context3.abrupt("continue",35);case 23:if("lowest"!==mode||!isLower){_context3.next=26;break}return hit=[node,path],_context3.abrupt("continue",35);case 26:if(!(emit="lowest"===mode?hit:[node,path])){_context3.next=34;break}if(!universal){_context3.next=32;break}matches.push(emit),_context3.next=34;break;case 32:return _context3.next=34,emit;case 34:hit=[node,path];case 35:_context3.next=12;break;case 37:_context3.next=42;break;case 39:_context3.prev=39,_context3.t0=_context3.catch(10),_iterator13.e(_context3.t0);case 42:return _context3.prev=42,_iterator13.f(),_context3.finish(42);case 45:if("lowest"!==mode||!hit){_context3.next=52;break}if(!universal){_context3.next=50;break}matches.push(hit),_context3.next=52;break;case 50:return _context3.next=52,hit;case 52:if(!universal){_context3.next=54;break}return _context3.delegateYield(matches,"t1",54);case 54:case"end":return _context3.stop()}}),_callee2,null,[[10,39,42,45]])}))()},normalize:function normalize(editor){var _options$force=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).force,force=void 0!==_options$force&&_options$force,getDirtyPaths=function getDirtyPaths(editor){return DIRTY_PATHS.get(editor)||[]},popDirtyPath=function popDirtyPath(editor){var path=getDirtyPaths(editor).pop(),key=path.join(",");return function getDirtyPathKeys(editor){return DIRTY_PATH_KEYS.get(editor)||new Set}(editor).delete(key),path};if(Editor.isNormalizing(editor)){if(force){var allPaths=Array.from(Node.nodes(editor),(function(_ref2){return _slicedToArray(_ref2,2)[1]})),allPathKeys=new Set(allPaths.map((function(p){return p.join(",")})));DIRTY_PATHS.set(editor,allPaths),DIRTY_PATH_KEYS.set(editor,allPathKeys)}0!==getDirtyPaths(editor).length&&Editor.withoutNormalizing(editor,(function(){var _step14,_iterator14=_createForOfIteratorHelper(getDirtyPaths(editor));try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var dirtyPath=_step14.value;if(Node.has(editor,dirtyPath)){var entry=Editor.node(editor,dirtyPath),_entry4=_slicedToArray(entry,2),node=_entry4[0];_entry4[1];Element.isElement(node)&&0===node.children.length&&editor.normalizeNode(entry)}}}catch(err){_iterator14.e(err)}finally{_iterator14.f()}for(var max=42*getDirtyPaths(editor).length,m=0;0!==getDirtyPaths(editor).length;){if(m>max)throw new Error("\n            Could not completely normalize the editor after ".concat(max," iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));var _dirtyPath=popDirtyPath(editor);if(Node.has(editor,_dirtyPath)){var _entry=Editor.node(editor,_dirtyPath);editor.normalizeNode(_entry)}m++}}))}},parent:function parent(editor,at){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},path=Editor.path(editor,at,options),parentPath=Path.parent(path);return Editor.node(editor,parentPath)},path:function path(editor,at){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},depth=options.depth,edge=options.edge;if(Path.isPath(at))if("start"===edge)at=_slicedToArray(Node.first(editor,at),2)[1];else if("end"===edge){at=_slicedToArray(Node.last(editor,at),2)[1]}return Range.isRange(at)&&(at="start"===edge?Range.start(at):"end"===edge?Range.end(at):Path.common(at.anchor.path,at.focus.path)),Point.isPoint(at)&&(at=at.path),null!=depth&&(at=at.slice(0,depth)),at},hasPath:function hasPath(editor,path){return Node.has(editor,path)},pathRef:function pathRef(editor,path){var _options$affinity=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).affinity,ref={current:path,affinity:void 0===_options$affinity?"forward":_options$affinity,unref:function unref(){var current=ref.current;return Editor.pathRefs(editor).delete(ref),ref.current=null,current}};return Editor.pathRefs(editor).add(ref),ref},pathRefs:function pathRefs(editor){var refs=PATH_REFS.get(editor);return refs||(refs=new Set,PATH_REFS.set(editor,refs)),refs},point:function point(editor,at){var _options$edge=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).edge,edge=void 0===_options$edge?"start":_options$edge;if(Path.isPath(at)){var path;if("end"===edge)path=_slicedToArray(Node.last(editor,at),2)[1];else path=_slicedToArray(Node.first(editor,at),2)[1];var node=Node.get(editor,path);if(!Text.isText(node))throw new Error("Cannot get the ".concat(edge," point in the node at path [").concat(at,"] because it has no ").concat(edge," text node."));return{path,offset:"end"===edge?node.text.length:0}}if(Range.isRange(at)){var _Range$edges2=_slicedToArray(Range.edges(at),2),start=_Range$edges2[0],end=_Range$edges2[1];return"start"===edge?start:end}return at},pointRef:function pointRef(editor,point){var _options$affinity2=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).affinity,ref={current:point,affinity:void 0===_options$affinity2?"forward":_options$affinity2,unref:function unref(){var current=ref.current;return Editor.pointRefs(editor).delete(ref),ref.current=null,current}};return Editor.pointRefs(editor).add(ref),ref},pointRefs:function pointRefs(editor){var refs=POINT_REFS.get(editor);return refs||(refs=new Set,POINT_REFS.set(editor,refs)),refs},positions:function positions(editor){var _arguments3=arguments;return _regeneratorRuntime().mark((function _callee3(){var options,_options$at5,at,_options$unit3,unit,_options$reverse3,reverse,_options$voids5,voids,range,_Range$edges3,_Range$edges4,start,end,first,isNewBlock,blockText,distance,leafTextRemaining,leafTextOffset,_iterator15,_step15,_step15$value,node,path,e,s,isFirst,calcDistance;return _regeneratorRuntime().wrap((function _callee3$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:if(calcDistance=function _calcDistance(text,unit,reverse){return"character"===unit?getCharacterDistance(text,reverse):"word"===unit?getWordDistance(text,reverse):"line"===unit||"block"===unit?text.length:1},_options$at5=(options=_arguments3.length>1&&void 0!==_arguments3[1]?_arguments3[1]:{}).at,at=void 0===_options$at5?editor.selection:_options$at5,_options$unit3=options.unit,unit=void 0===_options$unit3?"offset":_options$unit3,_options$reverse3=options.reverse,reverse=void 0!==_options$reverse3&&_options$reverse3,_options$voids5=options.voids,voids=void 0!==_options$voids5&&_options$voids5,at){_context4.next=5;break}return _context4.abrupt("return");case 5:range=Editor.range(editor,at),_Range$edges3=Range.edges(range),_Range$edges4=_slicedToArray(_Range$edges3,2),start=_Range$edges4[0],end=_Range$edges4[1],first=reverse?end:start,isNewBlock=!1,blockText="",distance=0,leafTextRemaining=0,leafTextOffset=0,_iterator15=_createForOfIteratorHelper(Editor.nodes(editor,{at,reverse,voids})),_context4.prev=14,_iterator15.s();case 16:if((_step15=_iterator15.n()).done){_context4.next=51;break}if(_step15$value=_slicedToArray(_step15.value,2),node=_step15$value[0],path=_step15$value[1],!Element.isElement(node)){_context4.next=26;break}if(voids||!editor.isVoid(node)){_context4.next=23;break}return _context4.next=22,Editor.start(editor,path);case 22:return _context4.abrupt("continue",49);case 23:if(!editor.isInline(node)){_context4.next=25;break}return _context4.abrupt("continue",49);case 25:Editor.hasInlines(editor,node)&&(e=Path.isAncestor(path,end.path)?end:Editor.end(editor,path),s=Path.isAncestor(path,start.path)?start:Editor.start(editor,path),blockText=Editor.string(editor,{anchor:s,focus:e},{voids}),isNewBlock=!0);case 26:if(!Text.isText(node)){_context4.next=49;break}if((isFirst=Path.equals(path,first.path))?(leafTextRemaining=reverse?first.offset:node.text.length-first.offset,leafTextOffset=first.offset):(leafTextRemaining=node.text.length,leafTextOffset=reverse?leafTextRemaining:0),!isFirst&&!isNewBlock&&"offset"!==unit){_context4.next=33;break}return _context4.next=32,{path,offset:leafTextOffset};case 32:isNewBlock=!1;case 33:if(0!==distance){_context4.next=39;break}if(""!==blockText){_context4.next=37;break}return _context4.abrupt("break",49);case 37:distance=calcDistance(blockText,unit,reverse),blockText=splitByCharacterDistance(blockText,distance,reverse)[1];case 39:if(leafTextOffset=reverse?leafTextOffset-distance:leafTextOffset+distance,!((leafTextRemaining-=distance)<0)){_context4.next=44;break}return distance=-leafTextRemaining,_context4.abrupt("break",49);case 44:return distance=0,_context4.next=47,{path,offset:leafTextOffset};case 47:_context4.next=33;break;case 49:_context4.next=16;break;case 51:_context4.next=56;break;case 53:_context4.prev=53,_context4.t0=_context4.catch(14),_iterator15.e(_context4.t0);case 56:return _context4.prev=56,_iterator15.f(),_context4.finish(56);case 59:case"end":return _context4.stop()}}),_callee3,null,[[14,53,56,59]])}))()},previous:function previous(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_options$mode4=options.mode,mode=void 0===_options$mode4?"lowest":_options$mode4,_options$voids6=options.voids,voids=void 0!==_options$voids6&&_options$voids6,match=options.match,_options$at6=options.at,at=void 0===_options$at6?editor.selection:_options$at6;if(at){var pointBeforeLocation=Editor.before(editor,at,{voids});if(pointBeforeLocation){var to=_slicedToArray(Editor.first(editor,[]),2)[1],span=[pointBeforeLocation.path,to];if(Path.isPath(at)&&0===at.length)throw new Error("Cannot get the previous node from the root node!");if(null==match)if(Path.isPath(at)){var parent=_slicedToArray(Editor.parent(editor,at),1)[0];match=function match(n){return parent.children.includes(n)}}else match=function match(){return!0};var previous=_slicedToArray(Editor.nodes(editor,{reverse:!0,at:span,match,mode,voids}),1)[0];return previous}}},range:function range(editor,at,to){return Range.isRange(at)&&!to?at:{anchor:Editor.start(editor,at),focus:Editor.end(editor,to||at)}},rangeRef:function rangeRef(editor,range){var _options$affinity3=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).affinity,ref={current:range,affinity:void 0===_options$affinity3?"forward":_options$affinity3,unref:function unref(){var current=ref.current;return Editor.rangeRefs(editor).delete(ref),ref.current=null,current}};return Editor.rangeRefs(editor).add(ref),ref},rangeRefs:function rangeRefs(editor){var refs=RANGE_REFS.get(editor);return refs||(refs=new Set,RANGE_REFS.set(editor,refs)),refs},removeMark:function removeMark(editor,key){editor.removeMark(key)},setNormalizing:function setNormalizing(editor,isNormalizing){NORMALIZING.set(editor,isNormalizing)},start:function start(editor,at){return Editor.point(editor,at,{edge:"start"})},string:function string(editor,at){var _step16,_options$voids7=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).voids,voids=void 0!==_options$voids7&&_options$voids7,range=Editor.range(editor,at),_Range$edges6=_slicedToArray(Range.edges(range),2),start=_Range$edges6[0],end=_Range$edges6[1],text="",_iterator16=_createForOfIteratorHelper(Editor.nodes(editor,{at:range,match:Text.isText,voids}));try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var _step16$value=_slicedToArray(_step16.value,2),node=_step16$value[0],path=_step16$value[1],t=node.text;Path.equals(path,end.path)&&(t=t.slice(0,end.offset)),Path.equals(path,start.path)&&(t=t.slice(start.offset)),text+=t}}catch(err){_iterator16.e(err)}finally{_iterator16.f()}return text},unhangRange:function unhangRange(editor,range){var _options$voids8=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).voids,voids=void 0!==_options$voids8&&_options$voids8,_Range$edges8=_slicedToArray(Range.edges(range),2),start=_Range$edges8[0],end=_Range$edges8[1];if(0!==start.offset||0!==end.offset||Range.isCollapsed(range))return range;var _step17,endBlock=Editor.above(editor,{at:end,match:function match(n){return Editor.isBlock(editor,n)}}),blockPath=endBlock?endBlock[1]:[],before={anchor:Editor.start(editor,start),focus:end},skip=!0,_iterator17=_createForOfIteratorHelper(Editor.nodes(editor,{at:before,match:Text.isText,reverse:!0,voids}));try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var _step17$value=_slicedToArray(_step17.value,2),node=_step17$value[0],path=_step17$value[1];if(skip)skip=!1;else if(""!==node.text||Path.isBefore(path,blockPath)){end={path,offset:node.text.length};break}}}catch(err){_iterator17.e(err)}finally{_iterator17.f()}return{anchor:start,focus:end}},void:function _void(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Editor.above(editor,_objectSpread$8(_objectSpread$8({},options),{},{match:function match(n){return Editor.isVoid(editor,n)}}))},withoutNormalizing:function withoutNormalizing(editor,fn){var value=Editor.isNormalizing(editor);Editor.setNormalizing(editor,!1);try{fn()}finally{Editor.setNormalizing(editor,value)}Editor.normalize(editor)}},Span=(exports.Location={isLocation:function isLocation(value){return Path.isPath(value)||Point.isPoint(value)||Range.isRange(value)}},exports.Span={isSpan:function isSpan(value){return Array.isArray(value)&&2===value.length&&value.every(Path.isPath)}}),_excluded$3=["children"],_excluded2$2=["text"],IS_NODE_LIST_CACHE=new WeakMap,Node=exports.Node={ancestor:function ancestor(root,path){var node=Node.get(root,path);if(Text.isText(node))throw new Error("Cannot get the ancestor node at path [".concat(path,"] because it refers to a text node instead: ").concat(Scrubber.stringify(node)));return node},ancestors:function ancestors(root,path){var _arguments4=arguments;return _regeneratorRuntime().mark((function _callee4(){var options,_iterator18,_step18,p,n,entry;return _regeneratorRuntime().wrap((function _callee4$(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:options=_arguments4.length>2&&void 0!==_arguments4[2]?_arguments4[2]:{},_iterator18=_createForOfIteratorHelper(Path.ancestors(path,options)),_context5.prev=2,_iterator18.s();case 4:if((_step18=_iterator18.n()).done){_context5.next=12;break}return p=_step18.value,n=Node.ancestor(root,p),entry=[n,p],_context5.next=10,entry;case 10:_context5.next=4;break;case 12:_context5.next=17;break;case 14:_context5.prev=14,_context5.t0=_context5.catch(2),_iterator18.e(_context5.t0);case 17:return _context5.prev=17,_iterator18.f(),_context5.finish(17);case 20:case"end":return _context5.stop()}}),_callee4,null,[[2,14,17,20]])}))()},child:function child(root,index){if(Text.isText(root))throw new Error("Cannot get the child of a text node: ".concat(Scrubber.stringify(root)));var c=root.children[index];if(null==c)throw new Error("Cannot get child at index `".concat(index,"` in node: ").concat(Scrubber.stringify(root)));return c},children:function children(root,path){var _arguments5=arguments;return _regeneratorRuntime().mark((function _callee5(){var _options$reverse4,reverse,ancestor,children,index,child,childPath;return _regeneratorRuntime().wrap((function _callee5$(_context6){for(;;)switch(_context6.prev=_context6.next){case 0:_options$reverse4=(_arguments5.length>2&&void 0!==_arguments5[2]?_arguments5[2]:{}).reverse,reverse=void 0!==_options$reverse4&&_options$reverse4,ancestor=Node.ancestor(root,path),children=ancestor.children,index=reverse?children.length-1:0;case 5:if(!(reverse?index>=0:index<children.length)){_context6.next=13;break}return child=Node.child(ancestor,index),childPath=path.concat(index),_context6.next=10,[child,childPath];case 10:index=reverse?index-1:index+1,_context6.next=5;break;case 13:case"end":return _context6.stop()}}),_callee5)}))()},common:function common(root,path,another){var p=Path.common(path,another);return[Node.get(root,p),p]},descendant:function descendant(root,path){var node=Node.get(root,path);if(Editor.isEditor(node))throw new Error("Cannot get the descendant node at path [".concat(path,"] because it refers to the root editor node instead: ").concat(Scrubber.stringify(node)));return node},descendants:function descendants(root){var _arguments6=arguments;return _regeneratorRuntime().mark((function _callee6(){var options,_iterator19,_step19,_step19$value,node,path;return _regeneratorRuntime().wrap((function _callee6$(_context7){for(;;)switch(_context7.prev=_context7.next){case 0:options=_arguments6.length>1&&void 0!==_arguments6[1]?_arguments6[1]:{},_iterator19=_createForOfIteratorHelper(Node.nodes(root,options)),_context7.prev=2,_iterator19.s();case 4:if((_step19=_iterator19.n()).done){_context7.next=11;break}if(_step19$value=_slicedToArray(_step19.value,2),node=_step19$value[0],0===(path=_step19$value[1]).length){_context7.next=9;break}return _context7.next=9,[node,path];case 9:_context7.next=4;break;case 11:_context7.next=16;break;case 13:_context7.prev=13,_context7.t0=_context7.catch(2),_iterator19.e(_context7.t0);case 16:return _context7.prev=16,_iterator19.f(),_context7.finish(16);case 19:case"end":return _context7.stop()}}),_callee6,null,[[2,13,16,19]])}))()},elements:function elements(root){var _arguments7=arguments;return _regeneratorRuntime().mark((function _callee7(){var options,_iterator20,_step20,_step20$value,node,path;return _regeneratorRuntime().wrap((function _callee7$(_context8){for(;;)switch(_context8.prev=_context8.next){case 0:options=_arguments7.length>1&&void 0!==_arguments7[1]?_arguments7[1]:{},_iterator20=_createForOfIteratorHelper(Node.nodes(root,options)),_context8.prev=2,_iterator20.s();case 4:if((_step20=_iterator20.n()).done){_context8.next=11;break}if(_step20$value=_slicedToArray(_step20.value,2),node=_step20$value[0],path=_step20$value[1],!Element.isElement(node)){_context8.next=9;break}return _context8.next=9,[node,path];case 9:_context8.next=4;break;case 11:_context8.next=16;break;case 13:_context8.prev=13,_context8.t0=_context8.catch(2),_iterator20.e(_context8.t0);case 16:return _context8.prev=16,_iterator20.f(),_context8.finish(16);case 19:case"end":return _context8.stop()}}),_callee7,null,[[2,13,16,19]])}))()},extractProps:function extractProps(node){return Element.isAncestor(node)?_objectWithoutProperties(node,_excluded$3):_objectWithoutProperties(node,_excluded2$2)},first:function first(root,path){for(var p=path.slice(),n=Node.get(root,p);n&&!Text.isText(n)&&0!==n.children.length;)n=n.children[0],p.push(0);return[n,p]},fragment:function fragment(root,range){if(Text.isText(root))throw new Error("Cannot get a fragment starting from a root text node: ".concat(Scrubber.stringify(root)));return(0,_immer.produce)({children:root.children},(function(r){var _step21,_Range$edges10=_slicedToArray(Range.edges(range),2),start=_Range$edges10[0],end=_Range$edges10[1],nodeEntries=Node.nodes(r,{reverse:!0,pass:function pass(_ref){var path=_slicedToArray(_ref,2)[1];return!Range.includes(range,path)}}),_iterator21=_createForOfIteratorHelper(nodeEntries);try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var path=_slicedToArray(_step21.value,2)[1];if(!Range.includes(range,path)){var parent=Node.parent(r,path),index=path[path.length-1];parent.children.splice(index,1)}if(Path.equals(path,end.path)){var leaf=Node.leaf(r,path);leaf.text=leaf.text.slice(0,end.offset)}if(Path.equals(path,start.path)){var _leaf=Node.leaf(r,path);_leaf.text=_leaf.text.slice(start.offset)}}}catch(err){_iterator21.e(err)}finally{_iterator21.f()}Editor.isEditor(r)&&(r.selection=null)})).children},get:function get(root,path){for(var node=root,i=0;i<path.length;i++){var p=path[i];if(Text.isText(node)||!node.children[p])throw new Error("Cannot find a descendant at path [".concat(path,"] in node: ").concat(Scrubber.stringify(root)));node=node.children[p]}return node},has:function has(root,path){for(var node=root,i=0;i<path.length;i++){var p=path[i];if(Text.isText(node)||!node.children[p])return!1;node=node.children[p]}return!0},isNode:function isNode(value){return Text.isText(value)||Element.isElement(value)||Editor.isEditor(value)},isNodeList:function isNodeList(value){if(!Array.isArray(value))return!1;var cachedResult=IS_NODE_LIST_CACHE.get(value);if(void 0!==cachedResult)return cachedResult;var isNodeList=value.every((function(val){return Node.isNode(val)}));return IS_NODE_LIST_CACHE.set(value,isNodeList),isNodeList},last:function last(root,path){for(var p=path.slice(),n=Node.get(root,p);n&&!Text.isText(n)&&0!==n.children.length;){var i=n.children.length-1;n=n.children[i],p.push(i)}return[n,p]},leaf:function leaf(root,path){var node=Node.get(root,path);if(!Text.isText(node))throw new Error("Cannot get the leaf node at path [".concat(path,"] because it refers to a non-leaf node: ").concat(Scrubber.stringify(node)));return node},levels:function levels(root,path){var _arguments8=arguments;return _regeneratorRuntime().mark((function _callee8(){var options,_iterator22,_step22,p,n;return _regeneratorRuntime().wrap((function _callee8$(_context9){for(;;)switch(_context9.prev=_context9.next){case 0:options=_arguments8.length>2&&void 0!==_arguments8[2]?_arguments8[2]:{},_iterator22=_createForOfIteratorHelper(Path.levels(path,options)),_context9.prev=2,_iterator22.s();case 4:if((_step22=_iterator22.n()).done){_context9.next=11;break}return p=_step22.value,n=Node.get(root,p),_context9.next=9,[n,p];case 9:_context9.next=4;break;case 11:_context9.next=16;break;case 13:_context9.prev=13,_context9.t0=_context9.catch(2),_iterator22.e(_context9.t0);case 16:return _context9.prev=16,_iterator22.f(),_context9.finish(16);case 19:case"end":return _context9.stop()}}),_callee8,null,[[2,13,16,19]])}))()},matches:function matches(node,props){return Element.isElement(node)&&Element.isElementProps(props)&&Element.matches(node,props)||Text.isText(node)&&Text.isTextProps(props)&&Text.matches(node,props)},nodes:function nodes(root){var _arguments9=arguments;return _regeneratorRuntime().mark((function _callee9(){var options,pass,_options$reverse5,reverse,_options$from,from,to,visited,p,n,nextIndex,newPath,_newPath;return _regeneratorRuntime().wrap((function _callee9$(_context10){for(;;)switch(_context10.prev=_context10.next){case 0:pass=(options=_arguments9.length>1&&void 0!==_arguments9[1]?_arguments9[1]:{}).pass,_options$reverse5=options.reverse,reverse=void 0!==_options$reverse5&&_options$reverse5,_options$from=options.from,from=void 0===_options$from?[]:_options$from,to=options.to,visited=new Set,p=[],n=root;case 6:if(!to||!(reverse?Path.isBefore(p,to):Path.isAfter(p,to))){_context10.next=9;break}return _context10.abrupt("break",37);case 9:if(visited.has(n)){_context10.next=12;break}return _context10.next=12,[n,p];case 12:if(visited.has(n)||Text.isText(n)||0===n.children.length||null!=pass&&!1!==pass([n,p])){_context10.next=19;break}return visited.add(n),nextIndex=reverse?n.children.length-1:0,Path.isAncestor(p,from)&&(nextIndex=from[p.length]),p=p.concat(nextIndex),n=Node.get(root,p),_context10.abrupt("continue",6);case 19:if(0!==p.length){_context10.next=21;break}return _context10.abrupt("break",37);case 21:if(reverse){_context10.next=27;break}if(newPath=Path.next(p),!Node.has(root,newPath)){_context10.next=27;break}return p=newPath,n=Node.get(root,p),_context10.abrupt("continue",6);case 27:if(!reverse||0===p[p.length-1]){_context10.next=32;break}return _newPath=Path.previous(p),p=_newPath,n=Node.get(root,p),_context10.abrupt("continue",6);case 32:p=Path.parent(p),n=Node.get(root,p),visited.add(n),_context10.next=6;break;case 37:case"end":return _context10.stop()}}),_callee9)}))()},parent:function parent(root,path){var parentPath=Path.parent(path),p=Node.get(root,parentPath);if(Text.isText(p))throw new Error("Cannot get the parent of path [".concat(path,"] because it does not exist in the root."));return p},string:function string(node){return Text.isText(node)?node.text:node.children.map(Node.string).join("")},texts:function texts(root){var _arguments10=arguments;return _regeneratorRuntime().mark((function _callee10(){var options,_iterator23,_step23,_step23$value,node,path;return _regeneratorRuntime().wrap((function _callee10$(_context11){for(;;)switch(_context11.prev=_context11.next){case 0:options=_arguments10.length>1&&void 0!==_arguments10[1]?_arguments10[1]:{},_iterator23=_createForOfIteratorHelper(Node.nodes(root,options)),_context11.prev=2,_iterator23.s();case 4:if((_step23=_iterator23.n()).done){_context11.next=11;break}if(_step23$value=_slicedToArray(_step23.value,2),node=_step23$value[0],path=_step23$value[1],!Text.isText(node)){_context11.next=9;break}return _context11.next=9,[node,path];case 9:_context11.next=4;break;case 11:_context11.next=16;break;case 13:_context11.prev=13,_context11.t0=_context11.catch(2),_iterator23.e(_context11.t0);case 16:return _context11.prev=16,_iterator23.f(),_context11.finish(16);case 19:case"end":return _context11.stop()}}),_callee10,null,[[2,13,16,19]])}))()}};function ownKeys$7(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$7(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$7(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$7(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var Operation=exports.Operation={isNodeOperation:function isNodeOperation(value){return Operation.isOperation(value)&&value.type.endsWith("_node")},isOperation:function isOperation(value){if(!(0,_isPlainObject.isPlainObject)(value))return!1;switch(value.type){case"insert_node":case"remove_node":return Path.isPath(value.path)&&Node.isNode(value.node);case"insert_text":case"remove_text":return"number"==typeof value.offset&&"string"==typeof value.text&&Path.isPath(value.path);case"merge_node":return"number"==typeof value.position&&Path.isPath(value.path)&&(0,_isPlainObject.isPlainObject)(value.properties);case"move_node":return Path.isPath(value.path)&&Path.isPath(value.newPath);case"set_node":return Path.isPath(value.path)&&(0,_isPlainObject.isPlainObject)(value.properties)&&(0,_isPlainObject.isPlainObject)(value.newProperties);case"set_selection":return null===value.properties&&Range.isRange(value.newProperties)||null===value.newProperties&&Range.isRange(value.properties)||(0,_isPlainObject.isPlainObject)(value.properties)&&(0,_isPlainObject.isPlainObject)(value.newProperties);case"split_node":return Path.isPath(value.path)&&"number"==typeof value.position&&(0,_isPlainObject.isPlainObject)(value.properties);default:return!1}},isOperationList:function isOperationList(value){return Array.isArray(value)&&value.every((function(val){return Operation.isOperation(val)}))},isSelectionOperation:function isSelectionOperation(value){return Operation.isOperation(value)&&value.type.endsWith("_selection")},isTextOperation:function isTextOperation(value){return Operation.isOperation(value)&&value.type.endsWith("_text")},inverse:function inverse(op){switch(op.type){case"insert_node":return _objectSpread$7(_objectSpread$7({},op),{},{type:"remove_node"});case"insert_text":return _objectSpread$7(_objectSpread$7({},op),{},{type:"remove_text"});case"merge_node":return _objectSpread$7(_objectSpread$7({},op),{},{type:"split_node",path:Path.previous(op.path)});case"move_node":var newPath=op.newPath,path=op.path;if(Path.equals(newPath,path))return op;if(Path.isSibling(path,newPath))return _objectSpread$7(_objectSpread$7({},op),{},{path:newPath,newPath:path});var inversePath=Path.transform(path,op),inverseNewPath=Path.transform(Path.next(path),op);return _objectSpread$7(_objectSpread$7({},op),{},{path:inversePath,newPath:inverseNewPath});case"remove_node":return _objectSpread$7(_objectSpread$7({},op),{},{type:"insert_node"});case"remove_text":return _objectSpread$7(_objectSpread$7({},op),{},{type:"insert_text"});case"set_node":var properties=op.properties,newProperties=op.newProperties;return _objectSpread$7(_objectSpread$7({},op),{},{properties:newProperties,newProperties:properties});case"set_selection":var _properties=op.properties,_newProperties=op.newProperties;return _objectSpread$7(_objectSpread$7({},op),{},null==_properties?{properties:_newProperties,newProperties:null}:null==_newProperties?{properties:null,newProperties:_properties}:{properties:_newProperties,newProperties:_properties});case"split_node":return _objectSpread$7(_objectSpread$7({},op),{},{type:"merge_node",path:Path.next(op.path)})}}},Path=exports.Path={ancestors:function ancestors(path){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_options$reverse6=options.reverse,reverse=void 0!==_options$reverse6&&_options$reverse6,paths=Path.levels(path,options);return paths=reverse?paths.slice(1):paths.slice(0,-1)},common:function common(path,another){for(var common=[],i=0;i<path.length&&i<another.length;i++){var av=path[i];if(av!==another[i])break;common.push(av)}return common},compare:function compare(path,another){for(var min=Math.min(path.length,another.length),i=0;i<min;i++){if(path[i]<another[i])return-1;if(path[i]>another[i])return 1}return 0},endsAfter:function endsAfter(path,another){var i=path.length-1,as=path.slice(0,i),bs=another.slice(0,i),av=path[i],bv=another[i];return Path.equals(as,bs)&&av>bv},endsAt:function endsAt(path,another){var i=path.length,as=path.slice(0,i),bs=another.slice(0,i);return Path.equals(as,bs)},endsBefore:function endsBefore(path,another){var i=path.length-1,as=path.slice(0,i),bs=another.slice(0,i),av=path[i],bv=another[i];return Path.equals(as,bs)&&av<bv},equals:function equals(path,another){return path.length===another.length&&path.every((function(n,i){return n===another[i]}))},hasPrevious:function hasPrevious(path){return path[path.length-1]>0},isAfter:function isAfter(path,another){return 1===Path.compare(path,another)},isAncestor:function isAncestor(path,another){return path.length<another.length&&0===Path.compare(path,another)},isBefore:function isBefore(path,another){return-1===Path.compare(path,another)},isChild:function isChild(path,another){return path.length===another.length+1&&0===Path.compare(path,another)},isCommon:function isCommon(path,another){return path.length<=another.length&&0===Path.compare(path,another)},isDescendant:function isDescendant(path,another){return path.length>another.length&&0===Path.compare(path,another)},isParent:function isParent(path,another){return path.length+1===another.length&&0===Path.compare(path,another)},isPath:function isPath(value){return Array.isArray(value)&&(0===value.length||"number"==typeof value[0])},isSibling:function isSibling(path,another){if(path.length!==another.length)return!1;var as=path.slice(0,-1),bs=another.slice(0,-1);return path[path.length-1]!==another[another.length-1]&&Path.equals(as,bs)},levels:function levels(path){for(var _options$reverse7=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).reverse,reverse=void 0!==_options$reverse7&&_options$reverse7,list=[],i=0;i<=path.length;i++)list.push(path.slice(0,i));return reverse&&list.reverse(),list},next:function next(path){if(0===path.length)throw new Error("Cannot get the next path of a root path [".concat(path,"], because it has no next index."));var last=path[path.length-1];return path.slice(0,-1).concat(last+1)},operationCanTransformPath:function operationCanTransformPath(operation){switch(operation.type){case"insert_node":case"remove_node":case"merge_node":case"split_node":case"move_node":return!0;default:return!1}},parent:function parent(path){if(0===path.length)throw new Error("Cannot get the parent path of the root path [".concat(path,"]."));return path.slice(0,-1)},previous:function previous(path){if(0===path.length)throw new Error("Cannot get the previous path of a root path [".concat(path,"], because it has no previous index."));var last=path[path.length-1];if(last<=0)throw new Error("Cannot get the previous path of a first child path [".concat(path,"] because it would result in a negative index."));return path.slice(0,-1).concat(last-1)},relative:function relative(path,ancestor){if(!Path.isAncestor(ancestor,path)&&!Path.equals(path,ancestor))throw new Error("Cannot get the relative path of [".concat(path,"] inside ancestor [").concat(ancestor,"], because it is not above or equal to the path."));return path.slice(ancestor.length)},transform:function transform(path,operation){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,_immer.produce)(path,(function(p){var _options$affinity4=options.affinity,affinity=void 0===_options$affinity4?"forward":_options$affinity4;if(path&&0!==(null==path?void 0:path.length)){if(null===p)return null;switch(operation.type){case"insert_node":var op=operation.path;(Path.equals(op,p)||Path.endsBefore(op,p)||Path.isAncestor(op,p))&&(p[op.length-1]+=1);break;case"remove_node":var _op=operation.path;if(Path.equals(_op,p)||Path.isAncestor(_op,p))return null;Path.endsBefore(_op,p)&&(p[_op.length-1]-=1);break;case"merge_node":var _op2=operation.path,position=operation.position;Path.equals(_op2,p)||Path.endsBefore(_op2,p)?p[_op2.length-1]-=1:Path.isAncestor(_op2,p)&&(p[_op2.length-1]-=1,p[_op2.length]+=position);break;case"split_node":var _op3=operation.path,_position=operation.position;if(Path.equals(_op3,p)){if("forward"===affinity)p[p.length-1]+=1;else if("backward"!==affinity)return null}else Path.endsBefore(_op3,p)?p[_op3.length-1]+=1:Path.isAncestor(_op3,p)&&path[_op3.length]>=_position&&(p[_op3.length-1]+=1,p[_op3.length]-=_position);break;case"move_node":var _op4=operation.path,onp=operation.newPath;if(Path.equals(_op4,onp))return;if(Path.isAncestor(_op4,p)||Path.equals(_op4,p)){var copy=onp.slice();return Path.endsBefore(_op4,onp)&&_op4.length<onp.length&&(copy[_op4.length-1]-=1),copy.concat(p.slice(_op4.length))}Path.isSibling(_op4,onp)&&(Path.isAncestor(onp,p)||Path.equals(onp,p))?Path.endsBefore(_op4,p)?p[_op4.length-1]-=1:p[_op4.length-1]+=1:Path.endsBefore(onp,p)||Path.equals(onp,p)||Path.isAncestor(onp,p)?(Path.endsBefore(_op4,p)&&(p[_op4.length-1]-=1),p[onp.length-1]+=1):Path.endsBefore(_op4,p)&&(Path.equals(onp,p)&&(p[onp.length-1]+=1),p[_op4.length-1]-=1)}}}))}},PathRef=exports.PathRef={transform:function transform(ref,op){var current=ref.current,affinity=ref.affinity;if(null!=current){var path=Path.transform(current,op,{affinity});ref.current=path,null==path&&ref.unref()}}};function ownKeys$6(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$6(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$6(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$6(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var Point=exports.Point={compare:function compare(point,another){var result=Path.compare(point.path,another.path);return 0===result?point.offset<another.offset?-1:point.offset>another.offset?1:0:result},isAfter:function isAfter(point,another){return 1===Point.compare(point,another)},isBefore:function isBefore(point,another){return-1===Point.compare(point,another)},equals:function equals(point,another){return point.offset===another.offset&&Path.equals(point.path,another.path)},isPoint:function isPoint(value){return(0,_isPlainObject.isPlainObject)(value)&&"number"==typeof value.offset&&Path.isPath(value.path)},transform:function transform(point,op){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,_immer.produce)(point,(function(p){if(null===p)return null;var _options$affinity5=options.affinity,affinity=void 0===_options$affinity5?"forward":_options$affinity5,path=p.path,offset=p.offset;switch(op.type){case"insert_node":case"move_node":p.path=Path.transform(path,op,options);break;case"insert_text":Path.equals(op.path,path)&&(op.offset<offset||op.offset===offset&&"forward"===affinity)&&(p.offset+=op.text.length);break;case"merge_node":Path.equals(op.path,path)&&(p.offset+=op.position),p.path=Path.transform(path,op,options);break;case"remove_text":Path.equals(op.path,path)&&op.offset<=offset&&(p.offset-=Math.min(offset-op.offset,op.text.length));break;case"remove_node":if(Path.equals(op.path,path)||Path.isAncestor(op.path,path))return null;p.path=Path.transform(path,op,options);break;case"split_node":if(Path.equals(op.path,path)){if(op.position===offset&&null==affinity)return null;(op.position<offset||op.position===offset&&"forward"===affinity)&&(p.offset-=op.position,p.path=Path.transform(path,op,_objectSpread$6(_objectSpread$6({},options),{},{affinity:"forward"})))}else p.path=Path.transform(path,op,options)}}))}},PointRef=exports.PointRef={transform:function transform(ref,op){var current=ref.current,affinity=ref.affinity;if(null!=current){var point=Point.transform(current,op,{affinity});ref.current=point,null==point&&ref.unref()}}},_excluded$2=["anchor","focus"];function ownKeys$5(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}var Range=exports.Range={edges:function edges(range){var _options$reverse8=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).reverse,reverse=void 0!==_options$reverse8&&_options$reverse8,anchor=range.anchor,focus=range.focus;return Range.isBackward(range)===reverse?[anchor,focus]:[focus,anchor]},end:function end(range){var end=_slicedToArray(Range.edges(range),2)[1];return end},equals:function equals(range,another){return Point.equals(range.anchor,another.anchor)&&Point.equals(range.focus,another.focus)},includes:function includes(range,target){if(Range.isRange(target)){if(Range.includes(range,target.anchor)||Range.includes(range,target.focus))return!0;var _Range$edges14=_slicedToArray(Range.edges(range),2),rs=_Range$edges14[0],re=_Range$edges14[1],_Range$edges16=_slicedToArray(Range.edges(target),2),ts=_Range$edges16[0],te=_Range$edges16[1];return Point.isBefore(rs,ts)&&Point.isAfter(re,te)}var _Range$edges18=_slicedToArray(Range.edges(range),2),start=_Range$edges18[0],end=_Range$edges18[1],isAfterStart=!1,isBeforeEnd=!1;return Point.isPoint(target)?(isAfterStart=Point.compare(target,start)>=0,isBeforeEnd=Point.compare(target,end)<=0):(isAfterStart=Path.compare(target,start.path)>=0,isBeforeEnd=Path.compare(target,end.path)<=0),isAfterStart&&isBeforeEnd},intersection:function intersection(range,another){var rest=_objectWithoutProperties(range,_excluded$2),_Range$edges20=_slicedToArray(Range.edges(range),2),s1=_Range$edges20[0],e1=_Range$edges20[1],_Range$edges22=_slicedToArray(Range.edges(another),2),s2=_Range$edges22[0],e2=_Range$edges22[1],start=Point.isBefore(s1,s2)?s2:s1,end=Point.isBefore(e1,e2)?e1:e2;return Point.isBefore(end,start)?null:function _objectSpread$5(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$5(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$5(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({anchor:start,focus:end},rest)},isBackward:function isBackward(range){var anchor=range.anchor,focus=range.focus;return Point.isAfter(anchor,focus)},isCollapsed:function isCollapsed(range){var anchor=range.anchor,focus=range.focus;return Point.equals(anchor,focus)},isExpanded:function isExpanded(range){return!Range.isCollapsed(range)},isForward:function isForward(range){return!Range.isBackward(range)},isRange:function isRange(value){return(0,_isPlainObject.isPlainObject)(value)&&Point.isPoint(value.anchor)&&Point.isPoint(value.focus)},points:function points(range){return _regeneratorRuntime().mark((function _callee11(){return _regeneratorRuntime().wrap((function _callee11$(_context12){for(;;)switch(_context12.prev=_context12.next){case 0:return _context12.next=2,[range.anchor,"anchor"];case 2:return _context12.next=4,[range.focus,"focus"];case 4:case"end":return _context12.stop()}}),_callee11)}))()},start:function start(range){var start=_slicedToArray(Range.edges(range),1)[0];return start},transform:function transform(range,op){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,_immer.produce)(range,(function(r){if(null===r)return null;var affinityAnchor,affinityFocus,_options$affinity6=options.affinity,affinity=void 0===_options$affinity6?"inward":_options$affinity6;if("inward"===affinity){var isCollapsed=Range.isCollapsed(r);Range.isForward(r)?(affinityAnchor="forward",affinityFocus=isCollapsed?affinityAnchor:"backward"):(affinityAnchor="backward",affinityFocus=isCollapsed?affinityAnchor:"forward")}else"outward"===affinity?Range.isForward(r)?(affinityAnchor="backward",affinityFocus="forward"):(affinityAnchor="forward",affinityFocus="backward"):(affinityAnchor=affinity,affinityFocus=affinity);var anchor=Point.transform(r.anchor,op,{affinity:affinityAnchor}),focus=Point.transform(r.focus,op,{affinity:affinityFocus});if(!anchor||!focus)return null;r.anchor=anchor,r.focus=focus}))}},RangeRef=exports.RangeRef={transform:function transform(ref,op){var current=ref.current,affinity=ref.affinity;if(null!=current){var path=Range.transform(current,op,{affinity});ref.current=path,null==path&&ref.unref()}}},_scrubber=void 0,Scrubber=exports.Scrubber={setScrubber:function setScrubber(scrubber){_scrubber=scrubber},stringify:function stringify(value){return JSON.stringify(value,_scrubber)}},isDeepEqual=function isDeepEqual(node,another){for(var key in node){var a=node[key],b=another[key];if((0,_isPlainObject.isPlainObject)(a)&&(0,_isPlainObject.isPlainObject)(b)){if(!isDeepEqual(a,b))return!1}else if(Array.isArray(a)&&Array.isArray(b)){if(a.length!==b.length)return!1;for(var i=0;i<a.length;i++)if(a[i]!==b[i])return!1}else if(a!==b)return!1}for(var _key in another)if(void 0===node[_key]&&void 0!==another[_key])return!1;return!0},_excluded$1=["text"],_excluded2$1=["anchor","focus"];function ownKeys$4(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$4(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$4(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$4(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var Text=exports.Text={equals:function equals(text,another){var _options$loose=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).loose,loose=void 0!==_options$loose&&_options$loose;function omitText(obj){return _objectWithoutProperties(obj,_excluded$1)}return isDeepEqual(loose?omitText(text):text,loose?omitText(another):another)},isText:function isText(value){return(0,_isPlainObject.isPlainObject)(value)&&"string"==typeof value.text},isTextList:function isTextList(value){return Array.isArray(value)&&value.every((function(val){return Text.isText(val)}))},isTextProps:function isTextProps(props){return void 0!==props.text},matches:function matches(text,props){for(var key in props)if("text"!==key&&(!text.hasOwnProperty(key)||text[key]!==props[key]))return!1;return!0},decorations:function decorations(node,_decorations){var _step24,leaves=[_objectSpread$4({},node)],_iterator24=_createForOfIteratorHelper(_decorations);try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var _step25,dec=_step24.value,rest=_objectWithoutProperties(dec,_excluded2$1),_Range$edges26=_slicedToArray(Range.edges(dec),2),start=_Range$edges26[0],end=_Range$edges26[1],next=[],o=0,_iterator25=_createForOfIteratorHelper(leaves);try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var leaf=_step25.value,length=leaf.text.length,offset=o;if(o+=length,start.offset<=offset&&end.offset>=o)Object.assign(leaf,rest),next.push(leaf);else if(start.offset!==end.offset&&(start.offset===o||end.offset===offset)||start.offset>o||end.offset<offset||end.offset===offset&&0!==offset)next.push(leaf);else{var middle=leaf,before=void 0,after=void 0;if(end.offset<o){var off=end.offset-offset;after=_objectSpread$4(_objectSpread$4({},middle),{},{text:middle.text.slice(off)}),middle=_objectSpread$4(_objectSpread$4({},middle),{},{text:middle.text.slice(0,off)})}if(start.offset>offset){var _off=start.offset-offset;before=_objectSpread$4(_objectSpread$4({},middle),{},{text:middle.text.slice(0,_off)}),middle=_objectSpread$4(_objectSpread$4({},middle),{},{text:middle.text.slice(_off)})}Object.assign(middle,rest),before&&next.push(before),next.push(middle),after&&next.push(after)}}}catch(err){_iterator25.e(err)}finally{_iterator25.f()}leaves=next}}catch(err){_iterator24.e(err)}finally{_iterator24.f()}return leaves}};function ownKeys$3(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$3(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$3(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$3(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var GeneralTransforms={transform:function transform(editor,op){editor.children=(0,_immer.createDraft)(editor.children);var selection=editor.selection&&(0,_immer.createDraft)(editor.selection);try{selection=function applyToDraft(editor,selection,op){switch(op.type){case"insert_node":var path=op.path,node=op.node,parent=Node.parent(editor,path),index=path[path.length-1];if(index>parent.children.length)throw new Error('Cannot apply an "insert_node" operation at path ['.concat(path,"] because the destination is past the end of the node."));if(parent.children.splice(index,0,node),selection){var _step26,_iterator26=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var _step26$value=_slicedToArray(_step26.value,2),point=_step26$value[0];selection[_step26$value[1]]=Point.transform(point,op)}}catch(err){_iterator26.e(err)}finally{_iterator26.f()}}break;case"insert_text":var _path=op.path,offset=op.offset,text=op.text;if(0===text.length)break;var _node=Node.leaf(editor,_path),before=_node.text.slice(0,offset),after=_node.text.slice(offset);if(_node.text=before+text+after,selection){var _step27,_iterator27=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){var _step27$value=_slicedToArray(_step27.value,2),_point=_step27$value[0];selection[_step27$value[1]]=Point.transform(_point,op)}}catch(err){_iterator27.e(err)}finally{_iterator27.f()}}break;case"merge_node":var _path2=op.path,_node2=Node.get(editor,_path2),prevPath=Path.previous(_path2),prev=Node.get(editor,prevPath),_parent=Node.parent(editor,_path2),_index=_path2[_path2.length-1];if(Text.isText(_node2)&&Text.isText(prev))prev.text+=_node2.text;else{if(Text.isText(_node2)||Text.isText(prev))throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2,"] to nodes of different interfaces: ").concat(Scrubber.stringify(_node2)," ").concat(Scrubber.stringify(prev)));var _prev$children;(_prev$children=prev.children).push.apply(_prev$children,_toConsumableArray(_node2.children))}if(_parent.children.splice(_index,1),selection){var _step28,_iterator28=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator28.s();!(_step28=_iterator28.n()).done;){var _step28$value=_slicedToArray(_step28.value,2),_point2=_step28$value[0];selection[_step28$value[1]]=Point.transform(_point2,op)}}catch(err){_iterator28.e(err)}finally{_iterator28.f()}}break;case"move_node":var _path3=op.path,newPath=op.newPath;if(Path.isAncestor(_path3,newPath))throw new Error("Cannot move a path [".concat(_path3,"] to new path [").concat(newPath,"] because the destination is inside itself."));var _node3=Node.get(editor,_path3),_parent2=Node.parent(editor,_path3),_index2=_path3[_path3.length-1];_parent2.children.splice(_index2,1);var truePath=Path.transform(_path3,op),newParent=Node.get(editor,Path.parent(truePath)),newIndex=truePath[truePath.length-1];if(newParent.children.splice(newIndex,0,_node3),selection){var _step29,_iterator29=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator29.s();!(_step29=_iterator29.n()).done;){var _step29$value=_slicedToArray(_step29.value,2),_point3=_step29$value[0];selection[_step29$value[1]]=Point.transform(_point3,op)}}catch(err){_iterator29.e(err)}finally{_iterator29.f()}}break;case"remove_node":var _path4=op.path,_index3=_path4[_path4.length-1];if(Node.parent(editor,_path4).children.splice(_index3,1),selection){var _step30,_iterator30=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator30.s();!(_step30=_iterator30.n()).done;){var _step30$value=_slicedToArray(_step30.value,2),_point4=_step30$value[0],_key4=_step30$value[1],result=Point.transform(_point4,op);if(null!=selection&&null!=result)selection[_key4]=result;else{var _step31,_prev=void 0,next=void 0,_iterator31=_createForOfIteratorHelper(Node.texts(editor));try{for(_iterator31.s();!(_step31=_iterator31.n()).done;){var _step31$value=_slicedToArray(_step31.value,2),n=_step31$value[0],p=_step31$value[1];if(-1!==Path.compare(p,_path4)){next=[n,p];break}_prev=[n,p]}}catch(err){_iterator31.e(err)}finally{_iterator31.f()}var preferNext=!1;_prev&&next&&(preferNext=Path.equals(next[1],_path4)?!Path.hasPrevious(next[1]):Path.common(_prev[1],_path4).length<Path.common(next[1],_path4).length),_prev&&!preferNext?(_point4.path=_prev[1],_point4.offset=_prev[0].text.length):next?(_point4.path=next[1],_point4.offset=0):selection=null}}}catch(err){_iterator30.e(err)}finally{_iterator30.f()}}break;case"remove_text":var _path5=op.path,_offset=op.offset,_text=op.text;if(0===_text.length)break;var _node4=Node.leaf(editor,_path5),_before=_node4.text.slice(0,_offset),_after=_node4.text.slice(_offset+_text.length);if(_node4.text=_before+_after,selection){var _step32,_iterator32=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator32.s();!(_step32=_iterator32.n()).done;){var _step32$value=_slicedToArray(_step32.value,2),_point5=_step32$value[0];selection[_step32$value[1]]=Point.transform(_point5,op)}}catch(err){_iterator32.e(err)}finally{_iterator32.f()}}break;case"set_node":var _path6=op.path,properties=op.properties,newProperties=op.newProperties;if(0===_path6.length)throw new Error("Cannot set properties on the root node!");var _node5=Node.get(editor,_path6);for(var _key6 in newProperties){if("children"===_key6||"text"===_key6)throw new Error('Cannot set the "'.concat(_key6,'" property of nodes!'));var value=newProperties[_key6];null==value?delete _node5[_key6]:_node5[_key6]=value}for(var _key7 in properties)newProperties.hasOwnProperty(_key7)||delete _node5[_key7];break;case"set_selection":var _newProperties=op.newProperties;if(null==_newProperties)selection=_newProperties;else{if(null==selection){if(!Range.isRange(_newProperties))throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(Scrubber.stringify(_newProperties)," when there is no current selection."));selection=_objectSpread$3({},_newProperties)}for(var _key8 in _newProperties){var _value=_newProperties[_key8];if(null==_value){if("anchor"===_key8||"focus"===_key8)throw new Error('Cannot remove the "'.concat(_key8,'" selection property'));delete selection[_key8]}else selection[_key8]=_value}}break;case"split_node":var _path7=op.path,position=op.position,_properties=op.properties;if(0===_path7.length)throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7,"] because the root node cannot be split."));var newNode,_node6=Node.get(editor,_path7),_parent4=Node.parent(editor,_path7),_index4=_path7[_path7.length-1];if(Text.isText(_node6)){var _before2=_node6.text.slice(0,position),_after2=_node6.text.slice(position);_node6.text=_before2,newNode=_objectSpread$3(_objectSpread$3({},_properties),{},{text:_after2})}else{var _before3=_node6.children.slice(0,position),_after3=_node6.children.slice(position);_node6.children=_before3,newNode=_objectSpread$3(_objectSpread$3({},_properties),{},{children:_after3})}if(_parent4.children.splice(_index4+1,0,newNode),selection){var _step33,_iterator33=_createForOfIteratorHelper(Range.points(selection));try{for(_iterator33.s();!(_step33=_iterator33.n()).done;){var _step33$value=_slicedToArray(_step33.value,2),_point6=_step33$value[0];selection[_step33$value[1]]=Point.transform(_point6,op)}}catch(err){_iterator33.e(err)}finally{_iterator33.f()}}}return selection}(editor,selection,op)}finally{editor.children=(0,_immer.finishDraft)(editor.children),editor.selection=selection?(0,_immer.isDraft)(selection)?(0,_immer.finishDraft)(selection):selection:null}}},_excluded=["text"],_excluded2=["children"];function ownKeys$2(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$2(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$2(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var NodeTransforms={insertNodes:function insertNodes(editor,nodes){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Editor.withoutNormalizing(editor,(function(){var _options$hanging=options.hanging,hanging=void 0!==_options$hanging&&_options$hanging,_options$voids9=options.voids,voids=void 0!==_options$voids9&&_options$voids9,_options$mode5=options.mode,mode=void 0===_options$mode5?"lowest":_options$mode5,at=options.at,match=options.match,select=options.select;if(Node.isNode(nodes)&&(nodes=[nodes]),0!==nodes.length){var node=_slicedToArray(nodes,1)[0];if(at||(at=editor.selection?editor.selection:editor.children.length>0?Editor.end(editor,[]):[0],select=!0),null==select&&(select=!1),Range.isRange(at))if(hanging||(at=Editor.unhangRange(editor,at)),Range.isCollapsed(at))at=at.anchor;else{var end=_slicedToArray(Range.edges(at),2)[1],pointRef=Editor.pointRef(editor,end);Transforms.delete(editor,{at}),at=pointRef.unref()}if(Point.isPoint(at)){null==match&&(match=Text.isText(node)?function match(n){return Text.isText(n)}:editor.isInline(node)?function match(n){return Text.isText(n)||Editor.isInline(editor,n)}:function match(n){return Editor.isBlock(editor,n)});var entry=_slicedToArray(Editor.nodes(editor,{at:at.path,match,mode,voids}),1)[0];if(!entry)return;var _matchPath=_slicedToArray(entry,2)[1],pathRef=Editor.pathRef(editor,_matchPath),isAtEnd=Editor.isEnd(editor,at,_matchPath);Transforms.splitNodes(editor,{at,match,mode,voids});var path=pathRef.unref();at=isAtEnd?Path.next(path):path}var parentPath=Path.parent(at),index=at[at.length-1];if(voids||!Editor.void(editor,{at:parentPath})){var _step34,_iterator34=_createForOfIteratorHelper(nodes);try{for(_iterator34.s();!(_step34=_iterator34.n()).done;){var _node=_step34.value,_path=parentPath.concat(index);index++,editor.apply({type:"insert_node",path:_path,node:_node}),at=Path.next(at)}}catch(err){_iterator34.e(err)}finally{_iterator34.f()}if(at=Path.previous(at),select){var point=Editor.end(editor,at);point&&Transforms.select(editor,point)}}}}))},liftNodes:function liftNodes(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Editor.withoutNormalizing(editor,(function(){var _options$at7=options.at,at=void 0===_options$at7?editor.selection:_options$at7,_options$mode6=options.mode,mode=void 0===_options$mode6?"lowest":_options$mode6,_options$voids10=options.voids,voids=void 0!==_options$voids10&&_options$voids10,match=options.match;if(null==match&&(match=Path.isPath(at)?matchPath(editor,at):function(n){return Editor.isBlock(editor,n)}),at)for(var matches=Editor.nodes(editor,{at,match,mode,voids}),_i=0,_pathRefs=Array.from(matches,(function(_ref){var p=_slicedToArray(_ref,2)[1];return Editor.pathRef(editor,p)}));_i<_pathRefs.length;_i++){var path=_pathRefs[_i].unref();if(path.length<2)throw new Error("Cannot lift node at a path [".concat(path,"] because it has a depth of less than `2`."));var _parentNodeEntry2=_slicedToArray(Editor.node(editor,Path.parent(path)),2),parent=_parentNodeEntry2[0],parentPath=_parentNodeEntry2[1],index=path[path.length-1],length=parent.children.length;if(1===length){var toPath=Path.next(parentPath);Transforms.moveNodes(editor,{at:path,to:toPath,voids}),Transforms.removeNodes(editor,{at:parentPath,voids})}else if(0===index)Transforms.moveNodes(editor,{at:path,to:parentPath,voids});else if(index===length-1){var _toPath=Path.next(parentPath);Transforms.moveNodes(editor,{at:path,to:_toPath,voids})}else{var splitPath=Path.next(path),_toPath2=Path.next(parentPath);Transforms.splitNodes(editor,{at:splitPath,voids}),Transforms.moveNodes(editor,{at:path,to:_toPath2,voids})}}}))},mergeNodes:function mergeNodes(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Editor.withoutNormalizing(editor,(function(){var match=options.match,_options$at8=options.at,at=void 0===_options$at8?editor.selection:_options$at8,_options$hanging2=options.hanging,hanging=void 0!==_options$hanging2&&_options$hanging2,_options$voids11=options.voids,voids=void 0!==_options$voids11&&_options$voids11,_options$mode7=options.mode,mode=void 0===_options$mode7?"lowest":_options$mode7;if(at){if(null==match)if(Path.isPath(at)){var parent=_slicedToArray(Editor.parent(editor,at),1)[0];match=function match(n){return parent.children.includes(n)}}else match=function match(n){return Editor.isBlock(editor,n)};if(!hanging&&Range.isRange(at)&&(at=Editor.unhangRange(editor,at)),Range.isRange(at))if(Range.isCollapsed(at))at=at.anchor;else{var end=_slicedToArray(Range.edges(at),2)[1],pointRef=Editor.pointRef(editor,end);Transforms.delete(editor,{at}),at=pointRef.unref(),null==options.at&&Transforms.select(editor,at)}var current=_slicedToArray(Editor.nodes(editor,{at,match,voids,mode}),1)[0],prev=Editor.previous(editor,{at,match,voids,mode});if(current&&prev){var _current=_slicedToArray(current,2),node=_current[0],path=_current[1],_prev3=_slicedToArray(prev,2),prevNode=_prev3[0],prevPath=_prev3[1];if(0!==path.length&&0!==prevPath.length){var properties,position,newPath=Path.next(prevPath),commonPath=Path.common(path,prevPath),isPreviousSibling=Path.isSibling(path,prevPath),levels=Array.from(Editor.levels(editor,{at:path}),(function(_ref2){return _slicedToArray(_ref2,1)[0]})).slice(commonPath.length).slice(0,-1),emptyAncestor=Editor.above(editor,{at:path,mode:"highest",match:function match(n){return levels.includes(n)&&hasSingleChildNest(editor,n)}}),emptyRef=emptyAncestor&&Editor.pathRef(editor,emptyAncestor[1]);if(Text.isText(node)&&Text.isText(prevNode)){var rest=_objectWithoutProperties(node,_excluded);position=prevNode.text.length,properties=rest}else{if(!Element.isElement(node)||!Element.isElement(prevNode))throw new Error("Cannot merge the node at path [".concat(path,"] with the previous sibling because it is not the same kind: ").concat(Scrubber.stringify(node)," ").concat(Scrubber.stringify(prevNode)));rest=_objectWithoutProperties(node,_excluded2);position=prevNode.children.length,properties=rest}isPreviousSibling||Transforms.moveNodes(editor,{at:path,to:newPath,voids}),emptyRef&&Transforms.removeNodes(editor,{at:emptyRef.current,voids}),Element.isElement(prevNode)&&Editor.isEmpty(editor,prevNode)||Text.isText(prevNode)&&""===prevNode.text&&0!==prevPath[prevPath.length-1]?Transforms.removeNodes(editor,{at:prevPath,voids}):editor.apply({type:"merge_node",path:newPath,position,properties}),emptyRef&&emptyRef.unref()}}}}))},moveNodes:function moveNodes(editor,options){Editor.withoutNormalizing(editor,(function(){var to=options.to,_options$at9=options.at,at=void 0===_options$at9?editor.selection:_options$at9,_options$mode8=options.mode,mode=void 0===_options$mode8?"lowest":_options$mode8,_options$voids12=options.voids,voids=void 0!==_options$voids12&&_options$voids12,match=options.match;if(at){null==match&&(match=Path.isPath(at)?matchPath(editor,at):function(n){return Editor.isBlock(editor,n)});for(var toRef=Editor.pathRef(editor,to),targets=Editor.nodes(editor,{at,match,mode,voids}),_i2=0,_pathRefs2=Array.from(targets,(function(_ref3){var p=_slicedToArray(_ref3,2)[1];return Editor.pathRef(editor,p)}));_i2<_pathRefs2.length;_i2++){var path=_pathRefs2[_i2].unref(),newPath=toRef.current;0!==path.length&&editor.apply({type:"move_node",path,newPath}),toRef.current&&Path.isSibling(newPath,path)&&Path.isAfter(newPath,path)&&(toRef.current=Path.next(toRef.current))}toRef.unref()}}))},removeNodes:function removeNodes(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Editor.withoutNormalizing(editor,(function(){var _options$hanging3=options.hanging,hanging=void 0!==_options$hanging3&&_options$hanging3,_options$voids13=options.voids,voids=void 0!==_options$voids13&&_options$voids13,_options$mode9=options.mode,mode=void 0===_options$mode9?"lowest":_options$mode9,_options$at10=options.at,at=void 0===_options$at10?editor.selection:_options$at10,match=options.match;if(at){null==match&&(match=Path.isPath(at)?matchPath(editor,at):function(n){return Editor.isBlock(editor,n)}),!hanging&&Range.isRange(at)&&(at=Editor.unhangRange(editor,at));for(var depths=Editor.nodes(editor,{at,match,mode,voids}),_i3=0,_pathRefs3=Array.from(depths,(function(_ref4){var p=_slicedToArray(_ref4,2)[1];return Editor.pathRef(editor,p)}));_i3<_pathRefs3.length;_i3++){var path=_pathRefs3[_i3].unref();if(path){var node=_slicedToArray(Editor.node(editor,path),1)[0];editor.apply({type:"remove_node",path,node})}}}}))},setNodes:function setNodes(editor,props){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Editor.withoutNormalizing(editor,(function(){var match=options.match,_options$at11=options.at,at=void 0===_options$at11?editor.selection:_options$at11,compare=options.compare,merge=options.merge,_options$hanging4=options.hanging,hanging=void 0!==_options$hanging4&&_options$hanging4,_options$mode10=options.mode,mode=void 0===_options$mode10?"lowest":_options$mode10,_options$split=options.split,split=void 0!==_options$split&&_options$split,_options$voids14=options.voids,voids=void 0!==_options$voids14&&_options$voids14;if(at){if(null==match&&(match=Path.isPath(at)?matchPath(editor,at):function(n){return Editor.isBlock(editor,n)}),!hanging&&Range.isRange(at)&&(at=Editor.unhangRange(editor,at)),split&&Range.isRange(at)){if(Range.isCollapsed(at)&&Editor.leaf(editor,at.anchor)[0].text.length>0)return;var rangeRef=Editor.rangeRef(editor,at,{affinity:"inward"}),_Range$edges32=_slicedToArray(Range.edges(at),2),start=_Range$edges32[0],end=_Range$edges32[1],splitMode="lowest"===mode?"lowest":"highest",endAtEndOfNode=Editor.isEnd(editor,end,end.path);Transforms.splitNodes(editor,{at:end,match,mode:splitMode,voids,always:!endAtEndOfNode});var startAtStartOfNode=Editor.isStart(editor,start,start.path);Transforms.splitNodes(editor,{at:start,match,mode:splitMode,voids,always:!startAtStartOfNode}),at=rangeRef.unref(),null==options.at&&Transforms.select(editor,at)}compare||(compare=function compare(prop,nodeProp){return prop!==nodeProp});var _step35,_iterator35=_createForOfIteratorHelper(Editor.nodes(editor,{at,match,mode,voids}));try{for(_iterator35.s();!(_step35=_iterator35.n()).done;){var _step35$value=_slicedToArray(_step35.value,2),node=_step35$value[0],path=_step35$value[1],properties={},newProperties={};if(0!==path.length){var hasChanges=!1;for(var k in props)"children"!==k&&"text"!==k&&compare(props[k],node[k])&&(hasChanges=!0,node.hasOwnProperty(k)&&(properties[k]=node[k]),merge?null!=props[k]&&(newProperties[k]=merge(node[k],props[k])):null!=props[k]&&(newProperties[k]=props[k]));hasChanges&&editor.apply({type:"set_node",path,properties,newProperties})}}}catch(err){_iterator35.e(err)}finally{_iterator35.f()}}}))},splitNodes:function splitNodes(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Editor.withoutNormalizing(editor,(function(){var _options$mode11=options.mode,mode=void 0===_options$mode11?"lowest":_options$mode11,_options$voids15=options.voids,voids=void 0!==_options$voids15&&_options$voids15,match=options.match,_options$at12=options.at,at=void 0===_options$at12?editor.selection:_options$at12,_options$height=options.height,height=void 0===_options$height?0:_options$height,_options$always=options.always,always=void 0!==_options$always&&_options$always;if(null==match&&(match=function match(n){return Editor.isBlock(editor,n)}),Range.isRange(at)&&(at=deleteRange(editor,at)),Path.isPath(at)){var path=at,point=Editor.point(editor,path),parent=_slicedToArray(Editor.parent(editor,path),1)[0];match=function match(n){return n===parent},height=point.path.length-path.length+1,at=point,always=!0}if(at){var afterRef,beforeRef=Editor.pointRef(editor,at,{affinity:"backward"});try{var highest=_slicedToArray(Editor.nodes(editor,{at,match,mode,voids}),1)[0];if(!highest)return;var voidMatch=Editor.void(editor,{at,mode:"highest"});if(!voids&&voidMatch){var _voidMatch=_slicedToArray(voidMatch,2),voidNode=_voidMatch[0],voidPath=_voidMatch[1];if(Element.isElement(voidNode)&&editor.isInline(voidNode)){var after=Editor.after(editor,voidPath);if(!after){var afterPath=Path.next(voidPath);Transforms.insertNodes(editor,{text:""},{at:afterPath,voids}),after=Editor.point(editor,afterPath)}at=after,always=!0}height=at.path.length-voidPath.length+1,always=!0}afterRef=Editor.pointRef(editor,at);var _step36,depth=at.path.length-height,highestPath=_slicedToArray(highest,2)[1],lowestPath=at.path.slice(0,depth),position=0===height?at.offset:at.path[depth]+0,_iterator36=_createForOfIteratorHelper(Editor.levels(editor,{at:lowestPath,reverse:!0,voids}));try{for(_iterator36.s();!(_step36=_iterator36.n()).done;){var _step36$value=_slicedToArray(_step36.value,2),node=_step36$value[0],_path2=_step36$value[1],split=!1;if(_path2.length<highestPath.length||0===_path2.length||!voids&&Editor.isVoid(editor,node))break;var _point=beforeRef.current,isEnd=Editor.isEnd(editor,_point,_path2);if(always||!beforeRef||!Editor.isEdge(editor,_point,_path2)){split=!0;var properties=Node.extractProps(node);editor.apply({type:"split_node",path:_path2,position,properties})}position=_path2[_path2.length-1]+(split||isEnd?1:0)}}catch(err){_iterator36.e(err)}finally{_iterator36.f()}if(null==options.at){var _point2=afterRef.current||Editor.end(editor,[]);Transforms.select(editor,_point2)}}finally{var _afterRef;beforeRef.unref(),null===(_afterRef=afterRef)||void 0===_afterRef||_afterRef.unref()}}}))},unsetNodes:function unsetNodes(editor,props){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Array.isArray(props)||(props=[props]);var _step37,obj={},_iterator37=_createForOfIteratorHelper(props);try{for(_iterator37.s();!(_step37=_iterator37.n()).done;){obj[_step37.value]=null}}catch(err){_iterator37.e(err)}finally{_iterator37.f()}Transforms.setNodes(editor,obj,options)},unwrapNodes:function unwrapNodes(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Editor.withoutNormalizing(editor,(function(){var _options$mode12=options.mode,mode=void 0===_options$mode12?"lowest":_options$mode12,_options$split2=options.split,split=void 0!==_options$split2&&_options$split2,_options$voids16=options.voids,voids=void 0!==_options$voids16&&_options$voids16,_options$at13=options.at,at=void 0===_options$at13?editor.selection:_options$at13,match=options.match;if(at){null==match&&(match=Path.isPath(at)?matchPath(editor,at):function(n){return Editor.isBlock(editor,n)}),Path.isPath(at)&&(at=Editor.range(editor,at));var _step38,rangeRef=Range.isRange(at)?Editor.rangeRef(editor,at):null,matches=Editor.nodes(editor,{at,match,mode,voids}),_loop=function _loop(pathRef){var path=pathRef.unref(),node=_slicedToArray(Editor.node(editor,path),1)[0],range=Editor.range(editor,path);split&&rangeRef&&(range=Range.intersection(rangeRef.current,range)),Transforms.liftNodes(editor,{at:range,match:function match(n){return Element.isAncestor(node)&&node.children.includes(n)},voids})},_iterator38=_createForOfIteratorHelper(Array.from(matches,(function(_ref5){var p=_slicedToArray(_ref5,2)[1];return Editor.pathRef(editor,p)})).reverse());try{for(_iterator38.s();!(_step38=_iterator38.n()).done;){_loop(_step38.value)}}catch(err){_iterator38.e(err)}finally{_iterator38.f()}rangeRef&&rangeRef.unref()}}))},wrapNodes:function wrapNodes(editor,element){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Editor.withoutNormalizing(editor,(function(){var _options$mode13=options.mode,mode=void 0===_options$mode13?"lowest":_options$mode13,_options$split3=options.split,split=void 0!==_options$split3&&_options$split3,_options$voids17=options.voids,voids=void 0!==_options$voids17&&_options$voids17,match=options.match,_options$at14=options.at,at=void 0===_options$at14?editor.selection:_options$at14;if(at){if(null==match&&(match=Path.isPath(at)?matchPath(editor,at):editor.isInline(element)?function match(n){return Editor.isInline(editor,n)||Text.isText(n)}:function match(n){return Editor.isBlock(editor,n)}),split&&Range.isRange(at)){var _Range$edges34=_slicedToArray(Range.edges(at),2),start=_Range$edges34[0],end=_Range$edges34[1],rangeRef=Editor.rangeRef(editor,at,{affinity:"inward"});Transforms.splitNodes(editor,{at:end,match,voids}),Transforms.splitNodes(editor,{at:start,match,voids}),at=rangeRef.unref(),null==options.at&&Transforms.select(editor,at)}for(var _i4=0,_roots=Array.from(Editor.nodes(editor,{at,match:editor.isInline(element)?function(n){return Editor.isBlock(editor,n)}:function(n){return Editor.isEditor(n)},mode:"lowest",voids}));_i4<_roots.length;_i4++){var rootPath=_slicedToArray(_roots[_i4],2)[1],a=Range.isRange(at)?Range.intersection(at,Editor.range(editor,rootPath)):at;if(a){var matches=Array.from(Editor.nodes(editor,{at:a,match,mode,voids}));if(matches.length>0)if("continue"===function(){var first=_slicedToArray(matches,1)[0],last=matches[matches.length-1],firstPath=_slicedToArray(first,2)[1],lastPath=_slicedToArray(last,2)[1];if(0===firstPath.length&&0===lastPath.length)return"continue";var commonPath=Path.equals(firstPath,lastPath)?Path.parent(firstPath):Path.common(firstPath,lastPath),range=Editor.range(editor,firstPath,lastPath),commonNode=_slicedToArray(Editor.node(editor,commonPath),1)[0],depth=commonPath.length+1,wrapperPath=Path.next(lastPath.slice(0,depth)),wrapper=_objectSpread$2(_objectSpread$2({},element),{},{children:[]});Transforms.insertNodes(editor,wrapper,{at:wrapperPath,voids}),Transforms.moveNodes(editor,{at:range,match:function match(n){return Element.isAncestor(commonNode)&&commonNode.children.includes(n)},to:wrapperPath.concat(0),voids})}())continue}}}}))}},hasSingleChildNest=function hasSingleChildNest(editor,node){if(Element.isElement(node)){var element=node;return!!Editor.isVoid(editor,node)||1===element.children.length&&hasSingleChildNest(editor,element.children[0])}return!Editor.isEditor(node)},deleteRange=function deleteRange(editor,range){if(Range.isCollapsed(range))return range.anchor;var end=_slicedToArray(Range.edges(range),2)[1],pointRef=Editor.pointRef(editor,end);return Transforms.delete(editor,{at:range}),pointRef.unref()},matchPath=function matchPath(editor,path){var node=_slicedToArray(Editor.node(editor,path),1)[0];return function(n){return n===node}};function ownKeys$1(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$1(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$1(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$1(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var SelectionTransforms={collapse:function collapse(editor){var _options$edge2=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).edge,edge=void 0===_options$edge2?"anchor":_options$edge2,selection=editor.selection;if(selection)if("anchor"===edge)Transforms.select(editor,selection.anchor);else if("focus"===edge)Transforms.select(editor,selection.focus);else if("start"===edge){var start=_slicedToArray(Range.edges(selection),1)[0];Transforms.select(editor,start)}else if("end"===edge){var end=_slicedToArray(Range.edges(selection),2)[1];Transforms.select(editor,end)}},deselect:function deselect(editor){var selection=editor.selection;selection&&editor.apply({type:"set_selection",properties:selection,newProperties:null})},move:function move(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},selection=editor.selection,_options$distance3=options.distance,distance=void 0===_options$distance3?1:_options$distance3,_options$unit4=options.unit,unit=void 0===_options$unit4?"character":_options$unit4,_options$reverse9=options.reverse,reverse=void 0!==_options$reverse9&&_options$reverse9,_options$edge3=options.edge,edge=void 0===_options$edge3?null:_options$edge3;if(selection){"start"===edge&&(edge=Range.isBackward(selection)?"focus":"anchor"),"end"===edge&&(edge=Range.isBackward(selection)?"anchor":"focus");var anchor=selection.anchor,focus=selection.focus,opts={distance,unit},props={};if(null==edge||"anchor"===edge){var point=reverse?Editor.before(editor,anchor,opts):Editor.after(editor,anchor,opts);point&&(props.anchor=point)}if(null==edge||"focus"===edge){var _point=reverse?Editor.before(editor,focus,opts):Editor.after(editor,focus,opts);_point&&(props.focus=_point)}Transforms.setSelection(editor,props)}},select:function select(editor,target){var selection=editor.selection;if(target=Editor.range(editor,target),selection)Transforms.setSelection(editor,target);else{if(!Range.isRange(target))throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(Scrubber.stringify(target)));editor.apply({type:"set_selection",properties:selection,newProperties:target})}},setPoint:function setPoint(editor,props){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},selection=editor.selection,_options$edge4=options.edge,edge=void 0===_options$edge4?"both":_options$edge4;if(selection){"start"===edge&&(edge=Range.isBackward(selection)?"focus":"anchor"),"end"===edge&&(edge=Range.isBackward(selection)?"anchor":"focus");var anchor=selection.anchor,focus=selection.focus,point="anchor"===edge?anchor:focus;Transforms.setSelection(editor,_defineProperty2({},"anchor"===edge?"anchor":"focus",_objectSpread$1(_objectSpread$1({},point),props)))}},setSelection:function setSelection(editor,props){var selection=editor.selection,oldProps={},newProps={};if(selection){for(var k in props)("anchor"===k&&null!=props.anchor&&!Point.equals(props.anchor,selection.anchor)||"focus"===k&&null!=props.focus&&!Point.equals(props.focus,selection.focus)||"anchor"!==k&&"focus"!==k&&props[k]!==selection[k])&&(oldProps[k]=selection[k],newProps[k]=props[k]);Object.keys(oldProps).length>0&&editor.apply({type:"set_selection",properties:oldProps,newProperties:newProps})}}},TextTransforms={delete:function _delete(editor){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Editor.withoutNormalizing(editor,(function(){var _options$reverse10=options.reverse,reverse=void 0!==_options$reverse10&&_options$reverse10,_options$unit5=options.unit,unit=void 0===_options$unit5?"character":_options$unit5,_options$distance4=options.distance,distance=void 0===_options$distance4?1:_options$distance4,_options$voids18=options.voids,voids=void 0!==_options$voids18&&_options$voids18,_options$at15=options.at,at=void 0===_options$at15?editor.selection:_options$at15,_options$hanging5=options.hanging,hanging=void 0!==_options$hanging5&&_options$hanging5;if(at){if(Range.isRange(at)&&Range.isCollapsed(at)&&(at=at.anchor),Point.isPoint(at)){var furthestVoid=Editor.void(editor,{at,mode:"highest"});if(!voids&&furthestVoid){at=_slicedToArray(furthestVoid,2)[1]}else{var opts={unit,distance};at={anchor:at,focus:reverse?Editor.before(editor,at,opts)||Editor.start(editor,[]):Editor.after(editor,at,opts)||Editor.end(editor,[])},hanging=!0}}if(Path.isPath(at))Transforms.removeNodes(editor,{at,voids});else if(!Range.isCollapsed(at)){if(!hanging){var _end=_slicedToArray(Range.edges(at),2)[1],endOfDoc=Editor.end(editor,[]);Point.equals(_end,endOfDoc)||(at=Editor.unhangRange(editor,at,{voids}))}var _Range$edges44=_slicedToArray(Range.edges(at),2),start=_Range$edges44[0],end=_Range$edges44[1],startBlock=Editor.above(editor,{match:function match(n){return Editor.isBlock(editor,n)},at:start,voids}),endBlock=Editor.above(editor,{match:function match(n){return Editor.isBlock(editor,n)},at:end,voids}),isAcrossBlocks=startBlock&&endBlock&&!Path.equals(startBlock[1],endBlock[1]),isSingleText=Path.equals(start.path,end.path),startVoid=voids?null:Editor.void(editor,{at:start,mode:"highest"}),endVoid=voids?null:Editor.void(editor,{at:end,mode:"highest"});if(startVoid){var before=Editor.before(editor,start);before&&startBlock&&Path.isAncestor(startBlock[1],before.path)&&(start=before)}if(endVoid){var after=Editor.after(editor,end);after&&endBlock&&Path.isAncestor(endBlock[1],after.path)&&(end=after)}var lastPath,_step39,matches=[],_iterator39=_createForOfIteratorHelper(Editor.nodes(editor,{at,voids}));try{for(_iterator39.s();!(_step39=_iterator39.n()).done;){var entry=_step39.value,_entry7=_slicedToArray(entry,2),node=_entry7[0],path=_entry7[1];lastPath&&0===Path.compare(path,lastPath)||(!voids&&Editor.isVoid(editor,node)||!Path.isCommon(path,start.path)&&!Path.isCommon(path,end.path))&&(matches.push(entry),lastPath=path)}}catch(err){_iterator39.e(err)}finally{_iterator39.f()}var pathRefs=Array.from(matches,(function(_ref){var p=_slicedToArray(_ref,2)[1];return Editor.pathRef(editor,p)})),startRef=Editor.pointRef(editor,start),endRef=Editor.pointRef(editor,end);if(!isSingleText&&!startVoid){var _point=startRef.current,_node=_slicedToArray(Editor.leaf(editor,_point),1)[0],_path=_point.path,offset=start.offset,text=_node.text.slice(offset);text.length>0&&editor.apply({type:"remove_text",path:_path,offset,text})}for(var _i5=0,_pathRefs4=pathRefs;_i5<_pathRefs4.length;_i5++){var _path2=_pathRefs4[_i5].unref();Transforms.removeNodes(editor,{at:_path2,voids})}if(!endVoid){var _point2=endRef.current,_node2=_slicedToArray(Editor.leaf(editor,_point2),1)[0],_path3=_point2.path,_offset=isSingleText?start.offset:0,_text=_node2.text.slice(_offset,end.offset);_text.length>0&&editor.apply({type:"remove_text",path:_path3,offset:_offset,text:_text})}!isSingleText&&isAcrossBlocks&&endRef.current&&startRef.current&&Transforms.mergeNodes(editor,{at:endRef.current,hanging:!0,voids});var startUnref=startRef.unref(),endUnref=endRef.unref(),point=reverse?startUnref||endUnref:endUnref||startUnref;null==options.at&&point&&Transforms.select(editor,point)}}}))},insertFragment:function insertFragment(editor,fragment){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Editor.withoutNormalizing(editor,(function(){var _options$hanging6=options.hanging,hanging=void 0!==_options$hanging6&&_options$hanging6,_options$voids19=options.voids,voids=void 0!==_options$voids19&&_options$voids19,_options$at16=options.at,at=void 0===_options$at16?editor.selection:_options$at16;if(fragment.length&&at){if(Range.isRange(at))if(hanging||(at=Editor.unhangRange(editor,at)),Range.isCollapsed(at))at=at.anchor;else{var end=_slicedToArray(Range.edges(at),2)[1];if(!voids&&Editor.void(editor,{at:end}))return;var pointRef=Editor.pointRef(editor,end);Transforms.delete(editor,{at}),at=pointRef.unref()}else Path.isPath(at)&&(at=Editor.start(editor,at));if(voids||!Editor.void(editor,{at})){var inlineElementMatch=Editor.above(editor,{at,match:function match(n){return Editor.isInline(editor,n)},mode:"highest",voids});if(inlineElementMatch){var _inlinePath=_slicedToArray(inlineElementMatch,2)[1];if(Editor.isEnd(editor,at,_inlinePath))at=Editor.after(editor,_inlinePath);else if(Editor.isStart(editor,at,_inlinePath)){at=Editor.before(editor,_inlinePath)}}var _step40,blockPath=_slicedToArray(Editor.above(editor,{match:function match(n){return Editor.isBlock(editor,n)},at,voids}),2)[1],isBlockStart=Editor.isStart(editor,at,blockPath),isBlockEnd=Editor.isEnd(editor,at,blockPath),isBlockEmpty=isBlockStart&&isBlockEnd,mergeStart=!isBlockStart||isBlockStart&&isBlockEnd,mergeEnd=!isBlockEnd,firstPath=_slicedToArray(Node.first({children:fragment},[]),2)[1],lastPath=_slicedToArray(Node.last({children:fragment},[]),2)[1],matches=[],matcher=function matcher(_ref2){var _ref18=_slicedToArray(_ref2,2),n=_ref18[0],p=_ref18[1];return!(0===p.length)&&(!!isBlockEmpty||!(mergeStart&&Path.isAncestor(p,firstPath)&&Element.isElement(n)&&!editor.isVoid(n)&&!editor.isInline(n))&&!(mergeEnd&&Path.isAncestor(p,lastPath)&&Element.isElement(n)&&!editor.isVoid(n)&&!editor.isInline(n)))},_iterator40=_createForOfIteratorHelper(Node.nodes({children:fragment},{pass:matcher}));try{for(_iterator40.s();!(_step40=_iterator40.n()).done;){var entry=_step40.value;matcher(entry)&&matches.push(entry)}}catch(err){_iterator40.e(err)}finally{_iterator40.f()}for(var starts=[],middles=[],ends=[],starting=!0,hasBlocks=!1,_i6=0,_matches3=matches;_i6<_matches3.length;_i6++){var node=_slicedToArray(_matches3[_i6],1)[0];Element.isElement(node)&&!editor.isInline(node)?(starting=!1,hasBlocks=!0,middles.push(node)):starting?starts.push(node):ends.push(node)}var _Editor$nodes14=_slicedToArray(Editor.nodes(editor,{at,match:function match(n){return Text.isText(n)||Editor.isInline(editor,n)},mode:"highest",voids}),1),inlinePath=_slicedToArray(_Editor$nodes14[0],2)[1],isInlineStart=Editor.isStart(editor,at,inlinePath),isInlineEnd=Editor.isEnd(editor,at,inlinePath),middleRef=Editor.pathRef(editor,isBlockEnd?Path.next(blockPath):blockPath),endRef=Editor.pathRef(editor,isInlineEnd?Path.next(inlinePath):inlinePath),blockPathRef=Editor.pathRef(editor,blockPath);Transforms.splitNodes(editor,{at,match:function match(n){return hasBlocks?Editor.isBlock(editor,n):Text.isText(n)||Editor.isInline(editor,n)},mode:hasBlocks?"lowest":"highest",voids});var startRef=Editor.pathRef(editor,!isInlineStart||isInlineStart&&isInlineEnd?Path.next(inlinePath):inlinePath);if(Transforms.insertNodes(editor,starts,{at:startRef.current,match:function match(n){return Text.isText(n)||Editor.isInline(editor,n)},mode:"highest",voids}),isBlockEmpty&&middles.length&&Transforms.delete(editor,{at:blockPathRef.unref(),voids}),Transforms.insertNodes(editor,middles,{at:middleRef.current,match:function match(n){return Editor.isBlock(editor,n)},mode:"lowest",voids}),Transforms.insertNodes(editor,ends,{at:endRef.current,match:function match(n){return Text.isText(n)||Editor.isInline(editor,n)},mode:"highest",voids}),!options.at){var path;path=ends.length>0?Path.previous(endRef.current):middles.length>0?Path.previous(middleRef.current):Path.previous(startRef.current);var _end2=Editor.end(editor,path);Transforms.select(editor,_end2)}startRef.unref(),middleRef.unref(),endRef.unref()}}}))},insertText:function insertText(editor,text){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Editor.withoutNormalizing(editor,(function(){var _options$voids20=options.voids,voids=void 0!==_options$voids20&&_options$voids20,_options$at17=options.at,at=void 0===_options$at17?editor.selection:_options$at17;if(at){if(Path.isPath(at)&&(at=Editor.range(editor,at)),Range.isRange(at))if(Range.isCollapsed(at))at=at.anchor;else{var end=Range.end(at);if(!voids&&Editor.void(editor,{at:end}))return;var start=Range.start(at),startRef=Editor.pointRef(editor,start),endRef=Editor.pointRef(editor,end);Transforms.delete(editor,{at,voids});var startPoint=startRef.unref(),endPoint=endRef.unref();at=startPoint||endPoint,Transforms.setSelection(editor,{anchor:at,focus:at})}if(voids||!Editor.void(editor,{at})){var _at=at,path=_at.path,offset=_at.offset;text.length>0&&editor.apply({type:"insert_text",path,offset,text})}}}))}};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var Transforms=exports.Transforms=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},GeneralTransforms),NodeTransforms),SelectionTransforms),TextTransforms)},"./node_modules/direction/index.js":module=>{"use strict";module.exports=function direction(value){if(value=String(value||""),rtl.test(value))return"rtl";if(ltr.test(value))return"ltr";return"neutral"};var LTR="A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿",rtl=new RegExp("^[^"+LTR+"]*[֑-߿יִ-﷽ﹰ-ﻼ]"),ltr=new RegExp("^[^֑-߿יִ-﷽ﹰ-ﻼ]*["+LTR+"]")},"./node_modules/immer/dist/immer.cjs.production.min.js":(__unused_webpack_module,exports)=>{function n(n){for(var t=arguments.length,r=Array(t>1?t-1:0),e=1;e<t;e++)r[e-1]=arguments[e];throw Error("[Immer] minified error nr: "+n+(r.length?" "+r.map((function(n){return"'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function t(n){return!!n&&!!n[H]}function r(n){return!!n&&(function(n){if(!n||"object"!=typeof n)return!1;var t=Object.getPrototypeOf(n);if(null===t)return!0;var r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===Q}(n)||Array.isArray(n)||!!n[G]||!!n.constructor[G]||c(n)||v(n))}function e(n,t,r){void 0===r&&(r=!1),0===i(n)?(r?Object.keys:T)(n).forEach((function(e){r&&"symbol"==typeof e||t(e,n[e],n)})):n.forEach((function(r,e){return t(e,r,n)}))}function i(n){var t=n[H];return t?t.t>3?t.t-4:t.t:Array.isArray(n)?1:c(n)?2:v(n)?3:0}function u(n,t){return 2===i(n)?n.has(t):Object.prototype.hasOwnProperty.call(n,t)}function o(n,t){return 2===i(n)?n.get(t):n[t]}function f(n,t,r){var e=i(n);2===e?n.set(t,r):3===e?(n.delete(t),n.add(r)):n[t]=r}function a(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}function c(n){return W&&n instanceof Map}function v(n){return X&&n instanceof Set}function s(n){return n.i||n.u}function p(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var t=U(n);delete t[H];for(var r=T(t),e=0;e<r.length;e++){var i=r[e],u=t[i];!1===u.writable&&(u.writable=!0,u.configurable=!0),(u.get||u.set)&&(t[i]={configurable:!0,writable:!0,enumerable:u.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),t)}function l(n,u){return void 0===u&&(u=!1),h(n)||t(n)||!r(n)||(i(n)>1&&(n.set=n.add=n.clear=n.delete=d),Object.freeze(n),u&&e(n,(function(n,t){return l(t,!0)}),!0)),n}function d(){n(2)}function h(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function y(t){var r=V[t];return r||n(18,t),r}function _(n,t){V[n]||(V[n]=t)}function b(){return J}function m(n,t){t&&(y("Patches"),n.o=[],n.v=[],n.s=t)}function j(n){O(n),n.p.forEach(w),n.p=null}function O(n){n===J&&(J=n.l)}function x(n){return J={p:[],l:J,h:n,_:!0,m:0}}function w(n){var t=n[H];0===t.t||1===t.t?t.j():t.O=!0}function S(t,e){e.m=e.p.length;var i=e.p[0],u=void 0!==t&&t!==i;return e.h.S||y("ES5").P(e,t,u),u?(i[H].M&&(j(e),n(4)),r(t)&&(t=P(e,t),e.l||g(e,t)),e.o&&y("Patches").g(i[H].u,t,e.o,e.v)):t=P(e,i,[]),j(e),e.o&&e.s(e.o,e.v),t!==B?t:void 0}function P(n,t,r){if(h(t))return t;var i=t[H];if(!i)return e(t,(function(e,u){return M(n,i,t,e,u,r)}),!0),t;if(i.A!==n)return t;if(!i.M)return g(n,i.u,!0),i.u;if(!i.R){i.R=!0,i.A.m--;var u=4===i.t||5===i.t?i.i=p(i.k):i.i;e(3===i.t?new Set(u):u,(function(t,e){return M(n,i,u,t,e,r)})),g(n,u,!1),r&&n.o&&y("Patches").F(i,r,n.o,n.v)}return i.i}function M(n,e,i,o,a,c){if(t(a)){var v=P(n,a,c&&e&&3!==e.t&&!u(e.D,o)?c.concat(o):void 0);if(f(i,o,v),!t(v))return;n._=!1}if(r(a)&&!h(a)){if(!n.h.K&&n.m<1)return;P(n,a),e&&e.A.l||g(n,a)}}function g(n,t,r){void 0===r&&(r=!1),n.h.K&&n._&&l(t,r)}function A(n,t){var r=n[H];return(r?s(r):n)[t]}function z(n,t){if(t in n)for(var r=Object.getPrototypeOf(n);r;){var e=Object.getOwnPropertyDescriptor(r,t);if(e)return e;r=Object.getPrototypeOf(r)}}function E(n){n.M||(n.M=!0,n.l&&E(n.l))}function R(n){n.i||(n.i=p(n.u))}function k(n,t,r){var e=c(t)?y("MapSet").$(t,r):v(t)?y("MapSet").C(t,r):n.S?function(n,t){var r=Array.isArray(n),e={t:r?1:0,A:t?t.A:b(),M:!1,R:!1,D:{},l:t,u:n,k:null,i:null,j:null,I:!1},i=e,u=Y;r&&(i=[e],u=Z);var o=Proxy.revocable(i,u),f=o.revoke,a=o.proxy;return e.k=a,e.j=f,a}(t,r):y("ES5").J(t,r);return(r?r.A:b()).p.push(e),e}function F(u){return t(u)||n(22,u),function n(t){if(!r(t))return t;var u,a=t[H],c=i(t);if(a){if(!a.M&&(a.t<4||!y("ES5").N(a)))return a.u;a.R=!0,u=D(t,c),a.R=!1}else u=D(t,c);return e(u,(function(t,r){a&&o(a.u,t)===r||f(u,t,n(r))})),3===c?new Set(u):u}(u)}function D(n,t){switch(t){case 2:return new Map(n);case 3:return Array.from(n)}return p(n)}function K(){function n(n,t){var r=f[n];return r?r.enumerable=t:f[n]=r={configurable:!0,enumerable:t,get:function(){return Y.get(this[H],n)},set:function(t){Y.set(this[H],n,t)}},r}function r(n){for(var t=n.length-1;t>=0;t--){var r=n[t][H];if(!r.M)switch(r.t){case 5:o(r)&&E(r);break;case 4:i(r)&&E(r)}}}function i(n){for(var t=n.u,r=n.k,e=T(r),i=e.length-1;i>=0;i--){var o=e[i];if(o!==H){var f=t[o];if(void 0===f&&!u(t,o))return!0;var c=r[o],v=c&&c[H];if(v?v.u!==f:!a(c,f))return!0}}var s=!!t[H];return e.length!==T(t).length+(s?0:1)}function o(n){var t=n.k;if(t.length!==n.u.length)return!0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);if(r&&!r.get)return!0;for(var e=0;e<t.length;e++)if(!t.hasOwnProperty(e))return!0;return!1}var f={};_("ES5",{J:function(t,r){var e=Array.isArray(t),i=function(t,r){if(t){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,""+i,n(i,!0));return e}var u=U(r);delete u[H];for(var o=T(u),f=0;f<o.length;f++){var a=o[f];u[a]=n(a,t||!!u[a].enumerable)}return Object.create(Object.getPrototypeOf(r),u)}(e,t),u={t:e?5:4,A:r?r.A:b(),M:!1,R:!1,D:{},l:r,u:t,k:i,i:null,O:!1,I:!1};return Object.defineProperty(i,H,{value:u,writable:!0}),i},P:function(n,i,f){f?t(i)&&i[H].A===n&&r(n.p):(n.o&&function n(t){if(t&&"object"==typeof t){var r=t[H];if(r){var i=r.u,f=r.k,a=r.D,c=r.t;if(4===c)e(f,(function(t){t!==H&&(void 0!==i[t]||u(i,t)?a[t]||n(f[t]):(a[t]=!0,E(r)))})),e(i,(function(n){void 0!==f[n]||u(f,n)||(a[n]=!1,E(r))}));else if(5===c){if(o(r)&&(E(r),a.length=!0),f.length<i.length)for(var v=f.length;v<i.length;v++)a[v]=!1;else for(var s=i.length;s<f.length;s++)a[s]=!0;for(var p=Math.min(f.length,i.length),l=0;l<p;l++)f.hasOwnProperty(l)||(a[l]=!0),void 0===a[l]&&n(f[l])}}}}(n.p[0]),r(n.p))},N:function(n){return 4===n.t?i(n):o(n)}})}function $(){function f(n){if(!r(n))return n;if(Array.isArray(n))return n.map(f);if(c(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],f(n[1])]})));if(v(n))return new Set(Array.from(n).map(f));var t=Object.create(Object.getPrototypeOf(n));for(var e in n)t[e]=f(n[e]);return u(n,G)&&(t[G]=n[G]),t}function a(n){return t(n)?f(n):n}var s="add";_("Patches",{W:function(t,r){return r.forEach((function(r){for(var e=r.path,u=r.op,a=t,c=0;c<e.length-1;c++){var v=i(a),p=""+e[c];0!==v&&1!==v||"__proto__"!==p&&"constructor"!==p||n(24),"function"==typeof a&&"prototype"===p&&n(24),"object"!=typeof(a=o(a,p))&&n(15,e.join("/"))}var l=i(a),d=f(r.value),h=e[e.length-1];switch(u){case"replace":switch(l){case 2:return a.set(h,d);case 3:n(16);default:return a[h]=d}case s:switch(l){case 1:return"-"===h?a.push(d):a.splice(h,0,d);case 2:return a.set(h,d);case 3:return a.add(d);default:return a[h]=d}case"remove":switch(l){case 1:return a.splice(h,1);case 2:return a.delete(h);case 3:return a.delete(r.value);default:return delete a[h]}default:n(17,u)}})),t},F:function(n,t,r,i){switch(n.t){case 0:case 4:case 2:return function(n,t,r,i){var f=n.u,c=n.i;e(n.D,(function(n,e){var v=o(f,n),p=o(c,n),l=e?u(f,n)?"replace":s:"remove";if(v!==p||"replace"!==l){var d=t.concat(n);r.push("remove"===l?{op:l,path:d}:{op:l,path:d,value:p}),i.push(l===s?{op:"remove",path:d}:"remove"===l?{op:s,path:d,value:a(v)}:{op:"replace",path:d,value:a(v)})}}))}(n,t,r,i);case 5:case 1:return function(n,t,r,e){var i=n.u,u=n.D,o=n.i;if(o.length<i.length){var f=[o,i];i=f[0],o=f[1];var c=[e,r];r=c[0],e=c[1]}for(var v=0;v<i.length;v++)if(u[v]&&o[v]!==i[v]){var p=t.concat([v]);r.push({op:"replace",path:p,value:a(o[v])}),e.push({op:"replace",path:p,value:a(i[v])})}for(var l=i.length;l<o.length;l++){var d=t.concat([l]);r.push({op:s,path:d,value:a(o[l])})}i.length<o.length&&e.push({op:"replace",path:t.concat(["length"]),value:i.length})}(n,t,r,i);case 3:return function(n,t,r,e){var i=n.u,u=n.i,o=0;i.forEach((function(n){if(!u.has(n)){var i=t.concat([o]);r.push({op:"remove",path:i,value:n}),e.unshift({op:s,path:i,value:n})}o++})),o=0,u.forEach((function(n){if(!i.has(n)){var u=t.concat([o]);r.push({op:s,path:u,value:n}),e.unshift({op:"remove",path:u,value:n})}o++}))}(n,t,r,i)}},g:function(n,t,r,e){r.push({op:"replace",path:[],value:t===B?void 0:t}),e.push({op:"replace",path:[],value:n})}})}function C(){function t(n,t){function r(){this.constructor=n}f(n,t),n.prototype=(r.prototype=t.prototype,new r)}function i(n){n.i||(n.D=new Map,n.i=new Map(n.u))}function u(n){n.i||(n.i=new Set,n.u.forEach((function(t){if(r(t)){var e=k(n.A.h,t,n);n.p.set(t,e),n.i.add(e)}else n.i.add(t)})))}function o(t){t.O&&n(3,JSON.stringify(s(t)))}var f=function(n,t){return(f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r])})(n,t)},a=function(){function n(n,t){return this[H]={t:2,l:t,A:t?t.A:b(),M:!1,R:!1,i:void 0,D:void 0,u:n,k:this,I:!1,O:!1},this}t(n,Map);var u=n.prototype;return Object.defineProperty(u,"size",{get:function(){return s(this[H]).size}}),u.has=function(n){return s(this[H]).has(n)},u.set=function(n,t){var r=this[H];return o(r),s(r).has(n)&&s(r).get(n)===t||(i(r),E(r),r.D.set(n,!0),r.i.set(n,t),r.D.set(n,!0)),this},u.delete=function(n){if(!this.has(n))return!1;var t=this[H];return o(t),i(t),E(t),t.u.has(n)?t.D.set(n,!1):t.D.delete(n),t.i.delete(n),!0},u.clear=function(){var n=this[H];o(n),s(n).size&&(i(n),E(n),n.D=new Map,e(n.u,(function(t){n.D.set(t,!1)})),n.i.clear())},u.forEach=function(n,t){var r=this;s(this[H]).forEach((function(e,i){n.call(t,r.get(i),i,r)}))},u.get=function(n){var t=this[H];o(t);var e=s(t).get(n);if(t.R||!r(e))return e;if(e!==t.u.get(n))return e;var u=k(t.A.h,e,t);return i(t),t.i.set(n,u),u},u.keys=function(){return s(this[H]).keys()},u.values=function(){var n,t=this,r=this.keys();return(n={})[L]=function(){return t.values()},n.next=function(){var n=r.next();return n.done?n:{done:!1,value:t.get(n.value)}},n},u.entries=function(){var n,t=this,r=this.keys();return(n={})[L]=function(){return t.entries()},n.next=function(){var n=r.next();if(n.done)return n;var e=t.get(n.value);return{done:!1,value:[n.value,e]}},n},u[L]=function(){return this.entries()},n}(),c=function(){function n(n,t){return this[H]={t:3,l:t,A:t?t.A:b(),M:!1,R:!1,i:void 0,u:n,k:this,p:new Map,O:!1,I:!1},this}t(n,Set);var r=n.prototype;return Object.defineProperty(r,"size",{get:function(){return s(this[H]).size}}),r.has=function(n){var t=this[H];return o(t),t.i?!!t.i.has(n)||!(!t.p.has(n)||!t.i.has(t.p.get(n))):t.u.has(n)},r.add=function(n){var t=this[H];return o(t),this.has(n)||(u(t),E(t),t.i.add(n)),this},r.delete=function(n){if(!this.has(n))return!1;var t=this[H];return o(t),u(t),E(t),t.i.delete(n)||!!t.p.has(n)&&t.i.delete(t.p.get(n))},r.clear=function(){var n=this[H];o(n),s(n).size&&(u(n),E(n),n.i.clear())},r.values=function(){var n=this[H];return o(n),u(n),n.i.values()},r.entries=function(){var n=this[H];return o(n),u(n),n.i.entries()},r.keys=function(){return this.values()},r[L]=function(){return this.values()},r.forEach=function(n,t){for(var r=this.values(),e=r.next();!e.done;)n.call(t,e.value,e.value,this),e=r.next()},n}();_("MapSet",{$:function(n,t){return new a(n,t)},C:function(n,t){return new c(n,t)}})}var I;Object.defineProperty(exports,"__esModule",{value:!0});var J,N="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),W="undefined"!=typeof Map,X="undefined"!=typeof Set,q="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,B=N?Symbol.for("immer-nothing"):((I={})["immer-nothing"]=!0,I),G=N?Symbol.for("immer-draftable"):"__$immer_draftable",H=N?Symbol.for("immer-state"):"__$immer_state",L="undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator",Q=""+Object.prototype.constructor,T="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,U=Object.getOwnPropertyDescriptors||function(n){var t={};return T(n).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(n,r)})),t},V={},Y={get:function(n,t){if(t===H)return n;var e=s(n);if(!u(e,t))return function(n,t,r){var e,i=z(t,r);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,t);var i=e[t];return n.R||!r(i)?i:i===A(n.u,t)?(R(n),n.i[t]=k(n.A.h,i,n)):i},has:function(n,t){return t in s(n)},ownKeys:function(n){return Reflect.ownKeys(s(n))},set:function(n,t,r){var e=z(s(n),t);if(null==e?void 0:e.set)return e.set.call(n.k,r),!0;if(!n.M){var i=A(s(n),t),o=null==i?void 0:i[H];if(o&&o.u===r)return n.i[t]=r,n.D[t]=!1,!0;if(a(r,i)&&(void 0!==r||u(n.u,t)))return!0;R(n),E(n)}return n.i[t]===r&&"number"!=typeof r&&(void 0!==r||t in n.i)||(n.i[t]=r,n.D[t]=!0,!0)},deleteProperty:function(n,t){return void 0!==A(n.u,t)||t in n.u?(n.D[t]=!1,R(n),E(n)):delete n.D[t],n.i&&delete n.i[t],!0},getOwnPropertyDescriptor:function(n,t){var r=s(n),e=Reflect.getOwnPropertyDescriptor(r,t);return e?{writable:!0,configurable:1!==n.t||"length"!==t,enumerable:e.enumerable,value:r[t]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.u)},setPrototypeOf:function(){n(12)}},Z={};e(Y,(function(n,t){Z[n]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Z.deleteProperty=function(n,t){return Z.set.call(this,n,t,void 0)},Z.set=function(n,t,r){return Y.set.call(this,n[0],t,r,n[0])};var nn=function(){function e(t){var e=this;this.S=q,this.K=!0,this.produce=function(t,i,u){if("function"==typeof t&&"function"!=typeof i){var o=i;i=t;var f=e;return function(n){var t=this;void 0===n&&(n=o);for(var r=arguments.length,e=Array(r>1?r-1:0),u=1;u<r;u++)e[u-1]=arguments[u];return f.produce(n,(function(n){var r;return(r=i).call.apply(r,[t,n].concat(e))}))}}var a;if("function"!=typeof i&&n(6),void 0!==u&&"function"!=typeof u&&n(7),r(t)){var c=x(e),v=k(e,t,void 0),s=!0;try{a=i(v),s=!1}finally{s?j(c):O(c)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(n){return m(c,u),S(n,c)}),(function(n){throw j(c),n})):(m(c,u),S(a,c))}if(!t||"object"!=typeof t){if(void 0===(a=i(t))&&(a=t),a===B&&(a=void 0),e.K&&l(a,!0),u){var p=[],d=[];y("Patches").g(t,a,p,d),u(p,d)}return a}n(21,t)},this.produceWithPatches=function(n,t){if("function"==typeof n)return function(t){for(var r=arguments.length,i=Array(r>1?r-1:0),u=1;u<r;u++)i[u-1]=arguments[u];return e.produceWithPatches(t,(function(t){return n.apply(void 0,[t].concat(i))}))};var r,i,u=e.produce(n,t,(function(n,t){r=n,i=t}));return"undefined"!=typeof Promise&&u instanceof Promise?u.then((function(n){return[n,r,i]})):[u,r,i]},"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){r(e)||n(8),t(e)&&(e=F(e));var i=x(this),u=k(this,e,void 0);return u[H].I=!0,O(i),u},i.finishDraft=function(n,t){var r=(n&&n[H]).A;return m(r,t),S(void 0,r)},i.setAutoFreeze=function(n){this.K=n},i.setUseProxies=function(t){t&&!q&&n(20),this.S=t},i.applyPatches=function(n,r){var e;for(e=r.length-1;e>=0;e--){var i=r[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(r=r.slice(e+1));var u=y("Patches").W;return t(n)?u(n,r):this.produce(n,(function(n){return u(n,r)}))},e}(),tn=new nn,rn=tn.produce,en=tn.produceWithPatches.bind(tn),un=tn.setAutoFreeze.bind(tn),on=tn.setUseProxies.bind(tn),fn=tn.applyPatches.bind(tn),an=tn.createDraft.bind(tn),cn=tn.finishDraft.bind(tn);exports.Immer=nn,exports.applyPatches=fn,exports.castDraft=function(n){return n},exports.castImmutable=function(n){return n},exports.createDraft=an,exports.current=F,exports.default=rn,exports.enableAllPlugins=function(){K(),C(),$()},exports.enableES5=K,exports.enableMapSet=C,exports.enablePatches=$,exports.finishDraft=cn,exports.freeze=l,exports.immerable=G,exports.isDraft=t,exports.isDraftable=r,exports.nothing=B,exports.original=function(r){return t(r)||n(23,r),r[H].u},exports.produce=rn,exports.produceWithPatches=en,exports.setAutoFreeze=un,exports.setUseProxies=on},"./node_modules/immer/dist/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/immer/dist/immer.cjs.production.min.js")},"./node_modules/is-hotkey/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});for(var IS_MAC="undefined"!=typeof window&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),MODIFIERS={alt:"altKey",control:"ctrlKey",meta:"metaKey",shift:"shiftKey"},ALIASES={add:"+",break:"pause",cmd:"meta",command:"meta",ctl:"control",ctrl:"control",del:"delete",down:"arrowdown",esc:"escape",ins:"insert",left:"arrowleft",mod:IS_MAC?"meta":"control",opt:"alt",option:"alt",return:"enter",right:"arrowright",space:" ",spacebar:" ",up:"arrowup",win:"meta",windows:"meta"},CODES={backspace:8,tab:9,enter:13,shift:16,control:17,alt:18,pause:19,capslock:20,escape:27," ":32,pageup:33,pagedown:34,end:35,home:36,arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,insert:45,delete:46,meta:91,numlock:144,scrolllock:145,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},f=1;f<20;f++)CODES["f"+f]=111+f;function isHotkey(hotkey,options,event){options&&!("byKey"in options)&&(event=options,options=null),Array.isArray(hotkey)||(hotkey=[hotkey]);var array=hotkey.map((function(string){return parseHotkey(string,options)})),check=function check(e){return array.some((function(object){return compareHotkey(object,e)}))};return null==event?check:check(event)}function parseHotkey(hotkey,options){var byKey=options&&options.byKey,ret={},values=(hotkey=hotkey.replace("++","+add")).split("+"),length=values.length;for(var k in MODIFIERS)ret[MODIFIERS[k]]=!1;var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=values[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var value=_step.value,optional=value.endsWith("?")&&value.length>1;optional&&(value=value.slice(0,-1));var name=toKeyName(value),modifier=MODIFIERS[name];1!==length&&modifier||(byKey?ret.key=name:ret.which=toKeyCode(value)),modifier&&(ret[modifier]=!optional||null)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator.return&&_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}return ret}function compareHotkey(object,event){for(var key in object){var expected=object[key],actual=void 0;if(null!=expected&&((null!=(actual="key"===key&&null!=event.key?event.key.toLowerCase():"which"===key?91===expected&&93===event.which?91:event.which:event[key])||!1!==expected)&&actual!==expected))return!1}return!0}function toKeyCode(name){return name=toKeyName(name),CODES[name]||name.toUpperCase().charCodeAt(0)}function toKeyName(name){return name=name.toLowerCase(),name=ALIASES[name]||name}exports.default=isHotkey,exports.isHotkey=isHotkey,exports.isCodeHotkey=function isCodeHotkey(hotkey,event){return isHotkey(hotkey,event)},exports.isKeyHotkey=function isKeyHotkey(hotkey,event){return isHotkey(hotkey,{byKey:!0},event)},exports.parseHotkey=parseHotkey,exports.compareHotkey=compareHotkey,exports.toKeyCode=toKeyCode,exports.toKeyName=toKeyName},"./node_modules/lodash/throttle.js":(module,__unused_webpack_exports,__webpack_require__)=>{var debounce=__webpack_require__("./node_modules/lodash/debounce.js"),isObject=__webpack_require__("./node_modules/lodash/isObject.js");module.exports=function throttle(func,wait,options){var leading=!0,trailing=!0;if("function"!=typeof func)throw new TypeError("Expected a function");return isObject(options)&&(leading="leading"in options?!!options.leading:leading,trailing="trailing"in options?!!options.trailing:trailing),debounce(func,wait,{leading,maxWait:wait,trailing})}},"./node_modules/react-portal/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Portal:()=>PortalCompat,PortalWithState:()=>es_PortalWithState});var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var Portal=function(_React$Component){function Portal(){return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),_createClass(Portal,[{key:"componentWillUnmount",value:function componentWillUnmount(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function render(){return canUseDOM?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),react_dom.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),Portal}(react.Component);Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const es_Portal=Portal;var LegacyPortal_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var LegacyPortal_Portal=function(_React$Component){function Portal(){return function LegacyPortal_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function LegacyPortal_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function LegacyPortal_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),LegacyPortal_createClass(Portal,[{key:"componentDidMount",value:function componentDidMount(){this.renderPortal()}},{key:"componentDidUpdate",value:function componentDidUpdate(props){this.renderPortal()}},{key:"componentWillUnmount",value:function componentWillUnmount(){react_dom.unmountComponentAtNode(this.defaultNode||this.props.node),this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null,this.portal=null}},{key:"renderPortal",value:function renderPortal(props){this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode));var children=this.props.children;"function"==typeof this.props.children.type&&(children=react.cloneElement(this.props.children)),this.portal=react_dom.unstable_renderSubtreeIntoContainer(this,children,this.props.node||this.defaultNode)}},{key:"render",value:function render(){return null}}]),Portal}(react.Component);const LegacyPortal=LegacyPortal_Portal;LegacyPortal_Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const PortalCompat=react_dom.createPortal?es_Portal:LegacyPortal;var PortalWithState_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var KEYCODES_ESCAPE=27,PortalWithState=function(_React$Component){function PortalWithState(props){!function PortalWithState_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,PortalWithState);var _this=function PortalWithState_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(PortalWithState.__proto__||Object.getPrototypeOf(PortalWithState)).call(this,props));return _this.portalNode=null,_this.state={active:!!props.defaultOpen},_this.openPortal=_this.openPortal.bind(_this),_this.closePortal=_this.closePortal.bind(_this),_this.wrapWithPortal=_this.wrapWithPortal.bind(_this),_this.handleOutsideMouseClick=_this.handleOutsideMouseClick.bind(_this),_this.handleKeydown=_this.handleKeydown.bind(_this),_this}return function PortalWithState_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(PortalWithState,_React$Component),PortalWithState_createClass(PortalWithState,[{key:"componentDidMount",value:function componentDidMount(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.addEventListener("click",this.handleOutsideMouseClick)}},{key:"componentWillUnmount",value:function componentWillUnmount(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.removeEventListener("click",this.handleOutsideMouseClick)}},{key:"openPortal",value:function openPortal(e){this.state.active||(e&&e.nativeEvent&&e.nativeEvent.stopImmediatePropagation(),this.setState({active:!0},this.props.onOpen))}},{key:"closePortal",value:function closePortal(){this.state.active&&this.setState({active:!1},this.props.onClose)}},{key:"wrapWithPortal",value:function wrapWithPortal(children){var _this2=this;return this.state.active?react.createElement(PortalCompat,{node:this.props.node,key:"react-portal",ref:function ref(portalNode){return _this2.portalNode=portalNode}},children):null}},{key:"handleOutsideMouseClick",value:function handleOutsideMouseClick(e){if(this.state.active){var root=this.portalNode&&(this.portalNode.props.node||this.portalNode.defaultNode);!root||root.contains(e.target)||e.button&&0!==e.button||this.closePortal()}}},{key:"handleKeydown",value:function handleKeydown(e){e.keyCode===KEYCODES_ESCAPE&&this.state.active&&this.closePortal()}},{key:"render",value:function render(){return this.props.children({openPortal:this.openPortal,closePortal:this.closePortal,portal:this.wrapWithPortal,isOpen:this.state.active})}}]),PortalWithState}(react.Component);PortalWithState.propTypes={children:prop_types_default().func.isRequired,defaultOpen:prop_types_default().bool,node:prop_types_default().any,closeOnEsc:prop_types_default().bool,closeOnOutsideClick:prop_types_default().bool,onOpen:prop_types_default().func,onClose:prop_types_default().func},PortalWithState.defaultProps={onOpen:function onOpen(){},onClose:function onClose(){}};const es_PortalWithState=PortalWithState},"./node_modules/scroll-into-view-if-needed/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function t(t){return"object"==typeof t&&null!=t&&1===t.nodeType}function e(t,e){return(!e||"hidden"!==t)&&"visible"!==t&&"clip"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return!1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}function index_module(e,i){var o=window,l=i.scrollMode,d=i.block,u=i.inline,h=i.boundary,a=i.skipOverflowHiddenElements,c="function"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError("Invalid target");for(var f=document.scrollingElement||document.documentElement,s=[],p=e;t(p)&&c(p);){if((p=p.parentElement)===f){s.push(p);break}null!=p&&p===document.body&&n(p)&&!n(document.documentElement)||null!=p&&n(p,a)&&s.push(p)}for(var m=o.visualViewport?o.visualViewport.width:innerWidth,g=o.visualViewport?o.visualViewport.height:innerHeight,w=window.scrollX||pageXOffset,v=window.scrollY||pageYOffset,W=e.getBoundingClientRect(),b=W.height,H=W.width,y=W.top,E=W.right,M=W.bottom,V=W.left,x="start"===d||"nearest"===d?y:"end"===d?M:y+b/2,I="center"===u?V+H/2:"end"===u?E:V,C=[],T=0;T<s.length;T++){var k=s[T],B=k.getBoundingClientRect(),D=B.height,O=B.width,R=B.top,X=B.right,Y=B.bottom,L=B.left;if("if-needed"===l&&y>=0&&V>=0&&M<=g&&E<=m&&y>=R&&M<=Y&&V>=L&&E<=X)return C;var S=getComputedStyle(k),j=parseInt(S.borderLeftWidth,10),q=parseInt(S.borderTopWidth,10),z=parseInt(S.borderRightWidth,10),A=parseInt(S.borderBottomWidth,10),F=0,G=0,J="offsetWidth"in k?k.offsetWidth-k.clientWidth-j-z:0,K="offsetHeight"in k?k.offsetHeight-k.clientHeight-q-A:0;if(f===k)F="start"===d?x:"end"===d?x-g:"nearest"===d?r(v,v+g,g,q,A,v+x,v+x+b,b):x-g/2,G="start"===u?I:"center"===u?I-m/2:"end"===u?I-m:r(w,w+m,m,j,z,w+I,w+I+H,H),F=Math.max(0,F+v),G=Math.max(0,G+w);else{F="start"===d?x-R-q:"end"===d?x-Y+A+K:"nearest"===d?r(R,Y,D,q,A+K,x,x+b,b):x-(R+D/2)+K/2,G="start"===u?I-L-j:"center"===u?I-(L+O/2)+J/2:"end"===u?I-X+z+J:r(L,X,O,j,z+J,I,I+H,H);var N=k.scrollLeft,P=k.scrollTop;x+=P-(F=Math.max(0,Math.min(P+F,k.scrollHeight-D+K))),I+=N-(G=Math.max(0,Math.min(N+G,k.scrollWidth-O+J)))}C.push({el:k,top:F,left:G})}return C}function isOptionsObject(options){return options===Object(options)&&0!==Object.keys(options).length}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>es});const es=function scrollIntoView(target,options){var isTargetAttached=target.isConnected||target.ownerDocument.documentElement.contains(target);if(isOptionsObject(options)&&"function"==typeof options.behavior)return options.behavior(isTargetAttached?index_module(target,options):[]);if(isTargetAttached){var computeOptions=function getOptions(options){return!1===options?{block:"end",inline:"nearest"}:isOptionsObject(options)?options:{block:"start",inline:"nearest"}}(options);return function defaultBehavior(actions,behavior){void 0===behavior&&(behavior="auto");var canSmoothScroll="scrollBehavior"in document.body.style;actions.forEach((function(_ref){var el=_ref.el,top=_ref.top,left=_ref.left;el.scroll&&canSmoothScroll?el.scroll({top,left,behavior}):(el.scrollTop=top,el.scrollLeft=left)}))}(index_module(target,computeOptions),computeOptions.behavior)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,