/*! For license information please see templates-progress-ProgressLessonContent-story.5cb85d03.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8523],{"./.storybook/decorators.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{reduxStore:()=>reduxStore});var redux__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/redux/es/redux.js"),_cdo_apps_code_studio_isRtlRedux__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/code-studio/isRtlRedux.js"),_cdo_apps_code_studio_responsiveRedux__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/code-studio/responsiveRedux.js"),redux_thunk__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/redux-thunk/lib/index.js");const reduxStore=(reducers={},state={})=>(0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)((0,redux__WEBPACK_IMPORTED_MODULE_3__.combineReducers)({isRtl:_cdo_apps_code_studio_isRtlRedux__WEBPACK_IMPORTED_MODULE_0__.default,responsive:_cdo_apps_code_studio_responsiveRedux__WEBPACK_IMPORTED_MODULE_1__.default,...reducers}),state,(0,redux__WEBPACK_IMPORTED_MODULE_3__.applyMiddleware)(redux_thunk__WEBPACK_IMPORTED_MODULE_2__.default))},"./src/code-studio/isRtlRedux.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function locale(){var state=arguments.length>0&&void 0!==arguments[0]&&arguments[0],action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RTL)return action.isRtl;return state},exports.isRtlFromDOM=isRtlFromDOM,exports.setRtlFromDOM=exports.setRtl=void 0;var SET_RTL="isRtl/SET_RTL",setRtl=function setRtl(isRtl){return{type:SET_RTL,isRtl}};exports.setRtl=setRtl;function isRtlFromDOM(){var head=document.getElementsByTagName("head")[0];if(head&&head.parentElement){var dir=head.parentElement.getAttribute("dir");return!(!dir||"rtl"!==dir.toLowerCase())}return!1}exports.setRtlFromDOM=function setRtlFromDOM(){return setRtl(isRtlFromDOM())}},"./src/code-studio/progressReduxSelectors.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.progressionsFromLevels=exports.nextLevelId=exports.levelsForLessonId=exports.levelsByLesson=exports.levelCount=exports.lessons=exports.lessonExtrasUrl=exports.isPerfect=exports.hasLockableLessons=exports.hasGroups=exports.groupedLessons=exports.getProgressLevelType=exports.getLevelPropertiesPath=exports.currentLevelIndex=exports.__testonly__=exports.ProgressLevelType=void 0;var _lodash=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/lodash/lodash.js")),_sharedConstants=__webpack_require__("./src/util/sharedConstants.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_constants=__webpack_require__("./src/constants.js"),_activityUtils=__webpack_require__("./src/code-studio/activityUtils.js");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.hasLockableLessons=function hasLockableLessons(state){return state.lessons.some((function(lesson){return lesson.lockable}))};exports.hasGroups=function hasGroups(state){return Object.keys(groupedLessons(state)).length>1};var lessonFromLessonAtIndex=function lessonFromLessonAtIndex(state,lessonIndex){return _objectSpread(_objectSpread({},lessonFromLesson(state.lessons[lessonIndex])),{},{isFocusArea:state.focusAreaLessonIds.includes(state.lessons[lessonIndex].id)})},lessonFromLesson=function lessonFromLesson(lesson){return _lodash.default.pick(lesson,["name","id","lockable","lessonNumber","lessonStartUrl","lesson_plan_html_url","lesson_feedback_url","student_lesson_plan_html_url","description_student","description_teacher"])};exports.lessons=function lessons(state){return state.lessons.map((function(_,index){return lessonFromLessonAtIndex(state,index)}))};var peerReviewLesson=function peerReviewLesson(state){return _objectSpread(_objectSpread({},lessonFromLesson(state.peerReviewLessonInfo)),{},{id:-1,lockable:!1,isFocusArea:!1})},peerReviewLevels=function peerReviewLevels(state){return state.peerReviewLessonInfo.levels.map((function(level,index){return _objectSpread(_objectSpread({},level),{},{id:(-1).toString(),isLocked:level.locked,status:level.status||_sharedConstants.LevelStatus.not_tried,levelNumber:index+1})}))},ProgressLevelType={SCRIPT_LEVEL:"script_level",LEVEL:"level"};exports.ProgressLevelType=ProgressLevelType;var getProgressLevelType=function getProgressLevelType(state){return state.progress.lessons?ProgressLevelType.SCRIPT_LEVEL:state.progress.currentLevelId?ProgressLevelType.LEVEL:void 0};exports.getProgressLevelType=getProgressLevelType;exports.getLevelPropertiesPath=function getLevelPropertiesPath(state){if(state.progress.lessons){var _state$progress$lesso,scriptName=state.progress.scriptName,lessonPosition=null===(_state$progress$lesso=state.progress.lessons)||void 0===_state$progress$lesso?void 0:_state$progress$lesso.find((function(lesson){return lesson.id===state.progress.currentLessonId})).relative_position,levelNumber=levelsForLessonId(state.progress,state.progress.currentLessonId).findIndex((function(level){return level.isCurrentLevel}))+1;return"/s/".concat(scriptName,"/lessons/").concat(lessonPosition,"/levels/").concat(levelNumber,"/level_properties")}if(null!==state.progress.currentLevelId){var levelId=state.progress.currentLevelId;return"/levels/".concat(levelId,"/level_properties")}};var levelWithProgress=function levelWithProgress(_ref,level,isLockable){var _levelProgress,_level$ids,levelResults=_ref.levelResults,unitProgress=_ref.unitProgress,_ref$levelPairing=_ref.levelPairing,levelPairing=void 0===_ref$levelPairing?{}:_ref$levelPairing,currentLevelId=_ref.currentLevelId,normalizedLevel=(0,_progressHelpers.processedLevel)(level);level.ids&&(normalizedLevel.id=function bestResultLevelId(levelIds,progressData){if(1===levelIds.length)return levelIds[0];var attemptedIds=levelIds.filter((function(id){return progressData[id]}));if(0===attemptedIds.length)return levelIds[0];var bestId=attemptedIds[0],bestResult=progressData[bestId];return attemptedIds.forEach((function(id){var result=progressData[id];result>bestResult&&(bestId=id,bestResult=result)})),bestId}(level.ids,levelResults));var status=_sharedConstants.LevelStatus.not_tried,locked=isLockable,teacherFeedbackReviewState=null,levelProgress=unitProgress[normalizedLevel.id];null!==(_levelProgress=levelProgress)&&void 0!==_levelProgress&&_levelProgress.pages&&(levelProgress=levelProgress.pages[normalizedLevel.pageNumber-1]),levelProgress?(status=levelProgress.status,locked=levelProgress.locked,teacherFeedbackReviewState=levelProgress.teacherFeedbackReviewState):level.kind!==_sharedConstants.LevelKind.assessment&&(status=(0,_activityUtils.activityCssClass)(levelResults[normalizedLevel.id]));var isCurrent=normalizedLevel.id===currentLevelId||!(null===(_level$ids=level.ids)||void 0===_level$ids||!_level$ids.includes[currentLevelId]);return _objectSpread(_objectSpread({},normalizedLevel),{},{status,isCurrentLevel:isCurrent,paired:levelPairing[level.activeId],isLocked:locked,teacherFeedbackReviewState})},levelsByLesson=function levelsByLesson(_ref2){var lessons=_ref2.lessons,levelResults=_ref2.levelResults,unitProgress=_ref2.unitProgress,levelPairing=_ref2.levelPairing,currentLevelId=_ref2.currentLevelId;return lessons.map((function(lesson){return lesson.levels.map((function(level){var statusLevel=levelWithProgress({levelResults,unitProgress,levelPairing,currentLevelId},level,lesson.lockable);return statusLevel.sublevels&&(statusLevel.sublevels=level.sublevels.map((function(sublevel){return levelWithProgress({levelResults,unitProgress,levelPairing,currentLevelId},sublevel,lesson.lockable)}))),statusLevel}))}))};exports.levelsByLesson=levelsByLesson;var levelsForLessonId=function levelsForLessonId(state,lessonId){var _state$lessons,lesson=null===(_state$lessons=state.lessons)||void 0===_state$lessons?void 0:_state$lessons.find((function(lesson){return lesson.id===lessonId}));return null==lesson?void 0:lesson.levels.map((function(level){return levelWithProgress(state,level,lesson.lockable)}))};exports.levelsForLessonId=levelsForLessonId;exports.currentLevelIndex=function currentLevelIndex(state){return getProgressLevelType(state)===ProgressLevelType.LEVEL?0:getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL?levelsForLessonId(state.progress,state.progress.currentLessonId).findIndex((function(level){return level.isCurrentLevel})):void 0};exports.nextLevelId=function nextLevelId(state){if(getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL){var levels=levelsForLessonId(state.progress,state.progress.currentLessonId),currentLevelIndex=levels.findIndex((function(level){return level.isCurrentLevel}));if(currentLevelIndex!==levels.length-1)return levels[currentLevelIndex+1].id}};exports.levelCount=function levelCount(state){return getProgressLevelType(state)===ProgressLevelType.LEVEL?1:getProgressLevelType(state)===ProgressLevelType.SCRIPT_LEVEL?levelsForLessonId(state.progress,state.progress.currentLessonId).length:0};exports.lessonExtrasUrl=function lessonExtrasUrl(state,lessonId){return state.lessonExtrasEnabled?state.lessons.find((function(lesson){return lesson.id===lessonId})).lesson_extras_level_url:""};exports.isPerfect=function isPerfect(state,levelId){return!!state.levelResults&&state.levelResults[levelId]>=_constants.TestResults.MINIMUM_OPTIMAL_RESULT};var groupedLessons=function groupedLessons(state){var includeBonusLevels=arguments.length>1&&void 0!==arguments[1]&&arguments[1],byGroup={},allLevels=levelsByLesson(state);return state.lessonGroups.forEach((function(lessonGroup){byGroup[lessonGroup.display_name]={lessonGroup:{id:lessonGroup.id,userFacing:lessonGroup.user_facing,displayName:lessonGroup.display_name,description:lessonGroup.description,bigQuestions:lessonGroup.big_questions},lessons:[],levelsByLesson:[]}})),state.lessons.forEach((function(lesson,index){var group=lesson.lesson_group_display_name,lessonAtIndex=lessonFromLessonAtIndex(state,index),lessonLevels=allLevels[index];includeBonusLevels||(lessonLevels=lessonLevels.filter((function(level){return!level.bonus}))),byGroup[group]&&(byGroup[group].lessons.push(lessonAtIndex),byGroup[group].levelsByLesson.push(lessonLevels))})),state.peerReviewLessonInfo&&(byGroup[state.peerReviewLessonInfo.lesson_group_display_name]={group:state.peerReviewLessonInfo.lesson_group_display_name,lessonGroup:{id:null,displayName:state.peerReviewLessonInfo.lesson_group_display_name,description:null,bigQuestions:null},lessons:[peerReviewLesson(state)],levelsByLesson:[peerReviewLevels(state)]}),_lodash.default.values(byGroup)};exports.groupedLessons=groupedLessons;exports.progressionsFromLevels=function progressionsFromLevels(levels){var progressions=[];if(0===levels.length)return progressions;var currentProgression={start:0,name:levels[0].progression||levels[0].name,displayName:levels[0].progressionDisplayName||levels[0].name,levels:[levels[0]]};return levels.slice(1).forEach((function(level,index){(level.progression||level.name)===currentProgression.name?currentProgression.levels.push(level):(progressions.push(currentProgression),currentProgression={start:index+1,name:level.progression||level.name,displayName:level.progressionDisplayName||level.name,levels:[level]})})),progressions.push(currentProgression),progressions};var __testonly__={};exports.__testonly__=__testonly__},"./src/code-studio/responsiveRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ResponsiveSize=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_RESPONSIVE_SIZE&&state.responsiveSize!==action.responsiveSize)return _objectSpread(_objectSpread({},state),{},{responsiveSize:action.responsiveSize});return state},exports.getResponsiveBreakpoint=getResponsiveBreakpoint,exports.setResponsiveSize=void 0;var _utils=__webpack_require__("./src/utils.js");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_RESPONSIVE_SIZE="responsive/SET_RESPONSIVE_SIZE";exports.setResponsiveSize=function setResponsiveSize(responsiveSize){return{type:SET_RESPONSIVE_SIZE,responsiveSize}};var ResponsiveSize=(0,_utils.makeEnum)("lg","md","sm","xs");exports.ResponsiveSize=ResponsiveSize;var Breakpoints=[{breakpoint:992,responsiveSize:ResponsiveSize.lg},{breakpoint:720,responsiveSize:ResponsiveSize.md},{breakpoint:650,responsiveSize:ResponsiveSize.sm},{breakpoint:0,responsiveSize:ResponsiveSize.xs}];function getResponsiveBreakpoint(width){return Breakpoints.find((function(_ref){var breakpoint=_ref.breakpoint;return width>breakpoint})).responsiveSize}var initialState={responsiveSize:getResponsiveBreakpoint(window.innerWidth)}},"./src/templates/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/SafeMarkdown.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_redactableMarkdown=_interopRequireDefault(__webpack_require__("./node_modules/@code-dot-org/redactable-markdown/dist/main.js")),_remarkPlugins=__webpack_require__("./node_modules/@code-dot-org/remark-plugins/src/index.js"),_remarkRehype=_interopRequireDefault(__webpack_require__("./node_modules/remark-rehype/index.js")),_rehypeRaw=_interopRequireDefault(__webpack_require__("./node_modules/rehype-raw/index.js")),_rehypeSanitize=_interopRequireDefault(__webpack_require__("./node_modules/rehype-sanitize/index.js")),_rehypeReact=_interopRequireDefault(__webpack_require__("./node_modules/rehype-react/index.js")),_github=_interopRequireDefault(__webpack_require__("./node_modules/hast-util-sanitize/lib/github.json")),_externalLinks=_interopRequireDefault(__webpack_require__("./src/templates/plugins/externalLinks.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var SafeMarkdown=function(_React$Component){function SafeMarkdown(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(SafeMarkdown,_React$Component),SafeMarkdown.prototype.render=function render(){var rendered=(this.props.openExternalLinksInNewTab?markdownToReactExternalLinks:markdownToReact).processSync(this.props.markdown).contents,markdownProps={};return this.props.className&&(markdownProps.className=this.props.className),rendered&&"div"===rendered.type&&!Object.keys(markdownProps).length?rendered:_react.default.createElement("div",markdownProps,rendered)},SafeMarkdown}(_react.default.Component);!function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(SafeMarkdown,"propTypes",{markdown:_propTypes.default.string.isRequired,openExternalLinksInNewTab:_propTypes.default.bool,className:_propTypes.default.string});var schema=Object.assign({},_github.default);schema.attributes.img.push("height","width"),schema.tagNames.push("span"),schema.attributes.span=["dataUrl","className"],schema.attributes["*"].push("style","className"),schema.attributes.b=["dataId"],schema.clobber=[];var blocklyTags=["block","functional_input","mutation","next","statement","title","field","value","xml"];schema.tagNames=schema.tagNames.concat(blocklyTags);var blocklyComponentWrappers={};blocklyTags.forEach((function(tag){schema.attributes[tag]=["block_text","id","inline","name","type"],blocklyComponentWrappers[tag]=function(props){var BlocklyElement=tag;return _react.default.createElement(BlocklyElement,_extends({is:tag},props))}}));var markdownToReact=_redactableMarkdown.default.create().getParser().use([_remarkPlugins.clickableText,_remarkPlugins.expandableImages,_remarkPlugins.visualCodeBlock,_remarkPlugins.xmlAsTopLevelBlock,_remarkPlugins.details]).use(_remarkRehype.default,{allowDangerousHTML:!0}).use(_rehypeRaw.default).use(_rehypeSanitize.default,schema).use(_rehypeReact.default,{createElement:_react.default.createElement,components:blocklyComponentWrappers}),markdownToReactExternalLinks=markdownToReact().use(_externalLinks.default,{links:"all"}),_default=SafeMarkdown;exports.default=_default,module.exports=exports.default},"./src/templates/plugins/externalLinks.js":(__unused_webpack_module,exports)=>{"use strict";function isExternalLink(url){return!/https?:\/\/([^.]+\.)*code.org(:[0-9]+)?\//.test(function fullyQualified(path){return(a=a||document.createElement("a")).href=path,a.href}(url))}var a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function externalLinks(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},tokenizers=this.Parser.prototype.inlineTokenizers,original=tokenizers.link,all="all"===options.links;tokenizers.link=function(eat,value,silent){var link=original.call(this,eat,value,silent);if(link&&"link"===link.type&&(all||isExternalLink(link.url))){link.data=link.data||{},link.data.hProperties=link.data.hProperties||{};var props=link.data.hProperties;props.target=props.target||"_blank",props.rel="noreferrer noopener"}return link},tokenizers.link.locator=original.locator},exports.isExternalLink=isExternalLink},"./src/templates/progress/ProgressBubble.jsx":(module,exports,__webpack_require__)=>{"use strict";function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==_typeof(obj)&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressBubble=function(_React$Component){function ProgressBubble(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this),"onClickLevel",(function(){_this.props.onClick&&_this.props.onClick(_this.props.level)})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBubble,_React$Component);var _proto=ProgressBubble.prototype;return _proto.isClickable=function isClickable(){var _this$props=this.props,disabled=_this$props.disabled,level=_this$props.level,onClick=_this$props.onClick;return!(disabled||!level.url&&!onClick)},_proto.getUrl=function getUrl(){var _this$props2=this.props,onClick=_this$props2.onClick,level=_this$props2.level,selectedSectionId=_this$props2.selectedSectionId,selectedStudentId=_this$props2.selectedStudentId;return onClick?null:(0,_BubbleFactory.getBubbleUrl)(level.url,selectedStudentId,selectedSectionId,!0)},_proto.renderBubbleBadge=function renderBubbleBadge(bubbleShape,bubbleSize){var _this$props3=this.props,level=_this$props3.level,smallBubble=_this$props3.smallBubble,hideAssessmentBadge=_this$props3.hideAssessmentBadge,hasKeepWorkingFeedback=level.teacherFeedbackReviewState===_types.ReviewStates.keepWorking;if(((0,_progressHelpers.isLevelAssessment)(level)&&!hideAssessmentBadge||hasKeepWorkingFeedback)&&!smallBubble)return _react.default.createElement(_BubbleBadge.default,{badgeType:hasKeepWorkingFeedback?_BubbleBadge.BadgeType.keepWorking:_BubbleBadge.BadgeType.assessment,bubbleSize,bubbleShape})},_proto.createBubbleElement=function createBubbleElement(){var _this$props4=this.props,level=_this$props4.level,smallBubble=_this$props4.smallBubble,hideToolTips=_this$props4.hideToolTips,bubbleSize=smallBubble?_BubbleFactory.BubbleSize.dot:_BubbleFactory.BubbleSize.full,content=(0,_BubbleFactory.getBubbleContent)(level.isLocked,level.isUnplugged,level.bonus,level.paired,level.bubbleText||level.letter||level.levelNumber,bubbleSize),bubbleShape=(0,_BubbleFactory.getBubbleShape)(level.isUnplugged&&!smallBubble,level.isConceptLevel),bubble=_react.default.createElement(_BubbleFactory.BasicBubble,{shape:bubbleShape,size:bubbleSize,progressStyle:(0,_progressStyles.levelProgressStyle)(level.status,level.kind),classNames:(0,_BubbleFactory.getBubbleClassNames)(this.isClickable())},content,this.renderBubbleBadge(bubbleShape,bubbleSize));return hideToolTips?bubble:_react.default.createElement(_BubbleFactory.BubbleTooltip,{level},bubble)},_proto.render=function render(){var level=this.props.level,levelID=level.bubbleText||level.letter||level.levelNumber,lessonName=this.props.lessonName,description=_locale.default.progressBubbleDescription({levelID});return lessonName&&(description=_locale.default.progressBubbleDescriptionWithLesson({levelID,lessonName})),this.isClickable()?_react.default.createElement(_BubbleFactory.BubbleLink,{url:this.getUrl(),onClick:this.onClickLevel,a11y_description:description},this.createBubbleElement()):this.createBubbleElement()},ProgressBubble}(_react.default.Component);exports.default=ProgressBubble,_defineProperty(ProgressBubble,"propTypes",{level:_progressTypes.levelWithProgressType.isRequired,disabled:_propTypes.default.bool.isRequired,smallBubble:_propTypes.default.bool,selectedSectionId:_propTypes.default.number,selectedStudentId:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),hideToolTips:_propTypes.default.bool,onClick:_propTypes.default.func,hideAssessmentBadge:_propTypes.default.bool,lessonName:_propTypes.default.string}),module.exports=exports.default},"./src/templates/progress/ProgressBubbleSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressBubbleSet=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_ProgressBubble=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubble.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressBubbleSet=function(_React$Component){function ProgressBubbleSet(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this),"renderBubble",(function(level,index,isSublevel){var _this$props=_this.props,levels=_this$props.levels,selectedSectionId=_this$props.selectedSectionId,selectedStudentId=_this$props.selectedStudentId,isRtl=_this$props.isRtl,backgroundFirstStyle=isRtl?styles.backgroundLast:styles.backgroundFirst,backgroundLastStyle=isRtl?styles.backgroundFirst:styles.backgroundLast,backgroundStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.background),level.isConceptLevel&&styles.backgroundDiamond),isSublevel&&styles.backgroundSublevel),level.isUnplugged&&styles.backgroundPill),!isSublevel&&0===index&&backgroundFirstStyle),!isSublevel&&!level.sublevels&&index===levels.length-1&&backgroundLastStyle),containerStyleProp=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},styles.container),level.isUnplugged&&styles.pillContainer),level.isConceptLevel&&styles.diamondContainer),isSublevel&&styles.containerSublevel);return _react.default.createElement("div",{style:styles.withBackground,key:index},_react.default.createElement("div",{style:backgroundStyleProp}),_react.default.createElement("div",{style:containerStyleProp},_react.default.createElement(_ProgressBubble.default,{level,disabled:_this.props.disabled,smallBubble:isSublevel,selectedSectionId,selectedStudentId,hideToolTips:_this.props.hideToolTips,onClick:_this.props.onBubbleClick,lessonName:_this.props.lessonName})))})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressBubbleSet,_React$Component),ProgressBubbleSet.prototype.render=function render(){var _this2=this,_this$props2=this.props,levels=_this$props2.levels,style=_this$props2.style,showSublevels=_this$props2.showSublevels;return _react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.main),style)},levels.map((function(level,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(level,index,!1),showSublevels&&level.sublevels&&level.sublevels.map((function(sublevel,index){return _react.default.createElement("span",{key:index},_this2.renderBubble(sublevel,index,!0))})))})))},ProgressBubbleSet}(_react.default.Component);_defineProperty(ProgressBubbleSet,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,style:_propTypes.default.object,selectedSectionId:_propTypes.default.number,selectedStudentId:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),hideToolTips:_propTypes.default.bool,lessonExtrasEnabled:_propTypes.default.bool,showSublevels:_propTypes.default.bool,onBubbleClick:_propTypes.default.func,lessonName:_propTypes.default.string,isRtl:_propTypes.default.bool});var styles={main:{position:"relative",display:"inline-block"},withBackground:{display:"inline-block",position:"relative"},background:{height:10,backgroundColor:_color.default.lighter_gray,position:"absolute",left:0,right:0,top:(_progressStyles.DOT_SIZE+4+6-10)/2},backgroundDiamond:{top:(_progressStyles.DIAMOND_DOT_SIZE+4+12-10)/2},backgroundPill:{top:15},backgroundSublevel:{top:9},backgroundFirst:{left:15},backgroundLast:{right:15},container:{position:"relative"},containerSublevel:{top:5},diamondContainer:{height:36},pillContainer:{marginRight:2,height:37}},UnconnectedProgressBubbleSet=ProgressBubbleSet;exports.UnconnectedProgressBubbleSet=UnconnectedProgressBubbleSet;var _default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressBubbleSet));exports.default=_default},"./src/templates/progress/ProgressLessonContent.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ProgressLevelSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLevelSet.jsx")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_progressReduxSelectors=__webpack_require__("./src/code-studio/progressReduxSelectors.js"),_SafeMarkdown=_interopRequireDefault(__webpack_require__("./src/templates/SafeMarkdown.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLessonContent=function(_React$Component){function ProgressLessonContent(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLessonContent,_React$Component),ProgressLessonContent.prototype.render=function render(){var bubbles,_this$props=this.props,description=_this$props.description,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,lessonName=_this$props.lessonName,progressions=(0,_progressReduxSelectors.progressionsFromLevels)(levels);return bubbles=0===progressions.length?_react.default.createElement("span",{style:styles.noLevelsWarning},_locale.default.lessonContainsNoLevels()):1!==progressions.length||progressions[0].name?progressions.map((function(progression,index){return _react.default.createElement(_ProgressLevelSet.default,{key:index,name:progression.displayName,lessonName,levels:progression.levels,disabled,selectedSectionId})})):_react.default.createElement(_ProgressBubbleSet.default,{levels:progressions[0].levels,disabled,selectedSectionId}),_react.default.createElement("div",null,description&&_react.default.createElement("div",{style:styles.summary},_react.default.createElement(_SafeMarkdown.default,{markdown:description})),_react.default.createElement("div",null," ",bubbles," "))},ProgressLessonContent}(_react.default.Component);exports.default=ProgressLessonContent,_defineProperty(ProgressLessonContent,"propTypes",{description:_propTypes.default.string,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,lessonName:_propTypes.default.string});var styles={summary:function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({marginTop:20,marginBottom:30,fontSize:14},_fontConstants.default["main-font-regular"]),noLevelsWarning:{fontSize:13}};module.exports=exports.default},"./src/templates/progress/ProgressLevelSet.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressLevelSet=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_ProgressBubbleSet=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressBubbleSet.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_ProgressPill=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressPill.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressLevelSet=function(_React$Component){function ProgressLevelSet(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressLevelSet,_React$Component),ProgressLevelSet.prototype.render=function render(){var pillText,icon,_this$props=this.props,name=_this$props.name,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,onBubbleClick=_this$props.onBubbleClick,isRtl=_this$props.isRtl,lessonName=_this$props.lessonName,multiLevelStep=levels.length>1,url=multiLevelStep||onBubbleClick?void 0:levels[0].url,onClick=multiLevelStep?void 0:function(){return onBubbleClick(levels[0])},col2Style=isRtl?styles.col2RTL:styles.col2,progressStyle=!1;return levels[0].isUnplugged||levels[levels.length-1].isUnplugged?multiLevelStep?(pillText="",icon=(0,_progressHelpers.getIconForLevel)(levels[0])):(pillText=_locale.default.unpluggedActivity(),progressStyle=!0):(pillText=levels[0].levelNumber.toString(),icon=(0,_progressHelpers.getIconForLevel)(levels[0]),multiLevelStep&&(pillText+="-".concat(levels[levels.length-1].levelNumber))),_react.default.createElement("table",{style:styles.table},_react.default.createElement("tbody",null,_react.default.createElement("tr",null,_react.default.createElement("td",{style:styles.col1},_react.default.createElement(_ProgressPill.default,{levels,icon,text:pillText,disabled,selectedSectionId,progressStyle,onSingleLevelClick:onBubbleClick})),_react.default.createElement("td",{style:col2Style},_react.default.createElement("a",{href:url,onClick},_react.default.createElement("div",{style:_objectSpread(_objectSpread({},styles.nameText),styles.text)},name)))),multiLevelStep&&_react.default.createElement("tr",null,_react.default.createElement("td",null,_react.default.createElement("div",{style:styles.linesAndDot},_react.default.createElement("div",{style:styles.verticalLine}),_react.default.createElement("div",{style:styles.horizontalLine}),_react.default.createElement("div",{style:styles.dot}))),_react.default.createElement("td",{style:styles.col2},_react.default.createElement(_ProgressBubbleSet.default,{levels,disabled,selectedSectionId,onBubbleClick,lessonName})))))},ProgressLevelSet}(_react.default.Component);_defineProperty(ProgressLevelSet,"propTypes",{name:_propTypes.default.string,lessonName:_propTypes.default.string,levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType).isRequired,disabled:_propTypes.default.bool.isRequired,selectedSectionId:_propTypes.default.number,onBubbleClick:_propTypes.default.func,isRtl:_propTypes.default.bool});var styles={table:{marginTop:12},nameText:{color:_color.default.charcoal},text:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:14,letterSpacing:-.12}),col2:{paddingLeft:20},col2RTL:{paddingRight:20},linesAndDot:{whiteSpace:"nowrap",marginLeft:"50%",marginRight:14},verticalLine:{display:"inline-block",backgroundColor:_color.default.lighter_gray,height:15,width:3,position:"relative",bottom:2},horizontalLine:{display:"inline-block",backgroundColor:_color.default.lighter_gray,position:"relative",top:-2,height:3,width:"100%"},dot:{display:"inline-block",position:"relative",left:-2,top:1,backgroundColor:_color.default.lighter_gray,height:10,width:10,borderRadius:10}},UnconnectedProgressLevelSet=ProgressLevelSet;exports.UnconnectedProgressLevelSet=UnconnectedProgressLevelSet;var _default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressLevelSet));exports.default=_default},"./src/templates/progress/ProgressPill.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedProgressPill=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js"),_utils=__webpack_require__("./src/code-studio/utils.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==_typeof(obj)&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js"));function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressPill=function(_React$Component){function ProgressPill(){return _React$Component.apply(this,arguments)||this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressPill,_React$Component);var _proto=ProgressPill.prototype;return _proto.getUrl=function getUrl(){var _this$props=this.props,levels=_this$props.levels,disabled=_this$props.disabled,selectedSectionId=_this$props.selectedSectionId,onSingleLevelClick=_this$props.onSingleLevelClick;if(!disabled&&!onSingleLevelClick&&1===levels.length){var userId=(0,_utils.queryParams)("user_id");return(0,_BubbleFactory.getBubbleUrl)(levels[0].url,userId,selectedSectionId)}},_proto.getTooltipProps=function getTooltipProps(){var tooltip=this.props.tooltip,tooltipProps={};if(tooltip){var id=tooltip.props.tooltipId;tooltipProps["data-tip"]=!0,tooltipProps["data-for"]=id,tooltipProps["aria-describedby"]=id}return tooltipProps},_proto.render=function render(){var _this$props2=this.props,levels=_this$props2.levels,icon=_this$props2.icon,text=_this$props2.text,tooltip=_this$props2.tooltip,disabled=_this$props2.disabled,progressStyle=_this$props2.progressStyle,isRtl=_this$props2.isRtl,onSingleLevelClick=_this$props2.onSingleLevelClick,firstLevel=levels[0],multiLevelStep=levels.length>1,url=this.getUrl(),onClick=multiLevelStep||disabled||url?void 0:function(){return onSingleLevelClick(firstLevel)},style=_objectSpread(_objectSpread(_objectSpread({},styles.levelPill),(url||onClick)&&_progressStyles.hoverStyle),!multiLevelStep&&(0,_progressStyles.levelProgressStyle)(firstLevel.status,firstLevel.kind)),iconMarginStyle=isRtl?styles.iconMarginRTL:styles.iconMargin,tooltipProps=this.getTooltipProps(),hasKeepWorkingFeedback=firstLevel.teacherFeedbackReviewState===_types.ReviewStates.keepWorking,displayBadge=!multiLevelStep&&(hasKeepWorkingFeedback||(0,_progressHelpers.isLevelAssessment)(firstLevel)),textStyle=progressStyle?styles.textProgressStyle:styles.text;return _react.default.createElement("a",{href:url,style:{textDecoration:"none"},className:"uitest-ProgressPill",onClick},_react.default.createElement("div",_extends({},tooltipProps,{style}),icon&&_react.default.createElement(_FontAwesome.default,{icon}),text&&_react.default.createElement("div",{className:"ProgressPillTextAndIcon",style:_objectSpread(_objectSpread({},textStyle),icon&&iconMarginStyle)},text),tooltip,displayBadge&&_react.default.createElement(_BubbleBadge.default,{badgeType:hasKeepWorkingFeedback?_BubbleBadge.BadgeType.keepWorking:_BubbleBadge.BadgeType.assessment,bubbleSize:_BubbleFactory.BubbleSize.full,bubbleShape:_BubbleFactory.BubbleShape.pill})))},ProgressPill}(_react.default.Component);_defineProperty(ProgressPill,"propTypes",{levels:_propTypes.default.arrayOf(_progressTypes.levelWithProgressType),icon:_propTypes.default.string,text:_propTypes.default.string,tooltip:_propTypes.default.element,disabled:_propTypes.default.bool,selectedSectionId:_propTypes.default.number,progressStyle:_propTypes.default.bool,onSingleLevelClick:_propTypes.default.func,isRtl:_propTypes.default.bool});var styles={levelPill:_objectSpread(_objectSpread({textAlign:"center",justifyContent:"center",borderWidth:2,borderStyle:"solid",borderColor:_color.default.lighter_gray,color:_color.default.charcoal,display:"flex",fontSize:16},_fontConstants.default["main-font-semi-bold"]),{},{borderRadius:20,paddingLeft:10,paddingRight:10,paddingTop:6,paddingBottom:6,minWidth:70,lineHeight:"18px",marginTop:3,marginBottom:3,position:"relative"}),text:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{letterSpacing:-.12}),textProgressStyle:_objectSpread(_objectSpread({display:"inline-block"},_fontConstants.default["main-font-semi-bold"]),{},{fontSize:12,letterSpacing:-.12,width:120,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}),iconMargin:{marginLeft:10},iconMarginRTL:{marginRight:10}},UnconnectedProgressPill=ProgressPill;exports.UnconnectedProgressPill=UnconnectedProgressPill;var _default=(0,_reactRedux.connect)((function(state){return{isRtl:state.isRtl}}))((0,_radium.default)(ProgressPill));exports.default=_default},"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_sharedConstants=__webpack_require__("./src/util/sharedConstants.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)};exports.fakeLevel=fakeLevel;exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))};var fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))};exports.fakeLevels=fakeLevels;var fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress};exports.fakeProgressForLevels=fakeProgressForLevels;exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})};exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})};var randomNumberUpTo100=function randomNumberUpTo100(){return Math.floor(100*Math.random())},lessonId=1,fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)};exports.fakeLessonWithLevels=fakeLessonWithLevels;var fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))};exports.fakeStudents=fakeStudents;var fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})};exports.fakeUnitData=fakeUnitData;var fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress};exports.fakeStudentLevelProgress=fakeStudentLevelProgress;var fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate};exports.fakeStudentLastUpdate=fakeStudentLastUpdate;var fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeStudentLastUpdateByScript=fakeStudentLastUpdateByScript;exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/progress/ProgressLessonContent.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.WithUnpluggedLesson=exports.WithNoNamedLevels=exports.WithNamedUnpluggedLesson=exports.ProgressLessonExample=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_ProgressLessonContent=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonContent.jsx")),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js"),_sharedConstants=__webpack_require__("./src/util/sharedConstants.js"),_decorators=__webpack_require__("./.storybook/decorators.js"),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var _default={component:_ProgressLessonContent.default};exports.default=_default;var Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store:(0,_decorators.reduxStore)()},_react.default.createElement(_ProgressLessonContent.default,_extends({disabled:!1},args)))},ProgressLessonExample=Template.bind({});exports.ProgressLessonExample=ProgressLessonExample,ProgressLessonExample.args={levels:(0,_progressTestHelpers.fakeLevels)(5).map((function(level,index){return _objectSpread(_objectSpread({},level),{},{status:1===index?_sharedConstants.LevelStatus.perfect:_sharedConstants.LevelStatus.not_tried,name:"Progression"})}))};var WithUnpluggedLesson=Template.bind({});exports.WithUnpluggedLesson=WithUnpluggedLesson,WithUnpluggedLesson.args={levels:[(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5))).map((function(level){return _objectSpread(_objectSpread({},level),{},{name:"Progression"})}))};var WithNamedUnpluggedLesson=Template.bind({});exports.WithNamedUnpluggedLesson=WithNamedUnpluggedLesson,WithNamedUnpluggedLesson.args={levels:[_objectSpread(_objectSpread({},(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0})),{},{name:"Fun unplugged/named level"})].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,{named:!1})))};var WithNoNamedLevels=Template.bind({});exports.WithNoNamedLevels=WithNoNamedLevels,WithNoNamedLevels.args={levels:[_objectSpread({},(0,_progressTestHelpers.fakeLevel)({isUnplugged:!0,name:void 0}))].concat(_toConsumableArray((0,_progressTestHelpers.fakeLevels)(5,{named:!1})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLXByb2dyZXNzLVByb2dyZXNzTGVzc29uQ29udGVudC1zdG9yeS4xOGEwMTBkOC5pZnJhbWUuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7MnVCQUtPLE1BQU1BLFdBQWEsQ0FBQ0MsU0FBVyxDQUFDLEVBQUdDLE1BQVEsQ0FBQyxLQUMxQyxxQ0FBQUMsY0FDTCxxQ0FBQUMsaUJBQWdCLENBQUNDLE1BQUssaUZBQVkseUZBQ2xDSCxPQUNBLHFDQUFBSSxpQkFBZ0IsOE1DZUwsU0FBU0MsU0FBOEIsSUFBdkJMLE1BQXVCLHdEQUFSTSxPQUFRLHVDQUNwRCxHQUFJQSxPQUFPQyxPQUFTQyxRQUNsQixPQUFPRixPQUFPSCxNQUVoQixPQUFPSCxLQUNSLGdGQTdCRCxJQUFNUSxRQUFVLGdCQUNIQyxPQUFTLFNBQVRBLE9BQVNOLE9BQUssTUFBSyxDQUFDSSxLQUFNQyxRQUFTTCxNQUFyQix3QkFhcEIsU0FBU08sZUFDZCxJQUFNQyxLQUFPQyxTQUFTQyxxQkFBcUIsUUFBUSxHQUNuRCxHQUFJRixNQUFRQSxLQUFLRyxjQUFlLENBQzlCLElBQU1DLElBQU1KLEtBQUtHLGNBQWNFLGFBQWEsT0FDNUMsU0FBVUQsS0FBNkIsUUFBdEJBLElBQUlFLGNBQ3RCLENBQ0MsT0FBTyxDQUVWLHVCQXBCNEIsU0FBaEJDLGdCQUFnQixPQUFNVCxPQUFPQyxlQUFiLDhpQkNDN0IsdUpBQ0Esc0VBQ0Esb0ZBQ0EscURBQ0Esc2dDQU9rQyxTQUFyQlMsbUJBQXFCbkIsT0FBSyxPQUNyQ0EsTUFBTW9CLFFBQVFDLE1BQUssU0FBQUMsUUFBTSxPQUFJQSxPQUFPQyxRQUFYLEdBRFksb0JBR2QsU0FBWkMsVUFBWXhCLE9BQUssT0FBSXlCLE9BQU9DLEtBQUtDLGVBQWUzQixRQUFRNEIsT0FBUyxDQUFoRCxFQVM5QixJQUFNQyx3QkFBMEIsU0FBMUJBLHdCQUEyQjdCLE1BQU84QixhQUFSLHNDQUMzQkMsaUJBQWlCL0IsTUFBTW9CLFFBQVFVLGVBREosSUFFOUJFLFlBQWFoQyxN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RSxPQUFPLE9BSXRCLElBQU1zTCxrQkFBb0JULFNBQVNLLEtBQUssQ0FBQywrQ0FDaERJLGtCQUFrQlIsS0FBTyxDQUN2QnhoQixPQUFRLENBQUMsY0FBSCxJQUVDLEVBQUFrVyxxQkFBQUEsV0FBVSxDQUFDekksYUFBYSxFQUFNL0gsVUFBTThNLE1BRnJDLDJCQUlELEVBQUFnRSxxQkFBQUEsWUFBVyxFQUFHLENBQUNFLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi8uc3Rvcnlib29rL2RlY29yYXRvcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL2lzUnRsUmVkdXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL3Byb2dyZXNzUmVkdXhTZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL3Jlc3BvbnNpdmVSZWR1eC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL0ZvbnRBd2Vzb21lLmpzeCIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL1NhZmVNYXJrZG93bi5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wbHVnaW5zL2V4dGVybmFsTGlua3MuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9Qcm9ncmVzc0J1YmJsZS5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9Qcm9ncmVzc0J1YmJsZVNldC5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9Qcm9ncmVzc0xlc3NvbkNvbnRlbnQuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvUHJvZ3Jlc3NMZXZlbFNldC5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9Qcm9ncmVzc1BpbGwuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvcHJvZ3Jlc3NUZXN0SGVscGVycy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvdGVtcGxhdGVzL3Byb2dyZXNzL1Byb2dyZXNzTGVzc29uQ29udGVudC5zdG9yeS5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBhcHBseU1pZGRsZXdhcmV9IGZyb20gJ3JlZHV4JztcbmltcG9ydCBpc1J0bCBmcm9tICdAY2RvL2FwcHMvY29kZS1zdHVkaW8vaXNSdGxSZWR1eCc7XG5pbXBvcnQgcmVzcG9uc2l2ZSBmcm9tICdAY2RvL2FwcHMvY29kZS1zdHVkaW8vcmVzcG9uc2l2ZVJlZHV4JztcbmltcG9ydCByZWR1eFRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcblxuZXhwb3J0IGNvbnN0IHJlZHV4U3RvcmUgPSAocmVkdWNlcnMgPSB7fSwgc3RhdGUgPSB7fSkgPT4ge1xuICByZXR1cm4gY3JlYXRlU3RvcmUoXG4gICAgY29tYmluZVJlZHVjZXJzKHtpc1J0bCwgcmVzcG9uc2l2ZSwgLi4ucmVkdWNlcnN9KSxcbiAgICBzdGF0ZSxcbiAgICBhcHBseU1pZGRsZXdhcmUocmVkdXhUaHVuaylcbiAgKTtcbn07XG4iLCJjb25zdCBTRVRfUlRMID0gJ2lzUnRsL1NFVF9SVEwnO1xuZXhwb3J0IGNvbnN0IHNldFJ0bCA9IGlzUnRsID0+ICh7dHlwZTogU0VUX1JUTCwgaXNSdGx9KTtcbmV4cG9ydCBjb25zdCBzZXRSdGxGcm9tRE9NID0gKCkgPT4gc2V0UnRsKGlzUnRsRnJvbURPTSgpKTtcblxuLy8gRGFzaGJvYXJkIHNpZ25hbHMgd2hldGhlciBvciBub3Qgd2UncmUgaW4gcnRsIGJ5IHNldHRpbmcgXCJkaXJcIiBvbiB0aGUgcm9vdFxuLy8gZWxlbWVudC4gSW4gYW4gaWRlYWwgd29ybGQsIHJlZHV4IHdvdWxkIGJlIHRoZSBzb3VyY2Ugb2YgdHJ1dGgsIGJ1dCB3ZSBoYXZlXG4vLyBDU1Mgc2VsZWN0b3JzIHRoYXQgZGVwZW5kIG9uIHRoaXMgRE9NIHN0YXRlLCBzb21lIG9mIHdoaWNoIGFyZSB1c2VkIGluIGNhc2VzXG4vLyB3aGVyZSB3ZSBkb24ndCBoYXZlIHJlZHV4LlxuLy8gSW5zdGVhZCB3ZSBoYXZlIHRoZSBET00gY29udGludWUgdG8gYmUgdGhlIHNvdXJjZSBvZiB0cnV0aCwgYW5kIHNldCBvdXIgc3RvcmVcbi8vIHN0YXRlIGFjY29yZGluZ2x5IHNvIHRoYXQgY29tcG9uZW50cyBjYW4gYWNjZXNzIHRoaXMgaW5mby5cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBsb29rcyBhdCB0aGUgRE9NIGFuZCBkZWNpZGVzIHdoZXRoZXIgb3Igbm90IHdlJ3JlIGluIFJUTCBtb2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSdGxGcm9tRE9NKCkge1xuICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgaWYgKGhlYWQgJiYgaGVhZC5wYXJlbnRFbGVtZW50KSB7XG4gICAgY29uc3QgZGlyID0gaGVhZC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgcmV0dXJuICEhKGRpciAmJiBkaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2NhbGUoc3RhdGUgPSBmYWxzZSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gU0VUX1JUTCkge1xuICAgIHJldHVybiBhY3Rpb24uaXNSdGw7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuIiwiLy8gU2VsZWN0b3JzIGFuZCByZWxhdGVkIGhlbHBlcnMgZm9yIHByb2dyZXNzUmVkdXguIFRoZXNlIGFyZSBpbiB0aGVpciBvd24gZmlsZVxuLy8gYmVjYXVzZSB0aGV5IGFyZSBxdWl0ZSBjb21wbGV4IGFuZCBwcm9ncmVzc1JlZHV4LmpzIGlzIGFscmVhZHkgcXVpdGUgbGFyZ2UuXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge0xldmVsU3RhdHVzLCBMZXZlbEtpbmR9IGZyb20gJ0BjZG8vYXBwcy91dGlsL3NoYXJlZENvbnN0YW50cyc7XG5pbXBvcnQge3Byb2Nlc3NlZExldmVsfSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL3Byb2dyZXNzL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQge1Rlc3RSZXN1bHRzfSBmcm9tICdAY2RvL2FwcHMvY29uc3RhbnRzJztcbmltcG9ydCB7YWN0aXZpdHlDc3NDbGFzc30gZnJvbSAnLi9hY3Rpdml0eVV0aWxzJztcblxuY29uc3QgUEVFUl9SRVZJRVdfSUQgPSAtMTtcblxuLy8gU2VsZWN0b3JzXG5cbi8vIERvIHdlIGhhdmUgb25lIG9yIG1vcmUgbG9ja2FibGUgbGVzc29uc1xuZXhwb3J0IGNvbnN0IGhhc0xvY2thYmxlTGVzc29ucyA9IHN0YXRlID0+XG4gIHN0YXRlLmxlc3NvbnMuc29tZShsZXNzb24gPT4gbGVzc29uLmxvY2thYmxlKTtcblxuZXhwb3J0IGNvbnN0IGhhc0dyb3VwcyA9IHN0YXRlID0+IE9iamVjdC5rZXlzKGdyb3VwZWRMZXNzb25zKHN0YXRlKSkubGVuZ3RoID4gMTtcblxuLyoqXG4gKiBFeHRyYWN0IHRoZSByZWxldmFudCBwb3J0aW9ucyBvZiBhIHBhcnRpY3VsYXIgbGVzc29uIGZyb20gdGhlIHN0b3JlLlxuICogTm90ZSwgdGhhdCB0aGlzIGRvZXMgbm90IGluY2x1ZGUgbGV2ZWxzXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBUaGUgcHJvZ3Jlc3Mgc3RhdGUgaW4gb3VyIHJlZHV4IHN0b3JlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVzc29uSW5kZXggLSBUaGUgaW5kZXggaW50byBvdXIgbGVzc29ucyB3ZSBjYXJlIGFib3V0XG4gKiBAcmV0dXJucyB7TGVzc29ufVxuICovXG5jb25zdCBsZXNzb25Gcm9tTGVzc29uQXRJbmRleCA9IChzdGF0ZSwgbGVzc29uSW5kZXgpID0+ICh7XG4gIC4uLmxlc3NvbkZyb21MZXNzb24oc3RhdGUubGVzc29uc1tsZXNzb25JbmRleF0pLFxuICBpc0ZvY3VzQXJlYTogc3RhdGUuZm9jdXNBcmVhTGVzc29uSWRzLmluY2x1ZGVzKHN0YXRlLmxlc3NvbnNbbGVzc29uSW5kZXhdLmlkKSxcbn0pO1xuXG5jb25zdCBsZXNzb25Gcm9tTGVzc29uID0gbGVzc29uID0+XG4gIF8ucGljayhsZXNzb24sIFtcbiAgICAnbmFtZScsXG4gICAgJ2lkJyxcbiAgICAnbG9ja2FibGUnLFxuICAgICdsZXNzb25OdW1iZXInLFxuICAgICdsZXNzb25TdGFydFVybCcsXG4gICAgJ2xlc3Nvbl9wbGFuX2h0bWxfdXJsJyxcbiAgICAnbGVzc29uX2ZlZWRiYWNrX3VybCcsXG4gICAgJ3N0dWRlbnRfbGVzc29uX3BsYW5faHRtbF91cmwnLFxuICAgICdkZXNjcmlwdGlvbl9zdHVkZW50JyxcbiAgICAnZGVzY3JpcHRpb25fdGVhY2hlcicsXG4gIF0pO1xuZXhwb3J0IGNvbnN0IGxlc3NvbnMgPSBzdGF0ZSA9PlxuICBzdGF0ZS5sZXNzb25zLm1hcCgoXywgaW5kZXgpID0+IGxlc3NvbkZyb21MZXNzb25BdEluZGV4KHN0YXRlLCBpbmRleCkpO1xuXG4vKipcbiAqIEV4dHJhY3QgbGVzc29uIGZyb20gb3VyIHBlZXJSZXZpZXdMZXNzb25JbmZvIGlmIHdlIGhhdmUgb25lLiBXZSB3YW50IHRoaXMgdG8gZW5kIHVwXG4gKiBoYXZpbmcgdGhlIHNhbWUgZmllbGRzIGFzIG91ciBub24tcGVlciByZXZpZXcgbGVzc29ucy5cbiAqL1xuY29uc3QgcGVlclJldmlld0xlc3NvbiA9IHN0YXRlID0+ICh7XG4gIC4uLmxlc3NvbkZyb21MZXNzb24oc3RhdGUucGVlclJldmlld0xlc3NvbkluZm8pLFxuICAvLyBhZGQgc29tZSBmaWVsZHMgdGhhdCBhcmUgbWlzc2luZyBmb3IgdGhpcyBsZXNzb24gYnV0IHJlcXVpcmVkIGZvciBsZXNzb25UeXBlXG4gIGlkOiBQRUVSX1JFVklFV19JRCxcbiAgbG9ja2FibGU6IGZhbHNlLFxuICBpc0ZvY3VzQXJlYTogZmFsc2UsXG59KTtcblxuLyoqXG4gKiBFeHRyYWN0IGxldmVscyBmcm9tIG91ciBwZWVyUmV2aWV3TGVzc29uSW5mbywgbWFraW5nIHN1cmUgdGhlIGxldmVscyBoYXZlIHRoZSBzYW1lXG4gKiBzZXQgb2YgZmllbGRzIGFzIG91ciBub24tcGVlciByZXZpZXcgbGV2ZWxzLlxuICovXG5jb25zdCBwZWVyUmV2aWV3TGV2ZWxzID0gc3RhdGUgPT5cbiAgc3RhdGUucGVlclJldmlld0xlc3NvbkluZm8ubGV2ZWxzLm1hcCgobGV2ZWwsIGluZGV4KSA9PiAoe1xuICAgIC8vIFRoZXNlIGFyZW4ndCB0cnVlIGxldmVscyAoaS5lLiB3ZSB3b24ndCBoYXZlIGFuIGVudHJ5IGluIGxldmVsUmVzdWx0cyksXG4gICAgLy8gc28gYWx3YXlzIHVzZSBhIHNwZWNpZmljIGlkIHRoYXQgd29uJ3QgY29sbGlkZSB3aXRoIHJlYWwgbGV2ZWxzXG4gICAgLi4ubGV2ZWwsXG4gICAgaWQ6IFBFRVJfUkVWSUVXX0lELnRvU3RyaW5nKCksXG4gICAgaXNMb2NrZWQ6IGxldmVsLmxvY2tlZCxcbiAgICBzdGF0dXM6IGxldmVsLnN0YXR1cyB8fCBMZXZlbFN0YXR1cy5ub3RfdHJpZWQsXG4gICAgbGV2ZWxOdW1iZXI6IGluZGV4ICsgMSxcbiAgfSkpO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB3ZSBhcHBlYXIgdG8gYmUgaW4gYSBzY3JpcHQgbGV2ZWwgb3IgYSBzdGFuZGFsb25lIGxldmVsLlxuICogQSBzY3JpcHQgbGV2ZWwgaXMgaWRlbnRpZmllZCBiZWNhdXNlIGl0IGhhcyBsZXNzb25zLlxuICogQSBzdGFuZGFsb25lIGxldmVsIGRvZXNuJ3QgaGF2ZSBsZXNzb25zLCBidXQgaXQgZG9lcyBoYXZlIGEgbGV2ZWwgSUQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9ncmVzc0xldmVsVHlwZSA9IHtcbiAgU0NSSVBUX0xFVkVMOiAnc2NyaXB0X2xldmVsJyxcbiAgTEVWRUw6ICdsZXZlbCcsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UHJvZ3Jlc3NMZXZlbFR5cGUgPSBzdGF0ZSA9PiB7XG4gIGlmIChzdGF0ZS5wcm9ncmVzcy5sZXNzb25zKSB7XG4gICAgcmV0dXJuIFByb2dyZXNzTGV2ZWxUeXBlLlNDUklQVF9MRVZFTDtcbiAgfSBlbHNlIGlmIChzdGF0ZS5wcm9ncmVzcy5jdXJyZW50TGV2ZWxJZCkge1xuICAgIHJldHVybiBQcm9ncmVzc0xldmVsVHlwZS5MRVZFTDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRhc2hib2FyZCBVUkwgcGF0aCB0byByZXRyaWV2ZSB0aGUgbGV2ZWwgcHJvcGVydGllcyBmb3IgYSBzY3JpcHRcbiAqIGxldmVsIChpZiB3ZSBoYXZlIGxlc3NvbnMpIG9yIGEgbGV2ZWwgKGlmIHdlIGRvbid0IGhhdmUgbGVzc29ucykuIElmIHdlIGRvbid0XG4gKiBoYXZlIGEgY3VycmVudCBsZXZlbCwgdGhpcyByZXR1cm5zIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldExldmVsUHJvcGVydGllc1BhdGggPSBzdGF0ZSA9PiB7XG4gIGlmIChzdGF0ZS5wcm9ncmVzcy5sZXNzb25zKSB7XG4gICAgY29uc3Qgc2NyaXB0TmFtZSA9IHN0YXRlLnByb2dyZXNzLnNjcmlwdE5hbWU7XG4gICAgY29uc3QgbGVzc29uUG9zaXRpb24gPSBzdGF0ZS5wcm9ncmVzcy5sZXNzb25zPy5maW5kKFxuICAgICAgbGVzc29uID0+IGxlc3Nvbi5pZCA9PT0gc3RhdGUucHJvZ3Jlc3MuY3VycmVudExlc3NvbklkXG4gICAgKS5yZWxhdGl2ZV9wb3NpdGlvbjtcbiAgICBjb25zdCBsZXZlbE51bWJlciA9XG4gICAgICBsZXZlbHNGb3JMZXNzb25JZChcbiAgICAgICAgc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgIHN0YXRlLnByb2dyZXNzLmN1cnJlbnRMZXNzb25JZFxuICAgICAgKS5maW5kSW5kZXgobGV2ZWwgPT4gbGV2ZWwuaXNDdXJyZW50TGV2ZWwpICsgMTtcbiAgICByZXR1cm4gYC9zLyR7c2NyaXB0TmFtZX0vbGVzc29ucy8ke2xlc3NvblBvc2l0aW9ufS9sZXZlbHMvJHtsZXZlbE51bWJlcn0vbGV2ZWxfcHJvcGVydGllc2A7XG4gIH0gZWxzZSBpZiAoc3RhdGUucHJvZ3Jlc3MuY3VycmVudExldmVsSWQgIT09IG51bGwpIHtcbiAgICBjb25zdCBsZXZlbElkID0gc3RhdGUucHJvZ3Jlc3MuY3VycmVudExldmVsSWQ7XG4gICAgcmV0dXJuIGAvbGV2ZWxzLyR7bGV2ZWxJZH0vbGV2ZWxfcHJvcGVydGllc2A7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgbGV2ZWwgb2JqZWN0IHBhc3NlZCBkb3duIHRvIHVzZSB2aWEgdGhlIHNlcnZlciAoYW5kIHN0b3JlZCBpbiBsZXNzb24ubGVzc29ucy5sZXZlbHMpXG4gKiBjb250YWlucyBtb3JlIGRhdGEgdGhhbiB3ZSBuZWVkLiBUaGlzIChhKSBmaWx0ZXJzIHRvIHRoZSBwYXJ0cyBvdXIgdmlld3MgY2FyZVxuICogYWJvdXQgYW5kIChiKSBkZXRlcm1pbmVzIGN1cnJlbnQgc3RhdHVzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mXG4gKiBzdGF0ZS5sZXZlbFJlc3VsdHNcbiAqL1xuY29uc3QgbGV2ZWxXaXRoUHJvZ3Jlc3MgPSAoXG4gIHtsZXZlbFJlc3VsdHMsIHVuaXRQcm9ncmVzcywgbGV2ZWxQYWlyaW5nID0ge30sIGN1cnJlbnRMZXZlbElkfSxcbiAgbGV2ZWwsXG4gIGlzTG9ja2FibGVcbikgPT4ge1xuICBjb25zdCBub3JtYWxpemVkTGV2ZWwgPSBwcm9jZXNzZWRMZXZlbChsZXZlbCk7XG4gIGlmIChsZXZlbC5pZHMpIHtcbiAgICAvLyBtYWtlIHN1cmUgd2UncmUgdXNpbmcgdGhlIGlkIHdpdGggYmVzdCBwcm9ncmVzc1xuICAgIG5vcm1hbGl6ZWRMZXZlbC5pZCA9IGJlc3RSZXN1bHRMZXZlbElkKGxldmVsLmlkcywgbGV2ZWxSZXN1bHRzKTtcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdmFsdWVzXG4gIGxldCBzdGF0dXMgPSBMZXZlbFN0YXR1cy5ub3RfdHJpZWQ7XG4gIGxldCBsb2NrZWQgPSBpc0xvY2thYmxlO1xuICBsZXQgdGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGUgPSBudWxsO1xuXG4gIGxldCBsZXZlbFByb2dyZXNzID0gdW5pdFByb2dyZXNzW25vcm1hbGl6ZWRMZXZlbC5pZF07XG4gIGlmIChsZXZlbFByb2dyZXNzPy5wYWdlcykge1xuICAgIGxldmVsUHJvZ3Jlc3MgPSBsZXZlbFByb2dyZXNzLnBhZ2VzW25vcm1hbGl6ZWRMZXZlbC5wYWdlTnVtYmVyIC0gMV07XG4gIH1cbiAgaWYgKGxldmVsUHJvZ3Jlc3MpIHtcbiAgICAvLyBpZiB3ZSBoYXZlIGxldmVsUHJvZ3Jlc3MsIG92ZXJ3cml0ZSBkZWZhdWx0IHZhbHVlc1xuICAgIHN0YXR1cyA9IGxldmVsUHJvZ3Jlc3Muc3RhdHVzO1xuICAgIGxvY2tlZCA9IGxldmVsUHJvZ3Jlc3MubG9ja2VkO1xuICAgIHRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlID0gbGV2ZWxQcm9ncmVzcy50ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZTtcbiAgfSBlbHNlIGlmIChsZXZlbC5raW5kICE9PSBMZXZlbEtpbmQuYXNzZXNzbWVudCkge1xuICAgIC8vIGlmIHdlIGRvbid0IGhhdmUgbGV2ZWxQcm9ncmVzcywgZ2V0IHRoZSBzdGF0dXMgZnJvbSBgbGV2ZWxSZXN1bHRzYC5cbiAgICAvLyBob3dldmVyLCBgbGV2ZWxSZXN1bHRzYCBkb2Vzbid0IHRyYWNrIHBlci1wYWdlIHJlc3VsdHMgZm9yIG11bHRpLXBhZ2VcbiAgICAvLyBhc3Nlc3NtZW50cywgc28gZm9yIGFzc2Vzc21lbnRzIHdlIGxlYXZlIGRlZmF1bHQgdmFsdWVzLlxuICAgIC8vXG4gICAgLy8gbm90ZTogaWYgd2UncmUgbm90IHVzaW5nIGxldmVsUHJvZ3Jlc3MsIGBpc0xvY2tlZGAgd2lsbCBhbHdheXMgYmUgZmFsc2UuXG4gICAgc3RhdHVzID0gYWN0aXZpdHlDc3NDbGFzcyhsZXZlbFJlc3VsdHNbbm9ybWFsaXplZExldmVsLmlkXSk7XG4gIH1cbiAgY29uc3QgaXNDdXJyZW50ID1cbiAgICBub3JtYWxpemVkTGV2ZWwuaWQgPT09IGN1cnJlbnRMZXZlbElkIHx8XG4gICAgISFsZXZlbC5pZHM/LmluY2x1ZGVzW2N1cnJlbnRMZXZlbElkXTtcblxuICByZXR1cm4ge1xuICAgIC4uLm5vcm1hbGl6ZWRMZXZlbCxcbiAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICBpc0N1cnJlbnRMZXZlbDogaXNDdXJyZW50LFxuICAgIHBhaXJlZDogbGV2ZWxQYWlyaW5nW2xldmVsLmFjdGl2ZUlkXSxcbiAgICBpc0xvY2tlZDogbG9ja2VkLFxuICAgIHRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlOiB0ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZSxcbiAgfTtcbn07XG5cbi8qKlxuICogR2V0IGxldmVsIGRhdGEgZm9yIGFsbCBsZXNzb25zXG4gKi9cbmV4cG9ydCBjb25zdCBsZXZlbHNCeUxlc3NvbiA9ICh7XG4gIGxlc3NvbnMsXG4gIGxldmVsUmVzdWx0cyxcbiAgdW5pdFByb2dyZXNzLFxuICBsZXZlbFBhaXJpbmcsXG4gIGN1cnJlbnRMZXZlbElkLFxufSkgPT5cbiAgbGVzc29ucy5tYXAobGVzc29uID0+XG4gICAgbGVzc29uLmxldmVscy5tYXAobGV2ZWwgPT4ge1xuICAgICAgbGV0IHN0YXR1c0xldmVsID0gbGV2ZWxXaXRoUHJvZ3Jlc3MoXG4gICAgICAgIHtsZXZlbFJlc3VsdHMsIHVuaXRQcm9ncmVzcywgbGV2ZWxQYWlyaW5nLCBjdXJyZW50TGV2ZWxJZH0sXG4gICAgICAgIGxldmVsLFxuICAgICAgICBsZXNzb24ubG9ja2FibGVcbiAgICAgICk7XG4gICAgICBpZiAoc3RhdHVzTGV2ZWwuc3VibGV2ZWxzKSB7XG4gICAgICAgIHN0YXR1c0xldmVsLnN1YmxldmVscyA9IGxldmVsLnN1YmxldmVscy5tYXAoc3VibGV2ZWwgPT5cbiAgICAgICAgICBsZXZlbFdpdGhQcm9ncmVzcyhcbiAgICAgICAgICAgIHtsZXZlbFJlc3VsdHMsIHVuaXRQcm9ncmVzcywgbGV2ZWxQYWlyaW5nLCBjdXJyZW50TGV2ZWxJZH0sXG4gICAgICAgICAgICBzdWJsZXZlbCxcbiAgICAgICAgICAgIGxlc3Nvbi5sb2NrYWJsZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0dXNMZXZlbDtcbiAgICB9KVxuICApO1xuXG4vKipcbiAqIEdldCBkYXRhIGZvciBhIHBhcnRpY3VsYXIgbGVzc29uXG4gKi9cbmV4cG9ydCBjb25zdCBsZXZlbHNGb3JMZXNzb25JZCA9IChzdGF0ZSwgbGVzc29uSWQpID0+IHtcbiAgY29uc3QgbGVzc29uID0gc3RhdGUubGVzc29ucz8uZmluZChsZXNzb24gPT4gbGVzc29uLmlkID09PSBsZXNzb25JZCk7XG4gIHJldHVybiBsZXNzb24/LmxldmVscy5tYXAobGV2ZWwgPT5cbiAgICBsZXZlbFdpdGhQcm9ncmVzcyhzdGF0ZSwgbGV2ZWwsIGxlc3Nvbi5sb2NrYWJsZSlcbiAgKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBsZXZlbC4gT24gc2NyaXB0IGxldmVscywgY2hlY2tcbiAqIHdoaWNoIGxldmVsIGhhcyBpc0N1cnJlbnRMZXZlbCBzZXQuIEZvciBzaW5nbGUgbGV2ZWxzLCByZXR1cm4gMC5cbiAqIE90aGVyd2lzZSwgcmV0dXJuIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGN1cnJlbnRMZXZlbEluZGV4ID0gc3RhdGUgPT4ge1xuICBpZiAoZ2V0UHJvZ3Jlc3NMZXZlbFR5cGUoc3RhdGUpID09PSBQcm9ncmVzc0xldmVsVHlwZS5MRVZFTCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmIChnZXRQcm9ncmVzc0xldmVsVHlwZShzdGF0ZSkgPT09IFByb2dyZXNzTGV2ZWxUeXBlLlNDUklQVF9MRVZFTCkge1xuICAgIHJldHVybiBsZXZlbHNGb3JMZXNzb25JZChcbiAgICAgIHN0YXRlLnByb2dyZXNzLFxuICAgICAgc3RhdGUucHJvZ3Jlc3MuY3VycmVudExlc3NvbklkXG4gICAgKS5maW5kSW5kZXgobGV2ZWwgPT4gbGV2ZWwuaXNDdXJyZW50TGV2ZWwpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbmV4dCBsZXZlbCBJRCBpbiB0aGUgcHJvZ3Jlc3Npb24gaWYgaXQgZXhpc3RzLlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgbm90IGN1cnJlbnRseSBpbiBhIHNjcmlwdCBsZXZlbCBvclxuICogY3VycmVudGx5IG9uIHRoZSBsYXN0IGxldmVsLlxuICovXG5leHBvcnQgY29uc3QgbmV4dExldmVsSWQgPSBzdGF0ZSA9PiB7XG4gIGlmIChnZXRQcm9ncmVzc0xldmVsVHlwZShzdGF0ZSkgIT09IFByb2dyZXNzTGV2ZWxUeXBlLlNDUklQVF9MRVZFTCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBsZXZlbHMgPSBsZXZlbHNGb3JMZXNzb25JZChcbiAgICBzdGF0ZS5wcm9ncmVzcyxcbiAgICBzdGF0ZS5wcm9ncmVzcy5jdXJyZW50TGVzc29uSWRcbiAgKTtcbiAgY29uc3QgY3VycmVudExldmVsSW5kZXggPSBsZXZlbHMuZmluZEluZGV4KGxldmVsID0+IGxldmVsLmlzQ3VycmVudExldmVsKTtcbiAgaWYgKGN1cnJlbnRMZXZlbEluZGV4ID09PSBsZXZlbHMubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBuZXh0TGV2ZWwgPSBsZXZlbHNbY3VycmVudExldmVsSW5kZXggKyAxXTtcbiAgcmV0dXJuIG5leHRMZXZlbC5pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBsZXZlbENvdW50ID0gc3RhdGUgPT4ge1xuICBpZiAoZ2V0UHJvZ3Jlc3NMZXZlbFR5cGUoc3RhdGUpID09PSBQcm9ncmVzc0xldmVsVHlwZS5MRVZFTCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmIChnZXRQcm9ncmVzc0xldmVsVHlwZShzdGF0ZSkgPT09IFByb2dyZXNzTGV2ZWxUeXBlLlNDUklQVF9MRVZFTCkge1xuICAgIHJldHVybiBsZXZlbHNGb3JMZXNzb25JZChzdGF0ZS5wcm9ncmVzcywgc3RhdGUucHJvZ3Jlc3MuY3VycmVudExlc3NvbklkKVxuICAgICAgLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbmV4cG9ydCBjb25zdCBsZXNzb25FeHRyYXNVcmwgPSAoc3RhdGUsIGxlc3NvbklkKSA9PlxuICBzdGF0ZS5sZXNzb25FeHRyYXNFbmFibGVkXG4gICAgPyBzdGF0ZS5sZXNzb25zLmZpbmQobGVzc29uID0+IGxlc3Nvbi5pZCA9PT0gbGVzc29uSWQpXG4gICAgICAgIC5sZXNzb25fZXh0cmFzX2xldmVsX3VybFxuICAgIDogJyc7XG5cbmV4cG9ydCBjb25zdCBpc1BlcmZlY3QgPSAoc3RhdGUsIGxldmVsSWQpID0+XG4gICEhc3RhdGUubGV2ZWxSZXN1bHRzICYmXG4gIHN0YXRlLmxldmVsUmVzdWx0c1tsZXZlbElkXSA+PSBUZXN0UmVzdWx0cy5NSU5JTVVNX09QVElNQUxfUkVTVUxUO1xuXG4vKipcbiAqIEdyb3VwcyBsZXNzb25zIGFjY29yZGluZyB0byBMZXNzb25Hcm91cC5cbiAqIEByZXR1cm5zIHtPYmplY3RbXX1cbiAqIHtzdHJpbmd9IE9iamVjdC5uYW1lXG4gKiB7c3RyaW5nW119IE9iamVjdC5sZXNzb25OYW1lc1xuICoge09iamVjdFtdfSBPYmplY3QubGVzc29uTGV2ZWxzXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cGVkTGVzc29ucyA9IChzdGF0ZSwgaW5jbHVkZUJvbnVzTGV2ZWxzID0gZmFsc2UpID0+IHtcbiAgbGV0IGJ5R3JvdXAgPSB7fTtcblxuICBjb25zdCBhbGxMZXZlbHMgPSBsZXZlbHNCeUxlc3NvbihzdGF0ZSk7XG5cbiAgc3RhdGUubGVzc29uR3JvdXBzLmZvckVhY2gobGVzc29uR3JvdXAgPT4ge1xuICAgIGJ5R3JvdXBbbGVzc29uR3JvdXAuZGlzcGxheV9uYW1lXSA9IHtcbiAgICAgIGxlc3Nvbkdyb3VwOiB7XG4gICAgICAgIGlkOiBsZXNzb25Hcm91cC5pZCxcbiAgICAgICAgdXNlckZhY2luZzogbGVzc29uR3JvdXAudXNlcl9mYWNpbmcsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBsZXNzb25Hcm91cC5kaXNwbGF5X25hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBsZXNzb25Hcm91cC5kZXNjcmlwdGlvbixcbiAgICAgICAgYmlnUXVlc3Rpb25zOiBsZXNzb25Hcm91cC5iaWdfcXVlc3Rpb25zLFxuICAgICAgfSxcbiAgICAgIGxlc3NvbnM6IFtdLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtdLFxuICAgIH07XG4gIH0pO1xuXG4gIHN0YXRlLmxlc3NvbnMuZm9yRWFjaCgobGVzc29uLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGdyb3VwID0gbGVzc29uLmxlc3Nvbl9ncm91cF9kaXNwbGF5X25hbWU7XG4gICAgY29uc3QgbGVzc29uQXRJbmRleCA9IGxlc3NvbkZyb21MZXNzb25BdEluZGV4KHN0YXRlLCBpbmRleCk7XG4gICAgbGV0IGxlc3NvbkxldmVscyA9IGFsbExldmVsc1tpbmRleF07XG4gICAgaWYgKCFpbmNsdWRlQm9udXNMZXZlbHMpIHtcbiAgICAgIGxlc3NvbkxldmVscyA9IGxlc3NvbkxldmVscy5maWx0ZXIobGV2ZWwgPT4gIWxldmVsLmJvbnVzKTtcbiAgICB9XG5cbiAgICBpZiAoYnlHcm91cFtncm91cF0pIHtcbiAgICAgIGJ5R3JvdXBbZ3JvdXBdLmxlc3NvbnMucHVzaChsZXNzb25BdEluZGV4KTtcbiAgICAgIGJ5R3JvdXBbZ3JvdXBdLmxldmVsc0J5TGVzc29uLnB1c2gobGVzc29uTGV2ZWxzKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFBlZXIgcmV2aWV3cyBnZXQgdGhlaXIgb3duIGdyb3VwLCBidXQgdGhlc2UgbGV2ZWxzL2xlc3NvbiBhcmUgc3RvcmVkXG4gIC8vIHNlcGFyYXRlbHkgZnJvbSBvdXIgb3RoZXIgbGV2ZWxzL2xlc3NvbnMgaW4gcmVkdXggKHNpbmNlIHRoZXkncmUgc2xpZ2h0bHlcbiAgLy8gZGlmZmVyZW50KVxuICBpZiAoc3RhdGUucGVlclJldmlld0xlc3NvbkluZm8pIHtcbiAgICBieUdyb3VwW3N0YXRlLnBlZXJSZXZpZXdMZXNzb25JbmZvLmxlc3Nvbl9ncm91cF9kaXNwbGF5X25hbWVdID0ge1xuICAgICAgZ3JvdXA6IHN0YXRlLnBlZXJSZXZpZXdMZXNzb25JbmZvLmxlc3Nvbl9ncm91cF9kaXNwbGF5X25hbWUsXG4gICAgICBsZXNzb25Hcm91cDoge1xuICAgICAgICBpZDogbnVsbCwgLy9QZWVyIHJldmlld3MgZG8gbm90IGhhdmUgZGVzY3JpcHRpb25zIG9yIGJpZyBxdWVzdGlvbnMgc28gdGhleSB3b24ndCBuZWVkIGFuIGlkIHRvIHRyYWNrIGNsaWNrc1xuICAgICAgICBkaXNwbGF5TmFtZTogc3RhdGUucGVlclJldmlld0xlc3NvbkluZm8ubGVzc29uX2dyb3VwX2Rpc3BsYXlfbmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAgICAgIGJpZ1F1ZXN0aW9uczogbnVsbCxcbiAgICAgIH0sXG4gICAgICBsZXNzb25zOiBbcGVlclJldmlld0xlc3NvbihzdGF0ZSldLFxuICAgICAgbGV2ZWxzQnlMZXNzb246IFtwZWVyUmV2aWV3TGV2ZWxzKHN0YXRlKV0sXG4gICAgfTtcbiAgfVxuXG4gIC8vIFdlIHdhbnQgdG8gcmV0dXJuIGFuIGFycmF5IG9mIGNhdGVnb3JpZXNcbiAgcmV0dXJuIF8udmFsdWVzKGJ5R3JvdXApO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIHNldCBvZiBsZXZlbHMsIGdyb3VwcyB0aGVtIGluIHNldHMgb2YgcHJvZ3Jlc3Npb25zLCB3aGVyZSBlYWNoXG4gKiBwcm9ncmVzc2lvbiBpcyBhIHNldCBvZiBhZGphY2VudCBsZXZlbHMgc2hhcmluZyB0aGUgc2FtZSBwcm9ncmVzc2lvbiBuYW1lXG4gKiBBbnkgZ2l2ZW4gbGV2ZWwncyBwcm9ncmVzc2lvbiBuYW1lIGlzIGRldGVybWluZWQgYnkgZmlyc3QgbG9va2luZyB0byBzZWUgaWZcbiAqIHRoZSBzZXJ2ZXIgcHJvdmlkZWQgdXMgb25lIGFzIGxldmVsLnByb2dyZXNzaW9uLCBvdGhlcndpc2Ugd2UgZmFsbCBiYWNrIHRvXG4gKiBqdXN0IGxldmVsLm5hbWVcbiAqIEBwYXJhbSB7TGV2ZWxbXX0gbGV2ZWxzXG4gKiBAcmV0dXJucyB7b2JqZWN0W119IEFuIGFycmF5IG9mIHByb2dyZXNzaW9ucywgd2hlcmUgZWFjaCBjb25zaXN0cyBvZiBhIG5hbWUsXG4gKiAgIHRoZSBwb3NpdGlvbiBvZiB0aGUgcHJvZ3Jlc3Npb24gaW4gdGhlIGlucHV0IGFycmF5LCBhbmQgdGhlIHNldCBvZiBsZXZlbHNcbiAqICAgaW4gdGhlIHByb2dyZXNzaW9uXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9ncmVzc2lvbnNGcm9tTGV2ZWxzID0gbGV2ZWxzID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3Npb25zID0gW107XG4gIGlmIChsZXZlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHByb2dyZXNzaW9ucztcbiAgfVxuICBsZXQgY3VycmVudFByb2dyZXNzaW9uID0ge1xuICAgIHN0YXJ0OiAwLFxuICAgIG5hbWU6IGxldmVsc1swXS5wcm9ncmVzc2lvbiB8fCBsZXZlbHNbMF0ubmFtZSxcbiAgICBkaXNwbGF5TmFtZTogbGV2ZWxzWzBdLnByb2dyZXNzaW9uRGlzcGxheU5hbWUgfHwgbGV2ZWxzWzBdLm5hbWUsXG4gICAgbGV2ZWxzOiBbbGV2ZWxzWzBdXSxcbiAgfTtcbiAgbGV2ZWxzLnNsaWNlKDEpLmZvckVhY2goKGxldmVsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHByb2dyZXNzaW9uTmFtZSA9IGxldmVsLnByb2dyZXNzaW9uIHx8IGxldmVsLm5hbWU7XG4gICAgaWYgKHByb2dyZXNzaW9uTmFtZSA9PT0gY3VycmVudFByb2dyZXNzaW9uLm5hbWUpIHtcbiAgICAgIGN1cnJlbnRQcm9ncmVzc2lvbi5sZXZlbHMucHVzaChsZXZlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzaW9ucy5wdXNoKGN1cnJlbnRQcm9ncmVzc2lvbik7XG4gICAgICBjdXJyZW50UHJvZ3Jlc3Npb24gPSB7XG4gICAgICAgIC8vICsgMSBiZWNhdXNlIHdlIHNsaWNlZCBvZmYgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgc3RhcnQ6IGluZGV4ICsgMSxcbiAgICAgICAgbmFtZTogbGV2ZWwucHJvZ3Jlc3Npb24gfHwgbGV2ZWwubmFtZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IGxldmVsLnByb2dyZXNzaW9uRGlzcGxheU5hbWUgfHwgbGV2ZWwubmFtZSxcbiAgICAgICAgbGV2ZWxzOiBbbGV2ZWxdLFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICBwcm9ncmVzc2lvbnMucHVzaChjdXJyZW50UHJvZ3Jlc3Npb24pO1xuICByZXR1cm4gcHJvZ3Jlc3Npb25zO1xufTtcblxuLy8gSGVscGVyc1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGV2ZWwgd2l0aCB0aGUgaGlnaGVzdCBwcm9ncmVzcywgb3IgdGhlIGZpcnN0IGxldmVsIGlmIG5vbmUgaGF2ZVxuICogYmVlbiBhdHRlbXB0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyW119IGxldmVsSWRzXG4gKiBAcGFyYW0ge09iamVjdC48bnVtYmVyLG51bWJlcj59IC0gTWFwcGluZyBmcm9tIGxldmVsIGlkIHRvIHByb2dyZXNzIHJlc3VsdFxuICovXG5mdW5jdGlvbiBiZXN0UmVzdWx0TGV2ZWxJZChsZXZlbElkcywgcHJvZ3Jlc3NEYXRhKSB7XG4gIC8vIFRoZSB1c3VhbCBjYXNlXG4gIGlmIChsZXZlbElkcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbGV2ZWxJZHNbMF07XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIGxldmVsIHdpdGggdGhlIGhpZ2hlc3QgcmVzdWx0XG4gIHZhciBhdHRlbXB0ZWRJZHMgPSBsZXZlbElkcy5maWx0ZXIoaWQgPT4gcHJvZ3Jlc3NEYXRhW2lkXSk7XG4gIGlmIChhdHRlbXB0ZWRJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gTm9uZSBvZiB0aGVtIGhhdmUgYmVlbiBhdHRlbXB0ZWQsIGp1c3QgcmV0dXJuIHRoZSBmaXJzdFxuICAgIHJldHVybiBsZXZlbElkc1swXTtcbiAgfVxuICB2YXIgYmVzdElkID0gYXR0ZW1wdGVkSWRzWzBdO1xuICB2YXIgYmVzdFJlc3VsdCA9IHByb2dyZXNzRGF0YVtiZXN0SWRdO1xuICBhdHRlbXB0ZWRJZHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gcHJvZ3Jlc3NEYXRhW2lkXTtcbiAgICBpZiAocmVzdWx0ID4gYmVzdFJlc3VsdCkge1xuICAgICAgYmVzdElkID0gaWQ7XG4gICAgICBiZXN0UmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBiZXN0SWQ7XG59XG5cbi8vIGV4cG9ydCBwcml2YXRlIGZ1bmN0aW9uKHMpIHRvIGV4cG9zZSB0byB1bml0IHRlc3RpbmdcbmV4cG9ydCBjb25zdCBfX3Rlc3Rvbmx5X18gPSBJTl9VTklUX1RFU1RcbiAgPyB7XG4gICAgICBiZXN0UmVzdWx0TGV2ZWxJZCxcbiAgICAgIHBlZXJSZXZpZXdMZXNzb24sXG4gICAgICBwZWVyUmV2aWV3TGV2ZWxzLFxuICAgICAgUEVFUl9SRVZJRVdfSUQsXG4gICAgfVxuICA6IHt9O1xuIiwiaW1wb3J0IHttYWtlRW51bX0gZnJvbSAnQGNkby9hcHBzL3V0aWxzJztcblxuY29uc3QgU0VUX1JFU1BPTlNJVkVfU0laRSA9ICdyZXNwb25zaXZlL1NFVF9SRVNQT05TSVZFX1NJWkUnO1xuZXhwb3J0IGNvbnN0IHNldFJlc3BvbnNpdmVTaXplID0gcmVzcG9uc2l2ZVNpemUgPT4gKHtcbiAgdHlwZTogU0VUX1JFU1BPTlNJVkVfU0laRSxcbiAgcmVzcG9uc2l2ZVNpemUsXG59KTtcblxuZXhwb3J0IGNvbnN0IFJlc3BvbnNpdmVTaXplID0gbWFrZUVudW0oJ2xnJywgJ21kJywgJ3NtJywgJ3hzJyk7XG5cbi8vIERlZmF1bHQgd2luZG93IHdpZHRocyB0aGF0IGFyZSB0aGUgc3RhcnRpbmcgcG9pbnRzIGZvciBlYWNoIHdpZHRoIGNhdGVnb3J5LlxuY29uc3QgQnJlYWtwb2ludHMgPSBbXG4gIHticmVha3BvaW50OiA5OTIsIHJlc3BvbnNpdmVTaXplOiBSZXNwb25zaXZlU2l6ZS5sZ30sXG4gIHticmVha3BvaW50OiA3MjAsIHJlc3BvbnNpdmVTaXplOiBSZXNwb25zaXZlU2l6ZS5tZH0sXG4gIHticmVha3BvaW50OiA2NTAsIHJlc3BvbnNpdmVTaXplOiBSZXNwb25zaXZlU2l6ZS5zbX0sXG4gIHticmVha3BvaW50OiAwLCByZXNwb25zaXZlU2l6ZTogUmVzcG9uc2l2ZVNpemUueHN9LFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc3BvbnNpdmVCcmVha3BvaW50KHdpZHRoKSB7XG4gIHJldHVybiBCcmVha3BvaW50cy5maW5kKCh7YnJlYWtwb2ludH0pID0+IHdpZHRoID4gYnJlYWtwb2ludCkucmVzcG9uc2l2ZVNpemU7XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgcmVzcG9uc2l2ZVNpemU6IGdldFJlc3BvbnNpdmVCcmVha3BvaW50KHdpbmRvdy5pbm5lcldpZHRoKSxcbn07XG5cbi8qKlxuICogUmVkdWNlciBmb3IgcmVzcG9uc2l2ZSBzaXplcy4gT25seSByZXR1cm4gYSBuZXcgc3RhdGUgaWYgd2UndmUgYWN0dWFsbHlcbiAqIGNyb3NzZWQgaW50byBhIG5ldyBicmVha3BvaW50IHdpZHRoLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKFxuICAgIGFjdGlvbi50eXBlID09PSBTRVRfUkVTUE9OU0lWRV9TSVpFICYmXG4gICAgc3RhdGUucmVzcG9uc2l2ZVNpemUgIT09IGFjdGlvbi5yZXNwb25zaXZlU2l6ZVxuICApIHtcbiAgICByZXR1cm4gey4uLnN0YXRlLCByZXNwb25zaXZlU2l6ZTogYWN0aW9uLnJlc3BvbnNpdmVTaXplfTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG4iLCIvKiogQGZpbGUgZm9udC1hd2Vzb21lIGhlbHBlciBjb21wb25lbnQuICovXG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKiBHaXZlbiBhbiBpY29uIG5hbWUsIHJlbmRlciB0aGUgaWNvbiB1c2luZyBhbiA8aT4gdGFnIGluIHR5cGljYWwgZm9udC1hd2Vzb21lXG4gKiBmYXNoaW9uLiAgUmVxdWlyZXMgZm9udC1hd2Vzb21lIHRvIGJlIGF2YWlsYWJsZSBvbiB0aGUgcGFnZS5cbiAqIFNlZSBodHRwOi8vZm9udGF3ZXNvbWUuaW8vaWNvbnMvIHRvIGxvb2sgdXAgc3VwcG9ydGVkIGljb24gbmFtZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZvbnRBd2Vzb21lKHtpY29uLCBjbGFzc05hbWUsIHRpdGxlLCAuLi5wcm9wc30pIHtcbiAgY29uc3QgbmV3UHJvcHMgPSBfLmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGBmYSBmYS0ke2ljb259ICR7Y2xhc3NOYW1lID8gY2xhc3NOYW1lIDogJyd9YCxcbiAgfSk7XG4gIHJldHVybiA8aSB7Li4ubmV3UHJvcHN9IHRpdGxlPXt0aXRsZX0gLz47XG59XG5cbkZvbnRBd2Vzb21lLnByb3BUeXBlcyA9IHtcbiAgaWNvbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBUaXRsZSBzaG91bGQgYmUgdXNlZCBmb3Igc2VtYW50aWMgaWNvbnMuIElmIG5vdCBnaXZlbiwgdGhlIHNjcmVlbnJlYWRlciB3aWxsIG5vdCByZWFkIHRoZSBpY29uXG4gIC8vIFNlZSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9kb2NzL3dlYi9kaWctZGVlcGVyL2FjY2Vzc2liaWxpdHkjaWNvbnMtdXNlZC1hcy1zZW1hbnRpYy1lbGVtZW50c1xufTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgUGFyc2VyIGZyb20gJ0Bjb2RlLWRvdC1vcmcvcmVkYWN0YWJsZS1tYXJrZG93bic7XG5cbmltcG9ydCB7XG4gIGRldGFpbHMsXG4gIGNsaWNrYWJsZVRleHQsXG4gIGV4cGFuZGFibGVJbWFnZXMsXG4gIHZpc3VhbENvZGVCbG9jayxcbiAgeG1sQXNUb3BMZXZlbEJsb2NrLFxufSBmcm9tICdAY29kZS1kb3Qtb3JnL3JlbWFyay1wbHVnaW5zJztcblxuaW1wb3J0IHJlbWFya1JlaHlwZSBmcm9tICdyZW1hcmstcmVoeXBlJztcbmltcG9ydCByZWh5cGVSYXcgZnJvbSAncmVoeXBlLXJhdyc7XG5pbXBvcnQgcmVoeXBlU2FuaXRpemUgZnJvbSAncmVoeXBlLXNhbml0aXplJztcbmltcG9ydCByZWh5cGVSZWFjdCBmcm9tICdyZWh5cGUtcmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRTYW5pdGl6YXRpb25TY2hlbWEgZnJvbSAnaGFzdC11dGlsLXNhbml0aXplL2xpYi9naXRodWIuanNvbic7XG5cbmltcG9ydCBleHRlcm5hbExpbmtzIGZyb20gJy4vcGx1Z2lucy9leHRlcm5hbExpbmtzJztcblxuLyoqXG4gKiBCYXNpYyBjb21wb25lbnQgZm9yIHJlbmRlcmluZyBhIG1hcmtkb3duIHN0cmluZyBhcyBIVE1MLCB3aXRoIHNhbml0aXphdGlvbi5cbiAqIENhbiBzYWZlbHkgcmVuZGVyIG1hcmtkb3duIGV2ZW4gZnJvbSB1bnRydXN0ZWQgc291cmNlcywgd2l0aG91dCBwb3RlbnRpYWxseVxuICogZXhwb3NpbmcgdXMgdG8gYW4gWFNTIGluamVjdGlvbi5cbiAqL1xuY2xhc3MgU2FmZU1hcmtkb3duIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBtYXJrZG93bjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIG9wZW5FeHRlcm5hbExpbmtzSW5OZXdUYWI6IFByb3BUeXBlcy5ib29sLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgLy8gV2Ugb25seSBvcGVuIGV4dGVybmFsIGxpbmtzIGluIGEgbmV3IHRhYiBpZiBpdCdzIGV4cGxpY2l0bHkgc3BlY2lmaWVkXG4gICAgLy8gdGhhdCB3ZSBkbyBzbzsgdGhpcyBpcyBhYnNvbHV0ZWx5IG5vdCBzb21ldGhpbmcgd2Ugd2FudCB0byBkbyBhcyBhXG4gICAgLy8gZ2VuZXJhbCBwcmFjdGljZSwgYnV0IHVuZm9ydHVuYXRlbHkgdGhlcmUgYXJlIHNvbWUgc2l0dWF0aW9ucyBpbiB3aGljaFxuICAgIC8vIGl0IGlzIGN1cnJlbnRseSBhIHJlcXVpcmVtZW50LlxuICAgIGNvbnN0IHBhcnNlciA9IHRoaXMucHJvcHMub3BlbkV4dGVybmFsTGlua3NJbk5ld1RhYlxuICAgICAgPyBtYXJrZG93blRvUmVhY3RFeHRlcm5hbExpbmtzXG4gICAgICA6IG1hcmtkb3duVG9SZWFjdDtcblxuICAgIGNvbnN0IHJlbmRlcmVkID0gcGFyc2VyLnByb2Nlc3NTeW5jKHRoaXMucHJvcHMubWFya2Rvd24pLmNvbnRlbnRzO1xuXG4gICAgY29uc3QgbWFya2Rvd25Qcm9wcyA9IHt9O1xuICAgIGlmICh0aGlzLnByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgbWFya2Rvd25Qcm9wcy5jbGFzc05hbWUgPSB0aGlzLnByb3BzLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgLy8gcmVoeXBlLXJlYWN0IHdpbGwgb25seSB3cmFwIHRoZSBjb21waWxlZCBtYXJrZG93biBpbiBhIDxkaXY+IHRhZ1xuICAgIC8vIGlmIGl0IG5lZWRzIHRvIChpZSwgaWYgdGhlcmUgd291bGQgb3RoZXJ3aXNlIGJlIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgLy8gcmV0dXJuZWQpIG9yIHdlJ3JlIGFzc2lnbmluZyBwcm9wcy4gV2UgcHJlZmVyIGNvbnNpc3RlbmN5IG92ZXIgZmxleGliaWxpdHksXG4gICAgLy8gc28gaGVyZSB3ZSB3cmFwIHRoZSByZXN1bHQgaW4gYSBkaXYgaWYgaXQgd2Fzbid0IGFscmVhZHlcbiAgICBpZiAoXG4gICAgICByZW5kZXJlZCAmJlxuICAgICAgcmVuZGVyZWQudHlwZSA9PT0gJ2RpdicgJiZcbiAgICAgICFPYmplY3Qua2V5cyhtYXJrZG93blByb3BzKS5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiByZW5kZXJlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDxkaXYgey4uLm1hcmtkb3duUHJvcHN9PntyZW5kZXJlZH08L2Rpdj47XG4gICAgfVxuICB9XG59XG5cbi8vIGNyZWF0ZSBjdXN0b20gc2FuaXRpemF0aW9uIHNjaGVtYSBhcyBwZXJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zeW50YXgtdHJlZS9oYXN0LXV0aWwtc2FuaXRpemUjc2NoZW1hXG4vLyB0byBzdXBwb3J0IG91ciBjdXN0b20gc3ludGF4ZXNcbmNvbnN0IHNjaGVtYSA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRTYW5pdGl6YXRpb25TY2hlbWEpO1xuXG4vLyBXZSB1c2UgYSBfbG90XyBvZiBpbWFnZSBmb3JtYXR0aW5nIHN0dWZmIGluIG91clxuLy8gaW5zdHJ1Y3Rpb25zLCBwYXJ0aWN1bGFybHkgaW4gQ1NQXG5zY2hlbWEuYXR0cmlidXRlcy5pbWcucHVzaCgnaGVpZ2h0JywgJ3dpZHRoJyk7XG5cbi8vIEFkZCBzdXBwb3J0IGZvciBleHBhbmRhYmxlSW1hZ2VzXG5zY2hlbWEudGFnTmFtZXMucHVzaCgnc3BhbicpO1xuc2NoZW1hLmF0dHJpYnV0ZXMuc3BhbiA9IFsnZGF0YVVybCcsICdjbGFzc05hbWUnXTtcblxuLy8gQWRkIHN1cHBvcnQgZm9yIGlubGluZSBzdHlsZXMgKGdyb3NzKVxuLy8gVE9ETyByZXBsYWNlIGFsbCBpbmxpbmUgc3R5bGVzIGluIG91ciBjdXJyaWN1bHVtIGNvbnRlbnQgd2l0aFxuLy8gc2VtYW50aWNhbGx5LXNpZ25pZmljYW50IGNvbnRlbnRcbnNjaGVtYS5hdHRyaWJ1dGVzWycqJ10ucHVzaCgnc3R5bGUnLCAnY2xhc3NOYW1lJyk7XG5cbi8vIENsaWNrYWJsZVRleHQgdXNlcyBkYXRhLWlkIG9uIGEgYm9sZCB0YWcuXG5zY2hlbWEuYXR0cmlidXRlc1snYiddID0gWydkYXRhSWQnXTtcblxuLy8gQWRkIHN1cHBvcnQgZm9yIEJsb2NrbHkgWE1MXG5zY2hlbWEuY2xvYmJlciA9IFtdO1xuY29uc3QgYmxvY2tseVRhZ3MgPSBbXG4gICdibG9jaycsXG4gICdmdW5jdGlvbmFsX2lucHV0JyxcbiAgJ211dGF0aW9uJyxcbiAgJ25leHQnLFxuICAnc3RhdGVtZW50JyxcbiAgJ3RpdGxlJyxcbiAgJ2ZpZWxkJyxcbiAgJ3ZhbHVlJyxcbiAgJ3htbCcsXG5dO1xuc2NoZW1hLnRhZ05hbWVzID0gc2NoZW1hLnRhZ05hbWVzLmNvbmNhdChibG9ja2x5VGFncyk7XG5sZXQgYmxvY2tseUNvbXBvbmVudFdyYXBwZXJzID0ge307XG5ibG9ja2x5VGFncy5mb3JFYWNoKHRhZyA9PiB7XG4gIHNjaGVtYS5hdHRyaWJ1dGVzW3RhZ10gPSBbJ2Jsb2NrX3RleHQnLCAnaWQnLCAnaW5saW5lJywgJ25hbWUnLCAndHlwZSddO1xuXG4gIC8vIENyZWF0ZSBhIFJlYWN0IGNvbXBvbmVudCB0byB3cmFwIGVhY2ggQmxvY2tseSB0YWcuIFNpbmNlIHRoZXNlIGVsZW1lbnRzIHVsdGltYXRlbHlcbiAgLy8gcmVuZGVyIGFzIFJlYWN0IGNvbXBvbmVudHMsIGNyZWF0aW5nIGEgd3JhcHBlciBtYWtlcyB0aGVtIHZhbGlkICh3aGVyZWFzIDx4bWw+XG4gIC8vIGlzIG5vdCBhIHZhbGlkIFJlYWN0IHRhZykuXG4gIGJsb2NrbHlDb21wb25lbnRXcmFwcGVyc1t0YWddID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgY29uc3QgQmxvY2tseUVsZW1lbnQgPSB0YWc7XG4gICAgLy8gVGhlIFwiaXNcIiBhdHRyaWJ1dGUgcHJldmVudHMgUmVhY3QgZnJvbSB3YXJuaW5nIGFib3V0IHVucmVjb2duaXplZCB0YWdzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTExODQjaXNzdWVjb21tZW50LTMzNTk0MjQzOVxuICAgIHJldHVybiA8QmxvY2tseUVsZW1lbnQgaXM9e3RhZ30gey4uLnByb3BzfSAvPjtcbiAgfTtcbn0pO1xuXG5jb25zdCBtYXJrZG93blRvUmVhY3QgPSBQYXJzZXIuY3JlYXRlKClcbiAgLmdldFBhcnNlcigpXG4gIC8vIGluY2x1ZGUgY3VzdG9tIHBsdWdpbnNcbiAgLnVzZShbXG4gICAgY2xpY2thYmxlVGV4dCxcbiAgICBleHBhbmRhYmxlSW1hZ2VzLFxuICAgIHZpc3VhbENvZGVCbG9jayxcbiAgICB4bWxBc1RvcExldmVsQmxvY2ssXG4gICAgZGV0YWlscyxcbiAgXSlcbiAgLy8gY29udmVydCBtYXJrZG93biB0byBhbiBIVE1MIEFic3RyYWN0IFN5bnRheCBUcmVlIChIQVNUKVxuICAudXNlKHJlbWFya1JlaHlwZSwge1xuICAgIC8vIGluY2x1ZGUgYW55IHJhdyBIVE1MIGluIHRoZSBtYXJrZG93biBhcyByYXcgSFRNTCBub2RlcyBpbiB0aGUgSEFTVFxuICAgIGFsbG93RGFuZ2Vyb3VzSFRNTDogdHJ1ZSxcbiAgfSlcbiAgLy8gcGFyc2UgdGhlIHJhdyBIVE1MIG5vZGVzIGluIHRoZSBIQVNUIHRvIGFjdHVhbCBIQVNUIG5vZGVzXG4gIC51c2UocmVoeXBlUmF3KVxuICAvLyBzYW5pdGl6ZSB0aGUgSEFTVFxuICAudXNlKHJlaHlwZVNhbml0aXplLCBzY2hlbWEpXG4gIC8vIGNvbnZlcnQgdGhlIEhBU1QgdG8gUmVhY3RcbiAgLnVzZShyZWh5cGVSZWFjdCwge1xuICAgIGNyZWF0ZUVsZW1lbnQ6IFJlYWN0LmNyZWF0ZUVsZW1lbnQsXG4gICAgLy8gVXNlIFJlYWN0IGNvbXBvbmVudCB3cmFwcGVycyBmb3IgQmxvY2tseSBYTUwgZWxlbWVudHMgdG8gcHJldmVudFxuICAgIC8vIFJlYWN0IGZyb20gd2FybmluZyB1cyBhYm91dCBpbnZhbGlkIGNvbXBvbmVudHMuXG4gICAgY29tcG9uZW50czogYmxvY2tseUNvbXBvbmVudFdyYXBwZXJzLFxuICB9KTtcblxuY29uc3QgbWFya2Rvd25Ub1JlYWN0RXh0ZXJuYWxMaW5rcyA9IG1hcmtkb3duVG9SZWFjdCgpLnVzZShleHRlcm5hbExpbmtzLCB7XG4gIGxpbmtzOiAnYWxsJyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTYWZlTWFya2Rvd247XG4iLCIvKipcbiAqIE9wZW4gZXh0ZXJuYWwgbGlua3MgaW4gYSBuZXcgdGFiLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlcm5hbExpbmtzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBQYXJzZXIgPSB0aGlzLlBhcnNlcjtcbiAgY29uc3QgdG9rZW5pemVycyA9IFBhcnNlci5wcm90b3R5cGUuaW5saW5lVG9rZW5pemVycztcbiAgY29uc3Qgb3JpZ2luYWwgPSB0b2tlbml6ZXJzLmxpbms7XG4gIGNvbnN0IGFsbCA9IG9wdGlvbnMubGlua3MgPT09ICdhbGwnO1xuXG4gIHRva2VuaXplcnMubGluayA9IGZ1bmN0aW9uIChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgICBjb25zdCBsaW5rID0gb3JpZ2luYWwuY2FsbCh0aGlzLCBlYXQsIHZhbHVlLCBzaWxlbnQpO1xuICAgIGlmIChsaW5rICYmIGxpbmsudHlwZSA9PT0gJ2xpbmsnICYmIChhbGwgfHwgaXNFeHRlcm5hbExpbmsobGluay51cmwpKSkge1xuICAgICAgbGluay5kYXRhID0gbGluay5kYXRhIHx8IHt9O1xuICAgICAgbGluay5kYXRhLmhQcm9wZXJ0aWVzID0gbGluay5kYXRhLmhQcm9wZXJ0aWVzIHx8IHt9O1xuXG4gICAgICBjb25zdCBwcm9wcyA9IGxpbmsuZGF0YS5oUHJvcGVydGllcztcbiAgICAgIHByb3BzLnRhcmdldCA9IHByb3BzLnRhcmdldCB8fCAnX2JsYW5rJztcbiAgICAgIHByb3BzLnJlbCA9ICdub3JlZmVycmVyIG5vb3BlbmVyJztcbiAgICB9XG5cbiAgICByZXR1cm4gbGluaztcbiAgfTtcbiAgdG9rZW5pemVycy5saW5rLmxvY2F0b3IgPSBvcmlnaW5hbC5sb2NhdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFeHRlcm5hbExpbmsodXJsKSB7XG4gIHJldHVybiAhL2h0dHBzPzpcXC9cXC8oW14uXStcXC4pKmNvZGUub3JnKDpbMC05XSspP1xcLy8udGVzdChmdWxseVF1YWxpZmllZCh1cmwpKTtcbn1cblxubGV0IGE7XG5mdW5jdGlvbiBmdWxseVF1YWxpZmllZChwYXRoKSB7XG4gIGEgPSBhIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgYS5ocmVmID0gcGF0aDtcbiAgcmV0dXJuIGEuaHJlZjtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtpc0xldmVsQXNzZXNzbWVudH0gZnJvbSAnLi9wcm9ncmVzc0hlbHBlcnMnO1xuaW1wb3J0IHtsZXZlbFdpdGhQcm9ncmVzc1R5cGV9IGZyb20gJy4vcHJvZ3Jlc3NUeXBlcyc7XG5pbXBvcnQge1xuICBCYXNpY0J1YmJsZSxcbiAgQnViYmxlTGluayxcbiAgQnViYmxlU2l6ZSxcbiAgQnViYmxlVG9vbHRpcCxcbiAgZ2V0QnViYmxlQ2xhc3NOYW1lcyxcbiAgZ2V0QnViYmxlQ29udGVudCxcbiAgZ2V0QnViYmxlU2hhcGUsXG4gIGdldEJ1YmJsZVVybCxcbn0gZnJvbSAnLi9CdWJibGVGYWN0b3J5JztcbmltcG9ydCB7bGV2ZWxQcm9ncmVzc1N0eWxlfSBmcm9tICcuL3Byb2dyZXNzU3R5bGVzJztcbmltcG9ydCB7UmV2aWV3U3RhdGVzfSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL2ZlZWRiYWNrL3R5cGVzJztcbmltcG9ydCBCdWJibGVCYWRnZSwge0JhZGdlVHlwZX0gZnJvbSAnLi9CdWJibGVCYWRnZSc7XG5pbXBvcnQgaTE4biBmcm9tICdAY2RvL2xvY2FsZSc7XG5cbi8qKlxuICogQSBQcm9ncmVzc0J1YmJsZSByZXByZXNlbnRzIHByb2dyZXNzIGZvciBhIHNwZWNpZmljIGxldmVsLiBJdCBjYW4gYmUgYSBjaXJjbGVcbiAqIG9yIGEgZGlhbW9uZCAob3IgYSBwaWxsIGluIHRoZSBjYXNlIG9mIHVucGx1Z2dlZCBsZXZlbHMpLCBhbmQgaXQgY2FuIGJlIGJpZ1xuICogb3Igc21hbGwuIFRoZSBmaWxsIGFuZCBvdXRsaW5lIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlIGxldmVsIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZ3Jlc3NCdWJibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGxldmVsOiBsZXZlbFdpdGhQcm9ncmVzc1R5cGUuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzbWFsbEJ1YmJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0ZWRTZWN0aW9uSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc2VsZWN0ZWRTdHVkZW50SWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5udW1iZXIsXG4gICAgXSksXG4gICAgaGlkZVRvb2xUaXBzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvLyBXZSBoYXZlIHRoZSBhYmlsaXR5IHRvIGhpZGUgdGhlIGFzc2Vzc21lbnQgY2hlY2ttYXJrIGJhZGdlIGJlY2F1c2VcbiAgICAvLyBpdCdzIHZpc3VhbGx5IGNsdXR0ZXJpbmcgaW4gcGxhY2VzIGxpa2UgdGhlIHRlYWNoZXIgcGFuZWwgYW5kIHByb2dyZXNzIHRhYmxlXG4gICAgaGlkZUFzc2Vzc21lbnRCYWRnZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgbGVzc29uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBpc0NsaWNrYWJsZSgpIHtcbiAgICBjb25zdCB7ZGlzYWJsZWQsIGxldmVsLCBvbkNsaWNrfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuICFkaXNhYmxlZCAmJiAoISFsZXZlbC51cmwgfHwgISFvbkNsaWNrKTtcbiAgfVxuXG4gIG9uQ2xpY2tMZXZlbCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2xpY2sodGhpcy5wcm9wcy5sZXZlbCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBvbkNsaWNrIHRha2VzIHByaW9yaXR5IG92ZXIgdXJsLCBzbyBpZiB3ZSBoYXZlIG9uQ2xpY2ssIHJldHVybiBudWxsXG4gICAqL1xuICBnZXRVcmwoKSB7XG4gICAgY29uc3Qge29uQ2xpY2ssIGxldmVsLCBzZWxlY3RlZFNlY3Rpb25JZCwgc2VsZWN0ZWRTdHVkZW50SWR9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gb25DbGlja1xuICAgICAgPyBudWxsXG4gICAgICA6IGdldEJ1YmJsZVVybChsZXZlbC51cmwsIHNlbGVjdGVkU3R1ZGVudElkLCBzZWxlY3RlZFNlY3Rpb25JZCwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXJCdWJibGVCYWRnZShidWJibGVTaGFwZSwgYnViYmxlU2l6ZSkge1xuICAgIGNvbnN0IHtsZXZlbCwgc21hbGxCdWJibGUsIGhpZGVBc3Nlc3NtZW50QmFkZ2V9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGhhc0tlZXBXb3JraW5nRmVlZGJhY2sgPVxuICAgICAgbGV2ZWwudGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGUgPT09IFJldmlld1N0YXRlcy5rZWVwV29ya2luZztcblxuICAgIGNvbnN0IGRpc3BsYXlBc3Nlc3NtZW50QmFkZ2UgPVxuICAgICAgaXNMZXZlbEFzc2Vzc21lbnQobGV2ZWwpICYmICFoaWRlQXNzZXNzbWVudEJhZGdlO1xuXG4gICAgaWYgKChkaXNwbGF5QXNzZXNzbWVudEJhZGdlIHx8IGhhc0tlZXBXb3JraW5nRmVlZGJhY2spICYmICFzbWFsbEJ1YmJsZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEJ1YmJsZUJhZGdlXG4gICAgICAgICAgYmFkZ2VUeXBlPXtcbiAgICAgICAgICAgIGhhc0tlZXBXb3JraW5nRmVlZGJhY2tcbiAgICAgICAgICAgICAgPyBCYWRnZVR5cGUua2VlcFdvcmtpbmdcbiAgICAgICAgICAgICAgOiBCYWRnZVR5cGUuYXNzZXNzbWVudFxuICAgICAgICAgIH1cbiAgICAgICAgICBidWJibGVTaXplPXtidWJibGVTaXplfVxuICAgICAgICAgIGJ1YmJsZVNoYXBlPXtidWJibGVTaGFwZX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQnViYmxlRWxlbWVudCgpIHtcbiAgICBjb25zdCB7bGV2ZWwsIHNtYWxsQnViYmxlLCBoaWRlVG9vbFRpcHN9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBidWJibGVTaXplID0gc21hbGxCdWJibGUgPyBCdWJibGVTaXplLmRvdCA6IEJ1YmJsZVNpemUuZnVsbDtcblxuICAgIGNvbnN0IGNvbnRlbnQgPSBnZXRCdWJibGVDb250ZW50KFxuICAgICAgbGV2ZWwuaXNMb2NrZWQsXG4gICAgICBsZXZlbC5pc1VucGx1Z2dlZCxcbiAgICAgIGxldmVsLmJvbnVzLFxuICAgICAgbGV2ZWwucGFpcmVkLFxuICAgICAgbGV2ZWwuYnViYmxlVGV4dCB8fCBsZXZlbC5sZXR0ZXIgfHwgbGV2ZWwubGV2ZWxOdW1iZXIsXG4gICAgICBidWJibGVTaXplXG4gICAgKTtcblxuICAgIGNvbnN0IGJ1YmJsZVNoYXBlID0gZ2V0QnViYmxlU2hhcGUoXG4gICAgICAvLyBvdmVycmlkZSBwaWxsIHNoYXBlIGZvciBzbWFsbCBidWJibGVzXG4gICAgICBsZXZlbC5pc1VucGx1Z2dlZCAmJiAhc21hbGxCdWJibGUsXG4gICAgICBsZXZlbC5pc0NvbmNlcHRMZXZlbFxuICAgICk7XG5cbiAgICBjb25zdCBidWJibGUgPSAoXG4gICAgICA8QmFzaWNCdWJibGVcbiAgICAgICAgc2hhcGU9e2J1YmJsZVNoYXBlfVxuICAgICAgICBzaXplPXtidWJibGVTaXplfVxuICAgICAgICBwcm9ncmVzc1N0eWxlPXtsZXZlbFByb2dyZXNzU3R5bGUobGV2ZWwuc3RhdHVzLCBsZXZlbC5raW5kKX1cbiAgICAgICAgY2xhc3NOYW1lcz17Z2V0QnViYmxlQ2xhc3NOYW1lcyh0aGlzLmlzQ2xpY2thYmxlKCkpfVxuICAgICAgPlxuICAgICAgICB7Y29udGVudH1cbiAgICAgICAge3RoaXMucmVuZGVyQnViYmxlQmFkZ2UoYnViYmxlU2hhcGUsIGJ1YmJsZVNpemUpfVxuICAgICAgPC9CYXNpY0J1YmJsZT5cbiAgICApO1xuXG4gICAgaWYgKGhpZGVUb29sVGlwcykge1xuICAgICAgcmV0dXJuIGJ1YmJsZTtcbiAgICB9XG4gICAgcmV0dXJuIDxCdWJibGVUb29sdGlwIGxldmVsPXtsZXZlbH0+e2J1YmJsZX08L0J1YmJsZVRvb2x0aXA+O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGxldmVsID0gdGhpcy5wcm9wcy5sZXZlbDtcbiAgICBjb25zdCBsZXZlbElEID0gbGV2ZWwuYnViYmxlVGV4dCB8fCBsZXZlbC5sZXR0ZXIgfHwgbGV2ZWwubGV2ZWxOdW1iZXI7XG4gICAgY29uc3QgbGVzc29uTmFtZSA9IHRoaXMucHJvcHMubGVzc29uTmFtZTtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBpMThuLnByb2dyZXNzQnViYmxlRGVzY3JpcHRpb24oe1xuICAgICAgbGV2ZWxJRDogbGV2ZWxJRCxcbiAgICB9KTtcbiAgICBpZiAobGVzc29uTmFtZSkge1xuICAgICAgZGVzY3JpcHRpb24gPSBpMThuLnByb2dyZXNzQnViYmxlRGVzY3JpcHRpb25XaXRoTGVzc29uKHtcbiAgICAgICAgbGV2ZWxJRDogbGV2ZWxJRCxcbiAgICAgICAgbGVzc29uTmFtZTogbGVzc29uTmFtZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0NsaWNrYWJsZSgpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QnViYmxlTGlua1xuICAgICAgICAgIHVybD17dGhpcy5nZXRVcmwoKX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tMZXZlbH1cbiAgICAgICAgICBhMTF5X2Rlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLmNyZWF0ZUJ1YmJsZUVsZW1lbnQoKX1cbiAgICAgICAgPC9CdWJibGVMaW5rPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQnViYmxlRWxlbWVudCgpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBBbiBvcmRlcmVkIHNldCBvZiBwcm9ncmVzcyBidWJibGVzLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbmltcG9ydCBQcm9ncmVzc0J1YmJsZSBmcm9tICcuL1Byb2dyZXNzQnViYmxlJztcbmltcG9ydCBjb2xvciBmcm9tICdAY2RvL2FwcHMvdXRpbC9jb2xvcic7XG5pbXBvcnQge2xldmVsV2l0aFByb2dyZXNzVHlwZX0gZnJvbSAnLi9wcm9ncmVzc1R5cGVzJztcbmltcG9ydCB7RE9UX1NJWkUsIERJQU1PTkRfRE9UX1NJWkV9IGZyb20gJy4vcHJvZ3Jlc3NTdHlsZXMnO1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbi8vIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgUHJvZ3Jlc3NUYWJsZURldGFpbENlbGxcbi8vIGNvbXBvbmVudCB3aWxsIGJlIHJlbW92ZWQgYXMgcGFydCBvZiBodHRwczovL2NvZGVkb3RvcmcuYXRsYXNzaWFuLm5ldC9icm93c2UvTFAtMTYwNlxuY2xhc3MgUHJvZ3Jlc3NCdWJibGVTZXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGxldmVsczogUHJvcFR5cGVzLmFycmF5T2YobGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlKS5pc1JlcXVpcmVkLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbGVjdGVkU2VjdGlvbklkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHNlbGVjdGVkU3R1ZGVudElkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgIF0pLFxuICAgIGhpZGVUb29sVGlwczogUHJvcFR5cGVzLmJvb2wsXG4gICAgbGVzc29uRXh0cmFzRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1N1YmxldmVsczogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25CdWJibGVDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbGVzc29uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvLyBSZWR1eFxuICAgIGlzUnRsOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICByZW5kZXJCdWJibGUgPSAobGV2ZWwsIGluZGV4LCBpc1N1YmxldmVsKSA9PiB7XG4gICAgY29uc3Qge2xldmVscywgc2VsZWN0ZWRTZWN0aW9uSWQsIHNlbGVjdGVkU3R1ZGVudElkLCBpc1J0bH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gQWRqdXN0IGJhY2tncm91bmQgc3R5bGVzIGlmIGxvY2FsZSBpcyBSVExcbiAgICBjb25zdCBiYWNrZ3JvdW5kRmlyc3RTdHlsZSA9IGlzUnRsXG4gICAgICA/IHN0eWxlcy5iYWNrZ3JvdW5kTGFzdFxuICAgICAgOiBzdHlsZXMuYmFja2dyb3VuZEZpcnN0O1xuICAgIGNvbnN0IGJhY2tncm91bmRMYXN0U3R5bGUgPSBpc1J0bFxuICAgICAgPyBzdHlsZXMuYmFja2dyb3VuZEZpcnN0XG4gICAgICA6IHN0eWxlcy5iYWNrZ3JvdW5kTGFzdDtcblxuICAgIGNvbnN0IGJhY2tncm91bmRTdHlsZVByb3AgPSB7XG4gICAgICAuLi5zdHlsZXMuYmFja2dyb3VuZCxcbiAgICAgIC4uLihsZXZlbC5pc0NvbmNlcHRMZXZlbCAmJiBzdHlsZXMuYmFja2dyb3VuZERpYW1vbmQpLFxuICAgICAgLi4uKGlzU3VibGV2ZWwgJiYgc3R5bGVzLmJhY2tncm91bmRTdWJsZXZlbCksXG4gICAgICAuLi4obGV2ZWwuaXNVbnBsdWdnZWQgJiYgc3R5bGVzLmJhY2tncm91bmRQaWxsKSxcbiAgICAgIC4uLighaXNTdWJsZXZlbCAmJiBpbmRleCA9PT0gMCAmJiBiYWNrZ3JvdW5kRmlyc3RTdHlsZSksXG4gICAgICAuLi4oIWlzU3VibGV2ZWwgJiZcbiAgICAgICAgIWxldmVsLnN1YmxldmVscyAmJlxuICAgICAgICBpbmRleCA9PT0gbGV2ZWxzLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgYmFja2dyb3VuZExhc3RTdHlsZSksXG4gICAgfTtcblxuICAgIGNvbnN0IGNvbnRhaW5lclN0eWxlUHJvcCA9IHtcbiAgICAgIC4uLnN0eWxlcy5jb250YWluZXIsXG4gICAgICAuLi4obGV2ZWwuaXNVbnBsdWdnZWQgJiYgc3R5bGVzLnBpbGxDb250YWluZXIpLFxuICAgICAgLi4uKGxldmVsLmlzQ29uY2VwdExldmVsICYmIHN0eWxlcy5kaWFtb25kQ29udGFpbmVyKSxcbiAgICAgIC4uLihpc1N1YmxldmVsICYmIHN0eWxlcy5jb250YWluZXJTdWJsZXZlbCksXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMud2l0aEJhY2tncm91bmR9IGtleT17aW5kZXh9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtiYWNrZ3JvdW5kU3R5bGVQcm9wfSAvPlxuICAgICAgICA8ZGl2IHN0eWxlPXtjb250YWluZXJTdHlsZVByb3B9PlxuICAgICAgICAgIDxQcm9ncmVzc0J1YmJsZVxuICAgICAgICAgICAgbGV2ZWw9e2xldmVsfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICBzbWFsbEJ1YmJsZT17aXNTdWJsZXZlbH1cbiAgICAgICAgICAgIHNlbGVjdGVkU2VjdGlvbklkPXtzZWxlY3RlZFNlY3Rpb25JZH1cbiAgICAgICAgICAgIHNlbGVjdGVkU3R1ZGVudElkPXtzZWxlY3RlZFN0dWRlbnRJZH1cbiAgICAgICAgICAgIGhpZGVUb29sVGlwcz17dGhpcy5wcm9wcy5oaWRlVG9vbFRpcHN9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQnViYmxlQ2xpY2t9XG4gICAgICAgICAgICBsZXNzb25OYW1lPXt0aGlzLnByb3BzLmxlc3Nvbk5hbWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7bGV2ZWxzLCBzdHlsZSwgc2hvd1N1YmxldmVsc30gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXt7Li4uc3R5bGVzLm1haW4sIC4uLnN0eWxlfX0+XG4gICAgICAgIHtsZXZlbHMubWFwKChsZXZlbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlckJ1YmJsZShsZXZlbCwgaW5kZXgsIGZhbHNlKX1cbiAgICAgICAgICAgICAge3Nob3dTdWJsZXZlbHMgJiZcbiAgICAgICAgICAgICAgICBsZXZlbC5zdWJsZXZlbHMgJiZcbiAgICAgICAgICAgICAgICBsZXZlbC5zdWJsZXZlbHMubWFwKChzdWJsZXZlbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckJ1YmJsZShzdWJsZXZlbCwgaW5kZXgsIHRydWUpfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIG1haW46IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgfSxcbiAgd2l0aEJhY2tncm91bmQ6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgfSxcbiAgYmFja2dyb3VuZDoge1xuICAgIGhlaWdodDogMTAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5saWdodGVyX2dyYXksXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICAvLyBkb3Qgc2l6ZSwgcGx1cyBib3JkZXJzLCBwbHVzIG1hcmdpbiwgbWludXMgb3VyIGhlaWdodCBvZiBcImJhY2tncm91bmRcIlxuICAgIHRvcDogKERPVF9TSVpFICsgNCArIDYgLSAxMCkgLyAyLFxuICB9LFxuICBiYWNrZ3JvdW5kRGlhbW9uZDoge1xuICAgIHRvcDogKERJQU1PTkRfRE9UX1NJWkUgKyA0ICsgMTIgLSAxMCkgLyAyLFxuICB9LFxuICBiYWNrZ3JvdW5kUGlsbDoge1xuICAgIC8vIHBpbGwgaGFzIGhlaWdodCBvZiAxOCwgYm9yZGVyIG9mIDIsIHBhZGRpbmcgb2YgNiwgbWFyZ2luIG9mIDNcbiAgICB0b3A6ICgxOCArIDQgKyAxMiArIDYgLSAxMCkgLyAyLFxuICB9LFxuICBiYWNrZ3JvdW5kU3VibGV2ZWw6IHtcbiAgICB0b3A6IDksXG4gIH0sXG4gIGJhY2tncm91bmRGaXJzdDoge1xuICAgIGxlZnQ6IDE1LFxuICB9LFxuICBiYWNrZ3JvdW5kTGFzdDoge1xuICAgIHJpZ2h0OiAxNSxcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIH0sXG4gIGNvbnRhaW5lclN1YmxldmVsOiB7XG4gICAgdG9wOiA1LFxuICB9LFxuICBkaWFtb25kQ29udGFpbmVyOiB7XG4gICAgLy8gSGVpZ2h0IG5lZWRlZCBvbmx5IGJ5IElFIHRvIGdldCBkaWFtb25kcyB0byBsaW5lIHVwIHByb3Blcmx5XG4gICAgaGVpZ2h0OiAzNixcbiAgfSxcbiAgcGlsbENvbnRhaW5lcjoge1xuICAgIG1hcmdpblJpZ2h0OiAyLFxuICAgIC8vIEhlaWdodCBuZWVkZWQgb25seSBieSBJRSB0byBnZXQgcGlsbCB0byBsaW5lIHVwIHByb3Blcmx5XG4gICAgaGVpZ2h0OiAzNyxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFByb2dyZXNzQnViYmxlU2V0ID0gUHJvZ3Jlc3NCdWJibGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgaXNSdGw6IHN0YXRlLmlzUnRsLFxufSkpKFJhZGl1bShQcm9ncmVzc0J1YmJsZVNldCkpO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvZ3Jlc3NMZXZlbFNldCBmcm9tICcuL1Byb2dyZXNzTGV2ZWxTZXQnO1xuaW1wb3J0IFByb2dyZXNzQnViYmxlU2V0IGZyb20gJy4vUHJvZ3Jlc3NCdWJibGVTZXQnO1xuaW1wb3J0IHtsZXZlbFdpdGhQcm9ncmVzc1R5cGV9IGZyb20gJy4vcHJvZ3Jlc3NUeXBlcyc7XG5pbXBvcnQge3Byb2dyZXNzaW9uc0Zyb21MZXZlbHN9IGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby9wcm9ncmVzc1JlZHV4U2VsZWN0b3JzJztcbmltcG9ydCBTYWZlTWFya2Rvd24gZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9TYWZlTWFya2Rvd24nO1xuaW1wb3J0IGkxOG4gZnJvbSAnQGNkby9sb2NhbGUnO1xuaW1wb3J0IGZvbnRDb25zdGFudHMgZnJvbSAnQGNkby9hcHBzL2ZvbnRDb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc0xlc3NvbkNvbnRlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxldmVsczogUHJvcFR5cGVzLmFycmF5T2YobGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlKS5pc1JlcXVpcmVkLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdGVkU2VjdGlvbklkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGxlc3Nvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtkZXNjcmlwdGlvbiwgbGV2ZWxzLCBkaXNhYmxlZCwgc2VsZWN0ZWRTZWN0aW9uSWQsIGxlc3Nvbk5hbWV9ID1cbiAgICAgIHRoaXMucHJvcHM7XG4gICAgY29uc3QgcHJvZ3Jlc3Npb25zID0gcHJvZ3Jlc3Npb25zRnJvbUxldmVscyhsZXZlbHMpO1xuXG4gICAgbGV0IGJ1YmJsZXM7XG4gICAgaWYgKHByb2dyZXNzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJ1YmJsZXMgPSAoXG4gICAgICAgIDxzcGFuIHN0eWxlPXtzdHlsZXMubm9MZXZlbHNXYXJuaW5nfT5cbiAgICAgICAgICB7aTE4bi5sZXNzb25Db250YWluc05vTGV2ZWxzKCl9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChwcm9ncmVzc2lvbnMubGVuZ3RoID09PSAxICYmICFwcm9ncmVzc2lvbnNbMF0ubmFtZSkge1xuICAgICAgYnViYmxlcyA9IChcbiAgICAgICAgPFByb2dyZXNzQnViYmxlU2V0XG4gICAgICAgICAgbGV2ZWxzPXtwcm9ncmVzc2lvbnNbMF0ubGV2ZWxzfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICBzZWxlY3RlZFNlY3Rpb25JZD17c2VsZWN0ZWRTZWN0aW9uSWR9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWJibGVzID0gcHJvZ3Jlc3Npb25zLm1hcCgocHJvZ3Jlc3Npb24sIGluZGV4KSA9PiAoXG4gICAgICAgIDxQcm9ncmVzc0xldmVsU2V0XG4gICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICBuYW1lPXtwcm9ncmVzc2lvbi5kaXNwbGF5TmFtZX1cbiAgICAgICAgICBsZXNzb25OYW1lPXtsZXNzb25OYW1lfVxuICAgICAgICAgIGxldmVscz17cHJvZ3Jlc3Npb24ubGV2ZWxzfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICBzZWxlY3RlZFNlY3Rpb25JZD17c2VsZWN0ZWRTZWN0aW9uSWR9XG4gICAgICAgIC8+XG4gICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge2Rlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuc3VtbWFyeX0+XG4gICAgICAgICAgICA8U2FmZU1hcmtkb3duIG1hcmtkb3duPXtkZXNjcmlwdGlvbn0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgPGRpdj4ge2J1YmJsZXN9IDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHN1bW1hcnk6IHtcbiAgICBtYXJnaW5Ub3A6IDIwLFxuICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgZm9udFNpemU6IDE0LFxuICAgIC4uLmZvbnRDb25zdGFudHNbJ21haW4tZm9udC1yZWd1bGFyJ10sXG4gIH0sXG4gIG5vTGV2ZWxzV2FybmluZzoge1xuICAgIGZvbnRTaXplOiAxMyxcbiAgfSxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbmltcG9ydCBQcm9ncmVzc0J1YmJsZVNldCBmcm9tICcuL1Byb2dyZXNzQnViYmxlU2V0JztcbmltcG9ydCBjb2xvciBmcm9tICdAY2RvL2FwcHMvdXRpbC9jb2xvcic7XG5pbXBvcnQge2xldmVsV2l0aFByb2dyZXNzVHlwZX0gZnJvbSAnLi9wcm9ncmVzc1R5cGVzJztcbmltcG9ydCB7Z2V0SWNvbkZvckxldmVsfSBmcm9tICcuL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQgUHJvZ3Jlc3NQaWxsIGZyb20gJy4vUHJvZ3Jlc3NQaWxsJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGZvbnRDb25zdGFudHMgZnJvbSAnQGNkby9hcHBzL2ZvbnRDb25zdGFudHMnO1xuXG4vKipcbiAqIEEgc2V0IG9mIG9uZSBvciBtb3JlIGxldmVscyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBzYW1lIHByb2dyZXNzaW9uXG4gKi9cbmNsYXNzIFByb2dyZXNzTGV2ZWxTZXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGVzc29uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsZXZlbHM6IFByb3BUeXBlcy5hcnJheU9mKGxldmVsV2l0aFByb2dyZXNzVHlwZSkuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzZWxlY3RlZFNlY3Rpb25JZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkJ1YmJsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvLyBSZWR1eFxuICAgIGlzUnRsOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSxcbiAgICAgIGxldmVscyxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgc2VsZWN0ZWRTZWN0aW9uSWQsXG4gICAgICBvbkJ1YmJsZUNsaWNrLFxuICAgICAgaXNSdGwsXG4gICAgICBsZXNzb25OYW1lLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgbXVsdGlMZXZlbFN0ZXAgPSBsZXZlbHMubGVuZ3RoID4gMTtcbiAgICBjb25zdCB1cmwgPSBtdWx0aUxldmVsU3RlcCB8fCBvbkJ1YmJsZUNsaWNrID8gdW5kZWZpbmVkIDogbGV2ZWxzWzBdLnVybDtcbiAgICBjb25zdCBvbkNsaWNrID0gbXVsdGlMZXZlbFN0ZXAgPyB1bmRlZmluZWQgOiAoKSA9PiBvbkJ1YmJsZUNsaWNrKGxldmVsc1swXSk7XG5cbiAgICAvLyBBZGp1c3QgY29sdW1uIHN0eWxlcyBpZiBsb2NhbGUgaXMgUlRMXG4gICAgY29uc3QgY29sMlN0eWxlID0gaXNSdGwgPyBzdHlsZXMuY29sMlJUTCA6IHN0eWxlcy5jb2wyO1xuXG4gICAgbGV0IHBpbGxUZXh0LCBpY29uO1xuICAgIGxldCBwcm9ncmVzc1N0eWxlID0gZmFsc2U7XG4gICAgaWYgKGxldmVsc1swXS5pc1VucGx1Z2dlZCB8fCBsZXZlbHNbbGV2ZWxzLmxlbmd0aCAtIDFdLmlzVW5wbHVnZ2VkKSB7XG4gICAgICAvLyBXZSBleHBsaWNpdGx5IGRvbid0IHdhbnQgYW55IHRleHQgaW4gdGhpcyBjYXNlXG4gICAgICBpZiAobXVsdGlMZXZlbFN0ZXApIHtcbiAgICAgICAgcGlsbFRleHQgPSAnJztcbiAgICAgICAgaWNvbiA9IGdldEljb25Gb3JMZXZlbChsZXZlbHNbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGlsbFRleHQgPSBpMThuLnVucGx1Z2dlZEFjdGl2aXR5KCk7XG4gICAgICAgIHByb2dyZXNzU3R5bGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwaWxsVGV4dCA9IGxldmVsc1swXS5sZXZlbE51bWJlci50b1N0cmluZygpO1xuICAgICAgaWNvbiA9IGdldEljb25Gb3JMZXZlbChsZXZlbHNbMF0pO1xuICAgICAgaWYgKG11bHRpTGV2ZWxTdGVwKSB7XG4gICAgICAgIHBpbGxUZXh0ICs9IGAtJHtsZXZlbHNbbGV2ZWxzLmxlbmd0aCAtIDFdLmxldmVsTnVtYmVyfWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZSBzdHlsZT17c3R5bGVzLnRhYmxlfT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17c3R5bGVzLmNvbDF9PlxuICAgICAgICAgICAgICA8UHJvZ3Jlc3NQaWxsXG4gICAgICAgICAgICAgICAgbGV2ZWxzPXtsZXZlbHN9XG4gICAgICAgICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICAgICAgICB0ZXh0PXtwaWxsVGV4dH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTZWN0aW9uSWQ9e3NlbGVjdGVkU2VjdGlvbklkfVxuICAgICAgICAgICAgICAgIHByb2dyZXNzU3R5bGU9e3Byb2dyZXNzU3R5bGV9XG4gICAgICAgICAgICAgICAgb25TaW5nbGVMZXZlbENsaWNrPXtvbkJ1YmJsZUNsaWNrfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17Y29sMlN0eWxlfT5cbiAgICAgICAgICAgICAgPGEgaHJlZj17dXJsfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7Li4uc3R5bGVzLm5hbWVUZXh0LCAuLi5zdHlsZXMudGV4dH19PntuYW1lfTwvZGl2PlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAge211bHRpTGV2ZWxTdGVwICYmIChcbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5lc0FuZERvdH0+XG4gICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudmVydGljYWxMaW5lfSAvPlxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmhvcml6b250YWxMaW5lfSAvPlxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmRvdH0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkIHN0eWxlPXtzdHlsZXMuY29sMn0+XG4gICAgICAgICAgICAgICAgPFByb2dyZXNzQnViYmxlU2V0XG4gICAgICAgICAgICAgICAgICBsZXZlbHM9e2xldmVsc31cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2VjdGlvbklkPXtzZWxlY3RlZFNlY3Rpb25JZH1cbiAgICAgICAgICAgICAgICAgIG9uQnViYmxlQ2xpY2s9e29uQnViYmxlQ2xpY2t9XG4gICAgICAgICAgICAgICAgICBsZXNzb25OYW1lPXtsZXNzb25OYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICB0YWJsZToge1xuICAgIG1hcmdpblRvcDogMTIsXG4gIH0sXG4gIG5hbWVUZXh0OiB7XG4gICAgY29sb3I6IGNvbG9yLmNoYXJjb2FsLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgLi4uZm9udENvbnN0YW50c1snbWFpbi1mb250LXNlbWktYm9sZCddLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAtMC4xMixcbiAgfSxcbiAgY29sMjoge1xuICAgIHBhZGRpbmdMZWZ0OiAyMCxcbiAgfSxcbiAgY29sMlJUTDoge1xuICAgIHBhZGRpbmdSaWdodDogMjAsXG4gIH0sXG4gIGxpbmVzQW5kRG90OiB7XG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgbWFyZ2luTGVmdDogJzUwJScsXG4gICAgbWFyZ2luUmlnaHQ6IDE0LFxuICB9LFxuICB2ZXJ0aWNhbExpbmU6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmxpZ2h0ZXJfZ3JheSxcbiAgICBoZWlnaHQ6IDE1LFxuICAgIHdpZHRoOiAzLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJvdHRvbTogMixcbiAgfSxcbiAgaG9yaXpvbnRhbExpbmU6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmxpZ2h0ZXJfZ3JheSxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB0b3A6IC0yLFxuICAgIGhlaWdodDogMyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9LFxuICBkb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBsZWZ0OiAtMixcbiAgICB0b3A6IDEsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5saWdodGVyX2dyYXksXG4gICAgaGVpZ2h0OiAxMCxcbiAgICB3aWR0aDogMTAsXG4gICAgYm9yZGVyUmFkaXVzOiAxMCxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBVbmNvbm5lY3RlZFByb2dyZXNzTGV2ZWxTZXQgPSBQcm9ncmVzc0xldmVsU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHN0YXRlID0+ICh7XG4gIGlzUnRsOiBzdGF0ZS5pc1J0bCxcbn0pKShSYWRpdW0oUHJvZ3Jlc3NMZXZlbFNldCkpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG5pbXBvcnQgRm9udEF3ZXNvbWUgZnJvbSAnLi4vRm9udEF3ZXNvbWUnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ0BjZG8vYXBwcy91dGlsL2NvbG9yJztcbmltcG9ydCB7bGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlfSBmcm9tICcuL3Byb2dyZXNzVHlwZXMnO1xuaW1wb3J0IHtsZXZlbFByb2dyZXNzU3R5bGUsIGhvdmVyU3R5bGV9IGZyb20gJy4vcHJvZ3Jlc3NTdHlsZXMnO1xuaW1wb3J0IHtxdWVyeVBhcmFtc30gZnJvbSAnQGNkby9hcHBzL2NvZGUtc3R1ZGlvL3V0aWxzJztcbmltcG9ydCB7aXNMZXZlbEFzc2Vzc21lbnR9IGZyb20gJy4vcHJvZ3Jlc3NIZWxwZXJzJztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtSZXZpZXdTdGF0ZXN9IGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvZmVlZGJhY2svdHlwZXMnO1xuaW1wb3J0IEJ1YmJsZUJhZGdlLCB7QmFkZ2VUeXBlfSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL3Byb2dyZXNzL0J1YmJsZUJhZGdlJztcbmltcG9ydCB7XG4gIEJ1YmJsZVNoYXBlLFxuICBCdWJibGVTaXplLFxuICBnZXRCdWJibGVVcmwsXG59IGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvcHJvZ3Jlc3MvQnViYmxlRmFjdG9yeSc7XG5pbXBvcnQgZm9udENvbnN0YW50cyBmcm9tICdAY2RvL2FwcHMvZm9udENvbnN0YW50cyc7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgaXMgc2ltaWxhciB0byBvdXIgUHJvZ3Jlc3NCdWJibGUsIGV4Y2VwdCB0aGF0IGluc3RlYWQgb2YgYmVpbmdcbiAqIGEgY2lyY2xlIHdpdGggYSBudW1iZXIgaW5zaWRlLCBpdCBpcyBhbiBlbGxpcHNlIHdpdGggdGV4dCAoYW5kIHBvc3NpYmx5IGFuXG4gKiBpY29uKVxuICovXG5jbGFzcyBQcm9ncmVzc1BpbGwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGxldmVsczogUHJvcFR5cGVzLmFycmF5T2YobGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlKSxcbiAgICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG9vbHRpcDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdGVkU2VjdGlvbklkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHByb2dyZXNzU3R5bGU6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uU2luZ2xlTGV2ZWxDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLy8gUmVkdXhcbiAgICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgZ2V0VXJsKCkge1xuICAgIGNvbnN0IHtsZXZlbHMsIGRpc2FibGVkLCBzZWxlY3RlZFNlY3Rpb25JZCwgb25TaW5nbGVMZXZlbENsaWNrfSA9XG4gICAgICB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgcGlsbExpbmtzVG9MZXZlbCA9XG4gICAgICAhZGlzYWJsZWQgJiYgIW9uU2luZ2xlTGV2ZWxDbGljayAmJiBsZXZlbHMubGVuZ3RoID09PSAxO1xuXG4gICAgaWYgKCFwaWxsTGlua3NUb0xldmVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdXNlcklkID0gcXVlcnlQYXJhbXMoJ3VzZXJfaWQnKTtcbiAgICByZXR1cm4gZ2V0QnViYmxlVXJsKGxldmVsc1swXS51cmwsIHVzZXJJZCwgc2VsZWN0ZWRTZWN0aW9uSWQpO1xuICB9XG5cbiAgZ2V0VG9vbHRpcFByb3BzKCkge1xuICAgIGNvbnN0IHt0b29sdGlwfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB0b29sdGlwUHJvcHMgPSB7fTtcbiAgICBpZiAodG9vbHRpcCkge1xuICAgICAgY29uc3QgaWQgPSB0b29sdGlwLnByb3BzLnRvb2x0aXBJZDtcbiAgICAgIHRvb2x0aXBQcm9wc1snZGF0YS10aXAnXSA9IHRydWU7XG4gICAgICB0b29sdGlwUHJvcHNbJ2RhdGEtZm9yJ10gPSBpZDtcbiAgICAgIHRvb2x0aXBQcm9wc1snYXJpYS1kZXNjcmliZWRieSddID0gaWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvb2x0aXBQcm9wcztcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBsZXZlbHMsXG4gICAgICBpY29uLFxuICAgICAgdGV4dCxcbiAgICAgIHRvb2x0aXAsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIHByb2dyZXNzU3R5bGUsXG4gICAgICBpc1J0bCxcbiAgICAgIG9uU2luZ2xlTGV2ZWxDbGljayxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGZpcnN0TGV2ZWwgPSBsZXZlbHNbMF07XG5cbiAgICBjb25zdCBtdWx0aUxldmVsU3RlcCA9IGxldmVscy5sZW5ndGggPiAxO1xuXG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmwoKTtcblxuICAgIGxldCBvbkNsaWNrID1cbiAgICAgICFtdWx0aUxldmVsU3RlcCAmJiAhZGlzYWJsZWQgJiYgIXVybFxuICAgICAgICA/ICgpID0+IG9uU2luZ2xlTGV2ZWxDbGljayhmaXJzdExldmVsKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBzdHlsZSA9IHtcbiAgICAgIC4uLnN0eWxlcy5sZXZlbFBpbGwsXG4gICAgICAuLi4oKHVybCB8fCBvbkNsaWNrKSAmJiBob3ZlclN0eWxlKSxcbiAgICAgIC4uLighbXVsdGlMZXZlbFN0ZXAgJiZcbiAgICAgICAgbGV2ZWxQcm9ncmVzc1N0eWxlKGZpcnN0TGV2ZWwuc3RhdHVzLCBmaXJzdExldmVsLmtpbmQpKSxcbiAgICB9O1xuXG4gICAgLy8gQWRqdXN0IGljb24gbWFyZ2lucyBpZiBsb2NhbGUgaXMgUlRMXG4gICAgY29uc3QgaWNvbk1hcmdpblN0eWxlID0gaXNSdGwgPyBzdHlsZXMuaWNvbk1hcmdpblJUTCA6IHN0eWxlcy5pY29uTWFyZ2luO1xuXG4gICAgY29uc3QgdG9vbHRpcFByb3BzID0gdGhpcy5nZXRUb29sdGlwUHJvcHMoKTtcblxuICAgIGNvbnN0IGhhc0tlZXBXb3JraW5nRmVlZGJhY2sgPVxuICAgICAgZmlyc3RMZXZlbFsndGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGUnXSA9PT0gUmV2aWV3U3RhdGVzLmtlZXBXb3JraW5nO1xuXG4gICAgLy8gT25seSBwdXQgdGhlIGJ1YmJsZSBiYWRnZSBvbiBpZiBpdHMgYSBzaW5nbGUgYXNzZXNzbWVudCBsZXZlbCAobm90IHNldClcbiAgICBjb25zdCBkaXNwbGF5QmFkZ2UgPVxuICAgICAgIW11bHRpTGV2ZWxTdGVwICYmXG4gICAgICAoaGFzS2VlcFdvcmtpbmdGZWVkYmFjayB8fCBpc0xldmVsQXNzZXNzbWVudChmaXJzdExldmVsKSk7XG5cbiAgICBjb25zdCB0ZXh0U3R5bGUgPSBwcm9ncmVzc1N0eWxlID8gc3R5bGVzLnRleHRQcm9ncmVzc1N0eWxlIDogc3R5bGVzLnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGFcbiAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICBzdHlsZT17e3RleHREZWNvcmF0aW9uOiAnbm9uZSd9fVxuICAgICAgICBjbGFzc05hbWU9XCJ1aXRlc3QtUHJvZ3Jlc3NQaWxsXCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgPGRpdiB7Li4udG9vbHRpcFByb3BzfSBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgIHtpY29uICYmIDxGb250QXdlc29tZSBpY29uPXtpY29ufSAvPn1cbiAgICAgICAgICB7dGV4dCAmJiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIlByb2dyZXNzUGlsbFRleHRBbmRJY29uXCJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAuLi50ZXh0U3R5bGUsXG4gICAgICAgICAgICAgICAgLi4uKGljb24gJiYgaWNvbk1hcmdpblN0eWxlKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RleHR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIHt0b29sdGlwfVxuICAgICAgICAgIHtkaXNwbGF5QmFkZ2UgJiYgKFxuICAgICAgICAgICAgPEJ1YmJsZUJhZGdlXG4gICAgICAgICAgICAgIGJhZGdlVHlwZT17XG4gICAgICAgICAgICAgICAgaGFzS2VlcFdvcmtpbmdGZWVkYmFja1xuICAgICAgICAgICAgICAgICAgPyBCYWRnZVR5cGUua2VlcFdvcmtpbmdcbiAgICAgICAgICAgICAgICAgIDogQmFkZ2VUeXBlLmFzc2Vzc21lbnRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBidWJibGVTaXplPXtCdWJibGVTaXplLmZ1bGx9XG4gICAgICAgICAgICAgIGJ1YmJsZVNoYXBlPXtCdWJibGVTaGFwZS5waWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbGV2ZWxQaWxsOiB7XG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyQ29sb3I6IGNvbG9yLmxpZ2h0ZXJfZ3JheSxcbiAgICBjb2xvcjogY29sb3IuY2hhcmNvYWwsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZvbnRTaXplOiAxNixcbiAgICAuLi5mb250Q29uc3RhbnRzWydtYWluLWZvbnQtc2VtaS1ib2xkJ10sXG4gICAgYm9yZGVyUmFkaXVzOiAyMCxcbiAgICBwYWRkaW5nTGVmdDogMTAsXG4gICAgcGFkZGluZ1JpZ2h0OiAxMCxcbiAgICBwYWRkaW5nVG9wOiA2LFxuICAgIHBhZGRpbmdCb3R0b206IDYsXG4gICAgbWluV2lkdGg6IDcwLFxuICAgIGxpbmVIZWlnaHQ6ICcxOHB4JyxcbiAgICBtYXJnaW5Ub3A6IDMsXG4gICAgbWFyZ2luQm90dG9tOiAzLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgLi4uZm9udENvbnN0YW50c1snbWFpbi1mb250LXNlbWktYm9sZCddLFxuICAgIGxldHRlclNwYWNpbmc6IC0wLjEyLFxuICB9LFxuICB0ZXh0UHJvZ3Jlc3NTdHlsZToge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIC4uLmZvbnRDb25zdGFudHNbJ21haW4tZm9udC1zZW1pLWJvbGQnXSxcbiAgICBmb250U2l6ZTogMTIsXG4gICAgbGV0dGVyU3BhY2luZzogLTAuMTIsXG4gICAgd2lkdGg6IDEyMCxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICB9LFxuICBpY29uTWFyZ2luOiB7XG4gICAgbWFyZ2luTGVmdDogMTAsXG4gIH0sXG4gIGljb25NYXJnaW5SVEw6IHtcbiAgICBtYXJnaW5SaWdodDogMTAsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVW5jb25uZWN0ZWRQcm9ncmVzc1BpbGwgPSBQcm9ncmVzc1BpbGw7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgaXNSdGw6IHN0YXRlLmlzUnRsLFxufSkpKFJhZGl1bShQcm9ncmVzc1BpbGwpKTtcbiIsIi8qKlxuICogVGhpcyBpcyBhIHNldCBvZiBoZWxwZXJzIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSB0ZXN0IGxldmVsL2xlc3NvbiBjb250ZW50LlxuICogSXQgbGl2ZXMgaW4gc3JjIGJlY2F1c2UgaXQncyB1c2VkIGJ5IGJvdGggc3RvcnkgZmlsZXMgYW5kIHRlc3QgZmlsZXMsIGFuZCBpdFxuICogYmV0dGVyIHRvIGhhdmUgdGVzdCByZXF1aXJlIGhlbHBlcnMgZnJvbSBzcmMsIHRoZW4gc3RvcnkgZmlsZXMgaW4gc3JjIHJlYWNoXG4gKiBpbnRvIHRlc3QuXG4gKi9cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7TGV2ZWxTdGF0dXN9IGZyb20gJ0BjZG8vYXBwcy91dGlsL3NoYXJlZENvbnN0YW50cyc7XG5pbXBvcnQge1xuICBsZXZlbFByb2dyZXNzRnJvbVNlcnZlcixcbiAgbGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uLFxufSBmcm9tICdAY2RvL2FwcHMvdGVtcGxhdGVzL3Byb2dyZXNzL3Byb2dyZXNzSGVscGVycyc7XG5pbXBvcnQge2NyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgSW1tdXRhYmxlIGZyb20gJ2ltbXV0YWJsZSc7XG5cbmV4cG9ydCBjb25zdCBmYWtlTGVzc29uID0gKFxuICBuYW1lLFxuICBpZCxcbiAgbG9ja2FibGUgPSBmYWxzZSxcbiAgbGVzc29uTnVtYmVyID0gdW5kZWZpbmVkLFxuICBsZXNzb25TdGFydFVybCA9ICdjb2RlLm9yZycsXG4gIGxldmVscyA9IFtdXG4pID0+ICh7XG4gIG5hbWUsXG4gIGlkLFxuICBsb2NrYWJsZSxcbiAgbGVzc29uTnVtYmVyLFxuICBsZXNzb25TdGFydFVybCxcbiAgaXNGb2N1c0FyZWE6IGZhbHNlLFxuICBsZXZlbHMsXG59KTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXZlbCA9IChvdmVycmlkZXMgPSB7fSkgPT4ge1xuICBjb25zdCBsZXZlbE51bWJlciA9IG92ZXJyaWRlcy5sZXZlbE51bWJlciB8fCAxO1xuICBjb25zdCBpZCA9IChvdmVycmlkZXMuaWQgfHwgbGV2ZWxOdW1iZXIpLnRvU3RyaW5nKCk7XG4gIGRlbGV0ZSBvdmVycmlkZXMuaWQ7XG4gIHJldHVybiB7XG4gICAgaWQ6IGlkLFxuICAgIHN0YXR1czogTGV2ZWxTdGF0dXMubm90X3RyaWVkLFxuICAgIGlzTG9ja2VkOiBmYWxzZSxcbiAgICBsZXZlbE51bWJlcjogbGV2ZWxOdW1iZXIsXG4gICAgYnViYmxlVGV4dDogbGV2ZWxOdW1iZXIudG9TdHJpbmcoKSxcbiAgICB1cmw6IGAvbGV2ZWwke2xldmVsTnVtYmVyfWAsXG4gICAgbmFtZTogYExldmVsICR7bGV2ZWxOdW1iZXJ9YCxcbiAgICBpc1VucGx1Z2dlZDogZmFsc2UsXG4gICAgLi4ub3ZlcnJpZGVzLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXZlbFdpdGhTdWJMZXZlbHMgPSAoXG4gIG51bVN1YmxldmVscyxcbiAgc3RhcnRMZXZlbCA9IDEsXG4gIG92ZXJyaWRlcyA9IHt9XG4pID0+IHtcbiAgY29uc3Qgc3VibGV2ZWxzID0gXy5yYW5nZShudW1TdWJsZXZlbHMpLm1hcChpbmRleCA9PiB7XG4gICAgY29uc3Qgb3ZlcnJpZGVEYXRhID0ge1xuICAgICAgaWQ6IGluZGV4ICsgc3RhcnRMZXZlbCxcbiAgICAgIGxldmVsTnVtYmVyOiBpbmRleCArIHN0YXJ0TGV2ZWwsXG4gICAgfTtcbiAgICByZXR1cm4gZmFrZUxldmVsKG92ZXJyaWRlRGF0YSk7XG4gIH0pO1xuICByZXR1cm4gZmFrZUxldmVsKHtcbiAgICBzdWJsZXZlbHM6IHN1YmxldmVscyxcbiAgICBpZDogc3RhcnRMZXZlbCArIG51bVN1YmxldmVscyxcbiAgICBsZXZlbE51bWJlcjogc3RhcnRMZXZlbCArIG51bVN1YmxldmVscyxcbiAgICAuLi5vdmVycmlkZXMsXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VMZXZlbHMgPSAobnVtTGV2ZWxzLCB7c3RhcnRMZXZlbCA9IDEsIG5hbWVkID0gdHJ1ZX0gPSB7fSkgPT5cbiAgXy5yYW5nZShudW1MZXZlbHMpLm1hcChpbmRleCA9PiB7XG4gICAgbGV0IG92ZXJyaWRlRGF0YSA9IHtcbiAgICAgIGlkOiBpbmRleCArIHN0YXJ0TGV2ZWwsXG4gICAgICBsZXZlbE51bWJlcjogaW5kZXggKyBzdGFydExldmVsLFxuICAgIH07XG4gICAgaWYgKCFuYW1lZCkge1xuICAgICAgb3ZlcnJpZGVEYXRhWyduYW1lJ10gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBmYWtlTGV2ZWwob3ZlcnJpZGVEYXRhKTtcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBmYWtlUHJvZ3Jlc3NGb3JMZXZlbHMgPSAoXG4gIGxldmVscyxcbiAgc3RhdHVzID0gTGV2ZWxTdGF0dXMubm90X3RyaWVkLFxuICBzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlcyA9IHt9XG4pID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3MgPSB7fTtcbiAgbGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIHByb2dyZXNzW2xldmVsLmlkXSA9IGxldmVsUHJvZ3Jlc3NGcm9tU2VydmVyKHtcbiAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgLi4uc2VydmVyUHJvZ3Jlc3NPdmVycmlkZXMsXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcHJvZ3Jlc3M7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIHNoZWxsIG9mIGEgcmVkdXggc3RvcmUgd2l0aCB0aGUgcHJvdmlkZWQgbGVzc29uSWQgYmVpbmcgaGlkZGVuXG4gKiBAcGFyYW0ge1ZpZXdUeXBlfSB2aWV3QXNcbiAqIEBwYXJhbSB7bnVtYmVyP30gbGVzc29uSWQgLSBMZXNzb24gdG8gaGlkZSAob3IgbnVsbCBpZiBub25lKVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU3RvcmVXaXRoSGlkZGVuTGVzc29uID0gKHZpZXdBcywgbGVzc29uSWQpID0+IHtcbiAgY29uc3Qgc2VjdGlvbklkID0gMTE7XG4gIHJldHVybiBjcmVhdGVTdG9yZShzdGF0ZSA9PiBzdGF0ZSwge1xuICAgIGxlc3NvbkxvY2s6IHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZDoge1xuICAgICAgICBbc2VjdGlvbklkXToge30sXG4gICAgICB9LFxuICAgICAgbG9ja2FibGVBdXRob3JpemVkOiBmYWxzZSxcbiAgICAgIGxvY2thYmxlQXV0aG9yaXplZExvYWRlZDogdHJ1ZSxcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZExvYWRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHZpZXdBczogdmlld0FzLFxuICAgIHRlYWNoZXJTZWN0aW9uczoge1xuICAgICAgc2VjdGlvbklkczogW3NlY3Rpb25JZF0sXG4gICAgICBzZWN0aW9uc0FyZUxvYWRlZDogdHJ1ZSxcbiAgICAgIHNlY3Rpb25zOiB7XG4gICAgICAgIFtzZWN0aW9uSWRdOiB7XG4gICAgICAgICAgaWQ6IDExLFxuICAgICAgICAgIG5hbWU6ICd0ZXN0IHNlY3Rpb24nLFxuICAgICAgICAgIGxlc3Nvbl9leHRyYXM6IHRydWUsXG4gICAgICAgICAgcGFpcmluZ19hbGxvd2VkOiB0cnVlLFxuICAgICAgICAgIHN0dWRlbnRDb3VudDogNCxcbiAgICAgICAgICBjb2RlOiAnVFFHU0pSJyxcbiAgICAgICAgICBwcm92aWRlck1hbmFnZWQ6IGZhbHNlLFxuICAgICAgICAgIGxlc3NvbnM6IHt9LFxuICAgICAgICAgIHR0c0F1dG9wbGF5RW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgbGVzc29uRXh0cmFzOiBmYWxzZSxcbiAgICAgICAgICBwYWlyaW5nQWxsb3dlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzZWxlY3RlZFNlY3Rpb25JZDogc2VjdGlvbklkLFxuICAgIH0sXG4gICAgaGlkZGVuTGVzc29uOiBJbW11dGFibGUuZnJvbUpTKHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb246IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHtbbGVzc29uSWRdOiB0cnVlfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgIHNjcmlwdE5hbWU6ICdzY3JpcHQtbmFtZScsXG4gICAgICBzY3JpcHRJZDogMTcsXG4gICAgICB1bml0UHJvZ3Jlc3NIYXNMb2FkZWQ6IHRydWUsXG4gICAgfSxcbiAgICBjdXJyZW50VXNlcjoge1xuICAgICAgdXNlcklkOiAxLFxuICAgIH0sXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBzaGVsbCBvZiBhIHJlZHV4IHN0b3JlIHdpdGggdGhlIHByb3ZpZGVkIGxlc3NvbklkIGJlaW5nIGhpZGRlblxuICogQHBhcmFtIHtWaWV3VHlwZX0gdmlld0FzXG4gKiBAcGFyYW0ge251bWJlcj99IGxlc3NvbklkIC0gTGVzc29uIHRvIGhpZGUgKG9yIG51bGwgaWYgbm9uZSlcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVN0b3JlV2l0aExvY2tlZExlc3NvbiA9IChcbiAgdmlld0FzLFxuICBsb2NrYWJsZUF1dGhvcml6ZWQgPSBmYWxzZVxuKSA9PiB7XG4gIGNvbnN0IHNlY3Rpb25JZCA9IDExO1xuICByZXR1cm4gY3JlYXRlU3RvcmUoc3RhdGUgPT4gc3RhdGUsIHtcbiAgICBsZXNzb25Mb2NrOiB7XG4gICAgICBsZXNzb25zQnlTZWN0aW9uSWQ6IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHt9LFxuICAgICAgfSxcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZExvYWRlZDogdHJ1ZSxcbiAgICAgIGxvY2thYmxlQXV0aG9yaXplZDogbG9ja2FibGVBdXRob3JpemVkLFxuICAgICAgbG9ja2FibGVBdXRob3JpemVkTG9hZGVkOiB0cnVlLFxuICAgIH0sXG4gICAgdmlld0FzOiB2aWV3QXMsXG4gICAgdGVhY2hlclNlY3Rpb25zOiB7XG4gICAgICBzZWxlY3RlZFNlY3Rpb25JZDogc2VjdGlvbklkLFxuICAgIH0sXG4gICAgaGlkZGVuTGVzc29uOiBJbW11dGFibGUuZnJvbUpTKHtcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb246IHtcbiAgICAgICAgW3NlY3Rpb25JZF06IHtbbGVzc29uSWRdOiB0cnVlfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgIHVuaXRQcm9ncmVzc0hhc0xvYWRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIGN1cnJlbnRVc2VyOiB7XG4gICAgICB1c2VySWQ6IDEsXG4gICAgfSxcbiAgfSk7XG59O1xuXG5jb25zdCByYW5kb21OdW1iZXJVcFRvMTAwID0gKCkgPT4ge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcbn07XG5cbmxldCBsZXNzb25JZCA9IDE7XG5cbmV4cG9ydCBjb25zdCBmYWtlTGVzc29uV2l0aExldmVscyA9IChvdmVycmlkZUZpZWxkcyA9IHt9LCBsZXZlbENvdW50ID0gMSkgPT4ge1xuICBjb25zdCBwb3NpdGlvbiA9IG92ZXJyaWRlRmllbGRzLnBvc2l0aW9uIHx8IHJhbmRvbU51bWJlclVwVG8xMDAoKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogbGVzc29uSWQrKyxcbiAgICBuYW1lOiBgTGVzc29uIC0gJHtwb3NpdGlvbn1gLFxuICAgIHRpdGxlOiBgTGVzc29uICR7cG9zaXRpb259OiBMZXNzb24gLSAke3Bvc2l0aW9ufWAsXG4gICAgbG9ja2FibGU6IGZhbHNlLFxuICAgIHJlbGF0aXZlX3Bvc2l0aW9uOiBwb3NpdGlvbixcbiAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgbGV2ZWxzOiBmYWtlTGV2ZWxzKGxldmVsQ291bnQpLFxuICAgIC4uLm92ZXJyaWRlRmllbGRzLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VTdHVkZW50cyA9IHN0dWRlbnRDb3VudCA9PiB7XG4gIHJldHVybiBBcnJheShzdHVkZW50Q291bnQpXG4gICAgLmZpbGwoKVxuICAgIC5tYXAoKF8sIGkpID0+ICh7XG4gICAgICBpZDogaSxcbiAgICAgIG5hbWU6IGBzdHVkZW50LSR7aX1gLFxuICAgICAgZmFtaWx5TmFtZTogYHN0dWRlbnQtJHtzdHVkZW50Q291bnQgLSBpfWAsXG4gICAgfSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VVbml0RGF0YSA9IChvdmVycmlkZUZpZWxkcyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IDEsXG4gICAgbmFtZTogJ2NzZDEtMjAyMCcsXG4gICAgdGl0bGU6ICdDU0QgVW5pdCAxIC0gUHJvYmxlbSBTb2x2aW5nIGFuZCBDb21wdXRpbmcgKDIwLTIxKScsXG4gICAgY3NmOiBmYWxzZSxcbiAgICBpc0NzZDogdHJ1ZSxcbiAgICBpc0NzcDogZmFsc2UsXG4gICAgbGVzc29uczogW10sXG4gICAgLi4ub3ZlcnJpZGVGaWVsZHMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVN0dWRlbnRMZXZlbFByb2dyZXNzID0gKFxuICBsZXZlbHMsXG4gIHN0dWRlbnRzLFxuICBzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlcyA9IHt9XG4pID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3NPbkxlc3NvbnMgPSBmYWtlUHJvZ3Jlc3NGb3JMZXZlbHMoXG4gICAgbGV2ZWxzLFxuICAgIHNlcnZlclByb2dyZXNzT3ZlcnJpZGVzLnN0YXR1cyxcbiAgICBzZXJ2ZXJQcm9ncmVzc092ZXJyaWRlc1xuICApO1xuXG4gIGNvbnN0IHN0dWRlbnRQcm9ncmVzcyA9IHt9O1xuICBzdHVkZW50cy5mb3JFYWNoKHN0dWRlbnQgPT4ge1xuICAgIHN0dWRlbnRQcm9ncmVzc1tzdHVkZW50LmlkXSA9IHByb2dyZXNzT25MZXNzb25zO1xuICB9KTtcblxuICByZXR1cm4gc3R1ZGVudFByb2dyZXNzO1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VTdHVkZW50TGFzdFVwZGF0ZSA9IHN0dWRlbnRzID0+IHtcbiAgY29uc3Qgc3R1ZGVudExhc3RVcGRhdGUgPSB7fTtcbiAgc3R1ZGVudHMuZm9yRWFjaChzdHVkZW50ID0+IHtcbiAgICBzdHVkZW50TGFzdFVwZGF0ZVtzdHVkZW50LmlkXSA9IERhdGUubm93KCk7XG4gIH0pO1xuICByZXR1cm4gc3R1ZGVudExhc3RVcGRhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgZmFrZVN0dWRlbnRMYXN0VXBkYXRlQnlTY3JpcHQgPSAoc2NyaXB0RGF0YSwgc3R1ZGVudHMpID0+IHtcbiAgcmV0dXJuIHtbc2NyaXB0RGF0YS5pZF06IGZha2VTdHVkZW50TGFzdFVwZGF0ZShzdHVkZW50cyl9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZha2VQcm9ncmVzc1RhYmxlUmVkdXhJbml0aWFsU3RhdGUgPSAoXG4gIGxlc3NvbnMsXG4gIHNjcmlwdERhdGEsXG4gIHN0dWRlbnRzID0gZmFrZVN0dWRlbnRzKDIpXG4pID0+IHtcbiAgaWYgKCFsZXNzb25zKSB7XG4gICAgY29uc3QgbGVzc29uMSA9IGZha2VMZXNzb25XaXRoTGV2ZWxzKHtwb3NpdGlvbjogMSwgbGV2ZWxzOiBmYWtlTGV2ZWxzKDEpfSk7XG4gICAgY29uc3QgbGVzc29uMiA9IGZha2VMZXNzb25XaXRoTGV2ZWxzKHtwb3NpdGlvbjogMiwgbGV2ZWxzOiBmYWtlTGV2ZWxzKDIpfSk7XG4gICAgbGVzc29ucyA9IFtsZXNzb24xLCBsZXNzb24yXTtcbiAgfVxuICBpZiAoIXNjcmlwdERhdGEpIHtcbiAgICBzY3JpcHREYXRhID0gZmFrZVVuaXREYXRhKHtsZXNzb25zOiBsZXNzb25zfSk7XG4gIH1cbiAgY29uc3QgbGV2ZWxQcm9ncmVzc0RhdGEgPSBmYWtlU3R1ZGVudExldmVsUHJvZ3Jlc3MoXG4gICAgc2NyaXB0RGF0YS5sZXNzb25zWzBdLmxldmVscyxcbiAgICBzdHVkZW50c1xuICApO1xuXG4gIGNvbnN0IHNlY3Rpb25JZCA9IHJhbmRvbU51bWJlclVwVG8xMDAoKTtcblxuICByZXR1cm4ge1xuICAgIGN1cnJlbnRVc2VyOiB7XG4gICAgICBpc1NvcnRlZEJ5RmFtaWx5TmFtZTogZmFsc2UsXG4gICAgfSxcbiAgICBwcm9ncmVzczoge1xuICAgICAgbGVzc29uR3JvdXBzOiBbXSxcbiAgICAgIGxlc3NvbnM6IGxlc3NvbnMsXG4gICAgICBmb2N1c0FyZWFMZXNzb25JZHM6IFtdLFxuICAgICAgZGVlcGVyTGVhcm5pbmdDb3Vyc2U6IGZhbHNlLFxuICAgIH0sXG4gICAgdGVhY2hlclNlY3Rpb25zOiB7XG4gICAgICBzZWN0aW9uczogW3tpZDogc2VjdGlvbklkfV0sXG4gICAgICBzZWxlY3RlZFNlY3Rpb25JZDogc2VjdGlvbklkLFxuICAgICAgc2VsZWN0ZWRTdHVkZW50czogc3R1ZGVudHMsXG4gICAgfSxcbiAgICBzZWN0aW9uUHJvZ3Jlc3M6IHtcbiAgICAgIHVuaXREYXRhQnlVbml0OiB7W3NjcmlwdERhdGEuaWRdOiBzY3JpcHREYXRhfSxcbiAgICAgIHN0dWRlbnRMZXZlbFByb2dyZXNzQnlVbml0OiB7XG4gICAgICAgIFtzY3JpcHREYXRhLmlkXTogbGV2ZWxQcm9ncmVzc0RhdGEsXG4gICAgICB9LFxuICAgICAgc3R1ZGVudExlc3NvblByb2dyZXNzQnlVbml0OiB7XG4gICAgICAgIFtzY3JpcHREYXRhLmlkXTogbGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uKFxuICAgICAgICAgIGxldmVsUHJvZ3Jlc3NEYXRhLFxuICAgICAgICAgIHNjcmlwdERhdGEubGVzc29uc1xuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIHN0dWRlbnRMYXN0VXBkYXRlQnlVbml0OiBmYWtlU3R1ZGVudExhc3RVcGRhdGVCeVNjcmlwdChcbiAgICAgICAgc2NyaXB0RGF0YSxcbiAgICAgICAgc3R1ZGVudHNcbiAgICAgICksXG4gICAgICBsZXNzb25PZkludGVyZXN0OiAxLFxuICAgIH0sXG4gICAgdW5pdFNlbGVjdGlvbjoge3NjcmlwdElkOiBzY3JpcHREYXRhLmlkfSxcbiAgICBsb2NhbGVzOiB7bG9jYWxlQ29kZTogJ2VuLVVTJ30sXG4gIH07XG59O1xuIiwiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bms7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvZ3Jlc3NMZXNzb25Db250ZW50IGZyb20gJy4vUHJvZ3Jlc3NMZXNzb25Db250ZW50JztcbmltcG9ydCB7ZmFrZUxldmVscywgZmFrZUxldmVsfSBmcm9tICcuL3Byb2dyZXNzVGVzdEhlbHBlcnMnO1xuaW1wb3J0IHtMZXZlbFN0YXR1c30gZnJvbSAnQGNkby9hcHBzL3V0aWwvc2hhcmVkQ29uc3RhbnRzJztcbmltcG9ydCB7cmVkdXhTdG9yZX0gZnJvbSAnQGNkby9zdG9yeWJvb2svZGVjb3JhdG9ycyc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50OiBQcm9ncmVzc0xlc3NvbkNvbnRlbnQsXG59O1xuXG5jb25zdCBUZW1wbGF0ZSA9IGFyZ3MgPT4gKFxuICA8UHJvdmlkZXIgc3RvcmU9e3JlZHV4U3RvcmUoKX0+XG4gICAgPFByb2dyZXNzTGVzc29uQ29udGVudCBkaXNhYmxlZD17ZmFsc2V9IHsuLi5hcmdzfSAvPlxuICA8L1Byb3ZpZGVyPlxuKTtcblxuZXhwb3J0IGNvbnN0IFByb2dyZXNzTGVzc29uRXhhbXBsZSA9IFRlbXBsYXRlLmJpbmQoe30pO1xuUHJvZ3Jlc3NMZXNzb25FeGFtcGxlLmFyZ3MgPSB7XG4gIGxldmVsczogZmFrZUxldmVscyg1KS5tYXAoKGxldmVsLCBpbmRleCkgPT4gKHtcbiAgICAuLi5sZXZlbCxcbiAgICBzdGF0dXM6IGluZGV4ID09PSAxID8gTGV2ZWxTdGF0dXMucGVyZmVjdCA6IExldmVsU3RhdHVzLm5vdF90cmllZCxcbiAgICBuYW1lOiAnUHJvZ3Jlc3Npb24nLFxuICB9KSksXG59O1xuXG5leHBvcnQgY29uc3QgV2l0aFVucGx1Z2dlZExlc3NvbiA9IFRlbXBsYXRlLmJpbmQoe30pO1xuV2l0aFVucGx1Z2dlZExlc3Nvbi5hcmdzID0ge1xuICBsZXZlbHM6IFtmYWtlTGV2ZWwoe2lzVW5wbHVnZ2VkOiB0cnVlfSksIC4uLmZha2VMZXZlbHMoNSldLm1hcChsZXZlbCA9PiAoe1xuICAgIC4uLmxldmVsLFxuICAgIG5hbWU6ICdQcm9ncmVzc2lvbicsXG4gIH0pKSxcbn07XG5cbmV4cG9ydCBjb25zdCBXaXRoTmFtZWRVbnBsdWdnZWRMZXNzb24gPSBUZW1wbGF0ZS5iaW5kKHt9KTtcbldpdGhOYW1lZFVucGx1Z2dlZExlc3Nvbi5hcmdzID0ge1xuICBsZXZlbHM6IFtcbiAgICB7XG4gICAgICAuLi5mYWtlTGV2ZWwoe2lzVW5wbHVnZ2VkOiB0cnVlfSksXG4gICAgICBuYW1lOiAnRnVuIHVucGx1Z2dlZC9uYW1lZCBsZXZlbCcsXG4gICAgfSxcbiAgICAuLi5mYWtlTGV2ZWxzKDUsIHtuYW1lZDogZmFsc2V9KSxcbiAgXSxcbn07XG5cbmV4cG9ydCBjb25zdCBXaXRoTm9OYW1lZExldmVscyA9IFRlbXBsYXRlLmJpbmQoe30pO1xuV2l0aE5vTmFtZWRMZXZlbHMuYXJncyA9IHtcbiAgbGV2ZWxzOiBbXG4gICAge1xuICAgICAgLi4uZmFrZUxldmVsKHtpc1VucGx1Z2dlZDogdHJ1ZSwgbmFtZTogdW5kZWZpbmVkfSksXG4gICAgfSxcbiAgICAuLi5mYWtlTGV2ZWxzKDUsIHtuYW1lZDogZmFsc2V9KSxcbiAgXSxcbn07XG4iXSwibmFtZXMiOlsicmVkdXhTdG9yZSIsInJlZHVjZXJzIiwic3RhdGUiLCJjcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsImlzUnRsIiwiYXBwbHlNaWRkbGV3YXJlIiwibG9jYWxlIiwiYWN0aW9uIiwidHlwZSIsIlNFVF9SVEwiLCJzZXRSdGwiLCJpc1J0bEZyb21ET00iLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudEVsZW1lbnQiLCJkaXIiLCJnZXRBdHRyaWJ1dGUiLCJ0b0xvd2VyQ2FzZSIsInNldFJ0bEZyb21ET00iLCJoYXNMb2NrYWJsZUxlc3NvbnMiLCJsZXNzb25zIiwic29tZSIsImxlc3NvbiIsImxvY2thYmxlIiwiaGFzR3JvdXBzIiwiT2JqZWN0Iiwia2V5cyIsImdyb3VwZWRMZXNzb25zIiwibGVuZ3RoIiwibGVzc29uRnJvbUxlc3NvbkF0SW5kZXgiLCJsZXNzb25JbmRleCIsImxlc3NvbkZyb21MZXNzb24iLCJpc0ZvY3VzQXJlYSIsImZvY3VzQXJlYUxlc3NvbklkcyIsImluY2x1ZGVzIiwiaWQiLCJfIiwicGljayIsIm1hcCIsImluZGV4IiwicGVlclJldmlld0xlc3NvbiIsInBlZXJSZXZpZXdMZXNzb25JbmZvIiwicGVlclJldmlld0xldmVscyIsImxldmVscyIsImxldmVsIiwidG9TdHJpbmciLCJpc0xvY2tlZCIsImxvY2tlZCIsInN0YXR1cyIsIkxldmVsU3RhdHVzIiwibm90X3RyaWVkIiwibGV2ZWxOdW1iZXIiLCJQcm9ncmVzc0xldmVsVHlwZSIsIlNDUklQVF9MRVZFTCIsIkxFVkVMIiwiZ2V0UHJvZ3Jlc3NMZXZlbFR5cGUiLCJwcm9ncmVzcyIsImN1cnJlbnRMZXZlbElkIiwiZ2V0TGV2ZWxQcm9wZXJ0aWVzUGF0aCIsInNjcmlwdE5hbWUiLCJsZXNzb25Qb3NpdGlvbiIsImZpbmQiLCJjdXJyZW50TGVzc29uSWQiLCJyZWxhdGl2ZV9wb3NpdGlvbiIsImxldmVsc0Zvckxlc3NvbklkIiwiZmluZEluZGV4IiwiaXNDdXJyZW50TGV2ZWwiLCJsZXZlbElkIiwibGV2ZWxXaXRoUHJvZ3Jlc3MiLCJpc0xvY2thYmxlIiwibGV2ZWxSZXN1bHRzIiwidW5pdFByb2dyZXNzIiwibGV2ZWxQYWlyaW5nIiwibm9ybWFsaXplZExldmVsIiwicHJvY2Vzc2VkTGV2ZWwiLCJpZHMiLCJiZXN0UmVzdWx0TGV2ZWxJZCIsImxldmVsSWRzIiwicHJvZ3Jlc3NEYXRhIiwiYXR0ZW1wdGVkSWRzIiwiZmlsdGVyIiwiYmVzdElkIiwiYmVzdFJlc3VsdCIsImZvckVhY2giLCJyZXN1bHQiLCJ0ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZSIsImxldmVsUHJvZ3Jlc3MiLCJwYWdlcyIsInBhZ2VOdW1iZXIiLCJraW5kIiwiTGV2ZWxLaW5kIiwiYXNzZXNzbWVudCIsImFjdGl2aXR5Q3NzQ2xhc3MiLCJpc0N1cnJlbnQiLCJwYWlyZWQiLCJhY3RpdmVJZCIsImxldmVsc0J5TGVzc29uIiwic3RhdHVzTGV2ZWwiLCJzdWJsZXZlbHMiLCJzdWJsZXZlbCIsImxlc3NvbklkIiwiY3VycmVudExldmVsSW5kZXgiLCJuZXh0TGV2ZWxJZCIsImxldmVsQ291bnQiLCJsZXNzb25FeHRyYXNVcmwiLCJsZXNzb25FeHRyYXNFbmFibGVkIiwibGVzc29uX2V4dHJhc19sZXZlbF91cmwiLCJpc1BlcmZlY3QiLCJUZXN0UmVzdWx0cyIsIk1JTklNVU1fT1BUSU1BTF9SRVNVTFQiLCJpbmNsdWRlQm9udXNMZXZlbHMiLCJieUdyb3VwIiwiYWxsTGV2ZWxzIiwibGVzc29uR3JvdXBzIiwibGVzc29uR3JvdXAiLCJkaXNwbGF5X25hbWUiLCJ1c2VyRmFjaW5nIiwidXNlcl9mYWNpbmciLCJkaXNwbGF5TmFtZSIsImRlc2NyaXB0aW9uIiwiYmlnUXVlc3Rpb25zIiwiYmlnX3F1ZXN0aW9ucyIsImdyb3VwIiwibGVzc29uX2dyb3VwX2Rpc3BsYXlfbmFtZSIsImxlc3NvbkF0SW5kZXgiLCJsZXNzb25MZXZlbHMiLCJib251cyIsInB1c2giLCJ2YWx1ZXMiLCJwcm9ncmVzc2lvbnNGcm9tTGV2ZWxzIiwicHJvZ3Jlc3Npb25zIiwiY3VycmVudFByb2dyZXNzaW9uIiwic3RhcnQiLCJuYW1lIiwicHJvZ3Jlc3Npb24iLCJwcm9ncmVzc2lvbkRpc3BsYXlOYW1lIiwic2xpY2UiLCJfX3Rlc3Rvbmx5X18iLCJyZWR1Y2VyIiwiaW5pdGlhbFN0YXRlIiwiU0VUX1JFU1BPTlNJVkVfU0laRSIsInJlc3BvbnNpdmVTaXplIiwic2V0UmVzcG9uc2l2ZVNpemUiLCJSZXNwb25zaXZlU2l6ZSIsIm1ha2VFbnVtIiwiQnJlYWtwb2ludHMiLCJicmVha3BvaW50IiwibGciLCJtZCIsInNtIiwieHMiLCJnZXRSZXNwb25zaXZlQnJlYWtwb2ludCIsIndpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIkZvbnRBd2Vzb21lIiwiaWNvbiIsImNsYXNzTmFtZSIsInRpdGxlIiwicHJvcHMiLCJuZXdQcm9wcyIsImFzc2lnbiIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJTYWZlTWFya2Rvd24iLCJyZW5kZXIiLCJyZW5kZXJlZCIsInRoaXMiLCJvcGVuRXh0ZXJuYWxMaW5rc0luTmV3VGFiIiwibWFya2Rvd25Ub1JlYWN0RXh0ZXJuYWxMaW5rcyIsIm1hcmtkb3duVG9SZWFjdCIsInByb2Nlc3NTeW5jIiwibWFya2Rvd24iLCJjb250ZW50cyIsIm1hcmtkb3duUHJvcHMiLCJSZWFjdCIsIkNvbXBvbmVudCIsImJvb2wiLCJzY2hlbWEiLCJkZWZhdWx0U2FuaXRpemF0aW9uU2NoZW1hIiwiYXR0cmlidXRlcyIsImltZyIsInRhZ05hbWVzIiwic3BhbiIsImNsb2JiZXIiLCJibG9ja2x5VGFncyIsImNvbmNhdCIsImJsb2NrbHlDb21wb25lbnRXcmFwcGVycyIsInRhZyIsIkJsb2NrbHlFbGVtZW50IiwiaXMiLCJQYXJzZXIiLCJjcmVhdGUiLCJnZXRQYXJzZXIiLCJ1c2UiLCJjbGlja2FibGVUZXh0IiwiZXhwYW5kYWJsZUltYWdlcyIsInZpc3VhbENvZGVCbG9jayIsInhtbEFzVG9wTGV2ZWxCbG9jayIsImRldGFpbHMiLCJyZW1hcmtSZWh5cGUiLCJhbGxvd0Rhbmdlcm91c0hUTUwiLCJyZWh5cGVSYXciLCJyZWh5cGVTYW5pdGl6ZSIsInJlaHlwZVJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImNvbXBvbmVudHMiLCJleHRlcm5hbExpbmtzIiwibGlua3MiLCJpc0V4dGVybmFsTGluayIsInVybCIsInRlc3QiLCJmdWxseVF1YWxpZmllZCIsInBhdGgiLCJhIiwiaHJlZiIsIm9wdGlvbnMiLCJ0b2tlbml6ZXJzIiwicHJvdG90eXBlIiwiaW5saW5lVG9rZW5pemVycyIsIm9yaWdpbmFsIiwibGluayIsImFsbCIsImVhdCIsInZhbHVlIiwic2lsZW50IiwiY2FsbCIsImRhdGEiLCJoUHJvcGVydGllcyIsInRhcmdldCIsInJlbCIsImxvY2F0b3IiLCJQcm9ncmVzc0J1YmJsZSIsIm9uQ2xpY2siLCJpc0NsaWNrYWJsZSIsImRpc2FibGVkIiwiZ2V0VXJsIiwic2VsZWN0ZWRTZWN0aW9uSWQiLCJzZWxlY3RlZFN0dWRlbnRJZCIsImdldEJ1YmJsZVVybCIsInJlbmRlckJ1YmJsZUJhZGdlIiwiYnViYmxlU2hhcGUiLCJidWJibGVTaXplIiwic21hbGxCdWJibGUiLCJoaWRlQXNzZXNzbWVudEJhZGdlIiwiaGFzS2VlcFdvcmtpbmdGZWVkYmFjayIsIlJldmlld1N0YXRlcyIsImtlZXBXb3JraW5nIiwiaXNMZXZlbEFzc2Vzc21lbnQiLCJiYWRnZVR5cGUiLCJCYWRnZVR5cGUiLCJjcmVhdGVCdWJibGVFbGVtZW50IiwiaGlkZVRvb2xUaXBzIiwiQnViYmxlU2l6ZSIsImRvdCIsImZ1bGwiLCJjb250ZW50IiwiZ2V0QnViYmxlQ29udGVudCIsImlzVW5wbHVnZ2VkIiwiYnViYmxlVGV4dCIsImxldHRlciIsImdldEJ1YmJsZVNoYXBlIiwiaXNDb25jZXB0TGV2ZWwiLCJidWJibGUiLCJCYXNpY0J1YmJsZSIsInNoYXBlIiwic2l6ZSIsInByb2dyZXNzU3R5bGUiLCJsZXZlbFByb2dyZXNzU3R5bGUiLCJjbGFzc05hbWVzIiwiZ2V0QnViYmxlQ2xhc3NOYW1lcyIsIkJ1YmJsZVRvb2x0aXAiLCJsZXZlbElEIiwibGVzc29uTmFtZSIsImkxOG4iLCJwcm9ncmVzc0J1YmJsZURlc2NyaXB0aW9uIiwicHJvZ3Jlc3NCdWJibGVEZXNjcmlwdGlvbldpdGhMZXNzb24iLCJCdWJibGVMaW5rIiwib25DbGlja0xldmVsIiwiYTExeV9kZXNjcmlwdGlvbiIsImxldmVsV2l0aFByb2dyZXNzVHlwZSIsIm51bWJlciIsIm9uZU9mVHlwZSIsImZ1bmMiLCJQcm9ncmVzc0J1YmJsZVNldCIsImlzU3VibGV2ZWwiLCJiYWNrZ3JvdW5kRmlyc3RTdHlsZSIsInN0eWxlcyIsImJhY2tncm91bmRMYXN0IiwiYmFja2dyb3VuZEZpcnN0IiwiYmFja2dyb3VuZExhc3RTdHlsZSIsImJhY2tncm91bmRTdHlsZVByb3AiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZERpYW1vbmQiLCJiYWNrZ3JvdW5kU3VibGV2ZWwiLCJiYWNrZ3JvdW5kUGlsbCIsImNvbnRhaW5lclN0eWxlUHJvcCIsImNvbnRhaW5lciIsInBpbGxDb250YWluZXIiLCJkaWFtb25kQ29udGFpbmVyIiwiY29udGFpbmVyU3VibGV2ZWwiLCJzdHlsZSIsIndpdGhCYWNrZ3JvdW5kIiwia2V5Iiwib25CdWJibGVDbGljayIsInNob3dTdWJsZXZlbHMiLCJtYWluIiwicmVuZGVyQnViYmxlIiwiYXJyYXlPZiIsIm9iamVjdCIsInBvc2l0aW9uIiwiZGlzcGxheSIsImhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwibGlnaHRlcl9ncmF5IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiRE9UX1NJWkUiLCJESUFNT05EX0RPVF9TSVpFIiwibWFyZ2luUmlnaHQiLCJVbmNvbm5lY3RlZFByb2dyZXNzQnViYmxlU2V0IiwiY29ubmVjdCIsIlJhZGl1bSIsIlByb2dyZXNzTGVzc29uQ29udGVudCIsImJ1YmJsZXMiLCJub0xldmVsc1dhcm5pbmciLCJsZXNzb25Db250YWluc05vTGV2ZWxzIiwic3VtbWFyeSIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImZvbnRTaXplIiwiZm9udENvbnN0YW50cyIsIlByb2dyZXNzTGV2ZWxTZXQiLCJwaWxsVGV4dCIsIm11bHRpTGV2ZWxTdGVwIiwidW5kZWZpbmVkIiwiY29sMlN0eWxlIiwiY29sMlJUTCIsImNvbDIiLCJnZXRJY29uRm9yTGV2ZWwiLCJ1bnBsdWdnZWRBY3Rpdml0eSIsInRhYmxlIiwiY29sMSIsInRleHQiLCJvblNpbmdsZUxldmVsQ2xpY2siLCJuYW1lVGV4dCIsImxpbmVzQW5kRG90IiwidmVydGljYWxMaW5lIiwiaG9yaXpvbnRhbExpbmUiLCJjaGFyY29hbCIsImxldHRlclNwYWNpbmciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIndoaXRlU3BhY2UiLCJtYXJnaW5MZWZ0IiwiYm90dG9tIiwiYm9yZGVyUmFkaXVzIiwiVW5jb25uZWN0ZWRQcm9ncmVzc0xldmVsU2V0IiwiUHJvZ3Jlc3NQaWxsIiwidXNlcklkIiwicXVlcnlQYXJhbXMiLCJnZXRUb29sdGlwUHJvcHMiLCJ0b29sdGlwIiwidG9vbHRpcFByb3BzIiwidG9vbHRpcElkIiwiZmlyc3RMZXZlbCIsImxldmVsUGlsbCIsImhvdmVyU3R5bGUiLCJpY29uTWFyZ2luU3R5bGUiLCJpY29uTWFyZ2luUlRMIiwiaWNvbk1hcmdpbiIsImRpc3BsYXlCYWRnZSIsInRleHRTdHlsZSIsInRleHRQcm9ncmVzc1N0eWxlIiwidGV4dERlY29yYXRpb24iLCJCdWJibGVTaGFwZSIsInBpbGwiLCJlbGVtZW50IiwidGV4dEFsaWduIiwianVzdGlmeUNvbnRlbnQiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1pbldpZHRoIiwibGluZUhlaWdodCIsIm92ZXJmbG93IiwidGV4dE92ZXJmbG93IiwiVW5jb25uZWN0ZWRQcm9ncmVzc1BpbGwiLCJmYWtlTGVzc29uIiwibGVzc29uTnVtYmVyIiwibGVzc29uU3RhcnRVcmwiLCJmYWtlTGV2ZWwiLCJvdmVycmlkZXMiLCJmYWtlTGV2ZWxXaXRoU3ViTGV2ZWxzIiwibnVtU3VibGV2ZWxzIiwic3RhcnRMZXZlbCIsInJhbmdlIiwiZmFrZUxldmVscyIsIm51bUxldmVscyIsIm5hbWVkIiwib3ZlcnJpZGVEYXRhIiwiZmFrZVByb2dyZXNzRm9yTGV2ZWxzIiwic2VydmVyUHJvZ3Jlc3NPdmVycmlkZXMiLCJsZXZlbFByb2dyZXNzRnJvbVNlcnZlciIsImNyZWF0ZVN0b3JlV2l0aEhpZGRlbkxlc3NvbiIsInZpZXdBcyIsImxlc3NvbkxvY2siLCJsZXNzb25zQnlTZWN0aW9uSWQiLCJsb2NrYWJsZUF1dGhvcml6ZWQiLCJsb2NrYWJsZUF1dGhvcml6ZWRMb2FkZWQiLCJsZXNzb25zQnlTZWN0aW9uSWRMb2FkZWQiLCJ0ZWFjaGVyU2VjdGlvbnMiLCJzZWN0aW9uSWRzIiwic2VjdGlvbnNBcmVMb2FkZWQiLCJzZWN0aW9ucyIsImxlc3Nvbl9leHRyYXMiLCJwYWlyaW5nX2FsbG93ZWQiLCJzdHVkZW50Q291bnQiLCJjb2RlIiwicHJvdmlkZXJNYW5hZ2VkIiwidHRzQXV0b3BsYXlFbmFibGVkIiwibGVzc29uRXh0cmFzIiwicGFpcmluZ0FsbG93ZWQiLCJoaWRkZW5MZXNzb24iLCJJbW11dGFibGUiLCJmcm9tSlMiLCJsZXNzb25zQnlTZWN0aW9uIiwic2NyaXB0SWQiLCJ1bml0UHJvZ3Jlc3NIYXNMb2FkZWQiLCJjdXJyZW50VXNlciIsImNyZWF0ZVN0b3JlV2l0aExvY2tlZExlc3NvbiIsInJhbmRvbU51bWJlclVwVG8xMDAiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJmYWtlTGVzc29uV2l0aExldmVscyIsIm92ZXJyaWRlRmllbGRzIiwiZmFrZVN0dWRlbnRzIiwiQXJyYXkiLCJmaWxsIiwiaSIsImZhbWlseU5hbWUiLCJmYWtlVW5pdERhdGEiLCJjc2YiLCJpc0NzZCIsImlzQ3NwIiwiZmFrZVN0dWRlbnRMZXZlbFByb2dyZXNzIiwic3R1ZGVudHMiLCJwcm9ncmVzc09uTGVzc29ucyIsInN0dWRlbnRQcm9ncmVzcyIsInN0dWRlbnQiLCJmYWtlU3R1ZGVudExhc3RVcGRhdGUiLCJzdHVkZW50TGFzdFVwZGF0ZSIsIkRhdGUiLCJub3ciLCJmYWtlU3R1ZGVudExhc3RVcGRhdGVCeVNjcmlwdCIsInNjcmlwdERhdGEiLCJmYWtlUHJvZ3Jlc3NUYWJsZVJlZHV4SW5pdGlhbFN0YXRlIiwibGV2ZWxQcm9ncmVzc0RhdGEiLCJzZWN0aW9uSWQiLCJpc1NvcnRlZEJ5RmFtaWx5TmFtZSIsImRlZXBlckxlYXJuaW5nQ291cnNlIiwic2VsZWN0ZWRTdHVkZW50cyIsInNlY3Rpb25Qcm9ncmVzcyIsInVuaXREYXRhQnlVbml0Iiwic3R1ZGVudExldmVsUHJvZ3Jlc3NCeVVuaXQiLCJzdHVkZW50TGVzc29uUHJvZ3Jlc3NCeVVuaXQiLCJsZXNzb25Qcm9ncmVzc0ZvclNlY3Rpb24iLCJzdHVkZW50TGFzdFVwZGF0ZUJ5VW5pdCIsImxlc3Nvbk9mSW50ZXJlc3QiLCJ1bml0U2VsZWN0aW9uIiwibG9jYWxlcyIsImxvY2FsZUNvZGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzZXMiLCJhcmd1bWVudHMiLCJhcmciLCJhcmdUeXBlIiwiaXNBcnJheSIsImlubmVyIiwiYXBwbHkiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIml0ZW0iLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJfcmVmIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsIm5leHQiLCJfX2VzTW9kdWxlIiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0QnlTZWxlY3RvciIsImluc2VydCIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiZSIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiY29tcG9uZW50IiwiVGVtcGxhdGUiLCJhcmdzIiwiUHJvdmlkZXIiLCJzdG9yZSIsIlByb2dyZXNzTGVzc29uRXhhbXBsZSIsImJpbmQiLCJwZXJmZWN0IiwiV2l0aFVucGx1Z2dlZExlc3NvbiIsIldpdGhOYW1lZFVucGx1Z2dlZExlc3NvbiIsIldpdGhOb05hbWVkTGV2ZWxzIl0sInNvdXJjZVJvb3QiOiIifQ==