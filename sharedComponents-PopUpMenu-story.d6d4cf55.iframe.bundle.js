(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1332],{"./src/sharedComponents/PopUpMenu.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.STANDARD_PADDING=exports.MenuBubble=exports.MenuBreak=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_radium=_interopRequireDefault(__webpack_require__("./node_modules/radium/es/index.js")),_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_reactPortal=__webpack_require__("./node_modules/react-portal/es/index.js"),_fontConstants=_interopRequireDefault(__webpack_require__("./src/fontConstants.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BACKGROUND_COLOR=_color.default.white,BORDER_COLOR=_color.default.light_gray,STANDARD_PADDING=exports.STANDARD_PADDING=20,menuStyle={position:"absolute",zIndex:20,border:"1px solid ".concat(BORDER_COLOR),backgroundColor:BACKGROUND_COLOR,borderRadius:2,boxShadow:"3px 3px 3px gray",textAlign:"left",maxWidth:300},tailBorderStyle={position:"absolute",bottom:"100%",left:STANDARD_PADDING,marginLeft:-7,borderTopWidth:0,borderBottomWidth:12,borderLeftWidth:7,borderRightWidth:7,borderStyle:"solid",borderColor:"transparent transparent ".concat(BORDER_COLOR," transparent")},tailFillStyle=_objectSpread(_objectSpread({},tailBorderStyle),{},{bottom:"calc(100% - 2px)",borderColor:"transparent transparent ".concat(BACKGROUND_COLOR," transparent")}),PopUpMenu=exports.default=function(_Component){function PopUpMenu(){return _Component.apply(this,arguments)||this}return _inheritsLoose(PopUpMenu,_Component),PopUpMenu.prototype.render=function render(){var _this=this;return this.props.isOpen&&_react.default.createElement(_reactPortal.PortalWithState,{closeOnOutsideClick:!0,closeOnEsc:!0,onClose:this.props.onClose,defaultOpen:this.props.isOpen},(function(_ref){_ref.openPortal,_ref.closePortal,_ref.isOpen;var portal=_ref.portal;return _react.default.createElement("div",null,portal(_react.default.createElement(MenuBubble,{targetPoint:_this.props.targetPoint,offset:_this.props.offset,className:_this.props.className,showTail:_this.props.showTail,style:_this.props.style},_this.props.children)))}))},PopUpMenu}(_react.Component);_defineProperty(PopUpMenu,"propTypes",{targetPoint:_propTypes.default.shape({top:_propTypes.default.number.isRequired,left:_propTypes.default.number.isRequired}).isRequired,offset:_propTypes.default.shape({x:_propTypes.default.number.isRequired,y:_propTypes.default.number.isRequired}),children:_propTypes.default.any,className:_propTypes.default.string,isOpen:_propTypes.default.bool,onClose:_propTypes.default.func,showTail:_propTypes.default.bool,style:_propTypes.default.object});var MenuBubbleUnwrapped=function(_Component2){function MenuBubbleUnwrapped(){return _Component2.apply(this,arguments)||this}_inheritsLoose(MenuBubbleUnwrapped,_Component2);var _proto2=MenuBubbleUnwrapped.prototype;return _proto2.renderMenuItems=function renderMenuItems(){var children=this.props.children;Array.isArray(children)&&(children=children.filter((function(x){return x})));var childCount=_react.Children.count(children);return 0===childCount?_react.default.createElement("div",null,_react.default.createElement("em",null,_locale.default.noMenuItemsAvailable())):_react.default.createElement("div",null,_react.Children.map(children,(function(child,index){return child?_react.default.cloneElement(child,{first:0===index,last:index===childCount-1}):child})))},_proto2.render=function render(){var _this$props=this.props,targetPoint=_this$props.targetPoint,className=_this$props.className,marginTop=this.props.offset?this.props.offset.y:12,marginLeft=this.props.offset?this.props.offset.x:-STANDARD_PADDING,style=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},menuStyle),this.props.style),targetPoint),{},{marginTop,marginLeft});return _react.default.createElement("div",{style,className},this.renderMenuItems(),this.props.showTail&&_react.default.createElement("span",{style:tailBorderStyle}),this.props.showTail&&_react.default.createElement("span",{style:tailFillStyle}))},MenuBubbleUnwrapped}(_react.Component);_defineProperty(MenuBubbleUnwrapped,"propTypes",{targetPoint:_propTypes.default.shape({top:_propTypes.default.number.isRequired,left:_propTypes.default.number.isRequired}).isRequired,offset:_propTypes.default.shape({x:_propTypes.default.number.isRequired,y:_propTypes.default.number.isRequired}),children:_propTypes.default.any,className:_propTypes.default.string,showTail:_propTypes.default.bool,style:_propTypes.default.object});var MenuBubble=exports.MenuBubble=(0,_radium.default)(MenuBubbleUnwrapped),Item=(exports.MenuBreak=function(_Component3){function MenuBreak(){return _Component3.apply(this,arguments)||this}return _inheritsLoose(MenuBreak,_Component3),MenuBreak.prototype.render=function render(){var style={borderTop:"1px solid "+_color.default.lighter_gray,marginTop:STANDARD_PADDING/2,marginBottom:STANDARD_PADDING/2,marginLeft:STANDARD_PADDING,marginRight:STANDARD_PADDING};return _react.default.createElement("div",{style})},MenuBreak}(_react.Component),function(_Component4){function Item(){return _Component4.apply(this,arguments)||this}return _inheritsLoose(Item,_Component4),Item.prototype.render=function render(){var _this$props2=this.props,first=_this$props2.first,last=_this$props2.last,onClick=_this$props2.onClick,children=_this$props2.children,href=_this$props2.href,openInNewTab=_this$props2.openInNewTab,className=_this$props2.className,style=_this$props2.style,hrefOnClick=_this$props2.hrefOnClick,classList=className?"".concat("pop-up-menu-item"," ").concat(className):"pop-up-menu-item";if(!href&&!onClick)throw new Error("Expect at least one of href/onClick");var wrapperStyle=_objectSpread(_objectSpread({},{marginTop:first?STANDARD_PADDING*(3/4):void 0,marginBottom:last?STANDARD_PADDING*(3/4):void 0,paddingTop:STANDARD_PADDING/4,paddingBottom:STANDARD_PADDING/4,paddingLeft:STANDARD_PADDING,paddingRight:STANDARD_PADDING,cursor:"pointer",":hover":{backgroundColor:_color.default.lightest_gray}}),style),textStyle=_objectSpread({color:this.props.color?this.props.color:_color.default.dark_charcoal,textDecoration:"none"},_fontConstants.default["main-font-regular"]),target=openInNewTab?"_blank":"";return _react.default.createElement("div",{style:wrapperStyle},this.props.href&&_react.default.createElement("a",{className:classList,href,style:_objectSpread(_objectSpread({},textStyle),{display:"block"}),target,onClick:hrefOnClick},children),!this.props.href&&_react.default.createElement("div",{className:classList,style:textStyle,onClick},children))},Item}(_react.Component));_defineProperty(Item,"propTypes",{children:_propTypes.default.node.isRequired,onClick:_propTypes.default.func,href:_propTypes.default.string,first:_propTypes.default.bool,last:_propTypes.default.bool,color:_propTypes.default.string,openInNewTab:_propTypes.default.bool,className:_propTypes.default.string,style:_propTypes.default.object,hrefOnClick:_propTypes.default.func}),PopUpMenu.Item=(0,_radium.default)(Item)},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-portal/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Portal:()=>PortalCompat,PortalWithState:()=>es_PortalWithState});var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var Portal=function(_React$Component){function Portal(){return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),_createClass(Portal,[{key:"componentWillUnmount",value:function componentWillUnmount(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function render(){return canUseDOM?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),react_dom.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),Portal}(react.Component);Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const es_Portal=Portal;var LegacyPortal_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var LegacyPortal_Portal=function(_React$Component){function Portal(){return function LegacyPortal_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function LegacyPortal_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function LegacyPortal_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),LegacyPortal_createClass(Portal,[{key:"componentDidMount",value:function componentDidMount(){this.renderPortal()}},{key:"componentDidUpdate",value:function componentDidUpdate(props){this.renderPortal()}},{key:"componentWillUnmount",value:function componentWillUnmount(){react_dom.unmountComponentAtNode(this.defaultNode||this.props.node),this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null,this.portal=null}},{key:"renderPortal",value:function renderPortal(props){this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode));var children=this.props.children;"function"==typeof this.props.children.type&&(children=react.cloneElement(this.props.children)),this.portal=react_dom.unstable_renderSubtreeIntoContainer(this,children,this.props.node||this.defaultNode)}},{key:"render",value:function render(){return null}}]),Portal}(react.Component);const LegacyPortal=LegacyPortal_Portal;LegacyPortal_Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const PortalCompat=react_dom.createPortal?es_Portal:LegacyPortal;var PortalWithState_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var KEYCODES_ESCAPE=27,PortalWithState=function(_React$Component){function PortalWithState(props){!function PortalWithState_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,PortalWithState);var _this=function PortalWithState_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(PortalWithState.__proto__||Object.getPrototypeOf(PortalWithState)).call(this,props));return _this.portalNode=null,_this.state={active:!!props.defaultOpen},_this.openPortal=_this.openPortal.bind(_this),_this.closePortal=_this.closePortal.bind(_this),_this.wrapWithPortal=_this.wrapWithPortal.bind(_this),_this.handleOutsideMouseClick=_this.handleOutsideMouseClick.bind(_this),_this.handleKeydown=_this.handleKeydown.bind(_this),_this}return function PortalWithState_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(PortalWithState,_React$Component),PortalWithState_createClass(PortalWithState,[{key:"componentDidMount",value:function componentDidMount(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.addEventListener("click",this.handleOutsideMouseClick)}},{key:"componentWillUnmount",value:function componentWillUnmount(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.removeEventListener("click",this.handleOutsideMouseClick)}},{key:"openPortal",value:function openPortal(e){this.state.active||(e&&e.nativeEvent&&e.nativeEvent.stopImmediatePropagation(),this.setState({active:!0},this.props.onOpen))}},{key:"closePortal",value:function closePortal(){this.state.active&&this.setState({active:!1},this.props.onClose)}},{key:"wrapWithPortal",value:function wrapWithPortal(children){var _this2=this;return this.state.active?react.createElement(PortalCompat,{node:this.props.node,key:"react-portal",ref:function ref(portalNode){return _this2.portalNode=portalNode}},children):null}},{key:"handleOutsideMouseClick",value:function handleOutsideMouseClick(e){if(this.state.active){var root=this.portalNode&&(this.portalNode.props.node||this.portalNode.defaultNode);!root||root.contains(e.target)||e.button&&0!==e.button||this.closePortal()}}},{key:"handleKeydown",value:function handleKeydown(e){e.keyCode===KEYCODES_ESCAPE&&this.state.active&&this.closePortal()}},{key:"render",value:function render(){return this.props.children({openPortal:this.openPortal,closePortal:this.closePortal,portal:this.wrapWithPortal,isOpen:this.state.active})}}]),PortalWithState}(react.Component);PortalWithState.propTypes={children:prop_types_default().func.isRequired,defaultOpen:prop_types_default().bool,node:prop_types_default().any,closeOnEsc:prop_types_default().bool,closeOnOutsideClick:prop_types_default().bool,onOpen:prop_types_default().func,onClose:prop_types_default().func},PortalWithState.defaultProps={onOpen:function onOpen(){},onClose:function onClose(){}};const es_PortalWithState=PortalWithState},"./src/sharedComponents/PopUpMenu.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.BasicExample=void 0;var _addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js"),_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_PopUpMenu=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./src/sharedComponents/PopUpMenu.jsx"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}exports.default={component:_PopUpMenu.default};var BasicExampleComponent=function BasicExampleComponent(props){var _useState2=_slicedToArray((0,_react.useState)(!0),2),isOpen=_useState2[0],setIsOpen=_useState2[1],targetPoint=_react.default.createRef(),_useState4=_slicedToArray((0,_react.useState)(null),2),targetPointRect=_useState4[0],setTargetPointRect=_useState4[1];return(0,_react.useEffect)((function(){if(!targetPointRect){var rect=targetPoint.current.getBoundingClientRect();setTargetPointRect({top:rect.bottom,left:rect.left+rect.width/2})}}),[targetPoint,targetPointRect]),_react.default.createElement("div",null,"The ",_react.default.createElement("tt",null,"PopUpMenu")," component is absolutely-positioned.",_react.default.createElement("div",{style:{border:"solid black thin",margin:"1em",width:"50%"},ref:targetPoint,onClick:function onClick(){return!isOpen&&setIsOpen(!0)}},"It targets the bottom-center of this element."),targetPointRect&&_react.default.createElement(_PopUpMenu.default,{isOpen,onClose:function onClose(){return setIsOpen(!1)},targetPoint:targetPointRect},_react.default.createElement(_PopUpMenu.default.Item,{onClick:(0,_addonActions.action)("option 1")},"Option One"),_react.default.createElement(_PopUpMenu.default.Item,{onClick:(0,_addonActions.action)("option 2")},"Option Two"),_react.default.createElement(_PopUpMenu.default.Item,{onClick:(0,_addonActions.action)("option 3")},"Option Three")))};exports.BasicExample=function BasicExample(args){return _react.default.createElement(BasicExampleComponent,args)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,