/*! For license information please see 9945.ddedaf70.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9945],{"./src/code-studio/hiddenLessonRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.STUDENT_SECTION_ID=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new HiddenState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_HIDDEN_LESSONS){var hiddenLessonsPerSection=action.hiddenLessonsPerSection,hideableLessonsAllowed=action.hideableLessonsAllowed,sectionIds=Object.keys(hiddenLessonsPerSection),nextState=state;return sectionIds.forEach((function(sectionId){hiddenLessonsPerSection[sectionId].forEach((function(lessonId){nextState=nextState.setIn(["lessonsBySection",sectionId,lessonId.toString()],!0)}))})),validateSectionIds(nextState),nextState.merge({hiddenLessonsInitialized:!0,hideableLessonsAllowed})}if(action.type===UPDATE_HIDDEN_LESSON){var sectionId=action.sectionId,lessonId=action.lessonId,hidden=action.hidden,_nextState=state.setIn(["lessonsBySection",sectionId,lessonId.toString()],hidden);return validateSectionIds(_nextState),_nextState}if(action.type===UPDATE_HIDDEN_SCRIPT){var _sectionId=action.sectionId,scriptId=action.scriptId,_hidden=action.hidden,_nextState2=state.setIn(["scriptsBySection",_sectionId.toString(),scriptId.toString()],_hidden);return validateSectionIds(_nextState2),_nextState2}return state},exports.getHiddenLessons=function getHiddenLessons(scriptName,canHideLessons){return function(dispatch){_jquery.default.ajax({type:"GET",url:"/s/".concat(scriptName,"/hidden_lessons"),dataType:"json",contentType:"application/json"}).done((function(response){return dispatch(function initializeHiddenLessons(data,canHideLessons){return function(dispatch){Array.isArray(data)&&(data=_defineProperty({},STUDENT_SECTION_ID,data)),dispatch(setHiddenLessons(data,!!canHideLessons))}}(response,canHideLessons))})).fail((function(err){return console.error(err)}))}},exports.initializeHiddenScripts=function initializeHiddenScripts(data){return function(dispatch){data&&(Array.isArray(data)&&(data=_defineProperty({},STUDENT_SECTION_ID,data)),Object.keys(data).forEach((function(sectionId){data[sectionId].forEach((function(scriptId){dispatch(updateHiddenScript(sectionId,scriptId,!0))}))})))}},exports.isLessonHiddenForSection=function isLessonHiddenForSection(state,sectionId,lessonId){return isHiddenForSection(state,sectionId,lessonId,"lessonsBySection")},exports.isScriptHiddenForSection=function isScriptHiddenForSection(state,sectionId,scriptId){return isHiddenForSection(state,sectionId,scriptId,"scriptsBySection")},exports.setHiddenLessons=setHiddenLessons,exports.toggleHiddenLesson=function toggleHiddenLesson(scriptName,sectionId,lessonId,hidden){return function(dispatch){dispatch(updateHiddenLesson(sectionId,lessonId,hidden)),postToggleHidden(scriptName,sectionId,lessonId,hidden)}},exports.toggleHiddenScript=function toggleHiddenScript(scriptName,sectionId,scriptId,hidden){return function(dispatch){dispatch(updateHiddenScript(sectionId,scriptId,hidden)),postToggleHidden(scriptName,sectionId,null,hidden)}},exports.updateHiddenLesson=updateHiddenLesson,exports.updateHiddenScript=updateHiddenScript;var _immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),_jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_HIDDEN_LESSONS="hiddenLesson/SET_HIDDEN_LESSONS",UPDATE_HIDDEN_LESSON="hiddenLesson/UPDATE_HIDDEN_LESSON",UPDATE_HIDDEN_SCRIPT="hiddenLesson/UPDATE_HIDDEN_SCRIPT",STUDENT_SECTION_ID=exports.STUDENT_SECTION_ID="STUDENT",HiddenState=_immutable.default.Record({hiddenLessonsInitialized:!1,hideableLessonsAllowed:!1,lessonsBySection:_immutable.default.Map({}),scriptsBySection:_immutable.default.Map({})});function validateSectionIds(state){if(state.getIn(["lessonsBySection",STUDENT_SECTION_ID])&&state.get("lessonsBySection").size>1)throw new Error("Should never have STUDENT_SECTION_ID alongside other sectionIds")}function setHiddenLessons(hiddenLessonsPerSection,hideableLessonsAllowed){return{type:SET_HIDDEN_LESSONS,hiddenLessonsPerSection,hideableLessonsAllowed}}function updateHiddenLesson(sectionId,lessonId,hidden){return{type:UPDATE_HIDDEN_LESSON,sectionId,lessonId,hidden}}function updateHiddenScript(sectionId,scriptId,hidden){return{type:UPDATE_HIDDEN_SCRIPT,sectionId,scriptId,hidden}}function postToggleHidden(scriptName,sectionId,lessonId,hidden){var data={section_id:sectionId,hidden};lessonId&&(data.stage_id=lessonId),_jquery.default.ajax({type:"POST",url:"/s/".concat(scriptName,"/toggle_hidden"),dataType:"json",contentType:"application/json",data:JSON.stringify(data)}).success((function(){window.__TestInterface=window.__TestInterface||{},window.__TestInterface.toggleHiddenUnitComplete=!0}))}function isHiddenForSection(state,sectionId,itemId,bySectionKey){return!!itemId&&(sectionId||(sectionId=STUDENT_SECTION_ID),!!state.get(bySectionKey).getIn([sectionId.toString(),itemId.toString()]))}},"./src/templates/AssignButton.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.UnconnectedAssignButton=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_hiddenLessonRedux=__webpack_require__("./src/code-studio/hiddenLessonRedux.js"),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_ConfirmHiddenAssignment=_interopRequireDefault(__webpack_require__("./src/templates/courseOverview/ConfirmHiddenAssignment.js")),_teacherSectionsRedux=__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.ts"),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var AssignButton=function(_React$Component){function AssignButton(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"state",{confirmationDialogOpen:!1}),_defineProperty(_this,"onCloseDialog",(function(){_this.setState({confirmationDialogOpen:!1})})),_defineProperty(_this,"unhideAndAssign",(function(){var _this$props=_this.props,sectionId=_this$props.sectionId,courseId=_this$props.courseId,courseOfferingId=_this$props.courseOfferingId,courseVersionId=_this$props.courseVersionId,scriptId=_this$props.scriptId,assignToSection=_this$props.assignToSection;(0,_this$props.updateHiddenScript)(sectionId,scriptId,!1),assignToSection(sectionId,courseId,courseOfferingId,courseVersionId,scriptId)})),_defineProperty(_this,"handleClick",(function(){var _this$props2=_this.props,scriptId=_this$props2.scriptId,courseId=_this$props2.courseId,courseOfferingId=_this$props2.courseOfferingId,courseVersionId=_this$props2.courseVersionId,sectionId=_this$props2.sectionId,hiddenLessonState=_this$props2.hiddenLessonState,assignToSection=_this$props2.assignToSection;sectionId&&scriptId&&hiddenLessonState&&(0,_hiddenLessonRedux.isScriptHiddenForSection)(hiddenLessonState,sectionId,scriptId)?_this.setState({confirmationDialogOpen:!0}):assignToSection(sectionId,courseId,courseOfferingId,courseVersionId,scriptId)})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(AssignButton,_React$Component),AssignButton.prototype.render=function render(){var confirmationDialogOpen=this.state.confirmationDialogOpen,_this$props3=this.props,assignmentName=_this$props3.assignmentName,sectionName=_this$props3.sectionName,buttonMarginStyle=_this$props3.isRtl?styles.buttonMarginRTL:styles.buttonMargin;return _react.default.createElement("div",null,_react.default.createElement("div",{style:buttonMarginStyle},_react.default.createElement(_Button.default,{style:styles.boxShadow,color:_Button.default.ButtonColor.brandSecondaryDefault,text:_locale.default.assignToSection(),icon:"plus",onClick:this.handleClick,className:"uitest-assign-button"})),confirmationDialogOpen&&_react.default.createElement(_ConfirmHiddenAssignment.default,{sectionName,assignmentName,onClose:this.onCloseDialog,onConfirm:this.unhideAndAssign}))},AssignButton}(_react.default.Component);_defineProperty(AssignButton,"propTypes",{sectionId:_propTypes.default.number.isRequired,sectionName:_propTypes.default.string,courseId:_propTypes.default.number,courseOfferingId:_propTypes.default.number,courseVersionId:_propTypes.default.number,scriptId:_propTypes.default.number,assignmentName:_propTypes.default.string,assignToSection:_propTypes.default.func.isRequired,hiddenLessonState:_propTypes.default.object,updateHiddenScript:_propTypes.default.func.isRequired,isRtl:_propTypes.default.bool});var styles={buttonMargin:{marginLeft:10,display:"flex",alignItems:"center"},buttonMarginRTL:{marginRight:10,display:"flex",alignItems:"center"},boxShadow:{boxShadow:"inset 0 2px 0 0 rgb(255 255 255 / 63%)"}};exports.UnconnectedAssignButton=AssignButton,exports.default=(0,_reactRedux.connect)((function(state){return{hiddenLessonState:state.hiddenLesson,isRtl:state.isRtl}}),{assignToSection:_teacherSectionsRedux.assignToSection,updateHiddenScript:_hiddenLessonRedux.updateHiddenScript})(AssignButton)},"./src/templates/BaseDialog.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_constants=__webpack_require__("./src/constants.js"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BaseDialog=exports.default=function(_React$Component){function BaseDialog(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"handleKeyDown",(function(event){"Escape"===event.key&&_this.closeDialog(),_this.props.handleKeyDown&&_this.props.handleKeyDown(event)})),_defineProperty(_this,"closeDialog",(function(){!_this.props.uncloseable&&_this.props.handleClose&&(_this.props.handleClose(),_this.props.soundPlayer&&_this.props.soundPlayer.stopAllAudio())})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(BaseDialog,_React$Component);var _proto=BaseDialog.prototype;return _proto.componentDidMount=function componentDidMount(){this.focusDialog()},_proto.componentDidUpdate=function componentDidUpdate(){this.focusDialog()},_proto.getTabbableElements=function getTabbableElements(){return[].slice.call(this.refs.dialog.querySelectorAll("a,button,input"))},_proto.focusDialog=function focusDialog(){var descendantIsActive=document.activeElement&&this.refs.dialog&&this.refs.dialog.contains(document.activeElement);this.props.isOpen&&!descendantIsActive&&this.refs.dialog.focus()},_proto.render=function render(){if(!this.props.isOpen&&!this.props.hideBackdrop)return _react.default.createElement("div",null);var bodyStyle,modalBodyStyle,xCloseStyle;this.props.fullWidth&&(bodyStyle=_objectSpread(_objectSpread({},bodyStyle),{},{width:"90%",marginLeft:"-45%"})),this.props.fullHeight&&(bodyStyle=_objectSpread(_objectSpread({},bodyStyle),{},{height:"80%"}),modalBodyStyle=_objectSpread(_objectSpread({},modalBodyStyle),{},{boxSizing:"border-box"}));var wrapperClassNames="",modalClassNames="modal",modalBodyClassNames="modal-body",overflowX=this.props.overflow||"hidden",overflowY=this.props.overflow||(this.props.fixedHeight||this.props.fullHeight?"hidden":"auto");this.props.useUpdatedStyles?(wrapperClassNames="dashboard-styles",modalBodyClassNames="",modalBodyStyle={background:"#fff",height:this.props.fixedHeight,maxHeight:!this.props.fixedHeight&&"85vh",overflowX,overflowY,borderRadius:4},this.props.useFlexbox&&(modalBodyStyle=_objectSpread(_objectSpread({},modalBodyStyle),{},{display:"flex",flexDirection:"column"})),bodyStyle=_objectSpread(_objectSpread({},bodyStyle),{},{width:this.props.fixedWidth||_constants.BASE_DIALOG_WIDTH,marginLeft:-this.props.fixedWidth/2||-350})):this.props.noModalStyles&&(modalClassNames="",modalBodyClassNames=""),bodyStyle=_objectSpread(_objectSpread(_objectSpread({},bodyStyle),this.props.hideBackdrop&&{position:"initial",marginLeft:0}),this.props.style),xCloseStyle={position:"absolute",top:0,insetInlineEnd:0,padding:0,color:_color.default.neutral_dark30,cursor:"pointer",fontSize:24,border:"none"},modalBodyClassNames=[modalBodyClassNames,this.props.bodyClassName].filter((function(className){return!!className})).join(" ");var body=_react.default.createElement("div",{style:bodyStyle,tabIndex:"-1",className:modalClassNames,ref:"dialog",onKeyDown:this.handleKeyDown},_react.default.createElement("div",{style:modalBodyStyle,id:this.props.bodyId,className:modalBodyClassNames},!this.props.uncloseable&&!this.props.hideCloseButton&&_react.default.createElement(_Button.default,{id:"x-close",onClick:this.closeDialog,icon:"fa-solid fa-xmark",style:xCloseStyle,color:"white","aria-label":_locale.default.closeDialog()}),this.props.children));return this.props.hideBackdrop?body:_react.default.createElement("div",{className:wrapperClassNames},_react.default.createElement("div",{className:"modal-backdrop",style:this.props.backdropStyle,onClick:this.closeDialog}),body)},BaseDialog}(_react.default.Component);_defineProperty(BaseDialog,"propTypes",{isOpen:_propTypes.default.bool,handleClose:_propTypes.default.func,uncloseable:_propTypes.default.bool,hideCloseButton:_propTypes.default.bool,handleKeyDown:_propTypes.default.func,hideBackdrop:_propTypes.default.bool,fullWidth:_propTypes.default.bool,fullHeight:_propTypes.default.bool,useUpdatedStyles:_propTypes.default.bool,noModalStyles:_propTypes.default.bool,children:_propTypes.default.node,fixedWidth:_propTypes.default.number,fixedHeight:_propTypes.default.number,useFlexbox:_propTypes.default.bool,bodyId:_propTypes.default.string,bodyClassName:_propTypes.default.string,style:_propTypes.default.object,soundPlayer:_propTypes.default.object,overflow:_propTypes.default.string,backdropStyle:_propTypes.default.object}),module.exports=exports.default},"./src/templates/courseOverview/ConfirmHiddenAssignment.js":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_Button=_interopRequireDefault(__webpack_require__("./src/legacySharedComponents/Button.jsx")),_BaseDialog=_interopRequireDefault(__webpack_require__("./src/templates/BaseDialog.jsx")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}!function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(exports.default=function(_Component){function ConfirmHiddenAssignment(){return _Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ConfirmHiddenAssignment,_Component),ConfirmHiddenAssignment.prototype.render=function render(){var _this$props=this.props,sectionName=_this$props.sectionName,assignmentName=_this$props.assignmentName,onClose=_this$props.onClose,onConfirm=_this$props.onConfirm;return _react.default.createElement(_BaseDialog.default,{isOpen:!0,handleClose:onClose},_react.default.createElement("div",{style:styles.header,className:"uitest-confirm-assignment-dialog"},_locale.default.unhideAndAssignHeader()),_react.default.createElement("div",{style:styles.content},_locale.default.assignHiddenUnitConfirm({assignmentName,sectionName})),_react.default.createElement("div",{style:{textAlign:"right"}},_react.default.createElement(_Button.default,{text:_locale.default.dialogCancel(),onClick:onClose,color:_Button.default.ButtonColor.gray}),_react.default.createElement(_Button.default,{id:"confirm-assign",text:_locale.default.unhideUnitAndAssign(),style:{marginLeft:5},onClick:onConfirm,color:_Button.default.ButtonColor.brandSecondaryDefault})))},ConfirmHiddenAssignment}(_react.Component),"propTypes",{sectionName:_propTypes.default.string.isRequired,assignmentName:_propTypes.default.string.isRequired,onClose:_propTypes.default.func.isRequired,onConfirm:_propTypes.default.func.isRequired});var styles={header:{fontSize:16,marginBottom:5,fontWeight:"bold"},content:{fontSize:14,marginBottom:10,marginTop:10,paddingBottom:20,paddingTop:20,borderTopWidth:1,borderBottomWidth:1,borderLeftWidth:0,borderRightWidth:0,borderStyle:"solid",borderColor:_color.default.lighter_gray}};module.exports=exports.default},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNMlAsYUFBY3hDLFFBQVNuUixJQUMvQixFQUNBb1MsT0FBUSxTQUFTQSxVQWpCckIsU0FBUzJCLG1CQUFtQkosY0FFMUIsR0FBZ0MsT0FBNUJBLGFBQWFLLFdBQ2YsT0FBTyxFQUdUTCxhQUFhSyxXQUFXQyxZQUFZTixhQUN0QyxDQVdNSSxDQUFtQkosYUFDckIsRUFFSix5RkNwREFwSCxPQUFPOUssUUFaUCxTQUFTcVMsa0JBQWtCckMsSUFBS2tDLGNBQzlCLEdBQUlBLGFBQWFPLFdBQ2ZQLGFBQWFPLFdBQVdDLFFBQVUxQyxRQUM3QixDQUNMLEtBQU9rQyxhQUFhUyxZQUNsQlQsYUFBYU0sWUFBWU4sYUFBYVMsWUFHeENULGFBQWFOLFlBQVloSyxTQUFTZ0wsZUFBZTVDLEtBQ25ELENBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vaGlkZGVuTGVzc29uUmVkdXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9Bc3NpZ25CdXR0b24uanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvQmFzZURpYWxvZy5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9jb3Vyc2VPdmVydmlldy9Db25maXJtSGlkZGVuQXNzaWdubWVudC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlZHVjZXIgYW5kIGFjdGlvbnMgdXNlZCB0byB0cmFjayB3aGF0IHNlY3Rpb25zL3NjcmlwdHMgYXJlIGFyZSBoaWRkZW4gb24gYVxuICogcGVyIHNlY3Rpb24gYmFzaXMuXG4gKi9cbmltcG9ydCBJbW11dGFibGUgZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmNvbnN0IFNFVF9ISURERU5fTEVTU09OUyA9ICdoaWRkZW5MZXNzb24vU0VUX0hJRERFTl9MRVNTT05TJztcbmNvbnN0IFVQREFURV9ISURERU5fTEVTU09OID0gJ2hpZGRlbkxlc3Nvbi9VUERBVEVfSElEREVOX0xFU1NPTic7XG5jb25zdCBVUERBVEVfSElEREVOX1NDUklQVCA9ICdoaWRkZW5MZXNzb24vVVBEQVRFX0hJRERFTl9TQ1JJUFQnO1xuXG5leHBvcnQgY29uc3QgU1RVREVOVF9TRUNUSU9OX0lEID0gJ1NUVURFTlQnO1xuXG5jb25zdCBIaWRkZW5TdGF0ZSA9IEltbXV0YWJsZS5SZWNvcmQoe1xuICBoaWRkZW5MZXNzb25zSW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBoaWRlYWJsZUxlc3NvbnNBbGxvd2VkOiBmYWxzZSxcbiAgLy8gQSBtYXBwaW5nLCB3aGVyZSB0aGUga2V5IGlzIHRoZSBzZWN0aW9uSWQsIGFuZCB0aGUgdmFsdWUgaXMgYSBtYXBwaW5nIGZyb21cbiAgLy8gbGVzc29uSWQgdG8gYSBib29sIGluZGljYXRpbmcgd2hldGhlciB0aGF0IGxlc3NvbiBpcyBoaWRkZW4gKHRydWUpIG9yIG5vdCAoZmFsc2UpXG4gIC8vIFRlYWNoZXJzIHdpbGwgcG90ZW50aWFsbHkgaGF2ZSBhIG51bWJlciBvZiBzZWN0aW9uIGlkcy4gRm9yIHN0dWRlbnRzIHdlXG4gIC8vIHVzZSBhIHNlY3Rpb25JZCBvZiBTVFVERU5UX1NFQ1RJT05fSUQsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGhpZGRlbiBzdGF0ZVxuICAvLyBmb3IgdGhlIHN0dWRlbnQgYmFzZWQgb24gdGhlIHNlY3Rpb25zIHRoZXkgYXJlIGluLlxuICBsZXNzb25zQnlTZWN0aW9uOiBJbW11dGFibGUuTWFwKHtcbiAgICAvLyBbc2VjdGlvbklkXToge1xuICAgIC8vICAgW2xlc3NvbklkXTogdHJ1ZVxuICAgIC8vIH1cbiAgfSksXG4gIC8vIFNhbWUgYXMgYWJvdmUgYnV0IGZvciBoaWRpbmcgc2NyaXB0cyBpbiBhIHNlY3Rpb24gaW5zdGVhZCBvZiBsZXNzb25zXG4gIHNjcmlwdHNCeVNlY3Rpb246IEltbXV0YWJsZS5NYXAoe1xuICAgIC8vIFtzZWN0aW9uSWRdOiB7XG4gICAgLy8gICBbc2NyaXB0SWRdOiB0cnVlXG4gICAgLy8gfVxuICB9KSxcbn0pO1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHdlIG5ldmVyIGhhdmUgbXVsdGlwbGUgbGVzc29uc0J5U2VjdGlvbiBpZiB3ZSBoYXZlIFNUVURFTlRfU0VDVElPTl9JRFxuICogQHRocm93cyBJZiBuZXcgc3RhdGUgaXMgaW52YWxpZFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVNlY3Rpb25JZHMoc3RhdGUpIHtcbiAgaWYgKFxuICAgIHN0YXRlLmdldEluKFsnbGVzc29uc0J5U2VjdGlvbicsIFNUVURFTlRfU0VDVElPTl9JRF0pICYmXG4gICAgc3RhdGUuZ2V0KCdsZXNzb25zQnlTZWN0aW9uJykuc2l6ZSA+IDFcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1Nob3VsZCBuZXZlciBoYXZlIFNUVURFTlRfU0VDVElPTl9JRCBhbG9uZ3NpZGUgb3RoZXIgc2VjdGlvbklkcydcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogSGlkZGVuIGxlc3NvbiByZWR1Y2VyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUgPSBuZXcgSGlkZGVuU3RhdGUoKSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gU0VUX0hJRERFTl9MRVNTT05TKSB7XG4gICAgY29uc3Qge2hpZGRlbkxlc3NvbnNQZXJTZWN0aW9uLCBoaWRlYWJsZUxlc3NvbnNBbGxvd2VkfSA9IGFjdGlvbjtcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHNlY3Rpb25cbiAgICBjb25zdCBzZWN0aW9uSWRzID0gT2JqZWN0LmtleXMoaGlkZGVuTGVzc29uc1BlclNlY3Rpb24pO1xuICAgIGxldCBuZXh0U3RhdGUgPSBzdGF0ZTtcbiAgICBzZWN0aW9uSWRzLmZvckVhY2goc2VjdGlvbklkID0+IHtcbiAgICAgIC8vIEFuZCBpdGVyYXRlIHRocm91Z2ggZWFjaCBoaWRkZW4gbGVzc29uIHdpdGhpbiB0aGF0IHNlY3Rpb25cbiAgICAgIGNvbnN0IGhpZGRlbkxlc3NvbklkcyA9IGhpZGRlbkxlc3NvbnNQZXJTZWN0aW9uW3NlY3Rpb25JZF07XG4gICAgICBoaWRkZW5MZXNzb25JZHMuZm9yRWFjaChsZXNzb25JZCA9PiB7XG4gICAgICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZS5zZXRJbihcbiAgICAgICAgICBbJ2xlc3NvbnNCeVNlY3Rpb24nLCBzZWN0aW9uSWQsIGxlc3NvbklkLnRvU3RyaW5nKCldLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhbGlkYXRlU2VjdGlvbklkcyhuZXh0U3RhdGUpO1xuXG4gICAgcmV0dXJuIG5leHRTdGF0ZS5tZXJnZSh7XG4gICAgICBoaWRkZW5MZXNzb25zSW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICBoaWRlYWJsZUxlc3NvbnNBbGxvd2VkLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSBVUERBVEVfSElEREVOX0xFU1NPTikge1xuICAgIGNvbnN0IHtzZWN0aW9uSWQsIGxlc3NvbklkLCBoaWRkZW59ID0gYWN0aW9uO1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHN0YXRlLnNldEluKFxuICAgICAgWydsZXNzb25zQnlTZWN0aW9uJywgc2VjdGlvbklkLCBsZXNzb25JZC50b1N0cmluZygpXSxcbiAgICAgIGhpZGRlblxuICAgICk7XG4gICAgdmFsaWRhdGVTZWN0aW9uSWRzKG5leHRTdGF0ZSk7XG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gVVBEQVRFX0hJRERFTl9TQ1JJUFQpIHtcbiAgICBjb25zdCB7c2VjdGlvbklkLCBzY3JpcHRJZCwgaGlkZGVufSA9IGFjdGlvbjtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSBzdGF0ZS5zZXRJbihcbiAgICAgIFsnc2NyaXB0c0J5U2VjdGlvbicsIHNlY3Rpb25JZC50b1N0cmluZygpLCBzY3JpcHRJZC50b1N0cmluZygpXSxcbiAgICAgIGhpZGRlblxuICAgICk7XG4gICAgdmFsaWRhdGVTZWN0aW9uSWRzKG5leHRTdGF0ZSk7XG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLy8gYWN0aW9uIGNyZWF0b3JzXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGhpZGRlbkxlc3NvbnNQZXJTZWN0aW9uIC0gTWFwcGluZyBmcm9tIHNlY3Rpb25JZCB0byBhIGxpc3Qgb2YgbGVzc29uSWRzXG4gKiAgIHRoYXQgYXJlIGhpZGRlbiBmb3IgdGhhdCBzZWN0aW9uLlxuICogQHBhcmFtIHtib29sfSBoaWRlYWJsZUxlc3NvbnNBbGxvd2VkIC0gVHJ1ZSBpZiB3ZSdyZSBhYmxlIHRvIHRvZ2dsZSBoaWRkZW4gbGVzc29uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SGlkZGVuTGVzc29ucyhcbiAgaGlkZGVuTGVzc29uc1BlclNlY3Rpb24sXG4gIGhpZGVhYmxlTGVzc29uc0FsbG93ZWRcbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9ISURERU5fTEVTU09OUyxcbiAgICBoaWRkZW5MZXNzb25zUGVyU2VjdGlvbixcbiAgICBoaWRlYWJsZUxlc3NvbnNBbGxvd2VkLFxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUhpZGRlbkxlc3NvbihzZWN0aW9uSWQsIGxlc3NvbklkLCBoaWRkZW4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBVUERBVEVfSElEREVOX0xFU1NPTixcbiAgICBzZWN0aW9uSWQsXG4gICAgbGVzc29uSWQsXG4gICAgaGlkZGVuLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSGlkZGVuU2NyaXB0KHNlY3Rpb25JZCwgc2NyaXB0SWQsIGhpZGRlbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFVQREFURV9ISURERU5fU0NSSVBULFxuICAgIHNlY3Rpb25JZCxcbiAgICBzY3JpcHRJZCxcbiAgICBoaWRkZW4sXG4gIH07XG59XG5cbi8qKlxuICogVG9nZ2xlIHRoZSBoaWRkZW4gc3RhdGUgb2YgYSBwYXJ0aWN1bGFyIGxlc3NvbiBpbiBhIHNlY3Rpb24sIHVwZGF0aW5nIG91ciBsb2NhbFxuICogc3RhdGUgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLCBhbmQgcG9zdGluZyB0byB0aGUgc2VydmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlSGlkZGVuTGVzc29uKHNjcmlwdE5hbWUsIHNlY3Rpb25JZCwgbGVzc29uSWQsIGhpZGRlbikge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIC8vIHVwZGF0ZSBsb2NhbCBzdGF0ZVxuICAgIGRpc3BhdGNoKHVwZGF0ZUhpZGRlbkxlc3NvbihzZWN0aW9uSWQsIGxlc3NvbklkLCBoaWRkZW4pKTtcbiAgICBwb3N0VG9nZ2xlSGlkZGVuKHNjcmlwdE5hbWUsIHNlY3Rpb25JZCwgbGVzc29uSWQsIGhpZGRlbik7XG4gIH07XG59XG5cbi8qKlxuICogVG9nZ2xlIHRoZSBoaWRkZW4gc3RhdGUgb2YgYSBwYXJ0aWN1bGFyIHNjcmlwdCBpbiBhIHNlY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVIaWRkZW5TY3JpcHQoc2NyaXB0TmFtZSwgc2VjdGlvbklkLCBzY3JpcHRJZCwgaGlkZGVuKSB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgZGlzcGF0Y2godXBkYXRlSGlkZGVuU2NyaXB0KHNlY3Rpb25JZCwgc2NyaXB0SWQsIGhpZGRlbikpO1xuICAgIHBvc3RUb2dnbGVIaWRkZW4oc2NyaXB0TmFtZSwgc2VjdGlvbklkLCBudWxsLCBoaWRkZW4pO1xuICB9O1xufVxuXG4vKipcbiAqIFBvc3QgdG8gdGhlIHNlcnZlciB0byB0b2dnbGUgdGhlIGhpZGRlbiBzdGF0ZSBvZiBhIGxlc3NvbiBvciBzY3JpcHQuIGxlc3NvbklkXG4gKiBzaG91bGQgYmUgbnVsbCBpZiB3ZSdyZSBoaWRpbmcgdGhlIHNjcmlwdCByYXRoZXIgdGhhbiBhIHBhcnRpY3VsYXIgbGVzc29uXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0TmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlY3Rpb25JZFxuICogQHBhcmFtIHtzdHJpbmd9IGxlc3NvbklkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhpZGRlblxuICovXG5mdW5jdGlvbiBwb3N0VG9nZ2xlSGlkZGVuKHNjcmlwdE5hbWUsIHNlY3Rpb25JZCwgbGVzc29uSWQsIGhpZGRlbikge1xuICBjb25zdCBkYXRhID0ge1xuICAgIHNlY3Rpb25faWQ6IHNlY3Rpb25JZCxcbiAgICBoaWRkZW4sXG4gIH07XG4gIGlmIChsZXNzb25JZCkge1xuICAgIGRhdGEuc3RhZ2VfaWQgPSBsZXNzb25JZDtcbiAgfVxuXG4gICQuYWpheCh7XG4gICAgdHlwZTogJ1BPU1QnLFxuICAgIHVybDogYC9zLyR7c2NyaXB0TmFtZX0vdG9nZ2xlX2hpZGRlbmAsXG4gICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICB9KS5zdWNjZXNzKCgpID0+IHtcbiAgICB3aW5kb3cuX19UZXN0SW50ZXJmYWNlID0gd2luZG93Ll9fVGVzdEludGVyZmFjZSB8fCB7fTtcbiAgICB3aW5kb3cuX19UZXN0SW50ZXJmYWNlLnRvZ2dsZUhpZGRlblVuaXRDb21wbGV0ZSA9IHRydWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIFF1ZXJ5IHNlcnZlciBmb3IgaGlkZGVuIGxlc3NvbiBpZHMsIGFuZCAocG90ZW50aWFsbHkpIHRvZ2dsZSB3aGV0aGVyIG9yIG5vdCB3ZVxuICogYXJlIGFibGUgdG8gbWFyayBsZXNzb25zIGFzIGhpZGVhYmxlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdE5hbWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FuSGlkZUxlc3NvbnMgSWYgdHJ1ZSwgaW5mb3JtIHJlZHV4IHRoYXQgd2UncmUgYWJsZSB0byB0b2dnbGVcbiAqICAgd2hldGhlciBvciBub3QgbGVzc29ucyBhcmUgaGlkZGVuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGlkZGVuTGVzc29ucyhzY3JpcHROYW1lLCBjYW5IaWRlTGVzc29ucykge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogYC9zLyR7c2NyaXB0TmFtZX0vaGlkZGVuX2xlc3NvbnNgLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSlcbiAgICAgIC5kb25lKHJlc3BvbnNlID0+XG4gICAgICAgIGRpc3BhdGNoKGluaXRpYWxpemVIaWRkZW5MZXNzb25zKHJlc3BvbnNlLCBjYW5IaWRlTGVzc29ucykpXG4gICAgICApXG4gICAgICAuZmFpbChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGhpZGRlbiBsZXNzb25zIGJhc2VkIG9uIHNlcnZlciBkYXRhLiBJbiB0aGUgY2FzZSBvZiBhIHN0dWRlbnQsIHRoaXNcbiAqIHdpbGwgYmUgYSBsaXN0IG9mIGhpZGRlbiBsZXNzb24gaWRzLiBJbiB0aGUgY2FzZSBvZiBhIHRlYWNoZXIsIGl0IHdpbGwgYmVcbiAqIGEgbWFwcGluZyBmcm9tIHNlY3Rpb24gaWQgdG8gYSBsaXN0IG9mIGhpZGRlbiBsZXNzb24gaWRzIGZvciB0aGF0IHNlY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nW118T2JqZWN0PHN0cmluZywgc3RyaW5nW10+fSBkYXRhXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhbkhpZGVMZXNzb25zIC0gVHJ1ZSBpZiB3ZSdyZSBhYmxlIHRvIHRvZ2dsZSBoaWRkZW4gbGVzc29uc1xuICovXG5mdW5jdGlvbiBpbml0aWFsaXplSGlkZGVuTGVzc29ucyhkYXRhLCBjYW5IaWRlTGVzc29ucykge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIC8vIEZvciBhIGluc3RydWN0b3IsIHdlIGdldCBiYWNrIGEgbWFwIG9mIHNlY3Rpb24gaWQgdG8gaGlkZGVuIGxlc3NvbiBpZHNcbiAgICAvLyBGb3IgYSBwYXJ0aWNpcGFudCwgd2UganVzdCBnZXQgYmFjayBhIGxpc3Qgb2YgaGlkZGVuIGxlc3NvbiBpZHMuIFR1cm4gdGhhdFxuICAgIC8vIGludG8gYW4gb2JqZWN0LCB1bmRlciB0aGUgJ3NlY3Rpb25JZCcgb2YgU1RVREVOVF9TRUNUSU9OX0lEXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSB7W1NUVURFTlRfU0VDVElPTl9JRF06IGRhdGF9O1xuICAgIH1cblxuICAgIGRpc3BhdGNoKHNldEhpZGRlbkxlc3NvbnMoZGF0YSwgISFjYW5IaWRlTGVzc29ucykpO1xuICB9O1xufVxuXG4vKipcbiAqIEdpdmVuIHNlcnZlciBkYXRhIGZvciB0aGUgc2V0IG9mIHNjcmlwdHMgdGhhdCBhcmUgaGlkZGVuIGZvciB0aGlzIHVzZXIsXG4gKiBwb3B1bGF0ZSBvdXIgcmVkdXggc3RvcmUuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfE9iamVjdDxzdHJpbmcsIHN0cmluZ1tdPn0gZGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUhpZGRlblNjcmlwdHMoZGF0YSkge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZvciBhIHRlYWNoZXIsIHdlIGdldCBiYWNrIGEgbWFwIG9mIHNlY3Rpb24gaWQgdG8gaGlkZGVuIHNjcmlwdCBpZHNcbiAgICAvLyBGb3IgYSBzdHVkZW50LCB3ZSBqdXN0IGdldCBiYWNrIGEgbGlzdCBvZiBoaWRkZW4gc2NyaXB0IGlkcy4gVHVybiB0aGF0XG4gICAgLy8gaW50byBhbiBvYmplY3QsIHVuZGVyIHRoZSAnc2VjdGlvbklkJyBvZiBTVFVERU5UX1NFQ1RJT05fSURcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgZGF0YSA9IHtbU1RVREVOVF9TRUNUSU9OX0lEXTogZGF0YX07XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChzZWN0aW9uSWQgPT4ge1xuICAgICAgY29uc3QgaGlkZGVuU2NyaXB0SWRzID0gZGF0YVtzZWN0aW9uSWRdO1xuICAgICAgaGlkZGVuU2NyaXB0SWRzLmZvckVhY2goc2NyaXB0SWQgPT4ge1xuICAgICAgICBkaXNwYXRjaCh1cGRhdGVIaWRkZW5TY3JpcHQoc2VjdGlvbklkLCBzY3JpcHRJZCwgdHJ1ZSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59XG5cbi8vIHV0aWxzXG5cbi8qKlxuICogSGVscGVyIHRvIGRldGVybWluZSB3aGV0aGVyIGEgbGVzc29uIGlzIGhpZGRlbiBmb3IgYSBnaXZlbiBzZWN0aW9uLiBJZiBub1xuICogc2VjdGlvbiBpcyBnaXZlbiwgd2UgYXNzdW1lIHRoaXMgaXMgYSBzdHVkZW50IGFuZCB1c2UgU1RVREVOVF9TRUNUSU9OX0lEXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xlc3NvbkhpZGRlbkZvclNlY3Rpb24oc3RhdGUsIHNlY3Rpb25JZCwgbGVzc29uSWQpIHtcbiAgcmV0dXJuIGlzSGlkZGVuRm9yU2VjdGlvbihzdGF0ZSwgc2VjdGlvbklkLCBsZXNzb25JZCwgJ2xlc3NvbnNCeVNlY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBzY3JpcHQgaXMgaGlkZGVuIGZvciBhIGdpdmVuIHNlY3Rpb24uIElmIG5vXG4gKiBzZWN0aW9uIGlzIGdpdmVuLCB3ZSBhc3N1bWUgdGhpcyBpcyBhIHN0dWRlbnQgYW5kIHVzZSBTVFVERU5UX1NFQ1RJT05fSURcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NyaXB0SGlkZGVuRm9yU2VjdGlvbihzdGF0ZSwgc2VjdGlvbklkLCBzY3JpcHRJZCkge1xuICByZXR1cm4gaXNIaWRkZW5Gb3JTZWN0aW9uKHN0YXRlLCBzZWN0aW9uSWQsIHNjcmlwdElkLCAnc2NyaXB0c0J5U2VjdGlvbicpO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIGJ5IHRoZSBhYm92ZSB0d28gbWV0aG9kcyBzbyB0aGF0IHdlIGJlaGF2ZSB0aGUgc2FtZSB3aGVuIGxvb2tpbmdcbiAqIGZvciBoaWRkZW4gbGVzc29ucy9zY3JpcHRzXG4gKi9cbmZ1bmN0aW9uIGlzSGlkZGVuRm9yU2VjdGlvbihzdGF0ZSwgc2VjdGlvbklkLCBpdGVtSWQsIGJ5U2VjdGlvbktleSkge1xuICBpZiAoIWl0ZW1JZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBpZiB3ZSBkb24ndCBoYXZlIGEgc2VjdGlvbklkLCB3ZSBtdXN0IGJlIGEgc3R1ZGVudFxuICBpZiAoIXNlY3Rpb25JZCkge1xuICAgIHNlY3Rpb25JZCA9IFNUVURFTlRfU0VDVElPTl9JRDtcbiAgfVxuICBjb25zdCBieVNlY3Rpb24gPSBzdGF0ZS5nZXQoYnlTZWN0aW9uS2V5KTtcbiAgcmV0dXJuICEhYnlTZWN0aW9uLmdldEluKFtzZWN0aW9uSWQudG9TdHJpbmcoKSwgaXRlbUlkLnRvU3RyaW5nKCldKTtcbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7XG4gIGlzU2NyaXB0SGlkZGVuRm9yU2VjdGlvbixcbiAgdXBkYXRlSGlkZGVuU2NyaXB0LFxufSBmcm9tICdAY2RvL2FwcHMvY29kZS1zdHVkaW8vaGlkZGVuTGVzc29uUmVkdXgnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAY2RvL2FwcHMvbGVnYWN5U2hhcmVkQ29tcG9uZW50cy9CdXR0b24nO1xuaW1wb3J0IENvbmZpcm1IaWRkZW5Bc3NpZ25tZW50IGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvY291cnNlT3ZlcnZpZXcvQ29uZmlybUhpZGRlbkFzc2lnbm1lbnQnO1xuaW1wb3J0IHthc3NpZ25Ub1NlY3Rpb259IGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvdGVhY2hlckRhc2hib2FyZC90ZWFjaGVyU2VjdGlvbnNSZWR1eCc7XG5pbXBvcnQgaTE4biBmcm9tICdAY2RvL2xvY2FsZSc7XG5cbmNsYXNzIEFzc2lnbkJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc2VjdGlvbklkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgc2VjdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY291cnNlSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY291cnNlT2ZmZXJpbmdJZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjb3Vyc2VWZXJzaW9uSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc2NyaXB0SWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgYXNzaWdubWVudE5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLy8gUmVkdXhcbiAgICBhc3NpZ25Ub1NlY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGlkZGVuTGVzc29uU3RhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdXBkYXRlSGlkZGVuU2NyaXB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlzUnRsOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBjb25maXJtYXRpb25EaWFsb2dPcGVuOiBmYWxzZSxcbiAgfTtcblxuICBvbkNsb3NlRGlhbG9nID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29uZmlybWF0aW9uRGlhbG9nT3BlbjogZmFsc2UsXG4gICAgfSk7XG4gIH07XG5cbiAgdW5oaWRlQW5kQXNzaWduID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNlY3Rpb25JZCxcbiAgICAgIGNvdXJzZUlkLFxuICAgICAgY291cnNlT2ZmZXJpbmdJZCxcbiAgICAgIGNvdXJzZVZlcnNpb25JZCxcbiAgICAgIHNjcmlwdElkLFxuICAgICAgYXNzaWduVG9TZWN0aW9uLFxuICAgICAgdXBkYXRlSGlkZGVuU2NyaXB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHVwZGF0ZUhpZGRlblNjcmlwdChzZWN0aW9uSWQsIHNjcmlwdElkLCBmYWxzZSk7XG4gICAgYXNzaWduVG9TZWN0aW9uKFxuICAgICAgc2VjdGlvbklkLFxuICAgICAgY291cnNlSWQsXG4gICAgICBjb3Vyc2VPZmZlcmluZ0lkLFxuICAgICAgY291cnNlVmVyc2lvbklkLFxuICAgICAgc2NyaXB0SWRcbiAgICApO1xuICB9O1xuXG4gIGhhbmRsZUNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcmlwdElkLFxuICAgICAgY291cnNlSWQsXG4gICAgICBjb3Vyc2VPZmZlcmluZ0lkLFxuICAgICAgY291cnNlVmVyc2lvbklkLFxuICAgICAgc2VjdGlvbklkLFxuICAgICAgaGlkZGVuTGVzc29uU3RhdGUsXG4gICAgICBhc3NpZ25Ub1NlY3Rpb24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXNIaWRkZW5Gcm9tU2VjdGlvbiA9XG4gICAgICBzZWN0aW9uSWQgJiZcbiAgICAgIHNjcmlwdElkICYmXG4gICAgICBoaWRkZW5MZXNzb25TdGF0ZSAmJlxuICAgICAgaXNTY3JpcHRIaWRkZW5Gb3JTZWN0aW9uKGhpZGRlbkxlc3NvblN0YXRlLCBzZWN0aW9uSWQsIHNjcmlwdElkKTtcbiAgICBpZiAoaXNIaWRkZW5Gcm9tU2VjdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbmZpcm1hdGlvbkRpYWxvZ09wZW46IHRydWUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVG9TZWN0aW9uKFxuICAgICAgICBzZWN0aW9uSWQsXG4gICAgICAgIGNvdXJzZUlkLFxuICAgICAgICBjb3Vyc2VPZmZlcmluZ0lkLFxuICAgICAgICBjb3Vyc2VWZXJzaW9uSWQsXG4gICAgICAgIHNjcmlwdElkXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2NvbmZpcm1hdGlvbkRpYWxvZ09wZW59ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7YXNzaWdubWVudE5hbWUsIHNlY3Rpb25OYW1lLCBpc1J0bH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gQWRqdXN0IHN0eWxlcyBpZiBsb2NhbGUgaXMgUlRMXG4gICAgY29uc3QgYnV0dG9uTWFyZ2luU3R5bGUgPSBpc1J0bFxuICAgICAgPyBzdHlsZXMuYnV0dG9uTWFyZ2luUlRMXG4gICAgICA6IHN0eWxlcy5idXR0b25NYXJnaW47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17YnV0dG9uTWFyZ2luU3R5bGV9PlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuYm94U2hhZG93fVxuICAgICAgICAgICAgY29sb3I9e0J1dHRvbi5CdXR0b25Db2xvci5icmFuZFNlY29uZGFyeURlZmF1bHR9XG4gICAgICAgICAgICB0ZXh0PXtpMThuLmFzc2lnblRvU2VjdGlvbigpfVxuICAgICAgICAgICAgaWNvbj1cInBsdXNcIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgICAgICAgIGNsYXNzTmFtZT17J3VpdGVzdC1hc3NpZ24tYnV0dG9uJ31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge2NvbmZpcm1hdGlvbkRpYWxvZ09wZW4gJiYgKFxuICAgICAgICAgIDxDb25maXJtSGlkZGVuQXNzaWdubWVudFxuICAgICAgICAgICAgc2VjdGlvbk5hbWU9e3NlY3Rpb25OYW1lfVxuICAgICAgICAgICAgYXNzaWdubWVudE5hbWU9e2Fzc2lnbm1lbnROYW1lfVxuICAgICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlRGlhbG9nfVxuICAgICAgICAgICAgb25Db25maXJtPXt0aGlzLnVuaGlkZUFuZEFzc2lnbn1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbk1hcmdpbjoge1xuICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbiAgYnV0dG9uTWFyZ2luUlRMOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbiAgYm94U2hhZG93OiB7XG4gICAgYm94U2hhZG93OiAnaW5zZXQgMCAycHggMCAwIHJnYigyNTUgMjU1IDI1NSAvIDYzJSknLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IFVuY29ubmVjdGVkQXNzaWduQnV0dG9uID0gQXNzaWduQnV0dG9uO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoe1xuICAgIGhpZGRlbkxlc3NvblN0YXRlOiBzdGF0ZS5oaWRkZW5MZXNzb24sXG4gICAgaXNSdGw6IHN0YXRlLmlzUnRsLFxuICB9KSxcbiAge1xuICAgIGFzc2lnblRvU2VjdGlvbixcbiAgICB1cGRhdGVIaWRkZW5TY3JpcHQsXG4gIH1cbikoQXNzaWduQnV0dG9uKTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BjZG8vYXBwcy9sZWdhY3lTaGFyZWRDb21wb25lbnRzL0J1dHRvbic7XG5pbXBvcnQgaTE4biBmcm9tICdAY2RvL2xvY2FsZSc7XG5cbmltcG9ydCB7QkFTRV9ESUFMT0dfV0lEVEh9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgY29sb3IgZnJvbSAnLi4vdXRpbC9jb2xvcic7XG5cbi8qKlxuICogQmFzZURpYWxvZ1xuICogQSBnZW5lcmljIG1vZGFsIGRpYWxvZyB0aGF0IGhhcyBhbiB4LWNsb3NlIGluIHRoZSB1cHBlciByaWdodCwgYW5kIGFcbiAqIHNlbWktdHJhbnNwYXJlbnQgYmFja2Ryb3AuIENhbiBiZSBjbG9zZWQgYnkgY2xpY2tpbmcgdGhlIHgsIGNsaWNraW5nIHRoZVxuICogYmFja2Ryb3AsIG9yIHByZXNzaW5nIGVzYy5cbiAqXG4gKiBUbyB1c2UgYSBzdHlsZWQgdmVyc2lvbiBvZiB0aGlzIGNvbXBvbmVudCB0aGF0IGZvbGxvd3Mgb3VyIHN0eWxlIGd1aWRlLFxuICogdXNlIFN0eWxpemVkQmFzZURpYWxvZy5qc3guXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VEaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGlzT3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIHVuY2xvc2VhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoaWRlQ2xvc2VCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICAgIGhhbmRsZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAgIC8vIEZvciB1c2UgaW4gcmVhY3Qtc3Rvcnlib29rOyBhbGxvd3MgcmVuZGVyaW5nIGRpYWxvZyBpbmxpbmUgaW4gc3RvcnkgdGFibGVzLlxuICAgIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmdWxsSGVpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1c2VVcGRhdGVkU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBub01vZGFsU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZml4ZWRXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBmaXhlZEhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB1c2VGbGV4Ym94OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBib2R5SWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYm9keUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzb3VuZFBsYXllcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvdmVyZmxvdzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvLyBUZW1wb3JhcnkgcHJvcCB1bnRpbCBBbmltYXRpb25QaWNrZXJCb2R5IGlzIHJlZGVzaWduZWRcbiAgICBiYWNrZHJvcFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuZm9jdXNEaWFsb2coKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLmZvY3VzRGlhbG9nKCk7XG4gIH1cblxuICBoYW5kbGVLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMuaGFuZGxlS2V5RG93biAmJiB0aGlzLnByb3BzLmhhbmRsZUtleURvd24oZXZlbnQpO1xuICB9O1xuXG4gIGNsb3NlRGlhbG9nID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy51bmNsb3NlYWJsZSAmJiB0aGlzLnByb3BzLmhhbmRsZUNsb3NlKSB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZUNsb3NlKCk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5zb3VuZFBsYXllcikge1xuICAgICAgICB0aGlzLnByb3BzLnNvdW5kUGxheWVyLnN0b3BBbGxBdWRpbygpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKiogQHJldHVybnMge0FycmF5LjxFbGVtZW50Pn0gKi9cbiAgZ2V0VGFiYmFibGVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gW10uc2xpY2UuY2FsbCh0aGlzLnJlZnMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EsYnV0dG9uLGlucHV0JykpO1xuICB9XG5cbiAgZm9jdXNEaWFsb2coKSB7XG4gICAgLy8gRG9uJ3Qgc3RlYWwgZm9jdXMgaWYgdGhlIGFjdGl2ZSBlbGVtZW50IGlzIGFscmVhZHkgYSBkZXNjZW5kYW50IG9mIHRoZVxuICAgIC8vIGRpYWxvZyAtIHByZXZlbnRzIGZvY3VzIGxvc3Mgb24gdXBkYXRlcyBvZiBvcGVuIEJhc2VEaWFsb2cgY29tcG9uZW50cy5cbiAgICBjb25zdCBkZXNjZW5kYW50SXNBY3RpdmUgPVxuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgICAgdGhpcy5yZWZzLmRpYWxvZyAmJlxuICAgICAgdGhpcy5yZWZzLmRpYWxvZy5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4gJiYgIWRlc2NlbmRhbnRJc0FjdGl2ZSkge1xuICAgICAgdGhpcy5yZWZzLmRpYWxvZy5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuaXNPcGVuICYmICF0aGlzLnByb3BzLmhpZGVCYWNrZHJvcCkge1xuICAgICAgcmV0dXJuIDxkaXYgLz47XG4gICAgfVxuXG4gICAgbGV0IGJvZHlTdHlsZSwgbW9kYWxCb2R5U3R5bGUsIHhDbG9zZVN0eWxlO1xuICAgIGlmICh0aGlzLnByb3BzLmZ1bGxXaWR0aCkge1xuICAgICAgYm9keVN0eWxlID0ge1xuICAgICAgICAuLi5ib2R5U3R5bGUsXG4gICAgICAgIHdpZHRoOiAnOTAlJyxcbiAgICAgICAgbWFyZ2luTGVmdDogJy00NSUnLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuZnVsbEhlaWdodCkge1xuICAgICAgYm9keVN0eWxlID0ge1xuICAgICAgICAuLi5ib2R5U3R5bGUsXG4gICAgICAgIGhlaWdodDogJzgwJScsXG4gICAgICB9O1xuICAgICAgbW9kYWxCb2R5U3R5bGUgPSB7XG4gICAgICAgIC4uLm1vZGFsQm9keVN0eWxlLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHdyYXBwZXJDbGFzc05hbWVzID0gJyc7XG4gICAgbGV0IG1vZGFsQ2xhc3NOYW1lcyA9ICdtb2RhbCc7XG4gICAgbGV0IG1vZGFsQm9keUNsYXNzTmFtZXMgPSAnbW9kYWwtYm9keSc7XG4gICAgbGV0IG1vZGFsQmFja2Ryb3BDbGFzc05hbWVzID0gJ21vZGFsLWJhY2tkcm9wJztcbiAgICBjb25zdCBvdmVyZmxvd1ggPSB0aGlzLnByb3BzLm92ZXJmbG93IHx8ICdoaWRkZW4nO1xuICAgIGNvbnN0IG92ZXJmbG93WSA9XG4gICAgICB0aGlzLnByb3BzLm92ZXJmbG93IHx8XG4gICAgICAodGhpcy5wcm9wcy5maXhlZEhlaWdodCB8fCB0aGlzLnByb3BzLmZ1bGxIZWlnaHQgPyAnaGlkZGVuJyA6ICdhdXRvJyk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy51c2VVcGRhdGVkU3R5bGVzKSB7XG4gICAgICB3cmFwcGVyQ2xhc3NOYW1lcyA9ICdkYXNoYm9hcmQtc3R5bGVzJztcbiAgICAgIG1vZGFsQm9keUNsYXNzTmFtZXMgPSAnJztcbiAgICAgIG1vZGFsQm9keVN0eWxlID0ge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5maXhlZEhlaWdodCxcbiAgICAgICAgbWF4SGVpZ2h0OiAhdGhpcy5wcm9wcy5maXhlZEhlaWdodCAmJiAnODV2aCcsXG4gICAgICAgIG92ZXJmbG93WDogb3ZlcmZsb3dYLFxuICAgICAgICBvdmVyZmxvd1k6IG92ZXJmbG93WSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLnByb3BzLnVzZUZsZXhib3gpIHtcbiAgICAgICAgbW9kYWxCb2R5U3R5bGUgPSB7XG4gICAgICAgICAgLi4ubW9kYWxCb2R5U3R5bGUsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgYm9keVN0eWxlID0ge1xuICAgICAgICAuLi5ib2R5U3R5bGUsXG4gICAgICAgIHdpZHRoOiB0aGlzLnByb3BzLmZpeGVkV2lkdGggfHwgQkFTRV9ESUFMT0dfV0lEVEgsXG4gICAgICAgIG1hcmdpbkxlZnQ6IC10aGlzLnByb3BzLmZpeGVkV2lkdGggLyAyIHx8IC0zNTAsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5ub01vZGFsU3R5bGVzKSB7XG4gICAgICBtb2RhbENsYXNzTmFtZXMgPSAnJztcbiAgICAgIG1vZGFsQm9keUNsYXNzTmFtZXMgPSAnJztcbiAgICB9XG5cbiAgICBib2R5U3R5bGUgPSB7XG4gICAgICAuLi5ib2R5U3R5bGUsXG4gICAgICAuLi4odGhpcy5wcm9wcy5oaWRlQmFja2Ryb3AgJiYge1xuICAgICAgICBwb3NpdGlvbjogJ2luaXRpYWwnLFxuICAgICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgfSksXG4gICAgICAuLi50aGlzLnByb3BzLnN0eWxlLFxuICAgIH07XG4gICAgeENsb3NlU3R5bGUgPSB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGluc2V0SW5saW5lRW5kOiAwLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGNvbG9yOiBjb2xvci5uZXV0cmFsX2RhcmszMCxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgfTtcblxuICAgIG1vZGFsQm9keUNsYXNzTmFtZXMgPSBbbW9kYWxCb2R5Q2xhc3NOYW1lcywgdGhpcy5wcm9wcy5ib2R5Q2xhc3NOYW1lXVxuICAgICAgLmZpbHRlcihjbGFzc05hbWUgPT4gISFjbGFzc05hbWUpXG4gICAgICAuam9pbignICcpO1xuXG4gICAgbGV0IGJvZHkgPSAoXG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXtib2R5U3R5bGV9XG4gICAgICAgIHRhYkluZGV4PVwiLTFcIlxuICAgICAgICBjbGFzc05hbWU9e21vZGFsQ2xhc3NOYW1lc31cbiAgICAgICAgcmVmPVwiZGlhbG9nXCJcbiAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17bW9kYWxCb2R5U3R5bGV9XG4gICAgICAgICAgaWQ9e3RoaXMucHJvcHMuYm9keUlkfVxuICAgICAgICAgIGNsYXNzTmFtZT17bW9kYWxCb2R5Q2xhc3NOYW1lc31cbiAgICAgICAgPlxuICAgICAgICAgIHshdGhpcy5wcm9wcy51bmNsb3NlYWJsZSAmJiAhdGhpcy5wcm9wcy5oaWRlQ2xvc2VCdXR0b24gJiYgKFxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBpZD1cIngtY2xvc2VcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsb3NlRGlhbG9nfVxuICAgICAgICAgICAgICBpY29uPVwiZmEtc29saWQgZmEteG1hcmtcIlxuICAgICAgICAgICAgICBzdHlsZT17eENsb3NlU3R5bGV9XG4gICAgICAgICAgICAgIGNvbG9yPVwid2hpdGVcIlxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtpMThuLmNsb3NlRGlhbG9nKCl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmhpZGVCYWNrZHJvcCkge1xuICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXt3cmFwcGVyQ2xhc3NOYW1lc30+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e21vZGFsQmFja2Ryb3BDbGFzc05hbWVzfVxuICAgICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLmJhY2tkcm9wU3R5bGV9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5jbG9zZURpYWxvZ31cbiAgICAgICAgLz5cbiAgICAgICAge2JvZHl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnQGNkby9hcHBzL2xlZ2FjeVNoYXJlZENvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBCYXNlRGlhbG9nIGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvQmFzZURpYWxvZyc7XG5pbXBvcnQgY29sb3IgZnJvbSAnQGNkby9hcHBzL3V0aWwvY29sb3InO1xuaW1wb3J0IGkxOG4gZnJvbSAnQGNkby9sb2NhbGUnO1xuXG4vKipcbiAqIENvbmZpcm1hdGlvbiBkaWFsb2cgZm9yIHdoZW4gYXNzaWduaW5nIGEgc2NyaXB0IG9yIGNvdXJzZSBmcm9tIHRoZSBjb3Vyc2Ugb3Igc2NyaXB0IG92ZXJ2aWV3IHBhZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uZmlybUhpZGRlbkFzc2lnbm1lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHNlY3Rpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYXNzaWdubWVudE5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ29uZmlybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3NlY3Rpb25OYW1lLCBhc3NpZ25tZW50TmFtZSwgb25DbG9zZSwgb25Db25maXJtfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2VEaWFsb2cgaXNPcGVuPXt0cnVlfSBoYW5kbGVDbG9zZT17b25DbG9zZX0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5oZWFkZXJ9IGNsYXNzTmFtZT1cInVpdGVzdC1jb25maXJtLWFzc2lnbm1lbnQtZGlhbG9nXCI+XG4gICAgICAgICAge2kxOG4udW5oaWRlQW5kQXNzaWduSGVhZGVyKCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGVudH0+XG4gICAgICAgICAge2kxOG4uYXNzaWduSGlkZGVuVW5pdENvbmZpcm0oe2Fzc2lnbm1lbnROYW1lLCBzZWN0aW9uTmFtZX0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17e3RleHRBbGlnbjogJ3JpZ2h0J319PlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHRleHQ9e2kxOG4uZGlhbG9nQ2FuY2VsKCl9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNsb3NlfVxuICAgICAgICAgICAgY29sb3I9e0J1dHRvbi5CdXR0b25Db2xvci5ncmF5fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgaWQ9XCJjb25maXJtLWFzc2lnblwiXG4gICAgICAgICAgICB0ZXh0PXtpMThuLnVuaGlkZVVuaXRBbmRBc3NpZ24oKX1cbiAgICAgICAgICAgIHN0eWxlPXt7bWFyZ2luTGVmdDogNX19XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNvbmZpcm19XG4gICAgICAgICAgICBjb2xvcj17QnV0dG9uLkJ1dHRvbkNvbG9yLmJyYW5kU2Vjb25kYXJ5RGVmYXVsdH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQmFzZURpYWxvZz5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgaGVhZGVyOiB7XG4gICAgZm9udFNpemU6IDE2LFxuICAgIG1hcmdpbkJvdHRvbTogNSxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBmb250U2l6ZTogMTQsXG4gICAgbWFyZ2luQm90dG9tOiAxMCxcbiAgICBtYXJnaW5Ub3A6IDEwLFxuICAgIHBhZGRpbmdCb3R0b206IDIwLFxuICAgIHBhZGRpbmdUb3A6IDIwLFxuICAgIGJvcmRlclRvcFdpZHRoOiAxLFxuICAgIGJvcmRlckJvdHRvbVdpZHRoOiAxLFxuICAgIGJvcmRlckxlZnRXaWR0aDogMCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiAwLFxuICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgIGJvcmRlckNvbG9yOiBjb2xvci5saWdodGVyX2dyYXksXG4gIH0sXG59O1xuIiwiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bms7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6WyJyZWR1Y2VyIiwic3RhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJIaWRkZW5TdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJTRVRfSElEREVOX0xFU1NPTlMiLCJoaWRkZW5MZXNzb25zUGVyU2VjdGlvbiIsImhpZGVhYmxlTGVzc29uc0FsbG93ZWQiLCJzZWN0aW9uSWRzIiwiT2JqZWN0Iiwia2V5cyIsIm5leHRTdGF0ZSIsImZvckVhY2giLCJzZWN0aW9uSWQiLCJsZXNzb25JZCIsInNldEluIiwidG9TdHJpbmciLCJ2YWxpZGF0ZVNlY3Rpb25JZHMiLCJtZXJnZSIsImhpZGRlbkxlc3NvbnNJbml0aWFsaXplZCIsIlVQREFURV9ISURERU5fTEVTU09OIiwiaGlkZGVuIiwiVVBEQVRFX0hJRERFTl9TQ1JJUFQiLCJzY3JpcHRJZCIsImdldEhpZGRlbkxlc3NvbnMiLCJzY3JpcHROYW1lIiwiY2FuSGlkZUxlc3NvbnMiLCJkaXNwYXRjaCIsIiQiLCJhamF4IiwidXJsIiwiY29uY2F0IiwiZGF0YVR5cGUiLCJjb250ZW50VHlwZSIsImRvbmUiLCJyZXNwb25zZSIsImluaXRpYWxpemVIaWRkZW5MZXNzb25zIiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsIl9kZWZpbmVQcm9wZXJ0eSIsIlNUVURFTlRfU0VDVElPTl9JRCIsInNldEhpZGRlbkxlc3NvbnMiLCJmYWlsIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiaW5pdGlhbGl6ZUhpZGRlblNjcmlwdHMiLCJ1cGRhdGVIaWRkZW5TY3JpcHQiLCJpc0xlc3NvbkhpZGRlbkZvclNlY3Rpb24iLCJpc0hpZGRlbkZvclNlY3Rpb24iLCJpc1NjcmlwdEhpZGRlbkZvclNlY3Rpb24iLCJ0b2dnbGVIaWRkZW5MZXNzb24iLCJ1cGRhdGVIaWRkZW5MZXNzb24iLCJwb3N0VG9nZ2xlSGlkZGVuIiwidG9nZ2xlSGlkZGVuU2NyaXB0IiwiX2ltbXV0YWJsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2pxdWVyeSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJyIiwiZSIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXhwb3J0cyIsIkltbXV0YWJsZSIsIlJlY29yZCIsImxlc3NvbnNCeVNlY3Rpb24iLCJNYXAiLCJzY3JpcHRzQnlTZWN0aW9uIiwiZ2V0SW4iLCJnZXQiLCJzaXplIiwiRXJyb3IiLCJzZWN0aW9uX2lkIiwic3RhZ2VfaWQiLCJKU09OIiwic3RyaW5naWZ5Iiwic3VjY2VzcyIsIndpbmRvdyIsIl9fVGVzdEludGVyZmFjZSIsInRvZ2dsZUhpZGRlblVuaXRDb21wbGV0ZSIsIml0ZW1JZCIsImJ5U2VjdGlvbktleSIsIl9wcm9wVHlwZXMiLCJfcmVhY3QiLCJfcmVhY3RSZWR1eCIsIl9oaWRkZW5MZXNzb25SZWR1eCIsIl9CdXR0b24iLCJfQ29uZmlybUhpZGRlbkFzc2lnbm1lbnQiLCJfdGVhY2hlclNlY3Rpb25zUmVkdXgiLCJfbG9jYWxlIiwiX3NldFByb3RvdHlwZU9mIiwicCIsInNldFByb3RvdHlwZU9mIiwiYmluZCIsIl9fcHJvdG9fXyIsIkFzc2lnbkJ1dHRvbiIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFwcGx5IiwiY29uZmlybWF0aW9uRGlhbG9nT3BlbiIsInNldFN0YXRlIiwiX3RoaXMkcHJvcHMiLCJwcm9wcyIsImNvdXJzZUlkIiwiY291cnNlT2ZmZXJpbmdJZCIsImNvdXJzZVZlcnNpb25JZCIsImFzc2lnblRvU2VjdGlvbiIsIl90aGlzJHByb3BzMiIsImhpZGRlbkxlc3NvblN0YXRlIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJyZW5kZXIiLCJ0aGlzIiwiX3RoaXMkcHJvcHMzIiwiYXNzaWdubWVudE5hbWUiLCJzZWN0aW9uTmFtZSIsImJ1dHRvbk1hcmdpblN0eWxlIiwiaXNSdGwiLCJzdHlsZXMiLCJidXR0b25NYXJnaW5SVEwiLCJidXR0b25NYXJnaW4iLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJib3hTaGFkb3ciLCJjb2xvciIsIkJ1dHRvbiIsIkJ1dHRvbkNvbG9yIiwiYnJhbmRTZWNvbmRhcnlEZWZhdWx0IiwidGV4dCIsImkxOG4iLCJpY29uIiwib25DbGljayIsImhhbmRsZUNsaWNrIiwiY2xhc3NOYW1lIiwib25DbG9zZSIsIm9uQ2xvc2VEaWFsb2ciLCJvbkNvbmZpcm0iLCJ1bmhpZGVBbmRBc3NpZ24iLCJSZWFjdCIsIkNvbXBvbmVudCIsIlByb3BUeXBlcyIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJmdW5jIiwib2JqZWN0IiwiYm9vbCIsIm1hcmdpbkxlZnQiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsIm1hcmdpblJpZ2h0IiwiY29ubmVjdCIsImhpZGRlbkxlc3NvbiIsIl9jb25zdGFudHMiLCJfY29sb3IiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHVzaCIsIl9vYmplY3RTcHJlYWQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIkJhc2VEaWFsb2ciLCJldmVudCIsImNsb3NlRGlhbG9nIiwiaGFuZGxlS2V5RG93biIsInVuY2xvc2VhYmxlIiwiaGFuZGxlQ2xvc2UiLCJzb3VuZFBsYXllciIsInN0b3BBbGxBdWRpbyIsIl9wcm90byIsImNvbXBvbmVudERpZE1vdW50IiwiZm9jdXNEaWFsb2ciLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRUYWJiYWJsZUVsZW1lbnRzIiwic2xpY2UiLCJyZWZzIiwiZGlhbG9nIiwicXVlcnlTZWxlY3RvckFsbCIsImRlc2NlbmRhbnRJc0FjdGl2ZSIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImNvbnRhaW5zIiwiaXNPcGVuIiwiZm9jdXMiLCJoaWRlQmFja2Ryb3AiLCJib2R5U3R5bGUiLCJtb2RhbEJvZHlTdHlsZSIsInhDbG9zZVN0eWxlIiwiZnVsbFdpZHRoIiwid2lkdGgiLCJmdWxsSGVpZ2h0IiwiaGVpZ2h0IiwiYm94U2l6aW5nIiwid3JhcHBlckNsYXNzTmFtZXMiLCJtb2RhbENsYXNzTmFtZXMiLCJtb2RhbEJvZHlDbGFzc05hbWVzIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1kiLCJmaXhlZEhlaWdodCIsInVzZVVwZGF0ZWRTdHlsZXMiLCJiYWNrZ3JvdW5kIiwibWF4SGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwidXNlRmxleGJveCIsImZsZXhEaXJlY3Rpb24iLCJmaXhlZFdpZHRoIiwiQkFTRV9ESUFMT0dfV0lEVEgiLCJub01vZGFsU3R5bGVzIiwicG9zaXRpb24iLCJ0b3AiLCJpbnNldElubGluZUVuZCIsInBhZGRpbmciLCJuZXV0cmFsX2RhcmszMCIsImN1cnNvciIsImZvbnRTaXplIiwiYm9yZGVyIiwiYm9keUNsYXNzTmFtZSIsImpvaW4iLCJib2R5IiwidGFiSW5kZXgiLCJyZWYiLCJvbktleURvd24iLCJpZCIsImJvZHlJZCIsImhpZGVDbG9zZUJ1dHRvbiIsImNoaWxkcmVuIiwiYmFja2Ryb3BTdHlsZSIsIm5vZGUiLCJtb2R1bGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImhhcyIsIm4iLCJhIiwidSIsImhhc093blByb3BlcnR5Iiwic2V0IiwiX0Jhc2VEaWFsb2ciLCJXZWFrTWFwIiwiX0NvbXBvbmVudCIsIkNvbmZpcm1IaWRkZW5Bc3NpZ25tZW50IiwiaGVhZGVyIiwidW5oaWRlQW5kQXNzaWduSGVhZGVyIiwiY29udGVudCIsImFzc2lnbkhpZGRlblVuaXRDb25maXJtIiwidGV4dEFsaWduIiwiZGlhbG9nQ2FuY2VsIiwiZ3JheSIsInVuaGlkZVVuaXRBbmRBc3NpZ24iLCJtYXJnaW5Cb3R0b20iLCJmb250V2VpZ2h0IiwibWFyZ2luVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJsaWdodGVyX2dyYXkiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFyZ1R5cGUiLCJpbm5lciIsImluY2x1ZGVzIiwiZGVmYXVsdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwibWFwIiwiaXRlbSIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwiX3JlZiIsImdldFN0YXRlIiwibmV4dCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydEJ5U2VsZWN0b3IiLCJpbnNlcnQiLCJ0YXJnZXQiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImluc2VydFN0eWxlRWxlbWVudCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSJdLCJzb3VyY2VSb290IjoiIn0=