/*! For license information please see 3516.fd9bf271.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[3516],{"./node_modules/global/document.js":(module,__unused_webpack_exports,__webpack_require__)=>{var doccy,topLevel=void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof window?window:{},minDoc=__webpack_require__("?34aa");"undefined"!=typeof document?doccy=document:(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"])||(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"]=minDoc),module.exports=doccy},"./node_modules/global/window.js":(module,__unused_webpack_exports,__webpack_require__)=>{var win;win="undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:{},module.exports=win},"./node_modules/is-function/index.js":module=>{module.exports=function isFunction(fn){var string=toString.call(fn);return"[object Function]"===string||"function"==typeof fn&&"[object RegExp]"!==string||"undefined"!=typeof window&&(fn===window.setTimeout||fn===window.alert||fn===window.confirm||fn===window.prompt)};var toString=Object.prototype.toString},"./node_modules/keycode/index.js":(module,exports)=>{function keyCode(searchInput){if(searchInput&&"object"==typeof searchInput){var hasKeyCode=searchInput.which||searchInput.keyCode||searchInput.charCode;hasKeyCode&&(searchInput=hasKeyCode)}if("number"==typeof searchInput)return names[searchInput];var foundNamedKey,search=String(searchInput);return(foundNamedKey=codes[search.toLowerCase()])?foundNamedKey:(foundNamedKey=aliases[search.toLowerCase()])||(1===search.length?search.charCodeAt(0):void 0)}keyCode.isEventKey=function isEventKey(event,nameOrCode){if(event&&"object"==typeof event){var keyCode=event.which||event.keyCode||event.charCode;if(null==keyCode)return!1;if("string"==typeof nameOrCode){var foundNamedKey;if(foundNamedKey=codes[nameOrCode.toLowerCase()])return foundNamedKey===keyCode;if(foundNamedKey=aliases[nameOrCode.toLowerCase()])return foundNamedKey===keyCode}else if("number"==typeof nameOrCode)return nameOrCode===keyCode;return!1}};var codes=(exports=module.exports=keyCode).code=exports.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},aliases=exports.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};for(i=97;i<123;i++)codes[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)codes[i-48]=i;for(i=1;i<13;i++)codes["f"+i]=i+111;for(i=0;i<10;i++)codes["numpad "+i]=i+96;var names=exports.names=exports.title={};for(i in codes)names[codes[i]]=i;for(var alias in aliases)codes[alias]=aliases[alias]},"./node_modules/mux.js/lib/aac/utils.js":module=>{"use strict";var ADTS_SAMPLING_FREQUENCIES=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350],parseSyncSafeInteger=function(data){return data[0]<<21|data[1]<<14|data[2]<<7|data[3]};module.exports={isLikelyAacData:function(data){return data[0]==="I".charCodeAt(0)&&data[1]==="D".charCodeAt(0)&&data[2]==="3".charCodeAt(0)},parseId3TagSize:function(header,byteIndex){var returnSize=header[byteIndex+6]<<21|header[byteIndex+7]<<14|header[byteIndex+8]<<7|header[byteIndex+9];return(16&header[byteIndex+5])>>4?returnSize+20:returnSize+10},parseAdtsSize:function(header,byteIndex){var lowThree=(224&header[byteIndex+5])>>5,middle=header[byteIndex+4]<<3;return 6144&header[byteIndex+3]|middle|lowThree},parseType:function(header,byteIndex){return header[byteIndex]==="I".charCodeAt(0)&&header[byteIndex+1]==="D".charCodeAt(0)&&header[byteIndex+2]==="3".charCodeAt(0)?"timed-metadata":!0&header[byteIndex]&&!(240&~header[byteIndex+1])?"audio":null},parseSampleRate:function(packet){for(var i=0;i+5<packet.length;){if(255===packet[i]&&240==(246&packet[i+1]))return ADTS_SAMPLING_FREQUENCIES[(60&packet[i+2])>>>2];i++}return null},parseAacTimestamp:function(packet){var frameStart,frameSize,frame;frameStart=10,64&packet[5]&&(frameStart+=4,frameStart+=parseSyncSafeInteger(packet.subarray(10,14)));do{if((frameSize=parseSyncSafeInteger(packet.subarray(frameStart+4,frameStart+8)))<1)return null;if("PRIV"===String.fromCharCode(packet[frameStart],packet[frameStart+1],packet[frameStart+2],packet[frameStart+3])){frame=packet.subarray(frameStart+10,frameStart+frameSize+10);for(var i=0;i<frame.byteLength;i++)if(0===frame[i]){var owner=unescape(function(bytes,start,end){var i,result="";for(i=start;i<end;i++)result+="%"+("00"+bytes[i].toString(16)).slice(-2);return result}(frame,0,i));if("com.apple.streaming.transportStreamTimestamp"===owner){var d=frame.subarray(i+1),size=(1&d[3])<<30|d[4]<<22|d[5]<<14|d[6]<<6|d[7]>>>2;return size*=4,size+=3&d[7]}break}}frameStart+=10,frameStart+=frameSize}while(frameStart<packet.byteLength);return null}}},"./node_modules/mux.js/lib/m2ts/caption-stream.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var Stream=__webpack_require__("./node_modules/mux.js/lib/utils/stream.js"),cea708Parser=__webpack_require__("./node_modules/mux.js/lib/tools/caption-packet-parser.js"),CaptionStream=function(){CaptionStream.prototype.init.call(this),this.captionPackets_=[],this.ccStreams_=[new Cea608Stream(0,0),new Cea608Stream(0,1),new Cea608Stream(1,0),new Cea608Stream(1,1)],this.reset(),this.ccStreams_.forEach((function(cc){cc.on("data",this.trigger.bind(this,"data")),cc.on("partialdone",this.trigger.bind(this,"partialdone")),cc.on("done",this.trigger.bind(this,"done"))}),this)};CaptionStream.prototype=new Stream,CaptionStream.prototype.push=function(event){var sei,userData,newCaptionPackets;if("sei_rbsp"===event.nalUnitType&&(sei=cea708Parser.parseSei(event.escapedRBSP)).payloadType===cea708Parser.USER_DATA_REGISTERED_ITU_T_T35&&(userData=cea708Parser.parseUserData(sei)))if(event.dts<this.latestDts_)this.ignoreNextEqualDts_=!0;else{if(event.dts===this.latestDts_&&this.ignoreNextEqualDts_)return this.numSameDts_--,void(this.numSameDts_||(this.ignoreNextEqualDts_=!1));newCaptionPackets=cea708Parser.parseCaptionPackets(event.pts,userData),this.captionPackets_=this.captionPackets_.concat(newCaptionPackets),this.latestDts_!==event.dts&&(this.numSameDts_=0),this.numSameDts_++,this.latestDts_=event.dts}},CaptionStream.prototype.flushCCStreams=function(flushType){this.ccStreams_.forEach((function(cc){return"flush"===flushType?cc.flush():cc.partialFlush()}),this)},CaptionStream.prototype.flushStream=function(flushType){this.captionPackets_.length?(this.captionPackets_.forEach((function(elem,idx){elem.presortIndex=idx})),this.captionPackets_.sort((function(a,b){return a.pts===b.pts?a.presortIndex-b.presortIndex:a.pts-b.pts})),this.captionPackets_.forEach((function(packet){packet.type<2&&this.dispatchCea608Packet(packet)}),this),this.captionPackets_.length=0,this.flushCCStreams(flushType)):this.flushCCStreams(flushType)},CaptionStream.prototype.flush=function(){return this.flushStream("flush")},CaptionStream.prototype.partialFlush=function(){return this.flushStream("partialFlush")},CaptionStream.prototype.reset=function(){this.latestDts_=null,this.ignoreNextEqualDts_=!1,this.numSameDts_=0,this.activeCea608Channel_=[null,null],this.ccStreams_.forEach((function(ccStream){ccStream.reset()}))},CaptionStream.prototype.dispatchCea608Packet=function(packet){this.setsTextOrXDSActive(packet)?this.activeCea608Channel_[packet.type]=null:this.setsChannel1Active(packet)?this.activeCea608Channel_[packet.type]=0:this.setsChannel2Active(packet)&&(this.activeCea608Channel_[packet.type]=1),null!==this.activeCea608Channel_[packet.type]&&this.ccStreams_[(packet.type<<1)+this.activeCea608Channel_[packet.type]].push(packet)},CaptionStream.prototype.setsChannel1Active=function(packet){return 4096==(30720&packet.ccData)},CaptionStream.prototype.setsChannel2Active=function(packet){return 6144==(30720&packet.ccData)},CaptionStream.prototype.setsTextOrXDSActive=function(packet){return 256==(28928&packet.ccData)||4138==(30974&packet.ccData)||6186==(30974&packet.ccData)};var CHARACTER_TRANSLATION={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,304:174,305:176,306:189,307:191,308:8482,309:162,310:163,311:9834,312:224,313:160,314:232,315:226,316:234,317:238,318:244,319:251,544:193,545:201,546:211,547:218,548:220,549:252,550:8216,551:161,552:42,553:39,554:8212,555:169,556:8480,557:8226,558:8220,559:8221,560:192,561:194,562:199,563:200,564:202,565:203,566:235,567:206,568:207,569:239,570:212,571:217,572:249,573:219,574:171,575:187,800:195,801:227,802:205,803:204,804:236,805:210,806:242,807:213,808:245,809:123,810:125,811:92,812:94,813:95,814:124,815:126,816:196,817:228,818:214,819:246,820:223,821:165,822:164,823:9474,824:197,825:229,826:216,827:248,828:9484,829:9488,830:9492,831:9496},getCharFromCode=function(code){return null===code?"":(code=CHARACTER_TRANSLATION[code]||code,String.fromCharCode(code))},ROWS=[4352,4384,4608,4640,5376,5408,5632,5664,5888,5920,4096,4864,4896,5120,5152],createDisplayBuffer=function(){for(var result=[],i=15;i--;)result.push("");return result},Cea608Stream=function(field,dataChannel){Cea608Stream.prototype.init.call(this),this.field_=field||0,this.dataChannel_=dataChannel||0,this.name_="CC"+(1+(this.field_<<1|this.dataChannel_)),this.setConstants(),this.reset(),this.push=function(packet){var data,swap,char0,char1,text;if((data=32639&packet.ccData)!==this.lastControlCode_){if(4096==(61440&data)?this.lastControlCode_=data:data!==this.PADDING_&&(this.lastControlCode_=null),char0=data>>>8,char1=255&data,data!==this.PADDING_)if(data===this.RESUME_CAPTION_LOADING_)this.mode_="popOn";else if(data===this.END_OF_CAPTION_)this.mode_="popOn",this.clearFormatting(packet.pts),this.flushDisplayed(packet.pts),swap=this.displayed_,this.displayed_=this.nonDisplayed_,this.nonDisplayed_=swap,this.startPts_=packet.pts;else if(data===this.ROLL_UP_2_ROWS_)this.rollUpRows_=2,this.setRollUp(packet.pts);else if(data===this.ROLL_UP_3_ROWS_)this.rollUpRows_=3,this.setRollUp(packet.pts);else if(data===this.ROLL_UP_4_ROWS_)this.rollUpRows_=4,this.setRollUp(packet.pts);else if(data===this.CARRIAGE_RETURN_)this.clearFormatting(packet.pts),this.flushDisplayed(packet.pts),this.shiftRowsUp_(),this.startPts_=packet.pts;else if(data===this.BACKSPACE_)"popOn"===this.mode_?this.nonDisplayed_[this.row_]=this.nonDisplayed_[this.row_].slice(0,-1):this.displayed_[this.row_]=this.displayed_[this.row_].slice(0,-1);else if(data===this.ERASE_DISPLAYED_MEMORY_)this.flushDisplayed(packet.pts),this.displayed_=createDisplayBuffer();else if(data===this.ERASE_NON_DISPLAYED_MEMORY_)this.nonDisplayed_=createDisplayBuffer();else if(data===this.RESUME_DIRECT_CAPTIONING_)"paintOn"!==this.mode_&&(this.flushDisplayed(packet.pts),this.displayed_=createDisplayBuffer()),this.mode_="paintOn",this.startPts_=packet.pts;else if(this.isSpecialCharacter(char0,char1))text=getCharFromCode((char0=(3&char0)<<8)|char1),this[this.mode_](packet.pts,text),this.column_++;else if(this.isExtCharacter(char0,char1))"popOn"===this.mode_?this.nonDisplayed_[this.row_]=this.nonDisplayed_[this.row_].slice(0,-1):this.displayed_[this.row_]=this.displayed_[this.row_].slice(0,-1),text=getCharFromCode((char0=(3&char0)<<8)|char1),this[this.mode_](packet.pts,text),this.column_++;else if(this.isMidRowCode(char0,char1))this.clearFormatting(packet.pts),this[this.mode_](packet.pts," "),this.column_++,14&~char1||this.addFormatting(packet.pts,["i"]),1&~char1||this.addFormatting(packet.pts,["u"]);else if(this.isOffsetControlCode(char0,char1))this.column_+=3&char1;else if(this.isPAC(char0,char1)){var row=ROWS.indexOf(7968&data);"rollUp"===this.mode_&&(row-this.rollUpRows_+1<0&&(row=this.rollUpRows_-1),this.setRollUp(packet.pts,row)),row!==this.row_&&(this.clearFormatting(packet.pts),this.row_=row),1&char1&&-1===this.formatting_.indexOf("u")&&this.addFormatting(packet.pts,["u"]),16&~data||(this.column_=4*((14&data)>>1)),this.isColorPAC(char1)&&(14&~char1||this.addFormatting(packet.pts,["i"]))}else this.isNormalChar(char0)&&(0===char1&&(char1=null),text=getCharFromCode(char0),text+=getCharFromCode(char1),this[this.mode_](packet.pts,text),this.column_+=text.length)}else this.lastControlCode_=null}};Cea608Stream.prototype=new Stream,Cea608Stream.prototype.flushDisplayed=function(pts){var content=this.displayed_.map((function(row){try{return row.trim()}catch(e){return console.error("Skipping malformed caption."),""}})).join("\n").replace(/^\n+|\n+$/g,"");content.length&&this.trigger("data",{startPts:this.startPts_,endPts:pts,text:content,stream:this.name_})},Cea608Stream.prototype.reset=function(){this.mode_="popOn",this.topRow_=0,this.startPts_=0,this.displayed_=createDisplayBuffer(),this.nonDisplayed_=createDisplayBuffer(),this.lastControlCode_=null,this.column_=0,this.row_=14,this.rollUpRows_=2,this.formatting_=[]},Cea608Stream.prototype.setConstants=function(){0===this.dataChannel_?(this.BASE_=16,this.EXT_=17,this.CONTROL_=(20|this.field_)<<8,this.OFFSET_=23):1===this.dataChannel_&&(this.BASE_=24,this.EXT_=25,this.CONTROL_=(28|this.field_)<<8,this.OFFSET_=31),this.PADDING_=0,this.RESUME_CAPTION_LOADING_=32|this.CONTROL_,this.END_OF_CAPTION_=47|this.CONTROL_,this.ROLL_UP_2_ROWS_=37|this.CONTROL_,this.ROLL_UP_3_ROWS_=38|this.CONTROL_,this.ROLL_UP_4_ROWS_=39|this.CONTROL_,this.CARRIAGE_RETURN_=45|this.CONTROL_,this.RESUME_DIRECT_CAPTIONING_=41|this.CONTROL_,this.BACKSPACE_=33|this.CONTROL_,this.ERASE_DISPLAYED_MEMORY_=44|this.CONTROL_,this.ERASE_NON_DISPLAYED_MEMORY_=46|this.CONTROL_},Cea608Stream.prototype.isSpecialCharacter=function(char0,char1){return char0===this.EXT_&&char1>=48&&char1<=63},Cea608Stream.prototype.isExtCharacter=function(char0,char1){return(char0===this.EXT_+1||char0===this.EXT_+2)&&char1>=32&&char1<=63},Cea608Stream.prototype.isMidRowCode=function(char0,char1){return char0===this.EXT_&&char1>=32&&char1<=47},Cea608Stream.prototype.isOffsetControlCode=function(char0,char1){return char0===this.OFFSET_&&char1>=33&&char1<=35},Cea608Stream.prototype.isPAC=function(char0,char1){return char0>=this.BASE_&&char0<this.BASE_+8&&char1>=64&&char1<=127},Cea608Stream.prototype.isColorPAC=function(char1){return char1>=64&&char1<=79||char1>=96&&char1<=127},Cea608Stream.prototype.isNormalChar=function(char){return char>=32&&char<=127},Cea608Stream.prototype.setRollUp=function(pts,newBaseRow){if("rollUp"!==this.mode_&&(this.row_=14,this.mode_="rollUp",this.flushDisplayed(pts),this.nonDisplayed_=createDisplayBuffer(),this.displayed_=createDisplayBuffer()),void 0!==newBaseRow&&newBaseRow!==this.row_)for(var i=0;i<this.rollUpRows_;i++)this.displayed_[newBaseRow-i]=this.displayed_[this.row_-i],this.displayed_[this.row_-i]="";void 0===newBaseRow&&(newBaseRow=this.row_),this.topRow_=newBaseRow-this.rollUpRows_+1},Cea608Stream.prototype.addFormatting=function(pts,format){this.formatting_=this.formatting_.concat(format);var text=format.reduce((function(text,format){return text+"<"+format+">"}),"");this[this.mode_](pts,text)},Cea608Stream.prototype.clearFormatting=function(pts){if(this.formatting_.length){var text=this.formatting_.reverse().reduce((function(text,format){return text+"</"+format+">"}),"");this.formatting_=[],this[this.mode_](pts,text)}},Cea608Stream.prototype.popOn=function(pts,text){var baseRow=this.nonDisplayed_[this.row_];baseRow+=text,this.nonDisplayed_[this.row_]=baseRow},Cea608Stream.prototype.rollUp=function(pts,text){var baseRow=this.displayed_[this.row_];baseRow+=text,this.displayed_[this.row_]=baseRow},Cea608Stream.prototype.shiftRowsUp_=function(){var i;for(i=0;i<this.topRow_;i++)this.displayed_[i]="";for(i=this.row_+1;i<15;i++)this.displayed_[i]="";for(i=this.topRow_;i<this.row_;i++)this.displayed_[i]=this.displayed_[i+1];this.displayed_[this.row_]=""},Cea608Stream.prototype.paintOn=function(pts,text){var baseRow=this.displayed_[this.row_];baseRow+=text,this.displayed_[this.row_]=baseRow},module.exports={CaptionStream,Cea608Stream}},"./node_modules/mux.js/lib/m2ts/probe.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var StreamTypes=__webpack_require__("./node_modules/mux.js/lib/m2ts/stream-types.js"),parsePid=function(packet){var pid=31&packet[1];return pid<<=8,pid|=packet[2]},parsePayloadUnitStartIndicator=function(packet){return!!(64&packet[1])},parseAdaptionField=function(packet){var offset=0;return(48&packet[3])>>>4>1&&(offset+=packet[4]+1),offset},parseNalUnitType=function(type){switch(type){case 5:return"slice_layer_without_partitioning_rbsp_idr";case 6:return"sei_rbsp";case 7:return"seq_parameter_set_rbsp";case 8:return"pic_parameter_set_rbsp";case 9:return"access_unit_delimiter_rbsp";default:return null}};module.exports={parseType:function(packet,pmtPid){var pid=parsePid(packet);return 0===pid?"pat":pid===pmtPid?"pmt":pmtPid?"pes":null},parsePat:function(packet){var pusi=parsePayloadUnitStartIndicator(packet),offset=4+parseAdaptionField(packet);return pusi&&(offset+=packet[offset]+1),(31&packet[offset+10])<<8|packet[offset+11]},parsePmt:function(packet){var programMapTable={},pusi=parsePayloadUnitStartIndicator(packet),payloadOffset=4+parseAdaptionField(packet);if(pusi&&(payloadOffset+=packet[payloadOffset]+1),1&packet[payloadOffset+5]){var tableEnd;tableEnd=3+((15&packet[payloadOffset+1])<<8|packet[payloadOffset+2])-4;for(var offset=12+((15&packet[payloadOffset+10])<<8|packet[payloadOffset+11]);offset<tableEnd;){var i=payloadOffset+offset;programMapTable[(31&packet[i+1])<<8|packet[i+2]]=packet[i],offset+=5+((15&packet[i+3])<<8|packet[i+4])}return programMapTable}},parsePayloadUnitStartIndicator,parsePesType:function(packet,programMapTable){switch(programMapTable[parsePid(packet)]){case StreamTypes.H264_STREAM_TYPE:return"video";case StreamTypes.ADTS_STREAM_TYPE:return"audio";case StreamTypes.METADATA_STREAM_TYPE:return"timed-metadata";default:return null}},parsePesTime:function(packet){if(!parsePayloadUnitStartIndicator(packet))return null;var offset=4+parseAdaptionField(packet);if(offset>=packet.byteLength)return null;var ptsDtsFlags,pes=null;return 192&(ptsDtsFlags=packet[offset+7])&&((pes={}).pts=(14&packet[offset+9])<<27|(255&packet[offset+10])<<20|(254&packet[offset+11])<<12|(255&packet[offset+12])<<5|(254&packet[offset+13])>>>3,pes.pts*=4,pes.pts+=(6&packet[offset+13])>>>1,pes.dts=pes.pts,64&ptsDtsFlags&&(pes.dts=(14&packet[offset+14])<<27|(255&packet[offset+15])<<20|(254&packet[offset+16])<<12|(255&packet[offset+17])<<5|(254&packet[offset+18])>>>3,pes.dts*=4,pes.dts+=(6&packet[offset+18])>>>1)),pes},videoPacketContainsKeyFrame:function(packet){for(var offset=4+parseAdaptionField(packet),frameBuffer=packet.subarray(offset),frameI=0,frameSyncPoint=0,foundKeyFrame=!1;frameSyncPoint<frameBuffer.byteLength-3;frameSyncPoint++)if(1===frameBuffer[frameSyncPoint+2]){frameI=frameSyncPoint+5;break}for(;frameI<frameBuffer.byteLength;)switch(frameBuffer[frameI]){case 0:if(0!==frameBuffer[frameI-1]){frameI+=2;break}if(0!==frameBuffer[frameI-2]){frameI++;break}frameSyncPoint+3!==frameI-2&&"slice_layer_without_partitioning_rbsp_idr"===parseNalUnitType(31&frameBuffer[frameSyncPoint+3])&&(foundKeyFrame=!0);do{frameI++}while(1!==frameBuffer[frameI]&&frameI<frameBuffer.length);frameSyncPoint=frameI-2,frameI+=3;break;case 1:if(0!==frameBuffer[frameI-1]||0!==frameBuffer[frameI-2]){frameI+=3;break}"slice_layer_without_partitioning_rbsp_idr"===parseNalUnitType(31&frameBuffer[frameSyncPoint+3])&&(foundKeyFrame=!0),frameSyncPoint=frameI-2,frameI+=3;break;default:frameI+=3}return frameBuffer=frameBuffer.subarray(frameSyncPoint),frameI-=frameSyncPoint,frameSyncPoint=0,frameBuffer&&frameBuffer.byteLength>3&&"slice_layer_without_partitioning_rbsp_idr"===parseNalUnitType(31&frameBuffer[frameSyncPoint+3])&&(foundKeyFrame=!0),foundKeyFrame}}},"./node_modules/mux.js/lib/m2ts/stream-types.js":module=>{"use strict";module.exports={H264_STREAM_TYPE:27,ADTS_STREAM_TYPE:15,METADATA_STREAM_TYPE:21}},"./node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var Stream=__webpack_require__("./node_modules/mux.js/lib/utils/stream.js"),handleRollover=function(value,reference){var direction=1;for(value>reference&&(direction=-1);Math.abs(reference-value)>4294967296;)value+=8589934592*direction;return value},TimestampRolloverStream=function(type){var lastDTS,referenceDTS;TimestampRolloverStream.prototype.init.call(this),this.type_=type||"shared",this.push=function(data){"shared"!==this.type_&&data.type!==this.type_||(void 0===referenceDTS&&(referenceDTS=data.dts),data.dts=handleRollover(data.dts,referenceDTS),data.pts=handleRollover(data.pts,referenceDTS),lastDTS=data.dts,this.trigger("data",data))},this.flush=function(){referenceDTS=lastDTS,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.discontinuity=function(){referenceDTS=void 0,lastDTS=void 0},this.reset=function(){this.discontinuity(),this.trigger("reset")}};TimestampRolloverStream.prototype=new Stream,module.exports={TimestampRolloverStream,handleRollover}},"./node_modules/mux.js/lib/mp4/caption-parser.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var discardEmulationPreventionBytes=__webpack_require__("./node_modules/mux.js/lib/tools/caption-packet-parser.js").discardEmulationPreventionBytes,CaptionStream=__webpack_require__("./node_modules/mux.js/lib/m2ts/caption-stream.js").CaptionStream,probe=__webpack_require__("./node_modules/mux.js/lib/mp4/probe.js"),inspect=__webpack_require__("./node_modules/mux.js/lib/tools/mp4-inspector.js"),mapToSample=function(offset,samples){for(var approximateOffset=offset,i=0;i<samples.length;i++){var sample=samples[i];if(approximateOffset<sample.size)return sample;approximateOffset-=sample.size}return null},parseCaptionNals=function(segment,videoTrackId){var trafs=probe.findBox(segment,["moof","traf"]),mdats=probe.findBox(segment,["mdat"]),captionNals={},mdatTrafPairs=[];return mdats.forEach((function(mdat,index){var matchingTraf=trafs[index];mdatTrafPairs.push({mdat,traf:matchingTraf})})),mdatTrafPairs.forEach((function(pair){var samples,seiNals,mdat=pair.mdat,traf=pair.traf,tfhd=probe.findBox(traf,["tfhd"]),headerInfo=inspect.parseTfhd(tfhd[0]),trackId=headerInfo.trackId,tfdt=probe.findBox(traf,["tfdt"]),baseMediaDecodeTime=tfdt.length>0?inspect.parseTfdt(tfdt[0]).baseMediaDecodeTime:0,truns=probe.findBox(traf,["trun"]);videoTrackId===trackId&&truns.length>0&&(samples=function(truns,baseMediaDecodeTime,tfhd){var currentDts=baseMediaDecodeTime,defaultSampleDuration=tfhd.defaultSampleDuration||0,defaultSampleSize=tfhd.defaultSampleSize||0,trackId=tfhd.trackId,allSamples=[];return truns.forEach((function(trun){var samples=inspect.parseTrun(trun).samples;samples.forEach((function(sample){void 0===sample.duration&&(sample.duration=defaultSampleDuration),void 0===sample.size&&(sample.size=defaultSampleSize),sample.trackId=trackId,sample.dts=currentDts,void 0===sample.compositionTimeOffset&&(sample.compositionTimeOffset=0),sample.pts=currentDts+sample.compositionTimeOffset,currentDts+=sample.duration})),allSamples=allSamples.concat(samples)})),allSamples}(truns,baseMediaDecodeTime,headerInfo),seiNals=function(avcStream,samples,trackId){var seiNal,i,length,lastMatchedSample,avcView=new DataView(avcStream.buffer,avcStream.byteOffset,avcStream.byteLength),result=[];for(i=0;i+4<avcStream.length;i+=length)if(length=avcView.getUint32(i),i+=4,!(length<=0)&&6==(31&avcStream[i])){var data=avcStream.subarray(i+1,i+1+length),matchingSample=mapToSample(i,samples);seiNal={nalUnitType:"sei_rbsp",size:length,data,escapedRBSP:discardEmulationPreventionBytes(data),trackId},matchingSample?(seiNal.pts=matchingSample.pts,seiNal.dts=matchingSample.dts,lastMatchedSample=matchingSample):(seiNal.pts=lastMatchedSample.pts,seiNal.dts=lastMatchedSample.dts),result.push(seiNal)}return result}(mdat,samples,trackId),captionNals[trackId]||(captionNals[trackId]=[]),captionNals[trackId]=captionNals[trackId].concat(seiNals))})),captionNals};module.exports=function(){var captionStream,segmentCache,trackId,timescale,parsedCaptions,parsingPartial,isInitialized=!1;this.isInitialized=function(){return isInitialized},this.init=function(options){captionStream=new CaptionStream,isInitialized=!0,parsingPartial=!!options&&options.isPartial,captionStream.on("data",(function(event){event.startTime=event.startPts/timescale,event.endTime=event.endPts/timescale,parsedCaptions.captions.push(event),parsedCaptions.captionStreams[event.stream]=!0}))},this.isNewInit=function(videoTrackIds,timescales){return!(videoTrackIds&&0===videoTrackIds.length||timescales&&"object"==typeof timescales&&0===Object.keys(timescales).length)&&(trackId!==videoTrackIds[0]||timescale!==timescales[trackId])},this.parse=function(segment,videoTrackIds,timescales){var parsedData;if(!this.isInitialized())return null;if(!videoTrackIds||!timescales)return null;if(this.isNewInit(videoTrackIds,timescales))trackId=videoTrackIds[0],timescale=timescales[trackId];else if(null===trackId||!timescale)return segmentCache.push(segment),null;for(;segmentCache.length>0;){var cachedSegment=segmentCache.shift();this.parse(cachedSegment,videoTrackIds,timescales)}return parsedData=function(segment,trackId,timescale){return null===trackId?null:{seiNals:parseCaptionNals(segment,trackId)[trackId],timescale}}(segment,trackId,timescale),null!==parsedData&&parsedData.seiNals?(this.pushNals(parsedData.seiNals),this.flushStream(),parsedCaptions):null},this.pushNals=function(nals){if(!this.isInitialized()||!nals||0===nals.length)return null;nals.forEach((function(nal){captionStream.push(nal)}))},this.flushStream=function(){if(!this.isInitialized())return null;parsingPartial?captionStream.partialFlush():captionStream.flush()},this.clearParsedCaptions=function(){parsedCaptions.captions=[],parsedCaptions.captionStreams={}},this.resetCaptionStream=function(){if(!this.isInitialized())return null;captionStream.reset()},this.clearAllCaptions=function(){this.clearParsedCaptions(),this.resetCaptionStream()},this.reset=function(){segmentCache=[],trackId=null,timescale=null,parsedCaptions?this.clearParsedCaptions():parsedCaptions={captions:[],captionStreams:{}},this.resetCaptionStream()},this.reset()}},"./node_modules/mux.js/lib/mp4/probe.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var findBox,parseType,timescale,startTime,getVideoTrackIds,getTracks,toUnsigned=__webpack_require__("./node_modules/mux.js/lib/utils/bin.js").toUnsigned,toHexString=__webpack_require__("./node_modules/mux.js/lib/utils/bin.js").toHexString;findBox=function(data,path){var i,size,type,end,subresults,results=[];if(!path.length)return null;for(i=0;i<data.byteLength;)size=toUnsigned(data[i]<<24|data[i+1]<<16|data[i+2]<<8|data[i+3]),type=parseType(data.subarray(i+4,i+8)),end=size>1?i+size:data.byteLength,type===path[0]&&(1===path.length?results.push(data.subarray(i+8,end)):(subresults=findBox(data.subarray(i+8,end),path.slice(1))).length&&(results=results.concat(subresults))),i=end;return results},parseType=function(buffer){var result="";return result+=String.fromCharCode(buffer[0]),result+=String.fromCharCode(buffer[1]),result+=String.fromCharCode(buffer[2]),result+=String.fromCharCode(buffer[3])},timescale=function(init){return findBox(init,["moov","trak"]).reduce((function(result,trak){var tkhd,version,index,id,mdhd;return(tkhd=findBox(trak,["tkhd"])[0])?(version=tkhd[0],id=toUnsigned(tkhd[index=0===version?12:20]<<24|tkhd[index+1]<<16|tkhd[index+2]<<8|tkhd[index+3]),(mdhd=findBox(trak,["mdia","mdhd"])[0])?(index=0===(version=mdhd[0])?12:20,result[id]=toUnsigned(mdhd[index]<<24|mdhd[index+1]<<16|mdhd[index+2]<<8|mdhd[index+3]),result):null):null}),{})},startTime=function(timescale,fragment){var trafs,baseTimes,result;return trafs=findBox(fragment,["moof","traf"]),baseTimes=[].concat.apply([],trafs.map((function(traf){return findBox(traf,["tfhd"]).map((function(tfhd){var id,scale,baseTime;return id=toUnsigned(tfhd[4]<<24|tfhd[5]<<16|tfhd[6]<<8|tfhd[7]),scale=timescale[id]||9e4,baseTime=findBox(traf,["tfdt"]).map((function(tfdt){var version,result;return version=tfdt[0],result=toUnsigned(tfdt[4]<<24|tfdt[5]<<16|tfdt[6]<<8|tfdt[7]),1===version&&(result*=Math.pow(2,32),result+=toUnsigned(tfdt[8]<<24|tfdt[9]<<16|tfdt[10]<<8|tfdt[11])),result}))[0],(baseTime=baseTime||1/0)/scale}))}))),result=Math.min.apply(null,baseTimes),isFinite(result)?result:0},getVideoTrackIds=function(init){var traks=findBox(init,["moov","trak"]),videoTrackIds=[];return traks.forEach((function(trak){var hdlrs=findBox(trak,["mdia","hdlr"]),tkhds=findBox(trak,["tkhd"]);hdlrs.forEach((function(hdlr,index){var view,trackId,handlerType=parseType(hdlr.subarray(8,12)),tkhd=tkhds[index];"vide"===handlerType&&(trackId=0===(view=new DataView(tkhd.buffer,tkhd.byteOffset,tkhd.byteLength)).getUint8(0)?view.getUint32(12):view.getUint32(20),videoTrackIds.push(trackId))}))})),videoTrackIds},getTracks=function(init){var traks=findBox(init,["moov","trak"]),tracks=[];return traks.forEach((function(trak){var view,version,track={},tkhd=findBox(trak,["tkhd"])[0];tkhd&&(version=(view=new DataView(tkhd.buffer,tkhd.byteOffset,tkhd.byteLength)).getUint8(0),track.id=0===version?view.getUint32(12):view.getUint32(20));var hdlr=findBox(trak,["mdia","hdlr"])[0];if(hdlr){var type=parseType(hdlr.subarray(8,12));track.type="vide"===type?"video":"soun"===type?"audio":type}var stsd=findBox(trak,["mdia","minf","stbl","stsd"])[0];if(stsd){var sampleDescriptions=stsd.subarray(8);track.codec=parseType(sampleDescriptions.subarray(4,8));var codecConfig,codecBox=findBox(sampleDescriptions,[track.codec])[0];codecBox&&(/^[a-z]vc[1-9]$/i.test(track.codec)?(codecConfig=codecBox.subarray(78),"avcC"===parseType(codecConfig.subarray(4,8))&&codecConfig.length>11?(track.codec+=".",track.codec+=toHexString(codecConfig[9]),track.codec+=toHexString(codecConfig[10]),track.codec+=toHexString(codecConfig[11])):track.codec="avc1.4d400d"):/^mp4[a,v]$/i.test(track.codec)&&(codecConfig=codecBox.subarray(28),"esds"===parseType(codecConfig.subarray(4,8))&&codecConfig.length>20&&0!==codecConfig[19]?(track.codec+="."+toHexString(codecConfig[19]),track.codec+="."+toHexString(codecConfig[20]>>>2&63).replace(/^0/,"")):track.codec="mp4a.40.2"))}var mdhd=findBox(trak,["mdia","mdhd"])[0];if(mdhd&&tkhd){var index=0===version?12:20;track.timescale=toUnsigned(mdhd[index]<<24|mdhd[index+1]<<16|mdhd[index+2]<<8|mdhd[index+3])}tracks.push(track)})),tracks},module.exports={findBox,parseType,timescale,startTime,videoTrackIds:getVideoTrackIds,tracks:getTracks}},"./node_modules/mux.js/lib/tools/caption-packet-parser.js":module=>{"use strict";module.exports={parseSei:function(bytes){for(var i=0,result={payloadType:-1,payloadSize:0},payloadType=0,payloadSize=0;i<bytes.byteLength&&128!==bytes[i];){for(;255===bytes[i];)payloadType+=255,i++;for(payloadType+=bytes[i++];255===bytes[i];)payloadSize+=255,i++;if(payloadSize+=bytes[i++],!result.payload&&4===payloadType){result.payloadType=payloadType,result.payloadSize=payloadSize,result.payload=bytes.subarray(i,i+payloadSize);break}i+=payloadSize,payloadType=0,payloadSize=0}return result},parseUserData:function(sei){return 181!==sei.payload[0]||49!=(sei.payload[1]<<8|sei.payload[2])||"GA94"!==String.fromCharCode(sei.payload[3],sei.payload[4],sei.payload[5],sei.payload[6])||3!==sei.payload[7]?null:sei.payload.subarray(8,sei.payload.length-1)},parseCaptionPackets:function(pts,userData){var i,count,offset,data,results=[];if(!(64&userData[0]))return results;for(count=31&userData[0],i=0;i<count;i++)data={type:3&userData[(offset=3*i)+2],pts},4&userData[offset+2]&&(data.ccData=userData[offset+3]<<8|userData[offset+4],results.push(data));return results},discardEmulationPreventionBytes:function(data){for(var newLength,newData,length=data.byteLength,emulationPreventionBytesPositions=[],i=1;i<length-2;)0===data[i]&&0===data[i+1]&&3===data[i+2]?(emulationPreventionBytesPositions.push(i+2),i+=2):i++;if(0===emulationPreventionBytesPositions.length)return data;newLength=length-emulationPreventionBytesPositions.length,newData=new Uint8Array(newLength);var sourceIndex=0;for(i=0;i<newLength;sourceIndex++,i++)sourceIndex===emulationPreventionBytesPositions[0]&&(sourceIndex++,emulationPreventionBytesPositions.shift()),newData[i]=data[sourceIndex];return newData},USER_DATA_REGISTERED_ITU_T_T35:4}},"./node_modules/mux.js/lib/tools/mp4-inspector.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var inspectMp4,textifyMp4,parseType=__webpack_require__("./node_modules/mux.js/lib/mp4/probe.js").parseType,parseMp4Date=function(seconds){return new Date(1e3*seconds-20828448e5)},parseSampleFlags=function(flags){return{isLeading:(12&flags[0])>>>2,dependsOn:3&flags[0],isDependedOn:(192&flags[1])>>>6,hasRedundancy:(48&flags[1])>>>4,paddingValue:(14&flags[1])>>>1,isNonSyncSample:1&flags[1],degradationPriority:flags[2]<<8|flags[3]}},nalParse=function(avcStream){var i,length,avcView=new DataView(avcStream.buffer,avcStream.byteOffset,avcStream.byteLength),result=[];for(i=0;i+4<avcStream.length;i+=length)if(length=avcView.getUint32(i),i+=4,length<=0)result.push("<span style='color:red;'>MALFORMED DATA</span>");else switch(31&avcStream[i]){case 1:result.push("slice_layer_without_partitioning_rbsp");break;case 5:result.push("slice_layer_without_partitioning_rbsp_idr");break;case 6:result.push("sei_rbsp");break;case 7:result.push("seq_parameter_set_rbsp");break;case 8:result.push("pic_parameter_set_rbsp");break;case 9:result.push("access_unit_delimiter_rbsp");break;default:result.push("UNKNOWN NAL - "+avcStream[i]&31)}return result},parse={avc1:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength);return{dataReferenceIndex:view.getUint16(6),width:view.getUint16(24),height:view.getUint16(26),horizresolution:view.getUint16(28)+view.getUint16(30)/16,vertresolution:view.getUint16(32)+view.getUint16(34)/16,frameCount:view.getUint16(40),depth:view.getUint16(74),config:inspectMp4(data.subarray(78,data.byteLength))}},avcC:function(data){var numOfPictureParameterSets,nalSize,offset,i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={configurationVersion:data[0],avcProfileIndication:data[1],profileCompatibility:data[2],avcLevelIndication:data[3],lengthSizeMinusOne:3&data[4],sps:[],pps:[]},numOfSequenceParameterSets=31&data[5];for(offset=6,i=0;i<numOfSequenceParameterSets;i++)nalSize=view.getUint16(offset),offset+=2,result.sps.push(new Uint8Array(data.subarray(offset,offset+nalSize))),offset+=nalSize;for(numOfPictureParameterSets=data[offset],offset++,i=0;i<numOfPictureParameterSets;i++)nalSize=view.getUint16(offset),offset+=2,result.pps.push(new Uint8Array(data.subarray(offset,offset+nalSize))),offset+=nalSize;return result},btrt:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength);return{bufferSizeDB:view.getUint32(0),maxBitrate:view.getUint32(4),avgBitrate:view.getUint32(8)}},esds:function(data){return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),esId:data[6]<<8|data[7],streamPriority:31&data[8],decoderConfig:{objectProfileIndication:data[11],streamType:data[12]>>>2&63,bufferSize:data[13]<<16|data[14]<<8|data[15],maxBitrate:data[16]<<24|data[17]<<16|data[18]<<8|data[19],avgBitrate:data[20]<<24|data[21]<<16|data[22]<<8|data[23],decoderConfigDescriptor:{tag:data[24],length:data[25],audioObjectType:data[26]>>>3&31,samplingFrequencyIndex:(7&data[26])<<1|data[27]>>>7&1,channelConfiguration:data[27]>>>3&15}}}},ftyp:function(data){for(var view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={majorBrand:parseType(data.subarray(0,4)),minorVersion:view.getUint32(4),compatibleBrands:[]},i=8;i<data.byteLength;)result.compatibleBrands.push(parseType(data.subarray(i,i+4))),i+=4;return result},dinf:function(data){return{boxes:inspectMp4(data)}},dref:function(data){return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),dataReferences:inspectMp4(data.subarray(8))}},hdlr:function(data){var result={version:new DataView(data.buffer,data.byteOffset,data.byteLength).getUint8(0),flags:new Uint8Array(data.subarray(1,4)),handlerType:parseType(data.subarray(8,12)),name:""},i=8;for(i=24;i<data.byteLength;i++){if(0===data[i]){i++;break}result.name+=String.fromCharCode(data[i])}return result.name=decodeURIComponent(escape(result.name)),result},mdat:function(data){return{byteLength:data.byteLength,nals:nalParse(data)}},mdhd:function(data){var language,view=new DataView(data.buffer,data.byteOffset,data.byteLength),i=4,result={version:view.getUint8(0),flags:new Uint8Array(data.subarray(1,4)),language:""};return 1===result.version?(i+=4,result.creationTime=parseMp4Date(view.getUint32(i)),i+=8,result.modificationTime=parseMp4Date(view.getUint32(i)),i+=4,result.timescale=view.getUint32(i),i+=8,result.duration=view.getUint32(i)):(result.creationTime=parseMp4Date(view.getUint32(i)),i+=4,result.modificationTime=parseMp4Date(view.getUint32(i)),i+=4,result.timescale=view.getUint32(i),i+=4,result.duration=view.getUint32(i)),i+=4,language=view.getUint16(i),result.language+=String.fromCharCode(96+(language>>10)),result.language+=String.fromCharCode(96+((992&language)>>5)),result.language+=String.fromCharCode(96+(31&language)),result},mdia:function(data){return{boxes:inspectMp4(data)}},mfhd:function(data){return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),sequenceNumber:data[4]<<24|data[5]<<16|data[6]<<8|data[7]}},minf:function(data){return{boxes:inspectMp4(data)}},mp4a:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={dataReferenceIndex:view.getUint16(6),channelcount:view.getUint16(16),samplesize:view.getUint16(18),samplerate:view.getUint16(24)+view.getUint16(26)/65536};return data.byteLength>28&&(result.streamDescriptor=inspectMp4(data.subarray(28))[0]),result},moof:function(data){return{boxes:inspectMp4(data)}},moov:function(data){return{boxes:inspectMp4(data)}},mvex:function(data){return{boxes:inspectMp4(data)}},mvhd:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength),i=4,result={version:view.getUint8(0),flags:new Uint8Array(data.subarray(1,4))};return 1===result.version?(i+=4,result.creationTime=parseMp4Date(view.getUint32(i)),i+=8,result.modificationTime=parseMp4Date(view.getUint32(i)),i+=4,result.timescale=view.getUint32(i),i+=8,result.duration=view.getUint32(i)):(result.creationTime=parseMp4Date(view.getUint32(i)),i+=4,result.modificationTime=parseMp4Date(view.getUint32(i)),i+=4,result.timescale=view.getUint32(i),i+=4,result.duration=view.getUint32(i)),i+=4,result.rate=view.getUint16(i)+view.getUint16(i+2)/16,i+=4,result.volume=view.getUint8(i)+view.getUint8(i+1)/8,i+=2,i+=2,i+=8,result.matrix=new Uint32Array(data.subarray(i,i+36)),i+=36,i+=24,result.nextTrackId=view.getUint32(i),result},pdin:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength);return{version:view.getUint8(0),flags:new Uint8Array(data.subarray(1,4)),rate:view.getUint32(4),initialDelay:view.getUint32(8)}},sdtp:function(data){var i,result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),samples:[]};for(i=4;i<data.byteLength;i++)result.samples.push({dependsOn:(48&data[i])>>4,isDependedOn:(12&data[i])>>2,hasRedundancy:3&data[i]});return result},sidx:function(data){var i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),references:[],referenceId:view.getUint32(4),timescale:view.getUint32(8),earliestPresentationTime:view.getUint32(12),firstOffset:view.getUint32(16)},referenceCount=view.getUint16(22);for(i=24;referenceCount;i+=12,referenceCount--)result.references.push({referenceType:(128&data[i])>>>7,referencedSize:2147483647&view.getUint32(i),subsegmentDuration:view.getUint32(i+4),startsWithSap:!!(128&data[i+8]),sapType:(112&data[i+8])>>>4,sapDeltaTime:268435455&view.getUint32(i+8)});return result},smhd:function(data){return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),balance:data[4]+data[5]/256}},stbl:function(data){return{boxes:inspectMp4(data)}},stco:function(data){var i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),chunkOffsets:[]},entryCount=view.getUint32(4);for(i=8;entryCount;i+=4,entryCount--)result.chunkOffsets.push(view.getUint32(i));return result},stsc:function(data){var i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),entryCount=view.getUint32(4),result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),sampleToChunks:[]};for(i=8;entryCount;i+=12,entryCount--)result.sampleToChunks.push({firstChunk:view.getUint32(i),samplesPerChunk:view.getUint32(i+4),sampleDescriptionIndex:view.getUint32(i+8)});return result},stsd:function(data){return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),sampleDescriptions:inspectMp4(data.subarray(8))}},stsz:function(data){var i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),sampleSize:view.getUint32(4),entries:[]};for(i=12;i<data.byteLength;i+=4)result.entries.push(view.getUint32(i));return result},stts:function(data){var i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),timeToSamples:[]},entryCount=view.getUint32(4);for(i=8;entryCount;i+=8,entryCount--)result.timeToSamples.push({sampleCount:view.getUint32(i),sampleDelta:view.getUint32(i+4)});return result},styp:function(data){return parse.ftyp(data)},tfdt:function(data){var result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),baseMediaDecodeTime:data[4]<<24|data[5]<<16|data[6]<<8|data[7]};return 1===result.version&&(result.baseMediaDecodeTime*=Math.pow(2,32),result.baseMediaDecodeTime+=data[8]<<24|data[9]<<16|data[10]<<8|data[11]),result},tfhd:function(data){var i,view=new DataView(data.buffer,data.byteOffset,data.byteLength),result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),trackId:view.getUint32(4)},baseDataOffsetPresent=1&result.flags[2],sampleDescriptionIndexPresent=2&result.flags[2],defaultSampleDurationPresent=8&result.flags[2],defaultSampleSizePresent=16&result.flags[2],defaultSampleFlagsPresent=32&result.flags[2],durationIsEmpty=65536&result.flags[0],defaultBaseIsMoof=131072&result.flags[0];return i=8,baseDataOffsetPresent&&(i+=4,result.baseDataOffset=view.getUint32(12),i+=4),sampleDescriptionIndexPresent&&(result.sampleDescriptionIndex=view.getUint32(i),i+=4),defaultSampleDurationPresent&&(result.defaultSampleDuration=view.getUint32(i),i+=4),defaultSampleSizePresent&&(result.defaultSampleSize=view.getUint32(i),i+=4),defaultSampleFlagsPresent&&(result.defaultSampleFlags=view.getUint32(i)),durationIsEmpty&&(result.durationIsEmpty=!0),!baseDataOffsetPresent&&defaultBaseIsMoof&&(result.baseDataOffsetIsMoof=!0),result},tkhd:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength),i=4,result={version:view.getUint8(0),flags:new Uint8Array(data.subarray(1,4))};return 1===result.version?(i+=4,result.creationTime=parseMp4Date(view.getUint32(i)),i+=8,result.modificationTime=parseMp4Date(view.getUint32(i)),i+=4,result.trackId=view.getUint32(i),i+=4,i+=8,result.duration=view.getUint32(i)):(result.creationTime=parseMp4Date(view.getUint32(i)),i+=4,result.modificationTime=parseMp4Date(view.getUint32(i)),i+=4,result.trackId=view.getUint32(i),i+=4,i+=4,result.duration=view.getUint32(i)),i+=4,i+=8,result.layer=view.getUint16(i),i+=2,result.alternateGroup=view.getUint16(i),i+=2,result.volume=view.getUint8(i)+view.getUint8(i+1)/8,i+=2,i+=2,result.matrix=new Uint32Array(data.subarray(i,i+36)),i+=36,result.width=view.getUint16(i)+view.getUint16(i+2)/16,i+=4,result.height=view.getUint16(i)+view.getUint16(i+2)/16,result},traf:function(data){return{boxes:inspectMp4(data)}},trak:function(data){return{boxes:inspectMp4(data)}},trex:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength);return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),trackId:view.getUint32(4),defaultSampleDescriptionIndex:view.getUint32(8),defaultSampleDuration:view.getUint32(12),defaultSampleSize:view.getUint32(16),sampleDependsOn:3&data[20],sampleIsDependedOn:(192&data[21])>>6,sampleHasRedundancy:(48&data[21])>>4,samplePaddingValue:(14&data[21])>>1,sampleIsDifferenceSample:!!(1&data[21]),sampleDegradationPriority:view.getUint16(22)}},trun:function(data){var sample,result={version:data[0],flags:new Uint8Array(data.subarray(1,4)),samples:[]},view=new DataView(data.buffer,data.byteOffset,data.byteLength),dataOffsetPresent=1&result.flags[2],firstSampleFlagsPresent=4&result.flags[2],sampleDurationPresent=1&result.flags[1],sampleSizePresent=2&result.flags[1],sampleFlagsPresent=4&result.flags[1],sampleCompositionTimeOffsetPresent=8&result.flags[1],sampleCount=view.getUint32(4),offset=8;for(dataOffsetPresent&&(result.dataOffset=view.getInt32(offset),offset+=4),firstSampleFlagsPresent&&sampleCount&&(sample={flags:parseSampleFlags(data.subarray(offset,offset+4))},offset+=4,sampleDurationPresent&&(sample.duration=view.getUint32(offset),offset+=4),sampleSizePresent&&(sample.size=view.getUint32(offset),offset+=4),sampleCompositionTimeOffsetPresent&&(sample.compositionTimeOffset=view.getUint32(offset),offset+=4),result.samples.push(sample),sampleCount--);sampleCount--;)sample={},sampleDurationPresent&&(sample.duration=view.getUint32(offset),offset+=4),sampleSizePresent&&(sample.size=view.getUint32(offset),offset+=4),sampleFlagsPresent&&(sample.flags=parseSampleFlags(data.subarray(offset,offset+4)),offset+=4),sampleCompositionTimeOffsetPresent&&(sample.compositionTimeOffset=view.getUint32(offset),offset+=4),result.samples.push(sample);return result},"url ":function(data){return{version:data[0],flags:new Uint8Array(data.subarray(1,4))}},vmhd:function(data){var view=new DataView(data.buffer,data.byteOffset,data.byteLength);return{version:data[0],flags:new Uint8Array(data.subarray(1,4)),graphicsmode:view.getUint16(4),opcolor:new Uint16Array([view.getUint16(6),view.getUint16(8),view.getUint16(10)])}}};inspectMp4=function(data){for(var view,size,type,end,box,i=0,result=[],ab=new ArrayBuffer(data.length),v=new Uint8Array(ab),z=0;z<data.length;++z)v[z]=data[z];for(view=new DataView(ab);i<data.byteLength;)size=view.getUint32(i),type=parseType(data.subarray(i+4,i+8)),end=size>1?i+size:data.byteLength,(box=(parse[type]||function(data){return{data}})(data.subarray(i+8,end))).size=size,box.type=type,result.push(box),i=end;return result},textifyMp4=function(inspectedMp4,depth){var indent;return depth=depth||0,indent=new Array(2*depth+1).join(" "),inspectedMp4.map((function(box,index){return indent+box.type+"\n"+Object.keys(box).filter((function(key){return"type"!==key&&"boxes"!==key})).map((function(key){var prefix=indent+"  "+key+": ",value=box[key];if(value instanceof Uint8Array||value instanceof Uint32Array){var bytes=Array.prototype.slice.call(new Uint8Array(value.buffer,value.byteOffset,value.byteLength)).map((function(byte){return" "+("00"+byte.toString(16)).slice(-2)})).join("").match(/.{1,24}/g);return bytes?1===bytes.length?prefix+"<"+bytes.join("").slice(1)+">":prefix+"<\n"+bytes.map((function(line){return indent+"  "+line})).join("\n")+"\n"+indent+"  >":prefix+"<>"}return prefix+JSON.stringify(value,null,2).split("\n").map((function(line,index){return 0===index?line:indent+"  "+line})).join("\n")})).join("\n")+(box.boxes?"\n"+textifyMp4(box.boxes,depth+1):"")})).join("\n")},module.exports={inspect:inspectMp4,textify:textifyMp4,parseTfdt:parse.tfdt,parseHdlr:parse.hdlr,parseTfhd:parse.tfhd,parseTrun:parse.trun,parseSidx:parse.sidx}},"./node_modules/mux.js/lib/tools/ts-inspector.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var StreamTypes=__webpack_require__("./node_modules/mux.js/lib/m2ts/stream-types.js"),handleRollover=__webpack_require__("./node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js").handleRollover,probe={};probe.ts=__webpack_require__("./node_modules/mux.js/lib/m2ts/probe.js"),probe.aac=__webpack_require__("./node_modules/mux.js/lib/aac/utils.js");var ONE_SECOND_IN_TS=__webpack_require__("./node_modules/mux.js/lib/utils/clock.js").ONE_SECOND_IN_TS,parseAudioPes_=function(bytes,pmt,result){for(var packet,pesType,pusi,parsed,startIndex=0,endIndex=188,endLoop=!1;endIndex<=bytes.byteLength;)if(71!==bytes[startIndex]||71!==bytes[endIndex]&&endIndex!==bytes.byteLength)startIndex++,endIndex++;else{if(packet=bytes.subarray(startIndex,endIndex),"pes"===probe.ts.parseType(packet,pmt.pid))pesType=probe.ts.parsePesType(packet,pmt.table),pusi=probe.ts.parsePayloadUnitStartIndicator(packet),"audio"===pesType&&pusi&&(parsed=probe.ts.parsePesTime(packet))&&(parsed.type="audio",result.audio.push(parsed),endLoop=!0);if(endLoop)break;startIndex+=188,endIndex+=188}for(startIndex=(endIndex=bytes.byteLength)-188,endLoop=!1;startIndex>=0;)if(71!==bytes[startIndex]||71!==bytes[endIndex]&&endIndex!==bytes.byteLength)startIndex--,endIndex--;else{if(packet=bytes.subarray(startIndex,endIndex),"pes"===probe.ts.parseType(packet,pmt.pid))pesType=probe.ts.parsePesType(packet,pmt.table),pusi=probe.ts.parsePayloadUnitStartIndicator(packet),"audio"===pesType&&pusi&&(parsed=probe.ts.parsePesTime(packet))&&(parsed.type="audio",result.audio.push(parsed),endLoop=!0);if(endLoop)break;startIndex-=188,endIndex-=188}},parseVideoPes_=function(bytes,pmt,result){for(var packet,pesType,pusi,parsed,frame,i,pes,startIndex=0,endIndex=188,endLoop=!1,currentFrame={data:[],size:0};endIndex<bytes.byteLength;)if(71!==bytes[startIndex]||71!==bytes[endIndex])startIndex++,endIndex++;else{if(packet=bytes.subarray(startIndex,endIndex),"pes"===probe.ts.parseType(packet,pmt.pid))if(pesType=probe.ts.parsePesType(packet,pmt.table),pusi=probe.ts.parsePayloadUnitStartIndicator(packet),"video"===pesType&&(pusi&&!endLoop&&(parsed=probe.ts.parsePesTime(packet))&&(parsed.type="video",result.video.push(parsed),endLoop=!0),!result.firstKeyFrame)){if(pusi&&0!==currentFrame.size){for(frame=new Uint8Array(currentFrame.size),i=0;currentFrame.data.length;)pes=currentFrame.data.shift(),frame.set(pes,i),i+=pes.byteLength;if(probe.ts.videoPacketContainsKeyFrame(frame)){var firstKeyFrame=probe.ts.parsePesTime(frame);firstKeyFrame?(result.firstKeyFrame=firstKeyFrame,result.firstKeyFrame.type="video"):console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.")}currentFrame.size=0}currentFrame.data.push(packet),currentFrame.size+=packet.byteLength}if(endLoop&&result.firstKeyFrame)break;startIndex+=188,endIndex+=188}for(startIndex=(endIndex=bytes.byteLength)-188,endLoop=!1;startIndex>=0;)if(71!==bytes[startIndex]||71!==bytes[endIndex])startIndex--,endIndex--;else{if(packet=bytes.subarray(startIndex,endIndex),"pes"===probe.ts.parseType(packet,pmt.pid))pesType=probe.ts.parsePesType(packet,pmt.table),pusi=probe.ts.parsePayloadUnitStartIndicator(packet),"video"===pesType&&pusi&&(parsed=probe.ts.parsePesTime(packet))&&(parsed.type="video",result.video.push(parsed),endLoop=!0);if(endLoop)break;startIndex-=188,endIndex-=188}},inspectTs_=function(bytes){var pmt={pid:null,table:null},result={};for(var pid in function(bytes,pmt){for(var packet,startIndex=0,endIndex=188;endIndex<bytes.byteLength;)if(71!==bytes[startIndex]||71!==bytes[endIndex])startIndex++,endIndex++;else{switch(packet=bytes.subarray(startIndex,endIndex),probe.ts.parseType(packet,pmt.pid)){case"pat":pmt.pid||(pmt.pid=probe.ts.parsePat(packet));break;case"pmt":pmt.table||(pmt.table=probe.ts.parsePmt(packet))}if(pmt.pid&&pmt.table)return;startIndex+=188,endIndex+=188}}(bytes,pmt),pmt.table){if(pmt.table.hasOwnProperty(pid))switch(pmt.table[pid]){case StreamTypes.H264_STREAM_TYPE:result.video=[],parseVideoPes_(bytes,pmt,result),0===result.video.length&&delete result.video;break;case StreamTypes.ADTS_STREAM_TYPE:result.audio=[],parseAudioPes_(bytes,pmt,result),0===result.audio.length&&delete result.audio}}return result};module.exports={inspect:function(bytes,baseTimestamp){var result;return result=probe.aac.isLikelyAacData(bytes)?function(bytes){for(var packet,endLoop=!1,audioCount=0,sampleRate=null,timestamp=null,frameSize=0,byteIndex=0;bytes.length-byteIndex>=3;){switch(probe.aac.parseType(bytes,byteIndex)){case"timed-metadata":if(bytes.length-byteIndex<10){endLoop=!0;break}if((frameSize=probe.aac.parseId3TagSize(bytes,byteIndex))>bytes.length){endLoop=!0;break}null===timestamp&&(packet=bytes.subarray(byteIndex,byteIndex+frameSize),timestamp=probe.aac.parseAacTimestamp(packet)),byteIndex+=frameSize;break;case"audio":if(bytes.length-byteIndex<7){endLoop=!0;break}if((frameSize=probe.aac.parseAdtsSize(bytes,byteIndex))>bytes.length){endLoop=!0;break}null===sampleRate&&(packet=bytes.subarray(byteIndex,byteIndex+frameSize),sampleRate=probe.aac.parseSampleRate(packet)),audioCount++,byteIndex+=frameSize;break;default:byteIndex++}if(endLoop)return null}if(null===sampleRate||null===timestamp)return null;var audioTimescale=ONE_SECOND_IN_TS/sampleRate;return{audio:[{type:"audio",dts:timestamp,pts:timestamp},{type:"audio",dts:timestamp+1024*audioCount*audioTimescale,pts:timestamp+1024*audioCount*audioTimescale}]}}(bytes):inspectTs_(bytes),result&&(result.audio||result.video)?(function(segmentInfo,baseTimestamp){if(segmentInfo.audio&&segmentInfo.audio.length){var audioBaseTimestamp=baseTimestamp;void 0===audioBaseTimestamp&&(audioBaseTimestamp=segmentInfo.audio[0].dts),segmentInfo.audio.forEach((function(info){info.dts=handleRollover(info.dts,audioBaseTimestamp),info.pts=handleRollover(info.pts,audioBaseTimestamp),info.dtsTime=info.dts/ONE_SECOND_IN_TS,info.ptsTime=info.pts/ONE_SECOND_IN_TS}))}if(segmentInfo.video&&segmentInfo.video.length){var videoBaseTimestamp=baseTimestamp;if(void 0===videoBaseTimestamp&&(videoBaseTimestamp=segmentInfo.video[0].dts),segmentInfo.video.forEach((function(info){info.dts=handleRollover(info.dts,videoBaseTimestamp),info.pts=handleRollover(info.pts,videoBaseTimestamp),info.dtsTime=info.dts/ONE_SECOND_IN_TS,info.ptsTime=info.pts/ONE_SECOND_IN_TS})),segmentInfo.firstKeyFrame){var frame=segmentInfo.firstKeyFrame;frame.dts=handleRollover(frame.dts,videoBaseTimestamp),frame.pts=handleRollover(frame.pts,videoBaseTimestamp),frame.dtsTime=frame.dts/ONE_SECOND_IN_TS,frame.ptsTime=frame.dts/ONE_SECOND_IN_TS}}}(result,baseTimestamp),result):null},parseAudioPes_}},"./node_modules/mux.js/lib/utils/bin.js":module=>{module.exports={toUnsigned:function(value){return value>>>0},toHexString:function(value){return("00"+value.toString(16)).slice(-2)}}},"./node_modules/mux.js/lib/utils/clock.js":module=>{var secondsToVideoTs,secondsToAudioTs,videoTsToSeconds,audioTsToSeconds,audioTsToVideoTs,videoTsToAudioTs,metadataTsToSeconds;secondsToVideoTs=function(seconds){return 9e4*seconds},secondsToAudioTs=function(seconds,sampleRate){return seconds*sampleRate},videoTsToSeconds=function(timestamp){return timestamp/9e4},audioTsToSeconds=function(timestamp,sampleRate){return timestamp/sampleRate},audioTsToVideoTs=function(timestamp,sampleRate){return secondsToVideoTs(audioTsToSeconds(timestamp,sampleRate))},videoTsToAudioTs=function(timestamp,sampleRate){return secondsToAudioTs(videoTsToSeconds(timestamp),sampleRate)},metadataTsToSeconds=function(timestamp,timelineStartPts,keepOriginalTimestamps){return videoTsToSeconds(keepOriginalTimestamps?timestamp:timestamp-timelineStartPts)},module.exports={ONE_SECOND_IN_TS:9e4,secondsToVideoTs,secondsToAudioTs,videoTsToSeconds,audioTsToSeconds,audioTsToVideoTs,videoTsToAudioTs,metadataTsToSeconds}},"./node_modules/mux.js/lib/utils/stream.js":module=>{"use strict";var Stream=function(){this.init=function(){var listeners={};this.on=function(type,listener){listeners[type]||(listeners[type]=[]),listeners[type]=listeners[type].concat(listener)},this.off=function(type,listener){var index;return!!listeners[type]&&(index=listeners[type].indexOf(listener),listeners[type]=listeners[type].slice(),listeners[type].splice(index,1),index>-1)},this.trigger=function(type){var callbacks,i,length,args;if(callbacks=listeners[type])if(2===arguments.length)for(length=callbacks.length,i=0;i<length;++i)callbacks[i].call(this,arguments[1]);else{for(args=[],i=arguments.length,i=1;i<arguments.length;++i)args.push(arguments[i]);for(length=callbacks.length,i=0;i<length;++i)callbacks[i].apply(this,args)}},this.dispose=function(){listeners={}}}};Stream.prototype.pipe=function(destination){return this.on("data",(function(data){destination.push(data)})),this.on("done",(function(flushSource){destination.flush(flushSource)})),this.on("partialdone",(function(flushSource){destination.partialFlush(flushSource)})),this.on("endedtimeline",(function(flushSource){destination.endTimeline(flushSource)})),this.on("reset",(function(flushSource){destination.reset(flushSource)})),destination},Stream.prototype.push=function(data){this.trigger("data",data)},Stream.prototype.flush=function(flushSource){this.trigger("done",flushSource)},Stream.prototype.partialFlush=function(flushSource){this.trigger("partialdone",flushSource)},Stream.prototype.endTimeline=function(flushSource){this.trigger("endedtimeline",flushSource)},Stream.prototype.reset=function(flushSource){this.trigger("reset",flushSource)},module.exports=Stream},"./node_modules/parse-headers/parse-headers.js":module=>{var trim=function(string){return string.replace(/^\s+|\s+$/g,"")};module.exports=function(headers){if(!headers)return{};for(var arg,result={},headersArr=trim(headers).split("\n"),i=0;i<headersArr.length;i++){var row=headersArr[i],index=row.indexOf(":"),key=trim(row.slice(0,index)).toLowerCase(),value=trim(row.slice(index+1));void 0===result[key]?result[key]=value:(arg=result[key],"[object Array]"===Object.prototype.toString.call(arg)?result[key].push(value):result[key]=[result[key],value])}return result}},"./node_modules/url-toolkit/src/url-toolkit.js":function(module){var URL_REGEX,FIRST_SEGMENT_REGEX,SLASH_DOT_REGEX,SLASH_DOT_DOT_REGEX,URLToolkit;URL_REGEX=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,FIRST_SEGMENT_REGEX=/^([^\/?#]*)(.*)$/,SLASH_DOT_REGEX=/(?:\/|^)\.(?=\/)/g,SLASH_DOT_DOT_REGEX=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,URLToolkit={buildAbsoluteURL:function(baseURL,relativeURL,opts){if(opts=opts||{},baseURL=baseURL.trim(),!(relativeURL=relativeURL.trim())){if(!opts.alwaysNormalize)return baseURL;var basePartsForNormalise=URLToolkit.parseURL(baseURL);if(!basePartsForNormalise)throw new Error("Error trying to parse base URL.");return basePartsForNormalise.path=URLToolkit.normalizePath(basePartsForNormalise.path),URLToolkit.buildURLFromParts(basePartsForNormalise)}var relativeParts=URLToolkit.parseURL(relativeURL);if(!relativeParts)throw new Error("Error trying to parse relative URL.");if(relativeParts.scheme)return opts.alwaysNormalize?(relativeParts.path=URLToolkit.normalizePath(relativeParts.path),URLToolkit.buildURLFromParts(relativeParts)):relativeURL;var baseParts=URLToolkit.parseURL(baseURL);if(!baseParts)throw new Error("Error trying to parse base URL.");if(!baseParts.netLoc&&baseParts.path&&"/"!==baseParts.path[0]){var pathParts=FIRST_SEGMENT_REGEX.exec(baseParts.path);baseParts.netLoc=pathParts[1],baseParts.path=pathParts[2]}baseParts.netLoc&&!baseParts.path&&(baseParts.path="/");var builtParts={scheme:baseParts.scheme,netLoc:relativeParts.netLoc,path:null,params:relativeParts.params,query:relativeParts.query,fragment:relativeParts.fragment};if(!relativeParts.netLoc&&(builtParts.netLoc=baseParts.netLoc,"/"!==relativeParts.path[0]))if(relativeParts.path){var baseURLPath=baseParts.path,newPath=baseURLPath.substring(0,baseURLPath.lastIndexOf("/")+1)+relativeParts.path;builtParts.path=URLToolkit.normalizePath(newPath)}else builtParts.path=baseParts.path,relativeParts.params||(builtParts.params=baseParts.params,relativeParts.query||(builtParts.query=baseParts.query));return null===builtParts.path&&(builtParts.path=opts.alwaysNormalize?URLToolkit.normalizePath(relativeParts.path):relativeParts.path),URLToolkit.buildURLFromParts(builtParts)},parseURL:function(url){var parts=URL_REGEX.exec(url);return parts?{scheme:parts[1]||"",netLoc:parts[2]||"",path:parts[3]||"",params:parts[4]||"",query:parts[5]||"",fragment:parts[6]||""}:null},normalizePath:function(path){for(path=path.split("").reverse().join("").replace(SLASH_DOT_REGEX,"");path.length!==(path=path.replace(SLASH_DOT_DOT_REGEX,"")).length;);return path.split("").reverse().join("")},buildURLFromParts:function(parts){return parts.scheme+parts.netLoc+parts.path+parts.params+parts.query+parts.fragment}},module.exports=URLToolkit},"./node_modules/video.js/dist/video.es.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>video_es});var global_window=__webpack_require__("./node_modules/global/window.js"),window_default=__webpack_require__.n(global_window),global_document=__webpack_require__("./node_modules/global/document.js"),document_default=__webpack_require__.n(global_document),tuple=__webpack_require__("./node_modules/video.js/node_modules/safe-json-parse/tuple.js"),tuple_default=__webpack_require__.n(tuple),keycode=__webpack_require__("./node_modules/keycode/index.js"),keycode_default=__webpack_require__.n(keycode),xhr=__webpack_require__("./node_modules/xhr/index.js"),xhr_default=__webpack_require__.n(xhr),browser_index=__webpack_require__("./node_modules/videojs-vtt.js/lib/browser-index.js"),browser_index_default=__webpack_require__.n(browser_index),url_toolkit=__webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js"),url_toolkit_default=__webpack_require__.n(url_toolkit);function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,subClass.__proto__=superClass}var Stream=function(){function Stream(){this.listeners={}}var _proto=Stream.prototype;return _proto.on=function on(type,listener){this.listeners[type]||(this.listeners[type]=[]),this.listeners[type].push(listener)},_proto.off=function off(type,listener){if(!this.listeners[type])return!1;var index=this.listeners[type].indexOf(listener);return this.listeners[type].splice(index,1),index>-1},_proto.trigger=function trigger(type){var i,length,args,callbacks=this.listeners[type];if(callbacks)if(2===arguments.length)for(length=callbacks.length,i=0;i<length;++i)callbacks[i].call(this,arguments[1]);else for(args=Array.prototype.slice.call(arguments,1),length=callbacks.length,i=0;i<length;++i)callbacks[i].apply(this,args)},_proto.dispose=function dispose(){this.listeners={}},_proto.pipe=function pipe(destination){this.on("data",(function(data){destination.push(data)}))},Stream}(),LineStream=function(_Stream){function LineStream(){var _this;return(_this=_Stream.call(this)||this).buffer="",_this}return _inheritsLoose(LineStream,_Stream),LineStream.prototype.push=function push(data){var nextNewline;for(this.buffer+=data,nextNewline=this.buffer.indexOf("\n");nextNewline>-1;nextNewline=this.buffer.indexOf("\n"))this.trigger("data",this.buffer.substring(0,nextNewline)),this.buffer=this.buffer.substring(nextNewline+1)},LineStream}(Stream),parseAttributes=function parseAttributes(attributes){for(var attr,attrs=attributes.split(function attributeSeparator(){return new RegExp('(?:^|,)((?:[^=]*)=(?:"[^"]*"|[^,]*))')}()),result={},i=attrs.length;i--;)""!==attrs[i]&&((attr=/([^=]*)=(.*)/.exec(attrs[i]).slice(1))[0]=attr[0].replace(/^\s+|\s+$/g,""),attr[1]=attr[1].replace(/^\s+|\s+$/g,""),attr[1]=attr[1].replace(/^['"](.*)['"]$/g,"$1"),result[attr[0]]=attr[1]);return result},ParseStream=function(_Stream){function ParseStream(){var _this;return(_this=_Stream.call(this)||this).customParsers=[],_this.tagMappers=[],_this}_inheritsLoose(ParseStream,_Stream);var _proto=ParseStream.prototype;return _proto.push=function push(line){var match,event,_this2=this;0!==(line=line.trim()).length&&("#"===line[0]?this.tagMappers.reduce((function(acc,mapper){var mappedLine=mapper(line);return mappedLine===line?acc:acc.concat([mappedLine])}),[line]).forEach((function(newLine){for(var i=0;i<_this2.customParsers.length;i++)if(_this2.customParsers[i].call(_this2,newLine))return;if(0===newLine.indexOf("#EXT"))if(newLine=newLine.replace("\r",""),match=/^#EXTM3U/.exec(newLine))_this2.trigger("data",{type:"tag",tagType:"m3u"});else{if(match=/^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(newLine))return event={type:"tag",tagType:"inf"},match[1]&&(event.duration=parseFloat(match[1])),match[2]&&(event.title=match[2]),void _this2.trigger("data",event);if(match=/^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine))return event={type:"tag",tagType:"targetduration"},match[1]&&(event.duration=parseInt(match[1],10)),void _this2.trigger("data",event);if(match=/^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(newLine))return event={type:"tag",tagType:"totalduration"},match[1]&&(event.duration=parseInt(match[1],10)),void _this2.trigger("data",event);if(match=/^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine))return event={type:"tag",tagType:"version"},match[1]&&(event.version=parseInt(match[1],10)),void _this2.trigger("data",event);if(match=/^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(newLine))return event={type:"tag",tagType:"media-sequence"},match[1]&&(event.number=parseInt(match[1],10)),void _this2.trigger("data",event);if(match=/^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(newLine))return event={type:"tag",tagType:"discontinuity-sequence"},match[1]&&(event.number=parseInt(match[1],10)),void _this2.trigger("data",event);if(match=/^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine))return event={type:"tag",tagType:"playlist-type"},match[1]&&(event.playlistType=match[1]),void _this2.trigger("data",event);if(match=/^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(newLine))return event={type:"tag",tagType:"byterange"},match[1]&&(event.length=parseInt(match[1],10)),match[2]&&(event.offset=parseInt(match[2],10)),void _this2.trigger("data",event);if(match=/^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine))return event={type:"tag",tagType:"allow-cache"},match[1]&&(event.allowed=!/NO/.test(match[1])),void _this2.trigger("data",event);if(match=/^#EXT-X-MAP:?(.*)$/.exec(newLine)){if(event={type:"tag",tagType:"map"},match[1]){var attributes=parseAttributes(match[1]);if(attributes.URI&&(event.uri=attributes.URI),attributes.BYTERANGE){var _attributes$BYTERANGE=attributes.BYTERANGE.split("@"),length=_attributes$BYTERANGE[0],offset=_attributes$BYTERANGE[1];event.byterange={},length&&(event.byterange.length=parseInt(length,10)),offset&&(event.byterange.offset=parseInt(offset,10))}}_this2.trigger("data",event)}else if(match=/^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine)){if(event={type:"tag",tagType:"stream-inf"},match[1]){if(event.attributes=parseAttributes(match[1]),event.attributes.RESOLUTION){var split=event.attributes.RESOLUTION.split("x"),resolution={};split[0]&&(resolution.width=parseInt(split[0],10)),split[1]&&(resolution.height=parseInt(split[1],10)),event.attributes.RESOLUTION=resolution}event.attributes.BANDWIDTH&&(event.attributes.BANDWIDTH=parseInt(event.attributes.BANDWIDTH,10)),event.attributes["PROGRAM-ID"]&&(event.attributes["PROGRAM-ID"]=parseInt(event.attributes["PROGRAM-ID"],10))}_this2.trigger("data",event)}else{if(match=/^#EXT-X-MEDIA:?(.*)$/.exec(newLine))return event={type:"tag",tagType:"media"},match[1]&&(event.attributes=parseAttributes(match[1])),void _this2.trigger("data",event);if(match=/^#EXT-X-ENDLIST/.exec(newLine))_this2.trigger("data",{type:"tag",tagType:"endlist"});else if(match=/^#EXT-X-DISCONTINUITY/.exec(newLine))_this2.trigger("data",{type:"tag",tagType:"discontinuity"});else{if(match=/^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine))return event={type:"tag",tagType:"program-date-time"},match[1]&&(event.dateTimeString=match[1],event.dateTimeObject=new Date(match[1])),void _this2.trigger("data",event);if(match=/^#EXT-X-KEY:?(.*)$/.exec(newLine))return event={type:"tag",tagType:"key"},match[1]&&(event.attributes=parseAttributes(match[1]),event.attributes.IV&&("0x"===event.attributes.IV.substring(0,2).toLowerCase()&&(event.attributes.IV=event.attributes.IV.substring(2)),event.attributes.IV=event.attributes.IV.match(/.{8}/g),event.attributes.IV[0]=parseInt(event.attributes.IV[0],16),event.attributes.IV[1]=parseInt(event.attributes.IV[1],16),event.attributes.IV[2]=parseInt(event.attributes.IV[2],16),event.attributes.IV[3]=parseInt(event.attributes.IV[3],16),event.attributes.IV=new Uint32Array(event.attributes.IV))),void _this2.trigger("data",event);if(match=/^#EXT-X-START:?(.*)$/.exec(newLine))return event={type:"tag",tagType:"start"},match[1]&&(event.attributes=parseAttributes(match[1]),event.attributes["TIME-OFFSET"]=parseFloat(event.attributes["TIME-OFFSET"]),event.attributes.PRECISE=/YES/.test(event.attributes.PRECISE)),void _this2.trigger("data",event);if(match=/^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine))return event={type:"tag",tagType:"cue-out-cont"},match[1]?event.data=match[1]:event.data="",void _this2.trigger("data",event);if(match=/^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine))return event={type:"tag",tagType:"cue-out"},match[1]?event.data=match[1]:event.data="",void _this2.trigger("data",event);if(match=/^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine))return event={type:"tag",tagType:"cue-in"},match[1]?event.data=match[1]:event.data="",void _this2.trigger("data",event);_this2.trigger("data",{type:"tag",data:newLine.slice(4)})}}}else _this2.trigger("data",{type:"comment",text:newLine.slice(1)})})):this.trigger("data",{type:"uri",uri:line}))},_proto.addParser=function addParser(_ref){var _this3=this,expression=_ref.expression,customType=_ref.customType,dataParser=_ref.dataParser,segment=_ref.segment;"function"!=typeof dataParser&&(dataParser=function dataParser(line){return line}),this.customParsers.push((function(line){if(expression.exec(line))return _this3.trigger("data",{type:"custom",data:dataParser(line),customType,segment}),!0}))},_proto.addTagMapper=function addTagMapper(_ref2){var expression=_ref2.expression,map=_ref2.map;this.tagMappers.push((function mapFn(line){return expression.test(line)?map(line):line}))},ParseStream}(Stream);function decodeB64ToUint8Array(b64Text){for(var decodedString=window_default().atob(b64Text||""),array=new Uint8Array(decodedString.length),i=0;i<decodedString.length;i++)array[i]=decodedString.charCodeAt(i);return array}var Parser=function(_Stream){function Parser(){var _this;(_this=_Stream.call(this)||this).lineStream=new LineStream,_this.parseStream=new ParseStream,_this.lineStream.pipe(_this.parseStream);var currentMap,_key,self=function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(_this),uris=[],currentUri={},noop=function noop(){},defaultMediaGroups={AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},currentTimeline=0;return _this.manifest={allowCache:!0,discontinuityStarts:[],segments:[]},_this.parseStream.on("data",(function(entry){var mediaGroup,rendition;({tag:function tag(){({"allow-cache":function allowCache(){this.manifest.allowCache=entry.allowed,"allowed"in entry||(this.trigger("info",{message:"defaulting allowCache to YES"}),this.manifest.allowCache=!0)},byterange:function byterange(){var byterange={};"length"in entry&&(currentUri.byterange=byterange,byterange.length=entry.length,"offset"in entry||(this.trigger("info",{message:"defaulting offset to zero"}),entry.offset=0)),"offset"in entry&&(currentUri.byterange=byterange,byterange.offset=entry.offset)},endlist:function endlist(){this.manifest.endList=!0},inf:function inf(){"mediaSequence"in this.manifest||(this.manifest.mediaSequence=0,this.trigger("info",{message:"defaulting media sequence to zero"})),"discontinuitySequence"in this.manifest||(this.manifest.discontinuitySequence=0,this.trigger("info",{message:"defaulting discontinuity sequence to zero"})),entry.duration>0&&(currentUri.duration=entry.duration),0===entry.duration&&(currentUri.duration=.01,this.trigger("info",{message:"updating zero segment duration to a small value"})),this.manifest.segments=uris},key:function key(){if(entry.attributes)if("NONE"!==entry.attributes.METHOD)if(entry.attributes.URI){if("urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"===entry.attributes.KEYFORMAT){return-1===["SAMPLE-AES","SAMPLE-AES-CTR","SAMPLE-AES-CENC"].indexOf(entry.attributes.METHOD)?void this.trigger("warn",{message:"invalid key method provided for Widevine"}):("SAMPLE-AES-CENC"===entry.attributes.METHOD&&this.trigger("warn",{message:"SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"}),"data:text/plain;base64,"!==entry.attributes.URI.substring(0,23)?void this.trigger("warn",{message:"invalid key URI provided for Widevine"}):entry.attributes.KEYID&&"0x"===entry.attributes.KEYID.substring(0,2)?void(this.manifest.contentProtection={"com.widevine.alpha":{attributes:{schemeIdUri:entry.attributes.KEYFORMAT,keyId:entry.attributes.KEYID.substring(2)},pssh:decodeB64ToUint8Array(entry.attributes.URI.split(",")[1])}}):void this.trigger("warn",{message:"invalid key ID provided for Widevine"}))}entry.attributes.METHOD||this.trigger("warn",{message:"defaulting key method to AES-128"}),_key={method:entry.attributes.METHOD||"AES-128",uri:entry.attributes.URI},void 0!==entry.attributes.IV&&(_key.iv=entry.attributes.IV)}else this.trigger("warn",{message:"ignoring key declaration without URI"});else _key=null;else this.trigger("warn",{message:"ignoring key declaration without attribute list"})},"media-sequence":function mediaSequence(){isFinite(entry.number)?this.manifest.mediaSequence=entry.number:this.trigger("warn",{message:"ignoring invalid media sequence: "+entry.number})},"discontinuity-sequence":function discontinuitySequence(){isFinite(entry.number)?(this.manifest.discontinuitySequence=entry.number,currentTimeline=entry.number):this.trigger("warn",{message:"ignoring invalid discontinuity sequence: "+entry.number})},"playlist-type":function playlistType(){/VOD|EVENT/.test(entry.playlistType)?this.manifest.playlistType=entry.playlistType:this.trigger("warn",{message:"ignoring unknown playlist type: "+entry.playlist})},map:function map(){currentMap={},entry.uri&&(currentMap.uri=entry.uri),entry.byterange&&(currentMap.byterange=entry.byterange)},"stream-inf":function streamInf(){this.manifest.playlists=uris,this.manifest.mediaGroups=this.manifest.mediaGroups||defaultMediaGroups,entry.attributes?(currentUri.attributes||(currentUri.attributes={}),_extends(currentUri.attributes,entry.attributes)):this.trigger("warn",{message:"ignoring empty stream-inf attributes"})},media:function media(){if(this.manifest.mediaGroups=this.manifest.mediaGroups||defaultMediaGroups,entry.attributes&&entry.attributes.TYPE&&entry.attributes["GROUP-ID"]&&entry.attributes.NAME){var mediaGroupType=this.manifest.mediaGroups[entry.attributes.TYPE];mediaGroupType[entry.attributes["GROUP-ID"]]=mediaGroupType[entry.attributes["GROUP-ID"]]||{},mediaGroup=mediaGroupType[entry.attributes["GROUP-ID"]],(rendition={default:/yes/i.test(entry.attributes.DEFAULT)}).default?rendition.autoselect=!0:rendition.autoselect=/yes/i.test(entry.attributes.AUTOSELECT),entry.attributes.LANGUAGE&&(rendition.language=entry.attributes.LANGUAGE),entry.attributes.URI&&(rendition.uri=entry.attributes.URI),entry.attributes["INSTREAM-ID"]&&(rendition.instreamId=entry.attributes["INSTREAM-ID"]),entry.attributes.CHARACTERISTICS&&(rendition.characteristics=entry.attributes.CHARACTERISTICS),entry.attributes.FORCED&&(rendition.forced=/yes/i.test(entry.attributes.FORCED)),mediaGroup[entry.attributes.NAME]=rendition}else this.trigger("warn",{message:"ignoring incomplete or missing media group"})},discontinuity:function discontinuity(){currentTimeline+=1,currentUri.discontinuity=!0,this.manifest.discontinuityStarts.push(uris.length)},"program-date-time":function programDateTime(){void 0===this.manifest.dateTimeString&&(this.manifest.dateTimeString=entry.dateTimeString,this.manifest.dateTimeObject=entry.dateTimeObject),currentUri.dateTimeString=entry.dateTimeString,currentUri.dateTimeObject=entry.dateTimeObject},targetduration:function targetduration(){!isFinite(entry.duration)||entry.duration<0?this.trigger("warn",{message:"ignoring invalid target duration: "+entry.duration}):this.manifest.targetDuration=entry.duration},totalduration:function totalduration(){!isFinite(entry.duration)||entry.duration<0?this.trigger("warn",{message:"ignoring invalid total duration: "+entry.duration}):this.manifest.totalDuration=entry.duration},start:function start(){entry.attributes&&!isNaN(entry.attributes["TIME-OFFSET"])?this.manifest.start={timeOffset:entry.attributes["TIME-OFFSET"],precise:entry.attributes.PRECISE}:this.trigger("warn",{message:"ignoring start declaration without appropriate attribute list"})},"cue-out":function cueOut(){currentUri.cueOut=entry.data},"cue-out-cont":function cueOutCont(){currentUri.cueOutCont=entry.data},"cue-in":function cueIn(){currentUri.cueIn=entry.data}}[entry.tagType]||noop).call(self)},uri:function uri(){currentUri.uri=entry.uri,uris.push(currentUri),this.manifest.targetDuration&&!("duration"in currentUri)&&(this.trigger("warn",{message:"defaulting segment duration to the target duration"}),currentUri.duration=this.manifest.targetDuration),_key&&(currentUri.key=_key),currentUri.timeline=currentTimeline,currentMap&&(currentUri.map=currentMap),currentUri={}},comment:function comment(){},custom:function custom(){entry.segment?(currentUri.custom=currentUri.custom||{},currentUri.custom[entry.customType]=entry.data):(this.manifest.custom=this.manifest.custom||{},this.manifest.custom[entry.customType]=entry.data)}})[entry.type].call(self)})),_this}_inheritsLoose(Parser,_Stream);var _proto=Parser.prototype;return _proto.push=function push(chunk){this.lineStream.push(chunk)},_proto.end=function end(){this.lineStream.push("\n")},_proto.addParser=function addParser(options){this.parseStream.addParser(options)},_proto.addTagMapper=function addTagMapper(options){this.parseStream.addTagMapper(options)},Parser}(Stream),isObject=function isObject(obj){return!!obj&&"object"==typeof obj},merge=function merge(){for(var _len=arguments.length,objects=new Array(_len),_key=0;_key<_len;_key++)objects[_key]=arguments[_key];return objects.reduce((function(result,source){return Object.keys(source).forEach((function(key){Array.isArray(result[key])&&Array.isArray(source[key])?result[key]=result[key].concat(source[key]):isObject(result[key])&&isObject(source[key])?result[key]=merge(result[key],source[key]):result[key]=source[key]})),result}),{})},flatten=function flatten(lists){return lists.reduce((function(x,y){return x.concat(y)}),[])},from=function from(list){if(!list.length)return[];for(var result=[],i=0;i<list.length;i++)result.push(list[i]);return result},errors_INVALID_NUMBER_OF_PERIOD="INVALID_NUMBER_OF_PERIOD",errors_DASH_EMPTY_MANIFEST="DASH_EMPTY_MANIFEST",errors_DASH_INVALID_XML="DASH_INVALID_XML",errors_NO_BASE_URL="NO_BASE_URL",errors_SEGMENT_TIME_UNSPECIFIED="SEGMENT_TIME_UNSPECIFIED",errors_UNSUPPORTED_UTC_TIMING_SCHEME="UNSUPPORTED_UTC_TIMING_SCHEME";"undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self&&self;var urlToolkit=function createCommonjsModule(fn,module){return fn(module={exports:{}},module.exports),module.exports}((function(module,exports){var URL_REGEX,FIRST_SEGMENT_REGEX,SLASH_DOT_REGEX,SLASH_DOT_DOT_REGEX,URLToolkit;URL_REGEX=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,FIRST_SEGMENT_REGEX=/^([^\/?#]*)(.*)$/,SLASH_DOT_REGEX=/(?:\/|^)\.(?=\/)/g,SLASH_DOT_DOT_REGEX=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,URLToolkit={buildAbsoluteURL:function(baseURL,relativeURL,opts){if(opts=opts||{},baseURL=baseURL.trim(),!(relativeURL=relativeURL.trim())){if(!opts.alwaysNormalize)return baseURL;var basePartsForNormalise=URLToolkit.parseURL(baseURL);if(!basePartsForNormalise)throw new Error("Error trying to parse base URL.");return basePartsForNormalise.path=URLToolkit.normalizePath(basePartsForNormalise.path),URLToolkit.buildURLFromParts(basePartsForNormalise)}var relativeParts=URLToolkit.parseURL(relativeURL);if(!relativeParts)throw new Error("Error trying to parse relative URL.");if(relativeParts.scheme)return opts.alwaysNormalize?(relativeParts.path=URLToolkit.normalizePath(relativeParts.path),URLToolkit.buildURLFromParts(relativeParts)):relativeURL;var baseParts=URLToolkit.parseURL(baseURL);if(!baseParts)throw new Error("Error trying to parse base URL.");if(!baseParts.netLoc&&baseParts.path&&"/"!==baseParts.path[0]){var pathParts=FIRST_SEGMENT_REGEX.exec(baseParts.path);baseParts.netLoc=pathParts[1],baseParts.path=pathParts[2]}baseParts.netLoc&&!baseParts.path&&(baseParts.path="/");var builtParts={scheme:baseParts.scheme,netLoc:relativeParts.netLoc,path:null,params:relativeParts.params,query:relativeParts.query,fragment:relativeParts.fragment};if(!relativeParts.netLoc&&(builtParts.netLoc=baseParts.netLoc,"/"!==relativeParts.path[0]))if(relativeParts.path){var baseURLPath=baseParts.path,newPath=baseURLPath.substring(0,baseURLPath.lastIndexOf("/")+1)+relativeParts.path;builtParts.path=URLToolkit.normalizePath(newPath)}else builtParts.path=baseParts.path,relativeParts.params||(builtParts.params=baseParts.params,relativeParts.query||(builtParts.query=baseParts.query));return null===builtParts.path&&(builtParts.path=opts.alwaysNormalize?URLToolkit.normalizePath(relativeParts.path):relativeParts.path),URLToolkit.buildURLFromParts(builtParts)},parseURL:function(url){var parts=URL_REGEX.exec(url);return parts?{scheme:parts[1]||"",netLoc:parts[2]||"",path:parts[3]||"",params:parts[4]||"",query:parts[5]||"",fragment:parts[6]||""}:null},normalizePath:function(path){for(path=path.split("").reverse().join("").replace(SLASH_DOT_REGEX,"");path.length!==(path=path.replace(SLASH_DOT_DOT_REGEX,"")).length;);return path.split("").reverse().join("")},buildURLFromParts:function(parts){return parts.scheme+parts.netLoc+parts.path+parts.params+parts.query+parts.fragment}},module.exports=URLToolkit})),resolveUrl=function resolveUrl(baseUrl,relativeUrl){return/^[a-z]+:/i.test(relativeUrl)?relativeUrl:(/\/\//i.test(baseUrl)||(baseUrl=urlToolkit.buildAbsoluteURL(window_default().location.href,baseUrl)),urlToolkit.buildAbsoluteURL(baseUrl,relativeUrl))},urlTypeToSegment=function urlTypeToSegment(_ref){var _ref$baseUrl=_ref.baseUrl,baseUrl=void 0===_ref$baseUrl?"":_ref$baseUrl,_ref$source=_ref.source,source=void 0===_ref$source?"":_ref$source,_ref$range=_ref.range,range=void 0===_ref$range?"":_ref$range,_ref$indexRange=_ref.indexRange,indexRange=void 0===_ref$indexRange?"":_ref$indexRange,segment={uri:source,resolvedUri:resolveUrl(baseUrl||"",source)};if(range||indexRange){var ranges=(range||indexRange).split("-"),startRange=parseInt(ranges[0],10),endRange=parseInt(ranges[1],10);segment.byterange={length:endRange-startRange+1,offset:startRange}}return segment},byteRangeToString=function byteRangeToString(byterange){var endRange=byterange.offset+byterange.length-1;return byterange.offset+"-"+endRange},segmentRange={static:function _static(attributes){var duration=attributes.duration,_attributes$timescale=attributes.timescale,timescale=void 0===_attributes$timescale?1:_attributes$timescale,sourceDuration=attributes.sourceDuration;return{start:0,end:Math.ceil(sourceDuration/(duration/timescale))}},dynamic:function dynamic(attributes){var NOW=attributes.NOW,clientOffset=attributes.clientOffset,availabilityStartTime=attributes.availabilityStartTime,_attributes$timescale2=attributes.timescale,timescale=void 0===_attributes$timescale2?1:_attributes$timescale2,duration=attributes.duration,_attributes$start=attributes.start,start=void 0===_attributes$start?0:_attributes$start,_attributes$minimumUp=attributes.minimumUpdatePeriod,minimumUpdatePeriod=void 0===_attributes$minimumUp?0:_attributes$minimumUp,_attributes$timeShift=attributes.timeShiftBufferDepth,timeShiftBufferDepth=void 0===_attributes$timeShift?1/0:_attributes$timeShift,now=(NOW+clientOffset)/1e3,periodStartWC=availabilityStartTime+start,periodDuration=now+minimumUpdatePeriod-periodStartWC,segmentCount=Math.ceil(periodDuration*timescale/duration),availableStart=Math.floor((now-periodStartWC-timeShiftBufferDepth)*timescale/duration),availableEnd=Math.floor((now-periodStartWC)*timescale/duration);return{start:Math.max(0,availableStart),end:Math.min(segmentCount,availableEnd)}}},parseByDuration=function parseByDuration(attributes){var _attributes$type=attributes.type,type=void 0===_attributes$type?"static":_attributes$type,duration=attributes.duration,_attributes$timescale4=attributes.timescale,timescale=void 0===_attributes$timescale4?1:_attributes$timescale4,sourceDuration=attributes.sourceDuration,_segmentRange$type=segmentRange[type](attributes),segments=function range(start,end){for(var result=[],i=start;i<end;i++)result.push(i);return result}(_segmentRange$type.start,_segmentRange$type.end).map(function toSegments(attributes){return function(number,index){var duration=attributes.duration,_attributes$timescale3=attributes.timescale,timescale=void 0===_attributes$timescale3?1:_attributes$timescale3,periodIndex=attributes.periodIndex,_attributes$startNumb=attributes.startNumber;return{number:(void 0===_attributes$startNumb?1:_attributes$startNumb)+number,duration:duration/timescale,timeline:periodIndex,time:index*duration}}}(attributes));if("static"===type){var index=segments.length-1;segments[index].duration=sourceDuration-duration/timescale*index}return segments},segmentsFromBase=function segmentsFromBase(attributes){var baseUrl=attributes.baseUrl,_attributes$initializ=attributes.initialization,initialization=void 0===_attributes$initializ?{}:_attributes$initializ,sourceDuration=attributes.sourceDuration,_attributes$timescale=attributes.timescale,timescale=void 0===_attributes$timescale?1:_attributes$timescale,_attributes$indexRang=attributes.indexRange,indexRange=void 0===_attributes$indexRang?"":_attributes$indexRang,duration=attributes.duration;if(!baseUrl)throw new Error(errors_NO_BASE_URL);var initSegment=urlTypeToSegment({baseUrl,source:initialization.sourceURL,range:initialization.range}),segment=urlTypeToSegment({baseUrl,source:baseUrl,indexRange});if(segment.map=initSegment,duration){var segmentTimeInfo=parseByDuration(attributes);segmentTimeInfo.length&&(segment.duration=segmentTimeInfo[0].duration,segment.timeline=segmentTimeInfo[0].timeline)}else sourceDuration&&(segment.duration=sourceDuration/timescale,segment.timeline=0);return segment.number=0,[segment]},addSegmentsToPlaylist=function addSegmentsToPlaylist(playlist,sidx,baseUrl){for(var initSegment=playlist.sidx.map?playlist.sidx.map:null,sourceDuration=playlist.sidx.duration,timeline=playlist.timeline||0,sidxByteRange=playlist.sidx.byterange,sidxEnd=sidxByteRange.offset+sidxByteRange.length,timescale=sidx.timescale,mediaReferences=sidx.references.filter((function(r){return 1!==r.referenceType})),segments=[],startIndex=sidxEnd+sidx.firstOffset,i=0;i<mediaReferences.length;i++){var reference=sidx.references[i],size=reference.referencedSize,duration=reference.subsegmentDuration,segment=segmentsFromBase({baseUrl,timescale,timeline,periodIndex:timeline,duration,sourceDuration,indexRange:startIndex+"-"+(startIndex+size-1)})[0];initSegment&&(segment.map=initSegment),segments.push(segment),startIndex+=size}return playlist.segments=segments,playlist},mergeDiscontiguousPlaylists=function mergeDiscontiguousPlaylists(playlists){return function values(o){return Object.keys(o).map((function(k){return o[k]}))}(playlists.reduce((function(acc,playlist){var _acc$name$segments,name=playlist.attributes.id+(playlist.attributes.lang||"");acc[name]?(playlist.segments[0]&&(playlist.segments[0].discontinuity=!0),(_acc$name$segments=acc[name].segments).push.apply(_acc$name$segments,playlist.segments),playlist.attributes.contentProtection&&(acc[name].attributes.contentProtection=playlist.attributes.contentProtection)):acc[name]=playlist;return acc}),{})).map((function(playlist){return playlist.discontinuityStarts=function findIndexes(l,key){return l.reduce((function(a,e,i){return e[key]&&a.push(i),a}),[])}(playlist.segments,"discontinuity"),playlist}))},addSegmentInfoFromSidx=function addSegmentInfoFromSidx(playlists,sidxMapping){if(void 0===sidxMapping&&(sidxMapping={}),!Object.keys(sidxMapping).length)return playlists;for(var i in playlists){var playlist=playlists[i];if(playlist.sidx){var sidxKey=playlist.sidx.uri+"-"+byteRangeToString(playlist.sidx.byterange),sidxMatch=sidxMapping[sidxKey]&&sidxMapping[sidxKey].sidx;playlist.sidx&&sidxMatch&&addSegmentsToPlaylist(playlist,sidxMatch,playlist.sidx.resolvedUri)}}return playlists},formatAudioPlaylist=function formatAudioPlaylist(_ref){var _attributes,attributes=_ref.attributes,segments=_ref.segments,sidx=_ref.sidx,playlist={attributes:(_attributes={NAME:attributes.id,BANDWIDTH:attributes.bandwidth,CODECS:attributes.codecs},_attributes["PROGRAM-ID"]=1,_attributes),uri:"",endList:"static"===(attributes.type||"static"),timeline:attributes.periodIndex,resolvedUri:"",targetDuration:attributes.duration,segments,mediaSequence:segments.length?segments[0].number:1};return attributes.contentProtection&&(playlist.contentProtection=attributes.contentProtection),sidx&&(playlist.sidx=sidx),playlist},formatVttPlaylist=function formatVttPlaylist(_ref2){var _attributes2,attributes=_ref2.attributes,segments=_ref2.segments;return void 0===segments&&(segments=[{uri:attributes.baseUrl,timeline:attributes.periodIndex,resolvedUri:attributes.baseUrl||"",duration:attributes.sourceDuration,number:0}],attributes.duration=attributes.sourceDuration),{attributes:(_attributes2={NAME:attributes.id,BANDWIDTH:attributes.bandwidth},_attributes2["PROGRAM-ID"]=1,_attributes2),uri:"",endList:"static"===(attributes.type||"static"),timeline:attributes.periodIndex,resolvedUri:attributes.baseUrl||"",targetDuration:attributes.duration,segments,mediaSequence:segments.length?segments[0].number:1}},formatVideoPlaylist=function formatVideoPlaylist(_ref3){var _attributes3,attributes=_ref3.attributes,segments=_ref3.segments,sidx=_ref3.sidx,playlist={attributes:(_attributes3={NAME:attributes.id,AUDIO:"audio",SUBTITLES:"subs",RESOLUTION:{width:attributes.width,height:attributes.height},CODECS:attributes.codecs,BANDWIDTH:attributes.bandwidth},_attributes3["PROGRAM-ID"]=1,_attributes3),uri:"",endList:"static"===(attributes.type||"static"),timeline:attributes.periodIndex,resolvedUri:"",targetDuration:attributes.duration,segments,mediaSequence:segments.length?segments[0].number:1};return attributes.contentProtection&&(playlist.contentProtection=attributes.contentProtection),sidx&&(playlist.sidx=sidx),playlist},toM3u8=function toM3u8(dashPlaylists,sidxMapping){var _mediaGroups;if(void 0===sidxMapping&&(sidxMapping={}),!dashPlaylists.length)return{};var _dashPlaylists$0$attr=dashPlaylists[0].attributes,duration=_dashPlaylists$0$attr.sourceDuration,_dashPlaylists$0$attr2=_dashPlaylists$0$attr.minimumUpdatePeriod,minimumUpdatePeriod=void 0===_dashPlaylists$0$attr2?0:_dashPlaylists$0$attr2,videoPlaylists=mergeDiscontiguousPlaylists(dashPlaylists.filter((function videoOnly(_ref4){var attributes=_ref4.attributes;return"video/mp4"===attributes.mimeType||"video"===attributes.contentType}))).map(formatVideoPlaylist),audioPlaylists=mergeDiscontiguousPlaylists(dashPlaylists.filter((function audioOnly(_ref5){var attributes=_ref5.attributes;return"audio/mp4"===attributes.mimeType||"audio"===attributes.contentType}))),vttPlaylists=dashPlaylists.filter((function vttOnly(_ref6){var attributes=_ref6.attributes;return"text/vtt"===attributes.mimeType||"text"===attributes.contentType})),master={allowCache:!0,discontinuityStarts:[],segments:[],endList:!0,mediaGroups:(_mediaGroups={AUDIO:{},VIDEO:{}},_mediaGroups["CLOSED-CAPTIONS"]={},_mediaGroups.SUBTITLES={},_mediaGroups),uri:"",duration,playlists:addSegmentInfoFromSidx(videoPlaylists,sidxMapping),minimumUpdatePeriod:1e3*minimumUpdatePeriod};return audioPlaylists.length&&(master.mediaGroups.AUDIO.audio=function organizeAudioPlaylists(playlists,sidxMapping){var mainPlaylist;void 0===sidxMapping&&(sidxMapping={});var formattedPlaylists=playlists.reduce((function(a,playlist){var role=playlist.attributes.role&&playlist.attributes.role.value||"",language=playlist.attributes.lang||"",label="main";if(language){var roleLabel=role?" ("+role+")":"";label=""+playlist.attributes.lang+roleLabel}return a[label]&&a[label].playlists[0].attributes.BANDWIDTH>playlist.attributes.bandwidth||(a[label]={language,autoselect:!0,default:"main"===role,playlists:addSegmentInfoFromSidx([formatAudioPlaylist(playlist)],sidxMapping),uri:""},void 0===mainPlaylist&&"main"===role&&((mainPlaylist=playlist).default=!0)),a}),{});return mainPlaylist||(formattedPlaylists[Object.keys(formattedPlaylists)[0]].default=!0),formattedPlaylists}(audioPlaylists,sidxMapping)),vttPlaylists.length&&(master.mediaGroups.SUBTITLES.subs=function organizeVttPlaylists(playlists,sidxMapping){return void 0===sidxMapping&&(sidxMapping={}),playlists.reduce((function(a,playlist){var label=playlist.attributes.lang||"text";return a[label]||(a[label]={language:label,default:!1,autoselect:!1,playlists:addSegmentInfoFromSidx([formatVttPlaylist(playlist)],sidxMapping),uri:""}),a}),{})}(vttPlaylists,sidxMapping)),master},getLiveRValue=function getLiveRValue(attributes,time,duration){var NOW=attributes.NOW,clientOffset=attributes.clientOffset,availabilityStartTime=attributes.availabilityStartTime,_attributes$timescale=attributes.timescale,timescale=void 0===_attributes$timescale?1:_attributes$timescale,_attributes$start=attributes.start,start=void 0===_attributes$start?0:_attributes$start,_attributes$minimumUp=attributes.minimumUpdatePeriod,periodDuration=(NOW+clientOffset)/1e3+(void 0===_attributes$minimumUp?0:_attributes$minimumUp)-(availabilityStartTime+start);return Math.ceil((periodDuration*timescale-time)/duration)},parseByTimeline=function parseByTimeline(attributes,segmentTimeline){for(var _attributes$type=attributes.type,type=void 0===_attributes$type?"static":_attributes$type,_attributes$minimumUp2=attributes.minimumUpdatePeriod,minimumUpdatePeriod=void 0===_attributes$minimumUp2?0:_attributes$minimumUp2,_attributes$media=attributes.media,media=void 0===_attributes$media?"":_attributes$media,sourceDuration=attributes.sourceDuration,_attributes$timescale2=attributes.timescale,timescale=void 0===_attributes$timescale2?1:_attributes$timescale2,_attributes$startNumb=attributes.startNumber,startNumber=void 0===_attributes$startNumb?1:_attributes$startNumb,timeline=attributes.periodIndex,segments=[],time=-1,sIndex=0;sIndex<segmentTimeline.length;sIndex++){var S=segmentTimeline[sIndex],duration=S.d,repeat=S.r||0,segmentTime=S.t||0;time<0&&(time=segmentTime),segmentTime&&segmentTime>time&&(time=segmentTime);var count=void 0;if(repeat<0){var nextS=sIndex+1;count=nextS===segmentTimeline.length?"dynamic"===type&&minimumUpdatePeriod>0&&media.indexOf("$Number$")>0?getLiveRValue(attributes,time,duration):(sourceDuration*timescale-time)/duration:(segmentTimeline[nextS].t-time)/duration}else count=repeat+1;for(var end=startNumber+segments.length+count,number=startNumber+segments.length;number<end;)segments.push({number,duration:duration/timescale,time,timeline}),time+=duration,number++}return segments},identifierPattern=/\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g,constructTemplateUrl=function constructTemplateUrl(url,values){return url.replace(identifierPattern,function identifierReplacement(values){return function(match,identifier,format,width){if("$$"===match)return"$";if(void 0===values[identifier])return match;var value=""+values[identifier];return"RepresentationID"===identifier?value:(width=format?parseInt(width,10):1,value.length>=width?value:""+new Array(width-value.length+1).join("0")+value)}}(values))},segmentsFromTemplate=function segmentsFromTemplate(attributes,segmentTimeline){var templateValues={RepresentationID:attributes.id,Bandwidth:attributes.bandwidth||0},_attributes$initializ=attributes.initialization,initialization=void 0===_attributes$initializ?{sourceURL:"",range:""}:_attributes$initializ,mapSegment=urlTypeToSegment({baseUrl:attributes.baseUrl,source:constructTemplateUrl(initialization.sourceURL,templateValues),range:initialization.range}),segments=function parseTemplateInfo(attributes,segmentTimeline){return attributes.duration||segmentTimeline?attributes.duration?parseByDuration(attributes):parseByTimeline(attributes,segmentTimeline):[{number:attributes.startNumber||1,duration:attributes.sourceDuration,time:0,timeline:attributes.periodIndex}]}(attributes,segmentTimeline);return segments.map((function(segment){templateValues.Number=segment.number,templateValues.Time=segment.time;var uri=constructTemplateUrl(attributes.media||"",templateValues);return{uri,timeline:segment.timeline,duration:segment.duration,resolvedUri:resolveUrl(attributes.baseUrl||"",uri),map:mapSegment,number:segment.number}}))},segmentsFromList=function segmentsFromList(attributes,segmentTimeline){var duration=attributes.duration,_attributes$segmentUr=attributes.segmentUrls,segmentUrls=void 0===_attributes$segmentUr?[]:_attributes$segmentUr;if(!duration&&!segmentTimeline||duration&&segmentTimeline)throw new Error(errors_SEGMENT_TIME_UNSPECIFIED);var segmentTimeInfo,segmentUrlMap=segmentUrls.map((function(segmentUrlObject){return function SegmentURLToSegmentObject(attributes,segmentUrl){var baseUrl=attributes.baseUrl,_attributes$initializ=attributes.initialization,initialization=void 0===_attributes$initializ?{}:_attributes$initializ,initSegment=urlTypeToSegment({baseUrl,source:initialization.sourceURL,range:initialization.range}),segment=urlTypeToSegment({baseUrl,source:segmentUrl.media,range:segmentUrl.mediaRange});return segment.map=initSegment,segment}(attributes,segmentUrlObject)}));return duration&&(segmentTimeInfo=parseByDuration(attributes)),segmentTimeline&&(segmentTimeInfo=parseByTimeline(attributes,segmentTimeline)),segmentTimeInfo.map((function(segmentTime,index){if(segmentUrlMap[index]){var segment=segmentUrlMap[index];return segment.timeline=segmentTime.timeline,segment.duration=segmentTime.duration,segment.number=segmentTime.number,segment}})).filter((function(segment){return segment}))},generateSegments=function generateSegments(_ref){var segmentAttributes,segmentsFn,attributes=_ref.attributes,segmentInfo=_ref.segmentInfo;segmentInfo.template?(segmentsFn=segmentsFromTemplate,segmentAttributes=merge(attributes,segmentInfo.template)):segmentInfo.base?(segmentsFn=segmentsFromBase,segmentAttributes=merge(attributes,segmentInfo.base)):segmentInfo.list&&(segmentsFn=segmentsFromList,segmentAttributes=merge(attributes,segmentInfo.list));var segmentsInfo={attributes};if(!segmentsFn)return segmentsInfo;var segments=segmentsFn(segmentAttributes,segmentInfo.timeline);if(segmentAttributes.duration){var _segmentAttributes=segmentAttributes,duration=_segmentAttributes.duration,_segmentAttributes$ti=_segmentAttributes.timescale,timescale=void 0===_segmentAttributes$ti?1:_segmentAttributes$ti;segmentAttributes.duration=duration/timescale}else segments.length?segmentAttributes.duration=segments.reduce((function(max,segment){return Math.max(max,Math.ceil(segment.duration))}),0):segmentAttributes.duration=0;return segmentsInfo.attributes=segmentAttributes,segmentsInfo.segments=segments,segmentInfo.base&&segmentAttributes.indexRange&&(segmentsInfo.sidx=segments[0],segmentsInfo.segments=[]),segmentsInfo},findChildren=function findChildren(element,name){return from(element.childNodes).filter((function(_ref){return _ref.tagName===name}))},getContent=function getContent(element){return element.textContent.trim()},parseDuration=function parseDuration(str){var match=/P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/.exec(str);if(!match)return 0;var _match$slice=match.slice(1),year=_match$slice[0],month=_match$slice[1],day=_match$slice[2],hour=_match$slice[3],minute=_match$slice[4],second=_match$slice[5];return 31536e3*parseFloat(year||0)+2592e3*parseFloat(month||0)+86400*parseFloat(day||0)+3600*parseFloat(hour||0)+60*parseFloat(minute||0)+parseFloat(second||0)},parsers={mediaPresentationDuration:function mediaPresentationDuration(value){return parseDuration(value)},availabilityStartTime:function availabilityStartTime(value){return function parseDate(str){return/^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(str)&&(str+="Z"),Date.parse(str)}(value)/1e3},minimumUpdatePeriod:function minimumUpdatePeriod(value){return parseDuration(value)},timeShiftBufferDepth:function timeShiftBufferDepth(value){return parseDuration(value)},start:function start(value){return parseDuration(value)},width:function width(value){return parseInt(value,10)},height:function height(value){return parseInt(value,10)},bandwidth:function bandwidth(value){return parseInt(value,10)},startNumber:function startNumber(value){return parseInt(value,10)},timescale:function timescale(value){return parseInt(value,10)},duration:function duration(value){var parsedValue=parseInt(value,10);return isNaN(parsedValue)?parseDuration(value):parsedValue},d:function d(value){return parseInt(value,10)},t:function t(value){return parseInt(value,10)},r:function r(value){return parseInt(value,10)},DEFAULT:function DEFAULT(value){return value}},mpd_parser_es_parseAttributes=function parseAttributes(el){return el&&el.attributes?from(el.attributes).reduce((function(a,e){var parseFn=parsers[e.name]||parsers.DEFAULT;return a[e.name]=parseFn(e.value),a}),{}):{}};var keySystemsMap={"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b":"org.w3.clearkey","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":"com.widevine.alpha","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":"com.microsoft.playready","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb":"com.adobe.primetime"},buildBaseUrls=function buildBaseUrls(referenceUrls,baseUrlElements){return baseUrlElements.length?flatten(referenceUrls.map((function(reference){return baseUrlElements.map((function(baseUrlElement){return resolveUrl(reference,getContent(baseUrlElement))}))}))):referenceUrls},getSegmentInformation=function getSegmentInformation(adaptationSet){var segmentTemplate=findChildren(adaptationSet,"SegmentTemplate")[0],segmentList=findChildren(adaptationSet,"SegmentList")[0],segmentUrls=segmentList&&findChildren(segmentList,"SegmentURL").map((function(s){return merge({tag:"SegmentURL"},mpd_parser_es_parseAttributes(s))})),segmentBase=findChildren(adaptationSet,"SegmentBase")[0],segmentTimelineParentNode=segmentList||segmentTemplate,segmentTimeline=segmentTimelineParentNode&&findChildren(segmentTimelineParentNode,"SegmentTimeline")[0],segmentInitializationParentNode=segmentList||segmentBase||segmentTemplate,segmentInitialization=segmentInitializationParentNode&&findChildren(segmentInitializationParentNode,"Initialization")[0],template=segmentTemplate&&mpd_parser_es_parseAttributes(segmentTemplate);template&&segmentInitialization?template.initialization=segmentInitialization&&mpd_parser_es_parseAttributes(segmentInitialization):template&&template.initialization&&(template.initialization={sourceURL:template.initialization});var segmentInfo={template,timeline:segmentTimeline&&findChildren(segmentTimeline,"S").map((function(s){return mpd_parser_es_parseAttributes(s)})),list:segmentList&&merge(mpd_parser_es_parseAttributes(segmentList),{segmentUrls,initialization:mpd_parser_es_parseAttributes(segmentInitialization)}),base:segmentBase&&merge(mpd_parser_es_parseAttributes(segmentBase),{initialization:mpd_parser_es_parseAttributes(segmentInitialization)})};return Object.keys(segmentInfo).forEach((function(key){segmentInfo[key]||delete segmentInfo[key]})),segmentInfo},generateKeySystemInformation=function generateKeySystemInformation(contentProtectionNodes){return contentProtectionNodes.reduce((function(acc,node){var attributes=mpd_parser_es_parseAttributes(node),keySystem=keySystemsMap[attributes.schemeIdUri];if(keySystem){acc[keySystem]={attributes};var psshNode=findChildren(node,"cenc:pssh")[0];if(psshNode){var pssh=getContent(psshNode),psshBuffer=pssh&&function mpd_parser_es_decodeB64ToUint8Array(b64Text){for(var decodedString=window_default().atob(b64Text),array=new Uint8Array(decodedString.length),i=0;i<decodedString.length;i++)array[i]=decodedString.charCodeAt(i);return array}(pssh);acc[keySystem].pssh=psshBuffer}}return acc}),{})},toRepresentations=function toRepresentations(periodAttributes,periodBaseUrls,periodSegmentInfo){return function(adaptationSet){var adaptationSetAttributes=mpd_parser_es_parseAttributes(adaptationSet),adaptationSetBaseUrls=buildBaseUrls(periodBaseUrls,findChildren(adaptationSet,"BaseURL")),role=findChildren(adaptationSet,"Role")[0],roleAttributes={role:mpd_parser_es_parseAttributes(role)},attrs=merge(periodAttributes,adaptationSetAttributes,roleAttributes),contentProtection=generateKeySystemInformation(findChildren(adaptationSet,"ContentProtection"));Object.keys(contentProtection).length&&(attrs=merge(attrs,{contentProtection}));var segmentInfo=getSegmentInformation(adaptationSet),representations=findChildren(adaptationSet,"Representation"),adaptationSetSegmentInfo=merge(periodSegmentInfo,segmentInfo);return flatten(representations.map(function inheritBaseUrls(adaptationSetAttributes,adaptationSetBaseUrls,adaptationSetSegmentInfo){return function(representation){var repBaseUrlElements=findChildren(representation,"BaseURL"),repBaseUrls=buildBaseUrls(adaptationSetBaseUrls,repBaseUrlElements),attributes=merge(adaptationSetAttributes,mpd_parser_es_parseAttributes(representation)),representationSegmentInfo=getSegmentInformation(representation);return repBaseUrls.map((function(baseUrl){return{segmentInfo:merge(adaptationSetSegmentInfo,representationSegmentInfo),attributes:merge(attributes,{baseUrl})}}))}}(attrs,adaptationSetBaseUrls,adaptationSetSegmentInfo)))}},inheritAttributes=function inheritAttributes(mpd,options){void 0===options&&(options={});var _options=options,_options$manifestUri=_options.manifestUri,manifestUri=void 0===_options$manifestUri?"":_options$manifestUri,_options$NOW=_options.NOW,NOW=void 0===_options$NOW?Date.now():_options$NOW,_options$clientOffset=_options.clientOffset,clientOffset=void 0===_options$clientOffset?0:_options$clientOffset,periods=findChildren(mpd,"Period");if(!periods.length)throw new Error(errors_INVALID_NUMBER_OF_PERIOD);var mpdAttributes=mpd_parser_es_parseAttributes(mpd),mpdBaseUrls=buildBaseUrls([manifestUri],findChildren(mpd,"BaseURL"));return mpdAttributes.sourceDuration=mpdAttributes.mediaPresentationDuration||0,mpdAttributes.NOW=NOW,mpdAttributes.clientOffset=clientOffset,flatten(periods.map(function toAdaptationSets(mpdAttributes,mpdBaseUrls){return function(period,index){var periodBaseUrls=buildBaseUrls(mpdBaseUrls,findChildren(period,"BaseURL")),periodAtt=mpd_parser_es_parseAttributes(period),parsedPeriodId=parseInt(periodAtt.id,10),periodIndex=window_default().isNaN(parsedPeriodId)?index:parsedPeriodId,periodAttributes=merge(mpdAttributes,{periodIndex}),adaptationSets=findChildren(period,"AdaptationSet"),periodSegmentInfo=getSegmentInformation(period);return flatten(adaptationSets.map(toRepresentations(periodAttributes,periodBaseUrls,periodSegmentInfo)))}}(mpdAttributes,mpdBaseUrls)))},stringToMpdXml=function stringToMpdXml(manifestString){if(""===manifestString)throw new Error(errors_DASH_EMPTY_MANIFEST);var xml=(new(window_default().DOMParser)).parseFromString(manifestString,"application/xml"),mpd=xml&&"MPD"===xml.documentElement.tagName?xml.documentElement:null;if(!mpd||mpd&&mpd.getElementsByTagName("parsererror").length>0)throw new Error(errors_DASH_INVALID_XML);return mpd},parse=function parse(manifestString,options){return void 0===options&&(options={}),toM3u8(function toPlaylists(representations){return representations.map(generateSegments)}(inheritAttributes(stringToMpdXml(manifestString),options)),options.sidxMapping)},parseUTCTiming=function parseUTCTiming(manifestString){return function parseUTCTimingScheme(mpd){var UTCTimingNode=findChildren(mpd,"UTCTiming")[0];if(!UTCTimingNode)return null;var attributes=mpd_parser_es_parseAttributes(UTCTimingNode);switch(attributes.schemeIdUri){case"urn:mpeg:dash:utc:http-head:2014":case"urn:mpeg:dash:utc:http-head:2012":attributes.method="HEAD";break;case"urn:mpeg:dash:utc:http-xsdate:2014":case"urn:mpeg:dash:utc:http-iso:2014":case"urn:mpeg:dash:utc:http-xsdate:2012":case"urn:mpeg:dash:utc:http-iso:2012":attributes.method="GET";break;case"urn:mpeg:dash:utc:direct:2014":case"urn:mpeg:dash:utc:direct:2012":attributes.method="DIRECT",attributes.value=Date.parse(attributes.value);break;default:throw new Error(errors_UNSUPPORTED_UTC_TIMING_SCHEME)}return attributes}(stringToMpdXml(manifestString))},mp4_inspector=__webpack_require__("./node_modules/mux.js/lib/tools/mp4-inspector.js"),mp4_inspector_default=__webpack_require__.n(mp4_inspector),probe=__webpack_require__("./node_modules/mux.js/lib/mp4/probe.js"),probe_default=__webpack_require__.n(probe),caption_parser=__webpack_require__("./node_modules/mux.js/lib/mp4/caption-parser.js"),caption_parser_default=__webpack_require__.n(caption_parser),ts_inspector=__webpack_require__("./node_modules/mux.js/lib/tools/ts-inspector.js"),ts_inspector_default=__webpack_require__.n(ts_inspector);var classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")},createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),aesTables=null,AES=function(){function AES(key){classCallCheck(this,AES),aesTables||(aesTables=function precompute(){var tables=[[[],[],[],[],[]],[[],[],[],[],[]]],encTable=tables[0],decTable=tables[1],sbox=encTable[4],sboxInv=decTable[4],i=void 0,x=void 0,xInv=void 0,d=[],th=[],x2=void 0,x4=void 0,s=void 0,tEnc=void 0,tDec=void 0;for(i=0;i<256;i++)th[(d[i]=i<<1^283*(i>>7))^i]=i;for(x=xInv=0;!sbox[x];x^=x2||1,xInv=th[xInv]||1)for(s=(s=xInv^xInv<<1^xInv<<2^xInv<<3^xInv<<4)>>8^255&s^99,sbox[x]=s,sboxInv[s]=x,tDec=16843009*d[x4=d[x2=d[x]]]^65537*x4^257*x2^16843008*x,tEnc=257*d[s]^16843008*s,i=0;i<4;i++)encTable[i][x]=tEnc=tEnc<<24^tEnc>>>8,decTable[i][s]=tDec=tDec<<24^tDec>>>8;for(i=0;i<5;i++)encTable[i]=encTable[i].slice(0),decTable[i]=decTable[i].slice(0);return tables}()),this._tables=[[aesTables[0][0].slice(),aesTables[0][1].slice(),aesTables[0][2].slice(),aesTables[0][3].slice(),aesTables[0][4].slice()],[aesTables[1][0].slice(),aesTables[1][1].slice(),aesTables[1][2].slice(),aesTables[1][3].slice(),aesTables[1][4].slice()]];var i=void 0,j=void 0,tmp=void 0,encKey=void 0,decKey=void 0,sbox=this._tables[0][4],decTable=this._tables[1],keyLen=key.length,rcon=1;if(4!==keyLen&&6!==keyLen&&8!==keyLen)throw new Error("Invalid aes key size");for(encKey=key.slice(0),decKey=[],this._key=[encKey,decKey],i=keyLen;i<4*keyLen+28;i++)tmp=encKey[i-1],(i%keyLen==0||8===keyLen&&i%keyLen==4)&&(tmp=sbox[tmp>>>24]<<24^sbox[tmp>>16&255]<<16^sbox[tmp>>8&255]<<8^sbox[255&tmp],i%keyLen==0&&(tmp=tmp<<8^tmp>>>24^rcon<<24,rcon=rcon<<1^283*(rcon>>7))),encKey[i]=encKey[i-keyLen]^tmp;for(j=0;i;j++,i--)tmp=encKey[3&j?i:i-4],decKey[j]=i<=4||j<4?tmp:decTable[0][sbox[tmp>>>24]]^decTable[1][sbox[tmp>>16&255]]^decTable[2][sbox[tmp>>8&255]]^decTable[3][sbox[255&tmp]]}return AES.prototype.decrypt=function decrypt(encrypted0,encrypted1,encrypted2,encrypted3,out,offset){var key=this._key[1],a=encrypted0^key[0],b=encrypted3^key[1],c=encrypted2^key[2],d=encrypted1^key[3],a2=void 0,b2=void 0,c2=void 0,nInnerRounds=key.length/4-2,i=void 0,kIndex=4,table=this._tables[1],table0=table[0],table1=table[1],table2=table[2],table3=table[3],sbox=table[4];for(i=0;i<nInnerRounds;i++)a2=table0[a>>>24]^table1[b>>16&255]^table2[c>>8&255]^table3[255&d]^key[kIndex],b2=table0[b>>>24]^table1[c>>16&255]^table2[d>>8&255]^table3[255&a]^key[kIndex+1],c2=table0[c>>>24]^table1[d>>16&255]^table2[a>>8&255]^table3[255&b]^key[kIndex+2],d=table0[d>>>24]^table1[a>>16&255]^table2[b>>8&255]^table3[255&c]^key[kIndex+3],kIndex+=4,a=a2,b=b2,c=c2;for(i=0;i<4;i++)out[(3&-i)+offset]=sbox[a>>>24]<<24^sbox[b>>16&255]<<16^sbox[c>>8&255]<<8^sbox[255&d]^key[kIndex++],a2=a,a=b,b=c,c=d,d=a2},AES}(),aes_decrypter_es_Stream=function(){function Stream(){classCallCheck(this,Stream),this.listeners={}}return Stream.prototype.on=function on(type,listener){this.listeners[type]||(this.listeners[type]=[]),this.listeners[type].push(listener)},Stream.prototype.off=function off(type,listener){if(!this.listeners[type])return!1;var index=this.listeners[type].indexOf(listener);return this.listeners[type].splice(index,1),index>-1},Stream.prototype.trigger=function trigger(type){var callbacks=this.listeners[type];if(callbacks)if(2===arguments.length)for(var length=callbacks.length,i=0;i<length;++i)callbacks[i].call(this,arguments[1]);else for(var args=Array.prototype.slice.call(arguments,1),_length=callbacks.length,_i=0;_i<_length;++_i)callbacks[_i].apply(this,args)},Stream.prototype.dispose=function dispose(){this.listeners={}},Stream.prototype.pipe=function pipe(destination){this.on("data",(function(data){destination.push(data)}))},Stream}(),AsyncStream=function(_Stream){function AsyncStream(){classCallCheck(this,AsyncStream);var _this=function(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_Stream.call(this,aes_decrypter_es_Stream));return _this.jobs=[],_this.delay=1,_this.timeout_=null,_this}return function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(AsyncStream,_Stream),AsyncStream.prototype.processJob_=function processJob_(){this.jobs.shift()(),this.jobs.length?this.timeout_=setTimeout(this.processJob_.bind(this),this.delay):this.timeout_=null},AsyncStream.prototype.push=function push(job){this.jobs.push(job),this.timeout_||(this.timeout_=setTimeout(this.processJob_.bind(this),this.delay))},AsyncStream}(aes_decrypter_es_Stream),ntoh=function ntoh(word){return word<<24|(65280&word)<<8|(16711680&word)>>8|word>>>24},decrypt=function decrypt(encrypted,key,initVector){var encrypted32=new Int32Array(encrypted.buffer,encrypted.byteOffset,encrypted.byteLength>>2),decipher=new AES(Array.prototype.slice.call(key)),decrypted=new Uint8Array(encrypted.byteLength),decrypted32=new Int32Array(decrypted.buffer),init0=void 0,init1=void 0,init2=void 0,init3=void 0,encrypted0=void 0,encrypted1=void 0,encrypted2=void 0,encrypted3=void 0,wordIx=void 0;for(init0=initVector[0],init1=initVector[1],init2=initVector[2],init3=initVector[3],wordIx=0;wordIx<encrypted32.length;wordIx+=4)encrypted0=ntoh(encrypted32[wordIx]),encrypted1=ntoh(encrypted32[wordIx+1]),encrypted2=ntoh(encrypted32[wordIx+2]),encrypted3=ntoh(encrypted32[wordIx+3]),decipher.decrypt(encrypted0,encrypted1,encrypted2,encrypted3,decrypted32,wordIx),decrypted32[wordIx]=ntoh(decrypted32[wordIx]^init0),decrypted32[wordIx+1]=ntoh(decrypted32[wordIx+1]^init1),decrypted32[wordIx+2]=ntoh(decrypted32[wordIx+2]^init2),decrypted32[wordIx+3]=ntoh(decrypted32[wordIx+3]^init3),init0=encrypted0,init1=encrypted1,init2=encrypted2,init3=encrypted3;return decrypted},Decrypter=function(){function Decrypter(encrypted,key,initVector,done){classCallCheck(this,Decrypter);var step=Decrypter.STEP,encrypted32=new Int32Array(encrypted.buffer),decrypted=new Uint8Array(encrypted.byteLength),i=0;for(this.asyncStream_=new AsyncStream,this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i,i+step),key,initVector,decrypted)),i=step;i<encrypted32.length;i+=step)initVector=new Uint32Array([ntoh(encrypted32[i-4]),ntoh(encrypted32[i-3]),ntoh(encrypted32[i-2]),ntoh(encrypted32[i-1])]),this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i,i+step),key,initVector,decrypted));this.asyncStream_.push((function(){done(null,function unpad(padded){return padded.subarray(0,padded.byteLength-padded[padded.byteLength-1])}(decrypted))}))}return Decrypter.prototype.decryptChunk_=function decryptChunk_(encrypted,key,initVector,decrypted){return function(){var bytes=decrypt(encrypted,key,initVector);decrypted.set(bytes,encrypted.byteOffset)}},createClass(Decrypter,null,[{key:"STEP",get:function get$$1(){return 32e3}}]),Decrypter}(),video_es_history=[];var log=function createLogger(name){var logByType,level="info",log=function log(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];logByType("log",level,args)};return logByType=function LogByTypeFactory(name,log){return function(type,level,args){var lvl=log.levels[level],lvlRegExp=new RegExp("^("+lvl+")$");if("log"!==type&&args.unshift(type.toUpperCase()+":"),args.unshift(name+":"),video_es_history&&video_es_history.push([].concat(args)),window_default().console){var fn=window_default().console[type];fn||"debug"!==type||(fn=window_default().console.info||window_default().console.log),fn&&lvl&&lvlRegExp.test(type)&&fn[Array.isArray(args)?"apply":"call"](window_default().console,args)}}}(name,log),log.createLogger=function(subname){return createLogger(name+": "+subname)},log.levels={all:"debug|log|warn|error",off:"",debug:"debug|log|warn|error",info:"log|warn|error",warn:"warn|error",error:"error",DEFAULT:level},log.level=function(lvl){if("string"==typeof lvl){if(!log.levels.hasOwnProperty(lvl))throw new Error('"'+lvl+'" in not a valid log level');level=lvl}return level},(log.history=function(){return video_es_history?[].concat(video_es_history):[]}).filter=function(fname){return(video_es_history||[]).filter((function(historyItem){return new RegExp(".*"+fname+".*").test(historyItem[0])}))},log.history.clear=function(){video_es_history&&(video_es_history.length=0)},log.history.disable=function(){null!==video_es_history&&(video_es_history.length=0,video_es_history=null)},log.history.enable=function(){null===video_es_history&&(video_es_history=[])},log.error=function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];return logByType("error",level,args)},log.warn=function(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++)args[_key3]=arguments[_key3];return logByType("warn",level,args)},log.debug=function(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++)args[_key4]=arguments[_key4];return logByType("debug",level,args)},log}("VIDEOJS"),createLogger$1=log.createLogger,video_es_toString=Object.prototype.toString,keys=function keys(object){return video_es_isObject(object)?Object.keys(object):[]};function each(object,fn){keys(object).forEach((function(key){return fn(object[key],key)}))}function video_es_assign(target){for(var _len=arguments.length,sources=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)sources[_key-1]=arguments[_key];return Object.assign?Object.assign.apply(Object,[target].concat(sources)):(sources.forEach((function(source){source&&each(source,(function(value,key){target[key]=value}))})),target)}function video_es_isObject(value){return!!value&&"object"==typeof value}function isPlain(value){return video_es_isObject(value)&&"[object Object]"===video_es_toString.call(value)&&value.constructor===Object}function computedStyle(el,prop){if(!el||!prop)return"";if("function"==typeof window_default().getComputedStyle){var computedStyleValue=window_default().getComputedStyle(el);return computedStyleValue?computedStyleValue.getPropertyValue(prop)||computedStyleValue[prop]:""}return""}function isNonBlankString(str){return"string"==typeof str&&/\S/.test(str)}function throwIfWhitespace(str){if(/\s/.test(str))throw new Error("class has illegal whitespace characters")}function isReal(){return document_default()===window_default().document}function isEl(value){return video_es_isObject(value)&&1===value.nodeType}function isInFrame(){try{return window_default().parent!==window_default().self}catch(x){return!0}}function createQuerier(method){return function(selector,context){if(!isNonBlankString(selector))return document_default()[method](null);isNonBlankString(context)&&(context=document_default().querySelector(context));var ctx=isEl(context)?context:document_default();return ctx[method]&&ctx[method](selector)}}function createEl(tagName,properties,attributes,content){void 0===tagName&&(tagName="div"),void 0===properties&&(properties={}),void 0===attributes&&(attributes={});var el=document_default().createElement(tagName);return Object.getOwnPropertyNames(properties).forEach((function(propName){var val=properties[propName];-1!==propName.indexOf("aria-")||"role"===propName||"type"===propName?(log.warn("Setting attributes in the second argument of createEl()\nhas been deprecated. Use the third argument instead.\ncreateEl(type, properties, attributes). Attempting to set "+propName+" to "+val+"."),el.setAttribute(propName,val)):"textContent"===propName?textContent(el,val):el[propName]=val})),Object.getOwnPropertyNames(attributes).forEach((function(attrName){el.setAttribute(attrName,attributes[attrName])})),content&&appendContent(el,content),el}function textContent(el,text){return void 0===el.textContent?el.innerText=text:el.textContent=text,el}function prependTo(child,parent){parent.firstChild?parent.insertBefore(child,parent.firstChild):parent.appendChild(child)}function hasClass(element,classToCheck){return throwIfWhitespace(classToCheck),element.classList?element.classList.contains(classToCheck):function classRegExp(className){return new RegExp("(^|\\s)"+className+"($|\\s)")}(classToCheck).test(element.className)}function addClass(element,classToAdd){return element.classList?element.classList.add(classToAdd):hasClass(element,classToAdd)||(element.className=(element.className+" "+classToAdd).trim()),element}function removeClass(element,classToRemove){return element.classList?element.classList.remove(classToRemove):(throwIfWhitespace(classToRemove),element.className=element.className.split(/\s+/).filter((function(c){return c!==classToRemove})).join(" ")),element}function toggleClass(element,classToToggle,predicate){var has=hasClass(element,classToToggle);if("function"==typeof predicate&&(predicate=predicate(element,classToToggle)),"boolean"!=typeof predicate&&(predicate=!has),predicate!==has)return predicate?addClass(element,classToToggle):removeClass(element,classToToggle),element}function setAttributes(el,attributes){Object.getOwnPropertyNames(attributes).forEach((function(attrName){var attrValue=attributes[attrName];null==attrValue||!1===attrValue?el.removeAttribute(attrName):el.setAttribute(attrName,!0===attrValue?"":attrValue)}))}function getAttributes(tag){var obj={},knownBooleans=",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";if(tag&&tag.attributes&&tag.attributes.length>0)for(var attrs=tag.attributes,i=attrs.length-1;i>=0;i--){var attrName=attrs[i].name,attrVal=attrs[i].value;"boolean"!=typeof tag[attrName]&&-1===knownBooleans.indexOf(","+attrName+",")||(attrVal=null!==attrVal),obj[attrName]=attrVal}return obj}function getAttribute(el,attribute){return el.getAttribute(attribute)}function setAttribute(el,attribute,value){el.setAttribute(attribute,value)}function removeAttribute(el,attribute){el.removeAttribute(attribute)}function blockTextSelection(){document_default().body.focus(),document_default().onselectstart=function(){return!1}}function unblockTextSelection(){document_default().onselectstart=function(){return!0}}function getBoundingClientRect(el){if(el&&el.getBoundingClientRect&&el.parentNode){var rect=el.getBoundingClientRect(),result={};return["bottom","height","left","right","top","width"].forEach((function(k){void 0!==rect[k]&&(result[k]=rect[k])})),result.height||(result.height=parseFloat(computedStyle(el,"height"))),result.width||(result.width=parseFloat(computedStyle(el,"width"))),result}}function findPosition(el){var box;if(el.getBoundingClientRect&&el.parentNode&&(box=el.getBoundingClientRect()),!box)return{left:0,top:0};var docEl=document_default().documentElement,body=document_default().body,clientLeft=docEl.clientLeft||body.clientLeft||0,scrollLeft=window_default().pageXOffset||body.scrollLeft,left=box.left+scrollLeft-clientLeft,clientTop=docEl.clientTop||body.clientTop||0,scrollTop=window_default().pageYOffset||body.scrollTop,top=box.top+scrollTop-clientTop;return{left:Math.round(left),top:Math.round(top)}}function getPointerPosition(el,event){var position={},box=findPosition(el),boxW=el.offsetWidth,boxH=el.offsetHeight,boxY=box.top,boxX=box.left,pageY=event.pageY,pageX=event.pageX;return event.changedTouches&&(pageX=event.changedTouches[0].pageX,pageY=event.changedTouches[0].pageY),position.y=Math.max(0,Math.min(1,(boxY-pageY+boxH)/boxH)),position.x=Math.max(0,Math.min(1,(pageX-boxX)/boxW)),position}function isTextNode(value){return video_es_isObject(value)&&3===value.nodeType}function emptyEl(el){for(;el.firstChild;)el.removeChild(el.firstChild);return el}function normalizeContent(content){return"function"==typeof content&&(content=content()),(Array.isArray(content)?content:[content]).map((function(value){return"function"==typeof value&&(value=value()),isEl(value)||isTextNode(value)?value:"string"==typeof value&&/\S/.test(value)?document_default().createTextNode(value):void 0})).filter((function(value){return value}))}function appendContent(el,content){return normalizeContent(content).forEach((function(node){return el.appendChild(node)})),el}function insertContent(el,content){return appendContent(emptyEl(el),content)}function isSingleLeftClick(event){return void 0===event.button&&void 0===event.buttons||(0===event.button&&void 0===event.buttons||("mouseup"===event.type&&0===event.button&&0===event.buttons||0===event.button&&1===event.buttons))}var videojs,$=createQuerier("querySelector"),$$=createQuerier("querySelectorAll"),Dom=Object.freeze({isReal,isEl,isInFrame,createEl,textContent,prependTo,hasClass,addClass,removeClass,toggleClass,setAttributes,getAttributes,getAttribute,setAttribute,removeAttribute,blockTextSelection,unblockTextSelection,getBoundingClientRect,findPosition,getPointerPosition,isTextNode,emptyEl,normalizeContent,appendContent,insertContent,isSingleLeftClick,$,$$}),_windowLoaded=!1,autoSetup=function autoSetup(){if(isReal()&&!1!==videojs.options.autoSetup){var vids=Array.prototype.slice.call(document_default().getElementsByTagName("video")),audios=Array.prototype.slice.call(document_default().getElementsByTagName("audio")),divs=Array.prototype.slice.call(document_default().getElementsByTagName("video-js")),mediaEls=vids.concat(audios,divs);if(mediaEls&&mediaEls.length>0)for(var i=0,e=mediaEls.length;i<e;i++){var mediaEl=mediaEls[i];if(!mediaEl||!mediaEl.getAttribute){autoSetupTimeout(1);break}void 0===mediaEl.player&&null!==mediaEl.getAttribute("data-setup")&&videojs(mediaEl)}else _windowLoaded||autoSetupTimeout(1)}};function autoSetupTimeout(wait,vjs){vjs&&(videojs=vjs),window_default().setTimeout(autoSetup,wait)}function setWindowLoaded(){_windowLoaded=!0,window_default().removeEventListener("load",setWindowLoaded)}isReal()&&("complete"===document_default().readyState?setWindowLoaded():window_default().addEventListener("load",setWindowLoaded));var FakeWeakMap,createStyleElement=function createStyleElement(className){var style=document_default().createElement("style");return style.className=className,style},setTextContent=function setTextContent(el,content){el.styleSheet?el.styleSheet.cssText=content:el.textContent=content},_guid=3;function newGUID(){return _guid++}window_default().WeakMap||(FakeWeakMap=function(){function FakeWeakMap(){this.vdata="vdata"+Math.floor(window_default().performance&&window_default().performance.now()||Date.now()),this.data={}}var _proto=FakeWeakMap.prototype;return _proto.set=function set(key,value){var access=key[this.vdata]||newGUID();return key[this.vdata]||(key[this.vdata]=access),this.data[access]=value,this},_proto.get=function get(key){var access=key[this.vdata];if(access)return this.data[access];log("We have no data for this element",key)},_proto.has=function has(key){return key[this.vdata]in this.data},_proto.delete=function _delete(key){var access=key[this.vdata];access&&(delete this.data[access],delete key[this.vdata])},FakeWeakMap}());var DomData=window_default().WeakMap?new WeakMap:new FakeWeakMap;function _cleanUpEvents(elem,type){if(DomData.has(elem)){var data=DomData.get(elem);0===data.handlers[type].length&&(delete data.handlers[type],elem.removeEventListener?elem.removeEventListener(type,data.dispatcher,!1):elem.detachEvent&&elem.detachEvent("on"+type,data.dispatcher)),Object.getOwnPropertyNames(data.handlers).length<=0&&(delete data.handlers,delete data.dispatcher,delete data.disabled),0===Object.getOwnPropertyNames(data).length&&DomData.delete(elem)}}function _handleMultipleEvents(fn,elem,types,callback){types.forEach((function(type){fn(elem,type,callback)}))}function fixEvent(event){function returnTrue(){return!0}function returnFalse(){return!1}if(!event||!event.isPropagationStopped){var old=event||window_default().event;for(var key in event={},old)"layerX"!==key&&"layerY"!==key&&"keyLocation"!==key&&"webkitMovementX"!==key&&"webkitMovementY"!==key&&("returnValue"===key&&old.preventDefault||(event[key]=old[key]));if(event.target||(event.target=event.srcElement||document_default()),event.relatedTarget||(event.relatedTarget=event.fromElement===event.target?event.toElement:event.fromElement),event.preventDefault=function(){old.preventDefault&&old.preventDefault(),event.returnValue=!1,old.returnValue=!1,event.defaultPrevented=!0},event.defaultPrevented=!1,event.stopPropagation=function(){old.stopPropagation&&old.stopPropagation(),event.cancelBubble=!0,old.cancelBubble=!0,event.isPropagationStopped=returnTrue},event.isPropagationStopped=returnFalse,event.stopImmediatePropagation=function(){old.stopImmediatePropagation&&old.stopImmediatePropagation(),event.isImmediatePropagationStopped=returnTrue,event.stopPropagation()},event.isImmediatePropagationStopped=returnFalse,null!==event.clientX&&void 0!==event.clientX){var doc=document_default().documentElement,body=document_default().body;event.pageX=event.clientX+(doc&&doc.scrollLeft||body&&body.scrollLeft||0)-(doc&&doc.clientLeft||body&&body.clientLeft||0),event.pageY=event.clientY+(doc&&doc.scrollTop||body&&body.scrollTop||0)-(doc&&doc.clientTop||body&&body.clientTop||0)}event.which=event.charCode||event.keyCode,null!==event.button&&void 0!==event.button&&(event.button=1&event.button?0:4&event.button?1:2&event.button?2:0)}return event}var _supportsPassive=!1;!function(){try{var opts=Object.defineProperty({},"passive",{get:function get(){_supportsPassive=!0}});window_default().addEventListener("test",null,opts),window_default().removeEventListener("test",null,opts)}catch(e){}}();var passiveEvents=["touchstart","touchmove"];function on(elem,type,fn){if(Array.isArray(type))return _handleMultipleEvents(on,elem,type,fn);DomData.has(elem)||DomData.set(elem,{});var data=DomData.get(elem);if(data.handlers||(data.handlers={}),data.handlers[type]||(data.handlers[type]=[]),fn.guid||(fn.guid=newGUID()),data.handlers[type].push(fn),data.dispatcher||(data.disabled=!1,data.dispatcher=function(event,hash){if(!data.disabled){event=fixEvent(event);var handlers=data.handlers[event.type];if(handlers)for(var handlersCopy=handlers.slice(0),m=0,n=handlersCopy.length;m<n&&!event.isImmediatePropagationStopped();m++)try{handlersCopy[m].call(elem,event,hash)}catch(e){log.error(e)}}}),1===data.handlers[type].length)if(elem.addEventListener){var options=!1;_supportsPassive&&passiveEvents.indexOf(type)>-1&&(options={passive:!0}),elem.addEventListener(type,data.dispatcher,options)}else elem.attachEvent&&elem.attachEvent("on"+type,data.dispatcher)}function off(elem,type,fn){if(DomData.has(elem)){var data=DomData.get(elem);if(data.handlers){if(Array.isArray(type))return _handleMultipleEvents(off,elem,type,fn);var removeType=function removeType(el,t){data.handlers[t]=[],_cleanUpEvents(el,t)};if(void 0!==type){var handlers=data.handlers[type];if(handlers)if(fn){if(fn.guid)for(var n=0;n<handlers.length;n++)handlers[n].guid===fn.guid&&handlers.splice(n--,1);_cleanUpEvents(elem,type)}else removeType(elem,type)}else for(var t in data.handlers)Object.prototype.hasOwnProperty.call(data.handlers||{},t)&&removeType(elem,t)}}}function trigger(elem,event,hash){var elemData=DomData.has(elem)?DomData.get(elem):{},parent=elem.parentNode||elem.ownerDocument;if("string"==typeof event?event={type:event,target:elem}:event.target||(event.target=elem),event=fixEvent(event),elemData.dispatcher&&elemData.dispatcher.call(elem,event,hash),parent&&!event.isPropagationStopped()&&!0===event.bubbles)trigger.call(null,parent,event,hash);else if(!parent&&!event.defaultPrevented&&event.target&&event.target[event.type]){DomData.has(event.target)||DomData.set(event.target,{});var targetData=DomData.get(event.target);event.target[event.type]&&(targetData.disabled=!0,"function"==typeof event.target[event.type]&&event.target[event.type](),targetData.disabled=!1)}return!event.defaultPrevented}function one(elem,type,fn){if(Array.isArray(type))return _handleMultipleEvents(one,elem,type,fn);var func=function func(){off(elem,type,func),fn.apply(this,arguments)};func.guid=fn.guid=fn.guid||newGUID(),on(elem,type,func)}function any(elem,type,fn){var func=function func(){off(elem,type,func),fn.apply(this,arguments)};func.guid=fn.guid=fn.guid||newGUID(),on(elem,type,func)}var EVENT_MAP,Events=Object.freeze({fixEvent,on,off,trigger,one,any}),bind=function bind(context,fn,uid){fn.guid||(fn.guid=newGUID());var bound=fn.bind(context);return bound.guid=uid?uid+"_"+fn.guid:fn.guid,bound},throttle=function throttle(fn,wait){var last=window_default().performance.now();return function throttled(){var now=window_default().performance.now();now-last>=wait&&(fn.apply(void 0,arguments),last=now)}},EventTarget=function EventTarget(){};EventTarget.prototype.allowedEvents_={},EventTarget.prototype.on=function(type,fn){var ael=this.addEventListener;this.addEventListener=function(){},on(this,type,fn),this.addEventListener=ael},EventTarget.prototype.addEventListener=EventTarget.prototype.on,EventTarget.prototype.off=function(type,fn){off(this,type,fn)},EventTarget.prototype.removeEventListener=EventTarget.prototype.off,EventTarget.prototype.one=function(type,fn){var ael=this.addEventListener;this.addEventListener=function(){},one(this,type,fn),this.addEventListener=ael},EventTarget.prototype.any=function(type,fn){var ael=this.addEventListener;this.addEventListener=function(){},any(this,type,fn),this.addEventListener=ael},EventTarget.prototype.trigger=function(event){var type=event.type||event;"string"==typeof event&&(event={type}),event=fixEvent(event),this.allowedEvents_[type]&&this["on"+type]&&this["on"+type](event),trigger(this,event)},EventTarget.prototype.dispatchEvent=EventTarget.prototype.trigger,EventTarget.prototype.queueTrigger=function(event){var _this=this;EVENT_MAP||(EVENT_MAP=new Map);var type=event.type||event,map=EVENT_MAP.get(this);map||(map=new Map,EVENT_MAP.set(this,map));var oldTimeout=map.get(type);map.delete(type),window_default().clearTimeout(oldTimeout);var timeout=window_default().setTimeout((function(){0===map.size&&(map=null,EVENT_MAP.delete(_this)),_this.trigger(event)}),0);map.set(type,timeout)};var isEvented=function isEvented(object){return object instanceof EventTarget||!!object.eventBusEl_&&["on","one","off","trigger"].every((function(k){return"function"==typeof object[k]}))},isValidEventType=function isValidEventType(type){return"string"==typeof type&&/\S/.test(type)||Array.isArray(type)&&!!type.length},validateTarget=function validateTarget(target){if(!target.nodeName&&!isEvented(target))throw new Error("Invalid target; must be a DOM node or evented object.")},validateEventType=function validateEventType(type){if(!isValidEventType(type))throw new Error("Invalid event type; must be a non-empty string or array.")},validateListener=function validateListener(listener){if("function"!=typeof listener)throw new Error("Invalid listener; must be a function.")},normalizeListenArgs=function normalizeListenArgs(self,args){var target,type,listener,isTargetingSelf=args.length<3||args[0]===self||args[0]===self.eventBusEl_;return isTargetingSelf?(target=self.eventBusEl_,args.length>=3&&args.shift(),type=args[0],listener=args[1]):(target=args[0],type=args[1],listener=args[2]),validateTarget(target),validateEventType(type),validateListener(listener),{isTargetingSelf,target,type,listener:listener=bind(self,listener)}},listen=function listen(target,method,type,listener){validateTarget(target),target.nodeName?Events[method](target,type,listener):target[method](type,listener)},EventedMixin={on:function on(){for(var _this=this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var _normalizeListenArgs=normalizeListenArgs(this,args),isTargetingSelf=_normalizeListenArgs.isTargetingSelf,target=_normalizeListenArgs.target,type=_normalizeListenArgs.type,listener=_normalizeListenArgs.listener;if(listen(target,"on",type,listener),!isTargetingSelf){var removeListenerOnDispose=function removeListenerOnDispose(){return _this.off(target,type,listener)};removeListenerOnDispose.guid=listener.guid;var removeRemoverOnTargetDispose=function removeRemoverOnTargetDispose(){return _this.off("dispose",removeListenerOnDispose)};removeRemoverOnTargetDispose.guid=listener.guid,listen(this,"on","dispose",removeListenerOnDispose),listen(target,"on","dispose",removeRemoverOnTargetDispose)}},one:function one(){for(var _this2=this,_len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];var _normalizeListenArgs2=normalizeListenArgs(this,args),isTargetingSelf=_normalizeListenArgs2.isTargetingSelf,target=_normalizeListenArgs2.target,type=_normalizeListenArgs2.type,listener=_normalizeListenArgs2.listener;if(isTargetingSelf)listen(target,"one",type,listener);else{var wrapper=function wrapper(){_this2.off(target,type,wrapper);for(var _len3=arguments.length,largs=new Array(_len3),_key3=0;_key3<_len3;_key3++)largs[_key3]=arguments[_key3];listener.apply(null,largs)};wrapper.guid=listener.guid,listen(target,"one",type,wrapper)}},any:function any(){for(var _this3=this,_len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++)args[_key4]=arguments[_key4];var _normalizeListenArgs3=normalizeListenArgs(this,args),isTargetingSelf=_normalizeListenArgs3.isTargetingSelf,target=_normalizeListenArgs3.target,type=_normalizeListenArgs3.type,listener=_normalizeListenArgs3.listener;if(isTargetingSelf)listen(target,"any",type,listener);else{var wrapper=function wrapper(){_this3.off(target,type,wrapper);for(var _len5=arguments.length,largs=new Array(_len5),_key5=0;_key5<_len5;_key5++)largs[_key5]=arguments[_key5];listener.apply(null,largs)};wrapper.guid=listener.guid,listen(target,"any",type,wrapper)}},off:function off$1(targetOrType,typeOrListener,listener){if(!targetOrType||isValidEventType(targetOrType))off(this.eventBusEl_,targetOrType,typeOrListener);else{var target=targetOrType,type=typeOrListener;validateTarget(target),validateEventType(type),validateListener(listener),listener=bind(this,listener),this.off("dispose",listener),target.nodeName?(off(target,type,listener),off(target,"dispose",listener)):isEvented(target)&&(target.off(type,listener),target.off("dispose",listener))}},trigger:function trigger$1(event,hash){return trigger(this.eventBusEl_,event,hash)}};function evented(target,options){void 0===options&&(options={});var eventBusKey=options.eventBusKey;if(eventBusKey){if(!target[eventBusKey].nodeName)throw new Error('The eventBusKey "'+eventBusKey+'" does not refer to an element.');target.eventBusEl_=target[eventBusKey]}else target.eventBusEl_=createEl("span",{className:"vjs-event-bus"});return video_es_assign(target,EventedMixin),target.eventedCallbacks&&target.eventedCallbacks.forEach((function(callback){callback()})),target.on("dispose",(function(){target.off(),window_default().setTimeout((function(){target.eventBusEl_=null}),0)})),target}var StatefulMixin={state:{},setState:function setState(stateUpdates){var changes,_this=this;return"function"==typeof stateUpdates&&(stateUpdates=stateUpdates()),each(stateUpdates,(function(value,key){_this.state[key]!==value&&((changes=changes||{})[key]={from:_this.state[key],to:value}),_this.state[key]=value})),changes&&isEvented(this)&&this.trigger({changes,type:"statechanged"}),changes}};function stateful(target,defaultState){return video_es_assign(target,StatefulMixin),target.state=video_es_assign({},target.state,defaultState),"function"==typeof target.handleStateChanged&&isEvented(target)&&target.on("statechanged",target.handleStateChanged),target}var toLowerCase=function toLowerCase(string){return"string"!=typeof string?string:string.replace(/./,(function(w){return w.toLowerCase()}))},toTitleCase=function toTitleCase(string){return"string"!=typeof string?string:string.replace(/./,(function(w){return w.toUpperCase()}))};function mergeOptions(){for(var result={},_len=arguments.length,sources=new Array(_len),_key=0;_key<_len;_key++)sources[_key]=arguments[_key];return sources.forEach((function(source){source&&each(source,(function(value,key){isPlain(value)?(isPlain(result[key])||(result[key]={}),result[key]=mergeOptions(result[key],value)):result[key]=value}))})),result}var Component=function(){function Component(player,options,ready){if(!player&&this.play?this.player_=player=this:this.player_=player,this.parentComponent_=null,this.options_=mergeOptions({},this.options_),options=this.options_=mergeOptions(this.options_,options),this.id_=options.id||options.el&&options.el.id,!this.id_){var id=player&&player.id&&player.id()||"no_player";this.id_=id+"_component_"+newGUID()}var SetSham;this.name_=options.name||null,options.el?this.el_=options.el:!1!==options.createEl&&(this.el_=this.createEl()),!1!==options.evented&&evented(this,{eventBusKey:this.el_?"el_":null}),stateful(this,this.constructor.defaultState),this.children_=[],this.childIndex_={},this.childNameIndex_={},window_default().Set||(SetSham=function(){function SetSham(){this.set_={}}var _proto2=SetSham.prototype;return _proto2.has=function has(key){return key in this.set_},_proto2.delete=function _delete(key){var has=this.has(key);return delete this.set_[key],has},_proto2.add=function add(key){return this.set_[key]=1,this},_proto2.forEach=function forEach(callback,thisArg){for(var key in this.set_)callback.call(thisArg,key,key,this)},SetSham}()),this.setTimeoutIds_=window_default().Set?new Set:new SetSham,this.setIntervalIds_=window_default().Set?new Set:new SetSham,this.rafIds_=window_default().Set?new Set:new SetSham,this.clearingTimersOnDispose_=!1,!1!==options.initChildren&&this.initChildren(),this.ready(ready),!1!==options.reportTouchActivity&&this.enableTouchActivity()}var _proto=Component.prototype;return _proto.dispose=function dispose(){if(this.trigger({type:"dispose",bubbles:!1}),this.children_)for(var i=this.children_.length-1;i>=0;i--)this.children_[i].dispose&&this.children_[i].dispose();this.children_=null,this.childIndex_=null,this.childNameIndex_=null,this.parentComponent_=null,this.el_&&(this.el_.parentNode&&this.el_.parentNode.removeChild(this.el_),DomData.has(this.el_)&&DomData.delete(this.el_),this.el_=null),this.player_=null},_proto.player=function player(){return this.player_},_proto.options=function options(obj){return obj?(this.options_=mergeOptions(this.options_,obj),this.options_):this.options_},_proto.el=function el(){return this.el_},_proto.createEl=function createEl$1(tagName,properties,attributes){return createEl(tagName,properties,attributes)},_proto.localize=function localize(string,tokens,defaultValue){void 0===defaultValue&&(defaultValue=string);var code=this.player_.language&&this.player_.language(),languages=this.player_.languages&&this.player_.languages(),language=languages&&languages[code],primaryCode=code&&code.split("-")[0],primaryLang=languages&&languages[primaryCode],localizedString=defaultValue;return language&&language[string]?localizedString=language[string]:primaryLang&&primaryLang[string]&&(localizedString=primaryLang[string]),tokens&&(localizedString=localizedString.replace(/\{(\d+)\}/g,(function(match,index){var value=tokens[index-1],ret=value;return void 0===value&&(ret=match),ret}))),localizedString},_proto.contentEl=function contentEl(){return this.contentEl_||this.el_},_proto.id=function id(){return this.id_},_proto.name=function name(){return this.name_},_proto.children=function children(){return this.children_},_proto.getChildById=function getChildById(id){return this.childIndex_[id]},_proto.getChild=function getChild(name){if(name)return this.childNameIndex_[name]},_proto.addChild=function addChild(child,options,index){var component,componentName;if(void 0===options&&(options={}),void 0===index&&(index=this.children_.length),"string"==typeof child){componentName=toTitleCase(child);var componentClassName=options.componentClass||componentName;options.name=componentName;var ComponentClass=Component.getComponent(componentClassName);if(!ComponentClass)throw new Error("Component "+componentClassName+" does not exist");if("function"!=typeof ComponentClass)return null;component=new ComponentClass(this.player_||this,options)}else component=child;if(component.parentComponent_&&component.parentComponent_.removeChild(component),this.children_.splice(index,0,component),component.parentComponent_=this,"function"==typeof component.id&&(this.childIndex_[component.id()]=component),(componentName=componentName||component.name&&toTitleCase(component.name()))&&(this.childNameIndex_[componentName]=component,this.childNameIndex_[toLowerCase(componentName)]=component),"function"==typeof component.el&&component.el()){var refNode=this.contentEl().children[index]||null;this.contentEl().insertBefore(component.el(),refNode)}return component},_proto.removeChild=function removeChild(component){if("string"==typeof component&&(component=this.getChild(component)),component&&this.children_){for(var childFound=!1,i=this.children_.length-1;i>=0;i--)if(this.children_[i]===component){childFound=!0,this.children_.splice(i,1);break}if(childFound){component.parentComponent_=null,this.childIndex_[component.id()]=null,this.childNameIndex_[toTitleCase(component.name())]=null,this.childNameIndex_[toLowerCase(component.name())]=null;var compEl=component.el();compEl&&compEl.parentNode===this.contentEl()&&this.contentEl().removeChild(component.el())}}},_proto.initChildren=function initChildren(){var _this=this,children=this.options_.children;if(children){var workingChildren,parentOptions=this.options_,Tech=Component.getComponent("Tech");(workingChildren=Array.isArray(children)?children:Object.keys(children)).concat(Object.keys(this.options_).filter((function(child){return!workingChildren.some((function(wchild){return"string"==typeof wchild?child===wchild:child===wchild.name}))}))).map((function(child){var name,opts;return"string"==typeof child?opts=children[name=child]||_this.options_[name]||{}:(name=child.name,opts=child),{name,opts}})).filter((function(child){var c=Component.getComponent(child.opts.componentClass||toTitleCase(child.name));return c&&!Tech.isTech(c)})).forEach((function handleAdd(child){var name=child.name,opts=child.opts;if(void 0!==parentOptions[name]&&(opts=parentOptions[name]),!1!==opts){!0===opts&&(opts={}),opts.playerOptions=_this.options_.playerOptions;var newChild=_this.addChild(name,opts);newChild&&(_this[name]=newChild)}}))}},_proto.buildCSSClass=function buildCSSClass(){return""},_proto.ready=function ready(fn,sync){if(void 0===sync&&(sync=!1),fn)return this.isReady_?void(sync?fn.call(this):this.setTimeout(fn,1)):(this.readyQueue_=this.readyQueue_||[],void this.readyQueue_.push(fn))},_proto.triggerReady=function triggerReady(){this.isReady_=!0,this.setTimeout((function(){var readyQueue=this.readyQueue_;this.readyQueue_=[],readyQueue&&readyQueue.length>0&&readyQueue.forEach((function(fn){fn.call(this)}),this),this.trigger("ready")}),1)},_proto.$=function $$1(selector,context){return $(selector,context||this.contentEl())},_proto.$$=function $$$1(selector,context){return $$(selector,context||this.contentEl())},_proto.hasClass=function hasClass$1(classToCheck){return hasClass(this.el_,classToCheck)},_proto.addClass=function addClass$1(classToAdd){addClass(this.el_,classToAdd)},_proto.removeClass=function removeClass$1(classToRemove){removeClass(this.el_,classToRemove)},_proto.toggleClass=function toggleClass$1(classToToggle,predicate){toggleClass(this.el_,classToToggle,predicate)},_proto.show=function show(){this.removeClass("vjs-hidden")},_proto.hide=function hide(){this.addClass("vjs-hidden")},_proto.lockShowing=function lockShowing(){this.addClass("vjs-lock-showing")},_proto.unlockShowing=function unlockShowing(){this.removeClass("vjs-lock-showing")},_proto.getAttribute=function getAttribute$1(attribute){return getAttribute(this.el_,attribute)},_proto.setAttribute=function setAttribute$1(attribute,value){setAttribute(this.el_,attribute,value)},_proto.removeAttribute=function removeAttribute$1(attribute){removeAttribute(this.el_,attribute)},_proto.width=function width(num,skipListeners){return this.dimension("width",num,skipListeners)},_proto.height=function height(num,skipListeners){return this.dimension("height",num,skipListeners)},_proto.dimensions=function dimensions(width,height){this.width(width,!0),this.height(height)},_proto.dimension=function dimension(widthOrHeight,num,skipListeners){if(void 0!==num)return null!==num&&num==num||(num=0),-1!==(""+num).indexOf("%")||-1!==(""+num).indexOf("px")?this.el_.style[widthOrHeight]=num:this.el_.style[widthOrHeight]="auto"===num?"":num+"px",void(skipListeners||this.trigger("componentresize"));if(!this.el_)return 0;var val=this.el_.style[widthOrHeight],pxIndex=val.indexOf("px");return-1!==pxIndex?parseInt(val.slice(0,pxIndex),10):parseInt(this.el_["offset"+toTitleCase(widthOrHeight)],10)},_proto.currentDimension=function currentDimension(widthOrHeight){var computedWidthOrHeight=0;if("width"!==widthOrHeight&&"height"!==widthOrHeight)throw new Error("currentDimension only accepts width or height value");if(computedWidthOrHeight=computedStyle(this.el_,widthOrHeight),0===(computedWidthOrHeight=parseFloat(computedWidthOrHeight))||isNaN(computedWidthOrHeight)){var rule="offset"+toTitleCase(widthOrHeight);computedWidthOrHeight=this.el_[rule]}return computedWidthOrHeight},_proto.currentDimensions=function currentDimensions(){return{width:this.currentDimension("width"),height:this.currentDimension("height")}},_proto.currentWidth=function currentWidth(){return this.currentDimension("width")},_proto.currentHeight=function currentHeight(){return this.currentDimension("height")},_proto.focus=function focus(){this.el_.focus()},_proto.blur=function blur(){this.el_.blur()},_proto.handleKeyDown=function handleKeyDown(event){this.player_&&(event.stopPropagation(),this.player_.handleKeyDown(event))},_proto.handleKeyPress=function handleKeyPress(event){this.handleKeyDown(event)},_proto.emitTapEvents=function emitTapEvents(){var couldBeTap,touchStart=0,firstTouch=null;this.on("touchstart",(function(event){1===event.touches.length&&(firstTouch={pageX:event.touches[0].pageX,pageY:event.touches[0].pageY},touchStart=window_default().performance.now(),couldBeTap=!0)})),this.on("touchmove",(function(event){if(event.touches.length>1)couldBeTap=!1;else if(firstTouch){var xdiff=event.touches[0].pageX-firstTouch.pageX,ydiff=event.touches[0].pageY-firstTouch.pageY;Math.sqrt(xdiff*xdiff+ydiff*ydiff)>10&&(couldBeTap=!1)}}));var noTap=function noTap(){couldBeTap=!1};this.on("touchleave",noTap),this.on("touchcancel",noTap),this.on("touchend",(function(event){(firstTouch=null,!0===couldBeTap)&&(window_default().performance.now()-touchStart<200&&(event.preventDefault(),this.trigger("tap")))}))},_proto.enableTouchActivity=function enableTouchActivity(){if(this.player()&&this.player().reportUserActivity){var touchHolding,report=bind(this.player(),this.player().reportUserActivity);this.on("touchstart",(function(){report(),this.clearInterval(touchHolding),touchHolding=this.setInterval(report,250)}));var touchEnd=function touchEnd(event){report(),this.clearInterval(touchHolding)};this.on("touchmove",report),this.on("touchend",touchEnd),this.on("touchcancel",touchEnd)}},_proto.setTimeout=function setTimeout(fn,timeout){var timeoutId,_this2=this;return fn=bind(this,fn),this.clearTimersOnDispose_(),timeoutId=window_default().setTimeout((function(){_this2.setTimeoutIds_.has(timeoutId)&&_this2.setTimeoutIds_.delete(timeoutId),fn()}),timeout),this.setTimeoutIds_.add(timeoutId),timeoutId},_proto.clearTimeout=function clearTimeout(timeoutId){return this.setTimeoutIds_.has(timeoutId)&&(this.setTimeoutIds_.delete(timeoutId),window_default().clearTimeout(timeoutId)),timeoutId},_proto.setInterval=function setInterval(fn,interval){fn=bind(this,fn),this.clearTimersOnDispose_();var intervalId=window_default().setInterval(fn,interval);return this.setIntervalIds_.add(intervalId),intervalId},_proto.clearInterval=function clearInterval(intervalId){return this.setIntervalIds_.has(intervalId)&&(this.setIntervalIds_.delete(intervalId),window_default().clearInterval(intervalId)),intervalId},_proto.requestAnimationFrame=function requestAnimationFrame(fn){var id,_this3=this;return this.supportsRaf_?(this.clearTimersOnDispose_(),fn=bind(this,fn),id=window_default().requestAnimationFrame((function(){_this3.rafIds_.has(id)&&_this3.rafIds_.delete(id),fn()})),this.rafIds_.add(id),id):this.setTimeout(fn,1e3/60)},_proto.cancelAnimationFrame=function cancelAnimationFrame(id){return this.supportsRaf_?(this.rafIds_.has(id)&&(this.rafIds_.delete(id),window_default().cancelAnimationFrame(id)),id):this.clearTimeout(id)},_proto.clearTimersOnDispose_=function clearTimersOnDispose_(){var _this4=this;this.clearingTimersOnDispose_||(this.clearingTimersOnDispose_=!0,this.one("dispose",(function(){[["rafIds_","cancelAnimationFrame"],["setTimeoutIds_","clearTimeout"],["setIntervalIds_","clearInterval"]].forEach((function(_ref){var idName=_ref[0],cancelName=_ref[1];_this4[idName].forEach(_this4[cancelName],_this4)})),_this4.clearingTimersOnDispose_=!1})))},Component.registerComponent=function registerComponent(name,ComponentToRegister){if("string"!=typeof name||!name)throw new Error('Illegal component name, "'+name+'"; must be a non-empty string.');var reason,Tech=Component.getComponent("Tech"),isTech=Tech&&Tech.isTech(ComponentToRegister),isComp=Component===ComponentToRegister||Component.prototype.isPrototypeOf(ComponentToRegister.prototype);if(isTech||!isComp)throw reason=isTech?"techs must be registered using Tech.registerTech()":"must be a Component subclass",new Error('Illegal component, "'+name+'"; '+reason+".");name=toTitleCase(name),Component.components_||(Component.components_={});var Player=Component.getComponent("Player");if("Player"===name&&Player&&Player.players){var players=Player.players,playerNames=Object.keys(players);if(players&&playerNames.length>0&&playerNames.map((function(pname){return players[pname]})).every(Boolean))throw new Error("Can not register Player component after player has been created.")}return Component.components_[name]=ComponentToRegister,Component.components_[toLowerCase(name)]=ComponentToRegister,ComponentToRegister},Component.getComponent=function getComponent(name){if(name&&Component.components_)return Component.components_[name]},Component}();function video_es_inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,subClass.__proto__=superClass}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _construct(Parent,args,Class){return _construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function video_es_assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}Component.prototype.supportsRaf_="function"==typeof window_default().requestAnimationFrame&&"function"==typeof window_default().cancelAnimationFrame,Component.registerComponent("Component",Component);var match,USER_AGENT=window_default().navigator&&window_default().navigator.userAgent||"",webkitVersionMap=/AppleWebKit\/([\d.]+)/i.exec(USER_AGENT),appleWebkitVersion=webkitVersionMap?parseFloat(webkitVersionMap.pop()):null,IS_IPAD=/iPad/i.test(USER_AGENT),IS_IPHONE=/iPhone/i.test(USER_AGENT)&&!IS_IPAD,IS_IPOD=/iPod/i.test(USER_AGENT),IS_IOS=IS_IPHONE||IS_IPAD||IS_IPOD,IOS_VERSION=(match=USER_AGENT.match(/OS (\d+)_/i))&&match[1]?match[1]:null,IS_ANDROID=/Android/i.test(USER_AGENT),ANDROID_VERSION=function(){var match=USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if(!match)return null;var major=match[1]&&parseFloat(match[1]),minor=match[2]&&parseFloat(match[2]);return major&&minor?parseFloat(match[1]+"."+match[2]):major||null}(),IS_NATIVE_ANDROID=IS_ANDROID&&ANDROID_VERSION<5&&appleWebkitVersion<537,IS_FIREFOX=/Firefox/i.test(USER_AGENT),IS_EDGE=/Edge/i.test(USER_AGENT),IS_CHROME=!IS_EDGE&&(/Chrome/i.test(USER_AGENT)||/CriOS/i.test(USER_AGENT)),CHROME_VERSION=function(){var match=USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/);return match&&match[2]?parseFloat(match[2]):null}(),IE_VERSION=function(){var result=/MSIE\s(\d+)\.\d/.exec(USER_AGENT),version=result&&parseFloat(result[1]);return!version&&/Trident\/7.0/i.test(USER_AGENT)&&/rv:11.0/.test(USER_AGENT)&&(version=11),version}(),IS_SAFARI=/Safari/i.test(USER_AGENT)&&!IS_CHROME&&!IS_ANDROID&&!IS_EDGE,IS_ANY_SAFARI=(IS_SAFARI||IS_IOS)&&!IS_CHROME,IS_WINDOWS=/Windows/i.test(USER_AGENT),TOUCH_ENABLED=isReal()&&("ontouchstart"in window_default()||window_default().navigator.maxTouchPoints||window_default().DocumentTouch&&window_default().document instanceof window_default().DocumentTouch),browser=Object.freeze({IS_IPAD,IS_IPHONE,IS_IPOD,IS_IOS,IOS_VERSION,IS_ANDROID,ANDROID_VERSION,IS_NATIVE_ANDROID,IS_FIREFOX,IS_EDGE,IS_CHROME,CHROME_VERSION,IE_VERSION,IS_SAFARI,IS_ANY_SAFARI,IS_WINDOWS,TOUCH_ENABLED});function getRange(fnName,valueIndex,ranges,rangeIndex){return function rangeCheck(fnName,index,maxIndex){if("number"!=typeof index||index<0||index>maxIndex)throw new Error("Failed to execute '"+fnName+"' on 'TimeRanges': The index provided ("+index+") is non-numeric or out of bounds (0-"+maxIndex+").")}(fnName,rangeIndex,ranges.length-1),ranges[rangeIndex][valueIndex]}function createTimeRangesObj(ranges){return void 0===ranges||0===ranges.length?{length:0,start:function start(){throw new Error("This TimeRanges object is empty")},end:function end(){throw new Error("This TimeRanges object is empty")}}:{length:ranges.length,start:getRange.bind(null,"start",0,ranges),end:getRange.bind(null,"end",1,ranges)}}function createTimeRanges(start,end){return Array.isArray(start)?createTimeRangesObj(start):void 0===start||void 0===end?createTimeRangesObj():createTimeRangesObj([[start,end]])}function bufferedPercent(buffered,duration){var start,end,bufferedDuration=0;if(!duration)return 0;buffered&&buffered.length||(buffered=createTimeRanges(0,0));for(var i=0;i<buffered.length;i++)start=buffered.start(i),(end=buffered.end(i))>duration&&(end=duration),bufferedDuration+=end-start;return bufferedDuration/duration}for(var browserApi,FullscreenApi={prefixed:!0},apiMap=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror","fullscreen"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror","-webkit-full-screen"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror","-moz-full-screen"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError","-ms-fullscreen"]],specApi=apiMap[0],i=0;i<apiMap.length;i++)if(apiMap[i][1]in document_default()){browserApi=apiMap[i];break}if(browserApi){for(var _i=0;_i<browserApi.length;_i++)FullscreenApi[specApi[_i]]=browserApi[_i];FullscreenApi.prefixed=browserApi[0]!==specApi[0]}function MediaError(value){if(value instanceof MediaError)return value;"number"==typeof value?this.code=value:"string"==typeof value?this.message=value:video_es_isObject(value)&&("number"==typeof value.code&&(this.code=value.code),video_es_assign(this,value)),this.message||(this.message=MediaError.defaultMessages[this.code]||"")}MediaError.prototype.code=0,MediaError.prototype.message="",MediaError.prototype.status=null,MediaError.errorTypes=["MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED"],MediaError.defaultMessages={1:"You aborted the media playback",2:"A network error caused the media download to fail part-way.",3:"The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",4:"The media could not be loaded, either because the server or network failed or because the format is not supported.",5:"The media is encrypted and we do not have the keys to decrypt it."};for(var errNum=0;errNum<MediaError.errorTypes.length;errNum++)MediaError[MediaError.errorTypes[errNum]]=errNum,MediaError.prototype[MediaError.errorTypes[errNum]]=errNum;function isPromise(value){return null!=value&&"function"==typeof value.then}function silencePromise(value){isPromise(value)&&value.then(null,(function(e){}))}var trackToJson_=function trackToJson_(track){return["kind","label","language","id","inBandMetadataTrackDispatchType","mode","src"].reduce((function(acc,prop,i){return track[prop]&&(acc[prop]=track[prop]),acc}),{cues:track.cues&&Array.prototype.map.call(track.cues,(function(cue){return{startTime:cue.startTime,endTime:cue.endTime,text:cue.text,id:cue.id}}))})},textTrackConverter_textTracksToJson=function textTracksToJson(tech){var trackEls=tech.$$("track"),trackObjs=Array.prototype.map.call(trackEls,(function(t){return t.track}));return Array.prototype.map.call(trackEls,(function(trackEl){var json=trackToJson_(trackEl.track);return trackEl.src&&(json.src=trackEl.src),json})).concat(Array.prototype.filter.call(tech.textTracks(),(function(track){return-1===trackObjs.indexOf(track)})).map(trackToJson_))},textTrackConverter_jsonToTextTracks=function jsonToTextTracks(json,tech){return json.forEach((function(track){var addedTrack=tech.addRemoteTextTrack(track).track;!track.src&&track.cues&&track.cues.forEach((function(cue){return addedTrack.addCue(cue)}))})),tech.textTracks()},ModalDialog=function(_Component){function ModalDialog(player,options){var _this;return(_this=_Component.call(this,player,options)||this).opened_=_this.hasBeenOpened_=_this.hasBeenFilled_=!1,_this.closeable(!_this.options_.uncloseable),_this.content(_this.options_.content),_this.contentEl_=createEl("div",{className:"vjs-modal-dialog-content"},{role:"document"}),_this.descEl_=createEl("p",{className:"vjs-modal-dialog-description vjs-control-text",id:_this.el().getAttribute("aria-describedby")}),textContent(_this.descEl_,_this.description()),_this.el_.appendChild(_this.descEl_),_this.el_.appendChild(_this.contentEl_),_this}video_es_inheritsLoose(ModalDialog,_Component);var _proto=ModalDialog.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:this.buildCSSClass(),tabIndex:-1},{"aria-describedby":this.id()+"_description","aria-hidden":"true","aria-label":this.label(),role:"dialog"})},_proto.dispose=function dispose(){this.contentEl_=null,this.descEl_=null,this.previouslyActiveEl_=null,_Component.prototype.dispose.call(this)},_proto.buildCSSClass=function buildCSSClass(){return"vjs-modal-dialog vjs-hidden "+_Component.prototype.buildCSSClass.call(this)},_proto.label=function label(){return this.localize(this.options_.label||"Modal Window")},_proto.description=function description(){var desc=this.options_.description||this.localize("This is a modal window.");return this.closeable()&&(desc+=" "+this.localize("This modal can be closed by pressing the Escape key or activating the close button.")),desc},_proto.open=function open(){if(!this.opened_){var player=this.player();this.trigger("beforemodalopen"),this.opened_=!0,(this.options_.fillAlways||!this.hasBeenOpened_&&!this.hasBeenFilled_)&&this.fill(),this.wasPlaying_=!player.paused(),this.options_.pauseOnOpen&&this.wasPlaying_&&player.pause(),this.on("keydown",this.handleKeyDown),this.hadControls_=player.controls(),player.controls(!1),this.show(),this.conditionalFocus_(),this.el().setAttribute("aria-hidden","false"),this.trigger("modalopen"),this.hasBeenOpened_=!0}},_proto.opened=function opened(value){return"boolean"==typeof value&&this[value?"open":"close"](),this.opened_},_proto.close=function close(){if(this.opened_){var player=this.player();this.trigger("beforemodalclose"),this.opened_=!1,this.wasPlaying_&&this.options_.pauseOnOpen&&player.play(),this.off("keydown",this.handleKeyDown),this.hadControls_&&player.controls(!0),this.hide(),this.el().setAttribute("aria-hidden","true"),this.trigger("modalclose"),this.conditionalBlur_(),this.options_.temporary&&this.dispose()}},_proto.closeable=function closeable(value){if("boolean"==typeof value){var closeable=this.closeable_=!!value,close=this.getChild("closeButton");if(closeable&&!close){var temp=this.contentEl_;this.contentEl_=this.el_,close=this.addChild("closeButton",{controlText:"Close Modal Dialog"}),this.contentEl_=temp,this.on(close,"close",this.close)}!closeable&&close&&(this.off(close,"close",this.close),this.removeChild(close),close.dispose())}return this.closeable_},_proto.fill=function fill(){this.fillWith(this.content())},_proto.fillWith=function fillWith(content){var contentEl=this.contentEl(),parentEl=contentEl.parentNode,nextSiblingEl=contentEl.nextSibling;this.trigger("beforemodalfill"),this.hasBeenFilled_=!0,parentEl.removeChild(contentEl),this.empty(),insertContent(contentEl,content),this.trigger("modalfill"),nextSiblingEl?parentEl.insertBefore(contentEl,nextSiblingEl):parentEl.appendChild(contentEl);var closeButton=this.getChild("closeButton");closeButton&&parentEl.appendChild(closeButton.el_)},_proto.empty=function empty(){this.trigger("beforemodalempty"),emptyEl(this.contentEl()),this.trigger("modalempty")},_proto.content=function content(value){return void 0!==value&&(this.content_=value),this.content_},_proto.conditionalFocus_=function conditionalFocus_(){var activeEl=document_default().activeElement,playerEl=this.player_.el_;this.previouslyActiveEl_=null,(playerEl.contains(activeEl)||playerEl===activeEl)&&(this.previouslyActiveEl_=activeEl,this.focus())},_proto.conditionalBlur_=function conditionalBlur_(){this.previouslyActiveEl_&&(this.previouslyActiveEl_.focus(),this.previouslyActiveEl_=null)},_proto.handleKeyDown=function handleKeyDown(event){if(event.stopPropagation(),keycode_default().isEventKey(event,"Escape")&&this.closeable())return event.preventDefault(),void this.close();if(keycode_default().isEventKey(event,"Tab")){for(var focusIndex,focusableEls=this.focusableEls_(),activeEl=this.el_.querySelector(":focus"),i=0;i<focusableEls.length;i++)if(activeEl===focusableEls[i]){focusIndex=i;break}document_default().activeElement===this.el_&&(focusIndex=0),event.shiftKey&&0===focusIndex?(focusableEls[focusableEls.length-1].focus(),event.preventDefault()):event.shiftKey||focusIndex!==focusableEls.length-1||(focusableEls[0].focus(),event.preventDefault())}},_proto.focusableEls_=function focusableEls_(){var allChildren=this.el_.querySelectorAll("*");return Array.prototype.filter.call(allChildren,(function(child){return(child instanceof window_default().HTMLAnchorElement||child instanceof window_default().HTMLAreaElement)&&child.hasAttribute("href")||(child instanceof window_default().HTMLInputElement||child instanceof window_default().HTMLSelectElement||child instanceof window_default().HTMLTextAreaElement||child instanceof window_default().HTMLButtonElement)&&!child.hasAttribute("disabled")||child instanceof window_default().HTMLIFrameElement||child instanceof window_default().HTMLObjectElement||child instanceof window_default().HTMLEmbedElement||child.hasAttribute("tabindex")&&-1!==child.getAttribute("tabindex")||child.hasAttribute("contenteditable")}))},ModalDialog}(Component);ModalDialog.prototype.options_={pauseOnOpen:!0,temporary:!0},Component.registerComponent("ModalDialog",ModalDialog);var TrackList=function(_EventTarget){function TrackList(tracks){var _this;void 0===tracks&&(tracks=[]),(_this=_EventTarget.call(this)||this).tracks_=[],Object.defineProperty(video_es_assertThisInitialized(_this),"length",{get:function get(){return this.tracks_.length}});for(var i=0;i<tracks.length;i++)_this.addTrack(tracks[i]);return _this}video_es_inheritsLoose(TrackList,_EventTarget);var _proto=TrackList.prototype;return _proto.addTrack=function addTrack(track){var index=this.tracks_.length;""+index in this||Object.defineProperty(this,index,{get:function get(){return this.tracks_[index]}}),-1===this.tracks_.indexOf(track)&&(this.tracks_.push(track),this.trigger({track,type:"addtrack",target:this}))},_proto.removeTrack=function removeTrack(rtrack){for(var track,i=0,l=this.length;i<l;i++)if(this[i]===rtrack){(track=this[i]).off&&track.off(),this.tracks_.splice(i,1);break}track&&this.trigger({track,type:"removetrack",target:this})},_proto.getTrackById=function getTrackById(id){for(var result=null,i=0,l=this.length;i<l;i++){var track=this[i];if(track.id===id){result=track;break}}return result},TrackList}(EventTarget);for(var video_es_event in TrackList.prototype.allowedEvents_={change:"change",addtrack:"addtrack",removetrack:"removetrack"},TrackList.prototype.allowedEvents_)TrackList.prototype["on"+video_es_event]=null;var disableOthers=function disableOthers(list,track){for(var i=0;i<list.length;i++)Object.keys(list[i]).length&&track.id!==list[i].id&&(list[i].enabled=!1)},AudioTrackList=function(_TrackList){function AudioTrackList(tracks){var _this;void 0===tracks&&(tracks=[]);for(var i=tracks.length-1;i>=0;i--)if(tracks[i].enabled){disableOthers(tracks,tracks[i]);break}return(_this=_TrackList.call(this,tracks)||this).changing_=!1,_this}video_es_inheritsLoose(AudioTrackList,_TrackList);var _proto=AudioTrackList.prototype;return _proto.addTrack=function addTrack(track){var _this2=this;track.enabled&&disableOthers(this,track),_TrackList.prototype.addTrack.call(this,track),track.addEventListener&&(track.enabledChange_=function(){_this2.changing_||(_this2.changing_=!0,disableOthers(_this2,track),_this2.changing_=!1,_this2.trigger("change"))},track.addEventListener("enabledchange",track.enabledChange_))},_proto.removeTrack=function removeTrack(rtrack){_TrackList.prototype.removeTrack.call(this,rtrack),rtrack.removeEventListener&&rtrack.enabledChange_&&(rtrack.removeEventListener("enabledchange",rtrack.enabledChange_),rtrack.enabledChange_=null)},AudioTrackList}(TrackList),disableOthers$1=function disableOthers(list,track){for(var i=0;i<list.length;i++)Object.keys(list[i]).length&&track.id!==list[i].id&&(list[i].selected=!1)},VideoTrackList=function(_TrackList){function VideoTrackList(tracks){var _this;void 0===tracks&&(tracks=[]);for(var i=tracks.length-1;i>=0;i--)if(tracks[i].selected){disableOthers$1(tracks,tracks[i]);break}return(_this=_TrackList.call(this,tracks)||this).changing_=!1,Object.defineProperty(video_es_assertThisInitialized(_this),"selectedIndex",{get:function get(){for(var _i=0;_i<this.length;_i++)if(this[_i].selected)return _i;return-1},set:function set(){}}),_this}video_es_inheritsLoose(VideoTrackList,_TrackList);var _proto=VideoTrackList.prototype;return _proto.addTrack=function addTrack(track){var _this2=this;track.selected&&disableOthers$1(this,track),_TrackList.prototype.addTrack.call(this,track),track.addEventListener&&(track.selectedChange_=function(){_this2.changing_||(_this2.changing_=!0,disableOthers$1(_this2,track),_this2.changing_=!1,_this2.trigger("change"))},track.addEventListener("selectedchange",track.selectedChange_))},_proto.removeTrack=function removeTrack(rtrack){_TrackList.prototype.removeTrack.call(this,rtrack),rtrack.removeEventListener&&rtrack.selectedChange_&&(rtrack.removeEventListener("selectedchange",rtrack.selectedChange_),rtrack.selectedChange_=null)},VideoTrackList}(TrackList),TextTrackList=function(_TrackList){function TextTrackList(){return _TrackList.apply(this,arguments)||this}video_es_inheritsLoose(TextTrackList,_TrackList);var _proto=TextTrackList.prototype;return _proto.addTrack=function addTrack(track){var _this=this;_TrackList.prototype.addTrack.call(this,track),this.queueChange_||(this.queueChange_=function(){return _this.queueTrigger("change")}),this.triggerSelectedlanguagechange||(this.triggerSelectedlanguagechange_=function(){return _this.trigger("selectedlanguagechange")}),track.addEventListener("modechange",this.queueChange_);-1===["metadata","chapters"].indexOf(track.kind)&&track.addEventListener("modechange",this.triggerSelectedlanguagechange_)},_proto.removeTrack=function removeTrack(rtrack){_TrackList.prototype.removeTrack.call(this,rtrack),rtrack.removeEventListener&&(this.queueChange_&&rtrack.removeEventListener("modechange",this.queueChange_),this.selectedlanguagechange_&&rtrack.removeEventListener("modechange",this.triggerSelectedlanguagechange_))},TextTrackList}(TrackList),HtmlTrackElementList=function(){function HtmlTrackElementList(trackElements){void 0===trackElements&&(trackElements=[]),this.trackElements_=[],Object.defineProperty(this,"length",{get:function get(){return this.trackElements_.length}});for(var i=0,length=trackElements.length;i<length;i++)this.addTrackElement_(trackElements[i])}var _proto=HtmlTrackElementList.prototype;return _proto.addTrackElement_=function addTrackElement_(trackElement){var index=this.trackElements_.length;""+index in this||Object.defineProperty(this,index,{get:function get(){return this.trackElements_[index]}}),-1===this.trackElements_.indexOf(trackElement)&&this.trackElements_.push(trackElement)},_proto.getTrackElementByTrack_=function getTrackElementByTrack_(track){for(var trackElement_,i=0,length=this.trackElements_.length;i<length;i++)if(track===this.trackElements_[i].track){trackElement_=this.trackElements_[i];break}return trackElement_},_proto.removeTrackElement_=function removeTrackElement_(trackElement){for(var i=0,length=this.trackElements_.length;i<length;i++)if(trackElement===this.trackElements_[i]){this.trackElements_[i].track&&"function"==typeof this.trackElements_[i].track.off&&this.trackElements_[i].track.off(),"function"==typeof this.trackElements_[i].off&&this.trackElements_[i].off(),this.trackElements_.splice(i,1);break}},HtmlTrackElementList}(),TextTrackCueList=function(){function TextTrackCueList(cues){TextTrackCueList.prototype.setCues_.call(this,cues),Object.defineProperty(this,"length",{get:function get(){return this.length_}})}var _proto=TextTrackCueList.prototype;return _proto.setCues_=function setCues_(cues){var oldLength=this.length||0,i=0,l=cues.length;this.cues_=cues,this.length_=cues.length;var defineProp=function defineProp(index){""+index in this||Object.defineProperty(this,""+index,{get:function get(){return this.cues_[index]}})};if(oldLength<l)for(i=oldLength;i<l;i++)defineProp.call(this,i)},_proto.getCueById=function getCueById(id){for(var result=null,i=0,l=this.length;i<l;i++){var cue=this[i];if(cue.id===id){result=cue;break}}return result},TextTrackCueList}(),VideoTrackKind={alternative:"alternative",captions:"captions",main:"main",sign:"sign",subtitles:"subtitles",commentary:"commentary"},AudioTrackKind={alternative:"alternative",descriptions:"descriptions",main:"main","main-desc":"main-desc",translation:"translation",commentary:"commentary"},TextTrackKind={subtitles:"subtitles",captions:"captions",descriptions:"descriptions",chapters:"chapters",metadata:"metadata"},TextTrackMode={disabled:"disabled",hidden:"hidden",showing:"showing"},Track=function(_EventTarget){function Track(options){var _this;void 0===options&&(options={}),_this=_EventTarget.call(this)||this;var trackProps={id:options.id||"vjs_track_"+newGUID(),kind:options.kind||"",label:options.label||"",language:options.language||""},_loop=function _loop(key){Object.defineProperty(video_es_assertThisInitialized(_this),key,{get:function get(){return trackProps[key]},set:function set(){}})};for(var key in trackProps)_loop(key);return _this}return video_es_inheritsLoose(Track,_EventTarget),Track}(EventTarget),parseUrl=function parseUrl(url){var props=["protocol","hostname","port","pathname","search","hash","host"],a=document_default().createElement("a");a.href=url;var div,addToBody=""===a.host&&"file:"!==a.protocol;addToBody&&((div=document_default().createElement("div")).innerHTML='<a href="'+url+'"></a>',a=div.firstChild,div.setAttribute("style","display:none; position:absolute;"),document_default().body.appendChild(div));for(var details={},i=0;i<props.length;i++)details[props[i]]=a[props[i]];return"http:"===details.protocol&&(details.host=details.host.replace(/:80$/,"")),"https:"===details.protocol&&(details.host=details.host.replace(/:443$/,"")),details.protocol||(details.protocol=window_default().location.protocol),addToBody&&document_default().body.removeChild(div),details},getAbsoluteURL=function getAbsoluteURL(url){if(!url.match(/^https?:\/\//)){var div=document_default().createElement("div");div.innerHTML='<a href="'+url+'">x</a>',url=div.firstChild.href}return url},getFileExtension=function getFileExtension(path){if("string"==typeof path){var pathParts=/^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/.exec(path);if(pathParts)return pathParts.pop().toLowerCase()}return""},isCrossOrigin=function isCrossOrigin(url){var winLoc=window_default().location,urlInfo=parseUrl(url);return(":"===urlInfo.protocol?winLoc.protocol:urlInfo.protocol)+urlInfo.host!==winLoc.protocol+winLoc.host},Url=Object.freeze({parseUrl,getAbsoluteURL,getFileExtension,isCrossOrigin}),parseCues=function parseCues(srcContent,track){var parser=new(window_default().WebVTT.Parser)(window_default(),window_default().vttjs,window_default().WebVTT.StringDecoder()),errors=[];parser.oncue=function(cue){track.addCue(cue)},parser.onparsingerror=function(error){errors.push(error)},parser.onflush=function(){track.trigger({type:"loadeddata",target:track})},parser.parse(srcContent),errors.length>0&&(window_default().console&&window_default().console.groupCollapsed&&window_default().console.groupCollapsed("Text Track parsing errors for "+track.src),errors.forEach((function(error){return log.error(error)})),window_default().console&&window_default().console.groupEnd&&window_default().console.groupEnd()),parser.flush()},TextTrack=function(_Track){function TextTrack(options){var _this;if(void 0===options&&(options={}),!options.tech)throw new Error("A tech was not provided.");var settings=mergeOptions(options,{kind:TextTrackKind[options.kind]||"subtitles",language:options.language||options.srclang||""}),mode=TextTrackMode[settings.mode]||"disabled",default_=settings.default;"metadata"!==settings.kind&&"chapters"!==settings.kind||(mode="hidden"),(_this=_Track.call(this,settings)||this).tech_=settings.tech,_this.cues_=[],_this.activeCues_=[];var cues=new TextTrackCueList(_this.cues_),activeCues=new TextTrackCueList(_this.activeCues_),changed=!1,timeupdateHandler=bind(video_es_assertThisInitialized(_this),(function(){this.activeCues=this.activeCues,changed&&(this.trigger("cuechange"),changed=!1)}));return"disabled"!==mode&&_this.tech_.ready((function(){_this.tech_.on("timeupdate",timeupdateHandler)}),!0),Object.defineProperties(video_es_assertThisInitialized(_this),{default:{get:function get(){return default_},set:function set(){}},mode:{get:function get(){return mode},set:function set(newMode){var _this2=this;TextTrackMode[newMode]&&("disabled"!==(mode=newMode)?this.tech_.ready((function(){_this2.tech_.on("timeupdate",timeupdateHandler)}),!0):this.tech_.off("timeupdate",timeupdateHandler),this.trigger("modechange"))}},cues:{get:function get(){return this.loaded_?cues:null},set:function set(){}},activeCues:{get:function get(){if(!this.loaded_)return null;if(0===this.cues.length)return activeCues;for(var ct=this.tech_.currentTime(),active=[],i=0,l=this.cues.length;i<l;i++){var cue=this.cues[i];(cue.startTime<=ct&&cue.endTime>=ct||cue.startTime===cue.endTime&&cue.startTime<=ct&&cue.startTime+.5>=ct)&&active.push(cue)}if(changed=!1,active.length!==this.activeCues_.length)changed=!0;else for(var _i=0;_i<active.length;_i++)-1===this.activeCues_.indexOf(active[_i])&&(changed=!0);return this.activeCues_=active,activeCues.setCues_(this.activeCues_),activeCues},set:function set(){}}}),settings.src?(_this.src=settings.src,function loadTrack(src,track){var opts={uri:src},crossOrigin=isCrossOrigin(src);crossOrigin&&(opts.cors=crossOrigin),xhr_default()(opts,bind(this,(function(err,response,responseBody){if(err)return log.error(err,response);track.loaded_=!0,"function"!=typeof window_default().WebVTT?track.tech_&&track.tech_.any(["vttjsloaded","vttjserror"],(function(event){if("vttjserror"!==event.type)return parseCues(responseBody,track);log.error("vttjs failed to load, stopping trying to process "+track.src)})):parseCues(responseBody,track)})))}(settings.src,video_es_assertThisInitialized(_this))):_this.loaded_=!0,_this}video_es_inheritsLoose(TextTrack,_Track);var _proto=TextTrack.prototype;return _proto.addCue=function addCue(originalCue){var cue=originalCue;if(window_default().vttjs&&!(originalCue instanceof window_default().vttjs.VTTCue)){for(var prop in cue=new(window_default().vttjs.VTTCue)(originalCue.startTime,originalCue.endTime,originalCue.text),originalCue)prop in cue||(cue[prop]=originalCue[prop]);cue.id=originalCue.id,cue.originalCue_=originalCue}for(var tracks=this.tech_.textTracks(),i=0;i<tracks.length;i++)tracks[i]!==this&&tracks[i].removeCue(cue);this.cues_.push(cue),this.cues.setCues_(this.cues_)},_proto.removeCue=function removeCue(_removeCue){for(var i=this.cues_.length;i--;){var cue=this.cues_[i];if(cue===_removeCue||cue.originalCue_&&cue.originalCue_===_removeCue){this.cues_.splice(i,1),this.cues.setCues_(this.cues_);break}}},TextTrack}(Track);TextTrack.prototype.allowedEvents_={cuechange:"cuechange"};var AudioTrack=function(_Track){function AudioTrack(options){var _this;void 0===options&&(options={});var settings=mergeOptions(options,{kind:AudioTrackKind[options.kind]||""});_this=_Track.call(this,settings)||this;var enabled=!1;return Object.defineProperty(video_es_assertThisInitialized(_this),"enabled",{get:function get(){return enabled},set:function set(newEnabled){"boolean"==typeof newEnabled&&newEnabled!==enabled&&(enabled=newEnabled,this.trigger("enabledchange"))}}),settings.enabled&&(_this.enabled=settings.enabled),_this.loaded_=!0,_this}return video_es_inheritsLoose(AudioTrack,_Track),AudioTrack}(Track),VideoTrack=function(_Track){function VideoTrack(options){var _this;void 0===options&&(options={});var settings=mergeOptions(options,{kind:VideoTrackKind[options.kind]||""});_this=_Track.call(this,settings)||this;var selected=!1;return Object.defineProperty(video_es_assertThisInitialized(_this),"selected",{get:function get(){return selected},set:function set(newSelected){"boolean"==typeof newSelected&&newSelected!==selected&&(selected=newSelected,this.trigger("selectedchange"))}}),settings.selected&&(_this.selected=settings.selected),_this}return video_es_inheritsLoose(VideoTrack,_Track),VideoTrack}(Track),HTMLTrackElement=function(_EventTarget){function HTMLTrackElement(options){var _this,readyState;void 0===options&&(options={}),_this=_EventTarget.call(this)||this;var track=new TextTrack(options);return _this.kind=track.kind,_this.src=track.src,_this.srclang=track.language,_this.label=track.label,_this.default=track.default,Object.defineProperties(video_es_assertThisInitialized(_this),{readyState:{get:function get(){return readyState}},track:{get:function get(){return track}}}),readyState=0,track.addEventListener("loadeddata",(function(){readyState=2,_this.trigger({type:"load",target:video_es_assertThisInitialized(_this)})})),_this}return video_es_inheritsLoose(HTMLTrackElement,_EventTarget),HTMLTrackElement}(EventTarget);HTMLTrackElement.prototype.allowedEvents_={load:"load"},HTMLTrackElement.NONE=0,HTMLTrackElement.LOADING=1,HTMLTrackElement.LOADED=2,HTMLTrackElement.ERROR=3;var NORMAL={audio:{ListClass:AudioTrackList,TrackClass:AudioTrack,capitalName:"Audio"},video:{ListClass:VideoTrackList,TrackClass:VideoTrack,capitalName:"Video"},text:{ListClass:TextTrackList,TrackClass:TextTrack,capitalName:"Text"}};Object.keys(NORMAL).forEach((function(type){NORMAL[type].getterName=type+"Tracks",NORMAL[type].privateName=type+"Tracks_"}));var REMOTE={remoteText:{ListClass:TextTrackList,TrackClass:TextTrack,capitalName:"RemoteText",getterName:"remoteTextTracks",privateName:"remoteTextTracks_"},remoteTextEl:{ListClass:HtmlTrackElementList,TrackClass:HTMLTrackElement,capitalName:"RemoteTextTrackEls",getterName:"remoteTextTrackEls",privateName:"remoteTextTrackEls_"}},ALL=mergeOptions(NORMAL,REMOTE);REMOTE.names=Object.keys(REMOTE),NORMAL.names=Object.keys(NORMAL),ALL.names=[].concat(REMOTE.names).concat(NORMAL.names);var Tech=function(_Component){function Tech(options,ready){var _this;return void 0===options&&(options={}),void 0===ready&&(ready=function ready(){}),options.reportTouchActivity=!1,(_this=_Component.call(this,null,options,ready)||this).hasStarted_=!1,_this.on("playing",(function(){this.hasStarted_=!0})),_this.on("loadstart",(function(){this.hasStarted_=!1})),ALL.names.forEach((function(name){var props=ALL[name];options&&options[props.getterName]&&(_this[props.privateName]=options[props.getterName])})),_this.featuresProgressEvents||_this.manualProgressOn(),_this.featuresTimeupdateEvents||_this.manualTimeUpdatesOn(),["Text","Audio","Video"].forEach((function(track){!1===options["native"+track+"Tracks"]&&(_this["featuresNative"+track+"Tracks"]=!1)})),!1===options.nativeCaptions||!1===options.nativeTextTracks?_this.featuresNativeTextTracks=!1:!0!==options.nativeCaptions&&!0!==options.nativeTextTracks||(_this.featuresNativeTextTracks=!0),_this.featuresNativeTextTracks||_this.emulateTextTracks(),_this.autoRemoteTextTracks_=new ALL.text.ListClass,_this.initTrackListeners(),options.nativeControlsForTouch||_this.emitTapEvents(),_this.constructor&&(_this.name_=_this.constructor.name||"Unknown Tech"),_this}video_es_inheritsLoose(Tech,_Component);var _proto=Tech.prototype;return _proto.triggerSourceset=function triggerSourceset(src){var _this2=this;this.isReady_||this.one("ready",(function(){return _this2.setTimeout((function(){return _this2.triggerSourceset(src)}),1)})),this.trigger({src,type:"sourceset"})},_proto.manualProgressOn=function manualProgressOn(){this.on("durationchange",this.onDurationChange),this.manualProgress=!0,this.one("ready",this.trackProgress)},_proto.manualProgressOff=function manualProgressOff(){this.manualProgress=!1,this.stopTrackingProgress(),this.off("durationchange",this.onDurationChange)},_proto.trackProgress=function trackProgress(event){this.stopTrackingProgress(),this.progressInterval=this.setInterval(bind(this,(function(){var numBufferedPercent=this.bufferedPercent();this.bufferedPercent_!==numBufferedPercent&&this.trigger("progress"),this.bufferedPercent_=numBufferedPercent,1===numBufferedPercent&&this.stopTrackingProgress()})),500)},_proto.onDurationChange=function onDurationChange(event){this.duration_=this.duration()},_proto.buffered=function buffered(){return createTimeRanges(0,0)},_proto.bufferedPercent=function bufferedPercent$1(){return bufferedPercent(this.buffered(),this.duration_)},_proto.stopTrackingProgress=function stopTrackingProgress(){this.clearInterval(this.progressInterval)},_proto.manualTimeUpdatesOn=function manualTimeUpdatesOn(){this.manualTimeUpdates=!0,this.on("play",this.trackCurrentTime),this.on("pause",this.stopTrackingCurrentTime)},_proto.manualTimeUpdatesOff=function manualTimeUpdatesOff(){this.manualTimeUpdates=!1,this.stopTrackingCurrentTime(),this.off("play",this.trackCurrentTime),this.off("pause",this.stopTrackingCurrentTime)},_proto.trackCurrentTime=function trackCurrentTime(){this.currentTimeInterval&&this.stopTrackingCurrentTime(),this.currentTimeInterval=this.setInterval((function(){this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})}),250)},_proto.stopTrackingCurrentTime=function stopTrackingCurrentTime(){this.clearInterval(this.currentTimeInterval),this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},_proto.dispose=function dispose(){this.clearTracks(NORMAL.names),this.manualProgress&&this.manualProgressOff(),this.manualTimeUpdates&&this.manualTimeUpdatesOff(),_Component.prototype.dispose.call(this)},_proto.clearTracks=function clearTracks(types){var _this3=this;(types=[].concat(types)).forEach((function(type){for(var list=_this3[type+"Tracks"]()||[],i=list.length;i--;){var track=list[i];"text"===type&&_this3.removeRemoteTextTrack(track),list.removeTrack(track)}}))},_proto.cleanupAutoTextTracks=function cleanupAutoTextTracks(){for(var list=this.autoRemoteTextTracks_||[],i=list.length;i--;){var track=list[i];this.removeRemoteTextTrack(track)}},_proto.reset=function reset(){},_proto.error=function error(err){return void 0!==err&&(this.error_=new MediaError(err),this.trigger("error")),this.error_},_proto.played=function played(){return this.hasStarted_?createTimeRanges(0,0):createTimeRanges()},_proto.setCurrentTime=function setCurrentTime(){this.manualTimeUpdates&&this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},_proto.initTrackListeners=function initTrackListeners(){var _this4=this;NORMAL.names.forEach((function(name){var props=NORMAL[name],trackListChanges=function trackListChanges(){_this4.trigger(name+"trackchange")},tracks=_this4[props.getterName]();tracks.addEventListener("removetrack",trackListChanges),tracks.addEventListener("addtrack",trackListChanges),_this4.on("dispose",(function(){tracks.removeEventListener("removetrack",trackListChanges),tracks.removeEventListener("addtrack",trackListChanges)}))}))},_proto.addWebVttScript_=function addWebVttScript_(){var _this5=this;if(!window_default().WebVTT)if(document_default().body.contains(this.el())){if(!this.options_["vtt.js"]&&isPlain(browser_index_default())&&Object.keys(browser_index_default()).length>0)return void this.trigger("vttjsloaded");var script=document_default().createElement("script");script.src=this.options_["vtt.js"]||"https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js",script.onload=function(){_this5.trigger("vttjsloaded")},script.onerror=function(){_this5.trigger("vttjserror")},this.on("dispose",(function(){script.onload=null,script.onerror=null})),window_default().WebVTT=!0,this.el().parentNode.appendChild(script)}else this.ready(this.addWebVttScript_)},_proto.emulateTextTracks=function emulateTextTracks(){var _this6=this,tracks=this.textTracks(),remoteTracks=this.remoteTextTracks(),handleAddTrack=function handleAddTrack(e){return tracks.addTrack(e.track)},handleRemoveTrack=function handleRemoveTrack(e){return tracks.removeTrack(e.track)};remoteTracks.on("addtrack",handleAddTrack),remoteTracks.on("removetrack",handleRemoveTrack),this.addWebVttScript_();var updateDisplay=function updateDisplay(){return _this6.trigger("texttrackchange")},textTracksChanges=function textTracksChanges(){updateDisplay();for(var i=0;i<tracks.length;i++){var track=tracks[i];track.removeEventListener("cuechange",updateDisplay),"showing"===track.mode&&track.addEventListener("cuechange",updateDisplay)}};textTracksChanges(),tracks.addEventListener("change",textTracksChanges),tracks.addEventListener("addtrack",textTracksChanges),tracks.addEventListener("removetrack",textTracksChanges),this.on("dispose",(function(){remoteTracks.off("addtrack",handleAddTrack),remoteTracks.off("removetrack",handleRemoveTrack),tracks.removeEventListener("change",textTracksChanges),tracks.removeEventListener("addtrack",textTracksChanges),tracks.removeEventListener("removetrack",textTracksChanges);for(var i=0;i<tracks.length;i++){tracks[i].removeEventListener("cuechange",updateDisplay)}}))},_proto.addTextTrack=function addTextTrack(kind,label,language){if(!kind)throw new Error("TextTrack kind is required but was not provided");return function createTrackHelper(self,kind,label,language,options){void 0===options&&(options={});var tracks=self.textTracks();options.kind=kind,label&&(options.label=label),language&&(options.language=language),options.tech=self;var track=new ALL.text.TrackClass(options);return tracks.addTrack(track),track}(this,kind,label,language)},_proto.createRemoteTextTrack=function createRemoteTextTrack(options){var track=mergeOptions(options,{tech:this});return new REMOTE.remoteTextEl.TrackClass(track)},_proto.addRemoteTextTrack=function addRemoteTextTrack(options,manualCleanup){var _this7=this;void 0===options&&(options={});var htmlTrackElement=this.createRemoteTextTrack(options);return!0!==manualCleanup&&!1!==manualCleanup&&(log.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'),manualCleanup=!0),this.remoteTextTrackEls().addTrackElement_(htmlTrackElement),this.remoteTextTracks().addTrack(htmlTrackElement.track),!0!==manualCleanup&&this.ready((function(){return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track)})),htmlTrackElement},_proto.removeRemoteTextTrack=function removeRemoteTextTrack(track){var trackElement=this.remoteTextTrackEls().getTrackElementByTrack_(track);this.remoteTextTrackEls().removeTrackElement_(trackElement),this.remoteTextTracks().removeTrack(track),this.autoRemoteTextTracks_.removeTrack(track)},_proto.getVideoPlaybackQuality=function getVideoPlaybackQuality(){return{}},_proto.requestPictureInPicture=function requestPictureInPicture(){var PromiseClass=this.options_.Promise||window_default().Promise;if(PromiseClass)return PromiseClass.reject()},_proto.setPoster=function setPoster(){},_proto.playsinline=function playsinline(){},_proto.setPlaysinline=function setPlaysinline(){},_proto.overrideNativeAudioTracks=function overrideNativeAudioTracks(){},_proto.overrideNativeVideoTracks=function overrideNativeVideoTracks(){},_proto.canPlayType=function canPlayType(){return""},Tech.canPlayType=function canPlayType(){return""},Tech.canPlaySource=function canPlaySource(srcObj,options){return Tech.canPlayType(srcObj.type)},Tech.isTech=function isTech(component){return component.prototype instanceof Tech||component instanceof Tech||component===Tech},Tech.registerTech=function registerTech(name,tech){if(Tech.techs_||(Tech.techs_={}),!Tech.isTech(tech))throw new Error("Tech "+name+" must be a Tech");if(!Tech.canPlayType)throw new Error("Techs must have a static canPlayType method on them");if(!Tech.canPlaySource)throw new Error("Techs must have a static canPlaySource method on them");return name=toTitleCase(name),Tech.techs_[name]=tech,Tech.techs_[toLowerCase(name)]=tech,"Tech"!==name&&Tech.defaultTechOrder_.push(name),tech},Tech.getTech=function getTech(name){if(name)return Tech.techs_&&Tech.techs_[name]?Tech.techs_[name]:(name=toTitleCase(name),window_default()&&window_default().videojs&&window_default().videojs[name]?(log.warn("The "+name+" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"),window_default().videojs[name]):void 0)},Tech}(Component);ALL.names.forEach((function(name){var props=ALL[name];Tech.prototype[props.getterName]=function(){return this[props.privateName]=this[props.privateName]||new props.ListClass,this[props.privateName]}})),Tech.prototype.featuresVolumeControl=!0,Tech.prototype.featuresMuteControl=!0,Tech.prototype.featuresFullscreenResize=!1,Tech.prototype.featuresPlaybackRate=!1,Tech.prototype.featuresProgressEvents=!1,Tech.prototype.featuresSourceset=!1,Tech.prototype.featuresTimeupdateEvents=!1,Tech.prototype.featuresNativeTextTracks=!1,Tech.withSourceHandlers=function(_Tech){_Tech.registerSourceHandler=function(handler,index){var handlers=_Tech.sourceHandlers;handlers||(handlers=_Tech.sourceHandlers=[]),void 0===index&&(index=handlers.length),handlers.splice(index,0,handler)},_Tech.canPlayType=function(type){for(var can,handlers=_Tech.sourceHandlers||[],i=0;i<handlers.length;i++)if(can=handlers[i].canPlayType(type))return can;return""},_Tech.selectSourceHandler=function(source,options){for(var handlers=_Tech.sourceHandlers||[],i=0;i<handlers.length;i++)if(handlers[i].canHandleSource(source,options))return handlers[i];return null},_Tech.canPlaySource=function(srcObj,options){var sh=_Tech.selectSourceHandler(srcObj,options);return sh?sh.canHandleSource(srcObj,options):""};["seekable","seeking","duration"].forEach((function(fnName){var originalFn=this[fnName];"function"==typeof originalFn&&(this[fnName]=function(){return this.sourceHandler_&&this.sourceHandler_[fnName]?this.sourceHandler_[fnName].apply(this.sourceHandler_,arguments):originalFn.apply(this,arguments)})}),_Tech.prototype),_Tech.prototype.setSource=function(source){var sh=_Tech.selectSourceHandler(source,this.options_);sh||(_Tech.nativeSourceHandler?sh=_Tech.nativeSourceHandler:log.error("No source handler found for the current source.")),this.disposeSourceHandler(),this.off("dispose",this.disposeSourceHandler),sh!==_Tech.nativeSourceHandler&&(this.currentSource_=source),this.sourceHandler_=sh.handleSource(source,this,this.options_),this.one("dispose",this.disposeSourceHandler)},_Tech.prototype.disposeSourceHandler=function(){this.currentSource_&&(this.clearTracks(["audio","video"]),this.currentSource_=null),this.cleanupAutoTextTracks(),this.sourceHandler_&&(this.sourceHandler_.dispose&&this.sourceHandler_.dispose(),this.sourceHandler_=null)}},Component.registerComponent("Tech",Tech),Tech.registerTech("Tech",Tech),Tech.defaultTechOrder_=[];var middlewares={},middlewareInstances={},TERMINATOR={};function setSource(player,src,next){player.setTimeout((function(){return setSourceHelper(src,middlewares[src.type],next,player)}),1)}function mediate(middleware,tech,method,arg){void 0===arg&&(arg=null);var callMethod="call"+toTitleCase(method),middlewareValue=middleware.reduce(middlewareIterator(callMethod),arg),terminated=middlewareValue===TERMINATOR,returnValue=terminated?null:tech[method](middlewareValue);return function executeRight(mws,method,value,terminated){for(var i=mws.length-1;i>=0;i--){var mw=mws[i];mw[method]&&mw[method](terminated,value)}}(middleware,method,returnValue,terminated),returnValue}var allowedGetters={buffered:1,currentTime:1,duration:1,seekable:1,played:1,paused:1,volume:1},allowedSetters={setCurrentTime:1,setVolume:1},allowedMediators={play:1,pause:1};function middlewareIterator(method){return function(value,mw){return value===TERMINATOR?TERMINATOR:mw[method]?mw[method](value):value}}function setSourceHelper(src,middleware,next,player,acc,lastRun){void 0===src&&(src={}),void 0===middleware&&(middleware=[]),void 0===acc&&(acc=[]),void 0===lastRun&&(lastRun=!1);var _middleware=middleware,mwFactory=_middleware[0],mwrest=_middleware.slice(1);if("string"==typeof mwFactory)setSourceHelper(src,middlewares[mwFactory],next,player,acc,lastRun);else if(mwFactory){var mw=function getOrCreateFactory(player,mwFactory){var mws=middlewareInstances[player.id()],mw=null;if(null==mws)return mw=mwFactory(player),middlewareInstances[player.id()]=[[mwFactory,mw]],mw;for(var i=0;i<mws.length;i++){var _mws$i=mws[i],mwf=_mws$i[0],mwi=_mws$i[1];mwf===mwFactory&&(mw=mwi)}return null===mw&&(mw=mwFactory(player),mws.push([mwFactory,mw])),mw}(player,mwFactory);if(!mw.setSource)return acc.push(mw),setSourceHelper(src,mwrest,next,player,acc,lastRun);mw.setSource(video_es_assign({},src),(function(err,_src){if(err)return setSourceHelper(src,mwrest,next,player,acc,lastRun);acc.push(mw),setSourceHelper(_src,src.type===_src.type?mwrest:middlewares[_src.type],next,player,acc,lastRun)}))}else mwrest.length?setSourceHelper(src,mwrest,next,player,acc,lastRun):lastRun?next(src,acc):setSourceHelper(src,middlewares["*"],next,player,acc,!0)}var MimetypesKind={opus:"video/ogg",ogv:"video/ogg",mp4:"video/mp4",mov:"video/mp4",m4v:"video/mp4",mkv:"video/x-matroska",m4a:"audio/mp4",mp3:"audio/mpeg",aac:"audio/aac",oga:"audio/ogg",m3u8:"application/x-mpegURL",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",png:"image/png",svg:"image/svg+xml",webp:"image/webp"},getMimetype=function getMimetype(src){void 0===src&&(src="");var ext=getFileExtension(src);return MimetypesKind[ext.toLowerCase()]||""},filterSource=function filterSource(src){if(Array.isArray(src)){var newsrc=[];src.forEach((function(srcobj){srcobj=filterSource(srcobj),Array.isArray(srcobj)?newsrc=newsrc.concat(srcobj):video_es_isObject(srcobj)&&newsrc.push(srcobj)})),src=newsrc}else src="string"==typeof src&&src.trim()?[fixSource({src})]:video_es_isObject(src)&&"string"==typeof src.src&&src.src&&src.src.trim()?[fixSource(src)]:[];return src};function fixSource(src){if(!src.type){var mimetype=getMimetype(src.src);mimetype&&(src.type=mimetype)}return src}var MediaLoader=function(_Component){function MediaLoader(player,options,ready){var _this,options_=mergeOptions({createEl:!1},options);if(_this=_Component.call(this,player,options_,ready)||this,options.playerOptions.sources&&0!==options.playerOptions.sources.length)player.src(options.playerOptions.sources);else for(var i=0,j=options.playerOptions.techOrder;i<j.length;i++){var techName=toTitleCase(j[i]),tech=Tech.getTech(techName);if(techName||(tech=Component.getComponent(techName)),tech&&tech.isSupported()){player.loadTech_(techName);break}}return _this}return video_es_inheritsLoose(MediaLoader,_Component),MediaLoader}(Component);Component.registerComponent("MediaLoader",MediaLoader);var ClickableComponent=function(_Component){function ClickableComponent(player,options){var _this;return(_this=_Component.call(this,player,options)||this).emitTapEvents(),_this.enable(),_this}video_es_inheritsLoose(ClickableComponent,_Component);var _proto=ClickableComponent.prototype;return _proto.createEl=function createEl(tag,props,attributes){void 0===tag&&(tag="div"),void 0===props&&(props={}),void 0===attributes&&(attributes={}),props=video_es_assign({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass(),tabIndex:0},props),"button"===tag&&log.error("Creating a ClickableComponent with an HTML element of "+tag+" is not supported; use a Button instead."),attributes=video_es_assign({role:"button"},attributes),this.tabIndex_=props.tabIndex;var el=_Component.prototype.createEl.call(this,tag,props,attributes);return this.createControlTextEl(el),el},_proto.dispose=function dispose(){this.controlTextEl_=null,_Component.prototype.dispose.call(this)},_proto.createControlTextEl=function createControlTextEl(el){return this.controlTextEl_=createEl("span",{className:"vjs-control-text"},{"aria-live":"polite"}),el&&el.appendChild(this.controlTextEl_),this.controlText(this.controlText_,el),this.controlTextEl_},_proto.controlText=function controlText(text,el){if(void 0===el&&(el=this.el()),void 0===text)return this.controlText_||"Need Text";var localizedText=this.localize(text);this.controlText_=text,textContent(this.controlTextEl_,localizedText),this.nonIconControl||el.setAttribute("title",localizedText)},_proto.buildCSSClass=function buildCSSClass(){return"vjs-control vjs-button "+_Component.prototype.buildCSSClass.call(this)},_proto.enable=function enable(){this.enabled_||(this.enabled_=!0,this.removeClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","false"),void 0!==this.tabIndex_&&this.el_.setAttribute("tabIndex",this.tabIndex_),this.on(["tap","click"],this.handleClick),this.on("keydown",this.handleKeyDown))},_proto.disable=function disable(){this.enabled_=!1,this.addClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","true"),void 0!==this.tabIndex_&&this.el_.removeAttribute("tabIndex"),this.off("mouseover",this.handleMouseOver),this.off("mouseout",this.handleMouseOut),this.off(["tap","click"],this.handleClick),this.off("keydown",this.handleKeyDown)},_proto.handleClick=function handleClick(event){},_proto.handleKeyDown=function handleKeyDown(event){keycode_default().isEventKey(event,"Space")||keycode_default().isEventKey(event,"Enter")?(event.preventDefault(),event.stopPropagation(),this.trigger("click")):_Component.prototype.handleKeyDown.call(this,event)},ClickableComponent}(Component);Component.registerComponent("ClickableComponent",ClickableComponent);var PosterImage=function(_ClickableComponent){function PosterImage(player,options){var _this;return(_this=_ClickableComponent.call(this,player,options)||this).update(),player.on("posterchange",bind(video_es_assertThisInitialized(_this),_this.update)),_this}video_es_inheritsLoose(PosterImage,_ClickableComponent);var _proto=PosterImage.prototype;return _proto.dispose=function dispose(){this.player().off("posterchange",this.update),_ClickableComponent.prototype.dispose.call(this)},_proto.createEl=function createEl$1(){return createEl("div",{className:"vjs-poster",tabIndex:-1})},_proto.update=function update(event){var url=this.player().poster();this.setSrc(url),url?this.show():this.hide()},_proto.setSrc=function setSrc(url){var backgroundImage="";url&&(backgroundImage='url("'+url+'")'),this.el_.style.backgroundImage=backgroundImage},_proto.handleClick=function handleClick(event){this.player_.controls()&&(this.player_.tech(!0)&&this.player_.tech(!0).focus(),this.player_.paused()?silencePromise(this.player_.play()):this.player_.pause())},PosterImage}(ClickableComponent);Component.registerComponent("PosterImage",PosterImage);var fontMap={monospace:"monospace",sansSerif:"sans-serif",serif:"serif",monospaceSansSerif:'"Andale Mono", "Lucida Console", monospace',monospaceSerif:'"Courier New", monospace',proportionalSansSerif:"sans-serif",proportionalSerif:"serif",casual:'"Comic Sans MS", Impact, fantasy',script:'"Monotype Corsiva", cursive',smallcaps:'"Andale Mono", "Lucida Console", monospace, sans-serif'};function constructColor(color,opacity){var hex;if(4===color.length)hex=color[1]+color[1]+color[2]+color[2]+color[3]+color[3];else{if(7!==color.length)throw new Error("Invalid color code provided, "+color+"; must be formatted as e.g. #f0e or #f604e2.");hex=color.slice(1)}return"rgba("+parseInt(hex.slice(0,2),16)+","+parseInt(hex.slice(2,4),16)+","+parseInt(hex.slice(4,6),16)+","+opacity+")"}function tryUpdateStyle(el,style,rule){try{el.style[style]=rule}catch(e){return}}var TextTrackDisplay=function(_Component){function TextTrackDisplay(player,options,ready){var _this;_this=_Component.call(this,player,options,ready)||this;var updateDisplayHandler=bind(video_es_assertThisInitialized(_this),_this.updateDisplay);return player.on("loadstart",bind(video_es_assertThisInitialized(_this),_this.toggleDisplay)),player.on("texttrackchange",updateDisplayHandler),player.on("loadedmetadata",bind(video_es_assertThisInitialized(_this),_this.preselectTrack)),player.ready(bind(video_es_assertThisInitialized(_this),(function(){if(player.tech_&&player.tech_.featuresNativeTextTracks)this.hide();else{player.on("fullscreenchange",updateDisplayHandler),player.on("playerresize",updateDisplayHandler),window_default().addEventListener("orientationchange",updateDisplayHandler),player.on("dispose",(function(){return window_default().removeEventListener("orientationchange",updateDisplayHandler)}));for(var tracks=this.options_.playerOptions.tracks||[],i=0;i<tracks.length;i++)this.player_.addRemoteTextTrack(tracks[i],!0);this.preselectTrack()}}))),_this}video_es_inheritsLoose(TextTrackDisplay,_Component);var _proto=TextTrackDisplay.prototype;return _proto.preselectTrack=function preselectTrack(){for(var firstDesc,firstCaptions,preferredTrack,modes={captions:1,subtitles:1},trackList=this.player_.textTracks(),userPref=this.player_.cache_.selectedLanguage,i=0;i<trackList.length;i++){var track=trackList[i];userPref&&userPref.enabled&&userPref.language&&userPref.language===track.language&&track.kind in modes?track.kind===userPref.kind?preferredTrack=track:preferredTrack||(preferredTrack=track):userPref&&!userPref.enabled?(preferredTrack=null,firstDesc=null,firstCaptions=null):track.default&&("descriptions"!==track.kind||firstDesc?track.kind in modes&&!firstCaptions&&(firstCaptions=track):firstDesc=track)}preferredTrack?preferredTrack.mode="showing":firstCaptions?firstCaptions.mode="showing":firstDesc&&(firstDesc.mode="showing")},_proto.toggleDisplay=function toggleDisplay(){this.player_.tech_&&this.player_.tech_.featuresNativeTextTracks?this.hide():this.show()},_proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-text-track-display"},{"aria-live":"off","aria-atomic":"true"})},_proto.clearDisplay=function clearDisplay(){"function"==typeof window_default().WebVTT&&window_default().WebVTT.processCues(window_default(),[],this.el_)},_proto.updateDisplay=function updateDisplay(){var tracks=this.player_.textTracks(),allowMultipleShowingTracks=this.options_.allowMultipleShowingTracks;if(this.clearDisplay(),allowMultipleShowingTracks){for(var showingTracks=[],_i=0;_i<tracks.length;++_i){var track=tracks[_i];"showing"===track.mode&&showingTracks.push(track)}this.updateForTrack(showingTracks)}else{for(var descriptionsTrack=null,captionsSubtitlesTrack=null,i=tracks.length;i--;){var _track=tracks[i];"showing"===_track.mode&&("descriptions"===_track.kind?descriptionsTrack=_track:captionsSubtitlesTrack=_track)}captionsSubtitlesTrack?("off"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","off"),this.updateForTrack(captionsSubtitlesTrack)):descriptionsTrack&&("assertive"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","assertive"),this.updateForTrack(descriptionsTrack))}},_proto.updateDisplayState=function updateDisplayState(track){for(var overrides=this.player_.textTrackSettings.getValues(),cues=track.activeCues,i=cues.length;i--;){var cue=cues[i];if(cue){var cueDiv=cue.displayState;if(overrides.color&&(cueDiv.firstChild.style.color=overrides.color),overrides.textOpacity&&tryUpdateStyle(cueDiv.firstChild,"color",constructColor(overrides.color||"#fff",overrides.textOpacity)),overrides.backgroundColor&&(cueDiv.firstChild.style.backgroundColor=overrides.backgroundColor),overrides.backgroundOpacity&&tryUpdateStyle(cueDiv.firstChild,"backgroundColor",constructColor(overrides.backgroundColor||"#000",overrides.backgroundOpacity)),overrides.windowColor&&(overrides.windowOpacity?tryUpdateStyle(cueDiv,"backgroundColor",constructColor(overrides.windowColor,overrides.windowOpacity)):cueDiv.style.backgroundColor=overrides.windowColor),overrides.edgeStyle&&("dropshadow"===overrides.edgeStyle?cueDiv.firstChild.style.textShadow="2px 2px 3px #222, 2px 2px 4px #222, 2px 2px 5px #222":"raised"===overrides.edgeStyle?cueDiv.firstChild.style.textShadow="1px 1px #222, 2px 2px #222, 3px 3px #222":"depressed"===overrides.edgeStyle?cueDiv.firstChild.style.textShadow="1px 1px #ccc, 0 1px #ccc, -1px -1px #222, 0 -1px #222":"uniform"===overrides.edgeStyle&&(cueDiv.firstChild.style.textShadow="0 0 4px #222, 0 0 4px #222, 0 0 4px #222, 0 0 4px #222")),overrides.fontPercent&&1!==overrides.fontPercent){var fontSize=window_default().parseFloat(cueDiv.style.fontSize);cueDiv.style.fontSize=fontSize*overrides.fontPercent+"px",cueDiv.style.height="auto",cueDiv.style.top="auto",cueDiv.style.bottom="2px"}overrides.fontFamily&&"default"!==overrides.fontFamily&&("small-caps"===overrides.fontFamily?cueDiv.firstChild.style.fontVariant="small-caps":cueDiv.firstChild.style.fontFamily=fontMap[overrides.fontFamily])}}},_proto.updateForTrack=function updateForTrack(tracks){if(Array.isArray(tracks)||(tracks=[tracks]),"function"==typeof window_default().WebVTT&&!tracks.every((function(track){return!track.activeCues}))){for(var cues=[],i=0;i<tracks.length;++i)for(var track=tracks[i],j=0;j<track.activeCues.length;++j)cues.push(track.activeCues[j]);window_default().WebVTT.processCues(window_default(),cues,this.el_);for(var _i2=0;_i2<tracks.length;++_i2){for(var _track2=tracks[_i2],_j=0;_j<_track2.activeCues.length;++_j){var cueEl=_track2.activeCues[_j].displayState;addClass(cueEl,"vjs-text-track-cue"),addClass(cueEl,"vjs-text-track-cue-"+(_track2.language?_track2.language:_i2))}this.player_.textTrackSettings&&this.updateDisplayState(_track2)}}},TextTrackDisplay}(Component);Component.registerComponent("TextTrackDisplay",TextTrackDisplay);var LoadingSpinner=function(_Component){function LoadingSpinner(){return _Component.apply(this,arguments)||this}return video_es_inheritsLoose(LoadingSpinner,_Component),LoadingSpinner.prototype.createEl=function createEl$1(){var isAudio=this.player_.isAudio(),playerType=this.localize(isAudio?"Audio Player":"Video Player"),controlText=createEl("span",{className:"vjs-control-text",innerHTML:this.localize("{1} is loading.",[playerType])}),el=_Component.prototype.createEl.call(this,"div",{className:"vjs-loading-spinner",dir:"ltr"});return el.appendChild(controlText),el},LoadingSpinner}(Component);Component.registerComponent("LoadingSpinner",LoadingSpinner);var Button=function(_ClickableComponent){function Button(){return _ClickableComponent.apply(this,arguments)||this}video_es_inheritsLoose(Button,_ClickableComponent);var _proto=Button.prototype;return _proto.createEl=function createEl(tag,props,attributes){void 0===props&&(props={}),void 0===attributes&&(attributes={}),props=video_es_assign({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass()},props),attributes=video_es_assign({type:"button"},attributes);var el=Component.prototype.createEl.call(this,"button",props,attributes);return this.createControlTextEl(el),el},_proto.addChild=function addChild(child,options){void 0===options&&(options={});var className=this.constructor.name;return log.warn("Adding an actionable (user controllable) child to a Button ("+className+") is not supported; use a ClickableComponent instead."),Component.prototype.addChild.call(this,child,options)},_proto.enable=function enable(){_ClickableComponent.prototype.enable.call(this),this.el_.removeAttribute("disabled")},_proto.disable=function disable(){_ClickableComponent.prototype.disable.call(this),this.el_.setAttribute("disabled","disabled")},_proto.handleKeyDown=function handleKeyDown(event){keycode_default().isEventKey(event,"Space")||keycode_default().isEventKey(event,"Enter")?event.stopPropagation():_ClickableComponent.prototype.handleKeyDown.call(this,event)},Button}(ClickableComponent);Component.registerComponent("Button",Button);var BigPlayButton=function(_Button){function BigPlayButton(player,options){var _this;return(_this=_Button.call(this,player,options)||this).mouseused_=!1,_this.on("mousedown",_this.handleMouseDown),_this}video_es_inheritsLoose(BigPlayButton,_Button);var _proto=BigPlayButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-big-play-button"},_proto.handleClick=function handleClick(event){var playPromise=this.player_.play();if(this.mouseused_&&event.clientX&&event.clientY)return silencePromise(playPromise),void(this.player_.tech(!0)&&this.player_.tech(!0).focus());var cb=this.player_.getChild("controlBar"),playToggle=cb&&cb.getChild("playToggle");if(playToggle){var playFocus=function playFocus(){return playToggle.focus()};isPromise(playPromise)?playPromise.then(playFocus,(function(){})):this.setTimeout(playFocus,1)}else this.player_.tech(!0).focus()},_proto.handleKeyDown=function handleKeyDown(event){this.mouseused_=!1,_Button.prototype.handleKeyDown.call(this,event)},_proto.handleMouseDown=function handleMouseDown(event){this.mouseused_=!0},BigPlayButton}(Button);BigPlayButton.prototype.controlText_="Play Video",Component.registerComponent("BigPlayButton",BigPlayButton);var CloseButton=function(_Button){function CloseButton(player,options){var _this;return(_this=_Button.call(this,player,options)||this).controlText(options&&options.controlText||_this.localize("Close")),_this}video_es_inheritsLoose(CloseButton,_Button);var _proto=CloseButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-close-button "+_Button.prototype.buildCSSClass.call(this)},_proto.handleClick=function handleClick(event){this.trigger({type:"close",bubbles:!1})},_proto.handleKeyDown=function handleKeyDown(event){keycode_default().isEventKey(event,"Esc")?(event.preventDefault(),event.stopPropagation(),this.trigger("click")):_Button.prototype.handleKeyDown.call(this,event)},CloseButton}(Button);Component.registerComponent("CloseButton",CloseButton);var PlayToggle=function(_Button){function PlayToggle(player,options){var _this;return void 0===options&&(options={}),_this=_Button.call(this,player,options)||this,options.replay=void 0===options.replay||options.replay,_this.on(player,"play",_this.handlePlay),_this.on(player,"pause",_this.handlePause),options.replay&&_this.on(player,"ended",_this.handleEnded),_this}video_es_inheritsLoose(PlayToggle,_Button);var _proto=PlayToggle.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-play-control "+_Button.prototype.buildCSSClass.call(this)},_proto.handleClick=function handleClick(event){this.player_.paused()?this.player_.play():this.player_.pause()},_proto.handleSeeked=function handleSeeked(event){this.removeClass("vjs-ended"),this.player_.paused()?this.handlePause(event):this.handlePlay(event)},_proto.handlePlay=function handlePlay(event){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.controlText("Pause")},_proto.handlePause=function handlePause(event){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.controlText("Play")},_proto.handleEnded=function handleEnded(event){this.removeClass("vjs-playing"),this.addClass("vjs-ended"),this.controlText("Replay"),this.one(this.player_,"seeked",this.handleSeeked)},PlayToggle}(Button);PlayToggle.prototype.controlText_="Play",Component.registerComponent("PlayToggle",PlayToggle);var defaultImplementation=function defaultImplementation(seconds,guide){seconds=seconds<0?0:seconds;var s=Math.floor(seconds%60),m=Math.floor(seconds/60%60),h=Math.floor(seconds/3600),gm=Math.floor(guide/60%60),gh=Math.floor(guide/3600);return(isNaN(seconds)||seconds===1/0)&&(h=m=s="-"),(h=h>0||gh>0?h+":":"")+(m=((h||gm>=10)&&m<10?"0"+m:m)+":")+(s=s<10?"0"+s:s)},implementation=defaultImplementation;function formatTime(seconds,guide){return void 0===guide&&(guide=seconds),implementation(seconds,guide)}var TimeDisplay=function(_Component){function TimeDisplay(player,options){var _this;return(_this=_Component.call(this,player,options)||this).throttledUpdateContent=throttle(bind(video_es_assertThisInitialized(_this),_this.updateContent),30),_this.on(player,"timeupdate",_this.throttledUpdateContent),_this}video_es_inheritsLoose(TimeDisplay,_Component);var _proto=TimeDisplay.prototype;return _proto.createEl=function createEl$1(){var className=this.buildCSSClass(),el=_Component.prototype.createEl.call(this,"div",{className:className+" vjs-time-control vjs-control",innerHTML:'<span class="vjs-control-text" role="presentation">'+this.localize(this.labelText_)+" </span>"});return this.contentEl_=createEl("span",{className:className+"-display"},{"aria-live":"off",role:"presentation"}),this.updateTextNode_(),el.appendChild(this.contentEl_),el},_proto.dispose=function dispose(){this.contentEl_=null,this.textNode_=null,_Component.prototype.dispose.call(this)},_proto.updateTextNode_=function updateTextNode_(){if(this.contentEl_){for(;this.contentEl_.firstChild;)this.contentEl_.removeChild(this.contentEl_.firstChild);this.textNode_=document_default().createTextNode(this.formattedTime_||this.formatTime_(0)),this.contentEl_.appendChild(this.textNode_)}},_proto.formatTime_=function formatTime_(time){return formatTime(time)},_proto.updateFormattedTime_=function updateFormattedTime_(time){var formattedTime=this.formatTime_(time);formattedTime!==this.formattedTime_&&(this.formattedTime_=formattedTime,this.requestAnimationFrame(this.updateTextNode_))},_proto.updateContent=function updateContent(event){},TimeDisplay}(Component);TimeDisplay.prototype.labelText_="Time",TimeDisplay.prototype.controlText_="Time",Component.registerComponent("TimeDisplay",TimeDisplay);var CurrentTimeDisplay=function(_TimeDisplay){function CurrentTimeDisplay(player,options){var _this;return(_this=_TimeDisplay.call(this,player,options)||this).on(player,"ended",_this.handleEnded),_this}video_es_inheritsLoose(CurrentTimeDisplay,_TimeDisplay);var _proto=CurrentTimeDisplay.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-current-time"},_proto.updateContent=function updateContent(event){var time=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();this.updateFormattedTime_(time)},_proto.handleEnded=function handleEnded(event){this.player_.duration()&&this.updateFormattedTime_(this.player_.duration())},CurrentTimeDisplay}(TimeDisplay);CurrentTimeDisplay.prototype.labelText_="Current Time",CurrentTimeDisplay.prototype.controlText_="Current Time",Component.registerComponent("CurrentTimeDisplay",CurrentTimeDisplay);var DurationDisplay=function(_TimeDisplay){function DurationDisplay(player,options){var _this;return(_this=_TimeDisplay.call(this,player,options)||this).on(player,"durationchange",_this.updateContent),_this.on(player,"loadstart",_this.updateContent),_this.on(player,"loadedmetadata",_this.throttledUpdateContent),_this}video_es_inheritsLoose(DurationDisplay,_TimeDisplay);var _proto=DurationDisplay.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-duration"},_proto.updateContent=function updateContent(event){var duration=this.player_.duration();this.duration_!==duration&&(this.duration_=duration,this.updateFormattedTime_(duration))},DurationDisplay}(TimeDisplay);DurationDisplay.prototype.labelText_="Duration",DurationDisplay.prototype.controlText_="Duration",Component.registerComponent("DurationDisplay",DurationDisplay);var TimeDivider=function(_Component){function TimeDivider(){return _Component.apply(this,arguments)||this}return video_es_inheritsLoose(TimeDivider,_Component),TimeDivider.prototype.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-time-control vjs-time-divider",innerHTML:"<div><span>/</span></div>"},{"aria-hidden":!0})},TimeDivider}(Component);Component.registerComponent("TimeDivider",TimeDivider);var RemainingTimeDisplay=function(_TimeDisplay){function RemainingTimeDisplay(player,options){var _this;return(_this=_TimeDisplay.call(this,player,options)||this).on(player,"durationchange",_this.throttledUpdateContent),_this.on(player,"ended",_this.handleEnded),_this}video_es_inheritsLoose(RemainingTimeDisplay,_TimeDisplay);var _proto=RemainingTimeDisplay.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-remaining-time"},_proto.createEl=function createEl$1(){var el=_TimeDisplay.prototype.createEl.call(this);return el.insertBefore(createEl("span",{},{"aria-hidden":!0},"-"),this.contentEl_),el},_proto.updateContent=function updateContent(event){"number"==typeof this.player_.duration()&&(this.player_.remainingTimeDisplay?this.updateFormattedTime_(this.player_.remainingTimeDisplay()):this.updateFormattedTime_(this.player_.remainingTime()))},_proto.handleEnded=function handleEnded(event){this.player_.duration()&&this.updateFormattedTime_(0)},RemainingTimeDisplay}(TimeDisplay);RemainingTimeDisplay.prototype.labelText_="Remaining Time",RemainingTimeDisplay.prototype.controlText_="Remaining Time",Component.registerComponent("RemainingTimeDisplay",RemainingTimeDisplay);var LiveDisplay=function(_Component){function LiveDisplay(player,options){var _this;return(_this=_Component.call(this,player,options)||this).updateShowing(),_this.on(_this.player(),"durationchange",_this.updateShowing),_this}video_es_inheritsLoose(LiveDisplay,_Component);var _proto=LiveDisplay.prototype;return _proto.createEl=function createEl$1(){var el=_Component.prototype.createEl.call(this,"div",{className:"vjs-live-control vjs-control"});return this.contentEl_=createEl("div",{className:"vjs-live-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Stream Type")+" </span>"+this.localize("LIVE")},{"aria-live":"off"}),el.appendChild(this.contentEl_),el},_proto.dispose=function dispose(){this.contentEl_=null,_Component.prototype.dispose.call(this)},_proto.updateShowing=function updateShowing(event){this.player().duration()===1/0?this.show():this.hide()},LiveDisplay}(Component);Component.registerComponent("LiveDisplay",LiveDisplay);var SeekToLive=function(_Button){function SeekToLive(player,options){var _this;return(_this=_Button.call(this,player,options)||this).updateLiveEdgeStatus(),_this.player_.liveTracker&&_this.on(_this.player_.liveTracker,"liveedgechange",_this.updateLiveEdgeStatus),_this}video_es_inheritsLoose(SeekToLive,_Button);var _proto=SeekToLive.prototype;return _proto.createEl=function createEl$1(){var el=_Button.prototype.createEl.call(this,"button",{className:"vjs-seek-to-live-control vjs-control"});return this.textEl_=createEl("span",{className:"vjs-seek-to-live-text",innerHTML:this.localize("LIVE")},{"aria-hidden":"true"}),el.appendChild(this.textEl_),el},_proto.updateLiveEdgeStatus=function updateLiveEdgeStatus(e){!this.player_.liveTracker||this.player_.liveTracker.atLiveEdge()?(this.setAttribute("aria-disabled",!0),this.addClass("vjs-at-live-edge"),this.controlText("Seek to live, currently playing live")):(this.setAttribute("aria-disabled",!1),this.removeClass("vjs-at-live-edge"),this.controlText("Seek to live, currently behind live"))},_proto.handleClick=function handleClick(){this.player_.liveTracker.seekToLiveEdge()},_proto.dispose=function dispose(){this.player_.liveTracker&&this.off(this.player_.liveTracker,"liveedgechange",this.updateLiveEdgeStatus),this.textEl_=null,_Button.prototype.dispose.call(this)},SeekToLive}(Button);SeekToLive.prototype.controlText_="Seek to live, currently playing live",Component.registerComponent("SeekToLive",SeekToLive);var Slider=function(_Component){function Slider(player,options){var _this;return(_this=_Component.call(this,player,options)||this).bar=_this.getChild(_this.options_.barName),_this.vertical(!!_this.options_.vertical),_this.enable(),_this}video_es_inheritsLoose(Slider,_Component);var _proto=Slider.prototype;return _proto.enabled=function enabled(){return this.enabled_},_proto.enable=function enable(){this.enabled()||(this.on("mousedown",this.handleMouseDown),this.on("touchstart",this.handleMouseDown),this.on("keydown",this.handleKeyDown),this.on("click",this.handleClick),this.on(this.player_,"controlsvisible",this.update),this.playerEvent&&this.on(this.player_,this.playerEvent,this.update),this.removeClass("disabled"),this.setAttribute("tabindex",0),this.enabled_=!0)},_proto.disable=function disable(){if(this.enabled()){var doc=this.bar.el_.ownerDocument;this.off("mousedown",this.handleMouseDown),this.off("touchstart",this.handleMouseDown),this.off("keydown",this.handleKeyDown),this.off("click",this.handleClick),this.off(this.player_,"controlsvisible",this.update),this.off(doc,"mousemove",this.handleMouseMove),this.off(doc,"mouseup",this.handleMouseUp),this.off(doc,"touchmove",this.handleMouseMove),this.off(doc,"touchend",this.handleMouseUp),this.removeAttribute("tabindex"),this.addClass("disabled"),this.playerEvent&&this.off(this.player_,this.playerEvent,this.update),this.enabled_=!1}},_proto.createEl=function createEl(type,props,attributes){return void 0===props&&(props={}),void 0===attributes&&(attributes={}),props.className=props.className+" vjs-slider",props=video_es_assign({tabIndex:0},props),attributes=video_es_assign({role:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100,tabIndex:0},attributes),_Component.prototype.createEl.call(this,type,props,attributes)},_proto.handleMouseDown=function handleMouseDown(event){var doc=this.bar.el_.ownerDocument;"mousedown"===event.type&&event.preventDefault(),"touchstart"!==event.type||IS_CHROME||event.preventDefault(),blockTextSelection(),this.addClass("vjs-sliding"),this.trigger("slideractive"),this.on(doc,"mousemove",this.handleMouseMove),this.on(doc,"mouseup",this.handleMouseUp),this.on(doc,"touchmove",this.handleMouseMove),this.on(doc,"touchend",this.handleMouseUp),this.handleMouseMove(event)},_proto.handleMouseMove=function handleMouseMove(event){},_proto.handleMouseUp=function handleMouseUp(){var doc=this.bar.el_.ownerDocument;unblockTextSelection(),this.removeClass("vjs-sliding"),this.trigger("sliderinactive"),this.off(doc,"mousemove",this.handleMouseMove),this.off(doc,"mouseup",this.handleMouseUp),this.off(doc,"touchmove",this.handleMouseMove),this.off(doc,"touchend",this.handleMouseUp),this.update()},_proto.update=function update(){if(this.el_){var progress=this.getPercent(),bar=this.bar;if(bar){("number"!=typeof progress||progress!=progress||progress<0||progress===1/0)&&(progress=0);var percentage=(100*progress).toFixed(2)+"%",style=bar.el().style,sizeKey=this.vertical()?"height":"width";return style[sizeKey]!==percentage&&(style[sizeKey]=percentage),progress}}},_proto.calculateDistance=function calculateDistance(event){var position=getPointerPosition(this.el_,event);return this.vertical()?position.y:position.x},_proto.handleKeyDown=function handleKeyDown(event){keycode_default().isEventKey(event,"Left")||keycode_default().isEventKey(event,"Down")?(event.preventDefault(),event.stopPropagation(),this.stepBack()):keycode_default().isEventKey(event,"Right")||keycode_default().isEventKey(event,"Up")?(event.preventDefault(),event.stopPropagation(),this.stepForward()):_Component.prototype.handleKeyDown.call(this,event)},_proto.handleClick=function handleClick(event){event.stopPropagation(),event.preventDefault()},_proto.vertical=function vertical(bool){if(void 0===bool)return this.vertical_||!1;this.vertical_=!!bool,this.vertical_?this.addClass("vjs-slider-vertical"):this.addClass("vjs-slider-horizontal")},Slider}(Component);Component.registerComponent("Slider",Slider);var LoadProgressBar=function(_Component){function LoadProgressBar(player,options){var _this;return(_this=_Component.call(this,player,options)||this).partEls_=[],_this.on(player,"progress",_this.update),_this}video_es_inheritsLoose(LoadProgressBar,_Component);var _proto=LoadProgressBar.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-load-progress",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Loaded")+'</span>: <span class="vjs-control-text-loaded-percentage">0%</span></span>'})},_proto.dispose=function dispose(){this.partEls_=null,_Component.prototype.dispose.call(this)},_proto.update=function update(event){var liveTracker=this.player_.liveTracker,buffered=this.player_.buffered(),duration=liveTracker&&liveTracker.isLive()?liveTracker.seekableEnd():this.player_.duration(),bufferedEnd=this.player_.bufferedEnd(),children=this.partEls_,controlTextPercentage=this.$(".vjs-control-text-loaded-percentage"),percentify=function percentify(time,end,rounded){var percent=time/end||0;return percent=100*(percent>=1?1:percent),rounded&&(percent=percent.toFixed(2)),percent+"%"};this.el_.style.width=percentify(bufferedEnd,duration),textContent(controlTextPercentage,percentify(bufferedEnd,duration,!0));for(var i=0;i<buffered.length;i++){var start=buffered.start(i),end=buffered.end(i),part=children[i];part||(part=this.el_.appendChild(createEl()),children[i]=part),part.style.left=percentify(start,bufferedEnd),part.style.width=percentify(end-start,bufferedEnd)}for(var _i=children.length;_i>buffered.length;_i--)this.el_.removeChild(children[_i-1]);children.length=buffered.length},LoadProgressBar}(Component);Component.registerComponent("LoadProgressBar",LoadProgressBar);var TimeTooltip=function(_Component){function TimeTooltip(player,options){var _this;return(_this=_Component.call(this,player,options)||this).update=throttle(bind(video_es_assertThisInitialized(_this),_this.update),30),_this}video_es_inheritsLoose(TimeTooltip,_Component);var _proto=TimeTooltip.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-time-tooltip"},{"aria-hidden":"true"})},_proto.update=function update(seekBarRect,seekBarPoint,content){var tooltipRect=getBoundingClientRect(this.el_),playerRect=getBoundingClientRect(this.player_.el()),seekBarPointPx=seekBarRect.width*seekBarPoint;if(playerRect&&tooltipRect){var spaceLeftOfPoint=seekBarRect.left-playerRect.left+seekBarPointPx,spaceRightOfPoint=seekBarRect.width-seekBarPointPx+(playerRect.right-seekBarRect.right),pullTooltipBy=tooltipRect.width/2;spaceLeftOfPoint<pullTooltipBy?pullTooltipBy+=pullTooltipBy-spaceLeftOfPoint:spaceRightOfPoint<pullTooltipBy&&(pullTooltipBy=spaceRightOfPoint),pullTooltipBy<0?pullTooltipBy=0:pullTooltipBy>tooltipRect.width&&(pullTooltipBy=tooltipRect.width),this.el_.style.right="-"+pullTooltipBy+"px",this.write(content)}},_proto.write=function write(content){textContent(this.el_,content)},_proto.updateTime=function updateTime(seekBarRect,seekBarPoint,time,cb){var _this2=this;this.rafId_&&this.cancelAnimationFrame(this.rafId_),this.rafId_=this.requestAnimationFrame((function(){var content,duration=_this2.player_.duration();if(_this2.player_.liveTracker&&_this2.player_.liveTracker.isLive()){var liveWindow=_this2.player_.liveTracker.liveWindow(),secondsBehind=liveWindow-seekBarPoint*liveWindow;content=(secondsBehind<1?"":"-")+formatTime(secondsBehind,liveWindow)}else content=formatTime(time,duration);_this2.update(seekBarRect,seekBarPoint,content),cb&&cb()}))},TimeTooltip}(Component);Component.registerComponent("TimeTooltip",TimeTooltip);var PlayProgressBar=function(_Component){function PlayProgressBar(player,options){var _this;return(_this=_Component.call(this,player,options)||this).update=throttle(bind(video_es_assertThisInitialized(_this),_this.update),30),_this}video_es_inheritsLoose(PlayProgressBar,_Component);var _proto=PlayProgressBar.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-play-progress vjs-slider-bar"},{"aria-hidden":"true"})},_proto.update=function update(seekBarRect,seekBarPoint){var timeTooltip=this.getChild("timeTooltip");if(timeTooltip){var time=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();timeTooltip.updateTime(seekBarRect,seekBarPoint,time)}},PlayProgressBar}(Component);PlayProgressBar.prototype.options_={children:[]},IS_IOS||IS_ANDROID||PlayProgressBar.prototype.options_.children.push("timeTooltip"),Component.registerComponent("PlayProgressBar",PlayProgressBar);var MouseTimeDisplay=function(_Component){function MouseTimeDisplay(player,options){var _this;return(_this=_Component.call(this,player,options)||this).update=throttle(bind(video_es_assertThisInitialized(_this),_this.update),30),_this}video_es_inheritsLoose(MouseTimeDisplay,_Component);var _proto=MouseTimeDisplay.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-mouse-display"})},_proto.update=function update(seekBarRect,seekBarPoint){var _this2=this,time=seekBarPoint*this.player_.duration();this.getChild("timeTooltip").updateTime(seekBarRect,seekBarPoint,time,(function(){_this2.el_.style.left=seekBarRect.width*seekBarPoint+"px"}))},MouseTimeDisplay}(Component);MouseTimeDisplay.prototype.options_={children:["timeTooltip"]},Component.registerComponent("MouseTimeDisplay",MouseTimeDisplay);var SeekBar=function(_Slider){function SeekBar(player,options){var _this;return(_this=_Slider.call(this,player,options)||this).setEventHandlers_(),_this}video_es_inheritsLoose(SeekBar,_Slider);var _proto=SeekBar.prototype;return _proto.setEventHandlers_=function setEventHandlers_(){this.update=throttle(bind(this,this.update),30),this.on(this.player_,"timeupdate",this.update),this.on(this.player_,"ended",this.handleEnded),this.on(this.player_,"durationchange",this.update),this.player_.liveTracker&&this.on(this.player_.liveTracker,"liveedgechange",this.update),this.updateInterval=null,this.on(this.player_,["playing"],this.enableInterval_),this.on(this.player_,["ended","pause","waiting"],this.disableInterval_),"hidden"in document_default()&&"visibilityState"in document_default()&&this.on(document_default(),"visibilitychange",this.toggleVisibility_)},_proto.toggleVisibility_=function toggleVisibility_(e){document_default().hidden?this.disableInterval_(e):(this.enableInterval_(),this.requestAnimationFrame(this.update))},_proto.enableInterval_=function enableInterval_(){var _this2=this;this.clearInterval(this.updateInterval),this.updateInterval=this.setInterval((function(){_this2.requestAnimationFrame(_this2.update)}),30)},_proto.disableInterval_=function disableInterval_(e){this.player_.liveTracker&&this.player_.liveTracker.isLive()&&"ended"!==e.type||this.clearInterval(this.updateInterval)},_proto.createEl=function createEl(){return _Slider.prototype.createEl.call(this,"div",{className:"vjs-progress-holder"},{"aria-label":this.localize("Progress Bar")})},_proto.update_=function update_(currentTime,percent){var liveTracker=this.player_.liveTracker,duration=this.player_.duration();liveTracker&&liveTracker.isLive()&&(duration=this.player_.liveTracker.liveCurrentTime()),this.el_.setAttribute("aria-valuenow",(100*percent).toFixed(2)),this.el_.setAttribute("aria-valuetext",this.localize("progress bar timing: currentTime={1} duration={2}",[formatTime(currentTime,duration),formatTime(duration,duration)],"{1} of {2}")),this.bar&&this.bar.update(getBoundingClientRect(this.el_),percent)},_proto.update=function update(event){if(null!==this.el().offsetParent){var percent=_Slider.prototype.update.call(this);return this.update_(this.getCurrentTime_(),percent),percent}},_proto.getCurrentTime_=function getCurrentTime_(){return this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime()},_proto.handleEnded=function handleEnded(event){this.update_(this.player_.duration(),1)},_proto.getPercent=function getPercent(){var percent,currentTime=this.getCurrentTime_(),liveTracker=this.player_.liveTracker;return liveTracker&&liveTracker.isLive()?(percent=(currentTime-liveTracker.seekableStart())/liveTracker.liveWindow(),liveTracker.atLiveEdge()&&(percent=1)):percent=currentTime/this.player_.duration(),percent>=1?1:percent||0},_proto.handleMouseDown=function handleMouseDown(event){isSingleLeftClick(event)&&(event.stopPropagation(),this.player_.scrubbing(!0),this.videoWasPlaying=!this.player_.paused(),this.player_.pause(),_Slider.prototype.handleMouseDown.call(this,event))},_proto.handleMouseMove=function handleMouseMove(event){if(isSingleLeftClick(event)){var newTime,distance=this.calculateDistance(event),liveTracker=this.player_.liveTracker;if(liveTracker&&liveTracker.isLive()){var seekableStart=liveTracker.seekableStart(),seekableEnd=liveTracker.liveCurrentTime();if((newTime=seekableStart+distance*liveTracker.liveWindow())>=seekableEnd&&(newTime=seekableEnd),newTime<=seekableStart&&(newTime=seekableStart+.1),newTime===1/0)return}else(newTime=distance*this.player_.duration())===this.player_.duration()&&(newTime-=.1);this.player_.currentTime(newTime)}},_proto.enable=function enable(){_Slider.prototype.enable.call(this);var mouseTimeDisplay=this.getChild("mouseTimeDisplay");mouseTimeDisplay&&mouseTimeDisplay.show()},_proto.disable=function disable(){_Slider.prototype.disable.call(this);var mouseTimeDisplay=this.getChild("mouseTimeDisplay");mouseTimeDisplay&&mouseTimeDisplay.hide()},_proto.handleMouseUp=function handleMouseUp(event){_Slider.prototype.handleMouseUp.call(this,event),event&&event.stopPropagation(),this.player_.scrubbing(!1),this.player_.trigger({type:"timeupdate",target:this,manuallyTriggered:!0}),this.videoWasPlaying&&silencePromise(this.player_.play())},_proto.stepForward=function stepForward(){this.player_.currentTime(this.player_.currentTime()+5)},_proto.stepBack=function stepBack(){this.player_.currentTime(this.player_.currentTime()-5)},_proto.handleAction=function handleAction(event){this.player_.paused()?this.player_.play():this.player_.pause()},_proto.handleKeyDown=function handleKeyDown(event){if(keycode_default().isEventKey(event,"Space")||keycode_default().isEventKey(event,"Enter"))event.preventDefault(),event.stopPropagation(),this.handleAction(event);else if(keycode_default().isEventKey(event,"Home"))event.preventDefault(),event.stopPropagation(),this.player_.currentTime(0);else if(keycode_default().isEventKey(event,"End"))event.preventDefault(),event.stopPropagation(),this.player_.currentTime(this.player_.duration());else if(/^[0-9]$/.test(keycode_default()(event))){event.preventDefault(),event.stopPropagation();var gotoFraction=10*(keycode_default().codes[keycode_default()(event)]-keycode_default().codes[0])/100;this.player_.currentTime(this.player_.duration()*gotoFraction)}else keycode_default().isEventKey(event,"PgDn")?(event.preventDefault(),event.stopPropagation(),this.player_.currentTime(this.player_.currentTime()-60)):keycode_default().isEventKey(event,"PgUp")?(event.preventDefault(),event.stopPropagation(),this.player_.currentTime(this.player_.currentTime()+60)):_Slider.prototype.handleKeyDown.call(this,event)},SeekBar}(Slider);SeekBar.prototype.options_={children:["loadProgressBar","playProgressBar"],barName:"playProgressBar"},IS_IOS||IS_ANDROID||SeekBar.prototype.options_.children.splice(1,0,"mouseTimeDisplay"),Component.registerComponent("SeekBar",SeekBar);var ProgressControl=function(_Component){function ProgressControl(player,options){var _this;return(_this=_Component.call(this,player,options)||this).handleMouseMove=throttle(bind(video_es_assertThisInitialized(_this),_this.handleMouseMove),30),_this.throttledHandleMouseSeek=throttle(bind(video_es_assertThisInitialized(_this),_this.handleMouseSeek),30),_this.enable(),_this}video_es_inheritsLoose(ProgressControl,_Component);var _proto=ProgressControl.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-progress-control vjs-control"})},_proto.handleMouseMove=function handleMouseMove(event){var seekBar=this.getChild("seekBar");if(seekBar){var mouseTimeDisplay=seekBar.getChild("mouseTimeDisplay"),seekBarEl=seekBar.el(),seekBarRect=getBoundingClientRect(seekBarEl),seekBarPoint=getPointerPosition(seekBarEl,event).x;seekBarPoint>1?seekBarPoint=1:seekBarPoint<0&&(seekBarPoint=0),mouseTimeDisplay&&mouseTimeDisplay.update(seekBarRect,seekBarPoint)}},_proto.handleMouseSeek=function handleMouseSeek(event){var seekBar=this.getChild("seekBar");seekBar&&seekBar.handleMouseMove(event)},_proto.enabled=function enabled(){return this.enabled_},_proto.disable=function disable(){this.children().forEach((function(child){return child.disable&&child.disable()})),this.enabled()&&(this.off(["mousedown","touchstart"],this.handleMouseDown),this.off(this.el_,"mousemove",this.handleMouseMove),this.handleMouseUp(),this.addClass("disabled"),this.enabled_=!1)},_proto.enable=function enable(){this.children().forEach((function(child){return child.enable&&child.enable()})),this.enabled()||(this.on(["mousedown","touchstart"],this.handleMouseDown),this.on(this.el_,"mousemove",this.handleMouseMove),this.removeClass("disabled"),this.enabled_=!0)},_proto.handleMouseDown=function handleMouseDown(event){var doc=this.el_.ownerDocument,seekBar=this.getChild("seekBar");seekBar&&seekBar.handleMouseDown(event),this.on(doc,"mousemove",this.throttledHandleMouseSeek),this.on(doc,"touchmove",this.throttledHandleMouseSeek),this.on(doc,"mouseup",this.handleMouseUp),this.on(doc,"touchend",this.handleMouseUp)},_proto.handleMouseUp=function handleMouseUp(event){var doc=this.el_.ownerDocument,seekBar=this.getChild("seekBar");seekBar&&seekBar.handleMouseUp(event),this.off(doc,"mousemove",this.throttledHandleMouseSeek),this.off(doc,"touchmove",this.throttledHandleMouseSeek),this.off(doc,"mouseup",this.handleMouseUp),this.off(doc,"touchend",this.handleMouseUp)},ProgressControl}(Component);ProgressControl.prototype.options_={children:["seekBar"]},Component.registerComponent("ProgressControl",ProgressControl);var PictureInPictureToggle=function(_Button){function PictureInPictureToggle(player,options){var _this;return(_this=_Button.call(this,player,options)||this).on(player,["enterpictureinpicture","leavepictureinpicture"],_this.handlePictureInPictureChange),document_default().pictureInPictureEnabled||_this.disable(),_this}video_es_inheritsLoose(PictureInPictureToggle,_Button);var _proto=PictureInPictureToggle.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-picture-in-picture-control "+_Button.prototype.buildCSSClass.call(this)},_proto.handlePictureInPictureChange=function handlePictureInPictureChange(event){this.player_.isInPictureInPicture()?this.controlText("Exit Picture-in-Picture"):this.controlText("Picture-in-Picture")},_proto.handleClick=function handleClick(event){this.player_.isInPictureInPicture()?this.player_.exitPictureInPicture():this.player_.requestPictureInPicture()},PictureInPictureToggle}(Button);PictureInPictureToggle.prototype.controlText_="Picture-in-Picture",Component.registerComponent("PictureInPictureToggle",PictureInPictureToggle);var FullscreenToggle=function(_Button){function FullscreenToggle(player,options){var _this;return(_this=_Button.call(this,player,options)||this).on(player,"fullscreenchange",_this.handleFullscreenChange),!1===document_default()[player.fsApi_.fullscreenEnabled]&&_this.disable(),_this}video_es_inheritsLoose(FullscreenToggle,_Button);var _proto=FullscreenToggle.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-fullscreen-control "+_Button.prototype.buildCSSClass.call(this)},_proto.handleFullscreenChange=function handleFullscreenChange(event){this.player_.isFullscreen()?this.controlText("Non-Fullscreen"):this.controlText("Fullscreen")},_proto.handleClick=function handleClick(event){this.player_.isFullscreen()?this.player_.exitFullscreen():this.player_.requestFullscreen()},FullscreenToggle}(Button);FullscreenToggle.prototype.controlText_="Fullscreen",Component.registerComponent("FullscreenToggle",FullscreenToggle);var VolumeLevel=function(_Component){function VolumeLevel(){return _Component.apply(this,arguments)||this}return video_es_inheritsLoose(VolumeLevel,_Component),VolumeLevel.prototype.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-volume-level",innerHTML:'<span class="vjs-control-text"></span>'})},VolumeLevel}(Component);Component.registerComponent("VolumeLevel",VolumeLevel);var VolumeBar=function(_Slider){function VolumeBar(player,options){var _this;return(_this=_Slider.call(this,player,options)||this).on("slideractive",_this.updateLastVolume_),_this.on(player,"volumechange",_this.updateARIAAttributes),player.ready((function(){return _this.updateARIAAttributes()})),_this}video_es_inheritsLoose(VolumeBar,_Slider);var _proto=VolumeBar.prototype;return _proto.createEl=function createEl(){return _Slider.prototype.createEl.call(this,"div",{className:"vjs-volume-bar vjs-slider-bar"},{"aria-label":this.localize("Volume Level"),"aria-live":"polite"})},_proto.handleMouseDown=function handleMouseDown(event){isSingleLeftClick(event)&&_Slider.prototype.handleMouseDown.call(this,event)},_proto.handleMouseMove=function handleMouseMove(event){isSingleLeftClick(event)&&(this.checkMuted(),this.player_.volume(this.calculateDistance(event)))},_proto.checkMuted=function checkMuted(){this.player_.muted()&&this.player_.muted(!1)},_proto.getPercent=function getPercent(){return this.player_.muted()?0:this.player_.volume()},_proto.stepForward=function stepForward(){this.checkMuted(),this.player_.volume(this.player_.volume()+.1)},_proto.stepBack=function stepBack(){this.checkMuted(),this.player_.volume(this.player_.volume()-.1)},_proto.updateARIAAttributes=function updateARIAAttributes(event){var ariaValue=this.player_.muted()?0:this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow",ariaValue),this.el_.setAttribute("aria-valuetext",ariaValue+"%")},_proto.volumeAsPercentage_=function volumeAsPercentage_(){return Math.round(100*this.player_.volume())},_proto.updateLastVolume_=function updateLastVolume_(){var _this2=this,volumeBeforeDrag=this.player_.volume();this.one("sliderinactive",(function(){0===_this2.player_.volume()&&_this2.player_.lastVolume_(volumeBeforeDrag)}))},VolumeBar}(Slider);VolumeBar.prototype.options_={children:["volumeLevel"],barName:"volumeLevel"},VolumeBar.prototype.playerEvent="volumechange",Component.registerComponent("VolumeBar",VolumeBar);var VolumeControl=function(_Component){function VolumeControl(player,options){var _this;return void 0===options&&(options={}),options.vertical=options.vertical||!1,(void 0===options.volumeBar||isPlain(options.volumeBar))&&(options.volumeBar=options.volumeBar||{},options.volumeBar.vertical=options.vertical),function checkVolumeSupport(self,player){player.tech_&&!player.tech_.featuresVolumeControl&&self.addClass("vjs-hidden"),self.on(player,"loadstart",(function(){player.tech_.featuresVolumeControl?self.removeClass("vjs-hidden"):self.addClass("vjs-hidden")}))}(video_es_assertThisInitialized(_this=_Component.call(this,player,options)||this),player),_this.throttledHandleMouseMove=throttle(bind(video_es_assertThisInitialized(_this),_this.handleMouseMove),30),_this.on("mousedown",_this.handleMouseDown),_this.on("touchstart",_this.handleMouseDown),_this.on(_this.volumeBar,["focus","slideractive"],(function(){_this.volumeBar.addClass("vjs-slider-active"),_this.addClass("vjs-slider-active"),_this.trigger("slideractive")})),_this.on(_this.volumeBar,["blur","sliderinactive"],(function(){_this.volumeBar.removeClass("vjs-slider-active"),_this.removeClass("vjs-slider-active"),_this.trigger("sliderinactive")})),_this}video_es_inheritsLoose(VolumeControl,_Component);var _proto=VolumeControl.prototype;return _proto.createEl=function createEl(){var orientationClass="vjs-volume-horizontal";return this.options_.vertical&&(orientationClass="vjs-volume-vertical"),_Component.prototype.createEl.call(this,"div",{className:"vjs-volume-control vjs-control "+orientationClass})},_proto.handleMouseDown=function handleMouseDown(event){var doc=this.el_.ownerDocument;this.on(doc,"mousemove",this.throttledHandleMouseMove),this.on(doc,"touchmove",this.throttledHandleMouseMove),this.on(doc,"mouseup",this.handleMouseUp),this.on(doc,"touchend",this.handleMouseUp)},_proto.handleMouseUp=function handleMouseUp(event){var doc=this.el_.ownerDocument;this.off(doc,"mousemove",this.throttledHandleMouseMove),this.off(doc,"touchmove",this.throttledHandleMouseMove),this.off(doc,"mouseup",this.handleMouseUp),this.off(doc,"touchend",this.handleMouseUp)},_proto.handleMouseMove=function handleMouseMove(event){this.volumeBar.handleMouseMove(event)},VolumeControl}(Component);VolumeControl.prototype.options_={children:["volumeBar"]},Component.registerComponent("VolumeControl",VolumeControl);var MuteToggle=function(_Button){function MuteToggle(player,options){var _this;return function checkMuteSupport(self,player){player.tech_&&!player.tech_.featuresMuteControl&&self.addClass("vjs-hidden"),self.on(player,"loadstart",(function(){player.tech_.featuresMuteControl?self.removeClass("vjs-hidden"):self.addClass("vjs-hidden")}))}(video_es_assertThisInitialized(_this=_Button.call(this,player,options)||this),player),_this.on(player,["loadstart","volumechange"],_this.update),_this}video_es_inheritsLoose(MuteToggle,_Button);var _proto=MuteToggle.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-mute-control "+_Button.prototype.buildCSSClass.call(this)},_proto.handleClick=function handleClick(event){var vol=this.player_.volume(),lastVolume=this.player_.lastVolume_();if(0===vol){var volumeToSet=lastVolume<.1?.1:lastVolume;this.player_.volume(volumeToSet),this.player_.muted(!1)}else this.player_.muted(!this.player_.muted())},_proto.update=function update(event){this.updateIcon_(),this.updateControlText_()},_proto.updateIcon_=function updateIcon_(){var vol=this.player_.volume(),level=3;IS_IOS&&this.player_.tech_&&this.player_.tech_.el_&&this.player_.muted(this.player_.tech_.el_.muted),0===vol||this.player_.muted()?level=0:vol<.33?level=1:vol<.67&&(level=2);for(var i=0;i<4;i++)removeClass(this.el_,"vjs-vol-"+i);addClass(this.el_,"vjs-vol-"+level)},_proto.updateControlText_=function updateControlText_(){var text=this.player_.muted()||0===this.player_.volume()?"Unmute":"Mute";this.controlText()!==text&&this.controlText(text)},MuteToggle}(Button);MuteToggle.prototype.controlText_="Mute",Component.registerComponent("MuteToggle",MuteToggle);var VolumePanel=function(_Component){function VolumePanel(player,options){var _this;return void 0===options&&(options={}),void 0!==options.inline?options.inline=options.inline:options.inline=!0,(void 0===options.volumeControl||isPlain(options.volumeControl))&&(options.volumeControl=options.volumeControl||{},options.volumeControl.vertical=!options.inline),(_this=_Component.call(this,player,options)||this).on(player,["loadstart"],_this.volumePanelState_),_this.on(_this.muteToggle,"keyup",_this.handleKeyPress),_this.on(_this.volumeControl,"keyup",_this.handleVolumeControlKeyUp),_this.on("keydown",_this.handleKeyPress),_this.on("mouseover",_this.handleMouseOver),_this.on("mouseout",_this.handleMouseOut),_this.on(_this.volumeControl,["slideractive"],_this.sliderActive_),_this.on(_this.volumeControl,["sliderinactive"],_this.sliderInactive_),_this}video_es_inheritsLoose(VolumePanel,_Component);var _proto=VolumePanel.prototype;return _proto.sliderActive_=function sliderActive_(){this.addClass("vjs-slider-active")},_proto.sliderInactive_=function sliderInactive_(){this.removeClass("vjs-slider-active")},_proto.volumePanelState_=function volumePanelState_(){this.volumeControl.hasClass("vjs-hidden")&&this.muteToggle.hasClass("vjs-hidden")&&this.addClass("vjs-hidden"),this.volumeControl.hasClass("vjs-hidden")&&!this.muteToggle.hasClass("vjs-hidden")&&this.addClass("vjs-mute-toggle-only")},_proto.createEl=function createEl(){var orientationClass="vjs-volume-panel-horizontal";return this.options_.inline||(orientationClass="vjs-volume-panel-vertical"),_Component.prototype.createEl.call(this,"div",{className:"vjs-volume-panel vjs-control "+orientationClass})},_proto.dispose=function dispose(){this.handleMouseOut(),_Component.prototype.dispose.call(this)},_proto.handleVolumeControlKeyUp=function handleVolumeControlKeyUp(event){keycode_default().isEventKey(event,"Esc")&&this.muteToggle.focus()},_proto.handleMouseOver=function handleMouseOver(event){this.addClass("vjs-hover"),on(document_default(),"keyup",bind(this,this.handleKeyPress))},_proto.handleMouseOut=function handleMouseOut(event){this.removeClass("vjs-hover"),off(document_default(),"keyup",bind(this,this.handleKeyPress))},_proto.handleKeyPress=function handleKeyPress(event){keycode_default().isEventKey(event,"Esc")&&this.handleMouseOut()},VolumePanel}(Component);VolumePanel.prototype.options_={children:["muteToggle","volumeControl"]},Component.registerComponent("VolumePanel",VolumePanel);var Menu=function(_Component){function Menu(player,options){var _this;return _this=_Component.call(this,player,options)||this,options&&(_this.menuButton_=options.menuButton),_this.focusedChild_=-1,_this.on("keydown",_this.handleKeyDown),_this.boundHandleBlur_=bind(video_es_assertThisInitialized(_this),_this.handleBlur),_this.boundHandleTapClick_=bind(video_es_assertThisInitialized(_this),_this.handleTapClick),_this}video_es_inheritsLoose(Menu,_Component);var _proto=Menu.prototype;return _proto.addEventListenerForItem=function addEventListenerForItem(component){component instanceof Component&&(this.on(component,"blur",this.boundHandleBlur_),this.on(component,["tap","click"],this.boundHandleTapClick_))},_proto.removeEventListenerForItem=function removeEventListenerForItem(component){component instanceof Component&&(this.off(component,"blur",this.boundHandleBlur_),this.off(component,["tap","click"],this.boundHandleTapClick_))},_proto.removeChild=function removeChild(component){"string"==typeof component&&(component=this.getChild(component)),this.removeEventListenerForItem(component),_Component.prototype.removeChild.call(this,component)},_proto.addItem=function addItem(component){var childComponent=this.addChild(component);childComponent&&this.addEventListenerForItem(childComponent)},_proto.createEl=function createEl$1(){var contentElType=this.options_.contentElType||"ul";this.contentEl_=createEl(contentElType,{className:"vjs-menu-content"}),this.contentEl_.setAttribute("role","menu");var el=_Component.prototype.createEl.call(this,"div",{append:this.contentEl_,className:"vjs-menu"});return el.appendChild(this.contentEl_),on(el,"click",(function(event){event.preventDefault(),event.stopImmediatePropagation()})),el},_proto.dispose=function dispose(){this.contentEl_=null,this.boundHandleBlur_=null,this.boundHandleTapClick_=null,_Component.prototype.dispose.call(this)},_proto.handleBlur=function handleBlur(event){var relatedTarget=event.relatedTarget||document_default().activeElement;if(!this.children().some((function(element){return element.el()===relatedTarget}))){var btn=this.menuButton_;btn&&btn.buttonPressed_&&relatedTarget!==btn.el().firstChild&&btn.unpressButton()}},_proto.handleTapClick=function handleTapClick(event){if(this.menuButton_){this.menuButton_.unpressButton();var childComponents=this.children();if(!Array.isArray(childComponents))return;var foundComponent=childComponents.filter((function(component){return component.el()===event.target}))[0];if(!foundComponent)return;"CaptionSettingsMenuItem"!==foundComponent.name()&&this.menuButton_.focus()}},_proto.handleKeyDown=function handleKeyDown(event){keycode_default().isEventKey(event,"Left")||keycode_default().isEventKey(event,"Down")?(event.preventDefault(),event.stopPropagation(),this.stepForward()):(keycode_default().isEventKey(event,"Right")||keycode_default().isEventKey(event,"Up"))&&(event.preventDefault(),event.stopPropagation(),this.stepBack())},_proto.stepForward=function stepForward(){var stepChild=0;void 0!==this.focusedChild_&&(stepChild=this.focusedChild_+1),this.focus(stepChild)},_proto.stepBack=function stepBack(){var stepChild=0;void 0!==this.focusedChild_&&(stepChild=this.focusedChild_-1),this.focus(stepChild)},_proto.focus=function focus(item){void 0===item&&(item=0);var children=this.children().slice();children.length&&children[0].className&&/vjs-menu-title/.test(children[0].className)&&children.shift(),children.length>0&&(item<0?item=0:item>=children.length&&(item=children.length-1),this.focusedChild_=item,children[item].el_.focus())},Menu}(Component);Component.registerComponent("Menu",Menu);var MenuButton=function(_Component){function MenuButton(player,options){var _this;void 0===options&&(options={}),(_this=_Component.call(this,player,options)||this).menuButton_=new Button(player,options),_this.menuButton_.controlText(_this.controlText_),_this.menuButton_.el_.setAttribute("aria-haspopup","true");var buttonClass=Button.prototype.buildCSSClass();return _this.menuButton_.el_.className=_this.buildCSSClass()+" "+buttonClass,_this.menuButton_.removeClass("vjs-control"),_this.addChild(_this.menuButton_),_this.update(),_this.enabled_=!0,_this.on(_this.menuButton_,"tap",_this.handleClick),_this.on(_this.menuButton_,"click",_this.handleClick),_this.on(_this.menuButton_,"keydown",_this.handleKeyDown),_this.on(_this.menuButton_,"mouseenter",(function(){_this.addClass("vjs-hover"),_this.menu.show(),on(document_default(),"keyup",bind(video_es_assertThisInitialized(_this),_this.handleMenuKeyUp))})),_this.on("mouseleave",_this.handleMouseLeave),_this.on("keydown",_this.handleSubmenuKeyDown),_this}video_es_inheritsLoose(MenuButton,_Component);var _proto=MenuButton.prototype;return _proto.update=function update(){var menu=this.createMenu();this.menu&&(this.menu.dispose(),this.removeChild(this.menu)),this.menu=menu,this.addChild(menu),this.buttonPressed_=!1,this.menuButton_.el_.setAttribute("aria-expanded","false"),this.items&&this.items.length<=this.hideThreshold_?this.hide():this.show()},_proto.createMenu=function createMenu(){var menu=new Menu(this.player_,{menuButton:this});if(this.hideThreshold_=0,this.options_.title){var titleEl=createEl("li",{className:"vjs-menu-title",innerHTML:toTitleCase(this.options_.title),tabIndex:-1});this.hideThreshold_+=1;var titleComponent=new Component(this.player_,{el:titleEl});menu.addItem(titleComponent)}if(this.items=this.createItems(),this.items)for(var i=0;i<this.items.length;i++)menu.addItem(this.items[i]);return menu},_proto.createItems=function createItems(){},_proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:this.buildWrapperCSSClass()},{})},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){var menuButtonClass="vjs-menu-button";return!0===this.options_.inline?menuButtonClass+="-inline":menuButtonClass+="-popup","vjs-menu-button "+menuButtonClass+" "+Button.prototype.buildCSSClass()+" "+_Component.prototype.buildCSSClass.call(this)},_proto.buildCSSClass=function buildCSSClass(){var menuButtonClass="vjs-menu-button";return!0===this.options_.inline?menuButtonClass+="-inline":menuButtonClass+="-popup","vjs-menu-button "+menuButtonClass+" "+_Component.prototype.buildCSSClass.call(this)},_proto.controlText=function controlText(text,el){return void 0===el&&(el=this.menuButton_.el()),this.menuButton_.controlText(text,el)},_proto.dispose=function dispose(){this.handleMouseLeave(),_Component.prototype.dispose.call(this)},_proto.handleClick=function handleClick(event){this.buttonPressed_?this.unpressButton():this.pressButton()},_proto.handleMouseLeave=function handleMouseLeave(event){this.removeClass("vjs-hover"),off(document_default(),"keyup",bind(this,this.handleMenuKeyUp))},_proto.focus=function focus(){this.menuButton_.focus()},_proto.blur=function blur(){this.menuButton_.blur()},_proto.handleKeyDown=function handleKeyDown(event){keycode_default().isEventKey(event,"Esc")||keycode_default().isEventKey(event,"Tab")?(this.buttonPressed_&&this.unpressButton(),keycode_default().isEventKey(event,"Tab")||(event.preventDefault(),this.menuButton_.focus())):(keycode_default().isEventKey(event,"Up")||keycode_default().isEventKey(event,"Down"))&&(this.buttonPressed_||(event.preventDefault(),this.pressButton()))},_proto.handleMenuKeyUp=function handleMenuKeyUp(event){(keycode_default().isEventKey(event,"Esc")||keycode_default().isEventKey(event,"Tab"))&&this.removeClass("vjs-hover")},_proto.handleSubmenuKeyPress=function handleSubmenuKeyPress(event){this.handleSubmenuKeyDown(event)},_proto.handleSubmenuKeyDown=function handleSubmenuKeyDown(event){(keycode_default().isEventKey(event,"Esc")||keycode_default().isEventKey(event,"Tab"))&&(this.buttonPressed_&&this.unpressButton(),keycode_default().isEventKey(event,"Tab")||(event.preventDefault(),this.menuButton_.focus()))},_proto.pressButton=function pressButton(){if(this.enabled_){if(this.buttonPressed_=!0,this.menu.show(),this.menu.lockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","true"),IS_IOS&&isInFrame())return;this.menu.focus()}},_proto.unpressButton=function unpressButton(){this.enabled_&&(this.buttonPressed_=!1,this.menu.unlockShowing(),this.menu.hide(),this.menuButton_.el_.setAttribute("aria-expanded","false"))},_proto.disable=function disable(){this.unpressButton(),this.enabled_=!1,this.addClass("vjs-disabled"),this.menuButton_.disable()},_proto.enable=function enable(){this.enabled_=!0,this.removeClass("vjs-disabled"),this.menuButton_.enable()},MenuButton}(Component);Component.registerComponent("MenuButton",MenuButton);var TrackButton=function(_MenuButton){function TrackButton(player,options){var _this,tracks=options.tracks;if((_this=_MenuButton.call(this,player,options)||this).items.length<=1&&_this.hide(),!tracks)return video_es_assertThisInitialized(_this);var updateHandler=bind(video_es_assertThisInitialized(_this),_this.update);return tracks.addEventListener("removetrack",updateHandler),tracks.addEventListener("addtrack",updateHandler),_this.player_.on("ready",updateHandler),_this.player_.on("dispose",(function(){tracks.removeEventListener("removetrack",updateHandler),tracks.removeEventListener("addtrack",updateHandler)})),_this}return video_es_inheritsLoose(TrackButton,_MenuButton),TrackButton}(MenuButton);Component.registerComponent("TrackButton",TrackButton);var MenuKeys=["Tab","Esc","Up","Down","Right","Left"],MenuItem=function(_ClickableComponent){function MenuItem(player,options){var _this;return(_this=_ClickableComponent.call(this,player,options)||this).selectable=options.selectable,_this.isSelected_=options.selected||!1,_this.multiSelectable=options.multiSelectable,_this.selected(_this.isSelected_),_this.selectable?_this.multiSelectable?_this.el_.setAttribute("role","menuitemcheckbox"):_this.el_.setAttribute("role","menuitemradio"):_this.el_.setAttribute("role","menuitem"),_this}video_es_inheritsLoose(MenuItem,_ClickableComponent);var _proto=MenuItem.prototype;return _proto.createEl=function createEl(type,props,attrs){return this.nonIconControl=!0,_ClickableComponent.prototype.createEl.call(this,"li",video_es_assign({className:"vjs-menu-item",innerHTML:'<span class="vjs-menu-item-text">'+this.localize(this.options_.label)+"</span>",tabIndex:-1},props),attrs)},_proto.handleKeyDown=function handleKeyDown(event){MenuKeys.some((function(key){return keycode_default().isEventKey(event,key)}))||_ClickableComponent.prototype.handleKeyDown.call(this,event)},_proto.handleClick=function handleClick(event){this.selected(!0)},_proto.selected=function selected(_selected){this.selectable&&(_selected?(this.addClass("vjs-selected"),this.el_.setAttribute("aria-checked","true"),this.controlText(", selected"),this.isSelected_=!0):(this.removeClass("vjs-selected"),this.el_.setAttribute("aria-checked","false"),this.controlText(""),this.isSelected_=!1))},MenuItem}(ClickableComponent);Component.registerComponent("MenuItem",MenuItem);var TextTrackMenuItem=function(_MenuItem){function TextTrackMenuItem(player,options){var _this,track=options.track,tracks=player.textTracks();options.label=track.label||track.language||"Unknown",options.selected="showing"===track.mode,(_this=_MenuItem.call(this,player,options)||this).track=track,_this.kinds=(options.kinds||[options.kind||_this.track.kind]).filter(Boolean);var event,changeHandler=function changeHandler(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];_this.handleTracksChange.apply(video_es_assertThisInitialized(_this),args)},selectedLanguageChangeHandler=function selectedLanguageChangeHandler(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];_this.handleSelectedLanguageChange.apply(video_es_assertThisInitialized(_this),args)};(player.on(["loadstart","texttrackchange"],changeHandler),tracks.addEventListener("change",changeHandler),tracks.addEventListener("selectedlanguagechange",selectedLanguageChangeHandler),_this.on("dispose",(function(){player.off(["loadstart","texttrackchange"],changeHandler),tracks.removeEventListener("change",changeHandler),tracks.removeEventListener("selectedlanguagechange",selectedLanguageChangeHandler)})),void 0===tracks.onchange)&&_this.on(["tap","click"],(function(){if("object"!=typeof window_default().Event)try{event=new(window_default().Event)("change")}catch(err){}event||(event=document_default().createEvent("Event")).initEvent("change",!0,!0),tracks.dispatchEvent(event)}));return _this.handleTracksChange(),_this}video_es_inheritsLoose(TextTrackMenuItem,_MenuItem);var _proto=TextTrackMenuItem.prototype;return _proto.handleClick=function handleClick(event){var referenceTrack=this.track,tracks=this.player_.textTracks();if(_MenuItem.prototype.handleClick.call(this,event),tracks)for(var i=0;i<tracks.length;i++){var track=tracks[i];-1!==this.kinds.indexOf(track.kind)&&(track===referenceTrack?"showing"!==track.mode&&(track.mode="showing"):"disabled"!==track.mode&&(track.mode="disabled"))}},_proto.handleTracksChange=function handleTracksChange(event){var shouldBeSelected="showing"===this.track.mode;shouldBeSelected!==this.isSelected_&&this.selected(shouldBeSelected)},_proto.handleSelectedLanguageChange=function handleSelectedLanguageChange(event){if("showing"===this.track.mode){var selectedLanguage=this.player_.cache_.selectedLanguage;if(selectedLanguage&&selectedLanguage.enabled&&selectedLanguage.language===this.track.language&&selectedLanguage.kind!==this.track.kind)return;this.player_.cache_.selectedLanguage={enabled:!0,language:this.track.language,kind:this.track.kind}}},_proto.dispose=function dispose(){this.track=null,_MenuItem.prototype.dispose.call(this)},TextTrackMenuItem}(MenuItem);Component.registerComponent("TextTrackMenuItem",TextTrackMenuItem);var OffTextTrackMenuItem=function(_TextTrackMenuItem){function OffTextTrackMenuItem(player,options){return options.track={player,kind:options.kind,kinds:options.kinds,default:!1,mode:"disabled"},options.kinds||(options.kinds=[options.kind]),options.label?options.track.label=options.label:options.track.label=options.kinds.join(" and ")+" off",options.selectable=!0,options.multiSelectable=!1,_TextTrackMenuItem.call(this,player,options)||this}video_es_inheritsLoose(OffTextTrackMenuItem,_TextTrackMenuItem);var _proto=OffTextTrackMenuItem.prototype;return _proto.handleTracksChange=function handleTracksChange(event){for(var tracks=this.player().textTracks(),shouldBeSelected=!0,i=0,l=tracks.length;i<l;i++){var track=tracks[i];if(this.options_.kinds.indexOf(track.kind)>-1&&"showing"===track.mode){shouldBeSelected=!1;break}}shouldBeSelected!==this.isSelected_&&this.selected(shouldBeSelected)},_proto.handleSelectedLanguageChange=function handleSelectedLanguageChange(event){for(var tracks=this.player().textTracks(),allHidden=!0,i=0,l=tracks.length;i<l;i++){var track=tracks[i];if(["captions","descriptions","subtitles"].indexOf(track.kind)>-1&&"showing"===track.mode){allHidden=!1;break}}allHidden&&(this.player_.cache_.selectedLanguage={enabled:!1})},OffTextTrackMenuItem}(TextTrackMenuItem);Component.registerComponent("OffTextTrackMenuItem",OffTextTrackMenuItem);var TextTrackButton=function(_TrackButton){function TextTrackButton(player,options){return void 0===options&&(options={}),options.tracks=player.textTracks(),_TrackButton.call(this,player,options)||this}return video_es_inheritsLoose(TextTrackButton,_TrackButton),TextTrackButton.prototype.createItems=function createItems(items,TrackMenuItem){var label;void 0===items&&(items=[]),void 0===TrackMenuItem&&(TrackMenuItem=TextTrackMenuItem),this.label_&&(label=this.label_+" off"),items.push(new OffTextTrackMenuItem(this.player_,{kinds:this.kinds_,kind:this.kind_,label})),this.hideThreshold_+=1;var tracks=this.player_.textTracks();Array.isArray(this.kinds_)||(this.kinds_=[this.kind_]);for(var i=0;i<tracks.length;i++){var track=tracks[i];if(this.kinds_.indexOf(track.kind)>-1){var item=new TrackMenuItem(this.player_,{track,kinds:this.kinds_,kind:this.kind_,selectable:!0,multiSelectable:!1});item.addClass("vjs-"+track.kind+"-menu-item"),items.push(item)}}return items},TextTrackButton}(TrackButton);Component.registerComponent("TextTrackButton",TextTrackButton);var ChaptersTrackMenuItem=function(_MenuItem){function ChaptersTrackMenuItem(player,options){var _this,track=options.track,cue=options.cue,currentTime=player.currentTime();return options.selectable=!0,options.multiSelectable=!1,options.label=cue.text,options.selected=cue.startTime<=currentTime&&currentTime<cue.endTime,(_this=_MenuItem.call(this,player,options)||this).track=track,_this.cue=cue,track.addEventListener("cuechange",bind(video_es_assertThisInitialized(_this),_this.update)),_this}video_es_inheritsLoose(ChaptersTrackMenuItem,_MenuItem);var _proto=ChaptersTrackMenuItem.prototype;return _proto.handleClick=function handleClick(event){_MenuItem.prototype.handleClick.call(this),this.player_.currentTime(this.cue.startTime),this.update(this.cue.startTime)},_proto.update=function update(event){var cue=this.cue,currentTime=this.player_.currentTime();this.selected(cue.startTime<=currentTime&&currentTime<cue.endTime)},ChaptersTrackMenuItem}(MenuItem);Component.registerComponent("ChaptersTrackMenuItem",ChaptersTrackMenuItem);var ChaptersButton=function(_TextTrackButton){function ChaptersButton(player,options,ready){return _TextTrackButton.call(this,player,options,ready)||this}video_es_inheritsLoose(ChaptersButton,_TextTrackButton);var _proto=ChaptersButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-chapters-button "+_TextTrackButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-chapters-button "+_TextTrackButton.prototype.buildWrapperCSSClass.call(this)},_proto.update=function update(event){this.track_&&(!event||"addtrack"!==event.type&&"removetrack"!==event.type)||this.setTrack(this.findChaptersTrack()),_TextTrackButton.prototype.update.call(this)},_proto.setTrack=function setTrack(track){if(this.track_!==track){if(this.updateHandler_||(this.updateHandler_=this.update.bind(this)),this.track_){var remoteTextTrackEl=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);remoteTextTrackEl&&remoteTextTrackEl.removeEventListener("load",this.updateHandler_),this.track_=null}if(this.track_=track,this.track_){this.track_.mode="hidden";var _remoteTextTrackEl=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);_remoteTextTrackEl&&_remoteTextTrackEl.addEventListener("load",this.updateHandler_)}}},_proto.findChaptersTrack=function findChaptersTrack(){for(var tracks=this.player_.textTracks()||[],i=tracks.length-1;i>=0;i--){var track=tracks[i];if(track.kind===this.kind_)return track}},_proto.getMenuCaption=function getMenuCaption(){return this.track_&&this.track_.label?this.track_.label:this.localize(toTitleCase(this.kind_))},_proto.createMenu=function createMenu(){return this.options_.title=this.getMenuCaption(),_TextTrackButton.prototype.createMenu.call(this)},_proto.createItems=function createItems(){var items=[];if(!this.track_)return items;var cues=this.track_.cues;if(!cues)return items;for(var i=0,l=cues.length;i<l;i++){var cue=cues[i],mi=new ChaptersTrackMenuItem(this.player_,{track:this.track_,cue});items.push(mi)}return items},ChaptersButton}(TextTrackButton);ChaptersButton.prototype.kind_="chapters",ChaptersButton.prototype.controlText_="Chapters",Component.registerComponent("ChaptersButton",ChaptersButton);var DescriptionsButton=function(_TextTrackButton){function DescriptionsButton(player,options,ready){var _this;_this=_TextTrackButton.call(this,player,options,ready)||this;var tracks=player.textTracks(),changeHandler=bind(video_es_assertThisInitialized(_this),_this.handleTracksChange);return tracks.addEventListener("change",changeHandler),_this.on("dispose",(function(){tracks.removeEventListener("change",changeHandler)})),_this}video_es_inheritsLoose(DescriptionsButton,_TextTrackButton);var _proto=DescriptionsButton.prototype;return _proto.handleTracksChange=function handleTracksChange(event){for(var tracks=this.player().textTracks(),disabled=!1,i=0,l=tracks.length;i<l;i++){var track=tracks[i];if(track.kind!==this.kind_&&"showing"===track.mode){disabled=!0;break}}disabled?this.disable():this.enable()},_proto.buildCSSClass=function buildCSSClass(){return"vjs-descriptions-button "+_TextTrackButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-descriptions-button "+_TextTrackButton.prototype.buildWrapperCSSClass.call(this)},DescriptionsButton}(TextTrackButton);DescriptionsButton.prototype.kind_="descriptions",DescriptionsButton.prototype.controlText_="Descriptions",Component.registerComponent("DescriptionsButton",DescriptionsButton);var SubtitlesButton=function(_TextTrackButton){function SubtitlesButton(player,options,ready){return _TextTrackButton.call(this,player,options,ready)||this}video_es_inheritsLoose(SubtitlesButton,_TextTrackButton);var _proto=SubtitlesButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-subtitles-button "+_TextTrackButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-subtitles-button "+_TextTrackButton.prototype.buildWrapperCSSClass.call(this)},SubtitlesButton}(TextTrackButton);SubtitlesButton.prototype.kind_="subtitles",SubtitlesButton.prototype.controlText_="Subtitles",Component.registerComponent("SubtitlesButton",SubtitlesButton);var CaptionSettingsMenuItem=function(_TextTrackMenuItem){function CaptionSettingsMenuItem(player,options){var _this;return options.track={player,kind:options.kind,label:options.kind+" settings",selectable:!1,default:!1,mode:"disabled"},options.selectable=!1,options.name="CaptionSettingsMenuItem",(_this=_TextTrackMenuItem.call(this,player,options)||this).addClass("vjs-texttrack-settings"),_this.controlText(", opens "+options.kind+" settings dialog"),_this}return video_es_inheritsLoose(CaptionSettingsMenuItem,_TextTrackMenuItem),CaptionSettingsMenuItem.prototype.handleClick=function handleClick(event){this.player().getChild("textTrackSettings").open()},CaptionSettingsMenuItem}(TextTrackMenuItem);Component.registerComponent("CaptionSettingsMenuItem",CaptionSettingsMenuItem);var CaptionsButton=function(_TextTrackButton){function CaptionsButton(player,options,ready){return _TextTrackButton.call(this,player,options,ready)||this}video_es_inheritsLoose(CaptionsButton,_TextTrackButton);var _proto=CaptionsButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-captions-button "+_TextTrackButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-captions-button "+_TextTrackButton.prototype.buildWrapperCSSClass.call(this)},_proto.createItems=function createItems(){var items=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||!this.player().getChild("textTrackSettings")||(items.push(new CaptionSettingsMenuItem(this.player_,{kind:this.kind_})),this.hideThreshold_+=1),_TextTrackButton.prototype.createItems.call(this,items)},CaptionsButton}(TextTrackButton);CaptionsButton.prototype.kind_="captions",CaptionsButton.prototype.controlText_="Captions",Component.registerComponent("CaptionsButton",CaptionsButton);var SubsCapsMenuItem=function(_TextTrackMenuItem){function SubsCapsMenuItem(){return _TextTrackMenuItem.apply(this,arguments)||this}return video_es_inheritsLoose(SubsCapsMenuItem,_TextTrackMenuItem),SubsCapsMenuItem.prototype.createEl=function createEl(type,props,attrs){var innerHTML='<span class="vjs-menu-item-text">'+this.localize(this.options_.label);return"captions"===this.options_.track.kind&&(innerHTML+='\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> '+this.localize("Captions")+"</span>\n      "),innerHTML+="</span>",_TextTrackMenuItem.prototype.createEl.call(this,type,video_es_assign({innerHTML},props),attrs)},SubsCapsMenuItem}(TextTrackMenuItem);Component.registerComponent("SubsCapsMenuItem",SubsCapsMenuItem);var SubsCapsButton=function(_TextTrackButton){function SubsCapsButton(player,options){var _this;return void 0===options&&(options={}),(_this=_TextTrackButton.call(this,player,options)||this).label_="subtitles",["en","en-us","en-ca","fr-ca"].indexOf(_this.player_.language_)>-1&&(_this.label_="captions"),_this.menuButton_.controlText(toTitleCase(_this.label_)),_this}video_es_inheritsLoose(SubsCapsButton,_TextTrackButton);var _proto=SubsCapsButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-subs-caps-button "+_TextTrackButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-subs-caps-button "+_TextTrackButton.prototype.buildWrapperCSSClass.call(this)},_proto.createItems=function createItems(){var items=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||!this.player().getChild("textTrackSettings")||(items.push(new CaptionSettingsMenuItem(this.player_,{kind:this.label_})),this.hideThreshold_+=1),items=_TextTrackButton.prototype.createItems.call(this,items,SubsCapsMenuItem)},SubsCapsButton}(TextTrackButton);SubsCapsButton.prototype.kinds_=["captions","subtitles"],SubsCapsButton.prototype.controlText_="Subtitles",Component.registerComponent("SubsCapsButton",SubsCapsButton);var AudioTrackMenuItem=function(_MenuItem){function AudioTrackMenuItem(player,options){var _this,track=options.track,tracks=player.audioTracks();options.label=track.label||track.language||"Unknown",options.selected=track.enabled,(_this=_MenuItem.call(this,player,options)||this).track=track,_this.addClass("vjs-"+track.kind+"-menu-item");var changeHandler=function changeHandler(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];_this.handleTracksChange.apply(video_es_assertThisInitialized(_this),args)};return tracks.addEventListener("change",changeHandler),_this.on("dispose",(function(){tracks.removeEventListener("change",changeHandler)})),_this}video_es_inheritsLoose(AudioTrackMenuItem,_MenuItem);var _proto=AudioTrackMenuItem.prototype;return _proto.createEl=function createEl(type,props,attrs){var innerHTML='<span class="vjs-menu-item-text">'+this.localize(this.options_.label);return"main-desc"===this.options_.track.kind&&(innerHTML+='\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> '+this.localize("Descriptions")+"</span>\n      "),innerHTML+="</span>",_MenuItem.prototype.createEl.call(this,type,video_es_assign({innerHTML},props),attrs)},_proto.handleClick=function handleClick(event){var tracks=this.player_.audioTracks();_MenuItem.prototype.handleClick.call(this,event);for(var i=0;i<tracks.length;i++){var track=tracks[i];track.enabled=track===this.track}},_proto.handleTracksChange=function handleTracksChange(event){this.selected(this.track.enabled)},AudioTrackMenuItem}(MenuItem);Component.registerComponent("AudioTrackMenuItem",AudioTrackMenuItem);var AudioTrackButton=function(_TrackButton){function AudioTrackButton(player,options){return void 0===options&&(options={}),options.tracks=player.audioTracks(),_TrackButton.call(this,player,options)||this}video_es_inheritsLoose(AudioTrackButton,_TrackButton);var _proto=AudioTrackButton.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-audio-button "+_TrackButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-audio-button "+_TrackButton.prototype.buildWrapperCSSClass.call(this)},_proto.createItems=function createItems(items){void 0===items&&(items=[]),this.hideThreshold_=1;for(var tracks=this.player_.audioTracks(),i=0;i<tracks.length;i++){var track=tracks[i];items.push(new AudioTrackMenuItem(this.player_,{track,selectable:!0,multiSelectable:!1}))}return items},AudioTrackButton}(TrackButton);AudioTrackButton.prototype.controlText_="Audio Track",Component.registerComponent("AudioTrackButton",AudioTrackButton);var PlaybackRateMenuItem=function(_MenuItem){function PlaybackRateMenuItem(player,options){var _this,label=options.rate,rate=parseFloat(label,10);return options.label=label,options.selected=1===rate,options.selectable=!0,options.multiSelectable=!1,(_this=_MenuItem.call(this,player,options)||this).label=label,_this.rate=rate,_this.on(player,"ratechange",_this.update),_this}video_es_inheritsLoose(PlaybackRateMenuItem,_MenuItem);var _proto=PlaybackRateMenuItem.prototype;return _proto.handleClick=function handleClick(event){_MenuItem.prototype.handleClick.call(this),this.player().playbackRate(this.rate)},_proto.update=function update(event){this.selected(this.player().playbackRate()===this.rate)},PlaybackRateMenuItem}(MenuItem);PlaybackRateMenuItem.prototype.contentElType="button",Component.registerComponent("PlaybackRateMenuItem",PlaybackRateMenuItem);var PlaybackRateMenuButton=function(_MenuButton){function PlaybackRateMenuButton(player,options){var _this;return(_this=_MenuButton.call(this,player,options)||this).updateVisibility(),_this.updateLabel(),_this.on(player,"loadstart",_this.updateVisibility),_this.on(player,"ratechange",_this.updateLabel),_this}video_es_inheritsLoose(PlaybackRateMenuButton,_MenuButton);var _proto=PlaybackRateMenuButton.prototype;return _proto.createEl=function createEl$1(){var el=_MenuButton.prototype.createEl.call(this);return this.labelEl_=createEl("div",{className:"vjs-playback-rate-value",innerHTML:"1x"}),el.appendChild(this.labelEl_),el},_proto.dispose=function dispose(){this.labelEl_=null,_MenuButton.prototype.dispose.call(this)},_proto.buildCSSClass=function buildCSSClass(){return"vjs-playback-rate "+_MenuButton.prototype.buildCSSClass.call(this)},_proto.buildWrapperCSSClass=function buildWrapperCSSClass(){return"vjs-playback-rate "+_MenuButton.prototype.buildWrapperCSSClass.call(this)},_proto.createMenu=function createMenu(){var menu=new Menu(this.player()),rates=this.playbackRates();if(rates)for(var i=rates.length-1;i>=0;i--)menu.addChild(new PlaybackRateMenuItem(this.player(),{rate:rates[i]+"x"}));return menu},_proto.updateARIAAttributes=function updateARIAAttributes(){this.el().setAttribute("aria-valuenow",this.player().playbackRate())},_proto.handleClick=function handleClick(event){for(var currentRate=this.player().playbackRate(),rates=this.playbackRates(),newRate=rates[0],i=0;i<rates.length;i++)if(rates[i]>currentRate){newRate=rates[i];break}this.player().playbackRate(newRate)},_proto.playbackRates=function playbackRates(){return this.options_.playbackRates||this.options_.playerOptions&&this.options_.playerOptions.playbackRates},_proto.playbackRateSupported=function playbackRateSupported(){return this.player().tech_&&this.player().tech_.featuresPlaybackRate&&this.playbackRates()&&this.playbackRates().length>0},_proto.updateVisibility=function updateVisibility(event){this.playbackRateSupported()?this.removeClass("vjs-hidden"):this.addClass("vjs-hidden")},_proto.updateLabel=function updateLabel(event){this.playbackRateSupported()&&(this.labelEl_.innerHTML=this.player().playbackRate()+"x")},PlaybackRateMenuButton}(MenuButton);PlaybackRateMenuButton.prototype.controlText_="Playback Rate",Component.registerComponent("PlaybackRateMenuButton",PlaybackRateMenuButton);var Spacer=function(_Component){function Spacer(){return _Component.apply(this,arguments)||this}video_es_inheritsLoose(Spacer,_Component);var _proto=Spacer.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-spacer "+_Component.prototype.buildCSSClass.call(this)},_proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},Spacer}(Component);Component.registerComponent("Spacer",Spacer);var CustomControlSpacer=function(_Spacer){function CustomControlSpacer(){return _Spacer.apply(this,arguments)||this}video_es_inheritsLoose(CustomControlSpacer,_Spacer);var _proto=CustomControlSpacer.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-custom-control-spacer "+_Spacer.prototype.buildCSSClass.call(this)},_proto.createEl=function createEl(){var el=_Spacer.prototype.createEl.call(this,{className:this.buildCSSClass()});return el.innerHTML=" ",el},CustomControlSpacer}(Spacer);Component.registerComponent("CustomControlSpacer",CustomControlSpacer);var ControlBar=function(_Component){function ControlBar(){return _Component.apply(this,arguments)||this}return video_es_inheritsLoose(ControlBar,_Component),ControlBar.prototype.createEl=function createEl(){return _Component.prototype.createEl.call(this,"div",{className:"vjs-control-bar",dir:"ltr"})},ControlBar}(Component);ControlBar.prototype.options_={children:["playToggle","volumePanel","currentTimeDisplay","timeDivider","durationDisplay","progressControl","liveDisplay","seekToLive","remainingTimeDisplay","customControlSpacer","playbackRateMenuButton","chaptersButton","descriptionsButton","subsCapsButton","audioTrackButton","fullscreenToggle"]},"exitPictureInPicture"in document_default()&&ControlBar.prototype.options_.children.splice(ControlBar.prototype.options_.children.length-1,0,"pictureInPictureToggle"),Component.registerComponent("ControlBar",ControlBar);var ErrorDisplay=function(_ModalDialog){function ErrorDisplay(player,options){var _this;return(_this=_ModalDialog.call(this,player,options)||this).on(player,"error",_this.open),_this}video_es_inheritsLoose(ErrorDisplay,_ModalDialog);var _proto=ErrorDisplay.prototype;return _proto.buildCSSClass=function buildCSSClass(){return"vjs-error-display "+_ModalDialog.prototype.buildCSSClass.call(this)},_proto.content=function content(){var error=this.player().error();return error?this.localize(error.message):""},ErrorDisplay}(ModalDialog);ErrorDisplay.prototype.options_=mergeOptions(ModalDialog.prototype.options_,{pauseOnOpen:!1,fillAlways:!0,temporary:!1,uncloseable:!0}),Component.registerComponent("ErrorDisplay",ErrorDisplay);var COLOR_BLACK=["#000","Black"],COLOR_BLUE=["#00F","Blue"],COLOR_CYAN=["#0FF","Cyan"],COLOR_GREEN=["#0F0","Green"],COLOR_MAGENTA=["#F0F","Magenta"],COLOR_RED=["#F00","Red"],COLOR_WHITE=["#FFF","White"],COLOR_YELLOW=["#FF0","Yellow"],OPACITY_OPAQUE=["1","Opaque"],OPACITY_SEMI=["0.5","Semi-Transparent"],OPACITY_TRANS=["0","Transparent"],selectConfigs={backgroundColor:{selector:".vjs-bg-color > select",id:"captions-background-color-%s",label:"Color",options:[COLOR_BLACK,COLOR_WHITE,COLOR_RED,COLOR_GREEN,COLOR_BLUE,COLOR_YELLOW,COLOR_MAGENTA,COLOR_CYAN]},backgroundOpacity:{selector:".vjs-bg-opacity > select",id:"captions-background-opacity-%s",label:"Transparency",options:[OPACITY_OPAQUE,OPACITY_SEMI,OPACITY_TRANS]},color:{selector:".vjs-fg-color > select",id:"captions-foreground-color-%s",label:"Color",options:[COLOR_WHITE,COLOR_BLACK,COLOR_RED,COLOR_GREEN,COLOR_BLUE,COLOR_YELLOW,COLOR_MAGENTA,COLOR_CYAN]},edgeStyle:{selector:".vjs-edge-style > select",id:"%s",label:"Text Edge Style",options:[["none","None"],["raised","Raised"],["depressed","Depressed"],["uniform","Uniform"],["dropshadow","Dropshadow"]]},fontFamily:{selector:".vjs-font-family > select",id:"captions-font-family-%s",label:"Font Family",options:[["proportionalSansSerif","Proportional Sans-Serif"],["monospaceSansSerif","Monospace Sans-Serif"],["proportionalSerif","Proportional Serif"],["monospaceSerif","Monospace Serif"],["casual","Casual"],["script","Script"],["small-caps","Small Caps"]]},fontPercent:{selector:".vjs-font-percent > select",id:"captions-font-size-%s",label:"Font Size",options:[["0.50","50%"],["0.75","75%"],["1.00","100%"],["1.25","125%"],["1.50","150%"],["1.75","175%"],["2.00","200%"],["3.00","300%"],["4.00","400%"]],default:2,parser:function parser(v){return"1.00"===v?null:Number(v)}},textOpacity:{selector:".vjs-text-opacity > select",id:"captions-foreground-opacity-%s",label:"Transparency",options:[OPACITY_OPAQUE,OPACITY_SEMI]},windowColor:{selector:".vjs-window-color > select",id:"captions-window-color-%s",label:"Color"},windowOpacity:{selector:".vjs-window-opacity > select",id:"captions-window-opacity-%s",label:"Transparency",options:[OPACITY_TRANS,OPACITY_SEMI,OPACITY_OPAQUE]}};function parseOptionValue(value,parser){if(parser&&(value=parser(value)),value&&"none"!==value)return value}selectConfigs.windowColor.options=selectConfigs.backgroundColor.options;var TextTrackSettings=function(_ModalDialog){function TextTrackSettings(player,options){var _this;return options.temporary=!1,(_this=_ModalDialog.call(this,player,options)||this).updateDisplay=bind(video_es_assertThisInitialized(_this),_this.updateDisplay),_this.fill(),_this.hasBeenOpened_=_this.hasBeenFilled_=!0,_this.endDialog=createEl("p",{className:"vjs-control-text",textContent:_this.localize("End of dialog window.")}),_this.el().appendChild(_this.endDialog),_this.setDefaults(),void 0===options.persistTextTrackSettings&&(_this.options_.persistTextTrackSettings=_this.options_.playerOptions.persistTextTrackSettings),_this.on(_this.$(".vjs-done-button"),"click",(function(){_this.saveSettings(),_this.close()})),_this.on(_this.$(".vjs-default-button"),"click",(function(){_this.setDefaults(),_this.updateDisplay()})),each(selectConfigs,(function(config){_this.on(_this.$(config.selector),"change",_this.updateDisplay)})),_this.options_.persistTextTrackSettings&&_this.restoreSettings(),_this}video_es_inheritsLoose(TextTrackSettings,_ModalDialog);var _proto=TextTrackSettings.prototype;return _proto.dispose=function dispose(){this.endDialog=null,_ModalDialog.prototype.dispose.call(this)},_proto.createElSelect_=function createElSelect_(key,legendId,type){var _this2=this;void 0===legendId&&(legendId=""),void 0===type&&(type="label");var config=selectConfigs[key],id=config.id.replace("%s",this.id_),selectLabelledbyIds=[legendId,id].join(" ").trim();return["<"+type+' id="'+id+'" class="'+("label"===type?"vjs-label":"")+'">',this.localize(config.label),"</"+type+">",'<select aria-labelledby="'+selectLabelledbyIds+'">'].concat(config.options.map((function(o){var optionId=id+"-"+o[1].replace(/\W+/g,"");return['<option id="'+optionId+'" value="'+o[0]+'" ','aria-labelledby="'+selectLabelledbyIds+" "+optionId+'">',_this2.localize(o[1]),"</option>"].join("")}))).concat("</select>").join("")},_proto.createElFgColor_=function createElFgColor_(){var legendId="captions-text-legend-"+this.id_;return['<fieldset class="vjs-fg-color vjs-track-setting">','<legend id="'+legendId+'">',this.localize("Text"),"</legend>",this.createElSelect_("color",legendId),'<span class="vjs-text-opacity vjs-opacity">',this.createElSelect_("textOpacity",legendId),"</span>","</fieldset>"].join("")},_proto.createElBgColor_=function createElBgColor_(){var legendId="captions-background-"+this.id_;return['<fieldset class="vjs-bg-color vjs-track-setting">','<legend id="'+legendId+'">',this.localize("Background"),"</legend>",this.createElSelect_("backgroundColor",legendId),'<span class="vjs-bg-opacity vjs-opacity">',this.createElSelect_("backgroundOpacity",legendId),"</span>","</fieldset>"].join("")},_proto.createElWinColor_=function createElWinColor_(){var legendId="captions-window-"+this.id_;return['<fieldset class="vjs-window-color vjs-track-setting">','<legend id="'+legendId+'">',this.localize("Window"),"</legend>",this.createElSelect_("windowColor",legendId),'<span class="vjs-window-opacity vjs-opacity">',this.createElSelect_("windowOpacity",legendId),"</span>","</fieldset>"].join("")},_proto.createElColors_=function createElColors_(){return createEl("div",{className:"vjs-track-settings-colors",innerHTML:[this.createElFgColor_(),this.createElBgColor_(),this.createElWinColor_()].join("")})},_proto.createElFont_=function createElFont_(){return createEl("div",{className:"vjs-track-settings-font",innerHTML:['<fieldset class="vjs-font-percent vjs-track-setting">',this.createElSelect_("fontPercent","","legend"),"</fieldset>",'<fieldset class="vjs-edge-style vjs-track-setting">',this.createElSelect_("edgeStyle","","legend"),"</fieldset>",'<fieldset class="vjs-font-family vjs-track-setting">',this.createElSelect_("fontFamily","","legend"),"</fieldset>"].join("")})},_proto.createElControls_=function createElControls_(){var defaultsDescription=this.localize("restore all settings to the default values");return createEl("div",{className:"vjs-track-settings-controls",innerHTML:['<button type="button" class="vjs-default-button" title="'+defaultsDescription+'">',this.localize("Reset"),'<span class="vjs-control-text"> '+defaultsDescription+"</span>","</button>",'<button type="button" class="vjs-done-button">'+this.localize("Done")+"</button>"].join("")})},_proto.content=function content(){return[this.createElColors_(),this.createElFont_(),this.createElControls_()]},_proto.label=function label(){return this.localize("Caption Settings Dialog")},_proto.description=function description(){return this.localize("Beginning of dialog window. Escape will cancel and close the window.")},_proto.buildCSSClass=function buildCSSClass(){return _ModalDialog.prototype.buildCSSClass.call(this)+" vjs-text-track-settings"},_proto.getValues=function getValues(){var _this3=this;return function reduce(object,fn,initial){return void 0===initial&&(initial=0),keys(object).reduce((function(accum,key){return fn(accum,object[key],key)}),initial)}(selectConfigs,(function(accum,config,key){var value=function getSelectedOptionValue(el,parser){return parseOptionValue(el.options[el.options.selectedIndex].value,parser)}(_this3.$(config.selector),config.parser);return void 0!==value&&(accum[key]=value),accum}),{})},_proto.setValues=function setValues(values){var _this4=this;each(selectConfigs,(function(config,key){!function setSelectedOption(el,value,parser){if(value)for(var i=0;i<el.options.length;i++)if(parseOptionValue(el.options[i].value,parser)===value){el.selectedIndex=i;break}}(_this4.$(config.selector),values[key],config.parser)}))},_proto.setDefaults=function setDefaults(){var _this5=this;each(selectConfigs,(function(config){var index=config.hasOwnProperty("default")?config.default:0;_this5.$(config.selector).selectedIndex=index}))},_proto.restoreSettings=function restoreSettings(){var values;try{values=JSON.parse(window_default().localStorage.getItem("vjs-text-track-settings"))}catch(err){log.warn(err)}values&&this.setValues(values)},_proto.saveSettings=function saveSettings(){if(this.options_.persistTextTrackSettings){var values=this.getValues();try{Object.keys(values).length?window_default().localStorage.setItem("vjs-text-track-settings",JSON.stringify(values)):window_default().localStorage.removeItem("vjs-text-track-settings")}catch(err){log.warn(err)}}},_proto.updateDisplay=function updateDisplay(){var ttDisplay=this.player_.getChild("textTrackDisplay");ttDisplay&&ttDisplay.updateDisplay()},_proto.conditionalBlur_=function conditionalBlur_(){this.previouslyActiveEl_=null;var cb=this.player_.controlBar,subsCapsBtn=cb&&cb.subsCapsButton,ccBtn=cb&&cb.captionsButton;subsCapsBtn?subsCapsBtn.focus():ccBtn&&ccBtn.focus()},TextTrackSettings}(ModalDialog);Component.registerComponent("TextTrackSettings",TextTrackSettings);var ResizeManager=function(_Component){function ResizeManager(player,options){var _this,RESIZE_OBSERVER_AVAILABLE=options.ResizeObserver||window_default().ResizeObserver;null===options.ResizeObserver&&(RESIZE_OBSERVER_AVAILABLE=!1);var options_=mergeOptions({createEl:!RESIZE_OBSERVER_AVAILABLE,reportTouchActivity:!1},options);return(_this=_Component.call(this,player,options_)||this).ResizeObserver=options.ResizeObserver||window_default().ResizeObserver,_this.loadListener_=null,_this.resizeObserver_=null,_this.debouncedHandler_=function debounce(func,wait,immediate,context){var timeout;void 0===context&&(context=window_default());var debounced=function debounced(){var self=this,args=arguments,_later=function later(){timeout=null,_later=null,immediate||func.apply(self,args)};!timeout&&immediate&&func.apply(self,args),context.clearTimeout(timeout),timeout=context.setTimeout(_later,wait)};return debounced.cancel=function cancel(){context.clearTimeout(timeout),timeout=null},debounced}((function(){_this.resizeHandler()}),100,!1,video_es_assertThisInitialized(_this)),RESIZE_OBSERVER_AVAILABLE?(_this.resizeObserver_=new _this.ResizeObserver(_this.debouncedHandler_),_this.resizeObserver_.observe(player.el())):(_this.loadListener_=function(){if(_this.el_&&_this.el_.contentWindow){var debouncedHandler_=_this.debouncedHandler_,unloadListener_=_this.unloadListener_=function(){off(this,"resize",debouncedHandler_),off(this,"unload",unloadListener_),unloadListener_=null};on(_this.el_.contentWindow,"unload",unloadListener_),on(_this.el_.contentWindow,"resize",debouncedHandler_)}},_this.one("load",_this.loadListener_)),_this}video_es_inheritsLoose(ResizeManager,_Component);var _proto=ResizeManager.prototype;return _proto.createEl=function createEl(){return _Component.prototype.createEl.call(this,"iframe",{className:"vjs-resize-manager",tabIndex:-1},{"aria-hidden":"true"})},_proto.resizeHandler=function resizeHandler(){this.player_&&this.player_.trigger&&this.player_.trigger("playerresize")},_proto.dispose=function dispose(){this.debouncedHandler_&&this.debouncedHandler_.cancel(),this.resizeObserver_&&(this.player_.el()&&this.resizeObserver_.unobserve(this.player_.el()),this.resizeObserver_.disconnect()),this.loadListener_&&this.off("load",this.loadListener_),this.el_&&this.el_.contentWindow&&this.unloadListener_&&this.unloadListener_.call(this.el_.contentWindow),this.ResizeObserver=null,this.resizeObserver=null,this.debouncedHandler_=null,this.loadListener_=null,_Component.prototype.dispose.call(this)},ResizeManager}(Component);Component.registerComponent("ResizeManager",ResizeManager);var LiveTracker=function(_Component){function LiveTracker(player,options){var _this,options_=mergeOptions({createEl:!1},options);return(_this=_Component.call(this,player,options_)||this).reset_(),_this.on(_this.player_,"durationchange",_this.handleDurationchange),IE_VERSION&&"hidden"in document_default()&&"visibilityState"in document_default()&&_this.on(document_default(),"visibilitychange",_this.handleVisibilityChange),_this}video_es_inheritsLoose(LiveTracker,_Component);var _proto=LiveTracker.prototype;return _proto.handleVisibilityChange=function handleVisibilityChange(){this.player_.duration()===1/0&&(document_default().hidden?this.stopTracking():this.startTracking())},_proto.isBehind_=function isBehind_(){if(!this.timeupdateSeen_)return!1;var liveCurrentTime=this.liveCurrentTime(),currentTime=this.player_.currentTime(),liveEdgeWindow=2*this.seekableIncrement_+.07;return liveCurrentTime!==1/0&&liveCurrentTime-liveEdgeWindow>=currentTime},_proto.trackLive_=function trackLive_(){this.pastSeekEnd_=this.pastSeekEnd_;var seekable=this.player_.seekable();if(seekable&&seekable.length){var newSeekEnd=this.seekableEnd();newSeekEnd!==this.lastSeekEnd_&&(this.lastSeekEnd_&&(this.seekableIncrementList_=this.seekableIncrementList_.slice(-11),this.seekableIncrementList_.push(Math.abs(newSeekEnd-this.lastSeekEnd_)),this.seekableIncrementList_.length>3&&(this.seekableIncrement_=function median(arr){var mid=Math.floor(arr.length/2),sortedList=[].concat(arr).sort((function(a,b){return a-b}));return arr.length%2!=0?sortedList[mid]:(sortedList[mid-1]+sortedList[mid])/2}(this.seekableIncrementList_))),this.pastSeekEnd_=0,this.lastSeekEnd_=newSeekEnd,this.trigger("seekableendchange")),this.pastSeekEnd_=this.pastSeekEnd()+.03,this.isBehind_()!==this.behindLiveEdge()&&(this.behindLiveEdge_=this.isBehind_(),this.trigger("liveedgechange"))}},_proto.handleDurationchange=function handleDurationchange(){this.player_.duration()===1/0?this.startTracking():this.stopTracking()},_proto.startTracking=function startTracking(){var _this2=this;this.isTracking()||(this.timeupdateSeen_||(this.timeupdateSeen_=this.player_.hasStarted()),this.trackingInterval_=this.setInterval(this.trackLive_,30),this.trackLive_(),this.on(this.player_,"play",this.trackLive_),this.on(this.player_,"pause",this.trackLive_),this.timeupdateSeen_||(this.one(this.player_,"play",this.handlePlay),this.handleTimeupdate=function(){_this2.timeupdateSeen_=!0,_this2.handleTimeupdate=null},this.one(this.player_,"timeupdate",this.handleTimeupdate)))},_proto.handlePlay=function handlePlay(){this.one(this.player_,"timeupdate",this.seekToLiveEdge)},_proto.reset_=function reset_(){this.pastSeekEnd_=0,this.lastSeekEnd_=null,this.behindLiveEdge_=null,this.timeupdateSeen_=!1,this.clearInterval(this.trackingInterval_),this.trackingInterval_=null,this.seekableIncrement_=12,this.seekableIncrementList_=[],this.off(this.player_,"play",this.trackLive_),this.off(this.player_,"pause",this.trackLive_),this.off(this.player_,"play",this.handlePlay),this.off(this.player_,"timeupdate",this.seekToLiveEdge),this.handleTimeupdate&&(this.off(this.player_,"timeupdate",this.handleTimeupdate),this.handleTimeupdate=null)},_proto.stopTracking=function stopTracking(){this.isTracking()&&this.reset_()},_proto.seekableEnd=function seekableEnd(){for(var seekable=this.player_.seekable(),seekableEnds=[],i=seekable?seekable.length:0;i--;)seekableEnds.push(seekable.end(i));return seekableEnds.length?seekableEnds.sort()[seekableEnds.length-1]:1/0},_proto.seekableStart=function seekableStart(){for(var seekable=this.player_.seekable(),seekableStarts=[],i=seekable?seekable.length:0;i--;)seekableStarts.push(seekable.start(i));return seekableStarts.length?seekableStarts.sort()[0]:0},_proto.liveWindow=function liveWindow(){var liveCurrentTime=this.liveCurrentTime();return liveCurrentTime===1/0?1/0:liveCurrentTime-this.seekableStart()},_proto.isLive=function isLive(){return this.isTracking()},_proto.atLiveEdge=function atLiveEdge(){return!this.behindLiveEdge()},_proto.liveCurrentTime=function liveCurrentTime(){return this.pastSeekEnd()+this.seekableEnd()},_proto.pastSeekEnd=function pastSeekEnd(){return this.pastSeekEnd_},_proto.behindLiveEdge=function behindLiveEdge(){return this.behindLiveEdge_},_proto.isTracking=function isTracking(){return"number"==typeof this.trackingInterval_},_proto.seekToLiveEdge=function seekToLiveEdge(){this.atLiveEdge()||(this.player_.currentTime(this.liveCurrentTime()),this.player_.paused()&&this.player_.play())},_proto.dispose=function dispose(){this.stopTracking(),_Component.prototype.dispose.call(this)},LiveTracker}(Component);Component.registerComponent("LiveTracker",LiveTracker);var sourcesetLoad=function sourcesetLoad(tech){var el=tech.el();if(el.hasAttribute("src"))return tech.triggerSourceset(el.src),!0;var sources=tech.$$("source"),srcUrls=[],src="";if(!sources.length)return!1;for(var i=0;i<sources.length;i++){var url=sources[i].src;url&&-1===srcUrls.indexOf(url)&&srcUrls.push(url)}return!!srcUrls.length&&(1===srcUrls.length&&(src=srcUrls[0]),tech.triggerSourceset(src),!0)},innerHTMLDescriptorPolyfill=Object.defineProperty({},"innerHTML",{get:function get(){return this.cloneNode(!0).innerHTML},set:function set(v){var dummy=document_default().createElement(this.nodeName.toLowerCase());dummy.innerHTML=v;for(var docFrag=document_default().createDocumentFragment();dummy.childNodes.length;)docFrag.appendChild(dummy.childNodes[0]);return this.innerText="",window_default().Element.prototype.appendChild.call(this,docFrag),this.innerHTML}}),getDescriptor=function getDescriptor(priority,prop){for(var descriptor={},i=0;i<priority.length&&!((descriptor=Object.getOwnPropertyDescriptor(priority[i],prop))&&descriptor.set&&descriptor.get);i++);return descriptor.enumerable=!0,descriptor.configurable=!0,descriptor},firstSourceWatch=function firstSourceWatch(tech){var el=tech.el();if(!el.resetSourceWatch_){var old={},innerDescriptor=function getInnerHTMLDescriptor(tech){return getDescriptor([tech.el(),window_default().HTMLMediaElement.prototype,window_default().Element.prototype,innerHTMLDescriptorPolyfill],"innerHTML")}(tech),appendWrapper=function appendWrapper(appendFn){return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var retval=appendFn.apply(el,args);return sourcesetLoad(tech),retval}};["append","appendChild","insertAdjacentHTML"].forEach((function(k){el[k]&&(old[k]=el[k],el[k]=appendWrapper(old[k]))})),Object.defineProperty(el,"innerHTML",mergeOptions(innerDescriptor,{set:appendWrapper(innerDescriptor.set)})),el.resetSourceWatch_=function(){el.resetSourceWatch_=null,Object.keys(old).forEach((function(k){el[k]=old[k]})),Object.defineProperty(el,"innerHTML",innerDescriptor)},tech.one("sourceset",el.resetSourceWatch_)}},srcDescriptorPolyfill=Object.defineProperty({},"src",{get:function get(){return this.hasAttribute("src")?getAbsoluteURL(window_default().Element.prototype.getAttribute.call(this,"src")):""},set:function set(v){return window_default().Element.prototype.setAttribute.call(this,"src",v),v}}),setupSourceset=function setupSourceset(tech){if(tech.featuresSourceset){var el=tech.el();if(!el.resetSourceset_){var srcDescriptor=function getSrcDescriptor(tech){return getDescriptor([tech.el(),window_default().HTMLMediaElement.prototype,srcDescriptorPolyfill],"src")}(tech),oldSetAttribute=el.setAttribute,oldLoad=el.load;Object.defineProperty(el,"src",mergeOptions(srcDescriptor,{set:function set(v){var retval=srcDescriptor.set.call(el,v);return tech.triggerSourceset(el.src),retval}})),el.setAttribute=function(n,v){var retval=oldSetAttribute.call(el,n,v);return/src/i.test(n)&&tech.triggerSourceset(el.src),retval},el.load=function(){var retval=oldLoad.call(el);return sourcesetLoad(tech)||(tech.triggerSourceset(""),firstSourceWatch(tech)),retval},el.currentSrc?tech.triggerSourceset(el.currentSrc):sourcesetLoad(tech)||firstSourceWatch(tech),el.resetSourceset_=function(){el.resetSourceset_=null,el.load=oldLoad,el.setAttribute=oldSetAttribute,Object.defineProperty(el,"src",srcDescriptor),el.resetSourceWatch_&&el.resetSourceWatch_()}}}},Html5=function(_Tech){function Html5(options,ready){var _this;_this=_Tech.call(this,options,ready)||this;var source=options.source,crossoriginTracks=!1;if(source&&(_this.el_.currentSrc!==source.src||options.tag&&3===options.tag.initNetworkState_)?_this.setSource(source):_this.handleLateInit_(_this.el_),options.enableSourceset&&_this.setupSourcesetHandling_(),_this.el_.hasChildNodes()){for(var nodes=_this.el_.childNodes,nodesLength=nodes.length,removeNodes=[];nodesLength--;){var node=nodes[nodesLength];"track"===node.nodeName.toLowerCase()&&(_this.featuresNativeTextTracks?(_this.remoteTextTrackEls().addTrackElement_(node),_this.remoteTextTracks().addTrack(node.track),_this.textTracks().addTrack(node.track),crossoriginTracks||_this.el_.hasAttribute("crossorigin")||!isCrossOrigin(node.src)||(crossoriginTracks=!0)):removeNodes.push(node))}for(var i=0;i<removeNodes.length;i++)_this.el_.removeChild(removeNodes[i])}return _this.proxyNativeTracks_(),_this.featuresNativeTextTracks&&crossoriginTracks&&log.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\nThis may prevent text tracks from loading."),_this.restoreMetadataTracksInIOSNativePlayer_(),(TOUCH_ENABLED||IS_IPHONE||IS_NATIVE_ANDROID)&&!0===options.nativeControlsForTouch&&_this.setControls(!0),_this.proxyWebkitFullscreen_(),_this.triggerReady(),_this}video_es_inheritsLoose(Html5,_Tech);var _proto=Html5.prototype;return _proto.dispose=function dispose(){this.el_&&this.el_.resetSourceset_&&this.el_.resetSourceset_(),Html5.disposeMediaElement(this.el_),this.options_=null,_Tech.prototype.dispose.call(this)},_proto.setupSourcesetHandling_=function setupSourcesetHandling_(){setupSourceset(this)},_proto.restoreMetadataTracksInIOSNativePlayer_=function restoreMetadataTracksInIOSNativePlayer_(){var metadataTracksPreFullscreenState,textTracks=this.textTracks(),takeMetadataTrackSnapshot=function takeMetadataTrackSnapshot(){metadataTracksPreFullscreenState=[];for(var i=0;i<textTracks.length;i++){var track=textTracks[i];"metadata"===track.kind&&metadataTracksPreFullscreenState.push({track,storedMode:track.mode})}};takeMetadataTrackSnapshot(),textTracks.addEventListener("change",takeMetadataTrackSnapshot),this.on("dispose",(function(){return textTracks.removeEventListener("change",takeMetadataTrackSnapshot)}));var restoreTrackMode=function restoreTrackMode(){for(var i=0;i<metadataTracksPreFullscreenState.length;i++){var storedTrack=metadataTracksPreFullscreenState[i];"disabled"===storedTrack.track.mode&&storedTrack.track.mode!==storedTrack.storedMode&&(storedTrack.track.mode=storedTrack.storedMode)}textTracks.removeEventListener("change",restoreTrackMode)};this.on("webkitbeginfullscreen",(function(){textTracks.removeEventListener("change",takeMetadataTrackSnapshot),textTracks.removeEventListener("change",restoreTrackMode),textTracks.addEventListener("change",restoreTrackMode)})),this.on("webkitendfullscreen",(function(){textTracks.removeEventListener("change",takeMetadataTrackSnapshot),textTracks.addEventListener("change",takeMetadataTrackSnapshot),textTracks.removeEventListener("change",restoreTrackMode)}))},_proto.overrideNative_=function overrideNative_(type,override){var _this2=this;if(override===this["featuresNative"+type+"Tracks"]){var lowerCaseType=type.toLowerCase();this[lowerCaseType+"TracksListeners_"]&&Object.keys(this[lowerCaseType+"TracksListeners_"]).forEach((function(eventName){_this2.el()[lowerCaseType+"Tracks"].removeEventListener(eventName,_this2[lowerCaseType+"TracksListeners_"][eventName])})),this["featuresNative"+type+"Tracks"]=!override,this[lowerCaseType+"TracksListeners_"]=null,this.proxyNativeTracksForType_(lowerCaseType)}},_proto.overrideNativeAudioTracks=function overrideNativeAudioTracks(override){this.overrideNative_("Audio",override)},_proto.overrideNativeVideoTracks=function overrideNativeVideoTracks(override){this.overrideNative_("Video",override)},_proto.proxyNativeTracksForType_=function proxyNativeTracksForType_(name){var _this3=this,props=NORMAL[name],elTracks=this.el()[props.getterName],techTracks=this[props.getterName]();if(this["featuresNative"+props.capitalName+"Tracks"]&&elTracks&&elTracks.addEventListener){var listeners={change:function change(e){techTracks.trigger({type:"change",target:techTracks,currentTarget:techTracks,srcElement:techTracks})},addtrack:function addtrack(e){techTracks.addTrack(e.track)},removetrack:function removetrack(e){techTracks.removeTrack(e.track)}},removeOldTracks=function removeOldTracks(){for(var removeTracks=[],i=0;i<techTracks.length;i++){for(var found=!1,j=0;j<elTracks.length;j++)if(elTracks[j]===techTracks[i]){found=!0;break}found||removeTracks.push(techTracks[i])}for(;removeTracks.length;)techTracks.removeTrack(removeTracks.shift())};this[props.getterName+"Listeners_"]=listeners,Object.keys(listeners).forEach((function(eventName){var listener=listeners[eventName];elTracks.addEventListener(eventName,listener),_this3.on("dispose",(function(e){return elTracks.removeEventListener(eventName,listener)}))})),this.on("loadstart",removeOldTracks),this.on("dispose",(function(e){return _this3.off("loadstart",removeOldTracks)}))}},_proto.proxyNativeTracks_=function proxyNativeTracks_(){var _this4=this;NORMAL.names.forEach((function(name){_this4.proxyNativeTracksForType_(name)}))},_proto.createEl=function createEl(){var el=this.options_.tag;if(!el||!this.options_.playerElIngest&&!this.movingMediaElementInDOM){if(el){var clone=el.cloneNode(!0);el.parentNode&&el.parentNode.insertBefore(clone,el),Html5.disposeMediaElement(el),el=clone}else{el=document_default().createElement("video");var attributes=mergeOptions({},this.options_.tag&&getAttributes(this.options_.tag));TOUCH_ENABLED&&!0===this.options_.nativeControlsForTouch||delete attributes.controls,setAttributes(el,video_es_assign(attributes,{id:this.options_.techId,class:"vjs-tech"}))}el.playerId=this.options_.playerId}void 0!==this.options_.preload&&setAttribute(el,"preload",this.options_.preload);for(var settingsAttrs=["loop","muted","playsinline","autoplay"],i=0;i<settingsAttrs.length;i++){var attr=settingsAttrs[i],value=this.options_[attr];void 0!==value&&(value?setAttribute(el,attr,attr):removeAttribute(el,attr),el[attr]=value)}return el},_proto.handleLateInit_=function handleLateInit_(el){if(0!==el.networkState&&3!==el.networkState){if(0===el.readyState){var loadstartFired=!1,setLoadstartFired=function setLoadstartFired(){loadstartFired=!0};this.on("loadstart",setLoadstartFired);var triggerLoadstart=function triggerLoadstart(){loadstartFired||this.trigger("loadstart")};return this.on("loadedmetadata",triggerLoadstart),void this.ready((function(){this.off("loadstart",setLoadstartFired),this.off("loadedmetadata",triggerLoadstart),loadstartFired||this.trigger("loadstart")}))}var eventsToTrigger=["loadstart"];eventsToTrigger.push("loadedmetadata"),el.readyState>=2&&eventsToTrigger.push("loadeddata"),el.readyState>=3&&eventsToTrigger.push("canplay"),el.readyState>=4&&eventsToTrigger.push("canplaythrough"),this.ready((function(){eventsToTrigger.forEach((function(type){this.trigger(type)}),this)}))}},_proto.setCurrentTime=function setCurrentTime(seconds){try{this.el_.currentTime=seconds}catch(e){log(e,"Video is not ready. (Video.js)")}},_proto.duration=function duration(){var _this5=this;if(this.el_.duration===1/0&&IS_ANDROID&&IS_CHROME&&0===this.el_.currentTime){return this.on("timeupdate",(function checkProgress(){_this5.el_.currentTime>0&&(_this5.el_.duration===1/0&&_this5.trigger("durationchange"),_this5.off("timeupdate",checkProgress))})),NaN}return this.el_.duration||NaN},_proto.width=function width(){return this.el_.offsetWidth},_proto.height=function height(){return this.el_.offsetHeight},_proto.proxyWebkitFullscreen_=function proxyWebkitFullscreen_(){var _this6=this;if("webkitDisplayingFullscreen"in this.el_){var endFn=function endFn(){this.trigger("fullscreenchange",{isFullscreen:!1})},beginFn=function beginFn(){"webkitPresentationMode"in this.el_&&"picture-in-picture"!==this.el_.webkitPresentationMode&&(this.one("webkitendfullscreen",endFn),this.trigger("fullscreenchange",{isFullscreen:!0}))};this.on("webkitbeginfullscreen",beginFn),this.on("dispose",(function(){_this6.off("webkitbeginfullscreen",beginFn),_this6.off("webkitendfullscreen",endFn)}))}},_proto.supportsFullScreen=function supportsFullScreen(){if("function"==typeof this.el_.webkitEnterFullScreen){var userAgent=window_default().navigator&&window_default().navigator.userAgent||"";if(/Android/.test(userAgent)||!/Chrome|Mac OS X 10.5/.test(userAgent))return!0}return!1},_proto.enterFullScreen=function enterFullScreen(){var video=this.el_;video.paused&&video.networkState<=video.HAVE_METADATA?(this.el_.play(),this.setTimeout((function(){video.pause(),video.webkitEnterFullScreen()}),0)):video.webkitEnterFullScreen()},_proto.exitFullScreen=function exitFullScreen(){this.el_.webkitExitFullScreen()},_proto.requestPictureInPicture=function requestPictureInPicture(){return this.el_.requestPictureInPicture()},_proto.src=function src(_src){if(void 0===_src)return this.el_.src;this.setSrc(_src)},_proto.reset=function reset(){Html5.resetMediaElement(this.el_)},_proto.currentSrc=function currentSrc(){return this.currentSource_?this.currentSource_.src:this.el_.currentSrc},_proto.setControls=function setControls(val){this.el_.controls=!!val},_proto.addTextTrack=function addTextTrack(kind,label,language){return this.featuresNativeTextTracks?this.el_.addTextTrack(kind,label,language):_Tech.prototype.addTextTrack.call(this,kind,label,language)},_proto.createRemoteTextTrack=function createRemoteTextTrack(options){if(!this.featuresNativeTextTracks)return _Tech.prototype.createRemoteTextTrack.call(this,options);var htmlTrackElement=document_default().createElement("track");return options.kind&&(htmlTrackElement.kind=options.kind),options.label&&(htmlTrackElement.label=options.label),(options.language||options.srclang)&&(htmlTrackElement.srclang=options.language||options.srclang),options.default&&(htmlTrackElement.default=options.default),options.id&&(htmlTrackElement.id=options.id),options.src&&(htmlTrackElement.src=options.src),htmlTrackElement},_proto.addRemoteTextTrack=function addRemoteTextTrack(options,manualCleanup){var htmlTrackElement=_Tech.prototype.addRemoteTextTrack.call(this,options,manualCleanup);return this.featuresNativeTextTracks&&this.el().appendChild(htmlTrackElement),htmlTrackElement},_proto.removeRemoteTextTrack=function removeRemoteTextTrack(track){if(_Tech.prototype.removeRemoteTextTrack.call(this,track),this.featuresNativeTextTracks)for(var tracks=this.$$("track"),i=tracks.length;i--;)track!==tracks[i]&&track!==tracks[i].track||this.el().removeChild(tracks[i])},_proto.getVideoPlaybackQuality=function getVideoPlaybackQuality(){if("function"==typeof this.el().getVideoPlaybackQuality)return this.el().getVideoPlaybackQuality();var videoPlaybackQuality={};return void 0!==this.el().webkitDroppedFrameCount&&void 0!==this.el().webkitDecodedFrameCount&&(videoPlaybackQuality.droppedVideoFrames=this.el().webkitDroppedFrameCount,videoPlaybackQuality.totalVideoFrames=this.el().webkitDecodedFrameCount),window_default().performance&&"function"==typeof window_default().performance.now?videoPlaybackQuality.creationTime=window_default().performance.now():window_default().performance&&window_default().performance.timing&&"number"==typeof window_default().performance.timing.navigationStart&&(videoPlaybackQuality.creationTime=window_default().Date.now()-window_default().performance.timing.navigationStart),videoPlaybackQuality},Html5}(Tech);if(isReal()){Html5.TEST_VID=document_default().createElement("video");var track=document_default().createElement("track");track.kind="captions",track.srclang="en",track.label="English",Html5.TEST_VID.appendChild(track)}Html5.isSupported=function(){try{Html5.TEST_VID.volume=.5}catch(e){return!1}return!(!Html5.TEST_VID||!Html5.TEST_VID.canPlayType)},Html5.canPlayType=function(type){return Html5.TEST_VID.canPlayType(type)},Html5.canPlaySource=function(srcObj,options){return Html5.canPlayType(srcObj.type)},Html5.canControlVolume=function(){try{var volume=Html5.TEST_VID.volume;return Html5.TEST_VID.volume=volume/2+.1,volume!==Html5.TEST_VID.volume}catch(e){return!1}},Html5.canMuteVolume=function(){try{var muted=Html5.TEST_VID.muted;return Html5.TEST_VID.muted=!muted,Html5.TEST_VID.muted?setAttribute(Html5.TEST_VID,"muted","muted"):removeAttribute(Html5.TEST_VID,"muted"),muted!==Html5.TEST_VID.muted}catch(e){return!1}},Html5.canControlPlaybackRate=function(){if(IS_ANDROID&&IS_CHROME&&CHROME_VERSION<58)return!1;try{var playbackRate=Html5.TEST_VID.playbackRate;return Html5.TEST_VID.playbackRate=playbackRate/2+.1,playbackRate!==Html5.TEST_VID.playbackRate}catch(e){return!1}},Html5.canOverrideAttributes=function(){try{var noop=function noop(){};Object.defineProperty(document_default().createElement("video"),"src",{get:noop,set:noop}),Object.defineProperty(document_default().createElement("audio"),"src",{get:noop,set:noop}),Object.defineProperty(document_default().createElement("video"),"innerHTML",{get:noop,set:noop}),Object.defineProperty(document_default().createElement("audio"),"innerHTML",{get:noop,set:noop})}catch(e){return!1}return!0},Html5.supportsNativeTextTracks=function(){return IS_ANY_SAFARI||IS_IOS&&IS_CHROME},Html5.supportsNativeVideoTracks=function(){return!(!Html5.TEST_VID||!Html5.TEST_VID.videoTracks)},Html5.supportsNativeAudioTracks=function(){return!(!Html5.TEST_VID||!Html5.TEST_VID.audioTracks)},Html5.Events=["loadstart","suspend","abort","error","emptied","stalled","loadedmetadata","loadeddata","canplay","canplaythrough","playing","waiting","seeking","seeked","ended","durationchange","timeupdate","progress","play","pause","ratechange","resize","volumechange"],Html5.prototype.featuresVolumeControl=Html5.canControlVolume(),Html5.prototype.featuresMuteControl=Html5.canMuteVolume(),Html5.prototype.featuresPlaybackRate=Html5.canControlPlaybackRate(),Html5.prototype.featuresSourceset=Html5.canOverrideAttributes(),Html5.prototype.movingMediaElementInDOM=!IS_IOS,Html5.prototype.featuresFullscreenResize=!0,Html5.prototype.featuresProgressEvents=!0,Html5.prototype.featuresTimeupdateEvents=!0,Html5.prototype.featuresNativeTextTracks=Html5.supportsNativeTextTracks(),Html5.prototype.featuresNativeVideoTracks=Html5.supportsNativeVideoTracks(),Html5.prototype.featuresNativeAudioTracks=Html5.supportsNativeAudioTracks();var canPlayType=Html5.TEST_VID&&Html5.TEST_VID.constructor.prototype.canPlayType,mpegurlRE=/^application\/(?:x-|vnd\.apple\.)mpegurl/i;Html5.patchCanPlayType=function(){ANDROID_VERSION>=4&&!IS_FIREFOX&&!IS_CHROME&&(Html5.TEST_VID.constructor.prototype.canPlayType=function(type){return type&&mpegurlRE.test(type)?"maybe":canPlayType.call(this,type)})},Html5.unpatchCanPlayType=function(){var r=Html5.TEST_VID.constructor.prototype.canPlayType;return Html5.TEST_VID.constructor.prototype.canPlayType=canPlayType,r},Html5.patchCanPlayType(),Html5.disposeMediaElement=function(el){if(el){for(el.parentNode&&el.parentNode.removeChild(el);el.hasChildNodes();)el.removeChild(el.firstChild);el.removeAttribute("src"),"function"==typeof el.load&&function(){try{el.load()}catch(e){}}()}},Html5.resetMediaElement=function(el){if(el){for(var sources=el.querySelectorAll("source"),i=sources.length;i--;)el.removeChild(sources[i]);el.removeAttribute("src"),"function"==typeof el.load&&function(){try{el.load()}catch(e){}}()}},["muted","defaultMuted","autoplay","controls","loop","playsinline"].forEach((function(prop){Html5.prototype[prop]=function(){return this.el_[prop]||this.el_.hasAttribute(prop)}})),["muted","defaultMuted","autoplay","loop","playsinline"].forEach((function(prop){Html5.prototype["set"+toTitleCase(prop)]=function(v){this.el_[prop]=v,v?this.el_.setAttribute(prop,prop):this.el_.removeAttribute(prop)}})),["paused","currentTime","buffered","volume","poster","preload","error","seeking","seekable","ended","playbackRate","defaultPlaybackRate","played","networkState","readyState","videoWidth","videoHeight"].forEach((function(prop){Html5.prototype[prop]=function(){return this.el_[prop]}})),["volume","src","poster","preload","playbackRate","defaultPlaybackRate"].forEach((function(prop){Html5.prototype["set"+toTitleCase(prop)]=function(v){this.el_[prop]=v}})),["pause","load","play"].forEach((function(prop){Html5.prototype[prop]=function(){return this.el_[prop]()}})),Tech.withSourceHandlers(Html5),Html5.nativeSourceHandler={},Html5.nativeSourceHandler.canPlayType=function(type){try{return Html5.TEST_VID.canPlayType(type)}catch(e){return""}},Html5.nativeSourceHandler.canHandleSource=function(source,options){if(source.type)return Html5.nativeSourceHandler.canPlayType(source.type);if(source.src){var ext=getFileExtension(source.src);return Html5.nativeSourceHandler.canPlayType("video/"+ext)}return""},Html5.nativeSourceHandler.handleSource=function(source,tech,options){tech.setSrc(source.src)},Html5.nativeSourceHandler.dispose=function(){},Html5.registerSourceHandler(Html5.nativeSourceHandler),Tech.registerTech("Html5",Html5);var TECH_EVENTS_RETRIGGER=["progress","abort","suspend","emptied","stalled","loadedmetadata","loadeddata","timeupdate","resize","volumechange","texttrackchange"],TECH_EVENTS_QUEUE={canplay:"CanPlay",canplaythrough:"CanPlayThrough",playing:"Playing",seeked:"Seeked"},BREAKPOINT_ORDER=["tiny","xsmall","small","medium","large","xlarge","huge"],BREAKPOINT_CLASSES={};BREAKPOINT_ORDER.forEach((function(k){var v="x"===k.charAt(0)?"x-"+k.substring(1):k;BREAKPOINT_CLASSES[k]="vjs-layout-"+v}));var DEFAULT_BREAKPOINTS={tiny:210,xsmall:320,small:425,medium:768,large:1440,xlarge:2560,huge:1/0},Player=function(_Component){function Player(tag,options,ready){var _this;if(tag.id=tag.id||options.id||"vjs_video_"+newGUID(),(options=video_es_assign(Player.getTagSettings(tag),options)).initChildren=!1,options.createEl=!1,options.evented=!1,options.reportTouchActivity=!1,!options.language)if("function"==typeof tag.closest){var closest=tag.closest("[lang]");closest&&closest.getAttribute&&(options.language=closest.getAttribute("lang"))}else for(var element=tag;element&&1===element.nodeType;){if(getAttributes(element).hasOwnProperty("lang")){options.language=element.getAttribute("lang");break}element=element.parentNode}if((_this=_Component.call(this,null,options,ready)||this).boundDocumentFullscreenChange_=bind(video_es_assertThisInitialized(_this),_this.documentFullscreenChange_),_this.boundFullWindowOnEscKey_=bind(video_es_assertThisInitialized(_this),_this.fullWindowOnEscKey),_this.log=createLogger$1(_this.id_),_this.fsApi_=FullscreenApi,_this.isPosterFromTech_=!1,_this.queuedCallbacks_=[],_this.isReady_=!1,_this.hasStarted_=!1,_this.userActive_=!1,!_this.options_||!_this.options_.techOrder||!_this.options_.techOrder.length)throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if(_this.tag=tag,_this.tagAttributes=tag&&getAttributes(tag),_this.language(_this.options_.language),options.languages){var languagesToLower={};Object.getOwnPropertyNames(options.languages).forEach((function(name){languagesToLower[name.toLowerCase()]=options.languages[name]})),_this.languages_=languagesToLower}else _this.languages_=Player.prototype.options_.languages;_this.resetCache_(),_this.poster_=options.poster||"",_this.controls_=!!options.controls,tag.controls=!1,tag.removeAttribute("controls"),_this.changingSrc_=!1,_this.playCallbacks_=[],_this.playTerminatedQueue_=[],tag.hasAttribute("autoplay")?_this.autoplay(!0):_this.autoplay(_this.options_.autoplay),options.plugins&&Object.keys(options.plugins).forEach((function(name){if("function"!=typeof _this[name])throw new Error('plugin "'+name+'" does not exist')})),_this.scrubbing_=!1,_this.el_=_this.createEl(),evented(video_es_assertThisInitialized(_this),{eventBusKey:"el_"}),_this.fluid_&&_this.on("playerreset",_this.updateStyleEl_);var playerOptionsCopy=mergeOptions(_this.options_);options.plugins&&Object.keys(options.plugins).forEach((function(name){_this[name](options.plugins[name])})),_this.options_.playerOptions=playerOptionsCopy,_this.middleware_=[],_this.initChildren(),_this.isAudio("audio"===tag.nodeName.toLowerCase()),_this.controls()?_this.addClass("vjs-controls-enabled"):_this.addClass("vjs-controls-disabled"),_this.el_.setAttribute("role","region"),_this.isAudio()?_this.el_.setAttribute("aria-label",_this.localize("Audio Player")):_this.el_.setAttribute("aria-label",_this.localize("Video Player")),_this.isAudio()&&_this.addClass("vjs-audio"),_this.flexNotSupported_()&&_this.addClass("vjs-no-flex"),TOUCH_ENABLED&&_this.addClass("vjs-touch-enabled"),IS_IOS||_this.addClass("vjs-workinghover"),Player.players[_this.id_]=video_es_assertThisInitialized(_this);var majorVersion="7.6.6".split(".")[0];return _this.addClass("vjs-v"+majorVersion),_this.userActive(!0),_this.reportUserActivity(),_this.one("play",_this.listenForUserActivity_),_this.on("stageclick",_this.handleStageClick_),_this.on("keydown",_this.handleKeyDown),_this.breakpoints(_this.options_.breakpoints),_this.responsive(_this.options_.responsive),_this}video_es_inheritsLoose(Player,_Component);var _proto=Player.prototype;return _proto.dispose=function dispose(){var _this2=this;this.trigger("dispose"),this.off("dispose"),off(document_default(),this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_),off(document_default(),"keydown",this.boundFullWindowOnEscKey_),this.styleEl_&&this.styleEl_.parentNode&&(this.styleEl_.parentNode.removeChild(this.styleEl_),this.styleEl_=null),Player.players[this.id_]=null,this.tag&&this.tag.player&&(this.tag.player=null),this.el_&&this.el_.player&&(this.el_.player=null),this.tech_&&(this.tech_.dispose(),this.isPosterFromTech_=!1,this.poster_=""),this.playerElIngest_&&(this.playerElIngest_=null),this.tag&&(this.tag=null),function clearCacheForPlayer(player){middlewareInstances[player.id()]=null}(this),ALL.names.forEach((function(name){var props=ALL[name],list=_this2[props.getterName]();list&&list.off&&list.off()})),_Component.prototype.dispose.call(this)},_proto.createEl=function createEl(){var el,tag=this.tag,playerElIngest=this.playerElIngest_=tag.parentNode&&tag.parentNode.hasAttribute&&tag.parentNode.hasAttribute("data-vjs-player"),divEmbed="video-js"===this.tag.tagName.toLowerCase();playerElIngest?el=this.el_=tag.parentNode:divEmbed||(el=this.el_=_Component.prototype.createEl.call(this,"div"));var attrs=getAttributes(tag);if(divEmbed){for(el=this.el_=tag,tag=this.tag=document_default().createElement("video");el.children.length;)tag.appendChild(el.firstChild);hasClass(el,"video-js")||addClass(el,"video-js"),el.appendChild(tag),playerElIngest=this.playerElIngest_=el,Object.keys(el).forEach((function(k){try{tag[k]=el[k]}catch(e){}}))}if(tag.setAttribute("tabindex","-1"),attrs.tabindex="-1",(IE_VERSION||IS_CHROME&&IS_WINDOWS)&&(tag.setAttribute("role","application"),attrs.role="application"),tag.removeAttribute("width"),tag.removeAttribute("height"),"width"in attrs&&delete attrs.width,"height"in attrs&&delete attrs.height,Object.getOwnPropertyNames(attrs).forEach((function(attr){divEmbed&&"class"===attr||el.setAttribute(attr,attrs[attr]),divEmbed&&tag.setAttribute(attr,attrs[attr])})),tag.playerId=tag.id,tag.id+="_html5_api",tag.className="vjs-tech",tag.player=el.player=this,this.addClass("vjs-paused"),!0!==window_default().VIDEOJS_NO_DYNAMIC_STYLE){this.styleEl_=createStyleElement("vjs-styles-dimensions");var defaultsStyleEl=$(".vjs-styles-defaults"),head=$("head");head.insertBefore(this.styleEl_,defaultsStyleEl?defaultsStyleEl.nextSibling:head.firstChild)}this.fill_=!1,this.fluid_=!1,this.width(this.options_.width),this.height(this.options_.height),this.fill(this.options_.fill),this.fluid(this.options_.fluid),this.aspectRatio(this.options_.aspectRatio);for(var links=tag.getElementsByTagName("a"),i=0;i<links.length;i++){var linkEl=links.item(i);addClass(linkEl,"vjs-hidden"),linkEl.setAttribute("hidden","hidden")}return tag.initNetworkState_=tag.networkState,tag.parentNode&&!playerElIngest&&tag.parentNode.insertBefore(el,tag),prependTo(tag,el),this.children_.unshift(tag),this.el_.setAttribute("lang",this.language_),this.el_=el,el},_proto.width=function width(value){return this.dimension("width",value)},_proto.height=function height(value){return this.dimension("height",value)},_proto.dimension=function dimension(_dimension,value){var privDimension=_dimension+"_";if(void 0===value)return this[privDimension]||0;if(""===value)return this[privDimension]=void 0,void this.updateStyleEl_();var parsedVal=parseFloat(value);isNaN(parsedVal)?log.error('Improper value "'+value+'" supplied for for '+_dimension):(this[privDimension]=parsedVal,this.updateStyleEl_())},_proto.fluid=function fluid(bool){if(void 0===bool)return!!this.fluid_;this.fluid_=!!bool,isEvented(this)&&this.off("playerreset",this.updateStyleEl_),bool?(this.addClass("vjs-fluid"),this.fill(!1),function addEventedCallback(target,callback){isEvented(target)?callback():(target.eventedCallbacks||(target.eventedCallbacks=[]),target.eventedCallbacks.push(callback))}((function(){this.on("playerreset",this.updateStyleEl_)}))):this.removeClass("vjs-fluid"),this.updateStyleEl_()},_proto.fill=function fill(bool){if(void 0===bool)return!!this.fill_;this.fill_=!!bool,bool?(this.addClass("vjs-fill"),this.fluid(!1)):this.removeClass("vjs-fill")},_proto.aspectRatio=function aspectRatio(ratio){if(void 0===ratio)return this.aspectRatio_;if(!/^\d+\:\d+$/.test(ratio))throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_=ratio,this.fluid(!0),this.updateStyleEl_()},_proto.updateStyleEl_=function updateStyleEl_(){if(!0!==window_default().VIDEOJS_NO_DYNAMIC_STYLE){var width,height,idClass,ratioParts=(void 0!==this.aspectRatio_&&"auto"!==this.aspectRatio_?this.aspectRatio_:this.videoWidth()>0?this.videoWidth()+":"+this.videoHeight():"16:9").split(":"),ratioMultiplier=ratioParts[1]/ratioParts[0];width=void 0!==this.width_?this.width_:void 0!==this.height_?this.height_/ratioMultiplier:this.videoWidth()||300,height=void 0!==this.height_?this.height_:width*ratioMultiplier,idClass=/^[^a-zA-Z]/.test(this.id())?"dimensions-"+this.id():this.id()+"-dimensions",this.addClass(idClass),setTextContent(this.styleEl_,"\n      ."+idClass+" {\n        width: "+width+"px;\n        height: "+height+"px;\n      }\n\n      ."+idClass+".vjs-fluid {\n        padding-top: "+100*ratioMultiplier+"%;\n      }\n    ")}else{var _width="number"==typeof this.width_?this.width_:this.options_.width,_height="number"==typeof this.height_?this.height_:this.options_.height,techEl=this.tech_&&this.tech_.el();techEl&&(_width>=0&&(techEl.width=_width),_height>=0&&(techEl.height=_height))}},_proto.loadTech_=function loadTech_(techName,source){var _this3=this;this.tech_&&this.unloadTech_();var titleTechName=toTitleCase(techName),camelTechName=techName.charAt(0).toLowerCase()+techName.slice(1);"Html5"!==titleTechName&&this.tag&&(Tech.getTech("Html5").disposeMediaElement(this.tag),this.tag.player=null,this.tag=null),this.techName_=titleTechName,this.isReady_=!1;var techOptions={source,autoplay:"string"!=typeof this.autoplay()&&this.autoplay(),nativeControlsForTouch:this.options_.nativeControlsForTouch,playerId:this.id(),techId:this.id()+"_"+camelTechName+"_api",playsinline:this.options_.playsinline,preload:this.options_.preload,loop:this.options_.loop,muted:this.options_.muted,poster:this.poster(),language:this.language(),playerElIngest:this.playerElIngest_||!1,"vtt.js":this.options_["vtt.js"],canOverridePoster:!!this.options_.techCanOverridePoster,enableSourceset:this.options_.enableSourceset,Promise:this.options_.Promise};ALL.names.forEach((function(name){var props=ALL[name];techOptions[props.getterName]=_this3[props.privateName]})),video_es_assign(techOptions,this.options_[titleTechName]),video_es_assign(techOptions,this.options_[camelTechName]),video_es_assign(techOptions,this.options_[techName.toLowerCase()]),this.tag&&(techOptions.tag=this.tag),source&&source.src===this.cache_.src&&this.cache_.currentTime>0&&(techOptions.startTime=this.cache_.currentTime);var TechClass=Tech.getTech(techName);if(!TechClass)throw new Error("No Tech named '"+titleTechName+"' exists! '"+titleTechName+"' should be registered using videojs.registerTech()'");this.tech_=new TechClass(techOptions),this.tech_.ready(bind(this,this.handleTechReady_),!0),textTrackConverter_jsonToTextTracks(this.textTracksJson_||[],this.tech_),TECH_EVENTS_RETRIGGER.forEach((function(event){_this3.on(_this3.tech_,event,_this3["handleTech"+toTitleCase(event)+"_"])})),Object.keys(TECH_EVENTS_QUEUE).forEach((function(event){_this3.on(_this3.tech_,event,(function(eventObj){0===_this3.tech_.playbackRate()&&_this3.tech_.seeking()?_this3.queuedCallbacks_.push({callback:_this3["handleTech"+TECH_EVENTS_QUEUE[event]+"_"].bind(_this3),event:eventObj}):_this3["handleTech"+TECH_EVENTS_QUEUE[event]+"_"](eventObj)}))})),this.on(this.tech_,"loadstart",this.handleTechLoadStart_),this.on(this.tech_,"sourceset",this.handleTechSourceset_),this.on(this.tech_,"waiting",this.handleTechWaiting_),this.on(this.tech_,"ended",this.handleTechEnded_),this.on(this.tech_,"seeking",this.handleTechSeeking_),this.on(this.tech_,"play",this.handleTechPlay_),this.on(this.tech_,"firstplay",this.handleTechFirstPlay_),this.on(this.tech_,"pause",this.handleTechPause_),this.on(this.tech_,"durationchange",this.handleTechDurationChange_),this.on(this.tech_,"fullscreenchange",this.handleTechFullscreenChange_),this.on(this.tech_,"enterpictureinpicture",this.handleTechEnterPictureInPicture_),this.on(this.tech_,"leavepictureinpicture",this.handleTechLeavePictureInPicture_),this.on(this.tech_,"error",this.handleTechError_),this.on(this.tech_,"loadedmetadata",this.updateStyleEl_),this.on(this.tech_,"posterchange",this.handleTechPosterChange_),this.on(this.tech_,"textdata",this.handleTechTextData_),this.on(this.tech_,"ratechange",this.handleTechRateChange_),this.usingNativeControls(this.techGet_("controls")),this.controls()&&!this.usingNativeControls()&&this.addTechControlsListeners_(),this.tech_.el().parentNode===this.el()||"Html5"===titleTechName&&this.tag||prependTo(this.tech_.el(),this.el()),this.tag&&(this.tag.player=null,this.tag=null)},_proto.unloadTech_=function unloadTech_(){var _this4=this;ALL.names.forEach((function(name){var props=ALL[name];_this4[props.privateName]=_this4[props.getterName]()})),this.textTracksJson_=textTrackConverter_textTracksToJson(this.tech_),this.isReady_=!1,this.tech_.dispose(),this.tech_=!1,this.isPosterFromTech_&&(this.poster_="",this.trigger("posterchange")),this.isPosterFromTech_=!1},_proto.tech=function tech(safety){return void 0===safety&&log.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\nSee https://github.com/videojs/video.js/issues/2617 for more info.\n"),this.tech_},_proto.addTechControlsListeners_=function addTechControlsListeners_(){this.removeTechControlsListeners_(),this.on(this.tech_,"mouseup",this.handleTechClick_),this.on(this.tech_,"dblclick",this.handleTechDoubleClick_),this.on(this.tech_,"touchstart",this.handleTechTouchStart_),this.on(this.tech_,"touchmove",this.handleTechTouchMove_),this.on(this.tech_,"touchend",this.handleTechTouchEnd_),this.on(this.tech_,"tap",this.handleTechTap_)},_proto.removeTechControlsListeners_=function removeTechControlsListeners_(){this.off(this.tech_,"tap",this.handleTechTap_),this.off(this.tech_,"touchstart",this.handleTechTouchStart_),this.off(this.tech_,"touchmove",this.handleTechTouchMove_),this.off(this.tech_,"touchend",this.handleTechTouchEnd_),this.off(this.tech_,"mouseup",this.handleTechClick_),this.off(this.tech_,"dblclick",this.handleTechDoubleClick_)},_proto.handleTechReady_=function handleTechReady_(){this.triggerReady(),this.cache_.volume&&this.techCall_("setVolume",this.cache_.volume),this.handleTechPosterChange_(),this.handleTechDurationChange_()},_proto.handleTechLoadStart_=function handleTechLoadStart_(){this.removeClass("vjs-ended"),this.removeClass("vjs-seeking"),this.error(null),this.handleTechDurationChange_(),this.paused()?(this.hasStarted(!1),this.trigger("loadstart")):(this.trigger("loadstart"),this.trigger("firstplay")),this.manualAutoplay_(this.autoplay())},_proto.manualAutoplay_=function manualAutoplay_(type){var _this5=this;if(this.tech_&&"string"==typeof type){var promise,muted=function muted(){var previouslyMuted=_this5.muted();_this5.muted(!0);var restoreMuted=function restoreMuted(){_this5.muted(previouslyMuted)};_this5.playTerminatedQueue_.push(restoreMuted);var mutedPromise=_this5.play();if(isPromise(mutedPromise))return mutedPromise.catch(restoreMuted)};if("any"===type&&!0!==this.muted()?isPromise(promise=this.play())&&(promise=promise.catch(muted)):promise="muted"===type&&!0!==this.muted()?muted():this.play(),isPromise(promise))return promise.then((function(){_this5.trigger({type:"autoplay-success",autoplay:type})})).catch((function(e){_this5.trigger({type:"autoplay-failure",autoplay:type})}))}},_proto.updateSourceCaches_=function updateSourceCaches_(srcObj){void 0===srcObj&&(srcObj="");var src=srcObj,type="";"string"!=typeof src&&(src=srcObj.src,type=srcObj.type),this.cache_.source=this.cache_.source||{},this.cache_.sources=this.cache_.sources||[],src&&!type&&(type=function findMimetype(player,src){if(!src)return"";if(player.cache_.source.src===src&&player.cache_.source.type)return player.cache_.source.type;var matchingSources=player.cache_.sources.filter((function(s){return s.src===src}));if(matchingSources.length)return matchingSources[0].type;for(var sources=player.$$("source"),i=0;i<sources.length;i++){var s=sources[i];if(s.type&&s.src&&s.src===src)return s.type}return getMimetype(src)}(this,src)),this.cache_.source=mergeOptions({},srcObj,{src,type});for(var matchingSources=this.cache_.sources.filter((function(s){return s.src&&s.src===src})),sourceElSources=[],sourceEls=this.$$("source"),matchingSourceEls=[],i=0;i<sourceEls.length;i++){var sourceObj=getAttributes(sourceEls[i]);sourceElSources.push(sourceObj),sourceObj.src&&sourceObj.src===src&&matchingSourceEls.push(sourceObj.src)}matchingSourceEls.length&&!matchingSources.length?this.cache_.sources=sourceElSources:matchingSources.length||(this.cache_.sources=[this.cache_.source]),this.cache_.src=src},_proto.handleTechSourceset_=function handleTechSourceset_(event){var _this6=this;if(!this.changingSrc_){var updateSourceCaches=function updateSourceCaches(src){return _this6.updateSourceCaches_(src)},playerSrc=this.currentSource().src,eventSrc=event.src;playerSrc&&!/^blob:/.test(playerSrc)&&/^blob:/.test(eventSrc)&&(!this.lastSource_||this.lastSource_.tech!==eventSrc&&this.lastSource_.player!==playerSrc)&&(updateSourceCaches=function updateSourceCaches(){}),updateSourceCaches(eventSrc),event.src||this.tech_.any(["sourceset","loadstart"],(function(e){if("sourceset"!==e.type){var techSrc=_this6.techGet("currentSrc");_this6.lastSource_.tech=techSrc,_this6.updateSourceCaches_(techSrc)}}))}this.lastSource_={player:this.currentSource().src,tech:event.src},this.trigger({src:event.src,type:"sourceset"})},_proto.hasStarted=function hasStarted(request){if(void 0===request)return this.hasStarted_;request!==this.hasStarted_&&(this.hasStarted_=request,this.hasStarted_?(this.addClass("vjs-has-started"),this.trigger("firstplay")):this.removeClass("vjs-has-started"))},_proto.handleTechPlay_=function handleTechPlay_(){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.hasStarted(!0),this.trigger("play")},_proto.handleTechRateChange_=function handleTechRateChange_(){this.tech_.playbackRate()>0&&0===this.cache_.lastPlaybackRate&&(this.queuedCallbacks_.forEach((function(queued){return queued.callback(queued.event)})),this.queuedCallbacks_=[]),this.cache_.lastPlaybackRate=this.tech_.playbackRate(),this.trigger("ratechange")},_proto.handleTechWaiting_=function handleTechWaiting_(){var _this7=this;this.addClass("vjs-waiting"),this.trigger("waiting");var timeWhenWaiting=this.currentTime();this.on("timeupdate",(function timeUpdateListener(){timeWhenWaiting!==_this7.currentTime()&&(_this7.removeClass("vjs-waiting"),_this7.off("timeupdate",timeUpdateListener))}))},_proto.handleTechCanPlay_=function handleTechCanPlay_(){this.removeClass("vjs-waiting"),this.trigger("canplay")},_proto.handleTechCanPlayThrough_=function handleTechCanPlayThrough_(){this.removeClass("vjs-waiting"),this.trigger("canplaythrough")},_proto.handleTechPlaying_=function handleTechPlaying_(){this.removeClass("vjs-waiting"),this.trigger("playing")},_proto.handleTechSeeking_=function handleTechSeeking_(){this.addClass("vjs-seeking"),this.trigger("seeking")},_proto.handleTechSeeked_=function handleTechSeeked_(){this.removeClass("vjs-seeking"),this.removeClass("vjs-ended"),this.trigger("seeked")},_proto.handleTechFirstPlay_=function handleTechFirstPlay_(){this.options_.starttime&&(log.warn("Passing the `starttime` option to the player will be deprecated in 6.0"),this.currentTime(this.options_.starttime)),this.addClass("vjs-has-started"),this.trigger("firstplay")},_proto.handleTechPause_=function handleTechPause_(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.trigger("pause")},_proto.handleTechEnded_=function handleTechEnded_(){this.addClass("vjs-ended"),this.options_.loop?(this.currentTime(0),this.play()):this.paused()||this.pause(),this.trigger("ended")},_proto.handleTechDurationChange_=function handleTechDurationChange_(){this.duration(this.techGet_("duration"))},_proto.handleTechClick_=function handleTechClick_(event){isSingleLeftClick(event)&&this.controls_&&(this.paused()?silencePromise(this.play()):this.pause())},_proto.handleTechDoubleClick_=function handleTechDoubleClick_(event){this.controls_&&(Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"),(function(el){return el.contains(event.target)}))||void 0!==this.options_&&void 0!==this.options_.userActions&&void 0!==this.options_.userActions.doubleClick&&!1===this.options_.userActions.doubleClick||(void 0!==this.options_&&void 0!==this.options_.userActions&&"function"==typeof this.options_.userActions.doubleClick?this.options_.userActions.doubleClick.call(this,event):this.isFullscreen()?this.exitFullscreen():this.requestFullscreen()))},_proto.handleTechTap_=function handleTechTap_(){this.userActive(!this.userActive())},_proto.handleTechTouchStart_=function handleTechTouchStart_(){this.userWasActive=this.userActive()},_proto.handleTechTouchMove_=function handleTechTouchMove_(){this.userWasActive&&this.reportUserActivity()},_proto.handleTechTouchEnd_=function handleTechTouchEnd_(event){event.preventDefault()},_proto.handleStageClick_=function handleStageClick_(){this.reportUserActivity()},_proto.toggleFullscreenClass_=function toggleFullscreenClass_(){this.isFullscreen()?this.addClass("vjs-fullscreen"):this.removeClass("vjs-fullscreen")},_proto.documentFullscreenChange_=function documentFullscreenChange_(e){var el=this.el(),isFs=document_default()[this.fsApi_.fullscreenElement]===el;!isFs&&el.matches?isFs=el.matches(":"+this.fsApi_.fullscreen):!isFs&&el.msMatchesSelector&&(isFs=el.msMatchesSelector(":"+this.fsApi_.fullscreen)),this.isFullscreen(isFs),!1===this.isFullscreen()&&off(document_default(),this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_),this.fsApi_.prefixed&&this.trigger("fullscreenchange")},_proto.handleTechFullscreenChange_=function handleTechFullscreenChange_(event,data){data&&this.isFullscreen(data.isFullscreen),this.trigger("fullscreenchange")},_proto.togglePictureInPictureClass_=function togglePictureInPictureClass_(){this.isInPictureInPicture()?this.addClass("vjs-picture-in-picture"):this.removeClass("vjs-picture-in-picture")},_proto.handleTechEnterPictureInPicture_=function handleTechEnterPictureInPicture_(event){this.isInPictureInPicture(!0)},_proto.handleTechLeavePictureInPicture_=function handleTechLeavePictureInPicture_(event){this.isInPictureInPicture(!1)},_proto.handleTechError_=function handleTechError_(){var error=this.tech_.error();this.error(error)},_proto.handleTechTextData_=function handleTechTextData_(){var data=null;arguments.length>1&&(data=arguments[1]),this.trigger("textdata",data)},_proto.getCache=function getCache(){return this.cache_},_proto.resetCache_=function resetCache_(){this.cache_={currentTime:0,inactivityTimeout:this.options_.inactivityTimeout,duration:NaN,lastVolume:1,lastPlaybackRate:this.defaultPlaybackRate(),media:null,src:"",source:{},sources:[],volume:1}},_proto.techCall_=function techCall_(method,arg){this.ready((function(){if(method in allowedSetters)return function set(middleware,tech,method,arg){return tech[method](middleware.reduce(middlewareIterator(method),arg))}(this.middleware_,this.tech_,method,arg);if(method in allowedMediators)return mediate(this.middleware_,this.tech_,method,arg);try{this.tech_&&this.tech_[method](arg)}catch(e){throw log(e),e}}),!0)},_proto.techGet_=function techGet_(method){if(this.tech_&&this.tech_.isReady_){if(method in allowedGetters)return function get(middleware,tech,method){return middleware.reduceRight(middlewareIterator(method),tech[method]())}(this.middleware_,this.tech_,method);if(method in allowedMediators)return mediate(this.middleware_,this.tech_,method);try{return this.tech_[method]()}catch(e){if(void 0===this.tech_[method])throw log("Video.js: "+method+" method not defined for "+this.techName_+" playback technology.",e),e;if("TypeError"===e.name)throw log("Video.js: "+method+" unavailable on "+this.techName_+" playback technology element.",e),this.tech_.isReady_=!1,e;throw log(e),e}}},_proto.play=function play(){var _this8=this,PromiseClass=this.options_.Promise||window_default().Promise;return PromiseClass?new PromiseClass((function(resolve){_this8.play_(resolve)})):this.play_()},_proto.play_=function play_(callback){var _this9=this;void 0===callback&&(callback=silencePromise),this.playCallbacks_.push(callback);var isSrcReady=Boolean(!this.changingSrc_&&(this.src()||this.currentSrc()));if(this.waitToPlay_&&(this.off(["ready","loadstart"],this.waitToPlay_),this.waitToPlay_=null),!this.isReady_||!isSrcReady)return this.waitToPlay_=function(e){_this9.play_()},this.one(["ready","loadstart"],this.waitToPlay_),void(isSrcReady||!IS_ANY_SAFARI&&!IS_IOS||this.load());var val=this.techGet_("play");null===val?this.runPlayTerminatedQueue_():this.runPlayCallbacks_(val)},_proto.runPlayTerminatedQueue_=function runPlayTerminatedQueue_(){var queue=this.playTerminatedQueue_.slice(0);this.playTerminatedQueue_=[],queue.forEach((function(q){q()}))},_proto.runPlayCallbacks_=function runPlayCallbacks_(val){var callbacks=this.playCallbacks_.slice(0);this.playCallbacks_=[],this.playTerminatedQueue_=[],callbacks.forEach((function(cb){cb(val)}))},_proto.pause=function pause(){this.techCall_("pause")},_proto.paused=function paused(){return!1!==this.techGet_("paused")},_proto.played=function played(){return this.techGet_("played")||createTimeRanges(0,0)},_proto.scrubbing=function scrubbing(isScrubbing){if(void 0===isScrubbing)return this.scrubbing_;this.scrubbing_=!!isScrubbing,isScrubbing?this.addClass("vjs-scrubbing"):this.removeClass("vjs-scrubbing")},_proto.currentTime=function currentTime(seconds){return void 0!==seconds?(seconds<0&&(seconds=0),void this.techCall_("setCurrentTime",seconds)):(this.cache_.currentTime=this.techGet_("currentTime")||0,this.cache_.currentTime)},_proto.duration=function duration(seconds){if(void 0===seconds)return void 0!==this.cache_.duration?this.cache_.duration:NaN;(seconds=parseFloat(seconds))<0&&(seconds=1/0),seconds!==this.cache_.duration&&(this.cache_.duration=seconds,seconds===1/0?(this.addClass("vjs-live"),this.options_.liveui&&this.player_.liveTracker&&this.addClass("vjs-liveui")):(this.removeClass("vjs-live"),this.removeClass("vjs-liveui")),isNaN(seconds)||this.trigger("durationchange"))},_proto.remainingTime=function remainingTime(){return this.duration()-this.currentTime()},_proto.remainingTimeDisplay=function remainingTimeDisplay(){return Math.floor(this.duration())-Math.floor(this.currentTime())},_proto.buffered=function buffered(){var buffered=this.techGet_("buffered");return buffered&&buffered.length||(buffered=createTimeRanges(0,0)),buffered},_proto.bufferedPercent=function bufferedPercent$1(){return bufferedPercent(this.buffered(),this.duration())},_proto.bufferedEnd=function bufferedEnd(){var buffered=this.buffered(),duration=this.duration(),end=buffered.end(buffered.length-1);return end>duration&&(end=duration),end},_proto.volume=function volume(percentAsDecimal){var vol;return void 0!==percentAsDecimal?(vol=Math.max(0,Math.min(1,parseFloat(percentAsDecimal))),this.cache_.volume=vol,this.techCall_("setVolume",vol),void(vol>0&&this.lastVolume_(vol))):(vol=parseFloat(this.techGet_("volume")),isNaN(vol)?1:vol)},_proto.muted=function muted(_muted){if(void 0===_muted)return this.techGet_("muted")||!1;this.techCall_("setMuted",_muted)},_proto.defaultMuted=function defaultMuted(_defaultMuted){return void 0!==_defaultMuted?this.techCall_("setDefaultMuted",_defaultMuted):this.techGet_("defaultMuted")||!1},_proto.lastVolume_=function lastVolume_(percentAsDecimal){if(void 0===percentAsDecimal||0===percentAsDecimal)return this.cache_.lastVolume;this.cache_.lastVolume=percentAsDecimal},_proto.supportsFullScreen=function supportsFullScreen(){return this.techGet_("supportsFullScreen")||!1},_proto.isFullscreen=function isFullscreen(isFS){return void 0!==isFS?(this.isFullscreen_=!!isFS,void this.toggleFullscreenClass_()):!!this.isFullscreen_},_proto.requestFullscreen=function requestFullscreen(fullscreenOptions){var fsOptions;this.isFullscreen(!0),this.fsApi_.requestFullscreen?(on(document_default(),this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_),this.fsApi_.prefixed||(fsOptions=this.options_.fullscreen&&this.options_.fullscreen.options||{},void 0!==fullscreenOptions&&(fsOptions=fullscreenOptions)),silencePromise(this.el_[this.fsApi_.requestFullscreen](fsOptions))):this.tech_.supportsFullScreen()?this.techCall_("enterFullScreen"):(this.enterFullWindow(),this.trigger("fullscreenchange"))},_proto.exitFullscreen=function exitFullscreen(){this.isFullscreen(!1),this.fsApi_.requestFullscreen?silencePromise(document_default()[this.fsApi_.exitFullscreen]()):this.tech_.supportsFullScreen()?this.techCall_("exitFullScreen"):(this.exitFullWindow(),this.trigger("fullscreenchange"))},_proto.enterFullWindow=function enterFullWindow(){this.isFullWindow=!0,this.docOrigOverflow=document_default().documentElement.style.overflow,on(document_default(),"keydown",this.boundFullWindowOnEscKey_),document_default().documentElement.style.overflow="hidden",addClass(document_default().body,"vjs-full-window"),this.trigger("enterFullWindow")},_proto.fullWindowOnEscKey=function fullWindowOnEscKey(event){keycode_default().isEventKey(event,"Esc")&&(!0===this.isFullscreen()?this.exitFullscreen():this.exitFullWindow())},_proto.exitFullWindow=function exitFullWindow(){this.isFullWindow=!1,off(document_default(),"keydown",this.boundFullWindowOnEscKey_),document_default().documentElement.style.overflow=this.docOrigOverflow,removeClass(document_default().body,"vjs-full-window"),this.trigger("exitFullWindow")},_proto.isInPictureInPicture=function isInPictureInPicture(isPiP){return void 0!==isPiP?(this.isInPictureInPicture_=!!isPiP,void this.togglePictureInPictureClass_()):!!this.isInPictureInPicture_},_proto.requestPictureInPicture=function requestPictureInPicture(){if("pictureInPictureEnabled"in document_default())return this.techGet_("requestPictureInPicture")},_proto.exitPictureInPicture=function exitPictureInPicture(){if("pictureInPictureEnabled"in document_default())return document_default().exitPictureInPicture()},_proto.handleKeyDown=function handleKeyDown(event){var userActions=this.options_.userActions;if(userActions&&userActions.hotkeys){(function excludeElement(el){var tagName=el.tagName.toLowerCase();if(el.isContentEditable)return!0;if("input"===tagName)return-1===["button","checkbox","hidden","radio","reset","submit"].indexOf(el.type);return-1!==["textarea"].indexOf(tagName)})(this.el_.ownerDocument.activeElement)||("function"==typeof userActions.hotkeys?userActions.hotkeys.call(this,event):this.handleHotkeys(event))}},_proto.handleHotkeys=function handleHotkeys(event){var hotkeys=this.options_.userActions?this.options_.userActions.hotkeys:{},_hotkeys$fullscreenKe=hotkeys.fullscreenKey,fullscreenKey=void 0===_hotkeys$fullscreenKe?function(keydownEvent){return keycode_default().isEventKey(keydownEvent,"f")}:_hotkeys$fullscreenKe,_hotkeys$muteKey=hotkeys.muteKey,muteKey=void 0===_hotkeys$muteKey?function(keydownEvent){return keycode_default().isEventKey(keydownEvent,"m")}:_hotkeys$muteKey,_hotkeys$playPauseKey=hotkeys.playPauseKey,playPauseKey=void 0===_hotkeys$playPauseKey?function(keydownEvent){return keycode_default().isEventKey(keydownEvent,"k")||keycode_default().isEventKey(keydownEvent,"Space")}:_hotkeys$playPauseKey;if(fullscreenKey.call(this,event)){event.preventDefault(),event.stopPropagation();var FSToggle=Component.getComponent("FullscreenToggle");!1!==document_default()[this.fsApi_.fullscreenEnabled]&&FSToggle.prototype.handleClick.call(this,event)}else if(muteKey.call(this,event)){event.preventDefault(),event.stopPropagation(),Component.getComponent("MuteToggle").prototype.handleClick.call(this,event)}else if(playPauseKey.call(this,event)){event.preventDefault(),event.stopPropagation(),Component.getComponent("PlayToggle").prototype.handleClick.call(this,event)}},_proto.canPlayType=function canPlayType(type){for(var can,i=0,j=this.options_.techOrder;i<j.length;i++){var techName=j[i],tech=Tech.getTech(techName);if(tech||(tech=Component.getComponent(techName)),tech){if(tech.isSupported()&&(can=tech.canPlayType(type)))return can}else log.error('The "'+techName+'" tech is undefined. Skipped browser support check for that tech.')}return""},_proto.selectSource=function selectSource(sources){var _this10=this,techs=this.options_.techOrder.map((function(techName){return[techName,Tech.getTech(techName)]})).filter((function(_ref){var techName=_ref[0],tech=_ref[1];return tech?tech.isSupported():(log.error('The "'+techName+'" tech is undefined. Skipped browser support check for that tech.'),!1)})),findFirstPassingTechSourcePair=function findFirstPassingTechSourcePair(outerArray,innerArray,tester){var found;return outerArray.some((function(outerChoice){return innerArray.some((function(innerChoice){if(found=tester(outerChoice,innerChoice))return!0}))})),found},finder=function finder(_ref2,source){var techName=_ref2[0];if(_ref2[1].canPlaySource(source,_this10.options_[techName.toLowerCase()]))return{source,tech:techName}};return(this.options_.sourceOrder?findFirstPassingTechSourcePair(sources,techs,function flip(fn){return function(a,b){return fn(b,a)}}(finder)):findFirstPassingTechSourcePair(techs,sources,finder))||!1},_proto.src=function src(source){var _this11=this;if(void 0===source)return this.cache_.src||"";var sources=filterSource(source);sources.length?(this.changingSrc_=!0,this.cache_.sources=sources,this.updateSourceCaches_(sources[0]),setSource(this,sources[0],(function(middlewareSource,mws){if(_this11.middleware_=mws,_this11.cache_.sources=sources,_this11.updateSourceCaches_(middlewareSource),_this11.src_(middlewareSource))return sources.length>1?_this11.src(sources.slice(1)):(_this11.changingSrc_=!1,_this11.setTimeout((function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})}),0),void _this11.triggerReady());!function setTech(middleware,tech){middleware.forEach((function(mw){return mw.setTech&&mw.setTech(tech)}))}(mws,_this11.tech_)}))):this.setTimeout((function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})}),0)},_proto.src_=function src_(source){var _this12=this,sourceTech=this.selectSource([source]);return!sourceTech||(function titleCaseEquals(str1,str2){return toTitleCase(str1)===toTitleCase(str2)}(sourceTech.tech,this.techName_)?(this.ready((function(){this.tech_.constructor.prototype.hasOwnProperty("setSource")?this.techCall_("setSource",source):this.techCall_("src",source.src),this.changingSrc_=!1}),!0),!1):(this.changingSrc_=!0,this.loadTech_(sourceTech.tech,sourceTech.source),this.tech_.ready((function(){_this12.changingSrc_=!1})),!1))},_proto.load=function load(){this.techCall_("load")},_proto.reset=function reset(){var _this13=this,PromiseClass=this.options_.Promise||window_default().Promise;this.paused()||!PromiseClass?this.doReset_():silencePromise(this.play().then((function(){return _this13.doReset_()})))},_proto.doReset_=function doReset_(){this.tech_&&this.tech_.clearTracks("text"),this.resetCache_(),this.poster(""),this.loadTech_(this.options_.techOrder[0],null),this.techCall_("reset"),this.resetControlBarUI_(),isEvented(this)&&this.trigger("playerreset")},_proto.resetControlBarUI_=function resetControlBarUI_(){this.resetProgressBar_(),this.resetPlaybackRate_(),this.resetVolumeBar_()},_proto.resetProgressBar_=function resetProgressBar_(){this.currentTime(0);var _this$controlBar=this.controlBar,durationDisplay=_this$controlBar.durationDisplay,remainingTimeDisplay=_this$controlBar.remainingTimeDisplay;durationDisplay&&durationDisplay.updateContent(),remainingTimeDisplay&&remainingTimeDisplay.updateContent()},_proto.resetPlaybackRate_=function resetPlaybackRate_(){this.playbackRate(this.defaultPlaybackRate()),this.handleTechRateChange_()},_proto.resetVolumeBar_=function resetVolumeBar_(){this.volume(1),this.trigger("volumechange")},_proto.currentSources=function currentSources(){var source=this.currentSource(),sources=[];return 0!==Object.keys(source).length&&sources.push(source),this.cache_.sources||sources},_proto.currentSource=function currentSource(){return this.cache_.source||{}},_proto.currentSrc=function currentSrc(){return this.currentSource()&&this.currentSource().src||""},_proto.currentType=function currentType(){return this.currentSource()&&this.currentSource().type||""},_proto.preload=function preload(value){return void 0!==value?(this.techCall_("setPreload",value),void(this.options_.preload=value)):this.techGet_("preload")},_proto.autoplay=function autoplay(value){if(void 0===value)return this.options_.autoplay||!1;var techAutoplay;"string"==typeof value&&/(any|play|muted)/.test(value)?(this.options_.autoplay=value,this.manualAutoplay_(value),techAutoplay=!1):this.options_.autoplay=!!value,techAutoplay=void 0===techAutoplay?this.options_.autoplay:techAutoplay,this.tech_&&this.techCall_("setAutoplay",techAutoplay)},_proto.playsinline=function playsinline(value){return void 0!==value?(this.techCall_("setPlaysinline",value),this.options_.playsinline=value,this):this.techGet_("playsinline")},_proto.loop=function loop(value){return void 0!==value?(this.techCall_("setLoop",value),void(this.options_.loop=value)):this.techGet_("loop")},_proto.poster=function poster(src){if(void 0===src)return this.poster_;src||(src=""),src!==this.poster_&&(this.poster_=src,this.techCall_("setPoster",src),this.isPosterFromTech_=!1,this.trigger("posterchange"))},_proto.handleTechPosterChange_=function handleTechPosterChange_(){if((!this.poster_||this.options_.techCanOverridePoster)&&this.tech_&&this.tech_.poster){var newPoster=this.tech_.poster()||"";newPoster!==this.poster_&&(this.poster_=newPoster,this.isPosterFromTech_=!0,this.trigger("posterchange"))}},_proto.controls=function controls(bool){if(void 0===bool)return!!this.controls_;bool=!!bool,this.controls_!==bool&&(this.controls_=bool,this.usingNativeControls()&&this.techCall_("setControls",bool),this.controls_?(this.removeClass("vjs-controls-disabled"),this.addClass("vjs-controls-enabled"),this.trigger("controlsenabled"),this.usingNativeControls()||this.addTechControlsListeners_()):(this.removeClass("vjs-controls-enabled"),this.addClass("vjs-controls-disabled"),this.trigger("controlsdisabled"),this.usingNativeControls()||this.removeTechControlsListeners_()))},_proto.usingNativeControls=function usingNativeControls(bool){if(void 0===bool)return!!this.usingNativeControls_;bool=!!bool,this.usingNativeControls_!==bool&&(this.usingNativeControls_=bool,this.usingNativeControls_?(this.addClass("vjs-using-native-controls"),this.trigger("usingnativecontrols")):(this.removeClass("vjs-using-native-controls"),this.trigger("usingcustomcontrols")))},_proto.error=function error(err){if(void 0===err)return this.error_||null;if(this.options_.suppressNotSupportedError&&err&&err.message&&err.message===this.localize(this.options_.notSupportedMessage)){var triggerSuppressedError=function triggerSuppressedError(){this.error(err)};return this.options_.suppressNotSupportedError=!1,this.any(["click","touchstart"],triggerSuppressedError),void this.one("loadstart",(function(){this.off(["click","touchstart"],triggerSuppressedError)}))}if(null===err)return this.error_=err,this.removeClass("vjs-error"),void(this.errorDisplay&&this.errorDisplay.close());this.error_=new MediaError(err),this.addClass("vjs-error"),log.error("(CODE:"+this.error_.code+" "+MediaError.errorTypes[this.error_.code]+")",this.error_.message,this.error_),this.trigger("error")},_proto.reportUserActivity=function reportUserActivity(event){this.userActivity_=!0},_proto.userActive=function userActive(bool){if(void 0===bool)return this.userActive_;if((bool=!!bool)!==this.userActive_){if(this.userActive_=bool,this.userActive_)return this.userActivity_=!0,this.removeClass("vjs-user-inactive"),this.addClass("vjs-user-active"),void this.trigger("useractive");this.tech_&&this.tech_.one("mousemove",(function(e){e.stopPropagation(),e.preventDefault()})),this.userActivity_=!1,this.removeClass("vjs-user-active"),this.addClass("vjs-user-inactive"),this.trigger("userinactive")}},_proto.listenForUserActivity_=function listenForUserActivity_(){var mouseInProgress,lastMoveX,lastMoveY,handleActivity=bind(this,this.reportUserActivity);this.on("mousedown",(function handleMouseDown(){handleActivity(),this.clearInterval(mouseInProgress),mouseInProgress=this.setInterval(handleActivity,250)})),this.on("mousemove",(function handleMouseMove(e){e.screenX===lastMoveX&&e.screenY===lastMoveY||(lastMoveX=e.screenX,lastMoveY=e.screenY,handleActivity())})),this.on("mouseup",(function handleMouseUp(event){handleActivity(),this.clearInterval(mouseInProgress)}));var inactivityTimeout,controlBar=this.getChild("controlBar");!controlBar||IS_IOS||IS_ANDROID||(controlBar.on("mouseenter",(function(event){this.player().cache_.inactivityTimeout=this.player().options_.inactivityTimeout,this.player().options_.inactivityTimeout=0})),controlBar.on("mouseleave",(function(event){this.player().options_.inactivityTimeout=this.player().cache_.inactivityTimeout}))),this.on("keydown",handleActivity),this.on("keyup",handleActivity),this.setInterval((function(){if(this.userActivity_){this.userActivity_=!1,this.userActive(!0),this.clearTimeout(inactivityTimeout);var timeout=this.options_.inactivityTimeout;timeout<=0||(inactivityTimeout=this.setTimeout((function(){this.userActivity_||this.userActive(!1)}),timeout))}}),250)},_proto.playbackRate=function playbackRate(rate){if(void 0===rate)return this.tech_&&this.tech_.featuresPlaybackRate?this.cache_.lastPlaybackRate||this.techGet_("playbackRate"):1;this.techCall_("setPlaybackRate",rate)},_proto.defaultPlaybackRate=function defaultPlaybackRate(rate){return void 0!==rate?this.techCall_("setDefaultPlaybackRate",rate):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("defaultPlaybackRate"):1},_proto.isAudio=function isAudio(bool){if(void 0===bool)return!!this.isAudio_;this.isAudio_=!!bool},_proto.addTextTrack=function addTextTrack(kind,label,language){if(this.tech_)return this.tech_.addTextTrack(kind,label,language)},_proto.addRemoteTextTrack=function addRemoteTextTrack(options,manualCleanup){if(this.tech_)return this.tech_.addRemoteTextTrack(options,manualCleanup)},_proto.removeRemoteTextTrack=function removeRemoteTextTrack(obj){void 0===obj&&(obj={});var track=obj.track;if(track||(track=obj),this.tech_)return this.tech_.removeRemoteTextTrack(track)},_proto.getVideoPlaybackQuality=function getVideoPlaybackQuality(){return this.techGet_("getVideoPlaybackQuality")},_proto.videoWidth=function videoWidth(){return this.tech_&&this.tech_.videoWidth&&this.tech_.videoWidth()||0},_proto.videoHeight=function videoHeight(){return this.tech_&&this.tech_.videoHeight&&this.tech_.videoHeight()||0},_proto.language=function language(code){if(void 0===code)return this.language_;this.language_=String(code).toLowerCase()},_proto.languages=function languages(){return mergeOptions(Player.prototype.options_.languages,this.languages_)},_proto.toJSON=function toJSON(){var options=mergeOptions(this.options_),tracks=options.tracks;options.tracks=[];for(var i=0;i<tracks.length;i++){var track=tracks[i];(track=mergeOptions(track)).player=void 0,options.tracks[i]=track}return options},_proto.createModal=function createModal(content,options){var _this14=this;(options=options||{}).content=content||"";var modal=new ModalDialog(this,options);return this.addChild(modal),modal.on("dispose",(function(){_this14.removeChild(modal)})),modal.open(),modal},_proto.updateCurrentBreakpoint_=function updateCurrentBreakpoint_(){if(this.responsive())for(var currentBreakpoint=this.currentBreakpoint(),currentWidth=this.currentWidth(),i=0;i<BREAKPOINT_ORDER.length;i++){var candidateBreakpoint=BREAKPOINT_ORDER[i];if(currentWidth<=this.breakpoints_[candidateBreakpoint]){if(currentBreakpoint===candidateBreakpoint)return;currentBreakpoint&&this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]),this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]),this.breakpoint_=candidateBreakpoint;break}}},_proto.removeCurrentBreakpoint_=function removeCurrentBreakpoint_(){var className=this.currentBreakpointClass();this.breakpoint_="",className&&this.removeClass(className)},_proto.breakpoints=function breakpoints(_breakpoints){return void 0===_breakpoints||(this.breakpoint_="",this.breakpoints_=video_es_assign({},DEFAULT_BREAKPOINTS,_breakpoints),this.updateCurrentBreakpoint_()),video_es_assign(this.breakpoints_)},_proto.responsive=function responsive(value){return void 0===value?this.responsive_:(value=Boolean(value))!==this.responsive_?(this.responsive_=value,value?(this.on("playerresize",this.updateCurrentBreakpoint_),this.updateCurrentBreakpoint_()):(this.off("playerresize",this.updateCurrentBreakpoint_),this.removeCurrentBreakpoint_()),value):void 0},_proto.currentBreakpoint=function currentBreakpoint(){return this.breakpoint_},_proto.currentBreakpointClass=function currentBreakpointClass(){return BREAKPOINT_CLASSES[this.breakpoint_]||""},_proto.loadMedia=function loadMedia(media,ready){var _this15=this;if(media&&"object"==typeof media){this.reset(),this.cache_.media=mergeOptions(media);var _this$cache_$media=this.cache_.media,artwork=_this$cache_$media.artwork,poster=_this$cache_$media.poster,src=_this$cache_$media.src,textTracks=_this$cache_$media.textTracks;!artwork&&poster&&(this.cache_.media.artwork=[{src:poster,type:getMimetype(poster)}]),src&&this.src(src),poster&&this.poster(poster),Array.isArray(textTracks)&&textTracks.forEach((function(tt){return _this15.addRemoteTextTrack(tt,!1)})),this.ready(ready)}},_proto.getMedia=function getMedia(){if(!this.cache_.media){var poster=this.poster(),media={src:this.currentSources(),textTracks:Array.prototype.map.call(this.remoteTextTracks(),(function(tt){return{kind:tt.kind,label:tt.label,language:tt.language,src:tt.src}}))};return poster&&(media.poster=poster,media.artwork=[{src:media.poster,type:getMimetype(media.poster)}]),media}return mergeOptions(this.cache_.media)},Player.getTagSettings=function getTagSettings(tag){var baseOptions={sources:[],tracks:[]},tagOptions=getAttributes(tag),dataSetup=tagOptions["data-setup"];if(hasClass(tag,"vjs-fill")&&(tagOptions.fill=!0),hasClass(tag,"vjs-fluid")&&(tagOptions.fluid=!0),null!==dataSetup){var _safeParseTuple=tuple_default()(dataSetup||"{}"),err=_safeParseTuple[0],data=_safeParseTuple[1];err&&log.error(err),video_es_assign(tagOptions,data)}if(video_es_assign(baseOptions,tagOptions),tag.hasChildNodes())for(var children=tag.childNodes,i=0,j=children.length;i<j;i++){var child=children[i],childName=child.nodeName.toLowerCase();"source"===childName?baseOptions.sources.push(getAttributes(child)):"track"===childName&&baseOptions.tracks.push(getAttributes(child))}return baseOptions},_proto.flexNotSupported_=function flexNotSupported_(){var elem=document_default().createElement("i");return!("flexBasis"in elem.style||"webkitFlexBasis"in elem.style||"mozFlexBasis"in elem.style||"msFlexBasis"in elem.style||"msFlexOrder"in elem.style)},Player}(Component);ALL.names.forEach((function(name){var props=ALL[name];Player.prototype[props.getterName]=function(){return this.tech_?this.tech_[props.getterName]():(this[props.privateName]=this[props.privateName]||new props.ListClass,this[props.privateName])}})),Player.players={};var video_es_navigator=window_default().navigator;Player.prototype.options_={techOrder:Tech.defaultTechOrder_,html5:{},flash:{},inactivityTimeout:2e3,playbackRates:[],liveui:!1,children:["mediaLoader","posterImage","textTrackDisplay","loadingSpinner","bigPlayButton","liveTracker","controlBar","errorDisplay","textTrackSettings","resizeManager"],language:video_es_navigator&&(video_es_navigator.languages&&video_es_navigator.languages[0]||video_es_navigator.userLanguage||video_es_navigator.language)||"en",languages:{},notSupportedMessage:"No compatible source was found for this media.",fullscreen:{options:{navigationUI:"hide"}},breakpoints:{},responsive:!1},["ended","seeking","seekable","networkState","readyState"].forEach((function(fn){Player.prototype[fn]=function(){return this.techGet_(fn)}})),TECH_EVENTS_RETRIGGER.forEach((function(event){Player.prototype["handleTech"+toTitleCase(event)+"_"]=function(){return this.trigger(event)}})),Component.registerComponent("Player",Player);var pluginStorage={},pluginExists=function pluginExists(name){return pluginStorage.hasOwnProperty(name)},getPlugin=function getPlugin(name){return pluginExists(name)?pluginStorage[name]:void 0},markPluginAsActive=function markPluginAsActive(player,name){player.activePlugins_=player.activePlugins_||{},player.activePlugins_[name]=!0},triggerSetupEvent=function triggerSetupEvent(player,hash,before){var eventName=(before?"before":"")+"pluginsetup";player.trigger(eventName,hash),player.trigger(eventName+":"+hash.name,hash)},createPluginFactory=function createPluginFactory(name,PluginSubClass){return PluginSubClass.prototype.name=name,function(){triggerSetupEvent(this,{name,plugin:PluginSubClass,instance:null},!0);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var instance=_construct(PluginSubClass,[this].concat(args));return this[name]=function(){return instance},triggerSetupEvent(this,instance.getEventHash()),instance}},Plugin=function(){function Plugin(player){if(this.constructor===Plugin)throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player=player,evented(this),delete this.trigger,stateful(this,this.constructor.defaultState),markPluginAsActive(player,this.name),this.dispose=bind(this,this.dispose),player.on("dispose",this.dispose)}var _proto=Plugin.prototype;return _proto.version=function version(){return this.constructor.VERSION},_proto.getEventHash=function getEventHash(hash){return void 0===hash&&(hash={}),hash.name=this.name,hash.plugin=this.constructor,hash.instance=this,hash},_proto.trigger=function trigger$1(event,hash){return void 0===hash&&(hash={}),trigger(this.eventBusEl_,event,this.getEventHash(hash))},_proto.handleStateChanged=function handleStateChanged(e){},_proto.dispose=function dispose(){var name=this.name,player=this.player;this.trigger("dispose"),this.off(),player.off("dispose",this.dispose),player.activePlugins_[name]=!1,this.player=this.state=null,player[name]=createPluginFactory(name,pluginStorage[name])},Plugin.isBasic=function isBasic(plugin){var p="string"==typeof plugin?getPlugin(plugin):plugin;return"function"==typeof p&&!Plugin.prototype.isPrototypeOf(p.prototype)},Plugin.registerPlugin=function registerPlugin(name,plugin){if("string"!=typeof name)throw new Error('Illegal plugin name, "'+name+'", must be a string, was '+typeof name+".");if(pluginExists(name))log.warn('A plugin named "'+name+'" already exists. You may want to avoid re-registering plugins!');else if(Player.prototype.hasOwnProperty(name))throw new Error('Illegal plugin name, "'+name+'", cannot share a name with an existing player method!');if("function"!=typeof plugin)throw new Error('Illegal plugin for "'+name+'", must be a function, was '+typeof plugin+".");return pluginStorage[name]=plugin,"plugin"!==name&&(Plugin.isBasic(plugin)?Player.prototype[name]=function createBasicPlugin(name,plugin){var basicPluginWrapper=function basicPluginWrapper(){triggerSetupEvent(this,{name,plugin,instance:null},!0);var instance=plugin.apply(this,arguments);return markPluginAsActive(this,name),triggerSetupEvent(this,{name,plugin,instance}),instance};return Object.keys(plugin).forEach((function(prop){basicPluginWrapper[prop]=plugin[prop]})),basicPluginWrapper}(name,plugin):Player.prototype[name]=createPluginFactory(name,plugin)),plugin},Plugin.deregisterPlugin=function deregisterPlugin(name){if("plugin"===name)throw new Error("Cannot de-register base plugin.");pluginExists(name)&&(delete pluginStorage[name],delete Player.prototype[name])},Plugin.getPlugins=function getPlugins(names){var result;return void 0===names&&(names=Object.keys(pluginStorage)),names.forEach((function(name){var plugin=getPlugin(name);plugin&&((result=result||{})[name]=plugin)})),result},Plugin.getPluginVersion=function getPluginVersion(name){var plugin=getPlugin(name);return plugin&&plugin.VERSION||""},Plugin}();Plugin.getPlugin=getPlugin,Plugin.BASE_PLUGIN_NAME="plugin",Plugin.registerPlugin("plugin",Plugin),Player.prototype.usingPlugin=function(name){return!!this.activePlugins_&&!0===this.activePlugins_[name]},Player.prototype.hasPlugin=function(name){return!!pluginExists(name)};var normalizeId=function normalizeId(id){return 0===id.indexOf("#")?id.slice(1):id};function videojs$1(id,options,ready){var player=videojs$1.getPlayer(id);if(player)return options&&log.warn('Player "'+id+'" is already initialised. Options will not be applied.'),ready&&player.ready(ready),player;var el="string"==typeof id?$("#"+normalizeId(id)):id;if(!isEl(el))throw new TypeError("The element or ID supplied is not valid. (videojs)");el.ownerDocument.defaultView&&el.ownerDocument.body.contains(el)||log.warn("The element supplied is not included in the DOM"),options=options||{},videojs$1.hooks("beforesetup").forEach((function(hookFunction){var opts=hookFunction(el,mergeOptions(options));video_es_isObject(opts)&&!Array.isArray(opts)?options=mergeOptions(options,opts):log.error("please return an object in beforesetup hooks")}));var PlayerComponent=Component.getComponent("Player");return player=new PlayerComponent(el,options,ready),videojs$1.hooks("setup").forEach((function(hookFunction){return hookFunction(player)})),player}if(videojs$1.hooks_={},videojs$1.hooks=function(type,fn){return videojs$1.hooks_[type]=videojs$1.hooks_[type]||[],fn&&(videojs$1.hooks_[type]=videojs$1.hooks_[type].concat(fn)),videojs$1.hooks_[type]},videojs$1.hook=function(type,fn){videojs$1.hooks(type,fn)},videojs$1.hookOnce=function(type,fn){videojs$1.hooks(type,[].concat(fn).map((function(original){return function wrapper(){return videojs$1.removeHook(type,wrapper),original.apply(void 0,arguments)}})))},videojs$1.removeHook=function(type,fn){var index=videojs$1.hooks(type).indexOf(fn);return!(index<=-1)&&(videojs$1.hooks_[type]=videojs$1.hooks_[type].slice(),videojs$1.hooks_[type].splice(index,1),!0)},!0!==window_default().VIDEOJS_NO_DYNAMIC_STYLE&&isReal()){var style=$(".vjs-styles-defaults");if(!style){style=createStyleElement("vjs-styles-defaults");var head=$("head");head&&head.insertBefore(style,head.firstChild),setTextContent(style,"\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ")}}autoSetupTimeout(1,videojs$1),videojs$1.VERSION="7.6.6",videojs$1.options=Player.prototype.options_,videojs$1.getPlayers=function(){return Player.players},videojs$1.getPlayer=function(id){var tag,players=Player.players;if("string"==typeof id){var nId=normalizeId(id),player=players[nId];if(player)return player;tag=$("#"+nId)}else tag=id;if(isEl(tag)){var _tag=tag,_player=_tag.player,playerId=_tag.playerId;if(_player||players[playerId])return _player||players[playerId]}},videojs$1.getAllPlayers=function(){return Object.keys(Player.players).map((function(k){return Player.players[k]})).filter(Boolean)},videojs$1.players=Player.players,videojs$1.getComponent=Component.getComponent,videojs$1.registerComponent=function(name,comp){Tech.isTech(comp)&&log.warn("The "+name+" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"),Component.registerComponent.call(Component,name,comp)},videojs$1.getTech=Tech.getTech,videojs$1.registerTech=Tech.registerTech,videojs$1.use=function use(type,middleware){middlewares[type]=middlewares[type]||[],middlewares[type].push(middleware)},Object.defineProperty(videojs$1,"middleware",{value:{},writeable:!1,enumerable:!0}),Object.defineProperty(videojs$1.middleware,"TERMINATOR",{value:TERMINATOR,writeable:!1,enumerable:!0}),videojs$1.browser=browser,videojs$1.TOUCH_ENABLED=TOUCH_ENABLED,videojs$1.extend=function extend(superClass,subClassMethods){void 0===subClassMethods&&(subClassMethods={});var subClass=function subClass(){superClass.apply(this,arguments)},methods={};for(var name in"object"==typeof subClassMethods?(subClassMethods.constructor!==Object.prototype.constructor&&(subClass=subClassMethods.constructor),methods=subClassMethods):"function"==typeof subClassMethods&&(subClass=subClassMethods),function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(subClass.super_=superClass)}(subClass,superClass),methods)methods.hasOwnProperty(name)&&(subClass.prototype[name]=methods[name]);return subClass},videojs$1.mergeOptions=mergeOptions,videojs$1.bind=bind,videojs$1.registerPlugin=Plugin.registerPlugin,videojs$1.deregisterPlugin=Plugin.deregisterPlugin,videojs$1.plugin=function(name,plugin){return log.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"),Plugin.registerPlugin(name,plugin)},videojs$1.getPlugins=Plugin.getPlugins,videojs$1.getPlugin=Plugin.getPlugin,videojs$1.getPluginVersion=Plugin.getPluginVersion,videojs$1.addLanguage=function(code,data){var _mergeOptions;return code=(""+code).toLowerCase(),videojs$1.options.languages=mergeOptions(videojs$1.options.languages,((_mergeOptions={})[code]=data,_mergeOptions)),videojs$1.options.languages[code]},videojs$1.log=log,videojs$1.createLogger=createLogger$1,videojs$1.createTimeRange=videojs$1.createTimeRanges=createTimeRanges,videojs$1.formatTime=formatTime,videojs$1.setFormatTime=function setFormatTime(customImplementation){implementation=customImplementation},videojs$1.resetFormatTime=function resetFormatTime(){implementation=defaultImplementation},videojs$1.parseUrl=parseUrl,videojs$1.isCrossOrigin=isCrossOrigin,videojs$1.EventTarget=EventTarget,videojs$1.on=on,videojs$1.one=one,videojs$1.off=off,videojs$1.trigger=trigger,videojs$1.xhr=xhr_default(),videojs$1.TextTrack=TextTrack,videojs$1.AudioTrack=AudioTrack,videojs$1.VideoTrack=VideoTrack,["isEl","isTextNode","createEl","hasClass","addClass","removeClass","toggleClass","setAttributes","getAttributes","emptyEl","appendContent","insertContent"].forEach((function(k){videojs$1[k]=function(){return log.warn("videojs."+k+"() is deprecated; use videojs.dom."+k+"() instead"),Dom[k].apply(null,arguments)}})),videojs$1.computedStyle=computedStyle,videojs$1.dom=Dom,videojs$1.url=Url;var video_es_resolveUrl=function resolveUrl(baseURL,relativeURL){return/^[a-z]+:/i.test(relativeURL)?relativeURL:(/\/\//i.test(baseURL)||(baseURL=url_toolkit_default().buildAbsoluteURL(window_default().location.href,baseURL)),url_toolkit_default().buildAbsoluteURL(baseURL,relativeURL))},resolveManifestRedirect=function resolveManifestRedirect(handleManifestRedirect,url,req){return handleManifestRedirect&&req.responseURL&&url!==req.responseURL?req.responseURL:url},video_es_classCallCheck=function classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")},video_es_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),get$1=function get(object,property,receiver){null===object&&(object=Function.prototype);var desc=Object.getOwnPropertyDescriptor(object,property);if(void 0===desc){var parent=Object.getPrototypeOf(object);return null===parent?void 0:get(parent,property,receiver)}if("value"in desc)return desc.value;var getter=desc.get;return void 0!==getter?getter.call(receiver):void 0},video_es_inherits=function inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)},video_es_possibleConstructorReturn=function possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call},slicedToArray=function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return function sliceIterator(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i.return&&_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")},mergeOptions$1=videojs$1.mergeOptions,EventTarget$1=videojs$1.EventTarget,log$1=videojs$1.log,forEachMediaGroup=function forEachMediaGroup(master,callback){["AUDIO","SUBTITLES"].forEach((function(mediaType){for(var groupKey in master.mediaGroups[mediaType])for(var labelKey in master.mediaGroups[mediaType][groupKey]){var mediaProperties=master.mediaGroups[mediaType][groupKey][labelKey];callback(mediaProperties,mediaType,groupKey,labelKey)}}))},updateMaster=function updateMaster(master,media){var result=mergeOptions$1(master,{}),playlist=result.playlists[media.uri];if(!playlist)return null;if(playlist.segments&&media.segments&&playlist.segments.length===media.segments.length&&playlist.endList===media.endList&&playlist.mediaSequence===media.mediaSequence)return null;var mergedPlaylist=mergeOptions$1(playlist,media);playlist.segments&&(mergedPlaylist.segments=function updateSegments(original,update,offset){var result=update.slice();offset=offset||0;for(var length=Math.min(original.length,update.length+offset),i=offset;i<length;i++)result[i-offset]=mergeOptions$1(original[i],result[i-offset]);return result}(playlist.segments,media.segments,media.mediaSequence-playlist.mediaSequence)),mergedPlaylist.segments.forEach((function(segment){!function resolveSegmentUris(segment,baseUri){segment.resolvedUri||(segment.resolvedUri=video_es_resolveUrl(baseUri,segment.uri)),segment.key&&!segment.key.resolvedUri&&(segment.key.resolvedUri=video_es_resolveUrl(baseUri,segment.key.uri)),segment.map&&!segment.map.resolvedUri&&(segment.map.resolvedUri=video_es_resolveUrl(baseUri,segment.map.uri))}(segment,mergedPlaylist.resolvedUri)}));for(var i=0;i<result.playlists.length;i++)result.playlists[i].uri===media.uri&&(result.playlists[i]=mergedPlaylist);return result.playlists[media.uri]=mergedPlaylist,result},setupMediaPlaylists=function setupMediaPlaylists(master){for(var i=master.playlists.length;i--;){var playlist=master.playlists[i];master.playlists[playlist.uri]=playlist,playlist.resolvedUri=video_es_resolveUrl(master.uri,playlist.uri),playlist.id=i,playlist.attributes||(playlist.attributes={},log$1.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute."))}},resolveMediaGroupUris=function resolveMediaGroupUris(master){forEachMediaGroup(master,(function(properties){properties.uri&&(properties.resolvedUri=video_es_resolveUrl(master.uri,properties.uri))}))},refreshDelay=function refreshDelay(media,update){var lastSegment=media.segments[media.segments.length-1];return update&&lastSegment&&lastSegment.duration?1e3*lastSegment.duration:500*(media.targetDuration||10)},PlaylistLoader=function(_EventTarget){function PlaylistLoader(srcUrl,hls){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};video_es_classCallCheck(this,PlaylistLoader);var _this=video_es_possibleConstructorReturn(this,(PlaylistLoader.__proto__||Object.getPrototypeOf(PlaylistLoader)).call(this)),_options$withCredenti=options.withCredentials,withCredentials=void 0!==_options$withCredenti&&_options$withCredenti,_options$handleManife=options.handleManifestRedirects,handleManifestRedirects=void 0!==_options$handleManife&&_options$handleManife;_this.srcUrl=srcUrl,_this.hls_=hls,_this.withCredentials=withCredentials,_this.handleManifestRedirects=handleManifestRedirects;var hlsOptions=hls.options_;if(_this.customTagParsers=hlsOptions&&hlsOptions.customTagParsers||[],_this.customTagMappers=hlsOptions&&hlsOptions.customTagMappers||[],!_this.srcUrl)throw new Error("A non-empty playlist URL is required");return _this.state="HAVE_NOTHING",_this.on("mediaupdatetimeout",(function(){"HAVE_METADATA"===_this.state&&(_this.state="HAVE_CURRENT_METADATA",_this.request=_this.hls_.xhr({uri:video_es_resolveUrl(_this.master.uri,_this.media().uri),withCredentials:_this.withCredentials},(function(error,req){if(_this.request)return error?_this.playlistRequestError(_this.request,_this.media().uri,"HAVE_METADATA"):void _this.haveMetadata(_this.request,_this.media().uri)})))})),_this}return video_es_inherits(PlaylistLoader,_EventTarget),video_es_createClass(PlaylistLoader,[{key:"playlistRequestError",value:function playlistRequestError(xhr,url,startingState){this.request=null,startingState&&(this.state=startingState),this.error={playlist:this.master.playlists[url],status:xhr.status,message:"HLS playlist request error at URL: "+url+".",responseText:xhr.responseText,code:xhr.status>=500?4:2},this.trigger("error")}},{key:"haveMetadata",value:function haveMetadata(xhr,url){var _this2=this;this.request=null,this.state="HAVE_METADATA";var parser=new Parser;this.customTagParsers.forEach((function(customParser){return parser.addParser(customParser)})),this.customTagMappers.forEach((function(mapper){return parser.addTagMapper(mapper)})),parser.push(xhr.responseText),parser.end(),parser.manifest.uri=url,parser.manifest.attributes=parser.manifest.attributes||{};var update=updateMaster(this.master,parser.manifest);this.targetDuration=parser.manifest.targetDuration,update?(this.master=update,this.media_=this.master.playlists[parser.manifest.uri]):this.trigger("playlistunchanged"),this.media().endList||(window_default().clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=window_default().setTimeout((function(){_this2.trigger("mediaupdatetimeout")}),refreshDelay(this.media(),!!update))),this.trigger("loadedplaylist")}},{key:"dispose",value:function dispose(){this.stopRequest(),window_default().clearTimeout(this.mediaUpdateTimeout),window_default().clearTimeout(this.finalRenditionTimeout)}},{key:"stopRequest",value:function stopRequest(){if(this.request){var oldRequest=this.request;this.request=null,oldRequest.onreadystatechange=null,oldRequest.abort()}}},{key:"media",value:function media(playlist,isFinalRendition){var _this3=this;if(!playlist)return this.media_;if("HAVE_NOTHING"===this.state)throw new Error("Cannot switch media playlist from "+this.state);if("string"==typeof playlist){if(!this.master.playlists[playlist])throw new Error("Unknown playlist URI: "+playlist);playlist=this.master.playlists[playlist]}if(window_default().clearTimeout(this.finalRenditionTimeout),isFinalRendition){var delay=playlist.targetDuration/2*1e3||5e3;this.finalRenditionTimeout=window_default().setTimeout(this.media.bind(this,playlist,!1),delay)}else{var startingState=this.state,mediaChange=!this.media_||playlist.uri!==this.media_.uri;if(this.master.playlists[playlist.uri].endList)return this.request&&(this.request.onreadystatechange=null,this.request.abort(),this.request=null),this.state="HAVE_METADATA",this.media_=playlist,void(mediaChange&&(this.trigger("mediachanging"),this.trigger("mediachange")));if(mediaChange){if(this.state="SWITCHING_MEDIA",this.request){if(playlist.resolvedUri===this.request.url)return;this.request.onreadystatechange=null,this.request.abort(),this.request=null}this.media_&&this.trigger("mediachanging"),this.request=this.hls_.xhr({uri:playlist.resolvedUri,withCredentials:this.withCredentials},(function(error,req){if(_this3.request){if(playlist.resolvedUri=resolveManifestRedirect(_this3.handleManifestRedirects,playlist.resolvedUri,req),error)return _this3.playlistRequestError(_this3.request,playlist.uri,startingState);_this3.haveMetadata(req,playlist.uri),"HAVE_MASTER"===startingState?_this3.trigger("loadedmetadata"):_this3.trigger("mediachange")}}))}}}},{key:"pause",value:function pause(){this.stopRequest(),window_default().clearTimeout(this.mediaUpdateTimeout),"HAVE_NOTHING"===this.state&&(this.started=!1),"SWITCHING_MEDIA"===this.state?this.media_?this.state="HAVE_METADATA":this.state="HAVE_MASTER":"HAVE_CURRENT_METADATA"===this.state&&(this.state="HAVE_METADATA")}},{key:"load",value:function load(isFinalRendition){var _this4=this;window_default().clearTimeout(this.mediaUpdateTimeout);var media=this.media();if(isFinalRendition){var delay=media?media.targetDuration/2*1e3:5e3;this.mediaUpdateTimeout=window_default().setTimeout((function(){return _this4.load()}),delay)}else this.started?media&&!media.endList?this.trigger("mediaupdatetimeout"):this.trigger("loadedplaylist"):this.start()}},{key:"start",value:function start(){var _this5=this;this.started=!0,this.request=this.hls_.xhr({uri:this.srcUrl,withCredentials:this.withCredentials},(function(error,req){if(_this5.request){if(_this5.request=null,error)return _this5.error={status:req.status,message:"HLS playlist request error at URL: "+_this5.srcUrl+".",responseText:req.responseText,code:2},"HAVE_NOTHING"===_this5.state&&(_this5.started=!1),_this5.trigger("error");var parser=new Parser;return _this5.customTagParsers.forEach((function(customParser){return parser.addParser(customParser)})),_this5.customTagMappers.forEach((function(mapper){return parser.addTagMapper(mapper)})),parser.push(req.responseText),parser.end(),_this5.state="HAVE_MASTER",_this5.srcUrl=resolveManifestRedirect(_this5.handleManifestRedirects,_this5.srcUrl,req),parser.manifest.uri=_this5.srcUrl,parser.manifest.playlists?(_this5.master=parser.manifest,setupMediaPlaylists(_this5.master),resolveMediaGroupUris(_this5.master),_this5.trigger("loadedplaylist"),void(_this5.request||_this5.media(parser.manifest.playlists[0]))):(_this5.master={mediaGroups:{AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},uri:window_default().location.href,playlists:[{uri:_this5.srcUrl,id:0,resolvedUri:_this5.srcUrl,attributes:{}}]},_this5.master.playlists[_this5.srcUrl]=_this5.master.playlists[0],_this5.haveMetadata(req,_this5.srcUrl),_this5.trigger("loadedmetadata"))}}))}}]),PlaylistLoader}(EventTarget$1),createTimeRange=videojs$1.createTimeRange,intervalDuration=function intervalDuration(playlist,endSequence,expired){var backward,forward;return void 0===endSequence&&(endSequence=playlist.mediaSequence+playlist.segments.length),endSequence<playlist.mediaSequence?0:(backward=function backwardDuration(playlist,endSequence){var result=0,i=endSequence-playlist.mediaSequence,segment=playlist.segments[i];if(segment){if(void 0!==segment.start)return{result:segment.start,precise:!0};if(void 0!==segment.end)return{result:segment.end-segment.duration,precise:!0}}for(;i--;){if(void 0!==(segment=playlist.segments[i]).end)return{result:result+segment.end,precise:!0};if(result+=segment.duration,void 0!==segment.start)return{result:result+segment.start,precise:!0}}return{result,precise:!1}}(playlist,endSequence),backward.precise?backward.result:(forward=function forwardDuration(playlist,endSequence){for(var result=0,segment=void 0,i=endSequence-playlist.mediaSequence;i<playlist.segments.length;i++){if(void 0!==(segment=playlist.segments[i]).start)return{result:segment.start-result,precise:!0};if(result+=segment.duration,void 0!==segment.end)return{result:segment.end-result,precise:!0}}return{result:-1,precise:!1}}(playlist,endSequence),forward.precise?forward.result:backward.result+expired))},duration=function duration(playlist,endSequence,expired){if(!playlist)return 0;if("number"!=typeof expired&&(expired=0),void 0===endSequence){if(playlist.totalDuration)return playlist.totalDuration;if(!playlist.endList)return window_default()[1/0]}return intervalDuration(playlist,endSequence,expired)},sumDurations=function sumDurations(playlist,startIndex,endIndex){var durations=0;if(startIndex>endIndex){var _ref=[endIndex,startIndex];startIndex=_ref[0],endIndex=_ref[1]}if(startIndex<0){for(var i=startIndex;i<Math.min(0,endIndex);i++)durations+=playlist.targetDuration;startIndex=0}for(var _i=startIndex;_i<endIndex;_i++)durations+=playlist.segments[_i].duration;return durations},safeLiveIndex=function safeLiveIndex(playlist){if(!playlist.segments.length)return 0;for(var i=playlist.segments.length-1,distanceFromEnd=playlist.segments[i].duration||playlist.targetDuration,safeDistance=distanceFromEnd+2*playlist.targetDuration;i--&&!((distanceFromEnd+=playlist.segments[i].duration)>=safeDistance););return Math.max(0,i)},playlistEnd=function playlistEnd(playlist,expired,useSafeLiveEnd){if(!playlist||!playlist.segments)return null;if(playlist.endList)return duration(playlist);if(null===expired)return null;expired=expired||0;var endSequence=useSafeLiveEnd?safeLiveIndex(playlist):playlist.segments.length;return intervalDuration(playlist,playlist.mediaSequence+endSequence,expired)},isWholeNumber=function isWholeNumber(num){return num-Math.floor(num)==0},roundSignificantDigit=function roundSignificantDigit(increment,num){if(isWholeNumber(num))return num+.1*increment;for(var numDecimalDigits=num.toString().split(".")[1].length,i=1;i<=numDecimalDigits;i++){var scale=Math.pow(10,i),temp=num*scale;if(isWholeNumber(temp)||i===numDecimalDigits)return(temp+increment)/scale}},ceilLeastSignificantDigit=roundSignificantDigit.bind(null,1),floorLeastSignificantDigit=roundSignificantDigit.bind(null,-1),isBlacklisted=function isBlacklisted(playlist){return playlist.excludeUntil&&playlist.excludeUntil>Date.now()},isIncompatible=function isIncompatible(playlist){return playlist.excludeUntil&&playlist.excludeUntil===1/0},isEnabled=function isEnabled(playlist){var blacklisted=isBlacklisted(playlist);return!playlist.disabled&&!blacklisted},hasAttribute=function hasAttribute(attr,playlist){return playlist.attributes&&playlist.attributes[attr]},isLowestEnabledRendition=function isLowestEnabledRendition(master,media){if(1===master.playlists.length)return!0;var currentBandwidth=media.attributes.BANDWIDTH||Number.MAX_VALUE;return 0===master.playlists.filter((function(playlist){return!!isEnabled(playlist)&&(playlist.attributes.BANDWIDTH||0)<currentBandwidth})).length},Playlist={duration,seekable:function seekable(playlist,expired){var seekableStart=expired||0,seekableEnd=playlistEnd(playlist,expired,!0);return null===seekableEnd?createTimeRange():createTimeRange(seekableStart,seekableEnd)},safeLiveIndex,getMediaInfoForTime:function getMediaInfoForTime(playlist,currentTime,startIndex,startTime){var i=void 0,segment=void 0,numSegments=playlist.segments.length,time=currentTime-startTime;if(time<0){if(startIndex>0)for(i=startIndex-1;i>=0;i--)if(segment=playlist.segments[i],(time+=floorLeastSignificantDigit(segment.duration))>0)return{mediaIndex:i,startTime:startTime-sumDurations(playlist,startIndex,i)};return{mediaIndex:0,startTime:currentTime}}if(startIndex<0){for(i=startIndex;i<0;i++)if((time-=playlist.targetDuration)<0)return{mediaIndex:0,startTime:currentTime};startIndex=0}for(i=startIndex;i<numSegments;i++)if(segment=playlist.segments[i],(time-=ceilLeastSignificantDigit(segment.duration))<0)return{mediaIndex:i,startTime:startTime+sumDurations(playlist,startIndex,i)};return{mediaIndex:numSegments-1,startTime:currentTime}},isEnabled,isDisabled:function isDisabled(playlist){return playlist.disabled},isBlacklisted,isIncompatible,playlistEnd,isAes:function isAes(media){for(var i=0;i<media.segments.length;i++)if(media.segments[i].key)return!0;return!1},isFmp4:function isFmp4(media){for(var i=0;i<media.segments.length;i++)if(media.segments[i].map)return!0;return!1},hasAttribute,estimateSegmentRequestTime:function estimateSegmentRequestTime(segmentDuration,bandwidth,playlist){var bytesReceived=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return hasAttribute("BANDWIDTH",playlist)?(segmentDuration*playlist.attributes.BANDWIDTH-8*bytesReceived)/bandwidth:NaN},isLowestEnabledRendition},videojsXHR=videojs$1.xhr,mergeOptions$1$1=videojs$1.mergeOptions,xhrFactory=function xhrFactory(){return function XhrFunction(options,callback){options=mergeOptions$1$1({timeout:45e3},options);var beforeRequest=XhrFunction.beforeRequest||videojs$1.Hls.xhr.beforeRequest;if(beforeRequest&&"function"==typeof beforeRequest){var newOptions=beforeRequest(options);newOptions&&(options=newOptions)}var request=videojsXHR(options,(function(error,response){var reqResponse=request.response;!error&&reqResponse&&(request.responseTime=Date.now(),request.roundTripTime=request.responseTime-request.requestTime,request.bytesReceived=reqResponse.byteLength||reqResponse.length,request.bandwidth||(request.bandwidth=Math.floor(request.bytesReceived/request.roundTripTime*8*1e3))),response.headers&&(request.responseHeaders=response.headers),error&&"ETIMEDOUT"===error.code&&(request.timedout=!0),error||request.aborted||200===response.statusCode||206===response.statusCode||0===response.statusCode||(error=new Error("XHR Failed with a response of: "+(request&&(reqResponse||request.responseText)))),callback(error,request)})),originalAbort=request.abort;return request.abort=function(){return request.aborted=!0,originalAbort.apply(request,arguments)},request.uri=options.uri,request.requestTime=Date.now(),request}},segmentXhrHeaders=function segmentXhrHeaders(segment){var headers={};return segment.byterange&&(headers.Range=function byterangeStr(byterange){var byterangeEnd;return byterangeEnd=byterange.offset+byterange.length-1,"bytes="+byterange.offset+"-"+byterangeEnd}(segment.byterange)),headers},textRange=function textRange(range,i){return range.start(i)+"-"+range.end(i)},formatHexString=function formatHexString(e,i){var value=e.toString(16);return"00".substring(0,2-value.length)+value+(i%2?" ":"")},formatAsciiString=function formatAsciiString(e){return e>=32&&e<126?String.fromCharCode(e):"."},createTransferableMessage=function createTransferableMessage(message){var transferable={};return Object.keys(message).forEach((function(key){var value=message[key];ArrayBuffer.isView(value)?transferable[key]={bytes:value.buffer,byteOffset:value.byteOffset,byteLength:value.byteLength}:transferable[key]=value})),transferable},initSegmentId=function initSegmentId(initSegment){var byterange=initSegment.byterange||{length:1/0,offset:0};return[byterange.length,byterange.offset,initSegment.resolvedUri].join(",")},segmentKeyId=function segmentKeyId(key){return key.resolvedUri},hexDump=function hexDump(data){for(var bytes=Array.prototype.slice.call(data),result="",j=0;j<bytes.length/16;j++)result+=bytes.slice(16*j,16*j+16).map(formatHexString).join("")+" "+bytes.slice(16*j,16*j+16).map(formatAsciiString).join("")+"\n";return result},utils=Object.freeze({createTransferableMessage,initSegmentId,segmentKeyId,hexDump,tagDump:function tagDump(_ref){var bytes=_ref.bytes;return hexDump(bytes)},textRanges:function textRanges(ranges){var result="",i=void 0;for(i=0;i<ranges.length;i++)result+=textRange(ranges,i)+" ";return result}}),getProgramTime=function getProgramTime(_ref){var playlist=_ref.playlist,_ref$time=_ref.time,time=void 0===_ref$time?void 0:_ref$time,callback=_ref.callback;if(!callback)throw new Error("getProgramTime: callback must be provided");if(!playlist||void 0===time)return callback({message:"getProgramTime: playlist and time must be provided"});var matchedSegment=function findSegmentForPlayerTime(time,playlist){if(!playlist||!playlist.segments||0===playlist.segments.length)return null;for(var segmentEnd=0,segment=void 0,i=0;i<playlist.segments.length&&!(time<=(segmentEnd=(segment=playlist.segments[i]).videoTimingInfo?segment.videoTimingInfo.transmuxedPresentationEnd:segmentEnd+segment.duration));i++);var lastSegment=playlist.segments[playlist.segments.length-1];if(lastSegment.videoTimingInfo&&lastSegment.videoTimingInfo.transmuxedPresentationEnd<time)return null;if(time>segmentEnd){if(time>segmentEnd+.25*lastSegment.duration)return null;segment=lastSegment}return{segment,estimatedStart:segment.videoTimingInfo?segment.videoTimingInfo.transmuxedPresentationStart:segmentEnd-segment.duration,type:segment.videoTimingInfo?"accurate":"estimate"}}(time,playlist);if(!matchedSegment)return callback({message:"valid programTime was not found"});if("estimate"===matchedSegment.type)return callback({message:"Accurate programTime could not be determined. Please seek to e.seekTime and try again",seekTime:matchedSegment.estimatedStart});var programTimeObject={mediaSeconds:time},programTime=function playerTimeToProgramTime(playerTime,segment){if(!segment.dateTimeObject)return null;var transmuxerPrependedSeconds=segment.videoTimingInfo.transmuxerPrependedSeconds,offsetFromSegmentStart=playerTime-(segment.videoTimingInfo.transmuxedPresentationStart+transmuxerPrependedSeconds);return new Date(segment.dateTimeObject.getTime()+1e3*offsetFromSegmentStart)}(time,matchedSegment.segment);return programTime&&(programTimeObject.programDateTime=programTime.toISOString()),callback(null,programTimeObject)},seekToProgramTime=function seekToProgramTime(_ref2){var programTime=_ref2.programTime,playlist=_ref2.playlist,_ref2$retryCount=_ref2.retryCount,retryCount=void 0===_ref2$retryCount?2:_ref2$retryCount,seekTo=_ref2.seekTo,_ref2$pauseAfterSeek=_ref2.pauseAfterSeek,pauseAfterSeek=void 0===_ref2$pauseAfterSeek||_ref2$pauseAfterSeek,tech=_ref2.tech,callback=_ref2.callback;if(!callback)throw new Error("seekToProgramTime: callback must be provided");if(void 0===programTime||!playlist||!seekTo)return callback({message:"seekToProgramTime: programTime, seekTo and playlist must be provided"});if(!playlist.endList&&!tech.hasStarted_)return callback({message:"player must be playing a live stream to start buffering"});if(!function verifyProgramDateTimeTags(playlist){if(!playlist.segments||0===playlist.segments.length)return!1;for(var i=0;i<playlist.segments.length;i++)if(!playlist.segments[i].dateTimeObject)return!1;return!0}(playlist))return callback({message:"programDateTime tags must be provided in the manifest "+playlist.resolvedUri});var matchedSegment=function findSegmentForProgramTime(programTime,playlist){var dateTimeObject=void 0;try{dateTimeObject=new Date(programTime)}catch(e){return null}if(!playlist||!playlist.segments||0===playlist.segments.length)return null;var segment=playlist.segments[0];if(dateTimeObject<segment.dateTimeObject)return null;for(var i=0;i<playlist.segments.length-1&&(segment=playlist.segments[i],!(dateTimeObject<playlist.segments[i+1].dateTimeObject));i++);var lastSegment=playlist.segments[playlist.segments.length-1],lastSegmentStart=lastSegment.dateTimeObject,lastSegmentDuration=lastSegment.videoTimingInfo?function originalSegmentVideoDuration(videoTimingInfo){return videoTimingInfo.transmuxedPresentationEnd-videoTimingInfo.transmuxedPresentationStart-videoTimingInfo.transmuxerPrependedSeconds}(lastSegment.videoTimingInfo):lastSegment.duration+.25*lastSegment.duration;return dateTimeObject>new Date(lastSegmentStart.getTime()+1e3*lastSegmentDuration)?null:(dateTimeObject>lastSegmentStart&&(segment=lastSegment),{segment,estimatedStart:segment.videoTimingInfo?segment.videoTimingInfo.transmuxedPresentationStart:Playlist.duration(playlist,playlist.mediaSequence+playlist.segments.indexOf(segment)),type:segment.videoTimingInfo?"accurate":"estimate"})}(programTime,playlist);if(!matchedSegment)return callback({message:programTime+" was not found in the stream"});var segment=matchedSegment.segment,mediaOffset=function getOffsetFromTimestamp(comparisonTimeStamp,programTime){var segmentDateTime=void 0,programDateTime=void 0;try{segmentDateTime=new Date(comparisonTimeStamp),programDateTime=new Date(programTime)}catch(e){}var segmentTimeEpoch=segmentDateTime.getTime();return(programDateTime.getTime()-segmentTimeEpoch)/1e3}(segment.dateTimeObject,programTime);if("estimate"===matchedSegment.type)return 0===retryCount?callback({message:programTime+" is not buffered yet. Try again"}):(seekTo(matchedSegment.estimatedStart+mediaOffset),void tech.one("seeked",(function(){seekToProgramTime({programTime,playlist,retryCount:retryCount-1,seekTo,pauseAfterSeek,tech,callback})})));var seekToTime=segment.start+mediaOffset;tech.one("seeked",(function seekedCallback(){return callback(null,tech.currentTime())})),pauseAfterSeek&&tech.pause(),seekTo(seekToTime)},filterRanges=function filterRanges(timeRanges,predicate){var results=[],i=void 0;if(timeRanges&&timeRanges.length)for(i=0;i<timeRanges.length;i++)predicate(timeRanges.start(i),timeRanges.end(i))&&results.push([timeRanges.start(i),timeRanges.end(i)]);return videojs$1.createTimeRanges(results)},findRange=function findRange(buffered,time){return filterRanges(buffered,(function(start,end){return start-.1<=time&&end+.1>=time}))},findNextRange=function findNextRange(timeRanges,time){return filterRanges(timeRanges,(function(start){return start-.03333333333333333>=time}))},printableRange=function printableRange(range){var strArr=[];if(!range||!range.length)return"";for(var i=0;i<range.length;i++)strArr.push(range.start(i)+" => "+range.end(i));return strArr.join(", ")},timeRangesToArray=function timeRangesToArray(timeRanges){for(var timeRangesList=[],i=0;i<timeRanges.length;i++)timeRangesList.push({start:timeRanges.start(i),end:timeRanges.end(i)});return timeRangesList},removeCuesFromTrack=function removeCuesFromTrack(start,end,track){var i=void 0,cue=void 0;if(track&&track.cues)for(i=track.cues.length;i--;)(cue=track.cues[i]).startTime<=end&&cue.endTime>=start&&track.removeCue(cue)},durationOfVideo=function durationOfVideo(duration){return isNaN(duration)||Math.abs(duration)===1/0?Number.MAX_VALUE:duration},addTextTrackData=function addTextTrackData(sourceHandler,captionArray,metadataArray){var Cue=window_default().WebKitDataCue||window_default().VTTCue;if(captionArray&&captionArray.forEach((function(caption){var track=caption.stream;this.inbandTextTracks_[track].addCue(new Cue(caption.startTime+this.timestampOffset,caption.endTime+this.timestampOffset,caption.text))}),sourceHandler),metadataArray){var videoDuration=durationOfVideo(sourceHandler.mediaSource_.duration);if(metadataArray.forEach((function(metadata){var time=metadata.cueTime+this.timestampOffset;!("number"!=typeof time||window_default().isNaN(time)||time<0)&&time<1/0&&metadata.frames.forEach((function(frame){var cue=new Cue(time,time,frame.value||frame.url||frame.data||"");cue.frame=frame,cue.value=frame,function deprecateOldCue(cue){Object.defineProperties(cue.frame,{id:{get:function get(){return videojs$1.log.warn("cue.frame.id is deprecated. Use cue.value.key instead."),cue.value.key}},value:{get:function get(){return videojs$1.log.warn("cue.frame.value is deprecated. Use cue.value.data instead."),cue.value.data}},privateData:{get:function get(){return videojs$1.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead."),cue.value.data}}})}(cue),this.metadataTrack_.addCue(cue)}),this)}),sourceHandler),sourceHandler.metadataTrack_&&sourceHandler.metadataTrack_.cues&&sourceHandler.metadataTrack_.cues.length){for(var cues=sourceHandler.metadataTrack_.cues,cuesArray=[],i=0;i<cues.length;i++)cues[i]&&cuesArray.push(cues[i]);var cuesGroupedByStartTime=cuesArray.reduce((function(obj,cue){var timeSlot=obj[cue.startTime]||[];return timeSlot.push(cue),obj[cue.startTime]=timeSlot,obj}),{}),sortedStartTimes=Object.keys(cuesGroupedByStartTime).sort((function(a,b){return Number(a)-Number(b)}));sortedStartTimes.forEach((function(startTime,idx){var cueGroup=cuesGroupedByStartTime[startTime],nextTime=Number(sortedStartTimes[idx+1])||videoDuration;cueGroup.forEach((function(cue){cue.endTime=nextTime}))}))}}},win="undefined"!=typeof window?window:{},TARGET="undefined"==typeof Symbol?"__target":Symbol(),SCRIPT_TYPE="application/javascript",BlobBuilder=win.BlobBuilder||win.WebKitBlobBuilder||win.MozBlobBuilder||win.MSBlobBuilder,URL=win.URL||win.webkitURL||URL&&URL.msURL,Worker=win.Worker;function shimWorker(filename,fn){return function ShimWorker(forceFallback){var o=this;if(!fn)return new Worker(filename);if(Worker&&!forceFallback){var objURL=createSourceObject(fn.toString().replace(/^function.+?{/,"").slice(0,-1));return this[TARGET]=new Worker(objURL),function wrapTerminate(worker,objURL){if(!worker||!objURL)return;var term=worker.terminate;worker.objURL=objURL,worker.terminate=function(){worker.objURL&&URL.revokeObjectURL(worker.objURL),term.call(worker)}}(this[TARGET],objURL),this[TARGET]}var selfShim={postMessage:function postMessage(m){o.onmessage&&setTimeout((function(){o.onmessage({data:m,target:selfShim})}))}};fn.call(selfShim),this.postMessage=function(m){setTimeout((function(){selfShim.onmessage({data:m,target:o})}))},this.isThisThread=!0}}if(Worker){var testWorker,objURL=createSourceObject("self.onmessage = function () {}"),testArray=new Uint8Array(1);try{(testWorker=new Worker(objURL)).postMessage(testArray,[testArray.buffer])}catch(e){Worker=null}finally{URL.revokeObjectURL(objURL),testWorker&&testWorker.terminate()}}function createSourceObject(str){try{return URL.createObjectURL(new Blob([str],{type:SCRIPT_TYPE}))}catch(e){var blob=new BlobBuilder;return blob.append(str),URL.createObjectURL(blob.getBlob(type))}}var TransmuxWorker=new shimWorker("./transmuxer-worker.worker.js",(function(window,document$$1){var self=this;!function(){var Stream=function Stream(){this.init=function(){var listeners={};this.on=function(type,listener){listeners[type]||(listeners[type]=[]),listeners[type]=listeners[type].concat(listener)},this.off=function(type,listener){var index;return!!listeners[type]&&(index=listeners[type].indexOf(listener),listeners[type]=listeners[type].slice(),listeners[type].splice(index,1),index>-1)},this.trigger=function(type){var callbacks,i,length,args;if(callbacks=listeners[type])if(2===arguments.length)for(length=callbacks.length,i=0;i<length;++i)callbacks[i].call(this,arguments[1]);else{for(args=[],i=arguments.length,i=1;i<arguments.length;++i)args.push(arguments[i]);for(length=callbacks.length,i=0;i<length;++i)callbacks[i].apply(this,args)}},this.dispose=function(){listeners={}}}};Stream.prototype.pipe=function(destination){return this.on("data",(function(data){destination.push(data)})),this.on("done",(function(flushSource){destination.flush(flushSource)})),this.on("partialdone",(function(flushSource){destination.partialFlush(flushSource)})),this.on("endedtimeline",(function(flushSource){destination.endTimeline(flushSource)})),this.on("reset",(function(flushSource){destination.reset(flushSource)})),destination},Stream.prototype.push=function(data){this.trigger("data",data)},Stream.prototype.flush=function(flushSource){this.trigger("done",flushSource)},Stream.prototype.partialFlush=function(flushSource){this.trigger("partialdone",flushSource)},Stream.prototype.endTimeline=function(flushSource){this.trigger("endedtimeline",flushSource)},Stream.prototype.reset=function(flushSource){this.trigger("reset",flushSource)};var box,dinf,esds,ftyp,mfhd,minf,moof,moov,mvex,mvhd,trak,tkhd,mdia,mdhd,hdlr,sdtp,stbl,stsd,traf,trex,trun,types,MAJOR_BRAND,MINOR_VERSION,AVC1_BRAND,VIDEO_HDLR,AUDIO_HDLR,HDLR_TYPES,VMHD,SMHD,DREF,STCO,STSC,STSZ,STTS,videoSample,audioSample,audioTrun,videoTrun,trunHeader,stream=Stream,UINT32_MAX=Math.pow(2,32)-1;!function(){var i;if(types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],mvex:[],mvhd:[],pasp:[],sdtp:[],smhd:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],styp:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[]},"undefined"!=typeof Uint8Array){for(i in types)types.hasOwnProperty(i)&&(types[i]=[i.charCodeAt(0),i.charCodeAt(1),i.charCodeAt(2),i.charCodeAt(3)]);MAJOR_BRAND=new Uint8Array(["i".charCodeAt(0),"s".charCodeAt(0),"o".charCodeAt(0),"m".charCodeAt(0)]),AVC1_BRAND=new Uint8Array(["a".charCodeAt(0),"v".charCodeAt(0),"c".charCodeAt(0),"1".charCodeAt(0)]),MINOR_VERSION=new Uint8Array([0,0,0,1]),VIDEO_HDLR=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),AUDIO_HDLR=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]),HDLR_TYPES={video:VIDEO_HDLR,audio:AUDIO_HDLR},DREF=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),SMHD=new Uint8Array([0,0,0,0,0,0,0,0]),STCO=new Uint8Array([0,0,0,0,0,0,0,0]),STSC=STCO,STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),STTS=STCO,VMHD=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0])}}(),box=function box(type){var i,result,payload=[],size=0;for(i=1;i<arguments.length;i++)payload.push(arguments[i]);for(i=payload.length;i--;)size+=payload[i].byteLength;for(result=new Uint8Array(size+8),new DataView(result.buffer,result.byteOffset,result.byteLength).setUint32(0,result.byteLength),result.set(type,4),i=0,size=8;i<payload.length;i++)result.set(payload[i],size),size+=payload[i].byteLength;return result},dinf=function dinf(){return box(types.dinf,box(types.dref,DREF))},esds=function esds(track){return box(types.esds,new Uint8Array([0,0,0,0,3,25,0,0,0,4,17,64,21,0,6,0,0,0,218,192,0,0,218,192,5,2,track.audioobjecttype<<3|track.samplingfrequencyindex>>>1,track.samplingfrequencyindex<<7|track.channelcount<<3,6,1,2]))},hdlr=function hdlr(type){return box(types.hdlr,HDLR_TYPES[type])},mdhd=function mdhd(track){var result=new Uint8Array([0,0,0,0,0,0,0,2,0,0,0,3,0,1,95,144,track.duration>>>24&255,track.duration>>>16&255,track.duration>>>8&255,255&track.duration,85,196,0,0]);return track.samplerate&&(result[12]=track.samplerate>>>24&255,result[13]=track.samplerate>>>16&255,result[14]=track.samplerate>>>8&255,result[15]=255&track.samplerate),box(types.mdhd,result)},mdia=function mdia(track){return box(types.mdia,mdhd(track),hdlr(track.type),minf(track))},mfhd=function mfhd(sequenceNumber){return box(types.mfhd,new Uint8Array([0,0,0,0,(4278190080&sequenceNumber)>>24,(16711680&sequenceNumber)>>16,(65280&sequenceNumber)>>8,255&sequenceNumber]))},minf=function minf(track){return box(types.minf,"video"===track.type?box(types.vmhd,VMHD):box(types.smhd,SMHD),dinf(),stbl(track))},moof=function moof(sequenceNumber,tracks){for(var trackFragments=[],i=tracks.length;i--;)trackFragments[i]=traf(tracks[i]);return box.apply(null,[types.moof,mfhd(sequenceNumber)].concat(trackFragments))},moov=function moov(tracks){for(var i=tracks.length,boxes=[];i--;)boxes[i]=trak(tracks[i]);return box.apply(null,[types.moov,mvhd(4294967295)].concat(boxes).concat(mvex(tracks)))},mvex=function mvex(tracks){for(var i=tracks.length,boxes=[];i--;)boxes[i]=trex(tracks[i]);return box.apply(null,[types.mvex].concat(boxes))},mvhd=function mvhd(duration){var bytes=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,2,0,1,95,144,(4278190080&duration)>>24,(16711680&duration)>>16,(65280&duration)>>8,255&duration,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return box(types.mvhd,bytes)},sdtp=function sdtp(track){var flags,i,samples=track.samples||[],bytes=new Uint8Array(4+samples.length);for(i=0;i<samples.length;i++)flags=samples[i].flags,bytes[i+4]=flags.dependsOn<<4|flags.isDependedOn<<2|flags.hasRedundancy;return box(types.sdtp,bytes)},stbl=function stbl(track){return box(types.stbl,stsd(track),box(types.stts,STTS),box(types.stsc,STSC),box(types.stsz,STSZ),box(types.stco,STCO))},stsd=function stsd(track){return box(types.stsd,new Uint8Array([0,0,0,0,0,0,0,1]),"video"===track.type?videoSample(track):audioSample(track))},videoSample=function videoSample(track){var i,avc1Box,sps=track.sps||[],pps=track.pps||[],sequenceParameterSets=[],pictureParameterSets=[];for(i=0;i<sps.length;i++)sequenceParameterSets.push((65280&sps[i].byteLength)>>>8),sequenceParameterSets.push(255&sps[i].byteLength),sequenceParameterSets=sequenceParameterSets.concat(Array.prototype.slice.call(sps[i]));for(i=0;i<pps.length;i++)pictureParameterSets.push((65280&pps[i].byteLength)>>>8),pictureParameterSets.push(255&pps[i].byteLength),pictureParameterSets=pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));if(avc1Box=[types.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,(65280&track.width)>>8,255&track.width,(65280&track.height)>>8,255&track.height,0,72,0,0,0,72,0,0,0,0,0,0,0,1,19,118,105,100,101,111,106,115,45,99,111,110,116,114,105,98,45,104,108,115,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),box(types.avcC,new Uint8Array([1,track.profileIdc,track.profileCompatibility,track.levelIdc,255].concat([sps.length],sequenceParameterSets,[pps.length],pictureParameterSets))),box(types.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]))],track.sarRatio){var hSpacing=track.sarRatio[0],vSpacing=track.sarRatio[1];avc1Box.push(box(types.pasp,new Uint8Array([(4278190080&hSpacing)>>24,(16711680&hSpacing)>>16,(65280&hSpacing)>>8,255&hSpacing,(4278190080&vSpacing)>>24,(16711680&vSpacing)>>16,(65280&vSpacing)>>8,255&vSpacing])))}return box.apply(null,avc1Box)},audioSample=function audioSample(track){return box(types.mp4a,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,(65280&track.channelcount)>>8,255&track.channelcount,(65280&track.samplesize)>>8,255&track.samplesize,0,0,0,0,(65280&track.samplerate)>>8,255&track.samplerate,0,0]),esds(track))},tkhd=function tkhd(track){var result=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,(4278190080&track.id)>>24,(16711680&track.id)>>16,(65280&track.id)>>8,255&track.id,0,0,0,0,(4278190080&track.duration)>>24,(16711680&track.duration)>>16,(65280&track.duration)>>8,255&track.duration,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,(65280&track.width)>>8,255&track.width,0,0,(65280&track.height)>>8,255&track.height,0,0]);return box(types.tkhd,result)},traf=function traf(track){var trackFragmentHeader,trackFragmentDecodeTime,trackFragmentRun,sampleDependencyTable,upperWordBaseMediaDecodeTime,lowerWordBaseMediaDecodeTime;return trackFragmentHeader=box(types.tfhd,new Uint8Array([0,0,0,58,(4278190080&track.id)>>24,(16711680&track.id)>>16,(65280&track.id)>>8,255&track.id,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0])),upperWordBaseMediaDecodeTime=Math.floor(track.baseMediaDecodeTime/(UINT32_MAX+1)),lowerWordBaseMediaDecodeTime=Math.floor(track.baseMediaDecodeTime%(UINT32_MAX+1)),trackFragmentDecodeTime=box(types.tfdt,new Uint8Array([1,0,0,0,upperWordBaseMediaDecodeTime>>>24&255,upperWordBaseMediaDecodeTime>>>16&255,upperWordBaseMediaDecodeTime>>>8&255,255&upperWordBaseMediaDecodeTime,lowerWordBaseMediaDecodeTime>>>24&255,lowerWordBaseMediaDecodeTime>>>16&255,lowerWordBaseMediaDecodeTime>>>8&255,255&lowerWordBaseMediaDecodeTime])),92,"audio"===track.type?(trackFragmentRun=trun(track,92),box(types.traf,trackFragmentHeader,trackFragmentDecodeTime,trackFragmentRun)):(sampleDependencyTable=sdtp(track),trackFragmentRun=trun(track,sampleDependencyTable.length+92),box(types.traf,trackFragmentHeader,trackFragmentDecodeTime,trackFragmentRun,sampleDependencyTable))},trak=function trak(track){return track.duration=track.duration||4294967295,box(types.trak,tkhd(track),mdia(track))},trex=function trex(track){var result=new Uint8Array([0,0,0,0,(4278190080&track.id)>>24,(16711680&track.id)>>16,(65280&track.id)>>8,255&track.id,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return"video"!==track.type&&(result[result.length-1]=0),box(types.trex,result)},trunHeader=function trunHeader(samples,offset){var durationPresent=0,sizePresent=0,flagsPresent=0,compositionTimeOffset=0;return samples.length&&(void 0!==samples[0].duration&&(durationPresent=1),void 0!==samples[0].size&&(sizePresent=2),void 0!==samples[0].flags&&(flagsPresent=4),void 0!==samples[0].compositionTimeOffset&&(compositionTimeOffset=8)),[0,0,durationPresent|sizePresent|flagsPresent|compositionTimeOffset,1,(4278190080&samples.length)>>>24,(16711680&samples.length)>>>16,(65280&samples.length)>>>8,255&samples.length,(4278190080&offset)>>>24,(16711680&offset)>>>16,(65280&offset)>>>8,255&offset]},videoTrun=function videoTrun(track,offset){var bytes,samples,sample,i;for(offset+=20+16*(samples=track.samples||[]).length,bytes=trunHeader(samples,offset),i=0;i<samples.length;i++)sample=samples[i],bytes=bytes.concat([(4278190080&sample.duration)>>>24,(16711680&sample.duration)>>>16,(65280&sample.duration)>>>8,255&sample.duration,(4278190080&sample.size)>>>24,(16711680&sample.size)>>>16,(65280&sample.size)>>>8,255&sample.size,sample.flags.isLeading<<2|sample.flags.dependsOn,sample.flags.isDependedOn<<6|sample.flags.hasRedundancy<<4|sample.flags.paddingValue<<1|sample.flags.isNonSyncSample,61440&sample.flags.degradationPriority,15&sample.flags.degradationPriority,(4278190080&sample.compositionTimeOffset)>>>24,(16711680&sample.compositionTimeOffset)>>>16,(65280&sample.compositionTimeOffset)>>>8,255&sample.compositionTimeOffset]);return box(types.trun,new Uint8Array(bytes))},audioTrun=function audioTrun(track,offset){var bytes,samples,sample,i;for(offset+=20+8*(samples=track.samples||[]).length,bytes=trunHeader(samples,offset),i=0;i<samples.length;i++)sample=samples[i],bytes=bytes.concat([(4278190080&sample.duration)>>>24,(16711680&sample.duration)>>>16,(65280&sample.duration)>>>8,255&sample.duration,(4278190080&sample.size)>>>24,(16711680&sample.size)>>>16,(65280&sample.size)>>>8,255&sample.size]);return box(types.trun,new Uint8Array(bytes))},trun=function trun(track,offset){return"audio"===track.type?audioTrun(track,offset):videoTrun(track,offset)};ftyp=function ftyp(){return box(types.ftyp,MAJOR_BRAND,MINOR_VERSION,MAJOR_BRAND,AVC1_BRAND)};var secondsToVideoTs,secondsToAudioTs,videoTsToSeconds,audioTsToSeconds,audioTsToVideoTs,videoTsToAudioTs,metadataTsToSeconds,mp4Generator_mdat=function mdat(data){return box(types.mdat,data)},mp4Generator_moof=moof,mp4Generator_initSegment=function initSegment(tracks){var result,fileType=ftyp(),movie=moov(tracks);return(result=new Uint8Array(fileType.byteLength+movie.byteLength)).set(fileType),result.set(movie,fileType.byteLength),result},sampleForFrame=function sampleForFrame(frame,dataOffset){var sample={size:0,flags:{isLeading:0,dependsOn:1,isDependedOn:0,hasRedundancy:0,degradationPriority:0,isNonSyncSample:1}};return sample.dataOffset=dataOffset,sample.compositionTimeOffset=frame.pts-frame.dts,sample.duration=frame.duration,sample.size=4*frame.length,sample.size+=frame.byteLength,frame.keyFrame&&(sample.flags.dependsOn=2,sample.flags.isNonSyncSample=0),sample},frameUtils_groupNalsIntoFrames=function groupNalsIntoFrames(nalUnits){var i,currentNal,currentFrame=[],frames=[];for(frames.byteLength=0,frames.nalCount=0,frames.duration=0,currentFrame.byteLength=0,i=0;i<nalUnits.length;i++)"access_unit_delimiter_rbsp"===(currentNal=nalUnits[i]).nalUnitType?(currentFrame.length&&(currentFrame.duration=currentNal.dts-currentFrame.dts,frames.byteLength+=currentFrame.byteLength,frames.nalCount+=currentFrame.length,frames.duration+=currentFrame.duration,frames.push(currentFrame)),(currentFrame=[currentNal]).byteLength=currentNal.data.byteLength,currentFrame.pts=currentNal.pts,currentFrame.dts=currentNal.dts):("slice_layer_without_partitioning_rbsp_idr"===currentNal.nalUnitType&&(currentFrame.keyFrame=!0),currentFrame.duration=currentNal.dts-currentFrame.dts,currentFrame.byteLength+=currentNal.data.byteLength,currentFrame.push(currentNal));return frames.length&&(!currentFrame.duration||currentFrame.duration<=0)&&(currentFrame.duration=frames[frames.length-1].duration),frames.byteLength+=currentFrame.byteLength,frames.nalCount+=currentFrame.length,frames.duration+=currentFrame.duration,frames.push(currentFrame),frames},frameUtils_groupFramesIntoGops=function groupFramesIntoGops(frames){var i,currentFrame,currentGop=[],gops=[];for(currentGop.byteLength=0,currentGop.nalCount=0,currentGop.duration=0,currentGop.pts=frames[0].pts,currentGop.dts=frames[0].dts,gops.byteLength=0,gops.nalCount=0,gops.duration=0,gops.pts=frames[0].pts,gops.dts=frames[0].dts,i=0;i<frames.length;i++)(currentFrame=frames[i]).keyFrame?(currentGop.length&&(gops.push(currentGop),gops.byteLength+=currentGop.byteLength,gops.nalCount+=currentGop.nalCount,gops.duration+=currentGop.duration),(currentGop=[currentFrame]).nalCount=currentFrame.length,currentGop.byteLength=currentFrame.byteLength,currentGop.pts=currentFrame.pts,currentGop.dts=currentFrame.dts,currentGop.duration=currentFrame.duration):(currentGop.duration+=currentFrame.duration,currentGop.nalCount+=currentFrame.length,currentGop.byteLength+=currentFrame.byteLength,currentGop.push(currentFrame));return gops.length&&currentGop.duration<=0&&(currentGop.duration=gops[gops.length-1].duration),gops.byteLength+=currentGop.byteLength,gops.nalCount+=currentGop.nalCount,gops.duration+=currentGop.duration,gops.push(currentGop),gops},frameUtils_extendFirstKeyFrame=function extendFirstKeyFrame(gops){var currentGop;return!gops[0][0].keyFrame&&gops.length>1&&(currentGop=gops.shift(),gops.byteLength-=currentGop.byteLength,gops.nalCount-=currentGop.nalCount,gops[0][0].dts=currentGop.dts,gops[0][0].pts=currentGop.pts,gops[0][0].duration+=currentGop.duration),gops},frameUtils_generateSampleTable=function generateSampleTable(gops,baseDataOffset){var h,i,sample,currentGop,currentFrame,dataOffset=baseDataOffset||0,samples=[];for(h=0;h<gops.length;h++)for(currentGop=gops[h],i=0;i<currentGop.length;i++)currentFrame=currentGop[i],dataOffset+=(sample=sampleForFrame(currentFrame,dataOffset)).size,samples.push(sample);return samples},frameUtils_concatenateNalData=function concatenateNalData(gops){var h,i,j,currentGop,currentFrame,currentNal,dataOffset=0,nalsByteLength=gops.byteLength,numberOfNals=gops.nalCount,data=new Uint8Array(nalsByteLength+4*numberOfNals),view=new DataView(data.buffer);for(h=0;h<gops.length;h++)for(currentGop=gops[h],i=0;i<currentGop.length;i++)for(currentFrame=currentGop[i],j=0;j<currentFrame.length;j++)currentNal=currentFrame[j],view.setUint32(dataOffset,currentNal.data.byteLength),dataOffset+=4,data.set(currentNal.data,dataOffset),dataOffset+=currentNal.data.byteLength;return data},highPrefix=[33,16,5,32,164,27],lowPrefix=[33,65,108,84,1,2,4,8,168,2,4,8,17,191,252],zeroFill=function zeroFill(count){for(var a=[];count--;)a.push(0);return a},silence=function makeTable(metaTable){return Object.keys(metaTable).reduce((function(obj,key){return obj[key]=new Uint8Array(metaTable[key].reduce((function(arr,part){return arr.concat(part)}),[])),obj}),{})}({96e3:[highPrefix,[227,64],zeroFill(154),[56]],88200:[highPrefix,[231],zeroFill(170),[56]],64e3:[highPrefix,[248,192],zeroFill(240),[56]],48e3:[highPrefix,[255,192],zeroFill(268),[55,148,128],zeroFill(54),[112]],44100:[highPrefix,[255,192],zeroFill(268),[55,163,128],zeroFill(84),[112]],32e3:[highPrefix,[255,192],zeroFill(268),[55,234],zeroFill(226),[112]],24e3:[highPrefix,[255,192],zeroFill(268),[55,255,128],zeroFill(268),[111,112],zeroFill(126),[224]],16e3:[highPrefix,[255,192],zeroFill(268),[55,255,128],zeroFill(268),[111,255],zeroFill(269),[223,108],zeroFill(195),[1,192]],12e3:[lowPrefix,zeroFill(268),[3,127,248],zeroFill(268),[6,255,240],zeroFill(268),[13,255,224],zeroFill(268),[27,253,128],zeroFill(259),[56]],11025:[lowPrefix,zeroFill(268),[3,127,248],zeroFill(268),[6,255,240],zeroFill(268),[13,255,224],zeroFill(268),[27,255,192],zeroFill(268),[55,175,128],zeroFill(108),[112]],8e3:[lowPrefix,zeroFill(268),[3,121,16],zeroFill(47),[7]]});audioTsToVideoTs=function audioTsToVideoTs(timestamp,sampleRate){return secondsToVideoTs(audioTsToSeconds(timestamp,sampleRate))},videoTsToAudioTs=function videoTsToAudioTs(timestamp,sampleRate){return secondsToAudioTs(videoTsToSeconds(timestamp),sampleRate)},metadataTsToSeconds=function metadataTsToSeconds(timestamp,timelineStartPts,keepOriginalTimestamps){return videoTsToSeconds(keepOriginalTimestamps?timestamp:timestamp-timelineStartPts)};var clock_ONE_SECOND_IN_TS=9e4,clock_audioTsToVideoTs=(secondsToVideoTs=function secondsToVideoTs(seconds){return 9e4*seconds},secondsToAudioTs=function secondsToAudioTs(seconds,sampleRate){return seconds*sampleRate},videoTsToSeconds=function videoTsToSeconds(timestamp){return timestamp/9e4},audioTsToSeconds=function audioTsToSeconds(timestamp,sampleRate){return timestamp/sampleRate},audioTsToVideoTs),clock_videoTsToAudioTs=videoTsToAudioTs,clock_metadataTsToSeconds=metadataTsToSeconds,audioFrameUtils_prefixWithSilence=function prefixWithSilence(track,frames,audioAppendStartTs,videoBaseMediaDecodeTime){var baseMediaDecodeTimeTs,frameDuration,silentFrame,i,firstFrame,audioGapDuration=0,audioFillFrameCount=0,audioFillDuration=0;if(frames.length&&(baseMediaDecodeTimeTs=clock_audioTsToVideoTs(track.baseMediaDecodeTime,track.samplerate),frameDuration=Math.ceil(clock_ONE_SECOND_IN_TS/(track.samplerate/1024)),audioAppendStartTs&&videoBaseMediaDecodeTime&&(audioGapDuration=baseMediaDecodeTimeTs-Math.max(audioAppendStartTs,videoBaseMediaDecodeTime),audioFillDuration=(audioFillFrameCount=Math.floor(audioGapDuration/frameDuration))*frameDuration),!(audioFillFrameCount<1||audioFillDuration>clock_ONE_SECOND_IN_TS/2))){for((silentFrame=silence[track.samplerate])||(silentFrame=frames[0].data),i=0;i<audioFillFrameCount;i++)firstFrame=frames[0],frames.splice(0,0,{data:silentFrame,dts:firstFrame.dts-frameDuration,pts:firstFrame.pts-frameDuration});track.baseMediaDecodeTime-=Math.floor(clock_videoTsToAudioTs(audioFillDuration,track.samplerate))}},audioFrameUtils_trimAdtsFramesByEarliestDts=function trimAdtsFramesByEarliestDts(adtsFrames,track,earliestAllowedDts){return track.minSegmentDts>=earliestAllowedDts?adtsFrames:(track.minSegmentDts=1/0,adtsFrames.filter((function(currentFrame){return currentFrame.dts>=earliestAllowedDts&&(track.minSegmentDts=Math.min(track.minSegmentDts,currentFrame.dts),track.minSegmentPts=track.minSegmentDts,!0)})))},audioFrameUtils_generateSampleTable=function generateSampleTable(frames){var i,currentFrame,samples=[];for(i=0;i<frames.length;i++)currentFrame=frames[i],samples.push({size:currentFrame.data.byteLength,duration:1024});return samples},audioFrameUtils_concatenateFrameData=function concatenateFrameData(frames){var i,currentFrame,dataOffset=0,data=new Uint8Array(function sumFrameByteLengths(array){var i,sum=0;for(i=0;i<array.length;i++)sum+=array[i].data.byteLength;return sum}(frames));for(i=0;i<frames.length;i++)currentFrame=frames[i],data.set(currentFrame.data,dataOffset),dataOffset+=currentFrame.data.byteLength;return data},ONE_SECOND_IN_TS$1=clock_ONE_SECOND_IN_TS,trackDecodeInfo_clearDtsInfo=function clearDtsInfo(track){delete track.minSegmentDts,delete track.maxSegmentDts,delete track.minSegmentPts,delete track.maxSegmentPts},trackDecodeInfo_calculateTrackBaseMediaDecodeTime=function calculateTrackBaseMediaDecodeTime(track,keepOriginalTimestamps){var baseMediaDecodeTime,minSegmentDts=track.minSegmentDts;return keepOriginalTimestamps||(minSegmentDts-=track.timelineStartInfo.dts),baseMediaDecodeTime=track.timelineStartInfo.baseMediaDecodeTime,baseMediaDecodeTime+=minSegmentDts,baseMediaDecodeTime=Math.max(0,baseMediaDecodeTime),"audio"===track.type&&(baseMediaDecodeTime*=track.samplerate/ONE_SECOND_IN_TS$1,baseMediaDecodeTime=Math.floor(baseMediaDecodeTime)),baseMediaDecodeTime},trackDecodeInfo_collectDtsInfo=function collectDtsInfo(track,data){"number"==typeof data.pts&&(void 0===track.timelineStartInfo.pts&&(track.timelineStartInfo.pts=data.pts),void 0===track.minSegmentPts?track.minSegmentPts=data.pts:track.minSegmentPts=Math.min(track.minSegmentPts,data.pts),void 0===track.maxSegmentPts?track.maxSegmentPts=data.pts:track.maxSegmentPts=Math.max(track.maxSegmentPts,data.pts)),"number"==typeof data.dts&&(void 0===track.timelineStartInfo.dts&&(track.timelineStartInfo.dts=data.dts),void 0===track.minSegmentDts?track.minSegmentDts=data.dts:track.minSegmentDts=Math.min(track.minSegmentDts,data.dts),void 0===track.maxSegmentDts?track.maxSegmentDts=data.dts:track.maxSegmentDts=Math.max(track.maxSegmentDts,data.dts))},captionPacketParser_parseSei=function parseSei(bytes){for(var i=0,result={payloadType:-1,payloadSize:0},payloadType=0,payloadSize=0;i<bytes.byteLength&&128!==bytes[i];){for(;255===bytes[i];)payloadType+=255,i++;for(payloadType+=bytes[i++];255===bytes[i];)payloadSize+=255,i++;if(payloadSize+=bytes[i++],!result.payload&&4===payloadType){result.payloadType=payloadType,result.payloadSize=payloadSize,result.payload=bytes.subarray(i,i+payloadSize);break}i+=payloadSize,payloadType=0,payloadSize=0}return result},captionPacketParser_parseUserData=function parseUserData(sei){return 181!==sei.payload[0]||49!=(sei.payload[1]<<8|sei.payload[2])||"GA94"!==String.fromCharCode(sei.payload[3],sei.payload[4],sei.payload[5],sei.payload[6])||3!==sei.payload[7]?null:sei.payload.subarray(8,sei.payload.length-1)},captionPacketParser_parseCaptionPackets=function parseCaptionPackets(pts,userData){var i,count,offset,data,results=[];if(!(64&userData[0]))return results;for(count=31&userData[0],i=0;i<count;i++)data={type:3&userData[(offset=3*i)+2],pts},4&userData[offset+2]&&(data.ccData=userData[offset+3]<<8|userData[offset+4],results.push(data));return results},captionPacketParser_USER_DATA_REGISTERED_ITU_T_T35=4,CaptionStream=function CaptionStream(){CaptionStream.prototype.init.call(this),this.captionPackets_=[],this.ccStreams_=[new Cea608Stream(0,0),new Cea608Stream(0,1),new Cea608Stream(1,0),new Cea608Stream(1,1)],this.reset(),this.ccStreams_.forEach((function(cc){cc.on("data",this.trigger.bind(this,"data")),cc.on("partialdone",this.trigger.bind(this,"partialdone")),cc.on("done",this.trigger.bind(this,"done"))}),this)};(CaptionStream.prototype=new stream).push=function(event){var sei,userData,newCaptionPackets;if("sei_rbsp"===event.nalUnitType&&(sei=captionPacketParser_parseSei(event.escapedRBSP)).payloadType===captionPacketParser_USER_DATA_REGISTERED_ITU_T_T35&&(userData=captionPacketParser_parseUserData(sei)))if(event.dts<this.latestDts_)this.ignoreNextEqualDts_=!0;else{if(event.dts===this.latestDts_&&this.ignoreNextEqualDts_)return this.numSameDts_--,void(this.numSameDts_||(this.ignoreNextEqualDts_=!1));newCaptionPackets=captionPacketParser_parseCaptionPackets(event.pts,userData),this.captionPackets_=this.captionPackets_.concat(newCaptionPackets),this.latestDts_!==event.dts&&(this.numSameDts_=0),this.numSameDts_++,this.latestDts_=event.dts}},CaptionStream.prototype.flushCCStreams=function(flushType){this.ccStreams_.forEach((function(cc){return"flush"===flushType?cc.flush():cc.partialFlush()}),this)},CaptionStream.prototype.flushStream=function(flushType){this.captionPackets_.length?(this.captionPackets_.forEach((function(elem,idx){elem.presortIndex=idx})),this.captionPackets_.sort((function(a,b){return a.pts===b.pts?a.presortIndex-b.presortIndex:a.pts-b.pts})),this.captionPackets_.forEach((function(packet){packet.type<2&&this.dispatchCea608Packet(packet)}),this),this.captionPackets_.length=0,this.flushCCStreams(flushType)):this.flushCCStreams(flushType)},CaptionStream.prototype.flush=function(){return this.flushStream("flush")},CaptionStream.prototype.partialFlush=function(){return this.flushStream("partialFlush")},CaptionStream.prototype.reset=function(){this.latestDts_=null,this.ignoreNextEqualDts_=!1,this.numSameDts_=0,this.activeCea608Channel_=[null,null],this.ccStreams_.forEach((function(ccStream){ccStream.reset()}))},CaptionStream.prototype.dispatchCea608Packet=function(packet){this.setsTextOrXDSActive(packet)?this.activeCea608Channel_[packet.type]=null:this.setsChannel1Active(packet)?this.activeCea608Channel_[packet.type]=0:this.setsChannel2Active(packet)&&(this.activeCea608Channel_[packet.type]=1),null!==this.activeCea608Channel_[packet.type]&&this.ccStreams_[(packet.type<<1)+this.activeCea608Channel_[packet.type]].push(packet)},CaptionStream.prototype.setsChannel1Active=function(packet){return 4096==(30720&packet.ccData)},CaptionStream.prototype.setsChannel2Active=function(packet){return 6144==(30720&packet.ccData)},CaptionStream.prototype.setsTextOrXDSActive=function(packet){return 256==(28928&packet.ccData)||4138==(30974&packet.ccData)||6186==(30974&packet.ccData)};var CHARACTER_TRANSLATION={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,304:174,305:176,306:189,307:191,308:8482,309:162,310:163,311:9834,312:224,313:160,314:232,315:226,316:234,317:238,318:244,319:251,544:193,545:201,546:211,547:218,548:220,549:252,550:8216,551:161,552:42,553:39,554:8212,555:169,556:8480,557:8226,558:8220,559:8221,560:192,561:194,562:199,563:200,564:202,565:203,566:235,567:206,568:207,569:239,570:212,571:217,572:249,573:219,574:171,575:187,800:195,801:227,802:205,803:204,804:236,805:210,806:242,807:213,808:245,809:123,810:125,811:92,812:94,813:95,814:124,815:126,816:196,817:228,818:214,819:246,820:223,821:165,822:164,823:9474,824:197,825:229,826:216,827:248,828:9484,829:9488,830:9492,831:9496},getCharFromCode=function getCharFromCode(code){return null===code?"":(code=CHARACTER_TRANSLATION[code]||code,String.fromCharCode(code))},ROWS=[4352,4384,4608,4640,5376,5408,5632,5664,5888,5920,4096,4864,4896,5120,5152],createDisplayBuffer=function createDisplayBuffer(){for(var result=[],i=15;i--;)result.push("");return result},Cea608Stream=function Cea608Stream(field,dataChannel){Cea608Stream.prototype.init.call(this),this.field_=field||0,this.dataChannel_=dataChannel||0,this.name_="CC"+(1+(this.field_<<1|this.dataChannel_)),this.setConstants(),this.reset(),this.push=function(packet){var data,swap,char0,char1,text;if((data=32639&packet.ccData)!==this.lastControlCode_){if(4096==(61440&data)?this.lastControlCode_=data:data!==this.PADDING_&&(this.lastControlCode_=null),char0=data>>>8,char1=255&data,data!==this.PADDING_)if(data===this.RESUME_CAPTION_LOADING_)this.mode_="popOn";else if(data===this.END_OF_CAPTION_)this.mode_="popOn",this.clearFormatting(packet.pts),this.flushDisplayed(packet.pts),swap=this.displayed_,this.displayed_=this.nonDisplayed_,this.nonDisplayed_=swap,this.startPts_=packet.pts;else if(data===this.ROLL_UP_2_ROWS_)this.rollUpRows_=2,this.setRollUp(packet.pts);else if(data===this.ROLL_UP_3_ROWS_)this.rollUpRows_=3,this.setRollUp(packet.pts);else if(data===this.ROLL_UP_4_ROWS_)this.rollUpRows_=4,this.setRollUp(packet.pts);else if(data===this.CARRIAGE_RETURN_)this.clearFormatting(packet.pts),this.flushDisplayed(packet.pts),this.shiftRowsUp_(),this.startPts_=packet.pts;else if(data===this.BACKSPACE_)"popOn"===this.mode_?this.nonDisplayed_[this.row_]=this.nonDisplayed_[this.row_].slice(0,-1):this.displayed_[this.row_]=this.displayed_[this.row_].slice(0,-1);else if(data===this.ERASE_DISPLAYED_MEMORY_)this.flushDisplayed(packet.pts),this.displayed_=createDisplayBuffer();else if(data===this.ERASE_NON_DISPLAYED_MEMORY_)this.nonDisplayed_=createDisplayBuffer();else if(data===this.RESUME_DIRECT_CAPTIONING_)"paintOn"!==this.mode_&&(this.flushDisplayed(packet.pts),this.displayed_=createDisplayBuffer()),this.mode_="paintOn",this.startPts_=packet.pts;else if(this.isSpecialCharacter(char0,char1))text=getCharFromCode((char0=(3&char0)<<8)|char1),this[this.mode_](packet.pts,text),this.column_++;else if(this.isExtCharacter(char0,char1))"popOn"===this.mode_?this.nonDisplayed_[this.row_]=this.nonDisplayed_[this.row_].slice(0,-1):this.displayed_[this.row_]=this.displayed_[this.row_].slice(0,-1),text=getCharFromCode((char0=(3&char0)<<8)|char1),this[this.mode_](packet.pts,text),this.column_++;else if(this.isMidRowCode(char0,char1))this.clearFormatting(packet.pts),this[this.mode_](packet.pts," "),this.column_++,14&~char1||this.addFormatting(packet.pts,["i"]),1&~char1||this.addFormatting(packet.pts,["u"]);else if(this.isOffsetControlCode(char0,char1))this.column_+=3&char1;else if(this.isPAC(char0,char1)){var row=ROWS.indexOf(7968&data);"rollUp"===this.mode_&&(row-this.rollUpRows_+1<0&&(row=this.rollUpRows_-1),this.setRollUp(packet.pts,row)),row!==this.row_&&(this.clearFormatting(packet.pts),this.row_=row),1&char1&&-1===this.formatting_.indexOf("u")&&this.addFormatting(packet.pts,["u"]),16&~data||(this.column_=4*((14&data)>>1)),this.isColorPAC(char1)&&(14&~char1||this.addFormatting(packet.pts,["i"]))}else this.isNormalChar(char0)&&(0===char1&&(char1=null),text=getCharFromCode(char0),text+=getCharFromCode(char1),this[this.mode_](packet.pts,text),this.column_+=text.length)}else this.lastControlCode_=null}};Cea608Stream.prototype=new stream,Cea608Stream.prototype.flushDisplayed=function(pts){var content=this.displayed_.map((function(row){try{return row.trim()}catch(e){return console.error("Skipping malformed caption."),""}})).join("\n").replace(/^\n+|\n+$/g,"");content.length&&this.trigger("data",{startPts:this.startPts_,endPts:pts,text:content,stream:this.name_})},Cea608Stream.prototype.reset=function(){this.mode_="popOn",this.topRow_=0,this.startPts_=0,this.displayed_=createDisplayBuffer(),this.nonDisplayed_=createDisplayBuffer(),this.lastControlCode_=null,this.column_=0,this.row_=14,this.rollUpRows_=2,this.formatting_=[]},Cea608Stream.prototype.setConstants=function(){0===this.dataChannel_?(this.BASE_=16,this.EXT_=17,this.CONTROL_=(20|this.field_)<<8,this.OFFSET_=23):1===this.dataChannel_&&(this.BASE_=24,this.EXT_=25,this.CONTROL_=(28|this.field_)<<8,this.OFFSET_=31),this.PADDING_=0,this.RESUME_CAPTION_LOADING_=32|this.CONTROL_,this.END_OF_CAPTION_=47|this.CONTROL_,this.ROLL_UP_2_ROWS_=37|this.CONTROL_,this.ROLL_UP_3_ROWS_=38|this.CONTROL_,this.ROLL_UP_4_ROWS_=39|this.CONTROL_,this.CARRIAGE_RETURN_=45|this.CONTROL_,this.RESUME_DIRECT_CAPTIONING_=41|this.CONTROL_,this.BACKSPACE_=33|this.CONTROL_,this.ERASE_DISPLAYED_MEMORY_=44|this.CONTROL_,this.ERASE_NON_DISPLAYED_MEMORY_=46|this.CONTROL_},Cea608Stream.prototype.isSpecialCharacter=function(char0,char1){return char0===this.EXT_&&char1>=48&&char1<=63},Cea608Stream.prototype.isExtCharacter=function(char0,char1){return(char0===this.EXT_+1||char0===this.EXT_+2)&&char1>=32&&char1<=63},Cea608Stream.prototype.isMidRowCode=function(char0,char1){return char0===this.EXT_&&char1>=32&&char1<=47},Cea608Stream.prototype.isOffsetControlCode=function(char0,char1){return char0===this.OFFSET_&&char1>=33&&char1<=35},Cea608Stream.prototype.isPAC=function(char0,char1){return char0>=this.BASE_&&char0<this.BASE_+8&&char1>=64&&char1<=127},Cea608Stream.prototype.isColorPAC=function(char1){return char1>=64&&char1<=79||char1>=96&&char1<=127},Cea608Stream.prototype.isNormalChar=function(_char){return _char>=32&&_char<=127},Cea608Stream.prototype.setRollUp=function(pts,newBaseRow){if("rollUp"!==this.mode_&&(this.row_=14,this.mode_="rollUp",this.flushDisplayed(pts),this.nonDisplayed_=createDisplayBuffer(),this.displayed_=createDisplayBuffer()),void 0!==newBaseRow&&newBaseRow!==this.row_)for(var i=0;i<this.rollUpRows_;i++)this.displayed_[newBaseRow-i]=this.displayed_[this.row_-i],this.displayed_[this.row_-i]="";void 0===newBaseRow&&(newBaseRow=this.row_),this.topRow_=newBaseRow-this.rollUpRows_+1},Cea608Stream.prototype.addFormatting=function(pts,format){this.formatting_=this.formatting_.concat(format);var text=format.reduce((function(text,format){return text+"<"+format+">"}),"");this[this.mode_](pts,text)},Cea608Stream.prototype.clearFormatting=function(pts){if(this.formatting_.length){var text=this.formatting_.reverse().reduce((function(text,format){return text+"</"+format+">"}),"");this.formatting_=[],this[this.mode_](pts,text)}},Cea608Stream.prototype.popOn=function(pts,text){var baseRow=this.nonDisplayed_[this.row_];baseRow+=text,this.nonDisplayed_[this.row_]=baseRow},Cea608Stream.prototype.rollUp=function(pts,text){var baseRow=this.displayed_[this.row_];baseRow+=text,this.displayed_[this.row_]=baseRow},Cea608Stream.prototype.shiftRowsUp_=function(){var i;for(i=0;i<this.topRow_;i++)this.displayed_[i]="";for(i=this.row_+1;i<15;i++)this.displayed_[i]="";for(i=this.topRow_;i<this.row_;i++)this.displayed_[i]=this.displayed_[i+1];this.displayed_[this.row_]=""},Cea608Stream.prototype.paintOn=function(pts,text){var baseRow=this.displayed_[this.row_];baseRow+=text,this.displayed_[this.row_]=baseRow};var captionStream={CaptionStream,Cea608Stream},streamTypes={H264_STREAM_TYPE:27,ADTS_STREAM_TYPE:15,METADATA_STREAM_TYPE:21},handleRollover=function handleRollover(value,reference){var direction=1;for(value>reference&&(direction=-1);Math.abs(reference-value)>4294967296;)value+=8589934592*direction;return value},TimestampRolloverStream=function TimestampRolloverStream(type){var lastDTS,referenceDTS;TimestampRolloverStream.prototype.init.call(this),this.type_=type||"shared",this.push=function(data){"shared"!==this.type_&&data.type!==this.type_||(void 0===referenceDTS&&(referenceDTS=data.dts),data.dts=handleRollover(data.dts,referenceDTS),data.pts=handleRollover(data.pts,referenceDTS),lastDTS=data.dts,this.trigger("data",data))},this.flush=function(){referenceDTS=lastDTS,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.discontinuity=function(){referenceDTS=void 0,lastDTS=void 0},this.reset=function(){this.discontinuity(),this.trigger("reset")}};TimestampRolloverStream.prototype=new stream;var _MetadataStream,timestampRolloverStream_TimestampRolloverStream=TimestampRolloverStream,percentEncode=function percentEncode(bytes,start,end){var i,result="";for(i=start;i<end;i++)result+="%"+("00"+bytes[i].toString(16)).slice(-2);return result},parseUtf8=function parseUtf8(bytes,start,end){return decodeURIComponent(percentEncode(bytes,start,end))},parseIso88591=function parseIso88591(bytes,start,end){return unescape(percentEncode(bytes,start,end))},parseSyncSafeInteger=function parseSyncSafeInteger(data){return data[0]<<21|data[1]<<14|data[2]<<7|data[3]},tagParsers={TXXX:function TXXX(tag){var i;if(3===tag.data[0]){for(i=1;i<tag.data.length;i++)if(0===tag.data[i]){tag.description=parseUtf8(tag.data,1,i),tag.value=parseUtf8(tag.data,i+1,tag.data.length).replace(/\0*$/,"");break}tag.data=tag.value}},WXXX:function WXXX(tag){var i;if(3===tag.data[0])for(i=1;i<tag.data.length;i++)if(0===tag.data[i]){tag.description=parseUtf8(tag.data,1,i),tag.url=parseUtf8(tag.data,i+1,tag.data.length);break}},PRIV:function PRIV(tag){var i;for(i=0;i<tag.data.length;i++)if(0===tag.data[i]){tag.owner=parseIso88591(tag.data,0,i);break}tag.privateData=tag.data.subarray(i+1),tag.data=tag.privateData}};_MetadataStream=function MetadataStream(options){var i,settings={debug:!(!options||!options.debug),descriptor:options&&options.descriptor},tagSize=0,buffer=[],bufferSize=0;if(_MetadataStream.prototype.init.call(this),this.dispatchType=streamTypes.METADATA_STREAM_TYPE.toString(16),settings.descriptor)for(i=0;i<settings.descriptor.length;i++)this.dispatchType+=("00"+settings.descriptor[i].toString(16)).slice(-2);this.push=function(chunk){var tag,frameStart,frameSize,frame,i;if("timed-metadata"===chunk.type)if(chunk.dataAlignmentIndicator&&(bufferSize=0,buffer.length=0),0===buffer.length&&(chunk.data.length<10||chunk.data[0]!=="I".charCodeAt(0)||chunk.data[1]!=="D".charCodeAt(0)||chunk.data[2]!=="3".charCodeAt(0)))settings.debug&&console.log("Skipping unrecognized metadata packet");else if(buffer.push(chunk),bufferSize+=chunk.data.byteLength,1===buffer.length&&(tagSize=parseSyncSafeInteger(chunk.data.subarray(6,10)),tagSize+=10),!(bufferSize<tagSize)){for(tag={data:new Uint8Array(tagSize),frames:[],pts:buffer[0].pts,dts:buffer[0].dts},i=0;i<tagSize;)tag.data.set(buffer[0].data.subarray(0,tagSize-i),i),i+=buffer[0].data.byteLength,bufferSize-=buffer[0].data.byteLength,buffer.shift();frameStart=10,64&tag.data[5]&&(frameStart+=4,frameStart+=parseSyncSafeInteger(tag.data.subarray(10,14)),tagSize-=parseSyncSafeInteger(tag.data.subarray(16,20)));do{if((frameSize=parseSyncSafeInteger(tag.data.subarray(frameStart+4,frameStart+8)))<1)return console.log("Malformed ID3 frame encountered. Skipping metadata parsing.");if((frame={id:String.fromCharCode(tag.data[frameStart],tag.data[frameStart+1],tag.data[frameStart+2],tag.data[frameStart+3]),data:tag.data.subarray(frameStart+10,frameStart+frameSize+10)}).key=frame.id,tagParsers[frame.id]&&(tagParsers[frame.id](frame),"com.apple.streaming.transportStreamTimestamp"===frame.owner)){var d=frame.data,size=(1&d[3])<<30|d[4]<<22|d[5]<<14|d[6]<<6|d[7]>>>2;size*=4,size+=3&d[7],frame.timeStamp=size,void 0===tag.pts&&void 0===tag.dts&&(tag.pts=frame.timeStamp,tag.dts=frame.timeStamp),this.trigger("timestamp",frame)}tag.frames.push(frame),frameStart+=10,frameStart+=frameSize}while(frameStart<tagSize);this.trigger("data",tag)}}},_MetadataStream.prototype=new stream;var _TransportPacketStream,_TransportParseStream,_ElementaryStream,metadataStream=_MetadataStream,TimestampRolloverStream$1=timestampRolloverStream_TimestampRolloverStream;(_TransportPacketStream=function TransportPacketStream(){var buffer=new Uint8Array(188),bytesInBuffer=0;_TransportPacketStream.prototype.init.call(this),this.push=function(bytes){var everything,startIndex=0,endIndex=188;for(bytesInBuffer?((everything=new Uint8Array(bytes.byteLength+bytesInBuffer)).set(buffer.subarray(0,bytesInBuffer)),everything.set(bytes,bytesInBuffer),bytesInBuffer=0):everything=bytes;endIndex<everything.byteLength;)71!==everything[startIndex]||71!==everything[endIndex]?(startIndex++,endIndex++):(this.trigger("data",everything.subarray(startIndex,endIndex)),startIndex+=188,endIndex+=188);startIndex<everything.byteLength&&(buffer.set(everything.subarray(startIndex),0),bytesInBuffer=everything.byteLength-startIndex)},this.flush=function(){188===bytesInBuffer&&71===buffer[0]&&(this.trigger("data",buffer),bytesInBuffer=0),this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.reset=function(){bytesInBuffer=0,this.trigger("reset")}}).prototype=new stream,_TransportParseStream=function TransportParseStream(){var parsePsi,parsePat,parsePmt,self;_TransportParseStream.prototype.init.call(this),self=this,this.packetsWaitingForPmt=[],this.programMapTable=void 0,parsePsi=function parsePsi(payload,psi){var offset=0;psi.payloadUnitStartIndicator&&(offset+=payload[offset]+1),"pat"===psi.type?parsePat(payload.subarray(offset),psi):parsePmt(payload.subarray(offset),psi)},parsePat=function parsePat(payload,pat){pat.section_number=payload[7],pat.last_section_number=payload[8],self.pmtPid=(31&payload[10])<<8|payload[11],pat.pmtPid=self.pmtPid},parsePmt=function parsePmt(payload,pmt){var tableEnd,offset;if(1&payload[5]){for(self.programMapTable={video:null,audio:null,"timed-metadata":{}},tableEnd=3+((15&payload[1])<<8|payload[2])-4,offset=12+((15&payload[10])<<8|payload[11]);offset<tableEnd;){var streamType=payload[offset],pid=(31&payload[offset+1])<<8|payload[offset+2];streamType===streamTypes.H264_STREAM_TYPE&&null===self.programMapTable.video?self.programMapTable.video=pid:streamType===streamTypes.ADTS_STREAM_TYPE&&null===self.programMapTable.audio?self.programMapTable.audio=pid:streamType===streamTypes.METADATA_STREAM_TYPE&&(self.programMapTable["timed-metadata"][pid]=streamType),offset+=5+((15&payload[offset+3])<<8|payload[offset+4])}pmt.programMapTable=self.programMapTable}},this.push=function(packet){var result={},offset=4;if(result.payloadUnitStartIndicator=!!(64&packet[1]),result.pid=31&packet[1],result.pid<<=8,result.pid|=packet[2],(48&packet[3])>>>4>1&&(offset+=packet[offset]+1),0===result.pid)result.type="pat",parsePsi(packet.subarray(offset),result),this.trigger("data",result);else if(result.pid===this.pmtPid)for(result.type="pmt",parsePsi(packet.subarray(offset),result),this.trigger("data",result);this.packetsWaitingForPmt.length;)this.processPes_.apply(this,this.packetsWaitingForPmt.shift());else void 0===this.programMapTable?this.packetsWaitingForPmt.push([packet,offset,result]):this.processPes_(packet,offset,result)},this.processPes_=function(packet,offset,result){result.pid===this.programMapTable.video?result.streamType=streamTypes.H264_STREAM_TYPE:result.pid===this.programMapTable.audio?result.streamType=streamTypes.ADTS_STREAM_TYPE:result.streamType=this.programMapTable["timed-metadata"][result.pid],result.type="pes",result.data=packet.subarray(offset),this.trigger("data",result)}},_TransportParseStream.prototype=new stream,_TransportParseStream.STREAM_TYPES={h264:27,adts:15},_ElementaryStream=function ElementaryStream(){var programMapTable,self=this,video={data:[],size:0},audio={data:[],size:0},timedMetadata={data:[],size:0},flushStream=function flushStream(stream$$1,type,forceFlush){var packetFlushable,fragment,packetData=new Uint8Array(stream$$1.size),event={type},i=0,offset=0;if(stream$$1.data.length&&!(stream$$1.size<9)){for(event.trackId=stream$$1.data[0].pid,i=0;i<stream$$1.data.length;i++)fragment=stream$$1.data[i],packetData.set(fragment.data,offset),offset+=fragment.data.byteLength;!function parsePes(payload,pes){var ptsDtsFlags;pes.packetLength=6+(payload[4]<<8|payload[5]),pes.dataAlignmentIndicator=!!(4&payload[6]),192&(ptsDtsFlags=payload[7])&&(pes.pts=(14&payload[9])<<27|(255&payload[10])<<20|(254&payload[11])<<12|(255&payload[12])<<5|(254&payload[13])>>>3,pes.pts*=4,pes.pts+=(6&payload[13])>>>1,pes.dts=pes.pts,64&ptsDtsFlags&&(pes.dts=(14&payload[14])<<27|(255&payload[15])<<20|(254&payload[16])<<12|(255&payload[17])<<5|(254&payload[18])>>>3,pes.dts*=4,pes.dts+=(6&payload[18])>>>1)),pes.data=payload.subarray(9+payload[8])}(packetData,event),packetFlushable="video"===type||event.packetLength<=stream$$1.size,(forceFlush||packetFlushable)&&(stream$$1.size=0,stream$$1.data.length=0),packetFlushable&&self.trigger("data",event)}};_ElementaryStream.prototype.init.call(this),this.push=function(data){({pat:function pat(){},pes:function pes(){var stream$$1,streamType;switch(data.streamType){case streamTypes.H264_STREAM_TYPE:case streamTypes.H264_STREAM_TYPE:stream$$1=video,streamType="video";break;case streamTypes.ADTS_STREAM_TYPE:stream$$1=audio,streamType="audio";break;case streamTypes.METADATA_STREAM_TYPE:stream$$1=timedMetadata,streamType="timed-metadata";break;default:return}data.payloadUnitStartIndicator&&flushStream(stream$$1,streamType,!0),stream$$1.data.push(data),stream$$1.size+=data.data.byteLength},pmt:function pmt(){var event={type:"metadata",tracks:[]};null!==(programMapTable=data.programMapTable).video&&event.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+programMapTable.video,codec:"avc",type:"video"}),null!==programMapTable.audio&&event.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+programMapTable.audio,codec:"adts",type:"audio"}),self.trigger("data",event)}})[data.type]()},this.reset=function(){video.size=0,video.data.length=0,audio.size=0,audio.data.length=0,this.trigger("reset")},this.flushStreams_=function(){flushStream(video,"video"),flushStream(audio,"audio"),flushStream(timedMetadata,"timed-metadata")},this.flush=function(){this.flushStreams_(),this.trigger("done")}},_ElementaryStream.prototype=new stream;var m2ts={PAT_PID:0,MP2T_PACKET_LENGTH:188,TransportPacketStream:_TransportPacketStream,TransportParseStream:_TransportParseStream,ElementaryStream:_ElementaryStream,TimestampRolloverStream:TimestampRolloverStream$1,CaptionStream:captionStream.CaptionStream,Cea608Stream:captionStream.Cea608Stream,MetadataStream:metadataStream};for(var type in streamTypes)streamTypes.hasOwnProperty(type)&&(m2ts[type]=streamTypes[type]);var _AdtsStream,m2ts_1=m2ts,ONE_SECOND_IN_TS$2=clock_ONE_SECOND_IN_TS,ADTS_SAMPLING_FREQUENCIES=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];_AdtsStream=function AdtsStream(handlePartialSegments){var buffer,frameNum=0;_AdtsStream.prototype.init.call(this),this.push=function(packet){var frameLength,protectionSkipBytes,frameEnd,oldBuffer,sampleCount,adtsFrameDuration,i=0;if(handlePartialSegments||(frameNum=0),"audio"===packet.type)for(buffer?(oldBuffer=buffer,(buffer=new Uint8Array(oldBuffer.byteLength+packet.data.byteLength)).set(oldBuffer),buffer.set(packet.data,oldBuffer.byteLength)):buffer=packet.data;i+5<buffer.length;)if(255===buffer[i]&&240==(246&buffer[i+1])){if(protectionSkipBytes=2*(1&~buffer[i+1]),frameLength=(3&buffer[i+3])<<11|buffer[i+4]<<3|(224&buffer[i+5])>>5,adtsFrameDuration=(sampleCount=1024*(1+(3&buffer[i+6])))*ONE_SECOND_IN_TS$2/ADTS_SAMPLING_FREQUENCIES[(60&buffer[i+2])>>>2],frameEnd=i+frameLength,buffer.byteLength<frameEnd)return;if(this.trigger("data",{pts:packet.pts+frameNum*adtsFrameDuration,dts:packet.dts+frameNum*adtsFrameDuration,sampleCount,audioobjecttype:1+(buffer[i+2]>>>6&3),channelcount:(1&buffer[i+2])<<2|(192&buffer[i+3])>>>6,samplerate:ADTS_SAMPLING_FREQUENCIES[(60&buffer[i+2])>>>2],samplingfrequencyindex:(60&buffer[i+2])>>>2,samplesize:16,data:buffer.subarray(i+7+protectionSkipBytes,frameEnd)}),frameNum++,buffer.byteLength===frameEnd)return void(buffer=void 0);buffer=buffer.subarray(frameEnd)}else i++},this.flush=function(){frameNum=0,this.trigger("done")},this.reset=function(){buffer=void 0,this.trigger("reset")},this.endTimeline=function(){buffer=void 0,this.trigger("endedtimeline")}},_AdtsStream.prototype=new stream;var _H264Stream,_NalByteStream,PROFILES_WITH_OPTIONAL_SPS_DATA,adts=_AdtsStream,expGolomb=function ExpGolomb(workingData){var workingBytesAvailable=workingData.byteLength,workingWord=0,workingBitsAvailable=0;this.length=function(){return 8*workingBytesAvailable},this.bitsAvailable=function(){return 8*workingBytesAvailable+workingBitsAvailable},this.loadWord=function(){var position=workingData.byteLength-workingBytesAvailable,workingBytes=new Uint8Array(4),availableBytes=Math.min(4,workingBytesAvailable);if(0===availableBytes)throw new Error("no bytes available");workingBytes.set(workingData.subarray(position,position+availableBytes)),workingWord=new DataView(workingBytes.buffer).getUint32(0),workingBitsAvailable=8*availableBytes,workingBytesAvailable-=availableBytes},this.skipBits=function(count){var skipBytes;workingBitsAvailable>count?(workingWord<<=count,workingBitsAvailable-=count):(count-=workingBitsAvailable,count-=8*(skipBytes=Math.floor(count/8)),workingBytesAvailable-=skipBytes,this.loadWord(),workingWord<<=count,workingBitsAvailable-=count)},this.readBits=function(size){var bits=Math.min(workingBitsAvailable,size),valu=workingWord>>>32-bits;return(workingBitsAvailable-=bits)>0?workingWord<<=bits:workingBytesAvailable>0&&this.loadWord(),(bits=size-bits)>0?valu<<bits|this.readBits(bits):valu},this.skipLeadingZeros=function(){var leadingZeroCount;for(leadingZeroCount=0;leadingZeroCount<workingBitsAvailable;++leadingZeroCount)if(workingWord&2147483648>>>leadingZeroCount)return workingWord<<=leadingZeroCount,workingBitsAvailable-=leadingZeroCount,leadingZeroCount;return this.loadWord(),leadingZeroCount+this.skipLeadingZeros()},this.skipUnsignedExpGolomb=function(){this.skipBits(1+this.skipLeadingZeros())},this.skipExpGolomb=function(){this.skipBits(1+this.skipLeadingZeros())},this.readUnsignedExpGolomb=function(){var clz=this.skipLeadingZeros();return this.readBits(clz+1)-1},this.readExpGolomb=function(){var valu=this.readUnsignedExpGolomb();return 1&valu?1+valu>>>1:-1*(valu>>>1)},this.readBoolean=function(){return 1===this.readBits(1)},this.readUnsignedByte=function(){return this.readBits(8)},this.loadWord()};_NalByteStream=function NalByteStream(){var i,buffer,syncPoint=0;_NalByteStream.prototype.init.call(this),this.push=function(data){var swapBuffer;buffer?((swapBuffer=new Uint8Array(buffer.byteLength+data.data.byteLength)).set(buffer),swapBuffer.set(data.data,buffer.byteLength),buffer=swapBuffer):buffer=data.data;for(var len=buffer.byteLength;syncPoint<len-3;syncPoint++)if(1===buffer[syncPoint+2]){i=syncPoint+5;break}for(;i<len;)switch(buffer[i]){case 0:if(0!==buffer[i-1]){i+=2;break}if(0!==buffer[i-2]){i++;break}syncPoint+3!==i-2&&this.trigger("data",buffer.subarray(syncPoint+3,i-2));do{i++}while(1!==buffer[i]&&i<len);syncPoint=i-2,i+=3;break;case 1:if(0!==buffer[i-1]||0!==buffer[i-2]){i+=3;break}this.trigger("data",buffer.subarray(syncPoint+3,i-2)),syncPoint=i-2,i+=3;break;default:i+=3}buffer=buffer.subarray(syncPoint),i-=syncPoint,syncPoint=0},this.reset=function(){buffer=null,syncPoint=0,this.trigger("reset")},this.flush=function(){buffer&&buffer.byteLength>3&&this.trigger("data",buffer.subarray(syncPoint+3)),buffer=null,syncPoint=0,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")}},_NalByteStream.prototype=new stream,PROFILES_WITH_OPTIONAL_SPS_DATA={100:!0,110:!0,122:!0,244:!0,44:!0,83:!0,86:!0,118:!0,128:!0,138:!0,139:!0,134:!0},_H264Stream=function H264Stream(){var self,trackId,currentPts,currentDts,discardEmulationPreventionBytes,readSequenceParameterSet,skipScalingList,nalByteStream=new _NalByteStream;_H264Stream.prototype.init.call(this),self=this,this.push=function(packet){"video"===packet.type&&(trackId=packet.trackId,currentPts=packet.pts,currentDts=packet.dts,nalByteStream.push(packet))},nalByteStream.on("data",(function(data){var event={trackId,pts:currentPts,dts:currentDts,data};switch(31&data[0]){case 5:event.nalUnitType="slice_layer_without_partitioning_rbsp_idr";break;case 6:event.nalUnitType="sei_rbsp",event.escapedRBSP=discardEmulationPreventionBytes(data.subarray(1));break;case 7:event.nalUnitType="seq_parameter_set_rbsp",event.escapedRBSP=discardEmulationPreventionBytes(data.subarray(1)),event.config=readSequenceParameterSet(event.escapedRBSP);break;case 8:event.nalUnitType="pic_parameter_set_rbsp";break;case 9:event.nalUnitType="access_unit_delimiter_rbsp"}self.trigger("data",event)})),nalByteStream.on("done",(function(){self.trigger("done")})),nalByteStream.on("partialdone",(function(){self.trigger("partialdone")})),nalByteStream.on("reset",(function(){self.trigger("reset")})),nalByteStream.on("endedtimeline",(function(){self.trigger("endedtimeline")})),this.flush=function(){nalByteStream.flush()},this.partialFlush=function(){nalByteStream.partialFlush()},this.reset=function(){nalByteStream.reset()},this.endTimeline=function(){nalByteStream.endTimeline()},skipScalingList=function skipScalingList(count,expGolombDecoder){var j,lastScale=8,nextScale=8;for(j=0;j<count;j++)0!==nextScale&&(nextScale=(lastScale+expGolombDecoder.readExpGolomb()+256)%256),lastScale=0===nextScale?lastScale:nextScale},discardEmulationPreventionBytes=function discardEmulationPreventionBytes(data){for(var newLength,newData,length=data.byteLength,emulationPreventionBytesPositions=[],i=1;i<length-2;)0===data[i]&&0===data[i+1]&&3===data[i+2]?(emulationPreventionBytesPositions.push(i+2),i+=2):i++;if(0===emulationPreventionBytesPositions.length)return data;newLength=length-emulationPreventionBytesPositions.length,newData=new Uint8Array(newLength);var sourceIndex=0;for(i=0;i<newLength;sourceIndex++,i++)sourceIndex===emulationPreventionBytesPositions[0]&&(sourceIndex++,emulationPreventionBytesPositions.shift()),newData[i]=data[sourceIndex];return newData},readSequenceParameterSet=function readSequenceParameterSet(data){var expGolombDecoder,profileIdc,levelIdc,profileCompatibility,chromaFormatIdc,picOrderCntType,numRefFramesInPicOrderCntCycle,picWidthInMbsMinus1,picHeightInMapUnitsMinus1,frameMbsOnlyFlag,scalingListCount,sarRatio,i,frameCropLeftOffset=0,frameCropRightOffset=0,frameCropTopOffset=0,frameCropBottomOffset=0,sarScale=1;if(profileIdc=(expGolombDecoder=new expGolomb(data)).readUnsignedByte(),profileCompatibility=expGolombDecoder.readUnsignedByte(),levelIdc=expGolombDecoder.readUnsignedByte(),expGolombDecoder.skipUnsignedExpGolomb(),PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]&&(3===(chromaFormatIdc=expGolombDecoder.readUnsignedExpGolomb())&&expGolombDecoder.skipBits(1),expGolombDecoder.skipUnsignedExpGolomb(),expGolombDecoder.skipUnsignedExpGolomb(),expGolombDecoder.skipBits(1),expGolombDecoder.readBoolean()))for(scalingListCount=3!==chromaFormatIdc?8:12,i=0;i<scalingListCount;i++)expGolombDecoder.readBoolean()&&skipScalingList(i<6?16:64,expGolombDecoder);if(expGolombDecoder.skipUnsignedExpGolomb(),0===(picOrderCntType=expGolombDecoder.readUnsignedExpGolomb()))expGolombDecoder.readUnsignedExpGolomb();else if(1===picOrderCntType)for(expGolombDecoder.skipBits(1),expGolombDecoder.skipExpGolomb(),expGolombDecoder.skipExpGolomb(),numRefFramesInPicOrderCntCycle=expGolombDecoder.readUnsignedExpGolomb(),i=0;i<numRefFramesInPicOrderCntCycle;i++)expGolombDecoder.skipExpGolomb();if(expGolombDecoder.skipUnsignedExpGolomb(),expGolombDecoder.skipBits(1),picWidthInMbsMinus1=expGolombDecoder.readUnsignedExpGolomb(),picHeightInMapUnitsMinus1=expGolombDecoder.readUnsignedExpGolomb(),0===(frameMbsOnlyFlag=expGolombDecoder.readBits(1))&&expGolombDecoder.skipBits(1),expGolombDecoder.skipBits(1),expGolombDecoder.readBoolean()&&(frameCropLeftOffset=expGolombDecoder.readUnsignedExpGolomb(),frameCropRightOffset=expGolombDecoder.readUnsignedExpGolomb(),frameCropTopOffset=expGolombDecoder.readUnsignedExpGolomb(),frameCropBottomOffset=expGolombDecoder.readUnsignedExpGolomb()),expGolombDecoder.readBoolean()&&expGolombDecoder.readBoolean()){switch(expGolombDecoder.readUnsignedByte()){case 1:sarRatio=[1,1];break;case 2:sarRatio=[12,11];break;case 3:sarRatio=[10,11];break;case 4:sarRatio=[16,11];break;case 5:sarRatio=[40,33];break;case 6:sarRatio=[24,11];break;case 7:sarRatio=[20,11];break;case 8:sarRatio=[32,11];break;case 9:sarRatio=[80,33];break;case 10:sarRatio=[18,11];break;case 11:sarRatio=[15,11];break;case 12:sarRatio=[64,33];break;case 13:sarRatio=[160,99];break;case 14:sarRatio=[4,3];break;case 15:sarRatio=[3,2];break;case 16:sarRatio=[2,1];break;case 255:sarRatio=[expGolombDecoder.readUnsignedByte()<<8|expGolombDecoder.readUnsignedByte(),expGolombDecoder.readUnsignedByte()<<8|expGolombDecoder.readUnsignedByte()]}sarRatio&&(sarScale=sarRatio[0]/sarRatio[1])}return{profileIdc,levelIdc,profileCompatibility,width:Math.ceil((16*(picWidthInMbsMinus1+1)-2*frameCropLeftOffset-2*frameCropRightOffset)*sarScale),height:(2-frameMbsOnlyFlag)*(picHeightInMapUnitsMinus1+1)*16-2*frameCropTopOffset-2*frameCropBottomOffset,sarRatio}}},_H264Stream.prototype=new stream;var _AacStream,h264={H264Stream:_H264Stream,NalByteStream:_NalByteStream},utils_isLikelyAacData=function isLikelyAacData(data){return data[0]==="I".charCodeAt(0)&&data[1]==="D".charCodeAt(0)&&data[2]==="3".charCodeAt(0)},utils_parseId3TagSize=function parseId3TagSize(header,byteIndex){var returnSize=header[byteIndex+6]<<21|header[byteIndex+7]<<14|header[byteIndex+8]<<7|header[byteIndex+9];return(16&header[byteIndex+5])>>4?returnSize+20:returnSize+10},utils_parseAdtsSize=function parseAdtsSize(header,byteIndex){var lowThree=(224&header[byteIndex+5])>>5,middle=header[byteIndex+4]<<3;return 6144&header[byteIndex+3]|middle|lowThree};(_AacStream=function AacStream(){var everything=new Uint8Array,timeStamp=0;_AacStream.prototype.init.call(this),this.setTimestamp=function(timestamp){timeStamp=timestamp},this.push=function(bytes){var bytesLeft,chunk,packet,tempLength,frameSize=0,byteIndex=0;for(everything.length?(tempLength=everything.length,(everything=new Uint8Array(bytes.byteLength+tempLength)).set(everything.subarray(0,tempLength)),everything.set(bytes,tempLength)):everything=bytes;everything.length-byteIndex>=3;)if(everything[byteIndex]!=="I".charCodeAt(0)||everything[byteIndex+1]!=="D".charCodeAt(0)||everything[byteIndex+2]!=="3".charCodeAt(0))if(255&~everything[byteIndex]||240&~everything[byteIndex+1])byteIndex++;else{if(everything.length-byteIndex<7)break;if(byteIndex+(frameSize=utils_parseAdtsSize(everything,byteIndex))>everything.length)break;packet={type:"audio",data:everything.subarray(byteIndex,byteIndex+frameSize),pts:timeStamp,dts:timeStamp},this.trigger("data",packet),byteIndex+=frameSize}else{if(everything.length-byteIndex<10)break;if(byteIndex+(frameSize=utils_parseId3TagSize(everything,byteIndex))>everything.length)break;chunk={type:"timed-metadata",data:everything.subarray(byteIndex,byteIndex+frameSize)},this.trigger("data",chunk),byteIndex+=frameSize}bytesLeft=everything.length-byteIndex,everything=bytesLeft>0?everything.subarray(byteIndex):new Uint8Array},this.reset=function(){everything=new Uint8Array,this.trigger("reset")},this.endTimeline=function(){everything=new Uint8Array,this.trigger("endedtimeline")}}).prototype=new stream;var _VideoSegmentStream,_AudioSegmentStream,_Transmuxer,_CoalesceStream,aac=_AacStream,H264Stream=h264.H264Stream,isLikelyAacData$1=utils_isLikelyAacData,ONE_SECOND_IN_TS$3=clock_ONE_SECOND_IN_TS,AUDIO_PROPERTIES=["audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize"],VIDEO_PROPERTIES=["width","height","profileIdc","levelIdc","profileCompatibility","sarRatio"],arrayEquals=function arrayEquals(a,b){var i;if(a.length!==b.length)return!1;for(i=0;i<a.length;i++)if(a[i]!==b[i])return!1;return!0},generateVideoSegmentTimingInfo=function generateVideoSegmentTimingInfo(baseMediaDecodeTime,startDts,startPts,endDts,endPts,prependedContentDuration){return{start:{dts:baseMediaDecodeTime,pts:baseMediaDecodeTime+(startPts-startDts)},end:{dts:baseMediaDecodeTime+(endDts-startDts),pts:baseMediaDecodeTime+(endPts-startPts)},prependedContentDuration,baseMediaDecodeTime}};_AudioSegmentStream=function AudioSegmentStream(track,options){var adtsFrames=[],sequenceNumber=0,earliestAllowedDts=0,audioAppendStartTs=0,videoBaseMediaDecodeTime=1/0;options=options||{},_AudioSegmentStream.prototype.init.call(this),this.push=function(data){trackDecodeInfo_collectDtsInfo(track,data),track&&AUDIO_PROPERTIES.forEach((function(prop){track[prop]=data[prop]})),adtsFrames.push(data)},this.setEarliestDts=function(earliestDts){earliestAllowedDts=earliestDts-track.timelineStartInfo.baseMediaDecodeTime},this.setVideoBaseMediaDecodeTime=function(baseMediaDecodeTime){videoBaseMediaDecodeTime=baseMediaDecodeTime},this.setAudioAppendStart=function(timestamp){audioAppendStartTs=timestamp},this.flush=function(){var frames,moof,mdat,boxes,frameDuration;0!==adtsFrames.length?(frames=audioFrameUtils_trimAdtsFramesByEarliestDts(adtsFrames,track,earliestAllowedDts),track.baseMediaDecodeTime=trackDecodeInfo_calculateTrackBaseMediaDecodeTime(track,options.keepOriginalTimestamps),audioFrameUtils_prefixWithSilence(track,frames,audioAppendStartTs,videoBaseMediaDecodeTime),track.samples=audioFrameUtils_generateSampleTable(frames),mdat=mp4Generator_mdat(audioFrameUtils_concatenateFrameData(frames)),adtsFrames=[],moof=mp4Generator_moof(sequenceNumber,[track]),boxes=new Uint8Array(moof.byteLength+mdat.byteLength),sequenceNumber++,boxes.set(moof),boxes.set(mdat,moof.byteLength),trackDecodeInfo_clearDtsInfo(track),frameDuration=Math.ceil(1024*ONE_SECOND_IN_TS$3/track.samplerate),frames.length&&this.trigger("timingInfo",{start:frames[0].dts,end:frames[0].dts+frames.length*frameDuration}),this.trigger("data",{track,boxes}),this.trigger("done","AudioSegmentStream")):this.trigger("done","AudioSegmentStream")},this.reset=function(){trackDecodeInfo_clearDtsInfo(track),adtsFrames=[],this.trigger("reset")}},_AudioSegmentStream.prototype=new stream,_VideoSegmentStream=function VideoSegmentStream(track,options){var config,pps,sequenceNumber=0,nalUnits=[],gopsToAlignWith=[];options=options||{},_VideoSegmentStream.prototype.init.call(this),delete track.minPTS,this.gopCache_=[],this.push=function(nalUnit){trackDecodeInfo_collectDtsInfo(track,nalUnit),"seq_parameter_set_rbsp"!==nalUnit.nalUnitType||config||(config=nalUnit.config,track.sps=[nalUnit.data],VIDEO_PROPERTIES.forEach((function(prop){track[prop]=config[prop]}),this)),"pic_parameter_set_rbsp"!==nalUnit.nalUnitType||pps||(pps=nalUnit.data,track.pps=[nalUnit.data]),nalUnits.push(nalUnit)},this.flush=function(){for(var frames,gopForFusion,gops,moof,mdat,boxes,firstGop,lastGop,prependedContentDuration=0;nalUnits.length&&"access_unit_delimiter_rbsp"!==nalUnits[0].nalUnitType;)nalUnits.shift();if(0===nalUnits.length)return this.resetStream_(),void this.trigger("done","VideoSegmentStream");if(frames=frameUtils_groupNalsIntoFrames(nalUnits),(gops=frameUtils_groupFramesIntoGops(frames))[0][0].keyFrame||((gopForFusion=this.getGopForFusion_(nalUnits[0],track))?(prependedContentDuration=gopForFusion.duration,gops.unshift(gopForFusion),gops.byteLength+=gopForFusion.byteLength,gops.nalCount+=gopForFusion.nalCount,gops.pts=gopForFusion.pts,gops.dts=gopForFusion.dts,gops.duration+=gopForFusion.duration):gops=frameUtils_extendFirstKeyFrame(gops)),gopsToAlignWith.length){var alignedGops;if(!(alignedGops=options.alignGopsAtEnd?this.alignGopsAtEnd_(gops):this.alignGopsAtStart_(gops)))return this.gopCache_.unshift({gop:gops.pop(),pps:track.pps,sps:track.sps}),this.gopCache_.length=Math.min(6,this.gopCache_.length),nalUnits=[],this.resetStream_(),void this.trigger("done","VideoSegmentStream");trackDecodeInfo_clearDtsInfo(track),gops=alignedGops}trackDecodeInfo_collectDtsInfo(track,gops),track.samples=frameUtils_generateSampleTable(gops),mdat=mp4Generator_mdat(frameUtils_concatenateNalData(gops)),track.baseMediaDecodeTime=trackDecodeInfo_calculateTrackBaseMediaDecodeTime(track,options.keepOriginalTimestamps),this.trigger("processedGopsInfo",gops.map((function(gop){return{pts:gop.pts,dts:gop.dts,byteLength:gop.byteLength}}))),firstGop=gops[0],lastGop=gops[gops.length-1],this.trigger("segmentTimingInfo",generateVideoSegmentTimingInfo(track.baseMediaDecodeTime,firstGop.dts,firstGop.pts,lastGop.dts+lastGop.duration,lastGop.pts+lastGop.duration,prependedContentDuration)),this.trigger("timingInfo",{start:gops[0].dts,end:gops[gops.length-1].dts+gops[gops.length-1].duration}),this.gopCache_.unshift({gop:gops.pop(),pps:track.pps,sps:track.sps}),this.gopCache_.length=Math.min(6,this.gopCache_.length),nalUnits=[],this.trigger("baseMediaDecodeTime",track.baseMediaDecodeTime),this.trigger("timelineStartInfo",track.timelineStartInfo),moof=mp4Generator_moof(sequenceNumber,[track]),boxes=new Uint8Array(moof.byteLength+mdat.byteLength),sequenceNumber++,boxes.set(moof),boxes.set(mdat,moof.byteLength),this.trigger("data",{track,boxes}),this.resetStream_(),this.trigger("done","VideoSegmentStream")},this.reset=function(){this.resetStream_(),nalUnits=[],this.gopCache_.length=0,gopsToAlignWith.length=0,this.trigger("reset")},this.resetStream_=function(){trackDecodeInfo_clearDtsInfo(track),config=void 0,pps=void 0},this.getGopForFusion_=function(nalUnit){var dtsDistance,nearestGopObj,currentGop,currentGopObj,i,nearestDistance=1/0;for(i=0;i<this.gopCache_.length;i++)currentGop=(currentGopObj=this.gopCache_[i]).gop,track.pps&&arrayEquals(track.pps[0],currentGopObj.pps[0])&&track.sps&&arrayEquals(track.sps[0],currentGopObj.sps[0])&&(currentGop.dts<track.timelineStartInfo.dts||(dtsDistance=nalUnit.dts-currentGop.dts-currentGop.duration)>=-1e4&&dtsDistance<=45e3&&(!nearestGopObj||nearestDistance>dtsDistance)&&(nearestGopObj=currentGopObj,nearestDistance=dtsDistance));return nearestGopObj?nearestGopObj.gop:null},this.alignGopsAtStart_=function(gops){var alignIndex,gopIndex,align,gop,byteLength,nalCount,duration,alignedGops;for(byteLength=gops.byteLength,nalCount=gops.nalCount,duration=gops.duration,alignIndex=gopIndex=0;alignIndex<gopsToAlignWith.length&&gopIndex<gops.length&&(align=gopsToAlignWith[alignIndex],gop=gops[gopIndex],align.pts!==gop.pts);)gop.pts>align.pts?alignIndex++:(gopIndex++,byteLength-=gop.byteLength,nalCount-=gop.nalCount,duration-=gop.duration);return 0===gopIndex?gops:gopIndex===gops.length?null:((alignedGops=gops.slice(gopIndex)).byteLength=byteLength,alignedGops.duration=duration,alignedGops.nalCount=nalCount,alignedGops.pts=alignedGops[0].pts,alignedGops.dts=alignedGops[0].dts,alignedGops)},this.alignGopsAtEnd_=function(gops){var alignIndex,gopIndex,align,gop,alignEndIndex,matchFound,trimIndex;for(alignIndex=gopsToAlignWith.length-1,gopIndex=gops.length-1,alignEndIndex=null,matchFound=!1;alignIndex>=0&&gopIndex>=0;){if(align=gopsToAlignWith[alignIndex],gop=gops[gopIndex],align.pts===gop.pts){matchFound=!0;break}align.pts>gop.pts?alignIndex--:(alignIndex===gopsToAlignWith.length-1&&(alignEndIndex=gopIndex),gopIndex--)}if(!matchFound&&null===alignEndIndex)return null;if(0===(trimIndex=matchFound?gopIndex:alignEndIndex))return gops;var alignedGops=gops.slice(trimIndex),metadata=alignedGops.reduce((function(total,gop){return total.byteLength+=gop.byteLength,total.duration+=gop.duration,total.nalCount+=gop.nalCount,total}),{byteLength:0,duration:0,nalCount:0});return alignedGops.byteLength=metadata.byteLength,alignedGops.duration=metadata.duration,alignedGops.nalCount=metadata.nalCount,alignedGops.pts=alignedGops[0].pts,alignedGops.dts=alignedGops[0].dts,alignedGops},this.alignGopsWith=function(newGopsToAlignWith){gopsToAlignWith=newGopsToAlignWith}},_VideoSegmentStream.prototype=new stream,_CoalesceStream=function CoalesceStream(options,metadataStream){this.numberOfTracks=0,this.metadataStream=metadataStream,void 0!==(options=options||{}).remux?this.remuxTracks=!!options.remux:this.remuxTracks=!0,"boolean"==typeof options.keepOriginalTimestamps?this.keepOriginalTimestamps=options.keepOriginalTimestamps:this.keepOriginalTimestamps=!1,this.pendingTracks=[],this.videoTrack=null,this.pendingBoxes=[],this.pendingCaptions=[],this.pendingMetadata=[],this.pendingBytes=0,this.emittedTracks=0,_CoalesceStream.prototype.init.call(this),this.push=function(output){return output.text?this.pendingCaptions.push(output):output.frames?this.pendingMetadata.push(output):(this.pendingTracks.push(output.track),this.pendingBytes+=output.boxes.byteLength,"video"===output.track.type&&(this.videoTrack=output.track,this.pendingBoxes.push(output.boxes)),void("audio"===output.track.type&&(this.audioTrack=output.track,this.pendingBoxes.unshift(output.boxes))))}},_CoalesceStream.prototype=new stream,_CoalesceStream.prototype.flush=function(flushSource){var caption,id3,initSegment,i,offset=0,event={captions:[],captionStreams:{},metadata:[],info:{}},timelineStartPts=0;if(this.pendingTracks.length<this.numberOfTracks){if("VideoSegmentStream"!==flushSource&&"AudioSegmentStream"!==flushSource)return;if(this.remuxTracks)return;if(0===this.pendingTracks.length)return this.emittedTracks++,void(this.emittedTracks>=this.numberOfTracks&&(this.trigger("done"),this.emittedTracks=0))}if(this.videoTrack?(timelineStartPts=this.videoTrack.timelineStartInfo.pts,VIDEO_PROPERTIES.forEach((function(prop){event.info[prop]=this.videoTrack[prop]}),this)):this.audioTrack&&(timelineStartPts=this.audioTrack.timelineStartInfo.pts,AUDIO_PROPERTIES.forEach((function(prop){event.info[prop]=this.audioTrack[prop]}),this)),this.videoTrack||this.audioTrack){for(1===this.pendingTracks.length?event.type=this.pendingTracks[0].type:event.type="combined",this.emittedTracks+=this.pendingTracks.length,initSegment=mp4Generator_initSegment(this.pendingTracks),event.initSegment=new Uint8Array(initSegment.byteLength),event.initSegment.set(initSegment),event.data=new Uint8Array(this.pendingBytes),i=0;i<this.pendingBoxes.length;i++)event.data.set(this.pendingBoxes[i],offset),offset+=this.pendingBoxes[i].byteLength;for(i=0;i<this.pendingCaptions.length;i++)(caption=this.pendingCaptions[i]).startTime=clock_metadataTsToSeconds(caption.startPts,timelineStartPts,this.keepOriginalTimestamps),caption.endTime=clock_metadataTsToSeconds(caption.endPts,timelineStartPts,this.keepOriginalTimestamps),event.captionStreams[caption.stream]=!0,event.captions.push(caption);for(i=0;i<this.pendingMetadata.length;i++)(id3=this.pendingMetadata[i]).cueTime=clock_metadataTsToSeconds(id3.pts,timelineStartPts,this.keepOriginalTimestamps),event.metadata.push(id3);for(event.metadata.dispatchType=this.metadataStream.dispatchType,this.pendingTracks.length=0,this.videoTrack=null,this.pendingBoxes.length=0,this.pendingCaptions.length=0,this.pendingBytes=0,this.pendingMetadata.length=0,this.trigger("data",event),i=0;i<event.captions.length;i++)caption=event.captions[i],this.trigger("caption",caption);for(i=0;i<event.metadata.length;i++)id3=event.metadata[i],this.trigger("id3Frame",id3)}this.emittedTracks>=this.numberOfTracks&&(this.trigger("done"),this.emittedTracks=0)},_CoalesceStream.prototype.setRemux=function(val){this.remuxTracks=val},_Transmuxer=function Transmuxer(options){var videoTrack,audioTrack,self=this,hasFlushed=!0;_Transmuxer.prototype.init.call(this),options=options||{},this.baseMediaDecodeTime=options.baseMediaDecodeTime||0,this.transmuxPipeline_={},this.setupAacPipeline=function(){var pipeline={};this.transmuxPipeline_=pipeline,pipeline.type="aac",pipeline.metadataStream=new m2ts_1.MetadataStream,pipeline.aacStream=new aac,pipeline.audioTimestampRolloverStream=new m2ts_1.TimestampRolloverStream("audio"),pipeline.timedMetadataTimestampRolloverStream=new m2ts_1.TimestampRolloverStream("timed-metadata"),pipeline.adtsStream=new adts,pipeline.coalesceStream=new _CoalesceStream(options,pipeline.metadataStream),pipeline.headOfPipeline=pipeline.aacStream,pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream),pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream),pipeline.metadataStream.on("timestamp",(function(frame){pipeline.aacStream.setTimestamp(frame.timeStamp)})),pipeline.aacStream.on("data",(function(data){"timed-metadata"!==data.type||pipeline.audioSegmentStream||(audioTrack=audioTrack||{timelineStartInfo:{baseMediaDecodeTime:self.baseMediaDecodeTime},codec:"adts",type:"audio"},pipeline.coalesceStream.numberOfTracks++,pipeline.audioSegmentStream=new _AudioSegmentStream(audioTrack,options),pipeline.audioSegmentStream.on("timingInfo",self.trigger.bind(self,"audioTimingInfo")),pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream)),self.trigger("trackinfo",{hasAudio:!!audioTrack,hasVideo:!!videoTrack})})),pipeline.coalesceStream.on("data",this.trigger.bind(this,"data")),pipeline.coalesceStream.on("done",this.trigger.bind(this,"done"))},this.setupTsPipeline=function(){var pipeline={};this.transmuxPipeline_=pipeline,pipeline.type="ts",pipeline.metadataStream=new m2ts_1.MetadataStream,pipeline.packetStream=new m2ts_1.TransportPacketStream,pipeline.parseStream=new m2ts_1.TransportParseStream,pipeline.elementaryStream=new m2ts_1.ElementaryStream,pipeline.timestampRolloverStream=new m2ts_1.TimestampRolloverStream,pipeline.adtsStream=new adts,pipeline.h264Stream=new H264Stream,pipeline.captionStream=new m2ts_1.CaptionStream,pipeline.coalesceStream=new _CoalesceStream(options,pipeline.metadataStream),pipeline.headOfPipeline=pipeline.packetStream,pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream),pipeline.timestampRolloverStream.pipe(pipeline.h264Stream),pipeline.timestampRolloverStream.pipe(pipeline.adtsStream),pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream),pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream),pipeline.elementaryStream.on("data",(function(data){var i;if("metadata"===data.type){for(i=data.tracks.length;i--;)videoTrack||"video"!==data.tracks[i].type?audioTrack||"audio"!==data.tracks[i].type||((audioTrack=data.tracks[i]).timelineStartInfo.baseMediaDecodeTime=self.baseMediaDecodeTime):(videoTrack=data.tracks[i]).timelineStartInfo.baseMediaDecodeTime=self.baseMediaDecodeTime;videoTrack&&!pipeline.videoSegmentStream&&(pipeline.coalesceStream.numberOfTracks++,pipeline.videoSegmentStream=new _VideoSegmentStream(videoTrack,options),pipeline.videoSegmentStream.on("timelineStartInfo",(function(timelineStartInfo){audioTrack&&(audioTrack.timelineStartInfo=timelineStartInfo,pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts))})),pipeline.videoSegmentStream.on("processedGopsInfo",self.trigger.bind(self,"gopInfo")),pipeline.videoSegmentStream.on("segmentTimingInfo",self.trigger.bind(self,"videoSegmentTimingInfo")),pipeline.videoSegmentStream.on("baseMediaDecodeTime",(function(baseMediaDecodeTime){audioTrack&&pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime)})),pipeline.videoSegmentStream.on("timingInfo",self.trigger.bind(self,"videoTimingInfo")),pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream)),audioTrack&&!pipeline.audioSegmentStream&&(pipeline.coalesceStream.numberOfTracks++,pipeline.audioSegmentStream=new _AudioSegmentStream(audioTrack,options),pipeline.audioSegmentStream.on("timingInfo",self.trigger.bind(self,"audioTimingInfo")),pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream)),self.trigger("trackinfo",{hasAudio:!!audioTrack,hasVideo:!!videoTrack})}})),pipeline.coalesceStream.on("data",this.trigger.bind(this,"data")),pipeline.coalesceStream.on("id3Frame",(function(id3Frame){id3Frame.dispatchType=pipeline.metadataStream.dispatchType,self.trigger("id3Frame",id3Frame)})),pipeline.coalesceStream.on("caption",this.trigger.bind(this,"caption")),pipeline.coalesceStream.on("done",this.trigger.bind(this,"done"))},this.setBaseMediaDecodeTime=function(baseMediaDecodeTime){var pipeline=this.transmuxPipeline_;options.keepOriginalTimestamps||(this.baseMediaDecodeTime=baseMediaDecodeTime),audioTrack&&(audioTrack.timelineStartInfo.dts=void 0,audioTrack.timelineStartInfo.pts=void 0,trackDecodeInfo_clearDtsInfo(audioTrack),options.keepOriginalTimestamps||(audioTrack.timelineStartInfo.baseMediaDecodeTime=baseMediaDecodeTime),pipeline.audioTimestampRolloverStream&&pipeline.audioTimestampRolloverStream.discontinuity()),videoTrack&&(pipeline.videoSegmentStream&&(pipeline.videoSegmentStream.gopCache_=[]),videoTrack.timelineStartInfo.dts=void 0,videoTrack.timelineStartInfo.pts=void 0,trackDecodeInfo_clearDtsInfo(videoTrack),pipeline.captionStream.reset(),options.keepOriginalTimestamps||(videoTrack.timelineStartInfo.baseMediaDecodeTime=baseMediaDecodeTime)),pipeline.timestampRolloverStream&&pipeline.timestampRolloverStream.discontinuity()},this.setAudioAppendStart=function(timestamp){audioTrack&&this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp)},this.setRemux=function(val){var pipeline=this.transmuxPipeline_;options.remux=val,pipeline&&pipeline.coalesceStream&&pipeline.coalesceStream.setRemux(val)},this.alignGopsWith=function(gopsToAlignWith){videoTrack&&this.transmuxPipeline_.videoSegmentStream&&this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith)},this.push=function(data){if(hasFlushed){var isAac=isLikelyAacData$1(data);isAac&&"aac"!==this.transmuxPipeline_.type?this.setupAacPipeline():isAac||"ts"===this.transmuxPipeline_.type||this.setupTsPipeline(),hasFlushed=!1}this.transmuxPipeline_.headOfPipeline.push(data)},this.flush=function(){hasFlushed=!0,this.transmuxPipeline_.headOfPipeline.flush()},this.endTimeline=function(){this.transmuxPipeline_.headOfPipeline.endTimeline()},this.reset=function(){this.transmuxPipeline_.headOfPipeline&&this.transmuxPipeline_.headOfPipeline.reset()},this.resetCaptions=function(){this.transmuxPipeline_.captionStream&&this.transmuxPipeline_.captionStream.reset()}},_Transmuxer.prototype=new stream;var transmuxer={Transmuxer:_Transmuxer,VideoSegmentStream:_VideoSegmentStream,AudioSegmentStream:_AudioSegmentStream,AUDIO_PROPERTIES,VIDEO_PROPERTIES,generateVideoSegmentTimingInfo},createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),MessageHandlers=function(){function MessageHandlers(self,options){!function classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,MessageHandlers),this.options=options||{},this.self=self,this.init()}return createClass(MessageHandlers,[{key:"init",value:function init(){this.transmuxer&&this.transmuxer.dispose(),this.transmuxer=new transmuxer.Transmuxer(this.options),function wireTransmuxerEvents(self,transmuxer$$1){transmuxer$$1.on("data",(function(segment){var initArray=segment.initSegment;segment.initSegment={data:initArray.buffer,byteOffset:initArray.byteOffset,byteLength:initArray.byteLength};var typedArray=segment.data;segment.data=typedArray.buffer,self.postMessage({action:"data",segment,byteOffset:typedArray.byteOffset,byteLength:typedArray.byteLength},[segment.data])})),transmuxer$$1.captionStream&&transmuxer$$1.captionStream.on("data",(function(caption){self.postMessage({action:"caption",data:caption})})),transmuxer$$1.on("done",(function(data){self.postMessage({action:"done"})})),transmuxer$$1.on("gopInfo",(function(gopInfo){self.postMessage({action:"gopInfo",gopInfo})})),transmuxer$$1.on("videoSegmentTimingInfo",(function(videoSegmentTimingInfo){self.postMessage({action:"videoSegmentTimingInfo",videoSegmentTimingInfo})}))}(this.self,this.transmuxer)}},{key:"push",value:function push(data){var segment=new Uint8Array(data.data,data.byteOffset,data.byteLength);this.transmuxer.push(segment)}},{key:"reset",value:function reset(){this.init()}},{key:"setTimestampOffset",value:function setTimestampOffset(data){var timestampOffset=data.timestampOffset||0;this.transmuxer.setBaseMediaDecodeTime(Math.round(9e4*timestampOffset))}},{key:"setAudioAppendStart",value:function setAudioAppendStart(data){this.transmuxer.setAudioAppendStart(Math.ceil(9e4*data.appendStart))}},{key:"flush",value:function flush(data){this.transmuxer.flush()}},{key:"resetCaptions",value:function resetCaptions(){this.transmuxer.resetCaptions()}},{key:"alignGopsWith",value:function alignGopsWith(data){this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice())}}]),MessageHandlers}(),transmuxerWorker=new function TransmuxerWorker(self){self.onmessage=function(event){"init"===event.data.action&&event.data.options?this.messageHandlers=new MessageHandlers(self,event.data.options):(this.messageHandlers||(this.messageHandlers=new MessageHandlers(self)),event.data&&event.data.action&&"init"!==event.data.action&&this.messageHandlers[event.data.action]&&this.messageHandlers[event.data.action](event.data))}}(self)}()})),defaultCodecs={videoCodec:"avc1",videoObjectTypeIndicator:".4d400d",audioProfile:"2"},translateLegacyCodecs=function translateLegacyCodecs(codecs){return codecs.map((function(codec){return codec.replace(/avc1\.(\d+)\.(\d+)/i,(function(orig,profile,avcLevel){return"avc1."+("00"+Number(profile).toString(16)).slice(-2)+"00"+("00"+Number(avcLevel).toString(16)).slice(-2)}))}))},parseCodecs=function parseCodecs(){var parsed,codecs=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",result={codecCount:0};return result.codecCount=codecs.split(",").length,result.codecCount=result.codecCount||2,(parsed=/(^|\s|,)+(avc[13])([^ ,]*)/i.exec(codecs))&&(result.videoCodec=parsed[2],result.videoObjectTypeIndicator=parsed[3]),result.audioProfile=/(^|\s|,)+mp4a.[0-9A-Fa-f]+\.([0-9A-Fa-f]+)/i.exec(codecs),result.audioProfile=result.audioProfile&&result.audioProfile[2],result},makeMimeTypeString=function makeMimeTypeString(type,container,codecs){return type+"/"+container+'; codecs="'+codecs.filter((function(c){return!!c})).join(", ")+'"'},mimeTypesForPlaylist=function mimeTypesForPlaylist(master,media){var containerType=function getContainerType(media){return media.segments&&media.segments.length&&media.segments[0].map?"mp4":"mp2t"}(media),codecInfo=function getCodecs(media){var mediaAttributes=media.attributes||{};return mediaAttributes.CODECS?parseCodecs(mediaAttributes.CODECS):defaultCodecs}(media),mediaAttributes=media.attributes||{},isMuxed=!0,isMaat=!1;if(!media)return[];if(master.mediaGroups.AUDIO&&mediaAttributes.AUDIO){var audioGroup=master.mediaGroups.AUDIO[mediaAttributes.AUDIO];if(audioGroup)for(var groupId in isMaat=!0,isMuxed=!1,audioGroup)if(!audioGroup[groupId].uri&&!audioGroup[groupId].playlists){isMuxed=!0;break}}isMaat&&!codecInfo.audioProfile&&(isMuxed||(codecInfo.audioProfile=function audioProfileFromDefault(master,audioGroupId){if(!master.mediaGroups.AUDIO||!audioGroupId)return null;var audioGroup=master.mediaGroups.AUDIO[audioGroupId];if(!audioGroup)return null;for(var name in audioGroup){var audioType=audioGroup[name];if(audioType.default&&audioType.playlists)return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile}return null}(master,mediaAttributes.AUDIO)),codecInfo.audioProfile||(videojs$1.log.warn("Multiple audio tracks present but no audio codec string is specified. Attempting to use the default audio codec (mp4a.40.2)"),codecInfo.audioProfile=defaultCodecs.audioProfile));var codecStrings={};codecInfo.videoCodec&&(codecStrings.video=""+codecInfo.videoCodec+codecInfo.videoObjectTypeIndicator),codecInfo.audioProfile&&(codecStrings.audio="mp4a.40."+codecInfo.audioProfile);var justAudio=makeMimeTypeString("audio",containerType,[codecStrings.audio]),justVideo=makeMimeTypeString("video",containerType,[codecStrings.video]),bothVideoAudio=makeMimeTypeString("video",containerType,[codecStrings.video,codecStrings.audio]);return isMaat?!isMuxed&&codecStrings.video?[justVideo,justAudio]:isMuxed||codecStrings.video?[bothVideoAudio,justAudio]:[justAudio,justAudio]:codecStrings.video?[bothVideoAudio]:[justAudio]},isAudioCodec=function isAudioCodec(codec){return/mp4a\.\d+.\d+/i.test(codec)},isVideoCodec=function isVideoCodec(codec){return/avc1\.[\da-f]+/i.test(codec)},gopsSafeToAlignWith=function gopsSafeToAlignWith(buffer,currentTime,mapping){if(null==currentTime||!buffer.length)return[];var currentTimePts=Math.ceil(9e4*(currentTime-mapping+3)),i=void 0;for(i=0;i<buffer.length&&!(buffer[i].pts>currentTimePts);i++);return buffer.slice(i)},VirtualSourceBuffer=function(_videojs$EventTarget){function VirtualSourceBuffer(mediaSource,codecs){video_es_classCallCheck(this,VirtualSourceBuffer);var _this=video_es_possibleConstructorReturn(this,(VirtualSourceBuffer.__proto__||Object.getPrototypeOf(VirtualSourceBuffer)).call(this,videojs$1.EventTarget));_this.timestampOffset_=0,_this.pendingBuffers_=[],_this.bufferUpdating_=!1,_this.mediaSource_=mediaSource,_this.codecs_=codecs,_this.audioCodec_=null,_this.videoCodec_=null,_this.audioDisabled_=!1,_this.appendAudioInitSegment_=!0,_this.gopBuffer_=[],_this.timeMapping_=0,_this.safeAppend_=videojs$1.browser.IE_VERSION>=11;var options={remux:!1,alignGopsAtEnd:_this.safeAppend_};return _this.codecs_.forEach((function(codec){isAudioCodec(codec)?_this.audioCodec_=codec:isVideoCodec(codec)&&(_this.videoCodec_=codec)})),_this.transmuxer_=new TransmuxWorker,_this.transmuxer_.postMessage({action:"init",options}),_this.transmuxer_.onmessage=function(event){return"data"===event.data.action?_this.data_(event):"done"===event.data.action?_this.done_(event):"gopInfo"===event.data.action?_this.appendGopInfo_(event):"videoSegmentTimingInfo"===event.data.action?_this.videoSegmentTimingInfo_(event.data.videoSegmentTimingInfo):void 0},Object.defineProperty(_this,"timestampOffset",{get:function get$$1(){return this.timestampOffset_},set:function set$$1(val){"number"==typeof val&&val>=0&&(this.timestampOffset_=val,this.appendAudioInitSegment_=!0,this.gopBuffer_.length=0,this.timeMapping_=0,this.transmuxer_.postMessage({action:"setTimestampOffset",timestampOffset:val}))}}),Object.defineProperty(_this,"appendWindowStart",{get:function get$$1(){return(this.videoBuffer_||this.audioBuffer_).appendWindowStart},set:function set$$1(start){this.videoBuffer_&&(this.videoBuffer_.appendWindowStart=start),this.audioBuffer_&&(this.audioBuffer_.appendWindowStart=start)}}),Object.defineProperty(_this,"updating",{get:function get$$1(){return!!(this.bufferUpdating_||!this.audioDisabled_&&this.audioBuffer_&&this.audioBuffer_.updating||this.videoBuffer_&&this.videoBuffer_.updating)}}),Object.defineProperty(_this,"buffered",{get:function get$$1(){return function buffered(videoBuffer,audioBuffer,audioDisabled){var start=null,end=null,arity=0,extents=[],ranges=[];if(!videoBuffer&&!audioBuffer)return videojs$1.createTimeRange();if(!videoBuffer)return audioBuffer.buffered;if(!audioBuffer)return videoBuffer.buffered;if(audioDisabled)return videoBuffer.buffered;if(0===videoBuffer.buffered.length&&0===audioBuffer.buffered.length)return videojs$1.createTimeRange();for(var videoBuffered=videoBuffer.buffered,audioBuffered=audioBuffer.buffered,count=videoBuffered.length;count--;)extents.push({time:videoBuffered.start(count),type:"start"}),extents.push({time:videoBuffered.end(count),type:"end"});for(count=audioBuffered.length;count--;)extents.push({time:audioBuffered.start(count),type:"start"}),extents.push({time:audioBuffered.end(count),type:"end"});for(extents.sort((function(a,b){return a.time-b.time})),count=0;count<extents.length;count++)"start"===extents[count].type?2==++arity&&(start=extents[count].time):"end"===extents[count].type&&1==--arity&&(end=extents[count].time),null!==start&&null!==end&&(ranges.push([start,end]),start=null,end=null);return videojs$1.createTimeRanges(ranges)}(this.videoBuffer_,this.audioBuffer_,this.audioDisabled_)}}),_this}return video_es_inherits(VirtualSourceBuffer,_videojs$EventTarget),video_es_createClass(VirtualSourceBuffer,[{key:"data_",value:function data_(event){var segment=event.data.segment;segment.data=new Uint8Array(segment.data,event.data.byteOffset,event.data.byteLength),segment.initSegment=new Uint8Array(segment.initSegment.data,segment.initSegment.byteOffset,segment.initSegment.byteLength),function createTextTracksIfNecessary(sourceBuffer,mediaSource,segment){var player=mediaSource.player_;if(segment.captions&&segment.captions.length)for(var trackId in sourceBuffer.inbandTextTracks_||(sourceBuffer.inbandTextTracks_={}),segment.captionStreams)if(!sourceBuffer.inbandTextTracks_[trackId]){player.tech_.trigger({type:"usage",name:"hls-608"});var track=player.textTracks().getTrackById(trackId);sourceBuffer.inbandTextTracks_[trackId]=track||player.addRemoteTextTrack({kind:"captions",id:trackId,label:trackId},!1).track}segment.metadata&&segment.metadata.length&&!sourceBuffer.metadataTrack_&&(sourceBuffer.metadataTrack_=player.addRemoteTextTrack({kind:"metadata",label:"Timed Metadata"},!1).track,sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType=segment.metadata.dispatchType)}(this,this.mediaSource_,segment),this.pendingBuffers_.push(segment)}},{key:"done_",value:function done_(event){"closed"!==this.mediaSource_.readyState?this.processPendingSegments_():this.pendingBuffers_.length=0}},{key:"videoSegmentTimingInfo_",value:function videoSegmentTimingInfo_(timingInfo){var timingInfoInSeconds={start:{decode:timingInfo.start.dts/9e4,presentation:timingInfo.start.pts/9e4},end:{decode:timingInfo.end.dts/9e4,presentation:timingInfo.end.pts/9e4},baseMediaDecodeTime:timingInfo.baseMediaDecodeTime/9e4};timingInfo.prependedContentDuration&&(timingInfoInSeconds.prependedContentDuration=timingInfo.prependedContentDuration/9e4),this.trigger({type:"videoSegmentTimingInfo",videoSegmentTimingInfo:timingInfoInSeconds})}},{key:"createRealSourceBuffers_",value:function createRealSourceBuffers_(){var _this2=this,types=["audio","video"];types.forEach((function(type){if(_this2[type+"Codec_"]&&!_this2[type+"Buffer_"]){var buffer=null;if(_this2.mediaSource_[type+"Buffer_"])(buffer=_this2.mediaSource_[type+"Buffer_"]).updating=!1;else{var mimeType=type+'/mp4;codecs="'+_this2[type+"Codec_"]+'"';buffer=function makeWrappedSourceBuffer(mediaSource,mimeType){var sourceBuffer=mediaSource.addSourceBuffer(mimeType),wrapper=Object.create(null);wrapper.updating=!1,wrapper.realBuffer_=sourceBuffer;var _loop=function _loop(key){"function"==typeof sourceBuffer[key]?wrapper[key]=function(){return sourceBuffer[key].apply(sourceBuffer,arguments)}:void 0===wrapper[key]&&Object.defineProperty(wrapper,key,{get:function get$$1(){return sourceBuffer[key]},set:function set$$1(v){return sourceBuffer[key]=v}})};for(var key in sourceBuffer)_loop(key);return wrapper}(_this2.mediaSource_.nativeMediaSource_,mimeType),_this2.mediaSource_[type+"Buffer_"]=buffer}_this2[type+"Buffer_"]=buffer,["update","updatestart","updateend"].forEach((function(event){buffer.addEventListener(event,(function(){if("audio"!==type||!_this2.audioDisabled_)return"updateend"===event&&(_this2[type+"Buffer_"].updating=!1),types.every((function(t){return!("audio"!==t||!_this2.audioDisabled_)||(type===t||!_this2[t+"Buffer_"]||!_this2[t+"Buffer_"].updating)}))?_this2.trigger(event):void 0}))}))}}))}},{key:"appendBuffer",value:function appendBuffer(segment){if(this.bufferUpdating_=!0,this.audioBuffer_&&this.audioBuffer_.buffered.length){var audioBuffered=this.audioBuffer_.buffered;this.transmuxer_.postMessage({action:"setAudioAppendStart",appendStart:audioBuffered.end(audioBuffered.length-1)})}this.videoBuffer_&&this.transmuxer_.postMessage({action:"alignGopsWith",gopsToAlignWith:gopsSafeToAlignWith(this.gopBuffer_,this.mediaSource_.player_?this.mediaSource_.player_.currentTime():null,this.timeMapping_)}),this.transmuxer_.postMessage({action:"push",data:segment.buffer,byteOffset:segment.byteOffset,byteLength:segment.byteLength},[segment.buffer]),this.transmuxer_.postMessage({action:"flush"})}},{key:"appendGopInfo_",value:function appendGopInfo_(event){this.gopBuffer_=function updateGopBuffer(buffer,gops,replace){if(!gops.length)return buffer;if(replace)return gops.slice();for(var start=gops[0].pts,i=0;i<buffer.length&&!(buffer[i].pts>=start);i++);return buffer.slice(0,i).concat(gops)}(this.gopBuffer_,event.data.gopInfo,this.safeAppend_)}},{key:"remove",value:function remove(start,end){if(this.videoBuffer_&&(this.videoBuffer_.updating=!0,this.videoBuffer_.remove(start,end),this.gopBuffer_=function removeGopBuffer(buffer,start,end,mapping){for(var startPts=Math.ceil(9e4*(start-mapping)),endPts=Math.ceil(9e4*(end-mapping)),updatedBuffer=buffer.slice(),i=buffer.length;i--&&!(buffer[i].pts<=endPts););if(-1===i)return updatedBuffer;for(var j=i+1;j--&&!(buffer[j].pts<=startPts););return j=Math.max(j,0),updatedBuffer.splice(j,i-j+1),updatedBuffer}(this.gopBuffer_,start,end,this.timeMapping_)),!this.audioDisabled_&&this.audioBuffer_&&(this.audioBuffer_.updating=!0,this.audioBuffer_.remove(start,end)),removeCuesFromTrack(start,end,this.metadataTrack_),this.inbandTextTracks_)for(var track in this.inbandTextTracks_)removeCuesFromTrack(start,end,this.inbandTextTracks_[track])}},{key:"processPendingSegments_",value:function processPendingSegments_(){var sortedSegments={video:{segments:[],bytes:0},audio:{segments:[],bytes:0},captions:[],metadata:[]};if(!this.pendingBuffers_.length)return this.trigger("updateend"),void(this.bufferUpdating_=!1);sortedSegments=this.pendingBuffers_.reduce((function(segmentObj,segment){var type=segment.type,data=segment.data,initSegment=segment.initSegment;return segmentObj[type].segments.push(data),segmentObj[type].bytes+=data.byteLength,segmentObj[type].initSegment=initSegment,segment.captions&&(segmentObj.captions=segmentObj.captions.concat(segment.captions)),segment.info&&(segmentObj[type].info=segment.info),segment.metadata&&(segmentObj.metadata=segmentObj.metadata.concat(segment.metadata)),segmentObj}),sortedSegments),this.videoBuffer_||this.audioBuffer_||(0===sortedSegments.video.bytes&&(this.videoCodec_=null),0===sortedSegments.audio.bytes&&(this.audioCodec_=null),this.createRealSourceBuffers_()),sortedSegments.audio.info&&this.mediaSource_.trigger({type:"audioinfo",info:sortedSegments.audio.info}),sortedSegments.video.info&&this.mediaSource_.trigger({type:"videoinfo",info:sortedSegments.video.info}),this.appendAudioInitSegment_&&(!this.audioDisabled_&&this.audioBuffer_&&(sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment),sortedSegments.audio.bytes+=sortedSegments.audio.initSegment.byteLength),this.appendAudioInitSegment_=!1);var triggerUpdateend=!1;this.videoBuffer_&&sortedSegments.video.bytes?(sortedSegments.video.segments.unshift(sortedSegments.video.initSegment),sortedSegments.video.bytes+=sortedSegments.video.initSegment.byteLength,this.concatAndAppendSegments_(sortedSegments.video,this.videoBuffer_)):!this.videoBuffer_||!this.audioDisabled_&&this.audioBuffer_||(triggerUpdateend=!0),addTextTrackData(this,sortedSegments.captions,sortedSegments.metadata),!this.audioDisabled_&&this.audioBuffer_&&this.concatAndAppendSegments_(sortedSegments.audio,this.audioBuffer_),this.pendingBuffers_.length=0,triggerUpdateend&&this.trigger("updateend"),this.bufferUpdating_=!1}},{key:"concatAndAppendSegments_",value:function concatAndAppendSegments_(segmentObj,destinationBuffer){var offset=0,tempBuffer=void 0;if(segmentObj.bytes){tempBuffer=new Uint8Array(segmentObj.bytes),segmentObj.segments.forEach((function(segment){tempBuffer.set(segment,offset),offset+=segment.byteLength}));try{destinationBuffer.updating=!0,destinationBuffer.appendBuffer(tempBuffer)}catch(error){this.mediaSource_.player_&&this.mediaSource_.player_.error({code:-3,type:"APPEND_BUFFER_ERR",message:error.message,originalError:error})}}}},{key:"abort",value:function abort(){this.videoBuffer_&&this.videoBuffer_.abort(),!this.audioDisabled_&&this.audioBuffer_&&this.audioBuffer_.abort(),this.transmuxer_&&this.transmuxer_.postMessage({action:"reset"}),this.pendingBuffers_.length=0,this.bufferUpdating_=!1}}]),VirtualSourceBuffer}(videojs$1.EventTarget),HtmlMediaSource=function(_videojs$EventTarget){function HtmlMediaSource(){video_es_classCallCheck(this,HtmlMediaSource);var _this=video_es_possibleConstructorReturn(this,(HtmlMediaSource.__proto__||Object.getPrototypeOf(HtmlMediaSource)).call(this)),property=void 0;for(property in _this.nativeMediaSource_=new(window_default().MediaSource),_this.nativeMediaSource_)property in HtmlMediaSource.prototype||"function"!=typeof _this.nativeMediaSource_[property]||(_this[property]=_this.nativeMediaSource_[property].bind(_this.nativeMediaSource_));return _this.duration_=NaN,Object.defineProperty(_this,"duration",{get:function get$$1(){return this.duration_===1/0?this.duration_:this.nativeMediaSource_.duration},set:function set$$1(duration){this.duration_=duration,duration===1/0||(this.nativeMediaSource_.duration=duration)}}),Object.defineProperty(_this,"seekable",{get:function get$$1(){return this.duration_===1/0?videojs$1.createTimeRanges([[0,this.nativeMediaSource_.duration]]):this.nativeMediaSource_.seekable}}),Object.defineProperty(_this,"readyState",{get:function get$$1(){return this.nativeMediaSource_.readyState}}),Object.defineProperty(_this,"activeSourceBuffers",{get:function get$$1(){return this.activeSourceBuffers_}}),_this.sourceBuffers=[],_this.activeSourceBuffers_=[],_this.updateActiveSourceBuffers_=function(){if(_this.activeSourceBuffers_.length=0,1===_this.sourceBuffers.length){var sourceBuffer=_this.sourceBuffers[0];return sourceBuffer.appendAudioInitSegment_=!0,sourceBuffer.audioDisabled_=!sourceBuffer.audioCodec_,void _this.activeSourceBuffers_.push(sourceBuffer)}for(var disableCombined=!1,disableAudioOnly=!0,i=0;i<_this.player_.audioTracks().length;i++){var track=_this.player_.audioTracks()[i];if(track.enabled&&"main"!==track.kind){disableCombined=!0,disableAudioOnly=!1;break}}_this.sourceBuffers.forEach((function(sourceBuffer,index){if(sourceBuffer.appendAudioInitSegment_=!0,sourceBuffer.videoCodec_&&sourceBuffer.audioCodec_)sourceBuffer.audioDisabled_=disableCombined;else if(sourceBuffer.videoCodec_&&!sourceBuffer.audioCodec_)sourceBuffer.audioDisabled_=!0,disableAudioOnly=!1;else if(!sourceBuffer.videoCodec_&&sourceBuffer.audioCodec_&&(sourceBuffer.audioDisabled_=index?disableAudioOnly:!disableAudioOnly,sourceBuffer.audioDisabled_))return;_this.activeSourceBuffers_.push(sourceBuffer)}))},_this.onPlayerMediachange_=function(){_this.sourceBuffers.forEach((function(sourceBuffer){sourceBuffer.appendAudioInitSegment_=!0}))},_this.onHlsReset_=function(){_this.sourceBuffers.forEach((function(sourceBuffer){sourceBuffer.transmuxer_&&sourceBuffer.transmuxer_.postMessage({action:"resetCaptions"})}))},_this.onHlsSegmentTimeMapping_=function(event){_this.sourceBuffers.forEach((function(buffer){return buffer.timeMapping_=event.mapping}))},["sourceopen","sourceclose","sourceended"].forEach((function(eventName){this.nativeMediaSource_.addEventListener(eventName,this.trigger.bind(this))}),_this),_this.on("sourceopen",(function(event){var video=document_default().querySelector('[src="'+_this.url_+'"]');video&&(_this.player_=videojs$1(video.parentNode),_this.player_&&(_this.player_.tech_.on("hls-reset",_this.onHlsReset_),_this.player_.tech_.on("hls-segment-time-mapping",_this.onHlsSegmentTimeMapping_),_this.player_.audioTracks&&_this.player_.audioTracks()&&(_this.player_.audioTracks().on("change",_this.updateActiveSourceBuffers_),_this.player_.audioTracks().on("addtrack",_this.updateActiveSourceBuffers_),_this.player_.audioTracks().on("removetrack",_this.updateActiveSourceBuffers_)),_this.player_.on("mediachange",_this.onPlayerMediachange_)))})),_this.on("sourceended",(function(event){for(var duration=durationOfVideo(_this.duration),i=0;i<_this.sourceBuffers.length;i++){var sourcebuffer=_this.sourceBuffers[i],cues=sourcebuffer.metadataTrack_&&sourcebuffer.metadataTrack_.cues;cues&&cues.length&&(cues[cues.length-1].endTime=duration)}})),_this.on("sourceclose",(function(event){this.sourceBuffers.forEach((function(sourceBuffer){sourceBuffer.transmuxer_&&sourceBuffer.transmuxer_.terminate()})),this.sourceBuffers.length=0,this.player_&&(this.player_.audioTracks&&this.player_.audioTracks()&&(this.player_.audioTracks().off("change",this.updateActiveSourceBuffers_),this.player_.audioTracks().off("addtrack",this.updateActiveSourceBuffers_),this.player_.audioTracks().off("removetrack",this.updateActiveSourceBuffers_)),this.player_.el_&&this.player_.off("mediachange",this.onPlayerMediachange_),this.player_.tech_&&this.player_.tech_.el_&&(this.player_.tech_.off("hls-reset",this.onHlsReset_),this.player_.tech_.off("hls-segment-time-mapping",this.onHlsSegmentTimeMapping_)))})),_this}return video_es_inherits(HtmlMediaSource,_videojs$EventTarget),video_es_createClass(HtmlMediaSource,[{key:"addSeekableRange_",value:function addSeekableRange_(start,end){var error=void 0;if(this.duration!==1/0)throw(error=new Error("MediaSource.addSeekableRange() can only be invoked when the duration is Infinity")).name="InvalidStateError",error.code=11,error;(end>this.nativeMediaSource_.duration||isNaN(this.nativeMediaSource_.duration))&&(this.nativeMediaSource_.duration=end)}},{key:"addSourceBuffer",value:function addSourceBuffer(type){var buffer=void 0,parsedType=function parseContentType(type){var object={type:"",parameters:{}},parameters=type.trim().split(";");return object.type=parameters.shift().trim(),parameters.forEach((function(parameter){var pair=parameter.trim().split("=");if(pair.length>1){var name=pair[0].replace(/"/g,"").trim(),value=pair[1].replace(/"/g,"").trim();object.parameters[name]=value}})),object}(type);if(/^(video|audio)\/mp2t$/i.test(parsedType.type)){var codecs=[];parsedType.parameters&&parsedType.parameters.codecs&&(codecs=parsedType.parameters.codecs.split(","),codecs=(codecs=translateLegacyCodecs(codecs)).filter((function(codec){return isAudioCodec(codec)||isVideoCodec(codec)}))),0===codecs.length&&(codecs=["avc1.4d400d","mp4a.40.2"]),buffer=new VirtualSourceBuffer(this,codecs),0!==this.sourceBuffers.length&&(this.sourceBuffers[0].createRealSourceBuffers_(),buffer.createRealSourceBuffers_(),this.sourceBuffers[0].audioDisabled_=!0)}else buffer=this.nativeMediaSource_.addSourceBuffer(type);return this.sourceBuffers.push(buffer),buffer}}]),HtmlMediaSource}(videojs$1.EventTarget),urlCount=0;videojs$1.mediaSources={};var video_es_open=function open(msObjectURL,swfId){var mediaSource=videojs$1.mediaSources[msObjectURL];if(!mediaSource)throw new Error("Media Source not found (Video.js)");mediaSource.trigger({type:"sourceopen",swfId})},supportsNativeMediaSources=function supportsNativeMediaSources(){return!!window_default().MediaSource&&!!window_default().MediaSource.isTypeSupported&&window_default().MediaSource.isTypeSupported('video/mp4;codecs="avc1.4d400d,mp4a.40.2"')},MediaSource=function MediaSource(){if(this.MediaSource={open:video_es_open,supportsNativeMediaSources},supportsNativeMediaSources())return new HtmlMediaSource;throw new Error("Cannot use create a virtual MediaSource for this video")};MediaSource.open=video_es_open,MediaSource.supportsNativeMediaSources=supportsNativeMediaSources;var URL$1={createObjectURL:function createObjectURL(object){var url=void 0;return object instanceof HtmlMediaSource?(url=window_default().URL.createObjectURL(object.nativeMediaSource_),object.url_=url,url):object instanceof HtmlMediaSource?(url="blob:vjs-media-source/"+urlCount,urlCount++,videojs$1.mediaSources[url]=object,url):(url=window_default().URL.createObjectURL(object),object.url_=url,url)}};videojs$1.MediaSource=MediaSource,videojs$1.URL=URL$1;var EventTarget$1$1=videojs$1.EventTarget,mergeOptions$2=videojs$1.mergeOptions,updateMaster$1=function updateMaster$$1(oldMaster,newMaster){for(var noChanges=void 0,update=mergeOptions$2(oldMaster,{duration:newMaster.duration,minimumUpdatePeriod:newMaster.minimumUpdatePeriod}),i=0;i<newMaster.playlists.length;i++){var playlistUpdate=updateMaster(update,newMaster.playlists[i]);playlistUpdate?update=playlistUpdate:noChanges=!0}return forEachMediaGroup(newMaster,(function(properties,type,group,label){if(properties.playlists&&properties.playlists.length){var uri=properties.playlists[0].uri,_playlistUpdate=updateMaster(update,properties.playlists[0]);_playlistUpdate&&((update=_playlistUpdate).mediaGroups[type][group][label].playlists[0]=update.playlists[uri],noChanges=!1)}})),noChanges?null:update},generateSidxKey=function generateSidxKey(sidxInfo){var sidxByteRangeEnd=sidxInfo.byterange.offset+sidxInfo.byterange.length-1;return sidxInfo.uri+"-"+sidxInfo.byterange.offset+"-"+sidxByteRangeEnd},equivalentSidx=function equivalentSidx(a,b){return(Boolean(!a.map&&!b.map)||Boolean(a.map&&b.map&&a.map.byterange.offset===b.map.byterange.offset&&a.map.byterange.length===b.map.byterange.length))&&a.uri===b.uri&&a.byterange.offset===b.byterange.offset&&a.byterange.length===b.byterange.length},compareSidxEntry=function compareSidxEntry(playlists,oldSidxMapping){var newSidxMapping={};for(var uri in playlists){var currentSidxInfo=playlists[uri].sidx;if(currentSidxInfo){var key=generateSidxKey(currentSidxInfo);if(!oldSidxMapping[key])break;var savedSidxInfo=oldSidxMapping[key].sidxInfo;equivalentSidx(savedSidxInfo,currentSidxInfo)&&(newSidxMapping[key]=oldSidxMapping[key])}}return newSidxMapping},requestSidx_=function requestSidx_(sidxRange,playlist,xhr,options,finishProcessingFn){var sidxInfo={uri:resolveManifestRedirect(options.handleManifestRedirects,sidxRange.resolvedUri),byterange:sidxRange.byterange,playlist};return xhr(videojs$1.mergeOptions(sidxInfo,{responseType:"arraybuffer",headers:segmentXhrHeaders(sidxInfo)}),finishProcessingFn)},DashPlaylistLoader=function(_EventTarget){function DashPlaylistLoader(srcUrlOrPlaylist,hls){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},masterPlaylistLoader=arguments[3];video_es_classCallCheck(this,DashPlaylistLoader);var _this=video_es_possibleConstructorReturn(this,(DashPlaylistLoader.__proto__||Object.getPrototypeOf(DashPlaylistLoader)).call(this)),_options$withCredenti=options.withCredentials,withCredentials=void 0!==_options$withCredenti&&_options$withCredenti,_options$handleManife=options.handleManifestRedirects,handleManifestRedirects=void 0!==_options$handleManife&&_options$handleManife;if(_this.hls_=hls,_this.withCredentials=withCredentials,_this.handleManifestRedirects=handleManifestRedirects,!srcUrlOrPlaylist)throw new Error("A non-empty playlist URL or playlist is required");return _this.on("minimumUpdatePeriod",(function(){_this.refreshXml_()})),_this.on("mediaupdatetimeout",(function(){_this.refreshMedia_(_this.media().uri)})),_this.state="HAVE_NOTHING",_this.loadedPlaylists_={},"string"==typeof srcUrlOrPlaylist?(_this.srcUrl=srcUrlOrPlaylist,_this.sidxMapping_={},video_es_possibleConstructorReturn(_this)):(_this.setupChildLoader(masterPlaylistLoader,srcUrlOrPlaylist),_this)}return video_es_inherits(DashPlaylistLoader,_EventTarget),video_es_createClass(DashPlaylistLoader,[{key:"setupChildLoader",value:function setupChildLoader(masterPlaylistLoader,playlist){this.masterPlaylistLoader_=masterPlaylistLoader,this.childPlaylist_=playlist}},{key:"dispose",value:function dispose(){this.stopRequest(),this.loadedPlaylists_={},window_default().clearTimeout(this.minimumUpdatePeriodTimeout_),window_default().clearTimeout(this.mediaRequest_),window_default().clearTimeout(this.mediaUpdateTimeout)}},{key:"hasPendingRequest",value:function hasPendingRequest(){return this.request||this.mediaRequest_}},{key:"stopRequest",value:function stopRequest(){if(this.request){var oldRequest=this.request;this.request=null,oldRequest.onreadystatechange=null,oldRequest.abort()}}},{key:"sidxRequestFinished_",value:function sidxRequestFinished_(playlist,master,startingState,doneFn){var _this2=this;return function(err,request){if(_this2.request){if(_this2.request=null,err)return _this2.error={status:request.status,message:"DASH playlist request error at URL: "+playlist.uri,response:request.response,code:2},startingState&&(_this2.state=startingState),_this2.trigger("error"),doneFn(master,null);var bytes=new Uint8Array(request.response),sidx=mp4_inspector_default().parseSidx(bytes.subarray(8));return doneFn(master,sidx)}}}},{key:"media",value:function media(playlist){var _this3=this;if(!playlist)return this.media_;if("HAVE_NOTHING"===this.state)throw new Error("Cannot switch media playlist from "+this.state);var startingState=this.state;if("string"==typeof playlist){if(!this.master.playlists[playlist])throw new Error("Unknown playlist URI: "+playlist);playlist=this.master.playlists[playlist]}var mediaChange=!this.media_||playlist.uri!==this.media_.uri;if(mediaChange&&this.loadedPlaylists_[playlist.uri]&&this.loadedPlaylists_[playlist.uri].endList)return this.state="HAVE_METADATA",this.media_=playlist,void(mediaChange&&(this.trigger("mediachanging"),this.trigger("mediachange")));if(mediaChange)if(this.media_&&this.trigger("mediachanging"),playlist.sidx){var oldMaster=void 0,sidxMapping=void 0;this.masterPlaylistLoader_?(oldMaster=this.masterPlaylistLoader_.master,sidxMapping=this.masterPlaylistLoader_.sidxMapping_):(oldMaster=this.master,sidxMapping=this.sidxMapping_);var sidxKey=generateSidxKey(playlist.sidx);sidxMapping[sidxKey]={sidxInfo:playlist.sidx},this.request=requestSidx_(playlist.sidx,playlist,this.hls_.xhr,{handleManifestRedirects:this.handleManifestRedirects},this.sidxRequestFinished_(playlist,oldMaster,startingState,(function(newMaster,sidx){if(!newMaster||!sidx)throw new Error("failed to request sidx");sidxMapping[sidxKey].sidx=sidx,_this3.haveMetadata({startingState,playlist:newMaster.playlists[playlist.uri]})})))}else this.mediaRequest_=window_default().setTimeout(this.haveMetadata.bind(this,{startingState,playlist}),0)}},{key:"haveMetadata",value:function haveMetadata(_ref){var startingState=_ref.startingState,playlist=_ref.playlist;this.state="HAVE_METADATA",this.loadedPlaylists_[playlist.uri]=playlist,this.mediaRequest_=null,this.refreshMedia_(playlist.uri),"HAVE_MASTER"===startingState?this.trigger("loadedmetadata"):this.trigger("mediachange")}},{key:"pause",value:function pause(){this.stopRequest(),window_default().clearTimeout(this.mediaUpdateTimeout),window_default().clearTimeout(this.minimumUpdatePeriodTimeout_),"HAVE_NOTHING"===this.state&&(this.started=!1)}},{key:"load",value:function load(isFinalRendition){var _this4=this;window_default().clearTimeout(this.mediaUpdateTimeout),window_default().clearTimeout(this.minimumUpdatePeriodTimeout_);var media=this.media();if(isFinalRendition){var delay=media?media.targetDuration/2*1e3:5e3;this.mediaUpdateTimeout=window_default().setTimeout((function(){return _this4.load()}),delay)}else this.started?this.trigger("loadedplaylist"):this.start()}},{key:"parseMasterXml",value:function parseMasterXml(){var master=parse(this.masterXml_,{manifestUri:this.srcUrl,clientOffset:this.clientOffset_,sidxMapping:this.sidxMapping_});master.uri=this.srcUrl;for(var i=0;i<master.playlists.length;i++){var phonyUri="placeholder-uri-"+i;master.playlists[i].uri=phonyUri,master.playlists[phonyUri]=master.playlists[i]}return forEachMediaGroup(master,(function(properties,mediaType,groupKey,labelKey){if(properties.playlists&&properties.playlists.length){var _phonyUri="placeholder-uri-"+mediaType+"-"+groupKey+"-"+labelKey;properties.playlists[0].uri=_phonyUri,master.playlists[_phonyUri]=properties.playlists[0]}})),setupMediaPlaylists(master),resolveMediaGroupUris(master),master}},{key:"start",value:function start(){var _this5=this;this.started=!0,this.masterPlaylistLoader_?this.mediaRequest_=window_default().setTimeout(this.haveMaster_.bind(this),0):this.request=this.hls_.xhr({uri:this.srcUrl,withCredentials:this.withCredentials},(function(error,req){if(_this5.request){if(_this5.request=null,error)return _this5.error={status:req.status,message:"DASH playlist request error at URL: "+_this5.srcUrl,responseText:req.responseText,code:2},"HAVE_NOTHING"===_this5.state&&(_this5.started=!1),_this5.trigger("error");_this5.masterXml_=req.responseText,req.responseHeaders&&req.responseHeaders.date?_this5.masterLoaded_=Date.parse(req.responseHeaders.date):_this5.masterLoaded_=Date.now(),_this5.srcUrl=resolveManifestRedirect(_this5.handleManifestRedirects,_this5.srcUrl,req),_this5.syncClientServerClock_(_this5.onClientServerClockSync_.bind(_this5))}}))}},{key:"syncClientServerClock_",value:function syncClientServerClock_(done){var _this6=this,utcTiming=parseUTCTiming(this.masterXml_);return null===utcTiming?(this.clientOffset_=this.masterLoaded_-Date.now(),done()):"DIRECT"===utcTiming.method?(this.clientOffset_=utcTiming.value-Date.now(),done()):void(this.request=this.hls_.xhr({uri:video_es_resolveUrl(this.srcUrl,utcTiming.value),method:utcTiming.method,withCredentials:this.withCredentials},(function(error,req){if(_this6.request){if(error)return _this6.clientOffset_=_this6.masterLoaded_-Date.now(),done();var serverTime=void 0;serverTime="HEAD"===utcTiming.method?req.responseHeaders&&req.responseHeaders.date?Date.parse(req.responseHeaders.date):_this6.masterLoaded_:Date.parse(req.responseText),_this6.clientOffset_=serverTime-Date.now(),done()}})))}},{key:"haveMaster_",value:function haveMaster_(){this.state="HAVE_MASTER",this.mediaRequest_=null,this.masterPlaylistLoader_?this.media_||this.media(this.childPlaylist_):(this.master=this.parseMasterXml(),this.trigger("loadedplaylist"))}},{key:"onClientServerClockSync_",value:function onClientServerClockSync_(){var _this7=this;this.haveMaster_(),this.hasPendingRequest()||this.media_||this.media(this.master.playlists[0]),this.master&&this.master.minimumUpdatePeriod&&(this.minimumUpdatePeriodTimeout_=window_default().setTimeout((function(){_this7.trigger("minimumUpdatePeriod")}),this.master.minimumUpdatePeriod))}},{key:"refreshXml_",value:function refreshXml_(){var _this8=this;this.request=this.hls_.xhr({uri:this.srcUrl,withCredentials:this.withCredentials},(function(error,req){if(_this8.request){if(_this8.request=null,error)return _this8.error={status:req.status,message:"DASH playlist request error at URL: "+_this8.srcUrl,responseText:req.responseText,code:2},"HAVE_NOTHING"===_this8.state&&(_this8.started=!1),_this8.trigger("error");_this8.masterXml_=req.responseText,_this8.sidxMapping_=function filterChangedSidxMappings(masterXml,srcUrl,clientOffset,oldSidxMapping){var master=parse(masterXml,{manifestUri:srcUrl,clientOffset}),mediaGroupSidx=compareSidxEntry(master.playlists,oldSidxMapping);return forEachMediaGroup(master,(function(properties,mediaType,groupKey,labelKey){if(properties.playlists&&properties.playlists.length){var playlists=properties.playlists;mediaGroupSidx=mergeOptions$2(mediaGroupSidx,compareSidxEntry(playlists,oldSidxMapping))}})),mediaGroupSidx}(_this8.masterXml_,_this8.srcUrl,_this8.clientOffset_,_this8.sidxMapping_);var master=_this8.parseMasterXml(),updatedMaster=updateMaster$1(_this8.master,master),currentSidxInfo=_this8.media().sidx;if(updatedMaster)if(currentSidxInfo){var sidxKey=generateSidxKey(currentSidxInfo);if(!_this8.sidxMapping_[sidxKey]){var playlist=_this8.media();_this8.request=requestSidx_(playlist.sidx,playlist,_this8.hls_.xhr,{handleManifestRedirects:_this8.handleManifestRedirects},_this8.sidxRequestFinished_(playlist,master,_this8.state,(function(newMaster,sidx){if(!newMaster||!sidx)throw new Error("failed to request sidx on minimumUpdatePeriod");_this8.sidxMapping_[sidxKey].sidx=sidx,_this8.minimumUpdatePeriodTimeout_=window_default().setTimeout((function(){_this8.trigger("minimumUpdatePeriod")}),_this8.master.minimumUpdatePeriod),_this8.refreshMedia_(_this8.media().uri)})))}}else _this8.master=updatedMaster;_this8.minimumUpdatePeriodTimeout_=window_default().setTimeout((function(){_this8.trigger("minimumUpdatePeriod")}),_this8.master.minimumUpdatePeriod)}}))}},{key:"refreshMedia_",value:function refreshMedia_(mediaUri){var _this9=this;if(!mediaUri)throw new Error("refreshMedia_ must take a media uri");var oldMaster=void 0,newMaster=void 0;this.masterPlaylistLoader_?(oldMaster=this.masterPlaylistLoader_.master,newMaster=this.masterPlaylistLoader_.parseMasterXml()):(oldMaster=this.master,newMaster=this.parseMasterXml());var updatedMaster=updateMaster$1(oldMaster,newMaster);updatedMaster?(this.masterPlaylistLoader_?this.masterPlaylistLoader_.master=updatedMaster:this.master=updatedMaster,this.media_=updatedMaster.playlists[mediaUri]):(this.media_=newMaster.playlists[mediaUri],this.trigger("playlistunchanged")),this.media().endList||(this.mediaUpdateTimeout=window_default().setTimeout((function(){_this9.trigger("mediaupdatetimeout")}),refreshDelay(this.media(),!!updatedMaster))),this.trigger("loadedplaylist")}}]),DashPlaylistLoader}(EventTarget$1$1),logger=function logger(source){return videojs$1.log.debug?videojs$1.log.debug.bind(videojs$1,"VHS:",source+" >"):function(){}};function noop(){}var SourceUpdater=function(){function SourceUpdater(mediaSource,mimeType,type,sourceBufferEmitter){video_es_classCallCheck(this,SourceUpdater),this.callbacks_=[],this.pendingCallback_=null,this.timestampOffset_=0,this.mediaSource=mediaSource,this.processedAppend_=!1,this.type_=type,this.mimeType_=mimeType,this.logger_=logger("SourceUpdater["+type+"]["+mimeType+"]"),"closed"===mediaSource.readyState?mediaSource.addEventListener("sourceopen",this.createSourceBuffer_.bind(this,mimeType,sourceBufferEmitter)):this.createSourceBuffer_(mimeType,sourceBufferEmitter)}return video_es_createClass(SourceUpdater,[{key:"createSourceBuffer_",value:function createSourceBuffer_(mimeType,sourceBufferEmitter){var _this=this;this.sourceBuffer_=this.mediaSource.addSourceBuffer(mimeType),this.logger_("created SourceBuffer"),sourceBufferEmitter&&(sourceBufferEmitter.trigger("sourcebufferadded"),this.mediaSource.sourceBuffers.length<2)?sourceBufferEmitter.on("sourcebufferadded",(function(){_this.start_()})):this.start_()}},{key:"start_",value:function start_(){var _this2=this;this.started_=!0,this.onUpdateendCallback_=function(){var pendingCallback=_this2.pendingCallback_;_this2.pendingCallback_=null,_this2.sourceBuffer_.removing=!1,_this2.logger_("buffered ["+printableRange(_this2.buffered())+"]"),pendingCallback&&pendingCallback(),_this2.runCallback_()},this.sourceBuffer_.addEventListener("updateend",this.onUpdateendCallback_),this.runCallback_()}},{key:"abort",value:function abort(done){var _this3=this;this.processedAppend_&&this.queueCallback_((function(){_this3.sourceBuffer_.abort()}),done)}},{key:"appendBuffer",value:function appendBuffer(config,done){var _this4=this;this.processedAppend_=!0,this.queueCallback_((function(){config.videoSegmentTimingInfoCallback&&_this4.sourceBuffer_.addEventListener("videoSegmentTimingInfo",config.videoSegmentTimingInfoCallback),_this4.sourceBuffer_.appendBuffer(config.bytes)}),(function(){config.videoSegmentTimingInfoCallback&&_this4.sourceBuffer_.removeEventListener("videoSegmentTimingInfo",config.videoSegmentTimingInfoCallback),done()}))}},{key:"buffered",value:function buffered(){return this.sourceBuffer_?this.sourceBuffer_.buffered:videojs$1.createTimeRanges()}},{key:"remove",value:function remove(start,end){var _this5=this,done=arguments.length>2&&void 0!==arguments[2]?arguments[2]:noop;this.processedAppend_&&this.queueCallback_((function(){_this5.logger_("remove ["+start+" => "+end+"]"),_this5.sourceBuffer_.removing=!0,_this5.sourceBuffer_.remove(start,end)}),done)}},{key:"updating",value:function updating(){return!this.sourceBuffer_||this.sourceBuffer_.updating||!!this.pendingCallback_&&this.pendingCallback_!==noop}},{key:"timestampOffset",value:function timestampOffset(offset){var _this6=this;return void 0!==offset&&(this.queueCallback_((function(){_this6.sourceBuffer_.timestampOffset=offset,_this6.runCallback_()})),this.timestampOffset_=offset),this.timestampOffset_}},{key:"queueCallback_",value:function queueCallback_(callback,done){this.callbacks_.push([callback.bind(this),done]),this.runCallback_()}},{key:"runCallback_",value:function runCallback_(){var callbacks=void 0;!this.updating()&&this.callbacks_.length&&this.started_&&(callbacks=this.callbacks_.shift(),this.pendingCallback_=callbacks[1],callbacks[0]())}},{key:"dispose",value:function dispose(){var _this7=this,disposeFn=function disposeFn(){_this7.sourceBuffer_&&"open"===_this7.mediaSource.readyState&&_this7.sourceBuffer_.abort(),_this7.sourceBuffer_.removeEventListener("updateend",disposeFn)};this.sourceBuffer_.removeEventListener("updateend",this.onUpdateendCallback_),this.sourceBuffer_.removing?this.sourceBuffer_.addEventListener("updateend",disposeFn):disposeFn()}}]),SourceUpdater}(),Config={GOAL_BUFFER_LENGTH:30,MAX_GOAL_BUFFER_LENGTH:60,GOAL_BUFFER_LENGTH_RATE:1,INITIAL_BANDWIDTH:4194304,BANDWIDTH_VARIANCE:1.2,BUFFER_LOW_WATER_LINE:0,MAX_BUFFER_LOW_WATER_LINE:30,BUFFER_LOW_WATER_LINE_RATE:1},REQUEST_ERRORS_FAILURE=2,REQUEST_ERRORS_TIMEOUT=-101,REQUEST_ERRORS_ABORTED=-102,abortAll=function abortAll(activeXhrs){activeXhrs.forEach((function(xhr){xhr.abort()}))},handleErrors=function handleErrors(error,request){return request.timedout?{status:request.status,message:"HLS request timed-out at URL: "+request.uri,code:REQUEST_ERRORS_TIMEOUT,xhr:request}:request.aborted?{status:request.status,message:"HLS request aborted at URL: "+request.uri,code:REQUEST_ERRORS_ABORTED,xhr:request}:error?{status:request.status,message:"HLS request errored at URL: "+request.uri,code:REQUEST_ERRORS_FAILURE,xhr:request}:null},waitForCompletion=function waitForCompletion(activeXhrs,decrypter,doneFn){var count=0,didError=!1;return function(error,segment){if(!didError)return error?(didError=!0,abortAll(activeXhrs),doneFn(error,segment)):(count+=1)===activeXhrs.length?(segment.endOfAllRequests=Date.now(),segment.encryptedBytes?function decryptSegment(decrypter,segment,doneFn){decrypter.addEventListener("message",(function decryptionHandler(event){if(event.data.source===segment.requestId){decrypter.removeEventListener("message",decryptionHandler);var decrypted=event.data.decrypted;return segment.bytes=new Uint8Array(decrypted.bytes,decrypted.byteOffset,decrypted.byteLength),doneFn(null,segment)}}));var keyBytes=void 0;keyBytes=segment.key.bytes.slice?segment.key.bytes.slice():new Uint32Array(Array.prototype.slice.call(segment.key.bytes)),decrypter.postMessage(createTransferableMessage({source:segment.requestId,encrypted:segment.encryptedBytes,key:keyBytes,iv:segment.key.iv}),[segment.encryptedBytes.buffer,keyBytes.buffer])}(decrypter,segment,doneFn):doneFn(null,segment)):void 0}},handleProgress=function handleProgress(segment,progressFn){return function(event){return segment.stats=videojs$1.mergeOptions(segment.stats,function getProgressStats(progressEvent){var request=progressEvent.target,stats={bandwidth:1/0,bytesReceived:0,roundTripTime:Date.now()-request.requestTime||0};return stats.bytesReceived=progressEvent.loaded,stats.bandwidth=Math.floor(stats.bytesReceived/stats.roundTripTime*8*1e3),stats}(event)),!segment.stats.firstBytesReceivedAt&&segment.stats.bytesReceived&&(segment.stats.firstBytesReceivedAt=Date.now()),progressFn(event,segment)}},mediaSegmentRequest=function mediaSegmentRequest(xhr,xhrOptions,decryptionWorker,captionParser,segment,progressFn,doneFn){var activeXhrs=[],finishProcessingFn=waitForCompletion(activeXhrs,decryptionWorker,doneFn);if(segment.key&&!segment.key.bytes){var keyRequestOptions=videojs$1.mergeOptions(xhrOptions,{uri:segment.key.resolvedUri,responseType:"arraybuffer"}),keyRequestCallback=function handleKeyResponse(segment,finishProcessingFn){return function(error,request){var response=request.response,errorObj=handleErrors(error,request);if(errorObj)return finishProcessingFn(errorObj,segment);if(16!==response.byteLength)return finishProcessingFn({status:request.status,message:"Invalid HLS key at URL: "+request.uri,code:REQUEST_ERRORS_FAILURE,xhr:request},segment);var view=new DataView(response);return segment.key.bytes=new Uint32Array([view.getUint32(0),view.getUint32(4),view.getUint32(8),view.getUint32(12)]),finishProcessingFn(null,segment)}}(segment,finishProcessingFn),keyXhr=xhr(keyRequestOptions,keyRequestCallback);activeXhrs.push(keyXhr)}if(segment.map&&!segment.map.bytes){var initSegmentOptions=videojs$1.mergeOptions(xhrOptions,{uri:segment.map.resolvedUri,responseType:"arraybuffer",headers:segmentXhrHeaders(segment.map)}),initSegmentRequestCallback=function handleInitSegmentResponse(segment,captionParser,finishProcessingFn){return function(error,request){var response=request.response,errorObj=handleErrors(error,request);return errorObj?finishProcessingFn(errorObj,segment):0===response.byteLength?finishProcessingFn({status:request.status,message:"Empty HLS segment content at URL: "+request.uri,code:REQUEST_ERRORS_FAILURE,xhr:request},segment):(segment.map.bytes=new Uint8Array(request.response),captionParser&&!captionParser.isInitialized()&&captionParser.init(),segment.map.timescales=probe_default().timescale(segment.map.bytes),segment.map.videoTrackIds=probe_default().videoTrackIds(segment.map.bytes),finishProcessingFn(null,segment))}}(segment,captionParser,finishProcessingFn),initSegmentXhr=xhr(initSegmentOptions,initSegmentRequestCallback);activeXhrs.push(initSegmentXhr)}var segmentRequestOptions=videojs$1.mergeOptions(xhrOptions,{uri:segment.resolvedUri,responseType:"arraybuffer",headers:segmentXhrHeaders(segment)}),segmentRequestCallback=function handleSegmentResponse(segment,captionParser,finishProcessingFn){return function(error,request){var response=request.response,errorObj=handleErrors(error,request),parsed=void 0;return errorObj?finishProcessingFn(errorObj,segment):0===response.byteLength?finishProcessingFn({status:request.status,message:"Empty HLS segment content at URL: "+request.uri,code:REQUEST_ERRORS_FAILURE,xhr:request},segment):(segment.stats=function getRequestStats(request){return{bandwidth:request.bandwidth,bytesReceived:request.bytesReceived||0,roundTripTime:request.roundTripTime||0}}(request),segment.key?segment.encryptedBytes=new Uint8Array(request.response):segment.bytes=new Uint8Array(request.response),captionParser&&segment.map&&segment.map.bytes&&(captionParser.isInitialized()||captionParser.init(),(parsed=captionParser.parse(segment.bytes,segment.map.videoTrackIds,segment.map.timescales))&&parsed.captions&&(segment.captionStreams=parsed.captionStreams,segment.fmp4Captions=parsed.captions)),finishProcessingFn(null,segment))}}(segment,captionParser,finishProcessingFn),segmentXhr=xhr(segmentRequestOptions,segmentRequestCallback);return segmentXhr.addEventListener("progress",handleProgress(segment,progressFn)),activeXhrs.push(segmentXhr),function(){return abortAll(activeXhrs)}},safeGetComputedStyle=function safeGetComputedStyle(el,property){var result;return el&&(result=window_default().getComputedStyle(el))?result[property]:""},stableSort=function stableSort(array,sortFn){var newArray=array.slice();array.sort((function(left,right){var cmp=sortFn(left,right);return 0===cmp?newArray.indexOf(left)-newArray.indexOf(right):cmp}))},comparePlaylistBandwidth=function comparePlaylistBandwidth(left,right){var leftBandwidth=void 0,rightBandwidth=void 0;return left.attributes.BANDWIDTH&&(leftBandwidth=left.attributes.BANDWIDTH),leftBandwidth=leftBandwidth||window_default().Number.MAX_VALUE,right.attributes.BANDWIDTH&&(rightBandwidth=right.attributes.BANDWIDTH),leftBandwidth-(rightBandwidth=rightBandwidth||window_default().Number.MAX_VALUE)},finite=function finite(num){return"number"==typeof num&&isFinite(num)},SegmentLoader=function(_videojs$EventTarget){function SegmentLoader(settings){video_es_classCallCheck(this,SegmentLoader);var _this=video_es_possibleConstructorReturn(this,(SegmentLoader.__proto__||Object.getPrototypeOf(SegmentLoader)).call(this));if(!settings)throw new TypeError("Initialization settings are required");if("function"!=typeof settings.currentTime)throw new TypeError("No currentTime getter specified");if(!settings.mediaSource)throw new TypeError("No MediaSource specified");return _this.bandwidth=settings.bandwidth,_this.throughput={rate:0,count:0},_this.roundTrip=NaN,_this.resetStats_(),_this.mediaIndex=null,_this.hasPlayed_=settings.hasPlayed,_this.currentTime_=settings.currentTime,_this.seekable_=settings.seekable,_this.seeking_=settings.seeking,_this.duration_=settings.duration,_this.mediaSource_=settings.mediaSource,_this.hls_=settings.hls,_this.loaderType_=settings.loaderType,_this.startingMedia_=void 0,_this.segmentMetadataTrack_=settings.segmentMetadataTrack,_this.goalBufferLength_=settings.goalBufferLength,_this.sourceType_=settings.sourceType,_this.inbandTextTracks_=settings.inbandTextTracks,_this.state_="INIT",_this.checkBufferTimeout_=null,_this.error_=void 0,_this.currentTimeline_=-1,_this.pendingSegment_=null,_this.mimeType_=null,_this.sourceUpdater_=null,_this.xhrOptions_=null,_this.activeInitSegmentId_=null,_this.initSegments_={},_this.cacheEncryptionKeys_=settings.cacheEncryptionKeys,_this.keyCache_={},"main"===_this.loaderType_?_this.captionParser_=new(caption_parser_default()):_this.captionParser_=null,_this.decrypter_=settings.decrypter,_this.syncController_=settings.syncController,_this.syncPoint_={segmentIndex:0,time:0},_this.syncController_.on("syncinfoupdate",(function(){return _this.trigger("syncinfoupdate")})),_this.mediaSource_.addEventListener("sourceopen",(function(){return _this.ended_=!1})),_this.fetchAtBuffer_=!1,_this.logger_=logger("SegmentLoader["+_this.loaderType_+"]"),Object.defineProperty(_this,"state",{get:function get$$1(){return this.state_},set:function set$$1(newState){newState!==this.state_&&(this.logger_(this.state_+" -> "+newState),this.state_=newState)}}),_this}return video_es_inherits(SegmentLoader,_videojs$EventTarget),video_es_createClass(SegmentLoader,[{key:"resetStats_",value:function resetStats_(){this.mediaBytesTransferred=0,this.mediaRequests=0,this.mediaRequestsAborted=0,this.mediaRequestsTimedout=0,this.mediaRequestsErrored=0,this.mediaTransferDuration=0,this.mediaSecondsLoaded=0}},{key:"dispose",value:function dispose(){this.state="DISPOSED",this.pause(),this.abort_(),this.sourceUpdater_&&this.sourceUpdater_.dispose(),this.resetStats_(),this.captionParser_&&this.captionParser_.reset()}},{key:"abort",value:function abort(){"WAITING"===this.state?(this.abort_(),this.state="READY",this.paused()||this.monitorBuffer_()):this.pendingSegment_&&(this.pendingSegment_=null)}},{key:"abort_",value:function abort_(){this.pendingSegment_&&this.pendingSegment_.abortRequests(),this.pendingSegment_=null}},{key:"error",value:function error(_error){return void 0!==_error&&(this.error_=_error),this.pendingSegment_=null,this.error_}},{key:"endOfStream",value:function endOfStream(){this.ended_=!0,this.pause(),this.trigger("ended")}},{key:"buffered_",value:function buffered_(){return this.sourceUpdater_?this.sourceUpdater_.buffered():videojs$1.createTimeRanges()}},{key:"initSegment",value:function initSegment(map){var set$$1=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!map)return null;var id=initSegmentId(map),storedMap=this.initSegments_[id];return set$$1&&!storedMap&&map.bytes&&(this.initSegments_[id]=storedMap={resolvedUri:map.resolvedUri,byterange:map.byterange,bytes:map.bytes,timescales:map.timescales,videoTrackIds:map.videoTrackIds}),storedMap||map}},{key:"segmentKey",value:function segmentKey(key){var set$$1=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!key)return null;var id=segmentKeyId(key),storedKey=this.keyCache_[id];this.cacheEncryptionKeys_&&set$$1&&!storedKey&&key.bytes&&(this.keyCache_[id]=storedKey={resolvedUri:key.resolvedUri,bytes:key.bytes});var result={resolvedUri:(storedKey||key).resolvedUri};return storedKey&&(result.bytes=storedKey.bytes),result}},{key:"couldBeginLoading_",value:function couldBeginLoading_(){return this.playlist_&&(this.sourceUpdater_||this.mimeType_&&"INIT"===this.state)&&!this.paused()}},{key:"load",value:function load(){if(this.monitorBuffer_(),this.playlist_){if(this.syncController_.setDateTimeMapping(this.playlist_),"INIT"===this.state&&this.couldBeginLoading_())return this.init_();!this.couldBeginLoading_()||"READY"!==this.state&&"INIT"!==this.state||(this.state="READY")}}},{key:"init_",value:function init_(){return this.state="READY",this.sourceUpdater_=new SourceUpdater(this.mediaSource_,this.mimeType_,this.loaderType_,this.sourceBufferEmitter_),this.resetEverything(),this.monitorBuffer_()}},{key:"playlist",value:function playlist(newPlaylist){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(newPlaylist){var oldPlaylist=this.playlist_,segmentInfo=this.pendingSegment_;this.playlist_=newPlaylist,this.xhrOptions_=options,this.hasPlayed_()||(newPlaylist.syncInfo={mediaSequence:newPlaylist.mediaSequence,time:0});var oldId=null;if(oldPlaylist&&(oldPlaylist.id?oldId=oldPlaylist.id:oldPlaylist.uri&&(oldId=oldPlaylist.uri)),this.logger_("playlist update ["+oldId+" => "+(newPlaylist.id||newPlaylist.uri)+"]"),this.trigger("syncinfoupdate"),"INIT"===this.state&&this.couldBeginLoading_())return this.init_();if(oldPlaylist&&oldPlaylist.uri===newPlaylist.uri){var mediaSequenceDiff=newPlaylist.mediaSequence-oldPlaylist.mediaSequence;this.logger_("live window shift ["+mediaSequenceDiff+"]"),null!==this.mediaIndex&&(this.mediaIndex-=mediaSequenceDiff),segmentInfo&&(segmentInfo.mediaIndex-=mediaSequenceDiff,segmentInfo.mediaIndex>=0&&(segmentInfo.segment=newPlaylist.segments[segmentInfo.mediaIndex])),this.syncController_.saveExpiredSegmentInfo(oldPlaylist,newPlaylist)}else null!==this.mediaIndex&&this.resyncLoader()}}},{key:"pause",value:function pause(){this.checkBufferTimeout_&&(window_default().clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=null)}},{key:"paused",value:function paused(){return null===this.checkBufferTimeout_}},{key:"mimeType",value:function mimeType(_mimeType,sourceBufferEmitter){this.mimeType_||(this.mimeType_=_mimeType,this.sourceBufferEmitter_=sourceBufferEmitter,"INIT"===this.state&&this.couldBeginLoading_()&&this.init_())}},{key:"resetEverything",value:function resetEverything(done){this.ended_=!1,this.resetLoader(),this.remove(0,this.duration_(),done),this.captionParser_&&this.captionParser_.clearAllCaptions(),this.trigger("reseteverything")}},{key:"resetLoader",value:function resetLoader(){this.fetchAtBuffer_=!1,this.resyncLoader()}},{key:"resyncLoader",value:function resyncLoader(){this.mediaIndex=null,this.syncPoint_=null,this.abort()}},{key:"remove",value:function remove(start,end,done){if(this.sourceUpdater_&&this.sourceUpdater_.remove(start,end,done),removeCuesFromTrack(start,end,this.segmentMetadataTrack_),this.inbandTextTracks_)for(var id in this.inbandTextTracks_)removeCuesFromTrack(start,end,this.inbandTextTracks_[id])}},{key:"monitorBuffer_",value:function monitorBuffer_(){this.checkBufferTimeout_&&window_default().clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=window_default().setTimeout(this.monitorBufferTick_.bind(this),1)}},{key:"monitorBufferTick_",value:function monitorBufferTick_(){"READY"===this.state&&this.fillBuffer_(),this.checkBufferTimeout_&&window_default().clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=window_default().setTimeout(this.monitorBufferTick_.bind(this),500)}},{key:"fillBuffer_",value:function fillBuffer_(){if(!this.sourceUpdater_.updating()){this.syncPoint_||(this.syncPoint_=this.syncController_.getSyncPoint(this.playlist_,this.duration_(),this.currentTimeline_,this.currentTime_()));var segmentInfo=this.checkBuffer_(this.buffered_(),this.playlist_,this.mediaIndex,this.hasPlayed_(),this.currentTime_(),this.syncPoint_);segmentInfo&&(this.isEndOfStream_(segmentInfo.mediaIndex)?this.endOfStream():(segmentInfo.mediaIndex!==this.playlist_.segments.length-1||"ended"!==this.mediaSource_.readyState||this.seeking_())&&(segmentInfo.timeline!==this.currentTimeline_&&(this.syncController_.reset(),segmentInfo.timestampOffset=segmentInfo.startOfSegment,this.captionParser_&&this.captionParser_.clearAllCaptions()),this.loadSegment_(segmentInfo)))}}},{key:"isEndOfStream_",value:function isEndOfStream_(mediaIndex){return function detectEndOfStream(playlist,mediaSource,segmentIndex){if(!playlist||!mediaSource)return!1;var appendedLastSegment=segmentIndex===playlist.segments.length;return playlist.endList&&"open"===mediaSource.readyState&&appendedLastSegment}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.playlist_,this.mediaSource_,mediaIndex)&&!this.sourceUpdater_.updating()}},{key:"checkBuffer_",value:function checkBuffer_(buffered,playlist,mediaIndex,hasPlayed,currentTime,syncPoint){var lastBufferedEnd=0,startOfSegment=void 0;buffered.length&&(lastBufferedEnd=buffered.end(buffered.length-1));var bufferedTime=Math.max(0,lastBufferedEnd-currentTime);if(!playlist.segments.length)return null;if(bufferedTime>=this.goalBufferLength_())return null;if(!hasPlayed&&bufferedTime>=1)return null;if(null===syncPoint)return mediaIndex=this.getSyncSegmentCandidate_(playlist),this.generateSegmentInfo_(playlist,mediaIndex,null,!0);if(null!==mediaIndex){playlist.segments[mediaIndex];return startOfSegment=lastBufferedEnd,this.generateSegmentInfo_(playlist,mediaIndex+1,startOfSegment,!1)}if(this.fetchAtBuffer_){var mediaSourceInfo=Playlist.getMediaInfoForTime(playlist,lastBufferedEnd,syncPoint.segmentIndex,syncPoint.time);mediaIndex=mediaSourceInfo.mediaIndex,startOfSegment=mediaSourceInfo.startTime}else{var _mediaSourceInfo=Playlist.getMediaInfoForTime(playlist,currentTime,syncPoint.segmentIndex,syncPoint.time);mediaIndex=_mediaSourceInfo.mediaIndex,startOfSegment=_mediaSourceInfo.startTime}return this.generateSegmentInfo_(playlist,mediaIndex,startOfSegment,!1)}},{key:"getSyncSegmentCandidate_",value:function getSyncSegmentCandidate_(playlist){var _this2=this;if(-1===this.currentTimeline_)return 0;var segmentIndexArray=playlist.segments.map((function(s,i){return{timeline:s.timeline,segmentIndex:i}})).filter((function(s){return s.timeline===_this2.currentTimeline_}));return segmentIndexArray.length?segmentIndexArray[Math.min(segmentIndexArray.length-1,1)].segmentIndex:Math.max(playlist.segments.length-1,0)}},{key:"generateSegmentInfo_",value:function generateSegmentInfo_(playlist,mediaIndex,startOfSegment,isSyncRequest){if(mediaIndex<0||mediaIndex>=playlist.segments.length)return null;var segment=playlist.segments[mediaIndex];return{requestId:"segment-loader-"+Math.random(),uri:segment.resolvedUri,mediaIndex,isSyncRequest,startOfSegment,playlist,bytes:null,encryptedBytes:null,timestampOffset:null,timeline:segment.timeline,duration:segment.duration,segment}}},{key:"abortRequestEarly_",value:function abortRequestEarly_(stats){if(this.hls_.tech_.paused()||!this.xhrOptions_.timeout||!this.playlist_.attributes.BANDWIDTH)return!1;if(Date.now()-(stats.firstBytesReceivedAt||Date.now())<1e3)return!1;var currentTime=this.currentTime_(),measuredBandwidth=stats.bandwidth,segmentDuration=this.pendingSegment_.duration,requestTimeRemaining=Playlist.estimateSegmentRequestTime(segmentDuration,measuredBandwidth,this.playlist_,stats.bytesReceived),timeUntilRebuffer$$1=function timeUntilRebuffer(buffered,currentTime){var playbackRate=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return((buffered.length?buffered.end(buffered.length-1):0)-currentTime)/playbackRate}(this.buffered_(),currentTime,this.hls_.tech_.playbackRate())-1;if(requestTimeRemaining<=timeUntilRebuffer$$1)return!1;var switchCandidate=function minRebufferMaxBandwidthSelector(settings){var master=settings.master,currentTime=settings.currentTime,bandwidth=settings.bandwidth,duration$$1=settings.duration,segmentDuration=settings.segmentDuration,timeUntilRebuffer=settings.timeUntilRebuffer,currentTimeline=settings.currentTimeline,syncController=settings.syncController,compatiblePlaylists=master.playlists.filter((function(playlist){return!Playlist.isIncompatible(playlist)})),enabledPlaylists=compatiblePlaylists.filter(Playlist.isEnabled);enabledPlaylists.length||(enabledPlaylists=compatiblePlaylists.filter((function(playlist){return!Playlist.isDisabled(playlist)})));var rebufferingEstimates=enabledPlaylists.filter(Playlist.hasAttribute.bind(null,"BANDWIDTH")).map((function(playlist){var numRequests=syncController.getSyncPoint(playlist,duration$$1,currentTimeline,currentTime)?1:2;return{playlist,rebufferingImpact:Playlist.estimateSegmentRequestTime(segmentDuration,bandwidth,playlist)*numRequests-timeUntilRebuffer}})),noRebufferingPlaylists=rebufferingEstimates.filter((function(estimate){return estimate.rebufferingImpact<=0}));return stableSort(noRebufferingPlaylists,(function(a,b){return comparePlaylistBandwidth(b.playlist,a.playlist)})),noRebufferingPlaylists.length?noRebufferingPlaylists[0]:(stableSort(rebufferingEstimates,(function(a,b){return a.rebufferingImpact-b.rebufferingImpact})),rebufferingEstimates[0]||null)}({master:this.hls_.playlists.master,currentTime,bandwidth:measuredBandwidth,duration:this.duration_(),segmentDuration,timeUntilRebuffer:timeUntilRebuffer$$1,currentTimeline:this.currentTimeline_,syncController:this.syncController_});if(switchCandidate){var timeSavedBySwitching=requestTimeRemaining-timeUntilRebuffer$$1-switchCandidate.rebufferingImpact,minimumTimeSaving=.5;return timeUntilRebuffer$$1<=.03333333333333333&&(minimumTimeSaving=1),!switchCandidate.playlist||switchCandidate.playlist.uri===this.playlist_.uri||timeSavedBySwitching<minimumTimeSaving?!1:(this.bandwidth=switchCandidate.playlist.attributes.BANDWIDTH*Config.BANDWIDTH_VARIANCE+1,this.abort(),this.trigger("earlyabort"),!0)}}},{key:"handleProgress_",value:function handleProgress_(event,simpleSegment){this.pendingSegment_&&simpleSegment.requestId===this.pendingSegment_.requestId&&!this.abortRequestEarly_(simpleSegment.stats)&&this.trigger("progress")}},{key:"loadSegment_",value:function loadSegment_(segmentInfo){this.state="WAITING",this.pendingSegment_=segmentInfo,this.trimBackBuffer_(segmentInfo),segmentInfo.abortRequests=mediaSegmentRequest(this.hls_.xhr,this.xhrOptions_,this.decrypter_,this.captionParser_,this.createSimplifiedSegmentObj_(segmentInfo),this.handleProgress_.bind(this),this.segmentRequestFinished_.bind(this))}},{key:"trimBackBuffer_",value:function trimBackBuffer_(segmentInfo){var removeToTime=function safeBackBufferTrimTime(seekable$$1,currentTime,targetDuration){var removeToTime=void 0;return removeToTime=seekable$$1.length&&seekable$$1.start(0)>0&&seekable$$1.start(0)<currentTime?seekable$$1.start(0):currentTime-30,Math.min(removeToTime,currentTime-targetDuration)}(this.seekable_(),this.currentTime_(),this.playlist_.targetDuration||10);removeToTime>0&&this.remove(0,removeToTime)}},{key:"createSimplifiedSegmentObj_",value:function createSimplifiedSegmentObj_(segmentInfo){var segment=segmentInfo.segment,simpleSegment={resolvedUri:segment.resolvedUri,byterange:segment.byterange,requestId:segmentInfo.requestId};if(segment.key){var iv=segment.key.iv||new Uint32Array([0,0,0,segmentInfo.mediaIndex+segmentInfo.playlist.mediaSequence]);simpleSegment.key=this.segmentKey(segment.key),simpleSegment.key.iv=iv}return segment.map&&(simpleSegment.map=this.initSegment(segment.map)),simpleSegment}},{key:"segmentRequestFinished_",value:function segmentRequestFinished_(error,simpleSegment){if(this.mediaRequests+=1,simpleSegment.stats&&(this.mediaBytesTransferred+=simpleSegment.stats.bytesReceived,this.mediaTransferDuration+=simpleSegment.stats.roundTripTime),this.pendingSegment_){if(simpleSegment.requestId===this.pendingSegment_.requestId){if(error)return this.pendingSegment_=null,this.state="READY",error.code===REQUEST_ERRORS_ABORTED?void(this.mediaRequestsAborted+=1):(this.pause(),error.code===REQUEST_ERRORS_TIMEOUT?(this.mediaRequestsTimedout+=1,this.bandwidth=1,this.roundTrip=NaN,void this.trigger("bandwidthupdate")):(this.mediaRequestsErrored+=1,this.error(error),void this.trigger("error")));this.bandwidth=simpleSegment.stats.bandwidth,this.roundTrip=simpleSegment.stats.roundTripTime,simpleSegment.map&&(simpleSegment.map=this.initSegment(simpleSegment.map,!0)),simpleSegment.key&&this.segmentKey(simpleSegment.key,!0),this.processSegmentResponse_(simpleSegment)}}else this.mediaRequestsAborted+=1}},{key:"processSegmentResponse_",value:function processSegmentResponse_(simpleSegment){var segmentInfo=this.pendingSegment_;segmentInfo.bytes=simpleSegment.bytes,simpleSegment.map&&(segmentInfo.segment.map.bytes=simpleSegment.map.bytes),segmentInfo.endOfAllRequests=simpleSegment.endOfAllRequests,simpleSegment.fmp4Captions&&(!function createCaptionsTrackIfNotExists(inbandTextTracks,tech,captionStreams){for(var trackId in captionStreams)if(!inbandTextTracks[trackId]){tech.trigger({type:"usage",name:"hls-608"});var track=tech.textTracks().getTrackById(trackId);inbandTextTracks[trackId]=track||tech.addRemoteTextTrack({kind:"captions",id:trackId,label:trackId},!1).track}}(this.inbandTextTracks_,this.hls_.tech_,simpleSegment.captionStreams),function addCaptionData(_ref){var inbandTextTracks=_ref.inbandTextTracks,captionArray=_ref.captionArray,timestampOffset=_ref.timestampOffset;if(captionArray){var Cue=window.WebKitDataCue||window.VTTCue;captionArray.forEach((function(caption){var track=caption.stream,startTime=caption.startTime,endTime=caption.endTime;inbandTextTracks[track]&&(startTime+=timestampOffset,endTime+=timestampOffset,inbandTextTracks[track].addCue(new Cue(startTime,endTime,caption.text)))}))}}({inbandTextTracks:this.inbandTextTracks_,captionArray:simpleSegment.fmp4Captions,timestampOffset:0}),this.captionParser_&&this.captionParser_.clearParsedCaptions()),this.handleSegment_()}},{key:"handleSegment_",value:function handleSegment_(){var _this3=this;if(this.pendingSegment_){var segmentInfo=this.pendingSegment_,segment=segmentInfo.segment,timingInfo=this.syncController_.probeSegmentInfo(segmentInfo);void 0===this.startingMedia_&&timingInfo&&(timingInfo.containsAudio||timingInfo.containsVideo)&&(this.startingMedia_={containsAudio:timingInfo.containsAudio,containsVideo:timingInfo.containsVideo});var illegalMediaSwitchError=function illegalMediaSwitch(loaderType,startingMedia,newSegmentMedia){return"main"===loaderType&&startingMedia&&newSegmentMedia?newSegmentMedia.containsAudio||newSegmentMedia.containsVideo?startingMedia.containsVideo&&!newSegmentMedia.containsVideo?"Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest.":!startingMedia.containsVideo&&newSegmentMedia.containsVideo?"Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest.":null:"Neither audio nor video found in segment.":null}(this.loaderType_,this.startingMedia_,timingInfo);if(illegalMediaSwitchError)return this.error({message:illegalMediaSwitchError,blacklistDuration:1/0}),void this.trigger("error");if(segmentInfo.isSyncRequest)return this.trigger("syncinfoupdate"),this.pendingSegment_=null,void(this.state="READY");if(null!==segmentInfo.timestampOffset&&segmentInfo.timestampOffset!==this.sourceUpdater_.timestampOffset()){if(timingInfo&&timingInfo.segmentTimestampInfo){var ptsStartTime=timingInfo.segmentTimestampInfo[0].ptsTime,dtsStartTime=timingInfo.segmentTimestampInfo[0].dtsTime;segmentInfo.timestampOffset-=ptsStartTime-dtsStartTime}this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset),this.trigger("timestampoffset")}var timelineMapping=this.syncController_.mappingForTimeline(segmentInfo.timeline);if(null!==timelineMapping&&this.trigger({type:"segmenttimemapping",mapping:timelineMapping}),this.state="APPENDING",segment.map){var initId=initSegmentId(segment.map);if(!this.activeInitSegmentId_||this.activeInitSegmentId_!==initId){var initSegment=this.initSegment(segment.map);this.sourceUpdater_.appendBuffer({bytes:initSegment.bytes},(function(){_this3.activeInitSegmentId_=initId}))}}segmentInfo.byteLength=segmentInfo.bytes.byteLength,"number"==typeof segment.start&&"number"==typeof segment.end?this.mediaSecondsLoaded+=segment.end-segment.start:this.mediaSecondsLoaded+=segment.duration,this.logger_(function segmentInfoString(segmentInfo){var _segmentInfo$segment=segmentInfo.segment,start=_segmentInfo$segment.start,end=_segmentInfo$segment.end,_segmentInfo$playlist=segmentInfo.playlist,seq=_segmentInfo$playlist.mediaSequence,id=_segmentInfo$playlist.id,_segmentInfo$playlist2=_segmentInfo$playlist.segments,segments=void 0===_segmentInfo$playlist2?[]:_segmentInfo$playlist2,index=segmentInfo.mediaIndex,timeline=segmentInfo.timeline;return["appending ["+index+"] of ["+seq+", "+(seq+segments.length)+"] from playlist ["+id+"]","["+start+" => "+end+"] in timeline ["+timeline+"]"].join(" ")}(segmentInfo)),this.sourceUpdater_.appendBuffer({bytes:segmentInfo.bytes,videoSegmentTimingInfoCallback:this.handleVideoSegmentTimingInfo_.bind(this,segmentInfo.requestId)},this.handleUpdateEnd_.bind(this))}else this.state="READY"}},{key:"handleVideoSegmentTimingInfo_",value:function handleVideoSegmentTimingInfo_(requestId,event){if(this.pendingSegment_&&requestId===this.pendingSegment_.requestId){var segment=this.pendingSegment_.segment;segment.videoTimingInfo||(segment.videoTimingInfo={}),segment.videoTimingInfo.transmuxerPrependedSeconds=event.videoSegmentTimingInfo.prependedContentDuration||0,segment.videoTimingInfo.transmuxedPresentationStart=event.videoSegmentTimingInfo.start.presentation,segment.videoTimingInfo.transmuxedPresentationEnd=event.videoSegmentTimingInfo.end.presentation,segment.videoTimingInfo.baseMediaDecodeTime=event.videoSegmentTimingInfo.baseMediaDecodeTime}}},{key:"handleUpdateEnd_",value:function handleUpdateEnd_(){if(!this.pendingSegment_)return this.state="READY",void(this.paused()||this.monitorBuffer_());var segmentInfo=this.pendingSegment_,segment=segmentInfo.segment,isWalkingForward=null!==this.mediaIndex;this.pendingSegment_=null,this.recordThroughput_(segmentInfo),this.addSegmentMetadataCue_(segmentInfo),this.state="READY",this.mediaIndex=segmentInfo.mediaIndex,this.fetchAtBuffer_=!0,this.currentTimeline_=segmentInfo.timeline,this.trigger("syncinfoupdate"),segment.end&&this.currentTime_()-segment.end>3*segmentInfo.playlist.targetDuration?this.resetEverything():(isWalkingForward&&this.trigger("bandwidthupdate"),this.trigger("progress"),this.isEndOfStream_(segmentInfo.mediaIndex+1,segmentInfo.playlist)&&this.endOfStream(),this.paused()||this.monitorBuffer_())}},{key:"recordThroughput_",value:function recordThroughput_(segmentInfo){var rate=this.throughput.rate,segmentProcessingTime=Date.now()-segmentInfo.endOfAllRequests+1,segmentProcessingThroughput=Math.floor(segmentInfo.byteLength/segmentProcessingTime*8*1e3);this.throughput.rate+=(segmentProcessingThroughput-rate)/++this.throughput.count}},{key:"addSegmentMetadataCue_",value:function addSegmentMetadataCue_(segmentInfo){if(this.segmentMetadataTrack_){var segment=segmentInfo.segment,start=segment.start,end=segment.end;if(finite(start)&&finite(end)){removeCuesFromTrack(start,end,this.segmentMetadataTrack_);var Cue=window_default().WebKitDataCue||window_default().VTTCue,value={custom:segment.custom,dateTimeObject:segment.dateTimeObject,dateTimeString:segment.dateTimeString,bandwidth:segmentInfo.playlist.attributes.BANDWIDTH,resolution:segmentInfo.playlist.attributes.RESOLUTION,codecs:segmentInfo.playlist.attributes.CODECS,byteLength:segmentInfo.byteLength,uri:segmentInfo.uri,timeline:segmentInfo.timeline,playlist:segmentInfo.playlist.uri,start,end},cue=new Cue(start,end,JSON.stringify(value));cue.value=value,this.segmentMetadataTrack_.addCue(cue)}}}}]),SegmentLoader}(videojs$1.EventTarget),uint8ToUtf8=function uint8ToUtf8(uintArray){return decodeURIComponent(escape(String.fromCharCode.apply(null,uintArray)))},VTT_LINE_TERMINATORS=new Uint8Array("\n\n".split("").map((function(_char2){return _char2.charCodeAt(0)}))),VTTSegmentLoader=function(_SegmentLoader){function VTTSegmentLoader(settings){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};video_es_classCallCheck(this,VTTSegmentLoader);var _this=video_es_possibleConstructorReturn(this,(VTTSegmentLoader.__proto__||Object.getPrototypeOf(VTTSegmentLoader)).call(this,settings,options));return _this.mediaSource_=null,_this.subtitlesTrack_=null,_this}return video_es_inherits(VTTSegmentLoader,_SegmentLoader),video_es_createClass(VTTSegmentLoader,[{key:"buffered_",value:function buffered_(){if(!this.subtitlesTrack_||!this.subtitlesTrack_.cues.length)return videojs$1.createTimeRanges();var cues=this.subtitlesTrack_.cues,start=cues[0].startTime,end=cues[cues.length-1].startTime;return videojs$1.createTimeRanges([[start,end]])}},{key:"initSegment",value:function initSegment(map){var set$$1=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!map)return null;var id=initSegmentId(map),storedMap=this.initSegments_[id];if(set$$1&&!storedMap&&map.bytes){var combinedByteLength=VTT_LINE_TERMINATORS.byteLength+map.bytes.byteLength,combinedSegment=new Uint8Array(combinedByteLength);combinedSegment.set(map.bytes),combinedSegment.set(VTT_LINE_TERMINATORS,map.bytes.byteLength),this.initSegments_[id]=storedMap={resolvedUri:map.resolvedUri,byterange:map.byterange,bytes:combinedSegment}}return storedMap||map}},{key:"couldBeginLoading_",value:function couldBeginLoading_(){return this.playlist_&&this.subtitlesTrack_&&!this.paused()}},{key:"init_",value:function init_(){return this.state="READY",this.resetEverything(),this.monitorBuffer_()}},{key:"track",value:function track(_track){return void 0===_track||(this.subtitlesTrack_=_track,"INIT"===this.state&&this.couldBeginLoading_()&&this.init_()),this.subtitlesTrack_}},{key:"remove",value:function remove(start,end){removeCuesFromTrack(start,end,this.subtitlesTrack_)}},{key:"fillBuffer_",value:function fillBuffer_(){var _this2=this;this.syncPoint_||(this.syncPoint_=this.syncController_.getSyncPoint(this.playlist_,this.duration_(),this.currentTimeline_,this.currentTime_()));var segmentInfo=this.checkBuffer_(this.buffered_(),this.playlist_,this.mediaIndex,this.hasPlayed_(),this.currentTime_(),this.syncPoint_);if(segmentInfo=this.skipEmptySegments_(segmentInfo)){if(null===this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline)){return this.syncController_.one("timestampoffset",(function checkTimestampOffset(){_this2.state="READY",_this2.paused()||_this2.monitorBuffer_()})),void(this.state="WAITING_ON_TIMELINE")}this.loadSegment_(segmentInfo)}}},{key:"skipEmptySegments_",value:function skipEmptySegments_(segmentInfo){for(;segmentInfo&&segmentInfo.segment.empty;)segmentInfo=this.generateSegmentInfo_(segmentInfo.playlist,segmentInfo.mediaIndex+1,segmentInfo.startOfSegment+segmentInfo.duration,segmentInfo.isSyncRequest);return segmentInfo}},{key:"handleSegment_",value:function handleSegment_(){var _this3=this;if(this.pendingSegment_&&this.subtitlesTrack_){this.state="APPENDING";var segmentInfo=this.pendingSegment_,segment=segmentInfo.segment;if("function"!=typeof window_default().WebVTT&&this.subtitlesTrack_&&this.subtitlesTrack_.tech_){var loadHandler=void 0,errorHandler=function errorHandler(){_this3.subtitlesTrack_.tech_.off("vttjsloaded",loadHandler),_this3.error({message:"Error loading vtt.js"}),_this3.state="READY",_this3.pause(),_this3.trigger("error")};return loadHandler=function loadHandler(){_this3.subtitlesTrack_.tech_.off("vttjserror",errorHandler),_this3.handleSegment_()},this.state="WAITING_ON_VTTJS",this.subtitlesTrack_.tech_.one("vttjsloaded",loadHandler),void this.subtitlesTrack_.tech_.one("vttjserror",errorHandler)}segment.requested=!0;try{this.parseVTTCues_(segmentInfo)}catch(e){return this.error({message:e.message}),this.state="READY",this.pause(),this.trigger("error")}if(this.updateTimeMapping_(segmentInfo,this.syncController_.timelines[segmentInfo.timeline],this.playlist_),segmentInfo.isSyncRequest)return this.trigger("syncinfoupdate"),this.pendingSegment_=null,void(this.state="READY");segmentInfo.byteLength=segmentInfo.bytes.byteLength,this.mediaSecondsLoaded+=segment.duration,segmentInfo.cues.length&&this.remove(segmentInfo.cues[0].endTime,segmentInfo.cues[segmentInfo.cues.length-1].endTime),segmentInfo.cues.forEach((function(cue){_this3.subtitlesTrack_.addCue(cue)})),this.handleUpdateEnd_()}else this.state="READY"}},{key:"parseVTTCues_",value:function parseVTTCues_(segmentInfo){var decoder=void 0,decodeBytesToString=!1;"function"==typeof window_default().TextDecoder?decoder=new(window_default().TextDecoder)("utf8"):(decoder=window_default().WebVTT.StringDecoder(),decodeBytesToString=!0);var parser=new(window_default().WebVTT.Parser)(window_default(),window_default().vttjs,decoder);if(segmentInfo.cues=[],segmentInfo.timestampmap={MPEGTS:0,LOCAL:0},parser.oncue=segmentInfo.cues.push.bind(segmentInfo.cues),parser.ontimestampmap=function(map){return segmentInfo.timestampmap=map},parser.onparsingerror=function(error){videojs$1.log.warn("Error encountered when parsing cues: "+error.message)},segmentInfo.segment.map){var mapData=segmentInfo.segment.map.bytes;decodeBytesToString&&(mapData=uint8ToUtf8(mapData)),parser.parse(mapData)}var segmentData=segmentInfo.bytes;decodeBytesToString&&(segmentData=uint8ToUtf8(segmentData)),parser.parse(segmentData),parser.flush()}},{key:"updateTimeMapping_",value:function updateTimeMapping_(segmentInfo,mappingObj,playlist){var segment=segmentInfo.segment;if(mappingObj)if(segmentInfo.cues.length){var timestampmap=segmentInfo.timestampmap,diff=timestampmap.MPEGTS/9e4-timestampmap.LOCAL+mappingObj.mapping;if(segmentInfo.cues.forEach((function(cue){cue.startTime+=diff,cue.endTime+=diff})),!playlist.syncInfo){var firstStart=segmentInfo.cues[0].startTime,lastStart=segmentInfo.cues[segmentInfo.cues.length-1].startTime;playlist.syncInfo={mediaSequence:playlist.mediaSequence+segmentInfo.mediaIndex,time:Math.min(firstStart,lastStart-segment.duration)}}}else segment.empty=!0}}]),VTTSegmentLoader}(SegmentLoader),findAdCue=function findAdCue(track,mediaTime){for(var cues=track.cues,i=0;i<cues.length;i++){var cue=cues[i];if(mediaTime>=cue.adStartTime&&mediaTime<=cue.adEndTime)return cue}return null},tsprobe=ts_inspector_default().inspect,syncPointStrategies=[{name:"VOD",run:function run(syncController,playlist,duration$$1,currentTimeline,currentTime){if(duration$$1!==1/0){return{time:0,segmentIndex:0}}return null}},{name:"ProgramDateTime",run:function run(syncController,playlist,duration$$1,currentTimeline,currentTime){if(!syncController.datetimeToDisplayTime)return null;var segments=playlist.segments||[],syncPoint=null,lastDistance=null;currentTime=currentTime||0;for(var i=0;i<segments.length;i++){var segment=segments[i];if(segment.dateTimeObject){var segmentStart=segment.dateTimeObject.getTime()/1e3+syncController.datetimeToDisplayTime,distance=Math.abs(currentTime-segmentStart);if(null!==lastDistance&&(0===distance||lastDistance<distance))break;lastDistance=distance,syncPoint={time:segmentStart,segmentIndex:i}}}return syncPoint}},{name:"Segment",run:function run(syncController,playlist,duration$$1,currentTimeline,currentTime){var segments=playlist.segments||[],syncPoint=null,lastDistance=null;currentTime=currentTime||0;for(var i=0;i<segments.length;i++){var segment=segments[i];if(segment.timeline===currentTimeline&&void 0!==segment.start){var distance=Math.abs(currentTime-segment.start);if(null!==lastDistance&&lastDistance<distance)break;(!syncPoint||null===lastDistance||lastDistance>=distance)&&(lastDistance=distance,syncPoint={time:segment.start,segmentIndex:i})}}return syncPoint}},{name:"Discontinuity",run:function run(syncController,playlist,duration$$1,currentTimeline,currentTime){var syncPoint=null;if(currentTime=currentTime||0,playlist.discontinuityStarts&&playlist.discontinuityStarts.length)for(var lastDistance=null,i=0;i<playlist.discontinuityStarts.length;i++){var segmentIndex=playlist.discontinuityStarts[i],discontinuity=playlist.discontinuitySequence+i+1,discontinuitySync=syncController.discontinuities[discontinuity];if(discontinuitySync){var distance=Math.abs(currentTime-discontinuitySync.time);if(null!==lastDistance&&lastDistance<distance)break;(!syncPoint||null===lastDistance||lastDistance>=distance)&&(lastDistance=distance,syncPoint={time:discontinuitySync.time,segmentIndex})}}return syncPoint}},{name:"Playlist",run:function run(syncController,playlist,duration$$1,currentTimeline,currentTime){return playlist.syncInfo?{time:playlist.syncInfo.time,segmentIndex:playlist.syncInfo.mediaSequence-playlist.mediaSequence}:null}}],SyncController=function(_videojs$EventTarget){function SyncController(){video_es_classCallCheck(this,SyncController);var _this=video_es_possibleConstructorReturn(this,(SyncController.__proto__||Object.getPrototypeOf(SyncController)).call(this));return _this.inspectCache_=void 0,_this.timelines=[],_this.discontinuities=[],_this.datetimeToDisplayTime=null,_this.logger_=logger("SyncController"),_this}return video_es_inherits(SyncController,_videojs$EventTarget),video_es_createClass(SyncController,[{key:"getSyncPoint",value:function getSyncPoint(playlist,duration$$1,currentTimeline,currentTime){var syncPoints=this.runStrategies_(playlist,duration$$1,currentTimeline,currentTime);return syncPoints.length?this.selectSyncPoint_(syncPoints,{key:"time",value:currentTime}):null}},{key:"getExpiredTime",value:function getExpiredTime(playlist,duration$$1){if(!playlist||!playlist.segments)return null;var syncPoints=this.runStrategies_(playlist,duration$$1,playlist.discontinuitySequence,0);if(!syncPoints.length)return null;var syncPoint=this.selectSyncPoint_(syncPoints,{key:"segmentIndex",value:0});return syncPoint.segmentIndex>0&&(syncPoint.time*=-1),Math.abs(syncPoint.time+sumDurations(playlist,syncPoint.segmentIndex,0))}},{key:"runStrategies_",value:function runStrategies_(playlist,duration$$1,currentTimeline,currentTime){for(var syncPoints=[],i=0;i<syncPointStrategies.length;i++){var strategy=syncPointStrategies[i],syncPoint=strategy.run(this,playlist,duration$$1,currentTimeline,currentTime);syncPoint&&(syncPoint.strategy=strategy.name,syncPoints.push({strategy:strategy.name,syncPoint}))}return syncPoints}},{key:"selectSyncPoint_",value:function selectSyncPoint_(syncPoints,target){for(var bestSyncPoint=syncPoints[0].syncPoint,bestDistance=Math.abs(syncPoints[0].syncPoint[target.key]-target.value),bestStrategy=syncPoints[0].strategy,i=1;i<syncPoints.length;i++){var newDistance=Math.abs(syncPoints[i].syncPoint[target.key]-target.value);newDistance<bestDistance&&(bestDistance=newDistance,bestSyncPoint=syncPoints[i].syncPoint,bestStrategy=syncPoints[i].strategy)}return this.logger_("syncPoint for ["+target.key+": "+target.value+"] chosen with strategy ["+bestStrategy+"]: [time:"+bestSyncPoint.time+", segmentIndex:"+bestSyncPoint.segmentIndex+"]"),bestSyncPoint}},{key:"saveExpiredSegmentInfo",value:function saveExpiredSegmentInfo(oldPlaylist,newPlaylist){for(var i=newPlaylist.mediaSequence-oldPlaylist.mediaSequence-1;i>=0;i--){var lastRemovedSegment=oldPlaylist.segments[i];if(lastRemovedSegment&&void 0!==lastRemovedSegment.start){newPlaylist.syncInfo={mediaSequence:oldPlaylist.mediaSequence+i,time:lastRemovedSegment.start},this.logger_("playlist refresh sync: [time:"+newPlaylist.syncInfo.time+", mediaSequence: "+newPlaylist.syncInfo.mediaSequence+"]"),this.trigger("syncinfoupdate");break}}}},{key:"setDateTimeMapping",value:function setDateTimeMapping(playlist){if(!this.datetimeToDisplayTime&&playlist.segments&&playlist.segments.length&&playlist.segments[0].dateTimeObject){var playlistTimestamp=playlist.segments[0].dateTimeObject.getTime()/1e3;this.datetimeToDisplayTime=-playlistTimestamp}}},{key:"reset",value:function reset(){this.inspectCache_=void 0}},{key:"probeSegmentInfo",value:function probeSegmentInfo(segmentInfo){var segment=segmentInfo.segment,playlist=segmentInfo.playlist,timingInfo=void 0;return(timingInfo=segment.map?this.probeMp4Segment_(segmentInfo):this.probeTsSegment_(segmentInfo))&&this.calculateSegmentTimeMapping_(segmentInfo,timingInfo)&&(this.saveDiscontinuitySyncInfo_(segmentInfo),playlist.syncInfo||(playlist.syncInfo={mediaSequence:playlist.mediaSequence+segmentInfo.mediaIndex,time:segment.start})),timingInfo}},{key:"probeMp4Segment_",value:function probeMp4Segment_(segmentInfo){var segment=segmentInfo.segment,timescales=probe_default().timescale(segment.map.bytes),startTime=probe_default().startTime(timescales,segmentInfo.bytes);return null!==segmentInfo.timestampOffset&&(segmentInfo.timestampOffset-=startTime),{start:startTime,end:startTime+segment.duration}}},{key:"probeTsSegment_",value:function probeTsSegment_(segmentInfo){var timeInfo=tsprobe(segmentInfo.bytes,this.inspectCache_),segmentStartTime=void 0,segmentEndTime=void 0,segmentTimestampInfo=void 0;return timeInfo?(timeInfo.video&&2===timeInfo.video.length?(this.inspectCache_=timeInfo.video[1].dts,segmentStartTime=timeInfo.video[0].dtsTime,segmentEndTime=timeInfo.video[1].dtsTime,segmentTimestampInfo=timeInfo.video):timeInfo.audio&&2===timeInfo.audio.length&&(this.inspectCache_=timeInfo.audio[1].dts,segmentStartTime=timeInfo.audio[0].dtsTime,segmentEndTime=timeInfo.audio[1].dtsTime,segmentTimestampInfo=timeInfo.audio),{segmentTimestampInfo,start:segmentStartTime,end:segmentEndTime,containsVideo:timeInfo.video&&2===timeInfo.video.length,containsAudio:timeInfo.audio&&2===timeInfo.audio.length}):null}},{key:"timestampOffsetForTimeline",value:function timestampOffsetForTimeline(timeline){return void 0===this.timelines[timeline]?null:this.timelines[timeline].time}},{key:"mappingForTimeline",value:function mappingForTimeline(timeline){return void 0===this.timelines[timeline]?null:this.timelines[timeline].mapping}},{key:"calculateSegmentTimeMapping_",value:function calculateSegmentTimeMapping_(segmentInfo,timingInfo){var segment=segmentInfo.segment,mappingObj=this.timelines[segmentInfo.timeline];if(null!==segmentInfo.timestampOffset)mappingObj={time:segmentInfo.startOfSegment,mapping:segmentInfo.startOfSegment-timingInfo.start},this.timelines[segmentInfo.timeline]=mappingObj,this.trigger("timestampoffset"),this.logger_("time mapping for timeline "+segmentInfo.timeline+": [time: "+mappingObj.time+"] [mapping: "+mappingObj.mapping+"]"),segment.start=segmentInfo.startOfSegment,segment.end=timingInfo.end+mappingObj.mapping;else{if(!mappingObj)return!1;segment.start=timingInfo.start+mappingObj.mapping,segment.end=timingInfo.end+mappingObj.mapping}return!0}},{key:"saveDiscontinuitySyncInfo_",value:function saveDiscontinuitySyncInfo_(segmentInfo){var playlist=segmentInfo.playlist,segment=segmentInfo.segment;if(segment.discontinuity)this.discontinuities[segment.timeline]={time:segment.start,accuracy:0};else if(playlist.discontinuityStarts&&playlist.discontinuityStarts.length)for(var i=0;i<playlist.discontinuityStarts.length;i++){var segmentIndex=playlist.discontinuityStarts[i],discontinuity=playlist.discontinuitySequence+i+1,mediaIndexDiff=segmentIndex-segmentInfo.mediaIndex,accuracy=Math.abs(mediaIndexDiff);if(!this.discontinuities[discontinuity]||this.discontinuities[discontinuity].accuracy>accuracy){var time=void 0;time=mediaIndexDiff<0?segment.start-sumDurations(playlist,segmentInfo.mediaIndex,segmentIndex):segment.end+sumDurations(playlist,segmentInfo.mediaIndex+1,segmentIndex),this.discontinuities[discontinuity]={time,accuracy}}}}}]),SyncController}(videojs$1.EventTarget),Decrypter$1=new shimWorker("./decrypter-worker.worker.js",(function(window,document$$1){var self=this;!function(){var classCallCheck=function classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")},createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),aesTables=null,AES=function(){function AES(key){classCallCheck(this,AES),aesTables||(aesTables=function precompute(){var tables=[[[],[],[],[],[]],[[],[],[],[],[]]],encTable=tables[0],decTable=tables[1],sbox=encTable[4],sboxInv=decTable[4],i=void 0,x=void 0,xInv=void 0,d=[],th=[],x2=void 0,x4=void 0,s=void 0,tEnc=void 0,tDec=void 0;for(i=0;i<256;i++)th[(d[i]=i<<1^283*(i>>7))^i]=i;for(x=xInv=0;!sbox[x];x^=x2||1,xInv=th[xInv]||1)for(s=(s=xInv^xInv<<1^xInv<<2^xInv<<3^xInv<<4)>>8^255&s^99,sbox[x]=s,sboxInv[s]=x,tDec=16843009*d[x4=d[x2=d[x]]]^65537*x4^257*x2^16843008*x,tEnc=257*d[s]^16843008*s,i=0;i<4;i++)encTable[i][x]=tEnc=tEnc<<24^tEnc>>>8,decTable[i][s]=tDec=tDec<<24^tDec>>>8;for(i=0;i<5;i++)encTable[i]=encTable[i].slice(0),decTable[i]=decTable[i].slice(0);return tables}()),this._tables=[[aesTables[0][0].slice(),aesTables[0][1].slice(),aesTables[0][2].slice(),aesTables[0][3].slice(),aesTables[0][4].slice()],[aesTables[1][0].slice(),aesTables[1][1].slice(),aesTables[1][2].slice(),aesTables[1][3].slice(),aesTables[1][4].slice()]];var i=void 0,j=void 0,tmp=void 0,encKey=void 0,decKey=void 0,sbox=this._tables[0][4],decTable=this._tables[1],keyLen=key.length,rcon=1;if(4!==keyLen&&6!==keyLen&&8!==keyLen)throw new Error("Invalid aes key size");for(encKey=key.slice(0),decKey=[],this._key=[encKey,decKey],i=keyLen;i<4*keyLen+28;i++)tmp=encKey[i-1],(i%keyLen==0||8===keyLen&&i%keyLen==4)&&(tmp=sbox[tmp>>>24]<<24^sbox[tmp>>16&255]<<16^sbox[tmp>>8&255]<<8^sbox[255&tmp],i%keyLen==0&&(tmp=tmp<<8^tmp>>>24^rcon<<24,rcon=rcon<<1^283*(rcon>>7))),encKey[i]=encKey[i-keyLen]^tmp;for(j=0;i;j++,i--)tmp=encKey[3&j?i:i-4],decKey[j]=i<=4||j<4?tmp:decTable[0][sbox[tmp>>>24]]^decTable[1][sbox[tmp>>16&255]]^decTable[2][sbox[tmp>>8&255]]^decTable[3][sbox[255&tmp]]}return AES.prototype.decrypt=function decrypt$$1(encrypted0,encrypted1,encrypted2,encrypted3,out,offset){var key=this._key[1],a=encrypted0^key[0],b=encrypted3^key[1],c=encrypted2^key[2],d=encrypted1^key[3],a2=void 0,b2=void 0,c2=void 0,nInnerRounds=key.length/4-2,i=void 0,kIndex=4,table=this._tables[1],table0=table[0],table1=table[1],table2=table[2],table3=table[3],sbox=table[4];for(i=0;i<nInnerRounds;i++)a2=table0[a>>>24]^table1[b>>16&255]^table2[c>>8&255]^table3[255&d]^key[kIndex],b2=table0[b>>>24]^table1[c>>16&255]^table2[d>>8&255]^table3[255&a]^key[kIndex+1],c2=table0[c>>>24]^table1[d>>16&255]^table2[a>>8&255]^table3[255&b]^key[kIndex+2],d=table0[d>>>24]^table1[a>>16&255]^table2[b>>8&255]^table3[255&c]^key[kIndex+3],kIndex+=4,a=a2,b=b2,c=c2;for(i=0;i<4;i++)out[(3&-i)+offset]=sbox[a>>>24]<<24^sbox[b>>16&255]<<16^sbox[c>>8&255]<<8^sbox[255&d]^key[kIndex++],a2=a,a=b,b=c,c=d,d=a2},AES}(),Stream=function(){function Stream(){classCallCheck(this,Stream),this.listeners={}}return Stream.prototype.on=function on(type,listener){this.listeners[type]||(this.listeners[type]=[]),this.listeners[type].push(listener)},Stream.prototype.off=function off(type,listener){if(!this.listeners[type])return!1;var index=this.listeners[type].indexOf(listener);return this.listeners[type].splice(index,1),index>-1},Stream.prototype.trigger=function trigger(type){var callbacks=this.listeners[type];if(callbacks)if(2===arguments.length)for(var length=callbacks.length,i=0;i<length;++i)callbacks[i].call(this,arguments[1]);else for(var args=Array.prototype.slice.call(arguments,1),_length=callbacks.length,_i=0;_i<_length;++_i)callbacks[_i].apply(this,args)},Stream.prototype.dispose=function dispose(){this.listeners={}},Stream.prototype.pipe=function pipe(destination){this.on("data",(function(data){destination.push(data)}))},Stream}(),AsyncStream$$1=function(_Stream){function AsyncStream$$1(){classCallCheck(this,AsyncStream$$1);var _this=function possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,_Stream.call(this,Stream));return _this.jobs=[],_this.delay=1,_this.timeout_=null,_this}return function inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(AsyncStream$$1,_Stream),AsyncStream$$1.prototype.processJob_=function processJob_(){this.jobs.shift()(),this.jobs.length?this.timeout_=setTimeout(this.processJob_.bind(this),this.delay):this.timeout_=null},AsyncStream$$1.prototype.push=function push(job){this.jobs.push(job),this.timeout_||(this.timeout_=setTimeout(this.processJob_.bind(this),this.delay))},AsyncStream$$1}(Stream),ntoh=function ntoh(word){return word<<24|(65280&word)<<8|(16711680&word)>>8|word>>>24},Decrypter$$1=function(){function Decrypter$$1(encrypted,key,initVector,done){classCallCheck(this,Decrypter$$1);var step=Decrypter$$1.STEP,encrypted32=new Int32Array(encrypted.buffer),decrypted=new Uint8Array(encrypted.byteLength),i=0;for(this.asyncStream_=new AsyncStream$$1,this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i,i+step),key,initVector,decrypted)),i=step;i<encrypted32.length;i+=step)initVector=new Uint32Array([ntoh(encrypted32[i-4]),ntoh(encrypted32[i-3]),ntoh(encrypted32[i-2]),ntoh(encrypted32[i-1])]),this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i,i+step),key,initVector,decrypted));this.asyncStream_.push((function(){done(null,function unpad(padded){return padded.subarray(0,padded.byteLength-padded[padded.byteLength-1])}(decrypted))}))}return Decrypter$$1.prototype.decryptChunk_=function decryptChunk_(encrypted,key,initVector,decrypted){return function(){var bytes=function decrypt$$1(encrypted,key,initVector){var encrypted32=new Int32Array(encrypted.buffer,encrypted.byteOffset,encrypted.byteLength>>2),decipher=new AES(Array.prototype.slice.call(key)),decrypted=new Uint8Array(encrypted.byteLength),decrypted32=new Int32Array(decrypted.buffer),init0=void 0,init1=void 0,init2=void 0,init3=void 0,encrypted0=void 0,encrypted1=void 0,encrypted2=void 0,encrypted3=void 0,wordIx=void 0;for(init0=initVector[0],init1=initVector[1],init2=initVector[2],init3=initVector[3],wordIx=0;wordIx<encrypted32.length;wordIx+=4)encrypted0=ntoh(encrypted32[wordIx]),encrypted1=ntoh(encrypted32[wordIx+1]),encrypted2=ntoh(encrypted32[wordIx+2]),encrypted3=ntoh(encrypted32[wordIx+3]),decipher.decrypt(encrypted0,encrypted1,encrypted2,encrypted3,decrypted32,wordIx),decrypted32[wordIx]=ntoh(decrypted32[wordIx]^init0),decrypted32[wordIx+1]=ntoh(decrypted32[wordIx+1]^init1),decrypted32[wordIx+2]=ntoh(decrypted32[wordIx+2]^init2),decrypted32[wordIx+3]=ntoh(decrypted32[wordIx+3]^init3),init0=encrypted0,init1=encrypted1,init2=encrypted2,init3=encrypted3;return decrypted}(encrypted,key,initVector);decrypted.set(bytes,encrypted.byteOffset)}},createClass(Decrypter$$1,null,[{key:"STEP",get:function get$$1(){return 32e3}}]),Decrypter$$1}(),decrypterWorker=new function DecrypterWorker(self){self.onmessage=function(event){var data=event.data,encrypted=new Uint8Array(data.encrypted.bytes,data.encrypted.byteOffset,data.encrypted.byteLength),key=new Uint32Array(data.key.bytes,data.key.byteOffset,data.key.byteLength/4),iv=new Uint32Array(data.iv.bytes,data.iv.byteOffset,data.iv.byteLength/4);new Decrypter$$1(encrypted,key,iv,(function(err,bytes){self.postMessage(function createTransferableMessage(message){var transferable={};return Object.keys(message).forEach((function(key){var value=message[key];ArrayBuffer.isView(value)?transferable[key]={bytes:value.buffer,byteOffset:value.byteOffset,byteLength:value.byteLength}:transferable[key]=value})),transferable}({source:data.source,decrypted:bytes}),[bytes.buffer])}))}}(self)}()})),audioTrackKind_=function audioTrackKind_(properties){var kind=properties.default?"main":"alternative";return properties.characteristics&&properties.characteristics.indexOf("public.accessibility.describes-video")>=0&&(kind="main-desc"),kind},stopLoaders=function stopLoaders(segmentLoader,mediaType){segmentLoader.abort(),segmentLoader.pause(),mediaType&&mediaType.activePlaylistLoader&&(mediaType.activePlaylistLoader.pause(),mediaType.activePlaylistLoader=null)},startLoaders=function startLoaders(playlistLoader,mediaType){mediaType.activePlaylistLoader=playlistLoader,playlistLoader.load()},onError={AUDIO:function AUDIO(type,settings){return function(){var segmentLoader=settings.segmentLoaders[type],mediaType=settings.mediaTypes[type],blacklistCurrentPlaylist=settings.blacklistCurrentPlaylist;stopLoaders(segmentLoader,mediaType);var activeTrack=mediaType.activeTrack(),activeGroup=mediaType.activeGroup(),id=(activeGroup.filter((function(group){return group.default}))[0]||activeGroup[0]).id,defaultTrack=mediaType.tracks[id];if(activeTrack!==defaultTrack){for(var trackId in videojs$1.log.warn("Problem encountered loading the alternate audio track.Switching back to default."),mediaType.tracks)mediaType.tracks[trackId].enabled=mediaType.tracks[trackId]===defaultTrack;mediaType.onTrackChanged()}else blacklistCurrentPlaylist({message:"Problem encountered loading the default audio track."})}},SUBTITLES:function SUBTITLES(type,settings){return function(){var segmentLoader=settings.segmentLoaders[type],mediaType=settings.mediaTypes[type];videojs$1.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track."),stopLoaders(segmentLoader,mediaType);var track=mediaType.activeTrack();track&&(track.mode="disabled"),mediaType.onTrackChanged()}}},setupListeners={AUDIO:function AUDIO(type,playlistLoader,settings){if(playlistLoader){var tech=settings.tech,requestOptions=settings.requestOptions,segmentLoader=settings.segmentLoaders[type];playlistLoader.on("loadedmetadata",(function(){var media=playlistLoader.media();segmentLoader.playlist(media,requestOptions),(!tech.paused()||media.endList&&"none"!==tech.preload())&&segmentLoader.load()})),playlistLoader.on("loadedplaylist",(function(){segmentLoader.playlist(playlistLoader.media(),requestOptions),tech.paused()||segmentLoader.load()})),playlistLoader.on("error",onError[type](type,settings))}},SUBTITLES:function SUBTITLES(type,playlistLoader,settings){var tech=settings.tech,requestOptions=settings.requestOptions,segmentLoader=settings.segmentLoaders[type],mediaType=settings.mediaTypes[type];playlistLoader.on("loadedmetadata",(function(){var media=playlistLoader.media();segmentLoader.playlist(media,requestOptions),segmentLoader.track(mediaType.activeTrack()),(!tech.paused()||media.endList&&"none"!==tech.preload())&&segmentLoader.load()})),playlistLoader.on("loadedplaylist",(function(){segmentLoader.playlist(playlistLoader.media(),requestOptions),tech.paused()||segmentLoader.load()})),playlistLoader.on("error",onError[type](type,settings))}},initialize={AUDIO:function AUDIO(type,settings){var hls=settings.hls,sourceType=settings.sourceType,segmentLoader=settings.segmentLoaders[type],requestOptions=settings.requestOptions,mediaGroups=settings.master.mediaGroups,_settings$mediaTypes$=settings.mediaTypes[type],groups=_settings$mediaTypes$.groups,tracks=_settings$mediaTypes$.tracks,masterPlaylistLoader=settings.masterPlaylistLoader;for(var groupId in mediaGroups[type]&&0!==Object.keys(mediaGroups[type]).length||(mediaGroups[type]={main:{default:{default:!0}}}),mediaGroups[type])for(var variantLabel in groups[groupId]||(groups[groupId]=[]),mediaGroups[type][groupId]){var properties=mediaGroups[type][groupId][variantLabel],playlistLoader=void 0;if(playlistLoader=properties.resolvedUri?new PlaylistLoader(properties.resolvedUri,hls,requestOptions):properties.playlists&&"dash"===sourceType?new DashPlaylistLoader(properties.playlists[0],hls,requestOptions,masterPlaylistLoader):null,properties=videojs$1.mergeOptions({id:variantLabel,playlistLoader},properties),setupListeners[type](type,properties.playlistLoader,settings),groups[groupId].push(properties),void 0===tracks[variantLabel]){var track=new videojs$1.AudioTrack({id:variantLabel,kind:audioTrackKind_(properties),enabled:!1,language:properties.language,default:properties.default,label:variantLabel});tracks[variantLabel]=track}}segmentLoader.on("error",onError[type](type,settings))},SUBTITLES:function SUBTITLES(type,settings){var tech=settings.tech,hls=settings.hls,sourceType=settings.sourceType,segmentLoader=settings.segmentLoaders[type],requestOptions=settings.requestOptions,mediaGroups=settings.master.mediaGroups,_settings$mediaTypes$2=settings.mediaTypes[type],groups=_settings$mediaTypes$2.groups,tracks=_settings$mediaTypes$2.tracks,masterPlaylistLoader=settings.masterPlaylistLoader;for(var groupId in mediaGroups[type])for(var variantLabel in groups[groupId]||(groups[groupId]=[]),mediaGroups[type][groupId])if(!mediaGroups[type][groupId][variantLabel].forced){var properties=mediaGroups[type][groupId][variantLabel],playlistLoader=void 0;if("hls"===sourceType?playlistLoader=new PlaylistLoader(properties.resolvedUri,hls,requestOptions):"dash"===sourceType&&(playlistLoader=new DashPlaylistLoader(properties.playlists[0],hls,requestOptions,masterPlaylistLoader)),properties=videojs$1.mergeOptions({id:variantLabel,playlistLoader},properties),setupListeners[type](type,properties.playlistLoader,settings),groups[groupId].push(properties),void 0===tracks[variantLabel]){var track=tech.addRemoteTextTrack({id:variantLabel,kind:"subtitles",default:properties.default&&properties.autoselect,language:properties.language,label:variantLabel},!1).track;tracks[variantLabel]=track}}segmentLoader.on("error",onError[type](type,settings))},"CLOSED-CAPTIONS":function CLOSEDCAPTIONS(type,settings){var tech=settings.tech,mediaGroups=settings.master.mediaGroups,_settings$mediaTypes$3=settings.mediaTypes[type],groups=_settings$mediaTypes$3.groups,tracks=_settings$mediaTypes$3.tracks;for(var groupId in mediaGroups[type])for(var variantLabel in groups[groupId]||(groups[groupId]=[]),mediaGroups[type][groupId]){var properties=mediaGroups[type][groupId][variantLabel];if(properties.instreamId.match(/CC\d/)&&(groups[groupId].push(videojs$1.mergeOptions({id:variantLabel},properties)),void 0===tracks[variantLabel])){var track=tech.addRemoteTextTrack({id:properties.instreamId,kind:"captions",default:properties.default&&properties.autoselect,language:properties.language,label:variantLabel},!1).track;tracks[variantLabel]=track}}}},activeTrack={AUDIO:function AUDIO(type,settings){return function(){var tracks=settings.mediaTypes[type].tracks;for(var id in tracks)if(tracks[id].enabled)return tracks[id];return null}},SUBTITLES:function SUBTITLES(type,settings){return function(){var tracks=settings.mediaTypes[type].tracks;for(var id in tracks)if("showing"===tracks[id].mode)return tracks[id];return null}}},setupMediaGroups=function setupMediaGroups(settings){["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach((function(type){initialize[type](type,settings)}));var mediaTypes=settings.mediaTypes,masterPlaylistLoader=settings.masterPlaylistLoader,tech=settings.tech,hls=settings.hls;["AUDIO","SUBTITLES"].forEach((function(type){mediaTypes[type].activeGroup=function activeGroup(type,settings){return function(track){var masterPlaylistLoader=settings.masterPlaylistLoader,groups=settings.mediaTypes[type].groups,media=masterPlaylistLoader.media();if(!media)return null;var variants=null;return media.attributes[type]&&(variants=groups[media.attributes[type]]),variants=variants||groups.main,void 0===track?variants:null===track?null:variants.filter((function(props){return props.id===track.id}))[0]||null}}(type,settings),mediaTypes[type].activeTrack=activeTrack[type](type,settings),mediaTypes[type].onGroupChanged=function onGroupChanged(type,settings){return function(){var _settings$segmentLoad=settings.segmentLoaders,segmentLoader=_settings$segmentLoad[type],mainSegmentLoader=_settings$segmentLoad.main,mediaType=settings.mediaTypes[type],activeTrack=mediaType.activeTrack(),activeGroup=mediaType.activeGroup(activeTrack),previousActiveLoader=mediaType.activePlaylistLoader;stopLoaders(segmentLoader,mediaType),activeGroup&&(activeGroup.playlistLoader?(segmentLoader.resyncLoader(),startLoaders(activeGroup.playlistLoader,mediaType)):previousActiveLoader&&mainSegmentLoader.resetEverything())}}(type,settings),mediaTypes[type].onTrackChanged=function onTrackChanged(type,settings){return function(){var _settings$segmentLoad2=settings.segmentLoaders,segmentLoader=_settings$segmentLoad2[type],mainSegmentLoader=_settings$segmentLoad2.main,mediaType=settings.mediaTypes[type],activeTrack=mediaType.activeTrack(),activeGroup=mediaType.activeGroup(activeTrack),previousActiveLoader=mediaType.activePlaylistLoader;stopLoaders(segmentLoader,mediaType),activeGroup&&(activeGroup.playlistLoader?previousActiveLoader!==activeGroup.playlistLoader?(segmentLoader.track&&segmentLoader.track(activeTrack),segmentLoader.resetEverything(),startLoaders(activeGroup.playlistLoader,mediaType)):startLoaders(activeGroup.playlistLoader,mediaType):mainSegmentLoader.resetEverything())}}(type,settings)}));var audioGroup=mediaTypes.AUDIO.activeGroup(),groupId=(audioGroup.filter((function(group){return group.default}))[0]||audioGroup[0]).id;mediaTypes.AUDIO.tracks[groupId].enabled=!0,mediaTypes.AUDIO.onTrackChanged(),masterPlaylistLoader.on("mediachange",(function(){["AUDIO","SUBTITLES"].forEach((function(type){return mediaTypes[type].onGroupChanged()}))}));var onAudioTrackChanged=function onAudioTrackChanged(){mediaTypes.AUDIO.onTrackChanged(),tech.trigger({type:"usage",name:"hls-audio-change"})};for(var id in tech.audioTracks().addEventListener("change",onAudioTrackChanged),tech.remoteTextTracks().addEventListener("change",mediaTypes.SUBTITLES.onTrackChanged),hls.on("dispose",(function(){tech.audioTracks().removeEventListener("change",onAudioTrackChanged),tech.remoteTextTracks().removeEventListener("change",mediaTypes.SUBTITLES.onTrackChanged)})),tech.clearTracks("audio"),mediaTypes.AUDIO.tracks)tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id])},Hls=void 0,loaderStats=["mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaBytesTransferred"],sumLoaderStat=function sumLoaderStat(stat){return this.audioSegmentLoader_[stat]+this.mainSegmentLoader_[stat]},MasterPlaylistController=function(_videojs$EventTarget){function MasterPlaylistController(options){video_es_classCallCheck(this,MasterPlaylistController);var _this=video_es_possibleConstructorReturn(this,(MasterPlaylistController.__proto__||Object.getPrototypeOf(MasterPlaylistController)).call(this)),url=options.url,handleManifestRedirects=options.handleManifestRedirects,withCredentials=options.withCredentials,tech=options.tech,bandwidth=options.bandwidth,externHls=options.externHls,useCueTags=options.useCueTags,blacklistDuration=options.blacklistDuration,enableLowInitialPlaylist=options.enableLowInitialPlaylist,sourceType=options.sourceType,seekTo=options.seekTo,cacheEncryptionKeys=options.cacheEncryptionKeys;if(!url)throw new Error("A non-empty playlist URL is required");Hls=externHls,_this.withCredentials=withCredentials,_this.tech_=tech,_this.hls_=tech.hls,_this.seekTo_=seekTo,_this.sourceType_=sourceType,_this.useCueTags_=useCueTags,_this.blacklistDuration=blacklistDuration,_this.enableLowInitialPlaylist=enableLowInitialPlaylist,_this.useCueTags_&&(_this.cueTagsTrack_=_this.tech_.addTextTrack("metadata","ad-cues"),_this.cueTagsTrack_.inBandMetadataTrackDispatchType=""),_this.requestOptions_={withCredentials,handleManifestRedirects,timeout:null},_this.mediaTypes_=function createMediaTypes(){var mediaTypes={};return["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach((function(type){mediaTypes[type]={groups:{},tracks:{},activePlaylistLoader:null,activeGroup:noop,activeTrack:noop,onGroupChanged:noop,onTrackChanged:noop}})),mediaTypes}(),_this.mediaSource=new videojs$1.MediaSource,_this.mediaSource.addEventListener("sourceopen",_this.handleSourceOpen_.bind(_this)),_this.seekable_=videojs$1.createTimeRanges(),_this.hasPlayed_=function(){return!1},_this.syncController_=new SyncController(options),_this.segmentMetadataTrack_=tech.addRemoteTextTrack({kind:"metadata",label:"segment-metadata"},!1).track,_this.decrypter_=new Decrypter$1,_this.inbandTextTracks_={};var segmentLoaderSettings={hls:_this.hls_,mediaSource:_this.mediaSource,currentTime:_this.tech_.currentTime.bind(_this.tech_),seekable:function seekable$$1(){return _this.seekable()},seeking:function seeking(){return _this.tech_.seeking()},duration:function duration$$1(){return _this.mediaSource.duration},hasPlayed:function hasPlayed(){return _this.hasPlayed_()},goalBufferLength:function goalBufferLength(){return _this.goalBufferLength()},bandwidth,syncController:_this.syncController_,decrypter:_this.decrypter_,sourceType:_this.sourceType_,inbandTextTracks:_this.inbandTextTracks_,cacheEncryptionKeys};return _this.masterPlaylistLoader_="dash"===_this.sourceType_?new DashPlaylistLoader(url,_this.hls_,_this.requestOptions_):new PlaylistLoader(url,_this.hls_,_this.requestOptions_),_this.setupMasterPlaylistLoaderListeners_(),_this.mainSegmentLoader_=new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings,{segmentMetadataTrack:_this.segmentMetadataTrack_,loaderType:"main"}),options),_this.audioSegmentLoader_=new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings,{loaderType:"audio"}),options),_this.subtitleSegmentLoader_=new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings,{loaderType:"vtt"}),options),_this.setupSegmentLoaderListeners_(),loaderStats.forEach((function(stat){_this[stat+"_"]=sumLoaderStat.bind(_this,stat)})),_this.logger_=logger("MPC"),_this.masterPlaylistLoader_.load(),_this}return video_es_inherits(MasterPlaylistController,_videojs$EventTarget),video_es_createClass(MasterPlaylistController,[{key:"setupMasterPlaylistLoaderListeners_",value:function setupMasterPlaylistLoaderListeners_(){var _this2=this;this.masterPlaylistLoader_.on("loadedmetadata",(function(){var media=_this2.masterPlaylistLoader_.media(),requestTimeout=1.5*media.targetDuration*1e3;isLowestEnabledRendition(_this2.masterPlaylistLoader_.master,_this2.masterPlaylistLoader_.media())?_this2.requestOptions_.timeout=0:_this2.requestOptions_.timeout=requestTimeout,media.endList&&"none"!==_this2.tech_.preload()&&(_this2.mainSegmentLoader_.playlist(media,_this2.requestOptions_),_this2.mainSegmentLoader_.load()),setupMediaGroups({sourceType:_this2.sourceType_,segmentLoaders:{AUDIO:_this2.audioSegmentLoader_,SUBTITLES:_this2.subtitleSegmentLoader_,main:_this2.mainSegmentLoader_},tech:_this2.tech_,requestOptions:_this2.requestOptions_,masterPlaylistLoader:_this2.masterPlaylistLoader_,hls:_this2.hls_,master:_this2.master(),mediaTypes:_this2.mediaTypes_,blacklistCurrentPlaylist:_this2.blacklistCurrentPlaylist.bind(_this2)}),_this2.triggerPresenceUsage_(_this2.master(),media);try{_this2.setupSourceBuffers_()}catch(e){return videojs$1.log.warn("Failed to create SourceBuffers",e),_this2.mediaSource.endOfStream("decode")}_this2.setupFirstPlay(),!_this2.mediaTypes_.AUDIO.activePlaylistLoader||_this2.mediaTypes_.AUDIO.activePlaylistLoader.media()?_this2.trigger("selectedinitialmedia"):_this2.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata",(function(){_this2.trigger("selectedinitialmedia")}))})),this.masterPlaylistLoader_.on("loadedplaylist",(function(){var updatedPlaylist=_this2.masterPlaylistLoader_.media();if(!updatedPlaylist){_this2.excludeUnsupportedVariants_();var selectedMedia=void 0;return _this2.enableLowInitialPlaylist&&(selectedMedia=_this2.selectInitialPlaylist()),selectedMedia||(selectedMedia=_this2.selectPlaylist()),_this2.initialMedia_=selectedMedia,void _this2.masterPlaylistLoader_.media(_this2.initialMedia_)}if(_this2.useCueTags_&&_this2.updateAdCues_(updatedPlaylist),_this2.mainSegmentLoader_.playlist(updatedPlaylist,_this2.requestOptions_),_this2.updateDuration(),_this2.tech_.paused()||(_this2.mainSegmentLoader_.load(),_this2.audioSegmentLoader_&&_this2.audioSegmentLoader_.load()),!updatedPlaylist.endList){var addSeekableRange=function addSeekableRange(){var seekable$$1=_this2.seekable();0!==seekable$$1.length&&_this2.mediaSource.addSeekableRange_(seekable$$1.start(0),seekable$$1.end(0))};if(_this2.duration()!==1/0){_this2.tech_.one("durationchange",(function onDurationchange(){_this2.duration()===1/0?addSeekableRange():_this2.tech_.one("durationchange",onDurationchange)}))}else addSeekableRange()}})),this.masterPlaylistLoader_.on("error",(function(){_this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error)})),this.masterPlaylistLoader_.on("mediachanging",(function(){_this2.mainSegmentLoader_.abort(),_this2.mainSegmentLoader_.pause()})),this.masterPlaylistLoader_.on("mediachange",(function(){var media=_this2.masterPlaylistLoader_.media(),requestTimeout=1.5*media.targetDuration*1e3;isLowestEnabledRendition(_this2.masterPlaylistLoader_.master,_this2.masterPlaylistLoader_.media())?_this2.requestOptions_.timeout=0:_this2.requestOptions_.timeout=requestTimeout,_this2.mainSegmentLoader_.playlist(media,_this2.requestOptions_),_this2.mainSegmentLoader_.load(),_this2.tech_.trigger({type:"mediachange",bubbles:!0})})),this.masterPlaylistLoader_.on("playlistunchanged",(function(){var updatedPlaylist=_this2.masterPlaylistLoader_.media();_this2.stuckAtPlaylistEnd_(updatedPlaylist)&&(_this2.blacklistCurrentPlaylist({message:"Playlist no longer updating."}),_this2.tech_.trigger("playliststuck"))})),this.masterPlaylistLoader_.on("renditiondisabled",(function(){_this2.tech_.trigger({type:"usage",name:"hls-rendition-disabled"})})),this.masterPlaylistLoader_.on("renditionenabled",(function(){_this2.tech_.trigger({type:"usage",name:"hls-rendition-enabled"})}))}},{key:"triggerPresenceUsage_",value:function triggerPresenceUsage_(master,media){var mediaGroups=master.mediaGroups||{},defaultDemuxed=!0,audioGroupKeys=Object.keys(mediaGroups.AUDIO);for(var mediaGroup in mediaGroups.AUDIO)for(var label in mediaGroups.AUDIO[mediaGroup]){mediaGroups.AUDIO[mediaGroup][label].uri||(defaultDemuxed=!1)}defaultDemuxed&&this.tech_.trigger({type:"usage",name:"hls-demuxed"}),Object.keys(mediaGroups.SUBTITLES).length&&this.tech_.trigger({type:"usage",name:"hls-webvtt"}),Hls.Playlist.isAes(media)&&this.tech_.trigger({type:"usage",name:"hls-aes"}),Hls.Playlist.isFmp4(media)&&this.tech_.trigger({type:"usage",name:"hls-fmp4"}),audioGroupKeys.length&&Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length>1&&this.tech_.trigger({type:"usage",name:"hls-alternate-audio"}),this.useCueTags_&&this.tech_.trigger({type:"usage",name:"hls-playlist-cue-tags"})}},{key:"setupSegmentLoaderListeners_",value:function setupSegmentLoaderListeners_(){var _this3=this;this.mainSegmentLoader_.on("bandwidthupdate",(function(){var nextPlaylist=_this3.selectPlaylist(),currentPlaylist=_this3.masterPlaylistLoader_.media(),buffered=_this3.tech_.buffered(),forwardBuffer=buffered.length?buffered.end(buffered.length-1)-_this3.tech_.currentTime():0,bufferLowWaterLine=_this3.bufferLowWaterLine();(!currentPlaylist.endList||_this3.duration()<Config.MAX_BUFFER_LOW_WATER_LINE||nextPlaylist.attributes.BANDWIDTH<currentPlaylist.attributes.BANDWIDTH||forwardBuffer>=bufferLowWaterLine)&&_this3.masterPlaylistLoader_.media(nextPlaylist),_this3.tech_.trigger("bandwidthupdate")})),this.mainSegmentLoader_.on("progress",(function(){_this3.trigger("progress")})),this.mainSegmentLoader_.on("error",(function(){_this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error())})),this.mainSegmentLoader_.on("syncinfoupdate",(function(){_this3.onSyncInfoUpdate_()})),this.mainSegmentLoader_.on("timestampoffset",(function(){_this3.tech_.trigger({type:"usage",name:"hls-timestamp-offset"})})),this.audioSegmentLoader_.on("syncinfoupdate",(function(){_this3.onSyncInfoUpdate_()})),this.mainSegmentLoader_.on("ended",(function(){_this3.onEndOfStream()})),this.mainSegmentLoader_.on("earlyabort",(function(){_this3.blacklistCurrentPlaylist({message:"Aborted early because there isn't enough bandwidth to complete the request without rebuffering."},120)})),this.mainSegmentLoader_.on("reseteverything",(function(){_this3.tech_.trigger("hls-reset")})),this.mainSegmentLoader_.on("segmenttimemapping",(function(event){_this3.tech_.trigger({type:"hls-segment-time-mapping",mapping:event.mapping})})),this.audioSegmentLoader_.on("ended",(function(){_this3.onEndOfStream()}))}},{key:"mediaSecondsLoaded_",value:function mediaSecondsLoaded_(){return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded+this.mainSegmentLoader_.mediaSecondsLoaded)}},{key:"load",value:function load(){this.mainSegmentLoader_.load(),this.mediaTypes_.AUDIO.activePlaylistLoader&&this.audioSegmentLoader_.load(),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&this.subtitleSegmentLoader_.load()}},{key:"smoothQualityChange_",value:function smoothQualityChange_(){var media=this.selectPlaylist();media!==this.masterPlaylistLoader_.media()&&(this.masterPlaylistLoader_.media(media),this.mainSegmentLoader_.resetLoader())}},{key:"fastQualityChange_",value:function fastQualityChange_(){var _this4=this,media=this.selectPlaylist();media!==this.masterPlaylistLoader_.media()&&(this.masterPlaylistLoader_.media(media),this.mainSegmentLoader_.resetEverything((function(){videojs$1.browser.IE_VERSION||videojs$1.browser.IS_EDGE?_this4.tech_.setCurrentTime(_this4.tech_.currentTime()+.04):_this4.tech_.setCurrentTime(_this4.tech_.currentTime())})))}},{key:"play",value:function play(){if(!this.setupFirstPlay()){this.tech_.ended()&&this.seekTo_(0),this.hasPlayed_()&&this.load();var seekable$$1=this.tech_.seekable();return this.tech_.duration()===1/0&&this.tech_.currentTime()<seekable$$1.start(0)?this.seekTo_(seekable$$1.end(seekable$$1.length-1)):void 0}}},{key:"setupFirstPlay",value:function setupFirstPlay(){var _this5=this,media=this.masterPlaylistLoader_.media();if(!media||this.tech_.paused()||this.hasPlayed_())return!1;if(!media.endList){var seekable$$1=this.seekable();if(!seekable$$1.length)return!1;if(videojs$1.browser.IE_VERSION&&0===this.tech_.readyState())return this.tech_.one("loadedmetadata",(function(){_this5.trigger("firstplay"),_this5.seekTo_(seekable$$1.end(0)),_this5.hasPlayed_=function(){return!0}})),!1;this.trigger("firstplay"),this.seekTo_(seekable$$1.end(0))}return this.hasPlayed_=function(){return!0},this.load(),!0}},{key:"handleSourceOpen_",value:function handleSourceOpen_(){try{this.setupSourceBuffers_()}catch(e){return videojs$1.log.warn("Failed to create Source Buffers",e),this.mediaSource.endOfStream("decode")}if(this.tech_.autoplay()){var playPromise=this.tech_.play();void 0!==playPromise&&"function"==typeof playPromise.then&&playPromise.then(null,(function(e){}))}this.trigger("sourceopen")}},{key:"onEndOfStream",value:function onEndOfStream(){var isEndOfStream=this.mainSegmentLoader_.ended_;if(this.mediaTypes_.AUDIO.activePlaylistLoader&&(isEndOfStream=!this.mainSegmentLoader_.startingMedia_||this.mainSegmentLoader_.startingMedia_.containsVideo?isEndOfStream&&this.audioSegmentLoader_.ended_:this.audioSegmentLoader_.ended_),isEndOfStream){this.logger_("calling mediaSource.endOfStream()");try{this.mediaSource.endOfStream()}catch(e){videojs$1.log.warn("Failed to call media source endOfStream",e)}}}},{key:"stuckAtPlaylistEnd_",value:function stuckAtPlaylistEnd_(playlist){if(!this.seekable().length)return!1;var expired=this.syncController_.getExpiredTime(playlist,this.mediaSource.duration);if(null===expired)return!1;var absolutePlaylistEnd=Hls.Playlist.playlistEnd(playlist,expired),currentTime=this.tech_.currentTime(),buffered=this.tech_.buffered();if(!buffered.length)return absolutePlaylistEnd-currentTime<=.1;var bufferedEnd=buffered.end(buffered.length-1);return bufferedEnd-currentTime<=.1&&absolutePlaylistEnd-bufferedEnd<=.1}},{key:"blacklistCurrentPlaylist",value:function blacklistCurrentPlaylist(){var nextPlaylist,error=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},blacklistDuration=arguments[1],currentPlaylist=void 0;if(currentPlaylist=error.playlist||this.masterPlaylistLoader_.media(),blacklistDuration=blacklistDuration||error.blacklistDuration||this.blacklistDuration,!currentPlaylist){this.error=error;try{return this.mediaSource.endOfStream("network")}catch(e){return this.trigger("error")}}var isFinalRendition=1===this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length,playlists=this.masterPlaylistLoader_.master.playlists;return 1===playlists.length?(videojs$1.log.warn("Problem encountered with the current HLS playlist. Trying again since it is the only playlist."),this.tech_.trigger("retryplaylist"),this.masterPlaylistLoader_.load(isFinalRendition)):(isFinalRendition&&(videojs$1.log.warn("Removing all playlists from the blacklist because the last rendition is about to be blacklisted."),playlists.forEach((function(playlist){playlist.excludeUntil!==1/0&&delete playlist.excludeUntil})),this.tech_.trigger("retryplaylist")),currentPlaylist.excludeUntil=Date.now()+1e3*blacklistDuration,this.tech_.trigger("blacklistplaylist"),this.tech_.trigger({type:"usage",name:"hls-rendition-blacklisted"}),nextPlaylist=this.selectPlaylist(),videojs$1.log.warn("Problem encountered with the current HLS playlist."+(error.message?" "+error.message:"")+" Switching to another playlist."),this.masterPlaylistLoader_.media(nextPlaylist,isFinalRendition))}},{key:"pauseLoading",value:function pauseLoading(){this.mainSegmentLoader_.pause(),this.mediaTypes_.AUDIO.activePlaylistLoader&&this.audioSegmentLoader_.pause(),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&this.subtitleSegmentLoader_.pause()}},{key:"setCurrentTime",value:function setCurrentTime(currentTime){var buffered=findRange(this.tech_.buffered(),currentTime);return this.masterPlaylistLoader_&&this.masterPlaylistLoader_.media()&&this.masterPlaylistLoader_.media().segments?buffered&&buffered.length?currentTime:(this.mainSegmentLoader_.resetEverything(),this.mainSegmentLoader_.abort(),this.mediaTypes_.AUDIO.activePlaylistLoader&&(this.audioSegmentLoader_.resetEverything(),this.audioSegmentLoader_.abort()),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&(this.subtitleSegmentLoader_.resetEverything(),this.subtitleSegmentLoader_.abort()),void this.load()):0}},{key:"duration",value:function duration$$1(){return this.masterPlaylistLoader_?this.mediaSource?this.mediaSource.duration:Hls.Playlist.duration(this.masterPlaylistLoader_.media()):0}},{key:"seekable",value:function seekable$$1(){return this.seekable_}},{key:"onSyncInfoUpdate_",value:function onSyncInfoUpdate_(){var mainSeekable=void 0,audioSeekable=void 0;if(this.masterPlaylistLoader_){var media=this.masterPlaylistLoader_.media();if(media){var expired=this.syncController_.getExpiredTime(media,this.mediaSource.duration);if(null!==expired&&0!==(mainSeekable=Hls.Playlist.seekable(media,expired)).length){if(this.mediaTypes_.AUDIO.activePlaylistLoader){if(media=this.mediaTypes_.AUDIO.activePlaylistLoader.media(),null===(expired=this.syncController_.getExpiredTime(media,this.mediaSource.duration)))return;if(0===(audioSeekable=Hls.Playlist.seekable(media,expired)).length)return}var oldEnd=void 0,oldStart=void 0;this.seekable_&&this.seekable_.length&&(oldEnd=this.seekable_.end(0),oldStart=this.seekable_.start(0)),audioSeekable?audioSeekable.start(0)>mainSeekable.end(0)||mainSeekable.start(0)>audioSeekable.end(0)?this.seekable_=mainSeekable:this.seekable_=videojs$1.createTimeRanges([[audioSeekable.start(0)>mainSeekable.start(0)?audioSeekable.start(0):mainSeekable.start(0),audioSeekable.end(0)<mainSeekable.end(0)?audioSeekable.end(0):mainSeekable.end(0)]]):this.seekable_=mainSeekable,this.seekable_&&this.seekable_.length&&this.seekable_.end(0)===oldEnd&&this.seekable_.start(0)===oldStart||(this.logger_("seekable updated ["+printableRange(this.seekable_)+"]"),this.tech_.trigger("seekablechanged"))}}}}},{key:"updateDuration",value:function updateDuration(){var _this6=this,oldDuration=this.mediaSource.duration,newDuration=Hls.Playlist.duration(this.masterPlaylistLoader_.media()),buffered=this.tech_.buffered(),setDuration=function setDuration(){_this6.logger_("Setting duration from "+_this6.mediaSource.duration+" => "+newDuration);try{_this6.mediaSource.duration=newDuration}catch(e){videojs$1.log.warn("Failed to set media source duration",e)}_this6.tech_.trigger("durationchange"),_this6.mediaSource.removeEventListener("sourceopen",setDuration)};buffered.length>0&&(newDuration=Math.max(newDuration,buffered.end(buffered.length-1))),oldDuration!==newDuration&&("open"!==this.mediaSource.readyState?this.mediaSource.addEventListener("sourceopen",setDuration):setDuration())}},{key:"dispose",value:function dispose(){var _this7=this;this.decrypter_.terminate(),this.masterPlaylistLoader_.dispose(),this.mainSegmentLoader_.dispose(),["AUDIO","SUBTITLES"].forEach((function(type){var groups=_this7.mediaTypes_[type].groups;for(var id in groups)groups[id].forEach((function(group){group.playlistLoader&&group.playlistLoader.dispose()}))})),this.audioSegmentLoader_.dispose(),this.subtitleSegmentLoader_.dispose()}},{key:"master",value:function master(){return this.masterPlaylistLoader_.master}},{key:"media",value:function media(){return this.masterPlaylistLoader_.media()||this.initialMedia_}},{key:"setupSourceBuffers_",value:function setupSourceBuffers_(){var mimeTypes,media=this.masterPlaylistLoader_.media();if(media&&"open"===this.mediaSource.readyState){if((mimeTypes=mimeTypesForPlaylist(this.masterPlaylistLoader_.master,media)).length<1)return this.error="No compatible SourceBuffer configuration for the variant stream:"+media.resolvedUri,this.mediaSource.endOfStream("decode");this.configureLoaderMimeTypes_(mimeTypes),this.excludeIncompatibleVariants_(media)}}},{key:"configureLoaderMimeTypes_",value:function configureLoaderMimeTypes_(mimeTypes){var sourceBufferEmitter=mimeTypes.length>1&&-1===mimeTypes[0].indexOf(",")&&mimeTypes[0]!==mimeTypes[1]?new videojs$1.EventTarget:null;this.mainSegmentLoader_.mimeType(mimeTypes[0],sourceBufferEmitter),mimeTypes[1]&&this.audioSegmentLoader_.mimeType(mimeTypes[1],sourceBufferEmitter)}},{key:"excludeUnsupportedVariants_",value:function excludeUnsupportedVariants_(){this.master().playlists.forEach((function(variant){variant.attributes.CODECS&&window_default().MediaSource&&window_default().MediaSource.isTypeSupported&&!window_default().MediaSource.isTypeSupported('video/mp4; codecs="'+function mapLegacyAvcCodecs(codecString){return codecString.replace(/avc1\.(\d+)\.(\d+)/i,(function(match){return translateLegacyCodecs([match])[0]}))}(variant.attributes.CODECS)+'"')&&(variant.excludeUntil=1/0)}))}},{key:"excludeIncompatibleVariants_",value:function excludeIncompatibleVariants_(media){var codecCount=2,videoCodec=null,codecs=void 0;media.attributes.CODECS&&(codecs=parseCodecs(media.attributes.CODECS),videoCodec=codecs.videoCodec,codecCount=codecs.codecCount),this.master().playlists.forEach((function(variant){var variantCodecs={codecCount:2,videoCodec:null};variant.attributes.CODECS&&(variantCodecs=parseCodecs(variant.attributes.CODECS)),variantCodecs.codecCount!==codecCount&&(variant.excludeUntil=1/0),variantCodecs.videoCodec!==videoCodec&&(variant.excludeUntil=1/0)}))}},{key:"updateAdCues_",value:function updateAdCues_(media){var offset=0,seekable$$1=this.seekable();seekable$$1.length&&(offset=seekable$$1.start(0)),function updateAdCues(media,track){var offset=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(media.segments)for(var mediaTime=offset,cue=void 0,i=0;i<media.segments.length;i++){var segment=media.segments[i];if(cue||(cue=findAdCue(track,mediaTime+segment.duration/2)),cue){if("cueIn"in segment){cue.endTime=mediaTime,cue.adEndTime=mediaTime,mediaTime+=segment.duration,cue=null;continue}if(mediaTime<cue.endTime){mediaTime+=segment.duration;continue}cue.endTime+=segment.duration}else if("cueOut"in segment&&((cue=new(window_default().VTTCue)(mediaTime,mediaTime+segment.duration,segment.cueOut)).adStartTime=mediaTime,cue.adEndTime=mediaTime+parseFloat(segment.cueOut),track.addCue(cue)),"cueOutCont"in segment){var adOffset,adTotal,_segment$cueOutCont$s=segment.cueOutCont.split("/").map(parseFloat),_segment$cueOutCont$s2=slicedToArray(_segment$cueOutCont$s,2);adOffset=_segment$cueOutCont$s2[0],adTotal=_segment$cueOutCont$s2[1],(cue=new(window_default().VTTCue)(mediaTime,mediaTime+segment.duration,"")).adStartTime=mediaTime-adOffset,cue.adEndTime=cue.adStartTime+adTotal,track.addCue(cue)}mediaTime+=segment.duration}}(media,this.cueTagsTrack_,offset)}},{key:"goalBufferLength",value:function goalBufferLength(){var currentTime=this.tech_.currentTime(),initial=Config.GOAL_BUFFER_LENGTH,rate=Config.GOAL_BUFFER_LENGTH_RATE,max=Math.max(initial,Config.MAX_GOAL_BUFFER_LENGTH);return Math.min(initial+currentTime*rate,max)}},{key:"bufferLowWaterLine",value:function bufferLowWaterLine(){var currentTime=this.tech_.currentTime(),initial=Config.BUFFER_LOW_WATER_LINE,rate=Config.BUFFER_LOW_WATER_LINE_RATE,max=Math.max(initial,Config.MAX_BUFFER_LOW_WATER_LINE);return Math.min(initial+currentTime*rate,max)}}]),MasterPlaylistController}(videojs$1.EventTarget),Representation=function Representation(hlsHandler,playlist,id){video_es_classCallCheck(this,Representation);var mpc=hlsHandler.masterPlaylistController_,qualityChangeFunction=mpc[(hlsHandler.options_.smoothQualityChange?"smooth":"fast")+"QualityChange_"].bind(mpc);if(playlist.attributes.RESOLUTION){var resolution=playlist.attributes.RESOLUTION;this.width=resolution.width,this.height=resolution.height}this.bandwidth=playlist.attributes.BANDWIDTH,this.id=id,this.enabled=function enableFunction(loader,playlistUri,changePlaylistFn){return function(enable){var playlist=loader.master.playlists[playlistUri],incompatible=isIncompatible(playlist),currentlyEnabled=isEnabled(playlist);return void 0===enable?currentlyEnabled:(enable?delete playlist.disabled:playlist.disabled=!0,enable===currentlyEnabled||incompatible||(changePlaylistFn(),enable?loader.trigger("renditionenabled"):loader.trigger("renditiondisabled")),enable)}}(hlsHandler.playlists,playlist.uri,qualityChangeFunction)},timerCancelEvents=["seeking","seeked","pause","playing","error"],PlaybackWatcher=function(){function PlaybackWatcher(options){var _this=this;video_es_classCallCheck(this,PlaybackWatcher),this.tech_=options.tech,this.seekable=options.seekable,this.seekTo=options.seekTo,this.allowSeeksWithinUnsafeLiveWindow=options.allowSeeksWithinUnsafeLiveWindow,this.media=options.media,this.consecutiveUpdates=0,this.lastRecordedTime=null,this.timer_=null,this.checkCurrentTimeTimeout_=null,this.logger_=logger("PlaybackWatcher"),this.logger_("initialize");var canPlayHandler=function canPlayHandler(){return _this.monitorCurrentTime_()},waitingHandler=function waitingHandler(){return _this.techWaiting_()},cancelTimerHandler=function cancelTimerHandler(){return _this.cancelTimer_()},fixesBadSeeksHandler=function fixesBadSeeksHandler(){return _this.fixesBadSeeks_()};this.tech_.on("seekablechanged",fixesBadSeeksHandler),this.tech_.on("waiting",waitingHandler),this.tech_.on(timerCancelEvents,cancelTimerHandler),this.tech_.on("canplay",canPlayHandler),this.dispose=function(){_this.logger_("dispose"),_this.tech_.off("seekablechanged",fixesBadSeeksHandler),_this.tech_.off("waiting",waitingHandler),_this.tech_.off(timerCancelEvents,cancelTimerHandler),_this.tech_.off("canplay",canPlayHandler),_this.checkCurrentTimeTimeout_&&window_default().clearTimeout(_this.checkCurrentTimeTimeout_),_this.cancelTimer_()}}return video_es_createClass(PlaybackWatcher,[{key:"monitorCurrentTime_",value:function monitorCurrentTime_(){this.checkCurrentTime_(),this.checkCurrentTimeTimeout_&&window_default().clearTimeout(this.checkCurrentTimeTimeout_),this.checkCurrentTimeTimeout_=window_default().setTimeout(this.monitorCurrentTime_.bind(this),250)}},{key:"checkCurrentTime_",value:function checkCurrentTime_(){if(this.tech_.seeking()&&this.fixesBadSeeks_())return this.consecutiveUpdates=0,void(this.lastRecordedTime=this.tech_.currentTime());if(!this.tech_.paused()&&!this.tech_.seeking()){var currentTime=this.tech_.currentTime(),buffered=this.tech_.buffered();if(this.lastRecordedTime===currentTime&&(!buffered.length||currentTime+.1>=buffered.end(buffered.length-1)))return this.techWaiting_();this.consecutiveUpdates>=5&&currentTime===this.lastRecordedTime?(this.consecutiveUpdates++,this.waiting_()):currentTime===this.lastRecordedTime?this.consecutiveUpdates++:(this.consecutiveUpdates=0,this.lastRecordedTime=currentTime)}}},{key:"cancelTimer_",value:function cancelTimer_(){this.consecutiveUpdates=0,this.timer_&&(this.logger_("cancelTimer_"),clearTimeout(this.timer_)),this.timer_=null}},{key:"fixesBadSeeks_",value:function fixesBadSeeks_(){if(!this.tech_.seeking())return!1;var seekable=this.seekable(),currentTime=this.tech_.currentTime(),seekTo=void 0;this.afterSeekableWindow_(seekable,currentTime,this.media(),this.allowSeeksWithinUnsafeLiveWindow)&&(seekTo=seekable.end(seekable.length-1));this.beforeSeekableWindow_(seekable,currentTime)&&(seekTo=seekable.start(0)+.1);return void 0!==seekTo&&(this.logger_("Trying to seek outside of seekable at time "+currentTime+" with seekable range "+printableRange(seekable)+". Seeking to "+seekTo+"."),this.seekTo(seekTo),!0)}},{key:"waiting_",value:function waiting_(){if(!this.techWaiting_()){var currentTime=this.tech_.currentTime(),buffered=this.tech_.buffered(),currentRange=findRange(buffered,currentTime);return currentRange.length&&currentTime+3<=currentRange.end(0)?(this.cancelTimer_(),this.seekTo(currentTime),this.logger_("Stopped at "+currentTime+" while inside a buffered region ["+currentRange.start(0)+" -> "+currentRange.end(0)+"]. Attempting to resume playback by seeking to the current time."),void this.tech_.trigger({type:"usage",name:"hls-unknown-waiting"})):void 0}}},{key:"techWaiting_",value:function techWaiting_(){var seekable=this.seekable(),currentTime=this.tech_.currentTime();if(this.tech_.seeking()&&this.fixesBadSeeks_())return!0;if(this.tech_.seeking()||null!==this.timer_)return!0;if(this.beforeSeekableWindow_(seekable,currentTime)){var livePoint=seekable.end(seekable.length-1);return this.logger_("Fell out of live window at time "+currentTime+". Seeking to live point (seekable end) "+livePoint),this.cancelTimer_(),this.seekTo(livePoint),this.tech_.trigger({type:"usage",name:"hls-live-resync"}),!0}var buffered=this.tech_.buffered(),nextRange=findNextRange(buffered,currentTime);if(this.videoUnderflow_(nextRange,buffered,currentTime))return this.cancelTimer_(),this.seekTo(currentTime),this.tech_.trigger({type:"usage",name:"hls-video-underflow"}),!0;if(nextRange.length>0){var difference=nextRange.start(0)-currentTime;return this.logger_("Stopped at "+currentTime+", setting timer for "+difference+", seeking to "+nextRange.start(0)),this.timer_=setTimeout(this.skipTheGap_.bind(this),1e3*difference,currentTime),!0}return!1}},{key:"afterSeekableWindow_",value:function afterSeekableWindow_(seekable,currentTime,playlist){var allowSeeksWithinUnsafeLiveWindow=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!seekable.length)return!1;var allowedEnd=seekable.end(seekable.length-1)+.1;return!playlist.endList&&allowSeeksWithinUnsafeLiveWindow&&(allowedEnd=seekable.end(seekable.length-1)+3*playlist.targetDuration),currentTime>allowedEnd}},{key:"beforeSeekableWindow_",value:function beforeSeekableWindow_(seekable,currentTime){return!!(seekable.length&&seekable.start(0)>0&&currentTime<seekable.start(0)-.1)}},{key:"videoUnderflow_",value:function videoUnderflow_(nextRange,buffered,currentTime){if(0===nextRange.length){var gap=this.gapFromVideoUnderflow_(buffered,currentTime);if(gap)return this.logger_("Encountered a gap in video from "+gap.start+" to "+gap.end+". Seeking to current time "+currentTime),!0}return!1}},{key:"skipTheGap_",value:function skipTheGap_(scheduledCurrentTime){var buffered=this.tech_.buffered(),currentTime=this.tech_.currentTime(),nextRange=findNextRange(buffered,currentTime);this.cancelTimer_(),0!==nextRange.length&&currentTime===scheduledCurrentTime&&(this.logger_("skipTheGap_:","currentTime:",currentTime,"scheduled currentTime:",scheduledCurrentTime,"nextRange start:",nextRange.start(0)),this.seekTo(nextRange.start(0)+.03333333333333333),this.tech_.trigger({type:"usage",name:"hls-gap-skip"}))}},{key:"gapFromVideoUnderflow_",value:function gapFromVideoUnderflow_(buffered,currentTime){for(var gaps=function findGaps(buffered){if(buffered.length<2)return videojs$1.createTimeRanges();for(var ranges=[],i=1;i<buffered.length;i++){var start=buffered.end(i-1),end=buffered.start(i);ranges.push([start,end])}return videojs$1.createTimeRanges(ranges)}(buffered),i=0;i<gaps.length;i++){var start=gaps.start(i),end=gaps.end(i);if(currentTime-start<4&&currentTime-start>2)return{start,end}}return null}}]),PlaybackWatcher}(),defaultOptions={errorInterval:30,getSource:function getSource(next){return next(this.tech({IWillNotUseThisInPlugins:!0}).currentSource_)}},initPlugin=function initPlugin(player,options){var lastCalled=0,seekTo=0,localOptions=videojs$1.mergeOptions(defaultOptions,options);player.ready((function(){player.trigger({type:"usage",name:"hls-error-reload-initialized"})}));var loadedMetadataHandler=function loadedMetadataHandler(){seekTo&&player.currentTime(seekTo)},setSource=function setSource(sourceObj){null!=sourceObj&&(seekTo=player.duration()!==1/0&&player.currentTime()||0,player.one("loadedmetadata",loadedMetadataHandler),player.src(sourceObj),player.trigger({type:"usage",name:"hls-error-reload"}),player.play())},errorHandler=function errorHandler(){if(Date.now()-lastCalled<1e3*localOptions.errorInterval)player.trigger({type:"usage",name:"hls-error-reload-canceled"});else{if(localOptions.getSource&&"function"==typeof localOptions.getSource)return lastCalled=Date.now(),localOptions.getSource.call(player,setSource);videojs$1.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!")}},cleanupEvents=function cleanupEvents(){player.off("loadedmetadata",loadedMetadataHandler),player.off("error",errorHandler),player.off("dispose",cleanupEvents)};player.on("error",errorHandler),player.on("dispose",cleanupEvents),player.reloadSourceOnError=function reinitPlugin(newOptions){cleanupEvents(),initPlugin(player,newOptions)}},reloadSourceOnError=function reloadSourceOnError(options){initPlugin(this,options)};videojs$1.use("*",(function(player){return{setSource:function setSource(srcObj,next){next(null,srcObj)},setCurrentTime:function setCurrentTime(time){return player.vhs&&player.currentSource().src===player.vhs.source_.src&&player.vhs.setCurrentTime(time),time},play:function play(){player.vhs&&player.currentSource().src===player.vhs.source_.src&&player.vhs.setCurrentTime(player.tech_.currentTime())}}}));var Hls$1={PlaylistLoader,Playlist,Decrypter,AsyncStream,decrypt,utils,STANDARD_PLAYLIST_SELECTOR:function lastBandwidthSelector(){return function simpleSelector(master,playerBandwidth,playerWidth,playerHeight,limitRenditionByPlayerDimensions){var sortedPlaylistReps=master.playlists.map((function(playlist){var width,height;return width=playlist.attributes.RESOLUTION&&playlist.attributes.RESOLUTION.width,height=playlist.attributes.RESOLUTION&&playlist.attributes.RESOLUTION.height,{bandwidth:playlist.attributes.BANDWIDTH||window_default().Number.MAX_VALUE,width,height,playlist}}));stableSort(sortedPlaylistReps,(function(left,right){return left.bandwidth-right.bandwidth}));var enabledPlaylistReps=(sortedPlaylistReps=sortedPlaylistReps.filter((function(rep){return!Playlist.isIncompatible(rep.playlist)}))).filter((function(rep){return Playlist.isEnabled(rep.playlist)}));enabledPlaylistReps.length||(enabledPlaylistReps=sortedPlaylistReps.filter((function(rep){return!Playlist.isDisabled(rep.playlist)})));var bandwidthPlaylistReps=enabledPlaylistReps.filter((function(rep){return rep.bandwidth*Config.BANDWIDTH_VARIANCE<playerBandwidth})),highestRemainingBandwidthRep=bandwidthPlaylistReps[bandwidthPlaylistReps.length-1],bandwidthBestRep=bandwidthPlaylistReps.filter((function(rep){return rep.bandwidth===highestRemainingBandwidthRep.bandwidth}))[0];if(!1===limitRenditionByPlayerDimensions){var _chosenRep=bandwidthBestRep||enabledPlaylistReps[0]||sortedPlaylistReps[0];return _chosenRep?_chosenRep.playlist:null}var haveResolution=bandwidthPlaylistReps.filter((function(rep){return rep.width&&rep.height}));stableSort(haveResolution,(function(left,right){return left.width-right.width}));var resolutionBestRepList=haveResolution.filter((function(rep){return rep.width===playerWidth&&rep.height===playerHeight}));highestRemainingBandwidthRep=resolutionBestRepList[resolutionBestRepList.length-1];var resolutionBestRep=resolutionBestRepList.filter((function(rep){return rep.bandwidth===highestRemainingBandwidthRep.bandwidth}))[0],resolutionPlusOneList=void 0,resolutionPlusOneSmallest=void 0,resolutionPlusOneRep=void 0;resolutionBestRep||(resolutionPlusOneSmallest=(resolutionPlusOneList=haveResolution.filter((function(rep){return rep.width>playerWidth||rep.height>playerHeight}))).filter((function(rep){return rep.width===resolutionPlusOneList[0].width&&rep.height===resolutionPlusOneList[0].height})),highestRemainingBandwidthRep=resolutionPlusOneSmallest[resolutionPlusOneSmallest.length-1],resolutionPlusOneRep=resolutionPlusOneSmallest.filter((function(rep){return rep.bandwidth===highestRemainingBandwidthRep.bandwidth}))[0]);var chosenRep=resolutionPlusOneRep||resolutionBestRep||bandwidthBestRep||enabledPlaylistReps[0]||sortedPlaylistReps[0];return chosenRep?chosenRep.playlist:null}(this.playlists.master,this.systemBandwidth,parseInt(safeGetComputedStyle(this.tech_.el(),"width"),10),parseInt(safeGetComputedStyle(this.tech_.el(),"height"),10),this.limitRenditionByPlayerDimensions)},INITIAL_PLAYLIST_SELECTOR:function lowestBitrateCompatibleVariantSelector(){var playlists=this.playlists.master.playlists.filter(Playlist.isEnabled);return stableSort(playlists,(function(a,b){return comparePlaylistBandwidth(a,b)})),playlists.filter((function(playlist){return parseCodecs(playlist.attributes.CODECS).videoCodec}))[0]||null},comparePlaylistBandwidth,comparePlaylistResolution:function comparePlaylistResolution(left,right){var leftWidth=void 0,rightWidth=void 0;return left.attributes.RESOLUTION&&left.attributes.RESOLUTION.width&&(leftWidth=left.attributes.RESOLUTION.width),leftWidth=leftWidth||window_default().Number.MAX_VALUE,right.attributes.RESOLUTION&&right.attributes.RESOLUTION.width&&(rightWidth=right.attributes.RESOLUTION.width),leftWidth===(rightWidth=rightWidth||window_default().Number.MAX_VALUE)&&left.attributes.BANDWIDTH&&right.attributes.BANDWIDTH?left.attributes.BANDWIDTH-right.attributes.BANDWIDTH:leftWidth-rightWidth},xhr:xhrFactory()};["GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","BANDWIDTH_VARIANCE"].forEach((function(prop){Object.defineProperty(Hls$1,prop,{get:function get$$1(){return videojs$1.log.warn("using Hls."+prop+" is UNSAFE be sure you know what you are doing"),Config[prop]},set:function set$$1(value){videojs$1.log.warn("using Hls."+prop+" is UNSAFE be sure you know what you are doing"),"number"!=typeof value||value<0?videojs$1.log.warn("value of Hls."+prop+" must be greater than or equal to 0"):Config[prop]=value}})}));var simpleTypeFromSourceType=function simpleTypeFromSourceType(type){if(/^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i.test(type))return"hls";return/^application\/dash\+xml/i.test(type)?"dash":null},handleHlsMediaChange=function handleHlsMediaChange(qualityLevels,playlistLoader){for(var newPlaylist=playlistLoader.media(),selectedIndex=-1,i=0;i<qualityLevels.length;i++)if(qualityLevels[i].id===newPlaylist.uri){selectedIndex=i;break}qualityLevels.selectedIndex_=selectedIndex,qualityLevels.trigger({selectedIndex,type:"change"})};Hls$1.canPlaySource=function(){return videojs$1.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.")};var setupEmeOptions=function setupEmeOptions(hlsHandler){if("dash"===hlsHandler.options_.sourceType){var player=videojs$1.players[hlsHandler.tech_.options_.playerId];if(player.eme){var sourceOptions=function emeKeySystems(keySystemOptions,videoPlaylist,audioPlaylist){if(!keySystemOptions)return keySystemOptions;var keySystemContentTypes={};for(var keySystem in keySystemOptions)keySystemContentTypes[keySystem]={audioContentType:'audio/mp4; codecs="'+audioPlaylist.attributes.CODECS+'"',videoContentType:'video/mp4; codecs="'+videoPlaylist.attributes.CODECS+'"'},videoPlaylist.contentProtection&&videoPlaylist.contentProtection[keySystem]&&videoPlaylist.contentProtection[keySystem].pssh&&(keySystemContentTypes[keySystem].pssh=videoPlaylist.contentProtection[keySystem].pssh),"string"==typeof keySystemOptions[keySystem]&&(keySystemContentTypes[keySystem].url=keySystemOptions[keySystem]);return videojs$1.mergeOptions(keySystemOptions,keySystemContentTypes)}(hlsHandler.source_.keySystems,hlsHandler.playlists.media(),hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());sourceOptions&&(player.currentSource().keySystems=sourceOptions,player.eme.initializeMediaKeys&&player.eme.initializeMediaKeys())}}},getVhsLocalStorage=function getVhsLocalStorage(){if(!window.localStorage)return null;var storedObject=window.localStorage.getItem("videojs-vhs");if(!storedObject)return null;try{return JSON.parse(storedObject)}catch(e){return null}};Hls$1.supportsNativeHls=function(){var video=document_default().createElement("video");if(!videojs$1.getTech("Html5").isSupported())return!1;return["application/vnd.apple.mpegurl","audio/mpegurl","audio/x-mpegurl","application/x-mpegurl","video/x-mpegurl","video/mpegurl","application/mpegurl"].some((function(canItPlay){return/maybe|probably/i.test(video.canPlayType(canItPlay))}))}(),Hls$1.supportsNativeDash=!!videojs$1.getTech("Html5").isSupported()&&/maybe|probably/i.test(document_default().createElement("video").canPlayType("application/dash+xml")),Hls$1.supportsTypeNatively=function(type){return"hls"===type?Hls$1.supportsNativeHls:"dash"===type&&Hls$1.supportsNativeDash},Hls$1.isSupported=function(){return videojs$1.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.")};var HlsHandler=function(_Component){function HlsHandler(source,tech,options){video_es_classCallCheck(this,HlsHandler);var _this=video_es_possibleConstructorReturn(this,(HlsHandler.__proto__||Object.getPrototypeOf(HlsHandler)).call(this,tech,options.hls));if(tech.options_&&tech.options_.playerId){var _player=videojs$1(tech.options_.playerId);_player.hasOwnProperty("hls")||Object.defineProperty(_player,"hls",{get:function get$$1(){return videojs$1.log.warn("player.hls is deprecated. Use player.tech().hls instead."),tech.trigger({type:"usage",name:"hls-player-access"}),_this},configurable:!0}),_player.vhs=_this,_player.dash=_this,_this.player_=_player}if(_this.tech_=tech,_this.source_=source,_this.stats={},_this.setOptions_(),_this.options_.overrideNative&&tech.overrideNativeAudioTracks&&tech.overrideNativeVideoTracks)tech.overrideNativeAudioTracks(!0),tech.overrideNativeVideoTracks(!0);else if(_this.options_.overrideNative&&(tech.featuresNativeVideoTracks||tech.featuresNativeAudioTracks))throw new Error("Overriding native HLS requires emulated tracks. See https://git.io/vMpjB");return _this.on(document_default(),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"],(function(event){var fullscreenElement=document_default().fullscreenElement||document_default().webkitFullscreenElement||document_default().mozFullScreenElement||document_default().msFullscreenElement;fullscreenElement&&fullscreenElement.contains(_this.tech_.el())&&_this.masterPlaylistController_.smoothQualityChange_()})),_this.on(_this.tech_,"seeking",(function(){0===this.tech_.currentTime()&&this.tech_.player_.loop()&&this.setCurrentTime(0)})),_this.on(_this.tech_,"error",(function(){this.masterPlaylistController_&&this.masterPlaylistController_.pauseLoading()})),_this.on(_this.tech_,"play",_this.play),_this}return video_es_inherits(HlsHandler,_Component),video_es_createClass(HlsHandler,[{key:"setOptions_",value:function setOptions_(){var _this2=this;if(this.options_.withCredentials=this.options_.withCredentials||!1,this.options_.handleManifestRedirects=this.options_.handleManifestRedirects||!1,this.options_.limitRenditionByPlayerDimensions=!1!==this.options_.limitRenditionByPlayerDimensions,this.options_.smoothQualityChange=this.options_.smoothQualityChange||!1,this.options_.useBandwidthFromLocalStorage=void 0!==this.source_.useBandwidthFromLocalStorage?this.source_.useBandwidthFromLocalStorage:this.options_.useBandwidthFromLocalStorage||!1,this.options_.customTagParsers=this.options_.customTagParsers||[],this.options_.customTagMappers=this.options_.customTagMappers||[],this.options_.cacheEncryptionKeys=this.options_.cacheEncryptionKeys||!1,"number"!=typeof this.options_.blacklistDuration&&(this.options_.blacklistDuration=300),"number"!=typeof this.options_.bandwidth&&this.options_.useBandwidthFromLocalStorage){var storedObject=getVhsLocalStorage();storedObject&&storedObject.bandwidth&&(this.options_.bandwidth=storedObject.bandwidth,this.tech_.trigger({type:"usage",name:"hls-bandwidth-from-local-storage"})),storedObject&&storedObject.throughput&&(this.options_.throughput=storedObject.throughput,this.tech_.trigger({type:"usage",name:"hls-throughput-from-local-storage"}))}"number"!=typeof this.options_.bandwidth&&(this.options_.bandwidth=Config.INITIAL_BANDWIDTH),this.options_.enableLowInitialPlaylist=this.options_.enableLowInitialPlaylist&&this.options_.bandwidth===Config.INITIAL_BANDWIDTH,["withCredentials","limitRenditionByPlayerDimensions","bandwidth","smoothQualityChange","customTagParsers","customTagMappers","handleManifestRedirects","cacheEncryptionKeys"].forEach((function(option){void 0!==_this2.source_[option]&&(_this2.options_[option]=_this2.source_[option])})),this.limitRenditionByPlayerDimensions=this.options_.limitRenditionByPlayerDimensions}},{key:"src",value:function src(_src,type){var _this3=this;_src&&(this.setOptions_(),this.options_.url=this.source_.src,this.options_.tech=this.tech_,this.options_.externHls=Hls$1,this.options_.sourceType=simpleTypeFromSourceType(type),this.options_.seekTo=function(time){_this3.tech_.setCurrentTime(time),_this3.setCurrentTime(time)},this.masterPlaylistController_=new MasterPlaylistController(this.options_),this.playbackWatcher_=new PlaybackWatcher(videojs$1.mergeOptions(this.options_,{seekable:function seekable$$1(){return _this3.seekable()},media:function media(){return _this3.masterPlaylistController_.media()}})),this.masterPlaylistController_.on("error",(function(){videojs$1.players[_this3.tech_.options_.playerId].error(_this3.masterPlaylistController_.error)})),this.masterPlaylistController_.selectPlaylist=this.selectPlaylist?this.selectPlaylist.bind(this):Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this),this.masterPlaylistController_.selectInitialPlaylist=Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this),this.playlists=this.masterPlaylistController_.masterPlaylistLoader_,this.mediaSource=this.masterPlaylistController_.mediaSource,Object.defineProperties(this,{selectPlaylist:{get:function get$$1(){return this.masterPlaylistController_.selectPlaylist},set:function set$$1(selectPlaylist){this.masterPlaylistController_.selectPlaylist=selectPlaylist.bind(this)}},throughput:{get:function get$$1(){return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate},set:function set$$1(throughput){this.masterPlaylistController_.mainSegmentLoader_.throughput.rate=throughput,this.masterPlaylistController_.mainSegmentLoader_.throughput.count=1}},bandwidth:{get:function get$$1(){return this.masterPlaylistController_.mainSegmentLoader_.bandwidth},set:function set$$1(bandwidth){this.masterPlaylistController_.mainSegmentLoader_.bandwidth=bandwidth,this.masterPlaylistController_.mainSegmentLoader_.throughput={rate:0,count:0}}},systemBandwidth:{get:function get$$1(){var invBandwidth=1/(this.bandwidth||1),invThroughput=void 0;return invThroughput=this.throughput>0?1/this.throughput:0,Math.floor(1/(invBandwidth+invThroughput))},set:function set$$1(){videojs$1.log.error('The "systemBandwidth" property is read-only')}}}),this.options_.bandwidth&&(this.bandwidth=this.options_.bandwidth),this.options_.throughput&&(this.throughput=this.options_.throughput),Object.defineProperties(this.stats,{bandwidth:{get:function get$$1(){return _this3.bandwidth||0},enumerable:!0},mediaRequests:{get:function get$$1(){return _this3.masterPlaylistController_.mediaRequests_()||0},enumerable:!0},mediaRequestsAborted:{get:function get$$1(){return _this3.masterPlaylistController_.mediaRequestsAborted_()||0},enumerable:!0},mediaRequestsTimedout:{get:function get$$1(){return _this3.masterPlaylistController_.mediaRequestsTimedout_()||0},enumerable:!0},mediaRequestsErrored:{get:function get$$1(){return _this3.masterPlaylistController_.mediaRequestsErrored_()||0},enumerable:!0},mediaTransferDuration:{get:function get$$1(){return _this3.masterPlaylistController_.mediaTransferDuration_()||0},enumerable:!0},mediaBytesTransferred:{get:function get$$1(){return _this3.masterPlaylistController_.mediaBytesTransferred_()||0},enumerable:!0},mediaSecondsLoaded:{get:function get$$1(){return _this3.masterPlaylistController_.mediaSecondsLoaded_()||0},enumerable:!0},buffered:{get:function get$$1(){return timeRangesToArray(_this3.tech_.buffered())},enumerable:!0},currentTime:{get:function get$$1(){return _this3.tech_.currentTime()},enumerable:!0},currentSource:{get:function get$$1(){return _this3.tech_.currentSource_},enumerable:!0},currentTech:{get:function get$$1(){return _this3.tech_.name_},enumerable:!0},duration:{get:function get$$1(){return _this3.tech_.duration()},enumerable:!0},master:{get:function get$$1(){return _this3.playlists.master},enumerable:!0},playerDimensions:{get:function get$$1(){return _this3.tech_.currentDimensions()},enumerable:!0},seekable:{get:function get$$1(){return timeRangesToArray(_this3.tech_.seekable())},enumerable:!0},timestamp:{get:function get$$1(){return Date.now()},enumerable:!0},videoPlaybackQuality:{get:function get$$1(){return _this3.tech_.getVideoPlaybackQuality()},enumerable:!0}}),this.tech_.one("canplay",this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_)),this.tech_.on("bandwidthupdate",(function(){_this3.options_.useBandwidthFromLocalStorage&&function updateVhsLocalStorage(options){if(!window.localStorage)return!1;var objectToStore=getVhsLocalStorage();objectToStore=objectToStore?videojs$1.mergeOptions(objectToStore,options):options;try{window.localStorage.setItem("videojs-vhs",JSON.stringify(objectToStore))}catch(e){return!1}}({bandwidth:_this3.bandwidth,throughput:Math.round(_this3.throughput)})})),this.masterPlaylistController_.on("selectedinitialmedia",(function(){!function renditionSelectionMixin(hlsHandler){var playlists=hlsHandler.playlists;hlsHandler.representations=function(){return playlists.master.playlists.filter((function(media){return!isIncompatible(media)})).map((function(e,i){return new Representation(hlsHandler,e,e.uri)}))}}(_this3),setupEmeOptions(_this3)})),this.on(this.masterPlaylistController_,"progress",(function(){this.tech_.trigger("progress")})),this.tech_.ready((function(){return _this3.setupQualityLevels_()})),this.tech_.el()&&this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource)))}},{key:"setupQualityLevels_",value:function setupQualityLevels_(){var _this4=this,player=videojs$1.players[this.tech_.options_.playerId];player&&player.qualityLevels&&(this.qualityLevels_=player.qualityLevels(),this.masterPlaylistController_.on("selectedinitialmedia",(function(){!function handleHlsLoadedMetadata(qualityLevels,hls){hls.representations().forEach((function(rep){qualityLevels.addQualityLevel(rep)})),handleHlsMediaChange(qualityLevels,hls.playlists)}(_this4.qualityLevels_,_this4)})),this.playlists.on("mediachange",(function(){handleHlsMediaChange(_this4.qualityLevels_,_this4.playlists)})))}},{key:"play",value:function play(){this.masterPlaylistController_.play()}},{key:"setCurrentTime",value:function setCurrentTime(currentTime){this.masterPlaylistController_.setCurrentTime(currentTime)}},{key:"duration",value:function duration$$1(){return this.masterPlaylistController_.duration()}},{key:"seekable",value:function seekable$$1(){return this.masterPlaylistController_.seekable()}},{key:"dispose",value:function dispose(){this.playbackWatcher_&&this.playbackWatcher_.dispose(),this.masterPlaylistController_&&this.masterPlaylistController_.dispose(),this.qualityLevels_&&this.qualityLevels_.dispose(),this.player_&&(delete this.player_.vhs,delete this.player_.dash,delete this.player_.hls),this.tech_&&this.tech_.hls&&delete this.tech_.hls,get$1(HlsHandler.prototype.__proto__||Object.getPrototypeOf(HlsHandler.prototype),"dispose",this).call(this)}},{key:"convertToProgramTime",value:function convertToProgramTime(time,callback){return getProgramTime({playlist:this.masterPlaylistController_.media(),time,callback})}},{key:"seekToProgramTime",value:function seekToProgramTime$$1(programTime,callback){var pauseAfterSeek=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],retryCount=arguments.length>3&&void 0!==arguments[3]?arguments[3]:2;return seekToProgramTime({programTime,playlist:this.masterPlaylistController_.media(),retryCount,pauseAfterSeek,seekTo:this.options_.seekTo,tech:this.options_.tech,callback})}}]),HlsHandler}(videojs$1.getComponent("Component")),HlsSourceHandler={name:"videojs-http-streaming",VERSION:"1.10.6",canHandleSource:function canHandleSource(srcObj){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},localOptions=videojs$1.mergeOptions(videojs$1.options,options);return HlsSourceHandler.canPlayType(srcObj.type,localOptions)},handleSource:function handleSource(source,tech){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},localOptions=videojs$1.mergeOptions(videojs$1.options,options);return tech.hls=new HlsHandler(source,tech,localOptions),tech.hls.xhr=xhrFactory(),tech.hls.src(source.src,source.type),tech.hls},canPlayType:function canPlayType(type){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},overrideNative=videojs$1.mergeOptions(videojs$1.options,options).hls.overrideNative,supportedType=simpleTypeFromSourceType(type);return supportedType&&(!Hls$1.supportsTypeNatively(supportedType)||overrideNative)?"maybe":""}};void 0!==videojs$1.MediaSource&&void 0!==videojs$1.URL||(videojs$1.MediaSource=MediaSource,videojs$1.URL=URL$1),MediaSource.supportsNativeMediaSources()&&videojs$1.getTech("Html5").registerSourceHandler(HlsSourceHandler,0),videojs$1.HlsHandler=HlsHandler,videojs$1.HlsSourceHandler=HlsSourceHandler,videojs$1.Hls=Hls$1,videojs$1.use||videojs$1.registerComponent("Hls",Hls$1),videojs$1.options.hls=videojs$1.options.hls||{},videojs$1.registerPlugin?videojs$1.registerPlugin("reloadSourceOnError",reloadSourceOnError):videojs$1.plugin("reloadSourceOnError",reloadSourceOnError);const video_es=videojs$1},"./node_modules/video.js/node_modules/safe-json-parse/tuple.js":module=>{module.exports=function SafeParseTuple(obj,reviver){var json,error=null;try{json=JSON.parse(obj,reviver)}catch(err){error=err}return[error,json]}},"./node_modules/videojs-vtt.js/lib/browser-index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var window=__webpack_require__("./node_modules/videojs-vtt.js/node_modules/global/window.js"),vttjs=module.exports={WebVTT:__webpack_require__("./node_modules/videojs-vtt.js/lib/vtt.js"),VTTCue:__webpack_require__("./node_modules/videojs-vtt.js/lib/vttcue.js"),VTTRegion:__webpack_require__("./node_modules/videojs-vtt.js/lib/vttregion.js")};window.vttjs=vttjs,window.WebVTT=vttjs.WebVTT;var cueShim=vttjs.VTTCue,regionShim=vttjs.VTTRegion,nativeVTTCue=window.VTTCue,nativeVTTRegion=window.VTTRegion;vttjs.shim=function(){window.VTTCue=cueShim,window.VTTRegion=regionShim},vttjs.restore=function(){window.VTTCue=nativeVTTCue,window.VTTRegion=nativeVTTRegion},window.VTTCue||vttjs.shim()},"./node_modules/videojs-vtt.js/lib/vtt.js":module=>{var _objCreate=Object.create||function(){function F(){}return function(o){if(1!==arguments.length)throw new Error("Object.create shim only accepts one parameter.");return F.prototype=o,new F}}();function ParsingError(errorData,message){this.name="ParsingError",this.code=errorData.code,this.message=message||errorData.message}function parseTimeStamp(input){function computeSeconds(h,m,s,f){return 3600*(0|h)+60*(0|m)+(0|s)+(0|f)/1e3}var m=input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return m?m[3]?computeSeconds(m[1],m[2],m[3].replace(":",""),m[4]):m[1]>59?computeSeconds(m[1],m[2],0,m[4]):computeSeconds(0,m[1],m[2],m[4]):null}function Settings(){this.values=_objCreate(null)}function parseOptions(input,callback,keyValueDelim,groupDelim){var groups=groupDelim?input.split(groupDelim):[input];for(var i in groups)if("string"==typeof groups[i]){var kv=groups[i].split(keyValueDelim);if(2===kv.length)callback(kv[0],kv[1])}}function parseCue(input,cue,regionList){var oInput=input;function consumeTimeStamp(){var ts=parseTimeStamp(input);if(null===ts)throw new ParsingError(ParsingError.Errors.BadTimeStamp,"Malformed timestamp: "+oInput);return input=input.replace(/^[^\sa-zA-Z-]+/,""),ts}function skipWhitespace(){input=input.replace(/^\s+/,"")}if(skipWhitespace(),cue.startTime=consumeTimeStamp(),skipWhitespace(),"--\x3e"!==input.substr(0,3))throw new ParsingError(ParsingError.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '--\x3e'): "+oInput);input=input.substr(3),skipWhitespace(),cue.endTime=consumeTimeStamp(),skipWhitespace(),function consumeCueSettings(input,cue){var settings=new Settings;parseOptions(input,(function(k,v){switch(k){case"region":for(var i=regionList.length-1;i>=0;i--)if(regionList[i].id===v){settings.set(k,regionList[i].region);break}break;case"vertical":settings.alt(k,v,["rl","lr"]);break;case"line":var vals=v.split(","),vals0=vals[0];settings.integer(k,vals0),settings.percent(k,vals0)&&settings.set("snapToLines",!1),settings.alt(k,vals0,["auto"]),2===vals.length&&settings.alt("lineAlign",vals[1],["start","middle","end"]);break;case"position":vals=v.split(","),settings.percent(k,vals[0]),2===vals.length&&settings.alt("positionAlign",vals[1],["start","middle","end"]);break;case"size":settings.percent(k,v);break;case"align":settings.alt(k,v,["start","middle","end","left","right"])}}),/:/,/\s/),cue.region=settings.get("region",null),cue.vertical=settings.get("vertical",""),cue.line=settings.get("line","auto"),cue.lineAlign=settings.get("lineAlign","start"),cue.snapToLines=settings.get("snapToLines",!0),cue.size=settings.get("size",100),cue.align=settings.get("align","middle"),cue.position=settings.get("position",{start:0,left:0,middle:50,end:100,right:100},cue.align),cue.positionAlign=settings.get("positionAlign",{start:"start",left:"start",middle:"middle",end:"end",right:"end"},cue.align)}(input,cue)}ParsingError.prototype=_objCreate(Error.prototype),ParsingError.prototype.constructor=ParsingError,ParsingError.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},Settings.prototype={set:function(k,v){this.get(k)||""===v||(this.values[k]=v)},get:function(k,dflt,defaultKey){return defaultKey?this.has(k)?this.values[k]:dflt[defaultKey]:this.has(k)?this.values[k]:dflt},has:function(k){return k in this.values},alt:function(k,v,a){for(var n=0;n<a.length;++n)if(v===a[n]){this.set(k,v);break}},integer:function(k,v){/^-?\d+$/.test(v)&&this.set(k,parseInt(v,10))},percent:function(k,v){return!!(v.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(v=parseFloat(v))>=0&&v<=100)&&(this.set(k,v),!0)}};var ESCAPE={"&amp;":"&","&lt;":"<","&gt;":">","&lrm;":"‎","&rlm;":"‏","&nbsp;":" "},TAG_NAME={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},TAG_ANNOTATION={v:"title",lang:"lang"},NEEDS_PARENT={rt:"ruby"};function parseContent(window,input){function nextToken(){if(!input)return null;var m=input.match(/^([^<]*)(<[^>]*>?)?/);return function consume(result){return input=input.substr(result.length),result}(m[1]?m[1]:m[2])}function unescape1(e){return ESCAPE[e]}function unescape(s){for(;m=s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);)s=s.replace(m[0],unescape1);return s}function shouldAdd(current,element){return!NEEDS_PARENT[element.localName]||NEEDS_PARENT[element.localName]===current.localName}function createElement(type,annotation){var tagName=TAG_NAME[type];if(!tagName)return null;var element=window.document.createElement(tagName);element.localName=tagName;var name=TAG_ANNOTATION[type];return name&&annotation&&(element[name]=annotation.trim()),element}for(var t,rootDiv=window.document.createElement("div"),current=rootDiv,tagStack=[];null!==(t=nextToken());)if("<"!==t[0])current.appendChild(window.document.createTextNode(unescape(t)));else{if("/"===t[1]){tagStack.length&&tagStack[tagStack.length-1]===t.substr(2).replace(">","")&&(tagStack.pop(),current=current.parentNode);continue}var node,ts=parseTimeStamp(t.substr(1,t.length-2));if(ts){node=window.document.createProcessingInstruction("timestamp",ts),current.appendChild(node);continue}var m=t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if(!m)continue;if(!(node=createElement(m[1],m[3])))continue;if(!shouldAdd(current,node))continue;m[2]&&(node.className=m[2].substr(1).replace("."," ")),tagStack.push(m[1]),current.appendChild(node),current=node}return rootDiv}var strongRTLRanges=[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1520,1524],[1544,1544],[1547,1547],[1549,1549],[1563,1563],[1566,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2208,2208],[2210,2220],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67679],[67840,67867],[67872,67897],[67903,67903],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68147],[68160,68167],[68176,68184],[68192,68223],[68352,68405],[68416,68437],[68440,68466],[68472,68479],[68608,68680],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[1114109,1114109]];function isStrongRTLChar(charCode){for(var i=0;i<strongRTLRanges.length;i++){var currentRange=strongRTLRanges[i];if(charCode>=currentRange[0]&&charCode<=currentRange[1])return!0}return!1}function determineBidi(cueDiv){var nodeStack=[],text="";if(!cueDiv||!cueDiv.childNodes)return"ltr";function pushNodes(nodeStack,node){for(var i=node.childNodes.length-1;i>=0;i--)nodeStack.push(node.childNodes[i])}function nextTextNode(nodeStack){if(!nodeStack||!nodeStack.length)return null;var node=nodeStack.pop(),text=node.textContent||node.innerText;if(text){var m=text.match(/^.*(\n|\r)/);return m?(nodeStack.length=0,m[0]):text}return"ruby"===node.tagName?nextTextNode(nodeStack):node.childNodes?(pushNodes(nodeStack,node),nextTextNode(nodeStack)):void 0}for(pushNodes(nodeStack,cueDiv);text=nextTextNode(nodeStack);)for(var i=0;i<text.length;i++)if(isStrongRTLChar(text.charCodeAt(i)))return"rtl";return"ltr"}function StyleBox(){}function CueStyleBox(window,cue,styleOptions){StyleBox.call(this),this.cue=cue,this.cueDiv=parseContent(window,cue.text);var styles={color:"rgba(255, 255, 255, 1)",backgroundColor:"rgba(0, 0, 0, 0.8)",position:"relative",left:0,right:0,top:0,bottom:0,display:"inline",writingMode:""===cue.vertical?"horizontal-tb":"lr"===cue.vertical?"vertical-lr":"vertical-rl",unicodeBidi:"plaintext"};this.applyStyles(styles,this.cueDiv),this.div=window.document.createElement("div"),styles={direction:determineBidi(this.cueDiv),writingMode:""===cue.vertical?"horizontal-tb":"lr"===cue.vertical?"vertical-lr":"vertical-rl",unicodeBidi:"plaintext",textAlign:"middle"===cue.align?"center":cue.align,font:styleOptions.font,whiteSpace:"pre-line",position:"absolute"},this.applyStyles(styles),this.div.appendChild(this.cueDiv);var textPos=0;switch(cue.positionAlign){case"start":textPos=cue.position;break;case"middle":textPos=cue.position-cue.size/2;break;case"end":textPos=cue.position-cue.size}""===cue.vertical?this.applyStyles({left:this.formatStyle(textPos,"%"),width:this.formatStyle(cue.size,"%")}):this.applyStyles({top:this.formatStyle(textPos,"%"),height:this.formatStyle(cue.size,"%")}),this.move=function(box){this.applyStyles({top:this.formatStyle(box.top,"px"),bottom:this.formatStyle(box.bottom,"px"),left:this.formatStyle(box.left,"px"),right:this.formatStyle(box.right,"px"),height:this.formatStyle(box.height,"px"),width:this.formatStyle(box.width,"px")})}}function BoxPosition(obj){var lh,height,width,top;if(obj.div){height=obj.div.offsetHeight,width=obj.div.offsetWidth,top=obj.div.offsetTop;var rects=(rects=obj.div.childNodes)&&(rects=rects[0])&&rects.getClientRects&&rects.getClientRects();obj=obj.div.getBoundingClientRect(),lh=rects?Math.max(rects[0]&&rects[0].height||0,obj.height/rects.length):0}this.left=obj.left,this.right=obj.right,this.top=obj.top||top,this.height=obj.height||height,this.bottom=obj.bottom||top+(obj.height||height),this.width=obj.width||width,this.lineHeight=void 0!==lh?lh:obj.lineHeight}function moveBoxToLinePosition(window,styleBox,containerBox,boxPositions){var boxPosition=new BoxPosition(styleBox),cue=styleBox.cue,linePos=function computeLinePos(cue){if("number"==typeof cue.line&&(cue.snapToLines||cue.line>=0&&cue.line<=100))return cue.line;if(!cue.track||!cue.track.textTrackList||!cue.track.textTrackList.mediaElement)return-1;for(var track=cue.track,trackList=track.textTrackList,count=0,i=0;i<trackList.length&&trackList[i]!==track;i++)"showing"===trackList[i].mode&&count++;return-1*++count}(cue),axis=[];if(cue.snapToLines){var size;switch(cue.vertical){case"":axis=["+y","-y"],size="height";break;case"rl":axis=["+x","-x"],size="width";break;case"lr":axis=["-x","+x"],size="width"}var step=boxPosition.lineHeight,position=step*Math.round(linePos),maxPosition=containerBox[size]+step,initialAxis=axis[0];Math.abs(position)>maxPosition&&(position=position<0?-1:1,position*=Math.ceil(maxPosition/step)*step),linePos<0&&(position+=""===cue.vertical?containerBox.height:containerBox.width,axis=axis.reverse()),boxPosition.move(initialAxis,position)}else{var calculatedPercentage=boxPosition.lineHeight/containerBox.height*100;switch(cue.lineAlign){case"middle":linePos-=calculatedPercentage/2;break;case"end":linePos-=calculatedPercentage}switch(cue.vertical){case"":styleBox.applyStyles({top:styleBox.formatStyle(linePos,"%")});break;case"rl":styleBox.applyStyles({left:styleBox.formatStyle(linePos,"%")});break;case"lr":styleBox.applyStyles({right:styleBox.formatStyle(linePos,"%")})}axis=["+y","-x","+x","-y"],boxPosition=new BoxPosition(styleBox)}var bestPosition=function findBestPosition(b,axis){for(var bestPosition,specifiedPosition=new BoxPosition(b),percentage=1,i=0;i<axis.length;i++){for(;b.overlapsOppositeAxis(containerBox,axis[i])||b.within(containerBox)&&b.overlapsAny(boxPositions);)b.move(axis[i]);if(b.within(containerBox))return b;var p=b.intersectPercentage(containerBox);percentage>p&&(bestPosition=new BoxPosition(b),percentage=p),b=new BoxPosition(specifiedPosition)}return bestPosition||specifiedPosition}(boxPosition,axis);styleBox.move(bestPosition.toCSSCompatValues(containerBox))}function WebVTT(){}StyleBox.prototype.applyStyles=function(styles,div){for(var prop in div=div||this.div,styles)styles.hasOwnProperty(prop)&&(div.style[prop]=styles[prop])},StyleBox.prototype.formatStyle=function(val,unit){return 0===val?0:val+unit},CueStyleBox.prototype=_objCreate(StyleBox.prototype),CueStyleBox.prototype.constructor=CueStyleBox,BoxPosition.prototype.move=function(axis,toMove){switch(toMove=void 0!==toMove?toMove:this.lineHeight,axis){case"+x":this.left+=toMove,this.right+=toMove;break;case"-x":this.left-=toMove,this.right-=toMove;break;case"+y":this.top+=toMove,this.bottom+=toMove;break;case"-y":this.top-=toMove,this.bottom-=toMove}},BoxPosition.prototype.overlaps=function(b2){return this.left<b2.right&&this.right>b2.left&&this.top<b2.bottom&&this.bottom>b2.top},BoxPosition.prototype.overlapsAny=function(boxes){for(var i=0;i<boxes.length;i++)if(this.overlaps(boxes[i]))return!0;return!1},BoxPosition.prototype.within=function(container){return this.top>=container.top&&this.bottom<=container.bottom&&this.left>=container.left&&this.right<=container.right},BoxPosition.prototype.overlapsOppositeAxis=function(container,axis){switch(axis){case"+x":return this.left<container.left;case"-x":return this.right>container.right;case"+y":return this.top<container.top;case"-y":return this.bottom>container.bottom}},BoxPosition.prototype.intersectPercentage=function(b2){return Math.max(0,Math.min(this.right,b2.right)-Math.max(this.left,b2.left))*Math.max(0,Math.min(this.bottom,b2.bottom)-Math.max(this.top,b2.top))/(this.height*this.width)},BoxPosition.prototype.toCSSCompatValues=function(reference){return{top:this.top-reference.top,bottom:reference.bottom-this.bottom,left:this.left-reference.left,right:reference.right-this.right,height:this.height,width:this.width}},BoxPosition.getSimpleBoxPosition=function(obj){var height=obj.div?obj.div.offsetHeight:obj.tagName?obj.offsetHeight:0,width=obj.div?obj.div.offsetWidth:obj.tagName?obj.offsetWidth:0,top=obj.div?obj.div.offsetTop:obj.tagName?obj.offsetTop:0;return{left:(obj=obj.div?obj.div.getBoundingClientRect():obj.tagName?obj.getBoundingClientRect():obj).left,right:obj.right,top:obj.top||top,height:obj.height||height,bottom:obj.bottom||top+(obj.height||height),width:obj.width||width}},WebVTT.StringDecoder=function(){return{decode:function(data){if(!data)return"";if("string"!=typeof data)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(data))}}},WebVTT.convertCueToDOMTree=function(window,cuetext){return window&&cuetext?parseContent(window,cuetext):null};WebVTT.processCues=function(window,cues,overlay){if(!window||!cues||!overlay)return null;for(;overlay.firstChild;)overlay.removeChild(overlay.firstChild);var paddedOverlay=window.document.createElement("div");if(paddedOverlay.style.position="absolute",paddedOverlay.style.left="0",paddedOverlay.style.right="0",paddedOverlay.style.top="0",paddedOverlay.style.bottom="0",paddedOverlay.style.margin="1.5%",overlay.appendChild(paddedOverlay),function shouldCompute(cues){for(var i=0;i<cues.length;i++)if(cues[i].hasBeenReset||!cues[i].displayState)return!0;return!1}(cues)){var boxPositions=[],containerBox=BoxPosition.getSimpleBoxPosition(paddedOverlay),styleOptions={font:Math.round(.05*containerBox.height*100)/100+"px sans-serif"};!function(){for(var styleBox,cue,i=0;i<cues.length;i++)cue=cues[i],styleBox=new CueStyleBox(window,cue,styleOptions),paddedOverlay.appendChild(styleBox.div),moveBoxToLinePosition(0,styleBox,containerBox,boxPositions),cue.displayState=styleBox.div,boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox))}()}else for(var i=0;i<cues.length;i++)paddedOverlay.appendChild(cues[i].displayState)},WebVTT.Parser=function(window,vttjs,decoder){decoder||(decoder=vttjs,vttjs={}),vttjs||(vttjs={}),this.window=window,this.vttjs=vttjs,this.state="INITIAL",this.buffer="",this.decoder=decoder||new TextDecoder("utf8"),this.regionList=[]},WebVTT.Parser.prototype={reportOrThrowError:function(e){if(!(e instanceof ParsingError))throw e;this.onparsingerror&&this.onparsingerror(e)},parse:function(data){var self=this;function collectNextLine(){for(var buffer=self.buffer,pos=0;pos<buffer.length&&"\r"!==buffer[pos]&&"\n"!==buffer[pos];)++pos;var line=buffer.substr(0,pos);return"\r"===buffer[pos]&&++pos,"\n"===buffer[pos]&&++pos,self.buffer=buffer.substr(pos),line}function parseHeader(input){input.match(/X-TIMESTAMP-MAP/)?parseOptions(input,(function(k,v){if("X-TIMESTAMP-MAP"===k)!function parseTimestampMap(input){var settings=new Settings;parseOptions(input,(function(k,v){switch(k){case"MPEGT":settings.integer(k+"S",v);break;case"LOCA":settings.set(k+"L",parseTimeStamp(v))}}),/[^\d]:/,/,/),self.ontimestampmap&&self.ontimestampmap({MPEGTS:settings.get("MPEGTS"),LOCAL:settings.get("LOCAL")})}(v)}),/=/):parseOptions(input,(function(k,v){if("Region"===k)!function parseRegion(input){var settings=new Settings;if(parseOptions(input,(function(k,v){switch(k){case"id":settings.set(k,v);break;case"width":settings.percent(k,v);break;case"lines":settings.integer(k,v);break;case"regionanchor":case"viewportanchor":var xy=v.split(",");if(2!==xy.length)break;var anchor=new Settings;if(anchor.percent("x",xy[0]),anchor.percent("y",xy[1]),!anchor.has("x")||!anchor.has("y"))break;settings.set(k+"X",anchor.get("x")),settings.set(k+"Y",anchor.get("y"));break;case"scroll":settings.alt(k,v,["up"])}}),/=/,/\s/),settings.has("id")){var region=new(self.vttjs.VTTRegion||self.window.VTTRegion);region.width=settings.get("width",100),region.lines=settings.get("lines",3),region.regionAnchorX=settings.get("regionanchorX",0),region.regionAnchorY=settings.get("regionanchorY",100),region.viewportAnchorX=settings.get("viewportanchorX",0),region.viewportAnchorY=settings.get("viewportanchorY",100),region.scroll=settings.get("scroll",""),self.onregion&&self.onregion(region),self.regionList.push({id:settings.get("id"),region})}}(v)}),/:/)}data&&(self.buffer+=self.decoder.decode(data,{stream:!0}));try{var line;if("INITIAL"===self.state){if(!/\r\n|\n/.test(self.buffer))return this;var m=(line=collectNextLine()).match(/^WEBVTT([ \t].*)?$/);if(!m||!m[0])throw new ParsingError(ParsingError.Errors.BadSignature);self.state="HEADER"}for(var alreadyCollectedLine=!1;self.buffer;){if(!/\r\n|\n/.test(self.buffer))return this;switch(alreadyCollectedLine?alreadyCollectedLine=!1:line=collectNextLine(),self.state){case"HEADER":/:/.test(line)?parseHeader(line):line||(self.state="ID");continue;case"NOTE":line||(self.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(line)){self.state="NOTE";break}if(!line)continue;if(self.cue=new(self.vttjs.VTTCue||self.window.VTTCue)(0,0,""),self.state="CUE",-1===line.indexOf("--\x3e")){self.cue.id=line;continue}case"CUE":try{parseCue(line,self.cue,self.regionList)}catch(e){self.reportOrThrowError(e),self.cue=null,self.state="BADCUE";continue}self.state="CUETEXT";continue;case"CUETEXT":var hasSubstring=-1!==line.indexOf("--\x3e");if(!line||hasSubstring&&(alreadyCollectedLine=!0)){self.oncue&&self.oncue(self.cue),self.cue=null,self.state="ID";continue}self.cue.text&&(self.cue.text+="\n"),self.cue.text+=line;continue;case"BADCUE":line||(self.state="ID");continue}}}catch(e){self.reportOrThrowError(e),"CUETEXT"===self.state&&self.cue&&self.oncue&&self.oncue(self.cue),self.cue=null,self.state="INITIAL"===self.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{if(this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new ParsingError(ParsingError.Errors.BadSignature)}catch(e){this.reportOrThrowError(e)}return this.onflush&&this.onflush(),this}},module.exports=WebVTT},"./node_modules/videojs-vtt.js/lib/vttcue.js":module=>{var directionSetting={"":1,lr:1,rl:1},alignSetting={start:1,middle:1,end:1,left:1,right:1};function findAlignSetting(value){return"string"==typeof value&&(!!alignSetting[value.toLowerCase()]&&value.toLowerCase())}function VTTCue(startTime,endTime,text){this.hasBeenReset=!1;var _id="",_pauseOnExit=!1,_startTime=startTime,_endTime=endTime,_text=text,_region=null,_vertical="",_snapToLines=!0,_line="auto",_lineAlign="start",_position=50,_positionAlign="middle",_size=50,_align="middle";Object.defineProperties(this,{id:{enumerable:!0,get:function(){return _id},set:function(value){_id=""+value}},pauseOnExit:{enumerable:!0,get:function(){return _pauseOnExit},set:function(value){_pauseOnExit=!!value}},startTime:{enumerable:!0,get:function(){return _startTime},set:function(value){if("number"!=typeof value)throw new TypeError("Start time must be set to a number.");_startTime=value,this.hasBeenReset=!0}},endTime:{enumerable:!0,get:function(){return _endTime},set:function(value){if("number"!=typeof value)throw new TypeError("End time must be set to a number.");_endTime=value,this.hasBeenReset=!0}},text:{enumerable:!0,get:function(){return _text},set:function(value){_text=""+value,this.hasBeenReset=!0}},region:{enumerable:!0,get:function(){return _region},set:function(value){_region=value,this.hasBeenReset=!0}},vertical:{enumerable:!0,get:function(){return _vertical},set:function(value){var setting=function findDirectionSetting(value){return"string"==typeof value&&!!directionSetting[value.toLowerCase()]&&value.toLowerCase()}(value);if(!1===setting)throw new SyntaxError("An invalid or illegal string was specified.");_vertical=setting,this.hasBeenReset=!0}},snapToLines:{enumerable:!0,get:function(){return _snapToLines},set:function(value){_snapToLines=!!value,this.hasBeenReset=!0}},line:{enumerable:!0,get:function(){return _line},set:function(value){if("number"!=typeof value&&"auto"!==value)throw new SyntaxError("An invalid number or illegal string was specified.");_line=value,this.hasBeenReset=!0}},lineAlign:{enumerable:!0,get:function(){return _lineAlign},set:function(value){var setting=findAlignSetting(value);if(!setting)throw new SyntaxError("An invalid or illegal string was specified.");_lineAlign=setting,this.hasBeenReset=!0}},position:{enumerable:!0,get:function(){return _position},set:function(value){if(value<0||value>100)throw new Error("Position must be between 0 and 100.");_position=value,this.hasBeenReset=!0}},positionAlign:{enumerable:!0,get:function(){return _positionAlign},set:function(value){var setting=findAlignSetting(value);if(!setting)throw new SyntaxError("An invalid or illegal string was specified.");_positionAlign=setting,this.hasBeenReset=!0}},size:{enumerable:!0,get:function(){return _size},set:function(value){if(value<0||value>100)throw new Error("Size must be between 0 and 100.");_size=value,this.hasBeenReset=!0}},align:{enumerable:!0,get:function(){return _align},set:function(value){var setting=findAlignSetting(value);if(!setting)throw new SyntaxError("An invalid or illegal string was specified.");_align=setting,this.hasBeenReset=!0}}}),this.displayState=void 0}VTTCue.prototype.getCueAsHTML=function(){return WebVTT.convertCueToDOMTree(window,this.text)},module.exports=VTTCue},"./node_modules/videojs-vtt.js/lib/vttregion.js":module=>{var scrollSetting={"":!0,up:!0};function isValidPercentValue(value){return"number"==typeof value&&value>=0&&value<=100}module.exports=function VTTRegion(){var _width=100,_lines=3,_regionAnchorX=0,_regionAnchorY=100,_viewportAnchorX=0,_viewportAnchorY=100,_scroll="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return _width},set:function(value){if(!isValidPercentValue(value))throw new Error("Width must be between 0 and 100.");_width=value}},lines:{enumerable:!0,get:function(){return _lines},set:function(value){if("number"!=typeof value)throw new TypeError("Lines must be set to a number.");_lines=value}},regionAnchorY:{enumerable:!0,get:function(){return _regionAnchorY},set:function(value){if(!isValidPercentValue(value))throw new Error("RegionAnchorX must be between 0 and 100.");_regionAnchorY=value}},regionAnchorX:{enumerable:!0,get:function(){return _regionAnchorX},set:function(value){if(!isValidPercentValue(value))throw new Error("RegionAnchorY must be between 0 and 100.");_regionAnchorX=value}},viewportAnchorY:{enumerable:!0,get:function(){return _viewportAnchorY},set:function(value){if(!isValidPercentValue(value))throw new Error("ViewportAnchorY must be between 0 and 100.");_viewportAnchorY=value}},viewportAnchorX:{enumerable:!0,get:function(){return _viewportAnchorX},set:function(value){if(!isValidPercentValue(value))throw new Error("ViewportAnchorX must be between 0 and 100.");_viewportAnchorX=value}},scroll:{enumerable:!0,get:function(){return _scroll},set:function(value){var setting=function findScrollSetting(value){return"string"==typeof value&&!!scrollSetting[value.toLowerCase()]&&value.toLowerCase()}(value);if(!1===setting)throw new SyntaxError("An invalid or illegal string was specified.");_scroll=setting}}})}},"./node_modules/videojs-vtt.js/node_modules/global/window.js":(module,__unused_webpack_exports,__webpack_require__)=>{var win;win="undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:{},module.exports=win},"./node_modules/xhr/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var window=__webpack_require__("./node_modules/global/window.js"),isFunction=__webpack_require__("./node_modules/is-function/index.js"),parseHeaders=__webpack_require__("./node_modules/parse-headers/parse-headers.js"),xtend=__webpack_require__("./node_modules/xtend/immutable.js");function initParams(uri,options,callback){var params=uri;return isFunction(options)?(callback=options,"string"==typeof uri&&(params={uri})):params=xtend(options,{uri}),params.callback=callback,params}function createXHR(uri,options,callback){return _createXHR(options=initParams(uri,options,callback))}function _createXHR(options){if(void 0===options.callback)throw new Error("callback argument missing");var called=!1,callback=function cbOnce(err,response,body){called||(called=!0,options.callback(err,response,body))};function getBody(){var body=void 0;if(body=xhr.response?xhr.response:xhr.responseText||function getXml(xhr){if("document"===xhr.responseType)return xhr.responseXML;var firefoxBugTakenEffect=xhr.responseXML&&"parsererror"===xhr.responseXML.documentElement.nodeName;if(""===xhr.responseType&&!firefoxBugTakenEffect)return xhr.responseXML;return null}(xhr),isJson)try{body=JSON.parse(body)}catch(e){}return body}function errorFunc(evt){return clearTimeout(timeoutTimer),evt instanceof Error||(evt=new Error(""+(evt||"Unknown XMLHttpRequest Error"))),evt.statusCode=0,callback(evt,failureResponse)}function loadFunc(){if(!aborted){var status;clearTimeout(timeoutTimer),status=options.useXDR&&void 0===xhr.status?200:1223===xhr.status?204:xhr.status;var response=failureResponse,err=null;return 0!==status?(response={body:getBody(),statusCode:status,method,headers:{},url:uri,rawRequest:xhr},xhr.getAllResponseHeaders&&(response.headers=parseHeaders(xhr.getAllResponseHeaders()))):err=new Error("Internal XMLHttpRequest Error"),callback(err,response,response.body)}}var key,aborted,xhr=options.xhr||null;xhr||(xhr=options.cors||options.useXDR?new createXHR.XDomainRequest:new createXHR.XMLHttpRequest);var timeoutTimer,uri=xhr.url=options.uri||options.url,method=xhr.method=options.method||"GET",body=options.body||options.data,headers=xhr.headers=options.headers||{},sync=!!options.sync,isJson=!1,failureResponse={body:void 0,headers:{},statusCode:0,method,url:uri,rawRequest:xhr};if("json"in options&&!1!==options.json&&(isJson=!0,headers.accept||headers.Accept||(headers.Accept="application/json"),"GET"!==method&&"HEAD"!==method&&(headers["content-type"]||headers["Content-Type"]||(headers["Content-Type"]="application/json"),body=JSON.stringify(!0===options.json?body:options.json))),xhr.onreadystatechange=function readystatechange(){4===xhr.readyState&&setTimeout(loadFunc,0)},xhr.onload=loadFunc,xhr.onerror=errorFunc,xhr.onprogress=function(){},xhr.onabort=function(){aborted=!0},xhr.ontimeout=errorFunc,xhr.open(method,uri,!sync,options.username,options.password),sync||(xhr.withCredentials=!!options.withCredentials),!sync&&options.timeout>0&&(timeoutTimer=setTimeout((function(){if(!aborted){aborted=!0,xhr.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",errorFunc(e)}}),options.timeout)),xhr.setRequestHeader)for(key in headers)headers.hasOwnProperty(key)&&xhr.setRequestHeader(key,headers[key]);else if(options.headers&&!function isEmpty(obj){for(var i in obj)if(obj.hasOwnProperty(i))return!1;return!0}(options.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in options&&(xhr.responseType=options.responseType),"beforeSend"in options&&"function"==typeof options.beforeSend&&options.beforeSend(xhr),xhr.send(body||null),xhr}module.exports=createXHR,createXHR.XMLHttpRequest=window.XMLHttpRequest||function noop(){},createXHR.XDomainRequest="withCredentials"in new createXHR.XMLHttpRequest?createXHR.XMLHttpRequest:window.XDomainRequest,function forEachArray(array,iterator){for(var i=0;i<array.length;i++)iterator(array[i])}(["get","put","post","patch","head","delete"],(function(method){createXHR["delete"===method?"del":method]=function(uri,options,callback){return(options=initParams(uri,options,callback)).method=method.toUpperCase(),_createXHR(options)}}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUMsTUFBUSxPQUFTLENBQUMsTUFBUSxPQUMvRCxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FDbEUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQ3RFLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUN0RSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FDdEUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQ3RFLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUN0RSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFDdEUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQ3RFLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUN0RSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFDdEUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQ3RFLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUN0RSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFDdEUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQ3RFLENBQUMsT0FBUyxRQUFV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cEIsTUFmSSxpQkFBa0JoVCxVQUNsQnEzRSxJQUFJb3FCLGFBQWV6aEcsUUFBUXloRyxjQUczQixlQUFnQnpoRyxTQUNjLG1CQUF2QkEsUUFBUWd4SCxZQUVmaHhILFFBQVFneEgsV0FBVzM1QyxLQU12QkEsSUFBSTQ1QyxLQUFLdjZGLE1BQVEsTUFFVjJnRCxHQUdYLENBNU5BanBGLE9BQU9DLFFBQVVnaEksVUFDakJBLFVBQVVrQixlQUFpQnRpSSxPQUFPc2lJLGdCQXlPbEMsU0FBU2g0RyxPQUFRLEVBeE9qQjgyRyxVQUFVaUIsZUFBaUIsb0JBQXFCLElBQUtqQixVQUFVa0IsZUFBb0JsQixVQUFVa0IsZUFBaUJ0aUksT0FBT3FpSSxlQVVySCxTQUFTWSxhQUFhcjVHLE1BQU9xZ0UsVUFDekIsSUFBSyxJQUFJN25GLEVBQUksRUFBR0EsRUFBSXduQixNQUFNOW5CLE9BQVFNLElBQzlCNm5GLFNBQVNyZ0UsTUFBTXhuQixHQUV2QixDQVpBNmdJLENBQWEsQ0FBQyxNQUFPLE1BQU8sT0FBUSxRQUFTLE9BQVEsV0FBVyxTQUFTcDNHLFFBQ3JFdTFHLFVBQXFCLFdBQVh2MUcsT0FBc0IsTUFBUUEsUUFBVSxTQUFTeEQsSUFBS3RXLFFBQVN5NkIsVUFHckUsT0FGQXo2QixRQUFVb3ZILFdBQVc5NEcsSUFBS3RXLFFBQVN5NkIsV0FDM0IzZ0IsT0FBU0EsT0FBT3dYLGNBQ2pCZytGLFdBQVd0dkgsUUFDdEIsQ0FDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9nbG9iYWwvZG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2dsb2JhbC93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2lzLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9rZXljb2RlL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tdXguanMvbGliL2FhYy91dGlscy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbXV4LmpzL2xpYi9tMnRzL2NhcHRpb24tc3RyZWFtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tdXguanMvbGliL20ydHMvcHJvYmUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL211eC5qcy9saWIvbTJ0cy9zdHJlYW0tdHlwZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL211eC5qcy9saWIvbTJ0cy90aW1lc3RhbXAtcm9sbG92ZXItc3RyZWFtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tdXguanMvbGliL21wNC9jYXB0aW9uLXBhcnNlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbXV4LmpzL2xpYi9tcDQvcHJvYmUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL211eC5qcy9saWIvdG9vbHMvY2FwdGlvbi1wYWNrZXQtcGFyc2VyLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tdXguanMvbGliL3Rvb2xzL21wNC1pbnNwZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL211eC5qcy9saWIvdG9vbHMvdHMtaW5zcGVjdG9yLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tdXguanMvbGliL3V0aWxzL2Jpbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbXV4LmpzL2xpYi91dGlscy9jbG9jay5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbXV4LmpzL2xpYi91dGlscy9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWhlYWRlcnMvcGFyc2UtaGVhZGVycy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvdXJsLXRvb2xraXQvc3JjL3VybC10b29sa2l0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tM3U4LXBhcnNlci9kaXN0L20zdTgtcGFyc2VyLmVzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tcGQtcGFyc2VyL2Rpc3QvbXBkLXBhcnNlci5lcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcGtjczcvZGlzdC9wa2NzNy5lcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvYWVzLWRlY3J5cHRlci9kaXN0L2Flcy1kZWNyeXB0ZXIuZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3ZpZGVvLmpzL2Rpc3QvdmlkZW8uZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3ZpZGVvLmpzL25vZGVfbW9kdWxlcy9zYWZlLWpzb24tcGFyc2UvdHVwbGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3ZpZGVvanMtdnR0LmpzL2xpYi9icm93c2VyLWluZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy92aWRlb2pzLXZ0dC5qcy9saWIvdnR0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy92aWRlb2pzLXZ0dC5qcy9saWIvdnR0Y3VlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy92aWRlb2pzLXZ0dC5qcy9saWIvdnR0cmVnaW9uLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy92aWRlb2pzLXZ0dC5qcy9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMveGhyL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b3BMZXZlbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDpcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9XG52YXIgbWluRG9jID0gcmVxdWlyZSgnbWluLWRvY3VtZW50Jyk7XG5cbnZhciBkb2NjeTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkb2NjeSA9IGRvY3VtZW50O1xufSBlbHNlIHtcbiAgICBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9jY3k7XG4iLCJ2YXIgd2luO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgIHdpbiA9IHNlbGY7XG59IGVsc2Uge1xuICAgIHdpbiA9IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbjtcbiIsIm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvblxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24gKGZuKSB7XG4gIHZhciBzdHJpbmcgPSB0b1N0cmluZy5jYWxsKGZuKVxuICByZXR1cm4gc3RyaW5nID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8XG4gICAgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiBzdHJpbmcgIT09ICdbb2JqZWN0IFJlZ0V4cF0nKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAvLyBJRTggYW5kIGJlbG93XG4gICAgIChmbiA9PT0gd2luZG93LnNldFRpbWVvdXQgfHxcbiAgICAgIGZuID09PSB3aW5kb3cuYWxlcnQgfHxcbiAgICAgIGZuID09PSB3aW5kb3cuY29uZmlybSB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5wcm9tcHQpKVxufTtcbiIsIi8vIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC92V3g4Vi9cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTYwMzE5NS9mdWxsLWxpc3Qtb2YtamF2YXNjcmlwdC1rZXljb2Rlc1xuXG4vKipcbiAqIENvbmVuaWVuY2UgbWV0aG9kIHJldHVybnMgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgZ2l2ZW4ga2V5TmFtZSBvciBrZXlDb2RlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGtleUNvZGUoc2VhcmNoSW5wdXQpIHtcbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIGlmIChzZWFyY2hJbnB1dCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSB7XG4gICAgdmFyIGhhc0tleUNvZGUgPSBzZWFyY2hJbnB1dC53aGljaCB8fCBzZWFyY2hJbnB1dC5rZXlDb2RlIHx8IHNlYXJjaElucHV0LmNoYXJDb2RlXG4gICAgaWYgKGhhc0tleUNvZGUpIHNlYXJjaElucHV0ID0gaGFzS2V5Q29kZVxuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkgcmV0dXJuIG5hbWVzW3NlYXJjaElucHV0XVxuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoY2FzdCB0byBzdHJpbmcpXG4gIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoSW5wdXQpXG5cbiAgLy8gY2hlY2sgY29kZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gY2hlY2sgYWxpYXNlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIHdlaXJkIGNoYXJhY3Rlcj9cbiAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDEpIHJldHVybiBzZWFyY2guY2hhckNvZGVBdCgwKVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhIGtleWJvYXJkIGV2ZW50IHdpdGggYSBnaXZlbiBrZXlDb2RlIG9yIGtleU5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgS2V5Ym9hcmQgZXZlbnQgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5rZXlDb2RlLmlzRXZlbnRLZXkgPSBmdW5jdGlvbiBpc0V2ZW50S2V5KGV2ZW50LCBuYW1lT3JDb2RlKSB7XG4gIGlmIChldmVudCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIGV2ZW50KSB7XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlXG4gICAgaWYgKGtleUNvZGUgPT09IG51bGwgfHwga2V5Q29kZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNoZWNrIGNvZGVzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgXG4gICAgICAvLyBjaGVjayBhbGlhc2VzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5hbWVPckNvZGUgPT09IGtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBrZXlDb2RlO1xuXG4vKipcbiAqIEdldCBieSBuYW1lXG4gKlxuICogICBleHBvcnRzLmNvZGVbJ2VudGVyJ10gLy8gPT4gMTNcbiAqL1xuXG52YXIgY29kZXMgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLmNvZGVzID0ge1xuICAnYmFja3NwYWNlJzogOCxcbiAgJ3RhYic6IDksXG4gICdlbnRlcic6IDEzLFxuICAnc2hpZnQnOiAxNixcbiAgJ2N0cmwnOiAxNyxcbiAgJ2FsdCc6IDE4LFxuICAncGF1c2UvYnJlYWsnOiAxOSxcbiAgJ2NhcHMgbG9jayc6IDIwLFxuICAnZXNjJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZSB1cCc6IDMzLFxuICAncGFnZSBkb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnQnOiAzNyxcbiAgJ3VwJzogMzgsXG4gICdyaWdodCc6IDM5LFxuICAnZG93bic6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJ2NvbW1hbmQnOiA5MSxcbiAgJ2xlZnQgY29tbWFuZCc6IDkxLFxuICAncmlnaHQgY29tbWFuZCc6IDkzLFxuICAnbnVtcGFkIConOiAxMDYsXG4gICdudW1wYWQgKyc6IDEwNyxcbiAgJ251bXBhZCAtJzogMTA5LFxuICAnbnVtcGFkIC4nOiAxMTAsXG4gICdudW1wYWQgLyc6IDExMSxcbiAgJ251bSBsb2NrJzogMTQ0LFxuICAnc2Nyb2xsIGxvY2snOiAxNDUsXG4gICdteSBjb21wdXRlcic6IDE4MixcbiAgJ215IGNhbGN1bGF0b3InOiAxODMsXG4gICc7JzogMTg2LFxuICAnPSc6IDE4NyxcbiAgJywnOiAxODgsXG4gICctJzogMTg5LFxuICAnLic6IDE5MCxcbiAgJy8nOiAxOTEsXG4gICdgJzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ1xcXFwnOiAyMjAsXG4gICddJzogMjIxLFxuICBcIidcIjogMjIyXG59XG5cbi8vIEhlbHBlciBhbGlhc2VzXG5cbnZhciBhbGlhc2VzID0gZXhwb3J0cy5hbGlhc2VzID0ge1xuICAnd2luZG93cyc6IDkxLFxuICAn4oenJzogMTYsXG4gICfijKUnOiAxOCxcbiAgJ+KMgyc6IDE3LFxuICAn4oyYJzogOTEsXG4gICdjdGwnOiAxNyxcbiAgJ2NvbnRyb2wnOiAxNyxcbiAgJ29wdGlvbic6IDE4LFxuICAncGF1c2UnOiAxOSxcbiAgJ2JyZWFrJzogMTksXG4gICdjYXBzJzogMjAsXG4gICdyZXR1cm4nOiAxMyxcbiAgJ2VzY2FwZSc6IDI3LFxuICAnc3BjJzogMzIsXG4gICdzcGFjZWJhcic6IDMyLFxuICAncGd1cCc6IDMzLFxuICAncGdkbic6IDM0LFxuICAnaW5zJzogNDUsXG4gICdkZWwnOiA0NixcbiAgJ2NtZCc6IDkxXG59XG5cbi8qIVxuICogUHJvZ3JhbWF0aWNhbGx5IGFkZCB0aGUgZm9sbG93aW5nXG4gKi9cblxuLy8gbG93ZXIgY2FzZSBjaGFyc1xuZm9yIChpID0gOTc7IGkgPCAxMjM7IGkrKykgY29kZXNbU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpIC0gMzJcblxuLy8gbnVtYmVyc1xuZm9yICh2YXIgaSA9IDQ4OyBpIDwgNTg7IGkrKykgY29kZXNbaSAtIDQ4XSA9IGlcblxuLy8gZnVuY3Rpb24ga2V5c1xuZm9yIChpID0gMTsgaSA8IDEzOyBpKyspIGNvZGVzWydmJytpXSA9IGkgKyAxMTFcblxuLy8gbnVtcGFkIGtleXNcbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBjb2Rlc1snbnVtcGFkICcraV0gPSBpICsgOTZcblxuLyoqXG4gKiBHZXQgYnkgY29kZVxuICpcbiAqICAgZXhwb3J0cy5uYW1lWzEzXSAvLyA9PiAnRW50ZXInXG4gKi9cblxudmFyIG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IGV4cG9ydHMudGl0bGUgPSB7fSAvLyB0aXRsZSBmb3IgYmFja3dhcmQgY29tcGF0XG5cbi8vIENyZWF0ZSByZXZlcnNlIG1hcHBpbmdcbmZvciAoaSBpbiBjb2RlcykgbmFtZXNbY29kZXNbaV1dID0gaVxuXG4vLyBBZGQgYWxpYXNlc1xuZm9yICh2YXIgYWxpYXMgaW4gYWxpYXNlcykge1xuICBjb2Rlc1thbGlhc10gPSBhbGlhc2VzW2FsaWFzXVxufVxuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBVdGlsaXRpZXMgdG8gZGV0ZWN0IGJhc2ljIHByb3BlcnRpZXMgYW5kIG1ldGFkYXRhIGFib3V0IEFhYyBkYXRhLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTID0gW1xuICA5NjAwMCxcbiAgODgyMDAsXG4gIDY0MDAwLFxuICA0ODAwMCxcbiAgNDQxMDAsXG4gIDMyMDAwLFxuICAyNDAwMCxcbiAgMjIwNTAsXG4gIDE2MDAwLFxuICAxMjAwMCxcbiAgMTEwMjUsXG4gIDgwMDAsXG4gIDczNTBcbl07XG5cbnZhciBpc0xpa2VseUFhY0RhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGlmICgoZGF0YVswXSA9PT0gJ0knLmNoYXJDb2RlQXQoMCkpICYmXG4gICAgICAoZGF0YVsxXSA9PT0gJ0QnLmNoYXJDb2RlQXQoMCkpICYmXG4gICAgICAoZGF0YVsyXSA9PT0gJzMnLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIHBhcnNlU3luY1NhZmVJbnRlZ2VyID0gZnVuY3Rpb24oZGF0YSkge1xuICByZXR1cm4gKGRhdGFbMF0gPDwgMjEpIHxcbiAgICAgICAgICAoZGF0YVsxXSA8PCAxNCkgfFxuICAgICAgICAgIChkYXRhWzJdIDw8IDcpIHxcbiAgICAgICAgICAoZGF0YVszXSk7XG59O1xuXG4vLyByZXR1cm4gYSBwZXJjZW50LWVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNwZWNpZmllZCBieXRlIHJhbmdlXG4vLyBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVyY2VudC1lbmNvZGluZ1xudmFyIHBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbihieXRlcywgc3RhcnQsIGVuZCkge1xuICB2YXIgaSwgcmVzdWx0ID0gJyc7XG4gIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXN1bHQgKz0gJyUnICsgKCcwMCcgKyBieXRlc1tpXS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gcmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNwZWNpZmllZCBieXRlIHJhbmdlLFxuLy8gaW50ZXJwcmV0ZWQgYXMgSVNPLTg4NTktMS5cbnZhciBwYXJzZUlzbzg4NTkxID0gZnVuY3Rpb24oYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHVuZXNjYXBlKHBlcmNlbnRFbmNvZGUoYnl0ZXMsIHN0YXJ0LCBlbmQpKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG59O1xuXG52YXIgcGFyc2VJZDNUYWdTaXplID0gZnVuY3Rpb24oaGVhZGVyLCBieXRlSW5kZXgpIHtcbiAgdmFyXG4gICAgcmV0dXJuU2l6ZSA9IChoZWFkZXJbYnl0ZUluZGV4ICsgNl0gPDwgMjEpIHxcbiAgICAgICAgICAgICAgICAgKGhlYWRlcltieXRlSW5kZXggKyA3XSA8PCAxNCkgfFxuICAgICAgICAgICAgICAgICAoaGVhZGVyW2J5dGVJbmRleCArIDhdIDw8IDcpIHxcbiAgICAgICAgICAgICAgICAgKGhlYWRlcltieXRlSW5kZXggKyA5XSksXG4gICAgZmxhZ3MgPSBoZWFkZXJbYnl0ZUluZGV4ICsgNV0sXG4gICAgZm9vdGVyUHJlc2VudCA9IChmbGFncyAmIDE2KSA+PiA0O1xuXG4gIGlmIChmb290ZXJQcmVzZW50KSB7XG4gICAgcmV0dXJuIHJldHVyblNpemUgKyAyMDtcbiAgfVxuICByZXR1cm4gcmV0dXJuU2l6ZSArIDEwO1xufTtcblxudmFyIHBhcnNlQWR0c1NpemUgPSBmdW5jdGlvbihoZWFkZXIsIGJ5dGVJbmRleCkge1xuICB2YXJcbiAgICBsb3dUaHJlZSA9IChoZWFkZXJbYnl0ZUluZGV4ICsgNV0gJiAweEUwKSA+PiA1LFxuICAgIG1pZGRsZSA9IGhlYWRlcltieXRlSW5kZXggKyA0XSA8PCAzLFxuICAgIGhpZ2hUd28gPSBoZWFkZXJbYnl0ZUluZGV4ICsgM10gJiAweDMgPDwgMTE7XG5cbiAgcmV0dXJuIChoaWdoVHdvIHwgbWlkZGxlKSB8IGxvd1RocmVlO1xufTtcblxudmFyIHBhcnNlVHlwZSA9IGZ1bmN0aW9uKGhlYWRlciwgYnl0ZUluZGV4KSB7XG4gIGlmICgoaGVhZGVyW2J5dGVJbmRleF0gPT09ICdJJy5jaGFyQ29kZUF0KDApKSAmJlxuICAgICAgKGhlYWRlcltieXRlSW5kZXggKyAxXSA9PT0gJ0QnLmNoYXJDb2RlQXQoMCkpICYmXG4gICAgICAoaGVhZGVyW2J5dGVJbmRleCArIDJdID09PSAnMycuY2hhckNvZGVBdCgwKSkpIHtcbiAgICByZXR1cm4gJ3RpbWVkLW1ldGFkYXRhJztcbiAgfSBlbHNlIGlmICgoaGVhZGVyW2J5dGVJbmRleF0gJiAweGZmID09PSAweGZmKSAmJlxuICAgICAgICAgICAgICgoaGVhZGVyW2J5dGVJbmRleCArIDFdICYgMHhmMCkgPT09IDB4ZjApKSB7XG4gICAgcmV0dXJuICdhdWRpbyc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgcGFyc2VTYW1wbGVSYXRlID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBpID0gMDtcblxuICB3aGlsZSAoaSArIDUgPCBwYWNrZXQubGVuZ3RoKSB7XG4gICAgaWYgKHBhY2tldFtpXSAhPT0gMHhGRiB8fCAocGFja2V0W2kgKyAxXSAmIDB4RjYpICE9PSAweEYwKSB7XG4gICAgICAvLyBJZiBhIHZhbGlkIGhlYWRlciB3YXMgbm90IGZvdW5kLCAganVtcCBvbmUgZm9yd2FyZCBhbmQgYXR0ZW1wdCB0b1xuICAgICAgLy8gZmluZCBhIHZhbGlkIEFEVFMgaGVhZGVyIHN0YXJ0aW5nIGF0IHRoZSBuZXh0IGJ5dGVcbiAgICAgIGkrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXR1cm4gQURUU19TQU1QTElOR19GUkVRVUVOQ0lFU1socGFja2V0W2kgKyAyXSAmIDB4M2MpID4+PiAyXTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIHBhcnNlQWFjVGltZXN0YW1wID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBmcmFtZVN0YXJ0LCBmcmFtZVNpemUsIGZyYW1lLCBmcmFtZUhlYWRlcjtcblxuICAvLyBmaW5kIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgZnJhbWUgYW5kIHRoZSBlbmQgb2YgdGhlIHRhZ1xuICBmcmFtZVN0YXJ0ID0gMTA7XG4gIGlmIChwYWNrZXRbNV0gJiAweDQwKSB7XG4gICAgLy8gYWR2YW5jZSB0aGUgZnJhbWUgc3RhcnQgcGFzdCB0aGUgZXh0ZW5kZWQgaGVhZGVyXG4gICAgZnJhbWVTdGFydCArPSA0OyAvLyBoZWFkZXIgc2l6ZSBmaWVsZFxuICAgIGZyYW1lU3RhcnQgKz0gcGFyc2VTeW5jU2FmZUludGVnZXIocGFja2V0LnN1YmFycmF5KDEwLCAxNCkpO1xuICB9XG5cbiAgLy8gcGFyc2Ugb25lIG9yIG1vcmUgSUQzIGZyYW1lc1xuICAvLyBodHRwOi8vaWQzLm9yZy9pZDN2Mi4zLjAjSUQzdjJfZnJhbWVfb3ZlcnZpZXdcbiAgZG8ge1xuICAgIC8vIGRldGVybWluZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoaXMgZnJhbWVcbiAgICBmcmFtZVNpemUgPSBwYXJzZVN5bmNTYWZlSW50ZWdlcihwYWNrZXQuc3ViYXJyYXkoZnJhbWVTdGFydCArIDQsIGZyYW1lU3RhcnQgKyA4KSk7XG4gICAgaWYgKGZyYW1lU2l6ZSA8IDEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmcmFtZUhlYWRlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFja2V0W2ZyYW1lU3RhcnRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRbZnJhbWVTdGFydCArIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRbZnJhbWVTdGFydCArIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRbZnJhbWVTdGFydCArIDNdKTtcblxuICAgIGlmIChmcmFtZUhlYWRlciA9PT0gJ1BSSVYnKSB7XG4gICAgICBmcmFtZSA9IHBhY2tldC5zdWJhcnJheShmcmFtZVN0YXJ0ICsgMTAsIGZyYW1lU3RhcnQgKyBmcmFtZVNpemUgKyAxMCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhbWUuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmcmFtZVtpXSA9PT0gMCkge1xuICAgICAgICAgIHZhciBvd25lciA9IHBhcnNlSXNvODg1OTEoZnJhbWUsIDAsIGkpO1xuICAgICAgICAgIGlmIChvd25lciA9PT0gJ2NvbS5hcHBsZS5zdHJlYW1pbmcudHJhbnNwb3J0U3RyZWFtVGltZXN0YW1wJykge1xuICAgICAgICAgICAgdmFyIGQgPSBmcmFtZS5zdWJhcnJheShpICsgMSk7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9ICgoZFszXSAmIDB4MDEpICA8PCAzMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAoZFs0XSAgPDwgMjIpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgKGRbNV0gPDwgMTQpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgKGRbNl0gPDwgNikgfFxuICAgICAgICAgICAgICAgICAgICAgICAoZFs3XSA+Pj4gMik7XG4gICAgICAgICAgICBzaXplICo9IDQ7XG4gICAgICAgICAgICBzaXplICs9IGRbN10gJiAweDAzO1xuXG4gICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFtZVN0YXJ0ICs9IDEwOyAvLyBhZHZhbmNlIHBhc3QgdGhlIGZyYW1lIGhlYWRlclxuICAgIGZyYW1lU3RhcnQgKz0gZnJhbWVTaXplOyAvLyBhZHZhbmNlIHBhc3QgdGhlIGZyYW1lIGJvZHlcbiAgfSB3aGlsZSAoZnJhbWVTdGFydCA8IHBhY2tldC5ieXRlTGVuZ3RoKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNMaWtlbHlBYWNEYXRhOiBpc0xpa2VseUFhY0RhdGEsXG4gIHBhcnNlSWQzVGFnU2l6ZTogcGFyc2VJZDNUYWdTaXplLFxuICBwYXJzZUFkdHNTaXplOiBwYXJzZUFkdHNTaXplLFxuICBwYXJzZVR5cGU6IHBhcnNlVHlwZSxcbiAgcGFyc2VTYW1wbGVSYXRlOiBwYXJzZVNhbXBsZVJhdGUsXG4gIHBhcnNlQWFjVGltZXN0YW1wOiBwYXJzZUFhY1RpbWVzdGFtcFxufTtcbiIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogUmVhZHMgaW4tYmFuZCBjYXB0aW9uIGluZm9ybWF0aW9uIGZyb20gYSB2aWRlbyBlbGVtZW50YXJ5XG4gKiBzdHJlYW0uIENhcHRpb25zIG11c3QgZm9sbG93IHRoZSBDRUEtNzA4IHN0YW5kYXJkIGZvciBpbmplY3Rpb25cbiAqIGludG8gYW4gTVBFRy0yIHRyYW5zcG9ydCBzdHJlYW1zLlxuICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DRUEtNzA4XG4gKiBAc2VlIGh0dHBzOi8vd3d3Lmdwby5nb3YvZmRzeXMvcGtnL0NGUi0yMDA3LXRpdGxlNDctdm9sMS9wZGYvQ0ZSLTIwMDctdGl0bGU0Ny12b2wxLXNlYzE1LTExOS5wZGZcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyBMaW5rIFRvIFRyYW5zcG9ydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4uL3V0aWxzL3N0cmVhbScpO1xudmFyIGNlYTcwOFBhcnNlciA9IHJlcXVpcmUoJy4uL3Rvb2xzL2NhcHRpb24tcGFja2V0LXBhcnNlcicpO1xuXG52YXIgQ2FwdGlvblN0cmVhbSA9IGZ1bmN0aW9uKCkge1xuXG4gIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcblxuICB0aGlzLmNhcHRpb25QYWNrZXRzXyA9IFtdO1xuXG4gIHRoaXMuY2NTdHJlYW1zXyA9IFtcbiAgICBuZXcgQ2VhNjA4U3RyZWFtKDAsIDApLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgbmV3IENlYTYwOFN0cmVhbSgwLCAxKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgIG5ldyBDZWE2MDhTdHJlYW0oMSwgMCksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICBuZXcgQ2VhNjA4U3RyZWFtKDEsIDEpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgXTtcblxuICB0aGlzLnJlc2V0KCk7XG5cbiAgLy8gZm9yd2FyZCBkYXRhIGFuZCBkb25lIGV2ZW50cyBmcm9tIENDcyB0byB0aGlzIENhcHRpb25TdHJlYW1cbiAgdGhpcy5jY1N0cmVhbXNfLmZvckVhY2goZnVuY3Rpb24oY2MpIHtcbiAgICBjYy5vbignZGF0YScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdkYXRhJykpO1xuICAgIGNjLm9uKCdwYXJ0aWFsZG9uZScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdwYXJ0aWFsZG9uZScpKTtcbiAgICBjYy5vbignZG9uZScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdkb25lJykpO1xuICB9LCB0aGlzKTtcblxufTtcblxuQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUgPSBuZXcgU3RyZWFtKCk7XG5DYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIHNlaSwgdXNlckRhdGEsIG5ld0NhcHRpb25QYWNrZXRzO1xuXG4gIC8vIG9ubHkgZXhhbWluZSBTRUkgTkFMc1xuICBpZiAoZXZlbnQubmFsVW5pdFR5cGUgIT09ICdzZWlfcmJzcCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBwYXJzZSB0aGUgc2VpXG4gIHNlaSA9IGNlYTcwOFBhcnNlci5wYXJzZVNlaShldmVudC5lc2NhcGVkUkJTUCk7XG5cbiAgLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IHVzZXJfZGF0YV9yZWdpc3RlcmVkX2l0dV90X3QzNVxuICBpZiAoc2VpLnBheWxvYWRUeXBlICE9PSBjZWE3MDhQYXJzZXIuVVNFUl9EQVRBX1JFR0lTVEVSRURfSVRVX1RfVDM1KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gcGFyc2Ugb3V0IHRoZSB1c2VyIGRhdGEgcGF5bG9hZFxuICB1c2VyRGF0YSA9IGNlYTcwOFBhcnNlci5wYXJzZVVzZXJEYXRhKHNlaSk7XG5cbiAgLy8gaWdub3JlIHVucmVjb2duaXplZCB1c2VyRGF0YVxuICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU29tZXRpbWVzLCB0aGUgc2FtZSBzZWdtZW50ICMgd2lsbCBiZSBkb3dubG9hZGVkIHR3aWNlLiBUbyBzdG9wIHRoZVxuICAvLyBjYXB0aW9uIGRhdGEgZnJvbSBiZWluZyBwcm9jZXNzZWQgdHdpY2UsIHdlIHRyYWNrIHRoZSBsYXRlc3QgZHRzIHdlJ3ZlXG4gIC8vIHJlY2VpdmVkIGFuZCBpZ25vcmUgZXZlcnl0aGluZyB3aXRoIGEgZHRzIGJlZm9yZSB0aGF0LiBIb3dldmVyLCBzaW5jZVxuICAvLyBkYXRhIGZvciBhIHNwZWNpZmljIGR0cyBjYW4gYmUgc3BsaXQgYWNyb3NzIHBhY2tldHMgb24gZWl0aGVyIHNpZGUgb2ZcbiAgLy8gYSBzZWdtZW50IGJvdW5kYXJ5LCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSAqZG9uJ3QqIGlnbm9yZSB0aGUgcGFja2V0c1xuICAvLyBmcm9tIHRoZSAqbmV4dCogc2VnbWVudCB0aGF0IGhhdmUgZHRzID09PSB0aGlzLmxhdGVzdER0c18uIEJ5IGNvbnN0YW50bHlcbiAgLy8gdHJhY2tpbmcgdGhlIG51bWJlciBvZiBwYWNrZXRzIHJlY2VpdmVkIHdpdGggZHRzID09PSB0aGlzLmxhdGVzdER0c18sIHdlXG4gIC8vIGtub3cgaG93IG1hbnkgc2hvdWxkIGJlIGlnbm9yZWQgb25jZSB3ZSBzdGFydCByZWNlaXZpbmcgZHVwbGljYXRlcy5cbiAgaWYgKGV2ZW50LmR0cyA8IHRoaXMubGF0ZXN0RHRzXykge1xuICAgIC8vIFdlJ3ZlIHN0YXJ0ZWQgZ2V0dGluZyBvbGRlciBkYXRhLCBzbyBzZXQgdGhlIGZsYWcuXG4gICAgdGhpcy5pZ25vcmVOZXh0RXF1YWxEdHNfID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoKGV2ZW50LmR0cyA9PT0gdGhpcy5sYXRlc3REdHNfKSAmJiAodGhpcy5pZ25vcmVOZXh0RXF1YWxEdHNfKSkge1xuICAgIHRoaXMubnVtU2FtZUR0c18tLTtcbiAgICBpZiAoIXRoaXMubnVtU2FtZUR0c18pIHtcbiAgICAgIC8vIFdlJ3ZlIHJlY2VpdmVkIHRoZSBsYXN0IGR1cGxpY2F0ZSBwYWNrZXQsIHRpbWUgdG8gc3RhcnQgcHJvY2Vzc2luZyBhZ2FpblxuICAgICAgdGhpcy5pZ25vcmVOZXh0RXF1YWxEdHNfID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHBhcnNlIG91dCBDQyBkYXRhIHBhY2tldHMgYW5kIHNhdmUgdGhlbSBmb3IgbGF0ZXJcbiAgbmV3Q2FwdGlvblBhY2tldHMgPSBjZWE3MDhQYXJzZXIucGFyc2VDYXB0aW9uUGFja2V0cyhldmVudC5wdHMsIHVzZXJEYXRhKTtcbiAgdGhpcy5jYXB0aW9uUGFja2V0c18gPSB0aGlzLmNhcHRpb25QYWNrZXRzXy5jb25jYXQobmV3Q2FwdGlvblBhY2tldHMpO1xuICBpZiAodGhpcy5sYXRlc3REdHNfICE9PSBldmVudC5kdHMpIHtcbiAgICB0aGlzLm51bVNhbWVEdHNfID0gMDtcbiAgfVxuICB0aGlzLm51bVNhbWVEdHNfKys7XG4gIHRoaXMubGF0ZXN0RHRzXyA9IGV2ZW50LmR0cztcbn07XG5cbkNhcHRpb25TdHJlYW0ucHJvdG90eXBlLmZsdXNoQ0NTdHJlYW1zID0gZnVuY3Rpb24oZmx1c2hUeXBlKSB7XG4gIHRoaXMuY2NTdHJlYW1zXy5mb3JFYWNoKGZ1bmN0aW9uKGNjKSB7XG4gICAgcmV0dXJuIGZsdXNoVHlwZSA9PT0gJ2ZsdXNoJyA/IGNjLmZsdXNoKCkgOiBjYy5wYXJ0aWFsRmx1c2goKTtcbiAgfSwgdGhpcyk7XG59O1xuXG5DYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5mbHVzaFN0cmVhbSA9IGZ1bmN0aW9uKGZsdXNoVHlwZSkge1xuICAvLyBtYWtlIHN1cmUgd2UgYWN0dWFsbHkgcGFyc2VkIGNhcHRpb25zIGJlZm9yZSBwcm9jZWVkaW5nXG4gIGlmICghdGhpcy5jYXB0aW9uUGFja2V0c18ubGVuZ3RoKSB7XG4gICAgdGhpcy5mbHVzaENDU3RyZWFtcyhmbHVzaFR5cGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEluIENocm9tZSwgdGhlIEFycmF5I3NvcnQgZnVuY3Rpb24gaXMgbm90IHN0YWJsZSBzbyBhZGQgYVxuICAvLyBwcmVzb3J0SW5kZXggdGhhdCB3ZSBjYW4gdXNlIHRvIGVuc3VyZSB3ZSBnZXQgYSBzdGFibGUtc29ydFxuICB0aGlzLmNhcHRpb25QYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW0sIGlkeCkge1xuICAgIGVsZW0ucHJlc29ydEluZGV4ID0gaWR4O1xuICB9KTtcblxuICAvLyBzb3J0IGNhcHRpb24gYnl0ZS1wYWlycyBiYXNlZCBvbiB0aGVpciBQVFMgdmFsdWVzXG4gIHRoaXMuY2FwdGlvblBhY2tldHNfLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIGlmIChhLnB0cyA9PT0gYi5wdHMpIHtcbiAgICAgIHJldHVybiBhLnByZXNvcnRJbmRleCAtIGIucHJlc29ydEluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gYS5wdHMgLSBiLnB0cztcbiAgfSk7XG5cbiAgdGhpcy5jYXB0aW9uUGFja2V0c18uZm9yRWFjaChmdW5jdGlvbihwYWNrZXQpIHtcbiAgICBpZiAocGFja2V0LnR5cGUgPCAyKSB7XG4gICAgICAvLyBEaXNwYXRjaCBwYWNrZXQgdG8gdGhlIHJpZ2h0IENlYTYwOFN0cmVhbVxuICAgICAgdGhpcy5kaXNwYXRjaENlYTYwOFBhY2tldChwYWNrZXQpO1xuICAgIH1cbiAgICAvLyB0aGlzIGlzIHdoZXJlIGFuICdlbHNlJyB3b3VsZCBnbyBmb3IgYSBkaXNwYXRjaGluZyBwYWNrZXRzXG4gICAgLy8gdG8gYSB0aGVvcmV0aWNhbCBDZWE3MDhTdHJlYW0gdGhhdCBoYW5kbGVzIFNFUlZJQ0VuIGRhdGFcbiAgfSwgdGhpcyk7XG5cbiAgdGhpcy5jYXB0aW9uUGFja2V0c18ubGVuZ3RoID0gMDtcbiAgdGhpcy5mbHVzaENDU3RyZWFtcyhmbHVzaFR5cGUpO1xufTtcblxuQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmx1c2hTdHJlYW0oJ2ZsdXNoJyk7XG59O1xuXG4vLyBPbmx5IGNhbGxlZCBpZiBoYW5kbGluZyBwYXJ0aWFsIGRhdGFcbkNhcHRpb25TdHJlYW0ucHJvdG90eXBlLnBhcnRpYWxGbHVzaCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mbHVzaFN0cmVhbSgncGFydGlhbEZsdXNoJyk7XG59O1xuXG5DYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmxhdGVzdER0c18gPSBudWxsO1xuICB0aGlzLmlnbm9yZU5leHRFcXVhbER0c18gPSBmYWxzZTtcbiAgdGhpcy5udW1TYW1lRHRzXyA9IDA7XG4gIHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF8gPSBbbnVsbCwgbnVsbF07XG4gIHRoaXMuY2NTdHJlYW1zXy5mb3JFYWNoKGZ1bmN0aW9uKGNjU3RyZWFtKSB7XG4gICAgY2NTdHJlYW0ucmVzZXQoKTtcbiAgfSk7XG59O1xuXG4vLyBGcm9tIHRoZSBDRUEtNjA4IHNwZWM6XG4vKlxuICogV2hlbiBYRFMgc3ViLXBhY2tldHMgYXJlIGludGVybGVhdmVkIHdpdGggb3RoZXIgc2VydmljZXMsIHRoZSBlbmQgb2YgZWFjaCBzdWItcGFja2V0IHNoYWxsIGJlIGZvbGxvd2VkXG4gKiBieSBhIGNvbnRyb2wgcGFpciB0byBjaGFuZ2UgdG8gYSBkaWZmZXJlbnQgc2VydmljZS4gV2hlbiBhbnkgb2YgdGhlIGNvbnRyb2wgY29kZXMgZnJvbSAweDEwIHRvIDB4MUYgaXNcbiAqIHVzZWQgdG8gYmVnaW4gYSBjb250cm9sIGNvZGUgcGFpciwgaXQgaW5kaWNhdGVzIHRoZSByZXR1cm4gdG8gY2FwdGlvbmluZyBvciBUZXh0IGRhdGEuIFRoZSBjb250cm9sIGNvZGUgcGFpclxuICogYW5kIHN1YnNlcXVlbnQgZGF0YSBzaG91bGQgdGhlbiBiZSBwcm9jZXNzZWQgYWNjb3JkaW5nIHRvIHRoZSBGQ0MgcnVsZXMuIEl0IG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZVxuICogbGluZSAyMSBkYXRhIGVuY29kZXIgdG8gYXV0b21hdGljYWxseSBpbnNlcnQgYSBjb250cm9sIGNvZGUgcGFpciAoaS5lLiBSQ0wsIFJVMiwgUlUzLCBSVTQsIFJEQywgb3IgUlREKVxuICogdG8gc3dpdGNoIHRvIGNhcHRpb25pbmcgb3IgVGV4dC5cbiovXG4vLyBXaXRoIHRoYXQgaW4gbWluZCwgd2UgaWdub3JlIGFueSBkYXRhIGJldHdlZW4gYW4gWERTIGNvbnRyb2wgY29kZSBhbmQgYVxuLy8gc3Vic2VxdWVudCBjbG9zZWQtY2FwdGlvbmluZyBjb250cm9sIGNvZGUuXG5DYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5kaXNwYXRjaENlYTYwOFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICAvLyBOT1RFOiBwYWNrZXQudHlwZSBpcyB0aGUgQ0VBNjA4IGZpZWxkXG4gIGlmICh0aGlzLnNldHNUZXh0T3JYRFNBY3RpdmUocGFja2V0KSkge1xuICAgIHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF9bcGFja2V0LnR5cGVdID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0aGlzLnNldHNDaGFubmVsMUFjdGl2ZShwYWNrZXQpKSB7XG4gICAgdGhpcy5hY3RpdmVDZWE2MDhDaGFubmVsX1twYWNrZXQudHlwZV0gPSAwO1xuICB9IGVsc2UgaWYgKHRoaXMuc2V0c0NoYW5uZWwyQWN0aXZlKHBhY2tldCkpIHtcbiAgICB0aGlzLmFjdGl2ZUNlYTYwOENoYW5uZWxfW3BhY2tldC50eXBlXSA9IDE7XG4gIH1cbiAgaWYgKHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF9bcGFja2V0LnR5cGVdID09PSBudWxsKSB7XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCByZWNlaXZlZCBhbnl0aGluZyB0byBzZXQgdGhlIGFjdGl2ZSBjaGFubmVsLCBvciB0aGVcbiAgICAvLyBwYWNrZXRzIGFyZSBUZXh0L1hEUyBkYXRhLCBkaXNjYXJkIHRoZSBkYXRhOyB3ZSBkb24ndCB3YW50IGp1bWJsZWRcbiAgICAvLyBjYXB0aW9uc1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmNjU3RyZWFtc19bKHBhY2tldC50eXBlIDw8IDEpICsgdGhpcy5hY3RpdmVDZWE2MDhDaGFubmVsX1twYWNrZXQudHlwZV1dLnB1c2gocGFja2V0KTtcbn07XG5cbkNhcHRpb25TdHJlYW0ucHJvdG90eXBlLnNldHNDaGFubmVsMUFjdGl2ZSA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICByZXR1cm4gKChwYWNrZXQuY2NEYXRhICYgMHg3ODAwKSA9PT0gMHgxMDAwKTtcbn07XG5DYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5zZXRzQ2hhbm5lbDJBY3RpdmUgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgcmV0dXJuICgocGFja2V0LmNjRGF0YSAmIDB4NzgwMCkgPT09IDB4MTgwMCk7XG59O1xuQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuc2V0c1RleHRPclhEU0FjdGl2ZSA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICByZXR1cm4gKChwYWNrZXQuY2NEYXRhICYgMHg3MTAwKSA9PT0gMHgwMTAwKSB8fFxuICAgICgocGFja2V0LmNjRGF0YSAmIDB4NzhmZSkgPT09IDB4MTAyYSkgfHxcbiAgICAoKHBhY2tldC5jY0RhdGEgJiAweDc4ZmUpID09PSAweDE4MmEpO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2Vzc2lvbiB0byBBcHBsaWNhdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBUaGlzIGhhc2ggbWFwcyBub24tQVNDSUksIHNwZWNpYWwsIGFuZCBleHRlbmRlZCBjaGFyYWN0ZXIgY29kZXMgdG8gdGhlaXJcbi8vIHByb3BlciBVbmljb2RlIGVxdWl2YWxlbnQuIFRoZSBmaXJzdCBrZXlzIHRoYXQgYXJlIG9ubHkgYSBzaW5nbGUgYnl0ZVxuLy8gYXJlIHRoZSBub24tc3RhbmRhcmQgQVNDSUkgY2hhcmFjdGVycywgd2hpY2ggc2ltcGx5IG1hcCB0aGUgQ0VBNjA4IGJ5dGVcbi8vIHRvIHRoZSBzdGFuZGFyZCBBU0NJSS9Vbmljb2RlLiBUaGUgdHdvLWJ5dGUga2V5cyB0aGF0IGZvbGxvdyBhcmUgdGhlIENFQTYwOFxuLy8gY2hhcmFjdGVyIGNvZGVzLCBidXQgaGF2ZSB0aGVpciBNU0IgYml0bWFza2VkIHdpdGggMHgwMyBzbyB0aGF0IGEgbG9va3VwXG4vLyBjYW4gYmUgcGVyZm9ybWVkIHJlZ2FyZGxlc3Mgb2YgdGhlIGZpZWxkIGFuZCBkYXRhIGNoYW5uZWwgb24gd2hpY2ggdGhlXG4vLyBjaGFyYWN0ZXIgY29kZSB3YXMgcmVjZWl2ZWQuXG52YXIgQ0hBUkFDVEVSX1RSQU5TTEFUSU9OID0ge1xuICAweDJhOiAweGUxLCAgICAgLy8gw6FcbiAgMHg1YzogMHhlOSwgICAgIC8vIMOpXG4gIDB4NWU6IDB4ZWQsICAgICAvLyDDrVxuICAweDVmOiAweGYzLCAgICAgLy8gw7NcbiAgMHg2MDogMHhmYSwgICAgIC8vIMO6XG4gIDB4N2I6IDB4ZTcsICAgICAvLyDDp1xuICAweDdjOiAweGY3LCAgICAgLy8gw7dcbiAgMHg3ZDogMHhkMSwgICAgIC8vIMORXG4gIDB4N2U6IDB4ZjEsICAgICAvLyDDsVxuICAweDdmOiAweDI1ODgsICAgLy8g4paIXG4gIDB4MDEzMDogMHhhZSwgICAvLyDCrlxuICAweDAxMzE6IDB4YjAsICAgLy8gwrBcbiAgMHgwMTMyOiAweGJkLCAgIC8vIMK9XG4gIDB4MDEzMzogMHhiZiwgICAvLyDCv1xuICAweDAxMzQ6IDB4MjEyMiwgLy8g4oSiXG4gIDB4MDEzNTogMHhhMiwgICAvLyDColxuICAweDAxMzY6IDB4YTMsICAgLy8gwqNcbiAgMHgwMTM3OiAweDI2NmEsIC8vIOKZqlxuICAweDAxMzg6IDB4ZTAsICAgLy8gw6BcbiAgMHgwMTM5OiAweGEwLCAgIC8vXG4gIDB4MDEzYTogMHhlOCwgICAvLyDDqFxuICAweDAxM2I6IDB4ZTIsICAgLy8gw6JcbiAgMHgwMTNjOiAweGVhLCAgIC8vIMOqXG4gIDB4MDEzZDogMHhlZSwgICAvLyDDrlxuICAweDAxM2U6IDB4ZjQsICAgLy8gw7RcbiAgMHgwMTNmOiAweGZiLCAgIC8vIMO7XG4gIDB4MDIyMDogMHhjMSwgICAvLyDDgVxuICAweDAyMjE6IDB4YzksICAgLy8gw4lcbiAgMHgwMjIyOiAweGQzLCAgIC8vIMOTXG4gIDB4MDIyMzogMHhkYSwgICAvLyDDmlxuICAweDAyMjQ6IDB4ZGMsICAgLy8gw5xcbiAgMHgwMjI1OiAweGZjLCAgIC8vIMO8XG4gIDB4MDIyNjogMHgyMDE4LCAvLyDigJhcbiAgMHgwMjI3OiAweGExLCAgIC8vIMKhXG4gIDB4MDIyODogMHgyYSwgICAvLyAqXG4gIDB4MDIyOTogMHgyNywgICAvLyAnXG4gIDB4MDIyYTogMHgyMDE0LCAvLyDigJRcbiAgMHgwMjJiOiAweGE5LCAgIC8vIMKpXG4gIDB4MDIyYzogMHgyMTIwLCAvLyDihKBcbiAgMHgwMjJkOiAweDIwMjIsIC8vIOKAolxuICAweDAyMmU6IDB4MjAxYywgLy8g4oCcXG4gIDB4MDIyZjogMHgyMDFkLCAvLyDigJ1cbiAgMHgwMjMwOiAweGMwLCAgIC8vIMOAXG4gIDB4MDIzMTogMHhjMiwgICAvLyDDglxuICAweDAyMzI6IDB4YzcsICAgLy8gw4dcbiAgMHgwMjMzOiAweGM4LCAgIC8vIMOIXG4gIDB4MDIzNDogMHhjYSwgICAvLyDDilxuICAweDAyMzU6IDB4Y2IsICAgLy8gw4tcbiAgMHgwMjM2OiAweGViLCAgIC8vIMOrXG4gIDB4MDIzNzogMHhjZSwgICAvLyDDjlxuICAweDAyMzg6IDB4Y2YsICAgLy8gw49cbiAgMHgwMjM5OiAweGVmLCAgIC8vIMOvXG4gIDB4MDIzYTogMHhkNCwgICAvLyDDlFxuICAweDAyM2I6IDB4ZDksICAgLy8gw5lcbiAgMHgwMjNjOiAweGY5LCAgIC8vIMO5XG4gIDB4MDIzZDogMHhkYiwgICAvLyDDm1xuICAweDAyM2U6IDB4YWIsICAgLy8gwqtcbiAgMHgwMjNmOiAweGJiLCAgIC8vIMK7XG4gIDB4MDMyMDogMHhjMywgICAvLyDDg1xuICAweDAzMjE6IDB4ZTMsICAgLy8gw6NcbiAgMHgwMzIyOiAweGNkLCAgIC8vIMONXG4gIDB4MDMyMzogMHhjYywgICAvLyDDjFxuICAweDAzMjQ6IDB4ZWMsICAgLy8gw6xcbiAgMHgwMzI1OiAweGQyLCAgIC8vIMOSXG4gIDB4MDMyNjogMHhmMiwgICAvLyDDslxuICAweDAzMjc6IDB4ZDUsICAgLy8gw5VcbiAgMHgwMzI4OiAweGY1LCAgIC8vIMO1XG4gIDB4MDMyOTogMHg3YiwgICAvLyB7XG4gIDB4MDMyYTogMHg3ZCwgICAvLyB9XG4gIDB4MDMyYjogMHg1YywgICAvLyBcXFxuICAweDAzMmM6IDB4NWUsICAgLy8gXlxuICAweDAzMmQ6IDB4NWYsICAgLy8gX1xuICAweDAzMmU6IDB4N2MsICAgLy8gfFxuICAweDAzMmY6IDB4N2UsICAgLy8gflxuICAweDAzMzA6IDB4YzQsICAgLy8gw4RcbiAgMHgwMzMxOiAweGU0LCAgIC8vIMOkXG4gIDB4MDMzMjogMHhkNiwgICAvLyDDllxuICAweDAzMzM6IDB4ZjYsICAgLy8gw7ZcbiAgMHgwMzM0OiAweGRmLCAgIC8vIMOfXG4gIDB4MDMzNTogMHhhNSwgICAvLyDCpVxuICAweDAzMzY6IDB4YTQsICAgLy8gwqRcbiAgMHgwMzM3OiAweDI1MDIsIC8vIOKUglxuICAweDAzMzg6IDB4YzUsICAgLy8gw4VcbiAgMHgwMzM5OiAweGU1LCAgIC8vIMOlXG4gIDB4MDMzYTogMHhkOCwgICAvLyDDmFxuICAweDAzM2I6IDB4ZjgsICAgLy8gw7hcbiAgMHgwMzNjOiAweDI1MGMsIC8vIOKUjFxuICAweDAzM2Q6IDB4MjUxMCwgLy8g4pSQXG4gIDB4MDMzZTogMHgyNTE0LCAvLyDilJRcbiAgMHgwMzNmOiAweDI1MTggIC8vIOKUmFxufTtcblxudmFyIGdldENoYXJGcm9tQ29kZSA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29kZSA9IENIQVJBQ1RFUl9UUkFOU0xBVElPTltjb2RlXSB8fCBjb2RlO1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbn07XG5cbi8vIHRoZSBpbmRleCBvZiB0aGUgbGFzdCByb3cgaW4gYSBDRUEtNjA4IGRpc3BsYXkgYnVmZmVyXG52YXIgQk9UVE9NX1JPVyA9IDE0O1xuXG4vLyBUaGlzIGFycmF5IGlzIHVzZWQgZm9yIG1hcHBpbmcgUEFDcyAtPiByb3cgIywgc2luY2UgdGhlcmUncyBubyB3YXkgb2Zcbi8vIGdldHRpbmcgaXQgdGhyb3VnaCBiaXQgbG9naWMuXG52YXIgUk9XUyA9IFsweDExMDAsIDB4MTEyMCwgMHgxMjAwLCAweDEyMjAsIDB4MTUwMCwgMHgxNTIwLCAweDE2MDAsIDB4MTYyMCxcbiAgICAgICAgICAgIDB4MTcwMCwgMHgxNzIwLCAweDEwMDAsIDB4MTMwMCwgMHgxMzIwLCAweDE0MDAsIDB4MTQyMF07XG5cbi8vIENFQS02MDggY2FwdGlvbnMgYXJlIHJlbmRlcmVkIG9udG8gYSAzNHgxNSBtYXRyaXggb2YgY2hhcmFjdGVyXG4vLyBjZWxscy4gVGhlIFwiYm90dG9tXCIgcm93IGlzIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIG91dGVyIGFycmF5LlxudmFyIGNyZWF0ZURpc3BsYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLCBpID0gQk9UVE9NX1JPVyArIDE7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBDZWE2MDhTdHJlYW0gPSBmdW5jdGlvbihmaWVsZCwgZGF0YUNoYW5uZWwpIHtcbiAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgdGhpcy5maWVsZF8gPSBmaWVsZCB8fCAwO1xuICB0aGlzLmRhdGFDaGFubmVsXyA9IGRhdGFDaGFubmVsIHx8IDA7XG5cbiAgdGhpcy5uYW1lXyA9ICdDQycgKyAoKCh0aGlzLmZpZWxkXyA8PCAxKSB8IHRoaXMuZGF0YUNoYW5uZWxfKSArIDEpO1xuXG4gIHRoaXMuc2V0Q29uc3RhbnRzKCk7XG4gIHRoaXMucmVzZXQoKTtcblxuICB0aGlzLnB1c2ggPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgICB2YXIgZGF0YSwgc3dhcCwgY2hhcjAsIGNoYXIxLCB0ZXh0O1xuICAgIC8vIHJlbW92ZSB0aGUgcGFyaXR5IGJpdHNcbiAgICBkYXRhID0gcGFja2V0LmNjRGF0YSAmIDB4N2Y3ZjtcblxuICAgIC8vIGlnbm9yZSBkdXBsaWNhdGUgY29udHJvbCBjb2RlczsgdGhlIHNwZWMgZGVtYW5kcyB0aGV5J3JlIHNlbnQgdHdpY2VcbiAgICBpZiAoZGF0YSA9PT0gdGhpcy5sYXN0Q29udHJvbENvZGVfKSB7XG4gICAgICB0aGlzLmxhc3RDb250cm9sQ29kZV8gPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIGNvbnRyb2wgY29kZXNcbiAgICBpZiAoKGRhdGEgJiAweGYwMDApID09PSAweDEwMDApIHtcbiAgICAgIHRoaXMubGFzdENvbnRyb2xDb2RlXyA9IGRhdGE7XG4gICAgfSBlbHNlIGlmIChkYXRhICE9PSB0aGlzLlBBRERJTkdfKSB7XG4gICAgICB0aGlzLmxhc3RDb250cm9sQ29kZV8gPSBudWxsO1xuICAgIH1cblxuICAgIGNoYXIwID0gZGF0YSA+Pj4gODtcbiAgICBjaGFyMSA9IGRhdGEgJiAweGZmO1xuXG4gICAgaWYgKGRhdGEgPT09IHRoaXMuUEFERElOR18pIHtcbiAgICAgIHJldHVybjtcblxuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5SRVNVTUVfQ0FQVElPTl9MT0FESU5HXykge1xuICAgICAgdGhpcy5tb2RlXyA9ICdwb3BPbic7XG5cbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuRU5EX09GX0NBUFRJT05fKSB7XG4gICAgICAvLyBJZiBhbiBFT0MgaXMgcmVjZWl2ZWQgd2hpbGUgaW4gcGFpbnQtb24gbW9kZSwgdGhlIGRpc3BsYXllZCBjYXB0aW9uXG4gICAgICAvLyB0ZXh0IHNob3VsZCBiZSBzd2FwcGVkIHRvIG5vbi1kaXNwbGF5ZWQgbWVtb3J5IGFzIGlmIGl0IHdhcyBhIHBvcC1vblxuICAgICAgLy8gY2FwdGlvbi4gQmVjYXVzZSBvZiB0aGF0LCB3ZSBzaG91bGQgZXhwbGljaXRseSBzd2l0Y2ggYmFjayB0byBwb3Atb25cbiAgICAgIC8vIG1vZGVcbiAgICAgIHRoaXMubW9kZV8gPSAncG9wT24nO1xuICAgICAgdGhpcy5jbGVhckZvcm1hdHRpbmcocGFja2V0LnB0cyk7XG4gICAgICAvLyBpZiBhIGNhcHRpb24gd2FzIGJlaW5nIGRpc3BsYXllZCwgaXQncyBnb25lIG5vd1xuICAgICAgdGhpcy5mbHVzaERpc3BsYXllZChwYWNrZXQucHRzKTtcblxuICAgICAgLy8gZmxpcCBtZW1vcnlcbiAgICAgIHN3YXAgPSB0aGlzLmRpc3BsYXllZF87XG4gICAgICB0aGlzLmRpc3BsYXllZF8gPSB0aGlzLm5vbkRpc3BsYXllZF87XG4gICAgICB0aGlzLm5vbkRpc3BsYXllZF8gPSBzd2FwO1xuXG4gICAgICAvLyBzdGFydCBtZWFzdXJpbmcgdGhlIHRpbWUgdG8gZGlzcGxheSB0aGUgY2FwdGlvblxuICAgICAgdGhpcy5zdGFydFB0c18gPSBwYWNrZXQucHRzO1xuXG4gICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLlJPTExfVVBfMl9ST1dTXykge1xuICAgICAgdGhpcy5yb2xsVXBSb3dzXyA9IDI7XG4gICAgICB0aGlzLnNldFJvbGxVcChwYWNrZXQucHRzKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuUk9MTF9VUF8zX1JPV1NfKSB7XG4gICAgICB0aGlzLnJvbGxVcFJvd3NfID0gMztcbiAgICAgIHRoaXMuc2V0Um9sbFVwKHBhY2tldC5wdHMpO1xuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5ST0xMX1VQXzRfUk9XU18pIHtcbiAgICAgIHRoaXMucm9sbFVwUm93c18gPSA0O1xuICAgICAgdGhpcy5zZXRSb2xsVXAocGFja2V0LnB0cyk7XG4gICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLkNBUlJJQUdFX1JFVFVSTl8pIHtcbiAgICAgIHRoaXMuY2xlYXJGb3JtYXR0aW5nKHBhY2tldC5wdHMpO1xuICAgICAgdGhpcy5mbHVzaERpc3BsYXllZChwYWNrZXQucHRzKTtcbiAgICAgIHRoaXMuc2hpZnRSb3dzVXBfKCk7XG4gICAgICB0aGlzLnN0YXJ0UHRzXyA9IHBhY2tldC5wdHM7XG5cbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuQkFDS1NQQUNFXykge1xuICAgICAgaWYgKHRoaXMubW9kZV8gPT09ICdwb3BPbicpIHtcbiAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfW3RoaXMucm93X10gPSB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXS5zbGljZSgwLCAtMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuRVJBU0VfRElTUExBWUVEX01FTU9SWV8pIHtcbiAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocGFja2V0LnB0cyk7XG4gICAgICB0aGlzLmRpc3BsYXllZF8gPSBjcmVhdGVEaXNwbGF5QnVmZmVyKCk7XG4gICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLkVSQVNFX05PTl9ESVNQTEFZRURfTUVNT1JZXykge1xuICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuXG4gICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLlJFU1VNRV9ESVJFQ1RfQ0FQVElPTklOR18pIHtcbiAgICAgIGlmICh0aGlzLm1vZGVfICE9PSAncGFpbnRPbicpIHtcbiAgICAgICAgLy8gTk9URTogVGhpcyBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHByb3BlciBjYXB0aW9uIHBvc2l0aW9uaW5nIGlzXG4gICAgICAgIC8vIGltcGxlbWVudGVkXG4gICAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocGFja2V0LnB0cyk7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubW9kZV8gPSAncGFpbnRPbic7XG4gICAgICB0aGlzLnN0YXJ0UHRzXyA9IHBhY2tldC5wdHM7XG5cbiAgICAvLyBBcHBlbmQgc3BlY2lhbCBjaGFyYWN0ZXJzIHRvIGNhcHRpb24gdGV4dFxuICAgIH0gZWxzZSBpZiAodGhpcy5pc1NwZWNpYWxDaGFyYWN0ZXIoY2hhcjAsIGNoYXIxKSkge1xuICAgICAgLy8gQml0bWFzayBjaGFyMCBzbyB0aGF0IHdlIGNhbiBhcHBseSBjaGFyYWN0ZXIgdHJhbnNmb3JtYXRpb25zXG4gICAgICAvLyByZWdhcmRsZXNzIG9mIGZpZWxkIGFuZCBkYXRhIGNoYW5uZWwuXG4gICAgICAvLyBUaGVuIGJ5dGUtc2hpZnQgdG8gdGhlIGxlZnQgYW5kIE9SIHdpdGggY2hhcjEgc28gd2UgY2FuIHBhc3MgdGhlXG4gICAgICAvLyBlbnRpcmUgY2hhcmFjdGVyIGNvZGUgdG8gYGdldENoYXJGcm9tQ29kZWAuXG4gICAgICBjaGFyMCA9IChjaGFyMCAmIDB4MDMpIDw8IDg7XG4gICAgICB0ZXh0ID0gZ2V0Q2hhckZyb21Db2RlKGNoYXIwIHwgY2hhcjEpO1xuICAgICAgdGhpc1t0aGlzLm1vZGVfXShwYWNrZXQucHRzLCB0ZXh0KTtcbiAgICAgIHRoaXMuY29sdW1uXysrO1xuXG4gICAgLy8gQXBwZW5kIGV4dGVuZGVkIGNoYXJhY3RlcnMgdG8gY2FwdGlvbiB0ZXh0XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzRXh0Q2hhcmFjdGVyKGNoYXIwLCBjaGFyMSkpIHtcbiAgICAgIC8vIEV4dGVuZGVkIGNoYXJhY3RlcnMgYWx3YXlzIGZvbGxvdyB0aGVpciBcIm5vbi1leHRlbmRlZFwiIGVxdWl2YWxlbnRzLlxuICAgICAgLy8gSUUgaWYgYSBcIsOoXCIgaXMgZGVzaXJlZCwgeW91J2xsIGFsd2F5cyByZWNlaXZlIFwiZcOoXCI7IG5vbi1jb21wbGlhbnRcbiAgICAgIC8vIGRlY29kZXJzIGFyZSBzdXBwb3NlZCB0byBkcm9wIHRoZSBcIsOoXCIsIHdoaWxlIGNvbXBsaWFudCBkZWNvZGVyc1xuICAgICAgLy8gYmFja3NwYWNlIHRoZSBcImVcIiBhbmQgaW5zZXJ0IFwiw6hcIi5cblxuICAgICAgLy8gRGVsZXRlIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXJcbiAgICAgIGlmICh0aGlzLm1vZGVfID09PSAncG9wT24nKSB7XG4gICAgICAgIHRoaXMubm9uRGlzcGxheWVkX1t0aGlzLnJvd19dID0gdGhpcy5ub25EaXNwbGF5ZWRfW3RoaXMucm93X10uc2xpY2UoMCwgLTEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10gPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXS5zbGljZSgwLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEJpdG1hc2sgY2hhcjAgc28gdGhhdCB3ZSBjYW4gYXBwbHkgY2hhcmFjdGVyIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgLy8gcmVnYXJkbGVzcyBvZiBmaWVsZCBhbmQgZGF0YSBjaGFubmVsLlxuICAgICAgLy8gVGhlbiBieXRlLXNoaWZ0IHRvIHRoZSBsZWZ0IGFuZCBPUiB3aXRoIGNoYXIxIHNvIHdlIGNhbiBwYXNzIHRoZVxuICAgICAgLy8gZW50aXJlIGNoYXJhY3RlciBjb2RlIHRvIGBnZXRDaGFyRnJvbUNvZGVgLlxuICAgICAgY2hhcjAgPSAoY2hhcjAgJiAweDAzKSA8PCA4O1xuICAgICAgdGV4dCA9IGdldENoYXJGcm9tQ29kZShjaGFyMCB8IGNoYXIxKTtcbiAgICAgIHRoaXNbdGhpcy5tb2RlX10ocGFja2V0LnB0cywgdGV4dCk7XG4gICAgICB0aGlzLmNvbHVtbl8rKztcblxuICAgIC8vIFByb2Nlc3MgbWlkLXJvdyBjb2Rlc1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc01pZFJvd0NvZGUoY2hhcjAsIGNoYXIxKSkge1xuICAgICAgLy8gQXR0cmlidXRlcyBhcmUgbm90IGFkZGl0aXZlLCBzbyBjbGVhciBhbGwgZm9ybWF0dGluZ1xuICAgICAgdGhpcy5jbGVhckZvcm1hdHRpbmcocGFja2V0LnB0cyk7XG5cbiAgICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3RhbmRhcmQsIG1pZC1yb3cgY29kZXNcbiAgICAgIC8vIHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHNwYWNlcywgc28gYWRkIG9uZSBub3dcbiAgICAgIHRoaXNbdGhpcy5tb2RlX10ocGFja2V0LnB0cywgJyAnKTtcbiAgICAgIHRoaXMuY29sdW1uXysrO1xuXG4gICAgICBpZiAoKGNoYXIxICYgMHhlKSA9PT0gMHhlKSB7XG4gICAgICAgIHRoaXMuYWRkRm9ybWF0dGluZyhwYWNrZXQucHRzLCBbJ2knXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoY2hhcjEgJiAweDEpID09PSAweDEpIHtcbiAgICAgICAgdGhpcy5hZGRGb3JtYXR0aW5nKHBhY2tldC5wdHMsIFsndSddKTtcbiAgICAgIH1cblxuICAgIC8vIERldGVjdCBvZmZzZXQgY29udHJvbCBjb2RlcyBhbmQgYWRqdXN0IGN1cnNvclxuICAgIH0gZWxzZSBpZiAodGhpcy5pc09mZnNldENvbnRyb2xDb2RlKGNoYXIwLCBjaGFyMSkpIHtcbiAgICAgIC8vIEN1cnNvciBwb3NpdGlvbiBpcyBzZXQgYnkgaW5kZW50IFBBQyAoc2VlIGJlbG93KSBpbiA0LWNvbHVtblxuICAgICAgLy8gaW5jcmVtZW50cywgd2l0aCBhbiBhZGRpdGlvbmFsIG9mZnNldCBjb2RlIG9mIDEtMyB0byByZWFjaCBhbnlcbiAgICAgIC8vIG9mIHRoZSAzMiBjb2x1bW5zIHNwZWNpZmllZCBieSBDRUEtNjA4LiBTbyBhbGwgd2UgbmVlZCB0byBkb1xuICAgICAgLy8gaGVyZSBpcyBpbmNyZW1lbnQgdGhlIGNvbHVtbiBjdXJzb3IgYnkgdGhlIGdpdmVuIG9mZnNldC5cbiAgICAgIHRoaXMuY29sdW1uXyArPSAoY2hhcjEgJiAweDAzKTtcblxuICAgIC8vIERldGVjdCBQQUNzIChQcmVhbWJsZSBBZGRyZXNzIENvZGVzKVxuICAgIH0gZWxzZSBpZiAodGhpcy5pc1BBQyhjaGFyMCwgY2hhcjEpKSB7XG5cbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbG9naWMgZm9yIFBBQyAtPiByb3cgbWFwcGluZywgc28gd2UgaGF2ZSB0byBqdXN0XG4gICAgICAvLyBmaW5kIHRoZSByb3cgY29kZSBpbiBhbiBhcnJheSBhbmQgdXNlIGl0cyBpbmRleCA6KFxuICAgICAgdmFyIHJvdyA9IFJPV1MuaW5kZXhPZihkYXRhICYgMHgxZjIwKTtcblxuICAgICAgLy8gQ29uZmlndXJlIHRoZSBjYXB0aW9uIHdpbmRvdyBpZiB3ZSdyZSBpbiByb2xsLXVwIG1vZGVcbiAgICAgIGlmICh0aGlzLm1vZGVfID09PSAncm9sbFVwJykge1xuICAgICAgICAvLyBUaGlzIGltcGxpZXMgdGhhdCB0aGUgYmFzZSByb3cgaXMgaW5jb3JyZWN0bHkgc2V0LlxuICAgICAgICAvLyBBcyBwZXIgdGhlIHJlY29tbWVuZGF0aW9uIGluIENFQS02MDgoQmFzZSBSb3cgSW1wbGVtZW50YXRpb24pLCBkZWZlciB0byB0aGUgbnVtYmVyXG4gICAgICAgIC8vIG9mIHJvbGwtdXAgcm93cyBzZXQuXG4gICAgICAgIGlmIChyb3cgLSB0aGlzLnJvbGxVcFJvd3NfICsgMSA8IDApIHtcbiAgICAgICAgICByb3cgPSB0aGlzLnJvbGxVcFJvd3NfIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0Um9sbFVwKHBhY2tldC5wdHMsIHJvdyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3cgIT09IHRoaXMucm93Xykge1xuICAgICAgICAvLyBmb3JtYXR0aW5nIGlzIG9ubHkgcGVyc2lzdGVudCBmb3IgY3VycmVudCByb3dcbiAgICAgICAgdGhpcy5jbGVhckZvcm1hdHRpbmcocGFja2V0LnB0cyk7XG4gICAgICAgIHRoaXMucm93XyA9IHJvdztcbiAgICAgIH1cbiAgICAgIC8vIEFsbCBQQUNzIGNhbiBhcHBseSB1bmRlcmxpbmUsIHNvIGRldGVjdCBhbmQgYXBwbHlcbiAgICAgIC8vIChBbGwgb2RkLW51bWJlcmVkIHNlY29uZCBieXRlcyBzZXQgdW5kZXJsaW5lKVxuICAgICAgaWYgKChjaGFyMSAmIDB4MSkgJiYgKHRoaXMuZm9ybWF0dGluZ18uaW5kZXhPZigndScpID09PSAtMSkpIHtcbiAgICAgICAgICB0aGlzLmFkZEZvcm1hdHRpbmcocGFja2V0LnB0cywgWyd1J10pO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGRhdGEgJiAweDEwKSA9PT0gMHgxMCkge1xuICAgICAgICAvLyBXZSd2ZSBnb3QgYW4gaW5kZW50IGxldmVsIGNvZGUuIEVhY2ggc3VjY2Vzc2l2ZSBldmVuIG51bWJlclxuICAgICAgICAvLyBpbmNyZW1lbnRzIHRoZSBjb2x1bW4gY3Vyc29yIGJ5IDQsIHNvIHdlIGNhbiBnZXQgdGhlIGRlc2lyZWRcbiAgICAgICAgLy8gY29sdW1uIHBvc2l0aW9uIGJ5IGJpdC1zaGlmdGluZyB0byB0aGUgcmlnaHQgKHRvIGdldCBuLzIpXG4gICAgICAgIC8vIGFuZCBtdWx0aXBseWluZyBieSA0LlxuICAgICAgICB0aGlzLmNvbHVtbl8gPSAoKGRhdGEgJiAweGUpID4+IDEpICogNDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNDb2xvclBBQyhjaGFyMSkpIHtcbiAgICAgICAgLy8gaXQncyBhIGNvbG9yIGNvZGUsIHRob3VnaCB3ZSBvbmx5IHN1cHBvcnQgd2hpdGUsIHdoaWNoXG4gICAgICAgIC8vIGNhbiBiZSBlaXRoZXIgbm9ybWFsIG9yIGl0YWxpY2l6ZWQuIHdoaXRlIGl0YWxpY3MgY2FuIGJlXG4gICAgICAgIC8vIGVpdGhlciAweDRlIG9yIDB4NmUgZGVwZW5kaW5nIG9uIHRoZSByb3csIHNvIHdlIGp1c3RcbiAgICAgICAgLy8gYml0d2lzZS1hbmQgd2l0aCAweGUgdG8gc2VlIGlmIGl0YWxpY3Mgc2hvdWxkIGJlIHR1cm5lZCBvblxuICAgICAgICBpZiAoKGNoYXIxICYgMHhlKSA9PT0gMHhlKSB7XG4gICAgICAgICAgdGhpcy5hZGRGb3JtYXR0aW5nKHBhY2tldC5wdHMsIFsnaSddKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBhIG5vcm1hbCBjaGFyYWN0ZXIgaW4gY2hhcjAsIGFuZCBwb3NzaWJseSBvbmUgaW4gY2hhcjFcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNOb3JtYWxDaGFyKGNoYXIwKSkge1xuICAgICAgaWYgKGNoYXIxID09PSAweDAwKSB7XG4gICAgICAgIGNoYXIxID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRleHQgPSBnZXRDaGFyRnJvbUNvZGUoY2hhcjApO1xuICAgICAgdGV4dCArPSBnZXRDaGFyRnJvbUNvZGUoY2hhcjEpO1xuICAgICAgdGhpc1t0aGlzLm1vZGVfXShwYWNrZXQucHRzLCB0ZXh0KTtcbiAgICAgIHRoaXMuY29sdW1uXyArPSB0ZXh0Lmxlbmd0aDtcblxuICAgIH0gLy8gZmluaXNoIGRhdGEgcHJvY2Vzc2luZ1xuXG4gIH07XG59O1xuQ2VhNjA4U3RyZWFtLnByb3RvdHlwZSA9IG5ldyBTdHJlYW0oKTtcbi8vIFRyaWdnZXIgYSBjdWUgcG9pbnQgdGhhdCBjYXB0dXJlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGVcbi8vIGRpc3BsYXkgYnVmZmVyXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLmZsdXNoRGlzcGxheWVkID0gZnVuY3Rpb24ocHRzKSB7XG4gIHZhciBjb250ZW50ID0gdGhpcy5kaXNwbGF5ZWRfXG4gICAgLy8gcmVtb3ZlIHNwYWNlcyBmcm9tIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBzdHJpbmdcbiAgICAubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJvdy50cmltKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIE9yZGluYXJpbHksIHRoaXMgc2hvdWxkbid0IGhhcHBlbi4gSG93ZXZlciwgY2FwdGlvblxuICAgICAgICAvLyBwYXJzaW5nIGVycm9ycyBzaG91bGQgbm90IHRocm93IGV4Y2VwdGlvbnMgYW5kXG4gICAgICAgIC8vIGJyZWFrIHBsYXliYWNrLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmVycm9yKCdTa2lwcGluZyBtYWxmb3JtZWQgY2FwdGlvbi4nKTtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pXG4gICAgLy8gY29tYmluZSBhbGwgdGV4dCByb3dzIHRvIGRpc3BsYXkgaW4gb25lIGN1ZVxuICAgIC5qb2luKCdcXG4nKVxuICAgIC8vIGFuZCByZW1vdmUgYmxhbmsgcm93cyBmcm9tIHRoZSBzdGFydCBhbmQgZW5kLCBidXQgbm90IHRoZSBtaWRkbGVcbiAgICAucmVwbGFjZSgvXlxcbit8XFxuKyQvZywgJycpO1xuXG4gIGlmIChjb250ZW50Lmxlbmd0aCkge1xuICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgIHN0YXJ0UHRzOiB0aGlzLnN0YXJ0UHRzXyxcbiAgICAgIGVuZFB0czogcHRzLFxuICAgICAgdGV4dDogY29udGVudCxcbiAgICAgIHN0cmVhbTogdGhpcy5uYW1lX1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIFplcm8gb3V0IHRoZSBkYXRhLCB1c2VkIGZvciBzdGFydHVwIGFuZCBvbiBzZWVrXG4gKi9cbkNlYTYwOFN0cmVhbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5tb2RlXyA9ICdwb3BPbic7XG4gIC8vIFdoZW4gaW4gcm9sbC11cCBtb2RlLCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgcm93IHRoYXQgd2lsbFxuICAvLyBhY3R1YWxseSBkaXNwbGF5IGNhcHRpb25zLiBJZiBhIGNhcHRpb24gaXMgc2hpZnRlZCB0byBhIHJvd1xuICAvLyB3aXRoIGEgbG93ZXIgaW5kZXggdGhhbiB0aGlzLCBpdCBpcyBjbGVhcmVkIGZyb20gdGhlIGRpc3BsYXlcbiAgLy8gYnVmZmVyXG4gIHRoaXMudG9wUm93XyA9IDA7XG4gIHRoaXMuc3RhcnRQdHNfID0gMDtcbiAgdGhpcy5kaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICB0aGlzLm5vbkRpc3BsYXllZF8gPSBjcmVhdGVEaXNwbGF5QnVmZmVyKCk7XG4gIHRoaXMubGFzdENvbnRyb2xDb2RlXyA9IG51bGw7XG5cbiAgLy8gVHJhY2sgcm93IGFuZCBjb2x1bW4gZm9yIHByb3BlciBsaW5lLWJyZWFraW5nIGFuZCBzcGFjaW5nXG4gIHRoaXMuY29sdW1uXyA9IDA7XG4gIHRoaXMucm93XyA9IEJPVFRPTV9ST1c7XG4gIHRoaXMucm9sbFVwUm93c18gPSAyO1xuXG4gIC8vIFRoaXMgdmFyaWFibGUgaG9sZHMgY3VycmVudGx5LWFwcGxpZWQgZm9ybWF0dGluZ1xuICB0aGlzLmZvcm1hdHRpbmdfID0gW107XG59O1xuXG4vKipcbiAqIFNldHMgdXAgY29udHJvbCBjb2RlIGFuZCByZWxhdGVkIGNvbnN0YW50cyBmb3IgdGhpcyBpbnN0YW5jZVxuICovXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLnNldENvbnN0YW50cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBUaGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgaGF2ZSB0aGVzZSB1c2VzOlxuICAvLyBleHRfIDogICAgY2hhcjAgZm9yIG1pZC1yb3cgY29kZXMsIGFuZCB0aGUgYmFzZSBmb3IgZXh0ZW5kZWRcbiAgLy8gICAgICAgICAgIGNoYXJzIChleHRfKzAsIGV4dF8rMSwgYW5kIGV4dF8rMiBhcmUgY2hhcjBzIGZvclxuICAvLyAgICAgICAgICAgZXh0ZW5kZWQgY29kZXMpXG4gIC8vIGNvbnRyb2xfOiBjaGFyMCBmb3IgY29udHJvbCBjb2RlcywgZXhjZXB0IGJ5dGUtc2hpZnRlZCB0byB0aGVcbiAgLy8gICAgICAgICAgIGxlZnQgc28gdGhhdCB3ZSBjYW4gZG8gdGhpcy5jb250cm9sXyB8IENPTlRST0xfQ09ERVxuICAvLyBvZmZzZXRfOiAgY2hhcjAgZm9yIHRhYiBvZmZzZXQgY29kZXNcbiAgLy9cbiAgLy8gSXQncyBhbHNvIHdvcnRoIG5vdGluZyB0aGF0IGNvbnRyb2wgY29kZXMsIGFuZCBfb25seV8gY29udHJvbCBjb2RlcyxcbiAgLy8gZGlmZmVyIGJldHdlZW4gZmllbGQgMSBhbmQgZmllbGQyLiBGaWVsZCAyIGNvbnRyb2wgY29kZXMgYXJlIGFsd2F5c1xuICAvLyB0aGVpciBmaWVsZCAxIHZhbHVlIHBsdXMgMS4gVGhhdCdzIHdoeSB0aGVyZSdzIHRoZSBcInwgZmllbGRcIiBvbiB0aGVcbiAgLy8gY29udHJvbCB2YWx1ZS5cbiAgaWYgKHRoaXMuZGF0YUNoYW5uZWxfID09PSAwKSB7XG4gICAgdGhpcy5CQVNFXyAgICAgPSAweDEwO1xuICAgIHRoaXMuRVhUXyAgICAgID0gMHgxMTtcbiAgICB0aGlzLkNPTlRST0xfICA9ICgweDE0IHwgdGhpcy5maWVsZF8pIDw8IDg7XG4gICAgdGhpcy5PRkZTRVRfICAgPSAweDE3O1xuICB9IGVsc2UgaWYgKHRoaXMuZGF0YUNoYW5uZWxfID09PSAxKSB7XG4gICAgdGhpcy5CQVNFXyAgICAgPSAweDE4O1xuICAgIHRoaXMuRVhUXyAgICAgID0gMHgxOTtcbiAgICB0aGlzLkNPTlRST0xfICA9ICgweDFjIHwgdGhpcy5maWVsZF8pIDw8IDg7XG4gICAgdGhpcy5PRkZTRVRfICAgPSAweDFmO1xuICB9XG5cbiAgLy8gQ29uc3RhbnRzIGZvciB0aGUgTFNCeXRlIGNvbW1hbmQgY29kZXMgcmVjb2duaXplZCBieSBDZWE2MDhTdHJlYW0uIFRoaXNcbiAgLy8gbGlzdCBpcyBub3QgZXhoYXVzdGl2ZS4gRm9yIGEgbW9yZSBjb21wcmVoZW5zaXZlIGxpc3RpbmcgYW5kIHNlbWFudGljcyBzZWVcbiAgLy8gaHR0cDovL3d3dy5ncG8uZ292L2Zkc3lzL3BrZy9DRlItMjAxMC10aXRsZTQ3LXZvbDEvcGRmL0NGUi0yMDEwLXRpdGxlNDctdm9sMS1zZWMxNS0xMTkucGRmXG4gIC8vIFBhZGRpbmdcbiAgdGhpcy5QQURESU5HXyAgICAgICAgICAgICAgICAgICAgPSAweDAwMDA7XG4gIC8vIFBvcC1vbiBNb2RlXG4gIHRoaXMuUkVTVU1FX0NBUFRJT05fTE9BRElOR18gICAgID0gdGhpcy5DT05UUk9MXyB8IDB4MjA7XG4gIHRoaXMuRU5EX09GX0NBUFRJT05fICAgICAgICAgICAgID0gdGhpcy5DT05UUk9MXyB8IDB4MmY7XG4gIC8vIFJvbGwtdXAgTW9kZVxuICB0aGlzLlJPTExfVVBfMl9ST1dTXyAgICAgICAgICAgICA9IHRoaXMuQ09OVFJPTF8gfCAweDI1O1xuICB0aGlzLlJPTExfVVBfM19ST1dTXyAgICAgICAgICAgICA9IHRoaXMuQ09OVFJPTF8gfCAweDI2O1xuICB0aGlzLlJPTExfVVBfNF9ST1dTXyAgICAgICAgICAgICA9IHRoaXMuQ09OVFJPTF8gfCAweDI3O1xuICB0aGlzLkNBUlJJQUdFX1JFVFVSTl8gICAgICAgICAgICA9IHRoaXMuQ09OVFJPTF8gfCAweDJkO1xuICAvLyBwYWludC1vbiBtb2RlXG4gIHRoaXMuUkVTVU1FX0RJUkVDVF9DQVBUSU9OSU5HXyAgID0gdGhpcy5DT05UUk9MXyB8IDB4Mjk7XG4gIC8vIEVyYXN1cmVcbiAgdGhpcy5CQUNLU1BBQ0VfICAgICAgICAgICAgICAgICAgPSB0aGlzLkNPTlRST0xfIHwgMHgyMTtcbiAgdGhpcy5FUkFTRV9ESVNQTEFZRURfTUVNT1JZXyAgICAgPSB0aGlzLkNPTlRST0xfIHwgMHgyYztcbiAgdGhpcy5FUkFTRV9OT05fRElTUExBWUVEX01FTU9SWV8gPSB0aGlzLkNPTlRST0xfIHwgMHgyZTtcbn07XG5cbi8qKlxuICogRGV0ZWN0cyBpZiB0aGUgMi1ieXRlIHBhY2tldCBkYXRhIGlzIGEgc3BlY2lhbCBjaGFyYWN0ZXJcbiAqXG4gKiBTcGVjaWFsIGNoYXJhY3RlcnMgaGF2ZSBhIHNlY29uZCBieXRlIGluIHRoZSByYW5nZSAweDMwIHRvIDB4M2YsXG4gKiB3aXRoIHRoZSBmaXJzdCBieXRlIGJlaW5nIDB4MTEgKGZvciBkYXRhIGNoYW5uZWwgMSkgb3IgMHgxOSAoZm9yXG4gKiBkYXRhIGNoYW5uZWwgMikuXG4gKlxuICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjAgVGhlIGZpcnN0IGJ5dGVcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIxIFRoZSBzZWNvbmQgYnl0ZVxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgV2hldGhlciB0aGUgMiBieXRlcyBhcmUgYW4gc3BlY2lhbCBjaGFyYWN0ZXJcbiAqL1xuQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pc1NwZWNpYWxDaGFyYWN0ZXIgPSBmdW5jdGlvbihjaGFyMCwgY2hhcjEpIHtcbiAgcmV0dXJuIChjaGFyMCA9PT0gdGhpcy5FWFRfICYmIGNoYXIxID49IDB4MzAgJiYgY2hhcjEgPD0gMHgzZik7XG59O1xuXG4vKipcbiAqIERldGVjdHMgaWYgdGhlIDItYnl0ZSBwYWNrZXQgZGF0YSBpcyBhbiBleHRlbmRlZCBjaGFyYWN0ZXJcbiAqXG4gKiBFeHRlbmRlZCBjaGFyYWN0ZXJzIGhhdmUgYSBzZWNvbmQgYnl0ZSBpbiB0aGUgcmFuZ2UgMHgyMCB0byAweDNmLFxuICogd2l0aCB0aGUgZmlyc3QgYnl0ZSBiZWluZyAweDEyIG9yIDB4MTMgKGZvciBkYXRhIGNoYW5uZWwgMSkgb3JcbiAqIDB4MWEgb3IgMHgxYiAoZm9yIGRhdGEgY2hhbm5lbCAyKS5cbiAqXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMCBUaGUgZmlyc3QgYnl0ZVxuICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhbiBleHRlbmRlZCBjaGFyYWN0ZXJcbiAqL1xuQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pc0V4dENoYXJhY3RlciA9IGZ1bmN0aW9uKGNoYXIwLCBjaGFyMSkge1xuICByZXR1cm4gKChjaGFyMCA9PT0gKHRoaXMuRVhUXyArIDEpIHx8IGNoYXIwID09PSAodGhpcy5FWFRfICsgMikpICYmXG4gICAgKGNoYXIxID49IDB4MjAgJiYgY2hhcjEgPD0gMHgzZikpO1xufTtcblxuLyoqXG4gKiBEZXRlY3RzIGlmIHRoZSAyLWJ5dGUgcGFja2V0IGlzIGEgbWlkLXJvdyBjb2RlXG4gKlxuICogTWlkLXJvdyBjb2RlcyBoYXZlIGEgc2Vjb25kIGJ5dGUgaW4gdGhlIHJhbmdlIDB4MjAgdG8gMHgyZiwgd2l0aFxuICogdGhlIGZpcnN0IGJ5dGUgYmVpbmcgMHgxMSAoZm9yIGRhdGEgY2hhbm5lbCAxKSBvciAweDE5IChmb3IgZGF0YVxuICogY2hhbm5lbCAyKS5cbiAqXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMCBUaGUgZmlyc3QgYnl0ZVxuICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhIG1pZC1yb3cgY29kZVxuICovXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzTWlkUm93Q29kZSA9IGZ1bmN0aW9uKGNoYXIwLCBjaGFyMSkge1xuICByZXR1cm4gKGNoYXIwID09PSB0aGlzLkVYVF8gJiYgKGNoYXIxID49IDB4MjAgJiYgY2hhcjEgPD0gMHgyZikpO1xufTtcblxuLyoqXG4gKiBEZXRlY3RzIGlmIHRoZSAyLWJ5dGUgcGFja2V0IGlzIGFuIG9mZnNldCBjb250cm9sIGNvZGVcbiAqXG4gKiBPZmZzZXQgY29udHJvbCBjb2RlcyBoYXZlIGEgc2Vjb25kIGJ5dGUgaW4gdGhlIHJhbmdlIDB4MjEgdG8gMHgyMyxcbiAqIHdpdGggdGhlIGZpcnN0IGJ5dGUgYmVpbmcgMHgxNyAoZm9yIGRhdGEgY2hhbm5lbCAxKSBvciAweDFmIChmb3JcbiAqIGRhdGEgY2hhbm5lbCAyKS5cbiAqXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMCBUaGUgZmlyc3QgYnl0ZVxuICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhbiBvZmZzZXQgY29udHJvbCBjb2RlXG4gKi9cbkNlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNPZmZzZXRDb250cm9sQ29kZSA9IGZ1bmN0aW9uKGNoYXIwLCBjaGFyMSkge1xuICByZXR1cm4gKGNoYXIwID09PSB0aGlzLk9GRlNFVF8gJiYgKGNoYXIxID49IDB4MjEgJiYgY2hhcjEgPD0gMHgyMykpO1xufTtcblxuLyoqXG4gKiBEZXRlY3RzIGlmIHRoZSAyLWJ5dGUgcGFja2V0IGlzIGEgUHJlYW1ibGUgQWRkcmVzcyBDb2RlXG4gKlxuICogUEFDcyBoYXZlIGEgZmlyc3QgYnl0ZSBpbiB0aGUgcmFuZ2UgMHgxMCB0byAweDE3IChmb3IgZGF0YSBjaGFubmVsIDEpXG4gKiBvciAweDE4IHRvIDB4MWYgKGZvciBkYXRhIGNoYW5uZWwgMiksIHdpdGggdGhlIHNlY29uZCBieXRlIGluIHRoZVxuICogcmFuZ2UgMHg0MCB0byAweDdmLlxuICpcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIwIFRoZSBmaXJzdCBieXRlXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMSBUaGUgc2Vjb25kIGJ5dGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFdoZXRoZXIgdGhlIDIgYnl0ZXMgYXJlIGEgUEFDXG4gKi9cbkNlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNQQUMgPSBmdW5jdGlvbihjaGFyMCwgY2hhcjEpIHtcbiAgcmV0dXJuIChjaGFyMCA+PSB0aGlzLkJBU0VfICYmIGNoYXIwIDwgKHRoaXMuQkFTRV8gKyA4KSAmJlxuICAgIChjaGFyMSA+PSAweDQwICYmIGNoYXIxIDw9IDB4N2YpKTtcbn07XG5cbi8qKlxuICogRGV0ZWN0cyBpZiBhIHBhY2tldCdzIHNlY29uZCBieXRlIGlzIGluIHRoZSByYW5nZSBvZiBhIFBBQyBjb2xvciBjb2RlXG4gKlxuICogUEFDIGNvbG9yIGNvZGVzIGhhdmUgdGhlIHNlY29uZCBieXRlIGJlIGluIHRoZSByYW5nZSAweDQwIHRvIDB4NGYsIG9yXG4gKiAweDYwIHRvIDB4NmYuXG4gKlxuICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSBieXRlIGlzIGEgY29sb3IgUEFDXG4gKi9cbkNlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNDb2xvclBBQyA9IGZ1bmN0aW9uKGNoYXIxKSB7XG4gIHJldHVybiAoKGNoYXIxID49IDB4NDAgJiYgY2hhcjEgPD0gMHg0ZikgfHwgKGNoYXIxID49IDB4NjAgJiYgY2hhcjEgPD0gMHg3ZikpO1xufTtcblxuLyoqXG4gKiBEZXRlY3RzIGlmIGEgc2luZ2xlIGJ5dGUgaXMgaW4gdGhlIHJhbmdlIG9mIGEgbm9ybWFsIGNoYXJhY3RlclxuICpcbiAqIE5vcm1hbCB0ZXh0IGJ5dGVzIGFyZSBpbiB0aGUgcmFuZ2UgMHgyMCB0byAweDdmLlxuICpcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIgIFRoZSBieXRlXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSBieXRlIGlzIGEgbm9ybWFsIGNoYXJhY3RlclxuICovXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzTm9ybWFsQ2hhciA9IGZ1bmN0aW9uKGNoYXIpIHtcbiAgcmV0dXJuIChjaGFyID49IDB4MjAgJiYgY2hhciA8PSAweDdmKTtcbn07XG5cbi8qKlxuICogQ29uZmlndXJlcyByb2xsLXVwXG4gKlxuICogQHBhcmFtICB7SW50ZWdlcn0gcHRzICAgICAgICAgQ3VycmVudCBQVFNcbiAqIEBwYXJhbSAge0ludGVnZXJ9IG5ld0Jhc2VSb3cgIFVzZWQgYnkgUEFDcyB0byBzbGlkZSB0aGUgY3VycmVudCB3aW5kb3cgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgbmV3IHBvc2l0aW9uXG4gKi9cbkNlYTYwOFN0cmVhbS5wcm90b3R5cGUuc2V0Um9sbFVwID0gZnVuY3Rpb24ocHRzLCBuZXdCYXNlUm93KSB7XG4gIC8vIFJlc2V0IHRoZSBiYXNlIHJvdyB0byB0aGUgYm90dG9tIHJvdyB3aGVuIHN3aXRjaGluZyBtb2Rlc1xuICBpZiAodGhpcy5tb2RlXyAhPT0gJ3JvbGxVcCcpIHtcbiAgICB0aGlzLnJvd18gPSBCT1RUT01fUk9XO1xuICAgIHRoaXMubW9kZV8gPSAncm9sbFVwJztcbiAgICAvLyBTcGVjIHNheXMgdG8gd2lwZSBtZW1vcmllcyB3aGVuIHN3aXRjaGluZyB0byByb2xsLXVwXG4gICAgdGhpcy5mbHVzaERpc3BsYXllZChwdHMpO1xuICAgIHRoaXMubm9uRGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICB0aGlzLmRpc3BsYXllZF8gPSBjcmVhdGVEaXNwbGF5QnVmZmVyKCk7XG4gIH1cblxuICBpZiAobmV3QmFzZVJvdyAhPT0gdW5kZWZpbmVkICYmIG5ld0Jhc2VSb3cgIT09IHRoaXMucm93Xykge1xuICAgIC8vIG1vdmUgY3VycmVudGx5IGRpc3BsYXllZCBjYXB0aW9ucyAodXAgb3IgZG93bikgdG8gdGhlIG5ldyBiYXNlIHJvd1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb2xsVXBSb3dzXzsgaSsrKSB7XG4gICAgICB0aGlzLmRpc3BsYXllZF9bbmV3QmFzZVJvdyAtIGldID0gdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93XyAtIGldO1xuICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93XyAtIGldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgaWYgKG5ld0Jhc2VSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgIG5ld0Jhc2VSb3cgPSB0aGlzLnJvd187XG4gIH1cblxuICB0aGlzLnRvcFJvd18gPSBuZXdCYXNlUm93IC0gdGhpcy5yb2xsVXBSb3dzXyArIDE7XG59O1xuXG4vLyBBZGRzIHRoZSBvcGVuaW5nIEhUTUwgdGFnIGZvciB0aGUgcGFzc2VkIGNoYXJhY3RlciB0byB0aGUgY2FwdGlvbiB0ZXh0LFxuLy8gYW5kIGtlZXBzIHRyYWNrIG9mIGl0IGZvciBsYXRlciBjbG9zaW5nXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLmFkZEZvcm1hdHRpbmcgPSBmdW5jdGlvbihwdHMsIGZvcm1hdCkge1xuICB0aGlzLmZvcm1hdHRpbmdfID0gdGhpcy5mb3JtYXR0aW5nXy5jb25jYXQoZm9ybWF0KTtcbiAgdmFyIHRleHQgPSBmb3JtYXQucmVkdWNlKGZ1bmN0aW9uKHRleHQsIGZvcm1hdCkge1xuICAgIHJldHVybiB0ZXh0ICsgJzwnICsgZm9ybWF0ICsgJz4nO1xuICB9LCAnJyk7XG4gIHRoaXNbdGhpcy5tb2RlX10ocHRzLCB0ZXh0KTtcbn07XG5cbi8vIEFkZHMgSFRNTCBjbG9zaW5nIHRhZ3MgZm9yIGN1cnJlbnQgZm9ybWF0dGluZyB0byBjYXB0aW9uIHRleHQgYW5kXG4vLyBjbGVhcnMgcmVtZW1iZXJlZCBmb3JtYXR0aW5nXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLmNsZWFyRm9ybWF0dGluZyA9IGZ1bmN0aW9uKHB0cykge1xuICBpZiAoIXRoaXMuZm9ybWF0dGluZ18ubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB0ZXh0ID0gdGhpcy5mb3JtYXR0aW5nXy5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uKHRleHQsIGZvcm1hdCkge1xuICAgIHJldHVybiB0ZXh0ICsgJzwvJyArIGZvcm1hdCArICc+JztcbiAgfSwgJycpO1xuICB0aGlzLmZvcm1hdHRpbmdfID0gW107XG4gIHRoaXNbdGhpcy5tb2RlX10ocHRzLCB0ZXh0KTtcbn07XG5cbi8vIE1vZGUgSW1wbGVtZW50YXRpb25zXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLnBvcE9uID0gZnVuY3Rpb24ocHRzLCB0ZXh0KSB7XG4gIHZhciBiYXNlUm93ID0gdGhpcy5ub25EaXNwbGF5ZWRfW3RoaXMucm93X107XG5cbiAgLy8gYnVmZmVyIGNoYXJhY3RlcnNcbiAgYmFzZVJvdyArPSB0ZXh0O1xuICB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IGJhc2VSb3c7XG59O1xuXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLnJvbGxVcCA9IGZ1bmN0aW9uKHB0cywgdGV4dCkge1xuICB2YXIgYmFzZVJvdyA9IHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dO1xuXG4gIGJhc2VSb3cgKz0gdGV4dDtcbiAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10gPSBiYXNlUm93O1xuXG59O1xuXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLnNoaWZ0Um93c1VwXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaTtcbiAgLy8gY2xlYXIgb3V0IGluYWN0aXZlIHJvd3NcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9wUm93XzsgaSsrKSB7XG4gICAgdGhpcy5kaXNwbGF5ZWRfW2ldID0gJyc7XG4gIH1cbiAgZm9yIChpID0gdGhpcy5yb3dfICsgMTsgaSA8IEJPVFRPTV9ST1cgKyAxOyBpKyspIHtcbiAgICB0aGlzLmRpc3BsYXllZF9baV0gPSAnJztcbiAgfVxuICAvLyBzaGlmdCBkaXNwbGF5ZWQgcm93cyB1cFxuICBmb3IgKGkgPSB0aGlzLnRvcFJvd187IGkgPCB0aGlzLnJvd187IGkrKykge1xuICAgIHRoaXMuZGlzcGxheWVkX1tpXSA9IHRoaXMuZGlzcGxheWVkX1tpICsgMV07XG4gIH1cbiAgLy8gY2xlYXIgb3V0IHRoZSBib3R0b20gcm93XG4gIHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dID0gJyc7XG59O1xuXG5DZWE2MDhTdHJlYW0ucHJvdG90eXBlLnBhaW50T24gPSBmdW5jdGlvbihwdHMsIHRleHQpIHtcbiAgdmFyIGJhc2VSb3cgPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXTtcblxuICBiYXNlUm93ICs9IHRleHQ7XG4gIHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dID0gYmFzZVJvdztcbn07XG5cbi8vIGV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDYXB0aW9uU3RyZWFtOiBDYXB0aW9uU3RyZWFtLFxuICBDZWE2MDhTdHJlYW06IENlYTYwOFN0cmVhbVxufTtcbiIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogVXRpbGl0aWVzIHRvIGRldGVjdCBiYXNpYyBwcm9wZXJ0aWVzIGFuZCBtZXRhZGF0YSBhYm91dCBUUyBTZWdtZW50cy5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3RyZWFtVHlwZXMgPSByZXF1aXJlKCcuL3N0cmVhbS10eXBlcy5qcycpO1xuXG52YXIgcGFyc2VQaWQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIHBpZCA9IHBhY2tldFsxXSAmIDB4MWY7XG4gIHBpZCA8PD0gODtcbiAgcGlkIHw9IHBhY2tldFsyXTtcbiAgcmV0dXJuIHBpZDtcbn07XG5cbnZhciBwYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgcmV0dXJuICEhKHBhY2tldFsxXSAmIDB4NDApO1xufTtcblxudmFyIHBhcnNlQWRhcHRpb25GaWVsZCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgLy8gaWYgYW4gYWRhcHRpb24gZmllbGQgaXMgcHJlc2VudCwgaXRzIGxlbmd0aCBpcyBzcGVjaWZpZWQgYnkgdGhlXG4gIC8vIGZpZnRoIGJ5dGUgb2YgdGhlIFRTIHBhY2tldCBoZWFkZXIuIFRoZSBhZGFwdGF0aW9uIGZpZWxkIGlzXG4gIC8vIHVzZWQgdG8gYWRkIHN0dWZmaW5nIHRvIFBFUyBwYWNrZXRzIHRoYXQgZG9uJ3QgZmlsbCBhIGNvbXBsZXRlXG4gIC8vIFRTIHBhY2tldCwgYW5kIHRvIHNwZWNpZnkgc29tZSBmb3JtcyBvZiB0aW1pbmcgYW5kIGNvbnRyb2wgZGF0YVxuICAvLyB0aGF0IHdlIGRvIG5vdCBjdXJyZW50bHkgdXNlLlxuICBpZiAoKChwYWNrZXRbM10gJiAweDMwKSA+Pj4gNCkgPiAweDAxKSB7XG4gICAgb2Zmc2V0ICs9IHBhY2tldFs0XSArIDE7XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn07XG5cbnZhciBwYXJzZVR5cGUgPSBmdW5jdGlvbihwYWNrZXQsIHBtdFBpZCkge1xuICB2YXIgcGlkID0gcGFyc2VQaWQocGFja2V0KTtcbiAgaWYgKHBpZCA9PT0gMCkge1xuICAgIHJldHVybiAncGF0JztcbiAgfSBlbHNlIGlmIChwaWQgPT09IHBtdFBpZCkge1xuICAgIHJldHVybiAncG10JztcbiAgfSBlbHNlIGlmIChwbXRQaWQpIHtcbiAgICByZXR1cm4gJ3Blcyc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgcGFyc2VQYXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIHB1c2kgPSBwYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IocGFja2V0KTtcbiAgdmFyIG9mZnNldCA9IDQgKyBwYXJzZUFkYXB0aW9uRmllbGQocGFja2V0KTtcblxuICBpZiAocHVzaSkge1xuICAgIG9mZnNldCArPSBwYWNrZXRbb2Zmc2V0XSArIDE7XG4gIH1cblxuICByZXR1cm4gKHBhY2tldFtvZmZzZXQgKyAxMF0gJiAweDFmKSA8PCA4IHwgcGFja2V0W29mZnNldCArIDExXTtcbn07XG5cbnZhciBwYXJzZVBtdCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgcHJvZ3JhbU1hcFRhYmxlID0ge307XG4gIHZhciBwdXNpID0gcGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKHBhY2tldCk7XG4gIHZhciBwYXlsb2FkT2Zmc2V0ID0gNCArIHBhcnNlQWRhcHRpb25GaWVsZChwYWNrZXQpO1xuXG4gIGlmIChwdXNpKSB7XG4gICAgcGF5bG9hZE9mZnNldCArPSBwYWNrZXRbcGF5bG9hZE9mZnNldF0gKyAxO1xuICB9XG5cbiAgLy8gUE1UcyBjYW4gYmUgc2VudCBhaGVhZCBvZiB0aGUgdGltZSB3aGVuIHRoZXkgc2hvdWxkIGFjdHVhbGx5XG4gIC8vIHRha2UgZWZmZWN0LiBXZSBkb24ndCBiZWxpZXZlIHRoaXMgc2hvdWxkIGV2ZXIgYmUgdGhlIGNhc2VcbiAgLy8gZm9yIEhMUyBidXQgd2UnbGwgaWdub3JlIFwiZm9yd2FyZFwiIFBNVCBkZWNsYXJhdGlvbnMgaWYgd2Ugc2VlXG4gIC8vIHRoZW0uIEZ1dHVyZSBQTVQgZGVjbGFyYXRpb25zIGhhdmUgdGhlIGN1cnJlbnRfbmV4dF9pbmRpY2F0b3JcbiAgLy8gc2V0IHRvIHplcm8uXG4gIGlmICghKHBhY2tldFtwYXlsb2FkT2Zmc2V0ICsgNV0gJiAweDAxKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWN0aW9uTGVuZ3RoLCB0YWJsZUVuZCwgcHJvZ3JhbUluZm9MZW5ndGg7XG4gIC8vIHRoZSBtYXBwaW5nIHRhYmxlIGVuZHMgYXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBzZWN0aW9uXG4gIHNlY3Rpb25MZW5ndGggPSAocGFja2V0W3BheWxvYWRPZmZzZXQgKyAxXSAmIDB4MGYpIDw8IDggfCBwYWNrZXRbcGF5bG9hZE9mZnNldCArIDJdO1xuICB0YWJsZUVuZCA9IDMgKyBzZWN0aW9uTGVuZ3RoIC0gNDtcblxuICAvLyB0byBkZXRlcm1pbmUgd2hlcmUgdGhlIHRhYmxlIGlzLCB3ZSBoYXZlIHRvIGZpZ3VyZSBvdXQgaG93XG4gIC8vIGxvbmcgdGhlIHByb2dyYW0gaW5mbyBkZXNjcmlwdG9ycyBhcmVcbiAgcHJvZ3JhbUluZm9MZW5ndGggPSAocGFja2V0W3BheWxvYWRPZmZzZXQgKyAxMF0gJiAweDBmKSA8PCA4IHwgcGFja2V0W3BheWxvYWRPZmZzZXQgKyAxMV07XG5cbiAgLy8gYWR2YW5jZSB0aGUgb2Zmc2V0IHRvIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgbWFwcGluZyB0YWJsZVxuICB2YXIgb2Zmc2V0ID0gMTIgKyBwcm9ncmFtSW5mb0xlbmd0aDtcbiAgd2hpbGUgKG9mZnNldCA8IHRhYmxlRW5kKSB7XG4gICAgdmFyIGkgPSBwYXlsb2FkT2Zmc2V0ICsgb2Zmc2V0O1xuICAgIC8vIGFkZCBhbiBlbnRyeSB0aGF0IG1hcHMgdGhlIGVsZW1lbnRhcnlfcGlkIHRvIHRoZSBzdHJlYW1fdHlwZVxuICAgIHByb2dyYW1NYXBUYWJsZVsocGFja2V0W2kgKyAxXSAmIDB4MUYpIDw8IDggfCBwYWNrZXRbaSArIDJdXSA9IHBhY2tldFtpXTtcblxuICAgIC8vIG1vdmUgdG8gdGhlIG5leHQgdGFibGUgZW50cnlcbiAgICAvLyBza2lwIHBhc3QgdGhlIGVsZW1lbnRhcnkgc3RyZWFtIGRlc2NyaXB0b3JzLCBpZiBwcmVzZW50XG4gICAgb2Zmc2V0ICs9ICgocGFja2V0W2kgKyAzXSAmIDB4MEYpIDw8IDggfCBwYWNrZXRbaSArIDRdKSArIDU7XG4gIH1cbiAgcmV0dXJuIHByb2dyYW1NYXBUYWJsZTtcbn07XG5cbnZhciBwYXJzZVBlc1R5cGUgPSBmdW5jdGlvbihwYWNrZXQsIHByb2dyYW1NYXBUYWJsZSkge1xuICB2YXIgcGlkID0gcGFyc2VQaWQocGFja2V0KTtcbiAgdmFyIHR5cGUgPSBwcm9ncmFtTWFwVGFibGVbcGlkXTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBTdHJlYW1UeXBlcy5IMjY0X1NUUkVBTV9UWVBFOlxuICAgICAgcmV0dXJuICd2aWRlbyc7XG4gICAgY2FzZSBTdHJlYW1UeXBlcy5BRFRTX1NUUkVBTV9UWVBFOlxuICAgICAgcmV0dXJuICdhdWRpbyc7XG4gICAgY2FzZSBTdHJlYW1UeXBlcy5NRVRBREFUQV9TVFJFQU1fVFlQRTpcbiAgICAgIHJldHVybiAndGltZWQtbWV0YWRhdGEnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIHBhcnNlUGVzVGltZSA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgcHVzaSA9IHBhcnNlUGF5bG9hZFVuaXRTdGFydEluZGljYXRvcihwYWNrZXQpO1xuICBpZiAoIXB1c2kpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBvZmZzZXQgPSA0ICsgcGFyc2VBZGFwdGlvbkZpZWxkKHBhY2tldCk7XG5cbiAgaWYgKG9mZnNldCA+PSBwYWNrZXQuYnl0ZUxlbmd0aCkge1xuICAgIC8vIEZyb20gdGhlIEggMjIyLjAgTVBFRy1UUyBzcGVjXG4gICAgLy8gXCJGb3IgdHJhbnNwb3J0IHN0cmVhbSBwYWNrZXRzIGNhcnJ5aW5nIFBFUyBwYWNrZXRzLCBzdHVmZmluZyBpcyBuZWVkZWQgd2hlbiB0aGVyZVxuICAgIC8vICBpcyBpbnN1ZmZpY2llbnQgUEVTIHBhY2tldCBkYXRhIHRvIGNvbXBsZXRlbHkgZmlsbCB0aGUgdHJhbnNwb3J0IHN0cmVhbSBwYWNrZXRcbiAgICAvLyAgcGF5bG9hZCBieXRlcy4gU3R1ZmZpbmcgaXMgYWNjb21wbGlzaGVkIGJ5IGRlZmluaW5nIGFuIGFkYXB0YXRpb24gZmllbGQgbG9uZ2VyIHRoYW5cbiAgICAvLyAgdGhlIHN1bSBvZiB0aGUgbGVuZ3RocyBvZiB0aGUgZGF0YSBlbGVtZW50cyBpbiBpdCwgc28gdGhhdCB0aGUgcGF5bG9hZCBieXRlc1xuICAgIC8vICByZW1haW5pbmcgYWZ0ZXIgdGhlIGFkYXB0YXRpb24gZmllbGQgZXhhY3RseSBhY2NvbW1vZGF0ZXMgdGhlIGF2YWlsYWJsZSBQRVMgcGFja2V0XG4gICAgLy8gIGRhdGEuXCJcbiAgICAvL1xuICAgIC8vIElmIHRoZSBvZmZzZXQgaXMgPj0gdGhlIGxlbmd0aCBvZiB0aGUgcGFja2V0LCB0aGVuIHRoZSBwYWNrZXQgY29udGFpbnMgbm8gZGF0YVxuICAgIC8vIGFuZCBpbnN0ZWFkIGlzIGp1c3QgYWRhcHRpb24gZmllbGQgc3R1ZmZpbmcgYnl0ZXNcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwZXMgPSBudWxsO1xuICB2YXIgcHRzRHRzRmxhZ3M7XG5cbiAgLy8gUEVTIHBhY2tldHMgbWF5IGJlIGFubm90YXRlZCB3aXRoIGEgUFRTIHZhbHVlLCBvciBhIFBUUyB2YWx1ZVxuICAvLyBhbmQgYSBEVFMgdmFsdWUuIERldGVybWluZSB3aGF0IGNvbWJpbmF0aW9uIG9mIHZhbHVlcyBpc1xuICAvLyBhdmFpbGFibGUgdG8gd29yayB3aXRoLlxuICBwdHNEdHNGbGFncyA9IHBhY2tldFtvZmZzZXQgKyA3XTtcblxuICAvLyBQVFMgYW5kIERUUyBhcmUgbm9ybWFsbHkgc3RvcmVkIGFzIGEgMzMtYml0IG51bWJlci4gIEphdmFzY3JpcHRcbiAgLy8gcGVyZm9ybXMgYWxsIGJpdHdpc2Ugb3BlcmF0aW9ucyBvbiAzMi1iaXQgaW50ZWdlcnMgYnV0IGphdmFzY3JpcHRcbiAgLy8gc3VwcG9ydHMgYSBtdWNoIGdyZWF0ZXIgcmFuZ2UgKDUyLWJpdHMpIG9mIGludGVnZXIgdXNpbmcgc3RhbmRhcmRcbiAgLy8gbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMuXG4gIC8vIFdlIGNvbnN0cnVjdCBhIDMxLWJpdCB2YWx1ZSB1c2luZyBiaXR3aXNlIG9wZXJhdG9ycyBvdmVyIHRoZSAzMVxuICAvLyBtb3N0IHNpZ25pZmljYW50IGJpdHMgYW5kIHRoZW4gbXVsdGlwbHkgYnkgNCAoZXF1YWwgdG8gYSBsZWZ0LXNoaWZ0XG4gIC8vIG9mIDIpIGJlZm9yZSB3ZSBhZGQgdGhlIGZpbmFsIDIgbGVhc3Qgc2lnbmlmaWNhbnQgYml0cyBvZiB0aGVcbiAgLy8gdGltZXN0YW1wIChlcXVhbCB0byBhbiBPUi4pXG4gIGlmIChwdHNEdHNGbGFncyAmIDB4QzApIHtcbiAgICBwZXMgPSB7fTtcbiAgICAvLyB0aGUgUFRTIGFuZCBEVFMgYXJlIG5vdCB3cml0dGVuIG91dCBkaXJlY3RseS4gRm9yIGluZm9ybWF0aW9uXG4gICAgLy8gb24gaG93IHRoZXkgYXJlIGVuY29kZWQsIHNlZVxuICAgIC8vIGh0dHA6Ly9kdmQuc291cmNlZm9yZ2UubmV0L2R2ZGluZm8vcGVzLWhkci5odG1sXG4gICAgcGVzLnB0cyA9IChwYWNrZXRbb2Zmc2V0ICsgOV0gJiAweDBFKSA8PCAyNyB8XG4gICAgICAocGFja2V0W29mZnNldCArIDEwXSAmIDB4RkYpIDw8IDIwIHxcbiAgICAgIChwYWNrZXRbb2Zmc2V0ICsgMTFdICYgMHhGRSkgPDwgMTIgfFxuICAgICAgKHBhY2tldFtvZmZzZXQgKyAxMl0gJiAweEZGKSA8PCAgNSB8XG4gICAgICAocGFja2V0W29mZnNldCArIDEzXSAmIDB4RkUpID4+PiAgMztcbiAgICBwZXMucHRzICo9IDQ7IC8vIExlZnQgc2hpZnQgYnkgMlxuICAgIHBlcy5wdHMgKz0gKHBhY2tldFtvZmZzZXQgKyAxM10gJiAweDA2KSA+Pj4gMTsgLy8gT1IgYnkgdGhlIHR3byBMU0JzXG4gICAgcGVzLmR0cyA9IHBlcy5wdHM7XG4gICAgaWYgKHB0c0R0c0ZsYWdzICYgMHg0MCkge1xuICAgICAgcGVzLmR0cyA9IChwYWNrZXRbb2Zmc2V0ICsgMTRdICYgMHgwRSkgPDwgMjcgfFxuICAgICAgICAocGFja2V0W29mZnNldCArIDE1XSAmIDB4RkYpIDw8IDIwIHxcbiAgICAgICAgKHBhY2tldFtvZmZzZXQgKyAxNl0gJiAweEZFKSA8PCAxMiB8XG4gICAgICAgIChwYWNrZXRbb2Zmc2V0ICsgMTddICYgMHhGRikgPDwgNSB8XG4gICAgICAgIChwYWNrZXRbb2Zmc2V0ICsgMThdICYgMHhGRSkgPj4+IDM7XG4gICAgICBwZXMuZHRzICo9IDQ7IC8vIExlZnQgc2hpZnQgYnkgMlxuICAgICAgcGVzLmR0cyArPSAocGFja2V0W29mZnNldCArIDE4XSAmIDB4MDYpID4+PiAxOyAvLyBPUiBieSB0aGUgdHdvIExTQnNcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBlcztcbn07XG5cbnZhciBwYXJzZU5hbFVuaXRUeXBlID0gZnVuY3Rpb24odHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIDB4MDU6XG4gICAgICByZXR1cm4gJ3NsaWNlX2xheWVyX3dpdGhvdXRfcGFydGl0aW9uaW5nX3Jic3BfaWRyJztcbiAgICBjYXNlIDB4MDY6XG4gICAgICByZXR1cm4gJ3NlaV9yYnNwJztcbiAgICBjYXNlIDB4MDc6XG4gICAgICByZXR1cm4gJ3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3AnO1xuICAgIGNhc2UgMHgwODpcbiAgICAgIHJldHVybiAncGljX3BhcmFtZXRlcl9zZXRfcmJzcCc7XG4gICAgY2FzZSAweDA5OlxuICAgICAgcmV0dXJuICdhY2Nlc3NfdW5pdF9kZWxpbWl0ZXJfcmJzcCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgdmlkZW9QYWNrZXRDb250YWluc0tleUZyYW1lID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBvZmZzZXQgPSA0ICsgcGFyc2VBZGFwdGlvbkZpZWxkKHBhY2tldCk7XG4gIHZhciBmcmFtZUJ1ZmZlciA9IHBhY2tldC5zdWJhcnJheShvZmZzZXQpO1xuICB2YXIgZnJhbWVJID0gMDtcbiAgdmFyIGZyYW1lU3luY1BvaW50ID0gMDtcbiAgdmFyIGZvdW5kS2V5RnJhbWUgPSBmYWxzZTtcbiAgdmFyIG5hbFR5cGU7XG5cbiAgLy8gYWR2YW5jZSB0aGUgc3luYyBwb2ludCB0byBhIE5BTCBzdGFydCwgaWYgbmVjZXNzYXJ5XG4gIGZvciAoOyBmcmFtZVN5bmNQb2ludCA8IGZyYW1lQnVmZmVyLmJ5dGVMZW5ndGggLSAzOyBmcmFtZVN5bmNQb2ludCsrKSB7XG4gICAgaWYgKGZyYW1lQnVmZmVyW2ZyYW1lU3luY1BvaW50ICsgMl0gPT09IDEpIHtcbiAgICAgIC8vIHRoZSBzeW5jIHBvaW50IGlzIHByb3Blcmx5IGFsaWduZWRcbiAgICAgIGZyYW1lSSA9IGZyYW1lU3luY1BvaW50ICsgNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChmcmFtZUkgPCBmcmFtZUJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgLy8gbG9vayBhdCB0aGUgY3VycmVudCBieXRlIHRvIGRldGVybWluZSBpZiB3ZSd2ZSBoaXQgdGhlIGVuZCBvZlxuICAgIC8vIGEgTkFMIHVuaXQgYm91bmRhcnlcbiAgICBzd2l0Y2ggKGZyYW1lQnVmZmVyW2ZyYW1lSV0pIHtcbiAgICBjYXNlIDA6XG4gICAgICAvLyBza2lwIHBhc3Qgbm9uLXN5bmMgc2VxdWVuY2VzXG4gICAgICBpZiAoZnJhbWVCdWZmZXJbZnJhbWVJIC0gMV0gIT09IDApIHtcbiAgICAgICAgZnJhbWVJICs9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmIChmcmFtZUJ1ZmZlcltmcmFtZUkgLSAyXSAhPT0gMCkge1xuICAgICAgICBmcmFtZUkrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChmcmFtZVN5bmNQb2ludCArIDMgIT09IGZyYW1lSSAtIDIpIHtcbiAgICAgICAgbmFsVHlwZSA9IHBhcnNlTmFsVW5pdFR5cGUoZnJhbWVCdWZmZXJbZnJhbWVTeW5jUG9pbnQgKyAzXSAmIDB4MWYpO1xuICAgICAgICBpZiAobmFsVHlwZSA9PT0gJ3NsaWNlX2xheWVyX3dpdGhvdXRfcGFydGl0aW9uaW5nX3Jic3BfaWRyJykge1xuICAgICAgICAgIGZvdW5kS2V5RnJhbWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGRyb3AgdHJhaWxpbmcgemVyb2VzXG4gICAgICBkbyB7XG4gICAgICAgIGZyYW1lSSsrO1xuICAgICAgfSB3aGlsZSAoZnJhbWVCdWZmZXJbZnJhbWVJXSAhPT0gMSAmJiBmcmFtZUkgPCBmcmFtZUJ1ZmZlci5sZW5ndGgpO1xuICAgICAgZnJhbWVTeW5jUG9pbnQgPSBmcmFtZUkgLSAyO1xuICAgICAgZnJhbWVJICs9IDM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICAvLyBza2lwIHBhc3Qgbm9uLXN5bmMgc2VxdWVuY2VzXG4gICAgICBpZiAoZnJhbWVCdWZmZXJbZnJhbWVJIC0gMV0gIT09IDAgfHxcbiAgICAgICAgICBmcmFtZUJ1ZmZlcltmcmFtZUkgLSAyXSAhPT0gMCkge1xuICAgICAgICBmcmFtZUkgKz0gMztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIG5hbFR5cGUgPSBwYXJzZU5hbFVuaXRUeXBlKGZyYW1lQnVmZmVyW2ZyYW1lU3luY1BvaW50ICsgM10gJiAweDFmKTtcbiAgICAgIGlmIChuYWxUeXBlID09PSAnc2xpY2VfbGF5ZXJfd2l0aG91dF9wYXJ0aXRpb25pbmdfcmJzcF9pZHInKSB7XG4gICAgICAgIGZvdW5kS2V5RnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZnJhbWVTeW5jUG9pbnQgPSBmcmFtZUkgLSAyO1xuICAgICAgZnJhbWVJICs9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gdGhlIGN1cnJlbnQgYnl0ZSBpc24ndCBhIG9uZSBvciB6ZXJvLCBzbyBpdCBjYW5ub3QgYmUgcGFydFxuICAgICAgLy8gb2YgYSBzeW5jIHNlcXVlbmNlXG4gICAgICBmcmFtZUkgKz0gMztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBmcmFtZUJ1ZmZlciA9IGZyYW1lQnVmZmVyLnN1YmFycmF5KGZyYW1lU3luY1BvaW50KTtcbiAgZnJhbWVJIC09IGZyYW1lU3luY1BvaW50O1xuICBmcmFtZVN5bmNQb2ludCA9IDA7XG4gIC8vIHBhcnNlIHRoZSBmaW5hbCBuYWxcbiAgaWYgKGZyYW1lQnVmZmVyICYmIGZyYW1lQnVmZmVyLmJ5dGVMZW5ndGggPiAzKSB7XG4gICAgbmFsVHlwZSA9IHBhcnNlTmFsVW5pdFR5cGUoZnJhbWVCdWZmZXJbZnJhbWVTeW5jUG9pbnQgKyAzXSAmIDB4MWYpO1xuICAgIGlmIChuYWxUeXBlID09PSAnc2xpY2VfbGF5ZXJfd2l0aG91dF9wYXJ0aXRpb25pbmdfcmJzcF9pZHInKSB7XG4gICAgICBmb3VuZEtleUZyYW1lID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm91bmRLZXlGcmFtZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlVHlwZTogcGFyc2VUeXBlLFxuICBwYXJzZVBhdDogcGFyc2VQYXQsXG4gIHBhcnNlUG10OiBwYXJzZVBtdCxcbiAgcGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yOiBwYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IsXG4gIHBhcnNlUGVzVHlwZTogcGFyc2VQZXNUeXBlLFxuICBwYXJzZVBlc1RpbWU6IHBhcnNlUGVzVGltZSxcbiAgdmlkZW9QYWNrZXRDb250YWluc0tleUZyYW1lOiB2aWRlb1BhY2tldENvbnRhaW5zS2V5RnJhbWVcbn07XG4iLCIvKipcbiAqIG11eC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBIMjY0X1NUUkVBTV9UWVBFOiAweDFCLFxuICBBRFRTX1NUUkVBTV9UWVBFOiAweDBGLFxuICBNRVRBREFUQV9TVFJFQU1fVFlQRTogMHgxNVxufTtcbiIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogQWNjZXB0cyBwcm9ncmFtIGVsZW1lbnRhcnkgc3RyZWFtIChQRVMpIGRhdGEgZXZlbnRzIGFuZCBjb3JyZWN0c1xuICogZGVjb2RlIGFuZCBwcmVzZW50YXRpb24gdGltZSBzdGFtcHMgdG8gYWNjb3VudCBmb3IgYSByb2xsb3ZlclxuICogb2YgdGhlIDMzIGJpdCB2YWx1ZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuLi91dGlscy9zdHJlYW0nKTtcblxudmFyIE1BWF9UUyA9IDg1ODk5MzQ1OTI7XG5cbnZhciBST19USFJFU0ggPSA0Mjk0OTY3Mjk2O1xuXG52YXIgVFlQRV9TSEFSRUQgPSAnc2hhcmVkJztcblxudmFyIGhhbmRsZVJvbGxvdmVyID0gZnVuY3Rpb24odmFsdWUsIHJlZmVyZW5jZSkge1xuICB2YXIgZGlyZWN0aW9uID0gMTtcblxuICBpZiAodmFsdWUgPiByZWZlcmVuY2UpIHtcbiAgICAvLyBJZiB0aGUgY3VycmVudCB0aW1lc3RhbXAgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG91ciByZWZlcmVuY2UgdGltZXN0YW1wIGFuZCB3ZSBkZXRlY3QgYVxuICAgIC8vIHRpbWVzdGFtcCByb2xsb3ZlciwgdGhpcyBtZWFucyB0aGUgcm9sbCBvdmVyIGlzIGhhcHBlbmluZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgIC8vIEV4YW1wbGUgc2NlbmFyaW86IEVudGVyIGEgbG9uZyBzdHJlYW0vdmlkZW8ganVzdCBhZnRlciBhIHJvbGxvdmVyIG9jY3VycmVkLiBUaGUgcmVmZXJlbmNlXG4gICAgLy8gcG9pbnQgd2lsbCBiZSBzZXQgdG8gYSBzbWFsbCBudW1iZXIsIGUuZy4gMS4gVGhlIHVzZXIgdGhlbiBzZWVrcyBiYWNrd2FyZHMgb3ZlciB0aGVcbiAgICAvLyByb2xsb3ZlciBwb2ludC4gSW4gbG9hZGluZyB0aGlzIHNlZ21lbnQsIHRoZSB0aW1lc3RhbXAgdmFsdWVzIHdpbGwgYmUgdmVyeSBsYXJnZSxcbiAgICAvLyBlLmcuIDJeMzMgLSAxLiBTaW5jZSB0aGlzIGNvbWVzIGJlZm9yZSB0aGUgZGF0YSB3ZSBsb2FkZWQgcHJldmlvdXNseSwgd2Ugd2FudCB0byBhZGp1c3RcbiAgICAvLyB0aGUgdGltZSBzdGFtcCB0byBiZSBgdmFsdWUgLSAyXjMzYC5cbiAgICBkaXJlY3Rpb24gPSAtMTtcbiAgfVxuXG4gIC8vIE5vdGU6IEEgc2VlayBmb3J3YXJkcyBvciBiYWNrIHRoYXQgaXMgZ3JlYXRlciB0aGFuIHRoZSBST19USFJFU0ggKDJeMzIsIH4xMyBob3Vycykgd2lsbFxuICAvLyBjYXVzZSBhbiBpbmNvcnJlY3QgYWRqdXN0bWVudC5cbiAgd2hpbGUgKE1hdGguYWJzKHJlZmVyZW5jZSAtIHZhbHVlKSA+IFJPX1RIUkVTSCkge1xuICAgIHZhbHVlICs9IChkaXJlY3Rpb24gKiBNQVhfVFMpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgbGFzdERUUywgcmVmZXJlbmNlRFRTO1xuXG4gIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgLy8gVGhlIFwic2hhcmVkXCIgdHlwZSBpcyB1c2VkIGluIGNhc2VzIHdoZXJlIGEgc3RyZWFtIHdpbGwgY29udGFpbiBtdXhlZFxuICAvLyB2aWRlbyBhbmQgYXVkaW8uIFdlIGNvdWxkIHVzZSBgdW5kZWZpbmVkYCBoZXJlLCBidXQgaGF2aW5nIGEgc3RyaW5nXG4gIC8vIG1ha2VzIGRlYnVnZ2luZyBhIGxpdHRsZSBjbGVhcmVyLlxuICB0aGlzLnR5cGVfID0gdHlwZSB8fCBUWVBFX1NIQVJFRDtcblxuICB0aGlzLnB1c2ggPSBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAvLyBBbnkgXCJzaGFyZWRcIiByb2xsb3ZlciBzdHJlYW1zIHdpbGwgYWNjZXB0IF9hbGxfIGRhdGEuIE90aGVyd2lzZSxcbiAgICAvLyBzdHJlYW1zIHdpbGwgb25seSBhY2NlcHQgZGF0YSB0aGF0IG1hdGNoZXMgdGhlaXIgdHlwZS5cbiAgICBpZiAodGhpcy50eXBlXyAhPT0gVFlQRV9TSEFSRUQgJiYgZGF0YS50eXBlICE9PSB0aGlzLnR5cGVfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlZmVyZW5jZURUUyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWZlcmVuY2VEVFMgPSBkYXRhLmR0cztcbiAgICB9XG5cbiAgICBkYXRhLmR0cyA9IGhhbmRsZVJvbGxvdmVyKGRhdGEuZHRzLCByZWZlcmVuY2VEVFMpO1xuICAgIGRhdGEucHRzID0gaGFuZGxlUm9sbG92ZXIoZGF0YS5wdHMsIHJlZmVyZW5jZURUUyk7XG5cbiAgICBsYXN0RFRTID0gZGF0YS5kdHM7XG5cbiAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBkYXRhKTtcbiAgfTtcblxuICB0aGlzLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgcmVmZXJlbmNlRFRTID0gbGFzdERUUztcbiAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnKTtcbiAgfTtcblxuICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICAgIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScpO1xuICB9O1xuXG4gIHRoaXMuZGlzY29udGludWl0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJlZmVyZW5jZURUUyA9IHZvaWQgMDtcbiAgICBsYXN0RFRTID0gdm9pZCAwO1xuICB9O1xuXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRpc2NvbnRpbnVpdHkoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gIH07XG59O1xuXG5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbS5wcm90b3R5cGUgPSBuZXcgU3RyZWFtKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbTogVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0sXG4gIGhhbmRsZVJvbGxvdmVyOiBoYW5kbGVSb2xsb3ZlclxufTtcbiIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogUmVhZHMgaW4tYmFuZCBDRUEtNzA4IGNhcHRpb25zIG91dCBvZiBGTVA0IHNlZ21lbnRzLlxuICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DRUEtNzA4XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMgPSByZXF1aXJlKCcuLi90b29scy9jYXB0aW9uLXBhY2tldC1wYXJzZXInKS5kaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzO1xudmFyIENhcHRpb25TdHJlYW0gPSByZXF1aXJlKCcuLi9tMnRzL2NhcHRpb24tc3RyZWFtJykuQ2FwdGlvblN0cmVhbTtcbnZhciBwcm9iZSA9IHJlcXVpcmUoJy4vcHJvYmUnKTtcbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnLi4vdG9vbHMvbXA0LWluc3BlY3RvcicpO1xuXG4vKipcbiAgKiBNYXBzIGFuIG9mZnNldCBpbiB0aGUgbWRhdCB0byBhIHNhbXBsZSBiYXNlZCBvbiB0aGUgdGhlIHNpemUgb2YgdGhlIHNhbXBsZXMuXG4gICogQXNzdW1lcyB0aGF0IGBwYXJzZVNhbXBsZXNgIGhhcyBiZWVuIGNhbGxlZCBmaXJzdC5cbiAgKlxuICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGludG8gdGhlIG1kYXRcbiAgKiBAcGFyYW0ge09iamVjdFtdfSBzYW1wbGVzIC0gQW4gYXJyYXkgb2Ygc2FtcGxlcywgcGFyc2VkIHVzaW5nIGBwYXJzZVNhbXBsZXNgXG4gICogQHJldHVybiB7P09iamVjdH0gVGhlIG1hdGNoaW5nIHNhbXBsZSwgb3IgbnVsbCBpZiBubyBtYXRjaCB3YXMgZm91bmQuXG4gICpcbiAgKiBAc2VlIElTTy1CTUZGLTEyLzIwMTUsIFNlY3Rpb24gOC44LjhcbiAqKi9cbnZhciBtYXBUb1NhbXBsZSA9IGZ1bmN0aW9uKG9mZnNldCwgc2FtcGxlcykge1xuICB2YXIgYXBwcm94aW1hdGVPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNhbXBsZSA9IHNhbXBsZXNbaV07XG5cbiAgICBpZiAoYXBwcm94aW1hdGVPZmZzZXQgPCBzYW1wbGUuc2l6ZSkge1xuICAgICAgcmV0dXJuIHNhbXBsZTtcbiAgICB9XG5cbiAgICBhcHByb3hpbWF0ZU9mZnNldCAtPSBzYW1wbGUuc2l6ZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gICogRmluZHMgU0VJIG5hbCB1bml0cyBjb250YWluZWQgaW4gYSBNZWRpYSBEYXRhIEJveC5cbiAgKiBBc3N1bWVzIHRoYXQgYHBhcnNlU2FtcGxlc2AgaGFzIGJlZW4gY2FsbGVkIGZpcnN0LlxuICAqXG4gICogQHBhcmFtIHtVaW50OEFycmF5fSBhdmNTdHJlYW0gLSBUaGUgYnl0ZXMgb2YgdGhlIG1kYXRcbiAgKiBAcGFyYW0ge09iamVjdFtdfSBzYW1wbGVzIC0gVGhlIHNhbXBsZXMgcGFyc2VkIG91dCBieSBgcGFyc2VTYW1wbGVzYFxuICAqIEBwYXJhbSB7TnVtYmVyfSB0cmFja0lkIC0gVGhlIHRyYWNrSWQgb2YgdGhpcyB2aWRlbyB0cmFja1xuICAqIEByZXR1cm4ge09iamVjdFtdfSBzZWlOYWxzIC0gdGhlIHBhcnNlZCBTRUkgTkFMVXMgZm91bmQuXG4gICogICBUaGUgY29udGVudHMgb2YgdGhlIHNlaU5hbCBzaG91bGQgbWF0Y2ggd2hhdCBpcyBleHBlY3RlZCBieVxuICAqICAgQ2FwdGlvblN0cmVhbS5wdXNoIChuYWxVbml0VHlwZSwgc2l6ZSwgZGF0YSwgZXNjYXBlZFJCU1AsIHB0cywgZHRzKVxuICAqXG4gICogQHNlZSBJU08tQk1GRi0xMi8yMDE1LCBTZWN0aW9uIDguMS4xXG4gICogQHNlZSBSZWMuIElUVS1UIEguMjY0LCA3LjMuMi4zLjFcbiAqKi9cbnZhciBmaW5kU2VpTmFscyA9IGZ1bmN0aW9uKGF2Y1N0cmVhbSwgc2FtcGxlcywgdHJhY2tJZCkge1xuICB2YXJcbiAgICBhdmNWaWV3ID0gbmV3IERhdGFWaWV3KGF2Y1N0cmVhbS5idWZmZXIsIGF2Y1N0cmVhbS5ieXRlT2Zmc2V0LCBhdmNTdHJlYW0uYnl0ZUxlbmd0aCksXG4gICAgcmVzdWx0ID0gW10sXG4gICAgc2VpTmFsLFxuICAgIGksXG4gICAgbGVuZ3RoLFxuICAgIGxhc3RNYXRjaGVkU2FtcGxlO1xuXG4gIGZvciAoaSA9IDA7IGkgKyA0IDwgYXZjU3RyZWFtLmxlbmd0aDsgaSArPSBsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBhdmNWaWV3LmdldFVpbnQzMihpKTtcbiAgICBpICs9IDQ7XG5cbiAgICAvLyBCYWlsIGlmIHRoaXMgZG9lc24ndCBhcHBlYXIgdG8gYmUgYW4gSDI2NCBzdHJlYW1cbiAgICBpZiAobGVuZ3RoIDw9IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoYXZjU3RyZWFtW2ldICYgMHgxRikge1xuICAgIGNhc2UgMHgwNjpcbiAgICAgIHZhciBkYXRhID0gYXZjU3RyZWFtLnN1YmFycmF5KGkgKyAxLCBpICsgMSArIGxlbmd0aCk7XG4gICAgICB2YXIgbWF0Y2hpbmdTYW1wbGUgPSBtYXBUb1NhbXBsZShpLCBzYW1wbGVzKTtcblxuICAgICAgc2VpTmFsID0ge1xuICAgICAgICBuYWxVbml0VHlwZTogJ3NlaV9yYnNwJyxcbiAgICAgICAgc2l6ZTogbGVuZ3RoLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlc2NhcGVkUkJTUDogZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyhkYXRhKSxcbiAgICAgICAgdHJhY2tJZDogdHJhY2tJZFxuICAgICAgfTtcblxuICAgICAgaWYgKG1hdGNoaW5nU2FtcGxlKSB7XG4gICAgICAgIHNlaU5hbC5wdHMgPSBtYXRjaGluZ1NhbXBsZS5wdHM7XG4gICAgICAgIHNlaU5hbC5kdHMgPSBtYXRjaGluZ1NhbXBsZS5kdHM7XG4gICAgICAgIGxhc3RNYXRjaGVkU2FtcGxlID0gbWF0Y2hpbmdTYW1wbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBhIG1hdGNoaW5nIHNhbXBsZSBjYW5ub3QgYmUgZm91bmQsIHVzZSB0aGUgbGFzdFxuICAgICAgICAvLyBzYW1wbGUncyB2YWx1ZXMgYXMgdGhleSBzaG91bGQgYmUgYXMgY2xvc2UgYXMgcG9zc2libGVcbiAgICAgICAgc2VpTmFsLnB0cyA9IGxhc3RNYXRjaGVkU2FtcGxlLnB0cztcbiAgICAgICAgc2VpTmFsLmR0cyA9IGxhc3RNYXRjaGVkU2FtcGxlLmR0cztcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnB1c2goc2VpTmFsKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gICogUGFyc2VzIHNhbXBsZSBpbmZvcm1hdGlvbiBvdXQgb2YgVHJhY2sgUnVuIEJveGVzIGFuZCBjYWxjdWxhdGVzXG4gICogdGhlIGFic29sdXRlIHByZXNlbnRhdGlvbiBhbmQgZGVjb2RlIHRpbWVzdGFtcHMgb2YgZWFjaCBzYW1wbGUuXG4gICpcbiAgKiBAcGFyYW0ge0FycmF5PFVpbnQ4QXJyYXk+fSB0cnVucyAtIFRoZSBUcnVuIFJ1biBib3hlcyB0byBiZSBwYXJzZWRcbiAgKiBAcGFyYW0ge051bWJlcn0gYmFzZU1lZGlhRGVjb2RlVGltZSAtIGJhc2UgbWVkaWEgZGVjb2RlIHRpbWUgZnJvbSB0ZmR0XG4gICAgICBAc2VlIElTTy1CTUZGLTEyLzIwMTUsIFNlY3Rpb24gOC44LjEyXG4gICogQHBhcmFtIHtPYmplY3R9IHRmaGQgLSBUaGUgcGFyc2VkIFRyYWNrIEZyYWdtZW50IEhlYWRlclxuICAqICAgQHNlZSBpbnNwZWN0LnBhcnNlVGZoZFxuICAqIEByZXR1cm4ge09iamVjdFtdfSB0aGUgcGFyc2VkIHNhbXBsZXNcbiAgKlxuICAqIEBzZWUgSVNPLUJNRkYtMTIvMjAxNSwgU2VjdGlvbiA4LjguOFxuICoqL1xudmFyIHBhcnNlU2FtcGxlcyA9IGZ1bmN0aW9uKHRydW5zLCBiYXNlTWVkaWFEZWNvZGVUaW1lLCB0ZmhkKSB7XG4gIHZhciBjdXJyZW50RHRzID0gYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgdmFyIGRlZmF1bHRTYW1wbGVEdXJhdGlvbiA9IHRmaGQuZGVmYXVsdFNhbXBsZUR1cmF0aW9uIHx8IDA7XG4gIHZhciBkZWZhdWx0U2FtcGxlU2l6ZSA9IHRmaGQuZGVmYXVsdFNhbXBsZVNpemUgfHwgMDtcbiAgdmFyIHRyYWNrSWQgPSB0ZmhkLnRyYWNrSWQ7XG4gIHZhciBhbGxTYW1wbGVzID0gW107XG5cbiAgdHJ1bnMuZm9yRWFjaChmdW5jdGlvbih0cnVuKSB7XG4gICAgLy8gTm90ZTogV2UgY3VycmVudGx5IGRvIG5vdCBwYXJzZSB0aGUgc2FtcGxlIHRhYmxlIGFzIHdlbGxcbiAgICAvLyBhcyB0aGUgdHJ1bi4gSXQncyBwb3NzaWJsZSBzb21lIHNvdXJjZXMgd2lsbCByZXF1aXJlIHRoaXMuXG4gICAgLy8gbW9vdiA+IHRyYWsgPiBtZGlhID4gbWluZiA+IHN0YmxcbiAgICB2YXIgdHJhY2tSdW4gPSBpbnNwZWN0LnBhcnNlVHJ1bih0cnVuKTtcbiAgICB2YXIgc2FtcGxlcyA9IHRyYWNrUnVuLnNhbXBsZXM7XG5cbiAgICBzYW1wbGVzLmZvckVhY2goZnVuY3Rpb24oc2FtcGxlKSB7XG4gICAgICBpZiAoc2FtcGxlLmR1cmF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2FtcGxlLmR1cmF0aW9uID0gZGVmYXVsdFNhbXBsZUR1cmF0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHNhbXBsZS5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2FtcGxlLnNpemUgPSBkZWZhdWx0U2FtcGxlU2l6ZTtcbiAgICAgIH1cbiAgICAgIHNhbXBsZS50cmFja0lkID0gdHJhY2tJZDtcbiAgICAgIHNhbXBsZS5kdHMgPSBjdXJyZW50RHRzO1xuICAgICAgaWYgKHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0ID0gMDtcbiAgICAgIH1cbiAgICAgIHNhbXBsZS5wdHMgPSBjdXJyZW50RHRzICsgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldDtcblxuICAgICAgY3VycmVudER0cyArPSBzYW1wbGUuZHVyYXRpb247XG4gICAgfSk7XG5cbiAgICBhbGxTYW1wbGVzID0gYWxsU2FtcGxlcy5jb25jYXQoc2FtcGxlcyk7XG4gIH0pO1xuXG4gIHJldHVybiBhbGxTYW1wbGVzO1xufTtcblxuLyoqXG4gICogUGFyc2VzIG91dCBjYXB0aW9uIG5hbHMgZnJvbSBhbiBGTVA0IHNlZ21lbnQncyB2aWRlbyB0cmFja3MuXG4gICpcbiAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHNlZ21lbnQgLSBUaGUgYnl0ZXMgb2YgYSBzaW5nbGUgc2VnbWVudFxuICAqIEBwYXJhbSB7TnVtYmVyfSB2aWRlb1RyYWNrSWQgLSBUaGUgdHJhY2tJZCBvZiBhIHZpZGVvIHRyYWNrIGluIHRoZSBzZWdtZW50XG4gICogQHJldHVybiB7T2JqZWN0LjxOdW1iZXIsIE9iamVjdFtdPn0gQSBtYXBwaW5nIG9mIHZpZGVvIHRyYWNrSWQgdG9cbiAgKiAgIGEgbGlzdCBvZiBzZWlOYWxzIGZvdW5kIGluIHRoYXQgdHJhY2tcbiAqKi9cbnZhciBwYXJzZUNhcHRpb25OYWxzID0gZnVuY3Rpb24oc2VnbWVudCwgdmlkZW9UcmFja0lkKSB7XG4gIC8vIFRvIGdldCB0aGUgc2FtcGxlc1xuICB2YXIgdHJhZnMgPSBwcm9iZS5maW5kQm94KHNlZ21lbnQsIFsnbW9vZicsICd0cmFmJ10pO1xuICAvLyBUbyBnZXQgU0VJIE5BTCB1bml0c1xuICB2YXIgbWRhdHMgPSBwcm9iZS5maW5kQm94KHNlZ21lbnQsIFsnbWRhdCddKTtcbiAgdmFyIGNhcHRpb25OYWxzID0ge307XG4gIHZhciBtZGF0VHJhZlBhaXJzID0gW107XG5cbiAgLy8gUGFpciB1cCBlYWNoIHRyYWYgd2l0aCBhIG1kYXQgYXMgbW9vZnMgYW5kIG1kYXRzIGFyZSBpbiBwYWlyc1xuICBtZGF0cy5mb3JFYWNoKGZ1bmN0aW9uKG1kYXQsIGluZGV4KSB7XG4gICAgdmFyIG1hdGNoaW5nVHJhZiA9IHRyYWZzW2luZGV4XTtcbiAgICBtZGF0VHJhZlBhaXJzLnB1c2goe1xuICAgICAgbWRhdDogbWRhdCxcbiAgICAgIHRyYWY6IG1hdGNoaW5nVHJhZlxuICAgIH0pO1xuICB9KTtcblxuICBtZGF0VHJhZlBhaXJzLmZvckVhY2goZnVuY3Rpb24ocGFpcikge1xuICAgIHZhciBtZGF0ID0gcGFpci5tZGF0O1xuICAgIHZhciB0cmFmID0gcGFpci50cmFmO1xuICAgIHZhciB0ZmhkID0gcHJvYmUuZmluZEJveCh0cmFmLCBbJ3RmaGQnXSk7XG4gICAgLy8gRXhhY3RseSAxIHRmaGQgcGVyIHRyYWZcbiAgICB2YXIgaGVhZGVySW5mbyA9IGluc3BlY3QucGFyc2VUZmhkKHRmaGRbMF0pO1xuICAgIHZhciB0cmFja0lkID0gaGVhZGVySW5mby50cmFja0lkO1xuICAgIHZhciB0ZmR0ID0gcHJvYmUuZmluZEJveCh0cmFmLCBbJ3RmZHQnXSk7XG4gICAgLy8gRWl0aGVyIDAgb3IgMSB0ZmR0IHBlciB0cmFmXG4gICAgdmFyIGJhc2VNZWRpYURlY29kZVRpbWUgPSAodGZkdC5sZW5ndGggPiAwKSA/IGluc3BlY3QucGFyc2VUZmR0KHRmZHRbMF0pLmJhc2VNZWRpYURlY29kZVRpbWUgOiAwO1xuICAgIHZhciB0cnVucyA9IHByb2JlLmZpbmRCb3godHJhZiwgWyd0cnVuJ10pO1xuICAgIHZhciBzYW1wbGVzO1xuICAgIHZhciBzZWlOYWxzO1xuXG4gICAgLy8gT25seSBwYXJzZSB2aWRlbyBkYXRhIGZvciB0aGUgY2hvc2VuIHZpZGVvIHRyYWNrXG4gICAgaWYgKHZpZGVvVHJhY2tJZCA9PT0gdHJhY2tJZCAmJiB0cnVucy5sZW5ndGggPiAwKSB7XG4gICAgICBzYW1wbGVzID0gcGFyc2VTYW1wbGVzKHRydW5zLCBiYXNlTWVkaWFEZWNvZGVUaW1lLCBoZWFkZXJJbmZvKTtcblxuICAgICAgc2VpTmFscyA9IGZpbmRTZWlOYWxzKG1kYXQsIHNhbXBsZXMsIHRyYWNrSWQpO1xuXG4gICAgICBpZiAoIWNhcHRpb25OYWxzW3RyYWNrSWRdKSB7XG4gICAgICAgIGNhcHRpb25OYWxzW3RyYWNrSWRdID0gW107XG4gICAgICB9XG5cbiAgICAgIGNhcHRpb25OYWxzW3RyYWNrSWRdID0gY2FwdGlvbk5hbHNbdHJhY2tJZF0uY29uY2F0KHNlaU5hbHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNhcHRpb25OYWxzO1xufTtcblxuLyoqXG4gICogUGFyc2VzIG91dCBpbmJhbmQgY2FwdGlvbnMgZnJvbSBhbiBNUDQgY29udGFpbmVyIGFuZCByZXR1cm5zXG4gICogY2FwdGlvbiBvYmplY3RzIHRoYXQgY2FuIGJlIHVzZWQgYnkgV2ViVlRUIGFuZCB0aGUgVGV4dFRyYWNrIEFQSS5cbiAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9WVFRDdWVcbiAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UZXh0VHJhY2tcbiAgKiBBc3N1bWVzIHRoYXQgYHByb2JlLmdldFZpZGVvVHJhY2tJZHNgIGFuZCBgcHJvYmUudGltZXNjYWxlYCBoYXZlIGJlZW4gY2FsbGVkIGZpcnN0XG4gICpcbiAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHNlZ21lbnQgLSBUaGUgZm1wNCBzZWdtZW50IGNvbnRhaW5pbmcgZW1iZWRkZWQgY2FwdGlvbnNcbiAgKiBAcGFyYW0ge051bWJlcn0gdHJhY2tJZCAtIFRoZSBpZCBvZiB0aGUgdmlkZW8gdHJhY2sgdG8gcGFyc2VcbiAgKiBAcGFyYW0ge051bWJlcn0gdGltZXNjYWxlIC0gVGhlIHRpbWVzY2FsZSBmb3IgdGhlIHZpZGVvIHRyYWNrIGZyb20gdGhlIGluaXQgc2VnbWVudFxuICAqXG4gICogQHJldHVybiB7P09iamVjdFtdfSBwYXJzZWRDYXB0aW9ucyAtIEEgbGlzdCBvZiBjYXB0aW9ucyBvciBudWxsIGlmIG5vIHZpZGVvIHRyYWNrc1xuICAqIEByZXR1cm4ge051bWJlcn0gcGFyc2VkQ2FwdGlvbnNbXS5zdGFydFRpbWUgLSBUaGUgdGltZSB0byBzaG93IHRoZSBjYXB0aW9uIGluIHNlY29uZHNcbiAgKiBAcmV0dXJuIHtOdW1iZXJ9IHBhcnNlZENhcHRpb25zW10uZW5kVGltZSAtIFRoZSB0aW1lIHRvIHN0b3Agc2hvd2luZyB0aGUgY2FwdGlvbiBpbiBzZWNvbmRzXG4gICogQHJldHVybiB7U3RyaW5nfSBwYXJzZWRDYXB0aW9uc1tdLnRleHQgLSBUaGUgdmlzaWJsZSBjb250ZW50IG9mIHRoZSBjYXB0aW9uXG4gKiovXG52YXIgcGFyc2VFbWJlZGRlZENhcHRpb25zID0gZnVuY3Rpb24oc2VnbWVudCwgdHJhY2tJZCwgdGltZXNjYWxlKSB7XG4gIHZhciBzZWlOYWxzO1xuXG4gIC8vIHRoZSBJU08tQk1GRiBzcGVjIHNheXMgdGhhdCB0cmFja0lkIGNhbid0IGJlIHplcm8sIGJ1dCB0aGVyZSdzIHNvbWUgYnJva2VuIGNvbnRlbnQgb3V0IHRoZXJlXG4gIGlmICh0cmFja0lkID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzZWlOYWxzID0gcGFyc2VDYXB0aW9uTmFscyhzZWdtZW50LCB0cmFja0lkKTtcblxuICByZXR1cm4ge1xuICAgIHNlaU5hbHM6IHNlaU5hbHNbdHJhY2tJZF0sXG4gICAgdGltZXNjYWxlOiB0aW1lc2NhbGVcbiAgfTtcbn07XG5cbi8qKlxuICAqIENvbnZlcnRzIFNFSSBOQUxVcyBpbnRvIGNhcHRpb25zIHRoYXQgY2FuIGJlIHVzZWQgYnkgdmlkZW8uanNcbiAqKi9cbnZhciBDYXB0aW9uUGFyc2VyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpc0luaXRpYWxpemVkID0gZmFsc2U7XG4gIHZhciBjYXB0aW9uU3RyZWFtO1xuXG4gIC8vIFN0b3JlcyBzZWdtZW50cyBzZWVuIGJlZm9yZSB0cmFja0lkIGFuZCB0aW1lc2NhbGUgYXJlIHNldFxuICB2YXIgc2VnbWVudENhY2hlO1xuICAvLyBTdG9yZXMgdmlkZW8gdHJhY2sgSUQgb2YgdGhlIHRyYWNrIGJlaW5nIHBhcnNlZFxuICB2YXIgdHJhY2tJZDtcbiAgLy8gU3RvcmVzIHRoZSB0aW1lc2NhbGUgb2YgdGhlIHRyYWNrIGJlaW5nIHBhcnNlZFxuICB2YXIgdGltZXNjYWxlO1xuICAvLyBTdG9yZXMgY2FwdGlvbnMgcGFyc2VkIHNvIGZhclxuICB2YXIgcGFyc2VkQ2FwdGlvbnM7XG4gIC8vIFN0b3JlcyB3aGV0aGVyIHdlIGFyZSByZWNlaXZpbmcgcGFydGlhbCBkYXRhIG9yIG5vdFxuICB2YXIgcGFyc2luZ1BhcnRpYWw7XG5cbiAgLyoqXG4gICAgKiBBIG1ldGhvZCB0byBpbmRpY2F0ZSB3aGV0aGVyIGEgQ2FwdGlvblBhcnNlciBoYXMgYmVlbiBpbml0YWxpemVkXG4gICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICoqL1xuICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNJbml0aWFsaXplZDtcbiAgfTtcblxuICAvKipcbiAgICAqIEluaXRpYWxpemVzIHRoZSB1bmRlcmx5aW5nIENhcHRpb25TdHJlYW0sIFNFSSBOQUwgcGFyc2luZ1xuICAgICogYW5kIG1hbmFnZW1lbnQsIGFuZCBjYXB0aW9uIGNvbGxlY3Rpb25cbiAgICoqL1xuICB0aGlzLmluaXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgY2FwdGlvblN0cmVhbSA9IG5ldyBDYXB0aW9uU3RyZWFtKCk7XG4gICAgaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgcGFyc2luZ1BhcnRpYWwgPSBvcHRpb25zID8gb3B0aW9ucy5pc1BhcnRpYWwgOiBmYWxzZTtcblxuICAgIC8vIENvbGxlY3QgZGlzcGF0Y2hlZCBjYXB0aW9uc1xuICAgIGNhcHRpb25TdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgLy8gQ29udmVydCB0byBzZWNvbmRzIGluIHRoZSBzb3VyY2UncyB0aW1lc2NhbGVcbiAgICAgIGV2ZW50LnN0YXJ0VGltZSA9IGV2ZW50LnN0YXJ0UHRzIC8gdGltZXNjYWxlO1xuICAgICAgZXZlbnQuZW5kVGltZSA9IGV2ZW50LmVuZFB0cyAvIHRpbWVzY2FsZTtcblxuICAgICAgcGFyc2VkQ2FwdGlvbnMuY2FwdGlvbnMucHVzaChldmVudCk7XG4gICAgICBwYXJzZWRDYXB0aW9ucy5jYXB0aW9uU3RyZWFtc1tldmVudC5zdHJlYW1dID0gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICAqIERldGVybWluZXMgaWYgYSBuZXcgdmlkZW8gdHJhY2sgd2lsbCBiZSBzZWxlY3RlZFxuICAgICogb3IgaWYgdGhlIHRpbWVzY2FsZSBjaGFuZ2VkXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKiovXG4gIHRoaXMuaXNOZXdJbml0ID0gZnVuY3Rpb24odmlkZW9UcmFja0lkcywgdGltZXNjYWxlcykge1xuICAgIGlmICgodmlkZW9UcmFja0lkcyAmJiB2aWRlb1RyYWNrSWRzLmxlbmd0aCA9PT0gMCkgfHxcbiAgICAgICAgKHRpbWVzY2FsZXMgJiYgdHlwZW9mIHRpbWVzY2FsZXMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgT2JqZWN0LmtleXModGltZXNjYWxlcykubGVuZ3RoID09PSAwKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFja0lkICE9PSB2aWRlb1RyYWNrSWRzWzBdIHx8XG4gICAgICB0aW1lc2NhbGUgIT09IHRpbWVzY2FsZXNbdHJhY2tJZF07XG4gIH07XG5cbiAgLyoqXG4gICAgKiBQYXJzZXMgb3V0IFNFSSBjYXB0aW9ucyBhbmQgaW50ZXJhY3RzIHdpdGggdW5kZXJseWluZ1xuICAgICogQ2FwdGlvblN0cmVhbSB0byByZXR1cm4gZGlzcGF0Y2hlZCBjYXB0aW9uc1xuICAgICpcbiAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gc2VnbWVudCAtIFRoZSBmbXA0IHNlZ21lbnQgY29udGFpbmluZyBlbWJlZGRlZCBjYXB0aW9uc1xuICAgICogQHBhcmFtIHtOdW1iZXJbXX0gdmlkZW9UcmFja0lkcyAtIEEgbGlzdCBvZiB2aWRlbyB0cmFja3MgZm91bmQgaW4gdGhlIGluaXQgc2VnbWVudFxuICAgICogQHBhcmFtIHtPYmplY3QuPE51bWJlciwgTnVtYmVyPn0gdGltZXNjYWxlcyAtIFRoZSB0aW1lc2NhbGVzIGZvdW5kIGluIHRoZSBpbml0IHNlZ21lbnRcbiAgICAqIEBzZWUgcGFyc2VFbWJlZGRlZENhcHRpb25zXG4gICAgKiBAc2VlIG0ydHMvY2FwdGlvbi1zdHJlYW0uanNcbiAgICoqL1xuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24oc2VnbWVudCwgdmlkZW9UcmFja0lkcywgdGltZXNjYWxlcykge1xuICAgIHZhciBwYXJzZWREYXRhO1xuXG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAvLyBUaGlzIGlzIG5vdCBsaWtlbHkgdG8gYmUgYSB2aWRlbyBzZWdtZW50XG4gICAgfSBlbHNlIGlmICghdmlkZW9UcmFja0lkcyB8fCAhdGltZXNjYWxlcykge1xuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNOZXdJbml0KHZpZGVvVHJhY2tJZHMsIHRpbWVzY2FsZXMpKSB7XG4gICAgICAvLyBVc2UgdGhlIGZpcnN0IHZpZGVvIHRyYWNrIG9ubHkgYXMgdGhlcmUgaXMgbm9cbiAgICAgIC8vIG1lY2hhbmlzbSB0byBzd2l0Y2ggdG8gb3RoZXIgdmlkZW8gdHJhY2tzXG4gICAgICB0cmFja0lkID0gdmlkZW9UcmFja0lkc1swXTtcbiAgICAgIHRpbWVzY2FsZSA9IHRpbWVzY2FsZXNbdHJhY2tJZF07XG5cbiAgICAvLyBJZiBhbiBpbml0IHNlZ21lbnQgaGFzIG5vdCBiZWVuIHNlZW4geWV0LCBob2xkIG9udG8gc2VnbWVudFxuICAgIC8vIGRhdGEgdW50aWwgd2UgaGF2ZSBvbmUuXG4gICAgLy8gdGhlIElTTy1CTUZGIHNwZWMgc2F5cyB0aGF0IHRyYWNrSWQgY2FuJ3QgYmUgemVybywgYnV0IHRoZXJlJ3Mgc29tZSBicm9rZW4gY29udGVudCBvdXQgdGhlcmVcbiAgICB9IGVsc2UgaWYgKHRyYWNrSWQgPT09IG51bGwgfHwgIXRpbWVzY2FsZSkge1xuICAgICAgc2VnbWVudENhY2hlLnB1c2goc2VnbWVudCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBOb3cgdGhhdCBhIHRpbWVzY2FsZSBhbmQgdHJhY2tJZCBpcyBzZXQsIHBhcnNlIGNhY2hlZCBzZWdtZW50c1xuICAgIHdoaWxlIChzZWdtZW50Q2FjaGUubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGNhY2hlZFNlZ21lbnQgPSBzZWdtZW50Q2FjaGUuc2hpZnQoKTtcblxuICAgICAgdGhpcy5wYXJzZShjYWNoZWRTZWdtZW50LCB2aWRlb1RyYWNrSWRzLCB0aW1lc2NhbGVzKTtcbiAgICB9XG5cbiAgICBwYXJzZWREYXRhID0gcGFyc2VFbWJlZGRlZENhcHRpb25zKHNlZ21lbnQsIHRyYWNrSWQsIHRpbWVzY2FsZSk7XG5cbiAgICBpZiAocGFyc2VkRGF0YSA9PT0gbnVsbCB8fCAhcGFyc2VkRGF0YS5zZWlOYWxzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2hOYWxzKHBhcnNlZERhdGEuc2VpTmFscyk7XG4gICAgLy8gRm9yY2UgdGhlIHBhcnNlZCBjYXB0aW9ucyB0byBiZSBkaXNwYXRjaGVkXG4gICAgdGhpcy5mbHVzaFN0cmVhbSgpO1xuXG4gICAgcmV0dXJuIHBhcnNlZENhcHRpb25zO1xuICB9O1xuXG4gIC8qKlxuICAgICogUHVzaGVzIFNFSSBOQUxVcyBvbnRvIENhcHRpb25TdHJlYW1cbiAgICAqIEBwYXJhbSB7T2JqZWN0W119IG5hbHMgLSBBIGxpc3Qgb2YgU0VJIG5hbHMgcGFyc2VkIHVzaW5nIGBwYXJzZUNhcHRpb25OYWxzYFxuICAgICogQXNzdW1lcyB0aGF0IGBwYXJzZUNhcHRpb25OYWxzYCBoYXMgYmVlbiBjYWxsZWQgZmlyc3RcbiAgICAqIEBzZWUgbTJ0cy9jYXB0aW9uLXN0cmVhbS5qc1xuICAgICoqL1xuICB0aGlzLnB1c2hOYWxzID0gZnVuY3Rpb24obmFscykge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKCkgfHwgIW5hbHMgfHwgbmFscy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIG5hbHMuZm9yRWFjaChmdW5jdGlvbihuYWwpIHtcbiAgICAgIGNhcHRpb25TdHJlYW0ucHVzaChuYWwpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgICogRmx1c2hlcyB1bmRlcmx5aW5nIENhcHRpb25TdHJlYW0gdG8gZGlzcGF0Y2ggcHJvY2Vzc2VkLCBkaXNwbGF5YWJsZSBjYXB0aW9uc1xuICAgICogQHNlZSBtMnRzL2NhcHRpb24tc3RyZWFtLmpzXG4gICAqKi9cbiAgdGhpcy5mbHVzaFN0cmVhbSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghcGFyc2luZ1BhcnRpYWwpIHtcbiAgICAgIGNhcHRpb25TdHJlYW0uZmx1c2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FwdGlvblN0cmVhbS5wYXJ0aWFsRmx1c2goKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAgKiBSZXNldCBjYXB0aW9uIGJ1Y2tldHMgZm9yIG5ldyBkYXRhXG4gICAqKi9cbiAgdGhpcy5jbGVhclBhcnNlZENhcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgcGFyc2VkQ2FwdGlvbnMuY2FwdGlvbnMgPSBbXTtcbiAgICBwYXJzZWRDYXB0aW9ucy5jYXB0aW9uU3RyZWFtcyA9IHt9O1xuICB9O1xuXG4gIC8qKlxuICAgICogUmVzZXRzIHVuZGVybHlpbmcgQ2FwdGlvblN0cmVhbVxuICAgICogQHNlZSBtMnRzL2NhcHRpb24tc3RyZWFtLmpzXG4gICAqKi9cbiAgdGhpcy5yZXNldENhcHRpb25TdHJlYW0gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjYXB0aW9uU3RyZWFtLnJlc2V0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gY2xlYXIgYWxsIGNhcHRpb25zIGZsdXNoZWQgZnJvbSB0aGVcbiAgICAqIENhcHRpb25TdHJlYW0gYW5kIHN0aWxsIGJlaW5nIHBhcnNlZFxuICAgICogQHNlZSBtMnRzL2NhcHRpb24tc3RyZWFtLmpzXG4gICAqKi9cbiAgdGhpcy5jbGVhckFsbENhcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jbGVhclBhcnNlZENhcHRpb25zKCk7XG4gICAgdGhpcy5yZXNldENhcHRpb25TdHJlYW0oKTtcbiAgfTtcblxuICAvKipcbiAgICAqIFJlc2V0IGNhcHRpb24gcGFyc2VyXG4gICAqKi9cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHNlZ21lbnRDYWNoZSA9IFtdO1xuICAgIHRyYWNrSWQgPSBudWxsO1xuICAgIHRpbWVzY2FsZSA9IG51bGw7XG5cbiAgICBpZiAoIXBhcnNlZENhcHRpb25zKSB7XG4gICAgICBwYXJzZWRDYXB0aW9ucyA9IHtcbiAgICAgICAgY2FwdGlvbnM6IFtdLFxuICAgICAgICAvLyBDQzEsIENDMiwgQ0MzLCBDQzRcbiAgICAgICAgY2FwdGlvblN0cmVhbXM6IHt9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsZWFyUGFyc2VkQ2FwdGlvbnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0Q2FwdGlvblN0cmVhbSgpO1xuICB9O1xuXG4gIHRoaXMucmVzZXQoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FwdGlvblBhcnNlcjtcbiIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogVXRpbGl0aWVzIHRvIGRldGVjdCBiYXNpYyBwcm9wZXJ0aWVzIGFuZCBtZXRhZGF0YSBhYm91dCBNUDRzLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0b1Vuc2lnbmVkID0gcmVxdWlyZSgnLi4vdXRpbHMvYmluJykudG9VbnNpZ25lZDtcbnZhciB0b0hleFN0cmluZyA9IHJlcXVpcmUoJy4uL3V0aWxzL2JpbicpLnRvSGV4U3RyaW5nO1xudmFyIGZpbmRCb3gsIHBhcnNlVHlwZSwgdGltZXNjYWxlLCBzdGFydFRpbWUsIGdldFZpZGVvVHJhY2tJZHMsIGdldFRyYWNrcztcblxuLy8gRmluZCB0aGUgZGF0YSBmb3IgYSBib3ggc3BlY2lmaWVkIGJ5IGl0cyBwYXRoXG5maW5kQm94ID0gZnVuY3Rpb24oZGF0YSwgcGF0aCkge1xuICB2YXIgcmVzdWx0cyA9IFtdLFxuICAgICAgaSwgc2l6ZSwgdHlwZSwgZW5kLCBzdWJyZXN1bHRzO1xuXG4gIGlmICghcGF0aC5sZW5ndGgpIHtcbiAgICAvLyBzaG9ydC1jaXJjdWl0IHRoZSBzZWFyY2ggZm9yIGVtcHR5IHBhdGhzXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5ieXRlTGVuZ3RoOykge1xuICAgIHNpemUgID0gdG9VbnNpZ25lZChkYXRhW2ldICAgICA8PCAyNCB8XG4gICAgICAgICAgICAgICAgICAgICAgIGRhdGFbaSArIDFdIDw8IDE2IHxcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtpICsgMl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2kgKyAzXSk7XG5cbiAgICB0eXBlID0gcGFyc2VUeXBlKGRhdGEuc3ViYXJyYXkoaSArIDQsIGkgKyA4KSk7XG5cbiAgICBlbmQgPSBzaXplID4gMSA/IGkgKyBzaXplIDogZGF0YS5ieXRlTGVuZ3RoO1xuXG4gICAgaWYgKHR5cGUgPT09IHBhdGhbMF0pIHtcbiAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBlbmQgb2YgdGhlIHBhdGggYW5kIHdlJ3ZlIGZvdW5kIHRoZSBib3ggd2Ugd2VyZVxuICAgICAgICAvLyBsb29raW5nIGZvclxuICAgICAgICByZXN1bHRzLnB1c2goZGF0YS5zdWJhcnJheShpICsgOCwgZW5kKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHRoZSBuZXh0IGJveCBhbG9uZyB0aGUgcGF0aFxuICAgICAgICBzdWJyZXN1bHRzID0gZmluZEJveChkYXRhLnN1YmFycmF5KGkgKyA4LCBlbmQpLCBwYXRoLnNsaWNlKDEpKTtcbiAgICAgICAgaWYgKHN1YnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KHN1YnJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGkgPSBlbmQ7XG4gIH1cblxuICAvLyB3ZSd2ZSBmaW5pc2hlZCBzZWFyY2hpbmcgYWxsIG9mIGRhdGFcbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBBU0NJSSBlbmNvZGVkIGZvdXIgYnl0ZSBidWZmZXIuXG4gKiBAcGFyYW0gYnVmZmVyIHtVaW50OEFycmF5fSBhIGZvdXItYnl0ZSBidWZmZXIgdG8gdHJhbnNsYXRlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBjb3JyZXNwb25kaW5nIHN0cmluZ1xuICovXG5wYXJzZVR5cGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMF0pO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMV0pO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMl0pO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbM10pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBQYXJzZXMgYW4gTVA0IGluaXRpYWxpemF0aW9uIHNlZ21lbnQgYW5kIGV4dHJhY3RzIHRoZSB0aW1lc2NhbGVcbiAqIHZhbHVlcyBmb3IgYW55IGRlY2xhcmVkIHRyYWNrcy4gVGltZXNjYWxlIHZhbHVlcyBpbmRpY2F0ZSB0aGVcbiAqIG51bWJlciBvZiBjbG9jayB0aWNrcyBwZXIgc2Vjb25kIHRvIGFzc3VtZSBmb3IgdGltZS1iYXNlZCB2YWx1ZXNcbiAqIGVsc2V3aGVyZSBpbiB0aGUgTVA0LlxuICpcbiAqIFRvIGRldGVybWluZSB0aGUgc3RhcnQgdGltZSBvZiBhbiBNUDQsIHlvdSBuZWVkIHR3byBwaWVjZXMgb2ZcbiAqIGluZm9ybWF0aW9uOiB0aGUgdGltZXNjYWxlIHVuaXQgYW5kIHRoZSBlYXJsaWVzdCBiYXNlIG1lZGlhIGRlY29kZVxuICogdGltZS4gTXVsdGlwbGUgdGltZXNjYWxlcyBjYW4gYmUgc3BlY2lmaWVkIHdpdGhpbiBhbiBNUDQgYnV0IHRoZVxuICogYmFzZSBtZWRpYSBkZWNvZGUgdGltZSBpcyBhbHdheXMgZXhwcmVzc2VkIGluIHRoZSB0aW1lc2NhbGUgZnJvbVxuICogdGhlIG1lZGlhIGhlYWRlciBib3ggZm9yIHRoZSB0cmFjazpcbiAqIGBgYFxuICogbW9vdiA+IHRyYWsgPiBtZGlhID4gbWRoZC50aW1lc2NhbGVcbiAqIGBgYFxuICogQHBhcmFtIGluaXQge1VpbnQ4QXJyYXl9IHRoZSBieXRlcyBvZiB0aGUgaW5pdCBzZWdtZW50XG4gKiBAcmV0dXJuIHtvYmplY3R9IGEgaGFzaCBvZiB0cmFjayBpZHMgdG8gdGltZXNjYWxlIHZhbHVlcyBvciBudWxsIGlmXG4gKiB0aGUgaW5pdCBzZWdtZW50IGlzIG1hbGZvcm1lZC5cbiAqL1xudGltZXNjYWxlID0gZnVuY3Rpb24oaW5pdCkge1xuICB2YXJcbiAgICByZXN1bHQgPSB7fSxcbiAgICB0cmFrcyA9IGZpbmRCb3goaW5pdCwgWydtb292JywgJ3RyYWsnXSk7XG5cbiAgLy8gbWRoZCB0aW1lc2NhbGVcbiAgcmV0dXJuIHRyYWtzLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIHRyYWspIHtcbiAgICB2YXIgdGtoZCwgdmVyc2lvbiwgaW5kZXgsIGlkLCBtZGhkO1xuXG4gICAgdGtoZCA9IGZpbmRCb3godHJhaywgWyd0a2hkJ10pWzBdO1xuICAgIGlmICghdGtoZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZlcnNpb24gPSB0a2hkWzBdO1xuICAgIGluZGV4ID0gdmVyc2lvbiA9PT0gMCA/IDEyIDogMjA7XG4gICAgaWQgPSB0b1Vuc2lnbmVkKHRraGRbaW5kZXhdICAgICA8PCAyNCB8XG4gICAgICAgICAgICAgICAgICAgIHRraGRbaW5kZXggKyAxXSA8PCAxNiB8XG4gICAgICAgICAgICAgICAgICAgIHRraGRbaW5kZXggKyAyXSA8PCAgOCB8XG4gICAgICAgICAgICAgICAgICAgIHRraGRbaW5kZXggKyAzXSk7XG5cbiAgICBtZGhkID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnbWRoZCddKVswXTtcbiAgICBpZiAoIW1kaGQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2ZXJzaW9uID0gbWRoZFswXTtcbiAgICBpbmRleCA9IHZlcnNpb24gPT09IDAgPyAxMiA6IDIwO1xuICAgIHJlc3VsdFtpZF0gPSB0b1Vuc2lnbmVkKG1kaGRbaW5kZXhdICAgICA8PCAyNCB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRoZFtpbmRleCArIDFdIDw8IDE2IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGhkW2luZGV4ICsgMl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kaGRbaW5kZXggKyAzXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgcmVzdWx0KTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBiYXNlIG1lZGlhIGRlY29kZSBzdGFydCB0aW1lLCBpbiBzZWNvbmRzLCBmb3IgYW4gTVA0XG4gKiBmcmFnbWVudC4gSWYgbXVsdGlwbGUgZnJhZ21lbnRzIGFyZSBzcGVjaWZpZWQsIHRoZSBlYXJsaWVzdCB0aW1lIGlzXG4gKiByZXR1cm5lZC5cbiAqXG4gKiBUaGUgYmFzZSBtZWRpYSBkZWNvZGUgdGltZSBjYW4gYmUgcGFyc2VkIGZyb20gdHJhY2sgZnJhZ21lbnRcbiAqIG1ldGFkYXRhOlxuICogYGBgXG4gKiBtb29mID4gdHJhZiA+IHRmZHQuYmFzZU1lZGlhRGVjb2RlVGltZVxuICogYGBgXG4gKiBJdCByZXF1aXJlcyB0aGUgdGltZXNjYWxlIHZhbHVlIGZyb20gdGhlIG1kaGQgdG8gaW50ZXJwcmV0LlxuICpcbiAqIEBwYXJhbSB0aW1lc2NhbGUge29iamVjdH0gYSBoYXNoIG9mIHRyYWNrIGlkcyB0byB0aW1lc2NhbGUgdmFsdWVzLlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgZWFybGllc3QgYmFzZSBtZWRpYSBkZWNvZGUgc3RhcnQgdGltZSBmb3IgdGhlXG4gKiBmcmFnbWVudCwgaW4gc2Vjb25kc1xuICovXG5zdGFydFRpbWUgPSBmdW5jdGlvbih0aW1lc2NhbGUsIGZyYWdtZW50KSB7XG4gIHZhciB0cmFmcywgYmFzZVRpbWVzLCByZXN1bHQ7XG5cbiAgLy8gd2UgbmVlZCBpbmZvIGZyb20gdHdvIGNoaWxkcmVuZCBvZiBlYWNoIHRyYWNrIGZyYWdtZW50IGJveFxuICB0cmFmcyA9IGZpbmRCb3goZnJhZ21lbnQsIFsnbW9vZicsICd0cmFmJ10pO1xuXG4gIC8vIGRldGVybWluZSB0aGUgc3RhcnQgdGltZXMgZm9yIGVhY2ggdHJhY2tcbiAgYmFzZVRpbWVzID0gW10uY29uY2F0LmFwcGx5KFtdLCB0cmFmcy5tYXAoZnVuY3Rpb24odHJhZikge1xuICAgIHJldHVybiBmaW5kQm94KHRyYWYsIFsndGZoZCddKS5tYXAoZnVuY3Rpb24odGZoZCkge1xuICAgICAgdmFyIGlkLCBzY2FsZSwgYmFzZVRpbWU7XG5cbiAgICAgIC8vIGdldCB0aGUgdHJhY2sgaWQgZnJvbSB0aGUgdGZoZFxuICAgICAgaWQgPSB0b1Vuc2lnbmVkKHRmaGRbNF0gPDwgMjQgfFxuICAgICAgICAgICAgICAgICAgICAgIHRmaGRbNV0gPDwgMTYgfFxuICAgICAgICAgICAgICAgICAgICAgIHRmaGRbNl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgIHRmaGRbN10pO1xuICAgICAgLy8gYXNzdW1lIGEgOTBrSHogY2xvY2sgaWYgbm8gdGltZXNjYWxlIHdhcyBzcGVjaWZpZWRcbiAgICAgIHNjYWxlID0gdGltZXNjYWxlW2lkXSB8fCA5MGUzO1xuXG4gICAgICAvLyBnZXQgdGhlIGJhc2UgbWVkaWEgZGVjb2RlIHRpbWUgZnJvbSB0aGUgdGZkdFxuICAgICAgYmFzZVRpbWUgPSBmaW5kQm94KHRyYWYsIFsndGZkdCddKS5tYXAoZnVuY3Rpb24odGZkdCkge1xuICAgICAgICB2YXIgdmVyc2lvbiwgcmVzdWx0O1xuXG4gICAgICAgIHZlcnNpb24gPSB0ZmR0WzBdO1xuICAgICAgICByZXN1bHQgPSB0b1Vuc2lnbmVkKHRmZHRbNF0gPDwgMjQgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbNV0gPDwgMTYgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbNl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbN10pO1xuICAgICAgICBpZiAodmVyc2lvbiA9PT0gIDEpIHtcbiAgICAgICAgICByZXN1bHQgKj0gTWF0aC5wb3coMiwgMzIpO1xuICAgICAgICAgIHJlc3VsdCArPSB0b1Vuc2lnbmVkKHRmZHRbOF0gIDw8IDI0IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZmR0WzldICA8PCAxNiB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGZkdFsxMF0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbMTFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSlbMF07XG4gICAgICBiYXNlVGltZSA9IGJhc2VUaW1lIHx8IEluZmluaXR5O1xuXG4gICAgICAvLyBjb252ZXJ0IGJhc2UgdGltZSB0byBzZWNvbmRzXG4gICAgICByZXR1cm4gYmFzZVRpbWUgLyBzY2FsZTtcbiAgICB9KTtcbiAgfSkpO1xuXG4gIC8vIHJldHVybiB0aGUgbWluaW11bVxuICByZXN1bHQgPSBNYXRoLm1pbi5hcHBseShudWxsLCBiYXNlVGltZXMpO1xuICByZXR1cm4gaXNGaW5pdGUocmVzdWx0KSA/IHJlc3VsdCA6IDA7XG59O1xuXG4vKipcbiAgKiBGaW5kIHRoZSB0cmFja0lkcyBvZiB0aGUgdmlkZW8gdHJhY2tzIGluIHRoaXMgc291cmNlLlxuICAqIEZvdW5kIGJ5IHBhcnNpbmcgdGhlIEhhbmRsZXIgUmVmZXJlbmNlIGFuZCBUcmFjayBIZWFkZXIgQm94ZXM6XG4gICogICBtb292ID4gdHJhayA+IG1kaWEgPiBoZGxyXG4gICogICBtb292ID4gdHJhayA+IHRraGRcbiAgKlxuICAqIEBwYXJhbSB7VWludDhBcnJheX0gaW5pdCAtIFRoZSBieXRlcyBvZiB0aGUgaW5pdCBzZWdtZW50IGZvciB0aGlzIHNvdXJjZVxuICAqIEByZXR1cm4ge051bWJlcltdfSBBIGxpc3Qgb2YgdHJhY2tJZHNcbiAgKlxuICAqIEBzZWUgSVNPLUJNRkYtMTIvMjAxNSwgU2VjdGlvbiA4LjQuM1xuICoqL1xuZ2V0VmlkZW9UcmFja0lkcyA9IGZ1bmN0aW9uKGluaXQpIHtcbiAgdmFyIHRyYWtzID0gZmluZEJveChpbml0LCBbJ21vb3YnLCAndHJhayddKTtcbiAgdmFyIHZpZGVvVHJhY2tJZHMgPSBbXTtcblxuICB0cmFrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWspIHtcbiAgICB2YXIgaGRscnMgPSBmaW5kQm94KHRyYWssIFsnbWRpYScsICdoZGxyJ10pO1xuICAgIHZhciB0a2hkcyA9IGZpbmRCb3godHJhaywgWyd0a2hkJ10pO1xuXG4gICAgaGRscnMuZm9yRWFjaChmdW5jdGlvbihoZGxyLCBpbmRleCkge1xuICAgICAgdmFyIGhhbmRsZXJUeXBlID0gcGFyc2VUeXBlKGhkbHIuc3ViYXJyYXkoOCwgMTIpKTtcbiAgICAgIHZhciB0a2hkID0gdGtoZHNbaW5kZXhdO1xuICAgICAgdmFyIHZpZXc7XG4gICAgICB2YXIgdmVyc2lvbjtcbiAgICAgIHZhciB0cmFja0lkO1xuXG4gICAgICBpZiAoaGFuZGxlclR5cGUgPT09ICd2aWRlJykge1xuICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KHRraGQuYnVmZmVyLCB0a2hkLmJ5dGVPZmZzZXQsIHRraGQuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHZlcnNpb24gPSB2aWV3LmdldFVpbnQ4KDApO1xuICAgICAgICB0cmFja0lkID0gKHZlcnNpb24gPT09IDApID8gdmlldy5nZXRVaW50MzIoMTIpIDogdmlldy5nZXRVaW50MzIoMjApO1xuXG4gICAgICAgIHZpZGVvVHJhY2tJZHMucHVzaCh0cmFja0lkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHZpZGVvVHJhY2tJZHM7XG59O1xuXG4vKipcbiAqIEdldCBhbGwgdGhlIHZpZGVvLCBhdWRpbywgYW5kIGhpbnQgdHJhY2tzIGZyb20gYSBub24gZnJhZ21lbnRlZFxuICogbXA0IHNlZ21lbnRcbiAqL1xuZ2V0VHJhY2tzID0gZnVuY3Rpb24oaW5pdCkge1xuICB2YXIgdHJha3MgPSBmaW5kQm94KGluaXQsIFsnbW9vdicsICd0cmFrJ10pO1xuICB2YXIgdHJhY2tzID0gW107XG5cbiAgdHJha3MuZm9yRWFjaChmdW5jdGlvbih0cmFrKSB7XG4gICAgdmFyIHRyYWNrID0ge307XG4gICAgdmFyIHRraGQgPSBmaW5kQm94KHRyYWssIFsndGtoZCddKVswXTtcbiAgICB2YXIgdmlldywgdmVyc2lvbjtcblxuICAgIC8vIGlkXG4gICAgaWYgKHRraGQpIHtcbiAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcodGtoZC5idWZmZXIsIHRraGQuYnl0ZU9mZnNldCwgdGtoZC5ieXRlTGVuZ3RoKTtcbiAgICAgIHZlcnNpb24gPSB2aWV3LmdldFVpbnQ4KDApO1xuXG4gICAgICB0cmFjay5pZCA9ICh2ZXJzaW9uID09PSAwKSA/IHZpZXcuZ2V0VWludDMyKDEyKSA6IHZpZXcuZ2V0VWludDMyKDIwKTtcbiAgICB9XG5cbiAgICB2YXIgaGRsciA9IGZpbmRCb3godHJhaywgWydtZGlhJywgJ2hkbHInXSlbMF07XG5cbiAgICAvLyB0eXBlXG4gICAgaWYgKGhkbHIpIHtcbiAgICAgIHZhciB0eXBlID0gcGFyc2VUeXBlKGhkbHIuc3ViYXJyYXkoOCwgMTIpKTtcblxuICAgICAgaWYgKHR5cGUgPT09ICd2aWRlJykge1xuICAgICAgICB0cmFjay50eXBlID0gJ3ZpZGVvJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NvdW4nKSB7XG4gICAgICAgIHRyYWNrLnR5cGUgPSAnYXVkaW8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhY2sudHlwZSA9IHR5cGU7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBjb2RlY1xuICAgIHZhciBzdHNkID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnbWluZicsICdzdGJsJywgJ3N0c2QnXSlbMF07XG5cbiAgICBpZiAoc3RzZCkge1xuICAgICAgdmFyIHNhbXBsZURlc2NyaXB0aW9ucyA9IHN0c2Quc3ViYXJyYXkoOCk7XG4gICAgICAvLyBnaXZlcyB0aGUgY29kZWMgdHlwZSBzdHJpbmdcbiAgICAgIHRyYWNrLmNvZGVjID0gcGFyc2VUeXBlKHNhbXBsZURlc2NyaXB0aW9ucy5zdWJhcnJheSg0LCA4KSk7XG5cbiAgICAgIHZhciBjb2RlY0JveCA9IGZpbmRCb3goc2FtcGxlRGVzY3JpcHRpb25zLCBbdHJhY2suY29kZWNdKVswXTtcbiAgICAgIHZhciBjb2RlY0NvbmZpZywgY29kZWNDb25maWdUeXBlO1xuXG4gICAgICBpZiAoY29kZWNCb3gpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzODEjc2VjdGlvbi0zLjNcbiAgICAgICAgaWYgKCgvXlthLXpddmNbMS05XSQvaSkudGVzdCh0cmFjay5jb2RlYykpIHtcbiAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIGFueXRoaW5nIGJ1dCB0aGUgXCJjb25maWdcIiBwYXJhbWV0ZXIgb2YgdGhlXG4gICAgICAgICAgLy8gYXZjMSBjb2RlY0JveFxuICAgICAgICAgIGNvZGVjQ29uZmlnID0gY29kZWNCb3guc3ViYXJyYXkoNzgpO1xuICAgICAgICAgIGNvZGVjQ29uZmlnVHlwZSA9IHBhcnNlVHlwZShjb2RlY0NvbmZpZy5zdWJhcnJheSg0LCA4KSk7XG5cbiAgICAgICAgICBpZiAoY29kZWNDb25maWdUeXBlID09PSAnYXZjQycgJiYgY29kZWNDb25maWcubGVuZ3RoID4gMTEpIHtcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjICs9ICcuJztcblxuICAgICAgICAgICAgLy8gbGVmdCBwYWRkZWQgd2l0aCB6ZXJvZXMgZm9yIHNpbmdsZSBkaWdpdCBoZXhcbiAgICAgICAgICAgIC8vIHByb2ZpbGUgaWRjXG4gICAgICAgICAgICB0cmFjay5jb2RlYyArPSAgdG9IZXhTdHJpbmcoY29kZWNDb25maWdbOV0pO1xuICAgICAgICAgICAgLy8gdGhlIGJ5dGUgY29udGFpbmluZyB0aGUgY29uc3RyYWludF9zZXQgZmxhZ3NcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjICs9IHRvSGV4U3RyaW5nKGNvZGVjQ29uZmlnWzEwXSk7XG4gICAgICAgICAgICAvLyBsZXZlbCBpZGNcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjICs9IHRvSGV4U3RyaW5nKGNvZGVjQ29uZmlnWzExXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3cgYSB3YXJuaW5nIHRoYXQgd2UgY291bGRuJ3QgcGFyc2UgdGhlIGNvZGVjXG4gICAgICAgICAgICAvLyBhbmQgYXJlIHVzaW5nIHRoZSBkZWZhdWx0XG4gICAgICAgICAgICB0cmFjay5jb2RlYyA9ICdhdmMxLjRkNDAwZCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCgvXm1wNFthLHZdJC9pKS50ZXN0KHRyYWNrLmNvZGVjKSkge1xuICAgICAgICAgIC8vIHdlIGRvIG5vdCBuZWVkIGFueXRoaW5nIGJ1dCB0aGUgc3RyZWFtRGVzY3JpcHRvciBvZiB0aGUgbXA0YSBjb2RlY0JveFxuICAgICAgICAgIGNvZGVjQ29uZmlnID0gY29kZWNCb3guc3ViYXJyYXkoMjgpO1xuICAgICAgICAgIGNvZGVjQ29uZmlnVHlwZSA9IHBhcnNlVHlwZShjb2RlY0NvbmZpZy5zdWJhcnJheSg0LCA4KSk7XG5cbiAgICAgICAgICBpZiAoY29kZWNDb25maWdUeXBlID09PSAnZXNkcycgJiYgY29kZWNDb25maWcubGVuZ3RoID4gMjAgJiYgY29kZWNDb25maWdbMTldICE9PSAwKSB7XG4gICAgICAgICAgICB0cmFjay5jb2RlYyArPSAnLicgKyB0b0hleFN0cmluZyhjb2RlY0NvbmZpZ1sxOV0pO1xuICAgICAgICAgICAgLy8gdGhpcyB2YWx1ZSBpcyBvbmx5IGEgc2luZ2xlIGRpZ2l0XG4gICAgICAgICAgICB0cmFjay5jb2RlYyArPSAnLicgKyB0b0hleFN0cmluZygoY29kZWNDb25maWdbMjBdID4+PiAyKSAmIDB4M2YpLnJlcGxhY2UoL14wLywgJycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBzaG93IGEgd2FybmluZyB0aGF0IHdlIGNvdWxkbid0IHBhcnNlIHRoZSBjb2RlY1xuICAgICAgICAgICAgLy8gYW5kIGFyZSB1c2luZyB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgdHJhY2suY29kZWMgPSAnbXA0YS40MC4yJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVE9ETzogc2hvdyBhIHdhcm5pbmc/IGZvciB1bmtub3duIGNvZGVjIHR5cGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtZGhkID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnbWRoZCddKVswXTtcblxuICAgIGlmIChtZGhkICYmIHRraGQpIHtcbiAgICAgIHZhciBpbmRleCA9IHZlcnNpb24gPT09IDAgPyAxMiA6IDIwO1xuXG4gICAgICB0cmFjay50aW1lc2NhbGUgPSB0b1Vuc2lnbmVkKG1kaGRbaW5kZXhdICAgICA8PCAyNCB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kaGRbaW5kZXggKyAxXSA8PCAxNiB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kaGRbaW5kZXggKyAyXSA8PCAgOCB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kaGRbaW5kZXggKyAzXSk7XG4gICAgfVxuXG4gICAgdHJhY2tzLnB1c2godHJhY2spO1xuICB9KTtcblxuICByZXR1cm4gdHJhY2tzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbmRCb3g6IGZpbmRCb3gsXG4gIHBhcnNlVHlwZTogcGFyc2VUeXBlLFxuICB0aW1lc2NhbGU6IHRpbWVzY2FsZSxcbiAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gIHZpZGVvVHJhY2tJZHM6IGdldFZpZGVvVHJhY2tJZHMsXG4gIHRyYWNrczogZ2V0VHJhY2tzXG59O1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBSZWFkcyBpbi1iYW5kIGNhcHRpb24gaW5mb3JtYXRpb24gZnJvbSBhIHZpZGVvIGVsZW1lbnRhcnlcbiAqIHN0cmVhbS4gQ2FwdGlvbnMgbXVzdCBmb2xsb3cgdGhlIENFQS03MDggc3RhbmRhcmQgZm9yIGluamVjdGlvblxuICogaW50byBhbiBNUEVHLTIgdHJhbnNwb3J0IHN0cmVhbXMuXG4gKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NFQS03MDhcbiAqIEBzZWUgaHR0cHM6Ly93d3cuZ3BvLmdvdi9mZHN5cy9wa2cvQ0ZSLTIwMDctdGl0bGU0Ny12b2wxL3BkZi9DRlItMjAwNy10aXRsZTQ3LXZvbDEtc2VjMTUtMTE5LnBkZlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gU3VwcGxlbWVudGFsIGVuaGFuY2VtZW50IGluZm9ybWF0aW9uIChTRUkpIE5BTCB1bml0cyBoYXZlIGFcbi8vIHBheWxvYWQgdHlwZSBmaWVsZCB0byBpbmRpY2F0ZSBob3cgdGhleSBhcmUgdG8gYmVcbi8vIGludGVycHJldGVkLiBDRUFTLTcwOCBjYXB0aW9uIGNvbnRlbnQgaXMgYWx3YXlzIHRyYW5zbWl0dGVkIHdpdGhcbi8vIHBheWxvYWQgdHlwZSAweDA0LlxudmFyIFVTRVJfREFUQV9SRUdJU1RFUkVEX0lUVV9UX1QzNSA9IDQsXG4gICAgUkJTUF9UUkFJTElOR19CSVRTID0gMTI4O1xuXG4vKipcbiAgKiBQYXJzZSBhIHN1cHBsZW1lbnRhbCBlbmhhbmNlbWVudCBpbmZvcm1hdGlvbiAoU0VJKSBOQUwgdW5pdC5cbiAgKiBTdG9wcyBwYXJzaW5nIG9uY2UgYSBtZXNzYWdlIG9mIHR5cGUgSVRVIFQgVDM1IGhhcyBiZWVuIGZvdW5kLlxuICAqXG4gICogQHBhcmFtIGJ5dGVzIHtVaW50OEFycmF5fSB0aGUgYnl0ZXMgb2YgYSBTRUkgTkFMIHVuaXRcbiAgKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBwYXJzZWQgU0VJIHBheWxvYWRcbiAgKiBAc2VlIFJlYy4gSVRVLVQgSC4yNjQsIDcuMy4yLjMuMVxuICAqL1xudmFyIHBhcnNlU2VpID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyXG4gICAgaSA9IDAsXG4gICAgcmVzdWx0ID0ge1xuICAgICAgcGF5bG9hZFR5cGU6IC0xLFxuICAgICAgcGF5bG9hZFNpemU6IDBcbiAgICB9LFxuICAgIHBheWxvYWRUeXBlID0gMCxcbiAgICBwYXlsb2FkU2l6ZSA9IDA7XG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgc2VpX3Jic3AgcGFyc2luZyBlYWNoIGVhY2ggaW5kaXZpZHVhbCBzZWlfbWVzc2FnZVxuICB3aGlsZSAoaSA8IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBzdG9wIG9uY2Ugd2UgaGF2ZSBoaXQgdGhlIGVuZCBvZiB0aGUgc2VpX3Jic3BcbiAgICBpZiAoYnl0ZXNbaV0gPT09IFJCU1BfVFJBSUxJTkdfQklUUykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgcGF5bG9hZCB0eXBlXG4gICAgd2hpbGUgKGJ5dGVzW2ldID09PSAweEZGKSB7XG4gICAgICBwYXlsb2FkVHlwZSArPSAyNTU7XG4gICAgICBpKys7XG4gICAgfVxuICAgIHBheWxvYWRUeXBlICs9IGJ5dGVzW2krK107XG5cbiAgICAvLyBQYXJzZSBwYXlsb2FkIHNpemVcbiAgICB3aGlsZSAoYnl0ZXNbaV0gPT09IDB4RkYpIHtcbiAgICAgIHBheWxvYWRTaXplICs9IDI1NTtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgcGF5bG9hZFNpemUgKz0gYnl0ZXNbaSsrXTtcblxuICAgIC8vIHRoaXMgc2VpX21lc3NhZ2UgaXMgYSA2MDgvNzA4IGNhcHRpb24gc28gc2F2ZSBpdCBhbmQgYnJlYWtcbiAgICAvLyB0aGVyZSBjYW4gb25seSBldmVyIGJlIG9uZSBjYXB0aW9uIG1lc3NhZ2UgaW4gYSBmcmFtZSdzIHNlaVxuICAgIGlmICghcmVzdWx0LnBheWxvYWQgJiYgcGF5bG9hZFR5cGUgPT09IFVTRVJfREFUQV9SRUdJU1RFUkVEX0lUVV9UX1QzNSkge1xuICAgICAgcmVzdWx0LnBheWxvYWRUeXBlID0gcGF5bG9hZFR5cGU7XG4gICAgICByZXN1bHQucGF5bG9hZFNpemUgPSBwYXlsb2FkU2l6ZTtcbiAgICAgIHJlc3VsdC5wYXlsb2FkID0gYnl0ZXMuc3ViYXJyYXkoaSwgaSArIHBheWxvYWRTaXplKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIHNraXAgdGhlIHBheWxvYWQgYW5kIHBhcnNlIHRoZSBuZXh0IG1lc3NhZ2VcbiAgICBpICs9IHBheWxvYWRTaXplO1xuICAgIHBheWxvYWRUeXBlID0gMDtcbiAgICBwYXlsb2FkU2l6ZSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gc2VlIEFOU0kvU0NURSAxMjgtMSAoMjAxMyksIHNlY3Rpb24gOC4xXG52YXIgcGFyc2VVc2VyRGF0YSA9IGZ1bmN0aW9uKHNlaSkge1xuICAvLyBpdHVfdF90MzVfY29udHJ5X2NvZGUgbXVzdCBiZSAxODEgKFVuaXRlZCBTdGF0ZXMpIGZvclxuICAvLyBjYXB0aW9uc1xuICBpZiAoc2VpLnBheWxvYWRbMF0gIT09IDE4MSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gaXR1X3RfdDM1X3Byb3ZpZGVyX2NvZGUgc2hvdWxkIGJlIDQ5IChBVFNDKSBmb3IgY2FwdGlvbnNcbiAgaWYgKCgoc2VpLnBheWxvYWRbMV0gPDwgOCkgfCBzZWkucGF5bG9hZFsyXSkgIT09IDQ5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyB0aGUgdXNlcl9pZGVudGlmaWVyIHNob3VsZCBiZSBcIkdBOTRcIiB0byBpbmRpY2F0ZSBBVFNDMSBkYXRhXG4gIGlmIChTdHJpbmcuZnJvbUNoYXJDb2RlKHNlaS5wYXlsb2FkWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWkucGF5bG9hZFs0XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VpLnBheWxvYWRbNV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlaS5wYXlsb2FkWzZdKSAhPT0gJ0dBOTQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBmaW5hbGx5LCB1c2VyX2RhdGFfdHlwZV9jb2RlIHNob3VsZCBiZSAweDAzIGZvciBjYXB0aW9uIGRhdGFcbiAgaWYgKHNlaS5wYXlsb2FkWzddICE9PSAweDAzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyByZXR1cm4gdGhlIHVzZXJfZGF0YV90eXBlX3N0cnVjdHVyZSBhbmQgc3RyaXAgdGhlIHRyYWlsaW5nXG4gIC8vIG1hcmtlciBiaXRzXG4gIHJldHVybiBzZWkucGF5bG9hZC5zdWJhcnJheSg4LCBzZWkucGF5bG9hZC5sZW5ndGggLSAxKTtcbn07XG5cbi8vIHNlZSBDRUEtNzA4LUQsIHNlY3Rpb24gNC40XG52YXIgcGFyc2VDYXB0aW9uUGFja2V0cyA9IGZ1bmN0aW9uKHB0cywgdXNlckRhdGEpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXSwgaSwgY291bnQsIG9mZnNldCwgZGF0YTtcblxuICAvLyBpZiB0aGlzIGlzIGp1c3QgZmlsbGVyLCByZXR1cm4gaW1tZWRpYXRlbHlcbiAgaWYgKCEodXNlckRhdGFbMF0gJiAweDQwKSkge1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgLy8gcGFyc2Ugb3V0IHRoZSBjY19kYXRhXzEgYW5kIGNjX2RhdGFfMiBmaWVsZHNcbiAgY291bnQgPSB1c2VyRGF0YVswXSAmIDB4MWY7XG4gIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgb2Zmc2V0ID0gaSAqIDM7XG4gICAgZGF0YSA9IHtcbiAgICAgIHR5cGU6IHVzZXJEYXRhW29mZnNldCArIDJdICYgMHgwMyxcbiAgICAgIHB0czogcHRzXG4gICAgfTtcblxuICAgIC8vIGNhcHR1cmUgY2MgZGF0YSB3aGVuIGNjX3ZhbGlkIGlzIDFcbiAgICBpZiAodXNlckRhdGFbb2Zmc2V0ICsgMl0gJiAweDA0KSB7XG4gICAgICBkYXRhLmNjRGF0YSA9ICh1c2VyRGF0YVtvZmZzZXQgKyAzXSA8PCA4KSB8IHVzZXJEYXRhW29mZnNldCArIDRdO1xuICAgICAgcmVzdWx0cy5wdXNoKGRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbnZhciBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHZhclxuICAgICAgbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zID0gW10sXG4gICAgICBpID0gMSxcbiAgICAgIG5ld0xlbmd0aCwgbmV3RGF0YTtcblxuICAgIC8vIEZpbmQgYWxsIGBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlc2BcbiAgICB3aGlsZSAoaSA8IGxlbmd0aCAtIDIpIHtcbiAgICAgIGlmIChkYXRhW2ldID09PSAwICYmIGRhdGFbaSArIDFdID09PSAwICYmIGRhdGFbaSArIDJdID09PSAweDAzKSB7XG4gICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5wdXNoKGkgKyAyKTtcbiAgICAgICAgaSArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIEVtdWxhdGlvbiBQcmV2ZW50aW9uIEJ5dGVzIHdlcmUgZm91bmQganVzdCByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgLy8gYXJyYXlcbiAgICBpZiAoZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGFycmF5IHRvIGhvbGQgdGhlIE5BTCB1bml0IGRhdGFcbiAgICBuZXdMZW5ndGggPSBsZW5ndGggLSBlbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXNQb3NpdGlvbnMubGVuZ3RoO1xuICAgIG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShuZXdMZW5ndGgpO1xuICAgIHZhciBzb3VyY2VJbmRleCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBzb3VyY2VJbmRleCsrLCBpKyspIHtcbiAgICAgIGlmIChzb3VyY2VJbmRleCA9PT0gZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zWzBdKSB7XG4gICAgICAgIC8vIFNraXAgdGhpcyBieXRlXG4gICAgICAgIHNvdXJjZUluZGV4Kys7XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIHBvc2l0aW9uIGluZGV4XG4gICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgfVxuICAgICAgbmV3RGF0YVtpXSA9IGRhdGFbc291cmNlSW5kZXhdO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdEYXRhO1xufTtcblxuLy8gZXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlU2VpOiBwYXJzZVNlaSxcbiAgcGFyc2VVc2VyRGF0YTogcGFyc2VVc2VyRGF0YSxcbiAgcGFyc2VDYXB0aW9uUGFja2V0czogcGFyc2VDYXB0aW9uUGFja2V0cyxcbiAgZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlczogZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyxcbiAgVVNFUl9EQVRBX1JFR0lTVEVSRURfSVRVX1RfVDM1OiBVU0VSX0RBVEFfUkVHSVNURVJFRF9JVFVfVF9UMzVcbn07XG4iLCIvKipcbiAqIG11eC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIFBhcnNlIHRoZSBpbnRlcm5hbCBNUDQgc3RydWN0dXJlIGludG8gYW4gZXF1aXZhbGVudCBqYXZhc2NyaXB0XG4gKiBvYmplY3QuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyXG4gIGluc3BlY3RNcDQsXG4gIHRleHRpZnlNcDQsXG5cbiAgcGFyc2VUeXBlID0gcmVxdWlyZSgnLi4vbXA0L3Byb2JlJykucGFyc2VUeXBlLFxuICBwYXJzZU1wNERhdGUgPSBmdW5jdGlvbihzZWNvbmRzKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHNlY29uZHMgKiAxMDAwIC0gMjA4Mjg0NDgwMDAwMCk7XG4gIH0sXG4gIHBhcnNlU2FtcGxlRmxhZ3MgPSBmdW5jdGlvbihmbGFncykge1xuICAgIHJldHVybiB7XG4gICAgICBpc0xlYWRpbmc6IChmbGFnc1swXSAmIDB4MGMpID4+PiAyLFxuICAgICAgZGVwZW5kc09uOiBmbGFnc1swXSAmIDB4MDMsXG4gICAgICBpc0RlcGVuZGVkT246IChmbGFnc1sxXSAmIDB4YzApID4+PiA2LFxuICAgICAgaGFzUmVkdW5kYW5jeTogKGZsYWdzWzFdICYgMHgzMCkgPj4+IDQsXG4gICAgICBwYWRkaW5nVmFsdWU6IChmbGFnc1sxXSAmIDB4MGUpID4+PiAxLFxuICAgICAgaXNOb25TeW5jU2FtcGxlOiBmbGFnc1sxXSAmIDB4MDEsXG4gICAgICBkZWdyYWRhdGlvblByaW9yaXR5OiAoZmxhZ3NbMl0gPDwgOCkgfCBmbGFnc1szXVxuICAgIH07XG4gIH0sXG4gIG5hbFBhcnNlID0gZnVuY3Rpb24oYXZjU3RyZWFtKSB7XG4gICAgdmFyXG4gICAgICBhdmNWaWV3ID0gbmV3IERhdGFWaWV3KGF2Y1N0cmVhbS5idWZmZXIsIGF2Y1N0cmVhbS5ieXRlT2Zmc2V0LCBhdmNTdHJlYW0uYnl0ZUxlbmd0aCksXG4gICAgICByZXN1bHQgPSBbXSxcbiAgICAgIGksXG4gICAgICBsZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSArIDQgPCBhdmNTdHJlYW0ubGVuZ3RoOyBpICs9IGxlbmd0aCkge1xuICAgICAgbGVuZ3RoID0gYXZjVmlldy5nZXRVaW50MzIoaSk7XG4gICAgICBpICs9IDQ7XG5cbiAgICAgIC8vIGJhaWwgaWYgdGhpcyBkb2Vzbid0IGFwcGVhciB0byBiZSBhbiBIMjY0IHN0cmVhbVxuICAgICAgaWYgKGxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCc8c3BhbiBzdHlsZT1cXCdjb2xvcjpyZWQ7XFwnPk1BTEZPUk1FRCBEQVRBPC9zcGFuPicpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChhdmNTdHJlYW1baV0gJiAweDFGKSB7XG4gICAgICBjYXNlIDB4MDE6XG4gICAgICAgIHJlc3VsdC5wdXNoKCdzbGljZV9sYXllcl93aXRob3V0X3BhcnRpdGlvbmluZ19yYnNwJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAweDA1OlxuICAgICAgICByZXN1bHQucHVzaCgnc2xpY2VfbGF5ZXJfd2l0aG91dF9wYXJ0aXRpb25pbmdfcmJzcF9pZHInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MDY6XG4gICAgICAgIHJlc3VsdC5wdXNoKCdzZWlfcmJzcCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHgwNzpcbiAgICAgICAgcmVzdWx0LnB1c2goJ3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3AnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MDg6XG4gICAgICAgIHJlc3VsdC5wdXNoKCdwaWNfcGFyYW1ldGVyX3NldF9yYnNwJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAweDA5OlxuICAgICAgICByZXN1bHQucHVzaCgnYWNjZXNzX3VuaXRfZGVsaW1pdGVyX3Jic3AnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXN1bHQucHVzaCgnVU5LTk9XTiBOQUwgLSAnICsgYXZjU3RyZWFtW2ldICYgMHgxRik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIC8vIHJlZ2lzdHJ5IG9mIGhhbmRsZXJzIGZvciBpbmRpdmlkdWFsIG1wNCBib3ggdHlwZXNcbiAgcGFyc2UgPSB7XG4gICAgLy8gY29kaW5nbmFtZSwgbm90IGEgZmlyc3QtY2xhc3MgYm94IHR5cGUuIHN0c2QgZW50cmllcyBzaGFyZSB0aGVcbiAgICAvLyBzYW1lIGZvcm1hdCBhcyByZWFsIGJveGVzIHNvIHRoZSBwYXJzaW5nIGluZnJhc3RydWN0dXJlIGNhbiBiZVxuICAgIC8vIHNoYXJlZFxuICAgIGF2YzE6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhUmVmZXJlbmNlSW5kZXg6IHZpZXcuZ2V0VWludDE2KDYpLFxuICAgICAgICB3aWR0aDogdmlldy5nZXRVaW50MTYoMjQpLFxuICAgICAgICBoZWlnaHQ6IHZpZXcuZ2V0VWludDE2KDI2KSxcbiAgICAgICAgaG9yaXpyZXNvbHV0aW9uOiB2aWV3LmdldFVpbnQxNigyOCkgKyAodmlldy5nZXRVaW50MTYoMzApIC8gMTYpLFxuICAgICAgICB2ZXJ0cmVzb2x1dGlvbjogdmlldy5nZXRVaW50MTYoMzIpICsgKHZpZXcuZ2V0VWludDE2KDM0KSAvIDE2KSxcbiAgICAgICAgZnJhbWVDb3VudDogdmlldy5nZXRVaW50MTYoNDApLFxuICAgICAgICBkZXB0aDogdmlldy5nZXRVaW50MTYoNzQpLFxuICAgICAgICBjb25maWc6IGluc3BlY3RNcDQoZGF0YS5zdWJhcnJheSg3OCwgZGF0YS5ieXRlTGVuZ3RoKSlcbiAgICAgIH07XG4gICAgfSxcbiAgICBhdmNDOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXJcbiAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgY29uZmlndXJhdGlvblZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgICAgYXZjUHJvZmlsZUluZGljYXRpb246IGRhdGFbMV0sXG4gICAgICAgICAgcHJvZmlsZUNvbXBhdGliaWxpdHk6IGRhdGFbMl0sXG4gICAgICAgICAgYXZjTGV2ZWxJbmRpY2F0aW9uOiBkYXRhWzNdLFxuICAgICAgICAgIGxlbmd0aFNpemVNaW51c09uZTogZGF0YVs0XSAmIDB4MDMsXG4gICAgICAgICAgc3BzOiBbXSxcbiAgICAgICAgICBwcHM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIG51bU9mU2VxdWVuY2VQYXJhbWV0ZXJTZXRzID0gZGF0YVs1XSAmIDB4MWYsXG4gICAgICAgIG51bU9mUGljdHVyZVBhcmFtZXRlclNldHMsXG4gICAgICAgIG5hbFNpemUsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgaTtcblxuICAgICAgLy8gaXRlcmF0ZSBwYXN0IGFueSBTUFNzXG4gICAgICBvZmZzZXQgPSA2O1xuICAgICAgZm9yIChpID0gMDsgaSA8IG51bU9mU2VxdWVuY2VQYXJhbWV0ZXJTZXRzOyBpKyspIHtcbiAgICAgICAgbmFsU2l6ZSA9IHZpZXcuZ2V0VWludDE2KG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSAyO1xuICAgICAgICByZXN1bHQuc3BzLnB1c2gobmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIG5hbFNpemUpKSk7XG4gICAgICAgIG9mZnNldCArPSBuYWxTaXplO1xuICAgICAgfVxuICAgICAgLy8gaXRlcmF0ZSBwYXN0IGFueSBQUFNzXG4gICAgICBudW1PZlBpY3R1cmVQYXJhbWV0ZXJTZXRzID0gZGF0YVtvZmZzZXRdO1xuICAgICAgb2Zmc2V0Kys7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtT2ZQaWN0dXJlUGFyYW1ldGVyU2V0czsgaSsrKSB7XG4gICAgICAgIG5hbFNpemUgPSB2aWV3LmdldFVpbnQxNihvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgcmVzdWx0LnBwcy5wdXNoKG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyBuYWxTaXplKSkpO1xuICAgICAgICBvZmZzZXQgKz0gbmFsU2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBidHJ0OiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYnVmZmVyU2l6ZURCOiB2aWV3LmdldFVpbnQzMigwKSxcbiAgICAgICAgbWF4Qml0cmF0ZTogdmlldy5nZXRVaW50MzIoNCksXG4gICAgICAgIGF2Z0JpdHJhdGU6IHZpZXcuZ2V0VWludDMyKDgpXG4gICAgICB9O1xuICAgIH0sXG4gICAgZXNkczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgICAgICBlc0lkOiAoZGF0YVs2XSA8PCA4KSB8IGRhdGFbN10sXG4gICAgICAgIHN0cmVhbVByaW9yaXR5OiBkYXRhWzhdICYgMHgxZixcbiAgICAgICAgZGVjb2RlckNvbmZpZzoge1xuICAgICAgICAgIG9iamVjdFByb2ZpbGVJbmRpY2F0aW9uOiBkYXRhWzExXSxcbiAgICAgICAgICBzdHJlYW1UeXBlOiAoZGF0YVsxMl0gPj4+IDIpICYgMHgzZixcbiAgICAgICAgICBidWZmZXJTaXplOiAoZGF0YVsxM10gPDwgMTYpIHwgKGRhdGFbMTRdIDw8IDgpIHwgZGF0YVsxNV0sXG4gICAgICAgICAgbWF4Qml0cmF0ZTogKGRhdGFbMTZdIDw8IDI0KSB8XG4gICAgICAgICAgICAoZGF0YVsxN10gPDwgMTYpIHxcbiAgICAgICAgICAgIChkYXRhWzE4XSA8PCAgOCkgfFxuICAgICAgICAgICAgZGF0YVsxOV0sXG4gICAgICAgICAgYXZnQml0cmF0ZTogKGRhdGFbMjBdIDw8IDI0KSB8XG4gICAgICAgICAgICAoZGF0YVsyMV0gPDwgMTYpIHxcbiAgICAgICAgICAgIChkYXRhWzIyXSA8PCAgOCkgfFxuICAgICAgICAgICAgZGF0YVsyM10sXG4gICAgICAgICAgZGVjb2RlckNvbmZpZ0Rlc2NyaXB0b3I6IHtcbiAgICAgICAgICAgIHRhZzogZGF0YVsyNF0sXG4gICAgICAgICAgICBsZW5ndGg6IGRhdGFbMjVdLFxuICAgICAgICAgICAgYXVkaW9PYmplY3RUeXBlOiAoZGF0YVsyNl0gPj4+IDMpICYgMHgxZixcbiAgICAgICAgICAgIHNhbXBsaW5nRnJlcXVlbmN5SW5kZXg6ICgoZGF0YVsyNl0gJiAweDA3KSA8PCAxKSB8XG4gICAgICAgICAgICAgICgoZGF0YVsyN10gPj4+IDcpICYgMHgwMSksXG4gICAgICAgICAgICBjaGFubmVsQ29uZmlndXJhdGlvbjogKGRhdGFbMjddID4+PiAzKSAmIDB4MGZcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBmdHlwOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXJcbiAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgbWFqb3JCcmFuZDogcGFyc2VUeXBlKGRhdGEuc3ViYXJyYXkoMCwgNCkpLFxuICAgICAgICAgIG1pbm9yVmVyc2lvbjogdmlldy5nZXRVaW50MzIoNCksXG4gICAgICAgICAgY29tcGF0aWJsZUJyYW5kczogW11cbiAgICAgICAgfSxcbiAgICAgICAgaSA9IDg7XG4gICAgICB3aGlsZSAoaSA8IGRhdGEuYnl0ZUxlbmd0aCkge1xuICAgICAgICByZXN1bHQuY29tcGF0aWJsZUJyYW5kcy5wdXNoKHBhcnNlVHlwZShkYXRhLnN1YmFycmF5KGksIGkgKyA0KSkpO1xuICAgICAgICBpICs9IDQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgZGluZjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm94ZXM6IGluc3BlY3RNcDQoZGF0YSlcbiAgICAgIH07XG4gICAgfSxcbiAgICBkcmVmOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgIGRhdGFSZWZlcmVuY2VzOiBpbnNwZWN0TXA0KGRhdGEuc3ViYXJyYXkoOCkpXG4gICAgICB9O1xuICAgIH0sXG4gICAgaGRscjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyXG4gICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKSxcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHZlcnNpb246IHZpZXcuZ2V0VWludDgoMCksXG4gICAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgICAgICAgIGhhbmRsZXJUeXBlOiBwYXJzZVR5cGUoZGF0YS5zdWJhcnJheSg4LCAxMikpLFxuICAgICAgICAgIG5hbWU6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGkgPSA4O1xuXG4gICAgICAvLyBwYXJzZSBvdXQgdGhlIG5hbWUgZmllbGRcbiAgICAgIGZvciAoaSA9IDI0OyBpIDwgZGF0YS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGRhdGFbaV0gPT09IDB4MDApIHtcbiAgICAgICAgICAvLyB0aGUgbmFtZSBmaWVsZCBpcyBudWxsLXRlcm1pbmF0ZWRcbiAgICAgICAgICBpKys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Lm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2ldKTtcbiAgICAgIH1cbiAgICAgIC8vIGRlY29kZSBVVEYtOCB0byBqYXZhc2NyaXB0J3MgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICAgIC8vIHNlZSBodHRwOi8vZWNtYW5hdXQuYmxvZ3Nwb3QuY29tLzIwMDYvMDcvZW5jb2RpbmctZGVjb2RpbmctdXRmOC1pbi1qYXZhc2NyaXB0Lmh0bWxcbiAgICAgIHJlc3VsdC5uYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShyZXN1bHQubmFtZSkpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgbWRhdDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYnl0ZUxlbmd0aDogZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBuYWxzOiBuYWxQYXJzZShkYXRhKVxuICAgICAgfTtcbiAgICB9LFxuICAgIG1kaGQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhclxuICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCksXG4gICAgICAgIGkgPSA0LFxuICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHZlcnNpb246IHZpZXcuZ2V0VWludDgoMCksXG4gICAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgICAgICAgIGxhbmd1YWdlOiAnJ1xuICAgICAgICB9O1xuICAgICAgaWYgKHJlc3VsdC52ZXJzaW9uID09PSAxKSB7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgICAgcmVzdWx0LmNyZWF0aW9uVGltZSA9IHBhcnNlTXA0RGF0ZSh2aWV3LmdldFVpbnQzMihpKSk7IC8vIHRydW5jYXRpbmcgdG9wIDQgYnl0ZXNcbiAgICAgICAgaSArPSA4O1xuICAgICAgICByZXN1bHQubW9kaWZpY2F0aW9uVGltZSA9IHBhcnNlTXA0RGF0ZSh2aWV3LmdldFVpbnQzMihpKSk7IC8vIHRydW5jYXRpbmcgdG9wIDQgYnl0ZXNcbiAgICAgICAgaSArPSA0O1xuICAgICAgICByZXN1bHQudGltZXNjYWxlID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICAgIGkgKz0gODtcbiAgICAgICAgcmVzdWx0LmR1cmF0aW9uID0gdmlldy5nZXRVaW50MzIoaSk7IC8vIHRydW5jYXRpbmcgdG9wIDQgYnl0ZXNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5jcmVhdGlvblRpbWUgPSBwYXJzZU1wNERhdGUodmlldy5nZXRVaW50MzIoaSkpO1xuICAgICAgICBpICs9IDQ7XG4gICAgICAgIHJlc3VsdC5tb2RpZmljYXRpb25UaW1lID0gcGFyc2VNcDREYXRlKHZpZXcuZ2V0VWludDMyKGkpKTtcbiAgICAgICAgaSArPSA0O1xuICAgICAgICByZXN1bHQudGltZXNjYWxlID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgICAgcmVzdWx0LmR1cmF0aW9uID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICB9XG4gICAgICBpICs9IDQ7XG4gICAgICAvLyBsYW5ndWFnZSBpcyBzdG9yZWQgYXMgYW4gSVNPLTYzOS0yL1QgY29kZSBpbiBhbiBhcnJheSBvZiB0aHJlZSA1LWJpdCBmaWVsZHNcbiAgICAgIC8vIGVhY2ggZmllbGQgaXMgdGhlIHBhY2tlZCBkaWZmZXJlbmNlIGJldHdlZW4gaXRzIEFTQ0lJIHZhbHVlIGFuZCAweDYwXG4gICAgICBsYW5ndWFnZSA9IHZpZXcuZ2V0VWludDE2KGkpO1xuICAgICAgcmVzdWx0Lmxhbmd1YWdlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGxhbmd1YWdlID4+IDEwKSArIDB4NjApO1xuICAgICAgcmVzdWx0Lmxhbmd1YWdlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChsYW5ndWFnZSAmIDB4MDNlMCkgPj4gNSkgKyAweDYwKTtcbiAgICAgIHJlc3VsdC5sYW5ndWFnZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChsYW5ndWFnZSAmIDB4MWYpICsgMHg2MCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBtZGlhOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib3hlczogaW5zcGVjdE1wNChkYXRhKVxuICAgICAgfTtcbiAgICB9LFxuICAgIG1maGQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgc2VxdWVuY2VOdW1iZXI6IChkYXRhWzRdIDw8IDI0KSB8XG4gICAgICAgICAgKGRhdGFbNV0gPDwgMTYpIHxcbiAgICAgICAgICAoZGF0YVs2XSA8PCA4KSB8XG4gICAgICAgICAgKGRhdGFbN10pXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWluZjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm94ZXM6IGluc3BlY3RNcDQoZGF0YSlcbiAgICAgIH07XG4gICAgfSxcbiAgICAvLyBjb2RpbmduYW1lLCBub3QgYSBmaXJzdC1jbGFzcyBib3ggdHlwZS4gc3RzZCBlbnRyaWVzIHNoYXJlIHRoZVxuICAgIC8vIHNhbWUgZm9ybWF0IGFzIHJlYWwgYm94ZXMgc28gdGhlIHBhcnNpbmcgaW5mcmFzdHJ1Y3R1cmUgY2FuIGJlXG4gICAgLy8gc2hhcmVkXG4gICAgbXA0YTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyXG4gICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKSxcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIC8vIDYgYnl0ZXMgcmVzZXJ2ZWRcbiAgICAgICAgICBkYXRhUmVmZXJlbmNlSW5kZXg6IHZpZXcuZ2V0VWludDE2KDYpLFxuICAgICAgICAgIC8vIDQgKyA0IGJ5dGVzIHJlc2VydmVkXG4gICAgICAgICAgY2hhbm5lbGNvdW50OiB2aWV3LmdldFVpbnQxNigxNiksXG4gICAgICAgICAgc2FtcGxlc2l6ZTogdmlldy5nZXRVaW50MTYoMTgpLFxuICAgICAgICAgIC8vIDIgYnl0ZXMgcHJlX2RlZmluZWRcbiAgICAgICAgICAvLyAyIGJ5dGVzIHJlc2VydmVkXG4gICAgICAgICAgc2FtcGxlcmF0ZTogdmlldy5nZXRVaW50MTYoMjQpICsgKHZpZXcuZ2V0VWludDE2KDI2KSAvIDY1NTM2KVxuICAgICAgICB9O1xuXG4gICAgICAvLyBpZiB0aGVyZSBhcmUgbW9yZSBieXRlcyB0byBwcm9jZXNzLCBhc3N1bWUgdGhpcyBpcyBhbiBJU08vSUVDXG4gICAgICAvLyAxNDQ5Ni0xNCBNUDRBdWRpb1NhbXBsZUVudHJ5IGFuZCBwYXJzZSB0aGUgRVNEQm94XG4gICAgICBpZiAoZGF0YS5ieXRlTGVuZ3RoID4gMjgpIHtcbiAgICAgICAgcmVzdWx0LnN0cmVhbURlc2NyaXB0b3IgPSBpbnNwZWN0TXA0KGRhdGEuc3ViYXJyYXkoMjgpKVswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBtb29mOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib3hlczogaW5zcGVjdE1wNChkYXRhKVxuICAgICAgfTtcbiAgICB9LFxuICAgIG1vb3Y6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJveGVzOiBpbnNwZWN0TXA0KGRhdGEpXG4gICAgICB9O1xuICAgIH0sXG4gICAgbXZleDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm94ZXM6IGluc3BlY3RNcDQoZGF0YSlcbiAgICAgIH07XG4gICAgfSxcbiAgICBtdmhkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXJcbiAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgICAgICBpID0gNCxcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHZlcnNpb246IHZpZXcuZ2V0VWludDgoMCksXG4gICAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpXG4gICAgICAgIH07XG5cbiAgICAgIGlmIChyZXN1bHQudmVyc2lvbiA9PT0gMSkge1xuICAgICAgICBpICs9IDQ7XG4gICAgICAgIHJlc3VsdC5jcmVhdGlvblRpbWUgPSBwYXJzZU1wNERhdGUodmlldy5nZXRVaW50MzIoaSkpOyAvLyB0cnVuY2F0aW5nIHRvcCA0IGJ5dGVzXG4gICAgICAgIGkgKz0gODtcbiAgICAgICAgcmVzdWx0Lm1vZGlmaWNhdGlvblRpbWUgPSBwYXJzZU1wNERhdGUodmlldy5nZXRVaW50MzIoaSkpOyAvLyB0cnVuY2F0aW5nIHRvcCA0IGJ5dGVzXG4gICAgICAgIGkgKz0gNDtcbiAgICAgICAgcmVzdWx0LnRpbWVzY2FsZSA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgICBpICs9IDg7XG4gICAgICAgIHJlc3VsdC5kdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKGkpOyAvLyB0cnVuY2F0aW5nIHRvcCA0IGJ5dGVzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQuY3JlYXRpb25UaW1lID0gcGFyc2VNcDREYXRlKHZpZXcuZ2V0VWludDMyKGkpKTtcbiAgICAgICAgaSArPSA0O1xuICAgICAgICByZXN1bHQubW9kaWZpY2F0aW9uVGltZSA9IHBhcnNlTXA0RGF0ZSh2aWV3LmdldFVpbnQzMihpKSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgICAgcmVzdWx0LnRpbWVzY2FsZSA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgICBpICs9IDQ7XG4gICAgICAgIHJlc3VsdC5kdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgfVxuICAgICAgaSArPSA0O1xuXG4gICAgICAvLyBjb252ZXJ0IGZpeGVkLXBvaW50LCBiYXNlIDE2IGJhY2sgdG8gYSBudW1iZXJcbiAgICAgIHJlc3VsdC5yYXRlID0gdmlldy5nZXRVaW50MTYoaSkgKyAodmlldy5nZXRVaW50MTYoaSArIDIpIC8gMTYpO1xuICAgICAgaSArPSA0O1xuICAgICAgcmVzdWx0LnZvbHVtZSA9IHZpZXcuZ2V0VWludDgoaSkgKyAodmlldy5nZXRVaW50OChpICsgMSkgLyA4KTtcbiAgICAgIGkgKz0gMjtcbiAgICAgIGkgKz0gMjtcbiAgICAgIGkgKz0gMiAqIDQ7XG4gICAgICByZXN1bHQubWF0cml4ID0gbmV3IFVpbnQzMkFycmF5KGRhdGEuc3ViYXJyYXkoaSwgaSArICg5ICogNCkpKTtcbiAgICAgIGkgKz0gOSAqIDQ7XG4gICAgICBpICs9IDYgKiA0O1xuICAgICAgcmVzdWx0Lm5leHRUcmFja0lkID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgcGRpbjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb246IHZpZXcuZ2V0VWludDgoMCksXG4gICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgcmF0ZTogdmlldy5nZXRVaW50MzIoNCksXG4gICAgICAgIGluaXRpYWxEZWxheTogdmlldy5nZXRVaW50MzIoOClcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZHRwOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXJcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgICAgICAgIHNhbXBsZXM6IFtdXG4gICAgICAgIH0sIGk7XG5cbiAgICAgIGZvciAoaSA9IDQ7IGkgPCBkYXRhLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQuc2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICBkZXBlbmRzT246IChkYXRhW2ldICYgMHgzMCkgPj4gNCxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IChkYXRhW2ldICYgMHgwYykgPj4gMixcbiAgICAgICAgICBoYXNSZWR1bmRhbmN5OiBkYXRhW2ldICYgMHgwM1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzaWR4OiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgICAgICByZWZlcmVuY2VzOiBbXSxcbiAgICAgICAgICAgIHJlZmVyZW5jZUlkOiB2aWV3LmdldFVpbnQzMig0KSxcbiAgICAgICAgICAgIHRpbWVzY2FsZTogdmlldy5nZXRVaW50MzIoOCksXG4gICAgICAgICAgICBlYXJsaWVzdFByZXNlbnRhdGlvblRpbWU6IHZpZXcuZ2V0VWludDMyKDEyKSxcbiAgICAgICAgICAgIGZpcnN0T2Zmc2V0OiB2aWV3LmdldFVpbnQzMigxNilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlZmVyZW5jZUNvdW50ID0gdmlldy5nZXRVaW50MTYoMjIpLFxuICAgICAgICAgIGk7XG5cbiAgICAgIGZvciAoaSA9IDI0OyByZWZlcmVuY2VDb3VudDsgaSArPSAxMiwgcmVmZXJlbmNlQ291bnQtLSkge1xuICAgICAgICByZXN1bHQucmVmZXJlbmNlcy5wdXNoKHtcbiAgICAgICAgICByZWZlcmVuY2VUeXBlOiAoZGF0YVtpXSAmIDB4ODApID4+PiA3LFxuICAgICAgICAgIHJlZmVyZW5jZWRTaXplOiB2aWV3LmdldFVpbnQzMihpKSAmIDB4N0ZGRkZGRkYsXG4gICAgICAgICAgc3Vic2VnbWVudER1cmF0aW9uOiB2aWV3LmdldFVpbnQzMihpICsgNCksXG4gICAgICAgICAgc3RhcnRzV2l0aFNhcDogISEoZGF0YVtpICsgOF0gJiAweDgwKSxcbiAgICAgICAgICBzYXBUeXBlOiAoZGF0YVtpICsgOF0gJiAweDcwKSA+Pj4gNCxcbiAgICAgICAgICBzYXBEZWx0YVRpbWU6IHZpZXcuZ2V0VWludDMyKGkgKyA4KSAmIDB4MEZGRkZGRkZcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzbWhkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgIGJhbGFuY2U6IGRhdGFbNF0gKyAoZGF0YVs1XSAvIDI1NilcbiAgICAgIH07XG4gICAgfSxcbiAgICBzdGJsOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib3hlczogaW5zcGVjdE1wNChkYXRhKVxuICAgICAgfTtcbiAgICB9LFxuICAgIHN0Y286IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhclxuICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCksXG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgICBjaHVua09mZnNldHM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGVudHJ5Q291bnQgPSB2aWV3LmdldFVpbnQzMig0KSxcbiAgICAgICAgaTtcbiAgICAgIGZvciAoaSA9IDg7IGVudHJ5Q291bnQ7IGkgKz0gNCwgZW50cnlDb3VudC0tKSB7XG4gICAgICAgIHJlc3VsdC5jaHVua09mZnNldHMucHVzaCh2aWV3LmdldFVpbnQzMihpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc3RzYzogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyXG4gICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKSxcbiAgICAgICAgZW50cnlDb3VudCA9IHZpZXcuZ2V0VWludDMyKDQpLFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgICAgc2FtcGxlVG9DaHVua3M6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGk7XG4gICAgICBmb3IgKGkgPSA4OyBlbnRyeUNvdW50OyBpICs9IDEyLCBlbnRyeUNvdW50LS0pIHtcbiAgICAgICAgcmVzdWx0LnNhbXBsZVRvQ2h1bmtzLnB1c2goe1xuICAgICAgICAgIGZpcnN0Q2h1bms6IHZpZXcuZ2V0VWludDMyKGkpLFxuICAgICAgICAgIHNhbXBsZXNQZXJDaHVuazogdmlldy5nZXRVaW50MzIoaSArIDQpLFxuICAgICAgICAgIHNhbXBsZURlc2NyaXB0aW9uSW5kZXg6IHZpZXcuZ2V0VWludDMyKGkgKyA4KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzdHNkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgIHNhbXBsZURlc2NyaXB0aW9uczogaW5zcGVjdE1wNChkYXRhLnN1YmFycmF5KDgpKVxuICAgICAgfTtcbiAgICB9LFxuICAgIHN0c3o6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhclxuICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCksXG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgICBzYW1wbGVTaXplOiB2aWV3LmdldFVpbnQzMig0KSxcbiAgICAgICAgICBlbnRyaWVzOiBbXVxuICAgICAgICB9LFxuICAgICAgICBpO1xuICAgICAgZm9yIChpID0gMTI7IGkgPCBkYXRhLmJ5dGVMZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICByZXN1bHQuZW50cmllcy5wdXNoKHZpZXcuZ2V0VWludDMyKGkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzdHRzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXJcbiAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgICAgdGltZVRvU2FtcGxlczogW11cbiAgICAgICAgfSxcbiAgICAgICAgZW50cnlDb3VudCA9IHZpZXcuZ2V0VWludDMyKDQpLFxuICAgICAgICBpO1xuXG4gICAgICBmb3IgKGkgPSA4OyBlbnRyeUNvdW50OyBpICs9IDgsIGVudHJ5Q291bnQtLSkge1xuICAgICAgICByZXN1bHQudGltZVRvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICBzYW1wbGVDb3VudDogdmlldy5nZXRVaW50MzIoaSksXG4gICAgICAgICAgc2FtcGxlRGVsdGE6IHZpZXcuZ2V0VWludDMyKGkgKyA0KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzdHlwOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcGFyc2UuZnR5cChkYXRhKTtcbiAgICB9LFxuICAgIHRmZHQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogZGF0YVs0XSA8PCAyNCB8IGRhdGFbNV0gPDwgMTYgfCBkYXRhWzZdIDw8IDggfCBkYXRhWzddXG4gICAgICB9O1xuICAgICAgaWYgKHJlc3VsdC52ZXJzaW9uID09PSAxKSB7XG4gICAgICAgIHJlc3VsdC5iYXNlTWVkaWFEZWNvZGVUaW1lICo9IE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgcmVzdWx0LmJhc2VNZWRpYURlY29kZVRpbWUgKz0gZGF0YVs4XSA8PCAyNCB8IGRhdGFbOV0gPDwgMTYgfCBkYXRhWzEwXSA8PCA4IHwgZGF0YVsxMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgdGZoZDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyXG4gICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKSxcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgICAgICAgIHRyYWNrSWQ6IHZpZXcuZ2V0VWludDMyKDQpXG4gICAgICAgIH0sXG4gICAgICAgIGJhc2VEYXRhT2Zmc2V0UHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDEsXG4gICAgICAgIHNhbXBsZURlc2NyaXB0aW9uSW5kZXhQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgwMixcbiAgICAgICAgZGVmYXVsdFNhbXBsZUR1cmF0aW9uUHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDgsXG4gICAgICAgIGRlZmF1bHRTYW1wbGVTaXplUHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MTAsXG4gICAgICAgIGRlZmF1bHRTYW1wbGVGbGFnc1ByZXNlbnQgPSByZXN1bHQuZmxhZ3NbMl0gJiAweDIwLFxuICAgICAgICBkdXJhdGlvbklzRW1wdHkgPSByZXN1bHQuZmxhZ3NbMF0gJiAweDAxMDAwMCxcbiAgICAgICAgZGVmYXVsdEJhc2VJc01vb2YgPSAgcmVzdWx0LmZsYWdzWzBdICYgMHgwMjAwMDAsXG4gICAgICAgIGk7XG5cbiAgICAgIGkgPSA4O1xuICAgICAgaWYgKGJhc2VEYXRhT2Zmc2V0UHJlc2VudCkge1xuICAgICAgICBpICs9IDQ7IC8vIHRydW5jYXRlIHRvcCA0IGJ5dGVzXG4gICAgICAgIC8vIEZJWE1FOiBzaG91bGQgd2UgcmVhZCB0aGUgZnVsbCA2NCBiaXRzP1xuICAgICAgICByZXN1bHQuYmFzZURhdGFPZmZzZXQgPSB2aWV3LmdldFVpbnQzMigxMik7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cbiAgICAgIGlmIChzYW1wbGVEZXNjcmlwdGlvbkluZGV4UHJlc2VudCkge1xuICAgICAgICByZXN1bHQuc2FtcGxlRGVzY3JpcHRpb25JbmRleCA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgICBpICs9IDQ7XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdFNhbXBsZUR1cmF0aW9uUHJlc2VudCkge1xuICAgICAgICByZXN1bHQuZGVmYXVsdFNhbXBsZUR1cmF0aW9uID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0U2FtcGxlU2l6ZVByZXNlbnQpIHtcbiAgICAgICAgcmVzdWx0LmRlZmF1bHRTYW1wbGVTaXplID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0U2FtcGxlRmxhZ3NQcmVzZW50KSB7XG4gICAgICAgIHJlc3VsdC5kZWZhdWx0U2FtcGxlRmxhZ3MgPSB2aWV3LmdldFVpbnQzMihpKTtcbiAgICAgIH1cbiAgICAgIGlmIChkdXJhdGlvbklzRW1wdHkpIHtcbiAgICAgICAgcmVzdWx0LmR1cmF0aW9uSXNFbXB0eSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWJhc2VEYXRhT2Zmc2V0UHJlc2VudCAmJiBkZWZhdWx0QmFzZUlzTW9vZikge1xuICAgICAgICByZXN1bHQuYmFzZURhdGFPZmZzZXRJc01vb2YgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHRraGQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhclxuICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCksXG4gICAgICAgIGkgPSA0LFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgdmVyc2lvbjogdmlldy5nZXRVaW50OCgwKSxcbiAgICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSlcbiAgICAgICAgfTtcbiAgICAgIGlmIChyZXN1bHQudmVyc2lvbiA9PT0gMSkge1xuICAgICAgICBpICs9IDQ7XG4gICAgICAgIHJlc3VsdC5jcmVhdGlvblRpbWUgPSBwYXJzZU1wNERhdGUodmlldy5nZXRVaW50MzIoaSkpOyAvLyB0cnVuY2F0aW5nIHRvcCA0IGJ5dGVzXG4gICAgICAgIGkgKz0gODtcbiAgICAgICAgcmVzdWx0Lm1vZGlmaWNhdGlvblRpbWUgPSBwYXJzZU1wNERhdGUodmlldy5nZXRVaW50MzIoaSkpOyAvLyB0cnVuY2F0aW5nIHRvcCA0IGJ5dGVzXG4gICAgICAgIGkgKz0gNDtcbiAgICAgICAgcmVzdWx0LnRyYWNrSWQgPSB2aWV3LmdldFVpbnQzMihpKTtcbiAgICAgICAgaSArPSA0O1xuICAgICAgICBpICs9IDg7XG4gICAgICAgIHJlc3VsdC5kdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKGkpOyAvLyB0cnVuY2F0aW5nIHRvcCA0IGJ5dGVzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQuY3JlYXRpb25UaW1lID0gcGFyc2VNcDREYXRlKHZpZXcuZ2V0VWludDMyKGkpKTtcbiAgICAgICAgaSArPSA0O1xuICAgICAgICByZXN1bHQubW9kaWZpY2F0aW9uVGltZSA9IHBhcnNlTXA0RGF0ZSh2aWV3LmdldFVpbnQzMihpKSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgICAgcmVzdWx0LnRyYWNrSWQgPSB2aWV3LmdldFVpbnQzMihpKTtcbiAgICAgICAgaSArPSA0O1xuICAgICAgICBpICs9IDQ7XG4gICAgICAgIHJlc3VsdC5kdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgfVxuICAgICAgaSArPSA0O1xuICAgICAgaSArPSAyICogNDtcbiAgICAgIHJlc3VsdC5sYXllciA9IHZpZXcuZ2V0VWludDE2KGkpO1xuICAgICAgaSArPSAyO1xuICAgICAgcmVzdWx0LmFsdGVybmF0ZUdyb3VwID0gdmlldy5nZXRVaW50MTYoaSk7XG4gICAgICBpICs9IDI7XG4gICAgICAvLyBjb252ZXJ0IGZpeGVkLXBvaW50LCBiYXNlIDE2IGJhY2sgdG8gYSBudW1iZXJcbiAgICAgIHJlc3VsdC52b2x1bWUgPSB2aWV3LmdldFVpbnQ4KGkpICsgKHZpZXcuZ2V0VWludDgoaSArIDEpIC8gOCk7XG4gICAgICBpICs9IDI7XG4gICAgICBpICs9IDI7XG4gICAgICByZXN1bHQubWF0cml4ID0gbmV3IFVpbnQzMkFycmF5KGRhdGEuc3ViYXJyYXkoaSwgaSArICg5ICogNCkpKTtcbiAgICAgIGkgKz0gOSAqIDQ7XG4gICAgICByZXN1bHQud2lkdGggPSB2aWV3LmdldFVpbnQxNihpKSArICh2aWV3LmdldFVpbnQxNihpICsgMikgLyAxNik7XG4gICAgICBpICs9IDQ7XG4gICAgICByZXN1bHQuaGVpZ2h0ID0gdmlldy5nZXRVaW50MTYoaSkgKyAodmlldy5nZXRVaW50MTYoaSArIDIpIC8gMTYpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHRyYWY6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJveGVzOiBpbnNwZWN0TXA0KGRhdGEpXG4gICAgICB9O1xuICAgIH0sXG4gICAgdHJhazogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm94ZXM6IGluc3BlY3RNcDQoZGF0YSlcbiAgICAgIH07XG4gICAgfSxcbiAgICB0cmV4OiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgICAgICB0cmFja0lkOiB2aWV3LmdldFVpbnQzMig0KSxcbiAgICAgICAgZGVmYXVsdFNhbXBsZURlc2NyaXB0aW9uSW5kZXg6IHZpZXcuZ2V0VWludDMyKDgpLFxuICAgICAgICBkZWZhdWx0U2FtcGxlRHVyYXRpb246IHZpZXcuZ2V0VWludDMyKDEyKSxcbiAgICAgICAgZGVmYXVsdFNhbXBsZVNpemU6IHZpZXcuZ2V0VWludDMyKDE2KSxcbiAgICAgICAgc2FtcGxlRGVwZW5kc09uOiBkYXRhWzIwXSAmIDB4MDMsXG4gICAgICAgIHNhbXBsZUlzRGVwZW5kZWRPbjogKGRhdGFbMjFdICYgMHhjMCkgPj4gNixcbiAgICAgICAgc2FtcGxlSGFzUmVkdW5kYW5jeTogKGRhdGFbMjFdICYgMHgzMCkgPj4gNCxcbiAgICAgICAgc2FtcGxlUGFkZGluZ1ZhbHVlOiAoZGF0YVsyMV0gJiAweDBlKSA+PiAxLFxuICAgICAgICBzYW1wbGVJc0RpZmZlcmVuY2VTYW1wbGU6ICEhKGRhdGFbMjFdICYgMHgwMSksXG4gICAgICAgIHNhbXBsZURlZ3JhZGF0aW9uUHJpb3JpdHk6IHZpZXcuZ2V0VWludDE2KDIyKVxuICAgICAgfTtcbiAgICB9LFxuICAgIHRydW46IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhclxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgICAgc2FtcGxlczogW11cbiAgICAgICAgfSxcbiAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgICAgICAvLyBGbGFnIGludGVycHJldGF0aW9uXG4gICAgICAgIGRhdGFPZmZzZXRQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgwMSwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MVxuICAgICAgICBmaXJzdFNhbXBsZUZsYWdzUHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDQsIC8vIGNvbXBhcmUgd2l0aCAybmQgYnl0ZSBvZiAweDRcbiAgICAgICAgc2FtcGxlRHVyYXRpb25QcmVzZW50ID0gcmVzdWx0LmZsYWdzWzFdICYgMHgwMSwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MTAwXG4gICAgICAgIHNhbXBsZVNpemVQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzFdICYgMHgwMiwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MjAwXG4gICAgICAgIHNhbXBsZUZsYWdzUHJlc2VudCA9IHJlc3VsdC5mbGFnc1sxXSAmIDB4MDQsIC8vIGNvbXBhcmUgd2l0aCAybmQgYnl0ZSBvZiAweDQwMFxuICAgICAgICBzYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXRQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzFdICYgMHgwOCwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4ODAwXG4gICAgICAgIHNhbXBsZUNvdW50ID0gdmlldy5nZXRVaW50MzIoNCksXG4gICAgICAgIG9mZnNldCA9IDgsXG4gICAgICAgIHNhbXBsZTtcblxuICAgICAgaWYgKGRhdGFPZmZzZXRQcmVzZW50KSB7XG4gICAgICAgIC8vIDMyIGJpdCBzaWduZWQgaW50ZWdlclxuICAgICAgICByZXN1bHQuZGF0YU9mZnNldCA9IHZpZXcuZ2V0SW50MzIob2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICB9XG5cbiAgICAgIC8vIE92ZXJyaWRlcyB0aGUgZmxhZ3MgZm9yIHRoZSBmaXJzdCBzYW1wbGUgb25seS4gVGhlIG9yZGVyIG9mXG4gICAgICAvLyBvcHRpb25hbCB2YWx1ZXMgd2lsbCBiZTogZHVyYXRpb24sIHNpemUsIGNvbXBvc2l0aW9uVGltZU9mZnNldFxuICAgICAgaWYgKGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50ICYmIHNhbXBsZUNvdW50KSB7XG4gICAgICAgIHNhbXBsZSA9IHtcbiAgICAgICAgICBmbGFnczogcGFyc2VTYW1wbGVGbGFncyhkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgNCkpXG4gICAgICAgIH07XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICBpZiAoc2FtcGxlRHVyYXRpb25QcmVzZW50KSB7XG4gICAgICAgICAgc2FtcGxlLmR1cmF0aW9uID0gdmlldy5nZXRVaW50MzIob2Zmc2V0KTtcbiAgICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FtcGxlU2l6ZVByZXNlbnQpIHtcbiAgICAgICAgICBzYW1wbGUuc2l6ZSA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgICAvLyBOb3RlOiB0aGlzIHNob3VsZCBiZSBhIHNpZ25lZCBpbnQgaWYgdmVyc2lvbiBpcyAxXG4gICAgICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgICBzYW1wbGVDb3VudC0tO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoc2FtcGxlQ291bnQtLSkge1xuICAgICAgICBzYW1wbGUgPSB7fTtcbiAgICAgICAgaWYgKHNhbXBsZUR1cmF0aW9uUHJlc2VudCkge1xuICAgICAgICAgIHNhbXBsZS5kdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhbXBsZVNpemVQcmVzZW50KSB7XG4gICAgICAgICAgc2FtcGxlLnNpemUgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1wbGVGbGFnc1ByZXNlbnQpIHtcbiAgICAgICAgICBzYW1wbGUuZmxhZ3MgPSBwYXJzZVNhbXBsZUZsYWdzKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyA0KSk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgICAvLyBOb3RlOiB0aGlzIHNob3VsZCBiZSBhIHNpZ25lZCBpbnQgaWYgdmVyc2lvbiBpcyAxXG4gICAgICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgICd1cmwgJzogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICAgICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpXG4gICAgICB9O1xuICAgIH0sXG4gICAgdm1oZDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgZ3JhcGhpY3Ntb2RlOiB2aWV3LmdldFVpbnQxNig0KSxcbiAgICAgICAgb3Bjb2xvcjogbmV3IFVpbnQxNkFycmF5KFt2aWV3LmdldFVpbnQxNig2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmdldFVpbnQxNig4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmdldFVpbnQxNigxMCldKVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cblxuLyoqXG4gKiBSZXR1cm4gYSBqYXZhc2NyaXB0IGFycmF5IG9mIGJveCBvYmplY3RzIHBhcnNlZCBmcm9tIGFuIElTTyBiYXNlXG4gKiBtZWRpYSBmaWxlLlxuICogQHBhcmFtIGRhdGEge1VpbnQ4QXJyYXl9IHRoZSBiaW5hcnkgZGF0YSBvZiB0aGUgbWVkaWEgdG8gYmUgaW5zcGVjdGVkXG4gKiBAcmV0dXJuIHthcnJheX0gYSBqYXZhc2NyaXB0IGFycmF5IG9mIHBvdGVudGlhbGx5IG5lc3RlZCBib3ggb2JqZWN0c1xuICovXG5pbnNwZWN0TXA0ID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXJcbiAgICBpID0gMCxcbiAgICByZXN1bHQgPSBbXSxcbiAgICB2aWV3LFxuICAgIHNpemUsXG4gICAgdHlwZSxcbiAgICBlbmQsXG4gICAgYm94O1xuXG4gIC8vIENvbnZlcnQgZGF0YSBmcm9tIFVpbnQ4QXJyYXkgdG8gQXJyYXlCdWZmZXIsIHRvIGZvbGxvdyBEYXRhdmlldyBBUElcbiAgdmFyIGFiID0gbmV3IEFycmF5QnVmZmVyKGRhdGEubGVuZ3RoKTtcbiAgdmFyIHYgPSBuZXcgVWludDhBcnJheShhYik7XG4gIGZvciAodmFyIHogPSAwOyB6IDwgZGF0YS5sZW5ndGg7ICsreikge1xuICAgICAgdlt6XSA9IGRhdGFbel07XG4gIH1cbiAgdmlldyA9IG5ldyBEYXRhVmlldyhhYik7XG5cbiAgd2hpbGUgKGkgPCBkYXRhLmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBwYXJzZSBib3ggZGF0YVxuICAgIHNpemUgPSB2aWV3LmdldFVpbnQzMihpKTtcbiAgICB0eXBlID0gIHBhcnNlVHlwZShkYXRhLnN1YmFycmF5KGkgKyA0LCBpICsgOCkpO1xuICAgIGVuZCA9IHNpemUgPiAxID8gaSArIHNpemUgOiBkYXRhLmJ5dGVMZW5ndGg7XG5cbiAgICAvLyBwYXJzZSB0eXBlLXNwZWNpZmljIGRhdGFcbiAgICBib3ggPSAocGFyc2VbdHlwZV0gfHwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfTtcbiAgICB9KShkYXRhLnN1YmFycmF5KGkgKyA4LCBlbmQpKTtcbiAgICBib3guc2l6ZSA9IHNpemU7XG4gICAgYm94LnR5cGUgPSB0eXBlO1xuXG4gICAgLy8gc3RvcmUgdGhpcyBib3ggYW5kIG1vdmUgdG8gdGhlIG5leHRcbiAgICByZXN1bHQucHVzaChib3gpO1xuICAgIGkgPSBlbmQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGphdmFzY3JpcHQgcmVwcmVzdGVudGF0aW9uXG4gKiBvZiBhbiBNUDQgZmlsZS4gWW91IGNhbiB1c2UgaXQgYXMgYW4gYWx0ZXJuYXRpdmUgdG9cbiAqIEpTT04uc3RyaW5naWZ5KCkgdG8gY29tcGFyZSBpbnNwZWN0ZWQgTVA0cy5cbiAqIEBwYXJhbSBpbnNwZWN0ZWRNcDQge2FycmF5fSB0aGUgcGFyc2VkIGFycmF5IG9mIGJveGVzIGluIGFuIE1QNFxuICogZmlsZVxuICogQHBhcmFtIGRlcHRoIHtudW1iZXJ9IChvcHRpb25hbCkgdGhlIG51bWJlciBvZiBhbmNlc3RvciBib3hlcyBvZlxuICogdGhlIGVsZW1lbnRzIG9mIGluc3BlY3RlZE1wNC4gQXNzdW1lZCB0byBiZSB6ZXJvIGlmIHVuc3BlY2lmaWVkLlxuICogQHJldHVybiB7c3RyaW5nfSBhIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBhcnNlZCBNUDRcbiAqL1xudGV4dGlmeU1wNCA9IGZ1bmN0aW9uKGluc3BlY3RlZE1wNCwgZGVwdGgpIHtcbiAgdmFyIGluZGVudDtcbiAgZGVwdGggPSBkZXB0aCB8fCAwO1xuICBpbmRlbnQgPSBuZXcgQXJyYXkoZGVwdGggKiAyICsgMSkuam9pbignICcpO1xuXG4gIC8vIGl0ZXJhdGUgb3ZlciBhbGwgdGhlIGJveGVzXG4gIHJldHVybiBpbnNwZWN0ZWRNcDQubWFwKGZ1bmN0aW9uKGJveCwgaW5kZXgpIHtcblxuICAgIC8vIGxpc3QgdGhlIGJveCB0eXBlIGZpcnN0IGF0IHRoZSBjdXJyZW50IGluZGVudGF0aW9uIGxldmVsXG4gICAgcmV0dXJuIGluZGVudCArIGJveC50eXBlICsgJ1xcbicgK1xuXG4gICAgICAvLyB0aGUgdHlwZSBpcyBhbHJlYWR5IGluY2x1ZGVkIGFuZCBoYW5kbGUgY2hpbGQgYm94ZXMgc2VwYXJhdGVseVxuICAgICAgT2JqZWN0LmtleXMoYm94KS5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgIT09ICd0eXBlJyAmJiBrZXkgIT09ICdib3hlcyc7XG5cbiAgICAgIC8vIG91dHB1dCBhbGwgdGhlIGJveCBwcm9wZXJ0aWVzXG4gICAgICB9KS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBwcmVmaXggPSBpbmRlbnQgKyAnICAnICsga2V5ICsgJzogJyxcbiAgICAgICAgICAgIHZhbHVlID0gYm94W2tleV07XG5cbiAgICAgICAgLy8gcHJpbnQgb3V0IHJhdyBieXRlcyBhcyBoZXhhZGVtaWNhbFxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IHZhbHVlIGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHtcbiAgICAgICAgICB2YXIgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuZXcgVWludDhBcnJheSh2YWx1ZS5idWZmZXIsIHZhbHVlLmJ5dGVPZmZzZXQsIHZhbHVlLmJ5dGVMZW5ndGgpKVxuICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGJ5dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyAnICsgKCcwMCcgKyBieXRlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgICAgICAgICB9KS5qb2luKCcnKS5tYXRjaCgvLnsxLDI0fS9nKTtcbiAgICAgICAgICBpZiAoIWJ5dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJzw+JztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArICc8JyArIGJ5dGVzLmpvaW4oJycpLnNsaWNlKDEpICsgJz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJzxcXG4nICsgYnl0ZXMubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRlbnQgKyAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKSArICdcXG4nICsgaW5kZW50ICsgJyAgPic7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpbmdpZnkgZ2VuZXJpYyBvYmplY3RzXG4gICAgICAgIHJldHVybiBwcmVmaXggK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIDIpXG4gICAgICAgICAgICAgIC5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGVudCArICcgICcgKyBsaW5lO1xuICAgICAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgIH0pLmpvaW4oJ1xcbicpICtcblxuICAgIC8vIHJlY3Vyc2l2ZWx5IHRleHRpZnkgdGhlIGNoaWxkIGJveGVzXG4gICAgKGJveC5ib3hlcyA/ICdcXG4nICsgdGV4dGlmeU1wNChib3guYm94ZXMsIGRlcHRoICsgMSkgOiAnJyk7XG4gIH0pLmpvaW4oJ1xcbicpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluc3BlY3Q6IGluc3BlY3RNcDQsXG4gIHRleHRpZnk6IHRleHRpZnlNcDQsXG4gIHBhcnNlVGZkdDogcGFyc2UudGZkdCxcbiAgcGFyc2VIZGxyOiBwYXJzZS5oZGxyLFxuICBwYXJzZVRmaGQ6IHBhcnNlLnRmaGQsXG4gIHBhcnNlVHJ1bjogcGFyc2UudHJ1bixcbiAgcGFyc2VTaWR4OiBwYXJzZS5zaWR4XG59O1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBQYXJzZSBtcGVnMiB0cmFuc3BvcnQgc3RyZWFtIHBhY2tldHMgdG8gZXh0cmFjdCBiYXNpYyB0aW1pbmcgaW5mb3JtYXRpb25cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3RyZWFtVHlwZXMgPSByZXF1aXJlKCcuLi9tMnRzL3N0cmVhbS10eXBlcy5qcycpO1xudmFyIGhhbmRsZVJvbGxvdmVyID0gcmVxdWlyZSgnLi4vbTJ0cy90aW1lc3RhbXAtcm9sbG92ZXItc3RyZWFtLmpzJykuaGFuZGxlUm9sbG92ZXI7XG52YXIgcHJvYmUgPSB7fTtcbnByb2JlLnRzID0gcmVxdWlyZSgnLi4vbTJ0cy9wcm9iZS5qcycpO1xucHJvYmUuYWFjID0gcmVxdWlyZSgnLi4vYWFjL3V0aWxzLmpzJyk7XG52YXIgT05FX1NFQ09ORF9JTl9UUyA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nsb2NrJykuT05FX1NFQ09ORF9JTl9UUztcblxudmFyXG4gIE1QMlRfUEFDS0VUX0xFTkdUSCA9IDE4OCwgLy8gYnl0ZXNcbiAgU1lOQ19CWVRFID0gMHg0NztcblxuLyoqXG4gKiB3YWxrcyB0aHJvdWdoIHNlZ21lbnQgZGF0YSBsb29raW5nIGZvciBwYXQgYW5kIHBtdCBwYWNrZXRzIHRvIHBhcnNlIG91dFxuICogcHJvZ3JhbSBtYXAgdGFibGUgaW5mb3JtYXRpb25cbiAqL1xudmFyIHBhcnNlUHNpXyA9IGZ1bmN0aW9uKGJ5dGVzLCBwbXQpIHtcbiAgdmFyXG4gICAgc3RhcnRJbmRleCA9IDAsXG4gICAgZW5kSW5kZXggPSBNUDJUX1BBQ0tFVF9MRU5HVEgsXG4gICAgcGFja2V0LCB0eXBlO1xuXG4gIHdoaWxlIChlbmRJbmRleCA8IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBMb29rIGZvciBhIHBhaXIgb2Ygc3RhcnQgYW5kIGVuZCBzeW5jIGJ5dGVzIGluIHRoZSBkYXRhLi5cbiAgICBpZiAoYnl0ZXNbc3RhcnRJbmRleF0gPT09IFNZTkNfQllURSAmJiBieXRlc1tlbmRJbmRleF0gPT09IFNZTkNfQllURSkge1xuICAgICAgLy8gV2UgZm91bmQgYSBwYWNrZXRcbiAgICAgIHBhY2tldCA9IGJ5dGVzLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgIHR5cGUgPSBwcm9iZS50cy5wYXJzZVR5cGUocGFja2V0LCBwbXQucGlkKTtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3BhdCc6XG4gICAgICAgICAgaWYgKCFwbXQucGlkKSB7XG4gICAgICAgICAgICBwbXQucGlkID0gcHJvYmUudHMucGFyc2VQYXQocGFja2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BtdCc6XG4gICAgICAgICAgaWYgKCFwbXQudGFibGUpIHtcbiAgICAgICAgICAgIHBtdC50YWJsZSA9IHByb2JlLnRzLnBhcnNlUG10KHBhY2tldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3VuZCB0aGUgcGF0IGFuZCBwbXQsIHdlIGNhbiBzdG9wIHdhbGtpbmcgdGhlIHNlZ21lbnRcbiAgICAgIGlmIChwbXQucGlkICYmIHBtdC50YWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0SW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgZW5kSW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgLy8gYSBwYWNrZXRcbiAgICBzdGFydEluZGV4Kys7XG4gICAgZW5kSW5kZXgrKztcbiAgfVxufTtcblxuLyoqXG4gKiB3YWxrcyB0aHJvdWdoIHRoZSBzZWdtZW50IGRhdGEgZnJvbSB0aGUgc3RhcnQgYW5kIGVuZCB0byBnZXQgdGltaW5nIGluZm9ybWF0aW9uXG4gKiBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IGF1ZGlvIHBlcyBwYWNrZXRzXG4gKi9cbnZhciBwYXJzZUF1ZGlvUGVzXyA9IGZ1bmN0aW9uKGJ5dGVzLCBwbXQsIHJlc3VsdCkge1xuICB2YXJcbiAgICBzdGFydEluZGV4ID0gMCxcbiAgICBlbmRJbmRleCA9IE1QMlRfUEFDS0VUX0xFTkdUSCxcbiAgICBwYWNrZXQsIHR5cGUsIHBlc1R5cGUsIHB1c2ksIHBhcnNlZDtcblxuICB2YXIgZW5kTG9vcCA9IGZhbHNlO1xuXG4gIC8vIFN0YXJ0IHdhbGtpbmcgZnJvbSBzdGFydCBvZiBzZWdtZW50IHRvIGdldCBmaXJzdCBhdWRpbyBwYWNrZXRcbiAgd2hpbGUgKGVuZEluZGV4IDw9IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBMb29rIGZvciBhIHBhaXIgb2Ygc3RhcnQgYW5kIGVuZCBzeW5jIGJ5dGVzIGluIHRoZSBkYXRhLi5cbiAgICBpZiAoYnl0ZXNbc3RhcnRJbmRleF0gPT09IFNZTkNfQllURSAmJlxuICAgICAgICAoYnl0ZXNbZW5kSW5kZXhdID09PSBTWU5DX0JZVEUgfHwgZW5kSW5kZXggPT09IGJ5dGVzLmJ5dGVMZW5ndGgpKSB7XG4gICAgICAvLyBXZSBmb3VuZCBhIHBhY2tldFxuICAgICAgcGFja2V0ID0gYnl0ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgdHlwZSA9IHByb2JlLnRzLnBhcnNlVHlwZShwYWNrZXQsIHBtdC5waWQpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAncGVzJzpcbiAgICAgICAgICBwZXNUeXBlID0gcHJvYmUudHMucGFyc2VQZXNUeXBlKHBhY2tldCwgcG10LnRhYmxlKTtcbiAgICAgICAgICBwdXNpID0gcHJvYmUudHMucGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKHBhY2tldCk7XG4gICAgICAgICAgaWYgKHBlc1R5cGUgPT09ICdhdWRpbycgJiYgcHVzaSkge1xuICAgICAgICAgICAgcGFyc2VkID0gcHJvYmUudHMucGFyc2VQZXNUaW1lKHBhY2tldCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICAgIHBhcnNlZC50eXBlID0gJ2F1ZGlvJztcbiAgICAgICAgICAgICAgcmVzdWx0LmF1ZGlvLnB1c2gocGFyc2VkKTtcbiAgICAgICAgICAgICAgZW5kTG9vcCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kTG9vcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc3RhcnRJbmRleCArPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBlbmRJbmRleCArPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBzb21laG93IGJlY29tZSBkZS1zeW5jaHJvbml6ZWQgYW5kIHdlIG5lZWQgdG8gc3RlcFxuICAgIC8vIGZvcndhcmQgb25lIGJ5dGUgYXQgYSB0aW1lIHVudGlsIHdlIGZpbmQgYSBwYWlyIG9mIHN5bmMgYnl0ZXMgdGhhdCBkZW5vdGVcbiAgICAvLyBhIHBhY2tldFxuICAgIHN0YXJ0SW5kZXgrKztcbiAgICBlbmRJbmRleCsrO1xuICB9XG5cbiAgLy8gU3RhcnQgd2Fsa2luZyBmcm9tIGVuZCBvZiBzZWdtZW50IHRvIGdldCBsYXN0IGF1ZGlvIHBhY2tldFxuICBlbmRJbmRleCA9IGJ5dGVzLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0SW5kZXggPSBlbmRJbmRleCAtIE1QMlRfUEFDS0VUX0xFTkdUSDtcbiAgZW5kTG9vcCA9IGZhbHNlO1xuICB3aGlsZSAoc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgLy8gTG9vayBmb3IgYSBwYWlyIG9mIHN0YXJ0IGFuZCBlbmQgc3luYyBieXRlcyBpbiB0aGUgZGF0YS4uXG4gICAgaWYgKGJ5dGVzW3N0YXJ0SW5kZXhdID09PSBTWU5DX0JZVEUgJiZcbiAgICAgICAgKGJ5dGVzW2VuZEluZGV4XSA9PT0gU1lOQ19CWVRFIHx8IGVuZEluZGV4ID09PSBieXRlcy5ieXRlTGVuZ3RoKSkge1xuICAgICAgLy8gV2UgZm91bmQgYSBwYWNrZXRcbiAgICAgIHBhY2tldCA9IGJ5dGVzLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgIHR5cGUgPSBwcm9iZS50cy5wYXJzZVR5cGUocGFja2V0LCBwbXQucGlkKTtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3Blcyc6XG4gICAgICAgICAgcGVzVHlwZSA9IHByb2JlLnRzLnBhcnNlUGVzVHlwZShwYWNrZXQsIHBtdC50YWJsZSk7XG4gICAgICAgICAgcHVzaSA9IHByb2JlLnRzLnBhcnNlUGF5bG9hZFVuaXRTdGFydEluZGljYXRvcihwYWNrZXQpO1xuICAgICAgICAgIGlmIChwZXNUeXBlID09PSAnYXVkaW8nICYmIHB1c2kpIHtcbiAgICAgICAgICAgIHBhcnNlZCA9IHByb2JlLnRzLnBhcnNlUGVzVGltZShwYWNrZXQpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICBwYXJzZWQudHlwZSA9ICdhdWRpbyc7XG4gICAgICAgICAgICAgIHJlc3VsdC5hdWRpby5wdXNoKHBhcnNlZCk7XG4gICAgICAgICAgICAgIGVuZExvb3AgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZExvb3ApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0SW5kZXggLT0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgZW5kSW5kZXggLT0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgLy8gYSBwYWNrZXRcbiAgICBzdGFydEluZGV4LS07XG4gICAgZW5kSW5kZXgtLTtcbiAgfVxufTtcblxuLyoqXG4gKiB3YWxrcyB0aHJvdWdoIHRoZSBzZWdtZW50IGRhdGEgZnJvbSB0aGUgc3RhcnQgYW5kIGVuZCB0byBnZXQgdGltaW5nIGluZm9ybWF0aW9uXG4gKiBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IHZpZGVvIHBlcyBwYWNrZXRzIGFzIHdlbGwgYXMgdGltaW5nIGluZm9ybWF0aW9uIGZvciB0aGUgZmlyc3RcbiAqIGtleSBmcmFtZS5cbiAqL1xudmFyIHBhcnNlVmlkZW9QZXNfID0gZnVuY3Rpb24oYnl0ZXMsIHBtdCwgcmVzdWx0KSB7XG4gIHZhclxuICAgIHN0YXJ0SW5kZXggPSAwLFxuICAgIGVuZEluZGV4ID0gTVAyVF9QQUNLRVRfTEVOR1RILFxuICAgIHBhY2tldCwgdHlwZSwgcGVzVHlwZSwgcHVzaSwgcGFyc2VkLCBmcmFtZSwgaSwgcGVzO1xuXG4gIHZhciBlbmRMb29wID0gZmFsc2U7XG5cbiAgdmFyIGN1cnJlbnRGcmFtZSA9IHtcbiAgICBkYXRhOiBbXSxcbiAgICBzaXplOiAwXG4gIH07XG5cbiAgLy8gU3RhcnQgd2Fsa2luZyBmcm9tIHN0YXJ0IG9mIHNlZ21lbnQgdG8gZ2V0IGZpcnN0IHZpZGVvIHBhY2tldFxuICB3aGlsZSAoZW5kSW5kZXggPCBieXRlcy5ieXRlTGVuZ3RoKSB7XG4gICAgLy8gTG9vayBmb3IgYSBwYWlyIG9mIHN0YXJ0IGFuZCBlbmQgc3luYyBieXRlcyBpbiB0aGUgZGF0YS4uXG4gICAgaWYgKGJ5dGVzW3N0YXJ0SW5kZXhdID09PSBTWU5DX0JZVEUgJiYgYnl0ZXNbZW5kSW5kZXhdID09PSBTWU5DX0JZVEUpIHtcbiAgICAgIC8vIFdlIGZvdW5kIGEgcGFja2V0XG4gICAgICBwYWNrZXQgPSBieXRlcy5zdWJhcnJheShzdGFydEluZGV4LCBlbmRJbmRleCk7XG4gICAgICB0eXBlID0gcHJvYmUudHMucGFyc2VUeXBlKHBhY2tldCwgcG10LnBpZCk7XG5cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdwZXMnOlxuICAgICAgICAgIHBlc1R5cGUgPSBwcm9iZS50cy5wYXJzZVBlc1R5cGUocGFja2V0LCBwbXQudGFibGUpO1xuICAgICAgICAgIHB1c2kgPSBwcm9iZS50cy5wYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IocGFja2V0KTtcbiAgICAgICAgICBpZiAocGVzVHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgaWYgKHB1c2kgJiYgIWVuZExvb3ApIHtcbiAgICAgICAgICAgICAgcGFyc2VkID0gcHJvYmUudHMucGFyc2VQZXNUaW1lKHBhY2tldCk7XG4gICAgICAgICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQudHlwZSA9ICd2aWRlbyc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnZpZGVvLnB1c2gocGFyc2VkKTtcbiAgICAgICAgICAgICAgICBlbmRMb29wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuZmlyc3RLZXlGcmFtZSkge1xuICAgICAgICAgICAgICBpZiAocHVzaSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUuc2l6ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgZnJhbWUgPSBuZXcgVWludDhBcnJheShjdXJyZW50RnJhbWUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50RnJhbWUuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVzID0gY3VycmVudEZyYW1lLmRhdGEuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWUuc2V0KHBlcywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gcGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocHJvYmUudHMudmlkZW9QYWNrZXRDb250YWluc0tleUZyYW1lKGZyYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RLZXlGcmFtZSA9IHByb2JlLnRzLnBhcnNlUGVzVGltZShmcmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUFRTL0RUUyBtYXkgbm90IGJlIGF2YWlsYWJsZS4gU2ltcGx5ICpub3QqIHNldHRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGtleWZyYW1lIHNlZW1zIHRvIHdvcmsgZmluZSB3aXRoIEhMUyBwbGF5YmFja1xuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgZGVmaW5pdGVseSBwcmVmZXJhYmxlIHRvIGEgY3Jhc2ggd2l0aCBUeXBlRXJyb3IuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0S2V5RnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZmlyc3RLZXlGcmFtZSA9IGZpcnN0S2V5RnJhbWU7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmZpcnN0S2V5RnJhbWUudHlwZSA9ICd2aWRlbyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBleHRyYWN0IFBUUy9EVFMgZnJvbSBQRVMgYXQgZmlyc3Qga2V5ZnJhbWUuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1RoaXMgY291bGQgYmUgYW4gdW51c3VhbCBUUyBzZWdtZW50LCBvciBlbHNlIG11eC5qcyBkaWQgbm90ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcnNlIHlvdXIgVFMgc2VnbWVudCBjb3JyZWN0bHkuIElmIHlvdSBrbm93IHlvdXIgVFMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2VnbWVudHMgZG8gY29udGFpbiBQVFMvRFRTIG9uIGtleWZyYW1lcyBwbGVhc2UgZmlsZSBhIGJ1ZyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXBvcnQhIFlvdSBjYW4gdHJ5IGZmcHJvYmUgdG8gZG91YmxlIGNoZWNrIGZvciB5b3Vyc2VsZi4nXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3VycmVudEZyYW1lLnNpemUgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjdXJyZW50RnJhbWUuZGF0YS5wdXNoKHBhY2tldCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGcmFtZS5zaXplICs9IHBhY2tldC5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZExvb3AgJiYgcmVzdWx0LmZpcnN0S2V5RnJhbWUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0SW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgZW5kSW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgLy8gYSBwYWNrZXRcbiAgICBzdGFydEluZGV4Kys7XG4gICAgZW5kSW5kZXgrKztcbiAgfVxuXG4gIC8vIFN0YXJ0IHdhbGtpbmcgZnJvbSBlbmQgb2Ygc2VnbWVudCB0byBnZXQgbGFzdCB2aWRlbyBwYWNrZXRcbiAgZW5kSW5kZXggPSBieXRlcy5ieXRlTGVuZ3RoO1xuICBzdGFydEluZGV4ID0gZW5kSW5kZXggLSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gIGVuZExvb3AgPSBmYWxzZTtcbiAgd2hpbGUgKHN0YXJ0SW5kZXggPj0gMCkge1xuICAgIC8vIExvb2sgZm9yIGEgcGFpciBvZiBzdGFydCBhbmQgZW5kIHN5bmMgYnl0ZXMgaW4gdGhlIGRhdGEuLlxuICAgIGlmIChieXRlc1tzdGFydEluZGV4XSA9PT0gU1lOQ19CWVRFICYmIGJ5dGVzW2VuZEluZGV4XSA9PT0gU1lOQ19CWVRFKSB7XG4gICAgICAvLyBXZSBmb3VuZCBhIHBhY2tldFxuICAgICAgcGFja2V0ID0gYnl0ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgdHlwZSA9IHByb2JlLnRzLnBhcnNlVHlwZShwYWNrZXQsIHBtdC5waWQpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAncGVzJzpcbiAgICAgICAgICBwZXNUeXBlID0gcHJvYmUudHMucGFyc2VQZXNUeXBlKHBhY2tldCwgcG10LnRhYmxlKTtcbiAgICAgICAgICBwdXNpID0gcHJvYmUudHMucGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKHBhY2tldCk7XG4gICAgICAgICAgaWYgKHBlc1R5cGUgPT09ICd2aWRlbycgJiYgcHVzaSkge1xuICAgICAgICAgICAgICBwYXJzZWQgPSBwcm9iZS50cy5wYXJzZVBlc1RpbWUocGFja2V0KTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50eXBlID0gJ3ZpZGVvJztcbiAgICAgICAgICAgICAgICByZXN1bHQudmlkZW8ucHVzaChwYXJzZWQpO1xuICAgICAgICAgICAgICAgIGVuZExvb3AgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kTG9vcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc3RhcnRJbmRleCAtPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBlbmRJbmRleCAtPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBzb21laG93IGJlY29tZSBkZS1zeW5jaHJvbml6ZWQgYW5kIHdlIG5lZWQgdG8gc3RlcFxuICAgIC8vIGZvcndhcmQgb25lIGJ5dGUgYXQgYSB0aW1lIHVudGlsIHdlIGZpbmQgYSBwYWlyIG9mIHN5bmMgYnl0ZXMgdGhhdCBkZW5vdGVcbiAgICAvLyBhIHBhY2tldFxuICAgIHN0YXJ0SW5kZXgtLTtcbiAgICBlbmRJbmRleC0tO1xuICB9XG59O1xuXG4vKipcbiAqIEFkanVzdHMgdGhlIHRpbWVzdGFtcCBpbmZvcm1hdGlvbiBmb3IgdGhlIHNlZ21lbnQgdG8gYWNjb3VudCBmb3JcbiAqIHJvbGxvdmVyIGFuZCBjb252ZXJ0IHRvIHNlY29uZHMgYmFzZWQgb24gcGVzIHBhY2tldCB0aW1lc2NhbGUgKDkwa2h6IGNsb2NrKVxuICovXG52YXIgYWRqdXN0VGltZXN0YW1wXyA9IGZ1bmN0aW9uKHNlZ21lbnRJbmZvLCBiYXNlVGltZXN0YW1wKSB7XG4gIGlmIChzZWdtZW50SW5mby5hdWRpbyAmJiBzZWdtZW50SW5mby5hdWRpby5sZW5ndGgpIHtcbiAgICB2YXIgYXVkaW9CYXNlVGltZXN0YW1wID0gYmFzZVRpbWVzdGFtcDtcbiAgICBpZiAodHlwZW9mIGF1ZGlvQmFzZVRpbWVzdGFtcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGF1ZGlvQmFzZVRpbWVzdGFtcCA9IHNlZ21lbnRJbmZvLmF1ZGlvWzBdLmR0cztcbiAgICB9XG4gICAgc2VnbWVudEluZm8uYXVkaW8uZm9yRWFjaChmdW5jdGlvbihpbmZvKSB7XG4gICAgICBpbmZvLmR0cyA9IGhhbmRsZVJvbGxvdmVyKGluZm8uZHRzLCBhdWRpb0Jhc2VUaW1lc3RhbXApO1xuICAgICAgaW5mby5wdHMgPSBoYW5kbGVSb2xsb3ZlcihpbmZvLnB0cywgYXVkaW9CYXNlVGltZXN0YW1wKTtcbiAgICAgIC8vIHRpbWUgaW4gc2Vjb25kc1xuICAgICAgaW5mby5kdHNUaW1lID0gaW5mby5kdHMgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgICAgaW5mby5wdHNUaW1lID0gaW5mby5wdHMgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHNlZ21lbnRJbmZvLnZpZGVvICYmIHNlZ21lbnRJbmZvLnZpZGVvLmxlbmd0aCkge1xuICAgIHZhciB2aWRlb0Jhc2VUaW1lc3RhbXAgPSBiYXNlVGltZXN0YW1wO1xuICAgIGlmICh0eXBlb2YgdmlkZW9CYXNlVGltZXN0YW1wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmlkZW9CYXNlVGltZXN0YW1wID0gc2VnbWVudEluZm8udmlkZW9bMF0uZHRzO1xuICAgIH1cbiAgICBzZWdtZW50SW5mby52aWRlby5mb3JFYWNoKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgIGluZm8uZHRzID0gaGFuZGxlUm9sbG92ZXIoaW5mby5kdHMsIHZpZGVvQmFzZVRpbWVzdGFtcCk7XG4gICAgICBpbmZvLnB0cyA9IGhhbmRsZVJvbGxvdmVyKGluZm8ucHRzLCB2aWRlb0Jhc2VUaW1lc3RhbXApO1xuICAgICAgLy8gdGltZSBpbiBzZWNvbmRzXG4gICAgICBpbmZvLmR0c1RpbWUgPSBpbmZvLmR0cyAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgICBpbmZvLnB0c1RpbWUgPSBpbmZvLnB0cyAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgfSk7XG4gICAgaWYgKHNlZ21lbnRJbmZvLmZpcnN0S2V5RnJhbWUpIHtcbiAgICAgIHZhciBmcmFtZSA9IHNlZ21lbnRJbmZvLmZpcnN0S2V5RnJhbWU7XG4gICAgICBmcmFtZS5kdHMgPSBoYW5kbGVSb2xsb3ZlcihmcmFtZS5kdHMsIHZpZGVvQmFzZVRpbWVzdGFtcCk7XG4gICAgICBmcmFtZS5wdHMgPSBoYW5kbGVSb2xsb3ZlcihmcmFtZS5wdHMsIHZpZGVvQmFzZVRpbWVzdGFtcCk7XG4gICAgICAvLyB0aW1lIGluIHNlY29uZHNcbiAgICAgIGZyYW1lLmR0c1RpbWUgPSBmcmFtZS5kdHMgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgICAgZnJhbWUucHRzVGltZSA9IGZyYW1lLmR0cyAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGluc3BlY3RzIHRoZSBhYWMgZGF0YSBzdHJlYW0gZm9yIHN0YXJ0IGFuZCBlbmQgdGltZSBpbmZvcm1hdGlvblxuICovXG52YXIgaW5zcGVjdEFhY18gPSBmdW5jdGlvbihieXRlcykge1xuICB2YXJcbiAgICBlbmRMb29wID0gZmFsc2UsXG4gICAgYXVkaW9Db3VudCA9IDAsXG4gICAgc2FtcGxlUmF0ZSA9IG51bGwsXG4gICAgdGltZXN0YW1wID0gbnVsbCxcbiAgICBmcmFtZVNpemUgPSAwLFxuICAgIGJ5dGVJbmRleCA9IDAsXG4gICAgcGFja2V0O1xuXG4gIHdoaWxlIChieXRlcy5sZW5ndGggLSBieXRlSW5kZXggPj0gMykge1xuICAgIHZhciB0eXBlID0gcHJvYmUuYWFjLnBhcnNlVHlwZShieXRlcywgYnl0ZUluZGV4KTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3RpbWVkLW1ldGFkYXRhJzpcbiAgICAgICAgLy8gRXhpdCBlYXJseSBiZWNhdXNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIHRvIHBhcnNlXG4gICAgICAgIC8vIHRoZSBJRDMgdGFnIGhlYWRlclxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoIC0gYnl0ZUluZGV4IDwgMTApIHtcbiAgICAgICAgICBlbmRMb29wID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lU2l6ZSA9IHByb2JlLmFhYy5wYXJzZUlkM1RhZ1NpemUoYnl0ZXMsIGJ5dGVJbmRleCk7XG5cbiAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbiB0aGUgYnVmZmVyXG4gICAgICAgIC8vIHRvIGVtaXQgYSBmdWxsIHBhY2tldFxuICAgICAgICBpZiAoZnJhbWVTaXplID4gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZW5kTG9vcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gbnVsbCkge1xuICAgICAgICAgIHBhY2tldCA9IGJ5dGVzLnN1YmFycmF5KGJ5dGVJbmRleCwgYnl0ZUluZGV4ICsgZnJhbWVTaXplKTtcbiAgICAgICAgICB0aW1lc3RhbXAgPSBwcm9iZS5hYWMucGFyc2VBYWNUaW1lc3RhbXAocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBieXRlSW5kZXggKz0gZnJhbWVTaXplO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgLy8gRXhpdCBlYXJseSBiZWNhdXNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIHRvIHBhcnNlXG4gICAgICAgIC8vIHRoZSBBRFRTIGZyYW1lIGhlYWRlclxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoIC0gYnl0ZUluZGV4IDwgNykge1xuICAgICAgICAgIGVuZExvb3AgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZnJhbWVTaXplID0gcHJvYmUuYWFjLnBhcnNlQWR0c1NpemUoYnl0ZXMsIGJ5dGVJbmRleCk7XG5cbiAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbiB0aGUgYnVmZmVyXG4gICAgICAgIC8vIHRvIGVtaXQgYSBmdWxsIHBhY2tldFxuICAgICAgICBpZiAoZnJhbWVTaXplID4gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZW5kTG9vcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhbXBsZVJhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBwYWNrZXQgPSBieXRlcy5zdWJhcnJheShieXRlSW5kZXgsIGJ5dGVJbmRleCArIGZyYW1lU2l6ZSk7XG4gICAgICAgICAgc2FtcGxlUmF0ZSA9IHByb2JlLmFhYy5wYXJzZVNhbXBsZVJhdGUocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBhdWRpb0NvdW50Kys7XG4gICAgICAgIGJ5dGVJbmRleCArPSBmcmFtZVNpemU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnl0ZUluZGV4Kys7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoZW5kTG9vcCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGlmIChzYW1wbGVSYXRlID09PSBudWxsIHx8IHRpbWVzdGFtcCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF1ZGlvVGltZXNjYWxlID0gT05FX1NFQ09ORF9JTl9UUyAvIHNhbXBsZVJhdGU7XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBhdWRpbzogW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICBkdHM6IHRpbWVzdGFtcCxcbiAgICAgICAgcHRzOiB0aW1lc3RhbXBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgIGR0czogdGltZXN0YW1wICsgKGF1ZGlvQ291bnQgKiAxMDI0ICogYXVkaW9UaW1lc2NhbGUpLFxuICAgICAgICBwdHM6IHRpbWVzdGFtcCArIChhdWRpb0NvdW50ICogMTAyNCAqIGF1ZGlvVGltZXNjYWxlKVxuICAgICAgfVxuICAgIF1cbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBpbnNwZWN0cyB0aGUgdHJhbnNwb3J0IHN0cmVhbSBzZWdtZW50IGRhdGEgZm9yIHN0YXJ0IGFuZCBlbmQgdGltZSBpbmZvcm1hdGlvblxuICogb2YgdGhlIGF1ZGlvIGFuZCB2aWRlbyB0cmFja3MgKHdoZW4gcHJlc2VudCkgYXMgd2VsbCBhcyB0aGUgZmlyc3Qga2V5IGZyYW1lJ3NcbiAqIHN0YXJ0IHRpbWUuXG4gKi9cbnZhciBpbnNwZWN0VHNfID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHBtdCA9IHtcbiAgICBwaWQ6IG51bGwsXG4gICAgdGFibGU6IG51bGxcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgcGFyc2VQc2lfKGJ5dGVzLCBwbXQpO1xuXG4gIGZvciAodmFyIHBpZCBpbiBwbXQudGFibGUpIHtcbiAgICBpZiAocG10LnRhYmxlLmhhc093blByb3BlcnR5KHBpZCkpIHtcbiAgICAgIHZhciB0eXBlID0gcG10LnRhYmxlW3BpZF07XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBTdHJlYW1UeXBlcy5IMjY0X1NUUkVBTV9UWVBFOlxuICAgICAgICAgIHJlc3VsdC52aWRlbyA9IFtdO1xuICAgICAgICAgIHBhcnNlVmlkZW9QZXNfKGJ5dGVzLCBwbXQsIHJlc3VsdCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC52aWRlby5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZXN1bHQudmlkZW87XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN0cmVhbVR5cGVzLkFEVFNfU1RSRUFNX1RZUEU6XG4gICAgICAgICAgcmVzdWx0LmF1ZGlvID0gW107XG4gICAgICAgICAgcGFyc2VBdWRpb1Blc18oYnl0ZXMsIHBtdCwgcmVzdWx0KTtcbiAgICAgICAgICBpZiAocmVzdWx0LmF1ZGlvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5hdWRpbztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEluc3BlY3RzIHNlZ21lbnQgYnl0ZSBkYXRhIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHN0YXJ0IGFuZCBlbmQgdGltaW5nIGluZm9ybWF0aW9uXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlcyBUaGUgc2VnbWVudCBieXRlIGRhdGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBiYXNlVGltZXN0YW1wIFJlbGF0aXZlIHJlZmVyZW5jZSB0aW1lc3RhbXAgdXNlZCB3aGVuIGFkanVzdGluZyBmcmFtZVxuICogIHRpbWVzdGFtcHMgZm9yIHJvbGxvdmVyLiBUaGlzIHZhbHVlIG11c3QgYmUgaW4gOTBraHogY2xvY2suXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCBjb250YWluaW5nIHN0YXJ0IGFuZCBlbmQgZnJhbWUgdGltaW5nIGluZm8gb2Ygc2VnbWVudC5cbiAqL1xudmFyIGluc3BlY3QgPSBmdW5jdGlvbihieXRlcywgYmFzZVRpbWVzdGFtcCkge1xuICB2YXIgaXNBYWNEYXRhID0gcHJvYmUuYWFjLmlzTGlrZWx5QWFjRGF0YShieXRlcyk7XG5cbiAgdmFyIHJlc3VsdDtcblxuICBpZiAoaXNBYWNEYXRhKSB7XG4gICAgcmVzdWx0ID0gaW5zcGVjdEFhY18oYnl0ZXMpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGluc3BlY3RUc18oYnl0ZXMpO1xuICB9XG5cbiAgaWYgKCFyZXN1bHQgfHwgKCFyZXN1bHQuYXVkaW8gJiYgIXJlc3VsdC52aWRlbykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFkanVzdFRpbWVzdGFtcF8ocmVzdWx0LCBiYXNlVGltZXN0YW1wKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluc3BlY3Q6IGluc3BlY3QsXG4gIHBhcnNlQXVkaW9QZXNfOiBwYXJzZUF1ZGlvUGVzX1xufTtcbiIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbnZhciB0b1Vuc2lnbmVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID4+PiAwO1xufTtcblxudmFyIHRvSGV4U3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuICgnMDAnICsgdmFsdWUudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9VbnNpZ25lZDogdG9VbnNpZ25lZCxcbiAgdG9IZXhTdHJpbmc6IHRvSGV4U3RyaW5nXG59O1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xudmFyXG4gIE9ORV9TRUNPTkRfSU5fVFMgPSA5MDAwMCwgLy8gOTBrSHogY2xvY2tcbiAgc2Vjb25kc1RvVmlkZW9UcyxcbiAgc2Vjb25kc1RvQXVkaW9UcyxcbiAgdmlkZW9Uc1RvU2Vjb25kcyxcbiAgYXVkaW9Uc1RvU2Vjb25kcyxcbiAgYXVkaW9Uc1RvVmlkZW9UcyxcbiAgdmlkZW9Uc1RvQXVkaW9UcyxcbiAgbWV0YWRhdGFUc1RvU2Vjb25kcztcblxuc2Vjb25kc1RvVmlkZW9UcyA9IGZ1bmN0aW9uKHNlY29uZHMpIHtcbiAgcmV0dXJuIHNlY29uZHMgKiBPTkVfU0VDT05EX0lOX1RTO1xufTtcblxuc2Vjb25kc1RvQXVkaW9UcyA9IGZ1bmN0aW9uKHNlY29uZHMsIHNhbXBsZVJhdGUpIHtcbiAgcmV0dXJuIHNlY29uZHMgKiBzYW1wbGVSYXRlO1xufTtcblxudmlkZW9Uc1RvU2Vjb25kcyA9IGZ1bmN0aW9uKHRpbWVzdGFtcCkge1xuICByZXR1cm4gdGltZXN0YW1wIC8gT05FX1NFQ09ORF9JTl9UUztcbn07XG5cbmF1ZGlvVHNUb1NlY29uZHMgPSBmdW5jdGlvbih0aW1lc3RhbXAsIHNhbXBsZVJhdGUpIHtcbiAgcmV0dXJuIHRpbWVzdGFtcCAvIHNhbXBsZVJhdGU7XG59O1xuXG5hdWRpb1RzVG9WaWRlb1RzID0gZnVuY3Rpb24odGltZXN0YW1wLCBzYW1wbGVSYXRlKSB7XG4gIHJldHVybiBzZWNvbmRzVG9WaWRlb1RzKGF1ZGlvVHNUb1NlY29uZHModGltZXN0YW1wLCBzYW1wbGVSYXRlKSk7XG59O1xuXG52aWRlb1RzVG9BdWRpb1RzID0gZnVuY3Rpb24odGltZXN0YW1wLCBzYW1wbGVSYXRlKSB7XG4gIHJldHVybiBzZWNvbmRzVG9BdWRpb1RzKHZpZGVvVHNUb1NlY29uZHModGltZXN0YW1wKSwgc2FtcGxlUmF0ZSk7XG59O1xuXG4vKipcbiAqIEFkanVzdCBJRDMgdGFnIG9yIGNhcHRpb24gdGltaW5nIGluZm9ybWF0aW9uIGJ5IHRoZSB0aW1lbGluZSBwdHMgdmFsdWVzXG4gKiAoaWYga2VlcE9yaWdpbmFsVGltZXN0YW1wcyBpcyBmYWxzZSkgYW5kIGNvbnZlcnQgdG8gc2Vjb25kc1xuICovXG5tZXRhZGF0YVRzVG9TZWNvbmRzID0gZnVuY3Rpb24odGltZXN0YW1wLCB0aW1lbGluZVN0YXJ0UHRzLCBrZWVwT3JpZ2luYWxUaW1lc3RhbXBzKSB7XG4gIHJldHVybiB2aWRlb1RzVG9TZWNvbmRzKGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMgPyB0aW1lc3RhbXAgOiB0aW1lc3RhbXAgLSB0aW1lbGluZVN0YXJ0UHRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBPTkVfU0VDT05EX0lOX1RTOiBPTkVfU0VDT05EX0lOX1RTLFxuICBzZWNvbmRzVG9WaWRlb1RzOiBzZWNvbmRzVG9WaWRlb1RzLFxuICBzZWNvbmRzVG9BdWRpb1RzOiBzZWNvbmRzVG9BdWRpb1RzLFxuICB2aWRlb1RzVG9TZWNvbmRzOiB2aWRlb1RzVG9TZWNvbmRzLFxuICBhdWRpb1RzVG9TZWNvbmRzOiBhdWRpb1RzVG9TZWNvbmRzLFxuICBhdWRpb1RzVG9WaWRlb1RzOiBhdWRpb1RzVG9WaWRlb1RzLFxuICB2aWRlb1RzVG9BdWRpb1RzOiB2aWRlb1RzVG9BdWRpb1RzLFxuICBtZXRhZGF0YVRzVG9TZWNvbmRzOiBtZXRhZGF0YVRzVG9TZWNvbmRzXG59O1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBBIGxpZ2h0d2VpZ2h0IHJlYWRhYmxlIHN0cmVhbSBpbXBsZW1lbnRpb24gdGhhdCBoYW5kbGVzIGV2ZW50IGRpc3BhdGNoaW5nLlxuICogT2JqZWN0cyB0aGF0IGluaGVyaXQgZnJvbSBzdHJlYW1zIHNob3VsZCBjYWxsIGluaXQgaW4gdGhlaXIgY29uc3RydWN0b3JzLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTdHJlYW0gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IHt9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IHRoZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIHtmdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBhbiBldmVudCBvZlxuICAgICAqIHRoZSBzcGVjaWZpZWQgdHlwZSBvY2N1cnNcbiAgICAgKi9cbiAgICB0aGlzLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICghbGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgICAgfVxuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXJzW3R5cGVdLmNvbmNhdChsaXN0ZW5lcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSB0aGUgZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciB7ZnVuY3Rpb259IGEgZnVuY3Rpb24gcHJldmlvdXNseSByZWdpc3RlcmVkIGZvciB0aGlzXG4gICAgICogdHlwZSBvZiBldmVudCB0aHJvdWdoIGBvbmBcbiAgICAgKi9cbiAgICB0aGlzLm9mZiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaW5kZXg7XG4gICAgICBpZiAoIWxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpbmRleCA9IGxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyc1t0eXBlXS5zbGljZSgpO1xuICAgICAgbGlzdGVuZXJzW3R5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYW4gZXZlbnQgb2YgdGhlIHNwZWNpZmllZCB0eXBlIG9uIHRoaXMgc3RyZWFtLiBBbnkgYWRkaXRpb25hbFxuICAgICAqIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBwYXNzZWQgYXMgcGFyYW1ldGVycyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gdGhlIGV2ZW50IG5hbWVcbiAgICAgKi9cbiAgICB0aGlzLnRyaWdnZXIgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzLCBpLCBsZW5ndGgsIGFyZ3M7XG4gICAgICBjYWxsYmFja3MgPSBsaXN0ZW5lcnNbdHlwZV07XG4gICAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBTbGljaW5nIHRoZSBhcmd1bWVudHMgb24gZXZlcnkgaW52b2NhdGlvbiBvZiB0aGlzIG1ldGhvZFxuICAgICAgLy8gY2FuIGFkZCBhIHNpZ25pZmljYW50IGFtb3VudCBvZiBvdmVyaGVhZC4gQXZvaWQgdGhlXG4gICAgICAvLyBpbnRlcm1lZGlhdGUgb2JqZWN0IGNyZWF0aW9uIGZvciB0aGUgY29tbW9uIGNhc2Ugb2YgYVxuICAgICAgLy8gc2luZ2xlIGNhbGxiYWNrIGFyZ3VtZW50XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0uY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgc3RyZWFtIGFuZCBjbGVhbnMgdXAuXG4gICAgICovXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICBsaXN0ZW5lcnMgPSB7fTtcbiAgICB9O1xuICB9O1xufTtcblxuLyoqXG4gKiBGb3J3YXJkcyBhbGwgYGRhdGFgIGV2ZW50cyBvbiB0aGlzIHN0cmVhbSB0byB0aGUgZGVzdGluYXRpb24gc3RyZWFtLiBUaGVcbiAqIGRlc3RpbmF0aW9uIHN0cmVhbSBzaG91bGQgcHJvdmlkZSBhIG1ldGhvZCBgcHVzaGAgdG8gcmVjZWl2ZSB0aGUgZGF0YVxuICogZXZlbnRzIGFzIHRoZXkgYXJyaXZlLlxuICogQHBhcmFtIGRlc3RpbmF0aW9uIHtzdHJlYW19IHRoZSBzdHJlYW0gdGhhdCB3aWxsIHJlY2VpdmUgYWxsIGBkYXRhYCBldmVudHNcbiAqIEBwYXJhbSBhdXRvRmx1c2gge2Jvb2xlYW59IGlmIGZhbHNlLCB3ZSB3aWxsIG5vdCBjYWxsIGBmbHVzaGAgb24gdGhlIGRlc3RpbmF0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBjdXJyZW50IHN0cmVhbSBlbWl0cyBhICdkb25lJyBldmVudFxuICogQHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3BpcGVfZGVzdGluYXRpb25fb3B0aW9uc1xuICovXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0aW5hdGlvbikge1xuICB0aGlzLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGRlc3RpbmF0aW9uLnB1c2goZGF0YSk7XG4gIH0pO1xuXG4gIHRoaXMub24oJ2RvbmUnLCBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICAgIGRlc3RpbmF0aW9uLmZsdXNoKGZsdXNoU291cmNlKTtcbiAgfSk7XG5cbiAgdGhpcy5vbigncGFydGlhbGRvbmUnLCBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICAgIGRlc3RpbmF0aW9uLnBhcnRpYWxGbHVzaChmbHVzaFNvdXJjZSk7XG4gIH0pO1xuXG4gIHRoaXMub24oJ2VuZGVkdGltZWxpbmUnLCBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICAgIGRlc3RpbmF0aW9uLmVuZFRpbWVsaW5lKGZsdXNoU291cmNlKTtcbiAgfSk7XG5cbiAgdGhpcy5vbigncmVzZXQnLCBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICAgIGRlc3RpbmF0aW9uLnJlc2V0KGZsdXNoU291cmNlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRlc3RpbmF0aW9uO1xufTtcblxuLy8gRGVmYXVsdCBzdHJlYW0gZnVuY3Rpb25zIHRoYXQgYXJlIGV4cGVjdGVkIHRvIGJlIG92ZXJyaWRkZW4gdG8gcGVyZm9ybVxuLy8gYWN0dWFsIHdvcmsuIFRoZXNlIGFyZSBwcm92aWRlZCBieSB0aGUgcHJvdG90eXBlIGFzIGEgc29ydCBvZiBuby1vcFxuLy8gaW1wbGVtZW50YXRpb24gc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGNoZWNrIGZvciB0aGVpciBleGlzdGVuY2UgaW4gdGhlXG4vLyBgcGlwZWAgZnVuY3Rpb24gYWJvdmUuXG5TdHJlYW0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMudHJpZ2dlcignZGF0YScsIGRhdGEpO1xufTtcblxuU3RyZWFtLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKGZsdXNoU291cmNlKSB7XG4gIHRoaXMudHJpZ2dlcignZG9uZScsIGZsdXNoU291cmNlKTtcbn07XG5cblN0cmVhbS5wcm90b3R5cGUucGFydGlhbEZsdXNoID0gZnVuY3Rpb24oZmx1c2hTb3VyY2UpIHtcbiAgdGhpcy50cmlnZ2VyKCdwYXJ0aWFsZG9uZScsIGZsdXNoU291cmNlKTtcbn07XG5cblN0cmVhbS5wcm90b3R5cGUuZW5kVGltZWxpbmUgPSBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnLCBmbHVzaFNvdXJjZSk7XG59O1xuXG5TdHJlYW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oZmx1c2hTb3VyY2UpIHtcbiAgdGhpcy50cmlnZ2VyKCdyZXNldCcsIGZsdXNoU291cmNlKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuIiwidmFyIHRyaW0gPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG4gICwgaXNBcnJheSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGVhZGVycykge1xuICBpZiAoIWhlYWRlcnMpXG4gICAgcmV0dXJuIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHt9XG5cbiAgdmFyIGhlYWRlcnNBcnIgPSB0cmltKGhlYWRlcnMpLnNwbGl0KCdcXG4nKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVyc0Fyci5sZW5ndGg7IGkrKykge1xuICAgIHZhciByb3cgPSBoZWFkZXJzQXJyW2ldXG4gICAgdmFyIGluZGV4ID0gcm93LmluZGV4T2YoJzonKVxuICAgICwga2V5ID0gdHJpbShyb3cuc2xpY2UoMCwgaW5kZXgpKS50b0xvd2VyQ2FzZSgpXG4gICAgLCB2YWx1ZSA9IHRyaW0ocm93LnNsaWNlKGluZGV4ICsgMSkpXG5cbiAgICBpZiAodHlwZW9mKHJlc3VsdFtrZXldKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWVcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVzdWx0W2tleV0pKSB7XG4gICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IFsgcmVzdWx0W2tleV0sIHZhbHVlIF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIvLyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE4MDhcblxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuKGZ1bmN0aW9uKHJvb3QpIHsgXG4vKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuXG4gIHZhciBVUkxfUkVHRVggPSAvXigoPzpbYS16QS1aMC05K1xcLS5dKzopPykoXFwvXFwvW15cXC8/I10qKT8oKD86W15cXC9cXD8jXSpcXC8pKi4qPyk/Pyg7Lio/KT8oXFw/Lio/KT8oIy4qPyk/JC87XG4gIHZhciBGSVJTVF9TRUdNRU5UX1JFR0VYID0gL14oW15cXC8/I10qKSguKikkLztcbiAgdmFyIFNMQVNIX0RPVF9SRUdFWCA9IC8oPzpcXC98XilcXC4oPz1cXC8pL2c7XG4gIHZhciBTTEFTSF9ET1RfRE9UX1JFR0VYID0gLyg/OlxcL3xeKVxcLlxcLlxcLyg/IVxcLlxcLlxcLykuKj8oPz1cXC8pL2c7XG5cbiAgdmFyIFVSTFRvb2xraXQgPSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgIC8vIElmIG9wdHMuYWx3YXlzTm9ybWFsaXplIGlzIHRydWUgdGhlbiB0aGUgcGF0aCB3aWxsIGFsd2F5cyBiZSBub3JtYWxpemVkIGV2ZW4gd2hlbiBpdCBzdGFydHMgd2l0aCAvIG9yIC8vXG4gICAgLy8gRS5nXG4gICAgLy8gV2l0aCBvcHRzLmFsd2F5c05vcm1hbGl6ZSA9IGZhbHNlIChkZWZhdWx0LCBzcGVjIGNvbXBsaWFudClcbiAgICAvLyBodHRwOi8vYS5jb20vYi9jZCArIC9lL2YvLi4vZyA9PiBodHRwOi8vYS5jb20vZS9mLy4uL2dcbiAgICAvLyBXaXRoIG9wdHMuYWx3YXlzTm9ybWFsaXplID0gdHJ1ZSAobm90IHNwZWMgY29tcGxpYW50KVxuICAgIC8vIGh0dHA6Ly9hLmNvbS9iL2NkICsgL2UvZi8uLi9nID0+IGh0dHA6Ly9hLmNvbS9lL2dcbiAgICBidWlsZEFic29sdXRlVVJMOiBmdW5jdGlvbihiYXNlVVJMLCByZWxhdGl2ZVVSTCwgb3B0cykge1xuICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAvLyByZW1vdmUgYW55IHJlbWFpbmluZyBzcGFjZSBhbmQgQ1JMRlxuICAgICAgYmFzZVVSTCA9IGJhc2VVUkwudHJpbSgpO1xuICAgICAgcmVsYXRpdmVVUkwgPSByZWxhdGl2ZVVSTC50cmltKCk7XG4gICAgICBpZiAoIXJlbGF0aXZlVVJMKSB7XG4gICAgICAgIC8vIDJhKSBJZiB0aGUgZW1iZWRkZWQgVVJMIGlzIGVudGlyZWx5IGVtcHR5LCBpdCBpbmhlcml0cyB0aGVcbiAgICAgICAgLy8gZW50aXJlIGJhc2UgVVJMIChpLmUuLCBpcyBzZXQgZXF1YWwgdG8gdGhlIGJhc2UgVVJMKVxuICAgICAgICAvLyBhbmQgd2UgYXJlIGRvbmUuXG4gICAgICAgIGlmICghb3B0cy5hbHdheXNOb3JtYWxpemUpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZVVSTDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmFzZVBhcnRzRm9yTm9ybWFsaXNlID0gVVJMVG9vbGtpdC5wYXJzZVVSTChiYXNlVVJMKTtcbiAgICAgICAgaWYgKCFiYXNlUGFydHNGb3JOb3JtYWxpc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byBwYXJzZSBiYXNlIFVSTC4nKTtcbiAgICAgICAgfVxuICAgICAgICBiYXNlUGFydHNGb3JOb3JtYWxpc2UucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChiYXNlUGFydHNGb3JOb3JtYWxpc2UucGF0aCk7XG4gICAgICAgIHJldHVybiBVUkxUb29sa2l0LmJ1aWxkVVJMRnJvbVBhcnRzKGJhc2VQYXJ0c0Zvck5vcm1hbGlzZSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVsYXRpdmVQYXJ0cyA9IFVSTFRvb2xraXQucGFyc2VVUkwocmVsYXRpdmVVUkwpO1xuICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgdHJ5aW5nIHRvIHBhcnNlIHJlbGF0aXZlIFVSTC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWxhdGl2ZVBhcnRzLnNjaGVtZSkge1xuICAgICAgICAvLyAyYikgSWYgdGhlIGVtYmVkZGVkIFVSTCBzdGFydHMgd2l0aCBhIHNjaGVtZSBuYW1lLCBpdCBpc1xuICAgICAgICAvLyBpbnRlcnByZXRlZCBhcyBhbiBhYnNvbHV0ZSBVUkwgYW5kIHdlIGFyZSBkb25lLlxuICAgICAgICBpZiAoIW9wdHMuYWx3YXlzTm9ybWFsaXplKSB7XG4gICAgICAgICAgcmV0dXJuIHJlbGF0aXZlVVJMO1xuICAgICAgICB9XG4gICAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChyZWxhdGl2ZVBhcnRzLnBhdGgpO1xuICAgICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhyZWxhdGl2ZVBhcnRzKTtcbiAgICAgIH1cbiAgICAgIHZhciBiYXNlUGFydHMgPSBVUkxUb29sa2l0LnBhcnNlVVJMKGJhc2VVUkwpO1xuICAgICAgaWYgKCFiYXNlUGFydHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciB0cnlpbmcgdG8gcGFyc2UgYmFzZSBVUkwuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJhc2VQYXJ0cy5uZXRMb2MgJiYgYmFzZVBhcnRzLnBhdGggJiYgYmFzZVBhcnRzLnBhdGhbMF0gIT09ICcvJykge1xuICAgICAgICAvLyBJZiBuZXRMb2MgbWlzc2luZyBhbmQgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggJy8nLCBhc3N1bWUgZXZlcnRoaW5nIGJlZm9yZSB0aGUgZmlyc3QgJy8nIGlzIHRoZSBuZXRMb2NcbiAgICAgICAgLy8gVGhpcyBjYXVzZXMgJ2V4YW1wbGUuY29tL2EnIHRvIGJlIGhhbmRsZWQgYXMgJy8vZXhhbXBsZS5jb20vYScgaW5zdGVhZCBvZiAnL2V4YW1wbGUuY29tL2EnXG4gICAgICAgIHZhciBwYXRoUGFydHMgPSBGSVJTVF9TRUdNRU5UX1JFR0VYLmV4ZWMoYmFzZVBhcnRzLnBhdGgpO1xuICAgICAgICBiYXNlUGFydHMubmV0TG9jID0gcGF0aFBhcnRzWzFdO1xuICAgICAgICBiYXNlUGFydHMucGF0aCA9IHBhdGhQYXJ0c1syXTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlUGFydHMubmV0TG9jICYmICFiYXNlUGFydHMucGF0aCkge1xuICAgICAgICBiYXNlUGFydHMucGF0aCA9ICcvJztcbiAgICAgIH1cbiAgICAgIHZhciBidWlsdFBhcnRzID0ge1xuICAgICAgICAvLyAyYykgT3RoZXJ3aXNlLCB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSBzY2hlbWUgb2ZcbiAgICAgICAgLy8gdGhlIGJhc2UgVVJMLlxuICAgICAgICBzY2hlbWU6IGJhc2VQYXJ0cy5zY2hlbWUsXG4gICAgICAgIG5ldExvYzogcmVsYXRpdmVQYXJ0cy5uZXRMb2MsXG4gICAgICAgIHBhdGg6IG51bGwsXG4gICAgICAgIHBhcmFtczogcmVsYXRpdmVQYXJ0cy5wYXJhbXMsXG4gICAgICAgIHF1ZXJ5OiByZWxhdGl2ZVBhcnRzLnF1ZXJ5LFxuICAgICAgICBmcmFnbWVudDogcmVsYXRpdmVQYXJ0cy5mcmFnbWVudFxuICAgICAgfTtcbiAgICAgIGlmICghcmVsYXRpdmVQYXJ0cy5uZXRMb2MpIHtcbiAgICAgICAgLy8gMykgSWYgdGhlIGVtYmVkZGVkIFVSTCdzIDxuZXRfbG9jPiBpcyBub24tZW1wdHksIHdlIHNraXAgdG9cbiAgICAgICAgLy8gU3RlcCA3LiAgT3RoZXJ3aXNlLCB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSA8bmV0X2xvYz5cbiAgICAgICAgLy8gKGlmIGFueSkgb2YgdGhlIGJhc2UgVVJMLlxuICAgICAgICBidWlsdFBhcnRzLm5ldExvYyA9IGJhc2VQYXJ0cy5uZXRMb2M7XG4gICAgICAgIC8vIDQpIElmIHRoZSBlbWJlZGRlZCBVUkwgcGF0aCBpcyBwcmVjZWRlZCBieSBhIHNsYXNoIFwiL1wiLCB0aGVcbiAgICAgICAgLy8gcGF0aCBpcyBub3QgcmVsYXRpdmUgYW5kIHdlIHNraXAgdG8gU3RlcCA3LlxuICAgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5wYXRoWzBdICE9PSAnLycpIHtcbiAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucGF0aCkge1xuICAgICAgICAgICAgLy8gNSkgSWYgdGhlIGVtYmVkZGVkIFVSTCBwYXRoIGlzIGVtcHR5IChhbmQgbm90IHByZWNlZGVkIGJ5IGFcbiAgICAgICAgICAgIC8vIHNsYXNoKSwgdGhlbiB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSBiYXNlIFVSTCBwYXRoXG4gICAgICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBiYXNlUGFydHMucGF0aDtcbiAgICAgICAgICAgIC8vIDVhKSBpZiB0aGUgZW1iZWRkZWQgVVJMJ3MgPHBhcmFtcz4gaXMgbm9uLWVtcHR5LCB3ZSBza2lwIHRvXG4gICAgICAgICAgICAvLyBzdGVwIDc7IG90aGVyd2lzZSwgaXQgaW5oZXJpdHMgdGhlIDxwYXJhbXM+IG9mIHRoZSBiYXNlXG4gICAgICAgICAgICAvLyBVUkwgKGlmIGFueSkgYW5kXG4gICAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucGFyYW1zKSB7XG4gICAgICAgICAgICAgIGJ1aWx0UGFydHMucGFyYW1zID0gYmFzZVBhcnRzLnBhcmFtcztcbiAgICAgICAgICAgICAgLy8gNWIpIGlmIHRoZSBlbWJlZGRlZCBVUkwncyA8cXVlcnk+IGlzIG5vbi1lbXB0eSwgd2Ugc2tpcCB0b1xuICAgICAgICAgICAgICAvLyBzdGVwIDc7IG90aGVyd2lzZSwgaXQgaW5oZXJpdHMgdGhlIDxxdWVyeT4gb2YgdGhlIGJhc2VcbiAgICAgICAgICAgICAgLy8gVVJMIChpZiBhbnkpIGFuZCB3ZSBza2lwIHRvIHN0ZXAgNy5cbiAgICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzLnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgYnVpbHRQYXJ0cy5xdWVyeSA9IGJhc2VQYXJ0cy5xdWVyeTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyA2KSBUaGUgbGFzdCBzZWdtZW50IG9mIHRoZSBiYXNlIFVSTCdzIHBhdGggKGFueXRoaW5nXG4gICAgICAgICAgICAvLyBmb2xsb3dpbmcgdGhlIHJpZ2h0bW9zdCBzbGFzaCBcIi9cIiwgb3IgdGhlIGVudGlyZSBwYXRoIGlmIG5vXG4gICAgICAgICAgICAvLyBzbGFzaCBpcyBwcmVzZW50KSBpcyByZW1vdmVkIGFuZCB0aGUgZW1iZWRkZWQgVVJMJ3MgcGF0aCBpc1xuICAgICAgICAgICAgLy8gYXBwZW5kZWQgaW4gaXRzIHBsYWNlLlxuICAgICAgICAgICAgdmFyIGJhc2VVUkxQYXRoID0gYmFzZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICB2YXIgbmV3UGF0aCA9IGJhc2VVUkxQYXRoLnN1YnN0cmluZygwLCBiYXNlVVJMUGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgKyByZWxhdGl2ZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBVUkxUb29sa2l0Lm5vcm1hbGl6ZVBhdGgobmV3UGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYnVpbHRQYXJ0cy5wYXRoID09PSBudWxsKSB7XG4gICAgICAgIGJ1aWx0UGFydHMucGF0aCA9IG9wdHMuYWx3YXlzTm9ybWFsaXplID8gVVJMVG9vbGtpdC5ub3JtYWxpemVQYXRoKHJlbGF0aXZlUGFydHMucGF0aCkgOiByZWxhdGl2ZVBhcnRzLnBhdGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhidWlsdFBhcnRzKTtcbiAgICB9LFxuICAgIHBhcnNlVVJMOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgIHZhciBwYXJ0cyA9IFVSTF9SRUdFWC5leGVjKHVybCk7XG4gICAgICBpZiAoIXBhcnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lOiBwYXJ0c1sxXSB8fCAnJyxcbiAgICAgICAgbmV0TG9jOiBwYXJ0c1syXSB8fCAnJyxcbiAgICAgICAgcGF0aDogcGFydHNbM10gfHwgJycsXG4gICAgICAgIHBhcmFtczogcGFydHNbNF0gfHwgJycsXG4gICAgICAgIHF1ZXJ5OiBwYXJ0c1s1XSB8fCAnJyxcbiAgICAgICAgZnJhZ21lbnQ6IHBhcnRzWzZdIHx8ICcnXG4gICAgICB9O1xuICAgIH0sXG4gICAgbm9ybWFsaXplUGF0aDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgLy8gVGhlIGZvbGxvd2luZyBvcGVyYXRpb25zIGFyZVxuICAgICAgLy8gdGhlbiBhcHBsaWVkLCBpbiBvcmRlciwgdG8gdGhlIG5ldyBwYXRoOlxuICAgICAgLy8gNmEpIEFsbCBvY2N1cnJlbmNlcyBvZiBcIi4vXCIsIHdoZXJlIFwiLlwiIGlzIGEgY29tcGxldGUgcGF0aFxuICAgICAgLy8gc2VnbWVudCwgYXJlIHJlbW92ZWQuXG4gICAgICAvLyA2YikgSWYgdGhlIHBhdGggZW5kcyB3aXRoIFwiLlwiIGFzIGEgY29tcGxldGUgcGF0aCBzZWdtZW50LFxuICAgICAgLy8gdGhhdCBcIi5cIiBpcyByZW1vdmVkLlxuICAgICAgcGF0aCA9IHBhdGguc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKS5yZXBsYWNlKFNMQVNIX0RPVF9SRUdFWCwgJycpO1xuICAgICAgLy8gNmMpIEFsbCBvY2N1cnJlbmNlcyBvZiBcIjxzZWdtZW50Pi8uLi9cIiwgd2hlcmUgPHNlZ21lbnQ+IGlzIGFcbiAgICAgIC8vIGNvbXBsZXRlIHBhdGggc2VnbWVudCBub3QgZXF1YWwgdG8gXCIuLlwiLCBhcmUgcmVtb3ZlZC5cbiAgICAgIC8vIFJlbW92YWwgb2YgdGhlc2UgcGF0aCBzZWdtZW50cyBpcyBwZXJmb3JtZWQgaXRlcmF0aXZlbHksXG4gICAgICAvLyByZW1vdmluZyB0aGUgbGVmdG1vc3QgbWF0Y2hpbmcgcGF0dGVybiBvbiBlYWNoIGl0ZXJhdGlvbixcbiAgICAgIC8vIHVudGlsIG5vIG1hdGNoaW5nIHBhdHRlcm4gcmVtYWlucy5cbiAgICAgIC8vIDZkKSBJZiB0aGUgcGF0aCBlbmRzIHdpdGggXCI8c2VnbWVudD4vLi5cIiwgd2hlcmUgPHNlZ21lbnQ+IGlzIGFcbiAgICAgIC8vIGNvbXBsZXRlIHBhdGggc2VnbWVudCBub3QgZXF1YWwgdG8gXCIuLlwiLCB0aGF0XG4gICAgICAvLyBcIjxzZWdtZW50Pi8uLlwiIGlzIHJlbW92ZWQuXG4gICAgICB3aGlsZSAocGF0aC5sZW5ndGggIT09IChwYXRoID0gcGF0aC5yZXBsYWNlKFNMQVNIX0RPVF9ET1RfUkVHRVgsICcnKSkubGVuZ3RoKSB7fSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XG4gICAgfSxcbiAgICBidWlsZFVSTEZyb21QYXJ0czogZnVuY3Rpb24ocGFydHMpIHtcbiAgICAgIHJldHVybiBwYXJ0cy5zY2hlbWUgKyBwYXJ0cy5uZXRMb2MgKyBwYXJ0cy5wYXRoICsgcGFydHMucGFyYW1zICsgcGFydHMucXVlcnkgKyBwYXJ0cy5mcmFnbWVudDtcbiAgICB9XG4gIH07XG5cbi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cbiAgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICAgIG1vZHVsZS5leHBvcnRzID0gVVJMVG9vbGtpdDtcbiAgZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsgcmV0dXJuIFVSTFRvb2xraXQ7IH0pO1xuICBlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JylcbiAgICBleHBvcnRzW1wiVVJMVG9vbGtpdFwiXSA9IFVSTFRvb2xraXQ7XG4gIGVsc2VcbiAgICByb290W1wiVVJMVG9vbGtpdFwiXSA9IFVSTFRvb2xraXQ7XG59KSh0aGlzKTtcbi8qIGpzaGludCBpZ25vcmU6ZW5kICovXG4iLCIvKiEgQG5hbWUgbTN1OC1wYXJzZXIgQHZlcnNpb24gNC40LjAgQGxpY2Vuc2UgQXBhY2hlLTIuMCAqL1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG4vKipcbiAqIEBmaWxlIHN0cmVhbS5qc1xuICovXG5cbi8qKlxuICogQSBsaWdodHdlaWdodCByZWFkYWJsZSBzdHJlYW0gaW1wbGVtZW50YXRpb24gdGhhdCBoYW5kbGVzIGV2ZW50IGRpc3BhdGNoaW5nLlxuICpcbiAqIEBjbGFzcyBTdHJlYW1cbiAqL1xudmFyIFN0cmVhbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgdGhlIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgdGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBhbiBldmVudCBvZlxuICAgKiB0aGUgc3BlY2lmaWVkIHR5cGUgb2NjdXJzXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0cmVhbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm9uID0gZnVuY3Rpb24gb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgdGhlIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgIGEgZnVuY3Rpb24gcHJldmlvdXNseSByZWdpc3RlcmVkIGZvciB0aGlzXG4gICAqIHR5cGUgb2YgZXZlbnQgdGhyb3VnaCBgb25gXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGlmIHdlIGNvdWxkIHR1cm4gaXQgb2ZmIG9yIG5vdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vZmYgPSBmdW5jdGlvbiBvZmYodHlwZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5saXN0ZW5lcnNbdHlwZV0uaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgfVxuICAvKipcbiAgICogVHJpZ2dlciBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb24gdGhpcyBzdHJlYW0uIEFueSBhZGRpdGlvbmFsXG4gICAqIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBwYXNzZWQgYXMgcGFyYW1ldGVycyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyaWdnZXIgPSBmdW5jdGlvbiB0cmlnZ2VyKHR5cGUpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbmd0aDtcbiAgICB2YXIgYXJncztcblxuICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTbGljaW5nIHRoZSBhcmd1bWVudHMgb24gZXZlcnkgaW52b2NhdGlvbiBvZiB0aGlzIG1ldGhvZFxuICAgIC8vIGNhbiBhZGQgYSBzaWduaWZpY2FudCBhbW91bnQgb2Ygb3ZlcmhlYWQuIEF2b2lkIHRoZVxuICAgIC8vIGludGVybWVkaWF0ZSBvYmplY3QgY3JlYXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhXG4gICAgLy8gc2luZ2xlIGNhbGxiYWNrIGFyZ3VtZW50XG5cblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIHN0cmVhbSBhbmQgY2xlYW5zIHVwLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBGb3J3YXJkcyBhbGwgYGRhdGFgIGV2ZW50cyBvbiB0aGlzIHN0cmVhbSB0byB0aGUgZGVzdGluYXRpb24gc3RyZWFtLiBUaGVcbiAgICogZGVzdGluYXRpb24gc3RyZWFtIHNob3VsZCBwcm92aWRlIGEgbWV0aG9kIGBwdXNoYCB0byByZWNlaXZlIHRoZSBkYXRhXG4gICAqIGV2ZW50cyBhcyB0aGV5IGFycml2ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJlYW19IGRlc3RpbmF0aW9uIHRoZSBzdHJlYW0gdGhhdCB3aWxsIHJlY2VpdmUgYWxsIGBkYXRhYCBldmVudHNcbiAgICogQHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3BpcGVfZGVzdGluYXRpb25fb3B0aW9uc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5waXBlID0gZnVuY3Rpb24gcGlwZShkZXN0aW5hdGlvbikge1xuICAgIHRoaXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgZGVzdGluYXRpb24ucHVzaChkYXRhKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3RyZWFtO1xufSgpO1xuXG4vKipcbiAqIEEgc3RyZWFtIHRoYXQgYnVmZmVycyBzdHJpbmcgaW5wdXQgYW5kIGdlbmVyYXRlcyBhIGBkYXRhYCBldmVudCBmb3IgZWFjaFxuICogbGluZS5cbiAqXG4gKiBAY2xhc3MgTGluZVN0cmVhbVxuICogQGV4dGVuZHMgU3RyZWFtXG4gKi9cblxudmFyIExpbmVTdHJlYW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJlYW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoTGluZVN0cmVhbSwgX1N0cmVhbSk7XG5cbiAgZnVuY3Rpb24gTGluZVN0cmVhbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdHJlYW0uY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmJ1ZmZlciA9ICcnO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIG5ldyBkYXRhIHRvIGJlIHBhcnNlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgdGhlIHRleHQgdG8gcHJvY2Vzc1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMaW5lU3RyZWFtLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHVzaCA9IGZ1bmN0aW9uIHB1c2goZGF0YSkge1xuICAgIHZhciBuZXh0TmV3bGluZTtcbiAgICB0aGlzLmJ1ZmZlciArPSBkYXRhO1xuICAgIG5leHROZXdsaW5lID0gdGhpcy5idWZmZXIuaW5kZXhPZignXFxuJyk7XG5cbiAgICBmb3IgKDsgbmV4dE5ld2xpbmUgPiAtMTsgbmV4dE5ld2xpbmUgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcXG4nKSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgdGhpcy5idWZmZXIuc3Vic3RyaW5nKDAsIG5leHROZXdsaW5lKSk7XG4gICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyhuZXh0TmV3bGluZSArIDEpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTGluZVN0cmVhbTtcbn0oU3RyZWFtKTtcblxuLyoqXG4gKiBcImZvcmdpdmluZ1wiIGF0dHJpYnV0ZSBsaXN0IHBzdWVkby1ncmFtbWFyOlxuICogYXR0cmlidXRlcyAtPiBrZXl2YWx1ZSAoJywnIGtleXZhbHVlKSpcbiAqIGtleXZhbHVlICAgLT4ga2V5ICc9JyB2YWx1ZVxuICoga2V5ICAgICAgICAtPiBbXj1dKlxuICogdmFsdWUgICAgICAtPiAnXCInIFteXCJdKiAnXCInIHwgW14sXSpcbiAqL1xuXG52YXIgYXR0cmlidXRlU2VwYXJhdG9yID0gZnVuY3Rpb24gYXR0cmlidXRlU2VwYXJhdG9yKCkge1xuICB2YXIga2V5ID0gJ1tePV0qJztcbiAgdmFyIHZhbHVlID0gJ1wiW15cIl0qXCJ8W14sXSonO1xuICB2YXIga2V5dmFsdWUgPSAnKD86JyArIGtleSArICcpPSg/OicgKyB2YWx1ZSArICcpJztcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyg/Ol58LCkoJyArIGtleXZhbHVlICsgJyknKTtcbn07XG4vKipcbiAqIFBhcnNlIGF0dHJpYnV0ZXMgZnJvbSBhIGxpbmUgZ2l2ZW4gdGhlIHNlcGFyYXRvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVzIHRoZSBhdHRyaWJ1dGUgbGluZSB0byBwYXJzZVxuICovXG5cblxudmFyIHBhcnNlQXR0cmlidXRlcyA9IGZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gIC8vIHNwbGl0IHRoZSBzdHJpbmcgdXNpbmcgYXR0cmlidXRlcyBhcyB0aGUgc2VwYXJhdG9yXG4gIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMuc3BsaXQoYXR0cmlidXRlU2VwYXJhdG9yKCkpO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIHZhciBpID0gYXR0cnMubGVuZ3RoO1xuICB2YXIgYXR0cjtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgLy8gZmlsdGVyIG91dCB1bm1hdGNoZWQgcG9ydGlvbnMgb2YgdGhlIHN0cmluZ1xuICAgIGlmIChhdHRyc1tpXSA9PT0gJycpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gc3BsaXQgdGhlIGtleSBhbmQgdmFsdWVcblxuXG4gICAgYXR0ciA9IC8oW149XSopPSguKikvLmV4ZWMoYXR0cnNbaV0pLnNsaWNlKDEpOyAvLyB0cmltIHdoaXRlc3BhY2UgYW5kIHJlbW92ZSBvcHRpb25hbCBxdW90ZXMgYXJvdW5kIHRoZSB2YWx1ZVxuXG4gICAgYXR0clswXSA9IGF0dHJbMF0ucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICAgIGF0dHJbMV0gPSBhdHRyWzFdLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgICBhdHRyWzFdID0gYXR0clsxXS5yZXBsYWNlKC9eWydcIl0oLiopWydcIl0kL2csICckMScpO1xuICAgIHJlc3VsdFthdHRyWzBdXSA9IGF0dHJbMV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogQSBsaW5lLWxldmVsIE0zVTggcGFyc2VyIGV2ZW50IHN0cmVhbS4gSXQgZXhwZWN0cyB0byByZWNlaXZlIGlucHV0IG9uZVxuICogbGluZSBhdCBhIHRpbWUgYW5kIHBlcmZvcm1zIGEgY29udGV4dC1mcmVlIHBhcnNlIG9mIGl0cyBjb250ZW50cy4gQSBzdHJlYW1cbiAqIGludGVycHJldGF0aW9uIG9mIGEgbWFuaWZlc3QgY2FuIGJlIHVzZWZ1bCBpZiB0aGUgbWFuaWZlc3QgaXMgZXhwZWN0ZWQgdG9cbiAqIGJlIHRvbyBsYXJnZSB0byBmaXQgY29tZm9ydGFibHkgaW50byBtZW1vcnkgb3IgdGhlIGVudGlyZXR5IG9mIHRoZSBpbnB1dFxuICogaXMgbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZS4gT3RoZXJ3aXNlLCBpdCdzIHByb2JhYmx5IG11Y2ggZWFzaWVyIHRvIHdvcmtcbiAqIHdpdGggYSByZWd1bGFyIGBQYXJzZXJgIG9iamVjdC5cbiAqXG4gKiBQcm9kdWNlcyBgZGF0YWAgZXZlbnRzIHdpdGggYW4gb2JqZWN0IHRoYXQgY2FwdHVyZXMgdGhlIHBhcnNlcidzXG4gKiBpbnRlcnByZXRhdGlvbiBvZiB0aGUgaW5wdXQuIFRoYXQgb2JqZWN0IGhhcyBhIHByb3BlcnR5IGB0YWdgIHRoYXQgaXMgb25lXG4gKiBvZiBgdXJpYCwgYGNvbW1lbnRgLCBvciBgdGFnYC4gVVJJcyBvbmx5IGhhdmUgYSBzaW5nbGUgYWRkaXRpb25hbFxuICogcHJvcGVydHksIGBsaW5lYCwgd2hpY2ggY2FwdHVyZXMgdGhlIGVudGlyZXR5IG9mIHRoZSBpbnB1dCB3aXRob3V0XG4gKiBpbnRlcnByZXRhdGlvbi4gQ29tbWVudHMgc2ltaWxhcmx5IGhhdmUgYSBzaW5nbGUgYWRkaXRpb25hbCBwcm9wZXJ0eVxuICogYHRleHRgIHdoaWNoIGlzIHRoZSBpbnB1dCB3aXRob3V0IHRoZSBsZWFkaW5nIGAjYC5cbiAqXG4gKiBUYWdzIGFsd2F5cyBoYXZlIGEgcHJvcGVydHkgYHRhZ1R5cGVgIHdoaWNoIGlzIHRoZSBsb3dlci1jYXNlZCB2ZXJzaW9uIG9mXG4gKiB0aGUgTTNVOCBkaXJlY3RpdmUgd2l0aG91dCB0aGUgYCNFWFRgIG9yIGAjRVhULVgtYCBwcmVmaXguIEZvciBpbnN0YW5jZSxcbiAqIGAjRVhULVgtTUVESUEtU0VRVUVOQ0VgIGJlY29tZXMgYG1lZGlhLXNlcXVlbmNlYCB3aGVuIHBhcnNlZC4gVW5yZWNvZ25pemVkXG4gKiB0YWdzIGFyZSBnaXZlbiB0aGUgdGFnIHR5cGUgYHVua25vd25gIGFuZCBhIHNpbmdsZSBhZGRpdGlvbmFsIHByb3BlcnR5XG4gKiBgZGF0YWAgd2l0aCB0aGUgcmVtYWluZGVyIG9mIHRoZSBpbnB1dC5cbiAqXG4gKiBAY2xhc3MgUGFyc2VTdHJlYW1cbiAqIEBleHRlbmRzIFN0cmVhbVxuICovXG5cblxudmFyIFBhcnNlU3RyZWFtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyZWFtKSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhcnNlU3RyZWFtLCBfU3RyZWFtKTtcblxuICBmdW5jdGlvbiBQYXJzZVN0cmVhbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdHJlYW0uY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmN1c3RvbVBhcnNlcnMgPSBbXTtcbiAgICBfdGhpcy50YWdNYXBwZXJzID0gW107XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gYWRkaXRpb25hbCBsaW5lIG9mIGlucHV0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluZSBhIHNpbmdsZSBsaW5lIG9mIGFuIE0zVTggZmlsZSB0byBwYXJzZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQYXJzZVN0cmVhbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGxpbmUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBtYXRjaDtcbiAgICB2YXIgZXZlbnQ7IC8vIHN0cmlwIHdoaXRlc3BhY2VcblxuICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcblxuICAgIGlmIChsaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gaWdub3JlIGVtcHR5IGxpbmVzXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBVUklzXG5cblxuICAgIGlmIChsaW5lWzBdICE9PSAnIycpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgdHlwZTogJ3VyaScsXG4gICAgICAgIHVyaTogbGluZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBtYXAgdGFnc1xuXG5cbiAgICB2YXIgbmV3TGluZXMgPSB0aGlzLnRhZ01hcHBlcnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG1hcHBlcikge1xuICAgICAgdmFyIG1hcHBlZExpbmUgPSBtYXBwZXIobGluZSk7IC8vIHNraXAgaWYgdW5jaGFuZ2VkXG5cbiAgICAgIGlmIChtYXBwZWRMaW5lID09PSBsaW5lKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2MuY29uY2F0KFttYXBwZWRMaW5lXSk7XG4gICAgfSwgW2xpbmVdKTtcbiAgICBuZXdMaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChuZXdMaW5lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzMi5jdXN0b21QYXJzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChfdGhpczIuY3VzdG9tUGFyc2Vyc1tpXS5jYWxsKF90aGlzMiwgbmV3TGluZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQ29tbWVudHNcblxuXG4gICAgICBpZiAobmV3TGluZS5pbmRleE9mKCcjRVhUJykgIT09IDApIHtcbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgdHlwZTogJ2NvbW1lbnQnLFxuICAgICAgICAgIHRleHQ6IG5ld0xpbmUuc2xpY2UoMSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBzdHJpcCBvZmYgYW55IGNhcnJpYWdlIHJldHVybnMgaGVyZSBzbyB0aGUgcmVnZXggbWF0Y2hpbmdcbiAgICAgIC8vIGRvZXNuJ3QgaGF2ZSB0byBhY2NvdW50IGZvciB0aGVtLlxuXG5cbiAgICAgIG5ld0xpbmUgPSBuZXdMaW5lLnJlcGxhY2UoJ1xccicsICcnKTsgLy8gVGFnc1xuXG4gICAgICBtYXRjaCA9IC9eI0VYVE0zVS8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdtM3UnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFRJTkY6PyhbMC05XFwuXSopPyw/KC4qKT8kLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2luZidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5kdXJhdGlvbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgZXZlbnQudGl0bGUgPSBtYXRjaFsyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1UQVJHRVREVVJBVElPTjo/KFswLTkuXSopPy8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICd0YXJnZXRkdXJhdGlvbidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5kdXJhdGlvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jWkVOLVRPVEFMLURVUkFUSU9OOj8oWzAtOS5dKik/Ly5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ3RvdGFsZHVyYXRpb24nXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuZHVyYXRpb24gPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IC9eI0VYVC1YLVZFUlNJT046PyhbMC05Ll0qKT8vLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAndmVyc2lvbidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC52ZXJzaW9uID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1NRURJQS1TRVFVRU5DRTo/KFxcLT9bMC05Ll0qKT8vLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnbWVkaWEtc2VxdWVuY2UnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQubnVtYmVyID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1ESVNDT05USU5VSVRZLVNFUVVFTkNFOj8oXFwtP1swLTkuXSopPy8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdkaXNjb250aW51aXR5LXNlcXVlbmNlJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50Lm51bWJlciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtUExBWUxJU1QtVFlQRTo/KC4qKT8kLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ3BsYXlsaXN0LXR5cGUnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQucGxheWxpc3RUeXBlID0gbWF0Y2hbMV07XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtQllURVJBTkdFOj8oWzAtOS5dKik/QD8oWzAtOS5dKik/Ly5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2J5dGVyYW5nZSdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5sZW5ndGggPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgZXZlbnQub2Zmc2V0ID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1BTExPVy1DQUNIRTo/KFlFU3xOTyk/Ly5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2FsbG93LWNhY2hlJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmFsbG93ZWQgPSAhL05PLy50ZXN0KG1hdGNoWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1NQVA6PyguKikkLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ21hcCdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7XG5cbiAgICAgICAgICBpZiAoYXR0cmlidXRlcy5VUkkpIHtcbiAgICAgICAgICAgIGV2ZW50LnVyaSA9IGF0dHJpYnV0ZXMuVVJJO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLkJZVEVSQU5HRSkge1xuICAgICAgICAgICAgdmFyIF9hdHRyaWJ1dGVzJEJZVEVSQU5HRSA9IGF0dHJpYnV0ZXMuQllURVJBTkdFLnNwbGl0KCdAJyksXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gX2F0dHJpYnV0ZXMkQllURVJBTkdFWzBdLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IF9hdHRyaWJ1dGVzJEJZVEVSQU5HRVsxXTtcblxuICAgICAgICAgICAgZXZlbnQuYnl0ZXJhbmdlID0ge307XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgICAgZXZlbnQuYnl0ZXJhbmdlLmxlbmd0aCA9IHBhcnNlSW50KGxlbmd0aCwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICAgIGV2ZW50LmJ5dGVyYW5nZS5vZmZzZXQgPSBwYXJzZUludChvZmZzZXQsIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtU1RSRUFNLUlORjo/KC4qKSQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnc3RyZWFtLWluZidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzID0gcGFyc2VBdHRyaWJ1dGVzKG1hdGNoWzFdKTtcblxuICAgICAgICAgIGlmIChldmVudC5hdHRyaWJ1dGVzLlJFU09MVVRJT04pIHtcbiAgICAgICAgICAgIHZhciBzcGxpdCA9IGV2ZW50LmF0dHJpYnV0ZXMuUkVTT0xVVElPTi5zcGxpdCgneCcpO1xuICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSB7fTtcblxuICAgICAgICAgICAgaWYgKHNwbGl0WzBdKSB7XG4gICAgICAgICAgICAgIHJlc29sdXRpb24ud2lkdGggPSBwYXJzZUludChzcGxpdFswXSwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3BsaXRbMV0pIHtcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbi5oZWlnaHQgPSBwYXJzZUludChzcGxpdFsxXSwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gPSByZXNvbHV0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC5hdHRyaWJ1dGVzLkJBTkRXSURUSCkge1xuICAgICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5CQU5EV0lEVEggPSBwYXJzZUludChldmVudC5hdHRyaWJ1dGVzLkJBTkRXSURUSCwgMTApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC5hdHRyaWJ1dGVzWydQUk9HUkFNLUlEJ10pIHtcbiAgICAgICAgICAgIGV2ZW50LmF0dHJpYnV0ZXNbJ1BST0dSQU0tSUQnXSA9IHBhcnNlSW50KGV2ZW50LmF0dHJpYnV0ZXNbJ1BST0dSQU0tSUQnXSwgMTApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1NRURJQTo/KC4qKSQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnbWVkaWEnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtRU5ETElTVC8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdlbmRsaXN0J1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtRElTQ09OVElOVUlUWS8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdkaXNjb250aW51aXR5J1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtUFJPR1JBTS1EQVRFLVRJTUU6PyguKikkLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ3Byb2dyYW0tZGF0ZS10aW1lJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmRhdGVUaW1lU3RyaW5nID0gbWF0Y2hbMV07XG4gICAgICAgICAgZXZlbnQuZGF0ZVRpbWVPYmplY3QgPSBuZXcgRGF0ZShtYXRjaFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtS0VZOj8oLiopJC8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdrZXknXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7IC8vIHBhcnNlIHRoZSBJViBzdHJpbmcgaW50byBhIFVpbnQzMkFycmF5XG5cbiAgICAgICAgICBpZiAoZXZlbnQuYXR0cmlidXRlcy5JVikge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmF0dHJpYnV0ZXMuSVYuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT09ICcweCcpIHtcbiAgICAgICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5JViA9IGV2ZW50LmF0dHJpYnV0ZXMuSVYuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLklWID0gZXZlbnQuYXR0cmlidXRlcy5JVi5tYXRjaCgvLns4fS9nKTtcbiAgICAgICAgICAgIGV2ZW50LmF0dHJpYnV0ZXMuSVZbMF0gPSBwYXJzZUludChldmVudC5hdHRyaWJ1dGVzLklWWzBdLCAxNik7XG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLklWWzFdID0gcGFyc2VJbnQoZXZlbnQuYXR0cmlidXRlcy5JVlsxXSwgMTYpO1xuICAgICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5JVlsyXSA9IHBhcnNlSW50KGV2ZW50LmF0dHJpYnV0ZXMuSVZbMl0sIDE2KTtcbiAgICAgICAgICAgIGV2ZW50LmF0dHJpYnV0ZXMuSVZbM10gPSBwYXJzZUludChldmVudC5hdHRyaWJ1dGVzLklWWzNdLCAxNik7XG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLklWID0gbmV3IFVpbnQzMkFycmF5KGV2ZW50LmF0dHJpYnV0ZXMuSVYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1TVEFSVDo/KC4qKSQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnc3RhcnQnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlc1snVElNRS1PRkZTRVQnXSA9IHBhcnNlRmxvYXQoZXZlbnQuYXR0cmlidXRlc1snVElNRS1PRkZTRVQnXSk7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5QUkVDSVNFID0gL1lFUy8udGVzdChldmVudC5hdHRyaWJ1dGVzLlBSRUNJU0UpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IC9eI0VYVC1YLUNVRS1PVVQtQ09OVDo/KC4qKT8kLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2N1ZS1vdXQtY29udCdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5kYXRhID0gbWF0Y2hbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnQuZGF0YSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IC9eI0VYVC1YLUNVRS1PVVQ6PyguKik/JC8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdjdWUtb3V0J1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmRhdGEgPSBtYXRjaFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudC5kYXRhID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtQ1VFLUlOOj8oLiopPyQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnY3VlLWluJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmRhdGEgPSBtYXRjaFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudC5kYXRhID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHVua25vd24gdGFnIHR5cGVcblxuXG4gICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgIGRhdGE6IG5ld0xpbmUuc2xpY2UoNClcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBwYXJzZXIgZm9yIGN1c3RvbSBoZWFkZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMgICAgICAgICAgICAgIGEgbWFwIG9mIG9wdGlvbnMgZm9yIHRoZSBhZGRlZCBwYXJzZXJcbiAgICogQHBhcmFtIHtSZWdFeHB9ICAgb3B0aW9ucy5leHByZXNzaW9uICAgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIGN1c3RvbSBoZWFkZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgb3B0aW9ucy5jdXN0b21UeXBlICAgdGhlIGN1c3RvbSB0eXBlIHRvIHJlZ2lzdGVyIHRvIHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZGF0YVBhcnNlcl0gZnVuY3Rpb24gdG8gcGFyc2UgdGhlIGxpbmUgaW50byBhbiBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMuc2VnbWVudF0gICAgc2hvdWxkIHRhZyBkYXRhIGJlIGF0dGFjaGVkIHRvIHRoZSBzZWdtZW50IG9iamVjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRQYXJzZXIgPSBmdW5jdGlvbiBhZGRQYXJzZXIoX3JlZikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4cHJlc3Npb24gPSBfcmVmLmV4cHJlc3Npb24sXG4gICAgICAgIGN1c3RvbVR5cGUgPSBfcmVmLmN1c3RvbVR5cGUsXG4gICAgICAgIGRhdGFQYXJzZXIgPSBfcmVmLmRhdGFQYXJzZXIsXG4gICAgICAgIHNlZ21lbnQgPSBfcmVmLnNlZ21lbnQ7XG5cbiAgICBpZiAodHlwZW9mIGRhdGFQYXJzZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRhdGFQYXJzZXIgPSBmdW5jdGlvbiBkYXRhUGFyc2VyKGxpbmUpIHtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuY3VzdG9tUGFyc2Vycy5wdXNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLmV4ZWMobGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBfdGhpczMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgICB0eXBlOiAnY3VzdG9tJyxcbiAgICAgICAgICBkYXRhOiBkYXRhUGFyc2VyKGxpbmUpLFxuICAgICAgICAgIGN1c3RvbVR5cGU6IGN1c3RvbVR5cGUsXG4gICAgICAgICAgc2VnbWVudDogc2VnbWVudFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIGhlYWRlciBtYXBwZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICAgb3B0aW9uc1xuICAgKiBAcGFyYW0ge1JlZ0V4cH0gICBvcHRpb25zLmV4cHJlc3Npb24gICBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgY3VzdG9tIGhlYWRlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm1hcCAgICAgICAgICBmdW5jdGlvbiB0byB0cmFuc2xhdGUgdGFnIGludG8gYSBkaWZmZXJlbnQgdGFnXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFRhZ01hcHBlciA9IGZ1bmN0aW9uIGFkZFRhZ01hcHBlcihfcmVmMikge1xuICAgIHZhciBleHByZXNzaW9uID0gX3JlZjIuZXhwcmVzc2lvbixcbiAgICAgICAgbWFwID0gX3JlZjIubWFwO1xuXG4gICAgdmFyIG1hcEZuID0gZnVuY3Rpb24gbWFwRm4obGluZSkge1xuICAgICAgaWYgKGV4cHJlc3Npb24udGVzdChsaW5lKSkge1xuICAgICAgICByZXR1cm4gbWFwKGxpbmUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuXG4gICAgdGhpcy50YWdNYXBwZXJzLnB1c2gobWFwRm4pO1xuICB9O1xuXG4gIHJldHVybiBQYXJzZVN0cmVhbTtcbn0oU3RyZWFtKTtcblxuZnVuY3Rpb24gZGVjb2RlQjY0VG9VaW50OEFycmF5KGI2NFRleHQpIHtcbiAgdmFyIGRlY29kZWRTdHJpbmcgPSB3aW5kb3cuYXRvYihiNjRUZXh0IHx8ICcnKTtcbiAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZFN0cmluZy5sZW5ndGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGVjb2RlZFN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldID0gZGVjb2RlZFN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEEgcGFyc2VyIGZvciBNM1U4IGZpbGVzLiBUaGUgY3VycmVudCBpbnRlcnByZXRhdGlvbiBvZiB0aGUgaW5wdXQgaXNcbiAqIGV4cG9zZWQgYXMgYSBwcm9wZXJ0eSBgbWFuaWZlc3RgIG9uIHBhcnNlciBvYmplY3RzLiBJdCdzIGp1c3QgdHdvIGxpbmVzIHRvXG4gKiBjcmVhdGUgYW5kIHBhcnNlIGEgbWFuaWZlc3Qgb25jZSB5b3UgaGF2ZSB0aGUgY29udGVudHMgYXZhaWxhYmxlIGFzIGEgc3RyaW5nOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcGFyc2VyID0gbmV3IG0zdTguUGFyc2VyKCk7XG4gKiBwYXJzZXIucHVzaCh4aHIucmVzcG9uc2VUZXh0KTtcbiAqIGBgYFxuICpcbiAqIE5ldyBpbnB1dCBjYW4gbGF0ZXIgYmUgYXBwbGllZCB0byB1cGRhdGUgdGhlIG1hbmlmZXN0IG9iamVjdCBieSBjYWxsaW5nXG4gKiBgcHVzaGAgYWdhaW4uXG4gKlxuICogVGhlIHBhcnNlciBhdHRlbXB0cyB0byBjcmVhdGUgYSB1c2FibGUgbWFuaWZlc3Qgb2JqZWN0IGV2ZW4gaWYgdGhlXG4gKiB1bmRlcmx5aW5nIGlucHV0IGlzIHNvbWV3aGF0IG5vbnNlbnNpY2FsLiBJdCBlbWl0cyBgaW5mb2AgYW5kIGB3YXJuaW5nYFxuICogZXZlbnRzIGR1cmluZyB0aGUgcGFyc2UgaWYgaXQgZW5jb3VudGVycyBpbnB1dCB0aGF0IHNlZW1zIGludmFsaWQgb3JcbiAqIHJlcXVpcmVzIHNvbWUgcHJvcGVydHkgb2YgdGhlIG1hbmlmZXN0IG9iamVjdCB0byBiZSBkZWZhdWx0ZWQuXG4gKlxuICogQGNsYXNzIFBhcnNlclxuICogQGV4dGVuZHMgU3RyZWFtXG4gKi9cblxudmFyIFBhcnNlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1N0cmVhbSkge1xuICBfaW5oZXJpdHNMb29zZShQYXJzZXIsIF9TdHJlYW0pO1xuXG4gIGZ1bmN0aW9uIFBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdHJlYW0uY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxpbmVTdHJlYW0gPSBuZXcgTGluZVN0cmVhbSgpO1xuICAgIF90aGlzLnBhcnNlU3RyZWFtID0gbmV3IFBhcnNlU3RyZWFtKCk7XG5cbiAgICBfdGhpcy5saW5lU3RyZWFtLnBpcGUoX3RoaXMucGFyc2VTdHJlYW0pO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtdGhpcyAqL1xuXG5cbiAgICB2YXIgc2VsZiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpO1xuICAgIC8qIGVzbGludC1lbmFibGUgY29uc2lzdGVudC10aGlzICovXG5cblxuICAgIHZhciB1cmlzID0gW107XG4gICAgdmFyIGN1cnJlbnRVcmkgPSB7fTsgLy8gaWYgc3BlY2lmaWVkLCB0aGUgYWN0aXZlIEVYVC1YLU1BUCBkZWZpbml0aW9uXG5cbiAgICB2YXIgY3VycmVudE1hcDsgLy8gaWYgc3BlY2lmaWVkLCB0aGUgYWN0aXZlIGRlY3J5cHRpb24ga2V5XG5cbiAgICB2YXIgX2tleTtcblxuICAgIHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4gICAgdmFyIGRlZmF1bHRNZWRpYUdyb3VwcyA9IHtcbiAgICAgICdBVURJTyc6IHt9LFxuICAgICAgJ1ZJREVPJzoge30sXG4gICAgICAnQ0xPU0VELUNBUFRJT05TJzoge30sXG4gICAgICAnU1VCVElUTEVTJzoge31cbiAgICB9OyAvLyBUaGlzIGlzIHRoZSBXaWRldmluZSBVVUlEIGZyb20gREFTSCBJRiBJT1AuIFRoZSBzYW1lIGV4YWN0IHN0cmluZyBpc1xuICAgIC8vIHVzZWQgaW4gTVBEcyB3aXRoIFdpZGV2aW5lIGVuY3J5cHRlZCBzdHJlYW1zLlxuXG4gICAgdmFyIHdpZGV2aW5lVXVpZCA9ICd1cm46dXVpZDplZGVmOGJhOS03OWQ2LTRhY2UtYTNjOC0yN2RjZDUxZDIxZWQnOyAvLyBncm91cCBzZWdtZW50cyBpbnRvIG51bWJlcmVkIHRpbWVsaW5lcyBkZWxpbmVhdGVkIGJ5IGRpc2NvbnRpbnVpdGllc1xuXG4gICAgdmFyIGN1cnJlbnRUaW1lbGluZSA9IDA7IC8vIHRoZSBtYW5pZmVzdCBpcyBlbXB0eSB1bnRpbCB0aGUgcGFyc2Ugc3RyZWFtIGJlZ2lucyBkZWxpdmVyaW5nIGRhdGFcblxuICAgIF90aGlzLm1hbmlmZXN0ID0ge1xuICAgICAgYWxsb3dDYWNoZTogdHJ1ZSxcbiAgICAgIGRpc2NvbnRpbnVpdHlTdGFydHM6IFtdLFxuICAgICAgc2VnbWVudHM6IFtdXG4gICAgfTsgLy8gdXBkYXRlIHRoZSBtYW5pZmVzdCB3aXRoIHRoZSBtM3U4IGVudHJ5IGZyb20gdGhlIHBhcnNlIHN0cmVhbVxuXG4gICAgX3RoaXMucGFyc2VTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHZhciBtZWRpYUdyb3VwO1xuICAgICAgdmFyIHJlbmRpdGlvbjtcbiAgICAgICh7XG4gICAgICAgIHRhZzogZnVuY3Rpb24gdGFnKCkge1xuICAgICAgICAgIC8vIHN3aXRjaCBiYXNlZCBvbiB0aGUgdGFnIHR5cGVcbiAgICAgICAgICAoKHtcbiAgICAgICAgICAgICdhbGxvdy1jYWNoZSc6IGZ1bmN0aW9uIGFsbG93Q2FjaGUoKSB7XG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuYWxsb3dDYWNoZSA9IGVudHJ5LmFsbG93ZWQ7XG5cbiAgICAgICAgICAgICAgaWYgKCEoJ2FsbG93ZWQnIGluIGVudHJ5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignaW5mbycsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdkZWZhdWx0aW5nIGFsbG93Q2FjaGUgdG8gWUVTJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuYWxsb3dDYWNoZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBieXRlcmFuZ2U6IGZ1bmN0aW9uIGJ5dGVyYW5nZSgpIHtcbiAgICAgICAgICAgICAgdmFyIGJ5dGVyYW5nZSA9IHt9O1xuXG4gICAgICAgICAgICAgIGlmICgnbGVuZ3RoJyBpbiBlbnRyeSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVcmkuYnl0ZXJhbmdlID0gYnl0ZXJhbmdlO1xuICAgICAgICAgICAgICAgIGJ5dGVyYW5nZS5sZW5ndGggPSBlbnRyeS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAoISgnb2Zmc2V0JyBpbiBlbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignaW5mbycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2RlZmF1bHRpbmcgb2Zmc2V0IHRvIHplcm8nXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGVudHJ5Lm9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCdvZmZzZXQnIGluIGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVyaS5ieXRlcmFuZ2UgPSBieXRlcmFuZ2U7XG4gICAgICAgICAgICAgICAgYnl0ZXJhbmdlLm9mZnNldCA9IGVudHJ5Lm9mZnNldDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZGxpc3Q6IGZ1bmN0aW9uIGVuZGxpc3QoKSB7XG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuZW5kTGlzdCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5mOiBmdW5jdGlvbiBpbmYoKSB7XG4gICAgICAgICAgICAgIGlmICghKCdtZWRpYVNlcXVlbmNlJyBpbiB0aGlzLm1hbmlmZXN0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QubWVkaWFTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdpbmZvJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2RlZmF1bHRpbmcgbWVkaWEgc2VxdWVuY2UgdG8gemVybydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghKCdkaXNjb250aW51aXR5U2VxdWVuY2UnIGluIHRoaXMubWFuaWZlc3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5kaXNjb250aW51aXR5U2VxdWVuY2UgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignaW5mbycsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdkZWZhdWx0aW5nIGRpc2NvbnRpbnVpdHkgc2VxdWVuY2UgdG8gemVybydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5kdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VXJpLmR1cmF0aW9uID0gZW50cnkuZHVyYXRpb247XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZW50cnkuZHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VXJpLmR1cmF0aW9uID0gMC4wMTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2luZm8nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAndXBkYXRpbmcgemVybyBzZWdtZW50IGR1cmF0aW9uIHRvIGEgc21hbGwgdmFsdWUnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LnNlZ21lbnRzID0gdXJpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBrZXk6IGZ1bmN0aW9uIGtleSgpIHtcbiAgICAgICAgICAgICAgaWYgKCFlbnRyeS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lnbm9yaW5nIGtleSBkZWNsYXJhdGlvbiB3aXRob3V0IGF0dHJpYnV0ZSBsaXN0J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSAvLyBjbGVhciB0aGUgYWN0aXZlIGVuY3J5cHRpb24ga2V5XG5cblxuICAgICAgICAgICAgICBpZiAoZW50cnkuYXR0cmlidXRlcy5NRVRIT0QgPT09ICdOT05FJykge1xuICAgICAgICAgICAgICAgIF9rZXkgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghZW50cnkuYXR0cmlidXRlcy5VUkkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaWdub3Jpbmcga2V5IGRlY2xhcmF0aW9uIHdpdGhvdXQgVVJJJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSAvLyBjaGVjayBpZiB0aGUgY29udGVudCBpcyBlbmNyeXB0ZWQgZm9yIFdpZGV2aW5lXG4gICAgICAgICAgICAgIC8vIFdpZGV2aW5lL0hMUyBzcGVjOiBodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vd3Zkb2NzL1dpZGV2aW5lX0RSTV9ITFMucGRmXG5cblxuICAgICAgICAgICAgICBpZiAoZW50cnkuYXR0cmlidXRlcy5LRVlGT1JNQVQgPT09IHdpZGV2aW5lVXVpZCkge1xuICAgICAgICAgICAgICAgIHZhciBWQUxJRF9NRVRIT0RTID0gWydTQU1QTEUtQUVTJywgJ1NBTVBMRS1BRVMtQ1RSJywgJ1NBTVBMRS1BRVMtQ0VOQyddO1xuXG4gICAgICAgICAgICAgICAgaWYgKFZBTElEX01FVEhPRFMuaW5kZXhPZihlbnRyeS5hdHRyaWJ1dGVzLk1FVEhPRCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkIGtleSBtZXRob2QgcHJvdmlkZWQgZm9yIFdpZGV2aW5lJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmF0dHJpYnV0ZXMuTUVUSE9EID09PSAnU0FNUExFLUFFUy1DRU5DJykge1xuICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU0FNUExFLUFFUy1DRU5DIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgU0FNUExFLUFFUy1DVFIgaW5zdGVhZCdcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLlVSSS5zdWJzdHJpbmcoMCwgMjMpICE9PSAnZGF0YTp0ZXh0L3BsYWluO2Jhc2U2NCwnKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkIGtleSBVUkkgcHJvdmlkZWQgZm9yIFdpZGV2aW5lJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCEoZW50cnkuYXR0cmlidXRlcy5LRVlJRCAmJiBlbnRyeS5hdHRyaWJ1dGVzLktFWUlELnN1YnN0cmluZygwLCAyKSA9PT0gJzB4JykpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQga2V5IElEIHByb3ZpZGVkIGZvciBXaWRldmluZSdcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gLy8gaWYgV2lkZXZpbmUga2V5IGF0dHJpYnV0ZXMgYXJlIHZhbGlkLCBzdG9yZSB0aGVtIGFzIGBjb250ZW50UHJvdGVjdGlvbmBcbiAgICAgICAgICAgICAgICAvLyBvbiB0aGUgbWFuaWZlc3QgdG8gZW11bGF0ZSBXaWRldmluZSB0YWcgc3RydWN0dXJlIGluIGEgREFTSCBtcGRcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5jb250ZW50UHJvdGVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICdjb20ud2lkZXZpbmUuYWxwaGEnOiB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzY2hlbWVJZFVyaTogZW50cnkuYXR0cmlidXRlcy5LRVlGT1JNQVQsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlICcweCcgZnJvbSB0aGUga2V5IGlkIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgIGtleUlkOiBlbnRyeS5hdHRyaWJ1dGVzLktFWUlELnN1YnN0cmluZygyKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgdGhlIGJhc2U2NC1lbmNvZGVkIFBTU0ggYm94XG4gICAgICAgICAgICAgICAgICAgIHBzc2g6IGRlY29kZUI2NFRvVWludDhBcnJheShlbnRyeS5hdHRyaWJ1dGVzLlVSSS5zcGxpdCgnLCcpWzFdKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFlbnRyeS5hdHRyaWJ1dGVzLk1FVEhPRCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdkZWZhdWx0aW5nIGtleSBtZXRob2QgdG8gQUVTLTEyOCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSAvLyBzZXR1cCBhbiBlbmNyeXB0aW9uIGtleSBmb3IgdXBjb21pbmcgc2VnbWVudHNcblxuXG4gICAgICAgICAgICAgIF9rZXkgPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBlbnRyeS5hdHRyaWJ1dGVzLk1FVEhPRCB8fCAnQUVTLTEyOCcsXG4gICAgICAgICAgICAgICAgdXJpOiBlbnRyeS5hdHRyaWJ1dGVzLlVSSVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZW50cnkuYXR0cmlidXRlcy5JViAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfa2V5Lml2ID0gZW50cnkuYXR0cmlidXRlcy5JVjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdtZWRpYS1zZXF1ZW5jZSc6IGZ1bmN0aW9uIG1lZGlhU2VxdWVuY2UoKSB7XG4gICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZW50cnkubnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBpbnZhbGlkIG1lZGlhIHNlcXVlbmNlOiAnICsgZW50cnkubnVtYmVyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5tZWRpYVNlcXVlbmNlID0gZW50cnkubnVtYmVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdkaXNjb250aW51aXR5LXNlcXVlbmNlJzogZnVuY3Rpb24gZGlzY29udGludWl0eVNlcXVlbmNlKCkge1xuICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGVudHJ5Lm51bWJlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaWdub3JpbmcgaW52YWxpZCBkaXNjb250aW51aXR5IHNlcXVlbmNlOiAnICsgZW50cnkubnVtYmVyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5kaXNjb250aW51aXR5U2VxdWVuY2UgPSBlbnRyeS5udW1iZXI7XG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lbGluZSA9IGVudHJ5Lm51bWJlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncGxheWxpc3QtdHlwZSc6IGZ1bmN0aW9uIHBsYXlsaXN0VHlwZSgpIHtcbiAgICAgICAgICAgICAgaWYgKCEvVk9EfEVWRU5ULy50ZXN0KGVudHJ5LnBsYXlsaXN0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaWdub3JpbmcgdW5rbm93biBwbGF5bGlzdCB0eXBlOiAnICsgZW50cnkucGxheWxpc3RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LnBsYXlsaXN0VHlwZSA9IGVudHJ5LnBsYXlsaXN0VHlwZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXA6IGZ1bmN0aW9uIG1hcCgpIHtcbiAgICAgICAgICAgICAgY3VycmVudE1hcCA9IHt9O1xuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS51cmkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWFwLnVyaSA9IGVudHJ5LnVyaTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5ieXRlcmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWFwLmJ5dGVyYW5nZSA9IGVudHJ5LmJ5dGVyYW5nZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdzdHJlYW0taW5mJzogZnVuY3Rpb24gc3RyZWFtSW5mKCkge1xuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LnBsYXlsaXN0cyA9IHVyaXM7XG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QubWVkaWFHcm91cHMgPSB0aGlzLm1hbmlmZXN0Lm1lZGlhR3JvdXBzIHx8IGRlZmF1bHRNZWRpYUdyb3VwcztcblxuICAgICAgICAgICAgICBpZiAoIWVudHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaWdub3JpbmcgZW1wdHkgc3RyZWFtLWluZiBhdHRyaWJ1dGVzJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghY3VycmVudFVyaS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVyaS5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfZXh0ZW5kcyhjdXJyZW50VXJpLmF0dHJpYnV0ZXMsIGVudHJ5LmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lZGlhOiBmdW5jdGlvbiBtZWRpYSgpIHtcbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5tZWRpYUdyb3VwcyA9IHRoaXMubWFuaWZlc3QubWVkaWFHcm91cHMgfHwgZGVmYXVsdE1lZGlhR3JvdXBzO1xuXG4gICAgICAgICAgICAgIGlmICghKGVudHJ5LmF0dHJpYnV0ZXMgJiYgZW50cnkuYXR0cmlidXRlcy5UWVBFICYmIGVudHJ5LmF0dHJpYnV0ZXNbJ0dST1VQLUlEJ10gJiYgZW50cnkuYXR0cmlidXRlcy5OQU1FKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBpbmNvbXBsZXRlIG9yIG1pc3NpbmcgbWVkaWEgZ3JvdXAnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IC8vIGZpbmQgdGhlIG1lZGlhIGdyb3VwLCBjcmVhdGluZyBkZWZhdWx0cyBhcyBuZWNlc3NhcnlcblxuXG4gICAgICAgICAgICAgIHZhciBtZWRpYUdyb3VwVHlwZSA9IHRoaXMubWFuaWZlc3QubWVkaWFHcm91cHNbZW50cnkuYXR0cmlidXRlcy5UWVBFXTtcbiAgICAgICAgICAgICAgbWVkaWFHcm91cFR5cGVbZW50cnkuYXR0cmlidXRlc1snR1JPVVAtSUQnXV0gPSBtZWRpYUdyb3VwVHlwZVtlbnRyeS5hdHRyaWJ1dGVzWydHUk9VUC1JRCddXSB8fCB7fTtcbiAgICAgICAgICAgICAgbWVkaWFHcm91cCA9IG1lZGlhR3JvdXBUeXBlW2VudHJ5LmF0dHJpYnV0ZXNbJ0dST1VQLUlEJ11dOyAvLyBjb2xsZWN0IHRoZSByZW5kaXRpb24gbWV0YWRhdGFcblxuICAgICAgICAgICAgICByZW5kaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogL3llcy9pLnRlc3QoZW50cnkuYXR0cmlidXRlcy5ERUZBVUxUKVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGlmIChyZW5kaXRpb24uZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi5hdXRvc2VsZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW5kaXRpb24uYXV0b3NlbGVjdCA9IC95ZXMvaS50ZXN0KGVudHJ5LmF0dHJpYnV0ZXMuQVVUT1NFTEVDVCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZW50cnkuYXR0cmlidXRlcy5MQU5HVUFHRSkge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi5sYW5ndWFnZSA9IGVudHJ5LmF0dHJpYnV0ZXMuTEFOR1VBR0U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZW50cnkuYXR0cmlidXRlcy5VUkkpIHtcbiAgICAgICAgICAgICAgICByZW5kaXRpb24udXJpID0gZW50cnkuYXR0cmlidXRlcy5VUkk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZW50cnkuYXR0cmlidXRlc1snSU5TVFJFQU0tSUQnXSkge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi5pbnN0cmVhbUlkID0gZW50cnkuYXR0cmlidXRlc1snSU5TVFJFQU0tSUQnXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLkNIQVJBQ1RFUklTVElDUykge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi5jaGFyYWN0ZXJpc3RpY3MgPSBlbnRyeS5hdHRyaWJ1dGVzLkNIQVJBQ1RFUklTVElDUztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLkZPUkNFRCkge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi5mb3JjZWQgPSAveWVzL2kudGVzdChlbnRyeS5hdHRyaWJ1dGVzLkZPUkNFRCk7XG4gICAgICAgICAgICAgIH0gLy8gaW5zZXJ0IHRoZSBuZXcgcmVuZGl0aW9uXG5cblxuICAgICAgICAgICAgICBtZWRpYUdyb3VwW2VudHJ5LmF0dHJpYnV0ZXMuTkFNRV0gPSByZW5kaXRpb247XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzY29udGludWl0eTogZnVuY3Rpb24gZGlzY29udGludWl0eSgpIHtcbiAgICAgICAgICAgICAgY3VycmVudFRpbWVsaW5lICs9IDE7XG4gICAgICAgICAgICAgIGN1cnJlbnRVcmkuZGlzY29udGludWl0eSA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuZGlzY29udGludWl0eVN0YXJ0cy5wdXNoKHVyaXMubGVuZ3RoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncHJvZ3JhbS1kYXRlLXRpbWUnOiBmdW5jdGlvbiBwcm9ncmFtRGF0ZVRpbWUoKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5tYW5pZmVzdC5kYXRlVGltZVN0cmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAvLyBQUk9HUkFNLURBVEUtVElNRSBpcyBhIG1lZGlhLXNlZ21lbnQgdGFnLCBidXQgZm9yIGJhY2t3YXJkc1xuICAgICAgICAgICAgICAgIC8vIGNvbXBhdGliaWxpdHksIHdlIGFkZCB0aGUgZmlyc3Qgb2NjdXJlbmNlIG9mIHRoZSBQUk9HUkFNLURBVEUtVElNRSB0YWdcbiAgICAgICAgICAgICAgICAvLyB0byB0aGUgbWFuaWZlc3Qgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQ29uc2lkZXIgcmVtb3ZpbmcgdGhpcyBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvblxuICAgICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuZGF0ZVRpbWVTdHJpbmcgPSBlbnRyeS5kYXRlVGltZVN0cmluZztcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmRhdGVUaW1lT2JqZWN0ID0gZW50cnkuZGF0ZVRpbWVPYmplY3Q7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjdXJyZW50VXJpLmRhdGVUaW1lU3RyaW5nID0gZW50cnkuZGF0ZVRpbWVTdHJpbmc7XG4gICAgICAgICAgICAgIGN1cnJlbnRVcmkuZGF0ZVRpbWVPYmplY3QgPSBlbnRyeS5kYXRlVGltZU9iamVjdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YXJnZXRkdXJhdGlvbjogZnVuY3Rpb24gdGFyZ2V0ZHVyYXRpb24oKSB7XG4gICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZW50cnkuZHVyYXRpb24pIHx8IGVudHJ5LmR1cmF0aW9uIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBpbnZhbGlkIHRhcmdldCBkdXJhdGlvbjogJyArIGVudHJ5LmR1cmF0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC50YXJnZXREdXJhdGlvbiA9IGVudHJ5LmR1cmF0aW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvdGFsZHVyYXRpb246IGZ1bmN0aW9uIHRvdGFsZHVyYXRpb24oKSB7XG4gICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZW50cnkuZHVyYXRpb24pIHx8IGVudHJ5LmR1cmF0aW9uIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBpbnZhbGlkIHRvdGFsIGR1cmF0aW9uOiAnICsgZW50cnkuZHVyYXRpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LnRvdGFsRHVyYXRpb24gPSBlbnRyeS5kdXJhdGlvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgICAgICAgIGlmICghZW50cnkuYXR0cmlidXRlcyB8fCBpc05hTihlbnRyeS5hdHRyaWJ1dGVzWydUSU1FLU9GRlNFVCddKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBzdGFydCBkZWNsYXJhdGlvbiB3aXRob3V0IGFwcHJvcHJpYXRlIGF0dHJpYnV0ZSBsaXN0J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3Quc3RhcnQgPSB7XG4gICAgICAgICAgICAgICAgdGltZU9mZnNldDogZW50cnkuYXR0cmlidXRlc1snVElNRS1PRkZTRVQnXSxcbiAgICAgICAgICAgICAgICBwcmVjaXNlOiBlbnRyeS5hdHRyaWJ1dGVzLlBSRUNJU0VcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnY3VlLW91dCc6IGZ1bmN0aW9uIGN1ZU91dCgpIHtcbiAgICAgICAgICAgICAgY3VycmVudFVyaS5jdWVPdXQgPSBlbnRyeS5kYXRhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdjdWUtb3V0LWNvbnQnOiBmdW5jdGlvbiBjdWVPdXRDb250KCkge1xuICAgICAgICAgICAgICBjdXJyZW50VXJpLmN1ZU91dENvbnQgPSBlbnRyeS5kYXRhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdjdWUtaW4nOiBmdW5jdGlvbiBjdWVJbigpIHtcbiAgICAgICAgICAgICAgY3VycmVudFVyaS5jdWVJbiA9IGVudHJ5LmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlbZW50cnkudGFnVHlwZV0gfHwgbm9vcCkuY2FsbChzZWxmKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXJpOiBmdW5jdGlvbiB1cmkoKSB7XG4gICAgICAgICAgY3VycmVudFVyaS51cmkgPSBlbnRyeS51cmk7XG4gICAgICAgICAgdXJpcy5wdXNoKGN1cnJlbnRVcmkpOyAvLyBpZiBubyBleHBsaWNpdCBkdXJhdGlvbiB3YXMgZGVjbGFyZWQsIHVzZSB0aGUgdGFyZ2V0IGR1cmF0aW9uXG5cbiAgICAgICAgICBpZiAodGhpcy5tYW5pZmVzdC50YXJnZXREdXJhdGlvbiAmJiAhKCdkdXJhdGlvbicgaW4gY3VycmVudFVyaSkpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ2RlZmF1bHRpbmcgc2VnbWVudCBkdXJhdGlvbiB0byB0aGUgdGFyZ2V0IGR1cmF0aW9uJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50VXJpLmR1cmF0aW9uID0gdGhpcy5tYW5pZmVzdC50YXJnZXREdXJhdGlvbjtcbiAgICAgICAgICB9IC8vIGFubm90YXRlIHdpdGggZW5jcnlwdGlvbiBpbmZvcm1hdGlvbiwgaWYgbmVjZXNzYXJ5XG5cblxuICAgICAgICAgIGlmIChfa2V5KSB7XG4gICAgICAgICAgICBjdXJyZW50VXJpLmtleSA9IF9rZXk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFVyaS50aW1lbGluZSA9IGN1cnJlbnRUaW1lbGluZTsgLy8gYW5ub3RhdGUgd2l0aCBpbml0aWFsaXphdGlvbiBzZWdtZW50IGluZm9ybWF0aW9uLCBpZiBuZWNlc3NhcnlcblxuICAgICAgICAgIGlmIChjdXJyZW50TWFwKSB7XG4gICAgICAgICAgICBjdXJyZW50VXJpLm1hcCA9IGN1cnJlbnRNYXA7XG4gICAgICAgICAgfSAvLyBwcmVwYXJlIGZvciB0aGUgbmV4dCBVUklcblxuXG4gICAgICAgICAgY3VycmVudFVyaSA9IHt9O1xuICAgICAgICB9LFxuICAgICAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50KCkgey8vIGNvbW1lbnRzIGFyZSBub3QgaW1wb3J0YW50IGZvciBwbGF5YmFja1xuICAgICAgICB9LFxuICAgICAgICBjdXN0b206IGZ1bmN0aW9uIGN1c3RvbSgpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIHNlZ21lbnQtbGV2ZWwgZGF0YSBhdHRhY2ggdGhlIG91dHB1dCB0byB0aGUgc2VnbWVudFxuICAgICAgICAgIGlmIChlbnRyeS5zZWdtZW50KSB7XG4gICAgICAgICAgICBjdXJyZW50VXJpLmN1c3RvbSA9IGN1cnJlbnRVcmkuY3VzdG9tIHx8IHt9O1xuICAgICAgICAgICAgY3VycmVudFVyaS5jdXN0b21bZW50cnkuY3VzdG9tVHlwZV0gPSBlbnRyeS5kYXRhOyAvLyBpZiB0aGlzIGlzIG1hbmlmZXN0LWxldmVsIGRhdGEgYXR0YWNoIHRvIHRoZSB0b3AgbGV2ZWwgbWFuaWZlc3Qgb2JqZWN0XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuY3VzdG9tID0gdGhpcy5tYW5pZmVzdC5jdXN0b20gfHwge307XG4gICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmN1c3RvbVtlbnRyeS5jdXN0b21UeXBlXSA9IGVudHJ5LmRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVtlbnRyeS50eXBlXS5jYWxsKHNlbGYpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgaW5wdXQgc3RyaW5nIGFuZCB1cGRhdGUgdGhlIG1hbmlmZXN0IG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNodW5rIGEgcG90ZW50aWFsbHkgaW5jb21wbGV0ZSBwb3J0aW9uIG9mIHRoZSBtYW5pZmVzdFxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQYXJzZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5wdXNoID0gZnVuY3Rpb24gcHVzaChjaHVuaykge1xuICAgIHRoaXMubGluZVN0cmVhbS5wdXNoKGNodW5rKTtcbiAgfVxuICAvKipcbiAgICogRmx1c2ggYW55IHJlbWFpbmluZyBpbnB1dC4gVGhpcyBjYW4gYmUgaGFuZHkgaWYgdGhlIGxhc3QgbGluZSBvZiBhbiBNM1U4XG4gICAqIG1hbmlmZXN0IGRpZCBub3QgY29udGFpbiBhIHRyYWlsaW5nIG5ld2xpbmUgYnV0IHRoZSBmaWxlIGhhcyBiZWVuXG4gICAqIGNvbXBsZXRlbHkgcmVjZWl2ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVuZCA9IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAvLyBmbHVzaCBhbnkgYnVmZmVyZWQgaW5wdXRcbiAgICB0aGlzLmxpbmVTdHJlYW0ucHVzaCgnXFxuJyk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhbiBhZGRpdGlvbmFsIHBhcnNlciBmb3Igbm9uLXN0YW5kYXJkIHRhZ3NcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICAgb3B0aW9ucyAgICAgICAgICAgICAgYSBtYXAgb2Ygb3B0aW9ucyBmb3IgdGhlIGFkZGVkIHBhcnNlclxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gICBvcHRpb25zLmV4cHJlc3Npb24gICBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgY3VzdG9tIGhlYWRlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICBvcHRpb25zLnR5cGUgICAgICAgICB0aGUgdHlwZSB0byByZWdpc3RlciB0byB0aGUgb3V0cHV0XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmRhdGFQYXJzZXJdIGZ1bmN0aW9uIHRvIHBhcnNlIHRoZSBsaW5lIGludG8gYW4gb2JqZWN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnNlZ21lbnRdICAgIHNob3VsZCB0YWcgZGF0YSBiZSBhdHRhY2hlZCB0byB0aGUgc2VnbWVudCBvYmplY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUGFyc2VyID0gZnVuY3Rpb24gYWRkUGFyc2VyKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBhcnNlU3RyZWFtLmFkZFBhcnNlcihvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIGhlYWRlciBtYXBwZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICAgb3B0aW9uc1xuICAgKiBAcGFyYW0ge1JlZ0V4cH0gICBvcHRpb25zLmV4cHJlc3Npb24gICBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgY3VzdG9tIGhlYWRlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm1hcCAgICAgICAgICBmdW5jdGlvbiB0byB0cmFuc2xhdGUgdGFnIGludG8gYSBkaWZmZXJlbnQgdGFnXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFRhZ01hcHBlciA9IGZ1bmN0aW9uIGFkZFRhZ01hcHBlcihvcHRpb25zKSB7XG4gICAgdGhpcy5wYXJzZVN0cmVhbS5hZGRUYWdNYXBwZXIob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlcjtcbn0oU3RyZWFtKTtcblxuZXhwb3J0IHsgTGluZVN0cmVhbSwgUGFyc2VTdHJlYW0sIFBhcnNlciB9O1xuIiwiLyohIEBuYW1lIG1wZC1wYXJzZXIgQHZlcnNpb24gMC44LjEgQGxpY2Vuc2UgQXBhY2hlLTIuMCAqL1xuaW1wb3J0IHdpbmRvdyQxIGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG52YXIgdmVyc2lvbiA9IFwiMC44LjFcIjtcblxudmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiAhIW9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgb2JqZWN0cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBvYmplY3RzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdHMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIHNvdXJjZSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRba2V5XSkgJiYgQXJyYXkuaXNBcnJheShzb3VyY2Vba2V5XSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSByZXN1bHRba2V5XS5jb25jYXQoc291cmNlW2tleV0pO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChyZXN1bHRba2V5XSkgJiYgaXNPYmplY3Qoc291cmNlW2tleV0pKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHNvdXJjZVtrZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwge30pO1xufTtcbnZhciB2YWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMobykge1xuICByZXR1cm4gT2JqZWN0LmtleXMobykubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ba107XG4gIH0pO1xufTtcblxudmFyIHJhbmdlID0gZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXN1bHQucHVzaChpKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiBmbGF0dGVuKGxpc3RzKSB7XG4gIHJldHVybiBsaXN0cy5yZWR1Y2UoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4geC5jb25jYXQoeSk7XG4gIH0sIFtdKTtcbn07XG52YXIgZnJvbSA9IGZ1bmN0aW9uIGZyb20obGlzdCkge1xuICBpZiAoIWxpc3QubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdC5wdXNoKGxpc3RbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgZmluZEluZGV4ZXMgPSBmdW5jdGlvbiBmaW5kSW5kZXhlcyhsLCBrZXkpIHtcbiAgcmV0dXJuIGwucmVkdWNlKGZ1bmN0aW9uIChhLCBlLCBpKSB7XG4gICAgaWYgKGVba2V5XSkge1xuICAgICAgYS5wdXNoKGkpO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9LCBbXSk7XG59O1xuXG52YXIgZXJyb3JzID0ge1xuICBJTlZBTElEX05VTUJFUl9PRl9QRVJJT0Q6ICdJTlZBTElEX05VTUJFUl9PRl9QRVJJT0QnLFxuICBEQVNIX0VNUFRZX01BTklGRVNUOiAnREFTSF9FTVBUWV9NQU5JRkVTVCcsXG4gIERBU0hfSU5WQUxJRF9YTUw6ICdEQVNIX0lOVkFMSURfWE1MJyxcbiAgTk9fQkFTRV9VUkw6ICdOT19CQVNFX1VSTCcsXG4gIE1JU1NJTkdfU0VHTUVOVF9JTkZPUk1BVElPTjogJ01JU1NJTkdfU0VHTUVOVF9JTkZPUk1BVElPTicsXG4gIFNFR01FTlRfVElNRV9VTlNQRUNJRklFRDogJ1NFR01FTlRfVElNRV9VTlNQRUNJRklFRCcsXG4gIFVOU1VQUE9SVEVEX1VUQ19USU1JTkdfU0NIRU1FOiAnVU5TVVBQT1JURURfVVRDX1RJTUlOR19TQ0hFTUUnXG59O1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIHVybFRvb2xraXQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4vLyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE4MDhcblxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuKGZ1bmN0aW9uKHJvb3QpIHsgXG4vKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuXG4gIHZhciBVUkxfUkVHRVggPSAvXigoPzpbYS16QS1aMC05K1xcLS5dKzopPykoXFwvXFwvW15cXC8/I10qKT8oKD86W15cXC9cXD8jXSpcXC8pKi4qPyk/Pyg7Lio/KT8oXFw/Lio/KT8oIy4qPyk/JC87XG4gIHZhciBGSVJTVF9TRUdNRU5UX1JFR0VYID0gL14oW15cXC8/I10qKSguKikkLztcbiAgdmFyIFNMQVNIX0RPVF9SRUdFWCA9IC8oPzpcXC98XilcXC4oPz1cXC8pL2c7XG4gIHZhciBTTEFTSF9ET1RfRE9UX1JFR0VYID0gLyg/OlxcL3xeKVxcLlxcLlxcLyg/IVxcLlxcLlxcLykuKj8oPz1cXC8pL2c7XG5cbiAgdmFyIFVSTFRvb2xraXQgPSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgIC8vIElmIG9wdHMuYWx3YXlzTm9ybWFsaXplIGlzIHRydWUgdGhlbiB0aGUgcGF0aCB3aWxsIGFsd2F5cyBiZSBub3JtYWxpemVkIGV2ZW4gd2hlbiBpdCBzdGFydHMgd2l0aCAvIG9yIC8vXG4gICAgLy8gRS5nXG4gICAgLy8gV2l0aCBvcHRzLmFsd2F5c05vcm1hbGl6ZSA9IGZhbHNlIChkZWZhdWx0LCBzcGVjIGNvbXBsaWFudClcbiAgICAvLyBodHRwOi8vYS5jb20vYi9jZCArIC9lL2YvLi4vZyA9PiBodHRwOi8vYS5jb20vZS9mLy4uL2dcbiAgICAvLyBXaXRoIG9wdHMuYWx3YXlzTm9ybWFsaXplID0gdHJ1ZSAobm90IHNwZWMgY29tcGxpYW50KVxuICAgIC8vIGh0dHA6Ly9hLmNvbS9iL2NkICsgL2UvZi8uLi9nID0+IGh0dHA6Ly9hLmNvbS9lL2dcbiAgICBidWlsZEFic29sdXRlVVJMOiBmdW5jdGlvbihiYXNlVVJMLCByZWxhdGl2ZVVSTCwgb3B0cykge1xuICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAvLyByZW1vdmUgYW55IHJlbWFpbmluZyBzcGFjZSBhbmQgQ1JMRlxuICAgICAgYmFzZVVSTCA9IGJhc2VVUkwudHJpbSgpO1xuICAgICAgcmVsYXRpdmVVUkwgPSByZWxhdGl2ZVVSTC50cmltKCk7XG4gICAgICBpZiAoIXJlbGF0aXZlVVJMKSB7XG4gICAgICAgIC8vIDJhKSBJZiB0aGUgZW1iZWRkZWQgVVJMIGlzIGVudGlyZWx5IGVtcHR5LCBpdCBpbmhlcml0cyB0aGVcbiAgICAgICAgLy8gZW50aXJlIGJhc2UgVVJMIChpLmUuLCBpcyBzZXQgZXF1YWwgdG8gdGhlIGJhc2UgVVJMKVxuICAgICAgICAvLyBhbmQgd2UgYXJlIGRvbmUuXG4gICAgICAgIGlmICghb3B0cy5hbHdheXNOb3JtYWxpemUpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZVVSTDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmFzZVBhcnRzRm9yTm9ybWFsaXNlID0gVVJMVG9vbGtpdC5wYXJzZVVSTChiYXNlVVJMKTtcbiAgICAgICAgaWYgKCFiYXNlUGFydHNGb3JOb3JtYWxpc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byBwYXJzZSBiYXNlIFVSTC4nKTtcbiAgICAgICAgfVxuICAgICAgICBiYXNlUGFydHNGb3JOb3JtYWxpc2UucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChiYXNlUGFydHNGb3JOb3JtYWxpc2UucGF0aCk7XG4gICAgICAgIHJldHVybiBVUkxUb29sa2l0LmJ1aWxkVVJMRnJvbVBhcnRzKGJhc2VQYXJ0c0Zvck5vcm1hbGlzZSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVsYXRpdmVQYXJ0cyA9IFVSTFRvb2xraXQucGFyc2VVUkwocmVsYXRpdmVVUkwpO1xuICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgdHJ5aW5nIHRvIHBhcnNlIHJlbGF0aXZlIFVSTC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWxhdGl2ZVBhcnRzLnNjaGVtZSkge1xuICAgICAgICAvLyAyYikgSWYgdGhlIGVtYmVkZGVkIFVSTCBzdGFydHMgd2l0aCBhIHNjaGVtZSBuYW1lLCBpdCBpc1xuICAgICAgICAvLyBpbnRlcnByZXRlZCBhcyBhbiBhYnNvbHV0ZSBVUkwgYW5kIHdlIGFyZSBkb25lLlxuICAgICAgICBpZiAoIW9wdHMuYWx3YXlzTm9ybWFsaXplKSB7XG4gICAgICAgICAgcmV0dXJuIHJlbGF0aXZlVVJMO1xuICAgICAgICB9XG4gICAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChyZWxhdGl2ZVBhcnRzLnBhdGgpO1xuICAgICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhyZWxhdGl2ZVBhcnRzKTtcbiAgICAgIH1cbiAgICAgIHZhciBiYXNlUGFydHMgPSBVUkxUb29sa2l0LnBhcnNlVVJMKGJhc2VVUkwpO1xuICAgICAgaWYgKCFiYXNlUGFydHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciB0cnlpbmcgdG8gcGFyc2UgYmFzZSBVUkwuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJhc2VQYXJ0cy5uZXRMb2MgJiYgYmFzZVBhcnRzLnBhdGggJiYgYmFzZVBhcnRzLnBhdGhbMF0gIT09ICcvJykge1xuICAgICAgICAvLyBJZiBuZXRMb2MgbWlzc2luZyBhbmQgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggJy8nLCBhc3N1bWUgZXZlcnRoaW5nIGJlZm9yZSB0aGUgZmlyc3QgJy8nIGlzIHRoZSBuZXRMb2NcbiAgICAgICAgLy8gVGhpcyBjYXVzZXMgJ2V4YW1wbGUuY29tL2EnIHRvIGJlIGhhbmRsZWQgYXMgJy8vZXhhbXBsZS5jb20vYScgaW5zdGVhZCBvZiAnL2V4YW1wbGUuY29tL2EnXG4gICAgICAgIHZhciBwYXRoUGFydHMgPSBGSVJTVF9TRUdNRU5UX1JFR0VYLmV4ZWMoYmFzZVBhcnRzLnBhdGgpO1xuICAgICAgICBiYXNlUGFydHMubmV0TG9jID0gcGF0aFBhcnRzWzFdO1xuICAgICAgICBiYXNlUGFydHMucGF0aCA9IHBhdGhQYXJ0c1syXTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlUGFydHMubmV0TG9jICYmICFiYXNlUGFydHMucGF0aCkge1xuICAgICAgICBiYXNlUGFydHMucGF0aCA9ICcvJztcbiAgICAgIH1cbiAgICAgIHZhciBidWlsdFBhcnRzID0ge1xuICAgICAgICAvLyAyYykgT3RoZXJ3aXNlLCB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSBzY2hlbWUgb2ZcbiAgICAgICAgLy8gdGhlIGJhc2UgVVJMLlxuICAgICAgICBzY2hlbWU6IGJhc2VQYXJ0cy5zY2hlbWUsXG4gICAgICAgIG5ldExvYzogcmVsYXRpdmVQYXJ0cy5uZXRMb2MsXG4gICAgICAgIHBhdGg6IG51bGwsXG4gICAgICAgIHBhcmFtczogcmVsYXRpdmVQYXJ0cy5wYXJhbXMsXG4gICAgICAgIHF1ZXJ5OiByZWxhdGl2ZVBhcnRzLnF1ZXJ5LFxuICAgICAgICBmcmFnbWVudDogcmVsYXRpdmVQYXJ0cy5mcmFnbWVudFxuICAgICAgfTtcbiAgICAgIGlmICghcmVsYXRpdmVQYXJ0cy5uZXRMb2MpIHtcbiAgICAgICAgLy8gMykgSWYgdGhlIGVtYmVkZGVkIFVSTCdzIDxuZXRfbG9jPiBpcyBub24tZW1wdHksIHdlIHNraXAgdG9cbiAgICAgICAgLy8gU3RlcCA3LiAgT3RoZXJ3aXNlLCB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSA8bmV0X2xvYz5cbiAgICAgICAgLy8gKGlmIGFueSkgb2YgdGhlIGJhc2UgVVJMLlxuICAgICAgICBidWlsdFBhcnRzLm5ldExvYyA9IGJhc2VQYXJ0cy5uZXRMb2M7XG4gICAgICAgIC8vIDQpIElmIHRoZSBlbWJlZGRlZCBVUkwgcGF0aCBpcyBwcmVjZWRlZCBieSBhIHNsYXNoIFwiL1wiLCB0aGVcbiAgICAgICAgLy8gcGF0aCBpcyBub3QgcmVsYXRpdmUgYW5kIHdlIHNraXAgdG8gU3RlcCA3LlxuICAgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5wYXRoWzBdICE9PSAnLycpIHtcbiAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucGF0aCkge1xuICAgICAgICAgICAgLy8gNSkgSWYgdGhlIGVtYmVkZGVkIFVSTCBwYXRoIGlzIGVtcHR5IChhbmQgbm90IHByZWNlZGVkIGJ5IGFcbiAgICAgICAgICAgIC8vIHNsYXNoKSwgdGhlbiB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSBiYXNlIFVSTCBwYXRoXG4gICAgICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBiYXNlUGFydHMucGF0aDtcbiAgICAgICAgICAgIC8vIDVhKSBpZiB0aGUgZW1iZWRkZWQgVVJMJ3MgPHBhcmFtcz4gaXMgbm9uLWVtcHR5LCB3ZSBza2lwIHRvXG4gICAgICAgICAgICAvLyBzdGVwIDc7IG90aGVyd2lzZSwgaXQgaW5oZXJpdHMgdGhlIDxwYXJhbXM+IG9mIHRoZSBiYXNlXG4gICAgICAgICAgICAvLyBVUkwgKGlmIGFueSkgYW5kXG4gICAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucGFyYW1zKSB7XG4gICAgICAgICAgICAgIGJ1aWx0UGFydHMucGFyYW1zID0gYmFzZVBhcnRzLnBhcmFtcztcbiAgICAgICAgICAgICAgLy8gNWIpIGlmIHRoZSBlbWJlZGRlZCBVUkwncyA8cXVlcnk+IGlzIG5vbi1lbXB0eSwgd2Ugc2tpcCB0b1xuICAgICAgICAgICAgICAvLyBzdGVwIDc7IG90aGVyd2lzZSwgaXQgaW5oZXJpdHMgdGhlIDxxdWVyeT4gb2YgdGhlIGJhc2VcbiAgICAgICAgICAgICAgLy8gVVJMIChpZiBhbnkpIGFuZCB3ZSBza2lwIHRvIHN0ZXAgNy5cbiAgICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzLnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgYnVpbHRQYXJ0cy5xdWVyeSA9IGJhc2VQYXJ0cy5xdWVyeTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyA2KSBUaGUgbGFzdCBzZWdtZW50IG9mIHRoZSBiYXNlIFVSTCdzIHBhdGggKGFueXRoaW5nXG4gICAgICAgICAgICAvLyBmb2xsb3dpbmcgdGhlIHJpZ2h0bW9zdCBzbGFzaCBcIi9cIiwgb3IgdGhlIGVudGlyZSBwYXRoIGlmIG5vXG4gICAgICAgICAgICAvLyBzbGFzaCBpcyBwcmVzZW50KSBpcyByZW1vdmVkIGFuZCB0aGUgZW1iZWRkZWQgVVJMJ3MgcGF0aCBpc1xuICAgICAgICAgICAgLy8gYXBwZW5kZWQgaW4gaXRzIHBsYWNlLlxuICAgICAgICAgICAgdmFyIGJhc2VVUkxQYXRoID0gYmFzZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICB2YXIgbmV3UGF0aCA9IGJhc2VVUkxQYXRoLnN1YnN0cmluZygwLCBiYXNlVVJMUGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgKyByZWxhdGl2ZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBVUkxUb29sa2l0Lm5vcm1hbGl6ZVBhdGgobmV3UGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYnVpbHRQYXJ0cy5wYXRoID09PSBudWxsKSB7XG4gICAgICAgIGJ1aWx0UGFydHMucGF0aCA9IG9wdHMuYWx3YXlzTm9ybWFsaXplID8gVVJMVG9vbGtpdC5ub3JtYWxpemVQYXRoKHJlbGF0aXZlUGFydHMucGF0aCkgOiByZWxhdGl2ZVBhcnRzLnBhdGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhidWlsdFBhcnRzKTtcbiAgICB9LFxuICAgIHBhcnNlVVJMOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgIHZhciBwYXJ0cyA9IFVSTF9SRUdFWC5leGVjKHVybCk7XG4gICAgICBpZiAoIXBhcnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lOiBwYXJ0c1sxXSB8fCAnJyxcbiAgICAgICAgbmV0TG9jOiBwYXJ0c1syXSB8fCAnJyxcbiAgICAgICAgcGF0aDogcGFydHNbM10gfHwgJycsXG4gICAgICAgIHBhcmFtczogcGFydHNbNF0gfHwgJycsXG4gICAgICAgIHF1ZXJ5OiBwYXJ0c1s1XSB8fCAnJyxcbiAgICAgICAgZnJhZ21lbnQ6IHBhcnRzWzZdIHx8ICcnXG4gICAgICB9O1xuICAgIH0sXG4gICAgbm9ybWFsaXplUGF0aDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgLy8gVGhlIGZvbGxvd2luZyBvcGVyYXRpb25zIGFyZVxuICAgICAgLy8gdGhlbiBhcHBsaWVkLCBpbiBvcmRlciwgdG8gdGhlIG5ldyBwYXRoOlxuICAgICAgLy8gNmEpIEFsbCBvY2N1cnJlbmNlcyBvZiBcIi4vXCIsIHdoZXJlIFwiLlwiIGlzIGEgY29tcGxldGUgcGF0aFxuICAgICAgLy8gc2VnbWVudCwgYXJlIHJlbW92ZWQuXG4gICAgICAvLyA2YikgSWYgdGhlIHBhdGggZW5kcyB3aXRoIFwiLlwiIGFzIGEgY29tcGxldGUgcGF0aCBzZWdtZW50LFxuICAgICAgLy8gdGhhdCBcIi5cIiBpcyByZW1vdmVkLlxuICAgICAgcGF0aCA9IHBhdGguc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKS5yZXBsYWNlKFNMQVNIX0RPVF9SRUdFWCwgJycpO1xuICAgICAgLy8gNmMpIEFsbCBvY2N1cnJlbmNlcyBvZiBcIjxzZWdtZW50Pi8uLi9cIiwgd2hlcmUgPHNlZ21lbnQ+IGlzIGFcbiAgICAgIC8vIGNvbXBsZXRlIHBhdGggc2VnbWVudCBub3QgZXF1YWwgdG8gXCIuLlwiLCBhcmUgcmVtb3ZlZC5cbiAgICAgIC8vIFJlbW92YWwgb2YgdGhlc2UgcGF0aCBzZWdtZW50cyBpcyBwZXJmb3JtZWQgaXRlcmF0aXZlbHksXG4gICAgICAvLyByZW1vdmluZyB0aGUgbGVmdG1vc3QgbWF0Y2hpbmcgcGF0dGVybiBvbiBlYWNoIGl0ZXJhdGlvbixcbiAgICAgIC8vIHVudGlsIG5vIG1hdGNoaW5nIHBhdHRlcm4gcmVtYWlucy5cbiAgICAgIC8vIDZkKSBJZiB0aGUgcGF0aCBlbmRzIHdpdGggXCI8c2VnbWVudD4vLi5cIiwgd2hlcmUgPHNlZ21lbnQ+IGlzIGFcbiAgICAgIC8vIGNvbXBsZXRlIHBhdGggc2VnbWVudCBub3QgZXF1YWwgdG8gXCIuLlwiLCB0aGF0XG4gICAgICAvLyBcIjxzZWdtZW50Pi8uLlwiIGlzIHJlbW92ZWQuXG4gICAgICB3aGlsZSAocGF0aC5sZW5ndGggIT09IChwYXRoID0gcGF0aC5yZXBsYWNlKFNMQVNIX0RPVF9ET1RfUkVHRVgsICcnKSkubGVuZ3RoKSB7fSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XG4gICAgfSxcbiAgICBidWlsZFVSTEZyb21QYXJ0czogZnVuY3Rpb24ocGFydHMpIHtcbiAgICAgIHJldHVybiBwYXJ0cy5zY2hlbWUgKyBwYXJ0cy5uZXRMb2MgKyBwYXJ0cy5wYXRoICsgcGFydHMucGFyYW1zICsgcGFydHMucXVlcnkgKyBwYXJ0cy5mcmFnbWVudDtcbiAgICB9XG4gIH07XG5cbi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cbiAgbW9kdWxlLmV4cG9ydHMgPSBVUkxUb29sa2l0O1xufSkoY29tbW9uanNHbG9iYWwpO1xuLyoganNoaW50IGlnbm9yZTplbmQgKi9cbn0pO1xuXG52YXIgcmVzb2x2ZVVybCA9IGZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZVVybCwgcmVsYXRpdmVVcmwpIHtcbiAgLy8gcmV0dXJuIGVhcmx5IGlmIHdlIGRvbid0IG5lZWQgdG8gcmVzb2x2ZVxuICBpZiAoL15bYS16XSs6L2kudGVzdChyZWxhdGl2ZVVybCkpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVVcmw7XG4gIH0gLy8gaWYgdGhlIGJhc2UgVVJMIGlzIHJlbGF0aXZlIHRoZW4gY29tYmluZSB3aXRoIHRoZSBjdXJyZW50IGxvY2F0aW9uXG5cblxuICBpZiAoIS9cXC9cXC8vaS50ZXN0KGJhc2VVcmwpKSB7XG4gICAgYmFzZVVybCA9IHVybFRvb2xraXQuYnVpbGRBYnNvbHV0ZVVSTCh3aW5kb3ckMS5sb2NhdGlvbi5ocmVmLCBiYXNlVXJsKTtcbiAgfVxuXG4gIHJldHVybiB1cmxUb29sa2l0LmJ1aWxkQWJzb2x1dGVVUkwoYmFzZVVybCwgcmVsYXRpdmVVcmwpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaW5nbGVVcmlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1cmkgLSByZWxhdGl2ZSBsb2NhdGlvbiBvZiBzZWdtZW50XG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVzb2x2ZWRVcmkgLSByZXNvbHZlZCBsb2NhdGlvbiBvZiBzZWdtZW50XG4gKiBAcHJvcGVydHkge09iamVjdH0gYnl0ZXJhbmdlIC0gT2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gb24gaG93IHRvIG1ha2UgYnl0ZSByYW5nZVxuICogICByZXF1ZXN0cyBmb2xsb3dpbmcgYnl0ZS1yYW5nZS1zcGVjIHBlciBSRkMyNjE2LlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGJ5dGVyYW5nZS5sZW5ndGggLSBsZW5ndGggb2YgcmFuZ2UgcmVxdWVzdFxuICogQHByb3BlcnR5IHtTdHJpbmd9IGJ5dGVyYW5nZS5vZmZzZXQgLSBieXRlIG9mZnNldCBvZiByYW5nZSByZXF1ZXN0XG4gKlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMxNC5odG1sI3NlYzE0LjM1LjFcbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIGEgVVJMVHlwZSBub2RlICg1LjMuOS4yLjMgVGFibGUgMTMpIHRvIGEgc2VnbWVudCBvYmplY3RcbiAqIHRoYXQgY29uZm9ybXMgdG8gaG93IG0zdTgtcGFyc2VyIGlzIHN0cnVjdHVyZWRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL20zdTgtcGFyc2VyXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVcmwgLSBiYXNlVXJsIHByb3ZpZGVkIGJ5IDxCYXNlVXJsPiBub2Rlc1xuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIHNvdXJjZSB1cmwgZm9yIHNlZ21lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZSAtIG9wdGlvbmFsIHJhbmdlIHVzZWQgZm9yIHJhbmdlIGNhbGxzLFxuICogICBmb2xsb3dzICBSRkMgMjYxNiwgQ2xhdXNlIDE0LjM1LjFcbiAqIEByZXR1cm4ge1NpbmdsZVVyaX0gZnVsbCBzZWdtZW50IGluZm9ybWF0aW9uIHRyYW5zZm9ybWVkIGludG8gYSBmb3JtYXQgc2ltaWxhclxuICogICB0byBtM3U4LXBhcnNlclxuICovXG5cbnZhciB1cmxUeXBlVG9TZWdtZW50ID0gZnVuY3Rpb24gdXJsVHlwZVRvU2VnbWVudChfcmVmKSB7XG4gIHZhciBfcmVmJGJhc2VVcmwgPSBfcmVmLmJhc2VVcmwsXG4gICAgICBiYXNlVXJsID0gX3JlZiRiYXNlVXJsID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkYmFzZVVybCxcbiAgICAgIF9yZWYkc291cmNlID0gX3JlZi5zb3VyY2UsXG4gICAgICBzb3VyY2UgPSBfcmVmJHNvdXJjZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNvdXJjZSxcbiAgICAgIF9yZWYkcmFuZ2UgPSBfcmVmLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBfcmVmJHJhbmdlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkcmFuZ2UsXG4gICAgICBfcmVmJGluZGV4UmFuZ2UgPSBfcmVmLmluZGV4UmFuZ2UsXG4gICAgICBpbmRleFJhbmdlID0gX3JlZiRpbmRleFJhbmdlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkaW5kZXhSYW5nZTtcbiAgdmFyIHNlZ21lbnQgPSB7XG4gICAgdXJpOiBzb3VyY2UsXG4gICAgcmVzb2x2ZWRVcmk6IHJlc29sdmVVcmwoYmFzZVVybCB8fCAnJywgc291cmNlKVxuICB9O1xuXG4gIGlmIChyYW5nZSB8fCBpbmRleFJhbmdlKSB7XG4gICAgdmFyIHJhbmdlU3RyID0gcmFuZ2UgPyByYW5nZSA6IGluZGV4UmFuZ2U7XG4gICAgdmFyIHJhbmdlcyA9IHJhbmdlU3RyLnNwbGl0KCctJyk7XG4gICAgdmFyIHN0YXJ0UmFuZ2UgPSBwYXJzZUludChyYW5nZXNbMF0sIDEwKTtcbiAgICB2YXIgZW5kUmFuZ2UgPSBwYXJzZUludChyYW5nZXNbMV0sIDEwKTsgLy8gYnl0ZXJhbmdlIHNob3VsZCBiZSBpbmNsdXNpdmUgYWNjb3JkaW5nIHRvXG4gICAgLy8gUkZDIDI2MTYsIENsYXVzZSAxNC4zNS4xXG5cbiAgICBzZWdtZW50LmJ5dGVyYW5nZSA9IHtcbiAgICAgIGxlbmd0aDogZW5kUmFuZ2UgLSBzdGFydFJhbmdlICsgMSxcbiAgICAgIG9mZnNldDogc3RhcnRSYW5nZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gc2VnbWVudDtcbn07XG52YXIgYnl0ZVJhbmdlVG9TdHJpbmcgPSBmdW5jdGlvbiBieXRlUmFuZ2VUb1N0cmluZyhieXRlcmFuZ2UpIHtcbiAgLy8gYGVuZFJhbmdlYCBpcyBvbmUgbGVzcyB0aGFuIGBvZmZzZXQgKyBsZW5ndGhgIGJlY2F1c2UgdGhlIEhUVFAgcmFuZ2VcbiAgLy8gaGVhZGVyIHVzZXMgaW5jbHVzaXZlIHJhbmdlc1xuICB2YXIgZW5kUmFuZ2UgPSBieXRlcmFuZ2Uub2Zmc2V0ICsgYnl0ZXJhbmdlLmxlbmd0aCAtIDE7XG4gIHJldHVybiBieXRlcmFuZ2Uub2Zmc2V0ICsgXCItXCIgKyBlbmRSYW5nZTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb25zIGZvciBjYWxjdWxhdGluZyB0aGUgcmFuZ2Ugb2YgYXZhaWxhYmxlIHNlZ21lbnRzIGluIHN0YXRpYyBhbmQgZHluYW1pY1xuICogbWFuaWZlc3RzLlxuICovXG5cbnZhciBzZWdtZW50UmFuZ2UgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlbnRpcmUgcmFuZ2Ugb2YgYXZhaWxhYmxlIHNlZ21lbnRzIGZvciBhIHN0YXRpYyBNUERcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAgICogICAgICAgIEluaGVyaXRpZWQgTVBEIGF0dHJpYnV0ZXNcbiAgICogQHJldHVybiB7eyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9fVxuICAgKiAgICAgICAgIFRoZSBzdGFydCBhbmQgZW5kIG51bWJlcnMgZm9yIGF2YWlsYWJsZSBzZWdtZW50c1xuICAgKi9cbiAgc3RhdGljOiBmdW5jdGlvbiBfc3RhdGljKGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUgPSBhdHRyaWJ1dGVzLnRpbWVzY2FsZSxcbiAgICAgICAgdGltZXNjYWxlID0gX2F0dHJpYnV0ZXMkdGltZXNjYWxlID09PSB2b2lkIDAgPyAxIDogX2F0dHJpYnV0ZXMkdGltZXNjYWxlLFxuICAgICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb247XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiBNYXRoLmNlaWwoc291cmNlRHVyYXRpb24gLyAoZHVyYXRpb24gLyB0aW1lc2NhbGUpKVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgbGl2ZSB3aW5kb3cgcmFuZ2Ugb2YgYXZhaWxhYmxlIHNlZ21lbnRzIGZvciBhIGR5bmFtaWMgTVBEXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gICAqICAgICAgICBJbmhlcml0aWVkIE1QRCBhdHRyaWJ1dGVzXG4gICAqIEByZXR1cm4ge3sgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfX1cbiAgICogICAgICAgICBUaGUgc3RhcnQgYW5kIGVuZCBudW1iZXJzIGZvciBhdmFpbGFibGUgc2VnbWVudHNcbiAgICovXG4gIGR5bmFtaWM6IGZ1bmN0aW9uIGR5bmFtaWMoYXR0cmlidXRlcykge1xuICAgIHZhciBOT1cgPSBhdHRyaWJ1dGVzLk5PVyxcbiAgICAgICAgY2xpZW50T2Zmc2V0ID0gYXR0cmlidXRlcy5jbGllbnRPZmZzZXQsXG4gICAgICAgIGF2YWlsYWJpbGl0eVN0YXJ0VGltZSA9IGF0dHJpYnV0ZXMuYXZhaWxhYmlsaXR5U3RhcnRUaW1lLFxuICAgICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUyID0gYXR0cmlidXRlcy50aW1lc2NhbGUsXG4gICAgICAgIHRpbWVzY2FsZSA9IF9hdHRyaWJ1dGVzJHRpbWVzY2FsZTIgPT09IHZvaWQgMCA/IDEgOiBfYXR0cmlidXRlcyR0aW1lc2NhbGUyLFxuICAgICAgICBkdXJhdGlvbiA9IGF0dHJpYnV0ZXMuZHVyYXRpb24sXG4gICAgICAgIF9hdHRyaWJ1dGVzJHN0YXJ0ID0gYXR0cmlidXRlcy5zdGFydCxcbiAgICAgICAgc3RhcnQgPSBfYXR0cmlidXRlcyRzdGFydCA9PT0gdm9pZCAwID8gMCA6IF9hdHRyaWJ1dGVzJHN0YXJ0LFxuICAgICAgICBfYXR0cmlidXRlcyRtaW5pbXVtVXAgPSBhdHRyaWJ1dGVzLm1pbmltdW1VcGRhdGVQZXJpb2QsXG4gICAgICAgIG1pbmltdW1VcGRhdGVQZXJpb2QgPSBfYXR0cmlidXRlcyRtaW5pbXVtVXAgPT09IHZvaWQgMCA/IDAgOiBfYXR0cmlidXRlcyRtaW5pbXVtVXAsXG4gICAgICAgIF9hdHRyaWJ1dGVzJHRpbWVTaGlmdCA9IGF0dHJpYnV0ZXMudGltZVNoaWZ0QnVmZmVyRGVwdGgsXG4gICAgICAgIHRpbWVTaGlmdEJ1ZmZlckRlcHRoID0gX2F0dHJpYnV0ZXMkdGltZVNoaWZ0ID09PSB2b2lkIDAgPyBJbmZpbml0eSA6IF9hdHRyaWJ1dGVzJHRpbWVTaGlmdDtcbiAgICB2YXIgbm93ID0gKE5PVyArIGNsaWVudE9mZnNldCkgLyAxMDAwO1xuICAgIHZhciBwZXJpb2RTdGFydFdDID0gYXZhaWxhYmlsaXR5U3RhcnRUaW1lICsgc3RhcnQ7XG4gICAgdmFyIHBlcmlvZEVuZFdDID0gbm93ICsgbWluaW11bVVwZGF0ZVBlcmlvZDtcbiAgICB2YXIgcGVyaW9kRHVyYXRpb24gPSBwZXJpb2RFbmRXQyAtIHBlcmlvZFN0YXJ0V0M7XG4gICAgdmFyIHNlZ21lbnRDb3VudCA9IE1hdGguY2VpbChwZXJpb2REdXJhdGlvbiAqIHRpbWVzY2FsZSAvIGR1cmF0aW9uKTtcbiAgICB2YXIgYXZhaWxhYmxlU3RhcnQgPSBNYXRoLmZsb29yKChub3cgLSBwZXJpb2RTdGFydFdDIC0gdGltZVNoaWZ0QnVmZmVyRGVwdGgpICogdGltZXNjYWxlIC8gZHVyYXRpb24pO1xuICAgIHZhciBhdmFpbGFibGVFbmQgPSBNYXRoLmZsb29yKChub3cgLSBwZXJpb2RTdGFydFdDKSAqIHRpbWVzY2FsZSAvIGR1cmF0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IE1hdGgubWF4KDAsIGF2YWlsYWJsZVN0YXJ0KSxcbiAgICAgIGVuZDogTWF0aC5taW4oc2VnbWVudENvdW50LCBhdmFpbGFibGVFbmQpXG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogTWFwcyBhIHJhbmdlIG9mIG51bWJlcnMgdG8gb2JqZWN0cyB3aXRoIGluZm9ybWF0aW9uIG5lZWRlZCB0byBidWlsZCB0aGUgY29ycmVzcG9uZGluZ1xuICogc2VnbWVudCBsaXN0XG4gKlxuICogQG5hbWUgdG9TZWdtZW50c0NhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAqICAgICAgICBOdW1iZXIgb2YgdGhlIHNlZ21lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogICAgICAgIEluZGV4IG9mIHRoZSBudW1iZXIgaW4gdGhlIHJhbmdlIGxpc3RcbiAqIEByZXR1cm4ge3sgbnVtYmVyOiBOdW1iZXIsIGR1cmF0aW9uOiBOdW1iZXIsIHRpbWVsaW5lOiBOdW1iZXIsIHRpbWU6IE51bWJlciB9fVxuICogICAgICAgICBPYmplY3Qgd2l0aCBzZWdtZW50IHRpbWluZyBhbmQgZHVyYXRpb24gaW5mb1xuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGNhbGxiYWNrIGZvciBBcnJheS5wcm90b3R5cGUubWFwIGZvciBtYXBwaW5nIGEgcmFuZ2Ugb2YgbnVtYmVycyB0b1xuICogaW5mb3JtYXRpb24gbmVlZGVkIHRvIGJ1aWxkIHRoZSBzZWdtZW50IGxpc3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAqICAgICAgICBJbmhlcml0ZWQgTVBEIGF0dHJpYnV0ZXNcbiAqIEByZXR1cm4ge3RvU2VnbWVudHNDYWxsYmFja31cbiAqICAgICAgICAgQ2FsbGJhY2sgbWFwIGZ1bmN0aW9uXG4gKi9cblxudmFyIHRvU2VnbWVudHMgPSBmdW5jdGlvbiB0b1NlZ21lbnRzKGF0dHJpYnV0ZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIGluZGV4KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gYXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICAgICAgX2F0dHJpYnV0ZXMkdGltZXNjYWxlMyA9IGF0dHJpYnV0ZXMudGltZXNjYWxlLFxuICAgICAgICB0aW1lc2NhbGUgPSBfYXR0cmlidXRlcyR0aW1lc2NhbGUzID09PSB2b2lkIDAgPyAxIDogX2F0dHJpYnV0ZXMkdGltZXNjYWxlMyxcbiAgICAgICAgcGVyaW9kSW5kZXggPSBhdHRyaWJ1dGVzLnBlcmlvZEluZGV4LFxuICAgICAgICBfYXR0cmlidXRlcyRzdGFydE51bWIgPSBhdHRyaWJ1dGVzLnN0YXJ0TnVtYmVyLFxuICAgICAgICBzdGFydE51bWJlciA9IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYiA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYjtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyOiBzdGFydE51bWJlciArIG51bWJlcixcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIHRpbWVzY2FsZSxcbiAgICAgIHRpbWVsaW5lOiBwZXJpb2RJbmRleCxcbiAgICAgIHRpbWU6IGluZGV4ICogZHVyYXRpb25cbiAgICB9O1xuICB9O1xufTtcbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2Ygb2JqZWN0cyBjb250YWluaW5nIHNlZ21lbnQgdGltaW5nIGFuZCBkdXJhdGlvbiBpbmZvIHVzZWQgZm9yXG4gKiBidWlsZGluZyB0aGUgbGlzdCBvZiBzZWdtZW50cy4gVGhpcyB1c2VzIHRoZSBAZHVyYXRpb24gYXR0cmlidXRlIHNwZWNpZmllZFxuICogaW4gdGhlIE1QRCBtYW5pZmVzdCB0byBkZXJpdmUgdGhlIHJhbmdlIG9mIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gKiAgICAgICAgSW5oZXJpdGVkIE1QRCBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHt7bnVtYmVyOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIsIHRpbWU6IG51bWJlciwgdGltZWxpbmU6IG51bWJlcn1bXX1cbiAqICAgICAgICAgTGlzdCBvZiBPYmplY3RzIHdpdGggc2VnbWVudCB0aW1pbmcgYW5kIGR1cmF0aW9uIGluZm9cbiAqL1xuXG52YXIgcGFyc2VCeUR1cmF0aW9uID0gZnVuY3Rpb24gcGFyc2VCeUR1cmF0aW9uKGF0dHJpYnV0ZXMpIHtcbiAgdmFyIF9hdHRyaWJ1dGVzJHR5cGUgPSBhdHRyaWJ1dGVzLnR5cGUsXG4gICAgICB0eXBlID0gX2F0dHJpYnV0ZXMkdHlwZSA9PT0gdm9pZCAwID8gJ3N0YXRpYycgOiBfYXR0cmlidXRlcyR0eXBlLFxuICAgICAgZHVyYXRpb24gPSBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgICAgX2F0dHJpYnV0ZXMkdGltZXNjYWxlNCA9IGF0dHJpYnV0ZXMudGltZXNjYWxlLFxuICAgICAgdGltZXNjYWxlID0gX2F0dHJpYnV0ZXMkdGltZXNjYWxlNCA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHRpbWVzY2FsZTQsXG4gICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb247XG5cbiAgdmFyIF9zZWdtZW50UmFuZ2UkdHlwZSA9IHNlZ21lbnRSYW5nZVt0eXBlXShhdHRyaWJ1dGVzKSxcbiAgICAgIHN0YXJ0ID0gX3NlZ21lbnRSYW5nZSR0eXBlLnN0YXJ0LFxuICAgICAgZW5kID0gX3NlZ21lbnRSYW5nZSR0eXBlLmVuZDtcblxuICB2YXIgc2VnbWVudHMgPSByYW5nZShzdGFydCwgZW5kKS5tYXAodG9TZWdtZW50cyhhdHRyaWJ1dGVzKSk7XG5cbiAgaWYgKHR5cGUgPT09ICdzdGF0aWMnKSB7XG4gICAgdmFyIGluZGV4ID0gc2VnbWVudHMubGVuZ3RoIC0gMTsgLy8gZmluYWwgc2VnbWVudCBtYXkgYmUgbGVzcyB0aGFuIGZ1bGwgc2VnbWVudCBkdXJhdGlvblxuXG4gICAgc2VnbWVudHNbaW5kZXhdLmR1cmF0aW9uID0gc291cmNlRHVyYXRpb24gLSBkdXJhdGlvbiAvIHRpbWVzY2FsZSAqIGluZGV4O1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzO1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGVzIFNlZ21lbnRCYXNlIGludG8gYSBzZXQgb2Ygc2VnbWVudHMuXG4gKiAoREFTSCBTUEVDIFNlY3Rpb24gNS4zLjkuMy4yKSBjb250YWlucyBhIHNldCBvZiA8U2VnbWVudFVSTD4gbm9kZXMuICBFYWNoXG4gKiBub2RlIHNob3VsZCBiZSB0cmFuc2xhdGVkIGludG8gc2VnbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICBPYmplY3QgY29udGFpbmluZyBhbGwgaW5oZXJpdGVkIGF0dHJpYnV0ZXMgZnJvbSBwYXJlbnQgZWxlbWVudHMgd2l0aCBhdHRyaWJ1dGVcbiAqICAgbmFtZXMgYXMga2V5c1xuICogQHJldHVybiB7T2JqZWN0LjxBcnJheT59IGxpc3Qgb2Ygc2VnbWVudHNcbiAqL1xuXG52YXIgc2VnbWVudHNGcm9tQmFzZSA9IGZ1bmN0aW9uIHNlZ21lbnRzRnJvbUJhc2UoYXR0cmlidXRlcykge1xuICB2YXIgYmFzZVVybCA9IGF0dHJpYnV0ZXMuYmFzZVVybCxcbiAgICAgIF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9IGF0dHJpYnV0ZXMuaW5pdGlhbGl6YXRpb24sXG4gICAgICBpbml0aWFsaXphdGlvbiA9IF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9PT0gdm9pZCAwID8ge30gOiBfYXR0cmlidXRlcyRpbml0aWFsaXosXG4gICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb24sXG4gICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUgPSBhdHRyaWJ1dGVzLnRpbWVzY2FsZSxcbiAgICAgIHRpbWVzY2FsZSA9IF9hdHRyaWJ1dGVzJHRpbWVzY2FsZSA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHRpbWVzY2FsZSxcbiAgICAgIF9hdHRyaWJ1dGVzJGluZGV4UmFuZyA9IGF0dHJpYnV0ZXMuaW5kZXhSYW5nZSxcbiAgICAgIGluZGV4UmFuZ2UgPSBfYXR0cmlidXRlcyRpbmRleFJhbmcgPT09IHZvaWQgMCA/ICcnIDogX2F0dHJpYnV0ZXMkaW5kZXhSYW5nLFxuICAgICAgZHVyYXRpb24gPSBhdHRyaWJ1dGVzLmR1cmF0aW9uOyAvLyBiYXNlIHVybCBpcyByZXF1aXJlZCBmb3IgU2VnbWVudEJhc2UgdG8gd29yaywgcGVyIHNwZWMgKFNlY3Rpb24gNS4zLjkuMi4xKVxuXG4gIGlmICghYmFzZVVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMuTk9fQkFTRV9VUkwpO1xuICB9XG5cbiAgdmFyIGluaXRTZWdtZW50ID0gdXJsVHlwZVRvU2VnbWVudCh7XG4gICAgYmFzZVVybDogYmFzZVVybCxcbiAgICBzb3VyY2U6IGluaXRpYWxpemF0aW9uLnNvdXJjZVVSTCxcbiAgICByYW5nZTogaW5pdGlhbGl6YXRpb24ucmFuZ2VcbiAgfSk7XG4gIHZhciBzZWdtZW50ID0gdXJsVHlwZVRvU2VnbWVudCh7XG4gICAgYmFzZVVybDogYmFzZVVybCxcbiAgICBzb3VyY2U6IGJhc2VVcmwsXG4gICAgaW5kZXhSYW5nZTogaW5kZXhSYW5nZVxuICB9KTtcbiAgc2VnbWVudC5tYXAgPSBpbml0U2VnbWVudDsgLy8gSWYgdGhlcmUgaXMgYSBkdXJhdGlvbiwgdXNlIGl0LCBvdGhlcndpc2UgdXNlIHRoZSBnaXZlbiBkdXJhdGlvbiBvZiB0aGUgc291cmNlXG4gIC8vIChzaW5jZSBTZWdtZW50QmFzZSBpcyBvbmx5IGZvciBvbmUgdG90YWwgc2VnbWVudClcblxuICBpZiAoZHVyYXRpb24pIHtcbiAgICB2YXIgc2VnbWVudFRpbWVJbmZvID0gcGFyc2VCeUR1cmF0aW9uKGF0dHJpYnV0ZXMpO1xuXG4gICAgaWYgKHNlZ21lbnRUaW1lSW5mby5sZW5ndGgpIHtcbiAgICAgIHNlZ21lbnQuZHVyYXRpb24gPSBzZWdtZW50VGltZUluZm9bMF0uZHVyYXRpb247XG4gICAgICBzZWdtZW50LnRpbWVsaW5lID0gc2VnbWVudFRpbWVJbmZvWzBdLnRpbWVsaW5lO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzb3VyY2VEdXJhdGlvbikge1xuICAgIHNlZ21lbnQuZHVyYXRpb24gPSBzb3VyY2VEdXJhdGlvbiAvIHRpbWVzY2FsZTtcbiAgICBzZWdtZW50LnRpbWVsaW5lID0gMDtcbiAgfSAvLyBUaGlzIGlzIHVzZWQgZm9yIG1lZGlhU2VxdWVuY2VcblxuXG4gIHNlZ21lbnQubnVtYmVyID0gMDtcbiAgcmV0dXJuIFtzZWdtZW50XTtcbn07XG4vKipcbiAqIEdpdmVuIGEgcGxheWxpc3QsIGEgc2lkeCBib3gsIGFuZCBhIGJhc2VVcmwsIHVwZGF0ZSB0aGUgc2VnbWVudCBsaXN0IG9mIHRoZSBwbGF5bGlzdFxuICogYWNjb3JkaW5nIHRvIHRoZSBzaWR4IGluZm9ybWF0aW9uIGdpdmVuLlxuICpcbiAqIHBsYXlsaXN0LnNpZHggaGFzIG1ldGFkYWRhdGEgYWJvdXQgdGhlIHNpZHggd2hlcmUtYXMgdGhlIHNpZHggcGFyYW1cbiAqIGlzIHRoZSBwYXJzZWQgc2lkeCBib3ggaXRzZWxmLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgcGxheWxpc3QgdG8gdXBkYXRlIHRoZSBzaWR4IGluZm9ybWF0aW9uIGZvclxuICogQHBhcmFtIHtPYmplY3R9IHNpZHggdGhlIHBhcnNlZCBzaWR4IGJveFxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgcGxheWxpc3Qgb2JqZWN0IHdpdGggdGhlIHVwZGF0ZWQgc2lkeCBpbmZvcm1hdGlvblxuICovXG5cbnZhciBhZGRTZWdtZW50c1RvUGxheWxpc3QgPSBmdW5jdGlvbiBhZGRTZWdtZW50c1RvUGxheWxpc3QocGxheWxpc3QsIHNpZHgsIGJhc2VVcmwpIHtcbiAgLy8gUmV0YWluIGluaXQgc2VnbWVudCBpbmZvcm1hdGlvblxuICB2YXIgaW5pdFNlZ21lbnQgPSBwbGF5bGlzdC5zaWR4Lm1hcCA/IHBsYXlsaXN0LnNpZHgubWFwIDogbnVsbDsgLy8gUmV0YWluIHNvdXJjZSBkdXJhdGlvbiBmcm9tIGluaXRpYWwgbWFzdGVyIG1hbmlmZXN0IHBhcnNpbmdcblxuICB2YXIgc291cmNlRHVyYXRpb24gPSBwbGF5bGlzdC5zaWR4LmR1cmF0aW9uOyAvLyBSZXRhaW4gc291cmNlIHRpbWVsaW5lXG5cbiAgdmFyIHRpbWVsaW5lID0gcGxheWxpc3QudGltZWxpbmUgfHwgMDtcbiAgdmFyIHNpZHhCeXRlUmFuZ2UgPSBwbGF5bGlzdC5zaWR4LmJ5dGVyYW5nZTtcbiAgdmFyIHNpZHhFbmQgPSBzaWR4Qnl0ZVJhbmdlLm9mZnNldCArIHNpZHhCeXRlUmFuZ2UubGVuZ3RoOyAvLyBSZXRhaW4gdGltZXNjYWxlIG9mIHRoZSBwYXJzZWQgc2lkeFxuXG4gIHZhciB0aW1lc2NhbGUgPSBzaWR4LnRpbWVzY2FsZTsgLy8gcmVmZXJlbmNlVHlwZSAxIHJlZmVycyB0byBvdGhlciBzaWR4IGJveGVzXG5cbiAgdmFyIG1lZGlhUmVmZXJlbmNlcyA9IHNpZHgucmVmZXJlbmNlcy5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICByZXR1cm4gci5yZWZlcmVuY2VUeXBlICE9PSAxO1xuICB9KTtcbiAgdmFyIHNlZ21lbnRzID0gW107IC8vIGZpcnN0T2Zmc2V0IGlzIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIHRoZSBzaWR4IGJveFxuXG4gIHZhciBzdGFydEluZGV4ID0gc2lkeEVuZCArIHNpZHguZmlyc3RPZmZzZXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWRpYVJlZmVyZW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmVmZXJlbmNlID0gc2lkeC5yZWZlcmVuY2VzW2ldOyAvLyBzaXplIG9mIHRoZSByZWZlcmVuY2VkIChzdWIpc2VnbWVudFxuXG4gICAgdmFyIHNpemUgPSByZWZlcmVuY2UucmVmZXJlbmNlZFNpemU7IC8vIGR1cmF0aW9uIG9mIHRoZSByZWZlcmVuY2VkIChzdWIpc2VnbWVudCwgaW4gIHRoZSAgdGltZXNjYWxlXG4gICAgLy8gdGhpcyB3aWxsIGJlIGNvbnZlcnRlZCB0byBzZWNvbmRzIHdoZW4gZ2VuZXJhdGluZyBzZWdtZW50c1xuXG4gICAgdmFyIGR1cmF0aW9uID0gcmVmZXJlbmNlLnN1YnNlZ21lbnREdXJhdGlvbjsgLy8gc2hvdWxkIGJlIGFuIGluY2x1c2l2ZSByYW5nZVxuXG4gICAgdmFyIGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHNpemUgLSAxO1xuICAgIHZhciBpbmRleFJhbmdlID0gc3RhcnRJbmRleCArIFwiLVwiICsgZW5kSW5kZXg7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgICBiYXNlVXJsOiBiYXNlVXJsLFxuICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGUsXG4gICAgICB0aW1lbGluZTogdGltZWxpbmUsXG4gICAgICAvLyB0aGlzIGlzIHVzZWQgaW4gcGFyc2VCeUR1cmF0aW9uXG4gICAgICBwZXJpb2RJbmRleDogdGltZWxpbmUsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBzb3VyY2VEdXJhdGlvbjogc291cmNlRHVyYXRpb24sXG4gICAgICBpbmRleFJhbmdlOiBpbmRleFJhbmdlXG4gICAgfTtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzRnJvbUJhc2UoYXR0cmlidXRlcylbMF07XG5cbiAgICBpZiAoaW5pdFNlZ21lbnQpIHtcbiAgICAgIHNlZ21lbnQubWFwID0gaW5pdFNlZ21lbnQ7XG4gICAgfVxuXG4gICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICBzdGFydEluZGV4ICs9IHNpemU7XG4gIH1cblxuICBwbGF5bGlzdC5zZWdtZW50cyA9IHNlZ21lbnRzO1xuICByZXR1cm4gcGxheWxpc3Q7XG59O1xuXG52YXIgbWVyZ2VEaXNjb250aWd1b3VzUGxheWxpc3RzID0gZnVuY3Rpb24gbWVyZ2VEaXNjb250aWd1b3VzUGxheWxpc3RzKHBsYXlsaXN0cykge1xuICB2YXIgbWVyZ2VkUGxheWxpc3RzID0gdmFsdWVzKHBsYXlsaXN0cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxheWxpc3QpIHtcbiAgICAvLyBhc3N1bWluZyBwbGF5bGlzdCBJRHMgYXJlIHRoZSBzYW1lIGFjcm9zcyBwZXJpb2RzXG4gICAgLy8gVE9ETzogaGFuZGxlIG11bHRpcGVyaW9kIHdoZXJlIHJlcHJlc2VudGF0aW9uIHNldHMgYXJlIG5vdCB0aGUgc2FtZVxuICAgIC8vIGFjcm9zcyBwZXJpb2RzXG4gICAgdmFyIG5hbWUgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLmlkICsgKHBsYXlsaXN0LmF0dHJpYnV0ZXMubGFuZyB8fCAnJyk7IC8vIFBlcmlvZHMgYWZ0ZXIgZmlyc3RcblxuICAgIGlmIChhY2NbbmFtZV0pIHtcbiAgICAgIHZhciBfYWNjJG5hbWUkc2VnbWVudHM7XG5cbiAgICAgIC8vIGZpcnN0IHNlZ21lbnQgb2Ygc3Vic2VxdWVudCBwZXJpb2RzIHNpZ25hbCBhIGRpc2NvbnRpbnVpdHlcbiAgICAgIGlmIChwbGF5bGlzdC5zZWdtZW50c1swXSkge1xuICAgICAgICBwbGF5bGlzdC5zZWdtZW50c1swXS5kaXNjb250aW51aXR5ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgKF9hY2MkbmFtZSRzZWdtZW50cyA9IGFjY1tuYW1lXS5zZWdtZW50cykucHVzaC5hcHBseShfYWNjJG5hbWUkc2VnbWVudHMsIHBsYXlsaXN0LnNlZ21lbnRzKTsgLy8gYnViYmxlIHVwIGNvbnRlbnRQcm90ZWN0aW9uLCB0aGlzIGFzc3VtZXMgYWxsIERSTSBjb250ZW50XG4gICAgICAvLyBoYXMgdGhlIHNhbWUgY29udGVudFByb3RlY3Rpb25cblxuXG4gICAgICBpZiAocGxheWxpc3QuYXR0cmlidXRlcy5jb250ZW50UHJvdGVjdGlvbikge1xuICAgICAgICBhY2NbbmFtZV0uYXR0cmlidXRlcy5jb250ZW50UHJvdGVjdGlvbiA9IHBsYXlsaXN0LmF0dHJpYnV0ZXMuY29udGVudFByb3RlY3Rpb247XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZpcnN0IFBlcmlvZFxuICAgICAgYWNjW25hbWVdID0gcGxheWxpc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pKTtcbiAgcmV0dXJuIG1lcmdlZFBsYXlsaXN0cy5tYXAoZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgcGxheWxpc3QuZGlzY29udGludWl0eVN0YXJ0cyA9IGZpbmRJbmRleGVzKHBsYXlsaXN0LnNlZ21lbnRzLCAnZGlzY29udGludWl0eScpO1xuICAgIHJldHVybiBwbGF5bGlzdDtcbiAgfSk7XG59O1xuXG52YXIgYWRkU2VnbWVudEluZm9Gcm9tU2lkeCA9IGZ1bmN0aW9uIGFkZFNlZ21lbnRJbmZvRnJvbVNpZHgocGxheWxpc3RzLCBzaWR4TWFwcGluZykge1xuICBpZiAoc2lkeE1hcHBpbmcgPT09IHZvaWQgMCkge1xuICAgIHNpZHhNYXBwaW5nID0ge307XG4gIH1cblxuICBpZiAoIU9iamVjdC5rZXlzKHNpZHhNYXBwaW5nKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gcGxheWxpc3RzO1xuICB9XG5cbiAgZm9yICh2YXIgaSBpbiBwbGF5bGlzdHMpIHtcbiAgICB2YXIgcGxheWxpc3QgPSBwbGF5bGlzdHNbaV07XG5cbiAgICBpZiAoIXBsYXlsaXN0LnNpZHgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBzaWR4S2V5ID0gcGxheWxpc3Quc2lkeC51cmkgKyAnLScgKyBieXRlUmFuZ2VUb1N0cmluZyhwbGF5bGlzdC5zaWR4LmJ5dGVyYW5nZSk7XG4gICAgdmFyIHNpZHhNYXRjaCA9IHNpZHhNYXBwaW5nW3NpZHhLZXldICYmIHNpZHhNYXBwaW5nW3NpZHhLZXldLnNpZHg7XG5cbiAgICBpZiAocGxheWxpc3Quc2lkeCAmJiBzaWR4TWF0Y2gpIHtcbiAgICAgIGFkZFNlZ21lbnRzVG9QbGF5bGlzdChwbGF5bGlzdCwgc2lkeE1hdGNoLCBwbGF5bGlzdC5zaWR4LnJlc29sdmVkVXJpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGxheWxpc3RzO1xufTtcblxudmFyIGZvcm1hdEF1ZGlvUGxheWxpc3QgPSBmdW5jdGlvbiBmb3JtYXRBdWRpb1BsYXlsaXN0KF9yZWYpIHtcbiAgdmFyIF9hdHRyaWJ1dGVzO1xuXG4gIHZhciBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgc2VnbWVudHMgPSBfcmVmLnNlZ21lbnRzLFxuICAgICAgc2lkeCA9IF9yZWYuc2lkeDtcbiAgdmFyIHBsYXlsaXN0ID0ge1xuICAgIGF0dHJpYnV0ZXM6IChfYXR0cmlidXRlcyA9IHtcbiAgICAgIE5BTUU6IGF0dHJpYnV0ZXMuaWQsXG4gICAgICBCQU5EV0lEVEg6IGF0dHJpYnV0ZXMuYmFuZHdpZHRoLFxuICAgICAgQ09ERUNTOiBhdHRyaWJ1dGVzLmNvZGVjc1xuICAgIH0sIF9hdHRyaWJ1dGVzWydQUk9HUkFNLUlEJ10gPSAxLCBfYXR0cmlidXRlcyksXG4gICAgdXJpOiAnJyxcbiAgICBlbmRMaXN0OiAoYXR0cmlidXRlcy50eXBlIHx8ICdzdGF0aWMnKSA9PT0gJ3N0YXRpYycsXG4gICAgdGltZWxpbmU6IGF0dHJpYnV0ZXMucGVyaW9kSW5kZXgsXG4gICAgcmVzb2x2ZWRVcmk6ICcnLFxuICAgIHRhcmdldER1cmF0aW9uOiBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgIHNlZ21lbnRzOiBzZWdtZW50cyxcbiAgICBtZWRpYVNlcXVlbmNlOiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50c1swXS5udW1iZXIgOiAxXG4gIH07XG5cbiAgaWYgKGF0dHJpYnV0ZXMuY29udGVudFByb3RlY3Rpb24pIHtcbiAgICBwbGF5bGlzdC5jb250ZW50UHJvdGVjdGlvbiA9IGF0dHJpYnV0ZXMuY29udGVudFByb3RlY3Rpb247XG4gIH1cblxuICBpZiAoc2lkeCkge1xuICAgIHBsYXlsaXN0LnNpZHggPSBzaWR4O1xuICB9XG5cbiAgcmV0dXJuIHBsYXlsaXN0O1xufTtcbnZhciBmb3JtYXRWdHRQbGF5bGlzdCA9IGZ1bmN0aW9uIGZvcm1hdFZ0dFBsYXlsaXN0KF9yZWYyKSB7XG4gIHZhciBfYXR0cmlidXRlczI7XG5cbiAgdmFyIGF0dHJpYnV0ZXMgPSBfcmVmMi5hdHRyaWJ1dGVzLFxuICAgICAgc2VnbWVudHMgPSBfcmVmMi5zZWdtZW50cztcblxuICBpZiAodHlwZW9mIHNlZ21lbnRzID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIHZ0dCB0cmFja3MgbWF5IHVzZSBzaW5nbGUgZmlsZSBpbiBCYXNlVVJMXG4gICAgc2VnbWVudHMgPSBbe1xuICAgICAgdXJpOiBhdHRyaWJ1dGVzLmJhc2VVcmwsXG4gICAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleCxcbiAgICAgIHJlc29sdmVkVXJpOiBhdHRyaWJ1dGVzLmJhc2VVcmwgfHwgJycsXG4gICAgICBkdXJhdGlvbjogYXR0cmlidXRlcy5zb3VyY2VEdXJhdGlvbixcbiAgICAgIG51bWJlcjogMFxuICAgIH1dOyAvLyB0YXJnZXREdXJhdGlvbiBzaG91bGQgYmUgdGhlIHNhbWUgZHVyYXRpb24gYXMgdGhlIG9ubHkgc2VnbWVudFxuXG4gICAgYXR0cmlidXRlcy5kdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb247XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGF0dHJpYnV0ZXM6IChfYXR0cmlidXRlczIgPSB7XG4gICAgICBOQU1FOiBhdHRyaWJ1dGVzLmlkLFxuICAgICAgQkFORFdJRFRIOiBhdHRyaWJ1dGVzLmJhbmR3aWR0aFxuICAgIH0sIF9hdHRyaWJ1dGVzMlsnUFJPR1JBTS1JRCddID0gMSwgX2F0dHJpYnV0ZXMyKSxcbiAgICB1cmk6ICcnLFxuICAgIGVuZExpc3Q6IChhdHRyaWJ1dGVzLnR5cGUgfHwgJ3N0YXRpYycpID09PSAnc3RhdGljJyxcbiAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleCxcbiAgICByZXNvbHZlZFVyaTogYXR0cmlidXRlcy5iYXNlVXJsIHx8ICcnLFxuICAgIHRhcmdldER1cmF0aW9uOiBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgIHNlZ21lbnRzOiBzZWdtZW50cyxcbiAgICBtZWRpYVNlcXVlbmNlOiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50c1swXS5udW1iZXIgOiAxXG4gIH07XG59O1xudmFyIG9yZ2FuaXplQXVkaW9QbGF5bGlzdHMgPSBmdW5jdGlvbiBvcmdhbml6ZUF1ZGlvUGxheWxpc3RzKHBsYXlsaXN0cywgc2lkeE1hcHBpbmcpIHtcbiAgaWYgKHNpZHhNYXBwaW5nID09PSB2b2lkIDApIHtcbiAgICBzaWR4TWFwcGluZyA9IHt9O1xuICB9XG5cbiAgdmFyIG1haW5QbGF5bGlzdDtcbiAgdmFyIGZvcm1hdHRlZFBsYXlsaXN0cyA9IHBsYXlsaXN0cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIHBsYXlsaXN0KSB7XG4gICAgdmFyIHJvbGUgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLnJvbGUgJiYgcGxheWxpc3QuYXR0cmlidXRlcy5yb2xlLnZhbHVlIHx8ICcnO1xuICAgIHZhciBsYW5ndWFnZSA9IHBsYXlsaXN0LmF0dHJpYnV0ZXMubGFuZyB8fCAnJztcbiAgICB2YXIgbGFiZWwgPSAnbWFpbic7XG5cbiAgICBpZiAobGFuZ3VhZ2UpIHtcbiAgICAgIHZhciByb2xlTGFiZWwgPSByb2xlID8gXCIgKFwiICsgcm9sZSArIFwiKVwiIDogJyc7XG4gICAgICBsYWJlbCA9IFwiXCIgKyBwbGF5bGlzdC5hdHRyaWJ1dGVzLmxhbmcgKyByb2xlTGFiZWw7XG4gICAgfSAvLyBza2lwIGlmIHdlIGFscmVhZHkgaGF2ZSB0aGUgaGlnaGVzdCBxdWFsaXR5IGF1ZGlvIGZvciBhIGxhbmd1YWdlXG5cblxuICAgIGlmIChhW2xhYmVsXSAmJiBhW2xhYmVsXS5wbGF5bGlzdHNbMF0uYXR0cmlidXRlcy5CQU5EV0lEVEggPiBwbGF5bGlzdC5hdHRyaWJ1dGVzLmJhbmR3aWR0aCkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgYVtsYWJlbF0gPSB7XG4gICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgICBhdXRvc2VsZWN0OiB0cnVlLFxuICAgICAgZGVmYXVsdDogcm9sZSA9PT0gJ21haW4nLFxuICAgICAgcGxheWxpc3RzOiBhZGRTZWdtZW50SW5mb0Zyb21TaWR4KFtmb3JtYXRBdWRpb1BsYXlsaXN0KHBsYXlsaXN0KV0sIHNpZHhNYXBwaW5nKSxcbiAgICAgIHVyaTogJydcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBtYWluUGxheWxpc3QgPT09ICd1bmRlZmluZWQnICYmIHJvbGUgPT09ICdtYWluJykge1xuICAgICAgbWFpblBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICBtYWluUGxheWxpc3QuZGVmYXVsdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0sIHt9KTsgLy8gaWYgbm8gcGxheWxpc3RzIGhhdmUgcm9sZSBcIm1haW5cIiwgbWFyayB0aGUgZmlyc3QgYXMgbWFpblxuXG4gIGlmICghbWFpblBsYXlsaXN0KSB7XG4gICAgdmFyIGZpcnN0TGFiZWwgPSBPYmplY3Qua2V5cyhmb3JtYXR0ZWRQbGF5bGlzdHMpWzBdO1xuICAgIGZvcm1hdHRlZFBsYXlsaXN0c1tmaXJzdExhYmVsXS5kZWZhdWx0ID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXR0ZWRQbGF5bGlzdHM7XG59O1xudmFyIG9yZ2FuaXplVnR0UGxheWxpc3RzID0gZnVuY3Rpb24gb3JnYW5pemVWdHRQbGF5bGlzdHMocGxheWxpc3RzLCBzaWR4TWFwcGluZykge1xuICBpZiAoc2lkeE1hcHBpbmcgPT09IHZvaWQgMCkge1xuICAgIHNpZHhNYXBwaW5nID0ge307XG4gIH1cblxuICByZXR1cm4gcGxheWxpc3RzLnJlZHVjZShmdW5jdGlvbiAoYSwgcGxheWxpc3QpIHtcbiAgICB2YXIgbGFiZWwgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLmxhbmcgfHwgJ3RleHQnOyAvLyBza2lwIGlmIHdlIGFscmVhZHkgaGF2ZSBzdWJ0aXRsZXNcblxuICAgIGlmIChhW2xhYmVsXSkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgYVtsYWJlbF0gPSB7XG4gICAgICBsYW5ndWFnZTogbGFiZWwsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGF1dG9zZWxlY3Q6IGZhbHNlLFxuICAgICAgcGxheWxpc3RzOiBhZGRTZWdtZW50SW5mb0Zyb21TaWR4KFtmb3JtYXRWdHRQbGF5bGlzdChwbGF5bGlzdCldLCBzaWR4TWFwcGluZyksXG4gICAgICB1cmk6ICcnXG4gICAgfTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufTtcbnZhciBmb3JtYXRWaWRlb1BsYXlsaXN0ID0gZnVuY3Rpb24gZm9ybWF0VmlkZW9QbGF5bGlzdChfcmVmMykge1xuICB2YXIgX2F0dHJpYnV0ZXMzO1xuXG4gIHZhciBhdHRyaWJ1dGVzID0gX3JlZjMuYXR0cmlidXRlcyxcbiAgICAgIHNlZ21lbnRzID0gX3JlZjMuc2VnbWVudHMsXG4gICAgICBzaWR4ID0gX3JlZjMuc2lkeDtcbiAgdmFyIHBsYXlsaXN0ID0ge1xuICAgIGF0dHJpYnV0ZXM6IChfYXR0cmlidXRlczMgPSB7XG4gICAgICBOQU1FOiBhdHRyaWJ1dGVzLmlkLFxuICAgICAgQVVESU86ICdhdWRpbycsXG4gICAgICBTVUJUSVRMRVM6ICdzdWJzJyxcbiAgICAgIFJFU09MVVRJT046IHtcbiAgICAgICAgd2lkdGg6IGF0dHJpYnV0ZXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogYXR0cmlidXRlcy5oZWlnaHRcbiAgICAgIH0sXG4gICAgICBDT0RFQ1M6IGF0dHJpYnV0ZXMuY29kZWNzLFxuICAgICAgQkFORFdJRFRIOiBhdHRyaWJ1dGVzLmJhbmR3aWR0aFxuICAgIH0sIF9hdHRyaWJ1dGVzM1snUFJPR1JBTS1JRCddID0gMSwgX2F0dHJpYnV0ZXMzKSxcbiAgICB1cmk6ICcnLFxuICAgIGVuZExpc3Q6IChhdHRyaWJ1dGVzLnR5cGUgfHwgJ3N0YXRpYycpID09PSAnc3RhdGljJyxcbiAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleCxcbiAgICByZXNvbHZlZFVyaTogJycsXG4gICAgdGFyZ2V0RHVyYXRpb246IGF0dHJpYnV0ZXMuZHVyYXRpb24sXG4gICAgc2VnbWVudHM6IHNlZ21lbnRzLFxuICAgIG1lZGlhU2VxdWVuY2U6IHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzWzBdLm51bWJlciA6IDFcbiAgfTtcblxuICBpZiAoYXR0cmlidXRlcy5jb250ZW50UHJvdGVjdGlvbikge1xuICAgIHBsYXlsaXN0LmNvbnRlbnRQcm90ZWN0aW9uID0gYXR0cmlidXRlcy5jb250ZW50UHJvdGVjdGlvbjtcbiAgfVxuXG4gIGlmIChzaWR4KSB7XG4gICAgcGxheWxpc3Quc2lkeCA9IHNpZHg7XG4gIH1cblxuICByZXR1cm4gcGxheWxpc3Q7XG59O1xudmFyIHRvTTN1OCA9IGZ1bmN0aW9uIHRvTTN1OChkYXNoUGxheWxpc3RzLCBzaWR4TWFwcGluZykge1xuICB2YXIgX21lZGlhR3JvdXBzO1xuXG4gIGlmIChzaWR4TWFwcGluZyA9PT0gdm9pZCAwKSB7XG4gICAgc2lkeE1hcHBpbmcgPSB7fTtcbiAgfVxuXG4gIGlmICghZGFzaFBsYXlsaXN0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4ge307XG4gIH0gLy8gZ3JhYiBhbGwgbWFzdGVyIGF0dHJpYnV0ZXNcblxuXG4gIHZhciBfZGFzaFBsYXlsaXN0cyQwJGF0dHIgPSBkYXNoUGxheWxpc3RzWzBdLmF0dHJpYnV0ZXMsXG4gICAgICBkdXJhdGlvbiA9IF9kYXNoUGxheWxpc3RzJDAkYXR0ci5zb3VyY2VEdXJhdGlvbixcbiAgICAgIF9kYXNoUGxheWxpc3RzJDAkYXR0cjIgPSBfZGFzaFBsYXlsaXN0cyQwJGF0dHIubWluaW11bVVwZGF0ZVBlcmlvZCxcbiAgICAgIG1pbmltdW1VcGRhdGVQZXJpb2QgPSBfZGFzaFBsYXlsaXN0cyQwJGF0dHIyID09PSB2b2lkIDAgPyAwIDogX2Rhc2hQbGF5bGlzdHMkMCRhdHRyMjtcblxuICB2YXIgdmlkZW9Pbmx5ID0gZnVuY3Rpb24gdmlkZW9Pbmx5KF9yZWY0KSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBfcmVmNC5hdHRyaWJ1dGVzO1xuICAgIHJldHVybiBhdHRyaWJ1dGVzLm1pbWVUeXBlID09PSAndmlkZW8vbXA0JyB8fCBhdHRyaWJ1dGVzLmNvbnRlbnRUeXBlID09PSAndmlkZW8nO1xuICB9O1xuXG4gIHZhciBhdWRpb09ubHkgPSBmdW5jdGlvbiBhdWRpb09ubHkoX3JlZjUpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IF9yZWY1LmF0dHJpYnV0ZXM7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXMubWltZVR5cGUgPT09ICdhdWRpby9tcDQnIHx8IGF0dHJpYnV0ZXMuY29udGVudFR5cGUgPT09ICdhdWRpbyc7XG4gIH07XG5cbiAgdmFyIHZ0dE9ubHkgPSBmdW5jdGlvbiB2dHRPbmx5KF9yZWY2KSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBfcmVmNi5hdHRyaWJ1dGVzO1xuICAgIHJldHVybiBhdHRyaWJ1dGVzLm1pbWVUeXBlID09PSAndGV4dC92dHQnIHx8IGF0dHJpYnV0ZXMuY29udGVudFR5cGUgPT09ICd0ZXh0JztcbiAgfTtcblxuICB2YXIgdmlkZW9QbGF5bGlzdHMgPSBtZXJnZURpc2NvbnRpZ3VvdXNQbGF5bGlzdHMoZGFzaFBsYXlsaXN0cy5maWx0ZXIodmlkZW9Pbmx5KSkubWFwKGZvcm1hdFZpZGVvUGxheWxpc3QpO1xuICB2YXIgYXVkaW9QbGF5bGlzdHMgPSBtZXJnZURpc2NvbnRpZ3VvdXNQbGF5bGlzdHMoZGFzaFBsYXlsaXN0cy5maWx0ZXIoYXVkaW9Pbmx5KSk7XG4gIHZhciB2dHRQbGF5bGlzdHMgPSBkYXNoUGxheWxpc3RzLmZpbHRlcih2dHRPbmx5KTtcbiAgdmFyIG1hc3RlciA9IHtcbiAgICBhbGxvd0NhY2hlOiB0cnVlLFxuICAgIGRpc2NvbnRpbnVpdHlTdGFydHM6IFtdLFxuICAgIHNlZ21lbnRzOiBbXSxcbiAgICBlbmRMaXN0OiB0cnVlLFxuICAgIG1lZGlhR3JvdXBzOiAoX21lZGlhR3JvdXBzID0ge1xuICAgICAgQVVESU86IHt9LFxuICAgICAgVklERU86IHt9XG4gICAgfSwgX21lZGlhR3JvdXBzWydDTE9TRUQtQ0FQVElPTlMnXSA9IHt9LCBfbWVkaWFHcm91cHMuU1VCVElUTEVTID0ge30sIF9tZWRpYUdyb3VwcyksXG4gICAgdXJpOiAnJyxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgcGxheWxpc3RzOiBhZGRTZWdtZW50SW5mb0Zyb21TaWR4KHZpZGVvUGxheWxpc3RzLCBzaWR4TWFwcGluZyksXG4gICAgbWluaW11bVVwZGF0ZVBlcmlvZDogbWluaW11bVVwZGF0ZVBlcmlvZCAqIDEwMDBcbiAgfTtcblxuICBpZiAoYXVkaW9QbGF5bGlzdHMubGVuZ3RoKSB7XG4gICAgbWFzdGVyLm1lZGlhR3JvdXBzLkFVRElPLmF1ZGlvID0gb3JnYW5pemVBdWRpb1BsYXlsaXN0cyhhdWRpb1BsYXlsaXN0cywgc2lkeE1hcHBpbmcpO1xuICB9XG5cbiAgaWYgKHZ0dFBsYXlsaXN0cy5sZW5ndGgpIHtcbiAgICBtYXN0ZXIubWVkaWFHcm91cHMuU1VCVElUTEVTLnN1YnMgPSBvcmdhbml6ZVZ0dFBsYXlsaXN0cyh2dHRQbGF5bGlzdHMsIHNpZHhNYXBwaW5nKTtcbiAgfVxuXG4gIHJldHVybiBtYXN0ZXI7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIFIgKHJlcGV0aXRpb24pIHZhbHVlIGZvciBhIGxpdmUgc3RyZWFtIChmb3IgdGhlIGZpbmFsIHNlZ21lbnRcbiAqIGluIGEgbWFuaWZlc3Qgd2hlcmUgdGhlIHIgdmFsdWUgaXMgbmVnYXRpdmUgMSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICAgICAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKiAgICAgICAgY3VycmVudCB0aW1lICh0eXBpY2FsbHkgdGhlIHRvdGFsIHRpbWUgdXAgdW50aWwgdGhlIGZpbmFsIHNlZ21lbnQpXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAqICAgICAgICBkdXJhdGlvbiBwcm9wZXJ0eSBmb3IgdGhlIGdpdmVuIDxTIC8+XG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgIFIgdmFsdWUgdG8gcmVhY2ggdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gcGVyaW9kXG4gKi9cbnZhciBnZXRMaXZlUlZhbHVlID0gZnVuY3Rpb24gZ2V0TGl2ZVJWYWx1ZShhdHRyaWJ1dGVzLCB0aW1lLCBkdXJhdGlvbikge1xuICB2YXIgTk9XID0gYXR0cmlidXRlcy5OT1csXG4gICAgICBjbGllbnRPZmZzZXQgPSBhdHRyaWJ1dGVzLmNsaWVudE9mZnNldCxcbiAgICAgIGF2YWlsYWJpbGl0eVN0YXJ0VGltZSA9IGF0dHJpYnV0ZXMuYXZhaWxhYmlsaXR5U3RhcnRUaW1lLFxuICAgICAgX2F0dHJpYnV0ZXMkdGltZXNjYWxlID0gYXR0cmlidXRlcy50aW1lc2NhbGUsXG4gICAgICB0aW1lc2NhbGUgPSBfYXR0cmlidXRlcyR0aW1lc2NhbGUgPT09IHZvaWQgMCA/IDEgOiBfYXR0cmlidXRlcyR0aW1lc2NhbGUsXG4gICAgICBfYXR0cmlidXRlcyRzdGFydCA9IGF0dHJpYnV0ZXMuc3RhcnQsXG4gICAgICBzdGFydCA9IF9hdHRyaWJ1dGVzJHN0YXJ0ID09PSB2b2lkIDAgPyAwIDogX2F0dHJpYnV0ZXMkc3RhcnQsXG4gICAgICBfYXR0cmlidXRlcyRtaW5pbXVtVXAgPSBhdHRyaWJ1dGVzLm1pbmltdW1VcGRhdGVQZXJpb2QsXG4gICAgICBtaW5pbXVtVXBkYXRlUGVyaW9kID0gX2F0dHJpYnV0ZXMkbWluaW11bVVwID09PSB2b2lkIDAgPyAwIDogX2F0dHJpYnV0ZXMkbWluaW11bVVwO1xuICB2YXIgbm93ID0gKE5PVyArIGNsaWVudE9mZnNldCkgLyAxMDAwO1xuICB2YXIgcGVyaW9kU3RhcnRXQyA9IGF2YWlsYWJpbGl0eVN0YXJ0VGltZSArIHN0YXJ0O1xuICB2YXIgcGVyaW9kRW5kV0MgPSBub3cgKyBtaW5pbXVtVXBkYXRlUGVyaW9kO1xuICB2YXIgcGVyaW9kRHVyYXRpb24gPSBwZXJpb2RFbmRXQyAtIHBlcmlvZFN0YXJ0V0M7XG4gIHJldHVybiBNYXRoLmNlaWwoKHBlcmlvZER1cmF0aW9uICogdGltZXNjYWxlIC0gdGltZSkgLyBkdXJhdGlvbik7XG59O1xuLyoqXG4gKiBVc2VzIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IFNlZ21lbnRUZW1wbGF0ZS5TZWdtZW50VGltZWxpbmUgdG8gZGV0ZXJtaW5lIHNlZ21lbnRcbiAqIHRpbWluZyBhbmQgZHVyYXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICAgICAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0W119IHNlZ21lbnRUaW1lbGluZVxuICogICAgICAgIExpc3Qgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGF0dHJpYnV0ZXMgb2YgZWFjaCBTIGVsZW1lbnQgY29udGFpbmVkIHdpdGhpblxuICpcbiAqIEByZXR1cm4ge3tudW1iZXI6IG51bWJlciwgZHVyYXRpb246IG51bWJlciwgdGltZTogbnVtYmVyLCB0aW1lbGluZTogbnVtYmVyfVtdfVxuICogICAgICAgICBMaXN0IG9mIE9iamVjdHMgd2l0aCBzZWdtZW50IHRpbWluZyBhbmQgZHVyYXRpb24gaW5mb1xuICovXG5cblxudmFyIHBhcnNlQnlUaW1lbGluZSA9IGZ1bmN0aW9uIHBhcnNlQnlUaW1lbGluZShhdHRyaWJ1dGVzLCBzZWdtZW50VGltZWxpbmUpIHtcbiAgdmFyIF9hdHRyaWJ1dGVzJHR5cGUgPSBhdHRyaWJ1dGVzLnR5cGUsXG4gICAgICB0eXBlID0gX2F0dHJpYnV0ZXMkdHlwZSA9PT0gdm9pZCAwID8gJ3N0YXRpYycgOiBfYXR0cmlidXRlcyR0eXBlLFxuICAgICAgX2F0dHJpYnV0ZXMkbWluaW11bVVwMiA9IGF0dHJpYnV0ZXMubWluaW11bVVwZGF0ZVBlcmlvZCxcbiAgICAgIG1pbmltdW1VcGRhdGVQZXJpb2QgPSBfYXR0cmlidXRlcyRtaW5pbXVtVXAyID09PSB2b2lkIDAgPyAwIDogX2F0dHJpYnV0ZXMkbWluaW11bVVwMixcbiAgICAgIF9hdHRyaWJ1dGVzJG1lZGlhID0gYXR0cmlidXRlcy5tZWRpYSxcbiAgICAgIG1lZGlhID0gX2F0dHJpYnV0ZXMkbWVkaWEgPT09IHZvaWQgMCA/ICcnIDogX2F0dHJpYnV0ZXMkbWVkaWEsXG4gICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb24sXG4gICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUyID0gYXR0cmlidXRlcy50aW1lc2NhbGUsXG4gICAgICB0aW1lc2NhbGUgPSBfYXR0cmlidXRlcyR0aW1lc2NhbGUyID09PSB2b2lkIDAgPyAxIDogX2F0dHJpYnV0ZXMkdGltZXNjYWxlMixcbiAgICAgIF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYiA9IGF0dHJpYnV0ZXMuc3RhcnROdW1iZXIsXG4gICAgICBzdGFydE51bWJlciA9IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYiA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYixcbiAgICAgIHRpbWVsaW5lID0gYXR0cmlidXRlcy5wZXJpb2RJbmRleDtcbiAgdmFyIHNlZ21lbnRzID0gW107XG4gIHZhciB0aW1lID0gLTE7XG5cbiAgZm9yICh2YXIgc0luZGV4ID0gMDsgc0luZGV4IDwgc2VnbWVudFRpbWVsaW5lLmxlbmd0aDsgc0luZGV4KyspIHtcbiAgICB2YXIgUyA9IHNlZ21lbnRUaW1lbGluZVtzSW5kZXhdO1xuICAgIHZhciBkdXJhdGlvbiA9IFMuZDtcbiAgICB2YXIgcmVwZWF0ID0gUy5yIHx8IDA7XG4gICAgdmFyIHNlZ21lbnRUaW1lID0gUy50IHx8IDA7XG5cbiAgICBpZiAodGltZSA8IDApIHtcbiAgICAgIC8vIGZpcnN0IHNlZ21lbnRcbiAgICAgIHRpbWUgPSBzZWdtZW50VGltZTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudFRpbWUgJiYgc2VnbWVudFRpbWUgPiB0aW1lKSB7XG4gICAgICAvLyBkaXNjb250aW51aXR5XG4gICAgICAvLyBUT0RPOiBIb3cgdG8gaGFuZGxlIHRoaXMgdHlwZSBvZiBkaXNjb250aW51aXR5XG4gICAgICAvLyB0aW1lbGluZSsrIGhlcmUgd291bGQgdHJlYXQgaXQgbGlrZSBITFMgZGlzY29udHVpdHkgYW5kIGNvbnRlbnQgd291bGRcbiAgICAgIC8vIGdldCBhcHBlbmRlZCB3aXRob3V0IGdhcFxuICAgICAgLy8gRS5HLlxuICAgICAgLy8gIDxTIHQ9XCIwXCIgZD1cIjFcIiAvPlxuICAgICAgLy8gIDxTIGQ9XCIxXCIgLz5cbiAgICAgIC8vICA8UyBkPVwiMVwiIC8+XG4gICAgICAvLyAgPFMgdD1cIjVcIiBkPVwiMVwiIC8+XG4gICAgICAvLyB3b3VsZCBoYXZlICRUaW1lJCB2YWx1ZXMgb2YgWzAsIDEsIDIsIDVdXG4gICAgICAvLyBzaG91bGQgdGhpcyBiZSBhcHBlbmVkIGF0IHRpbWUgcG9zaXRpb25zIFswLCAxLCAyLCAzXSwoI0VYVC1YLURJU0NPTlRJTlVJVFkpXG4gICAgICAvLyBvciBbMCwgMSwgMiwgZ2FwLCBnYXAsIDVdPyAoI0VYVC1YLUdBUClcbiAgICAgIC8vIGRvZXMgdGhlIHZhbHVlIG9mIHNvdXJjZUR1cmF0aW9uIGNvbnNpZGVyIHRoaXMgd2hlbiBjYWxjdWxhdGluZyBhcmJpdHJhcnlcbiAgICAgIC8vIG5lZ2F0aXZlIEByIHJlcGVhdCB2YWx1ZT9cbiAgICAgIC8vIEUuRy4gU2FtZSBlbGVtZW50cyBhcyBhYm92ZSB3aXRoIHRoaXMgYWRkZWQgYXQgdGhlIGVuZFxuICAgICAgLy8gIDxTIGQ9XCIxXCIgcj1cIi0xXCIgLz5cbiAgICAgIC8vICB3aXRoIGEgc291cmNlRHVyYXRpb24gb2YgMTBcbiAgICAgIC8vIFdvdWxkIHRoZSAyIGdhcHMgYmUgaW5jbHVkZWQgaW4gdGhlIHRpbWUgZHVyYXRpb24gY2FsY3VsYXRpb25zIHJlc3VsdGluZyBpblxuICAgICAgLy8gOCBzZWdtZW50cyB3aXRoICRUaW1lJCB2YWx1ZXMgb2YgWzAsIDEsIDIsIDUsIDYsIDcsIDgsIDldIG9yIDEwIHNlZ21lbnRzXG4gICAgICAvLyB3aXRoICRUaW1lJCB2YWx1ZXMgb2YgWzAsIDEsIDIsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV0gP1xuICAgICAgdGltZSA9IHNlZ21lbnRUaW1lO1xuICAgIH1cblxuICAgIHZhciBjb3VudCA9IHZvaWQgMDtcblxuICAgIGlmIChyZXBlYXQgPCAwKSB7XG4gICAgICB2YXIgbmV4dFMgPSBzSW5kZXggKyAxO1xuXG4gICAgICBpZiAobmV4dFMgPT09IHNlZ21lbnRUaW1lbGluZS5sZW5ndGgpIHtcbiAgICAgICAgLy8gbGFzdCBzZWdtZW50XG4gICAgICAgIGlmICh0eXBlID09PSAnZHluYW1pYycgJiYgbWluaW11bVVwZGF0ZVBlcmlvZCA+IDAgJiYgbWVkaWEuaW5kZXhPZignJE51bWJlciQnKSA+IDApIHtcbiAgICAgICAgICBjb3VudCA9IGdldExpdmVSVmFsdWUoYXR0cmlidXRlcywgdGltZSwgZHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRPRE86IFRoaXMgbWF5IGJlIGluY29ycmVjdCBkZXBlbmRpbmcgb24gY29uY2x1c2lvbiBvZiBUT0RPIGFib3ZlXG4gICAgICAgICAgY291bnQgPSAoc291cmNlRHVyYXRpb24gKiB0aW1lc2NhbGUgLSB0aW1lKSAvIGR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCA9IChzZWdtZW50VGltZWxpbmVbbmV4dFNdLnQgLSB0aW1lKSAvIGR1cmF0aW9uO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IHJlcGVhdCArIDE7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IHN0YXJ0TnVtYmVyICsgc2VnbWVudHMubGVuZ3RoICsgY291bnQ7XG4gICAgdmFyIG51bWJlciA9IHN0YXJ0TnVtYmVyICsgc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKG51bWJlciA8IGVuZCkge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIG51bWJlcjogbnVtYmVyLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLyB0aW1lc2NhbGUsXG4gICAgICAgIHRpbWU6IHRpbWUsXG4gICAgICAgIHRpbWVsaW5lOiB0aW1lbGluZVxuICAgICAgfSk7XG4gICAgICB0aW1lICs9IGR1cmF0aW9uO1xuICAgICAgbnVtYmVyKys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzO1xufTtcblxudmFyIGlkZW50aWZpZXJQYXR0ZXJuID0gL1xcJChbQS16XSopKD86KCUwKShbMC05XSspZCk/XFwkL2c7XG4vKipcbiAqIFJlcGxhY2VzIHRlbXBsYXRlIGlkZW50aWZpZXJzIHdpdGggY29ycmVzcG9uZGluZyB2YWx1ZXMuIFRvIGJlIHVzZWQgYXMgdGhlIGNhbGxiYWNrXG4gKiBmb3IgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gKlxuICogQG5hbWUgcmVwbGFjZUNhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFxuICogICAgICAgIEVudGlyZSBtYXRjaCBvZiBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICogICAgICAgIE5hbWUgb2YgbWF0Y2hlZCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0XG4gKiAgICAgICAgRm9ybWF0IHRhZyBzdHJpbmcuIEl0cyBwcmVzZW5jZSBpbmRpY2F0ZXMgdGhhdCBwYWRkaW5nIGlzIGV4cGVjdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gd2lkdGhcbiAqICAgICAgICBEZXNpcmVkIGxlbmd0aCBvZiB0aGUgcmVwbGFjZWQgdmFsdWUuIFZhbHVlcyBsZXNzIHRoYW4gdGhpcyB3aWR0aCBzaGFsbCBiZSBsZWZ0XG4gKiAgICAgICAgemVybyBwYWRkZWRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgUmVwbGFjZW1lbnQgZm9yIHRoZSBtYXRjaGVkIGlkZW50aWZpZXJcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIGEgY2FsbGJhY2sgZm9yIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSB0byByZXBsYWNlXG4gKiB0ZW1wbGF0ZSBpZGVudGlmaWVyc1xuICpcbiAqIEBwYXJhbSB7T2JlY3R9IHZhbHVlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHZhbHVlcyB0aGF0IHNoYWxsIGJlIHVzZWQgdG8gcmVwbGFjZSBrbm93biBpZGVudGlmaWVyc1xuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5SZXByZXNlbnRhdGlvbklEXG4gKiAgICAgICAgVmFsdWUgb2YgdGhlIFJlcHJlc2VudGF0aW9uQGlkIGF0dHJpYnV0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5OdW1iZXJcbiAqICAgICAgICBOdW1iZXIgb2YgdGhlIGNvcnJlc3BvbmRpbmcgc2VnbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5CYW5kd2lkdGhcbiAqICAgICAgICBWYWx1ZSBvZiB0aGUgUmVwcmVzZW50YXRpb25AYmFuZHdpZHRoIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZXMuVGltZVxuICogICAgICAgIFRpbWVzdGFtcCB2YWx1ZSBvZiB0aGUgY29ycmVzcG9uZGluZyBzZWdtZW50XG4gKiBAcmV0dXJuIHtyZXBsYWNlQ2FsbGJhY2t9XG4gKiAgICAgICAgIENhbGxiYWNrIHRvIGJlIHVzZWQgd2l0aCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UgdG8gcmVwbGFjZSBpZGVudGlmaWVyc1xuICovXG5cbnZhciBpZGVudGlmaWVyUmVwbGFjZW1lbnQgPSBmdW5jdGlvbiBpZGVudGlmaWVyUmVwbGFjZW1lbnQodmFsdWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGlkZW50aWZpZXIsIGZvcm1hdCwgd2lkdGgpIHtcbiAgICBpZiAobWF0Y2ggPT09ICckJCcpIHtcbiAgICAgIC8vIGVzY2FwZSBzZXF1ZW5jZVxuICAgICAgcmV0dXJuICckJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlc1tpZGVudGlmaWVyXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSAnJyArIHZhbHVlc1tpZGVudGlmaWVyXTtcblxuICAgIGlmIChpZGVudGlmaWVyID09PSAnUmVwcmVzZW50YXRpb25JRCcpIHtcbiAgICAgIC8vIEZvcm1hdCB0YWcgc2hhbGwgbm90IGJlIHByZXNlbnQgd2l0aCBSZXByZXNlbnRhdGlvbklEXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgIHdpZHRoID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPj0gd2lkdGgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIiArIG5ldyBBcnJheSh3aWR0aCAtIHZhbHVlLmxlbmd0aCArIDEpLmpvaW4oJzAnKSArIHZhbHVlO1xuICB9O1xufTtcbi8qKlxuICogQ29uc3RydWN0cyBhIHNlZ21lbnQgdXJsIGZyb20gYSB0ZW1wbGF0ZSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiAgICAgICAgVGVtcGxhdGUgc3RyaW5nIHRvIGNvbnN0cnVjdCB1cmwgZnJvbVxuICogQHBhcmFtIHtPYmVjdH0gdmFsdWVzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgdmFsdWVzIHRoYXQgc2hhbGwgYmUgdXNlZCB0byByZXBsYWNlIGtub3duIGlkZW50aWZpZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVzLlJlcHJlc2VudGF0aW9uSURcbiAqICAgICAgICBWYWx1ZSBvZiB0aGUgUmVwcmVzZW50YXRpb25AaWQgYXR0cmlidXRlXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVzLk51bWJlclxuICogICAgICAgIE51bWJlciBvZiB0aGUgY29ycmVzcG9uZGluZyBzZWdtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVzLkJhbmR3aWR0aFxuICogICAgICAgIFZhbHVlIG9mIHRoZSBSZXByZXNlbnRhdGlvbkBiYW5kd2lkdGggYXR0cmlidXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5UaW1lXG4gKiAgICAgICAgVGltZXN0YW1wIHZhbHVlIG9mIHRoZSBjb3JyZXNwb25kaW5nIHNlZ21lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgU2VnbWVudCB1cmwgd2l0aCBpZGVudGlmaWVycyByZXBsYWNlZFxuICovXG5cbnZhciBjb25zdHJ1Y3RUZW1wbGF0ZVVybCA9IGZ1bmN0aW9uIGNvbnN0cnVjdFRlbXBsYXRlVXJsKHVybCwgdmFsdWVzKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShpZGVudGlmaWVyUGF0dGVybiwgaWRlbnRpZmllclJlcGxhY2VtZW50KHZhbHVlcykpO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBvYmplY3RzIGNvbnRhaW5pbmcgdGltaW5nIGFuZCBkdXJhdGlvbiBpbmZvcm1hdGlvbiBhYm91dCBlYWNoXG4gKiBzZWdtZW50IG5lZWRlZCB0byBnZW5lcmF0ZSBzZWdtZW50IHVyaXMgYW5kIHRoZSBjb21wbGV0ZSBzZWdtZW50IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgYWxsIGluaGVyaXRlZCBhdHRyaWJ1dGVzIGZyb20gcGFyZW50IGVsZW1lbnRzIHdpdGggYXR0cmlidXRlXG4gKiAgICAgICAgbmFtZXMgYXMga2V5c1xuICogQHBhcmFtIHtPYmplY3RbXXx1bmRlZmluZWR9IHNlZ21lbnRUaW1lbGluZVxuICogICAgICAgIExpc3Qgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGF0dHJpYnV0ZXMgb2YgZWFjaCBTIGVsZW1lbnQgY29udGFpbmVkIHdpdGhpblxuICogICAgICAgIHRoZSBTZWdtZW50VGltZWxpbmUgZWxlbWVudFxuICogQHJldHVybiB7e251bWJlcjogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCB0aW1lOiBudW1iZXIsIHRpbWVsaW5lOiBudW1iZXJ9W119XG4gKiAgICAgICAgIExpc3Qgb2YgT2JqZWN0cyB3aXRoIHNlZ21lbnQgdGltaW5nIGFuZCBkdXJhdGlvbiBpbmZvXG4gKi9cblxudmFyIHBhcnNlVGVtcGxhdGVJbmZvID0gZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZUluZm8oYXR0cmlidXRlcywgc2VnbWVudFRpbWVsaW5lKSB7XG4gIGlmICghYXR0cmlidXRlcy5kdXJhdGlvbiAmJiAhc2VnbWVudFRpbWVsaW5lKSB7XG4gICAgLy8gaWYgbmVpdGhlciBAZHVyYXRpb24gb3IgU2VnbWVudFRpbWVsaW5lIGFyZSBwcmVzZW50LCB0aGVuIHRoZXJlIHNoYWxsIGJlIGV4YWN0bHlcbiAgICAvLyBvbmUgbWVkaWEgc2VnbWVudFxuICAgIHJldHVybiBbe1xuICAgICAgbnVtYmVyOiBhdHRyaWJ1dGVzLnN0YXJ0TnVtYmVyIHx8IDEsXG4gICAgICBkdXJhdGlvbjogYXR0cmlidXRlcy5zb3VyY2VEdXJhdGlvbixcbiAgICAgIHRpbWU6IDAsXG4gICAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleFxuICAgIH1dO1xuICB9XG5cbiAgaWYgKGF0dHJpYnV0ZXMuZHVyYXRpb24pIHtcbiAgICByZXR1cm4gcGFyc2VCeUR1cmF0aW9uKGF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlQnlUaW1lbGluZShhdHRyaWJ1dGVzLCBzZWdtZW50VGltZWxpbmUpO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBzZWdtZW50cyB1c2luZyBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGUgU2VnbWVudFRlbXBsYXRlIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICAgICAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0W118dW5kZWZpbmVkfSBzZWdtZW50VGltZWxpbmVcbiAqICAgICAgICBMaXN0IG9mIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBhdHRyaWJ1dGVzIG9mIGVhY2ggUyBlbGVtZW50IGNvbnRhaW5lZCB3aXRoaW5cbiAqICAgICAgICB0aGUgU2VnbWVudFRpbWVsaW5lIGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdFtdfVxuICogICAgICAgICBMaXN0IG9mIHNlZ21lbnQgb2JqZWN0c1xuICovXG5cbnZhciBzZWdtZW50c0Zyb21UZW1wbGF0ZSA9IGZ1bmN0aW9uIHNlZ21lbnRzRnJvbVRlbXBsYXRlKGF0dHJpYnV0ZXMsIHNlZ21lbnRUaW1lbGluZSkge1xuICB2YXIgdGVtcGxhdGVWYWx1ZXMgPSB7XG4gICAgUmVwcmVzZW50YXRpb25JRDogYXR0cmlidXRlcy5pZCxcbiAgICBCYW5kd2lkdGg6IGF0dHJpYnV0ZXMuYmFuZHdpZHRoIHx8IDBcbiAgfTtcbiAgdmFyIF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9IGF0dHJpYnV0ZXMuaW5pdGlhbGl6YXRpb24sXG4gICAgICBpbml0aWFsaXphdGlvbiA9IF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9PT0gdm9pZCAwID8ge1xuICAgIHNvdXJjZVVSTDogJycsXG4gICAgcmFuZ2U6ICcnXG4gIH0gOiBfYXR0cmlidXRlcyRpbml0aWFsaXo7XG4gIHZhciBtYXBTZWdtZW50ID0gdXJsVHlwZVRvU2VnbWVudCh7XG4gICAgYmFzZVVybDogYXR0cmlidXRlcy5iYXNlVXJsLFxuICAgIHNvdXJjZTogY29uc3RydWN0VGVtcGxhdGVVcmwoaW5pdGlhbGl6YXRpb24uc291cmNlVVJMLCB0ZW1wbGF0ZVZhbHVlcyksXG4gICAgcmFuZ2U6IGluaXRpYWxpemF0aW9uLnJhbmdlXG4gIH0pO1xuICB2YXIgc2VnbWVudHMgPSBwYXJzZVRlbXBsYXRlSW5mbyhhdHRyaWJ1dGVzLCBzZWdtZW50VGltZWxpbmUpO1xuICByZXR1cm4gc2VnbWVudHMubWFwKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgdGVtcGxhdGVWYWx1ZXMuTnVtYmVyID0gc2VnbWVudC5udW1iZXI7XG4gICAgdGVtcGxhdGVWYWx1ZXMuVGltZSA9IHNlZ21lbnQudGltZTtcbiAgICB2YXIgdXJpID0gY29uc3RydWN0VGVtcGxhdGVVcmwoYXR0cmlidXRlcy5tZWRpYSB8fCAnJywgdGVtcGxhdGVWYWx1ZXMpO1xuICAgIHJldHVybiB7XG4gICAgICB1cmk6IHVyaSxcbiAgICAgIHRpbWVsaW5lOiBzZWdtZW50LnRpbWVsaW5lLFxuICAgICAgZHVyYXRpb246IHNlZ21lbnQuZHVyYXRpb24sXG4gICAgICByZXNvbHZlZFVyaTogcmVzb2x2ZVVybChhdHRyaWJ1dGVzLmJhc2VVcmwgfHwgJycsIHVyaSksXG4gICAgICBtYXA6IG1hcFNlZ21lbnQsXG4gICAgICBudW1iZXI6IHNlZ21lbnQubnVtYmVyXG4gICAgfTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgPFNlZ21lbnRVcmw+IChvZiB0eXBlIFVSTFR5cGUgZnJvbSB0aGUgREFTSCBzcGVjIDUuMy45LjIgVGFibGUgMTQpXG4gKiB0byBhbiBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBvdXRwdXQgb2YgYSBzZWdtZW50IGluIHZpZGVvanMvbXBkLXBhcnNlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gKiAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICBuYW1lcyBhcyBrZXlzXG4gKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudFVybFxuICogICA8U2VnbWVudFVSTD4gbm9kZSB0byB0cmFuc2xhdGUgaW50byBhIHNlZ21lbnQgb2JqZWN0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHRyYW5zbGF0ZWQgc2VnbWVudCBvYmplY3RcbiAqL1xuXG52YXIgU2VnbWVudFVSTFRvU2VnbWVudE9iamVjdCA9IGZ1bmN0aW9uIFNlZ21lbnRVUkxUb1NlZ21lbnRPYmplY3QoYXR0cmlidXRlcywgc2VnbWVudFVybCkge1xuICB2YXIgYmFzZVVybCA9IGF0dHJpYnV0ZXMuYmFzZVVybCxcbiAgICAgIF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9IGF0dHJpYnV0ZXMuaW5pdGlhbGl6YXRpb24sXG4gICAgICBpbml0aWFsaXphdGlvbiA9IF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9PT0gdm9pZCAwID8ge30gOiBfYXR0cmlidXRlcyRpbml0aWFsaXo7XG4gIHZhciBpbml0U2VnbWVudCA9IHVybFR5cGVUb1NlZ21lbnQoe1xuICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgc291cmNlOiBpbml0aWFsaXphdGlvbi5zb3VyY2VVUkwsXG4gICAgcmFuZ2U6IGluaXRpYWxpemF0aW9uLnJhbmdlXG4gIH0pO1xuICB2YXIgc2VnbWVudCA9IHVybFR5cGVUb1NlZ21lbnQoe1xuICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgc291cmNlOiBzZWdtZW50VXJsLm1lZGlhLFxuICAgIHJhbmdlOiBzZWdtZW50VXJsLm1lZGlhUmFuZ2VcbiAgfSk7XG4gIHNlZ21lbnQubWFwID0gaW5pdFNlZ21lbnQ7XG4gIHJldHVybiBzZWdtZW50O1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBzZWdtZW50cyB1c2luZyBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGUgU2VnbWVudExpc3QgZWxlbWVudFxuICogU2VnbWVudExpc3QgKERBU0ggU1BFQyBTZWN0aW9uIDUuMy45LjMuMikgY29udGFpbnMgYSBzZXQgb2YgPFNlZ21lbnRVUkw+IG5vZGVzLiAgRWFjaFxuICogbm9kZSBzaG91bGQgYmUgdHJhbnNsYXRlZCBpbnRvIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAqICAgT2JqZWN0IGNvbnRhaW5pbmcgYWxsIGluaGVyaXRlZCBhdHRyaWJ1dGVzIGZyb20gcGFyZW50IGVsZW1lbnRzIHdpdGggYXR0cmlidXRlXG4gKiAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0W118dW5kZWZpbmVkfSBzZWdtZW50VGltZWxpbmVcbiAqICAgICAgICBMaXN0IG9mIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBhdHRyaWJ1dGVzIG9mIGVhY2ggUyBlbGVtZW50IGNvbnRhaW5lZCB3aXRoaW5cbiAqICAgICAgICB0aGUgU2VnbWVudFRpbWVsaW5lIGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdC48QXJyYXk+fSBsaXN0IG9mIHNlZ21lbnRzXG4gKi9cblxuXG52YXIgc2VnbWVudHNGcm9tTGlzdCA9IGZ1bmN0aW9uIHNlZ21lbnRzRnJvbUxpc3QoYXR0cmlidXRlcywgc2VnbWVudFRpbWVsaW5lKSB7XG4gIHZhciBkdXJhdGlvbiA9IGF0dHJpYnV0ZXMuZHVyYXRpb24sXG4gICAgICBfYXR0cmlidXRlcyRzZWdtZW50VXIgPSBhdHRyaWJ1dGVzLnNlZ21lbnRVcmxzLFxuICAgICAgc2VnbWVudFVybHMgPSBfYXR0cmlidXRlcyRzZWdtZW50VXIgPT09IHZvaWQgMCA/IFtdIDogX2F0dHJpYnV0ZXMkc2VnbWVudFVyOyAvLyBQZXIgc3BlYyAoNS4zLjkuMi4xKSBubyB3YXkgdG8gZGV0ZXJtaW5lIHNlZ21lbnQgZHVyYXRpb24gT1JcbiAgLy8gaWYgYm90aCBTZWdtZW50VGltZWxpbmUgYW5kIEBkdXJhdGlvbiBhcmUgZGVmaW5lZCwgaXQgaXMgb3V0c2lkZSBvZiBzcGVjLlxuXG4gIGlmICghZHVyYXRpb24gJiYgIXNlZ21lbnRUaW1lbGluZSB8fCBkdXJhdGlvbiAmJiBzZWdtZW50VGltZWxpbmUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLlNFR01FTlRfVElNRV9VTlNQRUNJRklFRCk7XG4gIH1cblxuICB2YXIgc2VnbWVudFVybE1hcCA9IHNlZ21lbnRVcmxzLm1hcChmdW5jdGlvbiAoc2VnbWVudFVybE9iamVjdCkge1xuICAgIHJldHVybiBTZWdtZW50VVJMVG9TZWdtZW50T2JqZWN0KGF0dHJpYnV0ZXMsIHNlZ21lbnRVcmxPYmplY3QpO1xuICB9KTtcbiAgdmFyIHNlZ21lbnRUaW1lSW5mbztcblxuICBpZiAoZHVyYXRpb24pIHtcbiAgICBzZWdtZW50VGltZUluZm8gPSBwYXJzZUJ5RHVyYXRpb24oYXR0cmlidXRlcyk7XG4gIH1cblxuICBpZiAoc2VnbWVudFRpbWVsaW5lKSB7XG4gICAgc2VnbWVudFRpbWVJbmZvID0gcGFyc2VCeVRpbWVsaW5lKGF0dHJpYnV0ZXMsIHNlZ21lbnRUaW1lbGluZSk7XG4gIH1cblxuICB2YXIgc2VnbWVudHMgPSBzZWdtZW50VGltZUluZm8ubWFwKGZ1bmN0aW9uIChzZWdtZW50VGltZSwgaW5kZXgpIHtcbiAgICBpZiAoc2VnbWVudFVybE1hcFtpbmRleF0pIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudFVybE1hcFtpbmRleF07XG4gICAgICBzZWdtZW50LnRpbWVsaW5lID0gc2VnbWVudFRpbWUudGltZWxpbmU7XG4gICAgICBzZWdtZW50LmR1cmF0aW9uID0gc2VnbWVudFRpbWUuZHVyYXRpb247XG4gICAgICBzZWdtZW50Lm51bWJlciA9IHNlZ21lbnRUaW1lLm51bWJlcjtcbiAgICAgIHJldHVybiBzZWdtZW50O1xuICAgIH0gLy8gU2luY2Ugd2UncmUgbWFwcGluZyB3ZSBzaG91bGQgZ2V0IHJpZCBvZiBhbnkgYmxhbmsgc2VnbWVudHMgKGluIGNhc2VcbiAgICAvLyB0aGUgZ2l2ZW4gU2VnbWVudFRpbWVsaW5lIGlzIGhhbmRsaW5nIGZvciBtb3JlIGVsZW1lbnRzIHRoYW4gd2UgaGF2ZVxuICAgIC8vIFNlZ21lbnRVUkxzIGZvcikuXG5cbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgcmV0dXJuIHNlZ21lbnQ7XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHM7XG59O1xuXG52YXIgZ2VuZXJhdGVTZWdtZW50cyA9IGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudHMoX3JlZikge1xuICB2YXIgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgIHNlZ21lbnRJbmZvID0gX3JlZi5zZWdtZW50SW5mbztcbiAgdmFyIHNlZ21lbnRBdHRyaWJ1dGVzO1xuICB2YXIgc2VnbWVudHNGbjtcblxuICBpZiAoc2VnbWVudEluZm8udGVtcGxhdGUpIHtcbiAgICBzZWdtZW50c0ZuID0gc2VnbWVudHNGcm9tVGVtcGxhdGU7XG4gICAgc2VnbWVudEF0dHJpYnV0ZXMgPSBtZXJnZShhdHRyaWJ1dGVzLCBzZWdtZW50SW5mby50ZW1wbGF0ZSk7XG4gIH0gZWxzZSBpZiAoc2VnbWVudEluZm8uYmFzZSkge1xuICAgIHNlZ21lbnRzRm4gPSBzZWdtZW50c0Zyb21CYXNlO1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzID0gbWVyZ2UoYXR0cmlidXRlcywgc2VnbWVudEluZm8uYmFzZSk7XG4gIH0gZWxzZSBpZiAoc2VnbWVudEluZm8ubGlzdCkge1xuICAgIHNlZ21lbnRzRm4gPSBzZWdtZW50c0Zyb21MaXN0O1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzID0gbWVyZ2UoYXR0cmlidXRlcywgc2VnbWVudEluZm8ubGlzdCk7XG4gIH1cblxuICB2YXIgc2VnbWVudHNJbmZvID0ge1xuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgfTtcblxuICBpZiAoIXNlZ21lbnRzRm4pIHtcbiAgICByZXR1cm4gc2VnbWVudHNJbmZvO1xuICB9XG5cbiAgdmFyIHNlZ21lbnRzID0gc2VnbWVudHNGbihzZWdtZW50QXR0cmlidXRlcywgc2VnbWVudEluZm8udGltZWxpbmUpOyAvLyBUaGUgQGR1cmF0aW9uIGF0dHJpYnV0ZSB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW4gdGhlIHBsYXlsaXN0J3MgdGFyZ2V0RHVyYXRpb24gd2hpY2hcbiAgLy8gbXVzdCBiZSBpbiBzZWNvbmRzLiBTaW5jZSB3ZSd2ZSBnZW5lcmF0ZWQgdGhlIHNlZ21lbnQgbGlzdCwgd2Ugbm8gbG9uZ2VyIG5lZWRcbiAgLy8gQGR1cmF0aW9uIHRvIGJlIGluIEB0aW1lc2NhbGUgdW5pdHMsIHNvIHdlIGNhbiBjb252ZXJ0IGl0IGhlcmUuXG5cbiAgaWYgKHNlZ21lbnRBdHRyaWJ1dGVzLmR1cmF0aW9uKSB7XG4gICAgdmFyIF9zZWdtZW50QXR0cmlidXRlcyA9IHNlZ21lbnRBdHRyaWJ1dGVzLFxuICAgICAgICBkdXJhdGlvbiA9IF9zZWdtZW50QXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICAgICAgX3NlZ21lbnRBdHRyaWJ1dGVzJHRpID0gX3NlZ21lbnRBdHRyaWJ1dGVzLnRpbWVzY2FsZSxcbiAgICAgICAgdGltZXNjYWxlID0gX3NlZ21lbnRBdHRyaWJ1dGVzJHRpID09PSB2b2lkIDAgPyAxIDogX3NlZ21lbnRBdHRyaWJ1dGVzJHRpO1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzLmR1cmF0aW9uID0gZHVyYXRpb24gLyB0aW1lc2NhbGU7XG4gIH0gZWxzZSBpZiAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gQGR1cmF0aW9uIGF0dHJpYnV0ZSwgdXNlIHRoZSBsYXJnZXN0IHNlZ21lbnQgZHVyYXRpb24gYXNcbiAgICAvLyBhcyB0YXJnZXQgZHVyYXRpb25cbiAgICBzZWdtZW50QXR0cmlidXRlcy5kdXJhdGlvbiA9IHNlZ21lbnRzLnJlZHVjZShmdW5jdGlvbiAobWF4LCBzZWdtZW50KSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgobWF4LCBNYXRoLmNlaWwoc2VnbWVudC5kdXJhdGlvbikpO1xuICAgIH0sIDApO1xuICB9IGVsc2Uge1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzLmR1cmF0aW9uID0gMDtcbiAgfVxuXG4gIHNlZ21lbnRzSW5mby5hdHRyaWJ1dGVzID0gc2VnbWVudEF0dHJpYnV0ZXM7XG4gIHNlZ21lbnRzSW5mby5zZWdtZW50cyA9IHNlZ21lbnRzOyAvLyBUaGlzIGlzIGEgc2lkeCBib3ggd2l0aG91dCBhY3R1YWwgc2VnbWVudCBpbmZvcm1hdGlvblxuXG4gIGlmIChzZWdtZW50SW5mby5iYXNlICYmIHNlZ21lbnRBdHRyaWJ1dGVzLmluZGV4UmFuZ2UpIHtcbiAgICBzZWdtZW50c0luZm8uc2lkeCA9IHNlZ21lbnRzWzBdO1xuICAgIHNlZ21lbnRzSW5mby5zZWdtZW50cyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzSW5mbztcbn07XG52YXIgdG9QbGF5bGlzdHMgPSBmdW5jdGlvbiB0b1BsYXlsaXN0cyhyZXByZXNlbnRhdGlvbnMpIHtcbiAgcmV0dXJuIHJlcHJlc2VudGF0aW9ucy5tYXAoZ2VuZXJhdGVTZWdtZW50cyk7XG59O1xuXG52YXIgZmluZENoaWxkcmVuID0gZnVuY3Rpb24gZmluZENoaWxkcmVuKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGZyb20oZWxlbWVudC5jaGlsZE5vZGVzKS5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgdGFnTmFtZSA9IF9yZWYudGFnTmFtZTtcbiAgICByZXR1cm4gdGFnTmFtZSA9PT0gbmFtZTtcbiAgfSk7XG59O1xudmFyIGdldENvbnRlbnQgPSBmdW5jdGlvbiBnZXRDb250ZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpO1xufTtcblxudmFyIHBhcnNlRHVyYXRpb24gPSBmdW5jdGlvbiBwYXJzZUR1cmF0aW9uKHN0cikge1xuICB2YXIgU0VDT05EU19JTl9ZRUFSID0gMzY1ICogMjQgKiA2MCAqIDYwO1xuICB2YXIgU0VDT05EU19JTl9NT05USCA9IDMwICogMjQgKiA2MCAqIDYwO1xuICB2YXIgU0VDT05EU19JTl9EQVkgPSAyNCAqIDYwICogNjA7XG4gIHZhciBTRUNPTkRTX0lOX0hPVVIgPSA2MCAqIDYwO1xuICB2YXIgU0VDT05EU19JTl9NSU4gPSA2MDsgLy8gUDEwWTEwTTEwRFQxMEgxME0xMC4xU1xuXG4gIHZhciBkdXJhdGlvblJlZ2V4ID0gL1AoPzooXFxkKilZKT8oPzooXFxkKilNKT8oPzooXFxkKilEKT8oPzpUKD86KFxcZCopSCk/KD86KFxcZCopTSk/KD86KFtcXGQuXSopUyk/KT8vO1xuICB2YXIgbWF0Y2ggPSBkdXJhdGlvblJlZ2V4LmV4ZWMoc3RyKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgX21hdGNoJHNsaWNlID0gbWF0Y2guc2xpY2UoMSksXG4gICAgICB5ZWFyID0gX21hdGNoJHNsaWNlWzBdLFxuICAgICAgbW9udGggPSBfbWF0Y2gkc2xpY2VbMV0sXG4gICAgICBkYXkgPSBfbWF0Y2gkc2xpY2VbMl0sXG4gICAgICBob3VyID0gX21hdGNoJHNsaWNlWzNdLFxuICAgICAgbWludXRlID0gX21hdGNoJHNsaWNlWzRdLFxuICAgICAgc2Vjb25kID0gX21hdGNoJHNsaWNlWzVdO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHllYXIgfHwgMCkgKiBTRUNPTkRTX0lOX1lFQVIgKyBwYXJzZUZsb2F0KG1vbnRoIHx8IDApICogU0VDT05EU19JTl9NT05USCArIHBhcnNlRmxvYXQoZGF5IHx8IDApICogU0VDT05EU19JTl9EQVkgKyBwYXJzZUZsb2F0KGhvdXIgfHwgMCkgKiBTRUNPTkRTX0lOX0hPVVIgKyBwYXJzZUZsb2F0KG1pbnV0ZSB8fCAwKSAqIFNFQ09ORFNfSU5fTUlOICsgcGFyc2VGbG9hdChzZWNvbmQgfHwgMCk7XG59O1xudmFyIHBhcnNlRGF0ZSA9IGZ1bmN0aW9uIHBhcnNlRGF0ZShzdHIpIHtcbiAgLy8gRGF0ZSBmb3JtYXQgd2l0aG91dCB0aW1lem9uZSBhY2NvcmRpbmcgdG8gSVNPIDg2MDFcbiAgLy8gWVlZLU1NLUREVGhoOm1tOnNzLnNzc3Nzc1xuICB2YXIgZGF0ZVJlZ2V4ID0gL15cXGQrLVxcZCstXFxkK1RcXGQrOlxcZCs6XFxkKyhcXC5cXGQrKT8kLzsgLy8gSWYgdGhlIGRhdGUgc3RyaW5nIGRvZXMgbm90IHNwZWNpZml5IGEgdGltZXpvbmUsIHdlIG11c3Qgc3BlY2lmaXkgVVRDLiBUaGlzIGlzXG4gIC8vIGV4cHJlc3NlZCBieSBlbmRpbmcgd2l0aCAnWidcblxuICBpZiAoZGF0ZVJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIHN0ciArPSAnWic7XG4gIH1cblxuICByZXR1cm4gRGF0ZS5wYXJzZShzdHIpO1xufTtcblxudmFyIHBhcnNlcnMgPSB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGR1cmF0aW9uIG9mIHRoZSBlbnRpcmUgTWVkaWEgUHJlc2VudGF0aW9uLiBGb3JtYXQgaXMgYSBkdXJhdGlvbiBzdHJpbmdcbiAgICogYXMgc3BlY2lmaWVkIGluIElTTyA4NjAxXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgKi9cbiAgbWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbjogZnVuY3Rpb24gbWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUR1cmF0aW9uKHZhbHVlKTtcbiAgfSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBTZWdtZW50IGF2YWlsYWJpbGl0eSBzdGFydCB0aW1lIGZvciBhbGwgU2VnbWVudHMgcmVmZXJyZWQgdG8gaW4gdGhpc1xuICAgKiBNUEQuIEZvciBhIGR5bmFtaWMgbWFuaWZlc3QsIGl0IHNwZWNpZmllcyB0aGUgYW5jaG9yIGZvciB0aGUgZWFybGllc3QgYXZhaWxhYmlsaXR5XG4gICAqIHRpbWUuIEZvcm1hdCBpcyBhIGRhdGUgc3RyaW5nIGFzIHNwZWNpZmllZCBpbiBJU08gODYwMVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGRhdGUgYXMgc2Vjb25kcyBmcm9tIHVuaXggZXBvY2hcbiAgICovXG4gIGF2YWlsYWJpbGl0eVN0YXJ0VGltZTogZnVuY3Rpb24gYXZhaWxhYmlsaXR5U3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRGF0ZSh2YWx1ZSkgLyAxMDAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHNtYWxsZXN0IHBlcmlvZCBiZXR3ZWVuIHBvdGVudGlhbCBjaGFuZ2VzIHRvIHRoZSBNUEQuIEZvcm1hdCBpcyBhXG4gICAqIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBtaW5pbXVtVXBkYXRlUGVyaW9kOiBmdW5jdGlvbiBtaW5pbXVtVXBkYXRlUGVyaW9kKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRHVyYXRpb24odmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGR1cmF0aW9uIG9mIHRoZSBzbWFsbGVzdCB0aW1lIHNoaWZ0aW5nIGJ1ZmZlciBmb3IgYW55IFJlcHJlc2VudGF0aW9uXG4gICAqIGluIHRoZSBNUEQuIEZvcm1hdCBpcyBhIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICB0aW1lU2hpZnRCdWZmZXJEZXB0aDogZnVuY3Rpb24gdGltZVNoaWZ0QnVmZmVyRGVwdGgodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VEdXJhdGlvbih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgUGVyaW9kU3RhcnQgdGltZSBvZiB0aGUgUGVyaW9kIHJlbGF0aXZlIHRvIHRoZSBhdmFpbGFiaWxpdHlTdGFydHRpbWUuXG4gICAqIEZvcm1hdCBpcyBhIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBzdGFydDogZnVuY3Rpb24gc3RhcnQodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VEdXJhdGlvbih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgdGhlIHZpc3VhbCBwcmVzZW50YXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwYXJzZWQgd2lkdGhcbiAgICovXG4gIHdpZHRoOiBmdW5jdGlvbiB3aWR0aCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGhlaWdodCBvZiB0aGUgdmlzdWFsIHByZXNlbnRhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIHBhcnNlZCBoZWlnaHRcbiAgICovXG4gIGhlaWdodDogZnVuY3Rpb24gaGVpZ2h0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgYml0cmF0ZSBvZiB0aGUgcmVwcmVzZW50YXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwYXJzZWQgYmFuZHdpZHRoXG4gICAqL1xuICBiYW5kd2lkdGg6IGZ1bmN0aW9uIGJhbmR3aWR0aCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiB0aGUgZmlyc3QgTWVkaWEgU2VnbWVudCBpbiB0aGlzIFJlcHJlc2VudGF0aW9uIGluIHRoZSBQZXJpb2RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwYXJzZWQgbnVtYmVyXG4gICAqL1xuICBzdGFydE51bWJlcjogZnVuY3Rpb24gc3RhcnROdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgfSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSB0aW1lc2NhbGUgaW4gdW5pdHMgcGVyIHNlY29uZHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBhcHJzZWQgdGltZXNjYWxlXG4gICAqL1xuICB0aW1lc2NhbGU6IGZ1bmN0aW9uIHRpbWVzY2FsZSh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGNvbnN0YW50IGFwcHJveGltYXRlIFNlZ21lbnQgZHVyYXRpb25cbiAgICogTk9URTogVGhlIDxQZXJpb2Q+IGVsZW1lbnQgYWxzbyBjb250YWlucyBhbiBAZHVyYXRpb24gYXR0cmlidXRlLiBUaGlzIGR1cmF0aW9uXG4gICAqICAgICAgIHNwZWNpZmllcyB0aGUgZHVyYXRpb24gb2YgdGhlIFBlcmlvZC4gVGhpcyBhdHRyaWJ1dGUgaXMgY3VycmVudGx5IG5vdFxuICAgKiAgICAgICBzdXBwb3J0ZWQgYnkgdGhlIHJlc3Qgb2YgdGhlIHBhcnNlciwgaG93ZXZlciB3ZSBzdGlsbCBjaGVjayBmb3IgaXQgdG8gcHJldmVudFxuICAgKiAgICAgICBlcnJvcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGFyc2VkIGR1cmF0aW9uXG4gICAqL1xuICBkdXJhdGlvbjogZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgcGFyc2VkVmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuXG4gICAgaWYgKGlzTmFOKHBhcnNlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHBhcnNlRHVyYXRpb24odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBTZWdtZW50IGR1cmF0aW9uLCBpbiB1bml0cyBvZiB0aGUgdmFsdWUgb2YgdGhlIEB0aW1lc2NhbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGFyc2VkIGR1cmF0aW9uXG4gICAqL1xuICBkOiBmdW5jdGlvbiBkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgTVBEIHN0YXJ0IHRpbWUsIGluIEB0aW1lc2NhbGUgdW5pdHMsIHRoZSBmaXJzdCBTZWdtZW50IGluIHRoZSBzZXJpZXNcbiAgICogc3RhcnRzIHJlbGF0aXZlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIFBlcmlvZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIHBhcnNlZCB0aW1lXG4gICAqL1xuICB0OiBmdW5jdGlvbiB0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgcmVwZWF0IGNvdW50IG9mIHRoZSBudW1iZXIgb2YgZm9sbG93aW5nIGNvbnRpZ3VvdXMgU2VnbWVudHMgd2l0aCB0aGVcbiAgICogc2FtZSBkdXJhdGlvbiBleHByZXNzZWQgYnkgdGhlIHZhbHVlIG9mIEBkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGFyc2VkIG51bWJlclxuICAgKi9cbiAgcjogZnVuY3Rpb24gcih2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHBhcnNlciBmb3IgYWxsIG90aGVyIGF0dHJpYnV0ZXMuIEFjdHMgYXMgYSBuby1vcCBhbmQganVzdCByZXR1cm5zIHRoZSB2YWx1ZVxuICAgKiBhcyBhIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVW5wYXJzZWQgdmFsdWVcbiAgICovXG4gIERFRkFVTFQ6IGZ1bmN0aW9uIERFRkFVTFQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG4vKipcbiAqIEdldHMgYWxsIHRoZSBhdHRyaWJ1dGVzIGFuZCB2YWx1ZXMgb2YgdGhlIHByb3ZpZGVkIG5vZGUsIHBhcnNlcyBhdHRyaWJ1dGVzIHdpdGgga25vd25cbiAqIHR5cGVzLCBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhdHRyaWJ1dGUgbmFtZXMgbWFwcGVkIHRvIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IGVsXG4gKiAgICAgICAgVGhlIG5vZGUgdG8gcGFyc2UgYXR0cmlidXRlcyBmcm9tXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgIE9iamVjdCB3aXRoIGFsbCBhdHRyaWJ1dGVzIG9mIGVsIHBhcnNlZFxuICovXG5cbnZhciBwYXJzZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoZWwpIHtcbiAgaWYgKCEoZWwgJiYgZWwuYXR0cmlidXRlcykpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICByZXR1cm4gZnJvbShlbC5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGUpIHtcbiAgICB2YXIgcGFyc2VGbiA9IHBhcnNlcnNbZS5uYW1lXSB8fCBwYXJzZXJzLkRFRkFVTFQ7XG4gICAgYVtlLm5hbWVdID0gcGFyc2VGbihlLnZhbHVlKTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQjY0VG9VaW50OEFycmF5KGI2NFRleHQpIHtcbiAgdmFyIGRlY29kZWRTdHJpbmcgPSB3aW5kb3ckMS5hdG9iKGI2NFRleHQpO1xuICB2YXIgYXJyYXkgPSBuZXcgVWludDhBcnJheShkZWNvZGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWNvZGVkU3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBkZWNvZGVkU3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5cbnZhciBrZXlTeXN0ZW1zTWFwID0ge1xuICAndXJuOnV1aWQ6MTA3N2VmZWMtYzBiMi00ZDAyLWFjZTMtM2MxZTUyZTJmYjRiJzogJ29yZy53My5jbGVhcmtleScsXG4gICd1cm46dXVpZDplZGVmOGJhOS03OWQ2LTRhY2UtYTNjOC0yN2RjZDUxZDIxZWQnOiAnY29tLndpZGV2aW5lLmFscGhhJyxcbiAgJ3Vybjp1dWlkOjlhMDRmMDc5LTk4NDAtNDI4Ni1hYjkyLWU2NWJlMDg4NWY5NSc6ICdjb20ubWljcm9zb2Z0LnBsYXlyZWFkeScsXG4gICd1cm46dXVpZDpmMjM5ZTc2OS1lZmEzLTQ4NTAtOWMxNi1hOTAzYzY5MzJlZmInOiAnY29tLmFkb2JlLnByaW1ldGltZSdcbn07XG4vKipcbiAqIEJ1aWxkcyBhIGxpc3Qgb2YgdXJscyB0aGF0IGlzIHRoZSBwcm9kdWN0IG9mIHRoZSByZWZlcmVuY2UgdXJscyBhbmQgQmFzZVVSTCB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSByZWZlcmVuY2VVcmxzXG4gKiAgICAgICAgTGlzdCBvZiByZWZlcmVuY2UgdXJscyB0byByZXNvbHZlIHRvXG4gKiBAcGFyYW0ge05vZGVbXX0gYmFzZVVybEVsZW1lbnRzXG4gKiAgICAgICAgTGlzdCBvZiBCYXNlVVJMIG5vZGVzIGZyb20gdGhlIG1wZFxuICogQHJldHVybiB7c3RyaW5nW119XG4gKiAgICAgICAgIExpc3Qgb2YgcmVzb2x2ZWQgdXJsc1xuICovXG5cbnZhciBidWlsZEJhc2VVcmxzID0gZnVuY3Rpb24gYnVpbGRCYXNlVXJscyhyZWZlcmVuY2VVcmxzLCBiYXNlVXJsRWxlbWVudHMpIHtcbiAgaWYgKCFiYXNlVXJsRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlZmVyZW5jZVVybHM7XG4gIH1cblxuICByZXR1cm4gZmxhdHRlbihyZWZlcmVuY2VVcmxzLm1hcChmdW5jdGlvbiAocmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuIGJhc2VVcmxFbGVtZW50cy5tYXAoZnVuY3Rpb24gKGJhc2VVcmxFbGVtZW50KSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZVVybChyZWZlcmVuY2UsIGdldENvbnRlbnQoYmFzZVVybEVsZW1lbnQpKTtcbiAgICB9KTtcbiAgfSkpO1xufTtcbi8qKlxuICogQ29udGFpbnMgYWxsIFNlZ21lbnQgaW5mb3JtYXRpb24gZm9yIGl0cyBjb250YWluaW5nIEFkYXB0YXRpb25TZXRcbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTZWdtZW50SW5mb3JtYXRpb25cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fHVuZGVmaW5lZH0gdGVtcGxhdGVcbiAqICAgICAgICAgICBDb250YWlucyB0aGUgYXR0cmlidXRlcyBmb3IgdGhlIFNlZ21lbnRUZW1wbGF0ZSBub2RlXG4gKiBAcHJvcGVydHkge09iamVjdFtdfHVuZGVmaW5lZH0gdGltZWxpbmVcbiAqICAgICAgICAgICBDb250YWlucyBhIGxpc3Qgb2YgYXRycmlidXRlcyBmb3IgZWFjaCBTIG5vZGUgd2l0aGluIHRoZSBTZWdtZW50VGltZWxpbmUgbm9kZVxuICogQHByb3BlcnR5IHtPYmplY3R8dW5kZWZpbmVkfSBsaXN0XG4gKiAgICAgICAgICAgQ29udGFpbnMgdGhlIGF0dHJpYnV0ZXMgZm9yIHRoZSBTZWdtZW50TGlzdCBub2RlXG4gKiBAcHJvcGVydHkge09iamVjdHx1bmRlZmluZWR9IGJhc2VcbiAqICAgICAgICAgICBDb250YWlucyB0aGUgYXR0cmlidXRlcyBmb3IgdGhlIFNlZ21lbnRCYXNlIG5vZGVcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGF2YWlsYWJsZSBTZWdtZW50IGluZm9ybWF0aW9uIGNvbnRhaW5lZCB3aXRoaW4gdGhlIEFkYXB0YXRpb25TZXQgbm9kZVxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gYWRhcHRhdGlvblNldFxuICogICAgICAgIFRoZSBBZGFwdGF0aW9uU2V0IG5vZGUgdG8gZ2V0IFNlZ21lbnQgaW5mb3JtYXRpb24gZnJvbVxuICogQHJldHVybiB7U2VnbWVudEluZm9ybWF0aW9ufVxuICogICAgICAgICBUaGUgU2VnbWVudCBpbmZvcm1hdGlvbiBjb250YWluZWQgd2l0aGluIHRoZSBwcm92aWRlZCBBZGFwdGF0aW9uU2V0XG4gKi9cblxudmFyIGdldFNlZ21lbnRJbmZvcm1hdGlvbiA9IGZ1bmN0aW9uIGdldFNlZ21lbnRJbmZvcm1hdGlvbihhZGFwdGF0aW9uU2V0KSB7XG4gIHZhciBzZWdtZW50VGVtcGxhdGUgPSBmaW5kQ2hpbGRyZW4oYWRhcHRhdGlvblNldCwgJ1NlZ21lbnRUZW1wbGF0ZScpWzBdO1xuICB2YXIgc2VnbWVudExpc3QgPSBmaW5kQ2hpbGRyZW4oYWRhcHRhdGlvblNldCwgJ1NlZ21lbnRMaXN0JylbMF07XG4gIHZhciBzZWdtZW50VXJscyA9IHNlZ21lbnRMaXN0ICYmIGZpbmRDaGlsZHJlbihzZWdtZW50TGlzdCwgJ1NlZ21lbnRVUkwnKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gbWVyZ2Uoe1xuICAgICAgdGFnOiAnU2VnbWVudFVSTCdcbiAgICB9LCBwYXJzZUF0dHJpYnV0ZXMocykpO1xuICB9KTtcbiAgdmFyIHNlZ21lbnRCYXNlID0gZmluZENoaWxkcmVuKGFkYXB0YXRpb25TZXQsICdTZWdtZW50QmFzZScpWzBdO1xuICB2YXIgc2VnbWVudFRpbWVsaW5lUGFyZW50Tm9kZSA9IHNlZ21lbnRMaXN0IHx8IHNlZ21lbnRUZW1wbGF0ZTtcbiAgdmFyIHNlZ21lbnRUaW1lbGluZSA9IHNlZ21lbnRUaW1lbGluZVBhcmVudE5vZGUgJiYgZmluZENoaWxkcmVuKHNlZ21lbnRUaW1lbGluZVBhcmVudE5vZGUsICdTZWdtZW50VGltZWxpbmUnKVswXTtcbiAgdmFyIHNlZ21lbnRJbml0aWFsaXphdGlvblBhcmVudE5vZGUgPSBzZWdtZW50TGlzdCB8fCBzZWdtZW50QmFzZSB8fCBzZWdtZW50VGVtcGxhdGU7XG4gIHZhciBzZWdtZW50SW5pdGlhbGl6YXRpb24gPSBzZWdtZW50SW5pdGlhbGl6YXRpb25QYXJlbnROb2RlICYmIGZpbmRDaGlsZHJlbihzZWdtZW50SW5pdGlhbGl6YXRpb25QYXJlbnROb2RlLCAnSW5pdGlhbGl6YXRpb24nKVswXTsgLy8gU2VnbWVudFRlbXBsYXRlIGlzIGhhbmRsZWQgc2xpZ2h0bHkgZGlmZmVyZW50bHksIHNpbmNlIGl0IGNhbiBoYXZlIGJvdGhcbiAgLy8gQGluaXRpYWxpemF0aW9uIGFuZCBhbiA8SW5pdGlhbGl6YXRpb24+IG5vZGUuICBAaW5pdGlhbGl6YXRpb24gY2FuIGJlIHRlbXBsYXRlZCxcbiAgLy8gd2hpbGUgdGhlIG5vZGUgY2FuIGhhdmUgYSB1cmwgYW5kIHJhbmdlIHNwZWNpZmllZC4gIElmIHRoZSA8U2VnbWVudFRlbXBsYXRlPiBoYXNcbiAgLy8gYm90aCBAaW5pdGlhbGl6YXRpb24gYW5kIGFuIDxJbml0aWFsaXphdGlvbj4gc3ViZWxlbWVudCB3ZSBvcHQgdG8gb3ZlcnJpZGUgd2l0aFxuICAvLyB0aGUgbm9kZSwgYXMgdGhpcyBpbnRlcmFjdGlvbiBpcyBub3QgZGVmaW5lZCBpbiB0aGUgc3BlYy5cblxuICB2YXIgdGVtcGxhdGUgPSBzZWdtZW50VGVtcGxhdGUgJiYgcGFyc2VBdHRyaWJ1dGVzKHNlZ21lbnRUZW1wbGF0ZSk7XG5cbiAgaWYgKHRlbXBsYXRlICYmIHNlZ21lbnRJbml0aWFsaXphdGlvbikge1xuICAgIHRlbXBsYXRlLmluaXRpYWxpemF0aW9uID0gc2VnbWVudEluaXRpYWxpemF0aW9uICYmIHBhcnNlQXR0cmlidXRlcyhzZWdtZW50SW5pdGlhbGl6YXRpb24pO1xuICB9IGVsc2UgaWYgKHRlbXBsYXRlICYmIHRlbXBsYXRlLmluaXRpYWxpemF0aW9uKSB7XG4gICAgLy8gSWYgaXQgaXMgQGluaXRpYWxpemF0aW9uIHdlIGNvbnZlcnQgaXQgdG8gYW4gb2JqZWN0IHNpbmNlIHRoaXMgaXMgdGhlIGZvcm1hdCB0aGF0XG4gICAgLy8gbGF0ZXIgZnVuY3Rpb25zIHdpbGwgcmVseSBvbiBmb3IgdGhlIGluaXRpYWxpemF0aW9uIHNlZ21lbnQuICBUaGlzIGlzIG9ubHkgdmFsaWRcbiAgICAvLyBmb3IgPFNlZ21lbnRUZW1wbGF0ZT5cbiAgICB0ZW1wbGF0ZS5pbml0aWFsaXphdGlvbiA9IHtcbiAgICAgIHNvdXJjZVVSTDogdGVtcGxhdGUuaW5pdGlhbGl6YXRpb25cbiAgICB9O1xuICB9XG5cbiAgdmFyIHNlZ21lbnRJbmZvID0ge1xuICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgICB0aW1lbGluZTogc2VnbWVudFRpbWVsaW5lICYmIGZpbmRDaGlsZHJlbihzZWdtZW50VGltZWxpbmUsICdTJykubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcGFyc2VBdHRyaWJ1dGVzKHMpO1xuICAgIH0pLFxuICAgIGxpc3Q6IHNlZ21lbnRMaXN0ICYmIG1lcmdlKHBhcnNlQXR0cmlidXRlcyhzZWdtZW50TGlzdCksIHtcbiAgICAgIHNlZ21lbnRVcmxzOiBzZWdtZW50VXJscyxcbiAgICAgIGluaXRpYWxpemF0aW9uOiBwYXJzZUF0dHJpYnV0ZXMoc2VnbWVudEluaXRpYWxpemF0aW9uKVxuICAgIH0pLFxuICAgIGJhc2U6IHNlZ21lbnRCYXNlICYmIG1lcmdlKHBhcnNlQXR0cmlidXRlcyhzZWdtZW50QmFzZSksIHtcbiAgICAgIGluaXRpYWxpemF0aW9uOiBwYXJzZUF0dHJpYnV0ZXMoc2VnbWVudEluaXRpYWxpemF0aW9uKVxuICAgIH0pXG4gIH07XG4gIE9iamVjdC5rZXlzKHNlZ21lbnRJbmZvKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXNlZ21lbnRJbmZvW2tleV0pIHtcbiAgICAgIGRlbGV0ZSBzZWdtZW50SW5mb1trZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50SW5mbztcbn07XG4vKipcbiAqIENvbnRhaW5zIFNlZ21lbnQgaW5mb3JtYXRpb24gYW5kIGF0dHJpYnV0ZXMgbmVlZGVkIHRvIGNvbnN0cnVjdCBhIFBsYXlsaXN0IG9iamVjdFxuICogZnJvbSBhIFJlcHJlc2VudGF0aW9uXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVwcmVzZW50YXRpb25JbmZvcm1hdGlvblxuICogQHByb3BlcnR5IHtTZWdtZW50SW5mb3JtYXRpb259IHNlZ21lbnRJbmZvXG4gKiAgICAgICAgICAgU2VnbWVudCBpbmZvcm1hdGlvbiBmb3IgdGhpcyBSZXByZXNlbnRhdGlvblxuICogQHByb3BlcnR5IHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAqICAgICAgICAgICBJbmhlcml0ZWQgYXR0cmlidXRlcyBmb3IgdGhpcyBSZXByZXNlbnRhdGlvblxuICovXG5cbi8qKlxuICogTWFwcyBhIFJlcHJlc2VudGF0aW9uIG5vZGUgdG8gYW4gb2JqZWN0IGNvbnRhaW5pbmcgU2VnbWVudCBpbmZvcm1hdGlvbiBhbmQgYXR0cmlidXRlc1xuICpcbiAqIEBuYW1lIGluaGVyaXRCYXNlVXJsc0NhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gcmVwcmVzZW50YXRpb25cbiAqICAgICAgICBSZXByZXNlbnRhdGlvbiBub2RlIGZyb20gdGhlIG1wZFxuICogQHJldHVybiB7UmVwcmVzZW50YXRpb25JbmZvcm1hdGlvbn1cbiAqICAgICAgICAgUmVwcmVzZW50YXRpb24gaW5mb3JtYXRpb24gbmVlZGVkIHRvIGNvbnN0cnVjdCBhIFBsYXlsaXN0IG9iamVjdFxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGNhbGxiYWNrIGZvciBBcnJheS5wcm90b3R5cGUubWFwIGZvciBtYXBwaW5nIFJlcHJlc2VudGF0aW9uIG5vZGVzIHRvXG4gKiBTZWdtZW50IGluZm9ybWF0aW9uIGFuZCBhdHRyaWJ1dGVzIHVzaW5nIGluaGVyaXRlZCBCYXNlVVJMIG5vZGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhZGFwdGF0aW9uU2V0QXR0cmlidXRlc1xuICogICAgICAgIENvbnRhaW5zIGF0dHJpYnV0ZXMgaW5oZXJpdGVkIGJ5IHRoZSBBZGFwdGF0aW9uU2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhZGFwdGF0aW9uU2V0QmFzZVVybHNcbiAqICAgICAgICBDb250YWlucyBsaXN0IG9mIHJlc29sdmVkIGJhc2UgdXJscyBpbmhlcml0ZWQgYnkgdGhlIEFkYXB0YXRpb25TZXRcbiAqIEBwYXJhbSB7U2VnbWVudEluZm9ybWF0aW9ufSBhZGFwdGF0aW9uU2V0U2VnbWVudEluZm9cbiAqICAgICAgICBDb250YWlucyBTZWdtZW50IGluZm9ybWF0aW9uIGZvciB0aGUgQWRhcHRhdGlvblNldFxuICogQHJldHVybiB7aW5oZXJpdEJhc2VVcmxzQ2FsbGJhY2t9XG4gKiAgICAgICAgIENhbGxiYWNrIG1hcCBmdW5jdGlvblxuICovXG5cbnZhciBpbmhlcml0QmFzZVVybHMgPSBmdW5jdGlvbiBpbmhlcml0QmFzZVVybHMoYWRhcHRhdGlvblNldEF0dHJpYnV0ZXMsIGFkYXB0YXRpb25TZXRCYXNlVXJscywgYWRhcHRhdGlvblNldFNlZ21lbnRJbmZvKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocmVwcmVzZW50YXRpb24pIHtcbiAgICB2YXIgcmVwQmFzZVVybEVsZW1lbnRzID0gZmluZENoaWxkcmVuKHJlcHJlc2VudGF0aW9uLCAnQmFzZVVSTCcpO1xuICAgIHZhciByZXBCYXNlVXJscyA9IGJ1aWxkQmFzZVVybHMoYWRhcHRhdGlvblNldEJhc2VVcmxzLCByZXBCYXNlVXJsRWxlbWVudHMpO1xuICAgIHZhciBhdHRyaWJ1dGVzID0gbWVyZ2UoYWRhcHRhdGlvblNldEF0dHJpYnV0ZXMsIHBhcnNlQXR0cmlidXRlcyhyZXByZXNlbnRhdGlvbikpO1xuICAgIHZhciByZXByZXNlbnRhdGlvblNlZ21lbnRJbmZvID0gZ2V0U2VnbWVudEluZm9ybWF0aW9uKHJlcHJlc2VudGF0aW9uKTtcbiAgICByZXR1cm4gcmVwQmFzZVVybHMubWFwKGZ1bmN0aW9uIChiYXNlVXJsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWdtZW50SW5mbzogbWVyZ2UoYWRhcHRhdGlvblNldFNlZ21lbnRJbmZvLCByZXByZXNlbnRhdGlvblNlZ21lbnRJbmZvKSxcbiAgICAgICAgYXR0cmlidXRlczogbWVyZ2UoYXR0cmlidXRlcywge1xuICAgICAgICAgIGJhc2VVcmw6IGJhc2VVcmxcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG59O1xuLyoqXG4gKiBUcmFuZm9ybXMgYSBzZXJpZXMgb2YgY29udGVudCBwcm90ZWN0aW9uIG5vZGVzIHRvXG4gKiBhbiBvYmplY3QgY29udGFpbmluZyBwc3NoIGRhdGEgYnkga2V5IHN5c3RlbVxuICpcbiAqIEBwYXJhbSB7Tm9kZVtdfSBjb250ZW50UHJvdGVjdGlvbk5vZGVzXG4gKiAgICAgICAgQ29udGVudCBwcm90ZWN0aW9uIG5vZGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcHNzaCBkYXRhIGJ5IGtleSBzeXN0ZW1cbiAqL1xuXG52YXIgZ2VuZXJhdGVLZXlTeXN0ZW1JbmZvcm1hdGlvbiA9IGZ1bmN0aW9uIGdlbmVyYXRlS2V5U3lzdGVtSW5mb3JtYXRpb24oY29udGVudFByb3RlY3Rpb25Ob2Rlcykge1xuICByZXR1cm4gY29udGVudFByb3RlY3Rpb25Ob2Rlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbm9kZSkge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gcGFyc2VBdHRyaWJ1dGVzKG5vZGUpO1xuICAgIHZhciBrZXlTeXN0ZW0gPSBrZXlTeXN0ZW1zTWFwW2F0dHJpYnV0ZXMuc2NoZW1lSWRVcmldO1xuXG4gICAgaWYgKGtleVN5c3RlbSkge1xuICAgICAgYWNjW2tleVN5c3RlbV0gPSB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgICAgIH07XG4gICAgICB2YXIgcHNzaE5vZGUgPSBmaW5kQ2hpbGRyZW4obm9kZSwgJ2NlbmM6cHNzaCcpWzBdO1xuXG4gICAgICBpZiAocHNzaE5vZGUpIHtcbiAgICAgICAgdmFyIHBzc2ggPSBnZXRDb250ZW50KHBzc2hOb2RlKTtcbiAgICAgICAgdmFyIHBzc2hCdWZmZXIgPSBwc3NoICYmIGRlY29kZUI2NFRvVWludDhBcnJheShwc3NoKTtcbiAgICAgICAgYWNjW2tleVN5c3RlbV0ucHNzaCA9IHBzc2hCdWZmZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbi8qKlxuICogTWFwcyBhbiBBZGFwdGF0aW9uU2V0IG5vZGUgdG8gYSBsaXN0IG9mIFJlcHJlc2VudGF0aW9uIGluZm9ybWF0aW9uIG9iamVjdHNcbiAqXG4gKiBAbmFtZSB0b1JlcHJlc2VudGF0aW9uc0NhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYWRhcHRhdGlvblNldFxuICogICAgICAgIEFkYXB0YXRpb25TZXQgbm9kZSBmcm9tIHRoZSBtcGRcbiAqIEByZXR1cm4ge1JlcHJlc2VudGF0aW9uSW5mb3JtYXRpb25bXX1cbiAqICAgICAgICAgTGlzdCBvZiBvYmplY3RzIGNvbnRhaW5pbmcgUmVwcmVzZW50YWlvbiBpbmZvcm1hdGlvblxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGNhbGxiYWNrIGZvciBBcnJheS5wcm90b3R5cGUubWFwIGZvciBtYXBwaW5nIEFkYXB0YXRpb25TZXQgbm9kZXMgdG8gYSBsaXN0IG9mXG4gKiBSZXByZXNlbnRhdGlvbiBpbmZvcm1hdGlvbiBvYmplY3RzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBlcmlvZEF0dHJpYnV0ZXNcbiAqICAgICAgICBDb250YWlucyBhdHRyaWJ1dGVzIGluaGVyaXRlZCBieSB0aGUgUGVyaW9kXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwZXJpb2RCYXNlVXJsc1xuICogICAgICAgIENvbnRhaW5zIGxpc3Qgb2YgcmVzb2x2ZWQgYmFzZSB1cmxzIGluaGVyaXRlZCBieSB0aGUgUGVyaW9kXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwZXJpb2RTZWdtZW50SW5mb1xuICogICAgICAgIENvbnRhaW5zIFNlZ21lbnQgSW5mb3JtYXRpb24gYXQgdGhlIHBlcmlvZCBsZXZlbFxuICogQHJldHVybiB7dG9SZXByZXNlbnRhdGlvbnNDYWxsYmFja31cbiAqICAgICAgICAgQ2FsbGJhY2sgbWFwIGZ1bmN0aW9uXG4gKi9cblxuXG52YXIgdG9SZXByZXNlbnRhdGlvbnMgPSBmdW5jdGlvbiB0b1JlcHJlc2VudGF0aW9ucyhwZXJpb2RBdHRyaWJ1dGVzLCBwZXJpb2RCYXNlVXJscywgcGVyaW9kU2VnbWVudEluZm8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhZGFwdGF0aW9uU2V0KSB7XG4gICAgdmFyIGFkYXB0YXRpb25TZXRBdHRyaWJ1dGVzID0gcGFyc2VBdHRyaWJ1dGVzKGFkYXB0YXRpb25TZXQpO1xuICAgIHZhciBhZGFwdGF0aW9uU2V0QmFzZVVybHMgPSBidWlsZEJhc2VVcmxzKHBlcmlvZEJhc2VVcmxzLCBmaW5kQ2hpbGRyZW4oYWRhcHRhdGlvblNldCwgJ0Jhc2VVUkwnKSk7XG4gICAgdmFyIHJvbGUgPSBmaW5kQ2hpbGRyZW4oYWRhcHRhdGlvblNldCwgJ1JvbGUnKVswXTtcbiAgICB2YXIgcm9sZUF0dHJpYnV0ZXMgPSB7XG4gICAgICByb2xlOiBwYXJzZUF0dHJpYnV0ZXMocm9sZSlcbiAgICB9O1xuICAgIHZhciBhdHRycyA9IG1lcmdlKHBlcmlvZEF0dHJpYnV0ZXMsIGFkYXB0YXRpb25TZXRBdHRyaWJ1dGVzLCByb2xlQXR0cmlidXRlcyk7XG4gICAgdmFyIGNvbnRlbnRQcm90ZWN0aW9uID0gZ2VuZXJhdGVLZXlTeXN0ZW1JbmZvcm1hdGlvbihmaW5kQ2hpbGRyZW4oYWRhcHRhdGlvblNldCwgJ0NvbnRlbnRQcm90ZWN0aW9uJykpO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKGNvbnRlbnRQcm90ZWN0aW9uKS5sZW5ndGgpIHtcbiAgICAgIGF0dHJzID0gbWVyZ2UoYXR0cnMsIHtcbiAgICAgICAgY29udGVudFByb3RlY3Rpb246IGNvbnRlbnRQcm90ZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSBnZXRTZWdtZW50SW5mb3JtYXRpb24oYWRhcHRhdGlvblNldCk7XG4gICAgdmFyIHJlcHJlc2VudGF0aW9ucyA9IGZpbmRDaGlsZHJlbihhZGFwdGF0aW9uU2V0LCAnUmVwcmVzZW50YXRpb24nKTtcbiAgICB2YXIgYWRhcHRhdGlvblNldFNlZ21lbnRJbmZvID0gbWVyZ2UocGVyaW9kU2VnbWVudEluZm8sIHNlZ21lbnRJbmZvKTtcbiAgICByZXR1cm4gZmxhdHRlbihyZXByZXNlbnRhdGlvbnMubWFwKGluaGVyaXRCYXNlVXJscyhhdHRycywgYWRhcHRhdGlvblNldEJhc2VVcmxzLCBhZGFwdGF0aW9uU2V0U2VnbWVudEluZm8pKSk7XG4gIH07XG59O1xuLyoqXG4gKiBNYXBzIGFuIFBlcmlvZCBub2RlIHRvIGEgbGlzdCBvZiBSZXByZXNlbnRhdGlvbiBpbmZvcmFtdGlvbiBvYmplY3RzIGZvciBhbGxcbiAqIEFkYXB0YXRpb25TZXQgbm9kZXMgY29udGFpbmVkIHdpdGhpbiB0aGUgUGVyaW9kXG4gKlxuICogQG5hbWUgdG9BZGFwdGF0aW9uU2V0c0NhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gcGVyaW9kXG4gKiAgICAgICAgUGVyaW9kIG5vZGUgZnJvbSB0aGUgbXBkXG4gKiBAcGFyYW0ge251bWJlcn0gcGVyaW9kSW5kZXhcbiAqICAgICAgICBJbmRleCBvZiB0aGUgUGVyaW9kIHdpdGhpbiB0aGUgbXBkXG4gKiBAcmV0dXJuIHtSZXByZXNlbnRhdGlvbkluZm9ybWF0aW9uW119XG4gKiAgICAgICAgIExpc3Qgb2Ygb2JqZWN0cyBjb250YWluaW5nIFJlcHJlc2VudGFpb24gaW5mb3JtYXRpb25cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBjYWxsYmFjayBmb3IgQXJyYXkucHJvdG90eXBlLm1hcCBmb3IgbWFwcGluZyBQZXJpb2Qgbm9kZXMgdG8gYSBsaXN0IG9mXG4gKiBSZXByZXNlbnRhdGlvbiBpbmZvcm1hdGlvbiBvYmplY3RzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1wZEF0dHJpYnV0ZXNcbiAqICAgICAgICBDb250YWlucyBhdHRyaWJ1dGVzIGluaGVyaXRlZCBieSB0aGUgbXBkXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBtcGRCYXNlVXJsc1xuICogICAgICAgIENvbnRhaW5zIGxpc3Qgb2YgcmVzb2x2ZWQgYmFzZSB1cmxzIGluaGVyaXRlZCBieSB0aGUgbXBkXG4gKiBAcmV0dXJuIHt0b0FkYXB0YXRpb25TZXRzQ2FsbGJhY2t9XG4gKiAgICAgICAgIENhbGxiYWNrIG1hcCBmdW5jdGlvblxuICovXG5cbnZhciB0b0FkYXB0YXRpb25TZXRzID0gZnVuY3Rpb24gdG9BZGFwdGF0aW9uU2V0cyhtcGRBdHRyaWJ1dGVzLCBtcGRCYXNlVXJscykge1xuICByZXR1cm4gZnVuY3Rpb24gKHBlcmlvZCwgaW5kZXgpIHtcbiAgICB2YXIgcGVyaW9kQmFzZVVybHMgPSBidWlsZEJhc2VVcmxzKG1wZEJhc2VVcmxzLCBmaW5kQ2hpbGRyZW4ocGVyaW9kLCAnQmFzZVVSTCcpKTtcbiAgICB2YXIgcGVyaW9kQXR0ID0gcGFyc2VBdHRyaWJ1dGVzKHBlcmlvZCk7XG4gICAgdmFyIHBhcnNlZFBlcmlvZElkID0gcGFyc2VJbnQocGVyaW9kQXR0LmlkLCAxMCk7IC8vIGZhbGxiYWNrIHRvIG1hcHBpbmcgaW5kZXggaWYgUGVyaW9kQGlkIGlzIG5vdCBhIG51bWJlclxuXG4gICAgdmFyIHBlcmlvZEluZGV4ID0gd2luZG93JDEuaXNOYU4ocGFyc2VkUGVyaW9kSWQpID8gaW5kZXggOiBwYXJzZWRQZXJpb2RJZDtcbiAgICB2YXIgcGVyaW9kQXR0cmlidXRlcyA9IG1lcmdlKG1wZEF0dHJpYnV0ZXMsIHtcbiAgICAgIHBlcmlvZEluZGV4OiBwZXJpb2RJbmRleFxuICAgIH0pO1xuICAgIHZhciBhZGFwdGF0aW9uU2V0cyA9IGZpbmRDaGlsZHJlbihwZXJpb2QsICdBZGFwdGF0aW9uU2V0Jyk7XG4gICAgdmFyIHBlcmlvZFNlZ21lbnRJbmZvID0gZ2V0U2VnbWVudEluZm9ybWF0aW9uKHBlcmlvZCk7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYWRhcHRhdGlvblNldHMubWFwKHRvUmVwcmVzZW50YXRpb25zKHBlcmlvZEF0dHJpYnV0ZXMsIHBlcmlvZEJhc2VVcmxzLCBwZXJpb2RTZWdtZW50SW5mbykpKTtcbiAgfTtcbn07XG4vKipcbiAqIFRyYXZlcnNlcyB0aGUgbXBkIHhtbCB0cmVlIHRvIGdlbmVyYXRlIGEgbGlzdCBvZiBSZXByZXNlbnRhdGlvbiBpbmZvcm1hdGlvbiBvYmplY3RzXG4gKiB0aGF0IGhhdmUgaW5oZXJpdGVkIGF0dHJpYnV0ZXMgZnJvbSBwYXJlbnQgbm9kZXNcbiAqXG4gKiBAcGFyYW0ge05vZGV9IG1wZFxuICogICAgICAgIFRoZSByb290IG5vZGUgb2YgdGhlIG1wZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqICAgICAgICBBdmFpbGFibGUgb3B0aW9ucyBmb3IgaW5oZXJpdEF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm1hbmlmZXN0VXJpXG4gKiAgICAgICAgVGhlIHVyaSBzb3VyY2Ugb2YgdGhlIG1wZFxuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMuTk9XXG4gKiAgICAgICAgQ3VycmVudCB0aW1lIHBlciBEQVNIIElPUC4gIERlZmF1bHQgaXMgY3VycmVudCB0aW1lIGluIG1zIHNpbmNlIGVwb2NoXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5jbGllbnRPZmZzZXRcbiAqICAgICAgICBDbGllbnQgdGltZSBkaWZmZXJlbmNlIGZyb20gTk9XIChpbiBtaWxsaXNlY29uZHMpXG4gKiBAcmV0dXJuIHtSZXByZXNlbnRhdGlvbkluZm9ybWF0aW9uW119XG4gKiAgICAgICAgIExpc3Qgb2Ygb2JqZWN0cyBjb250YWluaW5nIFJlcHJlc2VudGF0aW9uIGluZm9ybWF0aW9uXG4gKi9cblxudmFyIGluaGVyaXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gaW5oZXJpdEF0dHJpYnV0ZXMobXBkLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkbWFuaWZlc3RVcmkgPSBfb3B0aW9ucy5tYW5pZmVzdFVyaSxcbiAgICAgIG1hbmlmZXN0VXJpID0gX29wdGlvbnMkbWFuaWZlc3RVcmkgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkbWFuaWZlc3RVcmksXG4gICAgICBfb3B0aW9ucyROT1cgPSBfb3B0aW9ucy5OT1csXG4gICAgICBOT1cgPSBfb3B0aW9ucyROT1cgPT09IHZvaWQgMCA/IERhdGUubm93KCkgOiBfb3B0aW9ucyROT1csXG4gICAgICBfb3B0aW9ucyRjbGllbnRPZmZzZXQgPSBfb3B0aW9ucy5jbGllbnRPZmZzZXQsXG4gICAgICBjbGllbnRPZmZzZXQgPSBfb3B0aW9ucyRjbGllbnRPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRjbGllbnRPZmZzZXQ7XG4gIHZhciBwZXJpb2RzID0gZmluZENoaWxkcmVuKG1wZCwgJ1BlcmlvZCcpO1xuXG4gIGlmICghcGVyaW9kcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLklOVkFMSURfTlVNQkVSX09GX1BFUklPRCk7XG4gIH1cblxuICB2YXIgbXBkQXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtcGQpO1xuICB2YXIgbXBkQmFzZVVybHMgPSBidWlsZEJhc2VVcmxzKFttYW5pZmVzdFVyaV0sIGZpbmRDaGlsZHJlbihtcGQsICdCYXNlVVJMJykpO1xuICBtcGRBdHRyaWJ1dGVzLnNvdXJjZUR1cmF0aW9uID0gbXBkQXR0cmlidXRlcy5tZWRpYVByZXNlbnRhdGlvbkR1cmF0aW9uIHx8IDA7XG4gIG1wZEF0dHJpYnV0ZXMuTk9XID0gTk9XO1xuICBtcGRBdHRyaWJ1dGVzLmNsaWVudE9mZnNldCA9IGNsaWVudE9mZnNldDtcbiAgcmV0dXJuIGZsYXR0ZW4ocGVyaW9kcy5tYXAodG9BZGFwdGF0aW9uU2V0cyhtcGRBdHRyaWJ1dGVzLCBtcGRCYXNlVXJscykpKTtcbn07XG5cbnZhciBzdHJpbmdUb01wZFhtbCA9IGZ1bmN0aW9uIHN0cmluZ1RvTXBkWG1sKG1hbmlmZXN0U3RyaW5nKSB7XG4gIGlmIChtYW5pZmVzdFN0cmluZyA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLkRBU0hfRU1QVFlfTUFOSUZFU1QpO1xuICB9XG5cbiAgdmFyIHBhcnNlciA9IG5ldyB3aW5kb3ckMS5ET01QYXJzZXIoKTtcbiAgdmFyIHhtbCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcobWFuaWZlc3RTdHJpbmcsICdhcHBsaWNhdGlvbi94bWwnKTtcbiAgdmFyIG1wZCA9IHhtbCAmJiB4bWwuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUgPT09ICdNUEQnID8geG1sLmRvY3VtZW50RWxlbWVudCA6IG51bGw7XG5cbiAgaWYgKCFtcGQgfHwgbXBkICYmIG1wZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgncGFyc2VyZXJyb3InKS5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5EQVNIX0lOVkFMSURfWE1MKTtcbiAgfVxuXG4gIHJldHVybiBtcGQ7XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgbWFuaWZlc3QgZm9yIGEgVVRDVGltaW5nIG5vZGUsIHJldHVybmluZyB0aGUgbm9kZXMgYXR0cmlidXRlcyBpZiBmb3VuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtcGRcbiAqICAgICAgICBYTUwgc3RyaW5nIG9mIHRoZSBNUEQgbWFuaWZlc3RcbiAqIEByZXR1cm4ge09iamVjdHxudWxsfVxuICogICAgICAgICBBdHRyaWJ1dGVzIG9mIFVUQ1RpbWluZyBub2RlIHNwZWNpZmllZCBpbiB0aGUgbWFuaWZlc3QuIE51bGwgaWYgbm9uZSBmb3VuZFxuICovXG5cbnZhciBwYXJzZVVUQ1RpbWluZ1NjaGVtZSA9IGZ1bmN0aW9uIHBhcnNlVVRDVGltaW5nU2NoZW1lKG1wZCkge1xuICB2YXIgVVRDVGltaW5nTm9kZSA9IGZpbmRDaGlsZHJlbihtcGQsICdVVENUaW1pbmcnKVswXTtcblxuICBpZiAoIVVUQ1RpbWluZ05vZGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBhdHRyaWJ1dGVzID0gcGFyc2VBdHRyaWJ1dGVzKFVUQ1RpbWluZ05vZGUpO1xuXG4gIHN3aXRjaCAoYXR0cmlidXRlcy5zY2hlbWVJZFVyaSkge1xuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOmh0dHAtaGVhZDoyMDE0JzpcbiAgICBjYXNlICd1cm46bXBlZzpkYXNoOnV0YzpodHRwLWhlYWQ6MjAxMic6XG4gICAgICBhdHRyaWJ1dGVzLm1ldGhvZCA9ICdIRUFEJztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC14c2RhdGU6MjAxNCc6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1pc286MjAxNCc6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC14c2RhdGU6MjAxMic6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1pc286MjAxMic6XG4gICAgICBhdHRyaWJ1dGVzLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd1cm46bXBlZzpkYXNoOnV0YzpkaXJlY3Q6MjAxNCc6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6ZGlyZWN0OjIwMTInOlxuICAgICAgYXR0cmlidXRlcy5tZXRob2QgPSAnRElSRUNUJztcbiAgICAgIGF0dHJpYnV0ZXMudmFsdWUgPSBEYXRlLnBhcnNlKGF0dHJpYnV0ZXMudmFsdWUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd1cm46bXBlZzpkYXNoOnV0YzpodHRwLW50cDoyMDE0JzpcbiAgICBjYXNlICd1cm46bXBlZzpkYXNoOnV0YzpudHA6MjAxNCc6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6c250cDoyMDE0JzpcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5VTlNVUFBPUlRFRF9VVENfVElNSU5HX1NDSEVNRSk7XG4gIH1cblxuICByZXR1cm4gYXR0cmlidXRlcztcbn07XG5cbnZhciBWRVJTSU9OID0gdmVyc2lvbjtcbnZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKG1hbmlmZXN0U3RyaW5nLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICByZXR1cm4gdG9NM3U4KHRvUGxheWxpc3RzKGluaGVyaXRBdHRyaWJ1dGVzKHN0cmluZ1RvTXBkWG1sKG1hbmlmZXN0U3RyaW5nKSwgb3B0aW9ucykpLCBvcHRpb25zLnNpZHhNYXBwaW5nKTtcbn07XG4vKipcbiAqIFBhcnNlcyB0aGUgbWFuaWZlc3QgZm9yIGEgVVRDVGltaW5nIG5vZGUsIHJldHVybmluZyB0aGUgbm9kZXMgYXR0cmlidXRlcyBpZiBmb3VuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdFN0cmluZ1xuICogICAgICAgIFhNTCBzdHJpbmcgb2YgdGhlIE1QRCBtYW5pZmVzdFxuICogQHJldHVybiB7T2JqZWN0fG51bGx9XG4gKiAgICAgICAgIEF0dHJpYnV0ZXMgb2YgVVRDVGltaW5nIG5vZGUgc3BlY2lmaWVkIGluIHRoZSBtYW5pZmVzdC4gTnVsbCBpZiBub25lIGZvdW5kXG4gKi9cblxudmFyIHBhcnNlVVRDVGltaW5nID0gZnVuY3Rpb24gcGFyc2VVVENUaW1pbmcobWFuaWZlc3RTdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlVVRDVGltaW5nU2NoZW1lKHN0cmluZ1RvTXBkWG1sKG1hbmlmZXN0U3RyaW5nKSk7XG59O1xuXG5leHBvcnQgeyBWRVJTSU9OLCBwYXJzZSwgcGFyc2VVVENUaW1pbmcgfTtcbiIsIi8qXG4gKiBwa2NzNy5wYWRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9icmlnaHRjb3ZlL3BrY3M3XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBhcGFjaGUyIGxpY2Vuc2UuXG4gKi9cblxudmFyIFBBRERJTkcgPSB2b2lkIDA7XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBVaW50OEFycmF5IHRoYXQgaXMgcGFkZGVkIHdpdGggUEtDUyM3IHBhZGRpbmcuXG4gKiBAcGFyYW0gcGxhaW50ZXh0IHtVaW50OEFycmF5fSB0aGUgaW5wdXQgYnl0ZXMgYmVmb3JlIGVuY3J5cHRpb25cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHRoZSBwYWRkZWQgYnl0ZXNcbiAqIEBzZWUgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTY1MlxuICovXG5mdW5jdGlvbiBwYWQocGxhaW50ZXh0KSB7XG4gIHZhciBwYWRkaW5nID0gUEFERElOR1twbGFpbnRleHQuYnl0ZUxlbmd0aCAlIDE2IHx8IDBdO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkocGxhaW50ZXh0LmJ5dGVMZW5ndGggKyBwYWRkaW5nLmxlbmd0aCk7XG5cbiAgcmVzdWx0LnNldChwbGFpbnRleHQpO1xuICByZXN1bHQuc2V0KHBhZGRpbmcsIHBsYWludGV4dC5ieXRlTGVuZ3RoKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBwcmUtZGVmaW5lIHRoZSBwYWRkaW5nIHZhbHVlc1xuUEFERElORyA9IFtbMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTZdLCBbMTUsIDE1LCAxNSwgMTUsIDE1LCAxNSwgMTUsIDE1LCAxNSwgMTUsIDE1LCAxNSwgMTUsIDE1LCAxNV0sIFsxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTRdLCBbMTMsIDEzLCAxMywgMTMsIDEzLCAxMywgMTMsIDEzLCAxMywgMTMsIDEzLCAxMywgMTNdLCBbMTIsIDEyLCAxMiwgMTIsIDEyLCAxMiwgMTIsIDEyLCAxMiwgMTIsIDEyLCAxMl0sIFsxMSwgMTEsIDExLCAxMSwgMTEsIDExLCAxMSwgMTEsIDExLCAxMSwgMTFdLCBbMTAsIDEwLCAxMCwgMTAsIDEwLCAxMCwgMTAsIDEwLCAxMCwgMTBdLCBbOSwgOSwgOSwgOSwgOSwgOSwgOSwgOSwgOV0sIFs4LCA4LCA4LCA4LCA4LCA4LCA4LCA4XSwgWzcsIDcsIDcsIDcsIDcsIDcsIDddLCBbNiwgNiwgNiwgNiwgNiwgNl0sIFs1LCA1LCA1LCA1LCA1XSwgWzQsIDQsIDQsIDRdLCBbMywgMywgM10sIFsyLCAyXSwgWzFdXTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdWJhcnJheSBvZiBhIFVpbnQ4QXJyYXkgd2l0aG91dCBQS0NTIzcgcGFkZGluZy5cbiAqIEBwYXJhbSBwYWRkZWQge1VpbnQ4QXJyYXl9IHVuZW5jcnlwdGVkIGJ5dGVzIHRoYXQgaGF2ZSBiZWVuIHBhZGRlZFxuICogQHJldHVybiB7VWludDhBcnJheX0gdGhlIHVucGFkZGVkIGJ5dGVzXG4gKiBAc2VlIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU2NTJcbiAqL1xuZnVuY3Rpb24gdW5wYWQocGFkZGVkKSB7XG4gIHJldHVybiBwYWRkZWQuc3ViYXJyYXkoMCwgcGFkZGVkLmJ5dGVMZW5ndGggLSBwYWRkZWRbcGFkZGVkLmJ5dGVMZW5ndGggLSAxXSk7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIxLjAuMlwiO1xuXG5leHBvcnQgeyBwYWQsIHVucGFkLCB2ZXJzaW9uIGFzIFZFUlNJT04gfTtcbiIsImltcG9ydCB7IHVucGFkIH0gZnJvbSAncGtjczcnO1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cblxuXG5cblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuLyoqXG4gKiBAZmlsZSBhZXMuanNcbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgYW4gYWRhcHRhdGlvbiBvZiB0aGUgQUVTIGRlY3J5cHRpb24gYWxnb3JpdGhtXG4gKiBmcm9tIHRoZSBTdGFuZGZvcmQgSmF2YXNjcmlwdCBDcnlwdG9ncmFwaHkgTGlicmFyeS4gVGhhdCB3b3JrIGlzXG4gKiBjb3ZlcmVkIGJ5IHRoZSBmb2xsb3dpbmcgY29weXJpZ2h0IGFuZCBwZXJtaXNzaW9ucyBub3RpY2U6XG4gKlxuICogQ29weXJpZ2h0IDIwMDktMjAxMCBFbWlseSBTdGFyaywgTWlrZSBIYW1idXJnLCBEYW4gQm9uZWguXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZVxuICogICAgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqICAgIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxuICogICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIEFVVEhPUlMgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTUyBPUlxuICogSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBPUiBDT05UUklCVVRPUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiAqIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4gKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1JcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0VcbiAqIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU5cbiAqIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqIFRoZSB2aWV3cyBhbmQgY29uY2x1c2lvbnMgY29udGFpbmVkIGluIHRoZSBzb2Z0d2FyZSBhbmQgZG9jdW1lbnRhdGlvblxuICogYXJlIHRob3NlIG9mIHRoZSBhdXRob3JzIGFuZCBzaG91bGQgbm90IGJlIGludGVycHJldGVkIGFzIHJlcHJlc2VudGluZ1xuICogb2ZmaWNpYWwgcG9saWNpZXMsIGVpdGhlciBleHByZXNzZWQgb3IgaW1wbGllZCwgb2YgdGhlIGF1dGhvcnMuXG4gKi9cblxuLyoqXG4gKiBFeHBhbmQgdGhlIFMtYm94IHRhYmxlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUoKSB7XG4gIHZhciB0YWJsZXMgPSBbW1tdLCBbXSwgW10sIFtdLCBbXV0sIFtbXSwgW10sIFtdLCBbXSwgW11dXTtcbiAgdmFyIGVuY1RhYmxlID0gdGFibGVzWzBdO1xuICB2YXIgZGVjVGFibGUgPSB0YWJsZXNbMV07XG4gIHZhciBzYm94ID0gZW5jVGFibGVbNF07XG4gIHZhciBzYm94SW52ID0gZGVjVGFibGVbNF07XG4gIHZhciBpID0gdm9pZCAwO1xuICB2YXIgeCA9IHZvaWQgMDtcbiAgdmFyIHhJbnYgPSB2b2lkIDA7XG4gIHZhciBkID0gW107XG4gIHZhciB0aCA9IFtdO1xuICB2YXIgeDIgPSB2b2lkIDA7XG4gIHZhciB4NCA9IHZvaWQgMDtcbiAgdmFyIHg4ID0gdm9pZCAwO1xuICB2YXIgcyA9IHZvaWQgMDtcbiAgdmFyIHRFbmMgPSB2b2lkIDA7XG4gIHZhciB0RGVjID0gdm9pZCAwO1xuXG4gIC8vIENvbXB1dGUgZG91YmxlIGFuZCB0aGlyZCB0YWJsZXNcbiAgZm9yIChpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgdGhbKGRbaV0gPSBpIDw8IDEgXiAoaSA+PiA3KSAqIDI4MykgXiBpXSA9IGk7XG4gIH1cblxuICBmb3IgKHggPSB4SW52ID0gMDsgIXNib3hbeF07IHggXj0geDIgfHwgMSwgeEludiA9IHRoW3hJbnZdIHx8IDEpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICBzID0geEludiBeIHhJbnYgPDwgMSBeIHhJbnYgPDwgMiBeIHhJbnYgPDwgMyBeIHhJbnYgPDwgNDtcbiAgICBzID0gcyA+PiA4IF4gcyAmIDI1NSBeIDk5O1xuICAgIHNib3hbeF0gPSBzO1xuICAgIHNib3hJbnZbc10gPSB4O1xuXG4gICAgLy8gQ29tcHV0ZSBNaXhDb2x1bW5zXG4gICAgeDggPSBkW3g0ID0gZFt4MiA9IGRbeF1dXTtcbiAgICB0RGVjID0geDggKiAweDEwMTAxMDEgXiB4NCAqIDB4MTAwMDEgXiB4MiAqIDB4MTAxIF4geCAqIDB4MTAxMDEwMDtcbiAgICB0RW5jID0gZFtzXSAqIDB4MTAxIF4gcyAqIDB4MTAxMDEwMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIGVuY1RhYmxlW2ldW3hdID0gdEVuYyA9IHRFbmMgPDwgMjQgXiB0RW5jID4+PiA4O1xuICAgICAgZGVjVGFibGVbaV1bc10gPSB0RGVjID0gdERlYyA8PCAyNCBeIHREZWMgPj4+IDg7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcGFjdGlmeS4gQ29uc2lkZXJhYmxlIHNwZWVkdXAgb24gRmlyZWZveC5cbiAgZm9yIChpID0gMDsgaSA8IDU7IGkrKykge1xuICAgIGVuY1RhYmxlW2ldID0gZW5jVGFibGVbaV0uc2xpY2UoMCk7XG4gICAgZGVjVGFibGVbaV0gPSBkZWNUYWJsZVtpXS5zbGljZSgwKTtcbiAgfVxuICByZXR1cm4gdGFibGVzO1xufTtcbnZhciBhZXNUYWJsZXMgPSBudWxsO1xuXG4vKipcbiAqIFNjaGVkdWxlIG91dCBhbiBBRVMga2V5IGZvciBib3RoIGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24uIFRoaXNcbiAqIGlzIGEgbG93LWxldmVsIGNsYXNzLiBVc2UgYSBjaXBoZXIgbW9kZSB0byBkbyBidWxrIGVuY3J5cHRpb24uXG4gKlxuICogQGNsYXNzIEFFU1xuICogQHBhcmFtIGtleSB7QXJyYXl9IFRoZSBrZXkgYXMgYW4gYXJyYXkgb2YgNCwgNiBvciA4IHdvcmRzLlxuICovXG5cbnZhciBBRVMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFFUyhrZXkpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBBRVMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGV4cGFuZGVkIFMtYm94IGFuZCBpbnZlcnNlIFMtYm94IHRhYmxlcy4gVGhlc2Ugd2lsbCBiZSBjb21wdXRlZFxuICAgICAqIG9uIHRoZSBjbGllbnQgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNlbmQgdGhlbSBkb3duIHRoZSB3aXJlLlxuICAgICAqXG4gICAgICogVGhlcmUgYXJlIHR3byB0YWJsZXMsIF90YWJsZXNbMF0gaXMgZm9yIGVuY3J5cHRpb24gYW5kXG4gICAgICogX3RhYmxlc1sxXSBpcyBmb3IgZGVjcnlwdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBmaXJzdCA0IHN1Yi10YWJsZXMgYXJlIHRoZSBleHBhbmRlZCBTLWJveCB3aXRoIE1peENvbHVtbnMuIFRoZVxuICAgICAqIGxhc3QgKF90YWJsZXNbMDFdWzRdKSBpcyB0aGUgUy1ib3ggaXRzZWxmLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICAvLyBpZiB3ZSBoYXZlIHlldCB0byBwcmVjb21wdXRlIHRoZSBTLWJveCB0YWJsZXNcbiAgICAvLyBkbyBzbyBub3dcbiAgICBpZiAoIWFlc1RhYmxlcykge1xuICAgICAgYWVzVGFibGVzID0gcHJlY29tcHV0ZSgpO1xuICAgIH1cbiAgICAvLyB0aGVuIG1ha2UgYSBjb3B5IG9mIHRoYXQgb2JqZWN0IGZvciB1c2VcbiAgICB0aGlzLl90YWJsZXMgPSBbW2Flc1RhYmxlc1swXVswXS5zbGljZSgpLCBhZXNUYWJsZXNbMF1bMV0uc2xpY2UoKSwgYWVzVGFibGVzWzBdWzJdLnNsaWNlKCksIGFlc1RhYmxlc1swXVszXS5zbGljZSgpLCBhZXNUYWJsZXNbMF1bNF0uc2xpY2UoKV0sIFthZXNUYWJsZXNbMV1bMF0uc2xpY2UoKSwgYWVzVGFibGVzWzFdWzFdLnNsaWNlKCksIGFlc1RhYmxlc1sxXVsyXS5zbGljZSgpLCBhZXNUYWJsZXNbMV1bM10uc2xpY2UoKSwgYWVzVGFibGVzWzFdWzRdLnNsaWNlKCldXTtcbiAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICB2YXIgaiA9IHZvaWQgMDtcbiAgICB2YXIgdG1wID0gdm9pZCAwO1xuICAgIHZhciBlbmNLZXkgPSB2b2lkIDA7XG4gICAgdmFyIGRlY0tleSA9IHZvaWQgMDtcbiAgICB2YXIgc2JveCA9IHRoaXMuX3RhYmxlc1swXVs0XTtcbiAgICB2YXIgZGVjVGFibGUgPSB0aGlzLl90YWJsZXNbMV07XG4gICAgdmFyIGtleUxlbiA9IGtleS5sZW5ndGg7XG4gICAgdmFyIHJjb24gPSAxO1xuXG4gICAgaWYgKGtleUxlbiAhPT0gNCAmJiBrZXlMZW4gIT09IDYgJiYga2V5TGVuICE9PSA4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWVzIGtleSBzaXplJyk7XG4gICAgfVxuXG4gICAgZW5jS2V5ID0ga2V5LnNsaWNlKDApO1xuICAgIGRlY0tleSA9IFtdO1xuICAgIHRoaXMuX2tleSA9IFtlbmNLZXksIGRlY0tleV07XG5cbiAgICAvLyBzY2hlZHVsZSBlbmNyeXB0aW9uIGtleXNcbiAgICBmb3IgKGkgPSBrZXlMZW47IGkgPCA0ICoga2V5TGVuICsgMjg7IGkrKykge1xuICAgICAgdG1wID0gZW5jS2V5W2kgLSAxXTtcblxuICAgICAgLy8gYXBwbHkgc2JveFxuICAgICAgaWYgKGkgJSBrZXlMZW4gPT09IDAgfHwga2V5TGVuID09PSA4ICYmIGkgJSBrZXlMZW4gPT09IDQpIHtcbiAgICAgICAgdG1wID0gc2JveFt0bXAgPj4+IDI0XSA8PCAyNCBeIHNib3hbdG1wID4+IDE2ICYgMjU1XSA8PCAxNiBeIHNib3hbdG1wID4+IDggJiAyNTVdIDw8IDggXiBzYm94W3RtcCAmIDI1NV07XG5cbiAgICAgICAgLy8gc2hpZnQgcm93cyBhbmQgYWRkIHJjb25cbiAgICAgICAgaWYgKGkgJSBrZXlMZW4gPT09IDApIHtcbiAgICAgICAgICB0bXAgPSB0bXAgPDwgOCBeIHRtcCA+Pj4gMjQgXiByY29uIDw8IDI0O1xuICAgICAgICAgIHJjb24gPSByY29uIDw8IDEgXiAocmNvbiA+PiA3KSAqIDI4MztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbmNLZXlbaV0gPSBlbmNLZXlbaSAtIGtleUxlbl0gXiB0bXA7XG4gICAgfVxuXG4gICAgLy8gc2NoZWR1bGUgZGVjcnlwdGlvbiBrZXlzXG4gICAgZm9yIChqID0gMDsgaTsgaisrLCBpLS0pIHtcbiAgICAgIHRtcCA9IGVuY0tleVtqICYgMyA/IGkgOiBpIC0gNF07XG4gICAgICBpZiAoaSA8PSA0IHx8IGogPCA0KSB7XG4gICAgICAgIGRlY0tleVtqXSA9IHRtcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlY0tleVtqXSA9IGRlY1RhYmxlWzBdW3Nib3hbdG1wID4+PiAyNF1dIF4gZGVjVGFibGVbMV1bc2JveFt0bXAgPj4gMTYgJiAyNTVdXSBeIGRlY1RhYmxlWzJdW3Nib3hbdG1wID4+IDggJiAyNTVdXSBeIGRlY1RhYmxlWzNdW3Nib3hbdG1wICYgMjU1XV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlY3J5cHQgMTYgYnl0ZXMsIHNwZWNpZmllZCBhcyBmb3VyIDMyLWJpdCB3b3Jkcy5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVuY3J5cHRlZDAgdGhlIGZpcnN0IHdvcmQgdG8gZGVjcnlwdFxuICAgKiBAcGFyYW0ge051bWJlcn0gZW5jcnlwdGVkMSB0aGUgc2Vjb25kIHdvcmQgdG8gZGVjcnlwdFxuICAgKiBAcGFyYW0ge051bWJlcn0gZW5jcnlwdGVkMiB0aGUgdGhpcmQgd29yZCB0byBkZWNyeXB0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbmNyeXB0ZWQzIHRoZSBmb3VydGggd29yZCB0byBkZWNyeXB0XG4gICAqIEBwYXJhbSB7SW50MzJBcnJheX0gb3V0IHRoZSBhcnJheSB0byB3cml0ZSB0aGUgZGVjcnlwdGVkIHdvcmRzXG4gICAqIGludG9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCB0aGUgb2Zmc2V0IGludG8gdGhlIG91dHB1dCBhcnJheSB0byBzdGFydFxuICAgKiB3cml0aW5nIHJlc3VsdHNcbiAgICogQHJldHVybiB7QXJyYXl9IFRoZSBwbGFpbnRleHQuXG4gICAqL1xuXG5cbiAgQUVTLnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChlbmNyeXB0ZWQwLCBlbmNyeXB0ZWQxLCBlbmNyeXB0ZWQyLCBlbmNyeXB0ZWQzLCBvdXQsIG9mZnNldCkge1xuICAgIHZhciBrZXkgPSB0aGlzLl9rZXlbMV07XG4gICAgLy8gc3RhdGUgdmFyaWFibGVzIGEsYixjLGQgYXJlIGxvYWRlZCB3aXRoIHByZS13aGl0ZW5lZCBkYXRhXG4gICAgdmFyIGEgPSBlbmNyeXB0ZWQwIF4ga2V5WzBdO1xuICAgIHZhciBiID0gZW5jcnlwdGVkMyBeIGtleVsxXTtcbiAgICB2YXIgYyA9IGVuY3J5cHRlZDIgXiBrZXlbMl07XG4gICAgdmFyIGQgPSBlbmNyeXB0ZWQxIF4ga2V5WzNdO1xuICAgIHZhciBhMiA9IHZvaWQgMDtcbiAgICB2YXIgYjIgPSB2b2lkIDA7XG4gICAgdmFyIGMyID0gdm9pZCAwO1xuXG4gICAgLy8ga2V5Lmxlbmd0aCA9PT0gMiA/XG4gICAgdmFyIG5Jbm5lclJvdW5kcyA9IGtleS5sZW5ndGggLyA0IC0gMjtcbiAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICB2YXIga0luZGV4ID0gNDtcbiAgICB2YXIgdGFibGUgPSB0aGlzLl90YWJsZXNbMV07XG5cbiAgICAvLyBsb2FkIHVwIHRoZSB0YWJsZXNcbiAgICB2YXIgdGFibGUwID0gdGFibGVbMF07XG4gICAgdmFyIHRhYmxlMSA9IHRhYmxlWzFdO1xuICAgIHZhciB0YWJsZTIgPSB0YWJsZVsyXTtcbiAgICB2YXIgdGFibGUzID0gdGFibGVbM107XG4gICAgdmFyIHNib3ggPSB0YWJsZVs0XTtcblxuICAgIC8vIElubmVyIHJvdW5kcy4gQ3JpYmJlZCBmcm9tIE9wZW5TU0wuXG4gICAgZm9yIChpID0gMDsgaSA8IG5Jbm5lclJvdW5kczsgaSsrKSB7XG4gICAgICBhMiA9IHRhYmxlMFthID4+PiAyNF0gXiB0YWJsZTFbYiA+PiAxNiAmIDI1NV0gXiB0YWJsZTJbYyA+PiA4ICYgMjU1XSBeIHRhYmxlM1tkICYgMjU1XSBeIGtleVtrSW5kZXhdO1xuICAgICAgYjIgPSB0YWJsZTBbYiA+Pj4gMjRdIF4gdGFibGUxW2MgPj4gMTYgJiAyNTVdIF4gdGFibGUyW2QgPj4gOCAmIDI1NV0gXiB0YWJsZTNbYSAmIDI1NV0gXiBrZXlba0luZGV4ICsgMV07XG4gICAgICBjMiA9IHRhYmxlMFtjID4+PiAyNF0gXiB0YWJsZTFbZCA+PiAxNiAmIDI1NV0gXiB0YWJsZTJbYSA+PiA4ICYgMjU1XSBeIHRhYmxlM1tiICYgMjU1XSBeIGtleVtrSW5kZXggKyAyXTtcbiAgICAgIGQgPSB0YWJsZTBbZCA+Pj4gMjRdIF4gdGFibGUxW2EgPj4gMTYgJiAyNTVdIF4gdGFibGUyW2IgPj4gOCAmIDI1NV0gXiB0YWJsZTNbYyAmIDI1NV0gXiBrZXlba0luZGV4ICsgM107XG4gICAgICBrSW5kZXggKz0gNDtcbiAgICAgIGEgPSBhMjtiID0gYjI7YyA9IGMyO1xuICAgIH1cblxuICAgIC8vIExhc3Qgcm91bmQuXG4gICAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgb3V0WygzICYgLWkpICsgb2Zmc2V0XSA9IHNib3hbYSA+Pj4gMjRdIDw8IDI0IF4gc2JveFtiID4+IDE2ICYgMjU1XSA8PCAxNiBeIHNib3hbYyA+PiA4ICYgMjU1XSA8PCA4IF4gc2JveFtkICYgMjU1XSBeIGtleVtrSW5kZXgrK107XG4gICAgICBhMiA9IGE7YSA9IGI7YiA9IGM7YyA9IGQ7ZCA9IGEyO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQUVTO1xufSgpO1xuXG4vKipcbiAqIEBmaWxlIHN0cmVhbS5qc1xuICovXG4vKipcbiAqIEEgbGlnaHR3ZWlnaHQgcmVhZGFibGUgc3RyZWFtIGltcGxlbWVudGlvbiB0aGF0IGhhbmRsZXMgZXZlbnQgZGlzcGF0Y2hpbmcuXG4gKlxuICogQGNsYXNzIFN0cmVhbVxuICovXG52YXIgU3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHJlYW0oKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyZWFtKTtcblxuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWVkIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIHRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYW4gZXZlbnQgb2ZcbiAgICogdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vyc1xuICAgKi9cblxuXG4gIFN0cmVhbS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgfVxuICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgdGhlIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgIGEgZnVuY3Rpb24gcHJldmlvdXNseSByZWdpc3RlcmVkIGZvciB0aGlzXG4gICAqIHR5cGUgb2YgZXZlbnQgdGhyb3VnaCBgb25gXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGlmIHdlIGNvdWxkIHR1cm4gaXQgb2ZmIG9yIG5vdFxuICAgKi9cblxuXG4gIFN0cmVhbS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHRoaXMubGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpO1xuXG4gICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgfTtcblxuICAvKipcbiAgICogVHJpZ2dlciBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb24gdGhpcyBzdHJlYW0uIEFueSBhZGRpdGlvbmFsXG4gICAqIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBwYXNzZWQgYXMgcGFyYW1ldGVycyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAqL1xuXG5cbiAgU3RyZWFtLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gdHJpZ2dlcih0eXBlKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTbGljaW5nIHRoZSBhcmd1bWVudHMgb24gZXZlcnkgaW52b2NhdGlvbiBvZiB0aGlzIG1ldGhvZFxuICAgIC8vIGNhbiBhZGQgYSBzaWduaWZpY2FudCBhbW91bnQgb2Ygb3ZlcmhlYWQuIEF2b2lkIHRoZVxuICAgIC8vIGludGVybWVkaWF0ZSBvYmplY3QgY3JlYXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhXG4gICAgLy8gc2luZ2xlIGNhbGxiYWNrIGFyZ3VtZW50XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHZhciBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBfbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9sZW5ndGg7ICsrX2kpIHtcbiAgICAgICAgY2FsbGJhY2tzW19pXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cC5cbiAgICovXG5cblxuICBTdHJlYW0ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gIH07XG4gIC8qKlxuICAgKiBGb3J3YXJkcyBhbGwgYGRhdGFgIGV2ZW50cyBvbiB0aGlzIHN0cmVhbSB0byB0aGUgZGVzdGluYXRpb24gc3RyZWFtLiBUaGVcbiAgICogZGVzdGluYXRpb24gc3RyZWFtIHNob3VsZCBwcm92aWRlIGEgbWV0aG9kIGBwdXNoYCB0byByZWNlaXZlIHRoZSBkYXRhXG4gICAqIGV2ZW50cyBhcyB0aGV5IGFycml2ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJlYW19IGRlc3RpbmF0aW9uIHRoZSBzdHJlYW0gdGhhdCB3aWxsIHJlY2VpdmUgYWxsIGBkYXRhYCBldmVudHNcbiAgICogQHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3BpcGVfZGVzdGluYXRpb25fb3B0aW9uc1xuICAgKi9cblxuXG4gIFN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIHBpcGUoZGVzdGluYXRpb24pIHtcbiAgICB0aGlzLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnB1c2goZGF0YSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0cmVhbTtcbn0oKTtcblxuLyoqXG4gKiBAZmlsZSBhc3luYy1zdHJlYW0uanNcbiAqL1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBTdHJlYW0gY2xhc3MgdG8gdXNlIHNldFRpZW1vdXRcbiAqIGFuZCBydW4gc3RyZWFtIFwiam9ic1wiIEFzeW5jaHJvbm91c2x5XG4gKlxuICogQGNsYXNzIEFzeW5jU3RyZWFtXG4gKiBAZXh0ZW5kcyBTdHJlYW1cbiAqL1xuXG52YXIgQXN5bmNTdHJlYW0gPSBmdW5jdGlvbiAoX1N0cmVhbSkge1xuICBpbmhlcml0cyhBc3luY1N0cmVhbSwgX1N0cmVhbSk7XG5cbiAgZnVuY3Rpb24gQXN5bmNTdHJlYW0oKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQXN5bmNTdHJlYW0pO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfU3RyZWFtLmNhbGwodGhpcywgU3RyZWFtKSk7XG5cbiAgICBfdGhpcy5qb2JzID0gW107XG4gICAgX3RoaXMuZGVsYXkgPSAxO1xuICAgIF90aGlzLnRpbWVvdXRfID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogcHJvY2VzcyBhbiBhc3luYyBqb2JcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICBBc3luY1N0cmVhbS5wcm90b3R5cGUucHJvY2Vzc0pvYl8gPSBmdW5jdGlvbiBwcm9jZXNzSm9iXygpIHtcbiAgICB0aGlzLmpvYnMuc2hpZnQoKSgpO1xuICAgIGlmICh0aGlzLmpvYnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRpbWVvdXRfID0gc2V0VGltZW91dCh0aGlzLnByb2Nlc3NKb2JfLmJpbmQodGhpcyksIHRoaXMuZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpbWVvdXRfID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIHB1c2ggYSBqb2IgaW50byB0aGUgc3RyZWFtXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGpvYiB0aGUgam9iIHRvIHB1c2ggaW50byB0aGUgc3RyZWFtXG4gICAqL1xuXG5cbiAgQXN5bmNTdHJlYW0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGpvYikge1xuICAgIHRoaXMuam9icy5wdXNoKGpvYik7XG4gICAgaWYgKCF0aGlzLnRpbWVvdXRfKSB7XG4gICAgICB0aGlzLnRpbWVvdXRfID0gc2V0VGltZW91dCh0aGlzLnByb2Nlc3NKb2JfLmJpbmQodGhpcyksIHRoaXMuZGVsYXkpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQXN5bmNTdHJlYW07XG59KFN0cmVhbSk7XG5cbi8qKlxuICogQGZpbGUgZGVjcnlwdGVyLmpzXG4gKlxuICogQW4gYXN5bmNocm9ub3VzIGltcGxlbWVudGF0aW9uIG9mIEFFUy0xMjggQ0JDIGRlY3J5cHRpb24gd2l0aFxuICogUEtDUyM3IHBhZGRpbmcuXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0IG5ldHdvcmstb3JkZXIgKGJpZy1lbmRpYW4pIGJ5dGVzIGludG8gdGhlaXIgbGl0dGxlLWVuZGlhblxuICogcmVwcmVzZW50YXRpb24uXG4gKi9cbnZhciBudG9oID0gZnVuY3Rpb24gbnRvaCh3b3JkKSB7XG4gIHJldHVybiB3b3JkIDw8IDI0IHwgKHdvcmQgJiAweGZmMDApIDw8IDggfCAod29yZCAmIDB4ZmYwMDAwKSA+PiA4IHwgd29yZCA+Pj4gMjQ7XG59O1xuXG4vKipcbiAqIERlY3J5cHQgYnl0ZXMgdXNpbmcgQUVTLTEyOCB3aXRoIENCQyBhbmQgUEtDUyM3IHBhZGRpbmcuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBlbmNyeXB0ZWQgdGhlIGVuY3J5cHRlZCBieXRlc1xuICogQHBhcmFtIHtVaW50MzJBcnJheX0ga2V5IHRoZSBieXRlcyBvZiB0aGUgZGVjcnlwdGlvbiBrZXlcbiAqIEBwYXJhbSB7VWludDMyQXJyYXl9IGluaXRWZWN0b3IgdGhlIGluaXRpYWxpemF0aW9uIHZlY3RvciAoSVYpIHRvXG4gKiB1c2UgZm9yIHRoZSBmaXJzdCByb3VuZCBvZiBDQkMuXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSB0aGUgZGVjcnlwdGVkIGJ5dGVzXG4gKlxuICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FkdmFuY2VkX0VuY3J5cHRpb25fU3RhbmRhcmRcbiAqIEBzZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CbG9ja19jaXBoZXJfbW9kZV9vZl9vcGVyYXRpb24jQ2lwaGVyX0Jsb2NrX0NoYWluaW5nXy4yOENCQy4yOVxuICogQHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjMxNVxuICovXG52YXIgZGVjcnlwdCA9IGZ1bmN0aW9uIGRlY3J5cHQoZW5jcnlwdGVkLCBrZXksIGluaXRWZWN0b3IpIHtcbiAgLy8gd29yZC1sZXZlbCBhY2Nlc3MgdG8gdGhlIGVuY3J5cHRlZCBieXRlc1xuICB2YXIgZW5jcnlwdGVkMzIgPSBuZXcgSW50MzJBcnJheShlbmNyeXB0ZWQuYnVmZmVyLCBlbmNyeXB0ZWQuYnl0ZU9mZnNldCwgZW5jcnlwdGVkLmJ5dGVMZW5ndGggPj4gMik7XG5cbiAgdmFyIGRlY2lwaGVyID0gbmV3IEFFUyhBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChrZXkpKTtcblxuICAvLyBieXRlIGFuZCB3b3JkLWxldmVsIGFjY2VzcyBmb3IgdGhlIGRlY3J5cHRlZCBvdXRwdXRcbiAgdmFyIGRlY3J5cHRlZCA9IG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZC5ieXRlTGVuZ3RoKTtcbiAgdmFyIGRlY3J5cHRlZDMyID0gbmV3IEludDMyQXJyYXkoZGVjcnlwdGVkLmJ1ZmZlcik7XG5cbiAgLy8gdGVtcG9yYXJ5IHZhcmlhYmxlcyBmb3Igd29ya2luZyB3aXRoIHRoZSBJViwgZW5jcnlwdGVkLCBhbmRcbiAgLy8gZGVjcnlwdGVkIGRhdGFcbiAgdmFyIGluaXQwID0gdm9pZCAwO1xuICB2YXIgaW5pdDEgPSB2b2lkIDA7XG4gIHZhciBpbml0MiA9IHZvaWQgMDtcbiAgdmFyIGluaXQzID0gdm9pZCAwO1xuICB2YXIgZW5jcnlwdGVkMCA9IHZvaWQgMDtcbiAgdmFyIGVuY3J5cHRlZDEgPSB2b2lkIDA7XG4gIHZhciBlbmNyeXB0ZWQyID0gdm9pZCAwO1xuICB2YXIgZW5jcnlwdGVkMyA9IHZvaWQgMDtcblxuICAvLyBpdGVyYXRpb24gdmFyaWFibGVcbiAgdmFyIHdvcmRJeCA9IHZvaWQgMDtcblxuICAvLyBwdWxsIG91dCB0aGUgd29yZHMgb2YgdGhlIElWIHRvIGVuc3VyZSB3ZSBkb24ndCBtb2RpZnkgdGhlXG4gIC8vIHBhc3NlZC1pbiByZWZlcmVuY2UgYW5kIGVhc2llciBhY2Nlc3NcbiAgaW5pdDAgPSBpbml0VmVjdG9yWzBdO1xuICBpbml0MSA9IGluaXRWZWN0b3JbMV07XG4gIGluaXQyID0gaW5pdFZlY3RvclsyXTtcbiAgaW5pdDMgPSBpbml0VmVjdG9yWzNdO1xuXG4gIC8vIGRlY3J5cHQgZm91ciB3b3JkIHNlcXVlbmNlcywgYXBwbHlpbmcgY2lwaGVyLWJsb2NrIGNoYWluaW5nIChDQkMpXG4gIC8vIHRvIGVhY2ggZGVjcnlwdGVkIGJsb2NrXG4gIGZvciAod29yZEl4ID0gMDsgd29yZEl4IDwgZW5jcnlwdGVkMzIubGVuZ3RoOyB3b3JkSXggKz0gNCkge1xuICAgIC8vIGNvbnZlcnQgYmlnLWVuZGlhbiAobmV0d29yayBvcmRlcikgd29yZHMgaW50byBsaXR0bGUtZW5kaWFuXG4gICAgLy8gKGphdmFzY3JpcHQgb3JkZXIpXG4gICAgZW5jcnlwdGVkMCA9IG50b2goZW5jcnlwdGVkMzJbd29yZEl4XSk7XG4gICAgZW5jcnlwdGVkMSA9IG50b2goZW5jcnlwdGVkMzJbd29yZEl4ICsgMV0pO1xuICAgIGVuY3J5cHRlZDIgPSBudG9oKGVuY3J5cHRlZDMyW3dvcmRJeCArIDJdKTtcbiAgICBlbmNyeXB0ZWQzID0gbnRvaChlbmNyeXB0ZWQzMlt3b3JkSXggKyAzXSk7XG5cbiAgICAvLyBkZWNyeXB0IHRoZSBibG9ja1xuICAgIGRlY2lwaGVyLmRlY3J5cHQoZW5jcnlwdGVkMCwgZW5jcnlwdGVkMSwgZW5jcnlwdGVkMiwgZW5jcnlwdGVkMywgZGVjcnlwdGVkMzIsIHdvcmRJeCk7XG5cbiAgICAvLyBYT1Igd2l0aCB0aGUgSVYsIGFuZCByZXN0b3JlIG5ldHdvcmsgYnl0ZS1vcmRlciB0byBvYnRhaW4gdGhlXG4gICAgLy8gcGxhaW50ZXh0XG4gICAgZGVjcnlwdGVkMzJbd29yZEl4XSA9IG50b2goZGVjcnlwdGVkMzJbd29yZEl4XSBeIGluaXQwKTtcbiAgICBkZWNyeXB0ZWQzMlt3b3JkSXggKyAxXSA9IG50b2goZGVjcnlwdGVkMzJbd29yZEl4ICsgMV0gXiBpbml0MSk7XG4gICAgZGVjcnlwdGVkMzJbd29yZEl4ICsgMl0gPSBudG9oKGRlY3J5cHRlZDMyW3dvcmRJeCArIDJdIF4gaW5pdDIpO1xuICAgIGRlY3J5cHRlZDMyW3dvcmRJeCArIDNdID0gbnRvaChkZWNyeXB0ZWQzMlt3b3JkSXggKyAzXSBeIGluaXQzKTtcblxuICAgIC8vIHNldHVwIHRoZSBJViBmb3IgdGhlIG5leHQgcm91bmRcbiAgICBpbml0MCA9IGVuY3J5cHRlZDA7XG4gICAgaW5pdDEgPSBlbmNyeXB0ZWQxO1xuICAgIGluaXQyID0gZW5jcnlwdGVkMjtcbiAgICBpbml0MyA9IGVuY3J5cHRlZDM7XG4gIH1cblxuICByZXR1cm4gZGVjcnlwdGVkO1xufTtcblxuLyoqXG4gKiBUaGUgYERlY3J5cHRlcmAgY2xhc3MgdGhhdCBtYW5hZ2VzIGRlY3J5cHRpb24gb2YgQUVTXG4gKiBkYXRhIHRocm91Z2ggYEFzeW5jU3RyZWFtYCBvYmplY3RzIGFuZCB0aGUgYGRlY3J5cHRgXG4gKiBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZW5jcnlwdGVkIHRoZSBlbmNyeXB0ZWQgYnl0ZXNcbiAqIEBwYXJhbSB7VWludDMyQXJyYXl9IGtleSB0aGUgYnl0ZXMgb2YgdGhlIGRlY3J5cHRpb24ga2V5XG4gKiBAcGFyYW0ge1VpbnQzMkFycmF5fSBpbml0VmVjdG9yIHRoZSBpbml0aWFsaXphdGlvbiB2ZWN0b3IgKElWKSB0b1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZSB0aGUgZnVuY3Rpb24gdG8gcnVuIHdoZW4gZG9uZVxuICogQGNsYXNzIERlY3J5cHRlclxuICovXG5cbnZhciBEZWNyeXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERlY3J5cHRlcihlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3RvciwgZG9uZSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERlY3J5cHRlcik7XG5cbiAgICB2YXIgc3RlcCA9IERlY3J5cHRlci5TVEVQO1xuICAgIHZhciBlbmNyeXB0ZWQzMiA9IG5ldyBJbnQzMkFycmF5KGVuY3J5cHRlZC5idWZmZXIpO1xuICAgIHZhciBkZWNyeXB0ZWQgPSBuZXcgVWludDhBcnJheShlbmNyeXB0ZWQuYnl0ZUxlbmd0aCk7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgdGhpcy5hc3luY1N0cmVhbV8gPSBuZXcgQXN5bmNTdHJlYW0oKTtcblxuICAgIC8vIHNwbGl0IHVwIHRoZSBlbmNyeXB0aW9uIGpvYiBhbmQgZG8gdGhlIGluZGl2aWR1YWwgY2h1bmtzIGFzeW5jaHJvbm91c2x5XG4gICAgdGhpcy5hc3luY1N0cmVhbV8ucHVzaCh0aGlzLmRlY3J5cHRDaHVua18oZW5jcnlwdGVkMzIuc3ViYXJyYXkoaSwgaSArIHN0ZXApLCBrZXksIGluaXRWZWN0b3IsIGRlY3J5cHRlZCkpO1xuICAgIGZvciAoaSA9IHN0ZXA7IGkgPCBlbmNyeXB0ZWQzMi5sZW5ndGg7IGkgKz0gc3RlcCkge1xuICAgICAgaW5pdFZlY3RvciA9IG5ldyBVaW50MzJBcnJheShbbnRvaChlbmNyeXB0ZWQzMltpIC0gNF0pLCBudG9oKGVuY3J5cHRlZDMyW2kgLSAzXSksIG50b2goZW5jcnlwdGVkMzJbaSAtIDJdKSwgbnRvaChlbmNyeXB0ZWQzMltpIC0gMV0pXSk7XG4gICAgICB0aGlzLmFzeW5jU3RyZWFtXy5wdXNoKHRoaXMuZGVjcnlwdENodW5rXyhlbmNyeXB0ZWQzMi5zdWJhcnJheShpLCBpICsgc3RlcCksIGtleSwgaW5pdFZlY3RvciwgZGVjcnlwdGVkKSk7XG4gICAgfVxuICAgIC8vIGludm9rZSB0aGUgZG9uZSgpIGNhbGxiYWNrIHdoZW4gZXZlcnl0aGluZyBpcyBmaW5pc2hlZFxuICAgIHRoaXMuYXN5bmNTdHJlYW1fLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcmVtb3ZlIHBrY3MjNyBwYWRkaW5nIGZyb20gdGhlIGRlY3J5cHRlZCBieXRlc1xuICAgICAgZG9uZShudWxsLCB1bnBhZChkZWNyeXB0ZWQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhIGdldHRlciBmb3Igc3RlcCB0aGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdG8gcHJvY2VzcyBhdCBvbmUgdGltZVxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSB2YWx1ZSBvZiBzdGVwIDMyMDAwXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBEZWNyeXB0ZXIucHJvdG90eXBlLmRlY3J5cHRDaHVua18gPSBmdW5jdGlvbiBkZWNyeXB0Q2h1bmtfKGVuY3J5cHRlZCwga2V5LCBpbml0VmVjdG9yLCBkZWNyeXB0ZWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJ5dGVzID0gZGVjcnlwdChlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3Rvcik7XG5cbiAgICAgIGRlY3J5cHRlZC5zZXQoYnl0ZXMsIGVuY3J5cHRlZC5ieXRlT2Zmc2V0KTtcbiAgICB9O1xuICB9O1xuXG4gIGNyZWF0ZUNsYXNzKERlY3J5cHRlciwgbnVsbCwgW3tcbiAgICBrZXk6ICdTVEVQJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIC8vIDQgKiA4MDAwO1xuICAgICAgcmV0dXJuIDMyMDAwO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGVjcnlwdGVyO1xufSgpO1xuXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKlxuICogSW5kZXggbW9kdWxlIHRvIGVhc2lseSBpbXBvcnQgdGhlIHByaW1hcnkgY29tcG9uZW50cyBvZiBBRVMtMTI4XG4gKiBkZWNyeXB0aW9uLiBMaWtlIHRoaXM6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCB7RGVjcnlwdGVyLCBkZWNyeXB0LCBBc3luY1N0cmVhbX0gZnJvbSAnYWVzLWRlY3J5cHRlcic7XG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgeyBkZWNyeXB0LCBEZWNyeXB0ZXIsIEFzeW5jU3RyZWFtIH07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBWaWRlby5qcyA3LjYuNiA8aHR0cDovL3ZpZGVvanMuY29tLz5cbiAqIENvcHlyaWdodCBCcmlnaHRjb3ZlLCBJbmMuIDxodHRwczovL3d3dy5icmlnaHRjb3ZlLmNvbS8+XG4gKiBBdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjBcbiAqIDxodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9ibG9iL21hc3Rlci9MSUNFTlNFPlxuICpcbiAqIEluY2x1ZGVzIHZ0dC5qcyA8aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvdnR0LmpzPlxuICogQXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wXG4gKiA8aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvdnR0LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0U+XG4gKi9cblxuaW1wb3J0IHdpbmRvdyQxIGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5pbXBvcnQgc2FmZVBhcnNlVHVwbGUgZnJvbSAnc2FmZS1qc29uLXBhcnNlL3R1cGxlJztcbmltcG9ydCBrZXljb2RlIGZyb20gJ2tleWNvZGUnO1xuaW1wb3J0IFhIUiBmcm9tICd4aHInO1xuaW1wb3J0IHZ0dCBmcm9tICd2aWRlb2pzLXZ0dC5qcyc7XG5pbXBvcnQgVVJMVG9vbGtpdCBmcm9tICd1cmwtdG9vbGtpdCc7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tICdtM3U4LXBhcnNlcic7XG5pbXBvcnQgeyBwYXJzZSwgcGFyc2VVVENUaW1pbmcgfSBmcm9tICdtcGQtcGFyc2VyJztcbmltcG9ydCBtcDRJbnNwZWN0b3IgZnJvbSAnbXV4LmpzL2xpYi90b29scy9tcDQtaW5zcGVjdG9yJztcbmltcG9ydCBtcDRwcm9iZSBmcm9tICdtdXguanMvbGliL21wNC9wcm9iZSc7XG5pbXBvcnQgQ2FwdGlvblBhcnNlciBmcm9tICdtdXguanMvbGliL21wNC9jYXB0aW9uLXBhcnNlcic7XG5pbXBvcnQgdHNJbnNwZWN0b3IgZnJvbSAnbXV4LmpzL2xpYi90b29scy90cy1pbnNwZWN0b3IuanMnO1xuaW1wb3J0IHsgRGVjcnlwdGVyLCBBc3luY1N0cmVhbSwgZGVjcnlwdCB9IGZyb20gJ2Flcy1kZWNyeXB0ZXInO1xuXG52YXIgdmVyc2lvbiA9IFwiNy42LjZcIjtcblxuLyoqXG4gKiBAZmlsZSBjcmVhdGUtbG9nZ2VyLmpzXG4gKiBAbW9kdWxlIGNyZWF0ZS1sb2dnZXJcbiAqL1xuXG52YXIgaGlzdG9yeSA9IFtdO1xuLyoqXG4gKiBMb2cgbWVzc2FnZXMgdG8gdGhlIGNvbnNvbGUgYW5kIGhpc3RvcnkgYmFzZWQgb24gdGhlIHR5cGUgb2YgbWVzc2FnZVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGNvbnNvbGUgbWV0aG9kIHRvIHVzZS5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJnc1xuICogICAgICAgICBUaGUgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byB0aGUgbWF0Y2hpbmcgY29uc29sZSBtZXRob2QuXG4gKi9cblxudmFyIExvZ0J5VHlwZUZhY3RvcnkgPSBmdW5jdGlvbiBMb2dCeVR5cGVGYWN0b3J5KG5hbWUsIGxvZykge1xuICByZXR1cm4gZnVuY3Rpb24gKHR5cGUsIGxldmVsLCBhcmdzKSB7XG4gICAgdmFyIGx2bCA9IGxvZy5sZXZlbHNbbGV2ZWxdO1xuICAgIHZhciBsdmxSZWdFeHAgPSBuZXcgUmVnRXhwKFwiXihcIiArIGx2bCArIFwiKSRcIik7XG5cbiAgICBpZiAodHlwZSAhPT0gJ2xvZycpIHtcbiAgICAgIC8vIEFkZCB0aGUgdHlwZSB0byB0aGUgZnJvbnQgb2YgdGhlIG1lc3NhZ2Ugd2hlbiBpdCdzIG5vdCBcImxvZ1wiLlxuICAgICAgYXJncy51bnNoaWZ0KHR5cGUudG9VcHBlckNhc2UoKSArICc6Jyk7XG4gICAgfSAvLyBBZGQgY29uc29sZSBwcmVmaXggYWZ0ZXIgYWRkaW5nIHRvIGhpc3RvcnkuXG5cblxuICAgIGFyZ3MudW5zaGlmdChuYW1lICsgJzonKTsgLy8gQWRkIGEgY2xvbmUgb2YgdGhlIGFyZ3MgYXQgdGhpcyBwb2ludCB0byBoaXN0b3J5LlxuXG4gICAgaWYgKGhpc3RvcnkpIHtcbiAgICAgIGhpc3RvcnkucHVzaChbXS5jb25jYXQoYXJncykpO1xuICAgIH0gLy8gSWYgdGhlcmUncyBubyBjb25zb2xlIHRoZW4gZG9uJ3QgdHJ5IHRvIG91dHB1dCBtZXNzYWdlcywgYnV0IHRoZXkgd2lsbFxuICAgIC8vIHN0aWxsIGJlIHN0b3JlZCBpbiBoaXN0b3J5LlxuXG5cbiAgICBpZiAoIXdpbmRvdyQxLmNvbnNvbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdhcyBzZXR0aW5nIHRoZXNlIG9uY2Ugb3V0c2lkZSBvZiB0aGlzIGZ1bmN0aW9uLCBidXQgY29udGFpbmluZyB0aGVtXG4gICAgLy8gaW4gdGhlIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc2llciB0byB0ZXN0IGNhc2VzIHdoZXJlIGNvbnNvbGUgZG9lc24ndCBleGlzdFxuICAgIC8vIHdoZW4gdGhlIG1vZHVsZSBpcyBleGVjdXRlZC5cblxuXG4gICAgdmFyIGZuID0gd2luZG93JDEuY29uc29sZVt0eXBlXTtcblxuICAgIGlmICghZm4gJiYgdHlwZSA9PT0gJ2RlYnVnJykge1xuICAgICAgLy8gQ2VydGFpbiBicm93c2VycyBkb24ndCBoYXZlIHN1cHBvcnQgZm9yIGNvbnNvbGUuZGVidWcuIEZvciB0aG9zZSwgd2VcbiAgICAgIC8vIHNob3VsZCBkZWZhdWx0IHRvIHRoZSBjbG9zZXN0IGNvbXBhcmFibGUgbG9nLlxuICAgICAgZm4gPSB3aW5kb3ckMS5jb25zb2xlLmluZm8gfHwgd2luZG93JDEuY29uc29sZS5sb2c7XG4gICAgfSAvLyBCYWlsIG91dCBpZiB0aGVyZSdzIG5vIGNvbnNvbGUgb3IgaWYgdGhpcyB0eXBlIGlzIG5vdCBhbGxvd2VkIGJ5IHRoZVxuICAgIC8vIGN1cnJlbnQgbG9nZ2luZyBsZXZlbC5cblxuXG4gICAgaWYgKCFmbiB8fCAhbHZsIHx8ICFsdmxSZWdFeHAudGVzdCh0eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZuW0FycmF5LmlzQXJyYXkoYXJncykgPyAnYXBwbHknIDogJ2NhbGwnXSh3aW5kb3ckMS5jb25zb2xlLCBhcmdzKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihuYW1lKSB7XG4gIC8vIFRoaXMgaXMgdGhlIHByaXZhdGUgdHJhY2tpbmcgdmFyaWFibGUgZm9yIGxvZ2dpbmcgbGV2ZWwuXG4gIHZhciBsZXZlbCA9ICdpbmZvJzsgLy8gdGhlIGN1cnJpZWQgbG9nQnlUeXBlIGJvdW5kIHRvIHRoZSBzcGVjaWZpYyBsb2cgYW5kIGhpc3RvcnlcblxuICB2YXIgbG9nQnlUeXBlO1xuICAvKipcbiAgICogTG9ncyBwbGFpbiBkZWJ1ZyBtZXNzYWdlcy4gU2ltaWxhciB0byBgY29uc29sZS5sb2dgLlxuICAgKlxuICAgKiBEdWUgdG8gW2xpbWl0YXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vanNkb2MzL2pzZG9jL2lzc3Vlcy85NTUjaXNzdWVjb21tZW50LTMxMzgyOTE0OSlcbiAgICogb2Ygb3VyIEpTRG9jIHRlbXBsYXRlLCB3ZSBjYW5ub3QgcHJvcGVybHkgZG9jdW1lbnQgdGhpcyBhcyBib3RoIGEgZnVuY3Rpb25cbiAgICogYW5kIGEgbmFtZXNwYWNlLCBzbyBpdHMgZnVuY3Rpb24gc2lnbmF0dXJlIGlzIGRvY3VtZW50ZWQgaGVyZS5cbiAgICpcbiAgICogIyMjIyBBcmd1bWVudHNcbiAgICogIyMjIyMgKmFyZ3NcbiAgICogTWl4ZWRbXVxuICAgKlxuICAgKiBBbnkgY29tYmluYXRpb24gb2YgdmFsdWVzIHRoYXQgY291bGQgYmUgcGFzc2VkIHRvIGBjb25zb2xlLmxvZygpYC5cbiAgICpcbiAgICogIyMjIyBSZXR1cm4gVmFsdWVcbiAgICpcbiAgICogYHVuZGVmaW5lZGBcbiAgICpcbiAgICogQG5hbWVzcGFjZVxuICAgKiBAcGFyYW0gICAge01peGVkW119IGFyZ3NcbiAgICogICAgICAgICAgIE9uZSBvciBtb3JlIG1lc3NhZ2VzIG9yIG9iamVjdHMgdGhhdCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cblxuICB2YXIgbG9nID0gZnVuY3Rpb24gbG9nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsb2dCeVR5cGUoJ2xvZycsIGxldmVsLCBhcmdzKTtcbiAgfTsgLy8gVGhpcyBpcyB0aGUgbG9nQnlUeXBlIGhlbHBlciB0aGF0IHRoZSBsb2dnaW5nIG1ldGhvZHMgYmVsb3cgdXNlXG5cblxuICBsb2dCeVR5cGUgPSBMb2dCeVR5cGVGYWN0b3J5KG5hbWUsIGxvZyk7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgc3VibG9nZ2VyIHdoaWNoIGNoYWlucyB0aGUgb2xkIG5hbWUgdG8gdGhlIG5ldyBuYW1lLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgZG9pbmcgYHZpZGVvanMubG9nLmNyZWF0ZUxvZ2dlcigncGxheWVyJylgIGFuZCB0aGVuIHVzaW5nIHRoYXQgbG9nZ2VyIHdpbGwgbG9nIHRoZSBmb2xsb3dpbmc6XG4gICAqIGBgYGpzXG4gICAqICBteWxvZ2dlcignZm9vJyk7XG4gICAqICAvLyA+IFZJREVPSlM6IHBsYXllcjogZm9vXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgdG8gYWRkIGNhbGwgdGhlIG5ldyBsb2dnZXJcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuICBsb2cuY3JlYXRlTG9nZ2VyID0gZnVuY3Rpb24gKHN1Ym5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9nZ2VyKG5hbWUgKyAnOiAnICsgc3VibmFtZSk7XG4gIH07XG4gIC8qKlxuICAgKiBFbnVtZXJhdGlvbiBvZiBhdmFpbGFibGUgbG9nZ2luZyBsZXZlbHMsIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGUgbGV2ZWwgbmFtZXNcbiAgICogYW5kIHRoZSB2YWx1ZXMgYXJlIGB8YC1zZXBhcmF0ZWQgc3RyaW5ncyBjb250YWluaW5nIGxvZ2dpbmcgbWV0aG9kcyBhbGxvd2VkXG4gICAqIGluIHRoYXQgbG9nZ2luZyBsZXZlbC4gVGhlc2Ugc3RyaW5ncyBhcmUgdXNlZCB0byBjcmVhdGUgYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogbWF0Y2hpbmcgdGhlIGZ1bmN0aW9uIG5hbWUgYmVpbmcgY2FsbGVkLlxuICAgKlxuICAgKiBMZXZlbHMgcHJvdmlkZWQgYnkgVmlkZW8uanMgYXJlOlxuICAgKlxuICAgKiAtIGBvZmZgOiBNYXRjaGVzIG5vIGNhbGxzLiBBbnkgdmFsdWUgdGhhdCBjYW4gYmUgY2FzdCB0byBgZmFsc2VgIHdpbGwgaGF2ZVxuICAgKiAgIHRoaXMgZWZmZWN0LiBUaGUgbW9zdCByZXN0cmljdGl2ZS5cbiAgICogLSBgYWxsYDogTWF0Y2hlcyBvbmx5IFZpZGVvLmpzLXByb3ZpZGVkIGZ1bmN0aW9ucyAoYGRlYnVnYCwgYGxvZ2AsXG4gICAqICAgYGxvZy53YXJuYCwgYW5kIGBsb2cuZXJyb3JgKS5cbiAgICogLSBgZGVidWdgOiBNYXRjaGVzIGBsb2cuZGVidWdgLCBgbG9nYCwgYGxvZy53YXJuYCwgYW5kIGBsb2cuZXJyb3JgIGNhbGxzLlxuICAgKiAtIGBpbmZvYCAoZGVmYXVsdCk6IE1hdGNoZXMgYGxvZ2AsIGBsb2cud2FybmAsIGFuZCBgbG9nLmVycm9yYCBjYWxscy5cbiAgICogLSBgd2FybmA6IE1hdGNoZXMgYGxvZy53YXJuYCBhbmQgYGxvZy5lcnJvcmAgY2FsbHMuXG4gICAqIC0gYGVycm9yYDogTWF0Y2hlcyBvbmx5IGBsb2cuZXJyb3JgIGNhbGxzLlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIGxvZy5sZXZlbHMgPSB7XG4gICAgYWxsOiAnZGVidWd8bG9nfHdhcm58ZXJyb3InLFxuICAgIG9mZjogJycsXG4gICAgZGVidWc6ICdkZWJ1Z3xsb2d8d2FybnxlcnJvcicsXG4gICAgaW5mbzogJ2xvZ3x3YXJufGVycm9yJyxcbiAgICB3YXJuOiAnd2FybnxlcnJvcicsXG4gICAgZXJyb3I6ICdlcnJvcicsXG4gICAgREVGQVVMVDogbGV2ZWxcbiAgfTtcbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGN1cnJlbnQgbG9nZ2luZyBsZXZlbC5cbiAgICpcbiAgICogSWYgYSBzdHJpbmcgbWF0Y2hpbmcgYSBrZXkgZnJvbSB7QGxpbmsgbW9kdWxlOmxvZy5sZXZlbHN9IGlzIHByb3ZpZGVkLCBhY3RzXG4gICAqIGFzIGEgc2V0dGVyLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtsdmxdXG4gICAqICAgICAgICAgUGFzcyBhIHZhbGlkIGxldmVsIHRvIHNldCBhIG5ldyBsb2dnaW5nIGxldmVsLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgbG9nZ2luZyBsZXZlbC5cbiAgICovXG5cbiAgbG9nLmxldmVsID0gZnVuY3Rpb24gKGx2bCkge1xuICAgIGlmICh0eXBlb2YgbHZsID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKCFsb2cubGV2ZWxzLmhhc093blByb3BlcnR5KGx2bCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXFxcIlwiICsgbHZsICsgXCJcXFwiIGluIG5vdCBhIHZhbGlkIGxvZyBsZXZlbFwiKTtcbiAgICAgIH1cblxuICAgICAgbGV2ZWwgPSBsdmw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxldmVsO1xuICB9O1xuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGV2ZXJ5dGhpbmcgdGhhdCBoYXMgYmVlbiBsb2dnZWQgdG8gdGhlIGhpc3RvcnkuXG4gICAqXG4gICAqIFRoaXMgYXJyYXkgaXMgYSBzaGFsbG93IGNsb25lIG9mIHRoZSBpbnRlcm5hbCBoaXN0b3J5IHJlY29yZC4gSG93ZXZlciwgaXRzXG4gICAqIGNvbnRlbnRzIGFyZSBfbm90XyBjbG9uZWQ7IHNvLCBtdXRhdGluZyBvYmplY3RzIGluc2lkZSB0aGlzIGFycmF5IHdpbGxcbiAgICogbXV0YXRlIHRoZW0gaW4gaGlzdG9yeS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgbG9nLmhpc3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGhpc3RvcnkgPyBbXS5jb25jYXQoaGlzdG9yeSkgOiBbXTtcbiAgfTtcbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gZmlsdGVyIHRoZSBoaXN0b3J5IGJ5IHRoZSBnaXZlbiBsb2dnZXIgbmFtZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm5hbWVcbiAgICogICAgICAgIFRoZSBuYW1lIHRvIGZpbHRlciBieVxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICogICAgICAgICBUaGUgZmlsdGVyZWQgbGlzdCB0byByZXR1cm5cbiAgICovXG5cblxuICBsb2cuaGlzdG9yeS5maWx0ZXIgPSBmdW5jdGlvbiAoZm5hbWUpIHtcbiAgICByZXR1cm4gKGhpc3RvcnkgfHwgW10pLmZpbHRlcihmdW5jdGlvbiAoaGlzdG9yeUl0ZW0pIHtcbiAgICAgIC8vIGlmIHRoZSBmaXJzdCBpdGVtIGluIGVhY2ggaGlzdG9yeUl0ZW0gaW5jbHVkZXMgYGZuYW1lYCwgdGhlbiBpdCdzIGEgbWF0Y2hcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiLipcIiArIGZuYW1lICsgXCIuKlwiKS50ZXN0KGhpc3RvcnlJdGVtWzBdKTtcbiAgICB9KTtcbiAgfTtcbiAgLyoqXG4gICAqIENsZWFycyB0aGUgaW50ZXJuYWwgaGlzdG9yeSB0cmFja2luZywgYnV0IGRvZXMgbm90IHByZXZlbnQgZnVydGhlciBoaXN0b3J5XG4gICAqIHRyYWNraW5nLlxuICAgKi9cblxuXG4gIGxvZy5oaXN0b3J5LmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChoaXN0b3J5KSB7XG4gICAgICBoaXN0b3J5Lmxlbmd0aCA9IDA7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogRGlzYWJsZSBoaXN0b3J5IHRyYWNraW5nIGlmIGl0IGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICAgKi9cblxuXG4gIGxvZy5oaXN0b3J5LmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGhpc3RvcnkgIT09IG51bGwpIHtcbiAgICAgIGhpc3RvcnkubGVuZ3RoID0gMDtcbiAgICAgIGhpc3RvcnkgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIEVuYWJsZSBoaXN0b3J5IHRyYWNraW5nIGlmIGl0IGlzIGN1cnJlbnRseSBkaXNhYmxlZC5cbiAgICovXG5cblxuICBsb2cuaGlzdG9yeS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGhpc3RvcnkgPT09IG51bGwpIHtcbiAgICAgIGhpc3RvcnkgPSBbXTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBMb2dzIGVycm9yIG1lc3NhZ2VzLiBTaW1pbGFyIHRvIGBjb25zb2xlLmVycm9yYC5cbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZFtdfSBhcmdzXG4gICAqICAgICAgICBPbmUgb3IgbW9yZSBtZXNzYWdlcyBvciBvYmplY3RzIHRoYXQgc2hvdWxkIGJlIGxvZ2dlZCBhcyBhbiBlcnJvclxuICAgKi9cblxuXG4gIGxvZy5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9nQnlUeXBlKCdlcnJvcicsIGxldmVsLCBhcmdzKTtcbiAgfTtcbiAgLyoqXG4gICAqIExvZ3Mgd2FybmluZyBtZXNzYWdlcy4gU2ltaWxhciB0byBgY29uc29sZS53YXJuYC5cbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZFtdfSBhcmdzXG4gICAqICAgICAgICBPbmUgb3IgbW9yZSBtZXNzYWdlcyBvciBvYmplY3RzIHRoYXQgc2hvdWxkIGJlIGxvZ2dlZCBhcyBhIHdhcm5pbmcuXG4gICAqL1xuXG5cbiAgbG9nLndhcm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ0J5VHlwZSgnd2FybicsIGxldmVsLCBhcmdzKTtcbiAgfTtcbiAgLyoqXG4gICAqIExvZ3MgZGVidWcgbWVzc2FnZXMuIFNpbWlsYXIgdG8gYGNvbnNvbGUuZGVidWdgLCBidXQgbWF5IGFsc28gYWN0IGFzIGEgY29tcGFyYWJsZVxuICAgKiBsb2cgaWYgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhdmFpbGFibGVcbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZFtdfSBhcmdzXG4gICAqICAgICAgICBPbmUgb3IgbW9yZSBtZXNzYWdlcyBvciBvYmplY3RzIHRoYXQgc2hvdWxkIGJlIGxvZ2dlZCBhcyBkZWJ1Zy5cbiAgICovXG5cblxuICBsb2cuZGVidWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ0J5VHlwZSgnZGVidWcnLCBsZXZlbCwgYXJncyk7XG4gIH07XG5cbiAgcmV0dXJuIGxvZztcbn1cblxuLyoqXG4gKiBAZmlsZSBsb2cuanNcbiAqIEBtb2R1bGUgbG9nXG4gKi9cbnZhciBsb2cgPSBjcmVhdGVMb2dnZXIoJ1ZJREVPSlMnKTtcbnZhciBjcmVhdGVMb2dnZXIkMSA9IGxvZy5jcmVhdGVMb2dnZXI7XG5cbi8qKlxuICogQGZpbGUgb2JqLmpzXG4gKiBAbW9kdWxlIG9ialxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9iajpFYWNoQ2FsbGJhY2tcbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICogICAgICAgIFRoZSBjdXJyZW50IGtleSBmb3IgdGhlIG9iamVjdCB0aGF0IGlzIGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogICAgICAgIFRoZSBjdXJyZW50IGtleS12YWx1ZSBmb3Igb2JqZWN0IHRoYXQgaXMgYmVpbmcgaXRlcmF0ZWQgb3ZlclxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9iajpSZWR1Y2VDYWxsYmFja1xuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGFjY3VtXG4gKiAgICAgICAgVGhlIHZhbHVlIHRoYXQgaXMgYWNjdW11bGF0aW5nIG92ZXIgdGhlIHJlZHVjZSBsb29wLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gKiAgICAgICAgVGhlIGN1cnJlbnQga2V5IGZvciB0aGUgb2JqZWN0IHRoYXQgaXMgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiAgICAgICAgVGhlIGN1cnJlbnQga2V5LXZhbHVlIGZvciBvYmplY3QgdGhhdCBpcyBiZWluZyBpdGVyYXRlZCBvdmVyXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIFRoZSBuZXcgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4vKipcbiAqIEdldCB0aGUga2V5cyBvZiBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqICAgICAgICBUaGUgT2JqZWN0IHRvIGdldCB0aGUga2V5cyBmcm9tXG4gKlxuICogQHJldHVybiB7c3RyaW5nW119XG4gKiAgICAgICAgIEFuIGFycmF5IG9mIHRoZSBrZXlzIGZyb20gdGhlIG9iamVjdC4gUmV0dXJucyBhbiBlbXB0eSBhcnJheSBpZiB0aGVcbiAqICAgICAgICAgb2JqZWN0IHBhc3NlZCBpbiB3YXMgaW52YWxpZCBvciBoYWQgbm8ga2V5cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBrZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iamVjdCkgPyBPYmplY3Qua2V5cyhvYmplY3QpIDogW107XG59O1xuLyoqXG4gKiBBcnJheS1saWtlIGl0ZXJhdGlvbiBmb3Igb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiAgICAgICAgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXJcbiAqXG4gKiBAcGFyYW0ge29iajpFYWNoQ2FsbGJhY2t9IGZuXG4gKiAgICAgICAgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBmb3IgZWFjaCBrZXkgaW4gdGhlIG9iamVjdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGVhY2gob2JqZWN0LCBmbikge1xuICBrZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGZuKG9iamVjdFtrZXldLCBrZXkpO1xuICB9KTtcbn1cbi8qKlxuICogQXJyYXktbGlrZSByZWR1Y2UgZm9yIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogICAgICAgIFRoZSBPYmplY3QgdGhhdCB5b3Ugd2FudCB0byByZWR1Y2UuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqICAgICAgICAgQSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBpcyBjYWxsZWQgZm9yIGVhY2gga2V5IGluIHRoZSBvYmplY3QuIEl0XG4gKiAgICAgICAgIHJlY2VpdmVzIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBhbmQgdGhlIHBlci1pdGVyYXRpb24gdmFsdWUgYW5kIGtleVxuICogICAgICAgICBhcyBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gW2luaXRpYWwgPSAwXVxuICogICAgICAgIFN0YXJ0aW5nIHZhbHVlXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIFRoZSBmaW5hbCBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuXG5mdW5jdGlvbiByZWR1Y2Uob2JqZWN0LCBmbiwgaW5pdGlhbCkge1xuICBpZiAoaW5pdGlhbCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdGlhbCA9IDA7XG4gIH1cblxuICByZXR1cm4ga2V5cyhvYmplY3QpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIGtleSkge1xuICAgIHJldHVybiBmbihhY2N1bSwgb2JqZWN0W2tleV0sIGtleSk7XG4gIH0sIGluaXRpYWwpO1xufVxuLyoqXG4gKiBPYmplY3QuYXNzaWduLXN0eWxlIG9iamVjdCBzaGFsbG93IG1lcmdlL2V4dGVuZC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldFxuICogQHBhcmFtICB7T2JqZWN0fSAuLi5zb3VyY2VzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc291cmNlcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc291cmNlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoT2JqZWN0LmFzc2lnbikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgW3RhcmdldF0uY29uY2F0KHNvdXJjZXMpKTtcbiAgfVxuXG4gIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlYWNoKHNvdXJjZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBvYmplY3Qgb2YgYW55IGtpbmQgLSBpbmNsdWRpbmcgRE9NIG5vZGVzLFxuICogYXJyYXlzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBldGMuIE5vdCBmdW5jdGlvbnMsIHRob3VnaC5cbiAqXG4gKiBUaGlzIGF2b2lkcyB0aGUgZ290Y2hhIHdoZXJlIHVzaW5nIGB0eXBlb2ZgIG9uIGEgYG51bGxgIHZhbHVlXG4gKiByZXN1bHRzIGluIGAnb2JqZWN0J2AuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGFwcGVhcnMgdG8gYmUgYSBcInBsYWluXCIgb2JqZWN0IC0gdGhhdCBpcywgYVxuICogZGlyZWN0IGluc3RhbmNlIG9mIGBPYmplY3RgLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaXNQbGFpbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuXG4vKipcbiAqIEBmaWxlIGNvbXB1dGVkLXN0eWxlLmpzXG4gKiBAbW9kdWxlIGNvbXB1dGVkLXN0eWxlXG4gKi9cbi8qKlxuICogQSBzYWZlIGdldENvbXB1dGVkU3R5bGUuXG4gKlxuICogVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBpbiBGaXJlZm94LCBpZiB0aGUgcGxheWVyIGlzIGxvYWRlZCBpbiBhbiBpZnJhbWUgd2l0aFxuICogYGRpc3BsYXk6bm9uZWAsIHRoZW4gYGdldENvbXB1dGVkU3R5bGVgIHJldHVybnMgYG51bGxgLCBzbywgd2UgZG8gYVxuICogbnVsbC1jaGVjayB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcGxheWVyIGRvZXNuJ3QgYnJlYWsgaW4gdGhlc2UgY2FzZXMuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gICAge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgICAgVGhlIGVsZW1lbnQgeW91IHdhbnQgdGhlIGNvbXB1dGVkIHN0eWxlIG9mXG4gKlxuICogQHBhcmFtICAgIHtzdHJpbmd9IHByb3BcbiAqICAgICAgICAgICBUaGUgcHJvcGVydHkgbmFtZSB5b3Ugd2FudFxuICpcbiAqIEBzZWUgICAgICBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAqL1xuXG5mdW5jdGlvbiBjb21wdXRlZFN0eWxlKGVsLCBwcm9wKSB7XG4gIGlmICghZWwgfHwgIXByb3ApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodHlwZW9mIHdpbmRvdyQxLmdldENvbXB1dGVkU3R5bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZVZhbHVlID0gd2luZG93JDEuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgcmV0dXJuIGNvbXB1dGVkU3R5bGVWYWx1ZSA/IGNvbXB1dGVkU3R5bGVWYWx1ZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApIHx8IGNvbXB1dGVkU3R5bGVWYWx1ZVtwcm9wXSA6ICcnO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIEBmaWxlIGRvbS5qc1xuICogQG1vZHVsZSBkb21cbiAqL1xuLyoqXG4gKiBEZXRlY3QgaWYgYSB2YWx1ZSBpcyBhIHN0cmluZyB3aXRoIGFueSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogICAgICAgICBUaGUgc3RyaW5nIHRvIGNoZWNrXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2lsbCBiZSBgdHJ1ZWAgaWYgdGhlIHN0cmluZyBpcyBub24tYmxhbmssIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBpc05vbkJsYW5rU3RyaW5nKHN0cikge1xuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgL1xcUy8udGVzdChzdHIpO1xufVxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHBhc3NlZCBzdHJpbmcgaGFzIHdoaXRlc3BhY2UuIFRoaXMgaXMgdXNlZCBieVxuICogY2xhc3MgbWV0aG9kcyB0byBiZSByZWxhdGl2ZWx5IGNvbnNpc3RlbnQgd2l0aCB0aGUgY2xhc3NMaXN0IEFQSS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqICAgICAgICAgVGhlIHN0cmluZyB0byBjaGVjayBmb3Igd2hpdGVzcGFjZS5cbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqICAgICAgICAgVGhyb3dzIGFuIGVycm9yIGlmIHRoZXJlIGlzIHdoaXRlc3BhY2UgaW4gdGhlIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRocm93SWZXaGl0ZXNwYWNlKHN0cikge1xuICBpZiAoL1xccy8udGVzdChzdHIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBoYXMgaWxsZWdhbCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMnKTtcbiAgfVxufVxuLyoqXG4gKiBQcm9kdWNlIGEgcmVndWxhciBleHByZXNzaW9uIGZvciBtYXRjaGluZyBhIGNsYXNzTmFtZSB3aXRoaW4gYW4gZWxlbWVudHMgY2xhc3NOYW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNsYXNzTmFtZVxuICogICAgICAgICBUaGUgY2xhc3NOYW1lIHRvIGdlbmVyYXRlIHRoZSBSZWdFeHAgZm9yLlxuICpcbiAqIEByZXR1cm4ge1JlZ0V4cH1cbiAqICAgICAgICAgVGhlIFJlZ0V4cCB0aGF0IHdpbGwgY2hlY2sgZm9yIGEgc3BlY2lmaWMgYGNsYXNzTmFtZWAgaW4gYW4gZWxlbWVudHNcbiAqICAgICAgICAgY2xhc3NOYW1lLlxuICovXG5cblxuZnVuY3Rpb24gY2xhc3NSZWdFeHAoY2xhc3NOYW1lKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgY2xhc3NOYW1lICsgJygkfFxcXFxzKScpO1xufVxuLyoqXG4gKiBXaGV0aGVyIHRoZSBjdXJyZW50IERPTSBpbnRlcmZhY2UgYXBwZWFycyB0byBiZSByZWFsIChpLmUuIG5vdCBzaW11bGF0ZWQpLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdpbGwgYmUgYHRydWVgIGlmIHRoZSBET00gYXBwZWFycyB0byBiZSByZWFsLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzUmVhbCgpIHtcbiAgLy8gQm90aCBkb2N1bWVudCBhbmQgd2luZG93IHdpbGwgbmV2ZXIgYmUgdW5kZWZpbmVkIHRoYW5rcyB0byBgZ2xvYmFsYC5cbiAgcmV0dXJuIGRvY3VtZW50ID09PSB3aW5kb3ckMS5kb2N1bWVudDtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcywgdmlhIGR1Y2sgdHlwaW5nLCB3aGV0aGVyIG9yIG5vdCBhIHZhbHVlIGlzIGEgRE9NIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtICB7TWl4ZWR9IHZhbHVlXG4gKiAgICAgICAgIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaWxsIGJlIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBET00gZWxlbWVudCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cblxuZnVuY3Rpb24gaXNFbCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBjdXJyZW50IERPTSBpcyBlbWJlZGRlZCBpbiBhbiBpZnJhbWUuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2lsbCBiZSBgdHJ1ZWAgaWYgdGhlIERPTSBpcyBlbWJlZGRlZCBpbiBhbiBpZnJhbWUsIGBmYWxzZWBcbiAqICAgICAgICAgb3RoZXJ3aXNlLlxuICovXG5cbmZ1bmN0aW9uIGlzSW5GcmFtZSgpIHtcbiAgLy8gV2UgbmVlZCBhIHRyeS9jYXRjaCBoZXJlIGJlY2F1c2UgU2FmYXJpIHdpbGwgdGhyb3cgZXJyb3JzIHdoZW4gYXR0ZW1wdGluZ1xuICAvLyB0byBnZXQgZWl0aGVyIGBwYXJlbnRgIG9yIGBzZWxmYFxuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3ckMS5wYXJlbnQgIT09IHdpbmRvdyQxLnNlbGY7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGZ1bmN0aW9ucyB0byBxdWVyeSB0aGUgRE9NIHVzaW5nIGEgZ2l2ZW4gbWV0aG9kLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBtZXRob2RcbiAqICAgICAgICAgIFRoZSBtZXRob2QgdG8gY3JlYXRlIHRoZSBxdWVyeSB3aXRoLlxuICpcbiAqIEByZXR1cm4gIHtGdW5jdGlvbn1cbiAqICAgICAgICAgIFRoZSBxdWVyeSBtZXRob2RcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVRdWVyaWVyKG1ldGhvZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgaWYgKCFpc05vbkJsYW5rU3RyaW5nKHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50W21ldGhvZF0obnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTm9uQmxhbmtTdHJpbmcoY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRleHQpO1xuICAgIH1cblxuICAgIHZhciBjdHggPSBpc0VsKGNvbnRleHQpID8gY29udGV4dCA6IGRvY3VtZW50O1xuICAgIHJldHVybiBjdHhbbWV0aG9kXSAmJiBjdHhbbWV0aG9kXShzZWxlY3Rvcik7XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gZWxlbWVudCBhbmQgYXBwbGllcyBwcm9wZXJ0aWVzLCBhdHRyaWJ1dGVzLCBhbmQgaW5zZXJ0cyBjb250ZW50LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gW3RhZ05hbWU9J2RpdiddXG4gKiAgICAgICAgIE5hbWUgb2YgdGFnIHRvIGJlIGNyZWF0ZWQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBbcHJvcGVydGllcz17fV1cbiAqICAgICAgICAgRWxlbWVudCBwcm9wZXJ0aWVzIHRvIGJlIGFwcGxpZWQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBbYXR0cmlidXRlcz17fV1cbiAqICAgICAgICAgRWxlbWVudCBhdHRyaWJ1dGVzIHRvIGJlIGFwcGxpZWQuXG4gKlxuICogQHBhcmFtIHttb2R1bGU6ZG9tfkNvbnRlbnREZXNjcmlwdG9yfSBjb250ZW50XG4gKiAgICAgICAgQSBjb250ZW50IGRlc2NyaXB0b3Igb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVFbCh0YWdOYW1lLCBwcm9wZXJ0aWVzLCBhdHRyaWJ1dGVzLCBjb250ZW50KSB7XG4gIGlmICh0YWdOYW1lID09PSB2b2lkIDApIHtcbiAgICB0YWdOYW1lID0gJ2Rpdic7XG4gIH1cblxuICBpZiAocHJvcGVydGllcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcGVydGllcyA9IHt9O1xuICB9XG5cbiAgaWYgKGF0dHJpYnV0ZXMgPT09IHZvaWQgMCkge1xuICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgfVxuXG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgdmFyIHZhbCA9IHByb3BlcnRpZXNbcHJvcE5hbWVdOyAvLyBTZWUgIzIxNzZcbiAgICAvLyBXZSBvcmlnaW5hbGx5IHdlcmUgYWNjZXB0aW5nIGJvdGggcHJvcGVydGllcyBhbmQgYXR0cmlidXRlcyBpbiB0aGVcbiAgICAvLyBzYW1lIG9iamVjdCwgYnV0IHRoYXQgZG9lc24ndCB3b3JrIHNvIHdlbGwuXG5cbiAgICBpZiAocHJvcE5hbWUuaW5kZXhPZignYXJpYS0nKSAhPT0gLTEgfHwgcHJvcE5hbWUgPT09ICdyb2xlJyB8fCBwcm9wTmFtZSA9PT0gJ3R5cGUnKSB7XG4gICAgICBsb2cud2FybignU2V0dGluZyBhdHRyaWJ1dGVzIGluIHRoZSBzZWNvbmQgYXJndW1lbnQgb2YgY3JlYXRlRWwoKVxcbicgKyAnaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIHRoZSB0aGlyZCBhcmd1bWVudCBpbnN0ZWFkLlxcbicgKyAoXCJjcmVhdGVFbCh0eXBlLCBwcm9wZXJ0aWVzLCBhdHRyaWJ1dGVzKS4gQXR0ZW1wdGluZyB0byBzZXQgXCIgKyBwcm9wTmFtZSArIFwiIHRvIFwiICsgdmFsICsgXCIuXCIpKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShwcm9wTmFtZSwgdmFsKTsgLy8gSGFuZGxlIHRleHRDb250ZW50IHNpbmNlIGl0J3Mgbm90IHN1cHBvcnRlZCBldmVyeXdoZXJlIGFuZCB3ZSBoYXZlIGFcbiAgICAgIC8vIG1ldGhvZCBmb3IgaXQuXG4gICAgfSBlbHNlIGlmIChwcm9wTmFtZSA9PT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgdGV4dENvbnRlbnQoZWwsIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsW3Byb3BOYW1lXSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyTmFtZSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cmlidXRlc1thdHRyTmFtZV0pO1xuICB9KTtcblxuICBpZiAoY29udGVudCkge1xuICAgIGFwcGVuZENvbnRlbnQoZWwsIGNvbnRlbnQpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufVxuLyoqXG4gKiBJbmplY3RzIHRleHQgaW50byBhbiBlbGVtZW50LCByZXBsYWNpbmcgYW55IGV4aXN0aW5nIGNvbnRlbnRzIGVudGlyZWx5LlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHRvIGFkZCB0ZXh0IGNvbnRlbnQgaW50b1xuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdGV4dFxuICogICAgICAgICBUaGUgdGV4dCBjb250ZW50IHRvIGFkZC5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgZWxlbWVudCB3aXRoIGFkZGVkIHRleHQgY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiB0ZXh0Q29udGVudChlbCwgdGV4dCkge1xuICBpZiAodHlwZW9mIGVsLnRleHRDb250ZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIGVsLmlubmVyVGV4dCA9IHRleHQ7XG4gIH0gZWxzZSB7XG4gICAgZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufVxuLyoqXG4gKiBJbnNlcnQgYW4gZWxlbWVudCBhcyB0aGUgZmlyc3QgY2hpbGQgbm9kZSBvZiBhbm90aGVyXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBjaGlsZFxuICogICAgICAgIEVsZW1lbnQgdG8gaW5zZXJ0XG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnRcbiAqICAgICAgICBFbGVtZW50IHRvIGluc2VydCBjaGlsZCBpbnRvXG4gKi9cblxuZnVuY3Rpb24gcHJlcGVuZFRvKGNoaWxkLCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudC5maXJzdENoaWxkKSB7XG4gICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgcGFyZW50LmZpcnN0Q2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gIH1cbn1cbi8qKlxuICogQ2hlY2sgaWYgYW4gZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lLlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsZW1lbnRcbiAqICAgICAgICAgRWxlbWVudCB0byBjaGVja1xuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gY2xhc3NUb0NoZWNrXG4gKiAgICAgICAgIENsYXNzIG5hbWUgdG8gY2hlY2sgZm9yXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2lsbCBiZSBgdHJ1ZWAgaWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfVxuICogICAgICAgICBUaHJvd3MgYW4gZXJyb3IgaWYgYGNsYXNzVG9DaGVja2AgaGFzIHdoaXRlIHNwYWNlLlxuICovXG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzVG9DaGVjaykge1xuICB0aHJvd0lmV2hpdGVzcGFjZShjbGFzc1RvQ2hlY2spO1xuXG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc1RvQ2hlY2spO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzUmVnRXhwKGNsYXNzVG9DaGVjaykudGVzdChlbGVtZW50LmNsYXNzTmFtZSk7XG59XG4vKipcbiAqIEFkZCBhIGNsYXNzIG5hbWUgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbGVtZW50XG4gKiAgICAgICAgIEVsZW1lbnQgdG8gYWRkIGNsYXNzIG5hbWUgdG8uXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBjbGFzc1RvQWRkXG4gKiAgICAgICAgIENsYXNzIG5hbWUgdG8gYWRkLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKiAgICAgICAgIFRoZSBET00gZWxlbWVudCB3aXRoIHRoZSBhZGRlZCBjbGFzcyBuYW1lLlxuICovXG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzVG9BZGQpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzVG9BZGQpOyAvLyBEb24ndCBuZWVkIHRvIGB0aHJvd0lmV2hpdGVzcGFjZWAgaGVyZSBiZWNhdXNlIGBoYXNFbENsYXNzYCB3aWxsIGRvIGl0XG4gICAgLy8gaW4gdGhlIGNhc2Ugb2YgY2xhc3NMaXN0IG5vdCBiZWluZyBzdXBwb3J0ZWQuXG4gIH0gZWxzZSBpZiAoIWhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzVG9BZGQpKSB7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSAoZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc1RvQWRkKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbi8qKlxuICogUmVtb3ZlIGEgY2xhc3MgbmFtZSBmcm9tIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gZWxlbWVudFxuICogICAgICAgICBFbGVtZW50IHRvIHJlbW92ZSBhIGNsYXNzIG5hbWUgZnJvbS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNsYXNzVG9SZW1vdmVcbiAqICAgICAgICAgQ2xhc3MgbmFtZSB0byByZW1vdmVcbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgRE9NIGVsZW1lbnQgd2l0aCBjbGFzcyBuYW1lIHJlbW92ZWQuXG4gKi9cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NUb1JlbW92ZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NUb1JlbW92ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3dJZldoaXRlc3BhY2UoY2xhc3NUb1JlbW92ZSk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMgIT09IGNsYXNzVG9SZW1vdmU7XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG4vKipcbiAqIFRoZSBjYWxsYmFjayBkZWZpbml0aW9uIGZvciB0b2dnbGVDbGFzcy5cbiAqXG4gKiBAY2FsbGJhY2sgbW9kdWxlOmRvbX5QcmVkaWNhdGVDYWxsYmFja1xuICogQHBhcmFtICAgIHtFbGVtZW50fSBlbGVtZW50XG4gKiAgICAgICAgICAgVGhlIERPTSBlbGVtZW50IG9mIHRoZSBDb21wb25lbnQuXG4gKlxuICogQHBhcmFtICAgIHtzdHJpbmd9IGNsYXNzVG9Ub2dnbGVcbiAqICAgICAgICAgICBUaGUgYGNsYXNzTmFtZWAgdGhhdCB3YW50cyB0byBiZSB0b2dnbGVkXG4gKlxuICogQHJldHVybiAgIHtib29sZWFufHVuZGVmaW5lZH1cbiAqICAgICAgICAgICBJZiBgdHJ1ZWAgaXMgcmV0dXJuZWQsIHRoZSBgY2xhc3NUb1RvZ2dsZWAgd2lsbCBiZSBhZGRlZCB0byB0aGVcbiAqICAgICAgICAgICBgZWxlbWVudGAuIElmIGBmYWxzZWAsIHRoZSBgY2xhc3NUb1RvZ2dsZWAgd2lsbCBiZSByZW1vdmVkIGZyb21cbiAqICAgICAgICAgICB0aGUgYGVsZW1lbnRgLiBJZiBgdW5kZWZpbmVkYCwgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaWdub3JlZC5cbiAqL1xuXG4vKipcbiAqIEFkZHMgb3IgcmVtb3ZlcyBhIGNsYXNzIG5hbWUgdG8vZnJvbSBhbiBlbGVtZW50IGRlcGVuZGluZyBvbiBhbiBvcHRpb25hbFxuICogY29uZGl0aW9uIG9yIHRoZSBwcmVzZW5jZS9hYnNlbmNlIG9mIHRoZSBjbGFzcyBuYW1lLlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsZW1lbnRcbiAqICAgICAgICAgVGhlIGVsZW1lbnQgdG8gdG9nZ2xlIGEgY2xhc3MgbmFtZSBvbi5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNsYXNzVG9Ub2dnbGVcbiAqICAgICAgICAgVGhlIGNsYXNzIHRoYXQgc2hvdWxkIGJlIHRvZ2dsZWQuXG4gKlxuICogQHBhcmFtICB7Ym9vbGVhbnxtb2R1bGU6ZG9tflByZWRpY2F0ZUNhbGxiYWNrfSBbcHJlZGljYXRlXVxuICogICAgICAgICBTZWUgdGhlIHJldHVybiB2YWx1ZSBmb3Ige0BsaW5rIG1vZHVsZTpkb21+UHJlZGljYXRlQ2FsbGJhY2t9XG4gKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqICAgICAgICAgVGhlIGVsZW1lbnQgd2l0aCBhIGNsYXNzIHRoYXQgaGFzIGJlZW4gdG9nZ2xlZC5cbiAqL1xuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtZW50LCBjbGFzc1RvVG9nZ2xlLCBwcmVkaWNhdGUpIHtcbiAgLy8gVGhpcyBDQU5OT1QgdXNlIGBjbGFzc0xpc3RgIGludGVybmFsbHkgYmVjYXVzZSBJRTExIGRvZXMgbm90IHN1cHBvcnQgdGhlXG4gIC8vIHNlY29uZCBwYXJhbWV0ZXIgdG8gdGhlIGBjbGFzc0xpc3QudG9nZ2xlKClgIG1ldGhvZCEgV2hpY2ggaXMgZmluZSBiZWNhdXNlXG4gIC8vIGBjbGFzc0xpc3RgIHdpbGwgYmUgdXNlZCBieSB0aGUgYWRkL3JlbW92ZSBmdW5jdGlvbnMuXG4gIHZhciBoYXMgPSBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc1RvVG9nZ2xlKTtcblxuICBpZiAodHlwZW9mIHByZWRpY2F0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZShlbGVtZW50LCBjbGFzc1RvVG9nZ2xlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnYm9vbGVhbicpIHtcbiAgICBwcmVkaWNhdGUgPSAhaGFzO1xuICB9IC8vIElmIHRoZSBuZWNlc3NhcnkgY2xhc3Mgb3BlcmF0aW9uIG1hdGNoZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlXG4gIC8vIGVsZW1lbnQsIG5vIGFjdGlvbiBpcyByZXF1aXJlZC5cblxuXG4gIGlmIChwcmVkaWNhdGUgPT09IGhhcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwcmVkaWNhdGUpIHtcbiAgICBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc1RvVG9nZ2xlKTtcbiAgfSBlbHNlIHtcbiAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc1RvVG9nZ2xlKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuLyoqXG4gKiBBcHBseSBhdHRyaWJ1dGVzIHRvIGFuIEhUTUwgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgRWxlbWVudCB0byBhZGQgYXR0cmlidXRlcyB0by5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gKiAgICAgICAgQXR0cmlidXRlcyB0byBiZSBhcHBsaWVkLlxuICovXG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWwsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0ck5hbWUpIHtcbiAgICB2YXIgYXR0clZhbHVlID0gYXR0cmlidXRlc1thdHRyTmFtZV07XG5cbiAgICBpZiAoYXR0clZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBhdHRyVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IGF0dHJWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlID09PSB0cnVlID8gJycgOiBhdHRyVmFsdWUpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEdldCBhbiBlbGVtZW50J3MgYXR0cmlidXRlIHZhbHVlcywgYXMgZGVmaW5lZCBvbiB0aGUgSFRNTCB0YWcuXG4gKlxuICogQXR0cmlidXRlcyBhcmUgbm90IHRoZSBzYW1lIGFzIHByb3BlcnRpZXMuIFRoZXkncmUgZGVmaW5lZCBvbiB0aGUgdGFnXG4gKiBvciB3aXRoIHNldEF0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSB0YWdcbiAqICAgICAgICAgRWxlbWVudCBmcm9tIHdoaWNoIHRvIGdldCB0YWcgYXR0cmlidXRlcy5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgIEFsbCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50LiBCb29sZWFuIGF0dHJpYnV0ZXMgd2lsbCBiZSBgdHJ1ZWAgb3JcbiAqICAgICAgICAgYGZhbHNlYCwgb3RoZXJzIHdpbGwgYmUgc3RyaW5ncy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVzKHRhZykge1xuICB2YXIgb2JqID0ge307IC8vIGtub3duIGJvb2xlYW4gYXR0cmlidXRlc1xuICAvLyB3ZSBjYW4gY2hlY2sgZm9yIG1hdGNoaW5nIGJvb2xlYW4gcHJvcGVydGllcywgYnV0IG5vdCBhbGwgYnJvd3NlcnNcbiAgLy8gYW5kIG5vdCBhbGwgdGFncyBrbm93IGFib3V0IHRoZXNlIGF0dHJpYnV0ZXMsIHNvLCB3ZSBzdGlsbCB3YW50IHRvIGNoZWNrIHRoZW0gbWFudWFsbHlcblxuICB2YXIga25vd25Cb29sZWFucyA9ICcsJyArICdhdXRvcGxheSxjb250cm9scyxwbGF5c2lubGluZSxsb29wLG11dGVkLGRlZmF1bHQsZGVmYXVsdE11dGVkJyArICcsJztcblxuICBpZiAodGFnICYmIHRhZy5hdHRyaWJ1dGVzICYmIHRhZy5hdHRyaWJ1dGVzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgYXR0cnMgPSB0YWcuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGkgPSBhdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGF0dHJOYW1lID0gYXR0cnNbaV0ubmFtZTtcbiAgICAgIHZhciBhdHRyVmFsID0gYXR0cnNbaV0udmFsdWU7IC8vIGNoZWNrIGZvciBrbm93biBib29sZWFuc1xuICAgICAgLy8gdGhlIG1hdGNoaW5nIGVsZW1lbnQgcHJvcGVydHkgd2lsbCByZXR1cm4gYSB2YWx1ZSBmb3IgdHlwZW9mXG5cbiAgICAgIGlmICh0eXBlb2YgdGFnW2F0dHJOYW1lXSA9PT0gJ2Jvb2xlYW4nIHx8IGtub3duQm9vbGVhbnMuaW5kZXhPZignLCcgKyBhdHRyTmFtZSArICcsJykgIT09IC0xKSB7XG4gICAgICAgIC8vIHRoZSB2YWx1ZSBvZiBhbiBpbmNsdWRlZCBib29sZWFuIGF0dHJpYnV0ZSBpcyB0eXBpY2FsbHkgYW4gZW1wdHlcbiAgICAgICAgLy8gc3RyaW5nICgnJykgd2hpY2ggd291bGQgZXF1YWwgZmFsc2UgaWYgd2UganVzdCBjaGVjayBmb3IgYSBmYWxzZSB2YWx1ZS5cbiAgICAgICAgLy8gd2UgYWxzbyBkb24ndCB3YW50IHN1cHBvcnQgYmFkIGNvZGUgbGlrZSBhdXRvcGxheT0nZmFsc2UnXG4gICAgICAgIGF0dHJWYWwgPSBhdHRyVmFsICE9PSBudWxsID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBvYmpbYXR0ck5hbWVdID0gYXR0clZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGFuIGVsZW1lbnQncyBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIEEgRE9NIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICogICAgICAgIEF0dHJpYnV0ZSB0byBnZXQgdGhlIHZhbHVlIG9mLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGVsLCBhdHRyaWJ1dGUpIHtcbiAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xufVxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGFuIGVsZW1lbnQncyBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIEEgRE9NIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICogICAgICAgIEF0dHJpYnV0ZSB0byBzZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgICAgICAgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uXG4gKi9cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKGVsLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIGVsLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cbi8qKlxuICogUmVtb3ZlIGFuIGVsZW1lbnQncyBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIEEgRE9NIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICogICAgICAgIEF0dHJpYnV0ZSB0byByZW1vdmUuXG4gKi9cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGVsLCBhdHRyaWJ1dGUpIHtcbiAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG59XG4vKipcbiAqIEF0dGVtcHQgdG8gYmxvY2sgdGhlIGFiaWxpdHkgdG8gc2VsZWN0IHRleHQuXG4gKi9cblxuZnVuY3Rpb24gYmxvY2tUZXh0U2VsZWN0aW9uKCkge1xuICBkb2N1bWVudC5ib2R5LmZvY3VzKCk7XG5cbiAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG4vKipcbiAqIFR1cm4gb2ZmIHRleHQgc2VsZWN0aW9uIGJsb2NraW5nLlxuICovXG5cbmZ1bmN0aW9uIHVuYmxvY2tUZXh0U2VsZWN0aW9uKCkge1xuICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuLyoqXG4gKiBJZGVudGljYWwgdG8gdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBmdW5jdGlvbiwgYnV0IGVuc3VyZXMgdGhhdFxuICogdGhlIG1ldGhvZCBpcyBzdXBwb3J0ZWQgYXQgYWxsIChpdCBpcyBpbiBhbGwgYnJvd3NlcnMgd2UgY2xhaW0gdG8gc3VwcG9ydClcbiAqIGFuZCB0aGF0IHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYmVmb3JlIGNvbnRpbnVpbmcuXG4gKlxuICogVGhpcyB3cmFwcGVyIGZ1bmN0aW9uIGFsc28gc2hpbXMgcHJvcGVydGllcyB3aGljaCBhcmUgbm90IHByb3ZpZGVkIGJ5IHNvbWVcbiAqIG9sZGVyIGJyb3dzZXJzIChuYW1lbHksIElFOCkuXG4gKlxuICogQWRkaXRpb25hbGx5LCBzb21lIGJyb3dzZXJzIGRvIG5vdCBzdXBwb3J0IGFkZGluZyBwcm9wZXJ0aWVzIHRvIGFcbiAqIGBDbGllbnRSZWN0YC9gRE9NUmVjdGAgb2JqZWN0OyBzbywgd2Ugc2hhbGxvdy1jb3B5IGl0IHdpdGggdGhlIHN0YW5kYXJkXG4gKiBwcm9wZXJ0aWVzIChleGNlcHQgYHhgIGFuZCBgeWAgd2hpY2ggYXJlIG5vdCB3aWRlbHkgc3VwcG9ydGVkKS4gVGhpcyBoZWxwc1xuICogYXZvaWQgaW1wbGVtZW50YXRpb25zIHdoZXJlIGtleXMgYXJlIG5vbi1lbnVtZXJhYmxlLlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgIEVsZW1lbnQgd2hvc2UgYENsaWVudFJlY3RgIHdlIHdhbnQgdG8gY2FsY3VsYXRlLlxuICpcbiAqIEByZXR1cm4ge09iamVjdHx1bmRlZmluZWR9XG4gKiAgICAgICAgIEFsd2F5cyByZXR1cm5zIGEgcGxhaW4gb2JqZWN0IC0gb3IgYHVuZGVmaW5lZGAgaWYgaXQgY2Fubm90LlxuICovXG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbCkge1xuICBpZiAoZWwgJiYgZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBbJ2JvdHRvbScsICdoZWlnaHQnLCAnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnd2lkdGgnXS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBpZiAocmVjdFtrXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlY3Rba107XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3VsdC5oZWlnaHQpIHtcbiAgICAgIHJlc3VsdC5oZWlnaHQgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUoZWwsICdoZWlnaHQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXN1bHQud2lkdGgpIHtcbiAgICAgIHJlc3VsdC53aWR0aCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZShlbCwgJ3dpZHRoJykpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgcG9zaXRpb24gb2YgYSBET00gZWxlbWVudCBvbiB0aGUgcGFnZS5cbiAqXG4gKiBAdHlwZWRlZiAge09iamVjdH0gbW9kdWxlOmRvbX5Qb3NpdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZWZ0XG4gKiAgICAgICAgICAgUGl4ZWxzIHRvIHRoZSBsZWZ0LlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3BcbiAqICAgICAgICAgICBQaXhlbHMgZnJvbSB0aGUgdG9wLlxuICovXG5cbi8qKlxuICogR2V0IHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gKlxuICogVXNlcyBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCB0ZWNobmlxdWUgZnJvbSBKb2huIFJlc2lnLlxuICpcbiAqIEBzZWUgaHR0cDovL2Vqb2huLm9yZy9ibG9nL2dldGJvdW5kaW5nY2xpZW50cmVjdC1pcy1hd2Vzb21lL1xuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgIEVsZW1lbnQgZnJvbSB3aGljaCB0byBnZXQgb2Zmc2V0LlxuICpcbiAqIEByZXR1cm4ge21vZHVsZTpkb21+UG9zaXRpb259XG4gKiAgICAgICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCB0aGF0IHdhcyBwYXNzZWQgaW4uXG4gKi9cblxuZnVuY3Rpb24gZmluZFBvc2l0aW9uKGVsKSB7XG4gIHZhciBib3g7XG5cbiAgaWYgKGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBpZiAoIWJveCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTtcbiAgfVxuXG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgY2xpZW50TGVmdCA9IGRvY0VsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luZG93JDEucGFnZVhPZmZzZXQgfHwgYm9keS5zY3JvbGxMZWZ0O1xuICB2YXIgbGVmdCA9IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnQ7XG4gIHZhciBjbGllbnRUb3AgPSBkb2NFbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbmRvdyQxLnBhZ2VZT2Zmc2V0IHx8IGJvZHkuc2Nyb2xsVG9wO1xuICB2YXIgdG9wID0gYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcDsgLy8gQW5kcm9pZCBzb21ldGltZXMgcmV0dXJucyBzbGlnaHRseSBvZmYgZGVjaW1hbCB2YWx1ZXMsIHNvIG5lZWQgdG8gcm91bmRcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IE1hdGgucm91bmQobGVmdCksXG4gICAgdG9wOiBNYXRoLnJvdW5kKHRvcClcbiAgfTtcbn1cbi8qKlxuICogUmVwcmVzZW50cyB4IGFuZCB5IGNvb3JkaW5hdGVzIGZvciBhIERPTSBlbGVtZW50IG9yIG1vdXNlIHBvaW50ZXIuXG4gKlxuICogQHR5cGVkZWYgIHtPYmplY3R9IG1vZHVsZTpkb21+Q29vcmRpbmF0ZXNcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0geFxuICogICAgICAgICAgIHggY29vcmRpbmF0ZSBpbiBwaXhlbHNcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0geVxuICogICAgICAgICAgIHkgY29vcmRpbmF0ZSBpbiBwaXhlbHNcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcG9pbnRlciBwb3NpdGlvbiB3aXRoaW4gYW4gZWxlbWVudC5cbiAqXG4gKiBUaGUgYmFzZSBvbiB0aGUgY29vcmRpbmF0ZXMgYXJlIHRoZSBib3R0b20gbGVmdCBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICBFbGVtZW50IG9uIHdoaWNoIHRvIGdldCB0aGUgcG9pbnRlciBwb3NpdGlvbiBvbi5cbiAqXG4gKiBAcGFyYW0gIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAqICAgICAgICAgRXZlbnQgb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge21vZHVsZTpkb21+Q29vcmRpbmF0ZXN9XG4gKiAgICAgICAgIEEgY29vcmRpbmF0ZXMgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1vdXNlIHBvc2l0aW9uLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZWwsIGV2ZW50KSB7XG4gIHZhciBwb3NpdGlvbiA9IHt9O1xuICB2YXIgYm94ID0gZmluZFBvc2l0aW9uKGVsKTtcbiAgdmFyIGJveFcgPSBlbC5vZmZzZXRXaWR0aDtcbiAgdmFyIGJveEggPSBlbC5vZmZzZXRIZWlnaHQ7XG4gIHZhciBib3hZID0gYm94LnRvcDtcbiAgdmFyIGJveFggPSBib3gubGVmdDtcbiAgdmFyIHBhZ2VZID0gZXZlbnQucGFnZVk7XG4gIHZhciBwYWdlWCA9IGV2ZW50LnBhZ2VYO1xuXG4gIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgIHBhZ2VYID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgcGFnZVkgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcbiAgfVxuXG4gIHBvc2l0aW9uLnkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAoYm94WSAtIHBhZ2VZICsgYm94SCkgLyBib3hIKSk7XG4gIHBvc2l0aW9uLnggPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAocGFnZVggLSBib3hYKSAvIGJveFcpKTtcbiAgcmV0dXJuIHBvc2l0aW9uO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzLCB2aWEgZHVjayB0eXBpbmcsIHdoZXRoZXIgb3Igbm90IGEgdmFsdWUgaXMgYSB0ZXh0IG5vZGUuXG4gKlxuICogQHBhcmFtICB7TWl4ZWR9IHZhbHVlXG4gKiAgICAgICAgIENoZWNrIGlmIHRoaXMgdmFsdWUgaXMgYSB0ZXh0IG5vZGUuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2lsbCBiZSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgdGV4dCBub2RlLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuXG5mdW5jdGlvbiBpc1RleHROb2RlKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDM7XG59XG4vKipcbiAqIEVtcHRpZXMgdGhlIGNvbnRlbnRzIG9mIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gZWxcbiAqICAgICAgICAgVGhlIGVsZW1lbnQgdG8gZW1wdHkgY2hpbGRyZW4gZnJvbVxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHdpdGggbm8gY2hpbGRyZW5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eUVsKGVsKSB7XG4gIHdoaWxlIChlbC5maXJzdENoaWxkKSB7XG4gICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gIH1cblxuICByZXR1cm4gZWw7XG59XG4vKipcbiAqIFRoaXMgaXMgYSBtaXhlZCB2YWx1ZSB0aGF0IGRlc2NyaWJlcyBjb250ZW50IHRvIGJlIGluamVjdGVkIGludG8gdGhlIERPTVxuICogdmlhIHNvbWUgbWV0aG9kLiBJdCBjYW4gYmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlczpcbiAqXG4gKiBUeXBlICAgICAgIHwgRGVzY3JpcHRpb25cbiAqIC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS1cbiAqIGBzdHJpbmdgICAgfCBUaGUgdmFsdWUgd2lsbCBiZSBub3JtYWxpemVkIGludG8gYSB0ZXh0IG5vZGUuXG4gKiBgRWxlbWVudGAgIHwgVGhlIHZhbHVlIHdpbGwgYmUgYWNjZXB0ZWQgYXMtaXMuXG4gKiBgVGV4dE5vZGVgIHwgVGhlIHZhbHVlIHdpbGwgYmUgYWNjZXB0ZWQgYXMtaXMuXG4gKiBgQXJyYXlgICAgIHwgQSBvbmUtZGltZW5zaW9uYWwgYXJyYXkgb2Ygc3RyaW5ncywgZWxlbWVudHMsIHRleHQgbm9kZXMsIG9yIGZ1bmN0aW9ucy4gVGhlc2UgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYSBzdHJpbmcsIGVsZW1lbnQsIG9yIHRleHQgbm9kZSAoYW55IG90aGVyIHJldHVybiB2YWx1ZSwgbGlrZSBhbiBhcnJheSwgd2lsbCBiZSBpZ25vcmVkKS5cbiAqIGBGdW5jdGlvbmAgfCBBIGZ1bmN0aW9uLCB3aGljaCBpcyBleHBlY3RlZCB0byByZXR1cm4gYSBzdHJpbmcsIGVsZW1lbnQsIHRleHQgbm9kZSwgb3IgYXJyYXkgLSBhbnkgb2YgdGhlIG90aGVyIHBvc3NpYmxlIHZhbHVlcyBkZXNjcmliZWQgYWJvdmUuIFRoaXMgbWVhbnMgdGhhdCBhIGNvbnRlbnQgZGVzY3JpcHRvciBjb3VsZCBiZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhcnJheSBvZiBmdW5jdGlvbnMsIGJ1dCB0aG9zZSBzZWNvbmQtbGV2ZWwgZnVuY3Rpb25zIG11c3QgcmV0dXJuIHN0cmluZ3MsIGVsZW1lbnRzLCBvciB0ZXh0IG5vZGVzLlxuICpcbiAqIEB0eXBlZGVmIHtzdHJpbmd8RWxlbWVudHxUZXh0Tm9kZXxBcnJheXxGdW5jdGlvbn0gbW9kdWxlOmRvbX5Db250ZW50RGVzY3JpcHRvclxuICovXG5cbi8qKlxuICogTm9ybWFsaXplcyBjb250ZW50IGZvciBldmVudHVhbCBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICpcbiAqIFRoaXMgYWxsb3dzIGEgd2lkZSByYW5nZSBvZiBjb250ZW50IGRlZmluaXRpb24gbWV0aG9kcywgYnV0IGhlbHBzIHByb3RlY3RcbiAqIGZyb20gZmFsbGluZyBpbnRvIHRoZSB0cmFwIG9mIHNpbXBseSB3cml0aW5nIHRvIGBpbm5lckhUTUxgLCB3aGljaCBjb3VsZFxuICogYmUgYW4gWFNTIGNvbmNlcm4uXG4gKlxuICogVGhlIGNvbnRlbnQgZm9yIGFuIGVsZW1lbnQgY2FuIGJlIHBhc3NlZCBpbiBtdWx0aXBsZSB0eXBlcyBhbmRcbiAqIGNvbWJpbmF0aW9ucywgd2hvc2UgYmVoYXZpb3IgaXMgYXMgZm9sbG93czpcbiAqXG4gKiBAcGFyYW0ge21vZHVsZTpkb21+Q29udGVudERlc2NyaXB0b3J9IGNvbnRlbnRcbiAqICAgICAgICBBIGNvbnRlbnQgZGVzY3JpcHRvciB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqICAgICAgICAgQWxsIG9mIHRoZSBjb250ZW50IHRoYXQgd2FzIHBhc3NlZCBpbiwgbm9ybWFsaXplZCB0byBhbiBhcnJheSBvZlxuICogICAgICAgICBlbGVtZW50cyBvciB0ZXh0IG5vZGVzLlxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCkge1xuICAvLyBGaXJzdCwgaW52b2tlIGNvbnRlbnQgaWYgaXQgaXMgYSBmdW5jdGlvbi4gSWYgaXQgcHJvZHVjZXMgYW4gYXJyYXksXG4gIC8vIHRoYXQgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSBub3JtYWxpemF0aW9uLlxuICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb250ZW50ID0gY29udGVudCgpO1xuICB9IC8vIE5leHQgdXAsIG5vcm1hbGl6ZSB0byBhbiBhcnJheSwgc28gb25lIG9yIG1hbnkgaXRlbXMgY2FuIGJlIG5vcm1hbGl6ZWQsXG4gIC8vIGZpbHRlcmVkLCBhbmQgcmV0dXJuZWQuXG5cblxuICByZXR1cm4gKEFycmF5LmlzQXJyYXkoY29udGVudCkgPyBjb250ZW50IDogW2NvbnRlbnRdKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gRmlyc3QsIGludm9rZSB2YWx1ZSBpZiBpdCBpcyBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgYSBuZXcgdmFsdWUsXG4gICAgLy8gd2hpY2ggd2lsbCBiZSBzdWJzZXF1ZW50bHkgbm9ybWFsaXplZCB0byBhIE5vZGUgb2Ygc29tZSBraW5kLlxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUoKTtcbiAgICB9XG5cbiAgICBpZiAoaXNFbCh2YWx1ZSkgfHwgaXNUZXh0Tm9kZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXFxTLy50ZXN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKTtcbiAgICB9XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xufVxuLyoqXG4gKiBOb3JtYWxpemVzIGFuZCBhcHBlbmRzIGNvbnRlbnQgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICBFbGVtZW50IHRvIGFwcGVuZCBub3JtYWxpemVkIGNvbnRlbnQgdG8uXG4gKlxuICogQHBhcmFtIHttb2R1bGU6ZG9tfkNvbnRlbnREZXNjcmlwdG9yfSBjb250ZW50XG4gKiAgICAgICAgQSBjb250ZW50IGRlc2NyaXB0b3IgdmFsdWUuXG4gKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqICAgICAgICAgVGhlIGVsZW1lbnQgd2l0aCBhcHBlbmRlZCBub3JtYWxpemVkIGNvbnRlbnQuXG4gKi9cblxuZnVuY3Rpb24gYXBwZW5kQ29udGVudChlbCwgY29udGVudCkge1xuICBub3JtYWxpemVDb250ZW50KGNvbnRlbnQpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gZWwuYXBwZW5kQ2hpbGQobm9kZSk7XG4gIH0pO1xuICByZXR1cm4gZWw7XG59XG4vKipcbiAqIE5vcm1hbGl6ZXMgYW5kIGluc2VydHMgY29udGVudCBpbnRvIGFuIGVsZW1lbnQ7IHRoaXMgaXMgaWRlbnRpY2FsIHRvXG4gKiBgYXBwZW5kQ29udGVudCgpYCwgZXhjZXB0IGl0IGVtcHRpZXMgdGhlIGVsZW1lbnQgZmlyc3QuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIEVsZW1lbnQgdG8gaW5zZXJ0IG5vcm1hbGl6ZWQgY29udGVudCBpbnRvLlxuICpcbiAqIEBwYXJhbSB7bW9kdWxlOmRvbX5Db250ZW50RGVzY3JpcHRvcn0gY29udGVudFxuICogICAgICAgIEEgY29udGVudCBkZXNjcmlwdG9yIHZhbHVlLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHdpdGggaW5zZXJ0ZWQgbm9ybWFsaXplZCBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIGluc2VydENvbnRlbnQoZWwsIGNvbnRlbnQpIHtcbiAgcmV0dXJuIGFwcGVuZENvbnRlbnQoZW1wdHlFbChlbCksIGNvbnRlbnQpO1xufVxuLyoqXG4gKiBDaGVjayBpZiBhbiBldmVudCB3YXMgYSBzaW5nbGUgbGVmdCBjbGljay5cbiAqXG4gKiBAcGFyYW0gIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAqICAgICAgICAgRXZlbnQgb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdpbGwgYmUgYHRydWVgIGlmIGEgc2luZ2xlIGxlZnQgY2xpY2ssIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5cbmZ1bmN0aW9uIGlzU2luZ2xlTGVmdENsaWNrKGV2ZW50KSB7XG4gIC8vIE5vdGU6IGlmIHlvdSBjcmVhdGUgc29tZXRoaW5nIGRyYWdnYWJsZSwgYmUgc3VyZSB0b1xuICAvLyBjYWxsIGl0IG9uIGJvdGggYG1vdXNlZG93bmAgYW5kIGBtb3VzZW1vdmVgIGV2ZW50LFxuICAvLyBvdGhlcndpc2UgYG1vdXNlZG93bmAgc2hvdWxkIGJlIGVub3VnaCBmb3IgYSBidXR0b25cbiAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gdW5kZWZpbmVkICYmIGV2ZW50LmJ1dHRvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFdoeSBkbyB3ZSBuZWVkIGBidXR0b25zYCA/XG4gICAgLy8gQmVjYXVzZSwgbWlkZGxlIG1vdXNlIHNvbWV0aW1lcyBoYXZlIHRoaXM6XG4gICAgLy8gZS5idXR0b24gPT09IDAgYW5kIGUuYnV0dG9ucyA9PT0gNFxuICAgIC8vIEZ1cnRoZXJtb3JlLCB3ZSB3YW50IHRvIHByZXZlbnQgY29tYmluYXRpb24gY2xpY2ssIHNvbWV0aGluZyBsaWtlXG4gICAgLy8gSE9MRCBtaWRkbGVtb3VzZSB0aGVuIGxlZnQgY2xpY2ssIHRoYXQgd291bGQgYmVcbiAgICAvLyBlLmJ1dHRvbiA9PT0gMCwgZS5idXR0b25zID09PSA1XG4gICAgLy8ganVzdCBgYnV0dG9uYCBpcyBub3QgZ29ubmEgd29ya1xuICAgIC8vIEFscmlnaHQsIHRoZW4gd2hhdCB0aGlzIGJsb2NrIGRvZXMgP1xuICAgIC8vIHRoaXMgaXMgZm9yIGNocm9tZSBgc2ltdWxhdGUgbW9iaWxlIGRldmljZXNgXG4gICAgLy8gSSB3YW50IHRvIHN1cHBvcnQgdGhpcyBhcyB3ZWxsXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZXZlbnQuYnV0dG9uID09PSAwICYmIGV2ZW50LmJ1dHRvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFRvdWNoIHNjcmVlbiwgc29tZXRpbWVzIG9uIHNvbWUgc3BlY2lmaWMgZGV2aWNlLCBgYnV0dG9uc2BcbiAgICAvLyBkb2Vzbid0IGhhdmUgYW55dGhpbmcgKHNhZmFyaSBvbiBpb3MsIGJsYWNrYmVycnkuLi4pXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gYG1vdXNldXBgIGV2ZW50IG9uIGEgc2luZ2xlIGxlZnQgY2xpY2sgaGFzXG4gIC8vIGBidXR0b25gIGFuZCBgYnV0dG9uc2AgZXF1YWwgdG8gMFxuXG5cbiAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZXVwJyAmJiBldmVudC5idXR0b24gPT09IDAgJiYgZXZlbnQuYnV0dG9ucyA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCB8fCBldmVudC5idXR0b25zICE9PSAxKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgcmVhc29uIHdlIGhhdmUgdGhvc2UgaWYgZWxzZSBibG9jayBhYm92ZVxuICAgIC8vIGlmIGFueSBzcGVjaWFsIGNhc2Ugd2UgY2FuIGNhdGNoIGFuZCBsZXQgaXQgc2xpZGVcbiAgICAvLyB3ZSBkbyBpdCBhYm92ZSwgd2hlbiBnZXQgdG8gaGVyZSwgdGhpcyBkZWZpbml0ZWx5XG4gICAgLy8gaXMtbm90LWxlZnQtY2xpY2tcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogRmluZHMgYSBzaW5nbGUgRE9NIGVsZW1lbnQgbWF0Y2hpbmcgYHNlbGVjdG9yYCB3aXRoaW4gdGhlIG9wdGlvbmFsXG4gKiBgY29udGV4dGAgb2YgYW5vdGhlciBET00gZWxlbWVudCAoZGVmYXVsdGluZyB0byBgZG9jdW1lbnRgKS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiAgICAgICAgIEEgdmFsaWQgQ1NTIHNlbGVjdG9yLCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgcXVlcnlTZWxlY3RvcmAuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudHxTdHJpbmd9IFtjb250ZXh0PWRvY3VtZW50XVxuICogICAgICAgICBBIERPTSBlbGVtZW50IHdpdGhpbiB3aGljaCB0byBxdWVyeS4gQ2FuIGFsc28gYmUgYSBzZWxlY3RvclxuICogICAgICAgICBzdHJpbmcgaW4gd2hpY2ggY2FzZSB0aGUgZmlyc3QgbWF0Y2hpbmcgZWxlbWVudCB3aWxsIGJlIHVzZWRcbiAqICAgICAgICAgYXMgY29udGV4dC4gSWYgbWlzc2luZyAob3Igbm8gZWxlbWVudCBtYXRjaGVzIHNlbGVjdG9yKSwgZmFsbHNcbiAqICAgICAgICAgYmFjayB0byBgZG9jdW1lbnRgLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR8bnVsbH1cbiAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgZm91bmQgb3IgbnVsbC5cbiAqL1xuXG52YXIgJCA9IGNyZWF0ZVF1ZXJpZXIoJ3F1ZXJ5U2VsZWN0b3InKTtcbi8qKlxuICogRmluZHMgYSBhbGwgRE9NIGVsZW1lbnRzIG1hdGNoaW5nIGBzZWxlY3RvcmAgd2l0aGluIHRoZSBvcHRpb25hbFxuICogYGNvbnRleHRgIG9mIGFub3RoZXIgRE9NIGVsZW1lbnQgKGRlZmF1bHRpbmcgdG8gYGRvY3VtZW50YCkuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzZWxlY3RvclxuICogICAgICAgICBBIHZhbGlkIENTUyBzZWxlY3Rvciwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gYHF1ZXJ5U2VsZWN0b3JBbGxgLlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR8U3RyaW5nfSBbY29udGV4dD1kb2N1bWVudF1cbiAqICAgICAgICAgQSBET00gZWxlbWVudCB3aXRoaW4gd2hpY2ggdG8gcXVlcnkuIENhbiBhbHNvIGJlIGEgc2VsZWN0b3JcbiAqICAgICAgICAgc3RyaW5nIGluIHdoaWNoIGNhc2UgdGhlIGZpcnN0IG1hdGNoaW5nIGVsZW1lbnQgd2lsbCBiZSB1c2VkXG4gKiAgICAgICAgIGFzIGNvbnRleHQuIElmIG1pc3NpbmcgKG9yIG5vIGVsZW1lbnQgbWF0Y2hlcyBzZWxlY3RvciksIGZhbGxzXG4gKiAgICAgICAgIGJhY2sgdG8gYGRvY3VtZW50YC5cbiAqXG4gKiBAcmV0dXJuIHtOb2RlTGlzdH1cbiAqICAgICAgICAgQSBlbGVtZW50IGxpc3Qgb2YgZWxlbWVudHMgdGhhdCB3ZXJlIGZvdW5kLiBXaWxsIGJlIGVtcHR5IGlmIG5vbmVcbiAqICAgICAgICAgd2VyZSBmb3VuZC5cbiAqXG4gKi9cblxudmFyICQkID0gY3JlYXRlUXVlcmllcigncXVlcnlTZWxlY3RvckFsbCcpO1xuXG52YXIgRG9tID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBpc1JlYWw6IGlzUmVhbCxcbiAgaXNFbDogaXNFbCxcbiAgaXNJbkZyYW1lOiBpc0luRnJhbWUsXG4gIGNyZWF0ZUVsOiBjcmVhdGVFbCxcbiAgdGV4dENvbnRlbnQ6IHRleHRDb250ZW50LFxuICBwcmVwZW5kVG86IHByZXBlbmRUbyxcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBzZXRBdHRyaWJ1dGVzOiBzZXRBdHRyaWJ1dGVzLFxuICBnZXRBdHRyaWJ1dGVzOiBnZXRBdHRyaWJ1dGVzLFxuICBnZXRBdHRyaWJ1dGU6IGdldEF0dHJpYnV0ZSxcbiAgc2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGUsXG4gIHJlbW92ZUF0dHJpYnV0ZTogcmVtb3ZlQXR0cmlidXRlLFxuICBibG9ja1RleHRTZWxlY3Rpb246IGJsb2NrVGV4dFNlbGVjdGlvbixcbiAgdW5ibG9ja1RleHRTZWxlY3Rpb246IHVuYmxvY2tUZXh0U2VsZWN0aW9uLFxuICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGdldEJvdW5kaW5nQ2xpZW50UmVjdCxcbiAgZmluZFBvc2l0aW9uOiBmaW5kUG9zaXRpb24sXG4gIGdldFBvaW50ZXJQb3NpdGlvbjogZ2V0UG9pbnRlclBvc2l0aW9uLFxuICBpc1RleHROb2RlOiBpc1RleHROb2RlLFxuICBlbXB0eUVsOiBlbXB0eUVsLFxuICBub3JtYWxpemVDb250ZW50OiBub3JtYWxpemVDb250ZW50LFxuICBhcHBlbmRDb250ZW50OiBhcHBlbmRDb250ZW50LFxuICBpbnNlcnRDb250ZW50OiBpbnNlcnRDb250ZW50LFxuICBpc1NpbmdsZUxlZnRDbGljazogaXNTaW5nbGVMZWZ0Q2xpY2ssXG4gICQ6ICQsXG4gICQkOiAkJFxufSk7XG5cbi8qKlxuICogQGZpbGUgc2V0dXAuanMgLSBGdW5jdGlvbnMgZm9yIHNldHRpbmcgdXAgYSBwbGF5ZXIgd2l0aG91dFxuICogdXNlciBpbnRlcmFjdGlvbiBiYXNlZCBvbiB0aGUgZGF0YS1zZXR1cCBgYXR0cmlidXRlYCBvZiB0aGUgdmlkZW8gdGFnLlxuICpcbiAqIEBtb2R1bGUgc2V0dXBcbiAqL1xudmFyIF93aW5kb3dMb2FkZWQgPSBmYWxzZTtcbnZhciB2aWRlb2pzO1xuLyoqXG4gKiBTZXQgdXAgYW55IHRhZ3MgdGhhdCBoYXZlIGEgZGF0YS1zZXR1cCBgYXR0cmlidXRlYCB3aGVuIHRoZSBwbGF5ZXIgaXMgc3RhcnRlZC5cbiAqL1xuXG52YXIgYXV0b1NldHVwID0gZnVuY3Rpb24gYXV0b1NldHVwKCkge1xuICAvLyBQcm90ZWN0IGFnYWluc3QgYnJlYWthZ2UgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGFuZCBjaGVjayBnbG9iYWwgYXV0b1NldHVwIG9wdGlvbi5cbiAgaWYgKCFpc1JlYWwoKSB8fCB2aWRlb2pzLm9wdGlvbnMuYXV0b1NldHVwID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2aWRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3ZpZGVvJykpO1xuICB2YXIgYXVkaW9zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2F1ZGlvJykpO1xuICB2YXIgZGl2cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2aWRlby1qcycpKTtcbiAgdmFyIG1lZGlhRWxzID0gdmlkcy5jb25jYXQoYXVkaW9zLCBkaXZzKTsgLy8gQ2hlY2sgaWYgYW55IG1lZGlhIGVsZW1lbnRzIGV4aXN0XG5cbiAgaWYgKG1lZGlhRWxzICYmIG1lZGlhRWxzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZSA9IG1lZGlhRWxzLmxlbmd0aDsgaSA8IGU7IGkrKykge1xuICAgICAgdmFyIG1lZGlhRWwgPSBtZWRpYUVsc1tpXTsgLy8gQ2hlY2sgaWYgZWxlbWVudCBleGlzdHMsIGhhcyBnZXRBdHRyaWJ1dGUgZnVuYy5cblxuICAgICAgaWYgKG1lZGlhRWwgJiYgbWVkaWFFbC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgcGxheWVyIGhhc24ndCBhbHJlYWR5IGJlZW4gc2V0IHVwLlxuICAgICAgICBpZiAobWVkaWFFbC5wbGF5ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBvcHRpb25zID0gbWVkaWFFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2V0dXAnKTsgLy8gQ2hlY2sgaWYgZGF0YS1zZXR1cCBhdHRyIGV4aXN0cy5cbiAgICAgICAgICAvLyBXZSBvbmx5IGF1dG8tc2V0dXAgaWYgdGhleSd2ZSBhZGRlZCB0aGUgZGF0YS1zZXR1cCBhdHRyLlxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdmlkZW8uanMgaW5zdGFuY2UuXG4gICAgICAgICAgICB2aWRlb2pzKG1lZGlhRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJZiBnZXRBdHRyaWJ1dGUgaXNuJ3QgZGVmaW5lZCwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgRE9NLlxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdXRvU2V0dXBUaW1lb3V0KDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vIE5vIHZpZGVvcyB3ZXJlIGZvdW5kLCBzbyBrZWVwIGxvb3BpbmcgdW5sZXNzIHBhZ2UgaXMgZmluaXNoZWQgbG9hZGluZy5cblxuICB9IGVsc2UgaWYgKCFfd2luZG93TG9hZGVkKSB7XG4gICAgYXV0b1NldHVwVGltZW91dCgxKTtcbiAgfVxufTtcbi8qKlxuICogV2FpdCB1bnRpbCB0aGUgcGFnZSBpcyBsb2FkZWQgYmVmb3JlIHJ1bm5pbmcgYXV0b1NldHVwLiBUaGlzIHdpbGwgYmUgY2FsbGVkIGluXG4gKiBhdXRvU2V0dXAgaWYgYGhhc0xvYWRlZGAgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdFxuICogICAgICAgIEhvdyBsb25nIHRvIHdhaXQgaW4gbXNcbiAqXG4gKiBAcGFyYW0ge21vZHVsZTp2aWRlb2pzfSBbdmpzXVxuICogICAgICAgIFRoZSB2aWRlb2pzIGxpYnJhcnkgZnVuY3Rpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGF1dG9TZXR1cFRpbWVvdXQod2FpdCwgdmpzKSB7XG4gIGlmICh2anMpIHtcbiAgICB2aWRlb2pzID0gdmpzO1xuICB9XG5cbiAgd2luZG93JDEuc2V0VGltZW91dChhdXRvU2V0dXAsIHdhaXQpO1xufVxuLyoqXG4gKiBVc2VkIHRvIHNldCB0aGUgaW50ZXJuYWwgdHJhY2tpbmcgb2Ygd2luZG93IGxvYWRlZCBzdGF0ZSB0byB0cnVlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRXaW5kb3dMb2FkZWQoKSB7XG4gIF93aW5kb3dMb2FkZWQgPSB0cnVlO1xuICB3aW5kb3ckMS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgc2V0V2luZG93TG9hZGVkKTtcbn1cblxuaWYgKGlzUmVhbCgpKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgc2V0V2luZG93TG9hZGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuIGZvciB0aGUgbG9hZCBldmVudCBvbiB3aW5kb3csIGFuZCBzZXQgX3dpbmRvd0xvYWRlZCB0byB0cnVlLlxuICAgICAqXG4gICAgICogV2UgdXNlIGEgc3RhbmRhcmQgZXZlbnQgbGlzdGVuZXIgaGVyZSB0byBhdm9pZCBpbmNyZW1lbnRpbmcgdGhlIEdVSURcbiAgICAgKiBiZWZvcmUgYW55IHBsYXllcnMgYXJlIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAbGlzdGVucyBsb2FkXG4gICAgICovXG4gICAgd2luZG93JDEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNldFdpbmRvd0xvYWRlZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZmlsZSBzdHlsZXNoZWV0LmpzXG4gKiBAbW9kdWxlIHN0eWxlc2hlZXRcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSBET00gc3lsZSBlbGVtZW50IGdpdmVuIGEgY2xhc3NOYW1lIGZvciBpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gKiAgICAgICAgVGhlIGNsYXNzTmFtZSB0byBhZGQgdG8gdGhlIGNyZWF0ZWQgc3R5bGUgZWxlbWVudC5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICovXG5cbnZhciBjcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoY2xhc3NOYW1lKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIHN0eWxlO1xufTtcbi8qKlxuICogQWRkIHRleHQgdG8gYSBET00gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgVGhlIEVsZW1lbnQgdG8gYWRkIHRleHQgY29udGVudCB0by5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogICAgICAgIFRoZSB0ZXh0IHRvIGFkZCB0byB0aGUgZWxlbWVudC5cbiAqL1xuXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbiBzZXRUZXh0Q29udGVudChlbCwgY29udGVudCkge1xuICBpZiAoZWwuc3R5bGVTaGVldCkge1xuICAgIGVsLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNvbnRlbnQ7XG4gIH0gZWxzZSB7XG4gICAgZWwudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICB9XG59O1xuXG4vKipcbiAqIEBmaWxlIGd1aWQuanNcbiAqIEBtb2R1bGUgZ3VpZFxuICovXG4vLyBEZWZhdWx0IHZhbHVlIGZvciBHVUlEcy4gVGhpcyBhbGxvd3MgdXMgdG8gcmVzZXQgdGhlIEdVSUQgY291bnRlciBpbiB0ZXN0cy5cbi8vXG4vLyBUaGUgaW5pdGlhbCBHVUlEIGlzIDMgYmVjYXVzZSBzb21lIHVzZXJzIGhhdmUgY29tZSB0byByZWx5IG9uIHRoZSBmaXJzdFxuLy8gZGVmYXVsdCBwbGF5ZXIgSUQgZW5kaW5nIHVwIGFzIGB2anNfdmlkZW9fM2AuXG4vL1xuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9wdWxsLzYyMTZcbnZhciBfaW5pdGlhbEd1aWQgPSAzO1xuLyoqXG4gKiBVbmlxdWUgSUQgZm9yIGFuIGVsZW1lbnQgb3IgZnVuY3Rpb25cbiAqXG4gKiBAdHlwZSB7TnVtYmVyfVxuICovXG5cbnZhciBfZ3VpZCA9IF9pbml0aWFsR3VpZDtcbi8qKlxuICogR2V0IGEgdW5pcXVlIGF1dG8taW5jcmVtZW50aW5nIElEIGJ5IG51bWJlciB0aGF0IGhhcyBub3QgYmVlbiByZXR1cm5lZCBiZWZvcmUuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBBIG5ldyB1bmlxdWUgSUQuXG4gKi9cblxuZnVuY3Rpb24gbmV3R1VJRCgpIHtcbiAgcmV0dXJuIF9ndWlkKys7XG59XG5cbi8qKlxuICogQGZpbGUgZG9tLWRhdGEuanNcbiAqIEBtb2R1bGUgZG9tLWRhdGFcbiAqL1xudmFyIEZha2VXZWFrTWFwO1xuXG5pZiAoIXdpbmRvdyQxLldlYWtNYXApIHtcbiAgRmFrZVdlYWtNYXAgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGYWtlV2Vha01hcCgpIHtcbiAgICAgIHRoaXMudmRhdGEgPSAndmRhdGEnICsgTWF0aC5mbG9vcih3aW5kb3ckMS5wZXJmb3JtYW5jZSAmJiB3aW5kb3ckMS5wZXJmb3JtYW5jZS5ub3coKSB8fCBEYXRlLm5vdygpKTtcbiAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBGYWtlV2Vha01hcC5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBhY2Nlc3MgPSBrZXlbdGhpcy52ZGF0YV0gfHwgbmV3R1VJRCgpO1xuXG4gICAgICBpZiAoIWtleVt0aGlzLnZkYXRhXSkge1xuICAgICAgICBrZXlbdGhpcy52ZGF0YV0gPSBhY2Nlc3M7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF0YVthY2Nlc3NdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIHZhciBhY2Nlc3MgPSBrZXlbdGhpcy52ZGF0YV07IC8vIHdlIGhhdmUgZGF0YSwgcmV0dXJuIGl0XG5cbiAgICAgIGlmIChhY2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVthY2Nlc3NdO1xuICAgICAgfSAvLyB3ZSBkb24ndCBoYXZlIGRhdGEsIHJldHVybiBub3RoaW5nLlxuICAgICAgLy8gcmV0dXJuIHVuZGVmaW5lZCBleHBsaWNpdGx5IGFzIHRoYXQncyB0aGUgY29udHJhY3QgZm9yIHRoaXMgbWV0aG9kXG5cblxuICAgICAgbG9nKCdXZSBoYXZlIG5vIGRhdGEgZm9yIHRoaXMgZWxlbWVudCcsIGtleSk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgdmFyIGFjY2VzcyA9IGtleVt0aGlzLnZkYXRhXTtcbiAgICAgIHJldHVybiBhY2Nlc3MgaW4gdGhpcy5kYXRhO1xuICAgIH07XG5cbiAgICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuICAgICAgdmFyIGFjY2VzcyA9IGtleVt0aGlzLnZkYXRhXTtcblxuICAgICAgaWYgKGFjY2Vzcykge1xuICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2FjY2Vzc107XG4gICAgICAgIGRlbGV0ZSBrZXlbdGhpcy52ZGF0YV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBGYWtlV2Vha01hcDtcbiAgfSgpO1xufVxuLyoqXG4gKiBFbGVtZW50IERhdGEgU3RvcmUuXG4gKlxuICogQWxsb3dzIGZvciBiaW5kaW5nIGRhdGEgdG8gYW4gZWxlbWVudCB3aXRob3V0IHB1dHRpbmcgaXQgZGlyZWN0bHkgb24gdGhlXG4gKiBlbGVtZW50LiBFeC4gRXZlbnQgbGlzdGVuZXJzIGFyZSBzdG9yZWQgaGVyZS5cbiAqIChhbHNvIGZyb20ganNuaW5qYS5jb20sIHNsaWdodGx5IG1vZGlmaWVkIGFuZCB1cGRhdGVkIGZvciBjbG9zdXJlIGNvbXBpbGVyKVxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIERvbURhdGEgPSB3aW5kb3ckMS5XZWFrTWFwID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBGYWtlV2Vha01hcCgpO1xuXG4vKipcbiAqIEBmaWxlIGV2ZW50cy5qcy4gQW4gRXZlbnQgU3lzdGVtIChKb2huIFJlc2lnIC0gU2VjcmV0cyBvZiBhIEpTIE5pbmphIGh0dHA6Ly9qc25pbmphLmNvbS8pXG4gKiAoT3JpZ2luYWwgYm9vayB2ZXJzaW9uIHdhc24ndCBjb21wbGV0ZWx5IHVzYWJsZSwgc28gZml4ZWQgc29tZSB0aGluZ3MgYW5kIG1hZGUgQ2xvc3VyZSBDb21waWxlciBjb21wYXRpYmxlKVxuICogVGhpcyBzaG91bGQgd29yayB2ZXJ5IHNpbWlsYXJseSB0byBqUXVlcnkncyBldmVudHMsIGhvd2V2ZXIgaXQncyBiYXNlZCBvZmYgdGhlIGJvb2sgdmVyc2lvbiB3aGljaCBpc24ndCBhc1xuICogcm9idXN0IGFzIGpxdWVyeSdzLCBzbyB0aGVyZSdzIHByb2JhYmx5IHNvbWUgZGlmZmVyZW5jZXMuXG4gKlxuICogQGZpbGUgZXZlbnRzLmpzXG4gKiBAbW9kdWxlIGV2ZW50c1xuICovXG4vKipcbiAqIENsZWFuIHVwIHRoZSBsaXN0ZW5lciBjYWNoZSBhbmQgZGlzcGF0Y2hlcnNcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtXG4gKiAgICAgICAgRWxlbWVudCB0byBjbGVhbiB1cFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgVHlwZSBvZiBldmVudCB0byBjbGVhbiB1cFxuICovXG5cbmZ1bmN0aW9uIF9jbGVhblVwRXZlbnRzKGVsZW0sIHR5cGUpIHtcbiAgaWYgKCFEb21EYXRhLmhhcyhlbGVtKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0gRG9tRGF0YS5nZXQoZWxlbSk7IC8vIFJlbW92ZSB0aGUgZXZlbnRzIG9mIGEgcGFydGljdWxhciB0eXBlIGlmIHRoZXJlIGFyZSBub25lIGxlZnRcblxuICBpZiAoZGF0YS5oYW5kbGVyc1t0eXBlXS5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgZGF0YS5oYW5kbGVyc1t0eXBlXTsgLy8gZGF0YS5oYW5kbGVyc1t0eXBlXSA9IG51bGw7XG4gICAgLy8gU2V0dGluZyB0byBudWxsIHdhcyBjYXVzaW5nIGFuIGVycm9yIHdpdGggZGF0YS5oYW5kbGVyc1xuICAgIC8vIFJlbW92ZSB0aGUgbWV0YS1oYW5kbGVyIGZyb20gdGhlIGVsZW1lbnRcblxuICAgIGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBkYXRhLmRpc3BhdGNoZXIsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0uZGV0YWNoRXZlbnQpIHtcbiAgICAgIGVsZW0uZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGRhdGEuZGlzcGF0Y2hlcik7XG4gICAgfVxuICB9IC8vIFJlbW92ZSB0aGUgZXZlbnRzIG9iamVjdCBpZiB0aGVyZSBhcmUgbm8gdHlwZXMgbGVmdFxuXG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGEuaGFuZGxlcnMpLmxlbmd0aCA8PSAwKSB7XG4gICAgZGVsZXRlIGRhdGEuaGFuZGxlcnM7XG4gICAgZGVsZXRlIGRhdGEuZGlzcGF0Y2hlcjtcbiAgICBkZWxldGUgZGF0YS5kaXNhYmxlZDtcbiAgfSAvLyBGaW5hbGx5IHJlbW92ZSB0aGUgZWxlbWVudCBkYXRhIGlmIHRoZXJlIGlzIG5vIGRhdGEgbGVmdFxuXG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgIERvbURhdGFbXCJkZWxldGVcIl0oZWxlbSk7XG4gIH1cbn1cbi8qKlxuICogTG9vcHMgdGhyb3VnaCBhbiBhcnJheSBvZiBldmVudCB0eXBlcyBhbmQgY2FsbHMgdGhlIHJlcXVlc3RlZCBtZXRob2QgZm9yIGVhY2ggdHlwZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogICAgICAgIFRoZSBldmVudCBtZXRob2Qgd2Ugd2FudCB0byB1c2UuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbVxuICogICAgICAgIEVsZW1lbnQgb3Igb2JqZWN0IHRvIGJpbmQgbGlzdGVuZXJzIHRvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICBUeXBlIG9mIGV2ZW50IHRvIGJpbmQgdG8uXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBjYWxsYmFja1xuICogICAgICAgIEV2ZW50IGxpc3RlbmVyLlxuICovXG5cblxuZnVuY3Rpb24gX2hhbmRsZU11bHRpcGxlRXZlbnRzKGZuLCBlbGVtLCB0eXBlcywgY2FsbGJhY2spIHtcbiAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIC8vIENhbGwgdGhlIGV2ZW50IG1ldGhvZCBmb3IgZWFjaCBvbmUgb2YgdGhlIHR5cGVzXG4gICAgZm4oZWxlbSwgdHlwZSwgY2FsbGJhY2spO1xuICB9KTtcbn1cbi8qKlxuICogRml4IGEgbmF0aXZlIGV2ZW50IHRvIGhhdmUgc3RhbmRhcmQgcHJvcGVydHkgdmFsdWVzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gKiAgICAgICAgRXZlbnQgb2JqZWN0IHRvIGZpeC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgIEZpeGVkIGV2ZW50IG9iamVjdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpeEV2ZW50KGV2ZW50KSB7XG4gIGZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gVGVzdCBpZiBmaXhpbmcgdXAgaXMgbmVlZGVkXG4gIC8vIFVzZWQgdG8gY2hlY2sgaWYgIWV2ZW50LnN0b3BQcm9wYWdhdGlvbiBpbnN0ZWFkIG9mIGlzUHJvcGFnYXRpb25TdG9wcGVkXG4gIC8vIEJ1dCBuYXRpdmUgZXZlbnRzIHJldHVybiB0cnVlIGZvciBzdG9wUHJvcGFnYXRpb24sIGJ1dCBkb24ndCBoYXZlXG4gIC8vIG90aGVyIGV4cGVjdGVkIG1ldGhvZHMgbGlrZSBpc1Byb3BhZ2F0aW9uU3RvcHBlZC4gU2VlbXMgdG8gYmUgYSBwcm9ibGVtXG4gIC8vIHdpdGggdGhlIEphdmFzY3JpcHQgTmluamEgY29kZS4gU28gd2UncmUganVzdCBvdmVycmlkaW5nIGFsbCBldmVudHMgbm93LlxuXG5cbiAgaWYgKCFldmVudCB8fCAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQpIHtcbiAgICB2YXIgb2xkID0gZXZlbnQgfHwgd2luZG93JDEuZXZlbnQ7XG4gICAgZXZlbnQgPSB7fTsgLy8gQ2xvbmUgdGhlIG9sZCBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gbW9kaWZ5IHRoZSB2YWx1ZXMgZXZlbnQgPSB7fTtcbiAgICAvLyBJRTggRG9lc24ndCBsaWtlIHdoZW4geW91IG1lc3Mgd2l0aCBuYXRpdmUgZXZlbnQgcHJvcGVydGllc1xuICAgIC8vIEZpcmVmb3ggcmV0dXJucyBmYWxzZSBmb3IgZXZlbnQuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSBhbmQgb3RoZXIgcHJvcHNcbiAgICAvLyAgd2hpY2ggbWFrZXMgY29weWluZyBtb3JlIGRpZmZpY3VsdC5cbiAgICAvLyBUT0RPOiBQcm9iYWJseSBiZXN0IHRvIGNyZWF0ZSBhIHdoaXRlbGlzdCBvZiBldmVudCBwcm9wc1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9sZCkge1xuICAgICAgLy8gU2FmYXJpIDYuMC4zIHdhcm5zIHlvdSBpZiB5b3UgdHJ5IHRvIGNvcHkgZGVwcmVjYXRlZCBsYXllclgvWVxuICAgICAgLy8gQ2hyb21lIHdhcm5zIHlvdSBpZiB5b3UgdHJ5IHRvIGNvcHkgZGVwcmVjYXRlZCBrZXlib2FyZEV2ZW50LmtleUxvY2F0aW9uXG4gICAgICAvLyBhbmQgd2Via2l0TW92ZW1lbnRYL1lcbiAgICAgIGlmIChrZXkgIT09ICdsYXllclgnICYmIGtleSAhPT0gJ2xheWVyWScgJiYga2V5ICE9PSAna2V5TG9jYXRpb24nICYmIGtleSAhPT0gJ3dlYmtpdE1vdmVtZW50WCcgJiYga2V5ICE9PSAnd2Via2l0TW92ZW1lbnRZJykge1xuICAgICAgICAvLyBDaHJvbWUgMzIrIHdhcm5zIGlmIHlvdSB0cnkgdG8gY29weSBkZXByZWNhdGVkIHJldHVyblZhbHVlLCBidXRcbiAgICAgICAgLy8gd2Ugc3RpbGwgd2FudCB0byBpZiBwcmV2ZW50RGVmYXVsdCBpc24ndCBzdXBwb3J0ZWQgKElFOCkuXG4gICAgICAgIGlmICghKGtleSA9PT0gJ3JldHVyblZhbHVlJyAmJiBvbGQucHJldmVudERlZmF1bHQpKSB7XG4gICAgICAgICAgZXZlbnRba2V5XSA9IG9sZFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBUaGUgZXZlbnQgb2NjdXJyZWQgb24gdGhpcyBlbGVtZW50XG5cblxuICAgIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xuICAgIH0gLy8gSGFuZGxlIHdoaWNoIG90aGVyIGVsZW1lbnQgdGhlIGV2ZW50IGlzIHJlbGF0ZWQgdG9cblxuXG4gICAgaWYgKCFldmVudC5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID0gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50O1xuICAgIH0gLy8gU3RvcCB0aGUgZGVmYXVsdCBicm93c2VyIGFjdGlvblxuXG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgb2xkLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICBvbGQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7IC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmdcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgIG9sZC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgIG9sZC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuICAgIH07XG5cbiAgICBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVybkZhbHNlOyAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nIGFuZCBleGVjdXRpbmcgb3RoZXIgaGFuZGxlcnNcblxuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIG9sZC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcblxuICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuRmFsc2U7IC8vIEhhbmRsZSBtb3VzZSBwb3NpdGlvblxuXG4gICAgaWYgKGV2ZW50LmNsaWVudFggIT09IG51bGwgJiYgZXZlbnQuY2xpZW50WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgZXZlbnQucGFnZVggPSBldmVudC5jbGllbnRYICsgKGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCk7XG4gICAgICBldmVudC5wYWdlWSA9IGV2ZW50LmNsaWVudFkgKyAoZG9jICYmIGRvYy5zY3JvbGxUb3AgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudFRvcCB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wIHx8IDApO1xuICAgIH0gLy8gSGFuZGxlIGtleSBwcmVzc2VzXG5cblxuICAgIGV2ZW50LndoaWNoID0gZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTsgLy8gRml4IGJ1dHRvbiBmb3IgbW91c2UgY2xpY2tzOlxuICAgIC8vIDAgPT0gbGVmdDsgMSA9PSBtaWRkbGU7IDIgPT0gcmlnaHRcblxuICAgIGlmIChldmVudC5idXR0b24gIT09IG51bGwgJiYgZXZlbnQuYnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgaXMgZGlzYWJsZWQgYmVjYXVzZSBpdCBkb2VzIG5vdCBwYXNzIHZpZGVvanMtc3RhbmRhcmRcbiAgICAgIC8vIGFuZC4uLiB5aWtlcy5cblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGV2ZW50LmJ1dHRvbiA9IGV2ZW50LmJ1dHRvbiAmIDEgPyAwIDogZXZlbnQuYnV0dG9uICYgNCA/IDEgOiBldmVudC5idXR0b24gJiAyID8gMiA6IDA7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgfVxuICB9IC8vIFJldHVybnMgZml4ZWQtdXAgaW5zdGFuY2VcblxuXG4gIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogV2hldGhlciBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycyBhcmUgc3VwcG9ydGVkXG4gKi9cblxudmFyIF9zdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgX3N1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93JDEuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICAgIHdpbmRvdyQxLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkgey8vIGRpc3JlZ2FyZFxuICB9XG59KSgpO1xuLyoqXG4gKiBUb3VjaCBldmVudHMgQ2hyb21lIGV4cGVjdHMgdG8gYmUgcGFzc2l2ZVxuICovXG5cblxudmFyIHBhc3NpdmVFdmVudHMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJ107XG4vKipcbiAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byBlbGVtZW50XG4gKiBJdCBzdG9yZXMgdGhlIGhhbmRsZXIgZnVuY3Rpb24gaW4gYSBzZXBhcmF0ZSBjYWNoZSBvYmplY3RcbiAqIGFuZCBhZGRzIGEgZ2VuZXJpYyBoYW5kbGVyIHRvIHRoZSBlbGVtZW50J3MgZXZlbnQsXG4gKiBhbG9uZyB3aXRoIGEgdW5pcXVlIGlkIChndWlkKSB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtXG4gKiAgICAgICAgRWxlbWVudCBvciBvYmplY3QgdG8gYmluZCBsaXN0ZW5lcnMgdG9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdHlwZVxuICogICAgICAgIFR5cGUgb2YgZXZlbnQgdG8gYmluZCB0by5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJ9IGZuXG4gKiAgICAgICAgRXZlbnQgbGlzdGVuZXIuXG4gKi9cblxuZnVuY3Rpb24gb24oZWxlbSwgdHlwZSwgZm4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICByZXR1cm4gX2hhbmRsZU11bHRpcGxlRXZlbnRzKG9uLCBlbGVtLCB0eXBlLCBmbik7XG4gIH1cblxuICBpZiAoIURvbURhdGEuaGFzKGVsZW0pKSB7XG4gICAgRG9tRGF0YS5zZXQoZWxlbSwge30pO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBEb21EYXRhLmdldChlbGVtKTsgLy8gV2UgbmVlZCBhIHBsYWNlIHRvIHN0b3JlIGFsbCBvdXIgaGFuZGxlciBkYXRhXG5cbiAgaWYgKCFkYXRhLmhhbmRsZXJzKSB7XG4gICAgZGF0YS5oYW5kbGVycyA9IHt9O1xuICB9XG5cbiAgaWYgKCFkYXRhLmhhbmRsZXJzW3R5cGVdKSB7XG4gICAgZGF0YS5oYW5kbGVyc1t0eXBlXSA9IFtdO1xuICB9XG5cbiAgaWYgKCFmbi5ndWlkKSB7XG4gICAgZm4uZ3VpZCA9IG5ld0dVSUQoKTtcbiAgfVxuXG4gIGRhdGEuaGFuZGxlcnNbdHlwZV0ucHVzaChmbik7XG5cbiAgaWYgKCFkYXRhLmRpc3BhdGNoZXIpIHtcbiAgICBkYXRhLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBkYXRhLmRpc3BhdGNoZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGhhc2gpIHtcbiAgICAgIGlmIChkYXRhLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQgPSBmaXhFdmVudChldmVudCk7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBkYXRhLmhhbmRsZXJzW2V2ZW50LnR5cGVdO1xuXG4gICAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgICAgLy8gQ29weSBoYW5kbGVycyBzbyBpZiBoYW5kbGVycyBhcmUgYWRkZWQvcmVtb3ZlZCBkdXJpbmcgdGhlIHByb2Nlc3MgaXQgZG9lc24ndCB0aHJvdyBldmVyeXRoaW5nIG9mZi5cbiAgICAgICAgdmFyIGhhbmRsZXJzQ29weSA9IGhhbmRsZXJzLnNsaWNlKDApO1xuXG4gICAgICAgIGZvciAodmFyIG0gPSAwLCBuID0gaGFuZGxlcnNDb3B5Lmxlbmd0aDsgbSA8IG47IG0rKykge1xuICAgICAgICAgIGlmIChldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaGFuZGxlcnNDb3B5W21dLmNhbGwoZWxlbSwgZXZlbnQsIGhhc2gpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChkYXRhLmhhbmRsZXJzW3R5cGVdLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHZhciBvcHRpb25zID0gZmFsc2U7XG5cbiAgICAgIGlmIChfc3VwcG9ydHNQYXNzaXZlICYmIHBhc3NpdmVFdmVudHMuaW5kZXhPZih0eXBlKSA+IC0xKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZGF0YS5kaXNwYXRjaGVyLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0uYXR0YWNoRXZlbnQpIHtcbiAgICAgIGVsZW0uYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGRhdGEuZGlzcGF0Y2hlcik7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gYW4gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBPYmplY3QgdG8gcmVtb3ZlIGxpc3RlbmVycyBmcm9tLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdHlwZV1cbiAqICAgICAgICBUeXBlIG9mIGxpc3RlbmVyIHRvIHJlbW92ZS4gRG9uJ3QgaW5jbHVkZSB0byByZW1vdmUgYWxsIGV2ZW50cyBmcm9tIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBbZm5dXG4gKiAgICAgICAgU3BlY2lmaWMgbGlzdGVuZXIgdG8gcmVtb3ZlLiBEb24ndCBpbmNsdWRlIHRvIHJlbW92ZSBsaXN0ZW5lcnMgZm9yIGFuIGV2ZW50XG4gKiAgICAgICAgdHlwZS5cbiAqL1xuXG5mdW5jdGlvbiBvZmYoZWxlbSwgdHlwZSwgZm4pIHtcbiAgLy8gRG9uJ3Qgd2FudCB0byBhZGQgYSBjYWNoZSBvYmplY3QgdGhyb3VnaCBnZXRFbERhdGEgaWYgbm90IG5lZWRlZFxuICBpZiAoIURvbURhdGEuaGFzKGVsZW0pKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBEb21EYXRhLmdldChlbGVtKTsgLy8gSWYgbm8gZXZlbnRzIGV4aXN0LCBub3RoaW5nIHRvIHVuYmluZFxuXG4gIGlmICghZGF0YS5oYW5kbGVycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgcmV0dXJuIF9oYW5kbGVNdWx0aXBsZUV2ZW50cyhvZmYsIGVsZW0sIHR5cGUsIGZuKTtcbiAgfSAvLyBVdGlsaXR5IGZ1bmN0aW9uXG5cblxuICB2YXIgcmVtb3ZlVHlwZSA9IGZ1bmN0aW9uIHJlbW92ZVR5cGUoZWwsIHQpIHtcbiAgICBkYXRhLmhhbmRsZXJzW3RdID0gW107XG5cbiAgICBfY2xlYW5VcEV2ZW50cyhlbCwgdCk7XG4gIH07IC8vIEFyZSB3ZSByZW1vdmluZyBhbGwgYm91bmQgZXZlbnRzP1xuXG5cbiAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAodmFyIHQgaW4gZGF0YS5oYW5kbGVycykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLmhhbmRsZXJzIHx8IHt9LCB0KSkge1xuICAgICAgICByZW1vdmVUeXBlKGVsZW0sIHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGRhdGEuaGFuZGxlcnNbdHlwZV07IC8vIElmIG5vIGhhbmRsZXJzIGV4aXN0LCBub3RoaW5nIHRvIHVuYmluZFxuXG4gIGlmICghaGFuZGxlcnMpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gSWYgbm8gbGlzdGVuZXIgd2FzIHByb3ZpZGVkLCByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdHlwZVxuXG5cbiAgaWYgKCFmbikge1xuICAgIHJlbW92ZVR5cGUoZWxlbSwgdHlwZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdlJ3JlIG9ubHkgcmVtb3ZpbmcgYSBzaW5nbGUgaGFuZGxlclxuXG5cbiAgaWYgKGZuLmd1aWQpIHtcbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IGhhbmRsZXJzLmxlbmd0aDsgbisrKSB7XG4gICAgICBpZiAoaGFuZGxlcnNbbl0uZ3VpZCA9PT0gZm4uZ3VpZCkge1xuICAgICAgICBoYW5kbGVycy5zcGxpY2Uobi0tLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfY2xlYW5VcEV2ZW50cyhlbGVtLCB0eXBlKTtcbn1cbi8qKlxuICogVHJpZ2dlciBhbiBldmVudCBmb3IgYW4gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBFbGVtZW50IHRvIHRyaWdnZXIgYW4gZXZlbnQgb25cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fHN0cmluZ30gZXZlbnRcbiAqICAgICAgICBBIHN0cmluZyAodGhlIHR5cGUpIG9yIGFuIGV2ZW50IG9iamVjdCB3aXRoIGEgdHlwZSBhdHRyaWJ1dGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW2hhc2hdXG4gKiAgICAgICAgZGF0YSBoYXNoIHRvIHBhc3MgYWxvbmcgd2l0aCB0aGUgZXZlbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufHVuZGVmaW5lZH1cbiAqICAgICAgICAgUmV0dXJucyB0aGUgb3Bwb3NpdGUgb2YgYGRlZmF1bHRQcmV2ZW50ZWRgIGlmIGRlZmF1bHQgd2FzXG4gKiAgICAgICAgIHByZXZlbnRlZC4gT3RoZXJ3aXNlLCByZXR1cm5zIGB1bmRlZmluZWRgXG4gKi9cblxuZnVuY3Rpb24gdHJpZ2dlcihlbGVtLCBldmVudCwgaGFzaCkge1xuICAvLyBGZXRjaGVzIGVsZW1lbnQgZGF0YSBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCAoZm9yIGJ1YmJsaW5nKS5cbiAgLy8gRG9uJ3Qgd2FudCB0byBhZGQgYSBkYXRhIG9iamVjdCB0byBjYWNoZSBmb3IgZXZlcnkgcGFyZW50LFxuICAvLyBzbyBjaGVja2luZyBoYXNFbERhdGEgZmlyc3QuXG4gIHZhciBlbGVtRGF0YSA9IERvbURhdGEuaGFzKGVsZW0pID8gRG9tRGF0YS5nZXQoZWxlbSkgOiB7fTtcbiAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSB8fCBlbGVtLm93bmVyRG9jdW1lbnQ7IC8vIHR5cGUgPSBldmVudC50eXBlIHx8IGV2ZW50LFxuICAvLyBoYW5kbGVyO1xuICAvLyBJZiBhbiBldmVudCBuYW1lIHdhcyBwYXNzZWQgYXMgYSBzdHJpbmcsIGNyZWF0ZXMgYW4gZXZlbnQgb3V0IG9mIGl0XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHtcbiAgICAgIHR5cGU6IGV2ZW50LFxuICAgICAgdGFyZ2V0OiBlbGVtXG4gICAgfTtcbiAgfSBlbHNlIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgZXZlbnQudGFyZ2V0ID0gZWxlbTtcbiAgfSAvLyBOb3JtYWxpemVzIHRoZSBldmVudCBwcm9wZXJ0aWVzLlxuXG5cbiAgZXZlbnQgPSBmaXhFdmVudChldmVudCk7IC8vIElmIHRoZSBwYXNzZWQgZWxlbWVudCBoYXMgYSBkaXNwYXRjaGVyLCBleGVjdXRlcyB0aGUgZXN0YWJsaXNoZWQgaGFuZGxlcnMuXG5cbiAgaWYgKGVsZW1EYXRhLmRpc3BhdGNoZXIpIHtcbiAgICBlbGVtRGF0YS5kaXNwYXRjaGVyLmNhbGwoZWxlbSwgZXZlbnQsIGhhc2gpO1xuICB9IC8vIFVubGVzcyBleHBsaWNpdGx5IHN0b3BwZWQgb3IgdGhlIGV2ZW50IGRvZXMgbm90IGJ1YmJsZSAoZS5nLiBtZWRpYSBldmVudHMpXG4gIC8vIHJlY3Vyc2l2ZWx5IGNhbGxzIHRoaXMgZnVuY3Rpb24gdG8gYnViYmxlIHRoZSBldmVudCB1cCB0aGUgRE9NLlxuXG5cbiAgaWYgKHBhcmVudCAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSAmJiBldmVudC5idWJibGVzID09PSB0cnVlKSB7XG4gICAgdHJpZ2dlci5jYWxsKG51bGwsIHBhcmVudCwgZXZlbnQsIGhhc2gpOyAvLyBJZiBhdCB0aGUgdG9wIG9mIHRoZSBET00sIHRyaWdnZXJzIHRoZSBkZWZhdWx0IGFjdGlvbiB1bmxlc3MgZGlzYWJsZWQuXG4gIH0gZWxzZSBpZiAoIXBhcmVudCAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0W2V2ZW50LnR5cGVdKSB7XG4gICAgaWYgKCFEb21EYXRhLmhhcyhldmVudC50YXJnZXQpKSB7XG4gICAgICBEb21EYXRhLnNldChldmVudC50YXJnZXQsIHt9KTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0RGF0YSA9IERvbURhdGEuZ2V0KGV2ZW50LnRhcmdldCk7IC8vIENoZWNrcyBpZiB0aGUgdGFyZ2V0IGhhcyBhIGRlZmF1bHQgYWN0aW9uIGZvciB0aGlzIGV2ZW50LlxuXG4gICAgaWYgKGV2ZW50LnRhcmdldFtldmVudC50eXBlXSkge1xuICAgICAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsZXMgZXZlbnQgZGlzcGF0Y2hpbmcgb24gdGhlIHRhcmdldCBhcyB3ZSBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgdGhlIGhhbmRsZXIuXG4gICAgICB0YXJnZXREYXRhLmRpc2FibGVkID0gdHJ1ZTsgLy8gRXhlY3V0ZXMgdGhlIGRlZmF1bHQgYWN0aW9uLlxuXG4gICAgICBpZiAodHlwZW9mIGV2ZW50LnRhcmdldFtldmVudC50eXBlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudC50YXJnZXRbZXZlbnQudHlwZV0oKTtcbiAgICAgIH0gLy8gUmUtZW5hYmxlcyBldmVudCBkaXNwYXRjaGluZy5cblxuXG4gICAgICB0YXJnZXREYXRhLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICB9IC8vIEluZm9ybSB0aGUgdHJpZ2dlcmVyIGlmIHRoZSBkZWZhdWx0IHdhcyBwcmV2ZW50ZWQgYnkgcmV0dXJuaW5nIGZhbHNlXG5cblxuICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG59XG4vKipcbiAqIFRyaWdnZXIgYSBsaXN0ZW5lciBvbmx5IG9uY2UgZm9yIGFuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBFbGVtZW50IG9yIG9iamVjdCB0byBiaW5kIHRvLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0eXBlXG4gKiAgICAgICAgTmFtZS90eXBlIG9mIGV2ZW50XG4gKlxuICogQHBhcmFtIHtFdmVudH5FdmVudExpc3RlbmVyfSBmblxuICogICAgICAgIEV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gb25lKGVsZW0sIHR5cGUsIGZuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgcmV0dXJuIF9oYW5kbGVNdWx0aXBsZUV2ZW50cyhvbmUsIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIHZhciBmdW5jID0gZnVuY3Rpb24gZnVuYygpIHtcbiAgICBvZmYoZWxlbSwgdHlwZSwgZnVuYyk7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTsgLy8gY29weSB0aGUgZ3VpZCB0byB0aGUgbmV3IGZ1bmN0aW9uIHNvIGl0IGNhbiByZW1vdmVkIHVzaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbidzIElEXG5cblxuICBmdW5jLmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBuZXdHVUlEKCk7XG4gIG9uKGVsZW0sIHR5cGUsIGZ1bmMpO1xufVxuLyoqXG4gKiBUcmlnZ2VyIGEgbGlzdGVuZXIgb25seSBvbmNlIGFuZCB0aGVuIHR1cm4gaWYgb2ZmIGZvciBhbGxcbiAqIGNvbmZpZ3VyZWQgZXZlbnRzXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbVxuICogICAgICAgIEVsZW1lbnQgb3Igb2JqZWN0IHRvIGJpbmQgdG8uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHR5cGVcbiAqICAgICAgICBOYW1lL3R5cGUgb2YgZXZlbnRcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fkV2ZW50TGlzdGVuZXJ9IGZuXG4gKiAgICAgICAgRXZlbnQgbGlzdGVuZXIgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBhbnkoZWxlbSwgdHlwZSwgZm4pIHtcbiAgdmFyIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKCkge1xuICAgIG9mZihlbGVtLCB0eXBlLCBmdW5jKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9OyAvLyBjb3B5IHRoZSBndWlkIHRvIHRoZSBuZXcgZnVuY3Rpb24gc28gaXQgY2FuIHJlbW92ZWQgdXNpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uJ3MgSURcblxuXG4gIGZ1bmMuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IG5ld0dVSUQoKTsgLy8gbXVsdGlwbGUgb25zLCBidXQgb25lIG9mZiBmb3IgZXZlcnl0aGluZ1xuXG4gIG9uKGVsZW0sIHR5cGUsIGZ1bmMpO1xufVxuXG52YXIgRXZlbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBmaXhFdmVudDogZml4RXZlbnQsXG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIHRyaWdnZXI6IHRyaWdnZXIsXG4gIG9uZTogb25lLFxuICBhbnk6IGFueVxufSk7XG5cbi8qKlxuICogQGZpbGUgZm4uanNcbiAqIEBtb2R1bGUgZm5cbiAqL1xudmFyIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMID0gMzA7XG4vKipcbiAqIEJpbmQgKGEuay5hIHByb3h5IG9yIGNvbnRleHQpLiBBIHNpbXBsZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBjb250ZXh0IG9mXG4gKiBhIGZ1bmN0aW9uLlxuICpcbiAqIEl0IGFsc28gc3RvcmVzIGEgdW5pcXVlIGlkIG9uIHRoZSBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgZWFzaWx5IHJlbW92ZWQgZnJvbVxuICogZXZlbnRzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICAgIHtNaXhlZH0gY29udGV4dFxuICogICAgICAgICAgIFRoZSBvYmplY3QgdG8gYmluZCBhcyBzY29wZS5cbiAqXG4gKiBAcGFyYW0gICAge0Z1bmN0aW9ufSBmblxuICogICAgICAgICAgIFRoZSBmdW5jdGlvbiB0byBiZSBib3VuZCB0byBhIHNjb3BlLlxuICpcbiAqIEBwYXJhbSAgICB7bnVtYmVyfSBbdWlkXVxuICogICAgICAgICAgIEFuIG9wdGlvbmFsIHVuaXF1ZSBJRCBmb3IgdGhlIGZ1bmN0aW9uIHRvIGJlIHNldFxuICpcbiAqIEByZXR1cm4gICB7RnVuY3Rpb259XG4gKiAgICAgICAgICAgVGhlIG5ldyBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgYm91bmQgaW50byB0aGUgY29udGV4dCBnaXZlblxuICovXG5cbnZhciBiaW5kID0gZnVuY3Rpb24gYmluZChjb250ZXh0LCBmbiwgdWlkKSB7XG4gIC8vIE1ha2Ugc3VyZSB0aGUgZnVuY3Rpb24gaGFzIGEgdW5pcXVlIElEXG4gIGlmICghZm4uZ3VpZCkge1xuICAgIGZuLmd1aWQgPSBuZXdHVUlEKCk7XG4gIH0gLy8gQ3JlYXRlIHRoZSBuZXcgZnVuY3Rpb24gdGhhdCBjaGFuZ2VzIHRoZSBjb250ZXh0XG5cblxuICB2YXIgYm91bmQgPSBmbi5iaW5kKGNvbnRleHQpOyAvLyBBbGxvdyBmb3IgdGhlIGFiaWxpdHkgdG8gaW5kaXZpZHVhbGl6ZSB0aGlzIGZ1bmN0aW9uXG4gIC8vIE5lZWRlZCBpbiB0aGUgY2FzZSB3aGVyZSBtdWx0aXBsZSBvYmplY3RzIG1pZ2h0IHNoYXJlIHRoZSBzYW1lIHByb3RvdHlwZVxuICAvLyBJRiBib3RoIGl0ZW1zIGFkZCBhbiBldmVudCBsaXN0ZW5lciB3aXRoIHRoZSBzYW1lIGZ1bmN0aW9uLCB0aGVuIHlvdSB0cnkgdG8gcmVtb3ZlIGp1c3Qgb25lXG4gIC8vIGl0IHdpbGwgcmVtb3ZlIGJvdGggYmVjYXVzZSB0aGV5IGJvdGggaGF2ZSB0aGUgc2FtZSBndWlkLlxuICAvLyB3aGVuIHVzaW5nIHRoaXMsIHlvdSBuZWVkIHRvIHVzZSB0aGUgYmluZCBtZXRob2Qgd2hlbiB5b3UgcmVtb3ZlIHRoZSBsaXN0ZW5lciBhcyB3ZWxsLlxuICAvLyBjdXJyZW50bHkgdXNlZCBpbiB0ZXh0IHRyYWNrc1xuXG4gIGJvdW5kLmd1aWQgPSB1aWQgPyB1aWQgKyAnXycgKyBmbi5ndWlkIDogZm4uZ3VpZDtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbi8qKlxuICogV3JhcHMgdGhlIGdpdmVuIGZ1bmN0aW9uLCBgZm5gLCB3aXRoIGEgbmV3IGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmbmBcbiAqIGF0IG1vc3Qgb25jZSBwZXIgZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7RnVuY3Rpb259IGZuXG4gKiAgICAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGJlIHRocm90dGxlZC5cbiAqXG4gKiBAcGFyYW0gICAge251bWJlcn0gICB3YWl0XG4gKiAgICAgICAgICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYnkgd2hpY2ggdG8gdGhyb3R0bGUuXG4gKlxuICogQHJldHVybiAgIHtGdW5jdGlvbn1cbiAqL1xuXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiB0aHJvdHRsZShmbiwgd2FpdCkge1xuICB2YXIgbGFzdCA9IHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpO1xuXG4gIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbiB0aHJvdHRsZWQoKSB7XG4gICAgdmFyIG5vdyA9IHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgaWYgKG5vdyAtIGxhc3QgPj0gd2FpdCkge1xuICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgbGFzdCA9IG5vdztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRocm90dGxlZDtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLlxuICpcbiAqIEluc3BpcmVkIGJ5IGxvZGFzaCBhbmQgdW5kZXJzY29yZSBpbXBsZW1lbnRhdGlvbnMuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gICAge0Z1bmN0aW9ufSBmdW5jXG4gKiAgICAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIHdyYXAgd2l0aCBkZWJvdW5jZSBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0gICAge251bWJlcn0gd2FpdFxuICogICAgICAgICAgIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYWZ0ZXIgdGhlIGxhc3QgaW52b2NhdGlvbi5cbiAqXG4gKiBAcGFyYW0gICAge2Jvb2xlYW59IFtpbW1lZGlhdGVdXG4gKiAgICAgICAgICAgV2hldGhlciBvciBub3QgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiBpbW1lZGlhdGVseSB1cG9uIGNyZWF0aW9uLlxuICpcbiAqIEBwYXJhbSAgICB7T2JqZWN0fSBbY29udGV4dD13aW5kb3ddXG4gKiAgICAgICAgICAgVGhlIFwiY29udGV4dFwiIGluIHdoaWNoIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gc2hvdWxkIGRlYm91bmNlLiBGb3JcbiAqICAgICAgICAgICBleGFtcGxlLCBpZiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSB0aWVkIHRvIGEgVmlkZW8uanMgcGxheWVyLFxuICogICAgICAgICAgIHRoZSBwbGF5ZXIgY2FuIGJlIHBhc3NlZCBoZXJlLiBBbHRlcm5hdGl2ZWx5LCBkZWZhdWx0cyB0byB0aGVcbiAqICAgICAgICAgICBnbG9iYWwgYHdpbmRvd2Agb2JqZWN0LlxuICpcbiAqIEByZXR1cm4gICB7RnVuY3Rpb259XG4gKiAgICAgICAgICAgQSBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKi9cblxudmFyIGRlYm91bmNlID0gZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlLCBjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gd2luZG93JDE7XG4gIH1cblxuICB2YXIgdGltZW91dDtcblxuICB2YXIgY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGNvbnRleHQuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBudWxsO1xuICB9O1xuICAvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXRoaXMgKi9cblxuXG4gIHZhciBkZWJvdW5jZWQgPSBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIF9sYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBfbGF0ZXIgPSBudWxsO1xuXG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIXRpbWVvdXQgJiYgaW1tZWRpYXRlKSB7XG4gICAgICBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQoX2xhdGVyLCB3YWl0KTtcbiAgfTtcbiAgLyogZXNsaW50LWVuYWJsZSBjb25zaXN0ZW50LXRoaXMgKi9cblxuXG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59O1xuXG4vKipcbiAqIEBmaWxlIHNyYy9qcy9ldmVudC10YXJnZXQuanNcbiAqL1xuLyoqXG4gKiBgRXZlbnRUYXJnZXRgIGlzIGEgY2xhc3MgdGhhdCBjYW4gaGF2ZSB0aGUgc2FtZSBBUEkgYXMgdGhlIERPTSBgRXZlbnRUYXJnZXRgLiBJdFxuICogYWRkcyBzaG9ydGhhbmQgZnVuY3Rpb25zIHRoYXQgd3JhcCBhcm91bmQgbGVuZ3RoeSBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICogdGhlIGBvbmAgZnVuY3Rpb24gaXMgYSB3cmFwcGVyIGFyb3VuZCBgYWRkRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQHNlZSBbRXZlbnRUYXJnZXQgU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUV2ZW50cy9ldmVudHMuaHRtbCNFdmVudHMtRXZlbnRUYXJnZXR9XG4gKiBAY2xhc3MgRXZlbnRUYXJnZXRcbiAqL1xuXG52YXIgRXZlbnRUYXJnZXQgPSBmdW5jdGlvbiBFdmVudFRhcmdldCgpIHt9O1xuLyoqXG4gKiBBIEN1c3RvbSBET00gZXZlbnQuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gRXZlbnRUYXJnZXR+RXZlbnRcbiAqIEBzZWUgW1Byb3BlcnRpZXNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudH1cbiAqL1xuXG4vKipcbiAqIEFsbCBldmVudCBsaXN0ZW5lcnMgc2hvdWxkIGZvbGxvdyB0aGUgZm9sbG93aW5nIGZvcm1hdC5cbiAqXG4gKiBAY2FsbGJhY2sgRXZlbnRUYXJnZXR+RXZlbnRMaXN0ZW5lclxuICogQHRoaXMge0V2ZW50VGFyZ2V0fVxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gKiAgICAgICAgdGhlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW2hhc2hdXG4gKiAgICAgICAgaGFzaCBvZiBkYXRhIHNlbnQgZHVyaW5nIHRoZSBldmVudFxuICovXG5cbi8qKlxuICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgZXZlbnQgbmFtZXMgYXMga2V5cyBhbmQgYm9vbGVhbnMgYXMgdmFsdWVzLlxuICpcbiAqID4gTk9URTogSWYgYW4gZXZlbnQgbmFtZSBpcyBzZXQgdG8gYSB0cnVlIHZhbHVlIGhlcmUge0BsaW5rIEV2ZW50VGFyZ2V0I3RyaWdnZXJ9XG4gKiAgICAgICAgIHdpbGwgaGF2ZSBleHRyYSBmdW5jdGlvbmFsaXR5LiBTZWUgdGhhdCBmdW5jdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcHJvcGVydHkgRXZlbnRUYXJnZXQucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfID0ge307XG4vKipcbiAqIEFkZHMgYW4gYGV2ZW50IGxpc3RlbmVyYCB0byBhbiBpbnN0YW5jZSBvZiBhbiBgRXZlbnRUYXJnZXRgLiBBbiBgZXZlbnQgbGlzdGVuZXJgIGlzIGFcbiAqIGZ1bmN0aW9uIHRoYXQgd2lsbCBnZXQgY2FsbGVkIHdoZW4gYW4gZXZlbnQgd2l0aCBhIGNlcnRhaW4gbmFtZSBnZXRzIHRyaWdnZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdHlwZVxuICogICAgICAgIEFuIGV2ZW50IG5hbWUgb3IgYW4gYXJyYXkgb2YgZXZlbnQgbmFtZXMuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBmblxuICogICAgICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdpdGggYEV2ZW50VGFyZ2V0YHNcbiAqL1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgLy8gUmVtb3ZlIHRoZSBhZGRFdmVudExpc3RlbmVyIGFsaWFzIGJlZm9yZSBjYWxsaW5nIEV2ZW50cy5vblxuICAvLyBzbyB3ZSBkb24ndCBnZXQgaW50byBhbiBpbmZpbml0ZSB0eXBlIGxvb3BcbiAgdmFyIGFlbCA9IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcjtcblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBvbih0aGlzLCB0eXBlLCBmbik7XG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IGFlbDtcbn07XG4vKipcbiAqIEFuIGFsaWFzIG9mIHtAbGluayBFdmVudFRhcmdldCNvbn0uIEFsbG93cyBgRXZlbnRUYXJnZXRgIHRvIG1pbWljXG4gKiB0aGUgc3RhbmRhcmQgRE9NIEFQSS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBzZWUge0BsaW5rIEV2ZW50VGFyZ2V0I29ufVxuICovXG5cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUub247XG4vKipcbiAqIFJlbW92ZXMgYW4gYGV2ZW50IGxpc3RlbmVyYCBmb3IgYSBzcGVjaWZpYyBldmVudCBmcm9tIGFuIGluc3RhbmNlIG9mIGBFdmVudFRhcmdldGAuXG4gKiBUaGlzIG1ha2VzIGl0IHNvIHRoYXQgdGhlIGBldmVudCBsaXN0ZW5lcmAgd2lsbCBubyBsb25nZXIgZ2V0IGNhbGxlZCB3aGVuIHRoZVxuICogbmFtZWQgZXZlbnQgaGFwcGVucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdHlwZVxuICogICAgICAgIEFuIGV2ZW50IG5hbWUgb3IgYW4gYXJyYXkgb2YgZXZlbnQgbmFtZXMuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBmblxuICogICAgICAgIFRoZSBmdW5jdGlvbiB0byByZW1vdmUuXG4gKi9cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICBvZmYodGhpcywgdHlwZSwgZm4pO1xufTtcbi8qKlxuICogQW4gYWxpYXMgb2Yge0BsaW5rIEV2ZW50VGFyZ2V0I29mZn0uIEFsbG93cyBgRXZlbnRUYXJnZXRgIHRvIG1pbWljXG4gKiB0aGUgc3RhbmRhcmQgRE9NIEFQSS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBzZWUge0BsaW5rIEV2ZW50VGFyZ2V0I29mZn1cbiAqL1xuXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gRXZlbnRUYXJnZXQucHJvdG90eXBlLm9mZjtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGFkZCBhbiBgZXZlbnQgbGlzdGVuZXJgIHRoYXQgZ2V0cyB0cmlnZ2VyZWQgb25seSBvbmNlLiBBZnRlciB0aGVcbiAqIGZpcnN0IHRyaWdnZXIgaXQgd2lsbCBnZXQgcmVtb3ZlZC4gVGhpcyBpcyBsaWtlIGFkZGluZyBhbiBgZXZlbnQgbGlzdGVuZXJgXG4gKiB3aXRoIHtAbGluayBFdmVudFRhcmdldCNvbn0gdGhhdCBjYWxscyB7QGxpbmsgRXZlbnRUYXJnZXQjb2ZmfSBvbiBpdHNlbGYuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHR5cGVcbiAqICAgICAgICBBbiBldmVudCBuYW1lIG9yIGFuIGFycmF5IG9mIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnRMaXN0ZW5lcn0gZm5cbiAqICAgICAgICBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uY2UgZm9yIGVhY2ggZXZlbnQgbmFtZS5cbiAqL1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUub25lID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gIC8vIFJlbW92ZSB0aGUgYWRkRXZlbnRMaXN0ZW5lciBhbGlhc2luZyBFdmVudHMub25cbiAgLy8gc28gd2UgZG9uJ3QgZ2V0IGludG8gYW4gaW5maW5pdGUgdHlwZSBsb29wXG4gIHZhciBhZWwgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXI7XG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKCkge307XG5cbiAgb25lKHRoaXMsIHR5cGUsIGZuKTtcbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gYWVsO1xufTtcblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAvLyBSZW1vdmUgdGhlIGFkZEV2ZW50TGlzdGVuZXIgYWxpYXNpbmcgRXZlbnRzLm9uXG4gIC8vIHNvIHdlIGRvbid0IGdldCBpbnRvIGFuIGluZmluaXRlIHR5cGUgbG9vcFxuICB2YXIgYWVsID0gdGhpcy5hZGRFdmVudExpc3RlbmVyO1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGFueSh0aGlzLCB0eXBlLCBmbik7XG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IGFlbDtcbn07XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2F1c2VzIGFuIGV2ZW50IHRvIGhhcHBlbi4gVGhpcyB3aWxsIHRoZW4gY2F1c2UgYW55IGBldmVudCBsaXN0ZW5lcnNgXG4gKiB0aGF0IGFyZSB3YWl0aW5nIGZvciB0aGF0IGV2ZW50LCB0byBnZXQgY2FsbGVkLiBJZiB0aGVyZSBhcmUgbm8gYGV2ZW50IGxpc3RlbmVyc2BcbiAqIGZvciBhbiBldmVudCB0aGVuIG5vdGhpbmcgd2lsbCBoYXBwZW4uXG4gKlxuICogSWYgdGhlIG5hbWUgb2YgdGhlIGBFdmVudGAgdGhhdCBpcyBiZWluZyB0cmlnZ2VyZWQgaXMgaW4gYEV2ZW50VGFyZ2V0LmFsbG93ZWRFdmVudHNfYC5cbiAqIFRyaWdnZXIgd2lsbCBhbHNvIGNhbGwgdGhlIGBvbmAgKyBgdXBwZXJjYXNlRXZlbnROYW1lYCBmdW5jdGlvbi5cbiAqXG4gKiBFeGFtcGxlOlxuICogJ2NsaWNrJyBpcyBpbiBgRXZlbnRUYXJnZXQuYWxsb3dlZEV2ZW50c19gLCBzbywgdHJpZ2dlciB3aWxsIGF0dGVtcHQgdG8gY2FsbFxuICogYG9uQ2xpY2tgIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xFdmVudFRhcmdldH5FdmVudHxPYmplY3R9IGV2ZW50XG4gKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGV2ZW50LCBhbiBgRXZlbnRgLCBvciBhbiBvYmplY3Qgd2l0aCBhIGtleSBvZiB0eXBlIHNldCB0b1xuICogICAgICAgIGFuIGV2ZW50IG5hbWUuXG4gKi9cblxuXG5FdmVudFRhcmdldC5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICB2YXIgdHlwZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7IC8vIGRlcHJlY2F0aW9uXG4gIC8vIEluIGEgZnV0dXJlIHZlcnNpb24gd2Ugc2hvdWxkIGRlZmF1bHQgdGFyZ2V0IHRvIGB0aGlzYFxuICAvLyBzaW1pbGFyIHRvIGhvdyB3ZSBkZWZhdWx0IHRoZSB0YXJnZXQgdG8gYGVsZW1gIGluXG4gIC8vIGBFdmVudHMudHJpZ2dlcmAuIFJpZ2h0IG5vdyB0aGUgZGVmYXVsdCBgdGFyZ2V0YCB3aWxsIGJlXG4gIC8vIGBkb2N1bWVudGAgZHVlIHRvIHRoZSBgRXZlbnQuZml4RXZlbnRgIGNhbGwuXG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9O1xuICB9XG5cbiAgZXZlbnQgPSBmaXhFdmVudChldmVudCk7XG5cbiAgaWYgKHRoaXMuYWxsb3dlZEV2ZW50c19bdHlwZV0gJiYgdGhpc1snb24nICsgdHlwZV0pIHtcbiAgICB0aGlzWydvbicgKyB0eXBlXShldmVudCk7XG4gIH1cblxuICB0cmlnZ2VyKHRoaXMsIGV2ZW50KTtcbn07XG4vKipcbiAqIEFuIGFsaWFzIG9mIHtAbGluayBFdmVudFRhcmdldCN0cmlnZ2VyfS4gQWxsb3dzIGBFdmVudFRhcmdldGAgdG8gbWltaWNcbiAqIHRoZSBzdGFuZGFyZCBET00gQVBJLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHNlZSB7QGxpbmsgRXZlbnRUYXJnZXQjdHJpZ2dlcn1cbiAqL1xuXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gRXZlbnRUYXJnZXQucHJvdG90eXBlLnRyaWdnZXI7XG52YXIgRVZFTlRfTUFQO1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUucXVldWVUcmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgLy8gb25seSBzZXQgdXAgRVZFTlRfTUFQIGlmIGl0J2xsIGJlIHVzZWRcbiAgaWYgKCFFVkVOVF9NQVApIHtcbiAgICBFVkVOVF9NQVAgPSBuZXcgTWFwKCk7XG4gIH1cblxuICB2YXIgdHlwZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7XG4gIHZhciBtYXAgPSBFVkVOVF9NQVAuZ2V0KHRoaXMpO1xuXG4gIGlmICghbWFwKSB7XG4gICAgbWFwID0gbmV3IE1hcCgpO1xuICAgIEVWRU5UX01BUC5zZXQodGhpcywgbWFwKTtcbiAgfVxuXG4gIHZhciBvbGRUaW1lb3V0ID0gbWFwLmdldCh0eXBlKTtcbiAgbWFwW1wiZGVsZXRlXCJdKHR5cGUpO1xuICB3aW5kb3ckMS5jbGVhclRpbWVvdXQob2xkVGltZW91dCk7XG4gIHZhciB0aW1lb3V0ID0gd2luZG93JDEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgLy8gaWYgd2UgY2xlYXJlZCBvdXQgYWxsIHRpbWVvdXRzIGZvciB0aGUgY3VycmVudCB0YXJnZXQsIGRlbGV0ZSBpdHMgbWFwXG4gICAgaWYgKG1hcC5zaXplID09PSAwKSB7XG4gICAgICBtYXAgPSBudWxsO1xuICAgICAgRVZFTlRfTUFQW1wiZGVsZXRlXCJdKF90aGlzKTtcbiAgICB9XG5cbiAgICBfdGhpcy50cmlnZ2VyKGV2ZW50KTtcbiAgfSwgMCk7XG4gIG1hcC5zZXQodHlwZSwgdGltZW91dCk7XG59O1xuXG4vKipcbiAqIEBmaWxlIG1peGlucy9ldmVudGVkLmpzXG4gKiBAbW9kdWxlIGV2ZW50ZWRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCBoYXMgaGFkIHRoZSBldmVudGVkIG1peGluIGFwcGxpZWQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3RcbiAqICAgICAgICAgQW4gb2JqZWN0IHRvIHRlc3QuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBhcHBlYXJzIHRvIGJlIGV2ZW50ZWQuXG4gKi9cblxudmFyIGlzRXZlbnRlZCA9IGZ1bmN0aW9uIGlzRXZlbnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0IHx8ICEhb2JqZWN0LmV2ZW50QnVzRWxfICYmIFsnb24nLCAnb25lJywgJ29mZicsICd0cmlnZ2VyJ10uZXZlcnkoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdFtrXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfSk7XG59O1xuLyoqXG4gKiBBZGRzIGEgY2FsbGJhY2sgdG8gcnVuIGFmdGVyIHRoZSBldmVudGVkIG1peGluIGFwcGxpZWQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3RcbiAqICAgICAgICAgQW4gb2JqZWN0IHRvIEFkZFxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiAgICAgICAgIFRoZSBjYWxsYmFjayB0byBydW4uXG4gKi9cblxuXG52YXIgYWRkRXZlbnRlZENhbGxiYWNrID0gZnVuY3Rpb24gYWRkRXZlbnRlZENhbGxiYWNrKHRhcmdldCwgY2FsbGJhY2spIHtcbiAgaWYgKGlzRXZlbnRlZCh0YXJnZXQpKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRhcmdldC5ldmVudGVkQ2FsbGJhY2tzKSB7XG4gICAgICB0YXJnZXQuZXZlbnRlZENhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIHRhcmdldC5ldmVudGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICB9XG59O1xuLyoqXG4gKiBXaGV0aGVyIGEgdmFsdWUgaXMgYSB2YWxpZCBldmVudCB0eXBlIC0gbm9uLWVtcHR5IHN0cmluZyBvciBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7c3RyaW5nfEFycmF5fSB0eXBlXG4gKiAgICAgICAgIFRoZSB0eXBlIHZhbHVlIHRvIHRlc3QuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciBvciBub3QgdGhlIHR5cGUgaXMgYSB2YWxpZCBldmVudCB0eXBlLlxuICovXG5cblxudmFyIGlzVmFsaWRFdmVudFR5cGUgPSBmdW5jdGlvbiBpc1ZhbGlkRXZlbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuICgvLyBUaGUgcmVnZXggaGVyZSB2ZXJpZmllcyB0aGF0IHRoZSBgdHlwZWAgY29udGFpbnMgYXQgbGVhc3Qgb25lIG5vbi1cbiAgICAvLyB3aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAgICB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgJiYgL1xcUy8udGVzdCh0eXBlKSB8fCBBcnJheS5pc0FycmF5KHR5cGUpICYmICEhdHlwZS5sZW5ndGhcbiAgKTtcbn07XG4vKipcbiAqIFZhbGlkYXRlcyBhIHZhbHVlIHRvIGRldGVybWluZSBpZiBpdCBpcyBhIHZhbGlkIGV2ZW50IHRhcmdldC4gVGhyb3dzIGlmIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHRocm93cyB7RXJyb3J9XG4gKiAgICAgICAgIElmIHRoZSB0YXJnZXQgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgdmFsaWQgZXZlbnQgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gdGFyZ2V0XG4gKiAgICAgICAgIFRoZSBvYmplY3QgdG8gdGVzdC5cbiAqL1xuXG5cbnZhciB2YWxpZGF0ZVRhcmdldCA9IGZ1bmN0aW9uIHZhbGlkYXRlVGFyZ2V0KHRhcmdldCkge1xuICBpZiAoIXRhcmdldC5ub2RlTmFtZSAmJiAhaXNFdmVudGVkKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdGFyZ2V0OyBtdXN0IGJlIGEgRE9NIG5vZGUgb3IgZXZlbnRlZCBvYmplY3QuJyk7XG4gIH1cbn07XG4vKipcbiAqIFZhbGlkYXRlcyBhIHZhbHVlIHRvIGRldGVybWluZSBpZiBpdCBpcyBhIHZhbGlkIGV2ZW50IHRhcmdldC4gVGhyb3dzIGlmIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHRocm93cyB7RXJyb3J9XG4gKiAgICAgICAgIElmIHRoZSB0eXBlIGRvZXMgbm90IGFwcGVhciB0byBiZSBhIHZhbGlkIGV2ZW50IHR5cGUuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfEFycmF5fSB0eXBlXG4gKiAgICAgICAgIFRoZSB0eXBlIHRvIHRlc3QuXG4gKi9cblxuXG52YXIgdmFsaWRhdGVFdmVudFR5cGUgPSBmdW5jdGlvbiB2YWxpZGF0ZUV2ZW50VHlwZSh0eXBlKSB7XG4gIGlmICghaXNWYWxpZEV2ZW50VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBldmVudCB0eXBlOyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZyBvciBhcnJheS4nKTtcbiAgfVxufTtcbi8qKlxuICogVmFsaWRhdGVzIGEgdmFsdWUgdG8gZGV0ZXJtaW5lIGlmIGl0IGlzIGEgdmFsaWQgbGlzdGVuZXIuIFRocm93cyBpZiBub3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0aHJvd3Mge0Vycm9yfVxuICogICAgICAgICBJZiB0aGUgbGlzdGVuZXIgaXMgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IGxpc3RlbmVyXG4gKiAgICAgICAgIFRoZSBsaXN0ZW5lciB0byB0ZXN0LlxuICovXG5cblxudmFyIHZhbGlkYXRlTGlzdGVuZXIgPSBmdW5jdGlvbiB2YWxpZGF0ZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdGVuZXI7IG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxufTtcbi8qKlxuICogVGFrZXMgYW4gYXJyYXkgb2YgYXJndW1lbnRzIGdpdmVuIHRvIGBvbigpYCBvciBgb25lKClgLCB2YWxpZGF0ZXMgdGhlbSwgYW5kXG4gKiBub3JtYWxpemVzIHRoZW0gaW50byBhbiBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge09iamVjdH0gc2VsZlxuICogICAgICAgICBUaGUgZXZlbnRlZCBvYmplY3Qgb24gd2hpY2ggYG9uKClgIG9yIGBvbmUoKWAgd2FzIGNhbGxlZC4gVGhpc1xuICogICAgICAgICBvYmplY3Qgd2lsbCBiZSBib3VuZCBhcyB0aGUgYHRoaXNgIHZhbHVlIGZvciB0aGUgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IGFyZ3NcbiAqICAgICAgICAgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHBhc3NlZCB0byBgb24oKWAgb3IgYG9uZSgpYC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgIEFuIG9iamVjdCBjb250YWluaW5nIHVzZWZ1bCB2YWx1ZXMgZm9yIGBvbigpYCBvciBgb25lKClgIGNhbGxzLlxuICovXG5cblxudmFyIG5vcm1hbGl6ZUxpc3RlbkFyZ3MgPSBmdW5jdGlvbiBub3JtYWxpemVMaXN0ZW5BcmdzKHNlbGYsIGFyZ3MpIHtcbiAgLy8gSWYgdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXMgbGVzcyB0aGFuIDMsIHRoZSB0YXJnZXQgaXMgYWx3YXlzIHRoZVxuICAvLyBldmVudGVkIG9iamVjdCBpdHNlbGYuXG4gIHZhciBpc1RhcmdldGluZ1NlbGYgPSBhcmdzLmxlbmd0aCA8IDMgfHwgYXJnc1swXSA9PT0gc2VsZiB8fCBhcmdzWzBdID09PSBzZWxmLmV2ZW50QnVzRWxfO1xuICB2YXIgdGFyZ2V0O1xuICB2YXIgdHlwZTtcbiAgdmFyIGxpc3RlbmVyO1xuXG4gIGlmIChpc1RhcmdldGluZ1NlbGYpIHtcbiAgICB0YXJnZXQgPSBzZWxmLmV2ZW50QnVzRWxfOyAvLyBEZWFsIHdpdGggY2FzZXMgd2hlcmUgd2UgZ290IDMgYXJndW1lbnRzLCBidXQgd2UgYXJlIHN0aWxsIGxpc3RlbmluZyB0b1xuICAgIC8vIHRoZSBldmVudGVkIG9iamVjdCBpdHNlbGYuXG5cbiAgICBpZiAoYXJncy5sZW5ndGggPj0gMykge1xuICAgICAgYXJncy5zaGlmdCgpO1xuICAgIH1cblxuICAgIHR5cGUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSBhcmdzWzBdO1xuICAgIHR5cGUgPSBhcmdzWzFdO1xuICAgIGxpc3RlbmVyID0gYXJnc1syXTtcbiAgfVxuXG4gIHZhbGlkYXRlVGFyZ2V0KHRhcmdldCk7XG4gIHZhbGlkYXRlRXZlbnRUeXBlKHR5cGUpO1xuICB2YWxpZGF0ZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgbGlzdGVuZXIgPSBiaW5kKHNlbGYsIGxpc3RlbmVyKTtcbiAgcmV0dXJuIHtcbiAgICBpc1RhcmdldGluZ1NlbGY6IGlzVGFyZ2V0aW5nU2VsZixcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGxpc3RlbmVyOiBsaXN0ZW5lclxuICB9O1xufTtcbi8qKlxuICogQWRkcyB0aGUgbGlzdGVuZXIgdG8gdGhlIGV2ZW50IHR5cGUocykgb24gdGhlIHRhcmdldCwgbm9ybWFsaXppbmcgZm9yXG4gKiB0aGUgdHlwZSBvZiB0YXJnZXQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge0VsZW1lbnR8T2JqZWN0fSB0YXJnZXRcbiAqICAgICAgICAgQSBET00gbm9kZSBvciBldmVudGVkIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IG1ldGhvZFxuICogICAgICAgICBUaGUgZXZlbnQgYmluZGluZyBtZXRob2QgdG8gdXNlIChcIm9uXCIgb3IgXCJvbmVcIikuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfEFycmF5fSB0eXBlXG4gKiAgICAgICAgIE9uZSBvciBtb3JlIGV2ZW50IHR5cGUocykuXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IGxpc3RlbmVyXG4gKiAgICAgICAgIEEgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKi9cblxuXG52YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKHRhcmdldCwgbWV0aG9kLCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YWxpZGF0ZVRhcmdldCh0YXJnZXQpO1xuXG4gIGlmICh0YXJnZXQubm9kZU5hbWUpIHtcbiAgICBFdmVudHNbbWV0aG9kXSh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRbbWV0aG9kXSh0eXBlLCBsaXN0ZW5lcik7XG4gIH1cbn07XG4vKipcbiAqIENvbnRhaW5zIG1ldGhvZHMgdGhhdCBwcm92aWRlIGV2ZW50IGNhcGFiaWxpdGllcyB0byBhbiBvYmplY3Qgd2hpY2ggaXMgcGFzc2VkXG4gKiB0byB7QGxpbmsgbW9kdWxlOmV2ZW50ZWR8ZXZlbnRlZH0uXG4gKlxuICogQG1peGluIEV2ZW50ZWRNaXhpblxuICovXG5cblxudmFyIEV2ZW50ZWRNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEFkZCBhIGxpc3RlbmVyIHRvIGFuIGV2ZW50IChvciBldmVudHMpIG9uIHRoaXMgb2JqZWN0IG9yIGFub3RoZXIgZXZlbnRlZFxuICAgKiBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxFbGVtZW50fE9iamVjdH0gdGFyZ2V0T3JUeXBlXG4gICAqICAgICAgICAgSWYgdGhpcyBpcyBhIHN0cmluZyBvciBhcnJheSwgaXQgcmVwcmVzZW50cyB0aGUgZXZlbnQgdHlwZShzKVxuICAgKiAgICAgICAgIHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSBsaXN0ZW5lci5cbiAgICpcbiAgICogICAgICAgICBBbm90aGVyIGV2ZW50ZWQgb2JqZWN0IGNhbiBiZSBwYXNzZWQgaGVyZSBpbnN0ZWFkLCB3aGljaCB3aWxsXG4gICAqICAgICAgICAgY2F1c2UgdGhlIGxpc3RlbmVyIHRvIGxpc3RlbiBmb3IgZXZlbnRzIG9uIF90aGF0XyBvYmplY3QuXG4gICAqXG4gICAqICAgICAgICAgSW4gZWl0aGVyIGNhc2UsIHRoZSBsaXN0ZW5lcidzIGB0aGlzYCB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvXG4gICAqICAgICAgICAgdGhpcyBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxGdW5jdGlvbn0gdHlwZU9yTGlzdGVuZXJcbiAgICogICAgICAgICBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGEgc3RyaW5nIG9yIGFycmF5LCB0aGlzIHNob3VsZCBiZSB0aGVcbiAgICogICAgICAgICBsaXN0ZW5lciBmdW5jdGlvbi4gT3RoZXJ3aXNlLCB0aGlzIGlzIGEgc3RyaW5nIG9yIGFycmF5IG9mIGV2ZW50XG4gICAqICAgICAgICAgdHlwZShzKS5cbiAgICpcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IFtsaXN0ZW5lcl1cbiAgICogICAgICAgICBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGFub3RoZXIgZXZlbnRlZCBvYmplY3QsIHRoaXMgd2lsbCBiZVxuICAgKiAgICAgICAgIHRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgICovXG4gIG9uOiBmdW5jdGlvbiBvbigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBfbm9ybWFsaXplTGlzdGVuQXJncyA9IG5vcm1hbGl6ZUxpc3RlbkFyZ3ModGhpcywgYXJncyksXG4gICAgICAgIGlzVGFyZ2V0aW5nU2VsZiA9IF9ub3JtYWxpemVMaXN0ZW5BcmdzLmlzVGFyZ2V0aW5nU2VsZixcbiAgICAgICAgdGFyZ2V0ID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MudGFyZ2V0LFxuICAgICAgICB0eXBlID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MudHlwZSxcbiAgICAgICAgbGlzdGVuZXIgPSBfbm9ybWFsaXplTGlzdGVuQXJncy5saXN0ZW5lcjtcblxuICAgIGxpc3Rlbih0YXJnZXQsICdvbicsIHR5cGUsIGxpc3RlbmVyKTsgLy8gSWYgdGhpcyBvYmplY3QgaXMgbGlzdGVuaW5nIHRvIGFub3RoZXIgZXZlbnRlZCBvYmplY3QuXG5cbiAgICBpZiAoIWlzVGFyZ2V0aW5nU2VsZikge1xuICAgICAgLy8gSWYgdGhpcyBvYmplY3QgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAgICB2YXIgcmVtb3ZlTGlzdGVuZXJPbkRpc3Bvc2UgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lck9uRGlzcG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9mZih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIH07IC8vIFVzZSB0aGUgc2FtZSBmdW5jdGlvbiBJRCBhcyB0aGUgbGlzdGVuZXIgc28gd2UgY2FuIHJlbW92ZSBpdCBsYXRlciBpdFxuICAgICAgLy8gdXNpbmcgdGhlIElEIG9mIHRoZSBvcmlnaW5hbCBsaXN0ZW5lci5cblxuXG4gICAgICByZW1vdmVMaXN0ZW5lck9uRGlzcG9zZS5ndWlkID0gbGlzdGVuZXIuZ3VpZDsgLy8gQWRkIGEgbGlzdGVuZXIgdG8gdGhlIHRhcmdldCdzIGRpc3Bvc2UgZXZlbnQgYXMgd2VsbC4gVGhpcyBlbnN1cmVzXG4gICAgICAvLyB0aGF0IGlmIHRoZSB0YXJnZXQgaXMgZGlzcG9zZWQgQkVGT1JFIHRoaXMgb2JqZWN0LCB3ZSByZW1vdmUgdGhlXG4gICAgICAvLyByZW1vdmFsIGxpc3RlbmVyIHRoYXQgd2FzIGp1c3QgYWRkZWQuIE90aGVyd2lzZSwgd2UgY3JlYXRlIGEgbWVtb3J5IGxlYWsuXG5cbiAgICAgIHZhciByZW1vdmVSZW1vdmVyT25UYXJnZXREaXNwb3NlID0gZnVuY3Rpb24gcmVtb3ZlUmVtb3Zlck9uVGFyZ2V0RGlzcG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9mZignZGlzcG9zZScsIHJlbW92ZUxpc3RlbmVyT25EaXNwb3NlKTtcbiAgICAgIH07IC8vIFVzZSB0aGUgc2FtZSBmdW5jdGlvbiBJRCBhcyB0aGUgbGlzdGVuZXIgc28gd2UgY2FuIHJlbW92ZSBpdCBsYXRlclxuICAgICAgLy8gaXQgdXNpbmcgdGhlIElEIG9mIHRoZSBvcmlnaW5hbCBsaXN0ZW5lci5cblxuXG4gICAgICByZW1vdmVSZW1vdmVyT25UYXJnZXREaXNwb3NlLmd1aWQgPSBsaXN0ZW5lci5ndWlkO1xuICAgICAgbGlzdGVuKHRoaXMsICdvbicsICdkaXNwb3NlJywgcmVtb3ZlTGlzdGVuZXJPbkRpc3Bvc2UpO1xuICAgICAgbGlzdGVuKHRhcmdldCwgJ29uJywgJ2Rpc3Bvc2UnLCByZW1vdmVSZW1vdmVyT25UYXJnZXREaXNwb3NlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGxpc3RlbmVyIHRvIGFuIGV2ZW50IChvciBldmVudHMpIG9uIHRoaXMgb2JqZWN0IG9yIGFub3RoZXIgZXZlbnRlZFxuICAgKiBvYmplY3QuIFRoZSBsaXN0ZW5lciB3aWxsIGJlIGNhbGxlZCBvbmNlIHBlciBldmVudCBhbmQgdGhlbiByZW1vdmVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl8RWxlbWVudHxPYmplY3R9IHRhcmdldE9yVHlwZVxuICAgKiAgICAgICAgIElmIHRoaXMgaXMgYSBzdHJpbmcgb3IgYXJyYXksIGl0IHJlcHJlc2VudHMgdGhlIGV2ZW50IHR5cGUocylcbiAgICogICAgICAgICB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgbGlzdGVuZXIuXG4gICAqXG4gICAqICAgICAgICAgQW5vdGhlciBldmVudGVkIG9iamVjdCBjYW4gYmUgcGFzc2VkIGhlcmUgaW5zdGVhZCwgd2hpY2ggd2lsbFxuICAgKiAgICAgICAgIGNhdXNlIHRoZSBsaXN0ZW5lciB0byBsaXN0ZW4gZm9yIGV2ZW50cyBvbiBfdGhhdF8gb2JqZWN0LlxuICAgKlxuICAgKiAgICAgICAgIEluIGVpdGhlciBjYXNlLCB0aGUgbGlzdGVuZXIncyBgdGhpc2AgdmFsdWUgd2lsbCBiZSBib3VuZCB0b1xuICAgKiAgICAgICAgIHRoaXMgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl8RnVuY3Rpb259IHR5cGVPckxpc3RlbmVyXG4gICAqICAgICAgICAgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZyBvciBhcnJheSwgdGhpcyBzaG91bGQgYmUgdGhlXG4gICAqICAgICAgICAgbGlzdGVuZXIgZnVuY3Rpb24uIE90aGVyd2lzZSwgdGhpcyBpcyBhIHN0cmluZyBvciBhcnJheSBvZiBldmVudFxuICAgKiAgICAgICAgIHR5cGUocykuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbbGlzdGVuZXJdXG4gICAqICAgICAgICAgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhbm90aGVyIGV2ZW50ZWQgb2JqZWN0LCB0aGlzIHdpbGwgYmVcbiAgICogICAgICAgICB0aGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gICAqL1xuICBvbmU6IGZ1bmN0aW9uIG9uZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciBfbm9ybWFsaXplTGlzdGVuQXJnczIgPSBub3JtYWxpemVMaXN0ZW5BcmdzKHRoaXMsIGFyZ3MpLFxuICAgICAgICBpc1RhcmdldGluZ1NlbGYgPSBfbm9ybWFsaXplTGlzdGVuQXJnczIuaXNUYXJnZXRpbmdTZWxmLFxuICAgICAgICB0YXJnZXQgPSBfbm9ybWFsaXplTGlzdGVuQXJnczIudGFyZ2V0LFxuICAgICAgICB0eXBlID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MyLnR5cGUsXG4gICAgICAgIGxpc3RlbmVyID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MyLmxpc3RlbmVyOyAvLyBUYXJnZXRpbmcgdGhpcyBldmVudGVkIG9iamVjdC5cblxuXG4gICAgaWYgKGlzVGFyZ2V0aW5nU2VsZikge1xuICAgICAgbGlzdGVuKHRhcmdldCwgJ29uZScsIHR5cGUsIGxpc3RlbmVyKTsgLy8gVGFyZ2V0aW5nIGFub3RoZXIgZXZlbnRlZCBvYmplY3QuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IFRoaXMgd3JhcHBlciBpcyBpbmNvcnJlY3QhIEl0IHNob3VsZCBvbmx5XG4gICAgICAvLyAgICAgICByZW1vdmUgdGhlIHdyYXBwZXIgZm9yIHRoZSBldmVudCB0eXBlIHRoYXQgY2FsbGVkIGl0LlxuICAgICAgLy8gICAgICAgSW5zdGVhZCBhbGwgbGlzdG5lcnMgYXJlIHJlbW92ZWQgb24gdGhlIGZpcnN0IHRyaWdnZXIhXG4gICAgICAvLyAgICAgICBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzU5NjJcbiAgICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgX3RoaXMyLm9mZih0YXJnZXQsIHR5cGUsIHdyYXBwZXIpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgbGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgICBsYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXIuYXBwbHkobnVsbCwgbGFyZ3MpO1xuICAgICAgfTsgLy8gVXNlIHRoZSBzYW1lIGZ1bmN0aW9uIElEIGFzIHRoZSBsaXN0ZW5lciBzbyB3ZSBjYW4gcmVtb3ZlIGl0IGxhdGVyXG4gICAgICAvLyBpdCB1c2luZyB0aGUgSUQgb2YgdGhlIG9yaWdpbmFsIGxpc3RlbmVyLlxuXG5cbiAgICAgIHdyYXBwZXIuZ3VpZCA9IGxpc3RlbmVyLmd1aWQ7XG4gICAgICBsaXN0ZW4odGFyZ2V0LCAnb25lJywgdHlwZSwgd3JhcHBlcik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBsaXN0ZW5lciB0byBhbiBldmVudCAob3IgZXZlbnRzKSBvbiB0aGlzIG9iamVjdCBvciBhbm90aGVyIGV2ZW50ZWRcbiAgICogb2JqZWN0LiBUaGUgbGlzdGVuZXIgd2lsbCBvbmx5IGJlIGNhbGxlZCBvbmNlIGZvciB0aGUgZmlyc3QgZXZlbnQgdGhhdCBpcyB0cmlnZ2VyZWRcbiAgICogdGhlbiByZW1vdmVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl8RWxlbWVudHxPYmplY3R9IHRhcmdldE9yVHlwZVxuICAgKiAgICAgICAgIElmIHRoaXMgaXMgYSBzdHJpbmcgb3IgYXJyYXksIGl0IHJlcHJlc2VudHMgdGhlIGV2ZW50IHR5cGUocylcbiAgICogICAgICAgICB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgbGlzdGVuZXIuXG4gICAqXG4gICAqICAgICAgICAgQW5vdGhlciBldmVudGVkIG9iamVjdCBjYW4gYmUgcGFzc2VkIGhlcmUgaW5zdGVhZCwgd2hpY2ggd2lsbFxuICAgKiAgICAgICAgIGNhdXNlIHRoZSBsaXN0ZW5lciB0byBsaXN0ZW4gZm9yIGV2ZW50cyBvbiBfdGhhdF8gb2JqZWN0LlxuICAgKlxuICAgKiAgICAgICAgIEluIGVpdGhlciBjYXNlLCB0aGUgbGlzdGVuZXIncyBgdGhpc2AgdmFsdWUgd2lsbCBiZSBib3VuZCB0b1xuICAgKiAgICAgICAgIHRoaXMgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl8RnVuY3Rpb259IHR5cGVPckxpc3RlbmVyXG4gICAqICAgICAgICAgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZyBvciBhcnJheSwgdGhpcyBzaG91bGQgYmUgdGhlXG4gICAqICAgICAgICAgbGlzdGVuZXIgZnVuY3Rpb24uIE90aGVyd2lzZSwgdGhpcyBpcyBhIHN0cmluZyBvciBhcnJheSBvZiBldmVudFxuICAgKiAgICAgICAgIHR5cGUocykuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbbGlzdGVuZXJdXG4gICAqICAgICAgICAgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhbm90aGVyIGV2ZW50ZWQgb2JqZWN0LCB0aGlzIHdpbGwgYmVcbiAgICogICAgICAgICB0aGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gICAqL1xuICBhbnk6IGZ1bmN0aW9uIGFueSgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgIH1cblxuICAgIHZhciBfbm9ybWFsaXplTGlzdGVuQXJnczMgPSBub3JtYWxpemVMaXN0ZW5BcmdzKHRoaXMsIGFyZ3MpLFxuICAgICAgICBpc1RhcmdldGluZ1NlbGYgPSBfbm9ybWFsaXplTGlzdGVuQXJnczMuaXNUYXJnZXRpbmdTZWxmLFxuICAgICAgICB0YXJnZXQgPSBfbm9ybWFsaXplTGlzdGVuQXJnczMudGFyZ2V0LFxuICAgICAgICB0eXBlID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MzLnR5cGUsXG4gICAgICAgIGxpc3RlbmVyID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MzLmxpc3RlbmVyOyAvLyBUYXJnZXRpbmcgdGhpcyBldmVudGVkIG9iamVjdC5cblxuXG4gICAgaWYgKGlzVGFyZ2V0aW5nU2VsZikge1xuICAgICAgbGlzdGVuKHRhcmdldCwgJ2FueScsIHR5cGUsIGxpc3RlbmVyKTsgLy8gVGFyZ2V0aW5nIGFub3RoZXIgZXZlbnRlZCBvYmplY3QuXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgX3RoaXMzLm9mZih0YXJnZXQsIHR5cGUsIHdyYXBwZXIpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgbGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgICBsYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXIuYXBwbHkobnVsbCwgbGFyZ3MpO1xuICAgICAgfTsgLy8gVXNlIHRoZSBzYW1lIGZ1bmN0aW9uIElEIGFzIHRoZSBsaXN0ZW5lciBzbyB3ZSBjYW4gcmVtb3ZlIGl0IGxhdGVyXG4gICAgICAvLyBpdCB1c2luZyB0aGUgSUQgb2YgdGhlIG9yaWdpbmFsIGxpc3RlbmVyLlxuXG5cbiAgICAgIHdyYXBwZXIuZ3VpZCA9IGxpc3RlbmVyLmd1aWQ7XG4gICAgICBsaXN0ZW4odGFyZ2V0LCAnYW55JywgdHlwZSwgd3JhcHBlcik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGxpc3RlbmVyKHMpIGZyb20gZXZlbnQocykgb24gYW4gZXZlbnRlZCBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxFbGVtZW50fE9iamVjdH0gW3RhcmdldE9yVHlwZV1cbiAgICogICAgICAgICBJZiB0aGlzIGlzIGEgc3RyaW5nIG9yIGFycmF5LCBpdCByZXByZXNlbnRzIHRoZSBldmVudCB0eXBlKHMpLlxuICAgKlxuICAgKiAgICAgICAgIEFub3RoZXIgZXZlbnRlZCBvYmplY3QgY2FuIGJlIHBhc3NlZCBoZXJlIGluc3RlYWQsIGluIHdoaWNoIGNhc2VcbiAgICogICAgICAgICBBTEwgMyBhcmd1bWVudHMgYXJlIF9yZXF1aXJlZF8uXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxGdW5jdGlvbn0gW3R5cGVPckxpc3RlbmVyXVxuICAgKiAgICAgICAgIElmIHRoZSBmaXJzdCBhcmd1bWVudCB3YXMgYSBzdHJpbmcgb3IgYXJyYXksIHRoaXMgbWF5IGJlIHRoZVxuICAgKiAgICAgICAgIGxpc3RlbmVyIGZ1bmN0aW9uLiBPdGhlcndpc2UsIHRoaXMgaXMgYSBzdHJpbmcgb3IgYXJyYXkgb2YgZXZlbnRcbiAgICogICAgICAgICB0eXBlKHMpLlxuICAgKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gW2xpc3RlbmVyXVxuICAgKiAgICAgICAgIElmIHRoZSBmaXJzdCBhcmd1bWVudCB3YXMgYW5vdGhlciBldmVudGVkIG9iamVjdCwgdGhpcyB3aWxsIGJlXG4gICAqICAgICAgICAgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uOyBvdGhlcndpc2UsIF9hbGxfIGxpc3RlbmVycyBib3VuZCB0byB0aGVcbiAgICogICAgICAgICBldmVudCB0eXBlKHMpIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICovXG4gIG9mZjogZnVuY3Rpb24gb2ZmJDEodGFyZ2V0T3JUeXBlLCB0eXBlT3JMaXN0ZW5lciwgbGlzdGVuZXIpIHtcbiAgICAvLyBUYXJnZXRpbmcgdGhpcyBldmVudGVkIG9iamVjdC5cbiAgICBpZiAoIXRhcmdldE9yVHlwZSB8fCBpc1ZhbGlkRXZlbnRUeXBlKHRhcmdldE9yVHlwZSkpIHtcbiAgICAgIG9mZih0aGlzLmV2ZW50QnVzRWxfLCB0YXJnZXRPclR5cGUsIHR5cGVPckxpc3RlbmVyKTsgLy8gVGFyZ2V0aW5nIGFub3RoZXIgZXZlbnRlZCBvYmplY3QuXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRPclR5cGU7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVPckxpc3RlbmVyOyAvLyBGYWlsIGZhc3QgYW5kIGluIGEgbWVhbmluZ2Z1bCB3YXkhXG5cbiAgICAgIHZhbGlkYXRlVGFyZ2V0KHRhcmdldCk7XG4gICAgICB2YWxpZGF0ZUV2ZW50VHlwZSh0eXBlKTtcbiAgICAgIHZhbGlkYXRlTGlzdGVuZXIobGlzdGVuZXIpOyAvLyBFbnN1cmUgdGhlcmUncyBhdCBsZWFzdCBhIGd1aWQsIGV2ZW4gaWYgdGhlIGZ1bmN0aW9uIGhhc24ndCBiZWVuIHVzZWRcblxuICAgICAgbGlzdGVuZXIgPSBiaW5kKHRoaXMsIGxpc3RlbmVyKTsgLy8gUmVtb3ZlIHRoZSBkaXNwb3NlIGxpc3RlbmVyIG9uIHRoaXMgZXZlbnRlZCBvYmplY3QsIHdoaWNoIHdhcyBnaXZlblxuICAgICAgLy8gdGhlIHNhbWUgZ3VpZCBhcyB0aGUgZXZlbnQgbGlzdGVuZXIgaW4gb24oKS5cblxuICAgICAgdGhpcy5vZmYoJ2Rpc3Bvc2UnLCBsaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0YXJnZXQubm9kZU5hbWUpIHtcbiAgICAgICAgb2ZmKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICBvZmYodGFyZ2V0LCAnZGlzcG9zZScsIGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNFdmVudGVkKHRhcmdldCkpIHtcbiAgICAgICAgdGFyZ2V0Lm9mZih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIHRhcmdldC5vZmYoJ2Rpc3Bvc2UnLCBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaXJlIGFuIGV2ZW50IG9uIHRoaXMgZXZlbnRlZCBvYmplY3QsIGNhdXNpbmcgaXRzIGxpc3RlbmVycyB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd8T2JqZWN0fSBldmVudFxuICAgKiAgICAgICAgICBBbiBldmVudCB0eXBlIG9yIGFuIG9iamVjdCB3aXRoIGEgdHlwZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtICAge09iamVjdH0gW2hhc2hdXG4gICAqICAgICAgICAgIEFuIGFkZGl0aW9uYWwgb2JqZWN0IHRvIHBhc3MgYWxvbmcgdG8gbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgZGVmYXVsdCBiZWhhdmlvciB3YXMgcHJldmVudGVkLlxuICAgKi9cbiAgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlciQxKGV2ZW50LCBoYXNoKSB7XG4gICAgcmV0dXJuIHRyaWdnZXIodGhpcy5ldmVudEJ1c0VsXywgZXZlbnQsIGhhc2gpO1xuICB9XG59O1xuLyoqXG4gKiBBcHBsaWVzIHtAbGluayBtb2R1bGU6ZXZlbnRlZH5FdmVudGVkTWl4aW58RXZlbnRlZE1peGlufSB0byBhIHRhcmdldCBvYmplY3QuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB0YXJnZXRcbiAqICAgICAgICAgVGhlIG9iamVjdCB0byB3aGljaCB0byBhZGQgZXZlbnQgbWV0aG9kcy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogICAgICAgICBPcHRpb25zIGZvciBjdXN0b21pemluZyB0aGUgbWl4aW4gYmVoYXZpb3IuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBbb3B0aW9ucy5ldmVudEJ1c0tleV1cbiAqICAgICAgICAgQnkgZGVmYXVsdCwgYWRkcyBhIGBldmVudEJ1c0VsX2AgRE9NIGVsZW1lbnQgdG8gdGhlIHRhcmdldCBvYmplY3QsXG4gKiAgICAgICAgIHdoaWNoIGlzIHVzZWQgYXMgYW4gZXZlbnQgYnVzLiBJZiB0aGUgdGFyZ2V0IG9iamVjdCBhbHJlYWR5IGhhcyBhXG4gKiAgICAgICAgIERPTSBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQsIHBhc3MgaXRzIGtleSBoZXJlLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgVGhlIHRhcmdldCBvYmplY3QuXG4gKi9cblxuZnVuY3Rpb24gZXZlbnRlZCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBldmVudEJ1c0tleSA9IF9vcHRpb25zLmV2ZW50QnVzS2V5OyAvLyBTZXQgb3IgY3JlYXRlIHRoZSBldmVudEJ1c0VsXy5cblxuICBpZiAoZXZlbnRCdXNLZXkpIHtcbiAgICBpZiAoIXRhcmdldFtldmVudEJ1c0tleV0ubm9kZU5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBldmVudEJ1c0tleSBcXFwiXCIgKyBldmVudEJ1c0tleSArIFwiXFxcIiBkb2VzIG5vdCByZWZlciB0byBhbiBlbGVtZW50LlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuZXZlbnRCdXNFbF8gPSB0YXJnZXRbZXZlbnRCdXNLZXldO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5ldmVudEJ1c0VsXyA9IGNyZWF0ZUVsKCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWV2ZW50LWJ1cydcbiAgICB9KTtcbiAgfVxuXG4gIGFzc2lnbih0YXJnZXQsIEV2ZW50ZWRNaXhpbik7XG5cbiAgaWYgKHRhcmdldC5ldmVudGVkQ2FsbGJhY2tzKSB7XG4gICAgdGFyZ2V0LmV2ZW50ZWRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0gLy8gV2hlbiBhbnkgZXZlbnRlZCBvYmplY3QgaXMgZGlzcG9zZWQsIGl0IHJlbW92ZXMgYWxsIGl0cyBsaXN0ZW5lcnMuXG5cblxuICB0YXJnZXQub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGFyZ2V0Lm9mZigpO1xuICAgIHdpbmRvdyQxLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGFyZ2V0LmV2ZW50QnVzRWxfID0gbnVsbDtcbiAgICB9LCAwKTtcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQGZpbGUgbWl4aW5zL3N0YXRlZnVsLmpzXG4gKiBAbW9kdWxlIHN0YXRlZnVsXG4gKi9cbi8qKlxuICogQ29udGFpbnMgbWV0aG9kcyB0aGF0IHByb3ZpZGUgc3RhdGVmdWxuZXNzIHRvIGFuIG9iamVjdCB3aGljaCBpcyBwYXNzZWRcbiAqIHRvIHtAbGluayBtb2R1bGU6c3RhdGVmdWx9LlxuICpcbiAqIEBtaXhpbiBTdGF0ZWZ1bE1peGluXG4gKi9cblxudmFyIFN0YXRlZnVsTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBBIGhhc2ggY29udGFpbmluZyBhcmJpdHJhcnkga2V5cyBhbmQgdmFsdWVzIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2ZcbiAgICogdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRlOiB7fSxcblxuICAvKipcbiAgICogU2V0IHRoZSBzdGF0ZSBvZiBhbiBvYmplY3QgYnkgbXV0YXRpbmcgaXRzXG4gICAqIHtAbGluayBtb2R1bGU6c3RhdGVmdWx+U3RhdGVmdWxNaXhpbi5zdGF0ZXxzdGF0ZX0gb2JqZWN0IGluIHBsYWNlLlxuICAgKlxuICAgKiBAZmlyZXMgICBtb2R1bGU6c3RhdGVmdWx+U3RhdGVmdWxNaXhpbiNzdGF0ZWNoYW5nZWRcbiAgICogQHBhcmFtICAge09iamVjdHxGdW5jdGlvbn0gc3RhdGVVcGRhdGVzXG4gICAqICAgICAgICAgIEEgbmV3IHNldCBvZiBwcm9wZXJ0aWVzIHRvIHNoYWxsb3ctbWVyZ2UgaW50byB0aGUgcGx1Z2luIHN0YXRlLlxuICAgKiAgICAgICAgICBDYW4gYmUgYSBwbGFpbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiByZXR1cm5pbmcgYSBwbGFpbiBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdHx1bmRlZmluZWR9XG4gICAqICAgICAgICAgIEFuIG9iamVjdCBjb250YWluaW5nIGNoYW5nZXMgdGhhdCBvY2N1cnJlZC4gSWYgbm8gY2hhbmdlc1xuICAgKiAgICAgICAgICBvY2N1cnJlZCwgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICovXG4gIHNldFN0YXRlOiBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZVVwZGF0ZXMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gU3VwcG9ydCBwcm92aWRpbmcgdGhlIGBzdGF0ZVVwZGF0ZXNgIHN0YXRlIGFzIGEgZnVuY3Rpb24uXG4gICAgaWYgKHR5cGVvZiBzdGF0ZVVwZGF0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlVXBkYXRlcyA9IHN0YXRlVXBkYXRlcygpO1xuICAgIH1cblxuICAgIHZhciBjaGFuZ2VzO1xuICAgIGVhY2goc3RhdGVVcGRhdGVzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgLy8gUmVjb3JkIHRoZSBjaGFuZ2UgaWYgdGhlIHZhbHVlIGlzIGRpZmZlcmVudCBmcm9tIHdoYXQncyBpbiB0aGVcbiAgICAgIC8vIGN1cnJlbnQgc3RhdGUuXG4gICAgICBpZiAoX3RoaXMuc3RhdGVba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgY2hhbmdlcyA9IGNoYW5nZXMgfHwge307XG4gICAgICAgIGNoYW5nZXNba2V5XSA9IHtcbiAgICAgICAgICBmcm9tOiBfdGhpcy5zdGF0ZVtrZXldLFxuICAgICAgICAgIHRvOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdGF0ZVtrZXldID0gdmFsdWU7XG4gICAgfSk7IC8vIE9ubHkgdHJpZ2dlciBcInN0YXRlY2hhbmdlXCIgaWYgdGhlcmUgd2VyZSBjaGFuZ2VzIEFORCB3ZSBoYXZlIGEgdHJpZ2dlclxuICAgIC8vIGZ1bmN0aW9uLiBUaGlzIGFsbG93cyB1cyB0byBub3QgcmVxdWlyZSB0aGF0IHRoZSB0YXJnZXQgb2JqZWN0IGJlIGFuXG4gICAgLy8gZXZlbnRlZCBvYmplY3QuXG5cbiAgICBpZiAoY2hhbmdlcyAmJiBpc0V2ZW50ZWQodGhpcykpIHtcbiAgICAgIC8qKlxuICAgICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIGJvdGhcbiAgICAgICAqIHtAbGluayBtb2R1bGU6c3RhdGVmdWx8c3RhdGVmdWx9IGFuZCB7QGxpbmsgbW9kdWxlOmV2ZW50ZWR8ZXZlbnRlZH1cbiAgICAgICAqIGluZGljYXRpbmcgdGhhdCBpdHMgc3RhdGUgaGFzIGNoYW5nZWQuXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50ICAgIG1vZHVsZTpzdGF0ZWZ1bH5TdGF0ZWZ1bE1peGluI3N0YXRlY2hhbmdlZFxuICAgICAgICogQHR5cGUgICAgIHtPYmplY3R9XG4gICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gY2hhbmdlc1xuICAgICAgICogICAgICAgICAgIEEgaGFzaCBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBjaGFuZ2VkIGFuZFxuICAgICAgICogICAgICAgICAgIHRoZSB2YWx1ZXMgdGhleSB3ZXJlIGNoYW5nZWQgYGZyb21gIGFuZCBgdG9gLlxuICAgICAgICovXG4gICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICBjaGFuZ2VzOiBjaGFuZ2VzLFxuICAgICAgICB0eXBlOiAnc3RhdGVjaGFuZ2VkJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYW5nZXM7XG4gIH1cbn07XG4vKipcbiAqIEFwcGxpZXMge0BsaW5rIG1vZHVsZTpzdGF0ZWZ1bH5TdGF0ZWZ1bE1peGlufFN0YXRlZnVsTWl4aW59IHRvIGEgdGFyZ2V0XG4gKiBvYmplY3QuXG4gKlxuICogSWYgdGhlIHRhcmdldCBvYmplY3QgaXMge0BsaW5rIG1vZHVsZTpldmVudGVkfGV2ZW50ZWR9IGFuZCBoYXMgYVxuICogYGhhbmRsZVN0YXRlQ2hhbmdlZGAgbWV0aG9kLCB0aGF0IG1ldGhvZCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgYm91bmQgdG8gdGhlXG4gKiBgc3RhdGVjaGFuZ2VkYCBldmVudCBvbiBpdHNlbGYuXG4gKlxuICogQHBhcmFtICAge09iamVjdH0gdGFyZ2V0XG4gKiAgICAgICAgICBUaGUgb2JqZWN0IHRvIGJlIG1hZGUgc3RhdGVmdWwuXG4gKlxuICogQHBhcmFtICAge09iamVjdH0gW2RlZmF1bHRTdGF0ZV1cbiAqICAgICAgICAgIEEgZGVmYXVsdCBzZXQgb2YgcHJvcGVydGllcyB0byBwb3B1bGF0ZSB0aGUgbmV3bHktc3RhdGVmdWwgb2JqZWN0J3NcbiAqICAgICAgICAgIGBzdGF0ZWAgcHJvcGVydHkuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICAgUmV0dXJucyB0aGUgYHRhcmdldGAuXG4gKi9cblxuZnVuY3Rpb24gc3RhdGVmdWwodGFyZ2V0LCBkZWZhdWx0U3RhdGUpIHtcbiAgYXNzaWduKHRhcmdldCwgU3RhdGVmdWxNaXhpbik7IC8vIFRoaXMgaGFwcGVucyBhZnRlciB0aGUgbWl4aW5nLWluIGJlY2F1c2Ugd2UgbmVlZCB0byByZXBsYWNlIHRoZSBgc3RhdGVgXG4gIC8vIGFkZGVkIGluIHRoYXQgc3RlcC5cblxuICB0YXJnZXQuc3RhdGUgPSBhc3NpZ24oe30sIHRhcmdldC5zdGF0ZSwgZGVmYXVsdFN0YXRlKTsgLy8gQXV0by1iaW5kIHRoZSBgaGFuZGxlU3RhdGVDaGFuZ2VkYCBtZXRob2Qgb2YgdGhlIHRhcmdldCBvYmplY3QgaWYgaXQgZXhpc3RzLlxuXG4gIGlmICh0eXBlb2YgdGFyZ2V0LmhhbmRsZVN0YXRlQ2hhbmdlZCA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0V2ZW50ZWQodGFyZ2V0KSkge1xuICAgIHRhcmdldC5vbignc3RhdGVjaGFuZ2VkJywgdGFyZ2V0LmhhbmRsZVN0YXRlQ2hhbmdlZCk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIEBmaWxlIHN0cmluZy1jYXNlcy5qc1xuICogQG1vZHVsZSB0by1sb3dlci1jYXNlXG4gKi9cblxuLyoqXG4gKiBMb3dlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiAgICAgICAgU3RyaW5nIHRvIGJlIGxvd2VyY2FzZWRcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSBzdHJpbmcgd2l0aCBhIGxvd2VyY2FzZWQgZmlyc3QgbGV0dGVyXG4gKi9cbnZhciB0b0xvd2VyQ2FzZSA9IGZ1bmN0aW9uIHRvTG93ZXJDYXNlKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8uLywgZnVuY3Rpb24gKHcpIHtcbiAgICByZXR1cm4gdy50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn07XG4vKipcbiAqIFVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqICAgICAgICBTdHJpbmcgdG8gYmUgdXBwZXJjYXNlZFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgVGhlIHN0cmluZyB3aXRoIGFuIHVwcGVyY2FzZWQgZmlyc3QgbGV0dGVyXG4gKi9cblxudmFyIHRvVGl0bGVDYXNlID0gZnVuY3Rpb24gdG9UaXRsZUNhc2Uoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLy4vLCBmdW5jdGlvbiAodykge1xuICAgIHJldHVybiB3LnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufTtcbi8qKlxuICogQ29tcGFyZXMgdGhlIFRpdGxlQ2FzZSB2ZXJzaW9ucyBvZiB0aGUgdHdvIHN0cmluZ3MgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxXG4gKiAgICAgICAgVGhlIGZpcnN0IHN0cmluZyB0byBjb21wYXJlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjJcbiAqICAgICAgICBUaGUgc2Vjb25kIHN0cmluZyB0byBjb21wYXJlXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciB0aGUgVGl0bGVDYXNlIHZlcnNpb25zIG9mIHRoZSBzdHJpbmdzIGFyZSBlcXVhbFxuICovXG5cbnZhciB0aXRsZUNhc2VFcXVhbHMgPSBmdW5jdGlvbiB0aXRsZUNhc2VFcXVhbHMoc3RyMSwgc3RyMikge1xuICByZXR1cm4gdG9UaXRsZUNhc2Uoc3RyMSkgPT09IHRvVGl0bGVDYXNlKHN0cjIpO1xufTtcblxuLyoqXG4gKiBAZmlsZSBtZXJnZS1vcHRpb25zLmpzXG4gKiBAbW9kdWxlIG1lcmdlLW9wdGlvbnNcbiAqL1xuLyoqXG4gKiBNZXJnZSB0d28gb2JqZWN0cyByZWN1cnNpdmVseS5cbiAqXG4gKiBQZXJmb3JtcyBhIGRlZXAgbWVyZ2UgbGlrZVxuICoge0BsaW5rIGh0dHBzOi8vbG9kYXNoLmNvbS9kb2NzLzQuMTcuMTAjbWVyZ2V8bG9kYXNoLm1lcmdlfSwgYnV0IG9ubHkgbWVyZ2VzXG4gKiBwbGFpbiBvYmplY3RzIChub3QgYXJyYXlzLCBlbGVtZW50cywgb3IgYW55dGhpbmcgZWxzZSkuXG4gKlxuICogTm9uLXBsYWluIG9iamVjdCB2YWx1ZXMgd2lsbCBiZSBjb3BpZWQgZGlyZWN0bHkgZnJvbSB0aGUgcmlnaHQtbW9zdFxuICogYXJndW1lbnQuXG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtICAge09iamVjdFtdfSBzb3VyY2VzXG4gKiAgICAgICAgICBPbmUgb3IgbW9yZSBvYmplY3RzIHRvIG1lcmdlIGludG8gYSBuZXcgb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgIEEgbmV3IG9iamVjdCB0aGF0IGlzIHRoZSBtZXJnZWQgcmVzdWx0IG9mIGFsbCBzb3VyY2VzLlxuICovXG5cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucygpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHNvdXJjZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWFjaChzb3VyY2UsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoIWlzUGxhaW4odmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1BsYWluKHJlc3VsdFtrZXldKSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IHt9O1xuICAgICAgfVxuXG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlT3B0aW9ucyhyZXN1bHRba2V5XSwgdmFsdWUpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQbGF5ZXIgQ29tcG9uZW50IC0gQmFzZSBjbGFzcyBmb3IgYWxsIFVJIG9iamVjdHNcbiAqXG4gKiBAZmlsZSBjb21wb25lbnQuanNcbiAqL1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgVUkgQ29tcG9uZW50cy5cbiAqIENvbXBvbmVudHMgYXJlIFVJIG9iamVjdHMgd2hpY2ggcmVwcmVzZW50IGJvdGggYSBqYXZhc2NyaXB0IG9iamVjdCBhbmQgYW4gZWxlbWVudFxuICogaW4gdGhlIERPTS4gVGhleSBjYW4gYmUgY2hpbGRyZW4gb2Ygb3RoZXIgY29tcG9uZW50cywgYW5kIGNhbiBoYXZlXG4gKiBjaGlsZHJlbiB0aGVtc2VsdmVzLlxuICpcbiAqIENvbXBvbmVudHMgY2FuIGFsc28gdXNlIG1ldGhvZHMgZnJvbSB7QGxpbmsgRXZlbnRUYXJnZXR9XG4gKi9cblxudmFyIENvbXBvbmVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBjb21wb25lbnQgaXMgcmVhZHkuIERvZXMgbm90IGhhdmUgYW55XG4gICAqIHBhcmFtdGVycyBhbmQgYW55IGNhbGxiYWNrIHZhbHVlIHdpbGwgYmUgaWdub3JlZC5cbiAgICpcbiAgICogQGNhbGxiYWNrIENvbXBvbmVudH5SZWFkeUNhbGxiYWNrXG4gICAqIEB0aGlzIENvbXBvbmVudFxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3RbXX0gW29wdGlvbnMuY2hpbGRyZW5dXG4gICAqICAgICAgICBBbiBhcnJheSBvZiBjaGlsZHJlbiBvYmplY3RzIHRvIGludGlhbGl6ZSB0aGlzIGNvbXBvbmVudCB3aXRoLiBDaGlsZHJlbiBvYmplY3RzIGhhdmVcbiAgICogICAgICAgIGEgbmFtZSBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgdXNlZCBpZiBtb3JlIHRoYW4gb25lIGNvbXBvbmVudCBvZiB0aGUgc2FtZSB0eXBlIG5lZWRzIHRvIGJlXG4gICAqICAgICAgICBhZGRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgRnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHRoZSBgQ29tcG9uZW50YCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIENvbXBvbmVudChwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgLy8gVGhlIGNvbXBvbmVudCBtaWdodCBiZSB0aGUgcGxheWVyIGl0c2VsZiBhbmQgd2UgY2FuJ3QgcGFzcyBgdGhpc2AgdG8gc3VwZXJcbiAgICBpZiAoIXBsYXllciAmJiB0aGlzLnBsYXkpIHtcbiAgICAgIHRoaXMucGxheWVyXyA9IHBsYXllciA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfID0gcGxheWVyO1xuICAgIH0gLy8gSG9sZCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY29tcG9uZW50IHZpYSBgYWRkQ2hpbGRgIG1ldGhvZFxuXG5cbiAgICB0aGlzLnBhcmVudENvbXBvbmVudF8gPSBudWxsOyAvLyBNYWtlIGEgY29weSBvZiBwcm90b3R5cGUub3B0aW9uc18gdG8gcHJvdGVjdCBhZ2FpbnN0IG92ZXJyaWRpbmcgZGVmYXVsdHNcblxuICAgIHRoaXMub3B0aW9uc18gPSBtZXJnZU9wdGlvbnMoe30sIHRoaXMub3B0aW9uc18pOyAvLyBVcGRhdGVkIG9wdGlvbnMgd2l0aCBzdXBwbGllZCBvcHRpb25zXG5cbiAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zXyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnNfLCBvcHRpb25zKTsgLy8gR2V0IElEIGZyb20gb3B0aW9ucyBvciBvcHRpb25zIGVsZW1lbnQgaWYgb25lIGlzIHN1cHBsaWVkXG5cbiAgICB0aGlzLmlkXyA9IG9wdGlvbnMuaWQgfHwgb3B0aW9ucy5lbCAmJiBvcHRpb25zLmVsLmlkOyAvLyBJZiB0aGVyZSB3YXMgbm8gSUQgZnJvbSB0aGUgb3B0aW9ucywgZ2VuZXJhdGUgb25lXG5cbiAgICBpZiAoIXRoaXMuaWRfKSB7XG4gICAgICAvLyBEb24ndCByZXF1aXJlIHRoZSBwbGF5ZXIgSUQgZnVuY3Rpb24gaW4gdGhlIGNhc2Ugb2YgbW9jayBwbGF5ZXJzXG4gICAgICB2YXIgaWQgPSBwbGF5ZXIgJiYgcGxheWVyLmlkICYmIHBsYXllci5pZCgpIHx8ICdub19wbGF5ZXInO1xuICAgICAgdGhpcy5pZF8gPSBpZCArIFwiX2NvbXBvbmVudF9cIiArIG5ld0dVSUQoKTtcbiAgICB9XG5cbiAgICB0aGlzLm5hbWVfID0gb3B0aW9ucy5uYW1lIHx8IG51bGw7IC8vIENyZWF0ZSBlbGVtZW50IGlmIG9uZSB3YXNuJ3QgcHJvdmlkZWQgaW4gb3B0aW9uc1xuXG4gICAgaWYgKG9wdGlvbnMuZWwpIHtcbiAgICAgIHRoaXMuZWxfID0gb3B0aW9ucy5lbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuY3JlYXRlRWwgIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmVsXyA9IHRoaXMuY3JlYXRlRWwoKTtcbiAgICB9IC8vIGlmIGV2ZW50ZWQgaXMgYW55dGhpbmcgZXhjZXB0IGZhbHNlLCB3ZSB3YW50IHRvIG1peGluIGluIGV2ZW50ZWRcblxuXG4gICAgaWYgKG9wdGlvbnMuZXZlbnRlZCAhPT0gZmFsc2UpIHtcbiAgICAgIC8vIE1ha2UgdGhpcyBhbiBldmVudGVkIG9iamVjdCBhbmQgdXNlIGBlbF9gLCBpZiBhdmFpbGFibGUsIGFzIGl0cyBldmVudCBidXNcbiAgICAgIGV2ZW50ZWQodGhpcywge1xuICAgICAgICBldmVudEJ1c0tleTogdGhpcy5lbF8gPyAnZWxfJyA6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRlZnVsKHRoaXMsIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFN0YXRlKTtcbiAgICB0aGlzLmNoaWxkcmVuXyA9IFtdO1xuICAgIHRoaXMuY2hpbGRJbmRleF8gPSB7fTtcbiAgICB0aGlzLmNoaWxkTmFtZUluZGV4XyA9IHt9O1xuICAgIHZhciBTZXRTaGFtO1xuXG4gICAgaWYgKCF3aW5kb3ckMS5TZXQpIHtcbiAgICAgIFNldFNoYW0gPVxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTZXRTaGFtKCkge1xuICAgICAgICAgIHRoaXMuc2V0XyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9wcm90bzIgPSBTZXRTaGFtLnByb3RvdHlwZTtcblxuICAgICAgICBfcHJvdG8yLmhhcyA9IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMuc2V0XztcbiAgICAgICAgfTtcblxuICAgICAgICBfcHJvdG8yW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgICAgICB2YXIgaGFzID0gdGhpcy5oYXMoa2V5KTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5zZXRfW2tleV07XG4gICAgICAgICAgcmV0dXJuIGhhcztcbiAgICAgICAgfTtcblxuICAgICAgICBfcHJvdG8yLmFkZCA9IGZ1bmN0aW9uIGFkZChrZXkpIHtcbiAgICAgICAgICB0aGlzLnNldF9ba2V5XSA9IDE7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3Byb3RvMi5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNldF8pIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywga2V5LCBrZXksIHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gU2V0U2hhbTtcbiAgICAgIH0oKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFRpbWVvdXRJZHNfID0gd2luZG93JDEuU2V0ID8gbmV3IFNldCgpIDogbmV3IFNldFNoYW0oKTtcbiAgICB0aGlzLnNldEludGVydmFsSWRzXyA9IHdpbmRvdyQxLlNldCA/IG5ldyBTZXQoKSA6IG5ldyBTZXRTaGFtKCk7XG4gICAgdGhpcy5yYWZJZHNfID0gd2luZG93JDEuU2V0ID8gbmV3IFNldCgpIDogbmV3IFNldFNoYW0oKTtcbiAgICB0aGlzLmNsZWFyaW5nVGltZXJzT25EaXNwb3NlXyA9IGZhbHNlOyAvLyBBZGQgYW55IGNoaWxkIGNvbXBvbmVudHMgaW4gb3B0aW9uc1xuXG4gICAgaWYgKG9wdGlvbnMuaW5pdENoaWxkcmVuICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5pbml0Q2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5KHJlYWR5KTsgLy8gRG9uJ3Qgd2FudCB0byB0cmlnZ2VyIHJlYWR5IGhlcmUgb3IgaXQgd2lsbCBiZWZvcmUgaW5pdCBpcyBhY3R1YWxseVxuICAgIC8vIGZpbmlzaGVkIGZvciBhbGwgY2hpbGRyZW4gdGhhdCBydW4gdGhpcyBjb25zdHJ1Y3RvclxuXG4gICAgaWYgKG9wdGlvbnMucmVwb3J0VG91Y2hBY3Rpdml0eSAhPT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZW5hYmxlVG91Y2hBY3Rpdml0eSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiB0aGUgYENvbXBvbmVudGAgYW5kIGFsbCBjaGlsZCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAZmlyZXMgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gYSBgQ29tcG9uZW50YCBpcyBkaXNwb3NlZC5cbiAgICAgKlxuICAgICAqIEBldmVudCBDb21wb25lbnQjZGlzcG9zZVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2J1YmJsZXM9ZmFsc2VdXG4gICAgICogICAgICAgICAgIHNldCB0byBmYWxzZSBzbyB0aGF0IHRoZSBjbG9zZSBldmVudCBkb2VzIG5vdFxuICAgICAqICAgICAgICAgICBidWJibGUgdXBcbiAgICAgKi9cbiAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ2Rpc3Bvc2UnLFxuICAgICAgYnViYmxlczogZmFsc2VcbiAgICB9KTsgLy8gRGlzcG9zZSBhbGwgY2hpbGRyZW4uXG5cbiAgICBpZiAodGhpcy5jaGlsZHJlbl8pIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLmNoaWxkcmVuXy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbl9baV0uZGlzcG9zZSkge1xuICAgICAgICAgIHRoaXMuY2hpbGRyZW5fW2ldLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gRGVsZXRlIGNoaWxkIHJlZmVyZW5jZXNcblxuXG4gICAgdGhpcy5jaGlsZHJlbl8gPSBudWxsO1xuICAgIHRoaXMuY2hpbGRJbmRleF8gPSBudWxsO1xuICAgIHRoaXMuY2hpbGROYW1lSW5kZXhfID0gbnVsbDtcbiAgICB0aGlzLnBhcmVudENvbXBvbmVudF8gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuZWxfKSB7XG4gICAgICAvLyBSZW1vdmUgZWxlbWVudCBmcm9tIERPTVxuICAgICAgaWYgKHRoaXMuZWxfLnBhcmVudE5vZGUpIHtcbiAgICAgICAgdGhpcy5lbF8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsXyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChEb21EYXRhLmhhcyh0aGlzLmVsXykpIHtcbiAgICAgICAgRG9tRGF0YVtcImRlbGV0ZVwiXSh0aGlzLmVsXyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxfID0gbnVsbDtcbiAgICB9IC8vIHJlbW92ZSByZWZlcmVuY2UgdG8gdGhlIHBsYXllciBhZnRlciBkaXNwb3Npbmcgb2YgdGhlIGVsZW1lbnRcblxuXG4gICAgdGhpcy5wbGF5ZXJfID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSB7QGxpbmsgUGxheWVyfSB0aGF0IHRoZSBgQ29tcG9uZW50YCBoYXMgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn1cbiAgICogICAgICAgICBUaGUgcGxheWVyIHRoYXQgdGhpcyBgQ29tcG9uZW50YCBoYXMgYXR0YWNoZWQgdG8uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXllciA9IGZ1bmN0aW9uIHBsYXllcigpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJfO1xuICB9XG4gIC8qKlxuICAgKiBEZWVwIG1lcmdlIG9mIG9wdGlvbnMgb2JqZWN0cyB3aXRoIG5ldyBvcHRpb25zLlxuICAgKiA+IE5vdGU6IFdoZW4gYm90aCBgb2JqYCBhbmQgYG9wdGlvbnNgIGNvbnRhaW4gcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIG9iamVjdHMuXG4gICAqICAgICAgICAgVGhlIHR3byBwcm9wZXJ0aWVzIGdldCBtZXJnZWQgdXNpbmcge0BsaW5rIG1vZHVsZTptZXJnZU9wdGlvbnN9XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogICAgICAgIFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBuZXcgb3B0aW9ucy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIEEgbmV3IG9iamVjdCBvZiBgdGhpcy5vcHRpb25zX2AgYW5kIGBvYmpgIG1lcmdlZCB0b2dldGhlci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub3B0aW9ucyA9IGZ1bmN0aW9uIG9wdGlvbnMob2JqKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNfO1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9uc18gPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zXywgb2JqKTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zXztcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBgQ29tcG9uZW50YHMgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgRE9NIGVsZW1lbnQgZm9yIHRoaXMgYENvbXBvbmVudGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVsID0gZnVuY3Rpb24gZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgcyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0YWdOYW1lXVxuICAgKiAgICAgICAgRWxlbWVudCdzIERPTSBub2RlIHR5cGUuIGUuZy4gJ2RpdidcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXVxuICAgKiAgICAgICAgQW4gb2JqZWN0IG9mIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gICAqICAgICAgICBBbiBvYmplY3Qgb2YgYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSBzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSh0YWdOYW1lLCBwcm9wZXJ0aWVzLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsKHRhZ05hbWUsIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMpO1xuICB9XG4gIC8qKlxuICAgKiBMb2NhbGl6ZSBhIHN0cmluZyBnaXZlbiB0aGUgc3RyaW5nIGluIGVuZ2xpc2guXG4gICAqXG4gICAqIElmIHRva2VucyBhcmUgcHJvdmlkZWQsIGl0J2xsIHRyeSBhbmQgcnVuIGEgc2ltcGxlIHRva2VuIHJlcGxhY2VtZW50IG9uIHRoZSBwcm92aWRlZCBzdHJpbmcuXG4gICAqIFRoZSB0b2tlbnMgaXQgbG9va3MgZm9yIGxvb2sgbGlrZSBgezF9YCB3aXRoIHRoZSBpbmRleCBiZWluZyAxLWluZGV4ZWQgaW50byB0aGUgdG9rZW5zIGFycmF5LlxuICAgKlxuICAgKiBJZiBhIGBkZWZhdWx0VmFsdWVgIGlzIHByb3ZpZGVkLCBpdCdsbCB1c2UgdGhhdCBvdmVyIGBzdHJpbmdgLFxuICAgKiBpZiBhIHZhbHVlIGlzbid0IGZvdW5kIGluIHByb3ZpZGVkIGxhbmd1YWdlIGZpbGVzLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byBoYXZlIGEgZGVzY3JpcHRpdmUga2V5IGZvciB0b2tlbiByZXBsYWNlbWVudFxuICAgKiBidXQgaGF2ZSBhIHN1Y2NpbmN0IGxvY2FsaXplZCBzdHJpbmcgYW5kIG5vdCByZXF1aXJlIGBlbi5qc29uYCB0byBiZSBpbmNsdWRlZC5cbiAgICpcbiAgICogQ3VycmVudGx5LCBpdCBpcyB1c2VkIGZvciB0aGUgcHJvZ3Jlc3MgYmFyIHRpbWluZy5cbiAgICogYGBganNcbiAgICoge1xuICAgKiAgIFwicHJvZ3Jlc3MgYmFyIHRpbWluZzogY3VycmVudFRpbWU9ezF9IGR1cmF0aW9uPXsyfVwiOiBcInsxfSBvZiB7Mn1cIlxuICAgKiB9XG4gICAqIGBgYFxuICAgKiBJdCBpcyB0aGVuIHVzZWQgbGlrZSBzbzpcbiAgICogYGBganNcbiAgICogdGhpcy5sb2NhbGl6ZSgncHJvZ3Jlc3MgYmFyIHRpbWluZzogY3VycmVudFRpbWU9ezF9IGR1cmF0aW9uezJ9JyxcbiAgICogICAgICAgICAgICAgICBbdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCksIHRoaXMucGxheWVyXy5kdXJhdGlvbigpXSxcbiAgICogICAgICAgICAgICAgICAnezF9IG9mIHsyfScpO1xuICAgKiBgYGBcbiAgICpcbiAgICogV2hpY2ggb3V0cHV0cyBzb21ldGhpbmcgbGlrZTogYDAxOjIzIG9mIDI0OjU2YC5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKiAgICAgICAgVGhlIHN0cmluZyB0byBsb2NhbGl6ZSBhbmQgdGhlIGtleSB0byBsb29rdXAgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbdG9rZW5zXVxuICAgKiAgICAgICAgSWYgdGhlIGN1cnJlbnQgaXRlbSBoYXMgdG9rZW4gcmVwbGFjZW1lbnRzLCBwcm92aWRlIHRoZSB0b2tlbnMgaGVyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VmFsdWVdXG4gICAqICAgICAgICBEZWZhdWx0cyB0byBgc3RyaW5nYC4gQ2FuIGJlIGEgZGVmYXVsdCB2YWx1ZSB0byB1c2UgZm9yIHRva2VuIHJlcGxhY2VtZW50XG4gICAqICAgICAgICBpZiB0aGUgbG9va3VwIGtleSBpcyBuZWVkZWQgdG8gYmUgc2VwYXJhdGUuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgbG9jYWxpemVkIHN0cmluZyBvciBpZiBubyBsb2NhbGl6YXRpb24gZXhpc3RzIHRoZSBlbmdsaXNoIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubG9jYWxpemUgPSBmdW5jdGlvbiBsb2NhbGl6ZShzdHJpbmcsIHRva2VucywgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIGNvZGUgPSB0aGlzLnBsYXllcl8ubGFuZ3VhZ2UgJiYgdGhpcy5wbGF5ZXJfLmxhbmd1YWdlKCk7XG4gICAgdmFyIGxhbmd1YWdlcyA9IHRoaXMucGxheWVyXy5sYW5ndWFnZXMgJiYgdGhpcy5wbGF5ZXJfLmxhbmd1YWdlcygpO1xuICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlcyAmJiBsYW5ndWFnZXNbY29kZV07XG4gICAgdmFyIHByaW1hcnlDb2RlID0gY29kZSAmJiBjb2RlLnNwbGl0KCctJylbMF07XG4gICAgdmFyIHByaW1hcnlMYW5nID0gbGFuZ3VhZ2VzICYmIGxhbmd1YWdlc1twcmltYXJ5Q29kZV07XG4gICAgdmFyIGxvY2FsaXplZFN0cmluZyA9IGRlZmF1bHRWYWx1ZTtcblxuICAgIGlmIChsYW5ndWFnZSAmJiBsYW5ndWFnZVtzdHJpbmddKSB7XG4gICAgICBsb2NhbGl6ZWRTdHJpbmcgPSBsYW5ndWFnZVtzdHJpbmddO1xuICAgIH0gZWxzZSBpZiAocHJpbWFyeUxhbmcgJiYgcHJpbWFyeUxhbmdbc3RyaW5nXSkge1xuICAgICAgbG9jYWxpemVkU3RyaW5nID0gcHJpbWFyeUxhbmdbc3RyaW5nXTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW5zKSB7XG4gICAgICBsb2NhbGl6ZWRTdHJpbmcgPSBsb2NhbGl6ZWRTdHJpbmcucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIGZ1bmN0aW9uIChtYXRjaCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdG9rZW5zW2luZGV4IC0gMV07XG4gICAgICAgIHZhciByZXQgPSB2YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldCA9IG1hdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsb2NhbGl6ZWRTdHJpbmc7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYENvbXBvbmVudGBzIERPTSBlbGVtZW50LiBUaGlzIGlzIHdoZXJlIGNoaWxkcmVuIGdldCBpbnNlcnRlZC5cbiAgICogVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIHRoZSBzYW1lIGFzIHRoZSBlbGVtZW50IHJldHVybmVkIGluIHtAbGluayBDb21wb25lbnQjZWx9LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBjb250ZW50IGVsZW1lbnQgZm9yIHRoaXMgYENvbXBvbmVudGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbnRlbnRFbCA9IGZ1bmN0aW9uIGNvbnRlbnRFbCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50RWxfIHx8IHRoaXMuZWxfO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhpcyBgQ29tcG9uZW50YHMgSURcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBpZCBvZiB0aGlzIGBDb21wb25lbnRgXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlkID0gZnVuY3Rpb24gaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWRfO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGBDb21wb25lbnRgcyBuYW1lLiBUaGUgbmFtZSBnZXRzIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBgQ29tcG9uZW50YFxuICAgKiBhbmQgaXMgc2V0IGR1cmluZyByZWdpc3RyYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgbmFtZSBvZiB0aGlzIGBDb21wb25lbnRgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5uYW1lID0gZnVuY3Rpb24gbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lXztcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIGFsbCBjaGlsZCBjb21wb25lbnRzXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKiAgICAgICAgIFRoZSBjaGlsZHJlblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jaGlsZHJlbiA9IGZ1bmN0aW9uIGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYGlkYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqICAgICAgICBUaGUgaWQgb2YgdGhlIGNoaWxkIGBDb21wb25lbnRgIHRvIGdldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYGlkYCBvciB1bmRlZmluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldENoaWxkQnlJZCA9IGZ1bmN0aW9uIGdldENoaWxkQnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkSW5kZXhfW2lkXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGNoaWxkIGBDb21wb25lbnRgIHRvIGdldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgIG9yIHVuZGVmaW5lZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZChuYW1lKSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2hpbGROYW1lSW5kZXhfW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBjaGlsZCBgQ29tcG9uZW50YCBpbnNpZGUgdGhlIGN1cnJlbnQgYENvbXBvbmVudGAuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfENvbXBvbmVudH0gY2hpbGRcbiAgICogICAgICAgIFRoZSBuYW1lIG9yIGluc3RhbmNlIG9mIGEgY2hpbGQgdG8gYWRkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGdldCBwYXNzZWQgdG8gY2hpbGRyZW4gb2ZcbiAgICogICAgICAgIHRoZSBjaGlsZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD10aGlzLmNoaWxkcmVuXy5sZW5ndGhdXG4gICAqICAgICAgICBUaGUgaW5kZXggdG8gYXR0ZW1wdCB0byBhZGQgYSBjaGlsZCBpbnRvLlxuICAgKlxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqICAgICAgICAgVGhlIGBDb21wb25lbnRgIHRoYXQgZ2V0cyBhZGRlZCBhcyBhIGNoaWxkLiBXaGVuIHVzaW5nIGEgc3RyaW5nIHRoZVxuICAgKiAgICAgICAgIGBDb21wb25lbnRgIHdpbGwgZ2V0IGNyZWF0ZWQgYnkgdGhpcyBwcm9jZXNzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkKGNoaWxkLCBvcHRpb25zLCBpbmRleCkge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgaW5kZXggPSB0aGlzLmNoaWxkcmVuXy5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBvbmVudDtcbiAgICB2YXIgY29tcG9uZW50TmFtZTsgLy8gSWYgY2hpbGQgaXMgYSBzdHJpbmcsIGNyZWF0ZSBjb21wb25lbnQgd2l0aCBvcHRpb25zXG5cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgY29tcG9uZW50TmFtZSA9IHRvVGl0bGVDYXNlKGNoaWxkKTtcbiAgICAgIHZhciBjb21wb25lbnRDbGFzc05hbWUgPSBvcHRpb25zLmNvbXBvbmVudENsYXNzIHx8IGNvbXBvbmVudE5hbWU7IC8vIFNldCBuYW1lIHRocm91Z2ggb3B0aW9uc1xuXG4gICAgICBvcHRpb25zLm5hbWUgPSBjb21wb25lbnROYW1lOyAvLyBDcmVhdGUgYSBuZXcgb2JqZWN0ICYgZWxlbWVudCBmb3IgdGhpcyBjb250cm9scyBzZXRcbiAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gLnBsYXllcl8sIHRoaXMgaXMgYSBwbGF5ZXJcblxuICAgICAgdmFyIENvbXBvbmVudENsYXNzID0gQ29tcG9uZW50LmdldENvbXBvbmVudChjb21wb25lbnRDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoIUNvbXBvbmVudENsYXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudCBcIiArIGNvbXBvbmVudENsYXNzTmFtZSArIFwiIGRvZXMgbm90IGV4aXN0XCIpO1xuICAgICAgfSAvLyBkYXRhIHN0b3JlZCBkaXJlY3RseSBvbiB0aGUgdmlkZW9qcyBvYmplY3QgbWF5IGJlXG4gICAgICAvLyBtaXNpZGVudGlmaWVkIGFzIGEgY29tcG9uZW50IHRvIHJldGFpblxuICAgICAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCA0LnguIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGVcbiAgICAgIC8vIGNvbXBvbmVudCBjbGFzcyBjYW4gYmUgaW5zdGFudGlhdGVkLlxuXG5cbiAgICAgIGlmICh0eXBlb2YgQ29tcG9uZW50Q2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnRDbGFzcyh0aGlzLnBsYXllcl8gfHwgdGhpcywgb3B0aW9ucyk7IC8vIGNoaWxkIGlzIGEgY29tcG9uZW50IGluc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudCA9IGNoaWxkO1xuICAgIH1cblxuICAgIGlmIChjb21wb25lbnQucGFyZW50Q29tcG9uZW50Xykge1xuICAgICAgY29tcG9uZW50LnBhcmVudENvbXBvbmVudF8ucmVtb3ZlQ2hpbGQoY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmNoaWxkcmVuXy5zcGxpY2UoaW5kZXgsIDAsIGNvbXBvbmVudCk7XG4gICAgY29tcG9uZW50LnBhcmVudENvbXBvbmVudF8gPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQuaWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuY2hpbGRJbmRleF9bY29tcG9uZW50LmlkKCldID0gY29tcG9uZW50O1xuICAgIH0gLy8gSWYgYSBuYW1lIHdhc24ndCB1c2VkIHRvIGNyZWF0ZSB0aGUgY29tcG9uZW50LCBjaGVjayBpZiB3ZSBjYW4gdXNlIHRoZVxuICAgIC8vIG5hbWUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudFxuXG5cbiAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBjb21wb25lbnQubmFtZSAmJiB0b1RpdGxlQ2FzZShjb21wb25lbnQubmFtZSgpKTtcblxuICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICB0aGlzLmNoaWxkTmFtZUluZGV4X1tjb21wb25lbnROYW1lXSA9IGNvbXBvbmVudDtcbiAgICAgIHRoaXMuY2hpbGROYW1lSW5kZXhfW3RvTG93ZXJDYXNlKGNvbXBvbmVudE5hbWUpXSA9IGNvbXBvbmVudDtcbiAgICB9IC8vIEFkZCB0aGUgVUkgb2JqZWN0J3MgZWxlbWVudCB0byB0aGUgY29udGFpbmVyIGRpdiAoYm94KVxuICAgIC8vIEhhdmluZyBhbiBlbGVtZW50IGlzIG5vdCByZXF1aXJlZFxuXG5cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC5lbCA9PT0gJ2Z1bmN0aW9uJyAmJiBjb21wb25lbnQuZWwoKSkge1xuICAgICAgdmFyIGNoaWxkTm9kZXMgPSB0aGlzLmNvbnRlbnRFbCgpLmNoaWxkcmVuO1xuICAgICAgdmFyIHJlZk5vZGUgPSBjaGlsZE5vZGVzW2luZGV4XSB8fCBudWxsO1xuICAgICAgdGhpcy5jb250ZW50RWwoKS5pbnNlcnRCZWZvcmUoY29tcG9uZW50LmVsKCksIHJlZk5vZGUpO1xuICAgIH0gLy8gUmV0dXJuIHNvIGl0IGNhbiBzdG9yZWQgb24gcGFyZW50IG9iamVjdCBpZiBkZXNpcmVkLlxuXG5cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBjaGlsZCBgQ29tcG9uZW50YCBmcm9tIHRoaXMgYENvbXBvbmVudGBzIGxpc3Qgb2YgY2hpbGRyZW4uIEFsc28gcmVtb3Zlc1xuICAgKiB0aGUgY2hpbGQgYENvbXBvbmVudGBzIGVsZW1lbnQgZnJvbSB0aGlzIGBDb21wb25lbnRgcyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gY29tcG9uZW50XG4gICAqICAgICAgICBUaGUgY2hpbGQgYENvbXBvbmVudGAgdG8gcmVtb3ZlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkKGNvbXBvbmVudCkge1xuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29tcG9uZW50ID0gdGhpcy5nZXRDaGlsZChjb21wb25lbnQpO1xuICAgIH1cblxuICAgIGlmICghY29tcG9uZW50IHx8ICF0aGlzLmNoaWxkcmVuXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjaGlsZEZvdW5kID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gdGhpcy5jaGlsZHJlbl8ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuX1tpXSA9PT0gY29tcG9uZW50KSB7XG4gICAgICAgIGNoaWxkRm91bmQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGRGb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbXBvbmVudC5wYXJlbnRDb21wb25lbnRfID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkSW5kZXhfW2NvbXBvbmVudC5pZCgpXSA9IG51bGw7XG4gICAgdGhpcy5jaGlsZE5hbWVJbmRleF9bdG9UaXRsZUNhc2UoY29tcG9uZW50Lm5hbWUoKSldID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkTmFtZUluZGV4X1t0b0xvd2VyQ2FzZShjb21wb25lbnQubmFtZSgpKV0gPSBudWxsO1xuICAgIHZhciBjb21wRWwgPSBjb21wb25lbnQuZWwoKTtcblxuICAgIGlmIChjb21wRWwgJiYgY29tcEVsLnBhcmVudE5vZGUgPT09IHRoaXMuY29udGVudEVsKCkpIHtcbiAgICAgIHRoaXMuY29udGVudEVsKCkucmVtb3ZlQ2hpbGQoY29tcG9uZW50LmVsKCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkIGFuZCBpbml0aWFsaXplIGRlZmF1bHQgY2hpbGQgYENvbXBvbmVudGBzIGJhc2VkIHVwb24gb3B0aW9ucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5pdENoaWxkcmVuID0gZnVuY3Rpb24gaW5pdENoaWxkcmVuKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLm9wdGlvbnNfLmNoaWxkcmVuO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAvLyBgdGhpc2AgaXMgYHBhcmVudGBcbiAgICAgIHZhciBwYXJlbnRPcHRpb25zID0gdGhpcy5vcHRpb25zXztcblxuICAgICAgdmFyIGhhbmRsZUFkZCA9IGZ1bmN0aW9uIGhhbmRsZUFkZChjaGlsZCkge1xuICAgICAgICB2YXIgbmFtZSA9IGNoaWxkLm5hbWU7XG4gICAgICAgIHZhciBvcHRzID0gY2hpbGQub3B0czsgLy8gQWxsb3cgb3B0aW9ucyBmb3IgY2hpbGRyZW4gdG8gYmUgc2V0IGF0IHRoZSBwYXJlbnQgb3B0aW9uc1xuICAgICAgICAvLyBlLmcuIHZpZGVvanMoaWQsIHsgY29udHJvbEJhcjogZmFsc2UgfSk7XG4gICAgICAgIC8vIGluc3RlYWQgb2YgdmlkZW9qcyhpZCwgeyBjaGlsZHJlbjogeyBjb250cm9sQmFyOiBmYWxzZSB9KTtcblxuICAgICAgICBpZiAocGFyZW50T3B0aW9uc1tuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb3B0cyA9IHBhcmVudE9wdGlvbnNbbmFtZV07XG4gICAgICAgIH0gLy8gQWxsb3cgZm9yIGRpc2FibGluZyBkZWZhdWx0IGNvbXBvbmVudHNcbiAgICAgICAgLy8gZS5nLiBvcHRpb25zWydjaGlsZHJlbiddWydwb3N0ZXJJbWFnZSddID0gZmFsc2VcblxuXG4gICAgICAgIGlmIChvcHRzID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBBbGxvdyBvcHRpb25zIHRvIGJlIHBhc3NlZCBhcyBhIHNpbXBsZSBib29sZWFuIGlmIG5vIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgLy8gaXMgbmVjZXNzYXJ5LlxuXG5cbiAgICAgICAgaWYgKG9wdHMgPT09IHRydWUpIHtcbiAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIH0gLy8gV2UgYWxzbyB3YW50IHRvIHBhc3MgdGhlIG9yaWdpbmFsIHBsYXllciBvcHRpb25zXG4gICAgICAgIC8vIHRvIGVhY2ggY29tcG9uZW50IGFzIHdlbGwgc28gdGhleSBkb24ndCBuZWVkIHRvXG4gICAgICAgIC8vIHJlYWNoIGJhY2sgaW50byB0aGUgcGxheWVyIGZvciBvcHRpb25zIGxhdGVyLlxuXG5cbiAgICAgICAgb3B0cy5wbGF5ZXJPcHRpb25zID0gX3RoaXMub3B0aW9uc18ucGxheWVyT3B0aW9uczsgLy8gQ3JlYXRlIGFuZCBhZGQgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gQWRkIGEgZGlyZWN0IHJlZmVyZW5jZSB0byB0aGUgY2hpbGQgYnkgbmFtZSBvbiB0aGUgcGFyZW50IGluc3RhbmNlLlxuICAgICAgICAvLyBJZiB0d28gb2YgdGhlIHNhbWUgY29tcG9uZW50IGFyZSB1c2VkLCBkaWZmZXJlbnQgbmFtZXMgc2hvdWxkIGJlIHN1cHBsaWVkXG4gICAgICAgIC8vIGZvciBlYWNoXG5cbiAgICAgICAgdmFyIG5ld0NoaWxkID0gX3RoaXMuYWRkQ2hpbGQobmFtZSwgb3B0cyk7XG5cbiAgICAgICAgaWYgKG5ld0NoaWxkKSB7XG4gICAgICAgICAgX3RoaXNbbmFtZV0gPSBuZXdDaGlsZDtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gQWxsb3cgZm9yIGFuIGFycmF5IG9mIGNoaWxkcmVuIGRldGFpbHMgdG8gcGFzc2VkIGluIHRoZSBvcHRpb25zXG5cblxuICAgICAgdmFyIHdvcmtpbmdDaGlsZHJlbjtcbiAgICAgIHZhciBUZWNoID0gQ29tcG9uZW50LmdldENvbXBvbmVudCgnVGVjaCcpO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgd29ya2luZ0NoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3b3JraW5nQ2hpbGRyZW4gPSBPYmplY3Qua2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIHdvcmtpbmdDaGlsZHJlbiAvLyBjaGlsZHJlbiB0aGF0IGFyZSBpbiB0aGlzLm9wdGlvbnNfIGJ1dCBhbHNvIGluIHdvcmtpbmdDaGlsZHJlbiAgd291bGRcbiAgICAgIC8vIGdpdmUgdXMgZXh0cmEgY2hpbGRyZW4gd2UgZG8gbm90IHdhbnQuIFNvLCB3ZSB3YW50IHRvIGZpbHRlciB0aGVtIG91dC5cbiAgICAgIC5jb25jYXQoT2JqZWN0LmtleXModGhpcy5vcHRpb25zXykuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gIXdvcmtpbmdDaGlsZHJlbi5zb21lKGZ1bmN0aW9uICh3Y2hpbGQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHdjaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZCA9PT0gd2NoaWxkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjaGlsZCA9PT0gd2NoaWxkLm5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgfSkpLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgIHZhciBvcHRzO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgbmFtZSA9IGNoaWxkO1xuICAgICAgICAgIG9wdHMgPSBjaGlsZHJlbltuYW1lXSB8fCBfdGhpcy5vcHRpb25zX1tuYW1lXSB8fCB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYW1lID0gY2hpbGQubmFtZTtcbiAgICAgICAgICBvcHRzID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgb3B0czogb3B0c1xuICAgICAgICB9O1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAvLyB3ZSBoYXZlIHRvIG1ha2Ugc3VyZSB0aGF0IGNoaWxkLm5hbWUgaXNuJ3QgaW4gdGhlIHRlY2hPcmRlciBzaW5jZVxuICAgICAgICAvLyB0ZWNocyBhcmUgcmVnaXN0ZXJkIGFzIENvbXBvbmVudHMgYnV0IGNhbid0IGFyZW4ndCBjb21wYXRpYmxlXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9pc3N1ZXMvMjc3MlxuICAgICAgICB2YXIgYyA9IENvbXBvbmVudC5nZXRDb21wb25lbnQoY2hpbGQub3B0cy5jb21wb25lbnRDbGFzcyB8fCB0b1RpdGxlQ2FzZShjaGlsZC5uYW1lKSk7XG4gICAgICAgIHJldHVybiBjICYmICFUZWNoLmlzVGVjaChjKTtcbiAgICAgIH0pLmZvckVhY2goaGFuZGxlQWRkKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gY2xhc3MgbmFtZS4gU2hvdWxkIGJlIG92ZXJyaWRlbiBieSBzdWItY29tcG9uZW50cy5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gY2xhc3MgbmFtZSBmb3IgdGhpcyBvYmplY3QuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICAvLyBDaGlsZCBjbGFzc2VzIGNhbiBpbmNsdWRlIGEgZnVuY3Rpb24gdGhhdCBkb2VzOlxuICAgIC8vIHJldHVybiAnQ0xBU1MgTkFNRScgKyB0aGlzLl9zdXBlcigpO1xuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogQmluZCBhIGxpc3RlbmVyIHRvIHRoZSBjb21wb25lbnQncyByZWFkeSBzdGF0ZS5cbiAgICogRGlmZmVyZW50IGZyb20gZXZlbnQgbGlzdGVuZXJzIGluIHRoYXQgaWYgdGhlIHJlYWR5IGV2ZW50IGhhcyBhbHJlYWR5IGhhcHBlbmVkXG4gICAqIGl0IHdpbGwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gaW1tZWRpYXRlbHkuXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICogICAgICAgICBSZXR1cm5zIGl0c2VsZjsgbWV0aG9kIGNhbiBiZSBjaGFpbmVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZWFkeSA9IGZ1bmN0aW9uIHJlYWR5KGZuLCBzeW5jKSB7XG4gICAgaWYgKHN5bmMgPT09IHZvaWQgMCkge1xuICAgICAgc3luYyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZm4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNSZWFkeV8pIHtcbiAgICAgIHRoaXMucmVhZHlRdWV1ZV8gPSB0aGlzLnJlYWR5UXVldWVfIHx8IFtdO1xuICAgICAgdGhpcy5yZWFkeVF1ZXVlXy5wdXNoKGZuKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgZm4uY2FsbCh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb24gYXN5bmNocm9ub3VzbHkgYnkgZGVmYXVsdCBmb3IgY29uc2lzdGVuY3lcbiAgICAgIHRoaXMuc2V0VGltZW91dChmbiwgMSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUcmlnZ2VyIGFsbCB0aGUgcmVhZHkgbGlzdGVuZXJzIGZvciB0aGlzIGBDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmlyZXMgQ29tcG9uZW50I3JlYWR5XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyaWdnZXJSZWFkeSA9IGZ1bmN0aW9uIHRyaWdnZXJSZWFkeSgpIHtcbiAgICB0aGlzLmlzUmVhZHlfID0gdHJ1ZTsgLy8gRW5zdXJlIHJlYWR5IGlzIHRyaWdnZXJlZCBhc3luY2hyb25vdXNseVxuXG4gICAgdGhpcy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZWFkeVF1ZXVlID0gdGhpcy5yZWFkeVF1ZXVlXzsgLy8gUmVzZXQgUmVhZHkgUXVldWVcblxuICAgICAgdGhpcy5yZWFkeVF1ZXVlXyA9IFtdO1xuXG4gICAgICBpZiAocmVhZHlRdWV1ZSAmJiByZWFkeVF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVhZHlRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgIGZuLmNhbGwodGhpcyk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSAvLyBBbGxvdyBmb3IgdXNpbmcgZXZlbnQgbGlzdGVuZXJzIGFsc29cblxuICAgICAgLyoqXG4gICAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIGBDb21wb25lbnRgIGlzIHJlYWR5LlxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBDb21wb25lbnQjcmVhZHlcbiAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAqL1xuXG5cbiAgICAgIHRoaXMudHJpZ2dlcigncmVhZHknKTtcbiAgICB9LCAxKTtcbiAgfVxuICAvKipcbiAgICogRmluZCBhIHNpbmdsZSBET00gZWxlbWVudCBtYXRjaGluZyBhIGBzZWxlY3RvcmAuIFRoaXMgY2FuIGJlIHdpdGhpbiB0aGUgYENvbXBvbmVudGBzXG4gICAqIGBjb250ZW50RWwoKWAgb3IgYW5vdGhlciBjdXN0b20gY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAqICAgICAgICBBIHZhbGlkIENTUyBzZWxlY3Rvciwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gYHF1ZXJ5U2VsZWN0b3JgLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSBbY29udGV4dD10aGlzLmNvbnRlbnRFbCgpXVxuICAgKiAgICAgICAgQSBET00gZWxlbWVudCB3aXRoaW4gd2hpY2ggdG8gcXVlcnkuIENhbiBhbHNvIGJlIGEgc2VsZWN0b3Igc3RyaW5nIGluXG4gICAqICAgICAgICB3aGljaCBjYXNlIHRoZSBmaXJzdCBtYXRjaGluZyBlbGVtZW50IHdpbGwgZ2V0IHVzZWQgYXMgY29udGV4dC4gSWZcbiAgICogICAgICAgIG1pc3NpbmcgYHRoaXMuY29udGVudEVsKClgIGdldHMgdXNlZC4gSWYgIGB0aGlzLmNvbnRlbnRFbCgpYCByZXR1cm5zXG4gICAqICAgICAgICBub3RoaW5nIGl0IGZhbGxzIGJhY2sgdG8gYGRvY3VtZW50YC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudHxudWxsfVxuICAgKiAgICAgICAgIHRoZSBkb20gZWxlbWVudCB0aGF0IHdhcyBmb3VuZCwgb3IgbnVsbFxuICAgKlxuICAgKiBAc2VlIFtJbmZvcm1hdGlvbiBvbiBDU1MgU2VsZWN0b3JzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9HdWlkZS9DU1MvR2V0dGluZ19TdGFydGVkL1NlbGVjdG9ycylcbiAgICovXG4gIDtcblxuICBfcHJvdG8uJCA9IGZ1bmN0aW9uICQkMShzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHJldHVybiAkKHNlbGVjdG9yLCBjb250ZXh0IHx8IHRoaXMuY29udGVudEVsKCkpO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgRE9NIGVsZW1lbnQgbWF0Y2hpbmcgYSBgc2VsZWN0b3JgLiBUaGlzIGNhbiBiZSB3aXRoaW4gdGhlIGBDb21wb25lbnRgc1xuICAgKiBgY29udGVudEVsKClgIG9yIGFub3RoZXIgY3VzdG9tIGNvbnRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiAgICAgICAgQSB2YWxpZCBDU1Mgc2VsZWN0b3IsIHdoaWNoIHdpbGwgYmUgcGFzc2VkIHRvIGBxdWVyeVNlbGVjdG9yQWxsYC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fHN0cmluZ30gW2NvbnRleHQ9dGhpcy5jb250ZW50RWwoKV1cbiAgICogICAgICAgIEEgRE9NIGVsZW1lbnQgd2l0aGluIHdoaWNoIHRvIHF1ZXJ5LiBDYW4gYWxzbyBiZSBhIHNlbGVjdG9yIHN0cmluZyBpblxuICAgKiAgICAgICAgd2hpY2ggY2FzZSB0aGUgZmlyc3QgbWF0Y2hpbmcgZWxlbWVudCB3aWxsIGdldCB1c2VkIGFzIGNvbnRleHQuIElmXG4gICAqICAgICAgICBtaXNzaW5nIGB0aGlzLmNvbnRlbnRFbCgpYCBnZXRzIHVzZWQuIElmICBgdGhpcy5jb250ZW50RWwoKWAgcmV0dXJuc1xuICAgKiAgICAgICAgbm90aGluZyBpdCBmYWxscyBiYWNrIHRvIGBkb2N1bWVudGAuXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGVMaXN0fVxuICAgKiAgICAgICAgIGEgbGlzdCBvZiBkb20gZWxlbWVudHMgdGhhdCB3ZXJlIGZvdW5kXG4gICAqXG4gICAqIEBzZWUgW0luZm9ybWF0aW9uIG9uIENTUyBTZWxlY3RvcnNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0NTUy9HZXR0aW5nX1N0YXJ0ZWQvU2VsZWN0b3JzKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by4kJCA9IGZ1bmN0aW9uICQkJDEoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gJCQoc2VsZWN0b3IsIGNvbnRleHQgfHwgdGhpcy5jb250ZW50RWwoKSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgY29tcG9uZW50J3MgZWxlbWVudCBoYXMgYSBDU1MgY2xhc3MgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVG9DaGVja1xuICAgKiAgICAgICAgQ1NTIGNsYXNzIG5hbWUgdG8gY2hlY2suXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgLSBUcnVlIGlmIHRoZSBgQ29tcG9uZW50YCBoYXMgdGhlIGNsYXNzLlxuICAgKiAgICAgICAgIC0gRmFsc2UgaWYgdGhlIGBDb21wb25lbnRgIGRvZXMgbm90IGhhdmUgdGhlIGNsYXNzYFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzJDEoY2xhc3NUb0NoZWNrKSB7XG4gICAgcmV0dXJuIGhhc0NsYXNzKHRoaXMuZWxfLCBjbGFzc1RvQ2hlY2spO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBDU1MgY2xhc3MgbmFtZSB0byB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1RvQWRkXG4gICAqICAgICAgICBDU1MgY2xhc3MgbmFtZSB0byBhZGRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyQxKGNsYXNzVG9BZGQpIHtcbiAgICBhZGRDbGFzcyh0aGlzLmVsXywgY2xhc3NUb0FkZCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIGBDb21wb25lbnRgcyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NUb1JlbW92ZVxuICAgKiAgICAgICAgQ1NTIGNsYXNzIG5hbWUgdG8gcmVtb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3MkMShjbGFzc1RvUmVtb3ZlKSB7XG4gICAgcmVtb3ZlQ2xhc3ModGhpcy5lbF8sIGNsYXNzVG9SZW1vdmUpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgb3IgcmVtb3ZlIGEgQ1NTIGNsYXNzIG5hbWUgZnJvbSB0aGUgY29tcG9uZW50J3MgZWxlbWVudC5cbiAgICogLSBgY2xhc3NUb1RvZ2dsZWAgZ2V0cyBhZGRlZCB3aGVuIHtAbGluayBDb21wb25lbnQjaGFzQ2xhc3N9IHdvdWxkIHJldHVybiBmYWxzZS5cbiAgICogLSBgY2xhc3NUb1RvZ2dsZWAgZ2V0cyByZW1vdmVkIHdoZW4ge0BsaW5rIENvbXBvbmVudCNoYXNDbGFzc30gd291bGQgcmV0dXJuIHRydWUuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY2xhc3NUb1RvZ2dsZVxuICAgKiAgICAgICAgIFRoZSBjbGFzcyB0byBhZGQgb3IgcmVtb3ZlIGJhc2VkIG9uIChAbGluayBDb21wb25lbnQjaGFzQ2xhc3N9XG4gICAqXG4gICAqIEBwYXJhbSAge2Jvb2xlYW58RG9tfnByZWRpY2F0ZX0gW3ByZWRpY2F0ZV1cbiAgICogICAgICAgICBBbiB7QGxpbmsgRG9tfnByZWRpY2F0ZX0gZnVuY3Rpb24gb3IgYSBib29sZWFuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvZ2dsZUNsYXNzID0gZnVuY3Rpb24gdG9nZ2xlQ2xhc3MkMShjbGFzc1RvVG9nZ2xlLCBwcmVkaWNhdGUpIHtcbiAgICB0b2dnbGVDbGFzcyh0aGlzLmVsXywgY2xhc3NUb1RvZ2dsZSwgcHJlZGljYXRlKTtcbiAgfVxuICAvKipcbiAgICogU2hvdyB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQgaWYgaXQgaXMgaGlkZGVuIGJ5IHJlbW92aW5nIHRoZVxuICAgKiAndmpzLWhpZGRlbicgY2xhc3MgbmFtZSBmcm9tIGl0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gIH1cbiAgLyoqXG4gICAqIEhpZGUgdGhlIGBDb21wb25lbnRgcyBlbGVtZW50IGlmIGl0IGlzIGN1cnJlbnRseSBzaG93aW5nIGJ5IGFkZGluZyB0aGVcbiAgICogJ3Zqcy1oaWRkZW5gIGNsYXNzIG5hbWUgdG8gaXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgfVxuICAvKipcbiAgICogTG9jayBhIGBDb21wb25lbnRgcyBlbGVtZW50IGluIGl0cyB2aXNpYmxlIHN0YXRlIGJ5IGFkZGluZyB0aGUgJ3Zqcy1sb2NrLXNob3dpbmcnXG4gICAqIGNsYXNzIG5hbWUgdG8gaXQuIFVzZWQgZHVyaW5nIGZhZGVJbi9mYWRlT3V0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb2NrU2hvd2luZyA9IGZ1bmN0aW9uIGxvY2tTaG93aW5nKCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1sb2NrLXNob3dpbmcnKTtcbiAgfVxuICAvKipcbiAgICogVW5sb2NrIGEgYENvbXBvbmVudGBzIGVsZW1lbnQgZnJvbSBpdHMgdmlzaWJsZSBzdGF0ZSBieSByZW1vdmluZyB0aGUgJ3Zqcy1sb2NrLXNob3dpbmcnXG4gICAqIGNsYXNzIG5hbWUgZnJvbSBpdC4gVXNlZCBkdXJpbmcgZmFkZUluL2ZhZGVPdXQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVubG9ja1Nob3dpbmcgPSBmdW5jdGlvbiB1bmxvY2tTaG93aW5nKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1sb2NrLXNob3dpbmcnKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUgb24gdGhlIGBDb21wb25lbnRgcyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gICAqICAgICAgICBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gZ2V0IHRoZSB2YWx1ZSBmcm9tLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cbiAgICogICAgICAgICAtIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIHRoYXQgd2FzIGFza2VkIGZvci5cbiAgICogICAgICAgICAtIENhbiBiZSBhbiBlbXB0eSBzdHJpbmcgb24gc29tZSBicm93c2VycyBpZiB0aGUgYXR0cmlidXRlIGRvZXMgbm90IGV4aXN0XG4gICAqICAgICAgICAgICBvciBoYXMgbm8gdmFsdWVcbiAgICogICAgICAgICAtIE1vc3QgYnJvd3NlcnMgd2lsbCByZXR1cm4gbnVsbCBpZiB0aGUgYXR0aWJ1dGUgZG9lcyBub3QgZXhpc3Qgb3IgaGFzXG4gICAqICAgICAgICAgICBubyB2YWx1ZS5cbiAgICpcbiAgICogQHNlZSBbRE9NIEFQSV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvZ2V0QXR0cmlidXRlfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUkMShhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gZ2V0QXR0cmlidXRlKHRoaXMuZWxfLCBhdHRyaWJ1dGUpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZSBvbiB0aGUgYENvbXBvbmVudGAncyBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAgICogICAgICAgIE5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBzZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uXG4gICAqXG4gICAqIEBzZWUgW0RPTSBBUElde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L3NldEF0dHJpYnV0ZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gc2V0QXR0cmlidXRlJDEoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIHNldEF0dHJpYnV0ZSh0aGlzLmVsXywgYXR0cmlidXRlLCB2YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBhdHRyaWJ1dGUgZnJvbSB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAgICogICAgICAgIE5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byByZW1vdmUuXG4gICAqXG4gICAqIEBzZWUgW0RPTSBBUElde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L3JlbW92ZUF0dHJpYnV0ZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlJDEoYXR0cmlidXRlKSB7XG4gICAgcmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxfLCBhdHRyaWJ1dGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSB3aWR0aCBvZiB0aGUgY29tcG9uZW50IGJhc2VkIHVwb24gdGhlIENTUyBzdHlsZXMuXG4gICAqIFNlZSB7QGxpbmsgQ29tcG9uZW50I2RpbWVuc2lvbn0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW251bV1cbiAgICogICAgICAgIFRoZSB3aWR0aCB0aGF0IHlvdSB3YW50IHRvIHNldCBwb3N0Zml4ZWQgd2l0aCAnJScsICdweCcgb3Igbm90aGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcExpc3RlbmVyc11cbiAgICogICAgICAgIFNraXAgdGhlIGNvbXBvbmVudHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcnxzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIHdpZHRoIHdoZW4gZ2V0dGluZywgemVybyBpZiB0aGVyZSBpcyBubyB3aWR0aC4gQ2FuIGJlIGEgc3RyaW5nXG4gICAqICAgICAgICAgICBwb3N0cGl4ZWQgd2l0aCAnJScgb3IgJ3B4Jy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2lkdGggPSBmdW5jdGlvbiB3aWR0aChudW0sIHNraXBMaXN0ZW5lcnMpIHtcbiAgICByZXR1cm4gdGhpcy5kaW1lbnNpb24oJ3dpZHRoJywgbnVtLCBza2lwTGlzdGVuZXJzKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQgYmFzZWQgdXBvbiB0aGUgQ1NTIHN0eWxlcy5cbiAgICogU2VlIHtAbGluayBDb21wb25lbnQjZGltZW5zaW9ufSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbbnVtXVxuICAgKiAgICAgICAgVGhlIGhlaWdodCB0aGF0IHlvdSB3YW50IHRvIHNldCBwb3N0Zml4ZWQgd2l0aCAnJScsICdweCcgb3Igbm90aGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcExpc3RlbmVyc11cbiAgICogICAgICAgIFNraXAgdGhlIGNvbXBvbmVudHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcnxzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIHdpZHRoIHdoZW4gZ2V0dGluZywgemVybyBpZiB0aGVyZSBpcyBubyB3aWR0aC4gQ2FuIGJlIGEgc3RyaW5nXG4gICAqICAgICAgICAgcG9zdHBpeGVkIHdpdGggJyUnIG9yICdweCcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhlaWdodCA9IGZ1bmN0aW9uIGhlaWdodChudW0sIHNraXBMaXN0ZW5lcnMpIHtcbiAgICByZXR1cm4gdGhpcy5kaW1lbnNpb24oJ2hlaWdodCcsIG51bSwgc2tpcExpc3RlbmVycyk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBib3RoIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBgQ29tcG9uZW50YCBlbGVtZW50IGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcnxzdHJpbmd9IHdpZHRoXG4gICAqICAgICAgICAgV2lkdGggdG8gc2V0IHRoZSBgQ29tcG9uZW50YHMgZWxlbWVudCB0by5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfHN0cmluZ30gaGVpZ2h0XG4gICAqICAgICAgICAgSGVpZ2h0IHRvIHNldCB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQgdG8uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpbWVuc2lvbnMgPSBmdW5jdGlvbiBkaW1lbnNpb25zKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAvLyBTa2lwIGNvbXBvbmVudHJlc2l6ZSBsaXN0ZW5lcnMgb24gd2lkdGggZm9yIG9wdGltaXphdGlvblxuICAgIHRoaXMud2lkdGgod2lkdGgsIHRydWUpO1xuICAgIHRoaXMuaGVpZ2h0KGhlaWdodCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgd2lkdGggb3IgaGVpZ2h0IG9mIHRoZSBgQ29tcG9uZW50YCBlbGVtZW50LiBUaGlzIGlzIHRoZSBzaGFyZWQgY29kZVxuICAgKiBmb3IgdGhlIHtAbGluayBDb21wb25lbnQjd2lkdGh9IGFuZCB7QGxpbmsgQ29tcG9uZW50I2hlaWdodH0uXG4gICAqXG4gICAqIFRoaW5ncyB0byBrbm93OlxuICAgKiAtIElmIHRoZSB3aWR0aCBvciBoZWlnaHQgaW4gYW4gbnVtYmVyIHRoaXMgd2lsbCByZXR1cm4gdGhlIG51bWJlciBwb3N0Zml4ZWQgd2l0aCAncHgnLlxuICAgKiAtIElmIHRoZSB3aWR0aC9oZWlnaHQgaXMgYSBwZXJjZW50IHRoaXMgd2lsbCByZXR1cm4gdGhlIHBlcmNlbnQgcG9zdGZpeGVkIHdpdGggJyUnXG4gICAqIC0gSGlkZGVuIGVsZW1lbnRzIGhhdmUgYSB3aWR0aCBvZiAwIHdpdGggYHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlYC4gVGhpcyBmdW5jdGlvblxuICAgKiAgIGRlZmF1bHRzIHRvIHRoZSBgQ29tcG9uZW50YHMgYHN0eWxlLndpZHRoYCBhbmQgZmFsbHMgYmFjayB0byBgd2luZG93LmdldENvbXB1dGVkU3R5bGVgLlxuICAgKiAgIFNlZSBbdGhpc117QGxpbmsgaHR0cDovL3d3dy5mb2xpb3Rlay5jb20vZGV2YmxvZy9nZXR0aW5nLXRoZS13aWR0aC1vZi1hLWhpZGRlbi1lbGVtZW50LXdpdGgtanF1ZXJ5LXVzaW5nLXdpZHRoL31cbiAgICogICBmb3IgbW9yZSBpbmZvcm1hdGlvblxuICAgKiAtIElmIHlvdSB3YW50IHRoZSBjb21wdXRlZCBzdHlsZSBvZiB0aGUgY29tcG9uZW50LCB1c2Uge0BsaW5rIENvbXBvbmVudCNjdXJyZW50V2lkdGh9XG4gICAqICAgYW5kIHtAbGluayB7Q29tcG9uZW50I2N1cnJlbnRIZWlnaHR9XG4gICAqXG4gICAqIEBmaXJlcyBDb21wb25lbnQjY29tcG9uZW50cmVzaXplXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3aWR0aE9ySGVpZ2h0XG4gICA4ICAgICAgICAnd2lkdGgnIG9yICdoZWlnaHQnXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcnxzdHJpbmd9IFtudW1dXG4gICA4ICAgICAgICAgTmV3IGRpbWVuc2lvblxuICAgKlxuICAgKiBAcGFyYW0gIHtib29sZWFufSBbc2tpcExpc3RlbmVyc11cbiAgICogICAgICAgICBTa2lwIGNvbXBvbmVudHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZGltZW5zaW9uIHdoZW4gZ2V0dGluZyBvciAwIGlmIHVuc2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpbWVuc2lvbiA9IGZ1bmN0aW9uIGRpbWVuc2lvbih3aWR0aE9ySGVpZ2h0LCBudW0sIHNraXBMaXN0ZW5lcnMpIHtcbiAgICBpZiAobnVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFNldCB0byB6ZXJvIGlmIG51bGwgb3IgbGl0ZXJhbGx5IE5hTiAoTmFOICE9PSBOYU4pXG4gICAgICBpZiAobnVtID09PSBudWxsIHx8IG51bSAhPT0gbnVtKSB7XG4gICAgICAgIG51bSA9IDA7XG4gICAgICB9IC8vIENoZWNrIGlmIHVzaW5nIGNzcyB3aWR0aC9oZWlnaHQgKCUgb3IgcHgpIGFuZCBhZGp1c3RcblxuXG4gICAgICBpZiAoKCcnICsgbnVtKS5pbmRleE9mKCclJykgIT09IC0xIHx8ICgnJyArIG51bSkuaW5kZXhPZigncHgnKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5lbF8uc3R5bGVbd2lkdGhPckhlaWdodF0gPSBudW07XG4gICAgICB9IGVsc2UgaWYgKG51bSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHRoaXMuZWxfLnN0eWxlW3dpZHRoT3JIZWlnaHRdID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XSA9IG51bSArICdweCc7XG4gICAgICB9IC8vIHNraXBMaXN0ZW5lcnMgYWxsb3dzIHVzIHRvIGF2b2lkIHRyaWdnZXJpbmcgdGhlIHJlc2l6ZSBldmVudCB3aGVuIHNldHRpbmcgYm90aCB3aWR0aCBhbmQgaGVpZ2h0XG5cblxuICAgICAgaWYgKCFza2lwTGlzdGVuZXJzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIGNvbXBvbmVudCBpcyByZXNpemVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgQ29tcG9uZW50I2NvbXBvbmVudHJlc2l6ZVxuICAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2NvbXBvbmVudHJlc2l6ZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBOb3Qgc2V0dGluZyBhIHZhbHVlLCBzbyBnZXR0aW5nIGl0XG4gICAgLy8gTWFrZSBzdXJlIGVsZW1lbnQgZXhpc3RzXG5cblxuICAgIGlmICghdGhpcy5lbF8pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gLy8gR2V0IGRpbWVuc2lvbiB2YWx1ZSBmcm9tIHN0eWxlXG5cblxuICAgIHZhciB2YWwgPSB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XTtcbiAgICB2YXIgcHhJbmRleCA9IHZhbC5pbmRleE9mKCdweCcpO1xuXG4gICAgaWYgKHB4SW5kZXggIT09IC0xKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIHBpeGVsIHZhbHVlIHdpdGggbm8gJ3B4J1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbC5zbGljZSgwLCBweEluZGV4KSwgMTApO1xuICAgIH0gLy8gTm8gcHggc28gdXNpbmcgJSBvciBubyBzdHlsZSB3YXMgc2V0LCBzbyBmYWxsaW5nIGJhY2sgdG8gb2Zmc2V0V2lkdGgvaGVpZ2h0XG4gICAgLy8gSWYgY29tcG9uZW50IGhhcyBkaXNwbGF5Om5vbmUsIG9mZnNldCB3aWxsIHJldHVybiAwXG4gICAgLy8gVE9ETzogaGFuZGxlIGRpc3BsYXk6bm9uZSBhbmQgbm8gZGltZW5zaW9uIHN0eWxlIHVzaW5nIHB4XG5cblxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmVsX1snb2Zmc2V0JyArIHRvVGl0bGVDYXNlKHdpZHRoT3JIZWlnaHQpXSwgMTApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXB1dGVkIHdpZHRoIG9yIHRoZSBoZWlnaHQgb2YgdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQuXG4gICAqXG4gICAqIFVzZXMgYHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdpZHRoT3JIZWlnaHRcbiAgICogICAgICAgIEEgc3RyaW5nIGNvbnRhaW5pbmcgJ3dpZHRoJyBvciAnaGVpZ2h0Jy4gV2hpY2hldmVyIG9uZSB5b3Ugd2FudCB0byBnZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZGltZW5zaW9uIHRoYXQgZ2V0cyBhc2tlZCBmb3Igb3IgMCBpZiBub3RoaW5nIHdhcyBzZXRcbiAgICogICAgICAgICBmb3IgdGhhdCBkaW1lbnNpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnREaW1lbnNpb24gPSBmdW5jdGlvbiBjdXJyZW50RGltZW5zaW9uKHdpZHRoT3JIZWlnaHQpIHtcbiAgICB2YXIgY29tcHV0ZWRXaWR0aE9ySGVpZ2h0ID0gMDtcblxuICAgIGlmICh3aWR0aE9ySGVpZ2h0ICE9PSAnd2lkdGgnICYmIHdpZHRoT3JIZWlnaHQgIT09ICdoZWlnaHQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N1cnJlbnREaW1lbnNpb24gb25seSBhY2NlcHRzIHdpZHRoIG9yIGhlaWdodCB2YWx1ZScpO1xuICAgIH1cblxuICAgIGNvbXB1dGVkV2lkdGhPckhlaWdodCA9IGNvbXB1dGVkU3R5bGUodGhpcy5lbF8sIHdpZHRoT3JIZWlnaHQpOyAvLyByZW1vdmUgJ3B4JyBmcm9tIHZhcmlhYmxlIGFuZCBwYXJzZSBhcyBpbnRlZ2VyXG5cbiAgICBjb21wdXRlZFdpZHRoT3JIZWlnaHQgPSBwYXJzZUZsb2F0KGNvbXB1dGVkV2lkdGhPckhlaWdodCk7IC8vIGlmIHRoZSBjb21wdXRlZCB2YWx1ZSBpcyBzdGlsbCAwLCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGJyb3dzZXIgaXMgbHlpbmdcbiAgICAvLyBhbmQgd2Ugd2FudCB0byBjaGVjayB0aGUgb2Zmc2V0IHZhbHVlcy5cbiAgICAvLyBUaGlzIGNvZGUgYWxzbyBydW5zIHdoZXJldmVyIGdldENvbXB1dGVkU3R5bGUgZG9lc24ndCBleGlzdC5cblxuICAgIGlmIChjb21wdXRlZFdpZHRoT3JIZWlnaHQgPT09IDAgfHwgaXNOYU4oY29tcHV0ZWRXaWR0aE9ySGVpZ2h0KSkge1xuICAgICAgdmFyIHJ1bGUgPSBcIm9mZnNldFwiICsgdG9UaXRsZUNhc2Uod2lkdGhPckhlaWdodCk7XG4gICAgICBjb21wdXRlZFdpZHRoT3JIZWlnaHQgPSB0aGlzLmVsX1tydWxlXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcHV0ZWRXaWR0aE9ySGVpZ2h0O1xuICB9XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcyBvZiB0aGUgYENvbXBvbmVudGBzXG4gICAqIGNvbXB1dGVkIHN0eWxlLiBVc2VzIGB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZWAuXG4gICAqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IENvbXBvbmVudH5EaW1lbnNpb25PYmplY3RcbiAgICpcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoXG4gICAqICAgICAgICAgICBUaGUgd2lkdGggb2YgdGhlIGBDb21wb25lbnRgcyBjb21wdXRlZCBzdHlsZS5cbiAgICpcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodFxuICAgKiAgICAgICAgICAgVGhlIGhlaWdodCBvZiB0aGUgYENvbXBvbmVudGBzIGNvbXB1dGVkIHN0eWxlLlxuICAgKi9cblxuICAvKipcbiAgICogR2V0IGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGNvbXB1dGVkIHdpZHRoIGFuZCBoZWlnaHQgdmFsdWVzIG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBlbGVtZW50LlxuICAgKlxuICAgKiBVc2VzIGB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH5EaW1lbnNpb25PYmplY3R9XG4gICAqICAgICAgICAgVGhlIGNvbXB1dGVkIGRpbWVuc2lvbnMgb2YgdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnREaW1lbnNpb25zID0gZnVuY3Rpb24gY3VycmVudERpbWVuc2lvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiB0aGlzLmN1cnJlbnREaW1lbnNpb24oJ3dpZHRoJyksXG4gICAgICBoZWlnaHQ6IHRoaXMuY3VycmVudERpbWVuc2lvbignaGVpZ2h0JylcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXB1dGVkIHdpZHRoIG9mIHRoZSBjb21wb25lbnQncyBlbGVtZW50LlxuICAgKlxuICAgKiBVc2VzIGB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY29tcHV0ZWQgd2lkdGggb2YgdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRXaWR0aCA9IGZ1bmN0aW9uIGN1cnJlbnRXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RGltZW5zaW9uKCd3aWR0aCcpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXB1dGVkIGhlaWdodCBvZiB0aGUgY29tcG9uZW50J3MgZWxlbWVudC5cbiAgICpcbiAgICogVXNlcyBgd2luZG93LmdldENvbXB1dGVkU3R5bGVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGNvbXB1dGVkIGhlaWdodCBvZiB0aGUgY29tcG9uZW50J3MgZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudEhlaWdodCA9IGZ1bmN0aW9uIGN1cnJlbnRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudERpbWVuc2lvbignaGVpZ2h0Jyk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZm9jdXMgdG8gdGhpcyBjb21wb25lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZm9jdXMgPSBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICB0aGlzLmVsXy5mb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGZvY3VzIGZyb20gdGhpcyBjb21wb25lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYmx1ciA9IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgdGhpcy5lbF8uYmx1cigpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIHRoaXMgQ29tcG9uZW50IHJlY2VpdmVzIGEgYGtleWRvd25gIGV2ZW50IHdoaWNoIGl0IGRvZXMgbm90IHByb2Nlc3MsXG4gICAqICBpdCBwYXNzZXMgdGhlIGV2ZW50IHRvIHRoZSBQbGF5ZXIgZm9yIGhhbmRsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfKSB7XG4gICAgICAvLyBXZSBvbmx5IHN0b3AgcHJvcGFnYXRpb24gaGVyZSBiZWNhdXNlIHdlIHdhbnQgdW5oYW5kbGVkIGV2ZW50cyB0byBmYWxsXG4gICAgICAvLyBiYWNrIHRvIHRoZSBicm93c2VyLlxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnBsYXllcl8uaGFuZGxlS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBNYW55IGNvbXBvbmVudHMgdXNlZCB0byBoYXZlIGEgYGhhbmRsZUtleVByZXNzYCBtZXRob2QsIHdoaWNoIHdhcyBwb29ybHlcbiAgICogbmFtZWQgYmVjYXVzZSBpdCBsaXN0ZW5lZCB0byBhIGBrZXlkb3duYCBldmVudC4gVGhpcyBtZXRob2QgbmFtZSBub3dcbiAgICogZGVsZWdhdGVzIHRvIGBoYW5kbGVLZXlEb3duYC4gVGhpcyBtZWFucyBhbnlvbmUgY2FsbGluZyBgaGFuZGxlS2V5UHJlc3NgXG4gICAqIHdpbGwgbm90IHNlZSB0aGVpciBtZXRob2QgY2FsbHMgc3RvcCB3b3JraW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlQcmVzcyA9IGZ1bmN0aW9uIGhhbmRsZUtleVByZXNzKGV2ZW50KSB7XG4gICAgdGhpcy5oYW5kbGVLZXlEb3duKGV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogRW1pdCBhICd0YXAnIGV2ZW50cyB3aGVuIHRvdWNoIGV2ZW50IHN1cHBvcnQgZ2V0cyBkZXRlY3RlZC4gVGhpcyBnZXRzIHVzZWQgdG9cbiAgICogc3VwcG9ydCB0b2dnbGluZyB0aGUgY29udHJvbHMgdGhyb3VnaCBhIHRhcCBvbiB0aGUgdmlkZW8uIFRoZXkgZ2V0IGVuYWJsZWRcbiAgICogYmVjYXVzZSBldmVyeSBzdWItY29tcG9uZW50IHdvdWxkIGhhdmUgZXh0cmEgb3ZlcmhlYWQgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZmlyZXMgQ29tcG9uZW50I3RhcFxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjdG91Y2hzdGFydFxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjdG91Y2htb3ZlXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaGxlYXZlXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaGNhbmNlbFxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjdG91Y2hlbmRcbiAgICAqL1xuICA7XG5cbiAgX3Byb3RvLmVtaXRUYXBFdmVudHMgPSBmdW5jdGlvbiBlbWl0VGFwRXZlbnRzKCkge1xuICAgIC8vIFRyYWNrIHRoZSBzdGFydCB0aW1lIHNvIHdlIGNhbiBkZXRlcm1pbmUgaG93IGxvbmcgdGhlIHRvdWNoIGxhc3RlZFxuICAgIHZhciB0b3VjaFN0YXJ0ID0gMDtcbiAgICB2YXIgZmlyc3RUb3VjaCA9IG51bGw7IC8vIE1heGltdW0gbW92ZW1lbnQgYWxsb3dlZCBkdXJpbmcgYSB0b3VjaCBldmVudCB0byBzdGlsbCBiZSBjb25zaWRlcmVkIGEgdGFwXG4gICAgLy8gT3RoZXIgcG9wdWxhciBsaWJzIHVzZSBhbnl3aGVyZSBmcm9tIDIgKGhhbW1lci5qcykgdG8gMTUsXG4gICAgLy8gc28gMTAgc2VlbXMgbGlrZSBhIG5pY2UsIHJvdW5kIG51bWJlci5cblxuICAgIHZhciB0YXBNb3ZlbWVudFRocmVzaG9sZCA9IDEwOyAvLyBUaGUgbWF4aW11bSBsZW5ndGggYSB0b3VjaCBjYW4gYmUgd2hpbGUgc3RpbGwgYmVpbmcgY29uc2lkZXJlZCBhIHRhcFxuXG4gICAgdmFyIHRvdWNoVGltZVRocmVzaG9sZCA9IDIwMDtcbiAgICB2YXIgY291bGRCZVRhcDtcbiAgICB0aGlzLm9uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGZpbmdlciwgZG9uJ3QgY29uc2lkZXIgdHJlYXRpbmcgdGhpcyBhcyBhIGNsaWNrXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gQ29weSBwYWdlWC9wYWdlWSBmcm9tIHRoZSBvYmplY3RcbiAgICAgICAgZmlyc3RUb3VjaCA9IHtcbiAgICAgICAgICBwYWdlWDogZXZlbnQudG91Y2hlc1swXS5wYWdlWCxcbiAgICAgICAgICBwYWdlWTogZXZlbnQudG91Y2hlc1swXS5wYWdlWVxuICAgICAgICB9OyAvLyBSZWNvcmQgc3RhcnQgdGltZSBzbyB3ZSBjYW4gZGV0ZWN0IGEgdGFwIHZzLiBcInRvdWNoIGFuZCBob2xkXCJcblxuICAgICAgICB0b3VjaFN0YXJ0ID0gd2luZG93JDEucGVyZm9ybWFuY2Uubm93KCk7IC8vIFJlc2V0IGNvdWxkQmVUYXAgdHJhY2tpbmdcblxuICAgICAgICBjb3VsZEJlVGFwID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm9uKCd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIElmIG1vcmUgdGhhbiBvbmUgZmluZ2VyLCBkb24ndCBjb25zaWRlciB0cmVhdGluZyB0aGlzIGFzIGEgY2xpY2tcbiAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY291bGRCZVRhcCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChmaXJzdFRvdWNoKSB7XG4gICAgICAgIC8vIFNvbWUgZGV2aWNlcyB3aWxsIHRocm93IHRvdWNobW92ZXMgZm9yIGFsbCBidXQgdGhlIHNsaWdodGVzdCBvZiB0YXBzLlxuICAgICAgICAvLyBTbywgaWYgd2UgbW92ZWQgb25seSBhIHNtYWxsIGRpc3RhbmNlLCB0aGlzIGNvdWxkIHN0aWxsIGJlIGEgdGFwXG4gICAgICAgIHZhciB4ZGlmZiA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggLSBmaXJzdFRvdWNoLnBhZ2VYO1xuICAgICAgICB2YXIgeWRpZmYgPSBldmVudC50b3VjaGVzWzBdLnBhZ2VZIC0gZmlyc3RUb3VjaC5wYWdlWTtcbiAgICAgICAgdmFyIHRvdWNoRGlzdGFuY2UgPSBNYXRoLnNxcnQoeGRpZmYgKiB4ZGlmZiArIHlkaWZmICogeWRpZmYpO1xuXG4gICAgICAgIGlmICh0b3VjaERpc3RhbmNlID4gdGFwTW92ZW1lbnRUaHJlc2hvbGQpIHtcbiAgICAgICAgICBjb3VsZEJlVGFwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBub1RhcCA9IGZ1bmN0aW9uIG5vVGFwKCkge1xuICAgICAgY291bGRCZVRhcCA9IGZhbHNlO1xuICAgIH07IC8vIFRPRE86IExpc3RlbiB0byB0aGUgb3JpZ2luYWwgdGFyZ2V0LiBodHRwOi8veW91dHUuYmUvRHVqZnBYT0tVcDg/dD0xM204c1xuXG5cbiAgICB0aGlzLm9uKCd0b3VjaGxlYXZlJywgbm9UYXApO1xuICAgIHRoaXMub24oJ3RvdWNoY2FuY2VsJywgbm9UYXApOyAvLyBXaGVuIHRoZSB0b3VjaCBlbmRzLCBtZWFzdXJlIGhvdyBsb25nIGl0IHRvb2sgYW5kIHRyaWdnZXIgdGhlIGFwcHJvcHJpYXRlXG4gICAgLy8gZXZlbnRcblxuICAgIHRoaXMub24oJ3RvdWNoZW5kJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBmaXJzdFRvdWNoID0gbnVsbDsgLy8gUHJvY2VlZCBvbmx5IGlmIHRoZSB0b3VjaG1vdmUvbGVhdmUvY2FuY2VsIGV2ZW50IGRpZG4ndCBoYXBwZW5cblxuICAgICAgaWYgKGNvdWxkQmVUYXAgPT09IHRydWUpIHtcbiAgICAgICAgLy8gTWVhc3VyZSBob3cgbG9uZyB0aGUgdG91Y2ggbGFzdGVkXG4gICAgICAgIHZhciB0b3VjaFRpbWUgPSB3aW5kb3ckMS5wZXJmb3JtYW5jZS5ub3coKSAtIHRvdWNoU3RhcnQ7IC8vIE1ha2Ugc3VyZSB0aGUgdG91Y2ggd2FzIGxlc3MgdGhhbiB0aGUgdGhyZXNob2xkIHRvIGJlIGNvbnNpZGVyZWQgYSB0YXBcblxuICAgICAgICBpZiAodG91Y2hUaW1lIDwgdG91Y2hUaW1lVGhyZXNob2xkKSB7XG4gICAgICAgICAgLy8gRG9uJ3QgbGV0IGJyb3dzZXIgdHVybiB0aGlzIGludG8gYSBjbGlja1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVHJpZ2dlcmVkIHdoZW4gYSBgQ29tcG9uZW50YCBpcyB0YXBwZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZXZlbnQgQ29tcG9uZW50I3RhcFxuICAgICAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAgICAgKi9cblxuICAgICAgICAgIHRoaXMudHJpZ2dlcigndGFwJyk7IC8vIEl0IG1heSBiZSBnb29kIHRvIGNvcHkgdGhlIHRvdWNoZW5kIGV2ZW50IG9iamVjdCBhbmQgY2hhbmdlIHRoZVxuICAgICAgICAgIC8vIHR5cGUgdG8gdGFwLCBpZiB0aGUgb3RoZXIgZXZlbnQgcHJvcGVydGllcyBhcmVuJ3QgZXhhY3QgYWZ0ZXJcbiAgICAgICAgICAvLyBFdmVudHMuZml4RXZlbnQgcnVucyAoZS5nLiBldmVudC50YXJnZXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXBvcnRzIHVzZXIgYWN0aXZpdHkgd2hlbmV2ZXIgdG91Y2ggZXZlbnRzIGhhcHBlbi4gVGhpcyBjYW4gZ2V0XG4gICAqIHR1cm5lZCBvZmYgYnkgYW55IHN1Yi1jb21wb25lbnRzIHRoYXQgd2FudHMgdG91Y2ggZXZlbnRzIHRvIGFjdCBhbm90aGVyIHdheS5cbiAgICpcbiAgICogUmVwb3J0IHVzZXIgdG91Y2ggYWN0aXZpdHkgd2hlbiB0b3VjaCBldmVudHMgb2NjdXIuIFVzZXIgYWN0aXZpdHkgZ2V0cyB1c2VkIHRvXG4gICAqIGRldGVybWluZSB3aGVuIGNvbnRyb2xzIHNob3VsZCBzaG93L2hpZGUuIEl0IGlzIHNpbXBsZSB3aGVuIGl0IGNvbWVzIHRvIG1vdXNlXG4gICAqIGV2ZW50cywgYmVjYXVzZSBhbnkgbW91c2UgZXZlbnQgc2hvdWxkIHNob3cgdGhlIGNvbnRyb2xzLiBTbyB3ZSBjYXB0dXJlIG1vdXNlXG4gICAqIGV2ZW50cyB0aGF0IGJ1YmJsZSB1cCB0byB0aGUgcGxheWVyIGFuZCByZXBvcnQgYWN0aXZpdHkgd2hlbiB0aGF0IGhhcHBlbnMuXG4gICAqIFdpdGggdG91Y2ggZXZlbnRzIGl0IGlzbid0IGFzIGVhc3kgYXMgYHRvdWNoc3RhcnRgIGFuZCBgdG91Y2hlbmRgIHRvZ2dsZSBwbGF5ZXJcbiAgICogY29udHJvbHMuIFNvIHRvdWNoIGV2ZW50cyBjYW4ndCBoZWxwIHVzIGF0IHRoZSBwbGF5ZXIgbGV2ZWwgZWl0aGVyLlxuICAgKlxuICAgKiBVc2VyIGFjdGl2aXR5IGdldHMgY2hlY2tlZCBhc3luY2hyb25vdXNseS4gU28gd2hhdCBjb3VsZCBoYXBwZW4gaXMgYSB0YXAgZXZlbnRcbiAgICogb24gdGhlIHZpZGVvIHR1cm5zIHRoZSBjb250cm9scyBvZmYuIFRoZW4gdGhlIGB0b3VjaGVuZGAgZXZlbnQgYnViYmxlcyB1cCB0b1xuICAgKiB0aGUgcGxheWVyLiBXaGljaCwgaWYgaXQgcmVwb3J0ZWQgdXNlciBhY3Rpdml0eSwgd291bGQgdHVybiB0aGUgY29udHJvbHMgcmlnaHRcbiAgICogYmFjayBvbi4gV2UgYWxzbyBkb24ndCB3YW50IHRvIGNvbXBsZXRlbHkgYmxvY2sgdG91Y2ggZXZlbnRzIGZyb20gYnViYmxpbmcgdXAuXG4gICAqIEZ1cnRoZXJtb3JlIGEgYHRvdWNobW92ZWAgZXZlbnQgYW5kIGFueXRoaW5nIG90aGVyIHRoYW4gYSB0YXAsIHNob3VsZCBub3QgdHVyblxuICAgKiBjb250cm9scyBiYWNrIG9uLlxuICAgKlxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjdG91Y2hzdGFydFxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjdG91Y2htb3ZlXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaGVuZFxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjdG91Y2hjYW5jZWxcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5hYmxlVG91Y2hBY3Rpdml0eSA9IGZ1bmN0aW9uIGVuYWJsZVRvdWNoQWN0aXZpdHkoKSB7XG4gICAgLy8gRG9uJ3QgY29udGludWUgaWYgdGhlIHJvb3QgcGxheWVyIGRvZXNuJ3Qgc3VwcG9ydCByZXBvcnRpbmcgdXNlciBhY3Rpdml0eVxuICAgIGlmICghdGhpcy5wbGF5ZXIoKSB8fCAhdGhpcy5wbGF5ZXIoKS5yZXBvcnRVc2VyQWN0aXZpdHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGxpc3RlbmVyIGZvciByZXBvcnRpbmcgdGhhdCB0aGUgdXNlciBpcyBhY3RpdmVcblxuXG4gICAgdmFyIHJlcG9ydCA9IGJpbmQodGhpcy5wbGF5ZXIoKSwgdGhpcy5wbGF5ZXIoKS5yZXBvcnRVc2VyQWN0aXZpdHkpO1xuICAgIHZhciB0b3VjaEhvbGRpbmc7XG4gICAgdGhpcy5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlcG9ydCgpOyAvLyBGb3IgYXMgbG9uZyBhcyB0aGUgdGhleSBhcmUgdG91Y2hpbmcgdGhlIGRldmljZSBvciBoYXZlIHRoZWlyIG1vdXNlIGRvd24sXG4gICAgICAvLyB3ZSBjb25zaWRlciB0aGVtIGFjdGl2ZSBldmVuIGlmIHRoZXkncmUgbm90IG1vdmluZyB0aGVpciBmaW5nZXIgb3IgbW91c2UuXG4gICAgICAvLyBTbyB3ZSB3YW50IHRvIGNvbnRpbnVlIHRvIHVwZGF0ZSB0aGF0IHRoZXkgYXJlIGFjdGl2ZVxuXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwodG91Y2hIb2xkaW5nKTsgLy8gcmVwb3J0IGF0IHRoZSBzYW1lIGludGVydmFsIGFzIGFjdGl2aXR5Q2hlY2tcblxuICAgICAgdG91Y2hIb2xkaW5nID0gdGhpcy5zZXRJbnRlcnZhbChyZXBvcnQsIDI1MCk7XG4gICAgfSk7XG5cbiAgICB2YXIgdG91Y2hFbmQgPSBmdW5jdGlvbiB0b3VjaEVuZChldmVudCkge1xuICAgICAgcmVwb3J0KCk7IC8vIHN0b3AgdGhlIGludGVydmFsIHRoYXQgbWFpbnRhaW5zIGFjdGl2aXR5IGlmIHRoZSB0b3VjaCBpcyBob2xkaW5nXG5cbiAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0b3VjaEhvbGRpbmcpO1xuICAgIH07XG5cbiAgICB0aGlzLm9uKCd0b3VjaG1vdmUnLCByZXBvcnQpO1xuICAgIHRoaXMub24oJ3RvdWNoZW5kJywgdG91Y2hFbmQpO1xuICAgIHRoaXMub24oJ3RvdWNoY2FuY2VsJywgdG91Y2hFbmQpO1xuICB9XG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIHRoYXQgaGFzIG5vIHBhcmFtZXRlcnMgYW5kIGlzIGJvdW5kIGludG8gYENvbXBvbmVudGBzIGNvbnRleHQuXG4gICAqXG4gICAqIEBjYWxsYmFjayBDb21wb25lbnR+R2VuZXJpY0NhbGxiYWNrXG4gICAqIEB0aGlzIENvbXBvbmVudFxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcnVucyBhZnRlciBhbiBgeGAgbWlsbGlzZWNvbmQgdGltZW91dC4gVGhpcyBmdW5jdGlvbiBpcyBhXG4gICAqIHdyYXBwZXIgYXJvdW5kIGB3aW5kb3cuc2V0VGltZW91dGAuIFRoZXJlIGFyZSBhIGZldyByZWFzb25zIHRvIHVzZSB0aGlzIG9uZVxuICAgKiBpbnN0ZWFkIHRob3VnaDpcbiAgICogMS4gSXQgZ2V0cyBjbGVhcmVkIHZpYSAge0BsaW5rIENvbXBvbmVudCNjbGVhclRpbWVvdXR9IHdoZW5cbiAgICogICAge0BsaW5rIENvbXBvbmVudCNkaXNwb3NlfSBnZXRzIGNhbGxlZC5cbiAgICogMi4gVGhlIGZ1bmN0aW9uIGNhbGxiYWNrIHdpbGwgZ2V0cyB0dXJuZWQgaW50byBhIHtAbGluayBDb21wb25lbnR+R2VuZXJpY0NhbGxiYWNrfVxuICAgKlxuICAgKiA+IE5vdGU6IFlvdSBjYW4ndCB1c2UgYHdpbmRvdy5jbGVhclRpbWVvdXRgIG9uIHRoZSBpZCByZXR1cm5lZCBieSB0aGlzIGZ1bmN0aW9uLiBUaGlzXG4gICAqICAgICAgICAgd2lsbCBjYXVzZSBpdHMgZGlzcG9zZSBsaXN0ZW5lciBub3QgdG8gZ2V0IGNsZWFuZWQgdXAhIFBsZWFzZSB1c2VcbiAgICogICAgICAgICB7QGxpbmsgQ29tcG9uZW50I2NsZWFyVGltZW91dH0gb3Ige0BsaW5rIENvbXBvbmVudCNkaXNwb3NlfSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5HZW5lcmljQ2FsbGJhY2t9IGZuXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHJ1biBhZnRlciBgdGltZW91dGAuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0XG4gICAqICAgICAgICBUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBkZWxheSBiZWZvcmUgZXhlY3V0aW5nIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBSZXR1cm5zIGEgdGltZW91dCBJRCB0aGF0IGdldHMgdXNlZCB0byBpZGVudGlmeSB0aGUgdGltZW91dC4gSXQgY2FuIGFsc29cbiAgICogICAgICAgICBnZXQgdXNlZCBpbiB7QGxpbmsgQ29tcG9uZW50I2NsZWFyVGltZW91dH0gdG8gY2xlYXIgdGhlIHRpbWVvdXQgdGhhdFxuICAgKiAgICAgICAgIHdhcyBzZXQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCNkaXNwb3NlXG4gICAqIEBzZWUgW1NpbWlsYXIgdG9de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvc2V0VGltZW91dH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0VGltZW91dCA9IGZ1bmN0aW9uIHNldFRpbWVvdXQoZm4sIHRpbWVvdXQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIC8vIGRlY2xhcmUgYXMgdmFyaWFibGVzIHNvIHRoZXkgYXJlIHByb3Blcmx5IGF2YWlsYWJsZSBpbiB0aW1lb3V0IGZ1bmN0aW9uXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdmFyIHRpbWVvdXRJZDtcbiAgICBmbiA9IGJpbmQodGhpcywgZm4pO1xuICAgIHRoaXMuY2xlYXJUaW1lcnNPbkRpc3Bvc2VfKCk7XG4gICAgdGltZW91dElkID0gd2luZG93JDEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMyLnNldFRpbWVvdXRJZHNfLmhhcyh0aW1lb3V0SWQpKSB7XG4gICAgICAgIF90aGlzMi5zZXRUaW1lb3V0SWRzX1tcImRlbGV0ZVwiXSh0aW1lb3V0SWQpO1xuICAgICAgfVxuXG4gICAgICBmbigpO1xuICAgIH0sIHRpbWVvdXQpO1xuICAgIHRoaXMuc2V0VGltZW91dElkc18uYWRkKHRpbWVvdXRJZCk7XG4gICAgcmV0dXJuIHRpbWVvdXRJZDtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIGEgdGltZW91dCB0aGF0IGdldHMgY3JlYXRlZCB2aWEgYHdpbmRvdy5zZXRUaW1lb3V0YCBvclxuICAgKiB7QGxpbmsgQ29tcG9uZW50I3NldFRpbWVvdXR9LiBJZiB5b3Ugc2V0IGEgdGltZW91dCB2aWEge0BsaW5rIENvbXBvbmVudCNzZXRUaW1lb3V0fVxuICAgKiB1c2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGB3aW5kb3cuY2xlYXJUaW1vdXRgLiBJZiB5b3UgZG9uJ3QgeW91ciBkaXNwb3NlXG4gICAqIGxpc3RlbmVyIHdpbGwgbm90IGdldCBjbGVhbmVkIHVwIHVudGlsIHtAbGluayBDb21wb25lbnQjZGlzcG9zZX0hXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0SWRcbiAgICogICAgICAgIFRoZSBpZCBvZiB0aGUgdGltZW91dCB0byBjbGVhci4gVGhlIHJldHVybiB2YWx1ZSBvZlxuICAgKiAgICAgICAge0BsaW5rIENvbXBvbmVudCNzZXRUaW1lb3V0fSBvciBgd2luZG93LnNldFRpbWVvdXRgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgUmV0dXJucyB0aGUgdGltZW91dCBpZCB0aGF0IHdhcyBjbGVhcmVkLlxuICAgKlxuICAgKiBAc2VlIFtTaW1pbGFyIHRvXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93VGltZXJzL2NsZWFyVGltZW91dH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCkge1xuICAgIGlmICh0aGlzLnNldFRpbWVvdXRJZHNfLmhhcyh0aW1lb3V0SWQpKSB7XG4gICAgICB0aGlzLnNldFRpbWVvdXRJZHNfW1wiZGVsZXRlXCJdKHRpbWVvdXRJZCk7XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHJ1biBldmVyeSBgeGAgbWlsbGlzZWNvbmRzLiBUaGlzIGZ1bmN0aW9uIGlzIGEgd3JhcHBlclxuICAgKiBhcm91bmQgYHdpbmRvdy5zZXRJbnRlcnZhbGAuIFRoZXJlIGFyZSBhIGZldyByZWFzb25zIHRvIHVzZSB0aGlzIG9uZSBpbnN0ZWFkIHRob3VnaC5cbiAgICogMS4gSXQgZ2V0cyBjbGVhcmVkIHZpYSAge0BsaW5rIENvbXBvbmVudCNjbGVhckludGVydmFsfSB3aGVuXG4gICAqICAgIHtAbGluayBDb21wb25lbnQjZGlzcG9zZX0gZ2V0cyBjYWxsZWQuXG4gICAqIDIuIFRoZSBmdW5jdGlvbiBjYWxsYmFjayB3aWxsIGJlIGEge0BsaW5rIENvbXBvbmVudH5HZW5lcmljQ2FsbGJhY2t9XG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50fkdlbmVyaWNDYWxsYmFja30gZm5cbiAgICogICAgICAgIFRoZSBmdW5jdGlvbiB0byBydW4gZXZlcnkgYHhgIHNlY29uZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbFxuICAgKiAgICAgICAgRXhlY3V0ZSB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGV2ZXJ5IGB4YCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBSZXR1cm5zIGFuIGlkIHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGludGVydmFsLiBJdCBjYW4gYWxzbyBiZSBiZSB1c2VkIGluXG4gICAqICAgICAgICAge0BsaW5rIENvbXBvbmVudCNjbGVhckludGVydmFsfSB0byBjbGVhciB0aGUgaW50ZXJ2YWwuXG4gICAqXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCNkaXNwb3NlXG4gICAqIEBzZWUgW1NpbWlsYXIgdG9de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvc2V0SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldEludGVydmFsID0gZnVuY3Rpb24gc2V0SW50ZXJ2YWwoZm4sIGludGVydmFsKSB7XG4gICAgZm4gPSBiaW5kKHRoaXMsIGZuKTtcbiAgICB0aGlzLmNsZWFyVGltZXJzT25EaXNwb3NlXygpO1xuICAgIHZhciBpbnRlcnZhbElkID0gd2luZG93JDEuc2V0SW50ZXJ2YWwoZm4sIGludGVydmFsKTtcbiAgICB0aGlzLnNldEludGVydmFsSWRzXy5hZGQoaW50ZXJ2YWxJZCk7XG4gICAgcmV0dXJuIGludGVydmFsSWQ7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBhbiBpbnRlcnZhbCB0aGF0IGdldHMgY3JlYXRlZCB2aWEgYHdpbmRvdy5zZXRJbnRlcnZhbGAgb3JcbiAgICoge0BsaW5rIENvbXBvbmVudCNzZXRJbnRlcnZhbH0uIElmIHlvdSBzZXQgYW4gaW50ZXZhbCB2aWEge0BsaW5rIENvbXBvbmVudCNzZXRJbnRlcnZhbH1cbiAgICogdXNlIHRoaXMgZnVuY3Rpb24gaW5zdGVhZCBvZiBgd2luZG93LmNsZWFySW50ZXJ2YWxgLiBJZiB5b3UgZG9uJ3QgeW91ciBkaXNwb3NlXG4gICAqIGxpc3RlbmVyIHdpbGwgbm90IGdldCBjbGVhbmVkIHVwIHVudGlsIHtAbGluayBDb21wb25lbnQjZGlzcG9zZX0hXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbElkXG4gICAqICAgICAgICBUaGUgaWQgb2YgdGhlIGludGVydmFsIHRvIGNsZWFyLiBUaGUgcmV0dXJuIHZhbHVlIG9mXG4gICAqICAgICAgICB7QGxpbmsgQ29tcG9uZW50I3NldEludGVydmFsfSBvciBgd2luZG93LnNldEludGVydmFsYC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFJldHVybnMgdGhlIGludGVydmFsIGlkIHRoYXQgd2FzIGNsZWFyZWQuXG4gICAqXG4gICAqIEBzZWUgW1NpbWlsYXIgdG9de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvY2xlYXJJbnRlcnZhbH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCkge1xuICAgIGlmICh0aGlzLnNldEludGVydmFsSWRzXy5oYXMoaW50ZXJ2YWxJZCkpIHtcbiAgICAgIHRoaXMuc2V0SW50ZXJ2YWxJZHNfW1wiZGVsZXRlXCJdKGludGVydmFsSWQpO1xuICAgICAgd2luZG93JDEuY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJ2YWxJZDtcbiAgfVxuICAvKipcbiAgICogUXVldWVzIHVwIGEgY2FsbGJhY2sgdG8gYmUgcGFzc2VkIHRvIHJlcXVlc3RBbmltYXRpb25GcmFtZSAockFGKSwgYnV0XG4gICAqIHdpdGggYSBmZXcgZXh0cmEgYm9udXNlczpcbiAgICpcbiAgICogLSBTdXBwb3J0cyBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IHJBRiBieSBmYWxsaW5nIGJhY2sgdG9cbiAgICogICB7QGxpbmsgQ29tcG9uZW50I3NldFRpbWVvdXR9LlxuICAgKlxuICAgKiAtIFRoZSBjYWxsYmFjayBpcyB0dXJuZWQgaW50byBhIHtAbGluayBDb21wb25lbnR+R2VuZXJpY0NhbGxiYWNrfSAoaS5lLlxuICAgKiAgIGJvdW5kIHRvIHRoZSBjb21wb25lbnQpLlxuICAgKlxuICAgKiAtIEF1dG9tYXRpYyBjYW5jZWxsYXRpb24gb2YgdGhlIHJBRiBjYWxsYmFjayBpcyBoYW5kbGVkIGlmIHRoZSBjb21wb25lbnRcbiAgICogICBpcyBkaXNwb3NlZCBiZWZvcmUgaXQgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtDb21wb25lbnR+R2VuZXJpY0NhbGxiYWNrfSBmblxuICAgKiAgICAgICAgIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGJvdW5kIHRvIHRoaXMgY29tcG9uZW50IGFuZCBleGVjdXRlZCBqdXN0XG4gICAqICAgICAgICAgYmVmb3JlIHRoZSBicm93c2VyJ3MgbmV4dCByZXBhaW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgUmV0dXJucyBhbiByQUYgSUQgdGhhdCBnZXRzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIHRpbWVvdXQuIEl0IGNhblxuICAgKiAgICAgICAgIGFsc28gYmUgdXNlZCBpbiB7QGxpbmsgQ29tcG9uZW50I2NhbmNlbEFuaW1hdGlvbkZyYW1lfSB0byBjYW5jZWxcbiAgICogICAgICAgICB0aGUgYW5pbWF0aW9uIGZyYW1lIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbGlzdGVucyBDb21wb25lbnQjZGlzcG9zZVxuICAgKiBAc2VlIFtTaW1pbGFyIHRvXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93L3JlcXVlc3RBbmltYXRpb25GcmFtZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAvLyBGYWxsIGJhY2sgdG8gdXNpbmcgYSB0aW1lci5cbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNSYWZfKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRUaW1lb3V0KGZuLCAxMDAwIC8gNjApO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXJUaW1lcnNPbkRpc3Bvc2VfKCk7IC8vIGRlY2xhcmUgYXMgdmFyaWFibGVzIHNvIHRoZXkgYXJlIHByb3Blcmx5IGF2YWlsYWJsZSBpbiByQUYgZnVuY3Rpb25cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHZhciBpZDtcbiAgICBmbiA9IGJpbmQodGhpcywgZm4pO1xuICAgIGlkID0gd2luZG93JDEucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczMucmFmSWRzXy5oYXMoaWQpKSB7XG4gICAgICAgIF90aGlzMy5yYWZJZHNfW1wiZGVsZXRlXCJdKGlkKTtcbiAgICAgIH1cblxuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgICB0aGlzLnJhZklkc18uYWRkKGlkKTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgLyoqXG4gICAqIENhbmNlbHMgYSBxdWV1ZWQgY2FsbGJhY2sgcGFzc2VkIHRvIHtAbGluayBDb21wb25lbnQjcmVxdWVzdEFuaW1hdGlvbkZyYW1lfVxuICAgKiAockFGKS5cbiAgICpcbiAgICogSWYgeW91IHF1ZXVlIGFuIHJBRiBjYWxsYmFjayB2aWEge0BsaW5rIENvbXBvbmVudCNyZXF1ZXN0QW5pbWF0aW9uRnJhbWV9LFxuICAgKiB1c2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWVgLiBJZiB5b3UgZG9uJ3QsXG4gICAqIHlvdXIgZGlzcG9zZSBsaXN0ZW5lciB3aWxsIG5vdCBnZXQgY2xlYW5lZCB1cCB1bnRpbCB7QGxpbmsgQ29tcG9uZW50I2Rpc3Bvc2V9IVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICogICAgICAgIFRoZSByQUYgSUQgdG8gY2xlYXIuIFRoZSByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIENvbXBvbmVudCNyZXF1ZXN0QW5pbWF0aW9uRnJhbWV9LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgUmV0dXJucyB0aGUgckFGIElEIHRoYXQgd2FzIGNsZWFyZWQuXG4gICAqXG4gICAqIEBzZWUgW1NpbWlsYXIgdG9de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cvY2FuY2VsQW5pbWF0aW9uRnJhbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICAvLyBGYWxsIGJhY2sgdG8gdXNpbmcgYSB0aW1lci5cbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNSYWZfKSB7XG4gICAgICByZXR1cm4gdGhpcy5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJhZklkc18uaGFzKGlkKSkge1xuICAgICAgdGhpcy5yYWZJZHNfW1wiZGVsZXRlXCJdKGlkKTtcbiAgICAgIHdpbmRvdyQxLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gc2V0dXAgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAsIGBzZXRUaW1lb3V0YCxcbiAgICogYW5kIGBzZXRJbnRlcnZhbGAsIGNsZWFyaW5nIG9uIGRpc3Bvc2UuXG4gICAqXG4gICAqID4gUHJldmlvdXNseSBlYWNoIHRpbWVyIGFkZGVkIGFuZCByZW1vdmVkIGRpc3Bvc2UgbGlzdGVuZXJzIG9uIGl0J3Mgb3duLlxuICAgKiBGb3IgYmV0dGVyIHBlcmZvcm1hbmNlIGl0IHdhcyBkZWNpZGVkIHRvIGJhdGNoIHRoZW0gYWxsLCBhbmQgdXNlIGBTZXRgc1xuICAgKiB0byB0cmFjayBvdXRzdGFuZGluZyB0aW1lciBpZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsZWFyVGltZXJzT25EaXNwb3NlXyA9IGZ1bmN0aW9uIGNsZWFyVGltZXJzT25EaXNwb3NlXygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmICh0aGlzLmNsZWFyaW5nVGltZXJzT25EaXNwb3NlXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXJpbmdUaW1lcnNPbkRpc3Bvc2VfID0gdHJ1ZTtcbiAgICB0aGlzLm9uZSgnZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFtbJ3JhZklkc18nLCAnY2FuY2VsQW5pbWF0aW9uRnJhbWUnXSwgWydzZXRUaW1lb3V0SWRzXycsICdjbGVhclRpbWVvdXQnXSwgWydzZXRJbnRlcnZhbElkc18nLCAnY2xlYXJJbnRlcnZhbCddXS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBpZE5hbWUgPSBfcmVmWzBdLFxuICAgICAgICAgICAgY2FuY2VsTmFtZSA9IF9yZWZbMV07XG5cbiAgICAgICAgX3RoaXM0W2lkTmFtZV0uZm9yRWFjaChfdGhpczRbY2FuY2VsTmFtZV0sIF90aGlzNCk7XG4gICAgICB9KTtcbiAgICAgIF90aGlzNC5jbGVhcmluZ1RpbWVyc09uRGlzcG9zZV8gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBgQ29tcG9uZW50YCB3aXRoIGB2aWRlb2pzYCBnaXZlbiB0aGUgbmFtZSBhbmQgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogPiBOT1RFOiB7QGxpbmsgVGVjaH1zIHNob3VsZCBub3QgYmUgcmVnaXN0ZXJlZCBhcyBhIGBDb21wb25lbnRgLiB7QGxpbmsgVGVjaH1zXG4gICAqICAgICAgICAgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdXNpbmcge0BsaW5rIFRlY2gucmVnaXN0ZXJUZWNofSBvclxuICAgKiAgICAgICAgIHtAbGluayB2aWRlb2pzOnZpZGVvanMucmVnaXN0ZXJUZWNofS5cbiAgICpcbiAgICogPiBOT1RFOiBUaGlzIGZ1bmN0aW9uIGNhbiBhbHNvIGJlIHNlZW4gb24gdmlkZW9qcyBhc1xuICAgKiAgICAgICAgIHtAbGluayB2aWRlb2pzOnZpZGVvanMucmVnaXN0ZXJDb21wb25lbnR9LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGBDb21wb25lbnRgIHRvIHJlZ2lzdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gQ29tcG9uZW50VG9SZWdpc3RlclxuICAgKiAgICAgICAgVGhlIGBDb21wb25lbnRgIGNsYXNzIHRvIHJlZ2lzdGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqICAgICAgICAgVGhlIGBDb21wb25lbnRgIHRoYXQgd2FzIHJlZ2lzdGVyZWQuXG4gICAqL1xuICA7XG5cbiAgQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgQ29tcG9uZW50VG9SZWdpc3Rlcikge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgY29tcG9uZW50IG5hbWUsIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI7IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgVGVjaCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQoJ1RlY2gnKTsgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgdGhpcyBjaGVjayBpcyBvbmx5IGRvbmUgaWYgVGVjaCBoYXMgYmVlbiByZWdpc3RlcmVkLlxuXG4gICAgdmFyIGlzVGVjaCA9IFRlY2ggJiYgVGVjaC5pc1RlY2goQ29tcG9uZW50VG9SZWdpc3Rlcik7XG4gICAgdmFyIGlzQ29tcCA9IENvbXBvbmVudCA9PT0gQ29tcG9uZW50VG9SZWdpc3RlciB8fCBDb21wb25lbnQucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoQ29tcG9uZW50VG9SZWdpc3Rlci5wcm90b3R5cGUpO1xuXG4gICAgaWYgKGlzVGVjaCB8fCAhaXNDb21wKSB7XG4gICAgICB2YXIgcmVhc29uO1xuXG4gICAgICBpZiAoaXNUZWNoKSB7XG4gICAgICAgIHJlYXNvbiA9ICd0ZWNocyBtdXN0IGJlIHJlZ2lzdGVyZWQgdXNpbmcgVGVjaC5yZWdpc3RlclRlY2goKSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWFzb24gPSAnbXVzdCBiZSBhIENvbXBvbmVudCBzdWJjbGFzcyc7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgY29tcG9uZW50LCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOyBcIiArIHJlYXNvbiArIFwiLlwiKTtcbiAgICB9XG5cbiAgICBuYW1lID0gdG9UaXRsZUNhc2UobmFtZSk7XG5cbiAgICBpZiAoIUNvbXBvbmVudC5jb21wb25lbnRzXykge1xuICAgICAgQ29tcG9uZW50LmNvbXBvbmVudHNfID0ge307XG4gICAgfVxuXG4gICAgdmFyIFBsYXllciA9IENvbXBvbmVudC5nZXRDb21wb25lbnQoJ1BsYXllcicpO1xuXG4gICAgaWYgKG5hbWUgPT09ICdQbGF5ZXInICYmIFBsYXllciAmJiBQbGF5ZXIucGxheWVycykge1xuICAgICAgdmFyIHBsYXllcnMgPSBQbGF5ZXIucGxheWVycztcbiAgICAgIHZhciBwbGF5ZXJOYW1lcyA9IE9iamVjdC5rZXlzKHBsYXllcnMpOyAvLyBJZiB3ZSBoYXZlIHBsYXllcnMgdGhhdCB3ZXJlIGRpc3Bvc2VkLCB0aGVuIHRoZWlyIG5hbWUgd2lsbCBzdGlsbCBiZVxuICAgICAgLy8gaW4gUGxheWVycy5wbGF5ZXJzLiBTbywgd2UgbXVzdCBsb29wIHRocm91Z2ggYW5kIHZlcmlmeSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gZm9yIGVhY2ggaXRlbSBpcyBub3QgbnVsbC4gVGhpcyBhbGxvd3MgcmVnaXN0cmF0aW9uIG9mIHRoZSBQbGF5ZXIgY29tcG9uZW50XG4gICAgICAvLyBhZnRlciBhbGwgcGxheWVycyBoYXZlIGJlZW4gZGlzcG9zZWQgb3IgYmVmb3JlIGFueSB3ZXJlIGNyZWF0ZWQuXG5cbiAgICAgIGlmIChwbGF5ZXJzICYmIHBsYXllck5hbWVzLmxlbmd0aCA+IDAgJiYgcGxheWVyTmFtZXMubWFwKGZ1bmN0aW9uIChwbmFtZSkge1xuICAgICAgICByZXR1cm4gcGxheWVyc1twbmFtZV07XG4gICAgICB9KS5ldmVyeShCb29sZWFuKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgcmVnaXN0ZXIgUGxheWVyIGNvbXBvbmVudCBhZnRlciBwbGF5ZXIgaGFzIGJlZW4gY3JlYXRlZC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBDb21wb25lbnQuY29tcG9uZW50c19bbmFtZV0gPSBDb21wb25lbnRUb1JlZ2lzdGVyO1xuICAgIENvbXBvbmVudC5jb21wb25lbnRzX1t0b0xvd2VyQ2FzZShuYW1lKV0gPSBDb21wb25lbnRUb1JlZ2lzdGVyO1xuICAgIHJldHVybiBDb21wb25lbnRUb1JlZ2lzdGVyO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBgQ29tcG9uZW50YCBiYXNlZCBvbiB0aGUgbmFtZSBpdCB3YXMgcmVnaXN0ZXJlZCB3aXRoLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB0byBnZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICogICAgICAgICBUaGUgYENvbXBvbmVudGAgdGhhdCBnb3QgcmVnaXN0ZXJlZCB1bmRlciB0aGUgZ2l2ZW4gbmFtZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgSW4gYHZpZGVvanNgIDYgdGhpcyB3aWxsIG5vdCByZXR1cm4gYENvbXBvbmVudGBzIHRoYXQgd2VyZSBub3RcbiAgICogICAgICAgICAgICAgcmVnaXN0ZXJlZCB1c2luZyB7QGxpbmsgQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50fS4gQ3VycmVudGx5IHdlXG4gICAqICAgICAgICAgICAgIGNoZWNrIHRoZSBnbG9iYWwgYHZpZGVvanNgIG9iamVjdCBmb3IgYSBgQ29tcG9uZW50YCBuYW1lIGFuZFxuICAgKiAgICAgICAgICAgICByZXR1cm4gdGhhdCBpZiBpdCBleGlzdHMuXG4gICAqL1xuICA7XG5cbiAgQ29tcG9uZW50LmdldENvbXBvbmVudCA9IGZ1bmN0aW9uIGdldENvbXBvbmVudChuYW1lKSB7XG4gICAgaWYgKCFuYW1lIHx8ICFDb21wb25lbnQuY29tcG9uZW50c18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcG9uZW50LmNvbXBvbmVudHNfW25hbWVdO1xuICB9O1xuXG4gIHJldHVybiBDb21wb25lbnQ7XG59KCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9uZW50IHN1cHBvcnRzIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLlxuICpcbiAqIFRoaXMgaXMgZXhwb3NlZCBwcmltYXJpbHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS5zdXBwb3J0c1JhZl8gPSB0eXBlb2Ygd2luZG93JDEucmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB3aW5kb3ckMS5jYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQ29tcG9uZW50JywgQ29tcG9uZW50KTtcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG4vKipcbiAqIEBmaWxlIGJyb3dzZXIuanNcbiAqIEBtb2R1bGUgYnJvd3NlclxuICovXG52YXIgVVNFUl9BR0VOVCA9IHdpbmRvdyQxLm5hdmlnYXRvciAmJiB3aW5kb3ckMS5uYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xudmFyIHdlYmtpdFZlcnNpb25NYXAgPSAvQXBwbGVXZWJLaXRcXC8oW1xcZC5dKykvaS5leGVjKFVTRVJfQUdFTlQpO1xudmFyIGFwcGxlV2Via2l0VmVyc2lvbiA9IHdlYmtpdFZlcnNpb25NYXAgPyBwYXJzZUZsb2F0KHdlYmtpdFZlcnNpb25NYXAucG9wKCkpIDogbnVsbDtcbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBkZXZpY2UgaXMgYW4gaVBhZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBJU19JUEFEID0gL2lQYWQvaS50ZXN0KFVTRVJfQUdFTlQpO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGRldmljZSBpcyBhbiBpUGhvbmUuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuLy8gVGhlIEZhY2Vib29rIGFwcCdzIFVJV2ViVmlldyBpZGVudGlmaWVzIGFzIGJvdGggYW4gaVBob25lIGFuZCBpUGFkLCBzb1xuLy8gdG8gaWRlbnRpZnkgaVBob25lcywgd2UgbmVlZCB0byBleGNsdWRlIGlQYWRzLlxuLy8gaHR0cDovL2FydHN5LmdpdGh1Yi5pby9ibG9nLzIwMTIvMTAvMTgvdGhlLXBlcmlscy1vZi1pb3MtdXNlci1hZ2VudC1zbmlmZmluZy9cblxudmFyIElTX0lQSE9ORSA9IC9pUGhvbmUvaS50ZXN0KFVTRVJfQUdFTlQpICYmICFJU19JUEFEO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGRldmljZSBpcyBhbiBpUG9kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX0lQT0QgPSAvaVBvZC9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYW4gaU9TIGRldmljZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBJU19JT1MgPSBJU19JUEhPTkUgfHwgSVNfSVBBRCB8fCBJU19JUE9EO1xuLyoqXG4gKiBUaGUgZGV0ZWN0ZWQgaU9TIHZlcnNpb24gLSBvciBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gKi9cblxudmFyIElPU19WRVJTSU9OID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbWF0Y2ggPSBVU0VSX0FHRU5ULm1hdGNoKC9PUyAoXFxkKylfL2kpO1xuXG4gIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgIHJldHVybiBtYXRjaFsxXTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSgpO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGFuIEFuZHJvaWQgZGV2aWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX0FORFJPSUQgPSAvQW5kcm9pZC9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFRoZSBkZXRlY3RlZCBBbmRyb2lkIHZlcnNpb24gLSBvciBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7bnVtYmVyfHN0cmluZ3xudWxsfVxuICovXG5cbnZhciBBTkRST0lEX1ZFUlNJT04gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRoaXMgbWF0Y2hlcyBBbmRyb2lkIE1ham9yLk1pbm9yLlBhdGNoIHZlcnNpb25zXG4gIC8vIEFORFJPSURfVkVSU0lPTiBpcyBNYWpvci5NaW5vciBhcyBhIE51bWJlciwgaWYgTWlub3IgaXNuJ3QgYXZhaWxhYmxlLCB0aGVuIG9ubHkgTWFqb3IgaXMgcmV0dXJuZWRcbiAgdmFyIG1hdGNoID0gVVNFUl9BR0VOVC5tYXRjaCgvQW5kcm9pZCAoXFxkKykoPzpcXC4oXFxkKykpPyg/OlxcLihcXGQrKSkqL2kpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYWpvciA9IG1hdGNoWzFdICYmIHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgbWlub3IgPSBtYXRjaFsyXSAmJiBwYXJzZUZsb2F0KG1hdGNoWzJdKTtcblxuICBpZiAobWFqb3IgJiYgbWlub3IpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRjaFsxXSArICcuJyArIG1hdGNoWzJdKTtcbiAgfSBlbHNlIGlmIChtYWpvcikge1xuICAgIHJldHVybiBtYWpvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSgpO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGEgbmF0aXZlIEFuZHJvaWQgYnJvd3Nlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBJU19OQVRJVkVfQU5EUk9JRCA9IElTX0FORFJPSUQgJiYgQU5EUk9JRF9WRVJTSU9OIDwgNSAmJiBhcHBsZVdlYmtpdFZlcnNpb24gPCA1Mzc7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgTW96aWxsYSBGaXJlZm94LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX0ZJUkVGT1ggPSAvRmlyZWZveC9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgTWljcm9zb2Z0IEVkZ2UuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfRURHRSA9IC9FZGdlL2kudGVzdChVU0VSX0FHRU5UKTtcbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBpcyBHb29nbGUgQ2hyb21lLlxuICpcbiAqIFRoaXMgd2lsbCBhbHNvIGJlIGB0cnVlYCBmb3IgQ2hyb21lIG9uIGlPUywgd2hpY2ggd2lsbCBoYXZlIGRpZmZlcmVudCBzdXBwb3J0XG4gKiBhcyBpdCBpcyBhY3R1YWxseSBTYWZhcmkgdW5kZXIgdGhlIGhvb2QuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfQ0hST01FID0gIUlTX0VER0UgJiYgKC9DaHJvbWUvaS50ZXN0KFVTRVJfQUdFTlQpIHx8IC9DcmlPUy9pLnRlc3QoVVNFUl9BR0VOVCkpO1xuLyoqXG4gKiBUaGUgZGV0ZWN0ZWQgR29vZ2xlIENocm9tZSB2ZXJzaW9uIC0gb3IgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge251bWJlcnxudWxsfVxuICovXG5cbnZhciBDSFJPTUVfVkVSU0lPTiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1hdGNoID0gVVNFUl9BR0VOVC5tYXRjaCgvKENocm9tZXxDcmlPUylcXC8oXFxkKykvKTtcblxuICBpZiAobWF0Y2ggJiYgbWF0Y2hbMl0pIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRjaFsyXSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0oKTtcbi8qKlxuICogVGhlIGRldGVjdGVkIEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gLSBvciBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7bnVtYmVyfG51bGx9XG4gKi9cblxudmFyIElFX1ZFUlNJT04gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZXN1bHQgPSAvTVNJRVxccyhcXGQrKVxcLlxcZC8uZXhlYyhVU0VSX0FHRU5UKTtcbiAgdmFyIHZlcnNpb24gPSByZXN1bHQgJiYgcGFyc2VGbG9hdChyZXN1bHRbMV0pO1xuXG4gIGlmICghdmVyc2lvbiAmJiAvVHJpZGVudFxcLzcuMC9pLnRlc3QoVVNFUl9BR0VOVCkgJiYgL3J2OjExLjAvLnRlc3QoVVNFUl9BR0VOVCkpIHtcbiAgICAvLyBJRSAxMSBoYXMgYSBkaWZmZXJlbnQgdXNlciBhZ2VudCBzdHJpbmcgdGhhbiBvdGhlciBJRSB2ZXJzaW9uc1xuICAgIHZlcnNpb24gPSAxMS4wO1xuICB9XG5cbiAgcmV0dXJuIHZlcnNpb247XG59KCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgZGVza3RvcCBTYWZhcmkuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfU0FGQVJJID0gL1NhZmFyaS9pLnRlc3QoVVNFUl9BR0VOVCkgJiYgIUlTX0NIUk9NRSAmJiAhSVNfQU5EUk9JRCAmJiAhSVNfRURHRTtcbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBpcyBhbnkgZmxhdm9yIG9mIFNhZmFyaSAtIGluY2x1ZGluZyBpT1MuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfQU5ZX1NBRkFSSSA9IChJU19TQUZBUkkgfHwgSVNfSU9TKSAmJiAhSVNfQ0hST01FO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGEgV2luZG93cyBtYWNoaW5lLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX1dJTkRPV1MgPSAvV2luZG93cy9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgZGV2aWNlIGlzIHRvdWNoLWVuYWJsZWQuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgVE9VQ0hfRU5BQkxFRCA9IGlzUmVhbCgpICYmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3ckMSB8fCB3aW5kb3ckMS5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgd2luZG93JDEuRG9jdW1lbnRUb3VjaCAmJiB3aW5kb3ckMS5kb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdyQxLkRvY3VtZW50VG91Y2gpO1xuXG52YXIgYnJvd3NlciA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgSVNfSVBBRDogSVNfSVBBRCxcbiAgSVNfSVBIT05FOiBJU19JUEhPTkUsXG4gIElTX0lQT0Q6IElTX0lQT0QsXG4gIElTX0lPUzogSVNfSU9TLFxuICBJT1NfVkVSU0lPTjogSU9TX1ZFUlNJT04sXG4gIElTX0FORFJPSUQ6IElTX0FORFJPSUQsXG4gIEFORFJPSURfVkVSU0lPTjogQU5EUk9JRF9WRVJTSU9OLFxuICBJU19OQVRJVkVfQU5EUk9JRDogSVNfTkFUSVZFX0FORFJPSUQsXG4gIElTX0ZJUkVGT1g6IElTX0ZJUkVGT1gsXG4gIElTX0VER0U6IElTX0VER0UsXG4gIElTX0NIUk9NRTogSVNfQ0hST01FLFxuICBDSFJPTUVfVkVSU0lPTjogQ0hST01FX1ZFUlNJT04sXG4gIElFX1ZFUlNJT046IElFX1ZFUlNJT04sXG4gIElTX1NBRkFSSTogSVNfU0FGQVJJLFxuICBJU19BTllfU0FGQVJJOiBJU19BTllfU0FGQVJJLFxuICBJU19XSU5ET1dTOiBJU19XSU5ET1dTLFxuICBUT1VDSF9FTkFCTEVEOiBUT1VDSF9FTkFCTEVEXG59KTtcblxuLyoqXG4gKiBAZmlsZSB0aW1lLXJhbmdlcy5qc1xuICogQG1vZHVsZSB0aW1lLXJhbmdlc1xuICovXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdGltZSBmb3IgdGhlIHNwZWNpZmllZCBpbmRleCBhdCB0aGUgc3RhcnQgb3IgZW5kXG4gKiBvZiBhIFRpbWVSYW5nZSBvYmplY3QuXG4gKlxuICogQHR5cGVkZWYgICAge0Z1bmN0aW9ufSBUaW1lUmFuZ2VJbmRleFxuICpcbiAqIEBwYXJhbSAgICAgIHtudW1iZXJ9IFtpbmRleD0wXVxuICogICAgICAgICAgICAgVGhlIHJhbmdlIG51bWJlciB0byByZXR1cm4gdGhlIHRpbWUgZm9yLlxuICpcbiAqIEByZXR1cm4gICAgIHtudW1iZXJ9XG4gKiAgICAgICAgICAgICBUaGUgdGltZSBvZmZzZXQgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgaW5kZXggYXJndW1lbnQgbXVzdCBiZSBwcm92aWRlZC5cbiAqICAgICAgICAgICAgIEluIHRoZSBmdXR1cmUsIGxlYXZpbmcgaXQgb3V0IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gKi9cblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyByYW5nZXMgb2YgdGltZS5cbiAqXG4gKiBAdHlwZWRlZiAge09iamVjdH0gVGltZVJhbmdlXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxlbmd0aFxuICogICAgICAgICAgIFRoZSBudW1iZXIgb2YgdGltZSByYW5nZXMgcmVwcmVzZW50ZWQgYnkgdGhpcyBvYmplY3QuXG4gKlxuICogQHByb3BlcnR5IHttb2R1bGU6dGltZS1yYW5nZXN+VGltZVJhbmdlSW5kZXh9IHN0YXJ0XG4gKiAgICAgICAgICAgUmV0dXJucyB0aGUgdGltZSBvZmZzZXQgYXQgd2hpY2ggYSBzcGVjaWZpZWQgdGltZSByYW5nZSBiZWdpbnMuXG4gKlxuICogQHByb3BlcnR5IHttb2R1bGU6dGltZS1yYW5nZXN+VGltZVJhbmdlSW5kZXh9IGVuZFxuICogICAgICAgICAgIFJldHVybnMgdGhlIHRpbWUgb2Zmc2V0IGF0IHdoaWNoIGEgc3BlY2lmaWVkIHRpbWUgcmFuZ2UgZW5kcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UaW1lUmFuZ2VzXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhbnkgb2YgdGhlIHRpbWUgcmFuZ2VzIGFyZSBvdmVyIHRoZSBtYXhpbXVtIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBmbk5hbWVcbiAqICAgICAgICAgIFRoZSBmdW5jdGlvbiBuYW1lIHRvIHVzZSBmb3IgbG9nZ2luZ1xuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGluZGV4XG4gKiAgICAgICAgICBUaGUgaW5kZXggdG8gY2hlY2tcbiAqXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBtYXhJbmRleFxuICogICAgICAgICAgVGhlIG1heGltdW0gcG9zc2libGUgaW5kZXhcbiAqXG4gKiBAdGhyb3dzICB7RXJyb3J9IGlmIHRoZSB0aW1lUmFuZ2VzIHByb3ZpZGVkIGFyZSBvdmVyIHRoZSBtYXhJbmRleFxuICovXG5mdW5jdGlvbiByYW5nZUNoZWNrKGZuTmFtZSwgaW5kZXgsIG1heEluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IG1heEluZGV4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ1wiICsgZm5OYW1lICsgXCInIG9uICdUaW1lUmFuZ2VzJzogVGhlIGluZGV4IHByb3ZpZGVkIChcIiArIGluZGV4ICsgXCIpIGlzIG5vbi1udW1lcmljIG9yIG91dCBvZiBib3VuZHMgKDAtXCIgKyBtYXhJbmRleCArIFwiKS5cIik7XG4gIH1cbn1cbi8qKlxuICogR2V0IHRoZSB0aW1lIGZvciB0aGUgc3BlY2lmaWVkIGluZGV4IGF0IHRoZSBzdGFydCBvciBlbmRcbiAqIG9mIGEgVGltZVJhbmdlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgICAge3N0cmluZ30gZm5OYW1lXG4gKiAgICAgICAgICAgICBUaGUgZnVuY3Rpb24gbmFtZSB0byB1c2UgZm9yIGxvZ2dpbmdcbiAqXG4gKiBAcGFyYW0gICAgICB7c3RyaW5nfSB2YWx1ZUluZGV4XG4gKiAgICAgICAgICAgICBUaGUgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBnZXQgdGhlIHRpbWUuIHNob3VsZCBiZVxuICogICAgICAgICAgICAgJ3N0YXJ0JyBvciAnZW5kJ1xuICpcbiAqIEBwYXJhbSAgICAgIHtBcnJheX0gcmFuZ2VzXG4gKiAgICAgICAgICAgICBBbiBhcnJheSBvZiB0aW1lIHJhbmdlc1xuICpcbiAqIEBwYXJhbSAgICAgIHtBcnJheX0gW3JhbmdlSW5kZXg9MF1cbiAqICAgICAgICAgICAgIFRoZSBpbmRleCB0byBzdGFydCB0aGUgc2VhcmNoIGF0XG4gKlxuICogQHJldHVybiAgICAge251bWJlcn1cbiAqICAgICAgICAgICAgIFRoZSB0aW1lIHRoYXQgb2Zmc2V0IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gKlxuICogQGRlcHJlY2F0ZWQgcmFuZ2VJbmRleCBtdXN0IGJlIHNldCB0byBhIHZhbHVlLCBpbiB0aGUgZnV0dXJlIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEB0aHJvd3MgICAgIHtFcnJvcn0gaWYgcmFuZ2VJbmRleCBpcyBtb3JlIHRoYW4gdGhlIGxlbmd0aCBvZiByYW5nZXNcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJhbmdlKGZuTmFtZSwgdmFsdWVJbmRleCwgcmFuZ2VzLCByYW5nZUluZGV4KSB7XG4gIHJhbmdlQ2hlY2soZm5OYW1lLCByYW5nZUluZGV4LCByYW5nZXMubGVuZ3RoIC0gMSk7XG4gIHJldHVybiByYW5nZXNbcmFuZ2VJbmRleF1bdmFsdWVJbmRleF07XG59XG4vKipcbiAqIENyZWF0ZSBhIHRpbWUgcmFuZ2Ugb2JqZWN0IGdpdmVuIHJhbmdlcyBvZiB0aW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7QXJyYXl9IFtyYW5nZXNdXG4gKiAgICAgICAgICBBbiBhcnJheSBvZiB0aW1lIHJhbmdlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVRpbWVSYW5nZXNPYmoocmFuZ2VzKSB7XG4gIGlmIChyYW5nZXMgPT09IHVuZGVmaW5lZCB8fCByYW5nZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlbmd0aDogMCxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIFRpbWVSYW5nZXMgb2JqZWN0IGlzIGVtcHR5Jyk7XG4gICAgICB9LFxuICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUaW1lUmFuZ2VzIG9iamVjdCBpcyBlbXB0eScpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxlbmd0aDogcmFuZ2VzLmxlbmd0aCxcbiAgICBzdGFydDogZ2V0UmFuZ2UuYmluZChudWxsLCAnc3RhcnQnLCAwLCByYW5nZXMpLFxuICAgIGVuZDogZ2V0UmFuZ2UuYmluZChudWxsLCAnZW5kJywgMSwgcmFuZ2VzKVxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBgVGltZVJhbmdlYCBvYmplY3Qgd2hpY2ggbWltaWNzIGFuXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RpbWVSYW5nZXN8SFRNTDUgVGltZVJhbmdlcyBpbnN0YW5jZX0uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8QXJyYXlbXX0gc3RhcnRcbiAqICAgICAgICBUaGUgc3RhcnQgb2YgYSBzaW5nbGUgcmFuZ2UgKGEgbnVtYmVyKSBvciBhbiBhcnJheSBvZiByYW5nZXMgKGFuXG4gKiAgICAgICAgYXJyYXkgb2YgYXJyYXlzIG9mIHR3byBudW1iZXJzIGVhY2gpLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqICAgICAgICBUaGUgZW5kIG9mIGEgc2luZ2xlIHJhbmdlLiBDYW5ub3QgYmUgdXNlZCB3aXRoIHRoZSBhcnJheSBmb3JtIG9mXG4gKiAgICAgICAgdGhlIGBzdGFydGAgYXJndW1lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVUaW1lUmFuZ2VzKHN0YXJ0LCBlbmQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RhcnQpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXNPYmooc3RhcnQpO1xuICB9IGVsc2UgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY3JlYXRlVGltZVJhbmdlc09iaigpO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXNPYmooW1tzdGFydCwgZW5kXV0pO1xufVxuXG4vKipcbiAqIEBmaWxlIGJ1ZmZlci5qc1xuICogQG1vZHVsZSBidWZmZXJcbiAqL1xuLyoqXG4gKiBDb21wdXRlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBtZWRpYSB0aGF0IGhhcyBiZWVuIGJ1ZmZlcmVkLlxuICpcbiAqIEBwYXJhbSB7VGltZVJhbmdlfSBidWZmZXJlZFxuICogICAgICAgIFRoZSBjdXJyZW50IGBUaW1lUmFuZ2VgIG9iamVjdCByZXByZXNlbnRpbmcgYnVmZmVyZWQgdGltZSByYW5nZXNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAqICAgICAgICBUb3RhbCBkdXJhdGlvbiBvZiB0aGUgbWVkaWFcbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFBlcmNlbnQgYnVmZmVyZWQgb2YgdGhlIHRvdGFsIGR1cmF0aW9uIGluIGRlY2ltYWwgZm9ybS5cbiAqL1xuXG5mdW5jdGlvbiBidWZmZXJlZFBlcmNlbnQoYnVmZmVyZWQsIGR1cmF0aW9uKSB7XG4gIHZhciBidWZmZXJlZER1cmF0aW9uID0gMDtcbiAgdmFyIHN0YXJ0O1xuICB2YXIgZW5kO1xuXG4gIGlmICghZHVyYXRpb24pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmICghYnVmZmVyZWQgfHwgIWJ1ZmZlcmVkLmxlbmd0aCkge1xuICAgIGJ1ZmZlcmVkID0gY3JlYXRlVGltZVJhbmdlcygwLCAwKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICBzdGFydCA9IGJ1ZmZlcmVkLnN0YXJ0KGkpO1xuICAgIGVuZCA9IGJ1ZmZlcmVkLmVuZChpKTsgLy8gYnVmZmVyZWQgZW5kIGNhbiBiZSBiaWdnZXIgdGhhbiBkdXJhdGlvbiBieSBhIHZlcnkgc21hbGwgZnJhY3Rpb25cblxuICAgIGlmIChlbmQgPiBkdXJhdGlvbikge1xuICAgICAgZW5kID0gZHVyYXRpb247XG4gICAgfVxuXG4gICAgYnVmZmVyZWREdXJhdGlvbiArPSBlbmQgLSBzdGFydDtcbiAgfVxuXG4gIHJldHVybiBidWZmZXJlZER1cmF0aW9uIC8gZHVyYXRpb247XG59XG5cbi8qKlxuICogQGZpbGUgZnVsbHNjcmVlbi1hcGkuanNcbiAqIEBtb2R1bGUgZnVsbHNjcmVlbi1hcGlcbiAqIEBwcml2YXRlXG4gKi9cbi8qKlxuICogU3RvcmUgdGhlIGJyb3dzZXItc3BlY2lmaWMgbWV0aG9kcyBmb3IgdGhlIGZ1bGxzY3JlZW4gQVBJLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlIFtTcGVjaWZpY2F0aW9uXXtAbGluayBodHRwczovL2Z1bGxzY3JlZW4uc3BlYy53aGF0d2cub3JnfVxuICogQHNlZSBbTWFwIEFwcHJvYWNoIEZyb20gU2NyZWVuZnVsbC5qc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9zY3JlZW5mdWxsLmpzfVxuICovXG5cbnZhciBGdWxsc2NyZWVuQXBpID0ge1xuICBwcmVmaXhlZDogdHJ1ZVxufTsgLy8gYnJvd3NlciBBUEkgbWV0aG9kc1xuXG52YXIgYXBpTWFwID0gW1sncmVxdWVzdEZ1bGxzY3JlZW4nLCAnZXhpdEZ1bGxzY3JlZW4nLCAnZnVsbHNjcmVlbkVsZW1lbnQnLCAnZnVsbHNjcmVlbkVuYWJsZWQnLCAnZnVsbHNjcmVlbmNoYW5nZScsICdmdWxsc2NyZWVuZXJyb3InLCAnZnVsbHNjcmVlbiddLCAvLyBXZWJLaXRcblsnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLCAnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLCAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLCAnd2Via2l0RnVsbHNjcmVlbkVuYWJsZWQnLCAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InLCAnLXdlYmtpdC1mdWxsLXNjcmVlbiddLCAvLyBNb3ppbGxhXG5bJ21velJlcXVlc3RGdWxsU2NyZWVuJywgJ21vekNhbmNlbEZ1bGxTY3JlZW4nLCAnbW96RnVsbFNjcmVlbkVsZW1lbnQnLCAnbW96RnVsbFNjcmVlbkVuYWJsZWQnLCAnbW96ZnVsbHNjcmVlbmNoYW5nZScsICdtb3pmdWxsc2NyZWVuZXJyb3InLCAnLW1vei1mdWxsLXNjcmVlbiddLCAvLyBNaWNyb3NvZnRcblsnbXNSZXF1ZXN0RnVsbHNjcmVlbicsICdtc0V4aXRGdWxsc2NyZWVuJywgJ21zRnVsbHNjcmVlbkVsZW1lbnQnLCAnbXNGdWxsc2NyZWVuRW5hYmxlZCcsICdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCAnTVNGdWxsc2NyZWVuRXJyb3InLCAnLW1zLWZ1bGxzY3JlZW4nXV07XG52YXIgc3BlY0FwaSA9IGFwaU1hcFswXTtcbnZhciBicm93c2VyQXBpOyAvLyBkZXRlcm1pbmUgdGhlIHN1cHBvcnRlZCBzZXQgb2YgZnVuY3Rpb25zXG5cbmZvciAodmFyIGkgPSAwOyBpIDwgYXBpTWFwLmxlbmd0aDsgaSsrKSB7XG4gIC8vIGNoZWNrIGZvciBleGl0RnVsbHNjcmVlbiBmdW5jdGlvblxuICBpZiAoYXBpTWFwW2ldWzFdIGluIGRvY3VtZW50KSB7XG4gICAgYnJvd3NlckFwaSA9IGFwaU1hcFtpXTtcbiAgICBicmVhaztcbiAgfVxufSAvLyBtYXAgdGhlIGJyb3dzZXIgQVBJIG5hbWVzIHRvIHRoZSBzcGVjIEFQSSBuYW1lc1xuXG5cbmlmIChicm93c2VyQXBpKSB7XG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBicm93c2VyQXBpLmxlbmd0aDsgX2krKykge1xuICAgIEZ1bGxzY3JlZW5BcGlbc3BlY0FwaVtfaV1dID0gYnJvd3NlckFwaVtfaV07XG4gIH1cblxuICBGdWxsc2NyZWVuQXBpLnByZWZpeGVkID0gYnJvd3NlckFwaVswXSAhPT0gc3BlY0FwaVswXTtcbn1cblxuLyoqXG4gKiBAZmlsZSBtZWRpYS1lcnJvci5qc1xuICovXG4vKipcbiAqIEEgQ3VzdG9tIGBNZWRpYUVycm9yYCBjbGFzcyB3aGljaCBtaW1pY3MgdGhlIHN0YW5kYXJkIEhUTUw1IGBNZWRpYUVycm9yYCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8T2JqZWN0fE1lZGlhRXJyb3J9IHZhbHVlXG4gKiAgICAgICAgVGhpcyBjYW4gYmUgb2YgbXVsdGlwbGUgdHlwZXM6XG4gKiAgICAgICAgLSBudW1iZXI6IHNob3VsZCBiZSBhIHN0YW5kYXJkIGVycm9yIGNvZGVcbiAqICAgICAgICAtIHN0cmluZzogYW4gZXJyb3IgbWVzc2FnZSAodGhlIGNvZGUgd2lsbCBiZSAwKVxuICogICAgICAgIC0gT2JqZWN0OiBhcmJpdHJhcnkgcHJvcGVydGllc1xuICogICAgICAgIC0gYE1lZGlhRXJyb3JgIChuYXRpdmUpOiB1c2VkIHRvIHBvcHVsYXRlIGEgdmlkZW8uanMgYE1lZGlhRXJyb3JgIG9iamVjdFxuICogICAgICAgIC0gYE1lZGlhRXJyb3JgICh2aWRlby5qcyk6IHdpbGwgcmV0dXJuIGl0c2VsZiBpZiBpdCdzIGFscmVhZHkgYVxuICogICAgICAgICAgdmlkZW8uanMgYE1lZGlhRXJyb3JgIG9iamVjdC5cbiAqXG4gKiBAc2VlIFtNZWRpYUVycm9yIFNwZWNde0BsaW5rIGh0dHBzOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjLWF1dGhvci12aWV3L3ZpZGVvLmh0bWwjbWVkaWFlcnJvcn1cbiAqIEBzZWUgW0VuY3J5cHRlZCBNZWRpYUVycm9yIFNwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELWVuY3J5cHRlZC1tZWRpYS0yMDEzMDUxMC8jZXJyb3ItY29kZXN9XG4gKlxuICogQGNsYXNzIE1lZGlhRXJyb3JcbiAqL1xuXG5mdW5jdGlvbiBNZWRpYUVycm9yKHZhbHVlKSB7XG4gIC8vIEFsbG93IHJlZHVuZGFudCBjYWxscyB0byB0aGlzIGNvbnN0cnVjdG9yIHRvIGF2b2lkIGhhdmluZyBgaW5zdGFuY2VvZmBcbiAgLy8gY2hlY2tzIHBlcHBlcmVkIGFyb3VuZCB0aGUgY29kZS5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWVkaWFFcnJvcikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhpcy5jb2RlID0gdmFsdWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIC8vIGRlZmF1bHQgY29kZSBpcyB6ZXJvLCBzbyB0aGlzIGlzIGEgY3VzdG9tIGVycm9yXG4gICAgdGhpcy5tZXNzYWdlID0gdmFsdWU7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgLy8gV2UgYXNzaWduIHRoZSBgY29kZWAgcHJvcGVydHkgbWFudWFsbHkgYmVjYXVzZSBuYXRpdmUgYE1lZGlhRXJyb3JgIG9iamVjdHNcbiAgICAvLyBkbyBub3QgZXhwb3NlIGl0IGFzIGFuIG93bi9lbnVtZXJhYmxlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZS5jb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5jb2RlID0gdmFsdWUuY29kZTtcbiAgICB9XG5cbiAgICBhc3NpZ24odGhpcywgdmFsdWUpO1xuICB9XG5cbiAgaWYgKCF0aGlzLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBNZWRpYUVycm9yLmRlZmF1bHRNZXNzYWdlc1t0aGlzLmNvZGVdIHx8ICcnO1xuICB9XG59XG4vKipcbiAqIFRoZSBlcnJvciBjb2RlIHRoYXQgcmVmZXJzIHR3byBvbmUgb2YgdGhlIGRlZmluZWQgYE1lZGlhRXJyb3JgIHR5cGVzXG4gKlxuICogQHR5cGUge051bWJlcn1cbiAqL1xuXG5cbk1lZGlhRXJyb3IucHJvdG90eXBlLmNvZGUgPSAwO1xuLyoqXG4gKiBBbiBvcHRpb25hbCBtZXNzYWdlIHRoYXQgdG8gc2hvdyB3aXRoIHRoZSBlcnJvci4gTWVzc2FnZSBpcyBub3QgcGFydCBvZiB0aGUgSFRNTDVcbiAqIHZpZGVvIHNwZWMgYnV0IGFsbG93cyBmb3IgbW9yZSBpbmZvcm1hdGl2ZSBjdXN0b20gZXJyb3JzLlxuICpcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKi9cblxuTWVkaWFFcnJvci5wcm90b3R5cGUubWVzc2FnZSA9ICcnO1xuLyoqXG4gKiBBbiBvcHRpb25hbCBzdGF0dXMgY29kZSB0aGF0IGNhbiBiZSBzZXQgYnkgcGx1Z2lucyB0byBhbGxvdyBldmVuIG1vcmUgZGV0YWlsIGFib3V0XG4gKiB0aGUgZXJyb3IuIEZvciBleGFtcGxlIGEgcGx1Z2luIG1pZ2h0IHByb3ZpZGUgYSBzcGVjaWZpYyBIVFRQIHN0YXR1cyBjb2RlIGFuZCBhblxuICogZXJyb3IgbWVzc2FnZSBmb3IgdGhhdCBjb2RlLiBUaGVuIHdoZW4gdGhlIHBsdWdpbiBnZXRzIHRoYXQgZXJyb3IgdGhpcyBjbGFzcyB3aWxsXG4gKiBrbm93IGhvdyB0byBkaXNwbGF5IGFuIGVycm9yIG1lc3NhZ2UgZm9yIGl0LiBUaGlzIGFsbG93cyBhIGN1c3RvbSBtZXNzYWdlIHRvIHNob3dcbiAqIHVwIG9uIHRoZSBgUGxheWVyYCBlcnJvciBvdmVybGF5LlxuICpcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuXG5NZWRpYUVycm9yLnByb3RvdHlwZS5zdGF0dXMgPSBudWxsO1xuLyoqXG4gKiBFcnJvcnMgaW5kZXhlZCBieSB0aGUgVzNDIHN0YW5kYXJkLiBUaGUgb3JkZXIgKipDQU5OT1QgQ0hBTkdFKiohIFNlZSB0aGVcbiAqIHNwZWNpZmljYXRpb24gbGlzdGVkIHVuZGVyIHtAbGluayBNZWRpYUVycm9yfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZW51bSB7YXJyYXl9XG4gKiBAcmVhZG9ubHlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAwIC0gTUVESUFfRVJSX0NVU1RPTVxuICogQHByb3BlcnR5IHtzdHJpbmd9IDEgLSBNRURJQV9FUlJfQUJPUlRFRFxuICogQHByb3BlcnR5IHtzdHJpbmd9IDIgLSBNRURJQV9FUlJfTkVUV09SS1xuICogQHByb3BlcnR5IHtzdHJpbmd9IDMgLSBNRURJQV9FUlJfREVDT0RFXG4gKiBAcHJvcGVydHkge3N0cmluZ30gNCAtIE1FRElBX0VSUl9TUkNfTk9UX1NVUFBPUlRFRFxuICogQHByb3BlcnR5IHtzdHJpbmd9IDUgLSBNRURJQV9FUlJfRU5DUllQVEVEXG4gKi9cblxuTWVkaWFFcnJvci5lcnJvclR5cGVzID0gWydNRURJQV9FUlJfQ1VTVE9NJywgJ01FRElBX0VSUl9BQk9SVEVEJywgJ01FRElBX0VSUl9ORVRXT1JLJywgJ01FRElBX0VSUl9ERUNPREUnLCAnTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEJywgJ01FRElBX0VSUl9FTkNSWVBURUQnXTtcbi8qKlxuICogVGhlIGRlZmF1bHQgYE1lZGlhRXJyb3JgIG1lc3NhZ2VzIGJhc2VkIG9uIHRoZSB7QGxpbmsgTWVkaWFFcnJvci5lcnJvclR5cGVzfS5cbiAqXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAY29uc3RhbnRcbiAqL1xuXG5NZWRpYUVycm9yLmRlZmF1bHRNZXNzYWdlcyA9IHtcbiAgMTogJ1lvdSBhYm9ydGVkIHRoZSBtZWRpYSBwbGF5YmFjaycsXG4gIDI6ICdBIG5ldHdvcmsgZXJyb3IgY2F1c2VkIHRoZSBtZWRpYSBkb3dubG9hZCB0byBmYWlsIHBhcnQtd2F5LicsXG4gIDM6ICdUaGUgbWVkaWEgcGxheWJhY2sgd2FzIGFib3J0ZWQgZHVlIHRvIGEgY29ycnVwdGlvbiBwcm9ibGVtIG9yIGJlY2F1c2UgdGhlIG1lZGlhIHVzZWQgZmVhdHVyZXMgeW91ciBicm93c2VyIGRpZCBub3Qgc3VwcG9ydC4nLFxuICA0OiAnVGhlIG1lZGlhIGNvdWxkIG5vdCBiZSBsb2FkZWQsIGVpdGhlciBiZWNhdXNlIHRoZSBzZXJ2ZXIgb3IgbmV0d29yayBmYWlsZWQgb3IgYmVjYXVzZSB0aGUgZm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQuJyxcbiAgNTogJ1RoZSBtZWRpYSBpcyBlbmNyeXB0ZWQgYW5kIHdlIGRvIG5vdCBoYXZlIHRoZSBrZXlzIHRvIGRlY3J5cHQgaXQuJ1xufTsgLy8gQWRkIHR5cGVzIGFzIHByb3BlcnRpZXMgb24gTWVkaWFFcnJvclxuLy8gZS5nLiBNZWRpYUVycm9yLk1FRElBX0VSUl9TUkNfTk9UX1NVUFBPUlRFRCA9IDQ7XG5cbmZvciAodmFyIGVyck51bSA9IDA7IGVyck51bSA8IE1lZGlhRXJyb3IuZXJyb3JUeXBlcy5sZW5ndGg7IGVyck51bSsrKSB7XG4gIE1lZGlhRXJyb3JbTWVkaWFFcnJvci5lcnJvclR5cGVzW2Vyck51bV1dID0gZXJyTnVtOyAvLyB2YWx1ZXMgc2hvdWxkIGJlIGFjY2Vzc2libGUgb24gYm90aCB0aGUgY2xhc3MgYW5kIGluc3RhbmNlXG5cbiAgTWVkaWFFcnJvci5wcm90b3R5cGVbTWVkaWFFcnJvci5lcnJvclR5cGVzW2Vyck51bV1dID0gZXJyTnVtO1xufSAvLyBqc2RvY3MgZm9yIGluc3RhbmNlL3N0YXRpYyBtZW1iZXJzIGFkZGVkIGFib3ZlXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBpcyBgUHJvbWlzZWAtbGlrZSAoaS5lLiBoYXMgYSBgdGhlbmAgbWV0aG9kKS5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9ICB2YWx1ZVxuICogICAgICAgICBBbiBvYmplY3QgdGhhdCBtYXkgb3IgbWF5IG5vdCBiZSBgUHJvbWlzZWAtbGlrZS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGBQcm9taXNlYC1saWtlLlxuICovXG5mdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIFNpbGVuY2UgYSBQcm9taXNlLWxpa2Ugb2JqZWN0LlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBhdm9pZGluZyBub24taGFybWZ1bCwgYnV0IHBvdGVudGlhbGx5IGNvbmZ1c2luZyBcInVuY2F1Z2h0XG4gKiBwbGF5IHByb21pc2VcIiByZWplY3Rpb24gZXJyb3IgbWVzc2FnZXMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB2YWx1ZVxuICogICAgICAgICBBbiBvYmplY3QgdGhhdCBtYXkgb3IgbWF5IG5vdCBiZSBgUHJvbWlzZWAtbGlrZS5cbiAqL1xuXG5mdW5jdGlvbiBzaWxlbmNlUHJvbWlzZSh2YWx1ZSkge1xuICBpZiAoaXNQcm9taXNlKHZhbHVlKSkge1xuICAgIHZhbHVlLnRoZW4obnVsbCwgZnVuY3Rpb24gKGUpIHt9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBmaWxlIHRleHQtdHJhY2stbGlzdC1jb252ZXJ0ZXIuanMgVXRpbGl0aWVzIGZvciBjYXB0dXJpbmcgdGV4dCB0cmFjayBzdGF0ZSBhbmRcbiAqIHJlLWNyZWF0aW5nIHRyYWNrcyBiYXNlZCBvbiBhIGNhcHR1cmUuXG4gKlxuICogQG1vZHVsZSB0ZXh0LXRyYWNrLWxpc3QtY29udmVydGVyXG4gKi9cblxuLyoqXG4gKiBFeGFtaW5lIGEgc2luZ2xlIHtAbGluayBUZXh0VHJhY2t9IGFuZCByZXR1cm4gYSBKU09OLWNvbXBhdGlibGUgamF2YXNjcmlwdCBvYmplY3QgdGhhdFxuICogcmVwcmVzZW50cyB0aGUge0BsaW5rIFRleHRUcmFja30ncyBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAqICAgICAgICBUaGUgdGV4dCB0cmFjayB0byBxdWVyeS5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgIEEgc2VyaWFsaXphYmxlIGphdmFzY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIFRleHRUcmFjay5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB0cmFja1RvSnNvbl8gPSBmdW5jdGlvbiB0cmFja1RvSnNvbl8odHJhY2spIHtcbiAgdmFyIHJldCA9IFsna2luZCcsICdsYWJlbCcsICdsYW5ndWFnZScsICdpZCcsICdpbkJhbmRNZXRhZGF0YVRyYWNrRGlzcGF0Y2hUeXBlJywgJ21vZGUnLCAnc3JjJ10ucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHByb3AsIGkpIHtcbiAgICBpZiAodHJhY2tbcHJvcF0pIHtcbiAgICAgIGFjY1twcm9wXSA9IHRyYWNrW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHtcbiAgICBjdWVzOiB0cmFjay5jdWVzICYmIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0cmFjay5jdWVzLCBmdW5jdGlvbiAoY3VlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydFRpbWU6IGN1ZS5zdGFydFRpbWUsXG4gICAgICAgIGVuZFRpbWU6IGN1ZS5lbmRUaW1lLFxuICAgICAgICB0ZXh0OiBjdWUudGV4dCxcbiAgICAgICAgaWQ6IGN1ZS5pZFxuICAgICAgfTtcbiAgICB9KVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn07XG4vKipcbiAqIEV4YW1pbmUgYSB7QGxpbmsgVGVjaH0gYW5kIHJldHVybiBhIEpTT04tY29tcGF0aWJsZSBqYXZhc2NyaXB0IGFycmF5IHRoYXQgcmVwcmVzZW50cyB0aGVcbiAqIHN0YXRlIG9mIGFsbCB7QGxpbmsgVGV4dFRyYWNrfXMgY3VycmVudGx5IGNvbmZpZ3VyZWQuIFRoZSByZXR1cm4gYXJyYXkgaXMgY29tcGF0aWJsZSB3aXRoXG4gKiB7QGxpbmsgdGV4dC10cmFjay1saXN0LWNvbnZlcnRlcjpqc29uVG9UZXh0VHJhY2tzfS5cbiAqXG4gKiBAcGFyYW0ge1RlY2h9IHRlY2hcbiAqICAgICAgICBUaGUgdGVjaCBvYmplY3QgdG8gcXVlcnlcbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqICAgICAgICAgQSBzZXJpYWxpemFibGUgamF2YXNjcmlwdCByZXByZXNlbnRhdGlvbiBvZiB0aGUge0BsaW5rIFRlY2h9c1xuICogICAgICAgICB7QGxpbmsgVGV4dFRyYWNrTGlzdH0uXG4gKi9cblxuXG52YXIgdGV4dFRyYWNrc1RvSnNvbiA9IGZ1bmN0aW9uIHRleHRUcmFja3NUb0pzb24odGVjaCkge1xuICB2YXIgdHJhY2tFbHMgPSB0ZWNoLiQkKCd0cmFjaycpO1xuICB2YXIgdHJhY2tPYmpzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKHRyYWNrRWxzLCBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnRyYWNrO1xuICB9KTtcbiAgdmFyIHRyYWNrcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0cmFja0VscywgZnVuY3Rpb24gKHRyYWNrRWwpIHtcbiAgICB2YXIganNvbiA9IHRyYWNrVG9Kc29uXyh0cmFja0VsLnRyYWNrKTtcblxuICAgIGlmICh0cmFja0VsLnNyYykge1xuICAgICAganNvbi5zcmMgPSB0cmFja0VsLnNyYztcbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfSk7XG4gIHJldHVybiB0cmFja3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0ZWNoLnRleHRUcmFja3MoKSwgZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgcmV0dXJuIHRyYWNrT2Jqcy5pbmRleE9mKHRyYWNrKSA9PT0gLTE7XG4gIH0pLm1hcCh0cmFja1RvSnNvbl8pKTtcbn07XG4vKipcbiAqIENyZWF0ZSBhIHNldCBvZiByZW1vdGUge0BsaW5rIFRleHRUcmFja31zIG9uIGEge0BsaW5rIFRlY2h9IGJhc2VkIG9uIGFuIGFycmF5IG9mIGphdmFzY3JpcHRcbiAqIG9iamVjdCB7QGxpbmsgVGV4dFRyYWNrfSByZXByZXNlbnRhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0ganNvblxuICogICAgICAgIEFuIGFycmF5IG9mIGBUZXh0VHJhY2tgIHJlcHJlc2VudGF0aW9uIG9iamVjdHMsIGxpa2UgdGhvc2UgdGhhdCB3b3VsZCBiZVxuICogICAgICAgIHByb2R1Y2VkIGJ5IGB0ZXh0VHJhY2tzVG9Kc29uYC5cbiAqXG4gKiBAcGFyYW0ge1RlY2h9IHRlY2hcbiAqICAgICAgICBUaGUgYFRlY2hgIHRvIGNyZWF0ZSB0aGUgYFRleHRUcmFja2BzIG9uLlxuICovXG5cblxudmFyIGpzb25Ub1RleHRUcmFja3MgPSBmdW5jdGlvbiBqc29uVG9UZXh0VHJhY2tzKGpzb24sIHRlY2gpIHtcbiAganNvbi5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgIHZhciBhZGRlZFRyYWNrID0gdGVjaC5hZGRSZW1vdGVUZXh0VHJhY2sodHJhY2spLnRyYWNrO1xuXG4gICAgaWYgKCF0cmFjay5zcmMgJiYgdHJhY2suY3Vlcykge1xuICAgICAgdHJhY2suY3Vlcy5mb3JFYWNoKGZ1bmN0aW9uIChjdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZGVkVHJhY2suYWRkQ3VlKGN1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGVjaC50ZXh0VHJhY2tzKCk7XG59O1xuXG52YXIgdGV4dFRyYWNrQ29udmVydGVyID0ge1xuICB0ZXh0VHJhY2tzVG9Kc29uOiB0ZXh0VHJhY2tzVG9Kc29uLFxuICBqc29uVG9UZXh0VHJhY2tzOiBqc29uVG9UZXh0VHJhY2tzLFxuICB0cmFja1RvSnNvbl86IHRyYWNrVG9Kc29uX1xufTtcblxudmFyIE1PREFMX0NMQVNTX05BTUUgPSAndmpzLW1vZGFsLWRpYWxvZyc7XG4vKipcbiAqIFRoZSBgTW9kYWxEaWFsb2dgIGRpc3BsYXlzIG92ZXIgdGhlIHZpZGVvIGFuZCBpdHMgY29udHJvbHMsIHdoaWNoIGJsb2Nrc1xuICogaW50ZXJhY3Rpb24gd2l0aCB0aGUgcGxheWVyIHVudGlsIGl0IGlzIGNsb3NlZC5cbiAqXG4gKiBNb2RhbCBkaWFsb2dzIGluY2x1ZGUgYSBcIkNsb3NlXCIgYnV0dG9uIGFuZCB3aWxsIGNsb3NlIHdoZW4gdGhhdCBidXR0b25cbiAqIGlzIGFjdGl2YXRlZCAtIG9yIHdoZW4gRVNDIGlzIHByZXNzZWQgYW55d2hlcmUuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIE1vZGFsRGlhbG9nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsRGlhbG9nLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBbb3B0aW9ucy5jb250ZW50PXVuZGVmaW5lZF1cbiAgICogICAgICAgIFByb3ZpZGUgY3VzdG9taXplZCBjb250ZW50IGZvciB0aGlzIG1vZGFsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZGVzY3JpcHRpb25dXG4gICAqICAgICAgICBBIHRleHQgZGVzY3JpcHRpb24gZm9yIHRoZSBtb2RhbCwgcHJpbWFyaWx5IGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZpbGxBbHdheXM9ZmFsc2VdXG4gICAqICAgICAgICBOb3JtYWxseSwgbW9kYWxzIGFyZSBhdXRvbWF0aWNhbGx5IGZpbGxlZCBvbmx5IHRoZSBmaXJzdCB0aW1lXG4gICAqICAgICAgICB0aGV5IG9wZW4uIFRoaXMgdGVsbHMgdGhlIG1vZGFsIHRvIHJlZnJlc2ggaXRzIGNvbnRlbnRcbiAgICogICAgICAgIGV2ZXJ5IHRpbWUgaXQgb3BlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbF1cbiAgICogICAgICAgIEEgdGV4dCBsYWJlbCBmb3IgdGhlIG1vZGFsLCBwcmltYXJpbHkgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGF1c2VPbk9wZW49dHJ1ZV1cbiAgICogICAgICAgIElmIGB0cnVlYCwgcGxheWJhY2sgd2lsbCB3aWxsIGJlIHBhdXNlZCBpZiBwbGF5aW5nIHdoZW5cbiAgICogICAgICAgIHRoZSBtb2RhbCBvcGVucywgYW5kIHJlc3VtZWQgd2hlbiBpdCBjbG9zZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudGVtcG9yYXJ5PXRydWVdXG4gICAqICAgICAgICBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCBjYW4gb25seSBiZSBvcGVuZWQgb25jZTsgaXQgd2lsbCBiZVxuICAgKiAgICAgICAgZGlzcG9zZWQgYXMgc29vbiBhcyBpdCdzIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy51bmNsb3NlYWJsZT1mYWxzZV1cbiAgICogICAgICAgIElmIGB0cnVlYCwgdGhlIHVzZXIgd2lsbCBub3QgYmUgYWJsZSB0byBjbG9zZSB0aGUgbW9kYWxcbiAgICogICAgICAgIHRocm91Z2ggdGhlIFVJIGluIHRoZSBub3JtYWwgd2F5cy4gUHJvZ3JhbW1hdGljIGNsb3NpbmcgaXNcbiAgICogICAgICAgIHN0aWxsIHBvc3NpYmxlLlxuICAgKi9cbiAgZnVuY3Rpb24gTW9kYWxEaWFsb2cocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLm9wZW5lZF8gPSBfdGhpcy5oYXNCZWVuT3BlbmVkXyA9IF90aGlzLmhhc0JlZW5GaWxsZWRfID0gZmFsc2U7XG5cbiAgICBfdGhpcy5jbG9zZWFibGUoIV90aGlzLm9wdGlvbnNfLnVuY2xvc2VhYmxlKTtcblxuICAgIF90aGlzLmNvbnRlbnQoX3RoaXMub3B0aW9uc18uY29udGVudCk7IC8vIE1ha2Ugc3VyZSB0aGUgY29udGVudEVsIGlzIGRlZmluZWQgQUZURVIgYW55IGNoaWxkcmVuIGFyZSBpbml0aWFsaXplZFxuICAgIC8vIGJlY2F1c2Ugd2Ugb25seSB3YW50IHRoZSBjb250ZW50cyBvZiB0aGUgbW9kYWwgaW4gdGhlIGNvbnRlbnRFbFxuICAgIC8vIChub3QgdGhlIFVJIGVsZW1lbnRzIGxpa2UgdGhlIGNsb3NlIGJ1dHRvbikuXG5cblxuICAgIF90aGlzLmNvbnRlbnRFbF8gPSBjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiBNT0RBTF9DTEFTU19OQU1FICsgXCItY29udGVudFwiXG4gICAgfSwge1xuICAgICAgcm9sZTogJ2RvY3VtZW50J1xuICAgIH0pO1xuICAgIF90aGlzLmRlc2NFbF8gPSBjcmVhdGVFbCgncCcsIHtcbiAgICAgIGNsYXNzTmFtZTogTU9EQUxfQ0xBU1NfTkFNRSArIFwiLWRlc2NyaXB0aW9uIHZqcy1jb250cm9sLXRleHRcIixcbiAgICAgIGlkOiBfdGhpcy5lbCgpLmdldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpXG4gICAgfSk7XG4gICAgdGV4dENvbnRlbnQoX3RoaXMuZGVzY0VsXywgX3RoaXMuZGVzY3JpcHRpb24oKSk7XG5cbiAgICBfdGhpcy5lbF8uYXBwZW5kQ2hpbGQoX3RoaXMuZGVzY0VsXyk7XG5cbiAgICBfdGhpcy5lbF8uYXBwZW5kQ2hpbGQoX3RoaXMuY29udGVudEVsXyk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYE1vZGFsRGlhbG9nYCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIERPTSBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbERpYWxvZy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKCksXG4gICAgICB0YWJJbmRleDogLTFcbiAgICB9LCB7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IHRoaXMuaWQoKSArIFwiX2Rlc2NyaXB0aW9uXCIsXG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAnYXJpYS1sYWJlbCc6IHRoaXMubGFiZWwoKSxcbiAgICAgICdyb2xlJzogJ2RpYWxvZydcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5jb250ZW50RWxfID0gbnVsbDtcbiAgICB0aGlzLmRlc2NFbF8gPSBudWxsO1xuICAgIHRoaXMucHJldmlvdXNseUFjdGl2ZUVsXyA9IG51bGw7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIE1PREFMX0NMQVNTX05BTUUgKyBcIiB2anMtaGlkZGVuIFwiICsgX0NvbXBvbmVudC5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsYWJlbCBzdHJpbmcgZm9yIHRoaXMgbW9kYWwuIFByaW1hcmlseSB1c2VkIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgdGhlIGxvY2FsaXplZCBvciByYXcgbGFiZWwgb2YgdGhpcyBtb2RhbC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubGFiZWwgPSBmdW5jdGlvbiBsYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGl6ZSh0aGlzLm9wdGlvbnNfLmxhYmVsIHx8ICdNb2RhbCBXaW5kb3cnKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGVzY3JpcHRpb24gc3RyaW5nIGZvciB0aGlzIG1vZGFsLiBQcmltYXJpbHkgdXNlZCBmb3JcbiAgICogYWNjZXNzaWJpbGl0eS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBsb2NhbGl6ZWQgb3IgcmF3IGRlc2NyaXB0aW9uIG9mIHRoaXMgbW9kYWwuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlc2NyaXB0aW9uID0gZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgdmFyIGRlc2MgPSB0aGlzLm9wdGlvbnNfLmRlc2NyaXB0aW9uIHx8IHRoaXMubG9jYWxpemUoJ1RoaXMgaXMgYSBtb2RhbCB3aW5kb3cuJyk7IC8vIEFwcGVuZCBhIHVuaXZlcnNhbCBjbG9zZWFiaWxpdHkgbWVzc2FnZSBpZiB0aGUgbW9kYWwgaXMgY2xvc2VhYmxlLlxuXG4gICAgaWYgKHRoaXMuY2xvc2VhYmxlKCkpIHtcbiAgICAgIGRlc2MgKz0gJyAnICsgdGhpcy5sb2NhbGl6ZSgnVGhpcyBtb2RhbCBjYW4gYmUgY2xvc2VkIGJ5IHByZXNzaW5nIHRoZSBFc2NhcGUga2V5IG9yIGFjdGl2YXRpbmcgdGhlIGNsb3NlIGJ1dHRvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzYztcbiAgfVxuICAvKipcbiAgICogT3BlbnMgdGhlIG1vZGFsLlxuICAgKlxuICAgKiBAZmlyZXMgTW9kYWxEaWFsb2cjYmVmb3JlbW9kYWxvcGVuXG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNtb2RhbG9wZW5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub3BlbiA9IGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgaWYgKCF0aGlzLm9wZW5lZF8pIHtcbiAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllcigpO1xuICAgICAgLyoqXG4gICAgICAgICogRmlyZWQganVzdCBiZWZvcmUgYSBgTW9kYWxEaWFsb2dgIGlzIG9wZW5lZC5cbiAgICAgICAgKlxuICAgICAgICAqIEBldmVudCBNb2RhbERpYWxvZyNiZWZvcmVtb2RhbG9wZW5cbiAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcignYmVmb3JlbW9kYWxvcGVuJyk7XG4gICAgICB0aGlzLm9wZW5lZF8gPSB0cnVlOyAvLyBGaWxsIGNvbnRlbnQgaWYgdGhlIG1vZGFsIGhhcyBuZXZlciBvcGVuZWQgYmVmb3JlIGFuZFxuICAgICAgLy8gbmV2ZXIgYmVlbiBmaWxsZWQuXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnNfLmZpbGxBbHdheXMgfHwgIXRoaXMuaGFzQmVlbk9wZW5lZF8gJiYgIXRoaXMuaGFzQmVlbkZpbGxlZF8pIHtcbiAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICB9IC8vIElmIHRoZSBwbGF5ZXIgd2FzIHBsYXlpbmcsIHBhdXNlIGl0IGFuZCB0YWtlIG5vdGUgb2YgaXRzIHByZXZpb3VzbHlcbiAgICAgIC8vIHBsYXlpbmcgc3RhdGUuXG5cblxuICAgICAgdGhpcy53YXNQbGF5aW5nXyA9ICFwbGF5ZXIucGF1c2VkKCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnNfLnBhdXNlT25PcGVuICYmIHRoaXMud2FzUGxheWluZ18pIHtcbiAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub24oJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pOyAvLyBIaWRlIGNvbnRyb2xzIGFuZCBub3RlIGlmIHRoZXkgd2VyZSBlbmFibGVkLlxuXG4gICAgICB0aGlzLmhhZENvbnRyb2xzXyA9IHBsYXllci5jb250cm9scygpO1xuICAgICAgcGxheWVyLmNvbnRyb2xzKGZhbHNlKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgdGhpcy5jb25kaXRpb25hbEZvY3VzXygpO1xuICAgICAgdGhpcy5lbCgpLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgYSBgTW9kYWxEaWFsb2dgIGlzIG9wZW5lZC5cbiAgICAgICAgKlxuICAgICAgICAqIEBldmVudCBNb2RhbERpYWxvZyNtb2RhbG9wZW5cbiAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcignbW9kYWxvcGVuJyk7XG4gICAgICB0aGlzLmhhc0JlZW5PcGVuZWRfID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBgTW9kYWxEaWFsb2dgIGlzIGN1cnJlbnRseSBvcGVuIG9yIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtICB7Ym9vbGVhbn0gW3ZhbHVlXVxuICAgKiAgICAgICAgIElmIGdpdmVuLCBpdCB3aWxsIG9wZW4gKGB0cnVlYCkgb3IgY2xvc2UgKGBmYWxzZWApIHRoZSBtb2RhbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICB0aGUgY3VycmVudCBvcGVuIHN0YXRlIG9mIHRoZSBtb2RhbGRpYWxvZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vcGVuZWQgPSBmdW5jdGlvbiBvcGVuZWQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXNbdmFsdWUgPyAnb3BlbicgOiAnY2xvc2UnXSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9wZW5lZF87XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgbW9kYWwsIGRvZXMgbm90aGluZyBpZiB0aGUgYE1vZGFsRGlhbG9nYCBpc1xuICAgKiBub3Qgb3Blbi5cbiAgICpcbiAgICogQGZpcmVzIE1vZGFsRGlhbG9nI2JlZm9yZW1vZGFsY2xvc2VcbiAgICogQGZpcmVzIE1vZGFsRGlhbG9nI21vZGFsY2xvc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMub3BlbmVkXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllcigpO1xuICAgIC8qKlxuICAgICAgKiBGaXJlZCBqdXN0IGJlZm9yZSBhIGBNb2RhbERpYWxvZ2AgaXMgY2xvc2VkLlxuICAgICAgKlxuICAgICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjYmVmb3JlbW9kYWxjbG9zZVxuICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdiZWZvcmVtb2RhbGNsb3NlJyk7XG4gICAgdGhpcy5vcGVuZWRfID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy53YXNQbGF5aW5nXyAmJiB0aGlzLm9wdGlvbnNfLnBhdXNlT25PcGVuKSB7XG4gICAgICBwbGF5ZXIucGxheSgpO1xuICAgIH1cblxuICAgIHRoaXMub2ZmKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcblxuICAgIGlmICh0aGlzLmhhZENvbnRyb2xzXykge1xuICAgICAgcGxheWVyLmNvbnRyb2xzKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuaGlkZSgpO1xuICAgIHRoaXMuZWwoKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAvKipcbiAgICAgICogRmlyZWQganVzdCBhZnRlciBhIGBNb2RhbERpYWxvZ2AgaXMgY2xvc2VkLlxuICAgICAgKlxuICAgICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjbW9kYWxjbG9zZVxuICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdtb2RhbGNsb3NlJyk7XG4gICAgdGhpcy5jb25kaXRpb25hbEJsdXJfKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zXy50ZW1wb3JhcnkpIHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBgTW9kYWxEaWFsb2dgIGlzIGNsb3NlYWJsZSB2aWEgdGhlIFVJLlxuICAgKlxuICAgKiBAcGFyYW0gIHtib29sZWFufSBbdmFsdWVdXG4gICAqICAgICAgICAgSWYgZ2l2ZW4gYXMgYSBib29sZWFuLCBpdCB3aWxsIHNldCB0aGUgYGNsb3NlYWJsZWAgb3B0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFJldHVybnMgdGhlIGZpbmFsIHZhbHVlIG9mIHRoZSBjbG9zYWJsZSBvcHRpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsb3NlYWJsZSA9IGZ1bmN0aW9uIGNsb3NlYWJsZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgdmFyIGNsb3NlYWJsZSA9IHRoaXMuY2xvc2VhYmxlXyA9ICEhdmFsdWU7XG4gICAgICB2YXIgY2xvc2UgPSB0aGlzLmdldENoaWxkKCdjbG9zZUJ1dHRvbicpOyAvLyBJZiB0aGlzIGlzIGJlaW5nIG1hZGUgY2xvc2VhYmxlIGFuZCBoYXMgbm8gY2xvc2UgYnV0dG9uLCBhZGQgb25lLlxuXG4gICAgICBpZiAoY2xvc2VhYmxlICYmICFjbG9zZSkge1xuICAgICAgICAvLyBUaGUgY2xvc2UgYnV0dG9uIHNob3VsZCBiZSBhIGNoaWxkIG9mIHRoZSBtb2RhbCAtIG5vdCBpdHNcbiAgICAgICAgLy8gY29udGVudCBlbGVtZW50LCBzbyB0ZW1wb3JhcmlseSBjaGFuZ2UgdGhlIGNvbnRlbnQgZWxlbWVudC5cbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmNvbnRlbnRFbF87XG4gICAgICAgIHRoaXMuY29udGVudEVsXyA9IHRoaXMuZWxfO1xuICAgICAgICBjbG9zZSA9IHRoaXMuYWRkQ2hpbGQoJ2Nsb3NlQnV0dG9uJywge1xuICAgICAgICAgIGNvbnRyb2xUZXh0OiAnQ2xvc2UgTW9kYWwgRGlhbG9nJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb250ZW50RWxfID0gdGVtcDtcbiAgICAgICAgdGhpcy5vbihjbG9zZSwgJ2Nsb3NlJywgdGhpcy5jbG9zZSk7XG4gICAgICB9IC8vIElmIHRoaXMgaXMgYmVpbmcgbWFkZSB1bmNsb3NlYWJsZSBhbmQgaGFzIGEgY2xvc2UgYnV0dG9uLCByZW1vdmUgaXQuXG5cblxuICAgICAgaWYgKCFjbG9zZWFibGUgJiYgY2xvc2UpIHtcbiAgICAgICAgdGhpcy5vZmYoY2xvc2UsICdjbG9zZScsIHRoaXMuY2xvc2UpO1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGNsb3NlKTtcbiAgICAgICAgY2xvc2UuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNsb3NlYWJsZV87XG4gIH1cbiAgLyoqXG4gICAqIEZpbGwgdGhlIG1vZGFsJ3MgY29udGVudCBlbGVtZW50IHdpdGggdGhlIG1vZGFsJ3MgXCJjb250ZW50XCIgb3B0aW9uLlxuICAgKiBUaGUgY29udGVudCBlbGVtZW50IHdpbGwgYmUgZW1wdGllZCBiZWZvcmUgdGhpcyBjaGFuZ2UgdGFrZXMgcGxhY2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZpbGwgPSBmdW5jdGlvbiBmaWxsKCkge1xuICAgIHRoaXMuZmlsbFdpdGgodGhpcy5jb250ZW50KCkpO1xuICB9XG4gIC8qKlxuICAgKiBGaWxsIHRoZSBtb2RhbCdzIGNvbnRlbnQgZWxlbWVudCB3aXRoIGFyYml0cmFyeSBjb250ZW50LlxuICAgKiBUaGUgY29udGVudCBlbGVtZW50IHdpbGwgYmUgZW1wdGllZCBiZWZvcmUgdGhpcyBjaGFuZ2UgdGFrZXMgcGxhY2UuXG4gICAqXG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNiZWZvcmVtb2RhbGZpbGxcbiAgICogQGZpcmVzIE1vZGFsRGlhbG9nI21vZGFsZmlsbFxuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBbY29udGVudF1cbiAgICogICAgICAgIFRoZSBzYW1lIHJ1bGVzIGFwcGx5IHRvIHRoaXMgYXMgYXBwbHkgdG8gdGhlIGBjb250ZW50YCBvcHRpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZpbGxXaXRoID0gZnVuY3Rpb24gZmlsbFdpdGgoY29udGVudCkge1xuICAgIHZhciBjb250ZW50RWwgPSB0aGlzLmNvbnRlbnRFbCgpO1xuICAgIHZhciBwYXJlbnRFbCA9IGNvbnRlbnRFbC5wYXJlbnROb2RlO1xuICAgIHZhciBuZXh0U2libGluZ0VsID0gY29udGVudEVsLm5leHRTaWJsaW5nO1xuICAgIC8qKlxuICAgICAgKiBGaXJlZCBqdXN0IGJlZm9yZSBhIGBNb2RhbERpYWxvZ2AgaXMgZmlsbGVkIHdpdGggY29udGVudC5cbiAgICAgICpcbiAgICAgICogQGV2ZW50IE1vZGFsRGlhbG9nI2JlZm9yZW1vZGFsZmlsbFxuICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdiZWZvcmVtb2RhbGZpbGwnKTtcbiAgICB0aGlzLmhhc0JlZW5GaWxsZWRfID0gdHJ1ZTsgLy8gRGV0YWNoIHRoZSBjb250ZW50IGVsZW1lbnQgZnJvbSB0aGUgRE9NIGJlZm9yZSBwZXJmb3JtaW5nXG4gICAgLy8gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG1vZGlmeWluZyB0aGUgbGl2ZSBET00gbXVsdGlwbGUgdGltZXMuXG5cbiAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZChjb250ZW50RWwpO1xuICAgIHRoaXMuZW1wdHkoKTtcbiAgICBpbnNlcnRDb250ZW50KGNvbnRlbnRFbCwgY29udGVudCk7XG4gICAgLyoqXG4gICAgICogRmlyZWQganVzdCBhZnRlciBhIGBNb2RhbERpYWxvZ2AgaXMgZmlsbGVkIHdpdGggY29udGVudC5cbiAgICAgKlxuICAgICAqIEBldmVudCBNb2RhbERpYWxvZyNtb2RhbGZpbGxcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ21vZGFsZmlsbCcpOyAvLyBSZS1pbmplY3QgdGhlIHJlLWZpbGxlZCBjb250ZW50IGVsZW1lbnQuXG5cbiAgICBpZiAobmV4dFNpYmxpbmdFbCkge1xuICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKGNvbnRlbnRFbCwgbmV4dFNpYmxpbmdFbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKGNvbnRlbnRFbCk7XG4gICAgfSAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgY2xvc2UgYnV0dG9uIGlzIGxhc3QgaW4gdGhlIGRpYWxvZyBET01cblxuXG4gICAgdmFyIGNsb3NlQnV0dG9uID0gdGhpcy5nZXRDaGlsZCgnY2xvc2VCdXR0b24nKTtcblxuICAgIGlmIChjbG9zZUJ1dHRvbikge1xuICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24uZWxfKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVtcHRpZXMgdGhlIGNvbnRlbnQgZWxlbWVudC4gVGhpcyBoYXBwZW5zIGFueXRpbWUgdGhlIG1vZGFsIGlzIGZpbGxlZC5cbiAgICpcbiAgICogQGZpcmVzIE1vZGFsRGlhbG9nI2JlZm9yZW1vZGFsZW1wdHlcbiAgICogQGZpcmVzIE1vZGFsRGlhbG9nI21vZGFsZW1wdHlcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW1wdHkgPSBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAvKipcbiAgICAqIEZpcmVkIGp1c3QgYmVmb3JlIGEgYE1vZGFsRGlhbG9nYCBpcyBlbXB0aWVkLlxuICAgICpcbiAgICAqIEBldmVudCBNb2RhbERpYWxvZyNiZWZvcmVtb2RhbGVtcHR5XG4gICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgKi9cbiAgICB0aGlzLnRyaWdnZXIoJ2JlZm9yZW1vZGFsZW1wdHknKTtcbiAgICBlbXB0eUVsKHRoaXMuY29udGVudEVsKCkpO1xuICAgIC8qKlxuICAgICogRmlyZWQganVzdCBhZnRlciBhIGBNb2RhbERpYWxvZ2AgaXMgZW1wdGllZC5cbiAgICAqXG4gICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjbW9kYWxlbXB0eVxuICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ21vZGFsZW1wdHknKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBtb2RhbCBjb250ZW50LCB3aGljaCBnZXRzIG5vcm1hbGl6ZWQgYmVmb3JlIGJlaW5nXG4gICAqIHJlbmRlcmVkIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogVGhpcyBkb2VzIG5vdCB1cGRhdGUgdGhlIERPTSBvciBmaWxsIHRoZSBtb2RhbCwgYnV0IGl0IGlzIGNhbGxlZCBkdXJpbmdcbiAgICogdGhhdCBwcm9jZXNzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtNaXhlZH0gW3ZhbHVlXVxuICAgKiAgICAgICAgIElmIGRlZmluZWQsIHNldHMgdGhlIGludGVybmFsIGNvbnRlbnQgdmFsdWUgdG8gYmUgdXNlZCBvbiB0aGVcbiAgICogICAgICAgICBuZXh0IGNhbGwocykgdG8gYGZpbGxgLiBUaGlzIHZhbHVlIGlzIG5vcm1hbGl6ZWQgYmVmb3JlIGJlaW5nXG4gICAqICAgICAgICAgaW5zZXJ0ZWQuIFRvIFwiY2xlYXJcIiB0aGUgaW50ZXJuYWwgY29udGVudCB2YWx1ZSwgcGFzcyBgbnVsbGAuXG4gICAqXG4gICAqIEByZXR1cm4ge01peGVkfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IGNvbnRlbnQgb2YgdGhlIG1vZGFsIGRpYWxvZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb250ZW50ID0gZnVuY3Rpb24gY29udGVudCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmNvbnRlbnRfID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29udGVudF87XG4gIH1cbiAgLyoqXG4gICAqIGNvbmRpdGlvbmFsbHkgZm9jdXMgdGhlIG1vZGFsIGRpYWxvZyBpZiBmb2N1cyB3YXMgcHJldmlvdXNseSBvbiB0aGUgcGxheWVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25kaXRpb25hbEZvY3VzXyA9IGZ1bmN0aW9uIGNvbmRpdGlvbmFsRm9jdXNfKCkge1xuICAgIHZhciBhY3RpdmVFbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgdmFyIHBsYXllckVsID0gdGhpcy5wbGF5ZXJfLmVsXztcbiAgICB0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8gPSBudWxsO1xuXG4gICAgaWYgKHBsYXllckVsLmNvbnRhaW5zKGFjdGl2ZUVsKSB8fCBwbGF5ZXJFbCA9PT0gYWN0aXZlRWwpIHtcbiAgICAgIHRoaXMucHJldmlvdXNseUFjdGl2ZUVsXyA9IGFjdGl2ZUVsO1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogY29uZGl0aW9uYWxseSBibHVyIHRoZSBlbGVtZW50IGFuZCByZWZvY3VzIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25kaXRpb25hbEJsdXJfID0gZnVuY3Rpb24gY29uZGl0aW9uYWxCbHVyXygpIHtcbiAgICBpZiAodGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfKSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8uZm9jdXMoKTtcbiAgICAgIHRoaXMucHJldmlvdXNseUFjdGl2ZUVsXyA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBLZXlkb3duIGhhbmRsZXIuIEF0dGFjaGVkIHdoZW4gbW9kYWwgaXMgZm9jdXNlZC5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIERvIG5vdCBhbGxvdyBrZXlkb3ducyB0byByZWFjaCBvdXQgb2YgdGhlIG1vZGFsIGRpYWxvZy5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFc2NhcGUnKSAmJiB0aGlzLmNsb3NlYWJsZSgpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXhpdCBlYXJseSBpZiBpdCBpc24ndCBhIHRhYiBrZXlcblxuXG4gICAgaWYgKCFrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdUYWInKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmb2N1c2FibGVFbHMgPSB0aGlzLmZvY3VzYWJsZUVsc18oKTtcbiAgICB2YXIgYWN0aXZlRWwgPSB0aGlzLmVsXy5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKTtcbiAgICB2YXIgZm9jdXNJbmRleDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9jdXNhYmxlRWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYWN0aXZlRWwgPT09IGZvY3VzYWJsZUVsc1tpXSkge1xuICAgICAgICBmb2N1c0luZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMuZWxfKSB7XG4gICAgICBmb2N1c0luZGV4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgZm9jdXNJbmRleCA9PT0gMCkge1xuICAgICAgZm9jdXNhYmxlRWxzW2ZvY3VzYWJsZUVscy5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKCFldmVudC5zaGlmdEtleSAmJiBmb2N1c0luZGV4ID09PSBmb2N1c2FibGVFbHMubGVuZ3RoIC0gMSkge1xuICAgICAgZm9jdXNhYmxlRWxzWzBdLmZvY3VzKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogZ2V0IGFsbCBmb2N1c2FibGUgZWxlbWVudHNcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZm9jdXNhYmxlRWxzXyA9IGZ1bmN0aW9uIGZvY3VzYWJsZUVsc18oKSB7XG4gICAgdmFyIGFsbENoaWxkcmVuID0gdGhpcy5lbF8ucXVlcnlTZWxlY3RvckFsbCgnKicpO1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYWxsQ2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIChjaGlsZCBpbnN0YW5jZW9mIHdpbmRvdyQxLkhUTUxBbmNob3JFbGVtZW50IHx8IGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTEFyZWFFbGVtZW50KSAmJiBjaGlsZC5oYXNBdHRyaWJ1dGUoJ2hyZWYnKSB8fCAoY2hpbGQgaW5zdGFuY2VvZiB3aW5kb3ckMS5IVE1MSW5wdXRFbGVtZW50IHx8IGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTFNlbGVjdEVsZW1lbnQgfHwgY2hpbGQgaW5zdGFuY2VvZiB3aW5kb3ckMS5IVE1MVGV4dEFyZWFFbGVtZW50IHx8IGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTEJ1dHRvbkVsZW1lbnQpICYmICFjaGlsZC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgY2hpbGQgaW5zdGFuY2VvZiB3aW5kb3ckMS5IVE1MSUZyYW1lRWxlbWVudCB8fCBjaGlsZCBpbnN0YW5jZW9mIHdpbmRvdyQxLkhUTUxPYmplY3RFbGVtZW50IHx8IGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTEVtYmVkRWxlbWVudCB8fCBjaGlsZC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpICE9PSAtMSB8fCBjaGlsZC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbERpYWxvZztcbn0oQ29tcG9uZW50KTtcbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIGZvciBgTW9kYWxEaWFsb2dgIGRlZmF1bHQgb3B0aW9ucy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5cbk1vZGFsRGlhbG9nLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgcGF1c2VPbk9wZW46IHRydWUsXG4gIHRlbXBvcmFyeTogdHJ1ZVxufTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTW9kYWxEaWFsb2cnLCBNb2RhbERpYWxvZyk7XG5cbi8qKlxuICogQ29tbW9uIGZ1bmN0aW9uYWxpeSBiZXR3ZWVuIHtAbGluayBUZXh0VHJhY2tMaXN0fSwge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fSwgYW5kXG4gKiB7QGxpbmsgVmlkZW9UcmFja0xpc3R9XG4gKlxuICogQGV4dGVuZHMgRXZlbnRUYXJnZXRcbiAqL1xuXG52YXIgVHJhY2tMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhY2tMaXN0LCBfRXZlbnRUYXJnZXQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge1RyYWNrW119IHRyYWNrc1xuICAgKiAgICAgICAgQSBsaXN0IG9mIHRyYWNrcyB0byBpbml0aWFsaXplIHRoZSBsaXN0IHdpdGguXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZnVuY3Rpb24gVHJhY2tMaXN0KHRyYWNrcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh0cmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgdHJhY2tzID0gW107XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLnRyYWNrc18gPSBbXTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2tMaXN0XG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiAgICAgICAgIFRoZSBjdXJyZW50IG51bWJlciBvZiBgVHJhY2tgcyBpbiB0aGUgdGhpcyBUcmFja2lzdC5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3NfLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBfdGhpcy5hZGRUcmFjayh0cmFja3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIFRyYWNrfSB0byB0aGUgYFRyYWNrTGlzdGBcbiAgICpcbiAgICogQHBhcmFtIHtUcmFja30gdHJhY2tcbiAgICogICAgICAgIFRoZSBhdWRpbywgdmlkZW8sIG9yIHRleHQgdHJhY2sgdG8gYWRkIHRvIHRoZSBsaXN0LlxuICAgKlxuICAgKiBAZmlyZXMgVHJhY2tMaXN0I2FkZHRyYWNrXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFRyYWNrTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZFRyYWNrID0gZnVuY3Rpb24gYWRkVHJhY2sodHJhY2spIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnRyYWNrc18ubGVuZ3RoO1xuXG4gICAgaWYgKCEoJycgKyBpbmRleCBpbiB0aGlzKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRyYWNrc19baW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IC8vIERvIG5vdCBhZGQgZHVwbGljYXRlIHRyYWNrc1xuXG5cbiAgICBpZiAodGhpcy50cmFja3NfLmluZGV4T2YodHJhY2spID09PSAtMSkge1xuICAgICAgdGhpcy50cmFja3NfLnB1c2godHJhY2spO1xuICAgICAgLyoqXG4gICAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIHRvIGEgdHJhY2sgbGlzdC5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgVHJhY2tMaXN0I2FkZHRyYWNrXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKiBAcHJvcGVydHkge1RyYWNrfSB0cmFja1xuICAgICAgICogICAgICAgICAgIEEgcmVmZXJlbmNlIHRvIHRyYWNrIHRoYXQgd2FzIGFkZGVkLlxuICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcih7XG4gICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgdHlwZTogJ2FkZHRyYWNrJyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBUcmFja30gZnJvbSB0aGUgYFRyYWNrTGlzdGBcbiAgICpcbiAgICogQHBhcmFtIHtUcmFja30gcnRyYWNrXG4gICAqICAgICAgICBUaGUgYXVkaW8sIHZpZGVvLCBvciB0ZXh0IHRyYWNrIHRvIHJlbW92ZSBmcm9tIHRoZSBsaXN0LlxuICAgKlxuICAgKiBAZmlyZXMgVHJhY2tMaXN0I3JlbW92ZXRyYWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlVHJhY2socnRyYWNrKSB7XG4gICAgdmFyIHRyYWNrO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRoaXNbaV0gPT09IHJ0cmFjaykge1xuICAgICAgICB0cmFjayA9IHRoaXNbaV07XG5cbiAgICAgICAgaWYgKHRyYWNrLm9mZikge1xuICAgICAgICAgIHRyYWNrLm9mZigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmFja3NfLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0cmFjaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIHRyYWNrIGlzIHJlbW92ZWQgZnJvbSB0cmFjayBsaXN0LlxuICAgICAqXG4gICAgICogQGV2ZW50IFRyYWNrTGlzdCNyZW1vdmV0cmFja1xuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKiBAcHJvcGVydHkge1RyYWNrfSB0cmFja1xuICAgICAqICAgICAgICAgICBBIHJlZmVyZW5jZSB0byB0cmFjayB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqL1xuXG5cbiAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgdHJhY2s6IHRyYWNrLFxuICAgICAgdHlwZTogJ3JlbW92ZXRyYWNrJyxcbiAgICAgIHRhcmdldDogdGhpc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBUcmFjayBmcm9tIHRoZSBUcmFja0xpc3QgYnkgYSB0cmFja3MgaWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gdGhlIGlkIG9mIHRoZSB0cmFjayB0byBnZXRcbiAgICogQG1ldGhvZCBnZXRUcmFja0J5SWRcbiAgICogQHJldHVybiB7VHJhY2t9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFRyYWNrQnlJZCA9IGZ1bmN0aW9uIGdldFRyYWNrQnlJZChpZCkge1xuICAgIHZhciByZXN1bHQgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdGhpc1tpXTtcblxuICAgICAgaWYgKHRyYWNrLmlkID09PSBpZCkge1xuICAgICAgICByZXN1bHQgPSB0cmFjaztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gVHJhY2tMaXN0O1xufShFdmVudFRhcmdldCk7XG4vKipcbiAqIFRyaWdnZXJlZCB3aGVuIGEgZGlmZmVyZW50IHRyYWNrIGlzIHNlbGVjdGVkL2VuYWJsZWQuXG4gKlxuICogQGV2ZW50IFRyYWNrTGlzdCNjaGFuZ2VcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIEV2ZW50cyB0aGF0IGNhbiBiZSBjYWxsZWQgd2l0aCBvbiArIGV2ZW50TmFtZS4gU2VlIHtAbGluayBFdmVudEhhbmRsZXJ9LlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBUcmFja0xpc3QjYWxsb3dlZEV2ZW50c19cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5UcmFja0xpc3QucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfID0ge1xuICBjaGFuZ2U6ICdjaGFuZ2UnLFxuICBhZGR0cmFjazogJ2FkZHRyYWNrJyxcbiAgcmVtb3ZldHJhY2s6ICdyZW1vdmV0cmFjaydcbn07IC8vIGVtdWxhdGUgYXR0cmlidXRlIEV2ZW50SGFuZGxlciBzdXBwb3J0IHRvIGFsbG93IGZvciBmZWF0dXJlIGRldGVjdGlvblxuXG5mb3IgKHZhciBldmVudCBpbiBUcmFja0xpc3QucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfKSB7XG4gIFRyYWNrTGlzdC5wcm90b3R5cGVbJ29uJyArIGV2ZW50XSA9IG51bGw7XG59XG5cbi8qKlxuICogQW55d2hlcmUgd2UgY2FsbCB0aGlzIGZ1bmN0aW9uIHdlIGRpdmVyZ2UgZnJvbSB0aGUgc3BlY1xuICogYXMgd2Ugb25seSBzdXBwb3J0IG9uZSBlbmFibGVkIGF1ZGlvdHJhY2sgYXQgYSB0aW1lXG4gKlxuICogQHBhcmFtIHtBdWRpb1RyYWNrTGlzdH0gbGlzdFxuICogICAgICAgIGxpc3QgdG8gd29yayBvblxuICpcbiAqIEBwYXJhbSB7QXVkaW9UcmFja30gdHJhY2tcbiAqICAgICAgICBUaGUgdHJhY2sgdG8gc2tpcFxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRpc2FibGVPdGhlcnMgPSBmdW5jdGlvbiBkaXNhYmxlT3RoZXJzKGxpc3QsIHRyYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0LmtleXMobGlzdFtpXSkubGVuZ3RoIHx8IHRyYWNrLmlkID09PSBsaXN0W2ldLmlkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIGFub3RoZXIgYXVkaW8gdHJhY2sgaXMgZW5hYmxlZCwgZGlzYWJsZSBpdFxuXG5cbiAgICBsaXN0W2ldLmVuYWJsZWQgPSBmYWxzZTtcbiAgfVxufTtcbi8qKlxuICogVGhlIGN1cnJlbnQgbGlzdCBvZiB7QGxpbmsgQXVkaW9UcmFja30gZm9yIGEgbWVkaWEgZmlsZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjYXVkaW90cmFja2xpc3R9XG4gKiBAZXh0ZW5kcyBUcmFja0xpc3RcbiAqL1xuXG5cbnZhciBBdWRpb1RyYWNrTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RyYWNrTGlzdCkge1xuICBfaW5oZXJpdHNMb29zZShBdWRpb1RyYWNrTGlzdCwgX1RyYWNrTGlzdCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge0F1ZGlvVHJhY2tbXX0gW3RyYWNrcz1bXV1cbiAgICogICAgICAgIEEgbGlzdCBvZiBgQXVkaW9UcmFja2AgdG8gaW5zdGFudGlhdGUgdGhlIGxpc3Qgd2l0aC5cbiAgICovXG4gIGZ1bmN0aW9uIEF1ZGlvVHJhY2tMaXN0KHRyYWNrcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh0cmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgdHJhY2tzID0gW107XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIG9ubHkgMSB0cmFjayBpcyBlbmFibGVkXG4gICAgLy8gc29ydGVkIGZyb20gbGFzdCBpbmRleCB0byBmaXJzdCBpbmRleFxuICAgIGZvciAodmFyIGkgPSB0cmFja3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmICh0cmFja3NbaV0uZW5hYmxlZCkge1xuICAgICAgICBkaXNhYmxlT3RoZXJzKHRyYWNrcywgdHJhY2tzW2ldKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfVHJhY2tMaXN0LmNhbGwodGhpcywgdHJhY2tzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNoYW5naW5nXyA9IGZhbHNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIGFuIHtAbGluayBBdWRpb1RyYWNrfSB0byB0aGUgYEF1ZGlvVHJhY2tMaXN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtBdWRpb1RyYWNrfSB0cmFja1xuICAgKiAgICAgICAgVGhlIEF1ZGlvVHJhY2sgdG8gYWRkIHRvIHRoZSBsaXN0XG4gICAqXG4gICAqIEBmaXJlcyBUcmFja0xpc3QjYWRkdHJhY2tcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQXVkaW9UcmFja0xpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRUcmFjayA9IGZ1bmN0aW9uIGFkZFRyYWNrKHRyYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodHJhY2suZW5hYmxlZCkge1xuICAgICAgZGlzYWJsZU90aGVycyh0aGlzLCB0cmFjayk7XG4gICAgfVxuXG4gICAgX1RyYWNrTGlzdC5wcm90b3R5cGUuYWRkVHJhY2suY2FsbCh0aGlzLCB0cmFjayk7IC8vIG5hdGl2ZSB0cmFja3MgZG9uJ3QgaGF2ZSB0aGlzXG5cblxuICAgIGlmICghdHJhY2suYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyYWNrLmVuYWJsZWRDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gd2hlbiB3ZSBhcmUgZGlzYWJsaW5nIG90aGVyIHRyYWNrcyAoc2luY2Ugd2UgZG9uJ3Qgc3VwcG9ydFxuICAgICAgLy8gbW9yZSB0aGFuIG9uZSB0cmFjayBhdCBhIHRpbWUpIHdlIHdpbGwgc2V0IGNoYW5naW5nX1xuICAgICAgLy8gdG8gdHJ1ZSBzbyB0aGF0IHdlIGRvbid0IHRyaWdnZXIgYWRkaXRpb25hbCBjaGFuZ2UgZXZlbnRzXG4gICAgICBpZiAoX3RoaXMyLmNoYW5naW5nXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5jaGFuZ2luZ18gPSB0cnVlO1xuICAgICAgZGlzYWJsZU90aGVycyhfdGhpczIsIHRyYWNrKTtcbiAgICAgIF90aGlzMi5jaGFuZ2luZ18gPSBmYWxzZTtcblxuICAgICAgX3RoaXMyLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGxpc3RlbnMgQXVkaW9UcmFjayNlbmFibGVkY2hhbmdlXG4gICAgICogQGZpcmVzIFRyYWNrTGlzdCNjaGFuZ2VcbiAgICAgKi9cblxuXG4gICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignZW5hYmxlZGNoYW5nZScsIHRyYWNrLmVuYWJsZWRDaGFuZ2VfKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlVHJhY2sgPSBmdW5jdGlvbiByZW1vdmVUcmFjayhydHJhY2spIHtcbiAgICBfVHJhY2tMaXN0LnByb3RvdHlwZS5yZW1vdmVUcmFjay5jYWxsKHRoaXMsIHJ0cmFjayk7XG5cbiAgICBpZiAocnRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiYgcnRyYWNrLmVuYWJsZWRDaGFuZ2VfKSB7XG4gICAgICBydHJhY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5hYmxlZGNoYW5nZScsIHJ0cmFjay5lbmFibGVkQ2hhbmdlXyk7XG4gICAgICBydHJhY2suZW5hYmxlZENoYW5nZV8gPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQXVkaW9UcmFja0xpc3Q7XG59KFRyYWNrTGlzdCk7XG5cbi8qKlxuICogVW4tc2VsZWN0IGFsbCBvdGhlciB7QGxpbmsgVmlkZW9UcmFja31zIHRoYXQgYXJlIHNlbGVjdGVkLlxuICpcbiAqIEBwYXJhbSB7VmlkZW9UcmFja0xpc3R9IGxpc3RcbiAqICAgICAgICBsaXN0IHRvIHdvcmsgb25cbiAqXG4gKiBAcGFyYW0ge1ZpZGVvVHJhY2t9IHRyYWNrXG4gKiAgICAgICAgVGhlIHRyYWNrIHRvIHNraXBcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkaXNhYmxlT3RoZXJzJDEgPSBmdW5jdGlvbiBkaXNhYmxlT3RoZXJzKGxpc3QsIHRyYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0LmtleXMobGlzdFtpXSkubGVuZ3RoIHx8IHRyYWNrLmlkID09PSBsaXN0W2ldLmlkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIGFub3RoZXIgdmlkZW8gdHJhY2sgaXMgZW5hYmxlZCwgZGlzYWJsZSBpdFxuXG5cbiAgICBsaXN0W2ldLnNlbGVjdGVkID0gZmFsc2U7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBjdXJyZW50IGxpc3Qgb2Yge0BsaW5rIFZpZGVvVHJhY2t9IGZvciBhIHZpZGVvLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN2aWRlb3RyYWNrbGlzdH1cbiAqIEBleHRlbmRzIFRyYWNrTGlzdFxuICovXG5cblxudmFyIFZpZGVvVHJhY2tMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVHJhY2tMaXN0KSB7XG4gIF9pbmhlcml0c0xvb3NlKFZpZGVvVHJhY2tMaXN0LCBfVHJhY2tMaXN0KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7VmlkZW9UcmFja1tdfSBbdHJhY2tzPVtdXVxuICAgKiAgICAgICAgQSBsaXN0IG9mIGBWaWRlb1RyYWNrYCB0byBpbnN0YW50aWF0ZSB0aGUgbGlzdCB3aXRoLlxuICAgKi9cbiAgZnVuY3Rpb24gVmlkZW9UcmFja0xpc3QodHJhY2tzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKHRyYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0cmFja3MgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgb25seSAxIHRyYWNrIGlzIGVuYWJsZWRcbiAgICAvLyBzb3J0ZWQgZnJvbSBsYXN0IGluZGV4IHRvIGZpcnN0IGluZGV4XG4gICAgZm9yICh2YXIgaSA9IHRyYWNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHRyYWNrc1tpXS5zZWxlY3RlZCkge1xuICAgICAgICBkaXNhYmxlT3RoZXJzJDEodHJhY2tzLCB0cmFja3NbaV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcyA9IF9UcmFja0xpc3QuY2FsbCh0aGlzLCB0cmFja3MpIHx8IHRoaXM7XG4gICAgX3RoaXMuY2hhbmdpbmdfID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBWaWRlb1RyYWNrTGlzdCNzZWxlY3RlZEluZGV4XG4gICAgICogICAgICAgICBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgc2VsZWN0ZWQge0BsaW5rIFZpZGVvVHJhY2tgfS5cbiAgICAgKi9cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3NlbGVjdGVkSW5kZXgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXNbX2ldLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gX2k7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge31cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBWaWRlb1RyYWNrfSB0byB0aGUgYFZpZGVvVHJhY2tMaXN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtWaWRlb1RyYWNrfSB0cmFja1xuICAgKiAgICAgICAgVGhlIFZpZGVvVHJhY2sgdG8gYWRkIHRvIHRoZSBsaXN0XG4gICAqXG4gICAqIEBmaXJlcyBUcmFja0xpc3QjYWRkdHJhY2tcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlkZW9UcmFja0xpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRUcmFjayA9IGZ1bmN0aW9uIGFkZFRyYWNrKHRyYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodHJhY2suc2VsZWN0ZWQpIHtcbiAgICAgIGRpc2FibGVPdGhlcnMkMSh0aGlzLCB0cmFjayk7XG4gICAgfVxuXG4gICAgX1RyYWNrTGlzdC5wcm90b3R5cGUuYWRkVHJhY2suY2FsbCh0aGlzLCB0cmFjayk7IC8vIG5hdGl2ZSB0cmFja3MgZG9uJ3QgaGF2ZSB0aGlzXG5cblxuICAgIGlmICghdHJhY2suYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyYWNrLnNlbGVjdGVkQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczIuY2hhbmdpbmdfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLmNoYW5naW5nXyA9IHRydWU7XG4gICAgICBkaXNhYmxlT3RoZXJzJDEoX3RoaXMyLCB0cmFjayk7XG4gICAgICBfdGhpczIuY2hhbmdpbmdfID0gZmFsc2U7XG5cbiAgICAgIF90aGlzMi50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBsaXN0ZW5zIFZpZGVvVHJhY2sjc2VsZWN0ZWRjaGFuZ2VcbiAgICAgKiBAZmlyZXMgVHJhY2tMaXN0I2NoYW5nZVxuICAgICAqL1xuXG5cbiAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlZGNoYW5nZScsIHRyYWNrLnNlbGVjdGVkQ2hhbmdlXyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlVHJhY2socnRyYWNrKSB7XG4gICAgX1RyYWNrTGlzdC5wcm90b3R5cGUucmVtb3ZlVHJhY2suY2FsbCh0aGlzLCBydHJhY2spO1xuXG4gICAgaWYgKHJ0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyICYmIHJ0cmFjay5zZWxlY3RlZENoYW5nZV8pIHtcbiAgICAgIHJ0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RlZGNoYW5nZScsIHJ0cmFjay5zZWxlY3RlZENoYW5nZV8pO1xuICAgICAgcnRyYWNrLnNlbGVjdGVkQ2hhbmdlXyA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBWaWRlb1RyYWNrTGlzdDtcbn0oVHJhY2tMaXN0KTtcblxuLyoqXG4gKiBUaGUgY3VycmVudCBsaXN0IG9mIHtAbGluayBUZXh0VHJhY2t9IGZvciBhIG1lZGlhIGZpbGUuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3RleHR0cmFja2xpc3R9XG4gKiBAZXh0ZW5kcyBUcmFja0xpc3RcbiAqL1xuXG52YXIgVGV4dFRyYWNrTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RyYWNrTGlzdCkge1xuICBfaW5oZXJpdHNMb29zZShUZXh0VHJhY2tMaXN0LCBfVHJhY2tMaXN0KTtcblxuICBmdW5jdGlvbiBUZXh0VHJhY2tMaXN0KCkge1xuICAgIHJldHVybiBfVHJhY2tMaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUZXh0VHJhY2tMaXN0LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIFRleHRUcmFja30gdG8gdGhlIGBUZXh0VHJhY2tMaXN0YFxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIFRoZSB0ZXh0IHRyYWNrIHRvIGFkZCB0byB0aGUgbGlzdC5cbiAgICpcbiAgICogQGZpcmVzIFRyYWNrTGlzdCNhZGR0cmFja1xuICAgKi9cbiAgX3Byb3RvLmFkZFRyYWNrID0gZnVuY3Rpb24gYWRkVHJhY2sodHJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX1RyYWNrTGlzdC5wcm90b3R5cGUuYWRkVHJhY2suY2FsbCh0aGlzLCB0cmFjayk7XG5cbiAgICBpZiAoIXRoaXMucXVldWVDaGFuZ2VfKSB7XG4gICAgICB0aGlzLnF1ZXVlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnF1ZXVlVHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy50cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZSkge1xuICAgICAgdGhpcy50cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKCdzZWxlY3RlZGxhbmd1YWdlY2hhbmdlJyk7XG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbGlzdGVucyBUZXh0VHJhY2sjbW9kZWNoYW5nZVxuICAgICAqIEBmaXJlcyBUcmFja0xpc3QjY2hhbmdlXG4gICAgICovXG5cblxuICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ21vZGVjaGFuZ2UnLCB0aGlzLnF1ZXVlQ2hhbmdlXyk7XG4gICAgdmFyIG5vbkxhbmd1YWdlVGV4dFRyYWNrS2luZCA9IFsnbWV0YWRhdGEnLCAnY2hhcHRlcnMnXTtcblxuICAgIGlmIChub25MYW5ndWFnZVRleHRUcmFja0tpbmQuaW5kZXhPZih0cmFjay5raW5kKSA9PT0gLTEpIHtcbiAgICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ21vZGVjaGFuZ2UnLCB0aGlzLnRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW1vdmVUcmFjayA9IGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHJ0cmFjaykge1xuICAgIF9UcmFja0xpc3QucHJvdG90eXBlLnJlbW92ZVRyYWNrLmNhbGwodGhpcywgcnRyYWNrKTsgLy8gbWFudWFsbHkgcmVtb3ZlIHRoZSBldmVudCBoYW5kbGVycyB3ZSBhZGRlZFxuXG5cbiAgICBpZiAocnRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGlmICh0aGlzLnF1ZXVlQ2hhbmdlXykge1xuICAgICAgICBydHJhY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW9kZWNoYW5nZScsIHRoaXMucXVldWVDaGFuZ2VfKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8pIHtcbiAgICAgICAgcnRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vZGVjaGFuZ2UnLCB0aGlzLnRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2tMaXN0O1xufShUcmFja0xpc3QpO1xuXG4vKipcbiAqIEBmaWxlIGh0bWwtdHJhY2stZWxlbWVudC1saXN0LmpzXG4gKi9cblxuLyoqXG4gKiBUaGUgY3VycmVudCBsaXN0IG9mIHtAbGluayBIdG1sVHJhY2tFbGVtZW50fXMuXG4gKi9cbnZhciBIdG1sVHJhY2tFbGVtZW50TGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtIdG1sVHJhY2tFbGVtZW50W119IFt0cmFja3M9W11dXG4gICAqICAgICAgICBBIGxpc3Qgb2YgYEh0bWxUcmFja0VsZW1lbnRgIHRvIGluc3RhbnRpYXRlIHRoZSBsaXN0IHdpdGguXG4gICAqL1xuICBmdW5jdGlvbiBIdG1sVHJhY2tFbGVtZW50TGlzdCh0cmFja0VsZW1lbnRzKSB7XG4gICAgaWYgKHRyYWNrRWxlbWVudHMgPT09IHZvaWQgMCkge1xuICAgICAgdHJhY2tFbGVtZW50cyA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMudHJhY2tFbGVtZW50c18gPSBbXTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgSHRtbFRyYWNrRWxlbWVudExpc3RcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGxlbmd0aFxuICAgICAqICAgICAgICAgVGhlIGN1cnJlbnQgbnVtYmVyIG9mIGBUcmFja2BzIGluIHRoZSB0aGlzIFRyYWNraXN0LlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tFbGVtZW50c18ubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRyYWNrRWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYWRkVHJhY2tFbGVtZW50Xyh0cmFja0VsZW1lbnRzW2ldKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhbiB7QGxpbmsgSHRtbFRyYWNrRWxlbWVudH0gdG8gdGhlIGBIdG1sVHJhY2tFbGVtZW50TGlzdGBcbiAgICpcbiAgICogQHBhcmFtIHtIdG1sVHJhY2tFbGVtZW50fSB0cmFja0VsZW1lbnRcbiAgICogICAgICAgIFRoZSB0cmFjayBlbGVtZW50IHRvIGFkZCB0byB0aGUgbGlzdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSHRtbFRyYWNrRWxlbWVudExpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRUcmFja0VsZW1lbnRfID0gZnVuY3Rpb24gYWRkVHJhY2tFbGVtZW50Xyh0cmFja0VsZW1lbnQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aDtcblxuICAgIGlmICghKCcnICsgaW5kZXggaW4gdGhpcykpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50cmFja0VsZW1lbnRzX1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gLy8gRG8gbm90IGFkZCBkdXBsaWNhdGUgZWxlbWVudHNcblxuXG4gICAgaWYgKHRoaXMudHJhY2tFbGVtZW50c18uaW5kZXhPZih0cmFja0VsZW1lbnQpID09PSAtMSkge1xuICAgICAgdGhpcy50cmFja0VsZW1lbnRzXy5wdXNoKHRyYWNrRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgYW4ge0BsaW5rIEh0bWxUcmFja0VsZW1lbnR9IGZyb20gdGhlIGBIdG1sVHJhY2tFbGVtZW50TGlzdGAgZ2l2ZW4gYW5cbiAgICoge0BsaW5rIFRleHRUcmFja30uXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dFRyYWNrfSB0cmFja1xuICAgKiAgICAgICAgVGhlIHRyYWNrIGFzc29jaWF0ZWQgd2l0aCBhIHRyYWNrIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0h0bWxUcmFja0VsZW1lbnR8dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIFRoZSB0cmFjayBlbGVtZW50IHRoYXQgd2FzIGZvdW5kIG9yIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0VHJhY2tFbGVtZW50QnlUcmFja18gPSBmdW5jdGlvbiBnZXRUcmFja0VsZW1lbnRCeVRyYWNrXyh0cmFjaykge1xuICAgIHZhciB0cmFja0VsZW1lbnRfO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRoaXMudHJhY2tFbGVtZW50c18ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmFjayA9PT0gdGhpcy50cmFja0VsZW1lbnRzX1tpXS50cmFjaykge1xuICAgICAgICB0cmFja0VsZW1lbnRfID0gdGhpcy50cmFja0VsZW1lbnRzX1tpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYWNrRWxlbWVudF87XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBIdG1sVHJhY2tFbGVtZW50fSBmcm9tIHRoZSBgSHRtbFRyYWNrRWxlbWVudExpc3RgXG4gICAqXG4gICAqIEBwYXJhbSB7SHRtbFRyYWNrRWxlbWVudH0gdHJhY2tFbGVtZW50XG4gICAqICAgICAgICBUaGUgdHJhY2sgZWxlbWVudCB0byByZW1vdmUgZnJvbSB0aGUgbGlzdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlVHJhY2tFbGVtZW50XyA9IGZ1bmN0aW9uIHJlbW92ZVRyYWNrRWxlbWVudF8odHJhY2tFbGVtZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRoaXMudHJhY2tFbGVtZW50c18ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmFja0VsZW1lbnQgPT09IHRoaXMudHJhY2tFbGVtZW50c19baV0pIHtcbiAgICAgICAgaWYgKHRoaXMudHJhY2tFbGVtZW50c19baV0udHJhY2sgJiYgdHlwZW9mIHRoaXMudHJhY2tFbGVtZW50c19baV0udHJhY2sub2ZmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy50cmFja0VsZW1lbnRzX1tpXS50cmFjay5vZmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50cmFja0VsZW1lbnRzX1tpXS5vZmYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLnRyYWNrRWxlbWVudHNfW2ldLm9mZigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmFja0VsZW1lbnRzXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gSHRtbFRyYWNrRWxlbWVudExpc3Q7XG59KCk7XG5cbi8qKlxuICogQGZpbGUgdGV4dC10cmFjay1jdWUtbGlzdC5qc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVGV4dFRyYWNrQ3VlTGlzdH5UZXh0VHJhY2tDdWVcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWRcbiAqICAgICAgICAgICBUaGUgdW5pcXVlIGlkIGZvciB0aGlzIHRleHQgdHJhY2sgY3VlXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHN0YXJ0VGltZVxuICogICAgICAgICAgIFRoZSBzdGFydCB0aW1lIGZvciB0aGlzIHRleHQgdHJhY2sgY3VlXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGVuZFRpbWVcbiAqICAgICAgICAgICBUaGUgZW5kIHRpbWUgZm9yIHRoaXMgdGV4dCB0cmFjayBjdWVcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHBhdXNlT25FeGl0XG4gKiAgICAgICAgICAgUGF1c2Ugd2hlbiB0aGUgZW5kIHRpbWUgaXMgcmVhY2hlZCBpZiB0cnVlLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2tjdWV9XG4gKi9cblxuLyoqXG4gKiBBIExpc3Qgb2YgVGV4dFRyYWNrQ3Vlcy5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGV4dHRyYWNrY3VlbGlzdH1cbiAqL1xudmFyIFRleHRUcmFja0N1ZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjdWVzXG4gICAqICAgICAgICBBIGxpc3Qgb2YgY3VlcyB0byBiZSBpbml0aWFsaXplZCB3aXRoXG4gICAqL1xuICBmdW5jdGlvbiBUZXh0VHJhY2tDdWVMaXN0KGN1ZXMpIHtcbiAgICBUZXh0VHJhY2tDdWVMaXN0LnByb3RvdHlwZS5zZXRDdWVzXy5jYWxsKHRoaXMsIGN1ZXMpO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBUZXh0VHJhY2tDdWVMaXN0XG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiAgICAgICAgIFRoZSBjdXJyZW50IG51bWJlciBvZiBgVGV4dFRyYWNrQ3VlYHMgaW4gdGhlIFRleHRUcmFja0N1ZUxpc3QuXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGhfO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBIHNldHRlciBmb3IgY3VlcyBpbiB0aGlzIGxpc3QuIENyZWF0ZXMgZ2V0dGVyc1xuICAgKiBhbiBhbiBpbmRleCBmb3IgdGhlIGN1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGN1ZXNcbiAgICogICAgICAgIEFuIGFycmF5IG9mIGN1ZXMgdG8gc2V0XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFRleHRUcmFja0N1ZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRDdWVzXyA9IGZ1bmN0aW9uIHNldEN1ZXNfKGN1ZXMpIHtcbiAgICB2YXIgb2xkTGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGwgPSBjdWVzLmxlbmd0aDtcbiAgICB0aGlzLmN1ZXNfID0gY3VlcztcbiAgICB0aGlzLmxlbmd0aF8gPSBjdWVzLmxlbmd0aDtcblxuICAgIHZhciBkZWZpbmVQcm9wID0gZnVuY3Rpb24gZGVmaW5lUHJvcChpbmRleCkge1xuICAgICAgaWYgKCEoJycgKyBpbmRleCBpbiB0aGlzKSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJycgKyBpbmRleCwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3Vlc19baW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChvbGRMZW5ndGggPCBsKSB7XG4gICAgICBpID0gb2xkTGVuZ3RoO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICBkZWZpbmVQcm9wLmNhbGwodGhpcywgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBgVGV4dFRyYWNrQ3VlYCB0aGF0IGlzIGN1cnJlbnRseSBpbiB0aGUgYFRleHRUcmFja0N1ZUxpc3RgIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogICAgICAgIFRoZSBpZCBvZiB0aGUgY3VlIHRoYXQgc2hvdWxkIGJlIHNlYXJjaGVkIGZvci5cbiAgICpcbiAgICogQHJldHVybiB7VGV4dFRyYWNrQ3VlTGlzdH5UZXh0VHJhY2tDdWV8bnVsbH1cbiAgICogICAgICAgICBBIHNpbmdsZSBjdWUgb3IgbnVsbCBpZiBub25lIHdhcyBmb3VuZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q3VlQnlJZCA9IGZ1bmN0aW9uIGdldEN1ZUJ5SWQoaWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjdWUgPSB0aGlzW2ldO1xuXG4gICAgICBpZiAoY3VlLmlkID09PSBpZCkge1xuICAgICAgICByZXN1bHQgPSBjdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUcmFja0N1ZUxpc3Q7XG59KCk7XG5cbi8qKlxuICogQGZpbGUgdHJhY2sta2luZHMuanNcbiAqL1xuXG4vKipcbiAqIEFsbCBwb3NzaWJsZSBgVmlkZW9UcmFja0tpbmRgc1xuICpcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS12aWRlb3RyYWNrLWtpbmRcbiAqIEB0eXBlZGVmIFZpZGVvVHJhY2t+S2luZFxuICogQGVudW1cbiAqL1xudmFyIFZpZGVvVHJhY2tLaW5kID0ge1xuICBhbHRlcm5hdGl2ZTogJ2FsdGVybmF0aXZlJyxcbiAgY2FwdGlvbnM6ICdjYXB0aW9ucycsXG4gIG1haW46ICdtYWluJyxcbiAgc2lnbjogJ3NpZ24nLFxuICBzdWJ0aXRsZXM6ICdzdWJ0aXRsZXMnLFxuICBjb21tZW50YXJ5OiAnY29tbWVudGFyeSdcbn07XG4vKipcbiAqIEFsbCBwb3NzaWJsZSBgQXVkaW9UcmFja0tpbmRgc1xuICpcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS1hdWRpb3RyYWNrLWtpbmRcbiAqIEB0eXBlZGVmIEF1ZGlvVHJhY2t+S2luZFxuICogQGVudW1cbiAqL1xuXG52YXIgQXVkaW9UcmFja0tpbmQgPSB7XG4gICdhbHRlcm5hdGl2ZSc6ICdhbHRlcm5hdGl2ZScsXG4gICdkZXNjcmlwdGlvbnMnOiAnZGVzY3JpcHRpb25zJyxcbiAgJ21haW4nOiAnbWFpbicsXG4gICdtYWluLWRlc2MnOiAnbWFpbi1kZXNjJyxcbiAgJ3RyYW5zbGF0aW9uJzogJ3RyYW5zbGF0aW9uJyxcbiAgJ2NvbW1lbnRhcnknOiAnY29tbWVudGFyeSdcbn07XG4vKipcbiAqIEFsbCBwb3NzaWJsZSBgVGV4dFRyYWNrS2luZGBzXG4gKlxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjZG9tLXRleHR0cmFjay1raW5kXG4gKiBAdHlwZWRlZiBUZXh0VHJhY2t+S2luZFxuICogQGVudW1cbiAqL1xuXG52YXIgVGV4dFRyYWNrS2luZCA9IHtcbiAgc3VidGl0bGVzOiAnc3VidGl0bGVzJyxcbiAgY2FwdGlvbnM6ICdjYXB0aW9ucycsXG4gIGRlc2NyaXB0aW9uczogJ2Rlc2NyaXB0aW9ucycsXG4gIGNoYXB0ZXJzOiAnY2hhcHRlcnMnLFxuICBtZXRhZGF0YTogJ21ldGFkYXRhJ1xufTtcbi8qKlxuICogQWxsIHBvc3NpYmxlIGBUZXh0VHJhY2tNb2RlYHNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2ttb2RlXG4gKiBAdHlwZWRlZiBUZXh0VHJhY2t+TW9kZVxuICogQGVudW1cbiAqL1xuXG52YXIgVGV4dFRyYWNrTW9kZSA9IHtcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGhpZGRlbjogJ2hpZGRlbicsXG4gIHNob3dpbmc6ICdzaG93aW5nJ1xufTtcblxuLyoqXG4gKiBBIFRyYWNrIGNsYXNzIHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3Ige0BsaW5rIEF1ZGlvVHJhY2t9LFxuICoge0BsaW5rIFZpZGVvVHJhY2t9LCBhbmQge0BsaW5rIFRleHRUcmFja30uXG4gKlxuICogPiBOb3RlOiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseVxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbH1cbiAqIEBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gKiBAYWJzdHJhY3RcbiAqL1xuXG52YXIgVHJhY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FdmVudFRhcmdldCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFjaywgX0V2ZW50VGFyZ2V0KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIE9iamVjdCBvZiBvcHRpb24gbmFtZXMgYW5kIHZhbHVlc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMua2luZD0nJ11cbiAgICogICAgICAgIEEgdmFsaWQga2luZCBmb3IgdGhlIHRyYWNrIHR5cGUgeW91IGFyZSBjcmVhdGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmlkPSd2anNfdHJhY2tfJyArIEd1aWQubmV3R1VJRCgpXVxuICAgKiAgICAgICAgQSB1bmlxdWUgaWQgZm9yIHRoaXMgQXVkaW9UcmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhYmVsPScnXVxuICAgKiAgICAgICAgVGhlIG1lbnUgbGFiZWwgZm9yIHRoaXMgdHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYW5ndWFnZT0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGZ1bmN0aW9uIFRyYWNrKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIHZhciB0cmFja1Byb3BzID0ge1xuICAgICAgaWQ6IG9wdGlvbnMuaWQgfHwgJ3Zqc190cmFja18nICsgbmV3R1VJRCgpLFxuICAgICAga2luZDogb3B0aW9ucy5raW5kIHx8ICcnLFxuICAgICAgbGFiZWw6IG9wdGlvbnMubGFiZWwgfHwgJycsXG4gICAgICBsYW5ndWFnZTogb3B0aW9ucy5sYW5ndWFnZSB8fCAnJ1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFRyYWNrXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBpZFxuICAgICAqICAgICAgICAgVGhlIGlkIG9mIHRoaXMgdHJhY2suIENhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyIGNyZWF0aW9uLlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2tcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGtpbmRcbiAgICAgKiAgICAgICAgIFRoZSBraW5kIG9mIHRyYWNrIHRoYXQgdGhpcyBpcy4gQ2Fubm90IGJlIGNoYW5nZWQgYWZ0ZXIgY3JlYXRpb24uXG4gICAgICogQGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBUcmFja1xuICAgICAqIEBtZW1iZXIge3N0cmluZ30gbGFiZWxcbiAgICAgKiAgICAgICAgIFRoZSBsYWJlbCBvZiB0aGlzIHRyYWNrLiBDYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBjcmVhdGlvbi5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFRyYWNrXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBsYW5ndWFnZVxuICAgICAqICAgICAgICAgVGhlIHR3byBsZXR0ZXIgbGFuZ3VhZ2UgY29kZSBmb3IgdGhpcyB0cmFjay4gQ2Fubm90IGJlIGNoYW5nZWQgYWZ0ZXJcbiAgICAgKiAgICAgICAgIGNyZWF0aW9uLlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwga2V5LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0cmFja1Byb3BzW2tleV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge31cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdHJhY2tQcm9wcykge1xuICAgICAgX2xvb3Aoa2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gVHJhY2s7XG59KEV2ZW50VGFyZ2V0KTtcblxuLyoqXG4gKiBAZmlsZSB1cmwuanNcbiAqIEBtb2R1bGUgdXJsXG4gKi9cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gdXJsOlVSTE9iamVjdFxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcm90b2NvbFxuICogICAgICAgICAgIFRoZSBwcm90b2NvbCBvZiB0aGUgdXJsIHRoYXQgd2FzIHBhcnNlZC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdG5hbWVcbiAqICAgICAgICAgICBUaGUgaG9zdG5hbWUgb2YgdGhlIHVybCB0aGF0IHdhcyBwYXJzZWQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBvcnRcbiAqICAgICAgICAgICBUaGUgcG9ydCBvZiB0aGUgdXJsIHRoYXQgd2FzIHBhcnNlZC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGF0aG5hbWVcbiAqICAgICAgICAgICBUaGUgcGF0aG5hbWUgb2YgdGhlIHVybCB0aGF0IHdhcyBwYXJzZWQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNlYXJjaFxuICogICAgICAgICAgIFRoZSBzZWFyY2ggcXVlcnkgb2YgdGhlIHVybCB0aGF0IHdhcyBwYXJzZWQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhhc2hcbiAqICAgICAgICAgICBUaGUgaGFzaCBvZiB0aGUgdXJsIHRoYXQgd2FzIHBhcnNlZC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdFxuICogICAgICAgICAgIFRoZSBob3N0IG9mIHRoZSB1cmwgdGhhdCB3YXMgcGFyc2VkLlxuICovXG5cbi8qKlxuICogUmVzb2x2ZSBhbmQgcGFyc2UgdGhlIGVsZW1lbnRzIG9mIGEgVVJMLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICAgIHtTdHJpbmd9IHVybFxuICogICAgICAgICAgIFRoZSB1cmwgdG8gcGFyc2VcbiAqXG4gKiBAcmV0dXJuICAge3VybDpVUkxPYmplY3R9XG4gKiAgICAgICAgICAgQW4gb2JqZWN0IG9mIHVybCBkZXRhaWxzXG4gKi9cblxudmFyIHBhcnNlVXJsID0gZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gIHZhciBwcm9wcyA9IFsncHJvdG9jb2wnLCAnaG9zdG5hbWUnLCAncG9ydCcsICdwYXRobmFtZScsICdzZWFyY2gnLCAnaGFzaCcsICdob3N0J107IC8vIGFkZCB0aGUgdXJsIHRvIGFuIGFuY2hvciBhbmQgbGV0IHRoZSBicm93c2VyIHBhcnNlIHRoZSBVUkxcblxuICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgYS5ocmVmID0gdXJsOyAvLyBJRTggKGFuZCA5PykgRml4XG4gIC8vIGllOCBkb2Vzbid0IHBhcnNlIHRoZSBVUkwgY29ycmVjdGx5IHVudGlsIHRoZSBhbmNob3IgaXMgYWN0dWFsbHlcbiAgLy8gYWRkZWQgdG8gdGhlIGJvZHksIGFuZCBhbiBpbm5lckhUTUwgaXMgbmVlZGVkIHRvIHRyaWdnZXIgdGhlIHBhcnNpbmdcblxuICB2YXIgYWRkVG9Cb2R5ID0gYS5ob3N0ID09PSAnJyAmJiBhLnByb3RvY29sICE9PSAnZmlsZTonO1xuICB2YXIgZGl2O1xuXG4gIGlmIChhZGRUb0JvZHkpIHtcbiAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPVxcXCJcIiArIHVybCArIFwiXFxcIj48L2E+XCI7XG4gICAgYSA9IGRpdi5maXJzdENoaWxkOyAvLyBwcmV2ZW50IHRoZSBkaXYgZnJvbSBhZmZlY3RpbmcgbGF5b3V0XG5cbiAgICBkaXYuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5Om5vbmU7IHBvc2l0aW9uOmFic29sdXRlOycpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgfSAvLyBDb3B5IHRoZSBzcGVjaWZpYyBVUkwgcHJvcGVydGllcyB0byBhIG5ldyBvYmplY3RcbiAgLy8gVGhpcyBpcyBhbHNvIG5lZWRlZCBmb3IgSUU4IGJlY2F1c2UgdGhlIGFuY2hvciBsb3NlcyBpdHNcbiAgLy8gcHJvcGVydGllcyB3aGVuIGl0J3MgcmVtb3ZlZCBmcm9tIHRoZSBkb21cblxuXG4gIHZhciBkZXRhaWxzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIGRldGFpbHNbcHJvcHNbaV1dID0gYVtwcm9wc1tpXV07XG4gIH0gLy8gSUU5IGFkZHMgdGhlIHBvcnQgdG8gdGhlIGhvc3QgcHJvcGVydHkgdW5saWtlIGV2ZXJ5b25lIGVsc2UuIElmXG4gIC8vIGEgcG9ydCBpZGVudGlmaWVyIGlzIGFkZGVkIGZvciBzdGFuZGFyZCBwb3J0cywgc3RyaXAgaXQuXG5cblxuICBpZiAoZGV0YWlscy5wcm90b2NvbCA9PT0gJ2h0dHA6Jykge1xuICAgIGRldGFpbHMuaG9zdCA9IGRldGFpbHMuaG9zdC5yZXBsYWNlKC86ODAkLywgJycpO1xuICB9XG5cbiAgaWYgKGRldGFpbHMucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgZGV0YWlscy5ob3N0ID0gZGV0YWlscy5ob3N0LnJlcGxhY2UoLzo0NDMkLywgJycpO1xuICB9XG5cbiAgaWYgKCFkZXRhaWxzLnByb3RvY29sKSB7XG4gICAgZGV0YWlscy5wcm90b2NvbCA9IHdpbmRvdyQxLmxvY2F0aW9uLnByb3RvY29sO1xuICB9XG5cbiAgaWYgKGFkZFRvQm9keSkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgfVxuXG4gIHJldHVybiBkZXRhaWxzO1xufTtcbi8qKlxuICogR2V0IGFic29sdXRlIHZlcnNpb24gb2YgcmVsYXRpdmUgVVJMLiBVc2VkIHRvIHRlbGwgRmxhc2ggdGhlIGNvcnJlY3QgVVJMLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICAgIHtzdHJpbmd9IHVybFxuICogICAgICAgICAgIFVSTCB0byBtYWtlIGFic29sdXRlXG4gKlxuICogQHJldHVybiAgIHtzdHJpbmd9XG4gKiAgICAgICAgICAgQWJzb2x1dGUgVVJMXG4gKlxuICogQHNlZSAgICAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDcwODMyL2dldHRpbmctYW4tYWJzb2x1dGUtdXJsLWZyb20tYS1yZWxhdGl2ZS1vbmUtaWU2LWlzc3VlXG4gKi9cblxudmFyIGdldEFic29sdXRlVVJMID0gZnVuY3Rpb24gZ2V0QWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIENoZWNrIGlmIGFic29sdXRlIFVSTFxuICBpZiAoIXVybC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8vKSkge1xuICAgIC8vIENvbnZlcnQgdG8gYWJzb2x1dGUgVVJMLiBGbGFzaCBob3N0ZWQgb2ZmLXNpdGUgbmVlZHMgYW4gYWJzb2x1dGUgVVJMLlxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPVxcXCJcIiArIHVybCArIFwiXFxcIj54PC9hPlwiO1xuICAgIHVybCA9IGRpdi5maXJzdENoaWxkLmhyZWY7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBwYXNzZWQgZmlsZSBuYW1lLiBJdCB3aWxsIHJldHVybiBhbiBlbXB0eSBzdHJpbmdcbiAqIGlmIHBhc3NlZCBhbiBpbnZhbGlkIHBhdGguXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gICAge3N0cmluZ30gcGF0aFxuICogICAgICAgICAgIFRoZSBmaWxlTmFtZSBwYXRoIGxpa2UgJy9wYXRoL3RvL2ZpbGUubXA0J1xuICpcbiAqIEByZXR1cm4gIHtzdHJpbmd9XG4gKiAgICAgICAgICAgVGhlIGV4dGVuc2lvbiBpbiBsb3dlciBjYXNlIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBub1xuICogICAgICAgICAgIGV4dGVuc2lvbiBjb3VsZCBiZSBmb3VuZC5cbiAqL1xuXG52YXIgZ2V0RmlsZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIGdldEZpbGVFeHRlbnNpb24ocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNwbGl0UGF0aFJlID0gL14oXFwvPykoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz8pKFxcLihbXlxcLlxcL1xcP10rKSkpKD86W1xcL10qfFtcXD9dLiopJC87XG4gICAgdmFyIHBhdGhQYXJ0cyA9IHNwbGl0UGF0aFJlLmV4ZWMocGF0aCk7XG5cbiAgICBpZiAocGF0aFBhcnRzKSB7XG4gICAgICByZXR1cm4gcGF0aFBhcnRzLnBvcCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSB1cmwgcGFzc2VkIGlzIGEgY3Jvc3MgZG9tYWluIHJlcXVlc3Qgb3Igbm90LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICAgIHtzdHJpbmd9IHVybFxuICogICAgICAgICAgIFRoZSB1cmwgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiAgIHtib29sZWFufVxuICogICAgICAgICAgIFdoZXRoZXIgaXQgaXMgYSBjcm9zcyBkb21haW4gcmVxdWVzdCBvciBub3QuXG4gKi9cblxudmFyIGlzQ3Jvc3NPcmlnaW4gPSBmdW5jdGlvbiBpc0Nyb3NzT3JpZ2luKHVybCkge1xuICB2YXIgd2luTG9jID0gd2luZG93JDEubG9jYXRpb247XG4gIHZhciB1cmxJbmZvID0gcGFyc2VVcmwodXJsKTsgLy8gSUU4IHByb3RvY29sIHJlbGF0aXZlIHVybHMgd2lsbCByZXR1cm4gJzonIGZvciBwcm90b2NvbFxuXG4gIHZhciBzcmNQcm90b2NvbCA9IHVybEluZm8ucHJvdG9jb2wgPT09ICc6JyA/IHdpbkxvYy5wcm90b2NvbCA6IHVybEluZm8ucHJvdG9jb2w7IC8vIENoZWNrIGlmIHVybCBpcyBmb3IgYW5vdGhlciBkb21haW4vb3JpZ2luXG4gIC8vIElFOCBkb2Vzbid0IGtub3cgbG9jYXRpb24ub3JpZ2luLCBzbyB3ZSB3b24ndCByZWx5IG9uIGl0IGhlcmVcblxuICB2YXIgY3Jvc3NPcmlnaW4gPSBzcmNQcm90b2NvbCArIHVybEluZm8uaG9zdCAhPT0gd2luTG9jLnByb3RvY29sICsgd2luTG9jLmhvc3Q7XG4gIHJldHVybiBjcm9zc09yaWdpbjtcbn07XG5cbnZhciBVcmwgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIHBhcnNlVXJsOiBwYXJzZVVybCxcbiAgZ2V0QWJzb2x1dGVVUkw6IGdldEFic29sdXRlVVJMLFxuICBnZXRGaWxlRXh0ZW5zaW9uOiBnZXRGaWxlRXh0ZW5zaW9uLFxuICBpc0Nyb3NzT3JpZ2luOiBpc0Nyb3NzT3JpZ2luXG59KTtcblxuLyoqXG4gKiBUYWtlcyBhIHdlYnZ0dCBmaWxlIGNvbnRlbnRzIGFuZCBwYXJzZXMgaXQgaW50byBjdWVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNyY0NvbnRlbnRcbiAqICAgICAgICB3ZWJWVFQgZmlsZSBjb250ZW50c1xuICpcbiAqIEBwYXJhbSB7VGV4dFRyYWNrfSB0cmFja1xuICogICAgICAgIFRleHRUcmFjayB0byBhZGQgY3VlcyB0by4gQ3VlcyBjb21lIGZyb20gdGhlIHNyY0NvbnRlbnQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgcGFyc2VDdWVzID0gZnVuY3Rpb24gcGFyc2VDdWVzKHNyY0NvbnRlbnQsIHRyYWNrKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgd2luZG93JDEuV2ViVlRULlBhcnNlcih3aW5kb3ckMSwgd2luZG93JDEudnR0anMsIHdpbmRvdyQxLldlYlZUVC5TdHJpbmdEZWNvZGVyKCkpO1xuICB2YXIgZXJyb3JzID0gW107XG5cbiAgcGFyc2VyLm9uY3VlID0gZnVuY3Rpb24gKGN1ZSkge1xuICAgIHRyYWNrLmFkZEN1ZShjdWUpO1xuICB9O1xuXG4gIHBhcnNlci5vbnBhcnNpbmdlcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgfTtcblxuICBwYXJzZXIub25mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0cmFjay50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICdsb2FkZWRkYXRhJyxcbiAgICAgIHRhcmdldDogdHJhY2tcbiAgICB9KTtcbiAgfTtcblxuICBwYXJzZXIucGFyc2Uoc3JjQ29udGVudCk7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHdpbmRvdyQxLmNvbnNvbGUgJiYgd2luZG93JDEuY29uc29sZS5ncm91cENvbGxhcHNlZCkge1xuICAgICAgd2luZG93JDEuY29uc29sZS5ncm91cENvbGxhcHNlZChcIlRleHQgVHJhY2sgcGFyc2luZyBlcnJvcnMgZm9yIFwiICsgdHJhY2suc3JjKTtcbiAgICB9XG5cbiAgICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgaWYgKHdpbmRvdyQxLmNvbnNvbGUgJiYgd2luZG93JDEuY29uc29sZS5ncm91cEVuZCkge1xuICAgICAgd2luZG93JDEuY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlci5mbHVzaCgpO1xufTtcbi8qKlxuICogTG9hZCBhIGBUZXh0VHJhY2tgIGZyb20gYSBzcGVjaWZpZWQgdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAqICAgICAgICBVcmwgdG8gbG9hZCB0cmFjayBmcm9tLlxuICpcbiAqIEBwYXJhbSB7VGV4dFRyYWNrfSB0cmFja1xuICogICAgICAgIFRyYWNrIHRvIGFkZCBjdWVzIHRvLiBDb21lcyBmcm9tIHRoZSBjb250ZW50IGF0IHRoZSBlbmQgb2YgYHVybGAuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBsb2FkVHJhY2sgPSBmdW5jdGlvbiBsb2FkVHJhY2soc3JjLCB0cmFjaykge1xuICB2YXIgb3B0cyA9IHtcbiAgICB1cmk6IHNyY1xuICB9O1xuICB2YXIgY3Jvc3NPcmlnaW4gPSBpc0Nyb3NzT3JpZ2luKHNyYyk7XG5cbiAgaWYgKGNyb3NzT3JpZ2luKSB7XG4gICAgb3B0cy5jb3JzID0gY3Jvc3NPcmlnaW47XG4gIH1cblxuICBYSFIob3B0cywgYmluZCh0aGlzLCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSwgcmVzcG9uc2VCb2R5KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGxvZy5lcnJvcihlcnIsIHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICB0cmFjay5sb2FkZWRfID0gdHJ1ZTsgLy8gTWFrZSBzdXJlIHRoYXQgdnR0anMgaGFzIGxvYWRlZCwgb3RoZXJ3aXNlLCB3YWl0IHRpbGwgaXQgZmluaXNoZWQgbG9hZGluZ1xuICAgIC8vIE5PVEU6IHRoaXMgaXMgb25seSB1c2VkIGZvciB0aGUgYWx0L3ZpZGVvLm5vdnR0LmpzIGJ1aWxkXG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyQxLldlYlZUVCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHRyYWNrLnRlY2hfKSB7XG4gICAgICAgIC8vIHRvIHByZXZlbnQgdXNlIGJlZm9yZSBkZWZpbmUgZXNsaW50IGVycm9yLCB3ZSBkZWZpbmUgbG9hZEhhbmRsZXJcbiAgICAgICAgLy8gYXMgYSBsZXQgaGVyZVxuICAgICAgICB0cmFjay50ZWNoXy5hbnkoWyd2dHRqc2xvYWRlZCcsICd2dHRqc2Vycm9yJ10sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAndnR0anNlcnJvcicpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihcInZ0dGpzIGZhaWxlZCB0byBsb2FkLCBzdG9wcGluZyB0cnlpbmcgdG8gcHJvY2VzcyBcIiArIHRyYWNrLnNyYyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBhcnNlQ3VlcyhyZXNwb25zZUJvZHksIHRyYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlQ3VlcyhyZXNwb25zZUJvZHksIHRyYWNrKTtcbiAgICB9XG4gIH0pKTtcbn07XG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgYFRleHRUcmFja2AuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3RleHR0cmFja31cbiAqIEBleHRlbmRzIFRyYWNrXG4gKi9cblxuXG52YXIgVGV4dFRyYWNrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVHJhY2spIHtcbiAgX2luaGVyaXRzTG9vc2UoVGV4dFRyYWNrLCBfVHJhY2spO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnM9e31cbiAgICogICAgICAgIE9iamVjdCBvZiBvcHRpb24gbmFtZXMgYW5kIHZhbHVlc1xuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h9IG9wdGlvbnMudGVjaFxuICAgKiAgICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRlY2ggdGhhdCBvd25zIHRoaXMgVGV4dFRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja35LaW5kfSBbb3B0aW9ucy5raW5kPSdzdWJ0aXRsZXMnXVxuICAgKiAgICAgICAgQSB2YWxpZCB0ZXh0IHRyYWNrIGtpbmQuXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dFRyYWNrfk1vZGV9IFtvcHRpb25zLm1vZGU9J2Rpc2FibGVkJ11cbiAgICogICAgICAgIEEgdmFsaWQgdGV4dCB0cmFjayBtb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWQ9J3Zqc190cmFja18nICsgR3VpZC5uZXdHVUlEKCldXG4gICAqICAgICAgICBBIHVuaXF1ZSBpZCBmb3IgdGhpcyBUZXh0VHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nJ11cbiAgICogICAgICAgIFRoZSBtZW51IGxhYmVsIGZvciB0aGlzIHRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2U9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNyY2xhbmc9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS4gQW4gYWx0ZXJuYXRpdmUsIGJ1dCBkZXByaW9yaXRpemVkXG4gICAqICAgICAgICB2ZXJzaW9uIG9mIGBvcHRpb25zLmxhbmd1YWdlYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3JjXVxuICAgKiAgICAgICAgQSB1cmwgdG8gVGV4dFRyYWNrIGN1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGVmYXVsdF1cbiAgICogICAgICAgIElmIHRoaXMgdHJhY2sgc2hvdWxkIGRlZmF1bHQgdG8gb24gb3Igb2ZmLlxuICAgKi9cbiAgZnVuY3Rpb24gVGV4dFRyYWNrKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnRlY2gpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQSB0ZWNoIHdhcyBub3QgcHJvdmlkZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHNldHRpbmdzID0gbWVyZ2VPcHRpb25zKG9wdGlvbnMsIHtcbiAgICAgIGtpbmQ6IFRleHRUcmFja0tpbmRbb3B0aW9ucy5raW5kXSB8fCAnc3VidGl0bGVzJyxcbiAgICAgIGxhbmd1YWdlOiBvcHRpb25zLmxhbmd1YWdlIHx8IG9wdGlvbnMuc3JjbGFuZyB8fCAnJ1xuICAgIH0pO1xuICAgIHZhciBtb2RlID0gVGV4dFRyYWNrTW9kZVtzZXR0aW5ncy5tb2RlXSB8fCAnZGlzYWJsZWQnO1xuICAgIHZhciBkZWZhdWx0XyA9IHNldHRpbmdzW1wiZGVmYXVsdFwiXTtcblxuICAgIGlmIChzZXR0aW5ncy5raW5kID09PSAnbWV0YWRhdGEnIHx8IHNldHRpbmdzLmtpbmQgPT09ICdjaGFwdGVycycpIHtcbiAgICAgIG1vZGUgPSAnaGlkZGVuJztcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9UcmFjay5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgIF90aGlzLnRlY2hfID0gc2V0dGluZ3MudGVjaDtcbiAgICBfdGhpcy5jdWVzXyA9IFtdO1xuICAgIF90aGlzLmFjdGl2ZUN1ZXNfID0gW107XG4gICAgdmFyIGN1ZXMgPSBuZXcgVGV4dFRyYWNrQ3VlTGlzdChfdGhpcy5jdWVzXyk7XG4gICAgdmFyIGFjdGl2ZUN1ZXMgPSBuZXcgVGV4dFRyYWNrQ3VlTGlzdChfdGhpcy5hY3RpdmVDdWVzXyk7XG4gICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgdGltZXVwZGF0ZUhhbmRsZXIgPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBBY2Nlc3NpbmcgdGhpcy5hY3RpdmVDdWVzIGZvciB0aGUgc2lkZS1lZmZlY3RzIG9mIHVwZGF0aW5nIGl0c2VsZlxuICAgICAgLy8gZHVlIHRvIGl0cyBuYXR1cmUgYXMgYSBnZXR0ZXIgZnVuY3Rpb24uIERvIG5vdCByZW1vdmUgb3IgY3VlcyB3aWxsXG4gICAgICAvLyBzdG9wIHVwZGF0aW5nIVxuICAgICAgLy8gVXNlIHRoZSBzZXR0ZXIgdG8gcHJldmVudCBkZWxldGlvbiBmcm9tIHVnbGlmeSAocHVyZV9nZXR0ZXJzIHJ1bGUpXG4gICAgICB0aGlzLmFjdGl2ZUN1ZXMgPSB0aGlzLmFjdGl2ZUN1ZXM7XG5cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignY3VlY2hhbmdlJyk7XG4gICAgICAgIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChtb2RlICE9PSAnZGlzYWJsZWQnKSB7XG4gICAgICBfdGhpcy50ZWNoXy5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnRlY2hfLm9uKCd0aW1ldXBkYXRlJywgdGltZXVwZGF0ZUhhbmRsZXIpO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHtcbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIFRleHRUcmFja1xuICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gZGVmYXVsdFxuICAgICAgICogICAgICAgICBJZiB0aGlzIHRyYWNrIHdhcyBzZXQgdG8gYmUgb24gb3Igb2ZmIGJ5IGRlZmF1bHQuIENhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyXG4gICAgICAgKiAgICAgICAgIGNyZWF0aW9uLlxuICAgICAgICogQGluc3RhbmNlXG4gICAgICAgKlxuICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgKi9cbiAgICAgIFwiZGVmYXVsdFwiOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0XztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7fVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrXG4gICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IG1vZGVcbiAgICAgICAqICAgICAgICAgU2V0IHRoZSBtb2RlIG9mIHRoaXMgVGV4dFRyYWNrIHRvIGEgdmFsaWQge0BsaW5rIFRleHRUcmFja35Nb2RlfS4gV2lsbFxuICAgICAgICogICAgICAgICBub3QgYmUgc2V0IGlmIHNldHRpbmcgdG8gYW4gaW52YWxpZCBtb2RlLlxuICAgICAgICogQGluc3RhbmNlXG4gICAgICAgKlxuICAgICAgICogQGZpcmVzIFRleHRUcmFjayNtb2RlY2hhbmdlXG4gICAgICAgKi9cbiAgICAgIG1vZGU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld01vZGUpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgIGlmICghVGV4dFRyYWNrTW9kZVtuZXdNb2RlXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGUgPSBuZXdNb2RlO1xuXG4gICAgICAgICAgaWYgKG1vZGUgIT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgIHRoaXMudGVjaF8ucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczIudGVjaF8ub24oJ3RpbWV1cGRhdGUnLCB0aW1ldXBkYXRlSGFuZGxlcik7XG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50ZWNoXy5vZmYoJ3RpbWV1cGRhdGUnLCB0aW1ldXBkYXRlSGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEFuIGV2ZW50IHRoYXQgZmlyZXMgd2hlbiBtb2RlIGNoYW5nZXMgb24gdGhpcyB0cmFjay4gVGhpcyBhbGxvd3NcbiAgICAgICAgICAgKiB0aGUgVGV4dFRyYWNrTGlzdCB0aGF0IGhvbGRzIHRoaXMgdHJhY2sgdG8gYWN0IGFjY29yZGluZ2x5LlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogPiBOb3RlOiBUaGlzIGlzIG5vdCBwYXJ0IG9mIHRoZSBzcGVjIVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGV2ZW50IFRleHRUcmFjayNtb2RlY2hhbmdlXG4gICAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgICAqL1xuXG5cbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ21vZGVjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrXG4gICAgICAgKiBAbWVtYmVyIHtUZXh0VHJhY2tDdWVMaXN0fSBjdWVzXG4gICAgICAgKiAgICAgICAgIFRoZSB0ZXh0IHRyYWNrIGN1ZSBsaXN0IGZvciB0aGlzIFRleHRUcmFjay5cbiAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBjdWVzOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5sb2FkZWRfKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY3VlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7fVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrXG4gICAgICAgKiBAbWVtYmVyIHtUZXh0VHJhY2tDdWVMaXN0fSBhY3RpdmVDdWVzXG4gICAgICAgKiAgICAgICAgIFRoZSBsaXN0IHRleHQgdHJhY2sgY3VlcyB0aGF0IGFyZSBjdXJyZW50bHkgYWN0aXZlIGZvciB0aGlzIFRleHRUcmFjay5cbiAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBhY3RpdmVDdWVzOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5sb2FkZWRfKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IC8vIG5vdGhpbmcgdG8gZG9cblxuXG4gICAgICAgICAgaWYgKHRoaXMuY3Vlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVDdWVzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjdCA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcbiAgICAgICAgICB2YXIgYWN0aXZlID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuY3Vlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjdWUgPSB0aGlzLmN1ZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChjdWUuc3RhcnRUaW1lIDw9IGN0ICYmIGN1ZS5lbmRUaW1lID49IGN0KSB7XG4gICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKGN1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ZS5zdGFydFRpbWUgPT09IGN1ZS5lbmRUaW1lICYmIGN1ZS5zdGFydFRpbWUgPD0gY3QgJiYgY3VlLnN0YXJ0VGltZSArIDAuNSA+PSBjdCkge1xuICAgICAgICAgICAgICBhY3RpdmUucHVzaChjdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChhY3RpdmUubGVuZ3RoICE9PSB0aGlzLmFjdGl2ZUN1ZXNfLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhY3RpdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUN1ZXNfLmluZGV4T2YoYWN0aXZlW19pXSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmFjdGl2ZUN1ZXNfID0gYWN0aXZlO1xuICAgICAgICAgIGFjdGl2ZUN1ZXMuc2V0Q3Vlc18odGhpcy5hY3RpdmVDdWVzXyk7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2ZUN1ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIC8hXFwgS2VlcCB0aGlzIHNldHRlciBlbXB0eSAoc2VlIHRoZSB0aW1ldXBkYXRlIGhhbmRsZXIgYWJvdmUpXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge31cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChzZXR0aW5ncy5zcmMpIHtcbiAgICAgIF90aGlzLnNyYyA9IHNldHRpbmdzLnNyYztcbiAgICAgIGxvYWRUcmFjayhzZXR0aW5ncy5zcmMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMubG9hZGVkXyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBjdWUgdG8gdGhlIGludGVybmFsIGxpc3Qgb2YgY3Vlcy5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t+Q3VlfSBjdWVcbiAgICogICAgICAgIFRoZSBjdWUgdG8gYWRkIHRvIG91ciBpbnRlcm5hbCBsaXN0XG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFRleHRUcmFjay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZEN1ZSA9IGZ1bmN0aW9uIGFkZEN1ZShvcmlnaW5hbEN1ZSkge1xuICAgIHZhciBjdWUgPSBvcmlnaW5hbEN1ZTtcblxuICAgIGlmICh3aW5kb3ckMS52dHRqcyAmJiAhKG9yaWdpbmFsQ3VlIGluc3RhbmNlb2Ygd2luZG93JDEudnR0anMuVlRUQ3VlKSkge1xuICAgICAgY3VlID0gbmV3IHdpbmRvdyQxLnZ0dGpzLlZUVEN1ZShvcmlnaW5hbEN1ZS5zdGFydFRpbWUsIG9yaWdpbmFsQ3VlLmVuZFRpbWUsIG9yaWdpbmFsQ3VlLnRleHQpO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIG9yaWdpbmFsQ3VlKSB7XG4gICAgICAgIGlmICghKHByb3AgaW4gY3VlKSkge1xuICAgICAgICAgIGN1ZVtwcm9wXSA9IG9yaWdpbmFsQ3VlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9IC8vIG1ha2Ugc3VyZSB0aGF0IGBpZGAgaXMgY29waWVkIG92ZXJcblxuXG4gICAgICBjdWUuaWQgPSBvcmlnaW5hbEN1ZS5pZDtcbiAgICAgIGN1ZS5vcmlnaW5hbEN1ZV8gPSBvcmlnaW5hbEN1ZTtcbiAgICB9XG5cbiAgICB2YXIgdHJhY2tzID0gdGhpcy50ZWNoXy50ZXh0VHJhY2tzKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyYWNrc1tpXSAhPT0gdGhpcykge1xuICAgICAgICB0cmFja3NbaV0ucmVtb3ZlQ3VlKGN1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdWVzXy5wdXNoKGN1ZSk7XG4gICAgdGhpcy5jdWVzLnNldEN1ZXNfKHRoaXMuY3Vlc18pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBjdWUgZnJvbSBvdXIgaW50ZXJuYWwgbGlzdFxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja35DdWV9IHJlbW92ZUN1ZVxuICAgKiAgICAgICAgVGhlIGN1ZSB0byByZW1vdmUgZnJvbSBvdXIgaW50ZXJuYWwgbGlzdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVDdWUgPSBmdW5jdGlvbiByZW1vdmVDdWUoX3JlbW92ZUN1ZSkge1xuICAgIHZhciBpID0gdGhpcy5jdWVzXy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgY3VlID0gdGhpcy5jdWVzX1tpXTtcblxuICAgICAgaWYgKGN1ZSA9PT0gX3JlbW92ZUN1ZSB8fCBjdWUub3JpZ2luYWxDdWVfICYmIGN1ZS5vcmlnaW5hbEN1ZV8gPT09IF9yZW1vdmVDdWUpIHtcbiAgICAgICAgdGhpcy5jdWVzXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHRoaXMuY3Vlcy5zZXRDdWVzXyh0aGlzLmN1ZXNfKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2s7XG59KFRyYWNrKTtcbi8qKlxuICogY3VlY2hhbmdlIC0gT25lIG9yIG1vcmUgY3VlcyBpbiB0aGUgdHJhY2sgaGF2ZSBiZWNvbWUgYWN0aXZlIG9yIHN0b3BwZWQgYmVpbmcgYWN0aXZlLlxuICovXG5cblxuVGV4dFRyYWNrLnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXyA9IHtcbiAgY3VlY2hhbmdlOiAnY3VlY2hhbmdlJ1xufTtcblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGBBdWRpb1RyYWNrYC4gSWYgaXQgaXMgcGFydCBvZiBhbiB7QGxpbmsgQXVkaW9UcmFja0xpc3R9XG4gKiBvbmx5IG9uZSBgQXVkaW9UcmFja2AgaW4gdGhlIGxpc3Qgd2lsbCBiZSBlbmFibGVkIGF0IGEgdGltZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjYXVkaW90cmFja31cbiAqIEBleHRlbmRzIFRyYWNrXG4gKi9cblxudmFyIEF1ZGlvVHJhY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UcmFjaykge1xuICBfaW5oZXJpdHNMb29zZShBdWRpb1RyYWNrLCBfVHJhY2spO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgT2JqZWN0IG9mIG9wdGlvbiBuYW1lcyBhbmQgdmFsdWVzXG4gICAqXG4gICAqIEBwYXJhbSB7QXVkaW9UcmFja35LaW5kfSBbb3B0aW9ucy5raW5kPScnXVxuICAgKiAgICAgICAgQSB2YWxpZCBhdWRpbyB0cmFjayBraW5kXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIEF1ZGlvVHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nJ11cbiAgICogICAgICAgIFRoZSBtZW51IGxhYmVsIGZvciB0aGlzIHRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2U9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5lbmFibGVkXVxuICAgKiAgICAgICAgSWYgdGhpcyB0cmFjayBpcyB0aGUgb25lIHRoYXQgaXMgY3VycmVudGx5IHBsYXlpbmcuIElmIHRoaXMgdHJhY2sgaXMgcGFydCBvZlxuICAgKiAgICAgICAgYW4ge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fSwgb25seSBvbmUge0BsaW5rIEF1ZGlvVHJhY2t9IHdpbGwgYmUgZW5hYmxlZC5cbiAgICovXG4gIGZ1bmN0aW9uIEF1ZGlvVHJhY2sob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2V0dGluZ3MgPSBtZXJnZU9wdGlvbnMob3B0aW9ucywge1xuICAgICAga2luZDogQXVkaW9UcmFja0tpbmRbb3B0aW9ucy5raW5kXSB8fCAnJ1xuICAgIH0pO1xuICAgIF90aGlzID0gX1RyYWNrLmNhbGwodGhpcywgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgdmFyIGVuYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9UcmFja1xuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IGVuYWJsZWRcbiAgICAgKiAgICAgICAgIElmIHRoaXMgYEF1ZGlvVHJhY2tgIGlzIGVuYWJsZWQgb3Igbm90LiBXaGVuIHNldHRpbmcgdGhpcyB3aWxsXG4gICAgICogICAgICAgICBmaXJlIHtAbGluayBBdWRpb1RyYWNrI2VuYWJsZWRjaGFuZ2V9IGlmIHRoZSBzdGF0ZSBvZiBlbmFibGVkIGlzIGNoYW5nZWQuXG4gICAgICogQGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAZmlyZXMgVmlkZW9UcmFjayNzZWxlY3RlZGNoYW5nZVxuICAgICAqL1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnZW5hYmxlZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdFbmFibGVkKSB7XG4gICAgICAgIC8vIGFuIGludmFsaWQgb3IgdW5jaGFuZ2VkIHZhbHVlXG4gICAgICAgIGlmICh0eXBlb2YgbmV3RW5hYmxlZCAhPT0gJ2Jvb2xlYW4nIHx8IG5ld0VuYWJsZWQgPT09IGVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbmFibGVkID0gbmV3RW5hYmxlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IHRoYXQgZmlyZXMgd2hlbiBlbmFibGVkIGNoYW5nZXMgb24gdGhpcyB0cmFjay4gVGhpcyBhbGxvd3NcbiAgICAgICAgICogdGhlIEF1ZGlvVHJhY2tMaXN0IHRoYXQgaG9sZHMgdGhpcyB0cmFjayB0byBhY3QgYWNjb3JkaW5nbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqID4gTm90ZTogVGhpcyBpcyBub3QgcGFydCBvZiB0aGUgc3BlYyEgTmF0aXZlIHRyYWNrcyB3aWxsIGRvXG4gICAgICAgICAqICAgICAgICAgdGhpcyBpbnRlcm5hbGx5IHdpdGhvdXQgYW4gZXZlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBBdWRpb1RyYWNrI2VuYWJsZWRjaGFuZ2VcbiAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgKi9cblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuYWJsZWRjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gaWYgdGhlIHVzZXIgc2V0cyB0aGlzIHRyYWNrIHRvIHNlbGVjdGVkIHRoZW5cbiAgICAvLyBzZXQgc2VsZWN0ZWQgdG8gdGhhdCB0cnVlIHZhbHVlIG90aGVyd2lzZVxuICAgIC8vIHdlIGtlZXAgaXQgZmFsc2VcblxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVkKSB7XG4gICAgICBfdGhpcy5lbmFibGVkID0gc2V0dGluZ3MuZW5hYmxlZDtcbiAgICB9XG5cbiAgICBfdGhpcy5sb2FkZWRfID0gdHJ1ZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gQXVkaW9UcmFjaztcbn0oVHJhY2spO1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgYFZpZGVvVHJhY2tgLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN2aWRlb3RyYWNrfVxuICogQGV4dGVuZHMgVHJhY2tcbiAqL1xuXG52YXIgVmlkZW9UcmFjayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RyYWNrKSB7XG4gIF9pbmhlcml0c0xvb3NlKFZpZGVvVHJhY2ssIF9UcmFjayk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBPYmplY3Qgb2Ygb3B0aW9uIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmtpbmQ9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHtAbGluayBWaWRlb1RyYWNrfktpbmR9XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIEF1ZGlvVHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nJ11cbiAgICogICAgICAgIFRoZSBtZW51IGxhYmVsIGZvciB0aGlzIHRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2U9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zZWxlY3RlZF1cbiAgICogICAgICAgIElmIHRoaXMgdHJhY2sgaXMgdGhlIG9uZSB0aGF0IGlzIGN1cnJlbnRseSBwbGF5aW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gVmlkZW9UcmFjayhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBzZXR0aW5ncyA9IG1lcmdlT3B0aW9ucyhvcHRpb25zLCB7XG4gICAgICBraW5kOiBWaWRlb1RyYWNrS2luZFtvcHRpb25zLmtpbmRdIHx8ICcnXG4gICAgfSk7XG4gICAgX3RoaXMgPSBfVHJhY2suY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICB2YXIgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgVmlkZW9UcmFja1xuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IHNlbGVjdGVkXG4gICAgICogICAgICAgICBJZiB0aGlzIGBWaWRlb1RyYWNrYCBpcyBzZWxlY3RlZCBvciBub3QuIFdoZW4gc2V0dGluZyB0aGlzIHdpbGxcbiAgICAgKiAgICAgICAgIGZpcmUge0BsaW5rIFZpZGVvVHJhY2sjc2VsZWN0ZWRjaGFuZ2V9IGlmIHRoZSBzdGF0ZSBvZiBzZWxlY3RlZCBjaGFuZ2VkLlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQGZpcmVzIFZpZGVvVHJhY2sjc2VsZWN0ZWRjaGFuZ2VcbiAgICAgKi9cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3NlbGVjdGVkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdTZWxlY3RlZCkge1xuICAgICAgICAvLyBhbiBpbnZhbGlkIG9yIHVuY2hhbmdlZCB2YWx1ZVxuICAgICAgICBpZiAodHlwZW9mIG5ld1NlbGVjdGVkICE9PSAnYm9vbGVhbicgfHwgbmV3U2VsZWN0ZWQgPT09IHNlbGVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWQgPSBuZXdTZWxlY3RlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IHRoYXQgZmlyZXMgd2hlbiBzZWxlY3RlZCBjaGFuZ2VzIG9uIHRoaXMgdHJhY2suIFRoaXMgYWxsb3dzXG4gICAgICAgICAqIHRoZSBWaWRlb1RyYWNrTGlzdCB0aGF0IGhvbGRzIHRoaXMgdHJhY2sgdG8gYWN0IGFjY29yZGluZ2x5LlxuICAgICAgICAgKlxuICAgICAgICAgKiA+IE5vdGU6IFRoaXMgaXMgbm90IHBhcnQgb2YgdGhlIHNwZWMhIE5hdGl2ZSB0cmFja3Mgd2lsbCBkb1xuICAgICAgICAgKiAgICAgICAgIHRoaXMgaW50ZXJuYWxseSB3aXRob3V0IGFuIGV2ZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgVmlkZW9UcmFjayNzZWxlY3RlZGNoYW5nZVxuICAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICAqL1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcignc2VsZWN0ZWRjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gaWYgdGhlIHVzZXIgc2V0cyB0aGlzIHRyYWNrIHRvIHNlbGVjdGVkIHRoZW5cbiAgICAvLyBzZXQgc2VsZWN0ZWQgdG8gdGhhdCB0cnVlIHZhbHVlIG90aGVyd2lzZVxuICAgIC8vIHdlIGtlZXAgaXQgZmFsc2VcblxuICAgIGlmIChzZXR0aW5ncy5zZWxlY3RlZCkge1xuICAgICAgX3RoaXMuc2VsZWN0ZWQgPSBzZXR0aW5ncy5zZWxlY3RlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gVmlkZW9UcmFjaztcbn0oVHJhY2spO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBIVE1MVHJhY2tFbGVtZW50XG4gKiBAdHlwZWRlZiB7SFRNTFRyYWNrRWxlbWVudH5SZWFkeVN0YXRlfVxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG52YXIgTk9ORSA9IDA7XG52YXIgTE9BRElORyA9IDE7XG52YXIgTE9BREVEID0gMjtcbnZhciBFUlJPUiA9IDM7XG4vKipcbiAqIEEgc2luZ2xlIHRyYWNrIHJlcHJlc2VudGVkIGluIHRoZSBET00uXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2h0bWx0cmFja2VsZW1lbnR9XG4gKiBAZXh0ZW5kcyBFdmVudFRhcmdldFxuICovXG5cbnZhciBIVE1MVHJhY2tFbGVtZW50ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSFRNTFRyYWNrRWxlbWVudCwgX0V2ZW50VGFyZ2V0KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zPXt9XG4gICAqICAgICAgICBPYmplY3Qgb2Ygb3B0aW9uIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICpcbiAgICogQHBhcmFtIHtUZWNofSBvcHRpb25zLnRlY2hcbiAgICogICAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0ZWNoIHRoYXQgb3ducyB0aGlzIEhUTUxUcmFja0VsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dFRyYWNrfktpbmR9IFtvcHRpb25zLmtpbmQ9J3N1YnRpdGxlcyddXG4gICAqICAgICAgICBBIHZhbGlkIHRleHQgdHJhY2sga2luZC5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t+TW9kZX0gW29wdGlvbnMubW9kZT0nZGlzYWJsZWQnXVxuICAgKiAgICAgICAgQSB2YWxpZCB0ZXh0IHRyYWNrIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIFRleHRUcmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhYmVsPScnXVxuICAgKiAgICAgICAgVGhlIG1lbnUgbGFiZWwgZm9yIHRoaXMgdHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYW5ndWFnZT0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3JjbGFuZz0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLiBBbiBhbHRlcm5hdGl2ZSwgYnV0IGRlcHJpb3JpdGl6ZWRcbiAgICogICAgICAgIHZlc2lvbiBvZiBgb3B0aW9ucy5sYW5ndWFnZWBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNyY11cbiAgICogICAgICAgIEEgdXJsIHRvIFRleHRUcmFjayBjdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlZmF1bHRdXG4gICAqICAgICAgICBJZiB0aGlzIHRyYWNrIHNob3VsZCBkZWZhdWx0IHRvIG9uIG9yIG9mZi5cbiAgICovXG4gIGZ1bmN0aW9uIEhUTUxUcmFja0VsZW1lbnQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9FdmVudFRhcmdldC5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgdmFyIHJlYWR5U3RhdGU7XG4gICAgdmFyIHRyYWNrID0gbmV3IFRleHRUcmFjayhvcHRpb25zKTtcbiAgICBfdGhpcy5raW5kID0gdHJhY2sua2luZDtcbiAgICBfdGhpcy5zcmMgPSB0cmFjay5zcmM7XG4gICAgX3RoaXMuc3JjbGFuZyA9IHRyYWNrLmxhbmd1YWdlO1xuICAgIF90aGlzLmxhYmVsID0gdHJhY2subGFiZWw7XG4gICAgX3RoaXNbXCJkZWZhdWx0XCJdID0gdHJhY2tbXCJkZWZhdWx0XCJdO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB7XG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBIVE1MVHJhY2tFbGVtZW50XG4gICAgICAgKiBAbWVtYmVyIHtIVE1MVHJhY2tFbGVtZW50flJlYWR5U3RhdGV9IHJlYWR5U3RhdGVcbiAgICAgICAqICAgICAgICAgVGhlIGN1cnJlbnQgcmVhZHkgc3RhdGUgb2YgdGhlIHRyYWNrIGVsZW1lbnQuXG4gICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAqL1xuICAgICAgcmVhZHlTdGF0ZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gcmVhZHlTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgSFRNTFRyYWNrRWxlbWVudFxuICAgICAgICogQG1lbWJlciB7VGV4dFRyYWNrfSB0cmFja1xuICAgICAgICogICAgICAgICBUaGUgdW5kZXJseWluZyBUZXh0VHJhY2sgb2JqZWN0LlxuICAgICAgICogQGluc3RhbmNlXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICB0cmFjazoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZWFkeVN0YXRlID0gTk9ORTtcbiAgICAvKipcbiAgICAgKiBAbGlzdGVucyBUZXh0VHJhY2sjbG9hZGVkZGF0YVxuICAgICAqIEBmaXJlcyBIVE1MVHJhY2tFbGVtZW50I2xvYWRcbiAgICAgKi9cblxuICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZWFkeVN0YXRlID0gTE9BREVEO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2xvYWQnLFxuICAgICAgICB0YXJnZXQ6IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gSFRNTFRyYWNrRWxlbWVudDtcbn0oRXZlbnRUYXJnZXQpO1xuXG5IVE1MVHJhY2tFbGVtZW50LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXyA9IHtcbiAgbG9hZDogJ2xvYWQnXG59O1xuSFRNTFRyYWNrRWxlbWVudC5OT05FID0gTk9ORTtcbkhUTUxUcmFja0VsZW1lbnQuTE9BRElORyA9IExPQURJTkc7XG5IVE1MVHJhY2tFbGVtZW50LkxPQURFRCA9IExPQURFRDtcbkhUTUxUcmFja0VsZW1lbnQuRVJST1IgPSBFUlJPUjtcblxuLypcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhbGwgdHJhY2sgcHJvcGVydGllcyB0aGF0IGFyZSB1c2VkIGluXG4gKiBwbGF5ZXIuanMsIHRlY2guanMsIGh0bWw1LmpzIGFuZCBwb3NzaWJseSBvdGhlciB0ZWNocyBpbiB0aGUgZnV0dXJlLlxuICovXG5cbnZhciBOT1JNQUwgPSB7XG4gIGF1ZGlvOiB7XG4gICAgTGlzdENsYXNzOiBBdWRpb1RyYWNrTGlzdCxcbiAgICBUcmFja0NsYXNzOiBBdWRpb1RyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnQXVkaW8nXG4gIH0sXG4gIHZpZGVvOiB7XG4gICAgTGlzdENsYXNzOiBWaWRlb1RyYWNrTGlzdCxcbiAgICBUcmFja0NsYXNzOiBWaWRlb1RyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnVmlkZW8nXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBMaXN0Q2xhc3M6IFRleHRUcmFja0xpc3QsXG4gICAgVHJhY2tDbGFzczogVGV4dFRyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnVGV4dCdcbiAgfVxufTtcbk9iamVjdC5rZXlzKE5PUk1BTCkuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBOT1JNQUxbdHlwZV0uZ2V0dGVyTmFtZSA9IHR5cGUgKyBcIlRyYWNrc1wiO1xuICBOT1JNQUxbdHlwZV0ucHJpdmF0ZU5hbWUgPSB0eXBlICsgXCJUcmFja3NfXCI7XG59KTtcbnZhciBSRU1PVEUgPSB7XG4gIHJlbW90ZVRleHQ6IHtcbiAgICBMaXN0Q2xhc3M6IFRleHRUcmFja0xpc3QsXG4gICAgVHJhY2tDbGFzczogVGV4dFRyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnUmVtb3RlVGV4dCcsXG4gICAgZ2V0dGVyTmFtZTogJ3JlbW90ZVRleHRUcmFja3MnLFxuICAgIHByaXZhdGVOYW1lOiAncmVtb3RlVGV4dFRyYWNrc18nXG4gIH0sXG4gIHJlbW90ZVRleHRFbDoge1xuICAgIExpc3RDbGFzczogSHRtbFRyYWNrRWxlbWVudExpc3QsXG4gICAgVHJhY2tDbGFzczogSFRNTFRyYWNrRWxlbWVudCxcbiAgICBjYXBpdGFsTmFtZTogJ1JlbW90ZVRleHRUcmFja0VscycsXG4gICAgZ2V0dGVyTmFtZTogJ3JlbW90ZVRleHRUcmFja0VscycsXG4gICAgcHJpdmF0ZU5hbWU6ICdyZW1vdGVUZXh0VHJhY2tFbHNfJ1xuICB9XG59O1xudmFyIEFMTCA9IG1lcmdlT3B0aW9ucyhOT1JNQUwsIFJFTU9URSk7XG5SRU1PVEUubmFtZXMgPSBPYmplY3Qua2V5cyhSRU1PVEUpO1xuTk9STUFMLm5hbWVzID0gT2JqZWN0LmtleXMoTk9STUFMKTtcbkFMTC5uYW1lcyA9IFtdLmNvbmNhdChSRU1PVEUubmFtZXMpLmNvbmNhdChOT1JNQUwubmFtZXMpO1xuXG4vKipcbiAqIEFuIE9iamVjdCBjb250YWluaW5nIGEgc3RydWN0dXJlIGxpa2U6IGB7c3JjOiAndXJsJywgdHlwZTogJ21pbWV0eXBlJ31gIG9yIHN0cmluZ1xuICogdGhhdCBqdXN0IGNvbnRhaW5zIHRoZSBzcmMgdXJsIGFsb25lLlxuICogKiBgdmFyIFNvdXJjZU9iamVjdCA9IHtzcmM6ICdodHRwOi8vZXguY29tL3ZpZGVvLm1wNCcsIHR5cGU6ICd2aWRlby9tcDQnfTtgXG4gICAqIGB2YXIgU291cmNlU3RyaW5nID0gJ2h0dHA6Ly9leGFtcGxlLmNvbS9zb21lLXZpZGVvLm1wNCc7YFxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R8c3RyaW5nfSBUZWNoflNvdXJjZU9iamVjdFxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzcmNcbiAqICAgICAgICAgICBUaGUgdXJsIHRvIHRoZSBzb3VyY2VcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZVxuICogICAgICAgICAgIFRoZSBtaW1lIHR5cGUgb2YgdGhlIHNvdXJjZVxuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB1c2VkIGJ5IHtAbGluayBUZWNofSB0byBjcmVhdGUgYSBuZXcge0BsaW5rIFRleHRUcmFja30uXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1RlY2h9IHNlbGZcbiAqICAgICAgICBBbiBpbnN0YW5jZSBvZiB0aGUgVGVjaCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2luZFxuICogICAgICAgIGBUZXh0VHJhY2tgIGtpbmQgKHN1YnRpdGxlcywgY2FwdGlvbnMsIGRlc2NyaXB0aW9ucywgY2hhcHRlcnMsIG9yIG1ldGFkYXRhKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxdXG4gKiAgICAgICAgTGFiZWwgdG8gaWRlbnRpZnkgdGhlIHRleHQgdHJhY2tcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlXVxuICogICAgICAgIFR3byBsZXR0ZXIgbGFuZ3VhZ2UgYWJicmV2aWF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogICAgICAgIEFuIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgdGV4dCB0cmFjayBvcHRpb25zXG4gKlxuICogQHJldHVybiB7VGV4dFRyYWNrfVxuICogICAgICAgICAgVGhlIHRleHQgdHJhY2sgdGhhdCB3YXMgY3JlYXRlZC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUcmFja0hlbHBlcihzZWxmLCBraW5kLCBsYWJlbCwgbGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciB0cmFja3MgPSBzZWxmLnRleHRUcmFja3MoKTtcbiAgb3B0aW9ucy5raW5kID0ga2luZDtcblxuICBpZiAobGFiZWwpIHtcbiAgICBvcHRpb25zLmxhYmVsID0gbGFiZWw7XG4gIH1cblxuICBpZiAobGFuZ3VhZ2UpIHtcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gIH1cblxuICBvcHRpb25zLnRlY2ggPSBzZWxmO1xuICB2YXIgdHJhY2sgPSBuZXcgQUxMLnRleHQuVHJhY2tDbGFzcyhvcHRpb25zKTtcbiAgdHJhY2tzLmFkZFRyYWNrKHRyYWNrKTtcbiAgcmV0dXJuIHRyYWNrO1xufVxuLyoqXG4gKiBUaGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBtZWRpYSBwbGF5YmFjayB0ZWNobm9sb2d5IGNvbnRyb2xsZXJzLCBzdWNoIGFzXG4gKiB7QGxpbmsgRmxhc2h9IGFuZCB7QGxpbmsgSFRNTDV9XG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxuXG52YXIgVGVjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUZWNoLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBUZWNoLlxuICAqXG4gICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAqXG4gICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gcmVhZHlcbiAgKiAgICAgICAgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBgSFRNTDVgIFRlY2ggaXMgcmVhZHkuXG4gICovXG4gIGZ1bmN0aW9uIFRlY2gob3B0aW9ucywgcmVhZHkpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHJlYWR5ID09PSB2b2lkIDApIHtcbiAgICAgIHJlYWR5ID0gZnVuY3Rpb24gcmVhZHkoKSB7fTtcbiAgICB9XG5cbiAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSB0ZWNoIHRvIHJlcG9ydCB1c2VyIGFjdGl2aXR5IGF1dG9tYXRpY2FsbHkuXG4gICAgLy8gVGhpcyBpcyBkb25lIG1hbnVhbGx5IGluIGFkZENvbnRyb2xzTGlzdGVuZXJzXG4gICAgb3B0aW9ucy5yZXBvcnRUb3VjaEFjdGl2aXR5ID0gZmFsc2U7XG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgbnVsbCwgb3B0aW9ucywgcmVhZHkpIHx8IHRoaXM7IC8vIGtlZXAgdHJhY2sgb2Ygd2hldGhlciB0aGUgY3VycmVudCBzb3VyY2UgaGFzIHBsYXllZCBhdCBhbGwgdG9cbiAgICAvLyBpbXBsZW1lbnQgYSB2ZXJ5IGxpbWl0ZWQgcGxheWVkKClcblxuICAgIF90aGlzLmhhc1N0YXJ0ZWRfID0gZmFsc2U7XG5cbiAgICBfdGhpcy5vbigncGxheWluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuaGFzU3RhcnRlZF8gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgX3RoaXMub24oJ2xvYWRzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuaGFzU3RhcnRlZF8gPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIEFMTC5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG5cbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnNbcHJvcHMuZ2V0dGVyTmFtZV0pIHtcbiAgICAgICAgX3RoaXNbcHJvcHMucHJpdmF0ZU5hbWVdID0gb3B0aW9uc1twcm9wcy5nZXR0ZXJOYW1lXTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTWFudWFsbHkgdHJhY2sgcHJvZ3Jlc3MgaW4gY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIvZmxhc2ggcGxheWVyIGRvZXNuJ3QgcmVwb3J0IGl0LlxuXG4gICAgaWYgKCFfdGhpcy5mZWF0dXJlc1Byb2dyZXNzRXZlbnRzKSB7XG4gICAgICBfdGhpcy5tYW51YWxQcm9ncmVzc09uKCk7XG4gICAgfSAvLyBNYW51YWxseSB0cmFjayB0aW1ldXBkYXRlcyBpbiBjYXNlcyB3aGVyZSB0aGUgYnJvd3Nlci9mbGFzaCBwbGF5ZXIgZG9lc24ndCByZXBvcnQgaXQuXG5cblxuICAgIGlmICghX3RoaXMuZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzKSB7XG4gICAgICBfdGhpcy5tYW51YWxUaW1lVXBkYXRlc09uKCk7XG4gICAgfVxuXG4gICAgWydUZXh0JywgJ0F1ZGlvJywgJ1ZpZGVvJ10uZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgIGlmIChvcHRpb25zW1wibmF0aXZlXCIgKyB0cmFjayArIFwiVHJhY2tzXCJdID09PSBmYWxzZSkge1xuICAgICAgICBfdGhpc1tcImZlYXR1cmVzTmF0aXZlXCIgKyB0cmFjayArIFwiVHJhY2tzXCJdID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5uYXRpdmVDYXB0aW9ucyA9PT0gZmFsc2UgfHwgb3B0aW9ucy5uYXRpdmVUZXh0VHJhY2tzID09PSBmYWxzZSkge1xuICAgICAgX3RoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLm5hdGl2ZUNhcHRpb25zID09PSB0cnVlIHx8IG9wdGlvbnMubmF0aXZlVGV4dFRyYWNrcyA9PT0gdHJ1ZSkge1xuICAgICAgX3RoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIV90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgX3RoaXMuZW11bGF0ZVRleHRUcmFja3MoKTtcbiAgICB9XG5cbiAgICBfdGhpcy5hdXRvUmVtb3RlVGV4dFRyYWNrc18gPSBuZXcgQUxMLnRleHQuTGlzdENsYXNzKCk7XG5cbiAgICBfdGhpcy5pbml0VHJhY2tMaXN0ZW5lcnMoKTsgLy8gVHVybiBvbiBjb21wb25lbnQgdGFwIGV2ZW50cyBvbmx5IGlmIG5vdCB1c2luZyBuYXRpdmUgY29udHJvbHNcblxuXG4gICAgaWYgKCFvcHRpb25zLm5hdGl2ZUNvbnRyb2xzRm9yVG91Y2gpIHtcbiAgICAgIF90aGlzLmVtaXRUYXBFdmVudHMoKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIF90aGlzLm5hbWVfID0gX3RoaXMuY29uc3RydWN0b3IubmFtZSB8fCAnVW5rbm93biBUZWNoJztcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEEgc3BlY2lhbCBmdW5jdGlvbiB0byB0cmlnZ2VyIHNvdXJjZSBzZXQgaW4gYSB3YXkgdGhhdCB3aWxsIGFsbG93IHBsYXllclxuICAgKiB0byByZS10cmlnZ2VyIGlmIHRoZSBwbGF5ZXIgb3IgdGVjaCBhcmUgbm90IHJlYWR5IHlldC5cbiAgICpcbiAgICogQGZpcmVzIFRlY2gjc291cmNlc2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBzdHJpbmcgYXQgdGhlIHRpbWUgb2YgdGhlIHNvdXJjZSBjaGFuZ2luZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGVjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRyaWdnZXJTb3VyY2VzZXQgPSBmdW5jdGlvbiB0cmlnZ2VyU291cmNlc2V0KHNyYykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLmlzUmVhZHlfKSB7XG4gICAgICAvLyBvbiBpbml0aWFsIHJlYWR5IHdlIGhhdmUgdG8gdHJpZ2dlciBzb3VyY2Ugc2V0XG4gICAgICAvLyAxbXMgYWZ0ZXIgcmVhZHkgc28gdGhhdCBwbGF5ZXIgY2FuIHdhdGNoIGZvciBpdC5cbiAgICAgIHRoaXMub25lKCdyZWFkeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnRyaWdnZXJTb3VyY2VzZXQoc3JjKTtcbiAgICAgICAgfSwgMSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgc291cmNlIGlzIHNldCBvbiB0aGUgdGVjaCBjYXVzaW5nIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICogdG8gcmVsb2FkLlxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgUGxheWVyI2V2ZW50OnNvdXJjZXNldH1cbiAgICAgKiBAZXZlbnQgVGVjaCNzb3VyY2VzZXRcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cblxuICAgIHRoaXMudHJpZ2dlcih7XG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHR5cGU6ICdzb3VyY2VzZXQnXG4gICAgfSk7XG4gIH1cbiAgLyogRmFsbGJhY2tzIGZvciB1bnN1cHBvcnRlZCBldmVudCB0eXBlc1xuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBQb2x5ZmlsbCB0aGUgYHByb2dyZXNzYCBldmVudCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGl0IG5hdGl2ZWx5LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBUZWNoI3RyYWNrUHJvZ3Jlc3N9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hbnVhbFByb2dyZXNzT24gPSBmdW5jdGlvbiBtYW51YWxQcm9ncmVzc09uKCkge1xuICAgIHRoaXMub24oJ2R1cmF0aW9uY2hhbmdlJywgdGhpcy5vbkR1cmF0aW9uQ2hhbmdlKTtcbiAgICB0aGlzLm1hbnVhbFByb2dyZXNzID0gdHJ1ZTsgLy8gVHJpZ2dlciBwcm9ncmVzcyB3YXRjaGluZyB3aGVuIGEgc291cmNlIGJlZ2lucyBsb2FkaW5nXG5cbiAgICB0aGlzLm9uZSgncmVhZHknLCB0aGlzLnRyYWNrUHJvZ3Jlc3MpO1xuICB9XG4gIC8qKlxuICAgKiBUdXJuIG9mZiB0aGUgcG9seWZpbGwgZm9yIGBwcm9ncmVzc2AgZXZlbnRzIHRoYXQgd2FzIGNyZWF0ZWQgaW5cbiAgICoge0BsaW5rIFRlY2gjbWFudWFsUHJvZ3Jlc3NPbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFudWFsUHJvZ3Jlc3NPZmYgPSBmdW5jdGlvbiBtYW51YWxQcm9ncmVzc09mZigpIHtcbiAgICB0aGlzLm1hbnVhbFByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpO1xuICAgIHRoaXMub2ZmKCdkdXJhdGlvbmNoYW5nZScsIHRoaXMub25EdXJhdGlvbkNoYW5nZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byB0cmlnZ2VyIGEgYHByb2dyZXNzYCBldmVudCB3aGVuIHRoZSBidWZmZXJlZCBwZXJjZW50IGNoYW5nZXMuIEl0XG4gICAqIHNldHMgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBldmVyeSA1MDAgbWlsbGlzZWNvbmRzIHRvIGNoZWNrIGlmIHRoZVxuICAgKiBidWZmZXIgZW5kIHBlcmNlbnQgaGFzIGNoYW5nZWQuXG4gICAqXG4gICAqID4gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkge0BsaW5rIFRlY2gjbWFudWFsUHJvZ3Jlc3NPbn1cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgcmVhZHlgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI3JlYWR5XG4gICAqIEBmaXJlcyBUZWNoI3Byb2dyZXNzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyYWNrUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0cmFja1Byb2dyZXNzKGV2ZW50KSB7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpO1xuICAgIHRoaXMucHJvZ3Jlc3NJbnRlcnZhbCA9IHRoaXMuc2V0SW50ZXJ2YWwoYmluZCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIHVubGVzcyBidWZmZXJlZCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIGxhc3QgdGltZVxuICAgICAgdmFyIG51bUJ1ZmZlcmVkUGVyY2VudCA9IHRoaXMuYnVmZmVyZWRQZXJjZW50KCk7XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkUGVyY2VudF8gIT09IG51bUJ1ZmZlcmVkUGVyY2VudCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBQbGF5ZXIjcHJvZ3Jlc3N9XG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBUZWNoI3Byb2dyZXNzXG4gICAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWZmZXJlZFBlcmNlbnRfID0gbnVtQnVmZmVyZWRQZXJjZW50O1xuXG4gICAgICBpZiAobnVtQnVmZmVyZWRQZXJjZW50ID09PSAxKSB7XG4gICAgICAgIHRoaXMuc3RvcFRyYWNraW5nUHJvZ3Jlc3MoKTtcbiAgICAgIH1cbiAgICB9KSwgNTAwKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIG91ciBpbnRlcm5hbCBkdXJhdGlvbiBvbiBhIGBkdXJhdGlvbmNoYW5nZWAgZXZlbnQgYnkgY2FsbGluZ1xuICAgKiB7QGxpbmsgVGVjaCNkdXJhdGlvbn0uXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGR1cmF0aW9uY2hhbmdlYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCNkdXJhdGlvbmNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkR1cmF0aW9uQ2hhbmdlID0gZnVuY3Rpb24gb25EdXJhdGlvbkNoYW5nZShldmVudCkge1xuICAgIHRoaXMuZHVyYXRpb25fID0gdGhpcy5kdXJhdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYW5kIGNyZWF0ZSBhIGBUaW1lUmFuZ2VgIG9iamVjdCBmb3IgYnVmZmVyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gICAqICAgICAgICAgVGhlIHRpbWUgcmFuZ2Ugb2JqZWN0IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1ZmZlcmVkID0gZnVuY3Rpb24gYnVmZmVyZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXMoMCwgMCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcGVyY2VudGFnZSBvZiB0aGUgY3VycmVudCB2aWRlbyB0aGF0IGlzIGN1cnJlbnRseSBidWZmZXJlZC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIEEgbnVtYmVyIGZyb20gMCB0byAxIHRoYXQgcmVwcmVzZW50cyB0aGUgZGVjaW1hbCBwZXJjZW50YWdlIG9mIHRoZVxuICAgKiAgICAgICAgIHZpZGVvIHRoYXQgaXMgYnVmZmVyZWQuXG4gICAqXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1ZmZlcmVkUGVyY2VudCA9IGZ1bmN0aW9uIGJ1ZmZlcmVkUGVyY2VudCQxKCkge1xuICAgIHJldHVybiBidWZmZXJlZFBlcmNlbnQodGhpcy5idWZmZXJlZCgpLCB0aGlzLmR1cmF0aW9uXyk7XG4gIH1cbiAgLyoqXG4gICAqIFR1cm4gb2ZmIHRoZSBwb2x5ZmlsbCBmb3IgYHByb2dyZXNzYCBldmVudHMgdGhhdCB3YXMgY3JlYXRlZCBpblxuICAgKiB7QGxpbmsgVGVjaCNtYW51YWxQcm9ncmVzc09ufVxuICAgKiBTdG9wIG1hbnVhbGx5IHRyYWNraW5nIHByb2dyZXNzIGV2ZW50cyBieSBjbGVhcmluZyB0aGUgaW50ZXJ2YWwgdGhhdCB3YXMgc2V0IGluXG4gICAqIHtAbGluayBUZWNoI3RyYWNrUHJvZ3Jlc3N9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdG9wVHJhY2tpbmdQcm9ncmVzcyA9IGZ1bmN0aW9uIHN0b3BUcmFja2luZ1Byb2dyZXNzKCkge1xuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLnByb2dyZXNzSW50ZXJ2YWwpO1xuICB9XG4gIC8qKlxuICAgKiBQb2x5ZmlsbCB0aGUgYHRpbWV1cGRhdGVgIGV2ZW50IGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgaXQuXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIFRlY2gjdHJhY2tDdXJyZW50VGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFudWFsVGltZVVwZGF0ZXNPbiA9IGZ1bmN0aW9uIG1hbnVhbFRpbWVVcGRhdGVzT24oKSB7XG4gICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlcyA9IHRydWU7XG4gICAgdGhpcy5vbigncGxheScsIHRoaXMudHJhY2tDdXJyZW50VGltZSk7XG4gICAgdGhpcy5vbigncGF1c2UnLCB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogVHVybiBvZmYgdGhlIHBvbHlmaWxsIGZvciBgdGltZXVwZGF0ZWAgZXZlbnRzIHRoYXQgd2FzIGNyZWF0ZWQgaW5cbiAgICoge0BsaW5rIFRlY2gjbWFudWFsVGltZVVwZGF0ZXNPbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFudWFsVGltZVVwZGF0ZXNPZmYgPSBmdW5jdGlvbiBtYW51YWxUaW1lVXBkYXRlc09mZigpIHtcbiAgICB0aGlzLm1hbnVhbFRpbWVVcGRhdGVzID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSgpO1xuICAgIHRoaXMub2ZmKCdwbGF5JywgdGhpcy50cmFja0N1cnJlbnRUaW1lKTtcbiAgICB0aGlzLm9mZigncGF1c2UnLCB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB1cCBhbiBpbnRlcnZhbCBmdW5jdGlvbiB0byB0cmFjayBjdXJyZW50IHRpbWUgYW5kIHRyaWdnZXIgYHRpbWV1cGRhdGVgIGV2ZXJ5XG4gICAqIDI1MCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjcGxheVxuICAgKiBAdHJpZ2dlcnMgVGVjaCN0aW1ldXBkYXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyYWNrQ3VycmVudFRpbWUgPSBmdW5jdGlvbiB0cmFja0N1cnJlbnRUaW1lKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuc3RvcFRyYWNraW5nQ3VycmVudFRpbWUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwgPSB0aGlzLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogVHJpZ2dlcmVkIGF0IGFuIGludGVydmFsIG9mIDI1MG1zIHRvIGluZGljYXRlZCB0aGF0IHRpbWUgaXMgcGFzc2luZyBpbiB0aGUgdmlkZW8uXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IFRlY2gjdGltZXVwZGF0ZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG4gICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndGltZXVwZGF0ZScsXG4gICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWVcbiAgICAgIH0pOyAvLyA0MiA9IDI0IGZwcyAvLyAyNTAgaXMgd2hhdCBXZWJraXQgdXNlcyAvLyBGRiB1c2VzIDE1XG4gICAgfSwgMjUwKTtcbiAgfVxuICAvKipcbiAgICogU3RvcCB0aGUgaW50ZXJ2YWwgZnVuY3Rpb24gY3JlYXRlZCBpbiB7QGxpbmsgVGVjaCN0cmFja0N1cnJlbnRUaW1lfSBzbyB0aGF0IHRoZVxuICAgKiBgdGltZXVwZGF0ZWAgZXZlbnQgaXMgbm8gbG9uZ2VyIHRyaWdnZXJlZC5cbiAgICpcbiAgICogQGxpc3RlbnMge1RlY2gjcGF1c2V9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lID0gZnVuY3Rpb24gc3RvcFRyYWNraW5nQ3VycmVudFRpbWUoKSB7XG4gICAgdGhpcy5jbGVhckludGVydmFsKHRoaXMuY3VycmVudFRpbWVJbnRlcnZhbCk7IC8vICMxMDAyIC0gaWYgdGhlIHZpZGVvIGVuZHMgcmlnaHQgYmVmb3JlIHRoZSBuZXh0IHRpbWV1cGRhdGUgd291bGQgaGFwcGVuLFxuICAgIC8vIHRoZSBwcm9ncmVzcyBiYXIgd29uJ3QgbWFrZSBpdCBhbGwgdGhlIHdheSB0byB0aGUgZW5kXG5cbiAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3RpbWV1cGRhdGUnLFxuICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVHVybiBvZmYgYWxsIGV2ZW50IHBvbHlmaWxscywgY2xlYXIgdGhlIGBUZWNoYHMge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fSxcbiAgICoge0BsaW5rIFZpZGVvVHJhY2tMaXN0fSwgYW5kIHtAbGluayBUZXh0VHJhY2tMaXN0fSwgYW5kIGRpc3Bvc2Ugb2YgdGhpcyBUZWNoLlxuICAgKlxuICAgKiBAZmlyZXMgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgLy8gY2xlYXIgb3V0IGFsbCB0cmFja3MgYmVjYXVzZSB3ZSBjYW4ndCByZXVzZSB0aGVtIGJldHdlZW4gdGVjaHNcbiAgICB0aGlzLmNsZWFyVHJhY2tzKE5PUk1BTC5uYW1lcyk7IC8vIFR1cm4gb2ZmIGFueSBtYW51YWwgcHJvZ3Jlc3Mgb3IgdGltZXVwZGF0ZSB0cmFja2luZ1xuXG4gICAgaWYgKHRoaXMubWFudWFsUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMubWFudWFsUHJvZ3Jlc3NPZmYoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tYW51YWxUaW1lVXBkYXRlcykge1xuICAgICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlc09mZigpO1xuICAgIH1cblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgb3V0IGEgc2luZ2xlIGBUcmFja0xpc3RgIG9yIGFuIGFycmF5IG9mIGBUcmFja0xpc3RzYCBnaXZlbiB0aGVpciBuYW1lcy5cbiAgICpcbiAgICogPiBOb3RlOiBUZWNocyB3aXRob3V0IHNvdXJjZSBoYW5kbGVycyBzaG91bGQgY2FsbCB0aGlzIGJldHdlZW4gc291cmNlcyBmb3IgYHZpZGVvYFxuICAgKiAgICAgICAgICYgYGF1ZGlvYCB0cmFja3MuIFlvdSBkb24ndCB3YW50IHRvIHVzZSB0aGVtIGJldHdlZW4gdHJhY2tzIVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfHN0cmluZ30gdHlwZXNcbiAgICogICAgICAgIFRyYWNrTGlzdCBuYW1lcyB0byBjbGVhciwgdmFsaWQgbmFtZXMgYXJlIGB2aWRlb2AsIGBhdWRpb2AsIGFuZFxuICAgKiAgICAgICAgYHRleHRgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhclRyYWNrcyA9IGZ1bmN0aW9uIGNsZWFyVHJhY2tzKHR5cGVzKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0eXBlcyA9IFtdLmNvbmNhdCh0eXBlcyk7IC8vIGNsZWFyIG91dCBhbGwgdHJhY2tzIGJlY2F1c2Ugd2UgY2FuJ3QgcmV1c2UgdGhlbSBiZXR3ZWVuIHRlY2hzXG5cbiAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICB2YXIgbGlzdCA9IF90aGlzM1t0eXBlICsgXCJUcmFja3NcIl0oKSB8fCBbXTtcbiAgICAgIHZhciBpID0gbGlzdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIHRyYWNrID0gbGlzdFtpXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgX3RoaXMzLnJlbW92ZVJlbW90ZVRleHRUcmFjayh0cmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGFueSBUZXh0VHJhY2tzIGFkZGVkIHZpYSBhZGRSZW1vdGVUZXh0VHJhY2sgdGhhdCBhcmVcbiAgICogZmxhZ2dlZCBmb3IgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhbnVwQXV0b1RleHRUcmFja3MgPSBmdW5jdGlvbiBjbGVhbnVwQXV0b1RleHRUcmFja3MoKSB7XG4gICAgdmFyIGxpc3QgPSB0aGlzLmF1dG9SZW1vdGVUZXh0VHJhY2tzXyB8fCBbXTtcbiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIHRyYWNrID0gbGlzdFtpXTtcbiAgICAgIHRoaXMucmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0ZWNoLCB3aGljaCB3aWxsIHJlbW92ZXMgYWxsIHNvdXJjZXMgYW5kIHJlc2V0IHRoZSBpbnRlcm5hbCByZWFkeVN0YXRlLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHt9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IGFuIGVycm9yIG9uIHRoZSBUZWNoLlxuICAgKlxuICAgKiBAcGFyYW0ge01lZGlhRXJyb3J9IFtlcnJdXG4gICAqICAgICAgICBFcnJvciB0byBzZXQgb24gdGhlIFRlY2hcbiAgICpcbiAgICogQHJldHVybiB7TWVkaWFFcnJvcnxudWxsfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IGVycm9yIG9iamVjdCBvbiB0aGUgdGVjaCwgb3IgbnVsbCBpZiB0aGVyZSBpc24ndCBvbmUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoZXJyKSB7XG4gICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmVycm9yXyA9IG5ldyBNZWRpYUVycm9yKGVycik7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZXJyb3JfO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBgVGltZVJhbmdlYHMgdGhhdCBoYXZlIGJlZW4gcGxheWVkIHRocm91Z2ggZm9yIHRoZSBjdXJyZW50IHNvdXJjZS5cbiAgICpcbiAgICogPiBOT1RFOiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGluY29tcGxldGUuIEl0IGRvZXMgbm90IHRyYWNrIHRoZSBwbGF5ZWQgYFRpbWVSYW5nZWAuXG4gICAqICAgICAgICAgSXQgb25seSBjaGVja3Mgd2hldGhlciB0aGUgc291cmNlIGhhcyBwbGF5ZWQgYXQgYWxsIG9yIG5vdC5cbiAgICpcbiAgICogQHJldHVybiB7VGltZVJhbmdlfVxuICAgKiAgICAgICAgIC0gQSBzaW5nbGUgdGltZSByYW5nZSBpZiB0aGlzIHZpZGVvIGhhcyBwbGF5ZWRcbiAgICogICAgICAgICAtIEFuIGVtcHR5IHNldCBvZiByYW5nZXMgaWYgbm90LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wbGF5ZWQgPSBmdW5jdGlvbiBwbGF5ZWQoKSB7XG4gICAgaWYgKHRoaXMuaGFzU3RhcnRlZF8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVUaW1lUmFuZ2VzKDAsIDApO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVUaW1lUmFuZ2VzKCk7XG4gIH1cbiAgLyoqXG4gICAqIENhdXNlcyBhIG1hbnVhbCB0aW1lIHVwZGF0ZSB0byBvY2N1ciBpZiB7QGxpbmsgVGVjaCNtYW51YWxUaW1lVXBkYXRlc09ufSB3YXNcbiAgICogcHJldmlvdXNseSBjYWxsZWQuXG4gICAqXG4gICAqIEBmaXJlcyBUZWNoI3RpbWV1cGRhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiBzZXRDdXJyZW50VGltZSgpIHtcbiAgICAvLyBpbXByb3ZlIHRoZSBhY2N1cmFjeSBvZiBtYW51YWwgdGltZXVwZGF0ZXNcbiAgICBpZiAodGhpcy5tYW51YWxUaW1lVXBkYXRlcykge1xuICAgICAgLyoqXG4gICAgICAgKiBBIG1hbnVhbCBgdGltZXVwZGF0ZWAgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IFRlY2gjdGltZXVwZGF0ZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG4gICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndGltZXVwZGF0ZScsXG4gICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVHVybiBvbiBsaXN0ZW5lcnMgZm9yIHtAbGluayBWaWRlb1RyYWNrTGlzdH0sIHtAbGluayB7QXVkaW9UcmFja0xpc3R9LCBhbmRcbiAgICoge0BsaW5rIFRleHRUcmFja0xpc3R9IGV2ZW50cy5cbiAgICpcbiAgICogVGhpcyBhZGRzIHtAbGluayBFdmVudFRhcmdldH5FdmVudExpc3RlbmVyc30gZm9yIGBhZGR0cmFja2AsIGFuZCAgYHJlbW92ZXRyYWNrYC5cbiAgICpcbiAgICogQGZpcmVzIFRlY2gjYXVkaW90cmFja2NoYW5nZVxuICAgKiBAZmlyZXMgVGVjaCN2aWRlb3RyYWNrY2hhbmdlXG4gICAqIEBmaXJlcyBUZWNoI3RleHR0cmFja2NoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbml0VHJhY2tMaXN0ZW5lcnMgPSBmdW5jdGlvbiBpbml0VHJhY2tMaXN0ZW5lcnMoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAvKipcbiAgICAgICogVHJpZ2dlcmVkIHdoZW4gdHJhY2tzIGFyZSBhZGRlZCBvciByZW1vdmVkIG9uIHRoZSBUZWNoIHtAbGluayBBdWRpb1RyYWNrTGlzdH1cbiAgICAgICpcbiAgICAgICogQGV2ZW50IFRlY2gjYXVkaW90cmFja2NoYW5nZVxuICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAqL1xuXG4gICAgLyoqXG4gICAgICAqIFRyaWdnZXJlZCB3aGVuIHRyYWNrcyBhcmUgYWRkZWQgb3IgcmVtb3ZlZCBvbiB0aGUgVGVjaCB7QGxpbmsgVmlkZW9UcmFja0xpc3R9XG4gICAgICAqXG4gICAgICAqIEBldmVudCBUZWNoI3ZpZGVvdHJhY2tjaGFuZ2VcbiAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgKi9cblxuICAgIC8qKlxuICAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0cmFja3MgYXJlIGFkZGVkIG9yIHJlbW92ZWQgb24gdGhlIFRlY2gge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gICAgICAqXG4gICAgICAqIEBldmVudCBUZWNoI3RleHR0cmFja2NoYW5nZVxuICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAqL1xuICAgIE5PUk1BTC5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgcHJvcHMgPSBOT1JNQUxbbmFtZV07XG5cbiAgICAgIHZhciB0cmFja0xpc3RDaGFuZ2VzID0gZnVuY3Rpb24gdHJhY2tMaXN0Q2hhbmdlcygpIHtcbiAgICAgICAgX3RoaXM0LnRyaWdnZXIobmFtZSArIFwidHJhY2tjaGFuZ2VcIik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgdHJhY2tzID0gX3RoaXM0W3Byb3BzLmdldHRlck5hbWVdKCk7XG5cbiAgICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHRyYWNrTGlzdENoYW5nZXMpO1xuICAgICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdHJhY2tMaXN0Q2hhbmdlcyk7XG5cbiAgICAgIF90aGlzNC5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3JlbW92ZXRyYWNrJywgdHJhY2tMaXN0Q2hhbmdlcyk7XG4gICAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHRyYWNrTGlzdENoYW5nZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVtdWxhdGUgVGV4dFRyYWNrcyB1c2luZyB2dHQuanMgaWYgbmVjZXNzYXJ5XG4gICAqXG4gICAqIEBmaXJlcyBUZWNoI3Z0dGpzbG9hZGVkXG4gICAqIEBmaXJlcyBUZWNoI3Z0dGpzZXJyb3JcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkV2ViVnR0U2NyaXB0XyA9IGZ1bmN0aW9uIGFkZFdlYlZ0dFNjcmlwdF8oKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICBpZiAod2luZG93JDEuV2ViVlRUKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJbml0aWFsbHksIFRlY2guZWxfIGlzIGEgY2hpbGQgb2YgYSBkdW1teS1kaXYgd2FpdCB1bnRpbCB0aGUgQ29tcG9uZW50IHN5c3RlbVxuICAgIC8vIHNpZ25hbHMgdGhhdCB0aGUgVGVjaCBpcyByZWFkeSBhdCB3aGljaCBwb2ludCBUZWNoLmVsXyBpcyBwYXJ0IG9mIHRoZSBET01cbiAgICAvLyBiZWZvcmUgaW5zZXJ0aW5nIHRoZSBXZWJWVFQgc2NyaXB0XG5cblxuICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuZWwoKSkpIHtcbiAgICAgIC8vIGxvYWQgdmlhIHJlcXVpcmUgaWYgYXZhaWxhYmxlIGFuZCB2dHQuanMgc2NyaXB0IGxvY2F0aW9uIHdhcyBub3QgcGFzc2VkIGluXG4gICAgICAvLyBhcyBhbiBvcHRpb24uIG5vdnR0IGJ1aWxkcyB3aWxsIHR1cm4gdGhlIGFib3ZlIHJlcXVpcmUgY2FsbCBpbnRvIGFuIGVtcHR5IG9iamVjdFxuICAgICAgLy8gd2hpY2ggd2lsbCBjYXVzZSB0aGlzIGlmIGNoZWNrIHRvIGFsd2F5cyBmYWlsLlxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnNfWyd2dHQuanMnXSAmJiBpc1BsYWluKHZ0dCkgJiYgT2JqZWN0LmtleXModnR0KS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigndnR0anNsb2FkZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBsb2FkIHZ0dC5qcyB2aWEgdGhlIHNjcmlwdCBsb2NhdGlvbiBvcHRpb24gb3IgdGhlIGNkbiBvZiBubyBsb2NhdGlvbiB3YXNcbiAgICAgIC8vIHBhc3NlZCBpblxuXG5cbiAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC5zcmMgPSB0aGlzLm9wdGlvbnNfWyd2dHQuanMnXSB8fCAnaHR0cHM6Ly92anMuemVuY2RuLm5ldC92dHRqcy8wLjE0LjEvdnR0Lm1pbi5qcyc7XG5cbiAgICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIHZ0dC5qcyBpcyBsb2FkZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBUZWNoI3Z0dGpzbG9hZGVkXG4gICAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzNS50cmlnZ2VyKCd2dHRqc2xvYWRlZCcpO1xuICAgICAgfTtcblxuICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIHZ0dC5qcyB3YXMgbm90IGxvYWRlZCBkdWUgdG8gYW4gZXJyb3JcbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IFRlY2gjdnR0anNsb2FkZWRcbiAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXM1LnRyaWdnZXIoJ3Z0dGpzZXJyb3InKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuICAgICAgICBzY3JpcHQub25lcnJvciA9IG51bGw7XG4gICAgICB9KTsgLy8gYnV0IGhhdmUgbm90IGxvYWRlZCB5ZXQgYW5kIHdlIHNldCBpdCB0byB0cnVlIGJlZm9yZSB0aGUgaW5qZWN0IHNvIHRoYXRcbiAgICAgIC8vIHdlIGRvbid0IG92ZXJ3cml0ZSB0aGUgaW5qZWN0ZWQgd2luZG93LldlYlZUVCBpZiBpdCBsb2FkcyByaWdodCBhd2F5XG5cbiAgICAgIHdpbmRvdyQxLldlYlZUVCA9IHRydWU7XG4gICAgICB0aGlzLmVsKCkucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlYWR5KHRoaXMuYWRkV2ViVnR0U2NyaXB0Xyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFbXVsYXRlIHRleHR0cmFja3NcbiAgICpcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW11bGF0ZVRleHRUcmFja3MgPSBmdW5jdGlvbiBlbXVsYXRlVGV4dFRyYWNrcygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciB0cmFja3MgPSB0aGlzLnRleHRUcmFja3MoKTtcbiAgICB2YXIgcmVtb3RlVHJhY2tzID0gdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCk7XG5cbiAgICB2YXIgaGFuZGxlQWRkVHJhY2sgPSBmdW5jdGlvbiBoYW5kbGVBZGRUcmFjayhlKSB7XG4gICAgICByZXR1cm4gdHJhY2tzLmFkZFRyYWNrKGUudHJhY2spO1xuICAgIH07XG5cbiAgICB2YXIgaGFuZGxlUmVtb3ZlVHJhY2sgPSBmdW5jdGlvbiBoYW5kbGVSZW1vdmVUcmFjayhlKSB7XG4gICAgICByZXR1cm4gdHJhY2tzLnJlbW92ZVRyYWNrKGUudHJhY2spO1xuICAgIH07XG5cbiAgICByZW1vdGVUcmFja3Mub24oJ2FkZHRyYWNrJywgaGFuZGxlQWRkVHJhY2spO1xuICAgIHJlbW90ZVRyYWNrcy5vbigncmVtb3ZldHJhY2snLCBoYW5kbGVSZW1vdmVUcmFjayk7XG4gICAgdGhpcy5hZGRXZWJWdHRTY3JpcHRfKCk7XG5cbiAgICB2YXIgdXBkYXRlRGlzcGxheSA9IGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoKSB7XG4gICAgICByZXR1cm4gX3RoaXM2LnRyaWdnZXIoJ3RleHR0cmFja2NoYW5nZScpO1xuICAgIH07XG5cbiAgICB2YXIgdGV4dFRyYWNrc0NoYW5nZXMgPSBmdW5jdGlvbiB0ZXh0VHJhY2tzQ2hhbmdlcygpIHtcbiAgICAgIHVwZGF0ZURpc3BsYXkoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldO1xuICAgICAgICB0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyKCdjdWVjaGFuZ2UnLCB1cGRhdGVEaXNwbGF5KTtcblxuICAgICAgICBpZiAodHJhY2subW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignY3VlY2hhbmdlJywgdXBkYXRlRGlzcGxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGV4dFRyYWNrc0NoYW5nZXMoKTtcbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHRleHRUcmFja3NDaGFuZ2VzKTtcbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB0ZXh0VHJhY2tzQ2hhbmdlcyk7XG4gICAgdGhpcy5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW90ZVRyYWNrcy5vZmYoJ2FkZHRyYWNrJywgaGFuZGxlQWRkVHJhY2spO1xuICAgICAgcmVtb3RlVHJhY2tzLm9mZigncmVtb3ZldHJhY2snLCBoYW5kbGVSZW1vdmVUcmFjayk7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3JlbW92ZXRyYWNrJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICAgIHRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2N1ZWNoYW5nZScsIHVwZGF0ZURpc3BsYXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJldHVybnMgYSByZW1vdGUge0BsaW5rIFRleHRUcmFja30gb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2luZFxuICAgKiAgICAgICAgYFRleHRUcmFja2Aga2luZCAoc3VidGl0bGVzLCBjYXB0aW9ucywgZGVzY3JpcHRpb25zLCBjaGFwdGVycywgb3IgbWV0YWRhdGEpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxdXG4gICAqICAgICAgICBMYWJlbCB0byBpZGVudGlmeSB0aGUgdGV4dCB0cmFja1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlXVxuICAgKiAgICAgICAgVHdvIGxldHRlciBsYW5ndWFnZSBhYmJyZXZpYXRpb25cbiAgICpcbiAgICogQHJldHVybiB7VGV4dFRyYWNrfVxuICAgKiAgICAgICAgIFRoZSBUZXh0VHJhY2sgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFRleHRUcmFjayA9IGZ1bmN0aW9uIGFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpIHtcbiAgICBpZiAoIWtpbmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dFRyYWNrIGtpbmQgaXMgcmVxdWlyZWQgYnV0IHdhcyBub3QgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlVHJhY2tIZWxwZXIodGhpcywga2luZCwgbGFiZWwsIGxhbmd1YWdlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGVtdWxhdGVkIFRleHRUcmFjayBmb3IgdXNlIGJ5IGFkZFJlbW90ZVRleHRUcmFja1xuICAgKlxuICAgKiBUaGlzIGlzIGludGVuZGVkIHRvIGJlIG92ZXJyaWRkZW4gYnkgY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbVxuICAgKiBUZWNoIGluIG9yZGVyIHRvIGNyZWF0ZSBuYXRpdmUgb3IgY3VzdG9tIFRleHRUcmFja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIHRoZSBvcHRpb25zIHRvIGluaXRpYWxpemUgdGhlIFRleHRUcmFjayB3aXRoLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMua2luZF1cbiAgICogICAgICAgIGBUZXh0VHJhY2tgIGtpbmQgKHN1YnRpdGxlcywgY2FwdGlvbnMsIGRlc2NyaXB0aW9ucywgY2hhcHRlcnMsIG9yIG1ldGFkYXRhKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhYmVsXS5cbiAgICogICAgICAgIExhYmVsIHRvIGlkZW50aWZ5IHRoZSB0ZXh0IHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYW5ndWFnZV1cbiAgICogICAgICAgIFR3byBsZXR0ZXIgbGFuZ3VhZ2UgYWJicmV2aWF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtIVE1MVHJhY2tFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSB0cmFjayBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVSZW1vdGVUZXh0VHJhY2sgPSBmdW5jdGlvbiBjcmVhdGVSZW1vdGVUZXh0VHJhY2sob3B0aW9ucykge1xuICAgIHZhciB0cmFjayA9IG1lcmdlT3B0aW9ucyhvcHRpb25zLCB7XG4gICAgICB0ZWNoOiB0aGlzXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBSRU1PVEUucmVtb3RlVGV4dEVsLlRyYWNrQ2xhc3ModHJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcmVtb3RlIHRleHQgdHJhY2sgb2JqZWN0IGFuZCByZXR1cm5zIGFuIGh0bWwgdHJhY2sgZWxlbWVudC5cbiAgICpcbiAgICogPiBOb3RlOiBUaGlzIGNhbiBiZSBhbiBlbXVsYXRlZCB7QGxpbmsgSFRNTFRyYWNrRWxlbWVudH0gb3IgYSBuYXRpdmUgb25lLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgU2VlIHtAbGluayBUZWNoI2NyZWF0ZVJlbW90ZVRleHRUcmFja30gZm9yIG1vcmUgZGV0YWlsZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbbWFudWFsQ2xlYW51cD10cnVlXVxuICAgKiAgICAgICAgLSBXaGVuIGZhbHNlOiB0aGUgVGV4dFRyYWNrIHdpbGwgYmUgYXV0b21hdGljYWxseSByZW1vdmVkIGZyb20gdGhlIHZpZGVvXG4gICAqICAgICAgICAgIGVsZW1lbnQgd2hlbmV2ZXIgdGhlIHNvdXJjZSBjaGFuZ2VzXG4gICAqICAgICAgICAtIFdoZW4gVHJ1ZTogVGhlIFRleHRUcmFjayB3aWxsIGhhdmUgdG8gYmUgY2xlYW5lZCB1cCBtYW51YWxseVxuICAgKlxuICAgKiBAcmV0dXJuIHtIVE1MVHJhY2tFbGVtZW50fVxuICAgKiAgICAgICAgIEFuIEh0bWwgVHJhY2sgRWxlbWVudC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIGRlZmF1bHQgZnVuY3Rpb25hbGl0eSBmb3IgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGVxdWl2YWxlbnRcbiAgICogICAgICAgICAgICAgdG8gXCJtYW51YWxDbGVhbnVwPWZhbHNlXCIgaW4gdGhlIGZ1dHVyZS4gVGhlIG1hbnVhbENsZWFudXAgcGFyYW1ldGVyIHdpbGxcbiAgICogICAgICAgICAgICAgYWxzbyBiZSByZW1vdmVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSZW1vdGVUZXh0VHJhY2sgPSBmdW5jdGlvbiBhZGRSZW1vdGVUZXh0VHJhY2sob3B0aW9ucywgbWFudWFsQ2xlYW51cCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBodG1sVHJhY2tFbGVtZW50ID0gdGhpcy5jcmVhdGVSZW1vdGVUZXh0VHJhY2sob3B0aW9ucyk7XG5cbiAgICBpZiAobWFudWFsQ2xlYW51cCAhPT0gdHJ1ZSAmJiBtYW51YWxDbGVhbnVwICE9PSBmYWxzZSkge1xuICAgICAgLy8gZGVwcmVjYXRpb24gd2FybmluZ1xuICAgICAgbG9nLndhcm4oJ0NhbGxpbmcgYWRkUmVtb3RlVGV4dFRyYWNrIHdpdGhvdXQgZXhwbGljaXRseSBzZXR0aW5nIHRoZSBcIm1hbnVhbENsZWFudXBcIiBwYXJhbWV0ZXIgdG8gYHRydWVgIGlzIGRlcHJlY2F0ZWQgYW5kIGRlZmF1bHQgdG8gYGZhbHNlYCBpbiBmdXR1cmUgdmVyc2lvbiBvZiB2aWRlby5qcycpO1xuICAgICAgbWFudWFsQ2xlYW51cCA9IHRydWU7XG4gICAgfSAvLyBzdG9yZSBIVE1MVHJhY2tFbGVtZW50IGFuZCBUZXh0VHJhY2sgdG8gcmVtb3RlIGxpc3RcblxuXG4gICAgdGhpcy5yZW1vdGVUZXh0VHJhY2tFbHMoKS5hZGRUcmFja0VsZW1lbnRfKGh0bWxUcmFja0VsZW1lbnQpO1xuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrcygpLmFkZFRyYWNrKGh0bWxUcmFja0VsZW1lbnQudHJhY2spO1xuXG4gICAgaWYgKG1hbnVhbENsZWFudXAgIT09IHRydWUpIHtcbiAgICAgIC8vIGNyZWF0ZSB0aGUgVGV4dFRyYWNrTGlzdCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICB0aGlzLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNy5hdXRvUmVtb3RlVGV4dFRyYWNrc18uYWRkVHJhY2soaHRtbFRyYWNrRWxlbWVudC50cmFjayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHRtbFRyYWNrRWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgcmVtb3RlIHRleHQgdHJhY2sgZnJvbSB0aGUgcmVtb3RlIGBUZXh0VHJhY2tMaXN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t9IHRyYWNrXG4gICAqICAgICAgICBgVGV4dFRyYWNrYCB0byByZW1vdmUgZnJvbSB0aGUgYFRleHRUcmFja0xpc3RgXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVJlbW90ZVRleHRUcmFjayA9IGZ1bmN0aW9uIHJlbW92ZVJlbW90ZVRleHRUcmFjayh0cmFjaykge1xuICAgIHZhciB0cmFja0VsZW1lbnQgPSB0aGlzLnJlbW90ZVRleHRUcmFja0VscygpLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfKHRyYWNrKTsgLy8gcmVtb3ZlIEhUTUxUcmFja0VsZW1lbnQgYW5kIFRleHRUcmFjayBmcm9tIHJlbW90ZSBsaXN0XG5cbiAgICB0aGlzLnJlbW90ZVRleHRUcmFja0VscygpLnJlbW92ZVRyYWNrRWxlbWVudF8odHJhY2tFbGVtZW50KTtcbiAgICB0aGlzLnJlbW90ZVRleHRUcmFja3MoKS5yZW1vdmVUcmFjayh0cmFjayk7XG4gICAgdGhpcy5hdXRvUmVtb3RlVGV4dFRyYWNrc18ucmVtb3ZlVHJhY2sodHJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGF2YWlsYWJsZSBtZWRpYSBwbGF5YmFjayBxdWFsaXR5IG1ldHJpY3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBXM0MncyBNZWRpYVxuICAgKiBQbGF5YmFjayBRdWFsaXR5IEFQSS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9tZWRpYS1wbGF5YmFjay1xdWFsaXR5fVxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqICAgICAgICAgQW4gb2JqZWN0IHdpdGggc3VwcG9ydGVkIG1lZGlhIHBsYXliYWNrIHF1YWxpdHkgbWV0cmljc1xuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkgPSBmdW5jdGlvbiBnZXRWaWRlb1BsYXliYWNrUXVhbGl0eSgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gY3JlYXRlIGEgZmxvYXRpbmcgdmlkZW8gd2luZG93IGFsd2F5cyBvbiB0b3Agb2Ygb3RoZXIgd2luZG93c1xuICAgKiBzbyB0aGF0IHVzZXJzIG1heSBjb250aW51ZSBjb25zdW1pbmcgbWVkaWEgd2hpbGUgdGhleSBpbnRlcmFjdCB3aXRoIG90aGVyXG4gICAqIGNvbnRlbnQgc2l0ZXMsIG9yIGFwcGxpY2F0aW9ucyBvbiB0aGVpciBkZXZpY2UuXG4gICAqXG4gICAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd2ljZy5naXRodWIuaW8vcGljdHVyZS1pbi1waWN0dXJlfVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfHVuZGVmaW5lZH1cbiAgICogICAgICAgICBBIHByb21pc2Ugd2l0aCBhIFBpY3R1cmUtaW4tUGljdHVyZSB3aW5kb3cgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHNcbiAgICogICAgICAgICBQcm9taXNlcyAob3Igb25lIHdhcyBwYXNzZWQgaW4gYXMgYW4gb3B0aW9uKS4gSXQgcmV0dXJucyB1bmRlZmluZWRcbiAgICogICAgICAgICBvdGhlcndpc2UuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSA9IGZ1bmN0aW9uIHJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlKCkge1xuICAgIHZhciBQcm9taXNlQ2xhc3MgPSB0aGlzLm9wdGlvbnNfLlByb21pc2UgfHwgd2luZG93JDEuUHJvbWlzZTtcblxuICAgIGlmIChQcm9taXNlQ2xhc3MpIHtcbiAgICAgIHJldHVybiBQcm9taXNlQ2xhc3MucmVqZWN0KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0byBzZXQgYSBwb3N0ZXIgZnJvbSBhIGBUZWNoYC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldFBvc3RlciA9IGZ1bmN0aW9uIHNldFBvc3RlcigpIHt9XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0byBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIHRoZSAncGxheXNpbmxpbmUnIDx2aWRlbz4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheXNpbmxpbmUgPSBmdW5jdGlvbiBwbGF5c2lubGluZSgpIHt9XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0byBzZXQgb3IgdW5zZXQgdGhlICdwbGF5c2lubGluZScgPHZpZGVvPiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRQbGF5c2lubGluZSA9IGZ1bmN0aW9uIHNldFBsYXlzaW5saW5lKCkge31cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gZm9yY2Ugb3ZlcnJpZGUgb2YgbmF0aXZlIGF1ZGlvIHRyYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvdmVycmlkZSAtIElmIHNldCB0byB0cnVlIG5hdGl2ZSBhdWRpbyB3aWxsIGJlIG92ZXJyaWRkZW4sXG4gICAqIG90aGVyd2lzZSBuYXRpdmUgYXVkaW8gd2lsbCBwb3RlbnRpYWxseSBiZSB1c2VkLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcyA9IGZ1bmN0aW9uIG92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3MoKSB7fVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBmb3JjZSBvdmVycmlkZSBvZiBuYXRpdmUgdmlkZW8gdHJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIC0gSWYgc2V0IHRvIHRydWUgbmF0aXZlIHZpZGVvIHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICogb3RoZXJ3aXNlIG5hdGl2ZSB2aWRlbyB3aWxsIHBvdGVudGlhbGx5IGJlIHVzZWQuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzID0gZnVuY3Rpb24gb3ZlcnJpZGVOYXRpdmVWaWRlb1RyYWNrcygpIHt9XG4gIC8qXG4gICAqIENoZWNrIGlmIHRoZSB0ZWNoIGNhbiBzdXBwb3J0IHRoZSBnaXZlbiBtaW1lLXR5cGUuXG4gICAqXG4gICAqIFRoZSBiYXNlIHRlY2ggZG9lcyBub3Qgc3VwcG9ydCBhbnkgdHlwZSwgYnV0IHNvdXJjZSBoYW5kbGVycyBtaWdodFxuICAgKiBvdmVyd3JpdGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICAgVGhlIG1pbWV0eXBlIHRvIGNoZWNrIGZvciBzdXBwb3J0XG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciBlbXB0eSBzdHJpbmdcbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvY2FuUGxheVR5cGV9XG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uIGNhblBsYXlUeXBlKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHR5cGUgaXMgc3VwcG9ydGVkIGJ5IHRoaXMgdGVjaC5cbiAgICpcbiAgICogVGhlIGJhc2UgdGVjaCBkb2VzIG5vdCBzdXBwb3J0IGFueSB0eXBlLCBidXQgc291cmNlIGhhbmRsZXJzIG1pZ2h0XG4gICAqIG92ZXJ3cml0ZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgVGhlIG1lZGlhIHR5cGUgdG8gY2hlY2tcbiAgICogQHJldHVybiB7c3RyaW5nfSBSZXR1cm5zIHRoZSBuYXRpdmUgdmlkZW8gZWxlbWVudCdzIHJlc3BvbnNlXG4gICAqL1xuICA7XG5cbiAgVGVjaC5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uIGNhblBsYXlUeXBlKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHRlY2ggY2FuIHN1cHBvcnQgdGhlIGdpdmVuIHNvdXJjZVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3JjT2JqXG4gICAqICAgICAgICBUaGUgc291cmNlIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB0ZWNoXG4gICAqIEByZXR1cm4ge3N0cmluZ30gJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZylcbiAgICovXG4gIDtcblxuICBUZWNoLmNhblBsYXlTb3VyY2UgPSBmdW5jdGlvbiBjYW5QbGF5U291cmNlKHNyY09iaiwgb3B0aW9ucykge1xuICAgIHJldHVybiBUZWNoLmNhblBsYXlUeXBlKHNyY09iai50eXBlKTtcbiAgfVxuICAvKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYSBUZWNoIG9yIG5vdC5cbiAgICogQ2FuIGJlIHBhc3NlZCBlaXRoZXIgYSBDbGFzcyBsaWtlIGBIdG1sNWAgb3IgYSBpbnN0YW5jZSBsaWtlIGBwbGF5ZXIudGVjaF9gXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb21wb25lbnRcbiAgICogICAgICAgIFRoZSBpdGVtIHRvIGNoZWNrXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgV2hldGhlciBpdCBpcyBhIHRlY2ggb3Igbm90XG4gICAqICAgICAgICAgLSBUcnVlIGlmIGl0IGlzIGEgdGVjaFxuICAgKiAgICAgICAgIC0gRmFsc2UgaWYgaXQgaXMgbm90XG4gICAqL1xuICA7XG5cbiAgVGVjaC5pc1RlY2ggPSBmdW5jdGlvbiBpc1RlY2goY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudC5wcm90b3R5cGUgaW5zdGFuY2VvZiBUZWNoIHx8IGNvbXBvbmVudCBpbnN0YW5jZW9mIFRlY2ggfHwgY29tcG9uZW50ID09PSBUZWNoO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBgVGVjaGAgaW50byBhIHNoYXJlZCBsaXN0IGZvciB2aWRlb2pzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgTmFtZSBvZiB0aGUgYFRlY2hgIHRvIHJlZ2lzdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGVjaFxuICAgKiAgICAgICAgVGhlIGBUZWNoYCBjbGFzcyB0byByZWdpc3Rlci5cbiAgICovXG4gIDtcblxuICBUZWNoLnJlZ2lzdGVyVGVjaCA9IGZ1bmN0aW9uIHJlZ2lzdGVyVGVjaChuYW1lLCB0ZWNoKSB7XG4gICAgaWYgKCFUZWNoLnRlY2hzXykge1xuICAgICAgVGVjaC50ZWNoc18gPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIVRlY2guaXNUZWNoKHRlY2gpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZWNoIFwiICsgbmFtZSArIFwiIG11c3QgYmUgYSBUZWNoXCIpO1xuICAgIH1cblxuICAgIGlmICghVGVjaC5jYW5QbGF5VHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZWNocyBtdXN0IGhhdmUgYSBzdGF0aWMgY2FuUGxheVR5cGUgbWV0aG9kIG9uIHRoZW0nKTtcbiAgICB9XG5cbiAgICBpZiAoIVRlY2guY2FuUGxheVNvdXJjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZWNocyBtdXN0IGhhdmUgYSBzdGF0aWMgY2FuUGxheVNvdXJjZSBtZXRob2Qgb24gdGhlbScpO1xuICAgIH1cblxuICAgIG5hbWUgPSB0b1RpdGxlQ2FzZShuYW1lKTtcbiAgICBUZWNoLnRlY2hzX1tuYW1lXSA9IHRlY2g7XG4gICAgVGVjaC50ZWNoc19bdG9Mb3dlckNhc2UobmFtZSldID0gdGVjaDtcblxuICAgIGlmIChuYW1lICE9PSAnVGVjaCcpIHtcbiAgICAgIC8vIGNhbWVsIGNhc2UgdGhlIHRlY2hOYW1lIGZvciB1c2UgaW4gdGVjaE9yZGVyXG4gICAgICBUZWNoLmRlZmF1bHRUZWNoT3JkZXJfLnB1c2gobmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRlY2g7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIGBUZWNoYCBmcm9tIHRoZSBzaGFyZWQgbGlzdCBieSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgYGNhbWVsQ2FzZWAgb3IgYFRpdGxlQ2FzZWAgbmFtZSBvZiB0aGUgVGVjaCB0byBnZXRcbiAgICpcbiAgICogQHJldHVybiB7VGVjaHx1bmRlZmluZWR9XG4gICAqICAgICAgICAgVGhlIGBUZWNoYCBvciB1bmRlZmluZWQgaWYgdGhlcmUgd2FzIG5vIHRlY2ggd2l0aCB0aGUgbmFtZSByZXF1ZXN0ZWQuXG4gICAqL1xuICA7XG5cbiAgVGVjaC5nZXRUZWNoID0gZnVuY3Rpb24gZ2V0VGVjaChuYW1lKSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFRlY2gudGVjaHNfICYmIFRlY2gudGVjaHNfW25hbWVdKSB7XG4gICAgICByZXR1cm4gVGVjaC50ZWNoc19bbmFtZV07XG4gICAgfVxuXG4gICAgbmFtZSA9IHRvVGl0bGVDYXNlKG5hbWUpO1xuXG4gICAgaWYgKHdpbmRvdyQxICYmIHdpbmRvdyQxLnZpZGVvanMgJiYgd2luZG93JDEudmlkZW9qc1tuYW1lXSkge1xuICAgICAgbG9nLndhcm4oXCJUaGUgXCIgKyBuYW1lICsgXCIgdGVjaCB3YXMgYWRkZWQgdG8gdGhlIHZpZGVvanMgb2JqZWN0IHdoZW4gaXQgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdXNpbmcgdmlkZW9qcy5yZWdpc3RlclRlY2gobmFtZSwgdGVjaClcIik7XG4gICAgICByZXR1cm4gd2luZG93JDEudmlkZW9qc1tuYW1lXTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRlY2g7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIEdldCB0aGUge0BsaW5rIFZpZGVvVHJhY2tMaXN0fVxuICpcbiAqIEByZXR1cm5zIHtWaWRlb1RyYWNrTGlzdH1cbiAqIEBtZXRob2QgVGVjaC5wcm90b3R5cGUudmlkZW9UcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fVxuICpcbiAqIEByZXR1cm5zIHtBdWRpb1RyYWNrTGlzdH1cbiAqIEBtZXRob2QgVGVjaC5wcm90b3R5cGUuYXVkaW9UcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gKlxuICogQHJldHVybnMge1RleHRUcmFja0xpc3R9XG4gKiBAbWV0aG9kIFRlY2gucHJvdG90eXBlLnRleHRUcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcmVtb3RlIGVsZW1lbnQge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gKlxuICogQHJldHVybnMge1RleHRUcmFja0xpc3R9XG4gKiBAbWV0aG9kIFRlY2gucHJvdG90eXBlLnJlbW90ZVRleHRUcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcmVtb3RlIGVsZW1lbnQge0BsaW5rIEh0bWxUcmFja0VsZW1lbnRMaXN0fVxuICpcbiAqIEByZXR1cm5zIHtIdG1sVHJhY2tFbGVtZW50TGlzdH1cbiAqIEBtZXRob2QgVGVjaC5wcm90b3R5cGUucmVtb3RlVGV4dFRyYWNrRWxzXG4gKi9cblxuXG5BTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG5cbiAgVGVjaC5wcm90b3R5cGVbcHJvcHMuZ2V0dGVyTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1twcm9wcy5wcml2YXRlTmFtZV0gPSB0aGlzW3Byb3BzLnByaXZhdGVOYW1lXSB8fCBuZXcgcHJvcHMuTGlzdENsYXNzKCk7XG4gICAgcmV0dXJuIHRoaXNbcHJvcHMucHJpdmF0ZU5hbWVdO1xuICB9O1xufSk7XG4vKipcbiAqIExpc3Qgb2YgYXNzb2NpYXRlZCB0ZXh0IHRyYWNrc1xuICpcbiAqIEB0eXBlIHtUZXh0VHJhY2tMaXN0fVxuICogQHByaXZhdGVcbiAqIEBwcm9wZXJ0eSBUZWNoI3RleHRUcmFja3NfXG4gKi9cblxuLyoqXG4gKiBMaXN0IG9mIGFzc29jaWF0ZWQgYXVkaW8gdHJhY2tzLlxuICpcbiAqIEB0eXBlIHtBdWRpb1RyYWNrTGlzdH1cbiAqIEBwcml2YXRlXG4gKiBAcHJvcGVydHkgVGVjaCNhdWRpb1RyYWNrc19cbiAqL1xuXG4vKipcbiAqIExpc3Qgb2YgYXNzb2NpYXRlZCB2aWRlbyB0cmFja3MuXG4gKlxuICogQHR5cGUge1ZpZGVvVHJhY2tMaXN0fVxuICogQHByaXZhdGVcbiAqIEBwcm9wZXJ0eSBUZWNoI3ZpZGVvVHJhY2tzX1xuICovXG5cbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyB2b2x1bWUgY29udHJvbC5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNWb2x1bWVDb250cm9sID0gdHJ1ZTtcbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyBtdXRpbmcgdm9sdW1lLlxuICpcbiAqIEB0eXBlIHtib2xlYW59XG4gKiBAZGVmYXVsdFxuICovXG5cblRlY2gucHJvdG90eXBlLmZlYXR1cmVzTXV0ZUNvbnRyb2wgPSB0cnVlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIGZ1bGxzY3JlZW4gcmVzaXplIGNvbnRyb2wuXG4gKiBSZXNpemluZyBwbHVnaW5zIHVzaW5nIHJlcXVlc3QgZnVsbHNjcmVlbiByZWxvYWRzIHRoZSBwbHVnaW5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNGdWxsc2NyZWVuUmVzaXplID0gZmFsc2U7XG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgVGVjaGAgc3VwcG9ydHMgY2hhbmdpbmcgdGhlIHNwZWVkIGF0IHdoaWNoIHRoZSB2aWRlb1xuICogcGxheXMuIEV4YW1wbGVzOlxuICogICAtIFNldCBwbGF5ZXIgdG8gcGxheSAyeCAodHdpY2UpIGFzIGZhc3RcbiAqICAgLSBTZXQgcGxheWVyIHRvIHBsYXkgMC41eCAoaGFsZikgYXMgZmFzdFxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc1BsYXliYWNrUmF0ZSA9IGZhbHNlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHRoZSBgcHJvZ3Jlc3NgIGV2ZW50LiBUaGlzIGlzIGN1cnJlbnRseVxuICogbm90IHRyaWdnZXJlZCBieSB2aWRlby1qcy1zd2YuIFRoaXMgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBpZlxuICoge0BsaW5rIFRlY2gjbWFudWFsUHJvZ3Jlc3NPbn0gc2hvdWxkIGJlIGNhbGxlZC5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNQcm9ncmVzc0V2ZW50cyA9IGZhbHNlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHRoZSBgc291cmNlc2V0YCBldmVudC5cbiAqXG4gKiBBIHRlY2ggc2hvdWxkIHNldCB0aGlzIHRvIGB0cnVlYCBhbmQgdGhlbiB1c2Uge0BsaW5rIFRlY2gjdHJpZ2dlclNvdXJjZXNldH1cbiAqIHRvIHRyaWdnZXIgYSB7QGxpbmsgVGVjaCNldmVudDpzb3VyY2VzZXR9IGF0IHRoZSBlYXJsaWVzdCB0aW1lIGFmdGVyIGdldHRpbmdcbiAqIGEgbmV3IHNvdXJjZS5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNTb3VyY2VzZXQgPSBmYWxzZTtcbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyB0aGUgYHRpbWV1cGRhdGVgIGV2ZW50LiBUaGlzIGlzIGN1cnJlbnRseVxuICogbm90IHRyaWdnZXJlZCBieSB2aWRlby1qcy1zd2YuIFRoaXMgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBpZlxuICoge0BsaW5rIFRlY2gjbWFudWFsVGltZVVwZGF0ZXN9IHNob3VsZCBiZSBjYWxsZWQuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdFxuICovXG5cblRlY2gucHJvdG90eXBlLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50cyA9IGZhbHNlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHRoZSBuYXRpdmUgYFRleHRUcmFja2BzLlxuICogVGhpcyB3aWxsIGhlbHAgdXMgaW50ZWdyYXRlIHdpdGggbmF0aXZlIGBUZXh0VHJhY2tgcyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGVtLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MgPSBmYWxzZTtcbi8qKlxuICogQSBmdW5jdGlvbmFsIG1peGluIGZvciB0ZWNocyB0aGF0IHdhbnQgdG8gdXNlIHRoZSBTb3VyY2UgSGFuZGxlciBwYXR0ZXJuLlxuICogU291cmNlIGhhbmRsZXJzIGFyZSBzY3JpcHRzIGZvciBoYW5kbGluZyBzcGVjaWZpYyBmb3JtYXRzLlxuICogVGhlIHNvdXJjZSBoYW5kbGVyIHBhdHRlcm4gaXMgdXNlZCBmb3IgYWRhcHRpdmUgZm9ybWF0cyAoSExTLCBEQVNIKSB0aGF0XG4gKiBtYW51YWxseSBsb2FkIHZpZGVvIGRhdGEgYW5kIGZlZWQgaXQgaW50byBhIFNvdXJjZSBCdWZmZXIgKE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zKVxuICogRXhhbXBsZTogYFRlY2gud2l0aFNvdXJjZUhhbmRsZXJzLmNhbGwoTXlUZWNoKTtgXG4gKlxuICogQHBhcmFtIHtUZWNofSBfVGVjaFxuICogICAgICAgIFRoZSB0ZWNoIHRvIGFkZCBzb3VyY2UgaGFuZGxlciBmdW5jdGlvbnMgdG8uXG4gKlxuICogQG1peGVzIFRlY2h+U291cmNlSGFuZGxlckFkZGl0aW9uc1xuICovXG5cblRlY2gud2l0aFNvdXJjZUhhbmRsZXJzID0gZnVuY3Rpb24gKF9UZWNoKSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHNvdXJjZSBoYW5kbGVyXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICogICAgICAgIFRoZSBzb3VyY2UgaGFuZGxlciBjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4XVxuICAgKiAgICAgICAgUmVnaXN0ZXIgaXQgYXQgdGhlIGZvbGxvd2luZyBpbmRleFxuICAgKi9cbiAgX1RlY2gucmVnaXN0ZXJTb3VyY2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIGluZGV4KSB7XG4gICAgdmFyIGhhbmRsZXJzID0gX1RlY2guc291cmNlSGFuZGxlcnM7XG5cbiAgICBpZiAoIWhhbmRsZXJzKSB7XG4gICAgICBoYW5kbGVycyA9IF9UZWNoLnNvdXJjZUhhbmRsZXJzID0gW107XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFkZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICBpbmRleCA9IGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIDAsIGhhbmRsZXIpO1xuICB9O1xuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHRlY2ggY2FuIHN1cHBvcnQgdGhlIGdpdmVuIHR5cGUuIEFsc28gY2hlY2tzIHRoZVxuICAgKiBUZWNocyBzb3VyY2VIYW5kbGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogICAgICAgICBUaGUgbWltZXR5cGUgdG8gY2hlY2suXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICAgKi9cblxuXG4gIF9UZWNoLmNhblBsYXlUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaGFuZGxlcnMgPSBfVGVjaC5zb3VyY2VIYW5kbGVycyB8fCBbXTtcbiAgICB2YXIgY2FuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY2FuID0gaGFuZGxlcnNbaV0uY2FuUGxheVR5cGUodHlwZSk7XG5cbiAgICAgIGlmIChjYW4pIHtcbiAgICAgICAgcmV0dXJuIGNhbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH07XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBzb3VyY2UgaGFuZGxlciB0aGF0IHN1cHBvcnRzIHRoZSBzb3VyY2UuXG4gICAqXG4gICAqIFRPRE86IEFuc3dlciBxdWVzdGlvbjogc2hvdWxkICdwcm9iYWJseScgYmUgcHJpb3JpdGl6ZWQgb3ZlciAnbWF5YmUnXG4gICAqXG4gICAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNvdXJjZVxuICAgKiAgICAgICAgVGhlIHNvdXJjZSBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBvcHRpb25zIHBhc3NlZCB0byB0aGUgdGVjaFxuICAgKlxuICAgKiBAcmV0dXJuIHtTb3VyY2VIYW5kbGVyfG51bGx9XG4gICAqICAgICAgICAgIFRoZSBmaXJzdCBzb3VyY2UgaGFuZGxlciB0aGF0IHN1cHBvcnRzIHRoZSBzb3VyY2Ugb3IgbnVsbCBpZlxuICAgKiAgICAgICAgICBubyBTb3VyY2VIYW5kbGVyIHN1cHBvcnRzIHRoZSBzb3VyY2VcbiAgICovXG5cblxuICBfVGVjaC5zZWxlY3RTb3VyY2VIYW5kbGVyID0gZnVuY3Rpb24gKHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBoYW5kbGVycyA9IF9UZWNoLnNvdXJjZUhhbmRsZXJzIHx8IFtdO1xuICAgIHZhciBjYW47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjYW4gPSBoYW5kbGVyc1tpXS5jYW5IYW5kbGVTb3VyY2Uoc291cmNlLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGNhbikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcnNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdGVjaCBjYW4gc3VwcG9ydCB0aGUgZ2l2ZW4gc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzcmNPYmpcbiAgICogICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICBUaGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIHRlY2hcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gICAqL1xuXG5cbiAgX1RlY2guY2FuUGxheVNvdXJjZSA9IGZ1bmN0aW9uIChzcmNPYmosIG9wdGlvbnMpIHtcbiAgICB2YXIgc2ggPSBfVGVjaC5zZWxlY3RTb3VyY2VIYW5kbGVyKHNyY09iaiwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2gpIHtcbiAgICAgIHJldHVybiBzaC5jYW5IYW5kbGVTb3VyY2Uoc3JjT2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH07XG4gIC8qKlxuICAgKiBXaGVuIHVzaW5nIGEgc291cmNlIGhhbmRsZXIsIHByZWZlciBpdHMgaW1wbGVtZW50YXRpb24gb2ZcbiAgICogYW55IGZ1bmN0aW9uIG5vcm1hbGx5IHByb3ZpZGVkIGJ5IHRoZSB0ZWNoLlxuICAgKi9cblxuXG4gIHZhciBkZWZlcnJhYmxlID0gWydzZWVrYWJsZScsICdzZWVraW5nJywgJ2R1cmF0aW9uJ107XG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgYXJvdW5kIHtAbGluayBUZWNoI3NlZWthYmxlfSB0aGF0IHdpbGwgY2FsbCBhIGBTb3VyY2VIYW5kbGVyYHMgc2Vla2FibGVcbiAgICogZnVuY3Rpb24gaWYgaXQgZXhpc3RzLCB3aXRoIGEgZmFsbGJhY2sgdG8gdGhlIFRlY2hzIHNlZWthYmxlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAbWV0aG9kIF9UZWNoLnNlZWthYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgYXJvdW5kIHtAbGluayBUZWNoI2R1cmF0aW9ufSB0aGF0IHdpbGwgY2FsbCBhIGBTb3VyY2VIYW5kbGVyYHMgZHVyYXRpb25cbiAgICogZnVuY3Rpb24gaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgaXQgd2lsbCBmYWxsYmFjayB0byB0aGUgdGVjaHMgZHVyYXRpb24gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBtZXRob2QgX1RlY2guZHVyYXRpb25cbiAgICovXG5cbiAgZGVmZXJyYWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChmbk5hbWUpIHtcbiAgICB2YXIgb3JpZ2luYWxGbiA9IHRoaXNbZm5OYW1lXTtcblxuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXNbZm5OYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZUhhbmRsZXJfICYmIHRoaXMuc291cmNlSGFuZGxlcl9bZm5OYW1lXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VIYW5kbGVyX1tmbk5hbWVdLmFwcGx5KHRoaXMuc291cmNlSGFuZGxlcl8sIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmlnaW5hbEZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSwgX1RlY2gucHJvdG90eXBlKTtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZ1bmN0aW9uIGZvciBzZXR0aW5nIHRoZSBzb3VyY2UgdXNpbmcgYSBzb3VyY2Ugb2JqZWN0XG4gICAqIGFuZCBzb3VyY2UgaGFuZGxlcnMuXG4gICAqIFNob3VsZCBuZXZlciBiZSBjYWxsZWQgdW5sZXNzIGEgc291cmNlIGhhbmRsZXIgd2FzIGZvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzb3VyY2VcbiAgICogICAgICAgIEEgc291cmNlIG9iamVjdCB3aXRoIHNyYyBhbmQgdHlwZSBrZXlzXG4gICAqL1xuXG4gIF9UZWNoLnByb3RvdHlwZS5zZXRTb3VyY2UgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgdmFyIHNoID0gX1RlY2guc2VsZWN0U291cmNlSGFuZGxlcihzb3VyY2UsIHRoaXMub3B0aW9uc18pO1xuXG4gICAgaWYgKCFzaCkge1xuICAgICAgLy8gRmFsbCBiYWNrIHRvIGEgbmF0aXZlIHNvdXJjZSBoYW5kZXIgd2hlbiB1bnN1cHBvcnRlZCBzb3VyY2VzIGFyZVxuICAgICAgLy8gZGVsaWJlcmF0ZWx5IHNldFxuICAgICAgaWYgKF9UZWNoLm5hdGl2ZVNvdXJjZUhhbmRsZXIpIHtcbiAgICAgICAgc2ggPSBfVGVjaC5uYXRpdmVTb3VyY2VIYW5kbGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKCdObyBzb3VyY2UgaGFuZGxlciBmb3VuZCBmb3IgdGhlIGN1cnJlbnQgc291cmNlLicpO1xuICAgICAgfVxuICAgIH0gLy8gRGlzcG9zZSBhbnkgZXhpc3Rpbmcgc291cmNlIGhhbmRsZXJcblxuXG4gICAgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcigpO1xuICAgIHRoaXMub2ZmKCdkaXNwb3NlJywgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcik7XG5cbiAgICBpZiAoc2ggIT09IF9UZWNoLm5hdGl2ZVNvdXJjZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuY3VycmVudFNvdXJjZV8gPSBzb3VyY2U7XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VIYW5kbGVyXyA9IHNoLmhhbmRsZVNvdXJjZShzb3VyY2UsIHRoaXMsIHRoaXMub3B0aW9uc18pO1xuICAgIHRoaXMub25lKCdkaXNwb3NlJywgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcik7XG4gIH07XG4gIC8qKlxuICAgKiBDbGVhbiB1cCBhbnkgZXhpc3RpbmcgU291cmNlSGFuZGxlcnMgYW5kIGxpc3RlbmVycyB3aGVuIHRoZSBUZWNoIGlzIGRpc3Bvc2VkLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI2Rpc3Bvc2VcbiAgICovXG5cblxuICBfVGVjaC5wcm90b3R5cGUuZGlzcG9zZVNvdXJjZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIHNvdXJjZSBhbmQgZ2V0IGFub3RoZXIgb25lXG4gICAgLy8gdGhlbiB3ZSBhcmUgbG9hZGluZyBzb21ldGhpbmcgbmV3XG4gICAgLy8gdGhhbiBjbGVhciBhbGwgb2Ygb3VyIGN1cnJlbnQgdHJhY2tzXG4gICAgaWYgKHRoaXMuY3VycmVudFNvdXJjZV8pIHtcbiAgICAgIHRoaXMuY2xlYXJUcmFja3MoWydhdWRpbycsICd2aWRlbyddKTtcbiAgICAgIHRoaXMuY3VycmVudFNvdXJjZV8gPSBudWxsO1xuICAgIH0gLy8gYWx3YXlzIGNsZWFuIHVwIGF1dG8tdGV4dCB0cmFja3NcblxuXG4gICAgdGhpcy5jbGVhbnVwQXV0b1RleHRUcmFja3MoKTtcblxuICAgIGlmICh0aGlzLnNvdXJjZUhhbmRsZXJfKSB7XG4gICAgICBpZiAodGhpcy5zb3VyY2VIYW5kbGVyXy5kaXNwb3NlKSB7XG4gICAgICAgIHRoaXMuc291cmNlSGFuZGxlcl8uZGlzcG9zZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNvdXJjZUhhbmRsZXJfID0gbnVsbDtcbiAgICB9XG4gIH07XG59OyAvLyBUaGUgYmFzZSBUZWNoIGNsYXNzIG5lZWRzIHRvIGJlIHJlZ2lzdGVyZWQgYXMgYSBDb21wb25lbnQuIEl0IGlzIHRoZSBvbmx5XG4vLyBUZWNoIHRoYXQgY2FuIGJlIHJlZ2lzdGVyZWQgYXMgYSBDb21wb25lbnQuXG5cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUZWNoJywgVGVjaCk7XG5UZWNoLnJlZ2lzdGVyVGVjaCgnVGVjaCcsIFRlY2gpO1xuLyoqXG4gKiBBIGxpc3Qgb2YgdGVjaHMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGVjaE9yZGVyIG9uIFBsYXllcnNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cblRlY2guZGVmYXVsdFRlY2hPcmRlcl8gPSBbXTtcblxuLyoqXG4gKiBAZmlsZSBtaWRkbGV3YXJlLmpzXG4gKiBAbW9kdWxlIG1pZGRsZXdhcmVcbiAqL1xudmFyIG1pZGRsZXdhcmVzID0ge307XG52YXIgbWlkZGxld2FyZUluc3RhbmNlcyA9IHt9O1xudmFyIFRFUk1JTkFUT1IgPSB7fTtcbi8qKlxuICogQSBtaWRkbGV3YXJlIG9iamVjdCBpcyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IHRoYXQgaGFzIG1ldGhvZHMgdGhhdFxuICogbWF0Y2ggdGhlIHtAbGluayBUZWNofSBtZXRob2RzIGZvdW5kIGluIHRoZSBsaXN0cyBvZiBhbGxvd2VkXG4gKiB7QGxpbmsgbW9kdWxlOm1pZGRsZXdhcmUuYWxsb3dlZEdldHRlcnN8Z2V0dGVyc30sXG4gKiB7QGxpbmsgbW9kdWxlOm1pZGRsZXdhcmUuYWxsb3dlZFNldHRlcnN8c2V0dGVyc30sIGFuZFxuICoge0BsaW5rIG1vZHVsZTptaWRkbGV3YXJlLmFsbG93ZWRNZWRpYXRvcnN8bWVkaWF0b3JzfS5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNaWRkbGV3YXJlT2JqZWN0XG4gKi9cblxuLyoqXG4gKiBBIG1pZGRsZXdhcmUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHNob3VsZCByZXR1cm4gYVxuICoge0BsaW5rIG1vZHVsZTptaWRkbGV3YXJlfk1pZGRsZXdhcmVPYmplY3R8TWlkZGxld2FyZU9iamVjdH0uXG4gKlxuICogVGhpcyBmYWN0b3J5IHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoIHBsYXllciB3aGVuIG5lZWRlZCwgd2l0aCB0aGUgcGxheWVyXG4gKiBwYXNzZWQgaW4gYXMgYW4gYXJndW1lbnQuXG4gKlxuICogQGNhbGxiYWNrIE1pZGRsZXdhcmVGYWN0b3J5XG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgQSBWaWRlby5qcyBwbGF5ZXIuXG4gKi9cblxuLyoqXG4gKiBEZWZpbmUgYSBtaWRkbGV3YXJlIHRoYXQgdGhlIHBsYXllciBzaG91bGQgdXNlIGJ5IHdheSBvZiBhIGZhY3RvcnkgZnVuY3Rpb25cbiAqIHRoYXQgcmV0dXJucyBhIG1pZGRsZXdhcmUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZVxuICogICAgICAgICBUaGUgTUlNRSB0eXBlIHRvIG1hdGNoIG9yIGBcIipcImAgZm9yIGFsbCBNSU1FIHR5cGVzLlxuICpcbiAqIEBwYXJhbSAge01pZGRsZXdhcmVGYWN0b3J5fSBtaWRkbGV3YXJlXG4gKiAgICAgICAgIEEgbWlkZGxld2FyZSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBmb3JcbiAqICAgICAgICAgbWF0Y2hpbmcgdHlwZXMuXG4gKi9cblxuZnVuY3Rpb24gdXNlKHR5cGUsIG1pZGRsZXdhcmUpIHtcbiAgbWlkZGxld2FyZXNbdHlwZV0gPSBtaWRkbGV3YXJlc1t0eXBlXSB8fCBbXTtcbiAgbWlkZGxld2FyZXNbdHlwZV0ucHVzaChtaWRkbGV3YXJlKTtcbn1cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2V0cyBhIHNvdXJjZSB1c2luZyBtaWRkbGV3YXJlIGJ5IHJlY3Vyc2luZyB0aHJvdWdoIGFueVxuICogbWF0Y2hpbmcgbWlkZGxld2FyZXMgYW5kIGNhbGxpbmcgYHNldFNvdXJjZWAgb24gZWFjaCwgcGFzc2luZyBhbG9uZyB0aGVcbiAqIHByZXZpb3VzIHJldHVybmVkIHZhbHVlIGVhY2ggdGltZS5cbiAqXG4gKiBAcGFyYW0gIHtQbGF5ZXJ9IHBsYXllclxuICogICAgICAgICBBIHtAbGluayBQbGF5ZXJ9IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSAge1RlY2h+U291cmNlT2JqZWN0fSBzcmNcbiAqICAgICAgICAgQSBzb3VyY2Ugb2JqZWN0LlxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufVxuICogICAgICAgICBUaGUgbmV4dCBtaWRkbGV3YXJlIHRvIHJ1bi5cbiAqL1xuXG5mdW5jdGlvbiBzZXRTb3VyY2UocGxheWVyLCBzcmMsIG5leHQpIHtcbiAgcGxheWVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXRTb3VyY2VIZWxwZXIoc3JjLCBtaWRkbGV3YXJlc1tzcmMudHlwZV0sIG5leHQsIHBsYXllcik7XG4gIH0sIDEpO1xufVxuLyoqXG4gKiBXaGVuIHRoZSB0ZWNoIGlzIHNldCwgcGFzc2VzIHRoZSB0ZWNoIHRvIGVhY2ggbWlkZGxld2FyZSdzIGBzZXRUZWNoYCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtPYmplY3RbXX0gbWlkZGxld2FyZVxuICogICAgICAgIEFuIGFycmF5IG9mIG1pZGRsZXdhcmUgaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7VGVjaH0gdGVjaFxuICogICAgICAgIEEgVmlkZW8uanMgdGVjaC5cbiAqL1xuXG5mdW5jdGlvbiBzZXRUZWNoKG1pZGRsZXdhcmUsIHRlY2gpIHtcbiAgbWlkZGxld2FyZS5mb3JFYWNoKGZ1bmN0aW9uIChtdykge1xuICAgIHJldHVybiBtdy5zZXRUZWNoICYmIG13LnNldFRlY2godGVjaCk7XG4gIH0pO1xufVxuLyoqXG4gKiBDYWxscyBhIGdldHRlciBvbiB0aGUgdGVjaCBmaXJzdCwgdGhyb3VnaCBlYWNoIG1pZGRsZXdhcmVcbiAqIGZyb20gcmlnaHQgdG8gbGVmdCB0byB0aGUgcGxheWVyLlxuICpcbiAqIEBwYXJhbSAge09iamVjdFtdfSBtaWRkbGV3YXJlXG4gKiAgICAgICAgIEFuIGFycmF5IG9mIG1pZGRsZXdhcmUgaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSAge1RlY2h9IHRlY2hcbiAqICAgICAgICAgVGhlIGN1cnJlbnQgdGVjaC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IG1ldGhvZFxuICogICAgICAgICBBIG1ldGhvZCBuYW1lLlxuICpcbiAqIEByZXR1cm4ge01peGVkfVxuICogICAgICAgICBUaGUgZmluYWwgdmFsdWUgZnJvbSB0aGUgdGVjaCBhZnRlciBtaWRkbGV3YXJlIGhhcyBpbnRlcmNlcHRlZCBpdC5cbiAqL1xuXG5mdW5jdGlvbiBnZXQobWlkZGxld2FyZSwgdGVjaCwgbWV0aG9kKSB7XG4gIHJldHVybiBtaWRkbGV3YXJlLnJlZHVjZVJpZ2h0KG1pZGRsZXdhcmVJdGVyYXRvcihtZXRob2QpLCB0ZWNoW21ldGhvZF0oKSk7XG59XG4vKipcbiAqIFRha2VzIHRoZSBhcmd1bWVudCBnaXZlbiB0byB0aGUgcGxheWVyIGFuZCBjYWxscyB0aGUgc2V0dGVyIG1ldGhvZCBvbiBlYWNoXG4gKiBtaWRkbGV3YXJlIGZyb20gbGVmdCB0byByaWdodCB0byB0aGUgdGVjaC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gbWlkZGxld2FyZVxuICogICAgICAgICBBbiBhcnJheSBvZiBtaWRkbGV3YXJlIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0gIHtUZWNofSB0ZWNoXG4gKiAgICAgICAgIFRoZSBjdXJyZW50IHRlY2guXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBtZXRob2RcbiAqICAgICAgICAgQSBtZXRob2QgbmFtZS5cbiAqXG4gKiBAcGFyYW0gIHtNaXhlZH0gYXJnXG4gKiAgICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgb24gdGhlIHRlY2guXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBtZXRob2RgIG9mIHRoZSBgdGVjaGAuXG4gKi9cblxuZnVuY3Rpb24gc2V0KG1pZGRsZXdhcmUsIHRlY2gsIG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiB0ZWNoW21ldGhvZF0obWlkZGxld2FyZS5yZWR1Y2UobWlkZGxld2FyZUl0ZXJhdG9yKG1ldGhvZCksIGFyZykpO1xufVxuLyoqXG4gKiBUYWtlcyB0aGUgYXJndW1lbnQgZ2l2ZW4gdG8gdGhlIHBsYXllciBhbmQgY2FsbHMgdGhlIGBjYWxsYCB2ZXJzaW9uIG9mIHRoZVxuICogbWV0aG9kIG9uIGVhY2ggbWlkZGxld2FyZSBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gKlxuICogVGhlbiwgY2FsbCB0aGUgcGFzc2VkIGluIG1ldGhvZCBvbiB0aGUgdGVjaCBhbmQgcmV0dXJuIHRoZSByZXN1bHQgdW5jaGFuZ2VkXG4gKiBiYWNrIHRvIHRoZSBwbGF5ZXIsIHRocm91Z2ggbWlkZGxld2FyZSwgdGhpcyB0aW1lIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gbWlkZGxld2FyZVxuICogICAgICAgICBBbiBhcnJheSBvZiBtaWRkbGV3YXJlIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0gIHtUZWNofSB0ZWNoXG4gKiAgICAgICAgIFRoZSBjdXJyZW50IHRlY2guXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBtZXRob2RcbiAqICAgICAgICAgQSBtZXRob2QgbmFtZS5cbiAqXG4gKiBAcGFyYW0gIHtNaXhlZH0gYXJnXG4gKiAgICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgb24gdGhlIHRlY2guXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBtZXRob2RgIG9mIHRoZSBgdGVjaGAsIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gKiAgICAgICAgIHJldHVybiB2YWx1ZXMgb2YgbWlkZGxld2FyZXMuXG4gKi9cblxuZnVuY3Rpb24gbWVkaWF0ZShtaWRkbGV3YXJlLCB0ZWNoLCBtZXRob2QsIGFyZykge1xuICBpZiAoYXJnID09PSB2b2lkIDApIHtcbiAgICBhcmcgPSBudWxsO1xuICB9XG5cbiAgdmFyIGNhbGxNZXRob2QgPSAnY2FsbCcgKyB0b1RpdGxlQ2FzZShtZXRob2QpO1xuICB2YXIgbWlkZGxld2FyZVZhbHVlID0gbWlkZGxld2FyZS5yZWR1Y2UobWlkZGxld2FyZUl0ZXJhdG9yKGNhbGxNZXRob2QpLCBhcmcpO1xuICB2YXIgdGVybWluYXRlZCA9IG1pZGRsZXdhcmVWYWx1ZSA9PT0gVEVSTUlOQVRPUjsgLy8gZGVwcmVjYXRlZC4gVGhlIGBudWxsYCByZXR1cm4gdmFsdWUgc2hvdWxkIGluc3RlYWQgcmV0dXJuIFRFUk1JTkFUT1IgdG9cbiAgLy8gcHJldmVudCBjb25mdXNpb24gaWYgYSB0ZWNocyBtZXRob2QgYWN0dWFsbHkgcmV0dXJucyBudWxsLlxuXG4gIHZhciByZXR1cm5WYWx1ZSA9IHRlcm1pbmF0ZWQgPyBudWxsIDogdGVjaFttZXRob2RdKG1pZGRsZXdhcmVWYWx1ZSk7XG4gIGV4ZWN1dGVSaWdodChtaWRkbGV3YXJlLCBtZXRob2QsIHJldHVyblZhbHVlLCB0ZXJtaW5hdGVkKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBhbGxvd2VkIGdldHRlcnMgd2hlcmUgdGhlIGtleXMgYXJlIG1ldGhvZCBuYW1lcy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBhbGxvd2VkR2V0dGVycyA9IHtcbiAgYnVmZmVyZWQ6IDEsXG4gIGN1cnJlbnRUaW1lOiAxLFxuICBkdXJhdGlvbjogMSxcbiAgc2Vla2FibGU6IDEsXG4gIHBsYXllZDogMSxcbiAgcGF1c2VkOiAxLFxuICB2b2x1bWU6IDFcbn07XG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIGFsbG93ZWQgc2V0dGVycyB3aGVyZSB0aGUga2V5cyBhcmUgbWV0aG9kIG5hbWVzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmFyIGFsbG93ZWRTZXR0ZXJzID0ge1xuICBzZXRDdXJyZW50VGltZTogMSxcbiAgc2V0Vm9sdW1lOiAxXG59O1xuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBhbGxvd2VkIG1lZGlhdG9ycyB3aGVyZSB0aGUga2V5cyBhcmUgbWV0aG9kIG5hbWVzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmFyIGFsbG93ZWRNZWRpYXRvcnMgPSB7XG4gIHBsYXk6IDEsXG4gIHBhdXNlOiAxXG59O1xuXG5mdW5jdGlvbiBtaWRkbGV3YXJlSXRlcmF0b3IobWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIG13KSB7XG4gICAgLy8gaWYgdGhlIHByZXZpb3VzIG1pZGRsZXdhcmUgdGVybWluYXRlZCwgcGFzcyBhbG9uZyB0aGUgdGVybWluYXRpb25cbiAgICBpZiAodmFsdWUgPT09IFRFUk1JTkFUT1IpIHtcbiAgICAgIHJldHVybiBURVJNSU5BVE9SO1xuICAgIH1cblxuICAgIGlmIChtd1ttZXRob2RdKSB7XG4gICAgICByZXR1cm4gbXdbbWV0aG9kXSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleGVjdXRlUmlnaHQobXdzLCBtZXRob2QsIHZhbHVlLCB0ZXJtaW5hdGVkKSB7XG4gIGZvciAodmFyIGkgPSBtd3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbXcgPSBtd3NbaV07XG5cbiAgICBpZiAobXdbbWV0aG9kXSkge1xuICAgICAgbXdbbWV0aG9kXSh0ZXJtaW5hdGVkLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIENsZWFyIHRoZSBtaWRkbGV3YXJlIGNhY2hlIGZvciBhIHBsYXllci5cbiAqXG4gKiBAcGFyYW0gIHtQbGF5ZXJ9IHBsYXllclxuICogICAgICAgICBBIHtAbGluayBQbGF5ZXJ9IGluc3RhbmNlLlxuICovXG5cblxuZnVuY3Rpb24gY2xlYXJDYWNoZUZvclBsYXllcihwbGF5ZXIpIHtcbiAgbWlkZGxld2FyZUluc3RhbmNlc1twbGF5ZXIuaWQoKV0gPSBudWxsO1xufVxuLyoqXG4gKiB7XG4gKiAgW3BsYXllcklkXTogW1ttd0ZhY3RvcnksIG13SW5zdGFuY2VdLCAuLi5dXG4gKiB9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRPckNyZWF0ZUZhY3RvcnkocGxheWVyLCBtd0ZhY3RvcnkpIHtcbiAgdmFyIG13cyA9IG1pZGRsZXdhcmVJbnN0YW5jZXNbcGxheWVyLmlkKCldO1xuICB2YXIgbXcgPSBudWxsO1xuXG4gIGlmIChtd3MgPT09IHVuZGVmaW5lZCB8fCBtd3MgPT09IG51bGwpIHtcbiAgICBtdyA9IG13RmFjdG9yeShwbGF5ZXIpO1xuICAgIG1pZGRsZXdhcmVJbnN0YW5jZXNbcGxheWVyLmlkKCldID0gW1ttd0ZhY3RvcnksIG13XV07XG4gICAgcmV0dXJuIG13O1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtd3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX213cyRpID0gbXdzW2ldLFxuICAgICAgICBtd2YgPSBfbXdzJGlbMF0sXG4gICAgICAgIG13aSA9IF9td3MkaVsxXTtcblxuICAgIGlmIChtd2YgIT09IG13RmFjdG9yeSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbXcgPSBtd2k7XG4gIH1cblxuICBpZiAobXcgPT09IG51bGwpIHtcbiAgICBtdyA9IG13RmFjdG9yeShwbGF5ZXIpO1xuICAgIG13cy5wdXNoKFttd0ZhY3RvcnksIG13XSk7XG4gIH1cblxuICByZXR1cm4gbXc7XG59XG5cbmZ1bmN0aW9uIHNldFNvdXJjZUhlbHBlcihzcmMsIG1pZGRsZXdhcmUsIG5leHQsIHBsYXllciwgYWNjLCBsYXN0UnVuKSB7XG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgIHNyYyA9IHt9O1xuICB9XG5cbiAgaWYgKG1pZGRsZXdhcmUgPT09IHZvaWQgMCkge1xuICAgIG1pZGRsZXdhcmUgPSBbXTtcbiAgfVxuXG4gIGlmIChhY2MgPT09IHZvaWQgMCkge1xuICAgIGFjYyA9IFtdO1xuICB9XG5cbiAgaWYgKGxhc3RSdW4gPT09IHZvaWQgMCkge1xuICAgIGxhc3RSdW4gPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBfbWlkZGxld2FyZSA9IG1pZGRsZXdhcmUsXG4gICAgICBtd0ZhY3RvcnkgPSBfbWlkZGxld2FyZVswXSxcbiAgICAgIG13cmVzdCA9IF9taWRkbGV3YXJlLnNsaWNlKDEpOyAvLyBpZiBtd0ZhY3RvcnkgaXMgYSBzdHJpbmcsIHRoZW4gd2UncmUgYXQgYSBmb3JrIGluIHRoZSByb2FkXG5cblxuICBpZiAodHlwZW9mIG13RmFjdG9yeSA9PT0gJ3N0cmluZycpIHtcbiAgICBzZXRTb3VyY2VIZWxwZXIoc3JjLCBtaWRkbGV3YXJlc1ttd0ZhY3RvcnldLCBuZXh0LCBwbGF5ZXIsIGFjYywgbGFzdFJ1bik7IC8vIGlmIHdlIGhhdmUgYW4gbXdGYWN0b3J5LCBjYWxsIGl0IHdpdGggdGhlIHBsYXllciB0byBnZXQgdGhlIG13LFxuICAgIC8vIHRoZW4gY2FsbCB0aGUgbXcncyBzZXRTb3VyY2UgbWV0aG9kXG4gIH0gZWxzZSBpZiAobXdGYWN0b3J5KSB7XG4gICAgdmFyIG13ID0gZ2V0T3JDcmVhdGVGYWN0b3J5KHBsYXllciwgbXdGYWN0b3J5KTsgLy8gaWYgc2V0U291cmNlIGlzbid0IHByZXNlbnQsIGltcGxpY2l0bHkgc2VsZWN0IHRoaXMgbWlkZGxld2FyZVxuXG4gICAgaWYgKCFtdy5zZXRTb3VyY2UpIHtcbiAgICAgIGFjYy5wdXNoKG13KTtcbiAgICAgIHJldHVybiBzZXRTb3VyY2VIZWxwZXIoc3JjLCBtd3Jlc3QsIG5leHQsIHBsYXllciwgYWNjLCBsYXN0UnVuKTtcbiAgICB9XG5cbiAgICBtdy5zZXRTb3VyY2UoYXNzaWduKHt9LCBzcmMpLCBmdW5jdGlvbiAoZXJyLCBfc3JjKSB7XG4gICAgICAvLyBzb21ldGhpbmcgaGFwcGVuZWQsIHRyeSB0aGUgbmV4dCBtaWRkbGV3YXJlIG9uIHRoZSBjdXJyZW50IGxldmVsXG4gICAgICAvLyBtYWtlIHN1cmUgdG8gdXNlIHRoZSBvbGQgc3JjXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBzZXRTb3VyY2VIZWxwZXIoc3JjLCBtd3Jlc3QsIG5leHQsIHBsYXllciwgYWNjLCBsYXN0UnVuKTtcbiAgICAgIH0gLy8gd2UndmUgc3VjY2VlZGVkLCBub3cgd2UgbmVlZCB0byBnbyBkZWVwZXJcblxuXG4gICAgICBhY2MucHVzaChtdyk7IC8vIGlmIGl0J3MgdGhlIHNhbWUgdHlwZSwgY29udGludWUgZG93biB0aGUgY3VycmVudCBjaGFpblxuICAgICAgLy8gb3RoZXJ3aXNlLCB3ZSB3YW50IHRvIGdvIGRvd24gdGhlIG5ldyBjaGFpblxuXG4gICAgICBzZXRTb3VyY2VIZWxwZXIoX3NyYywgc3JjLnR5cGUgPT09IF9zcmMudHlwZSA/IG13cmVzdCA6IG1pZGRsZXdhcmVzW19zcmMudHlwZV0sIG5leHQsIHBsYXllciwgYWNjLCBsYXN0UnVuKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChtd3Jlc3QubGVuZ3RoKSB7XG4gICAgc2V0U291cmNlSGVscGVyKHNyYywgbXdyZXN0LCBuZXh0LCBwbGF5ZXIsIGFjYywgbGFzdFJ1bik7XG4gIH0gZWxzZSBpZiAobGFzdFJ1bikge1xuICAgIG5leHQoc3JjLCBhY2MpO1xuICB9IGVsc2Uge1xuICAgIHNldFNvdXJjZUhlbHBlcihzcmMsIG1pZGRsZXdhcmVzWycqJ10sIG5leHQsIHBsYXllciwgYWNjLCB0cnVlKTtcbiAgfVxufVxuXG4vKipcbiAqIE1pbWV0eXBlc1xuICpcbiAqIEBzZWUgaHR0cDovL2h1bC5oYXJ2YXJkLmVkdS9vaXMvLy8vL3N5c3RlbXMvd2F4L3dheC1wdWJsaWMtaGVscC9taW1ldHlwZXMuaHRtXG4gKiBAdHlwZWRlZiBNaW1ldHlwZXN+S2luZFxuICogQGVudW1cbiAqL1xuXG52YXIgTWltZXR5cGVzS2luZCA9IHtcbiAgb3B1czogJ3ZpZGVvL29nZycsXG4gIG9ndjogJ3ZpZGVvL29nZycsXG4gIG1wNDogJ3ZpZGVvL21wNCcsXG4gIG1vdjogJ3ZpZGVvL21wNCcsXG4gIG00djogJ3ZpZGVvL21wNCcsXG4gIG1rdjogJ3ZpZGVvL3gtbWF0cm9za2EnLFxuICBtNGE6ICdhdWRpby9tcDQnLFxuICBtcDM6ICdhdWRpby9tcGVnJyxcbiAgYWFjOiAnYXVkaW8vYWFjJyxcbiAgb2dhOiAnYXVkaW8vb2dnJyxcbiAgbTN1ODogJ2FwcGxpY2F0aW9uL3gtbXBlZ1VSTCcsXG4gIGpwZzogJ2ltYWdlL2pwZWcnLFxuICBqcGVnOiAnaW1hZ2UvanBlZycsXG4gIGdpZjogJ2ltYWdlL2dpZicsXG4gIHBuZzogJ2ltYWdlL3BuZycsXG4gIHN2ZzogJ2ltYWdlL3N2Zyt4bWwnLFxuICB3ZWJwOiAnaW1hZ2Uvd2VicCdcbn07XG4vKipcbiAqIEdldCB0aGUgbWltZXR5cGUgb2YgYSBnaXZlbiBzcmMgdXJsIGlmIHBvc3NpYmxlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNyY1xuICogICAgICAgIFRoZSB1cmwgdG8gdGhlIHNyY1xuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgcmV0dXJuIHRoZSBtaW1ldHlwZSBpZiBpdCB3YXMga25vd24gb3IgZW1wdHkgc3RyaW5nIG90aGVyd2lzZVxuICovXG5cbnZhciBnZXRNaW1ldHlwZSA9IGZ1bmN0aW9uIGdldE1pbWV0eXBlKHNyYykge1xuICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICBzcmMgPSAnJztcbiAgfVxuXG4gIHZhciBleHQgPSBnZXRGaWxlRXh0ZW5zaW9uKHNyYyk7XG4gIHZhciBtaW1ldHlwZSA9IE1pbWV0eXBlc0tpbmRbZXh0LnRvTG93ZXJDYXNlKCldO1xuICByZXR1cm4gbWltZXR5cGUgfHwgJyc7XG59O1xuLyoqXG4gKiBGaW5kIHRoZSBtaW1lIHR5cGUgb2YgYSBnaXZlbiBzb3VyY2Ugc3RyaW5nIGlmIHBvc3NpYmxlLiBVc2VzIHRoZSBwbGF5ZXJcbiAqIHNvdXJjZSBjYWNoZS5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgVGhlIHBsYXllciBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjXG4gKiAgICAgICAgVGhlIHNvdXJjZSBzdHJpbmdcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSB0eXBlIHRoYXQgd2FzIGZvdW5kXG4gKi9cblxudmFyIGZpbmRNaW1ldHlwZSA9IGZ1bmN0aW9uIGZpbmRNaW1ldHlwZShwbGF5ZXIsIHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiAnJztcbiAgfSAvLyAxLiBjaGVjayBmb3IgdGhlIHR5cGUgaW4gdGhlIGBzb3VyY2VgIGNhY2hlXG5cblxuICBpZiAocGxheWVyLmNhY2hlXy5zb3VyY2Uuc3JjID09PSBzcmMgJiYgcGxheWVyLmNhY2hlXy5zb3VyY2UudHlwZSkge1xuICAgIHJldHVybiBwbGF5ZXIuY2FjaGVfLnNvdXJjZS50eXBlO1xuICB9IC8vIDIuIHNlZSBpZiB3ZSBoYXZlIHRoaXMgc291cmNlIGluIG91ciBgY3VycmVudFNvdXJjZXNgIGNhY2hlXG5cblxuICB2YXIgbWF0Y2hpbmdTb3VyY2VzID0gcGxheWVyLmNhY2hlXy5zb3VyY2VzLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzLnNyYyA9PT0gc3JjO1xuICB9KTtcblxuICBpZiAobWF0Y2hpbmdTb3VyY2VzLmxlbmd0aCkge1xuICAgIHJldHVybiBtYXRjaGluZ1NvdXJjZXNbMF0udHlwZTtcbiAgfSAvLyAzLiBsb29rIGZvciB0aGUgc3JjIHVybCBpbiBzb3VyY2UgZWxlbWVudHMgYW5kIHVzZSB0aGUgdHlwZSB0aGVyZVxuXG5cbiAgdmFyIHNvdXJjZXMgPSBwbGF5ZXIuJCQoJ3NvdXJjZScpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gc291cmNlc1tpXTtcblxuICAgIGlmIChzLnR5cGUgJiYgcy5zcmMgJiYgcy5zcmMgPT09IHNyYykge1xuICAgICAgcmV0dXJuIHMudHlwZTtcbiAgICB9XG4gIH0gLy8gNC4gZmluYWxseSBmYWxsYmFjayB0byBvdXIgbGlzdCBvZiBtaW1lIHR5cGVzIGJhc2VkIG9uIHNyYyB1cmwgZXh0ZW5zaW9uXG5cblxuICByZXR1cm4gZ2V0TWltZXR5cGUoc3JjKTtcbn07XG5cbi8qKlxuICogQG1vZHVsZSBmaWx0ZXItc291cmNlXG4gKi9cbi8qKlxuICogRmlsdGVyIG91dCBzaW5nbGUgYmFkIHNvdXJjZSBvYmplY3RzIG9yIG11bHRpcGxlIHNvdXJjZSBvYmplY3RzIGluIGFuXG4gKiBhcnJheS4gQWxzbyBmbGF0dGVucyBuZXN0ZWQgc291cmNlIG9iamVjdCBhcnJheXMgaW50byBhIDEgZGltZW5zaW9uYWxcbiAqIGFycmF5IG9mIHNvdXJjZSBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R8VGVjaH5Tb3VyY2VPYmplY3RbXX0gc3JjXG4gKiAgICAgICAgVGhlIHNyYyBvYmplY3QgdG8gZmlsdGVyXG4gKlxuICogQHJldHVybiB7VGVjaH5Tb3VyY2VPYmplY3RbXX1cbiAqICAgICAgICAgQW4gYXJyYXkgb2Ygc291cmNlb2JqZWN0cyBjb250YWluaW5nIG9ubHkgdmFsaWQgc291cmNlc1xuICpcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGZpbHRlclNvdXJjZSA9IGZ1bmN0aW9uIGZpbHRlclNvdXJjZShzcmMpIHtcbiAgLy8gdHJhdmVyc2UgYXJyYXlcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSkge1xuICAgIHZhciBuZXdzcmMgPSBbXTtcbiAgICBzcmMuZm9yRWFjaChmdW5jdGlvbiAoc3Jjb2JqKSB7XG4gICAgICBzcmNvYmogPSBmaWx0ZXJTb3VyY2Uoc3Jjb2JqKTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3Jjb2JqKSkge1xuICAgICAgICBuZXdzcmMgPSBuZXdzcmMuY29uY2F0KHNyY29iaik7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNyY29iaikpIHtcbiAgICAgICAgbmV3c3JjLnB1c2goc3Jjb2JqKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzcmMgPSBuZXdzcmM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycgJiYgc3JjLnRyaW0oKSkge1xuICAgIC8vIGNvbnZlcnQgc3RyaW5nIGludG8gb2JqZWN0XG4gICAgc3JjID0gW2ZpeFNvdXJjZSh7XG4gICAgICBzcmM6IHNyY1xuICAgIH0pXTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpICYmIHR5cGVvZiBzcmMuc3JjID09PSAnc3RyaW5nJyAmJiBzcmMuc3JjICYmIHNyYy5zcmMudHJpbSgpKSB7XG4gICAgLy8gc3JjIGlzIGFscmVhZHkgdmFsaWRcbiAgICBzcmMgPSBbZml4U291cmNlKHNyYyldO1xuICB9IGVsc2Uge1xuICAgIC8vIGludmFsaWQgc291cmNlLCB0dXJuIGl0IGludG8gYW4gZW1wdHkgYXJyYXlcbiAgICBzcmMgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBzcmM7XG59O1xuLyoqXG4gKiBDaGVja3Mgc3JjIG1pbWV0eXBlLCBhZGRpbmcgaXQgd2hlbiBwb3NzaWJsZVxuICpcbiAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNyY1xuICogICAgICAgIFRoZSBzcmMgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtUZWNoflNvdXJjZU9iamVjdH1cbiAqICAgICAgICBzcmMgT2JqZWN0IHdpdGgga25vd24gdHlwZVxuICovXG5cblxuZnVuY3Rpb24gZml4U291cmNlKHNyYykge1xuICBpZiAoIXNyYy50eXBlKSB7XG4gICAgdmFyIG1pbWV0eXBlID0gZ2V0TWltZXR5cGUoc3JjLnNyYyk7XG5cbiAgICBpZiAobWltZXR5cGUpIHtcbiAgICAgIHNyYy50eXBlID0gbWltZXR5cGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNyYztcbn1cblxuLyoqXG4gKiBUaGUgYE1lZGlhTG9hZGVyYCBpcyB0aGUgYENvbXBvbmVudGAgdGhhdCBkZWNpZGVzIHdoaWNoIHBsYXliYWNrIHRlY2hub2xvZ3kgdG8gbG9hZFxuICogd2hlbiBhIHBsYXllciBpcyBpbml0aWFsaXplZC5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTWVkaWFMb2FkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVkaWFMb2FkZXIsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYXR0YWNoIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSBbcmVhZHldXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBydW4gd2hlbiB0aGlzIGNvbXBvbmVudCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIE1lZGlhTG9hZGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAvLyBNZWRpYUxvYWRlciBoYXMgbm8gZWxlbWVudFxuICAgIHZhciBvcHRpb25zXyA9IG1lcmdlT3B0aW9ucyh7XG4gICAgICBjcmVhdGVFbDogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnNfLCByZWFkeSkgfHwgdGhpczsgLy8gSWYgdGhlcmUgYXJlIG5vIHNvdXJjZXMgd2hlbiB0aGUgcGxheWVyIGlzIGluaXRpYWxpemVkLFxuICAgIC8vIGxvYWQgdGhlIGZpcnN0IHN1cHBvcnRlZCBwbGF5YmFjayB0ZWNobm9sb2d5LlxuXG4gICAgaWYgKCFvcHRpb25zLnBsYXllck9wdGlvbnMuc291cmNlcyB8fCBvcHRpb25zLnBsYXllck9wdGlvbnMuc291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gb3B0aW9ucy5wbGF5ZXJPcHRpb25zLnRlY2hPcmRlcjsgaSA8IGoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRlY2hOYW1lID0gdG9UaXRsZUNhc2UoaltpXSk7XG4gICAgICAgIHZhciB0ZWNoID0gVGVjaC5nZXRUZWNoKHRlY2hOYW1lKTsgLy8gU3VwcG9ydCBvbGQgYmVoYXZpb3Igb2YgdGVjaHMgYmVpbmcgcmVnaXN0ZXJlZCBhcyBjb21wb25lbnRzLlxuICAgICAgICAvLyBSZW1vdmUgb25jZSB0aGF0IGRlcHJlY2F0ZWQgYmVoYXZpb3IgaXMgcmVtb3ZlZC5cblxuICAgICAgICBpZiAoIXRlY2hOYW1lKSB7XG4gICAgICAgICAgdGVjaCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQodGVjaE5hbWUpO1xuICAgICAgICB9IC8vIENoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoaXMgdGVjaG5vbG9neVxuXG5cbiAgICAgICAgaWYgKHRlY2ggJiYgdGVjaC5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgcGxheWVyLmxvYWRUZWNoXyh0ZWNoTmFtZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTG9vcCB0aHJvdWdoIHBsYXliYWNrIHRlY2hub2xvZ2llcyAoSFRNTDUsIEZsYXNoKSBhbmQgY2hlY2sgZm9yIHN1cHBvcnQuXG4gICAgICAvLyBUaGVuIGxvYWQgdGhlIGJlc3Qgc291cmNlLlxuICAgICAgLy8gQSBmZXcgYXNzdW1wdGlvbnMgaGVyZTpcbiAgICAgIC8vICAgQWxsIHBsYXliYWNrIHRlY2hub2xvZ2llcyByZXNwZWN0IHByZWxvYWQgZmFsc2UuXG4gICAgICBwbGF5ZXIuc3JjKG9wdGlvbnMucGxheWVyT3B0aW9ucy5zb3VyY2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gTWVkaWFMb2FkZXI7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTWVkaWFMb2FkZXInLCBNZWRpYUxvYWRlcik7XG5cbi8qKlxuICogQ29tcG9uZW50IHdoaWNoIGlzIGNsaWNrYWJsZSBvciBrZXlib2FyZCBhY3Rpb25hYmxlLCBidXQgaXMgbm90IGFcbiAqIG5hdGl2ZSBIVE1MIGJ1dHRvbi5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgQ2xpY2thYmxlQ29tcG9uZW50ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENsaWNrYWJsZUNvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gQ2xpY2thYmxlQ29tcG9uZW50KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLmVtaXRUYXBFdmVudHMoKTtcblxuICAgIF90aGlzLmVuYWJsZSgpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDbGlja2FibGVDb21wb25lbnRgcyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0YWc9ZGl2XVxuICAgKiAgICAgICAgVGhlIGVsZW1lbnQncyBub2RlIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcHM9e31dXG4gICAqICAgICAgICBBbiBvYmplY3Qgb2YgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSBzZXQgb24gdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlcz17fV1cbiAgICogICAgICAgIEFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQ2xpY2thYmxlQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCh0YWcsIHByb3BzLCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHRhZyA9PT0gdm9pZCAwKSB7XG4gICAgICB0YWcgPSAnZGl2JztcbiAgICB9XG5cbiAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgcHJvcHMgPSBhc3NpZ24oe1xuICAgICAgaW5uZXJIVE1MOiAnPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJ2anMtaWNvbi1wbGFjZWhvbGRlclwiPjwvc3Bhbj4nLFxuICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ1NTQ2xhc3MoKSxcbiAgICAgIHRhYkluZGV4OiAwXG4gICAgfSwgcHJvcHMpO1xuXG4gICAgaWYgKHRhZyA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIGxvZy5lcnJvcihcIkNyZWF0aW5nIGEgQ2xpY2thYmxlQ29tcG9uZW50IHdpdGggYW4gSFRNTCBlbGVtZW50IG9mIFwiICsgdGFnICsgXCIgaXMgbm90IHN1cHBvcnRlZDsgdXNlIGEgQnV0dG9uIGluc3RlYWQuXCIpO1xuICAgIH0gLy8gQWRkIEFSSUEgYXR0cmlidXRlcyBmb3IgY2xpY2thYmxlIGVsZW1lbnQgd2hpY2ggaXMgbm90IGEgbmF0aXZlIEhUTUwgYnV0dG9uXG5cblxuICAgIGF0dHJpYnV0ZXMgPSBhc3NpZ24oe1xuICAgICAgcm9sZTogJ2J1dHRvbidcbiAgICB9LCBhdHRyaWJ1dGVzKTtcbiAgICB0aGlzLnRhYkluZGV4XyA9IHByb3BzLnRhYkluZGV4O1xuXG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCB0YWcsIHByb3BzLCBhdHRyaWJ1dGVzKTtcblxuICAgIHRoaXMuY3JlYXRlQ29udHJvbFRleHRFbChlbCk7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAvLyByZW1vdmUgY29udHJvbFRleHRFbF8gb24gZGlzcG9zZVxuICAgIHRoaXMuY29udHJvbFRleHRFbF8gPSBudWxsO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjb250cm9sIHRleHQgZWxlbWVudCBvbiB0aGlzIGBDbGlja2FibGVDb21wb25lbnRgXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gW2VsXVxuICAgKiAgICAgICAgUGFyZW50IGVsZW1lbnQgZm9yIHRoZSBjb250cm9sIHRleHQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGNvbnRyb2wgdGV4dCBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVDb250cm9sVGV4dEVsID0gZnVuY3Rpb24gY3JlYXRlQ29udHJvbFRleHRFbChlbCkge1xuICAgIHRoaXMuY29udHJvbFRleHRFbF8gPSBjcmVhdGVFbCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLXRleHQnXG4gICAgfSwge1xuICAgICAgLy8gbGV0IHRoZSBzY3JlZW4gcmVhZGVyIHVzZXIga25vdyB0aGF0IHRoZSB0ZXh0IG9mIHRoZSBlbGVtZW50IG1heSBjaGFuZ2VcbiAgICAgICdhcmlhLWxpdmUnOiAncG9saXRlJ1xuICAgIH0pO1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRyb2xUZXh0RWxfKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRyb2xUZXh0KHRoaXMuY29udHJvbFRleHRfLCBlbCk7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbFRleHRFbF87XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGxvY2FsaXplIHRleHQgdG8gdXNlIGZvciB0aGUgY29udHJvbHMgb24gdGhlIGBDbGlja2FibGVDb21wb25lbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RleHRdXG4gICAqICAgICAgICBDb250cm9sIHRleHQgZm9yIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gW2VsPXRoaXMuZWwoKV1cbiAgICogICAgICAgIEVsZW1lbnQgdG8gc2V0IHRoZSB0aXRsZSBvbi5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIC0gVGhlIGNvbnRyb2wgdGV4dCB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29udHJvbFRleHQgPSBmdW5jdGlvbiBjb250cm9sVGV4dCh0ZXh0LCBlbCkge1xuICAgIGlmIChlbCA9PT0gdm9pZCAwKSB7XG4gICAgICBlbCA9IHRoaXMuZWwoKTtcbiAgICB9XG5cbiAgICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250cm9sVGV4dF8gfHwgJ05lZWQgVGV4dCc7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsaXplZFRleHQgPSB0aGlzLmxvY2FsaXplKHRleHQpO1xuICAgIHRoaXMuY29udHJvbFRleHRfID0gdGV4dDtcbiAgICB0ZXh0Q29udGVudCh0aGlzLmNvbnRyb2xUZXh0RWxfLCBsb2NhbGl6ZWRUZXh0KTtcblxuICAgIGlmICghdGhpcy5ub25JY29uQ29udHJvbCkge1xuICAgICAgLy8gU2V0IHRpdGxlIGF0dHJpYnV0ZSBpZiBvbmx5IGFuIGljb24gaXMgc2hvd25cbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBsb2NhbGl6ZWRUZXh0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWNvbnRyb2wgdmpzLWJ1dHRvbiBcIiArIF9Db21wb25lbnQucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgYENsaWNrYWJsZUNvbXBvbmVudGBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGlmICghdGhpcy5lbmFibGVkXykge1xuICAgICAgdGhpcy5lbmFibGVkXyA9IHRydWU7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZGlzYWJsZWQnKTtcbiAgICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMudGFiSW5kZXhfICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgdGhpcy50YWJJbmRleF8pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9uKFsndGFwJywgJ2NsaWNrJ10sIHRoaXMuaGFuZGxlQ2xpY2spO1xuICAgICAgdGhpcy5vbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoaXMgYENsaWNrYWJsZUNvbXBvbmVudGBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdGhpcy5lbmFibGVkXyA9IGZhbHNlO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1kaXNhYmxlZCcpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMudGFiSW5kZXhfICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5lbF8ucmVtb3ZlQXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgIH1cblxuICAgIHRoaXMub2ZmKCdtb3VzZW92ZXInLCB0aGlzLmhhbmRsZU1vdXNlT3Zlcik7XG4gICAgdGhpcy5vZmYoJ21vdXNlb3V0JywgdGhpcy5oYW5kbGVNb3VzZU91dCk7XG4gICAgdGhpcy5vZmYoWyd0YXAnLCAnY2xpY2snXSwgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgdGhpcy5vZmYoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBgQ2xpY2thYmxlQ29tcG9uZW50YCByZWNlaXZlcyBhXG4gICAqIGBjbGlja2Agb3IgYHRhcGAgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYHRhcGAgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7fVxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgYENsaWNrYWJsZUNvbXBvbmVudGAgcmVjZWl2ZXMgYVxuICAgKiBga2V5ZG93bmAgZXZlbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGlmIHRoZSBrZXkgaXMgU3BhY2Ugb3IgRW50ZXIsIGl0IHdpbGwgdHJpZ2dlciBhIGBjbGlja2AgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBrZXlkb3duXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgLy8gU3VwcG9ydCBTcGFjZSBvciBFbnRlciBrZXkgb3BlcmF0aW9uIHRvIGZpcmUgYSBjbGljayBldmVudC4gQWxzbyxcbiAgICAvLyBwcmV2ZW50IHRoZSBldmVudCBmcm9tIHByb3BhZ2F0aW5nIHRocm91Z2ggdGhlIERPTSBhbmQgdHJpZ2dlcmluZ1xuICAgIC8vIFBsYXllciBob3RrZXlzLlxuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdTcGFjZScpIHx8IGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VudGVyJykpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMudHJpZ2dlcignY2xpY2snKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUGFzcyBrZXlwcmVzcyBoYW5kbGluZyB1cCBmb3IgdW5zdXBwb3J0ZWQga2V5c1xuICAgICAgX0NvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENsaWNrYWJsZUNvbXBvbmVudDtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdDbGlja2FibGVDb21wb25lbnQnLCBDbGlja2FibGVDb21wb25lbnQpO1xuXG4vKipcbiAqIEEgYENsaWNrYWJsZUNvbXBvbmVudGAgdGhhdCBoYW5kbGVzIHNob3dpbmcgdGhlIHBvc3RlciBpbWFnZSBmb3IgdGhlIHBsYXllci5cbiAqXG4gKiBAZXh0ZW5kcyBDbGlja2FibGVDb21wb25lbnRcbiAqL1xuXG52YXIgUG9zdGVySW1hZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9DbGlja2FibGVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUG9zdGVySW1hZ2UsIF9DbGlja2FibGVDb21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYXR0YWNoIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gUG9zdGVySW1hZ2UocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ2xpY2thYmxlQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMudXBkYXRlKCk7XG5cbiAgICBwbGF5ZXIub24oJ3Bvc3RlcmNoYW5nZScsIGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnVwZGF0ZSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ2xlYW4gdXAgYW5kIGRpc3Bvc2Ugb2YgdGhlIGBQb3N0ZXJJbWFnZWAuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBvc3RlckltYWdlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5wbGF5ZXIoKS5vZmYoJ3Bvc3RlcmNoYW5nZScsIHRoaXMudXBkYXRlKTtcblxuICAgIF9DbGlja2FibGVDb21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgUG9zdGVySW1hZ2VgcyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCQxKCkge1xuICAgIHZhciBlbCA9IGNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcG9zdGVyJyxcbiAgICAgIC8vIERvbid0IHdhbnQgcG9zdGVyIHRvIGJlIHRhYmJhYmxlLlxuICAgICAgdGFiSW5kZXg6IC0xXG4gICAgfSk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIC8qKlxuICAgKiBBbiB7QGxpbmsgRXZlbnRUYXJnZXR+RXZlbnRMaXN0ZW5lcn0gZm9yIHtAbGluayBQbGF5ZXIjcG9zdGVyY2hhbmdlfSBldmVudHMuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNwb3N0ZXJjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXIjcG9zdGVyY2hhbmdlYCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZXZlbnQpIHtcbiAgICB2YXIgdXJsID0gdGhpcy5wbGF5ZXIoKS5wb3N0ZXIoKTtcbiAgICB0aGlzLnNldFNyYyh1cmwpOyAvLyBJZiB0aGVyZSdzIG5vIHBvc3RlciBzb3VyY2Ugd2Ugc2hvdWxkIGRpc3BsYXk6bm9uZSBvbiB0aGlzIGNvbXBvbmVudFxuICAgIC8vIHNvIGl0J3Mgbm90IHN0aWxsIGNsaWNrYWJsZSBvciByaWdodC1jbGlja2FibGVcblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgc291cmNlIG9mIHRoZSBgUG9zdGVySW1hZ2VgIGRlcGVuZGluZyBvbiB0aGUgZGlzcGxheSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogICAgICAgIFRoZSBVUkwgdG8gdGhlIHNvdXJjZSBmb3IgdGhlIGBQb3N0ZXJJbWFnZWAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldFNyYyA9IGZ1bmN0aW9uIHNldFNyYyh1cmwpIHtcbiAgICB2YXIgYmFja2dyb3VuZEltYWdlID0gJyc7IC8vIEFueSBmYWxzeSB2YWx1ZSBzaG91bGQgc3RheSBhcyBhbiBlbXB0eSBzdHJpbmcsIG90aGVyd2lzZVxuICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBhbiBleHRyYSBlcnJvclxuXG4gICAgaWYgKHVybCkge1xuICAgICAgYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoXFxcIlwiICsgdXJsICsgXCJcXFwiKVwiO1xuICAgIH1cblxuICAgIHRoaXMuZWxfLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGJhY2tncm91bmRJbWFnZTtcbiAgfVxuICAvKipcbiAgICogQW4ge0BsaW5rIEV2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJ9IGZvciBjbGlja3Mgb24gdGhlIGBQb3N0ZXJJbWFnZWAuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50I2hhbmRsZUNsaWNrfSBmb3IgaW5zdGFuY2VzIHdoZXJlIHRoaXMgd2lsbCBiZSB0cmlnZ2VyZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKiBAbGlzdGVucyBrZXlkb3duXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICArICAgICAgICBUaGUgYGNsaWNrYCwgYHRhcGAgb3IgYGtleWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBhIGNsaWNrIHRvIHRyaWdnZXIgcGxheWJhY2sgd2hlbiBjb250cm9scyBhcmUgZGlzYWJsZWRcbiAgICBpZiAoIXRoaXMucGxheWVyXy5jb250cm9scygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGxheWVyXy50ZWNoKHRydWUpKSB7XG4gICAgICB0aGlzLnBsYXllcl8udGVjaCh0cnVlKS5mb2N1cygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBsYXllcl8ucGF1c2VkKCkpIHtcbiAgICAgIHNpbGVuY2VQcm9taXNlKHRoaXMucGxheWVyXy5wbGF5KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBvc3RlckltYWdlO1xufShDbGlja2FibGVDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1Bvc3RlckltYWdlJywgUG9zdGVySW1hZ2UpO1xuXG52YXIgZGFya0dyYXkgPSAnIzIyMic7XG52YXIgbGlnaHRHcmF5ID0gJyNjY2MnO1xudmFyIGZvbnRNYXAgPSB7XG4gIG1vbm9zcGFjZTogJ21vbm9zcGFjZScsXG4gIHNhbnNTZXJpZjogJ3NhbnMtc2VyaWYnLFxuICBzZXJpZjogJ3NlcmlmJyxcbiAgbW9ub3NwYWNlU2Fuc1NlcmlmOiAnXCJBbmRhbGUgTW9ub1wiLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZScsXG4gIG1vbm9zcGFjZVNlcmlmOiAnXCJDb3VyaWVyIE5ld1wiLCBtb25vc3BhY2UnLFxuICBwcm9wb3J0aW9uYWxTYW5zU2VyaWY6ICdzYW5zLXNlcmlmJyxcbiAgcHJvcG9ydGlvbmFsU2VyaWY6ICdzZXJpZicsXG4gIGNhc3VhbDogJ1wiQ29taWMgU2FucyBNU1wiLCBJbXBhY3QsIGZhbnRhc3knLFxuICBzY3JpcHQ6ICdcIk1vbm90eXBlIENvcnNpdmFcIiwgY3Vyc2l2ZScsXG4gIHNtYWxsY2FwczogJ1wiQW5kYWxlIE1vbm9cIiwgXCJMdWNpZGEgQ29uc29sZVwiLCBtb25vc3BhY2UsIHNhbnMtc2VyaWYnXG59O1xuLyoqXG4gKiBDb25zdHJ1Y3QgYW4gcmdiYSBjb2xvciBmcm9tIGEgZ2l2ZW4gaGV4IGNvbG9yIGNvZGUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvbG9yXG4gKiAgICAgICAgSGV4IG51bWJlciBmb3IgY29sb3IsIGxpa2UgI2YwZSBvciAjZjYwNGUyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcGFjaXR5XG4gKiAgICAgICAgVmFsdWUgZm9yIG9wYWNpdHksIDAuMCAtIDEuMC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSByZ2JhIGNvbG9yIHRoYXQgd2FzIGNyZWF0ZWQsIGxpa2UgJ3JnYmEoMjU1LCAwLCAwLCAwLjMpJy5cbiAqL1xuXG5mdW5jdGlvbiBjb25zdHJ1Y3RDb2xvcihjb2xvciwgb3BhY2l0eSkge1xuICB2YXIgaGV4O1xuXG4gIGlmIChjb2xvci5sZW5ndGggPT09IDQpIHtcbiAgICAvLyBjb2xvciBsb29rcyBsaWtlIFwiI2YwZVwiXG4gICAgaGV4ID0gY29sb3JbMV0gKyBjb2xvclsxXSArIGNvbG9yWzJdICsgY29sb3JbMl0gKyBjb2xvclszXSArIGNvbG9yWzNdO1xuICB9IGVsc2UgaWYgKGNvbG9yLmxlbmd0aCA9PT0gNykge1xuICAgIC8vIGNvbG9yIGxvb2tzIGxpa2UgXCIjZjYwNGUyXCJcbiAgICBoZXggPSBjb2xvci5zbGljZSgxKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29sb3IgY29kZSBwcm92aWRlZCwgJyArIGNvbG9yICsgJzsgbXVzdCBiZSBmb3JtYXR0ZWQgYXMgZS5nLiAjZjBlIG9yICNmNjA0ZTIuJyk7XG4gIH1cblxuICByZXR1cm4gJ3JnYmEoJyArIHBhcnNlSW50KGhleC5zbGljZSgwLCAyKSwgMTYpICsgJywnICsgcGFyc2VJbnQoaGV4LnNsaWNlKDIsIDQpLCAxNikgKyAnLCcgKyBwYXJzZUludChoZXguc2xpY2UoNCwgNiksIDE2KSArICcsJyArIG9wYWNpdHkgKyAnKSc7XG59XG4vKipcbiAqIFRyeSB0byB1cGRhdGUgdGhlIHN0eWxlIG9mIGEgRE9NIGVsZW1lbnQuIFNvbWUgc3R5bGUgY2hhbmdlcyB3aWxsIHRocm93IGFuIGVycm9yLFxuICogcGFydGljdWxhcmx5IGluIElFOC4gVGhvc2Ugc2hvdWxkIGJlIG5vb3BzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqICAgICAgICBUaGUgRE9NIGVsZW1lbnQgdG8gYmUgc3R5bGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZVxuICogICAgICAgIFRoZSBDU1MgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgc3R5bGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBydWxlXG4gKiAgICAgICAgVGhlIHN0eWxlIHJ1bGUgdGhhdCBzaG91bGQgYmUgYXBwbGllZCB0byB0aGUgcHJvcGVydHkuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0cnlVcGRhdGVTdHlsZShlbCwgc3R5bGUsIHJ1bGUpIHtcbiAgdHJ5IHtcbiAgICBlbC5zdHlsZVtzdHlsZV0gPSBydWxlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gU2F0aXNmaWVzIGxpbnRlci5cbiAgICByZXR1cm47XG4gIH1cbn1cbi8qKlxuICogVGhlIGNvbXBvbmVudCBmb3IgZGlzcGxheWluZyB0ZXh0IHRyYWNrIGN1ZXMuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxuXG52YXIgVGV4dFRyYWNrRGlzcGxheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUZXh0VHJhY2tEaXNwbGF5LCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBgVGV4dFRyYWNrRGlzcGxheWAgaXMgcmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBUZXh0VHJhY2tEaXNwbGF5KHBsYXllciwgb3B0aW9ucywgcmVhZHkpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB8fCB0aGlzO1xuICAgIHZhciB1cGRhdGVEaXNwbGF5SGFuZGxlciA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnVwZGF0ZURpc3BsYXkpO1xuICAgIHBsYXllci5vbignbG9hZHN0YXJ0JywgYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudG9nZ2xlRGlzcGxheSkpO1xuICAgIHBsYXllci5vbigndGV4dHRyYWNrY2hhbmdlJywgdXBkYXRlRGlzcGxheUhhbmRsZXIpO1xuICAgIHBsYXllci5vbignbG9hZGVkbWV0YWRhdGEnLCBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy5wcmVzZWxlY3RUcmFjaykpOyAvLyBUaGlzIHVzZWQgdG8gYmUgY2FsbGVkIGR1cmluZyBwbGF5ZXIgaW5pdCwgYnV0IHdhcyBjYXVzaW5nIGFuIGVycm9yXG4gICAgLy8gaWYgYSB0cmFjayBzaG91bGQgc2hvdyBieSBkZWZhdWx0IGFuZCB0aGUgZGlzcGxheSBoYWRuJ3QgbG9hZGVkIHlldC5cbiAgICAvLyBTaG91bGQgcHJvYmFibHkgYmUgbW92ZWQgdG8gYW4gZXh0ZXJuYWwgdHJhY2sgbG9hZGVyIHdoZW4gd2Ugc3VwcG9ydFxuICAgIC8vIHRyYWNrcyB0aGF0IGRvbid0IG5lZWQgYSBkaXNwbGF5LlxuXG4gICAgcGxheWVyLnJlYWR5KGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwbGF5ZXIudGVjaF8gJiYgcGxheWVyLnRlY2hfLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwbGF5ZXIub24oJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB1cGRhdGVEaXNwbGF5SGFuZGxlcik7XG4gICAgICBwbGF5ZXIub24oJ3BsYXllcnJlc2l6ZScsIHVwZGF0ZURpc3BsYXlIYW5kbGVyKTtcbiAgICAgIHdpbmRvdyQxLmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdXBkYXRlRGlzcGxheUhhbmRsZXIpO1xuICAgICAgcGxheWVyLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gd2luZG93JDEucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB1cGRhdGVEaXNwbGF5SGFuZGxlcik7XG4gICAgICB9KTtcbiAgICAgIHZhciB0cmFja3MgPSB0aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMudHJhY2tzIHx8IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnBsYXllcl8uYWRkUmVtb3RlVGV4dFRyYWNrKHRyYWNrc1tpXSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJlc2VsZWN0VHJhY2soKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAqIFByZXNlbGVjdCBhIHRyYWNrIGZvbGxvd2luZyB0aGlzIHByZWNlZGVuY2U6XG4gICogLSBtYXRjaGVzIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIHtAbGluayBUZXh0VHJhY2t9J3MgbGFuZ3VhZ2UgYW5kIGtpbmRcbiAgKiAtIG1hdGNoZXMgdGhlIHByZXZpb3VzbHkgc2VsZWN0ZWQge0BsaW5rIFRleHRUcmFja30ncyBsYW5ndWFnZSBvbmx5XG4gICogLSBpcyB0aGUgZmlyc3QgZGVmYXVsdCBjYXB0aW9ucyB0cmFja1xuICAqIC0gaXMgdGhlIGZpcnN0IGRlZmF1bHQgZGVzY3JpcHRpb25zIHRyYWNrXG4gICpcbiAgKiBAbGlzdGVucyBQbGF5ZXIjbG9hZHN0YXJ0XG4gICovXG5cblxuICB2YXIgX3Byb3RvID0gVGV4dFRyYWNrRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByZXNlbGVjdFRyYWNrID0gZnVuY3Rpb24gcHJlc2VsZWN0VHJhY2soKSB7XG4gICAgdmFyIG1vZGVzID0ge1xuICAgICAgY2FwdGlvbnM6IDEsXG4gICAgICBzdWJ0aXRsZXM6IDFcbiAgICB9O1xuICAgIHZhciB0cmFja0xpc3QgPSB0aGlzLnBsYXllcl8udGV4dFRyYWNrcygpO1xuICAgIHZhciB1c2VyUHJlZiA9IHRoaXMucGxheWVyXy5jYWNoZV8uc2VsZWN0ZWRMYW5ndWFnZTtcbiAgICB2YXIgZmlyc3REZXNjO1xuICAgIHZhciBmaXJzdENhcHRpb25zO1xuICAgIHZhciBwcmVmZXJyZWRUcmFjaztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja0xpc3RbaV07XG5cbiAgICAgIGlmICh1c2VyUHJlZiAmJiB1c2VyUHJlZi5lbmFibGVkICYmIHVzZXJQcmVmLmxhbmd1YWdlICYmIHVzZXJQcmVmLmxhbmd1YWdlID09PSB0cmFjay5sYW5ndWFnZSAmJiB0cmFjay5raW5kIGluIG1vZGVzKSB7XG4gICAgICAgIC8vIEFsd2F5cyBjaG9vc2UgdGhlIHRyYWNrIHRoYXQgbWF0Y2hlcyBib3RoIGxhbmd1YWdlIGFuZCBraW5kXG4gICAgICAgIGlmICh0cmFjay5raW5kID09PSB1c2VyUHJlZi5raW5kKSB7XG4gICAgICAgICAgcHJlZmVycmVkVHJhY2sgPSB0cmFjazsgLy8gb3IgY2hvb3NlIHRoZSBmaXJzdCB0cmFjayB0aGF0IG1hdGNoZXMgbGFuZ3VhZ2VcbiAgICAgICAgfSBlbHNlIGlmICghcHJlZmVycmVkVHJhY2spIHtcbiAgICAgICAgICBwcmVmZXJyZWRUcmFjayA9IHRyYWNrO1xuICAgICAgICB9IC8vIGNsZWFyIGV2ZXJ5dGhpbmcgaWYgb2ZmVGV4dFRyYWNrTWVudUl0ZW0gd2FzIGNsaWNrZWRcblxuICAgICAgfSBlbHNlIGlmICh1c2VyUHJlZiAmJiAhdXNlclByZWYuZW5hYmxlZCkge1xuICAgICAgICBwcmVmZXJyZWRUcmFjayA9IG51bGw7XG4gICAgICAgIGZpcnN0RGVzYyA9IG51bGw7XG4gICAgICAgIGZpcnN0Q2FwdGlvbnMgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICh0cmFja1tcImRlZmF1bHRcIl0pIHtcbiAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdkZXNjcmlwdGlvbnMnICYmICFmaXJzdERlc2MpIHtcbiAgICAgICAgICBmaXJzdERlc2MgPSB0cmFjaztcbiAgICAgICAgfSBlbHNlIGlmICh0cmFjay5raW5kIGluIG1vZGVzICYmICFmaXJzdENhcHRpb25zKSB7XG4gICAgICAgICAgZmlyc3RDYXB0aW9ucyA9IHRyYWNrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBUaGUgcHJlZmVycmVkVHJhY2sgbWF0Y2hlcyB0aGUgdXNlciBwcmVmZXJlbmNlIGFuZCB0YWtlc1xuICAgIC8vIHByZWNlZGVuY2Ugb3ZlciBhbGwgdGhlIG90aGVyIHRyYWNrcy5cbiAgICAvLyBTbywgZGlzcGxheSB0aGUgcHJlZmVycmVkVHJhY2sgYmVmb3JlIHRoZSBmaXJzdCBkZWZhdWx0IHRyYWNrXG4gICAgLy8gYW5kIHRoZSBzdWJ0aXRsZXMvY2FwdGlvbnMgdHJhY2sgYmVmb3JlIHRoZSBkZXNjcmlwdGlvbnMgdHJhY2tcblxuXG4gICAgaWYgKHByZWZlcnJlZFRyYWNrKSB7XG4gICAgICBwcmVmZXJyZWRUcmFjay5tb2RlID0gJ3Nob3dpbmcnO1xuICAgIH0gZWxzZSBpZiAoZmlyc3RDYXB0aW9ucykge1xuICAgICAgZmlyc3RDYXB0aW9ucy5tb2RlID0gJ3Nob3dpbmcnO1xuICAgIH0gZWxzZSBpZiAoZmlyc3REZXNjKSB7XG4gICAgICBmaXJzdERlc2MubW9kZSA9ICdzaG93aW5nJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFR1cm4gZGlzcGxheSBvZiB7QGxpbmsgVGV4dFRyYWNrfSdzIGZyb20gdGhlIGN1cnJlbnQgc3RhdGUgaW50byB0aGUgb3RoZXIgc3RhdGUuXG4gICAqIFRoZXJlIGFyZSBvbmx5IHR3byBzdGF0ZXM6XG4gICAqIC0gJ3Nob3duJ1xuICAgKiAtICdoaWRkZW4nXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNsb2Fkc3RhcnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9nZ2xlRGlzcGxheSA9IGZ1bmN0aW9uIHRvZ2dsZURpc3BsYXkoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy50ZWNoXyAmJiB0aGlzLnBsYXllcl8udGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHtAbGluayBDb21wb25lbnR9J3MgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXRleHQtdHJhY2stZGlzcGxheSdcbiAgICB9LCB7XG4gICAgICAnYXJpYS1saXZlJzogJ29mZicsXG4gICAgICAnYXJpYS1hdG9taWMnOiAndHJ1ZSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgYWxsIGRpc3BsYXllZCB7QGxpbmsgVGV4dFRyYWNrfXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsZWFyRGlzcGxheSA9IGZ1bmN0aW9uIGNsZWFyRGlzcGxheSgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyQxLldlYlZUVCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2luZG93JDEuV2ViVlRULnByb2Nlc3NDdWVzKHdpbmRvdyQxLCBbXSwgdGhpcy5lbF8pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBkaXNwbGF5ZWQgVGV4dFRyYWNrIHdoZW4gYSBlaXRoZXIgYSB7QGxpbmsgUGxheWVyI3RleHR0cmFja2NoYW5nZX0gb3JcbiAgICogYSB7QGxpbmsgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2V9IGlzIGZpcmVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjdGV4dHRyYWNrY2hhbmdlXG4gICAqIEBsaXN0ZW5zIFBsYXllciNmdWxsc2NyZWVuY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZURpc3BsYXkgPSBmdW5jdGlvbiB1cGRhdGVEaXNwbGF5KCkge1xuICAgIHZhciB0cmFja3MgPSB0aGlzLnBsYXllcl8udGV4dFRyYWNrcygpO1xuICAgIHZhciBhbGxvd011bHRpcGxlU2hvd2luZ1RyYWNrcyA9IHRoaXMub3B0aW9uc18uYWxsb3dNdWx0aXBsZVNob3dpbmdUcmFja3M7XG4gICAgdGhpcy5jbGVhckRpc3BsYXkoKTtcblxuICAgIGlmIChhbGxvd011bHRpcGxlU2hvd2luZ1RyYWNrcykge1xuICAgICAgdmFyIHNob3dpbmdUcmFja3MgPSBbXTtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRyYWNrcy5sZW5ndGg7ICsrX2kpIHtcbiAgICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW19pXTtcblxuICAgICAgICBpZiAodHJhY2subW9kZSAhPT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93aW5nVHJhY2tzLnB1c2godHJhY2spO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZUZvclRyYWNrKHNob3dpbmdUcmFja3MpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gIFRyYWNrIGRpc3BsYXkgcHJpb3JpdGl6YXRpb24gbW9kZWw6IGlmIG11bHRpcGxlIHRyYWNrcyBhcmUgJ3Nob3dpbmcnLFxuICAgIC8vICBkaXNwbGF5IHRoZSBmaXJzdCAnc3VidGl0bGVzJyBvciAnY2FwdGlvbnMnIHRyYWNrIHdoaWNoIGlzICdzaG93aW5nJyxcbiAgICAvLyAgb3RoZXJ3aXNlIGRpc3BsYXkgdGhlIGZpcnN0ICdkZXNjcmlwdGlvbnMnIHRyYWNrIHdoaWNoIGlzICdzaG93aW5nJ1xuXG5cbiAgICB2YXIgZGVzY3JpcHRpb25zVHJhY2sgPSBudWxsO1xuICAgIHZhciBjYXB0aW9uc1N1YnRpdGxlc1RyYWNrID0gbnVsbDtcbiAgICB2YXIgaSA9IHRyYWNrcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgX3RyYWNrID0gdHJhY2tzW2ldO1xuXG4gICAgICBpZiAoX3RyYWNrLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICBpZiAoX3RyYWNrLmtpbmQgPT09ICdkZXNjcmlwdGlvbnMnKSB7XG4gICAgICAgICAgZGVzY3JpcHRpb25zVHJhY2sgPSBfdHJhY2s7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdGlvbnNTdWJ0aXRsZXNUcmFjayA9IF90cmFjaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYXB0aW9uc1N1YnRpdGxlc1RyYWNrKSB7XG4gICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScpICE9PSAnb2ZmJykge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ29mZicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZUZvclRyYWNrKGNhcHRpb25zU3VidGl0bGVzVHJhY2spO1xuICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRpb25zVHJhY2spIHtcbiAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnYXJpYS1saXZlJykgIT09ICdhc3NlcnRpdmUnKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlRm9yVHJhY2soZGVzY3JpcHRpb25zVHJhY2spO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU3R5bGUge0BMaW5rIFRleHRUcmFja30gYWN0aXZlQ3VlcyBhY2NvcmRpbmcgdG8ge0BMaW5rIFRleHRUcmFja1NldHRpbmdzfS5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t9IHRyYWNrXG4gICAqICAgICAgICBUZXh0IHRyYWNrIG9iamVjdCBjb250YWluaW5nIGFjdGl2ZSBjdWVzIHRvIHN0eWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVEaXNwbGF5U3RhdGUgPSBmdW5jdGlvbiB1cGRhdGVEaXNwbGF5U3RhdGUodHJhY2spIHtcbiAgICB2YXIgb3ZlcnJpZGVzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja1NldHRpbmdzLmdldFZhbHVlcygpO1xuICAgIHZhciBjdWVzID0gdHJhY2suYWN0aXZlQ3VlcztcbiAgICB2YXIgaSA9IGN1ZXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIGN1ZSA9IGN1ZXNbaV07XG5cbiAgICAgIGlmICghY3VlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VlRGl2ID0gY3VlLmRpc3BsYXlTdGF0ZTtcblxuICAgICAgaWYgKG92ZXJyaWRlcy5jb2xvcikge1xuICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS5jb2xvciA9IG92ZXJyaWRlcy5jb2xvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJyaWRlcy50ZXh0T3BhY2l0eSkge1xuICAgICAgICB0cnlVcGRhdGVTdHlsZShjdWVEaXYuZmlyc3RDaGlsZCwgJ2NvbG9yJywgY29uc3RydWN0Q29sb3Iob3ZlcnJpZGVzLmNvbG9yIHx8ICcjZmZmJywgb3ZlcnJpZGVzLnRleHRPcGFjaXR5KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVycmlkZXMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG92ZXJyaWRlcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVycmlkZXMuYmFja2dyb3VuZE9wYWNpdHkpIHtcbiAgICAgICAgdHJ5VXBkYXRlU3R5bGUoY3VlRGl2LmZpcnN0Q2hpbGQsICdiYWNrZ3JvdW5kQ29sb3InLCBjb25zdHJ1Y3RDb2xvcihvdmVycmlkZXMuYmFja2dyb3VuZENvbG9yIHx8ICcjMDAwJywgb3ZlcnJpZGVzLmJhY2tncm91bmRPcGFjaXR5KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVycmlkZXMud2luZG93Q29sb3IpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlcy53aW5kb3dPcGFjaXR5KSB7XG4gICAgICAgICAgdHJ5VXBkYXRlU3R5bGUoY3VlRGl2LCAnYmFja2dyb3VuZENvbG9yJywgY29uc3RydWN0Q29sb3Iob3ZlcnJpZGVzLndpbmRvd0NvbG9yLCBvdmVycmlkZXMud2luZG93T3BhY2l0eSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ZURpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvdmVycmlkZXMud2luZG93Q29sb3I7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJyaWRlcy5lZGdlU3R5bGUpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlcy5lZGdlU3R5bGUgPT09ICdkcm9wc2hhZG93Jykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3cgPSBcIjJweCAycHggM3B4IFwiICsgZGFya0dyYXkgKyBcIiwgMnB4IDJweCA0cHggXCIgKyBkYXJrR3JheSArIFwiLCAycHggMnB4IDVweCBcIiArIGRhcmtHcmF5O1xuICAgICAgICB9IGVsc2UgaWYgKG92ZXJyaWRlcy5lZGdlU3R5bGUgPT09ICdyYWlzZWQnKSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUudGV4dFNoYWRvdyA9IFwiMXB4IDFweCBcIiArIGRhcmtHcmF5ICsgXCIsIDJweCAycHggXCIgKyBkYXJrR3JheSArIFwiLCAzcHggM3B4IFwiICsgZGFya0dyYXk7XG4gICAgICAgIH0gZWxzZSBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSA9PT0gJ2RlcHJlc3NlZCcpIHtcbiAgICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93ID0gXCIxcHggMXB4IFwiICsgbGlnaHRHcmF5ICsgXCIsIDAgMXB4IFwiICsgbGlnaHRHcmF5ICsgXCIsIC0xcHggLTFweCBcIiArIGRhcmtHcmF5ICsgXCIsIDAgLTFweCBcIiArIGRhcmtHcmF5O1xuICAgICAgICB9IGVsc2UgaWYgKG92ZXJyaWRlcy5lZGdlU3R5bGUgPT09ICd1bmlmb3JtJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3cgPSBcIjAgMCA0cHggXCIgKyBkYXJrR3JheSArIFwiLCAwIDAgNHB4IFwiICsgZGFya0dyYXkgKyBcIiwgMCAwIDRweCBcIiArIGRhcmtHcmF5ICsgXCIsIDAgMCA0cHggXCIgKyBkYXJrR3JheTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcnJpZGVzLmZvbnRQZXJjZW50ICYmIG92ZXJyaWRlcy5mb250UGVyY2VudCAhPT0gMSkge1xuICAgICAgICB2YXIgZm9udFNpemUgPSB3aW5kb3ckMS5wYXJzZUZsb2F0KGN1ZURpdi5zdHlsZS5mb250U2l6ZSk7XG4gICAgICAgIGN1ZURpdi5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICogb3ZlcnJpZGVzLmZvbnRQZXJjZW50ICsgJ3B4JztcbiAgICAgICAgY3VlRGl2LnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgY3VlRGl2LnN0eWxlLnRvcCA9ICdhdXRvJztcbiAgICAgICAgY3VlRGl2LnN0eWxlLmJvdHRvbSA9ICcycHgnO1xuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcnJpZGVzLmZvbnRGYW1pbHkgJiYgb3ZlcnJpZGVzLmZvbnRGYW1pbHkgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLmZvbnRGYW1pbHkgPT09ICdzbWFsbC1jYXBzJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmZvbnRWYXJpYW50ID0gJ3NtYWxsLWNhcHMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250TWFwW292ZXJyaWRlcy5mb250RmFtaWx5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkIGFuIHtAbGluayBUZXh0VHJhY2t9IHRvIHRvIHRoZSB7QGxpbmsgVGVjaH1zIHtAbGluayBUZXh0VHJhY2tMaXN0fS5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t8VGV4dFRyYWNrW119IHRyYWNrc1xuICAgKiAgICAgICAgVGV4dCB0cmFjayBvYmplY3Qgb3IgdGV4dCB0cmFjayBhcnJheSB0byBiZSBhZGRlZCB0byB0aGUgbGlzdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlRm9yVHJhY2sgPSBmdW5jdGlvbiB1cGRhdGVGb3JUcmFjayh0cmFja3MpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHJhY2tzKSkge1xuICAgICAgdHJhY2tzID0gW3RyYWNrc107XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3ckMS5XZWJWVFQgIT09ICdmdW5jdGlvbicgfHwgdHJhY2tzLmV2ZXJ5KGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgcmV0dXJuICF0cmFjay5hY3RpdmVDdWVzO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1ZXMgPSBbXTsgLy8gcHVzaCBhbGwgYWN0aXZlIHRyYWNrIGN1ZXNcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdHJhY2suYWN0aXZlQ3Vlcy5sZW5ndGg7ICsraikge1xuICAgICAgICBjdWVzLnB1c2godHJhY2suYWN0aXZlQ3Vlc1tqXSk7XG4gICAgICB9XG4gICAgfSAvLyByZW1vdmVzIGFsbCBjdWVzIGJlZm9yZSBpdCBwcm9jZXNzZXMgbmV3IG9uZXNcblxuXG4gICAgd2luZG93JDEuV2ViVlRULnByb2Nlc3NDdWVzKHdpbmRvdyQxLCBjdWVzLCB0aGlzLmVsXyk7IC8vIGFkZCB1bmlxdWUgY2xhc3MgdG8gZWFjaCBsYW5ndWFnZSB0ZXh0IHRyYWNrICYgYWRkIHNldHRpbmdzIHN0eWxpbmcgaWYgbmVjZXNzYXJ5XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0cmFja3MubGVuZ3RoOyArK19pMikge1xuICAgICAgdmFyIF90cmFjazIgPSB0cmFja3NbX2kyXTtcblxuICAgICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IF90cmFjazIuYWN0aXZlQ3Vlcy5sZW5ndGg7ICsrX2opIHtcbiAgICAgICAgdmFyIGN1ZUVsID0gX3RyYWNrMi5hY3RpdmVDdWVzW19qXS5kaXNwbGF5U3RhdGU7XG4gICAgICAgIGFkZENsYXNzKGN1ZUVsLCAndmpzLXRleHQtdHJhY2stY3VlJyk7XG4gICAgICAgIGFkZENsYXNzKGN1ZUVsLCAndmpzLXRleHQtdHJhY2stY3VlLScgKyAoX3RyYWNrMi5sYW5ndWFnZSA/IF90cmFjazIubGFuZ3VhZ2UgOiBfaTIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGxheWVyXy50ZXh0VHJhY2tTZXR0aW5ncykge1xuICAgICAgICB0aGlzLnVwZGF0ZURpc3BsYXlTdGF0ZShfdHJhY2syKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUcmFja0Rpc3BsYXk7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGV4dFRyYWNrRGlzcGxheScsIFRleHRUcmFja0Rpc3BsYXkpO1xuXG4vKipcbiAqIEEgbG9hZGluZyBzcGlubmVyIGZvciB1c2UgZHVyaW5nIHdhaXRpbmcvbG9hZGluZyBldmVudHMuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIExvYWRpbmdTcGlubmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExvYWRpbmdTcGlubmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMb2FkaW5nU3Bpbm5lcigpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTG9hZGluZ1NwaW5uZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBMb2FkaW5nU3Bpbm5lcmBzIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBkb20gZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGlzQXVkaW8gPSB0aGlzLnBsYXllcl8uaXNBdWRpbygpO1xuICAgIHZhciBwbGF5ZXJUeXBlID0gdGhpcy5sb2NhbGl6ZShpc0F1ZGlvID8gJ0F1ZGlvIFBsYXllcicgOiAnVmlkZW8gUGxheWVyJyk7XG4gICAgdmFyIGNvbnRyb2xUZXh0ID0gY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtY29udHJvbC10ZXh0JyxcbiAgICAgIGlubmVySFRNTDogdGhpcy5sb2NhbGl6ZSgnezF9IGlzIGxvYWRpbmcuJywgW3BsYXllclR5cGVdKVxuICAgIH0pO1xuXG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWxvYWRpbmctc3Bpbm5lcicsXG4gICAgICBkaXI6ICdsdHInXG4gICAgfSk7XG5cbiAgICBlbC5hcHBlbmRDaGlsZChjb250cm9sVGV4dCk7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIHJldHVybiBMb2FkaW5nU3Bpbm5lcjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdMb2FkaW5nU3Bpbm5lcicsIExvYWRpbmdTcGlubmVyKTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgYnV0dG9ucy5cbiAqXG4gKiBAZXh0ZW5kcyBDbGlja2FibGVDb21wb25lbnRcbiAqL1xuXG52YXIgQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ2xpY2thYmxlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJ1dHRvbiwgX0NsaWNrYWJsZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgIHJldHVybiBfQ2xpY2thYmxlQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBCdXR0b25gcyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0YWc9XCJidXR0b25cIl1cbiAgICogICAgICAgIFRoZSBlbGVtZW50J3Mgbm9kZSB0eXBlLiBUaGlzIGFyZ3VtZW50IGlzIElHTk9SRUQ6IG5vIG1hdHRlciB3aGF0XG4gICAqICAgICAgICBpcyBwYXNzZWQsIGl0IHdpbGwgYWx3YXlzIGNyZWF0ZSBhIGBidXR0b25gIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcHM9e31dXG4gICAqICAgICAgICBBbiBvYmplY3Qgb2YgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSBzZXQgb24gdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlcz17fV1cbiAgICogICAgICAgIEFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKHRhZywgcHJvcHMsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgdGFnID0gJ2J1dHRvbic7XG4gICAgcHJvcHMgPSBhc3NpZ24oe1xuICAgICAgaW5uZXJIVE1MOiAnPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJ2anMtaWNvbi1wbGFjZWhvbGRlclwiPjwvc3Bhbj4nLFxuICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ1NTQ2xhc3MoKVxuICAgIH0sIHByb3BzKTsgLy8gQWRkIGF0dHJpYnV0ZXMgZm9yIGJ1dHRvbiBlbGVtZW50XG5cbiAgICBhdHRyaWJ1dGVzID0gYXNzaWduKHtcbiAgICAgIC8vIE5lY2Vzc2FyeSBzaW5jZSB0aGUgZGVmYXVsdCBidXR0b24gdHlwZSBpcyBcInN1Ym1pdFwiXG4gICAgICB0eXBlOiAnYnV0dG9uJ1xuICAgIH0sIGF0dHJpYnV0ZXMpO1xuICAgIHZhciBlbCA9IENvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCB0YWcsIHByb3BzLCBhdHRyaWJ1dGVzKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRyb2xUZXh0RWwoZWwpO1xuICAgIHJldHVybiBlbDtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY2hpbGQgYENvbXBvbmVudGAgaW5zaWRlIG9mIHRoaXMgYEJ1dHRvbmAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfENvbXBvbmVudH0gY2hpbGRcbiAgICogICAgICAgIFRoZSBuYW1lIG9yIGluc3RhbmNlIG9mIGEgY2hpbGQgdG8gYWRkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGdldCBwYXNzZWQgdG8gY2hpbGRyZW4gb2ZcbiAgICogICAgICAgIHRoZSBjaGlsZC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiAgICAgICAgIFRoZSBgQ29tcG9uZW50YCB0aGF0IGdldHMgYWRkZWQgYXMgYSBjaGlsZC4gV2hlbiB1c2luZyBhIHN0cmluZyB0aGVcbiAgICogICAgICAgICBgQ29tcG9uZW50YCB3aWxsIGdldCBjcmVhdGVkIGJ5IHRoaXMgcHJvY2Vzcy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiA1XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQoY2hpbGQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICBsb2cud2FybihcIkFkZGluZyBhbiBhY3Rpb25hYmxlICh1c2VyIGNvbnRyb2xsYWJsZSkgY2hpbGQgdG8gYSBCdXR0b24gKFwiICsgY2xhc3NOYW1lICsgXCIpIGlzIG5vdCBzdXBwb3J0ZWQ7IHVzZSBhIENsaWNrYWJsZUNvbXBvbmVudCBpbnN0ZWFkLlwiKTsgLy8gQXZvaWQgdGhlIGVycm9yIG1lc3NhZ2UgZ2VuZXJhdGVkIGJ5IENsaWNrYWJsZUNvbXBvbmVudCdzIGFkZENoaWxkIG1ldGhvZFxuXG4gICAgcmV0dXJuIENvbXBvbmVudC5wcm90b3R5cGUuYWRkQ2hpbGQuY2FsbCh0aGlzLCBjaGlsZCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgYEJ1dHRvbmAgZWxlbWVudCBzbyB0aGF0IGl0IGNhbiBiZSBhY3RpdmF0ZWQgb3IgY2xpY2tlZC4gVXNlIHRoaXMgd2l0aFxuICAgKiB7QGxpbmsgQnV0dG9uI2Rpc2FibGV9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgX0NsaWNrYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuZW5hYmxlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmVsXy5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGBCdXR0b25gIGVsZW1lbnQgc28gdGhhdCBpdCBjYW5ub3QgYmUgYWN0aXZhdGVkIG9yIGNsaWNrZWQuIFVzZSB0aGlzIHdpdGhcbiAgICoge0BsaW5rIEJ1dHRvbiNlbmFibGV9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBfQ2xpY2thYmxlQ29tcG9uZW50LnByb3RvdHlwZS5kaXNhYmxlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhIGBCdXR0b25gIGhhcyBmb2N1cyBhbmQgYGtleWRvd25gIGlzIHRyaWdnZXJlZCB2aWEgYSBrZXlcbiAgICogcHJlc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBnZXQgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBrZXlkb3duXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIFNwYWNlIG9yIEVudGVyIGtleSBvcGVyYXRpb24sIHdoaWNoIGlzIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIgZm9yXG4gICAgLy8gYSBidXR0b24gLSB0aG91Z2ggbm90IGZvciBpdHMgc3VwZXIgY2xhc3MsIENsaWNrYWJsZUNvbXBvbmVudC4gQWxzbyxcbiAgICAvLyBwcmV2ZW50IHRoZSBldmVudCBmcm9tIHByb3BhZ2F0aW5nIHRocm91Z2ggdGhlIERPTSBhbmQgdHJpZ2dlcmluZyBQbGF5ZXJcbiAgICAvLyBob3RrZXlzLiBXZSBkbyBub3QgcHJldmVudERlZmF1bHQgaGVyZSBiZWNhdXNlIHdlIF93YW50XyB0aGUgYnJvd3NlciB0b1xuICAgIC8vIGhhbmRsZSBpdC5cbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnU3BhY2UnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFbnRlcicpKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFBhc3Mga2V5cHJlc3MgaGFuZGxpbmcgdXAgZm9yIHVuc3VwcG9ydGVkIGtleXNcblxuXG4gICAgX0NsaWNrYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uO1xufShDbGlja2FibGVDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0J1dHRvbicsIEJ1dHRvbik7XG5cbi8qKlxuICogVGhlIGluaXRpYWwgcGxheSBidXR0b24gdGhhdCBzaG93cyBiZWZvcmUgdGhlIHZpZGVvIGhhcyBwbGF5ZWQuIFRoZSBoaWRpbmcgb2YgdGhlXG4gKiBgQmlnUGxheUJ1dHRvbmAgZ2V0IGRvbmUgdmlhIENTUyBhbmQgYFBsYXllcmAgc3RhdGVzLlxuICpcbiAqIEBleHRlbmRzIEJ1dHRvblxuICovXG5cbnZhciBCaWdQbGF5QnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKEJpZ1BsYXlCdXR0b24sIF9CdXR0b24pO1xuXG4gIGZ1bmN0aW9uIEJpZ1BsYXlCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLm1vdXNldXNlZF8gPSBmYWxzZTtcblxuICAgIF90aGlzLm9uKCdtb3VzZWRvd24nLCBfdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuIEFsd2F5cyByZXR1cm5zICd2anMtYmlnLXBsYXktYnV0dG9uJy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmlnUGxheUJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiAndmpzLWJpZy1wbGF5LWJ1dHRvbic7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhIGBCaWdQbGF5QnV0dG9uYCBcImNsaWNrZWRcIi4gU2VlIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9XG4gICAqIGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIHBsYXlQcm9taXNlID0gdGhpcy5wbGF5ZXJfLnBsYXkoKTsgLy8gZXhpdCBlYXJseSBpZiBjbGlja2VkIHZpYSB0aGUgbW91c2VcblxuICAgIGlmICh0aGlzLm1vdXNldXNlZF8gJiYgZXZlbnQuY2xpZW50WCAmJiBldmVudC5jbGllbnRZKSB7XG4gICAgICBzaWxlbmNlUHJvbWlzZShwbGF5UHJvbWlzZSk7XG5cbiAgICAgIGlmICh0aGlzLnBsYXllcl8udGVjaCh0cnVlKSkge1xuICAgICAgICB0aGlzLnBsYXllcl8udGVjaCh0cnVlKS5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNiID0gdGhpcy5wbGF5ZXJfLmdldENoaWxkKCdjb250cm9sQmFyJyk7XG4gICAgdmFyIHBsYXlUb2dnbGUgPSBjYiAmJiBjYi5nZXRDaGlsZCgncGxheVRvZ2dsZScpO1xuXG4gICAgaWYgKCFwbGF5VG9nZ2xlKSB7XG4gICAgICB0aGlzLnBsYXllcl8udGVjaCh0cnVlKS5mb2N1cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwbGF5Rm9jdXMgPSBmdW5jdGlvbiBwbGF5Rm9jdXMoKSB7XG4gICAgICByZXR1cm4gcGxheVRvZ2dsZS5mb2N1cygpO1xuICAgIH07XG5cbiAgICBpZiAoaXNQcm9taXNlKHBsYXlQcm9taXNlKSkge1xuICAgICAgcGxheVByb21pc2UudGhlbihwbGF5Rm9jdXMsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRUaW1lb3V0KHBsYXlGb2N1cywgMSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIHRoaXMubW91c2V1c2VkXyA9IGZhbHNlO1xuXG4gICAgX0J1dHRvbi5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgdGhpcy5tb3VzZXVzZWRfID0gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gQmlnUGxheUJ1dHRvbjtcbn0oQnV0dG9uKTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgQmlnUGxheUJ1dHRvbmBzIGNvbnRyb2xzLiBBZGRlZCB0byBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuQmlnUGxheUJ1dHRvbi5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ1BsYXkgVmlkZW8nO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdCaWdQbGF5QnV0dG9uJywgQmlnUGxheUJ1dHRvbik7XG5cbi8qKlxuICogVGhlIGBDbG9zZUJ1dHRvbmAgaXMgYSBge0BsaW5rIEJ1dHRvbn1gIHRoYXQgZmlyZXMgYSBgY2xvc2VgIGV2ZW50IHdoZW5cbiAqIGl0IGdldHMgY2xpY2tlZC5cbiAqXG4gKiBAZXh0ZW5kcyBCdXR0b25cbiAqL1xuXG52YXIgQ2xvc2VCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2xvc2VCdXR0b24sIF9CdXR0b24pO1xuXG4gIC8qKlxuICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHRoaXMgY2xhc3MuXG4gICpcbiAgKiBAcGFyYW0gIHtQbGF5ZXJ9IHBsYXllclxuICAqICAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICpcbiAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zXVxuICAqICAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgKi9cbiAgZnVuY3Rpb24gQ2xvc2VCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuY29udHJvbFRleHQob3B0aW9ucyAmJiBvcHRpb25zLmNvbnRyb2xUZXh0IHx8IF90aGlzLmxvY2FsaXplKCdDbG9zZScpKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAqXG4gICogQHJldHVybiB7c3RyaW5nfVxuICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICovXG5cblxuICB2YXIgX3Byb3RvID0gQ2xvc2VCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtY2xvc2UtYnV0dG9uIFwiICsgX0J1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYSBgQ2xvc2VCdXR0b25gIGdldHMgY2xpY2tlZC4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnQjaGFuZGxlQ2xpY2t9IGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHdoZW5cbiAgICogdGhpcyB3aWxsIGJlIHRyaWdnZXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICogQGZpcmVzIENsb3NlQnV0dG9uI2Nsb3NlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgYSBgQ2xvc2VCdXR0b25gIGlzIGNsaWNrZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgQ2xvc2VCdXR0b24jY2xvc2VcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtidWJibGVzPWZhbHNlXVxuICAgICAqICAgICAgICAgICBzZXQgdG8gZmFsc2Ugc28gdGhhdCB0aGUgY2xvc2UgZXZlbnQgZG9lcyBub3RcbiAgICAgKiAgICAgICAgICAgYnViYmxlIHVwIHRvIHBhcmVudHMgaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXJcbiAgICAgKi9cbiAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ2Nsb3NlJyxcbiAgICAgIGJ1YmJsZXM6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiBhIGBDbG9zZUJ1dHRvbmAgcmVjZWl2ZXMgYVxuICAgKiBga2V5ZG93bmAgZXZlbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGlmIHRoZSBrZXkgaXMgRXNjLCBpdCB3aWxsIHRyaWdnZXIgYSBgY2xpY2tgIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIEVzYyBidXR0b24gd2lsbCB0cmlnZ2VyIGBjbGlja2AgZXZlbnRcbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRXNjJykpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMudHJpZ2dlcignY2xpY2snKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUGFzcyBrZXlwcmVzcyBoYW5kbGluZyB1cCBmb3IgdW5zdXBwb3J0ZWQga2V5c1xuICAgICAgX0J1dHRvbi5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENsb3NlQnV0dG9uO1xufShCdXR0b24pO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0Nsb3NlQnV0dG9uJywgQ2xvc2VCdXR0b24pO1xuXG4vKipcbiAqIEJ1dHRvbiB0byB0b2dnbGUgYmV0d2VlbiBwbGF5IGFuZCBwYXVzZS5cbiAqXG4gKiBAZXh0ZW5kcyBCdXR0b25cbiAqL1xuXG52YXIgUGxheVRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShQbGF5VG9nZ2xlLCBfQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFBsYXlUb2dnbGUocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gc2hvdyBvciBoaWRlIHJlcGxheSBpY29uXG5cbiAgICBvcHRpb25zLnJlcGxheSA9IG9wdGlvbnMucmVwbGF5ID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5yZXBsYXk7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICdwbGF5JywgX3RoaXMuaGFuZGxlUGxheSk7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICdwYXVzZScsIF90aGlzLmhhbmRsZVBhdXNlKTtcblxuICAgIGlmIChvcHRpb25zLnJlcGxheSkge1xuICAgICAgX3RoaXMub24ocGxheWVyLCAnZW5kZWQnLCBfdGhpcy5oYW5kbGVFbmRlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBsYXlUb2dnbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtcGxheS1jb250cm9sIFwiICsgX0J1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYFBsYXlUb2dnbGVgIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8ucGF1c2VkKCkpIHtcbiAgICAgIHRoaXMucGxheWVyXy5wbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyXy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCBvbmNlIGFmdGVyIHRoZSB2aWRlbyBoYXMgZW5kZWQgYW5kIHRoZSB1c2VyIHNlZWtzIHNvIHRoYXRcbiAgICogd2UgY2FuIGNoYW5nZSB0aGUgcmVwbGF5IGJ1dHRvbiBiYWNrIHRvIGEgcGxheSBidXR0b24uXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3NlZWtlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVTZWVrZWQgPSBmdW5jdGlvbiBoYW5kbGVTZWVrZWQoZXZlbnQpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZW5kZWQnKTtcblxuICAgIGlmICh0aGlzLnBsYXllcl8ucGF1c2VkKCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlUGF1c2UoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZVBsYXkoZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkIHRoZSB2anMtcGxheWluZyBjbGFzcyB0byB0aGUgZWxlbWVudCBzbyBpdCBjYW4gY2hhbmdlIGFwcGVhcmFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3BsYXlcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlUGxheSA9IGZ1bmN0aW9uIGhhbmRsZVBsYXkoZXZlbnQpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZW5kZWQnKTtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGF1c2VkJyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXBsYXlpbmcnKTsgLy8gY2hhbmdlIHRoZSBidXR0b24gdGV4dCB0byBcIlBhdXNlXCJcblxuICAgIHRoaXMuY29udHJvbFRleHQoJ1BhdXNlJyk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCB0aGUgdmpzLXBhdXNlZCBjbGFzcyB0byB0aGUgZWxlbWVudCBzbyBpdCBjYW4gY2hhbmdlIGFwcGVhcmFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3BhdXNlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVBhdXNlID0gZnVuY3Rpb24gaGFuZGxlUGF1c2UoZXZlbnQpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGxheWluZycpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTsgLy8gY2hhbmdlIHRoZSBidXR0b24gdGV4dCB0byBcIlBsYXlcIlxuXG4gICAgdGhpcy5jb250cm9sVGV4dCgnUGxheScpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgdGhlIHZqcy1lbmRlZCBjbGFzcyB0byB0aGUgZWxlbWVudCBzbyBpdCBjYW4gY2hhbmdlIGFwcGVhcmFuY2VcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjZW5kZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRW5kZWQgPSBmdW5jdGlvbiBoYW5kbGVFbmRlZChldmVudCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1wbGF5aW5nJyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWVuZGVkJyk7IC8vIGNoYW5nZSB0aGUgYnV0dG9uIHRleHQgdG8gXCJSZXBsYXlcIlxuXG4gICAgdGhpcy5jb250cm9sVGV4dCgnUmVwbGF5Jyk7IC8vIG9uIHRoZSBuZXh0IHNlZWsgcmVtb3ZlIHRoZSByZXBsYXkgYnV0dG9uXG5cbiAgICB0aGlzLm9uZSh0aGlzLnBsYXllcl8sICdzZWVrZWQnLCB0aGlzLmhhbmRsZVNlZWtlZCk7XG4gIH07XG5cbiAgcmV0dXJuIFBsYXlUb2dnbGU7XG59KEJ1dHRvbik7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFBsYXlUb2dnbGVgcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cblBsYXlUb2dnbGUucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdQbGF5JztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGxheVRvZ2dsZScsIFBsYXlUb2dnbGUpO1xuXG4vKipcbiAqIEBmaWxlIGZvcm1hdC10aW1lLmpzXG4gKiBAbW9kdWxlIGZvcm1hdC10aW1lXG4gKi9cblxuLyoqXG4gKiBGb3JtYXQgc2Vjb25kcyBhcyBhIHRpbWUgc3RyaW5nLCBIOk1NOlNTIG9yIE06U1MuIFN1cHBseWluZyBhIGd1aWRlIChpblxuICogc2Vjb25kcykgd2lsbCBmb3JjZSBhIG51bWJlciBvZiBsZWFkaW5nIHplcm9zIHRvIGNvdmVyIHRoZSBsZW5ndGggb2YgdGhlXG4gKiBndWlkZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7bnVtYmVyfSBzZWNvbmRzXG4gKiAgICAgICAgIE51bWJlciBvZiBzZWNvbmRzIHRvIGJlIHR1cm5lZCBpbnRvIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBndWlkZVxuICogICAgICAgICBOdW1iZXIgKGluIHNlY29uZHMpIHRvIG1vZGVsIHRoZSBzdHJpbmcgYWZ0ZXJcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRpbWUgZm9ybWF0dGVkIGFzIEg6TU06U1Mgb3IgTTpTU1xuICovXG52YXIgZGVmYXVsdEltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24gZGVmYXVsdEltcGxlbWVudGF0aW9uKHNlY29uZHMsIGd1aWRlKSB7XG4gIHNlY29uZHMgPSBzZWNvbmRzIDwgMCA/IDAgOiBzZWNvbmRzO1xuICB2YXIgcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAlIDYwKTtcbiAgdmFyIG0gPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCAlIDYwKTtcbiAgdmFyIGggPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcbiAgdmFyIGdtID0gTWF0aC5mbG9vcihndWlkZSAvIDYwICUgNjApO1xuICB2YXIgZ2ggPSBNYXRoLmZsb29yKGd1aWRlIC8gMzYwMCk7IC8vIGhhbmRsZSBpbnZhbGlkIHRpbWVzXG5cbiAgaWYgKGlzTmFOKHNlY29uZHMpIHx8IHNlY29uZHMgPT09IEluZmluaXR5KSB7XG4gICAgLy8gJy0nIGlzIGZhbHNlIGZvciBhbGwgcmVsYXRpb25hbCBvcGVyYXRvcnMgKGUuZy4gPCwgPj0pIHNvIHRoaXMgc2V0dGluZ1xuICAgIC8vIHdpbGwgYWRkIHRoZSBtaW5pbXVtIG51bWJlciBvZiBmaWVsZHMgc3BlY2lmaWVkIGJ5IHRoZSBndWlkZVxuICAgIGggPSBtID0gcyA9ICctJztcbiAgfSAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHNob3cgaG91cnNcblxuXG4gIGggPSBoID4gMCB8fCBnaCA+IDAgPyBoICsgJzonIDogJyc7IC8vIElmIGhvdXJzIGFyZSBzaG93aW5nLCB3ZSBtYXkgbmVlZCB0byBhZGQgYSBsZWFkaW5nIHplcm8uXG4gIC8vIEFsd2F5cyBzaG93IGF0IGxlYXN0IG9uZSBkaWdpdCBvZiBtaW51dGVzLlxuXG4gIG0gPSAoKGggfHwgZ20gPj0gMTApICYmIG0gPCAxMCA/ICcwJyArIG0gOiBtKSArICc6JzsgLy8gQ2hlY2sgaWYgbGVhZGluZyB6ZXJvIGlzIG5lZWQgZm9yIHNlY29uZHNcblxuICBzID0gcyA8IDEwID8gJzAnICsgcyA6IHM7XG4gIHJldHVybiBoICsgbSArIHM7XG59OyAvLyBJbnRlcm5hbCBwb2ludGVyIHRvIHRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uLlxuXG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjtcbi8qKlxuICogUmVwbGFjZXMgdGhlIGRlZmF1bHQgZm9ybWF0VGltZSBpbXBsZW1lbnRhdGlvbiB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbUltcGxlbWVudGF0aW9uXG4gKiAgICAgICAgQSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGhlIGRlZmF1bHQgZm9ybWF0VGltZVxuICogICAgICAgIGltcGxlbWVudGF0aW9uLiBXaWxsIHJlY2VpdmUgdGhlIGN1cnJlbnQgdGltZSBpbiBzZWNvbmRzIGFuZCB0aGVcbiAqICAgICAgICBndWlkZSAoaW4gc2Vjb25kcykgYXMgYXJndW1lbnRzLlxuICovXG5cbmZ1bmN0aW9uIHNldEZvcm1hdFRpbWUoY3VzdG9tSW1wbGVtZW50YXRpb24pIHtcbiAgaW1wbGVtZW50YXRpb24gPSBjdXN0b21JbXBsZW1lbnRhdGlvbjtcbn1cbi8qKlxuICogUmVzZXRzIGZvcm1hdFRpbWUgdG8gdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24uXG4gKi9cblxuZnVuY3Rpb24gcmVzZXRGb3JtYXRUaW1lKCkge1xuICBpbXBsZW1lbnRhdGlvbiA9IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjtcbn1cbi8qKlxuICogRGVsZWdhdGVzIHRvIGVpdGhlciB0aGUgZGVmYXVsdCB0aW1lIGZvcm1hdHRpbmcgZnVuY3Rpb24gb3IgYSBjdXN0b21cbiAqIGZ1bmN0aW9uIHN1cHBsaWVkIHZpYSBgc2V0Rm9ybWF0VGltZWAuXG4gKlxuICogRm9ybWF0cyBzZWNvbmRzIGFzIGEgdGltZSBzdHJpbmcgKEg6TU06U1Mgb3IgTTpTUykuIFN1cHBseWluZyBhXG4gKiBndWlkZSAoaW4gc2Vjb25kcykgd2lsbCBmb3JjZSBhIG51bWJlciBvZiBsZWFkaW5nIHplcm9zIHRvIGNvdmVyIHRoZVxuICogbGVuZ3RoIG9mIHRoZSBndWlkZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAZXhhbXBsZSAgZm9ybWF0VGltZSgxMjUsIDYwMCkgPT09IFwiMDI6MDVcIlxuICogQHBhcmFtICAgIHtudW1iZXJ9IHNlY29uZHNcbiAqICAgICAgICAgICBOdW1iZXIgb2Ygc2Vjb25kcyB0byBiZSB0dXJuZWQgaW50byBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAgICB7bnVtYmVyfSBndWlkZVxuICogICAgICAgICAgIE51bWJlciAoaW4gc2Vjb25kcykgdG8gbW9kZWwgdGhlIHN0cmluZyBhZnRlclxuICpcbiAqIEByZXR1cm4gICB7c3RyaW5nfVxuICogICAgICAgICAgIFRpbWUgZm9ybWF0dGVkIGFzIEg6TU06U1Mgb3IgTTpTU1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWUoc2Vjb25kcywgZ3VpZGUpIHtcbiAgaWYgKGd1aWRlID09PSB2b2lkIDApIHtcbiAgICBndWlkZSA9IHNlY29uZHM7XG4gIH1cblxuICByZXR1cm4gaW1wbGVtZW50YXRpb24oc2Vjb25kcywgZ3VpZGUpO1xufVxuXG4vKipcbiAqIERpc3BsYXlzIHRpbWUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHZpZGVvXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFRpbWVEaXNwbGF5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVEaXNwbGF5LCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFRpbWVEaXNwbGF5KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy50aHJvdHRsZWRVcGRhdGVDb250ZW50ID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudXBkYXRlQ29udGVudCksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ3RpbWV1cGRhdGUnLCBfdGhpcy50aHJvdHRsZWRVcGRhdGVDb250ZW50KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGltZURpc3BsYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuYnVpbGRDU1NDbGFzcygpO1xuXG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUgKyBcIiB2anMtdGltZS1jb250cm9sIHZqcy1jb250cm9sXCIsXG4gICAgICBpbm5lckhUTUw6IFwiPHNwYW4gY2xhc3M9XFxcInZqcy1jb250cm9sLXRleHRcXFwiIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCI+XCIgKyB0aGlzLmxvY2FsaXplKHRoaXMubGFiZWxUZXh0XykgKyBcIlxceEEwPC9zcGFuPlwiXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBjcmVhdGVFbCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lICsgXCItZGlzcGxheVwiXG4gICAgfSwge1xuICAgICAgLy8gdGVsbCBzY3JlZW4gcmVhZGVycyBub3QgdG8gYXV0b21hdGljYWxseSByZWFkIHRoZSB0aW1lIGFzIGl0IGNoYW5nZXNcbiAgICAgICdhcmlhLWxpdmUnOiAnb2ZmJyxcbiAgICAgIC8vIHNwYW4gZWxlbWVudHMgaGF2ZSBubyBpbXBsaWNpdCByb2xlLCBidXQgc29tZSBzY3JlZW4gcmVhZGVycyAobm90YWJseSBWb2ljZU92ZXIpXG4gICAgICAvLyB0cmVhdCB0aGVtIGFzIGEgYnJlYWsgYmV0d2VlbiBpdGVtcyBpbiB0aGUgRE9NIHdoZW4gdXNpbmcgYXJyb3cga2V5c1xuICAgICAgLy8gKG9yIGxlZnQtdG8tcmlnaHQgc3dpcGVzIG9uIGlPUykgdG8gcmVhZCBjb250ZW50cyBvZiBhIHBhZ2UuIFVzaW5nXG4gICAgICAvLyByb2xlPSdwcmVzZW50YXRpb24nIGNhdXNlcyBWb2ljZU92ZXIgdG8gTk9UIHRyZWF0IHRoaXMgc3BhbiBhcyBhIGJyZWFrLlxuICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlVGV4dE5vZGVfKCk7XG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuY29udGVudEVsXyA9IG51bGw7XG4gICAgdGhpcy50ZXh0Tm9kZV8gPSBudWxsO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBcInJlbWFpbmluZyB0aW1lXCIgdGV4dCBub2RlIHdpdGggbmV3IGNvbnRlbnQgdXNpbmcgdGhlXG4gICAqIGNvbnRlbnRzIG9mIHRoZSBgZm9ybWF0dGVkVGltZV9gIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVUZXh0Tm9kZV8gPSBmdW5jdGlvbiB1cGRhdGVUZXh0Tm9kZV8oKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRFbF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aGlsZSAodGhpcy5jb250ZW50RWxfLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRoaXMuY29udGVudEVsXy5yZW1vdmVDaGlsZCh0aGlzLmNvbnRlbnRFbF8uZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0Tm9kZV8gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLmZvcm1hdHRlZFRpbWVfIHx8IHRoaXMuZm9ybWF0VGltZV8oMCkpO1xuICAgIHRoaXMuY29udGVudEVsXy5hcHBlbmRDaGlsZCh0aGlzLnRleHROb2RlXyk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIGZvcm1hdHRlZCB0aW1lIGZvciB0aGlzIGNvbXBvbmVudCB0byB1c2UgaW4gZGlzcGxheS5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSB0aW1lXG4gICAqICAgICAgICAgQSBudW1lcmljIHRpbWUsIGluIHNlY29uZHMuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBBIGZvcm1hdHRlZCB0aW1lXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdFRpbWVfID0gZnVuY3Rpb24gZm9ybWF0VGltZV8odGltZSkge1xuICAgIHJldHVybiBmb3JtYXRUaW1lKHRpbWUpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB0aW1lIGRpc3BsYXkgdGV4dCBub2RlIGlmIGl0IGhhcyB3aGF0IHdhcyBwYXNzZWQgaW4gY2hhbmdlZFxuICAgKiB0aGUgZm9ybWF0dGVkIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAqICAgICAgICBUaGUgdGltZSB0byB1cGRhdGUgdG9cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlRm9ybWF0dGVkVGltZV8gPSBmdW5jdGlvbiB1cGRhdGVGb3JtYXR0ZWRUaW1lXyh0aW1lKSB7XG4gICAgdmFyIGZvcm1hdHRlZFRpbWUgPSB0aGlzLmZvcm1hdFRpbWVfKHRpbWUpO1xuXG4gICAgaWYgKGZvcm1hdHRlZFRpbWUgPT09IHRoaXMuZm9ybWF0dGVkVGltZV8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1hdHRlZFRpbWVfID0gZm9ybWF0dGVkVGltZTtcbiAgICB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZVRleHROb2RlXyk7XG4gIH1cbiAgLyoqXG4gICAqIFRvIGJlIGZpbGxlZCBvdXQgaW4gdGhlIGNoaWxkIGNsYXNzLCBzaG91bGQgdXBkYXRlIHRoZSBkaXNwbGF5ZWQgdGltZVxuICAgKiBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGZhY3QgdGhhdCB0aGUgY3VycmVudCB0aW1lIGhhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHRpbWV1cGRhdGVgICBldmVudCB0aGF0IGNhdXNlZCB0aGlzIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3RpbWV1cGRhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlQ29udGVudCA9IGZ1bmN0aW9uIHVwZGF0ZUNvbnRlbnQoZXZlbnQpIHt9O1xuXG4gIHJldHVybiBUaW1lRGlzcGxheTtcbn0oQ29tcG9uZW50KTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBpcyBhZGRlZCB0byB0aGUgYFRpbWVEaXNwbGF5YCBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cblRpbWVEaXNwbGF5LnByb3RvdHlwZS5sYWJlbFRleHRfID0gJ1RpbWUnO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBUaW1lRGlzcGxheWBzIGNvbnRyb2xzLiBBZGRlZCB0byBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBkZXByZWNhdGVkIGluIHY3OyBjb250cm9sVGV4dF8gaXMgbm90IHVzZWQgaW4gbm9uLWFjdGl2ZSBkaXNwbGF5IENvbXBvbmVudHNcbiAqL1xuXG5UaW1lRGlzcGxheS5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ1RpbWUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUaW1lRGlzcGxheScsIFRpbWVEaXNwbGF5KTtcblxuLyoqXG4gKiBEaXNwbGF5cyB0aGUgY3VycmVudCB0aW1lXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIEN1cnJlbnRUaW1lRGlzcGxheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RpbWVEaXNwbGF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKEN1cnJlbnRUaW1lRGlzcGxheSwgX1RpbWVEaXNwbGF5KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIEN1cnJlbnRUaW1lRGlzcGxheShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9UaW1lRGlzcGxheS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ2VuZGVkJywgX3RoaXMuaGFuZGxlRW5kZWQpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEN1cnJlbnRUaW1lRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiAndmpzLWN1cnJlbnQtdGltZSc7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBjdXJyZW50IHRpbWUgZGlzcGxheVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHRpbWV1cGRhdGVgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjdGltZXVwZGF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVDb250ZW50ID0gZnVuY3Rpb24gdXBkYXRlQ29udGVudChldmVudCkge1xuICAgIC8vIEFsbG93cyBmb3Igc21vb3RoIHNjcnViYmluZywgd2hlbiBwbGF5ZXIgY2FuJ3Qga2VlcCB1cC5cbiAgICB2YXIgdGltZSA9IHRoaXMucGxheWVyXy5zY3J1YmJpbmcoKSA/IHRoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lIDogdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCk7XG4gICAgdGhpcy51cGRhdGVGb3JtYXR0ZWRUaW1lXyh0aW1lKTtcbiAgfVxuICAvKipcbiAgICogV2hlbiB0aGUgcGxheWVyIGZpcmVzIGVuZGVkIHRoZXJlIHNob3VsZCBiZSBubyB0aW1lIGxlZnQuIFNhZGx5XG4gICAqIHRoaXMgaXMgbm90IGFsd2F5cyB0aGUgY2FzZSwgbGV0cyBtYWtlIGl0IHNlZW0gbGlrZSB0aGF0IGlzIHRoZSBjYXNlXG4gICAqIGZvciB1c2Vycy5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBlbmRlZGAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNlbmRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFbmRlZCA9IGZ1bmN0aW9uIGhhbmRsZUVuZGVkKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLnBsYXllcl8uZHVyYXRpb24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlRm9ybWF0dGVkVGltZV8odGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpO1xuICB9O1xuXG4gIHJldHVybiBDdXJyZW50VGltZURpc3BsYXk7XG59KFRpbWVEaXNwbGF5KTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBpcyBhZGRlZCB0byB0aGUgYEN1cnJlbnRUaW1lRGlzcGxheWAgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5DdXJyZW50VGltZURpc3BsYXkucHJvdG90eXBlLmxhYmVsVGV4dF8gPSAnQ3VycmVudCBUaW1lJztcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgQ3VycmVudFRpbWVEaXNwbGF5YHMgY29udHJvbHMuIEFkZGVkIHRvIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogQGRlcHJlY2F0ZWQgaW4gdjc7IGNvbnRyb2xUZXh0XyBpcyBub3QgdXNlZCBpbiBub24tYWN0aXZlIGRpc3BsYXkgQ29tcG9uZW50c1xuICovXG5cbkN1cnJlbnRUaW1lRGlzcGxheS5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ0N1cnJlbnQgVGltZSc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0N1cnJlbnRUaW1lRGlzcGxheScsIEN1cnJlbnRUaW1lRGlzcGxheSk7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIGR1cmF0aW9uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIER1cmF0aW9uRGlzcGxheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RpbWVEaXNwbGF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKER1cmF0aW9uRGlzcGxheSwgX1RpbWVEaXNwbGF5KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIER1cmF0aW9uRGlzcGxheShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9UaW1lRGlzcGxheS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gd2UgZG8gbm90IHdhbnQgdG8vbmVlZCB0byB0aHJvdHRsZSBkdXJhdGlvbiBjaGFuZ2VzLFxuICAgIC8vIGFzIHRoZXkgc2hvdWxkIGFsd2F5cyBkaXNwbGF5IHRoZSBjaGFuZ2VkIGR1cmF0aW9uIGFzXG4gICAgLy8gaXQgaGFzIGNoYW5nZWRcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ2R1cmF0aW9uY2hhbmdlJywgX3RoaXMudXBkYXRlQ29udGVudCk7IC8vIExpc3RlbiB0byBsb2Fkc3RhcnQgYmVjYXVzZSB0aGUgcGxheWVyIGR1cmF0aW9uIGlzIHJlc2V0IHdoZW4gYSBuZXcgbWVkaWEgZWxlbWVudCBpcyBsb2FkZWQsXG4gICAgLy8gYnV0IHRoZSBkdXJhdGlvbmNoYW5nZSBvbiB0aGUgdXNlciBhZ2VudCB3aWxsIG5vdCBmaXJlLlxuICAgIC8vIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3ZpZGVvLmh0bWwjbWVkaWEtZWxlbWVudC1sb2FkLWFsZ29yaXRobX1cblxuXG4gICAgX3RoaXMub24ocGxheWVyLCAnbG9hZHN0YXJ0JywgX3RoaXMudXBkYXRlQ29udGVudCk7IC8vIEFsc28gbGlzdGVuIGZvciB0aW1ldXBkYXRlIChpbiB0aGUgcGFyZW50KSBhbmQgbG9hZGVkbWV0YWRhdGEgYmVjYXVzZSByZW1vdmluZyB0aG9zZVxuICAgIC8vIGxpc3RlbmVycyBjb3VsZCBoYXZlIGJyb2tlbiBkZXBlbmRlbnQgYXBwbGljYXRpb25zL2xpYnJhcmllcy4gVGhlc2VcbiAgICAvLyBjYW4gbGlrZWx5IGJlIHJlbW92ZWQgZm9yIDcuMC5cblxuXG4gICAgX3RoaXMub24ocGxheWVyLCAnbG9hZGVkbWV0YWRhdGEnLCBfdGhpcy50aHJvdHRsZWRVcGRhdGVDb250ZW50KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEdXJhdGlvbkRpc3BsYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gJ3Zqcy1kdXJhdGlvbic7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBkdXJhdGlvbiB0aW1lIGRpc3BsYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgZHVyYXRpb25jaGFuZ2VgLCBgdGltZXVwZGF0ZWAsIG9yIGBsb2FkZWRtZXRhZGF0YWAgZXZlbnQgdGhhdCBjYXVzZWRcbiAgICogICAgICAgIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjZHVyYXRpb25jaGFuZ2VcbiAgICogQGxpc3RlbnMgUGxheWVyI3RpbWV1cGRhdGVcbiAgICogQGxpc3RlbnMgUGxheWVyI2xvYWRlZG1ldGFkYXRhXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUNvbnRlbnQgPSBmdW5jdGlvbiB1cGRhdGVDb250ZW50KGV2ZW50KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCk7XG5cbiAgICBpZiAodGhpcy5kdXJhdGlvbl8gIT09IGR1cmF0aW9uKSB7XG4gICAgICB0aGlzLmR1cmF0aW9uXyA9IGR1cmF0aW9uO1xuICAgICAgdGhpcy51cGRhdGVGb3JtYXR0ZWRUaW1lXyhkdXJhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBEdXJhdGlvbkRpc3BsYXk7XG59KFRpbWVEaXNwbGF5KTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBpcyBhZGRlZCB0byB0aGUgYER1cmF0aW9uRGlzcGxheWAgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5EdXJhdGlvbkRpc3BsYXkucHJvdG90eXBlLmxhYmVsVGV4dF8gPSAnRHVyYXRpb24nO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBEdXJhdGlvbkRpc3BsYXlgcyBjb250cm9scy4gQWRkZWQgdG8gZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqXG4gKiBAZGVwcmVjYXRlZCBpbiB2NzsgY29udHJvbFRleHRfIGlzIG5vdCB1c2VkIGluIG5vbi1hY3RpdmUgZGlzcGxheSBDb21wb25lbnRzXG4gKi9cblxuRHVyYXRpb25EaXNwbGF5LnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnRHVyYXRpb24nO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdEdXJhdGlvbkRpc3BsYXknLCBEdXJhdGlvbkRpc3BsYXkpO1xuXG4vKipcbiAqIFRoZSBzZXBhcmF0b3IgYmV0d2VlbiB0aGUgY3VycmVudCB0aW1lIGFuZCBkdXJhdGlvbi5cbiAqIENhbiBiZSBoaWRkZW4gaWYgaXQncyBub3QgbmVlZGVkIGluIHRoZSBkZXNpZ24uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFRpbWVEaXZpZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVEaXZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaW1lRGl2aWRlcigpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGltZURpdmlkZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGNvbXBvbmVudCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdGltZS1jb250cm9sIHZqcy10aW1lLWRpdmlkZXInLFxuICAgICAgaW5uZXJIVE1MOiAnPGRpdj48c3Bhbj4vPC9zcGFuPjwvZGl2PidcbiAgICB9LCB7XG4gICAgICAvLyB0aGlzIGVsZW1lbnQgYW5kIGl0cyBjb250ZW50cyBjYW4gYmUgaGlkZGVuIGZyb20gYXNzaXN0aXZlIHRlY2hzIHNpbmNlXG4gICAgICAvLyBpdCBpcyBtYWRlIGV4dHJhbmVvdXMgYnkgdGhlIGFubm91bmNlbWVudCBvZiB0aGUgY29udHJvbCB0ZXh0XG4gICAgICAvLyBmb3IgdGhlIGN1cnJlbnQgdGltZSBhbmQgZHVyYXRpb24gZGlzcGxheXNcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVGltZURpdmlkZXI7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGltZURpdmlkZXInLCBUaW1lRGl2aWRlcik7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIHRpbWUgbGVmdCBpbiB0aGUgdmlkZW9cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgUmVtYWluaW5nVGltZURpc3BsYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UaW1lRGlzcGxheSkge1xuICBfaW5oZXJpdHNMb29zZShSZW1haW5pbmdUaW1lRGlzcGxheSwgX1RpbWVEaXNwbGF5KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFJlbWFpbmluZ1RpbWVEaXNwbGF5KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1RpbWVEaXNwbGF5LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAnZHVyYXRpb25jaGFuZ2UnLCBfdGhpcy50aHJvdHRsZWRVcGRhdGVDb250ZW50KTtcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ2VuZGVkJywgX3RoaXMuaGFuZGxlRW5kZWQpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJlbWFpbmluZ1RpbWVEaXNwbGF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuICd2anMtcmVtYWluaW5nLXRpbWUnO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnQgd2l0aCB0aGUgXCJtaW51c1wiIGNoYXJhY3RlZCBwcmVwZW5kIHRvIHRoZSB0aW1lXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCQxKCkge1xuICAgIHZhciBlbCA9IF9UaW1lRGlzcGxheS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzKTtcblxuICAgIGVsLmluc2VydEJlZm9yZShjcmVhdGVFbCgnc3BhbicsIHt9LCB7XG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlXG4gICAgfSwgJy0nKSwgdGhpcy5jb250ZW50RWxfKTtcbiAgICByZXR1cm4gZWw7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSByZW1haW5pbmcgdGltZSBkaXNwbGF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHRpbWV1cGRhdGVgIG9yIGBkdXJhdGlvbmNoYW5nZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciN0aW1ldXBkYXRlXG4gICAqIEBsaXN0ZW5zIFBsYXllciNkdXJhdGlvbmNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVDb250ZW50ID0gZnVuY3Rpb24gdXBkYXRlQ29udGVudChldmVudCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgIT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBAZGVwcmVjYXRlZCBXZSBzaG91bGQgb25seSB1c2UgcmVtYWluaW5nVGltZURpc3BsYXlcbiAgICAvLyBhcyBvZiB2aWRlby5qcyA3XG5cblxuICAgIGlmICh0aGlzLnBsYXllcl8ucmVtYWluaW5nVGltZURpc3BsYXkpIHtcbiAgICAgIHRoaXMudXBkYXRlRm9ybWF0dGVkVGltZV8odGhpcy5wbGF5ZXJfLnJlbWFpbmluZ1RpbWVEaXNwbGF5KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZUZvcm1hdHRlZFRpbWVfKHRoaXMucGxheWVyXy5yZW1haW5pbmdUaW1lKCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogV2hlbiB0aGUgcGxheWVyIGZpcmVzIGVuZGVkIHRoZXJlIHNob3VsZCBiZSBubyB0aW1lIGxlZnQuIFNhZGx5XG4gICAqIHRoaXMgaXMgbm90IGFsd2F5cyB0aGUgY2FzZSwgbGV0cyBtYWtlIGl0IHNlZW0gbGlrZSB0aGF0IGlzIHRoZSBjYXNlXG4gICAqIGZvciB1c2Vycy5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBlbmRlZGAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNlbmRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFbmRlZCA9IGZ1bmN0aW9uIGhhbmRsZUVuZGVkKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLnBsYXllcl8uZHVyYXRpb24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlRm9ybWF0dGVkVGltZV8oMCk7XG4gIH07XG5cbiAgcmV0dXJuIFJlbWFpbmluZ1RpbWVEaXNwbGF5O1xufShUaW1lRGlzcGxheSk7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgaXMgYWRkZWQgdG8gdGhlIGBSZW1haW5pbmdUaW1lRGlzcGxheWAgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5SZW1haW5pbmdUaW1lRGlzcGxheS5wcm90b3R5cGUubGFiZWxUZXh0XyA9ICdSZW1haW5pbmcgVGltZSc7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFJlbWFpbmluZ1RpbWVEaXNwbGF5YHMgY29udHJvbHMuIEFkZGVkIHRvIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogQGRlcHJlY2F0ZWQgaW4gdjc7IGNvbnRyb2xUZXh0XyBpcyBub3QgdXNlZCBpbiBub24tYWN0aXZlIGRpc3BsYXkgQ29tcG9uZW50c1xuICovXG5cblJlbWFpbmluZ1RpbWVEaXNwbGF5LnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnUmVtYWluaW5nIFRpbWUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdSZW1haW5pbmdUaW1lRGlzcGxheScsIFJlbWFpbmluZ1RpbWVEaXNwbGF5KTtcblxuLyoqXG4gKiBEaXNwbGF5cyB0aGUgbGl2ZSBpbmRpY2F0b3Igd2hlbiBkdXJhdGlvbiBpcyBJbmZpbml0eS5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTGl2ZURpc3BsYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGl2ZURpc3BsYXksIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gTGl2ZURpc3BsYXkocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMudXBkYXRlU2hvd2luZygpO1xuXG4gICAgX3RoaXMub24oX3RoaXMucGxheWVyKCksICdkdXJhdGlvbmNoYW5nZScsIF90aGlzLnVwZGF0ZVNob3dpbmcpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMaXZlRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSgpIHtcbiAgICB2YXIgZWwgPSBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbGl2ZS1jb250cm9sIHZqcy1jb250cm9sJ1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb250ZW50RWxfID0gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1saXZlLWRpc3BsYXknLFxuICAgICAgaW5uZXJIVE1MOiBcIjxzcGFuIGNsYXNzPVxcXCJ2anMtY29udHJvbC10ZXh0XFxcIj5cIiArIHRoaXMubG9jYWxpemUoJ1N0cmVhbSBUeXBlJykgKyBcIlxceEEwPC9zcGFuPlwiICsgdGhpcy5sb2NhbGl6ZSgnTElWRScpXG4gICAgfSwge1xuICAgICAgJ2FyaWEtbGl2ZSc6ICdvZmYnXG4gICAgfSk7XG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuY29udGVudEVsXyA9IG51bGw7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBkdXJhdGlvbiB0byBzZWUgaWYgdGhlIExpdmVEaXNwbGF5IHNob3VsZCBiZSBzaG93aW5nIG9yIG5vdC4gVGhlbiBzaG93L2hpZGVcbiAgICogaXQgYWNjb3JkaW5nbHlcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIHtAbGluayBQbGF5ZXIjZHVyYXRpb25jaGFuZ2V9IGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjZHVyYXRpb25jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlU2hvd2luZyA9IGZ1bmN0aW9uIHVwZGF0ZVNob3dpbmcoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXIoKS5kdXJhdGlvbigpID09PSBJbmZpbml0eSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTGl2ZURpc3BsYXk7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTGl2ZURpc3BsYXknLCBMaXZlRGlzcGxheSk7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIGxpdmUgaW5kaWNhdG9yIHdoZW4gZHVyYXRpb24gaXMgSW5maW5pdHkuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFNlZWtUb0xpdmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoU2Vla1RvTGl2ZSwgX0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBTZWVrVG9MaXZlKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLnVwZGF0ZUxpdmVFZGdlU3RhdHVzKCk7XG5cbiAgICBpZiAoX3RoaXMucGxheWVyXy5saXZlVHJhY2tlcikge1xuICAgICAgX3RoaXMub24oX3RoaXMucGxheWVyXy5saXZlVHJhY2tlciwgJ2xpdmVlZGdlY2hhbmdlJywgX3RoaXMudXBkYXRlTGl2ZUVkZ2VTdGF0dXMpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gU2Vla1RvTGl2ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSgpIHtcbiAgICB2YXIgZWwgPSBfQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdidXR0b24nLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtc2Vlay10by1saXZlLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG5cbiAgICB0aGlzLnRleHRFbF8gPSBjcmVhdGVFbCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1zZWVrLXRvLWxpdmUtdGV4dCcsXG4gICAgICBpbm5lckhUTUw6IHRoaXMubG9jYWxpemUoJ0xJVkUnKVxuICAgIH0sIHtcbiAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgIH0pO1xuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMudGV4dEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHN0YXRlIG9mIHRoaXMgYnV0dG9uIGlmIHdlIGFyZSBhdCB0aGUgbGl2ZSBlZGdlXG4gICAqIG9yIG5vdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVMaXZlRWRnZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZUxpdmVFZGdlU3RhdHVzKGUpIHtcbiAgICAvLyBkZWZhdWx0IHRvIGxpdmUgZWRnZVxuICAgIGlmICghdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyIHx8IHRoaXMucGxheWVyXy5saXZlVHJhY2tlci5hdExpdmVFZGdlKCkpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtYXQtbGl2ZS1lZGdlJyk7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KCdTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBwbGF5aW5nIGxpdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtYXQtbGl2ZS1lZGdlJyk7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KCdTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBiZWhpbmQgbGl2ZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT24gY2xpY2sgYnJpbmcgdXMgYXMgbmVhciB0byB0aGUgbGl2ZSBwb2ludCBhcyBwb3NzaWJsZS5cbiAgICogVGhpcyByZXF1aXJlcyB0aGF0IHdlIHdhaXQgZm9yIHRoZSBuZXh0IGBsaXZlLXNlZWthYmxlLWNoYW5nZWBcbiAgICogZXZlbnQgd2hpY2ggd2lsbCBoYXBwZW4gZXZlcnkgc2VnbWVudCBsZW5ndGggc2Vjb25kcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICB0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIuc2Vla1RvTGl2ZUVkZ2UoKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiB0aGUgZWxlbWVudCBhbmQgc3RvcCB0cmFja2luZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyKSB7XG4gICAgICB0aGlzLm9mZih0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIsICdsaXZlZWRnZWNoYW5nZScsIHRoaXMudXBkYXRlTGl2ZUVkZ2VTdGF0dXMpO1xuICAgIH1cblxuICAgIHRoaXMudGV4dEVsXyA9IG51bGw7XG5cbiAgICBfQnV0dG9uLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIFNlZWtUb0xpdmU7XG59KEJ1dHRvbik7XG5cblNlZWtUb0xpdmUucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBwbGF5aW5nIGxpdmUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTZWVrVG9MaXZlJywgU2Vla1RvTGl2ZSk7XG5cbi8qKlxuICogVGhlIGJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgYSBzbGlkZXIuIENhbiBiZSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsLlxuICogRm9yIGluc3RhbmNlIHRoZSB2b2x1bWUgYmFyIG9yIHRoZSBzZWVrIGJhciBvbiBhIHZpZGVvIGlzIGEgc2xpZGVyLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBTbGlkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU2xpZGVyLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzc1xuICAqXG4gICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgKi9cbiAgZnVuY3Rpb24gU2xpZGVyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gU2V0IHByb3BlcnR5IG5hbWVzIHRvIGJhciB0byBtYXRjaCB3aXRoIHRoZSBjaGlsZCBTbGlkZXIgY2xhc3MgaXMgbG9va2luZyBmb3JcblxuICAgIF90aGlzLmJhciA9IF90aGlzLmdldENoaWxkKF90aGlzLm9wdGlvbnNfLmJhck5hbWUpOyAvLyBTZXQgYSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIGNsYXNzIG9uIHRoZSBzbGlkZXIgZGVwZW5kaW5nIG9uIHRoZSBzbGlkZXIgdHlwZVxuXG4gICAgX3RoaXMudmVydGljYWwoISFfdGhpcy5vcHRpb25zXy52ZXJ0aWNhbCk7XG5cbiAgICBfdGhpcy5lbmFibGUoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQXJlIGNvbnRyb2xzIGFyZSBjdXJyZW50bHkgZW5hYmxlZCBmb3IgdGhpcyBzbGlkZXIgb3Igbm90LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIHRydWUgaWYgY29udHJvbHMgYXJlIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTbGlkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5lbmFibGVkID0gZnVuY3Rpb24gZW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbmFibGVkXztcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIGNvbnRyb2xzIGZvciB0aGlzIHNsaWRlciBpZiB0aGV5IGFyZSBkaXNhYmxlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaWYgKHRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgIHRoaXMub24oJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gICAgdGhpcy5vbignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTsgLy8gVE9ETzogZGVwcmVjYXRlZCwgY29udHJvbHN2aXNpYmxlIGRvZXMgbm90IHNlZW0gdG8gYmUgZmlyZWRcblxuICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCAnY29udHJvbHN2aXNpYmxlJywgdGhpcy51cGRhdGUpO1xuXG4gICAgaWYgKHRoaXMucGxheWVyRXZlbnQpIHtcbiAgICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCB0aGlzLnBsYXllckV2ZW50LCB0aGlzLnVwZGF0ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgICB0aGlzLmVuYWJsZWRfID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSBjb250cm9scyBmb3IgdGhpcyBzbGlkZXIgaWYgdGhleSBhcmUgZW5hYmxlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50O1xuICAgIHRoaXMub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vZmYoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vZmYoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICAgIHRoaXMub2ZmKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ2NvbnRyb2xzdmlzaWJsZScsIHRoaXMudXBkYXRlKTtcbiAgICB0aGlzLm9mZihkb2MsICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvYywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICB0aGlzLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgaWYgKHRoaXMucGxheWVyRXZlbnQpIHtcbiAgICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgdGhpcy5wbGF5ZXJFdmVudCwgdGhpcy51cGRhdGUpO1xuICAgIH1cblxuICAgIHRoaXMuZW5hYmxlZF8gPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgU2xpZGVyYHMgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBUeXBlIG9mIGVsZW1lbnQgdG8gY3JlYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BzPXt9XVxuICAgKiAgICAgICAgTGlzdCBvZiBwcm9wZXJ0aWVzIGluIE9iamVjdCBmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXM9e31dXG4gICAqICAgICAgICBsaXN0IG9mIGF0dHJpYnV0ZXMgaW4gT2JqZWN0IGZvcm0uXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwodHlwZSwgcHJvcHMsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBzbGlkZXIgZWxlbWVudCBjbGFzcyB0byBhbGwgc3ViIGNsYXNzZXNcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyAnIHZqcy1zbGlkZXInO1xuICAgIHByb3BzID0gYXNzaWduKHtcbiAgICAgIHRhYkluZGV4OiAwXG4gICAgfSwgcHJvcHMpO1xuICAgIGF0dHJpYnV0ZXMgPSBhc3NpZ24oe1xuICAgICAgJ3JvbGUnOiAnc2xpZGVyJyxcbiAgICAgICdhcmlhLXZhbHVlbm93JzogMCxcbiAgICAgICdhcmlhLXZhbHVlbWluJzogMCxcbiAgICAgICdhcmlhLXZhbHVlbWF4JzogMTAwLFxuICAgICAgJ3RhYkluZGV4JzogMFxuICAgIH0sIGF0dHJpYnV0ZXMpO1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsIHR5cGUsIHByb3BzLCBhdHRyaWJ1dGVzKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudHMgb24gdGhlIGBTbGlkZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgYG1vdXNlZG93bmAgb3IgYHRvdWNoc3RhcnRgIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb25cbiAgICpcbiAgICogQGxpc3RlbnMgbW91c2Vkb3duXG4gICAqIEBsaXN0ZW5zIHRvdWNoc3RhcnRcbiAgICogQGZpcmVzIFNsaWRlciNzbGlkZXJhY3RpdmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgdmFyIGRvYyA9IHRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50O1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gLy8gRG8gbm90IGNhbGwgcHJldmVudERlZmF1bHQoKSBvbiB0b3VjaHN0YXJ0IGluIENocm9tZVxuICAgIC8vIHRvIGF2b2lkIGNvbnNvbGUgd2FybmluZ3MuIFVzZSBhICd0b3VjaC1hY3Rpb246IG5vbmUnIHN0eWxlXG4gICAgLy8gaW5zdGVhZCB0byBwcmV2ZW50IHVuaW50ZW50ZWQgc2Nyb2xsaW5nLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTcvMDEvc2Nyb2xsaW5nLWludGVydmVudGlvblxuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmICFJU19DSFJPTUUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgYmxvY2tUZXh0U2VsZWN0aW9uKCk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXNsaWRpbmcnKTtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgc2xpZGVyIGlzIGluIGFuIGFjdGl2ZSBzdGF0ZVxuICAgICAqXG4gICAgICogQGV2ZW50IFNsaWRlciNzbGlkZXJhY3RpdmVcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3NsaWRlcmFjdGl2ZScpO1xuICAgIHRoaXMub24oZG9jLCAnbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vbihkb2MsICd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vbihkb2MsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUoZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIGBtb3VzZW1vdmVgLCBgdG91Y2htb3ZlYCwgYW5kIGBtb3VzZWRvd25gIGV2ZW50cyBvbiB0aGlzIGBTbGlkZXJgLlxuICAgKiBUaGUgYG1vdXNlbW92ZWAgYW5kIGB0b3VjaG1vdmVgIGV2ZW50cyB3aWxsIG9ubHkgb25seSB0cmlnZ2VyIHRoaXMgZnVuY3Rpb24gZHVyaW5nXG4gICAqIGBtb3VzZWRvd25gIGFuZCBgdG91Y2hzdGFydGAuIFRoaXMgaXMgZHVlIHRvIHtAbGluayBTbGlkZXIjaGFuZGxlTW91c2VEb3dufSBhbmRcbiAgICoge0BsaW5rIFNsaWRlciNoYW5kbGVNb3VzZVVwfS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZWRvd25gLCBgbW91c2Vtb3ZlYCwgYHRvdWNoc3RhcnRgLCBvciBgdG91Y2htb3ZlYCBldmVudCB0aGF0IHRyaWdnZXJlZFxuICAgKiAgICAgICAgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZW1vdmVcbiAgICogQGxpc3RlbnMgdG91Y2htb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge31cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2V1cGAgb3IgYHRvdWNoZW5kYCBldmVudHMgb24gdGhlIGBTbGlkZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgYG1vdXNldXBgIG9yIGB0b3VjaGVuZGAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvbi5cbiAgICpcbiAgICogQGxpc3RlbnMgdG91Y2hlbmRcbiAgICogQGxpc3RlbnMgbW91c2V1cFxuICAgKiBAZmlyZXMgU2xpZGVyI3NsaWRlcmluYWN0aXZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKCkge1xuICAgIHZhciBkb2MgPSB0aGlzLmJhci5lbF8ub3duZXJEb2N1bWVudDtcbiAgICB1bmJsb2NrVGV4dFNlbGVjdGlvbigpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zbGlkaW5nJyk7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIHNsaWRlciBpcyBubyBsb25nZXIgaW4gYW4gYWN0aXZlIHN0YXRlLlxuICAgICAqXG4gICAgICogQGV2ZW50IFNsaWRlciNzbGlkZXJpbmFjdGl2ZVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignc2xpZGVyaW5hY3RpdmUnKTtcbiAgICB0aGlzLm9mZihkb2MsICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvYywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHByb2dyZXNzIGJhciBvZiB0aGUgYFNsaWRlcmAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICAgVGhlIHBlcmNlbnRhZ2Ugb2YgcHJvZ3Jlc3MgdGhlIHByb2dyZXNzIGJhciByZXByZXNlbnRzIGFzIGFcbiAgICogICAgICAgICAgbnVtYmVyIGZyb20gMCB0byAxLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gSW4gVm9sdW1lQmFyIGluaXQgd2UgaGF2ZSBhIHNldFRpbWVvdXQgZm9yIHVwZGF0ZSB0aGF0IHBvcHMgYW5kIHVwZGF0ZVxuICAgIC8vIHRvIHRoZSBlbmQgb2YgdGhlIGV4ZWN1dGlvbiBzdGFjay4gVGhlIHBsYXllciBpcyBkZXN0cm95ZWQgYmVmb3JlIHRoZW5cbiAgICAvLyB1cGRhdGUgd2lsbCBjYXVzZSBhbiBlcnJvclxuICAgIGlmICghdGhpcy5lbF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHNjcnViYmluZywgd2UgY291bGQgdXNlIGEgY2FjaGVkIHZhbHVlIHRvIG1ha2UgdGhlIGhhbmRsZSBrZWVwIHVwXG4gICAgLy8gd2l0aCB0aGUgdXNlcidzIG1vdXNlLiBPbiBIVE1MNSBicm93c2VycyBzY3J1YmJpbmcgaXMgcmVhbGx5IHNtb290aCwgYnV0XG4gICAgLy8gc29tZSBmbGFzaCBwbGF5ZXJzIGFyZSBzbG93LCBzbyB3ZSBtaWdodCB3YW50IHRvIHV0aWxpemUgdGhpcyBsYXRlci5cbiAgICAvLyB2YXIgcHJvZ3Jlc3MgPSAgKHRoaXMucGxheWVyXy5zY3J1YmJpbmcoKSkgPyB0aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZSAvIHRoaXMucGxheWVyXy5kdXJhdGlvbigpIDogdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgLyB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcblxuXG4gICAgdmFyIHByb2dyZXNzID0gdGhpcy5nZXRQZXJjZW50KCk7XG4gICAgdmFyIGJhciA9IHRoaXMuYmFyOyAvLyBJZiB0aGVyZSdzIG5vIGJhci4uLlxuXG4gICAgaWYgKCFiYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByb3RlY3QgYWdhaW5zdCBubyBkdXJhdGlvbiBhbmQgb3RoZXIgZGl2aXNpb24gaXNzdWVzXG5cblxuICAgIGlmICh0eXBlb2YgcHJvZ3Jlc3MgIT09ICdudW1iZXInIHx8IHByb2dyZXNzICE9PSBwcm9ncmVzcyB8fCBwcm9ncmVzcyA8IDAgfHwgcHJvZ3Jlc3MgPT09IEluZmluaXR5KSB7XG4gICAgICBwcm9ncmVzcyA9IDA7XG4gICAgfSAvLyBDb252ZXJ0IHRvIGEgcGVyY2VudGFnZSBmb3Igc2V0dGluZ1xuXG5cbiAgICB2YXIgcGVyY2VudGFnZSA9IChwcm9ncmVzcyAqIDEwMCkudG9GaXhlZCgyKSArICclJztcbiAgICB2YXIgc3R5bGUgPSBiYXIuZWwoKS5zdHlsZTsgLy8gU2V0IHRoZSBuZXcgYmFyIHdpZHRoIG9yIGhlaWdodFxuXG4gICAgdmFyIHNpemVLZXkgPSB0aGlzLnZlcnRpY2FsKCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBpZiAoc3R5bGVbc2l6ZUtleV0gIT09IHBlcmNlbnRhZ2UpIHtcbiAgICAgIHN0eWxlW3NpemVLZXldID0gcGVyY2VudGFnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBkaXN0YW5jZSBmb3Igc2xpZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgU2xpZGVyLlxuICAgKiAgICAgICAgIC0gcG9zaXRpb24ueCBmb3IgdmVydGljYWwgYFNsaWRlcmBzXG4gICAqICAgICAgICAgLSBwb3NpdGlvbi55IGZvciBob3Jpem9udGFsIGBTbGlkZXJgc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jYWxjdWxhdGVEaXN0YW5jZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9pbnRlclBvc2l0aW9uKHRoaXMuZWxfLCBldmVudCk7XG5cbiAgICBpZiAodGhpcy52ZXJ0aWNhbCgpKSB7XG4gICAgICByZXR1cm4gcG9zaXRpb24ueTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb24ueDtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGEgYGtleWRvd25gIGV2ZW50IG9uIHRoZSBgU2xpZGVyYC4gV2F0Y2hlcyBmb3IgbGVmdCwgcmlndGgsIHVwLCBhbmQgZG93blxuICAgKiBhcnJvdyBrZXlzLiBUaGlzIGZ1bmN0aW9uIHdpbGwgb25seSBiZSBjYWxsZWQgd2hlbiB0aGUgc2xpZGVyIGhhcyBmb2N1cy4gU2VlXG4gICAqIHtAbGluayBTbGlkZXIjaGFuZGxlRm9jdXN9IGFuZCB7QGxpbmsgU2xpZGVyI2hhbmRsZUJsdXJ9LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgdGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIExlZnQgYW5kIERvd24gQXJyb3dzXG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0xlZnQnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdEb3duJykpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuc3RlcEJhY2soKTsgLy8gVXAgYW5kIFJpZ2h0IEFycm93c1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnUmlnaHQnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdVcCcpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnN0ZXBGb3J3YXJkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhc3Mga2V5ZG93biBoYW5kbGluZyB1cCBmb3IgdW5zdXBwb3J0ZWQga2V5c1xuICAgICAgX0NvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbmVyIGZvciBjbGljayBldmVudHMgb24gc2xpZGVyLCB1c2VkIHRvIHByZXZlbnQgY2xpY2tzXG4gICAqICAgZnJvbSBidWJibGluZyB1cCB0byBwYXJlbnQgZWxlbWVudHMgbGlrZSBidXR0b24gbWVudXMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgKiAgICAgICAgRXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBvYmplY3QgdG8gcnVuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQvc2V0IGlmIHNsaWRlciBpcyBob3Jpem9udGFsIGZvciB2ZXJ0aWNhbFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtib29sXVxuICAgKiAgICAgICAgLSB0cnVlIGlmIHNsaWRlciBpcyB2ZXJ0aWNhbCxcbiAgICogICAgICAgIC0gZmFsc2UgaXMgaG9yaXpvbnRhbFxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gdHJ1ZSBpZiBzbGlkZXIgaXMgdmVydGljYWwsIGFuZCBnZXR0aW5nXG4gICAqICAgICAgICAgLSBmYWxzZSBpZiB0aGUgc2xpZGVyIGlzIGhvcml6b250YWwsIGFuZCBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZlcnRpY2FsID0gZnVuY3Rpb24gdmVydGljYWwoYm9vbCkge1xuICAgIGlmIChib29sID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnZlcnRpY2FsXyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnZlcnRpY2FsXyA9ICEhYm9vbDtcblxuICAgIGlmICh0aGlzLnZlcnRpY2FsXykge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXNsaWRlci12ZXJ0aWNhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtc2xpZGVyLWhvcml6b250YWwnKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNsaWRlcjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTbGlkZXInLCBTbGlkZXIpO1xuXG4vKipcbiAqIFNob3dzIGxvYWRpbmcgcHJvZ3Jlc3NcbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTG9hZFByb2dyZXNzQmFyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExvYWRQcm9ncmVzc0JhciwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBMb2FkUHJvZ3Jlc3NCYXIocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnBhcnRFbHNfID0gW107XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICdwcm9ncmVzcycsIF90aGlzLnVwZGF0ZSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IExvYWRQcm9ncmVzc0Jhci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1sb2FkLXByb2dyZXNzJyxcbiAgICAgIGlubmVySFRNTDogXCI8c3BhbiBjbGFzcz1cXFwidmpzLWNvbnRyb2wtdGV4dFxcXCI+PHNwYW4+XCIgKyB0aGlzLmxvY2FsaXplKCdMb2FkZWQnKSArIFwiPC9zcGFuPjogPHNwYW4gY2xhc3M9XFxcInZqcy1jb250cm9sLXRleHQtbG9hZGVkLXBlcmNlbnRhZ2VcXFwiPjAlPC9zcGFuPjwvc3Bhbj5cIlxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLnBhcnRFbHNfID0gbnVsbDtcblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHByb2dyZXNzIGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHByb2dyZXNzYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3Byb2dyZXNzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCkge1xuICAgIHZhciBsaXZlVHJhY2tlciA9IHRoaXMucGxheWVyXy5saXZlVHJhY2tlcjtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnBsYXllcl8uYnVmZmVyZWQoKTtcbiAgICB2YXIgZHVyYXRpb24gPSBsaXZlVHJhY2tlciAmJiBsaXZlVHJhY2tlci5pc0xpdmUoKSA/IGxpdmVUcmFja2VyLnNlZWthYmxlRW5kKCkgOiB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICB2YXIgYnVmZmVyZWRFbmQgPSB0aGlzLnBsYXllcl8uYnVmZmVyZWRFbmQoKTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnBhcnRFbHNfO1xuICAgIHZhciBjb250cm9sVGV4dFBlcmNlbnRhZ2UgPSB0aGlzLiQoJy52anMtY29udHJvbC10ZXh0LWxvYWRlZC1wZXJjZW50YWdlJyk7IC8vIGdldCB0aGUgcGVyY2VudCB3aWR0aCBvZiBhIHRpbWUgY29tcGFyZWQgdG8gdGhlIHRvdGFsIGVuZFxuXG4gICAgdmFyIHBlcmNlbnRpZnkgPSBmdW5jdGlvbiBwZXJjZW50aWZ5KHRpbWUsIGVuZCwgcm91bmRlZCkge1xuICAgICAgLy8gbm8gTmFOXG4gICAgICB2YXIgcGVyY2VudCA9IHRpbWUgLyBlbmQgfHwgMDtcbiAgICAgIHBlcmNlbnQgPSAocGVyY2VudCA+PSAxID8gMSA6IHBlcmNlbnQpICogMTAwO1xuXG4gICAgICBpZiAocm91bmRlZCkge1xuICAgICAgICBwZXJjZW50ID0gcGVyY2VudC50b0ZpeGVkKDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGVyY2VudCArICclJztcbiAgICB9OyAvLyB1cGRhdGUgdGhlIHdpZHRoIG9mIHRoZSBwcm9ncmVzcyBiYXJcblxuXG4gICAgdGhpcy5lbF8uc3R5bGUud2lkdGggPSBwZXJjZW50aWZ5KGJ1ZmZlcmVkRW5kLCBkdXJhdGlvbik7IC8vIHVwZGF0ZSB0aGUgY29udHJvbC10ZXh0XG5cbiAgICB0ZXh0Q29udGVudChjb250cm9sVGV4dFBlcmNlbnRhZ2UsIHBlcmNlbnRpZnkoYnVmZmVyZWRFbmQsIGR1cmF0aW9uLCB0cnVlKSk7IC8vIGFkZCBjaGlsZCBlbGVtZW50cyB0byByZXByZXNlbnQgdGhlIGluZGl2aWR1YWwgYnVmZmVyZWQgdGltZSByYW5nZXNcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdGFydCA9IGJ1ZmZlcmVkLnN0YXJ0KGkpO1xuICAgICAgdmFyIGVuZCA9IGJ1ZmZlcmVkLmVuZChpKTtcbiAgICAgIHZhciBwYXJ0ID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmICghcGFydCkge1xuICAgICAgICBwYXJ0ID0gdGhpcy5lbF8uYXBwZW5kQ2hpbGQoY3JlYXRlRWwoKSk7XG4gICAgICAgIGNoaWxkcmVuW2ldID0gcGFydDtcbiAgICAgIH0gLy8gc2V0IHRoZSBwZXJjZW50IGJhc2VkIG9uIHRoZSB3aWR0aCBvZiB0aGUgcHJvZ3Jlc3MgYmFyIChidWZmZXJlZEVuZClcblxuXG4gICAgICBwYXJ0LnN0eWxlLmxlZnQgPSBwZXJjZW50aWZ5KHN0YXJ0LCBidWZmZXJlZEVuZCk7XG4gICAgICBwYXJ0LnN0eWxlLndpZHRoID0gcGVyY2VudGlmeShlbmQgLSBzdGFydCwgYnVmZmVyZWRFbmQpO1xuICAgIH0gLy8gcmVtb3ZlIHVudXNlZCBidWZmZXJlZCByYW5nZSBlbGVtZW50c1xuXG5cbiAgICBmb3IgKHZhciBfaSA9IGNoaWxkcmVuLmxlbmd0aDsgX2kgPiBidWZmZXJlZC5sZW5ndGg7IF9pLS0pIHtcbiAgICAgIHRoaXMuZWxfLnJlbW92ZUNoaWxkKGNoaWxkcmVuW19pIC0gMV0pO1xuICAgIH1cblxuICAgIGNoaWxkcmVuLmxlbmd0aCA9IGJ1ZmZlcmVkLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4gTG9hZFByb2dyZXNzQmFyO1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0xvYWRQcm9ncmVzc0JhcicsIExvYWRQcm9ncmVzc0Jhcik7XG5cbi8qKlxuICogVGltZSB0b29sdGlwcyBkaXNwbGF5IGEgdGltZSBhYm92ZSB0aGUgcHJvZ3Jlc3MgYmFyLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBUaW1lVG9vbHRpcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUaW1lVG9vbHRpcCwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIHtAbGluayBQbGF5ZXJ9IHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBUaW1lVG9vbHRpcChwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMudXBkYXRlID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudXBkYXRlKSwgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSB0aW1lIHRvb2x0aXAgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBUaW1lVG9vbHRpcC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy10aW1lLXRvb2x0aXAnXG4gICAgfSwge1xuICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSB0aW1lIHRvb2x0aXAgcmVsYXRpdmUgdG8gdGhlIGBTZWVrQmFyYC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlZWtCYXJSZWN0XG4gICAqICAgICAgICBUaGUgYENsaWVudFJlY3RgIGZvciB0aGUge0BsaW5rIFNlZWtCYXJ9IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZWVrQmFyUG9pbnRcbiAgICogICAgICAgIEEgbnVtYmVyIGZyb20gMCB0byAxLCByZXByZXNlbnRpbmcgYSBob3Jpem9udGFsIHJlZmVyZW5jZSBwb2ludFxuICAgKiAgICAgICAgZnJvbSB0aGUgbGVmdCBlZGdlIG9mIHRoZSB7QGxpbmsgU2Vla0Jhcn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWtCYXJSZWN0LCBzZWVrQmFyUG9pbnQsIGNvbnRlbnQpIHtcbiAgICB2YXIgdG9vbHRpcFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5lbF8pO1xuICAgIHZhciBwbGF5ZXJSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHRoaXMucGxheWVyXy5lbCgpKTtcbiAgICB2YXIgc2Vla0JhclBvaW50UHggPSBzZWVrQmFyUmVjdC53aWR0aCAqIHNlZWtCYXJQb2ludDsgLy8gZG8gbm90aGluZyBpZiBlaXRoZXIgcmVjdCBpc24ndCBhdmFpbGFibGVcbiAgICAvLyBmb3IgZXhhbXBsZSwgaWYgdGhlIHBsYXllciBpc24ndCBpbiB0aGUgRE9NIGZvciB0ZXN0aW5nXG5cbiAgICBpZiAoIXBsYXllclJlY3QgfHwgIXRvb2x0aXBSZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGlzIGlzIHRoZSBzcGFjZSBsZWZ0IG9mIHRoZSBgc2Vla0JhclBvaW50YCBhdmFpbGFibGUgd2l0aGluIHRoZSBib3VuZHNcbiAgICAvLyBvZiB0aGUgcGxheWVyLiBXZSBjYWxjdWxhdGUgYW55IGdhcCBiZXR3ZWVuIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHBsYXllclxuICAgIC8vIGFuZCB0aGUgbGVmdCBlZGdlIG9mIHRoZSBgU2Vla0JhcmAgYW5kIGFkZCB0aGUgbnVtYmVyIG9mIHBpeGVscyBpbiB0aGVcbiAgICAvLyBgU2Vla0JhcmAgYmVmb3JlIGhpdHRpbmcgdGhlIGBzZWVrQmFyUG9pbnRgXG5cblxuICAgIHZhciBzcGFjZUxlZnRPZlBvaW50ID0gc2Vla0JhclJlY3QubGVmdCAtIHBsYXllclJlY3QubGVmdCArIHNlZWtCYXJQb2ludFB4OyAvLyBUaGlzIGlzIHRoZSBzcGFjZSByaWdodCBvZiB0aGUgYHNlZWtCYXJQb2ludGAgYXZhaWxhYmxlIHdpdGhpbiB0aGUgYm91bmRzXG4gICAgLy8gb2YgdGhlIHBsYXllci4gV2UgY2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIGBzZWVrQmFyUG9pbnRgXG4gICAgLy8gdG8gdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlIGBTZWVrQmFyYCBhbmQgYWRkIHRvIHRoYXQgYW55IGdhcCBiZXR3ZWVuIHRoZVxuICAgIC8vIHJpZ2h0IGVkZ2Ugb2YgdGhlIGBTZWVrQmFyYCBhbmQgdGhlIHBsYXllci5cblxuICAgIHZhciBzcGFjZVJpZ2h0T2ZQb2ludCA9IHNlZWtCYXJSZWN0LndpZHRoIC0gc2Vla0JhclBvaW50UHggKyAocGxheWVyUmVjdC5yaWdodCAtIHNlZWtCYXJSZWN0LnJpZ2h0KTsgLy8gVGhpcyBpcyB0aGUgbnVtYmVyIG9mIHBpeGVscyBieSB3aGljaCB0aGUgdG9vbHRpcCB3aWxsIG5lZWQgdG8gYmUgcHVsbGVkXG4gICAgLy8gZnVydGhlciB0byB0aGUgcmlnaHQgdG8gY2VudGVyIGl0IG92ZXIgdGhlIGBzZWVrQmFyUG9pbnRgLlxuXG4gICAgdmFyIHB1bGxUb29sdGlwQnkgPSB0b29sdGlwUmVjdC53aWR0aCAvIDI7IC8vIEFkanVzdCB0aGUgYHB1bGxUb29sdGlwQnlgIGRpc3RhbmNlIHRvIHRoZSBsZWZ0IG9yIHJpZ2h0IGRlcGVuZGluZyBvblxuICAgIC8vIHRoZSByZXN1bHRzIG9mIHRoZSBzcGFjZSBjYWxjdWxhdGlvbnMgYWJvdmUuXG5cbiAgICBpZiAoc3BhY2VMZWZ0T2ZQb2ludCA8IHB1bGxUb29sdGlwQnkpIHtcbiAgICAgIHB1bGxUb29sdGlwQnkgKz0gcHVsbFRvb2x0aXBCeSAtIHNwYWNlTGVmdE9mUG9pbnQ7XG4gICAgfSBlbHNlIGlmIChzcGFjZVJpZ2h0T2ZQb2ludCA8IHB1bGxUb29sdGlwQnkpIHtcbiAgICAgIHB1bGxUb29sdGlwQnkgPSBzcGFjZVJpZ2h0T2ZQb2ludDtcbiAgICB9IC8vIER1ZSB0byB0aGUgaW1wcmVjaXNpb24gb2YgZGVjaW1hbC9yYXRpbyBiYXNlZCBjYWxjdWxhdGlvbnMgYW5kIHZhcnlpbmdcbiAgICAvLyByb3VuZGluZyBiZWhhdmlvcnMsIHRoZXJlIGFyZSBjYXNlcyB3aGVyZSB0aGUgc3BhY2luZyBhZGp1c3RtZW50IGlzIG9mZlxuICAgIC8vIGJ5IGEgcGl4ZWwgb3IgdHdvLiBUaGlzIGFkZHMgaW5zdXJhbmNlIHRvIHRoZXNlIGNhbGN1bGF0aW9ucy5cblxuXG4gICAgaWYgKHB1bGxUb29sdGlwQnkgPCAwKSB7XG4gICAgICBwdWxsVG9vbHRpcEJ5ID0gMDtcbiAgICB9IGVsc2UgaWYgKHB1bGxUb29sdGlwQnkgPiB0b29sdGlwUmVjdC53aWR0aCkge1xuICAgICAgcHVsbFRvb2x0aXBCeSA9IHRvb2x0aXBSZWN0LndpZHRoO1xuICAgIH1cblxuICAgIHRoaXMuZWxfLnN0eWxlLnJpZ2h0ID0gXCItXCIgKyBwdWxsVG9vbHRpcEJ5ICsgXCJweFwiO1xuICAgIHRoaXMud3JpdGUoY29udGVudCk7XG4gIH1cbiAgLyoqXG4gICAqIFdyaXRlIHRoZSB0aW1lIHRvIHRoZSB0b29sdGlwIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgKiAgICAgICAgVGhlIGZvcm1hdHRlZCB0aW1lIGZvciB0aGUgdG9vbHRpcC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud3JpdGUgPSBmdW5jdGlvbiB3cml0ZShjb250ZW50KSB7XG4gICAgdGV4dENvbnRlbnQodGhpcy5lbF8sIGNvbnRlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGltZSB0b29sdGlwIHJlbGF0aXZlIHRvIHRoZSBgU2Vla0JhcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZWVrQmFyUmVjdFxuICAgKiAgICAgICAgVGhlIGBDbGllbnRSZWN0YCBmb3IgdGhlIHtAbGluayBTZWVrQmFyfSBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vla0JhclBvaW50XG4gICAqICAgICAgICBBIG51bWJlciBmcm9tIDAgdG8gMSwgcmVwcmVzZW50aW5nIGEgaG9yaXpvbnRhbCByZWZlcmVuY2UgcG9pbnRcbiAgICogICAgICAgIGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUge0BsaW5rIFNlZWtCYXJ9XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAqICAgICAgICBUaGUgdGltZSB0byB1cGRhdGUgdGhlIHRvb2x0aXAgdG8sIG5vdCB1c2VkIGR1cmluZyBsaXZlIHBsYXliYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqICAgICAgICBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgZHVyaW5nIHRoZSByZXF1ZXN0IGFuaW1hdGlvbiBmcmFtZVxuICAgKiAgICAgICAgZm9yIHRvb2x0aXBzIHRoYXQgbmVlZCB0byBkbyBhZGRpdGlvbmFsIGFuaW1hdGlvbnMgZnJvbSB0aGUgZGVmYXVsdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVUaW1lID0gZnVuY3Rpb24gdXBkYXRlVGltZShzZWVrQmFyUmVjdCwgc2Vla0JhclBvaW50LCB0aW1lLCBjYikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gZXhpc3RpbmcgckFGIElELCBjYW5jZWwgaXQgc28gd2UgZG9uJ3Qgb3Zlci1xdWV1ZS5cbiAgICBpZiAodGhpcy5yYWZJZF8pIHtcbiAgICAgIHRoaXMuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yYWZJZF8pO1xuICAgIH1cblxuICAgIHRoaXMucmFmSWRfID0gdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRlbnQ7XG5cbiAgICAgIHZhciBkdXJhdGlvbiA9IF90aGlzMi5wbGF5ZXJfLmR1cmF0aW9uKCk7XG5cbiAgICAgIGlmIChfdGhpczIucGxheWVyXy5saXZlVHJhY2tlciAmJiBfdGhpczIucGxheWVyXy5saXZlVHJhY2tlci5pc0xpdmUoKSkge1xuICAgICAgICB2YXIgbGl2ZVdpbmRvdyA9IF90aGlzMi5wbGF5ZXJfLmxpdmVUcmFja2VyLmxpdmVXaW5kb3coKTtcblxuICAgICAgICB2YXIgc2Vjb25kc0JlaGluZCA9IGxpdmVXaW5kb3cgLSBzZWVrQmFyUG9pbnQgKiBsaXZlV2luZG93O1xuICAgICAgICBjb250ZW50ID0gKHNlY29uZHNCZWhpbmQgPCAxID8gJycgOiAnLScpICsgZm9ybWF0VGltZShzZWNvbmRzQmVoaW5kLCBsaXZlV2luZG93KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBmb3JtYXRUaW1lKHRpbWUsIGR1cmF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLnVwZGF0ZShzZWVrQmFyUmVjdCwgc2Vla0JhclBvaW50LCBjb250ZW50KTtcblxuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVUb29sdGlwO1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RpbWVUb29sdGlwJywgVGltZVRvb2x0aXApO1xuXG4vKipcbiAqIFVzZWQgYnkge0BsaW5rIFNlZWtCYXJ9IHRvIGRpc3BsYXkgbWVkaWEgcGxheWJhY2sgcHJvZ3Jlc3MgYXMgcGFydCBvZiB0aGVcbiAqIHtAbGluayBQcm9ncmVzc0NvbnRyb2x9LlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBQbGF5UHJvZ3Jlc3NCYXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGxheVByb2dyZXNzQmFyLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUge0BsaW5rIFBsYXllcn0gdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFBsYXlQcm9ncmVzc0JhcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMudXBkYXRlID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudXBkYXRlKSwgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSB0aGUgRE9NIGVsZW1lbnQgZm9yIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGxheVByb2dyZXNzQmFyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBsYXktcHJvZ3Jlc3MgdmpzLXNsaWRlci1iYXInXG4gICAgfSwge1xuICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVucXVldWVzIHVwZGF0ZXMgdG8gaXRzIG93biBET00gYXMgd2VsbCBhcyB0aGUgRE9NIG9mIGl0c1xuICAgKiB7QGxpbmsgVGltZVRvb2x0aXB9IGNoaWxkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2Vla0JhclJlY3RcbiAgICogICAgICAgIFRoZSBgQ2xpZW50UmVjdGAgZm9yIHRoZSB7QGxpbmsgU2Vla0Jhcn0gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZWtCYXJQb2ludFxuICAgKiAgICAgICAgQSBudW1iZXIgZnJvbSAwIHRvIDEsIHJlcHJlc2VudGluZyBhIGhvcml6b250YWwgcmVmZXJlbmNlIHBvaW50XG4gICAqICAgICAgICBmcm9tIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHtAbGluayBTZWVrQmFyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2Vla0JhclJlY3QsIHNlZWtCYXJQb2ludCkge1xuICAgIHZhciB0aW1lVG9vbHRpcCA9IHRoaXMuZ2V0Q2hpbGQoJ3RpbWVUb29sdGlwJyk7XG5cbiAgICBpZiAoIXRpbWVUb29sdGlwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRpbWUgPSB0aGlzLnBsYXllcl8uc2NydWJiaW5nKCkgPyB0aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZSA6IHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO1xuICAgIHRpbWVUb29sdGlwLnVwZGF0ZVRpbWUoc2Vla0JhclJlY3QsIHNlZWtCYXJQb2ludCwgdGltZSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsYXlQcm9ncmVzc0Jhcjtcbn0oQ29tcG9uZW50KTtcbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIGZvciB7QGxpbmsgUGxheVByb2dyZXNzQmFyfS5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5cblBsYXlQcm9ncmVzc0Jhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbXVxufTsgLy8gVGltZSB0b29sdGlwcyBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGEgcGxheWVyIG9uIG1vYmlsZSBkZXZpY2VzXG5cbmlmICghSVNfSU9TICYmICFJU19BTkRST0lEKSB7XG4gIFBsYXlQcm9ncmVzc0Jhci5wcm90b3R5cGUub3B0aW9uc18uY2hpbGRyZW4ucHVzaCgndGltZVRvb2x0aXAnKTtcbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5UHJvZ3Jlc3NCYXInLCBQbGF5UHJvZ3Jlc3NCYXIpO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgTW91c2VUaW1lRGlzcGxheX0gY29tcG9uZW50IHRyYWNrcyBtb3VzZSBtb3ZlbWVudCBvdmVyIHRoZVxuICoge0BsaW5rIFByb2dyZXNzQ29udHJvbH0uIEl0IGRpc3BsYXlzIGFuIGluZGljYXRvciBhbmQgYSB7QGxpbmsgVGltZVRvb2x0aXB9XG4gKiBpbmRpY2F0aW5nIHRoZSB0aW1lIHdoaWNoIGlzIHJlcHJlc2VudGVkIGJ5IGEgZ2l2ZW4gcG9pbnQgaW4gdGhlXG4gKiB7QGxpbmsgUHJvZ3Jlc3NDb250cm9sfS5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTW91c2VUaW1lRGlzcGxheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb3VzZVRpbWVEaXNwbGF5LCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUge0BsaW5rIFBsYXllcn0gdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIE1vdXNlVGltZURpc3BsYXkocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnVwZGF0ZSA9IHRocm90dGxlKGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnVwZGF0ZSksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgRE9NIGVsZW1lbnQgZm9yIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTW91c2VUaW1lRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1tb3VzZS1kaXNwbGF5J1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFbnF1ZXVlcyB1cGRhdGVzIHRvIGl0cyBvd24gRE9NIGFzIHdlbGwgYXMgdGhlIERPTSBvZiBpdHNcbiAgICoge0BsaW5rIFRpbWVUb29sdGlwfSBjaGlsZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlZWtCYXJSZWN0XG4gICAqICAgICAgICBUaGUgYENsaWVudFJlY3RgIGZvciB0aGUge0BsaW5rIFNlZWtCYXJ9IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZWVrQmFyUG9pbnRcbiAgICogICAgICAgIEEgbnVtYmVyIGZyb20gMCB0byAxLCByZXByZXNlbnRpbmcgYSBob3Jpem9udGFsIHJlZmVyZW5jZSBwb2ludFxuICAgKiAgICAgICAgZnJvbSB0aGUgbGVmdCBlZGdlIG9mIHRoZSB7QGxpbmsgU2Vla0Jhcn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWtCYXJSZWN0LCBzZWVrQmFyUG9pbnQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB0aW1lID0gc2Vla0JhclBvaW50ICogdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCk7XG4gICAgdGhpcy5nZXRDaGlsZCgndGltZVRvb2x0aXAnKS51cGRhdGVUaW1lKHNlZWtCYXJSZWN0LCBzZWVrQmFyUG9pbnQsIHRpbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5lbF8uc3R5bGUubGVmdCA9IHNlZWtCYXJSZWN0LndpZHRoICogc2Vla0JhclBvaW50ICsgXCJweFwiO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNb3VzZVRpbWVEaXNwbGF5O1xufShDb21wb25lbnQpO1xuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgZm9yIGBNb3VzZVRpbWVEaXNwbGF5YFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuTW91c2VUaW1lRGlzcGxheS5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ3RpbWVUb29sdGlwJ11cbn07XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ01vdXNlVGltZURpc3BsYXknLCBNb3VzZVRpbWVEaXNwbGF5KTtcblxudmFyIFNURVBfU0VDT05EUyA9IDU7IC8vIFRoZSBtdWx0aXBsaWVyIG9mIFNURVBfU0VDT05EUyB0aGF0IFBnVXAvUGdEb3duIG1vdmUgdGhlIHRpbWVsaW5lLlxuXG52YXIgUEFHRV9LRVlfTVVMVElQTElFUiA9IDEyOyAvLyBUaGUgaW50ZXJ2YWwgYXQgd2hpY2ggdGhlIGJhciBzaG91bGQgdXBkYXRlIGFzIGl0IHByb2dyZXNzZXMuXG5cbnZhciBVUERBVEVfUkVGUkVTSF9JTlRFUlZBTCQxID0gMzA7XG4vKipcbiAqIFNlZWsgYmFyIGFuZCBjb250YWluZXIgZm9yIHRoZSBwcm9ncmVzcyBiYXJzLiBVc2VzIHtAbGluayBQbGF5UHJvZ3Jlc3NCYXJ9XG4gKiBhcyBpdHMgYGJhcmAuXG4gKlxuICogQGV4dGVuZHMgU2xpZGVyXG4gKi9cblxudmFyIFNlZWtCYXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TbGlkZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoU2Vla0JhciwgX1NsaWRlcik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBTZWVrQmFyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1NsaWRlci5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLnNldEV2ZW50SGFuZGxlcnNfKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFNlZWtCYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRFdmVudEhhbmRsZXJzXyA9IGZ1bmN0aW9uIHNldEV2ZW50SGFuZGxlcnNfKCkge1xuICAgIHRoaXMudXBkYXRlID0gdGhyb3R0bGUoYmluZCh0aGlzLCB0aGlzLnVwZGF0ZSksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMJDEpO1xuICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlKTtcbiAgICB0aGlzLm9uKHRoaXMucGxheWVyXywgJ2VuZGVkJywgdGhpcy5oYW5kbGVFbmRlZCk7XG4gICAgdGhpcy5vbih0aGlzLnBsYXllcl8sICdkdXJhdGlvbmNoYW5nZScsIHRoaXMudXBkYXRlKTtcblxuICAgIGlmICh0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIpIHtcbiAgICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLCAnbGl2ZWVkZ2VjaGFuZ2UnLCB0aGlzLnVwZGF0ZSk7XG4gICAgfSAvLyB3aGVuIHBsYXlpbmcsIGxldCdzIGVuc3VyZSB3ZSBzbW9vdGhseSB1cGRhdGUgdGhlIHBsYXkgcHJvZ3Jlc3MgYmFyXG4gICAgLy8gdmlhIGFuIGludGVydmFsXG5cblxuICAgIHRoaXMudXBkYXRlSW50ZXJ2YWwgPSBudWxsO1xuICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCBbJ3BsYXlpbmcnXSwgdGhpcy5lbmFibGVJbnRlcnZhbF8pO1xuICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCBbJ2VuZGVkJywgJ3BhdXNlJywgJ3dhaXRpbmcnXSwgdGhpcy5kaXNhYmxlSW50ZXJ2YWxfKTsgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgdGhlIHBsYXkgcHJvZ3Jlc3MgaWYgdGhlIGRvY3VtZW50IGlzIGhpZGRlbixcbiAgICAvLyBhbHNvLCB0aGlzIGNhdXNlcyB0aGUgQ1BVIHRvIHNwaWtlIGFuZCBldmVudHVhbGx5IGNyYXNoIHRoZSBwYWdlIG9uIElFMTEuXG5cbiAgICBpZiAoJ2hpZGRlbicgaW4gZG9jdW1lbnQgJiYgJ3Zpc2liaWxpdHlTdGF0ZScgaW4gZG9jdW1lbnQpIHtcbiAgICAgIHRoaXMub24oZG9jdW1lbnQsICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy50b2dnbGVWaXNpYmlsaXR5Xyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50b2dnbGVWaXNpYmlsaXR5XyA9IGZ1bmN0aW9uIHRvZ2dsZVZpc2liaWxpdHlfKGUpIHtcbiAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICB0aGlzLmRpc2FibGVJbnRlcnZhbF8oZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5hYmxlSW50ZXJ2YWxfKCk7IC8vIHdlIGp1c3Qgc3dpdGNoZWQgYmFjayB0byB0aGUgcGFnZSBhbmQgc29tZW9uZSBtYXkgYmUgbG9va2luZywgc28sIHVwZGF0ZSBBU0FQXG5cbiAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmVuYWJsZUludGVydmFsXyA9IGZ1bmN0aW9uIGVuYWJsZUludGVydmFsXygpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLnVwZGF0ZUludGVydmFsKTtcbiAgICB0aGlzLnVwZGF0ZUludGVydmFsID0gdGhpcy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzMi51cGRhdGUpO1xuICAgIH0sIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMJDEpO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlSW50ZXJ2YWxfID0gZnVuY3Rpb24gZGlzYWJsZUludGVydmFsXyhlKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5saXZlVHJhY2tlciAmJiB0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIuaXNMaXZlKCkgJiYgZS50eXBlICE9PSAnZW5kZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckludGVydmFsKHRoaXMudXBkYXRlSW50ZXJ2YWwpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfU2xpZGVyLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcHJvZ3Jlc3MtaG9sZGVyJ1xuICAgIH0sIHtcbiAgICAgICdhcmlhLWxhYmVsJzogdGhpcy5sb2NhbGl6ZSgnUHJvZ3Jlc3MgQmFyJylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBwbGF5IHByb2dyZXNzIGJhciBhbmQgYWNjZXNzaWJpbGl0eVxuICAgKiBhdHRyaWJ1dGVzIHRvIHdoYXRldmVyIGlzIHBhc3NlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRUaW1lXG4gICAqICAgICAgICBUaGUgY3VycmVudFRpbWUgdmFsdWUgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgYWNjZXNzaWJpbGl0eVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudFxuICAgKiAgICAgICAgVGhlIHBlcmNlbnRhZ2UgYXMgYSBkZWNpbWFsIHRoYXQgdGhlIGJhciBzaG91bGQgYmUgZmlsbGVkIGZyb20gMC0xLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVfID0gZnVuY3Rpb24gdXBkYXRlXyhjdXJyZW50VGltZSwgcGVyY2VudCkge1xuICAgIHZhciBsaXZlVHJhY2tlciA9IHRoaXMucGxheWVyXy5saXZlVHJhY2tlcjtcbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcblxuICAgIGlmIChsaXZlVHJhY2tlciAmJiBsaXZlVHJhY2tlci5pc0xpdmUoKSkge1xuICAgICAgZHVyYXRpb24gPSB0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIubGl2ZUN1cnJlbnRUaW1lKCk7XG4gICAgfSAvLyBtYWNoaW5lIHJlYWRhYmxlIHZhbHVlIG9mIHByb2dyZXNzIGJhciAocGVyY2VudGFnZSBjb21wbGV0ZSlcblxuXG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgKHBlcmNlbnQgKiAxMDApLnRvRml4ZWQoMikpOyAvLyBodW1hbiByZWFkYWJsZSB2YWx1ZSBvZiBwcm9ncmVzcyBiYXIgKHRpbWUgY29tcGxldGUpXG5cbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWV0ZXh0JywgdGhpcy5sb2NhbGl6ZSgncHJvZ3Jlc3MgYmFyIHRpbWluZzogY3VycmVudFRpbWU9ezF9IGR1cmF0aW9uPXsyfScsIFtmb3JtYXRUaW1lKGN1cnJlbnRUaW1lLCBkdXJhdGlvbiksIGZvcm1hdFRpbWUoZHVyYXRpb24sIGR1cmF0aW9uKV0sICd7MX0gb2YgezJ9JykpOyAvLyBVcGRhdGUgdGhlIGBQbGF5UHJvZ3Jlc3NCYXJgLlxuXG4gICAgaWYgKHRoaXMuYmFyKSB7XG4gICAgICB0aGlzLmJhci51cGRhdGUoZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHRoaXMuZWxfKSwgcGVyY2VudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHNlZWsgYmFyJ3MgVUkuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgdGltZXVwZGF0ZWAgb3IgYGVuZGVkYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3RpbWV1cGRhdGVcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgICBUaGUgY3VycmVudCBwZXJjZW50IGF0IGEgbnVtYmVyIGZyb20gMC0xXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCkge1xuICAgIC8vIGlmIHRoZSBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhlbiB0aGlzIGVsZW1lbnQgaXMgaGlkZGVuLCBpbiB3aGljaCBjYXNlXG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgaXQuXG4gICAgaWYgKHRoaXMuZWwoKS5vZmZzZXRQYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGVyY2VudCA9IF9TbGlkZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy51cGRhdGVfKHRoaXMuZ2V0Q3VycmVudFRpbWVfKCksIHBlcmNlbnQpO1xuICAgIHJldHVybiBwZXJjZW50O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIG9mIGN1cnJlbnQgdGltZSBidXQgYWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLFxuICAgKiB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdGltZSB2YWx1ZSB0byBkaXNwbGF5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEN1cnJlbnRUaW1lXyA9IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lXygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJfLnNjcnViYmluZygpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgfVxuICAvKipcbiAgICogV2Ugd2FudCB0aGUgc2VlayBiYXIgdG8gYmUgZnVsbCBvbiBlbmRlZFxuICAgKiBubyBtYXR0ZXIgd2hhdCB0aGUgYWN0dWFsIGludGVybmFsIHZhbHVlcyBhcmUuIHNvIHdlIGZvcmNlIGl0LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHRpbWV1cGRhdGVgIG9yIGBlbmRlZGAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNlbmRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFbmRlZCA9IGZ1bmN0aW9uIGhhbmRsZUVuZGVkKGV2ZW50KSB7XG4gICAgdGhpcy51cGRhdGVfKHRoaXMucGxheWVyXy5kdXJhdGlvbigpLCAxKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBwZXJjZW50YWdlIG9mIG1lZGlhIHBsYXllZCBzbyBmYXIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGVyY2VudGFnZSBvZiBtZWRpYSBwbGF5ZWQgc28gZmFyICgwIHRvIDEpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRQZXJjZW50ID0gZnVuY3Rpb24gZ2V0UGVyY2VudCgpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLmdldEN1cnJlbnRUaW1lXygpO1xuICAgIHZhciBwZXJjZW50O1xuICAgIHZhciBsaXZlVHJhY2tlciA9IHRoaXMucGxheWVyXy5saXZlVHJhY2tlcjtcblxuICAgIGlmIChsaXZlVHJhY2tlciAmJiBsaXZlVHJhY2tlci5pc0xpdmUoKSkge1xuICAgICAgcGVyY2VudCA9IChjdXJyZW50VGltZSAtIGxpdmVUcmFja2VyLnNlZWthYmxlU3RhcnQoKSkgLyBsaXZlVHJhY2tlci5saXZlV2luZG93KCk7IC8vIHByZXZlbnQgdGhlIHBlcmNlbnQgZnJvbSBjaGFuZ2luZyBhdCB0aGUgbGl2ZSBlZGdlXG5cbiAgICAgIGlmIChsaXZlVHJhY2tlci5hdExpdmVFZGdlKCkpIHtcbiAgICAgICAgcGVyY2VudCA9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcmNlbnQgPSBjdXJyZW50VGltZSAvIHRoaXMucGxheWVyXy5kdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBwZXJjZW50ID49IDEgPyAxIDogcGVyY2VudCB8fCAwO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2UgZG93biBvbiBzZWVrIGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFpc1NpbmdsZUxlZnRDbGljayhldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFN0b3AgZXZlbnQgcHJvcGFnYXRpb24gdG8gcHJldmVudCBkb3VibGUgZmlyZSBpbiBwcm9ncmVzcy1jb250cm9sLmpzXG5cblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMucGxheWVyXy5zY3J1YmJpbmcodHJ1ZSk7XG4gICAgdGhpcy52aWRlb1dhc1BsYXlpbmcgPSAhdGhpcy5wbGF5ZXJfLnBhdXNlZCgpO1xuICAgIHRoaXMucGxheWVyXy5wYXVzZSgpO1xuXG4gICAgX1NsaWRlci5wcm90b3R5cGUuaGFuZGxlTW91c2VEb3duLmNhbGwodGhpcywgZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2UgbW92ZSBvbiBzZWVrIGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZW1vdmVgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZW1vdmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgaWYgKCFpc1NpbmdsZUxlZnRDbGljayhldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV3VGltZTtcbiAgICB2YXIgZGlzdGFuY2UgPSB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KTtcbiAgICB2YXIgbGl2ZVRyYWNrZXIgPSB0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXI7XG5cbiAgICBpZiAoIWxpdmVUcmFja2VyIHx8ICFsaXZlVHJhY2tlci5pc0xpdmUoKSkge1xuICAgICAgbmV3VGltZSA9IGRpc3RhbmNlICogdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCk7IC8vIERvbid0IGxldCB2aWRlbyBlbmQgd2hpbGUgc2NydWJiaW5nLlxuXG4gICAgICBpZiAobmV3VGltZSA9PT0gdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpIHtcbiAgICAgICAgbmV3VGltZSA9IG5ld1RpbWUgLSAwLjE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzZWVrYWJsZVN0YXJ0ID0gbGl2ZVRyYWNrZXIuc2Vla2FibGVTdGFydCgpO1xuICAgICAgdmFyIHNlZWthYmxlRW5kID0gbGl2ZVRyYWNrZXIubGl2ZUN1cnJlbnRUaW1lKCk7XG4gICAgICBuZXdUaW1lID0gc2Vla2FibGVTdGFydCArIGRpc3RhbmNlICogbGl2ZVRyYWNrZXIubGl2ZVdpbmRvdygpOyAvLyBEb24ndCBsZXQgdmlkZW8gZW5kIHdoaWxlIHNjcnViYmluZy5cblxuICAgICAgaWYgKG5ld1RpbWUgPj0gc2Vla2FibGVFbmQpIHtcbiAgICAgICAgbmV3VGltZSA9IHNlZWthYmxlRW5kO1xuICAgICAgfSAvLyBDb21wZW5zYXRlIGZvciBwcmVjaXNpb24gZGlmZmVyZW5jZXMgc28gdGhhdCBjdXJyZW50VGltZSBpcyBub3QgbGVzc1xuICAgICAgLy8gdGhhbiBzZWVrYWJsZSBzdGFydFxuXG5cbiAgICAgIGlmIChuZXdUaW1lIDw9IHNlZWthYmxlU3RhcnQpIHtcbiAgICAgICAgbmV3VGltZSA9IHNlZWthYmxlU3RhcnQgKyAwLjE7XG4gICAgICB9IC8vIE9uIGFuZHJvaWQgc2Vla2FibGVFbmQgY2FuIGJlIEluZmluaXR5IHNvbWV0aW1lcyxcbiAgICAgIC8vIHRoaXMgd2lsbCBjYXVzZSBuZXdUaW1lIHRvIGJlIEluZmluaXR5LCB3aGljaCBpc1xuICAgICAgLy8gbm90IGEgdmFsaWQgY3VycmVudFRpbWUuXG5cblxuICAgICAgaWYgKG5ld1RpbWUgPT09IEluZmluaXR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIFNldCBuZXcgdGltZSAodGVsbCBwbGF5ZXIgdG8gc2VlayB0byBuZXcgdGltZSlcblxuXG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKG5ld1RpbWUpO1xuICB9O1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgX1NsaWRlci5wcm90b3R5cGUuZW5hYmxlLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgbW91c2VUaW1lRGlzcGxheSA9IHRoaXMuZ2V0Q2hpbGQoJ21vdXNlVGltZURpc3BsYXknKTtcblxuICAgIGlmICghbW91c2VUaW1lRGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdXNlVGltZURpc3BsYXkuc2hvdygpO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBfU2xpZGVyLnByb3RvdHlwZS5kaXNhYmxlLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgbW91c2VUaW1lRGlzcGxheSA9IHRoaXMuZ2V0Q2hpbGQoJ21vdXNlVGltZURpc3BsYXknKTtcblxuICAgIGlmICghbW91c2VUaW1lRGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdXNlVGltZURpc3BsYXkuaGlkZSgpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2UgdXAgb24gc2VlayBiYXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgbW91c2V1cGAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNldXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoZXZlbnQpIHtcbiAgICBfU2xpZGVyLnByb3RvdHlwZS5oYW5kbGVNb3VzZVVwLmNhbGwodGhpcywgZXZlbnQpOyAvLyBTdG9wIGV2ZW50IHByb3BhZ2F0aW9uIHRvIHByZXZlbnQgZG91YmxlIGZpcmUgaW4gcHJvZ3Jlc3MtY29udHJvbC5qc1xuXG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHRoaXMucGxheWVyXy5zY3J1YmJpbmcoZmFsc2UpO1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGltZXVwZGF0ZSBiZWNhdXNlIHdlJ3JlIGRvbmUgc2Vla2luZyBhbmQgdGhlIHRpbWUgaGFzIGNoYW5nZWQuXG4gICAgICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBpZiB0aGUgcGxheWVyIGlzIHBhdXNlZCB0byB0aW1lIHRoZSB0aW1lIGRpc3BsYXlzLlxuICAgICAqXG4gICAgICogQGV2ZW50IFRlY2gjdGltZXVwZGF0ZVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMucGxheWVyXy50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd0aW1ldXBkYXRlJyxcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIG1hbnVhbGx5VHJpZ2dlcmVkOiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy52aWRlb1dhc1BsYXlpbmcpIHtcbiAgICAgIHNpbGVuY2VQcm9taXNlKHRoaXMucGxheWVyXy5wbGF5KCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTW92ZSBtb3JlIHF1aWNrbHkgZmFzdCBmb3J3YXJkIGZvciBrZXlib2FyZC1vbmx5IHVzZXJzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0ZXBGb3J3YXJkID0gZnVuY3Rpb24gc3RlcEZvcndhcmQoKSB7XG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpICsgU1RFUF9TRUNPTkRTKTtcbiAgfVxuICAvKipcbiAgICogTW92ZSBtb3JlIHF1aWNrbHkgcmV3aW5kIGZvciBrZXlib2FyZC1vbmx5IHVzZXJzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0ZXBCYWNrID0gZnVuY3Rpb24gc3RlcEJhY2soKSB7XG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpIC0gU1RFUF9TRUNPTkRTKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgcGxheWJhY2sgc3RhdGUgb2YgdGhlIHBsYXllclxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gZW50ZXIgb3Igc3BhY2UgaXMgdXNlZCBvbiB0aGUgc2Vla2JhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxuICAgKlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVBY3Rpb24gPSBmdW5jdGlvbiBoYW5kbGVBY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoaXMgU2Vla0JhciBoYXMgZm9jdXMgYW5kIGEga2V5IGdldHMgcHJlc3NlZCBkb3duLlxuICAgKiBTdXBwb3J0cyB0aGUgZm9sbG93aW5nIGtleXM6XG4gICAqXG4gICAqICAgU3BhY2Ugb3IgRW50ZXIga2V5IGZpcmUgYSBjbGljayBldmVudFxuICAgKiAgIEhvbWUga2V5IG1vdmVzIHRvIHN0YXJ0IG9mIHRoZSB0aW1lbGluZVxuICAgKiAgIEVuZCBrZXkgbW92ZXMgdG8gZW5kIG9mIHRoZSB0aW1lbGluZVxuICAgKiAgIERpZ2l0IFwiMFwiIHRocm91Z2ggXCI5XCIga2V5cyBtb3ZlIHRvIDAlLCAxMCUgLi4uIDgwJSwgOTAlIG9mIHRoZSB0aW1lbGluZVxuICAgKiAgIFBhZ2VEb3duIGtleSBtb3ZlcyBiYWNrIGEgbGFyZ2VyIHN0ZXAgdGhhbiBBcnJvd0Rvd25cbiAgICogICBQYWdlVXAga2V5IG1vdmVzIGZvcndhcmQgYSBsYXJnZSBzdGVwXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBrZXlkb3duXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1NwYWNlJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRW50ZXInKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5oYW5kbGVBY3Rpb24oZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnSG9tZScpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoMCk7XG4gICAgfSBlbHNlIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFbmQnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2UgaWYgKC9eWzAtOV0kLy50ZXN0KGtleWNvZGUoZXZlbnQpKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdmFyIGdvdG9GcmFjdGlvbiA9IChrZXljb2RlLmNvZGVzW2tleWNvZGUoZXZlbnQpXSAtIGtleWNvZGUuY29kZXNbJzAnXSkgKiAxMC4wIC8gMTAwLjA7XG4gICAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgKiBnb3RvRnJhY3Rpb24pO1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnUGdEbicpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgLSBTVEVQX1NFQ09ORFMgKiBQQUdFX0tFWV9NVUxUSVBMSUVSKTtcbiAgICB9IGVsc2UgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1BnVXAnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpICsgU1RFUF9TRUNPTkRTICogUEFHRV9LRVlfTVVMVElQTElFUik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhc3Mga2V5ZG93biBoYW5kbGluZyB1cCBmb3IgdW5zdXBwb3J0ZWQga2V5c1xuICAgICAgX1NsaWRlci5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNlZWtCYXI7XG59KFNsaWRlcik7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGBTZWVrQmFyYFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuU2Vla0Jhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ2xvYWRQcm9ncmVzc0JhcicsICdwbGF5UHJvZ3Jlc3NCYXInXSxcbiAgYmFyTmFtZTogJ3BsYXlQcm9ncmVzc0Jhcidcbn07IC8vIE1vdXNlVGltZURpc3BsYXkgdG9vbHRpcHMgc2hvdWxkIG5vdCBiZSBhZGRlZCB0byBhIHBsYXllciBvbiBtb2JpbGUgZGV2aWNlc1xuXG5pZiAoIUlTX0lPUyAmJiAhSVNfQU5EUk9JRCkge1xuICBTZWVrQmFyLnByb3RvdHlwZS5vcHRpb25zXy5jaGlsZHJlbi5zcGxpY2UoMSwgMCwgJ21vdXNlVGltZURpc3BsYXknKTtcbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTZWVrQmFyJywgU2Vla0Jhcik7XG5cbi8qKlxuICogVGhlIFByb2dyZXNzIENvbnRyb2wgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBzZWVrIGJhciwgbG9hZCBwcm9ncmVzcyxcbiAqIGFuZCBwbGF5IHByb2dyZXNzLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBQcm9ncmVzc0NvbnRyb2wgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUHJvZ3Jlc3NDb250cm9sLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFByb2dyZXNzQ29udHJvbChwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlTW91c2VNb3ZlID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMuaGFuZGxlTW91c2VNb3ZlKSwgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwpO1xuICAgIF90aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2VlayA9IHRocm90dGxlKGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZU1vdXNlU2VlayksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcblxuICAgIF90aGlzLmVuYWJsZSgpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQcm9ncmVzc0NvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcHJvZ3Jlc3MtY29udHJvbCB2anMtY29udHJvbCdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogV2hlbiB0aGUgbW91c2UgbW92ZXMgb3ZlciB0aGUgYFByb2dyZXNzQ29udHJvbGAsIHRoZSBwb2ludGVyIHBvc2l0aW9uXG4gICAqIGdldHMgcGFzc2VkIGRvd24gdG8gdGhlIGBNb3VzZVRpbWVEaXNwbGF5YCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNlbW92ZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW4gbW91c2Vtb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIHZhciBzZWVrQmFyID0gdGhpcy5nZXRDaGlsZCgnc2Vla0JhcicpO1xuXG4gICAgaWYgKHNlZWtCYXIpIHtcbiAgICAgIHZhciBtb3VzZVRpbWVEaXNwbGF5ID0gc2Vla0Jhci5nZXRDaGlsZCgnbW91c2VUaW1lRGlzcGxheScpO1xuICAgICAgdmFyIHNlZWtCYXJFbCA9IHNlZWtCYXIuZWwoKTtcbiAgICAgIHZhciBzZWVrQmFyUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzZWVrQmFyRWwpO1xuICAgICAgdmFyIHNlZWtCYXJQb2ludCA9IGdldFBvaW50ZXJQb3NpdGlvbihzZWVrQmFyRWwsIGV2ZW50KS54OyAvLyBUaGUgZGVmYXVsdCBza2luIGhhcyBhIGdhcCBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgYFNlZWtCYXJgLiBUaGlzIG1lYW5zXG4gICAgICAvLyB0aGF0IGl0J3MgcG9zc2libGUgdG8gdHJpZ2dlciB0aGlzIGJlaGF2aW9yIG91dHNpZGUgdGhlIGJvdW5kYXJpZXMgb2ZcbiAgICAgIC8vIHRoZSBgU2Vla0JhcmAuIFRoaXMgZW5zdXJlcyB3ZSBzdGF5IHdpdGhpbiBpdCBhdCBhbGwgdGltZXMuXG5cbiAgICAgIGlmIChzZWVrQmFyUG9pbnQgPiAxKSB7XG4gICAgICAgIHNlZWtCYXJQb2ludCA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHNlZWtCYXJQb2ludCA8IDApIHtcbiAgICAgICAgc2Vla0JhclBvaW50ID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdXNlVGltZURpc3BsYXkpIHtcbiAgICAgICAgbW91c2VUaW1lRGlzcGxheS51cGRhdGUoc2Vla0JhclJlY3QsIHNlZWtCYXJQb2ludCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBIHRocm90dGxlZCB2ZXJzaW9uIG9mIHRoZSB7QGxpbmsgUHJvZ3Jlc3NDb250cm9sI2hhbmRsZU1vdXNlU2Vla30gbGlzdGVuZXIuXG4gICAqXG4gICAqIEBtZXRob2QgUHJvZ3Jlc3NDb250cm9sI3Rocm90dGxlZEhhbmRsZU1vdXNlU2Vla1xuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZW1vdmVgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVuIG1vdXNlbW92ZVxuICAgKiBAbGlzdGVuIHRvdWNobW92ZVxuICAgKi9cblxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZW1vdmVgIG9yIGB0b3VjaG1vdmVgIGV2ZW50cyBvbiB0aGUgYFByb2dyZXNzQ29udHJvbGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZW1vdmVcbiAgICogQGxpc3RlbnMgdG91Y2htb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlU2VlayA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlU2VlayhldmVudCkge1xuICAgIHZhciBzZWVrQmFyID0gdGhpcy5nZXRDaGlsZCgnc2Vla0JhcicpO1xuXG4gICAgaWYgKHNlZWtCYXIpIHtcbiAgICAgIHNlZWtCYXIuaGFuZGxlTW91c2VNb3ZlKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFyZSBjb250cm9scyBhcmUgY3VycmVudGx5IGVuYWJsZWQgZm9yIHRoaXMgcHJvZ3Jlc3MgY29udHJvbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICB0cnVlIGlmIGNvbnRyb2xzIGFyZSBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5hYmxlZCA9IGZ1bmN0aW9uIGVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5hYmxlZF87XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgYWxsIGNvbnRyb2xzIG9uIHRoZSBwcm9ncmVzcyBjb250cm9sIGFuZCBpdHMgY2hpbGRyZW5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdGhpcy5jaGlsZHJlbigpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQuZGlzYWJsZSAmJiBjaGlsZC5kaXNhYmxlKCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vZmYoWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vZmYodGhpcy5lbF8sICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5oYW5kbGVNb3VzZVVwKCk7XG4gICAgdGhpcy5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB0aGlzLmVuYWJsZWRfID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSBhbGwgY29udHJvbHMgb24gdGhlIHByb2dyZXNzIGNvbnRyb2wgYW5kIGl0cyBjaGlsZHJlblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdGhpcy5jaGlsZHJlbigpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQuZW5hYmxlICYmIGNoaWxkLmVuYWJsZSgpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbihbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICB0aGlzLm9uKHRoaXMuZWxfLCAnbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgdGhpcy5lbmFibGVkXyA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnRzIG9uIHRoZSBgUHJvZ3Jlc3NDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlZG93blxuICAgKiBAbGlzdGVucyB0b3VjaHN0YXJ0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIHZhciBkb2MgPSB0aGlzLmVsXy5vd25lckRvY3VtZW50O1xuICAgIHZhciBzZWVrQmFyID0gdGhpcy5nZXRDaGlsZCgnc2Vla0JhcicpO1xuXG4gICAgaWYgKHNlZWtCYXIpIHtcbiAgICAgIHNlZWtCYXIuaGFuZGxlTW91c2VEb3duKGV2ZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKGRvYywgJ21vdXNlbW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKTtcbiAgICB0aGlzLm9uKGRvYywgJ3RvdWNobW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKTtcbiAgICB0aGlzLm9uKGRvYywgJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHRoaXMub24oZG9jLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYG1vdXNldXBgIG9yIGB0b3VjaGVuZGAgZXZlbnRzIG9uIHRoZSBgUHJvZ3Jlc3NDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZXVwYCBvciBgdG91Y2hlbmRgIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRvdWNoZW5kXG4gICAqIEBsaXN0ZW5zIG1vdXNldXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoZXZlbnQpIHtcbiAgICB2YXIgZG9jID0gdGhpcy5lbF8ub3duZXJEb2N1bWVudDtcbiAgICB2YXIgc2Vla0JhciA9IHRoaXMuZ2V0Q2hpbGQoJ3NlZWtCYXInKTtcblxuICAgIGlmIChzZWVrQmFyKSB7XG4gICAgICBzZWVrQmFyLmhhbmRsZU1vdXNlVXAoZXZlbnQpO1xuICAgIH1cblxuICAgIHRoaXMub2ZmKGRvYywgJ21vdXNlbW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKTtcbiAgICB0aGlzLm9mZihkb2MsICd0b3VjaG1vdmUnLCB0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2Vlayk7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICB9O1xuXG4gIHJldHVybiBQcm9ncmVzc0NvbnRyb2w7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgYFByb2dyZXNzQ29udHJvbGBcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5cblByb2dyZXNzQ29udHJvbC5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ3NlZWtCYXInXVxufTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUHJvZ3Jlc3NDb250cm9sJywgUHJvZ3Jlc3NDb250cm9sKTtcblxuLyoqXG4gKiBUb2dnbGUgUGljdHVyZS1pbi1QaWN0dXJlIG1vZGVcbiAqXG4gKiBAZXh0ZW5kcyBCdXR0b25cbiAqL1xuXG52YXIgUGljdHVyZUluUGljdHVyZVRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlLCBfQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2VudGVycGljdHVyZWlucGljdHVyZVxuICAgKiBAbGlzdGVucyBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAqL1xuICBmdW5jdGlvbiBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLm9uKHBsYXllciwgWydlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCAnbGVhdmVwaWN0dXJlaW5waWN0dXJlJ10sIF90aGlzLmhhbmRsZVBpY3R1cmVJblBpY3R1cmVDaGFuZ2UpOyAvLyBUT0RPOiBBY3RpdmF0ZSBidXR0b24gb24gcGxheWVyIGxvYWRlZG1ldGFkYXRhIGV2ZW50LlxuICAgIC8vIFRPRE86IERlYWN0aXZhdGUgYnV0dG9uIG9uIHBsYXllciBlbXB0aWVkIGV2ZW50LlxuICAgIC8vIFRPRE86IERlYWN0aXZhdGUgYnV0dG9uIGlmIGRpc2FibGVwaWN0dXJlaW5waWN0dXJlIGF0dHJpYnV0ZSBpcyBwcmVzZW50LlxuXG5cbiAgICBpZiAoIWRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbmFibGVkKSB7XG4gICAgICBfdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBpY3R1cmVJblBpY3R1cmVUb2dnbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtcGljdHVyZS1pbi1waWN0dXJlLWNvbnRyb2wgXCIgKyBfQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgZW50ZXJwaWN0dXJlaW5waWN0dXJlIGFuZCBsZWF2ZXBpY3R1cmVpbnBpY3R1cmUgb24gdGhlIHBsYXllciBhbmQgY2hhbmdlIGNvbnRyb2wgdGV4dCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIHtAbGluayBQbGF5ZXIjZW50ZXJwaWN0dXJlaW5waWN0dXJlfSBvciB7QGxpbmsgUGxheWVyI2xlYXZlcGljdHVyZWlucGljdHVyZX0gZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjZW50ZXJwaWN0dXJlaW5waWN0dXJlXG4gICAqIEBsaXN0ZW5zIFBsYXllciNsZWF2ZXBpY3R1cmVpbnBpY3R1cmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlUGljdHVyZUluUGljdHVyZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVBpY3R1cmVJblBpY3R1cmVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmlzSW5QaWN0dXJlSW5QaWN0dXJlKCkpIHtcbiAgICAgIHRoaXMuY29udHJvbFRleHQoJ0V4aXQgUGljdHVyZS1pbi1QaWN0dXJlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29udHJvbFRleHQoJ1BpY3R1cmUtaW4tUGljdHVyZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlYCBpcyBcImNsaWNrZWRcIi4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMucGxheWVyXy5pc0luUGljdHVyZUluUGljdHVyZSgpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLmV4aXRQaWN0dXJlSW5QaWN0dXJlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlO1xufShCdXR0b24pO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5QaWN0dXJlSW5QaWN0dXJlVG9nZ2xlLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnUGljdHVyZS1pbi1QaWN0dXJlJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGljdHVyZUluUGljdHVyZVRvZ2dsZScsIFBpY3R1cmVJblBpY3R1cmVUb2dnbGUpO1xuXG4vKipcbiAqIFRvZ2dsZSBmdWxsc2NyZWVuIHZpZGVvXG4gKlxuICogQGV4dGVuZHMgQnV0dG9uXG4gKi9cblxudmFyIEZ1bGxzY3JlZW5Ub2dnbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoRnVsbHNjcmVlblRvZ2dsZSwgX0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBGdWxsc2NyZWVuVG9nZ2xlKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBfdGhpcy5oYW5kbGVGdWxsc2NyZWVuQ2hhbmdlKTtcblxuICAgIGlmIChkb2N1bWVudFtwbGF5ZXIuZnNBcGlfLmZ1bGxzY3JlZW5FbmFibGVkXSA9PT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRnVsbHNjcmVlblRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1mdWxsc2NyZWVuLWNvbnRyb2wgXCIgKyBfQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgZnVsbHNjcmVlbmNoYW5nZSBvbiB0aGUgcGxheWVyIGFuZCBjaGFuZ2UgY29udHJvbCB0ZXh0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUge0BsaW5rIFBsYXllciNmdWxsc2NyZWVuY2hhbmdlfSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNmdWxsc2NyZWVuY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVGdWxsc2NyZWVuQ2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5pc0Z1bGxzY3JlZW4oKSkge1xuICAgICAgdGhpcy5jb250cm9sVGV4dCgnTm9uLUZ1bGxzY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250cm9sVGV4dCgnRnVsbHNjcmVlbicpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBGdWxsc2NyZWVuVG9nZ2xlYCBpcyBcImNsaWNrZWRcIi4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMucGxheWVyXy5pc0Z1bGxzY3JlZW4oKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyXy5leGl0RnVsbHNjcmVlbigpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRnVsbHNjcmVlblRvZ2dsZTtcbn0oQnV0dG9uKTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgRnVsbHNjcmVlblRvZ2dsZWBzIGNvbnRyb2xzLiBBZGRlZCBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuRnVsbHNjcmVlblRvZ2dsZS5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ0Z1bGxzY3JlZW4nO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdGdWxsc2NyZWVuVG9nZ2xlJywgRnVsbHNjcmVlblRvZ2dsZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgdm9sdW1lIGNvbnRyb2wgaXMgc3VwcG9ydGVkIGFuZCBpZiBpdCBpc24ndCBoaWRlIHRoZVxuICogYENvbXBvbmVudGAgdGhhdCB3YXMgcGFzc2VkICB1c2luZyB0aGUgYHZqcy1oaWRkZW5gIGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBzZWxmXG4gKiAgICAgICAgVGhlIGNvbXBvbmVudCB0aGF0IHNob3VsZCBiZSBoaWRkZW4gaWYgdm9sdW1lIGlzIHVuc3VwcG9ydGVkXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICogICAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBwbGF5ZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgY2hlY2tWb2x1bWVTdXBwb3J0ID0gZnVuY3Rpb24gY2hlY2tWb2x1bWVTdXBwb3J0KHNlbGYsIHBsYXllcikge1xuICAvLyBoaWRlIHZvbHVtZSBjb250cm9scyB3aGVuIHRoZXkncmUgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCB0ZWNoXG4gIGlmIChwbGF5ZXIudGVjaF8gJiYgIXBsYXllci50ZWNoXy5mZWF0dXJlc1ZvbHVtZUNvbnRyb2wpIHtcbiAgICBzZWxmLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gIH1cblxuICBzZWxmLm9uKHBsYXllciwgJ2xvYWRzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBsYXllci50ZWNoXy5mZWF0dXJlc1ZvbHVtZUNvbnRyb2wpIHtcbiAgICAgIHNlbGYuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZW1vdmVDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFNob3dzIHZvbHVtZSBsZXZlbFxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBWb2x1bWVMZXZlbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShWb2x1bWVMZXZlbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVm9sdW1lTGV2ZWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFZvbHVtZUxldmVsLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWxldmVsJyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPjwvc3Bhbj4nXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFZvbHVtZUxldmVsO1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1ZvbHVtZUxldmVsJywgVm9sdW1lTGV2ZWwpO1xuXG4vKipcbiAqIFRoZSBiYXIgdGhhdCBjb250YWlucyB0aGUgdm9sdW1lIGxldmVsIGFuZCBjYW4gYmUgY2xpY2tlZCBvbiB0byBhZGp1c3QgdGhlIGxldmVsXG4gKlxuICogQGV4dGVuZHMgU2xpZGVyXG4gKi9cblxudmFyIFZvbHVtZUJhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1NsaWRlcikge1xuICBfaW5oZXJpdHNMb29zZShWb2x1bWVCYXIsIF9TbGlkZXIpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gVm9sdW1lQmFyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1NsaWRlci5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLm9uKCdzbGlkZXJhY3RpdmUnLCBfdGhpcy51cGRhdGVMYXN0Vm9sdW1lXyk7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICd2b2x1bWVjaGFuZ2UnLCBfdGhpcy51cGRhdGVBUklBQXR0cmlidXRlcyk7XG5cbiAgICBwbGF5ZXIucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWb2x1bWVCYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfU2xpZGVyLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWJhciB2anMtc2xpZGVyLWJhcidcbiAgICB9LCB7XG4gICAgICAnYXJpYS1sYWJlbCc6IHRoaXMubG9jYWxpemUoJ1ZvbHVtZSBMZXZlbCcpLFxuICAgICAgJ2FyaWEtbGl2ZSc6ICdwb2xpdGUnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBkb3duIG9uIHZvbHVtZSBiYXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgbW91c2Vkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgbW91c2Vkb3duXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIGlmICghaXNTaW5nbGVMZWZ0Q2xpY2soZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX1NsaWRlci5wcm90b3R5cGUuaGFuZGxlTW91c2VEb3duLmNhbGwodGhpcywgZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgbW92ZW1lbnQgZXZlbnRzIG9uIHRoZSB7QGxpbmsgVm9sdW1lTWVudUJ1dHRvbn0uXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlbW92ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZXZlbnQpIHtcbiAgICBpZiAoIWlzU2luZ2xlTGVmdENsaWNrKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tNdXRlZCgpO1xuICAgIHRoaXMucGxheWVyXy52b2x1bWUodGhpcy5jYWxjdWxhdGVEaXN0YW5jZShldmVudCkpO1xuICB9XG4gIC8qKlxuICAgKiBJZiB0aGUgcGxheWVyIGlzIG11dGVkIHVubXV0ZSBpdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2hlY2tNdXRlZCA9IGZ1bmN0aW9uIGNoZWNrTXV0ZWQoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5tdXRlZCgpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ubXV0ZWQoZmFsc2UpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IHBlcmNlbnQgb2Ygdm9sdW1lIGxldmVsXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBWb2x1bWUgbGV2ZWwgcGVyY2VudCBhcyBhIGRlY2ltYWwgbnVtYmVyLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRQZXJjZW50ID0gZnVuY3Rpb24gZ2V0UGVyY2VudCgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLm11dGVkKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBsYXllcl8udm9sdW1lKCk7XG4gIH1cbiAgLyoqXG4gICAqIEluY3JlYXNlIHZvbHVtZSBsZXZlbCBmb3Iga2V5Ym9hcmQgdXNlcnNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RlcEZvcndhcmQgPSBmdW5jdGlvbiBzdGVwRm9yd2FyZCgpIHtcbiAgICB0aGlzLmNoZWNrTXV0ZWQoKTtcbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSArIDAuMSk7XG4gIH1cbiAgLyoqXG4gICAqIERlY3JlYXNlIHZvbHVtZSBsZXZlbCBmb3Iga2V5Ym9hcmQgdXNlcnNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RlcEJhY2sgPSBmdW5jdGlvbiBzdGVwQmFjaygpIHtcbiAgICB0aGlzLmNoZWNrTXV0ZWQoKTtcbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSAtIDAuMSk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBBUklBIGFjY2Vzc2liaWxpdHkgYXR0cmlidXRlc1xuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHZvbHVtZWNoYW5nZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciN2b2x1bWVjaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlQVJJQUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiB1cGRhdGVBUklBQXR0cmlidXRlcyhldmVudCkge1xuICAgIHZhciBhcmlhVmFsdWUgPSB0aGlzLnBsYXllcl8ubXV0ZWQoKSA/IDAgOiB0aGlzLnZvbHVtZUFzUGVyY2VudGFnZV8oKTtcbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCBhcmlhVmFsdWUpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZXRleHQnLCBhcmlhVmFsdWUgKyAnJScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBwbGF5ZXIgdm9sdW1lIGFzIGEgcGVyY2VudGFnZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52b2x1bWVBc1BlcmNlbnRhZ2VfID0gZnVuY3Rpb24gdm9sdW1lQXNQZXJjZW50YWdlXygpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLnBsYXllcl8udm9sdW1lKCkgKiAxMDApO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIHVzZXIgc3RhcnRzIGRyYWdnaW5nIHRoZSBWb2x1bWVCYXIsIHN0b3JlIHRoZSB2b2x1bWUgYW5kIGxpc3RlbiBmb3JcbiAgICogdGhlIGVuZCBvZiB0aGUgZHJhZy4gV2hlbiB0aGUgZHJhZyBlbmRzLCBpZiB0aGUgdm9sdW1lIHdhcyBzZXQgdG8gemVybyxcbiAgICogc2V0IGxhc3RWb2x1bWUgdG8gdGhlIHN0b3JlZCB2b2x1bWUuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHNsaWRlcmFjdGl2ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVMYXN0Vm9sdW1lXyA9IGZ1bmN0aW9uIHVwZGF0ZUxhc3RWb2x1bWVfKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHZvbHVtZUJlZm9yZURyYWcgPSB0aGlzLnBsYXllcl8udm9sdW1lKCk7XG4gICAgdGhpcy5vbmUoJ3NsaWRlcmluYWN0aXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzMi5wbGF5ZXJfLnZvbHVtZSgpID09PSAwKSB7XG4gICAgICAgIF90aGlzMi5wbGF5ZXJfLmxhc3RWb2x1bWVfKHZvbHVtZUJlZm9yZURyYWcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBWb2x1bWVCYXI7XG59KFNsaWRlcik7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGBWb2x1bWVCYXJgXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5Wb2x1bWVCYXIucHJvdG90eXBlLm9wdGlvbnNfID0ge1xuICBjaGlsZHJlbjogWyd2b2x1bWVMZXZlbCddLFxuICBiYXJOYW1lOiAndm9sdW1lTGV2ZWwnXG59O1xuLyoqXG4gKiBDYWxsIHRoZSB1cGRhdGUgZXZlbnQgZm9yIHRoaXMgU2xpZGVyIHdoZW4gdGhpcyBldmVudCBoYXBwZW5zIG9uIHRoZSBwbGF5ZXIuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuXG5Wb2x1bWVCYXIucHJvdG90eXBlLnBsYXllckV2ZW50ID0gJ3ZvbHVtZWNoYW5nZSc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1ZvbHVtZUJhcicsIFZvbHVtZUJhcik7XG5cbi8qKlxuICogVGhlIGNvbXBvbmVudCBmb3IgY29udHJvbGxpbmcgdGhlIHZvbHVtZSBsZXZlbFxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBWb2x1bWVDb250cm9sID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFZvbHVtZUNvbnRyb2wsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gVm9sdW1lQ29udHJvbChwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgb3B0aW9ucy52ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWwgfHwgZmFsc2U7IC8vIFBhc3MgdGhlIHZlcnRpY2FsIG9wdGlvbiBkb3duIHRvIHRoZSBWb2x1bWVCYXIgaWZcbiAgICAvLyB0aGUgVm9sdW1lQmFyIGlzIHR1cm5lZCBvbi5cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy52b2x1bWVCYXIgPT09ICd1bmRlZmluZWQnIHx8IGlzUGxhaW4ob3B0aW9ucy52b2x1bWVCYXIpKSB7XG4gICAgICBvcHRpb25zLnZvbHVtZUJhciA9IG9wdGlvbnMudm9sdW1lQmFyIHx8IHt9O1xuICAgICAgb3B0aW9ucy52b2x1bWVCYXIudmVydGljYWwgPSBvcHRpb25zLnZlcnRpY2FsO1xuICAgIH1cblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gaGlkZSB0aGlzIGNvbnRyb2wgaWYgdm9sdW1lIHN1cHBvcnQgaXMgbWlzc2luZ1xuXG4gICAgY2hlY2tWb2x1bWVTdXBwb3J0KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwbGF5ZXIpO1xuICAgIF90aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlTW92ZSA9IHRocm90dGxlKGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZU1vdXNlTW92ZSksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcblxuICAgIF90aGlzLm9uKCdtb3VzZWRvd24nLCBfdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuXG4gICAgX3RoaXMub24oJ3RvdWNoc3RhcnQnLCBfdGhpcy5oYW5kbGVNb3VzZURvd24pOyAvLyB3aGlsZSB0aGUgc2xpZGVyIGlzIGFjdGl2ZSAodGhlIG1vdXNlIGhhcyBiZWVuIHByZXNzZWQgZG93biBhbmRcbiAgICAvLyBpcyBkcmFnZ2luZykgb3IgaW4gZm9jdXMgd2UgZG8gbm90IHdhbnQgdG8gaGlkZSB0aGUgVm9sdW1lQmFyXG5cblxuICAgIF90aGlzLm9uKF90aGlzLnZvbHVtZUJhciwgWydmb2N1cycsICdzbGlkZXJhY3RpdmUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudm9sdW1lQmFyLmFkZENsYXNzKCd2anMtc2xpZGVyLWFjdGl2ZScpO1xuXG4gICAgICBfdGhpcy5hZGRDbGFzcygndmpzLXNsaWRlci1hY3RpdmUnKTtcblxuICAgICAgX3RoaXMudHJpZ2dlcignc2xpZGVyYWN0aXZlJyk7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy52b2x1bWVCYXIsIFsnYmx1cicsICdzbGlkZXJpbmFjdGl2ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy52b2x1bWVCYXIucmVtb3ZlQ2xhc3MoJ3Zqcy1zbGlkZXItYWN0aXZlJyk7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzKCd2anMtc2xpZGVyLWFjdGl2ZScpO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyKCdzbGlkZXJpbmFjdGl2ZScpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWb2x1bWVDb250cm9sLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICB2YXIgb3JpZW50YXRpb25DbGFzcyA9ICd2anMtdm9sdW1lLWhvcml6b250YWwnO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uc18udmVydGljYWwpIHtcbiAgICAgIG9yaWVudGF0aW9uQ2xhc3MgPSAndmpzLXZvbHVtZS12ZXJ0aWNhbCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ2anMtdm9sdW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wgXCIgKyBvcmllbnRhdGlvbkNsYXNzXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnRzIG9uIHRoZSBgVm9sdW1lQ29udHJvbGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZWRvd25cbiAgICogQGxpc3RlbnMgdG91Y2hzdGFydFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICB2YXIgZG9jID0gdGhpcy5lbF8ub3duZXJEb2N1bWVudDtcbiAgICB0aGlzLm9uKGRvYywgJ21vdXNlbW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9uKGRvYywgJ3RvdWNobW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9uKGRvYywgJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHRoaXMub24oZG9jLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYG1vdXNldXBgIG9yIGB0b3VjaGVuZGAgZXZlbnRzIG9uIHRoZSBgVm9sdW1lQ29udHJvbGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBgbW91c2V1cGAgb3IgYHRvdWNoZW5kYCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAbGlzdGVucyB0b3VjaGVuZFxuICAgKiBAbGlzdGVucyBtb3VzZXVwXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKGV2ZW50KSB7XG4gICAgdmFyIGRvYyA9IHRoaXMuZWxfLm93bmVyRG9jdW1lbnQ7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2Vtb3ZlJywgdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvYywgJ3RvdWNobW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9mZihkb2MsICdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLm9mZihkb2MsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnRzIG9uIHRoZSBgVm9sdW1lQ29udHJvbGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZWRvd25cbiAgICogQGxpc3RlbnMgdG91Y2hzdGFydFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZXZlbnQpIHtcbiAgICB0aGlzLnZvbHVtZUJhci5oYW5kbGVNb3VzZU1vdmUoZXZlbnQpO1xuICB9O1xuXG4gIHJldHVybiBWb2x1bWVDb250cm9sO1xufShDb21wb25lbnQpO1xuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBgVm9sdW1lQ29udHJvbGBcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5cblZvbHVtZUNvbnRyb2wucHJvdG90eXBlLm9wdGlvbnNfID0ge1xuICBjaGlsZHJlbjogWyd2b2x1bWVCYXInXVxufTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVm9sdW1lQ29udHJvbCcsIFZvbHVtZUNvbnRyb2wpO1xuXG4vKipcbiAqIENoZWNrIGlmIG11dGluZyB2b2x1bWUgaXMgc3VwcG9ydGVkIGFuZCBpZiBpdCBpc24ndCBoaWRlIHRoZSBtdXRlIHRvZ2dsZVxuICogYnV0dG9uLlxuICpcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBzZWxmXG4gKiAgICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIG11dGUgdG9nZ2xlIGJ1dHRvblxuICpcbiAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAqICAgICAgICBBIHJlZmVyZW5jZSB0byB0aGUgcGxheWVyXG4gKlxuICogQHByaXZhdGVcbiAqL1xudmFyIGNoZWNrTXV0ZVN1cHBvcnQgPSBmdW5jdGlvbiBjaGVja011dGVTdXBwb3J0KHNlbGYsIHBsYXllcikge1xuICAvLyBoaWRlIG11dGUgdG9nZ2xlIGJ1dHRvbiBpZiBpdCdzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgdGVjaFxuICBpZiAocGxheWVyLnRlY2hfICYmICFwbGF5ZXIudGVjaF8uZmVhdHVyZXNNdXRlQ29udHJvbCkge1xuICAgIHNlbGYuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgfVxuXG4gIHNlbGYub24ocGxheWVyLCAnbG9hZHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGxheWVyLnRlY2hfLmZlYXR1cmVzTXV0ZUNvbnRyb2wpIHtcbiAgICAgIHNlbGYuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZW1vdmVDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEEgYnV0dG9uIGNvbXBvbmVudCBmb3IgbXV0aW5nIHRoZSBhdWRpby5cbiAqXG4gKiBAZXh0ZW5kcyBCdXR0b25cbiAqL1xuXG52YXIgTXV0ZVRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShNdXRlVG9nZ2xlLCBfQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIE11dGVUb2dnbGUocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzOyAvLyBoaWRlIHRoaXMgY29udHJvbCBpZiB2b2x1bWUgc3VwcG9ydCBpcyBtaXNzaW5nXG5cbiAgICBjaGVja011dGVTdXBwb3J0KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwbGF5ZXIpO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCBbJ2xvYWRzdGFydCcsICd2b2x1bWVjaGFuZ2UnXSwgX3RoaXMudXBkYXRlKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNdXRlVG9nZ2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLW11dGUtY29udHJvbCBcIiArIF9CdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBNdXRlVG9nZ2xlYCBpcyBcImNsaWNrZWRcIi4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB2YXIgdm9sID0gdGhpcy5wbGF5ZXJfLnZvbHVtZSgpO1xuICAgIHZhciBsYXN0Vm9sdW1lID0gdGhpcy5wbGF5ZXJfLmxhc3RWb2x1bWVfKCk7XG5cbiAgICBpZiAodm9sID09PSAwKSB7XG4gICAgICB2YXIgdm9sdW1lVG9TZXQgPSBsYXN0Vm9sdW1lIDwgMC4xID8gMC4xIDogbGFzdFZvbHVtZTtcbiAgICAgIHRoaXMucGxheWVyXy52b2x1bWUodm9sdW1lVG9TZXQpO1xuICAgICAgdGhpcy5wbGF5ZXJfLm11dGVkKGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLm11dGVkKHRoaXMucGxheWVyXy5tdXRlZCgpID8gZmFsc2UgOiB0cnVlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYE11dGVUb2dnbGVgIGJ1dHRvbiBiYXNlZCBvbiB0aGUgc3RhdGUgb2YgYHZvbHVtZWAgYW5kIGBtdXRlZGBcbiAgICogb24gdGhlIHBsYXllci5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIHtAbGluayBQbGF5ZXIjbG9hZHN0YXJ0fSBldmVudCBpZiB0aGlzIGZ1bmN0aW9uIHdhcyBjYWxsZWRcbiAgICogICAgICAgIHRocm91Z2ggYW4gZXZlbnQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNsb2Fkc3RhcnRcbiAgICogQGxpc3RlbnMgUGxheWVyI3ZvbHVtZWNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZXZlbnQpIHtcbiAgICB0aGlzLnVwZGF0ZUljb25fKCk7XG4gICAgdGhpcy51cGRhdGVDb250cm9sVGV4dF8oKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBgTXV0ZVRvZ2dsZWAgaWNvbi5cbiAgICpcbiAgICogUG9zc2libGUgc3RhdGVzIChnaXZlbiBgbGV2ZWxgIHZhcmlhYmxlIGJlbG93KTpcbiAgICogLSAwOiBjcm9zc2VkIG91dFxuICAgKiAtIDE6IHplcm8gYmFycyBvZiB2b2x1bWVcbiAgICogLSAyOiBvbmUgYmFyIG9mIHZvbHVtZVxuICAgKiAtIDM6IHR3byBiYXJzIG9mIHZvbHVtZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVJY29uXyA9IGZ1bmN0aW9uIHVwZGF0ZUljb25fKCkge1xuICAgIHZhciB2b2wgPSB0aGlzLnBsYXllcl8udm9sdW1lKCk7XG4gICAgdmFyIGxldmVsID0gMzsgLy8gaW4gaU9TIHdoZW4gYSBwbGF5ZXIgaXMgbG9hZGVkIHdpdGggbXV0ZWQgYXR0cmlidXRlXG4gICAgLy8gYW5kIHZvbHVtZSBpcyBjaGFuZ2VkIHdpdGggYSBuYXRpdmUgbXV0ZSBidXR0b25cbiAgICAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSBtdXRlZCBzdGF0ZSBpcyB1cGRhdGVkXG5cbiAgICBpZiAoSVNfSU9TICYmIHRoaXMucGxheWVyXy50ZWNoXyAmJiB0aGlzLnBsYXllcl8udGVjaF8uZWxfKSB7XG4gICAgICB0aGlzLnBsYXllcl8ubXV0ZWQodGhpcy5wbGF5ZXJfLnRlY2hfLmVsXy5tdXRlZCk7XG4gICAgfVxuXG4gICAgaWYgKHZvbCA9PT0gMCB8fCB0aGlzLnBsYXllcl8ubXV0ZWQoKSkge1xuICAgICAgbGV2ZWwgPSAwO1xuICAgIH0gZWxzZSBpZiAodm9sIDwgMC4zMykge1xuICAgICAgbGV2ZWwgPSAxO1xuICAgIH0gZWxzZSBpZiAodm9sIDwgMC42Nykge1xuICAgICAgbGV2ZWwgPSAyO1xuICAgIH0gLy8gVE9ETyBpbXByb3ZlIG11dGVkIGljb24gY2xhc3Nlc1xuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbF8sIFwidmpzLXZvbC1cIiArIGkpO1xuICAgIH1cblxuICAgIGFkZENsYXNzKHRoaXMuZWxfLCBcInZqcy12b2wtXCIgKyBsZXZlbCk7XG4gIH1cbiAgLyoqXG4gICAqIElmIGBtdXRlZGAgaGFzIGNoYW5nZWQgb24gdGhlIHBsYXllciwgdXBkYXRlIHRoZSBjb250cm9sIHRleHRcbiAgICogKGB0aXRsZWAgYXR0cmlidXRlIG9uIGB2anMtbXV0ZS1jb250cm9sYCBlbGVtZW50IGFuZCBjb250ZW50IG9mXG4gICAqIGB2anMtY29udHJvbC10ZXh0YCBlbGVtZW50KS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlQ29udHJvbFRleHRfID0gZnVuY3Rpb24gdXBkYXRlQ29udHJvbFRleHRfKCkge1xuICAgIHZhciBzb3VuZE9mZiA9IHRoaXMucGxheWVyXy5tdXRlZCgpIHx8IHRoaXMucGxheWVyXy52b2x1bWUoKSA9PT0gMDtcbiAgICB2YXIgdGV4dCA9IHNvdW5kT2ZmID8gJ1VubXV0ZScgOiAnTXV0ZSc7XG5cbiAgICBpZiAodGhpcy5jb250cm9sVGV4dCgpICE9PSB0ZXh0KSB7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KHRleHQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTXV0ZVRvZ2dsZTtcbn0oQnV0dG9uKTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgTXV0ZVRvZ2dsZWBzIGNvbnRyb2xzLiBBZGRlZCBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuTXV0ZVRvZ2dsZS5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ011dGUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdNdXRlVG9nZ2xlJywgTXV0ZVRvZ2dsZSk7XG5cbi8qKlxuICogQSBDb21wb25lbnQgdG8gY29udGFpbiB0aGUgTXV0ZVRvZ2dsZSBhbmQgVm9sdW1lQ29udHJvbCBzbyB0aGF0XG4gKiB0aGV5IGNhbiB3b3JrIHRvZ2V0aGVyLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBWb2x1bWVQYW5lbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShWb2x1bWVQYW5lbCwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBWb2x1bWVQYW5lbChwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmlubGluZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdGlvbnMuaW5saW5lID0gb3B0aW9ucy5pbmxpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMuaW5saW5lID0gdHJ1ZTtcbiAgICB9IC8vIHBhc3MgdGhlIGlubGluZSBvcHRpb24gZG93biB0byB0aGUgVm9sdW1lQ29udHJvbCBhcyB2ZXJ0aWNhbCBpZlxuICAgIC8vIHRoZSBWb2x1bWVDb250cm9sIGlzIG9uLlxuXG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudm9sdW1lQ29udHJvbCA9PT0gJ3VuZGVmaW5lZCcgfHwgaXNQbGFpbihvcHRpb25zLnZvbHVtZUNvbnRyb2wpKSB7XG4gICAgICBvcHRpb25zLnZvbHVtZUNvbnRyb2wgPSBvcHRpb25zLnZvbHVtZUNvbnRyb2wgfHwge307XG4gICAgICBvcHRpb25zLnZvbHVtZUNvbnRyb2wudmVydGljYWwgPSAhb3B0aW9ucy5pbmxpbmU7XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCBbJ2xvYWRzdGFydCddLCBfdGhpcy52b2x1bWVQYW5lbFN0YXRlXyk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy5tdXRlVG9nZ2xlLCAna2V5dXAnLCBfdGhpcy5oYW5kbGVLZXlQcmVzcyk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy52b2x1bWVDb250cm9sLCAna2V5dXAnLCBfdGhpcy5oYW5kbGVWb2x1bWVDb250cm9sS2V5VXApO1xuXG4gICAgX3RoaXMub24oJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVLZXlQcmVzcyk7XG5cbiAgICBfdGhpcy5vbignbW91c2VvdmVyJywgX3RoaXMuaGFuZGxlTW91c2VPdmVyKTtcblxuICAgIF90aGlzLm9uKCdtb3VzZW91dCcsIF90aGlzLmhhbmRsZU1vdXNlT3V0KTsgLy8gd2hpbGUgdGhlIHNsaWRlciBpcyBhY3RpdmUgKHRoZSBtb3VzZSBoYXMgYmVlbiBwcmVzc2VkIGRvd24gYW5kXG4gICAgLy8gaXMgZHJhZ2dpbmcpIHdlIGRvIG5vdCB3YW50IHRvIGhpZGUgdGhlIFZvbHVtZUJhclxuXG5cbiAgICBfdGhpcy5vbihfdGhpcy52b2x1bWVDb250cm9sLCBbJ3NsaWRlcmFjdGl2ZSddLCBfdGhpcy5zbGlkZXJBY3RpdmVfKTtcblxuICAgIF90aGlzLm9uKF90aGlzLnZvbHVtZUNvbnRyb2wsIFsnc2xpZGVyaW5hY3RpdmUnXSwgX3RoaXMuc2xpZGVySW5hY3RpdmVfKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIHZqcy1zbGlkZXItYWN0aXZlIGNsYXNzIHRvIHRoZSBWb2x1bWVQYW5lbFxuICAgKlxuICAgKiBAbGlzdGVucyBWb2x1bWVDb250cm9sI3NsaWRlcmFjdGl2ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWb2x1bWVQYW5lbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNsaWRlckFjdGl2ZV8gPSBmdW5jdGlvbiBzbGlkZXJBY3RpdmVfKCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zbGlkZXItYWN0aXZlJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgdmpzLXNsaWRlci1hY3RpdmUgY2xhc3MgdG8gdGhlIFZvbHVtZVBhbmVsXG4gICAqXG4gICAqIEBsaXN0ZW5zIFZvbHVtZUNvbnRyb2wjc2xpZGVyaW5hY3RpdmVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2xpZGVySW5hY3RpdmVfID0gZnVuY3Rpb24gc2xpZGVySW5hY3RpdmVfKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zbGlkZXItYWN0aXZlJyk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgdmpzLWhpZGRlbiBvciB2anMtbXV0ZS10b2dnbGUtb25seSB0byB0aGUgVm9sdW1lUGFuZWxcbiAgICogZGVwZW5kaW5nIG9uIE11dGVUb2dnbGUgYW5kIFZvbHVtZUNvbnRyb2wgc3RhdGVcbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2xvYWRzdGFydFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52b2x1bWVQYW5lbFN0YXRlXyA9IGZ1bmN0aW9uIHZvbHVtZVBhbmVsU3RhdGVfKCkge1xuICAgIC8vIGhpZGUgdm9sdW1lIHBhbmVsIGlmIG5laXRoZXIgdm9sdW1lIGNvbnRyb2wgb3IgbXV0ZSB0b2dnbGVcbiAgICAvLyBhcmUgZGlzcGxheWVkXG4gICAgaWYgKHRoaXMudm9sdW1lQ29udHJvbC5oYXNDbGFzcygndmpzLWhpZGRlbicpICYmIHRoaXMubXV0ZVRvZ2dsZS5oYXNDbGFzcygndmpzLWhpZGRlbicpKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgfSAvLyBpZiBvbmx5IG11dGUgdG9nZ2xlIGlzIHZpc2libGUgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHZvbHVtZSBwYW5lbCBleHBhbmRpbmcgd2hlbiBob3ZlcmVkIG9yIGFjdGl2ZVxuXG5cbiAgICBpZiAodGhpcy52b2x1bWVDb250cm9sLmhhc0NsYXNzKCd2anMtaGlkZGVuJykgJiYgIXRoaXMubXV0ZVRvZ2dsZS5oYXNDbGFzcygndmpzLWhpZGRlbicpKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtbXV0ZS10b2dnbGUtb25seScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICB2YXIgb3JpZW50YXRpb25DbGFzcyA9ICd2anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWwnO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnNfLmlubGluZSkge1xuICAgICAgb3JpZW50YXRpb25DbGFzcyA9ICd2anMtdm9sdW1lLXBhbmVsLXZlcnRpY2FsJztcbiAgICB9XG5cbiAgICByZXR1cm4gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiBcInZqcy12b2x1bWUtcGFuZWwgdmpzLWNvbnRyb2wgXCIgKyBvcmllbnRhdGlvbkNsYXNzXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgdGhlIGB2b2x1bWUtcGFuZWxgIGFuZCBhbGwgY2hpbGQgY29tcG9uZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5oYW5kbGVNb3VzZU91dCgpO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIGBrZXl1cGAgZXZlbnRzIG9uIHRoZSBgVm9sdW1lQ29udHJvbGAsIGxvb2tpbmcgZm9yIEVTQywgd2hpY2ggY2xvc2VzXG4gICAqIHRoZSB2b2x1bWUgcGFuZWwgYW5kIHNldHMgZm9jdXMgb24gYE11dGVUb2dnbGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXl1cGAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleXVwXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVZvbHVtZUNvbnRyb2xLZXlVcCA9IGZ1bmN0aW9uIGhhbmRsZVZvbHVtZUNvbnRyb2xLZXlVcChldmVudCkge1xuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFc2MnKSkge1xuICAgICAgdGhpcy5tdXRlVG9nZ2xlLmZvY3VzKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYSBgVm9sdW1lUGFuZWxgIGdhaW5zIGhvdmVyIHZpYSBhIGBtb3VzZW92ZXJgIGV2ZW50LlxuICAgKiBUdXJucyBvbiBsaXN0ZW5pbmcgZm9yIGBtb3VzZW92ZXJgIGV2ZW50LiBXaGVuIHRoZXkgaGFwcGVuIGl0XG4gICAqIGNhbGxzIGB0aGlzLmhhbmRsZU1vdXNlT3ZlcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNlb3ZlcmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlb3ZlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZU92ZXIgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU92ZXIoZXZlbnQpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtaG92ZXInKTtcbiAgICBvbihkb2N1bWVudCwgJ2tleXVwJywgYmluZCh0aGlzLCB0aGlzLmhhbmRsZUtleVByZXNzKSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhIGBWb2x1bWVQYW5lbGAgZ2FpbnMgaG92ZXIgdmlhIGEgYG1vdXNlb3V0YCBldmVudC5cbiAgICogVHVybnMgb24gbGlzdGVuaW5nIGZvciBgbW91c2VvdXRgIGV2ZW50LiBXaGVuIHRoZXkgaGFwcGVuIGl0XG4gICAqIGNhbGxzIGB0aGlzLmhhbmRsZU1vdXNlT3V0YC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgbW91c2VvdXRgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZW91dFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3V0KGV2ZW50KSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWhvdmVyJyk7XG4gICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCBiaW5kKHRoaXMsIHRoaXMuaGFuZGxlS2V5UHJlc3MpKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBga2V5dXBgIGV2ZW50IG9uIHRoZSBkb2N1bWVudCBvciBga2V5ZG93bmAgZXZlbnQgb24gdGhlIGBWb2x1bWVQYW5lbGAsXG4gICAqIGxvb2tpbmcgZm9yIEVTQywgd2hpY2ggaGlkZXMgdGhlIGBWb2x1bWVDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBrZXlwcmVzcyB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50LlxuICAgKlxuICAgKiBAbGlzdGVucyBrZXlkb3duIHwga2V5dXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5UHJlc3MgPSBmdW5jdGlvbiBoYW5kbGVLZXlQcmVzcyhldmVudCkge1xuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFc2MnKSkge1xuICAgICAgdGhpcy5oYW5kbGVNb3VzZU91dCgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVm9sdW1lUGFuZWw7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGBWb2x1bWVDb250cm9sYFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuVm9sdW1lUGFuZWwucHJvdG90eXBlLm9wdGlvbnNfID0ge1xuICBjaGlsZHJlbjogWydtdXRlVG9nZ2xlJywgJ3ZvbHVtZUNvbnRyb2wnXVxufTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVm9sdW1lUGFuZWwnLCBWb2x1bWVQYW5lbCk7XG5cbi8qKlxuICogVGhlIE1lbnUgY29tcG9uZW50IGlzIHVzZWQgdG8gYnVpbGQgcG9wdXAgbWVudXMsIGluY2x1ZGluZyBzdWJ0aXRsZSBhbmRcbiAqIGNhcHRpb25zIHNlbGVjdGlvbiBtZW51cy5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTWVudSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW51LCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIHRoZSBwbGF5ZXIgdGhhdCB0aGlzIGNvbXBvbmVudCBzaG91bGQgYXR0YWNoIHRvXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIE9iamVjdCBvZiBvcHRpb24gbmFtZXMgYW5kIHZhbHVlc1xuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gTWVudShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgX3RoaXMubWVudUJ1dHRvbl8gPSBvcHRpb25zLm1lbnVCdXR0b247XG4gICAgfVxuXG4gICAgX3RoaXMuZm9jdXNlZENoaWxkXyA9IC0xO1xuXG4gICAgX3RoaXMub24oJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVLZXlEb3duKTsgLy8gQWxsIHRoZSBtZW51IGl0ZW0gaW5zdGFuY2VzIHNoYXJlIHRoZSBzYW1lIGJsdXIgaGFuZGxlciBwcm92aWRlZCBieSB0aGUgbWVudSBjb250YWluZXIuXG5cblxuICAgIF90aGlzLmJvdW5kSGFuZGxlQmx1cl8gPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy5oYW5kbGVCbHVyKTtcbiAgICBfdGhpcy5ib3VuZEhhbmRsZVRhcENsaWNrXyA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZVRhcENsaWNrKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHtAbGluayBNZW51SXRlbX0uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb21wb25lbnRcbiAgICogICAgICAgIFRoZSBpbnN0YW5jZSBvZiB0aGUgYE1lbnVJdGVtYCB0byBhZGQgbGlzdGVuZXJzIHRvLlxuICAgKlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNZW51LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkRXZlbnRMaXN0ZW5lckZvckl0ZW0gPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyRm9ySXRlbShjb21wb25lbnQpIHtcbiAgICBpZiAoIShjb21wb25lbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbihjb21wb25lbnQsICdibHVyJywgdGhpcy5ib3VuZEhhbmRsZUJsdXJfKTtcbiAgICB0aGlzLm9uKGNvbXBvbmVudCwgWyd0YXAnLCAnY2xpY2snXSwgdGhpcy5ib3VuZEhhbmRsZVRhcENsaWNrXyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUge0BsaW5rIE1lbnVJdGVtfS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudFxuICAgKiAgICAgICAgVGhlIGluc3RhbmNlIG9mIHRoZSBgTWVudUl0ZW1gIHRvIHJlbW92ZSBsaXN0ZW5lcnMuXG4gICAqXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZUV2ZW50TGlzdGVuZXJGb3JJdGVtID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lckZvckl0ZW0oY29tcG9uZW50KSB7XG4gICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgQ29tcG9uZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub2ZmKGNvbXBvbmVudCwgJ2JsdXInLCB0aGlzLmJvdW5kSGFuZGxlQmx1cl8pO1xuICAgIHRoaXMub2ZmKGNvbXBvbmVudCwgWyd0YXAnLCAnY2xpY2snXSwgdGhpcy5ib3VuZEhhbmRsZVRhcENsaWNrXyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGluZGlyZWN0bHkgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGFkZGVkXG4gICAqIGJlZm9yZSB0aGUgY29tcG9uZW50IGFkZHMgdG8gdGhlIG5ldyBtZW51IGluc3RhbmNlIGJ5IGBhZGRJdGVtYC5cbiAgICogSW4gdGhpcyBjYXNlLCB0aGUgb3JpZ2luYWwgbWVudSBpbnN0YW5jZSB3aWxsIHJlbW92ZSB0aGUgY29tcG9uZW50XG4gICAqIGJ5IGNhbGxpbmcgYHJlbW92ZUNoaWxkYC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudFxuICAgKiAgICAgICAgVGhlIGluc3RhbmNlIG9mIHRoZSBgTWVudUl0ZW1gXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQoY29tcG9uZW50KSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21wb25lbnQgPSB0aGlzLmdldENoaWxkKGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyRm9ySXRlbShjb21wb25lbnQpO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGQuY2FsbCh0aGlzLCBjb21wb25lbnQpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgTWVudUl0ZW19IHRvIHRoZSBtZW51LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IGNvbXBvbmVudFxuICAgKiAgICAgICAgVGhlIG5hbWUgb3IgaW5zdGFuY2Ugb2YgdGhlIGBNZW51SXRlbWAgdG8gYWRkLlxuICAgKlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRJdGVtID0gZnVuY3Rpb24gYWRkSXRlbShjb21wb25lbnQpIHtcbiAgICB2YXIgY2hpbGRDb21wb25lbnQgPSB0aGlzLmFkZENoaWxkKGNvbXBvbmVudCk7XG5cbiAgICBpZiAoY2hpbGRDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lckZvckl0ZW0oY2hpbGRDb21wb25lbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgTWVudWBzIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIHRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCQxKCkge1xuICAgIHZhciBjb250ZW50RWxUeXBlID0gdGhpcy5vcHRpb25zXy5jb250ZW50RWxUeXBlIHx8ICd1bCc7XG4gICAgdGhpcy5jb250ZW50RWxfID0gY3JlYXRlRWwoY29udGVudEVsVHlwZSwge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtY29udGVudCdcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRlbnRFbF8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ21lbnUnKTtcblxuICAgIHZhciBlbCA9IF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGFwcGVuZDogdGhpcy5jb250ZW50RWxfLFxuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUnXG4gICAgfSk7XG5cbiAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pOyAvLyBQcmV2ZW50IGNsaWNrcyBmcm9tIGJ1YmJsaW5nIHVwLiBOZWVkZWQgZm9yIE1lbnUgQnV0dG9ucyxcbiAgICAvLyB3aGVyZSBhIGNsaWNrIG9uIHRoZSBwYXJlbnQgaXMgc2lnbmlmaWNhbnRcblxuICAgIG9uKGVsLCAnY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuY29udGVudEVsXyA9IG51bGw7XG4gICAgdGhpcy5ib3VuZEhhbmRsZUJsdXJfID0gbnVsbDtcbiAgICB0aGlzLmJvdW5kSGFuZGxlVGFwQ2xpY2tfID0gbnVsbDtcblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBgTWVudUl0ZW1gIGxvc2VzIGZvY3VzLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBibHVyYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgYmx1clxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkge1xuICAgIHZhciByZWxhdGVkVGFyZ2V0ID0gZXZlbnQucmVsYXRlZFRhcmdldCB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50OyAvLyBDbG9zZSBtZW51IHBvcHVwIHdoZW4gYSB1c2VyIGNsaWNrcyBvdXRzaWRlIHRoZSBtZW51XG5cbiAgICBpZiAoIXRoaXMuY2hpbGRyZW4oKS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5lbCgpID09PSByZWxhdGVkVGFyZ2V0O1xuICAgIH0pKSB7XG4gICAgICB2YXIgYnRuID0gdGhpcy5tZW51QnV0dG9uXztcblxuICAgICAgaWYgKGJ0biAmJiBidG4uYnV0dG9uUHJlc3NlZF8gJiYgcmVsYXRlZFRhcmdldCAhPT0gYnRuLmVsKCkuZmlyc3RDaGlsZCkge1xuICAgICAgICBidG4udW5wcmVzc0J1dHRvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBgTWVudUl0ZW1gIGdldHMgY2xpY2tlZCBvciB0YXBwZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGNsaWNrYCBvciBgdGFwYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgY2xpY2ssdGFwXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRhcENsaWNrID0gZnVuY3Rpb24gaGFuZGxlVGFwQ2xpY2soZXZlbnQpIHtcbiAgICAvLyBVbnByZXNzIHRoZSBhc3NvY2lhdGVkIE1lbnVCdXR0b24sIGFuZCBtb3ZlIGZvY3VzIGJhY2sgdG8gaXRcbiAgICBpZiAodGhpcy5tZW51QnV0dG9uXykge1xuICAgICAgdGhpcy5tZW51QnV0dG9uXy51bnByZXNzQnV0dG9uKCk7XG4gICAgICB2YXIgY2hpbGRDb21wb25lbnRzID0gdGhpcy5jaGlsZHJlbigpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2hpbGRDb21wb25lbnRzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmb3VuZENvbXBvbmVudCA9IGNoaWxkQ29tcG9uZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50LmVsKCkgPT09IGV2ZW50LnRhcmdldDtcbiAgICAgIH0pWzBdO1xuXG4gICAgICBpZiAoIWZvdW5kQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gZG9uJ3QgZm9jdXMgbWVudSBidXR0b24gaWYgaXRlbSBpcyBhIGNhcHRpb24gc2V0dGluZ3MgaXRlbVxuICAgICAgLy8gYmVjYXVzZSBmb2N1cyB3aWxsIG1vdmUgZWxzZXdoZXJlXG5cblxuICAgICAgaWYgKGZvdW5kQ29tcG9uZW50Lm5hbWUoKSAhPT0gJ0NhcHRpb25TZXR0aW5nc01lbnVJdGVtJykge1xuICAgICAgICB0aGlzLm1lbnVCdXR0b25fLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSBga2V5ZG93bmAgZXZlbnQgb24gdGhpcyBtZW51LiBUaGlzIGxpc3RlbmVyIGlzIGFkZGVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIEEgYGtleWRvd25gIGV2ZW50IHRoYXQgaGFwcGVuZWQgb24gdGhlIG1lbnUuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBMZWZ0IGFuZCBEb3duIEFycm93c1xuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdMZWZ0JykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRG93bicpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnN0ZXBGb3J3YXJkKCk7IC8vIFVwIGFuZCBSaWdodCBBcnJvd3NcbiAgICB9IGVsc2UgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1JpZ2h0JykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVXAnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5zdGVwQmFjaygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTW92ZSB0byBuZXh0IChsb3dlcikgbWVudSBpdGVtIGZvciBrZXlib2FyZCB1c2Vycy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RlcEZvcndhcmQgPSBmdW5jdGlvbiBzdGVwRm9yd2FyZCgpIHtcbiAgICB2YXIgc3RlcENoaWxkID0gMDtcblxuICAgIGlmICh0aGlzLmZvY3VzZWRDaGlsZF8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RlcENoaWxkID0gdGhpcy5mb2N1c2VkQ2hpbGRfICsgMTtcbiAgICB9XG5cbiAgICB0aGlzLmZvY3VzKHN0ZXBDaGlsZCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgdG8gcHJldmlvdXMgKGhpZ2hlcikgbWVudSBpdGVtIGZvciBrZXlib2FyZCB1c2Vycy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RlcEJhY2sgPSBmdW5jdGlvbiBzdGVwQmFjaygpIHtcbiAgICB2YXIgc3RlcENoaWxkID0gMDtcblxuICAgIGlmICh0aGlzLmZvY3VzZWRDaGlsZF8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RlcENoaWxkID0gdGhpcy5mb2N1c2VkQ2hpbGRfIC0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmZvY3VzKHN0ZXBDaGlsZCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBmb2N1cyBvbiBhIHtAbGluayBNZW51SXRlbX0gaW4gdGhlIGBNZW51YC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBbaXRlbT0wXVxuICAgKiAgICAgICAgSW5kZXggb2YgY2hpbGQgaXRlbSBzZXQgZm9jdXMgb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZvY3VzID0gZnVuY3Rpb24gZm9jdXMoaXRlbSkge1xuICAgIGlmIChpdGVtID09PSB2b2lkIDApIHtcbiAgICAgIGl0ZW0gPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4oKS5zbGljZSgpO1xuICAgIHZhciBoYXZlVGl0bGUgPSBjaGlsZHJlbi5sZW5ndGggJiYgY2hpbGRyZW5bMF0uY2xhc3NOYW1lICYmIC92anMtbWVudS10aXRsZS8udGVzdChjaGlsZHJlblswXS5jbGFzc05hbWUpO1xuXG4gICAgaWYgKGhhdmVUaXRsZSkge1xuICAgICAgY2hpbGRyZW4uc2hpZnQoKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGl0ZW0gPCAwKSB7XG4gICAgICAgIGl0ZW0gPSAwO1xuICAgICAgfSBlbHNlIGlmIChpdGVtID49IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBpdGVtID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mb2N1c2VkQ2hpbGRfID0gaXRlbTtcbiAgICAgIGNoaWxkcmVuW2l0ZW1dLmVsXy5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTWVudTtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdNZW51JywgTWVudSk7XG5cbi8qKlxuICogQSBgTWVudUJ1dHRvbmAgY2xhc3MgZm9yIGFueSBwb3B1cCB7QGxpbmsgTWVudX0uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIE1lbnVCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVudUJ1dHRvbiwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBNZW51QnV0dG9uKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMubWVudUJ1dHRvbl8gPSBuZXcgQnV0dG9uKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICBfdGhpcy5tZW51QnV0dG9uXy5jb250cm9sVGV4dChfdGhpcy5jb250cm9sVGV4dF8pO1xuXG4gICAgX3RoaXMubWVudUJ1dHRvbl8uZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNwb3B1cCcsICd0cnVlJyk7IC8vIEFkZCBidWlsZENTU0NsYXNzIHZhbHVlcyB0byB0aGUgYnV0dG9uLCBub3QgdGhlIHdyYXBwZXJcblxuXG4gICAgdmFyIGJ1dHRvbkNsYXNzID0gQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzKCk7XG4gICAgX3RoaXMubWVudUJ1dHRvbl8uZWxfLmNsYXNzTmFtZSA9IF90aGlzLmJ1aWxkQ1NTQ2xhc3MoKSArICcgJyArIGJ1dHRvbkNsYXNzO1xuXG4gICAgX3RoaXMubWVudUJ1dHRvbl8ucmVtb3ZlQ2xhc3MoJ3Zqcy1jb250cm9sJyk7XG5cbiAgICBfdGhpcy5hZGRDaGlsZChfdGhpcy5tZW51QnV0dG9uXyk7XG5cbiAgICBfdGhpcy51cGRhdGUoKTtcblxuICAgIF90aGlzLmVuYWJsZWRfID0gdHJ1ZTtcblxuICAgIF90aGlzLm9uKF90aGlzLm1lbnVCdXR0b25fLCAndGFwJywgX3RoaXMuaGFuZGxlQ2xpY2spO1xuXG4gICAgX3RoaXMub24oX3RoaXMubWVudUJ1dHRvbl8sICdjbGljaycsIF90aGlzLmhhbmRsZUNsaWNrKTtcblxuICAgIF90aGlzLm9uKF90aGlzLm1lbnVCdXR0b25fLCAna2V5ZG93bicsIF90aGlzLmhhbmRsZUtleURvd24pO1xuXG4gICAgX3RoaXMub24oX3RoaXMubWVudUJ1dHRvbl8sICdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuYWRkQ2xhc3MoJ3Zqcy1ob3ZlcicpO1xuXG4gICAgICBfdGhpcy5tZW51LnNob3coKTtcblxuICAgICAgb24oZG9jdW1lbnQsICdrZXl1cCcsIGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZU1lbnVLZXlVcCkpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMub24oJ21vdXNlbGVhdmUnLCBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlKTtcblxuICAgIF90aGlzLm9uKCdrZXlkb3duJywgX3RoaXMuaGFuZGxlU3VibWVudUtleURvd24pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIG1lbnUgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUgb2YgaXRzIGl0ZW1zLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNZW51QnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBtZW51ID0gdGhpcy5jcmVhdGVNZW51KCk7XG5cbiAgICBpZiAodGhpcy5tZW51KSB7XG4gICAgICB0aGlzLm1lbnUuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5yZW1vdmVDaGlsZCh0aGlzLm1lbnUpO1xuICAgIH1cblxuICAgIHRoaXMubWVudSA9IG1lbnU7XG4gICAgdGhpcy5hZGRDaGlsZChtZW51KTtcbiAgICAvKipcbiAgICAgKiBUcmFjayB0aGUgc3RhdGUgb2YgdGhlIG1lbnUgYnV0dG9uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5idXR0b25QcmVzc2VkXyA9IGZhbHNlO1xuICAgIHRoaXMubWVudUJ1dHRvbl8uZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPD0gdGhpcy5oaWRlVGhyZXNob2xkXykge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBtZW51IGFuZCBhZGQgYWxsIGl0ZW1zIHRvIGl0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtNZW51fVxuICAgKiAgICAgICAgIFRoZSBjb25zdHJ1Y3RlZCBtZW51XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZU1lbnUgPSBmdW5jdGlvbiBjcmVhdGVNZW51KCkge1xuICAgIHZhciBtZW51ID0gbmV3IE1lbnUodGhpcy5wbGF5ZXJfLCB7XG4gICAgICBtZW51QnV0dG9uOiB0aGlzXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWVudSBpZiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGlzIHRocmVzaG9sZC4gVGhpcyBkZWZhdWx0c1xuICAgICAqIHRvIDAgYW5kIHdoZW5ldmVyIHdlIGFkZCBpdGVtcyB3aGljaCBjYW4gYmUgaGlkZGVuIHRvIHRoZSBtZW51IHdlJ2xsIGluY3JlbWVudCBpdC4gV2UgbGlzdFxuICAgICAqIGl0IGhlcmUgYmVjYXVzZSBldmVyeSB0aW1lIHdlIHJ1biBgY3JlYXRlTWVudWAgd2UgbmVlZCB0byByZXNldCB0aGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cblxuICAgIHRoaXMuaGlkZVRocmVzaG9sZF8gPSAwOyAvLyBBZGQgYSB0aXRsZSBsaXN0IGl0ZW0gdG8gdGhlIHRvcFxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18udGl0bGUpIHtcbiAgICAgIHZhciB0aXRsZUVsID0gY3JlYXRlRWwoJ2xpJywge1xuICAgICAgICBjbGFzc05hbWU6ICd2anMtbWVudS10aXRsZScsXG4gICAgICAgIGlubmVySFRNTDogdG9UaXRsZUNhc2UodGhpcy5vcHRpb25zXy50aXRsZSksXG4gICAgICAgIHRhYkluZGV4OiAtMVxuICAgICAgfSk7XG4gICAgICB0aGlzLmhpZGVUaHJlc2hvbGRfICs9IDE7XG4gICAgICB2YXIgdGl0bGVDb21wb25lbnQgPSBuZXcgQ29tcG9uZW50KHRoaXMucGxheWVyXywge1xuICAgICAgICBlbDogdGl0bGVFbFxuICAgICAgfSk7XG4gICAgICBtZW51LmFkZEl0ZW0odGl0bGVDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNyZWF0ZUl0ZW1zKCk7XG5cbiAgICBpZiAodGhpcy5pdGVtcykge1xuICAgICAgLy8gQWRkIG1lbnUgaXRlbXMgdG8gdGhlIG1lbnVcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtZW51LmFkZEl0ZW0odGhpcy5pdGVtc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbnU7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgbGlzdCBvZiBtZW51IGl0ZW1zLiBTcGVjaWZpYyB0byBlYWNoIHN1YmNsYXNzLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlSXRlbXMgPSBmdW5jdGlvbiBjcmVhdGVJdGVtcygpIHt9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBNZW51QnV0dG9uc2BzIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MoKVxuICAgIH0sIHt9KTtcbiAgfVxuICAvKipcbiAgICogQWxsb3cgc3ViIGNvbXBvbmVudHMgdG8gc3RhY2sgQ1NTIGNsYXNzIG5hbWVzIGZvciB0aGUgd3JhcHBlciBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgY29uc3RydWN0ZWQgd3JhcHBlciBET00gYGNsYXNzTmFtZWBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVpbGRXcmFwcGVyQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZFdyYXBwZXJDU1NDbGFzcygpIHtcbiAgICB2YXIgbWVudUJ1dHRvbkNsYXNzID0gJ3Zqcy1tZW51LWJ1dHRvbic7IC8vIElmIHRoZSBpbmxpbmUgb3B0aW9uIGlzIHBhc3NlZCwgd2Ugd2FudCB0byB1c2UgZGlmZmVyZW50IHN0eWxlcyBhbHRvZ2V0aGVyLlxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18uaW5saW5lID09PSB0cnVlKSB7XG4gICAgICBtZW51QnV0dG9uQ2xhc3MgKz0gJy1pbmxpbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW51QnV0dG9uQ2xhc3MgKz0gJy1wb3B1cCc7XG4gICAgfSAvLyBUT0RPOiBGaXggdGhlIENTUyBzbyB0aGF0IHRoaXMgaXNuJ3QgbmVjZXNzYXJ5XG5cblxuICAgIHZhciBidXR0b25DbGFzcyA9IEJ1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcygpO1xuICAgIHJldHVybiBcInZqcy1tZW51LWJ1dHRvbiBcIiArIG1lbnVCdXR0b25DbGFzcyArIFwiIFwiICsgYnV0dG9uQ2xhc3MgKyBcIiBcIiArIF9Db21wb25lbnQucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICB2YXIgbWVudUJ1dHRvbkNsYXNzID0gJ3Zqcy1tZW51LWJ1dHRvbic7IC8vIElmIHRoZSBpbmxpbmUgb3B0aW9uIGlzIHBhc3NlZCwgd2Ugd2FudCB0byB1c2UgZGlmZmVyZW50IHN0eWxlcyBhbHRvZ2V0aGVyLlxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18uaW5saW5lID09PSB0cnVlKSB7XG4gICAgICBtZW51QnV0dG9uQ2xhc3MgKz0gJy1pbmxpbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW51QnV0dG9uQ2xhc3MgKz0gJy1wb3B1cCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwidmpzLW1lbnUtYnV0dG9uIFwiICsgbWVudUJ1dHRvbkNsYXNzICsgXCIgXCIgKyBfQ29tcG9uZW50LnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGxvY2FsaXplZCBjb250cm9sIHRleHQgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqXG4gICAqID4gTk9URTogVGhpcyB3aWxsIGNvbWUgZnJvbSB0aGUgaW50ZXJuYWwgYG1lbnVCdXR0b25fYCBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RleHRdXG4gICAqICAgICAgICBDb250cm9sIHRleHQgZm9yIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gW2VsPXRoaXMubWVudUJ1dHRvbl8uZWwoKV1cbiAgICogICAgICAgIEVsZW1lbnQgdG8gc2V0IHRoZSB0aXRsZSBvbi5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIC0gVGhlIGNvbnRyb2wgdGV4dCB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29udHJvbFRleHQgPSBmdW5jdGlvbiBjb250cm9sVGV4dCh0ZXh0LCBlbCkge1xuICAgIGlmIChlbCA9PT0gdm9pZCAwKSB7XG4gICAgICBlbCA9IHRoaXMubWVudUJ1dHRvbl8uZWwoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tZW51QnV0dG9uXy5jb250cm9sVGV4dCh0ZXh0LCBlbCk7XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgdGhlIGBtZW51LWJ1dHRvbmAgYW5kIGFsbCBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmhhbmRsZU1vdXNlTGVhdmUoKTtcblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGEgY2xpY2sgb24gYSBgTWVudUJ1dHRvbmAuXG4gICAqIFNlZSB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50I2hhbmRsZUNsaWNrfSBmb3IgaW5zdGFuY2VzIHdoZXJlIHRoaXMgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKSB7XG4gICAgICB0aGlzLnVucHJlc3NCdXR0b24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmVzc0J1dHRvbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZWxlYXZlYCBmb3IgYE1lbnVCdXR0b25gLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZWxlYXZlYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgbW91c2VsZWF2ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZShldmVudCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1ob3ZlcicpO1xuICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgYmluZCh0aGlzLCB0aGlzLmhhbmRsZU1lbnVLZXlVcCkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGZvY3VzIHRvIHRoZSBhY3R1YWwgYnV0dG9uLCBub3QgdG8gdGhpcyBlbGVtZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZvY3VzID0gZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgdGhpcy5tZW51QnV0dG9uXy5mb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGZvY3VzIGZyb20gdGhlIGFjdHVhbCBidXR0b24sIG5vdCB0aGlzIGVsZW1lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYmx1ciA9IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgdGhpcy5tZW51QnV0dG9uXy5ibHVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSB0YWIsIGVzY2FwZSwgZG93biBhcnJvdywgYW5kIHVwIGFycm93IGtleXMgZm9yIGBNZW51QnV0dG9uYC4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnQjaGFuZGxlS2V5RG93bn0gZm9yIGluc3RhbmNlcyB3aGVyZSB0aGlzIGlzIGNhbGxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBFc2NhcGUgb3IgVGFiIHVucHJlc3MgdGhlICdidXR0b24nXG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VzYycpIHx8IGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1RhYicpKSB7XG4gICAgICBpZiAodGhpcy5idXR0b25QcmVzc2VkXykge1xuICAgICAgICB0aGlzLnVucHJlc3NCdXR0b24oKTtcbiAgICAgIH0gLy8gRG9uJ3QgcHJldmVudERlZmF1bHQgZm9yIFRhYiBrZXkgLSB3ZSBzdGlsbCB3YW50IHRvIGxvc2UgZm9jdXNcblxuXG4gICAgICBpZiAoIWtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1RhYicpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFNldCBmb2N1cyBiYWNrIHRvIHRoZSBtZW51IGJ1dHRvbidzIGJ1dHRvblxuXG4gICAgICAgIHRoaXMubWVudUJ1dHRvbl8uZm9jdXMoKTtcbiAgICAgIH0gLy8gVXAgQXJyb3cgb3IgRG93biBBcnJvdyBhbHNvICdwcmVzcycgdGhlIGJ1dHRvbiB0byBvcGVuIHRoZSBtZW51XG5cbiAgICB9IGVsc2UgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1VwJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRG93bicpKSB7XG4gICAgICBpZiAoIXRoaXMuYnV0dG9uUHJlc3NlZF8pIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcmVzc0J1dHRvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGEgYGtleXVwYCBldmVudCBvbiBhIGBNZW51QnV0dG9uYC4gVGhlIGxpc3RlbmVyIGZvciB0aGlzIGlzIGFkZGVkIGluXG4gICAqIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIEtleSBwcmVzcyBldmVudFxuICAgKlxuICAgKiBAbGlzdGVucyBrZXl1cFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNZW51S2V5VXAgPSBmdW5jdGlvbiBoYW5kbGVNZW51S2V5VXAoZXZlbnQpIHtcbiAgICAvLyBFc2NhcGUgaGlkZXMgcG9wdXAgbWVudVxuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFc2MnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdUYWInKSkge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWhvdmVyJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBuYW1lIG5vdyBkZWxlZ2F0ZXMgdG8gYGhhbmRsZVN1Ym1lbnVLZXlEb3duYC4gVGhpcyBtZWFuc1xuICAgKiBhbnlvbmUgY2FsbGluZyBgaGFuZGxlU3VibWVudUtleVByZXNzYCB3aWxsIG5vdCBzZWUgdGhlaXIgbWV0aG9kIGNhbGxzXG4gICAqIHN0b3Agd29ya2luZy5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlU3VibWVudUtleVByZXNzID0gZnVuY3Rpb24gaGFuZGxlU3VibWVudUtleVByZXNzKGV2ZW50KSB7XG4gICAgdGhpcy5oYW5kbGVTdWJtZW51S2V5RG93bihldmVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGBrZXlkb3duYCBldmVudCBvbiBhIHN1Yi1tZW51LiBUaGUgbGlzdGVuZXIgZm9yIHRoaXMgaXMgYWRkZWQgaW5cbiAgICogdGhlIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgS2V5IHByZXNzIGV2ZW50XG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlU3VibWVudUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVTdWJtZW51S2V5RG93bihldmVudCkge1xuICAgIC8vIEVzY2FwZSBvciBUYWIgdW5wcmVzcyB0aGUgJ2J1dHRvbidcbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRXNjJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVGFiJykpIHtcbiAgICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKSB7XG4gICAgICAgIHRoaXMudW5wcmVzc0J1dHRvbigpO1xuICAgICAgfSAvLyBEb24ndCBwcmV2ZW50RGVmYXVsdCBmb3IgVGFiIGtleSAtIHdlIHN0aWxsIHdhbnQgdG8gbG9zZSBmb2N1c1xuXG5cbiAgICAgIGlmICgha2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVGFiJykpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gU2V0IGZvY3VzIGJhY2sgdG8gdGhlIG1lbnUgYnV0dG9uJ3MgYnV0dG9uXG5cbiAgICAgICAgdGhpcy5tZW51QnV0dG9uXy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogUHV0IHRoZSBjdXJyZW50IGBNZW51QnV0dG9uYCBpbnRvIGEgcHJlc3NlZCBzdGF0ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJlc3NCdXR0b24gPSBmdW5jdGlvbiBwcmVzc0J1dHRvbigpIHtcbiAgICBpZiAodGhpcy5lbmFibGVkXykge1xuICAgICAgdGhpcy5idXR0b25QcmVzc2VkXyA9IHRydWU7XG4gICAgICB0aGlzLm1lbnUuc2hvdygpO1xuICAgICAgdGhpcy5tZW51LmxvY2tTaG93aW5nKCk7XG4gICAgICB0aGlzLm1lbnVCdXR0b25fLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpOyAvLyBzZXQgdGhlIGZvY3VzIGludG8gdGhlIHN1Ym1lbnUsIGV4Y2VwdCBvbiBpT1Mgd2hlcmUgaXQgaXMgcmVzdWx0aW5nIGluXG4gICAgICAvLyB1bmRlc2lyZWQgc2Nyb2xsaW5nIGJlaGF2aW9yIHdoZW4gdGhlIHBsYXllciBpcyBpbiBhbiBpZnJhbWVcblxuICAgICAgaWYgKElTX0lPUyAmJiBpc0luRnJhbWUoKSkge1xuICAgICAgICAvLyBSZXR1cm4gZWFybHkgc28gdGhhdCB0aGUgbWVudSBpc24ndCBmb2N1c2VkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tZW51LmZvY3VzKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUYWtlIHRoZSBjdXJyZW50IGBNZW51QnV0dG9uYCBvdXQgb2YgYSBwcmVzc2VkIHN0YXRlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bnByZXNzQnV0dG9uID0gZnVuY3Rpb24gdW5wcmVzc0J1dHRvbigpIHtcbiAgICBpZiAodGhpcy5lbmFibGVkXykge1xuICAgICAgdGhpcy5idXR0b25QcmVzc2VkXyA9IGZhbHNlO1xuICAgICAgdGhpcy5tZW51LnVubG9ja1Nob3dpbmcoKTtcbiAgICAgIHRoaXMubWVudS5oaWRlKCk7XG4gICAgICB0aGlzLm1lbnVCdXR0b25fLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGBNZW51QnV0dG9uYC4gRG9uJ3QgYWxsb3cgaXQgdG8gYmUgY2xpY2tlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdGhpcy51bnByZXNzQnV0dG9uKCk7XG4gICAgdGhpcy5lbmFibGVkXyA9IGZhbHNlO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1kaXNhYmxlZCcpO1xuICAgIHRoaXMubWVudUJ1dHRvbl8uZGlzYWJsZSgpO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGUgdGhlIGBNZW51QnV0dG9uYC4gQWxsb3cgaXQgdG8gYmUgY2xpY2tlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIHRoaXMuZW5hYmxlZF8gPSB0cnVlO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1kaXNhYmxlZCcpO1xuICAgIHRoaXMubWVudUJ1dHRvbl8uZW5hYmxlKCk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbnVCdXR0b247XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTWVudUJ1dHRvbicsIE1lbnVCdXR0b24pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBidXR0b25zIHRoYXQgdG9nZ2xlIHNwZWNpZmljICB0cmFjayB0eXBlcyAoZS5nLiBzdWJ0aXRsZXMpLlxuICpcbiAqIEBleHRlbmRzIE1lbnVCdXR0b25cbiAqL1xuXG52YXIgVHJhY2tCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9NZW51QnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYWNrQnV0dG9uLCBfTWVudUJ1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBUcmFja0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgdHJhY2tzID0gb3B0aW9ucy50cmFja3M7XG4gICAgX3RoaXMgPSBfTWVudUJ1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIGlmIChfdGhpcy5pdGVtcy5sZW5ndGggPD0gMSkge1xuICAgICAgX3RoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIGlmICghdHJhY2tzKSB7XG4gICAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZUhhbmRsZXIgPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy51cGRhdGUpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuXG4gICAgX3RoaXMucGxheWVyXy5vbigncmVhZHknLCB1cGRhdGVIYW5kbGVyKTtcblxuICAgIF90aGlzLnBsYXllcl8ub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB1cGRhdGVIYW5kbGVyKTtcbiAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIFRyYWNrQnV0dG9uO1xufShNZW51QnV0dG9uKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUcmFja0J1dHRvbicsIFRyYWNrQnV0dG9uKTtcblxuLyoqXG4gKiBAZmlsZSBtZW51LWtleXMuanNcbiAqL1xuXG4vKipcbiAgKiBBbGwga2V5cyB1c2VkIGZvciBvcGVyYXRpb24gb2YgYSBtZW51IChgTWVudUJ1dHRvbmAsIGBNZW51YCwgYW5kIGBNZW51SXRlbWApXG4gICogTm90ZSB0aGF0ICdFbnRlcicgYW5kICdTcGFjZScgYXJlIG5vdCBpbmNsdWRlZCBoZXJlIChvdGhlcndpc2UgdGhleSB3b3VsZFxuICAqIHByZXZlbnQgdGhlIGBNZW51QnV0dG9uYCBhbmQgYE1lbnVJdGVtYCBmcm9tIGJlaW5nIGtleWJvYXJkLWNsaWNrYWJsZSlcbiAgKiBAdHlwZWRlZiBNZW51S2V5c1xuICAqIEBhcnJheVxuICAqL1xudmFyIE1lbnVLZXlzID0gWydUYWInLCAnRXNjJywgJ1VwJywgJ0Rvd24nLCAnUmlnaHQnLCAnTGVmdCddO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGEgbWVudSBpdGVtLiBgPGxpPmBcbiAqXG4gKiBAZXh0ZW5kcyBDbGlja2FibGVDb21wb25lbnRcbiAqL1xuXG52YXIgTWVudUl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9DbGlja2FibGVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVudUl0ZW0sIF9DbGlja2FibGVDb21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIE1lbnVJdGVtKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NsaWNrYWJsZUNvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RhYmxlID0gb3B0aW9ucy5zZWxlY3RhYmxlO1xuICAgIF90aGlzLmlzU2VsZWN0ZWRfID0gb3B0aW9ucy5zZWxlY3RlZCB8fCBmYWxzZTtcbiAgICBfdGhpcy5tdWx0aVNlbGVjdGFibGUgPSBvcHRpb25zLm11bHRpU2VsZWN0YWJsZTtcblxuICAgIF90aGlzLnNlbGVjdGVkKF90aGlzLmlzU2VsZWN0ZWRfKTtcblxuICAgIGlmIChfdGhpcy5zZWxlY3RhYmxlKSB7XG4gICAgICBpZiAoX3RoaXMubXVsdGlTZWxlY3RhYmxlKSB7XG4gICAgICAgIF90aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbWVudWl0ZW1jaGVja2JveCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuZWxfLnNldEF0dHJpYnV0ZSgncm9sZScsICdtZW51aXRlbXJhZGlvJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbWVudWl0ZW0nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYE1lbnVJdGVtJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPWxpXVxuICAgKiAgICAgICAgRWxlbWVudCdzIG5vZGUgdHlwZSwgbm90IGFjdHVhbGx5IHVzZWQsIGFsd2F5cyBzZXQgdG8gYGxpYC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wcz17fV1cbiAgICogICAgICAgIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJzPXt9XVxuICAgKiAgICAgICAgQW4gb2JqZWN0IG9mIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE1lbnVJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCh0eXBlLCBwcm9wcywgYXR0cnMpIHtcbiAgICAvLyBUaGUgY29udHJvbCBpcyB0ZXh0dWFsLCBub3QganVzdCBhbiBpY29uXG4gICAgdGhpcy5ub25JY29uQ29udHJvbCA9IHRydWU7XG4gICAgcmV0dXJuIF9DbGlja2FibGVDb21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2xpJywgYXNzaWduKHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1tZW51LWl0ZW0nLFxuICAgICAgaW5uZXJIVE1MOiBcIjxzcGFuIGNsYXNzPVxcXCJ2anMtbWVudS1pdGVtLXRleHRcXFwiPlwiICsgdGhpcy5sb2NhbGl6ZSh0aGlzLm9wdGlvbnNfLmxhYmVsKSArIFwiPC9zcGFuPlwiLFxuICAgICAgdGFiSW5kZXg6IC0xXG4gICAgfSwgcHJvcHMpLCBhdHRycyk7XG4gIH1cbiAgLyoqXG4gICAqIElnbm9yZSBrZXlzIHdoaWNoIGFyZSB1c2VkIGJ5IHRoZSBtZW51LCBidXQgcGFzcyBhbnkgb3RoZXIgb25lcyB1cC4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnQjaGFuZGxlS2V5RG93bn0gZm9yIGluc3RhbmNlcyB3aGVyZSB0aGlzIGlzIGNhbGxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoIU1lbnVLZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGtleWNvZGUuaXNFdmVudEtleShldmVudCwga2V5KTtcbiAgICB9KSkge1xuICAgICAgLy8gUGFzcyBrZXlkb3duIGhhbmRsaW5nIHVwIGZvciB1bnVzZWQga2V5c1xuICAgICAgX0NsaWNrYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFueSBjbGljayBvbiBhIGBNZW51SXRlbWAgcHV0cyBpdCBpbnRvIHRoZSBzZWxlY3RlZCBzdGF0ZS5cbiAgICogU2VlIHtAbGluayBDbGlja2FibGVDb21wb25lbnQjaGFuZGxlQ2xpY2t9IGZvciBpbnN0YW5jZXMgd2hlcmUgdGhpcyBpcyBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy5zZWxlY3RlZCh0cnVlKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBzdGF0ZSBmb3IgdGhpcyBtZW51IGl0ZW0gYXMgc2VsZWN0ZWQgb3Igbm90LlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNlbGVjdGVkXG4gICAqICAgICAgICBpZiB0aGUgbWVudSBpdGVtIGlzIHNlbGVjdGVkIG9yIG5vdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZWxlY3RlZCA9IGZ1bmN0aW9uIHNlbGVjdGVkKF9zZWxlY3RlZCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGFibGUpIHtcbiAgICAgIGlmIChfc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXNlbGVjdGVkJyk7XG4gICAgICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgJ3RydWUnKTsgLy8gYXJpYS1jaGVja2VkIGlzbid0IGZ1bGx5IHN1cHBvcnRlZCBieSBicm93c2Vycy9zY3JlZW4gcmVhZGVycyxcbiAgICAgICAgLy8gc28gaW5kaWNhdGUgc2VsZWN0ZWQgc3RhdGUgdG8gc2NyZWVuIHJlYWRlciBpbiB0aGUgY29udHJvbCB0ZXh0LlxuXG4gICAgICAgIHRoaXMuY29udHJvbFRleHQoJywgc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5pc1NlbGVjdGVkXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWNoZWNrZWQnLCAnZmFsc2UnKTsgLy8gSW5kaWNhdGUgdW4tc2VsZWN0ZWQgc3RhdGUgdG8gc2NyZWVuIHJlYWRlclxuXG4gICAgICAgIHRoaXMuY29udHJvbFRleHQoJycpO1xuICAgICAgICB0aGlzLmlzU2VsZWN0ZWRfID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBNZW51SXRlbTtcbn0oQ2xpY2thYmxlQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdNZW51SXRlbScsIE1lbnVJdGVtKTtcblxuLyoqXG4gKiBUaGUgc3BlY2lmaWMgbWVudSBpdGVtIHR5cGUgZm9yIHNlbGVjdGluZyBhIGxhbmd1YWdlIHdpdGhpbiBhIHRleHQgdHJhY2sga2luZFxuICpcbiAqIEBleHRlbmRzIE1lbnVJdGVtXG4gKi9cblxudmFyIFRleHRUcmFja01lbnVJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTWVudUl0ZW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoVGV4dFRyYWNrTWVudUl0ZW0sIF9NZW51SXRlbSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBUZXh0VHJhY2tNZW51SXRlbShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgdHJhY2sgPSBvcHRpb25zLnRyYWNrO1xuICAgIHZhciB0cmFja3MgPSBwbGF5ZXIudGV4dFRyYWNrcygpOyAvLyBNb2RpZnkgb3B0aW9ucyBmb3IgcGFyZW50IE1lbnVJdGVtIGNsYXNzJ3MgaW5pdC5cblxuICAgIG9wdGlvbnMubGFiZWwgPSB0cmFjay5sYWJlbCB8fCB0cmFjay5sYW5ndWFnZSB8fCAnVW5rbm93bic7XG4gICAgb3B0aW9ucy5zZWxlY3RlZCA9IHRyYWNrLm1vZGUgPT09ICdzaG93aW5nJztcbiAgICBfdGhpcyA9IF9NZW51SXRlbS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy50cmFjayA9IHRyYWNrOyAvLyBEZXRlcm1pbmUgdGhlIHJlbGV2YW50IGtpbmQocykgb2YgdHJhY2tzIGZvciB0aGlzIGNvbXBvbmVudCBhbmQgZmlsdGVyXG4gICAgLy8gb3V0IGVtcHR5IGtpbmRzLlxuXG4gICAgX3RoaXMua2luZHMgPSAob3B0aW9ucy5raW5kcyB8fCBbb3B0aW9ucy5raW5kIHx8IF90aGlzLnRyYWNrLmtpbmRdKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICB2YXIgY2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uIGNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlVHJhY2tzQ2hhbmdlLmFwcGx5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gc2VsZWN0ZWRMYW5ndWFnZUNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5oYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlLmFwcGx5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKFsnbG9hZHN0YXJ0JywgJ3RleHR0cmFja2NoYW5nZSddLCBjaGFuZ2VIYW5kbGVyKTtcbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2UnLCBzZWxlY3RlZExhbmd1YWdlQ2hhbmdlSGFuZGxlcik7XG5cbiAgICBfdGhpcy5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBsYXllci5vZmYoWydsb2Fkc3RhcnQnLCAndGV4dHRyYWNrY2hhbmdlJ10sIGNoYW5nZUhhbmRsZXIpO1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNoYW5nZUhhbmRsZXIpO1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2UnLCBzZWxlY3RlZExhbmd1YWdlQ2hhbmdlSGFuZGxlcik7XG4gICAgfSk7IC8vIGlPUzcgZG9lc24ndCBkaXNwYXRjaCBjaGFuZ2UgZXZlbnRzIHRvIFRleHRUcmFja0xpc3RzIHdoZW4gYW5cbiAgICAvLyBhc3NvY2lhdGVkIHRyYWNrJ3MgbW9kZSBjaGFuZ2VzLiBXaXRob3V0IHNvbWV0aGluZyBsaWtlXG4gICAgLy8gT2JqZWN0Lm9ic2VydmUoKSAoYWxzbyBub3QgcHJlc2VudCBvbiBpT1M3KSwgaXQncyBub3RcbiAgICAvLyBwb3NzaWJsZSB0byBkZXRlY3QgY2hhbmdlcyB0byB0aGUgbW9kZSBhdHRyaWJ1dGUgYW5kIHBvbHlmaWxsXG4gICAgLy8gdGhlIGNoYW5nZSBldmVudC4gQXMgYSBwb29yIHN1YnN0aXR1dGUsIHdlIG1hbnVhbGx5IGRpc3BhdGNoXG4gICAgLy8gY2hhbmdlIGV2ZW50cyB3aGVuZXZlciB0aGUgY29udHJvbHMgbW9kaWZ5IHRoZSBtb2RlLlxuXG5cbiAgICBpZiAodHJhY2tzLm9uY2hhbmdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBldmVudDtcblxuICAgICAgX3RoaXMub24oWyd0YXAnLCAnY2xpY2snXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyQxLkV2ZW50ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIEFuZHJvaWQgMi4zIHRocm93cyBhbiBJbGxlZ2FsIENvbnN0cnVjdG9yIGVycm9yIGZvciB3aW5kb3cuRXZlbnRcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXZlbnQgPSBuZXcgd2luZG93JDEuRXZlbnQoJ2NoYW5nZScpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikgey8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2tzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSAvLyBzZXQgdGhlIGRlZmF1bHQgc3RhdGUgYmFzZWQgb24gY3VycmVudCB0cmFja3NcblxuXG4gICAgX3RoaXMuaGFuZGxlVHJhY2tzQ2hhbmdlKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhbiBgVGV4dFRyYWNrTWVudUl0ZW1gIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFRleHRUcmFja01lbnVJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciByZWZlcmVuY2VUcmFjayA9IHRoaXMudHJhY2s7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG5cbiAgICBfTWVudUl0ZW0ucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcywgZXZlbnQpO1xuXG4gICAgaWYgKCF0cmFja3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldOyAvLyBJZiB0aGUgdHJhY2sgZnJvbSB0aGUgdGV4dCB0cmFja3MgbGlzdCBpcyBub3Qgb2YgdGhlIHJpZ2h0IGtpbmQsXG4gICAgICAvLyBza2lwIGl0LiBXZSBkbyBub3Qgd2FudCB0byBhZmZlY3QgdHJhY2tzIG9mIGluY29tcGF0aWJsZSBraW5kKHMpLlxuXG4gICAgICBpZiAodGhpcy5raW5kcy5pbmRleE9mKHRyYWNrLmtpbmQpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gSWYgdGhpcyB0ZXh0IHRyYWNrIGlzIHRoZSBjb21wb25lbnQncyB0cmFjayBhbmQgaXQgaXMgbm90IHNob3dpbmcsXG4gICAgICAvLyBzZXQgaXQgdG8gc2hvd2luZy5cblxuXG4gICAgICBpZiAodHJhY2sgPT09IHJlZmVyZW5jZVRyYWNrKSB7XG4gICAgICAgIGlmICh0cmFjay5tb2RlICE9PSAnc2hvd2luZycpIHtcbiAgICAgICAgICB0cmFjay5tb2RlID0gJ3Nob3dpbmcnO1xuICAgICAgICB9IC8vIElmIHRoaXMgdGV4dCB0cmFjayBpcyBub3QgdGhlIGNvbXBvbmVudCdzIHRyYWNrIGFuZCBpdCBpcyBub3RcbiAgICAgICAgLy8gZGlzYWJsZWQsIHNldCBpdCB0byBkaXNhYmxlZC5cblxuICAgICAgfSBlbHNlIGlmICh0cmFjay5tb2RlICE9PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgIHRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHRleHQgdHJhY2sgbGlzdCBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgY2hhbmdlYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgVGV4dFRyYWNrTGlzdCNjaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVHJhY2tzQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlVHJhY2tzQ2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIHNob3VsZEJlU2VsZWN0ZWQgPSB0aGlzLnRyYWNrLm1vZGUgPT09ICdzaG93aW5nJzsgLy8gUHJldmVudCByZWR1bmRhbnQgc2VsZWN0ZWQoKSBjYWxscyBiZWNhdXNlIHRoZXkgbWF5IGNhdXNlXG4gICAgLy8gc2NyZWVuIHJlYWRlcnMgdG8gcmVhZCB0aGUgYXBwZW5kZWQgY29udHJvbCB0ZXh0IHVubmVjZXNzYXJpbHlcblxuICAgIGlmIChzaG91bGRCZVNlbGVjdGVkICE9PSB0aGlzLmlzU2VsZWN0ZWRfKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkKHNob3VsZEJlU2VsZWN0ZWQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAodGhpcy50cmFjay5tb2RlID09PSAnc2hvd2luZycpIHtcbiAgICAgIHZhciBzZWxlY3RlZExhbmd1YWdlID0gdGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlOyAvLyBEb24ndCByZXBsYWNlIHRoZSBraW5kIG9mIHRyYWNrIGFjcm9zcyB0aGUgc2FtZSBsYW5ndWFnZVxuXG4gICAgICBpZiAoc2VsZWN0ZWRMYW5ndWFnZSAmJiBzZWxlY3RlZExhbmd1YWdlLmVuYWJsZWQgJiYgc2VsZWN0ZWRMYW5ndWFnZS5sYW5ndWFnZSA9PT0gdGhpcy50cmFjay5sYW5ndWFnZSAmJiBzZWxlY3RlZExhbmd1YWdlLmtpbmQgIT09IHRoaXMudHJhY2sua2luZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGxheWVyXy5jYWNoZV8uc2VsZWN0ZWRMYW5ndWFnZSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgbGFuZ3VhZ2U6IHRoaXMudHJhY2subGFuZ3VhZ2UsXG4gICAgICAgIGtpbmQ6IHRoaXMudHJhY2sua2luZFxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgdG8gdHJhY2sgb2JqZWN0IG9uIGRpc3Bvc2VcbiAgICB0aGlzLnRyYWNrID0gbnVsbDtcblxuICAgIF9NZW51SXRlbS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2tNZW51SXRlbTtcbn0oTWVudUl0ZW0pO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RleHRUcmFja01lbnVJdGVtJywgVGV4dFRyYWNrTWVudUl0ZW0pO1xuXG4vKipcbiAqIEEgc3BlY2lhbCBtZW51IGl0ZW0gZm9yIHR1cm5pbmcgb2YgYSBzcGVjaWZpYyB0eXBlIG9mIHRleHQgdHJhY2tcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tNZW51SXRlbVxuICovXG5cbnZhciBPZmZUZXh0VHJhY2tNZW51SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RleHRUcmFja01lbnVJdGVtKSB7XG4gIF9pbmhlcml0c0xvb3NlKE9mZlRleHRUcmFja01lbnVJdGVtLCBfVGV4dFRyYWNrTWVudUl0ZW0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gT2ZmVGV4dFRyYWNrTWVudUl0ZW0ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgLy8gQ3JlYXRlIHBzZXVkbyB0cmFjayBpbmZvXG4gICAgLy8gUmVxdWlyZXMgb3B0aW9uc1sna2luZCddXG4gICAgb3B0aW9ucy50cmFjayA9IHtcbiAgICAgIHBsYXllcjogcGxheWVyLFxuICAgICAgLy8gaXQgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSB0byBzdG9yZSBga2luZGAgb3IgYGtpbmRzYCBvbiB0aGUgdHJhY2sgaXRzZWxmXG4gICAgICAvLyBzaW5jZSB0aGV5IGFyZSBub3cgc3RvcmVkIGluIHRoZSBga2luZHNgIHByb3BlcnR5IG9mIGFsbCBpbnN0YW5jZXMgb2ZcbiAgICAgIC8vIFRleHRUcmFja01lbnVJdGVtLCBidXQgdGhpcyB3aWxsIHJlbWFpbiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgIGtpbmQ6IG9wdGlvbnMua2luZCxcbiAgICAgIGtpbmRzOiBvcHRpb25zLmtpbmRzLFxuICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlLFxuICAgICAgbW9kZTogJ2Rpc2FibGVkJ1xuICAgIH07XG5cbiAgICBpZiAoIW9wdGlvbnMua2luZHMpIHtcbiAgICAgIG9wdGlvbnMua2luZHMgPSBbb3B0aW9ucy5raW5kXTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5sYWJlbCkge1xuICAgICAgb3B0aW9ucy50cmFjay5sYWJlbCA9IG9wdGlvbnMubGFiZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMudHJhY2subGFiZWwgPSBvcHRpb25zLmtpbmRzLmpvaW4oJyBhbmQgJykgKyAnIG9mZic7XG4gICAgfSAvLyBNZW51SXRlbSBpcyBzZWxlY3RhYmxlXG5cblxuICAgIG9wdGlvbnMuc2VsZWN0YWJsZSA9IHRydWU7IC8vIE1lbnVJdGVtIGlzIE5PVCBtdWx0aVNlbGVjdGFibGUgKGkuZS4gb25seSBvbmUgY2FuIGJlIG1hcmtlZCBcInNlbGVjdGVkXCIgYXQgYSB0aW1lKVxuXG4gICAgb3B0aW9ucy5tdWx0aVNlbGVjdGFibGUgPSBmYWxzZTtcbiAgICByZXR1cm4gX1RleHRUcmFja01lbnVJdGVtLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdGV4dCB0cmFjayBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1blxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBPZmZUZXh0VHJhY2tNZW51SXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZVRyYWNrc0NoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVRyYWNrc0NoYW5nZShldmVudCkge1xuICAgIHZhciB0cmFja3MgPSB0aGlzLnBsYXllcigpLnRleHRUcmFja3MoKTtcbiAgICB2YXIgc2hvdWxkQmVTZWxlY3RlZCA9IHRydWU7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRyYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9uc18ua2luZHMuaW5kZXhPZih0cmFjay5raW5kKSA+IC0xICYmIHRyYWNrLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICBzaG91bGRCZVNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gUHJldmVudCByZWR1bmRhbnQgc2VsZWN0ZWQoKSBjYWxscyBiZWNhdXNlIHRoZXkgbWF5IGNhdXNlXG4gICAgLy8gc2NyZWVuIHJlYWRlcnMgdG8gcmVhZCB0aGUgYXBwZW5kZWQgY29udHJvbCB0ZXh0IHVubmVjZXNzYXJpbHlcblxuXG4gICAgaWYgKHNob3VsZEJlU2VsZWN0ZWQgIT09IHRoaXMuaXNTZWxlY3RlZF8pIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQoc2hvdWxkQmVTZWxlY3RlZCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZShldmVudCkge1xuICAgIHZhciB0cmFja3MgPSB0aGlzLnBsYXllcigpLnRleHRUcmFja3MoKTtcbiAgICB2YXIgYWxsSGlkZGVuID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdHJhY2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldO1xuXG4gICAgICBpZiAoWydjYXB0aW9ucycsICdkZXNjcmlwdGlvbnMnLCAnc3VidGl0bGVzJ10uaW5kZXhPZih0cmFjay5raW5kKSA+IC0xICYmIHRyYWNrLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICBhbGxIaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFsbEhpZGRlbikge1xuICAgICAgdGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlID0ge1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIE9mZlRleHRUcmFja01lbnVJdGVtO1xufShUZXh0VHJhY2tNZW51SXRlbSk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnT2ZmVGV4dFRyYWNrTWVudUl0ZW0nLCBPZmZUZXh0VHJhY2tNZW51SXRlbSk7XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGJ1dHRvbnMgdGhhdCB0b2dnbGUgc3BlY2lmaWMgdGV4dCB0cmFjayB0eXBlcyAoZS5nLiBzdWJ0aXRsZXMpXG4gKlxuICogQGV4dGVuZHMgTWVudUJ1dHRvblxuICovXG5cbnZhciBUZXh0VHJhY2tCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UcmFja0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShUZXh0VHJhY2tCdXR0b24sIF9UcmFja0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBUZXh0VHJhY2tCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIG9wdGlvbnMudHJhY2tzID0gcGxheWVyLnRleHRUcmFja3MoKTtcbiAgICByZXR1cm4gX1RyYWNrQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtZW51IGl0ZW0gZm9yIGVhY2ggdGV4dCB0cmFja1xuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja01lbnVJdGVtW119IFtpdGVtcz1bXV1cbiAgICogICAgICAgIEV4aXN0aW5nIGFycmF5IG9mIGl0ZW1zIHRvIHVzZSBkdXJpbmcgY3JlYXRpb25cbiAgICpcbiAgICogQHJldHVybiB7VGV4dFRyYWNrTWVudUl0ZW1bXX1cbiAgICogICAgICAgICBBcnJheSBvZiBtZW51IGl0ZW1zIHRoYXQgd2VyZSBjcmVhdGVkXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFRleHRUcmFja0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUl0ZW1zID0gZnVuY3Rpb24gY3JlYXRlSXRlbXMoaXRlbXMsIFRyYWNrTWVudUl0ZW0pIHtcbiAgICBpZiAoaXRlbXMgPT09IHZvaWQgMCkge1xuICAgICAgaXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAoVHJhY2tNZW51SXRlbSA9PT0gdm9pZCAwKSB7XG4gICAgICBUcmFja01lbnVJdGVtID0gVGV4dFRyYWNrTWVudUl0ZW07XG4gICAgfVxuXG4gICAgLy8gTGFiZWwgaXMgYW4gb3ZlcnJpZGUgZm9yIHRoZSBbdHJhY2tdIG9mZiBsYWJlbFxuICAgIC8vIFVTZWQgdG8gbG9jYWxpc2UgY2FwdGlvbnMvc3VidGl0bGVzXG4gICAgdmFyIGxhYmVsO1xuXG4gICAgaWYgKHRoaXMubGFiZWxfKSB7XG4gICAgICBsYWJlbCA9IHRoaXMubGFiZWxfICsgXCIgb2ZmXCI7XG4gICAgfSAvLyBBZGQgYW4gT0ZGIG1lbnUgaXRlbSB0byB0dXJuIGFsbCB0cmFja3Mgb2ZmXG5cblxuICAgIGl0ZW1zLnB1c2gobmV3IE9mZlRleHRUcmFja01lbnVJdGVtKHRoaXMucGxheWVyXywge1xuICAgICAga2luZHM6IHRoaXMua2luZHNfLFxuICAgICAga2luZDogdGhpcy5raW5kXyxcbiAgICAgIGxhYmVsOiBsYWJlbFxuICAgIH0pKTtcbiAgICB0aGlzLmhpZGVUaHJlc2hvbGRfICs9IDE7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5raW5kc18pKSB7XG4gICAgICB0aGlzLmtpbmRzXyA9IFt0aGlzLmtpbmRfXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldOyAvLyBvbmx5IGFkZCB0cmFja3MgdGhhdCBhcmUgb2YgYW4gYXBwcm9wcmlhdGUga2luZCBhbmQgaGF2ZSBhIGxhYmVsXG5cbiAgICAgIGlmICh0aGlzLmtpbmRzXy5pbmRleE9mKHRyYWNrLmtpbmQpID4gLTEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBuZXcgVHJhY2tNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgICAga2luZHM6IHRoaXMua2luZHNfLFxuICAgICAgICAgIGtpbmQ6IHRoaXMua2luZF8sXG4gICAgICAgICAgLy8gTWVudUl0ZW0gaXMgc2VsZWN0YWJsZVxuICAgICAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICAgICAgLy8gTWVudUl0ZW0gaXMgTk9UIG11bHRpU2VsZWN0YWJsZSAoaS5lLiBvbmx5IG9uZSBjYW4gYmUgbWFya2VkIFwic2VsZWN0ZWRcIiBhdCBhIHRpbWUpXG4gICAgICAgICAgbXVsdGlTZWxlY3RhYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgaXRlbS5hZGRDbGFzcyhcInZqcy1cIiArIHRyYWNrLmtpbmQgKyBcIi1tZW51LWl0ZW1cIik7XG4gICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2tCdXR0b247XG59KFRyYWNrQnV0dG9uKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUZXh0VHJhY2tCdXR0b24nLCBUZXh0VHJhY2tCdXR0b24pO1xuXG4vKipcbiAqIFRoZSBjaGFwdGVyIHRyYWNrIG1lbnUgaXRlbVxuICpcbiAqIEBleHRlbmRzIE1lbnVJdGVtXG4gKi9cblxudmFyIENoYXB0ZXJzVHJhY2tNZW51SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01lbnVJdGVtKSB7XG4gIF9pbmhlcml0c0xvb3NlKENoYXB0ZXJzVHJhY2tNZW51SXRlbSwgX01lbnVJdGVtKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIENoYXB0ZXJzVHJhY2tNZW51SXRlbShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgdHJhY2sgPSBvcHRpb25zLnRyYWNrO1xuICAgIHZhciBjdWUgPSBvcHRpb25zLmN1ZTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBwbGF5ZXIuY3VycmVudFRpbWUoKTsgLy8gTW9kaWZ5IG9wdGlvbnMgZm9yIHBhcmVudCBNZW51SXRlbSBjbGFzcydzIGluaXQuXG5cbiAgICBvcHRpb25zLnNlbGVjdGFibGUgPSB0cnVlO1xuICAgIG9wdGlvbnMubXVsdGlTZWxlY3RhYmxlID0gZmFsc2U7XG4gICAgb3B0aW9ucy5sYWJlbCA9IGN1ZS50ZXh0O1xuICAgIG9wdGlvbnMuc2VsZWN0ZWQgPSBjdWUuc3RhcnRUaW1lIDw9IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgY3VlLmVuZFRpbWU7XG4gICAgX3RoaXMgPSBfTWVudUl0ZW0uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMudHJhY2sgPSB0cmFjaztcbiAgICBfdGhpcy5jdWUgPSBjdWU7XG4gICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignY3VlY2hhbmdlJywgYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudXBkYXRlKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYENoYXB0ZXJzVHJhY2tNZW51SXRlbWAgaXMgXCJjbGlja2VkXCIuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50fSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IGEgY2xpY2sgY2FuIGJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDaGFwdGVyc1RyYWNrTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgX01lbnVJdGVtLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMuY3VlLnN0YXJ0VGltZSk7XG4gICAgdGhpcy51cGRhdGUodGhpcy5jdWUuc3RhcnRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIGNoYXB0ZXIgbWVudSBpdGVtXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgY3VlY2hhbmdlYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgVGV4dFRyYWNrI2N1ZWNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZXZlbnQpIHtcbiAgICB2YXIgY3VlID0gdGhpcy5jdWU7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCk7IC8vIHZqcy5sb2coY3VycmVudFRpbWUsIGN1ZS5zdGFydFRpbWUpO1xuXG4gICAgdGhpcy5zZWxlY3RlZChjdWUuc3RhcnRUaW1lIDw9IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgY3VlLmVuZFRpbWUpO1xuICB9O1xuXG4gIHJldHVybiBDaGFwdGVyc1RyYWNrTWVudUl0ZW07XG59KE1lbnVJdGVtKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdDaGFwdGVyc1RyYWNrTWVudUl0ZW0nLCBDaGFwdGVyc1RyYWNrTWVudUl0ZW0pO1xuXG4vKipcbiAqIFRoZSBidXR0b24gY29tcG9uZW50IGZvciB0b2dnbGluZyBhbmQgc2VsZWN0aW5nIGNoYXB0ZXJzXG4gKiBDaGFwdGVycyBhY3QgbXVjaCBkaWZmZXJlbnRseSB0aGFuIG90aGVyIHRleHQgdHJhY2tzXG4gKiBDdWVzIGFyZSBuYXZpZ2F0aW9uIHZzLiBvdGhlciB0cmFja3Mgb2YgYWx0ZXJuYXRpdmUgbGFuZ3VhZ2VzXG4gKlxuICogQGV4dGVuZHMgVGV4dFRyYWNrQnV0dG9uXG4gKi9cblxudmFyIENoYXB0ZXJzQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGV4dFRyYWNrQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKENoYXB0ZXJzQnV0dG9uLCBfVGV4dFRyYWNrQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGlzIGZ1bmN0aW9uIGlzIHJlYWR5LlxuICAgKi9cbiAgZnVuY3Rpb24gQ2hhcHRlcnNCdXR0b24ocGxheWVyLCBvcHRpb25zLCByZWFkeSkge1xuICAgIHJldHVybiBfVGV4dFRyYWNrQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDaGFwdGVyc0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1jaGFwdGVycy1idXR0b24gXCIgKyBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkV3JhcHBlckNTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRXcmFwcGVyQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWNoYXB0ZXJzLWJ1dHRvbiBcIiArIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgbWVudSBiYXNlZCBvbiB0aGUgY3VycmVudCBzdGF0ZSBvZiBpdHMgaXRlbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIEFuIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZXh0VHJhY2tMaXN0I2FkZHRyYWNrXG4gICAqIEBsaXN0ZW5zIFRleHRUcmFja0xpc3QjcmVtb3ZldHJhY2tcbiAgICogQGxpc3RlbnMgVGV4dFRyYWNrTGlzdCNjaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLnRyYWNrXyB8fCBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2FkZHRyYWNrJyB8fCBldmVudC50eXBlID09PSAncmVtb3ZldHJhY2snKSkge1xuICAgICAgdGhpcy5zZXRUcmFjayh0aGlzLmZpbmRDaGFwdGVyc1RyYWNrKCkpO1xuICAgIH1cblxuICAgIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBmb3IgdGhlIGNoYXB0ZXJzIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t9IHRyYWNrXG4gICAqICAgICAgICBUaGUgbmV3IHRyYWNrIHRvIHNlbGVjdC4gTm90aGluZyB3aWxsIGNoYW5nZSBpZiB0aGlzIGlzIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICogICAgICAgIHRyYWNrLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRUcmFjayA9IGZ1bmN0aW9uIHNldFRyYWNrKHRyYWNrKSB7XG4gICAgaWYgKHRoaXMudHJhY2tfID09PSB0cmFjaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy51cGRhdGVIYW5kbGVyXykge1xuICAgICAgdGhpcy51cGRhdGVIYW5kbGVyXyA9IHRoaXMudXBkYXRlLmJpbmQodGhpcyk7XG4gICAgfSAvLyBoZXJlIHRoaXMudHJhY2tfIHJlZmVycyB0byB0aGUgb2xkIHRyYWNrIGluc3RhbmNlXG5cblxuICAgIGlmICh0aGlzLnRyYWNrXykge1xuICAgICAgdmFyIHJlbW90ZVRleHRUcmFja0VsID0gdGhpcy5wbGF5ZXJfLnJlbW90ZVRleHRUcmFja0VscygpLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfKHRoaXMudHJhY2tfKTtcblxuICAgICAgaWYgKHJlbW90ZVRleHRUcmFja0VsKSB7XG4gICAgICAgIHJlbW90ZVRleHRUcmFja0VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLnVwZGF0ZUhhbmRsZXJfKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50cmFja18gPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMudHJhY2tfID0gdHJhY2s7IC8vIGhlcmUgdGhpcy50cmFja18gcmVmZXJzIHRvIHRoZSBuZXcgdHJhY2sgaW5zdGFuY2VcblxuICAgIGlmICh0aGlzLnRyYWNrXykge1xuICAgICAgdGhpcy50cmFja18ubW9kZSA9ICdoaWRkZW4nO1xuXG4gICAgICB2YXIgX3JlbW90ZVRleHRUcmFja0VsID0gdGhpcy5wbGF5ZXJfLnJlbW90ZVRleHRUcmFja0VscygpLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfKHRoaXMudHJhY2tfKTtcblxuICAgICAgaWYgKF9yZW1vdGVUZXh0VHJhY2tFbCkge1xuICAgICAgICBfcmVtb3RlVGV4dFRyYWNrRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMudXBkYXRlSGFuZGxlcl8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRmluZCB0aGUgdHJhY2sgb2JqZWN0IHRoYXQgaXMgY3VycmVudGx5IGluIHVzZSBieSB0aGlzIENoYXB0ZXJzQnV0dG9uXG4gICAqXG4gICAqIEByZXR1cm4ge1RleHRUcmFja3x1bmRlZmluZWR9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdHJhY2sgb3IgdW5kZWZpbmVkIGlmIG5vbmUgd2FzIGZvdW5kLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5maW5kQ2hhcHRlcnNUcmFjayA9IGZ1bmN0aW9uIGZpbmRDaGFwdGVyc1RyYWNrKCkge1xuICAgIHZhciB0cmFja3MgPSB0aGlzLnBsYXllcl8udGV4dFRyYWNrcygpIHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IHRyYWNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgLy8gV2Ugd2lsbCBhbHdheXMgY2hvb3NlIHRoZSBsYXN0IHRyYWNrIGFzIG91ciBjaGFwdGVyc1RyYWNrXG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIGlmICh0cmFjay5raW5kID09PSB0aGlzLmtpbmRfKSB7XG4gICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY2FwdGlvbiBmb3IgdGhlIENoYXB0ZXJzQnV0dG9uIGJhc2VkIG9uIHRoZSB0cmFjayBsYWJlbC4gVGhpcyB3aWxsIGFsc29cbiAgICogdXNlIHRoZSBjdXJyZW50IHRyYWNrcyBsb2NhbGl6ZWQga2luZCBhcyBhIGZhbGxiYWNrIGlmIGEgbGFiZWwgZG9lcyBub3QgZXhpc3QuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgdHJhY2tzIGN1cnJlbnQgbGFiZWwgb3IgdGhlIGxvY2FsaXplZCB0cmFjayBraW5kLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRNZW51Q2FwdGlvbiA9IGZ1bmN0aW9uIGdldE1lbnVDYXB0aW9uKCkge1xuICAgIGlmICh0aGlzLnRyYWNrXyAmJiB0aGlzLnRyYWNrXy5sYWJlbCkge1xuICAgICAgcmV0dXJuIHRoaXMudHJhY2tfLmxhYmVsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvY2FsaXplKHRvVGl0bGVDYXNlKHRoaXMua2luZF8pKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIG1lbnUgZnJvbSBjaGFwdGVyIHRyYWNrXG4gICAqXG4gICAqIEByZXR1cm4ge01lbnV9XG4gICAqICAgICAgICAgTmV3IG1lbnUgZm9yIHRoZSBjaGFwdGVyIGJ1dHRvbnNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlTWVudSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbnUoKSB7XG4gICAgdGhpcy5vcHRpb25zXy50aXRsZSA9IHRoaXMuZ2V0TWVudUNhcHRpb24oKTtcbiAgICByZXR1cm4gX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuY3JlYXRlTWVudS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtZW51IGl0ZW0gZm9yIGVhY2ggdGV4dCB0cmFja1xuICAgKlxuICAgKiBAcmV0dXJuIHtUZXh0VHJhY2tNZW51SXRlbVtdfVxuICAgKiAgICAgICAgIEFycmF5IG9mIG1lbnUgaXRlbXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlSXRlbXMgPSBmdW5jdGlvbiBjcmVhdGVJdGVtcygpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgIGlmICghdGhpcy50cmFja18pIHtcbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG5cbiAgICB2YXIgY3VlcyA9IHRoaXMudHJhY2tfLmN1ZXM7XG5cbiAgICBpZiAoIWN1ZXMpIHtcbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGN1ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY3VlID0gY3Vlc1tpXTtcbiAgICAgIHZhciBtaSA9IG5ldyBDaGFwdGVyc1RyYWNrTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7XG4gICAgICAgIHRyYWNrOiB0aGlzLnRyYWNrXyxcbiAgICAgICAgY3VlOiBjdWVcbiAgICAgIH0pO1xuICAgICAgaXRlbXMucHVzaChtaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiBDaGFwdGVyc0J1dHRvbjtcbn0oVGV4dFRyYWNrQnV0dG9uKTtcbi8qKlxuICogYGtpbmRgIG9mIFRleHRUcmFjayB0byBsb29rIGZvciB0byBhc3NvY2lhdGUgaXQgd2l0aCB0aGlzIG1lbnUuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5DaGFwdGVyc0J1dHRvbi5wcm90b3R5cGUua2luZF8gPSAnY2hhcHRlcnMnO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBDaGFwdGVyc0J1dHRvbmBzIGNvbnRyb2xzLiBBZGRlZCBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkNoYXB0ZXJzQnV0dG9uLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnQ2hhcHRlcnMnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdDaGFwdGVyc0J1dHRvbicsIENoYXB0ZXJzQnV0dG9uKTtcblxuLyoqXG4gKiBUaGUgYnV0dG9uIGNvbXBvbmVudCBmb3IgdG9nZ2xpbmcgYW5kIHNlbGVjdGluZyBkZXNjcmlwdGlvbnNcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b25cbiAqL1xuXG52YXIgRGVzY3JpcHRpb25zQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGV4dFRyYWNrQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKERlc2NyaXB0aW9uc0J1dHRvbiwgX1RleHRUcmFja0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IFtyZWFkeV1cbiAgICogICAgICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgcmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBEZXNjcmlwdGlvbnNCdXR0b24ocGxheWVyLCBvcHRpb25zLCByZWFkeSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1RleHRUcmFja0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucywgcmVhZHkpIHx8IHRoaXM7XG4gICAgdmFyIHRyYWNrcyA9IHBsYXllci50ZXh0VHJhY2tzKCk7XG4gICAgdmFyIGNoYW5nZUhhbmRsZXIgPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy5oYW5kbGVUcmFja3NDaGFuZ2UpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcblxuICAgIF90aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNoYW5nZUhhbmRsZXIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdGV4dCB0cmFjayBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1blxuICAgKlxuICAgKiBAbGlzdGVucyBUZXh0VHJhY2tMaXN0I2NoYW5nZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEZXNjcmlwdGlvbnNCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVUcmFja3NDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVUcmFja3NDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgdHJhY2tzID0gdGhpcy5wbGF5ZXIoKS50ZXh0VHJhY2tzKCk7XG4gICAgdmFyIGRpc2FibGVkID0gZmFsc2U7IC8vIENoZWNrIHdoZXRoZXIgYSB0cmFjayBvZiBhIGRpZmZlcmVudCBraW5kIGlzIHNob3dpbmdcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdHJhY2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldO1xuXG4gICAgICBpZiAodHJhY2sua2luZCAhPT0gdGhpcy5raW5kXyAmJiB0cmFjay5tb2RlID09PSAnc2hvd2luZycpIHtcbiAgICAgICAgZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vIElmIGFub3RoZXIgdHJhY2sgaXMgc2hvd2luZywgZGlzYWJsZSB0aGlzIG1lbnUgYnV0dG9uXG5cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1kZXNjcmlwdGlvbnMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5idWlsZFdyYXBwZXJDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkV3JhcHBlckNTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1kZXNjcmlwdGlvbnMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gRGVzY3JpcHRpb25zQnV0dG9uO1xufShUZXh0VHJhY2tCdXR0b24pO1xuLyoqXG4gKiBga2luZGAgb2YgVGV4dFRyYWNrIHRvIGxvb2sgZm9yIHRvIGFzc29jaWF0ZSBpdCB3aXRoIHRoaXMgbWVudS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbkRlc2NyaXB0aW9uc0J1dHRvbi5wcm90b3R5cGUua2luZF8gPSAnZGVzY3JpcHRpb25zJztcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgRGVzY3JpcHRpb25zQnV0dG9uYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuRGVzY3JpcHRpb25zQnV0dG9uLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnRGVzY3JpcHRpb25zJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnRGVzY3JpcHRpb25zQnV0dG9uJywgRGVzY3JpcHRpb25zQnV0dG9uKTtcblxuLyoqXG4gKiBUaGUgYnV0dG9uIGNvbXBvbmVudCBmb3IgdG9nZ2xpbmcgYW5kIHNlbGVjdGluZyBzdWJ0aXRsZXNcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b25cbiAqL1xuXG52YXIgU3VidGl0bGVzQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGV4dFRyYWNrQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFN1YnRpdGxlc0J1dHRvbiwgX1RleHRUcmFja0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IFtyZWFkeV1cbiAgICogICAgICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgcmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBTdWJ0aXRsZXNCdXR0b24ocGxheWVyLCBvcHRpb25zLCByZWFkeSkge1xuICAgIHJldHVybiBfVGV4dFRyYWNrQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdWJ0aXRsZXNCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtc3VidGl0bGVzLWJ1dHRvbiBcIiArIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uYnVpbGRXcmFwcGVyQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZFdyYXBwZXJDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtc3VidGl0bGVzLWJ1dHRvbiBcIiArIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIFN1YnRpdGxlc0J1dHRvbjtcbn0oVGV4dFRyYWNrQnV0dG9uKTtcbi8qKlxuICogYGtpbmRgIG9mIFRleHRUcmFjayB0byBsb29rIGZvciB0byBhc3NvY2lhdGUgaXQgd2l0aCB0aGlzIG1lbnUuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5TdWJ0aXRsZXNCdXR0b24ucHJvdG90eXBlLmtpbmRfID0gJ3N1YnRpdGxlcyc7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFN1YnRpdGxlc0J1dHRvbmBzIGNvbnRyb2xzLiBBZGRlZCBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblN1YnRpdGxlc0J1dHRvbi5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ1N1YnRpdGxlcyc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1N1YnRpdGxlc0J1dHRvbicsIFN1YnRpdGxlc0J1dHRvbik7XG5cbi8qKlxuICogVGhlIG1lbnUgaXRlbSBmb3IgY2FwdGlvbiB0cmFjayBzZXR0aW5ncyBtZW51XG4gKlxuICogQGV4dGVuZHMgVGV4dFRyYWNrTWVudUl0ZW1cbiAqL1xuXG52YXIgQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZXh0VHJhY2tNZW51SXRlbSkge1xuICBfaW5oZXJpdHNMb29zZShDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSwgX1RleHRUcmFja01lbnVJdGVtKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIENhcHRpb25TZXR0aW5nc01lbnVJdGVtKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIG9wdGlvbnMudHJhY2sgPSB7XG4gICAgICBwbGF5ZXI6IHBsYXllcixcbiAgICAgIGtpbmQ6IG9wdGlvbnMua2luZCxcbiAgICAgIGxhYmVsOiBvcHRpb25zLmtpbmQgKyAnIHNldHRpbmdzJyxcbiAgICAgIHNlbGVjdGFibGU6IGZhbHNlLFxuICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlLFxuICAgICAgbW9kZTogJ2Rpc2FibGVkJ1xuICAgIH07IC8vIENhcHRpb25TZXR0aW5nc01lbnVJdGVtIGhhcyBubyBjb25jZXB0IG9mICdzZWxlY3RlZCdcblxuICAgIG9wdGlvbnMuc2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgIG9wdGlvbnMubmFtZSA9ICdDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSc7XG4gICAgX3RoaXMgPSBfVGV4dFRyYWNrTWVudUl0ZW0uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5hZGRDbGFzcygndmpzLXRleHR0cmFjay1zZXR0aW5ncycpO1xuXG4gICAgX3RoaXMuY29udHJvbFRleHQoJywgb3BlbnMgJyArIG9wdGlvbnMua2luZCArICcgc2V0dGluZ3MgZGlhbG9nJyk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhbiBgQ2FwdGlvblNldHRpbmdzTWVudUl0ZW1gIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy5wbGF5ZXIoKS5nZXRDaGlsZCgndGV4dFRyYWNrU2V0dGluZ3MnKS5vcGVuKCk7XG4gIH07XG5cbiAgcmV0dXJuIENhcHRpb25TZXR0aW5nc01lbnVJdGVtO1xufShUZXh0VHJhY2tNZW51SXRlbSk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0nLCBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSk7XG5cbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2FwdGlvbnNcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b25cbiAqL1xuXG52YXIgQ2FwdGlvbnNCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZXh0VHJhY2tCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2FwdGlvbnNCdXR0b24sIF9UZXh0VHJhY2tCdXR0b24pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSBbcmVhZHldXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoaXMgY29tcG9uZW50IGlzIHJlYWR5LlxuICAgKi9cbiAgZnVuY3Rpb24gQ2FwdGlvbnNCdXR0b24ocGxheWVyLCBvcHRpb25zLCByZWFkeSkge1xuICAgIHJldHVybiBfVGV4dFRyYWNrQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDYXB0aW9uc0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1jYXB0aW9ucy1idXR0b24gXCIgKyBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkV3JhcHBlckNTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRXcmFwcGVyQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWNhcHRpb25zLWJ1dHRvbiBcIiArIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBjYXB0aW9uIG1lbnUgaXRlbXNcbiAgICpcbiAgICogQHJldHVybiB7Q2FwdGlvblNldHRpbmdzTWVudUl0ZW1bXX1cbiAgICogICAgICAgICBUaGUgYXJyYXkgb2YgY3VycmVudCBtZW51IGl0ZW1zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVJdGVtcyA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1zKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgaWYgKCEodGhpcy5wbGF5ZXIoKS50ZWNoXyAmJiB0aGlzLnBsYXllcigpLnRlY2hfLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykgJiYgdGhpcy5wbGF5ZXIoKS5nZXRDaGlsZCgndGV4dFRyYWNrU2V0dGluZ3MnKSkge1xuICAgICAgaXRlbXMucHVzaChuZXcgQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7XG4gICAgICAgIGtpbmQ6IHRoaXMua2luZF9cbiAgICAgIH0pKTtcbiAgICAgIHRoaXMuaGlkZVRocmVzaG9sZF8gKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuY3JlYXRlSXRlbXMuY2FsbCh0aGlzLCBpdGVtcyk7XG4gIH07XG5cbiAgcmV0dXJuIENhcHRpb25zQnV0dG9uO1xufShUZXh0VHJhY2tCdXR0b24pO1xuLyoqXG4gKiBga2luZGAgb2YgVGV4dFRyYWNrIHRvIGxvb2sgZm9yIHRvIGFzc29jaWF0ZSBpdCB3aXRoIHRoaXMgbWVudS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbkNhcHRpb25zQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdjYXB0aW9ucyc7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYENhcHRpb25zQnV0dG9uYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuQ2FwdGlvbnNCdXR0b24ucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdDYXB0aW9ucyc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NhcHRpb25zQnV0dG9uJywgQ2FwdGlvbnNCdXR0b24pO1xuXG4vKipcbiAqIFN1YnNDYXBzTWVudUl0ZW0gaGFzIGFuIFtjY10gaWNvbiB0byBkaXN0aW5ndWlzaCBjYXB0aW9ucyBmcm9tIHN1YnRpdGxlc1xuICogaW4gdGhlIFN1YnNDYXBzTWVudS5cbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tNZW51SXRlbVxuICovXG5cbnZhciBTdWJzQ2Fwc01lbnVJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGV4dFRyYWNrTWVudUl0ZW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoU3Vic0NhcHNNZW51SXRlbSwgX1RleHRUcmFja01lbnVJdGVtKTtcblxuICBmdW5jdGlvbiBTdWJzQ2Fwc01lbnVJdGVtKCkge1xuICAgIHJldHVybiBfVGV4dFRyYWNrTWVudUl0ZW0uYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNDYXBzTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKHR5cGUsIHByb3BzLCBhdHRycykge1xuICAgIHZhciBpbm5lckhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJ2anMtbWVudS1pdGVtLXRleHRcXFwiPlwiICsgdGhpcy5sb2NhbGl6ZSh0aGlzLm9wdGlvbnNfLmxhYmVsKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnNfLnRyYWNrLmtpbmQgPT09ICdjYXB0aW9ucycpIHtcbiAgICAgIGlubmVySFRNTCArPSBcIlxcbiAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJ2anMtaWNvbi1wbGFjZWhvbGRlclxcXCI+PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZqcy1jb250cm9sLXRleHRcXFwiPiBcIiArIHRoaXMubG9jYWxpemUoJ0NhcHRpb25zJykgKyBcIjwvc3Bhbj5cXG4gICAgICBcIjtcbiAgICB9XG5cbiAgICBpbm5lckhUTUwgKz0gJzwvc3Bhbj4nO1xuXG4gICAgdmFyIGVsID0gX1RleHRUcmFja01lbnVJdGVtLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsIHR5cGUsIGFzc2lnbih7XG4gICAgICBpbm5lckhUTUw6IGlubmVySFRNTFxuICAgIH0sIHByb3BzKSwgYXR0cnMpO1xuXG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIHJldHVybiBTdWJzQ2Fwc01lbnVJdGVtO1xufShUZXh0VHJhY2tNZW51SXRlbSk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnU3Vic0NhcHNNZW51SXRlbScsIFN1YnNDYXBzTWVudUl0ZW0pO1xuXG4vKipcbiAqIFRoZSBidXR0b24gY29tcG9uZW50IGZvciB0b2dnbGluZyBhbmQgc2VsZWN0aW5nIGNhcHRpb25zIGFuZC9vciBzdWJ0aXRsZXNcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b25cbiAqL1xuXG52YXIgU3Vic0NhcHNCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZXh0VHJhY2tCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoU3Vic0NhcHNCdXR0b24sIF9UZXh0VHJhY2tCdXR0b24pO1xuXG4gIGZ1bmN0aW9uIFN1YnNDYXBzQnV0dG9uKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9UZXh0VHJhY2tCdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7IC8vIEFsdGhvdWdoIE5vcnRoIEFtZXJpY2EgdXNlcyBcImNhcHRpb25zXCIgaW4gbW9zdCBjYXNlcyBmb3JcbiAgICAvLyBcImNhcHRpb25zIGFuZCBzdWJ0aXRsZXNcIiBvdGhlciBsb2NhbGVzIHVzZSBcInN1YnRpdGxlc1wiXG5cbiAgICBfdGhpcy5sYWJlbF8gPSAnc3VidGl0bGVzJztcblxuICAgIGlmIChbJ2VuJywgJ2VuLXVzJywgJ2VuLWNhJywgJ2ZyLWNhJ10uaW5kZXhPZihfdGhpcy5wbGF5ZXJfLmxhbmd1YWdlXykgPiAtMSkge1xuICAgICAgX3RoaXMubGFiZWxfID0gJ2NhcHRpb25zJztcbiAgICB9XG5cbiAgICBfdGhpcy5tZW51QnV0dG9uXy5jb250cm9sVGV4dCh0b1RpdGxlQ2FzZShfdGhpcy5sYWJlbF8pKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdWJzQ2Fwc0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1zdWJzLWNhcHMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5idWlsZFdyYXBwZXJDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkV3JhcHBlckNTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1zdWJzLWNhcHMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGNhcHRpb24vc3VidGl0bGVzIG1lbnUgaXRlbXNcbiAgICpcbiAgICogQHJldHVybiB7Q2FwdGlvblNldHRpbmdzTWVudUl0ZW1bXX1cbiAgICogICAgICAgICBUaGUgYXJyYXkgb2YgY3VycmVudCBtZW51IGl0ZW1zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVJdGVtcyA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1zKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgaWYgKCEodGhpcy5wbGF5ZXIoKS50ZWNoXyAmJiB0aGlzLnBsYXllcigpLnRlY2hfLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykgJiYgdGhpcy5wbGF5ZXIoKS5nZXRDaGlsZCgndGV4dFRyYWNrU2V0dGluZ3MnKSkge1xuICAgICAgaXRlbXMucHVzaChuZXcgQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7XG4gICAgICAgIGtpbmQ6IHRoaXMubGFiZWxfXG4gICAgICB9KSk7XG4gICAgICB0aGlzLmhpZGVUaHJlc2hvbGRfICs9IDE7XG4gICAgfVxuXG4gICAgaXRlbXMgPSBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVJdGVtcy5jYWxsKHRoaXMsIGl0ZW1zLCBTdWJzQ2Fwc01lbnVJdGVtKTtcbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNDYXBzQnV0dG9uO1xufShUZXh0VHJhY2tCdXR0b24pO1xuLyoqXG4gKiBga2luZGBzIG9mIFRleHRUcmFjayB0byBsb29rIGZvciB0byBhc3NvY2lhdGUgaXQgd2l0aCB0aGlzIG1lbnUuXG4gKlxuICogQHR5cGUge2FycmF5fVxuICogQHByaXZhdGVcbiAqL1xuXG5cblN1YnNDYXBzQnV0dG9uLnByb3RvdHlwZS5raW5kc18gPSBbJ2NhcHRpb25zJywgJ3N1YnRpdGxlcyddO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBTdWJzQ2Fwc0J1dHRvbmBzIGNvbnRyb2xzLlxuICpcbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5TdWJzQ2Fwc0J1dHRvbi5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ1N1YnRpdGxlcyc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1N1YnNDYXBzQnV0dG9uJywgU3Vic0NhcHNCdXR0b24pO1xuXG4vKipcbiAqIEFuIHtAbGluayBBdWRpb1RyYWNrfSB7QGxpbmsgTWVudUl0ZW19XG4gKlxuICogQGV4dGVuZHMgTWVudUl0ZW1cbiAqL1xuXG52YXIgQXVkaW9UcmFja01lbnVJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTWVudUl0ZW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoQXVkaW9UcmFja01lbnVJdGVtLCBfTWVudUl0ZW0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gQXVkaW9UcmFja01lbnVJdGVtKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciB0cmFjayA9IG9wdGlvbnMudHJhY2s7XG4gICAgdmFyIHRyYWNrcyA9IHBsYXllci5hdWRpb1RyYWNrcygpOyAvLyBNb2RpZnkgb3B0aW9ucyBmb3IgcGFyZW50IE1lbnVJdGVtIGNsYXNzJ3MgaW5pdC5cblxuICAgIG9wdGlvbnMubGFiZWwgPSB0cmFjay5sYWJlbCB8fCB0cmFjay5sYW5ndWFnZSB8fCAnVW5rbm93bic7XG4gICAgb3B0aW9ucy5zZWxlY3RlZCA9IHRyYWNrLmVuYWJsZWQ7XG4gICAgX3RoaXMgPSBfTWVudUl0ZW0uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMudHJhY2sgPSB0cmFjaztcblxuICAgIF90aGlzLmFkZENsYXNzKFwidmpzLVwiICsgdHJhY2sua2luZCArIFwiLW1lbnUtaXRlbVwiKTtcblxuICAgIHZhciBjaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gY2hhbmdlSGFuZGxlcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5oYW5kbGVUcmFja3NDaGFuZ2UuYXBwbHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGFyZ3MpO1xuICAgIH07XG5cbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG5cbiAgICBfdGhpcy5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBdWRpb1RyYWNrTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKHR5cGUsIHByb3BzLCBhdHRycykge1xuICAgIHZhciBpbm5lckhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJ2anMtbWVudS1pdGVtLXRleHRcXFwiPlwiICsgdGhpcy5sb2NhbGl6ZSh0aGlzLm9wdGlvbnNfLmxhYmVsKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnNfLnRyYWNrLmtpbmQgPT09ICdtYWluLWRlc2MnKSB7XG4gICAgICBpbm5lckhUTUwgKz0gXCJcXG4gICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwidmpzLWljb24tcGxhY2Vob2xkZXJcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2anMtY29udHJvbC10ZXh0XFxcIj4gXCIgKyB0aGlzLmxvY2FsaXplKCdEZXNjcmlwdGlvbnMnKSArIFwiPC9zcGFuPlxcbiAgICAgIFwiO1xuICAgIH1cblxuICAgIGlubmVySFRNTCArPSAnPC9zcGFuPic7XG5cbiAgICB2YXIgZWwgPSBfTWVudUl0ZW0ucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgdHlwZSwgYXNzaWduKHtcbiAgICAgIGlubmVySFRNTDogaW5uZXJIVE1MXG4gICAgfSwgcHJvcHMpLCBhdHRycyk7XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhbiBgQXVkaW9UcmFja01lbnVJdGVtIGlzIFwiY2xpY2tlZFwiLiBTZWUge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH1cbiAgICogZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciB0cmFja3MgPSB0aGlzLnBsYXllcl8uYXVkaW9UcmFja3MoKTtcblxuICAgIF9NZW51SXRlbS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLCBldmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldO1xuICAgICAgdHJhY2suZW5hYmxlZCA9IHRyYWNrID09PSB0aGlzLnRyYWNrO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGFueSB7QGxpbmsgQXVkaW9UcmFja30gY2hhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUge0BsaW5rIEF1ZGlvVHJhY2tMaXN0I2NoYW5nZX0gZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIEF1ZGlvVHJhY2tMaXN0I2NoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUcmFja3NDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVUcmFja3NDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNlbGVjdGVkKHRoaXMudHJhY2suZW5hYmxlZCk7XG4gIH07XG5cbiAgcmV0dXJuIEF1ZGlvVHJhY2tNZW51SXRlbTtcbn0oTWVudUl0ZW0pO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0F1ZGlvVHJhY2tNZW51SXRlbScsIEF1ZGlvVHJhY2tNZW51SXRlbSk7XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGJ1dHRvbnMgdGhhdCB0b2dnbGUgc3BlY2lmaWMge0BsaW5rIEF1ZGlvVHJhY2t9IHR5cGVzLlxuICpcbiAqIEBleHRlbmRzIFRyYWNrQnV0dG9uXG4gKi9cblxudmFyIEF1ZGlvVHJhY2tCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UcmFja0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShBdWRpb1RyYWNrQnV0dG9uLCBfVHJhY2tCdXR0b24pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gQXVkaW9UcmFja0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgb3B0aW9ucy50cmFja3MgPSBwbGF5ZXIuYXVkaW9UcmFja3MoKTtcbiAgICByZXR1cm4gX1RyYWNrQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEF1ZGlvVHJhY2tCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtYXVkaW8tYnV0dG9uIFwiICsgX1RyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkV3JhcHBlckNTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRXcmFwcGVyQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWF1ZGlvLWJ1dHRvbiBcIiArIF9UcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbWVudSBpdGVtIGZvciBlYWNoIGF1ZGlvIHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7QXVkaW9UcmFja01lbnVJdGVtW119IFtpdGVtcz1bXV1cbiAgICogICAgICAgIEFuIGFycmF5IG9mIGV4aXN0aW5nIG1lbnUgaXRlbXMgdG8gdXNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtBdWRpb1RyYWNrTWVudUl0ZW1bXX1cbiAgICogICAgICAgICBBbiBhcnJheSBvZiBtZW51IGl0ZW1zXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUl0ZW1zID0gZnVuY3Rpb24gY3JlYXRlSXRlbXMoaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMgPT09IHZvaWQgMCkge1xuICAgICAgaXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBpZiB0aGVyZSdzIG9ubHkgb25lIGF1ZGlvIHRyYWNrLCB0aGVyZSBubyBwb2ludCBpbiBzaG93aW5nIGl0XG4gICAgdGhpcy5oaWRlVGhyZXNob2xkXyA9IDE7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy5hdWRpb1RyYWNrcygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgIGl0ZW1zLnB1c2gobmV3IEF1ZGlvVHJhY2tNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAgdHJhY2s6IHRyYWNrLFxuICAgICAgICAvLyBNZW51SXRlbSBpcyBzZWxlY3RhYmxlXG4gICAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICAgIC8vIE1lbnVJdGVtIGlzIE5PVCBtdWx0aVNlbGVjdGFibGUgKGkuZS4gb25seSBvbmUgY2FuIGJlIG1hcmtlZCBcInNlbGVjdGVkXCIgYXQgYSB0aW1lKVxuICAgICAgICBtdWx0aVNlbGVjdGFibGU6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiBBdWRpb1RyYWNrQnV0dG9uO1xufShUcmFja0J1dHRvbik7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYEF1ZGlvVHJhY2tCdXR0b25gcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbkF1ZGlvVHJhY2tCdXR0b24ucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdBdWRpbyBUcmFjayc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0F1ZGlvVHJhY2tCdXR0b24nLCBBdWRpb1RyYWNrQnV0dG9uKTtcblxuLyoqXG4gKiBUaGUgc3BlY2lmaWMgbWVudSBpdGVtIHR5cGUgZm9yIHNlbGVjdGluZyBhIHBsYXliYWNrIHJhdGUuXG4gKlxuICogQGV4dGVuZHMgTWVudUl0ZW1cbiAqL1xuXG52YXIgUGxheWJhY2tSYXRlTWVudUl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9NZW51SXRlbSkge1xuICBfaW5oZXJpdHNMb29zZShQbGF5YmFja1JhdGVNZW51SXRlbSwgX01lbnVJdGVtKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFBsYXliYWNrUmF0ZU1lbnVJdGVtKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBsYWJlbCA9IG9wdGlvbnMucmF0ZTtcbiAgICB2YXIgcmF0ZSA9IHBhcnNlRmxvYXQobGFiZWwsIDEwKTsgLy8gTW9kaWZ5IG9wdGlvbnMgZm9yIHBhcmVudCBNZW51SXRlbSBjbGFzcydzIGluaXQuXG5cbiAgICBvcHRpb25zLmxhYmVsID0gbGFiZWw7XG4gICAgb3B0aW9ucy5zZWxlY3RlZCA9IHJhdGUgPT09IDE7XG4gICAgb3B0aW9ucy5zZWxlY3RhYmxlID0gdHJ1ZTtcbiAgICBvcHRpb25zLm11bHRpU2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgIF90aGlzID0gX01lbnVJdGVtLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgX3RoaXMucmF0ZSA9IHJhdGU7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICdyYXRlY2hhbmdlJywgX3RoaXMudXBkYXRlKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBQbGF5YmFja1JhdGVNZW51SXRlbWAgaXMgXCJjbGlja2VkXCIuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50fSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IGEgY2xpY2sgY2FuIGJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQbGF5YmFja1JhdGVNZW51SXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBfTWVudUl0ZW0ucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSh0aGlzLnJhdGUpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIFBsYXliYWNrUmF0ZU1lbnVJdGVtIHdoZW4gdGhlIHBsYXliYWNrcmF0ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYHJhdGVjaGFuZ2VgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjcmF0ZWNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZXZlbnQpIHtcbiAgICB0aGlzLnNlbGVjdGVkKHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCkgPT09IHRoaXMucmF0ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsYXliYWNrUmF0ZU1lbnVJdGVtO1xufShNZW51SXRlbSk7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFBsYXliYWNrUmF0ZU1lbnVJdGVtYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5QbGF5YmFja1JhdGVNZW51SXRlbS5wcm90b3R5cGUuY29udGVudEVsVHlwZSA9ICdidXR0b24nO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5YmFja1JhdGVNZW51SXRlbScsIFBsYXliYWNrUmF0ZU1lbnVJdGVtKTtcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IGZvciBjb250cm9sbGluZyB0aGUgcGxheWJhY2sgcmF0ZS5cbiAqXG4gKiBAZXh0ZW5kcyBNZW51QnV0dG9uXG4gKi9cblxudmFyIFBsYXliYWNrUmF0ZU1lbnVCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9NZW51QnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFBsYXliYWNrUmF0ZU1lbnVCdXR0b24sIF9NZW51QnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFBsYXliYWNrUmF0ZU1lbnVCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfTWVudUJ1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLnVwZGF0ZVZpc2liaWxpdHkoKTtcblxuICAgIF90aGlzLnVwZGF0ZUxhYmVsKCk7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICdsb2Fkc3RhcnQnLCBfdGhpcy51cGRhdGVWaXNpYmlsaXR5KTtcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ3JhdGVjaGFuZ2UnLCBfdGhpcy51cGRhdGVMYWJlbCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBsYXliYWNrUmF0ZU1lbnVCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGVsID0gX01lbnVCdXR0b24ucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmxhYmVsRWxfID0gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1wbGF5YmFjay1yYXRlLXZhbHVlJyxcbiAgICAgIGlubmVySFRNTDogJzF4J1xuICAgIH0pO1xuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMubGFiZWxFbF8pO1xuICAgIHJldHVybiBlbDtcbiAgfTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5sYWJlbEVsXyA9IG51bGw7XG5cbiAgICBfTWVudUJ1dHRvbi5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1wbGF5YmFjay1yYXRlIFwiICsgX01lbnVCdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uYnVpbGRXcmFwcGVyQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZFdyYXBwZXJDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtcGxheWJhY2stcmF0ZSBcIiArIF9NZW51QnV0dG9uLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHBsYXliYWNrIHJhdGUgbWVudVxuICAgKlxuICAgKiBAcmV0dXJuIHtNZW51fVxuICAgKiAgICAgICAgIE1lbnUgb2JqZWN0IHBvcHVsYXRlZCB3aXRoIHtAbGluayBQbGF5YmFja1JhdGVNZW51SXRlbX1zXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZU1lbnUgPSBmdW5jdGlvbiBjcmVhdGVNZW51KCkge1xuICAgIHZhciBtZW51ID0gbmV3IE1lbnUodGhpcy5wbGF5ZXIoKSk7XG4gICAgdmFyIHJhdGVzID0gdGhpcy5wbGF5YmFja1JhdGVzKCk7XG5cbiAgICBpZiAocmF0ZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSByYXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBtZW51LmFkZENoaWxkKG5ldyBQbGF5YmFja1JhdGVNZW51SXRlbSh0aGlzLnBsYXllcigpLCB7XG4gICAgICAgICAgcmF0ZTogcmF0ZXNbaV0gKyAneCdcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtZW51O1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIEFSSUEgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGVzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzID0gZnVuY3Rpb24gdXBkYXRlQVJJQUF0dHJpYnV0ZXMoKSB7XG4gICAgLy8gQ3VycmVudCBwbGF5YmFjayByYXRlXG4gICAgdGhpcy5lbCgpLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW5vdycsIHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYFBsYXliYWNrUmF0ZU1lbnVCdXR0b25gIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIC8vIHNlbGVjdCBuZXh0IHJhdGUgb3B0aW9uXG4gICAgdmFyIGN1cnJlbnRSYXRlID0gdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKTtcbiAgICB2YXIgcmF0ZXMgPSB0aGlzLnBsYXliYWNrUmF0ZXMoKTsgLy8gdGhpcyB3aWxsIHNlbGVjdCBmaXJzdCBvbmUgaWYgdGhlIGxhc3Qgb25lIGN1cnJlbnRseSBzZWxlY3RlZFxuXG4gICAgdmFyIG5ld1JhdGUgPSByYXRlc1swXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyYXRlc1tpXSA+IGN1cnJlbnRSYXRlKSB7XG4gICAgICAgIG5ld1JhdGUgPSByYXRlc1tpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUobmV3UmF0ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBwb3NzaWJsZSBwbGF5YmFjayByYXRlc1xuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICogICAgICAgICBBbGwgcG9zc2libGUgcGxheWJhY2sgcmF0ZXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheWJhY2tSYXRlcyA9IGZ1bmN0aW9uIHBsYXliYWNrUmF0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc18ucGxheWJhY2tSYXRlcyB8fCB0aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMgJiYgdGhpcy5vcHRpb25zXy5wbGF5ZXJPcHRpb25zLnBsYXliYWNrUmF0ZXM7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHBsYXliYWNrIHJhdGVzIGlzIHN1cHBvcnRlZCBieSB0aGUgdGVjaFxuICAgKiBhbmQgYW4gYXJyYXkgb2YgcGxheWJhY2sgcmF0ZXMgZXhpc3RzXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgV2hldGhlciBjaGFuZ2luZyBwbGF5YmFjayByYXRlIGlzIHN1cHBvcnRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wbGF5YmFja1JhdGVTdXBwb3J0ZWQgPSBmdW5jdGlvbiBwbGF5YmFja1JhdGVTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyKCkudGVjaF8gJiYgdGhpcy5wbGF5ZXIoKS50ZWNoXy5mZWF0dXJlc1BsYXliYWNrUmF0ZSAmJiB0aGlzLnBsYXliYWNrUmF0ZXMoKSAmJiB0aGlzLnBsYXliYWNrUmF0ZXMoKS5sZW5ndGggPiAwO1xuICB9XG4gIC8qKlxuICAgKiBIaWRlIHBsYXliYWNrIHJhdGUgY29udHJvbHMgd2hlbiB0aGV5J3JlIG5vIHBsYXliYWNrIHJhdGUgb3B0aW9ucyB0byBzZWxlY3RcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjbG9hZHN0YXJ0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZVZpc2liaWxpdHkgPSBmdW5jdGlvbiB1cGRhdGVWaXNpYmlsaXR5KGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucGxheWJhY2tSYXRlU3VwcG9ydGVkKCkpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIGJ1dHRvbiBsYWJlbCB3aGVuIHJhdGUgY2hhbmdlZFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNyYXRlY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUxhYmVsID0gZnVuY3Rpb24gdXBkYXRlTGFiZWwoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5YmFja1JhdGVTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhpcy5sYWJlbEVsXy5pbm5lckhUTUwgPSB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpICsgJ3gnO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUGxheWJhY2tSYXRlTWVudUJ1dHRvbjtcbn0oTWVudUJ1dHRvbik7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYEZ1bGxzY3JlZW5Ub2dnbGVgcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cblBsYXliYWNrUmF0ZU1lbnVCdXR0b24ucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdQbGF5YmFjayBSYXRlJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGxheWJhY2tSYXRlTWVudUJ1dHRvbicsIFBsYXliYWNrUmF0ZU1lbnVCdXR0b24pO1xuXG4vKipcbiAqIEp1c3QgYW4gZW1wdHkgc3BhY2VyIGVsZW1lbnQgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBhcHBlbmQgcG9pbnQgZm9yIHBsdWdpbnMsIGV0Yy5cbiAqIEFsc28gY2FuIGJlIHVzZWQgdG8gY3JlYXRlIHNwYWNlIGJldHdlZW4gZWxlbWVudHMgd2hlbiBuZWNlc3NhcnkuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFNwYWNlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTcGFjZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNwYWNlcigpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3BhY2VyLnByb3RvdHlwZTtcblxuICAvKipcbiAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAqXG4gICogQHJldHVybiB7c3RyaW5nfVxuICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICovXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtc3BhY2VyIFwiICsgX0NvbXBvbmVudC5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDU1NDbGFzcygpXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFNwYWNlcjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTcGFjZXInLCBTcGFjZXIpO1xuXG4vKipcbiAqIFNwYWNlciBzcGVjaWZpY2FsbHkgbWVhbnQgdG8gYmUgdXNlZCBhcyBhbiBpbnNlcnRpb24gcG9pbnQgZm9yIG5ldyBwbHVnaW5zLCBldGMuXG4gKlxuICogQGV4dGVuZHMgU3BhY2VyXG4gKi9cblxudmFyIEN1c3RvbUNvbnRyb2xTcGFjZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TcGFjZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ3VzdG9tQ29udHJvbFNwYWNlciwgX1NwYWNlcik7XG5cbiAgZnVuY3Rpb24gQ3VzdG9tQ29udHJvbFNwYWNlcigpIHtcbiAgICByZXR1cm4gX1NwYWNlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ3VzdG9tQ29udHJvbFNwYWNlci5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtY3VzdG9tLWNvbnRyb2wtc3BhY2VyIFwiICsgX1NwYWNlci5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHZhciBlbCA9IF9TcGFjZXIucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywge1xuICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ1NTQ2xhc3MoKVxuICAgIH0pOyAvLyBOby1mbGV4L3RhYmxlLWNlbGwgbW9kZSByZXF1aXJlcyB0aGVyZSBiZSBzb21lIGNvbnRlbnRcbiAgICAvLyBpbiB0aGUgY2VsbCB0byBmaWxsIHRoZSByZW1haW5pbmcgc3BhY2Ugb2YgdGhlIHRhYmxlLlxuXG5cbiAgICBlbC5pbm5lckhUTUwgPSBcIlxceEEwXCI7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIHJldHVybiBDdXN0b21Db250cm9sU3BhY2VyO1xufShTcGFjZXIpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0N1c3RvbUNvbnRyb2xTcGFjZXInLCBDdXN0b21Db250cm9sU3BhY2VyKTtcblxuLyoqXG4gKiBDb250YWluZXIgb2YgbWFpbiBjb250cm9scy5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgQ29udHJvbEJhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDb250cm9sQmFyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250cm9sQmFyKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb250cm9sQmFyLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtY29udHJvbC1iYXInLFxuICAgICAgZGlyOiAnbHRyJ1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBDb250cm9sQmFyO1xufShDb21wb25lbnQpO1xuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgZm9yIGBDb250cm9sQmFyYFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuQ29udHJvbEJhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ3BsYXlUb2dnbGUnLCAndm9sdW1lUGFuZWwnLCAnY3VycmVudFRpbWVEaXNwbGF5JywgJ3RpbWVEaXZpZGVyJywgJ2R1cmF0aW9uRGlzcGxheScsICdwcm9ncmVzc0NvbnRyb2wnLCAnbGl2ZURpc3BsYXknLCAnc2Vla1RvTGl2ZScsICdyZW1haW5pbmdUaW1lRGlzcGxheScsICdjdXN0b21Db250cm9sU3BhY2VyJywgJ3BsYXliYWNrUmF0ZU1lbnVCdXR0b24nLCAnY2hhcHRlcnNCdXR0b24nLCAnZGVzY3JpcHRpb25zQnV0dG9uJywgJ3N1YnNDYXBzQnV0dG9uJywgJ2F1ZGlvVHJhY2tCdXR0b24nLCAnZnVsbHNjcmVlblRvZ2dsZSddXG59O1xuXG5pZiAoJ2V4aXRQaWN0dXJlSW5QaWN0dXJlJyBpbiBkb2N1bWVudCkge1xuICBDb250cm9sQmFyLnByb3RvdHlwZS5vcHRpb25zXy5jaGlsZHJlbi5zcGxpY2UoQ29udHJvbEJhci5wcm90b3R5cGUub3B0aW9uc18uY2hpbGRyZW4ubGVuZ3RoIC0gMSwgMCwgJ3BpY3R1cmVJblBpY3R1cmVUb2dnbGUnKTtcbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdDb250cm9sQmFyJywgQ29udHJvbEJhcik7XG5cbi8qKlxuICogQSBkaXNwbGF5IHRoYXQgaW5kaWNhdGVzIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSB2aWRlb1xuICogaXMgdW5wbGF5YWJsZS5cbiAqXG4gKiBAZXh0ZW5kcyBNb2RhbERpYWxvZ1xuICovXG5cbnZhciBFcnJvckRpc3BsYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Nb2RhbERpYWxvZykge1xuICBfaW5oZXJpdHNMb29zZShFcnJvckRpc3BsYXksIF9Nb2RhbERpYWxvZyk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gRXJyb3JEaXNwbGF5KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX01vZGFsRGlhbG9nLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAnZXJyb3InLCBfdGhpcy5vcGVuKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBTaW5jZSB2ZXJzaW9uIDUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEVycm9yRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1lcnJvci1kaXNwbGF5IFwiICsgX01vZGFsRGlhbG9nLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxvY2FsaXplZCBlcnJvciBtZXNzYWdlIGJhc2VkIG9uIHRoZSBgUGxheWVyYHMgZXJyb3IuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgYFBsYXllcmBzIGVycm9yIG1lc3NhZ2UgbG9jYWxpemVkIG9yIGFuIGVtcHR5IHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29udGVudCA9IGZ1bmN0aW9uIGNvbnRlbnQoKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5wbGF5ZXIoKS5lcnJvcigpO1xuICAgIHJldHVybiBlcnJvciA/IHRoaXMubG9jYWxpemUoZXJyb3IubWVzc2FnZSkgOiAnJztcbiAgfTtcblxuICByZXR1cm4gRXJyb3JEaXNwbGF5O1xufShNb2RhbERpYWxvZyk7XG4vKipcbiAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIGFuIGBFcnJvckRpc3BsYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5FcnJvckRpc3BsYXkucHJvdG90eXBlLm9wdGlvbnNfID0gbWVyZ2VPcHRpb25zKE1vZGFsRGlhbG9nLnByb3RvdHlwZS5vcHRpb25zXywge1xuICBwYXVzZU9uT3BlbjogZmFsc2UsXG4gIGZpbGxBbHdheXM6IHRydWUsXG4gIHRlbXBvcmFyeTogZmFsc2UsXG4gIHVuY2xvc2VhYmxlOiB0cnVlXG59KTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnRXJyb3JEaXNwbGF5JywgRXJyb3JEaXNwbGF5KTtcblxudmFyIExPQ0FMX1NUT1JBR0VfS0VZID0gJ3Zqcy10ZXh0LXRyYWNrLXNldHRpbmdzJztcbnZhciBDT0xPUl9CTEFDSyA9IFsnIzAwMCcsICdCbGFjayddO1xudmFyIENPTE9SX0JMVUUgPSBbJyMwMEYnLCAnQmx1ZSddO1xudmFyIENPTE9SX0NZQU4gPSBbJyMwRkYnLCAnQ3lhbiddO1xudmFyIENPTE9SX0dSRUVOID0gWycjMEYwJywgJ0dyZWVuJ107XG52YXIgQ09MT1JfTUFHRU5UQSA9IFsnI0YwRicsICdNYWdlbnRhJ107XG52YXIgQ09MT1JfUkVEID0gWycjRjAwJywgJ1JlZCddO1xudmFyIENPTE9SX1dISVRFID0gWycjRkZGJywgJ1doaXRlJ107XG52YXIgQ09MT1JfWUVMTE9XID0gWycjRkYwJywgJ1llbGxvdyddO1xudmFyIE9QQUNJVFlfT1BBUVVFID0gWycxJywgJ09wYXF1ZSddO1xudmFyIE9QQUNJVFlfU0VNSSA9IFsnMC41JywgJ1NlbWktVHJhbnNwYXJlbnQnXTtcbnZhciBPUEFDSVRZX1RSQU5TID0gWycwJywgJ1RyYW5zcGFyZW50J107IC8vIENvbmZpZ3VyYXRpb24gZm9yIHRoZSB2YXJpb3VzIDxzZWxlY3Q+IGVsZW1lbnRzIGluIHRoZSBET00gb2YgdGhpcyBjb21wb25lbnQuXG4vL1xuLy8gUG9zc2libGUga2V5cyBpbmNsdWRlOlxuLy9cbi8vIGBkZWZhdWx0YDpcbi8vICAgVGhlIGRlZmF1bHQgb3B0aW9uIGluZGV4LiBPbmx5IG5lZWRzIHRvIGJlIHByb3ZpZGVkIGlmIG5vdCB6ZXJvLlxuLy8gYHBhcnNlcmA6XG4vLyAgIEEgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBwYXJzZSB0aGUgdmFsdWUgZnJvbSB0aGUgc2VsZWN0ZWQgb3B0aW9uIGluXG4vLyAgIGEgY3VzdG9taXplZCB3YXkuXG4vLyBgc2VsZWN0b3JgOlxuLy8gICBUaGUgc2VsZWN0b3IgdXNlZCB0byBmaW5kIHRoZSBhc3NvY2lhdGVkIDxzZWxlY3Q+IGVsZW1lbnQuXG5cbnZhciBzZWxlY3RDb25maWdzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICBzZWxlY3RvcjogJy52anMtYmctY29sb3IgPiBzZWxlY3QnLFxuICAgIGlkOiAnY2FwdGlvbnMtYmFja2dyb3VuZC1jb2xvci0lcycsXG4gICAgbGFiZWw6ICdDb2xvcicsXG4gICAgb3B0aW9uczogW0NPTE9SX0JMQUNLLCBDT0xPUl9XSElURSwgQ09MT1JfUkVELCBDT0xPUl9HUkVFTiwgQ09MT1JfQkxVRSwgQ09MT1JfWUVMTE9XLCBDT0xPUl9NQUdFTlRBLCBDT0xPUl9DWUFOXVxuICB9LFxuICBiYWNrZ3JvdW5kT3BhY2l0eToge1xuICAgIHNlbGVjdG9yOiAnLnZqcy1iZy1vcGFjaXR5ID4gc2VsZWN0JyxcbiAgICBpZDogJ2NhcHRpb25zLWJhY2tncm91bmQtb3BhY2l0eS0lcycsXG4gICAgbGFiZWw6ICdUcmFuc3BhcmVuY3knLFxuICAgIG9wdGlvbnM6IFtPUEFDSVRZX09QQVFVRSwgT1BBQ0lUWV9TRU1JLCBPUEFDSVRZX1RSQU5TXVxuICB9LFxuICBjb2xvcjoge1xuICAgIHNlbGVjdG9yOiAnLnZqcy1mZy1jb2xvciA+IHNlbGVjdCcsXG4gICAgaWQ6ICdjYXB0aW9ucy1mb3JlZ3JvdW5kLWNvbG9yLSVzJyxcbiAgICBsYWJlbDogJ0NvbG9yJyxcbiAgICBvcHRpb25zOiBbQ09MT1JfV0hJVEUsIENPTE9SX0JMQUNLLCBDT0xPUl9SRUQsIENPTE9SX0dSRUVOLCBDT0xPUl9CTFVFLCBDT0xPUl9ZRUxMT1csIENPTE9SX01BR0VOVEEsIENPTE9SX0NZQU5dXG4gIH0sXG4gIGVkZ2VTdHlsZToge1xuICAgIHNlbGVjdG9yOiAnLnZqcy1lZGdlLXN0eWxlID4gc2VsZWN0JyxcbiAgICBpZDogJyVzJyxcbiAgICBsYWJlbDogJ1RleHQgRWRnZSBTdHlsZScsXG4gICAgb3B0aW9uczogW1snbm9uZScsICdOb25lJ10sIFsncmFpc2VkJywgJ1JhaXNlZCddLCBbJ2RlcHJlc3NlZCcsICdEZXByZXNzZWQnXSwgWyd1bmlmb3JtJywgJ1VuaWZvcm0nXSwgWydkcm9wc2hhZG93JywgJ0Ryb3BzaGFkb3cnXV1cbiAgfSxcbiAgZm9udEZhbWlseToge1xuICAgIHNlbGVjdG9yOiAnLnZqcy1mb250LWZhbWlseSA+IHNlbGVjdCcsXG4gICAgaWQ6ICdjYXB0aW9ucy1mb250LWZhbWlseS0lcycsXG4gICAgbGFiZWw6ICdGb250IEZhbWlseScsXG4gICAgb3B0aW9uczogW1sncHJvcG9ydGlvbmFsU2Fuc1NlcmlmJywgJ1Byb3BvcnRpb25hbCBTYW5zLVNlcmlmJ10sIFsnbW9ub3NwYWNlU2Fuc1NlcmlmJywgJ01vbm9zcGFjZSBTYW5zLVNlcmlmJ10sIFsncHJvcG9ydGlvbmFsU2VyaWYnLCAnUHJvcG9ydGlvbmFsIFNlcmlmJ10sIFsnbW9ub3NwYWNlU2VyaWYnLCAnTW9ub3NwYWNlIFNlcmlmJ10sIFsnY2FzdWFsJywgJ0Nhc3VhbCddLCBbJ3NjcmlwdCcsICdTY3JpcHQnXSwgWydzbWFsbC1jYXBzJywgJ1NtYWxsIENhcHMnXV1cbiAgfSxcbiAgZm9udFBlcmNlbnQ6IHtcbiAgICBzZWxlY3RvcjogJy52anMtZm9udC1wZXJjZW50ID4gc2VsZWN0JyxcbiAgICBpZDogJ2NhcHRpb25zLWZvbnQtc2l6ZS0lcycsXG4gICAgbGFiZWw6ICdGb250IFNpemUnLFxuICAgIG9wdGlvbnM6IFtbJzAuNTAnLCAnNTAlJ10sIFsnMC43NScsICc3NSUnXSwgWycxLjAwJywgJzEwMCUnXSwgWycxLjI1JywgJzEyNSUnXSwgWycxLjUwJywgJzE1MCUnXSwgWycxLjc1JywgJzE3NSUnXSwgWycyLjAwJywgJzIwMCUnXSwgWyczLjAwJywgJzMwMCUnXSwgWyc0LjAwJywgJzQwMCUnXV0sXG4gICAgXCJkZWZhdWx0XCI6IDIsXG4gICAgcGFyc2VyOiBmdW5jdGlvbiBwYXJzZXIodikge1xuICAgICAgcmV0dXJuIHYgPT09ICcxLjAwJyA/IG51bGwgOiBOdW1iZXIodik7XG4gICAgfVxuICB9LFxuICB0ZXh0T3BhY2l0eToge1xuICAgIHNlbGVjdG9yOiAnLnZqcy10ZXh0LW9wYWNpdHkgPiBzZWxlY3QnLFxuICAgIGlkOiAnY2FwdGlvbnMtZm9yZWdyb3VuZC1vcGFjaXR5LSVzJyxcbiAgICBsYWJlbDogJ1RyYW5zcGFyZW5jeScsXG4gICAgb3B0aW9uczogW09QQUNJVFlfT1BBUVVFLCBPUEFDSVRZX1NFTUldXG4gIH0sXG4gIC8vIE9wdGlvbnMgZm9yIHRoaXMgb2JqZWN0IGFyZSBkZWZpbmVkIGJlbG93LlxuICB3aW5kb3dDb2xvcjoge1xuICAgIHNlbGVjdG9yOiAnLnZqcy13aW5kb3ctY29sb3IgPiBzZWxlY3QnLFxuICAgIGlkOiAnY2FwdGlvbnMtd2luZG93LWNvbG9yLSVzJyxcbiAgICBsYWJlbDogJ0NvbG9yJ1xuICB9LFxuICAvLyBPcHRpb25zIGZvciB0aGlzIG9iamVjdCBhcmUgZGVmaW5lZCBiZWxvdy5cbiAgd2luZG93T3BhY2l0eToge1xuICAgIHNlbGVjdG9yOiAnLnZqcy13aW5kb3ctb3BhY2l0eSA+IHNlbGVjdCcsXG4gICAgaWQ6ICdjYXB0aW9ucy13aW5kb3ctb3BhY2l0eS0lcycsXG4gICAgbGFiZWw6ICdUcmFuc3BhcmVuY3knLFxuICAgIG9wdGlvbnM6IFtPUEFDSVRZX1RSQU5TLCBPUEFDSVRZX1NFTUksIE9QQUNJVFlfT1BBUVVFXVxuICB9XG59O1xuc2VsZWN0Q29uZmlncy53aW5kb3dDb2xvci5vcHRpb25zID0gc2VsZWN0Q29uZmlncy5iYWNrZ3JvdW5kQ29sb3Iub3B0aW9ucztcbi8qKlxuICogR2V0IHRoZSBhY3R1YWwgdmFsdWUgb2YgYW4gb3B0aW9uLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWVcbiAqICAgICAgICAgVGhlIHZhbHVlIHRvIGdldFxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbcGFyc2VyXVxuICogICAgICAgICBPcHRpb25hbCBmdW5jdGlvbiB0byBhZGp1c3QgdGhlIHZhbHVlLlxuICpcbiAqIEByZXR1cm4ge01peGVkfVxuICogICAgICAgICAtIFdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgbm8gdmFsdWUgZXhpc3RzXG4gKiAgICAgICAgIC0gV2lsbCBiZSBgdW5kZWZpbmVkYCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgXCJub25lXCIuXG4gKiAgICAgICAgIC0gV2lsbCBiZSB0aGUgYWN0dWFsIHZhbHVlIG90aGVyd2lzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlT3B0aW9uVmFsdWUodmFsdWUsIHBhcnNlcikge1xuICBpZiAocGFyc2VyKSB7XG4gICAgdmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuICB9XG5cbiAgaWYgKHZhbHVlICYmIHZhbHVlICE9PSAnbm9uZScpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIDxvcHRpb24+IGVsZW1lbnQgd2l0aGluIGEgPHNlbGVjdD4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICB0aGUgZWxlbWVudCB0byBsb29rIGluXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IFtwYXJzZXJdXG4gKiAgICAgICAgIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFkanVzdCB0aGUgdmFsdWUuXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIC0gV2lsbCBiZSBgdW5kZWZpbmVkYCBpZiBubyB2YWx1ZSBleGlzdHNcbiAqICAgICAgICAgLSBXaWxsIGJlIGB1bmRlZmluZWRgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBcIm5vbmVcIi5cbiAqICAgICAgICAgLSBXaWxsIGJlIHRoZSBhY3R1YWwgdmFsdWUgb3RoZXJ3aXNlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLCBwYXJzZXIpIHtcbiAgdmFyIHZhbHVlID0gZWwub3B0aW9uc1tlbC5vcHRpb25zLnNlbGVjdGVkSW5kZXhdLnZhbHVlO1xuICByZXR1cm4gcGFyc2VPcHRpb25WYWx1ZSh2YWx1ZSwgcGFyc2VyKTtcbn1cbi8qKlxuICogU2V0cyB0aGUgc2VsZWN0ZWQgPG9wdGlvbj4gZWxlbWVudCB3aXRoaW4gYSA8c2VsZWN0PiBlbGVtZW50IGJhc2VkIG9uIGFcbiAqIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqICAgICAgICBUaGUgZWxlbWVudCB0byBsb29rIGluLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICAgICAgIHRoZSBwcm9wZXJ0eSB0byBsb29rIG9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwYXJzZXJdXG4gKiAgICAgICAgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYWRqdXN0IHRoZSB2YWx1ZSBiZWZvcmUgY29tcGFyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZE9wdGlvbihlbCwgdmFsdWUsIHBhcnNlcikge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5vcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHBhcnNlT3B0aW9uVmFsdWUoZWwub3B0aW9uc1tpXS52YWx1ZSwgcGFyc2VyKSA9PT0gdmFsdWUpIHtcbiAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIE1hbmlwdWxhdGUgVGV4dCBUcmFja3Mgc2V0dGluZ3MuXG4gKlxuICogQGV4dGVuZHMgTW9kYWxEaWFsb2dcbiAqL1xuXG5cbnZhciBUZXh0VHJhY2tTZXR0aW5ncyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01vZGFsRGlhbG9nKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRleHRUcmFja1NldHRpbmdzLCBfTW9kYWxEaWFsb2cpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBUZXh0VHJhY2tTZXR0aW5ncyhwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBvcHRpb25zLnRlbXBvcmFyeSA9IGZhbHNlO1xuICAgIF90aGlzID0gX01vZGFsRGlhbG9nLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnVwZGF0ZURpc3BsYXkgPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy51cGRhdGVEaXNwbGF5KTsgLy8gZmlsbCB0aGUgbW9kYWwgYW5kIHByZXRlbmQgd2UgaGF2ZSBvcGVuZWQgaXRcblxuICAgIF90aGlzLmZpbGwoKTtcblxuICAgIF90aGlzLmhhc0JlZW5PcGVuZWRfID0gX3RoaXMuaGFzQmVlbkZpbGxlZF8gPSB0cnVlO1xuICAgIF90aGlzLmVuZERpYWxvZyA9IGNyZWF0ZUVsKCdwJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWNvbnRyb2wtdGV4dCcsXG4gICAgICB0ZXh0Q29udGVudDogX3RoaXMubG9jYWxpemUoJ0VuZCBvZiBkaWFsb2cgd2luZG93LicpXG4gICAgfSk7XG5cbiAgICBfdGhpcy5lbCgpLmFwcGVuZENoaWxkKF90aGlzLmVuZERpYWxvZyk7XG5cbiAgICBfdGhpcy5zZXREZWZhdWx0cygpOyAvLyBHcmFiIGBwZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3NgIGZyb20gdGhlIHBsYXllciBvcHRpb25zIGlmIG5vdCBwYXNzZWQgaW4gY2hpbGQgb3B0aW9uc1xuXG5cbiAgICBpZiAob3B0aW9ucy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMub3B0aW9uc18ucGVyc2lzdFRleHRUcmFja1NldHRpbmdzID0gX3RoaXMub3B0aW9uc18ucGxheWVyT3B0aW9ucy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3M7XG4gICAgfVxuXG4gICAgX3RoaXMub24oX3RoaXMuJCgnLnZqcy1kb25lLWJ1dHRvbicpLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zYXZlU2V0dGluZ3MoKTtcblxuICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIF90aGlzLm9uKF90aGlzLiQoJy52anMtZGVmYXVsdC1idXR0b24nKSwgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0RGVmYXVsdHMoKTtcblxuICAgICAgX3RoaXMudXBkYXRlRGlzcGxheSgpO1xuICAgIH0pO1xuXG4gICAgZWFjaChzZWxlY3RDb25maWdzLCBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICBfdGhpcy5vbihfdGhpcy4kKGNvbmZpZy5zZWxlY3RvciksICdjaGFuZ2UnLCBfdGhpcy51cGRhdGVEaXNwbGF5KTtcbiAgICB9KTtcblxuICAgIGlmIChfdGhpcy5vcHRpb25zXy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MpIHtcbiAgICAgIF90aGlzLnJlc3RvcmVTZXR0aW5ncygpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUZXh0VHJhY2tTZXR0aW5ncy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuZW5kRGlhbG9nID0gbnVsbDtcblxuICAgIF9Nb2RhbERpYWxvZy5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSA8c2VsZWN0PiBlbGVtZW50IHdpdGggY29uZmlndXJlZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqICAgICAgICBDb25maWd1cmF0aW9uIGtleSB0byB1c2UgZHVyaW5nIGNyZWF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgQW4gSFRNTCBzdHJpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsU2VsZWN0XyA9IGZ1bmN0aW9uIGNyZWF0ZUVsU2VsZWN0XyhrZXksIGxlZ2VuZElkLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAobGVnZW5kSWQgPT09IHZvaWQgMCkge1xuICAgICAgbGVnZW5kSWQgPSAnJztcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7XG4gICAgICB0eXBlID0gJ2xhYmVsJztcbiAgICB9XG5cbiAgICB2YXIgY29uZmlnID0gc2VsZWN0Q29uZmlnc1trZXldO1xuICAgIHZhciBpZCA9IGNvbmZpZy5pZC5yZXBsYWNlKCclcycsIHRoaXMuaWRfKTtcbiAgICB2YXIgc2VsZWN0TGFiZWxsZWRieUlkcyA9IFtsZWdlbmRJZCwgaWRdLmpvaW4oJyAnKS50cmltKCk7XG4gICAgcmV0dXJuIFtcIjxcIiArIHR5cGUgKyBcIiBpZD1cXFwiXCIgKyBpZCArIFwiXFxcIiBjbGFzcz1cXFwiXCIgKyAodHlwZSA9PT0gJ2xhYmVsJyA/ICd2anMtbGFiZWwnIDogJycpICsgXCJcXFwiPlwiLCB0aGlzLmxvY2FsaXplKGNvbmZpZy5sYWJlbCksIFwiPC9cIiArIHR5cGUgKyBcIj5cIiwgXCI8c2VsZWN0IGFyaWEtbGFiZWxsZWRieT1cXFwiXCIgKyBzZWxlY3RMYWJlbGxlZGJ5SWRzICsgXCJcXFwiPlwiXS5jb25jYXQoY29uZmlnLm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICB2YXIgb3B0aW9uSWQgPSBpZCArICctJyArIG9bMV0ucmVwbGFjZSgvXFxXKy9nLCAnJyk7XG4gICAgICByZXR1cm4gW1wiPG9wdGlvbiBpZD1cXFwiXCIgKyBvcHRpb25JZCArIFwiXFxcIiB2YWx1ZT1cXFwiXCIgKyBvWzBdICsgXCJcXFwiIFwiLCBcImFyaWEtbGFiZWxsZWRieT1cXFwiXCIgKyBzZWxlY3RMYWJlbGxlZGJ5SWRzICsgXCIgXCIgKyBvcHRpb25JZCArIFwiXFxcIj5cIiwgX3RoaXMyLmxvY2FsaXplKG9bMV0pLCAnPC9vcHRpb24+J10uam9pbignJyk7XG4gICAgfSkpLmNvbmNhdCgnPC9zZWxlY3Q+Jykuam9pbignJyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBmb3JlZ3JvdW5kIGNvbG9yIGVsZW1lbnQgZm9yIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIEFuIEhUTUwgc3RyaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbEZnQ29sb3JfID0gZnVuY3Rpb24gY3JlYXRlRWxGZ0NvbG9yXygpIHtcbiAgICB2YXIgbGVnZW5kSWQgPSBcImNhcHRpb25zLXRleHQtbGVnZW5kLVwiICsgdGhpcy5pZF87XG4gICAgcmV0dXJuIFsnPGZpZWxkc2V0IGNsYXNzPVwidmpzLWZnLWNvbG9yIHZqcy10cmFjay1zZXR0aW5nXCI+JywgXCI8bGVnZW5kIGlkPVxcXCJcIiArIGxlZ2VuZElkICsgXCJcXFwiPlwiLCB0aGlzLmxvY2FsaXplKCdUZXh0JyksICc8L2xlZ2VuZD4nLCB0aGlzLmNyZWF0ZUVsU2VsZWN0XygnY29sb3InLCBsZWdlbmRJZCksICc8c3BhbiBjbGFzcz1cInZqcy10ZXh0LW9wYWNpdHkgdmpzLW9wYWNpdHlcIj4nLCB0aGlzLmNyZWF0ZUVsU2VsZWN0XygndGV4dE9wYWNpdHknLCBsZWdlbmRJZCksICc8L3NwYW4+JywgJzwvZmllbGRzZXQ+J10uam9pbignJyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBiYWNrZ3JvdW5kIGNvbG9yIGVsZW1lbnQgZm9yIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIEFuIEhUTUwgc3RyaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbEJnQ29sb3JfID0gZnVuY3Rpb24gY3JlYXRlRWxCZ0NvbG9yXygpIHtcbiAgICB2YXIgbGVnZW5kSWQgPSBcImNhcHRpb25zLWJhY2tncm91bmQtXCIgKyB0aGlzLmlkXztcbiAgICByZXR1cm4gWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtYmctY29sb3IgdmpzLXRyYWNrLXNldHRpbmdcIj4nLCBcIjxsZWdlbmQgaWQ9XFxcIlwiICsgbGVnZW5kSWQgKyBcIlxcXCI+XCIsIHRoaXMubG9jYWxpemUoJ0JhY2tncm91bmQnKSwgJzwvbGVnZW5kPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCdiYWNrZ3JvdW5kQ29sb3InLCBsZWdlbmRJZCksICc8c3BhbiBjbGFzcz1cInZqcy1iZy1vcGFjaXR5IHZqcy1vcGFjaXR5XCI+JywgdGhpcy5jcmVhdGVFbFNlbGVjdF8oJ2JhY2tncm91bmRPcGFjaXR5JywgbGVnZW5kSWQpLCAnPC9zcGFuPicsICc8L2ZpZWxkc2V0PiddLmpvaW4oJycpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgd2luZG93IGNvbG9yIGVsZW1lbnQgZm9yIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIEFuIEhUTUwgc3RyaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbFdpbkNvbG9yXyA9IGZ1bmN0aW9uIGNyZWF0ZUVsV2luQ29sb3JfKCkge1xuICAgIHZhciBsZWdlbmRJZCA9IFwiY2FwdGlvbnMtd2luZG93LVwiICsgdGhpcy5pZF87XG4gICAgcmV0dXJuIFsnPGZpZWxkc2V0IGNsYXNzPVwidmpzLXdpbmRvdy1jb2xvciB2anMtdHJhY2stc2V0dGluZ1wiPicsIFwiPGxlZ2VuZCBpZD1cXFwiXCIgKyBsZWdlbmRJZCArIFwiXFxcIj5cIiwgdGhpcy5sb2NhbGl6ZSgnV2luZG93JyksICc8L2xlZ2VuZD4nLCB0aGlzLmNyZWF0ZUVsU2VsZWN0Xygnd2luZG93Q29sb3InLCBsZWdlbmRJZCksICc8c3BhbiBjbGFzcz1cInZqcy13aW5kb3ctb3BhY2l0eSB2anMtb3BhY2l0eVwiPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCd3aW5kb3dPcGFjaXR5JywgbGVnZW5kSWQpLCAnPC9zcGFuPicsICc8L2ZpZWxkc2V0PiddLmpvaW4oJycpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgY29sb3IgZWxlbWVudHMgZm9yIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsQ29sb3JzXyA9IGZ1bmN0aW9uIGNyZWF0ZUVsQ29sb3JzXygpIHtcbiAgICByZXR1cm4gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy10cmFjay1zZXR0aW5ncy1jb2xvcnMnLFxuICAgICAgaW5uZXJIVE1MOiBbdGhpcy5jcmVhdGVFbEZnQ29sb3JfKCksIHRoaXMuY3JlYXRlRWxCZ0NvbG9yXygpLCB0aGlzLmNyZWF0ZUVsV2luQ29sb3JfKCldLmpvaW4oJycpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBmb250IGVsZW1lbnRzIGZvciB0aGUgY29tcG9uZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWxGb250XyA9IGZ1bmN0aW9uIGNyZWF0ZUVsRm9udF8oKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdHJhY2stc2V0dGluZ3MtZm9udCcsXG4gICAgICBpbm5lckhUTUw6IFsnPGZpZWxkc2V0IGNsYXNzPVwidmpzLWZvbnQtcGVyY2VudCB2anMtdHJhY2stc2V0dGluZ1wiPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCdmb250UGVyY2VudCcsICcnLCAnbGVnZW5kJyksICc8L2ZpZWxkc2V0PicsICc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZWRnZS1zdHlsZSB2anMtdHJhY2stc2V0dGluZ1wiPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCdlZGdlU3R5bGUnLCAnJywgJ2xlZ2VuZCcpLCAnPC9maWVsZHNldD4nLCAnPGZpZWxkc2V0IGNsYXNzPVwidmpzLWZvbnQtZmFtaWx5IHZqcy10cmFjay1zZXR0aW5nXCI+JywgdGhpcy5jcmVhdGVFbFNlbGVjdF8oJ2ZvbnRGYW1pbHknLCAnJywgJ2xlZ2VuZCcpLCAnPC9maWVsZHNldD4nXS5qb2luKCcnKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgY29udHJvbHMgZm9yIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbENvbnRyb2xzXyA9IGZ1bmN0aW9uIGNyZWF0ZUVsQ29udHJvbHNfKCkge1xuICAgIHZhciBkZWZhdWx0c0Rlc2NyaXB0aW9uID0gdGhpcy5sb2NhbGl6ZSgncmVzdG9yZSBhbGwgc2V0dGluZ3MgdG8gdGhlIGRlZmF1bHQgdmFsdWVzJyk7XG4gICAgcmV0dXJuIGNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdHJhY2stc2V0dGluZ3MtY29udHJvbHMnLFxuICAgICAgaW5uZXJIVE1MOiBbXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInZqcy1kZWZhdWx0LWJ1dHRvblxcXCIgdGl0bGU9XFxcIlwiICsgZGVmYXVsdHNEZXNjcmlwdGlvbiArIFwiXFxcIj5cIiwgdGhpcy5sb2NhbGl6ZSgnUmVzZXQnKSwgXCI8c3BhbiBjbGFzcz1cXFwidmpzLWNvbnRyb2wtdGV4dFxcXCI+IFwiICsgZGVmYXVsdHNEZXNjcmlwdGlvbiArIFwiPC9zcGFuPlwiLCAnPC9idXR0b24+JywgXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInZqcy1kb25lLWJ1dHRvblxcXCI+XCIgKyB0aGlzLmxvY2FsaXplKCdEb25lJykgKyBcIjwvYnV0dG9uPlwiXS5qb2luKCcnKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb250ZW50ID0gZnVuY3Rpb24gY29udGVudCgpIHtcbiAgICByZXR1cm4gW3RoaXMuY3JlYXRlRWxDb2xvcnNfKCksIHRoaXMuY3JlYXRlRWxGb250XygpLCB0aGlzLmNyZWF0ZUVsQ29udHJvbHNfKCldO1xuICB9O1xuXG4gIF9wcm90by5sYWJlbCA9IGZ1bmN0aW9uIGxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsaXplKCdDYXB0aW9uIFNldHRpbmdzIERpYWxvZycpO1xuICB9O1xuXG4gIF9wcm90by5kZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsaXplKCdCZWdpbm5pbmcgb2YgZGlhbG9nIHdpbmRvdy4gRXNjYXBlIHdpbGwgY2FuY2VsIGFuZCBjbG9zZSB0aGUgd2luZG93LicpO1xuICB9O1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gX01vZGFsRGlhbG9nLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcykgKyAnIHZqcy10ZXh0LXRyYWNrLXNldHRpbmdzJztcbiAgfVxuICAvKipcbiAgICogR2V0cyBhbiBvYmplY3Qgb2YgdGV4dCB0cmFjayBzZXR0aW5ncyAob3IgbnVsbCkuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBBbiBvYmplY3Qgd2l0aCBjb25maWcgdmFsdWVzIHBhcnNlZCBmcm9tIHRoZSBET00gb3IgbG9jYWxTdG9yYWdlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRWYWx1ZXMgPSBmdW5jdGlvbiBnZXRWYWx1ZXMoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICByZXR1cm4gcmVkdWNlKHNlbGVjdENvbmZpZ3MsIGZ1bmN0aW9uIChhY2N1bSwgY29uZmlnLCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoX3RoaXMzLiQoY29uZmlnLnNlbGVjdG9yKSwgY29uZmlnLnBhcnNlcik7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFjY3VtW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtO1xuICAgIH0sIHt9KTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0ZXh0IHRyYWNrIHNldHRpbmdzIGZyb20gYW4gb2JqZWN0IG9mIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlc1xuICAgKiAgICAgICAgQW4gb2JqZWN0IHdpdGggY29uZmlnIHZhbHVlcyBwYXJzZWQgZnJvbSB0aGUgRE9NIG9yIGxvY2FsU3RvcmFnZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0VmFsdWVzID0gZnVuY3Rpb24gc2V0VmFsdWVzKHZhbHVlcykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgZWFjaChzZWxlY3RDb25maWdzLCBmdW5jdGlvbiAoY29uZmlnLCBrZXkpIHtcbiAgICAgIHNldFNlbGVjdGVkT3B0aW9uKF90aGlzNC4kKGNvbmZpZy5zZWxlY3RvciksIHZhbHVlc1trZXldLCBjb25maWcucGFyc2VyKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBhbGwgYDxzZWxlY3Q+YCBlbGVtZW50cyB0byB0aGVpciBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBzZXREZWZhdWx0cygpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIGVhY2goc2VsZWN0Q29uZmlncywgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgdmFyIGluZGV4ID0gY29uZmlnLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBjb25maWdbXCJkZWZhdWx0XCJdIDogMDtcbiAgICAgIF90aGlzNS4kKGNvbmZpZy5zZWxlY3Rvcikuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXN0b3JlIHRleHR0cmFjayBzZXR0aW5ncyBmcm9tIGxvY2FsU3RvcmFnZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXN0b3JlU2V0dGluZ3MgPSBmdW5jdGlvbiByZXN0b3JlU2V0dGluZ3MoKSB7XG4gICAgdmFyIHZhbHVlcztcblxuICAgIHRyeSB7XG4gICAgICB2YWx1ZXMgPSBKU09OLnBhcnNlKHdpbmRvdyQxLmxvY2FsU3RvcmFnZS5nZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cud2FybihlcnIpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWVzKHZhbHVlcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTYXZlIHRleHQgdHJhY2sgc2V0dGluZ3MgdG8gbG9jYWxTdG9yYWdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNhdmVTZXR0aW5ncyA9IGZ1bmN0aW9uIHNhdmVTZXR0aW5ncygpIHtcbiAgICBpZiAoIXRoaXMub3B0aW9uc18ucGVyc2lzdFRleHRUcmFja1NldHRpbmdzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHZhbHVlcykubGVuZ3RoKSB7XG4gICAgICAgIHdpbmRvdyQxLmxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdyQxLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKExPQ0FMX1NUT1JBR0VfS0VZKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy53YXJuKGVycik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgZGlzcGxheSBvZiB0ZXh0IHRyYWNrIHNldHRpbmdzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZURpc3BsYXkgPSBmdW5jdGlvbiB1cGRhdGVEaXNwbGF5KCkge1xuICAgIHZhciB0dERpc3BsYXkgPSB0aGlzLnBsYXllcl8uZ2V0Q2hpbGQoJ3RleHRUcmFja0Rpc3BsYXknKTtcblxuICAgIGlmICh0dERpc3BsYXkpIHtcbiAgICAgIHR0RGlzcGxheS51cGRhdGVEaXNwbGF5KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBjb25kaXRpb25hbGx5IGJsdXIgdGhlIGVsZW1lbnQgYW5kIHJlZm9jdXMgdGhlIGNhcHRpb25zIGJ1dHRvblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25kaXRpb25hbEJsdXJfID0gZnVuY3Rpb24gY29uZGl0aW9uYWxCbHVyXygpIHtcbiAgICB0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8gPSBudWxsO1xuICAgIHZhciBjYiA9IHRoaXMucGxheWVyXy5jb250cm9sQmFyO1xuICAgIHZhciBzdWJzQ2Fwc0J0biA9IGNiICYmIGNiLnN1YnNDYXBzQnV0dG9uO1xuICAgIHZhciBjY0J0biA9IGNiICYmIGNiLmNhcHRpb25zQnV0dG9uO1xuXG4gICAgaWYgKHN1YnNDYXBzQnRuKSB7XG4gICAgICBzdWJzQ2Fwc0J0bi5mb2N1cygpO1xuICAgIH0gZWxzZSBpZiAoY2NCdG4pIHtcbiAgICAgIGNjQnRuLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2tTZXR0aW5ncztcbn0oTW9kYWxEaWFsb2cpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RleHRUcmFja1NldHRpbmdzJywgVGV4dFRyYWNrU2V0dGluZ3MpO1xuXG4vKipcbiAqIEEgUmVzaXplIE1hbmFnZXIuIEl0IGlzIGluIGNoYXJnZSBvZiB0cmlnZ2VyaW5nIGBwbGF5ZXJyZXNpemVgIG9uIHRoZSBwbGF5ZXIgaW4gdGhlIHJpZ2h0IGNvbmRpdGlvbnMuXG4gKlxuICogSXQnbGwgZWl0aGVyIGNyZWF0ZSBhbiBpZnJhbWUgYW5kIHVzZSBhIGRlYm91bmNlZCByZXNpemUgaGFuZGxlciBvbiBpdCBvciB1c2UgdGhlIG5ldyB7QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9SZXNpemVPYnNlcnZlci98UmVzaXplT2JzZXJ2ZXJ9LlxuICpcbiAqIElmIHRoZSBSZXNpemVPYnNlcnZlciBpcyBhdmFpbGFibGUgbmF0aXZlbHksIGl0IHdpbGwgYmUgdXNlZC4gQSBwb2x5ZmlsbCBjYW4gYmUgcGFzc2VkIGluIGFzIGFuIG9wdGlvbi5cbiAqIElmIGEgYHBsYXllcnJlc2l6ZWAgZXZlbnQgaXMgbm90IG5lZWRlZCwgdGhlIFJlc2l6ZU1hbmFnZXIgY29tcG9uZW50IGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHBsYXllciwgc2VlIHRoZSBleGFtcGxlIGJlbG93LlxuICogQGV4YW1wbGUgPGNhcHRpb24+SG93IHRvIGRpc2FibGUgdGhlIHJlc2l6ZSBtYW5hZ2VyPC9jYXB0aW9uPlxuICogY29uc3QgcGxheWVyID0gdmlkZW9qcygnI3ZpZCcsIHtcbiAqICAgcmVzaXplTWFuYWdlcjogZmFsc2VcbiAqIH0pO1xuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vd2ljZy5naXRodWIuaW8vUmVzaXplT2JzZXJ2ZXIvfFJlc2l6ZU9ic2VydmVyIHNwZWNpZmljYXRpb259XG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFJlc2l6ZU1hbmFnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUmVzaXplTWFuYWdlciwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgUmVzaXplTWFuYWdlci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgUmVzaXplTWFuYWdlciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuUmVzaXplT2JzZXJ2ZXJdXG4gICAqICAgICAgICBBIHBvbHlmaWxsIGZvciBSZXNpemVPYnNlcnZlciBjYW4gYmUgcGFzc2VkIGluIGhlcmUuXG4gICAqICAgICAgICBJZiB0aGlzIGlzIHNldCB0byBudWxsIGl0IHdpbGwgaWdub3JlIHRoZSBuYXRpdmUgUmVzaXplT2JzZXJ2ZXIgYW5kIGZhbGwgYmFjayB0byB0aGUgaWZyYW1lIGZhbGxiYWNrLlxuICAgKi9cbiAgZnVuY3Rpb24gUmVzaXplTWFuYWdlcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgUkVTSVpFX09CU0VSVkVSX0FWQUlMQUJMRSA9IG9wdGlvbnMuUmVzaXplT2JzZXJ2ZXIgfHwgd2luZG93JDEuUmVzaXplT2JzZXJ2ZXI7IC8vIGlmIGBudWxsYCB3YXMgcGFzc2VkLCB3ZSB3YW50IHRvIGRpc2FibGUgdGhlIFJlc2l6ZU9ic2VydmVyXG5cbiAgICBpZiAob3B0aW9ucy5SZXNpemVPYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgUkVTSVpFX09CU0VSVkVSX0FWQUlMQUJMRSA9IGZhbHNlO1xuICAgIH0gLy8gT25seSBjcmVhdGUgYW4gZWxlbWVudCB3aGVuIFJlc2l6ZU9ic2VydmVyIGlzbid0IGF2YWlsYWJsZVxuXG5cbiAgICB2YXIgb3B0aW9uc18gPSBtZXJnZU9wdGlvbnMoe1xuICAgICAgY3JlYXRlRWw6ICFSRVNJWkVfT0JTRVJWRVJfQVZBSUxBQkxFLFxuICAgICAgcmVwb3J0VG91Y2hBY3Rpdml0eTogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnNfKSB8fCB0aGlzO1xuICAgIF90aGlzLlJlc2l6ZU9ic2VydmVyID0gb3B0aW9ucy5SZXNpemVPYnNlcnZlciB8fCB3aW5kb3ckMS5SZXNpemVPYnNlcnZlcjtcbiAgICBfdGhpcy5sb2FkTGlzdGVuZXJfID0gbnVsbDtcbiAgICBfdGhpcy5yZXNpemVPYnNlcnZlcl8gPSBudWxsO1xuICAgIF90aGlzLmRlYm91bmNlZEhhbmRsZXJfID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucmVzaXplSGFuZGxlcigpO1xuICAgIH0sIDEwMCwgZmFsc2UsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcblxuICAgIGlmIChSRVNJWkVfT0JTRVJWRVJfQVZBSUxBQkxFKSB7XG4gICAgICBfdGhpcy5yZXNpemVPYnNlcnZlcl8gPSBuZXcgX3RoaXMuUmVzaXplT2JzZXJ2ZXIoX3RoaXMuZGVib3VuY2VkSGFuZGxlcl8pO1xuXG4gICAgICBfdGhpcy5yZXNpemVPYnNlcnZlcl8ub2JzZXJ2ZShwbGF5ZXIuZWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmxvYWRMaXN0ZW5lcl8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMuZWxfIHx8ICFfdGhpcy5lbF8uY29udGVudFdpbmRvdykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWJvdW5jZWRIYW5kbGVyXyA9IF90aGlzLmRlYm91bmNlZEhhbmRsZXJfO1xuXG4gICAgICAgIHZhciB1bmxvYWRMaXN0ZW5lcl8gPSBfdGhpcy51bmxvYWRMaXN0ZW5lcl8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb2ZmKHRoaXMsICdyZXNpemUnLCBkZWJvdW5jZWRIYW5kbGVyXyk7XG4gICAgICAgICAgb2ZmKHRoaXMsICd1bmxvYWQnLCB1bmxvYWRMaXN0ZW5lcl8pO1xuICAgICAgICAgIHVubG9hZExpc3RlbmVyXyA9IG51bGw7XG4gICAgICAgIH07IC8vIHNhZmFyaSBhbmQgZWRnZSBjYW4gdW5sb2FkIHRoZSBpZnJhbWUgYmVmb3JlIHJlc2l6ZW1hbmFnZXIgZGlzcG9zZVxuICAgICAgICAvLyB3ZSBoYXZlIHRvIGRpc3Bvc2Ugb2YgZXZlbnQgaGFuZGxlcnMgY29ycmVjdGx5IGJlZm9yZSB0aGF0IGhhcHBlbnNcblxuXG4gICAgICAgIG9uKF90aGlzLmVsXy5jb250ZW50V2luZG93LCAndW5sb2FkJywgdW5sb2FkTGlzdGVuZXJfKTtcbiAgICAgICAgb24oX3RoaXMuZWxfLmNvbnRlbnRXaW5kb3csICdyZXNpemUnLCBkZWJvdW5jZWRIYW5kbGVyXyk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5vbmUoJ2xvYWQnLCBfdGhpcy5sb2FkTGlzdGVuZXJfKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVzaXplTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2lmcmFtZScsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1yZXNpemUtbWFuYWdlcicsXG4gICAgICB0YWJJbmRleDogLTFcbiAgICB9LCB7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSByZXNpemUgaXMgdHJpZ2dlcmVkIG9uIHRoZSBpZnJhbWUgb3IgYSByZXNpemUgaXMgb2JzZXJ2ZWQgdmlhIHRoZSBSZXNpemVPYnNlcnZlclxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI3BsYXllcnJlc2l6ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNpemVIYW5kbGVyID0gZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcGxheWVyIHNpemUgaGFzIGNoYW5nZWRcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjcGxheWVycmVzaXplXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuICAgIC8vIG1ha2Ugc3VyZSBwbGF5ZXIgaXMgc3RpbGwgYXJvdW5kIHRvIHRyaWdnZXJcbiAgICAvLyBwcmV2ZW50cyB0aGlzIGZyb20gY2F1c2luZyBhbiBlcnJvciBhZnRlciBkaXNwb3NlXG4gICAgaWYgKCF0aGlzLnBsYXllcl8gfHwgIXRoaXMucGxheWVyXy50cmlnZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5ZXJfLnRyaWdnZXIoJ3BsYXllcnJlc2l6ZScpO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5kZWJvdW5jZWRIYW5kbGVyXykge1xuICAgICAgdGhpcy5kZWJvdW5jZWRIYW5kbGVyXy5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXNpemVPYnNlcnZlcl8pIHtcbiAgICAgIGlmICh0aGlzLnBsYXllcl8uZWwoKSkge1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyXy51bm9ic2VydmUodGhpcy5wbGF5ZXJfLmVsKCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyXy5kaXNjb25uZWN0KCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubG9hZExpc3RlbmVyXykge1xuICAgICAgdGhpcy5vZmYoJ2xvYWQnLCB0aGlzLmxvYWRMaXN0ZW5lcl8pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVsXyAmJiB0aGlzLmVsXy5jb250ZW50V2luZG93ICYmIHRoaXMudW5sb2FkTGlzdGVuZXJfKSB7XG4gICAgICB0aGlzLnVubG9hZExpc3RlbmVyXy5jYWxsKHRoaXMuZWxfLmNvbnRlbnRXaW5kb3cpO1xuICAgIH1cblxuICAgIHRoaXMuUmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICAgIHRoaXMuZGVib3VuY2VkSGFuZGxlcl8gPSBudWxsO1xuICAgIHRoaXMubG9hZExpc3RlbmVyXyA9IG51bGw7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIFJlc2l6ZU1hbmFnZXI7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUmVzaXplTWFuYWdlcicsIFJlc2l6ZU1hbmFnZXIpO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBtZWRpYW4gb2YgYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJbXX0gYXJyXG4gKiAgICAgICAgSW5wdXQgYXJyYXkgb2YgbnVtYmVycy5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgTWVkaWFuIHZhbHVlLlxuICovXG52YXIgbWVkaWFuID0gZnVuY3Rpb24gbWVkaWFuKGFycikge1xuICB2YXIgbWlkID0gTWF0aC5mbG9vcihhcnIubGVuZ3RoIC8gMik7XG4gIHZhciBzb3J0ZWRMaXN0ID0gW10uY29uY2F0KGFycikuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSk7XG4gIHJldHVybiBhcnIubGVuZ3RoICUgMiAhPT0gMCA/IHNvcnRlZExpc3RbbWlkXSA6IChzb3J0ZWRMaXN0W21pZCAtIDFdICsgc29ydGVkTGlzdFttaWRdKSAvIDI7XG59O1xuXG4vKiB0cmFjayB3aGVuIHdlIGFyZSBhdCB0aGUgbGl2ZSBlZGdlLCBhbmQgb3RoZXIgaGVscGVycyBmb3IgbGl2ZSBwbGF5YmFjayAqL1xuXG52YXIgTGl2ZVRyYWNrZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGl2ZVRyYWNrZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpdmVUcmFja2VyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIC8vIExpdmVUcmFja2VyIGRvZXMgbm90IG5lZWQgYW4gZWxlbWVudFxuICAgIHZhciBvcHRpb25zXyA9IG1lcmdlT3B0aW9ucyh7XG4gICAgICBjcmVhdGVFbDogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnNfKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMucmVzZXRfKCk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy5wbGF5ZXJfLCAnZHVyYXRpb25jaGFuZ2UnLCBfdGhpcy5oYW5kbGVEdXJhdGlvbmNoYW5nZSk7IC8vIHdlIGRvbid0IG5lZWQgdG8gdHJhY2sgbGl2ZSBwbGF5YmFjayBpZiB0aGUgZG9jdW1lbnQgaXMgaGlkZGVuLFxuICAgIC8vIGFsc28sIHRyYWNraW5nIHdoZW4gdGhlIGRvY3VtZW50IGlzIGhpZGRlbiBjYW5cbiAgICAvLyBjYXVzZSB0aGUgQ1BVIHRvIHNwaWtlIGFuZCBldmVudHVhbGx5IGNyYXNoIHRoZSBwYWdlIG9uIElFMTEuXG5cblxuICAgIGlmIChJRV9WRVJTSU9OICYmICdoaWRkZW4nIGluIGRvY3VtZW50ICYmICd2aXNpYmlsaXR5U3RhdGUnIGluIGRvY3VtZW50KSB7XG4gICAgICBfdGhpcy5vbihkb2N1bWVudCwgJ3Zpc2liaWxpdHljaGFuZ2UnLCBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGl2ZVRyYWNrZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgIT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgdGhpcy5zdG9wVHJhY2tpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydFRyYWNraW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc0JlaGluZF8gPSBmdW5jdGlvbiBpc0JlaGluZF8oKSB7XG4gICAgLy8gZG9uJ3QgcmVwb3J0IHRoYXQgd2UgYXJlIGJlaGluZCB1bnRpbCBhIHRpbWV1cGRhdGUgaGFzIGJlZW4gc2VlblxuICAgIGlmICghdGhpcy50aW1ldXBkYXRlU2Vlbl8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGl2ZUN1cnJlbnRUaW1lID0gdGhpcy5saXZlQ3VycmVudFRpbWUoKTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTsgLy8gdGhlIGxpdmUgZWRnZSB3aW5kb3cgaXMgdGhlIGFtb3VudCBvZiBzZWNvbmRzIGF3YXkgZnJvbSBsaXZlXG4gICAgLy8gdGhhdCBhIHBsYXllciBjYW4gYmUsIGJ1dCBzdGlsbCBiZSBjb25zaWRlcmVkIGxpdmUuXG4gICAgLy8gd2UgYWRkIDAuMDcgYmVjYXVzZSB0aGUgbGl2ZSB0cmFja2luZyBoYXBwZW5zIGV2ZXJ5IDMwbXNcbiAgICAvLyBhbmQgd2Ugd2FudCBzb21lIHdpZ2dsZSByb29tIGZvciBzaG9ydCBzZWdtZW50IGxpdmUgcGxheWJhY2tcblxuICAgIHZhciBsaXZlRWRnZVdpbmRvdyA9IHRoaXMuc2Vla2FibGVJbmNyZW1lbnRfICogMiArIDAuMDc7IC8vIG9uIEFuZHJvaWQgbGl2ZUN1cnJlbnRUaW1lIGNhbiBiZWUgSW5maW5pdHksIGJlY2F1c2Ugc2Vla2FibGVFbmRcbiAgICAvLyBjYW4gYmUgSW5maW5pdHksIHNvIHdlIGhhbmRsZSB0aGF0IGNhc2UuXG5cbiAgICByZXR1cm4gbGl2ZUN1cnJlbnRUaW1lICE9PSBJbmZpbml0eSAmJiBsaXZlQ3VycmVudFRpbWUgLSBsaXZlRWRnZVdpbmRvdyA+PSBjdXJyZW50VGltZTtcbiAgfSAvLyBhbGwgdGhlIGZ1bmN0aW9uYWxpdHkgZm9yIHRyYWNraW5nIHdoZW4gc2VlayBlbmQgY2hhbmdlc1xuICAvLyBhbmQgZm9yIHRyYWNraW5nIGhvdyBmYXIgcGFzdCBzZWVrIGVuZCB3ZSBzaG91bGQgYmVcbiAgO1xuXG4gIF9wcm90by50cmFja0xpdmVfID0gZnVuY3Rpb24gdHJhY2tMaXZlXygpIHtcbiAgICB0aGlzLnBhc3RTZWVrRW5kXyA9IHRoaXMucGFzdFNlZWtFbmRfO1xuICAgIHZhciBzZWVrYWJsZSA9IHRoaXMucGxheWVyXy5zZWVrYWJsZSgpOyAvLyBza2lwIHVuZGVmaW5lZCBzZWVrYWJsZVxuXG4gICAgaWYgKCFzZWVrYWJsZSB8fCAhc2Vla2FibGUubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5ld1NlZWtFbmQgPSB0aGlzLnNlZWthYmxlRW5kKCk7IC8vIHdlIGNhbiBvbmx5IHRlbGwgaWYgd2UgYXJlIGJlaGluZCBsaXZlLCB3aGVuIHNlZWthYmxlIGNoYW5nZXNcbiAgICAvLyBvbmNlIHdlIGRldGVjdCB0aGF0IHNlZWthYmxlIGhhcyBjaGFuZ2VkIHdlIGNoZWNrIHRoZSBuZXcgc2Vla1xuICAgIC8vIGVuZCBhZ2FpbnN0IGN1cnJlbnQgdGltZSwgd2l0aCBhIGZ1ZGdlIHZhbHVlIG9mIGhhbGYgYSBzZWNvbmQuXG5cbiAgICBpZiAobmV3U2Vla0VuZCAhPT0gdGhpcy5sYXN0U2Vla0VuZF8pIHtcbiAgICAgIGlmICh0aGlzLmxhc3RTZWVrRW5kXykge1xuICAgICAgICAvLyB3ZSB0cnkgdG8gZ2V0IHRoZSBiZXN0IGZpdCB2YWx1ZSBmb3IgdGhlIHNlZWtpbmcgaW5jcmVtZW50XG4gICAgICAgIC8vIHZhcmlhYmxlIGZyb20gdGhlIGxhc3QgMTIgdmFsdWVzLlxuICAgICAgICB0aGlzLnNlZWthYmxlSW5jcmVtZW50TGlzdF8gPSB0aGlzLnNlZWthYmxlSW5jcmVtZW50TGlzdF8uc2xpY2UoLTExKTtcbiAgICAgICAgdGhpcy5zZWVrYWJsZUluY3JlbWVudExpc3RfLnB1c2goTWF0aC5hYnMobmV3U2Vla0VuZCAtIHRoaXMubGFzdFNlZWtFbmRfKSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2Vla2FibGVJbmNyZW1lbnRMaXN0Xy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgdGhpcy5zZWVrYWJsZUluY3JlbWVudF8gPSBtZWRpYW4odGhpcy5zZWVrYWJsZUluY3JlbWVudExpc3RfKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnBhc3RTZWVrRW5kXyA9IDA7XG4gICAgICB0aGlzLmxhc3RTZWVrRW5kXyA9IG5ld1NlZWtFbmQ7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3NlZWthYmxlZW5kY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXN0U2Vla0VuZF8gPSB0aGlzLnBhc3RTZWVrRW5kKCkgKyAwLjAzO1xuXG4gICAgaWYgKHRoaXMuaXNCZWhpbmRfKCkgIT09IHRoaXMuYmVoaW5kTGl2ZUVkZ2UoKSkge1xuICAgICAgdGhpcy5iZWhpbmRMaXZlRWRnZV8gPSB0aGlzLmlzQmVoaW5kXygpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdsaXZlZWRnZWNoYW5nZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogaGFuZGxlIGEgZHVyYXRpb25jaGFuZ2UgZXZlbnQgb24gdGhlIHBsYXllclxuICAgKiBhbmQgc3RhcnQvc3RvcCB0cmFja2luZyBhY2NvcmRpbmdseS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRHVyYXRpb25jaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVEdXJhdGlvbmNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgPT09IEluZmluaXR5KSB7XG4gICAgICB0aGlzLnN0YXJ0VHJhY2tpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdG9wVHJhY2tpbmcoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIHN0YXJ0IHRyYWNraW5nIGxpdmUgcGxheWJhY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RhcnRUcmFja2luZyA9IGZ1bmN0aW9uIHN0YXJ0VHJhY2tpbmcoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5pc1RyYWNraW5nKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHdlIGhhdmVuJ3Qgc2VlbiBhIHRpbWV1cGRhdGUsIHdlIG5lZWQgdG8gY2hlY2sgd2hldGhlciBwbGF5YmFja1xuICAgIC8vIGJlZ2FuIGJlZm9yZSB0aGlzIGNvbXBvbmVudCBzdGFydGVkIHRyYWNraW5nLiBUaGlzIGNhbiBoYXBwZW4gY29tbW9ubHlcbiAgICAvLyB3aGVuIHVzaW5nIGF1dG9wbGF5LlxuXG5cbiAgICBpZiAoIXRoaXMudGltZXVwZGF0ZVNlZW5fKSB7XG4gICAgICB0aGlzLnRpbWV1cGRhdGVTZWVuXyA9IHRoaXMucGxheWVyXy5oYXNTdGFydGVkKCk7XG4gICAgfVxuXG4gICAgdGhpcy50cmFja2luZ0ludGVydmFsXyA9IHRoaXMuc2V0SW50ZXJ2YWwodGhpcy50cmFja0xpdmVfLCAzMCk7XG4gICAgdGhpcy50cmFja0xpdmVfKCk7XG4gICAgdGhpcy5vbih0aGlzLnBsYXllcl8sICdwbGF5JywgdGhpcy50cmFja0xpdmVfKTtcbiAgICB0aGlzLm9uKHRoaXMucGxheWVyXywgJ3BhdXNlJywgdGhpcy50cmFja0xpdmVfKTsgLy8gdGhpcyBpcyB0byBwcmV2ZW50IHNob3dpbmcgdGhhdCB3ZSBhcmUgbm90IGxpdmVcbiAgICAvLyBiZWZvcmUgYSB2aWRlbyBzdGFydHMgdG8gcGxheVxuXG4gICAgaWYgKCF0aGlzLnRpbWV1cGRhdGVTZWVuXykge1xuICAgICAgdGhpcy5vbmUodGhpcy5wbGF5ZXJfLCAncGxheScsIHRoaXMuaGFuZGxlUGxheSk7XG5cbiAgICAgIHRoaXMuaGFuZGxlVGltZXVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnRpbWV1cGRhdGVTZWVuXyA9IHRydWU7XG4gICAgICAgIF90aGlzMi5oYW5kbGVUaW1ldXBkYXRlID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub25lKHRoaXMucGxheWVyXywgJ3RpbWV1cGRhdGUnLCB0aGlzLmhhbmRsZVRpbWV1cGRhdGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlUGxheSA9IGZ1bmN0aW9uIGhhbmRsZVBsYXkoKSB7XG4gICAgdGhpcy5vbmUodGhpcy5wbGF5ZXJfLCAndGltZXVwZGF0ZScsIHRoaXMuc2Vla1RvTGl2ZUVkZ2UpO1xuICB9XG4gIC8qKlxuICAgKiBTdG9wIHRyYWNraW5nLCBhbmQgc2V0IGFsbCBpbnRlcm5hbCB2YXJpYWJsZXMgdG9cbiAgICogdGhlaXIgaW5pdGlhbCB2YWx1ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRfID0gZnVuY3Rpb24gcmVzZXRfKCkge1xuICAgIHRoaXMucGFzdFNlZWtFbmRfID0gMDtcbiAgICB0aGlzLmxhc3RTZWVrRW5kXyA9IG51bGw7XG4gICAgdGhpcy5iZWhpbmRMaXZlRWRnZV8gPSBudWxsO1xuICAgIHRoaXMudGltZXVwZGF0ZVNlZW5fID0gZmFsc2U7XG4gICAgdGhpcy5jbGVhckludGVydmFsKHRoaXMudHJhY2tpbmdJbnRlcnZhbF8pO1xuICAgIHRoaXMudHJhY2tpbmdJbnRlcnZhbF8gPSBudWxsO1xuICAgIHRoaXMuc2Vla2FibGVJbmNyZW1lbnRfID0gMTI7XG4gICAgdGhpcy5zZWVrYWJsZUluY3JlbWVudExpc3RfID0gW107XG4gICAgdGhpcy5vZmYodGhpcy5wbGF5ZXJfLCAncGxheScsIHRoaXMudHJhY2tMaXZlXyk7XG4gICAgdGhpcy5vZmYodGhpcy5wbGF5ZXJfLCAncGF1c2UnLCB0aGlzLnRyYWNrTGl2ZV8pO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ3BsYXknLCB0aGlzLmhhbmRsZVBsYXkpO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ3RpbWV1cGRhdGUnLCB0aGlzLnNlZWtUb0xpdmVFZGdlKTtcblxuICAgIGlmICh0aGlzLmhhbmRsZVRpbWV1cGRhdGUpIHtcbiAgICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ3RpbWV1cGRhdGUnLCB0aGlzLmhhbmRsZVRpbWV1cGRhdGUpO1xuICAgICAgdGhpcy5oYW5kbGVUaW1ldXBkYXRlID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIHN0b3AgdHJhY2tpbmcgbGl2ZSBwbGF5YmFja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdG9wVHJhY2tpbmcgPSBmdW5jdGlvbiBzdG9wVHJhY2tpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVHJhY2tpbmcoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXRfKCk7XG4gIH1cbiAgLyoqXG4gICAqIEEgaGVscGVyIHRvIGdldCB0aGUgcGxheWVyIHNlZWthYmxlIGVuZFxuICAgKiBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gbnVsbCBjaGVjayBldmVyeXdoZXJlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZWthYmxlRW5kID0gZnVuY3Rpb24gc2Vla2FibGVFbmQoKSB7XG4gICAgdmFyIHNlZWthYmxlID0gdGhpcy5wbGF5ZXJfLnNlZWthYmxlKCk7XG4gICAgdmFyIHNlZWthYmxlRW5kcyA9IFtdO1xuICAgIHZhciBpID0gc2Vla2FibGUgPyBzZWVrYWJsZS5sZW5ndGggOiAwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgc2Vla2FibGVFbmRzLnB1c2goc2Vla2FibGUuZW5kKGkpKTtcbiAgICB9IC8vIGdyYWIgdGhlIGZ1cnRoZXN0IHNlZWthYmxlIGVuZCBhZnRlciBzb3J0aW5nLCBvciBpZiB0aGVyZSBhcmUgbm9uZVxuICAgIC8vIGRlZmF1bHQgdG8gSW5maW5pdHlcblxuXG4gICAgcmV0dXJuIHNlZWthYmxlRW5kcy5sZW5ndGggPyBzZWVrYWJsZUVuZHMuc29ydCgpW3NlZWthYmxlRW5kcy5sZW5ndGggLSAxXSA6IEluZmluaXR5O1xuICB9XG4gIC8qKlxuICAgKiBBIGhlbHBlciB0byBnZXQgdGhlIHBsYXllciBzZWVrYWJsZSBzdGFydFxuICAgKiBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gbnVsbCBjaGVjayBldmVyeXdoZXJlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZWthYmxlU3RhcnQgPSBmdW5jdGlvbiBzZWVrYWJsZVN0YXJ0KCkge1xuICAgIHZhciBzZWVrYWJsZSA9IHRoaXMucGxheWVyXy5zZWVrYWJsZSgpO1xuICAgIHZhciBzZWVrYWJsZVN0YXJ0cyA9IFtdO1xuICAgIHZhciBpID0gc2Vla2FibGUgPyBzZWVrYWJsZS5sZW5ndGggOiAwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgc2Vla2FibGVTdGFydHMucHVzaChzZWVrYWJsZS5zdGFydChpKSk7XG4gICAgfSAvLyBncmFiIHRoZSBmaXJzdCBzZWVrYWJsZSBzdGFydCBhZnRlciBzb3J0aW5nLCBvciBpZiB0aGVyZSBhcmUgbm9uZVxuICAgIC8vIGRlZmF1bHQgdG8gMFxuXG5cbiAgICByZXR1cm4gc2Vla2FibGVTdGFydHMubGVuZ3RoID8gc2Vla2FibGVTdGFydHMuc29ydCgpWzBdIDogMDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBsaXZlIHRpbWUgd2luZG93XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxpdmVXaW5kb3cgPSBmdW5jdGlvbiBsaXZlV2luZG93KCkge1xuICAgIHZhciBsaXZlQ3VycmVudFRpbWUgPSB0aGlzLmxpdmVDdXJyZW50VGltZSgpO1xuXG4gICAgaWYgKGxpdmVDdXJyZW50VGltZSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGl2ZUN1cnJlbnRUaW1lIC0gdGhpcy5zZWVrYWJsZVN0YXJ0KCk7XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIHBsYXllciBpcyBsaXZlLCBvbmx5IGNoZWNrcyBpZiB0aGlzIGNvbXBvbmVudFxuICAgKiBpcyB0cmFja2luZyBsaXZlIHBsYXliYWNrIG9yIG5vdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc0xpdmUgPSBmdW5jdGlvbiBpc0xpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNUcmFja2luZygpO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGN1cnJlbnRUaW1lIGlzIGF0IHRoZSBsaXZlIGVkZ2UgYW5kIHdvbid0IGZhbGwgYmVoaW5kXG4gICAqIG9uIGVhY2ggc2Vla2FibGVlbmRjaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYXRMaXZlRWRnZSA9IGZ1bmN0aW9uIGF0TGl2ZUVkZ2UoKSB7XG4gICAgcmV0dXJuICF0aGlzLmJlaGluZExpdmVFZGdlKCk7XG4gIH1cbiAgLyoqXG4gICAqIGdldCB3aGF0IHdlIGV4cGVjdCB0aGUgbGl2ZSBjdXJyZW50IHRpbWUgdG8gYmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubGl2ZUN1cnJlbnRUaW1lID0gZnVuY3Rpb24gbGl2ZUN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhc3RTZWVrRW5kKCkgKyB0aGlzLnNlZWthYmxlRW5kKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgaG93IGZhciBwYXN0IHNlZWsgZW5kIHdlIGV4cGVjdCBjdXJyZW50IHRpbWUgdG8gYmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFzdFNlZWtFbmQgPSBmdW5jdGlvbiBwYXN0U2Vla0VuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXN0U2Vla0VuZF87XG4gIH1cbiAgLyoqXG4gICAqIElmIHdlIGFyZSBjdXJyZW50bHkgYmVoaW5kIHRoZSBsaXZlIGVkZ2UsIGFrYSBjdXJyZW50VGltZSB3aWxsIGJlXG4gICAqIGJlaGluZCBvbiBhIHNlZWthYmxlZW5kY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJlaGluZExpdmVFZGdlID0gZnVuY3Rpb24gYmVoaW5kTGl2ZUVkZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVoaW5kTGl2ZUVkZ2VfO1xuICB9O1xuXG4gIF9wcm90by5pc1RyYWNraW5nID0gZnVuY3Rpb24gaXNUcmFja2luZygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMudHJhY2tpbmdJbnRlcnZhbF8gPT09ICdudW1iZXInO1xuICB9XG4gIC8qKlxuICAgKiBTZWVrIHRvIHRoZSBsaXZlIGVkZ2UgaWYgd2UgYXJlIGJlaGluZCB0aGUgbGl2ZSBlZGdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZWtUb0xpdmVFZGdlID0gZnVuY3Rpb24gc2Vla1RvTGl2ZUVkZ2UoKSB7XG4gICAgaWYgKHRoaXMuYXRMaXZlRWRnZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMubGl2ZUN1cnJlbnRUaW1lKCkpO1xuXG4gICAgaWYgKHRoaXMucGxheWVyXy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuc3RvcFRyYWNraW5nKCk7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIExpdmVUcmFja2VyO1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0xpdmVUcmFja2VyJywgTGl2ZVRyYWNrZXIpO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBmaXJlIGEgc291cmNlc2V0IHdoZW4gdGhlcmUgaXMgc29tZXRoaW5nXG4gKiBzaW1pbGFyIHRvIGBtZWRpYUVsLmxvYWQoKWAgYmVpbmcgY2FsbGVkLiBJdCB3aWxsIHRyeSB0byBmaW5kIHRoZSBzb3VyY2UgdmlhXG4gKiB0aGUgYHNyY2AgYXR0cmlidXRlIGFuZCB0aGVuIHRoZSBgPHNvdXJjZT5gIGVsZW1lbnRzLiBJdCB3aWxsIHRoZW4gZmlyZSBgc291cmNlc2V0YFxuICogd2l0aCB0aGUgc291cmNlIHRoYXQgd2FzIGZvdW5kIG9yIGVtcHR5IHN0cmluZyBpZiB3ZSBjYW5ub3Qga25vdy4gSWYgaXQgY2Fubm90XG4gKiBmaW5kIGEgc291cmNlIHRoZW4gYHNvdXJjZXNldGAgd2lsbCBub3QgYmUgZmlyZWQuXG4gKlxuICogQHBhcmFtIHtIdG1sNX0gdGVjaFxuICogICAgICAgIFRoZSB0ZWNoIG9iamVjdCB0aGF0IHNvdXJjZXNldCB3YXMgc2V0dXAgb25cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICByZXR1cm5zIGZhbHNlIGlmIHRoZSBzb3VyY2VzZXQgd2FzIG5vdCBmaXJlZCBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKi9cblxudmFyIHNvdXJjZXNldExvYWQgPSBmdW5jdGlvbiBzb3VyY2VzZXRMb2FkKHRlY2gpIHtcbiAgdmFyIGVsID0gdGVjaC5lbCgpOyAvLyBpZiBgZWwuc3JjYCBpcyBzZXQsIHRoYXQgc291cmNlIHdpbGwgYmUgbG9hZGVkLlxuXG4gIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ3NyYycpKSB7XG4gICAgdGVjaC50cmlnZ2VyU291cmNlc2V0KGVsLnNyYyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFNpbmNlIHRoZXJlIGlzbid0IGEgc3JjIHByb3BlcnR5IG9uIHRoZSBtZWRpYSBlbGVtZW50LCBzb3VyY2UgZWxlbWVudHMgd2lsbCBiZSB1c2VkIGZvclxuICAgKiBpbXBsZW1lbnRpbmcgdGhlIHNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtLiBUaGlzIGhhcHBlbnMgYXN5bmNocm9ub3VzbHkgYW5kXG4gICAqIGZvciBtb3N0IGNhc2VzIHdlcmUgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBzb3VyY2Ugd2UgY2Fubm90IHRlbGwgd2hhdCBzb3VyY2Ugd2lsbFxuICAgKiBiZSBsb2FkZWQsIHdpdGhvdXQgcmUtaW1wbGVtZW50aW5nIHRoZSBzb3VyY2Ugc2VsZWN0aW9uIGFsZ29yaXRobS4gQXQgdGhpcyB0aW1lIHdlIGFyZSBub3RcbiAgICogZ29pbmcgdG8gZG8gdGhhdC4gVGhlcmUgYXJlIHRocmVlIHNwZWNpYWwgY2FzZXMgdGhhdCB3ZSBkbyBoYW5kbGUgaGVyZSB0aG91Z2g6XG4gICAqXG4gICAqIDEuIElmIHRoZXJlIGFyZSBubyBzb3VyY2VzLCBkbyBub3QgZmlyZSBgc291cmNlc2V0YC5cbiAgICogMi4gSWYgdGhlcmUgaXMgb25seSBvbmUgYDxzb3VyY2U+YCB3aXRoIGEgYHNyY2AgcHJvcGVydHkvYXR0cmlidXRlIHRoYXQgaXMgb3VyIGBzcmNgXG4gICAqIDMuIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYDxzb3VyY2U+YCBidXQgYWxsIG9mIHRoZW0gaGF2ZSB0aGUgc2FtZSBgc3JjYCB1cmwuXG4gICAqICAgIFRoYXQgd2lsbCBiZSBvdXIgc3JjLlxuICAgKi9cblxuXG4gIHZhciBzb3VyY2VzID0gdGVjaC4kJCgnc291cmNlJyk7XG4gIHZhciBzcmNVcmxzID0gW107XG4gIHZhciBzcmMgPSAnJzsgLy8gaWYgdGhlcmUgYXJlIG5vIHNvdXJjZXMsIGRvIG5vdCBmaXJlIHNvdXJjZXNldFxuXG4gIGlmICghc291cmNlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gb25seSBjb3VudCB2YWxpZC9ub24tZHVwbGljYXRlIHNvdXJjZSBlbGVtZW50c1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHVybCA9IHNvdXJjZXNbaV0uc3JjO1xuXG4gICAgaWYgKHVybCAmJiBzcmNVcmxzLmluZGV4T2YodXJsKSA9PT0gLTEpIHtcbiAgICAgIHNyY1VybHMucHVzaCh1cmwpO1xuICAgIH1cbiAgfSAvLyB0aGVyZSB3ZXJlIG5vIHZhbGlkIHNvdXJjZXNcblxuXG4gIGlmICghc3JjVXJscy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gdGhlcmUgaXMgb25seSBvbmUgdmFsaWQgc291cmNlIGVsZW1lbnQgdXJsXG4gIC8vIHVzZSB0aGF0XG5cblxuICBpZiAoc3JjVXJscy5sZW5ndGggPT09IDEpIHtcbiAgICBzcmMgPSBzcmNVcmxzWzBdO1xuICB9XG5cbiAgdGVjaC50cmlnZ2VyU291cmNlc2V0KHNyYyk7XG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogb3VyIGltcGxlbWVudGF0aW9uIG9mIGFuIGBpbm5lckhUTUxgIGRlc2NyaXB0b3IgZm9yIGJyb3dzZXJzXG4gKiB0aGF0IGRvIG5vdCBoYXZlIG9uZS5cbiAqL1xuXG5cbnZhciBpbm5lckhUTUxEZXNjcmlwdG9yUG9seWZpbGwgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdpbm5lckhUTUwnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lTm9kZSh0cnVlKS5pbm5lckhUTUw7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHYpIHtcbiAgICAvLyBtYWtlIGEgZHVtbXkgbm9kZSB0byB1c2UgaW5uZXJIVE1MIG9uXG4gICAgdmFyIGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpOyAvLyBzZXQgaW5uZXJIVE1MIHRvIHRoZSB2YWx1ZSBwcm92aWRlZFxuXG4gICAgZHVtbXkuaW5uZXJIVE1MID0gdjsgLy8gbWFrZSBhIGRvY3VtZW50IGZyYWdtZW50IHRvIGhvbGQgdGhlIG5vZGVzIGZyb20gZHVtbXlcblxuICAgIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOyAvLyBjb3B5IGFsbCBvZiB0aGUgbm9kZXMgY3JlYXRlZCBieSB0aGUgaW5uZXJIVE1MIG9uIGR1bW15XG4gICAgLy8gdG8gdGhlIGRvY3VtZW50IGZyYWdtZW50XG5cbiAgICB3aGlsZSAoZHVtbXkuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoZHVtbXkuY2hpbGROb2Rlc1swXSk7XG4gICAgfSAvLyByZW1vdmUgY29udGVudFxuXG5cbiAgICB0aGlzLmlubmVyVGV4dCA9ICcnOyAvLyBub3cgd2UgYWRkIGFsbCBvZiB0aGF0IGh0bWwgaW4gb25lIGJ5IGFwcGVuZGluZyB0aGVcbiAgICAvLyBkb2N1bWVudCBmcmFnbWVudC4gVGhpcyBpcyBob3cgaW5uZXJIVE1MIGRvZXMgaXQuXG5cbiAgICB3aW5kb3ckMS5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmRDaGlsZC5jYWxsKHRoaXMsIGRvY0ZyYWcpOyAvLyB0aGVuIHJldHVybiB0aGUgcmVzdWx0IHRoYXQgaW5uZXJIVE1MJ3Mgc2V0dGVyIHdvdWxkXG5cbiAgICByZXR1cm4gdGhpcy5pbm5lckhUTUw7XG4gIH1cbn0pO1xuLyoqXG4gKiBHZXQgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGdpdmVuIGEgbGlzdCBvZiBwcmlvcml0aWVzIGFuZCB0aGVcbiAqIHByb3BlcnR5IHRvIGdldC5cbiAqL1xuXG52YXIgZ2V0RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldERlc2NyaXB0b3IocHJpb3JpdHksIHByb3ApIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXR5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJpb3JpdHlbaV0sIHByb3ApO1xuXG4gICAgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5zZXQgJiYgZGVzY3JpcHRvci5nZXQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgZ2V0SW5uZXJIVE1MRGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldElubmVySFRNTERlc2NyaXB0b3IodGVjaCkge1xuICByZXR1cm4gZ2V0RGVzY3JpcHRvcihbdGVjaC5lbCgpLCB3aW5kb3ckMS5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSwgd2luZG93JDEuRWxlbWVudC5wcm90b3R5cGUsIGlubmVySFRNTERlc2NyaXB0b3JQb2x5ZmlsbF0sICdpbm5lckhUTUwnKTtcbn07XG4vKipcbiAqIFBhdGNoZXMgYnJvd3NlciBpbnRlcm5hbCBmdW5jdGlvbnMgc28gdGhhdCB3ZSBjYW4gdGVsbCBzeW5jaHJvbm91c2x5XG4gKiBpZiBhIGA8c291cmNlPmAgd2FzIGFwcGVuZGVkIHRvIHRoZSBtZWRpYSBlbGVtZW50LiBGb3Igc29tZSByZWFzb24gdGhpc1xuICogY2F1c2VzIGEgYHNvdXJjZXNldGAgaWYgdGhlIHRoZSBtZWRpYSBlbGVtZW50IGlzIHJlYWR5IGFuZCBoYXMgbm8gc291cmNlLlxuICogVGhpcyBoYXBwZW5zIHdoZW46XG4gKiAtIFRoZSBwYWdlIGhhcyBqdXN0IGxvYWRlZCBhbmQgdGhlIG1lZGlhIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHNvdXJjZS5cbiAqIC0gVGhlIG1lZGlhIGVsZW1lbnQgd2FzIGVtcHRpZWQgb2YgYWxsIHNvdXJjZXMsIHRoZW4gYGxvYWQoKWAgd2FzIGNhbGxlZC5cbiAqXG4gKiBJdCBkb2VzIHRoaXMgYnkgcGF0Y2hpbmcgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMvcHJvcGVydGllcyB3aGVuIHRoZXkgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAtIGBhcHBlbmQoKWAgLSBjYW4gYmUgdXNlZCB0byBhZGQgYSBgPHNvdXJjZT5gIGVsZW1lbnQgdG8gdGhlIG1lZGlhIGVsZW1lbnRcbiAqIC0gYGFwcGVuZENoaWxkKClgIC0gY2FuIGJlIHVzZWQgdG8gYWRkIGEgYDxzb3VyY2U+YCBlbGVtZW50IHRvIHRoZSBtZWRpYSBlbGVtZW50XG4gKiAtIGBpbnNlcnRBZGphY2VudEhUTUwoKWAgLSAgY2FuIGJlIHVzZWQgdG8gYWRkIGEgYDxzb3VyY2U+YCBlbGVtZW50IHRvIHRoZSBtZWRpYSBlbGVtZW50XG4gKiAtIGBpbm5lckhUTUxgIC0gIGNhbiBiZSB1c2VkIHRvIGFkZCBhIGA8c291cmNlPmAgZWxlbWVudCB0byB0aGUgbWVkaWEgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7SHRtbDV9IHRlY2hcbiAqICAgICAgICBUaGUgdGVjaCBvYmplY3QgdGhhdCBzb3VyY2VzZXQgaXMgYmVpbmcgc2V0dXAgb24uXG4gKi9cblxuXG52YXIgZmlyc3RTb3VyY2VXYXRjaCA9IGZ1bmN0aW9uIGZpcnN0U291cmNlV2F0Y2godGVjaCkge1xuICB2YXIgZWwgPSB0ZWNoLmVsKCk7IC8vIG1ha2Ugc3VyZSBmaXJzdFNvdXJjZVdhdGNoIGlzbid0IHNldHVwIHR3aWNlLlxuXG4gIGlmIChlbC5yZXNldFNvdXJjZVdhdGNoXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvbGQgPSB7fTtcbiAgdmFyIGlubmVyRGVzY3JpcHRvciA9IGdldElubmVySFRNTERlc2NyaXB0b3IodGVjaCk7XG5cbiAgdmFyIGFwcGVuZFdyYXBwZXIgPSBmdW5jdGlvbiBhcHBlbmRXcmFwcGVyKGFwcGVuZEZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0dmFsID0gYXBwZW5kRm4uYXBwbHkoZWwsIGFyZ3MpO1xuICAgICAgc291cmNlc2V0TG9hZCh0ZWNoKTtcbiAgICAgIHJldHVybiByZXR2YWw7XG4gICAgfTtcbiAgfTtcblxuICBbJ2FwcGVuZCcsICdhcHBlbmRDaGlsZCcsICdpbnNlcnRBZGphY2VudEhUTUwnXS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgaWYgKCFlbFtrXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gc3RvcmUgdGhlIG9sZCBmdW5jdGlvblxuXG5cbiAgICBvbGRba10gPSBlbFtrXTsgLy8gY2FsbCB0aGUgb2xkIGZ1bmN0aW9uIHdpdGggYSBzb3VyY2VzZXQgaWYgYSBzb3VyY2VcbiAgICAvLyB3YXMgbG9hZGVkXG5cbiAgICBlbFtrXSA9IGFwcGVuZFdyYXBwZXIob2xkW2tdKTtcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ2lubmVySFRNTCcsIG1lcmdlT3B0aW9ucyhpbm5lckRlc2NyaXB0b3IsIHtcbiAgICBzZXQ6IGFwcGVuZFdyYXBwZXIoaW5uZXJEZXNjcmlwdG9yLnNldClcbiAgfSkpO1xuXG4gIGVsLnJlc2V0U291cmNlV2F0Y2hfID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlc2V0U291cmNlV2F0Y2hfID0gbnVsbDtcbiAgICBPYmplY3Qua2V5cyhvbGQpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGVsW2tdID0gb2xkW2tdO1xuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ2lubmVySFRNTCcsIGlubmVyRGVzY3JpcHRvcik7XG4gIH07IC8vIG9uIHRoZSBmaXJzdCBzb3VyY2VzZXQsIHdlIG5lZWQgdG8gcmV2ZXJ0IG91ciBjaGFuZ2VzXG5cblxuICB0ZWNoLm9uZSgnc291cmNlc2V0JywgZWwucmVzZXRTb3VyY2VXYXRjaF8pO1xufTtcbi8qKlxuICogb3VyIGltcGxlbWVudGF0aW9uIG9mIGEgYHNyY2AgZGVzY3JpcHRvciBmb3IgYnJvd3NlcnNcbiAqIHRoYXQgZG8gbm90IGhhdmUgb25lLlxuICovXG5cblxudmFyIHNyY0Rlc2NyaXB0b3JQb2x5ZmlsbCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3NyYycsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKCdzcmMnKSkge1xuICAgICAgcmV0dXJuIGdldEFic29sdXRlVVJMKHdpbmRvdyQxLkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZS5jYWxsKHRoaXMsICdzcmMnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7XG4gICAgd2luZG93JDEuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLmNhbGwodGhpcywgJ3NyYycsIHYpO1xuICAgIHJldHVybiB2O1xuICB9XG59KTtcblxudmFyIGdldFNyY0Rlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRTcmNEZXNjcmlwdG9yKHRlY2gpIHtcbiAgcmV0dXJuIGdldERlc2NyaXB0b3IoW3RlY2guZWwoKSwgd2luZG93JDEuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsIHNyY0Rlc2NyaXB0b3JQb2x5ZmlsbF0sICdzcmMnKTtcbn07XG4vKipcbiAqIHNldHVwIGBzb3VyY2VzZXRgIGhhbmRsaW5nIG9uIHRoZSBgSHRtbDVgIHRlY2guIFRoaXMgZnVuY3Rpb25cbiAqIHBhdGNoZXMgdGhlIGZvbGxvd2luZyBlbGVtZW50IHByb3BlcnRpZXMvZnVuY3Rpb25zOlxuICpcbiAqIC0gYHNyY2AgLSB0byBkZXRlcm1pbmUgd2hlbiBgc3JjYCBpcyBzZXRcbiAqIC0gYHNldEF0dHJpYnV0ZSgpYCAtIHRvIGRldGVybWluZSB3aGVuIGBzcmNgIGlzIHNldFxuICogLSBgbG9hZCgpYCAtIHRoaXMgcmUtdHJpZ2dlcnMgdGhlIHNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtLCBhbmQgY2FuXG4gKiAgICAgICAgICAgICAgY2F1c2UgYSBzb3VyY2VzZXQuXG4gKlxuICogSWYgdGhlcmUgaXMgbm8gc291cmNlIHdoZW4gd2UgYXJlIGFkZGluZyBgc291cmNlc2V0YCBzdXBwb3J0IG9yIGR1cmluZyBhIGBsb2FkKClgXG4gKiB3ZSBhbHNvIHBhdGNoIHRoZSBmdW5jdGlvbnMgbGlzdGVkIGluIGBmaXJzdFNvdXJjZVdhdGNoYC5cbiAqXG4gKiBAcGFyYW0ge0h0bWw1fSB0ZWNoXG4gKiAgICAgICAgVGhlIHRlY2ggdG8gcGF0Y2hcbiAqL1xuXG5cbnZhciBzZXR1cFNvdXJjZXNldCA9IGZ1bmN0aW9uIHNldHVwU291cmNlc2V0KHRlY2gpIHtcbiAgaWYgKCF0ZWNoLmZlYXR1cmVzU291cmNlc2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVsID0gdGVjaC5lbCgpOyAvLyBtYWtlIHN1cmUgc291cmNlc2V0IGlzbid0IHNldHVwIHR3aWNlLlxuXG4gIGlmIChlbC5yZXNldFNvdXJjZXNldF8pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc3JjRGVzY3JpcHRvciA9IGdldFNyY0Rlc2NyaXB0b3IodGVjaCk7XG4gIHZhciBvbGRTZXRBdHRyaWJ1dGUgPSBlbC5zZXRBdHRyaWJ1dGU7XG4gIHZhciBvbGRMb2FkID0gZWwubG9hZDtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnc3JjJywgbWVyZ2VPcHRpb25zKHNyY0Rlc2NyaXB0b3IsIHtcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7XG4gICAgICB2YXIgcmV0dmFsID0gc3JjRGVzY3JpcHRvci5zZXQuY2FsbChlbCwgdik7IC8vIHdlIHVzZSB0aGUgZ2V0dGVyIGhlcmUgdG8gZ2V0IHRoZSBhY3R1YWwgdmFsdWUgc2V0IG9uIHNyY1xuXG4gICAgICB0ZWNoLnRyaWdnZXJTb3VyY2VzZXQoZWwuc3JjKTtcbiAgICAgIHJldHVybiByZXR2YWw7XG4gICAgfVxuICB9KSk7XG5cbiAgZWwuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKG4sIHYpIHtcbiAgICB2YXIgcmV0dmFsID0gb2xkU2V0QXR0cmlidXRlLmNhbGwoZWwsIG4sIHYpO1xuXG4gICAgaWYgKC9zcmMvaS50ZXN0KG4pKSB7XG4gICAgICB0ZWNoLnRyaWdnZXJTb3VyY2VzZXQoZWwuc3JjKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dmFsO1xuICB9O1xuXG4gIGVsLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldHZhbCA9IG9sZExvYWQuY2FsbChlbCk7IC8vIGlmIGxvYWQgd2FzIGNhbGxlZCwgYnV0IHRoZXJlIHdhcyBubyBzb3VyY2UgdG8gZmlyZVxuICAgIC8vIHNvdXJjZXNldCBvbi4gV2UgaGF2ZSB0byB3YXRjaCBmb3IgYSBzb3VyY2UgYXBwZW5kXG4gICAgLy8gYXMgdGhhdCBjYW4gdHJpZ2dlciBhIGBzb3VyY2VzZXRgIHdoZW4gdGhlIG1lZGlhIGVsZW1lbnRcbiAgICAvLyBoYXMgbm8gc291cmNlXG5cbiAgICBpZiAoIXNvdXJjZXNldExvYWQodGVjaCkpIHtcbiAgICAgIHRlY2gudHJpZ2dlclNvdXJjZXNldCgnJyk7XG4gICAgICBmaXJzdFNvdXJjZVdhdGNoKHRlY2gpO1xuICAgIH1cblxuICAgIHJldHVybiByZXR2YWw7XG4gIH07XG5cbiAgaWYgKGVsLmN1cnJlbnRTcmMpIHtcbiAgICB0ZWNoLnRyaWdnZXJTb3VyY2VzZXQoZWwuY3VycmVudFNyYyk7XG4gIH0gZWxzZSBpZiAoIXNvdXJjZXNldExvYWQodGVjaCkpIHtcbiAgICBmaXJzdFNvdXJjZVdhdGNoKHRlY2gpO1xuICB9XG5cbiAgZWwucmVzZXRTb3VyY2VzZXRfID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlc2V0U291cmNlc2V0XyA9IG51bGw7XG4gICAgZWwubG9hZCA9IG9sZExvYWQ7XG4gICAgZWwuc2V0QXR0cmlidXRlID0gb2xkU2V0QXR0cmlidXRlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ3NyYycsIHNyY0Rlc2NyaXB0b3IpO1xuXG4gICAgaWYgKGVsLnJlc2V0U291cmNlV2F0Y2hfKSB7XG4gICAgICBlbC5yZXNldFNvdXJjZVdhdGNoXygpO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogSFRNTDUgTWVkaWEgQ29udHJvbGxlciAtIFdyYXBwZXIgZm9yIEhUTUw1IE1lZGlhIEFQSVxuICpcbiAqIEBtaXhlcyBUZWNoflNvdXJjZUhhbmRsZXJBZGRpdGlvbnNcbiAqIEBleHRlbmRzIFRlY2hcbiAqL1xuXG52YXIgSHRtbDUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZWNoKSB7XG4gIF9pbmhlcml0c0xvb3NlKEh0bWw1LCBfVGVjaCk7XG5cbiAgLyoqXG4gICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgVGVjaC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgKlxuICAqIEBwYXJhbSB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IHJlYWR5XG4gICogICAgICAgIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgYEhUTUw1YCBUZWNoIGlzIHJlYWR5LlxuICAqL1xuICBmdW5jdGlvbiBIdG1sNShvcHRpb25zLCByZWFkeSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1RlY2guY2FsbCh0aGlzLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpcztcbiAgICB2YXIgc291cmNlID0gb3B0aW9ucy5zb3VyY2U7XG4gICAgdmFyIGNyb3Nzb3JpZ2luVHJhY2tzID0gZmFsc2U7IC8vIFNldCB0aGUgc291cmNlIGlmIG9uZSBpcyBwcm92aWRlZFxuICAgIC8vIDEpIENoZWNrIGlmIHRoZSBzb3VyY2UgaXMgbmV3IChpZiBub3QsIHdlIHdhbnQgdG8ga2VlcCB0aGUgb3JpZ2luYWwgc28gcGxheWJhY2sgaXNuJ3QgaW50ZXJydXB0ZWQpXG4gICAgLy8gMikgQ2hlY2sgdG8gc2VlIGlmIHRoZSBuZXR3b3JrIHN0YXRlIG9mIHRoZSB0YWcgd2FzIGZhaWxlZCBhdCBpbml0LCBhbmQgaWYgc28sIHJlc2V0IHRoZSBzb3VyY2VcbiAgICAvLyBhbnl3YXkgc28gdGhlIGVycm9yIGdldHMgZmlyZWQuXG5cbiAgICBpZiAoc291cmNlICYmIChfdGhpcy5lbF8uY3VycmVudFNyYyAhPT0gc291cmNlLnNyYyB8fCBvcHRpb25zLnRhZyAmJiBvcHRpb25zLnRhZy5pbml0TmV0d29ya1N0YXRlXyA9PT0gMykpIHtcbiAgICAgIF90aGlzLnNldFNvdXJjZShzb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5oYW5kbGVMYXRlSW5pdF8oX3RoaXMuZWxfKTtcbiAgICB9IC8vIHNldHVwIHNvdXJjZXNldCBhZnRlciBsYXRlIHNvdXJjZXNldC9pbml0XG5cblxuICAgIGlmIChvcHRpb25zLmVuYWJsZVNvdXJjZXNldCkge1xuICAgICAgX3RoaXMuc2V0dXBTb3VyY2VzZXRIYW5kbGluZ18oKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuZWxfLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdmFyIG5vZGVzID0gX3RoaXMuZWxfLmNoaWxkTm9kZXM7XG4gICAgICB2YXIgbm9kZXNMZW5ndGggPSBub2Rlcy5sZW5ndGg7XG4gICAgICB2YXIgcmVtb3ZlTm9kZXMgPSBbXTtcblxuICAgICAgd2hpbGUgKG5vZGVzTGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tub2Rlc0xlbmd0aF07XG4gICAgICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAobm9kZU5hbWUgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgICAgICAgLy8gRW1wdHkgdmlkZW8gdGFnIHRyYWNrcyBzbyB0aGUgYnVpbHQtaW4gcGxheWVyIGRvZXNuJ3QgdXNlIHRoZW0gYWxzby5cbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IG5vdCBiZSBmYXN0IGVub3VnaCB0byBzdG9wIEhUTUw1IGJyb3dzZXJzIGZyb20gcmVhZGluZyB0aGUgdGFnc1xuICAgICAgICAgICAgLy8gc28gd2UnbGwgbmVlZCB0byB0dXJuIG9mZiBhbnkgZGVmYXVsdCB0cmFja3MgaWYgd2UncmUgbWFudWFsbHkgZG9pbmdcbiAgICAgICAgICAgIC8vIGNhcHRpb25zIGFuZCBzdWJ0aXRsZXMuIHZpZGVvRWxlbWVudC50ZXh0VHJhY2tzXG4gICAgICAgICAgICByZW1vdmVOb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzdG9yZSBIVE1MVHJhY2tFbGVtZW50IGFuZCBUZXh0VHJhY2sgdG8gcmVtb3RlIGxpc3RcbiAgICAgICAgICAgIF90aGlzLnJlbW90ZVRleHRUcmFja0VscygpLmFkZFRyYWNrRWxlbWVudF8obm9kZSk7XG5cbiAgICAgICAgICAgIF90aGlzLnJlbW90ZVRleHRUcmFja3MoKS5hZGRUcmFjayhub2RlLnRyYWNrKTtcblxuICAgICAgICAgICAgX3RoaXMudGV4dFRyYWNrcygpLmFkZFRyYWNrKG5vZGUudHJhY2spO1xuXG4gICAgICAgICAgICBpZiAoIWNyb3Nzb3JpZ2luVHJhY2tzICYmICFfdGhpcy5lbF8uaGFzQXR0cmlidXRlKCdjcm9zc29yaWdpbicpICYmIGlzQ3Jvc3NPcmlnaW4obm9kZS5zcmMpKSB7XG4gICAgICAgICAgICAgIGNyb3Nzb3JpZ2luVHJhY2tzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdmVOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBfdGhpcy5lbF8ucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnByb3h5TmF0aXZlVHJhY2tzXygpO1xuXG4gICAgaWYgKF90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyAmJiBjcm9zc29yaWdpblRyYWNrcykge1xuICAgICAgbG9nLndhcm4oJ1RleHQgVHJhY2tzIGFyZSBiZWluZyBsb2FkZWQgZnJvbSBhbm90aGVyIG9yaWdpbiBidXQgdGhlIGNyb3Nzb3JpZ2luIGF0dHJpYnV0ZSBpc25cXCd0IHVzZWQuXFxuJyArICdUaGlzIG1heSBwcmV2ZW50IHRleHQgdHJhY2tzIGZyb20gbG9hZGluZy4nKTtcbiAgICB9IC8vIHByZXZlbnQgaU9TIFNhZmFyaSBmcm9tIGRpc2FibGluZyBtZXRhZGF0YSB0ZXh0IHRyYWNrcyBkdXJpbmcgbmF0aXZlIHBsYXliYWNrXG5cblxuICAgIF90aGlzLnJlc3RvcmVNZXRhZGF0YVRyYWNrc0luSU9TTmF0aXZlUGxheWVyXygpOyAvLyBEZXRlcm1pbmUgaWYgbmF0aXZlIGNvbnRyb2xzIHNob3VsZCBiZSB1c2VkXG4gICAgLy8gT3VyIGdvYWwgc2hvdWxkIGJlIHRvIGdldCB0aGUgY3VzdG9tIGNvbnRyb2xzIG9uIG1vYmlsZSBzb2xpZCBldmVyeXdoZXJlXG4gICAgLy8gc28gd2UgY2FuIHJlbW92ZSB0aGlzIGFsbCB0b2dldGhlci4gUmlnaHQgbm93IHRoaXMgd2lsbCBibG9jayBjdXN0b21cbiAgICAvLyBjb250cm9scyBvbiB0b3VjaCBlbmFibGVkIGxhcHRvcHMgbGlrZSB0aGUgQ2hyb21lIFBpeGVsXG5cblxuICAgIGlmICgoVE9VQ0hfRU5BQkxFRCB8fCBJU19JUEhPTkUgfHwgSVNfTkFUSVZFX0FORFJPSUQpICYmIG9wdGlvbnMubmF0aXZlQ29udHJvbHNGb3JUb3VjaCA9PT0gdHJ1ZSkge1xuICAgICAgX3RoaXMuc2V0Q29udHJvbHModHJ1ZSk7XG4gICAgfSAvLyBvbiBpT1MsIHdlIHdhbnQgdG8gcHJveHkgYHdlYmtpdGJlZ2luZnVsbHNjcmVlbmAgYW5kIGB3ZWJraXRlbmRmdWxsc2NyZWVuYFxuICAgIC8vIGludG8gYSBgZnVsbHNjcmVlbmNoYW5nZWAgZXZlbnRcblxuXG4gICAgX3RoaXMucHJveHlXZWJraXRGdWxsc2NyZWVuXygpO1xuXG4gICAgX3RoaXMudHJpZ2dlclJlYWR5KCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgYEhUTUw1YCBtZWRpYSBlbGVtZW50IGFuZCByZW1vdmUgYWxsIHRyYWNrcy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSHRtbDUucHJvdG90eXBlO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5lbF8gJiYgdGhpcy5lbF8ucmVzZXRTb3VyY2VzZXRfKSB7XG4gICAgICB0aGlzLmVsXy5yZXNldFNvdXJjZXNldF8oKTtcbiAgICB9XG5cbiAgICBIdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50KHRoaXMuZWxfKTtcbiAgICB0aGlzLm9wdGlvbnNfID0gbnVsbDsgLy8gdGVjaCB3aWxsIGhhbmRsZSBjbGVhcmluZyBvZiB0aGUgZW11bGF0ZWQgdHJhY2sgbGlzdFxuXG4gICAgX1RlY2gucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBtZWRpYSBlbGVtZW50IHNvIHRoYXQgd2UgY2FuIGRldGVjdCB3aGVuXG4gICAqIHRoZSBzb3VyY2UgaXMgY2hhbmdlZC4gRmlyZXMgYHNvdXJjZXNldGAganVzdCBhZnRlciB0aGUgc291cmNlIGhhcyBjaGFuZ2VkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldHVwU291cmNlc2V0SGFuZGxpbmdfID0gZnVuY3Rpb24gc2V0dXBTb3VyY2VzZXRIYW5kbGluZ18oKSB7XG4gICAgc2V0dXBTb3VyY2VzZXQodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gYSBjYXB0aW9ucyB0cmFjayBpcyBlbmFibGVkIGluIHRoZSBpT1MgU2FmYXJpIG5hdGl2ZSBwbGF5ZXIsIGFsbCBvdGhlclxuICAgKiB0cmFja3MgYXJlIGRpc2FibGVkIChpbmNsdWRpbmcgbWV0YWRhdGEgdHJhY2tzKSwgd2hpY2ggbnVsbHMgYWxsIG9mIHRoZWlyXG4gICAqIGFzc29jaWF0ZWQgY3VlIHBvaW50cy4gVGhpcyB3aWxsIHJlc3RvcmUgbWV0YWRhdGEgdHJhY2tzIHRvIHRoZWlyIHByZS1mdWxsc2NyZWVuXG4gICAqIHN0YXRlIGluIHRob3NlIGNhc2VzIHNvIHRoYXQgY3VlIHBvaW50cyBhcmUgbm90IG5lZWRsZXNzbHkgbG9zdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfID0gZnVuY3Rpb24gcmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfKCkge1xuICAgIHZhciB0ZXh0VHJhY2tzID0gdGhpcy50ZXh0VHJhY2tzKCk7XG4gICAgdmFyIG1ldGFkYXRhVHJhY2tzUHJlRnVsbHNjcmVlblN0YXRlOyAvLyBjYXB0dXJlcyBhIHNuYXBzaG90IG9mIGV2ZXJ5IG1ldGFkYXRhIHRyYWNrJ3MgY3VycmVudCBzdGF0ZVxuXG4gICAgdmFyIHRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QgPSBmdW5jdGlvbiB0YWtlTWV0YWRhdGFUcmFja1NuYXBzaG90KCkge1xuICAgICAgbWV0YWRhdGFUcmFja3NQcmVGdWxsc2NyZWVuU3RhdGUgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0VHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0cmFjayA9IHRleHRUcmFja3NbaV07XG5cbiAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdtZXRhZGF0YScpIHtcbiAgICAgICAgICBtZXRhZGF0YVRyYWNrc1ByZUZ1bGxzY3JlZW5TdGF0ZS5wdXNoKHtcbiAgICAgICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgICAgIHN0b3JlZE1vZGU6IHRyYWNrLm1vZGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07IC8vIHNuYXBzaG90IGVhY2ggbWV0YWRhdGEgdHJhY2sncyBpbml0aWFsIHN0YXRlLCBhbmQgdXBkYXRlIHRoZSBzbmFwc2hvdFxuICAgIC8vIGVhY2ggdGltZSB0aGVyZSBpcyBhIHRyYWNrICdjaGFuZ2UnIGV2ZW50XG5cblxuICAgIHRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QoKTtcbiAgICB0ZXh0VHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QpO1xuICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0YWtlTWV0YWRhdGFUcmFja1NuYXBzaG90KTtcbiAgICB9KTtcblxuICAgIHZhciByZXN0b3JlVHJhY2tNb2RlID0gZnVuY3Rpb24gcmVzdG9yZVRyYWNrTW9kZSgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YWRhdGFUcmFja3NQcmVGdWxsc2NyZWVuU3RhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0b3JlZFRyYWNrID0gbWV0YWRhdGFUcmFja3NQcmVGdWxsc2NyZWVuU3RhdGVbaV07XG5cbiAgICAgICAgaWYgKHN0b3JlZFRyYWNrLnRyYWNrLm1vZGUgPT09ICdkaXNhYmxlZCcgJiYgc3RvcmVkVHJhY2sudHJhY2subW9kZSAhPT0gc3RvcmVkVHJhY2suc3RvcmVkTW9kZSkge1xuICAgICAgICAgIHN0b3JlZFRyYWNrLnRyYWNrLm1vZGUgPSBzdG9yZWRUcmFjay5zdG9yZWRNb2RlO1xuICAgICAgICB9XG4gICAgICB9IC8vIHdlIG9ubHkgd2FudCB0aGlzIGhhbmRsZXIgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIGZpcnN0ICdjaGFuZ2UnIGV2ZW50XG5cblxuICAgICAgdGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCByZXN0b3JlVHJhY2tNb2RlKTtcbiAgICB9OyAvLyB3aGVuIHdlIGVudGVyIGZ1bGxzY3JlZW4gcGxheWJhY2ssIHN0b3AgdXBkYXRpbmcgdGhlIHNuYXBzaG90IGFuZFxuICAgIC8vIHJlc3RvcmUgYWxsIHRyYWNrIG1vZGVzIHRvIHRoZWlyIHByZS1mdWxsc2NyZWVuIHN0YXRlXG5cblxuICAgIHRoaXMub24oJ3dlYmtpdGJlZ2luZnVsbHNjcmVlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRleHRUcmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGFrZU1ldGFkYXRhVHJhY2tTbmFwc2hvdCk7IC8vIHJlbW92ZSB0aGUgbGlzdGVuZXIgYmVmb3JlIGFkZGluZyBpdCBqdXN0IGluIGNhc2UgaXQgd2Fzbid0IHByZXZpb3VzbHkgcmVtb3ZlZFxuXG4gICAgICB0ZXh0VHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHJlc3RvcmVUcmFja01vZGUpO1xuICAgICAgdGV4dFRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCByZXN0b3JlVHJhY2tNb2RlKTtcbiAgICB9KTsgLy8gc3RhcnQgdXBkYXRpbmcgdGhlIHNuYXBzaG90IGFnYWluIGFmdGVyIGxlYXZpbmcgZnVsbHNjcmVlblxuXG4gICAgdGhpcy5vbignd2Via2l0ZW5kZnVsbHNjcmVlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHJlbW92ZSB0aGUgbGlzdGVuZXIgYmVmb3JlIGFkZGluZyBpdCBqdXN0IGluIGNhc2UgaXQgd2Fzbid0IHByZXZpb3VzbHkgcmVtb3ZlZFxuICAgICAgdGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0YWtlTWV0YWRhdGFUcmFja1NuYXBzaG90KTtcbiAgICAgIHRleHRUcmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGFrZU1ldGFkYXRhVHJhY2tTbmFwc2hvdCk7IC8vIHJlbW92ZSB0aGUgcmVzdG9yZVRyYWNrTW9kZSBoYW5kbGVyIGluIGNhc2UgaXQgd2Fzbid0IHRyaWdnZXJlZCBkdXJpbmcgZnVsbHNjcmVlbiBwbGF5YmFja1xuXG4gICAgICB0ZXh0VHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHJlc3RvcmVUcmFja01vZGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGZvcmNlIG92ZXJyaWRlIG9mIHRyYWNrcyBmb3IgdGhlIGdpdmVuIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUcmFjayB0eXBlIHRvIG92ZXJyaWRlLCBwb3NzaWJsZSB2YWx1ZXMgaW5jbHVkZSAnQXVkaW8nLFxuICAgKiAnVmlkZW8nLCBhbmQgJ1RleHQnLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIC0gSWYgc2V0IHRvIHRydWUgbmF0aXZlIGF1ZGlvL3ZpZGVvIHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICogb3RoZXJ3aXNlIG5hdGl2ZSBhdWRpby92aWRlbyB3aWxsIHBvdGVudGlhbGx5IGJlIHVzZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm92ZXJyaWRlTmF0aXZlXyA9IGZ1bmN0aW9uIG92ZXJyaWRlTmF0aXZlXyh0eXBlLCBvdmVycmlkZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gYmVoYXZpb3JhbCBjaGFuZ2UgZG9uJ3QgYWRkL3JlbW92ZSBsaXN0ZW5lcnNcbiAgICBpZiAob3ZlcnJpZGUgIT09IHRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiICsgdHlwZSArIFwiVHJhY2tzXCJdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxvd2VyQ2FzZVR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAodGhpc1tsb3dlckNhc2VUeXBlICsgXCJUcmFja3NMaXN0ZW5lcnNfXCJdKSB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzW2xvd2VyQ2FzZVR5cGUgKyBcIlRyYWNrc0xpc3RlbmVyc19cIl0pLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICB2YXIgZWxUcmFja3MgPSBfdGhpczIuZWwoKVtsb3dlckNhc2VUeXBlICsgXCJUcmFja3NcIl07XG5cbiAgICAgICAgZWxUcmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIF90aGlzMltsb3dlckNhc2VUeXBlICsgXCJUcmFja3NMaXN0ZW5lcnNfXCJdW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpc1tcImZlYXR1cmVzTmF0aXZlXCIgKyB0eXBlICsgXCJUcmFja3NcIl0gPSAhb3ZlcnJpZGU7XG4gICAgdGhpc1tsb3dlckNhc2VUeXBlICsgXCJUcmFja3NMaXN0ZW5lcnNfXCJdID0gbnVsbDtcbiAgICB0aGlzLnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8obG93ZXJDYXNlVHlwZSk7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gZm9yY2Ugb3ZlcnJpZGUgb2YgbmF0aXZlIGF1ZGlvIHRyYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvdmVycmlkZSAtIElmIHNldCB0byB0cnVlIG5hdGl2ZSBhdWRpbyB3aWxsIGJlIG92ZXJyaWRkZW4sXG4gICAqIG90aGVyd2lzZSBuYXRpdmUgYXVkaW8gd2lsbCBwb3RlbnRpYWxseSBiZSB1c2VkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vdmVycmlkZU5hdGl2ZUF1ZGlvVHJhY2tzID0gZnVuY3Rpb24gb3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcyhvdmVycmlkZSkge1xuICAgIHRoaXMub3ZlcnJpZGVOYXRpdmVfKCdBdWRpbycsIG92ZXJyaWRlKTtcbiAgfVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBmb3JjZSBvdmVycmlkZSBvZiBuYXRpdmUgdmlkZW8gdHJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIC0gSWYgc2V0IHRvIHRydWUgbmF0aXZlIHZpZGVvIHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICogb3RoZXJ3aXNlIG5hdGl2ZSB2aWRlbyB3aWxsIHBvdGVudGlhbGx5IGJlIHVzZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3MgPSBmdW5jdGlvbiBvdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzKG92ZXJyaWRlKSB7XG4gICAgdGhpcy5vdmVycmlkZU5hdGl2ZV8oJ1ZpZGVvJywgb3ZlcnJpZGUpO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSBuYXRpdmUgdHJhY2sgbGlzdCBldmVudHMgZm9yIHRoZSBnaXZlbiB0eXBlIHRvIG91ciB0cmFja1xuICAgKiBsaXN0cyBpZiB0aGUgYnJvd3NlciB3ZSBhcmUgcGxheWluZyBpbiBzdXBwb3J0cyB0aGF0IHR5cGUgb2YgdHJhY2sgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUcmFjayB0eXBlOyB2YWx1ZXMgaW5jbHVkZSAnYXVkaW8nLCAndmlkZW8nLCBhbmQgJ3RleHQnXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8gPSBmdW5jdGlvbiBwcm94eU5hdGl2ZVRyYWNrc0ZvclR5cGVfKG5hbWUpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBwcm9wcyA9IE5PUk1BTFtuYW1lXTtcbiAgICB2YXIgZWxUcmFja3MgPSB0aGlzLmVsKClbcHJvcHMuZ2V0dGVyTmFtZV07XG4gICAgdmFyIHRlY2hUcmFja3MgPSB0aGlzW3Byb3BzLmdldHRlck5hbWVdKCk7XG5cbiAgICBpZiAoIXRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiICsgcHJvcHMuY2FwaXRhbE5hbWUgKyBcIlRyYWNrc1wiXSB8fCAhZWxUcmFja3MgfHwgIWVsVHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0ge1xuICAgICAgY2hhbmdlOiBmdW5jdGlvbiBjaGFuZ2UoZSkge1xuICAgICAgICB0ZWNoVHJhY2tzLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICdjaGFuZ2UnLFxuICAgICAgICAgIHRhcmdldDogdGVjaFRyYWNrcyxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0OiB0ZWNoVHJhY2tzLFxuICAgICAgICAgIHNyY0VsZW1lbnQ6IHRlY2hUcmFja3NcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWRkdHJhY2s6IGZ1bmN0aW9uIGFkZHRyYWNrKGUpIHtcbiAgICAgICAgdGVjaFRyYWNrcy5hZGRUcmFjayhlLnRyYWNrKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmV0cmFjazogZnVuY3Rpb24gcmVtb3ZldHJhY2soZSkge1xuICAgICAgICB0ZWNoVHJhY2tzLnJlbW92ZVRyYWNrKGUudHJhY2spO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVtb3ZlT2xkVHJhY2tzID0gZnVuY3Rpb24gcmVtb3ZlT2xkVHJhY2tzKCkge1xuICAgICAgdmFyIHJlbW92ZVRyYWNrcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlY2hUcmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbFRyYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmIChlbFRyYWNrc1tqXSA9PT0gdGVjaFRyYWNrc1tpXSkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgIHJlbW92ZVRyYWNrcy5wdXNoKHRlY2hUcmFja3NbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChyZW1vdmVUcmFja3MubGVuZ3RoKSB7XG4gICAgICAgIHRlY2hUcmFja3MucmVtb3ZlVHJhY2socmVtb3ZlVHJhY2tzLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzW3Byb3BzLmdldHRlck5hbWUgKyAnTGlzdGVuZXJzXyddID0gbGlzdGVuZXJzO1xuICAgIE9iamVjdC5rZXlzKGxpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICAgIGVsVHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG5cbiAgICAgIF90aGlzMy5vbignZGlzcG9zZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlbFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgICAgfSk7XG4gICAgfSk7IC8vIFJlbW92ZSAobmF0aXZlKSB0cmFja3MgdGhhdCBhcmUgbm90IHVzZWQgYW55bW9yZVxuXG4gICAgdGhpcy5vbignbG9hZHN0YXJ0JywgcmVtb3ZlT2xkVHJhY2tzKTtcbiAgICB0aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfdGhpczMub2ZmKCdsb2Fkc3RhcnQnLCByZW1vdmVPbGRUcmFja3MpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSBhbGwgbmF0aXZlIHRyYWNrIGxpc3QgZXZlbnRzIHRvIG91ciB0cmFjayBsaXN0cyBpZiB0aGUgYnJvd3NlciB3ZSBhcmUgcGxheWluZ1xuICAgKiBpbiBzdXBwb3J0cyB0aGF0IHR5cGUgb2YgdHJhY2sgbGlzdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJveHlOYXRpdmVUcmFja3NfID0gZnVuY3Rpb24gcHJveHlOYXRpdmVUcmFja3NfKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgTk9STUFMLm5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzNC5wcm94eU5hdGl2ZVRyYWNrc0ZvclR5cGVfKG5hbWUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBIdG1sNWAgVGVjaCdzIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHZhciBlbCA9IHRoaXMub3B0aW9uc18udGFnOyAvLyBDaGVjayBpZiB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgbW92aW5nIHRoZSBlbGVtZW50IGludG8gdGhlIGJveC5cbiAgICAvLyBPbiB0aGUgaVBob25lIHZpZGVvIHdpbGwgYnJlYWsgaWYgeW91IG1vdmUgdGhlIGVsZW1lbnQsXG4gICAgLy8gU28gd2UgaGF2ZSB0byBjcmVhdGUgYSBicmFuZCBuZXcgZWxlbWVudC5cbiAgICAvLyBJZiB3ZSBpbmdlc3RlZCB0aGUgcGxheWVyIGRpdiwgd2UgZG8gbm90IG5lZWQgdG8gbW92ZSB0aGUgbWVkaWEgZWxlbWVudC5cblxuICAgIGlmICghZWwgfHwgISh0aGlzLm9wdGlvbnNfLnBsYXllckVsSW5nZXN0IHx8IHRoaXMubW92aW5nTWVkaWFFbGVtZW50SW5ET00pKSB7XG4gICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgdGFnIGlzIHN0aWxsIHRoZXJlLCBjbG9uZSBhbmQgcmVtb3ZlIGl0LlxuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNsb25lLCBlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBIdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50KGVsKTtcbiAgICAgICAgZWwgPSBjbG9uZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTsgLy8gZGV0ZXJtaW5lIGlmIG5hdGl2ZSBjb250cm9scyBzaG91bGQgYmUgdXNlZFxuXG4gICAgICAgIHZhciB0YWdBdHRyaWJ1dGVzID0gdGhpcy5vcHRpb25zXy50YWcgJiYgZ2V0QXR0cmlidXRlcyh0aGlzLm9wdGlvbnNfLnRhZyk7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gbWVyZ2VPcHRpb25zKHt9LCB0YWdBdHRyaWJ1dGVzKTtcblxuICAgICAgICBpZiAoIVRPVUNIX0VOQUJMRUQgfHwgdGhpcy5vcHRpb25zXy5uYXRpdmVDb250cm9sc0ZvclRvdWNoICE9PSB0cnVlKSB7XG4gICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXMuY29udHJvbHM7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRBdHRyaWJ1dGVzKGVsLCBhc3NpZ24oYXR0cmlidXRlcywge1xuICAgICAgICAgIGlkOiB0aGlzLm9wdGlvbnNfLnRlY2hJZCxcbiAgICAgICAgICBcImNsYXNzXCI6ICd2anMtdGVjaCdcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBlbC5wbGF5ZXJJZCA9IHRoaXMub3B0aW9uc18ucGxheWVySWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnNfLnByZWxvYWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUoZWwsICdwcmVsb2FkJywgdGhpcy5vcHRpb25zXy5wcmVsb2FkKTtcbiAgICB9IC8vIFVwZGF0ZSBzcGVjaWZpYyB0YWcgc2V0dGluZ3MsIGluIGNhc2UgdGhleSB3ZXJlIG92ZXJyaWRkZW5cbiAgICAvLyBgYXV0b3BsYXlgIGhhcyB0byBiZSAqbGFzdCogc28gdGhhdCBgbXV0ZWRgIGFuZCBgcGxheXNpbmxpbmVgIGFyZSBwcmVzZW50XG4gICAgLy8gd2hlbiBpT1MvU2FmYXJpIG9yIG90aGVyIGJyb3dzZXJzIGF0dGVtcHQgdG8gYXV0b3BsYXkuXG5cblxuICAgIHZhciBzZXR0aW5nc0F0dHJzID0gWydsb29wJywgJ211dGVkJywgJ3BsYXlzaW5saW5lJywgJ2F1dG9wbGF5J107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzQXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBhdHRyID0gc2V0dGluZ3NBdHRyc1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMub3B0aW9uc19bYXR0cl07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHNldEF0dHJpYnV0ZShlbCwgYXR0ciwgYXR0cik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlQXR0cmlidXRlKGVsLCBhdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsW2F0dHJdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgYmUgdHJpZ2dlcmVkIGlmIHRoZSBsb2Fkc3RhcnQgZXZlbnQgaGFzIGFscmVhZHkgZmlyZWQsIGJlZm9yZSB2aWRlb2pzIHdhc1xuICAgKiByZWFkeS4gVHdvIGtub3duIGV4YW1wbGVzIG9mIHdoZW4gdGhpcyBjYW4gaGFwcGVuIGFyZTpcbiAgICogMS4gSWYgd2UncmUgbG9hZGluZyB0aGUgcGxheWJhY2sgb2JqZWN0IGFmdGVyIGl0IGhhcyBzdGFydGVkIGxvYWRpbmdcbiAgICogMi4gVGhlIG1lZGlhIGlzIGFscmVhZHkgcGxheWluZyB0aGUgKG9mdGVuIHdpdGggYXV0b3BsYXkgb24pIHRoZW5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGZpcmUgYW5vdGhlciBsb2Fkc3RhcnQgc28gdGhhdCB2aWRlb2pzIGNhbiBjYXRjaHVwLlxuICAgKlxuICAgKiBAZmlyZXMgVGVjaCNsb2Fkc3RhcnRcbiAgICpcbiAgICogQHJldHVybiB7dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIHJldHVybnMgbm90aGluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTGF0ZUluaXRfID0gZnVuY3Rpb24gaGFuZGxlTGF0ZUluaXRfKGVsKSB7XG4gICAgaWYgKGVsLm5ldHdvcmtTdGF0ZSA9PT0gMCB8fCBlbC5uZXR3b3JrU3RhdGUgPT09IDMpIHtcbiAgICAgIC8vIFRoZSB2aWRlbyBlbGVtZW50IGhhc24ndCBzdGFydGVkIGxvYWRpbmcgdGhlIHNvdXJjZSB5ZXRcbiAgICAgIC8vIG9yIGRpZG4ndCBmaW5kIGEgc291cmNlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsLnJlYWR5U3RhdGUgPT09IDApIHtcbiAgICAgIC8vIE5ldHdvcmtTdGF0ZSBpcyBzZXQgc3luY2hyb25vdXNseSBCVVQgbG9hZHN0YXJ0IGlzIGZpcmVkIGF0IHRoZVxuICAgICAgLy8gZW5kIG9mIHRoZSBjdXJyZW50IHN0YWNrLCB1c3VhbGx5IGJlZm9yZSBzZXRJbnRlcnZhbChmbiwgMCkuXG4gICAgICAvLyBTbyBhdCB0aGlzIHBvaW50IHdlIGtub3cgbG9hZHN0YXJ0IG1heSBoYXZlIGFscmVhZHkgZmlyZWQgb3IgaXNcbiAgICAgIC8vIGFib3V0IHRvIGZpcmUsIGFuZCBlaXRoZXIgd2F5IHRoZSBwbGF5ZXIgaGFzbid0IHNlZW4gaXQgeWV0LlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBmaXJlIGxvYWRzdGFydCBwcmVtYXR1cmVseSBoZXJlIGFuZCBjYXVzZSBhXG4gICAgICAvLyBkb3VibGUgbG9hZHN0YXJ0IHNvIHdlJ2xsIHdhaXQgYW5kIHNlZSBpZiBpdCBoYXBwZW5zIGJldHdlZW4gbm93XG4gICAgICAvLyBhbmQgdGhlIG5leHQgbG9vcCwgYW5kIGZpcmUgaXQgaWYgbm90LlxuICAgICAgLy8gSE9XRVZFUiwgd2UgYWxzbyB3YW50IHRvIG1ha2Ugc3VyZSBpdCBmaXJlcyBiZWZvcmUgbG9hZGVkbWV0YWRhdGFcbiAgICAgIC8vIHdoaWNoIGNvdWxkIGFsc28gaGFwcGVuIGJldHdlZW4gbm93IGFuZCB0aGUgbmV4dCBsb29wLCBzbyB3ZSdsbFxuICAgICAgLy8gd2F0Y2ggZm9yIHRoYXQgYWxzby5cbiAgICAgIHZhciBsb2Fkc3RhcnRGaXJlZCA9IGZhbHNlO1xuXG4gICAgICB2YXIgc2V0TG9hZHN0YXJ0RmlyZWQgPSBmdW5jdGlvbiBzZXRMb2Fkc3RhcnRGaXJlZCgpIHtcbiAgICAgICAgbG9hZHN0YXJ0RmlyZWQgPSB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vbignbG9hZHN0YXJ0Jywgc2V0TG9hZHN0YXJ0RmlyZWQpO1xuXG4gICAgICB2YXIgdHJpZ2dlckxvYWRzdGFydCA9IGZ1bmN0aW9uIHRyaWdnZXJMb2Fkc3RhcnQoKSB7XG4gICAgICAgIC8vIFdlIGRpZCBtaXNzIHRoZSBvcmlnaW5hbCBsb2Fkc3RhcnQuIE1ha2Ugc3VyZSB0aGUgcGxheWVyXG4gICAgICAgIC8vIHNlZXMgbG9hZHN0YXJ0IGJlZm9yZSBsb2FkZWRtZXRhZGF0YVxuICAgICAgICBpZiAoIWxvYWRzdGFydEZpcmVkKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdsb2Fkc3RhcnQnKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vbignbG9hZGVkbWV0YWRhdGEnLCB0cmlnZ2VyTG9hZHN0YXJ0KTtcbiAgICAgIHRoaXMucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9mZignbG9hZHN0YXJ0Jywgc2V0TG9hZHN0YXJ0RmlyZWQpO1xuICAgICAgICB0aGlzLm9mZignbG9hZGVkbWV0YWRhdGEnLCB0cmlnZ2VyTG9hZHN0YXJ0KTtcblxuICAgICAgICBpZiAoIWxvYWRzdGFydEZpcmVkKSB7XG4gICAgICAgICAgLy8gV2UgZGlkIG1pc3MgdGhlIG9yaWdpbmFsIG5hdGl2ZSBsb2Fkc3RhcnQuIEZpcmUgaXQgbm93LlxuICAgICAgICAgIHRoaXMudHJpZ2dlcignbG9hZHN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRnJvbSBoZXJlIG9uIHdlIGtub3cgdGhhdCBsb2Fkc3RhcnQgYWxyZWFkeSBmaXJlZCBhbmQgd2UgbWlzc2VkIGl0LlxuICAgIC8vIFRoZSBvdGhlciByZWFkeVN0YXRlIGV2ZW50cyBhcmVuJ3QgYXMgbXVjaCBvZiBhIHByb2JsZW0gaWYgd2UgZG91YmxlXG4gICAgLy8gdGhlbSwgc28gbm90IGdvaW5nIHRvIGdvIHRvIGFzIG11Y2ggdHJvdWJsZSBhcyBsb2Fkc3RhcnQgdG8gcHJldmVudFxuICAgIC8vIHRoYXQgdW5sZXNzIHdlIGZpbmQgcmVhc29uIHRvLlxuXG5cbiAgICB2YXIgZXZlbnRzVG9UcmlnZ2VyID0gWydsb2Fkc3RhcnQnXTsgLy8gbG9hZGVkbWV0YWRhdGE6IG5ld2x5IGVxdWFsIHRvIEhBVkVfTUVUQURBVEEgKDEpIG9yIGdyZWF0ZXJcblxuICAgIGV2ZW50c1RvVHJpZ2dlci5wdXNoKCdsb2FkZWRtZXRhZGF0YScpOyAvLyBsb2FkZWRkYXRhOiBuZXdseSBpbmNyZWFzZWQgdG8gSEFWRV9DVVJSRU5UX0RBVEEgKDIpIG9yIGdyZWF0ZXJcblxuICAgIGlmIChlbC5yZWFkeVN0YXRlID49IDIpIHtcbiAgICAgIGV2ZW50c1RvVHJpZ2dlci5wdXNoKCdsb2FkZWRkYXRhJyk7XG4gICAgfSAvLyBjYW5wbGF5OiBuZXdseSBpbmNyZWFzZWQgdG8gSEFWRV9GVVRVUkVfREFUQSAoMykgb3IgZ3JlYXRlclxuXG5cbiAgICBpZiAoZWwucmVhZHlTdGF0ZSA+PSAzKSB7XG4gICAgICBldmVudHNUb1RyaWdnZXIucHVzaCgnY2FucGxheScpO1xuICAgIH0gLy8gY2FucGxheXRocm91Z2g6IG5ld2x5IGVxdWFsIHRvIEhBVkVfRU5PVUdIX0RBVEEgKDQpXG5cblxuICAgIGlmIChlbC5yZWFkeVN0YXRlID49IDQpIHtcbiAgICAgIGV2ZW50c1RvVHJpZ2dlci5wdXNoKCdjYW5wbGF5dGhyb3VnaCcpO1xuICAgIH0gLy8gV2Ugc3RpbGwgbmVlZCB0byBnaXZlIHRoZSBwbGF5ZXIgdGltZSB0byBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cblxuICAgIHRoaXMucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgZXZlbnRzVG9UcmlnZ2VyLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKHR5cGUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBjdXJyZW50IHRpbWUgZm9yIHRoZSBgSFRNTDVgIHRlY2guXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzXG4gICAqICAgICAgICBTZXQgdGhlIGN1cnJlbnQgdGltZSBvZiB0aGUgbWVkaWEgdG8gdGhpcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiBzZXRDdXJyZW50VGltZShzZWNvbmRzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZWxfLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2coZSwgJ1ZpZGVvIGlzIG5vdCByZWFkeS4gKFZpZGVvLmpzKScpOyAvLyB0aGlzLndhcm5pbmcoVmlkZW9KUy53YXJuaW5ncy52aWRlb05vdFJlYWR5KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBkdXJhdGlvbiBvZiB0aGUgSFRNTDUgbWVkaWEgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBvZiB0aGUgbWVkaWEgb3IgMCBpZiB0aGVyZSBpcyBubyBkdXJhdGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbigpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIC8vIEFuZHJvaWQgQ2hyb21lIHdpbGwgcmVwb3J0IGR1cmF0aW9uIGFzIEluZmluaXR5IGZvciBWT0QgSExTIHVudGlsIGFmdGVyXG4gICAgLy8gcGxheWJhY2sgaGFzIHN0YXJ0ZWQsIHdoaWNoIHRyaWdnZXJzIHRoZSBsaXZlIGRpc3BsYXkgZXJyb25lb3VzbHkuXG4gICAgLy8gUmV0dXJuIE5hTiBpZiBwbGF5YmFjayBoYXMgbm90IHN0YXJ0ZWQgYW5kIHRyaWdnZXIgYSBkdXJhdGlvbnVwZGF0ZSBvbmNlXG4gICAgLy8gdGhlIGR1cmF0aW9uIGNhbiBiZSByZWxpYWJseSBrbm93bi5cbiAgICBpZiAodGhpcy5lbF8uZHVyYXRpb24gPT09IEluZmluaXR5ICYmIElTX0FORFJPSUQgJiYgSVNfQ0hST01FICYmIHRoaXMuZWxfLmN1cnJlbnRUaW1lID09PSAwKSB7XG4gICAgICAvLyBXYWl0IGZvciB0aGUgZmlyc3QgYHRpbWV1cGRhdGVgIHdpdGggY3VycmVudFRpbWUgPiAwIC0gdGhlcmUgbWF5IGJlXG4gICAgICAvLyBzZXZlcmFsIHdpdGggMFxuICAgICAgdmFyIGNoZWNrUHJvZ3Jlc3MgPSBmdW5jdGlvbiBjaGVja1Byb2dyZXNzKCkge1xuICAgICAgICBpZiAoX3RoaXM1LmVsXy5jdXJyZW50VGltZSA+IDApIHtcbiAgICAgICAgICAvLyBUcmlnZ2VyIGR1cmF0aW9uY2hhbmdlIGZvciBnZW51aW5lbHkgbGl2ZSB2aWRlb1xuICAgICAgICAgIGlmIChfdGhpczUuZWxfLmR1cmF0aW9uID09PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgX3RoaXM1LnRyaWdnZXIoJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXM1Lm9mZigndGltZXVwZGF0ZScsIGNoZWNrUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9uKCd0aW1ldXBkYXRlJywgY2hlY2tQcm9ncmVzcyk7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsXy5kdXJhdGlvbiB8fCBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB3aWR0aCBvZiB0aGUgSFRNTDUgbWVkaWEgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSB3aWR0aCBvZiB0aGUgSFRNTDUgbWVkaWEgZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2lkdGggPSBmdW5jdGlvbiB3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbF8ub2Zmc2V0V2lkdGg7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIEhUTUw1IG1lZGlhIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgaGVpZ2h0IG9mIHRoZSBIVE1MNSBtZWRpYSBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oZWlnaHQgPSBmdW5jdGlvbiBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLm9mZnNldEhlaWdodDtcbiAgfVxuICAvKipcbiAgICogUHJveHkgaU9TIGB3ZWJraXRiZWdpbmZ1bGxzY3JlZW5gIGFuZCBgd2Via2l0ZW5kZnVsbHNjcmVlbmAgaW50b1xuICAgKiBgZnVsbHNjcmVlbmNoYW5nZWAgZXZlbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBmaXJlcyBmdWxsc2NyZWVuY2hhbmdlXG4gICAqIEBsaXN0ZW5zIHdlYmtpdGVuZGZ1bGxzY3JlZW5cbiAgICogQGxpc3RlbnMgd2Via2l0YmVnaW5mdWxsc2NyZWVuXG4gICAqIEBsaXN0ZW5zIHdlYmtpdGJlZ2luZnVsbHNjcmVlblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm94eVdlYmtpdEZ1bGxzY3JlZW5fID0gZnVuY3Rpb24gcHJveHlXZWJraXRGdWxsc2NyZWVuXygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIGlmICghKCd3ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbicgaW4gdGhpcy5lbF8pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVuZEZuID0gZnVuY3Rpb24gZW5kRm4oKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB7XG4gICAgICAgIGlzRnVsbHNjcmVlbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgYmVnaW5GbiA9IGZ1bmN0aW9uIGJlZ2luRm4oKSB7XG4gICAgICBpZiAoJ3dlYmtpdFByZXNlbnRhdGlvbk1vZGUnIGluIHRoaXMuZWxfICYmIHRoaXMuZWxfLndlYmtpdFByZXNlbnRhdGlvbk1vZGUgIT09ICdwaWN0dXJlLWluLXBpY3R1cmUnKSB7XG4gICAgICAgIHRoaXMub25lKCd3ZWJraXRlbmRmdWxsc2NyZWVuJywgZW5kRm4pO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB7XG4gICAgICAgICAgaXNGdWxsc2NyZWVuOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uKCd3ZWJraXRiZWdpbmZ1bGxzY3JlZW4nLCBiZWdpbkZuKTtcbiAgICB0aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM2Lm9mZignd2Via2l0YmVnaW5mdWxsc2NyZWVuJywgYmVnaW5Gbik7XG5cbiAgICAgIF90aGlzNi5vZmYoJ3dlYmtpdGVuZGZ1bGxzY3JlZW4nLCBlbmRGbik7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGZ1bGxzY3JlZW4gaXMgc3VwcG9ydGVkIG9uIHRoZSBjdXJyZW50IHBsYXliYWNrIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICAtIFRydWUgaWYgZnVsbHNjcmVlbiBpcyBzdXBwb3J0ZWQuXG4gICAqICAgICAgICAgLSBGYWxzZSBpZiBmdWxsc2NyZWVuIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN1cHBvcnRzRnVsbFNjcmVlbiA9IGZ1bmN0aW9uIHN1cHBvcnRzRnVsbFNjcmVlbigpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZWxfLndlYmtpdEVudGVyRnVsbFNjcmVlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHVzZXJBZ2VudCA9IHdpbmRvdyQxLm5hdmlnYXRvciAmJiB3aW5kb3ckMS5uYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnOyAvLyBTZWVtcyB0byBiZSBicm9rZW4gaW4gQ2hyb21pdW0vQ2hyb21lICYmIFNhZmFyaSBpbiBMZW9wYXJkXG5cbiAgICAgIGlmICgvQW5kcm9pZC8udGVzdCh1c2VyQWdlbnQpIHx8ICEvQ2hyb21lfE1hYyBPUyBYIDEwLjUvLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJlcXVlc3QgdGhhdCB0aGUgYEhUTUw1YCBUZWNoIGVudGVyIGZ1bGxzY3JlZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVudGVyRnVsbFNjcmVlbiA9IGZ1bmN0aW9uIGVudGVyRnVsbFNjcmVlbigpIHtcbiAgICB2YXIgdmlkZW8gPSB0aGlzLmVsXztcblxuICAgIGlmICh2aWRlby5wYXVzZWQgJiYgdmlkZW8ubmV0d29ya1N0YXRlIDw9IHZpZGVvLkhBVkVfTUVUQURBVEEpIHtcbiAgICAgIC8vIGF0dGVtcHQgdG8gcHJpbWUgdGhlIHZpZGVvIGVsZW1lbnQgZm9yIHByb2dyYW1tYXRpYyBhY2Nlc3NcbiAgICAgIC8vIHRoaXMgaXNuJ3QgbmVjZXNzYXJ5IG9uIHRoZSBkZXNrdG9wIGJ1dCBzaG91bGRuJ3QgaHVydFxuICAgICAgdGhpcy5lbF8ucGxheSgpOyAvLyBwbGF5aW5nIGFuZCBwYXVzaW5nIHN5bmNocm9ub3VzbHkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uIHRvIGZ1bGxzY3JlZW5cbiAgICAgIC8vIGNhbiBnZXQgaU9TIH42LjEgZGV2aWNlcyBpbnRvIGEgcGxheS9wYXVzZSBsb29wXG5cbiAgICAgIHRoaXMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgICAgIHZpZGVvLndlYmtpdEVudGVyRnVsbFNjcmVlbigpO1xuICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZGVvLndlYmtpdEVudGVyRnVsbFNjcmVlbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVxdWVzdCB0aGF0IHRoZSBgSFRNTDVgIFRlY2ggZXhpdCBmdWxsc2NyZWVuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGl0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uIGV4aXRGdWxsU2NyZWVuKCkge1xuICAgIHRoaXMuZWxfLndlYmtpdEV4aXRGdWxsU2NyZWVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZsb2F0aW5nIHZpZGVvIHdpbmRvdyBhbHdheXMgb24gdG9wIG9mIG90aGVyIHdpbmRvd3Mgc28gdGhhdCB1c2VycyBtYXlcbiAgICogY29udGludWUgY29uc3VtaW5nIG1lZGlhIHdoaWxlIHRoZXkgaW50ZXJhY3Qgd2l0aCBvdGhlciBjb250ZW50IHNpdGVzLCBvclxuICAgKiBhcHBsaWNhdGlvbnMgb24gdGhlaXIgZGV2aWNlLlxuICAgKlxuICAgKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3dpY2cuZ2l0aHViLmlvL3BpY3R1cmUtaW4tcGljdHVyZX1cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogICAgICAgICBBIHByb21pc2Ugd2l0aCBhIFBpY3R1cmUtaW4tUGljdHVyZSB3aW5kb3cuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlID0gZnVuY3Rpb24gcmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLnJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEEgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGBIdG1sNWAgVGVjaCdzIHNvdXJjZSBvYmplY3QuXG4gICAqID4gTm90ZTogUGxlYXNlIHVzZSB7QGxpbmsgSHRtbDUjc2V0U291cmNlfVxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBbc3JjXVxuICAgKiAgICAgICAgVGhlIHNvdXJjZSBvYmplY3QgeW91IHdhbnQgdG8gc2V0IG9uIHRoZSBgSFRNTDVgIHRlY2hzIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge1RlY2h+U291cmNlT2JqZWN0fHVuZGVmaW5lZH1cbiAgICogICAgICAgICAtIFRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3Qgd2hlbiBhIHNvdXJjZSBpcyBub3QgcGFzc2VkIGluLlxuICAgKiAgICAgICAgIC0gdW5kZWZpbmVkIHdoZW4gc2V0dGluZ1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBTaW5jZSB2ZXJzaW9uIDUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNyYyA9IGZ1bmN0aW9uIHNyYyhfc3JjKSB7XG4gICAgaWYgKF9zcmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxfLnNyYztcbiAgICB9IC8vIFNldHRpbmcgc3JjIHRocm91Z2ggYHNyY2AgaW5zdGVhZCBvZiBgc2V0U3JjYCB3aWxsIGJlIGRlcHJlY2F0ZWRcblxuXG4gICAgdGhpcy5zZXRTcmMoX3NyYyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0ZWNoIGJ5IHJlbW92aW5nIGFsbCBzb3VyY2VzIGFuZCB0aGVuIGNhbGxpbmdcbiAgICoge0BsaW5rIEh0bWw1LnJlc2V0TWVkaWFFbGVtZW50fS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBIdG1sNS5yZXNldE1lZGlhRWxlbWVudCh0aGlzLmVsXyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBzb3VyY2Ugb24gdGhlIGBIVE1MNWAgVGVjaC4gRmFsbHMgYmFjayB0byByZXR1cm5pbmcgdGhlIHNvdXJjZSBmcm9tXG4gICAqIHRoZSBIVE1MNSBtZWRpYSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtUZWNoflNvdXJjZU9iamVjdH1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBzb3VyY2Ugb2JqZWN0IGZyb20gdGhlIEhUTUw1IHRlY2guIFdpdGggYSBmYWxsYmFjayB0byB0aGVcbiAgICogICAgICAgICBlbGVtZW50cyBzb3VyY2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRTcmMgPSBmdW5jdGlvbiBjdXJyZW50U3JjKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRTb3VyY2VfKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50U291cmNlXy5zcmM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWxfLmN1cnJlbnRTcmM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBjb250cm9scyBhdHRyaWJ1dGUgZm9yIHRoZSBIVE1MNSBtZWRpYSBFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gICAqICAgICAgICBWYWx1ZSB0byBzZXQgdGhlIGNvbnRyb2xzIGF0dHJpYnV0ZSB0b1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRDb250cm9scyA9IGZ1bmN0aW9uIHNldENvbnRyb2xzKHZhbCkge1xuICAgIHRoaXMuZWxfLmNvbnRyb2xzID0gISF2YWw7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmV0dXJucyBhIHJlbW90ZSB7QGxpbmsgVGV4dFRyYWNrfSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAqICAgICAgICBgVGV4dFRyYWNrYCBraW5kIChzdWJ0aXRsZXMsIGNhcHRpb25zLCBkZXNjcmlwdGlvbnMsIGNoYXB0ZXJzLCBvciBtZXRhZGF0YSlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYWJlbF1cbiAgICogICAgICAgIExhYmVsIHRvIGlkZW50aWZ5IHRoZSB0ZXh0IHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdXG4gICAqICAgICAgICBUd28gbGV0dGVyIGxhbmd1YWdlIGFiYnJldmlhdGlvblxuICAgKlxuICAgKiBAcmV0dXJuIHtUZXh0VHJhY2t9XG4gICAqICAgICAgICAgVGhlIFRleHRUcmFjayB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkVGV4dFRyYWNrID0gZnVuY3Rpb24gYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIGlmICghdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpIHtcbiAgICAgIHJldHVybiBfVGVjaC5wcm90b3R5cGUuYWRkVGV4dFRyYWNrLmNhbGwodGhpcywga2luZCwgbGFiZWwsIGxhbmd1YWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbF8uYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgZWl0aGVyIG5hdGl2ZSBUZXh0VHJhY2sgb3IgYW4gZW11bGF0ZWQgVGV4dFRyYWNrIGRlcGVuZGluZ1xuICAgKiBvbiB0aGUgdmFsdWUgb2YgYGZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrc2BcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdGhlIG9wdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgVGV4dFRyYWNrIHdpdGguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5raW5kXVxuICAgKiAgICAgICAgYFRleHRUcmFja2Aga2luZCAoc3VidGl0bGVzLCBjYXB0aW9ucywgZGVzY3JpcHRpb25zLCBjaGFwdGVycywgb3IgbWV0YWRhdGEpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFiZWxdXG4gICAqICAgICAgICBMYWJlbCB0byBpZGVudGlmeSB0aGUgdGV4dCB0cmFja1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2VdXG4gICAqICAgICAgICBUd28gbGV0dGVyIGxhbmd1YWdlIGFiYnJldmlhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZhdWx0XVxuICAgKiAgICAgICAgRGVmYXVsdCB0aGlzIHRyYWNrIHRvIG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdXG4gICAqICAgICAgICBUaGUgaW50ZXJuYWwgaWQgdG8gYXNzaWduIHRoaXMgdHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zcmNdXG4gICAqICAgICAgICBBIHNvdXJjZSB1cmwgZm9yIHRoZSB0cmFjay5cbiAgICpcbiAgICogQHJldHVybiB7SFRNTFRyYWNrRWxlbWVudH1cbiAgICogICAgICAgICBUaGUgdHJhY2sgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gY3JlYXRlUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSB7XG4gICAgICByZXR1cm4gX1RlY2gucHJvdG90eXBlLmNyZWF0ZVJlbW90ZVRleHRUcmFjay5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBodG1sVHJhY2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhY2snKTtcblxuICAgIGlmIChvcHRpb25zLmtpbmQpIHtcbiAgICAgIGh0bWxUcmFja0VsZW1lbnQua2luZCA9IG9wdGlvbnMua2luZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5sYWJlbCkge1xuICAgICAgaHRtbFRyYWNrRWxlbWVudC5sYWJlbCA9IG9wdGlvbnMubGFiZWw7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubGFuZ3VhZ2UgfHwgb3B0aW9ucy5zcmNsYW5nKSB7XG4gICAgICBodG1sVHJhY2tFbGVtZW50LnNyY2xhbmcgPSBvcHRpb25zLmxhbmd1YWdlIHx8IG9wdGlvbnMuc3JjbGFuZztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9uc1tcImRlZmF1bHRcIl0pIHtcbiAgICAgIGh0bWxUcmFja0VsZW1lbnRbXCJkZWZhdWx0XCJdID0gb3B0aW9uc1tcImRlZmF1bHRcIl07XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgIGh0bWxUcmFja0VsZW1lbnQuaWQgPSBvcHRpb25zLmlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNyYykge1xuICAgICAgaHRtbFRyYWNrRWxlbWVudC5zcmMgPSBvcHRpb25zLnNyYztcbiAgICB9XG5cbiAgICByZXR1cm4gaHRtbFRyYWNrRWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJlbW90ZSB0ZXh0IHRyYWNrIG9iamVjdCBhbmQgcmV0dXJucyBhbiBodG1sIHRyYWNrIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdmFsdWVzIGZvclxuICAgKiBraW5kLCBsYW5ndWFnZSwgbGFiZWwsIGFuZCBzcmMgKGxvY2F0aW9uIG9mIHRoZSBXZWJWVFQgZmlsZSlcbiAgICogQHBhcmFtIHtib29sZWFufSBbbWFudWFsQ2xlYW51cD10cnVlXSBpZiBzZXQgdG8gZmFsc2UsIHRoZSBUZXh0VHJhY2sgd2lsbCBiZVxuICAgKiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSB0aGUgdmlkZW8gZWxlbWVudCB3aGVuZXZlciB0aGUgc291cmNlIGNoYW5nZXNcbiAgICogQHJldHVybiB7SFRNTFRyYWNrRWxlbWVudH0gQW4gSHRtbCBUcmFjayBFbGVtZW50LlxuICAgKiBUaGlzIGNhbiBiZSBhbiBlbXVsYXRlZCB7QGxpbmsgSFRNTFRyYWNrRWxlbWVudH0gb3IgYSBuYXRpdmUgb25lLlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgXCJtYW51YWxDbGVhbnVwXCIgcGFyYW1ldGVyIHdpbGwgZGVmYXVsdFxuICAgKiB0byBcImZhbHNlXCIgaW4gdXBjb21pbmcgdmVyc2lvbnMgb2YgVmlkZW8uanNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gYWRkUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMsIG1hbnVhbENsZWFudXApIHtcbiAgICB2YXIgaHRtbFRyYWNrRWxlbWVudCA9IF9UZWNoLnByb3RvdHlwZS5hZGRSZW1vdGVUZXh0VHJhY2suY2FsbCh0aGlzLCBvcHRpb25zLCBtYW51YWxDbGVhbnVwKTtcblxuICAgIGlmICh0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgdGhpcy5lbCgpLmFwcGVuZENoaWxkKGh0bWxUcmFja0VsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sVHJhY2tFbGVtZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVtb3RlIGBUZXh0VHJhY2tgIGZyb20gYFRleHRUcmFja0xpc3RgIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIGBUZXh0VHJhY2tgIG9iamVjdCB0byByZW1vdmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKSB7XG4gICAgX1RlY2gucHJvdG90eXBlLnJlbW92ZVJlbW90ZVRleHRUcmFjay5jYWxsKHRoaXMsIHRyYWNrKTtcblxuICAgIGlmICh0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgdmFyIHRyYWNrcyA9IHRoaXMuJCQoJ3RyYWNrJyk7XG4gICAgICB2YXIgaSA9IHRyYWNrcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKHRyYWNrID09PSB0cmFja3NbaV0gfHwgdHJhY2sgPT09IHRyYWNrc1tpXS50cmFjaykge1xuICAgICAgICAgIHRoaXMuZWwoKS5yZW1vdmVDaGlsZCh0cmFja3NbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXRzIGF2YWlsYWJsZSBtZWRpYSBwbGF5YmFjayBxdWFsaXR5IG1ldHJpY3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBXM0MncyBNZWRpYVxuICAgKiBQbGF5YmFjayBRdWFsaXR5IEFQSS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9tZWRpYS1wbGF5YmFjay1xdWFsaXR5fVxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqICAgICAgICAgQW4gb2JqZWN0IHdpdGggc3VwcG9ydGVkIG1lZGlhIHBsYXliYWNrIHF1YWxpdHkgbWV0cmljc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSA9IGZ1bmN0aW9uIGdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5lbCgpLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbCgpLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCk7XG4gICAgfVxuXG4gICAgdmFyIHZpZGVvUGxheWJhY2tRdWFsaXR5ID0ge307XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuZWwoKS53ZWJraXREcm9wcGVkRnJhbWVDb3VudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZWwoKS53ZWJraXREZWNvZGVkRnJhbWVDb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5LmRyb3BwZWRWaWRlb0ZyYW1lcyA9IHRoaXMuZWwoKS53ZWJraXREcm9wcGVkRnJhbWVDb3VudDtcbiAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5LnRvdGFsVmlkZW9GcmFtZXMgPSB0aGlzLmVsKCkud2Via2l0RGVjb2RlZEZyYW1lQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdyQxLnBlcmZvcm1hbmNlICYmIHR5cGVvZiB3aW5kb3ckMS5wZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5LmNyZWF0aW9uVGltZSA9IHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH0gZWxzZSBpZiAod2luZG93JDEucGVyZm9ybWFuY2UgJiYgd2luZG93JDEucGVyZm9ybWFuY2UudGltaW5nICYmIHR5cGVvZiB3aW5kb3ckMS5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgdmlkZW9QbGF5YmFja1F1YWxpdHkuY3JlYXRpb25UaW1lID0gd2luZG93JDEuRGF0ZS5ub3coKSAtIHdpbmRvdyQxLnBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZGVvUGxheWJhY2tRdWFsaXR5O1xuICB9O1xuXG4gIHJldHVybiBIdG1sNTtcbn0oVGVjaCk7XG4vKiBIVE1MNSBTdXBwb3J0IFRlc3RpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cbmlmIChpc1JlYWwoKSkge1xuICAvKipcbiAgICogRWxlbWVudCBmb3IgdGVzdGluZyBicm93c2VyIEhUTUw1IG1lZGlhIGNhcGFiaWxpdGllc1xuICAgKlxuICAgKiBAdHlwZSB7RWxlbWVudH1cbiAgICogQGNvbnN0YW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBIdG1sNS5URVNUX1ZJRCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gIHZhciB0cmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJyk7XG4gIHRyYWNrLmtpbmQgPSAnY2FwdGlvbnMnO1xuICB0cmFjay5zcmNsYW5nID0gJ2VuJztcbiAgdHJhY2subGFiZWwgPSAnRW5nbGlzaCc7XG4gIEh0bWw1LlRFU1RfVklELmFwcGVuZENoaWxkKHRyYWNrKTtcbn1cbi8qKlxuICogQ2hlY2sgaWYgSFRNTDUgbWVkaWEgaXMgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci9kZXZpY2UuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUcnVlIGlmIEhUTUw1IG1lZGlhIGlzIHN1cHBvcnRlZC5cbiAqICAgICAgICAgLSBGYWxzZSBpZiBIVE1MNSBtZWRpYSBpcyBub3Qgc3VwcG9ydGVkLlxuICovXG5cblxuSHRtbDUuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIElFIHdpdGggbm8gTWVkaWEgUGxheWVyIGlzIGEgTElBUiEgKCM5ODQpXG4gIHRyeSB7XG4gICAgSHRtbDUuVEVTVF9WSUQudm9sdW1lID0gMC41O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICEhKEh0bWw1LlRFU1RfVklEICYmIEh0bWw1LlRFU1RfVklELmNhblBsYXlUeXBlKTtcbn07XG4vKipcbiAqIENoZWNrIGlmIHRoZSB0ZWNoIGNhbiBzdXBwb3J0IHRoZSBnaXZlbiB0eXBlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICBUaGUgbWltZXR5cGUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge3N0cmluZ30gJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZylcbiAqL1xuXG5cbkh0bWw1LmNhblBsYXlUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIEh0bWw1LlRFU1RfVklELmNhblBsYXlUeXBlKHR5cGUpO1xufTtcbi8qKlxuICogQ2hlY2sgaWYgdGhlIHRlY2ggY2FuIHN1cHBvcnQgdGhlIGdpdmVuIHNvdXJjZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNPYmpcbiAqICAgICAgICBUaGUgc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqICAgICAgICBUaGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIHRlY2hcbiAqIEByZXR1cm4ge3N0cmluZ30gJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZylcbiAqL1xuXG5cbkh0bWw1LmNhblBsYXlTb3VyY2UgPSBmdW5jdGlvbiAoc3JjT2JqLCBvcHRpb25zKSB7XG4gIHJldHVybiBIdG1sNS5jYW5QbGF5VHlwZShzcmNPYmoudHlwZSk7XG59O1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgdm9sdW1lIGNhbiBiZSBjaGFuZ2VkIGluIHRoaXMgYnJvd3Nlci9kZXZpY2UuXG4gKiBWb2x1bWUgY2Fubm90IGJlIGNoYW5nZWQgaW4gYSBsb3Qgb2YgbW9iaWxlIGRldmljZXMuXG4gKiBTcGVjaWZpY2FsbHksIGl0IGNhbid0IGJlIGNoYW5nZWQgZnJvbSAxIG9uIGlPUy5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAtIFRydWUgaWYgdm9sdW1lIGNhbiBiZSBjb250cm9sbGVkXG4gKiAgICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gKi9cblxuXG5IdG1sNS5jYW5Db250cm9sVm9sdW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBJRSB3aWxsIGVycm9yIGlmIFdpbmRvd3MgTWVkaWEgUGxheWVyIG5vdCBpbnN0YWxsZWQgIzMzMTVcbiAgdHJ5IHtcbiAgICB2YXIgdm9sdW1lID0gSHRtbDUuVEVTVF9WSUQudm9sdW1lO1xuICAgIEh0bWw1LlRFU1RfVklELnZvbHVtZSA9IHZvbHVtZSAvIDIgKyAwLjE7XG4gICAgcmV0dXJuIHZvbHVtZSAhPT0gSHRtbDUuVEVTVF9WSUQudm9sdW1lO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgdm9sdW1lIGNhbiBiZSBtdXRlZCBpbiB0aGlzIGJyb3dzZXIvZGV2aWNlLlxuICogU29tZSBkZXZpY2VzLCBlLmcuIGlPUywgZG9uJ3QgYWxsb3cgY2hhbmdpbmcgdm9sdW1lXG4gKiBidXQgcGVybWl0cyBtdXRpbmcvdW5tdXRpbmcuXG4gKlxuICogQHJldHVybiB7Ym9sZWFufVxuICogICAgICAtIFRydWUgaWYgdm9sdW1lIGNhbiBiZSBtdXRlZFxuICogICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICovXG5cblxuSHRtbDUuY2FuTXV0ZVZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgbXV0ZWQgPSBIdG1sNS5URVNUX1ZJRC5tdXRlZDsgLy8gaW4gc29tZSB2ZXJzaW9ucyBvZiBpT1MgbXV0ZWQgcHJvcGVydHkgZG9lc24ndCBhbHdheXNcbiAgICAvLyB3b3JrLCBzbyB3ZSB3YW50IHRvIHNldCBib3RoIHByb3BlcnR5IGFuZCBhdHRyaWJ1dGVcblxuICAgIEh0bWw1LlRFU1RfVklELm11dGVkID0gIW11dGVkO1xuXG4gICAgaWYgKEh0bWw1LlRFU1RfVklELm11dGVkKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUoSHRtbDUuVEVTVF9WSUQsICdtdXRlZCcsICdtdXRlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVBdHRyaWJ1dGUoSHRtbDUuVEVTVF9WSUQsICdtdXRlZCcsICdtdXRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBtdXRlZCAhPT0gSHRtbDUuVEVTVF9WSUQubXV0ZWQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG4vKipcbiAqIENoZWNrIGlmIHRoZSBwbGF5YmFjayByYXRlIGNhbiBiZSBjaGFuZ2VkIGluIHRoaXMgYnJvd3Nlci9kZXZpY2UuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUcnVlIGlmIHBsYXliYWNrIHJhdGUgY2FuIGJlIGNvbnRyb2xsZWRcbiAqICAgICAgICAgLSBGYWxzZSBvdGhlcndpc2VcbiAqL1xuXG5cbkh0bWw1LmNhbkNvbnRyb2xQbGF5YmFja1JhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFBsYXliYWNrIHJhdGUgQVBJIGlzIGltcGxlbWVudGVkIGluIEFuZHJvaWQgQ2hyb21lLCBidXQgZG9lc24ndCBkbyBhbnl0aGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9pc3N1ZXMvMzE4MFxuICBpZiAoSVNfQU5EUk9JRCAmJiBJU19DSFJPTUUgJiYgQ0hST01FX1ZFUlNJT04gPCA1OCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJRSB3aWxsIGVycm9yIGlmIFdpbmRvd3MgTWVkaWEgUGxheWVyIG5vdCBpbnN0YWxsZWQgIzMzMTVcblxuXG4gIHRyeSB7XG4gICAgdmFyIHBsYXliYWNrUmF0ZSA9IEh0bWw1LlRFU1RfVklELnBsYXliYWNrUmF0ZTtcbiAgICBIdG1sNS5URVNUX1ZJRC5wbGF5YmFja1JhdGUgPSBwbGF5YmFja1JhdGUgLyAyICsgMC4xO1xuICAgIHJldHVybiBwbGF5YmFja1JhdGUgIT09IEh0bWw1LlRFU1RfVklELnBsYXliYWNrUmF0ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbi8qKlxuICogQ2hlY2sgaWYgd2UgY2FuIG92ZXJyaWRlIGEgdmlkZW8vYXVkaW8gZWxlbWVudHMgYXR0cmlidXRlcywgd2l0aFxuICogT2JqZWN0LmRlZmluZVByb3BlcnR5LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVHJ1ZSBpZiBidWlsdGluIGF0dHJpYnV0ZXMgY2FuIGJlIG92ZXJyaWRkZW5cbiAqICAgICAgICAgLSBGYWxzZSBvdGhlcndpc2VcbiAqL1xuXG5cbkh0bWw1LmNhbk92ZXJyaWRlQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gaWYgd2UgY2Fubm90IG92ZXJ3cml0ZSB0aGUgc3JjL2lubmVySFRNTCBwcm9wZXJ0eSwgdGhlcmUgaXMgbm8gc3VwcG9ydFxuICAvLyBpT1MgNyBzYWZhcmkgZm9yIGluc3RhbmNlIGNhbm5vdCBkbyB0aGlzLlxuICB0cnkge1xuICAgIHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyksICdzcmMnLCB7XG4gICAgICBnZXQ6IG5vb3AsXG4gICAgICBzZXQ6IG5vb3BcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKSwgJ3NyYycsIHtcbiAgICAgIGdldDogbm9vcCxcbiAgICAgIHNldDogbm9vcFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpLCAnaW5uZXJIVE1MJywge1xuICAgICAgZ2V0OiBub29wLFxuICAgICAgc2V0OiBub29wXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyksICdpbm5lckhUTUwnLCB7XG4gICAgICBnZXQ6IG5vb3AsXG4gICAgICBzZXQ6IG5vb3BcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIG5hdGl2ZSBgVGV4dFRyYWNrYHMgYXJlIHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIvZGV2aWNlLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVHJ1ZSBpZiBuYXRpdmUgYFRleHRUcmFja2BzIGFyZSBzdXBwb3J0ZWQuXG4gKiAgICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gKi9cblxuXG5IdG1sNS5zdXBwb3J0c05hdGl2ZVRleHRUcmFja3MgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBJU19BTllfU0FGQVJJIHx8IElTX0lPUyAmJiBJU19DSFJPTUU7XG59O1xuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgbmF0aXZlIGBWaWRlb1RyYWNrYHMgYXJlIHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIvZGV2aWNlXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAtIFRydWUgaWYgbmF0aXZlIGBWaWRlb1RyYWNrYHMgYXJlIHN1cHBvcnRlZC5cbiAqICAgICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICovXG5cblxuSHRtbDUuc3VwcG9ydHNOYXRpdmVWaWRlb1RyYWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhKEh0bWw1LlRFU1RfVklEICYmIEh0bWw1LlRFU1RfVklELnZpZGVvVHJhY2tzKTtcbn07XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBuYXRpdmUgYEF1ZGlvVHJhY2tgcyBhcmUgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci9kZXZpY2VcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgIC0gVHJ1ZSBpZiBuYXRpdmUgYEF1ZGlvVHJhY2tgcyBhcmUgc3VwcG9ydGVkLlxuICogICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gKi9cblxuXG5IdG1sNS5zdXBwb3J0c05hdGl2ZUF1ZGlvVHJhY2tzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISEoSHRtbDUuVEVTVF9WSUQgJiYgSHRtbDUuVEVTVF9WSUQuYXVkaW9UcmFja3MpO1xufTtcbi8qKlxuICogQW4gYXJyYXkgb2YgZXZlbnRzIGF2YWlsYWJsZSBvbiB0aGUgSHRtbDUgdGVjaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUge0FycmF5fVxuICovXG5cblxuSHRtbDUuRXZlbnRzID0gWydsb2Fkc3RhcnQnLCAnc3VzcGVuZCcsICdhYm9ydCcsICdlcnJvcicsICdlbXB0aWVkJywgJ3N0YWxsZWQnLCAnbG9hZGVkbWV0YWRhdGEnLCAnbG9hZGVkZGF0YScsICdjYW5wbGF5JywgJ2NhbnBsYXl0aHJvdWdoJywgJ3BsYXlpbmcnLCAnd2FpdGluZycsICdzZWVraW5nJywgJ3NlZWtlZCcsICdlbmRlZCcsICdkdXJhdGlvbmNoYW5nZScsICd0aW1ldXBkYXRlJywgJ3Byb2dyZXNzJywgJ3BsYXknLCAncGF1c2UnLCAncmF0ZWNoYW5nZScsICdyZXNpemUnLCAndm9sdW1lY2hhbmdlJ107XG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgVGVjaGAgc3VwcG9ydHMgdm9sdW1lIGNvbnRyb2wuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCB7QGxpbmsgSHRtbDUuY2FuQ29udHJvbFZvbHVtZX1cbiAqL1xuXG5IdG1sNS5wcm90b3R5cGUuZmVhdHVyZXNWb2x1bWVDb250cm9sID0gSHRtbDUuY2FuQ29udHJvbFZvbHVtZSgpO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIG11dGluZyB2b2x1bWUuXG4gKlxuICogQHR5cGUge2JvbGVhbn1cbiAqIEBkZWZhdWx0IHtAbGluayBIdG1sNS5jYW5NdXRlVm9sdW1lfVxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc011dGVDb250cm9sID0gSHRtbDUuY2FuTXV0ZVZvbHVtZSgpO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIGNoYW5naW5nIHRoZSBzcGVlZCBhdCB3aGljaCB0aGUgbWVkaWFcbiAqIHBsYXlzLiBFeGFtcGxlczpcbiAqICAgLSBTZXQgcGxheWVyIHRvIHBsYXkgMnggKHR3aWNlKSBhcyBmYXN0XG4gKiAgIC0gU2V0IHBsYXllciB0byBwbGF5IDAuNXggKGhhbGYpIGFzIGZhc3RcbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IHtAbGluayBIdG1sNS5jYW5Db250cm9sUGxheWJhY2tSYXRlfVxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc1BsYXliYWNrUmF0ZSA9IEh0bWw1LmNhbkNvbnRyb2xQbGF5YmFja1JhdGUoKTtcbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyB0aGUgYHNvdXJjZXNldGAgZXZlbnQuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdFxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc1NvdXJjZXNldCA9IEh0bWw1LmNhbk92ZXJyaWRlQXR0cmlidXRlcygpO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhUTUw1YCB0ZWNoIGN1cnJlbnRseSBzdXBwb3J0cyB0aGUgbWVkaWEgZWxlbWVudFxuICogbW92aW5nIGluIHRoZSBET00uIGlPUyBicmVha3MgaWYgeW91IG1vdmUgdGhlIG1lZGlhIGVsZW1lbnQsIHNvIHRoaXMgaXMgc2V0IHRoaXMgdG9cbiAqIGZhbHNlIHRoZXJlLiBFdmVyeXdoZXJlIGVsc2UgdGhpcyBzaG91bGQgYmUgdHJ1ZS5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuSHRtbDUucHJvdG90eXBlLm1vdmluZ01lZGlhRWxlbWVudEluRE9NID0gIUlTX0lPUzsgLy8gVE9ETzogUHJldmlvdXMgY29tbWVudDogTm8gbG9uZ2VyIGFwcGVhcnMgdG8gYmUgdXNlZC4gQ2FuIHByb2JhYmx5IGJlIHJlbW92ZWQuXG4vLyAgICAgICBJcyB0aGlzIHRydWU/XG5cbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBIVE1MNWAgdGVjaCBjdXJyZW50bHkgc3VwcG9ydHMgYXV0b21hdGljIG1lZGlhIHJlc2l6ZVxuICogd2hlbiBnb2luZyBpbnRvIGZ1bGxzY3JlZW4uXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdFxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc0Z1bGxzY3JlZW5SZXNpemUgPSB0cnVlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhUTUw1YCB0ZWNoIGN1cnJlbnRseSBzdXBwb3J0cyB0aGUgcHJvZ3Jlc3MgZXZlbnQuXG4gKiBJZiB0aGlzIGlzIGZhbHNlLCBtYW51YWwgYHByb2dyZXNzYCBldmVudHMgd2lsbCBiZSB0cmlnZ2VyZWQgaW5zdGVhZC5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuSHRtbDUucHJvdG90eXBlLmZlYXR1cmVzUHJvZ3Jlc3NFdmVudHMgPSB0cnVlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhUTUw1YCB0ZWNoIGN1cnJlbnRseSBzdXBwb3J0cyB0aGUgdGltZXVwZGF0ZSBldmVudC5cbiAqIElmIHRoaXMgaXMgZmFsc2UsIG1hbnVhbCBgdGltZXVwZGF0ZWAgZXZlbnRzIHdpbGwgYmUgdHJpZ2dlcmVkIGluc3RlYWQuXG4gKlxuICogQGRlZmF1bHRcbiAqL1xuXG5IdG1sNS5wcm90b3R5cGUuZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzID0gdHJ1ZTtcbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBIVE1MNWAgdGVjaCBjdXJyZW50bHkgc3VwcG9ydHMgbmF0aXZlIGBUZXh0VHJhY2tgcy5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IHtAbGluayBIdG1sNS5zdXBwb3J0c05hdGl2ZVRleHRUcmFja3N9XG4gKi9cblxuSHRtbDUucHJvdG90eXBlLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyA9IEh0bWw1LnN1cHBvcnRzTmF0aXZlVGV4dFRyYWNrcygpO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhUTUw1YCB0ZWNoIGN1cnJlbnRseSBzdXBwb3J0cyBuYXRpdmUgYFZpZGVvVHJhY2tgcy5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IHtAbGluayBIdG1sNS5zdXBwb3J0c05hdGl2ZVZpZGVvVHJhY2tzfVxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZVZpZGVvVHJhY2tzID0gSHRtbDUuc3VwcG9ydHNOYXRpdmVWaWRlb1RyYWNrcygpO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhUTUw1YCB0ZWNoIGN1cnJlbnRseSBzdXBwb3J0cyBuYXRpdmUgYEF1ZGlvVHJhY2tgcy5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IHtAbGluayBIdG1sNS5zdXBwb3J0c05hdGl2ZUF1ZGlvVHJhY2tzfVxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZUF1ZGlvVHJhY2tzID0gSHRtbDUuc3VwcG9ydHNOYXRpdmVBdWRpb1RyYWNrcygpOyAvLyBIVE1MNSBGZWF0dXJlIGRldGVjdGlvbiBhbmQgRGV2aWNlIEZpeGVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgY2FuUGxheVR5cGUgPSBIdG1sNS5URVNUX1ZJRCAmJiBIdG1sNS5URVNUX1ZJRC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY2FuUGxheVR5cGU7XG52YXIgbXBlZ3VybFJFID0gL15hcHBsaWNhdGlvblxcLyg/OngtfHZuZFxcLmFwcGxlXFwuKW1wZWd1cmwvaTtcblxuSHRtbDUucGF0Y2hDYW5QbGF5VHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQW5kcm9pZCA0LjAgYW5kIGFib3ZlIGNhbiBwbGF5IEhMUyB0byBzb21lIGV4dGVudCBidXQgaXQgcmVwb3J0cyBiZWluZyB1bmFibGUgdG8gZG8gc29cbiAgLy8gRmlyZWZveCBhbmQgQ2hyb21lIHJlcG9ydCBjb3JyZWN0bHlcbiAgaWYgKEFORFJPSURfVkVSU0lPTiA+PSA0LjAgJiYgIUlTX0ZJUkVGT1ggJiYgIUlTX0NIUk9NRSkge1xuICAgIEh0bWw1LlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBpZiAodHlwZSAmJiBtcGVndXJsUkUudGVzdCh0eXBlKSkge1xuICAgICAgICByZXR1cm4gJ21heWJlJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhblBsYXlUeXBlLmNhbGwodGhpcywgdHlwZSk7XG4gICAgfTtcbiAgfVxufTtcblxuSHRtbDUudW5wYXRjaENhblBsYXlUeXBlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgciA9IEh0bWw1LlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZTtcbiAgSHRtbDUuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlID0gY2FuUGxheVR5cGU7XG4gIHJldHVybiByO1xufTsgLy8gYnkgZGVmYXVsdCwgcGF0Y2ggdGhlIG1lZGlhIGVsZW1lbnRcblxuXG5IdG1sNS5wYXRjaENhblBsYXlUeXBlKCk7XG5cbkh0bWw1LmRpc3Bvc2VNZWRpYUVsZW1lbnQgPSBmdW5jdGlvbiAoZWwpIHtcbiAgaWYgKCFlbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5wYXJlbnROb2RlKSB7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0gLy8gcmVtb3ZlIGFueSBjaGlsZCB0cmFjayBvciBzb3VyY2Ugbm9kZXMgdG8gcHJldmVudCB0aGVpciBsb2FkaW5nXG5cblxuICB3aGlsZSAoZWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gIH0gLy8gcmVtb3ZlIGFueSBzcmMgcmVmZXJlbmNlLiBub3Qgc2V0dGluZyBgc3JjPScnYCBiZWNhdXNlIHRoYXQgY2F1c2VzIGEgd2FybmluZ1xuICAvLyBpbiBmaXJlZm94XG5cblxuICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpOyAvLyBmb3JjZSB0aGUgbWVkaWEgZWxlbWVudCB0byB1cGRhdGUgaXRzIGxvYWRpbmcgc3RhdGUgYnkgY2FsbGluZyBsb2FkKClcbiAgLy8gaG93ZXZlciBJRSBvbiBXaW5kb3dzIDdOIGhhcyBhIGJ1ZyB0aGF0IHRocm93cyBhbiBlcnJvciBzbyBuZWVkIGEgdHJ5L2NhdGNoICgjNzkzKVxuXG4gIGlmICh0eXBlb2YgZWwubG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHdyYXBwaW5nIGluIGFuIGlpZmUgc28gaXQncyBub3QgZGVvcHRpbWl6ZWQgKCMxMDYwI2Rpc2N1c3Npb25fcjEwMzI0NDczKVxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBlbC5sb2FkKCk7XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gbm90IHN1cHBvcnRlZFxuICAgICAgfVxuICAgIH0pKCk7XG4gIH1cbn07XG5cbkh0bWw1LnJlc2V0TWVkaWFFbGVtZW50ID0gZnVuY3Rpb24gKGVsKSB7XG4gIGlmICghZWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc291cmNlcyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NvdXJjZScpO1xuICB2YXIgaSA9IHNvdXJjZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBlbC5yZW1vdmVDaGlsZChzb3VyY2VzW2ldKTtcbiAgfSAvLyByZW1vdmUgYW55IHNyYyByZWZlcmVuY2UuXG4gIC8vIG5vdCBzZXR0aW5nIGBzcmM9JydgIGJlY2F1c2UgdGhhdCB0aHJvd3MgYW4gZXJyb3JcblxuXG4gIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7XG5cbiAgaWYgKHR5cGVvZiBlbC5sb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gd3JhcHBpbmcgaW4gYW4gaWlmZSBzbyBpdCdzIG5vdCBkZW9wdGltaXplZCAoIzEwNjAjZGlzY3Vzc2lvbl9yMTAzMjQ0NzMpXG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsLmxvYWQoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBzYXRpc2Z5IGxpbnRlclxuICAgICAgfVxuICAgIH0pKCk7XG4gIH1cbn07XG4vKiBOYXRpdmUgSFRNTDUgZWxlbWVudCBwcm9wZXJ0eSB3cmFwcGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLy8gV3JhcCBuYXRpdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdpdGggZ2V0dGVycyB0aGF0IGNoZWNrIGJvdGggcHJvcGVydHkgYW5kIGF0dHJpYnV0ZVxuLy8gVGhlIGxpc3QgaXMgYXMgZm9sbG93ZWQ6XG4vLyBtdXRlZCwgZGVmYXVsdE11dGVkLCBhdXRvcGxheSwgY29udHJvbHMsIGxvb3AsIHBsYXlzaW5saW5lXG5cblxuW1xuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBtdXRlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYG11dGVkYCBpbmRpY2F0ZXNcbiAqIHRoYXQgdGhlIHZvbHVtZSBmb3IgdGhlIG1lZGlhIHNob3VsZCBiZSBzZXQgdG8gc2lsZW50LiBUaGlzIGRvZXMgbm90IGFjdHVhbGx5IGNoYW5nZVxuICogdGhlIGB2b2x1bWVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I211dGVkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAtIFRydWUgaWYgdGhlIHZhbHVlIG9mIGB2b2x1bWVgIHNob3VsZCBiZSBpZ25vcmVkIGFuZCB0aGUgYXVkaW8gc2V0IHRvIHNpbGVudC5cbiAqICAgICAgICAgLSBGYWxzZSBpZiB0aGUgdmFsdWUgb2YgYHZvbHVtZWAgc2hvdWxkIGJlIHVzZWQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1tdXRlZH1cbiAqL1xuJ211dGVkJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgZGVmYXVsdE11dGVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgZGVmYXVsdE11dGVkYCBpbmRpY2F0ZXNcbiAqIHdoZXRoZXIgdGhlIG1lZGlhIHNob3VsZCBzdGFydCBtdXRlZCBvciBub3QuIE9ubHkgY2hhbmdlcyB0aGUgZGVmYXVsdCBzdGF0ZSBvZiB0aGVcbiAqIG1lZGlhLiBgbXV0ZWRgIGFuZCBgZGVmYXVsdE11dGVkYCBjYW4gaGF2ZSBkaWZmZXJlbnQgdmFsdWVzLiB7QGxpbmsgSHRtbDUjbXV0ZWR9IGluZGljYXRlcyB0aGVcbiAqIGN1cnJlbnQgc3RhdGUuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNkZWZhdWx0TXV0ZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIGBkZWZhdWx0TXV0ZWRgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuXG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIHN0YXJ0IG11dGVkLlxuICogICAgICAgICAtIEZhbHNlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgbm90IHN0YXJ0IG11dGVkXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1kZWZhdWx0bXV0ZWR9XG4gKi9cbidkZWZhdWx0TXV0ZWQnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBhdXRvcGxheWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGF1dG9wbGF5YCBpbmRpY2F0ZXNcbiAqIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBzdGFydCB0byBwbGF5IGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgcmVhZHkuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNhdXRvcGxheVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgYGF1dG9wbGF5YCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBzdGFydCBhcyBzb29uIGFzIHRoZSBwYWdlIGxvYWRzLlxuICogICAgICAgICAtIEZhbHNlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgbm90IHN0YXJ0IGFzIHNvb24gYXMgdGhlIHBhZ2UgbG9hZHMuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItbWVkaWEtYXV0b3BsYXl9XG4gKi9cbidhdXRvcGxheScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYGNvbnRyb2xzYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgY29udHJvbHNgIGluZGljYXRlc1xuICogd2hldGhlciB0aGUgbmF0aXZlIG1lZGlhIGNvbnRyb2xzIHNob3VsZCBiZSBzaG93biBvciBoaWRkZW4uXG4gKlxuICogQG1ldGhvZCBIdG1sNSNjb250cm9sc1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgYGNvbnRyb2xzYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgbmF0aXZlIGNvbnRyb2xzIHNob3VsZCBiZSBzaG93aW5nLlxuICogICAgICAgICAtIEZhbHNlIGluZGljYXRlcyB0aGF0IG5hdGl2ZSBjb250cm9scyBzaG91bGQgYmUgaGlkZGVuLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNhdHRyLW1lZGlhLWNvbnRyb2xzfVxuICovXG4nY29udHJvbHMnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBsb29wYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgbG9vcGAgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSBtZWRpYSBzaG91bGQgcmV0dXJuIHRvIHRoZSBzdGFydCBvZiB0aGUgbWVkaWEgYW5kIGNvbnRpbnVlIHBsYXlpbmcgb25jZVxuICogaXQgcmVhY2hlcyB0aGUgZW5kLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjbG9vcFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgYGxvb3BgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuXG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCBwbGF5YmFjayBzaG91bGQgc2VlayBiYWNrIHRvIHN0YXJ0IG9uY2VcbiAqICAgICAgICAgICB0aGUgZW5kIG9mIGEgbWVkaWEgaXMgcmVhY2hlZC5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCBwbGF5YmFjayBzaG91bGQgbm90IGxvb3AgYmFjayB0byB0aGUgc3RhcnQgd2hlbiB0aGVcbiAqICAgICAgICAgICBlbmQgb2YgdGhlIG1lZGlhIGlzIHJlYWNoZWQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItbWVkaWEtbG9vcH1cbiAqL1xuJ2xvb3AnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBwbGF5c2lubGluZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHBsYXlzaW5saW5lYCBpbmRpY2F0ZXNcbiAqIHRvIHRoZSBicm93c2VyIHRoYXQgbm9uLWZ1bGxzY3JlZW4gcGxheWJhY2sgaXMgcHJlZmVycmVkIHdoZW4gZnVsbHNjcmVlblxuICogcGxheWJhY2sgaXMgdGhlIG5hdGl2ZSBkZWZhdWx0LCBzdWNoIGFzIGluIGlPUyBTYWZhcmkuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNwbGF5c2lubGluZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgYHBsYXlzaW5saW5lYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBwbGF5IGlubGluZS5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIG5vdCBwbGF5IGlubGluZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNhdHRyLXZpZGVvLXBsYXlzaW5saW5lfVxuICovXG4ncGxheXNpbmxpbmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIEh0bWw1LnByb3RvdHlwZVtwcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5lbF9bcHJvcF0gfHwgdGhpcy5lbF8uaGFzQXR0cmlidXRlKHByb3ApO1xuICB9O1xufSk7IC8vIFdyYXAgbmF0aXZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aXRoIHNldHRlcnMgdGhhdCBzZXQgYm90aCBwcm9wZXJ0eSBhbmQgYXR0cmlidXRlXG4vLyBUaGUgbGlzdCBpcyBhcyBmb2xsb3dlZDpcbi8vIHNldE11dGVkLCBzZXREZWZhdWx0TXV0ZWQsIHNldEF1dG9wbGF5LCBzZXRMb29wLCBzZXRQbGF5c2lubGluZVxuLy8gc2V0Q29udHJvbHMgaXMgc3BlY2lhbC1jYXNlZCBhYm92ZVxuXG5bXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYG11dGVkYCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYG11dGVkYCBpbmRpY2F0ZXMgdGhhdCB0aGUgY3VycmVudFxuICogYXVkaW8gbGV2ZWwgc2hvdWxkIGJlIHNpbGVudC5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldE11dGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG11dGVkXG4gKiAgICAgICAgLSBUcnVlIGlmIHRoZSBhdWRpbyBzaG91bGQgYmUgc2V0IHRvIHNpbGVudFxuICogICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1tdXRlZH1cbiAqL1xuJ211dGVkJyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgZGVmYXVsdE11dGVkYCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYGRlZmF1bHRNdXRlZGAgaW5kaWNhdGVzIHRoYXQgdGhlIGN1cnJlbnRcbiAqIGF1ZGlvIGxldmVsIHNob3VsZCBiZSBzaWxlbnQsIGJ1dCB3aWxsIG9ubHkgZWZmZWN0IHRoZSBtdXRlZCBsZXZlbCBvbiBpbnRpYWwgcGxheWJhY2suLlxuICpcbiAqIEBtZXRob2QgSHRtbDUucHJvdG90eXBlLnNldERlZmF1bHRNdXRlZFxuICogQHBhcmFtIHtib29sZWFufSBkZWZhdWx0TXV0ZWRcbiAqICAgICAgICAtIFRydWUgaWYgdGhlIGF1ZGlvIHNob3VsZCBiZSBzZXQgdG8gc2lsZW50XG4gKiAgICAgICAgLSBGYWxzZSBvdGhlcndpc2VcbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWRlZmF1bHRtdXRlZH1cbiAqL1xuJ2RlZmF1bHRNdXRlZCcsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYGF1dG9wbGF5YCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYGF1dG9wbGF5YCBpbmRpY2F0ZXNcbiAqIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBzdGFydCB0byBwbGF5IGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgcmVhZHkuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRBdXRvcGxheVxuICogQHBhcmFtIHtib29sZWFufSBhdXRvcGxheVxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBzdGFydCBhcyBzb29uIGFzIHRoZSBwYWdlIGxvYWRzLlxuICogICAgICAgICAtIEZhbHNlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgbm90IHN0YXJ0IGFzIHNvb24gYXMgdGhlIHBhZ2UgbG9hZHMuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItbWVkaWEtYXV0b3BsYXl9XG4gKi9cbidhdXRvcGxheScsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYGxvb3BgIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBgbG9vcGAgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSBtZWRpYSBzaG91bGQgcmV0dXJuIHRvIHRoZSBzdGFydCBvZiB0aGUgbWVkaWEgYW5kIGNvbnRpbnVlIHBsYXlpbmcgb25jZVxuICogaXQgcmVhY2hlcyB0aGUgZW5kLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjc2V0TG9vcFxuICogQHBhcmFtIHtib29sZWFufSBsb29wXG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCBwbGF5YmFjayBzaG91bGQgc2VlayBiYWNrIHRvIHN0YXJ0IG9uY2VcbiAqICAgICAgICAgICB0aGUgZW5kIG9mIGEgbWVkaWEgaXMgcmVhY2hlZC5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCBwbGF5YmFjayBzaG91bGQgbm90IGxvb3AgYmFjayB0byB0aGUgc3RhcnQgd2hlbiB0aGVcbiAqICAgICAgICAgICBlbmQgb2YgdGhlIG1lZGlhIGlzIHJlYWNoZWQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItbWVkaWEtbG9vcH1cbiAqL1xuJ2xvb3AnLFxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGBwbGF5c2lubGluZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHBsYXlzaW5saW5lYCBpbmRpY2F0ZXNcbiAqIHRvIHRoZSBicm93c2VyIHRoYXQgbm9uLWZ1bGxzY3JlZW4gcGxheWJhY2sgaXMgcHJlZmVycmVkIHdoZW4gZnVsbHNjcmVlblxuICogcGxheWJhY2sgaXMgdGhlIG5hdGl2ZSBkZWZhdWx0LCBzdWNoIGFzIGluIGlPUyBTYWZhcmkuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRQbGF5c2lubGluZVxuICogQHBhcmFtIHtib29sZWFufSBwbGF5c2lubGluZVxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBwbGF5IGlubGluZS5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIG5vdCBwbGF5IGlubGluZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNhdHRyLXZpZGVvLXBsYXlzaW5saW5lfVxuICovXG4ncGxheXNpbmxpbmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIEh0bWw1LnByb3RvdHlwZVsnc2V0JyArIHRvVGl0bGVDYXNlKHByb3ApXSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdGhpcy5lbF9bcHJvcF0gPSB2O1xuXG4gICAgaWYgKHYpIHtcbiAgICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZShwcm9wLCBwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbF8ucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfTtcbn0pOyAvLyBXcmFwIG5hdGl2ZSBwcm9wZXJ0aWVzIHdpdGggYSBnZXR0ZXJcbi8vIFRoZSBsaXN0IGlzIGFzIGZvbGxvd2VkXG4vLyBwYXVzZWQsIGN1cnJlbnRUaW1lLCBidWZmZXJlZCwgdm9sdW1lLCBwb3N0ZXIsIHByZWxvYWQsIGVycm9yLCBzZWVraW5nXG4vLyBzZWVrYWJsZSwgZW5kZWQsIHBsYXliYWNrUmF0ZSwgZGVmYXVsdFBsYXliYWNrUmF0ZSwgcGxheWVkLCBuZXR3b3JrU3RhdGVcbi8vIHJlYWR5U3RhdGUsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0XG5cbltcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgcGF1c2VkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcGF1c2VkYCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgbWVkaWEgZWxlbWVudFxuICogaXMgY3VycmVudGx5IHBhdXNlZCBvciBub3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNwYXVzZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgcGF1c2VkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtcGF1c2VkfVxuICovXG4ncGF1c2VkJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgY3VycmVudFRpbWVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBjdXJyZW50VGltZWAgaW5kaWNhdGVzXG4gKiB0aGUgY3VycmVudCBzZWNvbmQgdGhhdCB0aGUgbWVkaWEgaXMgYXQgaW4gcGxheWJhY2suXG4gKlxuICogQG1ldGhvZCBIdG1sNSNjdXJyZW50VGltZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYGN1cnJlbnRUaW1lYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtY3VycmVudHRpbWV9XG4gKi9cbidjdXJyZW50VGltZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYGJ1ZmZlcmVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgYnVmZmVyZWRgIGlzIGEgYFRpbWVSYW5nZWBcbiAqIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHBhcnRzIG9mIHRoZSBtZWRpYSB0aGF0IGFyZSBhbHJlYWR5IGRvd25sb2FkZWQgYW5kXG4gKiBhdmFpbGFibGUgZm9yIHBsYXliYWNrLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjYnVmZmVyZWRcbiAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBidWZmZXJlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWJ1ZmZlcmVkfVxuICovXG4nYnVmZmVyZWQnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGB2b2x1bWVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGB2b2x1bWVgIGluZGljYXRlc1xuICogdGhlIGN1cnJlbnQgcGxheWJhY2sgdm9sdW1lIG9mIGF1ZGlvIGZvciBhIG1lZGlhLiBgdm9sdW1lYCB3aWxsIGJlIGEgdmFsdWUgZnJvbSAwXG4gKiAoc2lsZW50KSB0byAxIChsb3VkZXN0IGFuZCBkZWZhdWx0KS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3ZvbHVtZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHZvbHVtZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gVmFsdWUgd2lsbCBiZSBiZXR3ZWVuIDAtMS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLWEtdm9sdW1lfVxuICovXG4ndm9sdW1lJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgcG9zdGVyYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcG9zdGVyYCBpbmRpY2F0ZXNcbiAqIHRoYXQgdGhlIHVybCBvZiBhbiBpbWFnZSBmaWxlIHRoYXQgY2FuL3dpbGwgYmUgc2hvd24gd2hlbiBubyBtZWRpYSBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3Bvc3RlclxuICogQHJldHVybiB7c3RyaW5nfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHBvc3RlcmAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gVmFsdWUgd2lsbCBiZSBhIHVybCB0byBhblxuICogICAgICAgICBpbWFnZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjYXR0ci12aWRlby1wb3N0ZXJ9XG4gKi9cbidwb3N0ZXInLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBwcmVsb2FkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcHJlbG9hZGAgaW5kaWNhdGVzXG4gKiB3aGF0IHNob3VsZCBkb3dubG9hZCBiZWZvcmUgdGhlIG1lZGlhIGlzIGludGVyYWN0ZWQgd2l0aC4gSXQgY2FuIGhhdmUgdGhlIGZvbGxvd2luZ1xuICogdmFsdWVzOlxuICogLSBub25lOiBub3RoaW5nIHNob3VsZCBiZSBkb3dubG9hZGVkXG4gKiAtIG1ldGFkYXRhOiBwb3N0ZXIgYW5kIHRoZSBmaXJzdCBmZXcgZnJhbWVzIG9mIHRoZSBtZWRpYSBtYXkgYmUgZG93bmxvYWRlZCB0byBnZXRcbiAqICAgbWVkaWEgZGltZW5zaW9ucyBhbmQgb3RoZXIgbWV0YWRhdGFcbiAqIC0gYXV0bzogYWxsb3cgdGhlIG1lZGlhIGFuZCBtZXRhZGF0YSBmb3IgdGhlIG1lZGlhIHRvIGJlIGRvd25sb2FkZWQgYmVmb3JlXG4gKiAgICBpbnRlcmFjdGlvblxuICpcbiAqIEBtZXRob2QgSHRtbDUjcHJlbG9hZFxuICogQHJldHVybiB7c3RyaW5nfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHByZWxvYWRgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIFdpbGwgYmUgJ25vbmUnLCAnbWV0YWRhdGEnLFxuICogICAgICAgICBvciAnYXV0bycuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItbWVkaWEtcHJlbG9hZH1cbiAqL1xuJ3ByZWxvYWQnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBgZXJyb3JgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBlcnJvcmAgaW5kaWNhdGVzIGFueVxuICogTWVkaWFFcnJvciB0aGF0IG1heSBoYXZlIG9jY3VycmVkIGR1cmluZyBwbGF5YmFjay4gSWYgZXJyb3IgcmV0dXJucyBudWxsIHRoZXJlIGlzIG5vXG4gKiBjdXJyZW50IGVycm9yLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjZXJyb3JcbiAqIEByZXR1cm4ge01lZGlhRXJyb3J8bnVsbH1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBlcnJvcmAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gV2lsbCBiZSBgTWVkaWFFcnJvcmAgaWYgdGhlcmVcbiAqICAgICAgICAgaXMgYSBjdXJyZW50IGVycm9yIGFuZCBudWxsIG90aGVyd2lzZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWVycm9yfVxuICovXG4nZXJyb3InLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBzZWVraW5nYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgc2Vla2luZ2AgaW5kaWNhdGVzIHdoZXRoZXIgdGhlXG4gKiBtZWRpYSBpcyBjdXJyZW50bHkgc2Vla2luZyB0byBhIG5ldyBwb3NpdGlvbiBvciBub3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZWVraW5nXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAtIFRoZSB2YWx1ZSBvZiBgc2Vla2luZ2AgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqICAgICAgICAgLSBUcnVlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBpcyBjdXJyZW50bHkgc2Vla2luZyB0byBhIG5ldyBwb3NpdGlvbi5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgaXMgbm90IHNlZWtpbmcgdG8gYSBuZXcgcG9zaXRpb24gYXQgdGhpcyB0aW1lLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtc2Vla2luZ31cbiAqL1xuJ3NlZWtpbmcnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBzZWVrYWJsZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHNlZWthYmxlYCByZXR1cm5zIGFcbiAqIGBUaW1lUmFuZ2VgIG9iamVjdCBpbmRpY2F0aW5nIHJhbmdlcyBvZiB0aW1lIHRoYXQgY2FuIGN1cnJlbnRseSBiZSBgc2Vla2VkYCB0by5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NlZWthYmxlXG4gKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgc2Vla2FibGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIEEgYFRpbWVSYW5nZWAgb2JqZWN0XG4gKiAgICAgICAgIGluZGljYXRpbmcgdGhlIGN1cnJlbnQgcmFuZ2VzIG9mIHRpbWUgdGhhdCBjYW4gYmUgc2Vla2VkIHRvLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtc2Vla2FibGV9XG4gKi9cbidzZWVrYWJsZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYGVuZGVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgZW5kZWRgIGluZGljYXRlcyB3aGV0aGVyXG4gKiB0aGUgbWVkaWEgaGFzIHJlYWNoZWQgdGhlIGVuZCBvciBub3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNlbmRlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgYGVuZGVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIGhhcyBlbmRlZC5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgaGFzIG5vdCBlbmRlZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWVuZGVkfVxuICovXG4nZW5kZWQnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBwbGF5YmFja1JhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBwbGF5YmFja1JhdGVgIGluZGljYXRlc1xuICogdGhlIHJhdGUgYXQgd2hpY2ggdGhlIG1lZGlhIGlzIGN1cnJlbnRseSBwbGF5aW5nIGJhY2suIEV4YW1wbGVzOlxuICogICAtIGlmIHBsYXliYWNrUmF0ZSBpcyBzZXQgdG8gMiwgbWVkaWEgd2lsbCBwbGF5IHR3aWNlIGFzIGZhc3QuXG4gKiAgIC0gaWYgcGxheWJhY2tSYXRlIGlzIHNldCB0byAwLjUsIG1lZGlhIHdpbGwgcGxheSBoYWxmIGFzIGZhc3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNwbGF5YmFja1JhdGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBwbGF5YmFja1JhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIEEgbnVtYmVyIGluZGljYXRpbmdcbiAqICAgICAgICAgdGhlIGN1cnJlbnQgcGxheWJhY2sgc3BlZWQgb2YgdGhlIG1lZGlhLCB3aGVyZSAxIGlzIG5vcm1hbCBzcGVlZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBsYXliYWNrcmF0ZX1cbiAqL1xuJ3BsYXliYWNrUmF0ZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYGRlZmF1bHRQbGF5YmFja1JhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBkZWZhdWx0UGxheWJhY2tSYXRlYCBpbmRpY2F0ZXNcbiAqIHRoZSByYXRlIGF0IHdoaWNoIHRoZSBtZWRpYSBpcyBjdXJyZW50bHkgcGxheWluZyBiYWNrLiBUaGlzIHZhbHVlIHdpbGwgbm90IGluZGljYXRlIHRoZSBjdXJyZW50XG4gKiBgcGxheWJhY2tSYXRlYCBhZnRlciBwbGF5YmFjayBoYXMgc3RhcnRlZCwgdXNlIHtAbGluayBIdG1sNSNwbGF5YmFja1JhdGV9IGZvciB0aGF0LlxuICpcbiAqIEV4YW1wbGVzOlxuICogICAtIGlmIGRlZmF1bHRQbGF5YmFja1JhdGUgaXMgc2V0IHRvIDIsIG1lZGlhIHdpbGwgcGxheSB0d2ljZSBhcyBmYXN0LlxuICogICAtIGlmIGRlZmF1bHRQbGF5YmFja1JhdGUgaXMgc2V0IHRvIDAuNSwgbWVkaWEgd2lsbCBwbGF5IGhhbGYgYXMgZmFzdC5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1LnByb3RvdHlwZS5kZWZhdWx0UGxheWJhY2tSYXRlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgZGVmYXVsdFBsYXliYWNrUmF0ZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gQSBudW1iZXIgaW5kaWNhdGluZ1xuICogICAgICAgICB0aGUgY3VycmVudCBwbGF5YmFjayBzcGVlZCBvZiB0aGUgbWVkaWEsIHdoZXJlIDEgaXMgbm9ybWFsIHNwZWVkLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtcGxheWJhY2tyYXRlfVxuICovXG4nZGVmYXVsdFBsYXliYWNrUmF0ZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYHBsYXllZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHBsYXllZGAgcmV0dXJucyBhIGBUaW1lUmFuZ2VgXG4gKiBvYmplY3QgcmVwcmVzZW50aW5nIHBvaW50cyBpbiB0aGUgbWVkaWEgdGltZWxpbmUgdGhhdCBoYXZlIGJlZW4gcGxheWVkLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjcGxheWVkXG4gKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgcGxheWVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBBIGBUaW1lUmFuZ2VgIG9iamVjdCBpbmRpY2F0aW5nXG4gKiAgICAgICAgIHRoZSByYW5nZXMgb2YgdGltZSB0aGF0IGhhdmUgYmVlbiBwbGF5ZWQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1wbGF5ZWR9XG4gKi9cbidwbGF5ZWQnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBuZXR3b3JrU3RhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBuZXR3b3JrU3RhdGVgIGluZGljYXRlc1xuICogdGhlIGN1cnJlbnQgbmV0d29yayBzdGF0ZS4gSXQgcmV0dXJucyBhbiBlbnVtZXJhdGlvbiBmcm9tIHRoZSBmb2xsb3dpbmcgbGlzdDpcbiAqIC0gMDogTkVUV09SS19FTVBUWVxuICogLSAxOiBORVRXT1JLX0lETEVcbiAqIC0gMjogTkVUV09SS19MT0FESU5HXG4gKiAtIDM6IE5FVFdPUktfTk9fU09VUkNFXG4gKlxuICogQG1ldGhvZCBIdG1sNSNuZXR3b3JrU3RhdGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBuZXR3b3JrU3RhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIFRoaXMgd2lsbCBiZSBhIG51bWJlclxuICogICAgICAgICBmcm9tIHRoZSBsaXN0IGluIHRoZSBkZXNjcmlwdGlvbi5cbiAqXG4gKiBAc2VlIFtTcGVjXSB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1uZXR3b3Jrc3RhdGV9XG4gKi9cbiduZXR3b3JrU3RhdGUnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGByZWFkeVN0YXRlYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcmVhZHlTdGF0ZWAgaW5kaWNhdGVzXG4gKiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgbWVkaWEgZWxlbWVudC4gSXQgcmV0dXJucyBhbiBlbnVtZXJhdGlvbiBmcm9tIHRoZVxuICogZm9sbG93aW5nIGxpc3Q6XG4gKiAtIDA6IEhBVkVfTk9USElOR1xuICogLSAxOiBIQVZFX01FVEFEQVRBXG4gKiAtIDI6IEhBVkVfQ1VSUkVOVF9EQVRBXG4gKiAtIDM6IEhBVkVfRlVUVVJFX0RBVEFcbiAqIC0gNDogSEFWRV9FTk9VR0hfREFUQVxuICpcbiAqIEBtZXRob2QgSHRtbDUjcmVhZHlTdGF0ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHJlYWR5U3RhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIFRoaXMgd2lsbCBiZSBhIG51bWJlclxuICogICAgICAgICBmcm9tIHRoZSBsaXN0IGluIHRoZSBkZXNjcmlwdGlvbi5cbiAqXG4gKiBAc2VlIFtTcGVjXSB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI3JlYWR5LXN0YXRlc31cbiAqL1xuJ3JlYWR5U3RhdGUnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGB2aWRlb1dpZHRoYCBmcm9tIHRoZSB2aWRlbyBlbGVtZW50LiBgdmlkZW9XaWR0aGAgaW5kaWNhdGVzXG4gKiB0aGUgY3VycmVudCB3aWR0aCBvZiB0aGUgdmlkZW8gaW4gY3NzIHBpeGVscy5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3ZpZGVvV2lkdGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGB2aWRlb1dpZHRoYCBmcm9tIHRoZSB2aWRlbyBlbGVtZW50LiBUaGlzIHdpbGwgYmUgYSBudW1iZXJcbiAqICAgICAgICAgaW4gY3NzIHBpeGVscy5cbiAqXG4gKiBAc2VlIFtTcGVjXSB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS12aWRlby12aWRlb3dpZHRofVxuICovXG4ndmlkZW9XaWR0aCcsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYHZpZGVvSGVpZ2h0YCBmcm9tIHRoZSB2aWRlbyBlbGVtZW50LiBgdmlkZW9IZWlnaHRgIGluZGljYXRlc1xuICogdGhlIGN1cnJlbnQgaGVpZ2h0IG9mIHRoZSB2aWRlbyBpbiBjc3MgcGl4ZWxzLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjdmlkZW9IZWlnaHRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGB2aWRlb0hlaWdodGAgZnJvbSB0aGUgdmlkZW8gZWxlbWVudC4gVGhpcyB3aWxsIGJlIGEgbnVtYmVyXG4gKiAgICAgICAgIGluIGNzcyBwaXhlbHMuXG4gKlxuICogQHNlZSBbU3BlY10ge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tdmlkZW8tdmlkZW93aWR0aH1cbiAqL1xuJ3ZpZGVvSGVpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBIdG1sNS5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfW3Byb3BdO1xuICB9O1xufSk7IC8vIFdyYXAgbmF0aXZlIHByb3BlcnRpZXMgd2l0aCBhIHNldHRlciBpbiB0aGlzIGZvcm1hdDpcbi8vIHNldCArIHRvVGl0bGVDYXNlKG5hbWUpXG4vLyBUaGUgbGlzdCBpcyBhcyBmb2xsb3dzOlxuLy8gc2V0Vm9sdW1lLCBzZXRTcmMsIHNldFBvc3Rlciwgc2V0UHJlbG9hZCwgc2V0UGxheWJhY2tSYXRlLCBzZXREZWZhdWx0UGxheWJhY2tSYXRlXG5cbltcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgdm9sdW1lYCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYHZvbHVtZWAgaW5kaWNhdGVzIHRoZSBjdXJyZW50XG4gKiBhdWRpbyBsZXZlbCBhcyBhIHBlcmNlbnRhZ2UgaW4gZGVjaW1hbCBmb3JtLiBUaGlzIG1lYW5zIHRoYXQgMSBpcyAxMDAlLCAwLjUgaXMgNTAlLCBhbmRcbiAqIHNvIG9uLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjc2V0Vm9sdW1lXG4gKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudEFzRGVjaW1hbFxuICogICAgICAgIFRoZSB2b2x1bWUgcGVyY2VudCBhcyBhIGRlY2ltYWwuIFZhbGlkIHJhbmdlIGlzIGZyb20gMC0xLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tYS12b2x1bWV9XG4gKi9cbid2b2x1bWUnLFxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGBzcmNgIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBgc3JjYCBpbmRpY2F0ZXMgdGhlIGN1cnJlbnRcbiAqIHtAbGluayBUZWNoflNvdXJjZU9iamVjdH0gZm9yIHRoZSBtZWRpYS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldFNyY1xuICogQHBhcmFtIHtUZWNoflNvdXJjZU9iamVjdH0gc3JjXG4gKiAgICAgICAgVGhlIHNvdXJjZSBvYmplY3QgdG8gc2V0IGFzIHRoZSBjdXJyZW50IHNvdXJjZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXNyY31cbiAqL1xuJ3NyYycsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYHBvc3RlcmAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBwb3N0ZXJgIGlzIHRoZSB1cmwgdG9cbiAqIGFuIGltYWdlIGZpbGUgdGhhdCBjYW4vd2lsbCBiZSBzaG93biB3aGVuIG5vIG1lZGlhIGRhdGEgaXMgYXZhaWxhYmxlLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjc2V0UG9zdGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9zdGVyXG4gKiAgICAgICAgVGhlIHVybCB0byBhbiBpbWFnZSB0aGF0IHNob3VsZCBiZSB1c2VkIGFzIHRoZSBgcG9zdGVyYCBmb3IgdGhlIG1lZGlhXG4gKiAgICAgICAgZWxlbWVudC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjYXR0ci1tZWRpYS1wb3N0ZXJ9XG4gKi9cbidwb3N0ZXInLFxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGBwcmVsb2FkYCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYHByZWxvYWRgIGluZGljYXRlc1xuICogd2hhdCBzaG91bGQgZG93bmxvYWQgYmVmb3JlIHRoZSBtZWRpYSBpcyBpbnRlcmFjdGVkIHdpdGguIEl0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmdcbiAqIHZhbHVlczpcbiAqIC0gbm9uZTogbm90aGluZyBzaG91bGQgYmUgZG93bmxvYWRlZFxuICogLSBtZXRhZGF0YTogcG9zdGVyIGFuZCB0aGUgZmlyc3QgZmV3IGZyYW1lcyBvZiB0aGUgbWVkaWEgbWF5IGJlIGRvd25sb2FkZWQgdG8gZ2V0XG4gKiAgIG1lZGlhIGRpbWVuc2lvbnMgYW5kIG90aGVyIG1ldGFkYXRhXG4gKiAtIGF1dG86IGFsbG93IHRoZSBtZWRpYSBhbmQgbWV0YWRhdGEgZm9yIHRoZSBtZWRpYSB0byBiZSBkb3dubG9hZGVkIGJlZm9yZVxuICogICAgaW50ZXJhY3Rpb25cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldFByZWxvYWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVsb2FkXG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgcHJlbG9hZGAgdG8gc2V0IG9uIHRoZSBtZWRpYSBlbGVtZW50LiBNdXN0IGJlICdub25lJywgJ21ldGFkYXRhJyxcbiAqICAgICAgICAgb3IgJ2F1dG8nLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNhdHRyLW1lZGlhLXByZWxvYWR9XG4gKi9cbidwcmVsb2FkJyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgcGxheWJhY2tSYXRlYCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYHBsYXliYWNrUmF0ZWAgaW5kaWNhdGVzXG4gKiB0aGUgcmF0ZSBhdCB3aGljaCB0aGUgbWVkaWEgc2hvdWxkIHBsYXkgYmFjay4gRXhhbXBsZXM6XG4gKiAgIC0gaWYgcGxheWJhY2tSYXRlIGlzIHNldCB0byAyLCBtZWRpYSB3aWxsIHBsYXkgdHdpY2UgYXMgZmFzdC5cbiAqICAgLSBpZiBwbGF5YmFja1JhdGUgaXMgc2V0IHRvIDAuNSwgbWVkaWEgd2lsbCBwbGF5IGhhbGYgYXMgZmFzdC5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldFBsYXliYWNrUmF0ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHBsYXliYWNrUmF0ZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gQSBudW1iZXIgaW5kaWNhdGluZ1xuICogICAgICAgICB0aGUgY3VycmVudCBwbGF5YmFjayBzcGVlZCBvZiB0aGUgbWVkaWEsIHdoZXJlIDEgaXMgbm9ybWFsIHNwZWVkLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtcGxheWJhY2tyYXRlfVxuICovXG4ncGxheWJhY2tSYXRlJyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgZGVmYXVsdFBsYXliYWNrUmF0ZWAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBkZWZhdWx0UGxheWJhY2tSYXRlYCBpbmRpY2F0ZXNcbiAqIHRoZSByYXRlIGF0IHdoaWNoIHRoZSBtZWRpYSBzaG91bGQgcGxheSBiYWNrIHVwb24gaW5pdGlhbCBzdGFydHVwLiBDaGFuZ2luZyB0aGlzIHZhbHVlXG4gKiBhZnRlciBhIHZpZGVvIGhhcyBzdGFydGVkIHdpbGwgZG8gbm90aGluZy4gSW5zdGVhZCB5b3Ugc2hvdWxkIHVzZWQge0BsaW5rIEh0bWw1I3NldFBsYXliYWNrUmF0ZX0uXG4gKlxuICogRXhhbXBsZSBWYWx1ZXM6XG4gKiAgIC0gaWYgcGxheWJhY2tSYXRlIGlzIHNldCB0byAyLCBtZWRpYSB3aWxsIHBsYXkgdHdpY2UgYXMgZmFzdC5cbiAqICAgLSBpZiBwbGF5YmFja1JhdGUgaXMgc2V0IHRvIDAuNSwgbWVkaWEgd2lsbCBwbGF5IGhhbGYgYXMgZmFzdC5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1LnByb3RvdHlwZS5zZXREZWZhdWx0UGxheWJhY2tSYXRlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgZGVmYXVsdFBsYXliYWNrUmF0ZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gQSBudW1iZXIgaW5kaWNhdGluZ1xuICogICAgICAgICB0aGUgY3VycmVudCBwbGF5YmFjayBzcGVlZCBvZiB0aGUgbWVkaWEsIHdoZXJlIDEgaXMgbm9ybWFsIHNwZWVkLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtZGVmYXVsdHBsYXliYWNrcmF0ZX1cbiAqL1xuJ2RlZmF1bHRQbGF5YmFja1JhdGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIEh0bWw1LnByb3RvdHlwZVsnc2V0JyArIHRvVGl0bGVDYXNlKHByb3ApXSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdGhpcy5lbF9bcHJvcF0gPSB2O1xuICB9O1xufSk7IC8vIHdyYXAgbmF0aXZlIGZ1bmN0aW9ucyB3aXRoIGEgZnVuY3Rpb25cbi8vIFRoZSBsaXN0IGlzIGFzIGZvbGxvd3M6XG4vLyBwYXVzZSwgbG9hZCwgcGxheVxuXG5bXG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgdGhlIG1lZGlhIGVsZW1lbnRzIGBwYXVzZWAgZnVuY3Rpb24uIFRoaXMgd2lsbCBjYWxsIHRoZSBgSFRNTDVgXG4gKiBtZWRpYSBlbGVtZW50cyBgcGF1c2VgIGZ1bmN0aW9uLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjcGF1c2VcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtcGF1c2V9XG4gKi9cbidwYXVzZScsXG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgdGhlIG1lZGlhIGVsZW1lbnRzIGBsb2FkYCBmdW5jdGlvbi4gVGhpcyB3aWxsIGNhbGwgdGhlIGBIVE1MNWBzXG4gKiBtZWRpYSBlbGVtZW50IGBsb2FkYCBmdW5jdGlvbi5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I2xvYWRcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtbG9hZH1cbiAqL1xuJ2xvYWQnLFxuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBtZWRpYSBlbGVtZW50cyBgcGxheWAgZnVuY3Rpb24uIFRoaXMgd2lsbCBjYWxsIHRoZSBgSFRNTDVgc1xuICogbWVkaWEgZWxlbWVudCBgcGxheWAgZnVuY3Rpb24uXG4gKlxuICogQG1ldGhvZCBIdG1sNSNwbGF5XG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBsYXl9XG4gKi9cbidwbGF5J10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBIdG1sNS5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfW3Byb3BdKCk7XG4gIH07XG59KTtcblRlY2gud2l0aFNvdXJjZUhhbmRsZXJzKEh0bWw1KTtcbi8qKlxuICogTmF0aXZlIHNvdXJjZSBoYW5kbGVyIGZvciBIdG1sNSwgc2ltcGx5IHBhc3NlcyB0aGUgc291cmNlIHRvIHRoZSBtZWRpYSBlbGVtZW50LlxuICpcbiAqIEBwcm9wZXJ0eSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNvdXJjZVxuICogICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gKlxuICogQHByb3BlcnR5IHtIdG1sNX0gdGVjaFxuICogICAgICAgIFRoZSBpbnN0YW5jZSBvZiB0aGUgSFRNTDUgdGVjaC5cbiAqL1xuXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyID0ge307XG4vKipcbiAqIENoZWNrIGlmIHRoZSBtZWRpYSBlbGVtZW50IGNhbiBwbGF5IHRoZSBnaXZlbiBtaW1lIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICBUaGUgbWltZXR5cGUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gKi9cblxuSHRtbDUubmF0aXZlU291cmNlSGFuZGxlci5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIC8vIElFIHdpdGhvdXQgTWVkaWFQbGF5ZXIgdGhyb3dzIGFuIGVycm9yICgjNTE5KVxuICB0cnkge1xuICAgIHJldHVybiBIdG1sNS5URVNUX1ZJRC5jYW5QbGF5VHlwZSh0eXBlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcbi8qKlxuICogQ2hlY2sgaWYgdGhlIG1lZGlhIGVsZW1lbnQgY2FuIGhhbmRsZSBhIHNvdXJjZSBuYXRpdmVseS5cbiAqXG4gKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzb3VyY2VcbiAqICAgICAgICAgVGhlIHNvdXJjZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiAgICAgICAgIE9wdGlvbnMgdG8gYmUgcGFzc2VkIHRvIHRoZSB0ZWNoLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZykuXG4gKi9cblxuXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhbkhhbmRsZVNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgLy8gSWYgYSB0eXBlIHdhcyBwcm92aWRlZCB3ZSBzaG91bGQgcmVseSBvbiB0aGF0XG4gIGlmIChzb3VyY2UudHlwZSkge1xuICAgIHJldHVybiBIdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhblBsYXlUeXBlKHNvdXJjZS50eXBlKTsgLy8gSWYgbm8gdHlwZSwgZmFsbCBiYWNrIHRvIGNoZWNraW5nICd2aWRlby9bRVhURU5TSU9OXSdcbiAgfSBlbHNlIGlmIChzb3VyY2Uuc3JjKSB7XG4gICAgdmFyIGV4dCA9IGdldEZpbGVFeHRlbnNpb24oc291cmNlLnNyYyk7XG4gICAgcmV0dXJuIEh0bWw1Lm5hdGl2ZVNvdXJjZUhhbmRsZXIuY2FuUGxheVR5cGUoXCJ2aWRlby9cIiArIGV4dCk7XG4gIH1cblxuICByZXR1cm4gJyc7XG59O1xuLyoqXG4gKiBQYXNzIHRoZSBzb3VyY2UgdG8gdGhlIG5hdGl2ZSBtZWRpYSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNvdXJjZVxuICogICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gKlxuICogQHBhcmFtIHtIdG1sNX0gdGVjaFxuICogICAgICAgIFRoZSBpbnN0YW5jZSBvZiB0aGUgSHRtbDUgdGVjaFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqICAgICAgICBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBzb3VyY2VcbiAqL1xuXG5cbkh0bWw1Lm5hdGl2ZVNvdXJjZUhhbmRsZXIuaGFuZGxlU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZSwgdGVjaCwgb3B0aW9ucykge1xuICB0ZWNoLnNldFNyYyhzb3VyY2Uuc3JjKTtcbn07XG4vKipcbiAqIEEgbm9vcCBmb3IgdGhlIG5hdGl2ZSBkaXNwb3NlIGZ1bmN0aW9uLCBhcyBjbGVhbnVwIGlzIG5vdCBuZWVkZWQuXG4gKi9cblxuXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTsgLy8gUmVnaXN0ZXIgdGhlIG5hdGl2ZSBzb3VyY2UgaGFuZGxlclxuXG5cbkh0bWw1LnJlZ2lzdGVyU291cmNlSGFuZGxlcihIdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyKTtcblRlY2gucmVnaXN0ZXJUZWNoKCdIdG1sNScsIEh0bWw1KTtcblxuLy8gb24gdGhlIHBsYXllciB3aGVuIHRoZXkgaGFwcGVuXG5cbnZhciBURUNIX0VWRU5UU19SRVRSSUdHRVIgPSBbXG4vKipcbiAqIEZpcmVkIHdoaWxlIHRoZSB1c2VyIGFnZW50IGlzIGRvd25sb2FkaW5nIG1lZGlhIGRhdGEuXG4gKlxuICogQGV2ZW50IFBsYXllciNwcm9ncmVzc1xuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgcHJvZ3Jlc3NgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoUHJvZ3Jlc3NfXG4gKiBAZmlyZXMgUGxheWVyI3Byb2dyZXNzXG4gKiBAbGlzdGVucyBUZWNoI3Byb2dyZXNzXG4gKi9cbidwcm9ncmVzcycsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIGxvYWRpbmcgb2YgYW4gYXVkaW8vdmlkZW8gaXMgYWJvcnRlZC5cbiAqXG4gKiBAZXZlbnQgUGxheWVyI2Fib3J0XG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGBhYm9ydGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hBYm9ydF9cbiAqIEBmaXJlcyBQbGF5ZXIjYWJvcnRcbiAqIEBsaXN0ZW5zIFRlY2gjYWJvcnRcbiAqL1xuJ2Fib3J0Jyxcbi8qKlxuICogRmlyZXMgd2hlbiB0aGUgYnJvd3NlciBpcyBpbnRlbnRpb25hbGx5IG5vdCBnZXR0aW5nIG1lZGlhIGRhdGEuXG4gKlxuICogQGV2ZW50IFBsYXllciNzdXNwZW5kXG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGBzdXNwZW5kYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaFN1c3BlbmRfXG4gKiBAZmlyZXMgUGxheWVyI3N1c3BlbmRcbiAqIEBsaXN0ZW5zIFRlY2gjc3VzcGVuZFxuICovXG4nc3VzcGVuZCcsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIGN1cnJlbnQgcGxheWxpc3QgaXMgZW1wdHkuXG4gKlxuICogQGV2ZW50IFBsYXllciNlbXB0aWVkXG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGBlbXB0aWVkYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaEVtcHRpZWRfXG4gKiBAZmlyZXMgUGxheWVyI2VtcHRpZWRcbiAqIEBsaXN0ZW5zIFRlY2gjZW1wdGllZFxuICovXG4nZW1wdGllZCcsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIGJyb3dzZXIgaXMgdHJ5aW5nIHRvIGdldCBtZWRpYSBkYXRhLCBidXQgZGF0YSBpcyBub3QgYXZhaWxhYmxlLlxuICpcbiAqIEBldmVudCBQbGF5ZXIjc3RhbGxlZFxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgc3RhbGxlZGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hTdGFsbGVkX1xuICogQGZpcmVzIFBsYXllciNzdGFsbGVkXG4gKiBAbGlzdGVucyBUZWNoI3N0YWxsZWRcbiAqL1xuJ3N0YWxsZWQnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBicm93c2VyIGhhcyBsb2FkZWQgbWV0YSBkYXRhIGZvciB0aGUgYXVkaW8vdmlkZW8uXG4gKlxuICogQGV2ZW50IFBsYXllciNsb2FkZWRtZXRhZGF0YVxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgc3RhbGxlZGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hMb2FkZWRtZXRhZGF0YV9cbiAqIEBmaXJlcyBQbGF5ZXIjbG9hZGVkbWV0YWRhdGFcbiAqIEBsaXN0ZW5zIFRlY2gjbG9hZGVkbWV0YWRhdGFcbiAqL1xuJ2xvYWRlZG1ldGFkYXRhJyxcbi8qKlxuICogRmlyZXMgd2hlbiB0aGUgYnJvd3NlciBoYXMgbG9hZGVkIHRoZSBjdXJyZW50IGZyYW1lIG9mIHRoZSBhdWRpby92aWRlby5cbiAqXG4gKiBAZXZlbnQgUGxheWVyI2xvYWRlZGRhdGFcbiAqIEB0eXBlIHtldmVudH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZ2dlciB0aGUgYGxvYWRlZGRhdGFgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoTG9hZGRlZGRhdGFfXG4gKiBAZmlyZXMgUGxheWVyI2xvYWRlZGRhdGFcbiAqIEBsaXN0ZW5zIFRlY2gjbG9hZGVkZGF0YVxuICovXG4nbG9hZGVkZGF0YScsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaGFzIGNoYW5nZWQuXG4gKlxuICogQGV2ZW50IFBsYXllciN0aW1ldXBkYXRlXG4gKiBAdHlwZSB7ZXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGB0aW1ldXBkYXRlYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaFRpbWVVcGRhdGVfXG4gKiBAZmlyZXMgUGxheWVyI3RpbWV1cGRhdGVcbiAqIEBsaXN0ZW5zIFRlY2gjdGltZXVwZGF0ZVxuICovXG4ndGltZXVwZGF0ZScsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIHZpZGVvJ3MgaW50cmluc2ljIGRpbWVuc2lvbnMgY2hhbmdlXG4gKlxuICogQGV2ZW50IFBsYXllciNyZXNpemVcbiAqIEB0eXBlIHtldmVudH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZ2dlciB0aGUgYHJlc2l6ZWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hSZXNpemVfXG4gKiBAZmlyZXMgUGxheWVyI3Jlc2l6ZVxuICogQGxpc3RlbnMgVGVjaCNyZXNpemVcbiAqL1xuJ3Jlc2l6ZScsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIHZvbHVtZSBoYXMgYmVlbiBjaGFuZ2VkXG4gKlxuICogQGV2ZW50IFBsYXllciN2b2x1bWVjaGFuZ2VcbiAqIEB0eXBlIHtldmVudH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZ2dlciB0aGUgYHZvbHVtZWNoYW5nZWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hWb2x1bWVjaGFuZ2VfXG4gKiBAZmlyZXMgUGxheWVyI3ZvbHVtZWNoYW5nZVxuICogQGxpc3RlbnMgVGVjaCN2b2x1bWVjaGFuZ2VcbiAqL1xuJ3ZvbHVtZWNoYW5nZScsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIHRleHQgdHJhY2sgaGFzIGJlZW4gY2hhbmdlZFxuICpcbiAqIEBldmVudCBQbGF5ZXIjdGV4dHRyYWNrY2hhbmdlXG4gKiBAdHlwZSB7ZXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGB0ZXh0dHJhY2tjaGFuZ2VgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoVGV4dHRyYWNrY2hhbmdlX1xuICogQGZpcmVzIFBsYXllciN0ZXh0dHJhY2tjaGFuZ2VcbiAqIEBsaXN0ZW5zIFRlY2gjdGV4dHRyYWNrY2hhbmdlXG4gKi9cbid0ZXh0dHJhY2tjaGFuZ2UnXTsgLy8gZXZlbnRzIHRvIHF1ZXVlIHdoZW4gcGxheWJhY2sgcmF0ZSBpcyB6ZXJvXG4vLyB0aGlzIGlzIGEgaGFzaCBmb3IgdGhlIHNvbGUgcHVycG9zZSBvZiBtYXBwaW5nIG5vbi1jYW1lbC1jYXNlZCBldmVudCBuYW1lc1xuLy8gdG8gY2FtZWwtY2FzZWQgZnVuY3Rpb24gbmFtZXNcblxudmFyIFRFQ0hfRVZFTlRTX1FVRVVFID0ge1xuICBjYW5wbGF5OiAnQ2FuUGxheScsXG4gIGNhbnBsYXl0aHJvdWdoOiAnQ2FuUGxheVRocm91Z2gnLFxuICBwbGF5aW5nOiAnUGxheWluZycsXG4gIHNlZWtlZDogJ1NlZWtlZCdcbn07XG52YXIgQlJFQUtQT0lOVF9PUkRFUiA9IFsndGlueScsICd4c21hbGwnLCAnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJywgJ3hsYXJnZScsICdodWdlJ107XG52YXIgQlJFQUtQT0lOVF9DTEFTU0VTID0ge307IC8vIGdyZXA6IHZqcy1sYXlvdXQtdGlueVxuLy8gZ3JlcDogdmpzLWxheW91dC14LXNtYWxsXG4vLyBncmVwOiB2anMtbGF5b3V0LXNtYWxsXG4vLyBncmVwOiB2anMtbGF5b3V0LW1lZGl1bVxuLy8gZ3JlcDogdmpzLWxheW91dC1sYXJnZVxuLy8gZ3JlcDogdmpzLWxheW91dC14LWxhcmdlXG4vLyBncmVwOiB2anMtbGF5b3V0LWh1Z2VcblxuQlJFQUtQT0lOVF9PUkRFUi5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gIHZhciB2ID0gay5jaGFyQXQoMCkgPT09ICd4JyA/IFwieC1cIiArIGsuc3Vic3RyaW5nKDEpIDogaztcbiAgQlJFQUtQT0lOVF9DTEFTU0VTW2tdID0gXCJ2anMtbGF5b3V0LVwiICsgdjtcbn0pO1xudmFyIERFRkFVTFRfQlJFQUtQT0lOVFMgPSB7XG4gIHRpbnk6IDIxMCxcbiAgeHNtYWxsOiAzMjAsXG4gIHNtYWxsOiA0MjUsXG4gIG1lZGl1bTogNzY4LFxuICBsYXJnZTogMTQ0MCxcbiAgeGxhcmdlOiAyNTYwLFxuICBodWdlOiBJbmZpbml0eVxufTtcbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhlIGBQbGF5ZXJgIGNsYXNzIGlzIGNyZWF0ZWQgd2hlbiBhbnkgb2YgdGhlIFZpZGVvLmpzIHNldHVwIG1ldGhvZHNcbiAqIGFyZSB1c2VkIHRvIGluaXRpYWxpemUgYSB2aWRlby5cbiAqXG4gKiBBZnRlciBhbiBpbnN0YW5jZSBoYXMgYmVlbiBjcmVhdGVkIGl0IGNhbiBiZSBhY2Nlc3NlZCBnbG9iYWxseSBpbiB0d28gd2F5czpcbiAqIDEuIEJ5IGNhbGxpbmcgYHZpZGVvanMoJ2V4YW1wbGVfdmlkZW9fMScpO2BcbiAqIDIuIEJ5IHVzaW5nIGl0IGRpcmVjdGx5IHZpYSAgYHZpZGVvanMucGxheWVycy5leGFtcGxlX3ZpZGVvXzE7YFxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBQbGF5ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGxheWVyLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gdGFnXG4gICAqICAgICAgICBUaGUgb3JpZ2luYWwgdmlkZW8gRE9NIGVsZW1lbnQgdXNlZCBmb3IgY29uZmlndXJpbmcgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgT2JqZWN0IG9mIG9wdGlvbiBuYW1lcyBhbmQgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSBbcmVhZHldXG4gICAqICAgICAgICBSZWFkeSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIFBsYXllcih0YWcsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgLy8gTWFrZSBzdXJlIHRhZyBJRCBleGlzdHNcbiAgICB0YWcuaWQgPSB0YWcuaWQgfHwgb3B0aW9ucy5pZCB8fCBcInZqc192aWRlb19cIiArIG5ld0dVSUQoKTsgLy8gU2V0IE9wdGlvbnNcbiAgICAvLyBUaGUgb3B0aW9ucyBhcmd1bWVudCBvdmVycmlkZXMgb3B0aW9ucyBzZXQgaW4gdGhlIHZpZGVvIHRhZ1xuICAgIC8vIHdoaWNoIG92ZXJyaWRlcyBnbG9iYWxseSBzZXQgb3B0aW9ucy5cbiAgICAvLyBUaGlzIGxhdHRlciBwYXJ0IGNvaW5jaWRlcyB3aXRoIHRoZSBsb2FkIG9yZGVyXG4gICAgLy8gKHRhZyBtdXN0IGV4aXN0IGJlZm9yZSBQbGF5ZXIpXG5cbiAgICBvcHRpb25zID0gYXNzaWduKFBsYXllci5nZXRUYWdTZXR0aW5ncyh0YWcpLCBvcHRpb25zKTsgLy8gRGVsYXkgdGhlIGluaXRpYWxpemF0aW9uIG9mIGNoaWxkcmVuIGJlY2F1c2Ugd2UgbmVlZCB0byBzZXQgdXBcbiAgICAvLyBwbGF5ZXIgcHJvcGVydGllcyBmaXJzdCwgYW5kIGNhbid0IHVzZSBgdGhpc2AgYmVmb3JlIGBzdXBlcigpYFxuXG4gICAgb3B0aW9ucy5pbml0Q2hpbGRyZW4gPSBmYWxzZTsgLy8gU2FtZSB3aXRoIGNyZWF0aW5nIHRoZSBlbGVtZW50XG5cbiAgICBvcHRpb25zLmNyZWF0ZUVsID0gZmFsc2U7IC8vIGRvbid0IGF1dG8gbWl4aW4gdGhlIGV2ZW50ZWQgbWl4aW5cblxuICAgIG9wdGlvbnMuZXZlbnRlZCA9IGZhbHNlOyAvLyB3ZSBkb24ndCB3YW50IHRoZSBwbGF5ZXIgdG8gcmVwb3J0IHRvdWNoIGFjdGl2aXR5IG9uIGl0c2VsZlxuICAgIC8vIHNlZSBlbmFibGVUb3VjaEFjdGl2aXR5IGluIENvbXBvbmVudFxuXG4gICAgb3B0aW9ucy5yZXBvcnRUb3VjaEFjdGl2aXR5ID0gZmFsc2U7IC8vIElmIGxhbmd1YWdlIGlzIG5vdCBzZXQsIGdldCB0aGUgY2xvc2VzdCBsYW5nIGF0dHJpYnV0ZVxuXG4gICAgaWYgKCFvcHRpb25zLmxhbmd1YWdlKSB7XG4gICAgICBpZiAodHlwZW9mIHRhZy5jbG9zZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBjbG9zZXN0ID0gdGFnLmNsb3Nlc3QoJ1tsYW5nXScpO1xuXG4gICAgICAgIGlmIChjbG9zZXN0ICYmIGNsb3Nlc3QuZ2V0QXR0cmlidXRlKSB7XG4gICAgICAgICAgb3B0aW9ucy5sYW5ndWFnZSA9IGNsb3Nlc3QuZ2V0QXR0cmlidXRlKCdsYW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGFnO1xuXG4gICAgICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICBpZiAoZ2V0QXR0cmlidXRlcyhlbGVtZW50KS5oYXNPd25Qcm9wZXJ0eSgnbGFuZycpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxhbmd1YWdlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2xhbmcnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIFJ1biBiYXNlIGNvbXBvbmVudCBpbml0aWFsaXppbmcgd2l0aCBuZXcgb3B0aW9uc1xuXG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBudWxsLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpczsgLy8gQ3JlYXRlIGJvdW5kIG1ldGhvZHMgZm9yIGRvY3VtZW50IGxpc3RlbmVycy5cblxuICAgIF90aGlzLmJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8pO1xuICAgIF90aGlzLmJvdW5kRnVsbFdpbmRvd09uRXNjS2V5XyA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmZ1bGxXaW5kb3dPbkVzY0tleSk7IC8vIGNyZWF0ZSBsb2dnZXJcblxuICAgIF90aGlzLmxvZyA9IGNyZWF0ZUxvZ2dlciQxKF90aGlzLmlkXyk7IC8vIEhvbGQgb3VyIG93biByZWZlcmVuY2UgdG8gZnVsbHNjcmVlbiBhcGkgc28gaXQgY2FuIGJlIG1vY2tlZCBpbiB0ZXN0c1xuXG4gICAgX3RoaXMuZnNBcGlfID0gRnVsbHNjcmVlbkFwaTsgLy8gVHJhY2tzIHdoZW4gYSB0ZWNoIGNoYW5nZXMgdGhlIHBvc3RlclxuXG4gICAgX3RoaXMuaXNQb3N0ZXJGcm9tVGVjaF8gPSBmYWxzZTsgLy8gSG9sZHMgY2FsbGJhY2sgaW5mbyB0aGF0IGdldHMgcXVldWVkIHdoZW4gcGxheWJhY2sgcmF0ZSBpcyB6ZXJvXG4gICAgLy8gYW5kIGEgc2VlayBpcyBoYXBwZW5pbmdcblxuICAgIF90aGlzLnF1ZXVlZENhbGxiYWNrc18gPSBbXTsgLy8gVHVybiBvZmYgQVBJIGFjY2VzcyBiZWNhdXNlIHdlJ3JlIGxvYWRpbmcgYSBuZXcgdGVjaCB0aGF0IG1pZ2h0IGxvYWQgYXN5bmNocm9ub3VzbHlcblxuICAgIF90aGlzLmlzUmVhZHlfID0gZmFsc2U7IC8vIEluaXQgc3RhdGUgaGFzU3RhcnRlZF9cblxuICAgIF90aGlzLmhhc1N0YXJ0ZWRfID0gZmFsc2U7IC8vIEluaXQgc3RhdGUgdXNlckFjdGl2ZV9cblxuICAgIF90aGlzLnVzZXJBY3RpdmVfID0gZmFsc2U7IC8vIGlmIHRoZSBnbG9iYWwgb3B0aW9uIG9iamVjdCB3YXMgYWNjaWRlbnRhbGx5IGJsb3duIGF3YXkgYnlcbiAgICAvLyBzb21lb25lLCBiYWlsIGVhcmx5IHdpdGggYW4gaW5mb3JtYXRpdmUgZXJyb3JcblxuICAgIGlmICghX3RoaXMub3B0aW9uc18gfHwgIV90aGlzLm9wdGlvbnNfLnRlY2hPcmRlciB8fCAhX3RoaXMub3B0aW9uc18udGVjaE9yZGVyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0ZWNoT3JkZXIgc3BlY2lmaWVkLiBEaWQgeW91IG92ZXJ3cml0ZSAnICsgJ3ZpZGVvanMub3B0aW9ucyBpbnN0ZWFkIG9mIGp1c3QgY2hhbmdpbmcgdGhlICcgKyAncHJvcGVydGllcyB5b3Ugd2FudCB0byBvdmVycmlkZT8nKTtcbiAgICB9IC8vIFN0b3JlIHRoZSBvcmlnaW5hbCB0YWcgdXNlZCB0byBzZXQgb3B0aW9uc1xuXG5cbiAgICBfdGhpcy50YWcgPSB0YWc7IC8vIFN0b3JlIHRoZSB0YWcgYXR0cmlidXRlcyB1c2VkIHRvIHJlc3RvcmUgaHRtbDUgZWxlbWVudFxuXG4gICAgX3RoaXMudGFnQXR0cmlidXRlcyA9IHRhZyAmJiBnZXRBdHRyaWJ1dGVzKHRhZyk7IC8vIFVwZGF0ZSBjdXJyZW50IGxhbmd1YWdlXG5cbiAgICBfdGhpcy5sYW5ndWFnZShfdGhpcy5vcHRpb25zXy5sYW5ndWFnZSk7IC8vIFVwZGF0ZSBTdXBwb3J0ZWQgTGFuZ3VhZ2VzXG5cblxuICAgIGlmIChvcHRpb25zLmxhbmd1YWdlcykge1xuICAgICAgLy8gTm9ybWFsaXNlIHBsYXllciBvcHRpb24gbGFuZ3VhZ2VzIHRvIGxvd2VyY2FzZVxuICAgICAgdmFyIGxhbmd1YWdlc1RvTG93ZXIgPSB7fTtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMubGFuZ3VhZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGxhbmd1YWdlc1RvTG93ZXJbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IG9wdGlvbnMubGFuZ3VhZ2VzW25hbWVdO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5sYW5ndWFnZXNfID0gbGFuZ3VhZ2VzVG9Mb3dlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMubGFuZ3VhZ2VzXyA9IFBsYXllci5wcm90b3R5cGUub3B0aW9uc18ubGFuZ3VhZ2VzO1xuICAgIH1cblxuICAgIF90aGlzLnJlc2V0Q2FjaGVfKCk7IC8vIFNldCBwb3N0ZXJcblxuXG4gICAgX3RoaXMucG9zdGVyXyA9IG9wdGlvbnMucG9zdGVyIHx8ICcnOyAvLyBTZXQgY29udHJvbHNcblxuICAgIF90aGlzLmNvbnRyb2xzXyA9ICEhb3B0aW9ucy5jb250cm9sczsgLy8gT3JpZ2luYWwgdGFnIHNldHRpbmdzIHN0b3JlZCBpbiBvcHRpb25zXG4gICAgLy8gbm93IHJlbW92ZSBpbW1lZGlhdGVseSBzbyBuYXRpdmUgY29udHJvbHMgZG9uJ3QgZmxhc2guXG4gICAgLy8gTWF5IGJlIHR1cm5lZCBiYWNrIG9uIGJ5IEhUTUw1IHRlY2ggaWYgbmF0aXZlQ29udHJvbHNGb3JUb3VjaCBpcyB0cnVlXG5cbiAgICB0YWcuY29udHJvbHMgPSBmYWxzZTtcbiAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCdjb250cm9scycpO1xuICAgIF90aGlzLmNoYW5naW5nU3JjXyA9IGZhbHNlO1xuICAgIF90aGlzLnBsYXlDYWxsYmFja3NfID0gW107XG4gICAgX3RoaXMucGxheVRlcm1pbmF0ZWRRdWV1ZV8gPSBbXTsgLy8gdGhlIGF0dHJpYnV0ZSBvdmVycmlkZXMgdGhlIG9wdGlvblxuXG4gICAgaWYgKHRhZy5oYXNBdHRyaWJ1dGUoJ2F1dG9wbGF5JykpIHtcbiAgICAgIF90aGlzLmF1dG9wbGF5KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UgdXNlIHRoZSBzZXR0ZXIgdG8gdmFsaWRhdGUgYW5kXG4gICAgICAvLyBzZXQgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgICBfdGhpcy5hdXRvcGxheShfdGhpcy5vcHRpb25zXy5hdXRvcGxheSk7XG4gICAgfSAvLyBjaGVjayBwbHVnaW5zXG5cblxuICAgIGlmIChvcHRpb25zLnBsdWdpbnMpIHtcbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMucGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIF90aGlzW25hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGx1Z2luIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFN0b3JlIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBzY3J1YmJpbmdcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdXNlciBpcyBzY3J1YmJpbmdcbiAgICAgKi9cblxuXG4gICAgX3RoaXMuc2NydWJiaW5nXyA9IGZhbHNlO1xuICAgIF90aGlzLmVsXyA9IF90aGlzLmNyZWF0ZUVsKCk7IC8vIE1ha2UgdGhpcyBhbiBldmVudGVkIG9iamVjdCBhbmQgdXNlIGBlbF9gIGFzIGl0cyBldmVudCBidXMuXG5cbiAgICBldmVudGVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB7XG4gICAgICBldmVudEJ1c0tleTogJ2VsXydcbiAgICB9KTtcblxuICAgIGlmIChfdGhpcy5mbHVpZF8pIHtcbiAgICAgIF90aGlzLm9uKCdwbGF5ZXJyZXNldCcsIF90aGlzLnVwZGF0ZVN0eWxlRWxfKTtcbiAgICB9IC8vIFdlIGFsc28gd2FudCB0byBwYXNzIHRoZSBvcmlnaW5hbCBwbGF5ZXIgb3B0aW9ucyB0byBlYWNoIGNvbXBvbmVudCBhbmQgcGx1Z2luXG4gICAgLy8gYXMgd2VsbCBzbyB0aGV5IGRvbid0IG5lZWQgdG8gcmVhY2ggYmFjayBpbnRvIHRoZSBwbGF5ZXIgZm9yIG9wdGlvbnMgbGF0ZXIuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGRvIGFub3RoZXIgY29weSBvZiB0aGlzLm9wdGlvbnNfIHNvIHdlIGRvbid0IGVuZCB1cCB3aXRoXG4gICAgLy8gYW4gaW5maW5pdGUgbG9vcC5cblxuXG4gICAgdmFyIHBsYXllck9wdGlvbnNDb3B5ID0gbWVyZ2VPcHRpb25zKF90aGlzLm9wdGlvbnNfKTsgLy8gTG9hZCBwbHVnaW5zXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB7XG4gICAgICBPYmplY3Qua2V5cyhvcHRpb25zLnBsdWdpbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgX3RoaXNbbmFtZV0ob3B0aW9ucy5wbHVnaW5zW25hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF90aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMgPSBwbGF5ZXJPcHRpb25zQ29weTtcbiAgICBfdGhpcy5taWRkbGV3YXJlXyA9IFtdO1xuXG4gICAgX3RoaXMuaW5pdENoaWxkcmVuKCk7IC8vIFNldCBpc0F1ZGlvIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IGFuIGF1ZGlvIHRhZyB3YXMgdXNlZFxuXG5cbiAgICBfdGhpcy5pc0F1ZGlvKHRhZy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYXVkaW8nKTsgLy8gVXBkYXRlIGNvbnRyb2xzIGNsYXNzTmFtZS4gQ2FuJ3QgZG8gdGhpcyB3aGVuIHRoZSBjb250cm9scyBhcmUgaW5pdGlhbGx5XG4gICAgLy8gc2V0IGJlY2F1c2UgdGhlIGVsZW1lbnQgZG9lc24ndCBleGlzdCB5ZXQuXG5cblxuICAgIGlmIChfdGhpcy5jb250cm9scygpKSB7XG4gICAgICBfdGhpcy5hZGRDbGFzcygndmpzLWNvbnRyb2xzLWVuYWJsZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1kaXNhYmxlZCcpO1xuICAgIH0gLy8gU2V0IEFSSUEgbGFiZWwgYW5kIHJlZ2lvbiByb2xlIGRlcGVuZGluZyBvbiBwbGF5ZXIgdHlwZVxuXG5cbiAgICBfdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ3JlZ2lvbicpO1xuXG4gICAgaWYgKF90aGlzLmlzQXVkaW8oKSkge1xuICAgICAgX3RoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIF90aGlzLmxvY2FsaXplKCdBdWRpbyBQbGF5ZXInKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBfdGhpcy5sb2NhbGl6ZSgnVmlkZW8gUGxheWVyJykpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5pc0F1ZGlvKCkpIHtcbiAgICAgIF90aGlzLmFkZENsYXNzKCd2anMtYXVkaW8nKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuZmxleE5vdFN1cHBvcnRlZF8oKSkge1xuICAgICAgX3RoaXMuYWRkQ2xhc3MoJ3Zqcy1uby1mbGV4Jyk7XG4gICAgfSAvLyBUT0RPOiBNYWtlIHRoaXMgc21hcnRlci4gVG9nZ2xlIHVzZXIgc3RhdGUgYmV0d2VlbiB0b3VjaGluZy9tb3VzaW5nXG4gICAgLy8gdXNpbmcgZXZlbnRzLCBzaW5jZSBkZXZpY2VzIGNhbiBoYXZlIGJvdGggdG91Y2ggYW5kIG1vdXNlIGV2ZW50cy5cbiAgICAvLyBUT0RPOiBNYWtlIHRoaXMgY2hlY2sgYmUgcGVyZm9ybWVkIGFnYWluIHdoZW4gdGhlIHdpbmRvdyBzd2l0Y2hlcyBiZXR3ZWVuIG1vbml0b3JzXG4gICAgLy8gKFNlZSBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9pc3N1ZXMvNTY4MylcblxuXG4gICAgaWYgKFRPVUNIX0VOQUJMRUQpIHtcbiAgICAgIF90aGlzLmFkZENsYXNzKCd2anMtdG91Y2gtZW5hYmxlZCcpO1xuICAgIH0gLy8gaU9TIFNhZmFyaSBoYXMgYnJva2VuIGhvdmVyIGhhbmRsaW5nXG5cblxuICAgIGlmICghSVNfSU9TKSB7XG4gICAgICBfdGhpcy5hZGRDbGFzcygndmpzLXdvcmtpbmdob3ZlcicpO1xuICAgIH0gLy8gTWFrZSBwbGF5ZXIgZWFzaWx5IGZpbmRhYmxlIGJ5IElEXG5cblxuICAgIFBsYXllci5wbGF5ZXJzW190aGlzLmlkX10gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTsgLy8gQWRkIGEgbWFqb3IgdmVyc2lvbiBjbGFzcyB0byBhaWQgY3NzIGluIHBsdWdpbnNcblxuICAgIHZhciBtYWpvclZlcnNpb24gPSB2ZXJzaW9uLnNwbGl0KCcuJylbMF07XG5cbiAgICBfdGhpcy5hZGRDbGFzcyhcInZqcy12XCIgKyBtYWpvclZlcnNpb24pOyAvLyBXaGVuIHRoZSBwbGF5ZXIgaXMgZmlyc3QgaW5pdGlhbGl6ZWQsIHRyaWdnZXIgYWN0aXZpdHkgc28gY29tcG9uZW50c1xuICAgIC8vIGxpa2UgdGhlIGNvbnRyb2wgYmFyIHNob3cgdGhlbXNlbHZlcyBpZiBuZWVkZWRcblxuXG4gICAgX3RoaXMudXNlckFjdGl2ZSh0cnVlKTtcblxuICAgIF90aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpO1xuXG4gICAgX3RoaXMub25lKCdwbGF5JywgX3RoaXMubGlzdGVuRm9yVXNlckFjdGl2aXR5Xyk7XG5cbiAgICBfdGhpcy5vbignc3RhZ2VjbGljaycsIF90aGlzLmhhbmRsZVN0YWdlQ2xpY2tfKTtcblxuICAgIF90aGlzLm9uKCdrZXlkb3duJywgX3RoaXMuaGFuZGxlS2V5RG93bik7XG5cbiAgICBfdGhpcy5icmVha3BvaW50cyhfdGhpcy5vcHRpb25zXy5icmVha3BvaW50cyk7XG5cbiAgICBfdGhpcy5yZXNwb25zaXZlKF90aGlzLm9wdGlvbnNfLnJlc3BvbnNpdmUpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgdmlkZW8gcGxheWVyIGFuZCBkb2VzIGFueSBuZWNlc3NhcnkgY2xlYW51cC5cbiAgICpcbiAgICogVGhpcyBpcyBlc3BlY2lhbGx5IGhlbHBmdWwgaWYgeW91IGFyZSBkeW5hbWljYWxseSBhZGRpbmcgYW5kIHJlbW92aW5nIHZpZGVvc1xuICAgKiB0by9mcm9tIHRoZSBET00uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZGlzcG9zZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQbGF5ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBwbGF5ZXIgaXMgYmVpbmcgZGlzcG9zZWQgb2YuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI2Rpc3Bvc2VcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG4gICAgdGhpcy50cmlnZ2VyKCdkaXNwb3NlJyk7IC8vIHByZXZlbnQgZGlzcG9zZSBmcm9tIGJlaW5nIGNhbGxlZCB0d2ljZVxuXG4gICAgdGhpcy5vZmYoJ2Rpc3Bvc2UnKTsgLy8gTWFrZSBzdXJlIGFsbCBwbGF5ZXItc3BlY2lmaWMgZG9jdW1lbnQgbGlzdGVuZXJzIGFyZSB1bmJvdW5kLiBUaGlzIGlzXG5cbiAgICBvZmYoZG9jdW1lbnQsIHRoaXMuZnNBcGlfLmZ1bGxzY3JlZW5jaGFuZ2UsIHRoaXMuYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKTtcbiAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8pO1xuXG4gICAgaWYgKHRoaXMuc3R5bGVFbF8gJiYgdGhpcy5zdHlsZUVsXy5wYXJlbnROb2RlKSB7XG4gICAgICB0aGlzLnN0eWxlRWxfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zdHlsZUVsXyk7XG4gICAgICB0aGlzLnN0eWxlRWxfID0gbnVsbDtcbiAgICB9IC8vIEtpbGwgcmVmZXJlbmNlIHRvIHRoaXMgcGxheWVyXG5cblxuICAgIFBsYXllci5wbGF5ZXJzW3RoaXMuaWRfXSA9IG51bGw7XG5cbiAgICBpZiAodGhpcy50YWcgJiYgdGhpcy50YWcucGxheWVyKSB7XG4gICAgICB0aGlzLnRhZy5wbGF5ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVsXyAmJiB0aGlzLmVsXy5wbGF5ZXIpIHtcbiAgICAgIHRoaXMuZWxfLnBsYXllciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGVjaF8pIHtcbiAgICAgIHRoaXMudGVjaF8uZGlzcG9zZSgpO1xuICAgICAgdGhpcy5pc1Bvc3RlckZyb21UZWNoXyA9IGZhbHNlO1xuICAgICAgdGhpcy5wb3N0ZXJfID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGxheWVyRWxJbmdlc3RfKSB7XG4gICAgICB0aGlzLnBsYXllckVsSW5nZXN0XyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGFnKSB7XG4gICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgfVxuXG4gICAgY2xlYXJDYWNoZUZvclBsYXllcih0aGlzKTsgLy8gcmVtb3ZlIGFsbCBldmVudCBoYW5kbGVycyBmb3IgdHJhY2sgbGlzdHNcbiAgICAvLyBhbGwgdHJhY2tzIGFuZCB0cmFjayBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgb25cbiAgICAvLyB0ZWNoIGRpc3Bvc2VcblxuICAgIEFMTC5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG5cbiAgICAgIHZhciBsaXN0ID0gX3RoaXMyW3Byb3BzLmdldHRlck5hbWVdKCk7IC8vIGlmIGl0IGlzIG5vdCBhIG5hdGl2ZSBsaXN0XG4gICAgICAvLyB3ZSBoYXZlIHRvIG1hbnVhbGx5IHJlbW92ZSBldmVudCBsaXN0ZW5lcnNcblxuXG4gICAgICBpZiAobGlzdCAmJiBsaXN0Lm9mZikge1xuICAgICAgICBsaXN0Lm9mZigpO1xuICAgICAgfVxuICAgIH0pOyAvLyB0aGUgYWN0dWFsIC5lbF8gaXMgcmVtb3ZlZCBoZXJlXG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYFBsYXllcmAncyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgRE9NIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnO1xuICAgIHZhciBlbDtcbiAgICB2YXIgcGxheWVyRWxJbmdlc3QgPSB0aGlzLnBsYXllckVsSW5nZXN0XyA9IHRhZy5wYXJlbnROb2RlICYmIHRhZy5wYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSAmJiB0YWcucGFyZW50Tm9kZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdmpzLXBsYXllcicpO1xuICAgIHZhciBkaXZFbWJlZCA9IHRoaXMudGFnLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3ZpZGVvLWpzJztcblxuICAgIGlmIChwbGF5ZXJFbEluZ2VzdCkge1xuICAgICAgZWwgPSB0aGlzLmVsXyA9IHRhZy5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSBpZiAoIWRpdkVtYmVkKSB7XG4gICAgICBlbCA9IHRoaXMuZWxfID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jyk7XG4gICAgfSAvLyBDb3B5IG92ZXIgYWxsIHRoZSBhdHRyaWJ1dGVzIGZyb20gdGhlIHRhZywgaW5jbHVkaW5nIElEIGFuZCBjbGFzc1xuICAgIC8vIElEIHdpbGwgbm93IHJlZmVyZW5jZSBwbGF5ZXIgYm94LCBub3QgdGhlIHZpZGVvIHRhZ1xuXG5cbiAgICB2YXIgYXR0cnMgPSBnZXRBdHRyaWJ1dGVzKHRhZyk7XG5cbiAgICBpZiAoZGl2RW1iZWQpIHtcbiAgICAgIGVsID0gdGhpcy5lbF8gPSB0YWc7XG4gICAgICB0YWcgPSB0aGlzLnRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cbiAgICAgIHdoaWxlIChlbC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdGFnLmFwcGVuZENoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc0NsYXNzKGVsLCAndmlkZW8tanMnKSkge1xuICAgICAgICBhZGRDbGFzcyhlbCwgJ3ZpZGVvLWpzJyk7XG4gICAgICB9XG5cbiAgICAgIGVsLmFwcGVuZENoaWxkKHRhZyk7XG4gICAgICBwbGF5ZXJFbEluZ2VzdCA9IHRoaXMucGxheWVyRWxJbmdlc3RfID0gZWw7IC8vIG1vdmUgcHJvcGVydGllcyBvdmVyIGZyb20gb3VyIGN1c3RvbSBgdmlkZW8tanNgIGVsZW1lbnRcbiAgICAgIC8vIHRvIG91ciBuZXcgYHZpZGVvYCBlbGVtZW50LiBUaGlzIHdpbGwgbW92ZSB0aGluZ3MgbGlrZVxuICAgICAgLy8gYHNyY2Agb3IgYGNvbnRyb2xzYCB0aGF0IHdlcmUgc2V0IHZpYSBqcyBiZWZvcmUgdGhlIHBsYXllclxuICAgICAgLy8gd2FzIGluaXRpYWxpemVkLlxuXG4gICAgICBPYmplY3Qua2V5cyhlbCkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRhZ1trXSA9IGVsW2tdO1xuICAgICAgICB9IGNhdGNoIChlKSB7Ly8gd2UgZ290IGEgYSBwcm9wZXJ0eSBsaWtlIG91dGVySFRNTCB3aGljaCB3ZSBjYW4ndCBhY3R1YWxseSBjb3B5LCBpZ25vcmUgaXRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSAvLyBzZXQgdGFiaW5kZXggdG8gLTEgdG8gcmVtb3ZlIHRoZSB2aWRlbyBlbGVtZW50IGZyb20gdGhlIGZvY3VzIG9yZGVyXG5cblxuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgYXR0cnMudGFiaW5kZXggPSAnLTEnOyAvLyBXb3JrYXJvdW5kIGZvciAjNDU4MyAoSkFXUytJRSBkb2Vzbid0IGFubm91bmNlIEJQQiBvciBwbGF5IGJ1dHRvbiksIGFuZFxuICAgIC8vIGZvciB0aGUgc2FtZSBpc3N1ZSB3aXRoIENocm9tZSAob24gV2luZG93cykgd2l0aCBKQVdTLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vRnJlZWRvbVNjaWVudGlmaWMvVkZPLXN0YW5kYXJkcy1zdXBwb3J0L2lzc3Vlcy83OFxuICAgIC8vIE5vdGUgdGhhdCB3ZSBjYW4ndCBkZXRlY3QgaWYgSkFXUyBpcyBiZWluZyB1c2VkLCBidXQgdGhpcyBBUklBIGF0dHJpYnV0ZVxuICAgIC8vICBkb2Vzbid0IGNoYW5nZSBiZWhhdmlvciBvZiBJRTExIG9yIENocm9tZSBpZiBKQVdTIGlzIG5vdCBiZWluZyB1c2VkXG5cbiAgICBpZiAoSUVfVkVSU0lPTiB8fCBJU19DSFJPTUUgJiYgSVNfV0lORE9XUykge1xuICAgICAgdGFnLnNldEF0dHJpYnV0ZSgncm9sZScsICdhcHBsaWNhdGlvbicpO1xuICAgICAgYXR0cnMucm9sZSA9ICdhcHBsaWNhdGlvbic7XG4gICAgfSAvLyBSZW1vdmUgd2lkdGgvaGVpZ2h0IGF0dHJzIGZyb20gdGFnIHNvIENTUyBjYW4gbWFrZSBpdCAxMDAlIHdpZHRoL2hlaWdodFxuXG5cbiAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCd3aWR0aCcpO1xuICAgIHRhZy5yZW1vdmVBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuXG4gICAgaWYgKCd3aWR0aCcgaW4gYXR0cnMpIHtcbiAgICAgIGRlbGV0ZSBhdHRycy53aWR0aDtcbiAgICB9XG5cbiAgICBpZiAoJ2hlaWdodCcgaW4gYXR0cnMpIHtcbiAgICAgIGRlbGV0ZSBhdHRycy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgIC8vIGRvbid0IGNvcHkgb3ZlciB0aGUgY2xhc3MgYXR0cmlidXRlIHRvIHRoZSBwbGF5ZXIgZWxlbWVudCB3aGVuIHdlJ3JlIGluIGEgZGl2IGVtYmVkXG4gICAgICAvLyB0aGUgY2xhc3MgaXMgYWxyZWFkeSBzZXQgdXAgcHJvcGVybHkgaW4gdGhlIGRpdkVtYmVkIGNhc2VcbiAgICAgIC8vIGFuZCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBgdmlkZW8tanNgIGNsYXNzIGRvZXNuJ3QgZ2V0IGxvc3RcbiAgICAgIGlmICghKGRpdkVtYmVkICYmIGF0dHIgPT09ICdjbGFzcycpKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXZFbWJlZCkge1xuICAgICAgICB0YWcuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gVXBkYXRlIHRhZyBpZC9jbGFzcyBmb3IgdXNlIGFzIEhUTUw1IHBsYXliYWNrIHRlY2hcbiAgICAvLyBNaWdodCB0aGluayB3ZSBzaG91bGQgZG8gdGhpcyBhZnRlciBlbWJlZGRpbmcgaW4gY29udGFpbmVyIHNvIC52anMtdGVjaCBjbGFzc1xuICAgIC8vIGRvZXNuJ3QgZmxhc2ggMTAwJSB3aWR0aC9oZWlnaHQsIGJ1dCBjbGFzcyBvbmx5IGFwcGxpZXMgd2l0aCAudmlkZW8tanMgcGFyZW50XG5cbiAgICB0YWcucGxheWVySWQgPSB0YWcuaWQ7XG4gICAgdGFnLmlkICs9ICdfaHRtbDVfYXBpJztcbiAgICB0YWcuY2xhc3NOYW1lID0gJ3Zqcy10ZWNoJzsgLy8gTWFrZSBwbGF5ZXIgZmluZGFibGUgb24gZWxlbWVudHNcblxuICAgIHRhZy5wbGF5ZXIgPSBlbC5wbGF5ZXIgPSB0aGlzOyAvLyBEZWZhdWx0IHN0YXRlIG9mIHZpZGVvIGlzIHBhdXNlZFxuXG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXBhdXNlZCcpOyAvLyBBZGQgYSBzdHlsZSBlbGVtZW50IGluIHRoZSBwbGF5ZXIgdGhhdCB3ZSdsbCB1c2UgdG8gc2V0IHRoZSB3aWR0aC9oZWlnaHRcbiAgICAvLyBvZiB0aGUgcGxheWVyIGluIGEgd2F5IHRoYXQncyBzdGlsbCBvdmVycmlkZWFibGUgYnkgQ1NTLCBqdXN0IGxpa2UgdGhlXG4gICAgLy8gdmlkZW8gZWxlbWVudFxuXG4gICAgaWYgKHdpbmRvdyQxLlZJREVPSlNfTk9fRFlOQU1JQ19TVFlMRSAhPT0gdHJ1ZSkge1xuICAgICAgdGhpcy5zdHlsZUVsXyA9IGNyZWF0ZVN0eWxlRWxlbWVudCgndmpzLXN0eWxlcy1kaW1lbnNpb25zJyk7XG4gICAgICB2YXIgZGVmYXVsdHNTdHlsZUVsID0gJCgnLnZqcy1zdHlsZXMtZGVmYXVsdHMnKTtcbiAgICAgIHZhciBoZWFkID0gJCgnaGVhZCcpO1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUodGhpcy5zdHlsZUVsXywgZGVmYXVsdHNTdHlsZUVsID8gZGVmYXVsdHNTdHlsZUVsLm5leHRTaWJsaW5nIDogaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICB0aGlzLmZpbGxfID0gZmFsc2U7XG4gICAgdGhpcy5mbHVpZF8gPSBmYWxzZTsgLy8gUGFzcyBpbiB0aGUgd2lkdGgvaGVpZ2h0L2FzcGVjdFJhdGlvIG9wdGlvbnMgd2hpY2ggd2lsbCB1cGRhdGUgdGhlIHN0eWxlIGVsXG5cbiAgICB0aGlzLndpZHRoKHRoaXMub3B0aW9uc18ud2lkdGgpO1xuICAgIHRoaXMuaGVpZ2h0KHRoaXMub3B0aW9uc18uaGVpZ2h0KTtcbiAgICB0aGlzLmZpbGwodGhpcy5vcHRpb25zXy5maWxsKTtcbiAgICB0aGlzLmZsdWlkKHRoaXMub3B0aW9uc18uZmx1aWQpO1xuICAgIHRoaXMuYXNwZWN0UmF0aW8odGhpcy5vcHRpb25zXy5hc3BlY3RSYXRpbyk7IC8vIEhpZGUgYW55IGxpbmtzIHdpdGhpbiB0aGUgdmlkZW8vYXVkaW8gdGFnLFxuICAgIC8vIGJlY2F1c2UgSUUgZG9lc24ndCBoaWRlIHRoZW0gY29tcGxldGVseSBmcm9tIHNjcmVlbiByZWFkZXJzLlxuXG4gICAgdmFyIGxpbmtzID0gdGFnLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlua0VsID0gbGlua3MuaXRlbShpKTtcbiAgICAgIGFkZENsYXNzKGxpbmtFbCwgJ3Zqcy1oaWRkZW4nKTtcbiAgICAgIGxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsICdoaWRkZW4nKTtcbiAgICB9IC8vIGluc2VydEVsRmlyc3Qgc2VlbXMgdG8gY2F1c2UgdGhlIG5ldHdvcmtTdGF0ZSB0byBmbGlja2VyIGZyb20gMyB0byAyLCBzb1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIG9yaWdpbmFsIGZvciBsYXRlciBzbyB3ZSBjYW4ga25vdyBpZiB0aGUgc291cmNlIG9yaWdpbmFsbHkgZmFpbGVkXG5cblxuICAgIHRhZy5pbml0TmV0d29ya1N0YXRlXyA9IHRhZy5uZXR3b3JrU3RhdGU7IC8vIFdyYXAgdmlkZW8gdGFnIGluIGRpdiAoZWwvYm94KSBjb250YWluZXJcblxuICAgIGlmICh0YWcucGFyZW50Tm9kZSAmJiAhcGxheWVyRWxJbmdlc3QpIHtcbiAgICAgIHRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgdGFnKTtcbiAgICB9IC8vIGluc2VydCB0aGUgdGFnIGFzIHRoZSBmaXJzdCBjaGlsZCBvZiB0aGUgcGxheWVyIGVsZW1lbnRcbiAgICAvLyB0aGVuIG1hbnVhbGx5IGFkZCBpdCB0byB0aGUgY2hpbGRyZW4gYXJyYXkgc28gdGhhdCB0aGlzLmFkZENoaWxkXG4gICAgLy8gd2lsbCB3b3JrIHByb3Blcmx5IGZvciBvdGhlciBjb21wb25lbnRzXG4gICAgLy9cbiAgICAvLyBCcmVha3MgaVBob25lLCBmaXhlZCBpbiBIVE1MNSBzZXR1cC5cblxuXG4gICAgcHJlcGVuZFRvKHRhZywgZWwpO1xuICAgIHRoaXMuY2hpbGRyZW5fLnVuc2hpZnQodGFnKTsgLy8gU2V0IGxhbmcgYXR0ciBvbiBwbGF5ZXIgdG8gZW5zdXJlIENTUyA6bGFuZygpIGluIGNvbnNpc3RlbnQgd2l0aCBwbGF5ZXJcbiAgICAvLyBpZiBpdCdzIGJlZW4gc2V0IHRvIHNvbWV0aGluZyBkaWZmZXJlbnQgdG8gdGhlIGRvY1xuXG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdsYW5nJywgdGhpcy5sYW5ndWFnZV8pO1xuICAgIHRoaXMuZWxfID0gZWw7XG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIC8qKlxuICAgKiBBIGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgUGxheWVyYCdzIHdpZHRoLiBSZXR1cm5zIHRoZSBwbGF5ZXIncyBjb25maWd1cmVkIHZhbHVlLlxuICAgKiBUbyBnZXQgdGhlIGN1cnJlbnQgd2lkdGggdXNlIGBjdXJyZW50V2lkdGgoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdmFsdWVdXG4gICAqICAgICAgICBUaGUgdmFsdWUgdG8gc2V0IHRoZSBgUGxheWVyYCdzIHdpZHRoIHRvLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgd2lkdGggb2YgdGhlIGBQbGF5ZXJgIHdoZW4gZ2V0dGluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2lkdGggPSBmdW5jdGlvbiB3aWR0aCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignd2lkdGgnLCB2YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEEgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGBQbGF5ZXJgJ3MgaGVpZ2h0LiBSZXR1cm5zIHRoZSBwbGF5ZXIncyBjb25maWd1cmVkIHZhbHVlLlxuICAgKiBUbyBnZXQgdGhlIGN1cnJlbnQgaGVpZ2h0IHVzZSBgY3VycmVudGhlaWdodCgpYC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2YWx1ZV1cbiAgICogICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgdGhlIGBQbGF5ZXJgJ3MgaGVpZ3RoIHRvLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgaGVpZ2h0IG9mIHRoZSBgUGxheWVyYCB3aGVuIGdldHRpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhlaWdodCA9IGZ1bmN0aW9uIGhlaWdodCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignaGVpZ2h0JywgdmFsdWUpO1xuICB9XG4gIC8qKlxuICAgKiBBIGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgUGxheWVyYCdzIHdpZHRoICYgaGVpZ2h0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGltZW5zaW9uXG4gICAqICAgICAgICBUaGlzIHN0cmluZyBjYW4gYmU6XG4gICAqICAgICAgICAtICd3aWR0aCdcbiAgICogICAgICAgIC0gJ2hlaWdodCdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2YWx1ZV1cbiAgICogICAgICAgIFZhbHVlIGZvciBkaW1lbnNpb24gc3BlY2lmaWVkIGluIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkaW1lbnNpb24gYXJndW1lbnRzIHZhbHVlIHdoZW4gZ2V0dGluZyAod2lkdGgvaGVpZ2h0KS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGltZW5zaW9uID0gZnVuY3Rpb24gZGltZW5zaW9uKF9kaW1lbnNpb24sIHZhbHVlKSB7XG4gICAgdmFyIHByaXZEaW1lbnNpb24gPSBfZGltZW5zaW9uICsgJ18nO1xuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzW3ByaXZEaW1lbnNpb25dIHx8IDA7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgLy8gSWYgYW4gZW1wdHkgc3RyaW5nIGlzIGdpdmVuLCByZXNldCB0aGUgZGltZW5zaW9uIHRvIGJlIGF1dG9tYXRpY1xuICAgICAgdGhpc1twcml2RGltZW5zaW9uXSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMudXBkYXRlU3R5bGVFbF8oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkVmFsID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG5cbiAgICBpZiAoaXNOYU4ocGFyc2VkVmFsKSkge1xuICAgICAgbG9nLmVycm9yKFwiSW1wcm9wZXIgdmFsdWUgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgc3VwcGxpZWQgZm9yIGZvciBcIiArIF9kaW1lbnNpb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXNbcHJpdkRpbWVuc2lvbl0gPSBwYXJzZWRWYWw7XG4gICAgdGhpcy51cGRhdGVTdHlsZUVsXygpO1xuICB9XG4gIC8qKlxuICAgKiBBIGdldHRlci9zZXR0ZXIvdG9nZ2xlciBmb3IgdGhlIHZqcy1mbHVpZCBgY2xhc3NOYW1lYCBvbiB0aGUgYFBsYXllcmAuXG4gICAqXG4gICAqIFR1cm5pbmcgdGhpcyBvbiB3aWxsIHR1cm4gb2ZmIGZpbGwgbW9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbYm9vbF1cbiAgICogICAgICAgIC0gQSB2YWx1ZSBvZiB0cnVlIGFkZHMgdGhlIGNsYXNzLlxuICAgKiAgICAgICAgLSBBIHZhbHVlIG9mIGZhbHNlIHJlbW92ZXMgdGhlIGNsYXNzLlxuICAgKiAgICAgICAgLSBObyB2YWx1ZSB3aWxsIGJlIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufHVuZGVmaW5lZH1cbiAgICogICAgICAgICAtIFRoZSB2YWx1ZSBvZiBmbHVpZCB3aGVuIGdldHRpbmcuXG4gICAqICAgICAgICAgLSBgdW5kZWZpbmVkYCB3aGVuIHNldHRpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZsdWlkID0gZnVuY3Rpb24gZmx1aWQoYm9vbCkge1xuICAgIGlmIChib29sID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuZmx1aWRfO1xuICAgIH1cblxuICAgIHRoaXMuZmx1aWRfID0gISFib29sO1xuXG4gICAgaWYgKGlzRXZlbnRlZCh0aGlzKSkge1xuICAgICAgdGhpcy5vZmYoJ3BsYXllcnJlc2V0JywgdGhpcy51cGRhdGVTdHlsZUVsXyk7XG4gICAgfVxuXG4gICAgaWYgKGJvb2wpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1mbHVpZCcpO1xuICAgICAgdGhpcy5maWxsKGZhbHNlKTtcbiAgICAgIGFkZEV2ZW50ZWRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub24oJ3BsYXllcnJlc2V0JywgdGhpcy51cGRhdGVTdHlsZUVsXyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWZsdWlkJyk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdHlsZUVsXygpO1xuICB9XG4gIC8qKlxuICAgKiBBIGdldHRlci9zZXR0ZXIvdG9nZ2xlciBmb3IgdGhlIHZqcy1maWxsIGBjbGFzc05hbWVgIG9uIHRoZSBgUGxheWVyYC5cbiAgICpcbiAgICogVHVybmluZyB0aGlzIG9uIHdpbGwgdHVybiBvZmYgZmx1aWQgbW9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbYm9vbF1cbiAgICogICAgICAgIC0gQSB2YWx1ZSBvZiB0cnVlIGFkZHMgdGhlIGNsYXNzLlxuICAgKiAgICAgICAgLSBBIHZhbHVlIG9mIGZhbHNlIHJlbW92ZXMgdGhlIGNsYXNzLlxuICAgKiAgICAgICAgLSBObyB2YWx1ZSB3aWxsIGJlIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufHVuZGVmaW5lZH1cbiAgICogICAgICAgICAtIFRoZSB2YWx1ZSBvZiBmbHVpZCB3aGVuIGdldHRpbmcuXG4gICAqICAgICAgICAgLSBgdW5kZWZpbmVkYCB3aGVuIHNldHRpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZpbGwgPSBmdW5jdGlvbiBmaWxsKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmZpbGxfO1xuICAgIH1cblxuICAgIHRoaXMuZmlsbF8gPSAhIWJvb2w7XG5cbiAgICBpZiAoYm9vbCkge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWZpbGwnKTtcbiAgICAgIHRoaXMuZmx1aWQoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZmlsbCcpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0L1NldCB0aGUgYXNwZWN0IHJhdGlvXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmF0aW9dXG4gICAqICAgICAgICBBc3BlY3QgcmF0aW8gZm9yIHBsYXllclxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIHJldHVybnMgdGhlIGN1cnJlbnQgYXNwZWN0IHJhdGlvIHdoZW4gZ2V0dGluZ1xuICAgKi9cblxuICAvKipcbiAgICogQSBnZXR0ZXIvc2V0dGVyIGZvciB0aGUgYFBsYXllcmAncyBhc3BlY3QgcmF0aW8uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmF0aW9dXG4gICAqICAgICAgICBUaGUgdmFsdWUgdG8gc2V0IHRoZSBgUGxheWVyJ3MgYXNwZWN0IHJhdGlvIHRvLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIC0gVGhlIGN1cnJlbnQgYXNwZWN0IHJhdGlvIG9mIHRoZSBgUGxheWVyYCB3aGVuIGdldHRpbmcuXG4gICAqICAgICAgICAgLSB1bmRlZmluZWQgd2hlbiBzZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFzcGVjdFJhdGlvID0gZnVuY3Rpb24gYXNwZWN0UmF0aW8ocmF0aW8pIHtcbiAgICBpZiAocmF0aW8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNwZWN0UmF0aW9fO1xuICAgIH0gLy8gQ2hlY2sgZm9yIHdpZHRoOmhlaWdodCBmb3JtYXRcblxuXG4gICAgaWYgKCEvXlxcZCtcXDpcXGQrJC8udGVzdChyYXRpbykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW1wcm9wZXIgdmFsdWUgc3VwcGxpZWQgZm9yIGFzcGVjdCByYXRpby4gVGhlIGZvcm1hdCBzaG91bGQgYmUgd2lkdGg6aGVpZ2h0LCBmb3IgZXhhbXBsZSAxNjo5LicpO1xuICAgIH1cblxuICAgIHRoaXMuYXNwZWN0UmF0aW9fID0gcmF0aW87IC8vIFdlJ3JlIGFzc3VtaW5nIGlmIHlvdSBzZXQgYW4gYXNwZWN0IHJhdGlvIHlvdSB3YW50IGZsdWlkIG1vZGUsXG4gICAgLy8gYmVjYXVzZSBpbiBmaXhlZCBtb2RlIHlvdSBjb3VsZCBjYWxjdWxhdGUgd2lkdGggYW5kIGhlaWdodCB5b3Vyc2VsZi5cblxuICAgIHRoaXMuZmx1aWQodHJ1ZSk7XG4gICAgdGhpcy51cGRhdGVTdHlsZUVsXygpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgc3R5bGVzIG9mIHRoZSBgUGxheWVyYCBlbGVtZW50IChoZWlnaHQsIHdpZHRoIGFuZCBhc3BlY3QgcmF0aW8pLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbGlzdGVucyBUZWNoI2xvYWRlZG1ldGFkYXRhXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZVN0eWxlRWxfID0gZnVuY3Rpb24gdXBkYXRlU3R5bGVFbF8oKSB7XG4gICAgaWYgKHdpbmRvdyQxLlZJREVPSlNfTk9fRFlOQU1JQ19TVFlMRSA9PT0gdHJ1ZSkge1xuICAgICAgdmFyIF93aWR0aCA9IHR5cGVvZiB0aGlzLndpZHRoXyA9PT0gJ251bWJlcicgPyB0aGlzLndpZHRoXyA6IHRoaXMub3B0aW9uc18ud2lkdGg7XG5cbiAgICAgIHZhciBfaGVpZ2h0ID0gdHlwZW9mIHRoaXMuaGVpZ2h0XyA9PT0gJ251bWJlcicgPyB0aGlzLmhlaWdodF8gOiB0aGlzLm9wdGlvbnNfLmhlaWdodDtcblxuICAgICAgdmFyIHRlY2hFbCA9IHRoaXMudGVjaF8gJiYgdGhpcy50ZWNoXy5lbCgpO1xuXG4gICAgICBpZiAodGVjaEVsKSB7XG4gICAgICAgIGlmIChfd2lkdGggPj0gMCkge1xuICAgICAgICAgIHRlY2hFbC53aWR0aCA9IF93aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfaGVpZ2h0ID49IDApIHtcbiAgICAgICAgICB0ZWNoRWwuaGVpZ2h0ID0gX2hlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdpZHRoO1xuICAgIHZhciBoZWlnaHQ7XG4gICAgdmFyIGFzcGVjdFJhdGlvO1xuICAgIHZhciBpZENsYXNzOyAvLyBUaGUgYXNwZWN0IHJhdGlvIGlzIGVpdGhlciB1c2VkIGRpcmVjdGx5IG9yIHRvIGNhbGN1bGF0ZSB3aWR0aCBhbmQgaGVpZ2h0LlxuXG4gICAgaWYgKHRoaXMuYXNwZWN0UmF0aW9fICE9PSB1bmRlZmluZWQgJiYgdGhpcy5hc3BlY3RSYXRpb18gIT09ICdhdXRvJykge1xuICAgICAgLy8gVXNlIGFueSBhc3BlY3RSYXRpbyB0aGF0J3MgYmVlbiBzcGVjaWZpY2FsbHkgc2V0XG4gICAgICBhc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW9fO1xuICAgIH0gZWxzZSBpZiAodGhpcy52aWRlb1dpZHRoKCkgPiAwKSB7XG4gICAgICAvLyBPdGhlcndpc2UgdHJ5IHRvIGdldCB0aGUgYXNwZWN0IHJhdGlvIGZyb20gdGhlIHZpZGVvIG1ldGFkYXRhXG4gICAgICBhc3BlY3RSYXRpbyA9IHRoaXMudmlkZW9XaWR0aCgpICsgJzonICsgdGhpcy52aWRlb0hlaWdodCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPciB1c2UgYSBkZWZhdWx0LiBUaGUgdmlkZW8gZWxlbWVudCdzIGlzIDI6MSwgYnV0IDE2OjkgaXMgbW9yZSBjb21tb24uXG4gICAgICBhc3BlY3RSYXRpbyA9ICcxNjo5JztcbiAgICB9IC8vIEdldCB0aGUgcmF0aW8gYXMgYSBkZWNpbWFsIHdlIGNhbiB1c2UgdG8gY2FsY3VsYXRlIGRpbWVuc2lvbnNcblxuXG4gICAgdmFyIHJhdGlvUGFydHMgPSBhc3BlY3RSYXRpby5zcGxpdCgnOicpO1xuICAgIHZhciByYXRpb011bHRpcGxpZXIgPSByYXRpb1BhcnRzWzFdIC8gcmF0aW9QYXJ0c1swXTtcblxuICAgIGlmICh0aGlzLndpZHRoXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBVc2UgYW55IHdpZHRoIHRoYXQncyBiZWVuIHNwZWNpZmljYWxseSBzZXRcbiAgICAgIHdpZHRoID0gdGhpcy53aWR0aF87XG4gICAgfSBlbHNlIGlmICh0aGlzLmhlaWdodF8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gT3IgY2FsdWxhdGUgdGhlIHdpZHRoIGZyb20gdGhlIGFzcGVjdCByYXRpbyBpZiBhIGhlaWdodCBoYXMgYmVlbiBzZXRcbiAgICAgIHdpZHRoID0gdGhpcy5oZWlnaHRfIC8gcmF0aW9NdWx0aXBsaWVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPciB1c2UgdGhlIHZpZGVvJ3MgbWV0YWRhdGEsIG9yIHVzZSB0aGUgdmlkZW8gZWwncyBkZWZhdWx0IG9mIDMwMFxuICAgICAgd2lkdGggPSB0aGlzLnZpZGVvV2lkdGgoKSB8fCAzMDA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGVpZ2h0XyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBVc2UgYW55IGhlaWdodCB0aGF0J3MgYmVlbiBzcGVjaWZpY2FsbHkgc2V0XG4gICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodF87XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBjYWxjdWxhdGUgdGhlIGhlaWdodCBmcm9tIHRoZSByYXRpbyBhbmQgdGhlIHdpZHRoXG4gICAgICBoZWlnaHQgPSB3aWR0aCAqIHJhdGlvTXVsdGlwbGllcjtcbiAgICB9IC8vIEVuc3VyZSB0aGUgQ1NTIGNsYXNzIGlzIHZhbGlkIGJ5IHN0YXJ0aW5nIHdpdGggYW4gYWxwaGEgY2hhcmFjdGVyXG5cblxuICAgIGlmICgvXlteYS16QS1aXS8udGVzdCh0aGlzLmlkKCkpKSB7XG4gICAgICBpZENsYXNzID0gJ2RpbWVuc2lvbnMtJyArIHRoaXMuaWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWRDbGFzcyA9IHRoaXMuaWQoKSArICctZGltZW5zaW9ucyc7XG4gICAgfSAvLyBFbnN1cmUgdGhlIHJpZ2h0IGNsYXNzIGlzIHN0aWxsIG9uIHRoZSBwbGF5ZXIgZm9yIHRoZSBzdHlsZSBlbGVtZW50XG5cblxuICAgIHRoaXMuYWRkQ2xhc3MoaWRDbGFzcyk7XG4gICAgc2V0VGV4dENvbnRlbnQodGhpcy5zdHlsZUVsXywgXCJcXG4gICAgICAuXCIgKyBpZENsYXNzICsgXCIge1xcbiAgICAgICAgd2lkdGg6IFwiICsgd2lkdGggKyBcInB4O1xcbiAgICAgICAgaGVpZ2h0OiBcIiArIGhlaWdodCArIFwicHg7XFxuICAgICAgfVxcblxcbiAgICAgIC5cIiArIGlkQ2xhc3MgKyBcIi52anMtZmx1aWQge1xcbiAgICAgICAgcGFkZGluZy10b3A6IFwiICsgcmF0aW9NdWx0aXBsaWVyICogMTAwICsgXCIlO1xcbiAgICAgIH1cXG4gICAgXCIpO1xuICB9XG4gIC8qKlxuICAgKiBMb2FkL0NyZWF0ZSBhbiBpbnN0YW5jZSBvZiBwbGF5YmFjayB7QGxpbmsgVGVjaH0gaW5jbHVkaW5nIGVsZW1lbnRcbiAgICogYW5kIEFQSSBtZXRob2RzLiBUaGVuIGFwcGVuZCB0aGUgYFRlY2hgIGVsZW1lbnQgaW4gYFBsYXllcmAgYXMgYSBjaGlsZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRlY2hOYW1lXG4gICAqICAgICAgICBuYW1lIG9mIHRoZSBwbGF5YmFjayB0ZWNobm9sb2d5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VcbiAgICogICAgICAgIHZpZGVvIHNvdXJjZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb2FkVGVjaF8gPSBmdW5jdGlvbiBsb2FkVGVjaF8odGVjaE5hbWUsIHNvdXJjZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgLy8gUGF1c2UgYW5kIHJlbW92ZSBjdXJyZW50IHBsYXliYWNrIHRlY2hub2xvZ3lcbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgdGhpcy51bmxvYWRUZWNoXygpO1xuICAgIH1cblxuICAgIHZhciB0aXRsZVRlY2hOYW1lID0gdG9UaXRsZUNhc2UodGVjaE5hbWUpO1xuICAgIHZhciBjYW1lbFRlY2hOYW1lID0gdGVjaE5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyB0ZWNoTmFtZS5zbGljZSgxKTsgLy8gZ2V0IHJpZCBvZiB0aGUgSFRNTDUgdmlkZW8gdGFnIGFzIHNvb24gYXMgd2UgYXJlIHVzaW5nIGFub3RoZXIgdGVjaFxuXG4gICAgaWYgKHRpdGxlVGVjaE5hbWUgIT09ICdIdG1sNScgJiYgdGhpcy50YWcpIHtcbiAgICAgIFRlY2guZ2V0VGVjaCgnSHRtbDUnKS5kaXNwb3NlTWVkaWFFbGVtZW50KHRoaXMudGFnKTtcbiAgICAgIHRoaXMudGFnLnBsYXllciA9IG51bGw7XG4gICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy50ZWNoTmFtZV8gPSB0aXRsZVRlY2hOYW1lOyAvLyBUdXJuIG9mZiBBUEkgYWNjZXNzIGJlY2F1c2Ugd2UncmUgbG9hZGluZyBhIG5ldyB0ZWNoIHRoYXQgbWlnaHQgbG9hZCBhc3luY2hyb25vdXNseVxuXG4gICAgdGhpcy5pc1JlYWR5XyA9IGZhbHNlOyAvLyBpZiBhdXRvcGxheSBpcyBhIHN0cmluZyB3ZSBwYXNzIGZhbHNlIHRvIHRoZSB0ZWNoXG4gICAgLy8gYmVjYXVzZSB0aGUgcGxheWVyIGlzIGdvaW5nIHRvIGhhbmRsZSBhdXRvcGxheSBvbiBgbG9hZHN0YXJ0YFxuXG4gICAgdmFyIGF1dG9wbGF5ID0gdHlwZW9mIHRoaXMuYXV0b3BsYXkoKSA9PT0gJ3N0cmluZycgPyBmYWxzZSA6IHRoaXMuYXV0b3BsYXkoKTsgLy8gR3JhYiB0ZWNoLXNwZWNpZmljIG9wdGlvbnMgZnJvbSBwbGF5ZXIgb3B0aW9ucyBhbmQgYWRkIHNvdXJjZSBhbmQgcGFyZW50IGVsZW1lbnQgdG8gdXNlLlxuXG4gICAgdmFyIHRlY2hPcHRpb25zID0ge1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBhdXRvcGxheTogYXV0b3BsYXksXG4gICAgICAnbmF0aXZlQ29udHJvbHNGb3JUb3VjaCc6IHRoaXMub3B0aW9uc18ubmF0aXZlQ29udHJvbHNGb3JUb3VjaCxcbiAgICAgICdwbGF5ZXJJZCc6IHRoaXMuaWQoKSxcbiAgICAgICd0ZWNoSWQnOiB0aGlzLmlkKCkgKyBcIl9cIiArIGNhbWVsVGVjaE5hbWUgKyBcIl9hcGlcIixcbiAgICAgICdwbGF5c2lubGluZSc6IHRoaXMub3B0aW9uc18ucGxheXNpbmxpbmUsXG4gICAgICAncHJlbG9hZCc6IHRoaXMub3B0aW9uc18ucHJlbG9hZCxcbiAgICAgICdsb29wJzogdGhpcy5vcHRpb25zXy5sb29wLFxuICAgICAgJ211dGVkJzogdGhpcy5vcHRpb25zXy5tdXRlZCxcbiAgICAgICdwb3N0ZXInOiB0aGlzLnBvc3RlcigpLFxuICAgICAgJ2xhbmd1YWdlJzogdGhpcy5sYW5ndWFnZSgpLFxuICAgICAgJ3BsYXllckVsSW5nZXN0JzogdGhpcy5wbGF5ZXJFbEluZ2VzdF8gfHwgZmFsc2UsXG4gICAgICAndnR0LmpzJzogdGhpcy5vcHRpb25zX1sndnR0LmpzJ10sXG4gICAgICAnY2FuT3ZlcnJpZGVQb3N0ZXInOiAhIXRoaXMub3B0aW9uc18udGVjaENhbk92ZXJyaWRlUG9zdGVyLFxuICAgICAgJ2VuYWJsZVNvdXJjZXNldCc6IHRoaXMub3B0aW9uc18uZW5hYmxlU291cmNlc2V0LFxuICAgICAgJ1Byb21pc2UnOiB0aGlzLm9wdGlvbnNfLlByb21pc2VcbiAgICB9O1xuICAgIEFMTC5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG4gICAgICB0ZWNoT3B0aW9uc1twcm9wcy5nZXR0ZXJOYW1lXSA9IF90aGlzM1twcm9wcy5wcml2YXRlTmFtZV07XG4gICAgfSk7XG4gICAgYXNzaWduKHRlY2hPcHRpb25zLCB0aGlzLm9wdGlvbnNfW3RpdGxlVGVjaE5hbWVdKTtcbiAgICBhc3NpZ24odGVjaE9wdGlvbnMsIHRoaXMub3B0aW9uc19bY2FtZWxUZWNoTmFtZV0pO1xuICAgIGFzc2lnbih0ZWNoT3B0aW9ucywgdGhpcy5vcHRpb25zX1t0ZWNoTmFtZS50b0xvd2VyQ2FzZSgpXSk7XG5cbiAgICBpZiAodGhpcy50YWcpIHtcbiAgICAgIHRlY2hPcHRpb25zLnRhZyA9IHRoaXMudGFnO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UgJiYgc291cmNlLnNyYyA9PT0gdGhpcy5jYWNoZV8uc3JjICYmIHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgdGVjaE9wdGlvbnMuc3RhcnRUaW1lID0gdGhpcy5jYWNoZV8uY3VycmVudFRpbWU7XG4gICAgfSAvLyBJbml0aWFsaXplIHRlY2ggaW5zdGFuY2VcblxuXG4gICAgdmFyIFRlY2hDbGFzcyA9IFRlY2guZ2V0VGVjaCh0ZWNoTmFtZSk7XG5cbiAgICBpZiAoIVRlY2hDbGFzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gVGVjaCBuYW1lZCAnXCIgKyB0aXRsZVRlY2hOYW1lICsgXCInIGV4aXN0cyEgJ1wiICsgdGl0bGVUZWNoTmFtZSArIFwiJyBzaG91bGQgYmUgcmVnaXN0ZXJlZCB1c2luZyB2aWRlb2pzLnJlZ2lzdGVyVGVjaCgpJ1wiKTtcbiAgICB9XG5cbiAgICB0aGlzLnRlY2hfID0gbmV3IFRlY2hDbGFzcyh0ZWNoT3B0aW9ucyk7IC8vIHBsYXllci50cmlnZ2VyUmVhZHkgaXMgYWx3YXlzIGFzeW5jLCBzbyBkb24ndCBuZWVkIHRoaXMgdG8gYmUgYXN5bmNcblxuICAgIHRoaXMudGVjaF8ucmVhZHkoYmluZCh0aGlzLCB0aGlzLmhhbmRsZVRlY2hSZWFkeV8pLCB0cnVlKTtcbiAgICB0ZXh0VHJhY2tDb252ZXJ0ZXIuanNvblRvVGV4dFRyYWNrcyh0aGlzLnRleHRUcmFja3NKc29uXyB8fCBbXSwgdGhpcy50ZWNoXyk7IC8vIExpc3RlbiB0byBhbGwgSFRNTDUtZGVmaW5lZCBldmVudHMgYW5kIHRyaWdnZXIgdGhlbSBvbiB0aGUgcGxheWVyXG5cbiAgICBURUNIX0VWRU5UU19SRVRSSUdHRVIuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzMy5vbihfdGhpczMudGVjaF8sIGV2ZW50LCBfdGhpczNbXCJoYW5kbGVUZWNoXCIgKyB0b1RpdGxlQ2FzZShldmVudCkgKyBcIl9cIl0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKFRFQ0hfRVZFTlRTX1FVRVVFKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMzLm9uKF90aGlzMy50ZWNoXywgZXZlbnQsIGZ1bmN0aW9uIChldmVudE9iaikge1xuICAgICAgICBpZiAoX3RoaXMzLnRlY2hfLnBsYXliYWNrUmF0ZSgpID09PSAwICYmIF90aGlzMy50ZWNoXy5zZWVraW5nKCkpIHtcbiAgICAgICAgICBfdGhpczMucXVldWVkQ2FsbGJhY2tzXy5wdXNoKHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBfdGhpczNbXCJoYW5kbGVUZWNoXCIgKyBURUNIX0VWRU5UU19RVUVVRVtldmVudF0gKyBcIl9cIl0uYmluZChfdGhpczMpLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50T2JqXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczNbXCJoYW5kbGVUZWNoXCIgKyBURUNIX0VWRU5UU19RVUVVRVtldmVudF0gKyBcIl9cIl0oZXZlbnRPYmopO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnbG9hZHN0YXJ0JywgdGhpcy5oYW5kbGVUZWNoTG9hZFN0YXJ0Xyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnc291cmNlc2V0JywgdGhpcy5oYW5kbGVUZWNoU291cmNlc2V0Xyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnd2FpdGluZycsIHRoaXMuaGFuZGxlVGVjaFdhaXRpbmdfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdlbmRlZCcsIHRoaXMuaGFuZGxlVGVjaEVuZGVkXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnc2Vla2luZycsIHRoaXMuaGFuZGxlVGVjaFNlZWtpbmdfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdwbGF5JywgdGhpcy5oYW5kbGVUZWNoUGxheV8pO1xuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ2ZpcnN0cGxheScsIHRoaXMuaGFuZGxlVGVjaEZpcnN0UGxheV8pO1xuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ3BhdXNlJywgdGhpcy5oYW5kbGVUZWNoUGF1c2VfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdkdXJhdGlvbmNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnZnVsbHNjcmVlbmNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLmhhbmRsZVRlY2hFbnRlclBpY3R1cmVJblBpY3R1cmVfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLmhhbmRsZVRlY2hMZWF2ZVBpY3R1cmVJblBpY3R1cmVfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdlcnJvcicsIHRoaXMuaGFuZGxlVGVjaEVycm9yXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnbG9hZGVkbWV0YWRhdGEnLCB0aGlzLnVwZGF0ZVN0eWxlRWxfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdwb3N0ZXJjaGFuZ2UnLCB0aGlzLmhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICd0ZXh0ZGF0YScsIHRoaXMuaGFuZGxlVGVjaFRleHREYXRhXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAncmF0ZWNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaFJhdGVDaGFuZ2VfKTtcbiAgICB0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHModGhpcy50ZWNoR2V0XygnY29udHJvbHMnKSk7XG5cbiAgICBpZiAodGhpcy5jb250cm9scygpICYmICF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgdGhpcy5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCk7XG4gICAgfSAvLyBBZGQgdGhlIHRlY2ggZWxlbWVudCBpbiB0aGUgRE9NIGlmIGl0IHdhcyBub3QgYWxyZWFkeSB0aGVyZVxuICAgIC8vIE1ha2Ugc3VyZSB0byBub3QgaW5zZXJ0IHRoZSBvcmlnaW5hbCB2aWRlbyBlbGVtZW50IGlmIHVzaW5nIEh0bWw1XG5cblxuICAgIGlmICh0aGlzLnRlY2hfLmVsKCkucGFyZW50Tm9kZSAhPT0gdGhpcy5lbCgpICYmICh0aXRsZVRlY2hOYW1lICE9PSAnSHRtbDUnIHx8ICF0aGlzLnRhZykpIHtcbiAgICAgIHByZXBlbmRUbyh0aGlzLnRlY2hfLmVsKCksIHRoaXMuZWwoKSk7XG4gICAgfSAvLyBHZXQgcmlkIG9mIHRoZSBvcmlnaW5hbCB2aWRlbyB0YWcgcmVmZXJlbmNlIGFmdGVyIHRoZSBmaXJzdCB0ZWNoIGlzIGxvYWRlZFxuXG5cbiAgICBpZiAodGhpcy50YWcpIHtcbiAgICAgIHRoaXMudGFnLnBsYXllciA9IG51bGw7XG4gICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbmxvYWQgYW5kIGRpc3Bvc2Ugb2YgdGhlIGN1cnJlbnQgcGxheWJhY2sge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bmxvYWRUZWNoXyA9IGZ1bmN0aW9uIHVubG9hZFRlY2hfKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCB0ZXh0IHRyYWNrcyBzbyB0aGF0IHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0ZXh0IHRyYWNrcyB3aXRoIHRoZSBuZXh0IHRlY2hcbiAgICBBTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHByb3BzID0gQUxMW25hbWVdO1xuICAgICAgX3RoaXM0W3Byb3BzLnByaXZhdGVOYW1lXSA9IF90aGlzNFtwcm9wcy5nZXR0ZXJOYW1lXSgpO1xuICAgIH0pO1xuICAgIHRoaXMudGV4dFRyYWNrc0pzb25fID0gdGV4dFRyYWNrQ29udmVydGVyLnRleHRUcmFja3NUb0pzb24odGhpcy50ZWNoXyk7XG4gICAgdGhpcy5pc1JlYWR5XyA9IGZhbHNlO1xuICAgIHRoaXMudGVjaF8uZGlzcG9zZSgpO1xuICAgIHRoaXMudGVjaF8gPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmlzUG9zdGVyRnJvbVRlY2hfKSB7XG4gICAgICB0aGlzLnBvc3Rlcl8gPSAnJztcbiAgICAgIHRoaXMudHJpZ2dlcigncG9zdGVyY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc1Bvc3RlckZyb21UZWNoXyA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQge0BsaW5rIFRlY2h9LlxuICAgKiBJdCB3aWxsIHByaW50IGEgd2FybmluZyBieSBkZWZhdWx0IGFib3V0IHRoZSBkYW5nZXIgb2YgdXNpbmcgdGhlIHRlY2ggZGlyZWN0bHlcbiAgICogYnV0IGFueSBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCBpbiB3aWxsIHNpbGVuY2UgdGhlIHdhcm5pbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gW3NhZmV0eV1cbiAgICogICAgICAgIEFueXRoaW5nIHBhc3NlZCBpbiB0byBzaWxlbmNlIHRoZSB3YXJuaW5nXG4gICAqXG4gICAqIEByZXR1cm4ge1RlY2h9XG4gICAqICAgICAgICAgVGhlIFRlY2hcbiAgICovXG4gIDtcblxuICBfcHJvdG8udGVjaCA9IGZ1bmN0aW9uIHRlY2goc2FmZXR5KSB7XG4gICAgaWYgKHNhZmV0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsb2cud2FybignVXNpbmcgdGhlIHRlY2ggZGlyZWN0bHkgY2FuIGJlIGRhbmdlcm91cy4gSSBob3BlIHlvdSBrbm93IHdoYXQgeW91XFwncmUgZG9pbmcuXFxuJyArICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzI2MTcgZm9yIG1vcmUgaW5mby5cXG4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZWNoXztcbiAgfVxuICAvKipcbiAgICogU2V0IHVwIGNsaWNrIGFuZCB0b3VjaCBsaXN0ZW5lcnMgZm9yIHRoZSBwbGF5YmFjayBlbGVtZW50XG4gICAqXG4gICAqIC0gT24gZGVza3RvcHM6IGEgY2xpY2sgb24gdGhlIHZpZGVvIGl0c2VsZiB3aWxsIHRvZ2dsZSBwbGF5YmFja1xuICAgKiAtIE9uIG1vYmlsZSBkZXZpY2VzOiBhIGNsaWNrIG9uIHRoZSB2aWRlbyB0b2dnbGVzIGNvbnRyb2xzXG4gICAqICAgd2hpY2ggaXMgZG9uZSBieSB0b2dnbGluZyB0aGUgdXNlciBzdGF0ZSBiZXR3ZWVuIGFjdGl2ZSBhbmRcbiAgICogICBpbmFjdGl2ZVxuICAgKiAtIEEgdGFwIGNhbiBzaWduYWwgdGhhdCBhIHVzZXIgaGFzIGJlY29tZSBhY3RpdmUgb3IgaGFzIGJlY29tZSBpbmFjdGl2ZVxuICAgKiAgIGUuZy4gYSBxdWljayB0YXAgb24gYW4gaVBob25lIG1vdmllIHNob3VsZCByZXZlYWwgdGhlIGNvbnRyb2xzLiBBbm90aGVyXG4gICAqICAgcXVpY2sgdGFwIHNob3VsZCBoaWRlIHRoZW0gYWdhaW4gKHNpZ25hbGluZyB0aGUgdXNlciBpcyBpbiBhbiBpbmFjdGl2ZVxuICAgKiAgIHZpZXdpbmcgc3RhdGUpXG4gICAqIC0gSW4gYWRkaXRpb24gdG8gdGhpcywgd2Ugc3RpbGwgd2FudCB0aGUgdXNlciB0byBiZSBjb25zaWRlcmVkIGluYWN0aXZlIGFmdGVyXG4gICAqICAgYSBmZXcgc2Vjb25kcyBvZiBpbmFjdGl2aXR5LlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZSBvbmx5IHBhcnQgb2YgaU9TIGludGVyYWN0aW9uIHdlIGNhbid0IG1pbWljIHdpdGggdGhpcyBzZXR1cFxuICAgKiBpcyBhIHRvdWNoIGFuZCBob2xkIG9uIHRoZSB2aWRlbyBlbGVtZW50IGNvdW50aW5nIGFzIGFjdGl2aXR5IGluIG9yZGVyIHRvXG4gICAqIGtlZXAgdGhlIGNvbnRyb2xzIHNob3dpbmcsIGJ1dCB0aGF0IHNob3VsZG4ndCBiZSBhbiBpc3N1ZS4gQSB0b3VjaCBhbmQgaG9sZFxuICAgKiBvbiBhbnkgY29udHJvbHMgd2lsbCBzdGlsbCBrZWVwIHRoZSB1c2VyIGFjdGl2ZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfID0gZnVuY3Rpb24gYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpIHtcbiAgICAvLyBNYWtlIHN1cmUgdG8gcmVtb3ZlIGFsbCB0aGUgcHJldmlvdXMgbGlzdGVuZXJzIGluIGNhc2Ugd2UgYXJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICB0aGlzLnJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVyc18oKTsgLy8gU29tZSBicm93c2VycyAoQ2hyb21lICYgSUUpIGRvbid0IHRyaWdnZXIgYSBjbGljayBvbiBhIGZsYXNoIHN3ZiwgYnV0IGRvXG4gICAgLy8gdHJpZ2dlciBtb3VzZWRvd24vdXAuXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDQ0NTYyL2phdmFzY3JpcHQtb25jbGljay1ldmVudC1vdmVyLWZsYXNoLW9iamVjdFxuICAgIC8vIEFueSB0b3VjaCBldmVudHMgYXJlIHNldCB0byBibG9jayB0aGUgbW91c2Vkb3duIGV2ZW50IGZyb20gaGFwcGVuaW5nXG5cbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdtb3VzZXVwJywgdGhpcy5oYW5kbGVUZWNoQ2xpY2tfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdkYmxjbGljaycsIHRoaXMuaGFuZGxlVGVjaERvdWJsZUNsaWNrXyk7IC8vIElmIHRoZSBjb250cm9scyB3ZXJlIGhpZGRlbiB3ZSBkb24ndCB3YW50IHRoYXQgdG8gY2hhbmdlIHdpdGhvdXQgYSB0YXAgZXZlbnRcbiAgICAvLyBzbyB3ZSdsbCBjaGVjayBpZiB0aGUgY29udHJvbHMgd2VyZSBhbHJlYWR5IHNob3dpbmcgYmVmb3JlIHJlcG9ydGluZyB1c2VyXG4gICAgLy8gYWN0aXZpdHlcblxuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaFN0YXJ0Xyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hNb3ZlXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaEVuZF8pOyAvLyBUaGUgdGFwIGxpc3RlbmVyIG5lZWRzIHRvIGNvbWUgYWZ0ZXIgdGhlIHRvdWNoZW5kIGxpc3RlbmVyIGJlY2F1c2UgdGhlIHRhcFxuICAgIC8vIGxpc3RlbmVyIGNhbmNlbHMgb3V0IGFueSByZXBvcnRlZFVzZXJBY3Rpdml0eSB3aGVuIHNldHRpbmcgdXNlckFjdGl2ZShmYWxzZSlcblxuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ3RhcCcsIHRoaXMuaGFuZGxlVGVjaFRhcF8pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGxpc3RlbmVycyB1c2VkIGZvciBjbGljayBhbmQgdGFwIGNvbnRyb2xzLiBUaGlzIGlzIG5lZWRlZCBmb3JcbiAgICogdG9nZ2xpbmcgdG8gY29udHJvbHMgZGlzYWJsZWQsIHdoZXJlIGEgdGFwL3RvdWNoIHNob3VsZCBkbyBub3RoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfID0gZnVuY3Rpb24gcmVtb3ZlVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpIHtcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIGp1c3QgdXNlIGB0aGlzLm9mZigpYCBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIG90aGVyIG5lZWRlZFxuICAgIC8vIGxpc3RlbmVycyBhZGRlZCBieSB0ZWNocyB0aGF0IGV4dGVuZCB0aGlzLlxuICAgIHRoaXMub2ZmKHRoaXMudGVjaF8sICd0YXAnLCB0aGlzLmhhbmRsZVRlY2hUYXBfKTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2hfLCAndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVGVjaFRvdWNoU3RhcnRfKTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2hfLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hNb3ZlXyk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoXywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hFbmRfKTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2hfLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlVGVjaENsaWNrXyk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoXywgJ2RibGNsaWNrJywgdGhpcy5oYW5kbGVUZWNoRG91YmxlQ2xpY2tfKTtcbiAgfVxuICAvKipcbiAgICogUGxheWVyIHdhaXRzIGZvciB0aGUgdGVjaCB0byBiZSByZWFkeVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoUmVhZHlfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFJlYWR5XygpIHtcbiAgICB0aGlzLnRyaWdnZXJSZWFkeSgpOyAvLyBLZWVwIHRoZSBzYW1lIHZvbHVtZSBhcyBiZWZvcmVcblxuICAgIGlmICh0aGlzLmNhY2hlXy52b2x1bWUpIHtcbiAgICAgIHRoaXMudGVjaENhbGxfKCdzZXRWb2x1bWUnLCB0aGlzLmNhY2hlXy52b2x1bWUpO1xuICAgIH0gLy8gTG9vayBpZiB0aGUgdGVjaCBmb3VuZCBhIGhpZ2hlciByZXNvbHV0aW9uIHBvc3RlciB3aGlsZSBsb2FkaW5nXG5cblxuICAgIHRoaXMuaGFuZGxlVGVjaFBvc3RlckNoYW5nZV8oKTsgLy8gVXBkYXRlIHRoZSBkdXJhdGlvbiBpZiBhdmFpbGFibGVcblxuICAgIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBsb2Fkc3RhcnRgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LiBUaGlzXG4gICAqIGZ1bmN0aW9uIHdpbGwgYWxzbyB0cmlnZ2VyIHtAbGluayBQbGF5ZXIjZmlyc3RwbGF5fSBpZiBpdCBpcyB0aGUgZmlyc3QgbG9hZHN0YXJ0XG4gICAqIGZvciBhIHZpZGVvLlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2xvYWRzdGFydFxuICAgKiBAZmlyZXMgUGxheWVyI2ZpcnN0cGxheVxuICAgKiBAbGlzdGVucyBUZWNoI2xvYWRzdGFydFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoTG9hZFN0YXJ0XyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hMb2FkU3RhcnRfKCkge1xuICAgIC8vIFRPRE86IFVwZGF0ZSB0byB1c2UgYGVtcHRpZWRgIGV2ZW50IGluc3RlYWQuIFNlZSAjMTI3Ny5cbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZW5kZWQnKTtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtc2Vla2luZycpOyAvLyByZXNldCB0aGUgZXJyb3Igc3RhdGVcblxuICAgIHRoaXMuZXJyb3IobnVsbCk7IC8vIFVwZGF0ZSB0aGUgZHVyYXRpb25cblxuICAgIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXygpOyAvLyBJZiBpdCdzIGFscmVhZHkgcGxheWluZyB3ZSB3YW50IHRvIHRyaWdnZXIgYSBmaXJzdHBsYXkgZXZlbnQgbm93LlxuICAgIC8vIFRoZSBmaXJzdHBsYXkgZXZlbnQgcmVsaWVzIG9uIGJvdGggdGhlIHBsYXkgYW5kIGxvYWRzdGFydCBldmVudHNcbiAgICAvLyB3aGljaCBjYW4gaGFwcGVuIGluIGFueSBvcmRlciBmb3IgYSBuZXcgc291cmNlXG5cbiAgICBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZWQgd2hlbiB0aGUgdXNlciBhZ2VudCBiZWdpbnMgbG9va2luZyBmb3IgbWVkaWEgZGF0YVxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjbG9hZHN0YXJ0XG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHRoaXMudHJpZ2dlcignbG9hZHN0YXJ0Jyk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXNldCB0aGUgaGFzU3RhcnRlZCBzdGF0ZVxuICAgICAgdGhpcy5oYXNTdGFydGVkKGZhbHNlKTtcbiAgICAgIHRoaXMudHJpZ2dlcignbG9hZHN0YXJ0Jyk7XG4gICAgfSAvLyBhdXRvcGxheSBoYXBwZW5zIGFmdGVyIGxvYWRzdGFydCBmb3IgdGhlIGJyb3dzZXIsXG4gICAgLy8gc28gd2UgbWltaWMgdGhhdCBiZWhhdmlvclxuXG5cbiAgICB0aGlzLm1hbnVhbEF1dG9wbGF5Xyh0aGlzLmF1dG9wbGF5KCkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYXV0b3BsYXkgc3RyaW5nIHZhbHVlcywgcmF0aGVyIHRoYW4gdGhlIHR5cGljYWwgYm9vbGVhblxuICAgKiB2YWx1ZXMgdGhhdCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgdGVjaC4gTm90ZSB0aGF0IHRoaXMgaXMgbm90XG4gICAqIHBhcnQgb2YgYW55IHNwZWNpZmljYXRpb24uIFZhbGlkIHZhbHVlcyBhbmQgd2hhdCB0aGV5IGRvIGNhbiBiZVxuICAgKiBmb3VuZCBvbiB0aGUgYXV0b3BsYXkgZ2V0dGVyIGF0IFBsYXllciNhdXRvcGxheSgpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hbnVhbEF1dG9wbGF5XyA9IGZ1bmN0aW9uIG1hbnVhbEF1dG9wbGF5Xyh0eXBlKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMudGVjaF8gfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG11dGVkID0gZnVuY3Rpb24gbXV0ZWQoKSB7XG4gICAgICB2YXIgcHJldmlvdXNseU11dGVkID0gX3RoaXM1Lm11dGVkKCk7XG5cbiAgICAgIF90aGlzNS5tdXRlZCh0cnVlKTtcblxuICAgICAgdmFyIHJlc3RvcmVNdXRlZCA9IGZ1bmN0aW9uIHJlc3RvcmVNdXRlZCgpIHtcbiAgICAgICAgX3RoaXM1Lm11dGVkKHByZXZpb3VzbHlNdXRlZCk7XG4gICAgICB9OyAvLyByZXN0b3JlIG11dGVkIG9uIHBsYXkgdGVybWluYXRhdGlvblxuXG5cbiAgICAgIF90aGlzNS5wbGF5VGVybWluYXRlZFF1ZXVlXy5wdXNoKHJlc3RvcmVNdXRlZCk7XG5cbiAgICAgIHZhciBtdXRlZFByb21pc2UgPSBfdGhpczUucGxheSgpO1xuXG4gICAgICBpZiAoIWlzUHJvbWlzZShtdXRlZFByb21pc2UpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG11dGVkUHJvbWlzZVtcImNhdGNoXCJdKHJlc3RvcmVNdXRlZCk7XG4gICAgfTtcblxuICAgIHZhciBwcm9taXNlOyAvLyBpZiBtdXRlZCBkZWZhdWx0cyB0byB0cnVlXG4gICAgLy8gdGhlIG9ubHkgdGhpbmcgd2UgY2FuIGRvIGlzIGNhbGwgcGxheVxuXG4gICAgaWYgKHR5cGUgPT09ICdhbnknICYmIHRoaXMubXV0ZWQoKSAhPT0gdHJ1ZSkge1xuICAgICAgcHJvbWlzZSA9IHRoaXMucGxheSgpO1xuXG4gICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlW1wiY2F0Y2hcIl0obXV0ZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ211dGVkJyAmJiB0aGlzLm11dGVkKCkgIT09IHRydWUpIHtcbiAgICAgIHByb21pc2UgPSBtdXRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlID0gdGhpcy5wbGF5KCk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2F1dG9wbGF5LXN1Y2Nlc3MnLFxuICAgICAgICBhdXRvcGxheTogdHlwZVxuICAgICAgfSk7XG4gICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXM1LnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnYXV0b3BsYXktZmFpbHVyZScsXG4gICAgICAgIGF1dG9wbGF5OiB0eXBlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBpbnRlcm5hbCBzb3VyY2UgY2FjaGVzIHNvIHRoYXQgd2UgcmV0dXJuIHRoZSBjb3JyZWN0IHNvdXJjZSBmcm9tXG4gICAqIGBzcmMoKWAsIGBjdXJyZW50U291cmNlKClgLCBhbmQgYGN1cnJlbnRTb3VyY2VzKClgLlxuICAgKlxuICAgKiA+IE5vdGU6IGBjdXJyZW50U291cmNlc2Agd2lsbCBub3QgYmUgdXBkYXRlZCBpZiB0aGUgc291cmNlIHRoYXQgaXMgcGFzc2VkIGluIGV4aXN0c1xuICAgKiAgICAgICAgIGluIHRoZSBjdXJyZW50IGBjdXJyZW50U291cmNlc2AgY2FjaGUuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNyY09ialxuICAgKiAgICAgICAgQSBzdHJpbmcgb3Igb2JqZWN0IHNvdXJjZSB0byB1cGRhdGUgb3VyIGNhY2hlcyB0by5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlU291cmNlQ2FjaGVzXyA9IGZ1bmN0aW9uIHVwZGF0ZVNvdXJjZUNhY2hlc18oc3JjT2JqKSB7XG4gICAgaWYgKHNyY09iaiA9PT0gdm9pZCAwKSB7XG4gICAgICBzcmNPYmogPSAnJztcbiAgICB9XG5cbiAgICB2YXIgc3JjID0gc3JjT2JqO1xuICAgIHZhciB0eXBlID0gJyc7XG5cbiAgICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHNyYyA9IHNyY09iai5zcmM7XG4gICAgICB0eXBlID0gc3JjT2JqLnR5cGU7XG4gICAgfSAvLyBtYWtlIHN1cmUgYWxsIHRoZSBjYWNoZXMgYXJlIHNldCB0byBkZWZhdWx0IHZhbHVlc1xuICAgIC8vIHRvIHByZXZlbnQgbnVsbCBjaGVja2luZ1xuXG5cbiAgICB0aGlzLmNhY2hlXy5zb3VyY2UgPSB0aGlzLmNhY2hlXy5zb3VyY2UgfHwge307XG4gICAgdGhpcy5jYWNoZV8uc291cmNlcyA9IHRoaXMuY2FjaGVfLnNvdXJjZXMgfHwgW107IC8vIHRyeSB0byBnZXQgdGhlIHR5cGUgb2YgdGhlIHNyYyB0aGF0IHdhcyBwYXNzZWQgaW5cblxuICAgIGlmIChzcmMgJiYgIXR5cGUpIHtcbiAgICAgIHR5cGUgPSBmaW5kTWltZXR5cGUodGhpcywgc3JjKTtcbiAgICB9IC8vIHVwZGF0ZSBgY3VycmVudFNvdXJjZWAgY2FjaGUgYWx3YXlzXG5cblxuICAgIHRoaXMuY2FjaGVfLnNvdXJjZSA9IG1lcmdlT3B0aW9ucyh7fSwgc3JjT2JqLCB7XG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KTtcbiAgICB2YXIgbWF0Y2hpbmdTb3VyY2VzID0gdGhpcy5jYWNoZV8uc291cmNlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLnNyYyAmJiBzLnNyYyA9PT0gc3JjO1xuICAgIH0pO1xuICAgIHZhciBzb3VyY2VFbFNvdXJjZXMgPSBbXTtcbiAgICB2YXIgc291cmNlRWxzID0gdGhpcy4kJCgnc291cmNlJyk7XG4gICAgdmFyIG1hdGNoaW5nU291cmNlRWxzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZUVscy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZU9iaiA9IGdldEF0dHJpYnV0ZXMoc291cmNlRWxzW2ldKTtcbiAgICAgIHNvdXJjZUVsU291cmNlcy5wdXNoKHNvdXJjZU9iaik7XG5cbiAgICAgIGlmIChzb3VyY2VPYmouc3JjICYmIHNvdXJjZU9iai5zcmMgPT09IHNyYykge1xuICAgICAgICBtYXRjaGluZ1NvdXJjZUVscy5wdXNoKHNvdXJjZU9iai5zcmMpO1xuICAgICAgfVxuICAgIH0gLy8gaWYgd2UgaGF2ZSBtYXRjaGluZyBzb3VyY2UgZWxzIGJ1dCBub3QgbWF0Y2hpbmcgc291cmNlc1xuICAgIC8vIHRoZSBjdXJyZW50IHNvdXJjZSBjYWNoZSBpcyBub3QgdXAgdG8gZGF0ZVxuXG5cbiAgICBpZiAobWF0Y2hpbmdTb3VyY2VFbHMubGVuZ3RoICYmICFtYXRjaGluZ1NvdXJjZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmNhY2hlXy5zb3VyY2VzID0gc291cmNlRWxTb3VyY2VzOyAvLyBpZiB3ZSBkb24ndCBoYXZlIG1hdGNoaW5nIHNvdXJjZSBvciBzb3VyY2UgZWxzIHNldCB0aGVcbiAgICAgIC8vIHNvdXJjZXMgY2FjaGUgdG8gdGhlIGBjdXJyZW50U291cmNlYCBjYWNoZVxuICAgIH0gZWxzZSBpZiAoIW1hdGNoaW5nU291cmNlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY2FjaGVfLnNvdXJjZXMgPSBbdGhpcy5jYWNoZV8uc291cmNlXTtcbiAgICB9IC8vIHVwZGF0ZSB0aGUgdGVjaCBgc3JjYCBjYWNoZVxuXG5cbiAgICB0aGlzLmNhY2hlXy5zcmMgPSBzcmM7XG4gIH1cbiAgLyoqXG4gICAqICpFWFBFUklNRU5UQUwqIEZpcmVkIHdoZW4gdGhlIHNvdXJjZSBpcyBzZXQgb3IgY2hhbmdlZCBvbiB0aGUge0BsaW5rIFRlY2h9XG4gICAqIGNhdXNpbmcgdGhlIG1lZGlhIGVsZW1lbnQgdG8gcmVsb2FkLlxuICAgKlxuICAgKiBJdCB3aWxsIGZpcmUgZm9yIHRoZSBpbml0aWFsIHNvdXJjZSBhbmQgZWFjaCBzdWJzZXF1ZW50IHNvdXJjZS5cbiAgICogVGhpcyBldmVudCBpcyBhIGN1c3RvbSBldmVudCBmcm9tIFZpZGVvLmpzIGFuZCBpcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogVGhlIGV2ZW50IG9iamVjdCBmb3IgdGhpcyBldmVudCBjb250YWlucyBhIGBzcmNgIHByb3BlcnR5IHRoYXQgd2lsbCBjb250YWluIHRoZSBzb3VyY2VcbiAgICogdGhhdCB3YXMgYXZhaWxhYmxlIHdoZW4gdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQuIFRoaXMgaXMgZ2VuZXJhbGx5IG9ubHkgbmVjZXNzYXJ5IGlmIFZpZGVvLmpzXG4gICAqIGlzIHN3aXRjaGluZyB0ZWNocyB3aGlsZSB0aGUgc291cmNlIHdhcyBiZWluZyBjaGFuZ2VkLlxuICAgKlxuICAgKiBJdCBpcyBhbHNvIGZpcmVkIHdoZW4gYGxvYWRgIGlzIGNhbGxlZCBvbiB0aGUgcGxheWVyIChvciBtZWRpYSBlbGVtZW50KVxuICAgKiBiZWNhdXNlIHRoZSB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWVkaWEuaHRtbCNkb20tbWVkaWEtbG9hZHxzcGVjaWZpY2F0aW9uIGZvciBgbG9hZGB9XG4gICAqIHNheXMgdGhhdCB0aGUgcmVzb3VyY2Ugc2VsZWN0aW9uIGFsZ29yaXRobSBuZWVkcyB0byBiZSBhYm9ydGVkIGFuZCByZXN0YXJ0ZWQuXG4gICAqIEluIHRoaXMgY2FzZSwgaXQgaXMgdmVyeSBsaWtlbHkgdGhhdCB0aGUgYHNyY2AgcHJvcGVydHkgd2lsbCBiZSBzZXQgdG8gdGhlXG4gICAqIGVtcHR5IHN0cmluZyBgXCJcImAgdG8gaW5kaWNhdGUgd2UgZG8gbm90IGtub3cgd2hhdCB0aGUgc291cmNlIHdpbGwgYmUgYnV0XG4gICAqIHRoYXQgaXQgaXMgY2hhbmdpbmcuXG4gICAqXG4gICAqICpUaGlzIGV2ZW50IGlzIGN1cnJlbnRseSBzdGlsbCBleHBlcmltZW50YWwgYW5kIG1heSBjaGFuZ2UgaW4gbWlub3IgcmVsZWFzZXMuKlxuICAgKiBfX1RvIHVzZSB0aGlzLCBwYXNzIGBlbmFibGVTb3VyY2VzZXRgIG9wdGlvbiB0byB0aGUgcGxheWVyLl9fXG4gICAqXG4gICAqIEBldmVudCBQbGF5ZXIjc291cmNlc2V0XG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICogQHByb3Age3N0cmluZ30gc3JjXG4gICAqICAgICAgICAgICAgICAgIFRoZSBzb3VyY2UgdXJsIGF2YWlsYWJsZSB3aGVuIHRoZSBgc291cmNlc2V0YCB3YXMgdHJpZ2dlcmVkLlxuICAgKiAgICAgICAgICAgICAgICBJdCB3aWxsIGJlIGFuIGVtcHR5IHN0cmluZyBpZiB3ZSBjYW5ub3Qga25vdyB3aGF0IHRoZSBzb3VyY2UgaXNcbiAgICogICAgICAgICAgICAgICAgYnV0IGtub3cgdGhhdCB0aGUgc291cmNlIHdpbGwgY2hhbmdlLlxuICAgKi9cblxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgc291cmNlc2V0YCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNzb3VyY2VzZXRcbiAgICogQGxpc3RlbnMgVGVjaCNzb3VyY2VzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFNvdXJjZXNldF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoU291cmNlc2V0XyhldmVudCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgLy8gb25seSB1cGRhdGUgdGhlIHNvdXJjZSBjYWNoZSB3aGVuIHRoZSBzb3VyY2VcbiAgICAvLyB3YXMgbm90IHVwZGF0ZWQgdXNpbmcgdGhlIHBsYXllciBhcGlcbiAgICBpZiAoIXRoaXMuY2hhbmdpbmdTcmNfKSB7XG4gICAgICB2YXIgdXBkYXRlU291cmNlQ2FjaGVzID0gZnVuY3Rpb24gdXBkYXRlU291cmNlQ2FjaGVzKHNyYykge1xuICAgICAgICByZXR1cm4gX3RoaXM2LnVwZGF0ZVNvdXJjZUNhY2hlc18oc3JjKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBwbGF5ZXJTcmMgPSB0aGlzLmN1cnJlbnRTb3VyY2UoKS5zcmM7XG4gICAgICB2YXIgZXZlbnRTcmMgPSBldmVudC5zcmM7IC8vIGlmIHdlIGhhdmUgYSBwbGF5ZXJTcmMgdGhhdCBpcyBub3QgYSBibG9iLCBhbmQgYSB0ZWNoIHNyYyB0aGF0IGlzIGEgYmxvYlxuXG4gICAgICBpZiAocGxheWVyU3JjICYmICEvXmJsb2I6Ly50ZXN0KHBsYXllclNyYykgJiYgL15ibG9iOi8udGVzdChldmVudFNyYykpIHtcbiAgICAgICAgLy8gaWYgYm90aCB0aGUgdGVjaCBzb3VyY2UgYW5kIHRoZSBwbGF5ZXIgc291cmNlIHdlcmUgdXBkYXRlZCB3ZSBhc3N1bWVcbiAgICAgICAgLy8gc29tZXRoaW5nIGxpa2UgQHZpZGVvanMvaHR0cC1zdHJlYW1pbmcgZGlkIHRoZSBzb3VyY2VzZXQgYW5kIHNraXAgdXBkYXRpbmcgdGhlIHNvdXJjZSBjYWNoZS5cbiAgICAgICAgaWYgKCF0aGlzLmxhc3RTb3VyY2VfIHx8IHRoaXMubGFzdFNvdXJjZV8udGVjaCAhPT0gZXZlbnRTcmMgJiYgdGhpcy5sYXN0U291cmNlXy5wbGF5ZXIgIT09IHBsYXllclNyYykge1xuICAgICAgICAgIHVwZGF0ZVNvdXJjZUNhY2hlcyA9IGZ1bmN0aW9uIHVwZGF0ZVNvdXJjZUNhY2hlcygpIHt9O1xuICAgICAgICB9XG4gICAgICB9IC8vIHVwZGF0ZSB0aGUgc291cmNlIHRvIHRoZSBpbnRpYWwgc291cmNlIHJpZ2h0IGF3YXlcbiAgICAgIC8vIGluIHNvbWUgY2FzZXMgdGhpcyB3aWxsIGJlIGVtcHR5IHN0cmluZ1xuXG5cbiAgICAgIHVwZGF0ZVNvdXJjZUNhY2hlcyhldmVudFNyYyk7IC8vIGlmIHRoZSBgc291cmNlc2V0YCBgc3JjYCB3YXMgYW4gZW1wdHkgc3RyaW5nXG4gICAgICAvLyB3YWl0IGZvciBhIGBsb2Fkc3RhcnRgIHRvIHVwZGF0ZSB0aGUgY2FjaGUgdG8gYGN1cnJlbnRTcmNgLlxuICAgICAgLy8gSWYgYSBzb3VyY2VzZXQgaGFwcGVucyBiZWZvcmUgYSBgbG9hZHN0YXJ0YCwgd2UgcmVzZXQgdGhlIHN0YXRlXG5cbiAgICAgIGlmICghZXZlbnQuc3JjKSB7XG4gICAgICAgIHRoaXMudGVjaF8uYW55KFsnc291cmNlc2V0JywgJ2xvYWRzdGFydCddLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIC8vIGlmIGEgc291cmNlc2V0IGhhcHBlbnMgYmVmb3JlIGEgYGxvYWRzdGFydGAgdGhlcmVcbiAgICAgICAgICAvLyBpcyBub3RoaW5nIHRvIGRvIGFzIHRoaXMgYGhhbmRsZVRlY2hTb3VyY2VzZXRfYFxuICAgICAgICAgIC8vIHdpbGwgYmUgY2FsbGVkIGFnYWluIGFuZCB0aGlzIHdpbGwgYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICBpZiAoZS50eXBlID09PSAnc291cmNlc2V0Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0ZWNoU3JjID0gX3RoaXM2LnRlY2hHZXQoJ2N1cnJlbnRTcmMnKTtcblxuICAgICAgICAgIF90aGlzNi5sYXN0U291cmNlXy50ZWNoID0gdGVjaFNyYztcblxuICAgICAgICAgIF90aGlzNi51cGRhdGVTb3VyY2VDYWNoZXNfKHRlY2hTcmMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxhc3RTb3VyY2VfID0ge1xuICAgICAgcGxheWVyOiB0aGlzLmN1cnJlbnRTb3VyY2UoKS5zcmMsXG4gICAgICB0ZWNoOiBldmVudC5zcmNcbiAgICB9O1xuICAgIHRoaXMudHJpZ2dlcih7XG4gICAgICBzcmM6IGV2ZW50LnNyYyxcbiAgICAgIHR5cGU6ICdzb3VyY2VzZXQnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZC9yZW1vdmUgdGhlIHZqcy1oYXMtc3RhcnRlZCBjbGFzc1xuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2ZpcnN0cGxheVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVlc3RcbiAgICogICAgICAgIC0gdHJ1ZTogYWRkcyB0aGUgY2xhc3NcbiAgICogICAgICAgIC0gZmFsc2U6IHJlbW92ZSB0aGUgY2xhc3NcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICB0aGUgYm9vbGVhbiB2YWx1ZSBvZiBoYXNTdGFydGVkX1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNTdGFydGVkID0gZnVuY3Rpb24gaGFzU3RhcnRlZChyZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gYWN0IGFzIGdldHRlciwgaWYgd2UgaGF2ZSBubyByZXF1ZXN0IHRvIGNoYW5nZVxuICAgICAgcmV0dXJuIHRoaXMuaGFzU3RhcnRlZF87XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3QgPT09IHRoaXMuaGFzU3RhcnRlZF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhhc1N0YXJ0ZWRfID0gcmVxdWVzdDtcblxuICAgIGlmICh0aGlzLmhhc1N0YXJ0ZWRfKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGFzLXN0YXJ0ZWQnKTtcbiAgICAgIHRoaXMudHJpZ2dlcignZmlyc3RwbGF5Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oYXMtc3RhcnRlZCcpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1lZGlhIGJlZ2lucyBvciByZXN1bWVzIHBsYXliYWNrXG4gICAqXG4gICAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tbWVkaWEtcGxheX1cbiAgICogQGZpcmVzIFBsYXllciNwbGF5XG4gICAqIEBsaXN0ZW5zIFRlY2gjcGxheVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoUGxheV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoUGxheV8oKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWVuZGVkJyk7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBhdXNlZCcpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wbGF5aW5nJyk7IC8vIGhpZGUgdGhlIHBvc3RlciB3aGVuIHRoZSB1c2VyIGhpdHMgcGxheVxuXG4gICAgdGhpcy5oYXNTdGFydGVkKHRydWUpO1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuZXZlciBhbiB7QGxpbmsgVGVjaCNwbGF5fSBldmVudCBoYXBwZW5zLiBJbmRpY2F0ZXMgdGhhdFxuICAgICAqIHBsYXliYWNrIGhhcyBzdGFydGVkIG9yIHJlc3VtZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3BsYXlcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3BsYXknKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgcmF0ZWNoYW5nZWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIElmIHRoZXJlIHdlcmUgYW55IGV2ZW50cyBxdWV1ZWQgd2hpbGUgdGhlIHBsYXliYWNrIHJhdGUgd2FzIHplcm8sIGZpcmVcbiAgICogdGhvc2UgZXZlbnRzIG5vdy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaFJhdGVDaGFuZ2VfXG4gICAqIEBmaXJlcyBQbGF5ZXIjcmF0ZWNoYW5nZVxuICAgKiBAbGlzdGVucyBUZWNoI3JhdGVjaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFJhdGVDaGFuZ2VfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFJhdGVDaGFuZ2VfKCkge1xuICAgIGlmICh0aGlzLnRlY2hfLnBsYXliYWNrUmF0ZSgpID4gMCAmJiB0aGlzLmNhY2hlXy5sYXN0UGxheWJhY2tSYXRlID09PSAwKSB7XG4gICAgICB0aGlzLnF1ZXVlZENhbGxiYWNrc18uZm9yRWFjaChmdW5jdGlvbiAocXVldWVkKSB7XG4gICAgICAgIHJldHVybiBxdWV1ZWQuY2FsbGJhY2socXVldWVkLmV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWV1ZWRDYWxsYmFja3NfID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5jYWNoZV8ubGFzdFBsYXliYWNrUmF0ZSA9IHRoaXMudGVjaF8ucGxheWJhY2tSYXRlKCk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgcGxheWluZyBzcGVlZCBvZiB0aGUgYXVkaW8vdmlkZW8gaXMgY2hhbmdlZFxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciNyYXRlY2hhbmdlXG4gICAgICogQHR5cGUge2V2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdyYXRlY2hhbmdlJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYHdhaXRpbmdgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI3dhaXRpbmdcbiAgICogQGxpc3RlbnMgVGVjaCN3YWl0aW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hXYWl0aW5nXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hXYWl0aW5nXygpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy13YWl0aW5nJyk7XG4gICAgLyoqXG4gICAgICogQSByZWFkeVN0YXRlIGNoYW5nZSBvbiB0aGUgRE9NIGVsZW1lbnQgaGFzIGNhdXNlZCBwbGF5YmFjayB0byBzdG9wLlxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciN3YWl0aW5nXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCd3YWl0aW5nJyk7IC8vIEJyb3dzZXJzIG1heSBlbWl0IGEgdGltZXVwZGF0ZSBldmVudCBhZnRlciBhIHdhaXRpbmcgZXZlbnQuIEluIG9yZGVyIHRvIHByZXZlbnRcbiAgICAvLyBwcmVtYXR1cmUgcmVtb3ZhbCBvZiB0aGUgd2FpdGluZyBjbGFzcywgd2FpdCBmb3IgdGhlIHRpbWUgdG8gY2hhbmdlLlxuXG4gICAgdmFyIHRpbWVXaGVuV2FpdGluZyA9IHRoaXMuY3VycmVudFRpbWUoKTtcblxuICAgIHZhciB0aW1lVXBkYXRlTGlzdGVuZXIgPSBmdW5jdGlvbiB0aW1lVXBkYXRlTGlzdGVuZXIoKSB7XG4gICAgICBpZiAodGltZVdoZW5XYWl0aW5nICE9PSBfdGhpczcuY3VycmVudFRpbWUoKSkge1xuICAgICAgICBfdGhpczcucmVtb3ZlQ2xhc3MoJ3Zqcy13YWl0aW5nJyk7XG5cbiAgICAgICAgX3RoaXM3Lm9mZigndGltZXVwZGF0ZScsIHRpbWVVcGRhdGVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub24oJ3RpbWV1cGRhdGUnLCB0aW1lVXBkYXRlTGlzdGVuZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBjYW5wbGF5YCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICogPiBOb3RlOiBUaGlzIGlzIG5vdCBjb25zaXN0ZW50IGJldHdlZW4gYnJvd3NlcnMuIFNlZSAjMTM1MVxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2NhbnBsYXlcbiAgICogQGxpc3RlbnMgVGVjaCNjYW5wbGF5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hDYW5QbGF5XyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hDYW5QbGF5XygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIC8qKlxuICAgICAqIFRoZSBtZWRpYSBoYXMgYSByZWFkeVN0YXRlIG9mIEhBVkVfRlVUVVJFX0RBVEEgb3IgZ3JlYXRlci5cbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjY2FucGxheVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignY2FucGxheScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBjYW5wbGF5dGhyb3VnaGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjY2FucGxheXRocm91Z2hcbiAgICogQGxpc3RlbnMgVGVjaCNjYW5wbGF5dGhyb3VnaFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoQ2FuUGxheVRocm91Z2hfID0gZnVuY3Rpb24gaGFuZGxlVGVjaENhblBsYXlUaHJvdWdoXygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIC8qKlxuICAgICAqIFRoZSBtZWRpYSBoYXMgYSByZWFkeVN0YXRlIG9mIEhBVkVfRU5PVUdIX0RBVEEgb3IgZ3JlYXRlci4gVGhpcyBtZWFucyB0aGF0IHRoZVxuICAgICAqIGVudGlyZSBtZWRpYSBmaWxlIGNhbiBiZSBwbGF5ZWQgd2l0aG91dCBidWZmZXJpbmcuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI2NhbnBsYXl0aHJvdWdoXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdjYW5wbGF5dGhyb3VnaCcpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBwbGF5aW5nYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNwbGF5aW5nXG4gICAqIEBsaXN0ZW5zIFRlY2gjcGxheWluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoUGxheWluZ18gPSBmdW5jdGlvbiBoYW5kbGVUZWNoUGxheWluZ18oKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXdhaXRpbmcnKTtcbiAgICAvKipcbiAgICAgKiBUaGUgbWVkaWEgaXMgbm8gbG9uZ2VyIGJsb2NrZWQgZnJvbSBwbGF5YmFjaywgYW5kIGhhcyBzdGFydGVkIHBsYXlpbmcuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3BsYXlpbmdcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3BsYXlpbmcnKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgc2Vla2luZ2AgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjc2Vla2luZ1xuICAgKiBAbGlzdGVucyBUZWNoI3NlZWtpbmdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFNlZWtpbmdfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFNlZWtpbmdfKCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zZWVraW5nJyk7XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIHBsYXllciBpcyBqdW1waW5nIHRvIGEgbmV3IHRpbWVcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjc2Vla2luZ1xuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignc2Vla2luZycpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBzZWVrZWRgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI3NlZWtlZFxuICAgKiBAbGlzdGVucyBUZWNoI3NlZWtlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoU2Vla2VkXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hTZWVrZWRfKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zZWVraW5nJyk7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWVuZGVkJyk7XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgcGxheWVyIGhhcyBmaW5pc2hlZCBqdW1waW5nIHRvIGEgbmV3IHRpbWVcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjc2Vla2VkXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdzZWVrZWQnKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgZmlyc3RwbGF5YCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNmaXJzdHBsYXlcbiAgICogQGxpc3RlbnMgVGVjaCNmaXJzdHBsYXlcbiAgICogQGRlcHJlY2F0ZWQgQXMgb2YgNi4wIGZpcnN0cGxheSBldmVudCBpcyBkZXByZWNhdGVkLlxuICAgKiAgICAgICAgICAgICBBcyBvZiA2LjAgcGFzc2luZyB0aGUgYHN0YXJ0dGltZWAgb3B0aW9uIHRvIHRoZSBwbGF5ZXIgYW5kIHRoZSBmaXJzdHBsYXkgZXZlbnQgYXJlIGRlcHJlY2F0ZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hGaXJzdFBsYXlfID0gZnVuY3Rpb24gaGFuZGxlVGVjaEZpcnN0UGxheV8oKSB7XG4gICAgLy8gSWYgdGhlIGZpcnN0IHN0YXJ0dGltZSBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkXG4gICAgLy8gdGhlbiB3ZSB3aWxsIHN0YXJ0IGF0IHRoZSBnaXZlbiBvZmZzZXQgaW4gc2Vjb25kc1xuICAgIGlmICh0aGlzLm9wdGlvbnNfLnN0YXJ0dGltZSkge1xuICAgICAgbG9nLndhcm4oJ1Bhc3NpbmcgdGhlIGBzdGFydHRpbWVgIG9wdGlvbiB0byB0aGUgcGxheWVyIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiA2LjAnKTtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUodGhpcy5vcHRpb25zXy5zdGFydHRpbWUpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oYXMtc3RhcnRlZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHRoZSBmaXJzdCB0aW1lIGEgdmlkZW8gaXMgcGxheWVkLiBOb3QgcGFydCBvZiB0aGUgSExTIHNwZWMsIGFuZCB0aGlzIGlzXG4gICAgICogcHJvYmFibHkgbm90IHRoZSBiZXN0IGltcGxlbWVudGF0aW9uIHlldCwgc28gdXNlIHNwYXJpbmdseS4gSWYgeW91IGRvbid0IGhhdmUgYVxuICAgICAqIHJlYXNvbiB0byBwcmV2ZW50IHBsYXliYWNrLCB1c2UgYG15UGxheWVyLm9uZSgncGxheScpO2AgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjZmlyc3RwbGF5XG4gICAgICogQGRlcHJlY2F0ZWQgQXMgb2YgNi4wIGZpcnN0cGxheSBldmVudCBpcyBkZXByZWNhdGVkLlxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignZmlyc3RwbGF5Jyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYHBhdXNlYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNwYXVzZVxuICAgKiBAbGlzdGVucyBUZWNoI3BhdXNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hQYXVzZV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoUGF1c2VfKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1wbGF5aW5nJyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXBhdXNlZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBtZWRpYSBoYXMgYmVlbiBwYXVzZWRcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjcGF1c2VcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3BhdXNlJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYGVuZGVkYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNlbmRlZFxuICAgKiBAbGlzdGVucyBUZWNoI2VuZGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hFbmRlZF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoRW5kZWRfKCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1lbmRlZCcpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uc18ubG9vcCkge1xuICAgICAgdGhpcy5jdXJyZW50VGltZSgwKTtcbiAgICAgIHRoaXMucGxheSgpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgZW5kIG9mIHRoZSBtZWRpYSByZXNvdXJjZSBpcyByZWFjaGVkIChjdXJyZW50VGltZSA9PSBkdXJhdGlvbilcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjZW5kZWRcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cblxuICAgIHRoaXMudHJpZ2dlcignZW5kZWQnKTtcbiAgfVxuICAvKipcbiAgICogRmlyZWQgd2hlbiB0aGUgZHVyYXRpb24gb2YgdGhlIG1lZGlhIHJlc291cmNlIGlzIGZpcnN0IGtub3duIG9yIGNoYW5nZWRcbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCNkdXJhdGlvbmNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRHVyYXRpb25DaGFuZ2VfID0gZnVuY3Rpb24gaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXygpIHtcbiAgICB0aGlzLmR1cmF0aW9uKHRoaXMudGVjaEdldF8oJ2R1cmF0aW9uJykpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSBjbGljayBvbiB0aGUgbWVkaWEgZWxlbWVudCB0byBwbGF5L3BhdXNlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICB0aGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byB0cmlnZ2VyXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjbW91c2V1cFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoQ2xpY2tfID0gZnVuY3Rpb24gaGFuZGxlVGVjaENsaWNrXyhldmVudCkge1xuICAgIGlmICghaXNTaW5nbGVMZWZ0Q2xpY2soZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXaGVuIGNvbnRyb2xzIGFyZSBkaXNhYmxlZCBhIGNsaWNrIHNob3VsZCBub3QgdG9nZ2xlIHBsYXliYWNrIGJlY2F1c2VcbiAgICAvLyB0aGUgY2xpY2sgaXMgY29uc2lkZXJlZCBhIGNvbnRyb2xcblxuXG4gICAgaWYgKCF0aGlzLmNvbnRyb2xzXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhdXNlZCgpKSB7XG4gICAgICBzaWxlbmNlUHJvbWlzZSh0aGlzLnBsYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGRvdWJsZS1jbGljayBvbiB0aGUgbWVkaWEgZWxlbWVudCB0byBlbnRlci9leGl0IGZ1bGxzY3JlZW5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIHRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHRyaWdnZXJcbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCNkYmxjbGlja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRG91YmxlQ2xpY2tfID0gZnVuY3Rpb24gaGFuZGxlVGVjaERvdWJsZUNsaWNrXyhldmVudCkge1xuICAgIGlmICghdGhpcy5jb250cm9sc18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHdlIGRvIG5vdCB3YW50IHRvIHRvZ2dsZSBmdWxsc2NyZWVuIHN0YXRlXG4gICAgLy8gd2hlbiBkb3VibGUtY2xpY2tpbmcgaW5zaWRlIGEgY29udHJvbCBiYXIgb3IgYSBtb2RhbFxuXG5cbiAgICB2YXIgaW5BbGxvd2VkRWxzID0gQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbCh0aGlzLiQkKCcudmpzLWNvbnRyb2wtYmFyLCAudmpzLW1vZGFsLWRpYWxvZycpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBlbC5jb250YWlucyhldmVudC50YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFpbkFsbG93ZWRFbHMpIHtcbiAgICAgIC8qXG4gICAgICAgKiBvcHRpb25zLnVzZXJBY3Rpb25zLmRvdWJsZUNsaWNrXG4gICAgICAgKlxuICAgICAgICogSWYgYHVuZGVmaW5lZGAgb3IgYHRydWVgLCBkb3VibGUtY2xpY2sgdG9nZ2xlcyBmdWxsc2NyZWVuIGlmIGNvbnRyb2xzIGFyZSBwcmVzZW50XG4gICAgICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGRvdWJsZS1jbGljayBoYW5kbGluZ1xuICAgICAgICogU2V0IHRvIGEgZnVuY3Rpb24gdG8gc3Vic3RpdHV0ZSBhbiBleHRlcm5hbCBkb3VibGUtY2xpY2sgaGFuZGxlclxuICAgICAgICovXG4gICAgICBpZiAodGhpcy5vcHRpb25zXyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub3B0aW9uc18udXNlckFjdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmRvdWJsZUNsaWNrID09PSB1bmRlZmluZWQgfHwgdGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5kb3VibGVDbGljayAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc18gIT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHRoaXMub3B0aW9uc18udXNlckFjdGlvbnMuZG91YmxlQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmRvdWJsZUNsaWNrLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKCkpIHtcbiAgICAgICAgICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSB0YXAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIEl0IHdpbGwgdG9nZ2xlIHRoZSB1c2VyXG4gICAqIGFjdGl2aXR5IHN0YXRlLCB3aGljaCBoaWRlcyBhbmQgc2hvd3MgdGhlIGNvbnRyb2xzLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI3RhcFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoVGFwXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hUYXBfKCkge1xuICAgIHRoaXMudXNlckFjdGl2ZSghdGhpcy51c2VyQWN0aXZlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdG91Y2ggdG8gc3RhcnRcbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCN0b3VjaHN0YXJ0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hUb3VjaFN0YXJ0XyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hUb3VjaFN0YXJ0XygpIHtcbiAgICB0aGlzLnVzZXJXYXNBY3RpdmUgPSB0aGlzLnVzZXJBY3RpdmUoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHRvdWNoIHRvIG1vdmVcbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCN0b3VjaG1vdmVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFRvdWNoTW92ZV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoVG91Y2hNb3ZlXygpIHtcbiAgICBpZiAodGhpcy51c2VyV2FzQWN0aXZlKSB7XG4gICAgICB0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHRvdWNoIHRvIGVuZFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgdGhlIHRvdWNoZW5kIGV2ZW50IHRoYXQgdHJpZ2dlcmVkXG4gICAqICAgICAgICB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjdG91Y2hlbmRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFRvdWNoRW5kXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hUb3VjaEVuZF8oZXZlbnQpIHtcbiAgICAvLyBTdG9wIHRoZSBtb3VzZSBldmVudHMgZnJvbSBhbHNvIGhhcHBlbmluZ1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgLyoqXG4gICAqIG5hdGl2ZSBjbGljayBldmVudHMgb24gdGhlIFNXRiBhcmVuJ3QgdHJpZ2dlcmVkIG9uIElFMTEsIFdpbjguMVJUXG4gICAqIHVzZSBzdGFnZWNsaWNrIGV2ZW50cyB0cmlnZ2VyZWQgZnJvbSBpbnNpZGUgdGhlIFNXRiBpbnN0ZWFkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBsaXN0ZW5zIHN0YWdlY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlU3RhZ2VDbGlja18gPSBmdW5jdGlvbiBoYW5kbGVTdGFnZUNsaWNrXygpIHtcbiAgICB0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b2dnbGVGdWxsc2NyZWVuQ2xhc3NfID0gZnVuY3Rpb24gdG9nZ2xlRnVsbHNjcmVlbkNsYXNzXygpIHtcbiAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4oKSkge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWZ1bGxzY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWZ1bGxzY3JlZW4nKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIHdoZW4gdGhlIGRvY3VtZW50IGZzY2hhbmdlIGV2ZW50IHRyaWdnZXJzIGl0IGNhbGxzIHRoaXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyA9IGZ1bmN0aW9uIGRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8oZSkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwoKTtcbiAgICB2YXIgaXNGcyA9IGRvY3VtZW50W3RoaXMuZnNBcGlfLmZ1bGxzY3JlZW5FbGVtZW50XSA9PT0gZWw7XG5cbiAgICBpZiAoIWlzRnMgJiYgZWwubWF0Y2hlcykge1xuICAgICAgaXNGcyA9IGVsLm1hdGNoZXMoJzonICsgdGhpcy5mc0FwaV8uZnVsbHNjcmVlbik7XG4gICAgfSBlbHNlIGlmICghaXNGcyAmJiBlbC5tc01hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgaXNGcyA9IGVsLm1zTWF0Y2hlc1NlbGVjdG9yKCc6JyArIHRoaXMuZnNBcGlfLmZ1bGxzY3JlZW4pO1xuICAgIH1cblxuICAgIHRoaXMuaXNGdWxsc2NyZWVuKGlzRnMpOyAvLyBJZiBjYW5jZWxsaW5nIGZ1bGxzY3JlZW4sIHJlbW92ZSBldmVudCBsaXN0ZW5lci5cblxuICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpID09PSBmYWxzZSkge1xuICAgICAgb2ZmKGRvY3VtZW50LCB0aGlzLmZzQXBpXy5mdWxsc2NyZWVuY2hhbmdlLCB0aGlzLmJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZnNBcGlfLnByZWZpeGVkKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjZnVsbHNjcmVlbmNoYW5nZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG4gICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBUZWNoIEZ1bGxzY3JlZW4gQ2hhbmdlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICB0aGUgZnVsbHNjcmVlbmNoYW5nZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqICAgICAgICB0aGUgZGF0YSB0aGF0IHdhcyBzZW50IHdpdGggdGhlIGV2ZW50XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBsaXN0ZW5zIFRlY2gjZnVsbHNjcmVlbmNoYW5nZVxuICAgKiBAZmlyZXMgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfID0gZnVuY3Rpb24gaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfKGV2ZW50LCBkYXRhKSB7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuaXNGdWxsc2NyZWVuKGRhdGEuaXNGdWxsc2NyZWVuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBnb2luZyBpbiBhbmQgb3V0IG9mIGZ1bGxzY3JlZW4uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2VcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cblxuICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b2dnbGVQaWN0dXJlSW5QaWN0dXJlQ2xhc3NfID0gZnVuY3Rpb24gdG9nZ2xlUGljdHVyZUluUGljdHVyZUNsYXNzXygpIHtcbiAgICBpZiAodGhpcy5pc0luUGljdHVyZUluUGljdHVyZSgpKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtcGljdHVyZS1pbi1waWN0dXJlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1waWN0dXJlLWluLXBpY3R1cmUnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBUZWNoIEVudGVyIFBpY3R1cmUtaW4tUGljdHVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIHRoZSBlbnRlcnBpY3R1cmVpbnBpY3R1cmUgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbGlzdGVucyBUZWNoI2VudGVycGljdHVyZWlucGljdHVyZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRW50ZXJQaWN0dXJlSW5QaWN0dXJlXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hFbnRlclBpY3R1cmVJblBpY3R1cmVfKGV2ZW50KSB7XG4gICAgdGhpcy5pc0luUGljdHVyZUluUGljdHVyZSh0cnVlKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIFRlY2ggTGVhdmUgUGljdHVyZS1pbi1QaWN0dXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgdGhlIGxlYXZlcGljdHVyZWlucGljdHVyZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBsaXN0ZW5zIFRlY2gjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hMZWF2ZVBpY3R1cmVJblBpY3R1cmVfID0gZnVuY3Rpb24gaGFuZGxlVGVjaExlYXZlUGljdHVyZUluUGljdHVyZV8oZXZlbnQpIHtcbiAgICB0aGlzLmlzSW5QaWN0dXJlSW5QaWN0dXJlKGZhbHNlKTtcbiAgfVxuICAvKipcbiAgICogRmlyZXMgd2hlbiBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIGxvYWRpbmcgb2YgYW4gYXVkaW8vdmlkZW8uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBsaXN0ZW5zIFRlY2gjZXJyb3JcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaEVycm9yXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hFcnJvcl8oKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy50ZWNoXy5lcnJvcigpO1xuICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGB0ZXh0ZGF0YWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjdGV4dGRhdGFcbiAgICogQGxpc3RlbnMgVGVjaCN0ZXh0ZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoVGV4dERhdGFfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFRleHREYXRhXygpIHtcbiAgICB2YXIgZGF0YSA9IG51bGw7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHNbMV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gd2UgZ2V0IGEgdGV4dGRhdGEgZXZlbnQgZnJvbSB0ZWNoXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3RleHRkYXRhXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3RleHRkYXRhJywgZGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvYmplY3QgZm9yIGNhY2hlZCB2YWx1ZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBnZXQgdGhlIGN1cnJlbnQgb2JqZWN0IGNhY2hlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldENhY2hlID0gZnVuY3Rpb24gZ2V0Q2FjaGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVfO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGludGVybmFsIGNhY2hlIG9iamVjdC5cbiAgICpcbiAgICogVXNpbmcgdGhpcyBmdW5jdGlvbiBvdXRzaWRlIHRoZSBwbGF5ZXIgY29uc3RydWN0b3Igb3IgcmVzZXQgbWV0aG9kIG1heVxuICAgKiBoYXZlIHVuaW50ZW5kZWQgc2lkZS1lZmZlY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldENhY2hlXyA9IGZ1bmN0aW9uIHJlc2V0Q2FjaGVfKCkge1xuICAgIHRoaXMuY2FjaGVfID0ge1xuICAgICAgLy8gUmlnaHQgbm93LCB0aGUgY3VycmVudFRpbWUgaXMgbm90IF9yZWFsbHlfIGNhY2hlZCBiZWNhdXNlIGl0IGlzIGFsd2F5c1xuICAgICAgLy8gcmV0cmlldmVkIGZyb20gdGhlIHRlY2ggKHNlZTogY3VycmVudFRpbWUpLiBIb3dldmVyLCBmb3IgY29tcGxldGVuZXNzLFxuICAgICAgLy8gd2Ugc2V0IGl0IHRvIHplcm8gaGVyZSB0byBlbnN1cmUgdGhhdCBpZiB3ZSBkbyBzdGFydCBhY3R1YWxseSBjYWNoaW5nXG4gICAgICAvLyBpdCwgd2UgcmVzZXQgaXQgYWxvbmcgd2l0aCBldmVyeXRoaW5nIGVsc2UuXG4gICAgICBjdXJyZW50VGltZTogMCxcbiAgICAgIGluYWN0aXZpdHlUaW1lb3V0OiB0aGlzLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0LFxuICAgICAgZHVyYXRpb246IE5hTixcbiAgICAgIGxhc3RWb2x1bWU6IDEsXG4gICAgICBsYXN0UGxheWJhY2tSYXRlOiB0aGlzLmRlZmF1bHRQbGF5YmFja1JhdGUoKSxcbiAgICAgIG1lZGlhOiBudWxsLFxuICAgICAgc3JjOiAnJyxcbiAgICAgIHNvdXJjZToge30sXG4gICAgICBzb3VyY2VzOiBbXSxcbiAgICAgIHZvbHVtZTogMVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFBhc3MgdmFsdWVzIHRvIHRoZSBwbGF5YmFjayB0ZWNoXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWV0aG9kXVxuICAgKiAgICAgICAgdGhlIG1ldGhvZCB0byBjYWxsXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhcmdcbiAgICogICAgICAgIHRoZSBhcmd1bWVudCB0byBwYXNzXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRlY2hDYWxsXyA9IGZ1bmN0aW9uIHRlY2hDYWxsXyhtZXRob2QsIGFyZykge1xuICAgIC8vIElmIGl0J3Mgbm90IHJlYWR5IHlldCwgY2FsbCBtZXRob2Qgd2hlbiBpdCBpc1xuICAgIHRoaXMucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG1ldGhvZCBpbiBhbGxvd2VkU2V0dGVycykge1xuICAgICAgICByZXR1cm4gc2V0KHRoaXMubWlkZGxld2FyZV8sIHRoaXMudGVjaF8sIG1ldGhvZCwgYXJnKTtcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kIGluIGFsbG93ZWRNZWRpYXRvcnMpIHtcbiAgICAgICAgcmV0dXJuIG1lZGlhdGUodGhpcy5taWRkbGV3YXJlXywgdGhpcy50ZWNoXywgbWV0aG9kLCBhcmcpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgICAgIHRoaXMudGVjaF9bbWV0aG9kXShhcmcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZyhlKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGNhbGxzIGNhbid0IHdhaXQgZm9yIHRoZSB0ZWNoLCBhbmQgc29tZXRpbWVzIGRvbid0IG5lZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICogICAgICAgIFRlY2ggbWV0aG9kXG4gICAqXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAgICogICAgICAgICB0aGUgbWV0aG9kIG9yIHVuZGVmaW5lZFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50ZWNoR2V0XyA9IGZ1bmN0aW9uIHRlY2hHZXRfKG1ldGhvZCkge1xuICAgIGlmICghdGhpcy50ZWNoXyB8fCAhdGhpcy50ZWNoXy5pc1JlYWR5Xykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtZXRob2QgaW4gYWxsb3dlZEdldHRlcnMpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcy5taWRkbGV3YXJlXywgdGhpcy50ZWNoXywgbWV0aG9kKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCBpbiBhbGxvd2VkTWVkaWF0b3JzKSB7XG4gICAgICByZXR1cm4gbWVkaWF0ZSh0aGlzLm1pZGRsZXdhcmVfLCB0aGlzLnRlY2hfLCBtZXRob2QpO1xuICAgIH0gLy8gRmxhc2ggbGlrZXMgdG8gZGllIGFuZCByZWxvYWQgd2hlbiB5b3UgaGlkZSBvciByZXBvc2l0aW9uIGl0LlxuICAgIC8vIEluIHRoZXNlIGNhc2VzIHRoZSBvYmplY3QgbWV0aG9kcyBnbyBhd2F5IGFuZCB3ZSBnZXQgZXJyb3JzLlxuICAgIC8vIFdoZW4gdGhhdCBoYXBwZW5zIHdlJ2xsIGNhdGNoIHRoZSBlcnJvcnMgYW5kIGluZm9ybSB0ZWNoIHRoYXQgaXQncyBub3QgcmVhZHkgYW55IG1vcmUuXG5cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoX1ttZXRob2RdKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gV2hlbiBidWlsZGluZyBhZGRpdGlvbmFsIHRlY2ggbGlicywgYW4gZXhwZWN0ZWQgbWV0aG9kIG1heSBub3QgYmUgZGVmaW5lZCB5ZXRcbiAgICAgIGlmICh0aGlzLnRlY2hfW21ldGhvZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb2coXCJWaWRlby5qczogXCIgKyBtZXRob2QgKyBcIiBtZXRob2Qgbm90IGRlZmluZWQgZm9yIFwiICsgdGhpcy50ZWNoTmFtZV8gKyBcIiBwbGF5YmFjayB0ZWNobm9sb2d5LlwiLCBlKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0gLy8gV2hlbiBhIG1ldGhvZCBpc24ndCBhdmFpbGFibGUgb24gdGhlIG9iamVjdCBpdCB0aHJvd3MgYSBUeXBlRXJyb3JcblxuXG4gICAgICBpZiAoZS5uYW1lID09PSAnVHlwZUVycm9yJykge1xuICAgICAgICBsb2coXCJWaWRlby5qczogXCIgKyBtZXRob2QgKyBcIiB1bmF2YWlsYWJsZSBvbiBcIiArIHRoaXMudGVjaE5hbWVfICsgXCIgcGxheWJhY2sgdGVjaG5vbG9neSBlbGVtZW50LlwiLCBlKTtcbiAgICAgICAgdGhpcy50ZWNoXy5pc1JlYWR5XyA9IGZhbHNlO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSAvLyBJZiBlcnJvciB1bmtub3duLCBqdXN0IGxvZyBhbmQgdGhyb3dcblxuXG4gICAgICBsb2coZSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBiZWdpbiBwbGF5YmFjayBhdCB0aGUgZmlyc3Qgb3Bwb3J0dW5pdHkuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V8dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIFJldHVybnMgYSBwcm9taXNlIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIFByb21pc2VzIChvciBvbmVcbiAgICogICAgICAgICB3YXMgcGFzc2VkIGluIGFzIGFuIG9wdGlvbikuIFRoaXMgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIG9uXG4gICAqICAgICAgICAgdGhlIHJldHVybiB2YWx1ZSBvZiBwbGF5LiBJZiB0aGlzIGlzIHVuZGVmaW5lZCBpdCB3aWxsIGZ1bGZpbGwgdGhlXG4gICAqICAgICAgICAgcHJvbWlzZSBjaGFpbiBvdGhlcndpc2UgdGhlIHByb21pc2UgY2hhaW4gd2lsbCBiZSBmdWxmaWxsZWQgd2hlblxuICAgKiAgICAgICAgIHRoZSBwcm9taXNlIGZyb20gcGxheSBpcyBmdWxmaWxsZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KCkge1xuICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgdmFyIFByb21pc2VDbGFzcyA9IHRoaXMub3B0aW9uc18uUHJvbWlzZSB8fCB3aW5kb3ckMS5Qcm9taXNlO1xuXG4gICAgaWYgKFByb21pc2VDbGFzcykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ2xhc3MoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgX3RoaXM4LnBsYXlfKHJlc29sdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGxheV8oKTtcbiAgfVxuICAvKipcbiAgICogVGhlIGFjdHVhbCBsb2dpYyBmb3IgcGxheSwgdGFrZXMgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgb24gdGhlXG4gICAqIHJldHVybiB2YWx1ZSBvZiBwbGF5LiBUaGlzIGFsbG93cyB1cyB0byByZXNvbHZlIHRvIHRoZSBwbGF5IHByb21pc2UgaWYgdGhlcmVcbiAgICogaXMgb25lIG9uIG1vZGVybiBicm93c2Vycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXVxuICAgKiAgICAgICAgVGhlIGNhbGxiYWNrIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSB0ZWNocyBwbGF5IGlzIGFjdHVhbGx5IGNhbGxlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wbGF5XyA9IGZ1bmN0aW9uIHBsYXlfKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICBpZiAoY2FsbGJhY2sgPT09IHZvaWQgMCkge1xuICAgICAgY2FsbGJhY2sgPSBzaWxlbmNlUHJvbWlzZTtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXlDYWxsYmFja3NfLnB1c2goY2FsbGJhY2spO1xuICAgIHZhciBpc1NyY1JlYWR5ID0gQm9vbGVhbighdGhpcy5jaGFuZ2luZ1NyY18gJiYgKHRoaXMuc3JjKCkgfHwgdGhpcy5jdXJyZW50U3JjKCkpKTsgLy8gdHJlYXQgY2FsbHMgdG8gcGxheV8gc29tZXdoYXQgbGlrZSB0aGUgYG9uZWAgZXZlbnQgZnVuY3Rpb25cblxuICAgIGlmICh0aGlzLndhaXRUb1BsYXlfKSB7XG4gICAgICB0aGlzLm9mZihbJ3JlYWR5JywgJ2xvYWRzdGFydCddLCB0aGlzLndhaXRUb1BsYXlfKTtcbiAgICAgIHRoaXMud2FpdFRvUGxheV8gPSBudWxsO1xuICAgIH0gLy8gaWYgdGhlIHBsYXllci90ZWNoIGlzIG5vdCByZWFkeSBvciB0aGUgc3JjIGl0c2VsZiBpcyBub3QgcmVhZHlcbiAgICAvLyBxdWV1ZSB1cCBhIGNhbGwgdG8gcGxheSBvbiBgcmVhZHlgIG9yIGBsb2Fkc3RhcnRgXG5cblxuICAgIGlmICghdGhpcy5pc1JlYWR5XyB8fCAhaXNTcmNSZWFkeSkge1xuICAgICAgdGhpcy53YWl0VG9QbGF5XyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIF90aGlzOS5wbGF5XygpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vbmUoWydyZWFkeScsICdsb2Fkc3RhcnQnXSwgdGhpcy53YWl0VG9QbGF5Xyk7IC8vIGlmIHdlIGFyZSBpbiBTYWZhcmksIHRoZXJlIGlzIGEgaGlnaCBjaGFuY2UgdGhhdCBsb2Fkc3RhcnQgd2lsbCB0cmlnZ2VyIGFmdGVyIHRoZSBnZXN0dXJlIHRpbWVwZXJpb2RcbiAgICAgIC8vIGluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byBwcmltZSB0aGUgdmlkZW8gZWxlbWVudCBieSBjYWxsaW5nIGxvYWQgc28gaXQnbGwgYmUgcmVhZHkgaW4gdGltZVxuXG4gICAgICBpZiAoIWlzU3JjUmVhZHkgJiYgKElTX0FOWV9TQUZBUkkgfHwgSVNfSU9TKSkge1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgdGhlIHBsYXllci90ZWNoIGlzIHJlYWR5IGFuZCB3ZSBoYXZlIGEgc291cmNlLCB3ZSBjYW4gYXR0ZW1wdCBwbGF5YmFjay5cblxuXG4gICAgdmFyIHZhbCA9IHRoaXMudGVjaEdldF8oJ3BsYXknKTsgLy8gcGxheSB3YXMgdGVybWluYXRlZCBpZiB0aGUgcmV0dXJuZWQgdmFsdWUgaXMgbnVsbFxuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5ydW5QbGF5VGVybWluYXRlZFF1ZXVlXygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJ1blBsYXlDYWxsYmFja3NfKHZhbCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBydW4gd2hlbiBpZiBwbGF5IGlzIHRlcm1pbmF0ZWQuIElmIHBsYXlcbiAgICogcnVuUGxheUNhbGxiYWNrc18gaXMgcnVuIHRoZXNlIGZ1bmN0aW9uIHdpbGwgbm90IGJlIHJ1bi4gVGhpcyBhbGxvd3MgdXNcbiAgICogdG8gZGlmZmVyZW5jaWF0ZSBiZXR3ZWVuIGEgdGVybWluYXRlZCBwbGF5IGFuZCBhbiBhY3R1YWwgY2FsbCB0byBwbGF5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5ydW5QbGF5VGVybWluYXRlZFF1ZXVlXyA9IGZ1bmN0aW9uIHJ1blBsYXlUZXJtaW5hdGVkUXVldWVfKCkge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucGxheVRlcm1pbmF0ZWRRdWV1ZV8uc2xpY2UoMCk7XG4gICAgdGhpcy5wbGF5VGVybWluYXRlZFF1ZXVlXyA9IFtdO1xuICAgIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHEpIHtcbiAgICAgIHEoKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogV2hlbiBhIGNhbGxiYWNrIHRvIHBsYXkgaXMgZGVsYXllZCB3ZSBoYXZlIHRvIHJ1biB0aGVzZVxuICAgKiBjYWxsYmFja3Mgd2hlbiBwbGF5IGlzIGFjdHVhbGx5IGNhbGxlZCBvbiB0aGUgdGVjaC4gVGhpcyBmdW5jdGlvblxuICAgKiBydW5zIHRoZSBjYWxsYmFja3MgdGhhdCB3ZXJlIGRlbGF5ZWQgYW5kIGFjY2VwdHMgdGhlIHJldHVybiB2YWx1ZVxuICAgKiBmcm9tIHRoZSB0ZWNoLlxuICAgKlxuICAgKiBAcGFyYW0ge3VuZGVmaW5lZHxQcm9taXNlfSB2YWxcbiAgICogICAgICAgIFRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgdGVjaC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucnVuUGxheUNhbGxiYWNrc18gPSBmdW5jdGlvbiBydW5QbGF5Q2FsbGJhY2tzXyh2YWwpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5wbGF5Q2FsbGJhY2tzXy5zbGljZSgwKTtcbiAgICB0aGlzLnBsYXlDYWxsYmFja3NfID0gW107IC8vIGNsZWFyIHBsYXkgdGVybWluYXRlZFF1ZXVlIHNpbmNlIHdlIGZpbmlzaGVkIGEgcmVhbCBwbGF5XG5cbiAgICB0aGlzLnBsYXlUZXJtaW5hdGVkUXVldWVfID0gW107XG4gICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICBjYih2YWwpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQYXVzZSB0aGUgdmlkZW8gcGxheWJhY2tcbiAgICpcbiAgICogQHJldHVybiB7UGxheWVyfVxuICAgKiAgICAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBwbGF5ZXIgb2JqZWN0IHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZCBvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHRoaXMudGVjaENhbGxfKCdwYXVzZScpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcGxheWVyIGlzIHBhdXNlZCBvciBoYXMgeWV0IHRvIHBsYXlcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICAtIGZhbHNlOiBpZiB0aGUgbWVkaWEgaXMgY3VycmVudGx5IHBsYXlpbmdcbiAgICogICAgICAgICAtIHRydWU6IGlmIG1lZGlhIGlzIG5vdCBjdXJyZW50bHkgcGxheWluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQoKSB7XG4gICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgb2YgcGF1c2VkIHNob3VsZCBiZSB0cnVlIChpbiBTYWZhcmkgaXQncyBhY3R1YWxseSBmYWxzZSlcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygncGF1c2VkJykgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBUaW1lUmFuZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCByYW5nZXMgb2YgdGltZSB0aGF0IHRoZSB1c2VyXG4gICAqIGhhcyBwbGF5ZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAgICogICAgICAgICBBIHRpbWUgcmFuZ2Ugb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhbGwgdGhlIGluY3JlbWVudHMgb2YgdGltZSB0aGF0IGhhdmVcbiAgICogICAgICAgICBiZWVuIHBsYXllZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheWVkID0gZnVuY3Rpb24gcGxheWVkKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdwbGF5ZWQnKSB8fCBjcmVhdGVUaW1lUmFuZ2VzKDAsIDApO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB1c2VyIGlzIFwic2NydWJiaW5nXCIuIFNjcnViYmluZyBpc1xuICAgKiB3aGVuIHRoZSB1c2VyIGhhcyBjbGlja2VkIHRoZSBwcm9ncmVzcyBiYXIgaGFuZGxlIGFuZCBpc1xuICAgKiBkcmFnZ2luZyBpdCBhbG9uZyB0aGUgcHJvZ3Jlc3MgYmFyLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NjcnViYmluZ11cbiAgICogICAgICAgIHdoZXRoZXIgdGhlIHVzZXIgaXMgb3IgaXMgbm90IHNjcnViYmluZ1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBzY3J1YmJpbmcgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNjcnViYmluZyA9IGZ1bmN0aW9uIHNjcnViYmluZyhpc1NjcnViYmluZykge1xuICAgIGlmICh0eXBlb2YgaXNTY3J1YmJpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3J1YmJpbmdfO1xuICAgIH1cblxuICAgIHRoaXMuc2NydWJiaW5nXyA9ICEhaXNTY3J1YmJpbmc7XG5cbiAgICBpZiAoaXNTY3J1YmJpbmcpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zY3J1YmJpbmcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXNjcnViYmluZycpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgY3VycmVudCB0aW1lIChpbiBzZWNvbmRzKVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtzZWNvbmRzXVxuICAgKiAgICAgICAgVGhlIHRpbWUgdG8gc2VlayB0byBpbiBzZWNvbmRzXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICAtIHRoZSBjdXJyZW50IHRpbWUgaW4gc2Vjb25kcyB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudFRpbWUgPSBmdW5jdGlvbiBjdXJyZW50VGltZShzZWNvbmRzKSB7XG4gICAgaWYgKHR5cGVvZiBzZWNvbmRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHNlY29uZHMgPCAwKSB7XG4gICAgICAgIHNlY29uZHMgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRlY2hDYWxsXygnc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGNhY2hlIGxhc3QgY3VycmVudFRpbWUgYW5kIHJldHVybi4gZGVmYXVsdCB0byAwIHNlY29uZHNcbiAgICAvL1xuICAgIC8vIENhY2hpbmcgdGhlIGN1cnJlbnRUaW1lIGlzIG1lYW50IHRvIHByZXZlbnQgYSBtYXNzaXZlIGFtb3VudCBvZiByZWFkcyBvbiB0aGUgdGVjaCdzXG4gICAgLy8gY3VycmVudFRpbWUgd2hlbiBzY3J1YmJpbmcsIGJ1dCBtYXkgbm90IHByb3ZpZGUgbXVjaCBwZXJmb3JtYW5jZSBiZW5lZml0IGFmdGVyYWxsLlxuICAgIC8vIFNob3VsZCBiZSB0ZXN0ZWQuIEFsc28gc29tZXRoaW5nIGhhcyB0byByZWFkIHRoZSBhY3R1YWwgY3VycmVudCB0aW1lIG9yIHRoZSBjYWNoZSB3aWxsXG4gICAgLy8gbmV2ZXIgZ2V0IHVwZGF0ZWQuXG5cblxuICAgIHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lID0gdGhpcy50ZWNoR2V0XygnY3VycmVudFRpbWUnKSB8fCAwO1xuICAgIHJldHVybiB0aGlzLmNhY2hlXy5jdXJyZW50VGltZTtcbiAgfVxuICAvKipcbiAgICogTm9ybWFsbHkgZ2V0cyB0aGUgbGVuZ3RoIGluIHRpbWUgb2YgdGhlIHZpZGVvIGluIHNlY29uZHM7XG4gICAqIGluIGFsbCBidXQgdGhlIHJhcmVzdCB1c2UgY2FzZXMgYW4gYXJndW1lbnQgd2lsbCBOT1QgYmUgcGFzc2VkIHRvIHRoZSBtZXRob2RcbiAgICpcbiAgICogPiAqKk5PVEUqKjogVGhlIHZpZGVvIG11c3QgaGF2ZSBzdGFydGVkIGxvYWRpbmcgYmVmb3JlIHRoZSBkdXJhdGlvbiBjYW4gYmVcbiAgICoga25vd24sIGFuZCBpbiB0aGUgY2FzZSBvZiBGbGFzaCwgbWF5IG5vdCBiZSBrbm93biB1bnRpbCB0aGUgdmlkZW8gc3RhcnRzXG4gICAqIHBsYXlpbmcuXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZHVyYXRpb25jaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmRzXVxuICAgKiAgICAgICAgVGhlIGR1cmF0aW9uIG9mIHRoZSB2aWRlbyB0byBzZXQgaW4gc2Vjb25kc1xuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgLSBUaGUgZHVyYXRpb24gb2YgdGhlIHZpZGVvIGluIHNlY29uZHMgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24oc2Vjb25kcykge1xuICAgIGlmIChzZWNvbmRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBOYU4gaWYgdGhlIGR1cmF0aW9uIGlzIG5vdCBrbm93blxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVfLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyB0aGlzLmNhY2hlXy5kdXJhdGlvbiA6IE5hTjtcbiAgICB9XG5cbiAgICBzZWNvbmRzID0gcGFyc2VGbG9hdChzZWNvbmRzKTsgLy8gU3RhbmRhcmRpemUgb24gSW5maW5pdHkgZm9yIHNpZ25hbGluZyB2aWRlbyBpcyBsaXZlXG5cbiAgICBpZiAoc2Vjb25kcyA8IDApIHtcbiAgICAgIHNlY29uZHMgPSBJbmZpbml0eTtcbiAgICB9XG5cbiAgICBpZiAoc2Vjb25kcyAhPT0gdGhpcy5jYWNoZV8uZHVyYXRpb24pIHtcbiAgICAgIC8vIENhY2hlIHRoZSBsYXN0IHNldCB2YWx1ZSBmb3Igb3B0aW1pemVkIHNjcnViYmluZyAoZXNwLiBGbGFzaClcbiAgICAgIHRoaXMuY2FjaGVfLmR1cmF0aW9uID0gc2Vjb25kcztcblxuICAgICAgaWYgKHNlY29uZHMgPT09IEluZmluaXR5KSB7XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1saXZlJyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc18ubGl2ZXVpICYmIHRoaXMucGxheWVyXy5saXZlVHJhY2tlcikge1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1saXZldWknKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWxpdmUnKTtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWxpdmV1aScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKHNlY29uZHMpKSB7XG4gICAgICAgIC8vIERvIG5vdCBmaXJlIGR1cmF0aW9uY2hhbmdlIHVubGVzcyB0aGUgZHVyYXRpb24gdmFsdWUgaXMga25vd24uXG4gICAgICAgIC8vIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3ZpZGVvLmh0bWwjbWVkaWEtZWxlbWVudC1sb2FkLWFsZ29yaXRobX1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGV2ZW50IFBsYXllciNkdXJhdGlvbmNoYW5nZVxuICAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGhvdyBtdWNoIHRpbWUgaXMgbGVmdCBpbiB0aGUgdmlkZW8uIE5vdCBwYXJ0XG4gICAqIG9mIHRoZSBuYXRpdmUgdmlkZW8gQVBJLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIHRpbWUgcmVtYWluaW5nIGluIHNlY29uZHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtYWluaW5nVGltZSA9IGZ1bmN0aW9uIHJlbWFpbmluZ1RpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHVyYXRpb24oKSAtIHRoaXMuY3VycmVudFRpbWUoKTtcbiAgfVxuICAvKipcbiAgICogQSByZW1haW5pbmcgdGltZSBmdW5jdGlvbiB0aGF0IGlzIGludGVudGVkIHRvIGJlIHVzZWQgd2hlblxuICAgKiB0aGUgdGltZSBpcyB0byBiZSBkaXNwbGF5ZWQgZGlyZWN0bHkgdG8gdGhlIHVzZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcm91bmRlZCB0aW1lIHJlbWFpbmluZyBpbiBzZWNvbmRzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbWFpbmluZ1RpbWVEaXNwbGF5ID0gZnVuY3Rpb24gcmVtYWluaW5nVGltZURpc3BsYXkoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5kdXJhdGlvbigpKSAtIE1hdGguZmxvb3IodGhpcy5jdXJyZW50VGltZSgpKTtcbiAgfSAvL1xuICAvLyBLaW5kIG9mIGxpa2UgYW4gYXJyYXkgb2YgcG9ydGlvbnMgb2YgdGhlIHZpZGVvIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQuXG5cbiAgLyoqXG4gICAqIEdldCBhIFRpbWVSYW5nZSBvYmplY3Qgd2l0aCBhbiBhcnJheSBvZiB0aGUgdGltZXMgb2YgdGhlIHZpZGVvXG4gICAqIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQuIElmIHlvdSBqdXN0IHdhbnQgdGhlIHBlcmNlbnQgb2YgdGhlXG4gICAqIHZpZGVvIHRoYXQncyBiZWVuIGRvd25sb2FkZWQsIHVzZSBidWZmZXJlZFBlcmNlbnQuXG4gICAqXG4gICAqIEBzZWUgW0J1ZmZlcmVkIFNwZWNde0BsaW5rIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMvdmlkZW8uaHRtbCNkb20tbWVkaWEtYnVmZmVyZWR9XG4gICAqXG4gICAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAgICogICAgICAgICBBIG1vY2sgVGltZVJhbmdlIG9iamVjdCAoZm9sbG93aW5nIEhUTUwgc3BlYylcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWQgPSBmdW5jdGlvbiBidWZmZXJlZCgpIHtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hHZXRfKCdidWZmZXJlZCcpO1xuXG4gICAgaWYgKCFidWZmZXJlZCB8fCAhYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICBidWZmZXJlZCA9IGNyZWF0ZVRpbWVSYW5nZXMoMCwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcmVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHBlcmNlbnQgKGFzIGEgZGVjaW1hbCkgb2YgdGhlIHZpZGVvIHRoYXQncyBiZWVuIGRvd25sb2FkZWQuXG4gICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgdGhlIG5hdGl2ZSBIVE1MIHZpZGVvIEFQSS5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIEEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIHRoZSBwZXJjZW50XG4gICAqICAgICAgICAgdGhhdCBpcyBidWZmZXJlZCAwIGJlaW5nIDAlIGFuZCAxIGJlaW5nIDEwMCVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWRQZXJjZW50ID0gZnVuY3Rpb24gYnVmZmVyZWRQZXJjZW50JDEoKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcmVkUGVyY2VudCh0aGlzLmJ1ZmZlcmVkKCksIHRoaXMuZHVyYXRpb24oKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZW5kaW5nIHRpbWUgb2YgdGhlIGxhc3QgYnVmZmVyZWQgdGltZSByYW5nZVxuICAgKiBUaGlzIGlzIHVzZWQgaW4gdGhlIHByb2dyZXNzIGJhciB0byBlbmNhcHN1bGF0ZSBhbGwgdGltZSByYW5nZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZW5kIG9mIHRoZSBsYXN0IGJ1ZmZlcmVkIHRpbWUgcmFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWRFbmQgPSBmdW5jdGlvbiBidWZmZXJlZEVuZCgpIHtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLmJ1ZmZlcmVkKCk7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xuICAgIHZhciBlbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSk7XG5cbiAgICBpZiAoZW5kID4gZHVyYXRpb24pIHtcbiAgICAgIGVuZCA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBlbmQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGN1cnJlbnQgdm9sdW1lIG9mIHRoZSBtZWRpYVxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFtwZXJjZW50QXNEZWNpbWFsXVxuICAgKiAgICAgICAgIFRoZSBuZXcgdm9sdW1lIGFzIGEgZGVjaW1hbCBwZXJjZW50OlxuICAgKiAgICAgICAgIC0gMCBpcyBtdXRlZC8wJS9vZmZcbiAgICogICAgICAgICAtIDEuMCBpcyAxMDAlL2Z1bGxcbiAgICogICAgICAgICAtIDAuNSBpcyBoYWxmIHZvbHVtZSBvciA1MCVcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZvbHVtZSBhcyBhIHBlcmNlbnQgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZvbHVtZSA9IGZ1bmN0aW9uIHZvbHVtZShwZXJjZW50QXNEZWNpbWFsKSB7XG4gICAgdmFyIHZvbDtcblxuICAgIGlmIChwZXJjZW50QXNEZWNpbWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEZvcmNlIHZhbHVlIHRvIGJldHdlZW4gMCBhbmQgMVxuICAgICAgdm9sID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcGFyc2VGbG9hdChwZXJjZW50QXNEZWNpbWFsKSkpO1xuICAgICAgdGhpcy5jYWNoZV8udm9sdW1lID0gdm9sO1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFZvbHVtZScsIHZvbCk7XG5cbiAgICAgIGlmICh2b2wgPiAwKSB7XG4gICAgICAgIHRoaXMubGFzdFZvbHVtZV8odm9sKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRGVmYXVsdCB0byAxIHdoZW4gcmV0dXJuaW5nIGN1cnJlbnQgdm9sdW1lLlxuXG5cbiAgICB2b2wgPSBwYXJzZUZsb2F0KHRoaXMudGVjaEdldF8oJ3ZvbHVtZScpKTtcbiAgICByZXR1cm4gaXNOYU4odm9sKSA/IDEgOiB2b2w7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBtdXRlZCBzdGF0ZSwgb3IgdHVybiBtdXRlIG9uIG9yIG9mZlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttdXRlZF1cbiAgICogICAgICAgIC0gdHJ1ZSB0byBtdXRlXG4gICAqICAgICAgICAtIGZhbHNlIHRvIHVubXV0ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gdHJ1ZSBpZiBtdXRlIGlzIG9uIGFuZCBnZXR0aW5nXG4gICAqICAgICAgICAgLSBmYWxzZSBpZiBtdXRlIGlzIG9mZiBhbmQgZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5tdXRlZCA9IGZ1bmN0aW9uIG11dGVkKF9tdXRlZCkge1xuICAgIGlmIChfbXV0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldE11dGVkJywgX211dGVkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygnbXV0ZWQnKSB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGRlZmF1bHRNdXRlZCBzdGF0ZSwgb3IgdHVybiBkZWZhdWx0TXV0ZWQgb24gb3Igb2ZmLiBkZWZhdWx0TXV0ZWRcbiAgICogaW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiBtdXRlZCBvbiBpbml0aWFsIHBsYXliYWNrLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHZhciBteVBsYXllciA9IHZpZGVvanMoJ3NvbWUtcGxheWVyLWlkJyk7XG4gICAqXG4gICAqICAgbXlQbGF5ZXIuc3JjKFwiaHR0cDovL3d3dy5leGFtcGxlLmNvbS9wYXRoL3RvL3ZpZGVvLm1wNFwiKTtcbiAgICpcbiAgICogICAvLyBnZXQsIHNob3VsZCBiZSBmYWxzZVxuICAgKiAgIGNvbnNvbGUubG9nKG15UGxheWVyLmRlZmF1bHRNdXRlZCgpKTtcbiAgICogICAvLyBzZXQgdG8gdHJ1ZVxuICAgKiAgIG15UGxheWVyLmRlZmF1bHRNdXRlZCh0cnVlKTtcbiAgICogICAvLyBnZXQgc2hvdWxkIGJlIHRydWVcbiAgICogICBjb25zb2xlLmxvZyhteVBsYXllci5kZWZhdWx0TXV0ZWQoKSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWZhdWx0TXV0ZWRdXG4gICAqICAgICAgICAtIHRydWUgdG8gbXV0ZVxuICAgKiAgICAgICAgLSBmYWxzZSB0byB1bm11dGVcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbnxQbGF5ZXJ9XG4gICAqICAgICAgICAgLSB0cnVlIGlmIGRlZmF1bHRNdXRlZCBpcyBvbiBhbmQgZ2V0dGluZ1xuICAgKiAgICAgICAgIC0gZmFsc2UgaWYgZGVmYXVsdE11dGVkIGlzIG9mZiBhbmQgZ2V0dGluZ1xuICAgKiAgICAgICAgIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgcGxheWVyIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWZhdWx0TXV0ZWQgPSBmdW5jdGlvbiBkZWZhdWx0TXV0ZWQoX2RlZmF1bHRNdXRlZCkge1xuICAgIGlmIChfZGVmYXVsdE11dGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hDYWxsXygnc2V0RGVmYXVsdE11dGVkJywgX2RlZmF1bHRNdXRlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ2RlZmF1bHRNdXRlZCcpIHx8IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxhc3Qgdm9sdW1lLCBvciBzZXQgaXRcbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbcGVyY2VudEFzRGVjaW1hbF1cbiAgICogICAgICAgICBUaGUgbmV3IGxhc3Qgdm9sdW1lIGFzIGEgZGVjaW1hbCBwZXJjZW50OlxuICAgKiAgICAgICAgIC0gMCBpcyBtdXRlZC8wJS9vZmZcbiAgICogICAgICAgICAtIDEuMCBpcyAxMDAlL2Z1bGxcbiAgICogICAgICAgICAtIDAuNSBpcyBoYWxmIHZvbHVtZSBvciA1MCVcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIHRoZSBjdXJyZW50IHZhbHVlIG9mIGxhc3RWb2x1bWUgYXMgYSBwZXJjZW50IHdoZW4gZ2V0dGluZ1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sYXN0Vm9sdW1lXyA9IGZ1bmN0aW9uIGxhc3RWb2x1bWVfKHBlcmNlbnRBc0RlY2ltYWwpIHtcbiAgICBpZiAocGVyY2VudEFzRGVjaW1hbCAhPT0gdW5kZWZpbmVkICYmIHBlcmNlbnRBc0RlY2ltYWwgIT09IDApIHtcbiAgICAgIHRoaXMuY2FjaGVfLmxhc3RWb2x1bWUgPSBwZXJjZW50QXNEZWNpbWFsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlXy5sYXN0Vm9sdW1lO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50IHRlY2ggY2FuIHN1cHBvcnQgbmF0aXZlIGZ1bGxzY3JlZW5cbiAgICogKGUuZy4gd2l0aCBidWlsdCBpbiBjb250cm9scyBsaWtlIGlPUywgc28gbm90IG91ciBmbGFzaCBzd2YpXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgaWYgbmF0aXZlIGZ1bGxzY3JlZW4gaXMgc3VwcG9ydGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN1cHBvcnRzRnVsbFNjcmVlbiA9IGZ1bmN0aW9uIHN1cHBvcnRzRnVsbFNjcmVlbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0Xygnc3VwcG9ydHNGdWxsU2NyZWVuJykgfHwgZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBwbGF5ZXIgaXMgaW4gZnVsbHNjcmVlbiBtb2RlIG9yIHRlbGwgdGhlIHBsYXllciB0aGF0IGl0XG4gICAqIGlzIG9yIGlzIG5vdCBpbiBmdWxsc2NyZWVuIG1vZGUuXG4gICAqXG4gICAqID4gTk9URTogQXMgb2YgdGhlIGxhdGVzdCBIVE1MNSBzcGVjLCBpc0Z1bGxzY3JlZW4gaXMgbm8gbG9uZ2VyIGFuIG9mZmljaWFsXG4gICAqIHByb3BlcnR5IGFuZCBpbnN0ZWFkIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IGlzIHVzZWQuIEJ1dCBpc0Z1bGxzY3JlZW4gaXNcbiAgICogc3RpbGwgYSB2YWx1YWJsZSBwcm9wZXJ0eSBmb3IgaW50ZXJuYWwgcGxheWVyIHdvcmtpbmdzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtib29sZWFufSBbaXNGU11cbiAgICogICAgICAgICBTZXQgdGhlIHBsYXllcnMgY3VycmVudCBmdWxsc2NyZWVuIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgLSB0cnVlIGlmIGZ1bGxzY3JlZW4gaXMgb24gYW5kIGdldHRpbmdcbiAgICogICAgICAgICAtIGZhbHNlIGlmIGZ1bGxzY3JlZW4gaXMgb2ZmIGFuZCBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzRnVsbHNjcmVlbiA9IGZ1bmN0aW9uIGlzRnVsbHNjcmVlbihpc0ZTKSB7XG4gICAgaWYgKGlzRlMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0Z1bGxzY3JlZW5fID0gISFpc0ZTO1xuICAgICAgdGhpcy50b2dnbGVGdWxsc2NyZWVuQ2xhc3NfKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5pc0Z1bGxzY3JlZW5fO1xuICB9XG4gIC8qKlxuICAgKiBJbmNyZWFzZSB0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gdG8gZnVsbCBzY3JlZW5cbiAgICogSW4gc29tZSBicm93c2VycywgZnVsbCBzY3JlZW4gaXMgbm90IHN1cHBvcnRlZCBuYXRpdmVseSwgc28gaXQgZW50ZXJzXG4gICAqIFwiZnVsbCB3aW5kb3cgbW9kZVwiLCB3aGVyZSB0aGUgdmlkZW8gZmlsbHMgdGhlIGJyb3dzZXIgd2luZG93LlxuICAgKiBJbiBicm93c2VycyBhbmQgZGV2aWNlcyB0aGF0IHN1cHBvcnQgbmF0aXZlIGZ1bGwgc2NyZWVuLCBzb21ldGltZXMgdGhlXG4gICAqIGJyb3dzZXIncyBkZWZhdWx0IGNvbnRyb2xzIHdpbGwgYmUgc2hvd24sIGFuZCBub3QgdGhlIFZpZGVvLmpzIGN1c3RvbSBza2luLlxuICAgKiBUaGlzIGluY2x1ZGVzIG1vc3QgbW9iaWxlIGRldmljZXMgKGlPUywgQW5kcm9pZCkgYW5kIG9sZGVyIHZlcnNpb25zIG9mXG4gICAqIFNhZmFyaS5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbZnVsbHNjcmVlbk9wdGlvbnNdXG4gICAqICAgICAgICAgT3ZlcnJpZGUgdGhlIHBsYXllciBmdWxsc2NyZWVuIG9wdGlvbnNcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNmdWxsc2NyZWVuY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcXVlc3RGdWxsc2NyZWVuID0gZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4oZnVsbHNjcmVlbk9wdGlvbnMpIHtcbiAgICB2YXIgZnNPcHRpb25zO1xuICAgIHRoaXMuaXNGdWxsc2NyZWVuKHRydWUpO1xuXG4gICAgaWYgKHRoaXMuZnNBcGlfLnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAvLyB0aGUgYnJvd3NlciBzdXBwb3J0cyBnb2luZyBmdWxsc2NyZWVuIGF0IHRoZSBlbGVtZW50IGxldmVsIHNvIHdlIGNhblxuICAgICAgLy8gdGFrZSB0aGUgY29udHJvbHMgZnVsbHNjcmVlbiBhcyB3ZWxsIGFzIHRoZSB2aWRlb1xuICAgICAgLy8gVHJpZ2dlciBmdWxsc2NyZWVuY2hhbmdlIGV2ZW50IGFmdGVyIGNoYW5nZVxuICAgICAgLy8gV2UgaGF2ZSB0byBzcGVjaWZpY2FsbHkgYWRkIHRoaXMgZWFjaCB0aW1lLCBhbmQgcmVtb3ZlXG4gICAgICAvLyB3aGVuIGNhbmNlbGluZyBmdWxsc2NyZWVuLiBPdGhlcndpc2UgaWYgdGhlcmUncyBtdWx0aXBsZVxuICAgICAgLy8gcGxheWVycyBvbiBhIHBhZ2UsIHRoZXkgd291bGQgYWxsIGJlIHJlYWN0aW5nIHRvIHRoZSBzYW1lIGZ1bGxzY3JlZW5cbiAgICAgIC8vIGV2ZW50c1xuICAgICAgb24oZG9jdW1lbnQsIHRoaXMuZnNBcGlfLmZ1bGxzY3JlZW5jaGFuZ2UsIHRoaXMuYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKTsgLy8gb25seSBwYXNzIEZ1bGxzY3JlZW5PcHRpb25zIHRvIHJlcXVlc3RGdWxsc2NyZWVuIGlmIGl0IGlzbid0IHByZWZpeGVkXG5cbiAgICAgIGlmICghdGhpcy5mc0FwaV8ucHJlZml4ZWQpIHtcbiAgICAgICAgZnNPcHRpb25zID0gdGhpcy5vcHRpb25zXy5mdWxsc2NyZWVuICYmIHRoaXMub3B0aW9uc18uZnVsbHNjcmVlbi5vcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmIChmdWxsc2NyZWVuT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZnNPcHRpb25zID0gZnVsbHNjcmVlbk9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2lsZW5jZVByb21pc2UodGhpcy5lbF9bdGhpcy5mc0FwaV8ucmVxdWVzdEZ1bGxzY3JlZW5dKGZzT3B0aW9ucykpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50ZWNoXy5zdXBwb3J0c0Z1bGxTY3JlZW4oKSkge1xuICAgICAgLy8gd2UgY2FuJ3QgdGFrZSB0aGUgdmlkZW8uanMgY29udHJvbHMgZnVsbHNjcmVlbiBidXQgd2UgY2FuIGdvIGZ1bGxzY3JlZW5cbiAgICAgIC8vIHdpdGggbmF0aXZlIGNvbnRyb2xzXG4gICAgICB0aGlzLnRlY2hDYWxsXygnZW50ZXJGdWxsU2NyZWVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZ1bGxzY3JlZW4gaXNuJ3Qgc3VwcG9ydGVkIHNvIHdlJ2xsIGp1c3Qgc3RyZXRjaCB0aGUgdmlkZW8gZWxlbWVudCB0b1xuICAgICAgLy8gZmlsbCB0aGUgdmlld3BvcnRcbiAgICAgIHRoaXMuZW50ZXJGdWxsV2luZG93KCk7XG4gICAgICAvKipcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjZnVsbHNjcmVlbmNoYW5nZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSB2aWRlbyB0byBpdHMgbm9ybWFsIHNpemUgYWZ0ZXIgaGF2aW5nIGJlZW4gaW4gZnVsbCBzY3JlZW4gbW9kZVxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhpdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiBleGl0RnVsbHNjcmVlbigpIHtcbiAgICB0aGlzLmlzRnVsbHNjcmVlbihmYWxzZSk7IC8vIENoZWNrIGZvciBicm93c2VyIGVsZW1lbnQgZnVsbHNjcmVlbiBzdXBwb3J0XG5cbiAgICBpZiAodGhpcy5mc0FwaV8ucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgIHNpbGVuY2VQcm9taXNlKGRvY3VtZW50W3RoaXMuZnNBcGlfLmV4aXRGdWxsc2NyZWVuXSgpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudGVjaF8uc3VwcG9ydHNGdWxsU2NyZWVuKCkpIHtcbiAgICAgIHRoaXMudGVjaENhbGxfKCdleGl0RnVsbFNjcmVlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV4aXRGdWxsV2luZG93KCk7XG4gICAgICAvKipcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjZnVsbHNjcmVlbmNoYW5nZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogV2hlbiBmdWxsc2NyZWVuIGlzbid0IHN1cHBvcnRlZCB3ZSBjYW4gc3RyZXRjaCB0aGVcbiAgICogdmlkZW8gY29udGFpbmVyIHRvIGFzIHdpZGUgYXMgdGhlIGJyb3dzZXIgd2lsbCBsZXQgdXMuXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZW50ZXJGdWxsV2luZG93XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVudGVyRnVsbFdpbmRvdyA9IGZ1bmN0aW9uIGVudGVyRnVsbFdpbmRvdygpIHtcbiAgICB0aGlzLmlzRnVsbFdpbmRvdyA9IHRydWU7IC8vIFN0b3Jpbmcgb3JpZ2luYWwgZG9jIG92ZXJmbG93IHZhbHVlIHRvIHJldHVybiB0byB3aGVuIGZ1bGxzY3JlZW4gaXMgb2ZmXG5cbiAgICB0aGlzLmRvY09yaWdPdmVyZmxvdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdzsgLy8gQWRkIGxpc3RlbmVyIGZvciBlc2Mga2V5IHRvIGV4aXQgZnVsbHNjcmVlblxuXG4gICAgb24oZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8pOyAvLyBIaWRlIGFueSBzY3JvbGwgYmFyc1xuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7IC8vIEFwcGx5IGZ1bGxzY3JlZW4gc3R5bGVzXG5cbiAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCAndmpzLWZ1bGwtd2luZG93Jyk7XG4gICAgLyoqXG4gICAgICogQGV2ZW50IFBsYXllciNlbnRlckZ1bGxXaW5kb3dcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2VudGVyRnVsbFdpbmRvdycpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBmb3IgY2FsbCB0byBlaXRoZXIgZXhpdCBmdWxsIHdpbmRvdyBvclxuICAgKiBmdWxsIHNjcmVlbiBvbiBFU0Mga2V5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiAgICAgICAgRXZlbnQgdG8gY2hlY2sgZm9yIGtleSBwcmVzc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mdWxsV2luZG93T25Fc2NLZXkgPSBmdW5jdGlvbiBmdWxsV2luZG93T25Fc2NLZXkoZXZlbnQpIHtcbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRXNjJykpIHtcbiAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXhpdEZ1bGxXaW5kb3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4aXQgZnVsbCB3aW5kb3dcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNleGl0RnVsbFdpbmRvd1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGl0RnVsbFdpbmRvdyA9IGZ1bmN0aW9uIGV4aXRGdWxsV2luZG93KCkge1xuICAgIHRoaXMuaXNGdWxsV2luZG93ID0gZmFsc2U7XG4gICAgb2ZmKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfKTsgLy8gVW5oaWRlIHNjcm9sbCBiYXJzLlxuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5kb2NPcmlnT3ZlcmZsb3c7IC8vIFJlbW92ZSBmdWxsc2NyZWVuIHN0eWxlc1xuXG4gICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ3Zqcy1mdWxsLXdpbmRvdycpOyAvLyBSZXNpemUgdGhlIGJveCwgY29udHJvbGxlciwgYW5kIHBvc3RlciB0byBvcmlnaW5hbCBzaXplc1xuICAgIC8vIHRoaXMucG9zaXRpb25BbGwoKTtcblxuICAgIC8qKlxuICAgICAqIEBldmVudCBQbGF5ZXIjZXhpdEZ1bGxXaW5kb3dcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2V4aXRGdWxsV2luZG93Jyk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBwbGF5ZXIgaXMgaW4gUGljdHVyZS1pbi1QaWN0dXJlIG1vZGUgb3IgdGVsbCB0aGUgcGxheWVyIHRoYXQgaXRcbiAgICogaXMgb3IgaXMgbm90IGluIFBpY3R1cmUtaW4tUGljdHVyZSBtb2RlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtib29sZWFufSBbaXNQaVBdXG4gICAqICAgICAgICAgU2V0IHRoZSBwbGF5ZXJzIGN1cnJlbnQgUGljdHVyZS1pbi1QaWN0dXJlIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgLSB0cnVlIGlmIFBpY3R1cmUtaW4tUGljdHVyZSBpcyBvbiBhbmQgZ2V0dGluZ1xuICAgKiAgICAgICAgIC0gZmFsc2UgaWYgUGljdHVyZS1pbi1QaWN0dXJlIGlzIG9mZiBhbmQgZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc0luUGljdHVyZUluUGljdHVyZSA9IGZ1bmN0aW9uIGlzSW5QaWN0dXJlSW5QaWN0dXJlKGlzUGlQKSB7XG4gICAgaWYgKGlzUGlQICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNJblBpY3R1cmVJblBpY3R1cmVfID0gISFpc1BpUDtcbiAgICAgIHRoaXMudG9nZ2xlUGljdHVyZUluUGljdHVyZUNsYXNzXygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiAhIXRoaXMuaXNJblBpY3R1cmVJblBpY3R1cmVfO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmbG9hdGluZyB2aWRlbyB3aW5kb3cgYWx3YXlzIG9uIHRvcCBvZiBvdGhlciB3aW5kb3dzIHNvIHRoYXQgdXNlcnMgbWF5XG4gICAqIGNvbnRpbnVlIGNvbnN1bWluZyBtZWRpYSB3aGlsZSB0aGV5IGludGVyYWN0IHdpdGggb3RoZXIgY29udGVudCBzaXRlcywgb3JcbiAgICogYXBwbGljYXRpb25zIG9uIHRoZWlyIGRldmljZS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9waWN0dXJlLWluLXBpY3R1cmV9XG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZW50ZXJwaWN0dXJlaW5waWN0dXJlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqICAgICAgICAgQSBwcm9taXNlIHdpdGggYSBQaWN0dXJlLWluLVBpY3R1cmUgd2luZG93LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSA9IGZ1bmN0aW9uIHJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlKCkge1xuICAgIGlmICgncGljdHVyZUluUGljdHVyZUVuYWJsZWQnIGluIGRvY3VtZW50KSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgcGxheWVyIGVudGVycyBwaWN0dXJlIGluIHBpY3R1cmUgbW9kZVxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjZW50ZXJwaWN0dXJlaW5waWN0dXJlXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdyZXF1ZXN0UGljdHVyZUluUGljdHVyZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhpdCBQaWN0dXJlLWluLVBpY3R1cmUgbW9kZS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9waWN0dXJlLWluLXBpY3R1cmV9XG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqICAgICAgICAgQSBwcm9taXNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGl0UGljdHVyZUluUGljdHVyZSA9IGZ1bmN0aW9uIGV4aXRQaWN0dXJlSW5QaWN0dXJlKCkge1xuICAgIGlmICgncGljdHVyZUluUGljdHVyZUVuYWJsZWQnIGluIGRvY3VtZW50KSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgcGxheWVyIGxlYXZlcyBwaWN0dXJlIGluIHBpY3R1cmUgbW9kZVxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHJldHVybiBkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhpcyBQbGF5ZXIgaGFzIGZvY3VzIGFuZCBhIGtleSBnZXRzIHByZXNzZWQgZG93biwgb3Igd2hlblxuICAgKiBhbnkgQ29tcG9uZW50IG9mIHRoaXMgcGxheWVyIHJlY2VpdmVzIGEga2V5IHByZXNzIHRoYXQgaXQgZG9lc24ndCBoYW5kbGUuXG4gICAqIFRoaXMgYWxsb3dzIHBsYXllci13aWRlIGhvdGtleXMgKGVpdGhlciBhcyBkZWZpbmVkIGJlbG93LCBvciBvcHRpb25hbGx5XG4gICAqIGJ5IGFuIGV4dGVybmFsIGZ1bmN0aW9uKS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICB2YXIgdXNlckFjdGlvbnMgPSB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zOyAvLyBCYWlsIG91dCBpZiBob3RrZXlzIGFyZSBub3QgY29uZmlndXJlZC5cblxuICAgIGlmICghdXNlckFjdGlvbnMgfHwgIXVzZXJBY3Rpb25zLmhvdGtleXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBleGNsdWRlIGFuIGVsZW1lbnQgZnJvbVxuICAgIC8vIGhvdGtleXMgaGFuZGxpbmcuXG5cblxuICAgIHZhciBleGNsdWRlRWxlbWVudCA9IGZ1bmN0aW9uIGV4Y2x1ZGVFbGVtZW50KGVsKSB7XG4gICAgICB2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsgLy8gVGhlIGZpcnN0IGFuZCBlYXNpZXN0IHRlc3QgaXMgZm9yIGBjb250ZW50ZWRpdGFibGVgIGVsZW1lbnRzLlxuXG4gICAgICBpZiAoZWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIElucHV0cyBtYXRjaGluZyB0aGVzZSB0eXBlcyB3aWxsIHN0aWxsIHRyaWdnZXIgaG90a2V5IGhhbmRsaW5nIGFzXG4gICAgICAvLyB0aGV5IGFyZSBub3QgdGV4dCBpbnB1dHMuXG5cblxuICAgICAgdmFyIGFsbG93ZWRJbnB1dFR5cGVzID0gWydidXR0b24nLCAnY2hlY2tib3gnLCAnaGlkZGVuJywgJ3JhZGlvJywgJ3Jlc2V0JywgJ3N1Ym1pdCddO1xuXG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICByZXR1cm4gYWxsb3dlZElucHV0VHlwZXMuaW5kZXhPZihlbC50eXBlKSA9PT0gLTE7XG4gICAgICB9IC8vIFRoZSBmaW5hbCB0ZXN0IGlzIGJ5IHRhZyBuYW1lLiBUaGVzZSB0YWdzIHdpbGwgYmUgZXhjbHVkZWQgZW50aXJlbHkuXG5cblxuICAgICAgdmFyIGV4Y2x1ZGVkVGFncyA9IFsndGV4dGFyZWEnXTtcbiAgICAgIHJldHVybiBleGNsdWRlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTE7XG4gICAgfTsgLy8gQmFpbCBvdXQgaWYgdGhlIHVzZXIgaXMgZm9jdXNlZCBvbiBhbiBpbnRlcmFjdGl2ZSBmb3JtIGVsZW1lbnQuXG5cblxuICAgIGlmIChleGNsdWRlRWxlbWVudCh0aGlzLmVsXy5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB1c2VyQWN0aW9ucy5ob3RrZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1c2VyQWN0aW9ucy5ob3RrZXlzLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZUhvdGtleXMoZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhpcyBQbGF5ZXIgcmVjZWl2ZXMgYSBob3RrZXkga2V5ZG93biBldmVudC5cbiAgICogU3VwcG9ydGVkIHBsYXllci13aWRlIGhvdGtleXMgYXJlOlxuICAgKlxuICAgKiAgIGYgICAgICAgICAgLSB0b2dnbGUgZnVsbHNjcmVlblxuICAgKiAgIG0gICAgICAgICAgLSB0b2dnbGUgbXV0ZVxuICAgKiAgIGsgb3IgU3BhY2UgLSB0b2dnbGUgcGxheS9wYXVzZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlSG90a2V5cyA9IGZ1bmN0aW9uIGhhbmRsZUhvdGtleXMoZXZlbnQpIHtcbiAgICB2YXIgaG90a2V5cyA9IHRoaXMub3B0aW9uc18udXNlckFjdGlvbnMgPyB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmhvdGtleXMgOiB7fTsgLy8gc2V0IGZ1bGxzY3JlZW5LZXksIG11dGVLZXksIHBsYXlQYXVzZUtleSBmcm9tIGBob3RrZXlzYCwgdXNlIGRlZmF1bHRzIGlmIG5vdCBzZXRcblxuICAgIHZhciBfaG90a2V5cyRmdWxsc2NyZWVuS2UgPSBob3RrZXlzLmZ1bGxzY3JlZW5LZXksXG4gICAgICAgIGZ1bGxzY3JlZW5LZXkgPSBfaG90a2V5cyRmdWxsc2NyZWVuS2UgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChrZXlkb3duRXZlbnQpIHtcbiAgICAgIHJldHVybiBrZXljb2RlLmlzRXZlbnRLZXkoa2V5ZG93bkV2ZW50LCAnZicpO1xuICAgIH0gOiBfaG90a2V5cyRmdWxsc2NyZWVuS2UsXG4gICAgICAgIF9ob3RrZXlzJG11dGVLZXkgPSBob3RrZXlzLm11dGVLZXksXG4gICAgICAgIG11dGVLZXkgPSBfaG90a2V5cyRtdXRlS2V5ID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoa2V5ZG93bkV2ZW50KSB7XG4gICAgICByZXR1cm4ga2V5Y29kZS5pc0V2ZW50S2V5KGtleWRvd25FdmVudCwgJ20nKTtcbiAgICB9IDogX2hvdGtleXMkbXV0ZUtleSxcbiAgICAgICAgX2hvdGtleXMkcGxheVBhdXNlS2V5ID0gaG90a2V5cy5wbGF5UGF1c2VLZXksXG4gICAgICAgIHBsYXlQYXVzZUtleSA9IF9ob3RrZXlzJHBsYXlQYXVzZUtleSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKGtleWRvd25FdmVudCkge1xuICAgICAgcmV0dXJuIGtleWNvZGUuaXNFdmVudEtleShrZXlkb3duRXZlbnQsICdrJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGtleWRvd25FdmVudCwgJ1NwYWNlJyk7XG4gICAgfSA6IF9ob3RrZXlzJHBsYXlQYXVzZUtleTtcblxuICAgIGlmIChmdWxsc2NyZWVuS2V5LmNhbGwodGhpcywgZXZlbnQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB2YXIgRlNUb2dnbGUgPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KCdGdWxsc2NyZWVuVG9nZ2xlJyk7XG5cbiAgICAgIGlmIChkb2N1bWVudFt0aGlzLmZzQXBpXy5mdWxsc2NyZWVuRW5hYmxlZF0gIT09IGZhbHNlKSB7XG4gICAgICAgIEZTVG9nZ2xlLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG11dGVLZXkuY2FsbCh0aGlzLCBldmVudCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciBNdXRlVG9nZ2xlID0gQ29tcG9uZW50LmdldENvbXBvbmVudCgnTXV0ZVRvZ2dsZScpO1xuICAgICAgTXV0ZVRvZ2dsZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfSBlbHNlIGlmIChwbGF5UGF1c2VLZXkuY2FsbCh0aGlzLCBldmVudCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciBQbGF5VG9nZ2xlID0gQ29tcG9uZW50LmdldENvbXBvbmVudCgnUGxheVRvZ2dsZScpO1xuICAgICAgUGxheVRvZ2dsZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHRoZSBwbGF5ZXIgY2FuIHBsYXkgYSBnaXZlbiBtaW1ldHlwZVxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3ZpZGVvLmh0bWwjZG9tLW5hdmlnYXRvci1jYW5wbGF5dHlwZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgVGhlIG1pbWV0eXBlIHRvIGNoZWNrXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uIGNhblBsYXlUeXBlKHR5cGUpIHtcbiAgICB2YXIgY2FuOyAvLyBMb29wIHRocm91Z2ggZWFjaCBwbGF5YmFjayB0ZWNobm9sb2d5IGluIHRoZSBvcHRpb25zIG9yZGVyXG5cbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMub3B0aW9uc18udGVjaE9yZGVyOyBpIDwgai5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRlY2hOYW1lID0galtpXTtcbiAgICAgIHZhciB0ZWNoID0gVGVjaC5nZXRUZWNoKHRlY2hOYW1lKTsgLy8gU3VwcG9ydCBvbGQgYmVoYXZpb3Igb2YgdGVjaHMgYmVpbmcgcmVnaXN0ZXJlZCBhcyBjb21wb25lbnRzLlxuICAgICAgLy8gUmVtb3ZlIG9uY2UgdGhhdCBkZXByZWNhdGVkIGJlaGF2aW9yIGlzIHJlbW92ZWQuXG5cbiAgICAgIGlmICghdGVjaCkge1xuICAgICAgICB0ZWNoID0gQ29tcG9uZW50LmdldENvbXBvbmVudCh0ZWNoTmFtZSk7XG4gICAgICB9IC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRlY2ggaXMgZGVmaW5lZCBiZWZvcmUgY29udGludWluZ1xuXG5cbiAgICAgIGlmICghdGVjaCkge1xuICAgICAgICBsb2cuZXJyb3IoXCJUaGUgXFxcIlwiICsgdGVjaE5hbWUgKyBcIlxcXCIgdGVjaCBpcyB1bmRlZmluZWQuIFNraXBwZWQgYnJvd3NlciBzdXBwb3J0IGNoZWNrIGZvciB0aGF0IHRlY2guXCIpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyB0ZWNobm9sb2d5XG5cblxuICAgICAgaWYgKHRlY2guaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICBjYW4gPSB0ZWNoLmNhblBsYXlUeXBlKHR5cGUpO1xuXG4gICAgICAgIGlmIChjYW4pIHtcbiAgICAgICAgICByZXR1cm4gY2FuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3Qgc291cmNlIGJhc2VkIG9uIHRlY2gtb3JkZXIgb3Igc291cmNlLW9yZGVyXG4gICAqIFVzZXMgc291cmNlLW9yZGVyIHNlbGVjdGlvbiBpZiBgb3B0aW9ucy5zb3VyY2VPcmRlcmAgaXMgdHJ1dGh5LiBPdGhlcndpc2UsXG4gICAqIGRlZmF1bHRzIHRvIHRlY2gtb3JkZXIgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZXNcbiAgICogICAgICAgIFRoZSBzb3VyY2VzIGZvciBhIG1lZGlhIGFzc2V0XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdHxib29sZWFufVxuICAgKiAgICAgICAgIE9iamVjdCBvZiBzb3VyY2UgYW5kIHRlY2ggb3JkZXIgb3IgZmFsc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2VsZWN0U291cmNlID0gZnVuY3Rpb24gc2VsZWN0U291cmNlKHNvdXJjZXMpIHtcbiAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICAvLyBHZXQgb25seSB0aGUgdGVjaHMgc3BlY2lmaWVkIGluIGB0ZWNoT3JkZXJgIHRoYXQgZXhpc3QgYW5kIGFyZSBzdXBwb3J0ZWQgYnkgdGhlXG4gICAgLy8gY3VycmVudCBwbGF0Zm9ybVxuICAgIHZhciB0ZWNocyA9IHRoaXMub3B0aW9uc18udGVjaE9yZGVyLm1hcChmdW5jdGlvbiAodGVjaE5hbWUpIHtcbiAgICAgIHJldHVybiBbdGVjaE5hbWUsIFRlY2guZ2V0VGVjaCh0ZWNoTmFtZSldO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHRlY2hOYW1lID0gX3JlZlswXSxcbiAgICAgICAgICB0ZWNoID0gX3JlZlsxXTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdGVjaCBpcyBkZWZpbmVkIGJlZm9yZSBjb250aW51aW5nXG4gICAgICBpZiAodGVjaCkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGlzIHRlY2hub2xvZ3lcbiAgICAgICAgcmV0dXJuIHRlY2guaXNTdXBwb3J0ZWQoKTtcbiAgICAgIH1cblxuICAgICAgbG9nLmVycm9yKFwiVGhlIFxcXCJcIiArIHRlY2hOYW1lICsgXCJcXFwiIHRlY2ggaXMgdW5kZWZpbmVkLiBTa2lwcGVkIGJyb3dzZXIgc3VwcG9ydCBjaGVjayBmb3IgdGhhdCB0ZWNoLlwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTsgLy8gSXRlcmF0ZSBvdmVyIGVhY2ggYGlubmVyQXJyYXlgIGVsZW1lbnQgb25jZSBwZXIgYG91dGVyQXJyYXlgIGVsZW1lbnQgYW5kIGV4ZWN1dGVcbiAgICAvLyBgdGVzdGVyYCB3aXRoIGJvdGguIElmIGB0ZXN0ZXJgIHJldHVybnMgYSBub24tZmFsc3kgdmFsdWUsIGV4aXQgZWFybHkgYW5kIHJldHVyblxuICAgIC8vIHRoYXQgdmFsdWUuXG5cbiAgICB2YXIgZmluZEZpcnN0UGFzc2luZ1RlY2hTb3VyY2VQYWlyID0gZnVuY3Rpb24gZmluZEZpcnN0UGFzc2luZ1RlY2hTb3VyY2VQYWlyKG91dGVyQXJyYXksIGlubmVyQXJyYXksIHRlc3Rlcikge1xuICAgICAgdmFyIGZvdW5kO1xuICAgICAgb3V0ZXJBcnJheS5zb21lKGZ1bmN0aW9uIChvdXRlckNob2ljZSkge1xuICAgICAgICByZXR1cm4gaW5uZXJBcnJheS5zb21lKGZ1bmN0aW9uIChpbm5lckNob2ljZSkge1xuICAgICAgICAgIGZvdW5kID0gdGVzdGVyKG91dGVyQ2hvaWNlLCBpbm5lckNob2ljZSk7XG5cbiAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9O1xuXG4gICAgdmFyIGZvdW5kU291cmNlQW5kVGVjaDtcblxuICAgIHZhciBmbGlwID0gZnVuY3Rpb24gZmxpcChmbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBmbihiLCBhKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBmaW5kZXIgPSBmdW5jdGlvbiBmaW5kZXIoX3JlZjIsIHNvdXJjZSkge1xuICAgICAgdmFyIHRlY2hOYW1lID0gX3JlZjJbMF0sXG4gICAgICAgICAgdGVjaCA9IF9yZWYyWzFdO1xuXG4gICAgICBpZiAodGVjaC5jYW5QbGF5U291cmNlKHNvdXJjZSwgX3RoaXMxMC5vcHRpb25zX1t0ZWNoTmFtZS50b0xvd2VyQ2FzZSgpXSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICB0ZWNoOiB0ZWNoTmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07IC8vIERlcGVuZGluZyBvbiB0aGUgdHJ1dGhpbmVzcyBvZiBgb3B0aW9ucy5zb3VyY2VPcmRlcmAsIHdlIHN3YXAgdGhlIG9yZGVyIG9mIHRlY2hzIGFuZCBzb3VyY2VzXG4gICAgLy8gdG8gc2VsZWN0IGZyb20gdGhlbSBiYXNlZCBvbiB0aGVpciBwcmlvcml0eS5cblxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18uc291cmNlT3JkZXIpIHtcbiAgICAgIC8vIFNvdXJjZS1maXJzdCBvcmRlcmluZ1xuICAgICAgZm91bmRTb3VyY2VBbmRUZWNoID0gZmluZEZpcnN0UGFzc2luZ1RlY2hTb3VyY2VQYWlyKHNvdXJjZXMsIHRlY2hzLCBmbGlwKGZpbmRlcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUZWNoLWZpcnN0IG9yZGVyaW5nXG4gICAgICBmb3VuZFNvdXJjZUFuZFRlY2ggPSBmaW5kRmlyc3RQYXNzaW5nVGVjaFNvdXJjZVBhaXIodGVjaHMsIHNvdXJjZXMsIGZpbmRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kU291cmNlQW5kVGVjaCB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgdmlkZW8gc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fFRlY2h+U291cmNlT2JqZWN0W118c3RyaW5nfSBbc291cmNlXVxuICAgKiAgICAgICAgQSBTb3VyY2VPYmplY3QsIGFuIGFycmF5IG9mIFNvdXJjZU9iamVjdHMsIG9yIGEgc3RyaW5nIHJlZmVyZW5jaW5nXG4gICAqICAgICAgICBhIFVSTCB0byBhIG1lZGlhIHNvdXJjZS4gSXQgaXMgX2hpZ2hseSByZWNvbW1lbmRlZF8gdGhhdCBhbiBvYmplY3RcbiAgICogICAgICAgIG9yIGFycmF5IG9mIG9iamVjdHMgaXMgdXNlZCBoZXJlLCBzbyB0aGF0IHNvdXJjZSBzZWxlY3Rpb25cbiAgICogICAgICAgIGFsZ29yaXRobXMgY2FuIHRha2UgdGhlIGB0eXBlYCBpbnRvIGFjY291bnQuXG4gICAqXG4gICAqICAgICAgICBJZiBub3QgcHJvdmlkZWQsIHRoaXMgbWV0aG9kIGFjdHMgYXMgYSBnZXR0ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9XG4gICAqICAgICAgICAgSWYgdGhlIGBzb3VyY2VgIGFyZ3VtZW50IGlzIG1pc3NpbmcsIHJldHVybnMgdGhlIGN1cnJlbnQgc291cmNlXG4gICAqICAgICAgICAgVVJMLiBPdGhlcndpc2UsIHJldHVybnMgbm90aGluZy91bmRlZmluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNyYyA9IGZ1bmN0aW9uIHNyYyhzb3VyY2UpIHtcbiAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAvLyBnZXR0ZXIgdXNhZ2VcbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlXy5zcmMgfHwgJyc7XG4gICAgfSAvLyBmaWx0ZXIgb3V0IGludmFsaWQgc291cmNlcyBhbmQgdHVybiBvdXIgc291cmNlIGludG9cbiAgICAvLyBhbiBhcnJheSBvZiBzb3VyY2Ugb2JqZWN0c1xuXG5cbiAgICB2YXIgc291cmNlcyA9IGZpbHRlclNvdXJjZShzb3VyY2UpOyAvLyBpZiBhIHNvdXJjZSB3YXMgcGFzc2VkIGluIHRoZW4gaXQgaXMgaW52YWxpZCBiZWNhdXNlXG4gICAgLy8gaXQgd2FzIGZpbHRlcmVkIHRvIGEgemVybyBsZW5ndGggQXJyYXkuIFNvIHdlIGhhdmUgdG9cbiAgICAvLyBzaG93IGFuIGVycm9yXG5cbiAgICBpZiAoIXNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVycm9yKHtcbiAgICAgICAgICBjb2RlOiA0LFxuICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5ub3RTdXBwb3J0ZWRNZXNzYWdlKVxuICAgICAgICB9KTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaW50aWFsIHNvdXJjZXNcblxuXG4gICAgdGhpcy5jaGFuZ2luZ1NyY18gPSB0cnVlO1xuICAgIHRoaXMuY2FjaGVfLnNvdXJjZXMgPSBzb3VyY2VzO1xuICAgIHRoaXMudXBkYXRlU291cmNlQ2FjaGVzXyhzb3VyY2VzWzBdKTsgLy8gbWlkZGxld2FyZVNvdXJjZSBpcyB0aGUgc291cmNlIGFmdGVyIGl0IGhhcyBiZWVuIGNoYW5nZWQgYnkgbWlkZGxld2FyZVxuXG4gICAgc2V0U291cmNlKHRoaXMsIHNvdXJjZXNbMF0sIGZ1bmN0aW9uIChtaWRkbGV3YXJlU291cmNlLCBtd3MpIHtcbiAgICAgIF90aGlzMTEubWlkZGxld2FyZV8gPSBtd3M7IC8vIHNpbmNlIHNvdXJjZVNldCBpcyBhc3luYyB3ZSBoYXZlIHRvIHVwZGF0ZSB0aGUgY2FjaGUgYWdhaW4gYWZ0ZXIgd2Ugc2VsZWN0IGEgc291cmNlIHNpbmNlXG4gICAgICAvLyB0aGUgc291cmNlIHRoYXQgaXMgc2VsZWN0ZWQgY291bGQgYmUgb3V0IG9mIG9yZGVyIGZyb20gdGhlIGNhY2hlIHVwZGF0ZSBhYm92ZSB0aGlzIGNhbGxiYWNrLlxuXG4gICAgICBfdGhpczExLmNhY2hlXy5zb3VyY2VzID0gc291cmNlcztcblxuICAgICAgX3RoaXMxMS51cGRhdGVTb3VyY2VDYWNoZXNfKG1pZGRsZXdhcmVTb3VyY2UpO1xuXG4gICAgICB2YXIgZXJyID0gX3RoaXMxMS5zcmNfKG1pZGRsZXdhcmVTb3VyY2UpO1xuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMS5zcmMoc291cmNlcy5zbGljZSgxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczExLmNoYW5naW5nU3JjXyA9IGZhbHNlOyAvLyBXZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiBhIHRpbWVvdXQgdG8gZ2l2ZSBmb2xrcyBhIGNoYW5jZSB0byBhZGQgZXJyb3IgZXZlbnQgaGFuZGxlcnNcblxuICAgICAgICBfdGhpczExLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuZXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogNCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5ub3RTdXBwb3J0ZWRNZXNzYWdlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAwKTsgLy8gd2UgY291bGQgbm90IGZpbmQgYW4gYXBwcm9wcmlhdGUgdGVjaCwgYnV0IGxldCdzIHN0aWxsIG5vdGlmeSB0aGUgZGVsZWdhdGUgdGhhdCB0aGlzIGlzIGl0XG4gICAgICAgIC8vIHRoaXMgbmVlZHMgYSBiZXR0ZXIgY29tbWVudCBhYm91dCB3aHkgdGhpcyBpcyBuZWVkZWRcblxuXG4gICAgICAgIF90aGlzMTEudHJpZ2dlclJlYWR5KCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRUZWNoKG13cywgX3RoaXMxMS50ZWNoXyk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgc291cmNlIG9iamVjdCBvbiB0aGUgdGVjaCwgcmV0dXJucyBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlclxuICAgKiB0aGVyZSBpcyBhIHRlY2ggdGhhdCBjYW4gcGxheSB0aGUgc291cmNlIG9yIG5vdFxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzb3VyY2VcbiAgICogICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0IHRvIHNldCBvbiB0aGUgVGVjaFxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gVHJ1ZSBpZiB0aGVyZSBpcyBubyBUZWNoIHRvIHBsYXliYWNrIHRoaXMgc291cmNlXG4gICAqICAgICAgICAgLSBGYWxzZSBvdGhlcndpc2VcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3JjXyA9IGZ1bmN0aW9uIHNyY18oc291cmNlKSB7XG4gICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgdmFyIHNvdXJjZVRlY2ggPSB0aGlzLnNlbGVjdFNvdXJjZShbc291cmNlXSk7XG5cbiAgICBpZiAoIXNvdXJjZVRlY2gpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghdGl0bGVDYXNlRXF1YWxzKHNvdXJjZVRlY2gudGVjaCwgdGhpcy50ZWNoTmFtZV8pKSB7XG4gICAgICB0aGlzLmNoYW5naW5nU3JjXyA9IHRydWU7IC8vIGxvYWQgdGhpcyB0ZWNobm9sb2d5IHdpdGggdGhlIGNob3NlbiBzb3VyY2VcblxuICAgICAgdGhpcy5sb2FkVGVjaF8oc291cmNlVGVjaC50ZWNoLCBzb3VyY2VUZWNoLnNvdXJjZSk7XG4gICAgICB0aGlzLnRlY2hfLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMxMi5jaGFuZ2luZ1NyY18gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gd2FpdCB1bnRpbCB0aGUgdGVjaCBpcyByZWFkeSB0byBzZXQgdGhlIHNvdXJjZVxuICAgIC8vIGFuZCBzZXQgaXQgc3luY2hyb25vdXNseSBpZiBwb3NzaWJsZSAoIzIzMjYpXG5cblxuICAgIHRoaXMucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVGhlIHNldFNvdXJjZSB0ZWNoIG1ldGhvZCB3YXMgYWRkZWQgd2l0aCBzb3VyY2UgaGFuZGxlcnNcbiAgICAgIC8vIHNvIG9sZGVyIHRlY2hzIHdvbid0IHN1cHBvcnQgaXRcbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgdGhlIGRpcmVjdCBwcm90b3R5cGUgZm9yIHRoZSBjYXNlIHdoZXJlIHN1YmNsYXNzZXNcbiAgICAgIC8vIG9mIHRoZSB0ZWNoIGRvIG5vdCBzdXBwb3J0IHNvdXJjZSBoYW5kbGVyc1xuICAgICAgaWYgKHRoaXMudGVjaF8uY29uc3RydWN0b3IucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdzZXRTb3VyY2UnKSkge1xuICAgICAgICB0aGlzLnRlY2hDYWxsXygnc2V0U291cmNlJywgc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGVjaENhbGxfKCdzcmMnLCBzb3VyY2Uuc3JjKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2luZ1NyY18gPSBmYWxzZTtcbiAgICB9LCB0cnVlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEJlZ2luIGxvYWRpbmcgdGhlIHNyYyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb2FkID0gZnVuY3Rpb24gbG9hZCgpIHtcbiAgICB0aGlzLnRlY2hDYWxsXygnbG9hZCcpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcGxheWVyLiBMb2FkcyB0aGUgZmlyc3QgdGVjaCBpbiB0aGUgdGVjaE9yZGVyLFxuICAgKiByZW1vdmVzIGFsbCB0aGUgdGV4dCB0cmFja3MgaW4gdGhlIGV4aXN0aW5nIGB0ZWNoYCxcbiAgICogYW5kIGNhbGxzIGByZXNldGAgb24gdGhlIGB0ZWNoYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICB2YXIgUHJvbWlzZUNsYXNzID0gdGhpcy5vcHRpb25zXy5Qcm9taXNlIHx8IHdpbmRvdyQxLlByb21pc2U7XG5cbiAgICBpZiAodGhpcy5wYXVzZWQoKSB8fCAhUHJvbWlzZUNsYXNzKSB7XG4gICAgICB0aGlzLmRvUmVzZXRfKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwbGF5UHJvbWlzZSA9IHRoaXMucGxheSgpO1xuICAgICAgc2lsZW5jZVByb21pc2UocGxheVByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczEzLmRvUmVzZXRfKCk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5kb1Jlc2V0XyA9IGZ1bmN0aW9uIGRvUmVzZXRfKCkge1xuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICB0aGlzLnRlY2hfLmNsZWFyVHJhY2tzKCd0ZXh0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldENhY2hlXygpO1xuICAgIHRoaXMucG9zdGVyKCcnKTtcbiAgICB0aGlzLmxvYWRUZWNoXyh0aGlzLm9wdGlvbnNfLnRlY2hPcmRlclswXSwgbnVsbCk7XG4gICAgdGhpcy50ZWNoQ2FsbF8oJ3Jlc2V0Jyk7XG4gICAgdGhpcy5yZXNldENvbnRyb2xCYXJVSV8oKTtcblxuICAgIGlmIChpc0V2ZW50ZWQodGhpcykpIHtcbiAgICAgIHRoaXMudHJpZ2dlcigncGxheWVycmVzZXQnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IENvbnRyb2wgQmFyJ3MgVUkgYnkgY2FsbGluZyBzdWItbWV0aG9kcyB0aGF0IHJlc2V0XG4gICAqIGFsbCBvZiBDb250cm9sIEJhcidzIGNvbXBvbmVudHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRDb250cm9sQmFyVUlfID0gZnVuY3Rpb24gcmVzZXRDb250cm9sQmFyVUlfKCkge1xuICAgIHRoaXMucmVzZXRQcm9ncmVzc0Jhcl8oKTtcbiAgICB0aGlzLnJlc2V0UGxheWJhY2tSYXRlXygpO1xuICAgIHRoaXMucmVzZXRWb2x1bWVCYXJfKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRlY2gncyBwcm9ncmVzcyBzbyBwcm9ncmVzcyBiYXIgaXMgcmVzZXQgaW4gdGhlIFVJXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0UHJvZ3Jlc3NCYXJfID0gZnVuY3Rpb24gcmVzZXRQcm9ncmVzc0Jhcl8oKSB7XG4gICAgdGhpcy5jdXJyZW50VGltZSgwKTtcbiAgICB2YXIgX3RoaXMkY29udHJvbEJhciA9IHRoaXMuY29udHJvbEJhcixcbiAgICAgICAgZHVyYXRpb25EaXNwbGF5ID0gX3RoaXMkY29udHJvbEJhci5kdXJhdGlvbkRpc3BsYXksXG4gICAgICAgIHJlbWFpbmluZ1RpbWVEaXNwbGF5ID0gX3RoaXMkY29udHJvbEJhci5yZW1haW5pbmdUaW1lRGlzcGxheTtcblxuICAgIGlmIChkdXJhdGlvbkRpc3BsYXkpIHtcbiAgICAgIGR1cmF0aW9uRGlzcGxheS51cGRhdGVDb250ZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKHJlbWFpbmluZ1RpbWVEaXNwbGF5KSB7XG4gICAgICByZW1haW5pbmdUaW1lRGlzcGxheS51cGRhdGVDb250ZW50KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCBQbGF5YmFjayByYXRpb1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldFBsYXliYWNrUmF0ZV8gPSBmdW5jdGlvbiByZXNldFBsYXliYWNrUmF0ZV8oKSB7XG4gICAgdGhpcy5wbGF5YmFja1JhdGUodGhpcy5kZWZhdWx0UGxheWJhY2tSYXRlKCkpO1xuICAgIHRoaXMuaGFuZGxlVGVjaFJhdGVDaGFuZ2VfKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IFZvbHVtZSBiYXJcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRWb2x1bWVCYXJfID0gZnVuY3Rpb24gcmVzZXRWb2x1bWVCYXJfKCkge1xuICAgIHRoaXMudm9sdW1lKDEuMCk7XG4gICAgdGhpcy50cmlnZ2VyKCd2b2x1bWVjaGFuZ2UnKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgb2YgdGhlIGN1cnJlbnQgc291cmNlIG9iamVjdHMuXG4gICAqXG4gICAqIEByZXR1cm4ge1RlY2h+U291cmNlT2JqZWN0W119XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgc291cmNlIG9iamVjdHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudFNvdXJjZXMgPSBmdW5jdGlvbiBjdXJyZW50U291cmNlcygpIHtcbiAgICB2YXIgc291cmNlID0gdGhpcy5jdXJyZW50U291cmNlKCk7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTsgLy8gYXNzdW1lIGB7fWAgb3IgYHsgc3JjIH1gXG5cbiAgICBpZiAoT2JqZWN0LmtleXMoc291cmNlKS5sZW5ndGggIT09IDApIHtcbiAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlXy5zb3VyY2VzIHx8IHNvdXJjZXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc291cmNlIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7VGVjaH5Tb3VyY2VPYmplY3R9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgc291cmNlIG9iamVjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jdXJyZW50U291cmNlID0gZnVuY3Rpb24gY3VycmVudFNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZV8uc291cmNlIHx8IHt9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmdWxseSBxdWFsaWZpZWQgVVJMIG9mIHRoZSBjdXJyZW50IHNvdXJjZSB2YWx1ZSBlLmcuIGh0dHA6Ly9teXNpdGUuY29tL3ZpZGVvLm1wNFxuICAgKiBDYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBjdXJyZW50VHlwZWAgdG8gYXNzaXN0IGluIHJlYnVpbGRpbmcgdGhlIGN1cnJlbnQgc291cmNlIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHNvdXJjZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jdXJyZW50U3JjID0gZnVuY3Rpb24gY3VycmVudFNyYygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U291cmNlKCkgJiYgdGhpcy5jdXJyZW50U291cmNlKCkuc3JjIHx8ICcnO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgc291cmNlIHR5cGUgZS5nLiB2aWRlby9tcDRcbiAgICogVGhpcyBjYW4gYWxsb3cgeW91IHJlYnVpbGQgdGhlIGN1cnJlbnQgc291cmNlIG9iamVjdCBzbyB0aGF0IHlvdSBjb3VsZCBsb2FkIHRoZSBzYW1lXG4gICAqIHNvdXJjZSBhbmQgdGVjaCBsYXRlclxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIHNvdXJjZSBNSU1FIHR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudFR5cGUgPSBmdW5jdGlvbiBjdXJyZW50VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U291cmNlKCkgJiYgdGhpcy5jdXJyZW50U291cmNlKCkudHlwZSB8fCAnJztcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgcHJlbG9hZCBhdHRyaWJ1dGVcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbdmFsdWVdXG4gICAqICAgICAgICAtIHRydWUgbWVhbnMgdGhhdCB3ZSBzaG91bGQgcHJlbG9hZFxuICAgKiAgICAgICAgLSBmYWxzZSBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgcHJlbG9hZFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIHByZWxvYWQgYXR0cmlidXRlIHZhbHVlIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcmVsb2FkID0gZnVuY3Rpb24gcHJlbG9hZCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsXygnc2V0UHJlbG9hZCcsIHZhbHVlKTtcbiAgICAgIHRoaXMub3B0aW9uc18ucHJlbG9hZCA9IHZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdwcmVsb2FkJyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGF1dG9wbGF5IG9wdGlvbi4gV2hlbiB0aGlzIGlzIGEgYm9vbGVhbiBpdCB3aWxsXG4gICAqIG1vZGlmeSB0aGUgYXR0cmlidXRlIG9uIHRoZSB0ZWNoLiBXaGVuIHRoaXMgaXMgYSBzdHJpbmcgdGhlIGF0dHJpYnV0ZSBvblxuICAgKiB0aGUgdGVjaCB3aWxsIGJlIHJlbW92ZWQgYW5kIGBQbGF5ZXJgIHdpbGwgaGFuZGxlIGF1dG9wbGF5IG9uIGxvYWRzdGFydHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbnxzdHJpbmd9IFt2YWx1ZV1cbiAgICogICAgICAgIC0gdHJ1ZTogYXV0b3BsYXkgdXNpbmcgdGhlIGJyb3dzZXIgYmVoYXZpb3JcbiAgICogICAgICAgIC0gZmFsc2U6IGRvIG5vdCBhdXRvcGxheVxuICAgKiAgICAgICAgLSAncGxheSc6IGNhbGwgcGxheSgpIG9uIGV2ZXJ5IGxvYWRzdGFydFxuICAgKiAgICAgICAgLSAnbXV0ZWQnOiBjYWxsIG11dGVkKCkgdGhlbiBwbGF5KCkgb24gZXZlcnkgbG9hZHN0YXJ0XG4gICAqICAgICAgICAtICdhbnknOiBjYWxsIHBsYXkoKSBvbiBldmVyeSBsb2Fkc3RhcnQuIGlmIHRoYXQgZmFpbHMgY2FsbCBtdXRlZCgpIHRoZW4gcGxheSgpLlxuICAgKiAgICAgICAgLSAqOiB2YWx1ZXMgb3RoZXIgdGhhbiB0aG9zZSBsaXN0ZWQgaGVyZSB3aWxsIGJlIHNldCBgYXV0b3BsYXlgIHRvIHRydWVcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdmFsdWUgb2YgYXV0b3BsYXkgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmF1dG9wbGF5ID0gZnVuY3Rpb24gYXV0b3BsYXkodmFsdWUpIHtcbiAgICAvLyBnZXR0ZXIgdXNhZ2VcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc18uYXV0b3BsYXkgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHRlY2hBdXRvcGxheTsgLy8gaWYgdGhlIHZhbHVlIGlzIGEgdmFsaWQgc3RyaW5nIHNldCBpdCB0byB0aGF0XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvKGFueXxwbGF5fG11dGVkKS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHRoaXMub3B0aW9uc18uYXV0b3BsYXkgPSB2YWx1ZTtcbiAgICAgIHRoaXMubWFudWFsQXV0b3BsYXlfKHZhbHVlKTtcbiAgICAgIHRlY2hBdXRvcGxheSA9IGZhbHNlOyAvLyBhbnkgZmFsc3kgdmFsdWUgc2V0cyBhdXRvcGxheSB0byBmYWxzZSBpbiB0aGUgYnJvd3NlcixcbiAgICAgIC8vIGxldHMgZG8gdGhlIHNhbWVcbiAgICB9IGVsc2UgaWYgKCF2YWx1ZSkge1xuICAgICAgdGhpcy5vcHRpb25zXy5hdXRvcGxheSA9IGZhbHNlOyAvLyBhbnkgb3RoZXIgdmFsdWUgKGllIHRydXRoeSkgc2V0cyBhdXRvcGxheSB0byB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3B0aW9uc18uYXV0b3BsYXkgPSB0cnVlO1xuICAgIH1cblxuICAgIHRlY2hBdXRvcGxheSA9IHR5cGVvZiB0ZWNoQXV0b3BsYXkgPT09ICd1bmRlZmluZWQnID8gdGhpcy5vcHRpb25zXy5hdXRvcGxheSA6IHRlY2hBdXRvcGxheTsgLy8gaWYgd2UgZG9uJ3QgaGF2ZSBhIHRlY2ggdGhlbiB3ZSBkbyBub3QgcXVldWUgdXBcbiAgICAvLyBhIHNldEF1dG9wbGF5IGNhbGwgb24gdGVjaCByZWFkeS4gV2UgZG8gdGhpcyBiZWNhdXNlIHRoZVxuICAgIC8vIGF1dG9wbGF5IG9wdGlvbiB3aWxsIGJlIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IgYW5kIHdlXG4gICAgLy8gZG8gbm90IG5lZWQgdG8gc2V0IGl0IHR3aWNlXG5cbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldEF1dG9wbGF5JywgdGVjaEF1dG9wbGF5KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCBvciB1bnNldCB0aGUgcGxheXNpbmxpbmUgYXR0cmlidXRlLlxuICAgKiBQbGF5c2lubGluZSB0ZWxscyB0aGUgYnJvd3NlciB0aGF0IG5vbi1mdWxsc2NyZWVuIHBsYXliYWNrIGlzIHByZWZlcnJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbdmFsdWVdXG4gICAqICAgICAgICAtIHRydWUgbWVhbnMgdGhhdCB3ZSBzaG91bGQgdHJ5IHRvIHBsYXkgaW5saW5lIGJ5IGRlZmF1bHRcbiAgICogICAgICAgIC0gZmFsc2UgbWVhbnMgdGhhdCB3ZSBzaG91bGQgdXNlIHRoZSBicm93c2VyJ3MgZGVmYXVsdCBwbGF5YmFjayBtb2RlLFxuICAgKiAgICAgICAgICB3aGljaCBpbiBtb3N0IGNhc2VzIGlzIGlubGluZS4gaU9TIFNhZmFyaSBpcyBhIG5vdGFibGUgZXhjZXB0aW9uXG4gICAqICAgICAgICAgIGFuZCBwbGF5cyBmdWxsc2NyZWVuIGJ5IGRlZmF1bHQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3xQbGF5ZXJ9XG4gICAqICAgICAgICAgLSB0aGUgY3VycmVudCB2YWx1ZSBvZiBwbGF5c2lubGluZVxuICAgKiAgICAgICAgIC0gdGhlIHBsYXllciB3aGVuIHNldHRpbmdcbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jYXR0ci12aWRlby1wbGF5c2lubGluZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheXNpbmxpbmUgPSBmdW5jdGlvbiBwbGF5c2lubGluZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsXygnc2V0UGxheXNpbmxpbmUnLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9wdGlvbnNfLnBsYXlzaW5saW5lID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygncGxheXNpbmxpbmUnKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgbG9vcCBhdHRyaWJ1dGUgb24gdGhlIHZpZGVvIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ZhbHVlXVxuICAgKiAgICAgICAgLSB0cnVlIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIGxvb3AgdGhlIHZpZGVvXG4gICAqICAgICAgICAtIGZhbHNlIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsb29wIHRoZSB2aWRlb1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZhbHVlIG9mIGxvb3Agd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvb3AgPSBmdW5jdGlvbiBsb29wKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGVjaENhbGxfKCdzZXRMb29wJywgdmFsdWUpO1xuICAgICAgdGhpcy5vcHRpb25zXy5sb29wID0gdmFsdWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ2xvb3AnKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgcG9zdGVyIGltYWdlIHNvdXJjZSB1cmxcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNwb3N0ZXJjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzcmNdXG4gICAqICAgICAgICBQb3N0ZXIgaW1hZ2Ugc291cmNlIFVSTFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdmFsdWUgb2YgcG9zdGVyIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wb3N0ZXIgPSBmdW5jdGlvbiBwb3N0ZXIoc3JjKSB7XG4gICAgaWYgKHNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3N0ZXJfO1xuICAgIH0gLy8gVGhlIGNvcnJlY3Qgd2F5IHRvIHJlbW92ZSBhIHBvc3RlciBpcyB0byBzZXQgYXMgYW4gZW1wdHkgc3RyaW5nXG4gICAgLy8gb3RoZXIgZmFsc2V5IHZhbHVlcyB3aWxsIHRocm93IGVycm9yc1xuXG5cbiAgICBpZiAoIXNyYykge1xuICAgICAgc3JjID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHNyYyA9PT0gdGhpcy5wb3N0ZXJfKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyB1cGRhdGUgdGhlIGludGVybmFsIHBvc3RlciB2YXJpYWJsZVxuXG5cbiAgICB0aGlzLnBvc3Rlcl8gPSBzcmM7IC8vIHVwZGF0ZSB0aGUgdGVjaCdzIHBvc3RlclxuXG4gICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFBvc3RlcicsIHNyYyk7XG4gICAgdGhpcy5pc1Bvc3RlckZyb21UZWNoXyA9IGZhbHNlOyAvLyBhbGVydCBjb21wb25lbnRzIHRoYXQgdGhlIHBvc3RlciBoYXMgYmVlbiBzZXRcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgcG9zdGVyIGltYWdlIGlzIGNoYW5nZWQgb24gdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjcG9zdGVyY2hhbmdlXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdwb3N0ZXJjaGFuZ2UnKTtcbiAgfVxuICAvKipcbiAgICogU29tZSB0ZWNocyAoZS5nLiBZb3VUdWJlKSBjYW4gcHJvdmlkZSBhIHBvc3RlciBzb3VyY2UgaW4gYW5cbiAgICogYXN5bmNocm9ub3VzIHdheS4gV2Ugd2FudCB0aGUgcG9zdGVyIGNvbXBvbmVudCB0byB1c2UgdGhpc1xuICAgKiBwb3N0ZXIgc291cmNlIHNvIHRoYXQgaXQgY292ZXJzIHVwIHRoZSB0ZWNoJ3MgY29udHJvbHMuXG4gICAqIChZb3VUdWJlJ3MgcGxheSBidXR0b24pLiBIb3dldmVyIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpc1xuICAgKiBzb3VyY2UgaWYgdGhlIHBsYXllciB1c2VyIGhhc24ndCBzZXQgYSBwb3N0ZXIgdGhyb3VnaFxuICAgKiB0aGUgbm9ybWFsIEFQSXMuXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjcG9zdGVyY2hhbmdlXG4gICAqIEBsaXN0ZW5zIFRlY2gjcG9zdGVyY2hhbmdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFBvc3RlckNoYW5nZV8oKSB7XG4gICAgaWYgKCghdGhpcy5wb3N0ZXJfIHx8IHRoaXMub3B0aW9uc18udGVjaENhbk92ZXJyaWRlUG9zdGVyKSAmJiB0aGlzLnRlY2hfICYmIHRoaXMudGVjaF8ucG9zdGVyKSB7XG4gICAgICB2YXIgbmV3UG9zdGVyID0gdGhpcy50ZWNoXy5wb3N0ZXIoKSB8fCAnJztcblxuICAgICAgaWYgKG5ld1Bvc3RlciAhPT0gdGhpcy5wb3N0ZXJfKSB7XG4gICAgICAgIHRoaXMucG9zdGVyXyA9IG5ld1Bvc3RlcjtcbiAgICAgICAgdGhpcy5pc1Bvc3RlckZyb21UZWNoXyA9IHRydWU7IC8vIExldCBjb21wb25lbnRzIGtub3cgdGhlIHBvc3RlciBoYXMgY2hhbmdlZFxuXG4gICAgICAgIHRoaXMudHJpZ2dlcigncG9zdGVyY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHdoZXRoZXIgb3Igbm90IHRoZSBjb250cm9scyBhcmUgc2hvd2luZy5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNjb250cm9sc2VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbYm9vbF1cbiAgICogICAgICAgIC0gdHJ1ZSB0byB0dXJuIGNvbnRyb2xzIG9uXG4gICAqICAgICAgICAtIGZhbHNlIHRvIHR1cm4gY29udHJvbHMgb2ZmXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdmFsdWUgb2YgY29udHJvbHMgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbnRyb2xzID0gZnVuY3Rpb24gY29udHJvbHMoYm9vbCkge1xuICAgIGlmIChib29sID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuY29udHJvbHNfO1xuICAgIH1cblxuICAgIGJvb2wgPSAhIWJvb2w7IC8vIERvbid0IHRyaWdnZXIgYSBjaGFuZ2UgZXZlbnQgdW5sZXNzIGl0IGFjdHVhbGx5IGNoYW5nZWRcblxuICAgIGlmICh0aGlzLmNvbnRyb2xzXyA9PT0gYm9vbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY29udHJvbHNfID0gYm9vbDtcblxuICAgIGlmICh0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldENvbnRyb2xzJywgYm9vbCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29udHJvbHNfKSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtY29udHJvbHMtZGlzYWJsZWQnKTtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1lbmFibGVkJyk7XG4gICAgICAvKipcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjY29udHJvbHNlbmFibGVkXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cblxuICAgICAgdGhpcy50cmlnZ2VyKCdjb250cm9sc2VuYWJsZWQnKTtcblxuICAgICAgaWYgKCF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgICB0aGlzLmFkZFRlY2hDb250cm9sc0xpc3RlbmVyc18oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWNvbnRyb2xzLWVuYWJsZWQnKTtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1kaXNhYmxlZCcpO1xuICAgICAgLyoqXG4gICAgICAgKiBAZXZlbnQgUGxheWVyI2NvbnRyb2xzZGlzYWJsZWRcbiAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAqL1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbnRyb2xzZGlzYWJsZWQnKTtcblxuICAgICAgaWYgKCF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgICB0aGlzLnJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVyc18oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSBuYXRpdmUgY29udHJvbHMgb24vb2ZmLiBOYXRpdmUgY29udHJvbHMgYXJlIHRoZSBjb250cm9scyBidWlsdCBpbnRvXG4gICAqIGRldmljZXMgKGUuZy4gZGVmYXVsdCBpUGhvbmUgY29udHJvbHMpLCBGbGFzaCwgb3Igb3RoZXIgdGVjaHNcbiAgICogKGUuZy4gVmltZW8gQ29udHJvbHMpXG4gICAqICoqVGhpcyBzaG91bGQgb25seSBiZSBzZXQgYnkgdGhlIGN1cnJlbnQgdGVjaCwgYmVjYXVzZSBvbmx5IHRoZSB0ZWNoIGtub3dzXG4gICAqIGlmIGl0IGNhbiBzdXBwb3J0IG5hdGl2ZSBjb250cm9scyoqXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjdXNpbmduYXRpdmVjb250cm9sc1xuICAgKiBAZmlyZXMgUGxheWVyI3VzaW5nY3VzdG9tY29udHJvbHNcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbYm9vbF1cbiAgICogICAgICAgIC0gdHJ1ZSB0byB0dXJuIG5hdGl2ZSBjb250cm9scyBvblxuICAgKiAgICAgICAgLSBmYWxzZSB0byB0dXJuIG5hdGl2ZSBjb250cm9scyBvZmZcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCB2YWx1ZSBvZiBuYXRpdmUgY29udHJvbHMgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzaW5nTmF0aXZlQ29udHJvbHMgPSBmdW5jdGlvbiB1c2luZ05hdGl2ZUNvbnRyb2xzKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gISF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfO1xuICAgIH1cblxuICAgIGJvb2wgPSAhIWJvb2w7IC8vIERvbid0IHRyaWdnZXIgYSBjaGFuZ2UgZXZlbnQgdW5sZXNzIGl0IGFjdHVhbGx5IGNoYW5nZWRcblxuICAgIGlmICh0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfID09PSBib29sKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXyA9IGJvb2w7XG5cbiAgICBpZiAodGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXykge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXVzaW5nLW5hdGl2ZS1jb250cm9scycpO1xuICAgICAgLyoqXG4gICAgICAgKiBwbGF5ZXIgaXMgdXNpbmcgdGhlIG5hdGl2ZSBkZXZpY2UgY29udHJvbHNcbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgUGxheWVyI3VzaW5nbmF0aXZlY29udHJvbHNcbiAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAqL1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3VzaW5nbmF0aXZlY29udHJvbHMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXVzaW5nLW5hdGl2ZS1jb250cm9scycpO1xuICAgICAgLyoqXG4gICAgICAgKiBwbGF5ZXIgaXMgdXNpbmcgdGhlIGN1c3RvbSBIVE1MIGNvbnRyb2xzXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IFBsYXllciN1c2luZ2N1c3RvbWNvbnRyb2xzXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cblxuICAgICAgdGhpcy50cmlnZ2VyKCd1c2luZ2N1c3RvbWNvbnRyb2xzJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXQgb3IgZ2V0IHRoZSBjdXJyZW50IE1lZGlhRXJyb3JcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNlcnJvclxuICAgKlxuICAgKiBAcGFyYW0gIHtNZWRpYUVycm9yfHN0cmluZ3xudW1iZXJ9IFtlcnJdXG4gICAqICAgICAgICAgQSBNZWRpYUVycm9yIG9yIGEgc3RyaW5nL251bWJlciB0byBiZSB0dXJuZWRcbiAgICogICAgICAgICBpbnRvIGEgTWVkaWFFcnJvclxuICAgKlxuICAgKiBAcmV0dXJuIHtNZWRpYUVycm9yfG51bGx9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgTWVkaWFFcnJvciB3aGVuIGdldHRpbmcgKG9yIG51bGwpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoZXJyKSB7XG4gICAgaWYgKGVyciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcnJvcl8gfHwgbnVsbDtcbiAgICB9IC8vIFN1cHByZXNzIHRoZSBmaXJzdCBlcnJvciBtZXNzYWdlIGZvciBubyBjb21wYXRpYmxlIHNvdXJjZSB1bnRpbFxuICAgIC8vIHVzZXIgaW50ZXJhY3Rpb25cblxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18uc3VwcHJlc3NOb3RTdXBwb3J0ZWRFcnJvciAmJiBlcnIgJiYgZXJyLm1lc3NhZ2UgJiYgZXJyLm1lc3NhZ2UgPT09IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5ub3RTdXBwb3J0ZWRNZXNzYWdlKSkge1xuICAgICAgdmFyIHRyaWdnZXJTdXBwcmVzc2VkRXJyb3IgPSBmdW5jdGlvbiB0cmlnZ2VyU3VwcHJlc3NlZEVycm9yKCkge1xuICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9wdGlvbnNfLnN1cHByZXNzTm90U3VwcG9ydGVkRXJyb3IgPSBmYWxzZTtcbiAgICAgIHRoaXMuYW55KFsnY2xpY2snLCAndG91Y2hzdGFydCddLCB0cmlnZ2VyU3VwcHJlc3NlZEVycm9yKTtcbiAgICAgIHRoaXMub25lKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub2ZmKFsnY2xpY2snLCAndG91Y2hzdGFydCddLCB0cmlnZ2VyU3VwcHJlc3NlZEVycm9yKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gcmVzdG9yaW5nIHRvIGRlZmF1bHRcblxuXG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5lcnJvcl8gPSBlcnI7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZXJyb3InKTtcblxuICAgICAgaWYgKHRoaXMuZXJyb3JEaXNwbGF5KSB7XG4gICAgICAgIHRoaXMuZXJyb3JEaXNwbGF5LmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmVycm9yXyA9IG5ldyBNZWRpYUVycm9yKGVycik7IC8vIGFkZCB0aGUgdmpzLWVycm9yIGNsYXNzbmFtZSB0byB0aGUgcGxheWVyXG5cbiAgICB0aGlzLmFkZENsYXNzKCd2anMtZXJyb3InKTsgLy8gbG9nIHRoZSBuYW1lIG9mIHRoZSBlcnJvciB0eXBlIGFuZCBhbnkgbWVzc2FnZVxuICAgIC8vIElFMTEgbG9ncyBcIltvYmplY3Qgb2JqZWN0XVwiIGFuZCByZXF1aXJlZCB5b3UgdG8gZXhwYW5kIG1lc3NhZ2UgdG8gc2VlIGVycm9yIG9iamVjdFxuXG4gICAgbG9nLmVycm9yKFwiKENPREU6XCIgKyB0aGlzLmVycm9yXy5jb2RlICsgXCIgXCIgKyBNZWRpYUVycm9yLmVycm9yVHlwZXNbdGhpcy5lcnJvcl8uY29kZV0gKyBcIilcIiwgdGhpcy5lcnJvcl8ubWVzc2FnZSwgdGhpcy5lcnJvcl8pO1xuICAgIC8qKlxuICAgICAqIEBldmVudCBQbGF5ZXIjZXJyb3JcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXBvcnQgdXNlciBhY3Rpdml0eVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICogICAgICAgIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXBvcnRVc2VyQWN0aXZpdHkgPSBmdW5jdGlvbiByZXBvcnRVc2VyQWN0aXZpdHkoZXZlbnQpIHtcbiAgICB0aGlzLnVzZXJBY3Rpdml0eV8gPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQvc2V0IGlmIHVzZXIgaXMgYWN0aXZlXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjdXNlcmFjdGl2ZVxuICAgKiBAZmlyZXMgUGxheWVyI3VzZXJpbmFjdGl2ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtib29sXVxuICAgKiAgICAgICAgLSB0cnVlIGlmIHRoZSB1c2VyIGlzIGFjdGl2ZVxuICAgKiAgICAgICAgLSBmYWxzZSBpZiB0aGUgdXNlciBpcyBpbmFjdGl2ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZhbHVlIG9mIHVzZXJBY3RpdmUgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZXJBY3RpdmUgPSBmdW5jdGlvbiB1c2VyQWN0aXZlKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy51c2VyQWN0aXZlXztcbiAgICB9XG5cbiAgICBib29sID0gISFib29sO1xuXG4gICAgaWYgKGJvb2wgPT09IHRoaXMudXNlckFjdGl2ZV8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnVzZXJBY3RpdmVfID0gYm9vbDtcblxuICAgIGlmICh0aGlzLnVzZXJBY3RpdmVfKSB7XG4gICAgICB0aGlzLnVzZXJBY3Rpdml0eV8gPSB0cnVlO1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXVzZXItaW5hY3RpdmUnKTtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy11c2VyLWFjdGl2ZScpO1xuICAgICAgLyoqXG4gICAgICAgKiBAZXZlbnQgUGxheWVyI3VzZXJhY3RpdmVcbiAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAqL1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3VzZXJhY3RpdmUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENocm9tZS9TYWZhcmkvSUUgaGF2ZSBidWdzIHdoZXJlIHdoZW4geW91IGNoYW5nZSB0aGUgY3Vyc29yIGl0IGNhblxuICAgIC8vIHRyaWdnZXIgYSBtb3VzZW1vdmUgZXZlbnQuIFRoaXMgY2F1c2VzIGFuIGlzc3VlIHdoZW4geW91J3JlIGhpZGluZ1xuICAgIC8vIHRoZSBjdXJzb3Igd2hlbiB0aGUgdXNlciBpcyBpbmFjdGl2ZSwgYW5kIGEgbW91c2Vtb3ZlIHNpZ25hbHMgdXNlclxuICAgIC8vIGFjdGl2aXR5LiBNYWtpbmcgaXQgaW1wb3NzaWJsZSB0byBnbyBpbnRvIGluYWN0aXZlIG1vZGUuIFNwZWNpZmljYWxseVxuICAgIC8vIHRoaXMgaGFwcGVucyBpbiBmdWxsc2NyZWVuIHdoZW4gd2UgcmVhbGx5IG5lZWQgdG8gaGlkZSB0aGUgY3Vyc29yLlxuICAgIC8vXG4gICAgLy8gV2hlbiB0aGlzIGdldHMgcmVzb2x2ZWQgaW4gQUxMIGJyb3dzZXJzIGl0IGNhbiBiZSByZW1vdmVkXG4gICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwMzA0MVxuXG5cbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgdGhpcy50ZWNoXy5vbmUoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMudXNlckFjdGl2aXR5XyA9IGZhbHNlO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy11c2VyLWFjdGl2ZScpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy11c2VyLWluYWN0aXZlJyk7XG4gICAgLyoqXG4gICAgICogQGV2ZW50IFBsYXllciN1c2VyaW5hY3RpdmVcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3VzZXJpbmFjdGl2ZScpO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0ZW4gZm9yIHVzZXIgYWN0aXZpdHkgYmFzZWQgb24gdGltZW91dCB2YWx1ZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5saXN0ZW5Gb3JVc2VyQWN0aXZpdHlfID0gZnVuY3Rpb24gbGlzdGVuRm9yVXNlckFjdGl2aXR5XygpIHtcbiAgICB2YXIgbW91c2VJblByb2dyZXNzO1xuICAgIHZhciBsYXN0TW92ZVg7XG4gICAgdmFyIGxhc3RNb3ZlWTtcbiAgICB2YXIgaGFuZGxlQWN0aXZpdHkgPSBiaW5kKHRoaXMsIHRoaXMucmVwb3J0VXNlckFjdGl2aXR5KTtcblxuICAgIHZhciBoYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZSkge1xuICAgICAgLy8gIzEwNjggLSBQcmV2ZW50IG1vdXNlbW92ZSBzcGFtbWluZ1xuICAgICAgLy8gQ2hyb21lIEJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM2Njk3MFxuICAgICAgaWYgKGUuc2NyZWVuWCAhPT0gbGFzdE1vdmVYIHx8IGUuc2NyZWVuWSAhPT0gbGFzdE1vdmVZKSB7XG4gICAgICAgIGxhc3RNb3ZlWCA9IGUuc2NyZWVuWDtcbiAgICAgICAgbGFzdE1vdmVZID0gZS5zY3JlZW5ZO1xuICAgICAgICBoYW5kbGVBY3Rpdml0eSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKCkge1xuICAgICAgaGFuZGxlQWN0aXZpdHkoKTsgLy8gRm9yIGFzIGxvbmcgYXMgdGhlIHRoZXkgYXJlIHRvdWNoaW5nIHRoZSBkZXZpY2Ugb3IgaGF2ZSB0aGVpciBtb3VzZSBkb3duLFxuICAgICAgLy8gd2UgY29uc2lkZXIgdGhlbSBhY3RpdmUgZXZlbiBpZiB0aGV5J3JlIG5vdCBtb3ZpbmcgdGhlaXIgZmluZ2VyIG9yIG1vdXNlLlxuICAgICAgLy8gU28gd2Ugd2FudCB0byBjb250aW51ZSB0byB1cGRhdGUgdGhhdCB0aGV5IGFyZSBhY3RpdmVcblxuICAgICAgdGhpcy5jbGVhckludGVydmFsKG1vdXNlSW5Qcm9ncmVzcyk7IC8vIFNldHRpbmcgdXNlckFjdGl2aXR5PXRydWUgbm93IGFuZCBzZXR0aW5nIHRoZSBpbnRlcnZhbCB0byB0aGUgc2FtZSB0aW1lXG4gICAgICAvLyBhcyB0aGUgYWN0aXZpdHlDaGVjayBpbnRlcnZhbCAoMjUwKSBzaG91bGQgZW5zdXJlIHdlIG5ldmVyIG1pc3MgdGhlXG4gICAgICAvLyBuZXh0IGFjdGl2aXR5Q2hlY2tcblxuICAgICAgbW91c2VJblByb2dyZXNzID0gdGhpcy5zZXRJbnRlcnZhbChoYW5kbGVBY3Rpdml0eSwgMjUwKTtcbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKGV2ZW50KSB7XG4gICAgICBoYW5kbGVBY3Rpdml0eSgpOyAvLyBTdG9wIHRoZSBpbnRlcnZhbCB0aGF0IG1haW50YWlucyBhY3Rpdml0eSBpZiB0aGUgbW91c2UvdG91Y2ggaXMgZG93blxuXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwobW91c2VJblByb2dyZXNzKTtcbiAgICB9OyAvLyBBbnkgbW91c2UgbW92ZW1lbnQgd2lsbCBiZSBjb25zaWRlcmVkIHVzZXIgYWN0aXZpdHlcblxuXG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgaGFuZGxlTW91c2VEb3duKTtcbiAgICB0aGlzLm9uKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwKTtcbiAgICB2YXIgY29udHJvbEJhciA9IHRoaXMuZ2V0Q2hpbGQoJ2NvbnRyb2xCYXInKTsgLy8gRml4ZXMgYnVnIG9uIEFuZHJvaWQgJiBpT1Mgd2hlcmUgd2hlbiB0YXBwaW5nIHByb2dyZXNzQmFyICh3aGVuIGNvbnRyb2wgYmFyIGlzIGRpc3BsYXllZClcbiAgICAvLyBjb250cm9sQmFyIHdvdWxkIG5vIGxvbmdlciBiZSBoaWRkZW4gYnkgZGVmYXVsdCB0aW1lb3V0LlxuXG4gICAgaWYgKGNvbnRyb2xCYXIgJiYgIUlTX0lPUyAmJiAhSVNfQU5EUk9JRCkge1xuICAgICAgY29udHJvbEJhci5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLnBsYXllcigpLmNhY2hlXy5pbmFjdGl2aXR5VGltZW91dCA9IHRoaXMucGxheWVyKCkub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQ7XG4gICAgICAgIHRoaXMucGxheWVyKCkub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQgPSAwO1xuICAgICAgfSk7XG4gICAgICBjb250cm9sQmFyLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucGxheWVyKCkub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQgPSB0aGlzLnBsYXllcigpLmNhY2hlXy5pbmFjdGl2aXR5VGltZW91dDtcbiAgICAgIH0pO1xuICAgIH0gLy8gTGlzdGVuIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uXG4gICAgLy8gU2hvdWxkbid0IG5lZWQgdG8gdXNlIGluUHJvZ3Jlc3MgaW50ZXJ2YWwgYmVjYXVzZSBvZiBrZXkgcmVwZWF0XG5cblxuICAgIHRoaXMub24oJ2tleWRvd24nLCBoYW5kbGVBY3Rpdml0eSk7XG4gICAgdGhpcy5vbigna2V5dXAnLCBoYW5kbGVBY3Rpdml0eSk7IC8vIFJ1biBhbiBpbnRlcnZhbCBldmVyeSAyNTAgbWlsbGlzZWNvbmRzIGluc3RlYWQgb2Ygc3R1ZmZpbmcgZXZlcnl0aGluZyBpbnRvXG4gICAgLy8gdGhlIG1vdXNlbW92ZS90b3VjaG1vdmUgZnVuY3Rpb24gaXRzZWxmLCB0byBwcmV2ZW50IHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uLlxuICAgIC8vIGB0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eWAgc2ltcGx5IHNldHMgdGhpcy51c2VyQWN0aXZpdHlfIHRvIHRydWUsIHdoaWNoXG4gICAgLy8gdGhlbiBnZXRzIHBpY2tlZCB1cCBieSB0aGlzIGxvb3BcbiAgICAvLyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvbGVhcm5pbmctZnJvbS10d2l0dGVyL1xuXG4gICAgdmFyIGluYWN0aXZpdHlUaW1lb3V0O1xuICAgIHRoaXMuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIG1vdXNlL3RvdWNoIGFjdGl2aXR5IGhhcyBoYXBwZW5lZFxuICAgICAgaWYgKCF0aGlzLnVzZXJBY3Rpdml0eV8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBSZXNldCB0aGUgYWN0aXZpdHkgdHJhY2tlclxuXG5cbiAgICAgIHRoaXMudXNlckFjdGl2aXR5XyA9IGZhbHNlOyAvLyBJZiB0aGUgdXNlciBzdGF0ZSB3YXMgaW5hY3RpdmUsIHNldCB0aGUgc3RhdGUgdG8gYWN0aXZlXG5cbiAgICAgIHRoaXMudXNlckFjdGl2ZSh0cnVlKTsgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGluYWN0aXZpdHkgdGltZW91dCB0byBzdGFydCB0aGUgdGltZXIgb3ZlclxuXG4gICAgICB0aGlzLmNsZWFyVGltZW91dChpbmFjdGl2aXR5VGltZW91dCk7XG4gICAgICB2YXIgdGltZW91dCA9IHRoaXMub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQ7XG5cbiAgICAgIGlmICh0aW1lb3V0IDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBJbiA8dGltZW91dD4gbWlsbGlzZWNvbmRzLCBpZiBubyBtb3JlIGFjdGl2aXR5IGhhcyBvY2N1cnJlZCB0aGVcbiAgICAgIC8vIHVzZXIgd2lsbCBiZSBjb25zaWRlcmVkIGluYWN0aXZlXG5cblxuICAgICAgaW5hY3Rpdml0eVRpbWVvdXQgPSB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgdGhlIGNhc2Ugd2hlcmUgdGhlIGluYWN0aXZpdHlUaW1lb3V0IGNhbiB0cmlnZ2VyIGp1c3RcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBuZXh0IHVzZXIgYWN0aXZpdHkgaXMgcGlja2VkIHVwIGJ5IHRoZSBhY3Rpdml0eSBjaGVjayBsb29wXG4gICAgICAgIC8vIGNhdXNpbmcgYSBmbGlja2VyXG4gICAgICAgIGlmICghdGhpcy51c2VyQWN0aXZpdHlfKSB7XG4gICAgICAgICAgdGhpcy51c2VyQWN0aXZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGltZW91dCk7XG4gICAgfSwgMjUwKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGUuIEEgcGxheWJhY2sgcmF0ZSBvZlxuICAgKiAxLjAgcmVwcmVzZW50cyBub3JtYWwgc3BlZWQgYW5kIDAuNSB3b3VsZCBpbmRpY2F0ZSBoYWxmLXNwZWVkXG4gICAqIHBsYXliYWNrLCBmb3IgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS1tZWRpYS1wbGF5YmFja3JhdGVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtyYXRlXVxuICAgKiAgICAgICBOZXcgcGxheWJhY2sgcmF0ZSB0byBzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBwbGF5YmFjayByYXRlIHdoZW4gZ2V0dGluZyBvciAxLjBcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheWJhY2tSYXRlID0gZnVuY3Rpb24gcGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICBpZiAocmF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBOT1RFOiB0aGlzLmNhY2hlXy5sYXN0UGxheWJhY2tSYXRlIGlzIHNldCBmcm9tIHRoZSB0ZWNoIGhhbmRsZXJcbiAgICAgIC8vIHRoYXQgaXMgcmVnaXN0ZXJlZCBhYm92ZVxuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFBsYXliYWNrUmF0ZScsIHJhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRlY2hfICYmIHRoaXMudGVjaF8uZmVhdHVyZXNQbGF5YmFja1JhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlXy5sYXN0UGxheWJhY2tSYXRlIHx8IHRoaXMudGVjaEdldF8oJ3BsYXliYWNrUmF0ZScpO1xuICAgIH1cblxuICAgIHJldHVybiAxLjA7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgY3VycmVudCBkZWZhdWx0IHBsYXliYWNrIHJhdGUuIEEgZGVmYXVsdCBwbGF5YmFjayByYXRlIG9mXG4gICAqIDEuMCByZXByZXNlbnRzIG5vcm1hbCBzcGVlZCBhbmQgMC41IHdvdWxkIGluZGljYXRlIGhhbGYtc3BlZWQgcGxheWJhY2ssIGZvciBpbnN0YW5jZS5cbiAgICogZGVmYXVsdFBsYXliYWNrUmF0ZSB3aWxsIG9ubHkgcmVwcmVzZW50IHdoYXQgdGhlIGluaXRpYWwgcGxheWJhY2tSYXRlIG9mIGEgdmlkZW8gd2FzLCBub3RcbiAgICogbm90IHRoZSBjdXJyZW50IHBsYXliYWNrUmF0ZS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjZG9tLW1lZGlhLWRlZmF1bHRwbGF5YmFja3JhdGVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtyYXRlXVxuICAgKiAgICAgICBOZXcgZGVmYXVsdCBwbGF5YmFjayByYXRlIHRvIHNldC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfFBsYXllcn1cbiAgICogICAgICAgICAtIFRoZSBkZWZhdWx0IHBsYXliYWNrIHJhdGUgd2hlbiBnZXR0aW5nIG9yIDEuMFxuICAgKiAgICAgICAgIC0gdGhlIHBsYXllciB3aGVuIHNldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVmYXVsdFBsYXliYWNrUmF0ZSA9IGZ1bmN0aW9uIGRlZmF1bHRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgIGlmIChyYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hDYWxsXygnc2V0RGVmYXVsdFBsYXliYWNrUmF0ZScsIHJhdGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRlY2hfICYmIHRoaXMudGVjaF8uZmVhdHVyZXNQbGF5YmFja1JhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdkZWZhdWx0UGxheWJhY2tSYXRlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEuMDtcbiAgfVxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBhdWRpbyBmbGFnXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gYm9vbFxuICAgKiAgICAgICAgLSB0cnVlIHNpZ25hbHMgdGhhdCB0aGlzIGlzIGFuIGF1ZGlvIHBsYXllclxuICAgKiAgICAgICAgLSBmYWxzZSBzaWduYWxzIHRoYXQgdGhpcyBpcyBub3QgYW4gYXVkaW8gcGxheWVyXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdmFsdWUgb2YgaXNBdWRpbyB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNBdWRpbyA9IGZ1bmN0aW9uIGlzQXVkaW8oYm9vbCkge1xuICAgIGlmIChib29sICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNBdWRpb18gPSAhIWJvb2w7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5pc0F1ZGlvXztcbiAgfVxuICAvKipcbiAgICogQSBoZWxwZXIgbWV0aG9kIGZvciBhZGRpbmcgYSB7QGxpbmsgVGV4dFRyYWNrfSB0byBvdXJcbiAgICoge0BsaW5rIFRleHRUcmFja0xpc3R9LlxuICAgKlxuICAgKiBJbiBhZGRpdGlvbiB0byB0aGUgVzNDIHNldHRpbmdzIHdlIGFsbG93IGFkZGluZyBhZGRpdGlvbmFsIGluZm8gdGhyb3VnaCBvcHRpb25zLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL2h0bWwvd2cvZHJhZnRzL2h0bWwvbWFzdGVyL2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1hZGR0ZXh0dHJhY2tcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtraW5kXVxuICAgKiAgICAgICAgdGhlIGtpbmQgb2YgVGV4dFRyYWNrIHlvdSBhcmUgYWRkaW5nXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxdXG4gICAqICAgICAgICB0aGUgbGFiZWwgdG8gZ2l2ZSB0aGUgVGV4dFRyYWNrIGxhYmVsXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdXG4gICAqICAgICAgICB0aGUgbGFuZ3VhZ2UgdG8gc2V0IG9uIHRoZSBUZXh0VHJhY2tcbiAgICpcbiAgICogQHJldHVybiB7VGV4dFRyYWNrfHVuZGVmaW5lZH1cbiAgICogICAgICAgICB0aGUgVGV4dFRyYWNrIHRoYXQgd2FzIGFkZGVkIG9yIHVuZGVmaW5lZFxuICAgKiAgICAgICAgIGlmIHRoZXJlIGlzIG5vIHRlY2hcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkVGV4dFRyYWNrID0gZnVuY3Rpb24gYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoXy5hZGRUZXh0VHJhY2soa2luZCwgbGFiZWwsIGxhbmd1YWdlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJlbW90ZSB7QGxpbmsgVGV4dFRyYWNrfSBhbmQgYW4ge0BsaW5rIEhUTUxUcmFja0VsZW1lbnR9LiBJdCB3aWxsXG4gICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIHRoZSB2aWRlbyBlbGVtZW50IHdoZW5ldmVyIHRoZSBzb3VyY2UgY2hhbmdlcywgdW5sZXNzXG4gICAqIG1hbnVhbENsZWFudXAgaXMgc2V0IHRvIGZhbHNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgT3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayBIVE1MVHJhY2tFbGVtZW50fSBkdXJpbmcgY3JlYXRpb24uIFNlZVxuICAgKiAgICAgICAge0BsaW5rIEhUTUxUcmFja0VsZW1lbnR9IGZvciBvYmplY3QgcHJvcGVydGllcyB0aGF0IHlvdSBzaG91bGQgdXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttYW51YWxDbGVhbnVwPXRydWVdIGlmIHNldCB0byBmYWxzZSwgdGhlIFRleHRUcmFjayB3aWxsIGJlXG4gICAqXG4gICAqIEByZXR1cm4ge0h0bWxUcmFja0VsZW1lbnR9XG4gICAqICAgICAgICAgdGhlIEhUTUxUcmFja0VsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZCBhbmQgYWRkZWRcbiAgICogICAgICAgICB0byB0aGUgSHRtbFRyYWNrRWxlbWVudExpc3QgYW5kIHRoZSByZW1vdGVcbiAgICogICAgICAgICBUZXh0VHJhY2tMaXN0XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBcIm1hbnVhbENsZWFudXBcIiBwYXJhbWV0ZXIgd2lsbCBkZWZhdWx0XG4gICAqICAgICAgICAgICAgIHRvIFwiZmFsc2VcIiBpbiB1cGNvbWluZyB2ZXJzaW9ucyBvZiBWaWRlby5qc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSZW1vdGVUZXh0VHJhY2sgPSBmdW5jdGlvbiBhZGRSZW1vdGVUZXh0VHJhY2sob3B0aW9ucywgbWFudWFsQ2xlYW51cCkge1xuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoXy5hZGRSZW1vdGVUZXh0VHJhY2sob3B0aW9ucywgbWFudWFsQ2xlYW51cCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSByZW1vdGUge0BsaW5rIFRleHRUcmFja30gZnJvbSB0aGUgcmVzcGVjdGl2ZVxuICAgKiB7QGxpbmsgVGV4dFRyYWNrTGlzdH0gYW5kIHtAbGluayBIdG1sVHJhY2tFbGVtZW50TGlzdH0uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFja1xuICAgKiAgICAgICAgUmVtb3RlIHtAbGluayBUZXh0VHJhY2t9IHRvIHJlbW92ZVxuICAgKlxuICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAqICAgICAgICAgZG9lcyBub3QgcmV0dXJuIGFueXRoaW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVJlbW90ZVRleHRUcmFjayA9IGZ1bmN0aW9uIHJlbW92ZVJlbW90ZVRleHRUcmFjayhvYmopIHtcbiAgICBpZiAob2JqID09PSB2b2lkIDApIHtcbiAgICAgIG9iaiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICB0cmFjayA9IF9vYmoudHJhY2s7XG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICB0cmFjayA9IG9iajtcbiAgICB9IC8vIGRlc3RydWN0dXJlIHRoZSBpbnB1dCBpbnRvIGFuIG9iamVjdCB3aXRoIGEgdHJhY2sgYXJndW1lbnQsIGRlZmF1bHRpbmcgdG8gYXJndW1lbnRzWzBdXG4gICAgLy8gZGVmYXVsdCB0aGUgd2hvbGUgYXJndW1lbnQgdG8gYW4gZW1wdHkgb2JqZWN0IGlmIG5vdGhpbmcgd2FzIHBhc3NlZCBpblxuXG5cbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgcmV0dXJuIHRoaXMudGVjaF8ucmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYXZhaWxhYmxlIG1lZGlhIHBsYXliYWNrIHF1YWxpdHkgbWV0cmljcyBhcyBzcGVjaWZpZWQgYnkgdGhlIFczQydzIE1lZGlhXG4gICAqIFBsYXliYWNrIFF1YWxpdHkgQVBJLlxuICAgKlxuICAgKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3dpY2cuZ2l0aHViLmlvL21lZGlhLXBsYXliYWNrLXF1YWxpdHl9XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdHx1bmRlZmluZWR9XG4gICAqICAgICAgICAgQW4gb2JqZWN0IHdpdGggc3VwcG9ydGVkIG1lZGlhIHBsYXliYWNrIHF1YWxpdHkgbWV0cmljcyBvciB1bmRlZmluZWQgaWYgdGhlcmVcbiAgICogICAgICAgICBpcyBubyB0ZWNoIG9yIHRoZSB0ZWNoIGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5ID0gZnVuY3Rpb24gZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ2dldFZpZGVvUGxheWJhY2tRdWFsaXR5Jyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB2aWRlbyB3aWR0aFxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgY3VycmVudCB2aWRlbyB3aWR0aFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52aWRlb1dpZHRoID0gZnVuY3Rpb24gdmlkZW9XaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLnZpZGVvV2lkdGggJiYgdGhpcy50ZWNoXy52aWRlb1dpZHRoKCkgfHwgMDtcbiAgfVxuICAvKipcbiAgICogR2V0IHZpZGVvIGhlaWdodFxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgY3VycmVudCB2aWRlbyBoZWlnaHRcbiAgICovXG4gIDtcblxuICBfcHJvdG8udmlkZW9IZWlnaHQgPSBmdW5jdGlvbiB2aWRlb0hlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLnZpZGVvSGVpZ2h0ICYmIHRoaXMudGVjaF8udmlkZW9IZWlnaHQoKSB8fCAwO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcGxheWVyJ3MgbGFuZ3VhZ2UgY29kZVxuICAgKiBOT1RFOiBUaGUgbGFuZ3VhZ2Ugc2hvdWxkIGJlIHNldCBpbiB0aGUgcGxheWVyIG9wdGlvbnMgaWYgeW91IHdhbnQgdGhlXG4gICAqIHRoZSBjb250cm9scyB0byBiZSBidWlsdCB3aXRoIGEgc3BlY2lmaWMgbGFuZ3VhZ2UuIENoYW5naW5nIHRoZSBsYW5ndWFnZVxuICAgKiBsYXRlciB3aWxsIG5vdCB1cGRhdGUgY29udHJvbHMgdGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXVxuICAgKiAgICAgICAgdGhlIGxhbmd1YWdlIGNvZGUgdG8gc2V0IHRoZSBwbGF5ZXIgdG9cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IGxhbmd1YWdlIGNvZGUgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxhbmd1YWdlID0gZnVuY3Rpb24gbGFuZ3VhZ2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlXztcbiAgICB9XG5cbiAgICB0aGlzLmxhbmd1YWdlXyA9IFN0cmluZyhjb2RlKS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHBsYXllcidzIGxhbmd1YWdlIGRpY3Rpb25hcnlcbiAgICogTWVyZ2UgZXZlcnkgdGltZSwgYmVjYXVzZSBhIG5ld2x5IGFkZGVkIHBsdWdpbiBtaWdodCBjYWxsIHZpZGVvanMuYWRkTGFuZ3VhZ2UoKSBhdCBhbnkgdGltZVxuICAgKiBMYW5ndWFnZXMgc3BlY2lmaWVkIGRpcmVjdGx5IGluIHRoZSBwbGF5ZXIgb3B0aW9ucyBoYXZlIHByZWNlZGVuY2VcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqICAgICAgICAgQW4gYXJyYXkgb2Ygb2Ygc3VwcG9ydGVkIGxhbmd1YWdlc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sYW5ndWFnZXMgPSBmdW5jdGlvbiBsYW5ndWFnZXMoKSB7XG4gICAgcmV0dXJuIG1lcmdlT3B0aW9ucyhQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfLmxhbmd1YWdlcywgdGhpcy5sYW5ndWFnZXNfKTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHJlcGVyZXNlbnRpbmcgdGhlIGN1cnJlbnQgdHJhY2tcbiAgICogaW5mb3JtYXRpb24uICoqRE9FUyBub3QgcmV0dXJuIGl0IGFzIEpTT04qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqICAgICAgICAgT2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBvZiB0cmFjayBpbmZvXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnNfKTtcbiAgICB2YXIgdHJhY2tzID0gb3B0aW9ucy50cmFja3M7XG4gICAgb3B0aW9ucy50cmFja3MgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07IC8vIGRlZXAgbWVyZ2UgdHJhY2tzIGFuZCBudWxsIG91dCBwbGF5ZXIgc28gbm8gY2lyY3VsYXIgcmVmZXJlbmNlc1xuXG4gICAgICB0cmFjayA9IG1lcmdlT3B0aW9ucyh0cmFjayk7XG4gICAgICB0cmFjay5wbGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgICBvcHRpb25zLnRyYWNrc1tpXSA9IHRyYWNrO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc2ltcGxlIG1vZGFsIGRpYWxvZyAoYW4gaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBNb2RhbERpYWxvZ31cbiAgICogY29tcG9uZW50KSB0aGF0IGltbWVkaWF0ZWx5IG92ZXJsYXlzIHRoZSBwbGF5ZXIgd2l0aCBhcmJpdHJhcnlcbiAgICogY29udGVudCBhbmQgcmVtb3ZlcyBpdHNlbGYgd2hlbiBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufEVsZW1lbnR8QXJyYXl8bnVsbH0gY29udGVudFxuICAgKiAgICAgICAgU2FtZSBhcyB7QGxpbmsgTW9kYWxEaWFsb2cjY29udGVudH0ncyBwYXJhbSBvZiB0aGUgc2FtZSBuYW1lLlxuICAgKiAgICAgICAgVGhlIG1vc3Qgc3RyYWlnaHQtZm9yd2FyZCB1c2FnZSBpcyB0byBwcm92aWRlIGEgc3RyaW5nIG9yIERPTVxuICAgKiAgICAgICAgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgRXh0cmEgb3B0aW9ucyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbiB0byB0aGUge0BsaW5rIE1vZGFsRGlhbG9nfS5cbiAgICpcbiAgICogQHJldHVybiB7TW9kYWxEaWFsb2d9XG4gICAqICAgICAgICAgdGhlIHtAbGluayBNb2RhbERpYWxvZ30gdGhhdCB3YXMgY3JlYXRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVNb2RhbCA9IGZ1bmN0aW9uIGNyZWF0ZU1vZGFsKGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmNvbnRlbnQgPSBjb250ZW50IHx8ICcnO1xuICAgIHZhciBtb2RhbCA9IG5ldyBNb2RhbERpYWxvZyh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLmFkZENoaWxkKG1vZGFsKTtcbiAgICBtb2RhbC5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMTQucmVtb3ZlQ2hpbGQobW9kYWwpO1xuICAgIH0pO1xuICAgIG1vZGFsLm9wZW4oKTtcbiAgICByZXR1cm4gbW9kYWw7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZSBicmVha3BvaW50IGNsYXNzZXMgd2hlbiB0aGUgcGxheWVyIHJlc2l6ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XyA9IGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XygpIHtcbiAgICBpZiAoIXRoaXMucmVzcG9uc2l2ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRCcmVha3BvaW50ID0gdGhpcy5jdXJyZW50QnJlYWtwb2ludCgpO1xuICAgIHZhciBjdXJyZW50V2lkdGggPSB0aGlzLmN1cnJlbnRXaWR0aCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBCUkVBS1BPSU5UX09SREVSLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2FuZGlkYXRlQnJlYWtwb2ludCA9IEJSRUFLUE9JTlRfT1JERVJbaV07XG4gICAgICB2YXIgbWF4V2lkdGggPSB0aGlzLmJyZWFrcG9pbnRzX1tjYW5kaWRhdGVCcmVha3BvaW50XTtcblxuICAgICAgaWYgKGN1cnJlbnRXaWR0aCA8PSBtYXhXaWR0aCkge1xuICAgICAgICAvLyBUaGUgY3VycmVudCBicmVha3BvaW50IGRpZCBub3QgY2hhbmdlLCBub3RoaW5nIHRvIGRvLlxuICAgICAgICBpZiAoY3VycmVudEJyZWFrcG9pbnQgPT09IGNhbmRpZGF0ZUJyZWFrcG9pbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gT25seSByZW1vdmUgYSBjbGFzcyBpZiB0aGVyZSBpcyBhIGN1cnJlbnQgYnJlYWtwb2ludC5cblxuXG4gICAgICAgIGlmIChjdXJyZW50QnJlYWtwb2ludCkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoQlJFQUtQT0lOVF9DTEFTU0VTW2N1cnJlbnRCcmVha3BvaW50XSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZENsYXNzKEJSRUFLUE9JTlRfQ0xBU1NFU1tjYW5kaWRhdGVCcmVha3BvaW50XSk7XG4gICAgICAgIHRoaXMuYnJlYWtwb2ludF8gPSBjYW5kaWRhdGVCcmVha3BvaW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgYnJlYWtwb2ludC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQ3VycmVudEJyZWFrcG9pbnRfID0gZnVuY3Rpb24gcmVtb3ZlQ3VycmVudEJyZWFrcG9pbnRfKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLmN1cnJlbnRCcmVha3BvaW50Q2xhc3MoKTtcbiAgICB0aGlzLmJyZWFrcG9pbnRfID0gJyc7XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IGJyZWFrcG9pbnRzIG9uIHRoZSBwbGF5ZXIuXG4gICAqXG4gICAqIENhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBhbiBvYmplY3Qgb3IgYHRydWVgIHdpbGwgcmVtb3ZlIGFueSBwcmV2aW91c1xuICAgKiBjdXN0b20gYnJlYWtwb2ludHMgYW5kIHN0YXJ0IGZyb20gdGhlIGRlZmF1bHRzIGFnYWluLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R8Ym9vbGVhbn0gW2JyZWFrcG9pbnRzXVxuICAgKiAgICAgICAgIElmIGFuIG9iamVjdCBpcyBnaXZlbiwgaXQgY2FuIGJlIHVzZWQgdG8gcHJvdmlkZSBjdXN0b21cbiAgICogICAgICAgICBicmVha3BvaW50cy4gSWYgYHRydWVgIGlzIGdpdmVuLCB3aWxsIHNldCBkZWZhdWx0IGJyZWFrcG9pbnRzLlxuICAgKiAgICAgICAgIElmIHRoaXMgYXJndW1lbnQgaXMgbm90IGdpdmVuLCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnRcbiAgICogICAgICAgICBicmVha3BvaW50cy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMudGlueV1cbiAgICogICAgICAgICBUaGUgbWF4aW11bSB3aWR0aCBmb3IgdGhlIFwidmpzLWxheW91dC10aW55XCIgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcn0gW2JyZWFrcG9pbnRzLnhzbWFsbF1cbiAgICogICAgICAgICBUaGUgbWF4aW11bSB3aWR0aCBmb3IgdGhlIFwidmpzLWxheW91dC14LXNtYWxsXCIgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcn0gW2JyZWFrcG9pbnRzLnNtYWxsXVxuICAgKiAgICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGUgXCJ2anMtbGF5b3V0LXNtYWxsXCIgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcn0gW2JyZWFrcG9pbnRzLm1lZGl1bV1cbiAgICogICAgICAgICBUaGUgbWF4aW11bSB3aWR0aCBmb3IgdGhlIFwidmpzLWxheW91dC1tZWRpdW1cIiBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMubGFyZ2VdXG4gICAqICAgICAgICAgVGhlIG1heGltdW0gd2lkdGggZm9yIHRoZSBcInZqcy1sYXlvdXQtbGFyZ2VcIiBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMueGxhcmdlXVxuICAgKiAgICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGUgXCJ2anMtbGF5b3V0LXgtbGFyZ2VcIiBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMuaHVnZV1cbiAgICogICAgICAgICBUaGUgbWF4aW11bSB3aWR0aCBmb3IgdGhlIFwidmpzLWxheW91dC1odWdlXCIgY2xhc3MuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBBbiBvYmplY3QgbWFwcGluZyBicmVha3BvaW50IG5hbWVzIHRvIG1heGltdW0gd2lkdGggdmFsdWVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5icmVha3BvaW50cyA9IGZ1bmN0aW9uIGJyZWFrcG9pbnRzKF9icmVha3BvaW50cykge1xuICAgIC8vIFVzZWQgYXMgYSBnZXR0ZXIuXG4gICAgaWYgKF9icmVha3BvaW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYXNzaWduKHRoaXMuYnJlYWtwb2ludHNfKTtcbiAgICB9XG5cbiAgICB0aGlzLmJyZWFrcG9pbnRfID0gJyc7XG4gICAgdGhpcy5icmVha3BvaW50c18gPSBhc3NpZ24oe30sIERFRkFVTFRfQlJFQUtQT0lOVFMsIF9icmVha3BvaW50cyk7IC8vIFdoZW4gYnJlYWtwb2ludCBkZWZpbml0aW9ucyBjaGFuZ2UsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBjdXJyZW50bHlcbiAgICAvLyBzZWxlY3RlZCBicmVha3BvaW50LlxuXG4gICAgdGhpcy51cGRhdGVDdXJyZW50QnJlYWtwb2ludF8oKTsgLy8gQ2xvbmUgdGhlIGJyZWFrcG9pbnRzIGJlZm9yZSByZXR1cm5pbmcuXG5cbiAgICByZXR1cm4gYXNzaWduKHRoaXMuYnJlYWtwb2ludHNfKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGlzIHBsYXllciBzaG91bGQgYWRqdXN0XG4gICAqIGl0cyBVSSBiYXNlZCBvbiBpdHMgZGltZW5zaW9ucy5cbiAgICpcbiAgICogQHBhcmFtICB7Ym9vbGVhbn0gdmFsdWVcbiAgICogICAgICAgICBTaG91bGQgYmUgYHRydWVgIGlmIHRoZSBwbGF5ZXIgc2hvdWxkIGFkanVzdCBpdHMgVUkgYmFzZWQgb24gaXRzXG4gICAqICAgICAgICAgZGltZW5zaW9uczsgb3RoZXJ3aXNlLCBzaG91bGQgYmUgYGZhbHNlYC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBXaWxsIGJlIGB0cnVlYCBpZiB0aGlzIHBsYXllciBzaG91bGQgYWRqdXN0IGl0cyBVSSBiYXNlZCBvbiBpdHNcbiAgICogICAgICAgICBkaW1lbnNpb25zOyBvdGhlcndpc2UsIHdpbGwgYmUgYGZhbHNlYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzcG9uc2l2ZSA9IGZ1bmN0aW9uIHJlc3BvbnNpdmUodmFsdWUpIHtcbiAgICAvLyBVc2VkIGFzIGEgZ2V0dGVyLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25zaXZlXztcbiAgICB9XG5cbiAgICB2YWx1ZSA9IEJvb2xlYW4odmFsdWUpO1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5yZXNwb25zaXZlXzsgLy8gTm90aGluZyBjaGFuZ2VkLlxuXG4gICAgaWYgKHZhbHVlID09PSBjdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGUgdmFsdWUgYWN0dWFsbHkgY2hhbmdlZCwgc2V0IGl0LlxuXG5cbiAgICB0aGlzLnJlc3BvbnNpdmVfID0gdmFsdWU7IC8vIFN0YXJ0IGxpc3RlbmluZyBmb3IgYnJlYWtwb2ludHMgYW5kIHNldCB0aGUgaW5pdGlhbCBicmVha3BvaW50IGlmIHRoZVxuICAgIC8vIHBsYXllciBpcyBub3cgcmVzcG9uc2l2ZS5cblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5vbigncGxheWVycmVzaXplJywgdGhpcy51cGRhdGVDdXJyZW50QnJlYWtwb2ludF8pO1xuICAgICAgdGhpcy51cGRhdGVDdXJyZW50QnJlYWtwb2ludF8oKTsgLy8gU3RvcCBsaXN0ZW5pbmcgZm9yIGJyZWFrcG9pbnRzIGlmIHRoZSBwbGF5ZXIgaXMgbm8gbG9uZ2VyIHJlc3BvbnNpdmUuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2ZmKCdwbGF5ZXJyZXNpemUnLCB0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50Xyk7XG4gICAgICB0aGlzLnJlbW92ZUN1cnJlbnRCcmVha3BvaW50XygpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgYnJlYWtwb2ludCBuYW1lLCBpZiBhbnkuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBJZiB0aGVyZSBpcyBjdXJyZW50bHkgYSBicmVha3BvaW50IHNldCwgcmV0dXJucyBhIHRoZSBrZXkgZnJvbSB0aGVcbiAgICogICAgICAgICBicmVha3BvaW50cyBvYmplY3QgbWF0Y2hpbmcgaXQuIE90aGVyd2lzZSwgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRCcmVha3BvaW50ID0gZnVuY3Rpb24gY3VycmVudEJyZWFrcG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnJlYWtwb2ludF87XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBicmVha3BvaW50IGNsYXNzIG5hbWUuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgbWF0Y2hpbmcgY2xhc3MgbmFtZSAoZS5nLiBgXCJ2anMtbGF5b3V0LXRpbnlcImAgb3JcbiAgICogICAgICAgICBgXCJ2anMtbGF5b3V0LWxhcmdlXCJgKSBmb3IgdGhlIGN1cnJlbnQgYnJlYWtwb2ludC4gRW1wdHkgc3RyaW5nIGlmXG4gICAqICAgICAgICAgdGhlcmUgaXMgbm8gY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jdXJyZW50QnJlYWtwb2ludENsYXNzID0gZnVuY3Rpb24gY3VycmVudEJyZWFrcG9pbnRDbGFzcygpIHtcbiAgICByZXR1cm4gQlJFQUtQT0lOVF9DTEFTU0VTW3RoaXMuYnJlYWtwb2ludF9dIHx8ICcnO1xuICB9XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdGhhdCBkZXNjcmliZXMgYSBzaW5nbGUgcGllY2Ugb2YgbWVkaWEuXG4gICAqXG4gICAqIFByb3BlcnRpZXMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhpcyB0eXBlIGRlc2NyaXB0aW9uIHdpbGwgYmUgcmV0YWluZWQ7IHNvLFxuICAgKiB0aGlzIGNhbiBiZSB2aWV3ZWQgYXMgYSBnZW5lcmljIG1ldGFkYXRhIHN0b3JhZ2UgbWVjaGFuaXNtIGFzIHdlbGwuXG4gICAqXG4gICAqIEBzZWUgICAgICB7QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9tZWRpYXNlc3Npb24vI3RoZS1tZWRpYW1ldGFkYXRhLWludGVyZmFjZX1cbiAgICogQHR5cGVkZWYgIHtPYmplY3R9IFBsYXllcn5NZWRpYU9iamVjdFxuICAgKlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2FsYnVtXVxuICAgKiAgICAgICAgICAgVW51c2VkLCBleGNlcHQgaWYgdGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIHRoZSBgTWVkaWFTZXNzaW9uYFxuICAgKiAgICAgICAgICAgQVBJLlxuICAgKlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2FydGlzdF1cbiAgICogICAgICAgICAgIFVudXNlZCwgZXhjZXB0IGlmIHRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byB0aGUgYE1lZGlhU2Vzc2lvbmBcbiAgICogICAgICAgICAgIEFQSS5cbiAgICpcbiAgICogQHByb3BlcnR5IHtPYmplY3RbXX0gW2FydHdvcmtdXG4gICAqICAgICAgICAgICBVbnVzZWQsIGV4Y2VwdCBpZiB0aGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGBNZWRpYVNlc3Npb25gXG4gICAqICAgICAgICAgICBBUEkuIElmIG5vdCBzcGVjaWZpZWQsIHdpbGwgYmUgcG9wdWxhdGVkIHZpYSB0aGUgYHBvc3RlcmAsIGlmXG4gICAqICAgICAgICAgICBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcG9zdGVyXVxuICAgKiAgICAgICAgICAgVVJMIHRvIGFuIGltYWdlIHRoYXQgd2lsbCBkaXNwbGF5IGJlZm9yZSBwbGF5YmFjay5cbiAgICpcbiAgICogQHByb3BlcnR5IHtUZWNoflNvdXJjZU9iamVjdHxUZWNoflNvdXJjZU9iamVjdFtdfHN0cmluZ30gW3NyY11cbiAgICogICAgICAgICAgIEEgc2luZ2xlIHNvdXJjZSBvYmplY3QsIGFuIGFycmF5IG9mIHNvdXJjZSBvYmplY3RzLCBvciBhIHN0cmluZ1xuICAgKiAgICAgICAgICAgcmVmZXJlbmNpbmcgYSBVUkwgdG8gYSBtZWRpYSBzb3VyY2UuIEl0IGlzIF9oaWdobHkgcmVjb21tZW5kZWRfXG4gICAqICAgICAgICAgICB0aGF0IGFuIG9iamVjdCBvciBhcnJheSBvZiBvYmplY3RzIGlzIHVzZWQgaGVyZSwgc28gdGhhdCBzb3VyY2VcbiAgICogICAgICAgICAgIHNlbGVjdGlvbiBhbGdvcml0aG1zIGNhbiB0YWtlIHRoZSBgdHlwZWAgaW50byBhY2NvdW50LlxuICAgKlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3RpdGxlXVxuICAgKiAgICAgICAgICAgVW51c2VkLCBleGNlcHQgaWYgdGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIHRoZSBgTWVkaWFTZXNzaW9uYFxuICAgKiAgICAgICAgICAgQVBJLlxuICAgKlxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbdGV4dFRyYWNrc11cbiAgICogICAgICAgICAgIEFuIGFycmF5IG9mIG9iamVjdHMgdG8gYmUgdXNlZCB0byBjcmVhdGUgdGV4dCB0cmFja3MsIGZvbGxvd2luZ1xuICAgKiAgICAgICAgICAgdGhlIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUwL2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI3RoZS10cmFjay1lbGVtZW50fG5hdGl2ZSB0cmFjayBlbGVtZW50IGZvcm1hdH0uXG4gICAqICAgICAgICAgICBGb3IgZWFzZSBvZiByZW1vdmFsLCB0aGVzZSB3aWxsIGJlIGNyZWF0ZWQgYXMgXCJyZW1vdGVcIiB0ZXh0XG4gICAqICAgICAgICAgICB0cmFja3MgYW5kIHNldCB0byBhdXRvbWF0aWNhbGx5IGNsZWFuIHVwIG9uIHNvdXJjZSBjaGFuZ2VzLlxuICAgKlxuICAgKiAgICAgICAgICAgVGhlc2Ugb2JqZWN0cyBtYXkgaGF2ZSBwcm9wZXJ0aWVzIGxpa2UgYHNyY2AsIGBraW5kYCwgYGxhYmVsYCxcbiAgICogICAgICAgICAgIGFuZCBgbGFuZ3VhZ2VgLCBzZWUge0BsaW5rIFRlY2gjY3JlYXRlUmVtb3RlVGV4dFRyYWNrfS5cbiAgICovXG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlIHRoZSBwbGF5ZXIgdXNpbmcgYSB7QGxpbmsgUGxheWVyfk1lZGlhT2JqZWN0fE1lZGlhT2JqZWN0fS5cbiAgICpcbiAgICogQHBhcmFtICB7UGxheWVyfk1lZGlhT2JqZWN0fSBtZWRpYVxuICAgKiAgICAgICAgIEEgbWVkaWEgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gcmVhZHlcbiAgICogICAgICAgICBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBwbGF5ZXIgaXMgcmVhZHkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvYWRNZWRpYSA9IGZ1bmN0aW9uIGxvYWRNZWRpYShtZWRpYSwgcmVhZHkpIHtcbiAgICB2YXIgX3RoaXMxNSA9IHRoaXM7XG5cbiAgICBpZiAoIW1lZGlhIHx8IHR5cGVvZiBtZWRpYSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0KCk7IC8vIENsb25lIHRoZSBtZWRpYSBvYmplY3Qgc28gaXQgY2Fubm90IGJlIG11dGF0ZWQgZnJvbSBvdXRzaWRlLlxuXG4gICAgdGhpcy5jYWNoZV8ubWVkaWEgPSBtZXJnZU9wdGlvbnMobWVkaWEpO1xuICAgIHZhciBfdGhpcyRjYWNoZV8kbWVkaWEgPSB0aGlzLmNhY2hlXy5tZWRpYSxcbiAgICAgICAgYXJ0d29yayA9IF90aGlzJGNhY2hlXyRtZWRpYS5hcnR3b3JrLFxuICAgICAgICBwb3N0ZXIgPSBfdGhpcyRjYWNoZV8kbWVkaWEucG9zdGVyLFxuICAgICAgICBzcmMgPSBfdGhpcyRjYWNoZV8kbWVkaWEuc3JjLFxuICAgICAgICB0ZXh0VHJhY2tzID0gX3RoaXMkY2FjaGVfJG1lZGlhLnRleHRUcmFja3M7IC8vIElmIGBhcnR3b3JrYCBpcyBub3QgZ2l2ZW4sIGNyZWF0ZSBpdCB1c2luZyBgcG9zdGVyYC5cblxuICAgIGlmICghYXJ0d29yayAmJiBwb3N0ZXIpIHtcbiAgICAgIHRoaXMuY2FjaGVfLm1lZGlhLmFydHdvcmsgPSBbe1xuICAgICAgICBzcmM6IHBvc3RlcixcbiAgICAgICAgdHlwZTogZ2V0TWltZXR5cGUocG9zdGVyKVxuICAgICAgfV07XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhpcy5zcmMoc3JjKTtcbiAgICB9XG5cbiAgICBpZiAocG9zdGVyKSB7XG4gICAgICB0aGlzLnBvc3Rlcihwb3N0ZXIpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHRleHRUcmFja3MpKSB7XG4gICAgICB0ZXh0VHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHR0KSB7XG4gICAgICAgIHJldHVybiBfdGhpczE1LmFkZFJlbW90ZVRleHRUcmFjayh0dCwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZWFkeShyZWFkeSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIGNsb25lIG9mIHRoZSBjdXJyZW50IHtAbGluayBQbGF5ZXJ+TWVkaWFPYmplY3R9IGZvciB0aGlzIHBsYXllci5cbiAgICpcbiAgICogSWYgdGhlIGBsb2FkTWVkaWFgIG1ldGhvZCBoYXMgbm90IGJlZW4gdXNlZCwgd2lsbCBhdHRlbXB0IHRvIHJldHVybiBhXG4gICAqIHtAbGluayBQbGF5ZXJ+TWVkaWFPYmplY3R9IGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn5NZWRpYU9iamVjdH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0TWVkaWEgPSBmdW5jdGlvbiBnZXRNZWRpYSgpIHtcbiAgICBpZiAoIXRoaXMuY2FjaGVfLm1lZGlhKSB7XG4gICAgICB2YXIgcG9zdGVyID0gdGhpcy5wb3N0ZXIoKTtcbiAgICAgIHZhciBzcmMgPSB0aGlzLmN1cnJlbnRTb3VyY2VzKCk7XG4gICAgICB2YXIgdGV4dFRyYWNrcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0aGlzLnJlbW90ZVRleHRUcmFja3MoKSwgZnVuY3Rpb24gKHR0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogdHQua2luZCxcbiAgICAgICAgICBsYWJlbDogdHQubGFiZWwsXG4gICAgICAgICAgbGFuZ3VhZ2U6IHR0Lmxhbmd1YWdlLFxuICAgICAgICAgIHNyYzogdHQuc3JjXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHZhciBtZWRpYSA9IHtcbiAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgIHRleHRUcmFja3M6IHRleHRUcmFja3NcbiAgICAgIH07XG5cbiAgICAgIGlmIChwb3N0ZXIpIHtcbiAgICAgICAgbWVkaWEucG9zdGVyID0gcG9zdGVyO1xuICAgICAgICBtZWRpYS5hcnR3b3JrID0gW3tcbiAgICAgICAgICBzcmM6IG1lZGlhLnBvc3RlcixcbiAgICAgICAgICB0eXBlOiBnZXRNaW1ldHlwZShtZWRpYS5wb3N0ZXIpXG4gICAgICAgIH1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVkaWE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlT3B0aW9ucyh0aGlzLmNhY2hlXy5tZWRpYSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGFnIHNldHRpbmdzXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gdGFnXG4gICAqICAgICAgICBUaGUgcGxheWVyIHRhZ1xuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqICAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBzZXR0aW5nc1xuICAgKiAgICAgICAgIGZvciBhIHBsYXllciB0YWdcbiAgICovXG4gIDtcblxuICBQbGF5ZXIuZ2V0VGFnU2V0dGluZ3MgPSBmdW5jdGlvbiBnZXRUYWdTZXR0aW5ncyh0YWcpIHtcbiAgICB2YXIgYmFzZU9wdGlvbnMgPSB7XG4gICAgICBzb3VyY2VzOiBbXSxcbiAgICAgIHRyYWNrczogW11cbiAgICB9O1xuICAgIHZhciB0YWdPcHRpb25zID0gZ2V0QXR0cmlidXRlcyh0YWcpO1xuICAgIHZhciBkYXRhU2V0dXAgPSB0YWdPcHRpb25zWydkYXRhLXNldHVwJ107XG5cbiAgICBpZiAoaGFzQ2xhc3ModGFnLCAndmpzLWZpbGwnKSkge1xuICAgICAgdGFnT3B0aW9ucy5maWxsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzQ2xhc3ModGFnLCAndmpzLWZsdWlkJykpIHtcbiAgICAgIHRhZ09wdGlvbnMuZmx1aWQgPSB0cnVlO1xuICAgIH0gLy8gQ2hlY2sgaWYgZGF0YS1zZXR1cCBhdHRyIGV4aXN0cy5cblxuXG4gICAgaWYgKGRhdGFTZXR1cCAhPT0gbnVsbCkge1xuICAgICAgLy8gUGFyc2Ugb3B0aW9ucyBKU09OXG4gICAgICAvLyBJZiBlbXB0eSBzdHJpbmcsIG1ha2UgaXQgYSBwYXJzYWJsZSBqc29uIG9iamVjdC5cbiAgICAgIHZhciBfc2FmZVBhcnNlVHVwbGUgPSBzYWZlUGFyc2VUdXBsZShkYXRhU2V0dXAgfHwgJ3t9JyksXG4gICAgICAgICAgZXJyID0gX3NhZmVQYXJzZVR1cGxlWzBdLFxuICAgICAgICAgIGRhdGEgPSBfc2FmZVBhcnNlVHVwbGVbMV07XG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbG9nLmVycm9yKGVycik7XG4gICAgICB9XG5cbiAgICAgIGFzc2lnbih0YWdPcHRpb25zLCBkYXRhKTtcbiAgICB9XG5cbiAgICBhc3NpZ24oYmFzZU9wdGlvbnMsIHRhZ09wdGlvbnMpOyAvLyBHZXQgdGFnIGNoaWxkcmVuIHNldHRpbmdzXG5cbiAgICBpZiAodGFnLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGFnLmNoaWxkTm9kZXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldOyAvLyBDaGFuZ2UgY2FzZSBuZWVkZWQ6IGh0dHA6Ly9lam9obi5vcmcvYmxvZy9ub2RlbmFtZS1jYXNlLXNlbnNpdGl2aXR5L1xuXG4gICAgICAgIHZhciBjaGlsZE5hbWUgPSBjaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChjaGlsZE5hbWUgPT09ICdzb3VyY2UnKSB7XG4gICAgICAgICAgYmFzZU9wdGlvbnMuc291cmNlcy5wdXNoKGdldEF0dHJpYnV0ZXMoY2hpbGQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5hbWUgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICBiYXNlT3B0aW9ucy50cmFja3MucHVzaChnZXRBdHRyaWJ1dGVzKGNoaWxkKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZU9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIG9yIG5vdCBmbGV4Ym94IGlzIHN1cHBvcnRlZFxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gdHJ1ZSBpZiBmbGV4Ym94IGlzIHN1cHBvcnRlZFxuICAgKiAgICAgICAgIC0gZmFsc2UgaWYgZmxleGJveCBpcyBub3Qgc3VwcG9ydGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZsZXhOb3RTdXBwb3J0ZWRfID0gZnVuY3Rpb24gZmxleE5vdFN1cHBvcnRlZF8oKSB7XG4gICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7IC8vIE5vdGU6IFdlIGRvbid0IGFjdHVhbGx5IHVzZSBmbGV4QmFzaXMgKG9yIGZsZXhPcmRlciksIGJ1dCBpdCdzIG9uZSBvZiB0aGUgbW9yZVxuICAgIC8vIGNvbW1vbiBmbGV4IGZlYXR1cmVzIHRoYXQgd2UgY2FuIHJlbHkgb24gd2hlbiBjaGVja2luZyBmb3IgZmxleCBzdXBwb3J0LlxuXG4gICAgcmV0dXJuICEoJ2ZsZXhCYXNpcycgaW4gZWxlbS5zdHlsZSB8fCAnd2Via2l0RmxleEJhc2lzJyBpbiBlbGVtLnN0eWxlIHx8ICdtb3pGbGV4QmFzaXMnIGluIGVsZW0uc3R5bGUgfHwgJ21zRmxleEJhc2lzJyBpbiBlbGVtLnN0eWxlIHx8IC8vIElFMTAtc3BlY2lmaWMgKDIwMTIgZmxleCBzcGVjKSwgYXZhaWxhYmxlIGZvciBjb21wbGV0ZW5lc3NcbiAgICAnbXNGbGV4T3JkZXInIGluIGVsZW0uc3R5bGUpO1xuICB9O1xuXG4gIHJldHVybiBQbGF5ZXI7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIEdldCB0aGUge0BsaW5rIFZpZGVvVHJhY2tMaXN0fVxuICogQGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3ZpZGVvdHJhY2tsaXN0XG4gKlxuICogQHJldHVybiB7VmlkZW9UcmFja0xpc3R9XG4gKiAgICAgICAgIHRoZSBjdXJyZW50IHZpZGVvIHRyYWNrIGxpc3RcbiAqXG4gKiBAbWV0aG9kIFBsYXllci5wcm90b3R5cGUudmlkZW9UcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fVxuICogQGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2F1ZGlvdHJhY2tsaXN0XG4gKlxuICogQHJldHVybiB7QXVkaW9UcmFja0xpc3R9XG4gKiAgICAgICAgIHRoZSBjdXJyZW50IGF1ZGlvIHRyYWNrIGxpc3RcbiAqXG4gKiBAbWV0aG9kIFBsYXllci5wcm90b3R5cGUuYXVkaW9UcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gKlxuICogQGxpbmsgaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXRleHR0cmFja3NcbiAqXG4gKiBAcmV0dXJuIHtUZXh0VHJhY2tMaXN0fVxuICogICAgICAgICB0aGUgY3VycmVudCB0ZXh0IHRyYWNrIGxpc3RcbiAqXG4gKiBAbWV0aG9kIFBsYXllci5wcm90b3R5cGUudGV4dFRyYWNrc1xuICovXG5cbi8qKlxuICogR2V0IHRoZSByZW1vdGUge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gKlxuICogQHJldHVybiB7VGV4dFRyYWNrTGlzdH1cbiAqICAgICAgICAgVGhlIGN1cnJlbnQgcmVtb3RlIHRleHQgdHJhY2sgbGlzdFxuICpcbiAqIEBtZXRob2QgUGxheWVyLnByb3RvdHlwZS5yZW1vdGVUZXh0VHJhY2tzXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIHJlbW90ZSB7QGxpbmsgSHRtbFRyYWNrRWxlbWVudExpc3R9IHRyYWNrcy5cbiAqXG4gKiBAcmV0dXJuIHtIdG1sVHJhY2tFbGVtZW50TGlzdH1cbiAqICAgICAgICAgVGhlIGN1cnJlbnQgcmVtb3RlIHRleHQgdHJhY2sgZWxlbWVudCBsaXN0XG4gKlxuICogQG1ldGhvZCBQbGF5ZXIucHJvdG90eXBlLnJlbW90ZVRleHRUcmFja0Vsc1xuICovXG5cblxuQUxMLm5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHByb3BzID0gQUxMW25hbWVdO1xuXG4gIFBsYXllci5wcm90b3R5cGVbcHJvcHMuZ2V0dGVyTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudGVjaF8pIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hfW3Byb3BzLmdldHRlck5hbWVdKCk7XG4gICAgfSAvLyBpZiB3ZSBoYXZlIG5vdCB5ZXQgbG9hZFRlY2hfLCB3ZSBjcmVhdGUge3ZpZGVvLGF1ZGlvLHRleHR9VHJhY2tzX1xuICAgIC8vIHRoZXNlIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB0ZWNoIGR1cmluZyBsb2FkaW5nXG5cblxuICAgIHRoaXNbcHJvcHMucHJpdmF0ZU5hbWVdID0gdGhpc1twcm9wcy5wcml2YXRlTmFtZV0gfHwgbmV3IHByb3BzLkxpc3RDbGFzcygpO1xuICAgIHJldHVybiB0aGlzW3Byb3BzLnByaXZhdGVOYW1lXTtcbiAgfTtcbn0pO1xuLyoqXG4gKiBHbG9iYWwgZW51bWVyYXRpb24gb2YgcGxheWVycy5cbiAqXG4gKiBUaGUga2V5cyBhcmUgdGhlIHBsYXllciBJRHMgYW5kIHRoZSB2YWx1ZXMgYXJlIGVpdGhlciB0aGUge0BsaW5rIFBsYXllcn1cbiAqIGluc3RhbmNlIG9yIGBudWxsYCBmb3IgZGlzcG9zZWQgcGxheWVycy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cblBsYXllci5wbGF5ZXJzID0ge307XG52YXIgbmF2aWdhdG9yID0gd2luZG93JDEubmF2aWdhdG9yO1xuLypcbiAqIFBsYXllciBpbnN0YW5jZSBvcHRpb25zLCBzdXJmYWNlZCB1c2luZyBvcHRpb25zXG4gKiBvcHRpb25zID0gUGxheWVyLnByb3RvdHlwZS5vcHRpb25zX1xuICogTWFrZSBjaGFuZ2VzIGluIG9wdGlvbnMsIG5vdCBoZXJlLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblBsYXllci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIC8vIERlZmF1bHQgb3JkZXIgb2YgZmFsbGJhY2sgdGVjaG5vbG9neVxuICB0ZWNoT3JkZXI6IFRlY2guZGVmYXVsdFRlY2hPcmRlcl8sXG4gIGh0bWw1OiB7fSxcbiAgZmxhc2g6IHt9LFxuICAvLyBkZWZhdWx0IGluYWN0aXZpdHkgdGltZW91dFxuICBpbmFjdGl2aXR5VGltZW91dDogMjAwMCxcbiAgLy8gZGVmYXVsdCBwbGF5YmFjayByYXRlc1xuICBwbGF5YmFja1JhdGVzOiBbXSxcbiAgLy8gQWRkIHBsYXliYWNrIHJhdGUgc2VsZWN0aW9uIGJ5IGFkZGluZyByYXRlc1xuICAvLyAncGxheWJhY2tSYXRlcyc6IFswLjUsIDEsIDEuNSwgMl0sXG4gIGxpdmV1aTogZmFsc2UsXG4gIC8vIEluY2x1ZGVkIGNvbnRyb2wgc2V0c1xuICBjaGlsZHJlbjogWydtZWRpYUxvYWRlcicsICdwb3N0ZXJJbWFnZScsICd0ZXh0VHJhY2tEaXNwbGF5JywgJ2xvYWRpbmdTcGlubmVyJywgJ2JpZ1BsYXlCdXR0b24nLCAnbGl2ZVRyYWNrZXInLCAnY29udHJvbEJhcicsICdlcnJvckRpc3BsYXknLCAndGV4dFRyYWNrU2V0dGluZ3MnLCAncmVzaXplTWFuYWdlciddLFxuICBsYW5ndWFnZTogbmF2aWdhdG9yICYmIChuYXZpZ2F0b3IubGFuZ3VhZ2VzICYmIG5hdmlnYXRvci5sYW5ndWFnZXNbMF0gfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSB8fCBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8ICdlbicsXG4gIC8vIGxvY2FsZXMgYW5kIHRoZWlyIGxhbmd1YWdlIHRyYW5zbGF0aW9uc1xuICBsYW5ndWFnZXM6IHt9LFxuICAvLyBEZWZhdWx0IG1lc3NhZ2UgdG8gc2hvdyB3aGVuIGEgdmlkZW8gY2Fubm90IGJlIHBsYXllZC5cbiAgbm90U3VwcG9ydGVkTWVzc2FnZTogJ05vIGNvbXBhdGlibGUgc291cmNlIHdhcyBmb3VuZCBmb3IgdGhpcyBtZWRpYS4nLFxuICBmdWxsc2NyZWVuOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgbmF2aWdhdGlvblVJOiAnaGlkZSdcbiAgICB9XG4gIH0sXG4gIGJyZWFrcG9pbnRzOiB7fSxcbiAgcmVzcG9uc2l2ZTogZmFsc2Vcbn07XG5bXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHBsYXllciBpcyBpbiB0aGUgXCJlbmRlZFwiIHN0YXRlLlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHBsYXllciBpcyBpbiB0aGUgZW5kZWQgc3RhdGUsIGZhbHNlIGlmIG5vdC5cbiAqIEBtZXRob2QgUGxheWVyI2VuZGVkXG4gKi9cbidlbmRlZCcsXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHBsYXllciBpcyBpbiB0aGUgXCJzZWVraW5nXCIgc3RhdGUuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGxheWVyIGlzIGluIHRoZSBzZWVraW5nIHN0YXRlLCBmYWxzZSBpZiBub3QuXG4gKiBAbWV0aG9kIFBsYXllciNzZWVraW5nXG4gKi9cbidzZWVraW5nJyxcbi8qKlxuICogUmV0dXJucyB0aGUgVGltZVJhbmdlcyBvZiB0aGUgbWVkaWEgdGhhdCBhcmUgY3VycmVudGx5IGF2YWlsYWJsZVxuICogZm9yIHNlZWtpbmcgdG8uXG4gKlxuICogQHJldHVybiB7VGltZVJhbmdlc30gdGhlIHNlZWthYmxlIGludGVydmFscyBvZiB0aGUgbWVkaWEgdGltZWxpbmVcbiAqIEBtZXRob2QgUGxheWVyI3NlZWthYmxlXG4gKi9cbidzZWVrYWJsZScsXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgbmV0d29yayBhY3Rpdml0eSBmb3IgdGhlIGVsZW1lbnQsIGZyb21cbiAqIHRoZSBjb2RlcyBpbiB0aGUgbGlzdCBiZWxvdy5cbiAqIC0gTkVUV09SS19FTVBUWSAobnVtZXJpYyB2YWx1ZSAwKVxuICogICBUaGUgZWxlbWVudCBoYXMgbm90IHlldCBiZWVuIGluaXRpYWxpc2VkLiBBbGwgYXR0cmlidXRlcyBhcmUgaW5cbiAqICAgdGhlaXIgaW5pdGlhbCBzdGF0ZXMuXG4gKiAtIE5FVFdPUktfSURMRSAobnVtZXJpYyB2YWx1ZSAxKVxuICogICBUaGUgZWxlbWVudCdzIHJlc291cmNlIHNlbGVjdGlvbiBhbGdvcml0aG0gaXMgYWN0aXZlIGFuZCBoYXNcbiAqICAgc2VsZWN0ZWQgYSByZXNvdXJjZSwgYnV0IGl0IGlzIG5vdCBhY3R1YWxseSB1c2luZyB0aGUgbmV0d29yayBhdFxuICogICB0aGlzIHRpbWUuXG4gKiAtIE5FVFdPUktfTE9BRElORyAobnVtZXJpYyB2YWx1ZSAyKVxuICogICBUaGUgdXNlciBhZ2VudCBpcyBhY3RpdmVseSB0cnlpbmcgdG8gZG93bmxvYWQgZGF0YS5cbiAqIC0gTkVUV09SS19OT19TT1VSQ0UgKG51bWVyaWMgdmFsdWUgMylcbiAqICAgVGhlIGVsZW1lbnQncyByZXNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtIGlzIGFjdGl2ZSwgYnV0IGl0IGhhc1xuICogICBub3QgeWV0IGZvdW5kIGEgcmVzb3VyY2UgdG8gdXNlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI25ldHdvcmstc3RhdGVzXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBjdXJyZW50IG5ldHdvcmsgYWN0aXZpdHkgc3RhdGVcbiAqIEBtZXRob2QgUGxheWVyI25ldHdvcmtTdGF0ZVxuICovXG4nbmV0d29ya1N0YXRlJyxcbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIHRoYXQgZXhwcmVzc2VzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBlbGVtZW50XG4gKiB3aXRoIHJlc3BlY3QgdG8gcmVuZGVyaW5nIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uLCBmcm9tIHRoZVxuICogY29kZXMgaW4gdGhlIGxpc3QgYmVsb3cuXG4gKiAtIEhBVkVfTk9USElORyAobnVtZXJpYyB2YWx1ZSAwKVxuICogICBObyBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIG1lZGlhIHJlc291cmNlIGlzIGF2YWlsYWJsZS5cbiAqIC0gSEFWRV9NRVRBREFUQSAobnVtZXJpYyB2YWx1ZSAxKVxuICogICBFbm91Z2ggb2YgdGhlIHJlc291cmNlIGhhcyBiZWVuIG9idGFpbmVkIHRoYXQgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogICByZXNvdXJjZSBpcyBhdmFpbGFibGUuXG4gKiAtIEhBVkVfQ1VSUkVOVF9EQVRBIChudW1lcmljIHZhbHVlIDIpXG4gKiAgIERhdGEgZm9yIHRoZSBpbW1lZGlhdGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBpcyBhdmFpbGFibGUuXG4gKiAtIEhBVkVfRlVUVVJFX0RBVEEgKG51bWVyaWMgdmFsdWUgMylcbiAqICAgRGF0YSBmb3IgdGhlIGltbWVkaWF0ZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGlzIGF2YWlsYWJsZSwgYXNcbiAqICAgd2VsbCBhcyBlbm91Z2ggZGF0YSBmb3IgdGhlIHVzZXIgYWdlbnQgdG8gYWR2YW5jZSB0aGUgY3VycmVudFxuICogICBwbGF5YmFjayBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIG9mIHBsYXliYWNrLlxuICogLSBIQVZFX0VOT1VHSF9EQVRBIChudW1lcmljIHZhbHVlIDQpXG4gKiAgIFRoZSB1c2VyIGFnZW50IGVzdGltYXRlcyB0aGF0IGVub3VnaCBkYXRhIGlzIGF2YWlsYWJsZSBmb3JcbiAqICAgcGxheWJhY2sgdG8gcHJvY2VlZCB1bmludGVycnVwdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS1tZWRpYS1yZWFkeXN0YXRlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBjdXJyZW50IHBsYXliYWNrIHJlbmRlcmluZyBzdGF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjcmVhZHlTdGF0ZVxuICovXG4ncmVhZHlTdGF0ZSddLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gIFBsYXllci5wcm90b3R5cGVbZm5dID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKGZuKTtcbiAgfTtcbn0pO1xuVEVDSF9FVkVOVFNfUkVUUklHR0VSLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gIFBsYXllci5wcm90b3R5cGVbXCJoYW5kbGVUZWNoXCIgKyB0b1RpdGxlQ2FzZShldmVudCkgKyBcIl9cIl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihldmVudCk7XG4gIH07XG59KTtcbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgcGxheWVyIGhhcyBpbml0aWFsIGR1cmF0aW9uIGFuZCBkaW1lbnNpb24gaW5mb3JtYXRpb25cbiAqXG4gKiBAZXZlbnQgUGxheWVyI2xvYWRlZG1ldGFkYXRhXG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSBwbGF5ZXIgaGFzIGRvd25sb2FkZWQgZGF0YSBhdCB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvblxuICpcbiAqIEBldmVudCBQbGF5ZXIjbG9hZGVkZGF0YVxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBoYXMgY2hhbmdlZCAqXG4gKiBEdXJpbmcgcGxheWJhY2sgdGhpcyBpcyBmaXJlZCBldmVyeSAxNS0yNTAgbWlsbGlzZWNvbmRzLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBwbGF5YmFjayB0ZWNobm9sb2d5IGluIHVzZS5cbiAqXG4gKiBAZXZlbnQgUGxheWVyI3RpbWV1cGRhdGVcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIHZvbHVtZSBjaGFuZ2VzXG4gKlxuICogQGV2ZW50IFBsYXllciN2b2x1bWVjaGFuZ2VcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIFJlcG9ydHMgd2hldGhlciBvciBub3QgYSBwbGF5ZXIgaGFzIGEgcGx1Z2luIGF2YWlsYWJsZS5cbiAqXG4gKiBUaGlzIGRvZXMgbm90IHJlcG9ydCB3aGV0aGVyIG9yIG5vdCB0aGUgcGx1Z2luIGhhcyBldmVyIGJlZW4gaW5pdGlhbGl6ZWRcbiAqIG9uIHRoaXMgcGxheWVyLiBGb3IgdGhhdCwgW3VzaW5nUGx1Z2luXXtAbGluayBQbGF5ZXIjdXNpbmdQbHVnaW59LlxuICpcbiAqIEBtZXRob2QgUGxheWVyI2hhc1BsdWdpblxuICogQHBhcmFtICB7c3RyaW5nfSAgbmFtZVxuICogICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGlzIHBsYXllciBoYXMgdGhlIHJlcXVlc3RlZCBwbHVnaW4gYXZhaWxhYmxlLlxuICovXG5cbi8qKlxuICogUmVwb3J0cyB3aGV0aGVyIG9yIG5vdCBhIHBsYXllciBpcyB1c2luZyBhIHBsdWdpbiBieSBuYW1lLlxuICpcbiAqIEZvciBiYXNpYyBwbHVnaW5zLCB0aGlzIG9ubHkgcmVwb3J0cyB3aGV0aGVyIHRoZSBwbHVnaW4gaGFzIF9ldmVyXyBiZWVuXG4gKiBpbml0aWFsaXplZCBvbiB0aGlzIHBsYXllci5cbiAqXG4gKiBAbWV0aG9kIFBsYXllciN1c2luZ1BsdWdpblxuICogQHBhcmFtICB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgIFRoZSBuYW1lIG9mIGEgcGx1Z2luLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdoZXRoZXIgb3Igbm90IHRoaXMgcGxheWVyIGlzIHVzaW5nIHRoZSByZXF1ZXN0ZWQgcGx1Z2luLlxuICovXG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGxheWVyJywgUGxheWVyKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBwbHVnaW4gbmFtZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cbnZhciBCQVNFX1BMVUdJTl9OQU1FID0gJ3BsdWdpbic7XG4vKipcbiAqIFRoZSBrZXkgb24gd2hpY2ggYSBwbGF5ZXIncyBhY3RpdmUgcGx1Z2lucyBjYWNoZSBpcyBzdG9yZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudFxuICogQHR5cGUgICAgIHtzdHJpbmd9XG4gKi9cblxudmFyIFBMVUdJTl9DQUNIRV9LRVkgPSAnYWN0aXZlUGx1Z2luc18nO1xuLyoqXG4gKiBTdG9yZXMgcmVnaXN0ZXJlZCBwbHVnaW5zIGluIGEgcHJpdmF0ZSBzcGFjZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUgICAge09iamVjdH1cbiAqL1xuXG52YXIgcGx1Z2luU3RvcmFnZSA9IHt9O1xuLyoqXG4gKiBSZXBvcnRzIHdoZXRoZXIgb3Igbm90IGEgcGx1Z2luIGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgIFRoZSBuYW1lIG9mIGEgcGx1Z2luLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgcGx1Z2luIGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG4gKi9cblxudmFyIHBsdWdpbkV4aXN0cyA9IGZ1bmN0aW9uIHBsdWdpbkV4aXN0cyhuYW1lKSB7XG4gIHJldHVybiBwbHVnaW5TdG9yYWdlLmhhc093blByb3BlcnR5KG5hbWUpO1xufTtcbi8qKlxuICogR2V0IGEgc2luZ2xlIHJlZ2lzdGVyZWQgcGx1Z2luIGJ5IG5hbWUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgIFRoZSBuYW1lIG9mIGEgcGx1Z2luLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAqICAgICAgICAgIFRoZSBwbHVnaW4gKG9yIHVuZGVmaW5lZCkuXG4gKi9cblxuXG52YXIgZ2V0UGx1Z2luID0gZnVuY3Rpb24gZ2V0UGx1Z2luKG5hbWUpIHtcbiAgcmV0dXJuIHBsdWdpbkV4aXN0cyhuYW1lKSA/IHBsdWdpblN0b3JhZ2VbbmFtZV0gOiB1bmRlZmluZWQ7XG59O1xuLyoqXG4gKiBNYXJrcyBhIHBsdWdpbiBhcyBcImFjdGl2ZVwiIG9uIGEgcGxheWVyLlxuICpcbiAqIEFsc28sIGVuc3VyZXMgdGhhdCB0aGUgcGxheWVyIGhhcyBhbiBvYmplY3QgZm9yIHRyYWNraW5nIGFjdGl2ZSBwbHVnaW5zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7UGxheWVyfSBwbGF5ZXJcbiAqICAgICAgICAgIEEgVmlkZW8uanMgcGxheWVyIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgIFRoZSBuYW1lIG9mIGEgcGx1Z2luLlxuICovXG5cblxudmFyIG1hcmtQbHVnaW5Bc0FjdGl2ZSA9IGZ1bmN0aW9uIG1hcmtQbHVnaW5Bc0FjdGl2ZShwbGF5ZXIsIG5hbWUpIHtcbiAgcGxheWVyW1BMVUdJTl9DQUNIRV9LRVldID0gcGxheWVyW1BMVUdJTl9DQUNIRV9LRVldIHx8IHt9O1xuICBwbGF5ZXJbUExVR0lOX0NBQ0hFX0tFWV1bbmFtZV0gPSB0cnVlO1xufTtcbi8qKlxuICogVHJpZ2dlcnMgYSBwYWlyIG9mIHBsdWdpbiBzZXR1cCBldmVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgIEEgVmlkZW8uanMgcGxheWVyIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSAge1BsdWdpbn5QbHVnaW5FdmVudEhhc2h9IGhhc2hcbiAqICAgICAgICAgQSBwbHVnaW4gZXZlbnQgaGFzaC5cbiAqXG4gKiBAcGFyYW0gIHtib29sZWFufSBbYmVmb3JlXVxuICogICAgICAgICBJZiB0cnVlLCBwcmVmaXhlcyB0aGUgZXZlbnQgbmFtZSB3aXRoIFwiYmVmb3JlXCIuIEluIG90aGVyIHdvcmRzLFxuICogICAgICAgICB1c2UgdGhpcyB0byB0cmlnZ2VyIFwiYmVmb3JlcGx1Z2luc2V0dXBcIiBpbnN0ZWFkIG9mIFwicGx1Z2luc2V0dXBcIi5cbiAqL1xuXG5cbnZhciB0cmlnZ2VyU2V0dXBFdmVudCA9IGZ1bmN0aW9uIHRyaWdnZXJTZXR1cEV2ZW50KHBsYXllciwgaGFzaCwgYmVmb3JlKSB7XG4gIHZhciBldmVudE5hbWUgPSAoYmVmb3JlID8gJ2JlZm9yZScgOiAnJykgKyAncGx1Z2luc2V0dXAnO1xuICBwbGF5ZXIudHJpZ2dlcihldmVudE5hbWUsIGhhc2gpO1xuICBwbGF5ZXIudHJpZ2dlcihldmVudE5hbWUgKyAnOicgKyBoYXNoLm5hbWUsIGhhc2gpO1xufTtcbi8qKlxuICogVGFrZXMgYSBiYXNpYyBwbHVnaW4gZnVuY3Rpb24gYW5kIHJldHVybnMgYSB3cmFwcGVyIGZ1bmN0aW9uIHdoaWNoIG1hcmtzXG4gKiBvbiB0aGUgcGxheWVyIHRoYXQgdGhlIHBsdWdpbiBoYXMgYmVlbiBhY3RpdmF0ZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4uXG4gKlxuICogQHBhcmFtICAge0Z1bmN0aW9ufSBwbHVnaW5cbiAqICAgICAgICAgIFRoZSBiYXNpYyBwbHVnaW4uXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiAgICAgICAgICBBIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBwbHVnaW4uXG4gKi9cblxuXG52YXIgY3JlYXRlQmFzaWNQbHVnaW4gPSBmdW5jdGlvbiBjcmVhdGVCYXNpY1BsdWdpbihuYW1lLCBwbHVnaW4pIHtcbiAgdmFyIGJhc2ljUGx1Z2luV3JhcHBlciA9IGZ1bmN0aW9uIGJhc2ljUGx1Z2luV3JhcHBlcigpIHtcbiAgICAvLyBXZSB0cmlnZ2VyIHRoZSBcImJlZm9yZXBsdWdpbnNldHVwXCIgYW5kIFwicGx1Z2luc2V0dXBcIiBldmVudHMgb24gdGhlIHBsYXllclxuICAgIC8vIHJlZ2FyZGxlc3MsIGJ1dCB3ZSB3YW50IHRoZSBoYXNoIHRvIGJlIGNvbnNpc3RlbnQgd2l0aCB0aGUgaGFzaCBwcm92aWRlZFxuICAgIC8vIGZvciBhZHZhbmNlZCBwbHVnaW5zLlxuICAgIC8vXG4gICAgLy8gVGhlIG9ubHkgcG90ZW50aWFsbHkgY291bnRlci1pbnR1aXRpdmUgdGhpbmcgaGVyZSBpcyB0aGUgYGluc3RhbmNlYCBpblxuICAgIC8vIHRoZSBcInBsdWdpbnNldHVwXCIgZXZlbnQgaXMgdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBgcGx1Z2luYCBmdW5jdGlvbi5cbiAgICB0cmlnZ2VyU2V0dXBFdmVudCh0aGlzLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcGx1Z2luOiBwbHVnaW4sXG4gICAgICBpbnN0YW5jZTogbnVsbFxuICAgIH0sIHRydWUpO1xuICAgIHZhciBpbnN0YW5jZSA9IHBsdWdpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIG1hcmtQbHVnaW5Bc0FjdGl2ZSh0aGlzLCBuYW1lKTtcbiAgICB0cmlnZ2VyU2V0dXBFdmVudCh0aGlzLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcGx1Z2luOiBwbHVnaW4sXG4gICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICB9KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgT2JqZWN0LmtleXMocGx1Z2luKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgYmFzaWNQbHVnaW5XcmFwcGVyW3Byb3BdID0gcGx1Z2luW3Byb3BdO1xuICB9KTtcbiAgcmV0dXJuIGJhc2ljUGx1Z2luV3JhcHBlcjtcbn07XG4vKipcbiAqIFRha2VzIGEgcGx1Z2luIHN1Yi1jbGFzcyBhbmQgcmV0dXJucyBhIGZhY3RvcnkgZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmdcbiAqIGluc3RhbmNlcyBvZiBpdC5cbiAqXG4gKiBUaGlzIGZhY3RvcnkgZnVuY3Rpb24gd2lsbCByZXBsYWNlIGl0c2VsZiB3aXRoIGFuIGluc3RhbmNlIG9mIHRoZSByZXF1ZXN0ZWRcbiAqIHN1Yi1jbGFzcyBvZiBQbHVnaW4uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4uXG4gKlxuICogQHBhcmFtICAge1BsdWdpbn0gUGx1Z2luU3ViQ2xhc3NcbiAqICAgICAgICAgIFRoZSBhZHZhbmNlZCBwbHVnaW4uXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cblxuXG52YXIgY3JlYXRlUGx1Z2luRmFjdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZVBsdWdpbkZhY3RvcnkobmFtZSwgUGx1Z2luU3ViQ2xhc3MpIHtcbiAgLy8gQWRkIGEgYG5hbWVgIHByb3BlcnR5IHRvIHRoZSBwbHVnaW4gcHJvdG90eXBlIHNvIHRoYXQgZWFjaCBwbHVnaW4gY2FuXG4gIC8vIHJlZmVyIHRvIGl0c2VsZiBieSBuYW1lLlxuICBQbHVnaW5TdWJDbGFzcy5wcm90b3R5cGUubmFtZSA9IG5hbWU7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlclNldHVwRXZlbnQodGhpcywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHBsdWdpbjogUGx1Z2luU3ViQ2xhc3MsXG4gICAgICBpbnN0YW5jZTogbnVsbFxuICAgIH0sIHRydWUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBpbnN0YW5jZSA9IF9jb25zdHJ1Y3QoUGx1Z2luU3ViQ2xhc3MsIFt0aGlzXS5jb25jYXQoYXJncykpOyAvLyBUaGUgcGx1Z2luIGlzIHJlcGxhY2VkIGJ5IGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50IGluc3RhbmNlLlxuXG5cbiAgICB0aGlzW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG5cbiAgICB0cmlnZ2VyU2V0dXBFdmVudCh0aGlzLCBpbnN0YW5jZS5nZXRFdmVudEhhc2goKSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufTtcbi8qKlxuICogUGFyZW50IGNsYXNzIGZvciBhbGwgYWR2YW5jZWQgcGx1Z2lucy5cbiAqXG4gKiBAbWl4ZXMgICBtb2R1bGU6ZXZlbnRlZH5FdmVudGVkTWl4aW5cbiAqIEBtaXhlcyAgIG1vZHVsZTpzdGF0ZWZ1bH5TdGF0ZWZ1bE1peGluXG4gKiBAZmlyZXMgICBQbGF5ZXIjYmVmb3JlcGx1Z2luc2V0dXBcbiAqIEBmaXJlcyAgIFBsYXllciNiZWZvcmVwbHVnaW5zZXR1cDokbmFtZVxuICogQGZpcmVzICAgUGxheWVyI3BsdWdpbnNldHVwXG4gKiBAZmlyZXMgICBQbGF5ZXIjcGx1Z2luc2V0dXA6JG5hbWVcbiAqIEBsaXN0ZW5zIFBsYXllciNkaXNwb3NlXG4gKiBAdGhyb3dzICB7RXJyb3J9XG4gKiAgICAgICAgICBJZiBhdHRlbXB0aW5nIHRvIGluc3RhbnRpYXRlIHRoZSBiYXNlIHtAbGluayBQbHVnaW59IGNsYXNzXG4gKiAgICAgICAgICBkaXJlY3RseSBpbnN0ZWFkIG9mIHZpYSBhIHN1Yi1jbGFzcy5cbiAqL1xuXG5cbnZhciBQbHVnaW4gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBTdWItY2xhc3NlcyBzaG91bGQgY2FsbCBgc3VwZXJgIHRvIGVuc3VyZSBwbHVnaW5zIGFyZSBwcm9wZXJseSBpbml0aWFsaXplZC5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgQSBWaWRlby5qcyBwbGF5ZXIgaW5zdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiBQbHVnaW4ocGxheWVyKSB7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IFBsdWdpbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbHVnaW4gbXVzdCBiZSBzdWItY2xhc3NlZDsgbm90IGRpcmVjdGx5IGluc3RhbnRpYXRlZC4nKTtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjsgLy8gTWFrZSB0aGlzIG9iamVjdCBldmVudGVkLCBidXQgcmVtb3ZlIHRoZSBhZGRlZCBgdHJpZ2dlcmAgbWV0aG9kIHNvIHdlXG4gICAgLy8gdXNlIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBpbnN0ZWFkLlxuXG4gICAgZXZlbnRlZCh0aGlzKTtcbiAgICBkZWxldGUgdGhpcy50cmlnZ2VyO1xuICAgIHN0YXRlZnVsKHRoaXMsIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFN0YXRlKTtcbiAgICBtYXJrUGx1Z2luQXNBY3RpdmUocGxheWVyLCB0aGlzLm5hbWUpOyAvLyBBdXRvLWJpbmQgdGhlIGRpc3Bvc2UgbWV0aG9kIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSBsaXN0ZW5lciBhbmQgdW5iaW5kXG4gICAgLy8gaXQgbGF0ZXIgZWFzaWx5LlxuXG4gICAgdGhpcy5kaXNwb3NlID0gYmluZCh0aGlzLCB0aGlzLmRpc3Bvc2UpOyAvLyBJZiB0aGUgcGxheWVyIGlzIGRpc3Bvc2VkLCBkaXNwb3NlIHRoZSBwbHVnaW4uXG5cbiAgICBwbGF5ZXIub24oJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2UpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHZlcnNpb24gb2YgdGhlIHBsdWdpbiB0aGF0IHdhcyBzZXQgb24gPHBsdWdpbk5hbWU+LlZFUlNJT05cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luLnByb3RvdHlwZTtcblxuICBfcHJvdG8udmVyc2lvbiA9IGZ1bmN0aW9uIHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuVkVSU0lPTjtcbiAgfVxuICAvKipcbiAgICogRWFjaCBldmVudCB0cmlnZ2VyZWQgYnkgcGx1Z2lucyBpbmNsdWRlcyBhIGhhc2ggb2YgYWRkaXRpb25hbCBkYXRhIHdpdGhcbiAgICogY29udmVudGlvbmFsIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIFRoaXMgcmV0dXJucyB0aGF0IG9iamVjdCBvciBtdXRhdGVzIGFuIGV4aXN0aW5nIGhhc2guXG4gICAqXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9IFtoYXNoPXt9XVxuICAgKiAgICAgICAgICBBbiBvYmplY3QgdG8gYmUgdXNlZCBhcyBldmVudCBhbiBldmVudCBoYXNoLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQbHVnaW5+UGx1Z2luRXZlbnRIYXNofVxuICAgKiAgICAgICAgICBBbiBldmVudCBoYXNoIG9iamVjdCB3aXRoIHByb3ZpZGVkIHByb3BlcnRpZXMgbWl4ZWQtaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEV2ZW50SGFzaCA9IGZ1bmN0aW9uIGdldEV2ZW50SGFzaChoYXNoKSB7XG4gICAgaWYgKGhhc2ggPT09IHZvaWQgMCkge1xuICAgICAgaGFzaCA9IHt9O1xuICAgIH1cblxuICAgIGhhc2gubmFtZSA9IHRoaXMubmFtZTtcbiAgICBoYXNoLnBsdWdpbiA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgaGFzaC5pbnN0YW5jZSA9IHRoaXM7XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXJzIGFuIGV2ZW50IG9uIHRoZSBwbHVnaW4gb2JqZWN0IGFuZCBvdmVycmlkZXNcbiAgICoge0BsaW5rIG1vZHVsZTpldmVudGVkfkV2ZW50ZWRNaXhpbi50cmlnZ2VyfEV2ZW50ZWRNaXhpbi50cmlnZ2VyfS5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ3xPYmplY3R9IGV2ZW50XG4gICAqICAgICAgICAgIEFuIGV2ZW50IHR5cGUgb3IgYW4gb2JqZWN0IHdpdGggYSB0eXBlIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSBbaGFzaD17fV1cbiAgICogICAgICAgICAgQWRkaXRpb25hbCBkYXRhIGhhc2ggdG8gbWVyZ2Ugd2l0aCBhXG4gICAqICAgICAgICAgIHtAbGluayBQbHVnaW5+UGx1Z2luRXZlbnRIYXNofFBsdWdpbkV2ZW50SGFzaH0uXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgIFdoZXRoZXIgb3Igbm90IGRlZmF1bHQgd2FzIHByZXZlbnRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIkMShldmVudCwgaGFzaCkge1xuICAgIGlmIChoYXNoID09PSB2b2lkIDApIHtcbiAgICAgIGhhc2ggPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJpZ2dlcih0aGlzLmV2ZW50QnVzRWxfLCBldmVudCwgdGhpcy5nZXRFdmVudEhhc2goaGFzaCkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIFwic3RhdGVjaGFuZ2VkXCIgZXZlbnRzIG9uIHRoZSBwbHVnaW4uIE5vLW9wIGJ5IGRlZmF1bHQsIG92ZXJyaWRlIGJ5XG4gICAqIHN1YmNsYXNzaW5nLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtICAgIHtFdmVudH0gZVxuICAgKiAgICAgICAgICAgQW4gZXZlbnQgb2JqZWN0IHByb3ZpZGVkIGJ5IGEgXCJzdGF0ZWNoYW5nZWRcIiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9IGUuY2hhbmdlc1xuICAgKiAgICAgICAgICAgQW4gb2JqZWN0IGRlc2NyaWJpbmcgY2hhbmdlcyB0aGF0IG9jY3VycmVkIHdpdGggdGhlIFwic3RhdGVjaGFuZ2VkXCJcbiAgICogICAgICAgICAgIGV2ZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVTdGF0ZUNoYW5nZWQgPSBmdW5jdGlvbiBoYW5kbGVTdGF0ZUNoYW5nZWQoZSkge31cbiAgLyoqXG4gICAqIERpc3Bvc2VzIGEgcGx1Z2luLlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIGNhbiBvdmVycmlkZSB0aGlzIGlmIHRoZXkgd2FudCwgYnV0IGZvciB0aGUgc2FrZSBvZiBzYWZldHksXG4gICAqIGl0J3MgcHJvYmFibHkgYmVzdCB0byBzdWJzY3JpYmUgdGhlIFwiZGlzcG9zZVwiIGV2ZW50LlxuICAgKlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rpc3Bvc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUsXG4gICAgICAgIHBsYXllciA9IHRoaXMucGxheWVyO1xuICAgIC8qKlxuICAgICAqIFNpZ25hbHMgdGhhdCBhIGFkdmFuY2VkIHBsdWdpbiBpcyBhYm91dCB0byBiZSBkaXNwb3NlZC5cbiAgICAgKlxuICAgICAqIEBldmVudCBQbHVnaW4jZGlzcG9zZVxuICAgICAqIEB0eXBlICB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2Rpc3Bvc2UnKTtcbiAgICB0aGlzLm9mZigpO1xuICAgIHBsYXllci5vZmYoJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2UpOyAvLyBFbGltaW5hdGUgYW55IHBvc3NpYmxlIHNvdXJjZXMgb2YgbGVha2luZyBtZW1vcnkgYnkgY2xlYXJpbmcgdXBcbiAgICAvLyByZWZlcmVuY2VzIGJldHdlZW4gdGhlIHBsYXllciBhbmQgdGhlIHBsdWdpbiBpbnN0YW5jZSBhbmQgbnVsbGluZyBvdXRcbiAgICAvLyB0aGUgcGx1Z2luJ3Mgc3RhdGUgYW5kIHJlcGxhY2luZyBtZXRob2RzIHdpdGggYSBmdW5jdGlvbiB0aGF0IHRocm93cy5cblxuICAgIHBsYXllcltQTFVHSU5fQ0FDSEVfS0VZXVtuYW1lXSA9IGZhbHNlO1xuICAgIHRoaXMucGxheWVyID0gdGhpcy5zdGF0ZSA9IG51bGw7IC8vIEZpbmFsbHksIHJlcGxhY2UgdGhlIHBsdWdpbiBuYW1lIG9uIHRoZSBwbGF5ZXIgd2l0aCBhIG5ldyBmYWN0b3J5XG4gICAgLy8gZnVuY3Rpb24sIHNvIHRoYXQgdGhlIHBsdWdpbiBpcyByZWFkeSB0byBiZSBzZXQgdXAgYWdhaW4uXG5cbiAgICBwbGF5ZXJbbmFtZV0gPSBjcmVhdGVQbHVnaW5GYWN0b3J5KG5hbWUsIHBsdWdpblN0b3JhZ2VbbmFtZV0pO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcGx1Z2luIGlzIGEgYmFzaWMgcGx1Z2luIChpLmUuIG5vdCBhIHN1Yi1jbGFzcyBvZiBgUGx1Z2luYCkuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd8RnVuY3Rpb259IHBsdWdpblxuICAgKiAgICAgICAgICBJZiBhIHN0cmluZywgbWF0Y2hlcyB0aGUgbmFtZSBvZiBhIHBsdWdpbi4gSWYgYSBmdW5jdGlvbiwgd2lsbCBiZVxuICAgKiAgICAgICAgICB0ZXN0ZWQgZGlyZWN0bHkuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgIFdoZXRoZXIgb3Igbm90IGEgcGx1Z2luIGlzIGEgYmFzaWMgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5pc0Jhc2ljID0gZnVuY3Rpb24gaXNCYXNpYyhwbHVnaW4pIHtcbiAgICB2YXIgcCA9IHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnID8gZ2V0UGx1Z2luKHBsdWdpbikgOiBwbHVnaW47XG4gICAgcmV0dXJuIHR5cGVvZiBwID09PSAnZnVuY3Rpb24nICYmICFQbHVnaW4ucHJvdG90eXBlLmlzUHJvdG90eXBlT2YocC5wcm90b3R5cGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFZpZGVvLmpzIHBsdWdpbi5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRvIGJlIHJlZ2lzdGVyZWQuIE11c3QgYmUgYSBzdHJpbmcgYW5kXG4gICAqICAgICAgICAgIG11c3Qgbm90IG1hdGNoIGFuIGV4aXN0aW5nIHBsdWdpbiBvciBhIG1ldGhvZCBvbiB0aGUgYFBsYXllcmBcbiAgICogICAgICAgICAgcHJvdG90eXBlLlxuICAgKlxuICAgKiBAcGFyYW0gICB7RnVuY3Rpb259IHBsdWdpblxuICAgKiAgICAgICAgICBBIHN1Yi1jbGFzcyBvZiBgUGx1Z2luYCBvciBhIGZ1bmN0aW9uIGZvciBiYXNpYyBwbHVnaW5zLlxuICAgKlxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICogICAgICAgICAgRm9yIGFkdmFuY2VkIHBsdWdpbnMsIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgdGhhdCBwbHVnaW4uIEZvclxuICAgKiAgICAgICAgICBiYXNpYyBwbHVnaW5zLCBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCBpbml0aWFsaXplcyB0aGUgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5yZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKG5hbWUsIHBsdWdpbikge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgcGx1Z2luIG5hbWUsIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIG11c3QgYmUgYSBzdHJpbmcsIHdhcyBcIiArIHR5cGVvZiBuYW1lICsgXCIuXCIpO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW5FeGlzdHMobmFtZSkpIHtcbiAgICAgIGxvZy53YXJuKFwiQSBwbHVnaW4gbmFtZWQgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBhbHJlYWR5IGV4aXN0cy4gWW91IG1heSB3YW50IHRvIGF2b2lkIHJlLXJlZ2lzdGVyaW5nIHBsdWdpbnMhXCIpO1xuICAgIH0gZWxzZSBpZiAoUGxheWVyLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBwbHVnaW4gbmFtZSwgXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgY2Fubm90IHNoYXJlIGEgbmFtZSB3aXRoIGFuIGV4aXN0aW5nIHBsYXllciBtZXRob2QhXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGx1Z2luICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIHBsdWdpbiBmb3IgXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgbXVzdCBiZSBhIGZ1bmN0aW9uLCB3YXMgXCIgKyB0eXBlb2YgcGx1Z2luICsgXCIuXCIpO1xuICAgIH1cblxuICAgIHBsdWdpblN0b3JhZ2VbbmFtZV0gPSBwbHVnaW47IC8vIEFkZCBhIHBsYXllciBwcm90b3R5cGUgbWV0aG9kIGZvciBhbGwgc3ViLWNsYXNzZWQgcGx1Z2lucyAoYnV0IG5vdCBmb3JcbiAgICAvLyB0aGUgYmFzZSBQbHVnaW4gY2xhc3MpLlxuXG4gICAgaWYgKG5hbWUgIT09IEJBU0VfUExVR0lOX05BTUUpIHtcbiAgICAgIGlmIChQbHVnaW4uaXNCYXNpYyhwbHVnaW4pKSB7XG4gICAgICAgIFBsYXllci5wcm90b3R5cGVbbmFtZV0gPSBjcmVhdGVCYXNpY1BsdWdpbihuYW1lLCBwbHVnaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUGxheWVyLnByb3RvdHlwZVtuYW1lXSA9IGNyZWF0ZVBsdWdpbkZhY3RvcnkobmFtZSwgcGx1Z2luKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGx1Z2luO1xuICB9XG4gIC8qKlxuICAgKiBEZS1yZWdpc3RlciBhIFZpZGVvLmpzIHBsdWdpbi5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBuYW1lXG4gICAqICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHBsdWdpbiB0byBiZSBkZS1yZWdpc3RlcmVkLiBNdXN0IGJlIGEgc3RyaW5nIHRoYXRcbiAgICogICAgICAgICBtYXRjaGVzIGFuIGV4aXN0aW5nIHBsdWdpbi5cbiAgICpcbiAgICogQHRocm93cyB7RXJyb3J9XG4gICAqICAgICAgICAgSWYgYW4gYXR0ZW1wdCBpcyBtYWRlIHRvIGRlLXJlZ2lzdGVyIHRoZSBiYXNlIHBsdWdpbi5cbiAgICovXG4gIDtcblxuICBQbHVnaW4uZGVyZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uIGRlcmVnaXN0ZXJQbHVnaW4obmFtZSkge1xuICAgIGlmIChuYW1lID09PSBCQVNFX1BMVUdJTl9OQU1FKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZS1yZWdpc3RlciBiYXNlIHBsdWdpbi4nKTtcbiAgICB9XG5cbiAgICBpZiAocGx1Z2luRXhpc3RzKG5hbWUpKSB7XG4gICAgICBkZWxldGUgcGx1Z2luU3RvcmFnZVtuYW1lXTtcbiAgICAgIGRlbGV0ZSBQbGF5ZXIucHJvdG90eXBlW25hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0cyBhbiBvYmplY3QgY29udGFpbmluZyBtdWx0aXBsZSBWaWRlby5qcyBwbHVnaW5zLlxuICAgKlxuICAgKiBAcGFyYW0gICB7QXJyYXl9IFtuYW1lc11cbiAgICogICAgICAgICAgSWYgcHJvdmlkZWQsIHNob3VsZCBiZSBhbiBhcnJheSBvZiBwbHVnaW4gbmFtZXMuIERlZmF1bHRzIHRvIF9hbGxfXG4gICAqICAgICAgICAgIHBsdWdpbiBuYW1lcy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICogICAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgcGx1Z2luKHMpIGFzc29jaWF0ZWQgd2l0aCB0aGVpciBuYW1lKHMpIG9yXG4gICAqICAgICAgICAgIGB1bmRlZmluZWRgIGlmIG5vIG1hdGNoaW5nIHBsdWdpbnMgZXhpc3QpLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5nZXRQbHVnaW5zID0gZnVuY3Rpb24gZ2V0UGx1Z2lucyhuYW1lcykge1xuICAgIGlmIChuYW1lcyA9PT0gdm9pZCAwKSB7XG4gICAgICBuYW1lcyA9IE9iamVjdC5rZXlzKHBsdWdpblN0b3JhZ2UpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQ7XG4gICAgbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHBsdWdpbiA9IGdldFBsdWdpbihuYW1lKTtcblxuICAgICAgaWYgKHBsdWdpbikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwge307XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IHBsdWdpbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgcGx1Z2luJ3MgdmVyc2lvbiwgaWYgYXZhaWxhYmxlXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAgICogICAgICAgICAgVGhlIG5hbWUgb2YgYSBwbHVnaW4uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAgVGhlIHBsdWdpbidzIHZlcnNpb24gb3IgYW4gZW1wdHkgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5nZXRQbHVnaW5WZXJzaW9uID0gZnVuY3Rpb24gZ2V0UGx1Z2luVmVyc2lvbihuYW1lKSB7XG4gICAgdmFyIHBsdWdpbiA9IGdldFBsdWdpbihuYW1lKTtcbiAgICByZXR1cm4gcGx1Z2luICYmIHBsdWdpbi5WRVJTSU9OIHx8ICcnO1xuICB9O1xuXG4gIHJldHVybiBQbHVnaW47XG59KCk7XG4vKipcbiAqIEdldHMgYSBwbHVnaW4gYnkgbmFtZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCAgIGdldFBsdWdpblxuICogQG1lbWJlck9mIFBsdWdpblxuICogQHBhcmFtICAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqXG4gKiBAcmV0dXJucyAge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAqICAgICAgICAgICBUaGUgcGx1Z2luIChvciBgdW5kZWZpbmVkYCkuXG4gKi9cblxuXG5QbHVnaW4uZ2V0UGx1Z2luID0gZ2V0UGx1Z2luO1xuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgYmFzZSBwbHVnaW4gY2xhc3MgYXMgaXQgaXMgcmVnaXN0ZXJlZC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cblBsdWdpbi5CQVNFX1BMVUdJTl9OQU1FID0gQkFTRV9QTFVHSU5fTkFNRTtcblBsdWdpbi5yZWdpc3RlclBsdWdpbihCQVNFX1BMVUdJTl9OQU1FLCBQbHVnaW4pO1xuLyoqXG4gKiBEb2N1bWVudGVkIGluIHBsYXllci5qc1xuICpcbiAqIEBpZ25vcmVcbiAqL1xuXG5QbGF5ZXIucHJvdG90eXBlLnVzaW5nUGx1Z2luID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICEhdGhpc1tQTFVHSU5fQ0FDSEVfS0VZXSAmJiB0aGlzW1BMVUdJTl9DQUNIRV9LRVldW25hbWVdID09PSB0cnVlO1xufTtcbi8qKlxuICogRG9jdW1lbnRlZCBpbiBwbGF5ZXIuanNcbiAqXG4gKiBAaWdub3JlXG4gKi9cblxuXG5QbGF5ZXIucHJvdG90eXBlLmhhc1BsdWdpbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAhIXBsdWdpbkV4aXN0cyhuYW1lKTtcbn07XG4vKipcbiAqIFNpZ25hbHMgdGhhdCBhIHBsdWdpbiBpcyBhYm91dCB0byBiZSBzZXQgdXAgb24gYSBwbGF5ZXIuXG4gKlxuICogQGV2ZW50ICAgIFBsYXllciNiZWZvcmVwbHVnaW5zZXR1cFxuICogQHR5cGUgICAgIHtQbHVnaW5+UGx1Z2luRXZlbnRIYXNofVxuICovXG5cbi8qKlxuICogU2lnbmFscyB0aGF0IGEgcGx1Z2luIGlzIGFib3V0IHRvIGJlIHNldCB1cCBvbiBhIHBsYXllciAtIGJ5IG5hbWUuIFRoZSBuYW1lXG4gKiBpcyB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luLlxuICpcbiAqIEBldmVudCAgICBQbGF5ZXIjYmVmb3JlcGx1Z2luc2V0dXA6JG5hbWVcbiAqIEB0eXBlICAgICB7UGx1Z2luflBsdWdpbkV2ZW50SGFzaH1cbiAqL1xuXG4vKipcbiAqIFNpZ25hbHMgdGhhdCBhIHBsdWdpbiBoYXMganVzdCBiZWVuIHNldCB1cCBvbiBhIHBsYXllci5cbiAqXG4gKiBAZXZlbnQgICAgUGxheWVyI3BsdWdpbnNldHVwXG4gKiBAdHlwZSAgICAge1BsdWdpbn5QbHVnaW5FdmVudEhhc2h9XG4gKi9cblxuLyoqXG4gKiBTaWduYWxzIHRoYXQgYSBwbHVnaW4gaGFzIGp1c3QgYmVlbiBzZXQgdXAgb24gYSBwbGF5ZXIgLSBieSBuYW1lLiBUaGUgbmFtZVxuICogaXMgdGhlIG5hbWUgb2YgdGhlIHBsdWdpbi5cbiAqXG4gKiBAZXZlbnQgICAgUGxheWVyI3BsdWdpbnNldHVwOiRuYW1lXG4gKiBAdHlwZSAgICAge1BsdWdpbn5QbHVnaW5FdmVudEhhc2h9XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiAge09iamVjdH0gUGx1Z2luflBsdWdpbkV2ZW50SGFzaFxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbnN0YW5jZVxuICogICAgICAgICAgIEZvciBiYXNpYyBwbHVnaW5zLCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwbHVnaW4gZnVuY3Rpb24uIEZvclxuICogICAgICAgICAgIGFkdmFuY2VkIHBsdWdpbnMsIHRoZSBwbHVnaW4gaW5zdGFuY2Ugb24gd2hpY2ggdGhlIGV2ZW50IGlzIGZpcmVkLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHBsdWdpbi5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGx1Z2luXG4gKiAgICAgICAgICAgRm9yIGJhc2ljIHBsdWdpbnMsIHRoZSBwbHVnaW4gZnVuY3Rpb24uIEZvciBhZHZhbmNlZCBwbHVnaW5zLCB0aGVcbiAqICAgICAgICAgICBwbHVnaW4gY2xhc3MvY29uc3RydWN0b3IuXG4gKi9cblxuLyoqXG4gKiBAZmlsZSBleHRlbmQuanNcbiAqIEBtb2R1bGUgZXh0ZW5kXG4gKi9cblxuLyoqXG4gKiBBIGNvbWJpbmF0aW9uIG9mIG5vZGUgaW5oZXJpdHMgYW5kIGJhYmVsJ3MgaW5oZXJpdHMgKGFmdGVyIHRyYW5zcGlsZSkuXG4gKiBCb3RoIHdvcmsgdGhlIHNhbWUgYnV0IG5vZGUgYWRkcyBgc3VwZXJfYCB0byB0aGUgc3ViQ2xhc3NcbiAqIGFuZCBCYWJsZSBhZGRzIHRoZSBzdXBlckNsYXNzIGFzIF9fcHJvdG9fXy4gQm90aCBzZWVtIHVzZWZ1bC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3ViQ2xhc3NcbiAqICAgICAgICBUaGUgY2xhc3MgdG8gaW5oZXJpdCB0b1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdXBlckNsYXNzXG4gKiAgICAgICAgVGhlIGNsYXNzIHRvIGluaGVyaXQgZnJvbVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHN1cGVyQ2xhc3MpIHtcbiAgICAvLyBub2RlXG4gICAgc3ViQ2xhc3Muc3VwZXJfID0gc3VwZXJDbGFzcztcbiAgfVxufTtcbi8qKlxuICogVXNlZCB0byBzdWJjbGFzcyBhbiBleGlzdGluZyBjbGFzcyBieSBlbXVsYXRpbmcgRVMgc3ViY2xhc3NpbmcgdXNpbmcgdGhlXG4gKiBgZXh0ZW5kc2Aga2V5d29yZC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgTXlDb21wb25lbnQgPSB2aWRlb2pzLmV4dGVuZCh2aWRlb2pzLmdldENvbXBvbmVudCgnQ29tcG9uZW50JyksIHtcbiAqICAgbXlDdXN0b21NZXRob2Q6IGZ1bmN0aW9uKCkge1xuICogICAgIC8vIERvIHRoaW5ncyBpbiBteSBtZXRob2QuXG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIEBwYXJhbSAgICB7RnVuY3Rpb259IHN1cGVyQ2xhc3NcbiAqICAgICAgICAgICBUaGUgY2xhc3MgdG8gaW5oZXJpdCBmcm9tXG4gKlxuICogQHBhcmFtICAgIHtPYmplY3R9ICAgW3N1YkNsYXNzTWV0aG9kcz17fV1cbiAqICAgICAgICAgICBNZXRob2RzIG9mIHRoZSBuZXcgY2xhc3NcbiAqXG4gKiBAcmV0dXJuICAge0Z1bmN0aW9ufVxuICogICAgICAgICAgIFRoZSBuZXcgY2xhc3Mgd2l0aCBzdWJDbGFzc01ldGhvZHMgdGhhdCBpbmhlcml0ZWQgc3VwZXJDbGFzcy5cbiAqL1xuXG5cbnZhciBleHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoc3VwZXJDbGFzcywgc3ViQ2xhc3NNZXRob2RzKSB7XG4gIGlmIChzdWJDbGFzc01ldGhvZHMgPT09IHZvaWQgMCkge1xuICAgIHN1YkNsYXNzTWV0aG9kcyA9IHt9O1xuICB9XG5cbiAgdmFyIHN1YkNsYXNzID0gZnVuY3Rpb24gc3ViQ2xhc3MoKSB7XG4gICAgc3VwZXJDbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBtZXRob2RzID0ge307XG5cbiAgaWYgKHR5cGVvZiBzdWJDbGFzc01ldGhvZHMgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHN1YkNsYXNzTWV0aG9kcy5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgc3ViQ2xhc3MgPSBzdWJDbGFzc01ldGhvZHMuY29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgbWV0aG9kcyA9IHN1YkNsYXNzTWV0aG9kcztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3ViQ2xhc3NNZXRob2RzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3ViQ2xhc3MgPSBzdWJDbGFzc01ldGhvZHM7XG4gIH1cblxuICBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyAvLyBFeHRlbmQgc3ViT2JqJ3MgcHJvdG90eXBlIHdpdGggZnVuY3Rpb25zIGFuZCBvdGhlciBwcm9wZXJ0aWVzIGZyb20gcHJvcHNcblxuXG4gIGZvciAodmFyIG5hbWUgaW4gbWV0aG9kcykge1xuICAgIGlmIChtZXRob2RzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdWJDbGFzcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2RzW25hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJDbGFzcztcbn07XG5cbi8qKlxuICogQGZpbGUgdmlkZW8uanNcbiAqIEBtb2R1bGUgdmlkZW9qc1xuICovXG4vKipcbiAqIE5vcm1hbGl6ZSBhbiBgaWRgIHZhbHVlIGJ5IHRyaW1taW5nIG9mZiBhIGxlYWRpbmcgYCNgXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IGlkXG4gKiAgICAgICAgICBBIHN0cmluZywgbWF5YmUgd2l0aCBhIGxlYWRpbmcgYCNgLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgIFRoZSBzdHJpbmcsIHdpdGhvdXQgYW55IGxlYWRpbmcgYCNgLlxuICovXG5cbnZhciBub3JtYWxpemVJZCA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUlkKGlkKSB7XG4gIHJldHVybiBpZC5pbmRleE9mKCcjJykgPT09IDAgPyBpZC5zbGljZSgxKSA6IGlkO1xufTtcbi8qKlxuICogVGhlIGB2aWRlb2pzKClgIGZ1bmN0aW9uIGRvdWJsZXMgYXMgdGhlIG1haW4gZnVuY3Rpb24gZm9yIHVzZXJzIHRvIGNyZWF0ZSBhXG4gKiB7QGxpbmsgUGxheWVyfSBpbnN0YW5jZSBhcyB3ZWxsIGFzIHRoZSBtYWluIGxpYnJhcnkgbmFtZXNwYWNlLlxuICpcbiAqIEl0IGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBnZXR0ZXIgZm9yIGEgcHJlLWV4aXN0aW5nIHtAbGluayBQbGF5ZXJ9IGluc3RhbmNlLlxuICogSG93ZXZlciwgd2UgX3N0cm9uZ2x5XyByZWNvbW1lbmQgdXNpbmcgYHZpZGVvanMuZ2V0UGxheWVyKClgIGZvciB0aGlzXG4gKiBwdXJwb3NlIGJlY2F1c2UgaXQgYXZvaWRzIGFueSBwb3RlbnRpYWwgZm9yIHVuaW50ZW5kZWQgaW5pdGlhbGl6YXRpb24uXG4gKlxuICogRHVlIHRvIFtsaW1pdGF0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2pzZG9jMy9qc2RvYy9pc3N1ZXMvOTU1I2lzc3VlY29tbWVudC0zMTM4MjkxNDkpXG4gKiBvZiBvdXIgSlNEb2MgdGVtcGxhdGUsIHdlIGNhbm5vdCBwcm9wZXJseSBkb2N1bWVudCB0aGlzIGFzIGJvdGggYSBmdW5jdGlvblxuICogYW5kIGEgbmFtZXNwYWNlLCBzbyBpdHMgZnVuY3Rpb24gc2lnbmF0dXJlIGlzIGRvY3VtZW50ZWQgaGVyZS5cbiAqXG4gKiAjIyMjIEFyZ3VtZW50c1xuICogIyMjIyMgaWRcbiAqIHN0cmluZ3xFbGVtZW50LCAqKnJlcXVpcmVkKipcbiAqXG4gKiBWaWRlbyBlbGVtZW50IG9yIHZpZGVvIGVsZW1lbnQgSUQuXG4gKlxuICogIyMjIyMgb3B0aW9uc1xuICogT2JqZWN0LCBvcHRpb25hbFxuICpcbiAqIE9wdGlvbnMgb2JqZWN0IGZvciBwcm92aWRpbmcgc2V0dGluZ3MuXG4gKiBTZWU6IFtPcHRpb25zIEd1aWRlXShodHRwczovL2RvY3MudmlkZW9qcy5jb20vdHV0b3JpYWwtb3B0aW9ucy5odG1sKS5cbiAqXG4gKiAjIyMjIyByZWFkeVxuICoge0BsaW5rIENvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSwgb3B0aW9uYWxcbiAqXG4gKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSB7QGxpbmsgUGxheWVyfSBhbmQge0BsaW5rIFRlY2h9IGFyZSByZWFkeS5cbiAqXG4gKiAjIyMjIFJldHVybiBWYWx1ZVxuICpcbiAqIFRoZSBgdmlkZW9qcygpYCBmdW5jdGlvbiByZXR1cm5zIGEge0BsaW5rIFBsYXllcn0gaW5zdGFuY2UuXG4gKlxuICogQG5hbWVzcGFjZVxuICpcbiAqIEBib3Jyb3dzIEF1ZGlvVHJhY2sgYXMgQXVkaW9UcmFja1xuICogQGJvcnJvd3MgQ29tcG9uZW50LmdldENvbXBvbmVudCBhcyBnZXRDb21wb25lbnRcbiAqIEBib3Jyb3dzIG1vZHVsZTpjb21wdXRlZC1zdHlsZX5jb21wdXRlZFN0eWxlIGFzIGNvbXB1dGVkU3R5bGVcbiAqIEBib3Jyb3dzIG1vZHVsZTpldmVudHMub24gYXMgb25cbiAqIEBib3Jyb3dzIG1vZHVsZTpldmVudHMub25lIGFzIG9uZVxuICogQGJvcnJvd3MgbW9kdWxlOmV2ZW50cy5vZmYgYXMgb2ZmXG4gKiBAYm9ycm93cyBtb2R1bGU6ZXZlbnRzLnRyaWdnZXIgYXMgdHJpZ2dlclxuICogQGJvcnJvd3MgRXZlbnRUYXJnZXQgYXMgRXZlbnRUYXJnZXRcbiAqIEBib3Jyb3dzIG1vZHVsZTpleHRlbmR+ZXh0ZW5kIGFzIGV4dGVuZFxuICogQGJvcnJvd3MgbW9kdWxlOmZuLmJpbmQgYXMgYmluZFxuICogQGJvcnJvd3MgbW9kdWxlOmZvcm1hdC10aW1lLmZvcm1hdFRpbWUgYXMgZm9ybWF0VGltZVxuICogQGJvcnJvd3MgbW9kdWxlOmZvcm1hdC10aW1lLnJlc2V0Rm9ybWF0VGltZSBhcyByZXNldEZvcm1hdFRpbWVcbiAqIEBib3Jyb3dzIG1vZHVsZTpmb3JtYXQtdGltZS5zZXRGb3JtYXRUaW1lIGFzIHNldEZvcm1hdFRpbWVcbiAqIEBib3Jyb3dzIG1vZHVsZTptZXJnZS1vcHRpb25zLm1lcmdlT3B0aW9ucyBhcyBtZXJnZU9wdGlvbnNcbiAqIEBib3Jyb3dzIG1vZHVsZTptaWRkbGV3YXJlLnVzZSBhcyB1c2VcbiAqIEBib3Jyb3dzIFBsYXllci5wbGF5ZXJzIGFzIHBsYXllcnNcbiAqIEBib3Jyb3dzIFBsdWdpbi5yZWdpc3RlclBsdWdpbiBhcyByZWdpc3RlclBsdWdpblxuICogQGJvcnJvd3MgUGx1Z2luLmRlcmVnaXN0ZXJQbHVnaW4gYXMgZGVyZWdpc3RlclBsdWdpblxuICogQGJvcnJvd3MgUGx1Z2luLmdldFBsdWdpbnMgYXMgZ2V0UGx1Z2luc1xuICogQGJvcnJvd3MgUGx1Z2luLmdldFBsdWdpbiBhcyBnZXRQbHVnaW5cbiAqIEBib3Jyb3dzIFBsdWdpbi5nZXRQbHVnaW5WZXJzaW9uIGFzIGdldFBsdWdpblZlcnNpb25cbiAqIEBib3Jyb3dzIFRlY2guZ2V0VGVjaCBhcyBnZXRUZWNoXG4gKiBAYm9ycm93cyBUZWNoLnJlZ2lzdGVyVGVjaCBhcyByZWdpc3RlclRlY2hcbiAqIEBib3Jyb3dzIFRleHRUcmFjayBhcyBUZXh0VHJhY2tcbiAqIEBib3Jyb3dzIG1vZHVsZTp0aW1lLXJhbmdlcy5jcmVhdGVUaW1lUmFuZ2VzIGFzIGNyZWF0ZVRpbWVSYW5nZVxuICogQGJvcnJvd3MgbW9kdWxlOnRpbWUtcmFuZ2VzLmNyZWF0ZVRpbWVSYW5nZXMgYXMgY3JlYXRlVGltZVJhbmdlc1xuICogQGJvcnJvd3MgbW9kdWxlOnVybC5pc0Nyb3NzT3JpZ2luIGFzIGlzQ3Jvc3NPcmlnaW5cbiAqIEBib3Jyb3dzIG1vZHVsZTp1cmwucGFyc2VVcmwgYXMgcGFyc2VVcmxcbiAqIEBib3Jyb3dzIFZpZGVvVHJhY2sgYXMgVmlkZW9UcmFja1xuICpcbiAqIEBwYXJhbSAge3N0cmluZ3xFbGVtZW50fSBpZFxuICogICAgICAgICBWaWRlbyBlbGVtZW50IG9yIHZpZGVvIGVsZW1lbnQgSUQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAqICAgICAgICAgT3B0aW9ucyBvYmplY3QgZm9yIHByb3ZpZGluZyBzZXR0aW5ncy5cbiAqICAgICAgICAgU2VlOiBbT3B0aW9ucyBHdWlkZV0oaHR0cHM6Ly9kb2NzLnZpZGVvanMuY29tL3R1dG9yaWFsLW9wdGlvbnMuaHRtbCkuXG4gKlxuICogQHBhcmFtICB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IFtyZWFkeV1cbiAqICAgICAgICAgQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUge0BsaW5rIFBsYXllcn0gYW5kIHtAbGluayBUZWNofSBhcmVcbiAqICAgICAgICAgcmVhZHkuXG4gKlxuICogQHJldHVybiB7UGxheWVyfVxuICogICAgICAgICBUaGUgYHZpZGVvanMoKWAgZnVuY3Rpb24gcmV0dXJucyBhIHtAbGluayBQbGF5ZXJ8UGxheWVyfSBpbnN0YW5jZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZpZGVvanMkMShpZCwgb3B0aW9ucywgcmVhZHkpIHtcbiAgdmFyIHBsYXllciA9IHZpZGVvanMkMS5nZXRQbGF5ZXIoaWQpO1xuXG4gIGlmIChwbGF5ZXIpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgbG9nLndhcm4oXCJQbGF5ZXIgXFxcIlwiICsgaWQgKyBcIlxcXCIgaXMgYWxyZWFkeSBpbml0aWFsaXNlZC4gT3B0aW9ucyB3aWxsIG5vdCBiZSBhcHBsaWVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAocmVhZHkpIHtcbiAgICAgIHBsYXllci5yZWFkeShyZWFkeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBsYXllcjtcbiAgfVxuXG4gIHZhciBlbCA9IHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgPyAkKCcjJyArIG5vcm1hbGl6ZUlkKGlkKSkgOiBpZDtcblxuICBpZiAoIWlzRWwoZWwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGVsZW1lbnQgb3IgSUQgc3VwcGxpZWQgaXMgbm90IHZhbGlkLiAodmlkZW9qcyknKTtcbiAgfSAvLyBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKSB3aWxsIG9ubHkgY2hlY2sgaWYgZWwgaXMgY29udGFpbmVkIHdpdGhpbiB0aGF0IG9uZSBkb2N1bWVudC5cbiAgLy8gVGhpcyBjYXVzZXMgcHJvYmxlbXMgZm9yIGVsZW1lbnRzIGluIGlmcmFtZXMuXG4gIC8vIEluc3RlYWQsIHVzZSB0aGUgZWxlbWVudCdzIG93bmVyRG9jdW1lbnQgaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGRvY3VtZW50LlxuICAvLyBUaGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgdGhlIGVsZW1lbnQgaXMgaW5kZWVkIGluIHRoZSBkb20gb2YgdGhhdCBkb2N1bWVudC5cbiAgLy8gQWRkaXRpb25hbGx5LCBjaGVjayB0aGF0IHRoZSBkb2N1bWVudCBpbiBxdWVzdGlvbiBoYXMgYSBkZWZhdWx0IHZpZXcuXG4gIC8vIElmIHRoZSBkb2N1bWVudCBpcyBubyBsb25nZXIgYXR0YWNoZWQgdG8gdGhlIGRvbSwgdGhlIGRlZmF1bHRWaWV3IG9mIHRoZSBkb2N1bWVudCB3aWxsIGJlIG51bGwuXG5cblxuICBpZiAoIWVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgIWVsLm93bmVyRG9jdW1lbnQuYm9keS5jb250YWlucyhlbCkpIHtcbiAgICBsb2cud2FybignVGhlIGVsZW1lbnQgc3VwcGxpZWQgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBET00nKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2aWRlb2pzJDEuaG9va3MoJ2JlZm9yZXNldHVwJykuZm9yRWFjaChmdW5jdGlvbiAoaG9va0Z1bmN0aW9uKSB7XG4gICAgdmFyIG9wdHMgPSBob29rRnVuY3Rpb24oZWwsIG1lcmdlT3B0aW9ucyhvcHRpb25zKSk7XG5cbiAgICBpZiAoIWlzT2JqZWN0KG9wdHMpIHx8IEFycmF5LmlzQXJyYXkob3B0cykpIHtcbiAgICAgIGxvZy5lcnJvcigncGxlYXNlIHJldHVybiBhbiBvYmplY3QgaW4gYmVmb3Jlc2V0dXAgaG9va3MnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gbWVyZ2VPcHRpb25zKG9wdGlvbnMsIG9wdHMpO1xuICB9KTsgLy8gV2UgZ2V0IHRoZSBjdXJyZW50IFwiUGxheWVyXCIgY29tcG9uZW50IGhlcmUgaW4gY2FzZSBhbiBpbnRlZ3JhdGlvbiBoYXNcbiAgLy8gcmVwbGFjZWQgaXQgd2l0aCBhIGN1c3RvbSBwbGF5ZXIuXG5cbiAgdmFyIFBsYXllckNvbXBvbmVudCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQoJ1BsYXllcicpO1xuICBwbGF5ZXIgPSBuZXcgUGxheWVyQ29tcG9uZW50KGVsLCBvcHRpb25zLCByZWFkeSk7XG4gIHZpZGVvanMkMS5ob29rcygnc2V0dXAnKS5mb3JFYWNoKGZ1bmN0aW9uIChob29rRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gaG9va0Z1bmN0aW9uKHBsYXllcik7XG4gIH0pO1xuICByZXR1cm4gcGxheWVyO1xufVxuLyoqXG4gKiBBbiBPYmplY3QgdGhhdCBjb250YWlucyBsaWZlY3ljbGUgaG9va3MgYXMga2V5cyB3aGljaCBwb2ludCB0byBhbiBhcnJheVxuICogb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHJ1biB3aGVuIGEgbGlmZWN5Y2xlIGlzIHRyaWdnZXJlZFxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52aWRlb2pzJDEuaG9va3NfID0ge307XG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgaG9va3MgZm9yIGEgc3BlY2lmaWMgbGlmZWN5Y2xlXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgIHRoZSBsaWZlY3lsZSB0byBnZXQgaG9va3MgZnJvbVxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufEZ1bmN0aW9uW119IFtmbl1cbiAqICAgICAgICAgT3B0aW9uYWxseSBhZGQgYSBob29rIChvciBob29rcykgdG8gdGhlIGxpZmVjeWNsZSB0aGF0IHlvdXIgYXJlIGdldHRpbmcuXG4gKlxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIGFuIGFycmF5IG9mIGhvb2tzLCBvciBhbiBlbXB0eSBhcnJheSBpZiB0aGVyZSBhcmUgbm9uZS5cbiAqL1xuXG52aWRlb2pzJDEuaG9va3MgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXSA9IHZpZGVvanMkMS5ob29rc19bdHlwZV0gfHwgW107XG5cbiAgaWYgKGZuKSB7XG4gICAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXSA9IHZpZGVvanMkMS5ob29rc19bdHlwZV0uY29uY2F0KGZuKTtcbiAgfVxuXG4gIHJldHVybiB2aWRlb2pzJDEuaG9va3NfW3R5cGVdO1xufTtcbi8qKlxuICogQWRkIGEgZnVuY3Rpb24gaG9vayB0byBhIHNwZWNpZmljIHZpZGVvanMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgdGhlIGxpZmVjeWNsZSB0byBob29rIHRoZSBmdW5jdGlvbiB0by5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEZ1bmN0aW9uW119XG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGZ1bmN0aW9ucyB0byBhdHRhY2guXG4gKi9cblxuXG52aWRlb2pzJDEuaG9vayA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICB2aWRlb2pzJDEuaG9va3ModHlwZSwgZm4pO1xufTtcbi8qKlxuICogQWRkIGEgZnVuY3Rpb24gaG9vayB0aGF0IHdpbGwgb25seSBydW4gb25jZSB0byBhIHNwZWNpZmljIHZpZGVvanMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgdGhlIGxpZmVjeWNsZSB0byBob29rIHRoZSBmdW5jdGlvbiB0by5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEZ1bmN0aW9uW119XG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGZ1bmN0aW9ucyB0byBhdHRhY2guXG4gKi9cblxuXG52aWRlb2pzJDEuaG9va09uY2UgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgdmlkZW9qcyQxLmhvb2tzKHR5cGUsIFtdLmNvbmNhdChmbikubWFwKGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgIHZpZGVvanMkMS5yZW1vdmVIb29rKHR5cGUsIHdyYXBwZXIpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH0pKTtcbn07XG4vKipcbiAqIFJlbW92ZSBhIGhvb2sgZnJvbSBhIHNwZWNpZmljIHZpZGVvanMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZVxuICogICAgICAgICB0aGUgbGlmZWN5Y2xlIHRoYXQgdGhlIGZ1bmN0aW9uIGhvb2tlZCB0b1xuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmblxuICogICAgICAgICBUaGUgaG9va2VkIGZ1bmN0aW9uIHRvIHJlbW92ZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IHdhcyByZW1vdmVkIG9yIHVuZGVmXG4gKi9cblxuXG52aWRlb2pzJDEucmVtb3ZlSG9vayA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICB2YXIgaW5kZXggPSB2aWRlb2pzJDEuaG9va3ModHlwZSkuaW5kZXhPZihmbik7XG5cbiAgaWYgKGluZGV4IDw9IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXSA9IHZpZGVvanMkMS5ob29rc19bdHlwZV0uc2xpY2UoKTtcbiAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXS5zcGxpY2UoaW5kZXgsIDEpO1xuICByZXR1cm4gdHJ1ZTtcbn07IC8vIEFkZCBkZWZhdWx0IHN0eWxlc1xuXG5cbmlmICh3aW5kb3ckMS5WSURFT0pTX05PX0RZTkFNSUNfU1RZTEUgIT09IHRydWUgJiYgaXNSZWFsKCkpIHtcbiAgdmFyIHN0eWxlID0gJCgnLnZqcy1zdHlsZXMtZGVmYXVsdHMnKTtcblxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQoJ3Zqcy1zdHlsZXMtZGVmYXVsdHMnKTtcbiAgICB2YXIgaGVhZCA9ICQoJ2hlYWQnKTtcblxuICAgIGlmIChoZWFkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzZXRUZXh0Q29udGVudChzdHlsZSwgXCJcXG4gICAgICAudmlkZW8tanMge1xcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAxNTBweDtcXG4gICAgICB9XFxuXFxuICAgICAgLnZqcy1mbHVpZCB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogNTYuMjUlXFxuICAgICAgfVxcbiAgICBcIik7XG4gIH1cbn0gLy8gUnVuIEF1dG8tbG9hZCBwbGF5ZXJzXG4vLyBZb3UgaGF2ZSB0byB3YWl0IGF0IGxlYXN0IG9uY2UgaW4gY2FzZSB0aGlzIHNjcmlwdCBpcyBsb2FkZWQgYWZ0ZXIgeW91clxuLy8gdmlkZW8gaW4gdGhlIERPTSAod2VpcmQgYmVoYXZpb3Igb25seSB3aXRoIG1pbmlmaWVkIHZlcnNpb24pXG5cblxuYXV0b1NldHVwVGltZW91dCgxLCB2aWRlb2pzJDEpO1xuLyoqXG4gKiBDdXJyZW50IFZpZGVvLmpzIHZlcnNpb24uIEZvbGxvd3MgW3NlbWFudGljIHZlcnNpb25pbmddKGh0dHBzOi8vc2VtdmVyLm9yZy8pLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblxudmlkZW9qcyQxLlZFUlNJT04gPSB2ZXJzaW9uO1xuLyoqXG4gKiBUaGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LiBUaGVzZSBhcmUgdGhlIHNldHRpbmdzIHRoYXQgdGFrZSBlZmZlY3RcbiAqIGlmIG5vIG92ZXJyaWRlcyBhcmUgc3BlY2lmaWVkIHdoZW4gdGhlIHBsYXllciBpcyBjcmVhdGVkLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmlkZW9qcyQxLm9wdGlvbnMgPSBQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfO1xuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdpdGggdGhlIGN1cnJlbnRseSBjcmVhdGVkIHBsYXllcnMsIGtleWVkIGJ5IHBsYXllciBJRFxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgVGhlIGNyZWF0ZWQgcGxheWVyc1xuICovXG5cbnZpZGVvanMkMS5nZXRQbGF5ZXJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUGxheWVyLnBsYXllcnM7XG59O1xuLyoqXG4gKiBHZXQgYSBzaW5nbGUgcGxheWVyIGJhc2VkIG9uIGFuIElEIG9yIERPTSBlbGVtZW50LlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHRvIGNoZWNrIGlmIGFuIGVsZW1lbnQgb3IgSUQgaGFzIGFuIGFzc29jaWF0ZWRcbiAqIFZpZGVvLmpzIHBsYXllciwgYnV0IG5vdCBjcmVhdGUgb25lIGlmIGl0IGRvZXNuJ3QuXG4gKlxuICogQHBhcmFtICAge3N0cmluZ3xFbGVtZW50fSBpZFxuICogICAgICAgICAgQW4gSFRNTCBlbGVtZW50IC0gYDx2aWRlbz5gLCBgPGF1ZGlvPmAsIG9yIGA8dmlkZW8tanM+YCAtXG4gKiAgICAgICAgICBvciBhIHN0cmluZyBtYXRjaGluZyB0aGUgYGlkYCBvZiBzdWNoIGFuIGVsZW1lbnQuXG4gKlxuICogQHJldHVybiB7UGxheWVyfHVuZGVmaW5lZH1cbiAqICAgICAgICAgIEEgcGxheWVyIGluc3RhbmNlIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIGlzIG5vIHBsYXllciBpbnN0YW5jZVxuICogICAgICAgICAgbWF0Y2hpbmcgdGhlIGFyZ3VtZW50LlxuICovXG5cblxudmlkZW9qcyQxLmdldFBsYXllciA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgcGxheWVycyA9IFBsYXllci5wbGF5ZXJzO1xuICB2YXIgdGFnO1xuXG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG5JZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgICB2YXIgcGxheWVyID0gcGxheWVyc1tuSWRdO1xuXG4gICAgaWYgKHBsYXllcikge1xuICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICB9XG5cbiAgICB0YWcgPSAkKCcjJyArIG5JZCk7XG4gIH0gZWxzZSB7XG4gICAgdGFnID0gaWQ7XG4gIH1cblxuICBpZiAoaXNFbCh0YWcpKSB7XG4gICAgdmFyIF90YWcgPSB0YWcsXG4gICAgICAgIF9wbGF5ZXIgPSBfdGFnLnBsYXllcixcbiAgICAgICAgcGxheWVySWQgPSBfdGFnLnBsYXllcklkOyAvLyBFbGVtZW50IG1heSBoYXZlIGEgYHBsYXllcmAgcHJvcGVydHkgcmVmZXJyaW5nIHRvIGFuIGFscmVhZHkgY3JlYXRlZFxuICAgIC8vIHBsYXllciBpbnN0YW5jZS4gSWYgc28sIHJldHVybiB0aGF0LlxuXG4gICAgaWYgKF9wbGF5ZXIgfHwgcGxheWVyc1twbGF5ZXJJZF0pIHtcbiAgICAgIHJldHVybiBfcGxheWVyIHx8IHBsYXllcnNbcGxheWVySWRdO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgY3VycmVudCBwbGF5ZXJzLlxuICpcbiAqIEByZXR1cm4ge0FycmF5fVxuICogICAgICAgICBBbiBhcnJheSBvZiBhbGwgcGxheWVycy4gVGhlIGFycmF5IHdpbGwgYmUgaW4gdGhlIG9yZGVyIHRoYXRcbiAqICAgICAgICAgYE9iamVjdC5rZXlzYCBwcm92aWRlcywgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgdmFyeSBiZXR3ZWVuXG4gKiAgICAgICAgIEphdmFTY3JpcHQgZW5naW5lcy5cbiAqXG4gKi9cblxuXG52aWRlb2pzJDEuZ2V0QWxsUGxheWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICgvLyBEaXNwb3NlZCBwbGF5ZXJzIGxlYXZlIGEga2V5IHdpdGggYSBgbnVsbGAgdmFsdWUsIHNvIHdlIG5lZWQgdG8gbWFrZSBzdXJlXG4gICAgLy8gd2UgZmlsdGVyIHRob3NlIG91dC5cbiAgICBPYmplY3Qua2V5cyhQbGF5ZXIucGxheWVycykubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gUGxheWVyLnBsYXllcnNba107XG4gICAgfSkuZmlsdGVyKEJvb2xlYW4pXG4gICk7XG59O1xuXG52aWRlb2pzJDEucGxheWVycyA9IFBsYXllci5wbGF5ZXJzO1xudmlkZW9qcyQxLmdldENvbXBvbmVudCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQ7XG4vKipcbiAqIFJlZ2lzdGVyIGEgY29tcG9uZW50IHNvIGl0IGNhbiByZWZlcnJlZCB0byBieSBuYW1lLiBVc2VkIHdoZW4gYWRkaW5nIHRvIG90aGVyXG4gKiBjb21wb25lbnRzLCBlaXRoZXIgdGhyb3VnaCBhZGRDaGlsZCBgY29tcG9uZW50LmFkZENoaWxkKCdteUNvbXBvbmVudCcpYCBvciB0aHJvdWdoXG4gKiBkZWZhdWx0IGNoaWxkcmVuIG9wdGlvbnMgIGB7IGNoaWxkcmVuOiBbJ215Q29tcG9uZW50J10gfWAuXG4gKlxuICogPiBOT1RFOiBZb3UgY291bGQgYWxzbyBqdXN0IGluaXRpYWxpemUgdGhlIGNvbXBvbmVudCBiZWZvcmUgYWRkaW5nLlxuICogYGNvbXBvbmVudC5hZGRDaGlsZChuZXcgTXlDb21wb25lbnQoKSk7YFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgVGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wXG4gKiAgICAgICAgVGhlIGNvbXBvbmVudCBjbGFzc1xuICpcbiAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAqICAgICAgICAgVGhlIG5ld2x5IHJlZ2lzdGVyZWQgY29tcG9uZW50XG4gKi9cblxudmlkZW9qcyQxLnJlZ2lzdGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUsIGNvbXApIHtcbiAgaWYgKFRlY2guaXNUZWNoKGNvbXApKSB7XG4gICAgbG9nLndhcm4oXCJUaGUgXCIgKyBuYW1lICsgXCIgdGVjaCB3YXMgcmVnaXN0ZXJlZCBhcyBhIGNvbXBvbmVudC4gSXQgc2hvdWxkIGluc3RlYWQgYmUgcmVnaXN0ZXJlZCB1c2luZyB2aWRlb2pzLnJlZ2lzdGVyVGVjaChuYW1lLCB0ZWNoKVwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudC5jYWxsKENvbXBvbmVudCwgbmFtZSwgY29tcCk7XG59O1xuXG52aWRlb2pzJDEuZ2V0VGVjaCA9IFRlY2guZ2V0VGVjaDtcbnZpZGVvanMkMS5yZWdpc3RlclRlY2ggPSBUZWNoLnJlZ2lzdGVyVGVjaDtcbnZpZGVvanMkMS51c2UgPSB1c2U7XG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNhbiBiZSByZXR1cm5lZCBieSBhIG1pZGRsZXdhcmUgdG8gc2lnbmlmeVxuICogdGhhdCB0aGUgbWlkZGxld2FyZSBpcyBiZWluZyB0ZXJtaW5hdGVkLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge29iamVjdH0gbWlkZGxld2FyZS5URVJNSU5BVE9SXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHZpZGVvanMkMSwgJ21pZGRsZXdhcmUnLCB7XG4gIHZhbHVlOiB7fSxcbiAgd3JpdGVhYmxlOiBmYWxzZSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkodmlkZW9qcyQxLm1pZGRsZXdhcmUsICdURVJNSU5BVE9SJywge1xuICB2YWx1ZTogVEVSTUlOQVRPUixcbiAgd3JpdGVhYmxlOiBmYWxzZSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSk7XG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIHRoZSB7QGxpbmsgbW9kdWxlOmJyb3dzZXJ8YnJvd3NlciB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlICB7QGxpbmsgbW9kdWxlOmJyb3dzZXJ8YnJvd3Nlcn1cbiAqL1xuXG52aWRlb2pzJDEuYnJvd3NlciA9IGJyb3dzZXI7XG4vKipcbiAqIFVzZSB7QGxpbmsgbW9kdWxlOmJyb3dzZXIuVE9VQ0hfRU5BQkxFRHxicm93c2VyLlRPVUNIX0VOQUJMRUR9IGluc3RlYWQ7IG9ubHlcbiAqIGluY2x1ZGVkIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5IHdpdGggNC54LlxuICpcbiAqIEBkZXByZWNhdGVkIFNpbmNlIHZlcnNpb24gNS4wLCB1c2Uge0BsaW5rIG1vZHVsZTpicm93c2VyLlRPVUNIX0VOQUJMRUR8YnJvd3Nlci5UT1VDSF9FTkFCTEVEIGluc3RlYWQuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuXG52aWRlb2pzJDEuVE9VQ0hfRU5BQkxFRCA9IFRPVUNIX0VOQUJMRUQ7XG52aWRlb2pzJDEuZXh0ZW5kID0gZXh0ZW5kO1xudmlkZW9qcyQxLm1lcmdlT3B0aW9ucyA9IG1lcmdlT3B0aW9ucztcbnZpZGVvanMkMS5iaW5kID0gYmluZDtcbnZpZGVvanMkMS5yZWdpc3RlclBsdWdpbiA9IFBsdWdpbi5yZWdpc3RlclBsdWdpbjtcbnZpZGVvanMkMS5kZXJlZ2lzdGVyUGx1Z2luID0gUGx1Z2luLmRlcmVnaXN0ZXJQbHVnaW47XG4vKipcbiAqIERlcHJlY2F0ZWQgbWV0aG9kIHRvIHJlZ2lzdGVyIGEgcGx1Z2luIHdpdGggVmlkZW8uanNcbiAqXG4gKiBAZGVwcmVjYXRlZCB2aWRlb2pzLnBsdWdpbigpIGlzIGRlcHJlY2F0ZWQ7IHVzZSB2aWRlb2pzLnJlZ2lzdGVyUGx1Z2luKCkgaW5zdGVhZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgVGhlIHBsdWdpbiBuYW1lXG4gKlxuICogQHBhcmFtIHtQbHVnaW58RnVuY3Rpb259IHBsdWdpblxuICogICAgICAgICBUaGUgcGx1Z2luIHN1Yi1jbGFzcyBvciBmdW5jdGlvblxuICovXG5cbnZpZGVvanMkMS5wbHVnaW4gPSBmdW5jdGlvbiAobmFtZSwgcGx1Z2luKSB7XG4gIGxvZy53YXJuKCd2aWRlb2pzLnBsdWdpbigpIGlzIGRlcHJlY2F0ZWQ7IHVzZSB2aWRlb2pzLnJlZ2lzdGVyUGx1Z2luKCkgaW5zdGVhZCcpO1xuICByZXR1cm4gUGx1Z2luLnJlZ2lzdGVyUGx1Z2luKG5hbWUsIHBsdWdpbik7XG59O1xuXG52aWRlb2pzJDEuZ2V0UGx1Z2lucyA9IFBsdWdpbi5nZXRQbHVnaW5zO1xudmlkZW9qcyQxLmdldFBsdWdpbiA9IFBsdWdpbi5nZXRQbHVnaW47XG52aWRlb2pzJDEuZ2V0UGx1Z2luVmVyc2lvbiA9IFBsdWdpbi5nZXRQbHVnaW5WZXJzaW9uO1xuLyoqXG4gKiBBZGRpbmcgbGFuZ3VhZ2VzIHNvIHRoYXQgdGhleSdyZSBhdmFpbGFibGUgdG8gYWxsIHBsYXllcnMuXG4gKiBFeGFtcGxlOiBgdmlkZW9qcy5hZGRMYW5ndWFnZSgnZXMnLCB7ICdIZWxsbyc6ICdIb2xhJyB9KTtgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGVcbiAqICAgICAgICBUaGUgbGFuZ3VhZ2UgY29kZSBvciBkaWN0aW9uYXJ5IHByb3BlcnR5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqICAgICAgICBUaGUgZGF0YSB2YWx1ZXMgdG8gYmUgdHJhbnNsYXRlZFxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgVGhlIHJlc3VsdGluZyBsYW5ndWFnZSBkaWN0aW9uYXJ5IG9iamVjdFxuICovXG5cbnZpZGVvanMkMS5hZGRMYW5ndWFnZSA9IGZ1bmN0aW9uIChjb2RlLCBkYXRhKSB7XG4gIHZhciBfbWVyZ2VPcHRpb25zO1xuXG4gIGNvZGUgPSAoJycgKyBjb2RlKS50b0xvd2VyQ2FzZSgpO1xuICB2aWRlb2pzJDEub3B0aW9ucy5sYW5ndWFnZXMgPSBtZXJnZU9wdGlvbnModmlkZW9qcyQxLm9wdGlvbnMubGFuZ3VhZ2VzLCAoX21lcmdlT3B0aW9ucyA9IHt9LCBfbWVyZ2VPcHRpb25zW2NvZGVdID0gZGF0YSwgX21lcmdlT3B0aW9ucykpO1xuICByZXR1cm4gdmlkZW9qcyQxLm9wdGlvbnMubGFuZ3VhZ2VzW2NvZGVdO1xufTtcbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6bG9nfGxvZyB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBzZWUgIHtAbGluayBtb2R1bGU6bG9nfGxvZ31cbiAqL1xuXG5cbnZpZGVvanMkMS5sb2cgPSBsb2c7XG52aWRlb2pzJDEuY3JlYXRlTG9nZ2VyID0gY3JlYXRlTG9nZ2VyJDE7XG52aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlID0gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMgPSBjcmVhdGVUaW1lUmFuZ2VzO1xudmlkZW9qcyQxLmZvcm1hdFRpbWUgPSBmb3JtYXRUaW1lO1xudmlkZW9qcyQxLnNldEZvcm1hdFRpbWUgPSBzZXRGb3JtYXRUaW1lO1xudmlkZW9qcyQxLnJlc2V0Rm9ybWF0VGltZSA9IHJlc2V0Rm9ybWF0VGltZTtcbnZpZGVvanMkMS5wYXJzZVVybCA9IHBhcnNlVXJsO1xudmlkZW9qcyQxLmlzQ3Jvc3NPcmlnaW4gPSBpc0Nyb3NzT3JpZ2luO1xudmlkZW9qcyQxLkV2ZW50VGFyZ2V0ID0gRXZlbnRUYXJnZXQ7XG52aWRlb2pzJDEub24gPSBvbjtcbnZpZGVvanMkMS5vbmUgPSBvbmU7XG52aWRlb2pzJDEub2ZmID0gb2ZmO1xudmlkZW9qcyQxLnRyaWdnZXIgPSB0cmlnZ2VyO1xuLyoqXG4gKiBBIGNyb3NzLWJyb3dzZXIgWE1MSHR0cFJlcXVlc3Qgd3JhcHBlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgICAgU2V0dGluZ3MgZm9yIHRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm4gICB7WE1MSHR0cFJlcXVlc3R8WERvbWFpblJlcXVlc3R9XG4gKiAgICAgICAgICAgVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICpcbiAqIEBzZWUgICAgICBodHRwczovL2dpdGh1Yi5jb20vUmF5bm9zL3hoclxuICovXG5cbnZpZGVvanMkMS54aHIgPSBYSFI7XG52aWRlb2pzJDEuVGV4dFRyYWNrID0gVGV4dFRyYWNrO1xudmlkZW9qcyQxLkF1ZGlvVHJhY2sgPSBBdWRpb1RyYWNrO1xudmlkZW9qcyQxLlZpZGVvVHJhY2sgPSBWaWRlb1RyYWNrO1xuWydpc0VsJywgJ2lzVGV4dE5vZGUnLCAnY3JlYXRlRWwnLCAnaGFzQ2xhc3MnLCAnYWRkQ2xhc3MnLCAncmVtb3ZlQ2xhc3MnLCAndG9nZ2xlQ2xhc3MnLCAnc2V0QXR0cmlidXRlcycsICdnZXRBdHRyaWJ1dGVzJywgJ2VtcHR5RWwnLCAnYXBwZW5kQ29udGVudCcsICdpbnNlcnRDb250ZW50J10uZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICB2aWRlb2pzJDFba10gPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9nLndhcm4oXCJ2aWRlb2pzLlwiICsgayArIFwiKCkgaXMgZGVwcmVjYXRlZDsgdXNlIHZpZGVvanMuZG9tLlwiICsgayArIFwiKCkgaW5zdGVhZFwiKTtcbiAgICByZXR1cm4gRG9tW2tdLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG59KTtcbnZpZGVvanMkMS5jb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZTtcbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6ZG9tfERPTSB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlICB7QGxpbmsgbW9kdWxlOmRvbXxkb219XG4gKi9cblxudmlkZW9qcyQxLmRvbSA9IERvbTtcbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6dXJsfFVSTCB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlICB7QGxpbmsgbW9kdWxlOnVybHx1cmx9XG4gKi9cblxudmlkZW9qcyQxLnVybCA9IFVybDtcblxuLyoqXG4gKiBAdmlkZW9qcy9odHRwLXN0cmVhbWluZ1xuICogQHZlcnNpb24gMS4xMC42XG4gKiBAY29weXJpZ2h0IDIwMTkgQnJpZ2h0Y292ZSwgSW5jXG4gKiBAbGljZW5zZSBBcGFjaGUtMi4wXG4gKi9cbi8qKlxuICogQGZpbGUgcmVzb2x2ZS11cmwuanMgLSBIYW5kbGluZyBob3cgVVJMcyBhcmUgcmVzb2x2ZWQgYW5kIG1hbmlwdWxhdGVkXG4gKi9cblxudmFyIHJlc29sdmVVcmwgPSBmdW5jdGlvbiByZXNvbHZlVXJsKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIC8vIHJldHVybiBlYXJseSBpZiB3ZSBkb24ndCBuZWVkIHRvIHJlc29sdmVcbiAgaWYgKC9eW2Etel0rOi9pLnRlc3QocmVsYXRpdmVVUkwpKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlVVJMO1xuICB9IC8vIGlmIHRoZSBiYXNlIFVSTCBpcyByZWxhdGl2ZSB0aGVuIGNvbWJpbmUgd2l0aCB0aGUgY3VycmVudCBsb2NhdGlvblxuXG5cbiAgaWYgKCEvXFwvXFwvL2kudGVzdChiYXNlVVJMKSkge1xuICAgIGJhc2VVUkwgPSBVUkxUb29sa2l0LmJ1aWxkQWJzb2x1dGVVUkwod2luZG93JDEubG9jYXRpb24uaHJlZiwgYmFzZVVSTCk7XG4gIH1cblxuICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZEFic29sdXRlVVJMKGJhc2VVUkwsIHJlbGF0aXZlVVJMKTtcbn07XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHhociByZXF1ZXN0IHdhcyByZWRpcmVjdGVkIGFuZCByZXR1cm5zIGNvcnJlY3QgdXJsIGRlcGVuZGluZ1xuICogb24gYGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzYCBvcHRpb25cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHVybCAtIGFuIHVybCBiZWluZyByZXF1ZXN0ZWRcbiAqIEBwYXJhbSAge1hNTEh0dHBSZXF1ZXN0fSByZXEgLSB4aHIgcmVxdWVzdCByZXN1bHRcbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuXG52YXIgcmVzb2x2ZU1hbmlmZXN0UmVkaXJlY3QgPSBmdW5jdGlvbiByZXNvbHZlTWFuaWZlc3RSZWRpcmVjdChoYW5kbGVNYW5pZmVzdFJlZGlyZWN0LCB1cmwsIHJlcSkge1xuICAvLyBUbyB1bmRlcnN0YW5kIGhvdyB0aGUgcmVzcG9uc2VVUkwgYmVsb3cgaXMgc2V0IGFuZCBnZW5lcmF0ZWQ6XG4gIC8vIC0gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtcmVzcG9uc2UtdXJsXG4gIC8vIC0gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2F0b21pYy1odHRwLXJlZGlyZWN0LWhhbmRsaW5nXG4gIGlmIChoYW5kbGVNYW5pZmVzdFJlZGlyZWN0ICYmIHJlcS5yZXNwb25zZVVSTCAmJiB1cmwgIT09IHJlcS5yZXNwb25zZVVSTCkge1xuICAgIHJldHVybiByZXEucmVzcG9uc2VVUkw7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0JDEgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcblxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykge1xuICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcblxuICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuICB9XG59O1xuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIHNsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICB2YXIgX24gPSB0cnVlO1xuICAgIHZhciBfZCA9IGZhbHNlO1xuICAgIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2QgPSB0cnVlO1xuICAgICAgX2UgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfYXJyO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7XG4gICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgICB9XG4gIH07XG59KCk7XG4vKipcbiAqIEBmaWxlIHBsYXlsaXN0LWxvYWRlci5qc1xuICpcbiAqIEEgc3RhdGUgbWFjaGluZSB0aGF0IG1hbmFnZXMgdGhlIGxvYWRpbmcsIGNhY2hpbmcsIGFuZCB1cGRhdGluZyBvZlxuICogTTNVOCBwbGF5bGlzdHMuXG4gKlxuICovXG5cblxudmFyIG1lcmdlT3B0aW9ucyQxID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyxcbiAgICBFdmVudFRhcmdldCQxID0gdmlkZW9qcyQxLkV2ZW50VGFyZ2V0LFxuICAgIGxvZyQxID0gdmlkZW9qcyQxLmxvZztcbi8qKlxuICogTG9vcHMgdGhyb3VnaCBhbGwgc3VwcG9ydGVkIG1lZGlhIGdyb3VwcyBpbiBtYXN0ZXIgYW5kIGNhbGxzIHRoZSBwcm92aWRlZFxuICogY2FsbGJhY2sgZm9yIGVhY2ggZ3JvdXBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFzdGVyXG4gKiAgICAgICAgVGhlIHBhcnNlZCBtYXN0ZXIgbWFuaWZlc3Qgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogICAgICAgIENhbGxiYWNrIHRvIGNhbGwgZm9yIGVhY2ggbWVkaWEgZ3JvdXBcbiAqL1xuXG52YXIgZm9yRWFjaE1lZGlhR3JvdXAgPSBmdW5jdGlvbiBmb3JFYWNoTWVkaWFHcm91cChtYXN0ZXIsIGNhbGxiYWNrKSB7XG4gIFsnQVVESU8nLCAnU1VCVElUTEVTJ10uZm9yRWFjaChmdW5jdGlvbiAobWVkaWFUeXBlKSB7XG4gICAgZm9yICh2YXIgZ3JvdXBLZXkgaW4gbWFzdGVyLm1lZGlhR3JvdXBzW21lZGlhVHlwZV0pIHtcbiAgICAgIGZvciAodmFyIGxhYmVsS2V5IGluIG1hc3Rlci5tZWRpYUdyb3Vwc1ttZWRpYVR5cGVdW2dyb3VwS2V5XSkge1xuICAgICAgICB2YXIgbWVkaWFQcm9wZXJ0aWVzID0gbWFzdGVyLm1lZGlhR3JvdXBzW21lZGlhVHlwZV1bZ3JvdXBLZXldW2xhYmVsS2V5XTtcbiAgICAgICAgY2FsbGJhY2sobWVkaWFQcm9wZXJ0aWVzLCBtZWRpYVR5cGUsIGdyb3VwS2V5LCBsYWJlbEtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG4vKipcbiAgKiBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHNlZ21lbnRzIHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBtZXJnaW5nXG4gICogcHJvcGVydGllcyBmcm9tIGFuIG9sZGVyIGxpc3Qgb2Ygc2VnbWVudHMgb250byBhbiB1cGRhdGVkXG4gICogbGlzdC4gTm8gcHJvcGVydGllcyBvbiB0aGUgdXBkYXRlZCBwbGF5bGlzdCB3aWxsIGJlIG92ZXJyaWRkZW4uXG4gICpcbiAgKiBAcGFyYW0ge0FycmF5fSBvcmlnaW5hbCB0aGUgb3V0ZGF0ZWQgbGlzdCBvZiBzZWdtZW50c1xuICAqIEBwYXJhbSB7QXJyYXl9IHVwZGF0ZSB0aGUgdXBkYXRlZCBsaXN0IG9mIHNlZ21lbnRzXG4gICogQHBhcmFtIHtOdW1iZXI9fSBvZmZzZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1cGRhdGVcbiAgKiBzZWdtZW50IGluIHRoZSBvcmlnaW5hbCBzZWdtZW50IGxpc3QuIEZvciBub24tbGl2ZSBwbGF5bGlzdHMsXG4gICogdGhpcyBzaG91bGQgYWx3YXlzIGJlIHplcm8gYW5kIGRvZXMgbm90IG5lZWQgdG8gYmVcbiAgKiBzcGVjaWZpZWQuIEZvciBsaXZlIHBsYXlsaXN0cywgaXQgc2hvdWxkIGJlIHRoZSBkaWZmZXJlbmNlXG4gICogYmV0d2VlbiB0aGUgbWVkaWEgc2VxdWVuY2UgbnVtYmVycyBpbiB0aGUgb3JpZ2luYWwgYW5kIHVwZGF0ZWRcbiAgKiBwbGF5bGlzdHMuXG4gICogQHJldHVybiBhIGxpc3Qgb2YgbWVyZ2VkIHNlZ21lbnQgb2JqZWN0c1xuICAqL1xuXG5cbnZhciB1cGRhdGVTZWdtZW50cyA9IGZ1bmN0aW9uIHVwZGF0ZVNlZ21lbnRzKG9yaWdpbmFsLCB1cGRhdGUsIG9mZnNldCkge1xuICB2YXIgcmVzdWx0ID0gdXBkYXRlLnNsaWNlKCk7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4ob3JpZ2luYWwubGVuZ3RoLCB1cGRhdGUubGVuZ3RoICsgb2Zmc2V0KTtcblxuICBmb3IgKHZhciBpID0gb2Zmc2V0OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaSAtIG9mZnNldF0gPSBtZXJnZU9wdGlvbnMkMShvcmlnaW5hbFtpXSwgcmVzdWx0W2kgLSBvZmZzZXRdKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgcmVzb2x2ZVNlZ21lbnRVcmlzID0gZnVuY3Rpb24gcmVzb2x2ZVNlZ21lbnRVcmlzKHNlZ21lbnQsIGJhc2VVcmkpIHtcbiAgaWYgKCFzZWdtZW50LnJlc29sdmVkVXJpKSB7XG4gICAgc2VnbWVudC5yZXNvbHZlZFVyaSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2VnbWVudC51cmkpO1xuICB9XG5cbiAgaWYgKHNlZ21lbnQua2V5ICYmICFzZWdtZW50LmtleS5yZXNvbHZlZFVyaSkge1xuICAgIHNlZ21lbnQua2V5LnJlc29sdmVkVXJpID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzZWdtZW50LmtleS51cmkpO1xuICB9XG5cbiAgaWYgKHNlZ21lbnQubWFwICYmICFzZWdtZW50Lm1hcC5yZXNvbHZlZFVyaSkge1xuICAgIHNlZ21lbnQubWFwLnJlc29sdmVkVXJpID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzZWdtZW50Lm1hcC51cmkpO1xuICB9XG59O1xuLyoqXG4gICogUmV0dXJucyBhIG5ldyBtYXN0ZXIgcGxheWxpc3QgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIG1lcmdpbmcgYW5cbiAgKiB1cGRhdGVkIG1lZGlhIHBsYXlsaXN0IGludG8gdGhlIG9yaWdpbmFsIHZlcnNpb24uIElmIHRoZVxuICAqIHVwZGF0ZWQgbWVkaWEgcGxheWxpc3QgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBwbGF5bGlzdFxuICAqIGVudHJpZXMgaW4gdGhlIG9yaWdpbmFsIG1hc3RlciBwbGF5bGlzdCwgbnVsbCBpcyByZXR1cm5lZC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBtYXN0ZXIgYSBwYXJzZWQgbWFzdGVyIE0zVTggb2JqZWN0XG4gICogQHBhcmFtIHtPYmplY3R9IG1lZGlhIGEgcGFyc2VkIG1lZGlhIE0zVTggb2JqZWN0XG4gICogQHJldHVybiB7T2JqZWN0fSBhIG5ldyBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBvcmlnaW5hbFxuICAqIG1hc3RlciBwbGF5bGlzdCB3aXRoIHRoZSB1cGRhdGVkIG1lZGlhIHBsYXlsaXN0IG1lcmdlZCBpbiwgb3JcbiAgKiBudWxsIGlmIHRoZSBtZXJnZSBwcm9kdWNlZCBubyBjaGFuZ2UuXG4gICovXG5cblxudmFyIHVwZGF0ZU1hc3RlciA9IGZ1bmN0aW9uIHVwZGF0ZU1hc3RlcihtYXN0ZXIsIG1lZGlhKSB7XG4gIHZhciByZXN1bHQgPSBtZXJnZU9wdGlvbnMkMShtYXN0ZXIsIHt9KTtcbiAgdmFyIHBsYXlsaXN0ID0gcmVzdWx0LnBsYXlsaXN0c1ttZWRpYS51cmldO1xuXG4gIGlmICghcGxheWxpc3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBjb25zaWRlciB0aGUgcGxheWxpc3QgdW5jaGFuZ2VkIGlmIHRoZSBudW1iZXIgb2Ygc2VnbWVudHMgaXMgZXF1YWwsIHRoZSBtZWRpYVxuICAvLyBzZXF1ZW5jZSBudW1iZXIgaXMgdW5jaGFuZ2VkLCBhbmQgdGhpcyBwbGF5bGlzdCBoYXNuJ3QgYmVjb21lIHRoZSBlbmQgb2YgdGhlIHBsYXlsaXN0XG5cblxuICBpZiAocGxheWxpc3Quc2VnbWVudHMgJiYgbWVkaWEuc2VnbWVudHMgJiYgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoID09PSBtZWRpYS5zZWdtZW50cy5sZW5ndGggJiYgcGxheWxpc3QuZW5kTGlzdCA9PT0gbWVkaWEuZW5kTGlzdCAmJiBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlID09PSBtZWRpYS5tZWRpYVNlcXVlbmNlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWVyZ2VkUGxheWxpc3QgPSBtZXJnZU9wdGlvbnMkMShwbGF5bGlzdCwgbWVkaWEpOyAvLyBpZiB0aGUgdXBkYXRlIGNvdWxkIG92ZXJsYXAgZXhpc3Rpbmcgc2VnbWVudCBpbmZvcm1hdGlvbiwgbWVyZ2UgdGhlIHR3byBzZWdtZW50IGxpc3RzXG5cbiAgaWYgKHBsYXlsaXN0LnNlZ21lbnRzKSB7XG4gICAgbWVyZ2VkUGxheWxpc3Quc2VnbWVudHMgPSB1cGRhdGVTZWdtZW50cyhwbGF5bGlzdC5zZWdtZW50cywgbWVkaWEuc2VnbWVudHMsIG1lZGlhLm1lZGlhU2VxdWVuY2UgLSBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlKTtcbiAgfSAvLyByZXNvbHZlIGFueSBzZWdtZW50IFVSSXMgdG8gcHJldmVudCB1cyBmcm9tIGhhdmluZyB0byBkbyBpdCBsYXRlclxuXG5cbiAgbWVyZ2VkUGxheWxpc3Quc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2VnbWVudCkge1xuICAgIHJlc29sdmVTZWdtZW50VXJpcyhzZWdtZW50LCBtZXJnZWRQbGF5bGlzdC5yZXNvbHZlZFVyaSk7XG4gIH0pOyAvLyBUT0RPIFJpZ2h0IG5vdyBpbiB0aGUgcGxheWxpc3RzIGFycmF5IHRoZXJlIGFyZSB0d28gcmVmZXJlbmNlcyB0byBlYWNoIHBsYXlsaXN0LCBvbmVcbiAgLy8gdGhhdCBpcyByZWZlcmVuY2VkIGJ5IGluZGV4LCBhbmQgb25lIGJ5IFVSSS4gVGhlIGluZGV4IHJlZmVyZW5jZSBtYXkgbm8gbG9uZ2VyIGJlXG4gIC8vIG5lY2Vzc2FyeS5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5wbGF5bGlzdHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzdWx0LnBsYXlsaXN0c1tpXS51cmkgPT09IG1lZGlhLnVyaSkge1xuICAgICAgcmVzdWx0LnBsYXlsaXN0c1tpXSA9IG1lcmdlZFBsYXlsaXN0O1xuICAgIH1cbiAgfVxuXG4gIHJlc3VsdC5wbGF5bGlzdHNbbWVkaWEudXJpXSA9IG1lcmdlZFBsYXlsaXN0O1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIHNldHVwTWVkaWFQbGF5bGlzdHMgPSBmdW5jdGlvbiBzZXR1cE1lZGlhUGxheWxpc3RzKG1hc3Rlcikge1xuICAvLyBzZXR1cCBieS1VUkkgbG9va3VwcyBhbmQgcmVzb2x2ZSBtZWRpYSBwbGF5bGlzdCBVUklzXG4gIHZhciBpID0gbWFzdGVyLnBsYXlsaXN0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBwbGF5bGlzdCA9IG1hc3Rlci5wbGF5bGlzdHNbaV07XG4gICAgbWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdC51cmldID0gcGxheWxpc3Q7XG4gICAgcGxheWxpc3QucmVzb2x2ZWRVcmkgPSByZXNvbHZlVXJsKG1hc3Rlci51cmksIHBsYXlsaXN0LnVyaSk7XG4gICAgcGxheWxpc3QuaWQgPSBpO1xuXG4gICAgaWYgKCFwbGF5bGlzdC5hdHRyaWJ1dGVzKSB7XG4gICAgICAvLyBBbHRob3VnaCB0aGUgc3BlYyBzdGF0ZXMgYW4gI0VYVC1YLVNUUkVBTS1JTkYgdGFnIE1VU1QgaGF2ZSBhXG4gICAgICAvLyBCQU5EV0lEVEggYXR0cmlidXRlLCB3ZSBjYW4gcGxheSB0aGUgc3RyZWFtIHdpdGhvdXQgaXQuIFRoaXMgbWVhbnMgYSBwb29ybHlcbiAgICAgIC8vIGZvcm1hdHRlZCBtYXN0ZXIgcGxheWxpc3QgbWF5IG5vdCBoYXZlIGFuIGF0dHJpYnV0ZSBsaXN0LiBBbiBhdHRyaWJ1dGVzXG4gICAgICAvLyBwcm9wZXJ0eSBpcyBhZGRlZCBoZXJlIHRvIHByZXZlbnQgdW5kZWZpbmVkIHJlZmVyZW5jZXMgd2hlbiB3ZSBlbmNvdW50ZXJcbiAgICAgIC8vIHRoaXMgc2NlbmFyaW8uXG4gICAgICBwbGF5bGlzdC5hdHRyaWJ1dGVzID0ge307XG4gICAgICBsb2ckMS53YXJuKCdJbnZhbGlkIHBsYXlsaXN0IFNUUkVBTS1JTkYgZGV0ZWN0ZWQuIE1pc3NpbmcgQkFORFdJRFRIIGF0dHJpYnV0ZS4nKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciByZXNvbHZlTWVkaWFHcm91cFVyaXMgPSBmdW5jdGlvbiByZXNvbHZlTWVkaWFHcm91cFVyaXMobWFzdGVyKSB7XG4gIGZvckVhY2hNZWRpYUdyb3VwKG1hc3RlciwgZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcbiAgICBpZiAocHJvcGVydGllcy51cmkpIHtcbiAgICAgIHByb3BlcnRpZXMucmVzb2x2ZWRVcmkgPSByZXNvbHZlVXJsKG1hc3Rlci51cmksIHByb3BlcnRpZXMudXJpKTtcbiAgICB9XG4gIH0pO1xufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgdGltZSB0byB3YWl0IGJlZm9yZSByZWZyZXNoaW5nIGEgbGl2ZSBwbGF5bGlzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtZWRpYVxuICogICAgICAgIFRoZSBjdXJyZW50IG1lZGlhXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHVwZGF0ZVxuICogICAgICAgIFRydWUgaWYgdGhlcmUgd2VyZSBhbnkgdXBkYXRlcyBmcm9tIHRoZSBsYXN0IHJlZnJlc2gsIGZhbHNlIG90aGVyd2lzZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogICAgICAgICBUaGUgdGltZSBpbiBtcyB0byB3YWl0IGJlZm9yZSByZWZyZXNoaW5nIHRoZSBsaXZlIHBsYXlsaXN0XG4gKi9cblxuXG52YXIgcmVmcmVzaERlbGF5ID0gZnVuY3Rpb24gcmVmcmVzaERlbGF5KG1lZGlhLCB1cGRhdGUpIHtcbiAgdmFyIGxhc3RTZWdtZW50ID0gbWVkaWEuc2VnbWVudHNbbWVkaWEuc2VnbWVudHMubGVuZ3RoIC0gMV07XG4gIHZhciBkZWxheSA9IHZvaWQgMDtcblxuICBpZiAodXBkYXRlICYmIGxhc3RTZWdtZW50ICYmIGxhc3RTZWdtZW50LmR1cmF0aW9uKSB7XG4gICAgZGVsYXkgPSBsYXN0U2VnbWVudC5kdXJhdGlvbiAqIDEwMDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIHBsYXlsaXN0IGlzIHVuY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCByZWxvYWQgb3IgbGFzdCBzZWdtZW50IGR1cmF0aW9uXG4gICAgLy8gY2Fubm90IGJlIGRldGVybWluZWQsIHRyeSBhZ2FpbiBhZnRlciBoYWxmIHRoZSB0YXJnZXQgZHVyYXRpb25cbiAgICBkZWxheSA9IChtZWRpYS50YXJnZXREdXJhdGlvbiB8fCAxMCkgKiA1MDA7XG4gIH1cblxuICByZXR1cm4gZGVsYXk7XG59O1xuLyoqXG4gKiBMb2FkIGEgcGxheWxpc3QgZnJvbSBhIHJlbW90ZSBsb2NhdGlvblxuICpcbiAqIEBjbGFzcyBQbGF5bGlzdExvYWRlclxuICogQGV4dGVuZHMgU3RyZWFtXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjVXJsIHRoZSB1cmwgdG8gc3RhcnQgd2l0aFxuICogQHBhcmFtIHtCb29sZWFufSB3aXRoQ3JlZGVudGlhbHMgdGhlIHdpdGhDcmVkZW50aWFscyB4aHIgb3B0aW9uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5cbnZhciBQbGF5bGlzdExvYWRlciA9IGZ1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgaW5oZXJpdHMoUGxheWxpc3RMb2FkZXIsIF9FdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gUGxheWxpc3RMb2FkZXIoc3JjVXJsLCBobHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUGxheWxpc3RMb2FkZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUGxheWxpc3RMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQbGF5bGlzdExvYWRlcikpLmNhbGwodGhpcykpO1xuXG4gICAgdmFyIF9vcHRpb25zJHdpdGhDcmVkZW50aSA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHMgPSBfb3B0aW9ucyR3aXRoQ3JlZGVudGkgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aENyZWRlbnRpLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVNYW5pZmUgPSBvcHRpb25zLmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzLFxuICAgICAgICBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyA9IF9vcHRpb25zJGhhbmRsZU1hbmlmZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRoYW5kbGVNYW5pZmU7XG4gICAgX3RoaXMuc3JjVXJsID0gc3JjVXJsO1xuICAgIF90aGlzLmhsc18gPSBobHM7XG4gICAgX3RoaXMud2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzO1xuICAgIF90aGlzLmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzID0gaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHM7XG4gICAgdmFyIGhsc09wdGlvbnMgPSBobHMub3B0aW9uc187XG4gICAgX3RoaXMuY3VzdG9tVGFnUGFyc2VycyA9IGhsc09wdGlvbnMgJiYgaGxzT3B0aW9ucy5jdXN0b21UYWdQYXJzZXJzIHx8IFtdO1xuICAgIF90aGlzLmN1c3RvbVRhZ01hcHBlcnMgPSBobHNPcHRpb25zICYmIGhsc09wdGlvbnMuY3VzdG9tVGFnTWFwcGVycyB8fCBbXTtcblxuICAgIGlmICghX3RoaXMuc3JjVXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Egbm9uLWVtcHR5IHBsYXlsaXN0IFVSTCBpcyByZXF1aXJlZCcpO1xuICAgIH0gLy8gaW5pdGlhbGl6ZSB0aGUgbG9hZGVyIHN0YXRlXG5cblxuICAgIF90aGlzLnN0YXRlID0gJ0hBVkVfTk9USElORyc7IC8vIGxpdmUgcGxheWxpc3Qgc3RhbGVuZXNzIHRpbWVvdXRcblxuICAgIF90aGlzLm9uKCdtZWRpYXVwZGF0ZXRpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuc3RhdGUgIT09ICdIQVZFX01FVEFEQVRBJykge1xuICAgICAgICAvLyBvbmx5IHJlZnJlc2ggdGhlIG1lZGlhIHBsYXlsaXN0IGlmIG5vIG90aGVyIGFjdGl2aXR5IGlzIGdvaW5nIG9uXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhdGUgPSAnSEFWRV9DVVJSRU5UX01FVEFEQVRBJztcbiAgICAgIF90aGlzLnJlcXVlc3QgPSBfdGhpcy5obHNfLnhocih7XG4gICAgICAgIHVyaTogcmVzb2x2ZVVybChfdGhpcy5tYXN0ZXIudXJpLCBfdGhpcy5tZWRpYSgpLnVyaSksXG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogX3RoaXMud2l0aENyZWRlbnRpYWxzXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlcSkge1xuICAgICAgICAvLyBkaXNwb3NlZFxuICAgICAgICBpZiAoIV90aGlzLnJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucGxheWxpc3RSZXF1ZXN0RXJyb3IoX3RoaXMucmVxdWVzdCwgX3RoaXMubWVkaWEoKS51cmksICdIQVZFX01FVEFEQVRBJyk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5oYXZlTWV0YWRhdGEoX3RoaXMucmVxdWVzdCwgX3RoaXMubWVkaWEoKS51cmkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhQbGF5bGlzdExvYWRlciwgW3tcbiAgICBrZXk6ICdwbGF5bGlzdFJlcXVlc3RFcnJvcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXlsaXN0UmVxdWVzdEVycm9yKHhociwgdXJsLCBzdGFydGluZ1N0YXRlKSB7XG4gICAgICAvLyBhbnkgaW4tZmxpZ2h0IHJlcXVlc3QgaXMgbm93IGZpbmlzaGVkXG4gICAgICB0aGlzLnJlcXVlc3QgPSBudWxsO1xuXG4gICAgICBpZiAoc3RhcnRpbmdTdGF0ZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhcnRpbmdTdGF0ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lcnJvciA9IHtcbiAgICAgICAgcGxheWxpc3Q6IHRoaXMubWFzdGVyLnBsYXlsaXN0c1t1cmxdLFxuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIG1lc3NhZ2U6ICdITFMgcGxheWxpc3QgcmVxdWVzdCBlcnJvciBhdCBVUkw6ICcgKyB1cmwgKyAnLicsXG4gICAgICAgIHJlc3BvbnNlVGV4dDogeGhyLnJlc3BvbnNlVGV4dCxcbiAgICAgICAgY29kZTogeGhyLnN0YXR1cyA+PSA1MDAgPyA0IDogMlxuICAgICAgfTtcbiAgICAgIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgICB9IC8vIHVwZGF0ZSB0aGUgcGxheWxpc3QgbG9hZGVyJ3Mgc3RhdGUgaW4gcmVzcG9uc2UgdG8gYSBuZXcgb3JcbiAgICAvLyB1cGRhdGVkIHBsYXlsaXN0LlxuXG4gIH0sIHtcbiAgICBrZXk6ICdoYXZlTWV0YWRhdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXZlTWV0YWRhdGEoeGhyLCB1cmwpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzOyAvLyBhbnkgaW4tZmxpZ2h0IHJlcXVlc3QgaXMgbm93IGZpbmlzaGVkXG5cblxuICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcigpOyAvLyBhZGRpbmcgY3VzdG9tIHRhZyBwYXJzZXJzXG5cbiAgICAgIHRoaXMuY3VzdG9tVGFnUGFyc2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChjdXN0b21QYXJzZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlci5hZGRQYXJzZXIoY3VzdG9tUGFyc2VyKTtcbiAgICAgIH0pOyAvLyBhZGRpbmcgY3VzdG9tIHRhZyBtYXBwZXJzXG5cbiAgICAgIHRoaXMuY3VzdG9tVGFnTWFwcGVycy5mb3JFYWNoKGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlci5hZGRUYWdNYXBwZXIobWFwcGVyKTtcbiAgICAgIH0pO1xuICAgICAgcGFyc2VyLnB1c2goeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICBwYXJzZXIuZW5kKCk7XG4gICAgICBwYXJzZXIubWFuaWZlc3QudXJpID0gdXJsOyAvLyBtM3U4LXBhcnNlciBkb2VzIG5vdCBhdHRhY2ggYW4gYXR0cmlidXRlcyBwcm9wZXJ0eSB0byBtZWRpYSBwbGF5bGlzdHMgc28gbWFrZVxuICAgICAgLy8gc3VyZSB0aGF0IHRoZSBwcm9wZXJ0eSBpcyBhdHRhY2hlZCB0byBhdm9pZCB1bmRlZmluZWQgcmVmZXJlbmNlIGVycm9yc1xuXG4gICAgICBwYXJzZXIubWFuaWZlc3QuYXR0cmlidXRlcyA9IHBhcnNlci5tYW5pZmVzdC5hdHRyaWJ1dGVzIHx8IHt9OyAvLyBtZXJnZSB0aGlzIHBsYXlsaXN0IGludG8gdGhlIG1hc3RlclxuXG4gICAgICB2YXIgdXBkYXRlID0gdXBkYXRlTWFzdGVyKHRoaXMubWFzdGVyLCBwYXJzZXIubWFuaWZlc3QpO1xuICAgICAgdGhpcy50YXJnZXREdXJhdGlvbiA9IHBhcnNlci5tYW5pZmVzdC50YXJnZXREdXJhdGlvbjtcblxuICAgICAgaWYgKHVwZGF0ZSkge1xuICAgICAgICB0aGlzLm1hc3RlciA9IHVwZGF0ZTtcbiAgICAgICAgdGhpcy5tZWRpYV8gPSB0aGlzLm1hc3Rlci5wbGF5bGlzdHNbcGFyc2VyLm1hbmlmZXN0LnVyaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3BsYXlsaXN0dW5jaGFuZ2VkJyk7XG4gICAgICB9IC8vIHJlZnJlc2ggbGl2ZSBwbGF5bGlzdHMgYWZ0ZXIgYSB0YXJnZXQgZHVyYXRpb24gcGFzc2VzXG5cblxuICAgICAgaWYgKCF0aGlzLm1lZGlhKCkuZW5kTGlzdCkge1xuICAgICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQpO1xuICAgICAgICB0aGlzLm1lZGlhVXBkYXRlVGltZW91dCA9IHdpbmRvdyQxLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi50cmlnZ2VyKCdtZWRpYXVwZGF0ZXRpbWVvdXQnKTtcbiAgICAgICAgfSwgcmVmcmVzaERlbGF5KHRoaXMubWVkaWEoKSwgISF1cGRhdGUpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBYm9ydCBhbnkgb3V0c3RhbmRpbmcgd29yayBhbmQgY2xlYW4gdXAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rpc3Bvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgdGhpcy5zdG9wUmVxdWVzdCgpO1xuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0KTtcbiAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLmZpbmFsUmVuZGl0aW9uVGltZW91dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcFJlcXVlc3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wUmVxdWVzdCgpIHtcbiAgICAgIGlmICh0aGlzLnJlcXVlc3QpIHtcbiAgICAgICAgdmFyIG9sZFJlcXVlc3QgPSB0aGlzLnJlcXVlc3Q7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IG51bGw7XG4gICAgICAgIG9sZFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgb2xkUmVxdWVzdC5hYm9ydCgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIGNhbGxlZCB3aXRob3V0IGFueSBhcmd1bWVudHMsIHJldHVybnMgdGhlIGN1cnJlbnRseVxuICAgICAqIGFjdGl2ZSBtZWRpYSBwbGF5bGlzdC4gV2hlbiBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCxcbiAgICAgKiB0cmlnZ2VycyB0aGUgcGxheWxpc3QgbG9hZGVyIHRvIGFzeW5jaHJvbm91c2x5IHN3aXRjaCB0byB0aGVcbiAgICAgKiBzcGVjaWZpZWQgbWVkaWEgcGxheWxpc3QuIENhbGxpbmcgdGhpcyBtZXRob2Qgd2hpbGUgdGhlXG4gICAgICogbG9hZGVyIGlzIGluIHRoZSBIQVZFX05PVEhJTkcgY2F1c2VzIGFuIGVycm9yIHRvIGJlIGVtaXR0ZWRcbiAgICAgKiBidXQgb3RoZXJ3aXNlIGhhcyBubyBlZmZlY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHBsYXlsaXN0IHRoZSBwYXJzZWQgbWVkaWEgcGxheWxpc3RcbiAgICAgKiBvYmplY3QgdG8gc3dpdGNoIHRvXG4gICAgICogQHBhcmFtIHtCb29sZWFuPX0gaXMgdGhpcyB0aGUgbGFzdCBhdmFpbGFibGUgcGxheWxpc3RcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BsYXlsaXN0fSB0aGUgY3VycmVudCBsb2FkZWQgbWVkaWFcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWVkaWEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZWRpYShwbGF5bGlzdCwgaXNGaW5hbFJlbmRpdGlvbikge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7IC8vIGdldHRlclxuXG5cbiAgICAgIGlmICghcGxheWxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFfO1xuICAgICAgfSAvLyBzZXR0ZXJcblxuXG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0hBVkVfTk9USElORycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3dpdGNoIG1lZGlhIHBsYXlsaXN0IGZyb20gJyArIHRoaXMuc3RhdGUpO1xuICAgICAgfSAvLyBmaW5kIHRoZSBwbGF5bGlzdCBvYmplY3QgaWYgdGhlIHRhcmdldCBwbGF5bGlzdCBoYXMgYmVlblxuICAgICAgLy8gc3BlY2lmaWVkIGJ5IFVSSVxuXG5cbiAgICAgIGlmICh0eXBlb2YgcGxheWxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICghdGhpcy5tYXN0ZXIucGxheWxpc3RzW3BsYXlsaXN0XSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwbGF5bGlzdCBVUkk6ICcgKyBwbGF5bGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwbGF5bGlzdCA9IHRoaXMubWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdF07XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLmZpbmFsUmVuZGl0aW9uVGltZW91dCk7XG5cbiAgICAgIGlmIChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgICAgIHZhciBkZWxheSA9IHBsYXlsaXN0LnRhcmdldER1cmF0aW9uIC8gMiAqIDEwMDAgfHwgNSAqIDEwMDA7XG4gICAgICAgIHRoaXMuZmluYWxSZW5kaXRpb25UaW1lb3V0ID0gd2luZG93JDEuc2V0VGltZW91dCh0aGlzLm1lZGlhLmJpbmQodGhpcywgcGxheWxpc3QsIGZhbHNlKSwgZGVsYXkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydGluZ1N0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgIHZhciBtZWRpYUNoYW5nZSA9ICF0aGlzLm1lZGlhXyB8fCBwbGF5bGlzdC51cmkgIT09IHRoaXMubWVkaWFfLnVyaTsgLy8gc3dpdGNoIHRvIGZ1bGx5IGxvYWRlZCBwbGF5bGlzdHMgaW1tZWRpYXRlbHlcblxuICAgICAgaWYgKHRoaXMubWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdC51cmldLmVuZExpc3QpIHtcbiAgICAgICAgLy8gYWJvcnQgb3V0c3RhbmRpbmcgcGxheWxpc3QgcmVxdWVzdHNcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICAgIHRoaXMucmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgIHRoaXMucmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICAgIHRoaXMucmVxdWVzdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXRlID0gJ0hBVkVfTUVUQURBVEEnO1xuICAgICAgICB0aGlzLm1lZGlhXyA9IHBsYXlsaXN0OyAvLyB0cmlnZ2VyIG1lZGlhIGNoYW5nZSBpZiB0aGUgYWN0aXZlIG1lZGlhIGhhcyBiZWVuIHVwZGF0ZWRcblxuICAgICAgICBpZiAobWVkaWFDaGFuZ2UpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ21lZGlhY2hhbmdpbmcnKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ21lZGlhY2hhbmdlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHN3aXRjaGluZyB0byB0aGUgYWN0aXZlIHBsYXlsaXN0IGlzIGEgbm8tb3BcblxuXG4gICAgICBpZiAoIW1lZGlhQ2hhbmdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9ICdTV0lUQ0hJTkdfTUVESUEnOyAvLyB0aGVyZSBpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHBsYXlsaXN0IHJlcXVlc3RcblxuICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICBpZiAocGxheWxpc3QucmVzb2x2ZWRVcmkgPT09IHRoaXMucmVxdWVzdC51cmwpIHtcbiAgICAgICAgICAvLyByZXF1ZXN0aW5nIHRvIHN3aXRjaCB0byB0aGUgc2FtZSBwbGF5bGlzdCBtdWx0aXBsZSB0aW1lc1xuICAgICAgICAgIC8vIGhhcyBubyBlZmZlY3QgYWZ0ZXIgdGhlIGZpcnN0XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMucmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSBudWxsO1xuICAgICAgfSAvLyByZXF1ZXN0IHRoZSBuZXcgcGxheWxpc3RcblxuXG4gICAgICBpZiAodGhpcy5tZWRpYV8pIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYWNoYW5naW5nJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVxdWVzdCA9IHRoaXMuaGxzXy54aHIoe1xuICAgICAgICB1cmk6IHBsYXlsaXN0LnJlc29sdmVkVXJpLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlcSkge1xuICAgICAgICAvLyBkaXNwb3NlZFxuICAgICAgICBpZiAoIV90aGlzMy5yZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGxheWxpc3QucmVzb2x2ZWRVcmkgPSByZXNvbHZlTWFuaWZlc3RSZWRpcmVjdChfdGhpczMuaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMsIHBsYXlsaXN0LnJlc29sdmVkVXJpLCByZXEpO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBfdGhpczMucGxheWxpc3RSZXF1ZXN0RXJyb3IoX3RoaXMzLnJlcXVlc3QsIHBsYXlsaXN0LnVyaSwgc3RhcnRpbmdTdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczMuaGF2ZU1ldGFkYXRhKHJlcSwgcGxheWxpc3QudXJpKTsgLy8gZmlyZSBsb2FkZWRtZXRhZGF0YSB0aGUgZmlyc3QgdGltZSBhIG1lZGlhIHBsYXlsaXN0IGlzIGxvYWRlZFxuXG5cbiAgICAgICAgaWYgKHN0YXJ0aW5nU3RhdGUgPT09ICdIQVZFX01BU1RFUicpIHtcbiAgICAgICAgICBfdGhpczMudHJpZ2dlcignbG9hZGVkbWV0YWRhdGEnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczMudHJpZ2dlcignbWVkaWFjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHBhdXNlIGxvYWRpbmcgb2YgdGhlIHBsYXlsaXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLnN0b3BSZXF1ZXN0KCk7XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQpO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0hBVkVfTk9USElORycpIHtcbiAgICAgICAgLy8gSWYgd2UgcGF1c2UgdGhlIGxvYWRlciBiZWZvcmUgYW55IGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkLCBpdHMgYXMgaWYgd2UgbmV2ZXJcbiAgICAgICAgLy8gc3RhcnRlZCwgc28gcmVzZXQgdG8gYW4gdW5zdGFydGVkIHN0YXRlLlxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIH0gLy8gTmVlZCB0byByZXN0b3JlIHN0YXRlIG5vdyB0aGF0IG5vIGFjdGl2aXR5IGlzIGhhcHBlbmluZ1xuXG5cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnU1dJVENISU5HX01FRElBJykge1xuICAgICAgICAvLyBpZiB0aGUgbG9hZGVyIHdhcyBpbiB0aGUgcHJvY2VzcyBvZiBzd2l0Y2hpbmcgbWVkaWEsIGl0IHNob3VsZCBlaXRoZXIgcmV0dXJuIHRvXG4gICAgICAgIC8vIEhBVkVfTUFTVEVSIG9yIEhBVkVfTUVUQURBVEEgZGVwZW5kaW5nIG9uIGlmIHRoZSBsb2FkZXIgaGFzIGxvYWRlZCBhIG1lZGlhXG4gICAgICAgIC8vIHBsYXlsaXN0IHlldC4gVGhpcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBleGlzdGVuY2Ugb2YgbG9hZGVyLm1lZGlhX1xuICAgICAgICBpZiAodGhpcy5tZWRpYV8pIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gJ0hBVkVfTUVUQURBVEEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NQVNURVInO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICdIQVZFX0NVUlJFTlRfTUVUQURBVEEnKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHN0YXJ0IGxvYWRpbmcgb2YgdGhlIHBsYXlsaXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKGlzRmluYWxSZW5kaXRpb24pIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQpO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSgpO1xuXG4gICAgICBpZiAoaXNGaW5hbFJlbmRpdGlvbikge1xuICAgICAgICB2YXIgZGVsYXkgPSBtZWRpYSA/IG1lZGlhLnRhcmdldER1cmF0aW9uIC8gMiAqIDEwMDAgOiA1ICogMTAwMDtcbiAgICAgICAgdGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM0LmxvYWQoKTtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEgJiYgIW1lZGlhLmVuZExpc3QpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYXVwZGF0ZXRpbWVvdXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignbG9hZGVkcGxheWxpc3QnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogc3RhcnQgbG9hZGluZyBvZiB0aGUgcGxheWxpc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlOyAvLyByZXF1ZXN0IHRoZSBzcGVjaWZpZWQgVVJMXG5cbiAgICAgIHRoaXMucmVxdWVzdCA9IHRoaXMuaGxzXy54aHIoe1xuICAgICAgICB1cmk6IHRoaXMuc3JjVXJsLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlcSkge1xuICAgICAgICAvLyBkaXNwb3NlZFxuICAgICAgICBpZiAoIV90aGlzNS5yZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGNsZWFyIHRoZSBsb2FkZXIncyByZXF1ZXN0IHJlZmVyZW5jZVxuXG5cbiAgICAgICAgX3RoaXM1LnJlcXVlc3QgPSBudWxsO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIF90aGlzNS5lcnJvciA9IHtcbiAgICAgICAgICAgIHN0YXR1czogcmVxLnN0YXR1cyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdITFMgcGxheWxpc3QgcmVxdWVzdCBlcnJvciBhdCBVUkw6ICcgKyBfdGhpczUuc3JjVXJsICsgJy4nLFxuICAgICAgICAgICAgcmVzcG9uc2VUZXh0OiByZXEucmVzcG9uc2VUZXh0LFxuICAgICAgICAgICAgLy8gTUVESUFfRVJSX05FVFdPUktcbiAgICAgICAgICAgIGNvZGU6IDJcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKF90aGlzNS5zdGF0ZSA9PT0gJ0hBVkVfTk9USElORycpIHtcbiAgICAgICAgICAgIF90aGlzNS5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF90aGlzNS50cmlnZ2VyKCdlcnJvcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsgLy8gYWRkaW5nIGN1c3RvbSB0YWcgcGFyc2Vyc1xuXG4gICAgICAgIF90aGlzNS5jdXN0b21UYWdQYXJzZXJzLmZvckVhY2goZnVuY3Rpb24gKGN1c3RvbVBhcnNlcikge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuYWRkUGFyc2VyKGN1c3RvbVBhcnNlcik7XG4gICAgICAgIH0pOyAvLyBhZGRpbmcgY3VzdG9tIHRhZyBtYXBwZXJzXG5cblxuICAgICAgICBfdGhpczUuY3VzdG9tVGFnTWFwcGVycy5mb3JFYWNoKGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmFkZFRhZ01hcHBlcihtYXBwZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwYXJzZXIucHVzaChyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgcGFyc2VyLmVuZCgpO1xuICAgICAgICBfdGhpczUuc3RhdGUgPSAnSEFWRV9NQVNURVInO1xuICAgICAgICBfdGhpczUuc3JjVXJsID0gcmVzb2x2ZU1hbmlmZXN0UmVkaXJlY3QoX3RoaXM1LmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzLCBfdGhpczUuc3JjVXJsLCByZXEpO1xuICAgICAgICBwYXJzZXIubWFuaWZlc3QudXJpID0gX3RoaXM1LnNyY1VybDsgLy8gbG9hZGVkIGEgbWFzdGVyIHBsYXlsaXN0XG5cbiAgICAgICAgaWYgKHBhcnNlci5tYW5pZmVzdC5wbGF5bGlzdHMpIHtcbiAgICAgICAgICBfdGhpczUubWFzdGVyID0gcGFyc2VyLm1hbmlmZXN0O1xuICAgICAgICAgIHNldHVwTWVkaWFQbGF5bGlzdHMoX3RoaXM1Lm1hc3Rlcik7XG4gICAgICAgICAgcmVzb2x2ZU1lZGlhR3JvdXBVcmlzKF90aGlzNS5tYXN0ZXIpO1xuXG4gICAgICAgICAgX3RoaXM1LnRyaWdnZXIoJ2xvYWRlZHBsYXlsaXN0Jyk7XG5cbiAgICAgICAgICBpZiAoIV90aGlzNS5yZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBubyBtZWRpYSBwbGF5bGlzdCB3YXMgc3BlY2lmaWNhbGx5IHNlbGVjdGVkIHNvIHN0YXJ0XG4gICAgICAgICAgICAvLyBmcm9tIHRoZSBmaXJzdCBsaXN0ZWQgb25lXG4gICAgICAgICAgICBfdGhpczUubWVkaWEocGFyc2VyLm1hbmlmZXN0LnBsYXlsaXN0c1swXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGxvYWRlZCBhIG1lZGlhIHBsYXlsaXN0XG4gICAgICAgIC8vIGluZmVyIGEgbWFzdGVyIHBsYXlsaXN0IGlmIG5vbmUgd2FzIHByZXZpb3VzbHkgcmVxdWVzdGVkXG5cblxuICAgICAgICBfdGhpczUubWFzdGVyID0ge1xuICAgICAgICAgIG1lZGlhR3JvdXBzOiB7XG4gICAgICAgICAgICAnQVVESU8nOiB7fSxcbiAgICAgICAgICAgICdWSURFTyc6IHt9LFxuICAgICAgICAgICAgJ0NMT1NFRC1DQVBUSU9OUyc6IHt9LFxuICAgICAgICAgICAgJ1NVQlRJVExFUyc6IHt9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cmk6IHdpbmRvdyQxLmxvY2F0aW9uLmhyZWYsXG4gICAgICAgICAgcGxheWxpc3RzOiBbe1xuICAgICAgICAgICAgdXJpOiBfdGhpczUuc3JjVXJsLFxuICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICByZXNvbHZlZFVyaTogX3RoaXM1LnNyY1VybCxcbiAgICAgICAgICAgIC8vIG0zdTgtcGFyc2VyIGRvZXMgbm90IGF0dGFjaCBhbiBhdHRyaWJ1dGVzIHByb3BlcnR5IHRvIG1lZGlhIHBsYXlsaXN0cyBzbyBtYWtlXG4gICAgICAgICAgICAvLyBzdXJlIHRoYXQgdGhlIHByb3BlcnR5IGlzIGF0dGFjaGVkIHRvIGF2b2lkIHVuZGVmaW5lZCByZWZlcmVuY2UgZXJyb3JzXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7fVxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzNS5tYXN0ZXIucGxheWxpc3RzW190aGlzNS5zcmNVcmxdID0gX3RoaXM1Lm1hc3Rlci5wbGF5bGlzdHNbMF07XG5cbiAgICAgICAgX3RoaXM1LmhhdmVNZXRhZGF0YShyZXEsIF90aGlzNS5zcmNVcmwpO1xuXG4gICAgICAgIHJldHVybiBfdGhpczUudHJpZ2dlcignbG9hZGVkbWV0YWRhdGEnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGxheWxpc3RMb2FkZXI7XG59KEV2ZW50VGFyZ2V0JDEpO1xuLyoqXG4gKiBAZmlsZSBwbGF5bGlzdC5qc1xuICpcbiAqIFBsYXlsaXN0IHJlbGF0ZWQgdXRpbGl0aWVzLlxuICovXG5cblxudmFyIGNyZWF0ZVRpbWVSYW5nZSA9IHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2U7XG4vKipcbiAqIHdhbGsgYmFja3dhcmQgdW50aWwgd2UgZmluZCBhIGR1cmF0aW9uIHdlIGNhbiB1c2VcbiAqIG9yIHJldHVybiBhIGZhaWx1cmVcbiAqXG4gKiBAcGFyYW0ge1BsYXlsaXN0fSBwbGF5bGlzdCB0aGUgcGxheWxpc3QgdG8gd2FsayB0aHJvdWdoXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kU2VxdWVuY2UgdGhlIG1lZGlhU2VxdWVuY2UgdG8gc3RvcCB3YWxraW5nIG9uXG4gKi9cblxudmFyIGJhY2t3YXJkRHVyYXRpb24gPSBmdW5jdGlvbiBiYWNrd2FyZER1cmF0aW9uKHBsYXlsaXN0LCBlbmRTZXF1ZW5jZSkge1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgdmFyIGkgPSBlbmRTZXF1ZW5jZSAtIHBsYXlsaXN0Lm1lZGlhU2VxdWVuY2U7IC8vIGlmIGEgc3RhcnQgdGltZSBpcyBhdmFpbGFibGUgZm9yIHNlZ21lbnQgaW1tZWRpYXRlbHkgZm9sbG93aW5nXG4gIC8vIHRoZSBpbnRlcnZhbCwgdXNlIGl0XG5cbiAgdmFyIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1tpXTsgLy8gV2FsayBiYWNrd2FyZCB1bnRpbCB3ZSBmaW5kIHRoZSBsYXRlc3Qgc2VnbWVudCB3aXRoIHRpbWVsaW5lXG4gIC8vIGluZm9ybWF0aW9uIHRoYXQgaXMgZWFybGllciB0aGFuIGVuZFNlcXVlbmNlXG5cbiAgaWYgKHNlZ21lbnQpIHtcbiAgICBpZiAodHlwZW9mIHNlZ21lbnQuc3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHNlZ21lbnQuc3RhcnQsXG4gICAgICAgIHByZWNpc2U6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzZWdtZW50LmVuZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogc2VnbWVudC5lbmQgLSBzZWdtZW50LmR1cmF0aW9uLFxuICAgICAgICBwcmVjaXNlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07XG5cbiAgICBpZiAodHlwZW9mIHNlZ21lbnQuZW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiByZXN1bHQgKyBzZWdtZW50LmVuZCxcbiAgICAgICAgcHJlY2lzZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gc2VnbWVudC5kdXJhdGlvbjtcblxuICAgIGlmICh0eXBlb2Ygc2VnbWVudC5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogcmVzdWx0ICsgc2VnbWVudC5zdGFydCxcbiAgICAgICAgcHJlY2lzZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3VsdDogcmVzdWx0LFxuICAgIHByZWNpc2U6IGZhbHNlXG4gIH07XG59O1xuLyoqXG4gKiB3YWxrIGZvcndhcmQgdW50aWwgd2UgZmluZCBhIGR1cmF0aW9uIHdlIGNhbiB1c2VcbiAqIG9yIHJldHVybiBhIGZhaWx1cmVcbiAqXG4gKiBAcGFyYW0ge1BsYXlsaXN0fSBwbGF5bGlzdCB0aGUgcGxheWxpc3QgdG8gd2FsayB0aHJvdWdoXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kU2VxdWVuY2UgdGhlIG1lZGlhU2VxdWVuY2UgdG8gc3RvcCB3YWxraW5nIG9uXG4gKi9cblxuXG52YXIgZm9yd2FyZER1cmF0aW9uID0gZnVuY3Rpb24gZm9yd2FyZER1cmF0aW9uKHBsYXlsaXN0LCBlbmRTZXF1ZW5jZSkge1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgdmFyIHNlZ21lbnQgPSB2b2lkIDA7XG4gIHZhciBpID0gZW5kU2VxdWVuY2UgLSBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlOyAvLyBXYWxrIGZvcndhcmQgdW50aWwgd2UgZmluZCB0aGUgZWFybGllc3Qgc2VnbWVudCB3aXRoIHRpbWVsaW5lXG4gIC8vIGluZm9ybWF0aW9uXG5cbiAgZm9yICg7IGkgPCBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1tpXTtcblxuICAgIGlmICh0eXBlb2Ygc2VnbWVudC5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogc2VnbWVudC5zdGFydCAtIHJlc3VsdCxcbiAgICAgICAgcHJlY2lzZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gc2VnbWVudC5kdXJhdGlvbjtcblxuICAgIGlmICh0eXBlb2Ygc2VnbWVudC5lbmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHNlZ21lbnQuZW5kIC0gcmVzdWx0LFxuICAgICAgICBwcmVjaXNlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBpbmRpY2F0ZSB3ZSBkaWRuJ3QgZmluZCBhIHVzZWZ1bCBkdXJhdGlvbiBlc3RpbWF0ZVxuXG5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IC0xLFxuICAgIHByZWNpc2U6IGZhbHNlXG4gIH07XG59O1xuLyoqXG4gICogQ2FsY3VsYXRlIHRoZSBtZWRpYSBkdXJhdGlvbiBmcm9tIHRoZSBzZWdtZW50cyBhc3NvY2lhdGVkIHdpdGggYVxuICAqIHBsYXlsaXN0LiBUaGUgZHVyYXRpb24gb2YgYSBzdWJpbnRlcnZhbCBvZiB0aGUgYXZhaWxhYmxlIHNlZ21lbnRzXG4gICogbWF5IGJlIGNhbGN1bGF0ZWQgYnkgc3BlY2lmeWluZyBhbiBlbmQgaW5kZXguXG4gICpcbiAgKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgYSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAgKiBAcGFyYW0ge051bWJlcj19IGVuZFNlcXVlbmNlIGFuIGV4Y2x1c2l2ZSB1cHBlciBib3VuZGFyeVxuICAqIGZvciB0aGUgcGxheWxpc3QuICBEZWZhdWx0cyB0byBwbGF5bGlzdCBsZW5ndGguXG4gICogQHBhcmFtIHtOdW1iZXJ9IGV4cGlyZWQgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzIGRyb3BwZWRcbiAgKiBvZmYgdGhlIGZyb250IG9mIHRoZSBwbGF5bGlzdCBpbiBhIGxpdmUgc2NlbmFyaW9cbiAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBkdXJhdGlvbiBiZXR3ZWVuIHRoZSBmaXJzdCBhdmFpbGFibGUgc2VnbWVudFxuICAqIGFuZCBlbmQgaW5kZXguXG4gICovXG5cblxudmFyIGludGVydmFsRHVyYXRpb24gPSBmdW5jdGlvbiBpbnRlcnZhbER1cmF0aW9uKHBsYXlsaXN0LCBlbmRTZXF1ZW5jZSwgZXhwaXJlZCkge1xuICB2YXIgYmFja3dhcmQgPSB2b2lkIDA7XG4gIHZhciBmb3J3YXJkID0gdm9pZCAwO1xuXG4gIGlmICh0eXBlb2YgZW5kU2VxdWVuY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5kU2VxdWVuY2UgPSBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlICsgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGVuZFNlcXVlbmNlIDwgcGxheWxpc3QubWVkaWFTZXF1ZW5jZSkge1xuICAgIHJldHVybiAwO1xuICB9IC8vIGRvIGEgYmFja3dhcmQgd2FsayB0byBlc3RpbWF0ZSB0aGUgZHVyYXRpb25cblxuXG4gIGJhY2t3YXJkID0gYmFja3dhcmREdXJhdGlvbihwbGF5bGlzdCwgZW5kU2VxdWVuY2UpO1xuXG4gIGlmIChiYWNrd2FyZC5wcmVjaXNlKSB7XG4gICAgLy8gaWYgd2Ugd2VyZSBhYmxlIHRvIGJhc2Ugb3VyIGR1cmF0aW9uIGVzdGltYXRlIG9uIHRpbWluZ1xuICAgIC8vIGluZm9ybWF0aW9uIHByb3ZpZGVkIGRpcmVjdGx5IGZyb20gdGhlIE1lZGlhIFNvdXJjZSwgcmV0dXJuXG4gICAgLy8gaXRcbiAgICByZXR1cm4gYmFja3dhcmQucmVzdWx0O1xuICB9IC8vIHdhbGsgZm9yd2FyZCB0byBzZWUgaWYgYSBwcmVjaXNlIGR1cmF0aW9uIGVzdGltYXRlIGNhbiBiZSBtYWRlXG4gIC8vIHRoYXQgd2F5XG5cblxuICBmb3J3YXJkID0gZm9yd2FyZER1cmF0aW9uKHBsYXlsaXN0LCBlbmRTZXF1ZW5jZSk7XG5cbiAgaWYgKGZvcndhcmQucHJlY2lzZSkge1xuICAgIC8vIHdlIGZvdW5kIGEgc2VnbWVudCB0aGF0IGhhcyBiZWVuIGJ1ZmZlcmVkIGFuZCBzbyBpdCdzXG4gICAgLy8gcG9zaXRpb24gaXMga25vd24gcHJlY2lzZWx5XG4gICAgcmV0dXJuIGZvcndhcmQucmVzdWx0O1xuICB9IC8vIHJldHVybiB0aGUgbGVzcy1wcmVjaXNlLCBwbGF5bGlzdC1iYXNlZCBkdXJhdGlvbiBlc3RpbWF0ZVxuXG5cbiAgcmV0dXJuIGJhY2t3YXJkLnJlc3VsdCArIGV4cGlyZWQ7XG59O1xuLyoqXG4gICogQ2FsY3VsYXRlcyB0aGUgZHVyYXRpb24gb2YgYSBwbGF5bGlzdC4gSWYgYSBzdGFydCBhbmQgZW5kIGluZGV4XG4gICogYXJlIHNwZWNpZmllZCwgdGhlIGR1cmF0aW9uIHdpbGwgYmUgZm9yIHRoZSBzdWJzZXQgb2YgdGhlIG1lZGlhXG4gICogdGltZWxpbmUgYmV0d2VlbiB0aG9zZSB0d28gaW5kaWNlcy4gVGhlIHRvdGFsIGR1cmF0aW9uIGZvciBsaXZlXG4gICogcGxheWxpc3RzIGlzIGFsd2F5cyBJbmZpbml0eS5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICAqIEBwYXJhbSB7TnVtYmVyPX0gZW5kU2VxdWVuY2UgYW4gZXhjbHVzaXZlIHVwcGVyXG4gICogYm91bmRhcnkgZm9yIHRoZSBwbGF5bGlzdC4gRGVmYXVsdHMgdG8gdGhlIHBsYXlsaXN0IG1lZGlhXG4gICogc2VxdWVuY2UgbnVtYmVyIHBsdXMgaXRzIGxlbmd0aC5cbiAgKiBAcGFyYW0ge051bWJlcj19IGV4cGlyZWQgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzXG4gICogZHJvcHBlZCBvZmYgdGhlIGZyb250IG9mIHRoZSBwbGF5bGlzdCBpbiBhIGxpdmUgc2NlbmFyaW9cbiAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBkdXJhdGlvbiBiZXR3ZWVuIHRoZSBzdGFydCBpbmRleCBhbmQgZW5kXG4gICogaW5kZXguXG4gICovXG5cblxudmFyIGR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlLCBleHBpcmVkKSB7XG4gIGlmICghcGxheWxpc3QpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZXhwaXJlZCAhPT0gJ251bWJlcicpIHtcbiAgICBleHBpcmVkID0gMDtcbiAgfSAvLyBpZiBhIHNsaWNlIG9mIHRoZSB0b3RhbCBkdXJhdGlvbiBpcyBub3QgcmVxdWVzdGVkLCB1c2VcbiAgLy8gcGxheWxpc3QtbGV2ZWwgZHVyYXRpb24gaW5kaWNhdG9ycyB3aGVuIHRoZXkncmUgcHJlc2VudFxuXG5cbiAgaWYgKHR5cGVvZiBlbmRTZXF1ZW5jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBpZiBwcmVzZW50LCB1c2UgdGhlIGR1cmF0aW9uIHNwZWNpZmllZCBpbiB0aGUgcGxheWxpc3RcbiAgICBpZiAocGxheWxpc3QudG90YWxEdXJhdGlvbikge1xuICAgICAgcmV0dXJuIHBsYXlsaXN0LnRvdGFsRHVyYXRpb247XG4gICAgfSAvLyBkdXJhdGlvbiBzaG91bGQgYmUgSW5maW5pdHkgZm9yIGxpdmUgcGxheWxpc3RzXG5cblxuICAgIGlmICghcGxheWxpc3QuZW5kTGlzdCkge1xuICAgICAgcmV0dXJuIHdpbmRvdyQxLkluZmluaXR5O1xuICAgIH1cbiAgfSAvLyBjYWxjdWxhdGUgdGhlIHRvdGFsIGR1cmF0aW9uIGJhc2VkIG9uIHRoZSBzZWdtZW50IGR1cmF0aW9uc1xuXG5cbiAgcmV0dXJuIGludGVydmFsRHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlLCBleHBpcmVkKTtcbn07XG4vKipcbiAgKiBDYWxjdWxhdGUgdGhlIHRpbWUgYmV0d2VlbiB0d28gaW5kZXhlcyBpbiB0aGUgY3VycmVudCBwbGF5bGlzdFxuICAqIG5laWdodCB0aGUgc3RhcnQtIG5vciB0aGUgZW5kLWluZGV4IG5lZWQgdG8gYmUgd2l0aGluIHRoZSBjdXJyZW50XG4gICogcGxheWxpc3QgaW4gd2hpY2ggY2FzZSwgdGhlIHRhcmdldER1cmF0aW9uIG9mIHRoZSBwbGF5bGlzdCBpcyB1c2VkXG4gICogdG8gYXBwcm94aW1hdGUgdGhlIGR1cmF0aW9ucyBvZiB0aGUgc2VnbWVudHNcbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydEluZGV4XG4gICogQHBhcmFtIHtOdW1iZXJ9IGVuZEluZGV4XG4gICogQHJldHVybiB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiBzdGFydEluZGV4IGFuZCBlbmRJbmRleFxuICAqL1xuXG5cbnZhciBzdW1EdXJhdGlvbnMgPSBmdW5jdGlvbiBzdW1EdXJhdGlvbnMocGxheWxpc3QsIHN0YXJ0SW5kZXgsIGVuZEluZGV4KSB7XG4gIHZhciBkdXJhdGlvbnMgPSAwO1xuXG4gIGlmIChzdGFydEluZGV4ID4gZW5kSW5kZXgpIHtcbiAgICB2YXIgX3JlZiA9IFtlbmRJbmRleCwgc3RhcnRJbmRleF07XG4gICAgc3RhcnRJbmRleCA9IF9yZWZbMF07XG4gICAgZW5kSW5kZXggPSBfcmVmWzFdO1xuICB9XG5cbiAgaWYgKHN0YXJ0SW5kZXggPCAwKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBNYXRoLm1pbigwLCBlbmRJbmRleCk7IGkrKykge1xuICAgICAgZHVyYXRpb25zICs9IHBsYXlsaXN0LnRhcmdldER1cmF0aW9uO1xuICAgIH1cblxuICAgIHN0YXJ0SW5kZXggPSAwO1xuICB9XG5cbiAgZm9yICh2YXIgX2kgPSBzdGFydEluZGV4OyBfaSA8IGVuZEluZGV4OyBfaSsrKSB7XG4gICAgZHVyYXRpb25zICs9IHBsYXlsaXN0LnNlZ21lbnRzW19pXS5kdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiBkdXJhdGlvbnM7XG59O1xuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBtZWRpYSBpbmRleCBvZiB0aGUgc2VnbWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBzYWZlIGVkZ2Ugb2YgdGhlIGxpdmVcbiAqIHdpbmRvdyB3aGljaCBpcyB0aGUgZHVyYXRpb24gb2YgdGhlIGxhc3Qgc2VnbWVudCBwbHVzIDIgdGFyZ2V0IGR1cmF0aW9ucyBmcm9tIHRoZSBlbmRcbiAqIG9mIHRoZSBwbGF5bGlzdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3RcbiAqICAgICAgICBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7TnVtYmVyfVxuICogICAgICAgICBUaGUgbWVkaWEgaW5kZXggb2YgdGhlIHNlZ21lbnQgYXQgdGhlIHNhZmUgbGl2ZSBwb2ludC4gMCBpZiB0aGVyZSBpcyBubyBcInNhZmVcIlxuICogICAgICAgICBwb2ludC5cbiAqIEBmdW5jdGlvbiBzYWZlTGl2ZUluZGV4XG4gKi9cblxuXG52YXIgc2FmZUxpdmVJbmRleCA9IGZ1bmN0aW9uIHNhZmVMaXZlSW5kZXgocGxheWxpc3QpIHtcbiAgaWYgKCFwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBpID0gcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoIC0gMTtcbiAgdmFyIGRpc3RhbmNlRnJvbUVuZCA9IHBsYXlsaXN0LnNlZ21lbnRzW2ldLmR1cmF0aW9uIHx8IHBsYXlsaXN0LnRhcmdldER1cmF0aW9uO1xuICB2YXIgc2FmZURpc3RhbmNlID0gZGlzdGFuY2VGcm9tRW5kICsgcGxheWxpc3QudGFyZ2V0RHVyYXRpb24gKiAyO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBkaXN0YW5jZUZyb21FbmQgKz0gcGxheWxpc3Quc2VnbWVudHNbaV0uZHVyYXRpb247XG5cbiAgICBpZiAoZGlzdGFuY2VGcm9tRW5kID49IHNhZmVEaXN0YW5jZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4KDAsIGkpO1xufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgcGxheWxpc3QgZW5kIHRpbWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgYSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAqIEBwYXJhbSB7TnVtYmVyPX0gZXhwaXJlZCB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXNcbiAqICAgICAgICAgICAgICAgICAgZHJvcHBlZCBvZmYgdGhlIGZyb250IG9mIHRoZSBwbGF5bGlzdCBpbiBhIGxpdmUgc2NlbmFyaW9cbiAqIEBwYXJhbSB7Qm9vbGVhbnxmYWxzZX0gdXNlU2FmZUxpdmVFbmQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0IGVuZCBjYWxjdWxhdGlvbiBzaG91bGQgY29uc2lkZXIgdGhlIHNhZmUgbGl2ZSBlbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgKHRydW5jYXRlIHRoZSBwbGF5bGlzdCBlbmQgYnkgdGhyZWUgc2VnbWVudHMpLiBUaGlzIGlzIG5vcm1hbGx5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgZm9yIGNhbGN1bGF0aW5nIHRoZSBlbmQgb2YgdGhlIHBsYXlsaXN0J3Mgc2Vla2FibGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgZW5kIHRpbWUgb2YgcGxheWxpc3RcbiAqIEBmdW5jdGlvbiBwbGF5bGlzdEVuZFxuICovXG5cblxudmFyIHBsYXlsaXN0RW5kID0gZnVuY3Rpb24gcGxheWxpc3RFbmQocGxheWxpc3QsIGV4cGlyZWQsIHVzZVNhZmVMaXZlRW5kKSB7XG4gIGlmICghcGxheWxpc3QgfHwgIXBsYXlsaXN0LnNlZ21lbnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocGxheWxpc3QuZW5kTGlzdCkge1xuICAgIHJldHVybiBkdXJhdGlvbihwbGF5bGlzdCk7XG4gIH1cblxuICBpZiAoZXhwaXJlZCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZXhwaXJlZCA9IGV4cGlyZWQgfHwgMDtcbiAgdmFyIGVuZFNlcXVlbmNlID0gdXNlU2FmZUxpdmVFbmQgPyBzYWZlTGl2ZUluZGV4KHBsYXlsaXN0KSA6IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aDtcbiAgcmV0dXJuIGludGVydmFsRHVyYXRpb24ocGxheWxpc3QsIHBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgKyBlbmRTZXF1ZW5jZSwgZXhwaXJlZCk7XG59O1xuLyoqXG4gICogQ2FsY3VsYXRlcyB0aGUgaW50ZXJ2YWwgb2YgdGltZSB0aGF0IGlzIGN1cnJlbnRseSBzZWVrYWJsZSBpbiBhXG4gICogcGxheWxpc3QuIFRoZSByZXR1cm5lZCB0aW1lIHJhbmdlcyBhcmUgcmVsYXRpdmUgdG8gdGhlIGVhcmxpZXN0XG4gICogbW9tZW50IGluIHRoZSBzcGVjaWZpZWQgcGxheWxpc3QgdGhhdCBpcyBzdGlsbCBhdmFpbGFibGUuIEEgZnVsbFxuICAqIHNlZWthYmxlIGltcGxlbWVudGF0aW9uIGZvciBsaXZlIHN0cmVhbXMgd291bGQgbmVlZCB0byBvZmZzZXRcbiAgKiB0aGVzZSB2YWx1ZXMgYnkgdGhlIGR1cmF0aW9uIG9mIGNvbnRlbnQgdGhhdCBoYXMgZXhwaXJlZCBmcm9tIHRoZVxuICAqIHN0cmVhbS5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICAqIGRyb3BwZWQgb2ZmIHRoZSBmcm9udCBvZiB0aGUgcGxheWxpc3QgaW4gYSBsaXZlIHNjZW5hcmlvXG4gICogQHBhcmFtIHtOdW1iZXI9fSBleHBpcmVkIHRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGhhc1xuICAqIGRyb3BwZWQgb2ZmIHRoZSBmcm9udCBvZiB0aGUgcGxheWxpc3QgaW4gYSBsaXZlIHNjZW5hcmlvXG4gICogQHJldHVybiB7VGltZVJhbmdlc30gdGhlIHBlcmlvZHMgb2YgdGltZSB0aGF0IGFyZSB2YWxpZCB0YXJnZXRzXG4gICogZm9yIHNlZWtpbmdcbiAgKi9cblxuXG52YXIgc2Vla2FibGUgPSBmdW5jdGlvbiBzZWVrYWJsZShwbGF5bGlzdCwgZXhwaXJlZCkge1xuICB2YXIgdXNlU2FmZUxpdmVFbmQgPSB0cnVlO1xuICB2YXIgc2Vla2FibGVTdGFydCA9IGV4cGlyZWQgfHwgMDtcbiAgdmFyIHNlZWthYmxlRW5kID0gcGxheWxpc3RFbmQocGxheWxpc3QsIGV4cGlyZWQsIHVzZVNhZmVMaXZlRW5kKTtcblxuICBpZiAoc2Vla2FibGVFbmQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY3JlYXRlVGltZVJhbmdlKCk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlVGltZVJhbmdlKHNlZWthYmxlU3RhcnQsIHNlZWthYmxlRW5kKTtcbn07XG5cbnZhciBpc1dob2xlTnVtYmVyID0gZnVuY3Rpb24gaXNXaG9sZU51bWJlcihudW0pIHtcbiAgcmV0dXJuIG51bSAtIE1hdGguZmxvb3IobnVtKSA9PT0gMDtcbn07XG5cbnZhciByb3VuZFNpZ25pZmljYW50RGlnaXQgPSBmdW5jdGlvbiByb3VuZFNpZ25pZmljYW50RGlnaXQoaW5jcmVtZW50LCBudW0pIHtcbiAgLy8gSWYgd2UgaGF2ZSBhIHdob2xlIG51bWJlciwganVzdCBhZGQgMSB0byBpdFxuICBpZiAoaXNXaG9sZU51bWJlcihudW0pKSB7XG4gICAgcmV0dXJuIG51bSArIGluY3JlbWVudCAqIDAuMTtcbiAgfVxuXG4gIHZhciBudW1EZWNpbWFsRGlnaXRzID0gbnVtLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbnVtRGVjaW1hbERpZ2l0czsgaSsrKSB7XG4gICAgdmFyIHNjYWxlID0gTWF0aC5wb3coMTAsIGkpO1xuICAgIHZhciB0ZW1wID0gbnVtICogc2NhbGU7XG5cbiAgICBpZiAoaXNXaG9sZU51bWJlcih0ZW1wKSB8fCBpID09PSBudW1EZWNpbWFsRGlnaXRzKSB7XG4gICAgICByZXR1cm4gKHRlbXAgKyBpbmNyZW1lbnQpIC8gc2NhbGU7XG4gICAgfVxuICB9XG59O1xuXG52YXIgY2VpbExlYXN0U2lnbmlmaWNhbnREaWdpdCA9IHJvdW5kU2lnbmlmaWNhbnREaWdpdC5iaW5kKG51bGwsIDEpO1xudmFyIGZsb29yTGVhc3RTaWduaWZpY2FudERpZ2l0ID0gcm91bmRTaWduaWZpY2FudERpZ2l0LmJpbmQobnVsbCwgLTEpO1xuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGluZGV4IGFuZCBlc3RpbWF0ZWQgc3RhcnRpbmcgdGltZSBvZiB0aGUgc2VnbWVudCB0aGF0XG4gKiBjb250YWlucyBhIHNwZWNpZmllZCBwbGF5YmFjayBwb3NpdGlvbiBpbiBhIG1lZGlhIHBsYXlsaXN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgbWVkaWEgcGxheWxpc3QgdG8gcXVlcnlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjdXJyZW50VGltZSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVhcmxpZXN0XG4gKiBwb3NzaWJsZSBwb3NpdGlvbiB0byBkZXRlcm1pbmUgdGhlIGNvbnRhaW5pbmcgc2VnbWVudCBmb3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydEluZGV4XG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnRUaW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxudmFyIGdldE1lZGlhSW5mb0ZvclRpbWUgPSBmdW5jdGlvbiBnZXRNZWRpYUluZm9Gb3JUaW1lKHBsYXlsaXN0LCBjdXJyZW50VGltZSwgc3RhcnRJbmRleCwgc3RhcnRUaW1lKSB7XG4gIHZhciBpID0gdm9pZCAwO1xuICB2YXIgc2VnbWVudCA9IHZvaWQgMDtcbiAgdmFyIG51bVNlZ21lbnRzID0gcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoO1xuICB2YXIgdGltZSA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lO1xuXG4gIGlmICh0aW1lIDwgMCkge1xuICAgIC8vIFdhbGsgYmFja3dhcmQgZnJvbSBzdGFydEluZGV4IGluIHRoZSBwbGF5bGlzdCwgYWRkaW5nIGR1cmF0aW9uc1xuICAgIC8vIHVudGlsIHdlIGZpbmQgYSBzZWdtZW50IHRoYXQgY29udGFpbnMgYHRpbWVgIGFuZCByZXR1cm4gaXRcbiAgICBpZiAoc3RhcnRJbmRleCA+IDApIHtcbiAgICAgIGZvciAoaSA9IHN0YXJ0SW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07XG4gICAgICAgIHRpbWUgKz0gZmxvb3JMZWFzdFNpZ25pZmljYW50RGlnaXQoc2VnbWVudC5kdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRpbWUgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lZGlhSW5kZXg6IGksXG4gICAgICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSAtIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc3RhcnRJbmRleCwgaSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBXZSB3ZXJlIHVuYWJsZSB0byBmaW5kIGEgZ29vZCBzZWdtZW50IHdpdGhpbiB0aGUgcGxheWxpc3RcbiAgICAvLyBzbyBzZWxlY3QgdGhlIGZpcnN0IHNlZ21lbnRcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lZGlhSW5kZXg6IDAsXG4gICAgICBzdGFydFRpbWU6IGN1cnJlbnRUaW1lXG4gICAgfTtcbiAgfSAvLyBXaGVuIHN0YXJ0SW5kZXggaXMgbmVnYXRpdmUsIHdlIGZpcnN0IHdhbGsgZm9yd2FyZCB0byBmaXJzdCBzZWdtZW50XG4gIC8vIGFkZGluZyB0YXJnZXQgZHVyYXRpb25zLiBJZiB3ZSBcInJ1biBvdXQgb2YgdGltZVwiIGJlZm9yZSBnZXR0aW5nIHRvXG4gIC8vIHRoZSBmaXJzdCBzZWdtZW50LCByZXR1cm4gdGhlIGZpcnN0IHNlZ21lbnRcblxuXG4gIGlmIChzdGFydEluZGV4IDwgMCkge1xuICAgIGZvciAoaSA9IHN0YXJ0SW5kZXg7IGkgPCAwOyBpKyspIHtcbiAgICAgIHRpbWUgLT0gcGxheWxpc3QudGFyZ2V0RHVyYXRpb247XG5cbiAgICAgIGlmICh0aW1lIDwgMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lZGlhSW5kZXg6IDAsXG4gICAgICAgICAgc3RhcnRUaW1lOiBjdXJyZW50VGltZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0SW5kZXggPSAwO1xuICB9IC8vIFdhbGsgZm9yd2FyZCBmcm9tIHN0YXJ0SW5kZXggaW4gdGhlIHBsYXlsaXN0LCBzdWJ0cmFjdGluZyBkdXJhdGlvbnNcbiAgLy8gdW50aWwgd2UgZmluZCBhIHNlZ21lbnQgdGhhdCBjb250YWlucyBgdGltZWAgYW5kIHJldHVybiBpdFxuXG5cbiAgZm9yIChpID0gc3RhcnRJbmRleDsgaSA8IG51bVNlZ21lbnRzOyBpKyspIHtcbiAgICBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07XG4gICAgdGltZSAtPSBjZWlsTGVhc3RTaWduaWZpY2FudERpZ2l0KHNlZ21lbnQuZHVyYXRpb24pO1xuXG4gICAgaWYgKHRpbWUgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZWRpYUluZGV4OiBpLFxuICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSArIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc3RhcnRJbmRleCwgaSlcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFdlIGFyZSBvdXQgb2YgcG9zc2libGUgY2FuZGlkYXRlcyBzbyBsb2FkIHRoZSBsYXN0IG9uZS4uLlxuXG5cbiAgcmV0dXJuIHtcbiAgICBtZWRpYUluZGV4OiBudW1TZWdtZW50cyAtIDEsXG4gICAgc3RhcnRUaW1lOiBjdXJyZW50VGltZVxuICB9O1xufTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgcGxheWxpc3QgaXMgYmxhY2tsaXN0ZWQgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBibGFja2xpc3RlZCBvciBub3RcbiAqIEBmdW5jdGlvbiBpc0JsYWNrbGlzdGVkXG4gKi9cblxuXG52YXIgaXNCbGFja2xpc3RlZCA9IGZ1bmN0aW9uIGlzQmxhY2tsaXN0ZWQocGxheWxpc3QpIHtcbiAgcmV0dXJuIHBsYXlsaXN0LmV4Y2x1ZGVVbnRpbCAmJiBwbGF5bGlzdC5leGNsdWRlVW50aWwgPiBEYXRlLm5vdygpO1xufTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgcGxheWxpc3QgaXMgY29tcGF0aWJsZSB3aXRoIGN1cnJlbnQgcGxheWJhY2sgY29uZmlndXJhdGlvbiBvciBoYXNcbiAqIGJlZW4gYmxhY2tsaXN0ZWQgcGVybWFuZW50bHkgZm9yIGJlaW5nIGluY29tcGF0aWJsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgdGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGUgcGxheWxpc3QgaXMgaW5jb21wYXRpYmxlIG9yIG5vdFxuICogQGZ1bmN0aW9uIGlzSW5jb21wYXRpYmxlXG4gKi9cblxuXG52YXIgaXNJbmNvbXBhdGlibGUgPSBmdW5jdGlvbiBpc0luY29tcGF0aWJsZShwbGF5bGlzdCkge1xuICByZXR1cm4gcGxheWxpc3QuZXhjbHVkZVVudGlsICYmIHBsYXlsaXN0LmV4Y2x1ZGVVbnRpbCA9PT0gSW5maW5pdHk7XG59O1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBlbmFibGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgdGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGUgcGxheWxpc3QgaXMgZW5hYmxlZCBvciBub3RcbiAqIEBmdW5jdGlvbiBpc0VuYWJsZWRcbiAqL1xuXG5cbnZhciBpc0VuYWJsZWQgPSBmdW5jdGlvbiBpc0VuYWJsZWQocGxheWxpc3QpIHtcbiAgdmFyIGJsYWNrbGlzdGVkID0gaXNCbGFja2xpc3RlZChwbGF5bGlzdCk7XG4gIHJldHVybiAhcGxheWxpc3QuZGlzYWJsZWQgJiYgIWJsYWNrbGlzdGVkO1xufTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgcGxheWxpc3QgaGFzIGJlZW4gbWFudWFsbHkgZGlzYWJsZWQgdGhyb3VnaCB0aGUgcmVwcmVzZW50YXRpb25zIGFwaS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgdGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGUgcGxheWxpc3QgaXMgZGlzYWJsZWQgbWFudWFsbHkgb3Igbm90XG4gKiBAZnVuY3Rpb24gaXNEaXNhYmxlZFxuICovXG5cblxudmFyIGlzRGlzYWJsZWQgPSBmdW5jdGlvbiBpc0Rpc2FibGVkKHBsYXlsaXN0KSB7XG4gIHJldHVybiBwbGF5bGlzdC5kaXNhYmxlZDtcbn07XG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwbGF5bGlzdCBpcyBhbiBBRVMgZW5jcnlwdGVkIEhMUyBzdHJlYW1cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGl0J3MgYW4gQUVTIGVuY3J5cHRlZCBITFMgc3RyZWFtXG4gKi9cblxuXG52YXIgaXNBZXMgPSBmdW5jdGlvbiBpc0FlcyhtZWRpYSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lZGlhLnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG1lZGlhLnNlZ21lbnRzW2ldLmtleSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHBsYXlsaXN0IGNvbnRhaW5zIGZNUDRcbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBwbGF5bGlzdCBjb250YWlucyBmTVA0XG4gKi9cblxuXG52YXIgaXNGbXA0ID0gZnVuY3Rpb24gaXNGbXA0KG1lZGlhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWEuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWVkaWEuc2VnbWVudHNbaV0ubWFwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHBsYXlsaXN0IGhhcyBhIHZhbHVlIGZvciB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyXG4gKiAgICAgICAgQXR0cmlidXRlIHRvIGNoZWNrIGZvclxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0XG4gKiAgICAgICAgVGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciB0aGUgcGxheWxpc3QgY29udGFpbnMgYSB2YWx1ZSBmb3IgdGhlIGF0dHJpYnV0ZSBvciBub3RcbiAqIEBmdW5jdGlvbiBoYXNBdHRyaWJ1dGVcbiAqL1xuXG5cbnZhciBoYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbiBoYXNBdHRyaWJ1dGUoYXR0ciwgcGxheWxpc3QpIHtcbiAgcmV0dXJuIHBsYXlsaXN0LmF0dHJpYnV0ZXMgJiYgcGxheWxpc3QuYXR0cmlidXRlc1thdHRyXTtcbn07XG4vKipcbiAqIEVzdGltYXRlcyB0aGUgdGltZSByZXF1aXJlZCB0byBjb21wbGV0ZSBhIHNlZ21lbnQgZG93bmxvYWQgZnJvbSB0aGUgc3BlY2lmaWVkIHBsYXlsaXN0XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNlZ21lbnREdXJhdGlvblxuICogICAgICAgIER1cmF0aW9uIG9mIHJlcXVlc3RlZCBzZWdtZW50XG4gKiBAcGFyYW0ge051bWJlcn0gYmFuZHdpZHRoXG4gKiAgICAgICAgQ3VycmVudCBtZWFzdXJlZCBiYW5kd2lkdGggb2YgdGhlIHBsYXllclxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0XG4gKiAgICAgICAgVGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHBhcmFtIHtOdW1iZXI9fSBieXRlc1JlY2VpdmVkXG4gKiAgICAgICAgTnVtYmVyIG9mIGJ5dGVzIGFscmVhZHkgcmVjZWl2ZWQgZm9yIHRoZSByZXF1ZXN0LiBEZWZhdWx0cyB0byAwXG4gKiBAcmV0dXJuIHtOdW1iZXJ8TmFOfVxuICogICAgICAgICBUaGUgZXN0aW1hdGVkIHRpbWUgdG8gcmVxdWVzdCB0aGUgc2VnbWVudC4gTmFOIGlmIGJhbmR3aWR0aCBpbmZvcm1hdGlvbiBmb3JcbiAqICAgICAgICAgdGhlIGdpdmVuIHBsYXlsaXN0IGlzIHVuYXZhaWxhYmxlXG4gKiBAZnVuY3Rpb24gZXN0aW1hdGVTZWdtZW50UmVxdWVzdFRpbWVcbiAqL1xuXG5cbnZhciBlc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZSA9IGZ1bmN0aW9uIGVzdGltYXRlU2VnbWVudFJlcXVlc3RUaW1lKHNlZ21lbnREdXJhdGlvbiwgYmFuZHdpZHRoLCBwbGF5bGlzdCkge1xuICB2YXIgYnl0ZXNSZWNlaXZlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcblxuICBpZiAoIWhhc0F0dHJpYnV0ZSgnQkFORFdJRFRIJywgcGxheWxpc3QpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBzaXplID0gc2VnbWVudER1cmF0aW9uICogcGxheWxpc3QuYXR0cmlidXRlcy5CQU5EV0lEVEg7XG4gIHJldHVybiAoc2l6ZSAtIGJ5dGVzUmVjZWl2ZWQgKiA4KSAvIGJhbmR3aWR0aDtcbn07XG4vKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHBsYXlsaXN0IGlzIHRoZSBsb3dlc3QgcmVuZGl0aW9uXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBvbiBsb3dlc3QgcmVuZGl0aW9uXG4gKi9cblxuXG52YXIgaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uID0gZnVuY3Rpb24gaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uKG1hc3RlciwgbWVkaWEpIHtcbiAgaWYgKG1hc3Rlci5wbGF5bGlzdHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgY3VycmVudEJhbmR3aWR0aCA9IG1lZGlhLmF0dHJpYnV0ZXMuQkFORFdJRFRIIHx8IE51bWJlci5NQVhfVkFMVUU7XG4gIHJldHVybiBtYXN0ZXIucGxheWxpc3RzLmZpbHRlcihmdW5jdGlvbiAocGxheWxpc3QpIHtcbiAgICBpZiAoIWlzRW5hYmxlZChwbGF5bGlzdCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHBsYXlsaXN0LmF0dHJpYnV0ZXMuQkFORFdJRFRIIHx8IDApIDwgY3VycmVudEJhbmR3aWR0aDtcbiAgfSkubGVuZ3RoID09PSAwO1xufTsgLy8gZXhwb3J0c1xuXG5cbnZhciBQbGF5bGlzdCA9IHtcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBzZWVrYWJsZTogc2Vla2FibGUsXG4gIHNhZmVMaXZlSW5kZXg6IHNhZmVMaXZlSW5kZXgsXG4gIGdldE1lZGlhSW5mb0ZvclRpbWU6IGdldE1lZGlhSW5mb0ZvclRpbWUsXG4gIGlzRW5hYmxlZDogaXNFbmFibGVkLFxuICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICBpc0JsYWNrbGlzdGVkOiBpc0JsYWNrbGlzdGVkLFxuICBpc0luY29tcGF0aWJsZTogaXNJbmNvbXBhdGlibGUsXG4gIHBsYXlsaXN0RW5kOiBwbGF5bGlzdEVuZCxcbiAgaXNBZXM6IGlzQWVzLFxuICBpc0ZtcDQ6IGlzRm1wNCxcbiAgaGFzQXR0cmlidXRlOiBoYXNBdHRyaWJ1dGUsXG4gIGVzdGltYXRlU2VnbWVudFJlcXVlc3RUaW1lOiBlc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZSxcbiAgaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uOiBpc0xvd2VzdEVuYWJsZWRSZW5kaXRpb25cbn07XG4vKipcbiAqIEBmaWxlIHhoci5qc1xuICovXG5cbnZhciB2aWRlb2pzWEhSID0gdmlkZW9qcyQxLnhocixcbiAgICBtZXJnZU9wdGlvbnMkMSQxID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucztcblxudmFyIHhockZhY3RvcnkgPSBmdW5jdGlvbiB4aHJGYWN0b3J5KCkge1xuICB2YXIgeGhyID0gZnVuY3Rpb24gWGhyRnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAvLyBBZGQgYSBkZWZhdWx0IHRpbWVvdXQgZm9yIGFsbCBobHMgcmVxdWVzdHNcbiAgICBvcHRpb25zID0gbWVyZ2VPcHRpb25zJDEkMSh7XG4gICAgICB0aW1lb3V0OiA0NWUzXG4gICAgfSwgb3B0aW9ucyk7IC8vIEFsbG93IGFuIG9wdGlvbmFsIHVzZXItc3BlY2lmaWVkIGZ1bmN0aW9uIHRvIG1vZGlmeSB0aGUgb3B0aW9uXG4gICAgLy8gb2JqZWN0IGJlZm9yZSB3ZSBjb25zdHJ1Y3QgdGhlIHhociByZXF1ZXN0XG5cbiAgICB2YXIgYmVmb3JlUmVxdWVzdCA9IFhockZ1bmN0aW9uLmJlZm9yZVJlcXVlc3QgfHwgdmlkZW9qcyQxLkhscy54aHIuYmVmb3JlUmVxdWVzdDtcblxuICAgIGlmIChiZWZvcmVSZXF1ZXN0ICYmIHR5cGVvZiBiZWZvcmVSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgbmV3T3B0aW9ucyA9IGJlZm9yZVJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgIGlmIChuZXdPcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gdmlkZW9qc1hIUihvcHRpb25zLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3BvbnNlKSB7XG4gICAgICB2YXIgcmVxUmVzcG9uc2UgPSByZXF1ZXN0LnJlc3BvbnNlO1xuXG4gICAgICBpZiAoIWVycm9yICYmIHJlcVJlc3BvbnNlKSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmVxdWVzdC5yb3VuZFRyaXBUaW1lID0gcmVxdWVzdC5yZXNwb25zZVRpbWUgLSByZXF1ZXN0LnJlcXVlc3RUaW1lO1xuICAgICAgICByZXF1ZXN0LmJ5dGVzUmVjZWl2ZWQgPSByZXFSZXNwb25zZS5ieXRlTGVuZ3RoIHx8IHJlcVJlc3BvbnNlLmxlbmd0aDtcblxuICAgICAgICBpZiAoIXJlcXVlc3QuYmFuZHdpZHRoKSB7XG4gICAgICAgICAgcmVxdWVzdC5iYW5kd2lkdGggPSBNYXRoLmZsb29yKHJlcXVlc3QuYnl0ZXNSZWNlaXZlZCAvIHJlcXVlc3Qucm91bmRUcmlwVGltZSAqIDggKiAxMDAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2UuaGVhZGVycykge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlSGVhZGVycyA9IHJlc3BvbnNlLmhlYWRlcnM7XG4gICAgICB9IC8vIHZpZGVvanMueGhyIG5vdyB1c2VzIGEgc3BlY2lmaWMgY29kZSBvbiB0aGUgZXJyb3JcbiAgICAgIC8vIG9iamVjdCB0byBzaWduYWwgdGhhdCBhIHJlcXVlc3QgaGFzIHRpbWVkIG91dCBpbnN0ZWFkXG4gICAgICAvLyBvZiBzZXR0aW5nIGEgYm9vbGVhbiBvbiB0aGUgcmVxdWVzdCBvYmplY3RcblxuXG4gICAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ0VUSU1FRE9VVCcpIHtcbiAgICAgICAgcmVxdWVzdC50aW1lZG91dCA9IHRydWU7XG4gICAgICB9IC8vIHZpZGVvanMueGhyIG5vIGxvbmdlciBjb25zaWRlcnMgc3RhdHVzIGNvZGVzIG91dHNpZGUgb2YgMjAwIGFuZCAwXG4gICAgICAvLyAoZm9yIGZpbGUgdXJpcykgdG8gYmUgZXJyb3JzLCBidXQgdGhlIG9sZCBYSFIgZGlkLCBzbyBlbXVsYXRlIHRoYXRcbiAgICAgIC8vIGJlaGF2aW9yLiBTdGF0dXMgMjA2IG1heSBiZSB1c2VkIGluIHJlc3BvbnNlIHRvIGJ5dGVyYW5nZSByZXF1ZXN0cy5cblxuXG4gICAgICBpZiAoIWVycm9yICYmICFyZXF1ZXN0LmFib3J0ZWQgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwNiAmJiByZXNwb25zZS5zdGF0dXNDb2RlICE9PSAwKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEVycm9yKCdYSFIgRmFpbGVkIHdpdGggYSByZXNwb25zZSBvZjogJyArIChyZXF1ZXN0ICYmIChyZXFSZXNwb25zZSB8fCByZXF1ZXN0LnJlc3BvbnNlVGV4dCkpKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soZXJyb3IsIHJlcXVlc3QpO1xuICAgIH0pO1xuICAgIHZhciBvcmlnaW5hbEFib3J0ID0gcmVxdWVzdC5hYm9ydDtcblxuICAgIHJlcXVlc3QuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXF1ZXN0LmFib3J0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsQWJvcnQuYXBwbHkocmVxdWVzdCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdC51cmkgPSBvcHRpb25zLnVyaTtcbiAgICByZXF1ZXN0LnJlcXVlc3RUaW1lID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfTtcblxuICByZXR1cm4geGhyO1xufTtcbi8qKlxuICogVHVybnMgc2VnbWVudCBieXRlcmFuZ2UgaW50byBhIHN0cmluZyBzdWl0YWJsZSBmb3IgdXNlIGluXG4gKiBIVFRQIFJhbmdlIHJlcXVlc3RzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGJ5dGVyYW5nZSAtIGFuIG9iamVjdCB3aXRoIHR3byB2YWx1ZXMgZGVmaW5pbmcgdGhlIHN0YXJ0IGFuZCBlbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBhIGJ5dGUtcmFuZ2VcbiAqL1xuXG5cbnZhciBieXRlcmFuZ2VTdHIgPSBmdW5jdGlvbiBieXRlcmFuZ2VTdHIoYnl0ZXJhbmdlKSB7XG4gIHZhciBieXRlcmFuZ2VTdGFydCA9IHZvaWQgMDtcbiAgdmFyIGJ5dGVyYW5nZUVuZCA9IHZvaWQgMDsgLy8gYGJ5dGVyYW5nZUVuZGAgaXMgb25lIGxlc3MgdGhhbiBgb2Zmc2V0ICsgbGVuZ3RoYCBiZWNhdXNlIHRoZSBIVFRQIHJhbmdlXG4gIC8vIGhlYWRlciB1c2VzIGluY2x1c2l2ZSByYW5nZXNcblxuICBieXRlcmFuZ2VFbmQgPSBieXRlcmFuZ2Uub2Zmc2V0ICsgYnl0ZXJhbmdlLmxlbmd0aCAtIDE7XG4gIGJ5dGVyYW5nZVN0YXJ0ID0gYnl0ZXJhbmdlLm9mZnNldDtcbiAgcmV0dXJuICdieXRlcz0nICsgYnl0ZXJhbmdlU3RhcnQgKyAnLScgKyBieXRlcmFuZ2VFbmQ7XG59O1xuLyoqXG4gKiBEZWZpbmVzIGhlYWRlcnMgZm9yIHVzZSBpbiB0aGUgeGhyIHJlcXVlc3QgZm9yIGEgcGFydGljdWxhciBzZWdtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50IC0gYSBzaW1wbGlmaWVkIGNvcHkgb2YgdGhlIHNlZ21lbnRJbmZvIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFNlZ21lbnRMb2FkZXJcbiAqL1xuXG5cbnZhciBzZWdtZW50WGhySGVhZGVycyA9IGZ1bmN0aW9uIHNlZ21lbnRYaHJIZWFkZXJzKHNlZ21lbnQpIHtcbiAgdmFyIGhlYWRlcnMgPSB7fTtcblxuICBpZiAoc2VnbWVudC5ieXRlcmFuZ2UpIHtcbiAgICBoZWFkZXJzLlJhbmdlID0gYnl0ZXJhbmdlU3RyKHNlZ21lbnQuYnl0ZXJhbmdlKTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJzO1xufTtcbi8qKlxuICogQGZpbGUgYmluLXV0aWxzLmpzXG4gKi9cblxuLyoqXG4gKiBjb252ZXJ0IGEgVGltZVJhbmdlIHRvIHRleHRcbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZX0gcmFuZ2UgdGhlIHRpbWVyYW5nZSB0byB1c2UgZm9yIGNvbnZlcnNpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBpIHRoZSBpdGVyYXRvciBvbiB0aGUgcmFuZ2UgdG8gY29udmVydFxuICovXG5cblxudmFyIHRleHRSYW5nZSA9IGZ1bmN0aW9uIHRleHRSYW5nZShyYW5nZSwgaSkge1xuICByZXR1cm4gcmFuZ2Uuc3RhcnQoaSkgKyAnLScgKyByYW5nZS5lbmQoaSk7XG59O1xuLyoqXG4gKiBmb3JtYXQgYSBudW1iZXIgYXMgaGV4IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBlIFRoZSBudW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpIHRoZSBpdGVyYXRvclxuICovXG5cblxudmFyIGZvcm1hdEhleFN0cmluZyA9IGZ1bmN0aW9uIGZvcm1hdEhleFN0cmluZyhlLCBpKSB7XG4gIHZhciB2YWx1ZSA9IGUudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gJzAwJy5zdWJzdHJpbmcoMCwgMiAtIHZhbHVlLmxlbmd0aCkgKyB2YWx1ZSArIChpICUgMiA/ICcgJyA6ICcnKTtcbn07XG5cbnZhciBmb3JtYXRBc2NpaVN0cmluZyA9IGZ1bmN0aW9uIGZvcm1hdEFzY2lpU3RyaW5nKGUpIHtcbiAgaWYgKGUgPj0gMHgyMCAmJiBlIDwgMHg3ZSkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpO1xuICB9XG5cbiAgcmV0dXJuICcuJztcbn07XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGZvciBzZW5kaW5nIHRvIGEgd2ViIHdvcmtlciBtb2RpZnlpbmcgcHJvcGVydGllcyB0aGF0IGFyZSBUeXBlZEFycmF5c1xuICogaW50byBhIG5ldyBvYmplY3Qgd2l0aCBzZXBlcmF0ZWQgcHJvcGVydGllcyBmb3IgdGhlIGJ1ZmZlciwgYnl0ZU9mZnNldCwgYW5kIGJ5dGVMZW5ndGguXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VcbiAqICAgICAgICBPYmplY3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHRvIHNlbmQgdG8gdGhlIHdlYiB3b3JrZXJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgTW9kaWZpZWQgbWVzc2FnZSB3aXRoIFR5cGVkQXJyYXkgdmFsdWVzIGV4cGFuZGVkXG4gKiBAZnVuY3Rpb24gY3JlYXRlVHJhbnNmZXJhYmxlTWVzc2FnZVxuICovXG5cblxudmFyIGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2UgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgdmFyIHRyYW5zZmVyYWJsZSA9IHt9O1xuICBPYmplY3Qua2V5cyhtZXNzYWdlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBtZXNzYWdlW2tleV07XG5cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgdHJhbnNmZXJhYmxlW2tleV0gPSB7XG4gICAgICAgIGJ5dGVzOiB2YWx1ZS5idWZmZXIsXG4gICAgICAgIGJ5dGVPZmZzZXQ6IHZhbHVlLmJ5dGVPZmZzZXQsXG4gICAgICAgIGJ5dGVMZW5ndGg6IHZhbHVlLmJ5dGVMZW5ndGhcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zZmVyYWJsZVtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRyYW5zZmVyYWJsZTtcbn07XG4vKipcbiAqIFJldHVybnMgYSB1bmlxdWUgc3RyaW5nIGlkZW50aWZpZXIgZm9yIGEgbWVkaWEgaW5pdGlhbGl6YXRpb25cbiAqIHNlZ21lbnQuXG4gKi9cblxuXG52YXIgaW5pdFNlZ21lbnRJZCA9IGZ1bmN0aW9uIGluaXRTZWdtZW50SWQoaW5pdFNlZ21lbnQpIHtcbiAgdmFyIGJ5dGVyYW5nZSA9IGluaXRTZWdtZW50LmJ5dGVyYW5nZSB8fCB7XG4gICAgbGVuZ3RoOiBJbmZpbml0eSxcbiAgICBvZmZzZXQ6IDBcbiAgfTtcbiAgcmV0dXJuIFtieXRlcmFuZ2UubGVuZ3RoLCBieXRlcmFuZ2Uub2Zmc2V0LCBpbml0U2VnbWVudC5yZXNvbHZlZFVyaV0uam9pbignLCcpO1xufTtcbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBzdHJpbmcgaWRlbnRpZmllciBmb3IgYSBtZWRpYSBzZWdtZW50IGtleS5cbiAqL1xuXG5cbnZhciBzZWdtZW50S2V5SWQgPSBmdW5jdGlvbiBzZWdtZW50S2V5SWQoa2V5KSB7XG4gIHJldHVybiBrZXkucmVzb2x2ZWRVcmk7XG59O1xuLyoqXG4gKiB1dGlscyB0byBoZWxwIGR1bXAgYmluYXJ5IGRhdGEgdG8gdGhlIGNvbnNvbGVcbiAqL1xuXG5cbnZhciBoZXhEdW1wID0gZnVuY3Rpb24gaGV4RHVtcChkYXRhKSB7XG4gIHZhciBieXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRhdGEpO1xuICB2YXIgc3RlcCA9IDE2O1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBoZXggPSB2b2lkIDA7XG4gIHZhciBhc2NpaSA9IHZvaWQgMDtcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IGJ5dGVzLmxlbmd0aCAvIHN0ZXA7IGorKykge1xuICAgIGhleCA9IGJ5dGVzLnNsaWNlKGogKiBzdGVwLCBqICogc3RlcCArIHN0ZXApLm1hcChmb3JtYXRIZXhTdHJpbmcpLmpvaW4oJycpO1xuICAgIGFzY2lpID0gYnl0ZXMuc2xpY2UoaiAqIHN0ZXAsIGogKiBzdGVwICsgc3RlcCkubWFwKGZvcm1hdEFzY2lpU3RyaW5nKS5qb2luKCcnKTtcbiAgICByZXN1bHQgKz0gaGV4ICsgJyAnICsgYXNjaWkgKyAnXFxuJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgdGFnRHVtcCA9IGZ1bmN0aW9uIHRhZ0R1bXAoX3JlZikge1xuICB2YXIgYnl0ZXMgPSBfcmVmLmJ5dGVzO1xuICByZXR1cm4gaGV4RHVtcChieXRlcyk7XG59O1xuXG52YXIgdGV4dFJhbmdlcyA9IGZ1bmN0aW9uIHRleHRSYW5nZXMocmFuZ2VzKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGkgPSB2b2lkIDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSB0ZXh0UmFuZ2UocmFuZ2VzLCBpKSArICcgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgdXRpbHMgPVxuLyojX19QVVJFX18qL1xuT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2U6IGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2UsXG4gIGluaXRTZWdtZW50SWQ6IGluaXRTZWdtZW50SWQsXG4gIHNlZ21lbnRLZXlJZDogc2VnbWVudEtleUlkLFxuICBoZXhEdW1wOiBoZXhEdW1wLFxuICB0YWdEdW1wOiB0YWdEdW1wLFxuICB0ZXh0UmFuZ2VzOiB0ZXh0UmFuZ2VzXG59KTsgLy8gVE9ETyBoYW5kbGUgZm1wNCBjYXNlIHdoZXJlIHRoZSB0aW1pbmcgaW5mbyBpcyBhY2N1cmF0ZSBhbmQgZG9lc24ndCBpbnZvbHZlIHRyYW5zbXV4XG4vLyBBZGQgMjUlIHRvIHRoZSBzZWdtZW50IGR1cmF0aW9uIHRvIGFjY291bnQgZm9yIHNtYWxsIGRpc2NyZXBlbmNpZXMgaW4gc2VnbWVudCB0aW1pbmcuXG4vLyAyNSUgd2FzIGFyYml0cmFyaWx5IGNob3NlbiwgYW5kIG1heSBuZWVkIHRvIGJlIHJlZmluZWQgb3ZlciB0aW1lLlxuXG52YXIgU0VHTUVOVF9FTkRfRlVER0VfUEVSQ0VOVCA9IDAuMjU7XG4vKipcbiAqIENvbnZlcnRzIGEgcGxheWVyIHRpbWUgKGFueSB0aW1lIHRoYXQgY2FuIGJlIGdvdHRlbi9zZXQgZnJvbSBwbGF5ZXIuY3VycmVudFRpbWUoKSxcbiAqIGUuZy4sIGFueSB0aW1lIHdpdGhpbiBwbGF5ZXIuc2Vla2FibGUoKS5zdGFydCgwKSB0byBwbGF5ZXIuc2Vla2FibGUoKS5lbmQoMCkpIHRvIGFcbiAqIHByb2dyYW0gdGltZSAoYW55IHRpbWUgcmVmZXJlbmNpbmcgdGhlIHJlYWwgd29ybGQgKGUuZy4sIEVYVC1YLVBST0dSQU0tREFURS1USU1FKSkuXG4gKlxuICogVGhlIGNvbnRhaW5pbmcgc2VnbWVudCBpcyByZXF1aXJlZCBhcyB0aGUgRVhULVgtUFJPR1JBTS1EQVRFLVRJTUUgc2VydmVzIGFzIGFuIFwiYW5jaG9yXG4gKiBwb2ludFwiIChhIHBvaW50IHdoZXJlIHdlIGhhdmUgYSBtYXBwaW5nIGZyb20gcHJvZ3JhbSB0aW1lIHRvIHBsYXllciB0aW1lLCB3aXRoIHBsYXllclxuICogdGltZSBiZWluZyB0aGUgcG9zdCB0cmFuc211eCBzdGFydCBvZiB0aGUgc2VnbWVudCkuXG4gKlxuICogRm9yIG1vcmUgZGV0YWlscywgc2VlIFt0aGlzIGRvY10oLi4vLi4vZG9jcy9wcm9ncmFtLXRpbWUtZnJvbS1wbGF5ZXItdGltZS5tZCkuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHBsYXllclRpbWUgdGhlIHBsYXllciB0aW1lXG4gKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudCB0aGUgc2VnbWVudCB3aGljaCBjb250YWlucyB0aGUgcGxheWVyIHRpbWVcbiAqIEByZXR1cm4ge0RhdGV9IHByb2dyYW0gdGltZVxuICovXG5cbnZhciBwbGF5ZXJUaW1lVG9Qcm9ncmFtVGltZSA9IGZ1bmN0aW9uIHBsYXllclRpbWVUb1Byb2dyYW1UaW1lKHBsYXllclRpbWUsIHNlZ21lbnQpIHtcbiAgaWYgKCFzZWdtZW50LmRhdGVUaW1lT2JqZWN0KSB7XG4gICAgLy8gQ2FuJ3QgY29udmVydCB3aXRob3V0IGFuIFwiYW5jaG9yIHBvaW50XCIgZm9yIHRoZSBwcm9ncmFtIHRpbWUgKGkuZS4sIGEgdGltZSB0aGF0IGNhblxuICAgIC8vIGJlIHVzZWQgdG8gbWFwIHRoZSBzdGFydCBvZiBhIHNlZ21lbnQgd2l0aCBhIHJlYWwgd29ybGQgdGltZSkuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgdHJhbnNtdXhlclByZXBlbmRlZFNlY29uZHMgPSBzZWdtZW50LnZpZGVvVGltaW5nSW5mby50cmFuc211eGVyUHJlcGVuZGVkU2Vjb25kcztcbiAgdmFyIHRyYW5zbXV4ZWRTdGFydCA9IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvLnRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydDsgLy8gZ2V0IHRoZSBzdGFydCBvZiB0aGUgY29udGVudCBmcm9tIGJlZm9yZSBvbGQgY29udGVudCBpcyBwcmVwZW5kZWRcblxuICB2YXIgc3RhcnRPZlNlZ21lbnQgPSB0cmFuc211eGVkU3RhcnQgKyB0cmFuc211eGVyUHJlcGVuZGVkU2Vjb25kcztcbiAgdmFyIG9mZnNldEZyb21TZWdtZW50U3RhcnQgPSBwbGF5ZXJUaW1lIC0gc3RhcnRPZlNlZ21lbnQ7XG4gIHJldHVybiBuZXcgRGF0ZShzZWdtZW50LmRhdGVUaW1lT2JqZWN0LmdldFRpbWUoKSArIG9mZnNldEZyb21TZWdtZW50U3RhcnQgKiAxMDAwKTtcbn07XG5cbnZhciBvcmlnaW5hbFNlZ21lbnRWaWRlb0R1cmF0aW9uID0gZnVuY3Rpb24gb3JpZ2luYWxTZWdtZW50VmlkZW9EdXJhdGlvbih2aWRlb1RpbWluZ0luZm8pIHtcbiAgcmV0dXJuIHZpZGVvVGltaW5nSW5mby50cmFuc211eGVkUHJlc2VudGF0aW9uRW5kIC0gdmlkZW9UaW1pbmdJbmZvLnRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydCAtIHZpZGVvVGltaW5nSW5mby50cmFuc211eGVyUHJlcGVuZGVkU2Vjb25kcztcbn07XG4vKipcbiAqIEZpbmRzIGEgc2VnbWVudCB0aGF0IGNvbnRhaW5zIHRoZSB0aW1lIHJlcXVlc3RlZCBnaXZlbiBhcyBhbiBJU08tODYwMSBzdHJpbmcuIFRoZVxuICogcmV0dXJuZWQgc2VnbWVudCBtaWdodCBiZSBhbiBlc3RpbWF0ZSBvciBhbiBhY2N1cmF0ZSBtYXRjaC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvZ3JhbVRpbWUgVGhlIElTTy04NjAxIHByb2dyYW1UaW1lIHRvIGZpbmQgYSBtYXRjaCBmb3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCBBIHBsYXlsaXN0IG9iamVjdCB0byBzZWFyY2ggd2l0aGluXG4gKi9cblxuXG52YXIgZmluZFNlZ21lbnRGb3JQcm9ncmFtVGltZSA9IGZ1bmN0aW9uIGZpbmRTZWdtZW50Rm9yUHJvZ3JhbVRpbWUocHJvZ3JhbVRpbWUsIHBsYXlsaXN0KSB7XG4gIC8vIEFzc3VtcHRpb25zOlxuICAvLyAgLSB2ZXJpZnlQcm9ncmFtRGF0ZVRpbWVUYWdzIGhhcyBhbHJlYWR5IGJlZW4gcnVuXG4gIC8vICAtIGxpdmUgc3RyZWFtcyBoYXZlIGJlZW4gc3RhcnRlZFxuICB2YXIgZGF0ZVRpbWVPYmplY3QgPSB2b2lkIDA7XG5cbiAgdHJ5IHtcbiAgICBkYXRlVGltZU9iamVjdCA9IG5ldyBEYXRlKHByb2dyYW1UaW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFwbGF5bGlzdCB8fCAhcGxheWxpc3Quc2VnbWVudHMgfHwgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2VnbWVudCA9IHBsYXlsaXN0LnNlZ21lbnRzWzBdO1xuXG4gIGlmIChkYXRlVGltZU9iamVjdCA8IHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QpIHtcbiAgICAvLyBSZXF1ZXN0ZWQgdGltZSBpcyBiZWZvcmUgc3RyZWFtIHN0YXJ0LlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07XG4gICAgdmFyIG5leHRTZWdtZW50U3RhcnQgPSBwbGF5bGlzdC5zZWdtZW50c1tpICsgMV0uZGF0ZVRpbWVPYmplY3Q7XG5cbiAgICBpZiAoZGF0ZVRpbWVPYmplY3QgPCBuZXh0U2VnbWVudFN0YXJ0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgbGFzdFNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1twbGF5bGlzdC5zZWdtZW50cy5sZW5ndGggLSAxXTtcbiAgdmFyIGxhc3RTZWdtZW50U3RhcnQgPSBsYXN0U2VnbWVudC5kYXRlVGltZU9iamVjdDtcbiAgdmFyIGxhc3RTZWdtZW50RHVyYXRpb24gPSBsYXN0U2VnbWVudC52aWRlb1RpbWluZ0luZm8gPyBvcmlnaW5hbFNlZ21lbnRWaWRlb0R1cmF0aW9uKGxhc3RTZWdtZW50LnZpZGVvVGltaW5nSW5mbykgOiBsYXN0U2VnbWVudC5kdXJhdGlvbiArIGxhc3RTZWdtZW50LmR1cmF0aW9uICogU0VHTUVOVF9FTkRfRlVER0VfUEVSQ0VOVDtcbiAgdmFyIGxhc3RTZWdtZW50RW5kID0gbmV3IERhdGUobGFzdFNlZ21lbnRTdGFydC5nZXRUaW1lKCkgKyBsYXN0U2VnbWVudER1cmF0aW9uICogMTAwMCk7XG5cbiAgaWYgKGRhdGVUaW1lT2JqZWN0ID4gbGFzdFNlZ21lbnRFbmQpIHtcbiAgICAvLyBCZXlvbmQgdGhlIGVuZCBvZiB0aGUgc3RyZWFtLCBvciBvdXIgYmVzdCBndWVzcyBvZiB0aGUgZW5kIG9mIHRoZSBzdHJlYW0uXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoZGF0ZVRpbWVPYmplY3QgPiBsYXN0U2VnbWVudFN0YXJ0KSB7XG4gICAgc2VnbWVudCA9IGxhc3RTZWdtZW50O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZWdtZW50OiBzZWdtZW50LFxuICAgIGVzdGltYXRlZFN0YXJ0OiBzZWdtZW50LnZpZGVvVGltaW5nSW5mbyA/IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvLnRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydCA6IFBsYXlsaXN0LmR1cmF0aW9uKHBsYXlsaXN0LCBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlICsgcGxheWxpc3Quc2VnbWVudHMuaW5kZXhPZihzZWdtZW50KSksXG4gICAgLy8gQWx0aG91Z2gsIGdpdmVuIHRoYXQgYWxsIHNlZ21lbnRzIGhhdmUgYWNjdXJhdGUgZGF0ZSB0aW1lIG9iamVjdHMsIHRoZSBzZWdtZW50XG4gICAgLy8gc2VsZWN0ZWQgc2hvdWxkIGJlIGFjY3VyYXRlLCB1bmxlc3MgdGhlIHZpZGVvIGhhcyBiZWVuIHRyYW5zbXV4ZWQgYXQgc29tZSBwb2ludFxuICAgIC8vIChkZXRlcm1pbmVkIGJ5IHRoZSBwcmVzZW5jZSBvZiB0aGUgdmlkZW9UaW1pbmdJbmZvIG9iamVjdCksIHRoZSBzZWdtZW50J3MgXCJwbGF5ZXJcbiAgICAvLyB0aW1lXCIgKHRoZSBzdGFydCB0aW1lIGluIHRoZSBwbGF5ZXIpIGNhbid0IGJlIGNvbnNpZGVyZWQgYWNjdXJhdGUuXG4gICAgdHlwZTogc2VnbWVudC52aWRlb1RpbWluZ0luZm8gPyAnYWNjdXJhdGUnIDogJ2VzdGltYXRlJ1xuICB9O1xufTtcbi8qKlxuICogRmluZHMgYSBzZWdtZW50IHRoYXQgY29udGFpbnMgdGhlIGdpdmVuIHBsYXllciB0aW1lKGluIHNlY29uZHMpLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lIFRoZSBwbGF5ZXIgdGltZSB0byBmaW5kIGEgbWF0Y2ggZm9yXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgQSBwbGF5bGlzdCBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICovXG5cblxudmFyIGZpbmRTZWdtZW50Rm9yUGxheWVyVGltZSA9IGZ1bmN0aW9uIGZpbmRTZWdtZW50Rm9yUGxheWVyVGltZSh0aW1lLCBwbGF5bGlzdCkge1xuICAvLyBBc3N1bXB0aW9uczpcbiAgLy8gLSB0aGVyZSB3aWxsIGFsd2F5cyBiZSBhIHNlZ21lbnQuZHVyYXRpb25cbiAgLy8gLSB3ZSBjYW4gc3RhcnQgZnJvbSB6ZXJvXG4gIC8vIC0gc2VnbWVudHMgYXJlIGluIHRpbWUgb3JkZXJcbiAgaWYgKCFwbGF5bGlzdCB8fCAhcGxheWxpc3Quc2VnbWVudHMgfHwgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2VnbWVudEVuZCA9IDA7XG4gIHZhciBzZWdtZW50ID0gdm9pZCAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07IC8vIHZpZGVvVGltaW5nSW5mbyBpcyBzZXQgYWZ0ZXIgdGhlIHNlZ21lbnQgaXMgZG93bmxvYWRlZCBhbmQgdHJhbnNtdXhlZCwgYW5kXG4gICAgLy8gc2hvdWxkIGNvbnRhaW4gdGhlIG1vc3QgYWNjdXJhdGUgdmFsdWVzIHdlIGhhdmUgZm9yIHRoZSBzZWdtZW50J3MgcGxheWVyIHRpbWVzLlxuICAgIC8vXG4gICAgLy8gVXNlIHRoZSBhY2N1cmF0ZSB0cmFuc211eGVkUHJlc2VudGF0aW9uRW5kIHZhbHVlIGlmIGl0IGlzIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGZhbGxcbiAgICAvLyBiYWNrIHRvIGFuIGVzdGltYXRlIGJhc2VkIG9uIHRoZSBtYW5pZmVzdCBkZXJpdmVkIChpbmFjY3VyYXRlKSBzZWdtZW50LmR1cmF0aW9uLCB0b1xuICAgIC8vIGNhbGN1bGF0ZSBhbiBlbmQgdmFsdWUuXG5cbiAgICBzZWdtZW50RW5kID0gc2VnbWVudC52aWRlb1RpbWluZ0luZm8gPyBzZWdtZW50LnZpZGVvVGltaW5nSW5mby50cmFuc211eGVkUHJlc2VudGF0aW9uRW5kIDogc2VnbWVudEVuZCArIHNlZ21lbnQuZHVyYXRpb247XG5cbiAgICBpZiAodGltZSA8PSBzZWdtZW50RW5kKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgbGFzdFNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1twbGF5bGlzdC5zZWdtZW50cy5sZW5ndGggLSAxXTtcblxuICBpZiAobGFzdFNlZ21lbnQudmlkZW9UaW1pbmdJbmZvICYmIGxhc3RTZWdtZW50LnZpZGVvVGltaW5nSW5mby50cmFuc211eGVkUHJlc2VudGF0aW9uRW5kIDwgdGltZSkge1xuICAgIC8vIFRoZSB0aW1lIHJlcXVlc3RlZCBpcyBiZXlvbmQgdGhlIHN0cmVhbSBlbmQuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodGltZSA+IHNlZ21lbnRFbmQpIHtcbiAgICAvLyBUaGUgdGltZSBpcyB3aXRoaW4gb3IgYmV5b25kIHRoZSBsYXN0IHNlZ21lbnQuXG4gICAgLy9cbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIHRpbWUgaXMgYmV5b25kIGEgcmVhc29uYWJsZSBndWVzcyBvZiB0aGUgZW5kIG9mIHRoZSBzdHJlYW0uXG4gICAgaWYgKHRpbWUgPiBzZWdtZW50RW5kICsgbGFzdFNlZ21lbnQuZHVyYXRpb24gKiBTRUdNRU5UX0VORF9GVURHRV9QRVJDRU5UKSB7XG4gICAgICAvLyBUZWNobmljYWxseSwgYmVjYXVzZSB0aGUgZHVyYXRpb24gdmFsdWUgaXMgb25seSBhbiBlc3RpbWF0ZSwgdGhlIHRpbWUgbWF5IHN0aWxsXG4gICAgICAvLyBleGlzdCBpbiB0aGUgbGFzdCBzZWdtZW50LCBob3dldmVyLCB0aGVyZSBpc24ndCBlbm91Z2ggaW5mb3JtYXRpb24gdG8gbWFrZSBldmVuXG4gICAgICAvLyBhIHJlYXNvbmFibGUgZXN0aW1hdGUuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzZWdtZW50ID0gbGFzdFNlZ21lbnQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNlZ21lbnQ6IHNlZ21lbnQsXG4gICAgZXN0aW1hdGVkU3RhcnQ6IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvID8gc2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvblN0YXJ0IDogc2VnbWVudEVuZCAtIHNlZ21lbnQuZHVyYXRpb24sXG4gICAgLy8gQmVjYXVzZSB2aWRlb1RpbWluZ0luZm8gaXMgb25seSBzZXQgYWZ0ZXIgdHJhbnNtdXgsIGl0IGlzIHRoZSBvbmx5IHdheSB0byBnZXRcbiAgICAvLyBhY2N1cmF0ZSB0aW1pbmcgdmFsdWVzLlxuICAgIHR5cGU6IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvID8gJ2FjY3VyYXRlJyA6ICdlc3RpbWF0ZSdcbiAgfTtcbn07XG4vKipcbiAqIEdpdmVzIHRoZSBvZmZzZXQgb2YgdGhlIGNvbXBhcmlzb25UaW1lc3RhbXAgZnJvbSB0aGUgcHJvZ3JhbVRpbWUgdGltZXN0YW1wIGluIHNlY29uZHMuXG4gKiBJZiB0aGUgb2Zmc2V0IHJldHVybmVkIGlzIHBvc2l0aXZlLCB0aGUgcHJvZ3JhbVRpbWUgb2NjdXJzIGFmdGVyIHRoZVxuICogY29tcGFyaXNvblRpbWVzdGFtcC5cbiAqIElmIHRoZSBvZmZzZXQgaXMgbmVnYXRpdmUsIHRoZSBwcm9ncmFtVGltZSBvY2N1cnMgYmVmb3JlIHRoZSBjb21wYXJpc29uVGltZXN0YW1wLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb21wYXJpc29uVGltZVN0YW1wIEFuIElTTy04NjAxIHRpbWVzdGFtcCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9ncmFtVGltZSBUaGUgcHJvZ3JhbVRpbWUgYXMgYW4gSVNPLTg2MDEgc3RyaW5nXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IG9mZnNldFxuICovXG5cblxudmFyIGdldE9mZnNldEZyb21UaW1lc3RhbXAgPSBmdW5jdGlvbiBnZXRPZmZzZXRGcm9tVGltZXN0YW1wKGNvbXBhcmlzb25UaW1lU3RhbXAsIHByb2dyYW1UaW1lKSB7XG4gIHZhciBzZWdtZW50RGF0ZVRpbWUgPSB2b2lkIDA7XG4gIHZhciBwcm9ncmFtRGF0ZVRpbWUgPSB2b2lkIDA7XG5cbiAgdHJ5IHtcbiAgICBzZWdtZW50RGF0ZVRpbWUgPSBuZXcgRGF0ZShjb21wYXJpc29uVGltZVN0YW1wKTtcbiAgICBwcm9ncmFtRGF0ZVRpbWUgPSBuZXcgRGF0ZShwcm9ncmFtVGltZSk7XG4gIH0gY2F0Y2ggKGUpIHsvLyBUT0RPIGhhbmRsZSBlcnJvclxuICB9XG5cbiAgdmFyIHNlZ21lbnRUaW1lRXBvY2ggPSBzZWdtZW50RGF0ZVRpbWUuZ2V0VGltZSgpO1xuICB2YXIgcHJvZ3JhbVRpbWVFcG9jaCA9IHByb2dyYW1EYXRlVGltZS5nZXRUaW1lKCk7XG4gIHJldHVybiAocHJvZ3JhbVRpbWVFcG9jaCAtIHNlZ21lbnRUaW1lRXBvY2gpIC8gMTAwMDtcbn07XG4vKipcbiAqIENoZWNrcyB0aGF0IGFsbCBzZWdtZW50cyBpbiB0aGlzIHBsYXlsaXN0IGhhdmUgcHJvZ3JhbURhdGVUaW1lIHRhZ3MuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IEEgcGxheWxpc3Qgb2JqZWN0XG4gKi9cblxuXG52YXIgdmVyaWZ5UHJvZ3JhbURhdGVUaW1lVGFncyA9IGZ1bmN0aW9uIHZlcmlmeVByb2dyYW1EYXRlVGltZVRhZ3MocGxheWxpc3QpIHtcbiAgaWYgKCFwbGF5bGlzdC5zZWdtZW50cyB8fCBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1tpXTtcblxuICAgIGlmICghc2VnbWVudC5kYXRlVGltZU9iamVjdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgcHJvZ3JhbVRpbWUgb2YgdGhlIG1lZGlhIGdpdmVuIGEgcGxheWxpc3QgYW5kIGEgcGxheWVyVGltZS5cbiAqIFRoZSBwbGF5bGlzdCBtdXN0IGhhdmUgcHJvZ3JhbURhdGVUaW1lIHRhZ3MgZm9yIGEgcHJvZ3JhbURhdGVUaW1lIHRhZyB0byBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBzZWdtZW50cyBjb250YWluaW5nIHRoZSB0aW1lIHJlcXVlc3RlZCBoYXZlIG5vdCBiZWVuIGJ1ZmZlcmVkIHlldCwgYW4gZXN0aW1hdGVcbiAqIG1heSBiZSByZXR1cm5lZCB0byB0aGUgY2FsbGJhY2suXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLnBsYXlsaXN0IEEgcGxheWxpc3Qgb2JqZWN0IHRvIHNlYXJjaCB3aXRoaW5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lIEEgcGxheWVyVGltZSBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayhlcnIsIHByb2dyYW1UaW1lKVxuICogQHJldHVybnMge1N0cmluZ30gZXJyLm1lc3NhZ2UgQSBkZXRhaWxlZCBlcnJvciBtZXNzYWdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwcm9ncmFtVGltZVxuICogQHJldHVybnMge051bWJlcn0gcHJvZ3JhbVRpbWUubWVkaWFTZWNvbmRzIFRoZSBzdHJlYW1UaW1lIGluIHNlY29uZHNcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByb2dyYW1UaW1lLnByb2dyYW1EYXRlVGltZSBUaGUgcHJvZ3JhbVRpbWUgYXMgYW4gSVNPLTg2MDEgU3RyaW5nXG4gKi9cblxuXG52YXIgZ2V0UHJvZ3JhbVRpbWUgPSBmdW5jdGlvbiBnZXRQcm9ncmFtVGltZShfcmVmKSB7XG4gIHZhciBwbGF5bGlzdCA9IF9yZWYucGxheWxpc3QsXG4gICAgICBfcmVmJHRpbWUgPSBfcmVmLnRpbWUsXG4gICAgICB0aW1lID0gX3JlZiR0aW1lID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBfcmVmJHRpbWUsXG4gICAgICBjYWxsYmFjayA9IF9yZWYuY2FsbGJhY2s7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZ2V0UHJvZ3JhbVRpbWU6IGNhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmICghcGxheWxpc3QgfHwgdGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgIG1lc3NhZ2U6ICdnZXRQcm9ncmFtVGltZTogcGxheWxpc3QgYW5kIHRpbWUgbXVzdCBiZSBwcm92aWRlZCdcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBtYXRjaGVkU2VnbWVudCA9IGZpbmRTZWdtZW50Rm9yUGxheWVyVGltZSh0aW1lLCBwbGF5bGlzdCk7XG5cbiAgaWYgKCFtYXRjaGVkU2VnbWVudCkge1xuICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICBtZXNzYWdlOiAndmFsaWQgcHJvZ3JhbVRpbWUgd2FzIG5vdCBmb3VuZCdcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChtYXRjaGVkU2VnbWVudC50eXBlID09PSAnZXN0aW1hdGUnKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgIG1lc3NhZ2U6ICdBY2N1cmF0ZSBwcm9ncmFtVGltZSBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC4nICsgJyBQbGVhc2Ugc2VlayB0byBlLnNlZWtUaW1lIGFuZCB0cnkgYWdhaW4nLFxuICAgICAgc2Vla1RpbWU6IG1hdGNoZWRTZWdtZW50LmVzdGltYXRlZFN0YXJ0XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcHJvZ3JhbVRpbWVPYmplY3QgPSB7XG4gICAgbWVkaWFTZWNvbmRzOiB0aW1lXG4gIH07XG4gIHZhciBwcm9ncmFtVGltZSA9IHBsYXllclRpbWVUb1Byb2dyYW1UaW1lKHRpbWUsIG1hdGNoZWRTZWdtZW50LnNlZ21lbnQpO1xuXG4gIGlmIChwcm9ncmFtVGltZSkge1xuICAgIHByb2dyYW1UaW1lT2JqZWN0LnByb2dyYW1EYXRlVGltZSA9IHByb2dyYW1UaW1lLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcHJvZ3JhbVRpbWVPYmplY3QpO1xufTtcbi8qKlxuICogU2Vla3MgaW4gdGhlIHBsYXllciB0byBhIHRpbWUgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBwcm9ncmFtVGltZSBJU08tODYwMSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmdzLnByb2dyYW1UaW1lIEEgcHJvZ3JhbVRpbWUgdG8gc2VlayB0byBhcyBhbiBJU08tODYwMSBTdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLnBsYXlsaXN0IEEgcGxheWxpc3QgdG8gbG9vayB3aXRoaW5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLnJldHJ5Q291bnQgVGhlIG51bWJlciBvZiB0aW1lcyB0byB0cnkgZm9yIGFuIGFjY3VyYXRlIHNlZWsuIERlZmF1bHQgaXMgMi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFyZ3Muc2Vla1RvIEEgbWV0aG9kIHRvIHBlcmZvcm0gYSBzZWVrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGFyZ3MucGF1c2VBZnRlclNlZWsgV2hldGhlciB0byBlbmQgaW4gYSBwYXVzZWQgc3RhdGUgYWZ0ZXIgc2Vla2luZy4gRGVmYXVsdCBpcyB0cnVlLlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MudGVjaCBUaGUgdGVjaCB0byBzZWVrIG9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcmdzLmNhbGxiYWNrKGVyciwgbmV3VGltZSkgQSBjYWxsYmFjayB0byByZXR1cm4gdGhlIG5ldyB0aW1lIHRvXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBlcnIubWVzc2FnZSBBIGRldGFpbGVkIGVycm9yIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IG5ld1RpbWUgVGhlIGV4YWN0IHRpbWUgdGhhdCB3YXMgc2Vla2VkIHRvIGluIHNlY29uZHNcbiAqL1xuXG5cbnZhciBzZWVrVG9Qcm9ncmFtVGltZSA9IGZ1bmN0aW9uIHNlZWtUb1Byb2dyYW1UaW1lKF9yZWYyKSB7XG4gIHZhciBwcm9ncmFtVGltZSA9IF9yZWYyLnByb2dyYW1UaW1lLFxuICAgICAgcGxheWxpc3QgPSBfcmVmMi5wbGF5bGlzdCxcbiAgICAgIF9yZWYyJHJldHJ5Q291bnQgPSBfcmVmMi5yZXRyeUNvdW50LFxuICAgICAgcmV0cnlDb3VudCA9IF9yZWYyJHJldHJ5Q291bnQgPT09IHVuZGVmaW5lZCA/IDIgOiBfcmVmMiRyZXRyeUNvdW50LFxuICAgICAgc2Vla1RvID0gX3JlZjIuc2Vla1RvLFxuICAgICAgX3JlZjIkcGF1c2VBZnRlclNlZWsgPSBfcmVmMi5wYXVzZUFmdGVyU2VlayxcbiAgICAgIHBhdXNlQWZ0ZXJTZWVrID0gX3JlZjIkcGF1c2VBZnRlclNlZWsgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwYXVzZUFmdGVyU2VlayxcbiAgICAgIHRlY2ggPSBfcmVmMi50ZWNoLFxuICAgICAgY2FsbGJhY2sgPSBfcmVmMi5jYWxsYmFjaztcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZWVrVG9Qcm9ncmFtVGltZTogY2FsbGJhY2sgbXVzdCBiZSBwcm92aWRlZCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm9ncmFtVGltZSA9PT0gJ3VuZGVmaW5lZCcgfHwgIXBsYXlsaXN0IHx8ICFzZWVrVG8pIHtcbiAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgbWVzc2FnZTogJ3NlZWtUb1Byb2dyYW1UaW1lOiBwcm9ncmFtVGltZSwgc2Vla1RvIGFuZCBwbGF5bGlzdCBtdXN0IGJlIHByb3ZpZGVkJ1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFwbGF5bGlzdC5lbmRMaXN0ICYmICF0ZWNoLmhhc1N0YXJ0ZWRfKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgIG1lc3NhZ2U6ICdwbGF5ZXIgbXVzdCBiZSBwbGF5aW5nIGEgbGl2ZSBzdHJlYW0gdG8gc3RhcnQgYnVmZmVyaW5nJ1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCF2ZXJpZnlQcm9ncmFtRGF0ZVRpbWVUYWdzKHBsYXlsaXN0KSkge1xuICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICBtZXNzYWdlOiAncHJvZ3JhbURhdGVUaW1lIHRhZ3MgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGUgbWFuaWZlc3QgJyArIHBsYXlsaXN0LnJlc29sdmVkVXJpXG4gICAgfSk7XG4gIH1cblxuICB2YXIgbWF0Y2hlZFNlZ21lbnQgPSBmaW5kU2VnbWVudEZvclByb2dyYW1UaW1lKHByb2dyYW1UaW1lLCBwbGF5bGlzdCk7IC8vIG5vIG1hdGNoXG5cbiAgaWYgKCFtYXRjaGVkU2VnbWVudCkge1xuICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICBtZXNzYWdlOiBwcm9ncmFtVGltZSArICcgd2FzIG5vdCBmb3VuZCBpbiB0aGUgc3RyZWFtJ1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlZ21lbnQgPSBtYXRjaGVkU2VnbWVudC5zZWdtZW50O1xuICB2YXIgbWVkaWFPZmZzZXQgPSBnZXRPZmZzZXRGcm9tVGltZXN0YW1wKHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QsIHByb2dyYW1UaW1lKTtcblxuICBpZiAobWF0Y2hlZFNlZ21lbnQudHlwZSA9PT0gJ2VzdGltYXRlJykge1xuICAgIC8vIHdlJ3ZlIHJ1biBvdXQgb2YgcmV0cmllc1xuICAgIGlmIChyZXRyeUNvdW50ID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgICBtZXNzYWdlOiBwcm9ncmFtVGltZSArICcgaXMgbm90IGJ1ZmZlcmVkIHlldC4gVHJ5IGFnYWluJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2Vla1RvKG1hdGNoZWRTZWdtZW50LmVzdGltYXRlZFN0YXJ0ICsgbWVkaWFPZmZzZXQpO1xuICAgIHRlY2gub25lKCdzZWVrZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWVrVG9Qcm9ncmFtVGltZSh7XG4gICAgICAgIHByb2dyYW1UaW1lOiBwcm9ncmFtVGltZSxcbiAgICAgICAgcGxheWxpc3Q6IHBsYXlsaXN0LFxuICAgICAgICByZXRyeUNvdW50OiByZXRyeUNvdW50IC0gMSxcbiAgICAgICAgc2Vla1RvOiBzZWVrVG8sXG4gICAgICAgIHBhdXNlQWZ0ZXJTZWVrOiBwYXVzZUFmdGVyU2VlayxcbiAgICAgICAgdGVjaDogdGVjaCxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH0gLy8gU2luY2UgdGhlIHNlZ21lbnQuc3RhcnQgdmFsdWUgaXMgZGV0ZXJtaW5lZCBmcm9tIHRoZSBidWZmZXJlZCBlbmQgb3IgZW5kaW5nIHRpbWVcbiAgLy8gb2YgdGhlIHByaW9yIHNlZ21lbnQsIHRoZSBzZWVrVG9UaW1lIGRvZXNuJ3QgbmVlZCB0byBhY2NvdW50IGZvciBhbnkgdHJhbnNtdXhlclxuICAvLyBtb2RpZmljYXRpb25zLlxuXG5cbiAgdmFyIHNlZWtUb1RpbWUgPSBzZWdtZW50LnN0YXJ0ICsgbWVkaWFPZmZzZXQ7XG5cbiAgdmFyIHNlZWtlZENhbGxiYWNrID0gZnVuY3Rpb24gc2Vla2VkQ2FsbGJhY2soKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHRlY2guY3VycmVudFRpbWUoKSk7XG4gIH07IC8vIGxpc3RlbiBmb3Igc2Vla2VkIGV2ZW50XG5cblxuICB0ZWNoLm9uZSgnc2Vla2VkJywgc2Vla2VkQ2FsbGJhY2spOyAvLyBwYXVzZSBiZWZvcmUgc2Vla2luZyBhcyB2aWRlby5qcyB3aWxsIHJlc3RvcmUgdGhpcyBzdGF0ZVxuXG4gIGlmIChwYXVzZUFmdGVyU2Vlaykge1xuICAgIHRlY2gucGF1c2UoKTtcbiAgfVxuXG4gIHNlZWtUbyhzZWVrVG9UaW1lKTtcbn07XG4vKipcbiAqIHJhbmdlc1xuICpcbiAqIFV0aWxpdGllcyBmb3Igd29ya2luZyB3aXRoIFRpbWVSYW5nZXMuXG4gKlxuICovXG4vLyBGdWRnZSBmYWN0b3IgdG8gYWNjb3VudCBmb3IgVGltZVJhbmdlcyByb3VuZGluZ1xuXG5cbnZhciBUSU1FX0ZVREdFX0ZBQ1RPUiA9IDEgLyAzMDsgLy8gQ29tcGFyaXNvbnMgYmV0d2VlbiB0aW1lIHZhbHVlcyBzdWNoIGFzIGN1cnJlbnQgdGltZSBhbmQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyZWQgcmFuZ2Vcbi8vIGNhbiBiZSBtaXNsZWFkaW5nIGJlY2F1c2Ugb2YgcHJlY2lzaW9uIGRpZmZlcmVuY2VzIG9yIHdoZW4gdGhlIGN1cnJlbnQgbWVkaWEgaGFzIHBvb3JseVxuLy8gYWxpZ25lZCBhdWRpbyBhbmQgdmlkZW8sIHdoaWNoIGNhbiBjYXVzZSB2YWx1ZXMgdG8gYmUgc2xpZ2h0bHkgb2ZmIGZyb20gd2hhdCB5b3Ugd291bGRcbi8vIGV4cGVjdC4gVGhpcyB2YWx1ZSBpcyB3aGF0IHdlIGNvbnNpZGVyIHRvIGJlIHNhZmUgdG8gdXNlIGluIHN1Y2ggY29tcGFyaXNvbnMgdG8gYWNjb3VudFxuLy8gZm9yIHRoZXNlIHNjZW5hcmlvcy5cblxudmFyIFNBRkVfVElNRV9ERUxUQSA9IFRJTUVfRlVER0VfRkFDVE9SICogMztcblxudmFyIGZpbHRlclJhbmdlcyA9IGZ1bmN0aW9uIGZpbHRlclJhbmdlcyh0aW1lUmFuZ2VzLCBwcmVkaWNhdGUpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIGkgPSB2b2lkIDA7XG5cbiAgaWYgKHRpbWVSYW5nZXMgJiYgdGltZVJhbmdlcy5sZW5ndGgpIHtcbiAgICAvLyBTZWFyY2ggZm9yIHJhbmdlcyB0aGF0IG1hdGNoIHRoZSBwcmVkaWNhdGVcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGltZVJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByZWRpY2F0ZSh0aW1lUmFuZ2VzLnN0YXJ0KGkpLCB0aW1lUmFuZ2VzLmVuZChpKSkpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFt0aW1lUmFuZ2VzLnN0YXJ0KGkpLCB0aW1lUmFuZ2VzLmVuZChpKV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcyhyZXN1bHRzKTtcbn07XG4vKipcbiAqIEF0dGVtcHRzIHRvIGZpbmQgdGhlIGJ1ZmZlcmVkIFRpbWVSYW5nZSB0aGF0IGNvbnRhaW5zIHRoZSBzcGVjaWZpZWRcbiAqIHRpbWUuXG4gKiBAcGFyYW0ge1RpbWVSYW5nZXN9IGJ1ZmZlcmVkIC0gdGhlIFRpbWVSYW5nZXMgb2JqZWN0IHRvIHF1ZXJ5XG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAgLSB0aGUgdGltZSB0byBmaWx0ZXIgb24uXG4gKiBAcmV0dXJucyB7VGltZVJhbmdlc30gYSBuZXcgVGltZVJhbmdlcyBvYmplY3RcbiAqL1xuXG5cbnZhciBmaW5kUmFuZ2UgPSBmdW5jdGlvbiBmaW5kUmFuZ2UoYnVmZmVyZWQsIHRpbWUpIHtcbiAgcmV0dXJuIGZpbHRlclJhbmdlcyhidWZmZXJlZCwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3RhcnQgLSBTQUZFX1RJTUVfREVMVEEgPD0gdGltZSAmJiBlbmQgKyBTQUZFX1RJTUVfREVMVEEgPj0gdGltZTtcbiAgfSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBUaW1lUmFuZ2VzIHRoYXQgYmVnaW4gbGF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkIHRpbWUuXG4gKiBAcGFyYW0ge1RpbWVSYW5nZXN9IHRpbWVSYW5nZXMgLSB0aGUgVGltZVJhbmdlcyBvYmplY3QgdG8gcXVlcnlcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gdGhlIHRpbWUgdG8gZmlsdGVyIG9uLlxuICogQHJldHVybnMge1RpbWVSYW5nZXN9IGEgbmV3IFRpbWVSYW5nZXMgb2JqZWN0LlxuICovXG5cblxudmFyIGZpbmROZXh0UmFuZ2UgPSBmdW5jdGlvbiBmaW5kTmV4dFJhbmdlKHRpbWVSYW5nZXMsIHRpbWUpIHtcbiAgcmV0dXJuIGZpbHRlclJhbmdlcyh0aW1lUmFuZ2VzLCBmdW5jdGlvbiAoc3RhcnQpIHtcbiAgICByZXR1cm4gc3RhcnQgLSBUSU1FX0ZVREdFX0ZBQ1RPUiA+PSB0aW1lO1xuICB9KTtcbn07XG4vKipcbiAqIFJldHVybnMgZ2FwcyB3aXRoaW4gYSBsaXN0IG9mIFRpbWVSYW5nZXNcbiAqIEBwYXJhbSB7VGltZVJhbmdlc30gYnVmZmVyZWQgLSB0aGUgVGltZVJhbmdlcyBvYmplY3RcbiAqIEByZXR1cm4ge1RpbWVSYW5nZXN9IGEgVGltZVJhbmdlcyBvYmplY3Qgb2YgZ2Fwc1xuICovXG5cblxudmFyIGZpbmRHYXBzID0gZnVuY3Rpb24gZmluZEdhcHMoYnVmZmVyZWQpIHtcbiAgaWYgKGJ1ZmZlcmVkLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoKTtcbiAgfVxuXG4gIHZhciByYW5nZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN0YXJ0ID0gYnVmZmVyZWQuZW5kKGkgLSAxKTtcbiAgICB2YXIgZW5kID0gYnVmZmVyZWQuc3RhcnQoaSk7XG4gICAgcmFuZ2VzLnB1c2goW3N0YXJ0LCBlbmRdKTtcbiAgfVxuXG4gIHJldHVybiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcyhyYW5nZXMpO1xufTtcbi8qKlxuICogR2V0cyBhIGh1bWFuIHJlYWRhYmxlIHN0cmluZyBmb3IgYSBUaW1lUmFuZ2VcbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZX0gcmFuZ2VcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGEgaHVtYW4gcmVhZGFibGUgc3RyaW5nXG4gKi9cblxuXG52YXIgcHJpbnRhYmxlUmFuZ2UgPSBmdW5jdGlvbiBwcmludGFibGVSYW5nZShyYW5nZSkge1xuICB2YXIgc3RyQXJyID0gW107XG5cbiAgaWYgKCFyYW5nZSB8fCAhcmFuZ2UubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZS5sZW5ndGg7IGkrKykge1xuICAgIHN0ckFyci5wdXNoKHJhbmdlLnN0YXJ0KGkpICsgJyA9PiAnICsgcmFuZ2UuZW5kKGkpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJBcnIuam9pbignLCAnKTtcbn07XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFtb3VudCBvZiB0aW1lIGxlZnQgaW4gc2Vjb25kcyB1bnRpbCB0aGUgcGxheWVyIGhpdHMgdGhlIGVuZCBvZiB0aGVcbiAqIGJ1ZmZlciBhbmQgY2F1c2VzIGEgcmVidWZmZXJcbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZX0gYnVmZmVyZWRcbiAqICAgICAgICBUaGUgc3RhdGUgb2YgdGhlIGJ1ZmZlclxuICogQHBhcmFtIHtOdW1uYmVyfSBjdXJyZW50VGltZVxuICogICAgICAgIFRoZSBjdXJyZW50IHRpbWUgb2YgdGhlIHBsYXllclxuICogQHBhcmFtIHtOdW1iZXJ9IHBsYXliYWNrUmF0ZVxuICogICAgICAgIFRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGUgb2YgdGhlIHBsYXllci4gRGVmYXVsdHMgdG8gMS5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqICAgICAgICAgVGltZSB1bnRpbCB0aGUgcGxheWVyIGhhcyB0byBzdGFydCByZWJ1ZmZlcmluZyBpbiBzZWNvbmRzLlxuICogQGZ1bmN0aW9uIHRpbWVVbnRpbFJlYnVmZmVyXG4gKi9cblxuXG52YXIgdGltZVVudGlsUmVidWZmZXIgPSBmdW5jdGlvbiB0aW1lVW50aWxSZWJ1ZmZlcihidWZmZXJlZCwgY3VycmVudFRpbWUpIHtcbiAgdmFyIHBsYXliYWNrUmF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgdmFyIGJ1ZmZlcmVkRW5kID0gYnVmZmVyZWQubGVuZ3RoID8gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpIDogMDtcbiAgcmV0dXJuIChidWZmZXJlZEVuZCAtIGN1cnJlbnRUaW1lKSAvIHBsYXliYWNrUmF0ZTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgVGltZVJhbmdlcyBvYmplY3QgaW50byBhbiBhcnJheSByZXByZXNlbnRhdGlvblxuICogQHBhcmFtIHtUaW1lUmFuZ2VzfSB0aW1lUmFuZ2VzXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cblxuXG52YXIgdGltZVJhbmdlc1RvQXJyYXkgPSBmdW5jdGlvbiB0aW1lUmFuZ2VzVG9BcnJheSh0aW1lUmFuZ2VzKSB7XG4gIHZhciB0aW1lUmFuZ2VzTGlzdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGltZVJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIHRpbWVSYW5nZXNMaXN0LnB1c2goe1xuICAgICAgc3RhcnQ6IHRpbWVSYW5nZXMuc3RhcnQoaSksXG4gICAgICBlbmQ6IHRpbWVSYW5nZXMuZW5kKGkpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGltZVJhbmdlc0xpc3Q7XG59O1xuLyoqXG4gKiBAZmlsZSBjcmVhdGUtdGV4dC10cmFja3MtaWYtbmVjZXNzYXJ5LmpzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgdGV4dCB0cmFja3Mgb24gdmlkZW8uanMgaWYgdGhleSBleGlzdCBvbiBhIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZUJ1ZmZlciB0aGUgVlNCIG9yIEZTQlxuICogQHBhcmFtIHtPYmplY3R9IG1lZGlhU291cmNlIHRoZSBIVE1MIG1lZGlhIHNvdXJjZVxuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgdGhlIHNlZ21lbnQgdGhhdCBtYXkgY29udGFpbiB0aGUgdGV4dCB0cmFja1xuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBjcmVhdGVUZXh0VHJhY2tzSWZOZWNlc3NhcnkgPSBmdW5jdGlvbiBjcmVhdGVUZXh0VHJhY2tzSWZOZWNlc3Nhcnkoc291cmNlQnVmZmVyLCBtZWRpYVNvdXJjZSwgc2VnbWVudCkge1xuICB2YXIgcGxheWVyID0gbWVkaWFTb3VyY2UucGxheWVyXzsgLy8gY3JlYXRlIGFuIGluLWJhbmQgY2FwdGlvbiB0cmFjayBpZiBvbmUgaXMgcHJlc2VudCBpbiB0aGUgc2VnbWVudFxuXG4gIGlmIChzZWdtZW50LmNhcHRpb25zICYmIHNlZ21lbnQuY2FwdGlvbnMubGVuZ3RoKSB7XG4gICAgaWYgKCFzb3VyY2VCdWZmZXIuaW5iYW5kVGV4dFRyYWNrc18pIHtcbiAgICAgIHNvdXJjZUJ1ZmZlci5pbmJhbmRUZXh0VHJhY2tzXyA9IHt9O1xuICAgIH1cblxuICAgIGZvciAodmFyIHRyYWNrSWQgaW4gc2VnbWVudC5jYXB0aW9uU3RyZWFtcykge1xuICAgICAgaWYgKCFzb3VyY2VCdWZmZXIuaW5iYW5kVGV4dFRyYWNrc19bdHJhY2tJZF0pIHtcbiAgICAgICAgcGxheWVyLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ2hscy02MDgnXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdHJhY2sgPSBwbGF5ZXIudGV4dFRyYWNrcygpLmdldFRyYWNrQnlJZCh0cmFja0lkKTtcblxuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAvLyBSZXN1c2UgYW4gZXhpc3RpbmcgdHJhY2sgd2l0aCBhIENDIyBpZCBiZWNhdXNlIHRoaXMgd2FzXG4gICAgICAgICAgLy8gdmVyeSBsaWtlbHkgY3JlYXRlZCBieSB2aWRlb2pzLWNvbnRyaWItaGxzIGZyb20gaW5mb3JtYXRpb25cbiAgICAgICAgICAvLyBpbiB0aGUgbTN1OCBmb3IgdXMgdG8gdXNlXG4gICAgICAgICAgc291cmNlQnVmZmVyLmluYmFuZFRleHRUcmFja3NfW3RyYWNrSWRdID0gdHJhY2s7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjcmVhdGUgYSB0cmFjayB3aXRoIHRoZSBkZWZhdWx0IGBDQyNgIGxhYmVsIGFuZFxuICAgICAgICAgIC8vIHdpdGhvdXQgYSBsYW5ndWFnZVxuICAgICAgICAgIHNvdXJjZUJ1ZmZlci5pbmJhbmRUZXh0VHJhY2tzX1t0cmFja0lkXSA9IHBsYXllci5hZGRSZW1vdGVUZXh0VHJhY2soe1xuICAgICAgICAgICAga2luZDogJ2NhcHRpb25zJyxcbiAgICAgICAgICAgIGlkOiB0cmFja0lkLFxuICAgICAgICAgICAgbGFiZWw6IHRyYWNrSWRcbiAgICAgICAgICB9LCBmYWxzZSkudHJhY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc2VnbWVudC5tZXRhZGF0YSAmJiBzZWdtZW50Lm1ldGFkYXRhLmxlbmd0aCAmJiAhc291cmNlQnVmZmVyLm1ldGFkYXRhVHJhY2tfKSB7XG4gICAgc291cmNlQnVmZmVyLm1ldGFkYXRhVHJhY2tfID0gcGxheWVyLmFkZFJlbW90ZVRleHRUcmFjayh7XG4gICAgICBraW5kOiAnbWV0YWRhdGEnLFxuICAgICAgbGFiZWw6ICdUaW1lZCBNZXRhZGF0YSdcbiAgICB9LCBmYWxzZSkudHJhY2s7XG4gICAgc291cmNlQnVmZmVyLm1ldGFkYXRhVHJhY2tfLmluQmFuZE1ldGFkYXRhVHJhY2tEaXNwYXRjaFR5cGUgPSBzZWdtZW50Lm1ldGFkYXRhLmRpc3BhdGNoVHlwZTtcbiAgfVxufTtcbi8qKlxuICogQGZpbGUgcmVtb3ZlLWN1ZXMtZnJvbS10cmFjay5qc1xuICovXG5cbi8qKlxuICogUmVtb3ZlIGN1ZXMgZnJvbSBhIHRyYWNrIG9uIHZpZGVvLmpzLlxuICpcbiAqIEBwYXJhbSB7RG91YmxlfSBzdGFydCBzdGFydCBvZiB3aGVyZSB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBjdWVcbiAqIEBwYXJhbSB7RG91YmxlfSBlbmQgZW5kIG9mIHdoZXJlIHRoZSB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBjdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0cmFjayB0aGUgdGV4dCB0cmFjayB0byByZW1vdmUgdGhlIGN1ZXMgZnJvbVxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciByZW1vdmVDdWVzRnJvbVRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydCwgZW5kLCB0cmFjaykge1xuICB2YXIgaSA9IHZvaWQgMDtcbiAgdmFyIGN1ZSA9IHZvaWQgMDtcblxuICBpZiAoIXRyYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0cmFjay5jdWVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaSA9IHRyYWNrLmN1ZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBjdWUgPSB0cmFjay5jdWVzW2ldOyAvLyBSZW1vdmUgYW55IG92ZXJsYXBwaW5nIGN1ZVxuXG4gICAgaWYgKGN1ZS5zdGFydFRpbWUgPD0gZW5kICYmIGN1ZS5lbmRUaW1lID49IHN0YXJ0KSB7XG4gICAgICB0cmFjay5yZW1vdmVDdWUoY3VlKTtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIEBmaWxlIGFkZC10ZXh0LXRyYWNrLWRhdGEuanNcbiAqL1xuXG4vKipcbiAqIERlZmluZSBwcm9wZXJ0aWVzIG9uIGEgY3VlIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eSxcbiAqIGJ1dCB3YXJuIHRoZSB1c2VyIHRoYXQgdGhlIHdheSB0aGF0IHRoZXkgYXJlIHVzaW5nIGl0XG4gKiBpcyBkZXByaWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgYXQgYSBsYXRlciBkYXRlLlxuICpcbiAqIEBwYXJhbSB7Q3VlfSBjdWUgdGhlIGN1ZSB0byBhZGQgdGhlIHByb3BlcnRpZXMgb25cbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgZGVwcmVjYXRlT2xkQ3VlID0gZnVuY3Rpb24gZGVwcmVjYXRlT2xkQ3VlKGN1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjdWUuZnJhbWUsIHtcbiAgICBpZDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZpZGVvanMkMS5sb2cud2FybignY3VlLmZyYW1lLmlkIGlzIGRlcHJlY2F0ZWQuIFVzZSBjdWUudmFsdWUua2V5IGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiBjdWUudmFsdWUua2V5O1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ2N1ZS5mcmFtZS52YWx1ZSBpcyBkZXByZWNhdGVkLiBVc2UgY3VlLnZhbHVlLmRhdGEgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuIGN1ZS52YWx1ZS5kYXRhO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJpdmF0ZURhdGE6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ2N1ZS5mcmFtZS5wcml2YXRlRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgY3VlLnZhbHVlLmRhdGEgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuIGN1ZS52YWx1ZS5kYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgZHVyYXRpb25PZlZpZGVvID0gZnVuY3Rpb24gZHVyYXRpb25PZlZpZGVvKGR1cmF0aW9uKSB7XG4gIHZhciBkdXIgPSB2b2lkIDA7XG5cbiAgaWYgKGlzTmFOKGR1cmF0aW9uKSB8fCBNYXRoLmFicyhkdXJhdGlvbikgPT09IEluZmluaXR5KSB7XG4gICAgZHVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgfSBlbHNlIHtcbiAgICBkdXIgPSBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiBkdXI7XG59O1xuLyoqXG4gKiBBZGQgdGV4dCB0cmFjayBkYXRhIHRvIGEgc291cmNlIGhhbmRsZXIgZ2l2ZW4gdGhlIGNhcHRpb25zIGFuZFxuICogbWV0YWRhdGEgZnJvbSB0aGUgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VIYW5kbGVyIHRoZSB2aXJ0dWFsIHNvdXJjZSBidWZmZXJcbiAqIEBwYXJhbSB7QXJyYXl9IGNhcHRpb25BcnJheSBhbiBhcnJheSBvZiBjYXB0aW9uIGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1ldGFkYXRhQXJyYXkgYW4gYXJyYXkgb2YgbWV0YSBkYXRhXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIGFkZFRleHRUcmFja0RhdGEgPSBmdW5jdGlvbiBhZGRUZXh0VHJhY2tEYXRhKHNvdXJjZUhhbmRsZXIsIGNhcHRpb25BcnJheSwgbWV0YWRhdGFBcnJheSkge1xuICB2YXIgQ3VlID0gd2luZG93JDEuV2ViS2l0RGF0YUN1ZSB8fCB3aW5kb3ckMS5WVFRDdWU7XG5cbiAgaWYgKGNhcHRpb25BcnJheSkge1xuICAgIGNhcHRpb25BcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChjYXB0aW9uKSB7XG4gICAgICB2YXIgdHJhY2sgPSBjYXB0aW9uLnN0cmVhbTtcbiAgICAgIHRoaXMuaW5iYW5kVGV4dFRyYWNrc19bdHJhY2tdLmFkZEN1ZShuZXcgQ3VlKGNhcHRpb24uc3RhcnRUaW1lICsgdGhpcy50aW1lc3RhbXBPZmZzZXQsIGNhcHRpb24uZW5kVGltZSArIHRoaXMudGltZXN0YW1wT2Zmc2V0LCBjYXB0aW9uLnRleHQpKTtcbiAgICB9LCBzb3VyY2VIYW5kbGVyKTtcbiAgfVxuXG4gIGlmIChtZXRhZGF0YUFycmF5KSB7XG4gICAgdmFyIHZpZGVvRHVyYXRpb24gPSBkdXJhdGlvbk9mVmlkZW8oc291cmNlSGFuZGxlci5tZWRpYVNvdXJjZV8uZHVyYXRpb24pO1xuICAgIG1ldGFkYXRhQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAobWV0YWRhdGEpIHtcbiAgICAgIHZhciB0aW1lID0gbWV0YWRhdGEuY3VlVGltZSArIHRoaXMudGltZXN0YW1wT2Zmc2V0OyAvLyBpZiB0aW1lIGlzbid0IGEgZmluaXRlIG51bWJlciBiZXR3ZWVuIDAgYW5kIEluZmluaXR5LCBsaWtlIE5hTixcbiAgICAgIC8vIGlnbm9yZSB0aGlzIGJpdCBvZiBtZXRhZGF0YS5cbiAgICAgIC8vIFRoaXMgbGlrZWx5IG9jY3VycyB3aGVuIHlvdSBoYXZlIGFuIG5vbi10aW1lZCBJRDMgdGFnIGxpa2UgVElUMixcbiAgICAgIC8vIHdoaWNoIGlzIHRoZSBcIlRpdGxlL1NvbmduYW1lL0NvbnRlbnQgZGVzY3JpcHRpb25cIiBmcmFtZVxuXG4gICAgICBpZiAodHlwZW9mIHRpbWUgIT09ICdudW1iZXInIHx8IHdpbmRvdyQxLmlzTmFOKHRpbWUpIHx8IHRpbWUgPCAwIHx8ICEodGltZSA8IEluZmluaXR5KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1ldGFkYXRhLmZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICB2YXIgY3VlID0gbmV3IEN1ZSh0aW1lLCB0aW1lLCBmcmFtZS52YWx1ZSB8fCBmcmFtZS51cmwgfHwgZnJhbWUuZGF0YSB8fCAnJyk7XG4gICAgICAgIGN1ZS5mcmFtZSA9IGZyYW1lO1xuICAgICAgICBjdWUudmFsdWUgPSBmcmFtZTtcbiAgICAgICAgZGVwcmVjYXRlT2xkQ3VlKGN1ZSk7XG4gICAgICAgIHRoaXMubWV0YWRhdGFUcmFja18uYWRkQ3VlKGN1ZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LCBzb3VyY2VIYW5kbGVyKTsgLy8gVXBkYXRpbmcgdGhlIG1ldGFkZXRhIGN1ZXMgc28gdGhhdFxuICAgIC8vIHRoZSBlbmRUaW1lIG9mIGVhY2ggY3VlIGlzIHRoZSBzdGFydFRpbWUgb2YgdGhlIG5leHQgY3VlXG4gICAgLy8gdGhlIGVuZFRpbWUgb2YgbGFzdCBjdWUgaXMgdGhlIGR1cmF0aW9uIG9mIHRoZSB2aWRlb1xuXG4gICAgaWYgKHNvdXJjZUhhbmRsZXIubWV0YWRhdGFUcmFja18gJiYgc291cmNlSGFuZGxlci5tZXRhZGF0YVRyYWNrXy5jdWVzICYmIHNvdXJjZUhhbmRsZXIubWV0YWRhdGFUcmFja18uY3Vlcy5sZW5ndGgpIHtcbiAgICAgIHZhciBjdWVzID0gc291cmNlSGFuZGxlci5tZXRhZGF0YVRyYWNrXy5jdWVzO1xuICAgICAgdmFyIGN1ZXNBcnJheSA9IFtdOyAvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBUZXh0VHJhY2tDdWVMaXN0Li4uXG4gICAgICAvLyAuLi5kaXNyZWdhcmRpbmcgY3VlcyB3aXRoIGEgZmFsc2V5IHZhbHVlXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY3Vlc1tpXSkge1xuICAgICAgICAgIGN1ZXNBcnJheS5wdXNoKGN1ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9IC8vIEdyb3VwIGN1ZXMgYnkgdGhlaXIgc3RhcnRUaW1lIHZhbHVlXG5cblxuICAgICAgdmFyIGN1ZXNHcm91cGVkQnlTdGFydFRpbWUgPSBjdWVzQXJyYXkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGN1ZSkge1xuICAgICAgICB2YXIgdGltZVNsb3QgPSBvYmpbY3VlLnN0YXJ0VGltZV0gfHwgW107XG4gICAgICAgIHRpbWVTbG90LnB1c2goY3VlKTtcbiAgICAgICAgb2JqW2N1ZS5zdGFydFRpbWVdID0gdGltZVNsb3Q7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9LCB7fSk7IC8vIFNvcnQgc3RhcnRUaW1lcyBieSBhc2NlbmRpbmcgb3JkZXJcblxuICAgICAgdmFyIHNvcnRlZFN0YXJ0VGltZXMgPSBPYmplY3Qua2V5cyhjdWVzR3JvdXBlZEJ5U3RhcnRUaW1lKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7XG4gICAgICB9KTsgLy8gTWFwIGVhY2ggY3VlIGdyb3VwJ3MgZW5kVGltZSB0byB0aGUgbmV4dCBncm91cCdzIHN0YXJ0VGltZVxuXG4gICAgICBzb3J0ZWRTdGFydFRpbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXJ0VGltZSwgaWR4KSB7XG4gICAgICAgIHZhciBjdWVHcm91cCA9IGN1ZXNHcm91cGVkQnlTdGFydFRpbWVbc3RhcnRUaW1lXTtcbiAgICAgICAgdmFyIG5leHRUaW1lID0gTnVtYmVyKHNvcnRlZFN0YXJ0VGltZXNbaWR4ICsgMV0pIHx8IHZpZGVvRHVyYXRpb247IC8vIE1hcCBlYWNoIGN1ZSdzIGVuZFRpbWUgdGhlIG5leHQgZ3JvdXAncyBzdGFydFRpbWVcblxuICAgICAgICBjdWVHcm91cC5mb3JFYWNoKGZ1bmN0aW9uIChjdWUpIHtcbiAgICAgICAgICBjdWUuZW5kVGltZSA9IG5leHRUaW1lO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge30sXG4gICAgVEFSR0VUID0gdHlwZW9mIFN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcgPyAnX190YXJnZXQnIDogU3ltYm9sKCksXG4gICAgU0NSSVBUX1RZUEUgPSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcsXG4gICAgQmxvYkJ1aWxkZXIgPSB3aW4uQmxvYkJ1aWxkZXIgfHwgd2luLldlYktpdEJsb2JCdWlsZGVyIHx8IHdpbi5Nb3pCbG9iQnVpbGRlciB8fCB3aW4uTVNCbG9iQnVpbGRlcixcbiAgICBVUkwgPSB3aW4uVVJMIHx8IHdpbi53ZWJraXRVUkwgfHwgVVJMICYmIFVSTC5tc1VSTCxcbiAgICBXb3JrZXIgPSB3aW4uV29ya2VyO1xuLyoqXG4gKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgV2ViIFdvcmtlciBjb2RlIHRoYXQgaXMgY29uc3RydWN0aWJsZS5cbiAqXG4gKiBAZnVuY3Rpb24gc2hpbVdvcmtlclxuICpcbiAqIEBwYXJhbSB7IFN0cmluZyB9ICAgIGZpbGVuYW1lICAgIFRoZSBuYW1lIG9mIHRoZSBmaWxlXG4gKiBAcGFyYW0geyBGdW5jdGlvbiB9ICBmbiAgICAgICAgICBGdW5jdGlvbiB3cmFwcGluZyB0aGUgY29kZSBvZiB0aGUgd29ya2VyXG4gKi9cblxuZnVuY3Rpb24gc2hpbVdvcmtlcihmaWxlbmFtZSwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNoaW1Xb3JrZXIoZm9yY2VGYWxsYmFjaykge1xuICAgIHZhciBvID0gdGhpcztcblxuICAgIGlmICghZm4pIHtcbiAgICAgIHJldHVybiBuZXcgV29ya2VyKGZpbGVuYW1lKTtcbiAgICB9IGVsc2UgaWYgKFdvcmtlciAmJiAhZm9yY2VGYWxsYmFjaykge1xuICAgICAgLy8gQ29udmVydCB0aGUgZnVuY3Rpb24ncyBpbm5lciBjb2RlIHRvIGEgc3RyaW5nIHRvIGNvbnN0cnVjdCB0aGUgd29ya2VyXG4gICAgICB2YXIgc291cmNlID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKC9eZnVuY3Rpb24uKz97LywgJycpLnNsaWNlKDAsIC0xKSxcbiAgICAgICAgICBvYmpVUkwgPSBjcmVhdGVTb3VyY2VPYmplY3Qoc291cmNlKTtcbiAgICAgIHRoaXNbVEFSR0VUXSA9IG5ldyBXb3JrZXIob2JqVVJMKTtcbiAgICAgIHdyYXBUZXJtaW5hdGUodGhpc1tUQVJHRVRdLCBvYmpVUkwpO1xuICAgICAgcmV0dXJuIHRoaXNbVEFSR0VUXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNlbGZTaGltID0ge1xuICAgICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gcG9zdE1lc3NhZ2UobSkge1xuICAgICAgICAgIGlmIChvLm9ubWVzc2FnZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIG8ub25tZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBtLFxuICAgICAgICAgICAgICAgIHRhcmdldDogc2VsZlNoaW1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmbi5jYWxsKHNlbGZTaGltKTtcblxuICAgICAgdGhpcy5wb3N0TWVzc2FnZSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGZTaGltLm9ubWVzc2FnZSh7XG4gICAgICAgICAgICBkYXRhOiBtLFxuICAgICAgICAgICAgdGFyZ2V0OiBvXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5pc1RoaXNUaHJlYWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcbn0gLy8gVGVzdCBXb3JrZXIgY2FwYWJpbGl0aWVzXG5cblxuaWYgKFdvcmtlcikge1xuICB2YXIgdGVzdFdvcmtlcixcbiAgICAgIG9ialVSTCA9IGNyZWF0ZVNvdXJjZU9iamVjdCgnc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7fScpLFxuICAgICAgdGVzdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG5cbiAgdHJ5IHtcbiAgICB0ZXN0V29ya2VyID0gbmV3IFdvcmtlcihvYmpVUkwpOyAvLyBOYXRpdmUgYnJvd3NlciBvbiBzb21lIFNhbXN1bmcgZGV2aWNlcyB0aHJvd3MgZm9yIHRyYW5zZmVyYWJsZXMsIGxldCdzIGRldGVjdCBpdFxuXG4gICAgdGVzdFdvcmtlci5wb3N0TWVzc2FnZSh0ZXN0QXJyYXksIFt0ZXN0QXJyYXkuYnVmZmVyXSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBXb3JrZXIgPSBudWxsO1xuICB9IGZpbmFsbHkge1xuICAgIFVSTC5yZXZva2VPYmplY3RVUkwob2JqVVJMKTtcblxuICAgIGlmICh0ZXN0V29ya2VyKSB7XG4gICAgICB0ZXN0V29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTb3VyY2VPYmplY3Qoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3N0cl0sIHtcbiAgICAgIHR5cGU6IFNDUklQVF9UWVBFXG4gICAgfSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGJsb2IgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICBibG9iLmFwcGVuZChzdHIpO1xuICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IuZ2V0QmxvYih0eXBlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcFRlcm1pbmF0ZSh3b3JrZXIsIG9ialVSTCkge1xuICBpZiAoIXdvcmtlciB8fCAhb2JqVVJMKSByZXR1cm47XG4gIHZhciB0ZXJtID0gd29ya2VyLnRlcm1pbmF0ZTtcbiAgd29ya2VyLm9ialVSTCA9IG9ialVSTDtcblxuICB3b3JrZXIudGVybWluYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh3b3JrZXIub2JqVVJMKSBVUkwucmV2b2tlT2JqZWN0VVJMKHdvcmtlci5vYmpVUkwpO1xuICAgIHRlcm0uY2FsbCh3b3JrZXIpO1xuICB9O1xufVxuXG52YXIgVHJhbnNtdXhXb3JrZXIgPSBuZXcgc2hpbVdvcmtlcihcIi4vdHJhbnNtdXhlci13b3JrZXIud29ya2VyLmpzXCIsIGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50JCQxKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgdHJhbnNtdXhlcldvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKlxuICAgICAqIEEgbGlnaHR3ZWlnaHQgcmVhZGFibGUgc3RyZWFtIGltcGxlbWVudGlvbiB0aGF0IGhhbmRsZXMgZXZlbnQgZGlzcGF0Y2hpbmcuXG4gICAgICogT2JqZWN0cyB0aGF0IGluaGVyaXQgZnJvbSBzdHJlYW1zIHNob3VsZCBjYWxsIGluaXQgaW4gdGhlaXIgY29uc3RydWN0b3JzLlxuICAgICAqL1xuICAgIHZhciBTdHJlYW0gPSBmdW5jdGlvbiBTdHJlYW0oKSB7XG4gICAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAgICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSB0aGUgZXZlbnQgbmFtZVxuICAgICAgICAgKiBAcGFyYW0gbGlzdGVuZXIge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGFuIGV2ZW50IG9mXG4gICAgICAgICAqIHRoZSBzcGVjaWZpZWQgdHlwZSBvY2N1cnNcbiAgICAgICAgICovXG5cbiAgICAgICAgdGhpcy5vbiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgIGlmICghbGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcnNbdHlwZV0uY29uY2F0KGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAgICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSB0aGUgZXZlbnQgbmFtZVxuICAgICAgICAgKiBAcGFyYW0gbGlzdGVuZXIge2Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBmb3IgdGhpc1xuICAgICAgICAgKiB0eXBlIG9mIGV2ZW50IHRocm91Z2ggYG9uYFxuICAgICAgICAgKi9cblxuXG4gICAgICAgIHRoaXMub2ZmID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgdmFyIGluZGV4O1xuXG4gICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRleCA9IGxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcnNbdHlwZV0uc2xpY2UoKTtcbiAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgYW4gZXZlbnQgb2YgdGhlIHNwZWNpZmllZCB0eXBlIG9uIHRoaXMgc3RyZWFtLiBBbnkgYWRkaXRpb25hbFxuICAgICAgICAgKiBhcmd1bWVudHMgdG8gdGhpcyBmdW5jdGlvbiBhcmUgcGFzc2VkIGFzIHBhcmFtZXRlcnMgdG8gZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSB0aGUgZXZlbnQgbmFtZVxuICAgICAgICAgKi9cblxuXG4gICAgICAgIHRoaXMudHJpZ2dlciA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrcywgaSwgbGVuZ3RoLCBhcmdzO1xuICAgICAgICAgIGNhbGxiYWNrcyA9IGxpc3RlbmVyc1t0eXBlXTtcblxuICAgICAgICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSAvLyBTbGljaW5nIHRoZSBhcmd1bWVudHMgb24gZXZlcnkgaW52b2NhdGlvbiBvZiB0aGlzIG1ldGhvZFxuICAgICAgICAgIC8vIGNhbiBhZGQgYSBzaWduaWZpY2FudCBhbW91bnQgb2Ygb3ZlcmhlYWQuIEF2b2lkIHRoZVxuICAgICAgICAgIC8vIGludGVybWVkaWF0ZSBvYmplY3QgY3JlYXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhXG4gICAgICAgICAgLy8gc2luZ2xlIGNhbGxiYWNrIGFyZ3VtZW50XG5cblxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICAgICAgaSA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxlbmd0aCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVzdHJveXMgdGhlIHN0cmVhbSBhbmQgY2xlYW5zIHVwLlxuICAgICAgICAgKi9cblxuXG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGb3J3YXJkcyBhbGwgYGRhdGFgIGV2ZW50cyBvbiB0aGlzIHN0cmVhbSB0byB0aGUgZGVzdGluYXRpb24gc3RyZWFtLiBUaGVcbiAgICAgKiBkZXN0aW5hdGlvbiBzdHJlYW0gc2hvdWxkIHByb3ZpZGUgYSBtZXRob2QgYHB1c2hgIHRvIHJlY2VpdmUgdGhlIGRhdGFcbiAgICAgKiBldmVudHMgYXMgdGhleSBhcnJpdmUuXG4gICAgICogQHBhcmFtIGRlc3RpbmF0aW9uIHtzdHJlYW19IHRoZSBzdHJlYW0gdGhhdCB3aWxsIHJlY2VpdmUgYWxsIGBkYXRhYCBldmVudHNcbiAgICAgKiBAcGFyYW0gYXV0b0ZsdXNoIHtib29sZWFufSBpZiBmYWxzZSwgd2Ugd2lsbCBub3QgY2FsbCBgZmx1c2hgIG9uIHRoZSBkZXN0aW5hdGlvblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGN1cnJlbnQgc3RyZWFtIGVtaXRzIGEgJ2RvbmUnIGV2ZW50XG4gICAgICogQHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3BpcGVfZGVzdGluYXRpb25fb3B0aW9uc1xuICAgICAqL1xuXG5cbiAgICBTdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24pIHtcbiAgICAgIHRoaXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGRhdGEpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9uKCdkb25lJywgZnVuY3Rpb24gKGZsdXNoU291cmNlKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLmZsdXNoKGZsdXNoU291cmNlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbigncGFydGlhbGRvbmUnLCBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgICAgZGVzdGluYXRpb24ucGFydGlhbEZsdXNoKGZsdXNoU291cmNlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbignZW5kZWR0aW1lbGluZScsIGZ1bmN0aW9uIChmbHVzaFNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbi5lbmRUaW1lbGluZShmbHVzaFNvdXJjZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub24oJ3Jlc2V0JywgZnVuY3Rpb24gKGZsdXNoU291cmNlKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLnJlc2V0KGZsdXNoU291cmNlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH07IC8vIERlZmF1bHQgc3RyZWFtIGZ1bmN0aW9ucyB0aGF0IGFyZSBleHBlY3RlZCB0byBiZSBvdmVycmlkZGVuIHRvIHBlcmZvcm1cbiAgICAvLyBhY3R1YWwgd29yay4gVGhlc2UgYXJlIHByb3ZpZGVkIGJ5IHRoZSBwcm90b3R5cGUgYXMgYSBzb3J0IG9mIG5vLW9wXG4gICAgLy8gaW1wbGVtZW50YXRpb24gc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGNoZWNrIGZvciB0aGVpciBleGlzdGVuY2UgaW4gdGhlXG4gICAgLy8gYHBpcGVgIGZ1bmN0aW9uIGFib3ZlLlxuXG5cbiAgICBTdHJlYW0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgZGF0YSk7XG4gICAgfTtcblxuICAgIFN0cmVhbS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZG9uZScsIGZsdXNoU291cmNlKTtcbiAgICB9O1xuXG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJ0aWFsRmx1c2ggPSBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcigncGFydGlhbGRvbmUnLCBmbHVzaFNvdXJjZSk7XG4gICAgfTtcblxuICAgIFN0cmVhbS5wcm90b3R5cGUuZW5kVGltZWxpbmUgPSBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScsIGZsdXNoU291cmNlKTtcbiAgICB9O1xuXG4gICAgU3RyZWFtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIChmbHVzaFNvdXJjZSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcsIGZsdXNoU291cmNlKTtcbiAgICB9O1xuXG4gICAgdmFyIHN0cmVhbSA9IFN0cmVhbTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKlxuICAgICAqIEZ1bmN0aW9ucyB0aGF0IGdlbmVyYXRlIGZyYWdtZW50ZWQgTVA0cyBzdWl0YWJsZSBmb3IgdXNlIHdpdGggTWVkaWFcbiAgICAgKiBTb3VyY2UgRXh0ZW5zaW9ucy5cbiAgICAgKi9cblxuICAgIHZhciBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbiAgICB2YXIgYm94LCBkaW5mLCBlc2RzLCBmdHlwLCBtZGF0LCBtZmhkLCBtaW5mLCBtb29mLCBtb292LCBtdmV4LCBtdmhkLCB0cmFrLCB0a2hkLCBtZGlhLCBtZGhkLCBoZGxyLCBzZHRwLCBzdGJsLCBzdHNkLCB0cmFmLCB0cmV4LCB0cnVuLCB0eXBlcywgTUFKT1JfQlJBTkQsIE1JTk9SX1ZFUlNJT04sIEFWQzFfQlJBTkQsIFZJREVPX0hETFIsIEFVRElPX0hETFIsIEhETFJfVFlQRVMsIFZNSEQsIFNNSEQsIERSRUYsIFNUQ08sIFNUU0MsIFNUU1osIFNUVFM7IC8vIHByZS1jYWxjdWxhdGUgY29uc3RhbnRzXG5cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB0eXBlcyA9IHtcbiAgICAgICAgYXZjMTogW10sXG4gICAgICAgIC8vIGNvZGluZ25hbWVcbiAgICAgICAgYXZjQzogW10sXG4gICAgICAgIGJ0cnQ6IFtdLFxuICAgICAgICBkaW5mOiBbXSxcbiAgICAgICAgZHJlZjogW10sXG4gICAgICAgIGVzZHM6IFtdLFxuICAgICAgICBmdHlwOiBbXSxcbiAgICAgICAgaGRscjogW10sXG4gICAgICAgIG1kYXQ6IFtdLFxuICAgICAgICBtZGhkOiBbXSxcbiAgICAgICAgbWRpYTogW10sXG4gICAgICAgIG1maGQ6IFtdLFxuICAgICAgICBtaW5mOiBbXSxcbiAgICAgICAgbW9vZjogW10sXG4gICAgICAgIG1vb3Y6IFtdLFxuICAgICAgICBtcDRhOiBbXSxcbiAgICAgICAgLy8gY29kaW5nbmFtZVxuICAgICAgICBtdmV4OiBbXSxcbiAgICAgICAgbXZoZDogW10sXG4gICAgICAgIHBhc3A6IFtdLFxuICAgICAgICBzZHRwOiBbXSxcbiAgICAgICAgc21oZDogW10sXG4gICAgICAgIHN0Ymw6IFtdLFxuICAgICAgICBzdGNvOiBbXSxcbiAgICAgICAgc3RzYzogW10sXG4gICAgICAgIHN0c2Q6IFtdLFxuICAgICAgICBzdHN6OiBbXSxcbiAgICAgICAgc3R0czogW10sXG4gICAgICAgIHN0eXA6IFtdLFxuICAgICAgICB0ZmR0OiBbXSxcbiAgICAgICAgdGZoZDogW10sXG4gICAgICAgIHRyYWY6IFtdLFxuICAgICAgICB0cmFrOiBbXSxcbiAgICAgICAgdHJ1bjogW10sXG4gICAgICAgIHRyZXg6IFtdLFxuICAgICAgICB0a2hkOiBbXSxcbiAgICAgICAgdm1oZDogW11cbiAgICAgIH07IC8vIEluIGVudmlyb25tZW50cyB3aGVyZSBVaW50OEFycmF5IGlzIHVuZGVmaW5lZCAoZS5nLiwgSUU4KSwgc2tpcCBzZXQgdXAgc28gdGhhdCB3ZVxuICAgICAgLy8gZG9uJ3QgdGhyb3cgYW4gZXJyb3JcblxuICAgICAgaWYgKHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSBpbiB0eXBlcykge1xuICAgICAgICBpZiAodHlwZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICB0eXBlc1tpXSA9IFtpLmNoYXJDb2RlQXQoMCksIGkuY2hhckNvZGVBdCgxKSwgaS5jaGFyQ29kZUF0KDIpLCBpLmNoYXJDb2RlQXQoMyldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE1BSk9SX0JSQU5EID0gbmV3IFVpbnQ4QXJyYXkoWydpJy5jaGFyQ29kZUF0KDApLCAncycuY2hhckNvZGVBdCgwKSwgJ28nLmNoYXJDb2RlQXQoMCksICdtJy5jaGFyQ29kZUF0KDApXSk7XG4gICAgICBBVkMxX0JSQU5EID0gbmV3IFVpbnQ4QXJyYXkoWydhJy5jaGFyQ29kZUF0KDApLCAndicuY2hhckNvZGVBdCgwKSwgJ2MnLmNoYXJDb2RlQXQoMCksICcxJy5jaGFyQ29kZUF0KDApXSk7XG4gICAgICBNSU5PUl9WRVJTSU9OID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDFdKTtcbiAgICAgIFZJREVPX0hETFIgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4NzYsIDB4NjksIDB4NjQsIDB4NjUsIC8vIGhhbmRsZXJfdHlwZTogJ3ZpZGUnXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDU2LCAweDY5LCAweDY0LCAweDY1LCAweDZmLCAweDQ4LCAweDYxLCAweDZlLCAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwIC8vIG5hbWU6ICdWaWRlb0hhbmRsZXInXG4gICAgICBdKTtcbiAgICAgIEFVRElPX0hETFIgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4NzMsIDB4NmYsIDB4NzUsIDB4NmUsIC8vIGhhbmRsZXJfdHlwZTogJ3NvdW4nXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDUzLCAweDZmLCAweDc1LCAweDZlLCAweDY0LCAweDQ4LCAweDYxLCAweDZlLCAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwIC8vIG5hbWU6ICdTb3VuZEhhbmRsZXInXG4gICAgICBdKTtcbiAgICAgIEhETFJfVFlQRVMgPSB7XG4gICAgICAgIHZpZGVvOiBWSURFT19IRExSLFxuICAgICAgICBhdWRpbzogQVVESU9fSERMUlxuICAgICAgfTtcbiAgICAgIERSRUYgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZW50cnlfY291bnRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MGMsIC8vIGVudHJ5X3NpemVcbiAgICAgIDB4NzUsIDB4NzIsIDB4NmMsIDB4MjAsIC8vICd1cmwnIHR5cGVcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMSAvLyBlbnRyeV9mbGFnc1xuICAgICAgXSk7XG4gICAgICBTTUhEID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBiYWxhbmNlLCAwIG1lYW5zIGNlbnRlcmVkXG4gICAgICAweDAwLCAweDAwIC8vIHJlc2VydmVkXG4gICAgICBdKTtcbiAgICAgIFNUQ08gPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICAgIF0pO1xuICAgICAgU1RTQyA9IFNUQ087XG4gICAgICBTVFNaID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBzYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBzYW1wbGVfY291bnRcbiAgICAgIF0pO1xuICAgICAgU1RUUyA9IFNUQ087XG4gICAgICBWTUhEID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBncmFwaGljc21vZGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gb3Bjb2xvclxuICAgICAgXSk7XG4gICAgfSkoKTtcblxuICAgIGJveCA9IGZ1bmN0aW9uIGJveCh0eXBlKSB7XG4gICAgICB2YXIgcGF5bG9hZCA9IFtdLFxuICAgICAgICAgIHNpemUgPSAwLFxuICAgICAgICAgIGksXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHZpZXc7XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGF5bG9hZC5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGkgPSBwYXlsb2FkLmxlbmd0aDsgLy8gY2FsY3VsYXRlIHRoZSB0b3RhbCBzaXplIHdlIG5lZWQgdG8gYWxsb2NhdGVcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBzaXplICs9IHBheWxvYWRbaV0uYnl0ZUxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSArIDgpO1xuICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhyZXN1bHQuYnVmZmVyLCByZXN1bHQuYnl0ZU9mZnNldCwgcmVzdWx0LmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXRVaW50MzIoMCwgcmVzdWx0LmJ5dGVMZW5ndGgpO1xuICAgICAgcmVzdWx0LnNldCh0eXBlLCA0KTsgLy8gY29weSB0aGUgcGF5bG9hZCBpbnRvIHRoZSByZXN1bHRcblxuICAgICAgZm9yIChpID0gMCwgc2l6ZSA9IDg7IGkgPCBwYXlsb2FkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5zZXQocGF5bG9hZFtpXSwgc2l6ZSk7XG4gICAgICAgIHNpemUgKz0gcGF5bG9hZFtpXS5ieXRlTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBkaW5mID0gZnVuY3Rpb24gZGluZigpIHtcbiAgICAgIHJldHVybiBib3godHlwZXMuZGluZiwgYm94KHR5cGVzLmRyZWYsIERSRUYpKTtcbiAgICB9O1xuXG4gICAgZXNkcyA9IGZ1bmN0aW9uIGVzZHModHJhY2spIHtcbiAgICAgIHJldHVybiBib3godHlwZXMuZXNkcywgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAvLyBFU19EZXNjcmlwdG9yXG4gICAgICAweDAzLCAvLyB0YWcsIEVTX0Rlc2NyVGFnXG4gICAgICAweDE5LCAvLyBsZW5ndGhcbiAgICAgIDB4MDAsIDB4MDAsIC8vIEVTX0lEXG4gICAgICAweDAwLCAvLyBzdHJlYW1EZXBlbmRlbmNlRmxhZywgVVJMX2ZsYWcsIHJlc2VydmVkLCBzdHJlYW1Qcmlvcml0eVxuICAgICAgLy8gRGVjb2RlckNvbmZpZ0Rlc2NyaXB0b3JcbiAgICAgIDB4MDQsIC8vIHRhZywgRGVjb2RlckNvbmZpZ0Rlc2NyVGFnXG4gICAgICAweDExLCAvLyBsZW5ndGhcbiAgICAgIDB4NDAsIC8vIG9iamVjdCB0eXBlXG4gICAgICAweDE1LCAvLyBzdHJlYW1UeXBlXG4gICAgICAweDAwLCAweDA2LCAweDAwLCAvLyBidWZmZXJTaXplREJcbiAgICAgIDB4MDAsIDB4MDAsIDB4ZGEsIDB4YzAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4ZGEsIDB4YzAsIC8vIGF2Z0JpdHJhdGVcbiAgICAgIC8vIERlY29kZXJTcGVjaWZpY0luZm9cbiAgICAgIDB4MDUsIC8vIHRhZywgRGVjb2RlclNwZWNpZmljSW5mb1RhZ1xuICAgICAgMHgwMiwgLy8gbGVuZ3RoXG4gICAgICAvLyBJU08vSUVDIDE0NDk2LTMsIEF1ZGlvU3BlY2lmaWNDb25maWdcbiAgICAgIC8vIGZvciBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4IHNlZSBJU08vSUVDIDEzODE4LTc6MjAwNiwgOC4xLjMuMi4yLCBUYWJsZSAzNVxuICAgICAgdHJhY2suYXVkaW9vYmplY3R0eXBlIDw8IDMgfCB0cmFjay5zYW1wbGluZ2ZyZXF1ZW5jeWluZGV4ID4+PiAxLCB0cmFjay5zYW1wbGluZ2ZyZXF1ZW5jeWluZGV4IDw8IDcgfCB0cmFjay5jaGFubmVsY291bnQgPDwgMywgMHgwNiwgMHgwMSwgMHgwMiAvLyBHQVNwZWNpZmljQ29uZmlnXG4gICAgICBdKSk7XG4gICAgfTtcblxuICAgIGZ0eXAgPSBmdW5jdGlvbiBmdHlwKCkge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5mdHlwLCBNQUpPUl9CUkFORCwgTUlOT1JfVkVSU0lPTiwgTUFKT1JfQlJBTkQsIEFWQzFfQlJBTkQpO1xuICAgIH07XG5cbiAgICBoZGxyID0gZnVuY3Rpb24gaGRscih0eXBlKSB7XG4gICAgICByZXR1cm4gYm94KHR5cGVzLmhkbHIsIEhETFJfVFlQRVNbdHlwZV0pO1xuICAgIH07XG5cbiAgICBtZGF0ID0gZnVuY3Rpb24gbWRhdChkYXRhKSB7XG4gICAgICByZXR1cm4gYm94KHR5cGVzLm1kYXQsIGRhdGEpO1xuICAgIH07XG5cbiAgICBtZGhkID0gZnVuY3Rpb24gbWRoZCh0cmFjaykge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAyLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAzLCAvLyBtb2RpZmljYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMSwgMHg1ZiwgMHg5MCwgLy8gdGltZXNjYWxlLCA5MCwwMDAgXCJ0aWNrc1wiIHBlciBzZWNvbmRcbiAgICAgIHRyYWNrLmR1cmF0aW9uID4+PiAyNCAmIDB4RkYsIHRyYWNrLmR1cmF0aW9uID4+PiAxNiAmIDB4RkYsIHRyYWNrLmR1cmF0aW9uID4+PiA4ICYgMHhGRiwgdHJhY2suZHVyYXRpb24gJiAweEZGLCAvLyBkdXJhdGlvblxuICAgICAgMHg1NSwgMHhjNCwgLy8gJ3VuZCcgbGFuZ3VhZ2UgKHVuZGV0ZXJtaW5lZClcbiAgICAgIDB4MDAsIDB4MDBdKTsgLy8gVXNlIHRoZSBzYW1wbGUgcmF0ZSBmcm9tIHRoZSB0cmFjayBtZXRhZGF0YSwgd2hlbiBpdCBpc1xuICAgICAgLy8gZGVmaW5lZC4gVGhlIHNhbXBsZSByYXRlIGNhbiBiZSBwYXJzZWQgb3V0IG9mIGFuIEFEVFMgaGVhZGVyLCBmb3JcbiAgICAgIC8vIGluc3RhbmNlLlxuXG4gICAgICBpZiAodHJhY2suc2FtcGxlcmF0ZSkge1xuICAgICAgICByZXN1bHRbMTJdID0gdHJhY2suc2FtcGxlcmF0ZSA+Pj4gMjQgJiAweEZGO1xuICAgICAgICByZXN1bHRbMTNdID0gdHJhY2suc2FtcGxlcmF0ZSA+Pj4gMTYgJiAweEZGO1xuICAgICAgICByZXN1bHRbMTRdID0gdHJhY2suc2FtcGxlcmF0ZSA+Pj4gOCAmIDB4RkY7XG4gICAgICAgIHJlc3VsdFsxNV0gPSB0cmFjay5zYW1wbGVyYXRlICYgMHhGRjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJveCh0eXBlcy5tZGhkLCByZXN1bHQpO1xuICAgIH07XG5cbiAgICBtZGlhID0gZnVuY3Rpb24gbWRpYSh0cmFjaykge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5tZGlhLCBtZGhkKHRyYWNrKSwgaGRscih0cmFjay50eXBlKSwgbWluZih0cmFjaykpO1xuICAgIH07XG5cbiAgICBtZmhkID0gZnVuY3Rpb24gbWZoZChzZXF1ZW5jZU51bWJlcikge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5tZmhkLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIChzZXF1ZW5jZU51bWJlciAmIDB4RkYwMDAwMDApID4+IDI0LCAoc2VxdWVuY2VOdW1iZXIgJiAweEZGMDAwMCkgPj4gMTYsIChzZXF1ZW5jZU51bWJlciAmIDB4RkYwMCkgPj4gOCwgc2VxdWVuY2VOdW1iZXIgJiAweEZGIC8vIHNlcXVlbmNlX251bWJlclxuICAgICAgXSkpO1xuICAgIH07XG5cbiAgICBtaW5mID0gZnVuY3Rpb24gbWluZih0cmFjaykge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5taW5mLCB0cmFjay50eXBlID09PSAndmlkZW8nID8gYm94KHR5cGVzLnZtaGQsIFZNSEQpIDogYm94KHR5cGVzLnNtaGQsIFNNSEQpLCBkaW5mKCksIHN0YmwodHJhY2spKTtcbiAgICB9O1xuXG4gICAgbW9vZiA9IGZ1bmN0aW9uIG1vb2Yoc2VxdWVuY2VOdW1iZXIsIHRyYWNrcykge1xuICAgICAgdmFyIHRyYWNrRnJhZ21lbnRzID0gW10sXG4gICAgICAgICAgaSA9IHRyYWNrcy5sZW5ndGg7IC8vIGJ1aWxkIHRyYWYgYm94ZXMgZm9yIGVhY2ggdHJhY2sgZnJhZ21lbnRcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0cmFja0ZyYWdtZW50c1tpXSA9IHRyYWYodHJhY2tzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJveC5hcHBseShudWxsLCBbdHlwZXMubW9vZiwgbWZoZChzZXF1ZW5jZU51bWJlcildLmNvbmNhdCh0cmFja0ZyYWdtZW50cykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1vdmllIGJveC5cbiAgICAgKiBAcGFyYW0gdHJhY2tzIHthcnJheX0gdGhlIHRyYWNrcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBtb3ZpZVxuICAgICAqIEBzZWUgSVNPL0lFQyAxNDQ5Ni0xMjoyMDEyKEUpLCBzZWN0aW9uIDguMi4xXG4gICAgICovXG5cblxuICAgIG1vb3YgPSBmdW5jdGlvbiBtb292KHRyYWNrcykge1xuICAgICAgdmFyIGkgPSB0cmFja3MubGVuZ3RoLFxuICAgICAgICAgIGJveGVzID0gW107XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYm94ZXNbaV0gPSB0cmFrKHRyYWNrc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3guYXBwbHkobnVsbCwgW3R5cGVzLm1vb3YsIG12aGQoMHhmZmZmZmZmZildLmNvbmNhdChib3hlcykuY29uY2F0KG12ZXgodHJhY2tzKSkpO1xuICAgIH07XG5cbiAgICBtdmV4ID0gZnVuY3Rpb24gbXZleCh0cmFja3MpIHtcbiAgICAgIHZhciBpID0gdHJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBib3hlcyA9IFtdO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGJveGVzW2ldID0gdHJleCh0cmFja3NbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYm94LmFwcGx5KG51bGwsIFt0eXBlcy5tdmV4XS5jb25jYXQoYm94ZXMpKTtcbiAgICB9O1xuXG4gICAgbXZoZCA9IGZ1bmN0aW9uIG12aGQoZHVyYXRpb24pIHtcbiAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAyLCAvLyBtb2RpZmljYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMSwgMHg1ZiwgMHg5MCwgLy8gdGltZXNjYWxlLCA5MCwwMDAgXCJ0aWNrc1wiIHBlciBzZWNvbmRcbiAgICAgIChkdXJhdGlvbiAmIDB4RkYwMDAwMDApID4+IDI0LCAoZHVyYXRpb24gJiAweEZGMDAwMCkgPj4gMTYsIChkdXJhdGlvbiAmIDB4RkYwMCkgPj4gOCwgZHVyYXRpb24gJiAweEZGLCAvLyBkdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gMS4wIHJhdGVcbiAgICAgIDB4MDEsIDB4MDAsIC8vIDEuMCB2b2x1bWVcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHRyYW5zZm9ybWF0aW9uOiB1bml0eSBtYXRyaXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweGZmLCAweGZmLCAweGZmLCAweGZmIC8vIG5leHRfdHJhY2tfSURcbiAgICAgIF0pO1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5tdmhkLCBieXRlcyk7XG4gICAgfTtcblxuICAgIHNkdHAgPSBmdW5jdGlvbiBzZHRwKHRyYWNrKSB7XG4gICAgICB2YXIgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXMgfHwgW10sXG4gICAgICAgICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheSg0ICsgc2FtcGxlcy5sZW5ndGgpLFxuICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgIGk7IC8vIGxlYXZlIHRoZSBmdWxsIGJveCBoZWFkZXIgKDQgYnl0ZXMpIGFsbCB6ZXJvXG4gICAgICAvLyB3cml0ZSB0aGUgc2FtcGxlIHRhYmxlXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZsYWdzID0gc2FtcGxlc1tpXS5mbGFncztcbiAgICAgICAgYnl0ZXNbaSArIDRdID0gZmxhZ3MuZGVwZW5kc09uIDw8IDQgfCBmbGFncy5pc0RlcGVuZGVkT24gPDwgMiB8IGZsYWdzLmhhc1JlZHVuZGFuY3k7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3godHlwZXMuc2R0cCwgYnl0ZXMpO1xuICAgIH07XG5cbiAgICBzdGJsID0gZnVuY3Rpb24gc3RibCh0cmFjaykge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5zdGJsLCBzdHNkKHRyYWNrKSwgYm94KHR5cGVzLnN0dHMsIFNUVFMpLCBib3godHlwZXMuc3RzYywgU1RTQyksIGJveCh0eXBlcy5zdHN6LCBTVFNaKSwgYm94KHR5cGVzLnN0Y28sIFNUQ08pKTtcbiAgICB9O1xuXG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2aWRlb1NhbXBsZSwgYXVkaW9TYW1wbGU7XG5cbiAgICAgIHN0c2QgPSBmdW5jdGlvbiBzdHNkKHRyYWNrKSB7XG4gICAgICAgIHJldHVybiBib3godHlwZXMuc3RzZCwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxXSksIHRyYWNrLnR5cGUgPT09ICd2aWRlbycgPyB2aWRlb1NhbXBsZSh0cmFjaykgOiBhdWRpb1NhbXBsZSh0cmFjaykpO1xuICAgICAgfTtcblxuICAgICAgdmlkZW9TYW1wbGUgPSBmdW5jdGlvbiB2aWRlb1NhbXBsZSh0cmFjaykge1xuICAgICAgICB2YXIgc3BzID0gdHJhY2suc3BzIHx8IFtdLFxuICAgICAgICAgICAgcHBzID0gdHJhY2sucHBzIHx8IFtdLFxuICAgICAgICAgICAgc2VxdWVuY2VQYXJhbWV0ZXJTZXRzID0gW10sXG4gICAgICAgICAgICBwaWN0dXJlUGFyYW1ldGVyU2V0cyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGF2YzFCb3g7IC8vIGFzc2VtYmxlIHRoZSBTUFNzXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHNlcXVlbmNlUGFyYW1ldGVyU2V0cy5wdXNoKChzcHNbaV0uYnl0ZUxlbmd0aCAmIDB4RkYwMCkgPj4+IDgpO1xuICAgICAgICAgIHNlcXVlbmNlUGFyYW1ldGVyU2V0cy5wdXNoKHNwc1tpXS5ieXRlTGVuZ3RoICYgMHhGRik7IC8vIHNlcXVlbmNlUGFyYW1ldGVyU2V0TGVuZ3RoXG5cbiAgICAgICAgICBzZXF1ZW5jZVBhcmFtZXRlclNldHMgPSBzZXF1ZW5jZVBhcmFtZXRlclNldHMuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNwc1tpXSkpOyAvLyBTUFNcbiAgICAgICAgfSAvLyBhc3NlbWJsZSB0aGUgUFBTc1xuXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHBpY3R1cmVQYXJhbWV0ZXJTZXRzLnB1c2goKHBwc1tpXS5ieXRlTGVuZ3RoICYgMHhGRjAwKSA+Pj4gOCk7XG4gICAgICAgICAgcGljdHVyZVBhcmFtZXRlclNldHMucHVzaChwcHNbaV0uYnl0ZUxlbmd0aCAmIDB4RkYpO1xuICAgICAgICAgIHBpY3R1cmVQYXJhbWV0ZXJTZXRzID0gcGljdHVyZVBhcmFtZXRlclNldHMuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHBwc1tpXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXZjMUJveCA9IFt0eXBlcy5hdmMxLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgICAgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgICAgKHRyYWNrLndpZHRoICYgMHhmZjAwKSA+PiA4LCB0cmFjay53aWR0aCAmIDB4ZmYsIC8vIHdpZHRoXG4gICAgICAgICh0cmFjay5oZWlnaHQgJiAweGZmMDApID4+IDgsIHRyYWNrLmhlaWdodCAmIDB4ZmYsIC8vIGhlaWdodFxuICAgICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLCAvLyBob3JpenJlc29sdXRpb25cbiAgICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb25cbiAgICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgICAgMHgwMCwgMHgwMSwgLy8gZnJhbWVfY291bnRcbiAgICAgICAgMHgxMywgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgMHg2ZiwgMHg2YSwgMHg3MywgMHgyZCwgMHg2MywgMHg2ZiwgMHg2ZSwgMHg3NCwgMHg3MiwgMHg2OSwgMHg2MiwgMHgyZCwgMHg2OCwgMHg2YywgMHg3MywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgICAgMHgwMCwgMHgxOCwgLy8gZGVwdGggPSAyNFxuICAgICAgICAweDExLCAweDExIC8vIHByZV9kZWZpbmVkID0gLTFcbiAgICAgICAgXSksIGJveCh0eXBlcy5hdmNDLCBuZXcgVWludDhBcnJheShbMHgwMSwgLy8gY29uZmlndXJhdGlvblZlcnNpb25cbiAgICAgICAgdHJhY2sucHJvZmlsZUlkYywgLy8gQVZDUHJvZmlsZUluZGljYXRpb25cbiAgICAgICAgdHJhY2sucHJvZmlsZUNvbXBhdGliaWxpdHksIC8vIHByb2ZpbGVfY29tcGF0aWJpbGl0eVxuICAgICAgICB0cmFjay5sZXZlbElkYywgLy8gQVZDTGV2ZWxJbmRpY2F0aW9uXG4gICAgICAgIDB4ZmYgLy8gbGVuZ3RoU2l6ZU1pbnVzT25lLCBoYXJkLWNvZGVkIHRvIDQgYnl0ZXNcbiAgICAgICAgXS5jb25jYXQoW3Nwcy5sZW5ndGhdLCAvLyBudW1PZlNlcXVlbmNlUGFyYW1ldGVyU2V0c1xuICAgICAgICBzZXF1ZW5jZVBhcmFtZXRlclNldHMsIC8vIFwiU1BTXCJcbiAgICAgICAgW3Bwcy5sZW5ndGhdLCAvLyBudW1PZlBpY3R1cmVQYXJhbWV0ZXJTZXRzXG4gICAgICAgIHBpY3R1cmVQYXJhbWV0ZXJTZXRzIC8vIFwiUFBTXCJcbiAgICAgICAgKSkpLCBib3godHlwZXMuYnRydCwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MWMsIDB4OWMsIDB4ODAsIC8vIGJ1ZmZlclNpemVEQlxuICAgICAgICAweDAwLCAweDJkLCAweGM2LCAweGMwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAgLy8gYXZnQml0cmF0ZVxuICAgICAgICBdKSldO1xuXG4gICAgICAgIGlmICh0cmFjay5zYXJSYXRpbykge1xuICAgICAgICAgIHZhciBoU3BhY2luZyA9IHRyYWNrLnNhclJhdGlvWzBdLFxuICAgICAgICAgICAgICB2U3BhY2luZyA9IHRyYWNrLnNhclJhdGlvWzFdO1xuICAgICAgICAgIGF2YzFCb3gucHVzaChib3godHlwZXMucGFzcCwgbmV3IFVpbnQ4QXJyYXkoWyhoU3BhY2luZyAmIDB4RkYwMDAwMDApID4+IDI0LCAoaFNwYWNpbmcgJiAweEZGMDAwMCkgPj4gMTYsIChoU3BhY2luZyAmIDB4RkYwMCkgPj4gOCwgaFNwYWNpbmcgJiAweEZGLCAodlNwYWNpbmcgJiAweEZGMDAwMDAwKSA+PiAyNCwgKHZTcGFjaW5nICYgMHhGRjAwMDApID4+IDE2LCAodlNwYWNpbmcgJiAweEZGMDApID4+IDgsIHZTcGFjaW5nICYgMHhGRl0pKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm94LmFwcGx5KG51bGwsIGF2YzFCb3gpO1xuICAgICAgfTtcblxuICAgICAgYXVkaW9TYW1wbGUgPSBmdW5jdGlvbiBhdWRpb1NhbXBsZSh0cmFjaykge1xuICAgICAgICByZXR1cm4gYm94KHR5cGVzLm1wNGEsIG5ldyBVaW50OEFycmF5KFsvLyBTYW1wbGVFbnRyeSwgSVNPL0lFQyAxNDQ5Ni0xMlxuICAgICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgICAvLyBBdWRpb1NhbXBsZUVudHJ5LCBJU08vSUVDIDE0NDk2LTEyXG4gICAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAgICh0cmFjay5jaGFubmVsY291bnQgJiAweGZmMDApID4+IDgsIHRyYWNrLmNoYW5uZWxjb3VudCAmIDB4ZmYsIC8vIGNoYW5uZWxjb3VudFxuICAgICAgICAodHJhY2suc2FtcGxlc2l6ZSAmIDB4ZmYwMCkgPj4gOCwgdHJhY2suc2FtcGxlc2l6ZSAmIDB4ZmYsIC8vIHNhbXBsZXNpemVcbiAgICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgICAgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgICAgKHRyYWNrLnNhbXBsZXJhdGUgJiAweGZmMDApID4+IDgsIHRyYWNrLnNhbXBsZXJhdGUgJiAweGZmLCAweDAwLCAweDAwIC8vIHNhbXBsZXJhdGUsIDE2LjE2XG4gICAgICAgIC8vIE1QNEF1ZGlvU2FtcGxlRW50cnksIElTTy9JRUMgMTQ0OTYtMTRcbiAgICAgICAgXSksIGVzZHModHJhY2spKTtcbiAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIHRraGQgPSBmdW5jdGlvbiB0a2hkKHRyYWNrKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwNywgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1lXG4gICAgICAodHJhY2suaWQgJiAweEZGMDAwMDAwKSA+PiAyNCwgKHRyYWNrLmlkICYgMHhGRjAwMDApID4+IDE2LCAodHJhY2suaWQgJiAweEZGMDApID4+IDgsIHRyYWNrLmlkICYgMHhGRiwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAodHJhY2suZHVyYXRpb24gJiAweEZGMDAwMDAwKSA+PiAyNCwgKHRyYWNrLmR1cmF0aW9uICYgMHhGRjAwMDApID4+IDE2LCAodHJhY2suZHVyYXRpb24gJiAweEZGMDApID4+IDgsIHRyYWNrLmR1cmF0aW9uICYgMHhGRiwgLy8gZHVyYXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAvLyBsYXllclxuICAgICAgMHgwMCwgMHgwMCwgLy8gYWx0ZXJuYXRlX2dyb3VwXG4gICAgICAweDAxLCAweDAwLCAvLyBub24tYXVkaW8gdHJhY2sgdm9sdW1lXG4gICAgICAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdHJhbnNmb3JtYXRpb246IHVuaXR5IG1hdHJpeFxuICAgICAgKHRyYWNrLndpZHRoICYgMHhGRjAwKSA+PiA4LCB0cmFjay53aWR0aCAmIDB4RkYsIDB4MDAsIDB4MDAsIC8vIHdpZHRoXG4gICAgICAodHJhY2suaGVpZ2h0ICYgMHhGRjAwKSA+PiA4LCB0cmFjay5oZWlnaHQgJiAweEZGLCAweDAwLCAweDAwIC8vIGhlaWdodFxuICAgICAgXSk7XG4gICAgICByZXR1cm4gYm94KHR5cGVzLnRraGQsIHJlc3VsdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIHRyYWNrIGZyYWdtZW50ICh0cmFmKSBib3guIEEgdHJhZiBib3ggY29sbGVjdHMgbWV0YWRhdGFcbiAgICAgKiBhYm91dCB0cmFja3MgaW4gYSBtb3ZpZSBmcmFnbWVudCAobW9vZikgYm94LlxuICAgICAqL1xuXG5cbiAgICB0cmFmID0gZnVuY3Rpb24gdHJhZih0cmFjaykge1xuICAgICAgdmFyIHRyYWNrRnJhZ21lbnRIZWFkZXIsIHRyYWNrRnJhZ21lbnREZWNvZGVUaW1lLCB0cmFja0ZyYWdtZW50UnVuLCBzYW1wbGVEZXBlbmRlbmN5VGFibGUsIGRhdGFPZmZzZXQsIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICB0cmFja0ZyYWdtZW50SGVhZGVyID0gYm94KHR5cGVzLnRmaGQsIG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4M2EsIC8vIGZsYWdzXG4gICAgICAodHJhY2suaWQgJiAweEZGMDAwMDAwKSA+PiAyNCwgKHRyYWNrLmlkICYgMHhGRjAwMDApID4+IDE2LCAodHJhY2suaWQgJiAweEZGMDApID4+IDgsIHRyYWNrLmlkICYgMHhGRiwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIHNhbXBsZV9kZXNjcmlwdGlvbl9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfZHVyYXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZGVmYXVsdF9zYW1wbGVfZmxhZ3NcbiAgICAgIF0pKTtcbiAgICAgIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPSBNYXRoLmZsb29yKHRyYWNrLmJhc2VNZWRpYURlY29kZVRpbWUgLyAoVUlOVDMyX01BWCArIDEpKTtcbiAgICAgIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPSBNYXRoLmZsb29yKHRyYWNrLmJhc2VNZWRpYURlY29kZVRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICAgIHRyYWNrRnJhZ21lbnREZWNvZGVUaW1lID0gYm94KHR5cGVzLnRmZHQsIG5ldyBVaW50OEFycmF5KFsweDAxLCAvLyB2ZXJzaW9uIDFcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAvLyBiYXNlTWVkaWFEZWNvZGVUaW1lXG4gICAgICB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+PiAyNCAmIDB4RkYsIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4+IDE2ICYgMHhGRiwgdXBwZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+Pj4gOCAmIDB4RkYsIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgJiAweEZGLCBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+PiAyNCAmIDB4RkYsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4+IDE2ICYgMHhGRiwgbG93ZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+Pj4gOCAmIDB4RkYsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgJiAweEZGXSkpOyAvLyB0aGUgZGF0YSBvZmZzZXQgc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgYnl0ZXMgZnJvbSB0aGUgc3RhcnQgb2ZcbiAgICAgIC8vIHRoZSBjb250YWluaW5nIG1vb2YgdG8gdGhlIGZpcnN0IHBheWxvYWQgYnl0ZSBvZiB0aGUgYXNzb2NpYXRlZFxuICAgICAgLy8gbWRhdFxuXG4gICAgICBkYXRhT2Zmc2V0ID0gMzIgKyAvLyB0ZmhkXG4gICAgICAyMCArIC8vIHRmZHRcbiAgICAgIDggKyAvLyB0cmFmIGhlYWRlclxuICAgICAgMTYgKyAvLyBtZmhkXG4gICAgICA4ICsgLy8gbW9vZiBoZWFkZXJcbiAgICAgIDg7IC8vIG1kYXQgaGVhZGVyXG4gICAgICAvLyBhdWRpbyB0cmFja3MgcmVxdWlyZSBsZXNzIG1ldGFkYXRhXG5cbiAgICAgIGlmICh0cmFjay50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIHRyYWNrRnJhZ21lbnRSdW4gPSB0cnVuKHRyYWNrLCBkYXRhT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIGJveCh0eXBlcy50cmFmLCB0cmFja0ZyYWdtZW50SGVhZGVyLCB0cmFja0ZyYWdtZW50RGVjb2RlVGltZSwgdHJhY2tGcmFnbWVudFJ1bik7XG4gICAgICB9IC8vIHZpZGVvIHRyYWNrcyBzaG91bGQgY29udGFpbiBhbiBpbmRlcGVuZGVudCBhbmQgZGlzcG9zYWJsZSBzYW1wbGVzXG4gICAgICAvLyBib3ggKHNkdHApXG4gICAgICAvLyBnZW5lcmF0ZSBvbmUgYW5kIGFkanVzdCBvZmZzZXRzIHRvIG1hdGNoXG5cblxuICAgICAgc2FtcGxlRGVwZW5kZW5jeVRhYmxlID0gc2R0cCh0cmFjayk7XG4gICAgICB0cmFja0ZyYWdtZW50UnVuID0gdHJ1bih0cmFjaywgc2FtcGxlRGVwZW5kZW5jeVRhYmxlLmxlbmd0aCArIGRhdGFPZmZzZXQpO1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy50cmFmLCB0cmFja0ZyYWdtZW50SGVhZGVyLCB0cmFja0ZyYWdtZW50RGVjb2RlVGltZSwgdHJhY2tGcmFnbWVudFJ1biwgc2FtcGxlRGVwZW5kZW5jeVRhYmxlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgdHJhY2sgYm94LlxuICAgICAqIEBwYXJhbSB0cmFjayB7b2JqZWN0fSBhIHRyYWNrIGRlZmluaXRpb25cbiAgICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSB0aGUgdHJhY2sgYm94XG4gICAgICovXG5cblxuICAgIHRyYWsgPSBmdW5jdGlvbiB0cmFrKHRyYWNrKSB7XG4gICAgICB0cmFjay5kdXJhdGlvbiA9IHRyYWNrLmR1cmF0aW9uIHx8IDB4ZmZmZmZmZmY7XG4gICAgICByZXR1cm4gYm94KHR5cGVzLnRyYWssIHRraGQodHJhY2spLCBtZGlhKHRyYWNrKSk7XG4gICAgfTtcblxuICAgIHRyZXggPSBmdW5jdGlvbiB0cmV4KHRyYWNrKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgICh0cmFjay5pZCAmIDB4RkYwMDAwMDApID4+IDI0LCAodHJhY2suaWQgJiAweEZGMDAwMCkgPj4gMTYsICh0cmFjay5pZCAmIDB4RkYwMCkgPj4gOCwgdHJhY2suaWQgJiAweEZGLCAvLyB0cmFja19JRFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZGVmYXVsdF9zYW1wbGVfZGVzY3JpcHRpb25faW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX2R1cmF0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAxIC8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgICBdKTsgLy8gdGhlIGxhc3QgdHdvIGJ5dGVzIG9mIGRlZmF1bHRfc2FtcGxlX2ZsYWdzIGlzIHRoZSBzYW1wbGVcbiAgICAgIC8vIGRlZ3JhZGF0aW9uIHByaW9yaXR5LCBhIGhpbnQgYWJvdXQgdGhlIGltcG9ydGFuY2Ugb2YgdGhpcyBzYW1wbGVcbiAgICAgIC8vIHJlbGF0aXZlIHRvIG90aGVycy4gTG93ZXIgdGhlIGRlZ3JhZGF0aW9uIHByaW9yaXR5IGZvciBhbGwgc2FtcGxlXG4gICAgICAvLyB0eXBlcyBvdGhlciB0aGFuIHZpZGVvLlxuXG4gICAgICBpZiAodHJhY2sudHlwZSAhPT0gJ3ZpZGVvJykge1xuICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gMHgwMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJveCh0eXBlcy50cmV4LCByZXN1bHQpO1xuICAgIH07XG5cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGF1ZGlvVHJ1biwgdmlkZW9UcnVuLCB0cnVuSGVhZGVyOyAvLyBUaGlzIG1ldGhvZCBhc3N1bWVzIGFsbCBzYW1wbGVzIGFyZSB1bmlmb3JtLiBUaGF0IGlzLCBpZiBhXG4gICAgICAvLyBkdXJhdGlvbiBpcyBwcmVzZW50IGZvciB0aGUgZmlyc3Qgc2FtcGxlLCBpdCB3aWxsIGJlIHByZXNlbnQgZm9yXG4gICAgICAvLyBhbGwgc3Vic2VxdWVudCBzYW1wbGVzLlxuICAgICAgLy8gc2VlIElTTy9JRUMgMTQ0OTYtMTI6MjAxMiwgU2VjdGlvbiA4LjguOC4xXG5cbiAgICAgIHRydW5IZWFkZXIgPSBmdW5jdGlvbiB0cnVuSGVhZGVyKHNhbXBsZXMsIG9mZnNldCkge1xuICAgICAgICB2YXIgZHVyYXRpb25QcmVzZW50ID0gMCxcbiAgICAgICAgICAgIHNpemVQcmVzZW50ID0gMCxcbiAgICAgICAgICAgIGZsYWdzUHJlc2VudCA9IDAsXG4gICAgICAgICAgICBjb21wb3NpdGlvblRpbWVPZmZzZXQgPSAwOyAvLyB0cnVuIGZsYWcgY29uc3RhbnRzXG5cbiAgICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHNhbXBsZXNbMF0uZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZHVyYXRpb25QcmVzZW50ID0gMHgxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzYW1wbGVzWzBdLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2l6ZVByZXNlbnQgPSAweDI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNhbXBsZXNbMF0uZmxhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmxhZ3NQcmVzZW50ID0gMHg0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzYW1wbGVzWzBdLmNvbXBvc2l0aW9uVGltZU9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21wb3NpdGlvblRpbWVPZmZzZXQgPSAweDg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgICAgMHgwMCwgZHVyYXRpb25QcmVzZW50IHwgc2l6ZVByZXNlbnQgfCBmbGFnc1ByZXNlbnQgfCBjb21wb3NpdGlvblRpbWVPZmZzZXQsIDB4MDEsIC8vIGZsYWdzXG4gICAgICAgIChzYW1wbGVzLmxlbmd0aCAmIDB4RkYwMDAwMDApID4+PiAyNCwgKHNhbXBsZXMubGVuZ3RoICYgMHhGRjAwMDApID4+PiAxNiwgKHNhbXBsZXMubGVuZ3RoICYgMHhGRjAwKSA+Pj4gOCwgc2FtcGxlcy5sZW5ndGggJiAweEZGLCAvLyBzYW1wbGVfY291bnRcbiAgICAgICAgKG9mZnNldCAmIDB4RkYwMDAwMDApID4+PiAyNCwgKG9mZnNldCAmIDB4RkYwMDAwKSA+Pj4gMTYsIChvZmZzZXQgJiAweEZGMDApID4+PiA4LCBvZmZzZXQgJiAweEZGIC8vIGRhdGFfb2Zmc2V0XG4gICAgICAgIF07XG4gICAgICB9O1xuXG4gICAgICB2aWRlb1RydW4gPSBmdW5jdGlvbiB2aWRlb1RydW4odHJhY2ssIG9mZnNldCkge1xuICAgICAgICB2YXIgYnl0ZXMsIHNhbXBsZXMsIHNhbXBsZSwgaTtcbiAgICAgICAgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXMgfHwgW107XG4gICAgICAgIG9mZnNldCArPSA4ICsgMTIgKyAxNiAqIHNhbXBsZXMubGVuZ3RoO1xuICAgICAgICBieXRlcyA9IHRydW5IZWFkZXIoc2FtcGxlcywgb2Zmc2V0KTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHNhbXBsZSA9IHNhbXBsZXNbaV07XG4gICAgICAgICAgYnl0ZXMgPSBieXRlcy5jb25jYXQoWyhzYW1wbGUuZHVyYXRpb24gJiAweEZGMDAwMDAwKSA+Pj4gMjQsIChzYW1wbGUuZHVyYXRpb24gJiAweEZGMDAwMCkgPj4+IDE2LCAoc2FtcGxlLmR1cmF0aW9uICYgMHhGRjAwKSA+Pj4gOCwgc2FtcGxlLmR1cmF0aW9uICYgMHhGRiwgLy8gc2FtcGxlX2R1cmF0aW9uXG4gICAgICAgICAgKHNhbXBsZS5zaXplICYgMHhGRjAwMDAwMCkgPj4+IDI0LCAoc2FtcGxlLnNpemUgJiAweEZGMDAwMCkgPj4+IDE2LCAoc2FtcGxlLnNpemUgJiAweEZGMDApID4+PiA4LCBzYW1wbGUuc2l6ZSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgICAgc2FtcGxlLmZsYWdzLmlzTGVhZGluZyA8PCAyIHwgc2FtcGxlLmZsYWdzLmRlcGVuZHNPbiwgc2FtcGxlLmZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2IHwgc2FtcGxlLmZsYWdzLmhhc1JlZHVuZGFuY3kgPDwgNCB8IHNhbXBsZS5mbGFncy5wYWRkaW5nVmFsdWUgPDwgMSB8IHNhbXBsZS5mbGFncy5pc05vblN5bmNTYW1wbGUsIHNhbXBsZS5mbGFncy5kZWdyYWRhdGlvblByaW9yaXR5ICYgMHhGMCA8PCA4LCBzYW1wbGUuZmxhZ3MuZGVncmFkYXRpb25Qcmlvcml0eSAmIDB4MEYsIC8vIHNhbXBsZV9mbGFnc1xuICAgICAgICAgIChzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0ICYgMHhGRjAwMDAwMCkgPj4+IDI0LCAoc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCAmIDB4RkYwMDAwKSA+Pj4gMTYsIChzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0ICYgMHhGRjAwKSA+Pj4gOCwgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCAmIDB4RkYgLy8gc2FtcGxlX2NvbXBvc2l0aW9uX3RpbWVfb2Zmc2V0XG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm94KHR5cGVzLnRydW4sIG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7XG4gICAgICB9O1xuXG4gICAgICBhdWRpb1RydW4gPSBmdW5jdGlvbiBhdWRpb1RydW4odHJhY2ssIG9mZnNldCkge1xuICAgICAgICB2YXIgYnl0ZXMsIHNhbXBsZXMsIHNhbXBsZSwgaTtcbiAgICAgICAgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXMgfHwgW107XG4gICAgICAgIG9mZnNldCArPSA4ICsgMTIgKyA4ICogc2FtcGxlcy5sZW5ndGg7XG4gICAgICAgIGJ5dGVzID0gdHJ1bkhlYWRlcihzYW1wbGVzLCBvZmZzZXQpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc2FtcGxlID0gc2FtcGxlc1tpXTtcbiAgICAgICAgICBieXRlcyA9IGJ5dGVzLmNvbmNhdChbKHNhbXBsZS5kdXJhdGlvbiAmIDB4RkYwMDAwMDApID4+PiAyNCwgKHNhbXBsZS5kdXJhdGlvbiAmIDB4RkYwMDAwKSA+Pj4gMTYsIChzYW1wbGUuZHVyYXRpb24gJiAweEZGMDApID4+PiA4LCBzYW1wbGUuZHVyYXRpb24gJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgICAgICAoc2FtcGxlLnNpemUgJiAweEZGMDAwMDAwKSA+Pj4gMjQsIChzYW1wbGUuc2l6ZSAmIDB4RkYwMDAwKSA+Pj4gMTYsIChzYW1wbGUuc2l6ZSAmIDB4RkYwMCkgPj4+IDgsIHNhbXBsZS5zaXplICYgMHhGRl0pOyAvLyBzYW1wbGVfc2l6ZVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJveCh0eXBlcy50cnVuLCBuZXcgVWludDhBcnJheShieXRlcykpO1xuICAgICAgfTtcblxuICAgICAgdHJ1biA9IGZ1bmN0aW9uIHRydW4odHJhY2ssIG9mZnNldCkge1xuICAgICAgICBpZiAodHJhY2sudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIHJldHVybiBhdWRpb1RydW4odHJhY2ssIG9mZnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmlkZW9UcnVuKHRyYWNrLCBvZmZzZXQpO1xuICAgICAgfTtcbiAgICB9KSgpO1xuXG4gICAgdmFyIG1wNEdlbmVyYXRvciA9IHtcbiAgICAgIGZ0eXA6IGZ0eXAsXG4gICAgICBtZGF0OiBtZGF0LFxuICAgICAgbW9vZjogbW9vZixcbiAgICAgIG1vb3Y6IG1vb3YsXG4gICAgICBpbml0U2VnbWVudDogZnVuY3Rpb24gaW5pdFNlZ21lbnQodHJhY2tzKSB7XG4gICAgICAgIHZhciBmaWxlVHlwZSA9IGZ0eXAoKSxcbiAgICAgICAgICAgIG1vdmllID0gbW9vdih0cmFja3MpLFxuICAgICAgICAgICAgcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShmaWxlVHlwZS5ieXRlTGVuZ3RoICsgbW92aWUuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHJlc3VsdC5zZXQoZmlsZVR5cGUpO1xuICAgICAgICByZXN1bHQuc2V0KG1vdmllLCBmaWxlVHlwZS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIG11eC5qc1xuICAgICAqXG4gICAgICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gICAgICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAqL1xuICAgIC8vIENvbnZlcnQgYW4gYXJyYXkgb2YgbmFsIHVuaXRzIGludG8gYW4gYXJyYXkgb2YgZnJhbWVzIHdpdGggZWFjaCBmcmFtZSBiZWluZ1xuICAgIC8vIGNvbXBvc2VkIG9mIHRoZSBuYWwgdW5pdHMgdGhhdCBtYWtlIHVwIHRoYXQgZnJhbWVcbiAgICAvLyBBbHNvIGtlZXAgdHJhY2sgb2YgY3VtbXVsYXRpdmUgZGF0YSBhYm91dCB0aGUgZnJhbWUgZnJvbSB0aGUgbmFsIHVuaXRzIHN1Y2hcbiAgICAvLyBhcyB0aGUgZnJhbWUgZHVyYXRpb24sIHN0YXJ0aW5nIHB0cywgZXRjLlxuXG4gICAgdmFyIGdyb3VwTmFsc0ludG9GcmFtZXMgPSBmdW5jdGlvbiBncm91cE5hbHNJbnRvRnJhbWVzKG5hbFVuaXRzKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBjdXJyZW50TmFsLFxuICAgICAgICAgIGN1cnJlbnRGcmFtZSA9IFtdLFxuICAgICAgICAgIGZyYW1lcyA9IFtdOyAvLyBUT0RPIGFkZGVkIGZvciBMSExTLCBtYWtlIHN1cmUgdGhpcyBpcyBPS1xuXG4gICAgICBmcmFtZXMuYnl0ZUxlbmd0aCA9IDA7XG4gICAgICBmcmFtZXMubmFsQ291bnQgPSAwO1xuICAgICAgZnJhbWVzLmR1cmF0aW9uID0gMDtcbiAgICAgIGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5hbFVuaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnROYWwgPSBuYWxVbml0c1tpXTsgLy8gU3BsaXQgb24gJ2F1ZCctdHlwZSBuYWwgdW5pdHNcblxuICAgICAgICBpZiAoY3VycmVudE5hbC5uYWxVbml0VHlwZSA9PT0gJ2FjY2Vzc191bml0X2RlbGltaXRlcl9yYnNwJykge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZSB2ZXJ5IGZpcnN0IG5hbCB1bml0IGlzIGV4cGVjdGVkIHRvIGJlIGFuIEFVRFxuICAgICAgICAgIC8vIG9ubHkgcHVzaCB0byB0aGUgZnJhbWVzIGFycmF5IHdoZW4gY3VycmVudEZyYW1lIGlzIG5vdCBlbXB0eVxuICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBjdXJyZW50RnJhbWUuZHVyYXRpb24gPSBjdXJyZW50TmFsLmR0cyAtIGN1cnJlbnRGcmFtZS5kdHM7IC8vIFRPRE8gYWRkZWQgZm9yIExITFMsIG1ha2Ugc3VyZSB0aGlzIGlzIE9LXG5cbiAgICAgICAgICAgIGZyYW1lcy5ieXRlTGVuZ3RoICs9IGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgZnJhbWVzLm5hbENvdW50ICs9IGN1cnJlbnRGcmFtZS5sZW5ndGg7XG4gICAgICAgICAgICBmcmFtZXMuZHVyYXRpb24gKz0gY3VycmVudEZyYW1lLmR1cmF0aW9uO1xuICAgICAgICAgICAgZnJhbWVzLnB1c2goY3VycmVudEZyYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50RnJhbWUgPSBbY3VycmVudE5hbF07XG4gICAgICAgICAgY3VycmVudEZyYW1lLmJ5dGVMZW5ndGggPSBjdXJyZW50TmFsLmRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBjdXJyZW50RnJhbWUucHRzID0gY3VycmVudE5hbC5wdHM7XG4gICAgICAgICAgY3VycmVudEZyYW1lLmR0cyA9IGN1cnJlbnROYWwuZHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNwZWNpZmljYWxseSBmbGFnIGtleSBmcmFtZXMgZm9yIGVhc2Ugb2YgdXNlIGxhdGVyXG4gICAgICAgICAgaWYgKGN1cnJlbnROYWwubmFsVW5pdFR5cGUgPT09ICdzbGljZV9sYXllcl93aXRob3V0X3BhcnRpdGlvbmluZ19yYnNwX2lkcicpIHtcbiAgICAgICAgICAgIGN1cnJlbnRGcmFtZS5rZXlGcmFtZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudEZyYW1lLmR1cmF0aW9uID0gY3VycmVudE5hbC5kdHMgLSBjdXJyZW50RnJhbWUuZHRzO1xuICAgICAgICAgIGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoICs9IGN1cnJlbnROYWwuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGN1cnJlbnRGcmFtZS5wdXNoKGN1cnJlbnROYWwpO1xuICAgICAgICB9XG4gICAgICB9IC8vIEZvciB0aGUgbGFzdCBmcmFtZSwgdXNlIHRoZSBkdXJhdGlvbiBvZiB0aGUgcHJldmlvdXMgZnJhbWUgaWYgd2VcbiAgICAgIC8vIGhhdmUgbm90aGluZyBiZXR0ZXIgdG8gZ28gb25cblxuXG4gICAgICBpZiAoZnJhbWVzLmxlbmd0aCAmJiAoIWN1cnJlbnRGcmFtZS5kdXJhdGlvbiB8fCBjdXJyZW50RnJhbWUuZHVyYXRpb24gPD0gMCkpIHtcbiAgICAgICAgY3VycmVudEZyYW1lLmR1cmF0aW9uID0gZnJhbWVzW2ZyYW1lcy5sZW5ndGggLSAxXS5kdXJhdGlvbjtcbiAgICAgIH0gLy8gUHVzaCB0aGUgZmluYWwgZnJhbWVcbiAgICAgIC8vIFRPRE8gYWRkZWQgZm9yIExITFMsIG1ha2Ugc3VyZSB0aGlzIGlzIE9LXG5cblxuICAgICAgZnJhbWVzLmJ5dGVMZW5ndGggKz0gY3VycmVudEZyYW1lLmJ5dGVMZW5ndGg7XG4gICAgICBmcmFtZXMubmFsQ291bnQgKz0gY3VycmVudEZyYW1lLmxlbmd0aDtcbiAgICAgIGZyYW1lcy5kdXJhdGlvbiArPSBjdXJyZW50RnJhbWUuZHVyYXRpb247XG4gICAgICBmcmFtZXMucHVzaChjdXJyZW50RnJhbWUpO1xuICAgICAgcmV0dXJuIGZyYW1lcztcbiAgICB9OyAvLyBDb252ZXJ0IGFuIGFycmF5IG9mIGZyYW1lcyBpbnRvIGFuIGFycmF5IG9mIEdvcCB3aXRoIGVhY2ggR29wIGJlaW5nIGNvbXBvc2VkXG4gICAgLy8gb2YgdGhlIGZyYW1lcyB0aGF0IG1ha2UgdXAgdGhhdCBHb3BcbiAgICAvLyBBbHNvIGtlZXAgdHJhY2sgb2YgY3VtbXVsYXRpdmUgZGF0YSBhYm91dCB0aGUgR29wIGZyb20gdGhlIGZyYW1lcyBzdWNoIGFzIHRoZVxuICAgIC8vIEdvcCBkdXJhdGlvbiwgc3RhcnRpbmcgcHRzLCBldGMuXG5cblxuICAgIHZhciBncm91cEZyYW1lc0ludG9Hb3BzID0gZnVuY3Rpb24gZ3JvdXBGcmFtZXNJbnRvR29wcyhmcmFtZXMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGN1cnJlbnRGcmFtZSxcbiAgICAgICAgICBjdXJyZW50R29wID0gW10sXG4gICAgICAgICAgZ29wcyA9IFtdOyAvLyBXZSBtdXN0IHByZS1zZXQgc29tZSBvZiB0aGUgdmFsdWVzIG9uIHRoZSBHb3Agc2luY2Ugd2VcbiAgICAgIC8vIGtlZXAgcnVubmluZyB0b3RhbHMgb2YgdGhlc2UgdmFsdWVzXG5cbiAgICAgIGN1cnJlbnRHb3AuYnl0ZUxlbmd0aCA9IDA7XG4gICAgICBjdXJyZW50R29wLm5hbENvdW50ID0gMDtcbiAgICAgIGN1cnJlbnRHb3AuZHVyYXRpb24gPSAwO1xuICAgICAgY3VycmVudEdvcC5wdHMgPSBmcmFtZXNbMF0ucHRzO1xuICAgICAgY3VycmVudEdvcC5kdHMgPSBmcmFtZXNbMF0uZHRzOyAvLyBzdG9yZSBzb21lIG1ldGFkYXRhIGFib3V0IGFsbCB0aGUgR29wc1xuXG4gICAgICBnb3BzLmJ5dGVMZW5ndGggPSAwO1xuICAgICAgZ29wcy5uYWxDb3VudCA9IDA7XG4gICAgICBnb3BzLmR1cmF0aW9uID0gMDtcbiAgICAgIGdvcHMucHRzID0gZnJhbWVzWzBdLnB0cztcbiAgICAgIGdvcHMuZHRzID0gZnJhbWVzWzBdLmR0cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50RnJhbWUgPSBmcmFtZXNbaV07XG5cbiAgICAgICAgaWYgKGN1cnJlbnRGcmFtZS5rZXlGcmFtZSkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZSB2ZXJ5IGZpcnN0IGZyYW1lIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGtleWZyYW1lXG4gICAgICAgICAgLy8gb25seSBwdXNoIHRvIHRoZSBnb3BzIGFycmF5IHdoZW4gY3VycmVudEdvcCBpcyBub3QgZW1wdHlcbiAgICAgICAgICBpZiAoY3VycmVudEdvcC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdvcHMucHVzaChjdXJyZW50R29wKTtcbiAgICAgICAgICAgIGdvcHMuYnl0ZUxlbmd0aCArPSBjdXJyZW50R29wLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBnb3BzLm5hbENvdW50ICs9IGN1cnJlbnRHb3AubmFsQ291bnQ7XG4gICAgICAgICAgICBnb3BzLmR1cmF0aW9uICs9IGN1cnJlbnRHb3AuZHVyYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudEdvcCA9IFtjdXJyZW50RnJhbWVdO1xuICAgICAgICAgIGN1cnJlbnRHb3AubmFsQ291bnQgPSBjdXJyZW50RnJhbWUubGVuZ3RoO1xuICAgICAgICAgIGN1cnJlbnRHb3AuYnl0ZUxlbmd0aCA9IGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGN1cnJlbnRHb3AucHRzID0gY3VycmVudEZyYW1lLnB0cztcbiAgICAgICAgICBjdXJyZW50R29wLmR0cyA9IGN1cnJlbnRGcmFtZS5kdHM7XG4gICAgICAgICAgY3VycmVudEdvcC5kdXJhdGlvbiA9IGN1cnJlbnRGcmFtZS5kdXJhdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50R29wLmR1cmF0aW9uICs9IGN1cnJlbnRGcmFtZS5kdXJhdGlvbjtcbiAgICAgICAgICBjdXJyZW50R29wLm5hbENvdW50ICs9IGN1cnJlbnRGcmFtZS5sZW5ndGg7XG4gICAgICAgICAgY3VycmVudEdvcC5ieXRlTGVuZ3RoICs9IGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGN1cnJlbnRHb3AucHVzaChjdXJyZW50RnJhbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnb3BzLmxlbmd0aCAmJiBjdXJyZW50R29wLmR1cmF0aW9uIDw9IDApIHtcbiAgICAgICAgY3VycmVudEdvcC5kdXJhdGlvbiA9IGdvcHNbZ29wcy5sZW5ndGggLSAxXS5kdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgZ29wcy5ieXRlTGVuZ3RoICs9IGN1cnJlbnRHb3AuYnl0ZUxlbmd0aDtcbiAgICAgIGdvcHMubmFsQ291bnQgKz0gY3VycmVudEdvcC5uYWxDb3VudDtcbiAgICAgIGdvcHMuZHVyYXRpb24gKz0gY3VycmVudEdvcC5kdXJhdGlvbjsgLy8gcHVzaCB0aGUgZmluYWwgR29wXG5cbiAgICAgIGdvcHMucHVzaChjdXJyZW50R29wKTtcbiAgICAgIHJldHVybiBnb3BzO1xuICAgIH07XG4gICAgLypcbiAgICAgKiBTZWFyY2ggZm9yIHRoZSBmaXJzdCBrZXlmcmFtZSBpbiB0aGUgR09QcyBhbmQgdGhyb3cgYXdheSBhbGwgZnJhbWVzXG4gICAgICogdW50aWwgdGhhdCBrZXlmcmFtZS4gVGhlbiBleHRlbmQgdGhlIGR1cmF0aW9uIG9mIHRoZSBwdWxsZWQga2V5ZnJhbWVcbiAgICAgKiBhbmQgcHVsbCB0aGUgUFRTIGFuZCBEVFMgb2YgdGhlIGtleWZyYW1lIHNvIHRoYXQgaXQgY292ZXJzIHRoZSB0aW1lXG4gICAgICogcmFuZ2Ugb2YgdGhlIGZyYW1lcyB0aGF0IHdlcmUgZGlzcG9zZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBnb3BzIHZpZGVvIEdPUHNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IG1vZGlmaWVkIHZpZGVvIEdPUHNcbiAgICAgKi9cblxuXG4gICAgdmFyIGV4dGVuZEZpcnN0S2V5RnJhbWUgPSBmdW5jdGlvbiBleHRlbmRGaXJzdEtleUZyYW1lKGdvcHMpIHtcbiAgICAgIHZhciBjdXJyZW50R29wO1xuXG4gICAgICBpZiAoIWdvcHNbMF1bMF0ua2V5RnJhbWUgJiYgZ29wcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgR09QXG4gICAgICAgIGN1cnJlbnRHb3AgPSBnb3BzLnNoaWZ0KCk7XG4gICAgICAgIGdvcHMuYnl0ZUxlbmd0aCAtPSBjdXJyZW50R29wLmJ5dGVMZW5ndGg7XG4gICAgICAgIGdvcHMubmFsQ291bnQgLT0gY3VycmVudEdvcC5uYWxDb3VudDsgLy8gRXh0ZW5kIHRoZSBmaXJzdCBmcmFtZSBvZiB3aGF0IGlzIG5vdyB0aGVcbiAgICAgICAgLy8gZmlyc3QgZ29wIHRvIGNvdmVyIHRoZSB0aW1lIHBlcmlvZCBvZiB0aGVcbiAgICAgICAgLy8gZnJhbWVzIHdlIGp1c3QgcmVtb3ZlZFxuXG4gICAgICAgIGdvcHNbMF1bMF0uZHRzID0gY3VycmVudEdvcC5kdHM7XG4gICAgICAgIGdvcHNbMF1bMF0ucHRzID0gY3VycmVudEdvcC5wdHM7XG4gICAgICAgIGdvcHNbMF1bMF0uZHVyYXRpb24gKz0gY3VycmVudEdvcC5kdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdvcHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHNhbXBsZSBvYmplY3RcbiAgICAgKiBzZWUgSVNPL0lFQyAxNDQ5Ni0xMjoyMDEyLCBzZWN0aW9uIDguNi40LjNcbiAgICAgKi9cblxuXG4gICAgdmFyIGNyZWF0ZURlZmF1bHRTYW1wbGUgPSBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0U2FtcGxlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgZmxhZ3M6IHtcbiAgICAgICAgICBpc0xlYWRpbmc6IDAsXG4gICAgICAgICAgZGVwZW5kc09uOiAxLFxuICAgICAgICAgIGlzRGVwZW5kZWRPbjogMCxcbiAgICAgICAgICBoYXNSZWR1bmRhbmN5OiAwLFxuICAgICAgICAgIGRlZ3JhZGF0aW9uUHJpb3JpdHk6IDAsXG4gICAgICAgICAgaXNOb25TeW5jU2FtcGxlOiAxXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICAvKlxuICAgICAqIENvbGxhdGVzIGluZm9ybWF0aW9uIGZyb20gYSB2aWRlbyBmcmFtZSBpbnRvIGFuIG9iamVjdCBmb3IgZXZlbnR1YWxcbiAgICAgKiBlbnRyeSBpbnRvIGFuIE1QNCBzYW1wbGUgdGFibGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJhbWUgdGhlIHZpZGVvIGZyYW1lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGFPZmZzZXQgdGhlIGJ5dGUgb2Zmc2V0IHRvIHBvc2l0aW9uIHRoZSBzYW1wbGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHNhbXBsZSB0YWJsZSBpbmZvIGZvciBhIGZyYW1lXG4gICAgICovXG5cblxuICAgIHZhciBzYW1wbGVGb3JGcmFtZSA9IGZ1bmN0aW9uIHNhbXBsZUZvckZyYW1lKGZyYW1lLCBkYXRhT2Zmc2V0KSB7XG4gICAgICB2YXIgc2FtcGxlID0gY3JlYXRlRGVmYXVsdFNhbXBsZSgpO1xuICAgICAgc2FtcGxlLmRhdGFPZmZzZXQgPSBkYXRhT2Zmc2V0O1xuICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IGZyYW1lLnB0cyAtIGZyYW1lLmR0cztcbiAgICAgIHNhbXBsZS5kdXJhdGlvbiA9IGZyYW1lLmR1cmF0aW9uO1xuICAgICAgc2FtcGxlLnNpemUgPSA0ICogZnJhbWUubGVuZ3RoOyAvLyBTcGFjZSBmb3IgbmFsIHVuaXQgc2l6ZVxuXG4gICAgICBzYW1wbGUuc2l6ZSArPSBmcmFtZS5ieXRlTGVuZ3RoO1xuXG4gICAgICBpZiAoZnJhbWUua2V5RnJhbWUpIHtcbiAgICAgICAgc2FtcGxlLmZsYWdzLmRlcGVuZHNPbiA9IDI7XG4gICAgICAgIHNhbXBsZS5mbGFncy5pc05vblN5bmNTYW1wbGUgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2FtcGxlO1xuICAgIH07IC8vIGdlbmVyYXRlIHRoZSB0cmFjaydzIHNhbXBsZSB0YWJsZSBmcm9tIGFuIGFycmF5IG9mIGdvcHNcblxuXG4gICAgdmFyIGdlbmVyYXRlU2FtcGxlVGFibGUgPSBmdW5jdGlvbiBnZW5lcmF0ZVNhbXBsZVRhYmxlKGdvcHMsIGJhc2VEYXRhT2Zmc2V0KSB7XG4gICAgICB2YXIgaCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIHNhbXBsZSxcbiAgICAgICAgICBjdXJyZW50R29wLFxuICAgICAgICAgIGN1cnJlbnRGcmFtZSxcbiAgICAgICAgICBkYXRhT2Zmc2V0ID0gYmFzZURhdGFPZmZzZXQgfHwgMCxcbiAgICAgICAgICBzYW1wbGVzID0gW107XG5cbiAgICAgIGZvciAoaCA9IDA7IGggPCBnb3BzLmxlbmd0aDsgaCsrKSB7XG4gICAgICAgIGN1cnJlbnRHb3AgPSBnb3BzW2hdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjdXJyZW50R29wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY3VycmVudEZyYW1lID0gY3VycmVudEdvcFtpXTtcbiAgICAgICAgICBzYW1wbGUgPSBzYW1wbGVGb3JGcmFtZShjdXJyZW50RnJhbWUsIGRhdGFPZmZzZXQpO1xuICAgICAgICAgIGRhdGFPZmZzZXQgKz0gc2FtcGxlLnNpemU7XG4gICAgICAgICAgc2FtcGxlcy5wdXNoKHNhbXBsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNhbXBsZXM7XG4gICAgfTsgLy8gZ2VuZXJhdGUgdGhlIHRyYWNrJ3MgcmF3IG1kYXQgZGF0YSBmcm9tIGFuIGFycmF5IG9mIGdvcHNcblxuXG4gICAgdmFyIGNvbmNhdGVuYXRlTmFsRGF0YSA9IGZ1bmN0aW9uIGNvbmNhdGVuYXRlTmFsRGF0YShnb3BzKSB7XG4gICAgICB2YXIgaCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGosXG4gICAgICAgICAgY3VycmVudEdvcCxcbiAgICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgICAgY3VycmVudE5hbCxcbiAgICAgICAgICBkYXRhT2Zmc2V0ID0gMCxcbiAgICAgICAgICBuYWxzQnl0ZUxlbmd0aCA9IGdvcHMuYnl0ZUxlbmd0aCxcbiAgICAgICAgICBudW1iZXJPZk5hbHMgPSBnb3BzLm5hbENvdW50LFxuICAgICAgICAgIHRvdGFsQnl0ZUxlbmd0aCA9IG5hbHNCeXRlTGVuZ3RoICsgNCAqIG51bWJlck9mTmFscyxcbiAgICAgICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodG90YWxCeXRlTGVuZ3RoKSxcbiAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyKTsgLy8gRm9yIGVhY2ggR29wLi5cblxuICAgICAgZm9yIChoID0gMDsgaCA8IGdvcHMubGVuZ3RoOyBoKyspIHtcbiAgICAgICAgY3VycmVudEdvcCA9IGdvcHNbaF07IC8vIEZvciBlYWNoIEZyYW1lLi5cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3VycmVudEdvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGN1cnJlbnRGcmFtZSA9IGN1cnJlbnRHb3BbaV07IC8vIEZvciBlYWNoIE5BTC4uXG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY3VycmVudEZyYW1lLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjdXJyZW50TmFsID0gY3VycmVudEZyYW1lW2pdO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIoZGF0YU9mZnNldCwgY3VycmVudE5hbC5kYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgZGF0YU9mZnNldCArPSA0O1xuICAgICAgICAgICAgZGF0YS5zZXQoY3VycmVudE5hbC5kYXRhLCBkYXRhT2Zmc2V0KTtcbiAgICAgICAgICAgIGRhdGFPZmZzZXQgKz0gY3VycmVudE5hbC5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07IC8vIGdlbmVyYXRlIHRoZSB0cmFjaydzIHNhbXBsZSB0YWJsZSBmcm9tIGEgZnJhbWVcblxuXG4gICAgdmFyIGdlbmVyYXRlU2FtcGxlVGFibGVGb3JGcmFtZSA9IGZ1bmN0aW9uIGdlbmVyYXRlU2FtcGxlVGFibGVGb3JGcmFtZShmcmFtZSwgYmFzZURhdGFPZmZzZXQpIHtcbiAgICAgIHZhciBzYW1wbGUsXG4gICAgICAgICAgZGF0YU9mZnNldCA9IGJhc2VEYXRhT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgc2FtcGxlcyA9IFtdO1xuICAgICAgc2FtcGxlID0gc2FtcGxlRm9yRnJhbWUoZnJhbWUsIGRhdGFPZmZzZXQpO1xuICAgICAgc2FtcGxlcy5wdXNoKHNhbXBsZSk7XG4gICAgICByZXR1cm4gc2FtcGxlcztcbiAgICB9OyAvLyBnZW5lcmF0ZSB0aGUgdHJhY2sncyByYXcgbWRhdCBkYXRhIGZyb20gYSBmcmFtZVxuXG5cbiAgICB2YXIgY29uY2F0ZW5hdGVOYWxEYXRhRm9yRnJhbWUgPSBmdW5jdGlvbiBjb25jYXRlbmF0ZU5hbERhdGFGb3JGcmFtZShmcmFtZSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgY3VycmVudE5hbCxcbiAgICAgICAgICBkYXRhT2Zmc2V0ID0gMCxcbiAgICAgICAgICBuYWxzQnl0ZUxlbmd0aCA9IGZyYW1lLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgbnVtYmVyT2ZOYWxzID0gZnJhbWUubGVuZ3RoLFxuICAgICAgICAgIHRvdGFsQnl0ZUxlbmd0aCA9IG5hbHNCeXRlTGVuZ3RoICsgNCAqIG51bWJlck9mTmFscyxcbiAgICAgICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodG90YWxCeXRlTGVuZ3RoKSxcbiAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyKTsgLy8gRm9yIGVhY2ggTkFMLi5cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGZyYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnROYWwgPSBmcmFtZVtpXTtcbiAgICAgICAgdmlldy5zZXRVaW50MzIoZGF0YU9mZnNldCwgY3VycmVudE5hbC5kYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICBkYXRhT2Zmc2V0ICs9IDQ7XG4gICAgICAgIGRhdGEuc2V0KGN1cnJlbnROYWwuZGF0YSwgZGF0YU9mZnNldCk7XG4gICAgICAgIGRhdGFPZmZzZXQgKz0gY3VycmVudE5hbC5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG5cbiAgICB2YXIgZnJhbWVVdGlscyA9IHtcbiAgICAgIGdyb3VwTmFsc0ludG9GcmFtZXM6IGdyb3VwTmFsc0ludG9GcmFtZXMsXG4gICAgICBncm91cEZyYW1lc0ludG9Hb3BzOiBncm91cEZyYW1lc0ludG9Hb3BzLFxuICAgICAgZXh0ZW5kRmlyc3RLZXlGcmFtZTogZXh0ZW5kRmlyc3RLZXlGcmFtZSxcbiAgICAgIGdlbmVyYXRlU2FtcGxlVGFibGU6IGdlbmVyYXRlU2FtcGxlVGFibGUsXG4gICAgICBjb25jYXRlbmF0ZU5hbERhdGE6IGNvbmNhdGVuYXRlTmFsRGF0YSxcbiAgICAgIGdlbmVyYXRlU2FtcGxlVGFibGVGb3JGcmFtZTogZ2VuZXJhdGVTYW1wbGVUYWJsZUZvckZyYW1lLFxuICAgICAgY29uY2F0ZW5hdGVOYWxEYXRhRm9yRnJhbWU6IGNvbmNhdGVuYXRlTmFsRGF0YUZvckZyYW1lXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIHZhciBoaWdoUHJlZml4ID0gWzMzLCAxNiwgNSwgMzIsIDE2NCwgMjddO1xuICAgIHZhciBsb3dQcmVmaXggPSBbMzMsIDY1LCAxMDgsIDg0LCAxLCAyLCA0LCA4LCAxNjgsIDIsIDQsIDgsIDE3LCAxOTEsIDI1Ml07XG5cbiAgICB2YXIgemVyb0ZpbGwgPSBmdW5jdGlvbiB6ZXJvRmlsbChjb3VudCkge1xuICAgICAgdmFyIGEgPSBbXTtcblxuICAgICAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICAgICAgYS5wdXNoKDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYTtcbiAgICB9O1xuXG4gICAgdmFyIG1ha2VUYWJsZSA9IGZ1bmN0aW9uIG1ha2VUYWJsZShtZXRhVGFibGUpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtZXRhVGFibGUpLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBuZXcgVWludDhBcnJheShtZXRhVGFibGVba2V5XS5yZWR1Y2UoZnVuY3Rpb24gKGFyciwgcGFydCkge1xuICAgICAgICAgIHJldHVybiBhcnIuY29uY2F0KHBhcnQpO1xuICAgICAgICB9LCBbXSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSwge30pO1xuICAgIH07IC8vIEZyYW1lcy1vZi1zaWxlbmNlIHRvIHVzZSBmb3IgZmlsbGluZyBpbiBtaXNzaW5nIEFBQyBmcmFtZXNcblxuXG4gICAgdmFyIGNvbmVPZlNpbGVuY2UgPSB7XG4gICAgICA5NjAwMDogW2hpZ2hQcmVmaXgsIFsyMjcsIDY0XSwgemVyb0ZpbGwoMTU0KSwgWzU2XV0sXG4gICAgICA4ODIwMDogW2hpZ2hQcmVmaXgsIFsyMzFdLCB6ZXJvRmlsbCgxNzApLCBbNTZdXSxcbiAgICAgIDY0MDAwOiBbaGlnaFByZWZpeCwgWzI0OCwgMTkyXSwgemVyb0ZpbGwoMjQwKSwgWzU2XV0sXG4gICAgICA0ODAwMDogW2hpZ2hQcmVmaXgsIFsyNTUsIDE5Ml0sIHplcm9GaWxsKDI2OCksIFs1NSwgMTQ4LCAxMjhdLCB6ZXJvRmlsbCg1NCksIFsxMTJdXSxcbiAgICAgIDQ0MTAwOiBbaGlnaFByZWZpeCwgWzI1NSwgMTkyXSwgemVyb0ZpbGwoMjY4KSwgWzU1LCAxNjMsIDEyOF0sIHplcm9GaWxsKDg0KSwgWzExMl1dLFxuICAgICAgMzIwMDA6IFtoaWdoUHJlZml4LCBbMjU1LCAxOTJdLCB6ZXJvRmlsbCgyNjgpLCBbNTUsIDIzNF0sIHplcm9GaWxsKDIyNiksIFsxMTJdXSxcbiAgICAgIDI0MDAwOiBbaGlnaFByZWZpeCwgWzI1NSwgMTkyXSwgemVyb0ZpbGwoMjY4KSwgWzU1LCAyNTUsIDEyOF0sIHplcm9GaWxsKDI2OCksIFsxMTEsIDExMl0sIHplcm9GaWxsKDEyNiksIFsyMjRdXSxcbiAgICAgIDE2MDAwOiBbaGlnaFByZWZpeCwgWzI1NSwgMTkyXSwgemVyb0ZpbGwoMjY4KSwgWzU1LCAyNTUsIDEyOF0sIHplcm9GaWxsKDI2OCksIFsxMTEsIDI1NV0sIHplcm9GaWxsKDI2OSksIFsyMjMsIDEwOF0sIHplcm9GaWxsKDE5NSksIFsxLCAxOTJdXSxcbiAgICAgIDEyMDAwOiBbbG93UHJlZml4LCB6ZXJvRmlsbCgyNjgpLCBbMywgMTI3LCAyNDhdLCB6ZXJvRmlsbCgyNjgpLCBbNiwgMjU1LCAyNDBdLCB6ZXJvRmlsbCgyNjgpLCBbMTMsIDI1NSwgMjI0XSwgemVyb0ZpbGwoMjY4KSwgWzI3LCAyNTMsIDEyOF0sIHplcm9GaWxsKDI1OSksIFs1Nl1dLFxuICAgICAgMTEwMjU6IFtsb3dQcmVmaXgsIHplcm9GaWxsKDI2OCksIFszLCAxMjcsIDI0OF0sIHplcm9GaWxsKDI2OCksIFs2LCAyNTUsIDI0MF0sIHplcm9GaWxsKDI2OCksIFsxMywgMjU1LCAyMjRdLCB6ZXJvRmlsbCgyNjgpLCBbMjcsIDI1NSwgMTkyXSwgemVyb0ZpbGwoMjY4KSwgWzU1LCAxNzUsIDEyOF0sIHplcm9GaWxsKDEwOCksIFsxMTJdXSxcbiAgICAgIDgwMDA6IFtsb3dQcmVmaXgsIHplcm9GaWxsKDI2OCksIFszLCAxMjEsIDE2XSwgemVyb0ZpbGwoNDcpLCBbN11dXG4gICAgfTtcbiAgICB2YXIgc2lsZW5jZSA9IG1ha2VUYWJsZShjb25lT2ZTaWxlbmNlKTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIHZhciBPTkVfU0VDT05EX0lOX1RTID0gOTAwMDAsXG4gICAgICAgIC8vIDkwa0h6IGNsb2NrXG4gICAgc2Vjb25kc1RvVmlkZW9UcyxcbiAgICAgICAgc2Vjb25kc1RvQXVkaW9UcyxcbiAgICAgICAgdmlkZW9Uc1RvU2Vjb25kcyxcbiAgICAgICAgYXVkaW9Uc1RvU2Vjb25kcyxcbiAgICAgICAgYXVkaW9Uc1RvVmlkZW9UcyxcbiAgICAgICAgdmlkZW9Uc1RvQXVkaW9UcyxcbiAgICAgICAgbWV0YWRhdGFUc1RvU2Vjb25kcztcblxuICAgIHNlY29uZHNUb1ZpZGVvVHMgPSBmdW5jdGlvbiBzZWNvbmRzVG9WaWRlb1RzKHNlY29uZHMpIHtcbiAgICAgIHJldHVybiBzZWNvbmRzICogT05FX1NFQ09ORF9JTl9UUztcbiAgICB9O1xuXG4gICAgc2Vjb25kc1RvQXVkaW9UcyA9IGZ1bmN0aW9uIHNlY29uZHNUb0F1ZGlvVHMoc2Vjb25kcywgc2FtcGxlUmF0ZSkge1xuICAgICAgcmV0dXJuIHNlY29uZHMgKiBzYW1wbGVSYXRlO1xuICAgIH07XG5cbiAgICB2aWRlb1RzVG9TZWNvbmRzID0gZnVuY3Rpb24gdmlkZW9Uc1RvU2Vjb25kcyh0aW1lc3RhbXApIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXAgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgIH07XG5cbiAgICBhdWRpb1RzVG9TZWNvbmRzID0gZnVuY3Rpb24gYXVkaW9Uc1RvU2Vjb25kcyh0aW1lc3RhbXAsIHNhbXBsZVJhdGUpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXAgLyBzYW1wbGVSYXRlO1xuICAgIH07XG5cbiAgICBhdWRpb1RzVG9WaWRlb1RzID0gZnVuY3Rpb24gYXVkaW9Uc1RvVmlkZW9Ucyh0aW1lc3RhbXAsIHNhbXBsZVJhdGUpIHtcbiAgICAgIHJldHVybiBzZWNvbmRzVG9WaWRlb1RzKGF1ZGlvVHNUb1NlY29uZHModGltZXN0YW1wLCBzYW1wbGVSYXRlKSk7XG4gICAgfTtcblxuICAgIHZpZGVvVHNUb0F1ZGlvVHMgPSBmdW5jdGlvbiB2aWRlb1RzVG9BdWRpb1RzKHRpbWVzdGFtcCwgc2FtcGxlUmF0ZSkge1xuICAgICAgcmV0dXJuIHNlY29uZHNUb0F1ZGlvVHModmlkZW9Uc1RvU2Vjb25kcyh0aW1lc3RhbXApLCBzYW1wbGVSYXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkanVzdCBJRDMgdGFnIG9yIGNhcHRpb24gdGltaW5nIGluZm9ybWF0aW9uIGJ5IHRoZSB0aW1lbGluZSBwdHMgdmFsdWVzXG4gICAgICogKGlmIGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMgaXMgZmFsc2UpIGFuZCBjb252ZXJ0IHRvIHNlY29uZHNcbiAgICAgKi9cblxuXG4gICAgbWV0YWRhdGFUc1RvU2Vjb25kcyA9IGZ1bmN0aW9uIG1ldGFkYXRhVHNUb1NlY29uZHModGltZXN0YW1wLCB0aW1lbGluZVN0YXJ0UHRzLCBrZWVwT3JpZ2luYWxUaW1lc3RhbXBzKSB7XG4gICAgICByZXR1cm4gdmlkZW9Uc1RvU2Vjb25kcyhrZWVwT3JpZ2luYWxUaW1lc3RhbXBzID8gdGltZXN0YW1wIDogdGltZXN0YW1wIC0gdGltZWxpbmVTdGFydFB0cyk7XG4gICAgfTtcblxuICAgIHZhciBjbG9jayA9IHtcbiAgICAgIE9ORV9TRUNPTkRfSU5fVFM6IE9ORV9TRUNPTkRfSU5fVFMsXG4gICAgICBzZWNvbmRzVG9WaWRlb1RzOiBzZWNvbmRzVG9WaWRlb1RzLFxuICAgICAgc2Vjb25kc1RvQXVkaW9Uczogc2Vjb25kc1RvQXVkaW9UcyxcbiAgICAgIHZpZGVvVHNUb1NlY29uZHM6IHZpZGVvVHNUb1NlY29uZHMsXG4gICAgICBhdWRpb1RzVG9TZWNvbmRzOiBhdWRpb1RzVG9TZWNvbmRzLFxuICAgICAgYXVkaW9Uc1RvVmlkZW9UczogYXVkaW9Uc1RvVmlkZW9UcyxcbiAgICAgIHZpZGVvVHNUb0F1ZGlvVHM6IHZpZGVvVHNUb0F1ZGlvVHMsXG4gICAgICBtZXRhZGF0YVRzVG9TZWNvbmRzOiBtZXRhZGF0YVRzVG9TZWNvbmRzXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFN1bSB0aGUgYGJ5dGVMZW5ndGhgIHByb3BlcnRpZXMgb2YgdGhlIGRhdGEgaW4gZWFjaCBBQUMgZnJhbWVcbiAgICAgKi9cblxuICAgIHZhciBzdW1GcmFtZUJ5dGVMZW5ndGhzID0gZnVuY3Rpb24gc3VtRnJhbWVCeXRlTGVuZ3RocyhhcnJheSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgY3VycmVudE9iaixcbiAgICAgICAgICBzdW0gPSAwOyAvLyBzdW0gdGhlIGJ5dGVMZW5ndGgncyBhbGwgZWFjaCBuYWwgdW5pdCBpbiB0aGUgZnJhbWVcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnRPYmogPSBhcnJheVtpXTtcbiAgICAgICAgc3VtICs9IGN1cnJlbnRPYmouZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VtO1xuICAgIH07IC8vIFBvc3NpYmx5IHBhZCAocHJlZml4KSB0aGUgYXVkaW8gdHJhY2sgd2l0aCBzaWxlbmNlIGlmIGFwcGVuZGluZyB0aGlzIHRyYWNrXG4gICAgLy8gd291bGQgbGVhZCB0byB0aGUgaW50cm9kdWN0aW9uIG9mIGEgZ2FwIGluIHRoZSBhdWRpbyBidWZmZXJcblxuXG4gICAgdmFyIHByZWZpeFdpdGhTaWxlbmNlID0gZnVuY3Rpb24gcHJlZml4V2l0aFNpbGVuY2UodHJhY2ssIGZyYW1lcywgYXVkaW9BcHBlbmRTdGFydFRzLCB2aWRlb0Jhc2VNZWRpYURlY29kZVRpbWUpIHtcbiAgICAgIHZhciBiYXNlTWVkaWFEZWNvZGVUaW1lVHMsXG4gICAgICAgICAgZnJhbWVEdXJhdGlvbiA9IDAsXG4gICAgICAgICAgYXVkaW9HYXBEdXJhdGlvbiA9IDAsXG4gICAgICAgICAgYXVkaW9GaWxsRnJhbWVDb3VudCA9IDAsXG4gICAgICAgICAgYXVkaW9GaWxsRHVyYXRpb24gPSAwLFxuICAgICAgICAgIHNpbGVudEZyYW1lLFxuICAgICAgICAgIGksXG4gICAgICAgICAgZmlyc3RGcmFtZTtcblxuICAgICAgaWYgKCFmcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZVRzID0gY2xvY2suYXVkaW9Uc1RvVmlkZW9Ucyh0cmFjay5iYXNlTWVkaWFEZWNvZGVUaW1lLCB0cmFjay5zYW1wbGVyYXRlKTsgLy8gZGV0ZXJtaW5lIGZyYW1lIGNsb2NrIGR1cmF0aW9uIGJhc2VkIG9uIHNhbXBsZSByYXRlLCByb3VuZCB1cCB0byBhdm9pZCBvdmVyZmlsbHNcblxuICAgICAgZnJhbWVEdXJhdGlvbiA9IE1hdGguY2VpbChjbG9jay5PTkVfU0VDT05EX0lOX1RTIC8gKHRyYWNrLnNhbXBsZXJhdGUgLyAxMDI0KSk7XG5cbiAgICAgIGlmIChhdWRpb0FwcGVuZFN0YXJ0VHMgJiYgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lKSB7XG4gICAgICAgIC8vIGluc2VydCB0aGUgc2hvcnRlc3QgcG9zc2libGUgYW1vdW50IChhdWRpbyBnYXAgb3IgYXVkaW8gdG8gdmlkZW8gZ2FwKVxuICAgICAgICBhdWRpb0dhcER1cmF0aW9uID0gYmFzZU1lZGlhRGVjb2RlVGltZVRzIC0gTWF0aC5tYXgoYXVkaW9BcHBlbmRTdGFydFRzLCB2aWRlb0Jhc2VNZWRpYURlY29kZVRpbWUpOyAvLyBudW1iZXIgb2YgZnVsbCBmcmFtZXMgaW4gdGhlIGF1ZGlvIGdhcFxuXG4gICAgICAgIGF1ZGlvRmlsbEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGF1ZGlvR2FwRHVyYXRpb24gLyBmcmFtZUR1cmF0aW9uKTtcbiAgICAgICAgYXVkaW9GaWxsRHVyYXRpb24gPSBhdWRpb0ZpbGxGcmFtZUNvdW50ICogZnJhbWVEdXJhdGlvbjtcbiAgICAgIH0gLy8gZG9uJ3QgYXR0ZW1wdCB0byBmaWxsIGdhcHMgc21hbGxlciB0aGFuIGEgc2luZ2xlIGZyYW1lIG9yIGxhcmdlclxuICAgICAgLy8gdGhhbiBhIGhhbGYgc2Vjb25kXG5cblxuICAgICAgaWYgKGF1ZGlvRmlsbEZyYW1lQ291bnQgPCAxIHx8IGF1ZGlvRmlsbER1cmF0aW9uID4gY2xvY2suT05FX1NFQ09ORF9JTl9UUyAvIDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzaWxlbnRGcmFtZSA9IHNpbGVuY2VbdHJhY2suc2FtcGxlcmF0ZV07XG5cbiAgICAgIGlmICghc2lsZW50RnJhbWUpIHtcbiAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHNpbGVudCBmcmFtZSBwcmVnZW5lcmF0ZWQgZm9yIHRoZSBzYW1wbGUgcmF0ZSwgc28gdXNlIGEgZnJhbWVcbiAgICAgICAgLy8gZnJvbSB0aGUgY29udGVudCBpbnN0ZWFkXG4gICAgICAgIHNpbGVudEZyYW1lID0gZnJhbWVzWzBdLmRhdGE7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhdWRpb0ZpbGxGcmFtZUNvdW50OyBpKyspIHtcbiAgICAgICAgZmlyc3RGcmFtZSA9IGZyYW1lc1swXTtcbiAgICAgICAgZnJhbWVzLnNwbGljZSgwLCAwLCB7XG4gICAgICAgICAgZGF0YTogc2lsZW50RnJhbWUsXG4gICAgICAgICAgZHRzOiBmaXJzdEZyYW1lLmR0cyAtIGZyYW1lRHVyYXRpb24sXG4gICAgICAgICAgcHRzOiBmaXJzdEZyYW1lLnB0cyAtIGZyYW1lRHVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRyYWNrLmJhc2VNZWRpYURlY29kZVRpbWUgLT0gTWF0aC5mbG9vcihjbG9jay52aWRlb1RzVG9BdWRpb1RzKGF1ZGlvRmlsbER1cmF0aW9uLCB0cmFjay5zYW1wbGVyYXRlKSk7XG4gICAgfTsgLy8gSWYgdGhlIGF1ZGlvIHNlZ21lbnQgZXh0ZW5kcyBiZWZvcmUgdGhlIGVhcmxpZXN0IGFsbG93ZWQgZHRzXG4gICAgLy8gdmFsdWUsIHJlbW92ZSBBQUMgZnJhbWVzIHVudGlsIHN0YXJ0cyBhdCBvciBhZnRlciB0aGUgZWFybGllc3RcbiAgICAvLyBhbGxvd2VkIERUUyBzbyB0aGF0IHdlIGRvbid0IGVuZCB1cCB3aXRoIGEgbmVnYXRpdmUgYmFzZU1lZGlhLVxuICAgIC8vIERlY29kZVRpbWUgZm9yIHRoZSBhdWRpbyB0cmFja1xuXG5cbiAgICB2YXIgdHJpbUFkdHNGcmFtZXNCeUVhcmxpZXN0RHRzID0gZnVuY3Rpb24gdHJpbUFkdHNGcmFtZXNCeUVhcmxpZXN0RHRzKGFkdHNGcmFtZXMsIHRyYWNrLCBlYXJsaWVzdEFsbG93ZWREdHMpIHtcbiAgICAgIGlmICh0cmFjay5taW5TZWdtZW50RHRzID49IGVhcmxpZXN0QWxsb3dlZER0cykge1xuICAgICAgICByZXR1cm4gYWR0c0ZyYW1lcztcbiAgICAgIH0gLy8gV2Ugd2lsbCBuZWVkIHRvIHJlY2FsY3VsYXRlIHRoZSBlYXJsaWVzdCBzZWdtZW50IER0c1xuXG5cbiAgICAgIHRyYWNrLm1pblNlZ21lbnREdHMgPSBJbmZpbml0eTtcbiAgICAgIHJldHVybiBhZHRzRnJhbWVzLmZpbHRlcihmdW5jdGlvbiAoY3VycmVudEZyYW1lKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gYWxsb3dlZCBmcmFtZSwga2VlcCBpdCBhbmQgcmVjb3JkIGl0J3MgRHRzXG4gICAgICAgIGlmIChjdXJyZW50RnJhbWUuZHRzID49IGVhcmxpZXN0QWxsb3dlZER0cykge1xuICAgICAgICAgIHRyYWNrLm1pblNlZ21lbnREdHMgPSBNYXRoLm1pbih0cmFjay5taW5TZWdtZW50RHRzLCBjdXJyZW50RnJhbWUuZHRzKTtcbiAgICAgICAgICB0cmFjay5taW5TZWdtZW50UHRzID0gdHJhY2subWluU2VnbWVudER0cztcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIGRpc2NhcmQgaXRcblxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07IC8vIGdlbmVyYXRlIHRoZSB0cmFjaydzIHJhdyBtZGF0IGRhdGEgZnJvbSBhbiBhcnJheSBvZiBmcmFtZXNcblxuXG4gICAgdmFyIGdlbmVyYXRlU2FtcGxlVGFibGUkMSA9IGZ1bmN0aW9uIGdlbmVyYXRlU2FtcGxlVGFibGUoZnJhbWVzKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgICAgc2FtcGxlcyA9IFtdO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnRGcmFtZSA9IGZyYW1lc1tpXTtcbiAgICAgICAgc2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICBzaXplOiBjdXJyZW50RnJhbWUuZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMDI0IC8vIEZvciBBQUMgYXVkaW8sIGFsbCBzYW1wbGVzIGNvbnRhaW4gMTAyNCBzYW1wbGVzXG5cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzYW1wbGVzO1xuICAgIH07IC8vIGdlbmVyYXRlIHRoZSB0cmFjaydzIHNhbXBsZSB0YWJsZSBmcm9tIGFuIGFycmF5IG9mIGZyYW1lc1xuXG5cbiAgICB2YXIgY29uY2F0ZW5hdGVGcmFtZURhdGEgPSBmdW5jdGlvbiBjb25jYXRlbmF0ZUZyYW1lRGF0YShmcmFtZXMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGN1cnJlbnRGcmFtZSxcbiAgICAgICAgICBkYXRhT2Zmc2V0ID0gMCxcbiAgICAgICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3VtRnJhbWVCeXRlTGVuZ3RocyhmcmFtZXMpKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50RnJhbWUgPSBmcmFtZXNbaV07XG4gICAgICAgIGRhdGEuc2V0KGN1cnJlbnRGcmFtZS5kYXRhLCBkYXRhT2Zmc2V0KTtcbiAgICAgICAgZGF0YU9mZnNldCArPSBjdXJyZW50RnJhbWUuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9O1xuXG4gICAgdmFyIGF1ZGlvRnJhbWVVdGlscyA9IHtcbiAgICAgIHByZWZpeFdpdGhTaWxlbmNlOiBwcmVmaXhXaXRoU2lsZW5jZSxcbiAgICAgIHRyaW1BZHRzRnJhbWVzQnlFYXJsaWVzdER0czogdHJpbUFkdHNGcmFtZXNCeUVhcmxpZXN0RHRzLFxuICAgICAgZ2VuZXJhdGVTYW1wbGVUYWJsZTogZ2VuZXJhdGVTYW1wbGVUYWJsZSQxLFxuICAgICAgY29uY2F0ZW5hdGVGcmFtZURhdGE6IGNvbmNhdGVuYXRlRnJhbWVEYXRhXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIHZhciBPTkVfU0VDT05EX0lOX1RTJDEgPSBjbG9jay5PTkVfU0VDT05EX0lOX1RTO1xuICAgIC8qKlxuICAgICAqIFN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSB0cmFjayBhbmQgdGhlXG4gICAgICogZHVyYXRpb24gZm9yIGVhY2ggZnJhbWUvc2FtcGxlIHdlIHByb2Nlc3MgaW4gb3JkZXIgdG8gY2FsY3VsYXRlXG4gICAgICogdGhlIGJhc2VNZWRpYURlY29kZVRpbWVcbiAgICAgKi9cblxuICAgIHZhciBjb2xsZWN0RHRzSW5mbyA9IGZ1bmN0aW9uIGNvbGxlY3REdHNJbmZvKHRyYWNrLCBkYXRhKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGEucHRzID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHJhY2sudGltZWxpbmVTdGFydEluZm8ucHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0cmFjay50aW1lbGluZVN0YXJ0SW5mby5wdHMgPSBkYXRhLnB0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFjay5taW5TZWdtZW50UHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0cmFjay5taW5TZWdtZW50UHRzID0gZGF0YS5wdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhY2subWluU2VnbWVudFB0cyA9IE1hdGgubWluKHRyYWNrLm1pblNlZ21lbnRQdHMsIGRhdGEucHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFjay5tYXhTZWdtZW50UHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0cmFjay5tYXhTZWdtZW50UHRzID0gZGF0YS5wdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhY2subWF4U2VnbWVudFB0cyA9IE1hdGgubWF4KHRyYWNrLm1heFNlZ21lbnRQdHMsIGRhdGEucHRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGEuZHRzID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHJhY2sudGltZWxpbmVTdGFydEluZm8uZHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0cmFjay50aW1lbGluZVN0YXJ0SW5mby5kdHMgPSBkYXRhLmR0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFjay5taW5TZWdtZW50RHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0cmFjay5taW5TZWdtZW50RHRzID0gZGF0YS5kdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhY2subWluU2VnbWVudER0cyA9IE1hdGgubWluKHRyYWNrLm1pblNlZ21lbnREdHMsIGRhdGEuZHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFjay5tYXhTZWdtZW50RHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0cmFjay5tYXhTZWdtZW50RHRzID0gZGF0YS5kdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhY2subWF4U2VnbWVudER0cyA9IE1hdGgubWF4KHRyYWNrLm1heFNlZ21lbnREdHMsIGRhdGEuZHRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdmFsdWVzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBiYXNlTWVkaWFEZWNvZGVUaW1lIGJldHdlZW5cbiAgICAgKiB0cmFja3NcbiAgICAgKi9cblxuXG4gICAgdmFyIGNsZWFyRHRzSW5mbyA9IGZ1bmN0aW9uIGNsZWFyRHRzSW5mbyh0cmFjaykge1xuICAgICAgZGVsZXRlIHRyYWNrLm1pblNlZ21lbnREdHM7XG4gICAgICBkZWxldGUgdHJhY2subWF4U2VnbWVudER0cztcbiAgICAgIGRlbGV0ZSB0cmFjay5taW5TZWdtZW50UHRzO1xuICAgICAgZGVsZXRlIHRyYWNrLm1heFNlZ21lbnRQdHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHRyYWNrJ3MgYmFzZU1lZGlhRGVjb2RlVGltZSBiYXNlZCBvbiB0aGUgZWFybGllc3RcbiAgICAgKiBEVFMgdGhlIHRyYW5zbXV4ZXIgaGFzIGV2ZXIgc2VlbiBhbmQgdGhlIG1pbmltdW0gRFRTIGZvciB0aGVcbiAgICAgKiBjdXJyZW50IHRyYWNrXG4gICAgICogQHBhcmFtIHRyYWNrIHtvYmplY3R9IHRyYWNrIG1ldGFkYXRhIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcGFyYW0ga2VlcE9yaWdpbmFsVGltZXN0YW1wcyB7Ym9vbGVhbn0gSWYgdHJ1ZSwga2VlcCB0aGUgdGltZXN0YW1wc1xuICAgICAqICAgICAgICBpbiB0aGUgc291cmNlOyBmYWxzZSB0byBhZGp1c3QgdGhlIGZpcnN0IHNlZ21lbnQgdG8gc3RhcnQgYXQgMC5cbiAgICAgKi9cblxuXG4gICAgdmFyIGNhbGN1bGF0ZVRyYWNrQmFzZU1lZGlhRGVjb2RlVGltZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVRyYWNrQmFzZU1lZGlhRGVjb2RlVGltZSh0cmFjaywga2VlcE9yaWdpbmFsVGltZXN0YW1wcykge1xuICAgICAgdmFyIGJhc2VNZWRpYURlY29kZVRpbWUsXG4gICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgbWluU2VnbWVudER0cyA9IHRyYWNrLm1pblNlZ21lbnREdHM7IC8vIE9wdGlvbmFsbHkgYWRqdXN0IHRoZSB0aW1lIHNvIHRoZSBmaXJzdCBzZWdtZW50IHN0YXJ0cyBhdCB6ZXJvLlxuXG4gICAgICBpZiAoIWtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgICAgbWluU2VnbWVudER0cyAtPSB0cmFjay50aW1lbGluZVN0YXJ0SW5mby5kdHM7XG4gICAgICB9IC8vIHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmJhc2VNZWRpYURlY29kZVRpbWUgaXMgdGhlIGxvY2F0aW9uLCBpbiB0aW1lLCB3aGVyZVxuICAgICAgLy8gd2Ugd2FudCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IHNlZ21lbnQgdG8gYmUgcGxhY2VkXG5cblxuICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSA9IHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmJhc2VNZWRpYURlY29kZVRpbWU7IC8vIEFkZCB0byB0aGF0IHRoZSBkaXN0YW5jZSB0aGlzIHNlZ21lbnQgaXMgZnJvbSB0aGUgdmVyeSBmaXJzdFxuXG4gICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lICs9IG1pblNlZ21lbnREdHM7IC8vIGJhc2VNZWRpYURlY29kZVRpbWUgbXVzdCBub3QgYmVjb21lIG5lZ2F0aXZlXG5cbiAgICAgIGJhc2VNZWRpYURlY29kZVRpbWUgPSBNYXRoLm1heCgwLCBiYXNlTWVkaWFEZWNvZGVUaW1lKTtcblxuICAgICAgaWYgKHRyYWNrLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgLy8gQXVkaW8gaGFzIGEgZGlmZmVyZW50IGNsb2NrIGVxdWFsIHRvIHRoZSBzYW1wbGluZ19yYXRlIHNvIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gc2NhbGUgdGhlIFBUUyB2YWx1ZXMgaW50byB0aGUgY2xvY2sgcmF0ZSBvZiB0aGUgdHJhY2tcbiAgICAgICAgc2NhbGUgPSB0cmFjay5zYW1wbGVyYXRlIC8gT05FX1NFQ09ORF9JTl9UUyQxO1xuICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lICo9IHNjYWxlO1xuICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lID0gTWF0aC5mbG9vcihiYXNlTWVkaWFEZWNvZGVUaW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgfTtcblxuICAgIHZhciB0cmFja0RlY29kZUluZm8gPSB7XG4gICAgICBjbGVhckR0c0luZm86IGNsZWFyRHRzSW5mbyxcbiAgICAgIGNhbGN1bGF0ZVRyYWNrQmFzZU1lZGlhRGVjb2RlVGltZTogY2FsY3VsYXRlVHJhY2tCYXNlTWVkaWFEZWNvZGVUaW1lLFxuICAgICAgY29sbGVjdER0c0luZm86IGNvbGxlY3REdHNJbmZvXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKlxuICAgICAqIFJlYWRzIGluLWJhbmQgY2FwdGlvbiBpbmZvcm1hdGlvbiBmcm9tIGEgdmlkZW8gZWxlbWVudGFyeVxuICAgICAqIHN0cmVhbS4gQ2FwdGlvbnMgbXVzdCBmb2xsb3cgdGhlIENFQS03MDggc3RhbmRhcmQgZm9yIGluamVjdGlvblxuICAgICAqIGludG8gYW4gTVBFRy0yIHRyYW5zcG9ydCBzdHJlYW1zLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ0VBLTcwOFxuICAgICAqIEBzZWUgaHR0cHM6Ly93d3cuZ3BvLmdvdi9mZHN5cy9wa2cvQ0ZSLTIwMDctdGl0bGU0Ny12b2wxL3BkZi9DRlItMjAwNy10aXRsZTQ3LXZvbDEtc2VjMTUtMTE5LnBkZlxuICAgICAqL1xuICAgIC8vIFN1cHBsZW1lbnRhbCBlbmhhbmNlbWVudCBpbmZvcm1hdGlvbiAoU0VJKSBOQUwgdW5pdHMgaGF2ZSBhXG4gICAgLy8gcGF5bG9hZCB0eXBlIGZpZWxkIHRvIGluZGljYXRlIGhvdyB0aGV5IGFyZSB0byBiZVxuICAgIC8vIGludGVycHJldGVkLiBDRUFTLTcwOCBjYXB0aW9uIGNvbnRlbnQgaXMgYWx3YXlzIHRyYW5zbWl0dGVkIHdpdGhcbiAgICAvLyBwYXlsb2FkIHR5cGUgMHgwNC5cblxuICAgIHZhciBVU0VSX0RBVEFfUkVHSVNURVJFRF9JVFVfVF9UMzUgPSA0LFxuICAgICAgICBSQlNQX1RSQUlMSU5HX0JJVFMgPSAxMjg7XG4gICAgLyoqXG4gICAgICAqIFBhcnNlIGEgc3VwcGxlbWVudGFsIGVuaGFuY2VtZW50IGluZm9ybWF0aW9uIChTRUkpIE5BTCB1bml0LlxuICAgICAgKiBTdG9wcyBwYXJzaW5nIG9uY2UgYSBtZXNzYWdlIG9mIHR5cGUgSVRVIFQgVDM1IGhhcyBiZWVuIGZvdW5kLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0gYnl0ZXMge1VpbnQ4QXJyYXl9IHRoZSBieXRlcyBvZiBhIFNFSSBOQUwgdW5pdFxuICAgICAgKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBwYXJzZWQgU0VJIHBheWxvYWRcbiAgICAgICogQHNlZSBSZWMuIElUVS1UIEguMjY0LCA3LjMuMi4zLjFcbiAgICAgICovXG5cbiAgICB2YXIgcGFyc2VTZWkgPSBmdW5jdGlvbiBwYXJzZVNlaShieXRlcykge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgcGF5bG9hZFR5cGU6IC0xLFxuICAgICAgICBwYXlsb2FkU2l6ZTogMFxuICAgICAgfSxcbiAgICAgICAgICBwYXlsb2FkVHlwZSA9IDAsXG4gICAgICAgICAgcGF5bG9hZFNpemUgPSAwOyAvLyBnbyB0aHJvdWdoIHRoZSBzZWlfcmJzcCBwYXJzaW5nIGVhY2ggZWFjaCBpbmRpdmlkdWFsIHNlaV9tZXNzYWdlXG5cbiAgICAgIHdoaWxlIChpIDwgYnl0ZXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAvLyBzdG9wIG9uY2Ugd2UgaGF2ZSBoaXQgdGhlIGVuZCBvZiB0aGUgc2VpX3Jic3BcbiAgICAgICAgaWYgKGJ5dGVzW2ldID09PSBSQlNQX1RSQUlMSU5HX0JJVFMpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBQYXJzZSBwYXlsb2FkIHR5cGVcblxuXG4gICAgICAgIHdoaWxlIChieXRlc1tpXSA9PT0gMHhGRikge1xuICAgICAgICAgIHBheWxvYWRUeXBlICs9IDI1NTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cblxuICAgICAgICBwYXlsb2FkVHlwZSArPSBieXRlc1tpKytdOyAvLyBQYXJzZSBwYXlsb2FkIHNpemVcblxuICAgICAgICB3aGlsZSAoYnl0ZXNbaV0gPT09IDB4RkYpIHtcbiAgICAgICAgICBwYXlsb2FkU2l6ZSArPSAyNTU7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF5bG9hZFNpemUgKz0gYnl0ZXNbaSsrXTsgLy8gdGhpcyBzZWlfbWVzc2FnZSBpcyBhIDYwOC83MDggY2FwdGlvbiBzbyBzYXZlIGl0IGFuZCBicmVha1xuICAgICAgICAvLyB0aGVyZSBjYW4gb25seSBldmVyIGJlIG9uZSBjYXB0aW9uIG1lc3NhZ2UgaW4gYSBmcmFtZSdzIHNlaVxuXG4gICAgICAgIGlmICghcmVzdWx0LnBheWxvYWQgJiYgcGF5bG9hZFR5cGUgPT09IFVTRVJfREFUQV9SRUdJU1RFUkVEX0lUVV9UX1QzNSkge1xuICAgICAgICAgIHJlc3VsdC5wYXlsb2FkVHlwZSA9IHBheWxvYWRUeXBlO1xuICAgICAgICAgIHJlc3VsdC5wYXlsb2FkU2l6ZSA9IHBheWxvYWRTaXplO1xuICAgICAgICAgIHJlc3VsdC5wYXlsb2FkID0gYnl0ZXMuc3ViYXJyYXkoaSwgaSArIHBheWxvYWRTaXplKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBza2lwIHRoZSBwYXlsb2FkIGFuZCBwYXJzZSB0aGUgbmV4dCBtZXNzYWdlXG5cblxuICAgICAgICBpICs9IHBheWxvYWRTaXplO1xuICAgICAgICBwYXlsb2FkVHlwZSA9IDA7XG4gICAgICAgIHBheWxvYWRTaXplID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9OyAvLyBzZWUgQU5TSS9TQ1RFIDEyOC0xICgyMDEzKSwgc2VjdGlvbiA4LjFcblxuXG4gICAgdmFyIHBhcnNlVXNlckRhdGEgPSBmdW5jdGlvbiBwYXJzZVVzZXJEYXRhKHNlaSkge1xuICAgICAgLy8gaXR1X3RfdDM1X2NvbnRyeV9jb2RlIG11c3QgYmUgMTgxIChVbml0ZWQgU3RhdGVzKSBmb3JcbiAgICAgIC8vIGNhcHRpb25zXG4gICAgICBpZiAoc2VpLnBheWxvYWRbMF0gIT09IDE4MSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gLy8gaXR1X3RfdDM1X3Byb3ZpZGVyX2NvZGUgc2hvdWxkIGJlIDQ5IChBVFNDKSBmb3IgY2FwdGlvbnNcblxuXG4gICAgICBpZiAoKHNlaS5wYXlsb2FkWzFdIDw8IDggfCBzZWkucGF5bG9hZFsyXSkgIT09IDQ5KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyB0aGUgdXNlcl9pZGVudGlmaWVyIHNob3VsZCBiZSBcIkdBOTRcIiB0byBpbmRpY2F0ZSBBVFNDMSBkYXRhXG5cblxuICAgICAgaWYgKFN0cmluZy5mcm9tQ2hhckNvZGUoc2VpLnBheWxvYWRbM10sIHNlaS5wYXlsb2FkWzRdLCBzZWkucGF5bG9hZFs1XSwgc2VpLnBheWxvYWRbNl0pICE9PSAnR0E5NCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIGZpbmFsbHksIHVzZXJfZGF0YV90eXBlX2NvZGUgc2hvdWxkIGJlIDB4MDMgZm9yIGNhcHRpb24gZGF0YVxuXG5cbiAgICAgIGlmIChzZWkucGF5bG9hZFs3XSAhPT0gMHgwMykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gLy8gcmV0dXJuIHRoZSB1c2VyX2RhdGFfdHlwZV9zdHJ1Y3R1cmUgYW5kIHN0cmlwIHRoZSB0cmFpbGluZ1xuICAgICAgLy8gbWFya2VyIGJpdHNcblxuXG4gICAgICByZXR1cm4gc2VpLnBheWxvYWQuc3ViYXJyYXkoOCwgc2VpLnBheWxvYWQubGVuZ3RoIC0gMSk7XG4gICAgfTsgLy8gc2VlIENFQS03MDgtRCwgc2VjdGlvbiA0LjRcblxuXG4gICAgdmFyIHBhcnNlQ2FwdGlvblBhY2tldHMgPSBmdW5jdGlvbiBwYXJzZUNhcHRpb25QYWNrZXRzKHB0cywgdXNlckRhdGEpIHtcbiAgICAgIHZhciByZXN1bHRzID0gW10sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBjb3VudCxcbiAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgZGF0YTsgLy8gaWYgdGhpcyBpcyBqdXN0IGZpbGxlciwgcmV0dXJuIGltbWVkaWF0ZWx5XG5cbiAgICAgIGlmICghKHVzZXJEYXRhWzBdICYgMHg0MCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9IC8vIHBhcnNlIG91dCB0aGUgY2NfZGF0YV8xIGFuZCBjY19kYXRhXzIgZmllbGRzXG5cblxuICAgICAgY291bnQgPSB1c2VyRGF0YVswXSAmIDB4MWY7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIG9mZnNldCA9IGkgKiAzO1xuICAgICAgICBkYXRhID0ge1xuICAgICAgICAgIHR5cGU6IHVzZXJEYXRhW29mZnNldCArIDJdICYgMHgwMyxcbiAgICAgICAgICBwdHM6IHB0c1xuICAgICAgICB9OyAvLyBjYXB0dXJlIGNjIGRhdGEgd2hlbiBjY192YWxpZCBpcyAxXG5cbiAgICAgICAgaWYgKHVzZXJEYXRhW29mZnNldCArIDJdICYgMHgwNCkge1xuICAgICAgICAgIGRhdGEuY2NEYXRhID0gdXNlckRhdGFbb2Zmc2V0ICsgM10gPDwgOCB8IHVzZXJEYXRhW29mZnNldCArIDRdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gICAgdmFyIGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMgPSBmdW5jdGlvbiBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzKGRhdGEpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zID0gW10sXG4gICAgICAgICAgaSA9IDEsXG4gICAgICAgICAgbmV3TGVuZ3RoLFxuICAgICAgICAgIG5ld0RhdGE7IC8vIEZpbmQgYWxsIGBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlc2BcblxuICAgICAgd2hpbGUgKGkgPCBsZW5ndGggLSAyKSB7XG4gICAgICAgIGlmIChkYXRhW2ldID09PSAwICYmIGRhdGFbaSArIDFdID09PSAwICYmIGRhdGFbaSArIDJdID09PSAweDAzKSB7XG4gICAgICAgICAgZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLnB1c2goaSArIDIpO1xuICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gSWYgbm8gRW11bGF0aW9uIFByZXZlbnRpb24gQnl0ZXMgd2VyZSBmb3VuZCBqdXN0IHJldHVybiB0aGUgb3JpZ2luYWxcbiAgICAgIC8vIGFycmF5XG5cblxuICAgICAgaWYgKGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IC8vIENyZWF0ZSBhIG5ldyBhcnJheSB0byBob2xkIHRoZSBOQUwgdW5pdCBkYXRhXG5cblxuICAgICAgbmV3TGVuZ3RoID0gbGVuZ3RoIC0gZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLmxlbmd0aDtcbiAgICAgIG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShuZXdMZW5ndGgpO1xuICAgICAgdmFyIHNvdXJjZUluZGV4ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5ld0xlbmd0aDsgc291cmNlSW5kZXgrKywgaSsrKSB7XG4gICAgICAgIGlmIChzb3VyY2VJbmRleCA9PT0gZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zWzBdKSB7XG4gICAgICAgICAgLy8gU2tpcCB0aGlzIGJ5dGVcbiAgICAgICAgICBzb3VyY2VJbmRleCsrOyAvLyBSZW1vdmUgdGhpcyBwb3NpdGlvbiBpbmRleFxuXG4gICAgICAgICAgZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLnNoaWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdEYXRhW2ldID0gZGF0YVtzb3VyY2VJbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH07IC8vIGV4cG9ydHNcblxuXG4gICAgdmFyIGNhcHRpb25QYWNrZXRQYXJzZXIgPSB7XG4gICAgICBwYXJzZVNlaTogcGFyc2VTZWksXG4gICAgICBwYXJzZVVzZXJEYXRhOiBwYXJzZVVzZXJEYXRhLFxuICAgICAgcGFyc2VDYXB0aW9uUGFja2V0czogcGFyc2VDYXB0aW9uUGFja2V0cyxcbiAgICAgIGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXM6IGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMsXG4gICAgICBVU0VSX0RBVEFfUkVHSVNURVJFRF9JVFVfVF9UMzU6IFVTRVJfREFUQV9SRUdJU1RFUkVEX0lUVV9UX1QzNVxuICAgIH07IC8vIC0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTGluayBUbyBUcmFuc3BvcnRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgdmFyIENhcHRpb25TdHJlYW0gPSBmdW5jdGlvbiBDYXB0aW9uU3RyZWFtKCkge1xuICAgICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jYXB0aW9uUGFja2V0c18gPSBbXTtcbiAgICAgIHRoaXMuY2NTdHJlYW1zXyA9IFtuZXcgQ2VhNjA4U3RyZWFtKDAsIDApLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBuZXcgQ2VhNjA4U3RyZWFtKDAsIDEpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBuZXcgQ2VhNjA4U3RyZWFtKDEsIDApLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBuZXcgQ2VhNjA4U3RyZWFtKDEsIDEpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgIF07XG4gICAgICB0aGlzLnJlc2V0KCk7IC8vIGZvcndhcmQgZGF0YSBhbmQgZG9uZSBldmVudHMgZnJvbSBDQ3MgdG8gdGhpcyBDYXB0aW9uU3RyZWFtXG5cbiAgICAgIHRoaXMuY2NTdHJlYW1zXy5mb3JFYWNoKGZ1bmN0aW9uIChjYykge1xuICAgICAgICBjYy5vbignZGF0YScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdkYXRhJykpO1xuICAgICAgICBjYy5vbigncGFydGlhbGRvbmUnLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAncGFydGlhbGRvbmUnKSk7XG4gICAgICAgIGNjLm9uKCdkb25lJywgdGhpcy50cmlnZ2VyLmJpbmQodGhpcywgJ2RvbmUnKSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9O1xuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG5cbiAgICBDYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgc2VpLCB1c2VyRGF0YSwgbmV3Q2FwdGlvblBhY2tldHM7IC8vIG9ubHkgZXhhbWluZSBTRUkgTkFMc1xuXG4gICAgICBpZiAoZXZlbnQubmFsVW5pdFR5cGUgIT09ICdzZWlfcmJzcCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBwYXJzZSB0aGUgc2VpXG5cblxuICAgICAgc2VpID0gY2FwdGlvblBhY2tldFBhcnNlci5wYXJzZVNlaShldmVudC5lc2NhcGVkUkJTUCk7IC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCB1c2VyX2RhdGFfcmVnaXN0ZXJlZF9pdHVfdF90MzVcblxuICAgICAgaWYgKHNlaS5wYXlsb2FkVHlwZSAhPT0gY2FwdGlvblBhY2tldFBhcnNlci5VU0VSX0RBVEFfUkVHSVNURVJFRF9JVFVfVF9UMzUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBwYXJzZSBvdXQgdGhlIHVzZXIgZGF0YSBwYXlsb2FkXG5cblxuICAgICAgdXNlckRhdGEgPSBjYXB0aW9uUGFja2V0UGFyc2VyLnBhcnNlVXNlckRhdGEoc2VpKTsgLy8gaWdub3JlIHVucmVjb2duaXplZCB1c2VyRGF0YVxuXG4gICAgICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gU29tZXRpbWVzLCB0aGUgc2FtZSBzZWdtZW50ICMgd2lsbCBiZSBkb3dubG9hZGVkIHR3aWNlLiBUbyBzdG9wIHRoZVxuICAgICAgLy8gY2FwdGlvbiBkYXRhIGZyb20gYmVpbmcgcHJvY2Vzc2VkIHR3aWNlLCB3ZSB0cmFjayB0aGUgbGF0ZXN0IGR0cyB3ZSd2ZVxuICAgICAgLy8gcmVjZWl2ZWQgYW5kIGlnbm9yZSBldmVyeXRoaW5nIHdpdGggYSBkdHMgYmVmb3JlIHRoYXQuIEhvd2V2ZXIsIHNpbmNlXG4gICAgICAvLyBkYXRhIGZvciBhIHNwZWNpZmljIGR0cyBjYW4gYmUgc3BsaXQgYWNyb3NzIHBhY2tldHMgb24gZWl0aGVyIHNpZGUgb2ZcbiAgICAgIC8vIGEgc2VnbWVudCBib3VuZGFyeSwgd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgKmRvbid0KiBpZ25vcmUgdGhlIHBhY2tldHNcbiAgICAgIC8vIGZyb20gdGhlICpuZXh0KiBzZWdtZW50IHRoYXQgaGF2ZSBkdHMgPT09IHRoaXMubGF0ZXN0RHRzXy4gQnkgY29uc3RhbnRseVxuICAgICAgLy8gdHJhY2tpbmcgdGhlIG51bWJlciBvZiBwYWNrZXRzIHJlY2VpdmVkIHdpdGggZHRzID09PSB0aGlzLmxhdGVzdER0c18sIHdlXG4gICAgICAvLyBrbm93IGhvdyBtYW55IHNob3VsZCBiZSBpZ25vcmVkIG9uY2Ugd2Ugc3RhcnQgcmVjZWl2aW5nIGR1cGxpY2F0ZXMuXG5cblxuICAgICAgaWYgKGV2ZW50LmR0cyA8IHRoaXMubGF0ZXN0RHRzXykge1xuICAgICAgICAvLyBXZSd2ZSBzdGFydGVkIGdldHRpbmcgb2xkZXIgZGF0YSwgc28gc2V0IHRoZSBmbGFnLlxuICAgICAgICB0aGlzLmlnbm9yZU5leHRFcXVhbER0c18gPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmR0cyA9PT0gdGhpcy5sYXRlc3REdHNfICYmIHRoaXMuaWdub3JlTmV4dEVxdWFsRHRzXykge1xuICAgICAgICB0aGlzLm51bVNhbWVEdHNfLS07XG5cbiAgICAgICAgaWYgKCF0aGlzLm51bVNhbWVEdHNfKSB7XG4gICAgICAgICAgLy8gV2UndmUgcmVjZWl2ZWQgdGhlIGxhc3QgZHVwbGljYXRlIHBhY2tldCwgdGltZSB0byBzdGFydCBwcm9jZXNzaW5nIGFnYWluXG4gICAgICAgICAgdGhpcy5pZ25vcmVOZXh0RXF1YWxEdHNfID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHBhcnNlIG91dCBDQyBkYXRhIHBhY2tldHMgYW5kIHNhdmUgdGhlbSBmb3IgbGF0ZXJcblxuXG4gICAgICBuZXdDYXB0aW9uUGFja2V0cyA9IGNhcHRpb25QYWNrZXRQYXJzZXIucGFyc2VDYXB0aW9uUGFja2V0cyhldmVudC5wdHMsIHVzZXJEYXRhKTtcbiAgICAgIHRoaXMuY2FwdGlvblBhY2tldHNfID0gdGhpcy5jYXB0aW9uUGFja2V0c18uY29uY2F0KG5ld0NhcHRpb25QYWNrZXRzKTtcblxuICAgICAgaWYgKHRoaXMubGF0ZXN0RHRzXyAhPT0gZXZlbnQuZHRzKSB7XG4gICAgICAgIHRoaXMubnVtU2FtZUR0c18gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm51bVNhbWVEdHNfKys7XG4gICAgICB0aGlzLmxhdGVzdER0c18gPSBldmVudC5kdHM7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLmZsdXNoQ0NTdHJlYW1zID0gZnVuY3Rpb24gKGZsdXNoVHlwZSkge1xuICAgICAgdGhpcy5jY1N0cmVhbXNfLmZvckVhY2goZnVuY3Rpb24gKGNjKSB7XG4gICAgICAgIHJldHVybiBmbHVzaFR5cGUgPT09ICdmbHVzaCcgPyBjYy5mbHVzaCgpIDogY2MucGFydGlhbEZsdXNoKCk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9O1xuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuZmx1c2hTdHJlYW0gPSBmdW5jdGlvbiAoZmx1c2hUeXBlKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgd2UgYWN0dWFsbHkgcGFyc2VkIGNhcHRpb25zIGJlZm9yZSBwcm9jZWVkaW5nXG4gICAgICBpZiAoIXRoaXMuY2FwdGlvblBhY2tldHNfLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmZsdXNoQ0NTdHJlYW1zKGZsdXNoVHlwZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gSW4gQ2hyb21lLCB0aGUgQXJyYXkjc29ydCBmdW5jdGlvbiBpcyBub3Qgc3RhYmxlIHNvIGFkZCBhXG4gICAgICAvLyBwcmVzb3J0SW5kZXggdGhhdCB3ZSBjYW4gdXNlIHRvIGVuc3VyZSB3ZSBnZXQgYSBzdGFibGUtc29ydFxuXG5cbiAgICAgIHRoaXMuY2FwdGlvblBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKGVsZW0sIGlkeCkge1xuICAgICAgICBlbGVtLnByZXNvcnRJbmRleCA9IGlkeDtcbiAgICAgIH0pOyAvLyBzb3J0IGNhcHRpb24gYnl0ZS1wYWlycyBiYXNlZCBvbiB0aGVpciBQVFMgdmFsdWVzXG5cbiAgICAgIHRoaXMuY2FwdGlvblBhY2tldHNfLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKGEucHRzID09PSBiLnB0cykge1xuICAgICAgICAgIHJldHVybiBhLnByZXNvcnRJbmRleCAtIGIucHJlc29ydEluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGEucHRzIC0gYi5wdHM7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2FwdGlvblBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgICBpZiAocGFja2V0LnR5cGUgPCAyKSB7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggcGFja2V0IHRvIHRoZSByaWdodCBDZWE2MDhTdHJlYW1cbiAgICAgICAgICB0aGlzLmRpc3BhdGNoQ2VhNjA4UGFja2V0KHBhY2tldCk7XG4gICAgICAgIH0gLy8gdGhpcyBpcyB3aGVyZSBhbiAnZWxzZScgd291bGQgZ28gZm9yIGEgZGlzcGF0Y2hpbmcgcGFja2V0c1xuICAgICAgICAvLyB0byBhIHRoZW9yZXRpY2FsIENlYTcwOFN0cmVhbSB0aGF0IGhhbmRsZXMgU0VSVklDRW4gZGF0YVxuXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHRoaXMuY2FwdGlvblBhY2tldHNfLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLmZsdXNoQ0NTdHJlYW1zKGZsdXNoVHlwZSk7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmx1c2hTdHJlYW0oJ2ZsdXNoJyk7XG4gICAgfTsgLy8gT25seSBjYWxsZWQgaWYgaGFuZGxpbmcgcGFydGlhbCBkYXRhXG5cblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLnBhcnRpYWxGbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmZsdXNoU3RyZWFtKCdwYXJ0aWFsRmx1c2gnKTtcbiAgICB9O1xuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmxhdGVzdER0c18gPSBudWxsO1xuICAgICAgdGhpcy5pZ25vcmVOZXh0RXF1YWxEdHNfID0gZmFsc2U7XG4gICAgICB0aGlzLm51bVNhbWVEdHNfID0gMDtcbiAgICAgIHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF8gPSBbbnVsbCwgbnVsbF07XG4gICAgICB0aGlzLmNjU3RyZWFtc18uZm9yRWFjaChmdW5jdGlvbiAoY2NTdHJlYW0pIHtcbiAgICAgICAgY2NTdHJlYW0ucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgIH07IC8vIEZyb20gdGhlIENFQS02MDggc3BlYzpcblxuICAgIC8qXG4gICAgICogV2hlbiBYRFMgc3ViLXBhY2tldHMgYXJlIGludGVybGVhdmVkIHdpdGggb3RoZXIgc2VydmljZXMsIHRoZSBlbmQgb2YgZWFjaCBzdWItcGFja2V0IHNoYWxsIGJlIGZvbGxvd2VkXG4gICAgICogYnkgYSBjb250cm9sIHBhaXIgdG8gY2hhbmdlIHRvIGEgZGlmZmVyZW50IHNlcnZpY2UuIFdoZW4gYW55IG9mIHRoZSBjb250cm9sIGNvZGVzIGZyb20gMHgxMCB0byAweDFGIGlzXG4gICAgICogdXNlZCB0byBiZWdpbiBhIGNvbnRyb2wgY29kZSBwYWlyLCBpdCBpbmRpY2F0ZXMgdGhlIHJldHVybiB0byBjYXB0aW9uaW5nIG9yIFRleHQgZGF0YS4gVGhlIGNvbnRyb2wgY29kZSBwYWlyXG4gICAgICogYW5kIHN1YnNlcXVlbnQgZGF0YSBzaG91bGQgdGhlbiBiZSBwcm9jZXNzZWQgYWNjb3JkaW5nIHRvIHRoZSBGQ0MgcnVsZXMuIEl0IG1heSBiZSBuZWNlc3NhcnkgZm9yIHRoZVxuICAgICAqIGxpbmUgMjEgZGF0YSBlbmNvZGVyIHRvIGF1dG9tYXRpY2FsbHkgaW5zZXJ0IGEgY29udHJvbCBjb2RlIHBhaXIgKGkuZS4gUkNMLCBSVTIsIFJVMywgUlU0LCBSREMsIG9yIFJURClcbiAgICAgKiB0byBzd2l0Y2ggdG8gY2FwdGlvbmluZyBvciBUZXh0LlxuICAgICovXG4gICAgLy8gV2l0aCB0aGF0IGluIG1pbmQsIHdlIGlnbm9yZSBhbnkgZGF0YSBiZXR3ZWVuIGFuIFhEUyBjb250cm9sIGNvZGUgYW5kIGFcbiAgICAvLyBzdWJzZXF1ZW50IGNsb3NlZC1jYXB0aW9uaW5nIGNvbnRyb2wgY29kZS5cblxuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuZGlzcGF0Y2hDZWE2MDhQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAvLyBOT1RFOiBwYWNrZXQudHlwZSBpcyB0aGUgQ0VBNjA4IGZpZWxkXG4gICAgICBpZiAodGhpcy5zZXRzVGV4dE9yWERTQWN0aXZlKHBhY2tldCkpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVDZWE2MDhDaGFubmVsX1twYWNrZXQudHlwZV0gPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHNDaGFubmVsMUFjdGl2ZShwYWNrZXQpKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF9bcGFja2V0LnR5cGVdID0gMDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXRzQ2hhbm5lbDJBY3RpdmUocGFja2V0KSkge1xuICAgICAgICB0aGlzLmFjdGl2ZUNlYTYwOENoYW5uZWxfW3BhY2tldC50eXBlXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFjdGl2ZUNlYTYwOENoYW5uZWxfW3BhY2tldC50eXBlXSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHJlY2VpdmVkIGFueXRoaW5nIHRvIHNldCB0aGUgYWN0aXZlIGNoYW5uZWwsIG9yIHRoZVxuICAgICAgICAvLyBwYWNrZXRzIGFyZSBUZXh0L1hEUyBkYXRhLCBkaXNjYXJkIHRoZSBkYXRhOyB3ZSBkb24ndCB3YW50IGp1bWJsZWRcbiAgICAgICAgLy8gY2FwdGlvbnNcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNjU3RyZWFtc19bKHBhY2tldC50eXBlIDw8IDEpICsgdGhpcy5hY3RpdmVDZWE2MDhDaGFubmVsX1twYWNrZXQudHlwZV1dLnB1c2gocGFja2V0KTtcbiAgICB9O1xuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuc2V0c0NoYW5uZWwxQWN0aXZlID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcmV0dXJuIChwYWNrZXQuY2NEYXRhICYgMHg3ODAwKSA9PT0gMHgxMDAwO1xuICAgIH07XG5cbiAgICBDYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5zZXRzQ2hhbm5lbDJBY3RpdmUgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICByZXR1cm4gKHBhY2tldC5jY0RhdGEgJiAweDc4MDApID09PSAweDE4MDA7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLnNldHNUZXh0T3JYRFNBY3RpdmUgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICByZXR1cm4gKHBhY2tldC5jY0RhdGEgJiAweDcxMDApID09PSAweDAxMDAgfHwgKHBhY2tldC5jY0RhdGEgJiAweDc4ZmUpID09PSAweDEwMmEgfHwgKHBhY2tldC5jY0RhdGEgJiAweDc4ZmUpID09PSAweDE4MmE7XG4gICAgfTsgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNlc3Npb24gdG8gQXBwbGljYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gVGhpcyBoYXNoIG1hcHMgbm9uLUFTQ0lJLCBzcGVjaWFsLCBhbmQgZXh0ZW5kZWQgY2hhcmFjdGVyIGNvZGVzIHRvIHRoZWlyXG4gICAgLy8gcHJvcGVyIFVuaWNvZGUgZXF1aXZhbGVudC4gVGhlIGZpcnN0IGtleXMgdGhhdCBhcmUgb25seSBhIHNpbmdsZSBieXRlXG4gICAgLy8gYXJlIHRoZSBub24tc3RhbmRhcmQgQVNDSUkgY2hhcmFjdGVycywgd2hpY2ggc2ltcGx5IG1hcCB0aGUgQ0VBNjA4IGJ5dGVcbiAgICAvLyB0byB0aGUgc3RhbmRhcmQgQVNDSUkvVW5pY29kZS4gVGhlIHR3by1ieXRlIGtleXMgdGhhdCBmb2xsb3cgYXJlIHRoZSBDRUE2MDhcbiAgICAvLyBjaGFyYWN0ZXIgY29kZXMsIGJ1dCBoYXZlIHRoZWlyIE1TQiBiaXRtYXNrZWQgd2l0aCAweDAzIHNvIHRoYXQgYSBsb29rdXBcbiAgICAvLyBjYW4gYmUgcGVyZm9ybWVkIHJlZ2FyZGxlc3Mgb2YgdGhlIGZpZWxkIGFuZCBkYXRhIGNoYW5uZWwgb24gd2hpY2ggdGhlXG4gICAgLy8gY2hhcmFjdGVyIGNvZGUgd2FzIHJlY2VpdmVkLlxuXG5cbiAgICB2YXIgQ0hBUkFDVEVSX1RSQU5TTEFUSU9OID0ge1xuICAgICAgMHgyYTogMHhlMSxcbiAgICAgIC8vIMOhXG4gICAgICAweDVjOiAweGU5LFxuICAgICAgLy8gw6lcbiAgICAgIDB4NWU6IDB4ZWQsXG4gICAgICAvLyDDrVxuICAgICAgMHg1ZjogMHhmMyxcbiAgICAgIC8vIMOzXG4gICAgICAweDYwOiAweGZhLFxuICAgICAgLy8gw7pcbiAgICAgIDB4N2I6IDB4ZTcsXG4gICAgICAvLyDDp1xuICAgICAgMHg3YzogMHhmNyxcbiAgICAgIC8vIMO3XG4gICAgICAweDdkOiAweGQxLFxuICAgICAgLy8gw5FcbiAgICAgIDB4N2U6IDB4ZjEsXG4gICAgICAvLyDDsVxuICAgICAgMHg3ZjogMHgyNTg4LFxuICAgICAgLy8g4paIXG4gICAgICAweDAxMzA6IDB4YWUsXG4gICAgICAvLyDCrlxuICAgICAgMHgwMTMxOiAweGIwLFxuICAgICAgLy8gwrBcbiAgICAgIDB4MDEzMjogMHhiZCxcbiAgICAgIC8vIMK9XG4gICAgICAweDAxMzM6IDB4YmYsXG4gICAgICAvLyDCv1xuICAgICAgMHgwMTM0OiAweDIxMjIsXG4gICAgICAvLyDihKJcbiAgICAgIDB4MDEzNTogMHhhMixcbiAgICAgIC8vIMKiXG4gICAgICAweDAxMzY6IDB4YTMsXG4gICAgICAvLyDCo1xuICAgICAgMHgwMTM3OiAweDI2NmEsXG4gICAgICAvLyDimapcbiAgICAgIDB4MDEzODogMHhlMCxcbiAgICAgIC8vIMOgXG4gICAgICAweDAxMzk6IDB4YTAsXG4gICAgICAvL1xuICAgICAgMHgwMTNhOiAweGU4LFxuICAgICAgLy8gw6hcbiAgICAgIDB4MDEzYjogMHhlMixcbiAgICAgIC8vIMOiXG4gICAgICAweDAxM2M6IDB4ZWEsXG4gICAgICAvLyDDqlxuICAgICAgMHgwMTNkOiAweGVlLFxuICAgICAgLy8gw65cbiAgICAgIDB4MDEzZTogMHhmNCxcbiAgICAgIC8vIMO0XG4gICAgICAweDAxM2Y6IDB4ZmIsXG4gICAgICAvLyDDu1xuICAgICAgMHgwMjIwOiAweGMxLFxuICAgICAgLy8gw4FcbiAgICAgIDB4MDIyMTogMHhjOSxcbiAgICAgIC8vIMOJXG4gICAgICAweDAyMjI6IDB4ZDMsXG4gICAgICAvLyDDk1xuICAgICAgMHgwMjIzOiAweGRhLFxuICAgICAgLy8gw5pcbiAgICAgIDB4MDIyNDogMHhkYyxcbiAgICAgIC8vIMOcXG4gICAgICAweDAyMjU6IDB4ZmMsXG4gICAgICAvLyDDvFxuICAgICAgMHgwMjI2OiAweDIwMTgsXG4gICAgICAvLyDigJhcbiAgICAgIDB4MDIyNzogMHhhMSxcbiAgICAgIC8vIMKhXG4gICAgICAweDAyMjg6IDB4MmEsXG4gICAgICAvLyAqXG4gICAgICAweDAyMjk6IDB4MjcsXG4gICAgICAvLyAnXG4gICAgICAweDAyMmE6IDB4MjAxNCxcbiAgICAgIC8vIOKAlFxuICAgICAgMHgwMjJiOiAweGE5LFxuICAgICAgLy8gwqlcbiAgICAgIDB4MDIyYzogMHgyMTIwLFxuICAgICAgLy8g4oSgXG4gICAgICAweDAyMmQ6IDB4MjAyMixcbiAgICAgIC8vIOKAolxuICAgICAgMHgwMjJlOiAweDIwMWMsXG4gICAgICAvLyDigJxcbiAgICAgIDB4MDIyZjogMHgyMDFkLFxuICAgICAgLy8g4oCdXG4gICAgICAweDAyMzA6IDB4YzAsXG4gICAgICAvLyDDgFxuICAgICAgMHgwMjMxOiAweGMyLFxuICAgICAgLy8gw4JcbiAgICAgIDB4MDIzMjogMHhjNyxcbiAgICAgIC8vIMOHXG4gICAgICAweDAyMzM6IDB4YzgsXG4gICAgICAvLyDDiFxuICAgICAgMHgwMjM0OiAweGNhLFxuICAgICAgLy8gw4pcbiAgICAgIDB4MDIzNTogMHhjYixcbiAgICAgIC8vIMOLXG4gICAgICAweDAyMzY6IDB4ZWIsXG4gICAgICAvLyDDq1xuICAgICAgMHgwMjM3OiAweGNlLFxuICAgICAgLy8gw45cbiAgICAgIDB4MDIzODogMHhjZixcbiAgICAgIC8vIMOPXG4gICAgICAweDAyMzk6IDB4ZWYsXG4gICAgICAvLyDDr1xuICAgICAgMHgwMjNhOiAweGQ0LFxuICAgICAgLy8gw5RcbiAgICAgIDB4MDIzYjogMHhkOSxcbiAgICAgIC8vIMOZXG4gICAgICAweDAyM2M6IDB4ZjksXG4gICAgICAvLyDDuVxuICAgICAgMHgwMjNkOiAweGRiLFxuICAgICAgLy8gw5tcbiAgICAgIDB4MDIzZTogMHhhYixcbiAgICAgIC8vIMKrXG4gICAgICAweDAyM2Y6IDB4YmIsXG4gICAgICAvLyDCu1xuICAgICAgMHgwMzIwOiAweGMzLFxuICAgICAgLy8gw4NcbiAgICAgIDB4MDMyMTogMHhlMyxcbiAgICAgIC8vIMOjXG4gICAgICAweDAzMjI6IDB4Y2QsXG4gICAgICAvLyDDjVxuICAgICAgMHgwMzIzOiAweGNjLFxuICAgICAgLy8gw4xcbiAgICAgIDB4MDMyNDogMHhlYyxcbiAgICAgIC8vIMOsXG4gICAgICAweDAzMjU6IDB4ZDIsXG4gICAgICAvLyDDklxuICAgICAgMHgwMzI2OiAweGYyLFxuICAgICAgLy8gw7JcbiAgICAgIDB4MDMyNzogMHhkNSxcbiAgICAgIC8vIMOVXG4gICAgICAweDAzMjg6IDB4ZjUsXG4gICAgICAvLyDDtVxuICAgICAgMHgwMzI5OiAweDdiLFxuICAgICAgLy8ge1xuICAgICAgMHgwMzJhOiAweDdkLFxuICAgICAgLy8gfVxuICAgICAgMHgwMzJiOiAweDVjLFxuICAgICAgLy8gXFxcbiAgICAgIDB4MDMyYzogMHg1ZSxcbiAgICAgIC8vIF5cbiAgICAgIDB4MDMyZDogMHg1ZixcbiAgICAgIC8vIF9cbiAgICAgIDB4MDMyZTogMHg3YyxcbiAgICAgIC8vIHxcbiAgICAgIDB4MDMyZjogMHg3ZSxcbiAgICAgIC8vIH5cbiAgICAgIDB4MDMzMDogMHhjNCxcbiAgICAgIC8vIMOEXG4gICAgICAweDAzMzE6IDB4ZTQsXG4gICAgICAvLyDDpFxuICAgICAgMHgwMzMyOiAweGQ2LFxuICAgICAgLy8gw5ZcbiAgICAgIDB4MDMzMzogMHhmNixcbiAgICAgIC8vIMO2XG4gICAgICAweDAzMzQ6IDB4ZGYsXG4gICAgICAvLyDDn1xuICAgICAgMHgwMzM1OiAweGE1LFxuICAgICAgLy8gwqVcbiAgICAgIDB4MDMzNjogMHhhNCxcbiAgICAgIC8vIMKkXG4gICAgICAweDAzMzc6IDB4MjUwMixcbiAgICAgIC8vIOKUglxuICAgICAgMHgwMzM4OiAweGM1LFxuICAgICAgLy8gw4VcbiAgICAgIDB4MDMzOTogMHhlNSxcbiAgICAgIC8vIMOlXG4gICAgICAweDAzM2E6IDB4ZDgsXG4gICAgICAvLyDDmFxuICAgICAgMHgwMzNiOiAweGY4LFxuICAgICAgLy8gw7hcbiAgICAgIDB4MDMzYzogMHgyNTBjLFxuICAgICAgLy8g4pSMXG4gICAgICAweDAzM2Q6IDB4MjUxMCxcbiAgICAgIC8vIOKUkFxuICAgICAgMHgwMzNlOiAweDI1MTQsXG4gICAgICAvLyDilJRcbiAgICAgIDB4MDMzZjogMHgyNTE4IC8vIOKUmFxuXG4gICAgfTtcblxuICAgIHZhciBnZXRDaGFyRnJvbUNvZGUgPSBmdW5jdGlvbiBnZXRDaGFyRnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBjb2RlID0gQ0hBUkFDVEVSX1RSQU5TTEFUSU9OW2NvZGVdIHx8IGNvZGU7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICB9OyAvLyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgcm93IGluIGEgQ0VBLTYwOCBkaXNwbGF5IGJ1ZmZlclxuXG5cbiAgICB2YXIgQk9UVE9NX1JPVyA9IDE0OyAvLyBUaGlzIGFycmF5IGlzIHVzZWQgZm9yIG1hcHBpbmcgUEFDcyAtPiByb3cgIywgc2luY2UgdGhlcmUncyBubyB3YXkgb2ZcbiAgICAvLyBnZXR0aW5nIGl0IHRocm91Z2ggYml0IGxvZ2ljLlxuXG4gICAgdmFyIFJPV1MgPSBbMHgxMTAwLCAweDExMjAsIDB4MTIwMCwgMHgxMjIwLCAweDE1MDAsIDB4MTUyMCwgMHgxNjAwLCAweDE2MjAsIDB4MTcwMCwgMHgxNzIwLCAweDEwMDAsIDB4MTMwMCwgMHgxMzIwLCAweDE0MDAsIDB4MTQyMF07IC8vIENFQS02MDggY2FwdGlvbnMgYXJlIHJlbmRlcmVkIG9udG8gYSAzNHgxNSBtYXRyaXggb2YgY2hhcmFjdGVyXG4gICAgLy8gY2VsbHMuIFRoZSBcImJvdHRvbVwiIHJvdyBpcyB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBvdXRlciBhcnJheS5cblxuICAgIHZhciBjcmVhdGVEaXNwbGF5QnVmZmVyID0gZnVuY3Rpb24gY3JlYXRlRGlzcGxheUJ1ZmZlcigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICBpID0gQk9UVE9NX1JPVyArIDE7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB2YXIgQ2VhNjA4U3RyZWFtID0gZnVuY3Rpb24gQ2VhNjA4U3RyZWFtKGZpZWxkLCBkYXRhQ2hhbm5lbCkge1xuICAgICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmZpZWxkXyA9IGZpZWxkIHx8IDA7XG4gICAgICB0aGlzLmRhdGFDaGFubmVsXyA9IGRhdGFDaGFubmVsIHx8IDA7XG4gICAgICB0aGlzLm5hbWVfID0gJ0NDJyArICgodGhpcy5maWVsZF8gPDwgMSB8IHRoaXMuZGF0YUNoYW5uZWxfKSArIDEpO1xuICAgICAgdGhpcy5zZXRDb25zdGFudHMoKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgICB2YXIgZGF0YSwgc3dhcCwgY2hhcjAsIGNoYXIxLCB0ZXh0OyAvLyByZW1vdmUgdGhlIHBhcml0eSBiaXRzXG5cbiAgICAgICAgZGF0YSA9IHBhY2tldC5jY0RhdGEgJiAweDdmN2Y7IC8vIGlnbm9yZSBkdXBsaWNhdGUgY29udHJvbCBjb2RlczsgdGhlIHNwZWMgZGVtYW5kcyB0aGV5J3JlIHNlbnQgdHdpY2VcblxuICAgICAgICBpZiAoZGF0YSA9PT0gdGhpcy5sYXN0Q29udHJvbENvZGVfKSB7XG4gICAgICAgICAgdGhpcy5sYXN0Q29udHJvbENvZGVfID0gbnVsbDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgY29udHJvbCBjb2Rlc1xuXG5cbiAgICAgICAgaWYgKChkYXRhICYgMHhmMDAwKSA9PT0gMHgxMDAwKSB7XG4gICAgICAgICAgdGhpcy5sYXN0Q29udHJvbENvZGVfID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhICE9PSB0aGlzLlBBRERJTkdfKSB7XG4gICAgICAgICAgdGhpcy5sYXN0Q29udHJvbENvZGVfID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXIwID0gZGF0YSA+Pj4gODtcbiAgICAgICAgY2hhcjEgPSBkYXRhICYgMHhmZjtcblxuICAgICAgICBpZiAoZGF0YSA9PT0gdGhpcy5QQURESU5HXykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLlJFU1VNRV9DQVBUSU9OX0xPQURJTkdfKSB7XG4gICAgICAgICAgdGhpcy5tb2RlXyA9ICdwb3BPbic7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5FTkRfT0ZfQ0FQVElPTl8pIHtcbiAgICAgICAgICAvLyBJZiBhbiBFT0MgaXMgcmVjZWl2ZWQgd2hpbGUgaW4gcGFpbnQtb24gbW9kZSwgdGhlIGRpc3BsYXllZCBjYXB0aW9uXG4gICAgICAgICAgLy8gdGV4dCBzaG91bGQgYmUgc3dhcHBlZCB0byBub24tZGlzcGxheWVkIG1lbW9yeSBhcyBpZiBpdCB3YXMgYSBwb3Atb25cbiAgICAgICAgICAvLyBjYXB0aW9uLiBCZWNhdXNlIG9mIHRoYXQsIHdlIHNob3VsZCBleHBsaWNpdGx5IHN3aXRjaCBiYWNrIHRvIHBvcC1vblxuICAgICAgICAgIC8vIG1vZGVcbiAgICAgICAgICB0aGlzLm1vZGVfID0gJ3BvcE9uJztcbiAgICAgICAgICB0aGlzLmNsZWFyRm9ybWF0dGluZyhwYWNrZXQucHRzKTsgLy8gaWYgYSBjYXB0aW9uIHdhcyBiZWluZyBkaXNwbGF5ZWQsIGl0J3MgZ29uZSBub3dcblxuICAgICAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocGFja2V0LnB0cyk7IC8vIGZsaXAgbWVtb3J5XG5cbiAgICAgICAgICBzd2FwID0gdGhpcy5kaXNwbGF5ZWRfO1xuICAgICAgICAgIHRoaXMuZGlzcGxheWVkXyA9IHRoaXMubm9uRGlzcGxheWVkXztcbiAgICAgICAgICB0aGlzLm5vbkRpc3BsYXllZF8gPSBzd2FwOyAvLyBzdGFydCBtZWFzdXJpbmcgdGhlIHRpbWUgdG8gZGlzcGxheSB0aGUgY2FwdGlvblxuXG4gICAgICAgICAgdGhpcy5zdGFydFB0c18gPSBwYWNrZXQucHRzO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuUk9MTF9VUF8yX1JPV1NfKSB7XG4gICAgICAgICAgdGhpcy5yb2xsVXBSb3dzXyA9IDI7XG4gICAgICAgICAgdGhpcy5zZXRSb2xsVXAocGFja2V0LnB0cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5ST0xMX1VQXzNfUk9XU18pIHtcbiAgICAgICAgICB0aGlzLnJvbGxVcFJvd3NfID0gMztcbiAgICAgICAgICB0aGlzLnNldFJvbGxVcChwYWNrZXQucHRzKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLlJPTExfVVBfNF9ST1dTXykge1xuICAgICAgICAgIHRoaXMucm9sbFVwUm93c18gPSA0O1xuICAgICAgICAgIHRoaXMuc2V0Um9sbFVwKHBhY2tldC5wdHMpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuQ0FSUklBR0VfUkVUVVJOXykge1xuICAgICAgICAgIHRoaXMuY2xlYXJGb3JtYXR0aW5nKHBhY2tldC5wdHMpO1xuICAgICAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocGFja2V0LnB0cyk7XG4gICAgICAgICAgdGhpcy5zaGlmdFJvd3NVcF8oKTtcbiAgICAgICAgICB0aGlzLnN0YXJ0UHRzXyA9IHBhY2tldC5wdHM7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5CQUNLU1BBQ0VfKSB7XG4gICAgICAgICAgaWYgKHRoaXMubW9kZV8gPT09ICdwb3BPbicpIHtcbiAgICAgICAgICAgIHRoaXMubm9uRGlzcGxheWVkX1t0aGlzLnJvd19dID0gdGhpcy5ub25EaXNwbGF5ZWRfW3RoaXMucm93X10uc2xpY2UoMCwgLTEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5FUkFTRV9ESVNQTEFZRURfTUVNT1JZXykge1xuICAgICAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocGFja2V0LnB0cyk7XG4gICAgICAgICAgdGhpcy5kaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuRVJBU0VfTk9OX0RJU1BMQVlFRF9NRU1PUllfKSB7XG4gICAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuUkVTVU1FX0RJUkVDVF9DQVBUSU9OSU5HXykge1xuICAgICAgICAgIGlmICh0aGlzLm1vZGVfICE9PSAncGFpbnRPbicpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBwcm9wZXIgY2FwdGlvbiBwb3NpdGlvbmluZyBpc1xuICAgICAgICAgICAgLy8gaW1wbGVtZW50ZWRcbiAgICAgICAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocGFja2V0LnB0cyk7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXllZF8gPSBjcmVhdGVEaXNwbGF5QnVmZmVyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5tb2RlXyA9ICdwYWludE9uJztcbiAgICAgICAgICB0aGlzLnN0YXJ0UHRzXyA9IHBhY2tldC5wdHM7IC8vIEFwcGVuZCBzcGVjaWFsIGNoYXJhY3RlcnMgdG8gY2FwdGlvbiB0ZXh0XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NwZWNpYWxDaGFyYWN0ZXIoY2hhcjAsIGNoYXIxKSkge1xuICAgICAgICAgIC8vIEJpdG1hc2sgY2hhcjAgc28gdGhhdCB3ZSBjYW4gYXBwbHkgY2hhcmFjdGVyIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2YgZmllbGQgYW5kIGRhdGEgY2hhbm5lbC5cbiAgICAgICAgICAvLyBUaGVuIGJ5dGUtc2hpZnQgdG8gdGhlIGxlZnQgYW5kIE9SIHdpdGggY2hhcjEgc28gd2UgY2FuIHBhc3MgdGhlXG4gICAgICAgICAgLy8gZW50aXJlIGNoYXJhY3RlciBjb2RlIHRvIGBnZXRDaGFyRnJvbUNvZGVgLlxuICAgICAgICAgIGNoYXIwID0gKGNoYXIwICYgMHgwMykgPDwgODtcbiAgICAgICAgICB0ZXh0ID0gZ2V0Q2hhckZyb21Db2RlKGNoYXIwIHwgY2hhcjEpO1xuICAgICAgICAgIHRoaXNbdGhpcy5tb2RlX10ocGFja2V0LnB0cywgdGV4dCk7XG4gICAgICAgICAgdGhpcy5jb2x1bW5fKys7IC8vIEFwcGVuZCBleHRlbmRlZCBjaGFyYWN0ZXJzIHRvIGNhcHRpb24gdGV4dFxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHRDaGFyYWN0ZXIoY2hhcjAsIGNoYXIxKSkge1xuICAgICAgICAgIC8vIEV4dGVuZGVkIGNoYXJhY3RlcnMgYWx3YXlzIGZvbGxvdyB0aGVpciBcIm5vbi1leHRlbmRlZFwiIGVxdWl2YWxlbnRzLlxuICAgICAgICAgIC8vIElFIGlmIGEgXCLDqFwiIGlzIGRlc2lyZWQsIHlvdSdsbCBhbHdheXMgcmVjZWl2ZSBcImXDqFwiOyBub24tY29tcGxpYW50XG4gICAgICAgICAgLy8gZGVjb2RlcnMgYXJlIHN1cHBvc2VkIHRvIGRyb3AgdGhlIFwiw6hcIiwgd2hpbGUgY29tcGxpYW50IGRlY29kZXJzXG4gICAgICAgICAgLy8gYmFja3NwYWNlIHRoZSBcImVcIiBhbmQgaW5zZXJ0IFwiw6hcIi5cbiAgICAgICAgICAvLyBEZWxldGUgdGhlIHByZXZpb3VzIGNoYXJhY3RlclxuICAgICAgICAgIGlmICh0aGlzLm1vZGVfID09PSAncG9wT24nKSB7XG4gICAgICAgICAgICB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IHRoaXMubm9uRGlzcGxheWVkX1t0aGlzLnJvd19dLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10gPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgfSAvLyBCaXRtYXNrIGNoYXIwIHNvIHRoYXQgd2UgY2FuIGFwcGx5IGNoYXJhY3RlciB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIGZpZWxkIGFuZCBkYXRhIGNoYW5uZWwuXG4gICAgICAgICAgLy8gVGhlbiBieXRlLXNoaWZ0IHRvIHRoZSBsZWZ0IGFuZCBPUiB3aXRoIGNoYXIxIHNvIHdlIGNhbiBwYXNzIHRoZVxuICAgICAgICAgIC8vIGVudGlyZSBjaGFyYWN0ZXIgY29kZSB0byBgZ2V0Q2hhckZyb21Db2RlYC5cblxuXG4gICAgICAgICAgY2hhcjAgPSAoY2hhcjAgJiAweDAzKSA8PCA4O1xuICAgICAgICAgIHRleHQgPSBnZXRDaGFyRnJvbUNvZGUoY2hhcjAgfCBjaGFyMSk7XG4gICAgICAgICAgdGhpc1t0aGlzLm1vZGVfXShwYWNrZXQucHRzLCB0ZXh0KTtcbiAgICAgICAgICB0aGlzLmNvbHVtbl8rKzsgLy8gUHJvY2VzcyBtaWQtcm93IGNvZGVzXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc01pZFJvd0NvZGUoY2hhcjAsIGNoYXIxKSkge1xuICAgICAgICAgIC8vIEF0dHJpYnV0ZXMgYXJlIG5vdCBhZGRpdGl2ZSwgc28gY2xlYXIgYWxsIGZvcm1hdHRpbmdcbiAgICAgICAgICB0aGlzLmNsZWFyRm9ybWF0dGluZyhwYWNrZXQucHRzKTsgLy8gQWNjb3JkaW5nIHRvIHRoZSBzdGFuZGFyZCwgbWlkLXJvdyBjb2Rlc1xuICAgICAgICAgIC8vIHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHNwYWNlcywgc28gYWRkIG9uZSBub3dcblxuICAgICAgICAgIHRoaXNbdGhpcy5tb2RlX10ocGFja2V0LnB0cywgJyAnKTtcbiAgICAgICAgICB0aGlzLmNvbHVtbl8rKztcblxuICAgICAgICAgIGlmICgoY2hhcjEgJiAweGUpID09PSAweGUpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRm9ybWF0dGluZyhwYWNrZXQucHRzLCBbJ2knXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKChjaGFyMSAmIDB4MSkgPT09IDB4MSkge1xuICAgICAgICAgICAgdGhpcy5hZGRGb3JtYXR0aW5nKHBhY2tldC5wdHMsIFsndSddKTtcbiAgICAgICAgICB9IC8vIERldGVjdCBvZmZzZXQgY29udHJvbCBjb2RlcyBhbmQgYWRqdXN0IGN1cnNvclxuXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc09mZnNldENvbnRyb2xDb2RlKGNoYXIwLCBjaGFyMSkpIHtcbiAgICAgICAgICAvLyBDdXJzb3IgcG9zaXRpb24gaXMgc2V0IGJ5IGluZGVudCBQQUMgKHNlZSBiZWxvdykgaW4gNC1jb2x1bW5cbiAgICAgICAgICAvLyBpbmNyZW1lbnRzLCB3aXRoIGFuIGFkZGl0aW9uYWwgb2Zmc2V0IGNvZGUgb2YgMS0zIHRvIHJlYWNoIGFueVxuICAgICAgICAgIC8vIG9mIHRoZSAzMiBjb2x1bW5zIHNwZWNpZmllZCBieSBDRUEtNjA4LiBTbyBhbGwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgIC8vIGhlcmUgaXMgaW5jcmVtZW50IHRoZSBjb2x1bW4gY3Vyc29yIGJ5IHRoZSBnaXZlbiBvZmZzZXQuXG4gICAgICAgICAgdGhpcy5jb2x1bW5fICs9IGNoYXIxICYgMHgwMzsgLy8gRGV0ZWN0IFBBQ3MgKFByZWFtYmxlIEFkZHJlc3MgQ29kZXMpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1BBQyhjaGFyMCwgY2hhcjEpKSB7XG4gICAgICAgICAgLy8gVGhlcmUncyBubyBsb2dpYyBmb3IgUEFDIC0+IHJvdyBtYXBwaW5nLCBzbyB3ZSBoYXZlIHRvIGp1c3RcbiAgICAgICAgICAvLyBmaW5kIHRoZSByb3cgY29kZSBpbiBhbiBhcnJheSBhbmQgdXNlIGl0cyBpbmRleCA6KFxuICAgICAgICAgIHZhciByb3cgPSBST1dTLmluZGV4T2YoZGF0YSAmIDB4MWYyMCk7IC8vIENvbmZpZ3VyZSB0aGUgY2FwdGlvbiB3aW5kb3cgaWYgd2UncmUgaW4gcm9sbC11cCBtb2RlXG5cbiAgICAgICAgICBpZiAodGhpcy5tb2RlXyA9PT0gJ3JvbGxVcCcpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaW1wbGllcyB0aGF0IHRoZSBiYXNlIHJvdyBpcyBpbmNvcnJlY3RseSBzZXQuXG4gICAgICAgICAgICAvLyBBcyBwZXIgdGhlIHJlY29tbWVuZGF0aW9uIGluIENFQS02MDgoQmFzZSBSb3cgSW1wbGVtZW50YXRpb24pLCBkZWZlciB0byB0aGUgbnVtYmVyXG4gICAgICAgICAgICAvLyBvZiByb2xsLXVwIHJvd3Mgc2V0LlxuICAgICAgICAgICAgaWYgKHJvdyAtIHRoaXMucm9sbFVwUm93c18gKyAxIDwgMCkge1xuICAgICAgICAgICAgICByb3cgPSB0aGlzLnJvbGxVcFJvd3NfIC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRSb2xsVXAocGFja2V0LnB0cywgcm93KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocm93ICE9PSB0aGlzLnJvd18pIHtcbiAgICAgICAgICAgIC8vIGZvcm1hdHRpbmcgaXMgb25seSBwZXJzaXN0ZW50IGZvciBjdXJyZW50IHJvd1xuICAgICAgICAgICAgdGhpcy5jbGVhckZvcm1hdHRpbmcocGFja2V0LnB0cyk7XG4gICAgICAgICAgICB0aGlzLnJvd18gPSByb3c7XG4gICAgICAgICAgfSAvLyBBbGwgUEFDcyBjYW4gYXBwbHkgdW5kZXJsaW5lLCBzbyBkZXRlY3QgYW5kIGFwcGx5XG4gICAgICAgICAgLy8gKEFsbCBvZGQtbnVtYmVyZWQgc2Vjb25kIGJ5dGVzIHNldCB1bmRlcmxpbmUpXG5cblxuICAgICAgICAgIGlmIChjaGFyMSAmIDB4MSAmJiB0aGlzLmZvcm1hdHRpbmdfLmluZGV4T2YoJ3UnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRm9ybWF0dGluZyhwYWNrZXQucHRzLCBbJ3UnXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKChkYXRhICYgMHgxMCkgPT09IDB4MTApIHtcbiAgICAgICAgICAgIC8vIFdlJ3ZlIGdvdCBhbiBpbmRlbnQgbGV2ZWwgY29kZS4gRWFjaCBzdWNjZXNzaXZlIGV2ZW4gbnVtYmVyXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnRzIHRoZSBjb2x1bW4gY3Vyc29yIGJ5IDQsIHNvIHdlIGNhbiBnZXQgdGhlIGRlc2lyZWRcbiAgICAgICAgICAgIC8vIGNvbHVtbiBwb3NpdGlvbiBieSBiaXQtc2hpZnRpbmcgdG8gdGhlIHJpZ2h0ICh0byBnZXQgbi8yKVxuICAgICAgICAgICAgLy8gYW5kIG11bHRpcGx5aW5nIGJ5IDQuXG4gICAgICAgICAgICB0aGlzLmNvbHVtbl8gPSAoKGRhdGEgJiAweGUpID4+IDEpICogNDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5pc0NvbG9yUEFDKGNoYXIxKSkge1xuICAgICAgICAgICAgLy8gaXQncyBhIGNvbG9yIGNvZGUsIHRob3VnaCB3ZSBvbmx5IHN1cHBvcnQgd2hpdGUsIHdoaWNoXG4gICAgICAgICAgICAvLyBjYW4gYmUgZWl0aGVyIG5vcm1hbCBvciBpdGFsaWNpemVkLiB3aGl0ZSBpdGFsaWNzIGNhbiBiZVxuICAgICAgICAgICAgLy8gZWl0aGVyIDB4NGUgb3IgMHg2ZSBkZXBlbmRpbmcgb24gdGhlIHJvdywgc28gd2UganVzdFxuICAgICAgICAgICAgLy8gYml0d2lzZS1hbmQgd2l0aCAweGUgdG8gc2VlIGlmIGl0YWxpY3Mgc2hvdWxkIGJlIHR1cm5lZCBvblxuICAgICAgICAgICAgaWYgKChjaGFyMSAmIDB4ZSkgPT09IDB4ZSkge1xuICAgICAgICAgICAgICB0aGlzLmFkZEZvcm1hdHRpbmcocGFja2V0LnB0cywgWydpJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gV2UgaGF2ZSBhIG5vcm1hbCBjaGFyYWN0ZXIgaW4gY2hhcjAsIGFuZCBwb3NzaWJseSBvbmUgaW4gY2hhcjFcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOb3JtYWxDaGFyKGNoYXIwKSkge1xuICAgICAgICAgIGlmIChjaGFyMSA9PT0gMHgwMCkge1xuICAgICAgICAgICAgY2hhcjEgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRleHQgPSBnZXRDaGFyRnJvbUNvZGUoY2hhcjApO1xuICAgICAgICAgIHRleHQgKz0gZ2V0Q2hhckZyb21Db2RlKGNoYXIxKTtcbiAgICAgICAgICB0aGlzW3RoaXMubW9kZV9dKHBhY2tldC5wdHMsIHRleHQpO1xuICAgICAgICAgIHRoaXMuY29sdW1uXyArPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgfSAvLyBmaW5pc2ggZGF0YSBwcm9jZXNzaW5nXG5cbiAgICAgIH07XG4gICAgfTtcblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7IC8vIFRyaWdnZXIgYSBjdWUgcG9pbnQgdGhhdCBjYXB0dXJlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGVcbiAgICAvLyBkaXNwbGF5IGJ1ZmZlclxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5mbHVzaERpc3BsYXllZCA9IGZ1bmN0aW9uIChwdHMpIHtcbiAgICAgIHZhciBjb250ZW50ID0gdGhpcy5kaXNwbGF5ZWRfIC8vIHJlbW92ZSBzcGFjZXMgZnJvbSB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc3RyaW5nXG4gICAgICAubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gcm93LnRyaW0oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIE9yZGluYXJpbHksIHRoaXMgc2hvdWxkbid0IGhhcHBlbi4gSG93ZXZlciwgY2FwdGlvblxuICAgICAgICAgIC8vIHBhcnNpbmcgZXJyb3JzIHNob3VsZCBub3QgdGhyb3cgZXhjZXB0aW9ucyBhbmRcbiAgICAgICAgICAvLyBicmVhayBwbGF5YmFjay5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NraXBwaW5nIG1hbGZvcm1lZCBjYXB0aW9uLicpO1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfSkgLy8gY29tYmluZSBhbGwgdGV4dCByb3dzIHRvIGRpc3BsYXkgaW4gb25lIGN1ZVxuICAgICAgLmpvaW4oJ1xcbicpIC8vIGFuZCByZW1vdmUgYmxhbmsgcm93cyBmcm9tIHRoZSBzdGFydCBhbmQgZW5kLCBidXQgbm90IHRoZSBtaWRkbGVcbiAgICAgIC5yZXBsYWNlKC9eXFxuK3xcXG4rJC9nLCAnJyk7XG5cbiAgICAgIGlmIChjb250ZW50Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgc3RhcnRQdHM6IHRoaXMuc3RhcnRQdHNfLFxuICAgICAgICAgIGVuZFB0czogcHRzLFxuICAgICAgICAgIHRleHQ6IGNvbnRlbnQsXG4gICAgICAgICAgc3RyZWFtOiB0aGlzLm5hbWVfXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogWmVybyBvdXQgdGhlIGRhdGEsIHVzZWQgZm9yIHN0YXJ0dXAgYW5kIG9uIHNlZWtcbiAgICAgKi9cblxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubW9kZV8gPSAncG9wT24nOyAvLyBXaGVuIGluIHJvbGwtdXAgbW9kZSwgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHJvdyB0aGF0IHdpbGxcbiAgICAgIC8vIGFjdHVhbGx5IGRpc3BsYXkgY2FwdGlvbnMuIElmIGEgY2FwdGlvbiBpcyBzaGlmdGVkIHRvIGEgcm93XG4gICAgICAvLyB3aXRoIGEgbG93ZXIgaW5kZXggdGhhbiB0aGlzLCBpdCBpcyBjbGVhcmVkIGZyb20gdGhlIGRpc3BsYXlcbiAgICAgIC8vIGJ1ZmZlclxuXG4gICAgICB0aGlzLnRvcFJvd18gPSAwO1xuICAgICAgdGhpcy5zdGFydFB0c18gPSAwO1xuICAgICAgdGhpcy5kaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICAgICAgdGhpcy5sYXN0Q29udHJvbENvZGVfID0gbnVsbDsgLy8gVHJhY2sgcm93IGFuZCBjb2x1bW4gZm9yIHByb3BlciBsaW5lLWJyZWFraW5nIGFuZCBzcGFjaW5nXG5cbiAgICAgIHRoaXMuY29sdW1uXyA9IDA7XG4gICAgICB0aGlzLnJvd18gPSBCT1RUT01fUk9XO1xuICAgICAgdGhpcy5yb2xsVXBSb3dzXyA9IDI7IC8vIFRoaXMgdmFyaWFibGUgaG9sZHMgY3VycmVudGx5LWFwcGxpZWQgZm9ybWF0dGluZ1xuXG4gICAgICB0aGlzLmZvcm1hdHRpbmdfID0gW107XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGNvbnRyb2wgY29kZSBhbmQgcmVsYXRlZCBjb25zdGFudHMgZm9yIHRoaXMgaW5zdGFuY2VcbiAgICAgKi9cblxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5zZXRDb25zdGFudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgaGF2ZSB0aGVzZSB1c2VzOlxuICAgICAgLy8gZXh0XyA6ICAgIGNoYXIwIGZvciBtaWQtcm93IGNvZGVzLCBhbmQgdGhlIGJhc2UgZm9yIGV4dGVuZGVkXG4gICAgICAvLyAgICAgICAgICAgY2hhcnMgKGV4dF8rMCwgZXh0XysxLCBhbmQgZXh0XysyIGFyZSBjaGFyMHMgZm9yXG4gICAgICAvLyAgICAgICAgICAgZXh0ZW5kZWQgY29kZXMpXG4gICAgICAvLyBjb250cm9sXzogY2hhcjAgZm9yIGNvbnRyb2wgY29kZXMsIGV4Y2VwdCBieXRlLXNoaWZ0ZWQgdG8gdGhlXG4gICAgICAvLyAgICAgICAgICAgbGVmdCBzbyB0aGF0IHdlIGNhbiBkbyB0aGlzLmNvbnRyb2xfIHwgQ09OVFJPTF9DT0RFXG4gICAgICAvLyBvZmZzZXRfOiAgY2hhcjAgZm9yIHRhYiBvZmZzZXQgY29kZXNcbiAgICAgIC8vXG4gICAgICAvLyBJdCdzIGFsc28gd29ydGggbm90aW5nIHRoYXQgY29udHJvbCBjb2RlcywgYW5kIF9vbmx5XyBjb250cm9sIGNvZGVzLFxuICAgICAgLy8gZGlmZmVyIGJldHdlZW4gZmllbGQgMSBhbmQgZmllbGQyLiBGaWVsZCAyIGNvbnRyb2wgY29kZXMgYXJlIGFsd2F5c1xuICAgICAgLy8gdGhlaXIgZmllbGQgMSB2YWx1ZSBwbHVzIDEuIFRoYXQncyB3aHkgdGhlcmUncyB0aGUgXCJ8IGZpZWxkXCIgb24gdGhlXG4gICAgICAvLyBjb250cm9sIHZhbHVlLlxuICAgICAgaWYgKHRoaXMuZGF0YUNoYW5uZWxfID09PSAwKSB7XG4gICAgICAgIHRoaXMuQkFTRV8gPSAweDEwO1xuICAgICAgICB0aGlzLkVYVF8gPSAweDExO1xuICAgICAgICB0aGlzLkNPTlRST0xfID0gKDB4MTQgfCB0aGlzLmZpZWxkXykgPDwgODtcbiAgICAgICAgdGhpcy5PRkZTRVRfID0gMHgxNztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhQ2hhbm5lbF8gPT09IDEpIHtcbiAgICAgICAgdGhpcy5CQVNFXyA9IDB4MTg7XG4gICAgICAgIHRoaXMuRVhUXyA9IDB4MTk7XG4gICAgICAgIHRoaXMuQ09OVFJPTF8gPSAoMHgxYyB8IHRoaXMuZmllbGRfKSA8PCA4O1xuICAgICAgICB0aGlzLk9GRlNFVF8gPSAweDFmO1xuICAgICAgfSAvLyBDb25zdGFudHMgZm9yIHRoZSBMU0J5dGUgY29tbWFuZCBjb2RlcyByZWNvZ25pemVkIGJ5IENlYTYwOFN0cmVhbS4gVGhpc1xuICAgICAgLy8gbGlzdCBpcyBub3QgZXhoYXVzdGl2ZS4gRm9yIGEgbW9yZSBjb21wcmVoZW5zaXZlIGxpc3RpbmcgYW5kIHNlbWFudGljcyBzZWVcbiAgICAgIC8vIGh0dHA6Ly93d3cuZ3BvLmdvdi9mZHN5cy9wa2cvQ0ZSLTIwMTAtdGl0bGU0Ny12b2wxL3BkZi9DRlItMjAxMC10aXRsZTQ3LXZvbDEtc2VjMTUtMTE5LnBkZlxuICAgICAgLy8gUGFkZGluZ1xuXG5cbiAgICAgIHRoaXMuUEFERElOR18gPSAweDAwMDA7IC8vIFBvcC1vbiBNb2RlXG5cbiAgICAgIHRoaXMuUkVTVU1FX0NBUFRJT05fTE9BRElOR18gPSB0aGlzLkNPTlRST0xfIHwgMHgyMDtcbiAgICAgIHRoaXMuRU5EX09GX0NBUFRJT05fID0gdGhpcy5DT05UUk9MXyB8IDB4MmY7IC8vIFJvbGwtdXAgTW9kZVxuXG4gICAgICB0aGlzLlJPTExfVVBfMl9ST1dTXyA9IHRoaXMuQ09OVFJPTF8gfCAweDI1O1xuICAgICAgdGhpcy5ST0xMX1VQXzNfUk9XU18gPSB0aGlzLkNPTlRST0xfIHwgMHgyNjtcbiAgICAgIHRoaXMuUk9MTF9VUF80X1JPV1NfID0gdGhpcy5DT05UUk9MXyB8IDB4Mjc7XG4gICAgICB0aGlzLkNBUlJJQUdFX1JFVFVSTl8gPSB0aGlzLkNPTlRST0xfIHwgMHgyZDsgLy8gcGFpbnQtb24gbW9kZVxuXG4gICAgICB0aGlzLlJFU1VNRV9ESVJFQ1RfQ0FQVElPTklOR18gPSB0aGlzLkNPTlRST0xfIHwgMHgyOTsgLy8gRXJhc3VyZVxuXG4gICAgICB0aGlzLkJBQ0tTUEFDRV8gPSB0aGlzLkNPTlRST0xfIHwgMHgyMTtcbiAgICAgIHRoaXMuRVJBU0VfRElTUExBWUVEX01FTU9SWV8gPSB0aGlzLkNPTlRST0xfIHwgMHgyYztcbiAgICAgIHRoaXMuRVJBU0VfTk9OX0RJU1BMQVlFRF9NRU1PUllfID0gdGhpcy5DT05UUk9MXyB8IDB4MmU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIGlmIHRoZSAyLWJ5dGUgcGFja2V0IGRhdGEgaXMgYSBzcGVjaWFsIGNoYXJhY3RlclxuICAgICAqXG4gICAgICogU3BlY2lhbCBjaGFyYWN0ZXJzIGhhdmUgYSBzZWNvbmQgYnl0ZSBpbiB0aGUgcmFuZ2UgMHgzMCB0byAweDNmLFxuICAgICAqIHdpdGggdGhlIGZpcnN0IGJ5dGUgYmVpbmcgMHgxMSAoZm9yIGRhdGEgY2hhbm5lbCAxKSBvciAweDE5IChmb3JcbiAgICAgKiBkYXRhIGNoYW5uZWwgMikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMCBUaGUgZmlyc3QgYnl0ZVxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIxIFRoZSBzZWNvbmQgYnl0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFdoZXRoZXIgdGhlIDIgYnl0ZXMgYXJlIGFuIHNwZWNpYWwgY2hhcmFjdGVyXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNTcGVjaWFsQ2hhcmFjdGVyID0gZnVuY3Rpb24gKGNoYXIwLCBjaGFyMSkge1xuICAgICAgcmV0dXJuIGNoYXIwID09PSB0aGlzLkVYVF8gJiYgY2hhcjEgPj0gMHgzMCAmJiBjaGFyMSA8PSAweDNmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZWN0cyBpZiB0aGUgMi1ieXRlIHBhY2tldCBkYXRhIGlzIGFuIGV4dGVuZGVkIGNoYXJhY3RlclxuICAgICAqXG4gICAgICogRXh0ZW5kZWQgY2hhcmFjdGVycyBoYXZlIGEgc2Vjb25kIGJ5dGUgaW4gdGhlIHJhbmdlIDB4MjAgdG8gMHgzZixcbiAgICAgKiB3aXRoIHRoZSBmaXJzdCBieXRlIGJlaW5nIDB4MTIgb3IgMHgxMyAoZm9yIGRhdGEgY2hhbm5lbCAxKSBvclxuICAgICAqIDB4MWEgb3IgMHgxYiAoZm9yIGRhdGEgY2hhbm5lbCAyKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIwIFRoZSBmaXJzdCBieXRlXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgV2hldGhlciB0aGUgMiBieXRlcyBhcmUgYW4gZXh0ZW5kZWQgY2hhcmFjdGVyXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNFeHRDaGFyYWN0ZXIgPSBmdW5jdGlvbiAoY2hhcjAsIGNoYXIxKSB7XG4gICAgICByZXR1cm4gKGNoYXIwID09PSB0aGlzLkVYVF8gKyAxIHx8IGNoYXIwID09PSB0aGlzLkVYVF8gKyAyKSAmJiBjaGFyMSA+PSAweDIwICYmIGNoYXIxIDw9IDB4M2Y7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIGlmIHRoZSAyLWJ5dGUgcGFja2V0IGlzIGEgbWlkLXJvdyBjb2RlXG4gICAgICpcbiAgICAgKiBNaWQtcm93IGNvZGVzIGhhdmUgYSBzZWNvbmQgYnl0ZSBpbiB0aGUgcmFuZ2UgMHgyMCB0byAweDJmLCB3aXRoXG4gICAgICogdGhlIGZpcnN0IGJ5dGUgYmVpbmcgMHgxMSAoZm9yIGRhdGEgY2hhbm5lbCAxKSBvciAweDE5IChmb3IgZGF0YVxuICAgICAqIGNoYW5uZWwgMikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMCBUaGUgZmlyc3QgYnl0ZVxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIxIFRoZSBzZWNvbmQgYnl0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFdoZXRoZXIgdGhlIDIgYnl0ZXMgYXJlIGEgbWlkLXJvdyBjb2RlXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNNaWRSb3dDb2RlID0gZnVuY3Rpb24gKGNoYXIwLCBjaGFyMSkge1xuICAgICAgcmV0dXJuIGNoYXIwID09PSB0aGlzLkVYVF8gJiYgY2hhcjEgPj0gMHgyMCAmJiBjaGFyMSA8PSAweDJmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZWN0cyBpZiB0aGUgMi1ieXRlIHBhY2tldCBpcyBhbiBvZmZzZXQgY29udHJvbCBjb2RlXG4gICAgICpcbiAgICAgKiBPZmZzZXQgY29udHJvbCBjb2RlcyBoYXZlIGEgc2Vjb25kIGJ5dGUgaW4gdGhlIHJhbmdlIDB4MjEgdG8gMHgyMyxcbiAgICAgKiB3aXRoIHRoZSBmaXJzdCBieXRlIGJlaW5nIDB4MTcgKGZvciBkYXRhIGNoYW5uZWwgMSkgb3IgMHgxZiAoZm9yXG4gICAgICogZGF0YSBjaGFubmVsIDIpLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjAgVGhlIGZpcnN0IGJ5dGVcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMSBUaGUgc2Vjb25kIGJ5dGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhbiBvZmZzZXQgY29udHJvbCBjb2RlXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNPZmZzZXRDb250cm9sQ29kZSA9IGZ1bmN0aW9uIChjaGFyMCwgY2hhcjEpIHtcbiAgICAgIHJldHVybiBjaGFyMCA9PT0gdGhpcy5PRkZTRVRfICYmIGNoYXIxID49IDB4MjEgJiYgY2hhcjEgPD0gMHgyMztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVjdHMgaWYgdGhlIDItYnl0ZSBwYWNrZXQgaXMgYSBQcmVhbWJsZSBBZGRyZXNzIENvZGVcbiAgICAgKlxuICAgICAqIFBBQ3MgaGF2ZSBhIGZpcnN0IGJ5dGUgaW4gdGhlIHJhbmdlIDB4MTAgdG8gMHgxNyAoZm9yIGRhdGEgY2hhbm5lbCAxKVxuICAgICAqIG9yIDB4MTggdG8gMHgxZiAoZm9yIGRhdGEgY2hhbm5lbCAyKSwgd2l0aCB0aGUgc2Vjb25kIGJ5dGUgaW4gdGhlXG4gICAgICogcmFuZ2UgMHg0MCB0byAweDdmLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjAgVGhlIGZpcnN0IGJ5dGVcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMSBUaGUgc2Vjb25kIGJ5dGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhIFBBQ1xuICAgICAqL1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzUEFDID0gZnVuY3Rpb24gKGNoYXIwLCBjaGFyMSkge1xuICAgICAgcmV0dXJuIGNoYXIwID49IHRoaXMuQkFTRV8gJiYgY2hhcjAgPCB0aGlzLkJBU0VfICsgOCAmJiBjaGFyMSA+PSAweDQwICYmIGNoYXIxIDw9IDB4N2Y7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIGlmIGEgcGFja2V0J3Mgc2Vjb25kIGJ5dGUgaXMgaW4gdGhlIHJhbmdlIG9mIGEgUEFDIGNvbG9yIGNvZGVcbiAgICAgKlxuICAgICAqIFBBQyBjb2xvciBjb2RlcyBoYXZlIHRoZSBzZWNvbmQgYnl0ZSBiZSBpbiB0aGUgcmFuZ2UgMHg0MCB0byAweDRmLCBvclxuICAgICAqIDB4NjAgdG8gMHg2Zi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIxIFRoZSBzZWNvbmQgYnl0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFdoZXRoZXIgdGhlIGJ5dGUgaXMgYSBjb2xvciBQQUNcbiAgICAgKi9cblxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pc0NvbG9yUEFDID0gZnVuY3Rpb24gKGNoYXIxKSB7XG4gICAgICByZXR1cm4gY2hhcjEgPj0gMHg0MCAmJiBjaGFyMSA8PSAweDRmIHx8IGNoYXIxID49IDB4NjAgJiYgY2hhcjEgPD0gMHg3ZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVjdHMgaWYgYSBzaW5nbGUgYnl0ZSBpcyBpbiB0aGUgcmFuZ2Ugb2YgYSBub3JtYWwgY2hhcmFjdGVyXG4gICAgICpcbiAgICAgKiBOb3JtYWwgdGV4dCBieXRlcyBhcmUgaW4gdGhlIHJhbmdlIDB4MjAgdG8gMHg3Zi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIgIFRoZSBieXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgV2hldGhlciB0aGUgYnl0ZSBpcyBhIG5vcm1hbCBjaGFyYWN0ZXJcbiAgICAgKi9cblxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pc05vcm1hbENoYXIgPSBmdW5jdGlvbiAoX2NoYXIpIHtcbiAgICAgIHJldHVybiBfY2hhciA+PSAweDIwICYmIF9jaGFyIDw9IDB4N2Y7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmVzIHJvbGwtdXBcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IHB0cyAgICAgICAgIEN1cnJlbnQgUFRTXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gbmV3QmFzZVJvdyAgVXNlZCBieSBQQUNzIHRvIHNsaWRlIHRoZSBjdXJyZW50IHdpbmRvdyB0b1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgbmV3IHBvc2l0aW9uXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuc2V0Um9sbFVwID0gZnVuY3Rpb24gKHB0cywgbmV3QmFzZVJvdykge1xuICAgICAgLy8gUmVzZXQgdGhlIGJhc2Ugcm93IHRvIHRoZSBib3R0b20gcm93IHdoZW4gc3dpdGNoaW5nIG1vZGVzXG4gICAgICBpZiAodGhpcy5tb2RlXyAhPT0gJ3JvbGxVcCcpIHtcbiAgICAgICAgdGhpcy5yb3dfID0gQk9UVE9NX1JPVztcbiAgICAgICAgdGhpcy5tb2RlXyA9ICdyb2xsVXAnOyAvLyBTcGVjIHNheXMgdG8gd2lwZSBtZW1vcmllcyB3aGVuIHN3aXRjaGluZyB0byByb2xsLXVwXG5cbiAgICAgICAgdGhpcy5mbHVzaERpc3BsYXllZChwdHMpO1xuICAgICAgICB0aGlzLm5vbkRpc3BsYXllZF8gPSBjcmVhdGVEaXNwbGF5QnVmZmVyKCk7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0Jhc2VSb3cgIT09IHVuZGVmaW5lZCAmJiBuZXdCYXNlUm93ICE9PSB0aGlzLnJvd18pIHtcbiAgICAgICAgLy8gbW92ZSBjdXJyZW50bHkgZGlzcGxheWVkIGNhcHRpb25zICh1cCBvciBkb3duKSB0byB0aGUgbmV3IGJhc2Ugcm93XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb2xsVXBSb3dzXzsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW25ld0Jhc2VSb3cgLSBpXSA9IHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd18gLSBpXTtcbiAgICAgICAgICB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfIC0gaV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmV3QmFzZVJvdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld0Jhc2VSb3cgPSB0aGlzLnJvd187XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9wUm93XyA9IG5ld0Jhc2VSb3cgLSB0aGlzLnJvbGxVcFJvd3NfICsgMTtcbiAgICB9OyAvLyBBZGRzIHRoZSBvcGVuaW5nIEhUTUwgdGFnIGZvciB0aGUgcGFzc2VkIGNoYXJhY3RlciB0byB0aGUgY2FwdGlvbiB0ZXh0LFxuICAgIC8vIGFuZCBrZWVwcyB0cmFjayBvZiBpdCBmb3IgbGF0ZXIgY2xvc2luZ1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmFkZEZvcm1hdHRpbmcgPSBmdW5jdGlvbiAocHRzLCBmb3JtYXQpIHtcbiAgICAgIHRoaXMuZm9ybWF0dGluZ18gPSB0aGlzLmZvcm1hdHRpbmdfLmNvbmNhdChmb3JtYXQpO1xuICAgICAgdmFyIHRleHQgPSBmb3JtYXQucmVkdWNlKGZ1bmN0aW9uICh0ZXh0LCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQgKyAnPCcgKyBmb3JtYXQgKyAnPic7XG4gICAgICB9LCAnJyk7XG4gICAgICB0aGlzW3RoaXMubW9kZV9dKHB0cywgdGV4dCk7XG4gICAgfTsgLy8gQWRkcyBIVE1MIGNsb3NpbmcgdGFncyBmb3IgY3VycmVudCBmb3JtYXR0aW5nIHRvIGNhcHRpb24gdGV4dCBhbmRcbiAgICAvLyBjbGVhcnMgcmVtZW1iZXJlZCBmb3JtYXR0aW5nXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuY2xlYXJGb3JtYXR0aW5nID0gZnVuY3Rpb24gKHB0cykge1xuICAgICAgaWYgKCF0aGlzLmZvcm1hdHRpbmdfLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5mb3JtYXR0aW5nXy5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uICh0ZXh0LCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQgKyAnPC8nICsgZm9ybWF0ICsgJz4nO1xuICAgICAgfSwgJycpO1xuICAgICAgdGhpcy5mb3JtYXR0aW5nXyA9IFtdO1xuICAgICAgdGhpc1t0aGlzLm1vZGVfXShwdHMsIHRleHQpO1xuICAgIH07IC8vIE1vZGUgSW1wbGVtZW50YXRpb25zXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUucG9wT24gPSBmdW5jdGlvbiAocHRzLCB0ZXh0KSB7XG4gICAgICB2YXIgYmFzZVJvdyA9IHRoaXMubm9uRGlzcGxheWVkX1t0aGlzLnJvd19dOyAvLyBidWZmZXIgY2hhcmFjdGVyc1xuXG4gICAgICBiYXNlUm93ICs9IHRleHQ7XG4gICAgICB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IGJhc2VSb3c7XG4gICAgfTtcblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUucm9sbFVwID0gZnVuY3Rpb24gKHB0cywgdGV4dCkge1xuICAgICAgdmFyIGJhc2VSb3cgPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXTtcbiAgICAgIGJhc2VSb3cgKz0gdGV4dDtcbiAgICAgIHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dID0gYmFzZVJvdztcbiAgICB9O1xuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5zaGlmdFJvd3NVcF8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaTsgLy8gY2xlYXIgb3V0IGluYWN0aXZlIHJvd3NcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9wUm93XzsgaSsrKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkX1tpXSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSB0aGlzLnJvd18gKyAxOyBpIDwgQk9UVE9NX1JPVyArIDE7IGkrKykge1xuICAgICAgICB0aGlzLmRpc3BsYXllZF9baV0gPSAnJztcbiAgICAgIH0gLy8gc2hpZnQgZGlzcGxheWVkIHJvd3MgdXBcblxuXG4gICAgICBmb3IgKGkgPSB0aGlzLnRvcFJvd187IGkgPCB0aGlzLnJvd187IGkrKykge1xuICAgICAgICB0aGlzLmRpc3BsYXllZF9baV0gPSB0aGlzLmRpc3BsYXllZF9baSArIDFdO1xuICAgICAgfSAvLyBjbGVhciBvdXQgdGhlIGJvdHRvbSByb3dcblxuXG4gICAgICB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXSA9ICcnO1xuICAgIH07XG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLnBhaW50T24gPSBmdW5jdGlvbiAocHRzLCB0ZXh0KSB7XG4gICAgICB2YXIgYmFzZVJvdyA9IHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dO1xuICAgICAgYmFzZVJvdyArPSB0ZXh0O1xuICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10gPSBiYXNlUm93O1xuICAgIH07IC8vIGV4cG9ydHNcblxuXG4gICAgdmFyIGNhcHRpb25TdHJlYW0gPSB7XG4gICAgICBDYXB0aW9uU3RyZWFtOiBDYXB0aW9uU3RyZWFtLFxuICAgICAgQ2VhNjA4U3RyZWFtOiBDZWE2MDhTdHJlYW1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIG11eC5qc1xuICAgICAqXG4gICAgICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gICAgICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAqL1xuXG4gICAgdmFyIHN0cmVhbVR5cGVzID0ge1xuICAgICAgSDI2NF9TVFJFQU1fVFlQRTogMHgxQixcbiAgICAgIEFEVFNfU1RSRUFNX1RZUEU6IDB4MEYsXG4gICAgICBNRVRBREFUQV9TVFJFQU1fVFlQRTogMHgxNVxuICAgIH07XG4gICAgdmFyIE1BWF9UUyA9IDg1ODk5MzQ1OTI7XG4gICAgdmFyIFJPX1RIUkVTSCA9IDQyOTQ5NjcyOTY7XG4gICAgdmFyIFRZUEVfU0hBUkVEID0gJ3NoYXJlZCc7XG5cbiAgICB2YXIgaGFuZGxlUm9sbG92ZXIgPSBmdW5jdGlvbiBoYW5kbGVSb2xsb3Zlcih2YWx1ZSwgcmVmZXJlbmNlKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gMTtcblxuICAgICAgaWYgKHZhbHVlID4gcmVmZXJlbmNlKSB7XG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IHRpbWVzdGFtcCB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3VyIHJlZmVyZW5jZSB0aW1lc3RhbXAgYW5kIHdlIGRldGVjdCBhXG4gICAgICAgIC8vIHRpbWVzdGFtcCByb2xsb3ZlciwgdGhpcyBtZWFucyB0aGUgcm9sbCBvdmVyIGlzIGhhcHBlbmluZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAgICAvLyBFeGFtcGxlIHNjZW5hcmlvOiBFbnRlciBhIGxvbmcgc3RyZWFtL3ZpZGVvIGp1c3QgYWZ0ZXIgYSByb2xsb3ZlciBvY2N1cnJlZC4gVGhlIHJlZmVyZW5jZVxuICAgICAgICAvLyBwb2ludCB3aWxsIGJlIHNldCB0byBhIHNtYWxsIG51bWJlciwgZS5nLiAxLiBUaGUgdXNlciB0aGVuIHNlZWtzIGJhY2t3YXJkcyBvdmVyIHRoZVxuICAgICAgICAvLyByb2xsb3ZlciBwb2ludC4gSW4gbG9hZGluZyB0aGlzIHNlZ21lbnQsIHRoZSB0aW1lc3RhbXAgdmFsdWVzIHdpbGwgYmUgdmVyeSBsYXJnZSxcbiAgICAgICAgLy8gZS5nLiAyXjMzIC0gMS4gU2luY2UgdGhpcyBjb21lcyBiZWZvcmUgdGhlIGRhdGEgd2UgbG9hZGVkIHByZXZpb3VzbHksIHdlIHdhbnQgdG8gYWRqdXN0XG4gICAgICAgIC8vIHRoZSB0aW1lIHN0YW1wIHRvIGJlIGB2YWx1ZSAtIDJeMzNgLlxuICAgICAgICBkaXJlY3Rpb24gPSAtMTtcbiAgICAgIH0gLy8gTm90ZTogQSBzZWVrIGZvcndhcmRzIG9yIGJhY2sgdGhhdCBpcyBncmVhdGVyIHRoYW4gdGhlIFJPX1RIUkVTSCAoMl4zMiwgfjEzIGhvdXJzKSB3aWxsXG4gICAgICAvLyBjYXVzZSBhbiBpbmNvcnJlY3QgYWRqdXN0bWVudC5cblxuXG4gICAgICB3aGlsZSAoTWF0aC5hYnMocmVmZXJlbmNlIC0gdmFsdWUpID4gUk9fVEhSRVNIKSB7XG4gICAgICAgIHZhbHVlICs9IGRpcmVjdGlvbiAqIE1BWF9UUztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICB2YXIgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0gPSBmdW5jdGlvbiBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSh0eXBlKSB7XG4gICAgICB2YXIgbGFzdERUUywgcmVmZXJlbmNlRFRTO1xuICAgICAgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTsgLy8gVGhlIFwic2hhcmVkXCIgdHlwZSBpcyB1c2VkIGluIGNhc2VzIHdoZXJlIGEgc3RyZWFtIHdpbGwgY29udGFpbiBtdXhlZFxuICAgICAgLy8gdmlkZW8gYW5kIGF1ZGlvLiBXZSBjb3VsZCB1c2UgYHVuZGVmaW5lZGAgaGVyZSwgYnV0IGhhdmluZyBhIHN0cmluZ1xuICAgICAgLy8gbWFrZXMgZGVidWdnaW5nIGEgbGl0dGxlIGNsZWFyZXIuXG5cbiAgICAgIHRoaXMudHlwZV8gPSB0eXBlIHx8IFRZUEVfU0hBUkVEO1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAvLyBBbnkgXCJzaGFyZWRcIiByb2xsb3ZlciBzdHJlYW1zIHdpbGwgYWNjZXB0IF9hbGxfIGRhdGEuIE90aGVyd2lzZSxcbiAgICAgICAgLy8gc3RyZWFtcyB3aWxsIG9ubHkgYWNjZXB0IGRhdGEgdGhhdCBtYXRjaGVzIHRoZWlyIHR5cGUuXG4gICAgICAgIGlmICh0aGlzLnR5cGVfICE9PSBUWVBFX1NIQVJFRCAmJiBkYXRhLnR5cGUgIT09IHRoaXMudHlwZV8pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVmZXJlbmNlRFRTID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZWZlcmVuY2VEVFMgPSBkYXRhLmR0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuZHRzID0gaGFuZGxlUm9sbG92ZXIoZGF0YS5kdHMsIHJlZmVyZW5jZURUUyk7XG4gICAgICAgIGRhdGEucHRzID0gaGFuZGxlUm9sbG92ZXIoZGF0YS5wdHMsIHJlZmVyZW5jZURUUyk7XG4gICAgICAgIGxhc3REVFMgPSBkYXRhLmR0cztcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWZlcmVuY2VEVFMgPSBsYXN0RFRTO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW5kVGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdlbmRlZHRpbWVsaW5lJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmRpc2NvbnRpbnVpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZmVyZW5jZURUUyA9IHZvaWQgMDtcbiAgICAgICAgbGFzdERUUyA9IHZvaWQgMDtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlzY29udGludWl0eSgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIHRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0ge1xuICAgICAgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW06IFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLFxuICAgICAgaGFuZGxlUm9sbG92ZXI6IGhhbmRsZVJvbGxvdmVyXG4gICAgfTtcblxuICAgIHZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gcGVyY2VudEVuY29kZShieXRlcywgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgcmVzdWx0ID0gJyc7XG5cbiAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9ICclJyArICgnMDAnICsgYnl0ZXNbaV0udG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNwZWNpZmllZCBieXRlIHJhbmdlLFxuICAgIC8vIGludGVycHJldGVkIGFzIFVUZi04LlxuICAgIHBhcnNlVXRmOCA9IGZ1bmN0aW9uIHBhcnNlVXRmOChieXRlcywgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwZXJjZW50RW5jb2RlKGJ5dGVzLCBzdGFydCwgZW5kKSk7XG4gICAgfSxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNwZWNpZmllZCBieXRlIHJhbmdlLFxuICAgIC8vIGludGVycHJldGVkIGFzIElTTy04ODU5LTEuXG4gICAgcGFyc2VJc284ODU5MSA9IGZ1bmN0aW9uIHBhcnNlSXNvODg1OTEoYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiB1bmVzY2FwZShwZXJjZW50RW5jb2RlKGJ5dGVzLCBzdGFydCwgZW5kKSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgIH0sXG4gICAgICAgIHBhcnNlU3luY1NhZmVJbnRlZ2VyID0gZnVuY3Rpb24gcGFyc2VTeW5jU2FmZUludGVnZXIoZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGFbMF0gPDwgMjEgfCBkYXRhWzFdIDw8IDE0IHwgZGF0YVsyXSA8PCA3IHwgZGF0YVszXTtcbiAgICB9LFxuICAgICAgICB0YWdQYXJzZXJzID0ge1xuICAgICAgVFhYWDogZnVuY3Rpb24gVFhYWCh0YWcpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgaWYgKHRhZy5kYXRhWzBdICE9PSAzKSB7XG4gICAgICAgICAgLy8gaWdub3JlIGZyYW1lcyB3aXRoIHVucmVjb2duaXplZCBjaGFyYWN0ZXIgZW5jb2RpbmdzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMTsgaSA8IHRhZy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRhZy5kYXRhW2ldID09PSAwKSB7XG4gICAgICAgICAgICAvLyBwYXJzZSB0aGUgdGV4dCBmaWVsZHNcbiAgICAgICAgICAgIHRhZy5kZXNjcmlwdGlvbiA9IHBhcnNlVXRmOCh0YWcuZGF0YSwgMSwgaSk7IC8vIGRvIG5vdCBpbmNsdWRlIHRoZSBudWxsIHRlcm1pbmF0b3IgaW4gdGhlIHRhZyB2YWx1ZVxuXG4gICAgICAgICAgICB0YWcudmFsdWUgPSBwYXJzZVV0ZjgodGFnLmRhdGEsIGkgKyAxLCB0YWcuZGF0YS5sZW5ndGgpLnJlcGxhY2UoL1xcMCokLywgJycpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGFnLmRhdGEgPSB0YWcudmFsdWU7XG4gICAgICB9LFxuICAgICAgV1hYWDogZnVuY3Rpb24gV1hYWCh0YWcpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgaWYgKHRhZy5kYXRhWzBdICE9PSAzKSB7XG4gICAgICAgICAgLy8gaWdub3JlIGZyYW1lcyB3aXRoIHVucmVjb2duaXplZCBjaGFyYWN0ZXIgZW5jb2RpbmdzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMTsgaSA8IHRhZy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRhZy5kYXRhW2ldID09PSAwKSB7XG4gICAgICAgICAgICAvLyBwYXJzZSB0aGUgZGVzY3JpcHRpb24gYW5kIFVSTCBmaWVsZHNcbiAgICAgICAgICAgIHRhZy5kZXNjcmlwdGlvbiA9IHBhcnNlVXRmOCh0YWcuZGF0YSwgMSwgaSk7XG4gICAgICAgICAgICB0YWcudXJsID0gcGFyc2VVdGY4KHRhZy5kYXRhLCBpICsgMSwgdGFnLmRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFBSSVY6IGZ1bmN0aW9uIFBSSVYodGFnKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWcuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0YWcuZGF0YVtpXSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gcGFyc2UgdGhlIGRlc2NyaXB0aW9uIGFuZCBVUkwgZmllbGRzXG4gICAgICAgICAgICB0YWcub3duZXIgPSBwYXJzZUlzbzg4NTkxKHRhZy5kYXRhLCAwLCBpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRhZy5wcml2YXRlRGF0YSA9IHRhZy5kYXRhLnN1YmFycmF5KGkgKyAxKTtcbiAgICAgICAgdGFnLmRhdGEgPSB0YWcucHJpdmF0ZURhdGE7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgX01ldGFkYXRhU3RyZWFtO1xuXG4gICAgX01ldGFkYXRhU3RyZWFtID0gZnVuY3Rpb24gTWV0YWRhdGFTdHJlYW0ob3B0aW9ucykge1xuICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICBkZWJ1ZzogISEob3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnKSxcbiAgICAgICAgLy8gdGhlIGJ5dGVzIG9mIHRoZSBwcm9ncmFtLWxldmVsIGRlc2NyaXB0b3IgZmllbGQgaW4gTVAyVFxuICAgICAgICAvLyBzZWUgSVNPL0lFQyAxMzgxOC0xOjIwMTMgKEUpLCBzZWN0aW9uIDIuNiBcIlByb2dyYW0gYW5kXG4gICAgICAgIC8vIHByb2dyYW0gZWxlbWVudCBkZXNjcmlwdG9yc1wiXG4gICAgICAgIGRlc2NyaXB0b3I6IG9wdGlvbnMgJiYgb3B0aW9ucy5kZXNjcmlwdG9yXG4gICAgICB9LFxuICAgICAgICAgIC8vIHRoZSB0b3RhbCBzaXplIGluIGJ5dGVzIG9mIHRoZSBJRDMgdGFnIGJlaW5nIHBhcnNlZFxuICAgICAgdGFnU2l6ZSA9IDAsXG4gICAgICAgICAgLy8gdGFnIGRhdGEgdGhhdCBpcyBub3QgY29tcGxldGUgZW5vdWdoIHRvIGJlIHBhcnNlZFxuICAgICAgYnVmZmVyID0gW10sXG4gICAgICAgICAgLy8gdGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyBjdXJyZW50bHkgaW4gdGhlIGJ1ZmZlclxuICAgICAgYnVmZmVyU2l6ZSA9IDAsXG4gICAgICAgICAgaTtcblxuICAgICAgX01ldGFkYXRhU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7IC8vIGNhbGN1bGF0ZSB0aGUgdGV4dCB0cmFjayBpbi1iYW5kIG1ldGFkYXRhIHRyYWNrIGRpc3BhdGNoIHR5cGVcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNzdGVwcy10by1leHBvc2UtYS1tZWRpYS1yZXNvdXJjZS1zcGVjaWZpYy10ZXh0LXRyYWNrXG5cblxuICAgICAgdGhpcy5kaXNwYXRjaFR5cGUgPSBzdHJlYW1UeXBlcy5NRVRBREFUQV9TVFJFQU1fVFlQRS50b1N0cmluZygxNik7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5kZXNjcmlwdG9yKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZXR0aW5ncy5kZXNjcmlwdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaFR5cGUgKz0gKCcwMCcgKyBzZXR0aW5ncy5kZXNjcmlwdG9yW2ldLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB2YXIgdGFnLCBmcmFtZVN0YXJ0LCBmcmFtZVNpemUsIGZyYW1lLCBpLCBmcmFtZUhlYWRlcjtcblxuICAgICAgICBpZiAoY2h1bmsudHlwZSAhPT0gJ3RpbWVkLW1ldGFkYXRhJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBpZiBkYXRhX2FsaWdubWVudF9pbmRpY2F0b3IgaXMgc2V0IGluIHRoZSBQRVMgaGVhZGVyLFxuICAgICAgICAvLyB3ZSBtdXN0IGhhdmUgdGhlIHN0YXJ0IG9mIGEgbmV3IElEMyB0YWcuIEFzc3VtZSBhbnl0aGluZ1xuICAgICAgICAvLyByZW1haW5pbmcgaW4gdGhlIGJ1ZmZlciB3YXMgbWFsZm9ybWVkIGFuZCB0aHJvdyBpdCBvdXRcblxuXG4gICAgICAgIGlmIChjaHVuay5kYXRhQWxpZ25tZW50SW5kaWNhdG9yKSB7XG4gICAgICAgICAgYnVmZmVyU2l6ZSA9IDA7XG4gICAgICAgICAgYnVmZmVyLmxlbmd0aCA9IDA7XG4gICAgICAgIH0gLy8gaWdub3JlIGV2ZW50cyB0aGF0IGRvbid0IGxvb2sgbGlrZSBJRDMgZGF0YVxuXG5cbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDAgJiYgKGNodW5rLmRhdGEubGVuZ3RoIDwgMTAgfHwgY2h1bmsuZGF0YVswXSAhPT0gJ0knLmNoYXJDb2RlQXQoMCkgfHwgY2h1bmsuZGF0YVsxXSAhPT0gJ0QnLmNoYXJDb2RlQXQoMCkgfHwgY2h1bmsuZGF0YVsyXSAhPT0gJzMnLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgaWYgKHNldHRpbmdzLmRlYnVnKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NraXBwaW5nIHVucmVjb2duaXplZCBtZXRhZGF0YSBwYWNrZXQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gYWRkIHRoaXMgY2h1bmsgdG8gdGhlIGRhdGEgd2UndmUgY29sbGVjdGVkIHNvIGZhclxuXG5cbiAgICAgICAgYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgICBidWZmZXJTaXplICs9IGNodW5rLmRhdGEuYnl0ZUxlbmd0aDsgLy8gZ3JhYiB0aGUgc2l6ZSBvZiB0aGUgZW50aXJlIGZyYW1lIGZyb20gdGhlIElEMyBoZWFkZXJcblxuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIC8vIHRoZSBmcmFtZSBzaXplIGlzIHRyYW5zbWl0dGVkIGFzIGEgMjgtYml0IGludGVnZXIgaW4gdGhlXG4gICAgICAgICAgLy8gbGFzdCBmb3VyIGJ5dGVzIG9mIHRoZSBJRDMgaGVhZGVyLlxuICAgICAgICAgIC8vIFRoZSBtb3N0IHNpZ25pZmljYW50IGJpdCBvZiBlYWNoIGJ5dGUgaXMgZHJvcHBlZCBhbmQgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0cyBjb25jYXRlbmF0ZWQgdG8gcmVjb3ZlciB0aGUgYWN0dWFsIHZhbHVlLlxuICAgICAgICAgIHRhZ1NpemUgPSBwYXJzZVN5bmNTYWZlSW50ZWdlcihjaHVuay5kYXRhLnN1YmFycmF5KDYsIDEwKSk7IC8vIElEMyByZXBvcnRzIHRoZSB0YWcgc2l6ZSBleGNsdWRpbmcgdGhlIGhlYWRlciBidXQgaXQncyBtb3JlXG4gICAgICAgICAgLy8gY29udmVuaWVudCBmb3Igb3VyIGNvbXBhcmlzb25zIHRvIGluY2x1ZGUgaXRcblxuICAgICAgICAgIHRhZ1NpemUgKz0gMTA7XG4gICAgICAgIH0gLy8gaWYgdGhlIGVudGlyZSBmcmFtZSBoYXMgbm90IGFycml2ZWQsIHdhaXQgZm9yIG1vcmUgZGF0YVxuXG5cbiAgICAgICAgaWYgKGJ1ZmZlclNpemUgPCB0YWdTaXplKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGNvbGxlY3QgdGhlIGVudGlyZSBmcmFtZSBzbyBpdCBjYW4gYmUgcGFyc2VkXG5cblxuICAgICAgICB0YWcgPSB7XG4gICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkodGFnU2l6ZSksXG4gICAgICAgICAgZnJhbWVzOiBbXSxcbiAgICAgICAgICBwdHM6IGJ1ZmZlclswXS5wdHMsXG4gICAgICAgICAgZHRzOiBidWZmZXJbMF0uZHRzXG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhZ1NpemU7KSB7XG4gICAgICAgICAgdGFnLmRhdGEuc2V0KGJ1ZmZlclswXS5kYXRhLnN1YmFycmF5KDAsIHRhZ1NpemUgLSBpKSwgaSk7XG4gICAgICAgICAgaSArPSBidWZmZXJbMF0uZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGJ1ZmZlclNpemUgLT0gYnVmZmVyWzBdLmRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgfSAvLyBmaW5kIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgZnJhbWUgYW5kIHRoZSBlbmQgb2YgdGhlIHRhZ1xuXG5cbiAgICAgICAgZnJhbWVTdGFydCA9IDEwO1xuXG4gICAgICAgIGlmICh0YWcuZGF0YVs1XSAmIDB4NDApIHtcbiAgICAgICAgICAvLyBhZHZhbmNlIHRoZSBmcmFtZSBzdGFydCBwYXN0IHRoZSBleHRlbmRlZCBoZWFkZXJcbiAgICAgICAgICBmcmFtZVN0YXJ0ICs9IDQ7IC8vIGhlYWRlciBzaXplIGZpZWxkXG5cbiAgICAgICAgICBmcmFtZVN0YXJ0ICs9IHBhcnNlU3luY1NhZmVJbnRlZ2VyKHRhZy5kYXRhLnN1YmFycmF5KDEwLCAxNCkpOyAvLyBjbGlwIGFueSBwYWRkaW5nIG9mZiB0aGUgZW5kXG5cbiAgICAgICAgICB0YWdTaXplIC09IHBhcnNlU3luY1NhZmVJbnRlZ2VyKHRhZy5kYXRhLnN1YmFycmF5KDE2LCAyMCkpO1xuICAgICAgICB9IC8vIHBhcnNlIG9uZSBvciBtb3JlIElEMyBmcmFtZXNcbiAgICAgICAgLy8gaHR0cDovL2lkMy5vcmcvaWQzdjIuMy4wI0lEM3YyX2ZyYW1lX292ZXJ2aWV3XG5cblxuICAgICAgICBkbyB7XG4gICAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gdGhpcyBmcmFtZVxuICAgICAgICAgIGZyYW1lU2l6ZSA9IHBhcnNlU3luY1NhZmVJbnRlZ2VyKHRhZy5kYXRhLnN1YmFycmF5KGZyYW1lU3RhcnQgKyA0LCBmcmFtZVN0YXJ0ICsgOCkpO1xuXG4gICAgICAgICAgaWYgKGZyYW1lU2l6ZSA8IDEpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ01hbGZvcm1lZCBJRDMgZnJhbWUgZW5jb3VudGVyZWQuIFNraXBwaW5nIG1ldGFkYXRhIHBhcnNpbmcuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnJhbWVIZWFkZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRhZy5kYXRhW2ZyYW1lU3RhcnRdLCB0YWcuZGF0YVtmcmFtZVN0YXJ0ICsgMV0sIHRhZy5kYXRhW2ZyYW1lU3RhcnQgKyAyXSwgdGFnLmRhdGFbZnJhbWVTdGFydCArIDNdKTtcbiAgICAgICAgICBmcmFtZSA9IHtcbiAgICAgICAgICAgIGlkOiBmcmFtZUhlYWRlcixcbiAgICAgICAgICAgIGRhdGE6IHRhZy5kYXRhLnN1YmFycmF5KGZyYW1lU3RhcnQgKyAxMCwgZnJhbWVTdGFydCArIGZyYW1lU2l6ZSArIDEwKVxuICAgICAgICAgIH07XG4gICAgICAgICAgZnJhbWUua2V5ID0gZnJhbWUuaWQ7XG5cbiAgICAgICAgICBpZiAodGFnUGFyc2Vyc1tmcmFtZS5pZF0pIHtcbiAgICAgICAgICAgIHRhZ1BhcnNlcnNbZnJhbWUuaWRdKGZyYW1lKTsgLy8gaGFuZGxlIHRoZSBzcGVjaWFsIFBSSVYgZnJhbWUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3RhcnRcbiAgICAgICAgICAgIC8vIHRpbWUgZm9yIHJhdyBBQUMgZGF0YVxuXG4gICAgICAgICAgICBpZiAoZnJhbWUub3duZXIgPT09ICdjb20uYXBwbGUuc3RyZWFtaW5nLnRyYW5zcG9ydFN0cmVhbVRpbWVzdGFtcCcpIHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBmcmFtZS5kYXRhLFxuICAgICAgICAgICAgICAgICAgc2l6ZSA9IChkWzNdICYgMHgwMSkgPDwgMzAgfCBkWzRdIDw8IDIyIHwgZFs1XSA8PCAxNCB8IGRbNl0gPDwgNiB8IGRbN10gPj4+IDI7XG4gICAgICAgICAgICAgIHNpemUgKj0gNDtcbiAgICAgICAgICAgICAgc2l6ZSArPSBkWzddICYgMHgwMztcbiAgICAgICAgICAgICAgZnJhbWUudGltZVN0YW1wID0gc2l6ZTsgLy8gaW4gcmF3IEFBQywgYWxsIHN1YnNlcXVlbnQgZGF0YSB3aWxsIGJlIHRpbWVzdGFtcGVkIGJhc2VkXG4gICAgICAgICAgICAgIC8vIG9uIHRoZSB2YWx1ZSBvZiB0aGlzIGZyYW1lXG4gICAgICAgICAgICAgIC8vIHdlIGNvdWxkbid0IGhhdmUga25vd24gdGhlIGFwcHJvcHJpYXRlIHB0cyBhbmQgZHRzIGJlZm9yZVxuICAgICAgICAgICAgICAvLyBwYXJzaW5nIHRoaXMgSUQzIHRhZyBzbyBzZXQgdGhvc2UgdmFsdWVzIG5vd1xuXG4gICAgICAgICAgICAgIGlmICh0YWcucHRzID09PSB1bmRlZmluZWQgJiYgdGFnLmR0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGFnLnB0cyA9IGZyYW1lLnRpbWVTdGFtcDtcbiAgICAgICAgICAgICAgICB0YWcuZHRzID0gZnJhbWUudGltZVN0YW1wO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1lc3RhbXAnLCBmcmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGFnLmZyYW1lcy5wdXNoKGZyYW1lKTtcbiAgICAgICAgICBmcmFtZVN0YXJ0ICs9IDEwOyAvLyBhZHZhbmNlIHBhc3QgdGhlIGZyYW1lIGhlYWRlclxuXG4gICAgICAgICAgZnJhbWVTdGFydCArPSBmcmFtZVNpemU7IC8vIGFkdmFuY2UgcGFzdCB0aGUgZnJhbWUgYm9keVxuICAgICAgICB9IHdoaWxlIChmcmFtZVN0YXJ0IDwgdGFnU2l6ZSk7XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgdGFnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9NZXRhZGF0YVN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIG1ldGFkYXRhU3RyZWFtID0gX01ldGFkYXRhU3RyZWFtO1xuICAgIHZhciBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSQxID0gdGltZXN0YW1wUm9sbG92ZXJTdHJlYW0uVGltZXN0YW1wUm9sbG92ZXJTdHJlYW07IC8vIG9iamVjdCB0eXBlc1xuXG4gICAgdmFyIF9UcmFuc3BvcnRQYWNrZXRTdHJlYW0sIF9UcmFuc3BvcnRQYXJzZVN0cmVhbSwgX0VsZW1lbnRhcnlTdHJlYW07IC8vIGNvbnN0YW50c1xuXG5cbiAgICB2YXIgTVAyVF9QQUNLRVRfTEVOR1RIID0gMTg4LFxuICAgICAgICAvLyBieXRlc1xuICAgIFNZTkNfQllURSA9IDB4NDc7XG4gICAgLyoqXG4gICAgICogU3BsaXRzIGFuIGluY29taW5nIHN0cmVhbSBvZiBiaW5hcnkgZGF0YSBpbnRvIE1QRUctMiBUcmFuc3BvcnRcbiAgICAgKiBTdHJlYW0gcGFja2V0cy5cbiAgICAgKi9cblxuICAgIF9UcmFuc3BvcnRQYWNrZXRTdHJlYW0gPSBmdW5jdGlvbiBUcmFuc3BvcnRQYWNrZXRTdHJlYW0oKSB7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoTVAyVF9QQUNLRVRfTEVOR1RIKSxcbiAgICAgICAgICBieXRlc0luQnVmZmVyID0gMDtcblxuICAgICAgX1RyYW5zcG9ydFBhY2tldFN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpOyAvLyBEZWxpdmVyIG5ldyBieXRlcyB0byB0aGUgc3RyZWFtLlxuXG4gICAgICAvKipcbiAgICAgICAqIFNwbGl0IGEgc3RyZWFtIG9mIGRhdGEgaW50byBNMlRTIHBhY2tldHNcbiAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChieXRlcykge1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDAsXG4gICAgICAgICAgICBlbmRJbmRleCA9IE1QMlRfUEFDS0VUX0xFTkdUSCxcbiAgICAgICAgICAgIGV2ZXJ5dGhpbmc7IC8vIElmIHRoZXJlIGFyZSBieXRlcyByZW1haW5pbmcgZnJvbSB0aGUgbGFzdCBzZWdtZW50LCBwcmVwZW5kIHRoZW0gdG8gdGhlXG4gICAgICAgIC8vIGJ5dGVzIHRoYXQgd2VyZSBwdXNoZWQgaW5cblxuICAgICAgICBpZiAoYnl0ZXNJbkJ1ZmZlcikge1xuICAgICAgICAgIGV2ZXJ5dGhpbmcgPSBuZXcgVWludDhBcnJheShieXRlcy5ieXRlTGVuZ3RoICsgYnl0ZXNJbkJ1ZmZlcik7XG4gICAgICAgICAgZXZlcnl0aGluZy5zZXQoYnVmZmVyLnN1YmFycmF5KDAsIGJ5dGVzSW5CdWZmZXIpKTtcbiAgICAgICAgICBldmVyeXRoaW5nLnNldChieXRlcywgYnl0ZXNJbkJ1ZmZlcik7XG4gICAgICAgICAgYnl0ZXNJbkJ1ZmZlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlcnl0aGluZyA9IGJ5dGVzO1xuICAgICAgICB9IC8vIFdoaWxlIHdlIGhhdmUgZW5vdWdoIGRhdGEgZm9yIGEgcGFja2V0XG5cblxuICAgICAgICB3aGlsZSAoZW5kSW5kZXggPCBldmVyeXRoaW5nLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAvLyBMb29rIGZvciBhIHBhaXIgb2Ygc3RhcnQgYW5kIGVuZCBzeW5jIGJ5dGVzIGluIHRoZSBkYXRhLi5cbiAgICAgICAgICBpZiAoZXZlcnl0aGluZ1tzdGFydEluZGV4XSA9PT0gU1lOQ19CWVRFICYmIGV2ZXJ5dGhpbmdbZW5kSW5kZXhdID09PSBTWU5DX0JZVEUpIHtcbiAgICAgICAgICAgIC8vIFdlIGZvdW5kIGEgcGFja2V0IHNvIGVtaXQgaXQgYW5kIGp1bXAgb25lIHdob2xlIHBhY2tldCBmb3J3YXJkIGluXG4gICAgICAgICAgICAvLyB0aGUgc3RyZWFtXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBldmVyeXRoaW5nLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KSk7XG4gICAgICAgICAgICBzdGFydEluZGV4ICs9IE1QMlRfUEFDS0VUX0xFTkdUSDtcbiAgICAgICAgICAgIGVuZEluZGV4ICs9IE1QMlRfUEFDS0VUX0xFTkdUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAgICAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgICAgICAgLy8gYSBwYWNrZXRcblxuXG4gICAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgICAgICAgIGVuZEluZGV4Kys7XG4gICAgICAgIH0gLy8gSWYgdGhlcmUgd2FzIHNvbWUgZGF0YSBsZWZ0IG92ZXIgYXQgdGhlIGVuZCBvZiB0aGUgc2VnbWVudCB0aGF0IGNvdWxkbid0XG4gICAgICAgIC8vIHBvc3NpYmx5IGJlIGEgd2hvbGUgcGFja2V0LCBrZWVwIGl0IGJlY2F1c2UgaXQgbWlnaHQgYmUgdGhlIHN0YXJ0IG9mIGEgcGFja2V0XG4gICAgICAgIC8vIHRoYXQgY29udGludWVzIGluIHRoZSBuZXh0IHNlZ21lbnRcblxuXG4gICAgICAgIGlmIChzdGFydEluZGV4IDwgZXZlcnl0aGluZy5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgYnVmZmVyLnNldChldmVyeXRoaW5nLnN1YmFycmF5KHN0YXJ0SW5kZXgpLCAwKTtcbiAgICAgICAgICBieXRlc0luQnVmZmVyID0gZXZlcnl0aGluZy5ieXRlTGVuZ3RoIC0gc3RhcnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogUGFzc2VzIGlkZW50aWZpZWQgTTJUUyBwYWNrZXRzIHRvIHRoZSBUcmFuc3BvcnRQYXJzZVN0cmVhbSB0byBiZSBwYXJzZWRcbiAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIHRoZSBidWZmZXIgY29udGFpbnMgYSB3aG9sZSBwYWNrZXQgd2hlbiB3ZSBhcmUgYmVpbmcgZmx1c2hlZCwgZW1pdCBpdFxuICAgICAgICAvLyBhbmQgZW1wdHkgdGhlIGJ1ZmZlci4gT3RoZXJ3aXNlIGhvbGQgb250byB0aGUgZGF0YSBiZWNhdXNlIGl0IG1heSBiZVxuICAgICAgICAvLyBpbXBvcnRhbnQgZm9yIGRlY29kaW5nIHRoZSBuZXh0IHNlZ21lbnRcbiAgICAgICAgaWYgKGJ5dGVzSW5CdWZmZXIgPT09IE1QMlRfUEFDS0VUX0xFTkdUSCAmJiBidWZmZXJbMF0gPT09IFNZTkNfQllURSkge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGJ1ZmZlcik7XG4gICAgICAgICAgYnl0ZXNJbkJ1ZmZlciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW5kVGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdlbmRlZHRpbWVsaW5lJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBieXRlc0luQnVmZmVyID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX1RyYW5zcG9ydFBhY2tldFN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhbiBNUDJUIFRyYW5zcG9ydFBhY2tldFN0cmVhbSBhbmQgZW1pdHMgZGF0YSBldmVudHMgd2l0aCBwYXJzZWRcbiAgICAgKiBmb3JtcyBvZiB0aGUgaW5kaXZpZHVhbCB0cmFuc3BvcnQgc3RyZWFtIHBhY2tldHMuXG4gICAgICovXG5cbiAgICBfVHJhbnNwb3J0UGFyc2VTdHJlYW0gPSBmdW5jdGlvbiBUcmFuc3BvcnRQYXJzZVN0cmVhbSgpIHtcbiAgICAgIHZhciBwYXJzZVBzaSwgcGFyc2VQYXQsIHBhcnNlUG10LCBzZWxmO1xuXG4gICAgICBfVHJhbnNwb3J0UGFyc2VTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnBhY2tldHNXYWl0aW5nRm9yUG10ID0gW107XG4gICAgICB0aGlzLnByb2dyYW1NYXBUYWJsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgcGFyc2VQc2kgPSBmdW5jdGlvbiBwYXJzZVBzaShwYXlsb2FkLCBwc2kpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7IC8vIFBTSSBwYWNrZXRzIG1heSBiZSBzcGxpdCBpbnRvIG11bHRpcGxlIHNlY3Rpb25zIGFuZCB0aG9zZVxuICAgICAgICAvLyBzZWN0aW9ucyBtYXkgYmUgc3BsaXQgaW50byBtdWx0aXBsZSBwYWNrZXRzLiBJZiBhIFBTSVxuICAgICAgICAvLyBzZWN0aW9uIHN0YXJ0cyBpbiB0aGlzIHBhY2tldCwgdGhlIHBheWxvYWRfdW5pdF9zdGFydF9pbmRpY2F0b3JcbiAgICAgICAgLy8gd2lsbCBiZSB0cnVlIGFuZCB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgcGF5bG9hZCB3aWxsIGluZGljYXRlXG4gICAgICAgIC8vIHRoZSBvZmZzZXQgZnJvbSB0aGUgY3VycmVudCBwb3NpdGlvbiB0byB0aGUgc3RhcnQgb2YgdGhlXG4gICAgICAgIC8vIHNlY3Rpb24uXG5cbiAgICAgICAgaWYgKHBzaS5wYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgb2Zmc2V0ICs9IHBheWxvYWRbb2Zmc2V0XSArIDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHNpLnR5cGUgPT09ICdwYXQnKSB7XG4gICAgICAgICAgcGFyc2VQYXQocGF5bG9hZC5zdWJhcnJheShvZmZzZXQpLCBwc2kpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlUG10KHBheWxvYWQuc3ViYXJyYXkob2Zmc2V0KSwgcHNpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcGFyc2VQYXQgPSBmdW5jdGlvbiBwYXJzZVBhdChwYXlsb2FkLCBwYXQpIHtcbiAgICAgICAgcGF0LnNlY3Rpb25fbnVtYmVyID0gcGF5bG9hZFs3XTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgICBwYXQubGFzdF9zZWN0aW9uX251bWJlciA9IHBheWxvYWRbOF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgICAgIC8vIHNraXAgdGhlIFBTSSBoZWFkZXIgYW5kIHBhcnNlIHRoZSBmaXJzdCBQTVQgZW50cnlcblxuICAgICAgICBzZWxmLnBtdFBpZCA9IChwYXlsb2FkWzEwXSAmIDB4MUYpIDw8IDggfCBwYXlsb2FkWzExXTtcbiAgICAgICAgcGF0LnBtdFBpZCA9IHNlbGYucG10UGlkO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogUGFyc2Ugb3V0IHRoZSByZWxldmFudCBmaWVsZHMgb2YgYSBQcm9ncmFtIE1hcCBUYWJsZSAoUE1UKS5cbiAgICAgICAqIEBwYXJhbSBwYXlsb2FkIHtVaW50OEFycmF5fSB0aGUgUE1ULXNwZWNpZmljIHBvcnRpb24gb2YgYW4gTVAyVFxuICAgICAgICogcGFja2V0LiBUaGUgZmlyc3QgYnl0ZSBpbiB0aGlzIGFycmF5IHNob3VsZCBiZSB0aGUgdGFibGVfaWRcbiAgICAgICAqIGZpZWxkLlxuICAgICAgICogQHBhcmFtIHBtdCB7b2JqZWN0fSB0aGUgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIGRlY29yYXRlZCB3aXRoXG4gICAgICAgKiBmaWVsZHMgcGFyc2VkIGZyb20gdGhlIFBNVC5cbiAgICAgICAqL1xuXG5cbiAgICAgIHBhcnNlUG10ID0gZnVuY3Rpb24gcGFyc2VQbXQocGF5bG9hZCwgcG10KSB7XG4gICAgICAgIHZhciBzZWN0aW9uTGVuZ3RoLCB0YWJsZUVuZCwgcHJvZ3JhbUluZm9MZW5ndGgsIG9mZnNldDsgLy8gUE1UcyBjYW4gYmUgc2VudCBhaGVhZCBvZiB0aGUgdGltZSB3aGVuIHRoZXkgc2hvdWxkIGFjdHVhbGx5XG4gICAgICAgIC8vIHRha2UgZWZmZWN0LiBXZSBkb24ndCBiZWxpZXZlIHRoaXMgc2hvdWxkIGV2ZXIgYmUgdGhlIGNhc2VcbiAgICAgICAgLy8gZm9yIEhMUyBidXQgd2UnbGwgaWdub3JlIFwiZm9yd2FyZFwiIFBNVCBkZWNsYXJhdGlvbnMgaWYgd2Ugc2VlXG4gICAgICAgIC8vIHRoZW0uIEZ1dHVyZSBQTVQgZGVjbGFyYXRpb25zIGhhdmUgdGhlIGN1cnJlbnRfbmV4dF9pbmRpY2F0b3JcbiAgICAgICAgLy8gc2V0IHRvIHplcm8uXG5cbiAgICAgICAgaWYgKCEocGF5bG9hZFs1XSAmIDB4MDEpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIG92ZXJ3cml0ZSBhbnkgZXhpc3RpbmcgcHJvZ3JhbSBtYXAgdGFibGVcblxuXG4gICAgICAgIHNlbGYucHJvZ3JhbU1hcFRhYmxlID0ge1xuICAgICAgICAgIHZpZGVvOiBudWxsLFxuICAgICAgICAgIGF1ZGlvOiBudWxsLFxuICAgICAgICAgICd0aW1lZC1tZXRhZGF0YSc6IHt9XG4gICAgICAgIH07IC8vIHRoZSBtYXBwaW5nIHRhYmxlIGVuZHMgYXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBzZWN0aW9uXG5cbiAgICAgICAgc2VjdGlvbkxlbmd0aCA9IChwYXlsb2FkWzFdICYgMHgwZikgPDwgOCB8IHBheWxvYWRbMl07XG4gICAgICAgIHRhYmxlRW5kID0gMyArIHNlY3Rpb25MZW5ndGggLSA0OyAvLyB0byBkZXRlcm1pbmUgd2hlcmUgdGhlIHRhYmxlIGlzLCB3ZSBoYXZlIHRvIGZpZ3VyZSBvdXQgaG93XG4gICAgICAgIC8vIGxvbmcgdGhlIHByb2dyYW0gaW5mbyBkZXNjcmlwdG9ycyBhcmVcblxuICAgICAgICBwcm9ncmFtSW5mb0xlbmd0aCA9IChwYXlsb2FkWzEwXSAmIDB4MGYpIDw8IDggfCBwYXlsb2FkWzExXTsgLy8gYWR2YW5jZSB0aGUgb2Zmc2V0IHRvIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgbWFwcGluZyB0YWJsZVxuXG4gICAgICAgIG9mZnNldCA9IDEyICsgcHJvZ3JhbUluZm9MZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHRhYmxlRW5kKSB7XG4gICAgICAgICAgdmFyIHN0cmVhbVR5cGUgPSBwYXlsb2FkW29mZnNldF07XG4gICAgICAgICAgdmFyIHBpZCA9IChwYXlsb2FkW29mZnNldCArIDFdICYgMHgxRikgPDwgOCB8IHBheWxvYWRbb2Zmc2V0ICsgMl07IC8vIG9ubHkgbWFwIGEgc2luZ2xlIGVsZW1lbnRhcnlfcGlkIGZvciBhdWRpbyBhbmQgdmlkZW8gc3RyZWFtIHR5cGVzXG4gICAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgYmUgZG9uZSBmb3IgbWV0YWRhdGEgdG9vPyBmb3Igbm93IG1haW50YWluIGJlaGF2aW9yIG9mXG4gICAgICAgICAgLy8gICAgICAgbXVsdGlwbGUgbWV0YWRhdGEgc3RyZWFtc1xuXG4gICAgICAgICAgaWYgKHN0cmVhbVR5cGUgPT09IHN0cmVhbVR5cGVzLkgyNjRfU1RSRUFNX1RZUEUgJiYgc2VsZi5wcm9ncmFtTWFwVGFibGUudmlkZW8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlbGYucHJvZ3JhbU1hcFRhYmxlLnZpZGVvID0gcGlkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtVHlwZSA9PT0gc3RyZWFtVHlwZXMuQURUU19TVFJFQU1fVFlQRSAmJiBzZWxmLnByb2dyYW1NYXBUYWJsZS5hdWRpbyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc2VsZi5wcm9ncmFtTWFwVGFibGUuYXVkaW8gPSBwaWQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW1UeXBlID09PSBzdHJlYW1UeXBlcy5NRVRBREFUQV9TVFJFQU1fVFlQRSkge1xuICAgICAgICAgICAgLy8gbWFwIHBpZCB0byBzdHJlYW0gdHlwZSBmb3IgbWV0YWRhdGEgc3RyZWFtc1xuICAgICAgICAgICAgc2VsZi5wcm9ncmFtTWFwVGFibGVbJ3RpbWVkLW1ldGFkYXRhJ11bcGlkXSA9IHN0cmVhbVR5cGU7XG4gICAgICAgICAgfSAvLyBtb3ZlIHRvIHRoZSBuZXh0IHRhYmxlIGVudHJ5XG4gICAgICAgICAgLy8gc2tpcCBwYXN0IHRoZSBlbGVtZW50YXJ5IHN0cmVhbSBkZXNjcmlwdG9ycywgaWYgcHJlc2VudFxuXG5cbiAgICAgICAgICBvZmZzZXQgKz0gKChwYXlsb2FkW29mZnNldCArIDNdICYgMHgwRikgPDwgOCB8IHBheWxvYWRbb2Zmc2V0ICsgNF0pICsgNTtcbiAgICAgICAgfSAvLyByZWNvcmQgdGhlIG1hcCBvbiB0aGUgcGFja2V0IGFzIHdlbGxcblxuXG4gICAgICAgIHBtdC5wcm9ncmFtTWFwVGFibGUgPSBzZWxmLnByb2dyYW1NYXBUYWJsZTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIERlbGl2ZXIgYSBuZXcgTVAyVCBwYWNrZXQgdG8gdGhlIG5leHQgc3RyZWFtIGluIHRoZSBwaXBlbGluZS5cbiAgICAgICAqL1xuXG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgICAgICAgb2Zmc2V0ID0gNDtcbiAgICAgICAgcmVzdWx0LnBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IgPSAhIShwYWNrZXRbMV0gJiAweDQwKTsgLy8gcGlkIGlzIGEgMTMtYml0IGZpZWxkIHN0YXJ0aW5nIGF0IHRoZSBsYXN0IGJpdCBvZiBwYWNrZXRbMV1cblxuICAgICAgICByZXN1bHQucGlkID0gcGFja2V0WzFdICYgMHgxZjtcbiAgICAgICAgcmVzdWx0LnBpZCA8PD0gODtcbiAgICAgICAgcmVzdWx0LnBpZCB8PSBwYWNrZXRbMl07IC8vIGlmIGFuIGFkYXB0aW9uIGZpZWxkIGlzIHByZXNlbnQsIGl0cyBsZW5ndGggaXMgc3BlY2lmaWVkIGJ5IHRoZVxuICAgICAgICAvLyBmaWZ0aCBieXRlIG9mIHRoZSBUUyBwYWNrZXQgaGVhZGVyLiBUaGUgYWRhcHRhdGlvbiBmaWVsZCBpc1xuICAgICAgICAvLyB1c2VkIHRvIGFkZCBzdHVmZmluZyB0byBQRVMgcGFja2V0cyB0aGF0IGRvbid0IGZpbGwgYSBjb21wbGV0ZVxuICAgICAgICAvLyBUUyBwYWNrZXQsIGFuZCB0byBzcGVjaWZ5IHNvbWUgZm9ybXMgb2YgdGltaW5nIGFuZCBjb250cm9sIGRhdGFcbiAgICAgICAgLy8gdGhhdCB3ZSBkbyBub3QgY3VycmVudGx5IHVzZS5cblxuICAgICAgICBpZiAoKHBhY2tldFszXSAmIDB4MzApID4+PiA0ID4gMHgwMSkge1xuICAgICAgICAgIG9mZnNldCArPSBwYWNrZXRbb2Zmc2V0XSArIDE7XG4gICAgICAgIH0gLy8gcGFyc2UgdGhlIHJlc3Qgb2YgdGhlIHBhY2tldCBiYXNlZCBvbiB0aGUgdHlwZVxuXG5cbiAgICAgICAgaWYgKHJlc3VsdC5waWQgPT09IDApIHtcbiAgICAgICAgICByZXN1bHQudHlwZSA9ICdwYXQnO1xuICAgICAgICAgIHBhcnNlUHNpKHBhY2tldC5zdWJhcnJheShvZmZzZXQpLCByZXN1bHQpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnBpZCA9PT0gdGhpcy5wbXRQaWQpIHtcbiAgICAgICAgICByZXN1bHQudHlwZSA9ICdwbXQnO1xuICAgICAgICAgIHBhcnNlUHNpKHBhY2tldC5zdWJhcnJheShvZmZzZXQpLCByZXN1bHQpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHJlc3VsdCk7IC8vIGlmIHRoZXJlIGFyZSBhbnkgcGFja2V0cyB3YWl0aW5nIGZvciBhIFBNVCB0byBiZSBmb3VuZCwgcHJvY2VzcyB0aGVtIG5vd1xuXG4gICAgICAgICAgd2hpbGUgKHRoaXMucGFja2V0c1dhaXRpbmdGb3JQbXQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NQZXNfLmFwcGx5KHRoaXMsIHRoaXMucGFja2V0c1dhaXRpbmdGb3JQbXQuc2hpZnQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvZ3JhbU1hcFRhYmxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIHdlIGhhdmUgbm90IHNlZW4gYSBQTVQgeWV0LCBkZWZlciBmdXJ0aGVyIHByb2Nlc3Npbmcgb2ZcbiAgICAgICAgICAvLyBQRVMgcGFja2V0cyB1bnRpbCBvbmUgaGFzIGJlZW4gcGFyc2VkXG4gICAgICAgICAgdGhpcy5wYWNrZXRzV2FpdGluZ0ZvclBtdC5wdXNoKFtwYWNrZXQsIG9mZnNldCwgcmVzdWx0XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wcm9jZXNzUGVzXyhwYWNrZXQsIG9mZnNldCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5wcm9jZXNzUGVzXyA9IGZ1bmN0aW9uIChwYWNrZXQsIG9mZnNldCwgcmVzdWx0KSB7XG4gICAgICAgIC8vIHNldCB0aGUgYXBwcm9wcmlhdGUgc3RyZWFtIHR5cGVcbiAgICAgICAgaWYgKHJlc3VsdC5waWQgPT09IHRoaXMucHJvZ3JhbU1hcFRhYmxlLnZpZGVvKSB7XG4gICAgICAgICAgcmVzdWx0LnN0cmVhbVR5cGUgPSBzdHJlYW1UeXBlcy5IMjY0X1NUUkVBTV9UWVBFO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5waWQgPT09IHRoaXMucHJvZ3JhbU1hcFRhYmxlLmF1ZGlvKSB7XG4gICAgICAgICAgcmVzdWx0LnN0cmVhbVR5cGUgPSBzdHJlYW1UeXBlcy5BRFRTX1NUUkVBTV9UWVBFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIG5vdCB2aWRlbyBvciBhdWRpbywgaXQgaXMgdGltZWQtbWV0YWRhdGEgb3IgdW5rbm93blxuICAgICAgICAgIC8vIGlmIHVua25vd24sIHN0cmVhbVR5cGUgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgICByZXN1bHQuc3RyZWFtVHlwZSA9IHRoaXMucHJvZ3JhbU1hcFRhYmxlWyd0aW1lZC1tZXRhZGF0YSddW3Jlc3VsdC5waWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnR5cGUgPSAncGVzJztcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBwYWNrZXQuc3ViYXJyYXkob2Zmc2V0KTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgcmVzdWx0KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9UcmFuc3BvcnRQYXJzZVN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgX1RyYW5zcG9ydFBhcnNlU3RyZWFtLlNUUkVBTV9UWVBFUyA9IHtcbiAgICAgIGgyNjQ6IDB4MWIsXG4gICAgICBhZHRzOiAweDBmXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWNvbnNpc3R1dGVzIHByb2dyYW0gZWxlbWVudGFyeSBzdHJlYW0gKFBFUykgcGFja2V0cyBmcm9tIHBhcnNlZFxuICAgICAqIHRyYW5zcG9ydCBzdHJlYW0gcGFja2V0cy4gVGhhdCBpcywgaWYgeW91IHBpcGUgYW5cbiAgICAgKiBtcDJ0LlRyYW5zcG9ydFBhcnNlU3RyZWFtIGludG8gYSBtcDJ0LkVsZW1lbnRhcnlTdHJlYW0sIHRoZSBvdXRwdXRcbiAgICAgKiBldmVudHMgd2lsbCBiZSBldmVudHMgd2hpY2ggY2FwdHVyZSB0aGUgYnl0ZXMgZm9yIGluZGl2aWR1YWwgUEVTXG4gICAgICogcGFja2V0cyBwbHVzIHJlbGV2YW50IG1ldGFkYXRhIHRoYXQgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gdGhlXG4gICAgICogY29udGFpbmVyLlxuICAgICAqL1xuXG4gICAgX0VsZW1lbnRhcnlTdHJlYW0gPSBmdW5jdGlvbiBFbGVtZW50YXJ5U3RyZWFtKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIC8vIFBFUyBwYWNrZXQgZnJhZ21lbnRzXG4gICAgICB2aWRlbyA9IHtcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0sXG4gICAgICAgICAgYXVkaW8gPSB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9LFxuICAgICAgICAgIHRpbWVkTWV0YWRhdGEgPSB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9LFxuICAgICAgICAgIHByb2dyYW1NYXBUYWJsZSxcbiAgICAgICAgICBwYXJzZVBlcyA9IGZ1bmN0aW9uIHBhcnNlUGVzKHBheWxvYWQsIHBlcykge1xuICAgICAgICB2YXIgcHRzRHRzRmxhZ3M7IC8vIGdldCB0aGUgcGFja2V0IGxlbmd0aCwgdGhpcyB3aWxsIGJlIDAgZm9yIHZpZGVvXG5cbiAgICAgICAgcGVzLnBhY2tldExlbmd0aCA9IDYgKyAocGF5bG9hZFs0XSA8PCA4IHwgcGF5bG9hZFs1XSk7IC8vIGZpbmQgb3V0IGlmIHRoaXMgcGFja2V0cyBzdGFydHMgYSBuZXcga2V5ZnJhbWVcblxuICAgICAgICBwZXMuZGF0YUFsaWdubWVudEluZGljYXRvciA9IChwYXlsb2FkWzZdICYgMHgwNCkgIT09IDA7IC8vIFBFUyBwYWNrZXRzIG1heSBiZSBhbm5vdGF0ZWQgd2l0aCBhIFBUUyB2YWx1ZSwgb3IgYSBQVFMgdmFsdWVcbiAgICAgICAgLy8gYW5kIGEgRFRTIHZhbHVlLiBEZXRlcm1pbmUgd2hhdCBjb21iaW5hdGlvbiBvZiB2YWx1ZXMgaXNcbiAgICAgICAgLy8gYXZhaWxhYmxlIHRvIHdvcmsgd2l0aC5cblxuICAgICAgICBwdHNEdHNGbGFncyA9IHBheWxvYWRbN107IC8vIFBUUyBhbmQgRFRTIGFyZSBub3JtYWxseSBzdG9yZWQgYXMgYSAzMy1iaXQgbnVtYmVyLiAgSmF2YXNjcmlwdFxuICAgICAgICAvLyBwZXJmb3JtcyBhbGwgYml0d2lzZSBvcGVyYXRpb25zIG9uIDMyLWJpdCBpbnRlZ2VycyBidXQgamF2YXNjcmlwdFxuICAgICAgICAvLyBzdXBwb3J0cyBhIG11Y2ggZ3JlYXRlciByYW5nZSAoNTItYml0cykgb2YgaW50ZWdlciB1c2luZyBzdGFuZGFyZFxuICAgICAgICAvLyBtYXRoZW1hdGljYWwgb3BlcmF0aW9ucy5cbiAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgMzEtYml0IHZhbHVlIHVzaW5nIGJpdHdpc2Ugb3BlcmF0b3JzIG92ZXIgdGhlIDMxXG4gICAgICAgIC8vIG1vc3Qgc2lnbmlmaWNhbnQgYml0cyBhbmQgdGhlbiBtdWx0aXBseSBieSA0IChlcXVhbCB0byBhIGxlZnQtc2hpZnRcbiAgICAgICAgLy8gb2YgMikgYmVmb3JlIHdlIGFkZCB0aGUgZmluYWwgMiBsZWFzdCBzaWduaWZpY2FudCBiaXRzIG9mIHRoZVxuICAgICAgICAvLyB0aW1lc3RhbXAgKGVxdWFsIHRvIGFuIE9SLilcblxuICAgICAgICBpZiAocHRzRHRzRmxhZ3MgJiAweEMwKSB7XG4gICAgICAgICAgLy8gdGhlIFBUUyBhbmQgRFRTIGFyZSBub3Qgd3JpdHRlbiBvdXQgZGlyZWN0bHkuIEZvciBpbmZvcm1hdGlvblxuICAgICAgICAgIC8vIG9uIGhvdyB0aGV5IGFyZSBlbmNvZGVkLCBzZWVcbiAgICAgICAgICAvLyBodHRwOi8vZHZkLnNvdXJjZWZvcmdlLm5ldC9kdmRpbmZvL3Blcy1oZHIuaHRtbFxuICAgICAgICAgIHBlcy5wdHMgPSAocGF5bG9hZFs5XSAmIDB4MEUpIDw8IDI3IHwgKHBheWxvYWRbMTBdICYgMHhGRikgPDwgMjAgfCAocGF5bG9hZFsxMV0gJiAweEZFKSA8PCAxMiB8IChwYXlsb2FkWzEyXSAmIDB4RkYpIDw8IDUgfCAocGF5bG9hZFsxM10gJiAweEZFKSA+Pj4gMztcbiAgICAgICAgICBwZXMucHRzICo9IDQ7IC8vIExlZnQgc2hpZnQgYnkgMlxuXG4gICAgICAgICAgcGVzLnB0cyArPSAocGF5bG9hZFsxM10gJiAweDA2KSA+Pj4gMTsgLy8gT1IgYnkgdGhlIHR3byBMU0JzXG5cbiAgICAgICAgICBwZXMuZHRzID0gcGVzLnB0cztcblxuICAgICAgICAgIGlmIChwdHNEdHNGbGFncyAmIDB4NDApIHtcbiAgICAgICAgICAgIHBlcy5kdHMgPSAocGF5bG9hZFsxNF0gJiAweDBFKSA8PCAyNyB8IChwYXlsb2FkWzE1XSAmIDB4RkYpIDw8IDIwIHwgKHBheWxvYWRbMTZdICYgMHhGRSkgPDwgMTIgfCAocGF5bG9hZFsxN10gJiAweEZGKSA8PCA1IHwgKHBheWxvYWRbMThdICYgMHhGRSkgPj4+IDM7XG4gICAgICAgICAgICBwZXMuZHRzICo9IDQ7IC8vIExlZnQgc2hpZnQgYnkgMlxuXG4gICAgICAgICAgICBwZXMuZHRzICs9IChwYXlsb2FkWzE4XSAmIDB4MDYpID4+PiAxOyAvLyBPUiBieSB0aGUgdHdvIExTQnNcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gdGhlIGRhdGEgc2VjdGlvbiBzdGFydHMgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIFBFUyBoZWFkZXIuXG4gICAgICAgIC8vIHBlc19oZWFkZXJfZGF0YV9sZW5ndGggc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgaGVhZGVyIGJ5dGVzXG4gICAgICAgIC8vIHRoYXQgZm9sbG93IHRoZSBsYXN0IGJ5dGUgb2YgdGhlIGZpZWxkLlxuXG5cbiAgICAgICAgcGVzLmRhdGEgPSBwYXlsb2FkLnN1YmFycmF5KDkgKyBwYXlsb2FkWzhdKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICAqIFBhc3MgY29tcGxldGVseSBwYXJzZWQgUEVTIHBhY2tldHMgdG8gdGhlIG5leHQgc3RyZWFtIGluIHRoZSBwaXBlbGluZVxuICAgICAgICoqL1xuICAgICAgZmx1c2hTdHJlYW0gPSBmdW5jdGlvbiBmbHVzaFN0cmVhbShzdHJlYW0kJDEsIHR5cGUsIGZvcmNlRmx1c2gpIHtcbiAgICAgICAgdmFyIHBhY2tldERhdGEgPSBuZXcgVWludDhBcnJheShzdHJlYW0kJDEuc2l6ZSksXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0sXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIG9mZnNldCA9IDAsXG4gICAgICAgICAgICBwYWNrZXRGbHVzaGFibGUgPSBmYWxzZSxcbiAgICAgICAgICAgIGZyYWdtZW50OyAvLyBkbyBub3RoaW5nIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYnVmZmVyZWQgZGF0YSBmb3IgYSBjb21wbGV0ZVxuICAgICAgICAvLyBQRVMgaGVhZGVyXG5cbiAgICAgICAgaWYgKCFzdHJlYW0kJDEuZGF0YS5sZW5ndGggfHwgc3RyZWFtJCQxLnNpemUgPCA5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQudHJhY2tJZCA9IHN0cmVhbSQkMS5kYXRhWzBdLnBpZDsgLy8gcmVhc3NlbWJsZSB0aGUgcGFja2V0XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0cmVhbSQkMS5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZnJhZ21lbnQgPSBzdHJlYW0kJDEuZGF0YVtpXTtcbiAgICAgICAgICBwYWNrZXREYXRhLnNldChmcmFnbWVudC5kYXRhLCBvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSBmcmFnbWVudC5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIH0gLy8gcGFyc2UgYXNzZW1ibGVkIHBhY2tldCdzIFBFUyBoZWFkZXJcblxuXG4gICAgICAgIHBhcnNlUGVzKHBhY2tldERhdGEsIGV2ZW50KTsgLy8gbm9uLXZpZGVvIFBFUyBwYWNrZXRzIE1VU1QgaGF2ZSBhIG5vbi16ZXJvIFBFU19wYWNrZXRfbGVuZ3RoXG4gICAgICAgIC8vIGNoZWNrIHRoYXQgdGhlcmUgaXMgZW5vdWdoIHN0cmVhbSBkYXRhIHRvIGZpbGwgdGhlIHBhY2tldFxuXG4gICAgICAgIHBhY2tldEZsdXNoYWJsZSA9IHR5cGUgPT09ICd2aWRlbycgfHwgZXZlbnQucGFja2V0TGVuZ3RoIDw9IHN0cmVhbSQkMS5zaXplOyAvLyBmbHVzaCBwZW5kaW5nIHBhY2tldHMgaWYgdGhlIGNvbmRpdGlvbnMgYXJlIHJpZ2h0XG5cbiAgICAgICAgaWYgKGZvcmNlRmx1c2ggfHwgcGFja2V0Rmx1c2hhYmxlKSB7XG4gICAgICAgICAgc3RyZWFtJCQxLnNpemUgPSAwO1xuICAgICAgICAgIHN0cmVhbSQkMS5kYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIH0gLy8gb25seSBlbWl0IHBhY2tldHMgdGhhdCBhcmUgY29tcGxldGUuIHRoaXMgaXMgdG8gYXZvaWQgYXNzZW1ibGluZ1xuICAgICAgICAvLyBpbmNvbXBsZXRlIFBFUyBwYWNrZXRzIGR1ZSB0byBwb29yIHNlZ21lbnRhdGlvblxuXG5cbiAgICAgICAgaWYgKHBhY2tldEZsdXNoYWJsZSkge1xuICAgICAgICAgIHNlbGYudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX0VsZW1lbnRhcnlTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgIC8qKlxuICAgICAgICogSWRlbnRpZmllcyBNMlRTIHBhY2tldCB0eXBlcyBhbmQgcGFyc2VzIFBFUyBwYWNrZXRzIHVzaW5nIG1ldGFkYXRhXG4gICAgICAgKiBwYXJzZWQgZnJvbSB0aGUgUE1UXG4gICAgICAgKiovXG5cblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgKHtcbiAgICAgICAgICBwYXQ6IGZ1bmN0aW9uIHBhdCgpIHsvLyB3ZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBQTVQgdG8gYXJyaXZlIGFzIHdlbGwgYmVmb3JlIHdlXG4gICAgICAgICAgICAvLyBoYXZlIGFueSBtZWFuaW5nZnVsIG1ldGFkYXRhXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwZXM6IGZ1bmN0aW9uIHBlcygpIHtcbiAgICAgICAgICAgIHZhciBzdHJlYW0kJDEsIHN0cmVhbVR5cGU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YS5zdHJlYW1UeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2Ugc3RyZWFtVHlwZXMuSDI2NF9TVFJFQU1fVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBzdHJlYW1UeXBlcy5IMjY0X1NUUkVBTV9UWVBFOlxuICAgICAgICAgICAgICAgIHN0cmVhbSQkMSA9IHZpZGVvO1xuICAgICAgICAgICAgICAgIHN0cmVhbVR5cGUgPSAndmlkZW8nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2Ugc3RyZWFtVHlwZXMuQURUU19TVFJFQU1fVFlQRTpcbiAgICAgICAgICAgICAgICBzdHJlYW0kJDEgPSBhdWRpbztcbiAgICAgICAgICAgICAgICBzdHJlYW1UeXBlID0gJ2F1ZGlvJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIHN0cmVhbVR5cGVzLk1FVEFEQVRBX1NUUkVBTV9UWVBFOlxuICAgICAgICAgICAgICAgIHN0cmVhbSQkMSA9IHRpbWVkTWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgc3RyZWFtVHlwZSA9ICd0aW1lZC1tZXRhZGF0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdW5rbm93biBzdHJlYW0gdHlwZXNcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IC8vIGlmIGEgbmV3IHBhY2tldCBpcyBzdGFydGluZywgd2UgY2FuIGZsdXNoIHRoZSBjb21wbGV0ZWRcbiAgICAgICAgICAgIC8vIHBhY2tldFxuXG5cbiAgICAgICAgICAgIGlmIChkYXRhLnBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IpIHtcbiAgICAgICAgICAgICAgZmx1c2hTdHJlYW0oc3RyZWFtJCQxLCBzdHJlYW1UeXBlLCB0cnVlKTtcbiAgICAgICAgICAgIH0gLy8gYnVmZmVyIHRoaXMgZnJhZ21lbnQgdW50aWwgd2UgYXJlIHN1cmUgd2UndmUgcmVjZWl2ZWQgdGhlXG4gICAgICAgICAgICAvLyBjb21wbGV0ZSBwYXlsb2FkXG5cblxuICAgICAgICAgICAgc3RyZWFtJCQxLmRhdGEucHVzaChkYXRhKTtcbiAgICAgICAgICAgIHN0cmVhbSQkMS5zaXplICs9IGRhdGEuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG10OiBmdW5jdGlvbiBwbXQoKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdtZXRhZGF0YScsXG4gICAgICAgICAgICAgIHRyYWNrczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwcm9ncmFtTWFwVGFibGUgPSBkYXRhLnByb2dyYW1NYXBUYWJsZTsgLy8gdHJhbnNsYXRlIGF1ZGlvIGFuZCB2aWRlbyBzdHJlYW1zIHRvIHRyYWNrc1xuXG4gICAgICAgICAgICBpZiAocHJvZ3JhbU1hcFRhYmxlLnZpZGVvICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aW1lbGluZVN0YXJ0SW5mbzoge1xuICAgICAgICAgICAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaWQ6ICtwcm9ncmFtTWFwVGFibGUudmlkZW8sXG4gICAgICAgICAgICAgICAgY29kZWM6ICdhdmMnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd2aWRlbydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcm9ncmFtTWFwVGFibGUuYXVkaW8gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZXZlbnQudHJhY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpbWVsaW5lU3RhcnRJbmZvOiB7XG4gICAgICAgICAgICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpZDogK3Byb2dyYW1NYXBUYWJsZS5hdWRpbyxcbiAgICAgICAgICAgICAgICBjb2RlYzogJ2FkdHMnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdhdWRpbydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pW2RhdGEudHlwZV0oKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZpZGVvLnNpemUgPSAwO1xuICAgICAgICB2aWRlby5kYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIGF1ZGlvLnNpemUgPSAwO1xuICAgICAgICBhdWRpby5kYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIEZsdXNoIGFueSByZW1haW5pbmcgaW5wdXQuIFZpZGVvIFBFUyBwYWNrZXRzIG1heSBiZSBvZiB2YXJpYWJsZVxuICAgICAgICogbGVuZ3RoLiBOb3JtYWxseSwgdGhlIHN0YXJ0IG9mIGEgbmV3IHZpZGVvIHBhY2tldCBjYW4gdHJpZ2dlciB0aGVcbiAgICAgICAqIGZpbmFsaXphdGlvbiBvZiB0aGUgcHJldmlvdXMgcGFja2V0LiBUaGF0IGlzIG5vdCBwb3NzaWJsZSBpZiBub1xuICAgICAgICogbW9yZSB2aWRlbyBpcyBmb3J0aGNvbWluZywgaG93ZXZlci4gSW4gdGhhdCBjYXNlLCBzb21lIG90aGVyXG4gICAgICAgKiBtZWNoYW5pc20gKGxpa2UgdGhlIGVuZCBvZiB0aGUgZmlsZSkgaGFzIHRvIGJlIGVtcGxveWVkLiBXaGVuIGl0IGlzXG4gICAgICAgKiBjbGVhciB0aGF0IG5vIGFkZGl0aW9uYWwgZGF0YSBpcyBmb3J0aGNvbWluZywgY2FsbGluZyB0aGlzIG1ldGhvZFxuICAgICAgICogd2lsbCBmbHVzaCB0aGUgYnVmZmVyZWQgcGFja2V0cy5cbiAgICAgICAqL1xuXG5cbiAgICAgIHRoaXMuZmx1c2hTdHJlYW1zXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gISFUSElTIE9SREVSIElTIElNUE9SVEFOVCEhXG4gICAgICAgIC8vIHZpZGVvIGZpcnN0IHRoZW4gYXVkaW9cbiAgICAgICAgZmx1c2hTdHJlYW0odmlkZW8sICd2aWRlbycpO1xuICAgICAgICBmbHVzaFN0cmVhbShhdWRpbywgJ2F1ZGlvJyk7XG4gICAgICAgIGZsdXNoU3RyZWFtKHRpbWVkTWV0YWRhdGEsICd0aW1lZC1tZXRhZGF0YScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mbHVzaFN0cmVhbXNfKCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZG9uZScpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX0VsZW1lbnRhcnlTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIHZhciBtMnRzID0ge1xuICAgICAgUEFUX1BJRDogMHgwMDAwLFxuICAgICAgTVAyVF9QQUNLRVRfTEVOR1RIOiBNUDJUX1BBQ0tFVF9MRU5HVEgsXG4gICAgICBUcmFuc3BvcnRQYWNrZXRTdHJlYW06IF9UcmFuc3BvcnRQYWNrZXRTdHJlYW0sXG4gICAgICBUcmFuc3BvcnRQYXJzZVN0cmVhbTogX1RyYW5zcG9ydFBhcnNlU3RyZWFtLFxuICAgICAgRWxlbWVudGFyeVN0cmVhbTogX0VsZW1lbnRhcnlTdHJlYW0sXG4gICAgICBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbTogVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0kMSxcbiAgICAgIENhcHRpb25TdHJlYW06IGNhcHRpb25TdHJlYW0uQ2FwdGlvblN0cmVhbSxcbiAgICAgIENlYTYwOFN0cmVhbTogY2FwdGlvblN0cmVhbS5DZWE2MDhTdHJlYW0sXG4gICAgICBNZXRhZGF0YVN0cmVhbTogbWV0YWRhdGFTdHJlYW1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgdHlwZSBpbiBzdHJlYW1UeXBlcykge1xuICAgICAgaWYgKHN0cmVhbVR5cGVzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgIG0ydHNbdHlwZV0gPSBzdHJlYW1UeXBlc1t0eXBlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbTJ0c18xID0gbTJ0cztcbiAgICB2YXIgT05FX1NFQ09ORF9JTl9UUyQyID0gY2xvY2suT05FX1NFQ09ORF9JTl9UUztcblxuICAgIHZhciBfQWR0c1N0cmVhbTtcblxuICAgIHZhciBBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTID0gWzk2MDAwLCA4ODIwMCwgNjQwMDAsIDQ4MDAwLCA0NDEwMCwgMzIwMDAsIDI0MDAwLCAyMjA1MCwgMTYwMDAsIDEyMDAwLCAxMTAyNSwgODAwMCwgNzM1MF07XG4gICAgLypcbiAgICAgKiBBY2NlcHRzIGEgRWxlbWVudGFyeVN0cmVhbSBhbmQgZW1pdHMgZGF0YSBldmVudHMgd2l0aCBwYXJzZWRcbiAgICAgKiBBQUMgQXVkaW8gRnJhbWVzIG9mIHRoZSBpbmRpdmlkdWFsIHBhY2tldHMuIElucHV0IGF1ZGlvIGluIEFEVFNcbiAgICAgKiBmb3JtYXQgaXMgdW5wYWNrZWQgYW5kIHJlLWVtaXR0ZWQgYXMgQUFDIGZyYW1lcy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cDovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHA/dGl0bGU9QURUU1xuICAgICAqIEBzZWUgaHR0cDovL3dpa2kubXVsdGltZWRpYS5jeC8/dGl0bGU9VW5kZXJzdGFuZGluZ19BQUNcbiAgICAgKi9cblxuICAgIF9BZHRzU3RyZWFtID0gZnVuY3Rpb24gQWR0c1N0cmVhbShoYW5kbGVQYXJ0aWFsU2VnbWVudHMpIHtcbiAgICAgIHZhciBidWZmZXIsXG4gICAgICAgICAgZnJhbWVOdW0gPSAwO1xuXG4gICAgICBfQWR0c1N0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGZyYW1lTGVuZ3RoLFxuICAgICAgICAgICAgcHJvdGVjdGlvblNraXBCeXRlcyxcbiAgICAgICAgICAgIGZyYW1lRW5kLFxuICAgICAgICAgICAgb2xkQnVmZmVyLFxuICAgICAgICAgICAgc2FtcGxlQ291bnQsXG4gICAgICAgICAgICBhZHRzRnJhbWVEdXJhdGlvbjtcblxuICAgICAgICBpZiAoIWhhbmRsZVBhcnRpYWxTZWdtZW50cykge1xuICAgICAgICAgIGZyYW1lTnVtID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWNrZXQudHlwZSAhPT0gJ2F1ZGlvJykge1xuICAgICAgICAgIC8vIGlnbm9yZSBub24tYXVkaW8gZGF0YVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBQcmVwZW5kIGFueSBkYXRhIGluIHRoZSBidWZmZXIgdG8gdGhlIGlucHV0IGRhdGEgc28gdGhhdCB3ZSBjYW4gcGFyc2VcbiAgICAgICAgLy8gYWFjIGZyYW1lcyB0aGUgY3Jvc3MgYSBQRVMgcGFja2V0IGJvdW5kYXJ5XG5cblxuICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgb2xkQnVmZmVyID0gYnVmZmVyO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KG9sZEJ1ZmZlci5ieXRlTGVuZ3RoICsgcGFja2V0LmRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgYnVmZmVyLnNldChvbGRCdWZmZXIpO1xuICAgICAgICAgIGJ1ZmZlci5zZXQocGFja2V0LmRhdGEsIG9sZEJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXIgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgfSAvLyB1bnBhY2sgYW55IEFEVFMgZnJhbWVzIHdoaWNoIGhhdmUgYmVlbiBmdWxseSByZWNlaXZlZFxuICAgICAgICAvLyBmb3IgZGV0YWlscyBvbiB0aGUgQURUUyBoZWFkZXIsIHNlZSBodHRwOi8vd2lraS5tdWx0aW1lZGlhLmN4L2luZGV4LnBocD90aXRsZT1BRFRTXG5cblxuICAgICAgICB3aGlsZSAoaSArIDUgPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTG9vayBmb3IgdGhlIHN0YXJ0IG9mIGFuIEFEVFMgaGVhZGVyLi5cbiAgICAgICAgICBpZiAoYnVmZmVyW2ldICE9PSAweEZGIHx8IChidWZmZXJbaSArIDFdICYgMHhGNikgIT09IDB4RjApIHtcbiAgICAgICAgICAgIC8vIElmIGEgdmFsaWQgaGVhZGVyIHdhcyBub3QgZm91bmQsICBqdW1wIG9uZSBmb3J3YXJkIGFuZCBhdHRlbXB0IHRvXG4gICAgICAgICAgICAvLyBmaW5kIGEgdmFsaWQgQURUUyBoZWFkZXIgc3RhcnRpbmcgYXQgdGhlIG5leHQgYnl0ZVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBUaGUgcHJvdGVjdGlvbiBza2lwIGJpdCB0ZWxscyB1cyBpZiB3ZSBoYXZlIDIgYnl0ZXMgb2YgQ1JDIGRhdGEgYXQgdGhlXG4gICAgICAgICAgLy8gZW5kIG9mIHRoZSBBRFRTIGhlYWRlclxuXG5cbiAgICAgICAgICBwcm90ZWN0aW9uU2tpcEJ5dGVzID0gKH5idWZmZXJbaSArIDFdICYgMHgwMSkgKiAyOyAvLyBGcmFtZSBsZW5ndGggaXMgYSAxMyBiaXQgaW50ZWdlciBzdGFydGluZyAxNiBiaXRzIGZyb20gdGhlXG4gICAgICAgICAgLy8gZW5kIG9mIHRoZSBzeW5jIHNlcXVlbmNlXG5cbiAgICAgICAgICBmcmFtZUxlbmd0aCA9IChidWZmZXJbaSArIDNdICYgMHgwMykgPDwgMTEgfCBidWZmZXJbaSArIDRdIDw8IDMgfCAoYnVmZmVyW2kgKyA1XSAmIDB4ZTApID4+IDU7XG4gICAgICAgICAgc2FtcGxlQ291bnQgPSAoKGJ1ZmZlcltpICsgNl0gJiAweDAzKSArIDEpICogMTAyNDtcbiAgICAgICAgICBhZHRzRnJhbWVEdXJhdGlvbiA9IHNhbXBsZUNvdW50ICogT05FX1NFQ09ORF9JTl9UUyQyIC8gQURUU19TQU1QTElOR19GUkVRVUVOQ0lFU1soYnVmZmVyW2kgKyAyXSAmIDB4M2MpID4+PiAyXTtcbiAgICAgICAgICBmcmFtZUVuZCA9IGkgKyBmcmFtZUxlbmd0aDsgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggZGF0YSB0byBhY3R1YWxseSBmaW5pc2ggdGhpcyBBRFRTIGZyYW1lLCByZXR1cm5cbiAgICAgICAgICAvLyBhbmQgd2FpdCBmb3IgbW9yZSBkYXRhXG5cbiAgICAgICAgICBpZiAoYnVmZmVyLmJ5dGVMZW5ndGggPCBmcmFtZUVuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBkZWxpdmVyIHRoZSBjb21wbGV0ZSBBQUMgZnJhbWVcblxuXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgICAgcHRzOiBwYWNrZXQucHRzICsgZnJhbWVOdW0gKiBhZHRzRnJhbWVEdXJhdGlvbixcbiAgICAgICAgICAgIGR0czogcGFja2V0LmR0cyArIGZyYW1lTnVtICogYWR0c0ZyYW1lRHVyYXRpb24sXG4gICAgICAgICAgICBzYW1wbGVDb3VudDogc2FtcGxlQ291bnQsXG4gICAgICAgICAgICBhdWRpb29iamVjdHR5cGU6IChidWZmZXJbaSArIDJdID4+PiA2ICYgMHgwMykgKyAxLFxuICAgICAgICAgICAgY2hhbm5lbGNvdW50OiAoYnVmZmVyW2kgKyAyXSAmIDEpIDw8IDIgfCAoYnVmZmVyW2kgKyAzXSAmIDB4YzApID4+PiA2LFxuICAgICAgICAgICAgc2FtcGxlcmF0ZTogQURUU19TQU1QTElOR19GUkVRVUVOQ0lFU1soYnVmZmVyW2kgKyAyXSAmIDB4M2MpID4+PiAyXSxcbiAgICAgICAgICAgIHNhbXBsaW5nZnJlcXVlbmN5aW5kZXg6IChidWZmZXJbaSArIDJdICYgMHgzYykgPj4+IDIsXG4gICAgICAgICAgICAvLyBhc3N1bWUgSVNPL0lFQyAxNDQ5Ni0xMiBBdWRpb1NhbXBsZUVudHJ5IGRlZmF1bHQgb2YgMTZcbiAgICAgICAgICAgIHNhbXBsZXNpemU6IDE2LFxuICAgICAgICAgICAgZGF0YTogYnVmZmVyLnN1YmFycmF5KGkgKyA3ICsgcHJvdGVjdGlvblNraXBCeXRlcywgZnJhbWVFbmQpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZnJhbWVOdW0rKzsgLy8gSWYgdGhlIGJ1ZmZlciBpcyBlbXB0eSwgY2xlYXIgaXQgYW5kIHJldHVyblxuXG4gICAgICAgICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoID09PSBmcmFtZUVuZCkge1xuICAgICAgICAgICAgYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gUmVtb3ZlIHRoZSBmaW5pc2hlZCBmcmFtZSBmcm9tIHRoZSBidWZmZXIgYW5kIHN0YXJ0IHRoZSBwcm9jZXNzIGFnYWluXG5cblxuICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zdWJhcnJheShmcmFtZUVuZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZyYW1lTnVtID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBidWZmZXIgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW5kVGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJ1ZmZlciA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdlbmRlZHRpbWVsaW5lJyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfQWR0c1N0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIGFkdHMgPSBfQWR0c1N0cmVhbTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIHZhciBFeHBHb2xvbWI7XG4gICAgLyoqXG4gICAgICogUGFyc2VyIGZvciBleHBvbmVudGlhbCBHb2xvbWIgY29kZXMsIGEgdmFyaWFibGUtYml0d2lkdGggbnVtYmVyIGVuY29kaW5nXG4gICAgICogc2NoZW1lIHVzZWQgYnkgaDI2NC5cbiAgICAgKi9cblxuICAgIEV4cEdvbG9tYiA9IGZ1bmN0aW9uIEV4cEdvbG9tYih3b3JraW5nRGF0YSkge1xuICAgICAgdmFyIC8vIHRoZSBudW1iZXIgb2YgYnl0ZXMgbGVmdCB0byBleGFtaW5lIGluIHdvcmtpbmdEYXRhXG4gICAgICB3b3JraW5nQnl0ZXNBdmFpbGFibGUgPSB3b3JraW5nRGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICAgIC8vIHRoZSBjdXJyZW50IHdvcmQgYmVpbmcgZXhhbWluZWRcbiAgICAgIHdvcmtpbmdXb3JkID0gMCxcbiAgICAgICAgICAvLyA6dWludFxuICAgICAgLy8gdGhlIG51bWJlciBvZiBiaXRzIGxlZnQgdG8gZXhhbWluZSBpbiB0aGUgY3VycmVudCB3b3JkXG4gICAgICB3b3JraW5nQml0c0F2YWlsYWJsZSA9IDA7IC8vIDp1aW50O1xuICAgICAgLy8gKCk6dWludFxuXG4gICAgICB0aGlzLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDggKiB3b3JraW5nQnl0ZXNBdmFpbGFibGU7XG4gICAgICB9OyAvLyAoKTp1aW50XG5cblxuICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gOCAqIHdvcmtpbmdCeXRlc0F2YWlsYWJsZSArIHdvcmtpbmdCaXRzQXZhaWxhYmxlO1xuICAgICAgfTsgLy8gKCk6dm9pZFxuXG5cbiAgICAgIHRoaXMubG9hZFdvcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHdvcmtpbmdEYXRhLmJ5dGVMZW5ndGggLSB3b3JraW5nQnl0ZXNBdmFpbGFibGUsXG4gICAgICAgICAgICB3b3JraW5nQnl0ZXMgPSBuZXcgVWludDhBcnJheSg0KSxcbiAgICAgICAgICAgIGF2YWlsYWJsZUJ5dGVzID0gTWF0aC5taW4oNCwgd29ya2luZ0J5dGVzQXZhaWxhYmxlKTtcblxuICAgICAgICBpZiAoYXZhaWxhYmxlQnl0ZXMgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGJ5dGVzIGF2YWlsYWJsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgd29ya2luZ0J5dGVzLnNldCh3b3JraW5nRGF0YS5zdWJhcnJheShwb3NpdGlvbiwgcG9zaXRpb24gKyBhdmFpbGFibGVCeXRlcykpO1xuICAgICAgICB3b3JraW5nV29yZCA9IG5ldyBEYXRhVmlldyh3b3JraW5nQnl0ZXMuYnVmZmVyKS5nZXRVaW50MzIoMCk7IC8vIHRyYWNrIHRoZSBhbW91bnQgb2Ygd29ya2luZ0RhdGEgdGhhdCBoYXMgYmVlbiBwcm9jZXNzZWRcblxuICAgICAgICB3b3JraW5nQml0c0F2YWlsYWJsZSA9IGF2YWlsYWJsZUJ5dGVzICogODtcbiAgICAgICAgd29ya2luZ0J5dGVzQXZhaWxhYmxlIC09IGF2YWlsYWJsZUJ5dGVzO1xuICAgICAgfTsgLy8gKGNvdW50OmludCk6dm9pZFxuXG5cbiAgICAgIHRoaXMuc2tpcEJpdHMgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgICAgdmFyIHNraXBCeXRlczsgLy8gOmludFxuXG4gICAgICAgIGlmICh3b3JraW5nQml0c0F2YWlsYWJsZSA+IGNvdW50KSB7XG4gICAgICAgICAgd29ya2luZ1dvcmQgPDw9IGNvdW50O1xuICAgICAgICAgIHdvcmtpbmdCaXRzQXZhaWxhYmxlIC09IGNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50IC09IHdvcmtpbmdCaXRzQXZhaWxhYmxlO1xuICAgICAgICAgIHNraXBCeXRlcyA9IE1hdGguZmxvb3IoY291bnQgLyA4KTtcbiAgICAgICAgICBjb3VudCAtPSBza2lwQnl0ZXMgKiA4O1xuICAgICAgICAgIHdvcmtpbmdCeXRlc0F2YWlsYWJsZSAtPSBza2lwQnl0ZXM7XG4gICAgICAgICAgdGhpcy5sb2FkV29yZCgpO1xuICAgICAgICAgIHdvcmtpbmdXb3JkIDw8PSBjb3VudDtcbiAgICAgICAgICB3b3JraW5nQml0c0F2YWlsYWJsZSAtPSBjb3VudDtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gKHNpemU6aW50KTp1aW50XG5cblxuICAgICAgdGhpcy5yZWFkQml0cyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgIHZhciBiaXRzID0gTWF0aC5taW4od29ya2luZ0JpdHNBdmFpbGFibGUsIHNpemUpLFxuICAgICAgICAgICAgLy8gOnVpbnRcbiAgICAgICAgdmFsdSA9IHdvcmtpbmdXb3JkID4+PiAzMiAtIGJpdHM7IC8vIDp1aW50XG4gICAgICAgIC8vIGlmIHNpemUgPiAzMSwgaGFuZGxlIGVycm9yXG5cbiAgICAgICAgd29ya2luZ0JpdHNBdmFpbGFibGUgLT0gYml0cztcblxuICAgICAgICBpZiAod29ya2luZ0JpdHNBdmFpbGFibGUgPiAwKSB7XG4gICAgICAgICAgd29ya2luZ1dvcmQgPDw9IGJpdHM7XG4gICAgICAgIH0gZWxzZSBpZiAod29ya2luZ0J5dGVzQXZhaWxhYmxlID4gMCkge1xuICAgICAgICAgIHRoaXMubG9hZFdvcmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpdHMgPSBzaXplIC0gYml0cztcblxuICAgICAgICBpZiAoYml0cyA+IDApIHtcbiAgICAgICAgICByZXR1cm4gdmFsdSA8PCBiaXRzIHwgdGhpcy5yZWFkQml0cyhiaXRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1O1xuICAgICAgfTsgLy8gKCk6dWludFxuXG5cbiAgICAgIHRoaXMuc2tpcExlYWRpbmdaZXJvcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxlYWRpbmdaZXJvQ291bnQ7IC8vIDp1aW50XG5cbiAgICAgICAgZm9yIChsZWFkaW5nWmVyb0NvdW50ID0gMDsgbGVhZGluZ1plcm9Db3VudCA8IHdvcmtpbmdCaXRzQXZhaWxhYmxlOyArK2xlYWRpbmdaZXJvQ291bnQpIHtcbiAgICAgICAgICBpZiAoKHdvcmtpbmdXb3JkICYgMHg4MDAwMDAwMCA+Pj4gbGVhZGluZ1plcm9Db3VudCkgIT09IDApIHtcbiAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBiaXQgb2Ygd29ya2luZyB3b3JkIGlzIDFcbiAgICAgICAgICAgIHdvcmtpbmdXb3JkIDw8PSBsZWFkaW5nWmVyb0NvdW50O1xuICAgICAgICAgICAgd29ya2luZ0JpdHNBdmFpbGFibGUgLT0gbGVhZGluZ1plcm9Db3VudDtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nWmVyb0NvdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyB3ZSBleGhhdXN0ZWQgd29ya2luZ1dvcmQgYW5kIHN0aWxsIGhhdmUgbm90IGZvdW5kIGEgMVxuXG5cbiAgICAgICAgdGhpcy5sb2FkV29yZCgpO1xuICAgICAgICByZXR1cm4gbGVhZGluZ1plcm9Db3VudCArIHRoaXMuc2tpcExlYWRpbmdaZXJvcygpO1xuICAgICAgfTsgLy8gKCk6dm9pZFxuXG5cbiAgICAgIHRoaXMuc2tpcFVuc2lnbmVkRXhwR29sb21iID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNraXBCaXRzKDEgKyB0aGlzLnNraXBMZWFkaW5nWmVyb3MoKSk7XG4gICAgICB9OyAvLyAoKTp2b2lkXG5cblxuICAgICAgdGhpcy5za2lwRXhwR29sb21iID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNraXBCaXRzKDEgKyB0aGlzLnNraXBMZWFkaW5nWmVyb3MoKSk7XG4gICAgICB9OyAvLyAoKTp1aW50XG5cblxuICAgICAgdGhpcy5yZWFkVW5zaWduZWRFeHBHb2xvbWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbHogPSB0aGlzLnNraXBMZWFkaW5nWmVyb3MoKTsgLy8gOnVpbnRcblxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhjbHogKyAxKSAtIDE7XG4gICAgICB9OyAvLyAoKTppbnRcblxuXG4gICAgICB0aGlzLnJlYWRFeHBHb2xvbWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ID0gdGhpcy5yZWFkVW5zaWduZWRFeHBHb2xvbWIoKTsgLy8gOmludFxuXG4gICAgICAgIGlmICgweDAxICYgdmFsdSkge1xuICAgICAgICAgIC8vIHRoZSBudW1iZXIgaXMgb2RkIGlmIHRoZSBsb3cgb3JkZXIgYml0IGlzIHNldFxuICAgICAgICAgIHJldHVybiAxICsgdmFsdSA+Pj4gMTsgLy8gYWRkIDEgdG8gbWFrZSBpdCBldmVuLCBhbmQgZGl2aWRlIGJ5IDJcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMSAqICh2YWx1ID4+PiAxKTsgLy8gZGl2aWRlIGJ5IHR3byB0aGVuIG1ha2UgaXQgbmVnYXRpdmVcbiAgICAgIH07IC8vIFNvbWUgY29udmVuaWVuY2UgZnVuY3Rpb25zXG4gICAgICAvLyA6Qm9vbGVhblxuXG5cbiAgICAgIHRoaXMucmVhZEJvb2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDEpID09PSAxO1xuICAgICAgfTsgLy8gKCk6aW50XG5cblxuICAgICAgdGhpcy5yZWFkVW5zaWduZWRCeXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQml0cyg4KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMubG9hZFdvcmQoKTtcbiAgICB9O1xuXG4gICAgdmFyIGV4cEdvbG9tYiA9IEV4cEdvbG9tYjtcblxuICAgIHZhciBfSDI2NFN0cmVhbSwgX05hbEJ5dGVTdHJlYW07XG5cbiAgICB2YXIgUFJPRklMRVNfV0lUSF9PUFRJT05BTF9TUFNfREFUQTtcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgTkFMIHVuaXQgYnl0ZSBzdHJlYW0gYW5kIHVucGFja3MgdGhlIGVtYmVkZGVkIE5BTCB1bml0cy5cbiAgICAgKi9cblxuICAgIF9OYWxCeXRlU3RyZWFtID0gZnVuY3Rpb24gTmFsQnl0ZVN0cmVhbSgpIHtcbiAgICAgIHZhciBzeW5jUG9pbnQgPSAwLFxuICAgICAgICAgIGksXG4gICAgICAgICAgYnVmZmVyO1xuXG4gICAgICBfTmFsQnl0ZVN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgLypcbiAgICAgICAqIFNjYW5zIGEgYnl0ZSBzdHJlYW0gYW5kIHRyaWdnZXJzIGEgZGF0YSBldmVudCB3aXRoIHRoZSBOQUwgdW5pdHMgZm91bmQuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBFdmVudCByZWNlaXZlZCBmcm9tIEgyNjRTdHJlYW1cbiAgICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YS5kYXRhIFRoZSBoMjY0IGJ5dGUgc3RyZWFtIHRvIGJlIHNjYW5uZWRcbiAgICAgICAqXG4gICAgICAgKiBAc2VlIEgyNjRTdHJlYW0ucHVzaFxuICAgICAgICovXG5cblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIHN3YXBCdWZmZXI7XG5cbiAgICAgICAgaWYgKCFidWZmZXIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dhcEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5ieXRlTGVuZ3RoICsgZGF0YS5kYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgIHN3YXBCdWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgICAgc3dhcEJ1ZmZlci5zZXQoZGF0YS5kYXRhLCBidWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgYnVmZmVyID0gc3dhcEJ1ZmZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsZW4gPSBidWZmZXIuYnl0ZUxlbmd0aDsgLy8gUmVjLiBJVFUtVCBILjI2NCwgQW5uZXggQlxuICAgICAgICAvLyBzY2FuIGZvciBOQUwgdW5pdCBib3VuZGFyaWVzXG4gICAgICAgIC8vIGEgbWF0Y2ggbG9va3MgbGlrZSB0aGlzOlxuICAgICAgICAvLyAwIDAgMSAuLiBOQUwgLi4gMCAwIDFcbiAgICAgICAgLy8gXiBzeW5jIHBvaW50ICAgICAgICBeIGlcbiAgICAgICAgLy8gb3IgdGhpczpcbiAgICAgICAgLy8gMCAwIDEgLi4gTkFMIC4uIDAgMCAwXG4gICAgICAgIC8vIF4gc3luYyBwb2ludCAgICAgICAgXiBpXG4gICAgICAgIC8vIGFkdmFuY2UgdGhlIHN5bmMgcG9pbnQgdG8gYSBOQUwgc3RhcnQsIGlmIG5lY2Vzc2FyeVxuXG4gICAgICAgIGZvciAoOyBzeW5jUG9pbnQgPCBsZW4gLSAzOyBzeW5jUG9pbnQrKykge1xuICAgICAgICAgIGlmIChidWZmZXJbc3luY1BvaW50ICsgMl0gPT09IDEpIHtcbiAgICAgICAgICAgIC8vIHRoZSBzeW5jIHBvaW50IGlzIHByb3Blcmx5IGFsaWduZWRcbiAgICAgICAgICAgIGkgPSBzeW5jUG9pbnQgKyA1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICAvLyBsb29rIGF0IHRoZSBjdXJyZW50IGJ5dGUgdG8gZGV0ZXJtaW5lIGlmIHdlJ3ZlIGhpdCB0aGUgZW5kIG9mXG4gICAgICAgICAgLy8gYSBOQUwgdW5pdCBib3VuZGFyeVxuICAgICAgICAgIHN3aXRjaCAoYnVmZmVyW2ldKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIC8vIHNraXAgcGFzdCBub24tc3luYyBzZXF1ZW5jZXNcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltpIC0gMV0gIT09IDApIHtcbiAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyW2kgLSAyXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSAvLyBkZWxpdmVyIHRoZSBOQUwgdW5pdCBpZiBpdCBpc24ndCBlbXB0eVxuXG5cbiAgICAgICAgICAgICAgaWYgKHN5bmNQb2ludCArIDMgIT09IGkgLSAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgYnVmZmVyLnN1YmFycmF5KHN5bmNQb2ludCArIDMsIGkgLSAyKSk7XG4gICAgICAgICAgICAgIH0gLy8gZHJvcCB0cmFpbGluZyB6ZXJvZXNcblxuXG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGJ1ZmZlcltpXSAhPT0gMSAmJiBpIDwgbGVuKTtcblxuICAgICAgICAgICAgICBzeW5jUG9pbnQgPSBpIC0gMjtcbiAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAvLyBza2lwIHBhc3Qgbm9uLXN5bmMgc2VxdWVuY2VzXG4gICAgICAgICAgICAgIGlmIChidWZmZXJbaSAtIDFdICE9PSAwIHx8IGJ1ZmZlcltpIC0gMl0gIT09IDApIHtcbiAgICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gLy8gZGVsaXZlciB0aGUgTkFMIHVuaXRcblxuXG4gICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGJ1ZmZlci5zdWJhcnJheShzeW5jUG9pbnQgKyAzLCBpIC0gMikpO1xuICAgICAgICAgICAgICBzeW5jUG9pbnQgPSBpIC0gMjtcbiAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgYnl0ZSBpc24ndCBhIG9uZSBvciB6ZXJvLCBzbyBpdCBjYW5ub3QgYmUgcGFydFxuICAgICAgICAgICAgICAvLyBvZiBhIHN5bmMgc2VxdWVuY2VcbiAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZmlsdGVyIG91dCB0aGUgTkFMIHVuaXRzIHRoYXQgd2VyZSBkZWxpdmVyZWRcblxuXG4gICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zdWJhcnJheShzeW5jUG9pbnQpO1xuICAgICAgICBpIC09IHN5bmNQb2ludDtcbiAgICAgICAgc3luY1BvaW50ID0gMDtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHN5bmNQb2ludCA9IDA7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRlbGl2ZXIgdGhlIGxhc3QgYnVmZmVyZWQgTkFMIHVuaXRcbiAgICAgICAgaWYgKGJ1ZmZlciAmJiBidWZmZXIuYnl0ZUxlbmd0aCA+IDMpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBidWZmZXIuc3ViYXJyYXkoc3luY1BvaW50ICsgMykpO1xuICAgICAgICB9IC8vIHJlc2V0IHRoZSBzdHJlYW0gc3RhdGVcblxuXG4gICAgICAgIGJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHN5bmNQb2ludCA9IDA7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZG9uZScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9OYWxCeXRlU3RyZWFtLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTsgLy8gdmFsdWVzIG9mIHByb2ZpbGVfaWRjIHRoYXQgaW5kaWNhdGUgYWRkaXRpb25hbCBmaWVsZHMgYXJlIGluY2x1ZGVkIGluIHRoZSBTUFNcbiAgICAvLyBzZWUgUmVjb21tZW5kYXRpb24gSVRVLVQgSC4yNjQgKDQvMjAxMyksXG4gICAgLy8gNy4zLjIuMS4xIFNlcXVlbmNlIHBhcmFtZXRlciBzZXQgZGF0YSBzeW50YXhcblxuICAgIFBST0ZJTEVTX1dJVEhfT1BUSU9OQUxfU1BTX0RBVEEgPSB7XG4gICAgICAxMDA6IHRydWUsXG4gICAgICAxMTA6IHRydWUsXG4gICAgICAxMjI6IHRydWUsXG4gICAgICAyNDQ6IHRydWUsXG4gICAgICA0NDogdHJ1ZSxcbiAgICAgIDgzOiB0cnVlLFxuICAgICAgODY6IHRydWUsXG4gICAgICAxMTg6IHRydWUsXG4gICAgICAxMjg6IHRydWUsXG4gICAgICAxMzg6IHRydWUsXG4gICAgICAxMzk6IHRydWUsXG4gICAgICAxMzQ6IHRydWVcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgaW5wdXQgZnJvbSBhIEVsZW1lbnRhcnlTdHJlYW0gYW5kIHByb2R1Y2VzIEguMjY0IE5BTCB1bml0IGRhdGFcbiAgICAgKiBldmVudHMuXG4gICAgICovXG5cbiAgICBfSDI2NFN0cmVhbSA9IGZ1bmN0aW9uIEgyNjRTdHJlYW0oKSB7XG4gICAgICB2YXIgbmFsQnl0ZVN0cmVhbSA9IG5ldyBfTmFsQnl0ZVN0cmVhbSgpLFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgdHJhY2tJZCxcbiAgICAgICAgICBjdXJyZW50UHRzLFxuICAgICAgICAgIGN1cnJlbnREdHMsXG4gICAgICAgICAgZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyxcbiAgICAgICAgICByZWFkU2VxdWVuY2VQYXJhbWV0ZXJTZXQsXG4gICAgICAgICAgc2tpcFNjYWxpbmdMaXN0O1xuXG4gICAgICBfSDI2NFN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIC8qXG4gICAgICAgKiBQdXNoZXMgYSBwYWNrZXQgZnJvbSBhIHN0cmVhbSBvbnRvIHRoZSBOYWxCeXRlU3RyZWFtXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIEEgcGFja2V0IHJlY2VpdmVkIGZyb20gYSBzdHJlYW1cbiAgICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gcGFja2V0LmRhdGEgLSBUaGUgcmF3IGJ5dGVzIG9mIHRoZSBwYWNrZXRcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwYWNrZXQuZHRzIC0gRGVjb2RlIHRpbWVzdGFtcCBvZiB0aGUgcGFja2V0XG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gcGFja2V0LnB0cyAtIFByZXNlbnRhdGlvbiB0aW1lc3RhbXAgb2YgdGhlIHBhY2tldFxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhY2tldC50cmFja0lkIC0gVGhlIGlkIG9mIHRoZSBoMjY0IHRyYWNrIHRoaXMgcGFja2V0IGNhbWUgZnJvbVxuICAgICAgICogQHBhcmFtIHsoJ3ZpZGVvJ3wnYXVkaW8nKX0gcGFja2V0LnR5cGUgLSBUaGUgdHlwZSBvZiBwYWNrZXRcbiAgICAgICAqXG4gICAgICAgKi9cblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgICBpZiAocGFja2V0LnR5cGUgIT09ICd2aWRlbycpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cmFja0lkID0gcGFja2V0LnRyYWNrSWQ7XG4gICAgICAgIGN1cnJlbnRQdHMgPSBwYWNrZXQucHRzO1xuICAgICAgICBjdXJyZW50RHRzID0gcGFja2V0LmR0cztcbiAgICAgICAgbmFsQnl0ZVN0cmVhbS5wdXNoKHBhY2tldCk7XG4gICAgICB9O1xuICAgICAgLypcbiAgICAgICAqIElkZW50aWZ5IE5BTCB1bml0IHR5cGVzIGFuZCBwYXNzIG9uIHRoZSBOQUxVLCB0cmFja0lkLCBwcmVzZW50YXRpb24gYW5kIGRlY29kZSB0aW1lc3RhbXBzXG4gICAgICAgKiBmb3IgdGhlIE5BTFVzIHRvIHRoZSBuZXh0IHN0cmVhbSBjb21wb25lbnQuXG4gICAgICAgKiBBbHNvLCBwcmVwcm9jZXNzIGNhcHRpb24gYW5kIHNlcXVlbmNlIHBhcmFtZXRlciBOQUxVcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGEgLSBBIE5BTCB1bml0IGlkZW50aWZpZWQgYnkgYE5hbEJ5dGVTdHJlYW0ucHVzaGBcbiAgICAgICAqIEBzZWUgTmFsQnl0ZVN0cmVhbS5wdXNoXG4gICAgICAgKi9cblxuXG4gICAgICBuYWxCeXRlU3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgIHRyYWNrSWQ6IHRyYWNrSWQsXG4gICAgICAgICAgcHRzOiBjdXJyZW50UHRzLFxuICAgICAgICAgIGR0czogY3VycmVudER0cyxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH07XG5cbiAgICAgICAgc3dpdGNoIChkYXRhWzBdICYgMHgxZikge1xuICAgICAgICAgIGNhc2UgMHgwNTpcbiAgICAgICAgICAgIGV2ZW50Lm5hbFVuaXRUeXBlID0gJ3NsaWNlX2xheWVyX3dpdGhvdXRfcGFydGl0aW9uaW5nX3Jic3BfaWRyJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAweDA2OlxuICAgICAgICAgICAgZXZlbnQubmFsVW5pdFR5cGUgPSAnc2VpX3Jic3AnO1xuICAgICAgICAgICAgZXZlbnQuZXNjYXBlZFJCU1AgPSBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzKGRhdGEuc3ViYXJyYXkoMSkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDB4MDc6XG4gICAgICAgICAgICBldmVudC5uYWxVbml0VHlwZSA9ICdzZXFfcGFyYW1ldGVyX3NldF9yYnNwJztcbiAgICAgICAgICAgIGV2ZW50LmVzY2FwZWRSQlNQID0gZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyhkYXRhLnN1YmFycmF5KDEpKTtcbiAgICAgICAgICAgIGV2ZW50LmNvbmZpZyA9IHJlYWRTZXF1ZW5jZVBhcmFtZXRlclNldChldmVudC5lc2NhcGVkUkJTUCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMHgwODpcbiAgICAgICAgICAgIGV2ZW50Lm5hbFVuaXRUeXBlID0gJ3BpY19wYXJhbWV0ZXJfc2V0X3Jic3AnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDB4MDk6XG4gICAgICAgICAgICBldmVudC5uYWxVbml0VHlwZSA9ICdhY2Nlc3NfdW5pdF9kZWxpbWl0ZXJfcmJzcCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBUaGlzIHRyaWdnZXJzIGRhdGEgb24gdGhlIEgyNjRTdHJlYW1cblxuXG4gICAgICAgIHNlbGYudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgbmFsQnl0ZVN0cmVhbS5vbignZG9uZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdkb25lJyk7XG4gICAgICB9KTtcbiAgICAgIG5hbEJ5dGVTdHJlYW0ub24oJ3BhcnRpYWxkb25lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnRyaWdnZXIoJ3BhcnRpYWxkb25lJyk7XG4gICAgICB9KTtcbiAgICAgIG5hbEJ5dGVTdHJlYW0ub24oJ3Jlc2V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICB9KTtcbiAgICAgIG5hbEJ5dGVTdHJlYW0ub24oJ2VuZGVkdGltZWxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcignZW5kZWR0aW1lbGluZScpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5hbEJ5dGVTdHJlYW0uZmx1c2goKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucGFydGlhbEZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBuYWxCeXRlU3RyZWFtLnBhcnRpYWxGbHVzaCgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmFsQnl0ZVN0cmVhbS5yZXNldCgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmFsQnl0ZVN0cmVhbS5lbmRUaW1lbGluZSgpO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogQWR2YW5jZSB0aGUgRXhwR29sb21iIGRlY29kZXIgcGFzdCBhIHNjYWxpbmcgbGlzdC4gVGhlIHNjYWxpbmdcbiAgICAgICAqIGxpc3QgaXMgb3B0aW9uYWxseSB0cmFuc21pdHRlZCBhcyBwYXJ0IG9mIGEgc2VxdWVuY2UgcGFyYW1ldGVyXG4gICAgICAgKiBzZXQgYW5kIGlzIG5vdCByZWxldmFudCB0byB0cmFuc211eGluZy5cbiAgICAgICAqIEBwYXJhbSBjb3VudCB7bnVtYmVyfSB0aGUgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhpcyBzY2FsaW5nIGxpc3RcbiAgICAgICAqIEBwYXJhbSBleHBHb2xvbWJEZWNvZGVyIHtvYmplY3R9IGFuIEV4cEdvbG9tYiBwb2ludGVkIHRvIHRoZVxuICAgICAgICogc3RhcnQgb2YgYSBzY2FsaW5nIGxpc3RcbiAgICAgICAqIEBzZWUgUmVjb21tZW5kYXRpb24gSVRVLVQgSC4yNjQsIFNlY3Rpb24gNy4zLjIuMS4xLjFcbiAgICAgICAqL1xuXG5cbiAgICAgIHNraXBTY2FsaW5nTGlzdCA9IGZ1bmN0aW9uIHNraXBTY2FsaW5nTGlzdChjb3VudCwgZXhwR29sb21iRGVjb2Rlcikge1xuICAgICAgICB2YXIgbGFzdFNjYWxlID0gOCxcbiAgICAgICAgICAgIG5leHRTY2FsZSA9IDgsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgZGVsdGFTY2FsZTtcblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY291bnQ7IGorKykge1xuICAgICAgICAgIGlmIChuZXh0U2NhbGUgIT09IDApIHtcbiAgICAgICAgICAgIGRlbHRhU2NhbGUgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRFeHBHb2xvbWIoKTtcbiAgICAgICAgICAgIG5leHRTY2FsZSA9IChsYXN0U2NhbGUgKyBkZWx0YVNjYWxlICsgMjU2KSAlIDI1NjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsYXN0U2NhbGUgPSBuZXh0U2NhbGUgPT09IDAgPyBsYXN0U2NhbGUgOiBuZXh0U2NhbGU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIEV4cHVuZ2UgYW55IFwiRW11bGF0aW9uIFByZXZlbnRpb25cIiBieXRlcyBmcm9tIGEgXCJSYXcgQnl0ZVxuICAgICAgICogU2VxdWVuY2UgUGF5bG9hZFwiXG4gICAgICAgKiBAcGFyYW0gZGF0YSB7VWludDhBcnJheX0gdGhlIGJ5dGVzIG9mIGEgUkJTUCBmcm9tIGEgTkFMXG4gICAgICAgKiB1bml0XG4gICAgICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSB0aGUgUkJTUCB3aXRob3V0IGFueSBFbXVsYXRpb25cbiAgICAgICAqIFByZXZlbnRpb24gQnl0ZXNcbiAgICAgICAqL1xuXG5cbiAgICAgIGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMgPSBmdW5jdGlvbiBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzKGRhdGEpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucyA9IFtdLFxuICAgICAgICAgICAgaSA9IDEsXG4gICAgICAgICAgICBuZXdMZW5ndGgsXG4gICAgICAgICAgICBuZXdEYXRhOyAvLyBGaW5kIGFsbCBgRW11bGF0aW9uIFByZXZlbnRpb24gQnl0ZXNgXG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW5ndGggLSAyKSB7XG4gICAgICAgICAgaWYgKGRhdGFbaV0gPT09IDAgJiYgZGF0YVtpICsgMV0gPT09IDAgJiYgZGF0YVtpICsgMl0gPT09IDB4MDMpIHtcbiAgICAgICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5wdXNoKGkgKyAyKTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJZiBubyBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlcyB3ZXJlIGZvdW5kIGp1c3QgcmV0dXJuIHRoZSBvcmlnaW5hbFxuICAgICAgICAvLyBhcnJheVxuXG5cbiAgICAgICAgaWYgKGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSAvLyBDcmVhdGUgYSBuZXcgYXJyYXkgdG8gaG9sZCB0aGUgTkFMIHVuaXQgZGF0YVxuXG5cbiAgICAgICAgbmV3TGVuZ3RoID0gbGVuZ3RoIC0gZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLmxlbmd0aDtcbiAgICAgICAgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KG5ld0xlbmd0aCk7XG4gICAgICAgIHZhciBzb3VyY2VJbmRleCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5ld0xlbmd0aDsgc291cmNlSW5kZXgrKywgaSsrKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZUluZGV4ID09PSBlbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXNQb3NpdGlvbnNbMF0pIHtcbiAgICAgICAgICAgIC8vIFNraXAgdGhpcyBieXRlXG4gICAgICAgICAgICBzb3VyY2VJbmRleCsrOyAvLyBSZW1vdmUgdGhpcyBwb3NpdGlvbiBpbmRleFxuXG4gICAgICAgICAgICBlbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXNQb3NpdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdEYXRhW2ldID0gZGF0YVtzb3VyY2VJbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFJlYWQgYSBzZXF1ZW5jZSBwYXJhbWV0ZXIgc2V0IGFuZCByZXR1cm4gc29tZSBpbnRlcmVzdGluZyB2aWRlb1xuICAgICAgICogcHJvcGVydGllcy4gQSBzZXF1ZW5jZSBwYXJhbWV0ZXIgc2V0IGlzIHRoZSBIMjY0IG1ldGFkYXRhIHRoYXRcbiAgICAgICAqIGRlc2NyaWJlcyB0aGUgcHJvcGVydGllcyBvZiB1cGNvbWluZyB2aWRlbyBmcmFtZXMuXG4gICAgICAgKiBAcGFyYW0gZGF0YSB7VWludDhBcnJheX0gdGhlIGJ5dGVzIG9mIGEgc2VxdWVuY2UgcGFyYW1ldGVyIHNldFxuICAgICAgICogQHJldHVybiB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCBjb25maWd1cmF0aW9uIHBhcnNlZCBmcm9tIHRoZVxuICAgICAgICogc2VxdWVuY2UgcGFyYW1ldGVyIHNldCwgaW5jbHVkaW5nIHRoZSBkaW1lbnNpb25zIG9mIHRoZVxuICAgICAgICogYXNzb2NpYXRlZCB2aWRlbyBmcmFtZXMuXG4gICAgICAgKi9cblxuXG4gICAgICByZWFkU2VxdWVuY2VQYXJhbWV0ZXJTZXQgPSBmdW5jdGlvbiByZWFkU2VxdWVuY2VQYXJhbWV0ZXJTZXQoZGF0YSkge1xuICAgICAgICB2YXIgZnJhbWVDcm9wTGVmdE9mZnNldCA9IDAsXG4gICAgICAgICAgICBmcmFtZUNyb3BSaWdodE9mZnNldCA9IDAsXG4gICAgICAgICAgICBmcmFtZUNyb3BUb3BPZmZzZXQgPSAwLFxuICAgICAgICAgICAgZnJhbWVDcm9wQm90dG9tT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHNhclNjYWxlID0gMSxcbiAgICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIsXG4gICAgICAgICAgICBwcm9maWxlSWRjLFxuICAgICAgICAgICAgbGV2ZWxJZGMsXG4gICAgICAgICAgICBwcm9maWxlQ29tcGF0aWJpbGl0eSxcbiAgICAgICAgICAgIGNocm9tYUZvcm1hdElkYyxcbiAgICAgICAgICAgIHBpY09yZGVyQ250VHlwZSxcbiAgICAgICAgICAgIG51bVJlZkZyYW1lc0luUGljT3JkZXJDbnRDeWNsZSxcbiAgICAgICAgICAgIHBpY1dpZHRoSW5NYnNNaW51czEsXG4gICAgICAgICAgICBwaWNIZWlnaHRJbk1hcFVuaXRzTWludXMxLFxuICAgICAgICAgICAgZnJhbWVNYnNPbmx5RmxhZyxcbiAgICAgICAgICAgIHNjYWxpbmdMaXN0Q291bnQsXG4gICAgICAgICAgICBzYXJSYXRpbyxcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvSWRjLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZXhwR29sb21iRGVjb2RlciA9IG5ldyBleHBHb2xvbWIoZGF0YSk7XG4gICAgICAgIHByb2ZpbGVJZGMgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEJ5dGUoKTsgLy8gcHJvZmlsZV9pZGNcblxuICAgICAgICBwcm9maWxlQ29tcGF0aWJpbGl0eSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpOyAvLyBjb25zdHJhaW50X3NldFswLTVdX2ZsYWdcblxuICAgICAgICBsZXZlbElkYyA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpOyAvLyBsZXZlbF9pZGMgdSg4KVxuXG4gICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcFVuc2lnbmVkRXhwR29sb21iKCk7IC8vIHNlcV9wYXJhbWV0ZXJfc2V0X2lkXG4gICAgICAgIC8vIHNvbWUgcHJvZmlsZXMgaGF2ZSBtb3JlIG9wdGlvbmFsIGRhdGEgd2UgZG9uJ3QgbmVlZFxuXG4gICAgICAgIGlmIChQUk9GSUxFU19XSVRIX09QVElPTkFMX1NQU19EQVRBW3Byb2ZpbGVJZGNdKSB7XG4gICAgICAgICAgY2hyb21hRm9ybWF0SWRjID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRFeHBHb2xvbWIoKTtcblxuICAgICAgICAgIGlmIChjaHJvbWFGb3JtYXRJZGMgPT09IDMpIHtcbiAgICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcEJpdHMoMSk7IC8vIHNlcGFyYXRlX2NvbG91cl9wbGFuZV9mbGFnXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwVW5zaWduZWRFeHBHb2xvbWIoKTsgLy8gYml0X2RlcHRoX2x1bWFfbWludXM4XG5cbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBVbnNpZ25lZEV4cEdvbG9tYigpOyAvLyBiaXRfZGVwdGhfY2hyb21hX21pbnVzOFxuXG4gICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwQml0cygxKTsgLy8gcXBwcmltZV95X3plcm9fdHJhbnNmb3JtX2J5cGFzc19mbGFnXG5cbiAgICAgICAgICBpZiAoZXhwR29sb21iRGVjb2Rlci5yZWFkQm9vbGVhbigpKSB7XG4gICAgICAgICAgICAvLyBzZXFfc2NhbGluZ19tYXRyaXhfcHJlc2VudF9mbGFnXG4gICAgICAgICAgICBzY2FsaW5nTGlzdENvdW50ID0gY2hyb21hRm9ybWF0SWRjICE9PSAzID8gOCA6IDEyO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NhbGluZ0xpc3RDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChleHBHb2xvbWJEZWNvZGVyLnJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBzZXFfc2NhbGluZ19saXN0X3ByZXNlbnRfZmxhZ1sgaSBdXG4gICAgICAgICAgICAgICAgaWYgKGkgPCA2KSB7XG4gICAgICAgICAgICAgICAgICBza2lwU2NhbGluZ0xpc3QoMTYsIGV4cEdvbG9tYkRlY29kZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBza2lwU2NhbGluZ0xpc3QoNjQsIGV4cEdvbG9tYkRlY29kZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcFVuc2lnbmVkRXhwR29sb21iKCk7IC8vIGxvZzJfbWF4X2ZyYW1lX251bV9taW51czRcblxuICAgICAgICBwaWNPcmRlckNudFR5cGUgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpO1xuXG4gICAgICAgIGlmIChwaWNPcmRlckNudFR5cGUgPT09IDApIHtcbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpOyAvLyBsb2cyX21heF9waWNfb3JkZXJfY250X2xzYl9taW51czRcbiAgICAgICAgfSBlbHNlIGlmIChwaWNPcmRlckNudFR5cGUgPT09IDEpIHtcbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBCaXRzKDEpOyAvLyBkZWx0YV9waWNfb3JkZXJfYWx3YXlzX3plcm9fZmxhZ1xuXG4gICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwRXhwR29sb21iKCk7IC8vIG9mZnNldF9mb3Jfbm9uX3JlZl9waWNcblxuICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcEV4cEdvbG9tYigpOyAvLyBvZmZzZXRfZm9yX3RvcF90b19ib3R0b21fZmllbGRcblxuICAgICAgICAgIG51bVJlZkZyYW1lc0luUGljT3JkZXJDbnRDeWNsZSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUmVmRnJhbWVzSW5QaWNPcmRlckNudEN5Y2xlOyBpKyspIHtcbiAgICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcEV4cEdvbG9tYigpOyAvLyBvZmZzZXRfZm9yX3JlZl9mcmFtZVsgaSBdXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwVW5zaWduZWRFeHBHb2xvbWIoKTsgLy8gbWF4X251bV9yZWZfZnJhbWVzXG5cbiAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwQml0cygxKTsgLy8gZ2Fwc19pbl9mcmFtZV9udW1fdmFsdWVfYWxsb3dlZF9mbGFnXG5cbiAgICAgICAgcGljV2lkdGhJbk1ic01pbnVzMSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG4gICAgICAgIHBpY0hlaWdodEluTWFwVW5pdHNNaW51czEgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpO1xuICAgICAgICBmcmFtZU1ic09ubHlGbGFnID0gZXhwR29sb21iRGVjb2Rlci5yZWFkQml0cygxKTtcblxuICAgICAgICBpZiAoZnJhbWVNYnNPbmx5RmxhZyA9PT0gMCkge1xuICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcEJpdHMoMSk7IC8vIG1iX2FkYXB0aXZlX2ZyYW1lX2ZpZWxkX2ZsYWdcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcEJpdHMoMSk7IC8vIGRpcmVjdF84eDhfaW5mZXJlbmNlX2ZsYWdcblxuICAgICAgICBpZiAoZXhwR29sb21iRGVjb2Rlci5yZWFkQm9vbGVhbigpKSB7XG4gICAgICAgICAgLy8gZnJhbWVfY3JvcHBpbmdfZmxhZ1xuICAgICAgICAgIGZyYW1lQ3JvcExlZnRPZmZzZXQgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpO1xuICAgICAgICAgIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRFeHBHb2xvbWIoKTtcbiAgICAgICAgICBmcmFtZUNyb3BUb3BPZmZzZXQgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpO1xuICAgICAgICAgIGZyYW1lQ3JvcEJvdHRvbU9mZnNldCA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhwR29sb21iRGVjb2Rlci5yZWFkQm9vbGVhbigpKSB7XG4gICAgICAgICAgLy8gdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnXG4gICAgICAgICAgaWYgKGV4cEdvbG9tYkRlY29kZXIucmVhZEJvb2xlYW4oKSkge1xuICAgICAgICAgICAgLy8gYXNwZWN0X3JhdGlvX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgICAgICBhc3BlY3RSYXRpb0lkYyA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGFzcGVjdFJhdGlvSWRjKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsxLCAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMTIsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMTAsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMTYsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbNDAsIDMzXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMjQsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMjAsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMzIsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbODAsIDMzXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIHNhclJhdGlvID0gWzE4LCAxMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsxNSwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbNjQsIDMzXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIHNhclJhdGlvID0gWzE2MCwgOTldO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbNCwgM107XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFszLCAyXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIHNhclJhdGlvID0gWzIsIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjU1OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNhclJhdGlvID0gW2V4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpIDw8IDggfCBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEJ5dGUoKSwgZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRCeXRlKCkgPDwgOCB8IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpXTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNhclJhdGlvKSB7XG4gICAgICAgICAgICAgIHNhclNjYWxlID0gc2FyUmF0aW9bMF0gLyBzYXJSYXRpb1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByb2ZpbGVJZGM6IHByb2ZpbGVJZGMsXG4gICAgICAgICAgbGV2ZWxJZGM6IGxldmVsSWRjLFxuICAgICAgICAgIHByb2ZpbGVDb21wYXRpYmlsaXR5OiBwcm9maWxlQ29tcGF0aWJpbGl0eSxcbiAgICAgICAgICB3aWR0aDogTWF0aC5jZWlsKCgocGljV2lkdGhJbk1ic01pbnVzMSArIDEpICogMTYgLSBmcmFtZUNyb3BMZWZ0T2Zmc2V0ICogMiAtIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ICogMikgKiBzYXJTY2FsZSksXG4gICAgICAgICAgaGVpZ2h0OiAoMiAtIGZyYW1lTWJzT25seUZsYWcpICogKHBpY0hlaWdodEluTWFwVW5pdHNNaW51czEgKyAxKSAqIDE2IC0gZnJhbWVDcm9wVG9wT2Zmc2V0ICogMiAtIGZyYW1lQ3JvcEJvdHRvbU9mZnNldCAqIDIsXG4gICAgICAgICAgc2FyUmF0aW86IHNhclJhdGlvXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfSDI2NFN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIGgyNjQgPSB7XG4gICAgICBIMjY0U3RyZWFtOiBfSDI2NFN0cmVhbSxcbiAgICAgIE5hbEJ5dGVTdHJlYW06IF9OYWxCeXRlU3RyZWFtXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKlxuICAgICAqIFV0aWxpdGllcyB0byBkZXRlY3QgYmFzaWMgcHJvcGVydGllcyBhbmQgbWV0YWRhdGEgYWJvdXQgQWFjIGRhdGEuXG4gICAgICovXG5cbiAgICB2YXIgQURUU19TQU1QTElOR19GUkVRVUVOQ0lFUyQxID0gWzk2MDAwLCA4ODIwMCwgNjQwMDAsIDQ4MDAwLCA0NDEwMCwgMzIwMDAsIDI0MDAwLCAyMjA1MCwgMTYwMDAsIDEyMDAwLCAxMTAyNSwgODAwMCwgNzM1MF07XG5cbiAgICB2YXIgaXNMaWtlbHlBYWNEYXRhID0gZnVuY3Rpb24gaXNMaWtlbHlBYWNEYXRhKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhWzBdID09PSAnSScuY2hhckNvZGVBdCgwKSAmJiBkYXRhWzFdID09PSAnRCcuY2hhckNvZGVBdCgwKSAmJiBkYXRhWzJdID09PSAnMycuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VTeW5jU2FmZUludGVnZXIkMSA9IGZ1bmN0aW9uIHBhcnNlU3luY1NhZmVJbnRlZ2VyKGRhdGEpIHtcbiAgICAgIHJldHVybiBkYXRhWzBdIDw8IDIxIHwgZGF0YVsxXSA8PCAxNCB8IGRhdGFbMl0gPDwgNyB8IGRhdGFbM107XG4gICAgfTsgLy8gcmV0dXJuIGEgcGVyY2VudC1lbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgYnl0ZSByYW5nZVxuICAgIC8vIEBzZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QZXJjZW50LWVuY29kaW5nXG5cblxuICAgIHZhciBwZXJjZW50RW5jb2RlJDEgPSBmdW5jdGlvbiBwZXJjZW50RW5jb2RlKGJ5dGVzLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICByZXN1bHQgPSAnJztcblxuICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gJyUnICsgKCcwMCcgKyBieXRlc1tpXS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9OyAvLyByZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGJ5dGUgcmFuZ2UsXG4gICAgLy8gaW50ZXJwcmV0ZWQgYXMgSVNPLTg4NTktMS5cblxuXG4gICAgdmFyIHBhcnNlSXNvODg1OTEkMSA9IGZ1bmN0aW9uIHBhcnNlSXNvODg1OTEoYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiB1bmVzY2FwZShwZXJjZW50RW5jb2RlJDEoYnl0ZXMsIHN0YXJ0LCBlbmQpKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgfTtcblxuICAgIHZhciBwYXJzZUlkM1RhZ1NpemUgPSBmdW5jdGlvbiBwYXJzZUlkM1RhZ1NpemUoaGVhZGVyLCBieXRlSW5kZXgpIHtcbiAgICAgIHZhciByZXR1cm5TaXplID0gaGVhZGVyW2J5dGVJbmRleCArIDZdIDw8IDIxIHwgaGVhZGVyW2J5dGVJbmRleCArIDddIDw8IDE0IHwgaGVhZGVyW2J5dGVJbmRleCArIDhdIDw8IDcgfCBoZWFkZXJbYnl0ZUluZGV4ICsgOV0sXG4gICAgICAgICAgZmxhZ3MgPSBoZWFkZXJbYnl0ZUluZGV4ICsgNV0sXG4gICAgICAgICAgZm9vdGVyUHJlc2VudCA9IChmbGFncyAmIDE2KSA+PiA0O1xuXG4gICAgICBpZiAoZm9vdGVyUHJlc2VudCkge1xuICAgICAgICByZXR1cm4gcmV0dXJuU2l6ZSArIDIwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0dXJuU2l6ZSArIDEwO1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VBZHRzU2l6ZSA9IGZ1bmN0aW9uIHBhcnNlQWR0c1NpemUoaGVhZGVyLCBieXRlSW5kZXgpIHtcbiAgICAgIHZhciBsb3dUaHJlZSA9IChoZWFkZXJbYnl0ZUluZGV4ICsgNV0gJiAweEUwKSA+PiA1LFxuICAgICAgICAgIG1pZGRsZSA9IGhlYWRlcltieXRlSW5kZXggKyA0XSA8PCAzLFxuICAgICAgICAgIGhpZ2hUd28gPSBoZWFkZXJbYnl0ZUluZGV4ICsgM10gJiAweDMgPDwgMTE7XG4gICAgICByZXR1cm4gaGlnaFR3byB8IG1pZGRsZSB8IGxvd1RocmVlO1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VUeXBlID0gZnVuY3Rpb24gcGFyc2VUeXBlKGhlYWRlciwgYnl0ZUluZGV4KSB7XG4gICAgICBpZiAoaGVhZGVyW2J5dGVJbmRleF0gPT09ICdJJy5jaGFyQ29kZUF0KDApICYmIGhlYWRlcltieXRlSW5kZXggKyAxXSA9PT0gJ0QnLmNoYXJDb2RlQXQoMCkgJiYgaGVhZGVyW2J5dGVJbmRleCArIDJdID09PSAnMycuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICByZXR1cm4gJ3RpbWVkLW1ldGFkYXRhJztcbiAgICAgIH0gZWxzZSBpZiAoaGVhZGVyW2J5dGVJbmRleF0gJiAweGZmID09PSAweGZmICYmIChoZWFkZXJbYnl0ZUluZGV4ICsgMV0gJiAweGYwKSA9PT0gMHhmMCkge1xuICAgICAgICByZXR1cm4gJ2F1ZGlvJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBwYXJzZVNhbXBsZVJhdGUgPSBmdW5jdGlvbiBwYXJzZVNhbXBsZVJhdGUocGFja2V0KSB7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpICsgNSA8IHBhY2tldC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHBhY2tldFtpXSAhPT0gMHhGRiB8fCAocGFja2V0W2kgKyAxXSAmIDB4RjYpICE9PSAweEYwKSB7XG4gICAgICAgICAgLy8gSWYgYSB2YWxpZCBoZWFkZXIgd2FzIG5vdCBmb3VuZCwgIGp1bXAgb25lIGZvcndhcmQgYW5kIGF0dGVtcHQgdG9cbiAgICAgICAgICAvLyBmaW5kIGEgdmFsaWQgQURUUyBoZWFkZXIgc3RhcnRpbmcgYXQgdGhlIG5leHQgYnl0ZVxuICAgICAgICAgIGkrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTJDFbKHBhY2tldFtpICsgMl0gJiAweDNjKSA+Pj4gMl07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VBYWNUaW1lc3RhbXAgPSBmdW5jdGlvbiBwYXJzZUFhY1RpbWVzdGFtcChwYWNrZXQpIHtcbiAgICAgIHZhciBmcmFtZVN0YXJ0LCBmcmFtZVNpemUsIGZyYW1lLCBmcmFtZUhlYWRlcjsgLy8gZmluZCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGZyYW1lIGFuZCB0aGUgZW5kIG9mIHRoZSB0YWdcblxuICAgICAgZnJhbWVTdGFydCA9IDEwO1xuXG4gICAgICBpZiAocGFja2V0WzVdICYgMHg0MCkge1xuICAgICAgICAvLyBhZHZhbmNlIHRoZSBmcmFtZSBzdGFydCBwYXN0IHRoZSBleHRlbmRlZCBoZWFkZXJcbiAgICAgICAgZnJhbWVTdGFydCArPSA0OyAvLyBoZWFkZXIgc2l6ZSBmaWVsZFxuXG4gICAgICAgIGZyYW1lU3RhcnQgKz0gcGFyc2VTeW5jU2FmZUludGVnZXIkMShwYWNrZXQuc3ViYXJyYXkoMTAsIDE0KSk7XG4gICAgICB9IC8vIHBhcnNlIG9uZSBvciBtb3JlIElEMyBmcmFtZXNcbiAgICAgIC8vIGh0dHA6Ly9pZDMub3JnL2lkM3YyLjMuMCNJRDN2Ml9mcmFtZV9vdmVydmlld1xuXG5cbiAgICAgIGRvIHtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gdGhpcyBmcmFtZVxuICAgICAgICBmcmFtZVNpemUgPSBwYXJzZVN5bmNTYWZlSW50ZWdlciQxKHBhY2tldC5zdWJhcnJheShmcmFtZVN0YXJ0ICsgNCwgZnJhbWVTdGFydCArIDgpKTtcblxuICAgICAgICBpZiAoZnJhbWVTaXplIDwgMSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnJhbWVIZWFkZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhY2tldFtmcmFtZVN0YXJ0XSwgcGFja2V0W2ZyYW1lU3RhcnQgKyAxXSwgcGFja2V0W2ZyYW1lU3RhcnQgKyAyXSwgcGFja2V0W2ZyYW1lU3RhcnQgKyAzXSk7XG5cbiAgICAgICAgaWYgKGZyYW1lSGVhZGVyID09PSAnUFJJVicpIHtcbiAgICAgICAgICBmcmFtZSA9IHBhY2tldC5zdWJhcnJheShmcmFtZVN0YXJ0ICsgMTAsIGZyYW1lU3RhcnQgKyBmcmFtZVNpemUgKyAxMCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZyYW1lW2ldID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBvd25lciA9IHBhcnNlSXNvODg1OTEkMShmcmFtZSwgMCwgaSk7XG5cbiAgICAgICAgICAgICAgaWYgKG93bmVyID09PSAnY29tLmFwcGxlLnN0cmVhbWluZy50cmFuc3BvcnRTdHJlYW1UaW1lc3RhbXAnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBmcmFtZS5zdWJhcnJheShpICsgMSk7XG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSAoZFszXSAmIDB4MDEpIDw8IDMwIHwgZFs0XSA8PCAyMiB8IGRbNV0gPDwgMTQgfCBkWzZdIDw8IDYgfCBkWzddID4+PiAyO1xuICAgICAgICAgICAgICAgIHNpemUgKj0gNDtcbiAgICAgICAgICAgICAgICBzaXplICs9IGRbN10gJiAweDAzO1xuICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnJhbWVTdGFydCArPSAxMDsgLy8gYWR2YW5jZSBwYXN0IHRoZSBmcmFtZSBoZWFkZXJcblxuICAgICAgICBmcmFtZVN0YXJ0ICs9IGZyYW1lU2l6ZTsgLy8gYWR2YW5jZSBwYXN0IHRoZSBmcmFtZSBib2R5XG4gICAgICB9IHdoaWxlIChmcmFtZVN0YXJ0IDwgcGFja2V0LmJ5dGVMZW5ndGgpO1xuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIHV0aWxzID0ge1xuICAgICAgaXNMaWtlbHlBYWNEYXRhOiBpc0xpa2VseUFhY0RhdGEsXG4gICAgICBwYXJzZUlkM1RhZ1NpemU6IHBhcnNlSWQzVGFnU2l6ZSxcbiAgICAgIHBhcnNlQWR0c1NpemU6IHBhcnNlQWR0c1NpemUsXG4gICAgICBwYXJzZVR5cGU6IHBhcnNlVHlwZSxcbiAgICAgIHBhcnNlU2FtcGxlUmF0ZTogcGFyc2VTYW1wbGVSYXRlLFxuICAgICAgcGFyc2VBYWNUaW1lc3RhbXA6IHBhcnNlQWFjVGltZXN0YW1wXG4gICAgfTsgLy8gQ29uc3RhbnRzXG5cbiAgICB2YXIgX0FhY1N0cmVhbTtcbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYW4gaW5jb21pbmcgc3RyZWFtIG9mIGJpbmFyeSBkYXRhIGludG8gQURUUyBhbmQgSUQzIEZyYW1lcy5cbiAgICAgKi9cblxuXG4gICAgX0FhY1N0cmVhbSA9IGZ1bmN0aW9uIEFhY1N0cmVhbSgpIHtcbiAgICAgIHZhciBldmVyeXRoaW5nID0gbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICB0aW1lU3RhbXAgPSAwO1xuXG4gICAgICBfQWFjU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuc2V0VGltZXN0YW1wID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICB0aW1lU3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIGZyYW1lU2l6ZSA9IDAsXG4gICAgICAgICAgICBieXRlSW5kZXggPSAwLFxuICAgICAgICAgICAgYnl0ZXNMZWZ0LFxuICAgICAgICAgICAgY2h1bmssXG4gICAgICAgICAgICBwYWNrZXQsXG4gICAgICAgICAgICB0ZW1wTGVuZ3RoOyAvLyBJZiB0aGVyZSBhcmUgYnl0ZXMgcmVtYWluaW5nIGZyb20gdGhlIGxhc3Qgc2VnbWVudCwgcHJlcGVuZCB0aGVtIHRvIHRoZVxuICAgICAgICAvLyBieXRlcyB0aGF0IHdlcmUgcHVzaGVkIGluXG5cbiAgICAgICAgaWYgKGV2ZXJ5dGhpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgdGVtcExlbmd0aCA9IGV2ZXJ5dGhpbmcubGVuZ3RoO1xuICAgICAgICAgIGV2ZXJ5dGhpbmcgPSBuZXcgVWludDhBcnJheShieXRlcy5ieXRlTGVuZ3RoICsgdGVtcExlbmd0aCk7XG4gICAgICAgICAgZXZlcnl0aGluZy5zZXQoZXZlcnl0aGluZy5zdWJhcnJheSgwLCB0ZW1wTGVuZ3RoKSk7XG4gICAgICAgICAgZXZlcnl0aGluZy5zZXQoYnl0ZXMsIHRlbXBMZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZXJ5dGhpbmcgPSBieXRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChldmVyeXRoaW5nLmxlbmd0aCAtIGJ5dGVJbmRleCA+PSAzKSB7XG4gICAgICAgICAgaWYgKGV2ZXJ5dGhpbmdbYnl0ZUluZGV4XSA9PT0gJ0knLmNoYXJDb2RlQXQoMCkgJiYgZXZlcnl0aGluZ1tieXRlSW5kZXggKyAxXSA9PT0gJ0QnLmNoYXJDb2RlQXQoMCkgJiYgZXZlcnl0aGluZ1tieXRlSW5kZXggKyAyXSA9PT0gJzMnLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgICAgIC8vIEV4aXQgZWFybHkgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGVub3VnaCB0byBwYXJzZVxuICAgICAgICAgICAgLy8gdGhlIElEMyB0YWcgaGVhZGVyXG4gICAgICAgICAgICBpZiAoZXZlcnl0aGluZy5sZW5ndGggLSBieXRlSW5kZXggPCAxMCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gLy8gY2hlY2sgZnJhbWVzaXplXG5cblxuICAgICAgICAgICAgZnJhbWVTaXplID0gdXRpbHMucGFyc2VJZDNUYWdTaXplKGV2ZXJ5dGhpbmcsIGJ5dGVJbmRleCk7IC8vIEV4aXQgZWFybHkgaWYgd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggaW4gdGhlIGJ1ZmZlclxuICAgICAgICAgICAgLy8gdG8gZW1pdCBhIGZ1bGwgcGFja2V0XG4gICAgICAgICAgICAvLyBBZGQgdG8gYnl0ZUluZGV4IHRvIHN1cHBvcnQgbXVsdGlwbGUgSUQzIHRhZ3MgaW4gc2VxdWVuY2VcblxuICAgICAgICAgICAgaWYgKGJ5dGVJbmRleCArIGZyYW1lU2l6ZSA+IGV2ZXJ5dGhpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaHVuayA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3RpbWVkLW1ldGFkYXRhJyxcbiAgICAgICAgICAgICAgZGF0YTogZXZlcnl0aGluZy5zdWJhcnJheShieXRlSW5kZXgsIGJ5dGVJbmRleCArIGZyYW1lU2l6ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBjaHVuayk7XG4gICAgICAgICAgICBieXRlSW5kZXggKz0gZnJhbWVTaXplO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmICgoZXZlcnl0aGluZ1tieXRlSW5kZXhdICYgMHhmZikgPT09IDB4ZmYgJiYgKGV2ZXJ5dGhpbmdbYnl0ZUluZGV4ICsgMV0gJiAweGYwKSA9PT0gMHhmMCkge1xuICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBiZWNhdXNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIHRvIHBhcnNlXG4gICAgICAgICAgICAvLyB0aGUgQURUUyBmcmFtZSBoZWFkZXJcbiAgICAgICAgICAgIGlmIChldmVyeXRoaW5nLmxlbmd0aCAtIGJ5dGVJbmRleCA8IDcpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyYW1lU2l6ZSA9IHV0aWxzLnBhcnNlQWR0c1NpemUoZXZlcnl0aGluZywgYnl0ZUluZGV4KTsgLy8gRXhpdCBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbiB0aGUgYnVmZmVyXG4gICAgICAgICAgICAvLyB0byBlbWl0IGEgZnVsbCBwYWNrZXRcblxuICAgICAgICAgICAgaWYgKGJ5dGVJbmRleCArIGZyYW1lU2l6ZSA+IGV2ZXJ5dGhpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWNrZXQgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgICAgICAgIGRhdGE6IGV2ZXJ5dGhpbmcuc3ViYXJyYXkoYnl0ZUluZGV4LCBieXRlSW5kZXggKyBmcmFtZVNpemUpLFxuICAgICAgICAgICAgICBwdHM6IHRpbWVTdGFtcCxcbiAgICAgICAgICAgICAgZHRzOiB0aW1lU3RhbXBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBwYWNrZXQpO1xuICAgICAgICAgICAgYnl0ZUluZGV4ICs9IGZyYW1lU2l6ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJ5dGVJbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgYnl0ZXNMZWZ0ID0gZXZlcnl0aGluZy5sZW5ndGggLSBieXRlSW5kZXg7XG5cbiAgICAgICAgaWYgKGJ5dGVzTGVmdCA+IDApIHtcbiAgICAgICAgICBldmVyeXRoaW5nID0gZXZlcnl0aGluZy5zdWJhcnJheShieXRlSW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZXJ5dGhpbmcgPSBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBldmVyeXRoaW5nID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXZlcnl0aGluZyA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX0FhY1N0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIGFhYyA9IF9BYWNTdHJlYW07XG4gICAgdmFyIEgyNjRTdHJlYW0gPSBoMjY0LkgyNjRTdHJlYW07XG4gICAgdmFyIGlzTGlrZWx5QWFjRGF0YSQxID0gdXRpbHMuaXNMaWtlbHlBYWNEYXRhO1xuICAgIHZhciBPTkVfU0VDT05EX0lOX1RTJDMgPSBjbG9jay5PTkVfU0VDT05EX0lOX1RTOyAvLyBjb25zdGFudHNcblxuICAgIHZhciBBVURJT19QUk9QRVJUSUVTID0gWydhdWRpb29iamVjdHR5cGUnLCAnY2hhbm5lbGNvdW50JywgJ3NhbXBsZXJhdGUnLCAnc2FtcGxpbmdmcmVxdWVuY3lpbmRleCcsICdzYW1wbGVzaXplJ107XG4gICAgdmFyIFZJREVPX1BST1BFUlRJRVMgPSBbJ3dpZHRoJywgJ2hlaWdodCcsICdwcm9maWxlSWRjJywgJ2xldmVsSWRjJywgJ3Byb2ZpbGVDb21wYXRpYmlsaXR5JywgJ3NhclJhdGlvJ107IC8vIG9iamVjdCB0eXBlc1xuXG4gICAgdmFyIF9WaWRlb1NlZ21lbnRTdHJlYW0sIF9BdWRpb1NlZ21lbnRTdHJlYW0sIF9UcmFuc211eGVyLCBfQ29hbGVzY2VTdHJlYW07XG4gICAgLyoqXG4gICAgICogQ29tcGFyZSB0d28gYXJyYXlzIChldmVuIHR5cGVkKSBmb3Igc2FtZS1uZXNzXG4gICAgICovXG5cblxuICAgIHZhciBhcnJheUVxdWFscyA9IGZ1bmN0aW9uIGFycmF5RXF1YWxzKGEsIGIpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gY29tcGFyZSB0aGUgdmFsdWUgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheVxuXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgZ2VuZXJhdGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvID0gZnVuY3Rpb24gZ2VuZXJhdGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvKGJhc2VNZWRpYURlY29kZVRpbWUsIHN0YXJ0RHRzLCBzdGFydFB0cywgZW5kRHRzLCBlbmRQdHMsIHByZXBlbmRlZENvbnRlbnREdXJhdGlvbikge1xuICAgICAgdmFyIHB0c09mZnNldEZyb21EdHMgPSBzdGFydFB0cyAtIHN0YXJ0RHRzLFxuICAgICAgICAgIGRlY29kZUR1cmF0aW9uID0gZW5kRHRzIC0gc3RhcnREdHMsXG4gICAgICAgICAgcHJlc2VudGF0aW9uRHVyYXRpb24gPSBlbmRQdHMgLSBzdGFydFB0czsgLy8gVGhlIFBUUyBhbmQgRFRTIHZhbHVlcyBhcmUgYmFzZWQgb24gdGhlIGFjdHVhbCBzdHJlYW0gdGltZXMgZnJvbSB0aGUgc2VnbWVudCxcbiAgICAgIC8vIGhvd2V2ZXIsIHRoZSBwbGF5ZXIgdGltZSB2YWx1ZXMgd2lsbCByZWZsZWN0IGEgc3RhcnQgZnJvbSB0aGUgYmFzZU1lZGlhRGVjb2RlVGltZS5cbiAgICAgIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgcmVsZXZhbnQgdmFsdWVzIGZvciB0aGUgcGxheWVyIHRpbWVzLCBiYXNlIHRpbWluZyBpbmZvIG9uIHRoZVxuICAgICAgLy8gYmFzZU1lZGlhRGVjb2RlVGltZSBhbmQgdGhlIERUUyBhbmQgUFRTIGR1cmF0aW9ucyBvZiB0aGUgc2VnbWVudC5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICBkdHM6IGJhc2VNZWRpYURlY29kZVRpbWUsXG4gICAgICAgICAgcHRzOiBiYXNlTWVkaWFEZWNvZGVUaW1lICsgcHRzT2Zmc2V0RnJvbUR0c1xuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBkdHM6IGJhc2VNZWRpYURlY29kZVRpbWUgKyBkZWNvZGVEdXJhdGlvbixcbiAgICAgICAgICBwdHM6IGJhc2VNZWRpYURlY29kZVRpbWUgKyBwcmVzZW50YXRpb25EdXJhdGlvblxuICAgICAgICB9LFxuICAgICAgICBwcmVwZW5kZWRDb250ZW50RHVyYXRpb246IHByZXBlbmRlZENvbnRlbnREdXJhdGlvbixcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogYmFzZU1lZGlhRGVjb2RlVGltZVxuICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBzaW5nbGUtdHJhY2ssIElTTyBCTUZGIG1lZGlhIHNlZ21lbnQgZnJvbSBBQUMgZGF0YVxuICAgICAqIGV2ZW50cy4gVGhlIG91dHB1dCBvZiB0aGlzIHN0cmVhbSBjYW4gYmUgZmVkIHRvIGEgU291cmNlQnVmZmVyXG4gICAgICogY29uZmlndXJlZCB3aXRoIGEgc3VpdGFibGUgaW5pdGlhbGl6YXRpb24gc2VnbWVudC5cbiAgICAgKiBAcGFyYW0gdHJhY2sge29iamVjdH0gdHJhY2sgbWV0YWRhdGEgY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtvYmplY3R9IHRyYW5zbXV4ZXIgb3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzIHtib29sZWFufSBJZiB0cnVlLCBrZWVwIHRoZSB0aW1lc3RhbXBzXG4gICAgICogICAgICAgIGluIHRoZSBzb3VyY2U7IGZhbHNlIHRvIGFkanVzdCB0aGUgZmlyc3Qgc2VnbWVudCB0byBzdGFydCBhdCAwLlxuICAgICAqL1xuXG5cbiAgICBfQXVkaW9TZWdtZW50U3RyZWFtID0gZnVuY3Rpb24gQXVkaW9TZWdtZW50U3RyZWFtKHRyYWNrLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYWR0c0ZyYW1lcyA9IFtdLFxuICAgICAgICAgIHNlcXVlbmNlTnVtYmVyID0gMCxcbiAgICAgICAgICBlYXJsaWVzdEFsbG93ZWREdHMgPSAwLFxuICAgICAgICAgIGF1ZGlvQXBwZW5kU3RhcnRUcyA9IDAsXG4gICAgICAgICAgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lID0gSW5maW5pdHk7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgX0F1ZGlvU2VnbWVudFN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY29sbGVjdER0c0luZm8odHJhY2ssIGRhdGEpO1xuXG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgIEFVRElPX1BST1BFUlRJRVMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgdHJhY2tbcHJvcF0gPSBkYXRhW3Byb3BdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIGJ1ZmZlciBhdWRpbyBkYXRhIHVudGlsIGVuZCgpIGlzIGNhbGxlZFxuXG5cbiAgICAgICAgYWR0c0ZyYW1lcy5wdXNoKGRhdGEpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRFYXJsaWVzdER0cyA9IGZ1bmN0aW9uIChlYXJsaWVzdER0cykge1xuICAgICAgICBlYXJsaWVzdEFsbG93ZWREdHMgPSBlYXJsaWVzdER0cyAtIHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldFZpZGVvQmFzZU1lZGlhRGVjb2RlVGltZSA9IGZ1bmN0aW9uIChiYXNlTWVkaWFEZWNvZGVUaW1lKSB7XG4gICAgICAgIHZpZGVvQmFzZU1lZGlhRGVjb2RlVGltZSA9IGJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldEF1ZGlvQXBwZW5kU3RhcnQgPSBmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgIGF1ZGlvQXBwZW5kU3RhcnRUcyA9IHRpbWVzdGFtcDtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmcmFtZXMsIG1vb2YsIG1kYXQsIGJveGVzLCBmcmFtZUR1cmF0aW9uOyAvLyByZXR1cm4gZWFybHkgaWYgbm8gYXVkaW8gZGF0YSBoYXMgYmVlbiBvYnNlcnZlZFxuXG4gICAgICAgIGlmIChhZHRzRnJhbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZG9uZScsICdBdWRpb1NlZ21lbnRTdHJlYW0nKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmcmFtZXMgPSBhdWRpb0ZyYW1lVXRpbHMudHJpbUFkdHNGcmFtZXNCeUVhcmxpZXN0RHRzKGFkdHNGcmFtZXMsIHRyYWNrLCBlYXJsaWVzdEFsbG93ZWREdHMpO1xuICAgICAgICB0cmFjay5iYXNlTWVkaWFEZWNvZGVUaW1lID0gdHJhY2tEZWNvZGVJbmZvLmNhbGN1bGF0ZVRyYWNrQmFzZU1lZGlhRGVjb2RlVGltZSh0cmFjaywgb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzKTtcbiAgICAgICAgYXVkaW9GcmFtZVV0aWxzLnByZWZpeFdpdGhTaWxlbmNlKHRyYWNrLCBmcmFtZXMsIGF1ZGlvQXBwZW5kU3RhcnRUcywgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lKTsgLy8gd2UgaGF2ZSB0byBidWlsZCB0aGUgaW5kZXggZnJvbSBieXRlIGxvY2F0aW9ucyB0b1xuICAgICAgICAvLyBzYW1wbGVzICh0aGF0IGlzLCBhZHRzIGZyYW1lcykgaW4gdGhlIGF1ZGlvIGRhdGFcblxuICAgICAgICB0cmFjay5zYW1wbGVzID0gYXVkaW9GcmFtZVV0aWxzLmdlbmVyYXRlU2FtcGxlVGFibGUoZnJhbWVzKTsgLy8gY29uY2F0ZW5hdGUgdGhlIGF1ZGlvIGRhdGEgdG8gY29uc3R1Y3QgdGhlIG1kYXRcblxuICAgICAgICBtZGF0ID0gbXA0R2VuZXJhdG9yLm1kYXQoYXVkaW9GcmFtZVV0aWxzLmNvbmNhdGVuYXRlRnJhbWVEYXRhKGZyYW1lcykpO1xuICAgICAgICBhZHRzRnJhbWVzID0gW107XG4gICAgICAgIG1vb2YgPSBtcDRHZW5lcmF0b3IubW9vZihzZXF1ZW5jZU51bWJlciwgW3RyYWNrXSk7XG4gICAgICAgIGJveGVzID0gbmV3IFVpbnQ4QXJyYXkobW9vZi5ieXRlTGVuZ3RoICsgbWRhdC5ieXRlTGVuZ3RoKTsgLy8gYnVtcCB0aGUgc2VxdWVuY2UgbnVtYmVyIGZvciBuZXh0IHRpbWVcblxuICAgICAgICBzZXF1ZW5jZU51bWJlcisrO1xuICAgICAgICBib3hlcy5zZXQobW9vZik7XG4gICAgICAgIGJveGVzLnNldChtZGF0LCBtb29mLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY2xlYXJEdHNJbmZvKHRyYWNrKTtcbiAgICAgICAgZnJhbWVEdXJhdGlvbiA9IE1hdGguY2VpbChPTkVfU0VDT05EX0lOX1RTJDMgKiAxMDI0IC8gdHJhY2suc2FtcGxlcmF0ZSk7IC8vIFRPRE8gdGhpcyBjaGVjayB3YXMgYWRkZWQgdG8gbWFpbnRhaW4gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgKHBhcnRpY3VsYXJseSB3aXRoXG4gICAgICAgIC8vIHRlc3RzKSBvbiBhZGRpbmcgdGhlIHRpbWluZ0luZm8gZXZlbnQuIEhvd2V2ZXIsIGl0IHNlZW1zIHVubGlrZWx5IHRoYXQgdGhlcmUncyBhXG4gICAgICAgIC8vIHZhbGlkIHVzZS1jYXNlIHdoZXJlIGFuIGluaXQgc2VnbWVudC9kYXRhIHNob3VsZCBiZSB0cmlnZ2VyZWQgd2l0aG91dCBhc3NvY2lhdGVkXG4gICAgICAgIC8vIGZyYW1lcy4gTGVhdmluZyBmb3Igbm93LCBidXQgc2hvdWxkIGJlIGxvb2tlZCBpbnRvLlxuXG4gICAgICAgIGlmIChmcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1pbmdJbmZvJywge1xuICAgICAgICAgICAgc3RhcnQ6IGZyYW1lc1swXS5kdHMsXG4gICAgICAgICAgICBlbmQ6IGZyYW1lc1swXS5kdHMgKyBmcmFtZXMubGVuZ3RoICogZnJhbWVEdXJhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgICBib3hlczogYm94ZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZG9uZScsICdBdWRpb1NlZ21lbnRTdHJlYW0nKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8odHJhY2spO1xuICAgICAgICBhZHRzRnJhbWVzID0gW107XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9BdWRpb1NlZ21lbnRTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBzaW5nbGUtdHJhY2ssIElTTyBCTUZGIG1lZGlhIHNlZ21lbnQgZnJvbSBIMjY0IGRhdGFcbiAgICAgKiBldmVudHMuIFRoZSBvdXRwdXQgb2YgdGhpcyBzdHJlYW0gY2FuIGJlIGZlZCB0byBhIFNvdXJjZUJ1ZmZlclxuICAgICAqIGNvbmZpZ3VyZWQgd2l0aCBhIHN1aXRhYmxlIGluaXRpYWxpemF0aW9uIHNlZ21lbnQuXG4gICAgICogQHBhcmFtIHRyYWNrIHtvYmplY3R9IHRyYWNrIG1ldGFkYXRhIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7b2JqZWN0fSB0cmFuc211eGVyIG9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWxpZ25Hb3BzQXRFbmQge2Jvb2xlYW59IElmIHRydWUsIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGVcbiAgICAgKiAgICAgICAgZ29wc1RvQWxpZ25XaXRoIGxpc3Qgd2hlbiBhdHRlbXB0aW5nIHRvIGFsaWduIGdvcCBwdHNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzIHtib29sZWFufSBJZiB0cnVlLCBrZWVwIHRoZSB0aW1lc3RhbXBzXG4gICAgICogICAgICAgIGluIHRoZSBzb3VyY2U7IGZhbHNlIHRvIGFkanVzdCB0aGUgZmlyc3Qgc2VnbWVudCB0byBzdGFydCBhdCAwLlxuICAgICAqL1xuXG4gICAgX1ZpZGVvU2VnbWVudFN0cmVhbSA9IGZ1bmN0aW9uIFZpZGVvU2VnbWVudFN0cmVhbSh0cmFjaywgb3B0aW9ucykge1xuICAgICAgdmFyIHNlcXVlbmNlTnVtYmVyID0gMCxcbiAgICAgICAgICBuYWxVbml0cyA9IFtdLFxuICAgICAgICAgIGdvcHNUb0FsaWduV2l0aCA9IFtdLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBwcHM7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgX1ZpZGVvU2VnbWVudFN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICBkZWxldGUgdHJhY2subWluUFRTO1xuICAgICAgdGhpcy5nb3BDYWNoZV8gPSBbXTtcbiAgICAgIC8qKlxuICAgICAgICAqIENvbnN0cnVjdHMgYSBJU08gQk1GRiBzZWdtZW50IGdpdmVuIEgyNjQgbmFsVW5pdHNcbiAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gbmFsVW5pdCBBIGRhdGEgZXZlbnQgcmVwcmVzZW50aW5nIGEgbmFsVW5pdFxuICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYWxVbml0Lm5hbFVuaXRUeXBlXG4gICAgICAgICogQHBhcmFtIHtPYmplY3R9IG5hbFVuaXQuY29uZmlnIFByb3BlcnRpZXMgZm9yIGEgbXA0IHRyYWNrXG4gICAgICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBuYWxVbml0LmRhdGEgVGhlIG5hbFVuaXQgYnl0ZXNcbiAgICAgICAgKiBAc2VlIGxpYi9jb2RlY3MvaDI2NC5qc1xuICAgICAgICoqL1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAobmFsVW5pdCkge1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY29sbGVjdER0c0luZm8odHJhY2ssIG5hbFVuaXQpOyAvLyByZWNvcmQgdGhlIHRyYWNrIGNvbmZpZ1xuXG4gICAgICAgIGlmIChuYWxVbml0Lm5hbFVuaXRUeXBlID09PSAnc2VxX3BhcmFtZXRlcl9zZXRfcmJzcCcgJiYgIWNvbmZpZykge1xuICAgICAgICAgIGNvbmZpZyA9IG5hbFVuaXQuY29uZmlnO1xuICAgICAgICAgIHRyYWNrLnNwcyA9IFtuYWxVbml0LmRhdGFdO1xuICAgICAgICAgIFZJREVPX1BST1BFUlRJRVMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgdHJhY2tbcHJvcF0gPSBjb25maWdbcHJvcF07XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmFsVW5pdC5uYWxVbml0VHlwZSA9PT0gJ3BpY19wYXJhbWV0ZXJfc2V0X3Jic3AnICYmICFwcHMpIHtcbiAgICAgICAgICBwcHMgPSBuYWxVbml0LmRhdGE7XG4gICAgICAgICAgdHJhY2sucHBzID0gW25hbFVuaXQuZGF0YV07XG4gICAgICAgIH0gLy8gYnVmZmVyIHZpZGVvIHVudGlsIGZsdXNoKCkgaXMgY2FsbGVkXG5cblxuICAgICAgICBuYWxVbml0cy5wdXNoKG5hbFVuaXQpO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICAqIFBhc3MgY29uc3RydWN0ZWQgSVNPIEJNRkYgdHJhY2sgYW5kIGJveGVzIG9uIHRvIHRoZVxuICAgICAgICAqIG5leHQgc3RyZWFtIGluIHRoZSBwaXBlbGluZVxuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmcmFtZXMsXG4gICAgICAgICAgICBnb3BGb3JGdXNpb24sXG4gICAgICAgICAgICBnb3BzLFxuICAgICAgICAgICAgbW9vZixcbiAgICAgICAgICAgIG1kYXQsXG4gICAgICAgICAgICBib3hlcyxcbiAgICAgICAgICAgIHByZXBlbmRlZENvbnRlbnREdXJhdGlvbiA9IDAsXG4gICAgICAgICAgICBmaXJzdEdvcCxcbiAgICAgICAgICAgIGxhc3RHb3A7IC8vIFRocm93IGF3YXkgbmFsVW5pdHMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBieXRlIHN0cmVhbSB1bnRpbFxuICAgICAgICAvLyB3ZSBmaW5kIHRoZSBmaXJzdCBBVURcblxuICAgICAgICB3aGlsZSAobmFsVW5pdHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG5hbFVuaXRzWzBdLm5hbFVuaXRUeXBlID09PSAnYWNjZXNzX3VuaXRfZGVsaW1pdGVyX3Jic3AnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuYWxVbml0cy5zaGlmdCgpO1xuICAgICAgICB9IC8vIFJldHVybiBlYXJseSBpZiBubyB2aWRlbyBkYXRhIGhhcyBiZWVuIG9ic2VydmVkXG5cblxuICAgICAgICBpZiAobmFsVW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5yZXNldFN0cmVhbV8oKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnVmlkZW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIE9yZ2FuaXplIHRoZSByYXcgbmFsLXVuaXRzIGludG8gYXJyYXlzIHRoYXQgcmVwcmVzZW50XG4gICAgICAgIC8vIGhpZ2hlci1sZXZlbCBjb25zdHJ1Y3RzIHN1Y2ggYXMgZnJhbWVzIGFuZCBnb3BzXG4gICAgICAgIC8vIChncm91cC1vZi1waWN0dXJlcylcblxuXG4gICAgICAgIGZyYW1lcyA9IGZyYW1lVXRpbHMuZ3JvdXBOYWxzSW50b0ZyYW1lcyhuYWxVbml0cyk7XG4gICAgICAgIGdvcHMgPSBmcmFtZVV0aWxzLmdyb3VwRnJhbWVzSW50b0dvcHMoZnJhbWVzKTsgLy8gSWYgdGhlIGZpcnN0IGZyYW1lIG9mIHRoaXMgZnJhZ21lbnQgaXMgbm90IGEga2V5ZnJhbWUgd2UgaGF2ZVxuICAgICAgICAvLyBhIHByb2JsZW0gc2luY2UgTVNFIChvbiBDaHJvbWUpIHJlcXVpcmVzIGEgbGVhZGluZyBrZXlmcmFtZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgaGF2ZSB0d28gYXBwcm9hY2hlcyB0byByZXBhaXJpbmcgdGhpcyBzaXR1YXRpb246XG4gICAgICAgIC8vIDEpIEdPUC1GVVNJT046XG4gICAgICAgIC8vICAgIFRoaXMgaXMgd2hlcmUgd2Uga2VlcCB0cmFjayBvZiB0aGUgR09QUyAoZ3JvdXAtb2YtcGljdHVyZXMpXG4gICAgICAgIC8vICAgIGZyb20gcHJldmlvdXMgZnJhZ21lbnRzIGFuZCBhdHRlbXB0IHRvIGZpbmQgb25lIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vICAgIHByZXBlbmQgdG8gdGhlIGN1cnJlbnQgZnJhZ21lbnQgaW4gb3JkZXIgdG8gY3JlYXRlIGEgdmFsaWRcbiAgICAgICAgLy8gICAgZnJhZ21lbnQuXG4gICAgICAgIC8vIDIpIEtFWUZSQU1FLVBVTExJTkc6XG4gICAgICAgIC8vICAgIEhlcmUgd2Ugc2VhcmNoIGZvciB0aGUgZmlyc3Qga2V5ZnJhbWUgaW4gdGhlIGZyYWdtZW50IGFuZFxuICAgICAgICAvLyAgICB0aHJvdyBhd2F5IGFsbCB0aGUgZnJhbWVzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIHRoZSBmcmFnbWVudFxuICAgICAgICAvLyAgICBhbmQgdGhhdCBrZXlmcmFtZS4gV2UgdGhlbiBleHRlbmQgdGhlIGR1cmF0aW9uIGFuZCBwdWxsIHRoZVxuICAgICAgICAvLyAgICBQVFMgb2YgdGhlIGtleWZyYW1lIGZvcndhcmQgc28gdGhhdCBpdCBjb3ZlcnMgdGhlIHRpbWUgcmFuZ2VcbiAgICAgICAgLy8gICAgb2YgdGhlIGZyYW1lcyB0aGF0IHdlcmUgZGlzcG9zZWQgb2YuXG4gICAgICAgIC8vXG4gICAgICAgIC8vICMxIGlzIGZhciBwcmVmZXJlYWJsZSBvdmVyICMyIHdoaWNoIGNhbiBjYXVzZSBcInN0dXR0ZXJpbmdcIiBidXRcbiAgICAgICAgLy8gcmVxdWlyZXMgbW9yZSB0aGluZ3MgdG8gYmUganVzdCByaWdodC5cblxuICAgICAgICBpZiAoIWdvcHNbMF1bMF0ua2V5RnJhbWUpIHtcbiAgICAgICAgICAvLyBTZWFyY2ggZm9yIGEgZ29wIGZvciBmdXNpb24gZnJvbSBvdXIgZ29wQ2FjaGVcbiAgICAgICAgICBnb3BGb3JGdXNpb24gPSB0aGlzLmdldEdvcEZvckZ1c2lvbl8obmFsVW5pdHNbMF0sIHRyYWNrKTtcblxuICAgICAgICAgIGlmIChnb3BGb3JGdXNpb24pIHtcbiAgICAgICAgICAgIC8vIGluIG9yZGVyIHRvIHByb3ZpZGUgbW9yZSBhY2N1cmF0ZSB0aW1pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlZ21lbnQsIHNhdmVcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBwcmVwZW5kZWQgdG8gdGhlIG9yaWdpbmFsIHNlZ21lbnQgZHVlIHRvIEdPUCBmdXNpb25cbiAgICAgICAgICAgIHByZXBlbmRlZENvbnRlbnREdXJhdGlvbiA9IGdvcEZvckZ1c2lvbi5kdXJhdGlvbjtcbiAgICAgICAgICAgIGdvcHMudW5zaGlmdChnb3BGb3JGdXNpb24pOyAvLyBBZGp1c3QgR29wcycgbWV0YWRhdGEgdG8gYWNjb3VudCBmb3IgdGhlIGluY2x1c2lvbiBvZiB0aGVcbiAgICAgICAgICAgIC8vIG5ldyBnb3AgYXQgdGhlIGJlZ2lubmluZ1xuXG4gICAgICAgICAgICBnb3BzLmJ5dGVMZW5ndGggKz0gZ29wRm9yRnVzaW9uLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBnb3BzLm5hbENvdW50ICs9IGdvcEZvckZ1c2lvbi5uYWxDb3VudDtcbiAgICAgICAgICAgIGdvcHMucHRzID0gZ29wRm9yRnVzaW9uLnB0cztcbiAgICAgICAgICAgIGdvcHMuZHRzID0gZ29wRm9yRnVzaW9uLmR0cztcbiAgICAgICAgICAgIGdvcHMuZHVyYXRpb24gKz0gZ29wRm9yRnVzaW9uLmR1cmF0aW9uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3QgZmluZCBhIGNhbmRpZGF0ZSBnb3AgZmFsbCBiYWNrIHRvIGtleWZyYW1lLXB1bGxpbmdcbiAgICAgICAgICAgIGdvcHMgPSBmcmFtZVV0aWxzLmV4dGVuZEZpcnN0S2V5RnJhbWUoZ29wcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFRyaW0gZ29wcyB0byBhbGlnbiB3aXRoIGdvcHNUb0FsaWduV2l0aFxuXG5cbiAgICAgICAgaWYgKGdvcHNUb0FsaWduV2l0aC5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgYWxpZ25lZEdvcHM7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5hbGlnbkdvcHNBdEVuZCkge1xuICAgICAgICAgICAgYWxpZ25lZEdvcHMgPSB0aGlzLmFsaWduR29wc0F0RW5kXyhnb3BzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxpZ25lZEdvcHMgPSB0aGlzLmFsaWduR29wc0F0U3RhcnRfKGdvcHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghYWxpZ25lZEdvcHMpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYWxsIHRoZSBuYWxzIGluIHRoZSBsYXN0IEdPUCBpbnRvIHRoZSBnb3AgY2FjaGVcbiAgICAgICAgICAgIHRoaXMuZ29wQ2FjaGVfLnVuc2hpZnQoe1xuICAgICAgICAgICAgICBnb3A6IGdvcHMucG9wKCksXG4gICAgICAgICAgICAgIHBwczogdHJhY2sucHBzLFxuICAgICAgICAgICAgICBzcHM6IHRyYWNrLnNwc1xuICAgICAgICAgICAgfSk7IC8vIEtlZXAgYSBtYXhpbXVtIG9mIDYgR09QcyBpbiB0aGUgY2FjaGVcblxuICAgICAgICAgICAgdGhpcy5nb3BDYWNoZV8ubGVuZ3RoID0gTWF0aC5taW4oNiwgdGhpcy5nb3BDYWNoZV8ubGVuZ3RoKTsgLy8gQ2xlYXIgbmFsVW5pdHNcblxuICAgICAgICAgICAgbmFsVW5pdHMgPSBbXTsgLy8gcmV0dXJuIGVhcmx5IG5vIGdvcHMgY2FuIGJlIGFsaWduZWQgd2l0aCBkZXNpcmVkIGdvcHNUb0FsaWduV2l0aFxuXG4gICAgICAgICAgICB0aGlzLnJlc2V0U3RyZWFtXygpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJywgJ1ZpZGVvU2VnbWVudFN0cmVhbScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gU29tZSBnb3BzIHdlcmUgdHJpbW1lZC4gY2xlYXIgZHRzIGluZm8gc28gbWluU2VnbWVudER0cyBhbmQgcHRzIGFyZSBjb3JyZWN0XG4gICAgICAgICAgLy8gd2hlbiByZWNhbGN1bGF0ZWQgYmVmb3JlIHNlbmRpbmcgb2ZmIHRvIENvYWxlc2NlU3RyZWFtXG5cblxuICAgICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8odHJhY2spO1xuICAgICAgICAgIGdvcHMgPSBhbGlnbmVkR29wcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYWNrRGVjb2RlSW5mby5jb2xsZWN0RHRzSW5mbyh0cmFjaywgZ29wcyk7IC8vIEZpcnN0LCB3ZSBoYXZlIHRvIGJ1aWxkIHRoZSBpbmRleCBmcm9tIGJ5dGUgbG9jYXRpb25zIHRvXG4gICAgICAgIC8vIHNhbXBsZXMgKHRoYXQgaXMsIGZyYW1lcykgaW4gdGhlIHZpZGVvIGRhdGFcblxuICAgICAgICB0cmFjay5zYW1wbGVzID0gZnJhbWVVdGlscy5nZW5lcmF0ZVNhbXBsZVRhYmxlKGdvcHMpOyAvLyBDb25jYXRlbmF0ZSB0aGUgdmlkZW8gZGF0YSBhbmQgY29uc3RydWN0IHRoZSBtZGF0XG5cbiAgICAgICAgbWRhdCA9IG1wNEdlbmVyYXRvci5tZGF0KGZyYW1lVXRpbHMuY29uY2F0ZW5hdGVOYWxEYXRhKGdvcHMpKTtcbiAgICAgICAgdHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSA9IHRyYWNrRGVjb2RlSW5mby5jYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUodHJhY2ssIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJvY2Vzc2VkR29wc0luZm8nLCBnb3BzLm1hcChmdW5jdGlvbiAoZ29wKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB0czogZ29wLnB0cyxcbiAgICAgICAgICAgIGR0czogZ29wLmR0cyxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IGdvcC5ieXRlTGVuZ3RoXG4gICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBmaXJzdEdvcCA9IGdvcHNbMF07XG4gICAgICAgIGxhc3RHb3AgPSBnb3BzW2dvcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHRoaXMudHJpZ2dlcignc2VnbWVudFRpbWluZ0luZm8nLCBnZW5lcmF0ZVZpZGVvU2VnbWVudFRpbWluZ0luZm8odHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSwgZmlyc3RHb3AuZHRzLCBmaXJzdEdvcC5wdHMsIGxhc3RHb3AuZHRzICsgbGFzdEdvcC5kdXJhdGlvbiwgbGFzdEdvcC5wdHMgKyBsYXN0R29wLmR1cmF0aW9uLCBwcmVwZW5kZWRDb250ZW50RHVyYXRpb24pKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1pbmdJbmZvJywge1xuICAgICAgICAgIHN0YXJ0OiBnb3BzWzBdLmR0cyxcbiAgICAgICAgICBlbmQ6IGdvcHNbZ29wcy5sZW5ndGggLSAxXS5kdHMgKyBnb3BzW2dvcHMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSk7IC8vIHNhdmUgYWxsIHRoZSBuYWxzIGluIHRoZSBsYXN0IEdPUCBpbnRvIHRoZSBnb3AgY2FjaGVcblxuICAgICAgICB0aGlzLmdvcENhY2hlXy51bnNoaWZ0KHtcbiAgICAgICAgICBnb3A6IGdvcHMucG9wKCksXG4gICAgICAgICAgcHBzOiB0cmFjay5wcHMsXG4gICAgICAgICAgc3BzOiB0cmFjay5zcHNcbiAgICAgICAgfSk7IC8vIEtlZXAgYSBtYXhpbXVtIG9mIDYgR09QcyBpbiB0aGUgY2FjaGVcblxuICAgICAgICB0aGlzLmdvcENhY2hlXy5sZW5ndGggPSBNYXRoLm1pbig2LCB0aGlzLmdvcENhY2hlXy5sZW5ndGgpOyAvLyBDbGVhciBuYWxVbml0c1xuXG4gICAgICAgIG5hbFVuaXRzID0gW107XG4gICAgICAgIHRoaXMudHJpZ2dlcignYmFzZU1lZGlhRGVjb2RlVGltZScsIHRyYWNrLmJhc2VNZWRpYURlY29kZVRpbWUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3RpbWVsaW5lU3RhcnRJbmZvJywgdHJhY2sudGltZWxpbmVTdGFydEluZm8pO1xuICAgICAgICBtb29mID0gbXA0R2VuZXJhdG9yLm1vb2Yoc2VxdWVuY2VOdW1iZXIsIFt0cmFja10pOyAvLyBpdCB3b3VsZCBiZSBncmVhdCB0byBhbGxvY2F0ZSB0aGlzIGFycmF5IHVwIGZyb250IGluc3RlYWQgb2ZcbiAgICAgICAgLy8gdGhyb3dpbmcgYXdheSBodW5kcmVkcyBvZiBtZWRpYSBzZWdtZW50IGZyYWdtZW50c1xuXG4gICAgICAgIGJveGVzID0gbmV3IFVpbnQ4QXJyYXkobW9vZi5ieXRlTGVuZ3RoICsgbWRhdC5ieXRlTGVuZ3RoKTsgLy8gQnVtcCB0aGUgc2VxdWVuY2UgbnVtYmVyIGZvciBuZXh0IHRpbWVcblxuICAgICAgICBzZXF1ZW5jZU51bWJlcisrO1xuICAgICAgICBib3hlcy5zZXQobW9vZik7XG4gICAgICAgIGJveGVzLnNldChtZGF0LCBtb29mLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgdHJhY2s6IHRyYWNrLFxuICAgICAgICAgIGJveGVzOiBib3hlc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXNldFN0cmVhbV8oKTsgLy8gQ29udGludWUgd2l0aCB0aGUgZmx1c2ggcHJvY2VzcyBub3dcblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnVmlkZW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlc2V0U3RyZWFtXygpO1xuICAgICAgICBuYWxVbml0cyA9IFtdO1xuICAgICAgICB0aGlzLmdvcENhY2hlXy5sZW5ndGggPSAwO1xuICAgICAgICBnb3BzVG9BbGlnbldpdGgubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldFN0cmVhbV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8odHJhY2spOyAvLyByZXNldCBjb25maWcgYW5kIHBwcyBiZWNhdXNlIHRoZXkgbWF5IGRpZmZlciBhY3Jvc3Mgc2VnbWVudHNcbiAgICAgICAgLy8gZm9yIGluc3RhbmNlLCB3aGVuIHdlIGFyZSByZW5kaXRpb24gc3dpdGNoaW5nXG5cbiAgICAgICAgY29uZmlnID0gdW5kZWZpbmVkO1xuICAgICAgICBwcHMgPSB1bmRlZmluZWQ7XG4gICAgICB9OyAvLyBTZWFyY2ggZm9yIGEgY2FuZGlkYXRlIEdvcCBmb3IgZ29wLWZ1c2lvbiBmcm9tIHRoZSBnb3AgY2FjaGUgYW5kXG4gICAgICAvLyByZXR1cm4gaXQgb3IgcmV0dXJuIG51bGwgaWYgbm8gZ29vZCBjYW5kaWRhdGUgd2FzIGZvdW5kXG5cblxuICAgICAgdGhpcy5nZXRHb3BGb3JGdXNpb25fID0gZnVuY3Rpb24gKG5hbFVuaXQpIHtcbiAgICAgICAgdmFyIGhhbGZTZWNvbmQgPSA0NTAwMCxcbiAgICAgICAgICAgIC8vIEhhbGYtYS1zZWNvbmQgaW4gYSA5MGtoeiBjbG9ja1xuICAgICAgICBhbGxvd2FibGVPdmVybGFwID0gMTAwMDAsXG4gICAgICAgICAgICAvLyBBYm91dCAzIGZyYW1lcyBAIDMwZnBzXG4gICAgICAgIG5lYXJlc3REaXN0YW5jZSA9IEluZmluaXR5LFxuICAgICAgICAgICAgZHRzRGlzdGFuY2UsXG4gICAgICAgICAgICBuZWFyZXN0R29wT2JqLFxuICAgICAgICAgICAgY3VycmVudEdvcCxcbiAgICAgICAgICAgIGN1cnJlbnRHb3BPYmosXG4gICAgICAgICAgICBpOyAvLyBTZWFyY2ggZm9yIHRoZSBHT1AgbmVhcmVzdCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgbmFsIHVuaXRcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5nb3BDYWNoZV8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjdXJyZW50R29wT2JqID0gdGhpcy5nb3BDYWNoZV9baV07XG4gICAgICAgICAgY3VycmVudEdvcCA9IGN1cnJlbnRHb3BPYmouZ29wOyAvLyBSZWplY3QgR29wcyB3aXRoIGRpZmZlcmVudCBTUFMgb3IgUFBTXG5cbiAgICAgICAgICBpZiAoISh0cmFjay5wcHMgJiYgYXJyYXlFcXVhbHModHJhY2sucHBzWzBdLCBjdXJyZW50R29wT2JqLnBwc1swXSkpIHx8ICEodHJhY2suc3BzICYmIGFycmF5RXF1YWxzKHRyYWNrLnNwc1swXSwgY3VycmVudEdvcE9iai5zcHNbMF0pKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBSZWplY3QgR29wcyB0aGF0IHdvdWxkIHJlcXVpcmUgYSBuZWdhdGl2ZSBiYXNlTWVkaWFEZWNvZGVUaW1lXG5cblxuICAgICAgICAgIGlmIChjdXJyZW50R29wLmR0cyA8IHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmR0cykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZW5kIG9mIHRoZSBnb3AgYW5kIHRoZSBzdGFydCBvZiB0aGUgbmFsVW5pdFxuXG5cbiAgICAgICAgICBkdHNEaXN0YW5jZSA9IG5hbFVuaXQuZHRzIC0gY3VycmVudEdvcC5kdHMgLSBjdXJyZW50R29wLmR1cmF0aW9uOyAvLyBPbmx5IGNvbnNpZGVyIEdPUFMgdGhhdCBzdGFydCBiZWZvcmUgdGhlIG5hbCB1bml0IGFuZCBlbmQgd2l0aGluXG4gICAgICAgICAgLy8gYSBoYWxmLXNlY29uZCBvZiB0aGUgbmFsIHVuaXRcblxuICAgICAgICAgIGlmIChkdHNEaXN0YW5jZSA+PSAtYWxsb3dhYmxlT3ZlcmxhcCAmJiBkdHNEaXN0YW5jZSA8PSBoYWxmU2Vjb25kKSB7XG4gICAgICAgICAgICAvLyBBbHdheXMgdXNlIHRoZSBjbG9zZXN0IEdPUCB3ZSBmb3VuZCBpZiB0aGVyZSBpcyBtb3JlIHRoYW5cbiAgICAgICAgICAgIC8vIG9uZSBjYW5kaWRhdGVcbiAgICAgICAgICAgIGlmICghbmVhcmVzdEdvcE9iaiB8fCBuZWFyZXN0RGlzdGFuY2UgPiBkdHNEaXN0YW5jZSkge1xuICAgICAgICAgICAgICBuZWFyZXN0R29wT2JqID0gY3VycmVudEdvcE9iajtcbiAgICAgICAgICAgICAgbmVhcmVzdERpc3RhbmNlID0gZHRzRGlzdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5lYXJlc3RHb3BPYmopIHtcbiAgICAgICAgICByZXR1cm4gbmVhcmVzdEdvcE9iai5nb3A7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07IC8vIHRyaW0gZ29wIGxpc3QgdG8gdGhlIGZpcnN0IGdvcCBmb3VuZCB0aGF0IGhhcyBhIG1hdGNoaW5nIHB0cyB3aXRoIGEgZ29wIGluIHRoZSBsaXN0XG4gICAgICAvLyBvZiBnb3BzVG9BbGlnbldpdGggc3RhcnRpbmcgZnJvbSB0aGUgU1RBUlQgb2YgdGhlIGxpc3RcblxuXG4gICAgICB0aGlzLmFsaWduR29wc0F0U3RhcnRfID0gZnVuY3Rpb24gKGdvcHMpIHtcbiAgICAgICAgdmFyIGFsaWduSW5kZXgsIGdvcEluZGV4LCBhbGlnbiwgZ29wLCBieXRlTGVuZ3RoLCBuYWxDb3VudCwgZHVyYXRpb24sIGFsaWduZWRHb3BzO1xuICAgICAgICBieXRlTGVuZ3RoID0gZ29wcy5ieXRlTGVuZ3RoO1xuICAgICAgICBuYWxDb3VudCA9IGdvcHMubmFsQ291bnQ7XG4gICAgICAgIGR1cmF0aW9uID0gZ29wcy5kdXJhdGlvbjtcbiAgICAgICAgYWxpZ25JbmRleCA9IGdvcEluZGV4ID0gMDtcblxuICAgICAgICB3aGlsZSAoYWxpZ25JbmRleCA8IGdvcHNUb0FsaWduV2l0aC5sZW5ndGggJiYgZ29wSW5kZXggPCBnb3BzLmxlbmd0aCkge1xuICAgICAgICAgIGFsaWduID0gZ29wc1RvQWxpZ25XaXRoW2FsaWduSW5kZXhdO1xuICAgICAgICAgIGdvcCA9IGdvcHNbZ29wSW5kZXhdO1xuXG4gICAgICAgICAgaWYgKGFsaWduLnB0cyA9PT0gZ29wLnB0cykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdvcC5wdHMgPiBhbGlnbi5wdHMpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgY3VycmVudCBnb3Agc3RhcnRzIGFmdGVyIHRoZSBjdXJyZW50IGdvcCB3ZSB3YW50IHRvIGFsaWduIG9uLCBzbyBpbmNyZW1lbnRcbiAgICAgICAgICAgIC8vIGFsaWduIGluZGV4XG4gICAgICAgICAgICBhbGlnbkluZGV4Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IC8vIGN1cnJlbnQgZ29wIHN0YXJ0cyBiZWZvcmUgdGhlIGN1cnJlbnQgZ29wIHdlIHdhbnQgdG8gYWxpZ24gb24uIHNvIGluY3JlbWVudCBnb3BcbiAgICAgICAgICAvLyBpbmRleFxuXG5cbiAgICAgICAgICBnb3BJbmRleCsrO1xuICAgICAgICAgIGJ5dGVMZW5ndGggLT0gZ29wLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgbmFsQ291bnQgLT0gZ29wLm5hbENvdW50O1xuICAgICAgICAgIGR1cmF0aW9uIC09IGdvcC5kdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnb3BJbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIG5vIGdvcHMgdG8gdHJpbVxuICAgICAgICAgIHJldHVybiBnb3BzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdvcEluZGV4ID09PSBnb3BzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGFsbCBnb3BzIHRyaW1tZWQsIHNraXAgYXBwZW5kaW5nIGFsbCBnb3BzXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBhbGlnbmVkR29wcyA9IGdvcHMuc2xpY2UoZ29wSW5kZXgpO1xuICAgICAgICBhbGlnbmVkR29wcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICAgICAgYWxpZ25lZEdvcHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgYWxpZ25lZEdvcHMubmFsQ291bnQgPSBuYWxDb3VudDtcbiAgICAgICAgYWxpZ25lZEdvcHMucHRzID0gYWxpZ25lZEdvcHNbMF0ucHRzO1xuICAgICAgICBhbGlnbmVkR29wcy5kdHMgPSBhbGlnbmVkR29wc1swXS5kdHM7XG4gICAgICAgIHJldHVybiBhbGlnbmVkR29wcztcbiAgICAgIH07IC8vIHRyaW0gZ29wIGxpc3QgdG8gdGhlIGZpcnN0IGdvcCBmb3VuZCB0aGF0IGhhcyBhIG1hdGNoaW5nIHB0cyB3aXRoIGEgZ29wIGluIHRoZSBsaXN0XG4gICAgICAvLyBvZiBnb3BzVG9BbGlnbldpdGggc3RhcnRpbmcgZnJvbSB0aGUgRU5EIG9mIHRoZSBsaXN0XG5cblxuICAgICAgdGhpcy5hbGlnbkdvcHNBdEVuZF8gPSBmdW5jdGlvbiAoZ29wcykge1xuICAgICAgICB2YXIgYWxpZ25JbmRleCwgZ29wSW5kZXgsIGFsaWduLCBnb3AsIGFsaWduRW5kSW5kZXgsIG1hdGNoRm91bmQ7XG4gICAgICAgIGFsaWduSW5kZXggPSBnb3BzVG9BbGlnbldpdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgZ29wSW5kZXggPSBnb3BzLmxlbmd0aCAtIDE7XG4gICAgICAgIGFsaWduRW5kSW5kZXggPSBudWxsO1xuICAgICAgICBtYXRjaEZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgd2hpbGUgKGFsaWduSW5kZXggPj0gMCAmJiBnb3BJbmRleCA+PSAwKSB7XG4gICAgICAgICAgYWxpZ24gPSBnb3BzVG9BbGlnbldpdGhbYWxpZ25JbmRleF07XG4gICAgICAgICAgZ29wID0gZ29wc1tnb3BJbmRleF07XG5cbiAgICAgICAgICBpZiAoYWxpZ24ucHRzID09PSBnb3AucHRzKSB7XG4gICAgICAgICAgICBtYXRjaEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbGlnbi5wdHMgPiBnb3AucHRzKSB7XG4gICAgICAgICAgICBhbGlnbkluZGV4LS07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYWxpZ25JbmRleCA9PT0gZ29wc1RvQWxpZ25XaXRoLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIC8vIGdvcC5wdHMgaXMgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IGFsaWdubWVudCBjYW5kaWRhdGUuIElmIG5vIG1hdGNoIGlzIGZvdW5kXG4gICAgICAgICAgICAvLyBieSB0aGUgZW5kIG9mIHRoaXMgbG9vcCwgd2Ugc3RpbGwgd2FudCB0byBhcHBlbmQgZ29wcyB0aGF0IGNvbWUgYWZ0ZXIgdGhpc1xuICAgICAgICAgICAgLy8gcG9pbnRcbiAgICAgICAgICAgIGFsaWduRW5kSW5kZXggPSBnb3BJbmRleDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnb3BJbmRleC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFtYXRjaEZvdW5kICYmIGFsaWduRW5kSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmltSW5kZXg7XG5cbiAgICAgICAgaWYgKG1hdGNoRm91bmQpIHtcbiAgICAgICAgICB0cmltSW5kZXggPSBnb3BJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmltSW5kZXggPSBhbGlnbkVuZEluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaW1JbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBnb3BzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsaWduZWRHb3BzID0gZ29wcy5zbGljZSh0cmltSW5kZXgpO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSBhbGlnbmVkR29wcy5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBnb3ApIHtcbiAgICAgICAgICB0b3RhbC5ieXRlTGVuZ3RoICs9IGdvcC5ieXRlTGVuZ3RoO1xuICAgICAgICAgIHRvdGFsLmR1cmF0aW9uICs9IGdvcC5kdXJhdGlvbjtcbiAgICAgICAgICB0b3RhbC5uYWxDb3VudCArPSBnb3AubmFsQ291bnQ7XG4gICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgYnl0ZUxlbmd0aDogMCxcbiAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICBuYWxDb3VudDogMFxuICAgICAgICB9KTtcbiAgICAgICAgYWxpZ25lZEdvcHMuYnl0ZUxlbmd0aCA9IG1ldGFkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIGFsaWduZWRHb3BzLmR1cmF0aW9uID0gbWV0YWRhdGEuZHVyYXRpb247XG4gICAgICAgIGFsaWduZWRHb3BzLm5hbENvdW50ID0gbWV0YWRhdGEubmFsQ291bnQ7XG4gICAgICAgIGFsaWduZWRHb3BzLnB0cyA9IGFsaWduZWRHb3BzWzBdLnB0cztcbiAgICAgICAgYWxpZ25lZEdvcHMuZHRzID0gYWxpZ25lZEdvcHNbMF0uZHRzO1xuICAgICAgICByZXR1cm4gYWxpZ25lZEdvcHM7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFsaWduR29wc1dpdGggPSBmdW5jdGlvbiAobmV3R29wc1RvQWxpZ25XaXRoKSB7XG4gICAgICAgIGdvcHNUb0FsaWduV2l0aCA9IG5ld0dvcHNUb0FsaWduV2l0aDtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9WaWRlb1NlZ21lbnRTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIC8qKlxuICAgICAqIEEgU3RyZWFtIHRoYXQgY2FuIGNvbWJpbmUgbXVsdGlwbGUgc3RyZWFtcyAoaWUuIGF1ZGlvICYgdmlkZW8pXG4gICAgICogaW50byBhIHNpbmdsZSBvdXRwdXQgc2VnbWVudCBmb3IgTVNFLiBBbHNvIHN1cHBvcnRzIGF1ZGlvLW9ubHlcbiAgICAgKiBhbmQgdmlkZW8tb25seSBzdHJlYW1zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtvYmplY3R9IHRyYW5zbXV4ZXIgb3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzIHtib29sZWFufSBJZiB0cnVlLCBrZWVwIHRoZSB0aW1lc3RhbXBzXG4gICAgICogICAgICAgIGluIHRoZSBzb3VyY2U7IGZhbHNlIHRvIGFkanVzdCB0aGUgZmlyc3Qgc2VnbWVudCB0byBzdGFydCBhdCBtZWRpYSB0aW1lbGluZSBzdGFydC5cbiAgICAgKi9cblxuICAgIF9Db2FsZXNjZVN0cmVhbSA9IGZ1bmN0aW9uIENvYWxlc2NlU3RyZWFtKG9wdGlvbnMsIG1ldGFkYXRhU3RyZWFtKSB7XG4gICAgICAvLyBOdW1iZXIgb2YgVHJhY2tzIHBlciBvdXRwdXQgc2VnbWVudFxuICAgICAgLy8gSWYgZ3JlYXRlciB0aGFuIDEsIHdlIGNvbWJpbmUgbXVsdGlwbGVcbiAgICAgIC8vIHRyYWNrcyBpbnRvIGEgc2luZ2xlIHNlZ21lbnRcbiAgICAgIHRoaXMubnVtYmVyT2ZUcmFja3MgPSAwO1xuICAgICAgdGhpcy5tZXRhZGF0YVN0cmVhbSA9IG1ldGFkYXRhU3RyZWFtO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZW11eCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5yZW11eFRyYWNrcyA9ICEhb3B0aW9ucy5yZW11eDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtdXhUcmFja3MgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyA9IG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBlbmRpbmdUcmFja3MgPSBbXTtcbiAgICAgIHRoaXMudmlkZW9UcmFjayA9IG51bGw7XG4gICAgICB0aGlzLnBlbmRpbmdCb3hlcyA9IFtdO1xuICAgICAgdGhpcy5wZW5kaW5nQ2FwdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMucGVuZGluZ01ldGFkYXRhID0gW107XG4gICAgICB0aGlzLnBlbmRpbmdCeXRlcyA9IDA7XG4gICAgICB0aGlzLmVtaXR0ZWRUcmFja3MgPSAwO1xuXG4gICAgICBfQ29hbGVzY2VTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTsgLy8gVGFrZSBvdXRwdXQgZnJvbSBtdWx0aXBsZVxuXG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgLy8gYnVmZmVyIGluY29taW5nIGNhcHRpb25zIHVudGlsIHRoZSBhc3NvY2lhdGVkIHZpZGVvIHNlZ21lbnRcbiAgICAgICAgLy8gZmluaXNoZXNcbiAgICAgICAgaWYgKG91dHB1dC50ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0NhcHRpb25zLnB1c2gob3V0cHV0KTtcbiAgICAgICAgfSAvLyBidWZmZXIgaW5jb21pbmcgaWQzIHRhZ3MgdW50aWwgdGhlIGZpbmFsIGZsdXNoXG5cblxuICAgICAgICBpZiAob3V0cHV0LmZyYW1lcykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdNZXRhZGF0YS5wdXNoKG91dHB1dCk7XG4gICAgICAgIH0gLy8gQWRkIHRoaXMgdHJhY2sgdG8gdGhlIGxpc3Qgb2YgcGVuZGluZyB0cmFja3MgYW5kIHN0b3JlXG4gICAgICAgIC8vIGltcG9ydGFudCBpbmZvcm1hdGlvbiByZXF1aXJlZCBmb3IgdGhlIGNvbnN0cnVjdGlvbiBvZlxuICAgICAgICAvLyB0aGUgZmluYWwgc2VnbWVudFxuXG5cbiAgICAgICAgdGhpcy5wZW5kaW5nVHJhY2tzLnB1c2gob3V0cHV0LnRyYWNrKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnl0ZXMgKz0gb3V0cHV0LmJveGVzLmJ5dGVMZW5ndGg7IC8vIFRPRE86IGlzIHRoZXJlIGFuIGlzc3VlIGZvciB0aGlzIGFnYWluc3QgY2hyb21lP1xuICAgICAgICAvLyBXZSB1bnNoaWZ0IGF1ZGlvIGFuZCBwdXNoIHZpZGVvIGJlY2F1c2VcbiAgICAgICAgLy8gYXMgb2YgQ2hyb21lIDc1IHdoZW4gc3dpdGNoaW5nIGZyb21cbiAgICAgICAgLy8gb25lIGluaXQgc2VnbWVudCB0byBhbm90aGVyIGlmIHRoZSB2aWRlb1xuICAgICAgICAvLyBtZGF0IGRvZXMgbm90IGFwcGVhciBhZnRlciB0aGUgYXVkaW8gbWRhdFxuICAgICAgICAvLyBvbmx5IGF1ZGlvIHdpbGwgcGxheSBmb3IgdGhlIGR1cmF0aW9uIG9mIG91ciB0cmFuc211eC5cblxuICAgICAgICBpZiAob3V0cHV0LnRyYWNrLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICB0aGlzLnZpZGVvVHJhY2sgPSBvdXRwdXQudHJhY2s7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nQm94ZXMucHVzaChvdXRwdXQuYm94ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG91dHB1dC50cmFjay50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb1RyYWNrID0gb3V0cHV0LnRyYWNrO1xuICAgICAgICAgIHRoaXMucGVuZGluZ0JveGVzLnVuc2hpZnQob3V0cHV0LmJveGVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX0NvYWxlc2NlU3RyZWFtLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcblxuICAgIF9Db2FsZXNjZVN0cmVhbS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLFxuICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICBjYXB0aW9uczogW10sXG4gICAgICAgIGNhcHRpb25TdHJlYW1zOiB7fSxcbiAgICAgICAgbWV0YWRhdGE6IFtdLFxuICAgICAgICBpbmZvOiB7fVxuICAgICAgfSxcbiAgICAgICAgICBjYXB0aW9uLFxuICAgICAgICAgIGlkMyxcbiAgICAgICAgICBpbml0U2VnbWVudCxcbiAgICAgICAgICB0aW1lbGluZVN0YXJ0UHRzID0gMCxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAodGhpcy5wZW5kaW5nVHJhY2tzLmxlbmd0aCA8IHRoaXMubnVtYmVyT2ZUcmFja3MpIHtcbiAgICAgICAgaWYgKGZsdXNoU291cmNlICE9PSAnVmlkZW9TZWdtZW50U3RyZWFtJyAmJiBmbHVzaFNvdXJjZSAhPT0gJ0F1ZGlvU2VnbWVudFN0cmVhbScpIHtcbiAgICAgICAgICAvLyBSZXR1cm4gYmVjYXVzZSB3ZSBoYXZlbid0IHJlY2VpdmVkIGEgZmx1c2ggZnJvbSBhIGRhdGEtZ2VuZXJhdGluZ1xuICAgICAgICAgIC8vIHBvcnRpb24gb2YgdGhlIHNlZ21lbnQgKG1lYW5pbmcgdGhhdCB3ZSBoYXZlIG9ubHkgcmVjaWV2ZWQgbWV0YS1kYXRhXG4gICAgICAgICAgLy8gb3IgY2FwdGlvbnMuKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlbXV4VHJhY2tzKSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHVudGlsIHdlIGhhdmUgZW5vdWdoIHRyYWNrcyBmcm9tIHRoZSBwaXBlbGluZSB0byByZW11eCAoaWYgd2VcbiAgICAgICAgICAvLyBhcmUgcmVtdXhpbmcgYXVkaW8gYW5kIHZpZGVvIGludG8gYSBzaW5nbGUgTVA0KVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlbmRpbmdUcmFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlcmUgd2UgcmVjZWl2ZSBhIGZsdXNoIHdpdGhvdXQgYW55IGRhdGEgaGF2aW5nIGJlZW5cbiAgICAgICAgICAvLyByZWNlaXZlZCB3ZSBjb25zaWRlciBpdCBhbiBlbWl0dGVkIHRyYWNrIGZvciB0aGUgcHVycG9zZXMgb2YgY29hbGVzY2luZ1xuICAgICAgICAgIC8vIGBkb25lYCBldmVudHMuXG4gICAgICAgICAgLy8gV2UgZG8gdGhpcyBmb3IgdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXMgYW4gYXVkaW8gYW5kIHZpZGVvIHRyYWNrIGluIHRoZVxuICAgICAgICAgIC8vIHNlZ21lbnQgYnV0IG5vIGF1ZGlvIGRhdGEuIChzZWVuIGluIHNldmVyYWwgcGxheWxpc3RzIHdpdGggYWx0ZXJuYXRlXG4gICAgICAgICAgLy8gYXVkaW8gdHJhY2tzIGFuZCBubyBhdWRpbyBwcmVzZW50IGluIHRoZSBtYWluIFRTIHNlZ21lbnRzLilcbiAgICAgICAgICB0aGlzLmVtaXR0ZWRUcmFja3MrKztcblxuICAgICAgICAgIGlmICh0aGlzLmVtaXR0ZWRUcmFja3MgPj0gdGhpcy5udW1iZXJPZlRyYWNrcykge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZWRUcmFja3MgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52aWRlb1RyYWNrKSB7XG4gICAgICAgIHRpbWVsaW5lU3RhcnRQdHMgPSB0aGlzLnZpZGVvVHJhY2sudGltZWxpbmVTdGFydEluZm8ucHRzO1xuICAgICAgICBWSURFT19QUk9QRVJUSUVTLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICBldmVudC5pbmZvW3Byb3BdID0gdGhpcy52aWRlb1RyYWNrW3Byb3BdO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hdWRpb1RyYWNrKSB7XG4gICAgICAgIHRpbWVsaW5lU3RhcnRQdHMgPSB0aGlzLmF1ZGlvVHJhY2sudGltZWxpbmVTdGFydEluZm8ucHRzO1xuICAgICAgICBBVURJT19QUk9QRVJUSUVTLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICBldmVudC5pbmZvW3Byb3BdID0gdGhpcy5hdWRpb1RyYWNrW3Byb3BdO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmlkZW9UcmFjayB8fCB0aGlzLmF1ZGlvVHJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1RyYWNrcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBldmVudC50eXBlID0gdGhpcy5wZW5kaW5nVHJhY2tzWzBdLnR5cGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnQudHlwZSA9ICdjb21iaW5lZCc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXR0ZWRUcmFja3MgKz0gdGhpcy5wZW5kaW5nVHJhY2tzLmxlbmd0aDtcbiAgICAgICAgaW5pdFNlZ21lbnQgPSBtcDRHZW5lcmF0b3IuaW5pdFNlZ21lbnQodGhpcy5wZW5kaW5nVHJhY2tzKTsgLy8gQ3JlYXRlIGEgbmV3IHR5cGVkIGFycmF5IHRvIGhvbGQgdGhlIGluaXQgc2VnbWVudFxuXG4gICAgICAgIGV2ZW50LmluaXRTZWdtZW50ID0gbmV3IFVpbnQ4QXJyYXkoaW5pdFNlZ21lbnQuYnl0ZUxlbmd0aCk7IC8vIENyZWF0ZSBhbiBpbml0IHNlZ21lbnQgY29udGFpbmluZyBhIG1vb3ZcbiAgICAgICAgLy8gYW5kIHRyYWNrIGRlZmluaXRpb25zXG5cbiAgICAgICAgZXZlbnQuaW5pdFNlZ21lbnQuc2V0KGluaXRTZWdtZW50KTsgLy8gQ3JlYXRlIGEgbmV3IHR5cGVkIGFycmF5IHRvIGhvbGQgdGhlIG1vb2YrbWRhdHNcblxuICAgICAgICBldmVudC5kYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5wZW5kaW5nQnl0ZXMpOyAvLyBBcHBlbmQgZWFjaCBtb29mK21kYXQgKG9uZSBwZXIgdHJhY2spIHRvZ2V0aGVyXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMucGVuZGluZ0JveGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZXZlbnQuZGF0YS5zZXQodGhpcy5wZW5kaW5nQm94ZXNbaV0sIG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IHRoaXMucGVuZGluZ0JveGVzW2ldLmJ5dGVMZW5ndGg7XG4gICAgICAgIH0gLy8gVHJhbnNsYXRlIGNhcHRpb24gUFRTIHRpbWVzIGludG8gc2Vjb25kIG9mZnNldHMgdG8gbWF0Y2ggdGhlXG4gICAgICAgIC8vIHZpZGVvIHRpbWVsaW5lIGZvciB0aGUgc2VnbWVudCwgYW5kIGFkZCB0cmFjayBpbmZvXG5cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5wZW5kaW5nQ2FwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYXB0aW9uID0gdGhpcy5wZW5kaW5nQ2FwdGlvbnNbaV07XG4gICAgICAgICAgY2FwdGlvbi5zdGFydFRpbWUgPSBjbG9jay5tZXRhZGF0YVRzVG9TZWNvbmRzKGNhcHRpb24uc3RhcnRQdHMsIHRpbWVsaW5lU3RhcnRQdHMsIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgICAgY2FwdGlvbi5lbmRUaW1lID0gY2xvY2subWV0YWRhdGFUc1RvU2Vjb25kcyhjYXB0aW9uLmVuZFB0cywgdGltZWxpbmVTdGFydFB0cywgdGhpcy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzKTtcbiAgICAgICAgICBldmVudC5jYXB0aW9uU3RyZWFtc1tjYXB0aW9uLnN0cmVhbV0gPSB0cnVlO1xuICAgICAgICAgIGV2ZW50LmNhcHRpb25zLnB1c2goY2FwdGlvbik7XG4gICAgICAgIH0gLy8gVHJhbnNsYXRlIElEMyBmcmFtZSBQVFMgdGltZXMgaW50byBzZWNvbmQgb2Zmc2V0cyB0byBtYXRjaCB0aGVcbiAgICAgICAgLy8gdmlkZW8gdGltZWxpbmUgZm9yIHRoZSBzZWdtZW50XG5cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5wZW5kaW5nTWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZDMgPSB0aGlzLnBlbmRpbmdNZXRhZGF0YVtpXTtcbiAgICAgICAgICBpZDMuY3VlVGltZSA9IGNsb2NrLm1ldGFkYXRhVHNUb1NlY29uZHMoaWQzLnB0cywgdGltZWxpbmVTdGFydFB0cywgdGhpcy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzKTtcbiAgICAgICAgICBldmVudC5tZXRhZGF0YS5wdXNoKGlkMyk7XG4gICAgICAgIH0gLy8gV2UgYWRkIHRoaXMgdG8gZXZlcnkgc2luZ2xlIGVtaXR0ZWQgc2VnbWVudCBldmVuIHRob3VnaCB3ZSBvbmx5IG5lZWRcbiAgICAgICAgLy8gaXQgZm9yIHRoZSBmaXJzdFxuXG5cbiAgICAgICAgZXZlbnQubWV0YWRhdGEuZGlzcGF0Y2hUeXBlID0gdGhpcy5tZXRhZGF0YVN0cmVhbS5kaXNwYXRjaFR5cGU7IC8vIFJlc2V0IHN0cmVhbSBzdGF0ZVxuXG4gICAgICAgIHRoaXMucGVuZGluZ1RyYWNrcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLnBlbmRpbmdCb3hlcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBlbmRpbmdDYXB0aW9ucy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBlbmRpbmdCeXRlcyA9IDA7XG4gICAgICAgIHRoaXMucGVuZGluZ01ldGFkYXRhLmxlbmd0aCA9IDA7IC8vIEVtaXQgdGhlIGJ1aWx0IHNlZ21lbnRcbiAgICAgICAgLy8gV2UgaW5jbHVkZSBjYXB0aW9ucyBhbmQgSUQzIHRhZ3MgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LFxuICAgICAgICAvLyBpZGVhbGx5IHdlIHNob3VsZCBzZW5kIG9ubHkgdmlkZW8gYW5kIGF1ZGlvIGluIHRoZSBkYXRhIGV2ZW50XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgZXZlbnQpOyAvLyBFbWl0IGVhY2ggY2FwdGlvbiB0byB0aGUgb3V0c2lkZSB3b3JsZFxuICAgICAgICAvLyBJZGVhbGx5LCB0aGlzIHdvdWxkIGhhcHBlbiBpbW1lZGlhdGVseSBvbiBwYXJzaW5nIGNhcHRpb25zLFxuICAgICAgICAvLyBidXQgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB2aWRlbyBkYXRhIGlzIHNlbnQgYmFjayBmaXJzdFxuICAgICAgICAvLyBzbyB0aGF0IGNhcHRpb24gdGltaW5nIGNhbiBiZSBhZGp1c3RlZCB0byBtYXRjaCB2aWRlbyB0aW1pbmdcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnQuY2FwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYXB0aW9uID0gZXZlbnQuY2FwdGlvbnNbaV07XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdjYXB0aW9uJywgY2FwdGlvbik7XG4gICAgICAgIH0gLy8gRW1pdCBlYWNoIGlkMyB0YWcgdG8gdGhlIG91dHNpZGUgd29ybGRcbiAgICAgICAgLy8gSWRlYWxseSwgdGhpcyB3b3VsZCBoYXBwZW4gaW1tZWRpYXRlbHkgb24gcGFyc2luZyB0aGUgdGFnLFxuICAgICAgICAvLyBidXQgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB2aWRlbyBkYXRhIGlzIHNlbnQgYmFjayBmaXJzdFxuICAgICAgICAvLyBzbyB0aGF0IElEMyBmcmFtZSB0aW1pbmcgY2FuIGJlIGFkanVzdGVkIHRvIG1hdGNoIHZpZGVvIHRpbWluZ1xuXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50Lm1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWQzID0gZXZlbnQubWV0YWRhdGFbaV07XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdpZDNGcmFtZScsIGlkMyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gT25seSBlbWl0IGBkb25lYCBpZiBhbGwgdHJhY2tzIGhhdmUgYmVlbiBmbHVzaGVkIGFuZCBlbWl0dGVkXG5cblxuICAgICAgaWYgKHRoaXMuZW1pdHRlZFRyYWNrcyA+PSB0aGlzLm51bWJlck9mVHJhY2tzKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZG9uZScpO1xuICAgICAgICB0aGlzLmVtaXR0ZWRUcmFja3MgPSAwO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfQ29hbGVzY2VTdHJlYW0ucHJvdG90eXBlLnNldFJlbXV4ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgdGhpcy5yZW11eFRyYWNrcyA9IHZhbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEEgU3RyZWFtIHRoYXQgZXhwZWN0cyBNUDJUIGJpbmFyeSBkYXRhIGFzIGlucHV0IGFuZCBwcm9kdWNlc1xuICAgICAqIGNvcnJlc3BvbmRpbmcgbWVkaWEgc2VnbWVudHMsIHN1aXRhYmxlIGZvciB1c2Ugd2l0aCBNZWRpYSBTb3VyY2VcbiAgICAgKiBFeHRlbnNpb24gKE1TRSkgaW1wbGVtZW50YXRpb25zIHRoYXQgc3VwcG9ydCB0aGUgSVNPIEJNRkYgYnl0ZVxuICAgICAqIHN0cmVhbSBmb3JtYXQsIGxpa2UgQ2hyb21lLlxuICAgICAqL1xuXG5cbiAgICBfVHJhbnNtdXhlciA9IGZ1bmN0aW9uIFRyYW5zbXV4ZXIob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIGhhc0ZsdXNoZWQgPSB0cnVlLFxuICAgICAgICAgIHZpZGVvVHJhY2ssXG4gICAgICAgICAgYXVkaW9UcmFjaztcblxuICAgICAgX1RyYW5zbXV4ZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcblxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB0aGlzLmJhc2VNZWRpYURlY29kZVRpbWUgPSBvcHRpb25zLmJhc2VNZWRpYURlY29kZVRpbWUgfHwgMDtcbiAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8gPSB7fTtcblxuICAgICAgdGhpcy5zZXR1cEFhY1BpcGVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGlwZWxpbmUgPSB7fTtcbiAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXyA9IHBpcGVsaW5lO1xuICAgICAgICBwaXBlbGluZS50eXBlID0gJ2FhYyc7XG4gICAgICAgIHBpcGVsaW5lLm1ldGFkYXRhU3RyZWFtID0gbmV3IG0ydHNfMS5NZXRhZGF0YVN0cmVhbSgpOyAvLyBzZXQgdXAgdGhlIHBhcnNpbmcgcGlwZWxpbmVcblxuICAgICAgICBwaXBlbGluZS5hYWNTdHJlYW0gPSBuZXcgYWFjKCk7XG4gICAgICAgIHBpcGVsaW5lLmF1ZGlvVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0gPSBuZXcgbTJ0c18xLlRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtKCdhdWRpbycpO1xuICAgICAgICBwaXBlbGluZS50aW1lZE1ldGFkYXRhVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0gPSBuZXcgbTJ0c18xLlRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtKCd0aW1lZC1tZXRhZGF0YScpO1xuICAgICAgICBwaXBlbGluZS5hZHRzU3RyZWFtID0gbmV3IGFkdHMoKTtcbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0gPSBuZXcgX0NvYWxlc2NlU3RyZWFtKG9wdGlvbnMsIHBpcGVsaW5lLm1ldGFkYXRhU3RyZWFtKTtcbiAgICAgICAgcGlwZWxpbmUuaGVhZE9mUGlwZWxpbmUgPSBwaXBlbGluZS5hYWNTdHJlYW07XG4gICAgICAgIHBpcGVsaW5lLmFhY1N0cmVhbS5waXBlKHBpcGVsaW5lLmF1ZGlvVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0pLnBpcGUocGlwZWxpbmUuYWR0c1N0cmVhbSk7XG4gICAgICAgIHBpcGVsaW5lLmFhY1N0cmVhbS5waXBlKHBpcGVsaW5lLnRpbWVkTWV0YWRhdGFUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSkucGlwZShwaXBlbGluZS5tZXRhZGF0YVN0cmVhbSkucGlwZShwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSk7XG4gICAgICAgIHBpcGVsaW5lLm1ldGFkYXRhU3RyZWFtLm9uKCd0aW1lc3RhbXAnLCBmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICBwaXBlbGluZS5hYWNTdHJlYW0uc2V0VGltZXN0YW1wKGZyYW1lLnRpbWVTdGFtcCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwaXBlbGluZS5hYWNTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT09ICd0aW1lZC1tZXRhZGF0YScgJiYgIXBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSkge1xuICAgICAgICAgICAgYXVkaW9UcmFjayA9IGF1ZGlvVHJhY2sgfHwge1xuICAgICAgICAgICAgICB0aW1lbGluZVN0YXJ0SW5mbzoge1xuICAgICAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWU6IHNlbGYuYmFzZU1lZGlhRGVjb2RlVGltZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb2RlYzogJ2FkdHMnLFxuICAgICAgICAgICAgICB0eXBlOiAnYXVkaW8nXG4gICAgICAgICAgICB9OyAvLyBob29rIHVwIHRoZSBhdWRpbyBzZWdtZW50IHN0cmVhbSB0byB0aGUgZmlyc3QgdHJhY2sgd2l0aCBhYWMgZGF0YVxuXG4gICAgICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5udW1iZXJPZlRyYWNrcysrO1xuICAgICAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtID0gbmV3IF9BdWRpb1NlZ21lbnRTdHJlYW0oYXVkaW9UcmFjaywgb3B0aW9ucyk7XG4gICAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ3RpbWluZ0luZm8nLCBzZWxmLnRyaWdnZXIuYmluZChzZWxmLCAnYXVkaW9UaW1pbmdJbmZvJykpOyAvLyBTZXQgdXAgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIGF1ZGlvIHBpcGVsaW5lXG5cbiAgICAgICAgICAgIHBpcGVsaW5lLmFkdHNTdHJlYW0ucGlwZShwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0pLnBpcGUocGlwZWxpbmUuY29hbGVzY2VTdHJlYW0pO1xuICAgICAgICAgIH0gLy8gZW1pdCBwbXQgaW5mb1xuXG5cbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3RyYWNraW5mbycsIHtcbiAgICAgICAgICAgIGhhc0F1ZGlvOiAhIWF1ZGlvVHJhY2ssXG4gICAgICAgICAgICBoYXNWaWRlbzogISF2aWRlb1RyYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAvLyBSZS1lbWl0IGFueSBkYXRhIGNvbWluZyBmcm9tIHRoZSBjb2FsZXNjZSBzdHJlYW0gdG8gdGhlIG91dHNpZGUgd29ybGRcblxuICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5vbignZGF0YScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdkYXRhJykpOyAvLyBMZXQgdGhlIGNvbnN1bWVyIGtub3cgd2UgaGF2ZSBmaW5pc2hlZCBmbHVzaGluZyB0aGUgZW50aXJlIHBpcGVsaW5lXG5cbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0ub24oJ2RvbmUnLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAnZG9uZScpKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0dXBUc1BpcGVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGlwZWxpbmUgPSB7fTtcbiAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXyA9IHBpcGVsaW5lO1xuICAgICAgICBwaXBlbGluZS50eXBlID0gJ3RzJztcbiAgICAgICAgcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0gPSBuZXcgbTJ0c18xLk1ldGFkYXRhU3RyZWFtKCk7IC8vIHNldCB1cCB0aGUgcGFyc2luZyBwaXBlbGluZVxuXG4gICAgICAgIHBpcGVsaW5lLnBhY2tldFN0cmVhbSA9IG5ldyBtMnRzXzEuVHJhbnNwb3J0UGFja2V0U3RyZWFtKCk7XG4gICAgICAgIHBpcGVsaW5lLnBhcnNlU3RyZWFtID0gbmV3IG0ydHNfMS5UcmFuc3BvcnRQYXJzZVN0cmVhbSgpO1xuICAgICAgICBwaXBlbGluZS5lbGVtZW50YXJ5U3RyZWFtID0gbmV3IG0ydHNfMS5FbGVtZW50YXJ5U3RyZWFtKCk7XG4gICAgICAgIHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0gbmV3IG0ydHNfMS5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSgpO1xuICAgICAgICBwaXBlbGluZS5hZHRzU3RyZWFtID0gbmV3IGFkdHMoKTtcbiAgICAgICAgcGlwZWxpbmUuaDI2NFN0cmVhbSA9IG5ldyBIMjY0U3RyZWFtKCk7XG4gICAgICAgIHBpcGVsaW5lLmNhcHRpb25TdHJlYW0gPSBuZXcgbTJ0c18xLkNhcHRpb25TdHJlYW0oKTtcbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0gPSBuZXcgX0NvYWxlc2NlU3RyZWFtKG9wdGlvbnMsIHBpcGVsaW5lLm1ldGFkYXRhU3RyZWFtKTtcbiAgICAgICAgcGlwZWxpbmUuaGVhZE9mUGlwZWxpbmUgPSBwaXBlbGluZS5wYWNrZXRTdHJlYW07IC8vIGRpc2Fzc2VtYmxlIE1QRUcyLVRTIHBhY2tldHMgaW50byBlbGVtZW50YXJ5IHN0cmVhbXNcblxuICAgICAgICBwaXBlbGluZS5wYWNrZXRTdHJlYW0ucGlwZShwaXBlbGluZS5wYXJzZVN0cmVhbSkucGlwZShwaXBlbGluZS5lbGVtZW50YXJ5U3RyZWFtKS5waXBlKHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtKTsgLy8gISFUSElTIE9SREVSIElTIElNUE9SVEFOVCEhXG4gICAgICAgIC8vIGRlbXV4IHRoZSBzdHJlYW1zXG5cbiAgICAgICAgcGlwZWxpbmUudGltZXN0YW1wUm9sbG92ZXJTdHJlYW0ucGlwZShwaXBlbGluZS5oMjY0U3RyZWFtKTtcbiAgICAgICAgcGlwZWxpbmUudGltZXN0YW1wUm9sbG92ZXJTdHJlYW0ucGlwZShwaXBlbGluZS5hZHRzU3RyZWFtKTtcbiAgICAgICAgcGlwZWxpbmUudGltZXN0YW1wUm9sbG92ZXJTdHJlYW0ucGlwZShwaXBlbGluZS5tZXRhZGF0YVN0cmVhbSkucGlwZShwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSk7IC8vIEhvb2sgdXAgQ0VBLTYwOC83MDggY2FwdGlvbiBzdHJlYW1cblxuICAgICAgICBwaXBlbGluZS5oMjY0U3RyZWFtLnBpcGUocGlwZWxpbmUuY2FwdGlvblN0cmVhbSkucGlwZShwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSk7XG4gICAgICAgIHBpcGVsaW5lLmVsZW1lbnRhcnlTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHZhciBpO1xuXG4gICAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ21ldGFkYXRhJykge1xuICAgICAgICAgICAgaSA9IGRhdGEudHJhY2tzLmxlbmd0aDsgLy8gc2NhbiB0aGUgdHJhY2tzIGxpc3RlZCBpbiB0aGUgbWV0YWRhdGFcblxuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICBpZiAoIXZpZGVvVHJhY2sgJiYgZGF0YS50cmFja3NbaV0udHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgIHZpZGVvVHJhY2sgPSBkYXRhLnRyYWNrc1tpXTtcbiAgICAgICAgICAgICAgICB2aWRlb1RyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmJhc2VNZWRpYURlY29kZVRpbWUgPSBzZWxmLmJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWF1ZGlvVHJhY2sgJiYgZGF0YS50cmFja3NbaV0udHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2sgPSBkYXRhLnRyYWNrc1tpXTtcbiAgICAgICAgICAgICAgICBhdWRpb1RyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmJhc2VNZWRpYURlY29kZVRpbWUgPSBzZWxmLmJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gLy8gaG9vayB1cCB0aGUgdmlkZW8gc2VnbWVudCBzdHJlYW0gdG8gdGhlIGZpcnN0IHRyYWNrIHdpdGggaDI2NCBkYXRhXG5cblxuICAgICAgICAgICAgaWYgKHZpZGVvVHJhY2sgJiYgIXBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbSkge1xuICAgICAgICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5udW1iZXJPZlRyYWNrcysrO1xuICAgICAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0gPSBuZXcgX1ZpZGVvU2VnbWVudFN0cmVhbSh2aWRlb1RyYWNrLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCd0aW1lbGluZVN0YXJ0SW5mbycsIGZ1bmN0aW9uICh0aW1lbGluZVN0YXJ0SW5mbykge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gdmlkZW8gZW1pdHMgdGltZWxpbmVTdGFydEluZm8gZGF0YSBhZnRlciBhIGZsdXNoLCB3ZSBmb3J3YXJkIHRoYXRcbiAgICAgICAgICAgICAgICAvLyBpbmZvIHRvIHRoZSBBdWRpb1NlZ21lbnRTdHJlYW0sIGlmIGl0IGV4aXN0cywgYmVjYXVzZSB2aWRlbyB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC8vIGRhdGEgdGFrZXMgcHJlY2VkZW5jZS5cbiAgICAgICAgICAgICAgICBpZiAoYXVkaW9UcmFjaykge1xuICAgICAgICAgICAgICAgICAgYXVkaW9UcmFjay50aW1lbGluZVN0YXJ0SW5mbyA9IHRpbWVsaW5lU3RhcnRJbmZvOyAvLyBPbiB0aGUgZmlyc3Qgc2VnbWVudCB3ZSB0cmltIEFBQyBmcmFtZXMgdGhhdCBleGlzdCBiZWZvcmUgdGhlXG4gICAgICAgICAgICAgICAgICAvLyB2ZXJ5IGVhcmxpZXN0IERUUyB3ZSBoYXZlIHNlZW4gaW4gdmlkZW8gYmVjYXVzZSBDaHJvbWUgd2lsbFxuICAgICAgICAgICAgICAgICAgLy8gaW50ZXJwcmV0IGFueSB2aWRlbyB0cmFjayB3aXRoIGEgYmFzZU1lZGlhRGVjb2RlVGltZSB0aGF0IGlzXG4gICAgICAgICAgICAgICAgICAvLyBub24temVybyBhcyBhIGdhcC5cblxuICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtLnNldEVhcmxpZXN0RHRzKHRpbWVsaW5lU3RhcnRJbmZvLmR0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCdwcm9jZXNzZWRHb3BzSW5mbycsIHNlbGYudHJpZ2dlci5iaW5kKHNlbGYsICdnb3BJbmZvJykpO1xuICAgICAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0ub24oJ3NlZ21lbnRUaW1pbmdJbmZvJywgc2VsZi50cmlnZ2VyLmJpbmQoc2VsZiwgJ3ZpZGVvU2VnbWVudFRpbWluZ0luZm8nKSk7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbS5vbignYmFzZU1lZGlhRGVjb2RlVGltZScsIGZ1bmN0aW9uIChiYXNlTWVkaWFEZWNvZGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF1ZGlvVHJhY2spIHtcbiAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbS5zZXRWaWRlb0Jhc2VNZWRpYURlY29kZVRpbWUoYmFzZU1lZGlhRGVjb2RlVGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCd0aW1pbmdJbmZvJywgc2VsZi50cmlnZ2VyLmJpbmQoc2VsZiwgJ3ZpZGVvVGltaW5nSW5mbycpKTsgLy8gU2V0IHVwIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSB2aWRlbyBwaXBlbGluZVxuXG4gICAgICAgICAgICAgIHBpcGVsaW5lLmgyNjRTdHJlYW0ucGlwZShwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0pLnBpcGUocGlwZWxpbmUuY29hbGVzY2VTdHJlYW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXVkaW9UcmFjayAmJiAhcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtKSB7XG4gICAgICAgICAgICAgIC8vIGhvb2sgdXAgdGhlIGF1ZGlvIHNlZ21lbnQgc3RyZWFtIHRvIHRoZSBmaXJzdCB0cmFjayB3aXRoIGFhYyBkYXRhXG4gICAgICAgICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLm51bWJlck9mVHJhY2tzKys7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSA9IG5ldyBfQXVkaW9TZWdtZW50U3RyZWFtKGF1ZGlvVHJhY2ssIG9wdGlvbnMpO1xuICAgICAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ3RpbWluZ0luZm8nLCBzZWxmLnRyaWdnZXIuYmluZChzZWxmLCAnYXVkaW9UaW1pbmdJbmZvJykpOyAvLyBTZXQgdXAgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIGF1ZGlvIHBpcGVsaW5lXG5cbiAgICAgICAgICAgICAgcGlwZWxpbmUuYWR0c1N0cmVhbS5waXBlKHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSkucGlwZShwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSk7XG4gICAgICAgICAgICB9IC8vIGVtaXQgcG10IGluZm9cblxuXG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3RyYWNraW5mbycsIHtcbiAgICAgICAgICAgICAgaGFzQXVkaW86ICEhYXVkaW9UcmFjayxcbiAgICAgICAgICAgICAgaGFzVmlkZW86ICEhdmlkZW9UcmFja1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgLy8gUmUtZW1pdCBhbnkgZGF0YSBjb21pbmcgZnJvbSB0aGUgY29hbGVzY2Ugc3RyZWFtIHRvIHRoZSBvdXRzaWRlIHdvcmxkXG5cbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0ub24oJ2RhdGEnLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAnZGF0YScpKTtcbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0ub24oJ2lkM0ZyYW1lJywgZnVuY3Rpb24gKGlkM0ZyYW1lKSB7XG4gICAgICAgICAgaWQzRnJhbWUuZGlzcGF0Y2hUeXBlID0gcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0uZGlzcGF0Y2hUeXBlO1xuICAgICAgICAgIHNlbGYudHJpZ2dlcignaWQzRnJhbWUnLCBpZDNGcmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5vbignY2FwdGlvbicsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdjYXB0aW9uJykpOyAvLyBMZXQgdGhlIGNvbnN1bWVyIGtub3cgd2UgaGF2ZSBmaW5pc2hlZCBmbHVzaGluZyB0aGUgZW50aXJlIHBpcGVsaW5lXG5cbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0ub24oJ2RvbmUnLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAnZG9uZScpKTtcbiAgICAgIH07IC8vIGhvb2sgdXAgdGhlIHNlZ21lbnQgc3RyZWFtcyBvbmNlIHRyYWNrIG1ldGFkYXRhIGlzIGRlbGl2ZXJlZFxuXG5cbiAgICAgIHRoaXMuc2V0QmFzZU1lZGlhRGVjb2RlVGltZSA9IGZ1bmN0aW9uIChiYXNlTWVkaWFEZWNvZGVUaW1lKSB7XG4gICAgICAgIHZhciBwaXBlbGluZSA9IHRoaXMudHJhbnNtdXhQaXBlbGluZV87XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgICAgICB0aGlzLmJhc2VNZWRpYURlY29kZVRpbWUgPSBiYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF1ZGlvVHJhY2spIHtcbiAgICAgICAgICBhdWRpb1RyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmR0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBhdWRpb1RyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLnB0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0cmFja0RlY29kZUluZm8uY2xlYXJEdHNJbmZvKGF1ZGlvVHJhY2spO1xuXG4gICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgICAgICAgIGF1ZGlvVHJhY2sudGltZWxpbmVTdGFydEluZm8uYmFzZU1lZGlhRGVjb2RlVGltZSA9IGJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBpcGVsaW5lLmF1ZGlvVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0pIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0uZGlzY29udGludWl0eSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aWRlb1RyYWNrKSB7XG4gICAgICAgICAgaWYgKHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbSkge1xuICAgICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLmdvcENhY2hlXyA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZpZGVvVHJhY2sudGltZWxpbmVTdGFydEluZm8uZHRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHZpZGVvVHJhY2sudGltZWxpbmVTdGFydEluZm8ucHRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8odmlkZW9UcmFjayk7XG4gICAgICAgICAgcGlwZWxpbmUuY2FwdGlvblN0cmVhbS5yZXNldCgpO1xuXG4gICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgICAgICAgIHZpZGVvVHJhY2sudGltZWxpbmVTdGFydEluZm8uYmFzZU1lZGlhRGVjb2RlVGltZSA9IGJhc2VNZWRpYURlY29kZVRpbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtKSB7XG4gICAgICAgICAgcGlwZWxpbmUudGltZXN0YW1wUm9sbG92ZXJTdHJlYW0uZGlzY29udGludWl0eSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldEF1ZGlvQXBwZW5kU3RhcnQgPSBmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgIGlmIChhdWRpb1RyYWNrKSB7XG4gICAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXy5hdWRpb1NlZ21lbnRTdHJlYW0uc2V0QXVkaW9BcHBlbmRTdGFydCh0aW1lc3RhbXApO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldFJlbXV4ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YXIgcGlwZWxpbmUgPSB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfO1xuICAgICAgICBvcHRpb25zLnJlbXV4ID0gdmFsO1xuXG4gICAgICAgIGlmIChwaXBlbGluZSAmJiBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSkge1xuICAgICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLnNldFJlbXV4KHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYWxpZ25Hb3BzV2l0aCA9IGZ1bmN0aW9uIChnb3BzVG9BbGlnbldpdGgpIHtcbiAgICAgICAgaWYgKHZpZGVvVHJhY2sgJiYgdGhpcy50cmFuc211eFBpcGVsaW5lXy52aWRlb1NlZ21lbnRTdHJlYW0pIHtcbiAgICAgICAgICB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLnZpZGVvU2VnbWVudFN0cmVhbS5hbGlnbkdvcHNXaXRoKGdvcHNUb0FsaWduV2l0aCk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIGZlZWQgaW5jb21pbmcgZGF0YSB0byB0aGUgZnJvbnQgb2YgdGhlIHBhcnNpbmcgcGlwZWxpbmVcblxuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoaGFzRmx1c2hlZCkge1xuICAgICAgICAgIHZhciBpc0FhYyA9IGlzTGlrZWx5QWFjRGF0YSQxKGRhdGEpO1xuXG4gICAgICAgICAgaWYgKGlzQWFjICYmIHRoaXMudHJhbnNtdXhQaXBlbGluZV8udHlwZSAhPT0gJ2FhYycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBBYWNQaXBlbGluZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzQWFjICYmIHRoaXMudHJhbnNtdXhQaXBlbGluZV8udHlwZSAhPT0gJ3RzJykge1xuICAgICAgICAgICAgdGhpcy5zZXR1cFRzUGlwZWxpbmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYXNGbHVzaGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLmhlYWRPZlBpcGVsaW5lLnB1c2goZGF0YSk7XG4gICAgICB9OyAvLyBmbHVzaCBhbnkgYnVmZmVyZWQgZGF0YVxuXG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhhc0ZsdXNoZWQgPSB0cnVlOyAvLyBTdGFydCBhdCB0aGUgdG9wIG9mIHRoZSBwaXBlbGluZSBhbmQgZmx1c2ggYWxsIHBlbmRpbmcgd29ya1xuXG4gICAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8uaGVhZE9mUGlwZWxpbmUuZmx1c2goKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW5kVGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8uaGVhZE9mUGlwZWxpbmUuZW5kVGltZWxpbmUoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLmhlYWRPZlBpcGVsaW5lKSB7XG4gICAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXy5oZWFkT2ZQaXBlbGluZS5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBDYXB0aW9uIGRhdGEgaGFzIHRvIGJlIHJlc2V0IHdoZW4gc2Vla2luZyBvdXRzaWRlIGJ1ZmZlcmVkIHJhbmdlXG5cblxuICAgICAgdGhpcy5yZXNldENhcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc211eFBpcGVsaW5lXy5jYXB0aW9uU3RyZWFtKSB7XG4gICAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXy5jYXB0aW9uU3RyZWFtLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9UcmFuc211eGVyLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcbiAgICB2YXIgdHJhbnNtdXhlciA9IHtcbiAgICAgIFRyYW5zbXV4ZXI6IF9UcmFuc211eGVyLFxuICAgICAgVmlkZW9TZWdtZW50U3RyZWFtOiBfVmlkZW9TZWdtZW50U3RyZWFtLFxuICAgICAgQXVkaW9TZWdtZW50U3RyZWFtOiBfQXVkaW9TZWdtZW50U3RyZWFtLFxuICAgICAgQVVESU9fUFJPUEVSVElFUzogQVVESU9fUFJPUEVSVElFUyxcbiAgICAgIFZJREVPX1BST1BFUlRJRVM6IFZJREVPX1BST1BFUlRJRVMsXG4gICAgICAvLyBleHBvcnRlZCBmb3IgdGVzdGluZ1xuICAgICAgZ2VuZXJhdGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvOiBnZW5lcmF0ZVZpZGVvU2VnbWVudFRpbWluZ0luZm9cbiAgICB9O1xuXG4gICAgdmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogQGZpbGUgdHJhbnNtdXhlci13b3JrZXIuanNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFJlLWVtaXRzIHRyYW5zbXV4ZXIgZXZlbnRzIGJ5IGNvbnZlcnRpbmcgdGhlbSBpbnRvIG1lc3NhZ2VzIHRvIHRoZVxuICAgICAqIHdvcmxkIG91dHNpZGUgdGhlIHdvcmtlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc211eGVyIHRoZSB0cmFuc211eGVyIHRvIHdpcmUgZXZlbnRzIG9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuXG4gICAgdmFyIHdpcmVUcmFuc211eGVyRXZlbnRzID0gZnVuY3Rpb24gd2lyZVRyYW5zbXV4ZXJFdmVudHMoc2VsZiwgdHJhbnNtdXhlciQkMSkge1xuICAgICAgdHJhbnNtdXhlciQkMS5vbignZGF0YScsIGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgICAgIC8vIHRyYW5zZmVyIG93bmVyc2hpcCBvZiB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlclxuICAgICAgICAvLyBpbnN0ZWFkIG9mIGRvaW5nIGEgY29weSB0byBzYXZlIG1lbW9yeVxuICAgICAgICAvLyBBcnJheUJ1ZmZlcnMgYXJlIHRyYW5zZmVyYWJsZSBidXQgZ2VuZXJpYyBUeXBlZEFycmF5cyBhcmUgbm90XG4gICAgICAgIC8vIEBsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJfV29ya2Vyc19BUEkvVXNpbmdfd2ViX3dvcmtlcnMjUGFzc2luZ19kYXRhX2J5X3RyYW5zZmVycmluZ19vd25lcnNoaXBfKHRyYW5zZmVyYWJsZV9vYmplY3RzKVxuICAgICAgICB2YXIgaW5pdEFycmF5ID0gc2VnbWVudC5pbml0U2VnbWVudDtcbiAgICAgICAgc2VnbWVudC5pbml0U2VnbWVudCA9IHtcbiAgICAgICAgICBkYXRhOiBpbml0QXJyYXkuYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGluaXRBcnJheS5ieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGluaXRBcnJheS5ieXRlTGVuZ3RoXG4gICAgICAgIH07XG4gICAgICAgIHZhciB0eXBlZEFycmF5ID0gc2VnbWVudC5kYXRhO1xuICAgICAgICBzZWdtZW50LmRhdGEgPSB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAnZGF0YScsXG4gICAgICAgICAgc2VnbWVudDogc2VnbWVudCxcbiAgICAgICAgICBieXRlT2Zmc2V0OiB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsXG4gICAgICAgICAgYnl0ZUxlbmd0aDogdHlwZWRBcnJheS5ieXRlTGVuZ3RoXG4gICAgICAgIH0sIFtzZWdtZW50LmRhdGFdKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHJhbnNtdXhlciQkMS5jYXB0aW9uU3RyZWFtKSB7XG4gICAgICAgIHRyYW5zbXV4ZXIkJDEuY2FwdGlvblN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjYXB0aW9uKSB7XG4gICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBhY3Rpb246ICdjYXB0aW9uJyxcbiAgICAgICAgICAgIGRhdGE6IGNhcHRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zbXV4ZXIkJDEub24oJ2RvbmUnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdkb25lJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNtdXhlciQkMS5vbignZ29wSW5mbycsIGZ1bmN0aW9uIChnb3BJbmZvKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2dvcEluZm8nLFxuICAgICAgICAgIGdvcEluZm86IGdvcEluZm9cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIkJDEub24oJ3ZpZGVvU2VnbWVudFRpbWluZ0luZm8nLCBmdW5jdGlvbiAodmlkZW9TZWdtZW50VGltaW5nSW5mbykge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICd2aWRlb1NlZ21lbnRUaW1pbmdJbmZvJyxcbiAgICAgICAgICB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvOiB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGwgaW5jb21pbmcgbWVzc2FnZXMgcm91dGUgdGhyb3VnaCB0aGlzIGhhc2guIElmIG5vIGZ1bmN0aW9uIGV4aXN0c1xuICAgICAqIHRvIGhhbmRsZSBhbiBpbmNvbWluZyBtZXNzYWdlLCB0aGVuIHdlIGlnbm9yZSB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBjbGFzcyBNZXNzYWdlSGFuZGxlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byBpbml0aWFsaXplIHdpdGhcbiAgICAgKi9cblxuXG4gICAgdmFyIE1lc3NhZ2VIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIE1lc3NhZ2VIYW5kbGVycyhzZWxmLCBvcHRpb25zKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIE1lc3NhZ2VIYW5kbGVycyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMuc2VsZiA9IHNlbGY7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBpbml0aWFsaXplIG91ciB3ZWIgd29ya2VyIGFuZCB3aXJlIGFsbCB0aGUgZXZlbnRzLlxuICAgICAgICovXG5cblxuICAgICAgY3JlYXRlQ2xhc3MoTWVzc2FnZUhhbmRsZXJzLCBbe1xuICAgICAgICBrZXk6ICdpbml0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgaWYgKHRoaXMudHJhbnNtdXhlcikge1xuICAgICAgICAgICAgdGhpcy50cmFuc211eGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnRyYW5zbXV4ZXIgPSBuZXcgdHJhbnNtdXhlci5UcmFuc211eGVyKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgd2lyZVRyYW5zbXV4ZXJFdmVudHModGhpcy5zZWxmLCB0aGlzLnRyYW5zbXV4ZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGRhdGEgKGEgdHMgc2VnbWVudCkgdG8gdGhlIHN0YXJ0IG9mIHRoZSB0cmFuc211eGVyIHBpcGVsaW5lIGZvclxuICAgICAgICAgKiBwcm9jZXNzaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhIGRhdGEgdG8gcHVzaCBpbnRvIHRoZSBtdXhlclxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdwdXNoJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2goZGF0YSkge1xuICAgICAgICAgIC8vIENhc3QgYXJyYXkgYnVmZmVyIHRvIGNvcnJlY3QgdHlwZSBmb3IgdHJhbnNtdXhlclxuICAgICAgICAgIHZhciBzZWdtZW50ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5kYXRhLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgdGhpcy50cmFuc211eGVyLnB1c2goc2VnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlY3JlYXRlIHRoZSB0cmFuc211eGVyIHNvIHRoYXQgdGhlIG5leHQgc2VnbWVudCBhZGRlZCB2aWEgYHB1c2hgXG4gICAgICAgICAqIHN0YXJ0IHdpdGggYSBmcmVzaCB0cmFuc211eGVyLlxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgYGJhc2VNZWRpYURlY29kZVRpbWVgIHRpbWUgZm9yIHRoZVxuICAgICAgICAgKiBuZXh0IHNlZ21lbnQgcHVzaGVkIGluLiBTdWJzZXF1ZW50IHNlZ21lbnRzIHdpbGwgaGF2ZSB0aGVpciBgYmFzZU1lZGlhRGVjb2RlVGltZWBcbiAgICAgICAgICogc2V0IHJlbGF0aXZlIHRvIHRoZSBmaXJzdCBiYXNlZCBvbiB0aGUgUFRTIHZhbHVlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgdXNlZCB0byBzZXQgdGhlIHRpbWVzdGFtcCBvZmZzZXQgaW4gdGhlIG11eGVyXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldFRpbWVzdGFtcE9mZnNldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUaW1lc3RhbXBPZmZzZXQoZGF0YSkge1xuICAgICAgICAgIHZhciB0aW1lc3RhbXBPZmZzZXQgPSBkYXRhLnRpbWVzdGFtcE9mZnNldCB8fCAwO1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhlci5zZXRCYXNlTWVkaWFEZWNvZGVUaW1lKE1hdGgucm91bmQodGltZXN0YW1wT2Zmc2V0ICogOTAwMDApKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzZXRBdWRpb0FwcGVuZFN0YXJ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEF1ZGlvQXBwZW5kU3RhcnQoZGF0YSkge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhlci5zZXRBdWRpb0FwcGVuZFN0YXJ0KE1hdGguY2VpbChkYXRhLmFwcGVuZFN0YXJ0ICogOTAwMDApKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRm9yY2VzIHRoZSBwaXBlbGluZSB0byBmaW5pc2ggcHJvY2Vzc2luZyB0aGUgbGFzdCBzZWdtZW50IGFuZCBlbWl0IGl0J3NcbiAgICAgICAgICogcmVzdWx0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgZXZlbnQgZGF0YSwgbm90IHJlYWxseSB1c2VkXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2ZsdXNoJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZsdXNoKGRhdGEpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zbXV4ZXIuZmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldENhcHRpb25zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Q2FwdGlvbnMoKSB7XG4gICAgICAgICAgdGhpcy50cmFuc211eGVyLnJlc2V0Q2FwdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhbGlnbkdvcHNXaXRoJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFsaWduR29wc1dpdGgoZGF0YSkge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhlci5hbGlnbkdvcHNXaXRoKGRhdGEuZ29wc1RvQWxpZ25XaXRoLnNsaWNlKCkpO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgICByZXR1cm4gTWVzc2FnZUhhbmRsZXJzO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiBPdXIgd2ViIHdyb2tlciBpbnRlcmZhY2Ugc28gdGhhdCB0aGluZ3MgY2FuIHRhbGsgdG8gbXV4LmpzXG4gICAgICogdGhhdCB3aWxsIGJlIHJ1bm5pbmcgaW4gYSB3ZWIgd29ya2VyLiB0aGUgc2NvcGUgaXMgcGFzc2VkIHRvIHRoaXMgYnlcbiAgICAgKiB3ZWJ3b3JraWZ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGYgdGhlIHNjb3BlIGZvciB0aGUgd2ViIHdvcmtlclxuICAgICAqL1xuXG5cbiAgICB2YXIgVHJhbnNtdXhlcldvcmtlciA9IGZ1bmN0aW9uIFRyYW5zbXV4ZXJXb3JrZXIoc2VsZikge1xuICAgICAgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnaW5pdCcgJiYgZXZlbnQuZGF0YS5vcHRpb25zKSB7XG4gICAgICAgICAgdGhpcy5tZXNzYWdlSGFuZGxlcnMgPSBuZXcgTWVzc2FnZUhhbmRsZXJzKHNlbGYsIGV2ZW50LmRhdGEub3B0aW9ucyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm1lc3NhZ2VIYW5kbGVycykge1xuICAgICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXJzID0gbmV3IE1lc3NhZ2VIYW5kbGVycyhzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEuYWN0aW9uICYmIGV2ZW50LmRhdGEuYWN0aW9uICE9PSAnaW5pdCcpIHtcbiAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlSGFuZGxlcnNbZXZlbnQuZGF0YS5hY3Rpb25dKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyc1tldmVudC5kYXRhLmFjdGlvbl0oZXZlbnQuZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgdHJhbnNtdXhlcldvcmtlciA9IG5ldyBUcmFuc211eGVyV29ya2VyKHNlbGYpO1xuICAgIHJldHVybiB0cmFuc211eGVyV29ya2VyO1xuICB9KCk7XG59KTtcbi8qKlxuICogQGZpbGUgLSBjb2RlY3MuanMgLSBIYW5kbGVzIHRhc2tzIHJlZ2FyZGluZyBjb2RlYyBzdHJpbmdzIHN1Y2ggYXMgdHJhbnNsYXRpbmcgdGhlbSB0b1xuICogY29kZWMgc3RyaW5ncywgb3IgdHJhbnNsYXRpbmcgY29kZWMgc3RyaW5ncyBpbnRvIG9iamVjdHMgdGhhdCBjYW4gYmUgZXhhbWluZWQuXG4gKi9cbi8vIERlZmF1bHQgY29kZWMgcGFyYW1ldGVycyBpZiBub25lIHdlcmUgcHJvdmlkZWQgZm9yIHZpZGVvIGFuZC9vciBhdWRpb1xuXG52YXIgZGVmYXVsdENvZGVjcyA9IHtcbiAgdmlkZW9Db2RlYzogJ2F2YzEnLFxuICB2aWRlb09iamVjdFR5cGVJbmRpY2F0b3I6ICcuNGQ0MDBkJyxcbiAgLy8gQUFDLUxDXG4gIGF1ZGlvUHJvZmlsZTogJzInXG59O1xuLyoqXG4gKiBSZXBsYWNlIHRoZSBvbGQgYXBwbGUtc3R5bGUgYGF2YzEuPGRkPi48ZGQ+YCBjb2RlYyBzdHJpbmcgd2l0aCB0aGUgc3RhbmRhcmRcbiAqIGBhdmMxLjxoaGhoaGg+YFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGNvZGVjcyBhbiBhcnJheSBvZiBjb2RlYyBzdHJpbmdzIHRvIGZpeFxuICogQHJldHVybiB7QXJyYXl9IHRoZSB0cmFuc2xhdGVkIGNvZGVjIGFycmF5XG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciB0cmFuc2xhdGVMZWdhY3lDb2RlY3MgPSBmdW5jdGlvbiB0cmFuc2xhdGVMZWdhY3lDb2RlY3MoY29kZWNzKSB7XG4gIHJldHVybiBjb2RlY3MubWFwKGZ1bmN0aW9uIChjb2RlYykge1xuICAgIHJldHVybiBjb2RlYy5yZXBsYWNlKC9hdmMxXFwuKFxcZCspXFwuKFxcZCspL2ksIGZ1bmN0aW9uIChvcmlnLCBwcm9maWxlLCBhdmNMZXZlbCkge1xuICAgICAgdmFyIHByb2ZpbGVIZXggPSAoJzAwJyArIE51bWJlcihwcm9maWxlKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIHZhciBhdmNMZXZlbEhleCA9ICgnMDAnICsgTnVtYmVyKGF2Y0xldmVsKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIHJldHVybiAnYXZjMS4nICsgcHJvZmlsZUhleCArICcwMCcgKyBhdmNMZXZlbEhleDtcbiAgICB9KTtcbiAgfSk7XG59O1xuLyoqXG4gKiBQYXJzZXMgYSBjb2RlYyBzdHJpbmcgdG8gcmV0cmlldmUgdGhlIG51bWJlciBvZiBjb2RlY3Mgc3BlY2lmaWVkLFxuICogdGhlIHZpZGVvIGNvZGVjIGFuZCBvYmplY3QgdHlwZSBpbmRpY2F0b3IsIGFuZCB0aGUgYXVkaW8gcHJvZmlsZS5cbiAqL1xuXG5cbnZhciBwYXJzZUNvZGVjcyA9IGZ1bmN0aW9uIHBhcnNlQ29kZWNzKCkge1xuICB2YXIgY29kZWNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBjb2RlY0NvdW50OiAwXG4gIH07XG4gIHZhciBwYXJzZWQgPSB2b2lkIDA7XG4gIHJlc3VsdC5jb2RlY0NvdW50ID0gY29kZWNzLnNwbGl0KCcsJykubGVuZ3RoO1xuICByZXN1bHQuY29kZWNDb3VudCA9IHJlc3VsdC5jb2RlY0NvdW50IHx8IDI7IC8vIHBhcnNlIHRoZSB2aWRlbyBjb2RlY1xuXG4gIHBhcnNlZCA9IC8oXnxcXHN8LCkrKGF2Y1sxM10pKFteICxdKikvaS5leGVjKGNvZGVjcyk7XG5cbiAgaWYgKHBhcnNlZCkge1xuICAgIHJlc3VsdC52aWRlb0NvZGVjID0gcGFyc2VkWzJdO1xuICAgIHJlc3VsdC52aWRlb09iamVjdFR5cGVJbmRpY2F0b3IgPSBwYXJzZWRbM107XG4gIH0gLy8gcGFyc2UgdGhlIGxhc3QgZmllbGQgb2YgdGhlIGF1ZGlvIGNvZGVjXG5cblxuICByZXN1bHQuYXVkaW9Qcm9maWxlID0gLyhefFxcc3wsKSttcDRhLlswLTlBLUZhLWZdK1xcLihbMC05QS1GYS1mXSspL2kuZXhlYyhjb2RlY3MpO1xuICByZXN1bHQuYXVkaW9Qcm9maWxlID0gcmVzdWx0LmF1ZGlvUHJvZmlsZSAmJiByZXN1bHQuYXVkaW9Qcm9maWxlWzJdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogUmVwbGFjZSBjb2RlY3MgaW4gdGhlIGNvZGVjIHN0cmluZyB3aXRoIHRoZSBvbGQgYXBwbGUtc3R5bGUgYGF2YzEuPGRkPi48ZGQ+YCB0byB0aGVcbiAqIHN0YW5kYXJkIGBhdmMxLjxoaGhoaGg+YC5cbiAqXG4gKiBAcGFyYW0gY29kZWNTdHJpbmcge1N0cmluZ30gdGhlIGNvZGVjIHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSB0aGUgY29kZWMgc3RyaW5nIHdpdGggb2xkIGFwcGxlLXN0eWxlIGNvZGVjcyByZXBsYWNlZFxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgbWFwTGVnYWN5QXZjQ29kZWNzID0gZnVuY3Rpb24gbWFwTGVnYWN5QXZjQ29kZWNzKGNvZGVjU3RyaW5nKSB7XG4gIHJldHVybiBjb2RlY1N0cmluZy5yZXBsYWNlKC9hdmMxXFwuKFxcZCspXFwuKFxcZCspL2ksIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB0cmFuc2xhdGVMZWdhY3lDb2RlY3MoW21hdGNoXSlbMF07XG4gIH0pO1xufTtcbi8qKlxuICogQnVpbGQgYSBtZWRpYSBtaW1lLXR5cGUgc3RyaW5nIGZyb20gYSBzZXQgb2YgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgZWl0aGVyICdhdWRpbycgb3IgJ3ZpZGVvJ1xuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRhaW5lciBlaXRoZXIgJ21wMnQnIG9yICdtcDQnXG4gKiBAcGFyYW0ge0FycmF5fSBjb2RlY3MgYW4gYXJyYXkgb2YgY29kZWMgc3RyaW5ncyB0byBhZGRcbiAqIEByZXR1cm4ge1N0cmluZ30gYSB2YWxpZCBtZWRpYSBtaW1lLXR5cGVcbiAqL1xuXG5cbnZhciBtYWtlTWltZVR5cGVTdHJpbmcgPSBmdW5jdGlvbiBtYWtlTWltZVR5cGVTdHJpbmcodHlwZSwgY29udGFpbmVyLCBjb2RlY3MpIHtcbiAgLy8gVGhlIGNvZGVjcyBhcnJheSBpcyBmaWx0ZXJlZCBzbyB0aGF0IGZhbHNleSB2YWx1ZXMgYXJlXG4gIC8vIGRyb3BwZWQgYW5kIGRvbid0IGNhdXNlIEFycmF5I2pvaW4gdG8gY3JlYXRlIHNwdXJpb3VzXG4gIC8vIGNvbW1hc1xuICByZXR1cm4gdHlwZSArICcvJyArIGNvbnRhaW5lciArICc7IGNvZGVjcz1cIicgKyBjb2RlY3MuZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICEhYztcbiAgfSkuam9pbignLCAnKSArICdcIic7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB0eXBlIGNvbnRhaW5lciBiYXNlZCBvbiBpbmZvcm1hdGlvbiBpbiB0aGUgcGxheWxpc3RcbiAqIEBwYXJhbSB7UGxheWxpc3R9IG1lZGlhIHRoZSBjdXJyZW50IG1lZGlhIHBsYXlsaXN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGEgdmFsaWQgbWVkaWEgY29udGFpbmVyIHR5cGVcbiAqL1xuXG5cbnZhciBnZXRDb250YWluZXJUeXBlID0gZnVuY3Rpb24gZ2V0Q29udGFpbmVyVHlwZShtZWRpYSkge1xuICAvLyBBbiBpbml0aWFsaXphdGlvbiBzZWdtZW50IG1lYW5zIHRoZSBtZWRpYSBwbGF5bGlzdCBpcyBhbiBpZnJhbWVcbiAgLy8gcGxheWxpc3Qgb3IgaXMgdXNpbmcgdGhlIG1wNCBjb250YWluZXIuIFdlIGRvbid0IGN1cnJlbnRseVxuICAvLyBzdXBwb3J0IGlmcmFtZSBwbGF5bGlzdHMsIHNvIGFzc3VtZSB0aGlzIGlzIHNpZ25hbGxpbmcgbXA0XG4gIC8vIGZyYWdtZW50cy5cbiAgaWYgKG1lZGlhLnNlZ21lbnRzICYmIG1lZGlhLnNlZ21lbnRzLmxlbmd0aCAmJiBtZWRpYS5zZWdtZW50c1swXS5tYXApIHtcbiAgICByZXR1cm4gJ21wNCc7XG4gIH1cblxuICByZXR1cm4gJ21wMnQnO1xufTtcbi8qKlxuICogUmV0dXJucyBhIHNldCBvZiBjb2RlYyBzdHJpbmdzIHBhcnNlZCBmcm9tIHRoZSBwbGF5bGlzdCBvciB0aGUgZGVmYXVsdFxuICogY29kZWMgc3RyaW5ncyBpZiBubyBjb2RlY3Mgd2VyZSBzcGVjaWZpZWQgaW4gdGhlIHBsYXlsaXN0XG4gKiBAcGFyYW0ge1BsYXlsaXN0fSBtZWRpYSB0aGUgY3VycmVudCBtZWRpYSBwbGF5bGlzdFxuICogQHJldHVybiB7T2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgdmlkZW8gYW5kIGF1ZGlvIGNvZGVjc1xuICovXG5cblxudmFyIGdldENvZGVjcyA9IGZ1bmN0aW9uIGdldENvZGVjcyhtZWRpYSkge1xuICAvLyBpZiB0aGUgY29kZWNzIHdlcmUgZXhwbGljaXRseSBzcGVjaWZpZWQsIHVzZSB0aGVtIGluc3RlYWQgb2YgdGhlXG4gIC8vIGRlZmF1bHRzXG4gIHZhciBtZWRpYUF0dHJpYnV0ZXMgPSBtZWRpYS5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmIChtZWRpYUF0dHJpYnV0ZXMuQ09ERUNTKSB7XG4gICAgcmV0dXJuIHBhcnNlQ29kZWNzKG1lZGlhQXR0cmlidXRlcy5DT0RFQ1MpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRDb2RlY3M7XG59O1xuXG52YXIgYXVkaW9Qcm9maWxlRnJvbURlZmF1bHQgPSBmdW5jdGlvbiBhdWRpb1Byb2ZpbGVGcm9tRGVmYXVsdChtYXN0ZXIsIGF1ZGlvR3JvdXBJZCkge1xuICBpZiAoIW1hc3Rlci5tZWRpYUdyb3Vwcy5BVURJTyB8fCAhYXVkaW9Hcm91cElkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXVkaW9Hcm91cCA9IG1hc3Rlci5tZWRpYUdyb3Vwcy5BVURJT1thdWRpb0dyb3VwSWRdO1xuXG4gIGlmICghYXVkaW9Hcm91cCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBhdWRpb0dyb3VwKSB7XG4gICAgdmFyIGF1ZGlvVHlwZSA9IGF1ZGlvR3JvdXBbbmFtZV07XG5cbiAgICBpZiAoYXVkaW9UeXBlW1wiZGVmYXVsdFwiXSAmJiBhdWRpb1R5cGUucGxheWxpc3RzKSB7XG4gICAgICAvLyBjb2RlYyBzaG91bGQgYmUgdGhlIHNhbWUgZm9yIGFsbCBwbGF5bGlzdHMgd2l0aGluIHRoZSBhdWRpbyB0eXBlXG4gICAgICByZXR1cm4gcGFyc2VDb2RlY3MoYXVkaW9UeXBlLnBsYXlsaXN0c1swXS5hdHRyaWJ1dGVzLkNPREVDUykuYXVkaW9Qcm9maWxlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgTUlNRSB0eXBlIHN0cmluZ3MgZm9yIGEgd29ya2luZyBjb25maWd1cmF0aW9uIG9mXG4gKiBTb3VyY2VCdWZmZXJzIHRvIHBsYXkgdmFyaWFudCBzdHJlYW1zIGluIGEgbWFzdGVyIHBsYXlsaXN0LiBJZlxuICogdGhlcmUgaXMgbm8gcG9zc2libGUgd29ya2luZyBjb25maWd1cmF0aW9uLCBhbiBlbXB0eSBhcnJheSB3aWxsIGJlXG4gKiByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0gbWFzdGVyIHtPYmplY3R9IHRoZSBtM3U4IG9iamVjdCBmb3IgdGhlIG1hc3RlciBwbGF5bGlzdFxuICogQHBhcmFtIG1lZGlhIHtPYmplY3R9IHRoZSBtM3U4IG9iamVjdCBmb3IgdGhlIHZhcmlhbnQgcGxheWxpc3RcbiAqIEByZXR1cm4ge0FycmF5fSB0aGUgTUlNRSB0eXBlIHN0cmluZ3MuIElmIHRoZSBhcnJheSBoYXMgbW9yZSB0aGFuXG4gKiBvbmUgZW50cnksIHRoZSBmaXJzdCBlbGVtZW50IHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSB2aWRlb1xuICogU291cmNlQnVmZmVyIGFuZCB0aGUgc2Vjb25kIHRvIHRoZSBhdWRpbyBTb3VyY2VCdWZmZXIuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBtaW1lVHlwZXNGb3JQbGF5bGlzdCA9IGZ1bmN0aW9uIG1pbWVUeXBlc0ZvclBsYXlsaXN0KG1hc3RlciwgbWVkaWEpIHtcbiAgdmFyIGNvbnRhaW5lclR5cGUgPSBnZXRDb250YWluZXJUeXBlKG1lZGlhKTtcbiAgdmFyIGNvZGVjSW5mbyA9IGdldENvZGVjcyhtZWRpYSk7XG4gIHZhciBtZWRpYUF0dHJpYnV0ZXMgPSBtZWRpYS5hdHRyaWJ1dGVzIHx8IHt9OyAvLyBEZWZhdWx0IGNvbmRpdGlvbiBmb3IgYSB0cmFkaXRpb25hbCBITFMgKG5vIGRlbXV4ZWQgYXVkaW8vdmlkZW8pXG5cbiAgdmFyIGlzTXV4ZWQgPSB0cnVlO1xuICB2YXIgaXNNYWF0ID0gZmFsc2U7XG5cbiAgaWYgKCFtZWRpYSkge1xuICAgIC8vIE5vdCBlbm91Z2ggaW5mb3JtYXRpb25cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBpZiAobWFzdGVyLm1lZGlhR3JvdXBzLkFVRElPICYmIG1lZGlhQXR0cmlidXRlcy5BVURJTykge1xuICAgIHZhciBhdWRpb0dyb3VwID0gbWFzdGVyLm1lZGlhR3JvdXBzLkFVRElPW21lZGlhQXR0cmlidXRlcy5BVURJT107IC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBhcmUgaW4gYSBtdWx0aXBsZS1hdWRpbyB0cmFjayBzY2VuYXJpb1xuXG4gICAgaWYgKGF1ZGlvR3JvdXApIHtcbiAgICAgIGlzTWFhdCA9IHRydWU7IC8vIFN0YXJ0IHdpdGggdGhlIGV2ZXJ5dGhpbmcgZGVtdXhlZCB0aGVuLi4uXG5cbiAgICAgIGlzTXV4ZWQgPSBmYWxzZTsgLy8gLi4uY2hlY2sgdG8gc2VlIGlmIGFueSBhdWRpbyBncm91cCB0cmFja3MgYXJlIG11eGVkIChpZS4gbGFja2luZyBhIHVyaSlcblxuICAgICAgZm9yICh2YXIgZ3JvdXBJZCBpbiBhdWRpb0dyb3VwKSB7XG4gICAgICAgIC8vIGVpdGhlciBhIHVyaSBpcyBwcmVzZW50IChpZiB0aGUgY2FzZSBvZiBITFMgYW5kIGFuIGV4dGVybmFsIHBsYXlsaXN0KSwgb3JcbiAgICAgICAgLy8gcGxheWxpc3RzIGlzIHByZXNlbnQgKGluIHRoZSBjYXNlIG9mIERBU0ggd2hlcmUgd2UgZG9uJ3QgaGF2ZSBleHRlcm5hbCBhdWRpb1xuICAgICAgICAvLyBwbGF5bGlzdHMpXG4gICAgICAgIGlmICghYXVkaW9Hcm91cFtncm91cElkXS51cmkgJiYgIWF1ZGlvR3JvdXBbZ3JvdXBJZF0ucGxheWxpc3RzKSB7XG4gICAgICAgICAgaXNNdXhlZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gSExTIHdpdGggbXVsdGlwbGUtYXVkaW8gdHJhY2tzIG11c3QgYWx3YXlzIGdldCBhbiBhdWRpbyBjb2RlYy5cbiAgLy8gUHV0IGFub3RoZXIgd2F5LCB0aGVyZSBpcyBubyB3YXkgdG8gaGF2ZSBhIHZpZGVvLW9ubHkgbXVsdGlwbGUtYXVkaW8gSExTIVxuXG5cbiAgaWYgKGlzTWFhdCAmJiAhY29kZWNJbmZvLmF1ZGlvUHJvZmlsZSkge1xuICAgIGlmICghaXNNdXhlZCkge1xuICAgICAgLy8gSXQgaXMgcG9zc2libGUgZm9yIGNvZGVjcyB0byBiZSBzcGVjaWZpZWQgb24gdGhlIGF1ZGlvIG1lZGlhIGdyb3VwIHBsYXlsaXN0IGJ1dFxuICAgICAgLy8gbm90IG9uIHRoZSByZW5kaXRpb24gcGxheWxpc3QuIFRoaXMgaXMgbW9zdGx5IHRoZSBjYXNlIGZvciBEQVNILCB3aGVyZSBhdWRpbyBhbmRcbiAgICAgIC8vIHZpZGVvIGFyZSBhbHdheXMgc2VwYXJhdGUgKGFuZCBzZXBhcmF0ZWx5IHNwZWNpZmllZCkuXG4gICAgICBjb2RlY0luZm8uYXVkaW9Qcm9maWxlID0gYXVkaW9Qcm9maWxlRnJvbURlZmF1bHQobWFzdGVyLCBtZWRpYUF0dHJpYnV0ZXMuQVVESU8pO1xuICAgIH1cblxuICAgIGlmICghY29kZWNJbmZvLmF1ZGlvUHJvZmlsZSkge1xuICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdNdWx0aXBsZSBhdWRpbyB0cmFja3MgcHJlc2VudCBidXQgbm8gYXVkaW8gY29kZWMgc3RyaW5nIGlzIHNwZWNpZmllZC4gJyArICdBdHRlbXB0aW5nIHRvIHVzZSB0aGUgZGVmYXVsdCBhdWRpbyBjb2RlYyAobXA0YS40MC4yKScpO1xuICAgICAgY29kZWNJbmZvLmF1ZGlvUHJvZmlsZSA9IGRlZmF1bHRDb2RlY3MuYXVkaW9Qcm9maWxlO1xuICAgIH1cbiAgfSAvLyBHZW5lcmF0ZSB0aGUgZmluYWwgY29kZWMgc3RyaW5ncyBmcm9tIHRoZSBjb2RlYyBvYmplY3QgZ2VuZXJhdGVkIGFib3ZlXG5cblxuICB2YXIgY29kZWNTdHJpbmdzID0ge307XG5cbiAgaWYgKGNvZGVjSW5mby52aWRlb0NvZGVjKSB7XG4gICAgY29kZWNTdHJpbmdzLnZpZGVvID0gJycgKyBjb2RlY0luZm8udmlkZW9Db2RlYyArIGNvZGVjSW5mby52aWRlb09iamVjdFR5cGVJbmRpY2F0b3I7XG4gIH1cblxuICBpZiAoY29kZWNJbmZvLmF1ZGlvUHJvZmlsZSkge1xuICAgIGNvZGVjU3RyaW5ncy5hdWRpbyA9ICdtcDRhLjQwLicgKyBjb2RlY0luZm8uYXVkaW9Qcm9maWxlO1xuICB9IC8vIEZpbmFsbHksIG1ha2UgYW5kIHJldHVybiBhbiBhcnJheSB3aXRoIHByb3BlciBtaW1lLXR5cGVzIGRlcGVuZGluZyBvblxuICAvLyB0aGUgY29uZmlndXJhdGlvblxuXG5cbiAgdmFyIGp1c3RBdWRpbyA9IG1ha2VNaW1lVHlwZVN0cmluZygnYXVkaW8nLCBjb250YWluZXJUeXBlLCBbY29kZWNTdHJpbmdzLmF1ZGlvXSk7XG4gIHZhciBqdXN0VmlkZW8gPSBtYWtlTWltZVR5cGVTdHJpbmcoJ3ZpZGVvJywgY29udGFpbmVyVHlwZSwgW2NvZGVjU3RyaW5ncy52aWRlb10pO1xuICB2YXIgYm90aFZpZGVvQXVkaW8gPSBtYWtlTWltZVR5cGVTdHJpbmcoJ3ZpZGVvJywgY29udGFpbmVyVHlwZSwgW2NvZGVjU3RyaW5ncy52aWRlbywgY29kZWNTdHJpbmdzLmF1ZGlvXSk7XG5cbiAgaWYgKGlzTWFhdCkge1xuICAgIGlmICghaXNNdXhlZCAmJiBjb2RlY1N0cmluZ3MudmlkZW8pIHtcbiAgICAgIHJldHVybiBbanVzdFZpZGVvLCBqdXN0QXVkaW9dO1xuICAgIH1cblxuICAgIGlmICghaXNNdXhlZCAmJiAhY29kZWNTdHJpbmdzLnZpZGVvKSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBtdXhlZCBjb250ZW50IGFuZCBubyB2aWRlbyBjb2RlYyBzdHJpbmcsIHNvIHRoaXMgaXMgYW4gYXVkaW8gb25seVxuICAgICAgLy8gc3RyZWFtIHdpdGggYWx0ZXJuYXRlIGF1ZGlvLlxuICAgICAgcmV0dXJuIFtqdXN0QXVkaW8sIGp1c3RBdWRpb107XG4gICAgfSAvLyBUaGVyZSBleGlzdHMgdGhlIHBvc3NpYmxpdHkgdGhhdCB0aGlzIHdpbGwgcmV0dXJuIGEgYHZpZGVvL2NvbnRhaW5lcmBcbiAgICAvLyBtaW1lLXR5cGUgZm9yIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgYXJyYXkgZXZlbiB3aGVuIHRoZXJlIGlzIG9ubHkgYXVkaW8uXG4gICAgLy8gVGhpcyBkb2Vzbid0IGFwcGVhciB0byBiZSBhIHByb2JsZW0gYW5kIHNpbXBsaWZpZXMgdGhlIGNvZGUuXG5cblxuICAgIHJldHVybiBbYm90aFZpZGVvQXVkaW8sIGp1c3RBdWRpb107XG4gIH0gLy8gSWYgdGhlcmUgaXMgbm8gdmlkZW8gY29kZWMgYXQgYWxsLCBhbHdheXMganVzdCByZXR1cm4gYSBzaW5nbGVcbiAgLy8gYXVkaW8vPGNvbnRhaW5lcj4gbWltZS10eXBlXG5cblxuICBpZiAoIWNvZGVjU3RyaW5ncy52aWRlbykge1xuICAgIHJldHVybiBbanVzdEF1ZGlvXTtcbiAgfSAvLyBXaGVuIG5vdCB1c2luZyBzZXBhcmF0ZSBhdWRpbyBtZWRpYSBncm91cHMsIGF1ZGlvIGFuZCB2aWRlbyBpc1xuICAvLyAqYWx3YXlzKiBtdXhlZFxuXG5cbiAgcmV0dXJuIFtib3RoVmlkZW9BdWRpb107XG59O1xuLyoqXG4gKiBQYXJzZSBhIGNvbnRlbnQgdHlwZSBoZWFkZXIgaW50byBhIHR5cGUgYW5kIHBhcmFtZXRlcnNcbiAqIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBjb250ZW50IHR5cGUgaGVhZGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBwYXJzZWQgY29udGVudC10eXBlXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIHBhcnNlQ29udGVudFR5cGUgPSBmdW5jdGlvbiBwYXJzZUNvbnRlbnRUeXBlKHR5cGUpIHtcbiAgdmFyIG9iamVjdCA9IHtcbiAgICB0eXBlOiAnJyxcbiAgICBwYXJhbWV0ZXJzOiB7fVxuICB9O1xuICB2YXIgcGFyYW1ldGVycyA9IHR5cGUudHJpbSgpLnNwbGl0KCc7Jyk7IC8vIGZpcnN0IHBhcmFtZXRlciBzaG91bGQgYWx3YXlzIGJlIGNvbnRlbnQtdHlwZVxuXG4gIG9iamVjdC50eXBlID0gcGFyYW1ldGVycy5zaGlmdCgpLnRyaW0oKTtcbiAgcGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbWV0ZXIpIHtcbiAgICB2YXIgcGFpciA9IHBhcmFtZXRlci50cmltKCkuc3BsaXQoJz0nKTtcblxuICAgIGlmIChwYWlyLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBuYW1lID0gcGFpclswXS5yZXBsYWNlKC9cIi9nLCAnJykudHJpbSgpO1xuICAgICAgdmFyIHZhbHVlID0gcGFpclsxXS5yZXBsYWNlKC9cIi9nLCAnJykudHJpbSgpO1xuICAgICAgb2JqZWN0LnBhcmFtZXRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbi8qKlxuICogQ2hlY2sgaWYgYSBjb2RlYyBzdHJpbmcgcmVmZXJzIHRvIGFuIGF1ZGlvIGNvZGVjLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2RlYyBjb2RlYyBzdHJpbmcgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGlmIHRoaXMgaXMgYW4gYXVkaW8gY29kZWNcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgaXNBdWRpb0NvZGVjID0gZnVuY3Rpb24gaXNBdWRpb0NvZGVjKGNvZGVjKSB7XG4gIHJldHVybiAvbXA0YVxcLlxcZCsuXFxkKy9pLnRlc3QoY29kZWMpO1xufTtcbi8qKlxuICogQ2hlY2sgaWYgYSBjb2RlYyBzdHJpbmcgcmVmZXJzIHRvIGEgdmlkZW8gY29kZWMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNvZGVjIGNvZGVjIHN0cmluZyB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn0gaWYgdGhpcyBpcyBhIHZpZGVvIGNvZGVjXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIGlzVmlkZW9Db2RlYyA9IGZ1bmN0aW9uIGlzVmlkZW9Db2RlYyhjb2RlYykge1xuICByZXR1cm4gL2F2YzFcXC5bXFxkYS1mXSsvaS50ZXN0KGNvZGVjKTtcbn07XG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIGdvcHMgaW4gdGhlIGJ1ZmZlciB0aGF0IGhhdmUgYSBwdHMgdmFsdWUgb2YgMyBzZWNvbmRzIG9yIG1vcmUgaW5cbiAqIGZyb250IG9mIGN1cnJlbnQgdGltZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJcbiAqICAgICAgICBUaGUgY3VycmVudCBidWZmZXIgb2YgZ29wIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lXG4gKiBAcGFyYW0ge0RvdWJsZX0gbWFwcGluZ1xuICogICAgICAgIE9mZnNldCB0byBtYXAgZGlzcGxheSB0aW1lIHRvIHN0cmVhbSBwcmVzZW50YXRpb24gdGltZVxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIExpc3Qgb2YgZ29wcyBjb25zaWRlcmVkIHNhZmUgdG8gYXBwZW5kIG92ZXJcbiAqL1xuXG5cbnZhciBnb3BzU2FmZVRvQWxpZ25XaXRoID0gZnVuY3Rpb24gZ29wc1NhZmVUb0FsaWduV2l0aChidWZmZXIsIGN1cnJlbnRUaW1lLCBtYXBwaW5nKSB7XG4gIGlmICh0eXBlb2YgY3VycmVudFRpbWUgPT09ICd1bmRlZmluZWQnIHx8IGN1cnJlbnRUaW1lID09PSBudWxsIHx8ICFidWZmZXIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIHB0cyB2YWx1ZSBmb3IgY3VycmVudCB0aW1lICsgMyBzZWNvbmRzIHRvIGdpdmUgYSBiaXQgbW9yZSB3aWdnbGUgcm9vbVxuXG5cbiAgdmFyIGN1cnJlbnRUaW1lUHRzID0gTWF0aC5jZWlsKChjdXJyZW50VGltZSAtIG1hcHBpbmcgKyAzKSAqIDkwMDAwKTtcbiAgdmFyIGkgPSB2b2lkIDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChidWZmZXJbaV0ucHRzID4gY3VycmVudFRpbWVQdHMpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoaSk7XG59O1xuLyoqXG4gKiBBcHBlbmRzIGdvcCBpbmZvcm1hdGlvbiAodGltaW5nIGFuZCBieXRlTGVuZ3RoKSByZWNlaXZlZCBieSB0aGUgdHJhbnNtdXhlciBmb3IgdGhlXG4gKiBnb3BzIGFwcGVuZGVkIGluIHRoZSBsYXN0IGNhbGwgdG8gYXBwZW5kQnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYnVmZmVyXG4gKiAgICAgICAgVGhlIGN1cnJlbnQgYnVmZmVyIG9mIGdvcCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHtBcnJheX0gZ29wc1xuICogICAgICAgIExpc3Qgb2YgbmV3IGdvcCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHtib29sZWFufSByZXBsYWNlXG4gKiAgICAgICAgSWYgdHJ1ZSwgcmVwbGFjZSB0aGUgYnVmZmVyIHdpdGggdGhlIG5ldyBnb3AgaW5mb3JtYXRpb24uIElmIGZhbHNlLCBhcHBlbmQgdGhlXG4gKiAgICAgICAgbmV3IGdvcCBpbmZvcm1hdGlvbiB0byB0aGUgYnVmZmVyIGluIHRoZSByaWdodCBsb2NhdGlvbiBvZiB0aW1lLlxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIFVwZGF0ZWQgbGlzdCBvZiBnb3AgaW5mb3JtYXRpb25cbiAqL1xuXG5cbnZhciB1cGRhdGVHb3BCdWZmZXIgPSBmdW5jdGlvbiB1cGRhdGVHb3BCdWZmZXIoYnVmZmVyLCBnb3BzLCByZXBsYWNlKSB7XG4gIGlmICghZ29wcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgaWYgKHJlcGxhY2UpIHtcbiAgICAvLyBJZiB3ZSBhcmUgaW4gc2FmZSBhcHBlbmQgbW9kZSwgdGhlbiBjb21wbGV0ZWx5IG92ZXJ3cml0ZSB0aGUgZ29wIGJ1ZmZlclxuICAgIC8vIHdpdGggdGhlIG1vc3QgcmVjZW50IGFwcGVuZWRlZCBkYXRhLiBUaGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgd2hlbiBhcHBlbmRpbmdcbiAgICAvLyBmdXR1cmUgc2VnbWVudHMsIHdlIG9ubHkgdHJ5IHRvIGFsaWduIHdpdGggZ29wcyB0aGF0IGFyZSBib3RoIGFoZWFkIG9mIGN1cnJlbnRcbiAgICAvLyB0aW1lIGFuZCBpbiB0aGUgbGFzdCBzZWdtZW50IGFwcGVuZGVkLlxuICAgIHJldHVybiBnb3BzLnNsaWNlKCk7XG4gIH1cblxuICB2YXIgc3RhcnQgPSBnb3BzWzBdLnB0cztcbiAgdmFyIGkgPSAwO1xuXG4gIGZvciAoaTsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChidWZmZXJbaV0ucHRzID49IHN0YXJ0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGkpLmNvbmNhdChnb3BzKTtcbn07XG4vKipcbiAqIFJlbW92ZXMgZ29wIGluZm9ybWF0aW9uIGluIGJ1ZmZlciB0aGF0IG92ZXJsYXBzIHdpdGggcHJvdmlkZWQgc3RhcnQgYW5kIGVuZFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlclxuICogICAgICAgIFRoZSBjdXJyZW50IGJ1ZmZlciBvZiBnb3AgaW5mb3JtYXRpb25cbiAqIEBwYXJhbSB7RG91YmxlfSBzdGFydFxuICogICAgICAgIHBvc2l0aW9uIHRvIHN0YXJ0IHRoZSByZW1vdmUgYXRcbiAqIEBwYXJhbSB7RG91YmxlfSBlbmRcbiAqICAgICAgICBwb3NpdGlvbiB0byBlbmQgdGhlIHJlbW92ZSBhdFxuICogQHBhcmFtIHtEb3VibGV9IG1hcHBpbmdcbiAqICAgICAgICBPZmZzZXQgdG8gbWFwIGRpc3BsYXkgdGltZSB0byBzdHJlYW0gcHJlc2VudGF0aW9uIHRpbWVcbiAqL1xuXG5cbnZhciByZW1vdmVHb3BCdWZmZXIgPSBmdW5jdGlvbiByZW1vdmVHb3BCdWZmZXIoYnVmZmVyLCBzdGFydCwgZW5kLCBtYXBwaW5nKSB7XG4gIHZhciBzdGFydFB0cyA9IE1hdGguY2VpbCgoc3RhcnQgLSBtYXBwaW5nKSAqIDkwMDAwKTtcbiAgdmFyIGVuZFB0cyA9IE1hdGguY2VpbCgoZW5kIC0gbWFwcGluZykgKiA5MDAwMCk7XG4gIHZhciB1cGRhdGVkQnVmZmVyID0gYnVmZmVyLnNsaWNlKCk7XG4gIHZhciBpID0gYnVmZmVyLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGJ1ZmZlcltpXS5wdHMgPD0gZW5kUHRzKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoaSA9PT0gLTEpIHtcbiAgICAvLyBubyByZW1vdmFsIGJlY2F1c2UgZW5kIG9mIHJlbW92ZSByYW5nZSBpcyBiZWZvcmUgc3RhcnQgb2YgYnVmZmVyXG4gICAgcmV0dXJuIHVwZGF0ZWRCdWZmZXI7XG4gIH1cblxuICB2YXIgaiA9IGkgKyAxO1xuXG4gIHdoaWxlIChqLS0pIHtcbiAgICBpZiAoYnVmZmVyW2pdLnB0cyA8PSBzdGFydFB0cykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIGNsYW1wIHJlbW92ZSByYW5nZSBzdGFydCB0byAwIGluZGV4XG5cblxuICBqID0gTWF0aC5tYXgoaiwgMCk7XG4gIHVwZGF0ZWRCdWZmZXIuc3BsaWNlKGosIGkgLSBqICsgMSk7XG4gIHJldHVybiB1cGRhdGVkQnVmZmVyO1xufTtcblxudmFyIGJ1ZmZlcmVkID0gZnVuY3Rpb24gYnVmZmVyZWQodmlkZW9CdWZmZXIsIGF1ZGlvQnVmZmVyLCBhdWRpb0Rpc2FibGVkKSB7XG4gIHZhciBzdGFydCA9IG51bGw7XG4gIHZhciBlbmQgPSBudWxsO1xuICB2YXIgYXJpdHkgPSAwO1xuICB2YXIgZXh0ZW50cyA9IFtdO1xuICB2YXIgcmFuZ2VzID0gW107IC8vIG5laXRoZXIgYnVmZmVyIGhhcyBiZWVuIGNyZWF0ZWQgeWV0XG5cbiAgaWYgKCF2aWRlb0J1ZmZlciAmJiAhYXVkaW9CdWZmZXIpIHtcbiAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZSgpO1xuICB9IC8vIG9ubHkgb25lIGJ1ZmZlciBpcyBjb25maWd1cmVkXG5cblxuICBpZiAoIXZpZGVvQnVmZmVyKSB7XG4gICAgcmV0dXJuIGF1ZGlvQnVmZmVyLmJ1ZmZlcmVkO1xuICB9XG5cbiAgaWYgKCFhdWRpb0J1ZmZlcikge1xuICAgIHJldHVybiB2aWRlb0J1ZmZlci5idWZmZXJlZDtcbiAgfSAvLyBib3RoIGJ1ZmZlcnMgYXJlIGNvbmZpZ3VyZWRcblxuXG4gIGlmIChhdWRpb0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIHZpZGVvQnVmZmVyLmJ1ZmZlcmVkO1xuICB9IC8vIGJvdGggYnVmZmVycyBhcmUgZW1wdHlcblxuXG4gIGlmICh2aWRlb0J1ZmZlci5idWZmZXJlZC5sZW5ndGggPT09IDAgJiYgYXVkaW9CdWZmZXIuYnVmZmVyZWQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2UoKTtcbiAgfSAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgaGF2ZSBib3RoIGJ1ZmZlcnMgYW5kIGNyZWF0ZSBhblxuICAvLyBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3b1xuXG5cbiAgdmFyIHZpZGVvQnVmZmVyZWQgPSB2aWRlb0J1ZmZlci5idWZmZXJlZDtcbiAgdmFyIGF1ZGlvQnVmZmVyZWQgPSBhdWRpb0J1ZmZlci5idWZmZXJlZDtcbiAgdmFyIGNvdW50ID0gdmlkZW9CdWZmZXJlZC5sZW5ndGg7IC8vIEEpIEdhdGhlciB1cCBhbGwgc3RhcnQgYW5kIGVuZCB0aW1lc1xuXG4gIHdoaWxlIChjb3VudC0tKSB7XG4gICAgZXh0ZW50cy5wdXNoKHtcbiAgICAgIHRpbWU6IHZpZGVvQnVmZmVyZWQuc3RhcnQoY291bnQpLFxuICAgICAgdHlwZTogJ3N0YXJ0J1xuICAgIH0pO1xuICAgIGV4dGVudHMucHVzaCh7XG4gICAgICB0aW1lOiB2aWRlb0J1ZmZlcmVkLmVuZChjb3VudCksXG4gICAgICB0eXBlOiAnZW5kJ1xuICAgIH0pO1xuICB9XG5cbiAgY291bnQgPSBhdWRpb0J1ZmZlcmVkLmxlbmd0aDtcblxuICB3aGlsZSAoY291bnQtLSkge1xuICAgIGV4dGVudHMucHVzaCh7XG4gICAgICB0aW1lOiBhdWRpb0J1ZmZlcmVkLnN0YXJ0KGNvdW50KSxcbiAgICAgIHR5cGU6ICdzdGFydCdcbiAgICB9KTtcbiAgICBleHRlbnRzLnB1c2goe1xuICAgICAgdGltZTogYXVkaW9CdWZmZXJlZC5lbmQoY291bnQpLFxuICAgICAgdHlwZTogJ2VuZCdcbiAgICB9KTtcbiAgfSAvLyBCKSBTb3J0IHRoZW0gYnkgdGltZVxuXG5cbiAgZXh0ZW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEudGltZSAtIGIudGltZTtcbiAgfSk7IC8vIEMpIEdvIGFsb25nIG9uZSBieSBvbmUgaW5jcmVtZW50aW5nIGFyaXR5IGZvciBzdGFydCBhbmQgZGVjcmVtZW50aW5nXG4gIC8vICAgIGFyaXR5IGZvciBlbmRzXG5cbiAgZm9yIChjb3VudCA9IDA7IGNvdW50IDwgZXh0ZW50cy5sZW5ndGg7IGNvdW50KyspIHtcbiAgICBpZiAoZXh0ZW50c1tjb3VudF0udHlwZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgYXJpdHkrKzsgLy8gRCkgSWYgYXJpdHkgaXMgZXZlciBpbmNyZW1lbnRlZCB0byAyIHdlIGFyZSBlbnRlcmluZyBhblxuICAgICAgLy8gICAgb3ZlcmxhcHBpbmcgcmFuZ2VcblxuICAgICAgaWYgKGFyaXR5ID09PSAyKSB7XG4gICAgICAgIHN0YXJ0ID0gZXh0ZW50c1tjb3VudF0udGltZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4dGVudHNbY291bnRdLnR5cGUgPT09ICdlbmQnKSB7XG4gICAgICBhcml0eS0tOyAvLyBFKSBJZiBhcml0eSBpcyBldmVyIGRlY3JlbWVudGVkIHRvIDEgd2UgbGVhdmluZyBhblxuICAgICAgLy8gICAgb3ZlcmxhcHBpbmcgcmFuZ2VcblxuICAgICAgaWYgKGFyaXR5ID09PSAxKSB7XG4gICAgICAgIGVuZCA9IGV4dGVudHNbY291bnRdLnRpbWU7XG4gICAgICB9XG4gICAgfSAvLyBGKSBSZWNvcmQgb3ZlcmxhcHBpbmcgcmFuZ2VzXG5cblxuICAgIGlmIChzdGFydCAhPT0gbnVsbCAmJiBlbmQgIT09IG51bGwpIHtcbiAgICAgIHJhbmdlcy5wdXNoKFtzdGFydCwgZW5kXSk7XG4gICAgICBzdGFydCA9IG51bGw7XG4gICAgICBlbmQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcyhyYW5nZXMpO1xufTtcbi8qKlxuICogQGZpbGUgdmlydHVhbC1zb3VyY2UtYnVmZmVyLmpzXG4gKi9cblxuXG52YXIgT05FX1NFQ09ORF9JTl9UUyA9IDkwMDAwOyAvLyBXZSBjcmVhdGUgYSB3cmFwcGVyIGFyb3VuZCB0aGUgU291cmNlQnVmZmVyIHNvIHRoYXQgd2UgY2FuIG1hbmFnZSB0aGVcbi8vIHN0YXRlIG9mIHRoZSBgdXBkYXRpbmdgIHByb3BlcnR5IG1hbnVhbGx5LiBXZSBoYXZlIHRvIGRvIHRoaXMgYmVjYXVzZVxuLy8gRmlyZWZveCBjaGFuZ2VzIGB1cGRhdGluZ2AgdG8gZmFsc2UgbG9uZyBiZWZvcmUgdHJpZ2dlcmluZyBgdXBkYXRlZW5kYFxuLy8gZXZlbnRzIGFuZCB0aGF0IHdhcyBjYXVzaW5nIHN0cmFuZ2UgcHJvYmxlbXMgaW4gdmlkZW9qcy1jb250cmliLWhsc1xuXG52YXIgbWFrZVdyYXBwZWRTb3VyY2VCdWZmZXIgPSBmdW5jdGlvbiBtYWtlV3JhcHBlZFNvdXJjZUJ1ZmZlcihtZWRpYVNvdXJjZSwgbWltZVR5cGUpIHtcbiAgdmFyIHNvdXJjZUJ1ZmZlciA9IG1lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihtaW1lVHlwZSk7XG4gIHZhciB3cmFwcGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgd3JhcHBlci51cGRhdGluZyA9IGZhbHNlO1xuICB3cmFwcGVyLnJlYWxCdWZmZXJfID0gc291cmNlQnVmZmVyO1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQnVmZmVyW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdyYXBwZXJba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUJ1ZmZlcltrZXldLmFwcGx5KHNvdXJjZUJ1ZmZlciwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd3JhcHBlcltrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZXIsIGtleSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICByZXR1cm4gc291cmNlQnVmZmVyW2tleV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKHYpIHtcbiAgICAgICAgICByZXR1cm4gc291cmNlQnVmZmVyW2tleV0gPSB2O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZUJ1ZmZlcikge1xuICAgIF9sb29wKGtleSk7XG4gIH1cblxuICByZXR1cm4gd3JhcHBlcjtcbn07XG4vKipcbiAqIFZpcnR1YWxTb3VyY2VCdWZmZXJzIGV4aXN0IHNvIHRoYXQgd2UgY2FuIHRyYW5zbXV4IG5vbiBuYXRpdmUgZm9ybWF0c1xuICogaW50byBhIG5hdGl2ZSBmb3JtYXQsIGJ1dCBrZWVwIHRoZSBzYW1lIGFwaSBhcyBhIG5hdGl2ZSBzb3VyY2UgYnVmZmVyLlxuICogSXQgY3JlYXRlcyBhIHRyYW5zbXV4ZXIsIHRoYXQgd29ya3MgaW4gaXRzIG93biB0aHJlYWQgKGEgd2ViIHdvcmtlcikgYW5kXG4gKiB0aGF0IHRyYW5zbXV4ZXIgbXV4ZXMgdGhlIGRhdGEgaW50byBhIG5hdGl2ZSBmb3JtYXQuIFZpcnR1YWxTb3VyY2VCdWZmZXIgd2lsbFxuICogdGhlbiBzZW5kIGFsbCBvZiB0aGF0IGRhdGEgdG8gdGhlIG5haXZlIHNvdXJjZWJ1ZmZlciBzbyB0aGF0IGl0IGlzXG4gKiBpbmRlc3Rpbmd1aXNoYWJsZSBmcm9tIGEgbmF0aXZlbHkgc3VwcG9ydGVkIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge0h0bWxNZWRpYVNvdXJjZX0gbWVkaWFTb3VyY2UgdGhlIHBhcmVudCBtZWRpYVNvdXJjZVxuICogQHBhcmFtIHtBcnJheX0gY29kZWNzIGFycmF5IG9mIGNvZGVjcyB0aGF0IHdlIHdpbGwgYmUgZGVhbGluZyB3aXRoXG4gKiBAY2xhc3MgVmlydHVhbFNvdXJjZUJ1ZmZlclxuICogQGV4dGVuZHMgdmlkZW8uanMuRXZlbnRUYXJnZXRcbiAqL1xuXG5cbnZhciBWaXJ0dWFsU291cmNlQnVmZmVyID0gZnVuY3Rpb24gKF92aWRlb2pzJEV2ZW50VGFyZ2V0KSB7XG4gIGluaGVyaXRzKFZpcnR1YWxTb3VyY2VCdWZmZXIsIF92aWRlb2pzJEV2ZW50VGFyZ2V0KTtcblxuICBmdW5jdGlvbiBWaXJ0dWFsU291cmNlQnVmZmVyKG1lZGlhU291cmNlLCBjb2RlY3MpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBWaXJ0dWFsU291cmNlQnVmZmVyKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFZpcnR1YWxTb3VyY2VCdWZmZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWaXJ0dWFsU291cmNlQnVmZmVyKSkuY2FsbCh0aGlzLCB2aWRlb2pzJDEuRXZlbnRUYXJnZXQpKTtcblxuICAgIF90aGlzLnRpbWVzdGFtcE9mZnNldF8gPSAwO1xuICAgIF90aGlzLnBlbmRpbmdCdWZmZXJzXyA9IFtdO1xuICAgIF90aGlzLmJ1ZmZlclVwZGF0aW5nXyA9IGZhbHNlO1xuICAgIF90aGlzLm1lZGlhU291cmNlXyA9IG1lZGlhU291cmNlO1xuICAgIF90aGlzLmNvZGVjc18gPSBjb2RlY3M7XG4gICAgX3RoaXMuYXVkaW9Db2RlY18gPSBudWxsO1xuICAgIF90aGlzLnZpZGVvQ29kZWNfID0gbnVsbDtcbiAgICBfdGhpcy5hdWRpb0Rpc2FibGVkXyA9IGZhbHNlO1xuICAgIF90aGlzLmFwcGVuZEF1ZGlvSW5pdFNlZ21lbnRfID0gdHJ1ZTtcbiAgICBfdGhpcy5nb3BCdWZmZXJfID0gW107XG4gICAgX3RoaXMudGltZU1hcHBpbmdfID0gMDtcbiAgICBfdGhpcy5zYWZlQXBwZW5kXyA9IHZpZGVvanMkMS5icm93c2VyLklFX1ZFUlNJT04gPj0gMTE7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICByZW11eDogZmFsc2UsXG4gICAgICBhbGlnbkdvcHNBdEVuZDogX3RoaXMuc2FmZUFwcGVuZF9cbiAgICB9O1xuXG4gICAgX3RoaXMuY29kZWNzXy5mb3JFYWNoKGZ1bmN0aW9uIChjb2RlYykge1xuICAgICAgaWYgKGlzQXVkaW9Db2RlYyhjb2RlYykpIHtcbiAgICAgICAgX3RoaXMuYXVkaW9Db2RlY18gPSBjb2RlYztcbiAgICAgIH0gZWxzZSBpZiAoaXNWaWRlb0NvZGVjKGNvZGVjKSkge1xuICAgICAgICBfdGhpcy52aWRlb0NvZGVjXyA9IGNvZGVjO1xuICAgICAgfVxuICAgIH0pOyAvLyBhcHBlbmQgbXV4ZWQgc2VnbWVudHMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBuYXRpdmUgYnVmZmVycyBhc1xuICAgIC8vIHNvb24gYXMgdGhleSBhcmUgYXZhaWxhYmxlXG5cblxuICAgIF90aGlzLnRyYW5zbXV4ZXJfID0gbmV3IFRyYW5zbXV4V29ya2VyKCk7XG5cbiAgICBfdGhpcy50cmFuc211eGVyXy5wb3N0TWVzc2FnZSh7XG4gICAgICBhY3Rpb246ICdpbml0JyxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9KTtcblxuICAgIF90aGlzLnRyYW5zbXV4ZXJfLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnZGF0YScpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmRhdGFfKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnZG9uZScpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmRvbmVfKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnZ29wSW5mbycpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmFwcGVuZEdvcEluZm9fKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAndmlkZW9TZWdtZW50VGltaW5nSW5mbycpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnZpZGVvU2VnbWVudFRpbWluZ0luZm9fKGV2ZW50LmRhdGEudmlkZW9TZWdtZW50VGltaW5nSW5mbyk7XG4gICAgICB9XG4gICAgfTsgLy8gdGhpcyB0aW1lc3RhbXBPZmZzZXQgaXMgYSBwcm9wZXJ0eSB3aXRoIHRoZSBzaWRlLWVmZmVjdCBvZiByZXNldHRpbmdcbiAgICAvLyBiYXNlTWVkaWFEZWNvZGVUaW1lIGluIHRoZSB0cmFuc211eGVyIG9uIHRoZSBzZXR0ZXJcblxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLCAndGltZXN0YW1wT2Zmc2V0Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcE9mZnNldF87XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEodmFsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiB2YWwgPj0gMCkge1xuICAgICAgICAgIHRoaXMudGltZXN0YW1wT2Zmc2V0XyA9IHZhbDtcbiAgICAgICAgICB0aGlzLmFwcGVuZEF1ZGlvSW5pdFNlZ21lbnRfID0gdHJ1ZTsgLy8gcmVzZXQgZ29wIGJ1ZmZlciBvbiB0aW1lc3RhbXBvZmZzZXQgYXMgdGhpcyBzaWduYWxzIGEgY2hhbmdlIGluIHRpbWVsaW5lXG5cbiAgICAgICAgICB0aGlzLmdvcEJ1ZmZlcl8ubGVuZ3RoID0gMDtcbiAgICAgICAgICB0aGlzLnRpbWVNYXBwaW5nXyA9IDA7IC8vIFdlIGhhdmUgdG8gdGVsbCB0aGUgdHJhbnNtdXhlciB0byBzZXQgdGhlIGJhc2VNZWRpYURlY29kZVRpbWUgdG9cbiAgICAgICAgICAvLyB0aGUgZGVzaXJlZCB0aW1lc3RhbXBPZmZzZXQgZm9yIHRoZSBuZXh0IHNlZ21lbnRcblxuICAgICAgICAgIHRoaXMudHJhbnNtdXhlcl8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiAnc2V0VGltZXN0YW1wT2Zmc2V0JyxcbiAgICAgICAgICAgIHRpbWVzdGFtcE9mZnNldDogdmFsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gc2V0dGluZyB0aGUgYXBwZW5kIHdpbmRvdyBhZmZlY3RzIGJvdGggc291cmNlIGJ1ZmZlcnNcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ2FwcGVuZFdpbmRvd1N0YXJ0Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy52aWRlb0J1ZmZlcl8gfHwgdGhpcy5hdWRpb0J1ZmZlcl8pLmFwcGVuZFdpbmRvd1N0YXJ0O1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKHN0YXJ0KSB7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvQnVmZmVyXykge1xuICAgICAgICAgIHRoaXMudmlkZW9CdWZmZXJfLmFwcGVuZFdpbmRvd1N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hdWRpb0J1ZmZlcl8pIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvQnVmZmVyXy5hcHBlbmRXaW5kb3dTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7IC8vIHRoaXMgYnVmZmVyIGlzIFwidXBkYXRpbmdcIiBpZiBlaXRoZXIgb2YgaXRzIG5hdGl2ZSBidWZmZXJzIGFyZVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLCAndXBkYXRpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuYnVmZmVyVXBkYXRpbmdfIHx8ICF0aGlzLmF1ZGlvRGlzYWJsZWRfICYmIHRoaXMuYXVkaW9CdWZmZXJfICYmIHRoaXMuYXVkaW9CdWZmZXJfLnVwZGF0aW5nIHx8IHRoaXMudmlkZW9CdWZmZXJfICYmIHRoaXMudmlkZW9CdWZmZXJfLnVwZGF0aW5nKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gdGhlIGJ1ZmZlcmVkIHByb3BlcnR5IGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGJ1ZmZlcmVkXG4gICAgLy8gcmFuZ2VzIG9mIHRoZSBuYXRpdmUgc291cmNlIGJ1ZmZlcnNcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ2J1ZmZlcmVkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiBidWZmZXJlZCh0aGlzLnZpZGVvQnVmZmVyXywgdGhpcy5hdWRpb0J1ZmZlcl8sIHRoaXMuYXVkaW9EaXNhYmxlZF8pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogV2hlbiB3ZSBnZXQgYSBkYXRhIGV2ZW50IGZyb20gdGhlIHRyYW5zbXV4ZXJcbiAgICogd2UgY2FsbCB0aGlzIGZ1bmN0aW9uIGFuZCBoYW5kbGUgdGhlIGRhdGEgdGhhdFxuICAgKiB3YXMgc2VudCB0byB1c1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCB0aGUgZGF0YSBldmVudCBmcm9tIHRoZSB0cmFuc211eGVyXG4gICAqL1xuXG5cbiAgY3JlYXRlQ2xhc3MoVmlydHVhbFNvdXJjZUJ1ZmZlciwgW3tcbiAgICBrZXk6ICdkYXRhXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGFfKGV2ZW50KSB7XG4gICAgICB2YXIgc2VnbWVudCA9IGV2ZW50LmRhdGEuc2VnbWVudDsgLy8gQ2FzdCBBcnJheUJ1ZmZlciB0byBUeXBlZEFycmF5XG5cbiAgICAgIHNlZ21lbnQuZGF0YSA9IG5ldyBVaW50OEFycmF5KHNlZ21lbnQuZGF0YSwgZXZlbnQuZGF0YS5ieXRlT2Zmc2V0LCBldmVudC5kYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgc2VnbWVudC5pbml0U2VnbWVudCA9IG5ldyBVaW50OEFycmF5KHNlZ21lbnQuaW5pdFNlZ21lbnQuZGF0YSwgc2VnbWVudC5pbml0U2VnbWVudC5ieXRlT2Zmc2V0LCBzZWdtZW50LmluaXRTZWdtZW50LmJ5dGVMZW5ndGgpO1xuICAgICAgY3JlYXRlVGV4dFRyYWNrc0lmTmVjZXNzYXJ5KHRoaXMsIHRoaXMubWVkaWFTb3VyY2VfLCBzZWdtZW50KTsgLy8gQWRkIHRoZSBzZWdtZW50cyB0byB0aGUgcGVuZGluZ0J1ZmZlcnMgYXJyYXlcblxuICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyc18ucHVzaChzZWdtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB3ZSBnZXQgYSBkb25lIGV2ZW50IGZyb20gdGhlIHRyYW5zbXV4ZXJcbiAgICAgKiB3ZSBjYWxsIHRoaXMgZnVuY3Rpb24gYW5kIHdlIHByb2Nlc3MgYWxsXG4gICAgICogb2YgdGhlIHBlbmRpbmcgZGF0YSB0aGF0IHdlIGhhdmUgYmVlbiBzYXZpbmcgaW4gdGhlXG4gICAgICogZGF0YV8gZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgdGhlIGRvbmUgZXZlbnQgZnJvbSB0aGUgdHJhbnNtdXhlclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkb25lXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvbmVfKGV2ZW50KSB7XG4gICAgICAvLyBEb24ndCBwcm9jZXNzIGFuZCBhcHBlbmQgZGF0YSBpZiB0aGUgbWVkaWFTb3VyY2UgaXMgY2xvc2VkXG4gICAgICBpZiAodGhpcy5tZWRpYVNvdXJjZV8ucmVhZHlTdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyc18ubGVuZ3RoID0gMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBBbGwgYnVmZmVycyBzaG91bGQgaGF2ZSBiZWVuIGZsdXNoZWQgZnJvbSB0aGUgbXV4ZXJcbiAgICAgIC8vIHN0YXJ0IHByb2Nlc3NpbmcgYW55dGhpbmcgd2UgaGF2ZSByZWNlaXZlZFxuXG5cbiAgICAgIHRoaXMucHJvY2Vzc1BlbmRpbmdTZWdtZW50c18oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2aWRlb1NlZ21lbnRUaW1pbmdJbmZvXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZpZGVvU2VnbWVudFRpbWluZ0luZm9fKHRpbWluZ0luZm8pIHtcbiAgICAgIHZhciB0aW1pbmdJbmZvSW5TZWNvbmRzID0ge1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGRlY29kZTogdGltaW5nSW5mby5zdGFydC5kdHMgLyBPTkVfU0VDT05EX0lOX1RTLFxuICAgICAgICAgIHByZXNlbnRhdGlvbjogdGltaW5nSW5mby5zdGFydC5wdHMgLyBPTkVfU0VDT05EX0lOX1RTXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgIGRlY29kZTogdGltaW5nSW5mby5lbmQuZHRzIC8gT05FX1NFQ09ORF9JTl9UUyxcbiAgICAgICAgICBwcmVzZW50YXRpb246IHRpbWluZ0luZm8uZW5kLnB0cyAvIE9ORV9TRUNPTkRfSU5fVFNcbiAgICAgICAgfSxcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogdGltaW5nSW5mby5iYXNlTWVkaWFEZWNvZGVUaW1lIC8gT05FX1NFQ09ORF9JTl9UU1xuICAgICAgfTtcblxuICAgICAgaWYgKHRpbWluZ0luZm8ucHJlcGVuZGVkQ29udGVudER1cmF0aW9uKSB7XG4gICAgICAgIHRpbWluZ0luZm9JblNlY29uZHMucHJlcGVuZGVkQ29udGVudER1cmF0aW9uID0gdGltaW5nSW5mby5wcmVwZW5kZWRDb250ZW50RHVyYXRpb24gLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndmlkZW9TZWdtZW50VGltaW5nSW5mbycsXG4gICAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm86IHRpbWluZ0luZm9JblNlY29uZHNcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgb3VyIGludGVybmFsIG5hdGl2ZSBhdWRpby92aWRlbyBzb3VyY2UgYnVmZmVycyBhbmQgYWRkXG4gICAgICogZXZlbnQgaGFuZGxlcnMgdG8gdGhlbSB3aXRoIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAgICAgKiAxLiB0aGV5IGRvIG5vdCBhbHJlYWR5IGV4aXN0IG9uIHRoZSBtZWRpYVNvdXJjZVxuICAgICAqIDIuIHRoaXMgVlNCIGhhcyBhIGNvZGVjIGZvciB0aGVtXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVSZWFsU291cmNlQnVmZmVyc18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSZWFsU291cmNlQnVmZmVyc18oKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHR5cGVzID0gWydhdWRpbycsICd2aWRlbyddO1xuICAgICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAvLyBEb24ndCBjcmVhdGUgYSBTb3VyY2VCdWZmZXIgb2YgdGhpcyB0eXBlIGlmIHdlIGRvbid0IGhhdmUgYVxuICAgICAgICAvLyBjb2RlYyBmb3IgaXRcbiAgICAgICAgaWYgKCFfdGhpczJbdHlwZSArICdDb2RlY18nXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBEbyBub3RoaW5nIGlmIGEgU291cmNlQnVmZmVyIG9mIHRoaXMgdHlwZSBhbHJlYWR5IGV4aXN0c1xuXG5cbiAgICAgICAgaWYgKF90aGlzMlt0eXBlICsgJ0J1ZmZlcl8nXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBidWZmZXIgPSBudWxsOyAvLyBJZiB0aGUgbWVkaWFzb3VyY2UgYWxyZWFkeSBoYXMgYSBTb3VyY2VCdWZmZXIgZm9yIHRoZSBjb2RlY1xuICAgICAgICAvLyB1c2UgdGhhdFxuXG4gICAgICAgIGlmIChfdGhpczIubWVkaWFTb3VyY2VfW3R5cGUgKyAnQnVmZmVyXyddKSB7XG4gICAgICAgICAgYnVmZmVyID0gX3RoaXMyLm1lZGlhU291cmNlX1t0eXBlICsgJ0J1ZmZlcl8nXTsgLy8gSW4gbXVsdGlwbGUgYXVkaW8gdHJhY2sgY2FzZXMsIHRoZSBhdWRpbyBzb3VyY2UgYnVmZmVyIGlzIGRpc2FibGVkXG4gICAgICAgICAgLy8gb24gdGhlIG1haW4gVmlydHVhbFNvdXJjZUJ1ZmZlciBieSB0aGUgSFRNTE1lZGlhU291cmNlIG11Y2ggZWFybGllclxuICAgICAgICAgIC8vIHRoYW4gY3JlYXRlUmVhbFNvdXJjZUJ1ZmZlcnNfIGlzIGNhbGxlZCB0byBjcmVhdGUgdGhlIHNlY29uZFxuICAgICAgICAgIC8vIFZpcnR1YWxTb3VyY2VCdWZmZXIgYmVjYXVzZSB0aGF0IGhhcHBlbnMgYXMgYSBzaWRlLWVmZmVjdCBvZlxuICAgICAgICAgIC8vIHZpZGVvanMtY29udHJpYi1obHMgc3RhcnRpbmcgdGhlIGF1ZGlvU2VnbWVudExvYWRlci4gQXMgYSByZXN1bHQsXG4gICAgICAgICAgLy8gdGhlIGF1ZGlvQnVmZmVyIGlzIGVzc2VudGlhbGx5IFwib3duZXJsZXNzXCIgYW5kIG5vIG9uZSB3aWxsIHRvZ2dsZVxuICAgICAgICAgIC8vIHRoZSBgdXBkYXRpbmdgIHN0YXRlIGJhY2sgdG8gZmFsc2Ugb25jZSB0aGUgYHVwZGF0ZWVuZGAgZXZlbnQgaXMgcmVjZWl2ZWRcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFNldHRpbmcgYHVwZGF0aW5nYCB0byBmYWxzZSBtYW51YWxseSB3aWxsIHdvcmsgYXJvdW5kIHRoaXNcbiAgICAgICAgICAvLyBzaXR1YXRpb24gYW5kIGFsbG93IHdvcmsgdG8gY29udGludWVcblxuICAgICAgICAgIGJ1ZmZlci51cGRhdGluZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjb2RlY1Byb3BlcnR5ID0gdHlwZSArICdDb2RlY18nO1xuICAgICAgICAgIHZhciBtaW1lVHlwZSA9IHR5cGUgKyAnL21wNDtjb2RlY3M9XCInICsgX3RoaXMyW2NvZGVjUHJvcGVydHldICsgJ1wiJztcbiAgICAgICAgICBidWZmZXIgPSBtYWtlV3JhcHBlZFNvdXJjZUJ1ZmZlcihfdGhpczIubWVkaWFTb3VyY2VfLm5hdGl2ZU1lZGlhU291cmNlXywgbWltZVR5cGUpO1xuICAgICAgICAgIF90aGlzMi5tZWRpYVNvdXJjZV9bdHlwZSArICdCdWZmZXJfJ10gPSBidWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczJbdHlwZSArICdCdWZmZXJfJ10gPSBidWZmZXI7IC8vIFdpcmUgdXAgdGhlIGV2ZW50cyB0byB0aGUgU291cmNlQnVmZmVyXG5cbiAgICAgICAgWyd1cGRhdGUnLCAndXBkYXRlc3RhcnQnLCAndXBkYXRlZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBidWZmZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gaWYgYXVkaW8gaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnYXVkaW8nICYmIF90aGlzMi5hdWRpb0Rpc2FibGVkXykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ3VwZGF0ZWVuZCcpIHtcbiAgICAgICAgICAgICAgX3RoaXMyW3R5cGUgKyAnQnVmZmVyXyddLnVwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzaG91bGRUcmlnZ2VyID0gdHlwZXMuZXZlcnkoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgLy8gc2tpcCBjaGVja2luZyBhdWRpbydzIHVwZGF0aW5nIHN0YXR1cyBpZiBhdWRpb1xuICAgICAgICAgICAgICAvLyBpcyBub3QgZW5hYmxlZFxuICAgICAgICAgICAgICBpZiAodCA9PT0gJ2F1ZGlvJyAmJiBfdGhpczIuYXVkaW9EaXNhYmxlZF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfSAvLyBpZiB0aGUgb3RoZXIgdHlwZSBpcyB1cGRhdGluZyB3ZSBkb24ndCB0cmlnZ2VyXG5cblxuICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdCAmJiBfdGhpczJbdCArICdCdWZmZXJfJ10gJiYgX3RoaXMyW3QgKyAnQnVmZmVyXyddLnVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHNob3VsZFRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi50cmlnZ2VyKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW11bGF0ZSB0aGUgbmF0aXZlIG1lZGlhc291cmNlIGZ1bmN0aW9uLCBidXQgb3VyIGZ1bmN0aW9uIHdpbGxcbiAgICAgKiBzZW5kIGFsbCBvZiB0aGUgcHJvcG9zZWQgc2VnbWVudHMgdG8gdGhlIHRyYW5zbXV4ZXIgc28gdGhhdCB3ZVxuICAgICAqIGNhbiB0cmFuc211eCB0aGVtIGJlZm9yZSB3ZSBhcHBlbmQgdGhlbSB0byBvdXIgaW50ZXJuYWxcbiAgICAgKiBuYXRpdmUgc291cmNlIGJ1ZmZlcnMgaW4gdGhlIGNvcnJlY3QgZm9ybWF0LlxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NvdXJjZUJ1ZmZlci9hcHBlbmRCdWZmZXJcbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHNlZ21lbnQgdGhlIHNlZ21lbnQgdG8gYXBwZW5kIHRvIHRoZSBidWZmZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwZW5kQnVmZmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kQnVmZmVyKHNlZ21lbnQpIHtcbiAgICAgIC8vIFN0YXJ0IHRoZSBpbnRlcm5hbCBcInVwZGF0aW5nXCIgc3RhdGVcbiAgICAgIHRoaXMuYnVmZmVyVXBkYXRpbmdfID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMuYXVkaW9CdWZmZXJfICYmIHRoaXMuYXVkaW9CdWZmZXJfLmJ1ZmZlcmVkLmxlbmd0aCkge1xuICAgICAgICB2YXIgYXVkaW9CdWZmZXJlZCA9IHRoaXMuYXVkaW9CdWZmZXJfLmJ1ZmZlcmVkO1xuICAgICAgICB0aGlzLnRyYW5zbXV4ZXJfLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdzZXRBdWRpb0FwcGVuZFN0YXJ0JyxcbiAgICAgICAgICBhcHBlbmRTdGFydDogYXVkaW9CdWZmZXJlZC5lbmQoYXVkaW9CdWZmZXJlZC5sZW5ndGggLSAxKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmlkZW9CdWZmZXJfKSB7XG4gICAgICAgIHRoaXMudHJhbnNtdXhlcl8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2FsaWduR29wc1dpdGgnLFxuICAgICAgICAgIGdvcHNUb0FsaWduV2l0aDogZ29wc1NhZmVUb0FsaWduV2l0aCh0aGlzLmdvcEJ1ZmZlcl8sIHRoaXMubWVkaWFTb3VyY2VfLnBsYXllcl8gPyB0aGlzLm1lZGlhU291cmNlXy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgOiBudWxsLCB0aGlzLnRpbWVNYXBwaW5nXylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHJhbnNtdXhlcl8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBhY3Rpb246ICdwdXNoJyxcbiAgICAgICAgLy8gU2VuZCB0aGUgdHlwZWQtYXJyYXkgb2YgZGF0YSBhcyBhbiBBcnJheUJ1ZmZlciBzbyB0aGF0XG4gICAgICAgIC8vIGl0IGNhbiBiZSBzZW50IGFzIGEgXCJUcmFuc2ZlcmFibGVcIiBhbmQgYXZvaWQgdGhlIGNvc3RseVxuICAgICAgICAvLyBtZW1vcnkgY29weVxuICAgICAgICBkYXRhOiBzZWdtZW50LmJ1ZmZlcixcbiAgICAgICAgLy8gVG8gcmVjcmVhdGUgdGhlIG9yaWdpbmFsIHR5cGVkLWFycmF5LCB3ZSBuZWVkIGluZm9ybWF0aW9uXG4gICAgICAgIC8vIGFib3V0IHdoYXQgcG9ydGlvbiBvZiB0aGUgQXJyYXlCdWZmZXIgaXQgd2FzIGEgdmlldyBpbnRvXG4gICAgICAgIGJ5dGVPZmZzZXQ6IHNlZ21lbnQuYnl0ZU9mZnNldCxcbiAgICAgICAgYnl0ZUxlbmd0aDogc2VnbWVudC5ieXRlTGVuZ3RoXG4gICAgICB9LCBbc2VnbWVudC5idWZmZXJdKTtcbiAgICAgIHRoaXMudHJhbnNtdXhlcl8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBhY3Rpb246ICdmbHVzaCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIGdvcCBpbmZvcm1hdGlvbiAodGltaW5nIGFuZCBieXRlTGVuZ3RoKSByZWNlaXZlZCBieSB0aGUgdHJhbnNtdXhlciBmb3IgdGhlXG4gICAgICogZ29wcyBhcHBlbmRlZCBpbiB0aGUgbGFzdCBjYWxsIHRvIGFwcGVuZEJ1ZmZlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICAgKiAgICAgICAgVGhlIGdvcEluZm8gZXZlbnQgZnJvbSB0aGUgdHJhbnNtdXhlclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGV2ZW50LmRhdGEuZ29wSW5mb1xuICAgICAqICAgICAgICBMaXN0IG9mIGdvcCBpbmZvIHRvIGFwcGVuZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBlbmRHb3BJbmZvXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZEdvcEluZm9fKGV2ZW50KSB7XG4gICAgICB0aGlzLmdvcEJ1ZmZlcl8gPSB1cGRhdGVHb3BCdWZmZXIodGhpcy5nb3BCdWZmZXJfLCBldmVudC5kYXRhLmdvcEluZm8sIHRoaXMuc2FmZUFwcGVuZF8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbXVsYXRlIHRoZSBuYXRpdmUgbWVkaWFzb3VyY2UgZnVuY3Rpb24gYW5kIHJlbW92ZSBwYXJ0c1xuICAgICAqIG9mIHRoZSBidWZmZXIgZnJvbSBhbnkgb2Ygb3VyIGludGVybmFsIGJ1ZmZlcnMgdGhhdCBleGlzdFxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NvdXJjZUJ1ZmZlci9yZW1vdmVcbiAgICAgKiBAcGFyYW0ge0RvdWJsZX0gc3RhcnQgcG9zaXRpb24gdG8gc3RhcnQgdGhlIHJlbW92ZSBhdFxuICAgICAqIEBwYXJhbSB7RG91YmxlfSBlbmQgcG9zaXRpb24gdG8gZW5kIHRoZSByZW1vdmUgYXRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmICh0aGlzLnZpZGVvQnVmZmVyXykge1xuICAgICAgICB0aGlzLnZpZGVvQnVmZmVyXy51cGRhdGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMudmlkZW9CdWZmZXJfLnJlbW92ZShzdGFydCwgZW5kKTtcbiAgICAgICAgdGhpcy5nb3BCdWZmZXJfID0gcmVtb3ZlR29wQnVmZmVyKHRoaXMuZ29wQnVmZmVyXywgc3RhcnQsIGVuZCwgdGhpcy50aW1lTWFwcGluZ18pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuYXVkaW9EaXNhYmxlZF8gJiYgdGhpcy5hdWRpb0J1ZmZlcl8pIHtcbiAgICAgICAgdGhpcy5hdWRpb0J1ZmZlcl8udXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmF1ZGlvQnVmZmVyXy5yZW1vdmUoc3RhcnQsIGVuZCk7XG4gICAgICB9IC8vIFJlbW92ZSBNZXRhZGF0YSBDdWVzIChpZDMpXG5cblxuICAgICAgcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydCwgZW5kLCB0aGlzLm1ldGFkYXRhVHJhY2tfKTsgLy8gUmVtb3ZlIEFueSBDYXB0aW9uc1xuXG4gICAgICBpZiAodGhpcy5pbmJhbmRUZXh0VHJhY2tzXykge1xuICAgICAgICBmb3IgKHZhciB0cmFjayBpbiB0aGlzLmluYmFuZFRleHRUcmFja3NfKSB7XG4gICAgICAgICAgcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydCwgZW5kLCB0aGlzLmluYmFuZFRleHRUcmFja3NfW3RyYWNrXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhbnkgc2VnbWVudHMgdGhhdCB0aGUgbXV4ZXIgaGFzIG91dHB1dFxuICAgICAqIENvbmNhdGVuYXRlIHNlZ21lbnRzIHRvZ2V0aGVyIGJhc2VkIG9uIHR5cGUgYW5kIGFwcGVuZCB0aGVtIGludG9cbiAgICAgKiB0aGVpciByZXNwZWN0aXZlIHNvdXJjZUJ1ZmZlcnNcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Byb2Nlc3NQZW5kaW5nU2VnbWVudHNfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc1BlbmRpbmdTZWdtZW50c18oKSB7XG4gICAgICB2YXIgc29ydGVkU2VnbWVudHMgPSB7XG4gICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgc2VnbWVudHM6IFtdLFxuICAgICAgICAgIGJ5dGVzOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGF1ZGlvOiB7XG4gICAgICAgICAgc2VnbWVudHM6IFtdLFxuICAgICAgICAgIGJ5dGVzOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHRpb25zOiBbXSxcbiAgICAgICAgbWV0YWRhdGE6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRoaXMucGVuZGluZ0J1ZmZlcnNfLmxlbmd0aCkge1xuICAgICAgICAvLyBXZSBhcmUgbm8gbG9uZ2VyIGluIHRoZSBpbnRlcm5hbCBcInVwZGF0aW5nXCIgc3RhdGVcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd1cGRhdGVlbmQnKTtcbiAgICAgICAgdGhpcy5idWZmZXJVcGRhdGluZ18gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBTb3J0IHNlZ21lbnRzIGludG8gc2VwYXJhdGUgdmlkZW8vYXVkaW8gYXJyYXlzIGFuZFxuICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGVpciB0b3RhbCBieXRlIGxlbmd0aHNcblxuXG4gICAgICBzb3J0ZWRTZWdtZW50cyA9IHRoaXMucGVuZGluZ0J1ZmZlcnNfLnJlZHVjZShmdW5jdGlvbiAoc2VnbWVudE9iaiwgc2VnbWVudCkge1xuICAgICAgICB2YXIgdHlwZSA9IHNlZ21lbnQudHlwZTtcbiAgICAgICAgdmFyIGRhdGEgPSBzZWdtZW50LmRhdGE7XG4gICAgICAgIHZhciBpbml0U2VnbWVudCA9IHNlZ21lbnQuaW5pdFNlZ21lbnQ7XG4gICAgICAgIHNlZ21lbnRPYmpbdHlwZV0uc2VnbWVudHMucHVzaChkYXRhKTtcbiAgICAgICAgc2VnbWVudE9ialt0eXBlXS5ieXRlcyArPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIHNlZ21lbnRPYmpbdHlwZV0uaW5pdFNlZ21lbnQgPSBpbml0U2VnbWVudDsgLy8gR2F0aGVyIGFueSBjYXB0aW9ucyBpbnRvIGEgc2luZ2xlIGFycmF5XG5cbiAgICAgICAgaWYgKHNlZ21lbnQuY2FwdGlvbnMpIHtcbiAgICAgICAgICBzZWdtZW50T2JqLmNhcHRpb25zID0gc2VnbWVudE9iai5jYXB0aW9ucy5jb25jYXQoc2VnbWVudC5jYXB0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VnbWVudC5pbmZvKSB7XG4gICAgICAgICAgc2VnbWVudE9ialt0eXBlXS5pbmZvID0gc2VnbWVudC5pbmZvO1xuICAgICAgICB9IC8vIEdhdGhlciBhbnkgbWV0YWRhdGEgaW50byBhIHNpbmdsZSBhcnJheVxuXG5cbiAgICAgICAgaWYgKHNlZ21lbnQubWV0YWRhdGEpIHtcbiAgICAgICAgICBzZWdtZW50T2JqLm1ldGFkYXRhID0gc2VnbWVudE9iai5tZXRhZGF0YS5jb25jYXQoc2VnbWVudC5tZXRhZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VnbWVudE9iajtcbiAgICAgIH0sIHNvcnRlZFNlZ21lbnRzKTsgLy8gQ3JlYXRlIHRoZSByZWFsIHNvdXJjZSBidWZmZXJzIGlmIHRoZXkgZG9uJ3QgZXhpc3QgYnkgbm93IHNpbmNlIHdlXG4gICAgICAvLyBmaW5hbGx5IGFyZSBzdXJlIHdoYXQgdHJhY2tzIGFyZSBjb250YWluZWQgaW4gdGhlIHNvdXJjZVxuXG4gICAgICBpZiAoIXRoaXMudmlkZW9CdWZmZXJfICYmICF0aGlzLmF1ZGlvQnVmZmVyXykge1xuICAgICAgICAvLyBSZW1vdmUgYW55IGNvZGVjcyB0aGF0IG1heSBoYXZlIGJlZW4gc3BlY2lmaWVkIGJ5IGRlZmF1bHQgYnV0XG4gICAgICAgIC8vIGFyZSBubyBsb25nZXIgYXBwbGljYWJsZSBub3dcbiAgICAgICAgaWYgKHNvcnRlZFNlZ21lbnRzLnZpZGVvLmJ5dGVzID09PSAwKSB7XG4gICAgICAgICAgdGhpcy52aWRlb0NvZGVjXyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc29ydGVkU2VnbWVudHMuYXVkaW8uYnl0ZXMgPT09IDApIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvQ29kZWNfID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlUmVhbFNvdXJjZUJ1ZmZlcnNfKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzb3J0ZWRTZWdtZW50cy5hdWRpby5pbmZvKSB7XG4gICAgICAgIHRoaXMubWVkaWFTb3VyY2VfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICdhdWRpb2luZm8nLFxuICAgICAgICAgIGluZm86IHNvcnRlZFNlZ21lbnRzLmF1ZGlvLmluZm9cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzb3J0ZWRTZWdtZW50cy52aWRlby5pbmZvKSB7XG4gICAgICAgIHRoaXMubWVkaWFTb3VyY2VfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd2aWRlb2luZm8nLFxuICAgICAgICAgIGluZm86IHNvcnRlZFNlZ21lbnRzLnZpZGVvLmluZm9cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFwcGVuZEF1ZGlvSW5pdFNlZ21lbnRfKSB7XG4gICAgICAgIGlmICghdGhpcy5hdWRpb0Rpc2FibGVkXyAmJiB0aGlzLmF1ZGlvQnVmZmVyXykge1xuICAgICAgICAgIHNvcnRlZFNlZ21lbnRzLmF1ZGlvLnNlZ21lbnRzLnVuc2hpZnQoc29ydGVkU2VnbWVudHMuYXVkaW8uaW5pdFNlZ21lbnQpO1xuICAgICAgICAgIHNvcnRlZFNlZ21lbnRzLmF1ZGlvLmJ5dGVzICs9IHNvcnRlZFNlZ21lbnRzLmF1ZGlvLmluaXRTZWdtZW50LmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcGVuZEF1ZGlvSW5pdFNlZ21lbnRfID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmlnZ2VyVXBkYXRlZW5kID0gZmFsc2U7IC8vIE1lcmdlIG11bHRpcGxlIHZpZGVvIGFuZCBhdWRpbyBzZWdtZW50cyBpbnRvIG9uZSBhbmQgYXBwZW5kXG5cbiAgICAgIGlmICh0aGlzLnZpZGVvQnVmZmVyXyAmJiBzb3J0ZWRTZWdtZW50cy52aWRlby5ieXRlcykge1xuICAgICAgICBzb3J0ZWRTZWdtZW50cy52aWRlby5zZWdtZW50cy51bnNoaWZ0KHNvcnRlZFNlZ21lbnRzLnZpZGVvLmluaXRTZWdtZW50KTtcbiAgICAgICAgc29ydGVkU2VnbWVudHMudmlkZW8uYnl0ZXMgKz0gc29ydGVkU2VnbWVudHMudmlkZW8uaW5pdFNlZ21lbnQuYnl0ZUxlbmd0aDtcbiAgICAgICAgdGhpcy5jb25jYXRBbmRBcHBlbmRTZWdtZW50c18oc29ydGVkU2VnbWVudHMudmlkZW8sIHRoaXMudmlkZW9CdWZmZXJfKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy52aWRlb0J1ZmZlcl8gJiYgKHRoaXMuYXVkaW9EaXNhYmxlZF8gfHwgIXRoaXMuYXVkaW9CdWZmZXJfKSkge1xuICAgICAgICAvLyBUaGUgdHJhbnNtdXhlciBkaWQgbm90IHJldHVybiBhbnkgYnl0ZXMgb2YgdmlkZW8sIG1lYW5pbmcgaXQgd2FzIGFsbCB0cmltbWVkXG4gICAgICAgIC8vIGZvciBnb3AgYWxpZ25tZW50LiBTaW5jZSB3ZSBoYXZlIGEgdmlkZW8gYnVmZmVyIGFuZCBhdWRpbyBpcyBkaXNhYmxlZCwgdXBkYXRlZW5kXG4gICAgICAgIC8vIHdpbGwgbmV2ZXIgYmUgdHJpZ2dlcmVkIGJ5IHRoaXMgc291cmNlIGJ1ZmZlciwgd2hpY2ggd2lsbCBjYXVzZSBjb250cmliLWhsc1xuICAgICAgICAvLyB0byBiZSBzdHVjayBmb3JldmVyIHdhaXRpbmcgZm9yIHVwZGF0ZWVuZC4gSWYgYXVkaW8gaXMgbm90IGRpc2FibGVkLCB1cGRhdGVlbmRcbiAgICAgICAgLy8gd2lsbCBiZSB0cmlnZ2VyZWQgYnkgdGhlIGF1ZGlvIGJ1ZmZlciwgd2hpY2ggd2lsbCBiZSBzZW50IHVwd2FyZHMgc2luY2UgdGhlIHZpZGVvXG4gICAgICAgIC8vIGJ1ZmZlciB3aWxsIG5vdCBiZSBpbiBhbiB1cGRhdGluZyBzdGF0ZS5cbiAgICAgICAgdHJpZ2dlclVwZGF0ZWVuZCA9IHRydWU7XG4gICAgICB9IC8vIEFkZCB0ZXh0LXRyYWNrIGRhdGEgZm9yIGFsbFxuXG5cbiAgICAgIGFkZFRleHRUcmFja0RhdGEodGhpcywgc29ydGVkU2VnbWVudHMuY2FwdGlvbnMsIHNvcnRlZFNlZ21lbnRzLm1ldGFkYXRhKTtcblxuICAgICAgaWYgKCF0aGlzLmF1ZGlvRGlzYWJsZWRfICYmIHRoaXMuYXVkaW9CdWZmZXJfKSB7XG4gICAgICAgIHRoaXMuY29uY2F0QW5kQXBwZW5kU2VnbWVudHNfKHNvcnRlZFNlZ21lbnRzLmF1ZGlvLCB0aGlzLmF1ZGlvQnVmZmVyXyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGVuZGluZ0J1ZmZlcnNfLmxlbmd0aCA9IDA7XG5cbiAgICAgIGlmICh0cmlnZ2VyVXBkYXRlZW5kKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigndXBkYXRlZW5kJyk7XG4gICAgICB9IC8vIFdlIGFyZSBubyBsb25nZXIgaW4gdGhlIGludGVybmFsIFwidXBkYXRpbmdcIiBzdGF0ZVxuXG5cbiAgICAgIHRoaXMuYnVmZmVyVXBkYXRpbmdfID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbWJpbmUgYWxsIHNlZ21lbnRzIGludG8gYSBzaW5nbGUgVWludDhBcnJheSBhbmQgdGhlbiBhcHBlbmQgdGhlbVxuICAgICAqIHRvIHRoZSBkZXN0aW5hdGlvbiBidWZmZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50T2JqXG4gICAgICogQHBhcmFtIHtTb3VyY2VCdWZmZXJ9IGRlc3RpbmF0aW9uQnVmZmVyIG5hdGl2ZSBzb3VyY2UgYnVmZmVyIHRvIGFwcGVuZCBkYXRhIHRvXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY29uY2F0QW5kQXBwZW5kU2VnbWVudHNfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uY2F0QW5kQXBwZW5kU2VnbWVudHNfKHNlZ21lbnRPYmosIGRlc3RpbmF0aW9uQnVmZmVyKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgIHZhciB0ZW1wQnVmZmVyID0gdm9pZCAwO1xuXG4gICAgICBpZiAoc2VnbWVudE9iai5ieXRlcykge1xuICAgICAgICB0ZW1wQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc2VnbWVudE9iai5ieXRlcyk7IC8vIENvbWJpbmUgdGhlIGluZGl2aWR1YWwgc2VnbWVudHMgaW50byBvbmUgbGFyZ2UgdHlwZWQtYXJyYXlcblxuICAgICAgICBzZWdtZW50T2JqLnNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgICB0ZW1wQnVmZmVyLnNldChzZWdtZW50LCBvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSBzZWdtZW50LmJ5dGVMZW5ndGg7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVzdGluYXRpb25CdWZmZXIudXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGRlc3RpbmF0aW9uQnVmZmVyLmFwcGVuZEJ1ZmZlcih0ZW1wQnVmZmVyKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAodGhpcy5tZWRpYVNvdXJjZV8ucGxheWVyXykge1xuICAgICAgICAgICAgdGhpcy5tZWRpYVNvdXJjZV8ucGxheWVyXy5lcnJvcih7XG4gICAgICAgICAgICAgIGNvZGU6IC0zLFxuICAgICAgICAgICAgICB0eXBlOiAnQVBQRU5EX0JVRkZFUl9FUlInLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtdWxhdGUgdGhlIG5hdGl2ZSBtZWRpYXNvdXJjZSBmdW5jdGlvbi4gYWJvcnQgYW55IHNvdXJlQnVmZmVyXG4gICAgICogYWN0aW9ucyBhbmQgdGhyb3cgb3V0IGFueSB1bi1hcHBlbmRlZCBkYXRhLlxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NvdXJjZUJ1ZmZlci9hYm9ydFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhYm9ydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgaWYgKHRoaXMudmlkZW9CdWZmZXJfKSB7XG4gICAgICAgIHRoaXMudmlkZW9CdWZmZXJfLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5hdWRpb0Rpc2FibGVkXyAmJiB0aGlzLmF1ZGlvQnVmZmVyXykge1xuICAgICAgICB0aGlzLmF1ZGlvQnVmZmVyXy5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50cmFuc211eGVyXykge1xuICAgICAgICB0aGlzLnRyYW5zbXV4ZXJfLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdyZXNldCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGVuZGluZ0J1ZmZlcnNfLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLmJ1ZmZlclVwZGF0aW5nXyA9IGZhbHNlO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVmlydHVhbFNvdXJjZUJ1ZmZlcjtcbn0odmlkZW9qcyQxLkV2ZW50VGFyZ2V0KTtcbi8qKlxuICogQGZpbGUgaHRtbC1tZWRpYS1zb3VyY2UuanNcbiAqL1xuXG4vKipcbiAqIE91ciBNZWRpYVNvdXJjZSBpbXBsZW1lbnRhdGlvbiBpbiBIVE1MLCBtaW1pY3MgbmF0aXZlXG4gKiBNZWRpYVNvdXJjZSB3aGVyZS9pZiBwb3NzaWJsZS5cbiAqXG4gKiBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFTb3VyY2VcbiAqIEBjbGFzcyBIdG1sTWVkaWFTb3VyY2VcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG5cbnZhciBIdG1sTWVkaWFTb3VyY2UgPSBmdW5jdGlvbiAoX3ZpZGVvanMkRXZlbnRUYXJnZXQpIHtcbiAgaW5oZXJpdHMoSHRtbE1lZGlhU291cmNlLCBfdmlkZW9qcyRFdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gSHRtbE1lZGlhU291cmNlKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEh0bWxNZWRpYVNvdXJjZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIdG1sTWVkaWFTb3VyY2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihIdG1sTWVkaWFTb3VyY2UpKS5jYWxsKHRoaXMpKTtcblxuICAgIHZhciBwcm9wZXJ0eSA9IHZvaWQgMDtcbiAgICBfdGhpcy5uYXRpdmVNZWRpYVNvdXJjZV8gPSBuZXcgd2luZG93JDEuTWVkaWFTb3VyY2UoKTsgLy8gZGVsZWdhdGUgdG8gdGhlIG5hdGl2ZSBNZWRpYVNvdXJjZSdzIG1ldGhvZHMgYnkgZGVmYXVsdFxuXG4gICAgZm9yIChwcm9wZXJ0eSBpbiBfdGhpcy5uYXRpdmVNZWRpYVNvdXJjZV8pIHtcbiAgICAgIGlmICghKHByb3BlcnR5IGluIEh0bWxNZWRpYVNvdXJjZS5wcm90b3R5cGUpICYmIHR5cGVvZiBfdGhpcy5uYXRpdmVNZWRpYVNvdXJjZV9bcHJvcGVydHldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIF90aGlzW3Byb3BlcnR5XSA9IF90aGlzLm5hdGl2ZU1lZGlhU291cmNlX1twcm9wZXJ0eV0uYmluZChfdGhpcy5uYXRpdmVNZWRpYVNvdXJjZV8pO1xuICAgICAgfVxuICAgIH0gLy8gZW11bGF0ZSBgZHVyYXRpb25gIGFuZCBgc2Vla2FibGVgIHVudGlsIHNlZWtpbmcgY2FuIGJlXG4gICAgLy8gaGFuZGxlZCB1bmlmb3JtbHkgZm9yIGxpdmUgc3RyZWFtc1xuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdzNjL21lZGlhLXNvdXJjZS9pc3N1ZXMvNVxuXG5cbiAgICBfdGhpcy5kdXJhdGlvbl8gPSBOYU47XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLCAnZHVyYXRpb24nLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25fID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uXztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZU1lZGlhU291cmNlXy5kdXJhdGlvbjtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShkdXJhdGlvbikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uXyA9IGR1cmF0aW9uO1xuXG4gICAgICAgIGlmIChkdXJhdGlvbiAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICB0aGlzLm5hdGl2ZU1lZGlhU291cmNlXy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ3NlZWthYmxlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIGlmICh0aGlzLmR1cmF0aW9uXyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoW1swLCB0aGlzLm5hdGl2ZU1lZGlhU291cmNlXy5kdXJhdGlvbl1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZU1lZGlhU291cmNlXy5zZWVrYWJsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMsICdyZWFkeVN0YXRlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZU1lZGlhU291cmNlXy5yZWFkeVN0YXRlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ2FjdGl2ZVNvdXJjZUJ1ZmZlcnMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlU291cmNlQnVmZmVyc187XG4gICAgICB9XG4gICAgfSk7IC8vIHRoZSBsaXN0IG9mIHZpcnR1YWwgYW5kIG5hdGl2ZSBTb3VyY2VCdWZmZXJzIGNyZWF0ZWQgYnkgdGhpc1xuICAgIC8vIE1lZGlhU291cmNlXG5cbiAgICBfdGhpcy5zb3VyY2VCdWZmZXJzID0gW107XG4gICAgX3RoaXMuYWN0aXZlU291cmNlQnVmZmVyc18gPSBbXTtcbiAgICAvKipcbiAgICAgKiB1cGRhdGUgdGhlIGxpc3Qgb2YgYWN0aXZlIHNvdXJjZSBidWZmZXJzIGJhc2VkIHVwb24gdmFyaW91c1xuICAgICAqIGltZm9ybWF0aW9uIGZyb20gSExTIGFuZCB2aWRlby5qc1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICAgIF90aGlzLnVwZGF0ZUFjdGl2ZVNvdXJjZUJ1ZmZlcnNfID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gUmV0YWluIHRoZSByZWZlcmVuY2UgYnV0IGVtcHR5IHRoZSBhcnJheVxuICAgICAgX3RoaXMuYWN0aXZlU291cmNlQnVmZmVyc18ubGVuZ3RoID0gMDsgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgc291cmNlIGJ1ZmZlciwgdGhlbiBpdCB3aWxsIGFsd2F5cyBiZSBhY3RpdmUgYW5kIGF1ZGlvIHdpbGxcbiAgICAgIC8vIGJlIGRpc2FibGVkIGJhc2VkIG9uIHRoZSBjb2RlYyBvZiB0aGUgc291cmNlIGJ1ZmZlclxuXG4gICAgICBpZiAoX3RoaXMuc291cmNlQnVmZmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIHNvdXJjZUJ1ZmZlciA9IF90aGlzLnNvdXJjZUJ1ZmZlcnNbMF07XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRBdWRpb0luaXRTZWdtZW50XyA9IHRydWU7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hdWRpb0Rpc2FibGVkXyA9ICFzb3VyY2VCdWZmZXIuYXVkaW9Db2RlY187XG5cbiAgICAgICAgX3RoaXMuYWN0aXZlU291cmNlQnVmZmVyc18ucHVzaChzb3VyY2VCdWZmZXIpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVGhlcmUgYXJlIDIgc291cmNlIGJ1ZmZlcnMsIGEgY29tYmluZWQgKHBvc3NpYmx5IHZpZGVvIG9ubHkpIHNvdXJjZSBidWZmZXIgYW5kXG4gICAgICAvLyBhbmQgYW4gYXVkaW8gb25seSBzb3VyY2UgYnVmZmVyLlxuICAgICAgLy8gQnkgZGVmYXVsdCwgdGhlIGF1ZGlvIGluIHRoZSBjb21iaW5lZCB2aXJ0dWFsIHNvdXJjZSBidWZmZXIgaXMgZW5hYmxlZFxuICAgICAgLy8gYW5kIHRoZSBhdWRpby1vbmx5IHNvdXJjZSBidWZmZXIgKGlmIGl0IGV4aXN0cykgaXMgZGlzYWJsZWQuXG5cblxuICAgICAgdmFyIGRpc2FibGVDb21iaW5lZCA9IGZhbHNlO1xuICAgICAgdmFyIGRpc2FibGVBdWRpb09ubHkgPSB0cnVlOyAvLyBUT0RPOiBtYXliZSB3ZSBjYW4gc3RvcmUgdGhlIHNvdXJjZWJ1ZmZlcnMgb24gdGhlIHRyYWNrIG9iamVjdHM/XG4gICAgICAvLyBzYWZhcmkgbWF5IGRvIHNvbWV0aGluZyBsaWtlIHRoaXNcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRyYWNrID0gX3RoaXMucGxheWVyXy5hdWRpb1RyYWNrcygpW2ldO1xuXG4gICAgICAgIGlmICh0cmFjay5lbmFibGVkICYmIHRyYWNrLmtpbmQgIT09ICdtYWluJykge1xuICAgICAgICAgIC8vIFRoZSBlbmFibGVkIHRyYWNrIGlzIGFuIGFsdGVybmF0ZSBhdWRpbyB0cmFjayBzbyBkaXNhYmxlIHRoZSBhdWRpbyBpblxuICAgICAgICAgIC8vIHRoZSBjb21iaW5lZCBzb3VyY2UgYnVmZmVyIGFuZCBlbmFibGUgdGhlIGF1ZGlvLW9ubHkgc291cmNlIGJ1ZmZlci5cbiAgICAgICAgICBkaXNhYmxlQ29tYmluZWQgPSB0cnVlO1xuICAgICAgICAgIGRpc2FibGVBdWRpb09ubHkgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUJ1ZmZlciwgaW5kZXgpIHtcbiAgICAgICAgLyogZXNsaW5zdC1kaXNhYmxlICovXG4gICAgICAgIC8vIFRPRE8gb25jZSBjb2RlY3MgYXJlIHJlcXVpcmVkLCB3ZSBjYW4gc3dpdGNoIHRvIHVzaW5nIHRoZSBjb2RlY3MgdG8gZGV0ZXJtaW5lXG4gICAgICAgIC8vICAgICAgd2hhdCBzdHJlYW0gaXMgdGhlIHZpZGVvIHN0cmVhbSwgcmF0aGVyIHRoYW4gcmVseWluZyBvbiB2aWRlb1RyYWNrc1xuXG4gICAgICAgIC8qIGVzbGluc3QtZW5hYmxlICovXG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRBdWRpb0luaXRTZWdtZW50XyA9IHRydWU7XG5cbiAgICAgICAgaWYgKHNvdXJjZUJ1ZmZlci52aWRlb0NvZGVjXyAmJiBzb3VyY2VCdWZmZXIuYXVkaW9Db2RlY18pIHtcbiAgICAgICAgICAvLyBjb21iaW5lZFxuICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hdWRpb0Rpc2FibGVkXyA9IGRpc2FibGVDb21iaW5lZDtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VCdWZmZXIudmlkZW9Db2RlY18gJiYgIXNvdXJjZUJ1ZmZlci5hdWRpb0NvZGVjXykge1xuICAgICAgICAgIC8vIElmIHRoZSBcImNvbWJpbmVkXCIgc291cmNlIGJ1ZmZlciBpcyB2aWRlbyBvbmx5LCB0aGVuIHdlIGRvIG5vdCB3YW50XG4gICAgICAgICAgLy8gZGlzYWJsZSB0aGUgYXVkaW8tb25seSBzb3VyY2UgYnVmZmVyICh0aGlzIGlzIG1vc3RseSBmb3IgZGVtdXhlZFxuICAgICAgICAgIC8vIGF1ZGlvIGFuZCB2aWRlbyBobHMpXG4gICAgICAgICAgc291cmNlQnVmZmVyLmF1ZGlvRGlzYWJsZWRfID0gdHJ1ZTtcbiAgICAgICAgICBkaXNhYmxlQXVkaW9Pbmx5ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZUJ1ZmZlci52aWRlb0NvZGVjXyAmJiBzb3VyY2VCdWZmZXIuYXVkaW9Db2RlY18pIHtcbiAgICAgICAgICAvLyBhdWRpbyBvbmx5XG4gICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgYXVkaW8gb25seSB3aXRoIGFsdGVybmF0ZSBhdWRpbyBhbmQgZGlzYWJsZUF1ZGlvT25seSBpcyB0cnVlXG4gICAgICAgICAgLy8gdGhpcyBtZWFucyB3ZSB3YW50IHRvIGRpc2FibGUgdGhlIGF1ZGlvIG9uIHRoZSBhbHRlcm5hdGUgYXVkaW8gc291cmNlYnVmZmVyXG4gICAgICAgICAgLy8gYnV0IG5vdCB0aGUgbWFpbiBcImNvbWJpbmVkXCIgc291cmNlIGJ1ZmZlci4gVGhlIFwiY29tYmluZWRcIiBzb3VyY2UgYnVmZmVyIGlzXG4gICAgICAgICAgLy8gYWx3YXlzIGF0IGluZGV4IDAsIHNvIHRoaXMgZW5zdXJlcyBhdWRpbyB3b24ndCBiZSBkaXNhYmxlZCBpbiBib3RoIHNvdXJjZVxuICAgICAgICAgIC8vIGJ1ZmZlcnMuXG4gICAgICAgICAgc291cmNlQnVmZmVyLmF1ZGlvRGlzYWJsZWRfID0gaW5kZXggPyBkaXNhYmxlQXVkaW9Pbmx5IDogIWRpc2FibGVBdWRpb09ubHk7XG5cbiAgICAgICAgICBpZiAoc291cmNlQnVmZmVyLmF1ZGlvRGlzYWJsZWRfKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYWN0aXZlU291cmNlQnVmZmVyc18ucHVzaChzb3VyY2VCdWZmZXIpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uUGxheWVyTWVkaWFjaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VCdWZmZXIpIHtcbiAgICAgICAgc291cmNlQnVmZmVyLmFwcGVuZEF1ZGlvSW5pdFNlZ21lbnRfID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkhsc1Jlc2V0XyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNvdXJjZUJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlQnVmZmVyKSB7XG4gICAgICAgIGlmIChzb3VyY2VCdWZmZXIudHJhbnNtdXhlcl8pIHtcbiAgICAgICAgICBzb3VyY2VCdWZmZXIudHJhbnNtdXhlcl8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiAncmVzZXRDYXB0aW9ucydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uSGxzU2VnbWVudFRpbWVNYXBwaW5nXyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci50aW1lTWFwcGluZ18gPSBldmVudC5tYXBwaW5nO1xuICAgICAgfSk7XG4gICAgfTsgLy8gUmUtZW1pdCBNZWRpYVNvdXJjZSBldmVudHMgb24gdGhlIHBvbHlmaWxsXG5cblxuICAgIFsnc291cmNlb3BlbicsICdzb3VyY2VjbG9zZScsICdzb3VyY2VlbmRlZCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgdGhpcy5uYXRpdmVNZWRpYVNvdXJjZV8uYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMpKTtcbiAgICB9LCBfdGhpcyk7IC8vIGNhcHR1cmUgdGhlIGFzc29jaWF0ZWQgcGxheWVyIHdoZW4gdGhlIE1lZGlhU291cmNlIGlzXG4gICAgLy8gc3VjY2Vzc2Z1bGx5IGF0dGFjaGVkXG5cbiAgICBfdGhpcy5vbignc291cmNlb3BlbicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gR2V0IHRoZSBwbGF5ZXIgdGhpcyBNZWRpYVNvdXJjZSBpcyBhdHRhY2hlZCB0b1xuICAgICAgdmFyIHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3NyYz1cIicgKyBfdGhpcy51cmxfICsgJ1wiXScpO1xuXG4gICAgICBpZiAoIXZpZGVvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucGxheWVyXyA9IHZpZGVvanMkMSh2aWRlby5wYXJlbnROb2RlKTtcblxuICAgICAgaWYgKCFfdGhpcy5wbGF5ZXJfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gaGxzLXJlc2V0IGlzIGZpcmVkIGJ5IHZpZGVvanMuSGxzIG9uIHRvIHRoZSB0ZWNoIGFmdGVyIHRoZSBtYWluIFNlZ21lbnRMb2FkZXJcbiAgICAgIC8vIHJlc2V0cyBpdHMgc3RhdGUgYW5kIGZsdXNoZXMgdGhlIGJ1ZmZlclxuXG5cbiAgICAgIF90aGlzLnBsYXllcl8udGVjaF8ub24oJ2hscy1yZXNldCcsIF90aGlzLm9uSGxzUmVzZXRfKTsgLy8gaGxzLXNlZ21lbnQtdGltZS1tYXBwaW5nIGlzIGZpcmVkIGJ5IHZpZGVvanMuSGxzIG9uIHRvIHRoZSB0ZWNoIGFmdGVyIHRoZSBtYWluXG4gICAgICAvLyBTZWdtZW50TG9hZGVyIGluc3BlY3RzIGFuIE1UUyBzZWdtZW50IGFuZCBoYXMgYW4gYWNjdXJhdGUgc3RyZWFtIHRvIGRpc3BsYXlcbiAgICAgIC8vIHRpbWUgbWFwcGluZ1xuXG5cbiAgICAgIF90aGlzLnBsYXllcl8udGVjaF8ub24oJ2hscy1zZWdtZW50LXRpbWUtbWFwcGluZycsIF90aGlzLm9uSGxzU2VnbWVudFRpbWVNYXBwaW5nXyk7XG5cbiAgICAgIGlmIChfdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzICYmIF90aGlzLnBsYXllcl8uYXVkaW9UcmFja3MoKSkge1xuICAgICAgICBfdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCkub24oJ2NoYW5nZScsIF90aGlzLnVwZGF0ZUFjdGl2ZVNvdXJjZUJ1ZmZlcnNfKTtcblxuICAgICAgICBfdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCkub24oJ2FkZHRyYWNrJywgX3RoaXMudXBkYXRlQWN0aXZlU291cmNlQnVmZmVyc18pO1xuXG4gICAgICAgIF90aGlzLnBsYXllcl8uYXVkaW9UcmFja3MoKS5vbigncmVtb3ZldHJhY2snLCBfdGhpcy51cGRhdGVBY3RpdmVTb3VyY2VCdWZmZXJzXyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnBsYXllcl8ub24oJ21lZGlhY2hhbmdlJywgX3RoaXMub25QbGF5ZXJNZWRpYWNoYW5nZV8pO1xuICAgIH0pO1xuXG4gICAgX3RoaXMub24oJ3NvdXJjZWVuZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgZHVyYXRpb24gPSBkdXJhdGlvbk9mVmlkZW8oX3RoaXMuZHVyYXRpb24pO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLnNvdXJjZUJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZWJ1ZmZlciA9IF90aGlzLnNvdXJjZUJ1ZmZlcnNbaV07XG4gICAgICAgIHZhciBjdWVzID0gc291cmNlYnVmZmVyLm1ldGFkYXRhVHJhY2tfICYmIHNvdXJjZWJ1ZmZlci5tZXRhZGF0YVRyYWNrXy5jdWVzO1xuXG4gICAgICAgIGlmIChjdWVzICYmIGN1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgY3Vlc1tjdWVzLmxlbmd0aCAtIDFdLmVuZFRpbWUgPSBkdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyAvLyBleHBsaWNpdGx5IHRlcm1pbmF0ZSBhbnkgV2ViV29ya2VycyB0aGF0IHdlcmUgY3JlYXRlZFxuICAgIC8vIGJ5IFNvdXJjZUhhbmRsZXJzXG5cblxuICAgIF90aGlzLm9uKCdzb3VyY2VjbG9zZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUJ1ZmZlcikge1xuICAgICAgICBpZiAoc291cmNlQnVmZmVyLnRyYW5zbXV4ZXJfKSB7XG4gICAgICAgICAgc291cmNlQnVmZmVyLnRyYW5zbXV4ZXJfLnRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc291cmNlQnVmZmVycy5sZW5ndGggPSAwO1xuXG4gICAgICBpZiAoIXRoaXMucGxheWVyXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnBsYXllcl8uYXVkaW9UcmFja3MgJiYgdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCkub2ZmKCdjaGFuZ2UnLCB0aGlzLnVwZGF0ZUFjdGl2ZVNvdXJjZUJ1ZmZlcnNfKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCkub2ZmKCdhZGR0cmFjaycsIHRoaXMudXBkYXRlQWN0aXZlU291cmNlQnVmZmVyc18pO1xuICAgICAgICB0aGlzLnBsYXllcl8uYXVkaW9UcmFja3MoKS5vZmYoJ3JlbW92ZXRyYWNrJywgdGhpcy51cGRhdGVBY3RpdmVTb3VyY2VCdWZmZXJzXyk7XG4gICAgICB9IC8vIFdlIGNhbiBvbmx5IGNoYW5nZSB0aGlzIGlmIHRoZSBwbGF5ZXIgaGFzbid0IGJlZW4gZGlzcG9zZWQgb2YgeWV0XG4gICAgICAvLyBiZWNhdXNlIGBvZmZgIGV2ZW50dWFsbHkgdHJpZXMgdG8gdXNlIHRoZSBlbF8gcHJvcGVydHkuIElmIGl0IGhhc1xuICAgICAgLy8gYmVlbiBkaXNwb3NlZCBvZiwgdGhlbiBkb24ndCB3b3JyeSBhYm91dCBpdCBiZWNhdXNlIHRoZXJlIGFyZSBub1xuICAgICAgLy8gZXZlbnQgaGFuZGxlcnMgbGVmdCB0byB1bmJpbmQgYW55d2F5XG5cblxuICAgICAgaWYgKHRoaXMucGxheWVyXy5lbF8pIHtcbiAgICAgICAgdGhpcy5wbGF5ZXJfLm9mZignbWVkaWFjaGFuZ2UnLCB0aGlzLm9uUGxheWVyTWVkaWFjaGFuZ2VfKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGxheWVyXy50ZWNoXyAmJiB0aGlzLnBsYXllcl8udGVjaF8uZWxfKSB7XG4gICAgICAgIHRoaXMucGxheWVyXy50ZWNoXy5vZmYoJ2hscy1yZXNldCcsIHRoaXMub25IbHNSZXNldF8pO1xuICAgICAgICB0aGlzLnBsYXllcl8udGVjaF8ub2ZmKCdobHMtc2VnbWVudC10aW1lLW1hcHBpbmcnLCB0aGlzLm9uSGxzU2VnbWVudFRpbWVNYXBwaW5nXyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJhbmdlIHRoYXQgdGhhdCBjYW4gbm93IGJlIHNlZWtlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtEb3VibGV9IHN0YXJ0IHdoZXJlIHRvIHN0YXJ0IHRoZSBhZGRpdGlvblxuICAgKiBAcGFyYW0ge0RvdWJsZX0gZW5kIHdoZXJlIHRvIGVuZCB0aGUgYWRkaXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICBjcmVhdGVDbGFzcyhIdG1sTWVkaWFTb3VyY2UsIFt7XG4gICAga2V5OiAnYWRkU2Vla2FibGVSYW5nZV8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTZWVrYWJsZVJhbmdlXyhzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgZXJyb3IgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh0aGlzLmR1cmF0aW9uICE9PSBJbmZpbml0eSkge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcignTWVkaWFTb3VyY2UuYWRkU2Vla2FibGVSYW5nZSgpIGNhbiBvbmx5IGJlIGludm9rZWQgJyArICd3aGVuIHRoZSBkdXJhdGlvbiBpcyBJbmZpbml0eScpO1xuICAgICAgICBlcnJvci5uYW1lID0gJ0ludmFsaWRTdGF0ZUVycm9yJztcbiAgICAgICAgZXJyb3IuY29kZSA9IDExO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZCA+IHRoaXMubmF0aXZlTWVkaWFTb3VyY2VfLmR1cmF0aW9uIHx8IGlzTmFOKHRoaXMubmF0aXZlTWVkaWFTb3VyY2VfLmR1cmF0aW9uKSkge1xuICAgICAgICB0aGlzLm5hdGl2ZU1lZGlhU291cmNlXy5kdXJhdGlvbiA9IGVuZDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgc291cmNlIGJ1ZmZlciB0byB0aGUgbWVkaWEgc291cmNlLlxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhU291cmNlL2FkZFNvdXJjZUJ1ZmZlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBjb250ZW50LXR5cGUgb2YgdGhlIGNvbnRlbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBjcmVhdGVkIHNvdXJjZSBidWZmZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkU291cmNlQnVmZmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU291cmNlQnVmZmVyKHR5cGUpIHtcbiAgICAgIHZhciBidWZmZXIgPSB2b2lkIDA7XG4gICAgICB2YXIgcGFyc2VkVHlwZSA9IHBhcnNlQ29udGVudFR5cGUodHlwZSk7IC8vIENyZWF0ZSBhIFZpcnR1YWxTb3VyY2VCdWZmZXIgdG8gdHJhbnNtdXggTVBFRy0yIHRyYW5zcG9ydFxuICAgICAgLy8gc3RyZWFtIHNlZ21lbnRzIGludG8gZnJhZ21lbnRlZCBNUDRzXG5cbiAgICAgIGlmICgvXih2aWRlb3xhdWRpbylcXC9tcDJ0JC9pLnRlc3QocGFyc2VkVHlwZS50eXBlKSkge1xuICAgICAgICB2YXIgY29kZWNzID0gW107XG5cbiAgICAgICAgaWYgKHBhcnNlZFR5cGUucGFyYW1ldGVycyAmJiBwYXJzZWRUeXBlLnBhcmFtZXRlcnMuY29kZWNzKSB7XG4gICAgICAgICAgY29kZWNzID0gcGFyc2VkVHlwZS5wYXJhbWV0ZXJzLmNvZGVjcy5zcGxpdCgnLCcpO1xuICAgICAgICAgIGNvZGVjcyA9IHRyYW5zbGF0ZUxlZ2FjeUNvZGVjcyhjb2RlY3MpO1xuICAgICAgICAgIGNvZGVjcyA9IGNvZGVjcy5maWx0ZXIoZnVuY3Rpb24gKGNvZGVjKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBdWRpb0NvZGVjKGNvZGVjKSB8fCBpc1ZpZGVvQ29kZWMoY29kZWMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGVjcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBjb2RlY3MgPSBbJ2F2YzEuNGQ0MDBkJywgJ21wNGEuNDAuMiddO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVmZmVyID0gbmV3IFZpcnR1YWxTb3VyY2VCdWZmZXIodGhpcywgY29kZWNzKTtcblxuICAgICAgICBpZiAodGhpcy5zb3VyY2VCdWZmZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIC8vIElmIGFub3RoZXIgVmlydHVhbFNvdXJjZUJ1ZmZlciBhbHJlYWR5IGV4aXN0cywgdGhlbiB3ZSBhcmUgY3JlYXRpbmcgYVxuICAgICAgICAgIC8vIFNvdXJjZUJ1ZmZlciBmb3IgYW4gYWx0ZXJuYXRlIGF1ZGlvIHRyYWNrIGFuZCB0aGVyZWZvcmUgd2Uga25vdyB0aGF0XG4gICAgICAgICAgLy8gdGhlIHNvdXJjZSBoYXMgYm90aCBhbiBhdWRpbyBhbmQgdmlkZW8gdHJhY2suXG4gICAgICAgICAgLy8gVGhhdCBtZWFucyB3ZSBzaG91bGQgdHJpZ2dlciB0aGUgbWFudWFsIGNyZWF0aW9uIG9mIHRoZSByZWFsXG4gICAgICAgICAgLy8gU291cmNlQnVmZmVycyBpbnN0ZWFkIG9mIHdhaXRpbmcgZm9yIHRoZSB0cmFuc211eGVyIHRvIHJldHVybiBkYXRhXG4gICAgICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzWzBdLmNyZWF0ZVJlYWxTb3VyY2VCdWZmZXJzXygpO1xuICAgICAgICAgIGJ1ZmZlci5jcmVhdGVSZWFsU291cmNlQnVmZmVyc18oKTsgLy8gQXV0b21hdGljYWxseSBkaXNhYmxlIHRoZSBhdWRpbyBvbiB0aGUgZmlyc3Qgc291cmNlIGJ1ZmZlciBpZlxuICAgICAgICAgIC8vIGEgc2Vjb25kIHNvdXJjZSBidWZmZXIgaXMgZXZlciBjcmVhdGVkXG5cbiAgICAgICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbMF0uYXVkaW9EaXNhYmxlZF8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWxlZ2F0ZSB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uXG4gICAgICAgIGJ1ZmZlciA9IHRoaXMubmF0aXZlTWVkaWFTb3VyY2VfLmFkZFNvdXJjZUJ1ZmZlcih0eXBlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBIdG1sTWVkaWFTb3VyY2U7XG59KHZpZGVvanMkMS5FdmVudFRhcmdldCk7XG4vKipcbiAqIEBmaWxlIHZpZGVvanMtY29udHJpYi1tZWRpYS1zb3VyY2VzLmpzXG4gKi9cblxuXG52YXIgdXJsQ291bnQgPSAwOyAvLyAtLS0tLS0tLS0tLS1cbi8vIE1lZGlhIFNvdXJjZVxuLy8gLS0tLS0tLS0tLS0tXG4vLyBzdG9yZSByZWZlcmVuY2VzIHRvIHRoZSBtZWRpYSBzb3VyY2VzIHNvIHRoZXkgY2FuIGJlIGNvbm5lY3RlZFxuLy8gdG8gYSB2aWRlbyBlbGVtZW50IChhIHN3ZiBvYmplY3QpXG4vLyBUT0RPOiBjYW4gd2Ugc3RvcmUgdGhpcyBzb21ld2hlcmUgbG9jYWwgdG8gdGhpcyBtb2R1bGU/XG5cbnZpZGVvanMkMS5tZWRpYVNvdXJjZXMgPSB7fTtcbi8qKlxuICogUHJvdmlkZSBhIG1ldGhvZCBmb3IgYSBzd2Ygb2JqZWN0IHRvIG5vdGlmeSBKUyB0aGF0IGFcbiAqIG1lZGlhIHNvdXJjZSBpcyBub3cgb3Blbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNPYmplY3RVUkwgc3RyaW5nIHJlZmVyZW5jaW5nIHRoZSBNU0UgT2JqZWN0IFVSTFxuICogQHBhcmFtIHtTdHJpbmd9IHN3ZklkIHRoZSBzd2YgaWRcbiAqL1xuXG52YXIgb3BlbiA9IGZ1bmN0aW9uIG9wZW4obXNPYmplY3RVUkwsIHN3ZklkKSB7XG4gIHZhciBtZWRpYVNvdXJjZSA9IHZpZGVvanMkMS5tZWRpYVNvdXJjZXNbbXNPYmplY3RVUkxdO1xuXG4gIGlmIChtZWRpYVNvdXJjZSkge1xuICAgIG1lZGlhU291cmNlLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3NvdXJjZW9wZW4nLFxuICAgICAgc3dmSWQ6IHN3ZklkXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZWRpYSBTb3VyY2Ugbm90IGZvdW5kIChWaWRlby5qcyknKTtcbiAgfVxufTtcbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBuYXRpdmUgTWVkaWFTb3VyY2Ugb2JqZWN0IGV4aXN0cyBhbmQgc3VwcG9ydHNcbiAqIGFuIE1QNCBjb250YWluZXIgd2l0aCBib3RoIEguMjY0IHZpZGVvIGFuZCBBQUMtTEMgYXVkaW8uXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gaWYgIG5hdGl2ZSBtZWRpYSBzb3VyY2VzIGFyZSBzdXBwb3J0ZWRcbiAqL1xuXG5cbnZhciBzdXBwb3J0c05hdGl2ZU1lZGlhU291cmNlcyA9IGZ1bmN0aW9uIHN1cHBvcnRzTmF0aXZlTWVkaWFTb3VyY2VzKCkge1xuICByZXR1cm4gISF3aW5kb3ckMS5NZWRpYVNvdXJjZSAmJiAhIXdpbmRvdyQxLk1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZCAmJiB3aW5kb3ckMS5NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ3ZpZGVvL21wNDtjb2RlY3M9XCJhdmMxLjRkNDAwZCxtcDRhLjQwLjJcIicpO1xufTtcbi8qKlxuICogQW4gZW11bGF0aW9uIG9mIHRoZSBNZWRpYVNvdXJjZSBBUEkgc28gdGhhdCB3ZSBjYW4gc3VwcG9ydFxuICogbmF0aXZlIGFuZCBub24tbmF0aXZlIGZ1bmN0aW9uYWxpdHkuIHJldHVybnMgYW4gaW5zdGFuY2Ugb2ZcbiAqIEh0bWxNZWRpYVNvdXJjZS5cbiAqXG4gKiBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFTb3VyY2UvTWVkaWFTb3VyY2VcbiAqL1xuXG5cbnZhciBNZWRpYVNvdXJjZSA9IGZ1bmN0aW9uIE1lZGlhU291cmNlKCkge1xuICB0aGlzLk1lZGlhU291cmNlID0ge1xuICAgIG9wZW46IG9wZW4sXG4gICAgc3VwcG9ydHNOYXRpdmVNZWRpYVNvdXJjZXM6IHN1cHBvcnRzTmF0aXZlTWVkaWFTb3VyY2VzXG4gIH07XG5cbiAgaWYgKHN1cHBvcnRzTmF0aXZlTWVkaWFTb3VyY2VzKCkpIHtcbiAgICByZXR1cm4gbmV3IEh0bWxNZWRpYVNvdXJjZSgpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgdXNlIGNyZWF0ZSBhIHZpcnR1YWwgTWVkaWFTb3VyY2UgZm9yIHRoaXMgdmlkZW8nKTtcbn07XG5cbk1lZGlhU291cmNlLm9wZW4gPSBvcGVuO1xuTWVkaWFTb3VyY2Uuc3VwcG9ydHNOYXRpdmVNZWRpYVNvdXJjZXMgPSBzdXBwb3J0c05hdGl2ZU1lZGlhU291cmNlcztcbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCB0aGUgbmF0aXZlIFVSTCBmb3Igb3VyIE1TRSBvYmplY3RcbiAqIGltcGxlbWVudGF0aW9uLCB0aGlzIG9iamVjdCBpcyBleHBvc2VkIHVuZGVyIHZpZGVvanMuVVJMXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9VUkxcbiAqL1xuXG52YXIgVVJMJDEgPSB7XG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBuYXRpdmUgY3JlYXRlT2JqZWN0VVJMIGZvciBvdXIgb2JqZWN0cy5cbiAgICogVGhpcyBmdW5jdGlvbiBtYXBzIGEgbmF0aXZlIG9yIGVtdWxhdGVkIG1lZGlhU291cmNlIHRvIGEgYmxvYlxuICAgKiB1cmwgc28gdGhhdCBpdCBjYW4gYmUgbG9hZGVkIGludG8gdmlkZW8uanNcbiAgICpcbiAgICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9jcmVhdGVPYmplY3RVUkxcbiAgICogQHBhcmFtIHtNZWRpYVNvdXJjZX0gb2JqZWN0IHRoZSBvYmplY3QgdG8gY3JlYXRlIGEgYmxvYiB1cmwgdG9cbiAgICovXG4gIGNyZWF0ZU9iamVjdFVSTDogZnVuY3Rpb24gY3JlYXRlT2JqZWN0VVJMKG9iamVjdCkge1xuICAgIHZhciBvYmplY3RVcmxQcmVmaXggPSAnYmxvYjp2anMtbWVkaWEtc291cmNlLyc7XG4gICAgdmFyIHVybCA9IHZvaWQgMDsgLy8gdXNlIHRoZSBuYXRpdmUgTWVkaWFTb3VyY2UgdG8gZ2VuZXJhdGUgYW4gb2JqZWN0IFVSTFxuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEh0bWxNZWRpYVNvdXJjZSkge1xuICAgICAgdXJsID0gd2luZG93JDEuVVJMLmNyZWF0ZU9iamVjdFVSTChvYmplY3QubmF0aXZlTWVkaWFTb3VyY2VfKTtcbiAgICAgIG9iamVjdC51cmxfID0gdXJsO1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9IC8vIGlmIHRoZSBvYmplY3QgaXNuJ3QgYW4gZW11bGF0ZWQgTWVkaWFTb3VyY2UsIGRlbGVnYXRlIHRvIHRoZVxuICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvblxuXG5cbiAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBIdG1sTWVkaWFTb3VyY2UpKSB7XG4gICAgICB1cmwgPSB3aW5kb3ckMS5VUkwuY3JlYXRlT2JqZWN0VVJMKG9iamVjdCk7XG4gICAgICBvYmplY3QudXJsXyA9IHVybDtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfSAvLyBidWlsZCBhIFVSTCB0aGF0IGNhbiBiZSB1c2VkIHRvIG1hcCBiYWNrIHRvIHRoZSBlbXVsYXRlZFxuICAgIC8vIE1lZGlhU291cmNlXG5cblxuICAgIHVybCA9IG9iamVjdFVybFByZWZpeCArIHVybENvdW50O1xuICAgIHVybENvdW50Kys7IC8vIHNldHVwIHRoZSBtYXBwaW5nIGJhY2sgdG8gb2JqZWN0XG5cbiAgICB2aWRlb2pzJDEubWVkaWFTb3VyY2VzW3VybF0gPSBvYmplY3Q7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxufTtcbnZpZGVvanMkMS5NZWRpYVNvdXJjZSA9IE1lZGlhU291cmNlO1xudmlkZW9qcyQxLlVSTCA9IFVSTCQxO1xudmFyIEV2ZW50VGFyZ2V0JDEkMSA9IHZpZGVvanMkMS5FdmVudFRhcmdldCxcbiAgICBtZXJnZU9wdGlvbnMkMiA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnM7XG4vKipcbiAqIFJldHVybnMgYSBuZXcgbWFzdGVyIG1hbmlmZXN0IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBtZXJnaW5nIGFuIHVwZGF0ZWQgbWFzdGVyIG1hbmlmZXN0XG4gKiBpbnRvIHRoZSBvcmlnaW5hbCB2ZXJzaW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRNYXN0ZXJcbiAqICAgICAgICBUaGUgb2xkIHBhcnNlZCBtcGQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gbmV3TWFzdGVyXG4gKiAgICAgICAgVGhlIHVwZGF0ZWQgcGFyc2VkIG1wZCBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgQSBuZXcgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgb3JpZ2luYWwgbWFzdGVyIG1hbmlmZXN0IHdpdGggdGhlIHVwZGF0ZWQgbWVkaWFcbiAqICAgICAgICAgcGxheWxpc3RzIG1lcmdlZCBpblxuICovXG5cbnZhciB1cGRhdGVNYXN0ZXIkMSA9IGZ1bmN0aW9uIHVwZGF0ZU1hc3RlciQkMShvbGRNYXN0ZXIsIG5ld01hc3Rlcikge1xuICB2YXIgbm9DaGFuZ2VzID0gdm9pZCAwO1xuICB2YXIgdXBkYXRlID0gbWVyZ2VPcHRpb25zJDIob2xkTWFzdGVyLCB7XG4gICAgLy8gVGhlc2UgYXJlIHRvcCBsZXZlbCBwcm9wZXJ0aWVzIHRoYXQgY2FuIGJlIHVwZGF0ZWRcbiAgICBkdXJhdGlvbjogbmV3TWFzdGVyLmR1cmF0aW9uLFxuICAgIG1pbmltdW1VcGRhdGVQZXJpb2Q6IG5ld01hc3Rlci5taW5pbXVtVXBkYXRlUGVyaW9kXG4gIH0pOyAvLyBGaXJzdCB1cGRhdGUgdGhlIHBsYXlsaXN0cyBpbiBwbGF5bGlzdCBsaXN0XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdNYXN0ZXIucGxheWxpc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYXlsaXN0VXBkYXRlID0gdXBkYXRlTWFzdGVyKHVwZGF0ZSwgbmV3TWFzdGVyLnBsYXlsaXN0c1tpXSk7XG5cbiAgICBpZiAocGxheWxpc3RVcGRhdGUpIHtcbiAgICAgIHVwZGF0ZSA9IHBsYXlsaXN0VXBkYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBub0NoYW5nZXMgPSB0cnVlO1xuICAgIH1cbiAgfSAvLyBUaGVuIHVwZGF0ZSBtZWRpYSBncm91cCBwbGF5bGlzdHNcblxuXG4gIGZvckVhY2hNZWRpYUdyb3VwKG5ld01hc3RlciwgZnVuY3Rpb24gKHByb3BlcnRpZXMsIHR5cGUsIGdyb3VwLCBsYWJlbCkge1xuICAgIGlmIChwcm9wZXJ0aWVzLnBsYXlsaXN0cyAmJiBwcm9wZXJ0aWVzLnBsYXlsaXN0cy5sZW5ndGgpIHtcbiAgICAgIHZhciB1cmkgPSBwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXS51cmk7XG5cbiAgICAgIHZhciBfcGxheWxpc3RVcGRhdGUgPSB1cGRhdGVNYXN0ZXIodXBkYXRlLCBwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXSk7XG5cbiAgICAgIGlmIChfcGxheWxpc3RVcGRhdGUpIHtcbiAgICAgICAgdXBkYXRlID0gX3BsYXlsaXN0VXBkYXRlOyAvLyB1cGRhdGUgdGhlIHBsYXlsaXN0IHJlZmVyZW5jZSB3aXRoaW4gbWVkaWEgZ3JvdXBzXG5cbiAgICAgICAgdXBkYXRlLm1lZGlhR3JvdXBzW3R5cGVdW2dyb3VwXVtsYWJlbF0ucGxheWxpc3RzWzBdID0gdXBkYXRlLnBsYXlsaXN0c1t1cmldO1xuICAgICAgICBub0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChub0NoYW5nZXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB1cGRhdGU7XG59O1xuXG52YXIgZ2VuZXJhdGVTaWR4S2V5ID0gZnVuY3Rpb24gZ2VuZXJhdGVTaWR4S2V5KHNpZHhJbmZvKSB7XG4gIC8vIHNob3VsZCBiZSBub24taW5jbHVzaXZlXG4gIHZhciBzaWR4Qnl0ZVJhbmdlRW5kID0gc2lkeEluZm8uYnl0ZXJhbmdlLm9mZnNldCArIHNpZHhJbmZvLmJ5dGVyYW5nZS5sZW5ndGggLSAxO1xuICByZXR1cm4gc2lkeEluZm8udXJpICsgJy0nICsgc2lkeEluZm8uYnl0ZXJhbmdlLm9mZnNldCArICctJyArIHNpZHhCeXRlUmFuZ2VFbmQ7XG59OyAvLyBTSURYIHNob3VsZCBiZSBlcXVpdmFsZW50IGlmIHRoZSBVUkkgYW5kIGJ5dGVyYW5nZXMgb2YgdGhlIFNJRFggbWF0Y2guXG4vLyBJZiB0aGUgU0lEWHMgaGF2ZSBtYXBzLCB0aGUgdHdvIG1hcHMgc2hvdWxkIG1hdGNoLFxuLy8gYm90aCBgYWAgYW5kIGBiYCBtaXNzaW5nIFNJRFhzIGlzIGNvbnNpZGVyZWQgbWF0Y2hpbmcuXG4vLyBJZiBgYWAgb3IgYGJgIGJ1dCBub3QgYm90aCBoYXZlIGEgbWFwLCB0aGV5IGFyZW4ndCBtYXRjaGluZy5cblxuXG52YXIgZXF1aXZhbGVudFNpZHggPSBmdW5jdGlvbiBlcXVpdmFsZW50U2lkeChhLCBiKSB7XG4gIHZhciBuZWl0aGVyTWFwID0gQm9vbGVhbighYS5tYXAgJiYgIWIubWFwKTtcbiAgdmFyIGVxdWl2YWxlbnRNYXAgPSBuZWl0aGVyTWFwIHx8IEJvb2xlYW4oYS5tYXAgJiYgYi5tYXAgJiYgYS5tYXAuYnl0ZXJhbmdlLm9mZnNldCA9PT0gYi5tYXAuYnl0ZXJhbmdlLm9mZnNldCAmJiBhLm1hcC5ieXRlcmFuZ2UubGVuZ3RoID09PSBiLm1hcC5ieXRlcmFuZ2UubGVuZ3RoKTtcbiAgcmV0dXJuIGVxdWl2YWxlbnRNYXAgJiYgYS51cmkgPT09IGIudXJpICYmIGEuYnl0ZXJhbmdlLm9mZnNldCA9PT0gYi5ieXRlcmFuZ2Uub2Zmc2V0ICYmIGEuYnl0ZXJhbmdlLmxlbmd0aCA9PT0gYi5ieXRlcmFuZ2UubGVuZ3RoO1xufTsgLy8gZXhwb3J0ZWQgZm9yIHRlc3RpbmdcblxuXG52YXIgY29tcGFyZVNpZHhFbnRyeSA9IGZ1bmN0aW9uIGNvbXBhcmVTaWR4RW50cnkocGxheWxpc3RzLCBvbGRTaWR4TWFwcGluZykge1xuICB2YXIgbmV3U2lkeE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciB1cmkgaW4gcGxheWxpc3RzKSB7XG4gICAgdmFyIHBsYXlsaXN0ID0gcGxheWxpc3RzW3VyaV07XG4gICAgdmFyIGN1cnJlbnRTaWR4SW5mbyA9IHBsYXlsaXN0LnNpZHg7XG5cbiAgICBpZiAoY3VycmVudFNpZHhJbmZvKSB7XG4gICAgICB2YXIga2V5ID0gZ2VuZXJhdGVTaWR4S2V5KGN1cnJlbnRTaWR4SW5mbyk7XG5cbiAgICAgIGlmICghb2xkU2lkeE1hcHBpbmdba2V5XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIHNhdmVkU2lkeEluZm8gPSBvbGRTaWR4TWFwcGluZ1trZXldLnNpZHhJbmZvO1xuXG4gICAgICBpZiAoZXF1aXZhbGVudFNpZHgoc2F2ZWRTaWR4SW5mbywgY3VycmVudFNpZHhJbmZvKSkge1xuICAgICAgICBuZXdTaWR4TWFwcGluZ1trZXldID0gb2xkU2lkeE1hcHBpbmdba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3U2lkeE1hcHBpbmc7XG59O1xuLyoqXG4gKiAgQSBmdW5jdGlvbiB0aGF0IGZpbHRlcnMgb3V0IGNoYW5nZWQgaXRlbXMgYXMgdGhleSBuZWVkIHRvIGJlIHJlcXVlc3RlZCBzZXBhcmF0ZWx5LlxuICpcbiAqICBUaGUgbWV0aG9kIGlzIGV4cG9ydGVkIGZvciB0ZXN0aW5nXG4gKlxuICogIEBwYXJhbSB7T2JqZWN0fSBtYXN0ZXJYbWwgdGhlIG1wZCBYTUxcbiAqICBAcGFyYW0ge3N0cmluZ30gc3JjVXJsIHRoZSBtcGQgdXJsXG4gKiAgQHBhcmFtIHtEYXRlfSBjbGllbnRPZmZzZXQgYSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudCAocGFzc2VkIHRocm91Z2ggYW5kIG5vdCB1c2VkKVxuICogIEBwYXJhbSB7T2JqZWN0fSBvbGRTaWR4TWFwcGluZyB0aGUgU0lEWCB0byBjb21wYXJlIGFnYWluc3RcbiAqL1xuXG5cbnZhciBmaWx0ZXJDaGFuZ2VkU2lkeE1hcHBpbmdzID0gZnVuY3Rpb24gZmlsdGVyQ2hhbmdlZFNpZHhNYXBwaW5ncyhtYXN0ZXJYbWwsIHNyY1VybCwgY2xpZW50T2Zmc2V0LCBvbGRTaWR4TWFwcGluZykge1xuICAvLyBEb24ndCBwYXNzIGN1cnJlbnQgc2lkeCBtYXBwaW5nXG4gIHZhciBtYXN0ZXIgPSBwYXJzZShtYXN0ZXJYbWwsIHtcbiAgICBtYW5pZmVzdFVyaTogc3JjVXJsLFxuICAgIGNsaWVudE9mZnNldDogY2xpZW50T2Zmc2V0XG4gIH0pO1xuICB2YXIgdmlkZW9TaWR4ID0gY29tcGFyZVNpZHhFbnRyeShtYXN0ZXIucGxheWxpc3RzLCBvbGRTaWR4TWFwcGluZyk7XG4gIHZhciBtZWRpYUdyb3VwU2lkeCA9IHZpZGVvU2lkeDtcbiAgZm9yRWFjaE1lZGlhR3JvdXAobWFzdGVyLCBmdW5jdGlvbiAocHJvcGVydGllcywgbWVkaWFUeXBlLCBncm91cEtleSwgbGFiZWxLZXkpIHtcbiAgICBpZiAocHJvcGVydGllcy5wbGF5bGlzdHMgJiYgcHJvcGVydGllcy5wbGF5bGlzdHMubGVuZ3RoKSB7XG4gICAgICB2YXIgcGxheWxpc3RzID0gcHJvcGVydGllcy5wbGF5bGlzdHM7XG4gICAgICBtZWRpYUdyb3VwU2lkeCA9IG1lcmdlT3B0aW9ucyQyKG1lZGlhR3JvdXBTaWR4LCBjb21wYXJlU2lkeEVudHJ5KHBsYXlsaXN0cywgb2xkU2lkeE1hcHBpbmcpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWVkaWFHcm91cFNpZHg7XG59OyAvLyBleHBvcnRlZCBmb3IgdGVzdGluZ1xuXG5cbnZhciByZXF1ZXN0U2lkeF8gPSBmdW5jdGlvbiByZXF1ZXN0U2lkeF8oc2lkeFJhbmdlLCBwbGF5bGlzdCwgeGhyLCBvcHRpb25zLCBmaW5pc2hQcm9jZXNzaW5nRm4pIHtcbiAgdmFyIHNpZHhJbmZvID0ge1xuICAgIC8vIHJlc29sdmUgdGhlIHNlZ21lbnQgVVJMIHJlbGF0aXZlIHRvIHRoZSBwbGF5bGlzdFxuICAgIHVyaTogcmVzb2x2ZU1hbmlmZXN0UmVkaXJlY3Qob3B0aW9ucy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cywgc2lkeFJhbmdlLnJlc29sdmVkVXJpKSxcbiAgICAvLyByZXNvbHZlZFVyaTogc2lkeFJhbmdlLnJlc29sdmVkVXJpLFxuICAgIGJ5dGVyYW5nZTogc2lkeFJhbmdlLmJ5dGVyYW5nZSxcbiAgICAvLyB0aGUgc2VnbWVudCdzIHBsYXlsaXN0XG4gICAgcGxheWxpc3Q6IHBsYXlsaXN0XG4gIH07XG4gIHZhciBzaWR4UmVxdWVzdE9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHNpZHhJbmZvLCB7XG4gICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgIGhlYWRlcnM6IHNlZ21lbnRYaHJIZWFkZXJzKHNpZHhJbmZvKVxuICB9KTtcbiAgcmV0dXJuIHhocihzaWR4UmVxdWVzdE9wdGlvbnMsIGZpbmlzaFByb2Nlc3NpbmdGbik7XG59O1xuXG52YXIgRGFzaFBsYXlsaXN0TG9hZGVyID0gZnVuY3Rpb24gKF9FdmVudFRhcmdldCkge1xuICBpbmhlcml0cyhEYXNoUGxheWxpc3RMb2FkZXIsIF9FdmVudFRhcmdldCk7IC8vIERhc2hQbGF5bGlzdExvYWRlciBtdXN0IGFjY2VwdCBlaXRoZXIgYSBzcmMgdXJsIG9yIGEgcGxheWxpc3QgYmVjYXVzZSBzdWJzZXF1ZW50XG4gIC8vIHBsYXlsaXN0IGxvYWRlciBzZXR1cHMgZnJvbSBtZWRpYSBncm91cHMgd2lsbCBleHBlY3QgdG8gYmUgYWJsZSB0byBwYXNzIGEgcGxheWxpc3RcbiAgLy8gKHNpbmNlIHRoZXJlIGFyZW4ndCBleHRlcm5hbCBVUkxzIHRvIG1lZGlhIHBsYXlsaXN0cyB3aXRoIERBU0gpXG5cbiAgZnVuY3Rpb24gRGFzaFBsYXlsaXN0TG9hZGVyKHNyY1VybE9yUGxheWxpc3QsIGhscykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICB2YXIgbWFzdGVyUGxheWxpc3RMb2FkZXIgPSBhcmd1bWVudHNbM107XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGFzaFBsYXlsaXN0TG9hZGVyKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERhc2hQbGF5bGlzdExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERhc2hQbGF5bGlzdExvYWRlcikpLmNhbGwodGhpcykpO1xuXG4gICAgdmFyIF9vcHRpb25zJHdpdGhDcmVkZW50aSA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHMgPSBfb3B0aW9ucyR3aXRoQ3JlZGVudGkgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aENyZWRlbnRpLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVNYW5pZmUgPSBvcHRpb25zLmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzLFxuICAgICAgICBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyA9IF9vcHRpb25zJGhhbmRsZU1hbmlmZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRoYW5kbGVNYW5pZmU7XG4gICAgX3RoaXMuaGxzXyA9IGhscztcbiAgICBfdGhpcy53aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHM7XG4gICAgX3RoaXMuaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMgPSBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cztcblxuICAgIGlmICghc3JjVXJsT3JQbGF5bGlzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIG5vbi1lbXB0eSBwbGF5bGlzdCBVUkwgb3IgcGxheWxpc3QgaXMgcmVxdWlyZWQnKTtcbiAgICB9IC8vIGV2ZW50IG5hbWluZz9cblxuXG4gICAgX3RoaXMub24oJ21pbmltdW1VcGRhdGVQZXJpb2QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZWZyZXNoWG1sXygpO1xuICAgIH0pOyAvLyBsaXZlIHBsYXlsaXN0IHN0YWxlbmVzcyB0aW1lb3V0XG5cblxuICAgIF90aGlzLm9uKCdtZWRpYXVwZGF0ZXRpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZWZyZXNoTWVkaWFfKF90aGlzLm1lZGlhKCkudXJpKTtcbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0gJ0hBVkVfTk9USElORyc7XG4gICAgX3RoaXMubG9hZGVkUGxheWxpc3RzXyA9IHt9OyAvLyBpbml0aWFsaXplIHRoZSBsb2FkZXIgc3RhdGVcbiAgICAvLyBUaGUgbWFzdGVyUGxheWxpc3RMb2FkZXIgd2lsbCBiZSBjcmVhdGVkIHdpdGggYSBzdHJpbmdcblxuICAgIGlmICh0eXBlb2Ygc3JjVXJsT3JQbGF5bGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIF90aGlzLnNyY1VybCA9IHNyY1VybE9yUGxheWxpc3Q7IC8vIFRPRE86IHJlc2V0IHNpZHhNYXBwaW5nIGJldHdlZW4gcGVyaW9kIGNoYW5nZXNcbiAgICAgIC8vIG9uY2UgbXVsdGktcGVyaW9kIGlzIHJlZmFjdG9yZWRcblxuICAgICAgX3RoaXMuc2lkeE1hcHBpbmdfID0ge307XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dXBDaGlsZExvYWRlcihtYXN0ZXJQbGF5bGlzdExvYWRlciwgc3JjVXJsT3JQbGF5bGlzdCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEYXNoUGxheWxpc3RMb2FkZXIsIFt7XG4gICAga2V5OiAnc2V0dXBDaGlsZExvYWRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwQ2hpbGRMb2FkZXIobWFzdGVyUGxheWxpc3RMb2FkZXIsIHBsYXlsaXN0KSB7XG4gICAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXyA9IG1hc3RlclBsYXlsaXN0TG9hZGVyO1xuICAgICAgdGhpcy5jaGlsZFBsYXlsaXN0XyA9IHBsYXlsaXN0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc3Bvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgdGhpcy5zdG9wUmVxdWVzdCgpO1xuICAgICAgdGhpcy5sb2FkZWRQbGF5bGlzdHNfID0ge307XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5taW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8pO1xuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFSZXF1ZXN0Xyk7XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhc1BlbmRpbmdSZXF1ZXN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzUGVuZGluZ1JlcXVlc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0IHx8IHRoaXMubWVkaWFSZXF1ZXN0XztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wUmVxdWVzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BSZXF1ZXN0KCkge1xuICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICB2YXIgb2xkUmVxdWVzdCA9IHRoaXMucmVxdWVzdDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgb2xkUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICBvbGRSZXF1ZXN0LmFib3J0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2lkeFJlcXVlc3RGaW5pc2hlZF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaWR4UmVxdWVzdEZpbmlzaGVkXyhwbGF5bGlzdCwgbWFzdGVyLCBzdGFydGluZ1N0YXRlLCBkb25lRm4pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgcmVxdWVzdCkge1xuICAgICAgICAvLyBkaXNwb3NlZFxuICAgICAgICBpZiAoIV90aGlzMi5yZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIHBlbmRpbmcgcmVxdWVzdCBpcyBjbGVhcmVkXG5cblxuICAgICAgICBfdGhpczIucmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIF90aGlzMi5lcnJvciA9IHtcbiAgICAgICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgICAgICBtZXNzYWdlOiAnREFTSCBwbGF5bGlzdCByZXF1ZXN0IGVycm9yIGF0IFVSTDogJyArIHBsYXlsaXN0LnVyaSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiByZXF1ZXN0LnJlc3BvbnNlLFxuICAgICAgICAgICAgLy8gTUVESUFfRVJSX05FVFdPUktcbiAgICAgICAgICAgIGNvZGU6IDJcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHN0YXJ0aW5nU3RhdGUpIHtcbiAgICAgICAgICAgIF90aGlzMi5zdGF0ZSA9IHN0YXJ0aW5nU3RhdGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2Vycm9yJyk7XG5cbiAgICAgICAgICByZXR1cm4gZG9uZUZuKG1hc3RlciwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShyZXF1ZXN0LnJlc3BvbnNlKTtcbiAgICAgICAgdmFyIHNpZHggPSBtcDRJbnNwZWN0b3IucGFyc2VTaWR4KGJ5dGVzLnN1YmFycmF5KDgpKTtcbiAgICAgICAgcmV0dXJuIGRvbmVGbihtYXN0ZXIsIHNpZHgpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdtZWRpYScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lZGlhKHBsYXlsaXN0KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpczsgLy8gZ2V0dGVyXG5cblxuICAgICAgaWYgKCFwbGF5bGlzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYV87XG4gICAgICB9IC8vIHNldHRlclxuXG5cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnSEFWRV9OT1RISU5HJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzd2l0Y2ggbWVkaWEgcGxheWxpc3QgZnJvbSAnICsgdGhpcy5zdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydGluZ1N0YXRlID0gdGhpcy5zdGF0ZTsgLy8gZmluZCB0aGUgcGxheWxpc3Qgb2JqZWN0IGlmIHRoZSB0YXJnZXQgcGxheWxpc3QgaGFzIGJlZW4gc3BlY2lmaWVkIGJ5IFVSSVxuXG4gICAgICBpZiAodHlwZW9mIHBsYXlsaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIXRoaXMubWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdF0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcGxheWxpc3QgVVJJOiAnICsgcGxheWxpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGxheWxpc3QgPSB0aGlzLm1hc3Rlci5wbGF5bGlzdHNbcGxheWxpc3RdO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWVkaWFDaGFuZ2UgPSAhdGhpcy5tZWRpYV8gfHwgcGxheWxpc3QudXJpICE9PSB0aGlzLm1lZGlhXy51cmk7IC8vIHN3aXRjaCB0byBwcmV2aW91c2x5IGxvYWRlZCBwbGF5bGlzdHMgaW1tZWRpYXRlbHlcblxuICAgICAgaWYgKG1lZGlhQ2hhbmdlICYmIHRoaXMubG9hZGVkUGxheWxpc3RzX1twbGF5bGlzdC51cmldICYmIHRoaXMubG9hZGVkUGxheWxpc3RzX1twbGF5bGlzdC51cmldLmVuZExpc3QpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdIQVZFX01FVEFEQVRBJztcbiAgICAgICAgdGhpcy5tZWRpYV8gPSBwbGF5bGlzdDsgLy8gdHJpZ2dlciBtZWRpYSBjaGFuZ2UgaWYgdGhlIGFjdGl2ZSBtZWRpYSBoYXMgYmVlbiB1cGRhdGVkXG5cbiAgICAgICAgaWYgKG1lZGlhQ2hhbmdlKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYWNoYW5naW5nJyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYWNoYW5nZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBzd2l0Y2hpbmcgdG8gdGhlIGFjdGl2ZSBwbGF5bGlzdCBpcyBhIG5vLW9wXG5cblxuICAgICAgaWYgKCFtZWRpYUNoYW5nZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHN3aXRjaGluZyBmcm9tIGFuIGFscmVhZHkgbG9hZGVkIHBsYXlsaXN0XG5cblxuICAgICAgaWYgKHRoaXMubWVkaWFfKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignbWVkaWFjaGFuZ2luZycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBsYXlsaXN0LnNpZHgpIHtcbiAgICAgICAgLy8gQ29udGludWUgYXN5bmNocm9ub3VzbHkgaWYgdGhlcmUgaXMgbm8gc2lkeFxuICAgICAgICAvLyB3YWl0IG9uZSB0aWNrIHRvIGFsbG93IGhhdmVNYXN0ZXIgdG8gcnVuIGZpcnN0IG9uIGEgY2hpbGQgbG9hZGVyXG4gICAgICAgIHRoaXMubWVkaWFSZXF1ZXN0XyA9IHdpbmRvdyQxLnNldFRpbWVvdXQodGhpcy5oYXZlTWV0YWRhdGEuYmluZCh0aGlzLCB7XG4gICAgICAgICAgc3RhcnRpbmdTdGF0ZTogc3RhcnRpbmdTdGF0ZSxcbiAgICAgICAgICBwbGF5bGlzdDogcGxheWxpc3RcbiAgICAgICAgfSksIDApOyAvLyBleGl0IGVhcmx5IGFuZCBkb24ndCBkbyBzaWR4IHdvcmtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHdlIGhhdmUgc2lkeCBtYXBwaW5nc1xuXG5cbiAgICAgIHZhciBvbGRNYXN0ZXIgPSB2b2lkIDA7XG4gICAgICB2YXIgc2lkeE1hcHBpbmcgPSB2b2lkIDA7IC8vIHNpZHhNYXBwaW5nIGlzIHVzZWQgd2hlbiBwYXJzaW5nIHRoZSBtYXN0ZXJYbWwsIHNvIHN0b3JlXG4gICAgICAvLyBpdCBvbiB0aGUgbWFzdGVyUGxheWxpc3RMb2FkZXJcblxuICAgICAgaWYgKHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfKSB7XG4gICAgICAgIG9sZE1hc3RlciA9IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlcjtcbiAgICAgICAgc2lkeE1hcHBpbmcgPSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5zaWR4TWFwcGluZ187XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbGRNYXN0ZXIgPSB0aGlzLm1hc3RlcjtcbiAgICAgICAgc2lkeE1hcHBpbmcgPSB0aGlzLnNpZHhNYXBwaW5nXztcbiAgICAgIH1cblxuICAgICAgdmFyIHNpZHhLZXkgPSBnZW5lcmF0ZVNpZHhLZXkocGxheWxpc3Quc2lkeCk7XG4gICAgICBzaWR4TWFwcGluZ1tzaWR4S2V5XSA9IHtcbiAgICAgICAgc2lkeEluZm86IHBsYXlsaXN0LnNpZHhcbiAgICAgIH07XG4gICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0U2lkeF8ocGxheWxpc3Quc2lkeCwgcGxheWxpc3QsIHRoaXMuaGxzXy54aHIsIHtcbiAgICAgICAgaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHM6IHRoaXMuaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHNcbiAgICAgIH0sIHRoaXMuc2lkeFJlcXVlc3RGaW5pc2hlZF8ocGxheWxpc3QsIG9sZE1hc3Rlciwgc3RhcnRpbmdTdGF0ZSwgZnVuY3Rpb24gKG5ld01hc3Rlciwgc2lkeCkge1xuICAgICAgICBpZiAoIW5ld01hc3RlciB8fCAhc2lkeCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIHJlcXVlc3Qgc2lkeCcpO1xuICAgICAgICB9IC8vIHVwZGF0ZSBsb2FkZXIncyBzaWR4TWFwcGluZyB3aXRoIHBhcnNlZCBzaWR4IGJveFxuXG5cbiAgICAgICAgc2lkeE1hcHBpbmdbc2lkeEtleV0uc2lkeCA9IHNpZHg7IC8vIGV2ZXJ5dGhpbmcgaXMgcmVhZHkganVzdCBjb250aW51ZSB0byBoYXZlTWV0YWRhdGFcblxuICAgICAgICBfdGhpczMuaGF2ZU1ldGFkYXRhKHtcbiAgICAgICAgICBzdGFydGluZ1N0YXRlOiBzdGFydGluZ1N0YXRlLFxuICAgICAgICAgIHBsYXlsaXN0OiBuZXdNYXN0ZXIucGxheWxpc3RzW3BsYXlsaXN0LnVyaV1cbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGF2ZU1ldGFkYXRhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGF2ZU1ldGFkYXRhKF9yZWYpIHtcbiAgICAgIHZhciBzdGFydGluZ1N0YXRlID0gX3JlZi5zdGFydGluZ1N0YXRlLFxuICAgICAgICAgIHBsYXlsaXN0ID0gX3JlZi5wbGF5bGlzdDtcbiAgICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgICB0aGlzLmxvYWRlZFBsYXlsaXN0c19bcGxheWxpc3QudXJpXSA9IHBsYXlsaXN0O1xuICAgICAgdGhpcy5tZWRpYVJlcXVlc3RfID0gbnVsbDsgLy8gVGhpcyB3aWxsIHRyaWdnZXIgbG9hZGVkcGxheWxpc3RcblxuICAgICAgdGhpcy5yZWZyZXNoTWVkaWFfKHBsYXlsaXN0LnVyaSk7IC8vIGZpcmUgbG9hZGVkbWV0YWRhdGEgdGhlIGZpcnN0IHRpbWUgYSBtZWRpYSBwbGF5bGlzdCBpcyBsb2FkZWRcbiAgICAgIC8vIHRvIHJlc29sdmUgc2V0dXAgb2YgbWVkaWEgZ3JvdXBzXG5cbiAgICAgIGlmIChzdGFydGluZ1N0YXRlID09PSAnSEFWRV9NQVNURVInKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignbG9hZGVkbWV0YWRhdGEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRyaWdnZXIgbWVkaWEgY2hhbmdlIGlmIHRoZSBhY3RpdmUgbWVkaWEgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICB0aGlzLnRyaWdnZXIoJ21lZGlhY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMuc3RvcFJlcXVlc3QoKTtcbiAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLm1lZGlhVXBkYXRlVGltZW91dCk7XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5taW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8pO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0hBVkVfTk9USElORycpIHtcbiAgICAgICAgLy8gSWYgd2UgcGF1c2UgdGhlIGxvYWRlciBiZWZvcmUgYW55IGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkLCBpdHMgYXMgaWYgd2UgbmV2ZXJcbiAgICAgICAgLy8gc3RhcnRlZCwgc28gcmVzZXQgdG8gYW4gdW5zdGFydGVkIHN0YXRlLlxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0KTtcbiAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLm1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0Xyk7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhKCk7XG5cbiAgICAgIGlmIChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgICAgIHZhciBkZWxheSA9IG1lZGlhID8gbWVkaWEudGFyZ2V0RHVyYXRpb24gLyAyICogMTAwMCA6IDUgKiAxMDAwO1xuICAgICAgICB0aGlzLm1lZGlhVXBkYXRlVGltZW91dCA9IHdpbmRvdyQxLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczQubG9hZCgpO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gYmVjYXVzZSB0aGUgcGxheWxpc3RzIGFyZSBpbnRlcm5hbCB0byB0aGUgbWFuaWZlc3QsIGxvYWQgc2hvdWxkIGVpdGhlciBsb2FkIHRoZVxuICAgICAgLy8gbWFpbiBtYW5pZmVzdCwgb3IgZG8gbm90aGluZyBidXQgdHJpZ2dlciBhbiBldmVudFxuXG5cbiAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZHBsYXlsaXN0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgbWFzdGVyIHhtbCBzdHJpbmcgYW5kIHVwZGF0ZXMgcGxheWxpc3QgdXJpIHJlZmVyZW5jZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKiAgICAgICAgIFRoZSBwYXJzZWQgbXBkIG1hbmlmZXN0IG9iamVjdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwYXJzZU1hc3RlclhtbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlTWFzdGVyWG1sKCkge1xuICAgICAgdmFyIG1hc3RlciA9IHBhcnNlKHRoaXMubWFzdGVyWG1sXywge1xuICAgICAgICBtYW5pZmVzdFVyaTogdGhpcy5zcmNVcmwsXG4gICAgICAgIGNsaWVudE9mZnNldDogdGhpcy5jbGllbnRPZmZzZXRfLFxuICAgICAgICBzaWR4TWFwcGluZzogdGhpcy5zaWR4TWFwcGluZ19cbiAgICAgIH0pO1xuICAgICAgbWFzdGVyLnVyaSA9IHRoaXMuc3JjVXJsOyAvLyBTZXQgdXAgcGhvbnkgVVJJcyBmb3IgdGhlIHBsYXlsaXN0cyBzaW5jZSB3ZSB3b24ndCBoYXZlIGV4dGVybmFsIFVSSXMgZm9yIERBU0hcbiAgICAgIC8vIGJ1dCByZWZlcmVuY2UgcGxheWxpc3RzIGJ5IHRoZWlyIFVSSSB0aHJvdWdob3V0IHRoZSBwcm9qZWN0XG4gICAgICAvLyBUT0RPOiBTaG91bGQgd2UgY3JlYXRlIHRoZSBkdW1teSB1cmlzIGluIG1wZC1wYXJzZXIgYXMgd2VsbCAobGVhbmluZyB0b3dhcmRzIHllcykuXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzdGVyLnBsYXlsaXN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGhvbnlVcmkgPSAncGxhY2Vob2xkZXItdXJpLScgKyBpO1xuICAgICAgICBtYXN0ZXIucGxheWxpc3RzW2ldLnVyaSA9IHBob255VXJpOyAvLyBzZXQgdXAgYnkgVVJJIHJlZmVyZW5jZXNcblxuICAgICAgICBtYXN0ZXIucGxheWxpc3RzW3Bob255VXJpXSA9IG1hc3Rlci5wbGF5bGlzdHNbaV07XG4gICAgICB9IC8vIHNldCB1cCBwaG9ueSBVUklzIGZvciB0aGUgbWVkaWEgZ3JvdXAgcGxheWxpc3RzIHNpbmNlIHdlIHdvbid0IGhhdmUgZXh0ZXJuYWxcbiAgICAgIC8vIFVSSXMgZm9yIERBU0ggYnV0IHJlZmVyZW5jZSBwbGF5bGlzdHMgYnkgdGhlaXIgVVJJIHRocm91Z2hvdXQgdGhlIHByb2plY3RcblxuXG4gICAgICBmb3JFYWNoTWVkaWFHcm91cChtYXN0ZXIsIGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCBtZWRpYVR5cGUsIGdyb3VwS2V5LCBsYWJlbEtleSkge1xuICAgICAgICBpZiAocHJvcGVydGllcy5wbGF5bGlzdHMgJiYgcHJvcGVydGllcy5wbGF5bGlzdHMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIF9waG9ueVVyaSA9ICdwbGFjZWhvbGRlci11cmktJyArIG1lZGlhVHlwZSArICctJyArIGdyb3VwS2V5ICsgJy0nICsgbGFiZWxLZXk7XG5cbiAgICAgICAgICBwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXS51cmkgPSBfcGhvbnlVcmk7IC8vIHNldHVwIFVSSSByZWZlcmVuY2VzXG5cbiAgICAgICAgICBtYXN0ZXIucGxheWxpc3RzW19waG9ueVVyaV0gPSBwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzZXR1cE1lZGlhUGxheWxpc3RzKG1hc3Rlcik7XG4gICAgICByZXNvbHZlTWVkaWFHcm91cFVyaXMobWFzdGVyKTtcbiAgICAgIHJldHVybiBtYXN0ZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlOyAvLyBXZSBkb24ndCBuZWVkIHRvIHJlcXVlc3QgdGhlIG1hc3RlciBtYW5pZmVzdCBhZ2FpblxuICAgICAgLy8gQ2FsbCB0aGlzIGFzeW5jaHJvbm91c2x5IHRvIG1hdGNoIHRoZSB4aHIgcmVxdWVzdCBiZWhhdmlvciBiZWxvd1xuXG4gICAgICBpZiAodGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8pIHtcbiAgICAgICAgdGhpcy5tZWRpYVJlcXVlc3RfID0gd2luZG93JDEuc2V0VGltZW91dCh0aGlzLmhhdmVNYXN0ZXJfLmJpbmQodGhpcyksIDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHJlcXVlc3QgdGhlIHNwZWNpZmllZCBVUkxcblxuXG4gICAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLmhsc18ueGhyKHtcbiAgICAgICAgdXJpOiB0aGlzLnNyY1VybCxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLndpdGhDcmVkZW50aWFsc1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCByZXEpIHtcbiAgICAgICAgLy8gZGlzcG9zZWRcbiAgICAgICAgaWYgKCFfdGhpczUucmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBjbGVhciB0aGUgbG9hZGVyJ3MgcmVxdWVzdCByZWZlcmVuY2VcblxuXG4gICAgICAgIF90aGlzNS5yZXF1ZXN0ID0gbnVsbDtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBfdGhpczUuZXJyb3IgPSB7XG4gICAgICAgICAgICBzdGF0dXM6IHJlcS5zdGF0dXMsXG4gICAgICAgICAgICBtZXNzYWdlOiAnREFTSCBwbGF5bGlzdCByZXF1ZXN0IGVycm9yIGF0IFVSTDogJyArIF90aGlzNS5zcmNVcmwsXG4gICAgICAgICAgICByZXNwb25zZVRleHQ6IHJlcS5yZXNwb25zZVRleHQsXG4gICAgICAgICAgICAvLyBNRURJQV9FUlJfTkVUV09SS1xuICAgICAgICAgICAgY29kZTogMlxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoX3RoaXM1LnN0YXRlID09PSAnSEFWRV9OT1RISU5HJykge1xuICAgICAgICAgICAgX3RoaXM1LnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3RoaXM1LnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczUubWFzdGVyWG1sXyA9IHJlcS5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgaWYgKHJlcS5yZXNwb25zZUhlYWRlcnMgJiYgcmVxLnJlc3BvbnNlSGVhZGVycy5kYXRlKSB7XG4gICAgICAgICAgX3RoaXM1Lm1hc3RlckxvYWRlZF8gPSBEYXRlLnBhcnNlKHJlcS5yZXNwb25zZUhlYWRlcnMuZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM1Lm1hc3RlckxvYWRlZF8gPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM1LnNyY1VybCA9IHJlc29sdmVNYW5pZmVzdFJlZGlyZWN0KF90aGlzNS5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cywgX3RoaXM1LnNyY1VybCwgcmVxKTtcblxuICAgICAgICBfdGhpczUuc3luY0NsaWVudFNlcnZlckNsb2NrXyhfdGhpczUub25DbGllbnRTZXJ2ZXJDbG9ja1N5bmNfLmJpbmQoX3RoaXM1KSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBtYXN0ZXIgeG1sIGZvciBVVENUaW1pbmcgbm9kZSB0byBzeW5jIHRoZSBjbGllbnQgY2xvY2sgdG8gdGhlIHNlcnZlclxuICAgICAqIGNsb2NrLiBJZiB0aGUgVVRDVGltaW5nIG5vZGUgcmVxdWlyZXMgYSBIRUFEIG9yIEdFVCByZXF1ZXN0LCB0aGF0IHJlcXVlc3QgaXMgbWFkZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRvbmVcbiAgICAgKiAgICAgICAgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIGNsb2NrIHN5bmMgaGFzIGNvbXBsZXRlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzeW5jQ2xpZW50U2VydmVyQ2xvY2tfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY0NsaWVudFNlcnZlckNsb2NrXyhkb25lKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIHV0Y1RpbWluZyA9IHBhcnNlVVRDVGltaW5nKHRoaXMubWFzdGVyWG1sXyk7IC8vIE5vIFVUQ1RpbWluZyBlbGVtZW50IGZvdW5kIGluIHRoZSBtcGQuIFVzZSBEYXRlIGhlYWRlciBmcm9tIG1wZCByZXF1ZXN0IGFzIHRoZVxuICAgICAgLy8gc2VydmVyIGNsb2NrXG5cbiAgICAgIGlmICh1dGNUaW1pbmcgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jbGllbnRPZmZzZXRfID0gdGhpcy5tYXN0ZXJMb2FkZWRfIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0Y1RpbWluZy5tZXRob2QgPT09ICdESVJFQ1QnKSB7XG4gICAgICAgIHRoaXMuY2xpZW50T2Zmc2V0XyA9IHV0Y1RpbWluZy52YWx1ZSAtIERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVxdWVzdCA9IHRoaXMuaGxzXy54aHIoe1xuICAgICAgICB1cmk6IHJlc29sdmVVcmwodGhpcy5zcmNVcmwsIHV0Y1RpbWluZy52YWx1ZSksXG4gICAgICAgIG1ldGhvZDogdXRjVGltaW5nLm1ldGhvZCxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLndpdGhDcmVkZW50aWFsc1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCByZXEpIHtcbiAgICAgICAgLy8gZGlzcG9zZWRcbiAgICAgICAgaWYgKCFfdGhpczYucmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIC8vIHN5bmMgcmVxdWVzdCBmYWlsZWQsIGZhbGwgYmFjayB0byB1c2luZyBkYXRlIGhlYWRlciBmcm9tIG1wZFxuICAgICAgICAgIC8vIFRPRE86IGxvZyB3YXJuaW5nXG4gICAgICAgICAgX3RoaXM2LmNsaWVudE9mZnNldF8gPSBfdGhpczYubWFzdGVyTG9hZGVkXyAtIERhdGUubm93KCk7XG4gICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXJ2ZXJUaW1lID0gdm9pZCAwO1xuXG4gICAgICAgIGlmICh1dGNUaW1pbmcubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICAgICAgICBpZiAoIXJlcS5yZXNwb25zZUhlYWRlcnMgfHwgIXJlcS5yZXNwb25zZUhlYWRlcnMuZGF0ZSkge1xuICAgICAgICAgICAgLy8gZXhwZWN0ZWQgZGF0ZSBoZWFkZXIgbm90IHByZXNldCwgZmFsbCBiYWNrIHRvIHVzaW5nIGRhdGUgaGVhZGVyIGZyb20gbXBkXG4gICAgICAgICAgICAvLyBUT0RPOiBsb2cgd2FybmluZ1xuICAgICAgICAgICAgc2VydmVyVGltZSA9IF90aGlzNi5tYXN0ZXJMb2FkZWRfO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXJ2ZXJUaW1lID0gRGF0ZS5wYXJzZShyZXEucmVzcG9uc2VIZWFkZXJzLmRhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXJ2ZXJUaW1lID0gRGF0ZS5wYXJzZShyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNi5jbGllbnRPZmZzZXRfID0gc2VydmVyVGltZSAtIERhdGUubm93KCk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhdmVNYXN0ZXJfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGF2ZU1hc3Rlcl8oKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ0hBVkVfTUFTVEVSJzsgLy8gY2xlYXIgbWVkaWEgcmVxdWVzdFxuXG4gICAgICB0aGlzLm1lZGlhUmVxdWVzdF8gPSBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfKSB7XG4gICAgICAgIHRoaXMubWFzdGVyID0gdGhpcy5wYXJzZU1hc3RlclhtbCgpOyAvLyBXZSBoYXZlIHRoZSBtYXN0ZXIgcGxheWxpc3QgYXQgdGhpcyBwb2ludCwgc29cbiAgICAgICAgLy8gdHJpZ2dlciB0aGlzIHRvIGFsbG93IE1hc3RlclBsYXlsaXN0Q29udHJvbGxlclxuICAgICAgICAvLyB0byBtYWtlIGFuIGluaXRpYWwgcGxheWxpc3Qgc2VsZWN0aW9uXG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5tZWRpYV8pIHtcbiAgICAgICAgLy8gbm8gbWVkaWEgcGxheWxpc3Qgd2FzIHNwZWNpZmljYWxseSBzZWxlY3RlZCBzbyBzZWxlY3RcbiAgICAgICAgLy8gdGhlIG9uZSB0aGUgY2hpbGQgcGxheWxpc3QgbG9hZGVyIHdhcyBjcmVhdGVkIHdpdGhcbiAgICAgICAgdGhpcy5tZWRpYSh0aGlzLmNoaWxkUGxheWxpc3RfKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3IgYWZ0ZXIgY2xpZW50L3NlcnZlciBjbG9jayBzeW5jaHJvbml6YXRpb24gaGFzIGhhcHBlbmVkLiBTZXRzIHVwXG4gICAgICogeG1sIHJlZnJlc2ggdGltZXIgaWYgc3BlY2lmaWNlZCBieSB0aGUgbWFuaWZlc3QuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uQ2xpZW50U2VydmVyQ2xvY2tTeW5jXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpZW50U2VydmVyQ2xvY2tTeW5jXygpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB0aGlzLmhhdmVNYXN0ZXJfKCk7XG5cbiAgICAgIGlmICghdGhpcy5oYXNQZW5kaW5nUmVxdWVzdCgpICYmICF0aGlzLm1lZGlhXykge1xuICAgICAgICB0aGlzLm1lZGlhKHRoaXMubWFzdGVyLnBsYXlsaXN0c1swXSk7XG4gICAgICB9IC8vIFRPRE86IG1pbmltdW1VcGRhdGVQZXJpb2QgY2FuIGhhdmUgYSB2YWx1ZSBvZiAwLiBDdXJyZW50bHkgdGhlIG1hbmlmZXN0IHdpbGwgbm90XG4gICAgICAvLyBiZSByZWZyZXNoZWQgd2hlbiB0aGlzIGlzIHRoZSBjYXNlLiBUaGUgaW50ZXItb3AgZ3VpZGUgc2F5cyB0aGF0IHdoZW4gdGhlXG4gICAgICAvLyBtaW5pbXVtVXBkYXRlUGVyaW9kIGlzIDAsIHRoZSBtYW5pZmVzdCBzaG91bGQgb3V0bGluZSBhbGwgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgLy8gc2VnbWVudHMsIGJ1dCBmdXR1cmUgc2VnbWVudHMgbWF5IHJlcXVpcmUgYW4gdXBkYXRlLiBJIHRoaW5rIGEgZ29vZCBzb2x1dGlvblxuICAgICAgLy8gd291bGQgYmUgdG8gdXBkYXRlIHRoZSBtYW5pZmVzdCBhdCB0aGUgc2FtZSByYXRlIHRoYXQgdGhlIG1lZGlhIHBsYXlsaXN0c1xuICAgICAgLy8gYXJlIFwicmVmcmVzaGVkXCIsIGkuZS4gZXZlcnkgdGFyZ2V0RHVyYXRpb24uXG5cblxuICAgICAgaWYgKHRoaXMubWFzdGVyICYmIHRoaXMubWFzdGVyLm1pbmltdW1VcGRhdGVQZXJpb2QpIHtcbiAgICAgICAgdGhpcy5taW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8gPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczcudHJpZ2dlcignbWluaW11bVVwZGF0ZVBlcmlvZCcpO1xuICAgICAgICB9LCB0aGlzLm1hc3Rlci5taW5pbXVtVXBkYXRlUGVyaW9kKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgcmVxdWVzdCB0byByZWZyZXNoIHRoZSBtYXN0ZXIgeG1sIGFuZCB1cGRhdGVzIHRoZSBwYXJzZWQgbWFzdGVyIG1hbmlmZXN0XG4gICAgICogVE9ETzogRG9lcyB0aGUgY2xpZW50IG9mZnNldCBuZWVkIHRvIGJlIHJlY2FsY3VsYXRlZCB3aGVuIHRoZSB4bWwgaXMgcmVmcmVzaGVkP1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZWZyZXNoWG1sXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2hYbWxfKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7IC8vIFRoZSBzcmNVcmwgaGVyZSAqbWF5KiBuZWVkIHRvIHBhc3MgdGhyb3VnaCBoYW5kbGVNYW5pZmVzdHNSZWRpcmVjdHMgd2hlblxuICAgICAgLy8gc2lkeCBpcyBpbXBsZW1lbnRlZFxuXG5cbiAgICAgIHRoaXMucmVxdWVzdCA9IHRoaXMuaGxzXy54aHIoe1xuICAgICAgICB1cmk6IHRoaXMuc3JjVXJsLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlcSkge1xuICAgICAgICAvLyBkaXNwb3NlZFxuICAgICAgICBpZiAoIV90aGlzOC5yZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGNsZWFyIHRoZSBsb2FkZXIncyByZXF1ZXN0IHJlZmVyZW5jZVxuXG5cbiAgICAgICAgX3RoaXM4LnJlcXVlc3QgPSBudWxsO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIF90aGlzOC5lcnJvciA9IHtcbiAgICAgICAgICAgIHN0YXR1czogcmVxLnN0YXR1cyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdEQVNIIHBsYXlsaXN0IHJlcXVlc3QgZXJyb3IgYXQgVVJMOiAnICsgX3RoaXM4LnNyY1VybCxcbiAgICAgICAgICAgIHJlc3BvbnNlVGV4dDogcmVxLnJlc3BvbnNlVGV4dCxcbiAgICAgICAgICAgIC8vIE1FRElBX0VSUl9ORVRXT1JLXG4gICAgICAgICAgICBjb2RlOiAyXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChfdGhpczguc3RhdGUgPT09ICdIQVZFX05PVEhJTkcnKSB7XG4gICAgICAgICAgICBfdGhpczguc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfdGhpczgudHJpZ2dlcignZXJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzOC5tYXN0ZXJYbWxfID0gcmVxLnJlc3BvbnNlVGV4dDsgLy8gVGhpcyB3aWxsIGZpbHRlciBvdXQgdXBkYXRlZCBzaWR4IGluZm8gZnJvbSB0aGUgbWFwcGluZ1xuXG4gICAgICAgIF90aGlzOC5zaWR4TWFwcGluZ18gPSBmaWx0ZXJDaGFuZ2VkU2lkeE1hcHBpbmdzKF90aGlzOC5tYXN0ZXJYbWxfLCBfdGhpczguc3JjVXJsLCBfdGhpczguY2xpZW50T2Zmc2V0XywgX3RoaXM4LnNpZHhNYXBwaW5nXyk7XG5cbiAgICAgICAgdmFyIG1hc3RlciA9IF90aGlzOC5wYXJzZU1hc3RlclhtbCgpO1xuXG4gICAgICAgIHZhciB1cGRhdGVkTWFzdGVyID0gdXBkYXRlTWFzdGVyJDEoX3RoaXM4Lm1hc3RlciwgbWFzdGVyKTtcblxuICAgICAgICB2YXIgY3VycmVudFNpZHhJbmZvID0gX3RoaXM4Lm1lZGlhKCkuc2lkeDtcblxuICAgICAgICBpZiAodXBkYXRlZE1hc3Rlcikge1xuICAgICAgICAgIGlmIChjdXJyZW50U2lkeEluZm8pIHtcbiAgICAgICAgICAgIHZhciBzaWR4S2V5ID0gZ2VuZXJhdGVTaWR4S2V5KGN1cnJlbnRTaWR4SW5mbyk7IC8vIHRoZSBzaWR4IHdhcyB1cGRhdGVkLCBzbyB0aGUgcHJldmlvdXMgbWFwcGluZyB3YXMgcmVtb3ZlZFxuXG4gICAgICAgICAgICBpZiAoIV90aGlzOC5zaWR4TWFwcGluZ19bc2lkeEtleV0pIHtcbiAgICAgICAgICAgICAgdmFyIHBsYXlsaXN0ID0gX3RoaXM4Lm1lZGlhKCk7XG5cbiAgICAgICAgICAgICAgX3RoaXM4LnJlcXVlc3QgPSByZXF1ZXN0U2lkeF8ocGxheWxpc3Quc2lkeCwgcGxheWxpc3QsIF90aGlzOC5obHNfLnhociwge1xuICAgICAgICAgICAgICAgIGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzOiBfdGhpczguaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHNcbiAgICAgICAgICAgICAgfSwgX3RoaXM4LnNpZHhSZXF1ZXN0RmluaXNoZWRfKHBsYXlsaXN0LCBtYXN0ZXIsIF90aGlzOC5zdGF0ZSwgZnVuY3Rpb24gKG5ld01hc3Rlciwgc2lkeCkge1xuICAgICAgICAgICAgICAgIGlmICghbmV3TWFzdGVyIHx8ICFzaWR4KSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byByZXF1ZXN0IHNpZHggb24gbWluaW11bVVwZGF0ZVBlcmlvZCcpO1xuICAgICAgICAgICAgICAgIH0gLy8gdXBkYXRlIGxvYWRlcidzIHNpZHhNYXBwaW5nIHdpdGggcGFyc2VkIHNpZHggYm94XG5cblxuICAgICAgICAgICAgICAgIF90aGlzOC5zaWR4TWFwcGluZ19bc2lkeEtleV0uc2lkeCA9IHNpZHg7XG4gICAgICAgICAgICAgICAgX3RoaXM4Lm1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0XyA9IHdpbmRvdyQxLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXM4LnRyaWdnZXIoJ21pbmltdW1VcGRhdGVQZXJpb2QnKTtcbiAgICAgICAgICAgICAgICB9LCBfdGhpczgubWFzdGVyLm1pbmltdW1VcGRhdGVQZXJpb2QpOyAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRvIHJlbG9hZCB0aGUgY3VycmVudCBwbGF5bGlzdD9cblxuICAgICAgICAgICAgICAgIF90aGlzOC5yZWZyZXNoTWVkaWFfKF90aGlzOC5tZWRpYSgpLnVyaSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM4Lm1hc3RlciA9IHVwZGF0ZWRNYXN0ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM4Lm1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0XyA9IHdpbmRvdyQxLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzOC50cmlnZ2VyKCdtaW5pbXVtVXBkYXRlUGVyaW9kJyk7XG4gICAgICAgIH0sIF90aGlzOC5tYXN0ZXIubWluaW11bVVwZGF0ZVBlcmlvZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVmcmVzaGVzIHRoZSBtZWRpYSBwbGF5bGlzdCBieSByZS1wYXJzaW5nIHRoZSBtYXN0ZXIgeG1sIGFuZCB1cGRhdGluZyBwbGF5bGlzdFxuICAgICAqIHJlZmVyZW5jZXMuIElmIHRoaXMgaXMgYW4gYWx0ZXJuYXRlIGxvYWRlciwgdGhlIHVwZGF0ZWQgcGFyc2VkIG1hbmlmZXN0IGlzIHJldHJpZXZlZFxuICAgICAqIGZyb20gdGhlIG1hc3RlciBsb2FkZXIuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlZnJlc2hNZWRpYV8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoTWVkaWFfKG1lZGlhVXJpKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgaWYgKCFtZWRpYVVyaSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlZnJlc2hNZWRpYV8gbXVzdCB0YWtlIGEgbWVkaWEgdXJpJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGRNYXN0ZXIgPSB2b2lkIDA7XG4gICAgICB2YXIgbmV3TWFzdGVyID0gdm9pZCAwO1xuXG4gICAgICBpZiAodGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8pIHtcbiAgICAgICAgb2xkTWFzdGVyID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWFzdGVyO1xuICAgICAgICBuZXdNYXN0ZXIgPSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5wYXJzZU1hc3RlclhtbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2xkTWFzdGVyID0gdGhpcy5tYXN0ZXI7XG4gICAgICAgIG5ld01hc3RlciA9IHRoaXMucGFyc2VNYXN0ZXJYbWwoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHVwZGF0ZWRNYXN0ZXIgPSB1cGRhdGVNYXN0ZXIkMShvbGRNYXN0ZXIsIG5ld01hc3Rlcik7XG5cbiAgICAgIGlmICh1cGRhdGVkTWFzdGVyKSB7XG4gICAgICAgIGlmICh0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXykge1xuICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlciA9IHVwZGF0ZWRNYXN0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXN0ZXIgPSB1cGRhdGVkTWFzdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tZWRpYV8gPSB1cGRhdGVkTWFzdGVyLnBsYXlsaXN0c1ttZWRpYVVyaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1lZGlhXyA9IG5ld01hc3Rlci5wbGF5bGlzdHNbbWVkaWFVcmldO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3BsYXlsaXN0dW5jaGFuZ2VkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5tZWRpYSgpLmVuZExpc3QpIHtcbiAgICAgICAgdGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczkudHJpZ2dlcignbWVkaWF1cGRhdGV0aW1lb3V0Jyk7XG4gICAgICAgIH0sIHJlZnJlc2hEZWxheSh0aGlzLm1lZGlhKCksICEhdXBkYXRlZE1hc3RlcikpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZHBsYXlsaXN0Jyk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEYXNoUGxheWxpc3RMb2FkZXI7XG59KEV2ZW50VGFyZ2V0JDEkMSk7XG5cbnZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIoc291cmNlKSB7XG4gIGlmICh2aWRlb2pzJDEubG9nLmRlYnVnKSB7XG4gICAgcmV0dXJuIHZpZGVvanMkMS5sb2cuZGVidWcuYmluZCh2aWRlb2pzJDEsICdWSFM6Jywgc291cmNlICsgJyA+Jyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge307XG59O1xuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogQGZpbGUgc291cmNlLXVwZGF0ZXIuanNcbiAqL1xuXG4vKipcbiAqIEEgcXVldWUgb2YgY2FsbGJhY2tzIHRvIGJlIHNlcmlhbGl6ZWQgYW5kIGFwcGxpZWQgd2hlbiBhXG4gKiBNZWRpYVNvdXJjZSBhbmQgaXRzIGFzc29jaWF0ZWQgU291cmNlQnVmZmVycyBhcmUgbm90IGluIHRoZVxuICogdXBkYXRpbmcgc3RhdGUuIEl0IGlzIHVzZWQgYnkgdGhlIHNlZ21lbnQgbG9hZGVyIHRvIHVwZGF0ZSB0aGVcbiAqIHVuZGVybHlpbmcgU291cmNlQnVmZmVycyB3aGVuIG5ldyBkYXRhIGlzIGxvYWRlZCwgZm9yIGluc3RhbmNlLlxuICpcbiAqIEBjbGFzcyBTb3VyY2VVcGRhdGVyXG4gKiBAcGFyYW0ge01lZGlhU291cmNlfSBtZWRpYVNvdXJjZSB0aGUgTWVkaWFTb3VyY2UgdG8gY3JlYXRlIHRoZVxuICogU291cmNlQnVmZmVyIGZyb21cbiAqIEBwYXJhbSB7U3RyaW5nfSBtaW1lVHlwZSB0aGUgZGVzaXJlZCBNSU1FIHR5cGUgb2YgdGhlIHVuZGVybHlpbmdcbiAqIFNvdXJjZUJ1ZmZlclxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZUJ1ZmZlckVtaXR0ZXIgYW4gZXZlbnQgZW1pdHRlciB0aGF0IGZpcmVzIHdoZW4gYSBzb3VyY2UgYnVmZmVyIGlzXG4gKiBhZGRlZCB0byB0aGUgbWVkaWEgc291cmNlXG4gKi9cblxuXG52YXIgU291cmNlVXBkYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU291cmNlVXBkYXRlcihtZWRpYVNvdXJjZSwgbWltZVR5cGUsIHR5cGUsIHNvdXJjZUJ1ZmZlckVtaXR0ZXIpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb3VyY2VVcGRhdGVyKTtcbiAgICB0aGlzLmNhbGxiYWNrc18gPSBbXTtcbiAgICB0aGlzLnBlbmRpbmdDYWxsYmFja18gPSBudWxsO1xuICAgIHRoaXMudGltZXN0YW1wT2Zmc2V0XyA9IDA7XG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG1lZGlhU291cmNlO1xuICAgIHRoaXMucHJvY2Vzc2VkQXBwZW5kXyA9IGZhbHNlO1xuICAgIHRoaXMudHlwZV8gPSB0eXBlO1xuICAgIHRoaXMubWltZVR5cGVfID0gbWltZVR5cGU7XG4gICAgdGhpcy5sb2dnZXJfID0gbG9nZ2VyKCdTb3VyY2VVcGRhdGVyWycgKyB0eXBlICsgJ11bJyArIG1pbWVUeXBlICsgJ10nKTtcblxuICAgIGlmIChtZWRpYVNvdXJjZS5yZWFkeVN0YXRlID09PSAnY2xvc2VkJykge1xuICAgICAgbWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMuY3JlYXRlU291cmNlQnVmZmVyXy5iaW5kKHRoaXMsIG1pbWVUeXBlLCBzb3VyY2VCdWZmZXJFbWl0dGVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3JlYXRlU291cmNlQnVmZmVyXyhtaW1lVHlwZSwgc291cmNlQnVmZmVyRW1pdHRlcik7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU291cmNlVXBkYXRlciwgW3tcbiAgICBrZXk6ICdjcmVhdGVTb3VyY2VCdWZmZXJfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU291cmNlQnVmZmVyXyhtaW1lVHlwZSwgc291cmNlQnVmZmVyRW1pdHRlcikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJfID0gdGhpcy5tZWRpYVNvdXJjZS5hZGRTb3VyY2VCdWZmZXIobWltZVR5cGUpO1xuICAgICAgdGhpcy5sb2dnZXJfKCdjcmVhdGVkIFNvdXJjZUJ1ZmZlcicpO1xuXG4gICAgICBpZiAoc291cmNlQnVmZmVyRW1pdHRlcikge1xuICAgICAgICBzb3VyY2VCdWZmZXJFbWl0dGVyLnRyaWdnZXIoJ3NvdXJjZWJ1ZmZlcmFkZGVkJyk7XG5cbiAgICAgICAgaWYgKHRoaXMubWVkaWFTb3VyY2Uuc291cmNlQnVmZmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgLy8gVGhlcmUncyBhbm90aGVyIHNvdXJjZSBidWZmZXIgd2UgbXVzdCB3YWl0IGZvciBiZWZvcmUgd2UgY2FuIHN0YXJ0IHVwZGF0aW5nXG4gICAgICAgICAgLy8gb3VyIG93biAob3IgZWxzZSB3ZSBjYW4gZ2V0IGludG8gYSBiYWQgc3RhdGUsIGkuZS4sIGFwcGVuZGluZyB2aWRlby9hdWRpbyBkYXRhXG4gICAgICAgICAgLy8gYmVmb3JlIHRoZSBvdGhlciB2aWRlby9hdWRpbyBzb3VyY2UgYnVmZmVyIGlzIGF2YWlsYWJsZSBhbmQgbGVhZGluZyB0byBhIHZpZGVvXG4gICAgICAgICAgLy8gb3IgYXVkaW8gb25seSBidWZmZXIpLlxuICAgICAgICAgIHNvdXJjZUJ1ZmZlckVtaXR0ZXIub24oJ3NvdXJjZWJ1ZmZlcmFkZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnRfKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhcnRfKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RhcnRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRfKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3RhcnRlZF8gPSB0cnVlOyAvLyBydW4gY29tcGxldGlvbiBoYW5kbGVycyBhbmQgcHJvY2VzcyBjYWxsYmFja3MgYXMgdXBkYXRlZW5kXG4gICAgICAvLyBldmVudHMgZmlyZVxuXG4gICAgICB0aGlzLm9uVXBkYXRlZW5kQ2FsbGJhY2tfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGVuZGluZ0NhbGxiYWNrID0gX3RoaXMyLnBlbmRpbmdDYWxsYmFja187XG4gICAgICAgIF90aGlzMi5wZW5kaW5nQ2FsbGJhY2tfID0gbnVsbDtcbiAgICAgICAgX3RoaXMyLnNvdXJjZUJ1ZmZlcl8ucmVtb3ZpbmcgPSBmYWxzZTtcblxuICAgICAgICBfdGhpczIubG9nZ2VyXygnYnVmZmVyZWQgWycgKyBwcmludGFibGVSYW5nZShfdGhpczIuYnVmZmVyZWQoKSkgKyAnXScpO1xuXG4gICAgICAgIGlmIChwZW5kaW5nQ2FsbGJhY2spIHtcbiAgICAgICAgICBwZW5kaW5nQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5ydW5DYWxsYmFja18oKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc291cmNlQnVmZmVyXy5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCB0aGlzLm9uVXBkYXRlZW5kQ2FsbGJhY2tfKTtcbiAgICAgIHRoaXMucnVuQ2FsbGJhY2tfKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFib3J0cyB0aGUgY3VycmVudCBzZWdtZW50IGFuZCByZXNldHMgdGhlIHNlZ21lbnQgcGFyc2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gZG9uZVxuICAgICAqIEBzZWUgaHR0cDovL3czYy5naXRodWIuaW8vbWVkaWEtc291cmNlLyN3aWRsLVNvdXJjZUJ1ZmZlci1hYm9ydC12b2lkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Fib3J0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWJvcnQoZG9uZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnByb2Nlc3NlZEFwcGVuZF8pIHtcbiAgICAgICAgdGhpcy5xdWV1ZUNhbGxiYWNrXyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnNvdXJjZUJ1ZmZlcl8uYWJvcnQoKTtcbiAgICAgICAgfSwgZG9uZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFF1ZXVlIGFuIHVwZGF0ZSB0byBhcHBlbmQgYW4gQXJyYXlCdWZmZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBieXRlc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRvbmUgdGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBkb25lXG4gICAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1zb3VyY2UvI3dpZGwtU291cmNlQnVmZmVyLWFwcGVuZEJ1ZmZlci12b2lkLUFycmF5QnVmZmVyLWRhdGFcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwZW5kQnVmZmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kQnVmZmVyKGNvbmZpZywgZG9uZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHRoaXMucHJvY2Vzc2VkQXBwZW5kXyA9IHRydWU7XG4gICAgICB0aGlzLnF1ZXVlQ2FsbGJhY2tfKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbmZpZy52aWRlb1NlZ21lbnRUaW1pbmdJbmZvQ2FsbGJhY2spIHtcbiAgICAgICAgICBfdGhpczQuc291cmNlQnVmZmVyXy5hZGRFdmVudExpc3RlbmVyKCd2aWRlb1NlZ21lbnRUaW1pbmdJbmZvJywgY29uZmlnLnZpZGVvU2VnbWVudFRpbWluZ0luZm9DYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczQuc291cmNlQnVmZmVyXy5hcHBlbmRCdWZmZXIoY29uZmlnLmJ5dGVzKTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbmZpZy52aWRlb1NlZ21lbnRUaW1pbmdJbmZvQ2FsbGJhY2spIHtcbiAgICAgICAgICBfdGhpczQuc291cmNlQnVmZmVyXy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aWRlb1NlZ21lbnRUaW1pbmdJbmZvJywgY29uZmlnLnZpZGVvU2VnbWVudFRpbWluZ0luZm9DYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoYXQgVGltZVJhbmdlcyBhcmUgYnVmZmVyZWQgaW4gdGhlIG1hbmFnZWQgU291cmNlQnVmZmVyLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1zb3VyY2UvI3dpZGwtU291cmNlQnVmZmVyLWJ1ZmZlcmVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2J1ZmZlcmVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVmZmVyZWQoKSB7XG4gICAgICBpZiAoIXRoaXMuc291cmNlQnVmZmVyXykge1xuICAgICAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc291cmNlQnVmZmVyXy5idWZmZXJlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVldWUgYW4gdXBkYXRlIHRvIHJlbW92ZSBhIHRpbWUgcmFuZ2UgZnJvbSB0aGUgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IHdoZXJlIHRvIHN0YXJ0IHRoZSByZW1vdmFsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZCB3aGVyZSB0byBlbmQgdGhlIHJlbW92YWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZG9uZT1ub29wXSBvcHRpb25hbCBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSByZW1vdmVcbiAgICAgKiBvcGVyYXRpb24gaXMgY29tcGxldGVcbiAgICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL21lZGlhLXNvdXJjZS8jd2lkbC1Tb3VyY2VCdWZmZXItcmVtb3ZlLXZvaWQtZG91YmxlLXN0YXJ0LXVucmVzdHJpY3RlZC1kb3VibGUtZW5kXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIGRvbmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG5vb3A7XG5cbiAgICAgIGlmICh0aGlzLnByb2Nlc3NlZEFwcGVuZF8pIHtcbiAgICAgICAgdGhpcy5xdWV1ZUNhbGxiYWNrXyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM1LmxvZ2dlcl8oJ3JlbW92ZSBbJyArIHN0YXJ0ICsgJyA9PiAnICsgZW5kICsgJ10nKTtcblxuICAgICAgICAgIF90aGlzNS5zb3VyY2VCdWZmZXJfLnJlbW92aW5nID0gdHJ1ZTtcblxuICAgICAgICAgIF90aGlzNS5zb3VyY2VCdWZmZXJfLnJlbW92ZShzdGFydCwgZW5kKTtcbiAgICAgICAgfSwgZG9uZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHVuZGVybHlpbmcgc291cmNlQnVmZmVyIGlzIHVwZGF0aW5nIG9yIG5vdFxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdGhlIHVwZGF0aW5nIHN0YXR1cyBvZiB0aGUgU291cmNlQnVmZmVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0aW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRpbmcoKSB7XG4gICAgICAvLyB3ZSBhcmUgdXBkYXRpbmcgaWYgdGhlIHNvdXJjZWJ1ZmZlciBpcyB1cGRhdGluZyBvclxuICAgICAgcmV0dXJuICF0aGlzLnNvdXJjZUJ1ZmZlcl8gfHwgdGhpcy5zb3VyY2VCdWZmZXJfLnVwZGF0aW5nIHx8IC8vIGlmIHdlIGhhdmUgYSBwZW5kaW5nIGNhbGxiYWNrIHRoYXQgaXMgbm90IG91ciBpbnRlcm5hbCBub29wXG4gICAgICAhIXRoaXMucGVuZGluZ0NhbGxiYWNrXyAmJiB0aGlzLnBlbmRpbmdDYWxsYmFja18gIT09IG5vb3A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldC9nZXQgdGhlIHRpbWVzdGFtcG9mZnNldCBvbiB0aGUgU291cmNlQnVmZmVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSB0aW1lc3RhbXAgb2Zmc2V0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RpbWVzdGFtcE9mZnNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVzdGFtcE9mZnNldChvZmZzZXQpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5xdWV1ZUNhbGxiYWNrXyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM2LnNvdXJjZUJ1ZmZlcl8udGltZXN0YW1wT2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgICAgICAgX3RoaXM2LnJ1bkNhbGxiYWNrXygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBPZmZzZXRfID0gb2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXBPZmZzZXRfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWV1ZSBhIGNhbGxiYWNrIHRvIHJ1blxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdxdWV1ZUNhbGxiYWNrXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXVlQ2FsbGJhY2tfKGNhbGxiYWNrLCBkb25lKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrc18ucHVzaChbY2FsbGJhY2suYmluZCh0aGlzKSwgZG9uZV0pO1xuICAgICAgdGhpcy5ydW5DYWxsYmFja18oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVuIGEgcXVldWVkIGNhbGxiYWNrXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3J1bkNhbGxiYWNrXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJ1bkNhbGxiYWNrXygpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB2b2lkIDA7XG5cbiAgICAgIGlmICghdGhpcy51cGRhdGluZygpICYmIHRoaXMuY2FsbGJhY2tzXy5sZW5ndGggJiYgdGhpcy5zdGFydGVkXykge1xuICAgICAgICBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrc18uc2hpZnQoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2FsbGJhY2tfID0gY2FsbGJhY2tzWzFdO1xuICAgICAgICBjYWxsYmFja3NbMF0oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogZGlzcG9zZSBvZiB0aGUgc291cmNlIHVwZGF0ZXIgYW5kIHRoZSB1bmRlcmx5aW5nIHNvdXJjZUJ1ZmZlclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkaXNwb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgZGlzcG9zZUZuID0gZnVuY3Rpb24gZGlzcG9zZUZuKCkge1xuICAgICAgICBpZiAoX3RoaXM3LnNvdXJjZUJ1ZmZlcl8gJiYgX3RoaXM3Lm1lZGlhU291cmNlLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgIF90aGlzNy5zb3VyY2VCdWZmZXJfLmFib3J0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczcuc291cmNlQnVmZmVyXy5yZW1vdmVFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCBkaXNwb3NlRm4pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJfLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHRoaXMub25VcGRhdGVlbmRDYWxsYmFja18pO1xuXG4gICAgICBpZiAodGhpcy5zb3VyY2VCdWZmZXJfLnJlbW92aW5nKSB7XG4gICAgICAgIHRoaXMuc291cmNlQnVmZmVyXy5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCBkaXNwb3NlRm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcG9zZUZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTb3VyY2VVcGRhdGVyO1xufSgpO1xuXG52YXIgQ29uZmlnID0ge1xuICBHT0FMX0JVRkZFUl9MRU5HVEg6IDMwLFxuICBNQVhfR09BTF9CVUZGRVJfTEVOR1RIOiA2MCxcbiAgR09BTF9CVUZGRVJfTEVOR1RIX1JBVEU6IDEsXG4gIC8vIDAuNSBNQi9zXG4gIElOSVRJQUxfQkFORFdJRFRIOiA0MTk0MzA0LFxuICAvLyBBIGZ1ZGdlIGZhY3RvciB0byBhcHBseSB0byBhZHZlcnRpc2VkIHBsYXlsaXN0IGJpdHJhdGVzIHRvIGFjY291bnQgZm9yXG4gIC8vIHRlbXBvcmFyeSBmbHVjYXRpb25zIGluIGNsaWVudCBiYW5kd2lkdGhcbiAgQkFORFdJRFRIX1ZBUklBTkNFOiAxLjIsXG4gIC8vIEhvdyBtdWNoIG9mIHRoZSBidWZmZXIgbXVzdCBiZSBmaWxsZWQgYmVmb3JlIHdlIGNvbnNpZGVyIHVwc3dpdGNoaW5nXG4gIEJVRkZFUl9MT1dfV0FURVJfTElORTogMCxcbiAgTUFYX0JVRkZFUl9MT1dfV0FURVJfTElORTogMzAsXG4gIEJVRkZFUl9MT1dfV0FURVJfTElORV9SQVRFOiAxXG59O1xudmFyIFJFUVVFU1RfRVJST1JTID0ge1xuICBGQUlMVVJFOiAyLFxuICBUSU1FT1VUOiAtMTAxLFxuICBBQk9SVEVEOiAtMTAyXG59O1xuLyoqXG4gKiBBYm9ydCBhbGwgcmVxdWVzdHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYWN0aXZlWGhycyAtIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBhbGwgWEhSIHJlcXVlc3RzXG4gKi9cblxudmFyIGFib3J0QWxsID0gZnVuY3Rpb24gYWJvcnRBbGwoYWN0aXZlWGhycykge1xuICBhY3RpdmVYaHJzLmZvckVhY2goZnVuY3Rpb24gKHhocikge1xuICAgIHhoci5hYm9ydCgpO1xuICB9KTtcbn07XG4vKipcbiAqIEdhdGhlciBpbXBvcnRhbnQgYmFuZHdpZHRoIHN0YXRzIG9uY2UgYSByZXF1ZXN0IGhhcyBjb21wbGV0ZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCAtIHRoZSBYSFIgcmVxdWVzdCBmcm9tIHdoaWNoIHRvIGdhdGhlciBzdGF0c1xuICovXG5cblxudmFyIGdldFJlcXVlc3RTdGF0cyA9IGZ1bmN0aW9uIGdldFJlcXVlc3RTdGF0cyhyZXF1ZXN0KSB7XG4gIHJldHVybiB7XG4gICAgYmFuZHdpZHRoOiByZXF1ZXN0LmJhbmR3aWR0aCxcbiAgICBieXRlc1JlY2VpdmVkOiByZXF1ZXN0LmJ5dGVzUmVjZWl2ZWQgfHwgMCxcbiAgICByb3VuZFRyaXBUaW1lOiByZXF1ZXN0LnJvdW5kVHJpcFRpbWUgfHwgMFxuICB9O1xufTtcbi8qKlxuICogSWYgcG9zc2libGUgZ2F0aGVyIGJhbmR3aWR0aCBzdGF0cyBhcyBhIHJlcXVlc3QgaXMgaW5cbiAqIHByb2dyZXNzXG4gKlxuICogQHBhcmFtIHtFdmVudH0gcHJvZ3Jlc3NFdmVudCAtIGFuIGV2ZW50IG9iamVjdCBmcm9tIGFuIFhIUidzIHByb2dyZXNzIGV2ZW50XG4gKi9cblxuXG52YXIgZ2V0UHJvZ3Jlc3NTdGF0cyA9IGZ1bmN0aW9uIGdldFByb2dyZXNzU3RhdHMocHJvZ3Jlc3NFdmVudCkge1xuICB2YXIgcmVxdWVzdCA9IHByb2dyZXNzRXZlbnQudGFyZ2V0O1xuICB2YXIgcm91bmRUcmlwVGltZSA9IERhdGUubm93KCkgLSByZXF1ZXN0LnJlcXVlc3RUaW1lO1xuICB2YXIgc3RhdHMgPSB7XG4gICAgYmFuZHdpZHRoOiBJbmZpbml0eSxcbiAgICBieXRlc1JlY2VpdmVkOiAwLFxuICAgIHJvdW5kVHJpcFRpbWU6IHJvdW5kVHJpcFRpbWUgfHwgMFxuICB9O1xuICBzdGF0cy5ieXRlc1JlY2VpdmVkID0gcHJvZ3Jlc3NFdmVudC5sb2FkZWQ7IC8vIFRoaXMgY2FuIHJlc3VsdCBpbiBJbmZpbml0eSBpZiBzdGF0cy5yb3VuZFRyaXBUaW1lIGlzIDAgYnV0IHRoYXQgaXMgb2tcbiAgLy8gYmVjYXVzZSB3ZSBzaG91bGQgb25seSB1c2UgYmFuZHdpZHRoIHN0YXRzIG9uIHByb2dyZXNzIHRvIGRldGVybWluZSB3aGVuXG4gIC8vIGFib3J0IGEgcmVxdWVzdCBlYXJseSBkdWUgdG8gaW5zdWZmaWNpZW50IGJhbmR3aWR0aFxuXG4gIHN0YXRzLmJhbmR3aWR0aCA9IE1hdGguZmxvb3Ioc3RhdHMuYnl0ZXNSZWNlaXZlZCAvIHN0YXRzLnJvdW5kVHJpcFRpbWUgKiA4ICogMTAwMCk7XG4gIHJldHVybiBzdGF0cztcbn07XG4vKipcbiAqIEhhbmRsZSBhbGwgZXJyb3IgY29uZGl0aW9ucyBpbiBvbmUgcGxhY2UgYW5kIHJldHVybiBhbiBvYmplY3RcbiAqIHdpdGggYWxsIHRoZSBpbmZvcm1hdGlvblxuICpcbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgLSBpZiBub24tbnVsbCBzaWduYWxzIGFuIGVycm9yIG9jY3VyZWQgd2l0aCB0aGUgWEhSXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCAtICB0aGUgWEhSIHJlcXVlc3QgdGhhdCBwb3NzaWJseSBnZW5lcmF0ZWQgdGhlIGVycm9yXG4gKi9cblxuXG52YXIgaGFuZGxlRXJyb3JzID0gZnVuY3Rpb24gaGFuZGxlRXJyb3JzKGVycm9yLCByZXF1ZXN0KSB7XG4gIGlmIChyZXF1ZXN0LnRpbWVkb3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiAnSExTIHJlcXVlc3QgdGltZWQtb3V0IGF0IFVSTDogJyArIHJlcXVlc3QudXJpLFxuICAgICAgY29kZTogUkVRVUVTVF9FUlJPUlMuVElNRU9VVCxcbiAgICAgIHhocjogcmVxdWVzdFxuICAgIH07XG4gIH1cblxuICBpZiAocmVxdWVzdC5hYm9ydGVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiAnSExTIHJlcXVlc3QgYWJvcnRlZCBhdCBVUkw6ICcgKyByZXF1ZXN0LnVyaSxcbiAgICAgIGNvZGU6IFJFUVVFU1RfRVJST1JTLkFCT1JURUQsXG4gICAgICB4aHI6IHJlcXVlc3RcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiAnSExTIHJlcXVlc3QgZXJyb3JlZCBhdCBVUkw6ICcgKyByZXF1ZXN0LnVyaSxcbiAgICAgIGNvZGU6IFJFUVVFU1RfRVJST1JTLkZBSUxVUkUsXG4gICAgICB4aHI6IHJlcXVlc3RcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuLyoqXG4gKiBIYW5kbGUgcmVzcG9uc2VzIGZvciBrZXkgZGF0YSBhbmQgY29udmVydCB0aGUga2V5IGRhdGEgdG8gdGhlIGNvcnJlY3QgZm9ybWF0XG4gKiBmb3IgdGhlIGRlY3J5cHRpb24gc3RlcCBsYXRlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50IC0gYSBzaW1wbGlmaWVkIGNvcHkgb2YgdGhlIHNlZ21lbnRJbmZvIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFNlZ21lbnRMb2FkZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmlzaFByb2Nlc3NpbmdGbiAtIGEgY2FsbGJhY2sgdG8gZXhlY3V0ZSB0byBjb250aW51ZSBwcm9jZXNzaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHJlcXVlc3RcbiAqL1xuXG5cbnZhciBoYW5kbGVLZXlSZXNwb25zZSA9IGZ1bmN0aW9uIGhhbmRsZUtleVJlc3BvbnNlKHNlZ21lbnQsIGZpbmlzaFByb2Nlc3NpbmdGbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0KSB7XG4gICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTtcbiAgICB2YXIgZXJyb3JPYmogPSBoYW5kbGVFcnJvcnMoZXJyb3IsIHJlcXVlc3QpO1xuXG4gICAgaWYgKGVycm9yT2JqKSB7XG4gICAgICByZXR1cm4gZmluaXNoUHJvY2Vzc2luZ0ZuKGVycm9yT2JqLCBzZWdtZW50KTtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2UuYnl0ZUxlbmd0aCAhPT0gMTYpIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oe1xuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBITFMga2V5IGF0IFVSTDogJyArIHJlcXVlc3QudXJpLFxuICAgICAgICBjb2RlOiBSRVFVRVNUX0VSUk9SUy5GQUlMVVJFLFxuICAgICAgICB4aHI6IHJlcXVlc3RcbiAgICAgIH0sIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KHJlc3BvbnNlKTtcbiAgICBzZWdtZW50LmtleS5ieXRlcyA9IG5ldyBVaW50MzJBcnJheShbdmlldy5nZXRVaW50MzIoMCksIHZpZXcuZ2V0VWludDMyKDQpLCB2aWV3LmdldFVpbnQzMig4KSwgdmlldy5nZXRVaW50MzIoMTIpXSk7XG4gICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihudWxsLCBzZWdtZW50KTtcbiAgfTtcbn07XG4vKipcbiAqIEhhbmRsZSBpbml0LXNlZ21lbnQgcmVzcG9uc2VzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZmluaXNoUHJvY2Vzc2luZ0ZuIC0gYSBjYWxsYmFjayB0byBleGVjdXRlIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcmVxdWVzdFxuICovXG5cblxudmFyIGhhbmRsZUluaXRTZWdtZW50UmVzcG9uc2UgPSBmdW5jdGlvbiBoYW5kbGVJbml0U2VnbWVudFJlc3BvbnNlKHNlZ21lbnQsIGNhcHRpb25QYXJzZXIsIGZpbmlzaFByb2Nlc3NpbmdGbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0KSB7XG4gICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTtcbiAgICB2YXIgZXJyb3JPYmogPSBoYW5kbGVFcnJvcnMoZXJyb3IsIHJlcXVlc3QpO1xuXG4gICAgaWYgKGVycm9yT2JqKSB7XG4gICAgICByZXR1cm4gZmluaXNoUHJvY2Vzc2luZ0ZuKGVycm9yT2JqLCBzZWdtZW50KTtcbiAgICB9IC8vIHN0b3AgcHJvY2Vzc2luZyBpZiByZWNlaXZlZCBlbXB0eSBjb250ZW50XG5cblxuICAgIGlmIChyZXNwb25zZS5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZmluaXNoUHJvY2Vzc2luZ0ZuKHtcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgbWVzc2FnZTogJ0VtcHR5IEhMUyBzZWdtZW50IGNvbnRlbnQgYXQgVVJMOiAnICsgcmVxdWVzdC51cmksXG4gICAgICAgIGNvZGU6IFJFUVVFU1RfRVJST1JTLkZBSUxVUkUsXG4gICAgICAgIHhocjogcmVxdWVzdFxuICAgICAgfSwgc2VnbWVudCk7XG4gICAgfVxuXG4gICAgc2VnbWVudC5tYXAuYnl0ZXMgPSBuZXcgVWludDhBcnJheShyZXF1ZXN0LnJlc3BvbnNlKTsgLy8gSW5pdGlhbGl6ZSBDYXB0aW9uUGFyc2VyIGlmIGl0IGhhc24ndCBiZWVuIHlldFxuXG4gICAgaWYgKGNhcHRpb25QYXJzZXIgJiYgIWNhcHRpb25QYXJzZXIuaXNJbml0aWFsaXplZCgpKSB7XG4gICAgICBjYXB0aW9uUGFyc2VyLmluaXQoKTtcbiAgICB9XG5cbiAgICBzZWdtZW50Lm1hcC50aW1lc2NhbGVzID0gbXA0cHJvYmUudGltZXNjYWxlKHNlZ21lbnQubWFwLmJ5dGVzKTtcbiAgICBzZWdtZW50Lm1hcC52aWRlb1RyYWNrSWRzID0gbXA0cHJvYmUudmlkZW9UcmFja0lkcyhzZWdtZW50Lm1hcC5ieXRlcyk7XG4gICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihudWxsLCBzZWdtZW50KTtcbiAgfTtcbn07XG4vKipcbiAqIFJlc3BvbnNlIGhhbmRsZXIgZm9yIHNlZ21lbnQtcmVxdWVzdHMgYmVpbmcgc3VyZSB0byBzZXQgdGhlIGNvcnJlY3RcbiAqIHByb3BlcnR5IGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBzZWdtZW50IGlzIGVuY3J5cGVkIG9yIG5vdFxuICogQWxzbyByZWNvcmRzIGFuZCBrZWVwcyB0cmFjayBvZiBzdGF0cyB0aGF0IGFyZSB1c2VkIGZvciBBQlIgcHVycG9zZXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudCAtIGEgc2ltcGxpZmllZCBjb3B5IG9mIHRoZSBzZWdtZW50SW5mbyBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBTZWdtZW50TG9hZGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5pc2hQcm9jZXNzaW5nRm4gLSBhIGNhbGxiYWNrIHRvIGV4ZWN1dGUgdG8gY29udGludWUgcHJvY2Vzc2luZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyByZXF1ZXN0XG4gKi9cblxuXG52YXIgaGFuZGxlU2VnbWVudFJlc3BvbnNlID0gZnVuY3Rpb24gaGFuZGxlU2VnbWVudFJlc3BvbnNlKHNlZ21lbnQsIGNhcHRpb25QYXJzZXIsIGZpbmlzaFByb2Nlc3NpbmdGbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0KSB7XG4gICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTtcbiAgICB2YXIgZXJyb3JPYmogPSBoYW5kbGVFcnJvcnMoZXJyb3IsIHJlcXVlc3QpO1xuICAgIHZhciBwYXJzZWQgPSB2b2lkIDA7XG5cbiAgICBpZiAoZXJyb3JPYmopIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oZXJyb3JPYmosIHNlZ21lbnQpO1xuICAgIH0gLy8gc3RvcCBwcm9jZXNzaW5nIGlmIHJlY2VpdmVkIGVtcHR5IGNvbnRlbnRcblxuXG4gICAgaWYgKHJlc3BvbnNlLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oe1xuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBtZXNzYWdlOiAnRW1wdHkgSExTIHNlZ21lbnQgY29udGVudCBhdCBVUkw6ICcgKyByZXF1ZXN0LnVyaSxcbiAgICAgICAgY29kZTogUkVRVUVTVF9FUlJPUlMuRkFJTFVSRSxcbiAgICAgICAgeGhyOiByZXF1ZXN0XG4gICAgICB9LCBzZWdtZW50KTtcbiAgICB9XG5cbiAgICBzZWdtZW50LnN0YXRzID0gZ2V0UmVxdWVzdFN0YXRzKHJlcXVlc3QpO1xuXG4gICAgaWYgKHNlZ21lbnQua2V5KSB7XG4gICAgICBzZWdtZW50LmVuY3J5cHRlZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlZ21lbnQuYnl0ZXMgPSBuZXcgVWludDhBcnJheShyZXF1ZXN0LnJlc3BvbnNlKTtcbiAgICB9IC8vIFRoaXMgaXMgbGlrZWx5IGFuIEZNUDQgYW5kIGhhcyB0aGUgaW5pdCBzZWdtZW50LlxuICAgIC8vIFJ1biB0aHJvdWdoIHRoZSBDYXB0aW9uUGFyc2VyIGluIGNhc2UgdGhlcmUgYXJlIGNhcHRpb25zLlxuXG5cbiAgICBpZiAoY2FwdGlvblBhcnNlciAmJiBzZWdtZW50Lm1hcCAmJiBzZWdtZW50Lm1hcC5ieXRlcykge1xuICAgICAgLy8gSW5pdGlhbGl6ZSBDYXB0aW9uUGFyc2VyIGlmIGl0IGhhc24ndCBiZWVuIHlldFxuICAgICAgaWYgKCFjYXB0aW9uUGFyc2VyLmlzSW5pdGlhbGl6ZWQoKSkge1xuICAgICAgICBjYXB0aW9uUGFyc2VyLmluaXQoKTtcbiAgICAgIH1cblxuICAgICAgcGFyc2VkID0gY2FwdGlvblBhcnNlci5wYXJzZShzZWdtZW50LmJ5dGVzLCBzZWdtZW50Lm1hcC52aWRlb1RyYWNrSWRzLCBzZWdtZW50Lm1hcC50aW1lc2NhbGVzKTtcblxuICAgICAgaWYgKHBhcnNlZCAmJiBwYXJzZWQuY2FwdGlvbnMpIHtcbiAgICAgICAgc2VnbWVudC5jYXB0aW9uU3RyZWFtcyA9IHBhcnNlZC5jYXB0aW9uU3RyZWFtcztcbiAgICAgICAgc2VnbWVudC5mbXA0Q2FwdGlvbnMgPSBwYXJzZWQuY2FwdGlvbnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihudWxsLCBzZWdtZW50KTtcbiAgfTtcbn07XG4vKipcbiAqIERlY3J5cHQgdGhlIHNlZ21lbnQgdmlhIHRoZSBkZWNyeXB0aW9uIHdlYiB3b3JrZXJcbiAqXG4gKiBAcGFyYW0ge1dlYldvcmtlcn0gZGVjcnlwdGVyIC0gYSBXZWJXb3JrZXIgaW50ZXJmYWNlIHRvIEFFUy0xMjggZGVjcnlwdGlvbiByb3V0aW5lc1xuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZUZuIC0gYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIGRlY3J5cHRpb24gaGFzIGNvbXBsZXRlZFxuICovXG5cblxudmFyIGRlY3J5cHRTZWdtZW50ID0gZnVuY3Rpb24gZGVjcnlwdFNlZ21lbnQoZGVjcnlwdGVyLCBzZWdtZW50LCBkb25lRm4pIHtcbiAgdmFyIGRlY3J5cHRpb25IYW5kbGVyID0gZnVuY3Rpb24gZGVjcnlwdGlvbkhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZGF0YS5zb3VyY2UgPT09IHNlZ21lbnQucmVxdWVzdElkKSB7XG4gICAgICBkZWNyeXB0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGRlY3J5cHRpb25IYW5kbGVyKTtcbiAgICAgIHZhciBkZWNyeXB0ZWQgPSBldmVudC5kYXRhLmRlY3J5cHRlZDtcbiAgICAgIHNlZ21lbnQuYnl0ZXMgPSBuZXcgVWludDhBcnJheShkZWNyeXB0ZWQuYnl0ZXMsIGRlY3J5cHRlZC5ieXRlT2Zmc2V0LCBkZWNyeXB0ZWQuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4gZG9uZUZuKG51bGwsIHNlZ21lbnQpO1xuICAgIH1cbiAgfTtcblxuICBkZWNyeXB0ZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGRlY3J5cHRpb25IYW5kbGVyKTtcbiAgdmFyIGtleUJ5dGVzID0gdm9pZCAwO1xuXG4gIGlmIChzZWdtZW50LmtleS5ieXRlcy5zbGljZSkge1xuICAgIGtleUJ5dGVzID0gc2VnbWVudC5rZXkuYnl0ZXMuc2xpY2UoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXlCeXRlcyA9IG5ldyBVaW50MzJBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWdtZW50LmtleS5ieXRlcykpO1xuICB9IC8vIHRoaXMgaXMgYW4gZW5jcnlwdGVkIHNlZ21lbnRcbiAgLy8gaW5jcmVtZW50YWxseSBkZWNyeXB0IHRoZSBzZWdtZW50XG5cblxuICBkZWNyeXB0ZXIucG9zdE1lc3NhZ2UoY3JlYXRlVHJhbnNmZXJhYmxlTWVzc2FnZSh7XG4gICAgc291cmNlOiBzZWdtZW50LnJlcXVlc3RJZCxcbiAgICBlbmNyeXB0ZWQ6IHNlZ21lbnQuZW5jcnlwdGVkQnl0ZXMsXG4gICAga2V5OiBrZXlCeXRlcyxcbiAgICBpdjogc2VnbWVudC5rZXkuaXZcbiAgfSksIFtzZWdtZW50LmVuY3J5cHRlZEJ5dGVzLmJ1ZmZlciwga2V5Qnl0ZXMuYnVmZmVyXSk7XG59O1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdhaXRzIGZvciBhbGwgWEhScyB0byBmaW5pc2ggKHdpdGggZWl0aGVyIHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAqIGJlZm9yZSBjb250aW51ZWluZyBwcm9jZXNzaW5nIHZpYSBpdCdzIGNhbGxiYWNrLiBUaGUgZnVuY3Rpb24gZ2F0aGVycyBlcnJvcnNcbiAqIGZyb20gZWFjaCByZXF1ZXN0IGludG8gYSBzaW5nbGUgZXJyb3JzIGFycmF5IHNvIHRoYXQgdGhlIGVycm9yIHN0YXR1cyBmb3JcbiAqIGVhY2ggcmVxdWVzdCBjYW4gYmUgZXhhbWluZWQgbGF0ZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFjdGl2ZVhocnMgLSBhbiBvYmplY3QgdGhhdCB0cmFja3MgYWxsIFhIUiByZXF1ZXN0c1xuICogQHBhcmFtIHtXZWJXb3JrZXJ9IGRlY3J5cHRlciAtIGEgV2ViV29ya2VyIGludGVyZmFjZSB0byBBRVMtMTI4IGRlY3J5cHRpb24gcm91dGluZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRvbmVGbiAtIGEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBhZnRlciBhbGwgcmVzb3VyY2VzIGhhdmUgYmVlblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRlZCBhbmQgYW55IGRlY3J5cHRpb24gY29tcGxldGVkXG4gKi9cblxuXG52YXIgd2FpdEZvckNvbXBsZXRpb24gPSBmdW5jdGlvbiB3YWl0Rm9yQ29tcGxldGlvbihhY3RpdmVYaHJzLCBkZWNyeXB0ZXIsIGRvbmVGbikge1xuICB2YXIgY291bnQgPSAwO1xuICB2YXIgZGlkRXJyb3IgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgc2VnbWVudCkge1xuICAgIGlmIChkaWRFcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgZGlkRXJyb3IgPSB0cnVlOyAvLyBJZiB0aGVyZSBhcmUgZXJyb3JzLCB3ZSBoYXZlIHRvIGFib3J0IGFueSBvdXRzdGFuZGluZyByZXF1ZXN0c1xuXG4gICAgICBhYm9ydEFsbChhY3RpdmVYaHJzKTsgLy8gRXZlbiB0aG91Z2ggdGhlIHJlcXVlc3RzIGFib3ZlIGFyZSBhYm9ydGVkLCBhbmQgaW4gdGhlb3J5IHdlIGNvdWxkIHdhaXQgdW50aWwgd2VcbiAgICAgIC8vIGhhbmRsZSB0aGUgYWJvcnRlZCBldmVudHMgZnJvbSB0aG9zZSByZXF1ZXN0cywgdGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlcmUgd2UgbWF5XG4gICAgICAvLyBuZXZlciBnZXQgYW4gYWJvcnRlZCBldmVudC4gRm9yIGluc3RhbmNlLCBpZiB0aGUgbmV0d29yayBjb25uZWN0aW9uIGlzIGxvc3QgYW5kXG4gICAgICAvLyB0aGVyZSB3ZXJlIHR3byByZXF1ZXN0cywgdGhlIGZpcnN0IG1heSBoYXZlIHRyaWdnZXJlZCBhbiBlcnJvciBpbW1lZGlhdGVseSwgd2hpbGVcbiAgICAgIC8vIHRoZSBzZWNvbmQgcmVxdWVzdCByZW1haW5zIHVuc2VudC4gSW4gdGhhdCBjYXNlLCB0aGUgYWJvcnRlZCBhbGdvcml0aG0gd2lsbCBub3RcbiAgICAgIC8vIHRyaWdnZXIgYW4gYWJvcnQ6IHNlZSBodHRwczovL3hoci5zcGVjLndoYXR3Zy5vcmcvI3RoZS1hYm9ydCgpLW1ldGhvZFxuICAgICAgLy9cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QgcmVseSBvbiB0aGUgcmVhZHkgc3RhdGUgb2YgdGhlIFhIUiwgc2luY2UgdGhlIHJlcXVlc3QgdGhhdFxuICAgICAgLy8gdHJpZ2dlcmVkIHRoZSBjb25uZWN0aW9uIGVycm9yIG1heSBhbHNvIHNob3cgYXMgYSByZWFkeSBzdGF0ZSBvZiAwICh1bnNlbnQpLlxuICAgICAgLy8gVGhlcmVmb3JlLCB3ZSBoYXZlIHRvIGZpbmlzaCB0aGlzIGdyb3VwIG9mIHJlcXVlc3RzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBmaXJzdFxuICAgICAgLy8gc2VlbiBlcnJvci5cblxuICAgICAgcmV0dXJuIGRvbmVGbihlcnJvciwgc2VnbWVudCk7XG4gICAgfVxuXG4gICAgY291bnQgKz0gMTtcblxuICAgIGlmIChjb3VudCA9PT0gYWN0aXZlWGhycy5sZW5ndGgpIHtcbiAgICAgIC8vIEtlZXAgdHJhY2sgb2Ygd2hlbiAqYWxsKiBvZiB0aGUgcmVxdWVzdHMgaGF2ZSBjb21wbGV0ZWRcbiAgICAgIHNlZ21lbnQuZW5kT2ZBbGxSZXF1ZXN0cyA9IERhdGUubm93KCk7XG5cbiAgICAgIGlmIChzZWdtZW50LmVuY3J5cHRlZEJ5dGVzKSB7XG4gICAgICAgIHJldHVybiBkZWNyeXB0U2VnbWVudChkZWNyeXB0ZXIsIHNlZ21lbnQsIGRvbmVGbik7XG4gICAgICB9IC8vIE90aGVyd2lzZSwgZXZlcnl0aGluZyBpcyByZWFkeSBqdXN0IGNvbnRpbnVlXG5cblxuICAgICAgcmV0dXJuIGRvbmVGbihudWxsLCBzZWdtZW50KTtcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBTaW1wbGUgcHJvZ3Jlc3MgZXZlbnQgY2FsbGJhY2sgaGFuZGxlciB0aGF0IGdhdGhlcnMgc29tZSBzdGF0cyBiZWZvcmVcbiAqIGV4ZWN1dGluZyBhIHByb3ZpZGVkIGNhbGxiYWNrIHdpdGggdGhlIGBzZWdtZW50YCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudCAtIGEgc2ltcGxpZmllZCBjb3B5IG9mIHRoZSBzZWdtZW50SW5mbyBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBTZWdtZW50TG9hZGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9ncmVzc0ZuIC0gYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGVhY2ggdGltZSBhIHByb2dyZXNzIGV2ZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgcmVjZWl2ZWRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIHByb2dyZXNzIGV2ZW50IG9iamVjdCBmcm9tIFhNTEh0dHBSZXF1ZXN0XG4gKi9cblxuXG52YXIgaGFuZGxlUHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcyhzZWdtZW50LCBwcm9ncmVzc0ZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBzZWdtZW50LnN0YXRzID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhzZWdtZW50LnN0YXRzLCBnZXRQcm9ncmVzc1N0YXRzKGV2ZW50KSk7IC8vIHJlY29yZCB0aGUgdGltZSB0aGF0IHdlIHJlY2VpdmUgdGhlIGZpcnN0IGJ5dGUgb2YgZGF0YVxuXG4gICAgaWYgKCFzZWdtZW50LnN0YXRzLmZpcnN0Qnl0ZXNSZWNlaXZlZEF0ICYmIHNlZ21lbnQuc3RhdHMuYnl0ZXNSZWNlaXZlZCkge1xuICAgICAgc2VnbWVudC5zdGF0cy5maXJzdEJ5dGVzUmVjZWl2ZWRBdCA9IERhdGUubm93KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2dyZXNzRm4oZXZlbnQsIHNlZ21lbnQpO1xuICB9O1xufTtcbi8qKlxuICogTG9hZCBhbGwgcmVzb3VyY2VzIGFuZCBkb2VzIGFueSBwcm9jZXNzaW5nIG5lY2Vzc2FyeSBmb3IgYSBtZWRpYS1zZWdtZW50XG4gKlxuICogRmVhdHVyZXM6XG4gKiAgIGRlY3J5cHRzIHRoZSBtZWRpYS1zZWdtZW50IGlmIGl0IGhhcyBhIGtleSB1cmkgYW5kIGFuIGl2XG4gKiAgIGFib3J0cyAqYWxsKiByZXF1ZXN0cyBpZiAqYW55KiBvbmUgcmVxdWVzdCBmYWlsc1xuICpcbiAqIFRoZSBzZWdtZW50IG9iamVjdCwgYXQgbWluaW11bSwgaGFzIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge1xuICogICByZXNvbHZlZFVyaTogU3RyaW5nLFxuICogICBbYnl0ZXJhbmdlXToge1xuICogICAgIG9mZnNldDogTnVtYmVyLFxuICogICAgIGxlbmd0aDogTnVtYmVyXG4gKiAgIH0sXG4gKiAgIFtrZXldOiB7XG4gKiAgICAgcmVzb2x2ZWRVcmk6IFN0cmluZ1xuICogICAgIFtieXRlcmFuZ2VdOiB7XG4gKiAgICAgICBvZmZzZXQ6IE51bWJlcixcbiAqICAgICAgIGxlbmd0aDogTnVtYmVyXG4gKiAgICAgfSxcbiAqICAgICBpdjoge1xuICogICAgICAgYnl0ZXM6IFVpbnQzMkFycmF5XG4gKiAgICAgfVxuICogICB9LFxuICogICBbbWFwXToge1xuICogICAgIHJlc29sdmVkVXJpOiBTdHJpbmcsXG4gKiAgICAgW2J5dGVyYW5nZV06IHtcbiAqICAgICAgIG9mZnNldDogTnVtYmVyLFxuICogICAgICAgbGVuZ3RoOiBOdW1iZXJcbiAqICAgICB9LFxuICogICAgIFtieXRlc106IFVpbnQ4QXJyYXlcbiAqICAgfVxuICogfVxuICogLi4ud2hlcmUgW25hbWVdIGRlbm90ZXMgb3B0aW9uYWwgcHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHhociAtIGFuIGluc3RhbmNlIG9mIHRoZSB4aHIgd3JhcHBlciBpbiB4aHIuanNcbiAqIEBwYXJhbSB7T2JqZWN0fSB4aHJPcHRpb25zIC0gdGhlIGJhc2Ugb3B0aW9ucyB0byBwcm92aWRlIHRvIGFsbCB4aHIgcmVxdWVzdHNcbiAqIEBwYXJhbSB7V2ViV29ya2VyfSBkZWNyeXB0aW9uV29ya2VyIC0gYSBXZWJXb3JrZXIgaW50ZXJmYWNlIHRvIEFFUy0xMjhcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGlvbiByb3V0aW5lc1xuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvZ3Jlc3NGbiAtIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBwcm9ncmVzcyBldmVudHMgZnJvbSB0aGUgbWFpblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnQncyB4aHIgcmVxdWVzdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZUZuIC0gYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBhbGwgcmVxdWVzdHMgaGF2ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VlZGVkIG9yIGZhaWxlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gaW52b2tlZCwgaW1tZWRpYXRlbHkgYWJvcnRzIGFsbFxuICogICAgICAgICAgICAgICAgICAgICBvdXRzdGFuZGluZyByZXF1ZXN0c1xuICovXG5cblxudmFyIG1lZGlhU2VnbWVudFJlcXVlc3QgPSBmdW5jdGlvbiBtZWRpYVNlZ21lbnRSZXF1ZXN0KHhociwgeGhyT3B0aW9ucywgZGVjcnlwdGlvbldvcmtlciwgY2FwdGlvblBhcnNlciwgc2VnbWVudCwgcHJvZ3Jlc3NGbiwgZG9uZUZuKSB7XG4gIHZhciBhY3RpdmVYaHJzID0gW107XG4gIHZhciBmaW5pc2hQcm9jZXNzaW5nRm4gPSB3YWl0Rm9yQ29tcGxldGlvbihhY3RpdmVYaHJzLCBkZWNyeXB0aW9uV29ya2VyLCBkb25lRm4pOyAvLyBvcHRpb25hbGx5LCByZXF1ZXN0IHRoZSBkZWNyeXB0aW9uIGtleVxuXG4gIGlmIChzZWdtZW50LmtleSAmJiAhc2VnbWVudC5rZXkuYnl0ZXMpIHtcbiAgICB2YXIga2V5UmVxdWVzdE9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHhock9wdGlvbnMsIHtcbiAgICAgIHVyaTogc2VnbWVudC5rZXkucmVzb2x2ZWRVcmksXG4gICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcidcbiAgICB9KTtcbiAgICB2YXIga2V5UmVxdWVzdENhbGxiYWNrID0gaGFuZGxlS2V5UmVzcG9uc2Uoc2VnbWVudCwgZmluaXNoUHJvY2Vzc2luZ0ZuKTtcbiAgICB2YXIga2V5WGhyID0geGhyKGtleVJlcXVlc3RPcHRpb25zLCBrZXlSZXF1ZXN0Q2FsbGJhY2spO1xuICAgIGFjdGl2ZVhocnMucHVzaChrZXlYaHIpO1xuICB9IC8vIG9wdGlvbmFsbHksIHJlcXVlc3QgdGhlIGFzc29jaWF0ZWQgbWVkaWEgaW5pdCBzZWdtZW50XG5cblxuICBpZiAoc2VnbWVudC5tYXAgJiYgIXNlZ21lbnQubWFwLmJ5dGVzKSB7XG4gICAgdmFyIGluaXRTZWdtZW50T3B0aW9ucyA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoeGhyT3B0aW9ucywge1xuICAgICAgdXJpOiBzZWdtZW50Lm1hcC5yZXNvbHZlZFVyaSxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICAgIGhlYWRlcnM6IHNlZ21lbnRYaHJIZWFkZXJzKHNlZ21lbnQubWFwKVxuICAgIH0pO1xuICAgIHZhciBpbml0U2VnbWVudFJlcXVlc3RDYWxsYmFjayA9IGhhbmRsZUluaXRTZWdtZW50UmVzcG9uc2Uoc2VnbWVudCwgY2FwdGlvblBhcnNlciwgZmluaXNoUHJvY2Vzc2luZ0ZuKTtcbiAgICB2YXIgaW5pdFNlZ21lbnRYaHIgPSB4aHIoaW5pdFNlZ21lbnRPcHRpb25zLCBpbml0U2VnbWVudFJlcXVlc3RDYWxsYmFjayk7XG4gICAgYWN0aXZlWGhycy5wdXNoKGluaXRTZWdtZW50WGhyKTtcbiAgfVxuXG4gIHZhciBzZWdtZW50UmVxdWVzdE9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHhock9wdGlvbnMsIHtcbiAgICB1cmk6IHNlZ21lbnQucmVzb2x2ZWRVcmksXG4gICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgIGhlYWRlcnM6IHNlZ21lbnRYaHJIZWFkZXJzKHNlZ21lbnQpXG4gIH0pO1xuICB2YXIgc2VnbWVudFJlcXVlc3RDYWxsYmFjayA9IGhhbmRsZVNlZ21lbnRSZXNwb25zZShzZWdtZW50LCBjYXB0aW9uUGFyc2VyLCBmaW5pc2hQcm9jZXNzaW5nRm4pO1xuICB2YXIgc2VnbWVudFhociA9IHhocihzZWdtZW50UmVxdWVzdE9wdGlvbnMsIHNlZ21lbnRSZXF1ZXN0Q2FsbGJhY2spO1xuICBzZWdtZW50WGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgaGFuZGxlUHJvZ3Jlc3Moc2VnbWVudCwgcHJvZ3Jlc3NGbikpO1xuICBhY3RpdmVYaHJzLnB1c2goc2VnbWVudFhocik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFib3J0QWxsKGFjdGl2ZVhocnMpO1xuICB9O1xufTsgLy8gVXRpbGl0aWVzXG5cbi8qKlxuICogUmV0dXJucyB0aGUgQ1NTIHZhbHVlIGZvciB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnRcbiAqIHVzaW5nIGBnZXRDb21wdXRlZFN0eWxlYC4gRmlyZWZveCBoYXMgYSBsb25nLXN0YW5kaW5nIGlzc3VlIHdoZXJlXG4gKiBnZXRDb21wdXRlZFN0eWxlKCkgbWF5IHJldHVybiBudWxsIHdoZW4gcnVubmluZyBpbiBhbiBpZnJhbWUgd2l0aFxuICogYGRpc3BsYXk6IG5vbmVgLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCB0aGUgaHRtbGVsZW1lbnQgdG8gd29yayBvblxuICogQHBhcmFtIHtzdHJpbmd9IHRoZSBwcm9wcmV0eSB0byBnZXQgdGhlIHN0eWxlIGZvclxuICovXG5cblxudmFyIHNhZmVHZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gc2FmZUdldENvbXB1dGVkU3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gIHZhciByZXN1bHQgPSB2b2lkIDA7XG5cbiAgaWYgKCFlbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlc3VsdCA9IHdpbmRvdyQxLmdldENvbXB1dGVkU3R5bGUoZWwpO1xuXG4gIGlmICghcmVzdWx0KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFtwcm9wZXJ0eV07XG59O1xuLyoqXG4gKiBSZXN1YWJsZSBzdGFibGUgc29ydCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7UGxheWxpc3RzfSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc29ydEZuIERpZmZlcmVudCBjb21wYXJhdG9yc1xuICogQGZ1bmN0aW9uIHN0YWJsZVNvcnRcbiAqL1xuXG5cbnZhciBzdGFibGVTb3J0ID0gZnVuY3Rpb24gc3RhYmxlU29ydChhcnJheSwgc29ydEZuKSB7XG4gIHZhciBuZXdBcnJheSA9IGFycmF5LnNsaWNlKCk7XG4gIGFycmF5LnNvcnQoZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIGNtcCA9IHNvcnRGbihsZWZ0LCByaWdodCk7XG5cbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByZXR1cm4gbmV3QXJyYXkuaW5kZXhPZihsZWZ0KSAtIG5ld0FycmF5LmluZGV4T2YocmlnaHQpO1xuICAgIH1cblxuICAgIHJldHVybiBjbXA7XG4gIH0pO1xufTtcbi8qKlxuICogQSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIHNvcnQgdHdvIHBsYXlsaXN0IG9iamVjdCBieSBiYW5kd2lkdGguXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGxlZnQgYSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSByaWdodCBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7TnVtYmVyfSBHcmVhdGVyIHRoYW4gemVybyBpZiB0aGUgYmFuZHdpZHRoIGF0dHJpYnV0ZSBvZlxuICogbGVmdCBpcyBncmVhdGVyIHRoYW4gdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHJpZ2h0LiBMZXNzXG4gKiB0aGFuIHplcm8gaWYgdGhlIGJhbmR3aWR0aCBvZiByaWdodCBpcyBncmVhdGVyIHRoYW4gbGVmdCBhbmRcbiAqIGV4YWN0bHkgemVybyBpZiB0aGUgdHdvIGFyZSBlcXVhbC5cbiAqL1xuXG5cbnZhciBjb21wYXJlUGxheWxpc3RCYW5kd2lkdGggPSBmdW5jdGlvbiBjb21wYXJlUGxheWxpc3RCYW5kd2lkdGgobGVmdCwgcmlnaHQpIHtcbiAgdmFyIGxlZnRCYW5kd2lkdGggPSB2b2lkIDA7XG4gIHZhciByaWdodEJhbmR3aWR0aCA9IHZvaWQgMDtcblxuICBpZiAobGVmdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCkge1xuICAgIGxlZnRCYW5kd2lkdGggPSBsZWZ0LmF0dHJpYnV0ZXMuQkFORFdJRFRIO1xuICB9XG5cbiAgbGVmdEJhbmR3aWR0aCA9IGxlZnRCYW5kd2lkdGggfHwgd2luZG93JDEuTnVtYmVyLk1BWF9WQUxVRTtcblxuICBpZiAocmlnaHQuYXR0cmlidXRlcy5CQU5EV0lEVEgpIHtcbiAgICByaWdodEJhbmR3aWR0aCA9IHJpZ2h0LmF0dHJpYnV0ZXMuQkFORFdJRFRIO1xuICB9XG5cbiAgcmlnaHRCYW5kd2lkdGggPSByaWdodEJhbmR3aWR0aCB8fCB3aW5kb3ckMS5OdW1iZXIuTUFYX1ZBTFVFO1xuICByZXR1cm4gbGVmdEJhbmR3aWR0aCAtIHJpZ2h0QmFuZHdpZHRoO1xufTtcbi8qKlxuICogQSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIHNvcnQgdHdvIHBsYXlsaXN0IG9iamVjdCBieSByZXNvbHV0aW9uICh3aWR0aCkuXG4gKiBAcGFyYW0ge09iamVjdH0gbGVmdCBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHJpZ2h0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEdyZWF0ZXIgdGhhbiB6ZXJvIGlmIHRoZSByZXNvbHV0aW9uLndpZHRoIGF0dHJpYnV0ZSBvZlxuICogbGVmdCBpcyBncmVhdGVyIHRoYW4gdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHJpZ2h0LiBMZXNzXG4gKiB0aGFuIHplcm8gaWYgdGhlIHJlc29sdXRpb24ud2lkdGggb2YgcmlnaHQgaXMgZ3JlYXRlciB0aGFuIGxlZnQgYW5kXG4gKiBleGFjdGx5IHplcm8gaWYgdGhlIHR3byBhcmUgZXF1YWwuXG4gKi9cblxuXG52YXIgY29tcGFyZVBsYXlsaXN0UmVzb2x1dGlvbiA9IGZ1bmN0aW9uIGNvbXBhcmVQbGF5bGlzdFJlc29sdXRpb24obGVmdCwgcmlnaHQpIHtcbiAgdmFyIGxlZnRXaWR0aCA9IHZvaWQgMDtcbiAgdmFyIHJpZ2h0V2lkdGggPSB2b2lkIDA7XG5cbiAgaWYgKGxlZnQuYXR0cmlidXRlcy5SRVNPTFVUSU9OICYmIGxlZnQuYXR0cmlidXRlcy5SRVNPTFVUSU9OLndpZHRoKSB7XG4gICAgbGVmdFdpZHRoID0gbGVmdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04ud2lkdGg7XG4gIH1cblxuICBsZWZ0V2lkdGggPSBsZWZ0V2lkdGggfHwgd2luZG93JDEuTnVtYmVyLk1BWF9WQUxVRTtcblxuICBpZiAocmlnaHQuYXR0cmlidXRlcy5SRVNPTFVUSU9OICYmIHJpZ2h0LmF0dHJpYnV0ZXMuUkVTT0xVVElPTi53aWR0aCkge1xuICAgIHJpZ2h0V2lkdGggPSByaWdodC5hdHRyaWJ1dGVzLlJFU09MVVRJT04ud2lkdGg7XG4gIH1cblxuICByaWdodFdpZHRoID0gcmlnaHRXaWR0aCB8fCB3aW5kb3ckMS5OdW1iZXIuTUFYX1ZBTFVFOyAvLyBOT1RFIC0gRmFsbGJhY2sgdG8gYmFuZHdpZHRoIHNvcnQgYXMgYXBwcm9wcmlhdGUgaW4gY2FzZXMgd2hlcmUgbXVsdGlwbGUgcmVuZGl0aW9uc1xuICAvLyBoYXZlIHRoZSBzYW1lIG1lZGlhIGRpbWVuc2lvbnMvIHJlc29sdXRpb25cblxuICBpZiAobGVmdFdpZHRoID09PSByaWdodFdpZHRoICYmIGxlZnQuYXR0cmlidXRlcy5CQU5EV0lEVEggJiYgcmlnaHQuYXR0cmlidXRlcy5CQU5EV0lEVEgpIHtcbiAgICByZXR1cm4gbGVmdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCAtIHJpZ2h0LmF0dHJpYnV0ZXMuQkFORFdJRFRIO1xuICB9XG5cbiAgcmV0dXJuIGxlZnRXaWR0aCAtIHJpZ2h0V2lkdGg7XG59O1xuLyoqXG4gKiBDaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSBtZWRpYSBwbGF5bGlzdCBiYXNlZCBvbiBiYW5kd2lkdGggYW5kIHBsYXllciBzaXplXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1hc3RlclxuICogICAgICAgIE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWFzdGVyIG1hbmlmZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gcGxheWVyQmFuZHdpZHRoXG4gKiAgICAgICAgQ3VycmVudCBjYWxjdWxhdGVkIGJhbmR3aWR0aCBvZiB0aGUgcGxheWVyXG4gKiBAcGFyYW0ge051bWJlcn0gcGxheWVyV2lkdGhcbiAqICAgICAgICBDdXJyZW50IHdpZHRoIG9mIHRoZSBwbGF5ZXIgZWxlbWVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHBsYXllckhlaWdodFxuICogICAgICAgIEN1cnJlbnQgaGVpZ2h0IG9mIHRoZSBwbGF5ZXIgZWxlbWVudFxuICogQHBhcmFtIHtCb29sZWFufSBsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9uc1xuICogICAgICAgIFRydWUgaWYgdGhlIHBsYXllciB3aWR0aCBhbmQgaGVpZ2h0IHNob3VsZCBiZSB1c2VkIGR1cmluZyB0aGUgc2VsZWN0aW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqIEByZXR1cm4ge1BsYXlsaXN0fSB0aGUgaGlnaGVzdCBiaXRyYXRlIHBsYXlsaXN0IGxlc3MgdGhhbiB0aGVcbiAqIGN1cnJlbnRseSBkZXRlY3RlZCBiYW5kd2lkdGgsIGFjY291bnRpbmcgZm9yIHNvbWUgYW1vdW50IG9mXG4gKiBiYW5kd2lkdGggdmFyaWFuY2VcbiAqL1xuXG5cbnZhciBzaW1wbGVTZWxlY3RvciA9IGZ1bmN0aW9uIHNpbXBsZVNlbGVjdG9yKG1hc3RlciwgcGxheWVyQmFuZHdpZHRoLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucykge1xuICAvLyBjb252ZXJ0IHRoZSBwbGF5bGlzdHMgdG8gYW4gaW50ZXJtZWRpYXJ5IHJlcHJlc2VudGF0aW9uIHRvIG1ha2UgY29tcGFyaXNvbnMgZWFzaWVyXG4gIHZhciBzb3J0ZWRQbGF5bGlzdFJlcHMgPSBtYXN0ZXIucGxheWxpc3RzLm1hcChmdW5jdGlvbiAocGxheWxpc3QpIHtcbiAgICB2YXIgd2lkdGggPSB2b2lkIDA7XG4gICAgdmFyIGhlaWdodCA9IHZvaWQgMDtcbiAgICB2YXIgYmFuZHdpZHRoID0gdm9pZCAwO1xuICAgIHdpZHRoID0gcGxheWxpc3QuYXR0cmlidXRlcy5SRVNPTFVUSU9OICYmIHBsYXlsaXN0LmF0dHJpYnV0ZXMuUkVTT0xVVElPTi53aWR0aDtcbiAgICBoZWlnaHQgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gJiYgcGxheWxpc3QuYXR0cmlidXRlcy5SRVNPTFVUSU9OLmhlaWdodDtcbiAgICBiYW5kd2lkdGggPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSDtcbiAgICBiYW5kd2lkdGggPSBiYW5kd2lkdGggfHwgd2luZG93JDEuTnVtYmVyLk1BWF9WQUxVRTtcbiAgICByZXR1cm4ge1xuICAgICAgYmFuZHdpZHRoOiBiYW5kd2lkdGgsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHBsYXlsaXN0OiBwbGF5bGlzdFxuICAgIH07XG4gIH0pO1xuICBzdGFibGVTb3J0KHNvcnRlZFBsYXlsaXN0UmVwcywgZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuIGxlZnQuYmFuZHdpZHRoIC0gcmlnaHQuYmFuZHdpZHRoO1xuICB9KTsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGV4Y2x1ZGVkIGR1ZSB0b1xuICAvLyBpbmNvbXBhdGlibGUgY29uZmlndXJhdGlvbnNcblxuICBzb3J0ZWRQbGF5bGlzdFJlcHMgPSBzb3J0ZWRQbGF5bGlzdFJlcHMuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICByZXR1cm4gIVBsYXlsaXN0LmlzSW5jb21wYXRpYmxlKHJlcC5wbGF5bGlzdCk7XG4gIH0pOyAvLyBmaWx0ZXIgb3V0IGFueSBwbGF5bGlzdHMgdGhhdCBoYXZlIGJlZW4gZGlzYWJsZWQgbWFudWFsbHkgdGhyb3VnaCB0aGUgcmVwcmVzZW50YXRpb25zXG4gIC8vIGFwaSBvciBibGFja2xpc3RlZCB0ZW1wb3JhcmlseSBkdWUgdG8gcGxheWJhY2sgZXJyb3JzLlxuXG4gIHZhciBlbmFibGVkUGxheWxpc3RSZXBzID0gc29ydGVkUGxheWxpc3RSZXBzLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIFBsYXlsaXN0LmlzRW5hYmxlZChyZXAucGxheWxpc3QpO1xuICB9KTtcblxuICBpZiAoIWVuYWJsZWRQbGF5bGlzdFJlcHMubGVuZ3RoKSB7XG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIGVuYWJsZWQgcGxheWxpc3RzLCB0aGVuIHRoZXkgaGF2ZSBhbGwgYmVlbiBibGFja2xpc3RlZCBvciBkaXNhYmxlZFxuICAgIC8vIGJ5IHRoZSB1c2VyIHRocm91Z2ggdGhlIHJlcHJlc2VudGF0aW9ucyBhcGkuIEluIHRoaXMgY2FzZSwgaWdub3JlIGJsYWNrbGlzdGluZyBhbmRcbiAgICAvLyBmYWxsYmFjayB0byB3aGF0IHRoZSB1c2VyIHdhbnRzIGJ5IHVzaW5nIHBsYXlsaXN0cyB0aGUgdXNlciBoYXMgbm90IGRpc2FibGVkLlxuICAgIGVuYWJsZWRQbGF5bGlzdFJlcHMgPSBzb3J0ZWRQbGF5bGlzdFJlcHMuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICAgIHJldHVybiAhUGxheWxpc3QuaXNEaXNhYmxlZChyZXAucGxheWxpc3QpO1xuICAgIH0pO1xuICB9IC8vIGZpbHRlciBvdXQgYW55IHZhcmlhbnQgdGhhdCBoYXMgZ3JlYXRlciBlZmZlY3RpdmUgYml0cmF0ZVxuICAvLyB0aGFuIHRoZSBjdXJyZW50IGVzdGltYXRlZCBiYW5kd2lkdGhcblxuXG4gIHZhciBiYW5kd2lkdGhQbGF5bGlzdFJlcHMgPSBlbmFibGVkUGxheWxpc3RSZXBzLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIHJlcC5iYW5kd2lkdGggKiBDb25maWcuQkFORFdJRFRIX1ZBUklBTkNFIDwgcGxheWVyQmFuZHdpZHRoO1xuICB9KTtcbiAgdmFyIGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAgPSBiYW5kd2lkdGhQbGF5bGlzdFJlcHNbYmFuZHdpZHRoUGxheWxpc3RSZXBzLmxlbmd0aCAtIDFdOyAvLyBnZXQgYWxsIG9mIHRoZSByZW5kaXRpb25zIHdpdGggdGhlIHNhbWUgKGhpZ2hlc3QpIGJhbmR3aWR0aFxuICAvLyBhbmQgdGhlbiB0YWtpbmcgdGhlIHZlcnkgZmlyc3QgZWxlbWVudFxuXG4gIHZhciBiYW5kd2lkdGhCZXN0UmVwID0gYmFuZHdpZHRoUGxheWxpc3RSZXBzLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIHJlcC5iYW5kd2lkdGggPT09IGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAuYmFuZHdpZHRoO1xuICB9KVswXTsgLy8gaWYgd2UncmUgbm90IGdvaW5nIHRvIGxpbWl0IHJlbmRpdGlvbnMgYnkgcGxheWVyIHNpemUsIG1ha2UgYW4gZWFybHkgZGVjaXNpb24uXG5cbiAgaWYgKGxpbWl0UmVuZGl0aW9uQnlQbGF5ZXJEaW1lbnNpb25zID09PSBmYWxzZSkge1xuICAgIHZhciBfY2hvc2VuUmVwID0gYmFuZHdpZHRoQmVzdFJlcCB8fCBlbmFibGVkUGxheWxpc3RSZXBzWzBdIHx8IHNvcnRlZFBsYXlsaXN0UmVwc1swXTtcblxuICAgIHJldHVybiBfY2hvc2VuUmVwID8gX2Nob3NlblJlcC5wbGF5bGlzdCA6IG51bGw7XG4gIH0gLy8gZmlsdGVyIG91dCBwbGF5bGlzdHMgd2l0aG91dCByZXNvbHV0aW9uIGluZm9ybWF0aW9uXG5cblxuICB2YXIgaGF2ZVJlc29sdXRpb24gPSBiYW5kd2lkdGhQbGF5bGlzdFJlcHMuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICByZXR1cm4gcmVwLndpZHRoICYmIHJlcC5oZWlnaHQ7XG4gIH0pOyAvLyBzb3J0IHZhcmlhbnRzIGJ5IHJlc29sdXRpb25cblxuICBzdGFibGVTb3J0KGhhdmVSZXNvbHV0aW9uLCBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gbGVmdC53aWR0aCAtIHJpZ2h0LndpZHRoO1xuICB9KTsgLy8gaWYgd2UgaGF2ZSB0aGUgZXhhY3QgcmVzb2x1dGlvbiBhcyB0aGUgcGxheWVyIHVzZSBpdFxuXG4gIHZhciByZXNvbHV0aW9uQmVzdFJlcExpc3QgPSBoYXZlUmVzb2x1dGlvbi5maWx0ZXIoZnVuY3Rpb24gKHJlcCkge1xuICAgIHJldHVybiByZXAud2lkdGggPT09IHBsYXllcldpZHRoICYmIHJlcC5oZWlnaHQgPT09IHBsYXllckhlaWdodDtcbiAgfSk7XG4gIGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAgPSByZXNvbHV0aW9uQmVzdFJlcExpc3RbcmVzb2x1dGlvbkJlc3RSZXBMaXN0Lmxlbmd0aCAtIDFdOyAvLyBlbnN1cmUgdGhhdCB3ZSBwaWNrIHRoZSBoaWdoZXN0IGJhbmR3aWR0aCB2YXJpYW50IHRoYXQgaGF2ZSBleGFjdCByZXNvbHV0aW9uXG5cbiAgdmFyIHJlc29sdXRpb25CZXN0UmVwID0gcmVzb2x1dGlvbkJlc3RSZXBMaXN0LmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIHJlcC5iYW5kd2lkdGggPT09IGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAuYmFuZHdpZHRoO1xuICB9KVswXTtcbiAgdmFyIHJlc29sdXRpb25QbHVzT25lTGlzdCA9IHZvaWQgMDtcbiAgdmFyIHJlc29sdXRpb25QbHVzT25lU21hbGxlc3QgPSB2b2lkIDA7XG4gIHZhciByZXNvbHV0aW9uUGx1c09uZVJlcCA9IHZvaWQgMDsgLy8gZmluZCB0aGUgc21hbGxlc3QgdmFyaWFudCB0aGF0IGlzIGxhcmdlciB0aGFuIHRoZSBwbGF5ZXJcbiAgLy8gaWYgdGhlcmUgaXMgbm8gbWF0Y2ggb2YgZXhhY3QgcmVzb2x1dGlvblxuXG4gIGlmICghcmVzb2x1dGlvbkJlc3RSZXApIHtcbiAgICByZXNvbHV0aW9uUGx1c09uZUxpc3QgPSBoYXZlUmVzb2x1dGlvbi5maWx0ZXIoZnVuY3Rpb24gKHJlcCkge1xuICAgICAgcmV0dXJuIHJlcC53aWR0aCA+IHBsYXllcldpZHRoIHx8IHJlcC5oZWlnaHQgPiBwbGF5ZXJIZWlnaHQ7XG4gICAgfSk7IC8vIGZpbmQgYWxsIHRoZSB2YXJpYW50cyBoYXZlIHRoZSBzYW1lIHNtYWxsZXN0IHJlc29sdXRpb25cblxuICAgIHJlc29sdXRpb25QbHVzT25lU21hbGxlc3QgPSByZXNvbHV0aW9uUGx1c09uZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICAgIHJldHVybiByZXAud2lkdGggPT09IHJlc29sdXRpb25QbHVzT25lTGlzdFswXS53aWR0aCAmJiByZXAuaGVpZ2h0ID09PSByZXNvbHV0aW9uUGx1c09uZUxpc3RbMF0uaGVpZ2h0O1xuICAgIH0pOyAvLyBlbnN1cmUgdGhhdCB3ZSBhbHNvIHBpY2sgdGhlIGhpZ2hlc3QgYmFuZHdpZHRoIHZhcmlhbnQgdGhhdFxuICAgIC8vIGlzIGp1c3QtbGFyZ2VyLXRoYW4gdGhlIHZpZGVvIHBsYXllclxuXG4gICAgaGlnaGVzdFJlbWFpbmluZ0JhbmR3aWR0aFJlcCA9IHJlc29sdXRpb25QbHVzT25lU21hbGxlc3RbcmVzb2x1dGlvblBsdXNPbmVTbWFsbGVzdC5sZW5ndGggLSAxXTtcbiAgICByZXNvbHV0aW9uUGx1c09uZVJlcCA9IHJlc29sdXRpb25QbHVzT25lU21hbGxlc3QuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICAgIHJldHVybiByZXAuYmFuZHdpZHRoID09PSBoaWdoZXN0UmVtYWluaW5nQmFuZHdpZHRoUmVwLmJhbmR3aWR0aDtcbiAgICB9KVswXTtcbiAgfSAvLyBmYWxsYmFjayBjaGFpbiBvZiB2YXJpYW50c1xuXG5cbiAgdmFyIGNob3NlblJlcCA9IHJlc29sdXRpb25QbHVzT25lUmVwIHx8IHJlc29sdXRpb25CZXN0UmVwIHx8IGJhbmR3aWR0aEJlc3RSZXAgfHwgZW5hYmxlZFBsYXlsaXN0UmVwc1swXSB8fCBzb3J0ZWRQbGF5bGlzdFJlcHNbMF07XG4gIHJldHVybiBjaG9zZW5SZXAgPyBjaG9zZW5SZXAucGxheWxpc3QgOiBudWxsO1xufTsgLy8gUGxheWxpc3QgU2VsZWN0b3JzXG5cbi8qKlxuICogQ2hvb3NlcyB0aGUgYXBwcm9wcmlhdGUgbWVkaWEgcGxheWxpc3QgYmFzZWQgb24gdGhlIG1vc3QgcmVjZW50XG4gKiBiYW5kd2lkdGggZXN0aW1hdGUgYW5kIHRoZSBwbGF5ZXIgc2l6ZS5cbiAqXG4gKiBFeHBlY3RzIHRvIGJlIGNhbGxlZCB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYW4gaW5zdGFuY2Ugb2YgSGxzSGFuZGxlclxuICpcbiAqIEByZXR1cm4ge1BsYXlsaXN0fSB0aGUgaGlnaGVzdCBiaXRyYXRlIHBsYXlsaXN0IGxlc3MgdGhhbiB0aGVcbiAqIGN1cnJlbnRseSBkZXRlY3RlZCBiYW5kd2lkdGgsIGFjY291bnRpbmcgZm9yIHNvbWUgYW1vdW50IG9mXG4gKiBiYW5kd2lkdGggdmFyaWFuY2VcbiAqL1xuXG5cbnZhciBsYXN0QmFuZHdpZHRoU2VsZWN0b3IgPSBmdW5jdGlvbiBsYXN0QmFuZHdpZHRoU2VsZWN0b3IoKSB7XG4gIHJldHVybiBzaW1wbGVTZWxlY3Rvcih0aGlzLnBsYXlsaXN0cy5tYXN0ZXIsIHRoaXMuc3lzdGVtQmFuZHdpZHRoLCBwYXJzZUludChzYWZlR2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnRlY2hfLmVsKCksICd3aWR0aCcpLCAxMCksIHBhcnNlSW50KHNhZmVHZXRDb21wdXRlZFN0eWxlKHRoaXMudGVjaF8uZWwoKSwgJ2hlaWdodCcpLCAxMCksIHRoaXMubGltaXRSZW5kaXRpb25CeVBsYXllckRpbWVuc2lvbnMpO1xufTtcbi8qKlxuICogQ2hvb3NlcyB0aGUgYXBwcm9wcmlhdGUgbWVkaWEgcGxheWxpc3QgYmFzZWQgb24gdGhlIHBvdGVudGlhbCB0byByZWJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICogICAgICAgIE9iamVjdCBvZiBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byB1c2UgdGhpcyBzZWxlY3RvclxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzLm1hc3RlclxuICogICAgICAgIE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWFzdGVyIG1hbmlmZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gc2V0dGluZ3MuY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzZXR0aW5ncy5iYW5kd2lkdGhcbiAqICAgICAgICBDdXJyZW50IG1lYXN1cmVkIGJhbmR3aWR0aFxuICogQHBhcmFtIHtOdW1iZXJ9IHNldHRpbmdzLmR1cmF0aW9uXG4gKiAgICAgICAgRHVyYXRpb24gb2YgdGhlIG1lZGlhXG4gKiBAcGFyYW0ge051bWJlcn0gc2V0dGluZ3Muc2VnbWVudER1cmF0aW9uXG4gKiAgICAgICAgU2VnbWVudCBkdXJhdGlvbiB0byBiZSB1c2VkIGluIHJvdW5kIHRyaXAgdGltZSBjYWxjdWxhdGlvbnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzZXR0aW5ncy50aW1lVW50aWxSZWJ1ZmZlclxuICogICAgICAgIFRpbWUgbGVmdCBpbiBzZWNvbmRzIHVudGlsIHRoZSBwbGF5ZXIgaGFzIHRvIHJlYnVmZmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc2V0dGluZ3MuY3VycmVudFRpbWVsaW5lXG4gKiAgICAgICAgVGhlIGN1cnJlbnQgdGltZWxpbmUgc2VnbWVudHMgYXJlIGJlaW5nIGxvYWRlZCBmcm9tXG4gKiBAcGFyYW0ge1N5bmNDb250cm9sbGVyfSBzZXR0aW5ncy5zeW5jQ29udHJvbGxlclxuICogICAgICAgIFN5bmNDb250cm9sbGVyIGZvciBkZXRlcm1pbmluZyBpZiB3ZSBoYXZlIGEgc3luYyBwb2ludCBmb3IgYSBnaXZlbiBwbGF5bGlzdFxuICogQHJldHVybiB7T2JqZWN0fG51bGx9XG4gKiAgICAgICAgIHtPYmplY3R9IHJldHVybi5wbGF5bGlzdFxuICogICAgICAgICBUaGUgaGlnaGVzdCBiYW5kd2lkdGggcGxheWxpc3Qgd2l0aCB0aGUgbGVhc3QgYW1vdW50IG9mIHJlYnVmZmVyaW5nXG4gKiAgICAgICAgIHtOdW1iZXJ9IHJldHVybi5yZWJ1ZmZlcmluZ0ltcGFjdFxuICogICAgICAgICBUaGUgYW1vdW50IG9mIHRpbWUgaW4gc2Vjb25kcyBzd2l0Y2hpbmcgdG8gdGhpcyBwbGF5bGlzdCB3aWxsIHJlYnVmZmVyLiBBXG4gKiAgICAgICAgIG5lZ2F0aXZlIHZhbHVlIG1lYW5zIHRoYXQgc3dpdGNoaW5nIHdpbGwgY2F1c2UgemVybyByZWJ1ZmZlcmluZy5cbiAqL1xuXG5cbnZhciBtaW5SZWJ1ZmZlck1heEJhbmR3aWR0aFNlbGVjdG9yID0gZnVuY3Rpb24gbWluUmVidWZmZXJNYXhCYW5kd2lkdGhTZWxlY3RvcihzZXR0aW5ncykge1xuICB2YXIgbWFzdGVyID0gc2V0dGluZ3MubWFzdGVyLFxuICAgICAgY3VycmVudFRpbWUgPSBzZXR0aW5ncy5jdXJyZW50VGltZSxcbiAgICAgIGJhbmR3aWR0aCA9IHNldHRpbmdzLmJhbmR3aWR0aCxcbiAgICAgIGR1cmF0aW9uJCQxID0gc2V0dGluZ3MuZHVyYXRpb24sXG4gICAgICBzZWdtZW50RHVyYXRpb24gPSBzZXR0aW5ncy5zZWdtZW50RHVyYXRpb24sXG4gICAgICB0aW1lVW50aWxSZWJ1ZmZlciA9IHNldHRpbmdzLnRpbWVVbnRpbFJlYnVmZmVyLFxuICAgICAgY3VycmVudFRpbWVsaW5lID0gc2V0dGluZ3MuY3VycmVudFRpbWVsaW5lLFxuICAgICAgc3luY0NvbnRyb2xsZXIgPSBzZXR0aW5ncy5zeW5jQ29udHJvbGxlcjsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGV4Y2x1ZGVkIGR1ZSB0b1xuICAvLyBpbmNvbXBhdGlibGUgY29uZmlndXJhdGlvbnNcblxuICB2YXIgY29tcGF0aWJsZVBsYXlsaXN0cyA9IG1hc3Rlci5wbGF5bGlzdHMuZmlsdGVyKGZ1bmN0aW9uIChwbGF5bGlzdCkge1xuICAgIHJldHVybiAhUGxheWxpc3QuaXNJbmNvbXBhdGlibGUocGxheWxpc3QpO1xuICB9KTsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGRpc2FibGVkIG1hbnVhbGx5IHRocm91Z2ggdGhlIHJlcHJlc2VudGF0aW9uc1xuICAvLyBhcGkgb3IgYmxhY2tsaXN0ZWQgdGVtcG9yYXJpbHkgZHVlIHRvIHBsYXliYWNrIGVycm9ycy5cblxuICB2YXIgZW5hYmxlZFBsYXlsaXN0cyA9IGNvbXBhdGlibGVQbGF5bGlzdHMuZmlsdGVyKFBsYXlsaXN0LmlzRW5hYmxlZCk7XG5cbiAgaWYgKCFlbmFibGVkUGxheWxpc3RzLmxlbmd0aCkge1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBlbmFibGVkIHBsYXlsaXN0cywgdGhlbiB0aGV5IGhhdmUgYWxsIGJlZW4gYmxhY2tsaXN0ZWQgb3IgZGlzYWJsZWRcbiAgICAvLyBieSB0aGUgdXNlciB0aHJvdWdoIHRoZSByZXByZXNlbnRhdGlvbnMgYXBpLiBJbiB0aGlzIGNhc2UsIGlnbm9yZSBibGFja2xpc3RpbmcgYW5kXG4gICAgLy8gZmFsbGJhY2sgdG8gd2hhdCB0aGUgdXNlciB3YW50cyBieSB1c2luZyBwbGF5bGlzdHMgdGhlIHVzZXIgaGFzIG5vdCBkaXNhYmxlZC5cbiAgICBlbmFibGVkUGxheWxpc3RzID0gY29tcGF0aWJsZVBsYXlsaXN0cy5maWx0ZXIoZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgICByZXR1cm4gIVBsYXlsaXN0LmlzRGlzYWJsZWQocGxheWxpc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGJhbmR3aWR0aFBsYXlsaXN0cyA9IGVuYWJsZWRQbGF5bGlzdHMuZmlsdGVyKFBsYXlsaXN0Lmhhc0F0dHJpYnV0ZS5iaW5kKG51bGwsICdCQU5EV0lEVEgnKSk7XG4gIHZhciByZWJ1ZmZlcmluZ0VzdGltYXRlcyA9IGJhbmR3aWR0aFBsYXlsaXN0cy5tYXAoZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgdmFyIHN5bmNQb2ludCA9IHN5bmNDb250cm9sbGVyLmdldFN5bmNQb2ludChwbGF5bGlzdCwgZHVyYXRpb24kJDEsIGN1cnJlbnRUaW1lbGluZSwgY3VycmVudFRpbWUpOyAvLyBJZiB0aGVyZSBpcyBubyBzeW5jIHBvaW50IGZvciB0aGlzIHBsYXlsaXN0LCBzd2l0Y2hpbmcgdG8gaXQgd2lsbCByZXF1aXJlIGFcbiAgICAvLyBzeW5jIHJlcXVlc3QgZmlyc3QuIFRoaXMgd2lsbCBkb3VibGUgdGhlIHJlcXVlc3QgdGltZVxuXG4gICAgdmFyIG51bVJlcXVlc3RzID0gc3luY1BvaW50ID8gMSA6IDI7XG4gICAgdmFyIHJlcXVlc3RUaW1lRXN0aW1hdGUgPSBQbGF5bGlzdC5lc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZShzZWdtZW50RHVyYXRpb24sIGJhbmR3aWR0aCwgcGxheWxpc3QpO1xuICAgIHZhciByZWJ1ZmZlcmluZ0ltcGFjdCA9IHJlcXVlc3RUaW1lRXN0aW1hdGUgKiBudW1SZXF1ZXN0cyAtIHRpbWVVbnRpbFJlYnVmZmVyO1xuICAgIHJldHVybiB7XG4gICAgICBwbGF5bGlzdDogcGxheWxpc3QsXG4gICAgICByZWJ1ZmZlcmluZ0ltcGFjdDogcmVidWZmZXJpbmdJbXBhY3RcbiAgICB9O1xuICB9KTtcbiAgdmFyIG5vUmVidWZmZXJpbmdQbGF5bGlzdHMgPSByZWJ1ZmZlcmluZ0VzdGltYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGVzdGltYXRlKSB7XG4gICAgcmV0dXJuIGVzdGltYXRlLnJlYnVmZmVyaW5nSW1wYWN0IDw9IDA7XG4gIH0pOyAvLyBTb3J0IGJ5IGJhbmR3aWR0aCBERVNDXG5cbiAgc3RhYmxlU29ydChub1JlYnVmZmVyaW5nUGxheWxpc3RzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlUGxheWxpc3RCYW5kd2lkdGgoYi5wbGF5bGlzdCwgYS5wbGF5bGlzdCk7XG4gIH0pO1xuXG4gIGlmIChub1JlYnVmZmVyaW5nUGxheWxpc3RzLmxlbmd0aCkge1xuICAgIHJldHVybiBub1JlYnVmZmVyaW5nUGxheWxpc3RzWzBdO1xuICB9XG5cbiAgc3RhYmxlU29ydChyZWJ1ZmZlcmluZ0VzdGltYXRlcywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5yZWJ1ZmZlcmluZ0ltcGFjdCAtIGIucmVidWZmZXJpbmdJbXBhY3Q7XG4gIH0pO1xuICByZXR1cm4gcmVidWZmZXJpbmdFc3RpbWF0ZXNbMF0gfHwgbnVsbDtcbn07XG4vKipcbiAqIENob29zZXMgdGhlIGFwcHJvcHJpYXRlIG1lZGlhIHBsYXlsaXN0LCB3aGljaCBpbiB0aGlzIGNhc2UgaXMgdGhlIGxvd2VzdCBiaXRyYXRlXG4gKiBvbmUgd2l0aCB2aWRlby4gIElmIG5vIHJlbmRpdGlvbnMgd2l0aCB2aWRlbyBleGlzdCwgcmV0dXJuIHRoZSBsb3dlc3QgYXVkaW8gcmVuZGl0aW9uLlxuICpcbiAqIEV4cGVjdHMgdG8gYmUgY2FsbGVkIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhbiBpbnN0YW5jZSBvZiBIbHNIYW5kbGVyXG4gKlxuICogQHJldHVybiB7T2JqZWN0fG51bGx9XG4gKiAgICAgICAgIHtPYmplY3R9IHJldHVybi5wbGF5bGlzdFxuICogICAgICAgICBUaGUgbG93ZXN0IGJpdHJhdGUgcGxheWxpc3QgdGhhdCBjb250YWlucyBhIHZpZGVvIGNvZGVjLiAgSWYgbm8gc3VjaCByZW5kaXRpb25cbiAqICAgICAgICAgZXhpc3RzIHBpY2sgdGhlIGxvd2VzdCBhdWRpbyByZW5kaXRpb24uXG4gKi9cblxuXG52YXIgbG93ZXN0Qml0cmF0ZUNvbXBhdGlibGVWYXJpYW50U2VsZWN0b3IgPSBmdW5jdGlvbiBsb3dlc3RCaXRyYXRlQ29tcGF0aWJsZVZhcmlhbnRTZWxlY3RvcigpIHtcbiAgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGV4Y2x1ZGVkIGR1ZSB0b1xuICAvLyBpbmNvbXBhdGlibGUgY29uZmlndXJhdGlvbnMgb3IgcGxheWJhY2sgZXJyb3JzXG4gIHZhciBwbGF5bGlzdHMgPSB0aGlzLnBsYXlsaXN0cy5tYXN0ZXIucGxheWxpc3RzLmZpbHRlcihQbGF5bGlzdC5pc0VuYWJsZWQpOyAvLyBTb3J0IGFzY2VuZGluZyBieSBiaXRyYXRlXG5cbiAgc3RhYmxlU29ydChwbGF5bGlzdHMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVQbGF5bGlzdEJhbmR3aWR0aChhLCBiKTtcbiAgfSk7IC8vIFBhcnNlIGFuZCBhc3N1bWUgdGhhdCBwbGF5bGlzdHMgd2l0aCBubyB2aWRlbyBjb2RlYyBoYXZlIG5vIHZpZGVvXG4gIC8vICh0aGlzIGlzIG5vdCBuZWNlc3NhcmlseSB0cnVlLCBhbHRob3VnaCBpdCBpcyBnZW5lcmFsbHkgdHJ1ZSkuXG4gIC8vXG4gIC8vIElmIGFuIGVudGlyZSBtYW5pZmVzdCBoYXMgbm8gdmFsaWQgdmlkZW9zIGV2ZXJ5dGhpbmcgd2lsbCBnZXQgZmlsdGVyZWRcbiAgLy8gb3V0LlxuXG4gIHZhciBwbGF5bGlzdHNXaXRoVmlkZW8gPSBwbGF5bGlzdHMuZmlsdGVyKGZ1bmN0aW9uIChwbGF5bGlzdCkge1xuICAgIHJldHVybiBwYXJzZUNvZGVjcyhwbGF5bGlzdC5hdHRyaWJ1dGVzLkNPREVDUykudmlkZW9Db2RlYztcbiAgfSk7XG4gIHJldHVybiBwbGF5bGlzdHNXaXRoVmlkZW9bMF0gfHwgbnVsbDtcbn07XG4vKipcbiAqIENyZWF0ZSBjYXB0aW9ucyB0ZXh0IHRyYWNrcyBvbiB2aWRlby5qcyBpZiB0aGV5IGRvIG5vdCBleGlzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbmJhbmRUZXh0VHJhY2tzIGEgcmVmZXJlbmNlIHRvIGN1cnJlbnQgaW5iYW5kVGV4dFRyYWNrc1xuICogQHBhcmFtIHtPYmplY3R9IHRlY2ggdGhlIHZpZGVvLmpzIHRlY2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYXB0aW9uU3RyZWFtcyB0aGUgY2FwdGlvbiBzdHJlYW1zIHRvIGNyZWF0ZVxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBjcmVhdGVDYXB0aW9uc1RyYWNrSWZOb3RFeGlzdHMgPSBmdW5jdGlvbiBjcmVhdGVDYXB0aW9uc1RyYWNrSWZOb3RFeGlzdHMoaW5iYW5kVGV4dFRyYWNrcywgdGVjaCwgY2FwdGlvblN0cmVhbXMpIHtcbiAgZm9yICh2YXIgdHJhY2tJZCBpbiBjYXB0aW9uU3RyZWFtcykge1xuICAgIGlmICghaW5iYW5kVGV4dFRyYWNrc1t0cmFja0lkXSkge1xuICAgICAgdGVjaC50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ2hscy02MDgnXG4gICAgICB9KTtcbiAgICAgIHZhciB0cmFjayA9IHRlY2gudGV4dFRyYWNrcygpLmdldFRyYWNrQnlJZCh0cmFja0lkKTtcblxuICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgIC8vIFJlc3VzZSBhbiBleGlzdGluZyB0cmFjayB3aXRoIGEgQ0MjIGlkIGJlY2F1c2UgdGhpcyB3YXNcbiAgICAgICAgLy8gdmVyeSBsaWtlbHkgY3JlYXRlZCBieSB2aWRlb2pzLWNvbnRyaWItaGxzIGZyb20gaW5mb3JtYXRpb25cbiAgICAgICAgLy8gaW4gdGhlIG0zdTggZm9yIHVzIHRvIHVzZVxuICAgICAgICBpbmJhbmRUZXh0VHJhY2tzW3RyYWNrSWRdID0gdHJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIGNyZWF0ZSBhIHRyYWNrIHdpdGggdGhlIGRlZmF1bHQgYENDI2AgbGFiZWwgYW5kXG4gICAgICAgIC8vIHdpdGhvdXQgYSBsYW5ndWFnZVxuICAgICAgICBpbmJhbmRUZXh0VHJhY2tzW3RyYWNrSWRdID0gdGVjaC5hZGRSZW1vdGVUZXh0VHJhY2soe1xuICAgICAgICAgIGtpbmQ6ICdjYXB0aW9ucycsXG4gICAgICAgICAgaWQ6IHRyYWNrSWQsXG4gICAgICAgICAgbGFiZWw6IHRyYWNrSWRcbiAgICAgICAgfSwgZmFsc2UpLnRyYWNrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGFkZENhcHRpb25EYXRhID0gZnVuY3Rpb24gYWRkQ2FwdGlvbkRhdGEoX3JlZikge1xuICB2YXIgaW5iYW5kVGV4dFRyYWNrcyA9IF9yZWYuaW5iYW5kVGV4dFRyYWNrcyxcbiAgICAgIGNhcHRpb25BcnJheSA9IF9yZWYuY2FwdGlvbkFycmF5LFxuICAgICAgdGltZXN0YW1wT2Zmc2V0ID0gX3JlZi50aW1lc3RhbXBPZmZzZXQ7XG5cbiAgaWYgKCFjYXB0aW9uQXJyYXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgQ3VlID0gd2luZG93LldlYktpdERhdGFDdWUgfHwgd2luZG93LlZUVEN1ZTtcbiAgY2FwdGlvbkFycmF5LmZvckVhY2goZnVuY3Rpb24gKGNhcHRpb24pIHtcbiAgICB2YXIgdHJhY2sgPSBjYXB0aW9uLnN0cmVhbTtcbiAgICB2YXIgc3RhcnRUaW1lID0gY2FwdGlvbi5zdGFydFRpbWU7XG4gICAgdmFyIGVuZFRpbWUgPSBjYXB0aW9uLmVuZFRpbWU7XG5cbiAgICBpZiAoIWluYmFuZFRleHRUcmFja3NbdHJhY2tdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lICs9IHRpbWVzdGFtcE9mZnNldDtcbiAgICBlbmRUaW1lICs9IHRpbWVzdGFtcE9mZnNldDtcbiAgICBpbmJhbmRUZXh0VHJhY2tzW3RyYWNrXS5hZGRDdWUobmV3IEN1ZShzdGFydFRpbWUsIGVuZFRpbWUsIGNhcHRpb24udGV4dCkpO1xuICB9KTtcbn07XG4vKipcbiAqIEBmaWxlIHNlZ21lbnQtbG9hZGVyLmpzXG4gKi9cbi8vIGluIG1zXG5cblxudmFyIENIRUNLX0JVRkZFUl9ERUxBWSA9IDUwMDtcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB3ZSBzaG91bGQgY2FsbCBlbmRPZlN0cmVhbSBvbiB0aGUgbWVkaWEgc291cmNlIGJhc2VkXG4gKiBvbiB0aGUgc3RhdGUgb2YgdGhlIGJ1ZmZlciBvciBpZiBhcHBlbmVkIHNlZ21lbnQgd2FzIHRoZSBmaW5hbFxuICogc2VnbWVudCBpbiB0aGUgcGxheWxpc3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gbWVkaWFTb3VyY2UgdGhlIE1lZGlhU291cmNlIG9iamVjdFxuICogQHBhcmFtIHtOdW1iZXJ9IHNlZ21lbnRJbmRleCB0aGUgaW5kZXggb2Ygc2VnbWVudCB3ZSBsYXN0IGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gZG8gd2UgbmVlZCB0byBjYWxsIGVuZE9mU3RyZWFtIG9uIHRoZSBNZWRpYVNvdXJjZVxuICovXG5cbnZhciBkZXRlY3RFbmRPZlN0cmVhbSA9IGZ1bmN0aW9uIGRldGVjdEVuZE9mU3RyZWFtKHBsYXlsaXN0LCBtZWRpYVNvdXJjZSwgc2VnbWVudEluZGV4KSB7XG4gIGlmICghcGxheWxpc3QgfHwgIW1lZGlhU291cmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNlZ21lbnRzID0gcGxheWxpc3Quc2VnbWVudHM7IC8vIGRldGVybWluZSBhIGZldyBib29sZWFuIHZhbHVlcyB0byBoZWxwIG1ha2UgdGhlIGJyYW5jaCBiZWxvdyBlYXNpZXJcbiAgLy8gdG8gcmVhZFxuXG4gIHZhciBhcHBlbmRlZExhc3RTZWdtZW50ID0gc2VnbWVudEluZGV4ID09PSBzZWdtZW50cy5sZW5ndGg7IC8vIGlmIHdlJ3ZlIGJ1ZmZlcmVkIHRvIHRoZSBlbmQgb2YgdGhlIHZpZGVvLCB3ZSBuZWVkIHRvIGNhbGwgZW5kT2ZTdHJlYW1cbiAgLy8gc28gdGhhdCBNZWRpYVNvdXJjZXMgY2FuIHRyaWdnZXIgdGhlIGBlbmRlZGAgZXZlbnQgd2hlbiBpdCBydW5zIG91dCBvZlxuICAvLyBidWZmZXJlZCBkYXRhIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgbWVcblxuICByZXR1cm4gcGxheWxpc3QuZW5kTGlzdCAmJiBtZWRpYVNvdXJjZS5yZWFkeVN0YXRlID09PSAnb3BlbicgJiYgYXBwZW5kZWRMYXN0U2VnbWVudDtcbn07XG5cbnZhciBmaW5pdGUgPSBmdW5jdGlvbiBmaW5pdGUobnVtKSB7XG4gIHJldHVybiB0eXBlb2YgbnVtID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShudW0pO1xufTtcblxudmFyIGlsbGVnYWxNZWRpYVN3aXRjaCA9IGZ1bmN0aW9uIGlsbGVnYWxNZWRpYVN3aXRjaChsb2FkZXJUeXBlLCBzdGFydGluZ01lZGlhLCBuZXdTZWdtZW50TWVkaWEpIHtcbiAgLy8gQWx0aG91Z2ggdGhlc2UgY2hlY2tzIHNob3VsZCBtb3N0IGxpa2VseSBjb3ZlciBub24gJ21haW4nIHR5cGVzLCBmb3Igbm93IGl0IG5hcnJvd3NcbiAgLy8gdGhlIHNjb3BlIG9mIG91ciBjaGVja3MuXG4gIGlmIChsb2FkZXJUeXBlICE9PSAnbWFpbicgfHwgIXN0YXJ0aW5nTWVkaWEgfHwgIW5ld1NlZ21lbnRNZWRpYSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFuZXdTZWdtZW50TWVkaWEuY29udGFpbnNBdWRpbyAmJiAhbmV3U2VnbWVudE1lZGlhLmNvbnRhaW5zVmlkZW8pIHtcbiAgICByZXR1cm4gJ05laXRoZXIgYXVkaW8gbm9yIHZpZGVvIGZvdW5kIGluIHNlZ21lbnQuJztcbiAgfVxuXG4gIGlmIChzdGFydGluZ01lZGlhLmNvbnRhaW5zVmlkZW8gJiYgIW5ld1NlZ21lbnRNZWRpYS5jb250YWluc1ZpZGVvKSB7XG4gICAgcmV0dXJuICdPbmx5IGF1ZGlvIGZvdW5kIGluIHNlZ21lbnQgd2hlbiB3ZSBleHBlY3RlZCB2aWRlby4nICsgJyBXZSBjYW5cXCd0IHN3aXRjaCB0byBhdWRpbyBvbmx5IGZyb20gYSBzdHJlYW0gdGhhdCBoYWQgdmlkZW8uJyArICcgVG8gZ2V0IHJpZCBvZiB0aGlzIG1lc3NhZ2UsIHBsZWFzZSBhZGQgY29kZWMgaW5mb3JtYXRpb24gdG8gdGhlIG1hbmlmZXN0Lic7XG4gIH1cblxuICBpZiAoIXN0YXJ0aW5nTWVkaWEuY29udGFpbnNWaWRlbyAmJiBuZXdTZWdtZW50TWVkaWEuY29udGFpbnNWaWRlbykge1xuICAgIHJldHVybiAnVmlkZW8gZm91bmQgaW4gc2VnbWVudCB3aGVuIHdlIGV4cGVjdGVkIG9ubHkgYXVkaW8uJyArICcgV2UgY2FuXFwndCBzd2l0Y2ggdG8gYSBzdHJlYW0gd2l0aCB2aWRlbyBmcm9tIGFuIGF1ZGlvIG9ubHkgc3RyZWFtLicgKyAnIFRvIGdldCByaWQgb2YgdGhpcyBtZXNzYWdlLCBwbGVhc2UgYWRkIGNvZGVjIGluZm9ybWF0aW9uIHRvIHRoZSBtYW5pZmVzdC4nO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuLyoqXG4gKiBDYWxjdWxhdGVzIGEgdGltZSB2YWx1ZSB0aGF0IGlzIHNhZmUgdG8gcmVtb3ZlIGZyb20gdGhlIGJhY2sgYnVmZmVyIHdpdGhvdXQgaW50ZXJ1cHRpbmdcbiAqIHBsYXliYWNrLlxuICpcbiAqIEBwYXJhbSB7VGltZVJhbmdlfSBzZWVrYWJsZVxuICogICAgICAgIFRoZSBjdXJyZW50IHNlZWthYmxlIHJhbmdlXG4gKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0YXJnZXREdXJhdGlvblxuICogICAgICAgIFRoZSB0YXJnZXQgZHVyYXRpb24gb2YgdGhlIGN1cnJlbnQgcGxheWxpc3RcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqICAgICAgICAgVGltZSB0aGF0IGlzIHNhZmUgdG8gcmVtb3ZlIGZyb20gdGhlIGJhY2sgYnVmZmVyIHdpdGhvdXQgaW50ZXJ1cHRpbmcgcGxheWJhY2tcbiAqL1xuXG5cbnZhciBzYWZlQmFja0J1ZmZlclRyaW1UaW1lID0gZnVuY3Rpb24gc2FmZUJhY2tCdWZmZXJUcmltVGltZShzZWVrYWJsZSQkMSwgY3VycmVudFRpbWUsIHRhcmdldER1cmF0aW9uKSB7XG4gIHZhciByZW1vdmVUb1RpbWUgPSB2b2lkIDA7XG5cbiAgaWYgKHNlZWthYmxlJCQxLmxlbmd0aCAmJiBzZWVrYWJsZSQkMS5zdGFydCgwKSA+IDAgJiYgc2Vla2FibGUkJDEuc3RhcnQoMCkgPCBjdXJyZW50VGltZSkge1xuICAgIC8vIElmIHdlIGhhdmUgYSBzZWVrYWJsZSByYW5nZSB1c2UgdGhhdCBhcyB0aGUgbGltaXQgZm9yIHdoYXQgY2FuIGJlIHJlbW92ZWQgc2FmZWx5XG4gICAgcmVtb3ZlVG9UaW1lID0gc2Vla2FibGUkJDEuc3RhcnQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3RoZXJ3aXNlIHJlbW92ZSBhbnl0aGluZyBvbGRlciB0aGFuIDMwIHNlY29uZHMgYmVmb3JlIHRoZSBjdXJyZW50IHBsYXkgaGVhZFxuICAgIHJlbW92ZVRvVGltZSA9IGN1cnJlbnRUaW1lIC0gMzA7XG4gIH0gLy8gRG9uJ3QgYWxsb3cgcmVtb3ZpbmcgZnJvbSB0aGUgYnVmZmVyIHdpdGhpbiB0YXJnZXQgZHVyYXRpb24gb2YgY3VycmVudCB0aW1lXG4gIC8vIHRvIGF2b2lkIHRoZSBwb3NzaWJpbGl0eSBvZiByZW1vdmluZyB0aGUgR09QIGN1cnJlbnRseSBiZWluZyBwbGF5ZWQgd2hpY2ggY291bGRcbiAgLy8gY2F1c2UgcGxheWJhY2sgc3RhbGxzLlxuXG5cbiAgcmV0dXJuIE1hdGgubWluKHJlbW92ZVRvVGltZSwgY3VycmVudFRpbWUgLSB0YXJnZXREdXJhdGlvbik7XG59O1xuXG52YXIgc2VnbWVudEluZm9TdHJpbmcgPSBmdW5jdGlvbiBzZWdtZW50SW5mb1N0cmluZyhzZWdtZW50SW5mbykge1xuICB2YXIgX3NlZ21lbnRJbmZvJHNlZ21lbnQgPSBzZWdtZW50SW5mby5zZWdtZW50LFxuICAgICAgc3RhcnQgPSBfc2VnbWVudEluZm8kc2VnbWVudC5zdGFydCxcbiAgICAgIGVuZCA9IF9zZWdtZW50SW5mbyRzZWdtZW50LmVuZCxcbiAgICAgIF9zZWdtZW50SW5mbyRwbGF5bGlzdCA9IHNlZ21lbnRJbmZvLnBsYXlsaXN0LFxuICAgICAgc2VxID0gX3NlZ21lbnRJbmZvJHBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UsXG4gICAgICBpZCA9IF9zZWdtZW50SW5mbyRwbGF5bGlzdC5pZCxcbiAgICAgIF9zZWdtZW50SW5mbyRwbGF5bGlzdDIgPSBfc2VnbWVudEluZm8kcGxheWxpc3Quc2VnbWVudHMsXG4gICAgICBzZWdtZW50cyA9IF9zZWdtZW50SW5mbyRwbGF5bGlzdDIgPT09IHVuZGVmaW5lZCA/IFtdIDogX3NlZ21lbnRJbmZvJHBsYXlsaXN0MixcbiAgICAgIGluZGV4ID0gc2VnbWVudEluZm8ubWVkaWFJbmRleCxcbiAgICAgIHRpbWVsaW5lID0gc2VnbWVudEluZm8udGltZWxpbmU7XG4gIHJldHVybiBbJ2FwcGVuZGluZyBbJyArIGluZGV4ICsgJ10gb2YgWycgKyBzZXEgKyAnLCAnICsgKHNlcSArIHNlZ21lbnRzLmxlbmd0aCkgKyAnXSBmcm9tIHBsYXlsaXN0IFsnICsgaWQgKyAnXScsICdbJyArIHN0YXJ0ICsgJyA9PiAnICsgZW5kICsgJ10gaW4gdGltZWxpbmUgWycgKyB0aW1lbGluZSArICddJ10uam9pbignICcpO1xufTtcbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgbWFuYWdlcyBzZWdtZW50IGxvYWRpbmcgYW5kIGFwcGVuZGluZy5cbiAqXG4gKiBAY2xhc3MgU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIG9wdGlvbnNcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG5cbnZhciBTZWdtZW50TG9hZGVyID0gZnVuY3Rpb24gKF92aWRlb2pzJEV2ZW50VGFyZ2V0KSB7XG4gIGluaGVyaXRzKFNlZ21lbnRMb2FkZXIsIF92aWRlb2pzJEV2ZW50VGFyZ2V0KTtcblxuICBmdW5jdGlvbiBTZWdtZW50TG9hZGVyKHNldHRpbmdzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VnbWVudExvYWRlcik7IC8vIGNoZWNrIHByZS1jb25kaXRpb25zXG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZWdtZW50TG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2VnbWVudExvYWRlcikpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5pdGlhbGl6YXRpb24gc2V0dGluZ3MgYXJlIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5jdXJyZW50VGltZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gY3VycmVudFRpbWUgZ2V0dGVyIHNwZWNpZmllZCcpO1xuICAgIH1cblxuICAgIGlmICghc2V0dGluZ3MubWVkaWFTb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIE1lZGlhU291cmNlIHNwZWNpZmllZCcpO1xuICAgIH0gLy8gcHVibGljIHByb3BlcnRpZXNcblxuXG4gICAgX3RoaXMuYmFuZHdpZHRoID0gc2V0dGluZ3MuYmFuZHdpZHRoO1xuICAgIF90aGlzLnRocm91Z2hwdXQgPSB7XG4gICAgICByYXRlOiAwLFxuICAgICAgY291bnQ6IDBcbiAgICB9O1xuICAgIF90aGlzLnJvdW5kVHJpcCA9IE5hTjtcblxuICAgIF90aGlzLnJlc2V0U3RhdHNfKCk7XG5cbiAgICBfdGhpcy5tZWRpYUluZGV4ID0gbnVsbDsgLy8gcHJpdmF0ZSBzZXR0aW5nc1xuXG4gICAgX3RoaXMuaGFzUGxheWVkXyA9IHNldHRpbmdzLmhhc1BsYXllZDtcbiAgICBfdGhpcy5jdXJyZW50VGltZV8gPSBzZXR0aW5ncy5jdXJyZW50VGltZTtcbiAgICBfdGhpcy5zZWVrYWJsZV8gPSBzZXR0aW5ncy5zZWVrYWJsZTtcbiAgICBfdGhpcy5zZWVraW5nXyA9IHNldHRpbmdzLnNlZWtpbmc7XG4gICAgX3RoaXMuZHVyYXRpb25fID0gc2V0dGluZ3MuZHVyYXRpb247XG4gICAgX3RoaXMubWVkaWFTb3VyY2VfID0gc2V0dGluZ3MubWVkaWFTb3VyY2U7XG4gICAgX3RoaXMuaGxzXyA9IHNldHRpbmdzLmhscztcbiAgICBfdGhpcy5sb2FkZXJUeXBlXyA9IHNldHRpbmdzLmxvYWRlclR5cGU7XG4gICAgX3RoaXMuc3RhcnRpbmdNZWRpYV8gPSB2b2lkIDA7XG4gICAgX3RoaXMuc2VnbWVudE1ldGFkYXRhVHJhY2tfID0gc2V0dGluZ3Muc2VnbWVudE1ldGFkYXRhVHJhY2s7XG4gICAgX3RoaXMuZ29hbEJ1ZmZlckxlbmd0aF8gPSBzZXR0aW5ncy5nb2FsQnVmZmVyTGVuZ3RoO1xuICAgIF90aGlzLnNvdXJjZVR5cGVfID0gc2V0dGluZ3Muc291cmNlVHlwZTtcbiAgICBfdGhpcy5pbmJhbmRUZXh0VHJhY2tzXyA9IHNldHRpbmdzLmluYmFuZFRleHRUcmFja3M7XG4gICAgX3RoaXMuc3RhdGVfID0gJ0lOSVQnOyAvLyBwcml2YXRlIGluc3RhbmNlIHZhcmlhYmxlc1xuXG4gICAgX3RoaXMuY2hlY2tCdWZmZXJUaW1lb3V0XyA9IG51bGw7XG4gICAgX3RoaXMuZXJyb3JfID0gdm9pZCAwO1xuICAgIF90aGlzLmN1cnJlbnRUaW1lbGluZV8gPSAtMTtcbiAgICBfdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgIF90aGlzLm1pbWVUeXBlXyA9IG51bGw7XG4gICAgX3RoaXMuc291cmNlVXBkYXRlcl8gPSBudWxsO1xuICAgIF90aGlzLnhock9wdGlvbnNfID0gbnVsbDsgLy8gRnJhZ21lbnRlZCBtcDQgcGxheWJhY2tcblxuICAgIF90aGlzLmFjdGl2ZUluaXRTZWdtZW50SWRfID0gbnVsbDtcbiAgICBfdGhpcy5pbml0U2VnbWVudHNfID0ge307IC8vIEhMU2UgcGxheWJhY2tcblxuICAgIF90aGlzLmNhY2hlRW5jcnlwdGlvbktleXNfID0gc2V0dGluZ3MuY2FjaGVFbmNyeXB0aW9uS2V5cztcbiAgICBfdGhpcy5rZXlDYWNoZV8gPSB7fTsgLy8gRm1wNCBDYXB0aW9uUGFyc2VyXG5cbiAgICBpZiAoX3RoaXMubG9hZGVyVHlwZV8gPT09ICdtYWluJykge1xuICAgICAgX3RoaXMuY2FwdGlvblBhcnNlcl8gPSBuZXcgQ2FwdGlvblBhcnNlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5jYXB0aW9uUGFyc2VyXyA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMuZGVjcnlwdGVyXyA9IHNldHRpbmdzLmRlY3J5cHRlcjsgLy8gTWFuYWdlcyB0aGUgdHJhY2tpbmcgYW5kIGdlbmVyYXRpb24gb2Ygc3luYy1wb2ludHMsIG1hcHBpbmdzXG4gICAgLy8gYmV0d2VlbiBhIHRpbWUgaW4gdGhlIGRpc3BsYXkgdGltZSBhbmQgYSBzZWdtZW50IGluZGV4IHdpdGhpblxuICAgIC8vIGEgcGxheWxpc3RcblxuICAgIF90aGlzLnN5bmNDb250cm9sbGVyXyA9IHNldHRpbmdzLnN5bmNDb250cm9sbGVyO1xuICAgIF90aGlzLnN5bmNQb2ludF8gPSB7XG4gICAgICBzZWdtZW50SW5kZXg6IDAsXG4gICAgICB0aW1lOiAwXG4gICAgfTtcblxuICAgIF90aGlzLnN5bmNDb250cm9sbGVyXy5vbignc3luY2luZm91cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcignc3luY2luZm91cGRhdGUnKTtcbiAgICB9KTtcblxuICAgIF90aGlzLm1lZGlhU291cmNlXy5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmVuZGVkXyA9IGZhbHNlO1xuICAgIH0pOyAvLyAuLi5mb3IgZGV0ZXJtaW5pbmcgdGhlIGZldGNoIGxvY2F0aW9uXG5cblxuICAgIF90aGlzLmZldGNoQXRCdWZmZXJfID0gZmFsc2U7XG4gICAgX3RoaXMubG9nZ2VyXyA9IGxvZ2dlcignU2VnbWVudExvYWRlclsnICsgX3RoaXMubG9hZGVyVHlwZV8gKyAnXScpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ3N0YXRlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlXztcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShuZXdTdGF0ZSkge1xuICAgICAgICBpZiAobmV3U3RhdGUgIT09IHRoaXMuc3RhdGVfKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXJfKHRoaXMuc3RhdGVfICsgJyAtPiAnICsgbmV3U3RhdGUpO1xuICAgICAgICAgIHRoaXMuc3RhdGVfID0gbmV3U3RhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIHJlc2V0IGFsbCBvZiBvdXIgbWVkaWEgc3RhdHNcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICBjcmVhdGVDbGFzcyhTZWdtZW50TG9hZGVyLCBbe1xuICAgIGtleTogJ3Jlc2V0U3RhdHNfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRTdGF0c18oKSB7XG4gICAgICB0aGlzLm1lZGlhQnl0ZXNUcmFuc2ZlcnJlZCA9IDA7XG4gICAgICB0aGlzLm1lZGlhUmVxdWVzdHMgPSAwO1xuICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzQWJvcnRlZCA9IDA7XG4gICAgICB0aGlzLm1lZGlhUmVxdWVzdHNUaW1lZG91dCA9IDA7XG4gICAgICB0aGlzLm1lZGlhUmVxdWVzdHNFcnJvcmVkID0gMDtcbiAgICAgIHRoaXMubWVkaWFUcmFuc2ZlckR1cmF0aW9uID0gMDtcbiAgICAgIHRoaXMubWVkaWFTZWNvbmRzTG9hZGVkID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZGlzcG9zZSBvZiB0aGUgU2VnbWVudExvYWRlciBhbmQgcmVzZXQgdG8gdGhlIGRlZmF1bHQgc3RhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGlzcG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ0RJU1BPU0VEJztcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIHRoaXMuYWJvcnRfKCk7XG5cbiAgICAgIGlmICh0aGlzLnNvdXJjZVVwZGF0ZXJfKSB7XG4gICAgICAgIHRoaXMuc291cmNlVXBkYXRlcl8uZGlzcG9zZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc2V0U3RhdHNfKCk7XG5cbiAgICAgIGlmICh0aGlzLmNhcHRpb25QYXJzZXJfKSB7XG4gICAgICAgIHRoaXMuY2FwdGlvblBhcnNlcl8ucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogYWJvcnQgYW55dGhpbmcgdGhhdCBpcyBjdXJyZW50bHkgZG9pbmcgb24gd2l0aCB0aGUgU2VnbWVudExvYWRlclxuICAgICAqIGFuZCByZXNldCB0byBhIGRlZmF1bHQgc3RhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWJvcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlICE9PSAnV0FJVElORycpIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1NlZ21lbnRfKSB7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFib3J0XygpOyAvLyBXZSBhYm9ydGVkIHRoZSByZXF1ZXN0cyB3ZSB3ZXJlIHdhaXRpbmcgb24sIHNvIHJlc2V0IHRoZSBsb2FkZXIncyBzdGF0ZSB0byBSRUFEWVxuICAgICAgLy8gc2luY2Ugd2UgYXJlIG5vIGxvbmdlciBcIndhaXRpbmdcIiBvbiBhbnkgcmVxdWVzdHMuIFhIUiBjYWxsYmFjayBpcyBub3QgYWx3YXlzIHJ1blxuICAgICAgLy8gd2hlbiB0aGUgcmVxdWVzdCBpcyBhYm9ydGVkLiBUaGlzIHdpbGwgcHJldmVudCB0aGUgbG9hZGVyIGZyb20gYmVpbmcgc3R1Y2sgaW4gdGhlXG4gICAgICAvLyBXQUlUSU5HIHN0YXRlIGluZGVmaW5pdGVseS5cblxuICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7IC8vIGRvbid0IHdhaXQgZm9yIGJ1ZmZlciBjaGVjayB0aW1lb3V0cyB0byBiZWdpbiBmZXRjaGluZyB0aGVcbiAgICAgIC8vIG5leHQgc2VnbWVudFxuXG4gICAgICBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5tb25pdG9yQnVmZmVyXygpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBhYm9ydCBhbGwgcGVuZGluZyB4aHIgcmVxdWVzdHMgYW5kIG51bGwgYW55IHBlbmRpbmcgc2VnZW1lbnRzXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhYm9ydF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhYm9ydF8oKSB7XG4gICAgICBpZiAodGhpcy5wZW5kaW5nU2VnbWVudF8pIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nU2VnbWVudF8uYWJvcnRSZXF1ZXN0cygpO1xuICAgICAgfSAvLyBjbGVhciBvdXQgdGhlIHNlZ21lbnQgYmVpbmcgcHJvY2Vzc2VkXG5cblxuICAgICAgdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBzZXQgYW4gZXJyb3Igb24gdGhlIHNlZ21lbnQgbG9hZGVyIGFuZCBudWxsIG91dCBhbnkgcGVuZGluZyBzZWdlbWVudHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIHRoZSBlcnJvciB0byBzZXQgb24gdGhlIFNlZ21lbnRMb2FkZXJcbiAgICAgKiBAcmV0dXJuIHtFcnJvcn0gdGhlIGVycm9yIHRoYXQgd2FzIHNldCBvciB0aGF0IGlzIGN1cnJlbnRseSBzZXRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZXJyb3InLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgX2Vycm9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmVycm9yXyA9IF9lcnJvcjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3JfO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuZE9mU3RyZWFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5kT2ZTdHJlYW0oKSB7XG4gICAgICB0aGlzLmVuZGVkXyA9IHRydWU7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGljaCB0aW1lIHJhbmdlcyBhcmUgYnVmZmVyZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAgICAgKiAgICAgICAgIFRpbWVSYW5nZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGJ1ZmZlcmVkIHJhbmdlc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdidWZmZXJlZF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWZmZXJlZF8oKSB7XG4gICAgICBpZiAoIXRoaXMuc291cmNlVXBkYXRlcl8pIHtcbiAgICAgICAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2VzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZVVwZGF0ZXJfLmJ1ZmZlcmVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYW5kIHNldHMgaW5pdCBzZWdtZW50IGZvciB0aGUgcHJvdmlkZWQgbWFwXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwXG4gICAgICogICAgICAgIFRoZSBtYXAgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgaW5pdCBzZWdtZW50IHRvIGdldCBvciBzZXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW49fSBzZXRcbiAgICAgKiAgICAgICAgSWYgdHJ1ZSwgdGhlIGluaXQgc2VnbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1hcCBzaG91bGQgYmUgc2F2ZWRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICogICAgICAgICBtYXAgb2JqZWN0IGZvciBkZXNpcmVkIGluaXQgc2VnbWVudFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbml0U2VnbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRTZWdtZW50KG1hcCkge1xuICAgICAgdmFyIHNldCQkMSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIGlmICghbWFwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWQgPSBpbml0U2VnbWVudElkKG1hcCk7XG4gICAgICB2YXIgc3RvcmVkTWFwID0gdGhpcy5pbml0U2VnbWVudHNfW2lkXTtcblxuICAgICAgaWYgKHNldCQkMSAmJiAhc3RvcmVkTWFwICYmIG1hcC5ieXRlcykge1xuICAgICAgICB0aGlzLmluaXRTZWdtZW50c19baWRdID0gc3RvcmVkTWFwID0ge1xuICAgICAgICAgIHJlc29sdmVkVXJpOiBtYXAucmVzb2x2ZWRVcmksXG4gICAgICAgICAgYnl0ZXJhbmdlOiBtYXAuYnl0ZXJhbmdlLFxuICAgICAgICAgIGJ5dGVzOiBtYXAuYnl0ZXMsXG4gICAgICAgICAgdGltZXNjYWxlczogbWFwLnRpbWVzY2FsZXMsXG4gICAgICAgICAgdmlkZW9UcmFja0lkczogbWFwLnZpZGVvVHJhY2tJZHNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlZE1hcCB8fCBtYXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYW5kIHNldHMga2V5IGZvciB0aGUgcHJvdmlkZWQga2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0ga2V5XG4gICAgICogICAgICAgIFRoZSBrZXkgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUga2V5IHRvIGdldCBvciBzZXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW49fSBzZXRcbiAgICAgKiAgICAgICAgSWYgdHJ1ZSwgdGhlIGtleSBmb3IgdGhlIHByb3ZpZGVkIGtleSBzaG91bGQgYmUgc2F2ZWRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICogICAgICAgICBLZXkgb2JqZWN0IGZvciBkZXNpcmVkIGtleVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWdtZW50S2V5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VnbWVudEtleShrZXkpIHtcbiAgICAgIHZhciBzZXQkJDEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGlkID0gc2VnbWVudEtleUlkKGtleSk7XG4gICAgICB2YXIgc3RvcmVkS2V5ID0gdGhpcy5rZXlDYWNoZV9baWRdOyAvLyBUT0RPOiBXZSBzaG91bGQgdXNlIHRoZSBIVFRQIEV4cGlyZXMgaGVhZGVyIHRvIGludmFsaWRhdGUgb3VyIGNhY2hlIHBlclxuICAgICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXBhbnRvcy1odHRwLWxpdmUtc3RyZWFtaW5nLTIzI3NlY3Rpb24tNi4yLjNcblxuICAgICAgaWYgKHRoaXMuY2FjaGVFbmNyeXB0aW9uS2V5c18gJiYgc2V0JCQxICYmICFzdG9yZWRLZXkgJiYga2V5LmJ5dGVzKSB7XG4gICAgICAgIHRoaXMua2V5Q2FjaGVfW2lkXSA9IHN0b3JlZEtleSA9IHtcbiAgICAgICAgICByZXNvbHZlZFVyaToga2V5LnJlc29sdmVkVXJpLFxuICAgICAgICAgIGJ5dGVzOiBrZXkuYnl0ZXNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgcmVzb2x2ZWRVcmk6IChzdG9yZWRLZXkgfHwga2V5KS5yZXNvbHZlZFVyaVxuICAgICAgfTtcblxuICAgICAgaWYgKHN0b3JlZEtleSkge1xuICAgICAgICByZXN1bHQuYnl0ZXMgPSBzdG9yZWRLZXkuYnl0ZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbGwgY29uZmlndXJhdGlvbiByZXF1aXJlZCBmb3IgbG9hZGluZyBpcyBwcmVzZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSBhbGwgY29uZmlndXJhdGlvbiBpcyByZWFkeSBmb3IgbG9hZGluZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvdWxkQmVnaW5Mb2FkaW5nXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvdWxkQmVnaW5Mb2FkaW5nXygpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXlsaXN0XyAmJiAoIC8vIHRoZSBzb3VyY2UgdXBkYXRlciBpcyBjcmVhdGVkIHdoZW4gaW5pdF8gaXMgY2FsbGVkLCBzbyBlaXRoZXIgaGF2aW5nIGFcbiAgICAgIC8vIHNvdXJjZSB1cGRhdGVyIG9yIGJlaW5nIGluIHRoZSBJTklUIHN0YXRlIHdpdGggYSBtaW1lVHlwZSBpcyBlbm91Z2hcbiAgICAgIC8vIHRvIHNheSB3ZSBoYXZlIGFsbCB0aGUgbmVlZGVkIGNvbmZpZ3VyYXRpb24gdG8gc3RhcnQgbG9hZGluZy5cbiAgICAgIHRoaXMuc291cmNlVXBkYXRlcl8gfHwgdGhpcy5taW1lVHlwZV8gJiYgdGhpcy5zdGF0ZSA9PT0gJ0lOSVQnKSAmJiAhdGhpcy5wYXVzZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogbG9hZCBhIHBsYXlsaXN0IGFuZCBzdGFydCB0byBmaWxsIHRoZSBidWZmZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICAvLyB1bi1wYXVzZVxuICAgICAgdGhpcy5tb25pdG9yQnVmZmVyXygpOyAvLyBpZiB3ZSBkb24ndCBoYXZlIGEgcGxheWxpc3QgeWV0LCBrZWVwIHdhaXRpbmcgZm9yIG9uZSB0byBiZVxuICAgICAgLy8gc3BlY2lmaWVkXG5cbiAgICAgIGlmICghdGhpcy5wbGF5bGlzdF8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBub3Qgc3VyZSBpZiB0aGlzIGlzIHRoZSBiZXN0IHBsYWNlIGZvciB0aGlzXG5cblxuICAgICAgdGhpcy5zeW5jQ29udHJvbGxlcl8uc2V0RGF0ZVRpbWVNYXBwaW5nKHRoaXMucGxheWxpc3RfKTsgLy8gaWYgYWxsIHRoZSBjb25maWd1cmF0aW9uIGlzIHJlYWR5LCBpbml0aWFsaXplIGFuZCBiZWdpbiBsb2FkaW5nXG5cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnSU5JVCcgJiYgdGhpcy5jb3VsZEJlZ2luTG9hZGluZ18oKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbml0XygpO1xuICAgICAgfSAvLyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIHByb2Nlc3NpbmcgYSBzZWdtZW50IGFscmVhZHksIGRvbid0XG4gICAgICAvLyBraWNrIG9mZiBhbiBhZGRpdGlvbmFsIHNlZ21lbnQgcmVxdWVzdFxuXG5cbiAgICAgIGlmICghdGhpcy5jb3VsZEJlZ2luTG9hZGluZ18oKSB8fCB0aGlzLnN0YXRlICE9PSAnUkVBRFknICYmIHRoaXMuc3RhdGUgIT09ICdJTklUJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhdGUgPSAnUkVBRFknO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmNlIGFsbCB0aGUgc3RhcnRpbmcgcGFyYW1ldGVycyBoYXZlIGJlZW4gc3BlY2lmaWVkLCBiZWdpblxuICAgICAqIG9wZXJhdGlvbi4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCBmcm9tIHRoZSBJTklUXG4gICAgICogc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbml0XycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRfKCkge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfID0gbmV3IFNvdXJjZVVwZGF0ZXIodGhpcy5tZWRpYVNvdXJjZV8sIHRoaXMubWltZVR5cGVfLCB0aGlzLmxvYWRlclR5cGVfLCB0aGlzLnNvdXJjZUJ1ZmZlckVtaXR0ZXJfKTtcbiAgICAgIHRoaXMucmVzZXRFdmVyeXRoaW5nKCk7XG4gICAgICByZXR1cm4gdGhpcy5tb25pdG9yQnVmZmVyXygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBzZXQgYSBwbGF5bGlzdCBvbiB0aGUgc2VnbWVudCBsb2FkZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UGxheWxpc3RMb2FkZXJ9IG1lZGlhIHRoZSBwbGF5bGlzdCB0byBzZXQgb24gdGhlIHNlZ21lbnQgbG9hZGVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BsYXlsaXN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheWxpc3QobmV3UGxheWxpc3QpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgaWYgKCFuZXdQbGF5bGlzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGRQbGF5bGlzdCA9IHRoaXMucGxheWxpc3RfO1xuICAgICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87XG4gICAgICB0aGlzLnBsYXlsaXN0XyA9IG5ld1BsYXlsaXN0O1xuICAgICAgdGhpcy54aHJPcHRpb25zXyA9IG9wdGlvbnM7IC8vIHdoZW4gd2UgaGF2ZW4ndCBzdGFydGVkIHBsYXlpbmcgeWV0LCB0aGUgc3RhcnQgb2YgYSBsaXZlIHBsYXlsaXN0XG4gICAgICAvLyBpcyBhbHdheXMgb3VyIHplcm8tdGltZSBzbyBmb3JjZSBhIHN5bmMgdXBkYXRlIGVhY2ggdGltZSB0aGUgcGxheWxpc3RcbiAgICAgIC8vIGlzIHJlZnJlc2hlZCBmcm9tIHRoZSBzZXJ2ZXJcblxuICAgICAgaWYgKCF0aGlzLmhhc1BsYXllZF8oKSkge1xuICAgICAgICBuZXdQbGF5bGlzdC5zeW5jSW5mbyA9IHtcbiAgICAgICAgICBtZWRpYVNlcXVlbmNlOiBuZXdQbGF5bGlzdC5tZWRpYVNlcXVlbmNlLFxuICAgICAgICAgIHRpbWU6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9sZElkID0gbnVsbDtcblxuICAgICAgaWYgKG9sZFBsYXlsaXN0KSB7XG4gICAgICAgIGlmIChvbGRQbGF5bGlzdC5pZCkge1xuICAgICAgICAgIG9sZElkID0gb2xkUGxheWxpc3QuaWQ7XG4gICAgICAgIH0gZWxzZSBpZiAob2xkUGxheWxpc3QudXJpKSB7XG4gICAgICAgICAgb2xkSWQgPSBvbGRQbGF5bGlzdC51cmk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2dnZXJfKCdwbGF5bGlzdCB1cGRhdGUgWycgKyBvbGRJZCArICcgPT4gJyArIChuZXdQbGF5bGlzdC5pZCB8fCBuZXdQbGF5bGlzdC51cmkpICsgJ10nKTsgLy8gaW4gVk9ELCB0aGlzIGlzIGFsd2F5cyBhIHJlbmRpdGlvbiBzd2l0Y2ggKG9yIHdlIHVwZGF0ZWQgb3VyIHN5bmNJbmZvIGFib3ZlKVxuICAgICAgLy8gaW4gTElWRSwgd2UgYWx3YXlzIHdhbnQgdG8gdXBkYXRlIHdpdGggbmV3IHBsYXlsaXN0cyAoaW5jbHVkaW5nIHJlZnJlc2hlcylcblxuICAgICAgdGhpcy50cmlnZ2VyKCdzeW5jaW5mb3VwZGF0ZScpOyAvLyBpZiB3ZSB3ZXJlIHVucGF1c2VkIGJ1dCB3YWl0aW5nIGZvciBhIHBsYXlsaXN0LCBzdGFydFxuICAgICAgLy8gYnVmZmVyaW5nIG5vd1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0lOSVQnICYmIHRoaXMuY291bGRCZWdpbkxvYWRpbmdfKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5pdF8oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvbGRQbGF5bGlzdCB8fCBvbGRQbGF5bGlzdC51cmkgIT09IG5ld1BsYXlsaXN0LnVyaSkge1xuICAgICAgICBpZiAodGhpcy5tZWRpYUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gd2UgbXVzdCBcInJlc3luY1wiIHRoZSBzZWdtZW50IGxvYWRlciB3aGVuIHdlIHN3aXRjaCByZW5kaXRpb25zIGFuZFxuICAgICAgICAgIC8vIHRoZSBzZWdtZW50IGxvYWRlciBpcyBhbHJlYWR5IHN5bmNlZCB0byB0aGUgcHJldmlvdXMgcmVuZGl0aW9uXG4gICAgICAgICAgdGhpcy5yZXN5bmNMb2FkZXIoKTtcbiAgICAgICAgfSAvLyB0aGUgcmVzdCBvZiB0aGlzIGZ1bmN0aW9uIGRlcGVuZHMgb24gYG9sZFBsYXlsaXN0YCBiZWluZyBkZWZpbmVkXG5cblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHdlIHJlbG9hZGVkIHRoZSBzYW1lIHBsYXlsaXN0IHNvIHdlIGFyZSBpbiBhIGxpdmUgc2NlbmFyaW9cbiAgICAgIC8vIGFuZCB3ZSB3aWxsIGxpa2VseSBuZWVkIHRvIGFkanVzdCB0aGUgbWVkaWFJbmRleFxuXG5cbiAgICAgIHZhciBtZWRpYVNlcXVlbmNlRGlmZiA9IG5ld1BsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgLSBvbGRQbGF5bGlzdC5tZWRpYVNlcXVlbmNlO1xuICAgICAgdGhpcy5sb2dnZXJfKCdsaXZlIHdpbmRvdyBzaGlmdCBbJyArIG1lZGlhU2VxdWVuY2VEaWZmICsgJ10nKTsgLy8gdXBkYXRlIHRoZSBtZWRpYUluZGV4IG9uIHRoZSBTZWdtZW50TG9hZGVyXG4gICAgICAvLyB0aGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIHdlIGNhbiBhYm9ydCBhIHJlcXVlc3QgYW5kIHRoaXMgdmFsdWUgbXVzdCBiZVxuICAgICAgLy8gZXF1YWwgdG8gdGhlIGxhc3QgYXBwZW5kZWQgbWVkaWFJbmRleFxuXG4gICAgICBpZiAodGhpcy5tZWRpYUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMubWVkaWFJbmRleCAtPSBtZWRpYVNlcXVlbmNlRGlmZjtcbiAgICAgIH0gLy8gdXBkYXRlIHRoZSBtZWRpYUluZGV4IG9uIHRoZSBTZWdtZW50SW5mbyBvYmplY3RcbiAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2Ugd2Ugd2lsbCB1cGRhdGUgdGhpcy5tZWRpYUluZGV4IHdpdGggdGhpcyB2YWx1ZVxuICAgICAgLy8gaW4gYGhhbmRsZVVwZGF0ZUVuZF9gIGFmdGVyIHRoZSBzZWdtZW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBhcHBlbmRlZFxuXG5cbiAgICAgIGlmIChzZWdtZW50SW5mbykge1xuICAgICAgICBzZWdtZW50SW5mby5tZWRpYUluZGV4IC09IG1lZGlhU2VxdWVuY2VEaWZmOyAvLyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgcmVmZXJlbmNlZCBzZWdtZW50IHNvIHRoYXQgdGltaW5nIGluZm9ybWF0aW9uIGlzXG4gICAgICAgIC8vIHNhdmVkIGZvciB0aGUgbmV3IHBsYXlsaXN0J3Mgc2VnbWVudCwgaG93ZXZlciwgaWYgdGhlIHNlZ21lbnQgZmVsbCBvZmYgdGhlXG4gICAgICAgIC8vIHBsYXlsaXN0LCB3ZSBjYW4gbGVhdmUgdGhlIG9sZCByZWZlcmVuY2UgYW5kIGp1c3QgbG9zZSB0aGUgdGltaW5nIGluZm9cblxuICAgICAgICBpZiAoc2VnbWVudEluZm8ubWVkaWFJbmRleCA+PSAwKSB7XG4gICAgICAgICAgc2VnbWVudEluZm8uc2VnbWVudCA9IG5ld1BsYXlsaXN0LnNlZ21lbnRzW3NlZ21lbnRJbmZvLm1lZGlhSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3luY0NvbnRyb2xsZXJfLnNhdmVFeHBpcmVkU2VnbWVudEluZm8ob2xkUGxheWxpc3QsIG5ld1BsYXlsaXN0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJldmVudCB0aGUgbG9hZGVyIGZyb20gZmV0Y2hpbmcgYWRkaXRpb25hbCBzZWdtZW50cy4gSWYgdGhlcmVcbiAgICAgKiBpcyBhIHNlZ21lbnQgcmVxdWVzdCBvdXRzdGFuZGluZywgaXQgd2lsbCBmaW5pc2ggcHJvY2Vzc2luZ1xuICAgICAqIGJlZm9yZSB0aGUgbG9hZGVyIGhhbHRzLiBBIHNlZ21lbnQgbG9hZGVyIGNhbiBiZSB1bnBhdXNlZCBieVxuICAgICAqIGNhbGxpbmcgbG9hZCgpLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwYXVzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgaWYgKHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xykge1xuICAgICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfKTtcbiAgICAgICAgdGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzZWdtZW50IGxvYWRlciBpcyBmZXRjaGluZyBhZGRpdGlvbmFsXG4gICAgICogc2VnbWVudHMgd2hlbiBnaXZlbiB0aGUgb3Bwb3J0dW5pdHkuIFRoaXMgcHJvcGVydHkgY2FuIGJlXG4gICAgICogbW9kaWZpZWQgdGhyb3VnaCBjYWxscyB0byBwYXVzZSgpIGFuZCBsb2FkKCkuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrQnVmZmVyVGltZW91dF8gPT09IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNyZWF0ZS9zZXQgdGhlIGZvbGxvd2luZyBtaW1ldHlwZSBvbiB0aGUgU291cmNlQnVmZmVyIHRocm91Z2ggYVxuICAgICAqIFNvdXJjZVVwZGF0ZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtaW1lVHlwZSB0aGUgbWltZSB0eXBlIHN0cmluZyB0byB1c2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlQnVmZmVyRW1pdHRlciBhbiBldmVudCBlbWl0dGVyIHRoYXQgZmlyZXMgd2hlbiBhIHNvdXJjZSBidWZmZXJcbiAgICAgKiBpcyBhZGRlZCB0byB0aGUgbWVkaWEgc291cmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21pbWVUeXBlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWltZVR5cGUoX21pbWVUeXBlLCBzb3VyY2VCdWZmZXJFbWl0dGVyKSB7XG4gICAgICBpZiAodGhpcy5taW1lVHlwZV8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1pbWVUeXBlXyA9IF9taW1lVHlwZTtcbiAgICAgIHRoaXMuc291cmNlQnVmZmVyRW1pdHRlcl8gPSBzb3VyY2VCdWZmZXJFbWl0dGVyOyAvLyBpZiB3ZSB3ZXJlIHVucGF1c2VkIGJ1dCB3YWl0aW5nIGZvciBhIHNvdXJjZVVwZGF0ZXIsIHN0YXJ0XG4gICAgICAvLyBidWZmZXJpbmcgbm93XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnSU5JVCcgJiYgdGhpcy5jb3VsZEJlZ2luTG9hZGluZ18oKSkge1xuICAgICAgICB0aGlzLmluaXRfKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbGwgdGhlIGJ1ZmZlcmVkIGRhdGEgYW5kIHJlc2V0IHRoZSBTZWdtZW50TG9hZGVyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2RvbmVdIGFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIHJlbW92ZVxuICAgICAqIG9wZXJhdGlvbiBpcyBjb21wbGV0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldEV2ZXJ5dGhpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEV2ZXJ5dGhpbmcoZG9uZSkge1xuICAgICAgdGhpcy5lbmRlZF8gPSBmYWxzZTtcbiAgICAgIHRoaXMucmVzZXRMb2FkZXIoKTtcbiAgICAgIHRoaXMucmVtb3ZlKDAsIHRoaXMuZHVyYXRpb25fKCksIGRvbmUpOyAvLyBjbGVhcnMgZm1wNCBjYXB0aW9uc1xuXG4gICAgICBpZiAodGhpcy5jYXB0aW9uUGFyc2VyXykge1xuICAgICAgICB0aGlzLmNhcHRpb25QYXJzZXJfLmNsZWFyQWxsQ2FwdGlvbnMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldGV2ZXJ5dGhpbmcnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yY2UgdGhlIFNlZ21lbnRMb2FkZXIgdG8gcmVzeW5jIGFuZCBzdGFydCBsb2FkaW5nIGFyb3VuZCB0aGUgY3VycmVudFRpbWUgaW5zdGVhZFxuICAgICAqIG9mIHN0YXJ0aW5nIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICAgICAqXG4gICAgICogVXNlZnVsIGZvciBmYXN0IHF1YWxpdHkgY2hhbmdlc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldExvYWRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0TG9hZGVyKCkge1xuICAgICAgdGhpcy5mZXRjaEF0QnVmZmVyXyA9IGZhbHNlO1xuICAgICAgdGhpcy5yZXN5bmNMb2FkZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yY2UgdGhlIFNlZ21lbnRMb2FkZXIgdG8gcmVzdGFydCBzeW5jaHJvbml6YXRpb24gYW5kIG1ha2UgYSBjb25zZXJ2YXRpdmUgZ3Vlc3NcbiAgICAgKiBiZWZvcmUgcmV0dXJuaW5nIHRvIHRoZSBzaW1wbGUgd2Fsay1mb3J3YXJkIG1ldGhvZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXN5bmNMb2FkZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN5bmNMb2FkZXIoKSB7XG4gICAgICB0aGlzLm1lZGlhSW5kZXggPSBudWxsO1xuICAgICAgdGhpcy5zeW5jUG9pbnRfID0gbnVsbDtcbiAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFueSBkYXRhIGluIHRoZSBzb3VyY2UgYnVmZmVyIGJldHdlZW4gc3RhcnQgYW5kIGVuZCB0aW1lc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCAtIHRoZSBzdGFydCB0aW1lIG9mIHRoZSByZWdpb24gdG8gcmVtb3ZlIGZyb20gdGhlIGJ1ZmZlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgLSB0aGUgZW5kIHRpbWUgb2YgdGhlIHJlZ2lvbiB0byByZW1vdmUgZnJvbSB0aGUgYnVmZmVyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2RvbmVdIC0gYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgcmVtb3ZlXG4gICAgICogb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShzdGFydCwgZW5kLCBkb25lKSB7XG4gICAgICBpZiAodGhpcy5zb3VyY2VVcGRhdGVyXykge1xuICAgICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLnJlbW92ZShzdGFydCwgZW5kLCBkb25lKTtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydCwgZW5kLCB0aGlzLnNlZ21lbnRNZXRhZGF0YVRyYWNrXyk7XG5cbiAgICAgIGlmICh0aGlzLmluYmFuZFRleHRUcmFja3NfKSB7XG4gICAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuaW5iYW5kVGV4dFRyYWNrc18pIHtcbiAgICAgICAgICByZW1vdmVDdWVzRnJvbVRyYWNrKHN0YXJ0LCBlbmQsIHRoaXMuaW5iYW5kVGV4dFRyYWNrc19baWRdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAocmUtKXNjaGVkdWxlIG1vbml0b3JCdWZmZXJUaWNrXyB0byBydW4gYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbW9uaXRvckJ1ZmZlcl8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb25pdG9yQnVmZmVyXygpIHtcbiAgICAgIGlmICh0aGlzLmNoZWNrQnVmZmVyVGltZW91dF8pIHtcbiAgICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0XyA9IHdpbmRvdyQxLnNldFRpbWVvdXQodGhpcy5tb25pdG9yQnVmZmVyVGlja18uYmluZCh0aGlzKSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzIGxvbmcgYXMgdGhlIFNlZ21lbnRMb2FkZXIgaXMgaW4gdGhlIFJFQURZIHN0YXRlLCBwZXJpb2RpY2FsbHlcbiAgICAgKiBpbnZva2UgZmlsbEJ1ZmZlcl8oKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21vbml0b3JCdWZmZXJUaWNrXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vbml0b3JCdWZmZXJUaWNrXygpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnUkVBRFknKSB7XG4gICAgICAgIHRoaXMuZmlsbEJ1ZmZlcl8oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xykge1xuICAgICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfID0gd2luZG93JDEuc2V0VGltZW91dCh0aGlzLm1vbml0b3JCdWZmZXJUaWNrXy5iaW5kKHRoaXMpLCBDSEVDS19CVUZGRVJfREVMQVkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBmaWxsIHRoZSBidWZmZXIgd2l0aCBzZWdlbWVudHMgdW5sZXNzIHRoZSBzb3VyY2VCdWZmZXJzIGFyZVxuICAgICAqIGN1cnJlbnRseSB1cGRhdGluZ1xuICAgICAqXG4gICAgICogTm90ZTogdGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBldmVyIGJlIGNhbGxlZCBieSBtb25pdG9yQnVmZmVyX1xuICAgICAqIGFuZCBuZXZlciBkaXJlY3RseVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmlsbEJ1ZmZlcl8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsQnVmZmVyXygpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZVVwZGF0ZXJfLnVwZGF0aW5nKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuc3luY1BvaW50Xykge1xuICAgICAgICB0aGlzLnN5bmNQb2ludF8gPSB0aGlzLnN5bmNDb250cm9sbGVyXy5nZXRTeW5jUG9pbnQodGhpcy5wbGF5bGlzdF8sIHRoaXMuZHVyYXRpb25fKCksIHRoaXMuY3VycmVudFRpbWVsaW5lXywgdGhpcy5jdXJyZW50VGltZV8oKSk7XG4gICAgICB9IC8vIHNlZSBpZiB3ZSBuZWVkIHRvIGJlZ2luIGxvYWRpbmcgaW1tZWRpYXRlbHlcblxuXG4gICAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLmNoZWNrQnVmZmVyXyh0aGlzLmJ1ZmZlcmVkXygpLCB0aGlzLnBsYXlsaXN0XywgdGhpcy5tZWRpYUluZGV4LCB0aGlzLmhhc1BsYXllZF8oKSwgdGhpcy5jdXJyZW50VGltZV8oKSwgdGhpcy5zeW5jUG9pbnRfKTtcblxuICAgICAgaWYgKCFzZWdtZW50SW5mbykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5kT2ZTdHJlYW1fKHNlZ21lbnRJbmZvLm1lZGlhSW5kZXgpKSB7XG4gICAgICAgIHRoaXMuZW5kT2ZTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VnbWVudEluZm8ubWVkaWFJbmRleCA9PT0gdGhpcy5wbGF5bGlzdF8uc2VnbWVudHMubGVuZ3RoIC0gMSAmJiB0aGlzLm1lZGlhU291cmNlXy5yZWFkeVN0YXRlID09PSAnZW5kZWQnICYmICF0aGlzLnNlZWtpbmdfKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSB3aWxsIG5lZWQgdG8gY2hhbmdlIHRpbWVzdGFtcE9mZnNldCBvZiB0aGUgc291cmNlQnVmZmVyIGlmOlxuICAgICAgLy8gLSBUaGUgc2VnbWVudC50aW1lbGluZSAhPT0gdGhpcy5jdXJyZW50VGltZWxpbmVcbiAgICAgIC8vICAgKHdlIGFyZSBjcm9zc2luZyBhIGRpc2NvbnRpbnVpdHkgc29tZWhvdylcbiAgICAgIC8vIC0gVGhlIFwidGltZXN0YW1wT2Zmc2V0XCIgZm9yIHRoZSBzdGFydCBvZiB0aGlzIHNlZ21lbnQgaXMgbGVzcyB0aGFuXG4gICAgICAvLyAgIHRoZSBjdXJyZW50bHkgc2V0IHRpbWVzdGFtcE9mZnNldFxuICAgICAgLy8gQWxzbywgY2xlYXIgY2FwdGlvbnMgaWYgd2UgYXJlIGNyb3NzaW5nIGEgZGlzY29udGludWl0eSBib3VuZGFyeVxuICAgICAgLy8gUHJldmlvdXNseSwgd2UgY2hhbmdlZCB0aGUgdGltZXN0YW1wT2Zmc2V0IGlmIHRoZSBzdGFydCBvZiB0aGlzIHNlZ21lbnRcbiAgICAgIC8vIGlzIGxlc3MgdGhhbiB0aGUgY3VycmVudGx5IHNldCB0aW1lc3RhbXBPZmZzZXQgYnV0IHRoaXMgaXNuJ3Qgd2FudGVkXG4gICAgICAvLyBhcyBpdCBjYW4gcHJvZHVjZSBiYWQgYmVoYXZpb3IsIGVzcGVjaWFsbHkgYXJvdW5kIGxvbmcgcnVubmluZ1xuICAgICAgLy8gbGl2ZSBzdHJlYW1zXG5cblxuICAgICAgaWYgKHNlZ21lbnRJbmZvLnRpbWVsaW5lICE9PSB0aGlzLmN1cnJlbnRUaW1lbGluZV8pIHtcbiAgICAgICAgdGhpcy5zeW5jQ29udHJvbGxlcl8ucmVzZXQoKTtcbiAgICAgICAgc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0ID0gc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FwdGlvblBhcnNlcl8pIHtcbiAgICAgICAgICB0aGlzLmNhcHRpb25QYXJzZXJfLmNsZWFyQWxsQ2FwdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxvYWRTZWdtZW50XyhzZWdtZW50SW5mbyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhpcyBzZWdtZW50IGxvYWRlciBpcyBhdCB0aGUgZW5kIG9mIGl0J3Mgc3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1lZGlhSW5kZXggdGhlIGluZGV4IG9mIHNlZ21lbnQgd2UgbGFzdCBhcHBlbmRlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcGxheWxpc3Q9dGhpcy5wbGF5bGlzdF9dIGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgYXQgZW5kIG9mIHN0cmVhbSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpc0VuZE9mU3RyZWFtXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRW5kT2ZTdHJlYW1fKG1lZGlhSW5kZXgpIHtcbiAgICAgIHZhciBwbGF5bGlzdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5wbGF5bGlzdF87XG4gICAgICByZXR1cm4gZGV0ZWN0RW5kT2ZTdHJlYW0ocGxheWxpc3QsIHRoaXMubWVkaWFTb3VyY2VfLCBtZWRpYUluZGV4KSAmJiAhdGhpcy5zb3VyY2VVcGRhdGVyXy51cGRhdGluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgc2VnbWVudCByZXF1ZXN0IHNob3VsZCBiZSBtYWRlLCBnaXZlbiBjdXJyZW50IHBsYXliYWNrXG4gICAgICogc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1RpbWVSYW5nZXN9IGJ1ZmZlcmVkIC0gdGhlIHN0YXRlIG9mIHRoZSBidWZmZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgLSB0aGUgcGxheWxpc3Qgb2JqZWN0IHRvIGZldGNoIHNlZ21lbnRzIGZyb21cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWVkaWFJbmRleCAtIHRoZSBwcmV2aW91cyBtZWRpYUluZGV4IGZldGNoZWQgb3IgbnVsbFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaGFzUGxheWVkIC0gYSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB3ZSBoYXZlIHBsYXllZCBvciBub3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFRpbWUgLSB0aGUgcGxheWJhY2sgcG9zaXRpb24gaW4gc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW5jUG9pbnQgLSBhIHNlZ21lbnQgaW5mbyBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlXG4gICAgICogQHJldHVybnMge09iamVjdH0gYSBzZWdtZW50IHJlcXVlc3Qgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBzZWdtZW50IHRvIGxvYWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2hlY2tCdWZmZXJfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tCdWZmZXJfKGJ1ZmZlcmVkLCBwbGF5bGlzdCwgbWVkaWFJbmRleCwgaGFzUGxheWVkLCBjdXJyZW50VGltZSwgc3luY1BvaW50KSB7XG4gICAgICB2YXIgbGFzdEJ1ZmZlcmVkRW5kID0gMDtcbiAgICAgIHZhciBzdGFydE9mU2VnbWVudCA9IHZvaWQgMDtcblxuICAgICAgaWYgKGJ1ZmZlcmVkLmxlbmd0aCkge1xuICAgICAgICBsYXN0QnVmZmVyZWRFbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBidWZmZXJlZFRpbWUgPSBNYXRoLm1heCgwLCBsYXN0QnVmZmVyZWRFbmQgLSBjdXJyZW50VGltZSk7XG5cbiAgICAgIGlmICghcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBpZiB0aGVyZSBpcyBwbGVudHkgb2YgY29udGVudCBidWZmZXJlZCwgYW5kIHRoZSB2aWRlbyBoYXNcbiAgICAgIC8vIGJlZW4gcGxheWVkIGJlZm9yZSByZWxheCBmb3IgYXdoaWxlXG5cblxuICAgICAgaWYgKGJ1ZmZlcmVkVGltZSA+PSB0aGlzLmdvYWxCdWZmZXJMZW5ndGhfKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIGlmIHRoZSB2aWRlbyBoYXMgbm90IHlldCBwbGF5ZWQgb25jZSwgYW5kIHdlIGFscmVhZHkgaGF2ZVxuICAgICAgLy8gb25lIHNlZ21lbnQgZG93bmxvYWRlZCBkbyBub3RoaW5nXG5cblxuICAgICAgaWYgKCFoYXNQbGF5ZWQgJiYgYnVmZmVyZWRUaW1lID49IDEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIFdoZW4gdGhlIHN5bmNQb2ludCBpcyBudWxsLCB0aGVyZSBpcyBubyB3YXkgb2YgZGV0ZXJtaW5pbmcgYSBnb29kXG4gICAgICAvLyBjb25zZXJ2YXRpdmUgc2VnbWVudCBpbmRleCB0byBmZXRjaCBmcm9tXG4gICAgICAvLyBUaGUgYmVzdCB0aGluZyB0byBkbyBoZXJlIGlzIHRvIGdldCB0aGUga2luZCBvZiBzeW5jLXBvaW50IGRhdGEgYnlcbiAgICAgIC8vIG1ha2luZyBhIHJlcXVlc3RcblxuXG4gICAgICBpZiAoc3luY1BvaW50ID09PSBudWxsKSB7XG4gICAgICAgIG1lZGlhSW5kZXggPSB0aGlzLmdldFN5bmNTZWdtZW50Q2FuZGlkYXRlXyhwbGF5bGlzdCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlU2VnbWVudEluZm9fKHBsYXlsaXN0LCBtZWRpYUluZGV4LCBudWxsLCB0cnVlKTtcbiAgICAgIH0gLy8gVW5kZXIgbm9ybWFsIHBsYXliYWNrIGNvbmRpdGlvbnMgZmV0Y2hpbmcgaXMgYSBzaW1wbGUgd2FsayBmb3J3YXJkXG5cblxuICAgICAgaWYgKG1lZGlhSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1ttZWRpYUluZGV4XTtcbiAgICAgICAgc3RhcnRPZlNlZ21lbnQgPSBsYXN0QnVmZmVyZWRFbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlU2VnbWVudEluZm9fKHBsYXlsaXN0LCBtZWRpYUluZGV4ICsgMSwgc3RhcnRPZlNlZ21lbnQsIGZhbHNlKTtcbiAgICAgIH0gLy8gVGhlcmUgaXMgYSBzeW5jLXBvaW50IGJ1dCB0aGUgbGFjayBvZiBhIG1lZGlhSW5kZXggaW5kaWNhdGVzIHRoYXRcbiAgICAgIC8vIHdlIG5lZWQgdG8gbWFrZSBhIGdvb2QgY29uc2VydmF0aXZlIGd1ZXNzIGFib3V0IHdoaWNoIHNlZ21lbnQgdG9cbiAgICAgIC8vIGZldGNoXG5cblxuICAgICAgaWYgKHRoaXMuZmV0Y2hBdEJ1ZmZlcl8pIHtcbiAgICAgICAgLy8gRmluZCB0aGUgc2VnbWVudCBjb250YWluaW5nIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICAgICAgICB2YXIgbWVkaWFTb3VyY2VJbmZvID0gUGxheWxpc3QuZ2V0TWVkaWFJbmZvRm9yVGltZShwbGF5bGlzdCwgbGFzdEJ1ZmZlcmVkRW5kLCBzeW5jUG9pbnQuc2VnbWVudEluZGV4LCBzeW5jUG9pbnQudGltZSk7XG4gICAgICAgIG1lZGlhSW5kZXggPSBtZWRpYVNvdXJjZUluZm8ubWVkaWFJbmRleDtcbiAgICAgICAgc3RhcnRPZlNlZ21lbnQgPSBtZWRpYVNvdXJjZUluZm8uc3RhcnRUaW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmluZCB0aGUgc2VnbWVudCBjb250YWluaW5nIGN1cnJlbnRUaW1lXG4gICAgICAgIHZhciBfbWVkaWFTb3VyY2VJbmZvID0gUGxheWxpc3QuZ2V0TWVkaWFJbmZvRm9yVGltZShwbGF5bGlzdCwgY3VycmVudFRpbWUsIHN5bmNQb2ludC5zZWdtZW50SW5kZXgsIHN5bmNQb2ludC50aW1lKTtcblxuICAgICAgICBtZWRpYUluZGV4ID0gX21lZGlhU291cmNlSW5mby5tZWRpYUluZGV4O1xuICAgICAgICBzdGFydE9mU2VnbWVudCA9IF9tZWRpYVNvdXJjZUluZm8uc3RhcnRUaW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVNlZ21lbnRJbmZvXyhwbGF5bGlzdCwgbWVkaWFJbmRleCwgc3RhcnRPZlNlZ21lbnQsIGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHNlZ21lbnQgbG9hZGVyIGhhcyBubyByZWNvdXJzZSBleGNlcHQgdG8gZmV0Y2ggYSBzZWdtZW50IGluIHRoZVxuICAgICAqIGN1cnJlbnQgcGxheWxpc3QgYW5kIHVzZSB0aGUgaW50ZXJuYWwgdGltZXN0YW1wcyBpbiB0aGF0IHNlZ21lbnQgdG9cbiAgICAgKiBnZW5lcmF0ZSBhIHN5bmNQb2ludC4gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgZ29vZCBjYW5kaWRhdGUgaW5kZXhcbiAgICAgKiBmb3IgdGhhdCBwcm9jZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IC0gdGhlIHBsYXlsaXN0IG9iamVjdCB0byBsb29rIGZvciBhXG4gICAgICogQHJldHVybnMge051bWJlcn0gQW4gaW5kZXggb2YgYSBzZWdtZW50IGZyb20gdGhlIHBsYXlsaXN0IHRvIGxvYWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0U3luY1NlZ21lbnRDYW5kaWRhdGVfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3luY1NlZ21lbnRDYW5kaWRhdGVfKHBsYXlsaXN0KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuY3VycmVudFRpbWVsaW5lXyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWdtZW50SW5kZXhBcnJheSA9IHBsYXlsaXN0LnNlZ21lbnRzLm1hcChmdW5jdGlvbiAocywgaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRpbWVsaW5lOiBzLnRpbWVsaW5lLFxuICAgICAgICAgIHNlZ21lbnRJbmRleDogaVxuICAgICAgICB9O1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzLnRpbWVsaW5lID09PSBfdGhpczIuY3VycmVudFRpbWVsaW5lXztcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2VnbWVudEluZGV4QXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50SW5kZXhBcnJheVtNYXRoLm1pbihzZWdtZW50SW5kZXhBcnJheS5sZW5ndGggLSAxLCAxKV0uc2VnbWVudEluZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWF0aC5tYXgocGxheWxpc3Quc2VnbWVudHMubGVuZ3RoIC0gMSwgMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2VuZXJhdGVTZWdtZW50SW5mb18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVNlZ21lbnRJbmZvXyhwbGF5bGlzdCwgbWVkaWFJbmRleCwgc3RhcnRPZlNlZ21lbnQsIGlzU3luY1JlcXVlc3QpIHtcbiAgICAgIGlmIChtZWRpYUluZGV4IDwgMCB8fCBtZWRpYUluZGV4ID49IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1ttZWRpYUluZGV4XTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3RJZDogJ3NlZ21lbnQtbG9hZGVyLScgKyBNYXRoLnJhbmRvbSgpLFxuICAgICAgICAvLyByZXNvbHZlIHRoZSBzZWdtZW50IFVSTCByZWxhdGl2ZSB0byB0aGUgcGxheWxpc3RcbiAgICAgICAgdXJpOiBzZWdtZW50LnJlc29sdmVkVXJpLFxuICAgICAgICAvLyB0aGUgc2VnbWVudCdzIG1lZGlhSW5kZXggYXQgdGhlIHRpbWUgaXQgd2FzIHJlcXVlc3RlZFxuICAgICAgICBtZWRpYUluZGV4OiBtZWRpYUluZGV4LFxuICAgICAgICAvLyB3aGV0aGVyIG9yIG5vdCB0byB1cGRhdGUgdGhlIFNlZ21lbnRMb2FkZXIncyBzdGF0ZSB3aXRoIHRoaXNcbiAgICAgICAgLy8gc2VnbWVudCdzIG1lZGlhSW5kZXhcbiAgICAgICAgaXNTeW5jUmVxdWVzdDogaXNTeW5jUmVxdWVzdCxcbiAgICAgICAgc3RhcnRPZlNlZ21lbnQ6IHN0YXJ0T2ZTZWdtZW50LFxuICAgICAgICAvLyB0aGUgc2VnbWVudCdzIHBsYXlsaXN0XG4gICAgICAgIHBsYXlsaXN0OiBwbGF5bGlzdCxcbiAgICAgICAgLy8gdW5lbmNyeXB0ZWQgYnl0ZXMgb2YgdGhlIHNlZ21lbnRcbiAgICAgICAgYnl0ZXM6IG51bGwsXG4gICAgICAgIC8vIHdoZW4gYSBrZXkgaXMgZGVmaW5lZCBmb3IgdGhpcyBzZWdtZW50LCB0aGUgZW5jcnlwdGVkIGJ5dGVzXG4gICAgICAgIGVuY3J5cHRlZEJ5dGVzOiBudWxsLFxuICAgICAgICAvLyBUaGUgdGFyZ2V0IHRpbWVzdGFtcE9mZnNldCBmb3IgdGhpcyBzZWdtZW50IHdoZW4gd2UgYXBwZW5kIGl0XG4gICAgICAgIC8vIHRvIHRoZSBzb3VyY2UgYnVmZmVyXG4gICAgICAgIHRpbWVzdGFtcE9mZnNldDogbnVsbCxcbiAgICAgICAgLy8gVGhlIHRpbWVsaW5lIHRoYXQgdGhlIHNlZ21lbnQgaXMgaW5cbiAgICAgICAgdGltZWxpbmU6IHNlZ21lbnQudGltZWxpbmUsXG4gICAgICAgIC8vIFRoZSBleHBlY3RlZCBkdXJhdGlvbiBvZiB0aGUgc2VnbWVudCBpbiBzZWNvbmRzXG4gICAgICAgIGR1cmF0aW9uOiBzZWdtZW50LmR1cmF0aW9uLFxuICAgICAgICAvLyByZXRhaW4gdGhlIHNlZ21lbnQgaW4gY2FzZSB0aGUgcGxheWxpc3QgdXBkYXRlcyB3aGlsZSBkb2luZyBhbiBhc3luYyBwcm9jZXNzXG4gICAgICAgIHNlZ21lbnQ6IHNlZ21lbnRcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIG5ldHdvcmsgaGFzIGVub3VnaCBiYW5kd2lkdGggdG8gY29tcGxldGUgdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgICAqIHJlcXVlc3QgaW4gYSB0aW1lbHkgbWFubmVyLiBJZiBub3QsIHRoZSByZXF1ZXN0IHdpbGwgYmUgYWJvcnRlZCBlYXJseSBhbmQgYmFuZHdpZHRoXG4gICAgICogdXBkYXRlZCB0byB0cmlnZ2VyIGEgcGxheWxpc3Qgc3dpdGNoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRzXG4gICAgICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHN0YXRzIGFib3V0IHRoZSByZXF1ZXN0IHRpbWluZyBhbmQgc2l6ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Fib3J0UmVxdWVzdEVhcmx5XycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0UmVxdWVzdEVhcmx5XyhzdGF0cykge1xuICAgICAgaWYgKHRoaXMuaGxzXy50ZWNoXy5wYXVzZWQoKSB8fCAvLyBEb24ndCBhYm9ydCBpZiB0aGUgY3VycmVudCBwbGF5bGlzdCBpcyBvbiB0aGUgbG93ZXN0RW5hYmxlZFJlbmRpdGlvblxuICAgICAgLy8gVE9ETzogUmVwbGFjZSB1c2luZyB0aW1lb3V0IHdpdGggYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGlzIHBsYXlsaXN0IGlzXG4gICAgICAvLyAgICAgICB0aGUgbG93ZXN0RW5hYmxlZFJlbmRpdGlvbi5cbiAgICAgICF0aGlzLnhock9wdGlvbnNfLnRpbWVvdXQgfHwgLy8gRG9uJ3QgYWJvcnQgaWYgd2UgaGF2ZSBubyBiYW5kd2lkdGggaW5mb3JtYXRpb24gdG8gZXN0aW1hdGUgc2VnbWVudCBzaXplc1xuICAgICAgIXRoaXMucGxheWxpc3RfLmF0dHJpYnV0ZXMuQkFORFdJRFRIKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gV2FpdCBhdCBsZWFzdCAxIHNlY29uZCBzaW5jZSB0aGUgZmlyc3QgYnl0ZSBvZiBkYXRhIGhhcyBiZWVuIHJlY2VpdmVkIGJlZm9yZVxuICAgICAgLy8gdXNpbmcgdGhlIGNhbGN1bGF0ZWQgYmFuZHdpZHRoIGZyb20gdGhlIHByb2dyZXNzIGV2ZW50IHRvIGFsbG93IHRoZSBiaXRyYXRlXG4gICAgICAvLyB0byBzdGFiaWxpemVcblxuXG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIChzdGF0cy5maXJzdEJ5dGVzUmVjZWl2ZWRBdCB8fCBEYXRlLm5vdygpKSA8IDEwMDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lXygpO1xuICAgICAgdmFyIG1lYXN1cmVkQmFuZHdpZHRoID0gc3RhdHMuYmFuZHdpZHRoO1xuICAgICAgdmFyIHNlZ21lbnREdXJhdGlvbiA9IHRoaXMucGVuZGluZ1NlZ21lbnRfLmR1cmF0aW9uO1xuICAgICAgdmFyIHJlcXVlc3RUaW1lUmVtYWluaW5nID0gUGxheWxpc3QuZXN0aW1hdGVTZWdtZW50UmVxdWVzdFRpbWUoc2VnbWVudER1cmF0aW9uLCBtZWFzdXJlZEJhbmR3aWR0aCwgdGhpcy5wbGF5bGlzdF8sIHN0YXRzLmJ5dGVzUmVjZWl2ZWQpOyAvLyBTdWJ0cmFjdCAxIGZyb20gdGhlIHRpbWVVbnRpbFJlYnVmZmVyIHNvIHdlIHN0aWxsIGNvbnNpZGVyIGFuIGVhcmx5IGFib3J0XG4gICAgICAvLyBpZiB3ZSBhcmUgb25seSBsZWZ0IHdpdGggbGVzcyB0aGFuIDEgc2Vjb25kIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgICAgLy8gQSBuZWdhdGl2ZSB0aW1lVW50aWxSZWJ1ZmZlcmluZyBpbmRpY2F0ZXMgd2UgYXJlIGFscmVhZHkgcmVidWZmZXJpbmdcblxuICAgICAgdmFyIHRpbWVVbnRpbFJlYnVmZmVyJCQxID0gdGltZVVudGlsUmVidWZmZXIodGhpcy5idWZmZXJlZF8oKSwgY3VycmVudFRpbWUsIHRoaXMuaGxzXy50ZWNoXy5wbGF5YmFja1JhdGUoKSkgLSAxOyAvLyBPbmx5IGNvbnNpZGVyIGFib3J0aW5nIGVhcmx5IGlmIHRoZSBlc3RpbWF0ZWQgdGltZSB0byBmaW5pc2ggdGhlIGRvd25sb2FkXG4gICAgICAvLyBpcyBsYXJnZXIgdGhhbiB0aGUgZXN0aW1hdGVkIHRpbWUgdW50aWwgdGhlIHBsYXllciBydW5zIG91dCBvZiBmb3J3YXJkIGJ1ZmZlclxuXG4gICAgICBpZiAocmVxdWVzdFRpbWVSZW1haW5pbmcgPD0gdGltZVVudGlsUmVidWZmZXIkJDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3dpdGNoQ2FuZGlkYXRlID0gbWluUmVidWZmZXJNYXhCYW5kd2lkdGhTZWxlY3Rvcih7XG4gICAgICAgIG1hc3RlcjogdGhpcy5obHNfLnBsYXlsaXN0cy5tYXN0ZXIsXG4gICAgICAgIGN1cnJlbnRUaW1lOiBjdXJyZW50VGltZSxcbiAgICAgICAgYmFuZHdpZHRoOiBtZWFzdXJlZEJhbmR3aWR0aCxcbiAgICAgICAgZHVyYXRpb246IHRoaXMuZHVyYXRpb25fKCksXG4gICAgICAgIHNlZ21lbnREdXJhdGlvbjogc2VnbWVudER1cmF0aW9uLFxuICAgICAgICB0aW1lVW50aWxSZWJ1ZmZlcjogdGltZVVudGlsUmVidWZmZXIkJDEsXG4gICAgICAgIGN1cnJlbnRUaW1lbGluZTogdGhpcy5jdXJyZW50VGltZWxpbmVfLFxuICAgICAgICBzeW5jQ29udHJvbGxlcjogdGhpcy5zeW5jQ29udHJvbGxlcl9cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXN3aXRjaENhbmRpZGF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWJ1ZmZlcmluZ0ltcGFjdCA9IHJlcXVlc3RUaW1lUmVtYWluaW5nIC0gdGltZVVudGlsUmVidWZmZXIkJDE7XG4gICAgICB2YXIgdGltZVNhdmVkQnlTd2l0Y2hpbmcgPSByZWJ1ZmZlcmluZ0ltcGFjdCAtIHN3aXRjaENhbmRpZGF0ZS5yZWJ1ZmZlcmluZ0ltcGFjdDtcbiAgICAgIHZhciBtaW5pbXVtVGltZVNhdmluZyA9IDAuNTsgLy8gSWYgd2UgYXJlIGFscmVhZHkgcmVidWZmZXJpbmcsIGluY3JlYXNlIHRoZSBhbW91bnQgb2YgdmFyaWFuY2Ugd2UgYWRkIHRvIHRoZVxuICAgICAgLy8gcG90ZW50aWFsIHJvdW5kIHRyaXAgdGltZSBvZiB0aGUgbmV3IHJlcXVlc3Qgc28gdGhhdCB3ZSBhcmUgbm90IHRvbyBhZ2dyZXNzaXZlXG4gICAgICAvLyB3aXRoIHN3aXRjaGluZyB0byBhIHBsYXlsaXN0IHRoYXQgbWlnaHQgc2F2ZSB1cyBhIGZyYWN0aW9uIG9mIGEgc2Vjb25kLlxuXG4gICAgICBpZiAodGltZVVudGlsUmVidWZmZXIkJDEgPD0gVElNRV9GVURHRV9GQUNUT1IpIHtcbiAgICAgICAgbWluaW11bVRpbWVTYXZpbmcgPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXRjaENhbmRpZGF0ZS5wbGF5bGlzdCB8fCBzd2l0Y2hDYW5kaWRhdGUucGxheWxpc3QudXJpID09PSB0aGlzLnBsYXlsaXN0Xy51cmkgfHwgdGltZVNhdmVkQnlTd2l0Y2hpbmcgPCBtaW5pbXVtVGltZVNhdmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIHNldCB0aGUgYmFuZHdpZHRoIHRvIHRoYXQgb2YgdGhlIGRlc2lyZWQgcGxheWxpc3QgYmVpbmcgc3VyZSB0byBzY2FsZSBieVxuICAgICAgLy8gQkFORFdJRFRIX1ZBUklBTkNFIGFuZCBhZGQgb25lIHNvIHRoZSBwbGF5bGlzdCBzZWxlY3RvciBkb2VzIG5vdCBleGNsdWRlIGl0XG4gICAgICAvLyBkb24ndCB0cmlnZ2VyIGEgYmFuZHdpZHRodXBkYXRlIGFzIHRoZSBiYW5kd2lkdGggaXMgYXJ0aWZpYWxcblxuXG4gICAgICB0aGlzLmJhbmR3aWR0aCA9IHN3aXRjaENhbmRpZGF0ZS5wbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCAqIENvbmZpZy5CQU5EV0lEVEhfVkFSSUFOQ0UgKyAxO1xuICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdlYXJseWFib3J0Jyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogWEhSIGBwcm9ncmVzc2AgZXZlbnQgaGFuZGxlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH1cbiAgICAgKiAgICAgICAgVGhlIFhIUiBgcHJvZ3Jlc3NgIGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNpbXBsZVNlZ21lbnRcbiAgICAgKiAgICAgICAgQSBzaW1wbGlmaWVkIHNlZ21lbnQgb2JqZWN0IGNvcHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVQcm9ncmVzc18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzc18oZXZlbnQsIHNpbXBsZVNlZ21lbnQpIHtcbiAgICAgIGlmICghdGhpcy5wZW5kaW5nU2VnbWVudF8gfHwgc2ltcGxlU2VnbWVudC5yZXF1ZXN0SWQgIT09IHRoaXMucGVuZGluZ1NlZ21lbnRfLnJlcXVlc3RJZCB8fCB0aGlzLmFib3J0UmVxdWVzdEVhcmx5XyhzaW1wbGVTZWdtZW50LnN0YXRzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogbG9hZCBhIHNwZWNpZmljIHNlZ21lbnQgZnJvbSBhIHJlcXVlc3QgaW50byB0aGUgYnVmZmVyXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsb2FkU2VnbWVudF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkU2VnbWVudF8oc2VnbWVudEluZm8pIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAnV0FJVElORyc7XG4gICAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IHNlZ21lbnRJbmZvO1xuICAgICAgdGhpcy50cmltQmFja0J1ZmZlcl8oc2VnbWVudEluZm8pO1xuICAgICAgc2VnbWVudEluZm8uYWJvcnRSZXF1ZXN0cyA9IG1lZGlhU2VnbWVudFJlcXVlc3QodGhpcy5obHNfLnhociwgdGhpcy54aHJPcHRpb25zXywgdGhpcy5kZWNyeXB0ZXJfLCB0aGlzLmNhcHRpb25QYXJzZXJfLCB0aGlzLmNyZWF0ZVNpbXBsaWZpZWRTZWdtZW50T2JqXyhzZWdtZW50SW5mbyksIC8vIHByb2dyZXNzIGNhbGxiYWNrXG4gICAgICB0aGlzLmhhbmRsZVByb2dyZXNzXy5iaW5kKHRoaXMpLCB0aGlzLnNlZ21lbnRSZXF1ZXN0RmluaXNoZWRfLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB0cmltIHRoZSBiYWNrIGJ1ZmZlciBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG9vIG11Y2ggZGF0YVxuICAgICAqIGluIHRoZSBzb3VyY2UgYnVmZmVyXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnRJbmZvIC0gdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmltQmFja0J1ZmZlcl8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmltQmFja0J1ZmZlcl8oc2VnbWVudEluZm8pIHtcbiAgICAgIHZhciByZW1vdmVUb1RpbWUgPSBzYWZlQmFja0J1ZmZlclRyaW1UaW1lKHRoaXMuc2Vla2FibGVfKCksIHRoaXMuY3VycmVudFRpbWVfKCksIHRoaXMucGxheWxpc3RfLnRhcmdldER1cmF0aW9uIHx8IDEwKTsgLy8gQ2hyb21lIGhhcyBhIGhhcmQgbGltaXQgb2YgMTUwTUIgb2ZcbiAgICAgIC8vIGJ1ZmZlciBhbmQgYSB2ZXJ5IGNvbnNlcnZhdGl2ZSBcImdhcmJhZ2UgY29sbGVjdG9yXCJcbiAgICAgIC8vIFdlIG1hbnVhbGx5IGNsZWFyIG91dCB0aGUgb2xkIGJ1ZmZlciB0byBlbnN1cmVcbiAgICAgIC8vIHdlIGRvbid0IHRyaWdnZXIgdGhlIFF1b3RhRXhjZWVkZWQgZXJyb3JcbiAgICAgIC8vIG9uIHRoZSBzb3VyY2UgYnVmZmVyIGR1cmluZyBzdWJzZXF1ZW50IGFwcGVuZHNcblxuICAgICAgaWYgKHJlbW92ZVRvVGltZSA+IDApIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoMCwgcmVtb3ZlVG9UaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogY3JlYXRlZCBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudCBvYmplY3Qgd2l0aCBqdXN0IHRoZVxuICAgICAqIGluZm9ybWF0aW9uIG5lY2Vzc2FyeSB0byBwZXJmb3JtIHRoZSBYSFIgYW5kIGRlY3J5cHRpb25cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudEluZm8gLSB0aGUgY3VycmVudCBzZWdtZW50XG4gICAgICogQHJldHVybnMge09iamVjdH0gYSBzaW1wbGlmaWVkIHNlZ21lbnQgb2JqZWN0IGNvcHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlU2ltcGxpZmllZFNlZ21lbnRPYmpfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2ltcGxpZmllZFNlZ21lbnRPYmpfKHNlZ21lbnRJbmZvKSB7XG4gICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQ7XG4gICAgICB2YXIgc2ltcGxlU2VnbWVudCA9IHtcbiAgICAgICAgcmVzb2x2ZWRVcmk6IHNlZ21lbnQucmVzb2x2ZWRVcmksXG4gICAgICAgIGJ5dGVyYW5nZTogc2VnbWVudC5ieXRlcmFuZ2UsXG4gICAgICAgIHJlcXVlc3RJZDogc2VnbWVudEluZm8ucmVxdWVzdElkXG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VnbWVudC5rZXkpIHtcbiAgICAgICAgLy8gaWYgdGhlIG1lZGlhIHNlcXVlbmNlIGlzIGdyZWF0ZXIgdGhhbiAyXjMyLCB0aGUgSVYgd2lsbCBiZSBpbmNvcnJlY3RcbiAgICAgICAgLy8gYXNzdW1pbmcgMTBzIHNlZ21lbnRzLCB0aGF0IHdvdWxkIGJlIGFib3V0IDEzMDAgeWVhcnNcbiAgICAgICAgdmFyIGl2ID0gc2VnbWVudC5rZXkuaXYgfHwgbmV3IFVpbnQzMkFycmF5KFswLCAwLCAwLCBzZWdtZW50SW5mby5tZWRpYUluZGV4ICsgc2VnbWVudEluZm8ucGxheWxpc3QubWVkaWFTZXF1ZW5jZV0pO1xuICAgICAgICBzaW1wbGVTZWdtZW50LmtleSA9IHRoaXMuc2VnbWVudEtleShzZWdtZW50LmtleSk7XG4gICAgICAgIHNpbXBsZVNlZ21lbnQua2V5Lml2ID0gaXY7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWdtZW50Lm1hcCkge1xuICAgICAgICBzaW1wbGVTZWdtZW50Lm1hcCA9IHRoaXMuaW5pdFNlZ21lbnQoc2VnbWVudC5tYXApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2ltcGxlU2VnbWVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBjYWxsYmFjayBmcm9tIHRoZSBzZWdtZW50UmVxdWVzdCBmdW5jdGlvbiBhbmQgc2V0IHRoZVxuICAgICAqIGFzc29jaWF0ZWQgU2VnbWVudExvYWRlciBzdGF0ZSBhbmQgZXJyb3JzIGlmIG5lY2Vzc2FyeVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2VnbWVudFJlcXVlc3RGaW5pc2hlZF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWdtZW50UmVxdWVzdEZpbmlzaGVkXyhlcnJvciwgc2ltcGxlU2VnbWVudCkge1xuICAgICAgLy8gZXZlcnkgcmVxdWVzdCBjb3VudHMgYXMgYSBtZWRpYSByZXF1ZXN0IGV2ZW4gaWYgaXQgaGFzIGJlZW4gYWJvcnRlZFxuICAgICAgLy8gb3IgY2FuY2VsZWQgZHVlIHRvIGEgdGltZW91dFxuICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzICs9IDE7XG5cbiAgICAgIGlmIChzaW1wbGVTZWdtZW50LnN0YXRzKSB7XG4gICAgICAgIHRoaXMubWVkaWFCeXRlc1RyYW5zZmVycmVkICs9IHNpbXBsZVNlZ21lbnQuc3RhdHMuYnl0ZXNSZWNlaXZlZDtcbiAgICAgICAgdGhpcy5tZWRpYVRyYW5zZmVyRHVyYXRpb24gKz0gc2ltcGxlU2VnbWVudC5zdGF0cy5yb3VuZFRyaXBUaW1lO1xuICAgICAgfSAvLyBUaGUgcmVxdWVzdCB3YXMgYWJvcnRlZCBhbmQgdGhlIFNlZ21lbnRMb2FkZXIgaGFzIGFscmVhZHkgYmVlbiByZXNldFxuXG5cbiAgICAgIGlmICghdGhpcy5wZW5kaW5nU2VnbWVudF8pIHtcbiAgICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzQWJvcnRlZCArPSAxO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkIGFuZCB0aGUgU2VnbWVudExvYWRlciBoYXMgYWxyZWFkeSBzdGFydGVkXG4gICAgICAvLyBhbm90aGVyIHJlcXVlc3QuIHRoaXMgY2FuIGhhcHBlbiB3aGVuIHRoZSB0aW1lb3V0IGZvciBhbiBhYm9ydGVkXG4gICAgICAvLyByZXF1ZXN0IHRyaWdnZXJzIGR1ZSB0byBhIGxpbWl0YXRpb24gaW4gdGhlIFhIUiBsaWJyYXJ5XG4gICAgICAvLyBkbyBub3QgY291bnQgdGhpcyBhcyBhbnkgc29ydCBvZiByZXF1ZXN0IG9yIHdlIHJpc2sgZG91YmxlLWNvdW50aW5nXG5cblxuICAgICAgaWYgKHNpbXBsZVNlZ21lbnQucmVxdWVzdElkICE9PSB0aGlzLnBlbmRpbmdTZWdtZW50Xy5yZXF1ZXN0SWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBhbiBlcnJvciBvY2N1cnJlZCBmcm9tIHRoZSBhY3RpdmUgcGVuZGluZ1NlZ21lbnRfIHNvIHJlc2V0IGV2ZXJ5dGhpbmdcblxuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJzsgLy8gdGhlIHJlcXVlc3RzIHdlcmUgYWJvcnRlZCBqdXN0IHJlY29yZCB0aGUgYWJvcnRlZCBzdGF0IGFuZCBleGl0XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IGEgdHJ1ZSBlcnJvciBjb25kaXRpb24gYW5kIG5vdGhpbmcgY29ycmVjdGl2ZSBuZWVkc1xuICAgICAgICAvLyB0byBiZSBkb25lXG5cbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFJFUVVFU1RfRVJST1JTLkFCT1JURUQpIHtcbiAgICAgICAgICB0aGlzLm1lZGlhUmVxdWVzdHNBYm9ydGVkICs9IDE7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXVzZSgpOyAvLyB0aGUgZXJyb3IgaXMgcmVhbGx5IGp1c3QgdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlIHJlcXVlc3RzIHRpbWVkLW91dFxuICAgICAgICAvLyBzZXQgdGhlIGJhbmR3aWR0aCB0byBhIHZlcnkgbG93IHZhbHVlIGFuZCB0cmlnZ2VyIGFuIEFCUiBzd2l0Y2ggdG9cbiAgICAgICAgLy8gdGFrZSBlbWVyZ2VuY3kgYWN0aW9uXG5cbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFJFUVVFU1RfRVJST1JTLlRJTUVPVVQpIHtcbiAgICAgICAgICB0aGlzLm1lZGlhUmVxdWVzdHNUaW1lZG91dCArPSAxO1xuICAgICAgICAgIHRoaXMuYmFuZHdpZHRoID0gMTtcbiAgICAgICAgICB0aGlzLnJvdW5kVHJpcCA9IE5hTjtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JhbmR3aWR0aHVwZGF0ZScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBpZiBjb250cm9sLWZsb3cgaGFzIGFycml2ZWQgaGVyZSwgdGhlbiB0aGUgZXJyb3IgaXMgcmVhbFxuICAgICAgICAvLyBlbWl0IGFuIGVycm9yIGV2ZW50IHRvIGJsYWNrbGlzdCB0aGUgY3VycmVudCBwbGF5bGlzdFxuXG5cbiAgICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzRXJyb3JlZCArPSAxO1xuICAgICAgICB0aGlzLmVycm9yKGVycm9yKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdlcnJvcicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHRoZSByZXNwb25zZSB3YXMgYSBzdWNjZXNzIHNvIHNldCBhbnkgYmFuZHdpZHRoIHN0YXRzIHRoZSByZXF1ZXN0XG4gICAgICAvLyBnZW5lcmF0ZWQgZm9yIEFCUiBwdXJwb3Nlc1xuXG5cbiAgICAgIHRoaXMuYmFuZHdpZHRoID0gc2ltcGxlU2VnbWVudC5zdGF0cy5iYW5kd2lkdGg7XG4gICAgICB0aGlzLnJvdW5kVHJpcCA9IHNpbXBsZVNlZ21lbnQuc3RhdHMucm91bmRUcmlwVGltZTsgLy8gaWYgdGhpcyByZXF1ZXN0IGluY2x1ZGVkIGFuIGluaXRpYWxpemF0aW9uIHNlZ21lbnQsIHNhdmUgdGhhdCBkYXRhXG4gICAgICAvLyB0byB0aGUgaW5pdFNlZ21lbnQgY2FjaGVcblxuICAgICAgaWYgKHNpbXBsZVNlZ21lbnQubWFwKSB7XG4gICAgICAgIHNpbXBsZVNlZ21lbnQubWFwID0gdGhpcy5pbml0U2VnbWVudChzaW1wbGVTZWdtZW50Lm1hcCwgdHJ1ZSk7XG4gICAgICB9IC8vIGlmIHRoaXMgcmVxdWVzdCBpbmNsdWRlZCBhIHNlZ21lbnQga2V5LCBzYXZlIHRoYXQgZGF0YSBpbiB0aGUgY2FjaGVcblxuXG4gICAgICBpZiAoc2ltcGxlU2VnbWVudC5rZXkpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50S2V5KHNpbXBsZVNlZ21lbnQua2V5LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9jZXNzU2VnbWVudFJlc3BvbnNlXyhzaW1wbGVTZWdtZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW92ZSBhbnkgaW1wb3J0YW50IGRhdGEgZnJvbSB0aGUgc2ltcGxpZmllZCBzZWdtZW50IG9iamVjdFxuICAgICAqIGJhY2sgdG8gdGhlIHJlYWwgc2VnbWVudCBvYmplY3QgZm9yIGZ1dHVyZSBwaGFzZXNcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Byb2Nlc3NTZWdtZW50UmVzcG9uc2VfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc1NlZ21lbnRSZXNwb25zZV8oc2ltcGxlU2VnbWVudCkge1xuICAgICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87XG4gICAgICBzZWdtZW50SW5mby5ieXRlcyA9IHNpbXBsZVNlZ21lbnQuYnl0ZXM7XG5cbiAgICAgIGlmIChzaW1wbGVTZWdtZW50Lm1hcCkge1xuICAgICAgICBzZWdtZW50SW5mby5zZWdtZW50Lm1hcC5ieXRlcyA9IHNpbXBsZVNlZ21lbnQubWFwLmJ5dGVzO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50SW5mby5lbmRPZkFsbFJlcXVlc3RzID0gc2ltcGxlU2VnbWVudC5lbmRPZkFsbFJlcXVlc3RzOyAvLyBUaGlzIGhhcyBmbXA0IGNhcHRpb25zLCBhZGQgdGhlbSB0byB0ZXh0IHRyYWNrc1xuXG4gICAgICBpZiAoc2ltcGxlU2VnbWVudC5mbXA0Q2FwdGlvbnMpIHtcbiAgICAgICAgY3JlYXRlQ2FwdGlvbnNUcmFja0lmTm90RXhpc3RzKHRoaXMuaW5iYW5kVGV4dFRyYWNrc18sIHRoaXMuaGxzXy50ZWNoXywgc2ltcGxlU2VnbWVudC5jYXB0aW9uU3RyZWFtcyk7XG4gICAgICAgIGFkZENhcHRpb25EYXRhKHtcbiAgICAgICAgICBpbmJhbmRUZXh0VHJhY2tzOiB0aGlzLmluYmFuZFRleHRUcmFja3NfLFxuICAgICAgICAgIGNhcHRpb25BcnJheTogc2ltcGxlU2VnbWVudC5mbXA0Q2FwdGlvbnMsXG4gICAgICAgICAgLy8gZm1wNHMgd2lsbCBub3QgaGF2ZSBhIHRpbWVzdGFtcCBvZmZzZXRcbiAgICAgICAgICB0aW1lc3RhbXBPZmZzZXQ6IDBcbiAgICAgICAgfSk7IC8vIFJlc2V0IHN0b3JlZCBjYXB0aW9ucyBzaW5jZSB3ZSBhZGRlZCBwYXJzZWRcbiAgICAgICAgLy8gY2FwdGlvbnMgdG8gYSB0ZXh0IHRyYWNrIGF0IHRoaXMgcG9pbnRcblxuICAgICAgICBpZiAodGhpcy5jYXB0aW9uUGFyc2VyXykge1xuICAgICAgICAgIHRoaXMuY2FwdGlvblBhcnNlcl8uY2xlYXJQYXJzZWRDYXB0aW9ucygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFuZGxlU2VnbWVudF8oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYXBwZW5kIGEgZGVjcnlwdGVkIHNlZ2VtZW50IHRvIHRoZSBTb3VyY2VCdWZmZXIgdGhyb3VnaCBhIFNvdXJjZVVwZGF0ZXJcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVNlZ21lbnRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VnbWVudF8oKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnBlbmRpbmdTZWdtZW50Xykge1xuICAgICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XztcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudEluZm8uc2VnbWVudDtcbiAgICAgIHZhciB0aW1pbmdJbmZvID0gdGhpcy5zeW5jQ29udHJvbGxlcl8ucHJvYmVTZWdtZW50SW5mbyhzZWdtZW50SW5mbyk7IC8vIFdoZW4gd2UgaGF2ZSBvdXIgZmlyc3QgdGltaW5nIGluZm8sIGRldGVybWluZSB3aGF0IG1lZGlhIHR5cGVzIHRoaXMgbG9hZGVyIGlzXG4gICAgICAvLyBkZWFsaW5nIHdpdGguIEFsdGhvdWdoIHdlJ3JlIG1haW50YWluaW5nIGV4dHJhIHN0YXRlLCBpdCBoZWxwcyB0byBwcmVzZXJ2ZSB0aGVcbiAgICAgIC8vIHNlcGFyYXRpb24gb2Ygc2VnbWVudCBsb2FkZXIgZnJvbSB0aGUgYWN0dWFsIHNvdXJjZSBidWZmZXJzLlxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuc3RhcnRpbmdNZWRpYV8gPT09ICd1bmRlZmluZWQnICYmIHRpbWluZ0luZm8gJiYgKCAvLyBHdWFyZCBhZ2FpbnN0IGNhc2VzIHdoZXJlIHdlJ3JlIG5vdCBnZXR0aW5nIHRpbWluZyBpbmZvIGF0IGFsbCB1bnRpbCB3ZSBhcmVcbiAgICAgIC8vIGNlcnRhaW4gdGhhdCBhbGwgc3RyZWFtcyB3aWxsIHByb3ZpZGUgaXQuXG4gICAgICB0aW1pbmdJbmZvLmNvbnRhaW5zQXVkaW8gfHwgdGltaW5nSW5mby5jb250YWluc1ZpZGVvKSkge1xuICAgICAgICB0aGlzLnN0YXJ0aW5nTWVkaWFfID0ge1xuICAgICAgICAgIGNvbnRhaW5zQXVkaW86IHRpbWluZ0luZm8uY29udGFpbnNBdWRpbyxcbiAgICAgICAgICBjb250YWluc1ZpZGVvOiB0aW1pbmdJbmZvLmNvbnRhaW5zVmlkZW9cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlsbGVnYWxNZWRpYVN3aXRjaEVycm9yID0gaWxsZWdhbE1lZGlhU3dpdGNoKHRoaXMubG9hZGVyVHlwZV8sIHRoaXMuc3RhcnRpbmdNZWRpYV8sIHRpbWluZ0luZm8pO1xuXG4gICAgICBpZiAoaWxsZWdhbE1lZGlhU3dpdGNoRXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogaWxsZWdhbE1lZGlhU3dpdGNoRXJyb3IsXG4gICAgICAgICAgYmxhY2tsaXN0RHVyYXRpb246IEluZmluaXR5XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlZ21lbnRJbmZvLmlzU3luY1JlcXVlc3QpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdzeW5jaW5mb3VwZGF0ZScpO1xuICAgICAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnUkVBRFknO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgIT09IG51bGwgJiYgc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0ICE9PSB0aGlzLnNvdXJjZVVwZGF0ZXJfLnRpbWVzdGFtcE9mZnNldCgpKSB7XG4gICAgICAgIC8vIFN1YnRyYWN0IGFueSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIFBUUyBhbmQgRFRTIHRpbWVzIG9mIHRoZSBmaXJzdCBmcmFtZVxuICAgICAgICAvLyBmcm9tIHRoZSB0aW1lU3RhbXBPZmZzZXQgKHdoaWNoIGN1cnJlbnRseSBlcXVhbHMgdGhlIGJ1ZmZlcmVkLmVuZCkgdG8gcHJldmVudFxuICAgICAgICAvLyBjcmVhdGluZyBhbnkgZ2FwcyBpbiB0aGUgYnVmZmVyXG4gICAgICAgIGlmICh0aW1pbmdJbmZvICYmIHRpbWluZ0luZm8uc2VnbWVudFRpbWVzdGFtcEluZm8pIHtcbiAgICAgICAgICB2YXIgcHRzU3RhcnRUaW1lID0gdGltaW5nSW5mby5zZWdtZW50VGltZXN0YW1wSW5mb1swXS5wdHNUaW1lO1xuICAgICAgICAgIHZhciBkdHNTdGFydFRpbWUgPSB0aW1pbmdJbmZvLnNlZ21lbnRUaW1lc3RhbXBJbmZvWzBdLmR0c1RpbWU7XG4gICAgICAgICAgc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0IC09IHB0c1N0YXJ0VGltZSAtIGR0c1N0YXJ0VGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc291cmNlVXBkYXRlcl8udGltZXN0YW1wT2Zmc2V0KHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCk7IC8vIGZpcmVkIHdoZW4gYSB0aW1lc3RhbXAgb2Zmc2V0IGlzIHNldCBpbiBITFMgKGNhbiBhbHNvIGlkZW50aWZ5IGRpc2NvbnRpbnVpdGllcylcblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ3RpbWVzdGFtcG9mZnNldCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZWxpbmVNYXBwaW5nID0gdGhpcy5zeW5jQ29udHJvbGxlcl8ubWFwcGluZ0ZvclRpbWVsaW5lKHNlZ21lbnRJbmZvLnRpbWVsaW5lKTtcblxuICAgICAgaWYgKHRpbWVsaW5lTWFwcGluZyAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICdzZWdtZW50dGltZW1hcHBpbmcnLFxuICAgICAgICAgIG1hcHBpbmc6IHRpbWVsaW5lTWFwcGluZ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9ICdBUFBFTkRJTkcnOyAvLyBpZiB0aGUgbWVkaWEgaW5pdGlhbGl6YXRpb24gc2VnbWVudCBpcyBjaGFuZ2luZywgYXBwZW5kIGl0XG4gICAgICAvLyBiZWZvcmUgdGhlIGNvbnRlbnQgc2VnbWVudFxuXG4gICAgICBpZiAoc2VnbWVudC5tYXApIHtcbiAgICAgICAgdmFyIGluaXRJZCA9IGluaXRTZWdtZW50SWQoc2VnbWVudC5tYXApO1xuXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVJbml0U2VnbWVudElkXyB8fCB0aGlzLmFjdGl2ZUluaXRTZWdtZW50SWRfICE9PSBpbml0SWQpIHtcbiAgICAgICAgICB2YXIgaW5pdFNlZ21lbnQgPSB0aGlzLmluaXRTZWdtZW50KHNlZ21lbnQubWFwKTtcbiAgICAgICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLmFwcGVuZEJ1ZmZlcih7XG4gICAgICAgICAgICBieXRlczogaW5pdFNlZ21lbnQuYnl0ZXNcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczMuYWN0aXZlSW5pdFNlZ21lbnRJZF8gPSBpbml0SWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VnbWVudEluZm8uYnl0ZUxlbmd0aCA9IHNlZ21lbnRJbmZvLmJ5dGVzLmJ5dGVMZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VnbWVudC5zdGFydCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHNlZ21lbnQuZW5kID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLm1lZGlhU2Vjb25kc0xvYWRlZCArPSBzZWdtZW50LmVuZCAtIHNlZ21lbnQuc3RhcnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1lZGlhU2Vjb25kc0xvYWRlZCArPSBzZWdtZW50LmR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZ2dlcl8oc2VnbWVudEluZm9TdHJpbmcoc2VnbWVudEluZm8pKTtcbiAgICAgIHRoaXMuc291cmNlVXBkYXRlcl8uYXBwZW5kQnVmZmVyKHtcbiAgICAgICAgYnl0ZXM6IHNlZ21lbnRJbmZvLmJ5dGVzLFxuICAgICAgICB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvQ2FsbGJhY2s6IHRoaXMuaGFuZGxlVmlkZW9TZWdtZW50VGltaW5nSW5mb18uYmluZCh0aGlzLCBzZWdtZW50SW5mby5yZXF1ZXN0SWQpXG4gICAgICB9LCB0aGlzLmhhbmRsZVVwZGF0ZUVuZF8uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlVmlkZW9TZWdtZW50VGltaW5nSW5mb18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvXyhyZXF1ZXN0SWQsIGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMucGVuZGluZ1NlZ21lbnRfIHx8IHJlcXVlc3RJZCAhPT0gdGhpcy5wZW5kaW5nU2VnbWVudF8ucmVxdWVzdElkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlZ21lbnQgPSB0aGlzLnBlbmRpbmdTZWdtZW50Xy5zZWdtZW50O1xuXG4gICAgICBpZiAoIXNlZ21lbnQudmlkZW9UaW1pbmdJbmZvKSB7XG4gICAgICAgIHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvID0ge307XG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvLnRyYW5zbXV4ZXJQcmVwZW5kZWRTZWNvbmRzID0gZXZlbnQudmlkZW9TZWdtZW50VGltaW5nSW5mby5wcmVwZW5kZWRDb250ZW50RHVyYXRpb24gfHwgMDtcbiAgICAgIHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvLnRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydCA9IGV2ZW50LnZpZGVvU2VnbWVudFRpbWluZ0luZm8uc3RhcnQucHJlc2VudGF0aW9uO1xuICAgICAgc2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvbkVuZCA9IGV2ZW50LnZpZGVvU2VnbWVudFRpbWluZ0luZm8uZW5kLnByZXNlbnRhdGlvbjsgLy8gbWFpbmx5IHVzZWQgYXMgYSByZWZlcmVuY2UgZm9yIGRlYnVnZ2luZ1xuXG4gICAgICBzZWdtZW50LnZpZGVvVGltaW5nSW5mby5iYXNlTWVkaWFEZWNvZGVUaW1lID0gZXZlbnQudmlkZW9TZWdtZW50VGltaW5nSW5mby5iYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjYWxsYmFjayB0byBydW4gd2hlbiBhcHBlbmRCdWZmZXIgaXMgZmluaXNoZWQuIGRldGVjdHMgaWYgd2UgYXJlXG4gICAgICogaW4gYSBnb29kIHN0YXRlIHRvIGRvIHRoaW5ncyB3aXRoIHRoZSBkYXRhIHdlIGdvdCwgb3IgaWYgd2UgbmVlZFxuICAgICAqIHRvIHdhaXQgZm9yIG1vcmVcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVVwZGF0ZUVuZF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVVcGRhdGVFbmRfKCkge1xuICAgICAgaWYgKCF0aGlzLnBlbmRpbmdTZWdtZW50Xykge1xuICAgICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJztcblxuICAgICAgICBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgICAgICB0aGlzLm1vbml0b3JCdWZmZXJfKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWdtZW50SW5mbyA9IHRoaXMucGVuZGluZ1NlZ21lbnRfO1xuICAgICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50SW5mby5zZWdtZW50O1xuICAgICAgdmFyIGlzV2Fsa2luZ0ZvcndhcmQgPSB0aGlzLm1lZGlhSW5kZXggIT09IG51bGw7XG4gICAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IG51bGw7XG4gICAgICB0aGlzLnJlY29yZFRocm91Z2hwdXRfKHNlZ21lbnRJbmZvKTtcbiAgICAgIHRoaXMuYWRkU2VnbWVudE1ldGFkYXRhQ3VlXyhzZWdtZW50SW5mbyk7XG4gICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJztcbiAgICAgIHRoaXMubWVkaWFJbmRleCA9IHNlZ21lbnRJbmZvLm1lZGlhSW5kZXg7XG4gICAgICB0aGlzLmZldGNoQXRCdWZmZXJfID0gdHJ1ZTtcbiAgICAgIHRoaXMuY3VycmVudFRpbWVsaW5lXyA9IHNlZ21lbnRJbmZvLnRpbWVsaW5lOyAvLyBXZSBtdXN0IHVwZGF0ZSB0aGUgc3luY2luZm8gdG8gcmVjYWxjdWxhdGUgdGhlIHNlZWthYmxlIHJhbmdlIGJlZm9yZVxuICAgICAgLy8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25hbCBvdGhlcndpc2UgaXQgbWF5IGNvbnNpZGVyIHRoaXMgYSBiYWQgXCJndWVzc1wiXG4gICAgICAvLyBhbmQgYXR0ZW1wdCB0byByZXN5bmMgd2hlbiB0aGUgcG9zdC11cGRhdGUgc2Vla2FibGUgd2luZG93IGFuZCBsaXZlXG4gICAgICAvLyBwb2ludCB3b3VsZCBtZWFuIHRoYXQgdGhpcyB3YXMgdGhlIHBlcmZlY3Qgc2VnbWVudCB0byBmZXRjaFxuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3N5bmNpbmZvdXBkYXRlJyk7IC8vIElmIHdlIHByZXZpb3VzbHkgYXBwZW5kZWQgYSBzZWdtZW50IHRoYXQgZW5kcyBtb3JlIHRoYW4gMyB0YXJnZXREdXJhdGlvbnMgYmVmb3JlXG4gICAgICAvLyB0aGUgY3VycmVudFRpbWVfIHRoYXQgbWVhbnMgdGhhdCBvdXIgY29uc2VydmF0aXZlIGd1ZXNzIHdhcyB0b28gY29uc2VydmF0aXZlLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCByZXNldCB0aGUgbG9hZGVyIHN0YXRlIHNvIHRoYXQgd2UgdHJ5IHRvIHVzZSBhbnkgaW5mb3JtYXRpb24gZ2FpbmVkXG4gICAgICAvLyBmcm9tIHRoZSBwcmV2aW91cyByZXF1ZXN0IHRvIGNyZWF0ZSBhIG5ldywgbW9yZSBhY2N1cmF0ZSwgc3luYy1wb2ludC5cblxuICAgICAgaWYgKHNlZ21lbnQuZW5kICYmIHRoaXMuY3VycmVudFRpbWVfKCkgLSBzZWdtZW50LmVuZCA+IHNlZ21lbnRJbmZvLnBsYXlsaXN0LnRhcmdldER1cmF0aW9uICogMykge1xuICAgICAgICB0aGlzLnJlc2V0RXZlcnl0aGluZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIERvbid0IGRvIGEgcmVuZGl0aW9uIHN3aXRjaCB1bmxlc3Mgd2UgaGF2ZSBlbm91Z2ggdGltZSB0byBnZXQgYSBzeW5jIHNlZ21lbnRcbiAgICAgIC8vIGFuZCBjb25zZXJ2YXRpdmVseSBndWVzc1xuXG5cbiAgICAgIGlmIChpc1dhbGtpbmdGb3J3YXJkKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignYmFuZHdpZHRodXBkYXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHJpZ2dlcigncHJvZ3Jlc3MnKTsgLy8gYW55IHRpbWUgYW4gdXBkYXRlIGZpbmlzaGVzIGFuZCB0aGUgbGFzdCBzZWdtZW50IGlzIGluIHRoZVxuICAgICAgLy8gYnVmZmVyLCBlbmQgdGhlIHN0cmVhbS4gdGhpcyBlbnN1cmVzIHRoZSBcImVuZGVkXCIgZXZlbnQgd2lsbFxuICAgICAgLy8gZmlyZSBpZiBwbGF5YmFjayByZWFjaGVzIHRoYXQgcG9pbnQuXG5cbiAgICAgIGlmICh0aGlzLmlzRW5kT2ZTdHJlYW1fKHNlZ21lbnRJbmZvLm1lZGlhSW5kZXggKyAxLCBzZWdtZW50SW5mby5wbGF5bGlzdCkpIHtcbiAgICAgICAgdGhpcy5lbmRPZlN0cmVhbSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5tb25pdG9yQnVmZmVyXygpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmRzIHRoZSBjdXJyZW50IHRocm91Z2hwdXQgb2YgdGhlIGRlY3J5cHQsIHRyYW5zbXV4LCBhbmQgYXBwZW5kXG4gICAgICogcG9ydGlvbiBvZiB0aGUgc2VtZ21lbnQgcGlwZWxpbmUuIGB0aHJvdWdocHV0LnJhdGVgIGlzIGEgdGhlIGN1bXVsYXRpdmVcbiAgICAgKiBtb3ZpbmcgYXZlcmFnZSBvZiB0aGUgdGhyb3VnaHB1dC4gYHRocm91Z2hwdXQuY291bnRgIGlzIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBkYXRhIHBvaW50cyBpbiB0aGUgYXZlcmFnZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnRJbmZvIHRoZSBvYmplY3QgcmV0dXJuZWQgYnkgbG9hZFNlZ21lbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVjb3JkVGhyb3VnaHB1dF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvcmRUaHJvdWdocHV0XyhzZWdtZW50SW5mbykge1xuICAgICAgdmFyIHJhdGUgPSB0aGlzLnRocm91Z2hwdXQucmF0ZTsgLy8gQWRkIG9uZSB0byB0aGUgdGltZSB0byBlbnN1cmUgdGhhdCB3ZSBkb24ndCBhY2NpZGVudGFsbHkgYXR0ZW1wdCB0byBkaXZpZGVcbiAgICAgIC8vIGJ5IHplcm8gaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHRocm91Z2hwdXQgaXMgcmlkaWN1bG91c2x5IGhpZ2hcblxuICAgICAgdmFyIHNlZ21lbnRQcm9jZXNzaW5nVGltZSA9IERhdGUubm93KCkgLSBzZWdtZW50SW5mby5lbmRPZkFsbFJlcXVlc3RzICsgMTsgLy8gTXVsdGlwbHkgYnkgODAwMCB0byBjb252ZXJ0IGZyb20gYnl0ZXMvbWlsbGlzZWNvbmQgdG8gYml0cy9zZWNvbmRcblxuICAgICAgdmFyIHNlZ21lbnRQcm9jZXNzaW5nVGhyb3VnaHB1dCA9IE1hdGguZmxvb3Ioc2VnbWVudEluZm8uYnl0ZUxlbmd0aCAvIHNlZ21lbnRQcm9jZXNzaW5nVGltZSAqIDggKiAxMDAwKTsgLy8gVGhpcyBpcyBqdXN0IGEgY3VtdWxhdGl2ZSBtb3ZpbmcgYXZlcmFnZSBjYWxjdWxhdGlvbjpcbiAgICAgIC8vICAgbmV3QXZnID0gb2xkQXZnICsgKHNhbXBsZSAtIG9sZEF2ZykgLyAoc2FtcGxlQ291bnQgKyAxKVxuXG4gICAgICB0aGlzLnRocm91Z2hwdXQucmF0ZSArPSAoc2VnbWVudFByb2Nlc3NpbmdUaHJvdWdocHV0IC0gcmF0ZSkgLyArK3RoaXMudGhyb3VnaHB1dC5jb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGN1ZSB0byB0aGUgc2VnbWVudC1tZXRhZGF0YSB0cmFjayB3aXRoIHNvbWUgbWV0YWRhdGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlXG4gICAgICogc2VnbWVudFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudEluZm9cbiAgICAgKiAgICAgICAgdGhlIG9iamVjdCByZXR1cm5lZCBieSBsb2FkU2VnbWVudFxuICAgICAqIEBtZXRob2QgYWRkU2VnbWVudE1ldGFkYXRhQ3VlX1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRTZWdtZW50TWV0YWRhdGFDdWVfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU2VnbWVudE1ldGFkYXRhQ3VlXyhzZWdtZW50SW5mbykge1xuICAgICAgaWYgKCF0aGlzLnNlZ21lbnRNZXRhZGF0YVRyYWNrXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudEluZm8uc2VnbWVudDtcbiAgICAgIHZhciBzdGFydCA9IHNlZ21lbnQuc3RhcnQ7XG4gICAgICB2YXIgZW5kID0gc2VnbWVudC5lbmQ7IC8vIERvIG5vdCB0cnkgYWRkaW5nIHRoZSBjdWUgaWYgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZXMgYXJlIGludmFsaWQuXG5cbiAgICAgIGlmICghZmluaXRlKHN0YXJ0KSB8fCAhZmluaXRlKGVuZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZW1vdmVDdWVzRnJvbVRyYWNrKHN0YXJ0LCBlbmQsIHRoaXMuc2VnbWVudE1ldGFkYXRhVHJhY2tfKTtcbiAgICAgIHZhciBDdWUgPSB3aW5kb3ckMS5XZWJLaXREYXRhQ3VlIHx8IHdpbmRvdyQxLlZUVEN1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IHtcbiAgICAgICAgY3VzdG9tOiBzZWdtZW50LmN1c3RvbSxcbiAgICAgICAgZGF0ZVRpbWVPYmplY3Q6IHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QsXG4gICAgICAgIGRhdGVUaW1lU3RyaW5nOiBzZWdtZW50LmRhdGVUaW1lU3RyaW5nLFxuICAgICAgICBiYW5kd2lkdGg6IHNlZ21lbnRJbmZvLnBsYXlsaXN0LmF0dHJpYnV0ZXMuQkFORFdJRFRILFxuICAgICAgICByZXNvbHV0aW9uOiBzZWdtZW50SW5mby5wbGF5bGlzdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04sXG4gICAgICAgIGNvZGVjczogc2VnbWVudEluZm8ucGxheWxpc3QuYXR0cmlidXRlcy5DT0RFQ1MsXG4gICAgICAgIGJ5dGVMZW5ndGg6IHNlZ21lbnRJbmZvLmJ5dGVMZW5ndGgsXG4gICAgICAgIHVyaTogc2VnbWVudEluZm8udXJpLFxuICAgICAgICB0aW1lbGluZTogc2VnbWVudEluZm8udGltZWxpbmUsXG4gICAgICAgIHBsYXlsaXN0OiBzZWdtZW50SW5mby5wbGF5bGlzdC51cmksXG4gICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgZW5kOiBlbmRcbiAgICAgIH07XG4gICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIHZhciBjdWUgPSBuZXcgQ3VlKHN0YXJ0LCBlbmQsIGRhdGEpOyAvLyBBdHRhY2ggdGhlIG1ldGFkYXRhIHRvIHRoZSB2YWx1ZSBwcm9wZXJ0eSBvZiB0aGUgY3VlIHRvIGtlZXAgY29uc2lzdGVuY3kgYmV0d2VlblxuICAgICAgLy8gdGhlIGRpZmZlcmVuY2VzIG9mIFdlYktpdERhdGFDdWUgaW4gc2FmYXJpIGFuZCBWVFRDdWUgaW4gb3RoZXIgYnJvd3NlcnNcblxuICAgICAgY3VlLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnNlZ21lbnRNZXRhZGF0YVRyYWNrXy5hZGRDdWUoY3VlKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNlZ21lbnRMb2FkZXI7XG59KHZpZGVvanMkMS5FdmVudFRhcmdldCk7XG5cbnZhciB1aW50OFRvVXRmOCA9IGZ1bmN0aW9uIHVpbnQ4VG9VdGY4KHVpbnRBcnJheSkge1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHVpbnRBcnJheSkpKTtcbn07XG4vKipcbiAqIEBmaWxlIHZ0dC1zZWdtZW50LWxvYWRlci5qc1xuICovXG5cblxudmFyIFZUVF9MSU5FX1RFUk1JTkFUT1JTID0gbmV3IFVpbnQ4QXJyYXkoJ1xcblxcbicuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoX2NoYXIyKSB7XG4gIHJldHVybiBfY2hhcjIuY2hhckNvZGVBdCgwKTtcbn0pKTtcbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgbWFuYWdlcyBzZWdtZW50IGxvYWRpbmcgYW5kIGFwcGVuZGluZy5cbiAqXG4gKiBAY2xhc3MgVlRUU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIG9wdGlvbnNcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG52YXIgVlRUU2VnbWVudExvYWRlciA9IGZ1bmN0aW9uIChfU2VnbWVudExvYWRlcikge1xuICBpbmhlcml0cyhWVFRTZWdtZW50TG9hZGVyLCBfU2VnbWVudExvYWRlcik7XG5cbiAgZnVuY3Rpb24gVlRUU2VnbWVudExvYWRlcihzZXR0aW5ncykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBWVFRTZWdtZW50TG9hZGVyKTsgLy8gU2VnbWVudExvYWRlciByZXF1aXJlcyBhIE1lZGlhU291cmNlIGJlIHNwZWNpZmllZCBvciBpdCB3aWxsIHRocm93IGFuIGVycm9yO1xuICAgIC8vIGhvd2V2ZXIsIFZUVFNlZ21lbnRMb2FkZXIgaGFzIG5vIG5lZWQgb2YgYSBtZWRpYSBzb3VyY2UsIHNvIGRlbGV0ZSB0aGUgcmVmZXJlbmNlXG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChWVFRTZWdtZW50TG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVlRUU2VnbWVudExvYWRlcikpLmNhbGwodGhpcywgc2V0dGluZ3MsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLm1lZGlhU291cmNlXyA9IG51bGw7XG4gICAgX3RoaXMuc3VidGl0bGVzVHJhY2tfID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGljaCB0aW1lIHJhbmdlcyBhcmUgYnVmZmVyZWRcbiAgICpcbiAgICogQHJldHVybiB7VGltZVJhbmdlfVxuICAgKiAgICAgICAgIFRpbWVSYW5nZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGJ1ZmZlcmVkIHJhbmdlc1xuICAgKi9cblxuXG4gIGNyZWF0ZUNsYXNzKFZUVFNlZ21lbnRMb2FkZXIsIFt7XG4gICAga2V5OiAnYnVmZmVyZWRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVmZmVyZWRfKCkge1xuICAgICAgaWYgKCF0aGlzLnN1YnRpdGxlc1RyYWNrXyB8fCAhdGhpcy5zdWJ0aXRsZXNUcmFja18uY3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdWVzID0gdGhpcy5zdWJ0aXRsZXNUcmFja18uY3VlcztcbiAgICAgIHZhciBzdGFydCA9IGN1ZXNbMF0uc3RhcnRUaW1lO1xuICAgICAgdmFyIGVuZCA9IGN1ZXNbY3Vlcy5sZW5ndGggLSAxXS5zdGFydFRpbWU7XG4gICAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoW1tzdGFydCwgZW5kXV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuZCBzZXRzIGluaXQgc2VnbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1hcFxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcFxuICAgICAqICAgICAgICBUaGUgbWFwIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGluaXQgc2VnbWVudCB0byBnZXQgb3Igc2V0XG4gICAgICogQHBhcmFtIHtCb29sZWFuPX0gc2V0XG4gICAgICogICAgICAgIElmIHRydWUsIHRoZSBpbml0IHNlZ21lbnQgZm9yIHRoZSBwcm92aWRlZCBtYXAgc2hvdWxkIGJlIHNhdmVkXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqICAgICAgICAgbWFwIG9iamVjdCBmb3IgZGVzaXJlZCBpbml0IHNlZ21lbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5pdFNlZ21lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0U2VnbWVudChtYXApIHtcbiAgICAgIHZhciBzZXQkJDEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoIW1hcCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGlkID0gaW5pdFNlZ21lbnRJZChtYXApO1xuICAgICAgdmFyIHN0b3JlZE1hcCA9IHRoaXMuaW5pdFNlZ21lbnRzX1tpZF07XG5cbiAgICAgIGlmIChzZXQkJDEgJiYgIXN0b3JlZE1hcCAmJiBtYXAuYnl0ZXMpIHtcbiAgICAgICAgLy8gYXBwZW5kIFdlYlZUVCBsaW5lIHRlcm1pbmF0b3JzIHRvIHRoZSBtZWRpYSBpbml0aWFsaXphdGlvbiBzZWdtZW50IGlmIGl0IGV4aXN0c1xuICAgICAgICAvLyB0byBmb2xsb3cgdGhlIFdlYlZUVCBzcGVjIChodHRwczovL3czYy5naXRodWIuaW8vd2VidnR0LyNmaWxlLXN0cnVjdHVyZSkgdGhhdFxuICAgICAgICAvLyByZXF1aXJlcyB0d28gb3IgbW9yZSBXZWJWVFQgbGluZSB0ZXJtaW5hdG9ycyBiZXR3ZWVuIHRoZSBXZWJWVFQgaGVhZGVyIGFuZCB0aGVcbiAgICAgICAgLy8gcmVzdCBvZiB0aGUgZmlsZVxuICAgICAgICB2YXIgY29tYmluZWRCeXRlTGVuZ3RoID0gVlRUX0xJTkVfVEVSTUlOQVRPUlMuYnl0ZUxlbmd0aCArIG1hcC5ieXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgICB2YXIgY29tYmluZWRTZWdtZW50ID0gbmV3IFVpbnQ4QXJyYXkoY29tYmluZWRCeXRlTGVuZ3RoKTtcbiAgICAgICAgY29tYmluZWRTZWdtZW50LnNldChtYXAuYnl0ZXMpO1xuICAgICAgICBjb21iaW5lZFNlZ21lbnQuc2V0KFZUVF9MSU5FX1RFUk1JTkFUT1JTLCBtYXAuYnl0ZXMuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHRoaXMuaW5pdFNlZ21lbnRzX1tpZF0gPSBzdG9yZWRNYXAgPSB7XG4gICAgICAgICAgcmVzb2x2ZWRVcmk6IG1hcC5yZXNvbHZlZFVyaSxcbiAgICAgICAgICBieXRlcmFuZ2U6IG1hcC5ieXRlcmFuZ2UsXG4gICAgICAgICAgYnl0ZXM6IGNvbWJpbmVkU2VnbWVudFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmVkTWFwIHx8IG1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGFsbCBjb25maWd1cmF0aW9uIHJlcXVpcmVkIGZvciBsb2FkaW5nIGlzIHByZXNlbnQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIGFsbCBjb25maWd1cmF0aW9uIGlzIHJlYWR5IGZvciBsb2FkaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY291bGRCZWdpbkxvYWRpbmdfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY291bGRCZWdpbkxvYWRpbmdfKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGxheWxpc3RfICYmIHRoaXMuc3VidGl0bGVzVHJhY2tfICYmICF0aGlzLnBhdXNlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmNlIGFsbCB0aGUgc3RhcnRpbmcgcGFyYW1ldGVycyBoYXZlIGJlZW4gc3BlY2lmaWVkLCBiZWdpblxuICAgICAqIG9wZXJhdGlvbi4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCBmcm9tIHRoZSBJTklUXG4gICAgICogc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbml0XycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRfKCkge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICB0aGlzLnJlc2V0RXZlcnl0aGluZygpO1xuICAgICAgcmV0dXJuIHRoaXMubW9uaXRvckJ1ZmZlcl8oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgc3VidGl0bGUgdHJhY2sgb24gdGhlIHNlZ21lbnQgbG9hZGVyIHRvIGFkZCBzdWJ0aXRsZXMgdG9cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VGV4dFRyYWNrPX0gdHJhY2tcbiAgICAgKiAgICAgICAgVGhlIHRleHQgdHJhY2sgdG8gYWRkIGxvYWRlZCBzdWJ0aXRsZXMgdG9cbiAgICAgKiBAcmV0dXJuIHtUZXh0VHJhY2t9XG4gICAgICogICAgICAgIFJldHVybnMgdGhlIHN1YnRpdGxlcyB0cmFja1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmFjaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYWNrKF90cmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBfdHJhY2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YnRpdGxlc1RyYWNrXztcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdWJ0aXRsZXNUcmFja18gPSBfdHJhY2s7IC8vIGlmIHdlIHdlcmUgdW5wYXVzZWQgYnV0IHdhaXRpbmcgZm9yIGEgc291cmNlVXBkYXRlciwgc3RhcnRcbiAgICAgIC8vIGJ1ZmZlcmluZyBub3dcblxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICdJTklUJyAmJiB0aGlzLmNvdWxkQmVnaW5Mb2FkaW5nXygpKSB7XG4gICAgICAgIHRoaXMuaW5pdF8oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc3VidGl0bGVzVHJhY2tfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW55IGRhdGEgaW4gdGhlIHNvdXJjZSBidWZmZXIgYmV0d2VlbiBzdGFydCBhbmQgZW5kIHRpbWVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IC0gdGhlIHN0YXJ0IHRpbWUgb2YgdGhlIHJlZ2lvbiB0byByZW1vdmUgZnJvbSB0aGUgYnVmZmVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZCAtIHRoZSBlbmQgdGltZSBvZiB0aGUgcmVnaW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBidWZmZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJlbW92ZUN1ZXNGcm9tVHJhY2soc3RhcnQsIGVuZCwgdGhpcy5zdWJ0aXRsZXNUcmFja18pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBmaWxsIHRoZSBidWZmZXIgd2l0aCBzZWdlbWVudHMgdW5sZXNzIHRoZSBzb3VyY2VCdWZmZXJzIGFyZVxuICAgICAqIGN1cnJlbnRseSB1cGRhdGluZ1xuICAgICAqXG4gICAgICogTm90ZTogdGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBldmVyIGJlIGNhbGxlZCBieSBtb25pdG9yQnVmZmVyX1xuICAgICAqIGFuZCBuZXZlciBkaXJlY3RseVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmlsbEJ1ZmZlcl8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsQnVmZmVyXygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuc3luY1BvaW50Xykge1xuICAgICAgICB0aGlzLnN5bmNQb2ludF8gPSB0aGlzLnN5bmNDb250cm9sbGVyXy5nZXRTeW5jUG9pbnQodGhpcy5wbGF5bGlzdF8sIHRoaXMuZHVyYXRpb25fKCksIHRoaXMuY3VycmVudFRpbWVsaW5lXywgdGhpcy5jdXJyZW50VGltZV8oKSk7XG4gICAgICB9IC8vIHNlZSBpZiB3ZSBuZWVkIHRvIGJlZ2luIGxvYWRpbmcgaW1tZWRpYXRlbHlcblxuXG4gICAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLmNoZWNrQnVmZmVyXyh0aGlzLmJ1ZmZlcmVkXygpLCB0aGlzLnBsYXlsaXN0XywgdGhpcy5tZWRpYUluZGV4LCB0aGlzLmhhc1BsYXllZF8oKSwgdGhpcy5jdXJyZW50VGltZV8oKSwgdGhpcy5zeW5jUG9pbnRfKTtcbiAgICAgIHNlZ21lbnRJbmZvID0gdGhpcy5za2lwRW1wdHlTZWdtZW50c18oc2VnbWVudEluZm8pO1xuXG4gICAgICBpZiAoIXNlZ21lbnRJbmZvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc3luY0NvbnRyb2xsZXJfLnRpbWVzdGFtcE9mZnNldEZvclRpbWVsaW5lKHNlZ21lbnRJbmZvLnRpbWVsaW5lKSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBkb24ndCBoYXZlIHRoZSB0aW1lc3RhbXAgb2Zmc2V0IHRoYXQgd2UgbmVlZCB0byBzeW5jIHN1YnRpdGxlcy5cbiAgICAgICAgLy8gUmVydW4gb24gYSB0aW1lc3RhbXAgb2Zmc2V0IG9yIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgICAgIHZhciBjaGVja1RpbWVzdGFtcE9mZnNldCA9IGZ1bmN0aW9uIGNoZWNrVGltZXN0YW1wT2Zmc2V0KCkge1xuICAgICAgICAgIF90aGlzMi5zdGF0ZSA9ICdSRUFEWSc7XG5cbiAgICAgICAgICBpZiAoIV90aGlzMi5wYXVzZWQoKSkge1xuICAgICAgICAgICAgLy8gaWYgbm90IHBhdXNlZCwgcXVldWUgYSBidWZmZXIgY2hlY2sgYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgICAgICAgICAgX3RoaXMyLm1vbml0b3JCdWZmZXJfKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc3luY0NvbnRyb2xsZXJfLm9uZSgndGltZXN0YW1wb2Zmc2V0JywgY2hlY2tUaW1lc3RhbXBPZmZzZXQpO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ1dBSVRJTkdfT05fVElNRUxJTkUnO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9hZFNlZ21lbnRfKHNlZ21lbnRJbmZvKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJldmVudHMgdGhlIHNlZ21lbnQgbG9hZGVyIGZyb20gcmVxdWVzdGluZyBzZWdtZW50cyB3ZSBrbm93IGNvbnRhaW4gbm8gc3VidGl0bGVzXG4gICAgICogYnkgd2Fsa2luZyBmb3J3YXJkIHVudGlsIHdlIGZpbmQgdGhlIG5leHQgc2VnbWVudCB0aGF0IHdlIGRvbid0IGtub3cgd2hldGhlciBpdCBpc1xuICAgICAqIGVtcHR5IG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50SW5mb1xuICAgICAqICAgICAgICBhIHNlZ21lbnQgaW5mbyBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKiAgICAgICAgIGEgc2VnbWVudCBpbmZvIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgY3VycmVudCBzZWdtZW50XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NraXBFbXB0eVNlZ21lbnRzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNraXBFbXB0eVNlZ21lbnRzXyhzZWdtZW50SW5mbykge1xuICAgICAgd2hpbGUgKHNlZ21lbnRJbmZvICYmIHNlZ21lbnRJbmZvLnNlZ21lbnQuZW1wdHkpIHtcbiAgICAgICAgc2VnbWVudEluZm8gPSB0aGlzLmdlbmVyYXRlU2VnbWVudEluZm9fKHNlZ21lbnRJbmZvLnBsYXlsaXN0LCBzZWdtZW50SW5mby5tZWRpYUluZGV4ICsgMSwgc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQgKyBzZWdtZW50SW5mby5kdXJhdGlvbiwgc2VnbWVudEluZm8uaXNTeW5jUmVxdWVzdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWdtZW50SW5mbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogYXBwZW5kIGEgZGVjcnlwdGVkIHNlZ2VtZW50IHRvIHRoZSBTb3VyY2VCdWZmZXIgdGhyb3VnaCBhIFNvdXJjZVVwZGF0ZXJcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVNlZ21lbnRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VnbWVudF8oKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnBlbmRpbmdTZWdtZW50XyB8fCAhdGhpcy5zdWJ0aXRsZXNUcmFja18pIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9ICdBUFBFTkRJTkcnO1xuICAgICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87XG4gICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQ7IC8vIE1ha2Ugc3VyZSB0aGF0IHZ0dGpzIGhhcyBsb2FkZWQsIG90aGVyd2lzZSwgd2FpdCB0aWxsIGl0IGZpbmlzaGVkIGxvYWRpbmdcblxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3ckMS5XZWJWVFQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5zdWJ0aXRsZXNUcmFja18gJiYgdGhpcy5zdWJ0aXRsZXNUcmFja18udGVjaF8pIHtcbiAgICAgICAgdmFyIGxvYWRIYW5kbGVyID0gdm9pZCAwO1xuXG4gICAgICAgIHZhciBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiBlcnJvckhhbmRsZXIoKSB7XG4gICAgICAgICAgX3RoaXMzLnN1YnRpdGxlc1RyYWNrXy50ZWNoXy5vZmYoJ3Z0dGpzbG9hZGVkJywgbG9hZEhhbmRsZXIpO1xuXG4gICAgICAgICAgX3RoaXMzLmVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBsb2FkaW5nIHZ0dC5qcydcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF90aGlzMy5zdGF0ZSA9ICdSRUFEWSc7XG5cbiAgICAgICAgICBfdGhpczMucGF1c2UoKTtcblxuICAgICAgICAgIF90aGlzMy50cmlnZ2VyKCdlcnJvcicpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxvYWRIYW5kbGVyID0gZnVuY3Rpb24gbG9hZEhhbmRsZXIoKSB7XG4gICAgICAgICAgX3RoaXMzLnN1YnRpdGxlc1RyYWNrXy50ZWNoXy5vZmYoJ3Z0dGpzZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgX3RoaXMzLmhhbmRsZVNlZ21lbnRfKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdXQUlUSU5HX09OX1ZUVEpTJztcbiAgICAgICAgdGhpcy5zdWJ0aXRsZXNUcmFja18udGVjaF8ub25lKCd2dHRqc2xvYWRlZCcsIGxvYWRIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZXNUcmFja18udGVjaF8ub25lKCd2dHRqc2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50LnJlcXVlc3RlZCA9IHRydWU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMucGFyc2VWVFRDdWVzXyhzZWdtZW50SW5mbyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMuZXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVUaW1lTWFwcGluZ18oc2VnbWVudEluZm8sIHRoaXMuc3luY0NvbnRyb2xsZXJfLnRpbWVsaW5lc1tzZWdtZW50SW5mby50aW1lbGluZV0sIHRoaXMucGxheWxpc3RfKTtcblxuICAgICAgaWYgKHNlZ21lbnRJbmZvLmlzU3luY1JlcXVlc3QpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdzeW5jaW5mb3VwZGF0ZScpO1xuICAgICAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnUkVBRFknO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnRJbmZvLmJ5dGVMZW5ndGggPSBzZWdtZW50SW5mby5ieXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5tZWRpYVNlY29uZHNMb2FkZWQgKz0gc2VnbWVudC5kdXJhdGlvbjtcblxuICAgICAgaWYgKHNlZ21lbnRJbmZvLmN1ZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbnkgb3ZlcmxhcHBpbmcgY3VlcyB0byBwcmV2ZW50IGRvdWJsaW5nXG4gICAgICAgIHRoaXMucmVtb3ZlKHNlZ21lbnRJbmZvLmN1ZXNbMF0uZW5kVGltZSwgc2VnbWVudEluZm8uY3Vlc1tzZWdtZW50SW5mby5jdWVzLmxlbmd0aCAtIDFdLmVuZFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50SW5mby5jdWVzLmZvckVhY2goZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgICBfdGhpczMuc3VidGl0bGVzVHJhY2tfLmFkZEN1ZShjdWUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmhhbmRsZVVwZGF0ZUVuZF8oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlcyB0aGUgV2ViVlRUIHBhcnNlciB0byBwYXJzZSB0aGUgc2VnbWVudCByZXNwb25zZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnRJbmZvXG4gICAgICogICAgICAgIGEgc2VnbWVudCBpbmZvIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgY3VycmVudCBzZWdtZW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncGFyc2VWVFRDdWVzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVlRUQ3Vlc18oc2VnbWVudEluZm8pIHtcbiAgICAgIHZhciBkZWNvZGVyID0gdm9pZCAwO1xuICAgICAgdmFyIGRlY29kZUJ5dGVzVG9TdHJpbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3ckMS5UZXh0RGVjb2RlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkZWNvZGVyID0gbmV3IHdpbmRvdyQxLlRleHREZWNvZGVyKCd1dGY4Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWNvZGVyID0gd2luZG93JDEuV2ViVlRULlN0cmluZ0RlY29kZXIoKTtcbiAgICAgICAgZGVjb2RlQnl0ZXNUb1N0cmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJzZXIgPSBuZXcgd2luZG93JDEuV2ViVlRULlBhcnNlcih3aW5kb3ckMSwgd2luZG93JDEudnR0anMsIGRlY29kZXIpO1xuICAgICAgc2VnbWVudEluZm8uY3VlcyA9IFtdO1xuICAgICAgc2VnbWVudEluZm8udGltZXN0YW1wbWFwID0ge1xuICAgICAgICBNUEVHVFM6IDAsXG4gICAgICAgIExPQ0FMOiAwXG4gICAgICB9O1xuICAgICAgcGFyc2VyLm9uY3VlID0gc2VnbWVudEluZm8uY3Vlcy5wdXNoLmJpbmQoc2VnbWVudEluZm8uY3Vlcyk7XG5cbiAgICAgIHBhcnNlci5vbnRpbWVzdGFtcG1hcCA9IGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRJbmZvLnRpbWVzdGFtcG1hcCA9IG1hcDtcbiAgICAgIH07XG5cbiAgICAgIHBhcnNlci5vbnBhcnNpbmdlcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ0Vycm9yIGVuY291bnRlcmVkIHdoZW4gcGFyc2luZyBjdWVzOiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VnbWVudEluZm8uc2VnbWVudC5tYXApIHtcbiAgICAgICAgdmFyIG1hcERhdGEgPSBzZWdtZW50SW5mby5zZWdtZW50Lm1hcC5ieXRlcztcblxuICAgICAgICBpZiAoZGVjb2RlQnl0ZXNUb1N0cmluZykge1xuICAgICAgICAgIG1hcERhdGEgPSB1aW50OFRvVXRmOChtYXBEYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlci5wYXJzZShtYXBEYXRhKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlZ21lbnREYXRhID0gc2VnbWVudEluZm8uYnl0ZXM7XG5cbiAgICAgIGlmIChkZWNvZGVCeXRlc1RvU3RyaW5nKSB7XG4gICAgICAgIHNlZ21lbnREYXRhID0gdWludDhUb1V0Zjgoc2VnbWVudERhdGEpO1xuICAgICAgfVxuXG4gICAgICBwYXJzZXIucGFyc2Uoc2VnbWVudERhdGEpO1xuICAgICAgcGFyc2VyLmZsdXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZXMgb2YgYW55IGN1ZXMgcGFyc2VkIGJ5IHRoZSBXZWJWVFQgcGFyc2VyIHVzaW5nXG4gICAgICogdGhlIGluZm9ybWF0aW9uIHBhcnNlZCBmcm9tIHRoZSBYLVRJTUVTVEFNUC1NQVAgaGVhZGVyIGFuZCBhIFRTIHRvIG1lZGlhIHRpbWUgbWFwcGluZ1xuICAgICAqIGZyb20gdGhlIFN5bmNDb250cm9sbGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudEluZm9cbiAgICAgKiAgICAgICAgYSBzZWdtZW50IGluZm8gb2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBjdXJyZW50IHNlZ21lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwcGluZ09ialxuICAgICAqICAgICAgICBvYmplY3QgY29udGFpbmluZyBhIG1hcHBpbmcgZnJvbSBUUyB0byBtZWRpYSB0aW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0XG4gICAgICogICAgICAgIHRoZSBwbGF5bGlzdCBvYmplY3QgY29udGFpbmluZyB0aGUgc2VnbWVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVRpbWVNYXBwaW5nXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRpbWVNYXBwaW5nXyhzZWdtZW50SW5mbywgbWFwcGluZ09iaiwgcGxheWxpc3QpIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudEluZm8uc2VnbWVudDtcblxuICAgICAgaWYgKCFtYXBwaW5nT2JqKSB7XG4gICAgICAgIC8vIElmIHRoZSBzeW5jIGNvbnRyb2xsZXIgZG9lcyBub3QgaGF2ZSBhIG1hcHBpbmcgb2YgVFMgdG8gTWVkaWEgVGltZSBmb3IgdGhlXG4gICAgICAgIC8vIHRpbWVsaW5lLCB0aGVuIHdlIGRvbid0IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uIHRvIHVwZGF0ZSB0aGUgY3VlXG4gICAgICAgIC8vIHN0YXJ0L2VuZCB0aW1lc1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghc2VnbWVudEluZm8uY3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGN1ZXMsIHdlIGFsc28gZG8gbm90IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uIHRvIGZpZ3VyZSBvdXRcbiAgICAgICAgLy8gc2VnbWVudCB0aW1pbmcuIE1hcmsgdGhhdCB0aGUgc2VnbWVudCBjb250YWlucyBubyBjdWVzIHNvIHdlIGRvbid0IHJlLXJlcXVlc3RcbiAgICAgICAgLy8gYW4gZW1wdHkgc2VnbWVudC5cbiAgICAgICAgc2VnbWVudC5lbXB0eSA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWVzdGFtcG1hcCA9IHNlZ21lbnRJbmZvLnRpbWVzdGFtcG1hcDtcbiAgICAgIHZhciBkaWZmID0gdGltZXN0YW1wbWFwLk1QRUdUUyAvIDkwMDAwIC0gdGltZXN0YW1wbWFwLkxPQ0FMICsgbWFwcGluZ09iai5tYXBwaW5nO1xuICAgICAgc2VnbWVudEluZm8uY3Vlcy5mb3JFYWNoKGZ1bmN0aW9uIChjdWUpIHtcbiAgICAgICAgLy8gRmlyc3QgY29udmVydCBjdWUgdGltZSB0byBUUyB0aW1lIHVzaW5nIHRoZSB0aW1lc3RhbXAtbWFwIHByb3ZpZGVkIHdpdGhpbiB0aGUgdnR0XG4gICAgICAgIGN1ZS5zdGFydFRpbWUgKz0gZGlmZjtcbiAgICAgICAgY3VlLmVuZFRpbWUgKz0gZGlmZjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXBsYXlsaXN0LnN5bmNJbmZvKSB7XG4gICAgICAgIHZhciBmaXJzdFN0YXJ0ID0gc2VnbWVudEluZm8uY3Vlc1swXS5zdGFydFRpbWU7XG4gICAgICAgIHZhciBsYXN0U3RhcnQgPSBzZWdtZW50SW5mby5jdWVzW3NlZ21lbnRJbmZvLmN1ZXMubGVuZ3RoIC0gMV0uc3RhcnRUaW1lO1xuICAgICAgICBwbGF5bGlzdC5zeW5jSW5mbyA9IHtcbiAgICAgICAgICBtZWRpYVNlcXVlbmNlOiBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlICsgc2VnbWVudEluZm8ubWVkaWFJbmRleCxcbiAgICAgICAgICB0aW1lOiBNYXRoLm1pbihmaXJzdFN0YXJ0LCBsYXN0U3RhcnQgLSBzZWdtZW50LmR1cmF0aW9uKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVlRUU2VnbWVudExvYWRlcjtcbn0oU2VnbWVudExvYWRlcik7XG4vKipcbiAqIEBmaWxlIGFkLWN1ZS10YWdzLmpzXG4gKi9cblxuLyoqXG4gKiBTZWFyY2hlcyBmb3IgYW4gYWQgY3VlIHRoYXQgb3ZlcmxhcHMgd2l0aCB0aGUgZ2l2ZW4gbWVkaWFUaW1lXG4gKi9cblxuXG52YXIgZmluZEFkQ3VlID0gZnVuY3Rpb24gZmluZEFkQ3VlKHRyYWNrLCBtZWRpYVRpbWUpIHtcbiAgdmFyIGN1ZXMgPSB0cmFjay5jdWVzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjdWUgPSBjdWVzW2ldO1xuXG4gICAgaWYgKG1lZGlhVGltZSA+PSBjdWUuYWRTdGFydFRpbWUgJiYgbWVkaWFUaW1lIDw9IGN1ZS5hZEVuZFRpbWUpIHtcbiAgICAgIHJldHVybiBjdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgdXBkYXRlQWRDdWVzID0gZnVuY3Rpb24gdXBkYXRlQWRDdWVzKG1lZGlhLCB0cmFjaykge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuXG4gIGlmICghbWVkaWEuc2VnbWVudHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbWVkaWFUaW1lID0gb2Zmc2V0O1xuICB2YXIgY3VlID0gdm9pZCAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWEuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IG1lZGlhLnNlZ21lbnRzW2ldO1xuXG4gICAgaWYgKCFjdWUpIHtcbiAgICAgIC8vIFNpbmNlIHRoZSBjdWVzIHdpbGwgc3BhbiBmb3IgYXQgbGVhc3QgdGhlIHNlZ21lbnQgZHVyYXRpb24sIGFkZGluZyBhIGZ1ZGdlXG4gICAgICAvLyBmYWN0b3Igb2YgaGFsZiBzZWdtZW50IGR1cmF0aW9uIHdpbGwgcHJldmVudCBkdXBsaWNhdGUgY3VlcyBmcm9tIGJlaW5nXG4gICAgICAvLyBjcmVhdGVkIHdoZW4gdGltaW5nIGluZm8gaXMgbm90IGV4YWN0IChlLmcuIGN1ZSBzdGFydCB0aW1lIGluaXRpYWxpemVkXG4gICAgICAvLyBhdCAxMC4wMDY2NzcsIGJ1dCBuZXh0IGNhbGwgbWVkaWFUaW1lIGlzIDEwLjAwMzMzMiApXG4gICAgICBjdWUgPSBmaW5kQWRDdWUodHJhY2ssIG1lZGlhVGltZSArIHNlZ21lbnQuZHVyYXRpb24gLyAyKTtcbiAgICB9XG5cbiAgICBpZiAoY3VlKSB7XG4gICAgICBpZiAoJ2N1ZUluJyBpbiBzZWdtZW50KSB7XG4gICAgICAgIC8vIEZvdW5kIGEgQ1VFLUlOIHNvIGVuZCB0aGUgY3VlXG4gICAgICAgIGN1ZS5lbmRUaW1lID0gbWVkaWFUaW1lO1xuICAgICAgICBjdWUuYWRFbmRUaW1lID0gbWVkaWFUaW1lO1xuICAgICAgICBtZWRpYVRpbWUgKz0gc2VnbWVudC5kdXJhdGlvbjtcbiAgICAgICAgY3VlID0gbnVsbDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVRpbWUgPCBjdWUuZW5kVGltZSkge1xuICAgICAgICAvLyBBbHJlYWR5IHByb2Nlc3NlZCB0aGlzIG1lZGlhVGltZSBmb3IgdGhpcyBjdWVcbiAgICAgICAgbWVkaWFUaW1lICs9IHNlZ21lbnQuZHVyYXRpb247XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBvdGhlcndpc2UgZXh0ZW5kIGN1ZSB1bnRpbCBhIENVRS1JTiBpcyBmb3VuZFxuXG5cbiAgICAgIGN1ZS5lbmRUaW1lICs9IHNlZ21lbnQuZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgnY3VlT3V0JyBpbiBzZWdtZW50KSB7XG4gICAgICAgIGN1ZSA9IG5ldyB3aW5kb3ckMS5WVFRDdWUobWVkaWFUaW1lLCBtZWRpYVRpbWUgKyBzZWdtZW50LmR1cmF0aW9uLCBzZWdtZW50LmN1ZU91dCk7XG4gICAgICAgIGN1ZS5hZFN0YXJ0VGltZSA9IG1lZGlhVGltZTsgLy8gQXNzdW1lcyB0YWcgZm9ybWF0IHRvIGJlXG4gICAgICAgIC8vICNFWFQtWC1DVUUtT1VUOjMwXG5cbiAgICAgICAgY3VlLmFkRW5kVGltZSA9IG1lZGlhVGltZSArIHBhcnNlRmxvYXQoc2VnbWVudC5jdWVPdXQpO1xuICAgICAgICB0cmFjay5hZGRDdWUoY3VlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCdjdWVPdXRDb250JyBpbiBzZWdtZW50KSB7XG4gICAgICAgIC8vIEVudGVyZWQgaW50byB0aGUgbWlkZGxlIG9mIGFuIGFkIGN1ZVxuICAgICAgICB2YXIgYWRPZmZzZXQgPSB2b2lkIDA7XG4gICAgICAgIHZhciBhZFRvdGFsID0gdm9pZCAwOyAvLyBBc3N1bWVzIHRhZyBmb3JtYXRlIHRvIGJlXG4gICAgICAgIC8vICNFWFQtWC1DVUUtT1VULUNPTlQ6MTAvMzBcblxuICAgICAgICB2YXIgX3NlZ21lbnQkY3VlT3V0Q29udCRzID0gc2VnbWVudC5jdWVPdXRDb250LnNwbGl0KCcvJykubWFwKHBhcnNlRmxvYXQpO1xuXG4gICAgICAgIHZhciBfc2VnbWVudCRjdWVPdXRDb250JHMyID0gc2xpY2VkVG9BcnJheShfc2VnbWVudCRjdWVPdXRDb250JHMsIDIpO1xuXG4gICAgICAgIGFkT2Zmc2V0ID0gX3NlZ21lbnQkY3VlT3V0Q29udCRzMlswXTtcbiAgICAgICAgYWRUb3RhbCA9IF9zZWdtZW50JGN1ZU91dENvbnQkczJbMV07XG4gICAgICAgIGN1ZSA9IG5ldyB3aW5kb3ckMS5WVFRDdWUobWVkaWFUaW1lLCBtZWRpYVRpbWUgKyBzZWdtZW50LmR1cmF0aW9uLCAnJyk7XG4gICAgICAgIGN1ZS5hZFN0YXJ0VGltZSA9IG1lZGlhVGltZSAtIGFkT2Zmc2V0O1xuICAgICAgICBjdWUuYWRFbmRUaW1lID0gY3VlLmFkU3RhcnRUaW1lICsgYWRUb3RhbDtcbiAgICAgICAgdHJhY2suYWRkQ3VlKGN1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVkaWFUaW1lICs9IHNlZ21lbnQuZHVyYXRpb247XG4gIH1cbn07XG4vKipcbiAqIEBmaWxlIHN5bmMtY29udHJvbGxlci5qc1xuICovXG5cblxudmFyIHRzcHJvYmUgPSB0c0luc3BlY3Rvci5pbnNwZWN0O1xudmFyIHN5bmNQb2ludFN0cmF0ZWdpZXMgPSBbLy8gU3RhdGVneSBcIlZPRFwiOiBIYW5kbGUgdGhlIFZPRC1jYXNlIHdoZXJlIHRoZSBzeW5jLXBvaW50IGlzICphbHdheXMqXG4vLyAgICAgICAgICAgICAgICB0aGUgZXF1aXZhbGVuY2UgZGlzcGxheS10aW1lIDAgPT09IHNlZ21lbnQtaW5kZXggMFxue1xuICBuYW1lOiAnVk9EJyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIGlmIChkdXJhdGlvbiQkMSAhPT0gSW5maW5pdHkpIHtcbiAgICAgIHZhciBzeW5jUG9pbnQgPSB7XG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIHNlZ21lbnRJbmRleDogMFxuICAgICAgfTtcbiAgICAgIHJldHVybiBzeW5jUG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0sIC8vIFN0YXRlZ3kgXCJQcm9ncmFtRGF0ZVRpbWVcIjogV2UgaGF2ZSBhIHByb2dyYW0tZGF0ZS10aW1lIHRhZyBpbiB0aGlzIHBsYXlsaXN0XG57XG4gIG5hbWU6ICdQcm9ncmFtRGF0ZVRpbWUnLFxuICBydW46IGZ1bmN0aW9uIHJ1bihzeW5jQ29udHJvbGxlciwgcGxheWxpc3QsIGR1cmF0aW9uJCQxLCBjdXJyZW50VGltZWxpbmUsIGN1cnJlbnRUaW1lKSB7XG4gICAgaWYgKCFzeW5jQ29udHJvbGxlci5kYXRldGltZVRvRGlzcGxheVRpbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50cyA9IHBsYXlsaXN0LnNlZ21lbnRzIHx8IFtdO1xuICAgIHZhciBzeW5jUG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0RGlzdGFuY2UgPSBudWxsO1xuICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG5cbiAgICAgIGlmIChzZWdtZW50LmRhdGVUaW1lT2JqZWN0KSB7XG4gICAgICAgIHZhciBzZWdtZW50VGltZSA9IHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgdmFyIHNlZ21lbnRTdGFydCA9IHNlZ21lbnRUaW1lICsgc3luY0NvbnRyb2xsZXIuZGF0ZXRpbWVUb0Rpc3BsYXlUaW1lO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyhjdXJyZW50VGltZSAtIHNlZ21lbnRTdGFydCk7IC8vIE9uY2UgdGhlIGRpc3RhbmNlIGJlZ2lucyB0byBpbmNyZWFzZSwgb3IgaWYgZGlzdGFuY2UgaXMgMCwgd2UgaGF2ZSBwYXNzZWRcbiAgICAgICAgLy8gY3VycmVudFRpbWUgYW5kIGNhbiBzdG9wIGxvb2tpbmcgZm9yIGJldHRlciBjYW5kaWRhdGVzXG5cbiAgICAgICAgaWYgKGxhc3REaXN0YW5jZSAhPT0gbnVsbCAmJiAoZGlzdGFuY2UgPT09IDAgfHwgbGFzdERpc3RhbmNlIDwgZGlzdGFuY2UpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgc3luY1BvaW50ID0ge1xuICAgICAgICAgIHRpbWU6IHNlZ21lbnRTdGFydCxcbiAgICAgICAgICBzZWdtZW50SW5kZXg6IGlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3luY1BvaW50O1xuICB9XG59LCAvLyBTdGF0ZWd5IFwiU2VnbWVudFwiOiBXZSBoYXZlIGEga25vd24gdGltZSBtYXBwaW5nIGZvciBhIHRpbWVsaW5lIGFuZCBhXG4vLyAgICAgICAgICAgICAgICAgICAgc2VnbWVudCBpbiB0aGUgY3VycmVudCB0aW1lbGluZSB3aXRoIHRpbWluZyBkYXRhXG57XG4gIG5hbWU6ICdTZWdtZW50JyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIHZhciBzZWdtZW50cyA9IHBsYXlsaXN0LnNlZ21lbnRzIHx8IFtdO1xuICAgIHZhciBzeW5jUG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0RGlzdGFuY2UgPSBudWxsO1xuICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG5cbiAgICAgIGlmIChzZWdtZW50LnRpbWVsaW5lID09PSBjdXJyZW50VGltZWxpbmUgJiYgdHlwZW9mIHNlZ21lbnQuc3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKGN1cnJlbnRUaW1lIC0gc2VnbWVudC5zdGFydCk7IC8vIE9uY2UgdGhlIGRpc3RhbmNlIGJlZ2lucyB0byBpbmNyZWFzZSwgd2UgaGF2ZSBwYXNzZWRcbiAgICAgICAgLy8gY3VycmVudFRpbWUgYW5kIGNhbiBzdG9wIGxvb2tpbmcgZm9yIGJldHRlciBjYW5kaWRhdGVzXG5cbiAgICAgICAgaWYgKGxhc3REaXN0YW5jZSAhPT0gbnVsbCAmJiBsYXN0RGlzdGFuY2UgPCBkaXN0YW5jZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzeW5jUG9pbnQgfHwgbGFzdERpc3RhbmNlID09PSBudWxsIHx8IGxhc3REaXN0YW5jZSA+PSBkaXN0YW5jZSkge1xuICAgICAgICAgIGxhc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgIHN5bmNQb2ludCA9IHtcbiAgICAgICAgICAgIHRpbWU6IHNlZ21lbnQuc3RhcnQsXG4gICAgICAgICAgICBzZWdtZW50SW5kZXg6IGlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN5bmNQb2ludDtcbiAgfVxufSwgLy8gU3RhdGVneSBcIkRpc2NvbnRpbnVpdHlcIjogV2UgaGF2ZSBhIGRpc2NvbnRpbnVpdHkgd2l0aCBhIGtub3duXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheS10aW1lXG57XG4gIG5hbWU6ICdEaXNjb250aW51aXR5JyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIHZhciBzeW5jUG9pbnQgPSBudWxsO1xuICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgfHwgMDtcblxuICAgIGlmIChwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzICYmIHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTdGFydHMubGVuZ3RoKSB7XG4gICAgICB2YXIgbGFzdERpc3RhbmNlID0gbnVsbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzZWdtZW50SW5kZXggPSBwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzW2ldO1xuICAgICAgICB2YXIgZGlzY29udGludWl0eSA9IHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTZXF1ZW5jZSArIGkgKyAxO1xuICAgICAgICB2YXIgZGlzY29udGludWl0eVN5bmMgPSBzeW5jQ29udHJvbGxlci5kaXNjb250aW51aXRpZXNbZGlzY29udGludWl0eV07XG5cbiAgICAgICAgaWYgKGRpc2NvbnRpbnVpdHlTeW5jKSB7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMoY3VycmVudFRpbWUgLSBkaXNjb250aW51aXR5U3luYy50aW1lKTsgLy8gT25jZSB0aGUgZGlzdGFuY2UgYmVnaW5zIHRvIGluY3JlYXNlLCB3ZSBoYXZlIHBhc3NlZFxuICAgICAgICAgIC8vIGN1cnJlbnRUaW1lIGFuZCBjYW4gc3RvcCBsb29raW5nIGZvciBiZXR0ZXIgY2FuZGlkYXRlc1xuXG4gICAgICAgICAgaWYgKGxhc3REaXN0YW5jZSAhPT0gbnVsbCAmJiBsYXN0RGlzdGFuY2UgPCBkaXN0YW5jZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzeW5jUG9pbnQgfHwgbGFzdERpc3RhbmNlID09PSBudWxsIHx8IGxhc3REaXN0YW5jZSA+PSBkaXN0YW5jZSkge1xuICAgICAgICAgICAgbGFzdERpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICBzeW5jUG9pbnQgPSB7XG4gICAgICAgICAgICAgIHRpbWU6IGRpc2NvbnRpbnVpdHlTeW5jLnRpbWUsXG4gICAgICAgICAgICAgIHNlZ21lbnRJbmRleDogc2VnbWVudEluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzeW5jUG9pbnQ7XG4gIH1cbn0sIC8vIFN0YXRlZ3kgXCJQbGF5bGlzdFwiOiBXZSBoYXZlIGEgcGxheWxpc3Qgd2l0aCBhIGtub3duIG1hcHBpbmcgb2Zcbi8vICAgICAgICAgICAgICAgICAgICAgc2VnbWVudCBpbmRleCB0byBkaXNwbGF5IHRpbWVcbntcbiAgbmFtZTogJ1BsYXlsaXN0JyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIGlmIChwbGF5bGlzdC5zeW5jSW5mbykge1xuICAgICAgdmFyIHN5bmNQb2ludCA9IHtcbiAgICAgICAgdGltZTogcGxheWxpc3Quc3luY0luZm8udGltZSxcbiAgICAgICAgc2VnbWVudEluZGV4OiBwbGF5bGlzdC5zeW5jSW5mby5tZWRpYVNlcXVlbmNlIC0gcGxheWxpc3QubWVkaWFTZXF1ZW5jZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzeW5jUG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1dO1xuXG52YXIgU3luY0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoX3ZpZGVvanMkRXZlbnRUYXJnZXQpIHtcbiAgaW5oZXJpdHMoU3luY0NvbnRyb2xsZXIsIF92aWRlb2pzJEV2ZW50VGFyZ2V0KTtcblxuICBmdW5jdGlvbiBTeW5jQ29udHJvbGxlcigpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTeW5jQ29udHJvbGxlcik7IC8vIFNlZ21lbnQgTG9hZGVyIHN0YXRlIHZhcmlhYmxlcy4uLlxuICAgIC8vIC4uLmZvciBzeW5jaGluZyBhY3Jvc3MgdmFyaWFudHNcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFN5bmNDb250cm9sbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3luY0NvbnRyb2xsZXIpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmluc3BlY3RDYWNoZV8gPSB1bmRlZmluZWQ7IC8vIC4uLmZvciBzeW5jaGluZyBhY3Jvc3MgdmFyaWFudHNcblxuICAgIF90aGlzLnRpbWVsaW5lcyA9IFtdO1xuICAgIF90aGlzLmRpc2NvbnRpbnVpdGllcyA9IFtdO1xuICAgIF90aGlzLmRhdGV0aW1lVG9EaXNwbGF5VGltZSA9IG51bGw7XG4gICAgX3RoaXMubG9nZ2VyXyA9IGxvZ2dlcignU3luY0NvbnRyb2xsZXInKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEZpbmQgYSBzeW5jLXBvaW50IGZvciB0aGUgcGxheWxpc3Qgc3BlY2lmaWVkXG4gICAqXG4gICAqIEEgc3luYy1wb2ludCBpcyBkZWZpbmVkIGFzIGEga25vd24gbWFwcGluZyBmcm9tIGRpc3BsYXktdGltZSB0b1xuICAgKiBhIHNlZ21lbnQtaW5kZXggaW4gdGhlIGN1cnJlbnQgcGxheWxpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0XG4gICAqICAgICAgICBUaGUgcGxheWxpc3QgdGhhdCBuZWVkcyBhIHN5bmMtcG9pbnRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqICAgICAgICBEdXJhdGlvbiBvZiB0aGUgTWVkaWFTb3VyY2UgKEluZmluaXRlIGlmIHBsYXlpbmcgYSBsaXZlIHNvdXJjZSlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRUaW1lbGluZVxuICAgKiAgICAgICAgVGhlIGxhc3QgdGltZWxpbmUgZnJvbSB3aGljaCBhIHNlZ21lbnQgd2FzIGxvYWRlZFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKiAgICAgICAgICBBIHN5bmMtcG9pbnQgb2JqZWN0XG4gICAqL1xuXG5cbiAgY3JlYXRlQ2xhc3MoU3luY0NvbnRyb2xsZXIsIFt7XG4gICAga2V5OiAnZ2V0U3luY1BvaW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3luY1BvaW50KHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgICAgdmFyIHN5bmNQb2ludHMgPSB0aGlzLnJ1blN0cmF0ZWdpZXNfKHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSk7XG5cbiAgICAgIGlmICghc3luY1BvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgLy8gU2lnbmFsIHRoYXQgd2UgbmVlZCB0byBhdHRlbXB0IHRvIGdldCBhIHN5bmMtcG9pbnQgbWFudWFsbHlcbiAgICAgICAgLy8gYnkgZmV0Y2hpbmcgYSBzZWdtZW50IGluIHRoZSBwbGF5bGlzdCBhbmQgY29uc3RydWN0aW5nXG4gICAgICAgIC8vIGEgc3luYy1wb2ludCBmcm9tIHRoYXQgaW5mb3JtYXRpb25cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIE5vdyBmaW5kIHRoZSBzeW5jLXBvaW50IHRoYXQgaXMgY2xvc2VzdCB0byB0aGUgY3VycmVudFRpbWUgYmVjYXVzZVxuICAgICAgLy8gdGhhdCBzaG91bGQgcmVzdWx0IGluIHRoZSBtb3N0IGFjY3VyYXRlIGd1ZXNzIGFib3V0IHdoaWNoIHNlZ21lbnRcbiAgICAgIC8vIHRvIGZldGNoXG5cblxuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0U3luY1BvaW50XyhzeW5jUG9pbnRzLCB7XG4gICAgICAgIGtleTogJ3RpbWUnLFxuICAgICAgICB2YWx1ZTogY3VycmVudFRpbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzIGV4cGlyZWQgb2ZmIHRoZSBwbGF5bGlzdCBkdXJpbmcgcGxheWJhY2tcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0XG4gICAgICogICAgICAgIFBsYXlsaXN0IG9iamVjdCB0byBjYWxjdWxhdGUgZXhwaXJlZCBmcm9tXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogICAgICAgIER1cmF0aW9uIG9mIHRoZSBNZWRpYVNvdXJjZSAoSW5maW5pdHkgaWYgcGxheWxpbmcgYSBsaXZlIHNvdXJjZSlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfG51bGx9XG4gICAgICogICAgICAgICAgVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzIGV4cGlyZWQgb2ZmIHRoZSBwbGF5bGlzdCBkdXJpbmcgcGxheWJhY2suIE51bGxcbiAgICAgKiAgICAgICAgICBpZiBubyBzeW5jLXBvaW50cyBmb3IgdGhlIHBsYXlsaXN0IGNhbiBiZSBmb3VuZC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0RXhwaXJlZFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFeHBpcmVkVGltZShwbGF5bGlzdCwgZHVyYXRpb24kJDEpIHtcbiAgICAgIGlmICghcGxheWxpc3QgfHwgIXBsYXlsaXN0LnNlZ21lbnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3luY1BvaW50cyA9IHRoaXMucnVuU3RyYXRlZ2llc18ocGxheWxpc3QsIGR1cmF0aW9uJCQxLCBwbGF5bGlzdC5kaXNjb250aW51aXR5U2VxdWVuY2UsIDApOyAvLyBXaXRob3V0IHN5bmMtcG9pbnRzLCB0aGVyZSBpcyBub3QgZW5vdWdoIGluZm9ybWF0aW9uIHRvIGRldGVybWluZSB0aGUgZXhwaXJlZCB0aW1lXG5cbiAgICAgIGlmICghc3luY1BvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBzeW5jUG9pbnQgPSB0aGlzLnNlbGVjdFN5bmNQb2ludF8oc3luY1BvaW50cywge1xuICAgICAgICBrZXk6ICdzZWdtZW50SW5kZXgnLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSk7IC8vIElmIHRoZSBzeW5jLXBvaW50IGlzIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhlIHBsYXlsaXN0LCB3ZSB3YW50IHRvIHN1YnRyYWN0IHRoZVxuICAgICAgLy8gZHVyYXRpb24gZnJvbSBpbmRleCAwIHRvIHN5bmNQb2ludC5zZWdtZW50SW5kZXggaW5zdGVhZCBvZiBhZGRpbmcuXG5cbiAgICAgIGlmIChzeW5jUG9pbnQuc2VnbWVudEluZGV4ID4gMCkge1xuICAgICAgICBzeW5jUG9pbnQudGltZSAqPSAtMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE1hdGguYWJzKHN5bmNQb2ludC50aW1lICsgc3VtRHVyYXRpb25zKHBsYXlsaXN0LCBzeW5jUG9pbnQuc2VnbWVudEluZGV4LCAwKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgZWFjaCBzeW5jLXBvaW50IHN0cmF0ZWd5IGFuZCByZXR1cm5zIGEgbGlzdCBvZiBzeW5jLXBvaW50cyByZXR1cm5lZCBieSB0aGVcbiAgICAgKiBzdHJhdGVnaWVzXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0XG4gICAgICogICAgICAgIFRoZSBwbGF5bGlzdCB0aGF0IG5lZWRzIGEgc3luYy1wb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqICAgICAgICBEdXJhdGlvbiBvZiB0aGUgTWVkaWFTb3VyY2UgKEluZmluaXR5IGlmIHBsYXlpbmcgYSBsaXZlIHNvdXJjZSlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFRpbWVsaW5lXG4gICAgICogICAgICAgIFRoZSBsYXN0IHRpbWVsaW5lIGZyb20gd2hpY2ggYSBzZWdtZW50IHdhcyBsb2FkZWRcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICogICAgICAgICAgQSBsaXN0IG9mIHN5bmMtcG9pbnQgb2JqZWN0c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdydW5TdHJhdGVnaWVzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJ1blN0cmF0ZWdpZXNfKHBsYXlsaXN0LCBkdXJhdGlvbiQkMSwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgICAgdmFyIHN5bmNQb2ludHMgPSBbXTsgLy8gVHJ5IHRvIGZpbmQgYSBzeW5jLXBvaW50IGluIGJ5IHV0aWxpemluZyB2YXJpb3VzIHN0cmF0ZWdpZXMuLi5cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW5jUG9pbnRTdHJhdGVnaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzdHJhdGVneSA9IHN5bmNQb2ludFN0cmF0ZWdpZXNbaV07XG4gICAgICAgIHZhciBzeW5jUG9pbnQgPSBzdHJhdGVneS5ydW4odGhpcywgcGxheWxpc3QsIGR1cmF0aW9uJCQxLCBjdXJyZW50VGltZWxpbmUsIGN1cnJlbnRUaW1lKTtcblxuICAgICAgICBpZiAoc3luY1BvaW50KSB7XG4gICAgICAgICAgc3luY1BvaW50LnN0cmF0ZWd5ID0gc3RyYXRlZ3kubmFtZTtcbiAgICAgICAgICBzeW5jUG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgc3RyYXRlZ3k6IHN0cmF0ZWd5Lm5hbWUsXG4gICAgICAgICAgICBzeW5jUG9pbnQ6IHN5bmNQb2ludFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzeW5jUG9pbnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIHRoZSBzeW5jLXBvaW50IG5lYXJlc3QgdGhlIHNwZWNpZmllZCB0YXJnZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc3luY1BvaW50c1xuICAgICAqICAgICAgICBMaXN0IG9mIHN5bmMtcG9pbnRzIHRvIHNlbGVjdCBmcm9tXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICAgICAqICAgICAgICBPYmplY3Qgc3BlY2lmeWluZyB0aGUgcHJvcGVydHkgYW5kIHZhbHVlIHdlIGFyZSB0YXJnZXRpbmdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGFyZ2V0LmtleVxuICAgICAqICAgICAgICBTcGVjaWZpZXMgdGhlIHByb3BlcnR5IHRvIHRhcmdldC4gTXVzdCBiZSBlaXRoZXIgJ3RpbWUnIG9yICdzZWdtZW50SW5kZXgnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRhcmdldC52YWx1ZVxuICAgICAqICAgICAgICBUaGUgdmFsdWUgdG8gdGFyZ2V0IGZvciB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqICAgICAgICAgIFRoZSBzeW5jLXBvaW50IG5lYXJlc3QgdGhlIHRhcmdldFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWxlY3RTeW5jUG9pbnRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0U3luY1BvaW50XyhzeW5jUG9pbnRzLCB0YXJnZXQpIHtcbiAgICAgIHZhciBiZXN0U3luY1BvaW50ID0gc3luY1BvaW50c1swXS5zeW5jUG9pbnQ7XG4gICAgICB2YXIgYmVzdERpc3RhbmNlID0gTWF0aC5hYnMoc3luY1BvaW50c1swXS5zeW5jUG9pbnRbdGFyZ2V0LmtleV0gLSB0YXJnZXQudmFsdWUpO1xuICAgICAgdmFyIGJlc3RTdHJhdGVneSA9IHN5bmNQb2ludHNbMF0uc3RyYXRlZ3k7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc3luY1BvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3RGlzdGFuY2UgPSBNYXRoLmFicyhzeW5jUG9pbnRzW2ldLnN5bmNQb2ludFt0YXJnZXQua2V5XSAtIHRhcmdldC52YWx1ZSk7XG5cbiAgICAgICAgaWYgKG5ld0Rpc3RhbmNlIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgYmVzdERpc3RhbmNlID0gbmV3RGlzdGFuY2U7XG4gICAgICAgICAgYmVzdFN5bmNQb2ludCA9IHN5bmNQb2ludHNbaV0uc3luY1BvaW50O1xuICAgICAgICAgIGJlc3RTdHJhdGVneSA9IHN5bmNQb2ludHNbaV0uc3RyYXRlZ3k7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2dnZXJfKCdzeW5jUG9pbnQgZm9yIFsnICsgdGFyZ2V0LmtleSArICc6ICcgKyB0YXJnZXQudmFsdWUgKyAnXSBjaG9zZW4gd2l0aCBzdHJhdGVneScgKyAoJyBbJyArIGJlc3RTdHJhdGVneSArICddOiBbdGltZTonICsgYmVzdFN5bmNQb2ludC50aW1lICsgJywnKSArICgnIHNlZ21lbnRJbmRleDonICsgYmVzdFN5bmNQb2ludC5zZWdtZW50SW5kZXggKyAnXScpKTtcbiAgICAgIHJldHVybiBiZXN0U3luY1BvaW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYXZlIGFueSBtZXRhLWRhdGEgcHJlc2VudCBvbiB0aGUgc2VnbWVudHMgd2hlbiBzZWdtZW50cyBsZWF2ZVxuICAgICAqIHRoZSBsaXZlIHdpbmRvdyB0byB0aGUgcGxheWxpc3QgdG8gYWxsb3cgZm9yIHN5bmNocm9uaXphdGlvbiBhdCB0aGVcbiAgICAgKiBwbGF5bGlzdCBsZXZlbCBsYXRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UGxheWxpc3R9IG9sZFBsYXlsaXN0IC0gVGhlIHByZXZpb3VzIGFjdGl2ZSBwbGF5bGlzdFxuICAgICAqIEBwYXJhbSB7UGxheWxpc3R9IG5ld1BsYXlsaXN0IC0gVGhlIHVwZGF0ZWQgYW5kIG1vc3QgY3VycmVudCBwbGF5bGlzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzYXZlRXhwaXJlZFNlZ21lbnRJbmZvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZUV4cGlyZWRTZWdtZW50SW5mbyhvbGRQbGF5bGlzdCwgbmV3UGxheWxpc3QpIHtcbiAgICAgIHZhciBtZWRpYVNlcXVlbmNlRGlmZiA9IG5ld1BsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgLSBvbGRQbGF5bGlzdC5tZWRpYVNlcXVlbmNlOyAvLyBXaGVuIGEgc2VnbWVudCBleHBpcmVzIGZyb20gdGhlIHBsYXlsaXN0IGFuZCBpdCBoYXMgYSBzdGFydCB0aW1lXG4gICAgICAvLyBzYXZlIHRoYXQgaW5mb3JtYXRpb24gYXMgYSBwb3NzaWJsZSBzeW5jLXBvaW50IHJlZmVyZW5jZSBpbiBmdXR1cmVcblxuICAgICAgZm9yICh2YXIgaSA9IG1lZGlhU2VxdWVuY2VEaWZmIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIGxhc3RSZW1vdmVkU2VnbWVudCA9IG9sZFBsYXlsaXN0LnNlZ21lbnRzW2ldO1xuXG4gICAgICAgIGlmIChsYXN0UmVtb3ZlZFNlZ21lbnQgJiYgdHlwZW9mIGxhc3RSZW1vdmVkU2VnbWVudC5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBuZXdQbGF5bGlzdC5zeW5jSW5mbyA9IHtcbiAgICAgICAgICAgIG1lZGlhU2VxdWVuY2U6IG9sZFBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgKyBpLFxuICAgICAgICAgICAgdGltZTogbGFzdFJlbW92ZWRTZWdtZW50LnN0YXJ0XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmxvZ2dlcl8oJ3BsYXlsaXN0IHJlZnJlc2ggc3luYzogW3RpbWU6JyArIG5ld1BsYXlsaXN0LnN5bmNJbmZvLnRpbWUgKyAnLCcgKyAoJyBtZWRpYVNlcXVlbmNlOiAnICsgbmV3UGxheWxpc3Quc3luY0luZm8ubWVkaWFTZXF1ZW5jZSArICddJykpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignc3luY2luZm91cGRhdGUnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYXZlIHRoZSBtYXBwaW5nIGZyb20gcGxheWxpc3QncyBQcm9ncmFtRGF0ZVRpbWUgdG8gZGlzcGxheS4gVGhpcyBzaG91bGRcbiAgICAgKiBvbmx5IGV2ZXIgaGFwcGVuIG9uY2UgYXQgdGhlIHN0YXJ0IG9mIHBsYXliYWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQbGF5bGlzdH0gcGxheWxpc3QgLSBUaGUgY3VycmVudGx5IGFjdGl2ZSBwbGF5bGlzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXREYXRlVGltZU1hcHBpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREYXRlVGltZU1hcHBpbmcocGxheWxpc3QpIHtcbiAgICAgIGlmICghdGhpcy5kYXRldGltZVRvRGlzcGxheVRpbWUgJiYgcGxheWxpc3Quc2VnbWVudHMgJiYgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoICYmIHBsYXlsaXN0LnNlZ21lbnRzWzBdLmRhdGVUaW1lT2JqZWN0KSB7XG4gICAgICAgIHZhciBwbGF5bGlzdFRpbWVzdGFtcCA9IHBsYXlsaXN0LnNlZ21lbnRzWzBdLmRhdGVUaW1lT2JqZWN0LmdldFRpbWUoKSAvIDEwMDA7XG4gICAgICAgIHRoaXMuZGF0ZXRpbWVUb0Rpc3BsYXlUaW1lID0gLXBsYXlsaXN0VGltZXN0YW1wO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgc3RhdGUgb2YgdGhlIGluc3BlY3Rpb24gY2FjaGUgd2hlbiB3ZSBkbyBhIHJlbmRpdGlvblxuICAgICAqIHN3aXRjaFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5pbnNwZWN0Q2FjaGVfID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9iZSBvciBpbnNwZWN0IGEgZm1wNCBvciBhbiBtcGVnMi10cyBzZWdtZW50IHRvIGRldGVybWluZSB0aGUgc3RhcnRcbiAgICAgKiBhbmQgZW5kIG9mIHRoZSBzZWdtZW50IGluIGl0J3MgaW50ZXJuYWwgXCJtZWRpYSB0aW1lXCIuIFVzZWQgdG8gZ2VuZXJhdGVcbiAgICAgKiBtYXBwaW5ncyBmcm9tIHRoYXQgaW50ZXJuYWwgXCJtZWRpYSB0aW1lXCIgdG8gdGhlIGRpc3BsYXkgdGltZSB0aGF0IGlzXG4gICAgICogc2hvd24gb24gdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U2VnbWVudEluZm99IHNlZ21lbnRJbmZvIC0gVGhlIGN1cnJlbnQgYWN0aXZlIHJlcXVlc3QgaW5mb3JtYXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncHJvYmVTZWdtZW50SW5mbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2JlU2VnbWVudEluZm8oc2VnbWVudEluZm8pIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudEluZm8uc2VnbWVudDtcbiAgICAgIHZhciBwbGF5bGlzdCA9IHNlZ21lbnRJbmZvLnBsYXlsaXN0O1xuICAgICAgdmFyIHRpbWluZ0luZm8gPSB2b2lkIDA7XG5cbiAgICAgIGlmIChzZWdtZW50Lm1hcCkge1xuICAgICAgICB0aW1pbmdJbmZvID0gdGhpcy5wcm9iZU1wNFNlZ21lbnRfKHNlZ21lbnRJbmZvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWluZ0luZm8gPSB0aGlzLnByb2JlVHNTZWdtZW50XyhzZWdtZW50SW5mbyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1pbmdJbmZvKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbGN1bGF0ZVNlZ21lbnRUaW1lTWFwcGluZ18oc2VnbWVudEluZm8sIHRpbWluZ0luZm8pKSB7XG4gICAgICAgICAgdGhpcy5zYXZlRGlzY29udGludWl0eVN5bmNJbmZvXyhzZWdtZW50SW5mbyk7IC8vIElmIHRoZSBwbGF5bGlzdCBkb2VzIG5vdCBoYXZlIHN5bmMgaW5mb3JtYXRpb24geWV0LCByZWNvcmQgdGhhdCBpbmZvcm1hdGlvblxuICAgICAgICAgIC8vIG5vdyB3aXRoIHNlZ21lbnQgdGltaW5nIGluZm9ybWF0aW9uXG5cbiAgICAgICAgICBpZiAoIXBsYXlsaXN0LnN5bmNJbmZvKSB7XG4gICAgICAgICAgICBwbGF5bGlzdC5zeW5jSW5mbyA9IHtcbiAgICAgICAgICAgICAgbWVkaWFTZXF1ZW5jZTogcGxheWxpc3QubWVkaWFTZXF1ZW5jZSArIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXgsXG4gICAgICAgICAgICAgIHRpbWU6IHNlZ21lbnQuc3RhcnRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aW1pbmdJbmZvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9iZSBhbiBmbXA0IG9yIGFuIG1wZWcyLXRzIHNlZ21lbnQgdG8gZGV0ZXJtaW5lIHRoZSBzdGFydCBvZiB0aGUgc2VnbWVudFxuICAgICAqIGluIGl0J3MgaW50ZXJuYWwgXCJtZWRpYSB0aW1lXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U2VnbWVudEluZm99IHNlZ21lbnRJbmZvIC0gVGhlIGN1cnJlbnQgYWN0aXZlIHJlcXVlc3QgaW5mb3JtYXRpb25cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBzdGFydCBhbmQgZW5kIHRpbWUgb2YgdGhlIGN1cnJlbnQgc2VnbWVudCBpbiBcIm1lZGlhIHRpbWVcIlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwcm9iZU1wNFNlZ21lbnRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvYmVNcDRTZWdtZW50XyhzZWdtZW50SW5mbykge1xuICAgICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50SW5mby5zZWdtZW50O1xuICAgICAgdmFyIHRpbWVzY2FsZXMgPSBtcDRwcm9iZS50aW1lc2NhbGUoc2VnbWVudC5tYXAuYnl0ZXMpO1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IG1wNHByb2JlLnN0YXJ0VGltZSh0aW1lc2NhbGVzLCBzZWdtZW50SW5mby5ieXRlcyk7XG5cbiAgICAgIGlmIChzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgIT09IG51bGwpIHtcbiAgICAgICAgc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0IC09IHN0YXJ0VGltZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0VGltZSxcbiAgICAgICAgZW5kOiBzdGFydFRpbWUgKyBzZWdtZW50LmR1cmF0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9iZSBhbiBtcGVnMi10cyBzZWdtZW50IHRvIGRldGVybWluZSB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc2VnbWVudFxuICAgICAqIGluIGl0J3MgaW50ZXJuYWwgXCJtZWRpYSB0aW1lXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U2VnbWVudEluZm99IHNlZ21lbnRJbmZvIC0gVGhlIGN1cnJlbnQgYWN0aXZlIHJlcXVlc3QgaW5mb3JtYXRpb25cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBzdGFydCBhbmQgZW5kIHRpbWUgb2YgdGhlIGN1cnJlbnQgc2VnbWVudCBpbiBcIm1lZGlhIHRpbWVcIlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwcm9iZVRzU2VnbWVudF8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9iZVRzU2VnbWVudF8oc2VnbWVudEluZm8pIHtcbiAgICAgIHZhciB0aW1lSW5mbyA9IHRzcHJvYmUoc2VnbWVudEluZm8uYnl0ZXMsIHRoaXMuaW5zcGVjdENhY2hlXyk7XG4gICAgICB2YXIgc2VnbWVudFN0YXJ0VGltZSA9IHZvaWQgMDtcbiAgICAgIHZhciBzZWdtZW50RW5kVGltZSA9IHZvaWQgMDtcbiAgICAgIHZhciBzZWdtZW50VGltZXN0YW1wSW5mbyA9IHZvaWQgMDtcblxuICAgICAgaWYgKCF0aW1lSW5mbykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWVJbmZvLnZpZGVvICYmIHRpbWVJbmZvLnZpZGVvLmxlbmd0aCA9PT0gMikge1xuICAgICAgICB0aGlzLmluc3BlY3RDYWNoZV8gPSB0aW1lSW5mby52aWRlb1sxXS5kdHM7XG4gICAgICAgIHNlZ21lbnRTdGFydFRpbWUgPSB0aW1lSW5mby52aWRlb1swXS5kdHNUaW1lO1xuICAgICAgICBzZWdtZW50RW5kVGltZSA9IHRpbWVJbmZvLnZpZGVvWzFdLmR0c1RpbWU7XG4gICAgICAgIHNlZ21lbnRUaW1lc3RhbXBJbmZvID0gdGltZUluZm8udmlkZW87XG4gICAgICB9IGVsc2UgaWYgKHRpbWVJbmZvLmF1ZGlvICYmIHRpbWVJbmZvLmF1ZGlvLmxlbmd0aCA9PT0gMikge1xuICAgICAgICB0aGlzLmluc3BlY3RDYWNoZV8gPSB0aW1lSW5mby5hdWRpb1sxXS5kdHM7XG4gICAgICAgIHNlZ21lbnRTdGFydFRpbWUgPSB0aW1lSW5mby5hdWRpb1swXS5kdHNUaW1lO1xuICAgICAgICBzZWdtZW50RW5kVGltZSA9IHRpbWVJbmZvLmF1ZGlvWzFdLmR0c1RpbWU7XG4gICAgICAgIHNlZ21lbnRUaW1lc3RhbXBJbmZvID0gdGltZUluZm8uYXVkaW87XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9iZWRJbmZvID0ge1xuICAgICAgICBzZWdtZW50VGltZXN0YW1wSW5mbzogc2VnbWVudFRpbWVzdGFtcEluZm8sXG4gICAgICAgIHN0YXJ0OiBzZWdtZW50U3RhcnRUaW1lLFxuICAgICAgICBlbmQ6IHNlZ21lbnRFbmRUaW1lLFxuICAgICAgICBjb250YWluc1ZpZGVvOiB0aW1lSW5mby52aWRlbyAmJiB0aW1lSW5mby52aWRlby5sZW5ndGggPT09IDIsXG4gICAgICAgIGNvbnRhaW5zQXVkaW86IHRpbWVJbmZvLmF1ZGlvICYmIHRpbWVJbmZvLmF1ZGlvLmxlbmd0aCA9PT0gMlxuICAgICAgfTtcbiAgICAgIHJldHVybiBwcm9iZWRJbmZvO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RpbWVzdGFtcE9mZnNldEZvclRpbWVsaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZXN0YW1wT2Zmc2V0Rm9yVGltZWxpbmUodGltZWxpbmUpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy50aW1lbGluZXNbdGltZWxpbmVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMudGltZWxpbmVzW3RpbWVsaW5lXS50aW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21hcHBpbmdGb3JUaW1lbGluZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hcHBpbmdGb3JUaW1lbGluZSh0aW1lbGluZSkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnRpbWVsaW5lc1t0aW1lbGluZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy50aW1lbGluZXNbdGltZWxpbmVdLm1hcHBpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgXCJtZWRpYSB0aW1lXCIgZm9yIGEgc2VnbWVudCB0byBnZW5lcmF0ZSBhIG1hcHBpbmcgdG8gXCJkaXNwbGF5IHRpbWVcIiBhbmRcbiAgICAgKiBzYXZlIHRoYXQgZGlzcGxheSB0aW1lIHRvIHRoZSBzZWdtZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1NlZ21lbnRJbmZvfSBzZWdtZW50SW5mb1xuICAgICAqICAgICAgICBUaGUgY3VycmVudCBhY3RpdmUgcmVxdWVzdCBpbmZvcm1hdGlvblxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0aW1pbmdJbmZvXG4gICAgICogICAgICAgIFRoZSBzdGFydCBhbmQgZW5kIHRpbWUgb2YgdGhlIGN1cnJlbnQgc2VnbWVudCBpbiBcIm1lZGlhIHRpbWVcIlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqICAgICAgICAgIFJldHVybnMgZmFsc2UgaWYgc2VnbWVudCB0aW1lIG1hcHBpbmcgY291bGQgbm90IGJlIGNhbGN1bGF0ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2FsY3VsYXRlU2VnbWVudFRpbWVNYXBwaW5nXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZVNlZ21lbnRUaW1lTWFwcGluZ18oc2VnbWVudEluZm8sIHRpbWluZ0luZm8pIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudEluZm8uc2VnbWVudDtcbiAgICAgIHZhciBtYXBwaW5nT2JqID0gdGhpcy50aW1lbGluZXNbc2VnbWVudEluZm8udGltZWxpbmVdO1xuXG4gICAgICBpZiAoc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgIG1hcHBpbmdPYmogPSB7XG4gICAgICAgICAgdGltZTogc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQsXG4gICAgICAgICAgbWFwcGluZzogc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQgLSB0aW1pbmdJbmZvLnN0YXJ0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudGltZWxpbmVzW3NlZ21lbnRJbmZvLnRpbWVsaW5lXSA9IG1hcHBpbmdPYmo7XG4gICAgICAgIHRoaXMudHJpZ2dlcigndGltZXN0YW1wb2Zmc2V0Jyk7XG4gICAgICAgIHRoaXMubG9nZ2VyXygndGltZSBtYXBwaW5nIGZvciB0aW1lbGluZSAnICsgc2VnbWVudEluZm8udGltZWxpbmUgKyAnOiAnICsgKCdbdGltZTogJyArIG1hcHBpbmdPYmoudGltZSArICddIFttYXBwaW5nOiAnICsgbWFwcGluZ09iai5tYXBwaW5nICsgJ10nKSk7XG4gICAgICAgIHNlZ21lbnQuc3RhcnQgPSBzZWdtZW50SW5mby5zdGFydE9mU2VnbWVudDtcbiAgICAgICAgc2VnbWVudC5lbmQgPSB0aW1pbmdJbmZvLmVuZCArIG1hcHBpbmdPYmoubWFwcGluZztcbiAgICAgIH0gZWxzZSBpZiAobWFwcGluZ09iaikge1xuICAgICAgICBzZWdtZW50LnN0YXJ0ID0gdGltaW5nSW5mby5zdGFydCArIG1hcHBpbmdPYmoubWFwcGluZztcbiAgICAgICAgc2VnbWVudC5lbmQgPSB0aW1pbmdJbmZvLmVuZCArIG1hcHBpbmdPYmoubWFwcGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVhY2ggdGltZSB3ZSBoYXZlIGRpc2NvbnRpbnVpdHkgaW4gdGhlIHBsYXlsaXN0LCBhdHRlbXB0IHRvIGNhbGN1bGF0ZSB0aGUgbG9jYXRpb25cbiAgICAgKiBpbiBkaXNwbGF5IG9mIHRoZSBzdGFydCBvZiB0aGUgZGlzY29udGludWl0eSBhbmQgc2F2ZSB0aGF0LiBXZSBhbHNvIHNhdmUgYW4gYWNjdXJhY3lcbiAgICAgKiB2YWx1ZSBzbyB0aGF0IHdlIHNhdmUgdmFsdWVzIHdpdGggdGhlIG1vc3QgYWNjdXJhY3kgKGNsb3Nlc3QgdG8gMC4pXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U2VnbWVudEluZm99IHNlZ21lbnRJbmZvIC0gVGhlIGN1cnJlbnQgYWN0aXZlIHJlcXVlc3QgaW5mb3JtYXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2F2ZURpc2NvbnRpbnVpdHlTeW5jSW5mb18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlRGlzY29udGludWl0eVN5bmNJbmZvXyhzZWdtZW50SW5mbykge1xuICAgICAgdmFyIHBsYXlsaXN0ID0gc2VnbWVudEluZm8ucGxheWxpc3Q7XG4gICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQ7IC8vIElmIHRoZSBjdXJyZW50IHNlZ21lbnQgaXMgYSBkaXNjb250aW51aXR5IHRoZW4gd2Uga25vdyBleGFjdGx5IHdoZXJlXG4gICAgICAvLyB0aGUgc3RhcnQgb2YgdGhlIHJhbmdlIGFuZCBpdCdzIGFjY3VyYWN5IGlzIDAgKGdyZWF0ZXIgYWNjdXJhY3kgdmFsdWVzXG4gICAgICAvLyBtZWFuIG1vcmUgYXBwcm94aW1hdGlvbilcblxuICAgICAgaWYgKHNlZ21lbnQuZGlzY29udGludWl0eSkge1xuICAgICAgICB0aGlzLmRpc2NvbnRpbnVpdGllc1tzZWdtZW50LnRpbWVsaW5lXSA9IHtcbiAgICAgICAgICB0aW1lOiBzZWdtZW50LnN0YXJ0LFxuICAgICAgICAgIGFjY3VyYWN5OiAwXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTdGFydHMgJiYgcGxheWxpc3QuZGlzY29udGludWl0eVN0YXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgLy8gU2VhcmNoIGZvciBmdXR1cmUgZGlzY29udGludWl0aWVzIHRoYXQgd2UgY2FuIHByb3ZpZGUgYmV0dGVyIHRpbWluZ1xuICAgICAgICAvLyBpbmZvcm1hdGlvbiBmb3IgYW5kIHNhdmUgdGhhdCBpbmZvcm1hdGlvbiBmb3Igc3luYyBwdXJwb3Nlc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTdGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgc2VnbWVudEluZGV4ID0gcGxheWxpc3QuZGlzY29udGludWl0eVN0YXJ0c1tpXTtcbiAgICAgICAgICB2YXIgZGlzY29udGludWl0eSA9IHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTZXF1ZW5jZSArIGkgKyAxO1xuICAgICAgICAgIHZhciBtZWRpYUluZGV4RGlmZiA9IHNlZ21lbnRJbmRleCAtIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXg7XG4gICAgICAgICAgdmFyIGFjY3VyYWN5ID0gTWF0aC5hYnMobWVkaWFJbmRleERpZmYpO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLmRpc2NvbnRpbnVpdGllc1tkaXNjb250aW51aXR5XSB8fCB0aGlzLmRpc2NvbnRpbnVpdGllc1tkaXNjb250aW51aXR5XS5hY2N1cmFjeSA+IGFjY3VyYWN5KSB7XG4gICAgICAgICAgICB2YXIgdGltZSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgaWYgKG1lZGlhSW5kZXhEaWZmIDwgMCkge1xuICAgICAgICAgICAgICB0aW1lID0gc2VnbWVudC5zdGFydCAtIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc2VnbWVudEluZm8ubWVkaWFJbmRleCwgc2VnbWVudEluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRpbWUgPSBzZWdtZW50LmVuZCArIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc2VnbWVudEluZm8ubWVkaWFJbmRleCArIDEsIHNlZ21lbnRJbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGlzY29udGludWl0aWVzW2Rpc2NvbnRpbnVpdHldID0ge1xuICAgICAgICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICAgICAgICBhY2N1cmFjeTogYWNjdXJhY3lcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTeW5jQ29udHJvbGxlcjtcbn0odmlkZW9qcyQxLkV2ZW50VGFyZ2V0KTtcblxudmFyIERlY3J5cHRlciQxID0gbmV3IHNoaW1Xb3JrZXIoXCIuL2RlY3J5cHRlci13b3JrZXIud29ya2VyLmpzXCIsIGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50JCQxKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgZGVjcnlwdGVyV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgIC8qXG4gICAgICogcGtjczcucGFkXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL2JyaWdodGNvdmUvcGtjczdcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgMjAxNCBCcmlnaHRjb3ZlXG4gICAgICogTGljZW5zZWQgdW5kZXIgdGhlIGFwYWNoZTIgbGljZW5zZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1YmFycmF5IG9mIGEgVWludDhBcnJheSB3aXRob3V0IFBLQ1MjNyBwYWRkaW5nLlxuICAgICAqIEBwYXJhbSBwYWRkZWQge1VpbnQ4QXJyYXl9IHVuZW5jcnlwdGVkIGJ5dGVzIHRoYXQgaGF2ZSBiZWVuIHBhZGRlZFxuICAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHRoZSB1bnBhZGRlZCBieXRlc1xuICAgICAqIEBzZWUgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTY1MlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVucGFkKHBhZGRlZCkge1xuICAgICAgcmV0dXJuIHBhZGRlZC5zdWJhcnJheSgwLCBwYWRkZWQuYnl0ZUxlbmd0aCAtIHBhZGRlZFtwYWRkZWQuYnl0ZUxlbmd0aCAtIDFdKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiBjbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIHZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICAgIH07XG5cbiAgICB2YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZmlsZSBhZXMuanNcbiAgICAgKlxuICAgICAqIFRoaXMgZmlsZSBjb250YWlucyBhbiBhZGFwdGF0aW9uIG9mIHRoZSBBRVMgZGVjcnlwdGlvbiBhbGdvcml0aG1cbiAgICAgKiBmcm9tIHRoZSBTdGFuZGZvcmQgSmF2YXNjcmlwdCBDcnlwdG9ncmFwaHkgTGlicmFyeS4gVGhhdCB3b3JrIGlzXG4gICAgICogY292ZXJlZCBieSB0aGUgZm9sbG93aW5nIGNvcHlyaWdodCBhbmQgcGVybWlzc2lvbnMgbm90aWNlOlxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IDIwMDktMjAxMCBFbWlseSBTdGFyaywgTWlrZSBIYW1idXJnLCBEYW4gQm9uZWguXG4gICAgICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICAgICAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAgICAgKiBtZXQ6XG4gICAgICpcbiAgICAgKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICAgKlxuICAgICAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbiAgICAgKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICAgICAqICAgIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxuICAgICAqICAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAgICAgKlxuICAgICAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIEFVVEhPUlMgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTUyBPUlxuICAgICAqIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gICAgICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICAgICAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBPUiBDT05UUklCVVRPUlMgQkVcbiAgICAgKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gICAgICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAgICAgKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1JcbiAgICAgKiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSxcbiAgICAgKiBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRVxuICAgICAqIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU5cbiAgICAgKiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAgICAgKlxuICAgICAqIFRoZSB2aWV3cyBhbmQgY29uY2x1c2lvbnMgY29udGFpbmVkIGluIHRoZSBzb2Z0d2FyZSBhbmQgZG9jdW1lbnRhdGlvblxuICAgICAqIGFyZSB0aG9zZSBvZiB0aGUgYXV0aG9ycyBhbmQgc2hvdWxkIG5vdCBiZSBpbnRlcnByZXRlZCBhcyByZXByZXNlbnRpbmdcbiAgICAgKiBvZmZpY2lhbCBwb2xpY2llcywgZWl0aGVyIGV4cHJlc3NlZCBvciBpbXBsaWVkLCBvZiB0aGUgYXV0aG9ycy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEV4cGFuZCB0aGUgUy1ib3ggdGFibGVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuXG4gICAgdmFyIHByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAgICAgdmFyIHRhYmxlcyA9IFtbW10sIFtdLCBbXSwgW10sIFtdXSwgW1tdLCBbXSwgW10sIFtdLCBbXV1dO1xuICAgICAgdmFyIGVuY1RhYmxlID0gdGFibGVzWzBdO1xuICAgICAgdmFyIGRlY1RhYmxlID0gdGFibGVzWzFdO1xuICAgICAgdmFyIHNib3ggPSBlbmNUYWJsZVs0XTtcbiAgICAgIHZhciBzYm94SW52ID0gZGVjVGFibGVbNF07XG4gICAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICAgIHZhciB4ID0gdm9pZCAwO1xuICAgICAgdmFyIHhJbnYgPSB2b2lkIDA7XG4gICAgICB2YXIgZCA9IFtdO1xuICAgICAgdmFyIHRoID0gW107XG4gICAgICB2YXIgeDIgPSB2b2lkIDA7XG4gICAgICB2YXIgeDQgPSB2b2lkIDA7XG4gICAgICB2YXIgeDggPSB2b2lkIDA7XG4gICAgICB2YXIgcyA9IHZvaWQgMDtcbiAgICAgIHZhciB0RW5jID0gdm9pZCAwO1xuICAgICAgdmFyIHREZWMgPSB2b2lkIDA7IC8vIENvbXB1dGUgZG91YmxlIGFuZCB0aGlyZCB0YWJsZXNcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgIHRoWyhkW2ldID0gaSA8PCAxIF4gKGkgPj4gNykgKiAyODMpIF4gaV0gPSBpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHggPSB4SW52ID0gMDsgIXNib3hbeF07IHggXj0geDIgfHwgMSwgeEludiA9IHRoW3hJbnZdIHx8IDEpIHtcbiAgICAgICAgLy8gQ29tcHV0ZSBzYm94XG4gICAgICAgIHMgPSB4SW52IF4geEludiA8PCAxIF4geEludiA8PCAyIF4geEludiA8PCAzIF4geEludiA8PCA0O1xuICAgICAgICBzID0gcyA+PiA4IF4gcyAmIDI1NSBeIDk5O1xuICAgICAgICBzYm94W3hdID0gcztcbiAgICAgICAgc2JveEludltzXSA9IHg7IC8vIENvbXB1dGUgTWl4Q29sdW1uc1xuXG4gICAgICAgIHg4ID0gZFt4NCA9IGRbeDIgPSBkW3hdXV07XG4gICAgICAgIHREZWMgPSB4OCAqIDB4MTAxMDEwMSBeIHg0ICogMHgxMDAwMSBeIHgyICogMHgxMDEgXiB4ICogMHgxMDEwMTAwO1xuICAgICAgICB0RW5jID0gZFtzXSAqIDB4MTAxIF4gcyAqIDB4MTAxMDEwMDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgZW5jVGFibGVbaV1beF0gPSB0RW5jID0gdEVuYyA8PCAyNCBeIHRFbmMgPj4+IDg7XG4gICAgICAgICAgZGVjVGFibGVbaV1bc10gPSB0RGVjID0gdERlYyA8PCAyNCBeIHREZWMgPj4+IDg7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQ29tcGFjdGlmeS4gQ29uc2lkZXJhYmxlIHNwZWVkdXAgb24gRmlyZWZveC5cblxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIGVuY1RhYmxlW2ldID0gZW5jVGFibGVbaV0uc2xpY2UoMCk7XG4gICAgICAgIGRlY1RhYmxlW2ldID0gZGVjVGFibGVbaV0uc2xpY2UoMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YWJsZXM7XG4gICAgfTtcblxuICAgIHZhciBhZXNUYWJsZXMgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIG91dCBhbiBBRVMga2V5IGZvciBib3RoIGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24uIFRoaXNcbiAgICAgKiBpcyBhIGxvdy1sZXZlbCBjbGFzcy4gVXNlIGEgY2lwaGVyIG1vZGUgdG8gZG8gYnVsayBlbmNyeXB0aW9uLlxuICAgICAqXG4gICAgICogQGNsYXNzIEFFU1xuICAgICAqIEBwYXJhbSBrZXkge0FycmF5fSBUaGUga2V5IGFzIGFuIGFycmF5IG9mIDQsIDYgb3IgOCB3b3Jkcy5cbiAgICAgKi9cblxuICAgIHZhciBBRVMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBBRVMoa2V5KSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEFFUyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZXhwYW5kZWQgUy1ib3ggYW5kIGludmVyc2UgUy1ib3ggdGFibGVzLiBUaGVzZSB3aWxsIGJlIGNvbXB1dGVkXG4gICAgICAgICAqIG9uIHRoZSBjbGllbnQgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNlbmQgdGhlbSBkb3duIHRoZSB3aXJlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGVyZSBhcmUgdHdvIHRhYmxlcywgX3RhYmxlc1swXSBpcyBmb3IgZW5jcnlwdGlvbiBhbmRcbiAgICAgICAgICogX3RhYmxlc1sxXSBpcyBmb3IgZGVjcnlwdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGZpcnN0IDQgc3ViLXRhYmxlcyBhcmUgdGhlIGV4cGFuZGVkIFMtYm94IHdpdGggTWl4Q29sdW1ucy4gVGhlXG4gICAgICAgICAqIGxhc3QgKF90YWJsZXNbMDFdWzRdKSBpcyB0aGUgUy1ib3ggaXRzZWxmLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSB5ZXQgdG8gcHJlY29tcHV0ZSB0aGUgUy1ib3ggdGFibGVzXG4gICAgICAgIC8vIGRvIHNvIG5vd1xuXG4gICAgICAgIGlmICghYWVzVGFibGVzKSB7XG4gICAgICAgICAgYWVzVGFibGVzID0gcHJlY29tcHV0ZSgpO1xuICAgICAgICB9IC8vIHRoZW4gbWFrZSBhIGNvcHkgb2YgdGhhdCBvYmplY3QgZm9yIHVzZVxuXG5cbiAgICAgICAgdGhpcy5fdGFibGVzID0gW1thZXNUYWJsZXNbMF1bMF0uc2xpY2UoKSwgYWVzVGFibGVzWzBdWzFdLnNsaWNlKCksIGFlc1RhYmxlc1swXVsyXS5zbGljZSgpLCBhZXNUYWJsZXNbMF1bM10uc2xpY2UoKSwgYWVzVGFibGVzWzBdWzRdLnNsaWNlKCldLCBbYWVzVGFibGVzWzFdWzBdLnNsaWNlKCksIGFlc1RhYmxlc1sxXVsxXS5zbGljZSgpLCBhZXNUYWJsZXNbMV1bMl0uc2xpY2UoKSwgYWVzVGFibGVzWzFdWzNdLnNsaWNlKCksIGFlc1RhYmxlc1sxXVs0XS5zbGljZSgpXV07XG4gICAgICAgIHZhciBpID0gdm9pZCAwO1xuICAgICAgICB2YXIgaiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHRtcCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGVuY0tleSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGRlY0tleSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHNib3ggPSB0aGlzLl90YWJsZXNbMF1bNF07XG4gICAgICAgIHZhciBkZWNUYWJsZSA9IHRoaXMuX3RhYmxlc1sxXTtcbiAgICAgICAgdmFyIGtleUxlbiA9IGtleS5sZW5ndGg7XG4gICAgICAgIHZhciByY29uID0gMTtcblxuICAgICAgICBpZiAoa2V5TGVuICE9PSA0ICYmIGtleUxlbiAhPT0gNiAmJiBrZXlMZW4gIT09IDgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWVzIGtleSBzaXplJyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmNLZXkgPSBrZXkuc2xpY2UoMCk7XG4gICAgICAgIGRlY0tleSA9IFtdO1xuICAgICAgICB0aGlzLl9rZXkgPSBbZW5jS2V5LCBkZWNLZXldOyAvLyBzY2hlZHVsZSBlbmNyeXB0aW9uIGtleXNcblxuICAgICAgICBmb3IgKGkgPSBrZXlMZW47IGkgPCA0ICoga2V5TGVuICsgMjg7IGkrKykge1xuICAgICAgICAgIHRtcCA9IGVuY0tleVtpIC0gMV07IC8vIGFwcGx5IHNib3hcblxuICAgICAgICAgIGlmIChpICUga2V5TGVuID09PSAwIHx8IGtleUxlbiA9PT0gOCAmJiBpICUga2V5TGVuID09PSA0KSB7XG4gICAgICAgICAgICB0bXAgPSBzYm94W3RtcCA+Pj4gMjRdIDw8IDI0IF4gc2JveFt0bXAgPj4gMTYgJiAyNTVdIDw8IDE2IF4gc2JveFt0bXAgPj4gOCAmIDI1NV0gPDwgOCBeIHNib3hbdG1wICYgMjU1XTsgLy8gc2hpZnQgcm93cyBhbmQgYWRkIHJjb25cblxuICAgICAgICAgICAgaWYgKGkgJSBrZXlMZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgdG1wID0gdG1wIDw8IDggXiB0bXAgPj4+IDI0IF4gcmNvbiA8PCAyNDtcbiAgICAgICAgICAgICAgcmNvbiA9IHJjb24gPDwgMSBeIChyY29uID4+IDcpICogMjgzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGVuY0tleVtpXSA9IGVuY0tleVtpIC0ga2V5TGVuXSBeIHRtcDtcbiAgICAgICAgfSAvLyBzY2hlZHVsZSBkZWNyeXB0aW9uIGtleXNcblxuXG4gICAgICAgIGZvciAoaiA9IDA7IGk7IGorKywgaS0tKSB7XG4gICAgICAgICAgdG1wID0gZW5jS2V5W2ogJiAzID8gaSA6IGkgLSA0XTtcblxuICAgICAgICAgIGlmIChpIDw9IDQgfHwgaiA8IDQpIHtcbiAgICAgICAgICAgIGRlY0tleVtqXSA9IHRtcDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVjS2V5W2pdID0gZGVjVGFibGVbMF1bc2JveFt0bXAgPj4+IDI0XV0gXiBkZWNUYWJsZVsxXVtzYm94W3RtcCA+PiAxNiAmIDI1NV1dIF4gZGVjVGFibGVbMl1bc2JveFt0bXAgPj4gOCAmIDI1NV1dIF4gZGVjVGFibGVbM11bc2JveFt0bXAgJiAyNTVdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRGVjcnlwdCAxNiBieXRlcywgc3BlY2lmaWVkIGFzIGZvdXIgMzItYml0IHdvcmRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmNyeXB0ZWQwIHRoZSBmaXJzdCB3b3JkIHRvIGRlY3J5cHRcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmNyeXB0ZWQxIHRoZSBzZWNvbmQgd29yZCB0byBkZWNyeXB0XG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5jcnlwdGVkMiB0aGUgdGhpcmQgd29yZCB0byBkZWNyeXB0XG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5jcnlwdGVkMyB0aGUgZm91cnRoIHdvcmQgdG8gZGVjcnlwdFxuICAgICAgICogQHBhcmFtIHtJbnQzMkFycmF5fSBvdXQgdGhlIGFycmF5IHRvIHdyaXRlIHRoZSBkZWNyeXB0ZWQgd29yZHNcbiAgICAgICAqIGludG9cbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgdGhlIG9mZnNldCBpbnRvIHRoZSBvdXRwdXQgYXJyYXkgdG8gc3RhcnRcbiAgICAgICAqIHdyaXRpbmcgcmVzdWx0c1xuICAgICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBwbGFpbnRleHQuXG4gICAgICAgKi9cblxuXG4gICAgICBBRVMucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiBkZWNyeXB0JCQxKGVuY3J5cHRlZDAsIGVuY3J5cHRlZDEsIGVuY3J5cHRlZDIsIGVuY3J5cHRlZDMsIG91dCwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlbMV07IC8vIHN0YXRlIHZhcmlhYmxlcyBhLGIsYyxkIGFyZSBsb2FkZWQgd2l0aCBwcmUtd2hpdGVuZWQgZGF0YVxuXG4gICAgICAgIHZhciBhID0gZW5jcnlwdGVkMCBeIGtleVswXTtcbiAgICAgICAgdmFyIGIgPSBlbmNyeXB0ZWQzIF4ga2V5WzFdO1xuICAgICAgICB2YXIgYyA9IGVuY3J5cHRlZDIgXiBrZXlbMl07XG4gICAgICAgIHZhciBkID0gZW5jcnlwdGVkMSBeIGtleVszXTtcbiAgICAgICAgdmFyIGEyID0gdm9pZCAwO1xuICAgICAgICB2YXIgYjIgPSB2b2lkIDA7XG4gICAgICAgIHZhciBjMiA9IHZvaWQgMDsgLy8ga2V5Lmxlbmd0aCA9PT0gMiA/XG5cbiAgICAgICAgdmFyIG5Jbm5lclJvdW5kcyA9IGtleS5sZW5ndGggLyA0IC0gMjtcbiAgICAgICAgdmFyIGkgPSB2b2lkIDA7XG4gICAgICAgIHZhciBrSW5kZXggPSA0O1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLl90YWJsZXNbMV07IC8vIGxvYWQgdXAgdGhlIHRhYmxlc1xuXG4gICAgICAgIHZhciB0YWJsZTAgPSB0YWJsZVswXTtcbiAgICAgICAgdmFyIHRhYmxlMSA9IHRhYmxlWzFdO1xuICAgICAgICB2YXIgdGFibGUyID0gdGFibGVbMl07XG4gICAgICAgIHZhciB0YWJsZTMgPSB0YWJsZVszXTtcbiAgICAgICAgdmFyIHNib3ggPSB0YWJsZVs0XTsgLy8gSW5uZXIgcm91bmRzLiBDcmliYmVkIGZyb20gT3BlblNTTC5cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbklubmVyUm91bmRzOyBpKyspIHtcbiAgICAgICAgICBhMiA9IHRhYmxlMFthID4+PiAyNF0gXiB0YWJsZTFbYiA+PiAxNiAmIDI1NV0gXiB0YWJsZTJbYyA+PiA4ICYgMjU1XSBeIHRhYmxlM1tkICYgMjU1XSBeIGtleVtrSW5kZXhdO1xuICAgICAgICAgIGIyID0gdGFibGUwW2IgPj4+IDI0XSBeIHRhYmxlMVtjID4+IDE2ICYgMjU1XSBeIHRhYmxlMltkID4+IDggJiAyNTVdIF4gdGFibGUzW2EgJiAyNTVdIF4ga2V5W2tJbmRleCArIDFdO1xuICAgICAgICAgIGMyID0gdGFibGUwW2MgPj4+IDI0XSBeIHRhYmxlMVtkID4+IDE2ICYgMjU1XSBeIHRhYmxlMlthID4+IDggJiAyNTVdIF4gdGFibGUzW2IgJiAyNTVdIF4ga2V5W2tJbmRleCArIDJdO1xuICAgICAgICAgIGQgPSB0YWJsZTBbZCA+Pj4gMjRdIF4gdGFibGUxW2EgPj4gMTYgJiAyNTVdIF4gdGFibGUyW2IgPj4gOCAmIDI1NV0gXiB0YWJsZTNbYyAmIDI1NV0gXiBrZXlba0luZGV4ICsgM107XG4gICAgICAgICAga0luZGV4ICs9IDQ7XG4gICAgICAgICAgYSA9IGEyO1xuICAgICAgICAgIGIgPSBiMjtcbiAgICAgICAgICBjID0gYzI7XG4gICAgICAgIH0gLy8gTGFzdCByb3VuZC5cblxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICBvdXRbKDMgJiAtaSkgKyBvZmZzZXRdID0gc2JveFthID4+PiAyNF0gPDwgMjQgXiBzYm94W2IgPj4gMTYgJiAyNTVdIDw8IDE2IF4gc2JveFtjID4+IDggJiAyNTVdIDw8IDggXiBzYm94W2QgJiAyNTVdIF4ga2V5W2tJbmRleCsrXTtcbiAgICAgICAgICBhMiA9IGE7XG4gICAgICAgICAgYSA9IGI7XG4gICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgYyA9IGQ7XG4gICAgICAgICAgZCA9IGEyO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQUVTO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiBAZmlsZSBzdHJlYW0uanNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgbGlnaHR3ZWlnaHQgcmVhZGFibGUgc3RyZWFtIGltcGxlbWVudGlvbiB0aGF0IGhhbmRsZXMgZXZlbnQgZGlzcGF0Y2hpbmcuXG4gICAgICpcbiAgICAgKiBAY2xhc3MgU3RyZWFtXG4gICAgICovXG5cblxuICAgIHZhciBTdHJlYW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBTdHJlYW0oKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmVhbSk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciB0aGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGFuIGV2ZW50IG9mXG4gICAgICAgKiB0aGUgc3BlY2lmaWVkIHR5cGUgb2NjdXJzXG4gICAgICAgKi9cblxuXG4gICAgICBTdHJlYW0ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAgYSBmdW5jdGlvbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZm9yIHRoaXNcbiAgICAgICAqIHR5cGUgb2YgZXZlbnQgdGhyb3VnaCBgb25gXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBpZiB3ZSBjb3VsZCB0dXJuIGl0IG9mZiBvciBub3RcbiAgICAgICAqL1xuXG5cbiAgICAgIFN0cmVhbS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTE7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBUcmlnZ2VyIGFuIGV2ZW50IG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBvbiB0aGlzIHN0cmVhbS4gQW55IGFkZGl0aW9uYWxcbiAgICAgICAqIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBwYXNzZWQgYXMgcGFyYW1ldGVycyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgdGhlIGV2ZW50IG5hbWVcbiAgICAgICAqL1xuXG5cbiAgICAgIFN0cmVhbS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIodHlwZSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XG5cbiAgICAgICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU2xpY2luZyB0aGUgYXJndW1lbnRzIG9uIGV2ZXJ5IGludm9jYXRpb24gb2YgdGhpcyBtZXRob2RcbiAgICAgICAgLy8gY2FuIGFkZCBhIHNpZ25pZmljYW50IGFtb3VudCBvZiBvdmVyaGVhZC4gQXZvaWQgdGhlXG4gICAgICAgIC8vIGludGVybWVkaWF0ZSBvYmplY3QgY3JlYXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhXG4gICAgICAgIC8vIHNpbmdsZSBjYWxsYmFjayBhcmd1bWVudFxuXG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICB2YXIgX2xlbmd0aCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2xlbmd0aDsgKytfaSkge1xuICAgICAgICAgICAgY2FsbGJhY2tzW19pXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIERlc3Ryb3lzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cC5cbiAgICAgICAqL1xuXG5cbiAgICAgIFN0cmVhbS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBGb3J3YXJkcyBhbGwgYGRhdGFgIGV2ZW50cyBvbiB0aGlzIHN0cmVhbSB0byB0aGUgZGVzdGluYXRpb24gc3RyZWFtLiBUaGVcbiAgICAgICAqIGRlc3RpbmF0aW9uIHN0cmVhbSBzaG91bGQgcHJvdmlkZSBhIG1ldGhvZCBgcHVzaGAgdG8gcmVjZWl2ZSB0aGUgZGF0YVxuICAgICAgICogZXZlbnRzIGFzIHRoZXkgYXJyaXZlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyZWFtfSBkZXN0aW5hdGlvbiB0aGUgc3RyZWFtIHRoYXQgd2lsbCByZWNlaXZlIGFsbCBgZGF0YWAgZXZlbnRzXG4gICAgICAgKiBAc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbCNzdHJlYW1fcmVhZGFibGVfcGlwZV9kZXN0aW5hdGlvbl9vcHRpb25zXG4gICAgICAgKi9cblxuXG4gICAgICBTdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiBwaXBlKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uLnB1c2goZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFN0cmVhbTtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogQGZpbGUgYXN5bmMtc3RyZWFtLmpzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBTdHJlYW0gY2xhc3MgdG8gdXNlIHNldFRpZW1vdXRcbiAgICAgKiBhbmQgcnVuIHN0cmVhbSBcImpvYnNcIiBBc3luY2hyb25vdXNseVxuICAgICAqXG4gICAgICogQGNsYXNzIEFzeW5jU3RyZWFtXG4gICAgICogQGV4dGVuZHMgU3RyZWFtXG4gICAgICovXG5cblxuICAgIHZhciBBc3luY1N0cmVhbSQkMSA9IGZ1bmN0aW9uIChfU3RyZWFtKSB7XG4gICAgICBpbmhlcml0cyhBc3luY1N0cmVhbSQkMSwgX1N0cmVhbSk7XG5cbiAgICAgIGZ1bmN0aW9uIEFzeW5jU3RyZWFtJCQxKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBBc3luY1N0cmVhbSQkMSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfU3RyZWFtLmNhbGwodGhpcywgU3RyZWFtKSk7XG5cbiAgICAgICAgX3RoaXMuam9icyA9IFtdO1xuICAgICAgICBfdGhpcy5kZWxheSA9IDE7XG4gICAgICAgIF90aGlzLnRpbWVvdXRfID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBwcm9jZXNzIGFuIGFzeW5jIGpvYlxuICAgICAgICpcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cblxuXG4gICAgICBBc3luY1N0cmVhbSQkMS5wcm90b3R5cGUucHJvY2Vzc0pvYl8gPSBmdW5jdGlvbiBwcm9jZXNzSm9iXygpIHtcbiAgICAgICAgdGhpcy5qb2JzLnNoaWZ0KCkoKTtcblxuICAgICAgICBpZiAodGhpcy5qb2JzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMudGltZW91dF8gPSBzZXRUaW1lb3V0KHRoaXMucHJvY2Vzc0pvYl8uYmluZCh0aGlzKSwgdGhpcy5kZWxheSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aW1lb3V0XyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIHB1c2ggYSBqb2IgaW50byB0aGUgc3RyZWFtXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gam9iIHRoZSBqb2IgdG8gcHVzaCBpbnRvIHRoZSBzdHJlYW1cbiAgICAgICAqL1xuXG5cbiAgICAgIEFzeW5jU3RyZWFtJCQxLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaChqb2IpIHtcbiAgICAgICAgdGhpcy5qb2JzLnB1c2goam9iKTtcblxuICAgICAgICBpZiAoIXRoaXMudGltZW91dF8pIHtcbiAgICAgICAgICB0aGlzLnRpbWVvdXRfID0gc2V0VGltZW91dCh0aGlzLnByb2Nlc3NKb2JfLmJpbmQodGhpcyksIHRoaXMuZGVsYXkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQXN5bmNTdHJlYW0kJDE7XG4gICAgfShTdHJlYW0pO1xuICAgIC8qKlxuICAgICAqIEBmaWxlIGRlY3J5cHRlci5qc1xuICAgICAqXG4gICAgICogQW4gYXN5bmNocm9ub3VzIGltcGxlbWVudGF0aW9uIG9mIEFFUy0xMjggQ0JDIGRlY3J5cHRpb24gd2l0aFxuICAgICAqIFBLQ1MjNyBwYWRkaW5nLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBuZXR3b3JrLW9yZGVyIChiaWctZW5kaWFuKSBieXRlcyBpbnRvIHRoZWlyIGxpdHRsZS1lbmRpYW5cbiAgICAgKiByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cblxuXG4gICAgdmFyIG50b2ggPSBmdW5jdGlvbiBudG9oKHdvcmQpIHtcbiAgICAgIHJldHVybiB3b3JkIDw8IDI0IHwgKHdvcmQgJiAweGZmMDApIDw8IDggfCAod29yZCAmIDB4ZmYwMDAwKSA+PiA4IHwgd29yZCA+Pj4gMjQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWNyeXB0IGJ5dGVzIHVzaW5nIEFFUy0xMjggd2l0aCBDQkMgYW5kIFBLQ1MjNyBwYWRkaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBlbmNyeXB0ZWQgdGhlIGVuY3J5cHRlZCBieXRlc1xuICAgICAqIEBwYXJhbSB7VWludDMyQXJyYXl9IGtleSB0aGUgYnl0ZXMgb2YgdGhlIGRlY3J5cHRpb24ga2V5XG4gICAgICogQHBhcmFtIHtVaW50MzJBcnJheX0gaW5pdFZlY3RvciB0aGUgaW5pdGlhbGl6YXRpb24gdmVjdG9yIChJVikgdG9cbiAgICAgKiB1c2UgZm9yIHRoZSBmaXJzdCByb3VuZCBvZiBDQkMuXG4gICAgICogQHJldHVybiB7VWludDhBcnJheX0gdGhlIGRlY3J5cHRlZCBieXRlc1xuICAgICAqXG4gICAgICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FkdmFuY2VkX0VuY3J5cHRpb25fU3RhbmRhcmRcbiAgICAgKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmxvY2tfY2lwaGVyX21vZGVfb2Zfb3BlcmF0aW9uI0NpcGhlcl9CbG9ja19DaGFpbmluZ18uMjhDQkMuMjlcbiAgICAgKiBAc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyMzE1XG4gICAgICovXG5cblxuICAgIHZhciBkZWNyeXB0JCQxID0gZnVuY3Rpb24gZGVjcnlwdCQkMShlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3Rvcikge1xuICAgICAgLy8gd29yZC1sZXZlbCBhY2Nlc3MgdG8gdGhlIGVuY3J5cHRlZCBieXRlc1xuICAgICAgdmFyIGVuY3J5cHRlZDMyID0gbmV3IEludDMyQXJyYXkoZW5jcnlwdGVkLmJ1ZmZlciwgZW5jcnlwdGVkLmJ5dGVPZmZzZXQsIGVuY3J5cHRlZC5ieXRlTGVuZ3RoID4+IDIpO1xuICAgICAgdmFyIGRlY2lwaGVyID0gbmV3IEFFUyhBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChrZXkpKTsgLy8gYnl0ZSBhbmQgd29yZC1sZXZlbCBhY2Nlc3MgZm9yIHRoZSBkZWNyeXB0ZWQgb3V0cHV0XG5cbiAgICAgIHZhciBkZWNyeXB0ZWQgPSBuZXcgVWludDhBcnJheShlbmNyeXB0ZWQuYnl0ZUxlbmd0aCk7XG4gICAgICB2YXIgZGVjcnlwdGVkMzIgPSBuZXcgSW50MzJBcnJheShkZWNyeXB0ZWQuYnVmZmVyKTsgLy8gdGVtcG9yYXJ5IHZhcmlhYmxlcyBmb3Igd29ya2luZyB3aXRoIHRoZSBJViwgZW5jcnlwdGVkLCBhbmRcbiAgICAgIC8vIGRlY3J5cHRlZCBkYXRhXG5cbiAgICAgIHZhciBpbml0MCA9IHZvaWQgMDtcbiAgICAgIHZhciBpbml0MSA9IHZvaWQgMDtcbiAgICAgIHZhciBpbml0MiA9IHZvaWQgMDtcbiAgICAgIHZhciBpbml0MyA9IHZvaWQgMDtcbiAgICAgIHZhciBlbmNyeXB0ZWQwID0gdm9pZCAwO1xuICAgICAgdmFyIGVuY3J5cHRlZDEgPSB2b2lkIDA7XG4gICAgICB2YXIgZW5jcnlwdGVkMiA9IHZvaWQgMDtcbiAgICAgIHZhciBlbmNyeXB0ZWQzID0gdm9pZCAwOyAvLyBpdGVyYXRpb24gdmFyaWFibGVcblxuICAgICAgdmFyIHdvcmRJeCA9IHZvaWQgMDsgLy8gcHVsbCBvdXQgdGhlIHdvcmRzIG9mIHRoZSBJViB0byBlbnN1cmUgd2UgZG9uJ3QgbW9kaWZ5IHRoZVxuICAgICAgLy8gcGFzc2VkLWluIHJlZmVyZW5jZSBhbmQgZWFzaWVyIGFjY2Vzc1xuXG4gICAgICBpbml0MCA9IGluaXRWZWN0b3JbMF07XG4gICAgICBpbml0MSA9IGluaXRWZWN0b3JbMV07XG4gICAgICBpbml0MiA9IGluaXRWZWN0b3JbMl07XG4gICAgICBpbml0MyA9IGluaXRWZWN0b3JbM107IC8vIGRlY3J5cHQgZm91ciB3b3JkIHNlcXVlbmNlcywgYXBwbHlpbmcgY2lwaGVyLWJsb2NrIGNoYWluaW5nIChDQkMpXG4gICAgICAvLyB0byBlYWNoIGRlY3J5cHRlZCBibG9ja1xuXG4gICAgICBmb3IgKHdvcmRJeCA9IDA7IHdvcmRJeCA8IGVuY3J5cHRlZDMyLmxlbmd0aDsgd29yZEl4ICs9IDQpIHtcbiAgICAgICAgLy8gY29udmVydCBiaWctZW5kaWFuIChuZXR3b3JrIG9yZGVyKSB3b3JkcyBpbnRvIGxpdHRsZS1lbmRpYW5cbiAgICAgICAgLy8gKGphdmFzY3JpcHQgb3JkZXIpXG4gICAgICAgIGVuY3J5cHRlZDAgPSBudG9oKGVuY3J5cHRlZDMyW3dvcmRJeF0pO1xuICAgICAgICBlbmNyeXB0ZWQxID0gbnRvaChlbmNyeXB0ZWQzMlt3b3JkSXggKyAxXSk7XG4gICAgICAgIGVuY3J5cHRlZDIgPSBudG9oKGVuY3J5cHRlZDMyW3dvcmRJeCArIDJdKTtcbiAgICAgICAgZW5jcnlwdGVkMyA9IG50b2goZW5jcnlwdGVkMzJbd29yZEl4ICsgM10pOyAvLyBkZWNyeXB0IHRoZSBibG9ja1xuXG4gICAgICAgIGRlY2lwaGVyLmRlY3J5cHQoZW5jcnlwdGVkMCwgZW5jcnlwdGVkMSwgZW5jcnlwdGVkMiwgZW5jcnlwdGVkMywgZGVjcnlwdGVkMzIsIHdvcmRJeCk7IC8vIFhPUiB3aXRoIHRoZSBJViwgYW5kIHJlc3RvcmUgbmV0d29yayBieXRlLW9yZGVyIHRvIG9idGFpbiB0aGVcbiAgICAgICAgLy8gcGxhaW50ZXh0XG5cbiAgICAgICAgZGVjcnlwdGVkMzJbd29yZEl4XSA9IG50b2goZGVjcnlwdGVkMzJbd29yZEl4XSBeIGluaXQwKTtcbiAgICAgICAgZGVjcnlwdGVkMzJbd29yZEl4ICsgMV0gPSBudG9oKGRlY3J5cHRlZDMyW3dvcmRJeCArIDFdIF4gaW5pdDEpO1xuICAgICAgICBkZWNyeXB0ZWQzMlt3b3JkSXggKyAyXSA9IG50b2goZGVjcnlwdGVkMzJbd29yZEl4ICsgMl0gXiBpbml0Mik7XG4gICAgICAgIGRlY3J5cHRlZDMyW3dvcmRJeCArIDNdID0gbnRvaChkZWNyeXB0ZWQzMlt3b3JkSXggKyAzXSBeIGluaXQzKTsgLy8gc2V0dXAgdGhlIElWIGZvciB0aGUgbmV4dCByb3VuZFxuXG4gICAgICAgIGluaXQwID0gZW5jcnlwdGVkMDtcbiAgICAgICAgaW5pdDEgPSBlbmNyeXB0ZWQxO1xuICAgICAgICBpbml0MiA9IGVuY3J5cHRlZDI7XG4gICAgICAgIGluaXQzID0gZW5jcnlwdGVkMztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlY3J5cHRlZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBgRGVjcnlwdGVyYCBjbGFzcyB0aGF0IG1hbmFnZXMgZGVjcnlwdGlvbiBvZiBBRVNcbiAgICAgKiBkYXRhIHRocm91Z2ggYEFzeW5jU3RyZWFtYCBvYmplY3RzIGFuZCB0aGUgYGRlY3J5cHRgXG4gICAgICogZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gZW5jcnlwdGVkIHRoZSBlbmNyeXB0ZWQgYnl0ZXNcbiAgICAgKiBAcGFyYW0ge1VpbnQzMkFycmF5fSBrZXkgdGhlIGJ5dGVzIG9mIHRoZSBkZWNyeXB0aW9uIGtleVxuICAgICAqIEBwYXJhbSB7VWludDMyQXJyYXl9IGluaXRWZWN0b3IgdGhlIGluaXRpYWxpemF0aW9uIHZlY3RvciAoSVYpIHRvXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZSB0aGUgZnVuY3Rpb24gdG8gcnVuIHdoZW4gZG9uZVxuICAgICAqIEBjbGFzcyBEZWNyeXB0ZXJcbiAgICAgKi9cblxuXG4gICAgdmFyIERlY3J5cHRlciQkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIERlY3J5cHRlciQkMShlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3RvciwgZG9uZSkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEZWNyeXB0ZXIkJDEpO1xuICAgICAgICB2YXIgc3RlcCA9IERlY3J5cHRlciQkMS5TVEVQO1xuICAgICAgICB2YXIgZW5jcnlwdGVkMzIgPSBuZXcgSW50MzJBcnJheShlbmNyeXB0ZWQuYnVmZmVyKTtcbiAgICAgICAgdmFyIGRlY3J5cHRlZCA9IG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZC5ieXRlTGVuZ3RoKTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB0aGlzLmFzeW5jU3RyZWFtXyA9IG5ldyBBc3luY1N0cmVhbSQkMSgpOyAvLyBzcGxpdCB1cCB0aGUgZW5jcnlwdGlvbiBqb2IgYW5kIGRvIHRoZSBpbmRpdmlkdWFsIGNodW5rcyBhc3luY2hyb25vdXNseVxuXG4gICAgICAgIHRoaXMuYXN5bmNTdHJlYW1fLnB1c2godGhpcy5kZWNyeXB0Q2h1bmtfKGVuY3J5cHRlZDMyLnN1YmFycmF5KGksIGkgKyBzdGVwKSwga2V5LCBpbml0VmVjdG9yLCBkZWNyeXB0ZWQpKTtcblxuICAgICAgICBmb3IgKGkgPSBzdGVwOyBpIDwgZW5jcnlwdGVkMzIubGVuZ3RoOyBpICs9IHN0ZXApIHtcbiAgICAgICAgICBpbml0VmVjdG9yID0gbmV3IFVpbnQzMkFycmF5KFtudG9oKGVuY3J5cHRlZDMyW2kgLSA0XSksIG50b2goZW5jcnlwdGVkMzJbaSAtIDNdKSwgbnRvaChlbmNyeXB0ZWQzMltpIC0gMl0pLCBudG9oKGVuY3J5cHRlZDMyW2kgLSAxXSldKTtcbiAgICAgICAgICB0aGlzLmFzeW5jU3RyZWFtXy5wdXNoKHRoaXMuZGVjcnlwdENodW5rXyhlbmNyeXB0ZWQzMi5zdWJhcnJheShpLCBpICsgc3RlcCksIGtleSwgaW5pdFZlY3RvciwgZGVjcnlwdGVkKSk7XG4gICAgICAgIH0gLy8gaW52b2tlIHRoZSBkb25lKCkgY2FsbGJhY2sgd2hlbiBldmVyeXRoaW5nIGlzIGZpbmlzaGVkXG5cblxuICAgICAgICB0aGlzLmFzeW5jU3RyZWFtXy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyByZW1vdmUgcGtjcyM3IHBhZGRpbmcgZnJvbSB0aGUgZGVjcnlwdGVkIGJ5dGVzXG4gICAgICAgICAgZG9uZShudWxsLCB1bnBhZChkZWNyeXB0ZWQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIGEgZ2V0dGVyIGZvciBzdGVwIHRoZSBtYXhpbXVtIG51bWJlciBvZiBieXRlcyB0byBwcm9jZXNzIGF0IG9uZSB0aW1lXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgdmFsdWUgb2Ygc3RlcCAzMjAwMFxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuXG5cbiAgICAgIERlY3J5cHRlciQkMS5wcm90b3R5cGUuZGVjcnlwdENodW5rXyA9IGZ1bmN0aW9uIGRlY3J5cHRDaHVua18oZW5jcnlwdGVkLCBrZXksIGluaXRWZWN0b3IsIGRlY3J5cHRlZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBieXRlcyA9IGRlY3J5cHQkJDEoZW5jcnlwdGVkLCBrZXksIGluaXRWZWN0b3IpO1xuICAgICAgICAgIGRlY3J5cHRlZC5zZXQoYnl0ZXMsIGVuY3J5cHRlZC5ieXRlT2Zmc2V0KTtcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIGNyZWF0ZUNsYXNzKERlY3J5cHRlciQkMSwgbnVsbCwgW3tcbiAgICAgICAga2V5OiAnU1RFUCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgIC8vIDQgKiA4MDAwO1xuICAgICAgICAgIHJldHVybiAzMjAwMDtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIERlY3J5cHRlciQkMTtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogQGZpbGUgYmluLXV0aWxzLmpzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBmb3Igc2VuZGluZyB0byBhIHdlYiB3b3JrZXIgbW9kaWZ5aW5nIHByb3BlcnRpZXMgdGhhdCBhcmUgVHlwZWRBcnJheXNcbiAgICAgKiBpbnRvIGEgbmV3IG9iamVjdCB3aXRoIHNlcGVyYXRlZCBwcm9wZXJ0aWVzIGZvciB0aGUgYnVmZmVyLCBieXRlT2Zmc2V0LCBhbmQgYnl0ZUxlbmd0aC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtZXNzYWdlXG4gICAgICogICAgICAgIE9iamVjdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgdG8gc2VuZCB0byB0aGUgd2ViIHdvcmtlclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKiAgICAgICAgIE1vZGlmaWVkIG1lc3NhZ2Ugd2l0aCBUeXBlZEFycmF5IHZhbHVlcyBleHBhbmRlZFxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlXG4gICAgICovXG5cblxuICAgIHZhciBjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNmZXJhYmxlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICB2YXIgdHJhbnNmZXJhYmxlID0ge307XG4gICAgICBPYmplY3Qua2V5cyhtZXNzYWdlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbWVzc2FnZVtrZXldO1xuXG4gICAgICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgICAgICAgdHJhbnNmZXJhYmxlW2tleV0gPSB7XG4gICAgICAgICAgICBieXRlczogdmFsdWUuYnVmZmVyLFxuICAgICAgICAgICAgYnl0ZU9mZnNldDogdmFsdWUuYnl0ZU9mZnNldCxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IHZhbHVlLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYW5zZmVyYWJsZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRyYW5zZmVyYWJsZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE91ciB3ZWIgd29ya2VyIGludGVyZmFjZSBzbyB0aGF0IHRoaW5ncyBjYW4gdGFsayB0byBhZXMtZGVjcnlwdGVyXG4gICAgICogdGhhdCB3aWxsIGJlIHJ1bm5pbmcgaW4gYSB3ZWIgd29ya2VyLiB0aGUgc2NvcGUgaXMgcGFzc2VkIHRvIHRoaXMgYnlcbiAgICAgKiB3ZWJ3b3JraWZ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGZcbiAgICAgKiAgICAgICAgdGhlIHNjb3BlIGZvciB0aGUgd2ViIHdvcmtlclxuICAgICAqL1xuXG5cbiAgICB2YXIgRGVjcnlwdGVyV29ya2VyID0gZnVuY3Rpb24gRGVjcnlwdGVyV29ya2VyKHNlbGYpIHtcbiAgICAgIHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IG5ldyBVaW50OEFycmF5KGRhdGEuZW5jcnlwdGVkLmJ5dGVzLCBkYXRhLmVuY3J5cHRlZC5ieXRlT2Zmc2V0LCBkYXRhLmVuY3J5cHRlZC5ieXRlTGVuZ3RoKTtcbiAgICAgICAgdmFyIGtleSA9IG5ldyBVaW50MzJBcnJheShkYXRhLmtleS5ieXRlcywgZGF0YS5rZXkuYnl0ZU9mZnNldCwgZGF0YS5rZXkuYnl0ZUxlbmd0aCAvIDQpO1xuICAgICAgICB2YXIgaXYgPSBuZXcgVWludDMyQXJyYXkoZGF0YS5pdi5ieXRlcywgZGF0YS5pdi5ieXRlT2Zmc2V0LCBkYXRhLml2LmJ5dGVMZW5ndGggLyA0KTtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3LCBoYW5kbGUtY2FsbGJhY2stZXJyICovXG5cbiAgICAgICAgbmV3IERlY3J5cHRlciQkMShlbmNyeXB0ZWQsIGtleSwgaXYsIGZ1bmN0aW9uIChlcnIsIGJ5dGVzKSB7XG4gICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZTogZGF0YS5zb3VyY2UsXG4gICAgICAgICAgICBkZWNyeXB0ZWQ6IGJ5dGVzXG4gICAgICAgICAgfSksIFtieXRlcy5idWZmZXJdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBkZWNyeXB0ZXJXb3JrZXIgPSBuZXcgRGVjcnlwdGVyV29ya2VyKHNlbGYpO1xuICAgIHJldHVybiBkZWNyeXB0ZXJXb3JrZXI7XG4gIH0oKTtcbn0pO1xuLyoqXG4gKiBDb252ZXJ0IHRoZSBwcm9wZXJ0aWVzIG9mIGFuIEhMUyB0cmFjayBpbnRvIGFuIGF1ZGlvVHJhY2tLaW5kLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGF1ZGlvVHJhY2tLaW5kXyA9IGZ1bmN0aW9uIGF1ZGlvVHJhY2tLaW5kXyhwcm9wZXJ0aWVzKSB7XG4gIHZhciBraW5kID0gcHJvcGVydGllc1tcImRlZmF1bHRcIl0gPyAnbWFpbicgOiAnYWx0ZXJuYXRpdmUnO1xuXG4gIGlmIChwcm9wZXJ0aWVzLmNoYXJhY3RlcmlzdGljcyAmJiBwcm9wZXJ0aWVzLmNoYXJhY3RlcmlzdGljcy5pbmRleE9mKCdwdWJsaWMuYWNjZXNzaWJpbGl0eS5kZXNjcmliZXMtdmlkZW8nKSA+PSAwKSB7XG4gICAga2luZCA9ICdtYWluLWRlc2MnO1xuICB9XG5cbiAgcmV0dXJuIGtpbmQ7XG59O1xuLyoqXG4gKiBQYXVzZSBwcm92aWRlZCBzZWdtZW50IGxvYWRlciBhbmQgcGxheWxpc3QgbG9hZGVyIGlmIGFjdGl2ZVxuICpcbiAqIEBwYXJhbSB7U2VnbWVudExvYWRlcn0gc2VnbWVudExvYWRlclxuICogICAgICAgIFNlZ21lbnRMb2FkZXIgdG8gcGF1c2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBtZWRpYVR5cGVcbiAqICAgICAgICBBY3RpdmUgbWVkaWEgdHlwZVxuICogQGZ1bmN0aW9uIHN0b3BMb2FkZXJzXG4gKi9cblxuXG52YXIgc3RvcExvYWRlcnMgPSBmdW5jdGlvbiBzdG9wTG9hZGVycyhzZWdtZW50TG9hZGVyLCBtZWRpYVR5cGUpIHtcbiAgc2VnbWVudExvYWRlci5hYm9ydCgpO1xuICBzZWdtZW50TG9hZGVyLnBhdXNlKCk7XG5cbiAgaWYgKG1lZGlhVHlwZSAmJiBtZWRpYVR5cGUuYWN0aXZlUGxheWxpc3RMb2FkZXIpIHtcbiAgICBtZWRpYVR5cGUuYWN0aXZlUGxheWxpc3RMb2FkZXIucGF1c2UoKTtcbiAgICBtZWRpYVR5cGUuYWN0aXZlUGxheWxpc3RMb2FkZXIgPSBudWxsO1xuICB9XG59O1xuLyoqXG4gKiBTdGFydCBsb2FkaW5nIHByb3ZpZGVkIHNlZ21lbnQgbG9hZGVyIGFuZCBwbGF5bGlzdCBsb2FkZXJcbiAqXG4gKiBAcGFyYW0ge1BsYXlsaXN0TG9hZGVyfSBwbGF5bGlzdExvYWRlclxuICogICAgICAgIFBsYXlsaXN0TG9hZGVyIHRvIHN0YXJ0IGxvYWRpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBtZWRpYVR5cGVcbiAqICAgICAgICBBY3RpdmUgbWVkaWEgdHlwZVxuICogQGZ1bmN0aW9uIHN0YXJ0TG9hZGVyc1xuICovXG5cblxudmFyIHN0YXJ0TG9hZGVycyA9IGZ1bmN0aW9uIHN0YXJ0TG9hZGVycyhwbGF5bGlzdExvYWRlciwgbWVkaWFUeXBlKSB7XG4gIC8vIFNlZ21lbnQgbG9hZGVyIHdpbGwgYmUgc3RhcnRlZCBhZnRlciBgbG9hZGVkbWV0YWRhdGFgIG9yIGBsb2FkZWRwbGF5bGlzdGAgZnJvbSB0aGVcbiAgLy8gcGxheWxpc3QgbG9hZGVyXG4gIG1lZGlhVHlwZS5hY3RpdmVQbGF5bGlzdExvYWRlciA9IHBsYXlsaXN0TG9hZGVyO1xuICBwbGF5bGlzdExvYWRlci5sb2FkKCk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIG1lZGlhIGdyb3VwIGNoYW5nZXMuIEl0IHBlcmZvcm1zIGFcbiAqIG5vbi1kZXN0cnVjdGl2ZSAocHJlc2VydmUgdGhlIGJ1ZmZlcikgcmVzeW5jIG9mIHRoZSBTZWdtZW50TG9hZGVyLiBUaGlzIGlzIGJlY2F1c2UgYVxuICogY2hhbmdlIG9mIGdyb3VwIGlzIG1lcmVseSBhIHJlbmRpdGlvbiBzd2l0Y2ggb2YgdGhlIHNhbWUgY29udGVudCBhdCBhbm90aGVyIGVuY29kaW5nLFxuICogcmF0aGVyIHRoYW4gYSBjaGFuZ2Ugb2YgY29udGVudCwgc3VjaCBhcyBzd2l0Y2hpbmcgYXVkaW8gZnJvbSBFbmdsaXNoIHRvIFNwYW5pc2guXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBtZWRpYSBncm91cHNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogICAgICAgICBIYW5kbGVyIGZvciBhIG5vbi1kZXN0cnVjdGl2ZSByZXN5bmMgb2YgU2VnbWVudExvYWRlciB3aGVuIHRoZSBhY3RpdmUgbWVkaWFcbiAqICAgICAgICAgZ3JvdXAgY2hhbmdlcy5cbiAqIEBmdW5jdGlvbiBvbkdyb3VwQ2hhbmdlZFxuICovXG5cblxudmFyIG9uR3JvdXBDaGFuZ2VkID0gZnVuY3Rpb24gb25Hcm91cENoYW5nZWQodHlwZSwgc2V0dGluZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NldHRpbmdzJHNlZ21lbnRMb2FkID0gc2V0dGluZ3Muc2VnbWVudExvYWRlcnMsXG4gICAgICAgIHNlZ21lbnRMb2FkZXIgPSBfc2V0dGluZ3Mkc2VnbWVudExvYWRbdHlwZV0sXG4gICAgICAgIG1haW5TZWdtZW50TG9hZGVyID0gX3NldHRpbmdzJHNlZ21lbnRMb2FkLm1haW4sXG4gICAgICAgIG1lZGlhVHlwZSA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV07XG4gICAgdmFyIGFjdGl2ZVRyYWNrID0gbWVkaWFUeXBlLmFjdGl2ZVRyYWNrKCk7XG4gICAgdmFyIGFjdGl2ZUdyb3VwID0gbWVkaWFUeXBlLmFjdGl2ZUdyb3VwKGFjdGl2ZVRyYWNrKTtcbiAgICB2YXIgcHJldmlvdXNBY3RpdmVMb2FkZXIgPSBtZWRpYVR5cGUuYWN0aXZlUGxheWxpc3RMb2FkZXI7XG4gICAgc3RvcExvYWRlcnMoc2VnbWVudExvYWRlciwgbWVkaWFUeXBlKTtcblxuICAgIGlmICghYWN0aXZlR3JvdXApIHtcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGdyb3VwIGFjdGl2ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghYWN0aXZlR3JvdXAucGxheWxpc3RMb2FkZXIpIHtcbiAgICAgIGlmIChwcmV2aW91c0FjdGl2ZUxvYWRlcikge1xuICAgICAgICAvLyBUaGUgcHJldmlvdXMgZ3JvdXAgaGFkIGEgcGxheWxpc3QgbG9hZGVyIGJ1dCB0aGUgbmV3IGFjdGl2ZSBncm91cCBkb2VzIG5vdFxuICAgICAgICAvLyB0aGlzIG1lYW5zIHdlIGFyZSBzd2l0Y2hpbmcgZnJvbSBkZW11eGVkIHRvIG11eGVkIGF1ZGlvLiBJbiB0aGlzIGNhc2Ugd2Ugd2FudCB0b1xuICAgICAgICAvLyBkbyBhIGRlc3RydWN0aXZlIHJlc2V0IG9mIHRoZSBtYWluIHNlZ21lbnQgbG9hZGVyIGFuZCBub3QgcmVzdGFydCB0aGUgYXVkaW9cbiAgICAgICAgLy8gbG9hZGVycy5cbiAgICAgICAgbWFpblNlZ21lbnRMb2FkZXIucmVzZXRFdmVyeXRoaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE5vbi1kZXN0cnVjdGl2ZSByZXN5bmNcblxuXG4gICAgc2VnbWVudExvYWRlci5yZXN5bmNMb2FkZXIoKTtcbiAgICBzdGFydExvYWRlcnMoYWN0aXZlR3JvdXAucGxheWxpc3RMb2FkZXIsIG1lZGlhVHlwZSk7XG4gIH07XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIG1lZGlhIHRyYWNrIGNoYW5nZXMuIEl0IHBlcmZvcm1zIGFcbiAqIGRlc3RydWN0aXZlIHJlc2V0IG9mIHRoZSBTZWdtZW50TG9hZGVyIHRvIGVuc3VyZSB3ZSBzdGFydCBsb2FkaW5nIGFzIGNsb3NlIHRvXG4gKiBjdXJyZW50VGltZSBhcyBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiAgICAgICAgIEhhbmRsZXIgZm9yIGEgZGVzdHJ1Y3RpdmUgcmVzZXQgb2YgU2VnbWVudExvYWRlciB3aGVuIHRoZSBhY3RpdmUgbWVkaWFcbiAqICAgICAgICAgdHJhY2sgY2hhbmdlcy5cbiAqIEBmdW5jdGlvbiBvblRyYWNrQ2hhbmdlZFxuICovXG5cblxudmFyIG9uVHJhY2tDaGFuZ2VkID0gZnVuY3Rpb24gb25UcmFja0NoYW5nZWQodHlwZSwgc2V0dGluZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NldHRpbmdzJHNlZ21lbnRMb2FkMiA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzLFxuICAgICAgICBzZWdtZW50TG9hZGVyID0gX3NldHRpbmdzJHNlZ21lbnRMb2FkMlt0eXBlXSxcbiAgICAgICAgbWFpblNlZ21lbnRMb2FkZXIgPSBfc2V0dGluZ3Mkc2VnbWVudExvYWQyLm1haW4sXG4gICAgICAgIG1lZGlhVHlwZSA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV07XG4gICAgdmFyIGFjdGl2ZVRyYWNrID0gbWVkaWFUeXBlLmFjdGl2ZVRyYWNrKCk7XG4gICAgdmFyIGFjdGl2ZUdyb3VwID0gbWVkaWFUeXBlLmFjdGl2ZUdyb3VwKGFjdGl2ZVRyYWNrKTtcbiAgICB2YXIgcHJldmlvdXNBY3RpdmVMb2FkZXIgPSBtZWRpYVR5cGUuYWN0aXZlUGxheWxpc3RMb2FkZXI7XG4gICAgc3RvcExvYWRlcnMoc2VnbWVudExvYWRlciwgbWVkaWFUeXBlKTtcblxuICAgIGlmICghYWN0aXZlR3JvdXApIHtcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGdyb3VwIGFjdGl2ZSBzbyB3ZSBkbyBub3Qgd2FudCB0byByZXN0YXJ0IGxvYWRlcnNcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWFjdGl2ZUdyb3VwLnBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAvLyB3aGVuIHN3aXRjaGluZyBmcm9tIGRlbXV4ZWQgYXVkaW8vdmlkZW8gdG8gbXV4ZWQgYXVkaW8vdmlkZW8gKG5vdGVkIGJ5IG5vIHBsYXlsaXN0XG4gICAgICAvLyBsb2FkZXIgZm9yIHRoZSBhdWRpbyBncm91cCksIHdlIHdhbnQgdG8gZG8gYSBkZXN0cnVjdGl2ZSByZXNldCBvZiB0aGUgbWFpbiBzZWdtZW50XG4gICAgICAvLyBsb2FkZXIgYW5kIG5vdCByZXN0YXJ0IHRoZSBhdWRpbyBsb2FkZXJzXG4gICAgICBtYWluU2VnbWVudExvYWRlci5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJldmlvdXNBY3RpdmVMb2FkZXIgPT09IGFjdGl2ZUdyb3VwLnBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAvLyBOb3RoaW5nIGhhcyBhY3R1YWxseSBjaGFuZ2VkLiBUaGlzIGNhbiBoYXBwZW4gYmVjYXVzZSB0cmFjayBjaGFuZ2UgZXZlbnRzIGNhbiBmaXJlXG4gICAgICAvLyBtdWx0aXBsZSB0aW1lcyBmb3IgYSBcInNpbmdsZVwiIGNoYW5nZS4gT25lIGZvciBlbmFibGluZyB0aGUgbmV3IGFjdGl2ZSB0cmFjaywgYW5kXG4gICAgICAvLyBvbmUgZm9yIGRpc2FibGluZyB0aGUgdHJhY2sgdGhhdCB3YXMgYWN0aXZlXG4gICAgICBzdGFydExvYWRlcnMoYWN0aXZlR3JvdXAucGxheWxpc3RMb2FkZXIsIG1lZGlhVHlwZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnRMb2FkZXIudHJhY2spIHtcbiAgICAgIC8vIEZvciBXZWJWVFQsIHNldCB0aGUgbmV3IHRleHQgdHJhY2sgaW4gdGhlIHNlZ21lbnRsb2FkZXJcbiAgICAgIHNlZ21lbnRMb2FkZXIudHJhY2soYWN0aXZlVHJhY2spO1xuICAgIH0gLy8gZGVzdHJ1Y3RpdmUgcmVzZXRcblxuXG4gICAgc2VnbWVudExvYWRlci5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICBzdGFydExvYWRlcnMoYWN0aXZlR3JvdXAucGxheWxpc3RMb2FkZXIsIG1lZGlhVHlwZSk7XG4gIH07XG59O1xuXG52YXIgb25FcnJvciA9IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIFNlZ21lbnRMb2FkZXIgb3IgUGxheWxpc3RMb2FkZXIgZW5jb3VudGVyc1xuICAgKiBhbiBlcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcbiAgICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBtZWRpYSBncm91cHNcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqICAgICAgICAgRXJyb3IgaGFuZGxlci4gTG9ncyB3YXJuaW5nIChvciBlcnJvciBpZiB0aGUgcGxheWxpc3QgaXMgYmxhY2tsaXN0ZWQpIHRvXG4gICAqICAgICAgICAgY29uc29sZSBhbmQgc3dpdGNoZXMgYmFjayB0byBkZWZhdWx0IGF1ZGlvIHRyYWNrLlxuICAgKiBAZnVuY3Rpb24gb25FcnJvci5BVURJT1xuICAgKi9cbiAgQVVESU86IGZ1bmN0aW9uIEFVRElPKHR5cGUsIHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWdtZW50TG9hZGVyID0gc2V0dGluZ3Muc2VnbWVudExvYWRlcnNbdHlwZV0sXG4gICAgICAgICAgbWVkaWFUeXBlID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXSxcbiAgICAgICAgICBibGFja2xpc3RDdXJyZW50UGxheWxpc3QgPSBzZXR0aW5ncy5ibGFja2xpc3RDdXJyZW50UGxheWxpc3Q7XG4gICAgICBzdG9wTG9hZGVycyhzZWdtZW50TG9hZGVyLCBtZWRpYVR5cGUpOyAvLyBzd2l0Y2ggYmFjayB0byBkZWZhdWx0IGF1ZGlvIHRyYWNrXG5cbiAgICAgIHZhciBhY3RpdmVUcmFjayA9IG1lZGlhVHlwZS5hY3RpdmVUcmFjaygpO1xuICAgICAgdmFyIGFjdGl2ZUdyb3VwID0gbWVkaWFUeXBlLmFjdGl2ZUdyb3VwKCk7XG4gICAgICB2YXIgaWQgPSAoYWN0aXZlR3JvdXAuZmlsdGVyKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICByZXR1cm4gZ3JvdXBbXCJkZWZhdWx0XCJdO1xuICAgICAgfSlbMF0gfHwgYWN0aXZlR3JvdXBbMF0pLmlkO1xuICAgICAgdmFyIGRlZmF1bHRUcmFjayA9IG1lZGlhVHlwZS50cmFja3NbaWRdO1xuXG4gICAgICBpZiAoYWN0aXZlVHJhY2sgPT09IGRlZmF1bHRUcmFjaykge1xuICAgICAgICAvLyBEZWZhdWx0IHRyYWNrIGVuY291bnRlcmVkIGFuIGVycm9yLiBBbGwgd2UgY2FuIGRvIG5vdyBpcyBibGFja2xpc3QgdGhlIGN1cnJlbnRcbiAgICAgICAgLy8gcmVuZGl0aW9uIGFuZCBob3BlIGFub3RoZXIgd2lsbCBzd2l0Y2ggYXVkaW8gZ3JvdXBzXG4gICAgICAgIGJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdCh7XG4gICAgICAgICAgbWVzc2FnZTogJ1Byb2JsZW0gZW5jb3VudGVyZWQgbG9hZGluZyB0aGUgZGVmYXVsdCBhdWRpbyB0cmFjay4nXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZpZGVvanMkMS5sb2cud2FybignUHJvYmxlbSBlbmNvdW50ZXJlZCBsb2FkaW5nIHRoZSBhbHRlcm5hdGUgYXVkaW8gdHJhY2suJyArICdTd2l0Y2hpbmcgYmFjayB0byBkZWZhdWx0LicpO1xuXG4gICAgICBmb3IgKHZhciB0cmFja0lkIGluIG1lZGlhVHlwZS50cmFja3MpIHtcbiAgICAgICAgbWVkaWFUeXBlLnRyYWNrc1t0cmFja0lkXS5lbmFibGVkID0gbWVkaWFUeXBlLnRyYWNrc1t0cmFja0lkXSA9PT0gZGVmYXVsdFRyYWNrO1xuICAgICAgfVxuXG4gICAgICBtZWRpYVR5cGUub25UcmFja0NoYW5nZWQoKTtcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYSBTZWdtZW50TG9hZGVyIG9yIFBsYXlsaXN0TG9hZGVyIGVuY291bnRlcnNcbiAgICogYW4gZXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKiAgICAgICAgIEVycm9yIGhhbmRsZXIuIExvZ3Mgd2FybmluZyB0byBjb25zb2xlIGFuZCBkaXNhYmxlcyB0aGUgYWN0aXZlIHN1YnRpdGxlIHRyYWNrXG4gICAqIEBmdW5jdGlvbiBvbkVycm9yLlNVQlRJVExFU1xuICAgKi9cbiAgU1VCVElUTEVTOiBmdW5jdGlvbiBTVUJUSVRMRVModHlwZSwgc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlZ21lbnRMb2FkZXIgPSBzZXR0aW5ncy5zZWdtZW50TG9hZGVyc1t0eXBlXSxcbiAgICAgICAgICBtZWRpYVR5cGUgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdO1xuICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdQcm9ibGVtIGVuY291bnRlcmVkIGxvYWRpbmcgdGhlIHN1YnRpdGxlIHRyYWNrLicgKyAnRGlzYWJsaW5nIHN1YnRpdGxlIHRyYWNrLicpO1xuICAgICAgc3RvcExvYWRlcnMoc2VnbWVudExvYWRlciwgbWVkaWFUeXBlKTtcbiAgICAgIHZhciB0cmFjayA9IG1lZGlhVHlwZS5hY3RpdmVUcmFjaygpO1xuXG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgdHJhY2subW9kZSA9ICdkaXNhYmxlZCc7XG4gICAgICB9XG5cbiAgICAgIG1lZGlhVHlwZS5vblRyYWNrQ2hhbmdlZCgpO1xuICAgIH07XG4gIH1cbn07XG52YXIgc2V0dXBMaXN0ZW5lcnMgPSB7XG4gIC8qKlxuICAgKiBTZXR1cCBldmVudCBsaXN0ZW5lcnMgZm9yIGF1ZGlvIHBsYXlsaXN0IGxvYWRlclxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7UGxheWxpc3RMb2FkZXJ8bnVsbH0gcGxheWxpc3RMb2FkZXJcbiAgICogICAgICAgIFBsYXlsaXN0TG9hZGVyIHRvIHJlZ2lzdGVyIGxpc3RlbmVycyBvblxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcbiAgICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBtZWRpYSBncm91cHNcbiAgICogQGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzLkFVRElPXG4gICAqL1xuICBBVURJTzogZnVuY3Rpb24gQVVESU8odHlwZSwgcGxheWxpc3RMb2FkZXIsIHNldHRpbmdzKSB7XG4gICAgaWYgKCFwbGF5bGlzdExvYWRlcikge1xuICAgICAgLy8gbm8gcGxheWxpc3QgbG9hZGVyIG1lYW5zIGF1ZGlvIHdpbGwgYmUgbXV4ZWQgd2l0aCB0aGUgdmlkZW9cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGVjaCA9IHNldHRpbmdzLnRlY2gsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zID0gc2V0dGluZ3MucmVxdWVzdE9wdGlvbnMsXG4gICAgICAgIHNlZ21lbnRMb2FkZXIgPSBzZXR0aW5ncy5zZWdtZW50TG9hZGVyc1t0eXBlXTtcbiAgICBwbGF5bGlzdExvYWRlci5vbignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVkaWEgPSBwbGF5bGlzdExvYWRlci5tZWRpYSgpO1xuICAgICAgc2VnbWVudExvYWRlci5wbGF5bGlzdChtZWRpYSwgcmVxdWVzdE9wdGlvbnMpOyAvLyBpZiB0aGUgdmlkZW8gaXMgYWxyZWFkeSBwbGF5aW5nLCBvciBpZiB0aGlzIGlzbid0IGEgbGl2ZSB2aWRlbyBhbmQgcHJlbG9hZFxuICAgICAgLy8gcGVybWl0cywgc3RhcnQgZG93bmxvYWRpbmcgc2VnbWVudHNcblxuICAgICAgaWYgKCF0ZWNoLnBhdXNlZCgpIHx8IG1lZGlhLmVuZExpc3QgJiYgdGVjaC5wcmVsb2FkKCkgIT09ICdub25lJykge1xuICAgICAgICBzZWdtZW50TG9hZGVyLmxvYWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwbGF5bGlzdExvYWRlci5vbignbG9hZGVkcGxheWxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWdtZW50TG9hZGVyLnBsYXlsaXN0KHBsYXlsaXN0TG9hZGVyLm1lZGlhKCksIHJlcXVlc3RPcHRpb25zKTsgLy8gSWYgdGhlIHBsYXllciBpc24ndCBwYXVzZWQsIGVuc3VyZSB0aGF0IHRoZSBzZWdtZW50IGxvYWRlciBpcyBydW5uaW5nXG5cbiAgICAgIGlmICghdGVjaC5wYXVzZWQoKSkge1xuICAgICAgICBzZWdtZW50TG9hZGVyLmxvYWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwbGF5bGlzdExvYWRlci5vbignZXJyb3InLCBvbkVycm9yW3R5cGVdKHR5cGUsIHNldHRpbmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHVwIGV2ZW50IGxpc3RlbmVycyBmb3Igc3VidGl0bGUgcGxheWxpc3QgbG9hZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtQbGF5bGlzdExvYWRlcnxudWxsfSBwbGF5bGlzdExvYWRlclxuICAgKiAgICAgICAgUGxheWxpc3RMb2FkZXIgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzIG9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMuU1VCVElUTEVTXG4gICAqL1xuICBTVUJUSVRMRVM6IGZ1bmN0aW9uIFNVQlRJVExFUyh0eXBlLCBwbGF5bGlzdExvYWRlciwgc2V0dGluZ3MpIHtcbiAgICB2YXIgdGVjaCA9IHNldHRpbmdzLnRlY2gsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zID0gc2V0dGluZ3MucmVxdWVzdE9wdGlvbnMsXG4gICAgICAgIHNlZ21lbnRMb2FkZXIgPSBzZXR0aW5ncy5zZWdtZW50TG9hZGVyc1t0eXBlXSxcbiAgICAgICAgbWVkaWFUeXBlID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXTtcbiAgICBwbGF5bGlzdExvYWRlci5vbignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVkaWEgPSBwbGF5bGlzdExvYWRlci5tZWRpYSgpO1xuICAgICAgc2VnbWVudExvYWRlci5wbGF5bGlzdChtZWRpYSwgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgc2VnbWVudExvYWRlci50cmFjayhtZWRpYVR5cGUuYWN0aXZlVHJhY2soKSk7IC8vIGlmIHRoZSB2aWRlbyBpcyBhbHJlYWR5IHBsYXlpbmcsIG9yIGlmIHRoaXMgaXNuJ3QgYSBsaXZlIHZpZGVvIGFuZCBwcmVsb2FkXG4gICAgICAvLyBwZXJtaXRzLCBzdGFydCBkb3dubG9hZGluZyBzZWdtZW50c1xuXG4gICAgICBpZiAoIXRlY2gucGF1c2VkKCkgfHwgbWVkaWEuZW5kTGlzdCAmJiB0ZWNoLnByZWxvYWQoKSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHNlZ21lbnRMb2FkZXIubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsYXlsaXN0TG9hZGVyLm9uKCdsb2FkZWRwbGF5bGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlZ21lbnRMb2FkZXIucGxheWxpc3QocGxheWxpc3RMb2FkZXIubWVkaWEoKSwgcmVxdWVzdE9wdGlvbnMpOyAvLyBJZiB0aGUgcGxheWVyIGlzbid0IHBhdXNlZCwgZW5zdXJlIHRoYXQgdGhlIHNlZ21lbnQgbG9hZGVyIGlzIHJ1bm5pbmdcblxuICAgICAgaWYgKCF0ZWNoLnBhdXNlZCgpKSB7XG4gICAgICAgIHNlZ21lbnRMb2FkZXIubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsYXlsaXN0TG9hZGVyLm9uKCdlcnJvcicsIG9uRXJyb3JbdHlwZV0odHlwZSwgc2V0dGluZ3MpKTtcbiAgfVxufTtcbnZhciBpbml0aWFsaXplID0ge1xuICAvKipcbiAgICogU2V0dXAgUGxheWxpc3RMb2FkZXJzIGFuZCBBdWRpb1RyYWNrcyBmb3IgdGhlIGF1ZGlvIGdyb3Vwc1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAZnVuY3Rpb24gaW5pdGlhbGl6ZS5BVURJT1xuICAgKi9cbiAgJ0FVRElPJzogZnVuY3Rpb24gQVVESU8odHlwZSwgc2V0dGluZ3MpIHtcbiAgICB2YXIgaGxzID0gc2V0dGluZ3MuaGxzLFxuICAgICAgICBzb3VyY2VUeXBlID0gc2V0dGluZ3Muc291cmNlVHlwZSxcbiAgICAgICAgc2VnbWVudExvYWRlciA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzW3R5cGVdLFxuICAgICAgICByZXF1ZXN0T3B0aW9ucyA9IHNldHRpbmdzLnJlcXVlc3RPcHRpb25zLFxuICAgICAgICBtZWRpYUdyb3VwcyA9IHNldHRpbmdzLm1hc3Rlci5tZWRpYUdyb3VwcyxcbiAgICAgICAgX3NldHRpbmdzJG1lZGlhVHlwZXMkID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXSxcbiAgICAgICAgZ3JvdXBzID0gX3NldHRpbmdzJG1lZGlhVHlwZXMkLmdyb3VwcyxcbiAgICAgICAgdHJhY2tzID0gX3NldHRpbmdzJG1lZGlhVHlwZXMkLnRyYWNrcyxcbiAgICAgICAgbWFzdGVyUGxheWxpc3RMb2FkZXIgPSBzZXR0aW5ncy5tYXN0ZXJQbGF5bGlzdExvYWRlcjsgLy8gZm9yY2UgYSBkZWZhdWx0IGlmIHdlIGhhdmUgbm9uZVxuXG4gICAgaWYgKCFtZWRpYUdyb3Vwc1t0eXBlXSB8fCBPYmplY3Qua2V5cyhtZWRpYUdyb3Vwc1t0eXBlXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBtZWRpYUdyb3Vwc1t0eXBlXSA9IHtcbiAgICAgICAgbWFpbjoge1xuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBncm91cElkIGluIG1lZGlhR3JvdXBzW3R5cGVdKSB7XG4gICAgICBpZiAoIWdyb3Vwc1tncm91cElkXSkge1xuICAgICAgICBncm91cHNbZ3JvdXBJZF0gPSBbXTtcbiAgICAgIH0gLy8gTGlzdCBvZiBwbGF5bGlzdHMgdGhhdCBoYXZlIGFuIEFVRElPIGF0dHJpYnV0ZSB2YWx1ZSBtYXRjaGluZyB0aGUgY3VycmVudFxuICAgICAgLy8gZ3JvdXAgSURcblxuXG4gICAgICBmb3IgKHZhciB2YXJpYW50TGFiZWwgaW4gbWVkaWFHcm91cHNbdHlwZV1bZ3JvdXBJZF0pIHtcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBtZWRpYUdyb3Vwc1t0eXBlXVtncm91cElkXVt2YXJpYW50TGFiZWxdO1xuICAgICAgICB2YXIgcGxheWxpc3RMb2FkZXIgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKHByb3BlcnRpZXMucmVzb2x2ZWRVcmkpIHtcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG5ldyBQbGF5bGlzdExvYWRlcihwcm9wZXJ0aWVzLnJlc29sdmVkVXJpLCBobHMsIHJlcXVlc3RPcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0aWVzLnBsYXlsaXN0cyAmJiBzb3VyY2VUeXBlID09PSAnZGFzaCcpIHtcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG5ldyBEYXNoUGxheWxpc3RMb2FkZXIocHJvcGVydGllcy5wbGF5bGlzdHNbMF0sIGhscywgcmVxdWVzdE9wdGlvbnMsIG1hc3RlclBsYXlsaXN0TG9hZGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBubyByZXNvbHZlZFVyaSBtZWFucyB0aGUgYXVkaW8gaXMgbXV4ZWQgd2l0aCB0aGUgdmlkZW8gd2hlbiB1c2luZyB0aGlzXG4gICAgICAgICAgLy8gYXVkaW8gdHJhY2tcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wZXJ0aWVzID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh7XG4gICAgICAgICAgaWQ6IHZhcmlhbnRMYWJlbCxcbiAgICAgICAgICBwbGF5bGlzdExvYWRlcjogcGxheWxpc3RMb2FkZXJcbiAgICAgICAgfSwgcHJvcGVydGllcyk7XG4gICAgICAgIHNldHVwTGlzdGVuZXJzW3R5cGVdKHR5cGUsIHByb3BlcnRpZXMucGxheWxpc3RMb2FkZXIsIHNldHRpbmdzKTtcbiAgICAgICAgZ3JvdXBzW2dyb3VwSWRdLnB1c2gocHJvcGVydGllcyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0cmFja3NbdmFyaWFudExhYmVsXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIgdHJhY2sgPSBuZXcgdmlkZW9qcyQxLkF1ZGlvVHJhY2soe1xuICAgICAgICAgICAgaWQ6IHZhcmlhbnRMYWJlbCxcbiAgICAgICAgICAgIGtpbmQ6IGF1ZGlvVHJhY2tLaW5kXyhwcm9wZXJ0aWVzKSxcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHByb3BlcnRpZXMubGFuZ3VhZ2UsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjogcHJvcGVydGllc1tcImRlZmF1bHRcIl0sXG4gICAgICAgICAgICBsYWJlbDogdmFyaWFudExhYmVsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJhY2tzW3ZhcmlhbnRMYWJlbF0gPSB0cmFjaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gc2V0dXAgc2luZ2xlIGVycm9yIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBzZWdtZW50IGxvYWRlclxuXG5cbiAgICBzZWdtZW50TG9hZGVyLm9uKCdlcnJvcicsIG9uRXJyb3JbdHlwZV0odHlwZSwgc2V0dGluZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0dXAgUGxheWxpc3RMb2FkZXJzIGFuZCBUZXh0VHJhY2tzIGZvciB0aGUgc3VidGl0bGUgZ3JvdXBzXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEBmdW5jdGlvbiBpbml0aWFsaXplLlNVQlRJVExFU1xuICAgKi9cbiAgJ1NVQlRJVExFUyc6IGZ1bmN0aW9uIFNVQlRJVExFUyh0eXBlLCBzZXR0aW5ncykge1xuICAgIHZhciB0ZWNoID0gc2V0dGluZ3MudGVjaCxcbiAgICAgICAgaGxzID0gc2V0dGluZ3MuaGxzLFxuICAgICAgICBzb3VyY2VUeXBlID0gc2V0dGluZ3Muc291cmNlVHlwZSxcbiAgICAgICAgc2VnbWVudExvYWRlciA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzW3R5cGVdLFxuICAgICAgICByZXF1ZXN0T3B0aW9ucyA9IHNldHRpbmdzLnJlcXVlc3RPcHRpb25zLFxuICAgICAgICBtZWRpYUdyb3VwcyA9IHNldHRpbmdzLm1hc3Rlci5tZWRpYUdyb3VwcyxcbiAgICAgICAgX3NldHRpbmdzJG1lZGlhVHlwZXMkMiA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV0sXG4gICAgICAgIGdyb3VwcyA9IF9zZXR0aW5ncyRtZWRpYVR5cGVzJDIuZ3JvdXBzLFxuICAgICAgICB0cmFja3MgPSBfc2V0dGluZ3MkbWVkaWFUeXBlcyQyLnRyYWNrcyxcbiAgICAgICAgbWFzdGVyUGxheWxpc3RMb2FkZXIgPSBzZXR0aW5ncy5tYXN0ZXJQbGF5bGlzdExvYWRlcjtcblxuICAgIGZvciAodmFyIGdyb3VwSWQgaW4gbWVkaWFHcm91cHNbdHlwZV0pIHtcbiAgICAgIGlmICghZ3JvdXBzW2dyb3VwSWRdKSB7XG4gICAgICAgIGdyb3Vwc1tncm91cElkXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciB2YXJpYW50TGFiZWwgaW4gbWVkaWFHcm91cHNbdHlwZV1bZ3JvdXBJZF0pIHtcbiAgICAgICAgaWYgKG1lZGlhR3JvdXBzW3R5cGVdW2dyb3VwSWRdW3ZhcmlhbnRMYWJlbF0uZm9yY2VkKSB7XG4gICAgICAgICAgLy8gU3VidGl0bGUgcGxheWxpc3RzIHdpdGggdGhlIGZvcmNlZCBhdHRyaWJ1dGUgYXJlIG5vdCBzZWxlY3RhYmxlIGluIFNhZmFyaS5cbiAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gQXBwbGUncyBITFMgQXV0aG9yaW5nIFNwZWNpZmljYXRpb246XG4gICAgICAgICAgLy8gICBJZiBjb250ZW50IGhhcyBmb3JjZWQgc3VidGl0bGVzIGFuZCByZWd1bGFyIHN1YnRpdGxlcyBpbiBhIGdpdmVuIGxhbmd1YWdlLFxuICAgICAgICAgIC8vICAgdGhlIHJlZ3VsYXIgc3VidGl0bGVzIHRyYWNrIGluIHRoYXQgbGFuZ3VhZ2UgTVVTVCBjb250YWluIGJvdGggdGhlIGZvcmNlZFxuICAgICAgICAgIC8vICAgc3VidGl0bGVzIGFuZCB0aGUgcmVndWxhciBzdWJ0aXRsZXMgZm9yIHRoYXQgbGFuZ3VhZ2UuXG4gICAgICAgICAgLy8gQmVjYXVzZSBvZiB0aGlzIHJlcXVpcmVtZW50IGFuZCB0aGF0IFNhZmFyaSBkb2VzIG5vdCBhZGQgZm9yY2VkIHN1YnRpdGxlcyxcbiAgICAgICAgICAvLyBmb3JjZWQgc3VidGl0bGVzIGFyZSBza2lwcGVkIGhlcmUgdG8gbWFpbnRhaW4gY29uc2lzdGVudCBleHBlcmllbmNlIGFjcm9zc1xuICAgICAgICAgIC8vIGFsbCBwbGF0Zm9ybXNcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gbWVkaWFHcm91cHNbdHlwZV1bZ3JvdXBJZF1bdmFyaWFudExhYmVsXTtcbiAgICAgICAgdmFyIHBsYXlsaXN0TG9hZGVyID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChzb3VyY2VUeXBlID09PSAnaGxzJykge1xuICAgICAgICAgIHBsYXlsaXN0TG9hZGVyID0gbmV3IFBsYXlsaXN0TG9hZGVyKHByb3BlcnRpZXMucmVzb2x2ZWRVcmksIGhscywgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZVR5cGUgPT09ICdkYXNoJykge1xuICAgICAgICAgIHBsYXlsaXN0TG9hZGVyID0gbmV3IERhc2hQbGF5bGlzdExvYWRlcihwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXSwgaGxzLCByZXF1ZXN0T3B0aW9ucywgbWFzdGVyUGxheWxpc3RMb2FkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvcGVydGllcyA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoe1xuICAgICAgICAgIGlkOiB2YXJpYW50TGFiZWwsXG4gICAgICAgICAgcGxheWxpc3RMb2FkZXI6IHBsYXlsaXN0TG9hZGVyXG4gICAgICAgIH0sIHByb3BlcnRpZXMpO1xuICAgICAgICBzZXR1cExpc3RlbmVyc1t0eXBlXSh0eXBlLCBwcm9wZXJ0aWVzLnBsYXlsaXN0TG9hZGVyLCBzZXR0aW5ncyk7XG4gICAgICAgIGdyb3Vwc1tncm91cElkXS5wdXNoKHByb3BlcnRpZXMpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdHJhY2tzW3ZhcmlhbnRMYWJlbF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gdGVjaC5hZGRSZW1vdGVUZXh0VHJhY2soe1xuICAgICAgICAgICAgaWQ6IHZhcmlhbnRMYWJlbCxcbiAgICAgICAgICAgIGtpbmQ6ICdzdWJ0aXRsZXMnLFxuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IHByb3BlcnRpZXNbXCJkZWZhdWx0XCJdICYmIHByb3BlcnRpZXMuYXV0b3NlbGVjdCxcbiAgICAgICAgICAgIGxhbmd1YWdlOiBwcm9wZXJ0aWVzLmxhbmd1YWdlLFxuICAgICAgICAgICAgbGFiZWw6IHZhcmlhbnRMYWJlbFxuICAgICAgICAgIH0sIGZhbHNlKS50cmFjaztcbiAgICAgICAgICB0cmFja3NbdmFyaWFudExhYmVsXSA9IHRyYWNrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBzZXR1cCBzaW5nbGUgZXJyb3IgZXZlbnQgaGFuZGxlciBmb3IgdGhlIHNlZ21lbnQgbG9hZGVyXG5cblxuICAgIHNlZ21lbnRMb2FkZXIub24oJ2Vycm9yJywgb25FcnJvclt0eXBlXSh0eXBlLCBzZXR0aW5ncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXR1cCBUZXh0VHJhY2tzIGZvciB0aGUgY2xvc2VkLWNhcHRpb24gZ3JvdXBzXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEBmdW5jdGlvbiBpbml0aWFsaXplWydDTE9TRUQtQ0FQVElPTlMnXVxuICAgKi9cbiAgJ0NMT1NFRC1DQVBUSU9OUyc6IGZ1bmN0aW9uIENMT1NFRENBUFRJT05TKHR5cGUsIHNldHRpbmdzKSB7XG4gICAgdmFyIHRlY2ggPSBzZXR0aW5ncy50ZWNoLFxuICAgICAgICBtZWRpYUdyb3VwcyA9IHNldHRpbmdzLm1hc3Rlci5tZWRpYUdyb3VwcyxcbiAgICAgICAgX3NldHRpbmdzJG1lZGlhVHlwZXMkMyA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV0sXG4gICAgICAgIGdyb3VwcyA9IF9zZXR0aW5ncyRtZWRpYVR5cGVzJDMuZ3JvdXBzLFxuICAgICAgICB0cmFja3MgPSBfc2V0dGluZ3MkbWVkaWFUeXBlcyQzLnRyYWNrcztcblxuICAgIGZvciAodmFyIGdyb3VwSWQgaW4gbWVkaWFHcm91cHNbdHlwZV0pIHtcbiAgICAgIGlmICghZ3JvdXBzW2dyb3VwSWRdKSB7XG4gICAgICAgIGdyb3Vwc1tncm91cElkXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciB2YXJpYW50TGFiZWwgaW4gbWVkaWFHcm91cHNbdHlwZV1bZ3JvdXBJZF0pIHtcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBtZWRpYUdyb3Vwc1t0eXBlXVtncm91cElkXVt2YXJpYW50TGFiZWxdOyAvLyBXZSBvbmx5IHN1cHBvcnQgQ0VBNjA4IGNhcHRpb25zIGZvciBub3csIHNvIGlnbm9yZSBhbnl0aGluZyB0aGF0XG4gICAgICAgIC8vIGRvZXNuJ3QgdXNlIGEgQ0N4IElOU1RSRUFNLUlEXG5cbiAgICAgICAgaWYgKCFwcm9wZXJ0aWVzLmluc3RyZWFtSWQubWF0Y2goL0NDXFxkLykpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBObyBQbGF5bGlzdExvYWRlciBpcyByZXF1aXJlZCBmb3IgQ2xvc2VkLUNhcHRpb25zIGJlY2F1c2UgdGhlIGNhcHRpb25zIGFyZVxuICAgICAgICAvLyBlbWJlZGRlZCB3aXRoaW4gdGhlIHZpZGVvIHN0cmVhbVxuXG5cbiAgICAgICAgZ3JvdXBzW2dyb3VwSWRdLnB1c2godmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh7XG4gICAgICAgICAgaWQ6IHZhcmlhbnRMYWJlbFxuICAgICAgICB9LCBwcm9wZXJ0aWVzKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0cmFja3NbdmFyaWFudExhYmVsXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIgdHJhY2sgPSB0ZWNoLmFkZFJlbW90ZVRleHRUcmFjayh7XG4gICAgICAgICAgICBpZDogcHJvcGVydGllcy5pbnN0cmVhbUlkLFxuICAgICAgICAgICAga2luZDogJ2NhcHRpb25zJyxcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBwcm9wZXJ0aWVzW1wiZGVmYXVsdFwiXSAmJiBwcm9wZXJ0aWVzLmF1dG9zZWxlY3QsXG4gICAgICAgICAgICBsYW5ndWFnZTogcHJvcGVydGllcy5sYW5ndWFnZSxcbiAgICAgICAgICAgIGxhYmVsOiB2YXJpYW50TGFiZWxcbiAgICAgICAgICB9LCBmYWxzZSkudHJhY2s7XG4gICAgICAgICAgdHJhY2tzW3ZhcmlhbnRMYWJlbF0gPSB0cmFjaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHVzZWQgdG8gZ2V0IHRoZSBhY3RpdmUgZ3JvdXAgb2YgdGhlIHByb3ZpZGVkIHR5cGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiAgICAgICAgIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgYWN0aXZlIG1lZGlhIGdyb3VwIGZvciB0aGUgcHJvdmlkZWQgdHlwZS4gVGFrZXMgYW5cbiAqICAgICAgICAgb3B0aW9uYWwgcGFyYW1ldGVyIHtUZXh0VHJhY2t9IHRyYWNrLiBJZiBubyB0cmFjayBpcyBwcm92aWRlZCwgYSBsaXN0IG9mIGFsbFxuICogICAgICAgICB2YXJpYW50cyBpbiB0aGUgZ3JvdXAsIG90aGVyd2lzZSB0aGUgdmFyaWFudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm92aWRlZFxuICogICAgICAgICB0cmFjayBpcyByZXR1cm5lZC5cbiAqIEBmdW5jdGlvbiBhY3RpdmVHcm91cFxuICovXG5cbnZhciBhY3RpdmVHcm91cCA9IGZ1bmN0aW9uIGFjdGl2ZUdyb3VwKHR5cGUsIHNldHRpbmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodHJhY2spIHtcbiAgICB2YXIgbWFzdGVyUGxheWxpc3RMb2FkZXIgPSBzZXR0aW5ncy5tYXN0ZXJQbGF5bGlzdExvYWRlcixcbiAgICAgICAgZ3JvdXBzID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXS5ncm91cHM7XG4gICAgdmFyIG1lZGlhID0gbWFzdGVyUGxheWxpc3RMb2FkZXIubWVkaWEoKTtcblxuICAgIGlmICghbWVkaWEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB2YXJpYW50cyA9IG51bGw7XG5cbiAgICBpZiAobWVkaWEuYXR0cmlidXRlc1t0eXBlXSkge1xuICAgICAgdmFyaWFudHMgPSBncm91cHNbbWVkaWEuYXR0cmlidXRlc1t0eXBlXV07XG4gICAgfVxuXG4gICAgdmFyaWFudHMgPSB2YXJpYW50cyB8fCBncm91cHMubWFpbjtcblxuICAgIGlmICh0eXBlb2YgdHJhY2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdmFyaWFudHM7XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrID09PSBudWxsKSB7XG4gICAgICAvLyBBbiBhY3RpdmUgdHJhY2sgd2FzIHNwZWNpZmllZCBzbyBhIGNvcnJlc3BvbmRpbmcgZ3JvdXAgaXMgZXhwZWN0ZWQuIHRyYWNrID09PSBudWxsXG4gICAgICAvLyBtZWFucyBubyB0cmFjayBpcyBjdXJyZW50bHkgYWN0aXZlIHNvIHRoZXJlIGlzIG5vIGNvcnJlc3BvbmRpbmcgZ3JvdXBcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJpYW50cy5maWx0ZXIoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICByZXR1cm4gcHJvcHMuaWQgPT09IHRyYWNrLmlkO1xuICAgIH0pWzBdIHx8IG51bGw7XG4gIH07XG59O1xuXG52YXIgYWN0aXZlVHJhY2sgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCB0byBnZXQgdGhlIGFjdGl2ZSB0cmFjayBvZiB0eXBlIHByb3ZpZGVkXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKiAgICAgICAgIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgYWN0aXZlIG1lZGlhIHRyYWNrIGZvciB0aGUgcHJvdmlkZWQgdHlwZS4gUmV0dXJuc1xuICAgKiAgICAgICAgIG51bGwgaWYgbm8gdHJhY2sgaXMgYWN0aXZlXG4gICAqIEBmdW5jdGlvbiBhY3RpdmVUcmFjay5BVURJT1xuICAgKi9cbiAgQVVESU86IGZ1bmN0aW9uIEFVRElPKHR5cGUsIHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0cmFja3MgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdLnRyYWNrcztcblxuICAgICAgZm9yICh2YXIgaWQgaW4gdHJhY2tzKSB7XG4gICAgICAgIGlmICh0cmFja3NbaWRdLmVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm4gdHJhY2tzW2lkXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCB0byBnZXQgdGhlIGFjdGl2ZSB0cmFjayBvZiB0eXBlIHByb3ZpZGVkXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKiAgICAgICAgIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgYWN0aXZlIG1lZGlhIHRyYWNrIGZvciB0aGUgcHJvdmlkZWQgdHlwZS4gUmV0dXJuc1xuICAgKiAgICAgICAgIG51bGwgaWYgbm8gdHJhY2sgaXMgYWN0aXZlXG4gICAqIEBmdW5jdGlvbiBhY3RpdmVUcmFjay5TVUJUSVRMRVNcbiAgICovXG4gIFNVQlRJVExFUzogZnVuY3Rpb24gU1VCVElUTEVTKHR5cGUsIHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0cmFja3MgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdLnRyYWNrcztcblxuICAgICAgZm9yICh2YXIgaWQgaW4gdHJhY2tzKSB7XG4gICAgICAgIGlmICh0cmFja3NbaWRdLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICAgIHJldHVybiB0cmFja3NbaWRdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIFNldHVwIFBsYXlsaXN0TG9hZGVycyBhbmQgVHJhY2tzIGZvciBtZWRpYSBncm91cHMgKEF1ZGlvLCBTdWJ0aXRsZXMsXG4gKiBDbG9zZWQtQ2FwdGlvbnMpIHNwZWNpZmllZCBpbiB0aGUgbWFzdGVyIG1hbmlmZXN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBzZXR0aW5nIHVwIHRoZSBtZWRpYSBncm91cHNcbiAqIEBwYXJhbSB7U2VnbWVudExvYWRlcn0gc2V0dGluZ3Muc2VnbWVudExvYWRlcnMuQVVESU9cbiAqICAgICAgICBBdWRpbyBzZWdtZW50IGxvYWRlclxuICogQHBhcmFtIHtTZWdtZW50TG9hZGVyfSBzZXR0aW5ncy5zZWdtZW50TG9hZGVycy5TVUJUSVRMRVNcbiAqICAgICAgICBTdWJ0aXRsZSBzZWdtZW50IGxvYWRlclxuICogQHBhcmFtIHtTZWdtZW50TG9hZGVyfSBzZXR0aW5ncy5zZWdtZW50TG9hZGVycy5tYWluXG4gKiAgICAgICAgTWFpbiBzZWdtZW50IGxvYWRlclxuICogQHBhcmFtIHtUZWNofSBzZXR0aW5ncy50ZWNoXG4gKiAgICAgICAgVGhlIHRlY2ggb2YgdGhlIHBsYXllclxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzLnJlcXVlc3RPcHRpb25zXG4gKiAgICAgICAgWEhSIHJlcXVlc3Qgb3B0aW9ucyB1c2VkIGJ5IHRoZSBzZWdtZW50IGxvYWRlcnNcbiAqIEBwYXJhbSB7UGxheWxpc3RMb2FkZXJ9IHNldHRpbmdzLm1hc3RlclBsYXlsaXN0TG9hZGVyXG4gKiAgICAgICAgUGxheWxpc3RMb2FkZXIgZm9yIHRoZSBtYXN0ZXIgc291cmNlXG4gKiBAcGFyYW0ge0hsc0hhbmRsZXJ9IHNldHRpbmdzLmhsc1xuICogICAgICAgIEhMUyBTb3VyY2VIYW5kbGVyXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3MubWFzdGVyXG4gKiAgICAgICAgVGhlIHBhcnNlZCBtYXN0ZXIgbWFuaWZlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5ncy5tZWRpYVR5cGVzXG4gKiAgICAgICAgT2JqZWN0IHRvIHN0b3JlIHRoZSBsb2FkZXJzLCB0cmFja3MsIGFuZCB1dGlsaXR5IG1ldGhvZHMgZm9yIGVhY2ggbWVkaWEgdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGluZ3MuYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0XG4gKiAgICAgICAgQmxhY2tsaXN0cyB0aGUgY3VycmVudCByZW5kaXRpb24gYW5kIGZvcmNlcyBhIHJlbmRpdGlvbiBzd2l0Y2guXG4gKiBAZnVuY3Rpb24gc2V0dXBNZWRpYUdyb3Vwc1xuICovXG5cbnZhciBzZXR1cE1lZGlhR3JvdXBzID0gZnVuY3Rpb24gc2V0dXBNZWRpYUdyb3VwcyhzZXR0aW5ncykge1xuICBbJ0FVRElPJywgJ1NVQlRJVExFUycsICdDTE9TRUQtQ0FQVElPTlMnXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaW5pdGlhbGl6ZVt0eXBlXSh0eXBlLCBzZXR0aW5ncyk7XG4gIH0pO1xuICB2YXIgbWVkaWFUeXBlcyA9IHNldHRpbmdzLm1lZGlhVHlwZXMsXG4gICAgICBtYXN0ZXJQbGF5bGlzdExvYWRlciA9IHNldHRpbmdzLm1hc3RlclBsYXlsaXN0TG9hZGVyLFxuICAgICAgdGVjaCA9IHNldHRpbmdzLnRlY2gsXG4gICAgICBobHMgPSBzZXR0aW5ncy5obHM7IC8vIHNldHVwIGFjdGl2ZSBncm91cCBhbmQgdHJhY2sgZ2V0dGVycyBhbmQgY2hhbmdlIGV2ZW50IGhhbmRsZXJzXG5cbiAgWydBVURJTycsICdTVUJUSVRMRVMnXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgbWVkaWFUeXBlc1t0eXBlXS5hY3RpdmVHcm91cCA9IGFjdGl2ZUdyb3VwKHR5cGUsIHNldHRpbmdzKTtcbiAgICBtZWRpYVR5cGVzW3R5cGVdLmFjdGl2ZVRyYWNrID0gYWN0aXZlVHJhY2tbdHlwZV0odHlwZSwgc2V0dGluZ3MpO1xuICAgIG1lZGlhVHlwZXNbdHlwZV0ub25Hcm91cENoYW5nZWQgPSBvbkdyb3VwQ2hhbmdlZCh0eXBlLCBzZXR0aW5ncyk7XG4gICAgbWVkaWFUeXBlc1t0eXBlXS5vblRyYWNrQ2hhbmdlZCA9IG9uVHJhY2tDaGFuZ2VkKHR5cGUsIHNldHRpbmdzKTtcbiAgfSk7IC8vIERPIE5PVCBlbmFibGUgdGhlIGRlZmF1bHQgc3VidGl0bGUgb3IgY2FwdGlvbiB0cmFjay5cbiAgLy8gRE8gZW5hYmxlIHRoZSBkZWZhdWx0IGF1ZGlvIHRyYWNrXG5cbiAgdmFyIGF1ZGlvR3JvdXAgPSBtZWRpYVR5cGVzLkFVRElPLmFjdGl2ZUdyb3VwKCk7XG4gIHZhciBncm91cElkID0gKGF1ZGlvR3JvdXAuZmlsdGVyKGZ1bmN0aW9uIChncm91cCkge1xuICAgIHJldHVybiBncm91cFtcImRlZmF1bHRcIl07XG4gIH0pWzBdIHx8IGF1ZGlvR3JvdXBbMF0pLmlkO1xuICBtZWRpYVR5cGVzLkFVRElPLnRyYWNrc1tncm91cElkXS5lbmFibGVkID0gdHJ1ZTtcbiAgbWVkaWFUeXBlcy5BVURJTy5vblRyYWNrQ2hhbmdlZCgpO1xuICBtYXN0ZXJQbGF5bGlzdExvYWRlci5vbignbWVkaWFjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgWydBVURJTycsICdTVUJUSVRMRVMnXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gbWVkaWFUeXBlc1t0eXBlXS5vbkdyb3VwQ2hhbmdlZCgpO1xuICAgIH0pO1xuICB9KTsgLy8gY3VzdG9tIGF1ZGlvIHRyYWNrIGNoYW5nZSBldmVudCBoYW5kbGVyIGZvciB1c2FnZSBldmVudFxuXG4gIHZhciBvbkF1ZGlvVHJhY2tDaGFuZ2VkID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrQ2hhbmdlZCgpIHtcbiAgICBtZWRpYVR5cGVzLkFVRElPLm9uVHJhY2tDaGFuZ2VkKCk7XG4gICAgdGVjaC50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICBuYW1lOiAnaGxzLWF1ZGlvLWNoYW5nZSdcbiAgICB9KTtcbiAgfTtcblxuICB0ZWNoLmF1ZGlvVHJhY2tzKCkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BdWRpb1RyYWNrQ2hhbmdlZCk7XG4gIHRlY2gucmVtb3RlVGV4dFRyYWNrcygpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG1lZGlhVHlwZXMuU1VCVElUTEVTLm9uVHJhY2tDaGFuZ2VkKTtcbiAgaGxzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIHRlY2guYXVkaW9UcmFja3MoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkF1ZGlvVHJhY2tDaGFuZ2VkKTtcbiAgICB0ZWNoLnJlbW90ZVRleHRUcmFja3MoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBtZWRpYVR5cGVzLlNVQlRJVExFUy5vblRyYWNrQ2hhbmdlZCk7XG4gIH0pOyAvLyBjbGVhciBleGlzdGluZyBhdWRpbyB0cmFja3MgYW5kIGFkZCB0aGUgb25lcyB3ZSBqdXN0IGNyZWF0ZWRcblxuICB0ZWNoLmNsZWFyVHJhY2tzKCdhdWRpbycpO1xuXG4gIGZvciAodmFyIGlkIGluIG1lZGlhVHlwZXMuQVVESU8udHJhY2tzKSB7XG4gICAgdGVjaC5hdWRpb1RyYWNrcygpLmFkZFRyYWNrKG1lZGlhVHlwZXMuQVVESU8udHJhY2tzW2lkXSk7XG4gIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgc2tlbGV0b24gb2JqZWN0IHVzZWQgdG8gc3RvcmUgdGhlIGxvYWRlcnMsIHRyYWNrcywgYW5kIHV0aWxpdHkgbWV0aG9kcyBmb3IgZWFjaFxuICogbWVkaWEgdHlwZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgT2JqZWN0IHRvIHN0b3JlIHRoZSBsb2FkZXJzLCB0cmFja3MsIGFuZCB1dGlsaXR5IG1ldGhvZHMgZm9yIGVhY2ggbWVkaWEgdHlwZVxuICogQGZ1bmN0aW9uIGNyZWF0ZU1lZGlhVHlwZXNcbiAqL1xuXG5cbnZhciBjcmVhdGVNZWRpYVR5cGVzID0gZnVuY3Rpb24gY3JlYXRlTWVkaWFUeXBlcygpIHtcbiAgdmFyIG1lZGlhVHlwZXMgPSB7fTtcbiAgWydBVURJTycsICdTVUJUSVRMRVMnLCAnQ0xPU0VELUNBUFRJT05TJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIG1lZGlhVHlwZXNbdHlwZV0gPSB7XG4gICAgICBncm91cHM6IHt9LFxuICAgICAgdHJhY2tzOiB7fSxcbiAgICAgIGFjdGl2ZVBsYXlsaXN0TG9hZGVyOiBudWxsLFxuICAgICAgYWN0aXZlR3JvdXA6IG5vb3AsXG4gICAgICBhY3RpdmVUcmFjazogbm9vcCxcbiAgICAgIG9uR3JvdXBDaGFuZ2VkOiBub29wLFxuICAgICAgb25UcmFja0NoYW5nZWQ6IG5vb3BcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIG1lZGlhVHlwZXM7XG59O1xuLyoqXG4gKiBAZmlsZSBtYXN0ZXItcGxheWxpc3QtY29udHJvbGxlci5qc1xuICovXG5cblxudmFyIEFCT1JUX0VBUkxZX0JMQUNLTElTVF9TRUNPTkRTID0gNjAgKiAyO1xudmFyIEhscyA9IHZvaWQgMDsgLy8gU2VnbWVudExvYWRlciBzdGF0cyB0aGF0IG5lZWQgdG8gaGF2ZSBlYWNoIGxvYWRlcidzXG4vLyB2YWx1ZXMgc3VtbWVkIHRvIGNhbGN1bGF0ZSB0aGUgZmluYWwgdmFsdWVcblxudmFyIGxvYWRlclN0YXRzID0gWydtZWRpYVJlcXVlc3RzJywgJ21lZGlhUmVxdWVzdHNBYm9ydGVkJywgJ21lZGlhUmVxdWVzdHNUaW1lZG91dCcsICdtZWRpYVJlcXVlc3RzRXJyb3JlZCcsICdtZWRpYVRyYW5zZmVyRHVyYXRpb24nLCAnbWVkaWFCeXRlc1RyYW5zZmVycmVkJ107XG5cbnZhciBzdW1Mb2FkZXJTdGF0ID0gZnVuY3Rpb24gc3VtTG9hZGVyU3RhdChzdGF0KSB7XG4gIHJldHVybiB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl9bc3RhdF0gKyB0aGlzLm1haW5TZWdtZW50TG9hZGVyX1tzdGF0XTtcbn07XG4vKipcbiAqIHRoZSBtYXN0ZXIgcGxheWxpc3QgY29udHJvbGxlciBjb250cm9sbGVyIGFsbCBpbnRlcmFjdG9uc1xuICogYmV0d2VlbiBwbGF5bGlzdHMgYW5kIHNlZ21lbnRsb2FkZXJzLiBBdCB0aGlzIHRpbWUgdGhpcyBtYWlubHlcbiAqIGludm9sdmVzIGEgbWFzdGVyIHBsYXlsaXN0IGFuZCBhIHNlcmllcyBvZiBhdWRpbyBwbGF5bGlzdHNcbiAqIGlmIHRoZXkgYXJlIGF2YWlsYWJsZVxuICpcbiAqIEBjbGFzcyBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG5cbnZhciBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoX3ZpZGVvanMkRXZlbnRUYXJnZXQpIHtcbiAgaW5oZXJpdHMoTWFzdGVyUGxheWxpc3RDb250cm9sbGVyLCBfdmlkZW9qcyRFdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gTWFzdGVyUGxheWxpc3RDb250cm9sbGVyKG9wdGlvbnMpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWFzdGVyUGxheWxpc3RDb250cm9sbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWFzdGVyUGxheWxpc3RDb250cm9sbGVyKSkuY2FsbCh0aGlzKSk7XG5cbiAgICB2YXIgdXJsID0gb3B0aW9ucy51cmwsXG4gICAgICAgIGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzID0gb3B0aW9ucy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgIHRlY2ggPSBvcHRpb25zLnRlY2gsXG4gICAgICAgIGJhbmR3aWR0aCA9IG9wdGlvbnMuYmFuZHdpZHRoLFxuICAgICAgICBleHRlcm5IbHMgPSBvcHRpb25zLmV4dGVybkhscyxcbiAgICAgICAgdXNlQ3VlVGFncyA9IG9wdGlvbnMudXNlQ3VlVGFncyxcbiAgICAgICAgYmxhY2tsaXN0RHVyYXRpb24gPSBvcHRpb25zLmJsYWNrbGlzdER1cmF0aW9uLFxuICAgICAgICBlbmFibGVMb3dJbml0aWFsUGxheWxpc3QgPSBvcHRpb25zLmVuYWJsZUxvd0luaXRpYWxQbGF5bGlzdCxcbiAgICAgICAgc291cmNlVHlwZSA9IG9wdGlvbnMuc291cmNlVHlwZSxcbiAgICAgICAgc2Vla1RvID0gb3B0aW9ucy5zZWVrVG8sXG4gICAgICAgIGNhY2hlRW5jcnlwdGlvbktleXMgPSBvcHRpb25zLmNhY2hlRW5jcnlwdGlvbktleXM7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIG5vbi1lbXB0eSBwbGF5bGlzdCBVUkwgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICBIbHMgPSBleHRlcm5IbHM7XG4gICAgX3RoaXMud2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzO1xuICAgIF90aGlzLnRlY2hfID0gdGVjaDtcbiAgICBfdGhpcy5obHNfID0gdGVjaC5obHM7XG4gICAgX3RoaXMuc2Vla1RvXyA9IHNlZWtUbztcbiAgICBfdGhpcy5zb3VyY2VUeXBlXyA9IHNvdXJjZVR5cGU7XG4gICAgX3RoaXMudXNlQ3VlVGFnc18gPSB1c2VDdWVUYWdzO1xuICAgIF90aGlzLmJsYWNrbGlzdER1cmF0aW9uID0gYmxhY2tsaXN0RHVyYXRpb247XG4gICAgX3RoaXMuZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0ID0gZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0O1xuXG4gICAgaWYgKF90aGlzLnVzZUN1ZVRhZ3NfKSB7XG4gICAgICBfdGhpcy5jdWVUYWdzVHJhY2tfID0gX3RoaXMudGVjaF8uYWRkVGV4dFRyYWNrKCdtZXRhZGF0YScsICdhZC1jdWVzJyk7XG4gICAgICBfdGhpcy5jdWVUYWdzVHJhY2tfLmluQmFuZE1ldGFkYXRhVHJhY2tEaXNwYXRjaFR5cGUgPSAnJztcbiAgICB9XG5cbiAgICBfdGhpcy5yZXF1ZXN0T3B0aW9uc18gPSB7XG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IHdpdGhDcmVkZW50aWFscyxcbiAgICAgIGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzOiBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyxcbiAgICAgIHRpbWVvdXQ6IG51bGxcbiAgICB9O1xuICAgIF90aGlzLm1lZGlhVHlwZXNfID0gY3JlYXRlTWVkaWFUeXBlcygpO1xuICAgIF90aGlzLm1lZGlhU291cmNlID0gbmV3IHZpZGVvanMkMS5NZWRpYVNvdXJjZSgpOyAvLyBsb2FkIHRoZSBtZWRpYSBzb3VyY2UgaW50byB0aGUgcGxheWVyXG5cbiAgICBfdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgX3RoaXMuaGFuZGxlU291cmNlT3Blbl8uYmluZChfdGhpcykpO1xuXG4gICAgX3RoaXMuc2Vla2FibGVfID0gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoKTtcblxuICAgIF90aGlzLmhhc1BsYXllZF8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLnN5bmNDb250cm9sbGVyXyA9IG5ldyBTeW5jQ29udHJvbGxlcihvcHRpb25zKTtcbiAgICBfdGhpcy5zZWdtZW50TWV0YWRhdGFUcmFja18gPSB0ZWNoLmFkZFJlbW90ZVRleHRUcmFjayh7XG4gICAgICBraW5kOiAnbWV0YWRhdGEnLFxuICAgICAgbGFiZWw6ICdzZWdtZW50LW1ldGFkYXRhJ1xuICAgIH0sIGZhbHNlKS50cmFjaztcbiAgICBfdGhpcy5kZWNyeXB0ZXJfID0gbmV3IERlY3J5cHRlciQxKCk7XG4gICAgX3RoaXMuaW5iYW5kVGV4dFRyYWNrc18gPSB7fTtcbiAgICB2YXIgc2VnbWVudExvYWRlclNldHRpbmdzID0ge1xuICAgICAgaGxzOiBfdGhpcy5obHNfLFxuICAgICAgbWVkaWFTb3VyY2U6IF90aGlzLm1lZGlhU291cmNlLFxuICAgICAgY3VycmVudFRpbWU6IF90aGlzLnRlY2hfLmN1cnJlbnRUaW1lLmJpbmQoX3RoaXMudGVjaF8pLFxuICAgICAgc2Vla2FibGU6IGZ1bmN0aW9uIHNlZWthYmxlJCQxKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2Vla2FibGUoKTtcbiAgICAgIH0sXG4gICAgICBzZWVraW5nOiBmdW5jdGlvbiBzZWVraW5nKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGVjaF8uc2Vla2luZygpO1xuICAgICAgfSxcbiAgICAgIGR1cmF0aW9uOiBmdW5jdGlvbiBkdXJhdGlvbiQkMSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm1lZGlhU291cmNlLmR1cmF0aW9uO1xuICAgICAgfSxcbiAgICAgIGhhc1BsYXllZDogZnVuY3Rpb24gaGFzUGxheWVkKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzUGxheWVkXygpO1xuICAgICAgfSxcbiAgICAgIGdvYWxCdWZmZXJMZW5ndGg6IGZ1bmN0aW9uIGdvYWxCdWZmZXJMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5nb2FsQnVmZmVyTGVuZ3RoKCk7XG4gICAgICB9LFxuICAgICAgYmFuZHdpZHRoOiBiYW5kd2lkdGgsXG4gICAgICBzeW5jQ29udHJvbGxlcjogX3RoaXMuc3luY0NvbnRyb2xsZXJfLFxuICAgICAgZGVjcnlwdGVyOiBfdGhpcy5kZWNyeXB0ZXJfLFxuICAgICAgc291cmNlVHlwZTogX3RoaXMuc291cmNlVHlwZV8sXG4gICAgICBpbmJhbmRUZXh0VHJhY2tzOiBfdGhpcy5pbmJhbmRUZXh0VHJhY2tzXyxcbiAgICAgIGNhY2hlRW5jcnlwdGlvbktleXM6IGNhY2hlRW5jcnlwdGlvbktleXNcbiAgICB9O1xuICAgIF90aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXyA9IF90aGlzLnNvdXJjZVR5cGVfID09PSAnZGFzaCcgPyBuZXcgRGFzaFBsYXlsaXN0TG9hZGVyKHVybCwgX3RoaXMuaGxzXywgX3RoaXMucmVxdWVzdE9wdGlvbnNfKSA6IG5ldyBQbGF5bGlzdExvYWRlcih1cmwsIF90aGlzLmhsc18sIF90aGlzLnJlcXVlc3RPcHRpb25zXyk7XG5cbiAgICBfdGhpcy5zZXR1cE1hc3RlclBsYXlsaXN0TG9hZGVyTGlzdGVuZXJzXygpOyAvLyBzZXR1cCBzZWdtZW50IGxvYWRlcnNcbiAgICAvLyBjb21iaW5lZCBhdWRpby92aWRlbyBvciBqdXN0IHZpZGVvIHdoZW4gYWx0ZXJuYXRlIGF1ZGlvIHRyYWNrIGlzIHNlbGVjdGVkXG5cblxuICAgIF90aGlzLm1haW5TZWdtZW50TG9hZGVyXyA9IG5ldyBTZWdtZW50TG9hZGVyKHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoc2VnbWVudExvYWRlclNldHRpbmdzLCB7XG4gICAgICBzZWdtZW50TWV0YWRhdGFUcmFjazogX3RoaXMuc2VnbWVudE1ldGFkYXRhVHJhY2tfLFxuICAgICAgbG9hZGVyVHlwZTogJ21haW4nXG4gICAgfSksIG9wdGlvbnMpOyAvLyBhbHRlcm5hdGUgYXVkaW8gdHJhY2tcblxuICAgIF90aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8gPSBuZXcgU2VnbWVudExvYWRlcih2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHNlZ21lbnRMb2FkZXJTZXR0aW5ncywge1xuICAgICAgbG9hZGVyVHlwZTogJ2F1ZGlvJ1xuICAgIH0pLCBvcHRpb25zKTtcbiAgICBfdGhpcy5zdWJ0aXRsZVNlZ21lbnRMb2FkZXJfID0gbmV3IFZUVFNlZ21lbnRMb2FkZXIodmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhzZWdtZW50TG9hZGVyU2V0dGluZ3MsIHtcbiAgICAgIGxvYWRlclR5cGU6ICd2dHQnXG4gICAgfSksIG9wdGlvbnMpO1xuXG4gICAgX3RoaXMuc2V0dXBTZWdtZW50TG9hZGVyTGlzdGVuZXJzXygpOyAvLyBDcmVhdGUgU2VnbWVudExvYWRlciBzdGF0LWdldHRlcnNcblxuXG4gICAgbG9hZGVyU3RhdHMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdCkge1xuICAgICAgX3RoaXNbc3RhdCArICdfJ10gPSBzdW1Mb2FkZXJTdGF0LmJpbmQoX3RoaXMsIHN0YXQpO1xuICAgIH0pO1xuICAgIF90aGlzLmxvZ2dlcl8gPSBsb2dnZXIoJ01QQycpO1xuXG4gICAgX3RoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLmxvYWQoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgb24gdGhlIG1hc3RlciBwbGF5bGlzdCBsb2FkZXIuIEEgaGVscGVyXG4gICAqIGZ1bmN0aW9uIGZvciBjb25zdHJ1Y3Rpb24gdGltZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICBjcmVhdGVDbGFzcyhNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIsIFt7XG4gICAga2V5OiAnc2V0dXBNYXN0ZXJQbGF5bGlzdExvYWRlckxpc3RlbmVyc18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cE1hc3RlclBsYXlsaXN0TG9hZGVyTGlzdGVuZXJzXygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5vbignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZWRpYSA9IF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTtcblxuICAgICAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBtZWRpYS50YXJnZXREdXJhdGlvbiAqIDEuNSAqIDEwMDA7IC8vIElmIHdlIGRvbid0IGhhdmUgYW55IG1vcmUgYXZhaWxhYmxlIHBsYXlsaXN0cywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyB0aW1lb3V0IHRoZSByZXF1ZXN0LlxuXG4gICAgICAgIGlmIChpc0xvd2VzdEVuYWJsZWRSZW5kaXRpb24oX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tYXN0ZXIsIF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKSkpIHtcbiAgICAgICAgICBfdGhpczIucmVxdWVzdE9wdGlvbnNfLnRpbWVvdXQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5yZXF1ZXN0T3B0aW9uc18udGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuICAgICAgICB9IC8vIGlmIHRoaXMgaXNuJ3QgYSBsaXZlIHZpZGVvIGFuZCBwcmVsb2FkIHBlcm1pdHMsIHN0YXJ0XG4gICAgICAgIC8vIGRvd25sb2FkaW5nIHNlZ21lbnRzXG5cblxuICAgICAgICBpZiAobWVkaWEuZW5kTGlzdCAmJiBfdGhpczIudGVjaF8ucHJlbG9hZCgpICE9PSAnbm9uZScpIHtcbiAgICAgICAgICBfdGhpczIubWFpblNlZ21lbnRMb2FkZXJfLnBsYXlsaXN0KG1lZGlhLCBfdGhpczIucmVxdWVzdE9wdGlvbnNfKTtcblxuICAgICAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dXBNZWRpYUdyb3Vwcyh7XG4gICAgICAgICAgc291cmNlVHlwZTogX3RoaXMyLnNvdXJjZVR5cGVfLFxuICAgICAgICAgIHNlZ21lbnRMb2FkZXJzOiB7XG4gICAgICAgICAgICBBVURJTzogX3RoaXMyLmF1ZGlvU2VnbWVudExvYWRlcl8sXG4gICAgICAgICAgICBTVUJUSVRMRVM6IF90aGlzMi5zdWJ0aXRsZVNlZ21lbnRMb2FkZXJfLFxuICAgICAgICAgICAgbWFpbjogX3RoaXMyLm1haW5TZWdtZW50TG9hZGVyX1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGVjaDogX3RoaXMyLnRlY2hfLFxuICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiBfdGhpczIucmVxdWVzdE9wdGlvbnNfLFxuICAgICAgICAgIG1hc3RlclBsYXlsaXN0TG9hZGVyOiBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLFxuICAgICAgICAgIGhsczogX3RoaXMyLmhsc18sXG4gICAgICAgICAgbWFzdGVyOiBfdGhpczIubWFzdGVyKCksXG4gICAgICAgICAgbWVkaWFUeXBlczogX3RoaXMyLm1lZGlhVHlwZXNfLFxuICAgICAgICAgIGJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdDogX3RoaXMyLmJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdC5iaW5kKF90aGlzMilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXJQcmVzZW5jZVVzYWdlXyhfdGhpczIubWFzdGVyKCksIG1lZGlhKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIF90aGlzMi5zZXR1cFNvdXJjZUJ1ZmZlcnNfKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ0ZhaWxlZCB0byBjcmVhdGUgU291cmNlQnVmZmVycycsIGUpO1xuICAgICAgICAgIHJldHVybiBfdGhpczIubWVkaWFTb3VyY2UuZW5kT2ZTdHJlYW0oJ2RlY29kZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnNldHVwRmlyc3RQbGF5KCk7XG5cbiAgICAgICAgaWYgKCFfdGhpczIubWVkaWFUeXBlc18uQVVESU8uYWN0aXZlUGxheWxpc3RMb2FkZXIgfHwgX3RoaXMyLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyLm1lZGlhKCkpIHtcbiAgICAgICAgICBfdGhpczIudHJpZ2dlcignc2VsZWN0ZWRpbml0aWFsbWVkaWEnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXZSBtdXN0IHdhaXQgZm9yIHRoZSBhY3RpdmUgYXVkaW8gcGxheWxpc3QgbG9hZGVyIHRvXG4gICAgICAgICAgLy8gZmluaXNoIHNldHRpbmcgdXAgYmVmb3JlIHRyaWdnZXJpbmcgdGhpcyBldmVudCBzbyB0aGVcbiAgICAgICAgICAvLyByZXByZXNlbnRhdGlvbnMgQVBJIGFuZCBFTUUgc2V0dXAgaXMgY29ycmVjdFxuICAgICAgICAgIF90aGlzMi5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlci5vbmUoJ2xvYWRlZG1ldGFkYXRhJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ3NlbGVjdGVkaW5pdGlhbG1lZGlhJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ2xvYWRlZHBsYXlsaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdXBkYXRlZFBsYXlsaXN0ID0gX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpO1xuXG4gICAgICAgIGlmICghdXBkYXRlZFBsYXlsaXN0KSB7XG4gICAgICAgICAgLy8gYmxhY2tsaXN0IGFueSB2YXJpYW50cyB0aGF0IGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyIGJlZm9yZSBzZWxlY3RpbmdcbiAgICAgICAgICAvLyBhbiBpbml0aWFsIG1lZGlhIGFzIHRoZSBwbGF5bGlzdCBzZWxlY3RvcnMgZG8gbm90IGNvbnNpZGVyIGJyb3dzZXIgc3VwcG9ydFxuICAgICAgICAgIF90aGlzMi5leGNsdWRlVW5zdXBwb3J0ZWRWYXJpYW50c18oKTtcblxuICAgICAgICAgIHZhciBzZWxlY3RlZE1lZGlhID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5lbmFibGVMb3dJbml0aWFsUGxheWxpc3QpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkTWVkaWEgPSBfdGhpczIuc2VsZWN0SW5pdGlhbFBsYXlsaXN0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzZWxlY3RlZE1lZGlhKSB7XG4gICAgICAgICAgICBzZWxlY3RlZE1lZGlhID0gX3RoaXMyLnNlbGVjdFBsYXlsaXN0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLmluaXRpYWxNZWRpYV8gPSBzZWxlY3RlZE1lZGlhO1xuXG4gICAgICAgICAgX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYShfdGhpczIuaW5pdGlhbE1lZGlhXyk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMyLnVzZUN1ZVRhZ3NfKSB7XG4gICAgICAgICAgX3RoaXMyLnVwZGF0ZUFkQ3Vlc18odXBkYXRlZFBsYXlsaXN0KTtcbiAgICAgICAgfSAvLyBUT0RPOiBDcmVhdGUgYSBuZXcgZXZlbnQgb24gdGhlIFBsYXlsaXN0TG9hZGVyIHRoYXQgc2lnbmFsc1xuICAgICAgICAvLyB0aGF0IHRoZSBzZWdtZW50cyBoYXZlIGNoYW5nZWQgaW4gc29tZSB3YXkgYW5kIHVzZSB0aGF0IHRvXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgU2VnbWVudExvYWRlciBpbnN0ZWFkIG9mIGRvaW5nIGl0IHR3aWNlIGhlcmUgYW5kXG4gICAgICAgIC8vIG9uIGBtZWRpYWNoYW5nZWBcblxuXG4gICAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ucGxheWxpc3QodXBkYXRlZFBsYXlsaXN0LCBfdGhpczIucmVxdWVzdE9wdGlvbnNfKTtcblxuICAgICAgICBfdGhpczIudXBkYXRlRHVyYXRpb24oKTsgLy8gSWYgdGhlIHBsYXllciBpc24ndCBwYXVzZWQsIGVuc3VyZSB0aGF0IHRoZSBzZWdtZW50IGxvYWRlciBpcyBydW5uaW5nLFxuICAgICAgICAvLyBhcyBpdCBpcyBwb3NzaWJsZSB0aGF0IGl0IHdhcyB0ZW1wb3JhcmlseSBzdG9wcGVkIHdoaWxlIHdhaXRpbmcgZm9yXG4gICAgICAgIC8vIGEgcGxheWxpc3QgKGUuZy4sIGluIGNhc2UgdGhlIHBsYXlsaXN0IGVycm9yZWQgYW5kIHdlIHJlLXJlcXVlc3RlZCBpdCkuXG5cblxuICAgICAgICBpZiAoIV90aGlzMi50ZWNoXy5wYXVzZWQoKSkge1xuICAgICAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5hdWRpb1NlZ21lbnRMb2FkZXJfKSB7XG4gICAgICAgICAgICBfdGhpczIuYXVkaW9TZWdtZW50TG9hZGVyXy5sb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cGRhdGVkUGxheWxpc3QuZW5kTGlzdCkge1xuICAgICAgICAgIHZhciBhZGRTZWVrYWJsZVJhbmdlID0gZnVuY3Rpb24gYWRkU2Vla2FibGVSYW5nZSgpIHtcbiAgICAgICAgICAgIHZhciBzZWVrYWJsZSQkMSA9IF90aGlzMi5zZWVrYWJsZSgpO1xuXG4gICAgICAgICAgICBpZiAoc2Vla2FibGUkJDEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5tZWRpYVNvdXJjZS5hZGRTZWVrYWJsZVJhbmdlXyhzZWVrYWJsZSQkMS5zdGFydCgwKSwgc2Vla2FibGUkJDEuZW5kKDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5kdXJhdGlvbigpICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgdmFyIG9uRHVyYXRpb25jaGFuZ2UgPSBmdW5jdGlvbiBvbkR1cmF0aW9uY2hhbmdlKCkge1xuICAgICAgICAgICAgICBpZiAoX3RoaXMyLmR1cmF0aW9uKCkgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgYWRkU2Vla2FibGVSYW5nZSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzMi50ZWNoXy5vbmUoJ2R1cmF0aW9uY2hhbmdlJywgb25EdXJhdGlvbmNoYW5nZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF90aGlzMi50ZWNoXy5vbmUoJ2R1cmF0aW9uY2hhbmdlJywgb25EdXJhdGlvbmNoYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZFNlZWthYmxlUmFuZ2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0KF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8uZXJyb3IpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5vbignbWVkaWFjaGFuZ2luZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLm1haW5TZWdtZW50TG9hZGVyXy5hYm9ydCgpO1xuXG4gICAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ucGF1c2UoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ21lZGlhY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWVkaWEgPSBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCk7XG5cbiAgICAgICAgdmFyIHJlcXVlc3RUaW1lb3V0ID0gbWVkaWEudGFyZ2V0RHVyYXRpb24gKiAxLjUgKiAxMDAwOyAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGF2YWlsYWJsZSBwbGF5bGlzdHMsIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gdGltZW91dCB0aGUgcmVxdWVzdC5cblxuICAgICAgICBpZiAoaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uKF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWFzdGVyLCBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkpKSB7XG4gICAgICAgICAgX3RoaXMyLnJlcXVlc3RPcHRpb25zXy50aW1lb3V0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIucmVxdWVzdE9wdGlvbnNfLnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiAgICAgICAgfSAvLyBUT0RPOiBDcmVhdGUgYSBuZXcgZXZlbnQgb24gdGhlIFBsYXlsaXN0TG9hZGVyIHRoYXQgc2lnbmFsc1xuICAgICAgICAvLyB0aGF0IHRoZSBzZWdtZW50cyBoYXZlIGNoYW5nZWQgaW4gc29tZSB3YXkgYW5kIHVzZSB0aGF0IHRvXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgU2VnbWVudExvYWRlciBpbnN0ZWFkIG9mIGRvaW5nIGl0IHR3aWNlIGhlcmUgYW5kXG4gICAgICAgIC8vIG9uIGBsb2FkZWRwbGF5bGlzdGBcblxuXG4gICAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ucGxheWxpc3QobWVkaWEsIF90aGlzMi5yZXF1ZXN0T3B0aW9uc18pO1xuXG4gICAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuXG4gICAgICAgIF90aGlzMi50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAnbWVkaWFjaGFuZ2UnLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm9uKCdwbGF5bGlzdHVuY2hhbmdlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRQbGF5bGlzdCA9IF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTtcblxuICAgICAgICB2YXIgcGxheWxpc3RPdXRkYXRlZCA9IF90aGlzMi5zdHVja0F0UGxheWxpc3RFbmRfKHVwZGF0ZWRQbGF5bGlzdCk7XG5cbiAgICAgICAgaWYgKHBsYXlsaXN0T3V0ZGF0ZWQpIHtcbiAgICAgICAgICAvLyBQbGF5bGlzdCBoYXMgc3RvcHBlZCB1cGRhdGluZyBhbmQgd2UncmUgc3R1Y2sgYXQgaXRzIGVuZC4gVHJ5IHRvXG4gICAgICAgICAgLy8gYmxhY2tsaXN0IGl0IGFuZCBzd2l0Y2ggdG8gYW5vdGhlciBwbGF5bGlzdCBpbiB0aGUgaG9wZSB0aGF0IHRoYXRcbiAgICAgICAgICAvLyBvbmUgaXMgdXBkYXRpbmcgKGFuZCBnaXZlIHRoZSBwbGF5ZXIgYSBjaGFuY2UgdG8gcmUtYWRqdXN0IHRvIHRoZVxuICAgICAgICAgIC8vIHNhZmUgbGl2ZSBwb2ludCkuXG4gICAgICAgICAgX3RoaXMyLmJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdCh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnUGxheWxpc3Qgbm8gbG9uZ2VyIHVwZGF0aW5nLidcbiAgICAgICAgICB9KTsgLy8gdXNlZnVsIGZvciBtb25pdG9yaW5nIFFvU1xuXG5cbiAgICAgICAgICBfdGhpczIudGVjaF8udHJpZ2dlcigncGxheWxpc3RzdHVjaycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm9uKCdyZW5kaXRpb25kaXNhYmxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ2hscy1yZW5kaXRpb24tZGlzYWJsZWQnXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5vbigncmVuZGl0aW9uZW5hYmxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ2hscy1yZW5kaXRpb24tZW5hYmxlZCdcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBoZWxwZXIgZnVuY3Rpb24gZm9yIHRyaWdnZXJyaW5nIHByZXNlbmNlIHVzYWdlIGV2ZW50cyBvbmNlIHBlciBzb3VyY2VcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RyaWdnZXJQcmVzZW5jZVVzYWdlXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXJQcmVzZW5jZVVzYWdlXyhtYXN0ZXIsIG1lZGlhKSB7XG4gICAgICB2YXIgbWVkaWFHcm91cHMgPSBtYXN0ZXIubWVkaWFHcm91cHMgfHwge307XG4gICAgICB2YXIgZGVmYXVsdERlbXV4ZWQgPSB0cnVlO1xuICAgICAgdmFyIGF1ZGlvR3JvdXBLZXlzID0gT2JqZWN0LmtleXMobWVkaWFHcm91cHMuQVVESU8pO1xuXG4gICAgICBmb3IgKHZhciBtZWRpYUdyb3VwIGluIG1lZGlhR3JvdXBzLkFVRElPKSB7XG4gICAgICAgIGZvciAodmFyIGxhYmVsIGluIG1lZGlhR3JvdXBzLkFVRElPW21lZGlhR3JvdXBdKSB7XG4gICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBtZWRpYUdyb3Vwcy5BVURJT1ttZWRpYUdyb3VwXVtsYWJlbF07XG5cbiAgICAgICAgICBpZiAoIXByb3BlcnRpZXMudXJpKSB7XG4gICAgICAgICAgICBkZWZhdWx0RGVtdXhlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGVmYXVsdERlbXV4ZWQpIHtcbiAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgIG5hbWU6ICdobHMtZGVtdXhlZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhtZWRpYUdyb3Vwcy5TVUJUSVRMRVMpLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ2hscy13ZWJ2dHQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoSGxzLlBsYXlsaXN0LmlzQWVzKG1lZGlhKSkge1xuICAgICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ2hscy1hZXMnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoSGxzLlBsYXlsaXN0LmlzRm1wNChtZWRpYSkpIHtcbiAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgIG5hbWU6ICdobHMtZm1wNCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdWRpb0dyb3VwS2V5cy5sZW5ndGggJiYgT2JqZWN0LmtleXMobWVkaWFHcm91cHMuQVVESU9bYXVkaW9Hcm91cEtleXNbMF1dKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICBuYW1lOiAnaGxzLWFsdGVybmF0ZS1hdWRpbydcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnVzZUN1ZVRhZ3NfKSB7XG4gICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICBuYW1lOiAnaGxzLXBsYXlsaXN0LWN1ZS10YWdzJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgb24gdGhlIHNlZ21lbnQgbG9hZGVycy4gQSBoZWxwZXIgZnVuY3Rpb25cbiAgICAgKiBmb3IgY29uc3RydWN0aW9uIHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXR1cFNlZ21lbnRMb2FkZXJMaXN0ZW5lcnNfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBTZWdtZW50TG9hZGVyTGlzdGVuZXJzXygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5vbignYmFuZHdpZHRodXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dFBsYXlsaXN0ID0gX3RoaXMzLnNlbGVjdFBsYXlsaXN0KCk7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRQbGF5bGlzdCA9IF90aGlzMy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTtcblxuICAgICAgICB2YXIgYnVmZmVyZWQgPSBfdGhpczMudGVjaF8uYnVmZmVyZWQoKTtcblxuICAgICAgICB2YXIgZm9yd2FyZEJ1ZmZlciA9IGJ1ZmZlcmVkLmxlbmd0aCA/IGJ1ZmZlcmVkLmVuZChidWZmZXJlZC5sZW5ndGggLSAxKSAtIF90aGlzMy50ZWNoXy5jdXJyZW50VGltZSgpIDogMDtcblxuICAgICAgICB2YXIgYnVmZmVyTG93V2F0ZXJMaW5lID0gX3RoaXMzLmJ1ZmZlckxvd1dhdGVyTGluZSgpOyAvLyBJZiB0aGUgcGxheWxpc3QgaXMgbGl2ZSwgdGhlbiB3ZSB3YW50IHRvIG5vdCB0YWtlIGxvdyB3YXRlciBsaW5lIGludG8gYWNjb3VudC5cbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIGluIExJVkUsIHRoZSBwbGF5ZXIgcGxheXMgMyBzZWdtZW50cyBmcm9tIHRoZSBlbmQgb2YgdGhlXG4gICAgICAgIC8vIHBsYXlsaXN0LCBhbmQgaWYgYEJVRkZFUl9MT1dfV0FURVJfTElORWAgaXMgZ3JlYXRlciB0aGFuIHRoZSBkdXJhdGlvbiBhdmFpbGJsZVxuICAgICAgICAvLyBpbiB0aG9zZSBzZWdtZW50cywgYSB2aWV3ZXIgd2lsbCBuZXZlciBleHBlcmllbmNlIGEgcmVuZGl0aW9uIHVwc3dpdGNoLlxuXG5cbiAgICAgICAgaWYgKCFjdXJyZW50UGxheWxpc3QuZW5kTGlzdCB8fCAvLyBGb3IgdGhlIHNhbWUgcmVhc29uIGFzIExJVkUsIHdlIGlnbm9yZSB0aGUgbG93IHdhdGVyIGxpbmUgd2hlbiB0aGUgVk9EXG4gICAgICAgIC8vIGR1cmF0aW9uIGlzIGJlbG93IHRoZSBtYXggcG90ZW50aWFsIGxvdyB3YXRlciBsaW5lXG4gICAgICAgIF90aGlzMy5kdXJhdGlvbigpIDwgQ29uZmlnLk1BWF9CVUZGRVJfTE9XX1dBVEVSX0xJTkUgfHwgLy8gd2Ugd2FudCB0byBzd2l0Y2ggZG93biB0byBsb3dlciByZXNvbHV0aW9ucyBxdWlja2x5IHRvIGNvbnRpbnVlIHBsYXliYWNrLCBidXRcbiAgICAgICAgbmV4dFBsYXlsaXN0LmF0dHJpYnV0ZXMuQkFORFdJRFRIIDwgY3VycmVudFBsYXlsaXN0LmF0dHJpYnV0ZXMuQkFORFdJRFRIIHx8IC8vIGVuc3VyZSB3ZSBoYXZlIHNvbWUgYnVmZmVyIGJlZm9yZSB3ZSBzd2l0Y2ggdXAgdG8gcHJldmVudCB1cyBydW5uaW5nIG91dCBvZlxuICAgICAgICAvLyBidWZmZXIgd2hpbGUgbG9hZGluZyBhIGhpZ2hlciByZW5kaXRpb24uXG4gICAgICAgIGZvcndhcmRCdWZmZXIgPj0gYnVmZmVyTG93V2F0ZXJMaW5lKSB7XG4gICAgICAgICAgX3RoaXMzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYShuZXh0UGxheWxpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLnRlY2hfLnRyaWdnZXIoJ2JhbmR3aWR0aHVwZGF0ZScpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5vbigncHJvZ3Jlc3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy50cmlnZ2VyKCdwcm9ncmVzcycpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5vbignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5ibGFja2xpc3RDdXJyZW50UGxheWxpc3QoX3RoaXMzLm1haW5TZWdtZW50TG9hZGVyXy5lcnJvcigpKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ3N5bmNpbmZvdXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMub25TeW5jSW5mb1VwZGF0ZV8oKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ3RpbWVzdGFtcG9mZnNldCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ2hscy10aW1lc3RhbXAtb2Zmc2V0J1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLm9uKCdzeW5jaW5mb3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLm9uU3luY0luZm9VcGRhdGVfKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLm9uKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLm9uRW5kT2ZTdHJlYW0oKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ2Vhcmx5YWJvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5ibGFja2xpc3RDdXJyZW50UGxheWxpc3Qoe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBYm9ydGVkIGVhcmx5IGJlY2F1c2UgdGhlcmUgaXNuXFwndCBlbm91Z2ggYmFuZHdpZHRoIHRvIGNvbXBsZXRlIHRoZSAnICsgJ3JlcXVlc3Qgd2l0aG91dCByZWJ1ZmZlcmluZy4nXG4gICAgICAgIH0sIEFCT1JUX0VBUkxZX0JMQUNLTElTVF9TRUNPTkRTKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ3Jlc2V0ZXZlcnl0aGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgcGxheWluZyBhbiBNVFMgc3RyZWFtLCBhIHZpZGVvanMuTWVkaWFTb3VyY2UgaXMgbGlzdGVuaW5nIGZvclxuICAgICAgICAvLyBobHMtcmVzZXQgdG8gcmVzZXQgY2FwdGlvbiBwYXJzaW5nIHN0YXRlIGluIHRoZSB0cmFuc211eGVyXG4gICAgICAgIF90aGlzMy50ZWNoXy50cmlnZ2VyKCdobHMtcmVzZXQnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ3NlZ21lbnR0aW1lbWFwcGluZycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBJZiBwbGF5aW5nIGFuIE1UUyBzdHJlYW0gaW4gaHRtbCwgYSB2aWRlb2pzLk1lZGlhU291cmNlIGlzIGxpc3RlbmluZyBmb3JcbiAgICAgICAgLy8gaGxzLXNlZ21lbnQtdGltZS1tYXBwaW5nIHVwZGF0ZSBpdHMgaW50ZXJuYWwgbWFwcGluZyBvZiBzdHJlYW0gdG8gZGlzcGxheSB0aW1lXG4gICAgICAgIF90aGlzMy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAnaGxzLXNlZ21lbnQtdGltZS1tYXBwaW5nJyxcbiAgICAgICAgICBtYXBwaW5nOiBldmVudC5tYXBwaW5nXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8ub24oJ2VuZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMub25FbmRPZlN0cmVhbSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbWVkaWFTZWNvbmRzTG9hZGVkXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lZGlhU2Vjb25kc0xvYWRlZF8oKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLm1lZGlhU2Vjb25kc0xvYWRlZCArIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLm1lZGlhU2Vjb25kc0xvYWRlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgbG9hZCBvbiBvdXIgU2VnbWVudExvYWRlcnNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5sb2FkKCk7XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLlNVQlRJVExFUy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgICB0aGlzLnN1YnRpdGxlU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZS10dW5lIHBsYXliYWNrIHF1YWxpdHkgbGV2ZWwgZm9yIHRoZSBjdXJyZW50IHBsYXllclxuICAgICAqIGNvbmRpdGlvbnMgd2l0aG91dCBwZXJmb3JtaW5nIGRlc3RydWN0aXZlIGFjdGlvbnMsIGxpa2VcbiAgICAgKiByZW1vdmluZyBhbHJlYWR5IGJ1ZmZlcmVkIGNvbnRlbnRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Ntb290aFF1YWxpdHlDaGFuZ2VfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc21vb3RoUXVhbGl0eUNoYW5nZV8oKSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLnNlbGVjdFBsYXlsaXN0KCk7XG5cbiAgICAgIGlmIChtZWRpYSAhPT0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKSkge1xuICAgICAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYShtZWRpYSk7XG4gICAgICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLnJlc2V0TG9hZGVyKCk7IC8vIGRvbid0IG5lZWQgdG8gcmVzZXQgYXVkaW8gYXMgaXQgaXMgcmVzZXQgd2hlbiBtZWRpYSBjaGFuZ2VzXG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlLXR1bmUgcGxheWJhY2sgcXVhbGl0eSBsZXZlbCBmb3IgdGhlIGN1cnJlbnQgcGxheWVyXG4gICAgICogY29uZGl0aW9ucy4gVGhpcyBtZXRob2Qgd2lsbCBwZXJmb3JtIGRlc3RydWN0aXZlIGFjdGlvbnMgbGlrZSByZW1vdmluZ1xuICAgICAqIGFscmVhZHkgYnVmZmVyZWQgY29udGVudCBpbiBvcmRlciB0byByZWFkanVzdCB0aGUgY3VycmVudGx5IGFjdGl2ZVxuICAgICAqIHBsYXlsaXN0IHF1aWNrbHkuIFRoaXMgaXMgZ29vZCBmb3IgbWFudWFsIHF1YWxpdHkgY2hhbmdlc1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmFzdFF1YWxpdHlDaGFuZ2VfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmFzdFF1YWxpdHlDaGFuZ2VfKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBtZWRpYSA9IHRoaXMuc2VsZWN0UGxheWxpc3QoKTtcblxuICAgICAgaWYgKG1lZGlhID09PSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEobWVkaWEpOyAvLyBEZWxldGUgYWxsIGJ1ZmZlcmVkIGRhdGEgdG8gYWxsb3cgYW4gaW1tZWRpYXRlIHF1YWxpdHkgc3dpdGNoLCB0aGVuIHNlZWsgdG8gZ2l2ZVxuICAgICAgLy8gdGhlIGJyb3dzZXIgYSBraWNrIHRvIHJlbW92ZSBhbnkgY2FjaGVkIGZyYW1lcyBmcm9tIHRoZSBwcmV2aW91cyByZW5kdGlvbiAoLjA0IHNlY29uZHNcbiAgICAgIC8vIGFoZWFkIGlzIHJvdWdobHkgdGhlIG1pbmltdW0gdGhhdCB3aWxsIGFjY29tcGxpc2ggdGhpcyBhY3Jvc3MgYSB2YXJpZXR5IG9mIGNvbnRlbnRcbiAgICAgIC8vIGluIElFIGFuZCBFZGdlLCBidXQgc2Vla2luZyBpbiBwbGFjZSBpcyBzdWZmaWNpZW50IG9uIGFsbCBvdGhlciBicm93c2VycylcbiAgICAgIC8vIEVkZ2UvSUUgYnVnOiBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xNDYwMDM3NS9cbiAgICAgIC8vIENocm9tZSBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTY1MTkwNFxuXG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5yZXNldEV2ZXJ5dGhpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIG5vdCBhIHR5cGljYWwgc2Vlaywgd2UgYXZvaWQgdGhlIHNlZWtUbyBtZXRob2Qgd2hpY2ggY2FuIGNhdXNlIHNlZ21lbnRzXG4gICAgICAgIC8vIGZyb20gdGhlIHByZXZpb3VzbHkgZW5hYmxlZCByZW5kaXRpb24gdG8gbG9hZCBiZWZvcmUgdGhlIG5ldyBwbGF5bGlzdCBoYXMgZmluaXNoZWQgbG9hZGluZ1xuICAgICAgICBpZiAodmlkZW9qcyQxLmJyb3dzZXIuSUVfVkVSU0lPTiB8fCB2aWRlb2pzJDEuYnJvd3Nlci5JU19FREdFKSB7XG4gICAgICAgICAgX3RoaXM0LnRlY2hfLnNldEN1cnJlbnRUaW1lKF90aGlzNC50ZWNoXy5jdXJyZW50VGltZSgpICsgMC4wNCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM0LnRlY2hfLnNldEN1cnJlbnRUaW1lKF90aGlzNC50ZWNoXy5jdXJyZW50VGltZSgpKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIGRvbid0IG5lZWQgdG8gcmVzZXQgYXVkaW8gYXMgaXQgaXMgcmVzZXQgd2hlbiBtZWRpYSBjaGFuZ2VzXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJlZ2luIHBsYXliYWNrLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIGlmICh0aGlzLnNldHVwRmlyc3RQbGF5KCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50ZWNoXy5lbmRlZCgpKSB7XG4gICAgICAgIHRoaXMuc2Vla1RvXygwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaGFzUGxheWVkXygpKSB7XG4gICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Vla2FibGUkJDEgPSB0aGlzLnRlY2hfLnNlZWthYmxlKCk7IC8vIGlmIHRoZSB2aWV3ZXIgaGFzIHBhdXNlZCBhbmQgd2UgZmVsbCBvdXQgb2YgdGhlIGxpdmUgd2luZG93LFxuICAgICAgLy8gc2VlayBmb3J3YXJkIHRvIHRoZSBsaXZlIHBvaW50XG5cbiAgICAgIGlmICh0aGlzLnRlY2hfLmR1cmF0aW9uKCkgPT09IEluZmluaXR5KSB7XG4gICAgICAgIGlmICh0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCkgPCBzZWVrYWJsZSQkMS5zdGFydCgwKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNlZWtUb18oc2Vla2FibGUkJDEuZW5kKHNlZWthYmxlJCQxLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWVrIHRvIHRoZSBsYXRlc3QgbWVkaWEgcG9zaXRpb24gaWYgdGhpcyBpcyBhIGxpdmUgdmlkZW8gYW5kIHRoZVxuICAgICAqIHBsYXllciBhbmQgdmlkZW8gYXJlIGxvYWRlZCBhbmQgaW5pdGlhbGl6ZWQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldHVwRmlyc3RQbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBGaXJzdFBsYXkoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTsgLy8gQ2hlY2sgdGhhdCBldmVyeXRoaW5nIGlzIHJlYWR5IHRvIGJlZ2luIGJ1ZmZlcmluZyBmb3IgdGhlIGZpcnN0IGNhbGwgdG8gcGxheVxuICAgICAgLy8gIElmIDEpIHRoZXJlIGlzIG5vIGFjdGl2ZSBtZWRpYVxuICAgICAgLy8gICAgIDIpIHRoZSBwbGF5ZXIgaXMgcGF1c2VkXG4gICAgICAvLyAgICAgMykgdGhlIGZpcnN0IHBsYXkgaGFzIGFscmVhZHkgYmVlbiBzZXR1cFxuICAgICAgLy8gdGhlbiBleGl0IGVhcmx5XG5cbiAgICAgIGlmICghbWVkaWEgfHwgdGhpcy50ZWNoXy5wYXVzZWQoKSB8fCB0aGlzLmhhc1BsYXllZF8oKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIHdoZW4gdGhlIHZpZGVvIGlzIGEgbGl2ZSBzdHJlYW1cblxuXG4gICAgICBpZiAoIW1lZGlhLmVuZExpc3QpIHtcbiAgICAgICAgdmFyIHNlZWthYmxlJCQxID0gdGhpcy5zZWVrYWJsZSgpO1xuXG4gICAgICAgIGlmICghc2Vla2FibGUkJDEubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gd2l0aG91dCBhIHNlZWthYmxlIHJhbmdlLCB0aGUgcGxheWVyIGNhbm5vdCBzZWVrIHRvIGJlZ2luIGJ1ZmZlcmluZyBhdCB0aGUgbGl2ZVxuICAgICAgICAgIC8vIHBvaW50XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZpZGVvanMkMS5icm93c2VyLklFX1ZFUlNJT04gJiYgdGhpcy50ZWNoXy5yZWFkeVN0YXRlKCkgPT09IDApIHtcbiAgICAgICAgICAvLyBJRTExIHRocm93cyBhbiBJbnZhbGlkU3RhdGVFcnJvciBpZiB5b3UgdHJ5IHRvIHNldCBjdXJyZW50VGltZSB3aGlsZSB0aGVcbiAgICAgICAgICAvLyByZWFkeVN0YXRlIGlzIDAsIHNvIGl0IG11c3QgYmUgZGVsYXllZCB1bnRpbCB0aGUgdGVjaCBmaXJlcyBsb2FkZWRtZXRhZGF0YS5cbiAgICAgICAgICB0aGlzLnRlY2hfLm9uZSgnbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczUudHJpZ2dlcignZmlyc3RwbGF5Jyk7XG5cbiAgICAgICAgICAgIF90aGlzNS5zZWVrVG9fKHNlZWthYmxlJCQxLmVuZCgwKSk7XG5cbiAgICAgICAgICAgIF90aGlzNS5oYXNQbGF5ZWRfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IC8vIHRyaWdnZXIgZmlyc3RwbGF5IHRvIGluZm9ybSB0aGUgc291cmNlIGhhbmRsZXIgdG8gaWdub3JlIHRoZSBuZXh0IHNlZWsgZXZlbnRcblxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignZmlyc3RwbGF5Jyk7IC8vIHNlZWsgdG8gdGhlIGxpdmUgcG9pbnRcblxuICAgICAgICB0aGlzLnNlZWtUb18oc2Vla2FibGUkJDEuZW5kKDApKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5oYXNQbGF5ZWRfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07IC8vIHdlIGNhbiBiZWdpbiBsb2FkaW5nIG5vdyB0aGF0IGV2ZXJ5dGhpbmcgaXMgcmVhZHlcblxuXG4gICAgICB0aGlzLmxvYWQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBoYW5kbGUgdGhlIHNvdXJjZW9wZW4gZXZlbnQgb24gdGhlIE1lZGlhU291cmNlXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVTb3VyY2VPcGVuXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVNvdXJjZU9wZW5fKCkge1xuICAgICAgLy8gT25seSBhdHRlbXB0IHRvIGNyZWF0ZSB0aGUgc291cmNlIGJ1ZmZlciBpZiBub25lIGFscmVhZHkgZXhpc3QuXG4gICAgICAvLyBoYW5kbGVTb3VyY2VPcGVuIGlzIGFsc28gY2FsbGVkIHdoZW4gd2UgYXJlIFwicmUtb3BlbmluZ1wiIGEgc291cmNlIGJ1ZmZlclxuICAgICAgLy8gYWZ0ZXIgYGVuZE9mU3RyZWFtYCBoYXMgYmVlbiBjYWxsZWQgKGluIHJlc3BvbnNlIHRvIGEgc2VlayBmb3IgaW5zdGFuY2UpXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnNldHVwU291cmNlQnVmZmVyc18oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdGYWlsZWQgdG8gY3JlYXRlIFNvdXJjZSBCdWZmZXJzJywgZSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhU291cmNlLmVuZE9mU3RyZWFtKCdkZWNvZGUnKTtcbiAgICAgIH0gLy8gaWYgYXV0b3BsYXkgaXMgZW5hYmxlZCwgYmVnaW4gcGxheWJhY2suIFRoaXMgaXMgZHVwbGljYXRpdmUgb2ZcbiAgICAgIC8vIGNvZGUgaW4gdmlkZW8uanMgYnV0IGlzIHJlcXVpcmVkIGJlY2F1c2UgcGxheSgpIG11c3QgYmUgaW52b2tlZFxuICAgICAgLy8gKmFmdGVyKiB0aGUgbWVkaWEgc291cmNlIGhhcyBvcGVuZWQuXG5cblxuICAgICAgaWYgKHRoaXMudGVjaF8uYXV0b3BsYXkoKSkge1xuICAgICAgICB2YXIgcGxheVByb21pc2UgPSB0aGlzLnRlY2hfLnBsYXkoKTsgLy8gQ2F0Y2gvc2lsZW5jZSBlcnJvciB3aGVuIGEgcGF1c2UgaW50ZXJydXB0cyBhIHBsYXkgcmVxdWVzdFxuICAgICAgICAvLyBvbiBicm93c2VycyB3aGljaCByZXR1cm4gYSBwcm9taXNlXG5cbiAgICAgICAgaWYgKHR5cGVvZiBwbGF5UHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBsYXlQcm9taXNlLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBwbGF5UHJvbWlzZS50aGVuKG51bGwsIGZ1bmN0aW9uIChlKSB7fSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy50cmlnZ2VyKCdzb3VyY2VvcGVuJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxzIGVuZE9mU3RyZWFtIG9uIHRoZSBtZWRpYSBzb3VyY2Ugd2hlbiBhbGwgYWN0aXZlIHN0cmVhbSB0eXBlcyBoYXZlIGNhbGxlZFxuICAgICAqIGVuZE9mU3RyZWFtXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyZWFtVHlwZVxuICAgICAqICAgICAgICBTdHJlYW0gdHlwZSBvZiB0aGUgc2VnbWVudCBsb2FkZXIgdGhhdCBjYWxsZWQgZW5kT2ZTdHJlYW1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvbkVuZE9mU3RyZWFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25FbmRPZlN0cmVhbSgpIHtcbiAgICAgIHZhciBpc0VuZE9mU3RyZWFtID0gdGhpcy5tYWluU2VnbWVudExvYWRlcl8uZW5kZWRfO1xuXG4gICAgICBpZiAodGhpcy5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgICAvLyBpZiB0aGUgYXVkaW8gcGxheWxpc3QgbG9hZGVyIGV4aXN0cywgdGhlbiBhbHRlcm5hdGUgYXVkaW8gaXMgYWN0aXZlXG4gICAgICAgIGlmICghdGhpcy5tYWluU2VnbWVudExvYWRlcl8uc3RhcnRpbmdNZWRpYV8gfHwgdGhpcy5tYWluU2VnbWVudExvYWRlcl8uc3RhcnRpbmdNZWRpYV8uY29udGFpbnNWaWRlbykge1xuICAgICAgICAgIC8vIGlmIHdlIGRvIG5vdCBrbm93IGlmIHRoZSBtYWluIHNlZ21lbnQgbG9hZGVyIGNvbnRhaW5zIHZpZGVvIHlldCBvciBpZiB3ZVxuICAgICAgICAgIC8vIGRlZmluaXRpdmVseSBrbm93IHRoZSBtYWluIHNlZ21lbnQgbG9hZGVyIGNvbnRhaW5zIHZpZGVvLCB0aGVuIHdlIG5lZWQgdG8gd2FpdFxuICAgICAgICAgIC8vIGZvciBib3RoIG1haW4gYW5kIGF1ZGlvIHNlZ21lbnQgbG9hZGVycyB0byBjYWxsIGVuZE9mU3RyZWFtXG4gICAgICAgICAgaXNFbmRPZlN0cmVhbSA9IGlzRW5kT2ZTdHJlYW0gJiYgdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLmVuZGVkXztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2UganVzdCByZWx5IG9uIHRoZSBhdWRpbyBsb2FkZXJcbiAgICAgICAgICBpc0VuZE9mU3RyZWFtID0gdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLmVuZGVkXztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWlzRW5kT2ZTdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZ2dlcl8oJ2NhbGxpbmcgbWVkaWFTb3VyY2UuZW5kT2ZTdHJlYW0oKScpOyAvLyBvbiBjaHJvbWUgY2FsbGluZyBlbmRPZlN0cmVhbSBjYW4gc29tZXRpbWVzIGNhdXNlIGFuIGV4Y2VwdGlvbixcbiAgICAgIC8vIGV2ZW4gd2hlbiB0aGUgbWVkaWEgc291cmNlIGlzIGluIGEgdmFsaWQgc3RhdGUuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMubWVkaWFTb3VyY2UuZW5kT2ZTdHJlYW0oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdGYWlsZWQgdG8gY2FsbCBtZWRpYSBzb3VyY2UgZW5kT2ZTdHJlYW0nLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBwbGF5bGlzdCBoYXMgc3RvcHBlZCBiZWluZyB1cGRhdGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IHRoZSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBwbGF5bGlzdCBoYXMgc3RvcHBlZCBiZWluZyB1cGRhdGVkIG9yIG5vdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzdHVja0F0UGxheWxpc3RFbmRfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3R1Y2tBdFBsYXlsaXN0RW5kXyhwbGF5bGlzdCkge1xuICAgICAgdmFyIHNlZWthYmxlJCQxID0gdGhpcy5zZWVrYWJsZSgpO1xuXG4gICAgICBpZiAoIXNlZWthYmxlJCQxLmxlbmd0aCkge1xuICAgICAgICAvLyBwbGF5bGlzdCBkb2Vzbid0IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIHdlIGFyZSBzdHVja1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBleHBpcmVkID0gdGhpcy5zeW5jQ29udHJvbGxlcl8uZ2V0RXhwaXJlZFRpbWUocGxheWxpc3QsIHRoaXMubWVkaWFTb3VyY2UuZHVyYXRpb24pO1xuXG4gICAgICBpZiAoZXhwaXJlZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIGRvZXMgbm90IHVzZSB0aGUgc2FmZSBsaXZlIGVuZCB0byBjYWxjdWxhdGUgcGxheWxpc3QgZW5kLCBzaW5jZSB3ZVxuICAgICAgLy8gZG9uJ3Qgd2FudCB0byBzYXkgd2UgYXJlIHN0dWNrIHdoaWxlIHRoZXJlIGlzIHN0aWxsIGNvbnRlbnRcblxuXG4gICAgICB2YXIgYWJzb2x1dGVQbGF5bGlzdEVuZCA9IEhscy5QbGF5bGlzdC5wbGF5bGlzdEVuZChwbGF5bGlzdCwgZXhwaXJlZCk7XG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hfLmJ1ZmZlcmVkKCk7XG5cbiAgICAgIGlmICghYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSBwbGF5aGVhZCByZWFjaGVkIHRoZSBhYnNvbHV0ZSBlbmQgb2YgdGhlIHBsYXlsaXN0XG4gICAgICAgIHJldHVybiBhYnNvbHV0ZVBsYXlsaXN0RW5kIC0gY3VycmVudFRpbWUgPD0gU0FGRV9USU1FX0RFTFRBO1xuICAgICAgfVxuXG4gICAgICB2YXIgYnVmZmVyZWRFbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSk7IC8vIHJldHVybiB0cnVlIGlmIHRoZXJlIGlzIHRvbyBsaXR0bGUgYnVmZmVyIGxlZnQgYW5kIGJ1ZmZlciBoYXMgcmVhY2hlZCBhYnNvbHV0ZVxuICAgICAgLy8gZW5kIG9mIHBsYXlsaXN0XG5cbiAgICAgIHJldHVybiBidWZmZXJlZEVuZCAtIGN1cnJlbnRUaW1lIDw9IFNBRkVfVElNRV9ERUxUQSAmJiBhYnNvbHV0ZVBsYXlsaXN0RW5kIC0gYnVmZmVyZWRFbmQgPD0gU0FGRV9USU1FX0RFTFRBO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCbGFja2xpc3RzIGEgcGxheWxpc3Qgd2hlbiBhbiBlcnJvciBvY2N1cnMgZm9yIGEgc2V0IGFtb3VudCBvZiB0aW1lXG4gICAgICogbWFraW5nIGl0IHVuYXZhaWxhYmxlIGZvciBzZWxlY3Rpb24gYnkgdGhlIHJlbmRpdGlvbiBzZWxlY3Rpb24gYWxnb3JpdGhtXG4gICAgICogYW5kIHRoZW4gZm9yY2VzIGEgbmV3IHBsYXlsaXN0IChyZW5kaXRpb24pIHNlbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZXJyb3IgYW4gb3B0aW9uYWwgZXJyb3IgdGhhdCBtYXkgaW5jbHVkZSB0aGUgcGxheWxpc3RcbiAgICAgKiB0byBibGFja2xpc3RcbiAgICAgKiBAcGFyYW0ge051bWJlcj19IGJsYWNrbGlzdER1cmF0aW9uIGFuIG9wdGlvbmFsIG51bWJlciBvZiBzZWNvbmRzIHRvIGJsYWNrbGlzdCB0aGVcbiAgICAgKiBwbGF5bGlzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdibGFja2xpc3RDdXJyZW50UGxheWxpc3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibGFja2xpc3RDdXJyZW50UGxheWxpc3QoKSB7XG4gICAgICB2YXIgZXJyb3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGJsYWNrbGlzdER1cmF0aW9uID0gYXJndW1lbnRzWzFdO1xuICAgICAgdmFyIGN1cnJlbnRQbGF5bGlzdCA9IHZvaWQgMDtcbiAgICAgIHZhciBuZXh0UGxheWxpc3QgPSB2b2lkIDA7IC8vIElmIHRoZSBgZXJyb3JgIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIHBsYXlsaXN0IGxvYWRlciwgaXQgd2lsbCBjb250YWluXG4gICAgICAvLyB0aGUgcGxheWxpc3Qgd2Ugd2VyZSB0cnlpbmcgdG8gbG9hZCAoYnV0IGZhaWxlZCkgYW5kIHRoYXQgc2hvdWxkIGJlXG4gICAgICAvLyBibGFja2xpc3RlZCBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcGxheWxpc3Qgd2hpY2ggaXMgbGlrZWx5XG4gICAgICAvLyBvdXQtb2YtZGF0ZSBpbiB0aGlzIHNjZW5hcmlvXG5cbiAgICAgIGN1cnJlbnRQbGF5bGlzdCA9IGVycm9yLnBsYXlsaXN0IHx8IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCk7XG4gICAgICBibGFja2xpc3REdXJhdGlvbiA9IGJsYWNrbGlzdER1cmF0aW9uIHx8IGVycm9yLmJsYWNrbGlzdER1cmF0aW9uIHx8IHRoaXMuYmxhY2tsaXN0RHVyYXRpb247IC8vIElmIHRoZXJlIGlzIG5vIGN1cnJlbnQgcGxheWxpc3QsIHRoZW4gYW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgd2Ugd2VyZVxuICAgICAgLy8gdHJ5aW5nIHRvIGxvYWQgdGhlIG1hc3RlciBPUiB3aGlsZSB3ZSB3ZXJlIGRpc3Bvc2luZyBvZiB0aGUgdGVjaFxuXG4gICAgICBpZiAoIWN1cnJlbnRQbGF5bGlzdCkge1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgnbmV0d29yaycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNGaW5hbFJlbmRpdGlvbiA9IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3Rlci5wbGF5bGlzdHMuZmlsdGVyKGlzRW5hYmxlZCkubGVuZ3RoID09PSAxO1xuICAgICAgdmFyIHBsYXlsaXN0cyA9IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3Rlci5wbGF5bGlzdHM7XG5cbiAgICAgIGlmIChwbGF5bGlzdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIE5ldmVyIGJsYWNrbGlzdGluZyB0aGlzIHBsYXlsaXN0IGJlY2F1c2UgaXQncyB0aGUgb25seSBwbGF5bGlzdFxuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ1Byb2JsZW0gZW5jb3VudGVyZWQgd2l0aCB0aGUgY3VycmVudCAnICsgJ0hMUyBwbGF5bGlzdC4gVHJ5aW5nIGFnYWluIHNpbmNlIGl0IGlzIHRoZSBvbmx5IHBsYXlsaXN0LicpO1xuICAgICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoJ3JldHJ5cGxheWxpc3QnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLmxvYWQoaXNGaW5hbFJlbmRpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgICAgIC8vIFNpbmNlIHdlJ3JlIG9uIHRoZSBmaW5hbCBub24tYmxhY2tsaXN0ZWQgcGxheWxpc3QsIGFuZCB3ZSdyZSBhYm91dCB0byBibGFja2xpc3RcbiAgICAgICAgLy8gaXQsIGluc3RlYWQgb2YgZXJyaW5nIHRoZSBwbGF5ZXIgb3IgcmV0cnlpbmcgdGhpcyBwbGF5bGlzdCwgY2xlYXIgb3V0IHRoZSBjdXJyZW50XG4gICAgICAgIC8vIGJsYWNrbGlzdC4gVGhpcyBhbGxvd3Mgb3RoZXIgcGxheWxpc3RzIHRvIGJlIGF0dGVtcHRlZCBpbiBjYXNlIGFueSBoYXZlIGJlZW5cbiAgICAgICAgLy8gZml4ZWQuXG4gICAgICAgIHZpZGVvanMkMS5sb2cud2FybignUmVtb3ZpbmcgYWxsIHBsYXlsaXN0cyBmcm9tIHRoZSBibGFja2xpc3QgYmVjYXVzZSB0aGUgbGFzdCAnICsgJ3JlbmRpdGlvbiBpcyBhYm91dCB0byBiZSBibGFja2xpc3RlZC4nKTtcbiAgICAgICAgcGxheWxpc3RzLmZvckVhY2goZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgICAgICAgaWYgKHBsYXlsaXN0LmV4Y2x1ZGVVbnRpbCAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwbGF5bGlzdC5leGNsdWRlVW50aWw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgLy8gVGVjaG5pY2FsbHkgd2UgYXJlIHJldHJ5aW5nIGEgcGxheWxpc3QsIGluIHRoYXQgd2UgYXJlIHNpbXBseSByZXRyeWluZyBhIHByZXZpb3VzXG4gICAgICAgIC8vIHBsYXlsaXN0LiBUaGlzIGlzIG5lZWRlZCBmb3IgdXNlcnMgcmVseWluZyBvbiB0aGUgcmV0cnlwbGF5bGlzdCBldmVudCB0byBjYXRjaCBhXG4gICAgICAgIC8vIGNhc2Ugd2hlcmUgdGhlIHBsYXllciBtaWdodCBiZSBzdHVjayBhbmQgbG9vcGluZyB0aHJvdWdoIFwiZGVhZFwiIHBsYXlsaXN0cy5cblxuICAgICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoJ3JldHJ5cGxheWxpc3QnKTtcbiAgICAgIH0gLy8gQmxhY2tsaXN0IHRoaXMgcGxheWxpc3RcblxuXG4gICAgICBjdXJyZW50UGxheWxpc3QuZXhjbHVkZVVudGlsID0gRGF0ZS5ub3coKSArIGJsYWNrbGlzdER1cmF0aW9uICogMTAwMDtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcignYmxhY2tsaXN0cGxheWxpc3QnKTtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICdobHMtcmVuZGl0aW9uLWJsYWNrbGlzdGVkJ1xuICAgICAgfSk7IC8vIFNlbGVjdCBhIG5ldyBwbGF5bGlzdFxuXG4gICAgICBuZXh0UGxheWxpc3QgPSB0aGlzLnNlbGVjdFBsYXlsaXN0KCk7XG4gICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ1Byb2JsZW0gZW5jb3VudGVyZWQgd2l0aCB0aGUgY3VycmVudCBITFMgcGxheWxpc3QuJyArIChlcnJvci5tZXNzYWdlID8gJyAnICsgZXJyb3IubWVzc2FnZSA6ICcnKSArICcgU3dpdGNoaW5nIHRvIGFub3RoZXIgcGxheWxpc3QuJyk7XG4gICAgICByZXR1cm4gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEobmV4dFBsYXlsaXN0LCBpc0ZpbmFsUmVuZGl0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGF1c2UgYWxsIHNlZ21lbnQgbG9hZGVyc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwYXVzZUxvYWRpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZUxvYWRpbmcoKSB7XG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5wYXVzZSgpO1xuXG4gICAgICBpZiAodGhpcy5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgICB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8ucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWVkaWFUeXBlc18uU1VCVElUTEVTLmFjdGl2ZVBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVTZWdtZW50TG9hZGVyXy5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIGN1cnJlbnQgdGltZSBvbiBhbGwgc2VnbWVudCBsb2FkZXJzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1RpbWVSYW5nZX0gY3VycmVudFRpbWUgdGhlIGN1cnJlbnQgdGltZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9IHRoZSBjdXJyZW50IHRpbWVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDdXJyZW50VGltZShjdXJyZW50VGltZSkge1xuICAgICAgdmFyIGJ1ZmZlcmVkID0gZmluZFJhbmdlKHRoaXMudGVjaF8uYnVmZmVyZWQoKSwgY3VycmVudFRpbWUpO1xuXG4gICAgICBpZiAoISh0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXyAmJiB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpKSkge1xuICAgICAgICAvLyByZXR1cm4gaW1tZWRpYXRlbHkgaWYgdGhlIG1ldGFkYXRhIGlzIG5vdCByZWFkeSB5ZXRcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IC8vIGl0J3MgY2xlYXJseSBhbiBlZGdlLWNhc2UgYnV0IGRvbid0IHRocm93biBhbiBlcnJvciBpZiBhc2tlZCB0b1xuICAgICAgLy8gc2VlayB3aXRoaW4gYW4gZW1wdHkgcGxheWxpc3RcblxuXG4gICAgICBpZiAoIXRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkuc2VnbWVudHMpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IC8vIEluIGZsYXNoIHBsYXliYWNrLCB0aGUgc2VnbWVudCBsb2FkZXJzIHNob3VsZCBiZSByZXNldCBvbiBldmVyeSBzZWVrLCBldmVuXG4gICAgICAvLyBpbiBidWZmZXIgc2Vla3MuIElmIHRoZSBzZWVrIGxvY2F0aW9uIGlzIGFscmVhZHkgYnVmZmVyZWQsIGNvbnRpbnVlIGJ1ZmZlcmluZyBhc1xuICAgICAgLy8gdXN1YWxcbiAgICAgIC8vIFRPRE86IHJlZG8gdGhpcyBjb21tZW50XG5cblxuICAgICAgaWYgKGJ1ZmZlcmVkICYmIGJ1ZmZlcmVkLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgICB9IC8vIGNhbmNlbCBvdXRzdGFuZGluZyByZXF1ZXN0cyBzbyB3ZSBiZWdpbiBidWZmZXJpbmcgYXQgdGhlIG5ld1xuICAgICAgLy8gbG9jYXRpb25cblxuXG4gICAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLmFib3J0KCk7XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICAgICAgdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLlNVQlRJVExFUy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgICB0aGlzLnN1YnRpdGxlU2VnbWVudExvYWRlcl8ucmVzZXRFdmVyeXRoaW5nKCk7XG4gICAgICAgIHRoaXMuc3VidGl0bGVTZWdtZW50TG9hZGVyXy5hYm9ydCgpO1xuICAgICAgfSAvLyBzdGFydCBzZWdtZW50IGxvYWRlciBsb2FkaW5nIGluIGNhc2UgdGhleSBhcmUgcGF1c2VkXG5cblxuICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgY3VycmVudCBkdXJhdGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7VGltZVJhbmdlfSB0aGUgZHVyYXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkdXJhdGlvbiQkMSgpIHtcbiAgICAgIGlmICghdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8pIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhU291cmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhU291cmNlLmR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gSGxzLlBsYXlsaXN0LmR1cmF0aW9uKHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjaGVjayB0aGUgc2Vla2FibGUgcmFuZ2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1RpbWVSYW5nZX0gdGhlIHNlZWthYmxlIHJhbmdlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NlZWthYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla2FibGUkJDEoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWVrYWJsZV87XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25TeW5jSW5mb1VwZGF0ZV8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblN5bmNJbmZvVXBkYXRlXygpIHtcbiAgICAgIHZhciBtYWluU2Vla2FibGUgPSB2b2lkIDA7XG4gICAgICB2YXIgYXVkaW9TZWVrYWJsZSA9IHZvaWQgMDtcblxuICAgICAgaWYgKCF0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCk7XG5cbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXhwaXJlZCA9IHRoaXMuc3luY0NvbnRyb2xsZXJfLmdldEV4cGlyZWRUaW1lKG1lZGlhLCB0aGlzLm1lZGlhU291cmNlLmR1cmF0aW9uKTtcblxuICAgICAgaWYgKGV4cGlyZWQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gbm90IGVub3VnaCBpbmZvcm1hdGlvbiB0byB1cGRhdGUgc2Vla2FibGVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYWluU2Vla2FibGUgPSBIbHMuUGxheWxpc3Quc2Vla2FibGUobWVkaWEsIGV4cGlyZWQpO1xuXG4gICAgICBpZiAobWFpblNlZWthYmxlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAgIG1lZGlhID0gdGhpcy5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlci5tZWRpYSgpO1xuICAgICAgICBleHBpcmVkID0gdGhpcy5zeW5jQ29udHJvbGxlcl8uZ2V0RXhwaXJlZFRpbWUobWVkaWEsIHRoaXMubWVkaWFTb3VyY2UuZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChleHBpcmVkID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXVkaW9TZWVrYWJsZSA9IEhscy5QbGF5bGlzdC5zZWVrYWJsZShtZWRpYSwgZXhwaXJlZCk7XG5cbiAgICAgICAgaWYgKGF1ZGlvU2Vla2FibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGRFbmQgPSB2b2lkIDA7XG4gICAgICB2YXIgb2xkU3RhcnQgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh0aGlzLnNlZWthYmxlXyAmJiB0aGlzLnNlZWthYmxlXy5sZW5ndGgpIHtcbiAgICAgICAgb2xkRW5kID0gdGhpcy5zZWVrYWJsZV8uZW5kKDApO1xuICAgICAgICBvbGRTdGFydCA9IHRoaXMuc2Vla2FibGVfLnN0YXJ0KDApO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWF1ZGlvU2Vla2FibGUpIHtcbiAgICAgICAgLy8gc2Vla2FibGUgaGFzIGJlZW4gY2FsY3VsYXRlZCBiYXNlZCBvbiBidWZmZXJpbmcgdmlkZW8gZGF0YSBzbyBpdFxuICAgICAgICAvLyBjYW4gYmUgcmV0dXJuZWQgZGlyZWN0bHlcbiAgICAgICAgdGhpcy5zZWVrYWJsZV8gPSBtYWluU2Vla2FibGU7XG4gICAgICB9IGVsc2UgaWYgKGF1ZGlvU2Vla2FibGUuc3RhcnQoMCkgPiBtYWluU2Vla2FibGUuZW5kKDApIHx8IG1haW5TZWVrYWJsZS5zdGFydCgwKSA+IGF1ZGlvU2Vla2FibGUuZW5kKDApKSB7XG4gICAgICAgIC8vIHNlZWthYmxlcyBhcmUgcHJldHR5IGZhciBvZmYsIHJlbHkgb24gbWFpblxuICAgICAgICB0aGlzLnNlZWthYmxlXyA9IG1haW5TZWVrYWJsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Vla2FibGVfID0gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoW1thdWRpb1NlZWthYmxlLnN0YXJ0KDApID4gbWFpblNlZWthYmxlLnN0YXJ0KDApID8gYXVkaW9TZWVrYWJsZS5zdGFydCgwKSA6IG1haW5TZWVrYWJsZS5zdGFydCgwKSwgYXVkaW9TZWVrYWJsZS5lbmQoMCkgPCBtYWluU2Vla2FibGUuZW5kKDApID8gYXVkaW9TZWVrYWJsZS5lbmQoMCkgOiBtYWluU2Vla2FibGUuZW5kKDApXV0pO1xuICAgICAgfSAvLyBzZWVrYWJsZSBpcyB0aGUgc2FtZSBhcyBsYXN0IHRpbWVcblxuXG4gICAgICBpZiAodGhpcy5zZWVrYWJsZV8gJiYgdGhpcy5zZWVrYWJsZV8ubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlZWthYmxlXy5lbmQoMCkgPT09IG9sZEVuZCAmJiB0aGlzLnNlZWthYmxlXy5zdGFydCgwKSA9PT0gb2xkU3RhcnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2dnZXJfKCdzZWVrYWJsZSB1cGRhdGVkIFsnICsgcHJpbnRhYmxlUmFuZ2UodGhpcy5zZWVrYWJsZV8pICsgJ10nKTtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcignc2Vla2FibGVjaGFuZ2VkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcGxheWVyIGR1cmF0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUR1cmF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRHVyYXRpb24oKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIG9sZER1cmF0aW9uID0gdGhpcy5tZWRpYVNvdXJjZS5kdXJhdGlvbjtcbiAgICAgIHZhciBuZXdEdXJhdGlvbiA9IEhscy5QbGF5bGlzdC5kdXJhdGlvbih0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpKTtcbiAgICAgIHZhciBidWZmZXJlZCA9IHRoaXMudGVjaF8uYnVmZmVyZWQoKTtcblxuICAgICAgdmFyIHNldER1cmF0aW9uID0gZnVuY3Rpb24gc2V0RHVyYXRpb24oKSB7XG4gICAgICAgIC8vIG9uIGZpcmVmb3ggc2V0dGluZyB0aGUgZHVyYXRpb24gbWF5IHNvbWV0aW1lcyBjYXVzZSBhbiBleGNlcHRpb25cbiAgICAgICAgLy8gZXZlbiBpZiB0aGUgbWVkaWEgc291cmNlIGlzIG9wZW4gYW5kIHNvdXJjZSBidWZmZXJzIGFyZSBub3RcbiAgICAgICAgLy8gdXBkYXRpbmcsIHNvbWV0aGluZyBhYm91dCB0aGUgbWVkaWEgc291cmNlIGJlaW5nIGluIGFuIGludmFsaWQgc3RhdGUuXG4gICAgICAgIF90aGlzNi5sb2dnZXJfKCdTZXR0aW5nIGR1cmF0aW9uIGZyb20gJyArIF90aGlzNi5tZWRpYVNvdXJjZS5kdXJhdGlvbiArICcgPT4gJyArIG5ld0R1cmF0aW9uKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIF90aGlzNi5tZWRpYVNvdXJjZS5kdXJhdGlvbiA9IG5ld0R1cmF0aW9uO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdGYWlsZWQgdG8gc2V0IG1lZGlhIHNvdXJjZSBkdXJhdGlvbicsIGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM2LnRlY2hfLnRyaWdnZXIoJ2R1cmF0aW9uY2hhbmdlJyk7XG5cbiAgICAgICAgX3RoaXM2Lm1lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCBzZXREdXJhdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBpZiAoYnVmZmVyZWQubGVuZ3RoID4gMCkge1xuICAgICAgICBuZXdEdXJhdGlvbiA9IE1hdGgubWF4KG5ld0R1cmF0aW9uLCBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSkpO1xuICAgICAgfSAvLyBpZiB0aGUgZHVyYXRpb24gaGFzIGNoYW5nZWQsIGludmFsaWRhdGUgdGhlIGNhY2hlZCB2YWx1ZVxuXG5cbiAgICAgIGlmIChvbGREdXJhdGlvbiAhPT0gbmV3RHVyYXRpb24pIHtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBkdXJhdGlvblxuICAgICAgICBpZiAodGhpcy5tZWRpYVNvdXJjZS5yZWFkeVN0YXRlICE9PSAnb3BlbicpIHtcbiAgICAgICAgICB0aGlzLm1lZGlhU291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCBzZXREdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0RHVyYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBkaXNwb3NlIG9mIHRoZSBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIgYW5kIGV2ZXJ5dGhpbmdcbiAgICAgKiB0aGF0IGl0IGNvbnRyb2xzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rpc3Bvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZGVjcnlwdGVyXy50ZXJtaW5hdGUoKTtcbiAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLmRpc3Bvc2UoKTtcbiAgICAgIFsnQVVESU8nLCAnU1VCVElUTEVTJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gX3RoaXM3Lm1lZGlhVHlwZXNfW3R5cGVdLmdyb3VwcztcblxuICAgICAgICBmb3IgKHZhciBpZCBpbiBncm91cHMpIHtcbiAgICAgICAgICBncm91cHNbaWRdLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICBpZiAoZ3JvdXAucGxheWxpc3RMb2FkZXIpIHtcbiAgICAgICAgICAgICAgZ3JvdXAucGxheWxpc3RMb2FkZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnN1YnRpdGxlU2VnbWVudExvYWRlcl8uZGlzcG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIG1hc3RlciBwbGF5bGlzdCBvYmplY3QgaWYgd2UgaGF2ZSBvbmVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIG1hc3RlciBwbGF5bGlzdCBvYmplY3QgdGhhdCB3ZSBwYXJzZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWFzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFzdGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcGxheWxpc3RcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBwbGF5bGlzdCBvYmplY3QgdGhhdCB3ZSBwYXJzZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWVkaWEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZWRpYSgpIHtcbiAgICAgIC8vIHBsYXlsaXN0IGxvYWRlciB3aWxsIG5vdCByZXR1cm4gbWVkaWEgaWYgaXQgaGFzIG5vdCBiZWVuIGZ1bGx5IGxvYWRlZFxuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkgfHwgdGhpcy5pbml0aWFsTWVkaWFfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBzZXR1cCBvdXIgaW50ZXJuYWwgc291cmNlIGJ1ZmZlcnMgb24gb3VyIHNlZ21lbnQgTG9hZGVyc1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2V0dXBTb3VyY2VCdWZmZXJzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwU291cmNlQnVmZmVyc18oKSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpO1xuICAgICAgdmFyIG1pbWVUeXBlcyA9IHZvaWQgMDsgLy8gd2FpdCB1bnRpbCBhIG1lZGlhIHBsYXlsaXN0IGlzIGF2YWlsYWJsZSBhbmQgdGhlIE1lZGlhIFNvdXJjZSBpc1xuICAgICAgLy8gYXR0YWNoZWRcblxuICAgICAgaWYgKCFtZWRpYSB8fCB0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1pbWVUeXBlcyA9IG1pbWVUeXBlc0ZvclBsYXlsaXN0KHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlciwgbWVkaWEpO1xuXG4gICAgICBpZiAobWltZVR5cGVzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9ICdObyBjb21wYXRpYmxlIFNvdXJjZUJ1ZmZlciBjb25maWd1cmF0aW9uIGZvciB0aGUgdmFyaWFudCBzdHJlYW06JyArIG1lZGlhLnJlc29sdmVkVXJpO1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgnZGVjb2RlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29uZmlndXJlTG9hZGVyTWltZVR5cGVzXyhtaW1lVHlwZXMpOyAvLyBleGNsdWRlIGFueSBpbmNvbXBhdGlibGUgdmFyaWFudCBzdHJlYW1zIGZyb20gZnV0dXJlIHBsYXlsaXN0XG4gICAgICAvLyBzZWxlY3Rpb25cblxuICAgICAgdGhpcy5leGNsdWRlSW5jb21wYXRpYmxlVmFyaWFudHNfKG1lZGlhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb25maWd1cmVMb2FkZXJNaW1lVHlwZXNfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uZmlndXJlTG9hZGVyTWltZVR5cGVzXyhtaW1lVHlwZXMpIHtcbiAgICAgIC8vIElmIHRoZSBjb250ZW50IGlzIGRlbXV4ZWQsIHdlIGNhbid0IHN0YXJ0IGFwcGVuZGluZyBzZWdtZW50cyB0byBhIHNvdXJjZSBidWZmZXJcbiAgICAgIC8vIHVudGlsIGJvdGggc291cmNlIGJ1ZmZlcnMgYXJlIHNldCB1cCwgb3IgZWxzZSB0aGUgYnJvd3NlciBtYXkgbm90IGxldCB1cyBhZGQgdGhlXG4gICAgICAvLyBzZWNvbmQgc291cmNlIGJ1ZmZlciAoaXQgd2lsbCBhc3N1bWUgd2UgYXJlIHBsYXlpbmcgZWl0aGVyIGF1ZGlvIG9ubHkgb3IgdmlkZW9cbiAgICAgIC8vIG9ubHkpLlxuICAgICAgdmFyIHNvdXJjZUJ1ZmZlckVtaXR0ZXIgPSAvLyBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIG1pbWUgdHlwZVxuICAgICAgbWltZVR5cGVzLmxlbmd0aCA+IDEgJiYgLy8gYW5kIHRoZSBmaXJzdCBtaW1lIHR5cGUgZG9lcyBub3QgaGF2ZSBtdXhlZCB2aWRlbyBhbmQgYXVkaW9cbiAgICAgIG1pbWVUeXBlc1swXS5pbmRleE9mKCcsJykgPT09IC0xICYmIC8vIGFuZCB0aGUgdHdvIG1pbWUgdHlwZXMgYXJlIGRpZmZlcmVudCAodGhleSBjYW4gYmUgdGhlIHNhbWUgaW4gdGhlIGNhc2Ugb2YgYXVkaW9cbiAgICAgIC8vIG9ubHkgd2l0aCBhbHRlcm5hdGUgYXVkaW8pXG4gICAgICBtaW1lVHlwZXNbMF0gIT09IG1pbWVUeXBlc1sxXSA/IC8vIHRoZW4gd2Ugd2FudCB0byB3YWl0IG9uIHRoZSBzZWNvbmQgc291cmNlIGJ1ZmZlclxuICAgICAgbmV3IHZpZGVvanMkMS5FdmVudFRhcmdldCgpIDogLy8gb3RoZXJ3aXNlIHRoZXJlIGlzIG5vIG5lZWQgdG8gd2FpdCBhcyB0aGUgY29udGVudCBpcyBlaXRoZXIgYXVkaW8gb25seSxcbiAgICAgIC8vIHZpZGVvIG9ubHksIG9yIG11eGVkIGNvbnRlbnQuXG4gICAgICBudWxsO1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ubWltZVR5cGUobWltZVR5cGVzWzBdLCBzb3VyY2VCdWZmZXJFbWl0dGVyKTtcblxuICAgICAgaWYgKG1pbWVUeXBlc1sxXSkge1xuICAgICAgICB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8ubWltZVR5cGUobWltZVR5cGVzWzFdLCBzb3VyY2VCdWZmZXJFbWl0dGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQmxhY2tsaXN0cyBwbGF5bGlzdHMgd2l0aCBjb2RlY3MgdGhhdCBhcmUgdW5zdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2V4Y2x1ZGVVbnN1cHBvcnRlZFZhcmlhbnRzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4Y2x1ZGVVbnN1cHBvcnRlZFZhcmlhbnRzXygpIHtcbiAgICAgIHRoaXMubWFzdGVyKCkucGxheWxpc3RzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQuYXR0cmlidXRlcy5DT0RFQ1MgJiYgd2luZG93JDEuTWVkaWFTb3VyY2UgJiYgd2luZG93JDEuTWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkICYmICF3aW5kb3ckMS5NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ3ZpZGVvL21wNDsgY29kZWNzPVwiJyArIG1hcExlZ2FjeUF2Y0NvZGVjcyh2YXJpYW50LmF0dHJpYnV0ZXMuQ09ERUNTKSArICdcIicpKSB7XG4gICAgICAgICAgdmFyaWFudC5leGNsdWRlVW50aWwgPSBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJsYWNrbGlzdCBwbGF5bGlzdHMgdGhhdCBhcmUga25vd24gdG8gYmUgY29kZWMgb3JcbiAgICAgKiBzdHJlYW0taW5jb21wYXRpYmxlIHdpdGggdGhlIFNvdXJjZUJ1ZmZlciBjb25maWd1cmF0aW9uLiBGb3JcbiAgICAgKiBpbnN0YW5jZSwgTWVkaWEgU291cmNlIEV4dGVuc2lvbnMgd291bGQgY2F1c2UgdGhlIHZpZGVvIGVsZW1lbnQgdG9cbiAgICAgKiBzdGFsbCB3YWl0aW5nIGZvciB2aWRlbyBkYXRhIGlmIHlvdSBzd2l0Y2hlZCBmcm9tIGEgdmFyaWFudCB3aXRoXG4gICAgICogdmlkZW8gYW5kIGF1ZGlvIHRvIGFuIGF1ZGlvLW9ubHkgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1lZGlhIGEgbWVkaWEgcGxheWxpc3QgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50XG4gICAgICogc2V0IG9mIFNvdXJjZUJ1ZmZlcnMuIFZhcmlhbnRzIGluIHRoZSBjdXJyZW50IG1hc3RlciBwbGF5bGlzdCB0aGF0XG4gICAgICogZG8gbm90IGFwcGVhciB0byBoYXZlIGNvbXBhdGlibGUgY29kZWMgb3Igc3RyZWFtIGNvbmZpZ3VyYXRpb25zXG4gICAgICogd2lsbCBiZSBleGNsdWRlZCBmcm9tIHRoZSBkZWZhdWx0IHBsYXlsaXN0IHNlbGVjdGlvbiBhbGdvcml0aG1cbiAgICAgKiBpbmRlZmluaXRlbHkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZXhjbHVkZUluY29tcGF0aWJsZVZhcmlhbnRzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4Y2x1ZGVJbmNvbXBhdGlibGVWYXJpYW50c18obWVkaWEpIHtcbiAgICAgIHZhciBjb2RlY0NvdW50ID0gMjtcbiAgICAgIHZhciB2aWRlb0NvZGVjID0gbnVsbDtcbiAgICAgIHZhciBjb2RlY3MgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChtZWRpYS5hdHRyaWJ1dGVzLkNPREVDUykge1xuICAgICAgICBjb2RlY3MgPSBwYXJzZUNvZGVjcyhtZWRpYS5hdHRyaWJ1dGVzLkNPREVDUyk7XG4gICAgICAgIHZpZGVvQ29kZWMgPSBjb2RlY3MudmlkZW9Db2RlYztcbiAgICAgICAgY29kZWNDb3VudCA9IGNvZGVjcy5jb2RlY0NvdW50O1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1hc3RlcigpLnBsYXlsaXN0cy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgIHZhciB2YXJpYW50Q29kZWNzID0ge1xuICAgICAgICAgIGNvZGVjQ291bnQ6IDIsXG4gICAgICAgICAgdmlkZW9Db2RlYzogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh2YXJpYW50LmF0dHJpYnV0ZXMuQ09ERUNTKSB7XG4gICAgICAgICAgdmFyaWFudENvZGVjcyA9IHBhcnNlQ29kZWNzKHZhcmlhbnQuYXR0cmlidXRlcy5DT0RFQ1MpO1xuICAgICAgICB9IC8vIGlmIHRoZSBzdHJlYW1zIGRpZmZlciBpbiB0aGUgcHJlc2VuY2Ugb3IgYWJzZW5jZSBvZiBhdWRpbyBvclxuICAgICAgICAvLyB2aWRlbywgdGhleSBhcmUgaW5jb21wYXRpYmxlXG5cblxuICAgICAgICBpZiAodmFyaWFudENvZGVjcy5jb2RlY0NvdW50ICE9PSBjb2RlY0NvdW50KSB7XG4gICAgICAgICAgdmFyaWFudC5leGNsdWRlVW50aWwgPSBJbmZpbml0eTtcbiAgICAgICAgfSAvLyBpZiBoLjI2NCBpcyBzcGVjaWZpZWQgb24gdGhlIGN1cnJlbnQgcGxheWxpc3QsIHNvbWUgZmxhdm9yIG9mXG4gICAgICAgIC8vIGl0IG11c3QgYmUgc3BlY2lmaWVkIG9uIGFsbCBjb21wYXRpYmxlIHZhcmlhbnRzXG5cblxuICAgICAgICBpZiAodmFyaWFudENvZGVjcy52aWRlb0NvZGVjICE9PSB2aWRlb0NvZGVjKSB7XG4gICAgICAgICAgdmFyaWFudC5leGNsdWRlVW50aWwgPSBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlQWRDdWVzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUFkQ3Vlc18obWVkaWEpIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgdmFyIHNlZWthYmxlJCQxID0gdGhpcy5zZWVrYWJsZSgpO1xuXG4gICAgICBpZiAoc2Vla2FibGUkJDEubGVuZ3RoKSB7XG4gICAgICAgIG9mZnNldCA9IHNlZWthYmxlJCQxLnN0YXJ0KDApO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVBZEN1ZXMobWVkaWEsIHRoaXMuY3VlVGFnc1RyYWNrXywgb2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZGVzaXJlZCBmb3J3YXJkIGJ1ZmZlciBsZW5ndGggYmFzZWQgb24gY3VycmVudCB0aW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IERlc2lyZWQgZm9yd2FyZCBidWZmZXIgbGVuZ3RoIGluIHNlY29uZHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ29hbEJ1ZmZlckxlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdvYWxCdWZmZXJMZW5ndGgoKSB7XG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgICB2YXIgaW5pdGlhbCA9IENvbmZpZy5HT0FMX0JVRkZFUl9MRU5HVEg7XG4gICAgICB2YXIgcmF0ZSA9IENvbmZpZy5HT0FMX0JVRkZFUl9MRU5HVEhfUkFURTtcbiAgICAgIHZhciBtYXggPSBNYXRoLm1heChpbml0aWFsLCBDb25maWcuTUFYX0dPQUxfQlVGRkVSX0xFTkdUSCk7XG4gICAgICByZXR1cm4gTWF0aC5taW4oaW5pdGlhbCArIGN1cnJlbnRUaW1lICogcmF0ZSwgbWF4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZGVzaXJlZCBidWZmZXIgbG93IHdhdGVyIGxpbmUgYmFzZWQgb24gY3VycmVudCB0aW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IERlc2lyZWQgYnVmZmVyIGxvdyB3YXRlciBsaW5lIGluIHNlY29uZHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYnVmZmVyTG93V2F0ZXJMaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVmZmVyTG93V2F0ZXJMaW5lKCkge1xuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgdmFyIGluaXRpYWwgPSBDb25maWcuQlVGRkVSX0xPV19XQVRFUl9MSU5FO1xuICAgICAgdmFyIHJhdGUgPSBDb25maWcuQlVGRkVSX0xPV19XQVRFUl9MSU5FX1JBVEU7XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXgoaW5pdGlhbCwgQ29uZmlnLk1BWF9CVUZGRVJfTE9XX1dBVEVSX0xJTkUpO1xuICAgICAgcmV0dXJuIE1hdGgubWluKGluaXRpYWwgKyBjdXJyZW50VGltZSAqIHJhdGUsIG1heCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXI7XG59KHZpZGVvanMkMS5FdmVudFRhcmdldCk7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjdHMgYXMgdGhlIEVuYWJsZS9kaXNhYmxlIHBsYXlsaXN0IGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7UGxheWxpc3RMb2FkZXJ9IGxvYWRlciAtIFRoZSBtYXN0ZXIgcGxheWxpc3QgbG9hZGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxheWxpc3RVcmkgLSB1cmkgb2YgdGhlIHBsYXlsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFuZ2VQbGF5bGlzdEZuIC0gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgYVxuICogcGxheWxpc3QncyBlbmFibGVkLXN0YXRlIGhhcyBiZWVuIGNoYW5nZWQuIFdpbGwgTk9UIGJlIGNhbGxlZCBpZiBhXG4gKiBwbGF5bGlzdCdzIGVuYWJsZWQtc3RhdGUgaXMgdW5jaGFuZ2VkXG4gKiBAcGFyYW0ge0Jvb2xlYW49fSBlbmFibGUgLSBWYWx1ZSB0byBzZXQgdGhlIHBsYXlsaXN0IGVuYWJsZWQtc3RhdGUgdG9cbiAqIG9yIGlmIHVuZGVmaW5lZCByZXR1cm5zIHRoZSBjdXJyZW50IGVuYWJsZWQtc3RhdGUgZm9yIHRoZSBwbGF5bGlzdFxuICogQHJldHVybiB7RnVuY3Rpb259IEZ1bmN0aW9uIGZvciBzZXR0aW5nL2dldHRpbmcgZW5hYmxlZFxuICovXG5cblxudmFyIGVuYWJsZUZ1bmN0aW9uID0gZnVuY3Rpb24gZW5hYmxlRnVuY3Rpb24obG9hZGVyLCBwbGF5bGlzdFVyaSwgY2hhbmdlUGxheWxpc3RGbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGVuYWJsZSkge1xuICAgIHZhciBwbGF5bGlzdCA9IGxvYWRlci5tYXN0ZXIucGxheWxpc3RzW3BsYXlsaXN0VXJpXTtcbiAgICB2YXIgaW5jb21wYXRpYmxlID0gaXNJbmNvbXBhdGlibGUocGxheWxpc3QpO1xuICAgIHZhciBjdXJyZW50bHlFbmFibGVkID0gaXNFbmFibGVkKHBsYXlsaXN0KTtcblxuICAgIGlmICh0eXBlb2YgZW5hYmxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZSkge1xuICAgICAgZGVsZXRlIHBsYXlsaXN0LmRpc2FibGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF5bGlzdC5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZSAhPT0gY3VycmVudGx5RW5hYmxlZCAmJiAhaW5jb21wYXRpYmxlKSB7XG4gICAgICAvLyBFbnN1cmUgdGhlIG91dHNpZGUgd29ybGQga25vd3MgYWJvdXQgb3VyIGNoYW5nZXNcbiAgICAgIGNoYW5nZVBsYXlsaXN0Rm4oKTtcblxuICAgICAgaWYgKGVuYWJsZSkge1xuICAgICAgICBsb2FkZXIudHJpZ2dlcigncmVuZGl0aW9uZW5hYmxlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyLnRyaWdnZXIoJ3JlbmRpdGlvbmRpc2FibGVkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuYWJsZTtcbiAgfTtcbn07XG4vKipcbiAqIFRoZSByZXByZXNlbnRhdGlvbiBvYmplY3QgZW5jYXBzdWxhdGVzIHRoZSBwdWJsaWNseSB2aXNpYmxlIGluZm9ybWF0aW9uXG4gKiBpbiBhIG1lZGlhIHBsYXlsaXN0IGFsb25nIHdpdGggYSBzZXR0ZXIvZ2V0dGVyLXR5cGUgZnVuY3Rpb24gKGVuYWJsZWQpXG4gKiBmb3IgY2hhbmdpbmcgdGhlIGVuYWJsZWQtc3RhdGUgb2YgYSBwYXJ0aWN1bGFyIHBsYXlsaXN0IGVudHJ5XG4gKlxuICogQGNsYXNzIFJlcHJlc2VudGF0aW9uXG4gKi9cblxuXG52YXIgUmVwcmVzZW50YXRpb24gPSBmdW5jdGlvbiBSZXByZXNlbnRhdGlvbihobHNIYW5kbGVyLCBwbGF5bGlzdCwgaWQpIHtcbiAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVwcmVzZW50YXRpb24pO1xuICB2YXIgbXBjID0gaGxzSGFuZGxlci5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLFxuICAgICAgc21vb3RoUXVhbGl0eUNoYW5nZSA9IGhsc0hhbmRsZXIub3B0aW9uc18uc21vb3RoUXVhbGl0eUNoYW5nZTsgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIGEgYm91bmQgdmVyc2lvbiBvZiB0aGUgcXVhbGl0eSBjaGFuZ2UgZnVuY3Rpb25cblxuICB2YXIgY2hhbmdlVHlwZSA9IHNtb290aFF1YWxpdHlDaGFuZ2UgPyAnc21vb3RoJyA6ICdmYXN0JztcbiAgdmFyIHF1YWxpdHlDaGFuZ2VGdW5jdGlvbiA9IG1wY1tjaGFuZ2VUeXBlICsgJ1F1YWxpdHlDaGFuZ2VfJ10uYmluZChtcGMpOyAvLyBzb21lIHBsYXlsaXN0IGF0dHJpYnV0ZXMgYXJlIG9wdGlvbmFsXG5cbiAgaWYgKHBsYXlsaXN0LmF0dHJpYnV0ZXMuUkVTT0xVVElPTikge1xuICAgIHZhciByZXNvbHV0aW9uID0gcGxheWxpc3QuYXR0cmlidXRlcy5SRVNPTFVUSU9OO1xuICAgIHRoaXMud2lkdGggPSByZXNvbHV0aW9uLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gcmVzb2x1dGlvbi5oZWlnaHQ7XG4gIH1cblxuICB0aGlzLmJhbmR3aWR0aCA9IHBsYXlsaXN0LmF0dHJpYnV0ZXMuQkFORFdJRFRIOyAvLyBUaGUgaWQgaXMgc2ltcGx5IHRoZSBvcmRpbmFsaXR5IG9mIHRoZSBtZWRpYSBwbGF5bGlzdFxuICAvLyB3aXRoaW4gdGhlIG1hc3RlciBwbGF5bGlzdFxuXG4gIHRoaXMuaWQgPSBpZDsgLy8gUGFydGlhbGx5LWFwcGx5IHRoZSBlbmFibGVGdW5jdGlvbiB0byBjcmVhdGUgYSBwbGF5bGlzdC1cbiAgLy8gc3BlY2lmaWMgdmFyaWFudFxuXG4gIHRoaXMuZW5hYmxlZCA9IGVuYWJsZUZ1bmN0aW9uKGhsc0hhbmRsZXIucGxheWxpc3RzLCBwbGF5bGlzdC51cmksIHF1YWxpdHlDaGFuZ2VGdW5jdGlvbik7XG59O1xuLyoqXG4gKiBBIG1peGluIGZ1bmN0aW9uIHRoYXQgYWRkcyB0aGUgYHJlcHJlc2VudGF0aW9uc2AgYXBpIHRvIGFuIGluc3RhbmNlXG4gKiBvZiB0aGUgSGxzSGFuZGxlciBjbGFzc1xuICogQHBhcmFtIHtIbHNIYW5kbGVyfSBobHNIYW5kbGVyIC0gQW4gaW5zdGFuY2Ugb2YgSGxzSGFuZGxlciB0byBhZGQgdGhlXG4gKiByZXByZXNlbnRhdGlvbiBBUEkgaW50b1xuICovXG5cblxudmFyIHJlbmRpdGlvblNlbGVjdGlvbk1peGluID0gZnVuY3Rpb24gcmVuZGl0aW9uU2VsZWN0aW9uTWl4aW4oaGxzSGFuZGxlcikge1xuICB2YXIgcGxheWxpc3RzID0gaGxzSGFuZGxlci5wbGF5bGlzdHM7IC8vIEFkZCBhIHNpbmdsZSBBUEktc3BlY2lmaWMgZnVuY3Rpb24gdG8gdGhlIEhsc0hhbmRsZXIgaW5zdGFuY2VcblxuICBobHNIYW5kbGVyLnJlcHJlc2VudGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGxheWxpc3RzLm1hc3Rlci5wbGF5bGlzdHMuZmlsdGVyKGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgcmV0dXJuICFpc0luY29tcGF0aWJsZShtZWRpYSk7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICByZXR1cm4gbmV3IFJlcHJlc2VudGF0aW9uKGhsc0hhbmRsZXIsIGUsIGUudXJpKTtcbiAgICB9KTtcbiAgfTtcbn07XG4vKipcbiAqIEBmaWxlIHBsYXliYWNrLXdhdGNoZXIuanNcbiAqXG4gKiBQbGF5YmFjayBzdGFydHMsIGFuZCBub3cgbXkgd2F0Y2ggYmVnaW5zLiBJdCBzaGFsbCBub3QgZW5kIHVudGlsIG15IGRlYXRoLiBJIHNoYWxsXG4gKiB0YWtlIG5vIHdhaXQsIGhvbGQgbm8gdW5jbGVhcmVkIHRpbWVvdXRzLCBmYXRoZXIgbm8gYmFkIHNlZWtzLiBJIHNoYWxsIHdlYXIgbm8gY3Jvd25zXG4gKiBhbmQgd2luIG5vIGdsb3J5LiBJIHNoYWxsIGxpdmUgYW5kIGRpZSBhdCBteSBwb3N0LiBJIGFtIHRoZSBjb3JyZWN0b3Igb2YgdGhlIHVuZGVyZmxvdy5cbiAqIEkgYW0gdGhlIHdhdGNoZXIgb2YgZ2Fwcy4gSSBhbSB0aGUgc2hpZWxkIHRoYXQgZ3VhcmRzIHRoZSByZWFsbXMgb2Ygc2Vla2FibGUuIEkgcGxlZGdlXG4gKiBteSBsaWZlIGFuZCBob25vciB0byB0aGUgUGxheWJhY2sgV2F0Y2gsIGZvciB0aGlzIFBsYXllciBhbmQgYWxsIHRoZSBQbGF5ZXJzIHRvIGNvbWUuXG4gKi9cbi8vIFNldCBvZiBldmVudHMgdGhhdCByZXNldCB0aGUgcGxheWJhY2std2F0Y2hlciB0aW1lIGNoZWNrIGxvZ2ljIGFuZCBjbGVhciB0aGUgdGltZW91dFxuXG5cbnZhciB0aW1lckNhbmNlbEV2ZW50cyA9IFsnc2Vla2luZycsICdzZWVrZWQnLCAncGF1c2UnLCAncGxheWluZycsICdlcnJvciddO1xuLyoqXG4gKiBAY2xhc3MgUGxheWJhY2tXYXRjaGVyXG4gKi9cblxudmFyIFBsYXliYWNrV2F0Y2hlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYW4gUGxheWJhY2tXYXRjaGVyIG9iamVjdC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIGFuIG9iamVjdCB0aGF0IGluY2x1ZGVzIHRoZSB0ZWNoIGFuZCBzZXR0aW5nc1xuICAgKi9cbiAgZnVuY3Rpb24gUGxheWJhY2tXYXRjaGVyKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUGxheWJhY2tXYXRjaGVyKTtcbiAgICB0aGlzLnRlY2hfID0gb3B0aW9ucy50ZWNoO1xuICAgIHRoaXMuc2Vla2FibGUgPSBvcHRpb25zLnNlZWthYmxlO1xuICAgIHRoaXMuc2Vla1RvID0gb3B0aW9ucy5zZWVrVG87XG4gICAgdGhpcy5hbGxvd1NlZWtzV2l0aGluVW5zYWZlTGl2ZVdpbmRvdyA9IG9wdGlvbnMuYWxsb3dTZWVrc1dpdGhpblVuc2FmZUxpdmVXaW5kb3c7XG4gICAgdGhpcy5tZWRpYSA9IG9wdGlvbnMubWVkaWE7XG4gICAgdGhpcy5jb25zZWN1dGl2ZVVwZGF0ZXMgPSAwO1xuICAgIHRoaXMubGFzdFJlY29yZGVkVGltZSA9IG51bGw7XG4gICAgdGhpcy50aW1lcl8gPSBudWxsO1xuICAgIHRoaXMuY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfID0gbnVsbDtcbiAgICB0aGlzLmxvZ2dlcl8gPSBsb2dnZXIoJ1BsYXliYWNrV2F0Y2hlcicpO1xuICAgIHRoaXMubG9nZ2VyXygnaW5pdGlhbGl6ZScpO1xuXG4gICAgdmFyIGNhblBsYXlIYW5kbGVyID0gZnVuY3Rpb24gY2FuUGxheUhhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gX3RoaXMubW9uaXRvckN1cnJlbnRUaW1lXygpO1xuICAgIH07XG5cbiAgICB2YXIgd2FpdGluZ0hhbmRsZXIgPSBmdW5jdGlvbiB3YWl0aW5nSGFuZGxlcigpIHtcbiAgICAgIHJldHVybiBfdGhpcy50ZWNoV2FpdGluZ18oKTtcbiAgICB9O1xuXG4gICAgdmFyIGNhbmNlbFRpbWVySGFuZGxlciA9IGZ1bmN0aW9uIGNhbmNlbFRpbWVySGFuZGxlcigpIHtcbiAgICAgIHJldHVybiBfdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICB9O1xuXG4gICAgdmFyIGZpeGVzQmFkU2Vla3NIYW5kbGVyID0gZnVuY3Rpb24gZml4ZXNCYWRTZWVrc0hhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZml4ZXNCYWRTZWVrc18oKTtcbiAgICB9O1xuXG4gICAgdGhpcy50ZWNoXy5vbignc2Vla2FibGVjaGFuZ2VkJywgZml4ZXNCYWRTZWVrc0hhbmRsZXIpO1xuICAgIHRoaXMudGVjaF8ub24oJ3dhaXRpbmcnLCB3YWl0aW5nSGFuZGxlcik7XG4gICAgdGhpcy50ZWNoXy5vbih0aW1lckNhbmNlbEV2ZW50cywgY2FuY2VsVGltZXJIYW5kbGVyKTtcbiAgICB0aGlzLnRlY2hfLm9uKCdjYW5wbGF5JywgY2FuUGxheUhhbmRsZXIpOyAvLyBEZWZpbmUgdGhlIGRpc3Bvc2UgZnVuY3Rpb24gdG8gY2xlYW4gdXAgb3VyIGV2ZW50c1xuXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubG9nZ2VyXygnZGlzcG9zZScpO1xuXG4gICAgICBfdGhpcy50ZWNoXy5vZmYoJ3NlZWthYmxlY2hhbmdlZCcsIGZpeGVzQmFkU2Vla3NIYW5kbGVyKTtcblxuICAgICAgX3RoaXMudGVjaF8ub2ZmKCd3YWl0aW5nJywgd2FpdGluZ0hhbmRsZXIpO1xuXG4gICAgICBfdGhpcy50ZWNoXy5vZmYodGltZXJDYW5jZWxFdmVudHMsIGNhbmNlbFRpbWVySGFuZGxlcik7XG5cbiAgICAgIF90aGlzLnRlY2hfLm9mZignY2FucGxheScsIGNhblBsYXlIYW5kbGVyKTtcblxuICAgICAgaWYgKF90aGlzLmNoZWNrQ3VycmVudFRpbWVUaW1lb3V0Xykge1xuICAgICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQoX3RoaXMuY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2FuY2VsVGltZXJfKCk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUGVyaW9kaWNhbGx5IGNoZWNrIGN1cnJlbnQgdGltZSB0byBzZWUgaWYgcGxheWJhY2sgc3RvcHBlZFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIGNyZWF0ZUNsYXNzKFBsYXliYWNrV2F0Y2hlciwgW3tcbiAgICBrZXk6ICdtb25pdG9yQ3VycmVudFRpbWVfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW9uaXRvckN1cnJlbnRUaW1lXygpIHtcbiAgICAgIHRoaXMuY2hlY2tDdXJyZW50VGltZV8oKTtcblxuICAgICAgaWYgKHRoaXMuY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfKSB7XG4gICAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLmNoZWNrQ3VycmVudFRpbWVUaW1lb3V0Xyk7XG4gICAgICB9IC8vIDQyID0gMjQgZnBzIC8vIDI1MCBpcyB3aGF0IFdlYmtpdCB1c2VzIC8vIEZGIHVzZXMgMTVcblxuXG4gICAgICB0aGlzLmNoZWNrQ3VycmVudFRpbWVUaW1lb3V0XyA9IHdpbmRvdyQxLnNldFRpbWVvdXQodGhpcy5tb25pdG9yQ3VycmVudFRpbWVfLmJpbmQodGhpcyksIDI1MCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW11bGF0ZSB0aGUgXCJ3YWl0aW5nXCIgZXZlbnQgb25cbiAgICAgKiBicm93c2VycyB0aGF0IGRvIG5vdCBlbWl0IGl0IHdoZW4gdGhleSBhcmUgd2FpdGluZyBmb3IgbW9yZVxuICAgICAqIGRhdGEgdG8gY29udGludWUgcGxheWJhY2tcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NoZWNrQ3VycmVudFRpbWVfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tDdXJyZW50VGltZV8oKSB7XG4gICAgICBpZiAodGhpcy50ZWNoXy5zZWVraW5nKCkgJiYgdGhpcy5maXhlc0JhZFNlZWtzXygpKSB7XG4gICAgICAgIHRoaXMuY29uc2VjdXRpdmVVcGRhdGVzID0gMDtcbiAgICAgICAgdGhpcy5sYXN0UmVjb3JkZWRUaW1lID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRlY2hfLnBhdXNlZCgpIHx8IHRoaXMudGVjaF8uc2Vla2luZygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy50ZWNoXy5idWZmZXJlZCgpO1xuXG4gICAgICBpZiAodGhpcy5sYXN0UmVjb3JkZWRUaW1lID09PSBjdXJyZW50VGltZSAmJiAoIWJ1ZmZlcmVkLmxlbmd0aCB8fCBjdXJyZW50VGltZSArIFNBRkVfVElNRV9ERUxUQSA+PSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSkpKSB7XG4gICAgICAgIC8vIElmIGN1cnJlbnQgdGltZSBpcyBhdCB0aGUgZW5kIG9mIHRoZSBmaW5hbCBidWZmZXJlZCByZWdpb24sIHRoZW4gYW55IHBsYXliYWNrXG4gICAgICAgIC8vIHN0YWxsIGlzIG1vc3QgbGlrZWx5IGNhdXNlZCBieSBidWZmZXJpbmcgaW4gYSBsb3cgYmFuZHdpZHRoIGVudmlyb25tZW50LiBUaGUgdGVjaFxuICAgICAgICAvLyBzaG91bGQgZmlyZSBhIGB3YWl0aW5nYCBldmVudCBpbiB0aGlzIHNjZW5hcmlvLCBidXQgZHVlIHRvIGJyb3dzZXIgYW5kIHRlY2hcbiAgICAgICAgLy8gaW5jb25zaXN0ZW5jaWVzLiBDYWxsaW5nIGB0ZWNoV2FpdGluZ19gIGhlcmUgYWxsb3dzIHVzIHRvIHNpbXVsYXRlXG4gICAgICAgIC8vIHJlc3BvbmRpbmcgdG8gYSBuYXRpdmUgYHdhaXRpbmdgIGV2ZW50IHdoZW4gdGhlIHRlY2ggZmFpbHMgdG8gZW1pdCBvbmUuXG4gICAgICAgIHJldHVybiB0aGlzLnRlY2hXYWl0aW5nXygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb25zZWN1dGl2ZVVwZGF0ZXMgPj0gNSAmJiBjdXJyZW50VGltZSA9PT0gdGhpcy5sYXN0UmVjb3JkZWRUaW1lKSB7XG4gICAgICAgIHRoaXMuY29uc2VjdXRpdmVVcGRhdGVzKys7XG4gICAgICAgIHRoaXMud2FpdGluZ18oKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFRpbWUgPT09IHRoaXMubGFzdFJlY29yZGVkVGltZSkge1xuICAgICAgICB0aGlzLmNvbnNlY3V0aXZlVXBkYXRlcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb25zZWN1dGl2ZVVwZGF0ZXMgPSAwO1xuICAgICAgICB0aGlzLmxhc3RSZWNvcmRlZFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhbnkgcGVuZGluZyB0aW1lcnMgYW5kIHJlc2V0cyB0aGUgJ3RpbWV1cGRhdGUnIG1lY2hhbmlzbVxuICAgICAqIGRlc2lnbmVkIHRvIGRldGVjdCB0aGF0IHdlIGFyZSBzdGFsbGVkXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjYW5jZWxUaW1lcl8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWxUaW1lcl8oKSB7XG4gICAgICB0aGlzLmNvbnNlY3V0aXZlVXBkYXRlcyA9IDA7XG5cbiAgICAgIGlmICh0aGlzLnRpbWVyXykge1xuICAgICAgICB0aGlzLmxvZ2dlcl8oJ2NhbmNlbFRpbWVyXycpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcl8pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRpbWVyXyA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpeGVzIHNpdHVhdGlvbnMgd2hlcmUgdGhlcmUncyBhIGJhZCBzZWVrXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIGFuIGFjdGlvbiB3YXMgdGFrZW4gdG8gZml4IHRoZSBzZWVrXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZml4ZXNCYWRTZWVrc18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaXhlc0JhZFNlZWtzXygpIHtcbiAgICAgIHZhciBzZWVraW5nID0gdGhpcy50ZWNoXy5zZWVraW5nKCk7XG5cbiAgICAgIGlmICghc2Vla2luZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWVrYWJsZSA9IHRoaXMuc2Vla2FibGUoKTtcbiAgICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcbiAgICAgIHZhciBpc0FmdGVyU2Vla2FibGVSYW5nZSA9IHRoaXMuYWZ0ZXJTZWVrYWJsZVdpbmRvd18oc2Vla2FibGUsIGN1cnJlbnRUaW1lLCB0aGlzLm1lZGlhKCksIHRoaXMuYWxsb3dTZWVrc1dpdGhpblVuc2FmZUxpdmVXaW5kb3cpO1xuICAgICAgdmFyIHNlZWtUbyA9IHZvaWQgMDtcblxuICAgICAgaWYgKGlzQWZ0ZXJTZWVrYWJsZVJhbmdlKSB7XG4gICAgICAgIHZhciBzZWVrYWJsZUVuZCA9IHNlZWthYmxlLmVuZChzZWVrYWJsZS5sZW5ndGggLSAxKTsgLy8gc3luYyB0byBsaXZlIHBvaW50IChpZiBWT0QsIG91ciBzZWVrYWJsZSB3YXMgdXBkYXRlZCBhbmQgd2UncmUgc2ltcGx5IGFkanVzdGluZylcblxuICAgICAgICBzZWVrVG8gPSBzZWVrYWJsZUVuZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYmVmb3JlU2Vla2FibGVXaW5kb3dfKHNlZWthYmxlLCBjdXJyZW50VGltZSkpIHtcbiAgICAgICAgdmFyIHNlZWthYmxlU3RhcnQgPSBzZWVrYWJsZS5zdGFydCgwKTsgLy8gc3luYyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXZlIHdpbmRvd1xuICAgICAgICAvLyBwcm92aWRlIGEgYnVmZmVyIG9mIC4xIHNlY29uZHMgdG8gaGFuZGxlIHJvdW5kaW5nL2ltcHJlY2lzZSBudW1iZXJzXG5cbiAgICAgICAgc2Vla1RvID0gc2Vla2FibGVTdGFydCArIFNBRkVfVElNRV9ERUxUQTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWVrVG8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyXygnVHJ5aW5nIHRvIHNlZWsgb3V0c2lkZSBvZiBzZWVrYWJsZSBhdCB0aW1lICcgKyBjdXJyZW50VGltZSArICcgd2l0aCAnICsgKCdzZWVrYWJsZSByYW5nZSAnICsgcHJpbnRhYmxlUmFuZ2Uoc2Vla2FibGUpICsgJy4gU2Vla2luZyB0byAnKSArIChzZWVrVG8gKyAnLicpKTtcbiAgICAgICAgdGhpcy5zZWVrVG8oc2Vla1RvKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3Igc2l0dWF0aW9ucyB3aGVuIHdlIGRldGVybWluZSB0aGUgcGxheWVyIGlzIHdhaXRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd3YWl0aW5nXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhaXRpbmdfKCkge1xuICAgICAgaWYgKHRoaXMudGVjaFdhaXRpbmdfKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBBbGwgdGVjaCB3YWl0aW5nIGNoZWNrcyBmYWlsZWQuIFVzZSBsYXN0IHJlc29ydCBjb3JyZWN0aW9uXG5cblxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy50ZWNoXy5idWZmZXJlZCgpO1xuICAgICAgdmFyIGN1cnJlbnRSYW5nZSA9IGZpbmRSYW5nZShidWZmZXJlZCwgY3VycmVudFRpbWUpOyAvLyBTb21ldGltZXMgdGhlIHBsYXllciBjYW4gc3RhbGwgZm9yIHVua25vd24gcmVhc29ucyB3aXRoaW4gYSBjb250aWd1b3VzIGJ1ZmZlcmVkXG4gICAgICAvLyByZWdpb24gd2l0aCBubyBpbmRpY2F0aW9uIHRoYXQgYW55dGhpbmcgaXMgYW1pc3MgKHNlZW4gaW4gRmlyZWZveCkuIFNlZWtpbmcgdG9cbiAgICAgIC8vIGN1cnJlbnRUaW1lIGlzIHVzdWFsbHkgZW5vdWdoIHRvIGtpY2tzdGFydCB0aGUgcGxheWVyLiBUaGlzIGNoZWNrcyB0aGF0IHRoZSBwbGF5ZXJcbiAgICAgIC8vIGlzIGN1cnJlbnRseSB3aXRoaW4gYSBidWZmZXJlZCByZWdpb24gYmVmb3JlIGF0dGVtcHRpbmcgYSBjb3JyZWN0aXZlIHNlZWsuXG4gICAgICAvLyBDaHJvbWUgZG9lcyBub3QgYXBwZWFyIHRvIGNvbnRpbnVlIGB0aW1ldXBkYXRlYCBldmVudHMgYWZ0ZXIgYSBgd2FpdGluZ2AgZXZlbnRcbiAgICAgIC8vIHVudGlsIHRoZXJlIGlzIH4gMyBzZWNvbmRzIG9mIGZvcndhcmQgYnVmZmVyIGF2YWlsYWJsZS4gUGxheWJhY2tXYXRjaGVyIHNob3VsZCBhbHNvXG4gICAgICAvLyBtYWtlIHN1cmUgdGhlcmUgaXMgfjMgc2Vjb25kcyBvZiBmb3J3YXJkIGJ1ZmZlciBiZWZvcmUgdGFraW5nIGFueSBjb3JyZWN0aXZlIGFjdGlvblxuICAgICAgLy8gdG8gYXZvaWQgdHJpZ2dlcmluZyBhbiBgdW5rbm93bndhaXRpbmdgIGV2ZW50IHdoZW4gdGhlIG5ldHdvcmsgaXMgc2xvdy5cblxuICAgICAgaWYgKGN1cnJlbnRSYW5nZS5sZW5ndGggJiYgY3VycmVudFRpbWUgKyAzIDw9IGN1cnJlbnRSYW5nZS5lbmQoMCkpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICAgICAgdGhpcy5zZWVrVG8oY3VycmVudFRpbWUpO1xuICAgICAgICB0aGlzLmxvZ2dlcl8oJ1N0b3BwZWQgYXQgJyArIGN1cnJlbnRUaW1lICsgJyB3aGlsZSBpbnNpZGUgYSBidWZmZXJlZCByZWdpb24gJyArICgnWycgKyBjdXJyZW50UmFuZ2Uuc3RhcnQoMCkgKyAnIC0+ICcgKyBjdXJyZW50UmFuZ2UuZW5kKDApICsgJ10uIEF0dGVtcHRpbmcgdG8gcmVzdW1lICcpICsgJ3BsYXliYWNrIGJ5IHNlZWtpbmcgdG8gdGhlIGN1cnJlbnQgdGltZS4nKTsgLy8gdW5rbm93biB3YWl0aW5nIGNvcnJlY3Rpb25zIG1heSBiZSB1c2VmdWwgZm9yIG1vbml0b3JpbmcgUW9TXG5cbiAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgIG5hbWU6ICdobHMtdW5rbm93bi13YWl0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciBzaXR1YXRpb25zIHdoZW4gdGhlIHRlY2ggZmlyZXMgYSBgd2FpdGluZ2AgZXZlbnRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICogICAgICAgICBUcnVlIGlmIGFuIGFjdGlvbiAob3Igbm9uZSkgd2FzIG5lZWRlZCB0byBjb3JyZWN0IHRoZSB3YWl0aW5nLiBGYWxzZSBpZiBub1xuICAgICAqICAgICAgICAgY2hlY2tzIHBhc3NlZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RlY2hXYWl0aW5nXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRlY2hXYWl0aW5nXygpIHtcbiAgICAgIHZhciBzZWVrYWJsZSA9IHRoaXMuc2Vla2FibGUoKTtcbiAgICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcblxuICAgICAgaWYgKHRoaXMudGVjaF8uc2Vla2luZygpICYmIHRoaXMuZml4ZXNCYWRTZWVrc18oKSkge1xuICAgICAgICAvLyBUZWNoIGlzIHNlZWtpbmcgb3IgYmFkIHNlZWsgZml4ZWQsIG5vIGFjdGlvbiBuZWVkZWRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRlY2hfLnNlZWtpbmcoKSB8fCB0aGlzLnRpbWVyXyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBUZWNoIGlzIHNlZWtpbmcgb3IgYWxyZWFkeSB3YWl0aW5nIG9uIGFub3RoZXIgYWN0aW9uLCBubyBhY3Rpb24gbmVlZGVkXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5iZWZvcmVTZWVrYWJsZVdpbmRvd18oc2Vla2FibGUsIGN1cnJlbnRUaW1lKSkge1xuICAgICAgICB2YXIgbGl2ZVBvaW50ID0gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLmxvZ2dlcl8oJ0ZlbGwgb3V0IG9mIGxpdmUgd2luZG93IGF0IHRpbWUgJyArIGN1cnJlbnRUaW1lICsgJy4gU2Vla2luZyB0byAnICsgKCdsaXZlIHBvaW50IChzZWVrYWJsZSBlbmQpICcgKyBsaXZlUG9pbnQpKTtcbiAgICAgICAgdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICAgICAgdGhpcy5zZWVrVG8obGl2ZVBvaW50KTsgLy8gbGl2ZSB3aW5kb3cgcmVzeW5jcyBtYXkgYmUgdXNlZnVsIGZvciBtb25pdG9yaW5nIFFvU1xuXG4gICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICBuYW1lOiAnaGxzLWxpdmUtcmVzeW5jJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBidWZmZXJlZCA9IHRoaXMudGVjaF8uYnVmZmVyZWQoKTtcbiAgICAgIHZhciBuZXh0UmFuZ2UgPSBmaW5kTmV4dFJhbmdlKGJ1ZmZlcmVkLCBjdXJyZW50VGltZSk7XG5cbiAgICAgIGlmICh0aGlzLnZpZGVvVW5kZXJmbG93XyhuZXh0UmFuZ2UsIGJ1ZmZlcmVkLCBjdXJyZW50VGltZSkpIHtcbiAgICAgICAgLy8gRXZlbiB0aG91Z2ggdGhlIHZpZGVvIHVuZGVyZmxvd2VkIGFuZCB3YXMgc3R1Y2sgaW4gYSBnYXAsIHRoZSBhdWRpbyBvdmVycGxheWVkXG4gICAgICAgIC8vIHRoZSBnYXAsIGxlYWRpbmcgY3VycmVudFRpbWUgaW50byBhIGJ1ZmZlcmVkIHJhbmdlLiBTZWVraW5nIHRvIGN1cnJlbnRUaW1lXG4gICAgICAgIC8vIGFsbG93cyB0aGUgdmlkZW8gdG8gY2F0Y2ggdXAgdG8gdGhlIGF1ZGlvIHBvc2l0aW9uIHdpdGhvdXQgbG9zaW5nIGFueSBhdWRpb1xuICAgICAgICAvLyAob25seSBzdWZmZXJpbmcgfjMgc2Vjb25kcyBvZiBmcm96ZW4gdmlkZW8gYW5kIGEgcGF1c2UgaW4gYXVkaW8gcGxheWJhY2spLlxuICAgICAgICB0aGlzLmNhbmNlbFRpbWVyXygpO1xuICAgICAgICB0aGlzLnNlZWtUbyhjdXJyZW50VGltZSk7IC8vIHZpZGVvIHVuZGVyZmxvdyBtYXkgYmUgdXNlZnVsIGZvciBtb25pdG9yaW5nIFFvU1xuXG4gICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICBuYW1lOiAnaGxzLXZpZGVvLXVuZGVyZmxvdydcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBjaGVjayBmb3IgZ2FwXG5cblxuICAgICAgaWYgKG5leHRSYW5nZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gbmV4dFJhbmdlLnN0YXJ0KDApIC0gY3VycmVudFRpbWU7XG4gICAgICAgIHRoaXMubG9nZ2VyXygnU3RvcHBlZCBhdCAnICsgY3VycmVudFRpbWUgKyAnLCBzZXR0aW5nIHRpbWVyIGZvciAnICsgZGlmZmVyZW5jZSArICcsIHNlZWtpbmcgJyArICgndG8gJyArIG5leHRSYW5nZS5zdGFydCgwKSkpO1xuICAgICAgICB0aGlzLnRpbWVyXyA9IHNldFRpbWVvdXQodGhpcy5za2lwVGhlR2FwXy5iaW5kKHRoaXMpLCBkaWZmZXJlbmNlICogMTAwMCwgY3VycmVudFRpbWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gLy8gQWxsIGNoZWNrcyBmYWlsZWQuIFJldHVybmluZyBmYWxzZSB0byBpbmRpY2F0ZSBmYWlsdXJlIHRvIGNvcnJlY3Qgd2FpdGluZ1xuXG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhZnRlclNlZWthYmxlV2luZG93XycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyU2Vla2FibGVXaW5kb3dfKHNlZWthYmxlLCBjdXJyZW50VGltZSwgcGxheWxpc3QpIHtcbiAgICAgIHZhciBhbGxvd1NlZWtzV2l0aGluVW5zYWZlTGl2ZVdpbmRvdyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cbiAgICAgIGlmICghc2Vla2FibGUubGVuZ3RoKSB7XG4gICAgICAgIC8vIHdlIGNhbid0IG1ha2UgYSBzb2xpZCBjYXNlIGlmIHRoZXJlJ3Mgbm8gc2Vla2FibGUsIGRlZmF1bHQgdG8gZmFsc2VcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxsb3dlZEVuZCA9IHNlZWthYmxlLmVuZChzZWVrYWJsZS5sZW5ndGggLSAxKSArIFNBRkVfVElNRV9ERUxUQTtcbiAgICAgIHZhciBpc0xpdmUgPSAhcGxheWxpc3QuZW5kTGlzdDtcblxuICAgICAgaWYgKGlzTGl2ZSAmJiBhbGxvd1NlZWtzV2l0aGluVW5zYWZlTGl2ZVdpbmRvdykge1xuICAgICAgICBhbGxvd2VkRW5kID0gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpICsgcGxheWxpc3QudGFyZ2V0RHVyYXRpb24gKiAzO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRpbWUgPiBhbGxvd2VkRW5kKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYmVmb3JlU2Vla2FibGVXaW5kb3dfJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmVmb3JlU2Vla2FibGVXaW5kb3dfKHNlZWthYmxlLCBjdXJyZW50VGltZSkge1xuICAgICAgaWYgKHNlZWthYmxlLmxlbmd0aCAmJiAvLyBjYW4ndCBmYWxsIGJlZm9yZSAwIGFuZCAwIHNlZWthYmxlIHN0YXJ0IGlkZW50aWZpZXMgVk9EIHN0cmVhbVxuICAgICAgc2Vla2FibGUuc3RhcnQoMCkgPiAwICYmIGN1cnJlbnRUaW1lIDwgc2Vla2FibGUuc3RhcnQoMCkgLSBTQUZFX1RJTUVfREVMVEEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2aWRlb1VuZGVyZmxvd18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2aWRlb1VuZGVyZmxvd18obmV4dFJhbmdlLCBidWZmZXJlZCwgY3VycmVudFRpbWUpIHtcbiAgICAgIGlmIChuZXh0UmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEV2ZW4gaWYgdGhlcmUgaXMgbm8gYXZhaWxhYmxlIG5leHQgcmFuZ2UsIHRoZXJlIGlzIHN0aWxsIGEgcG9zc2liaWxpdHkgd2UgYXJlXG4gICAgICAgIC8vIHN0dWNrIGluIGEgZ2FwIGR1ZSB0byB2aWRlbyB1bmRlcmZsb3cuXG4gICAgICAgIHZhciBnYXAgPSB0aGlzLmdhcEZyb21WaWRlb1VuZGVyZmxvd18oYnVmZmVyZWQsIGN1cnJlbnRUaW1lKTtcblxuICAgICAgICBpZiAoZ2FwKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXJfKCdFbmNvdW50ZXJlZCBhIGdhcCBpbiB2aWRlbyBmcm9tICcgKyBnYXAuc3RhcnQgKyAnIHRvICcgKyBnYXAuZW5kICsgJy4gJyArICgnU2Vla2luZyB0byBjdXJyZW50IHRpbWUgJyArIGN1cnJlbnRUaW1lKSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaW1lciBjYWxsYmFjay4gSWYgcGxheWJhY2sgc3RpbGwgaGFzIG5vdCBwcm9jZWVkZWQsIHRoZW4gd2Ugc2Vla1xuICAgICAqIHRvIHRoZSBzdGFydCBvZiB0aGUgbmV4dCBidWZmZXJlZCByZWdpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdza2lwVGhlR2FwXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNraXBUaGVHYXBfKHNjaGVkdWxlZEN1cnJlbnRUaW1lKSB7XG4gICAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hfLmJ1ZmZlcmVkKCk7XG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgICB2YXIgbmV4dFJhbmdlID0gZmluZE5leHRSYW5nZShidWZmZXJlZCwgY3VycmVudFRpbWUpO1xuICAgICAgdGhpcy5jYW5jZWxUaW1lcl8oKTtcblxuICAgICAgaWYgKG5leHRSYW5nZS5sZW5ndGggPT09IDAgfHwgY3VycmVudFRpbWUgIT09IHNjaGVkdWxlZEN1cnJlbnRUaW1lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2dnZXJfKCdza2lwVGhlR2FwXzonLCAnY3VycmVudFRpbWU6JywgY3VycmVudFRpbWUsICdzY2hlZHVsZWQgY3VycmVudFRpbWU6Jywgc2NoZWR1bGVkQ3VycmVudFRpbWUsICduZXh0UmFuZ2Ugc3RhcnQ6JywgbmV4dFJhbmdlLnN0YXJ0KDApKTsgLy8gb25seSBzZWVrIGlmIHdlIHN0aWxsIGhhdmUgbm90IHBsYXllZFxuXG4gICAgICB0aGlzLnNlZWtUbyhuZXh0UmFuZ2Uuc3RhcnQoMCkgKyBUSU1FX0ZVREdFX0ZBQ1RPUik7XG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAnaGxzLWdhcC1za2lwJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2FwRnJvbVZpZGVvVW5kZXJmbG93XycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdhcEZyb21WaWRlb1VuZGVyZmxvd18oYnVmZmVyZWQsIGN1cnJlbnRUaW1lKSB7XG4gICAgICAvLyBBdCBsZWFzdCBpbiBDaHJvbWUsIGlmIHRoZXJlIGlzIGEgZ2FwIGluIHRoZSB2aWRlbyBidWZmZXIsIHRoZSBhdWRpbyB3aWxsIGNvbnRpbnVlXG4gICAgICAvLyBwbGF5aW5nIGZvciB+MyBzZWNvbmRzIGFmdGVyIHRoZSB2aWRlbyBnYXAgc3RhcnRzLiBUaGlzIGlzIGRvbmUgdG8gYWNjb3VudCBmb3JcbiAgICAgIC8vIHZpZGVvIGJ1ZmZlciB1bmRlcmZsb3cvdW5kZXJydW4gKG5vdGUgdGhhdCB0aGlzIGlzIG5vdCBkb25lIHdoZW4gdGhlcmUgaXMgYXVkaW9cbiAgICAgIC8vIGJ1ZmZlciB1bmRlcmZsb3cvdW5kZXJydW4gLS0gaW4gdGhhdCBjYXNlIHRoZSB2aWRlbyB3aWxsIHN0b3AgYXMgc29vbiBhcyBpdFxuICAgICAgLy8gZW5jb3VudGVycyB0aGUgZ2FwLCBhcyBhdWRpbyBzdGFsbHMgYXJlIG1vcmUgbm90aWNlYWJsZS9qYXJyaW5nIHRvIGEgdXNlciB0aGFuXG4gICAgICAvLyB2aWRlbyBzdGFsbHMpLiBUaGUgcGxheWVyJ3MgdGltZSB3aWxsIHJlZmxlY3QgdGhlIHBsYXl0aHJvdWdoIG9mIGF1ZGlvLCBzbyB0aGVcbiAgICAgIC8vIHRpbWUgd2lsbCBhcHBlYXIgYXMgaWYgd2UgYXJlIGluIGEgYnVmZmVyZWQgcmVnaW9uLCBldmVuIGlmIHdlIGFyZSBzdHVjayBpbiBhXG4gICAgICAvLyBcImdhcC5cIlxuICAgICAgLy9cbiAgICAgIC8vIEV4YW1wbGU6XG4gICAgICAvLyB2aWRlbyBidWZmZXI6ICAgMCA9PiAxMC4xLCAxMC4yID0+IDIwXG4gICAgICAvLyBhdWRpbyBidWZmZXI6ICAgMCA9PiAyMFxuICAgICAgLy8gb3ZlcmFsbCBidWZmZXI6IDAgPT4gMTAuMSwgMTAuMiA9PiAyMFxuICAgICAgLy8gY3VycmVudCB0aW1lOiAxM1xuICAgICAgLy9cbiAgICAgIC8vIENocm9tZSdzIHZpZGVvIGZyb3plIGF0IDEwIHNlY29uZHMsIHdoZXJlIHRoZSB2aWRlbyBidWZmZXIgZW5jb3VudGVyZWQgdGhlIGdhcCxcbiAgICAgIC8vIGhvd2V2ZXIsIHRoZSBhdWRpbyBjb250aW51ZWQgcGxheWluZyB1bnRpbCBpdCByZWFjaGVkIH4zIHNlY29uZHMgcGFzdCB0aGUgZ2FwXG4gICAgICAvLyAoMTMgc2Vjb25kcyksIGF0IHdoaWNoIHBvaW50IGl0IHN0b3BzIGFzIHdlbGwuIFNpbmNlIGN1cnJlbnQgdGltZSBpcyBwYXN0IHRoZVxuICAgICAgLy8gZ2FwLCBmaW5kTmV4dFJhbmdlIHdpbGwgcmV0dXJuIG5vIHJhbmdlcy5cbiAgICAgIC8vXG4gICAgICAvLyBUbyBjaGVjayBmb3IgdGhpcyBpc3N1ZSwgd2Ugc2VlIGlmIHRoZXJlIGlzIGEgZ2FwIHRoYXQgc3RhcnRzIHNvbWV3aGVyZSB3aXRoaW5cbiAgICAgIC8vIGEgMyBzZWNvbmQgcmFuZ2UgKDMgc2Vjb25kcyArLy0gMSBzZWNvbmQpIGJhY2sgZnJvbSBvdXIgY3VycmVudCB0aW1lLlxuICAgICAgdmFyIGdhcHMgPSBmaW5kR2FwcyhidWZmZXJlZCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2Fwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3RhcnQgPSBnYXBzLnN0YXJ0KGkpO1xuICAgICAgICB2YXIgZW5kID0gZ2Fwcy5lbmQoaSk7IC8vIGdhcCBpcyBzdGFydHMgbm8gbW9yZSB0aGFuIDQgc2Vjb25kcyBiYWNrXG5cbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gc3RhcnQgPCA0ICYmIGN1cnJlbnRUaW1lIC0gc3RhcnQgPiAyKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFBsYXliYWNrV2F0Y2hlcjtcbn0oKTtcblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBlcnJvckludGVydmFsOiAzMCxcbiAgZ2V0U291cmNlOiBmdW5jdGlvbiBnZXRTb3VyY2UobmV4dCkge1xuICAgIHZhciB0ZWNoID0gdGhpcy50ZWNoKHtcbiAgICAgIElXaWxsTm90VXNlVGhpc0luUGx1Z2luczogdHJ1ZVxuICAgIH0pO1xuICAgIHZhciBzb3VyY2VPYmogPSB0ZWNoLmN1cnJlbnRTb3VyY2VfO1xuICAgIHJldHVybiBuZXh0KHNvdXJjZU9iaik7XG4gIH1cbn07XG4vKipcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBwbHVnaW5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyIGEgcmVmZXJlbmNlIHRvIGEgdmlkZW9qcyBQbGF5ZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gYW4gb2JqZWN0IHdpdGggcGx1Z2luIG9wdGlvbnNcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGluaXRQbHVnaW4gPSBmdW5jdGlvbiBpbml0UGx1Z2luKHBsYXllciwgb3B0aW9ucykge1xuICB2YXIgbGFzdENhbGxlZCA9IDA7XG4gIHZhciBzZWVrVG8gPSAwO1xuICB2YXIgbG9jYWxPcHRpb25zID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIHBsYXllci5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgcGxheWVyLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgIG5hbWU6ICdobHMtZXJyb3ItcmVsb2FkLWluaXRpYWxpemVkJ1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIFBsYXllciBtb2RpZmljYXRpb25zIHRvIHBlcmZvcm0gdGhhdCBtdXN0IHdhaXQgdW50aWwgYGxvYWRlZG1ldGFkYXRhYFxuICAgKiBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdmFyIGxvYWRlZE1ldGFkYXRhSGFuZGxlciA9IGZ1bmN0aW9uIGxvYWRlZE1ldGFkYXRhSGFuZGxlcigpIHtcbiAgICBpZiAoc2Vla1RvKSB7XG4gICAgICBwbGF5ZXIuY3VycmVudFRpbWUoc2Vla1RvKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBvbiB0aGUgcGxheWVyIGVsZW1lbnQsIHBsYXksIGFuZCBzZWVrIGlmIG5lY2Vzc2FyeVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIEFuIG9iamVjdCBzcGVjaWZ5aW5nIHRoZSBzb3VyY2UgdXJsIGFuZCBtaW1lLXR5cGUgdG8gcGxheVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciBzZXRTb3VyY2UgPSBmdW5jdGlvbiBzZXRTb3VyY2Uoc291cmNlT2JqKSB7XG4gICAgaWYgKHNvdXJjZU9iaiA9PT0gbnVsbCB8fCBzb3VyY2VPYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlZWtUbyA9IHBsYXllci5kdXJhdGlvbigpICE9PSBJbmZpbml0eSAmJiBwbGF5ZXIuY3VycmVudFRpbWUoKSB8fCAwO1xuICAgIHBsYXllci5vbmUoJ2xvYWRlZG1ldGFkYXRhJywgbG9hZGVkTWV0YWRhdGFIYW5kbGVyKTtcbiAgICBwbGF5ZXIuc3JjKHNvdXJjZU9iaik7XG4gICAgcGxheWVyLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgIG5hbWU6ICdobHMtZXJyb3ItcmVsb2FkJ1xuICAgIH0pO1xuICAgIHBsYXllci5wbGF5KCk7XG4gIH07XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGdldCBhIHNvdXJjZSBmcm9tIGVpdGhlciB0aGUgYnVpbHQtaW4gZ2V0U291cmNlIGZ1bmN0aW9uXG4gICAqIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIHByb3ZpZGVkIHZpYSB0aGUgb3B0aW9uc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiBlcnJvckhhbmRsZXIoKSB7XG4gICAgLy8gRG8gbm90IGF0dGVtcHQgdG8gcmVsb2FkIHRoZSBzb3VyY2UgaWYgYSBzb3VyY2UtcmVsb2FkIG9jY3VycmVkIGJlZm9yZVxuICAgIC8vICdlcnJvckludGVydmFsJyB0aW1lIGhhcyBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHNvdXJjZS1yZWxvYWRcbiAgICBpZiAoRGF0ZS5ub3coKSAtIGxhc3RDYWxsZWQgPCBsb2NhbE9wdGlvbnMuZXJyb3JJbnRlcnZhbCAqIDEwMDApIHtcbiAgICAgIHBsYXllci50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ2hscy1lcnJvci1yZWxvYWQtY2FuY2VsZWQnXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWxvY2FsT3B0aW9ucy5nZXRTb3VyY2UgfHwgdHlwZW9mIGxvY2FsT3B0aW9ucy5nZXRTb3VyY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cuZXJyb3IoJ0VSUk9SOiByZWxvYWRTb3VyY2VPbkVycm9yIC0gVGhlIG9wdGlvbiBnZXRTb3VyY2UgbXVzdCBiZSBhIGZ1bmN0aW9uIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RDYWxsZWQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBsb2NhbE9wdGlvbnMuZ2V0U291cmNlLmNhbGwocGxheWVyLCBzZXRTb3VyY2UpO1xuICB9O1xuICAvKipcbiAgICogVW5iaW5kIGFueSBldmVudCBoYW5kbGVycyB0aGF0IHdlcmUgYm91bmQgYnkgdGhlIHBsdWdpblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciBjbGVhbnVwRXZlbnRzID0gZnVuY3Rpb24gY2xlYW51cEV2ZW50cygpIHtcbiAgICBwbGF5ZXIub2ZmKCdsb2FkZWRtZXRhZGF0YScsIGxvYWRlZE1ldGFkYXRhSGFuZGxlcik7XG4gICAgcGxheWVyLm9mZignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgIHBsYXllci5vZmYoJ2Rpc3Bvc2UnLCBjbGVhbnVwRXZlbnRzKTtcbiAgfTtcbiAgLyoqXG4gICAqIENsZWFudXAgYmVmb3JlIHJlLWluaXRpYWxpemluZyB0aGUgcGx1Z2luXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbbmV3T3B0aW9uc10gYW4gb2JqZWN0IHdpdGggcGx1Z2luIG9wdGlvbnNcbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICB2YXIgcmVpbml0UGx1Z2luID0gZnVuY3Rpb24gcmVpbml0UGx1Z2luKG5ld09wdGlvbnMpIHtcbiAgICBjbGVhbnVwRXZlbnRzKCk7XG4gICAgaW5pdFBsdWdpbihwbGF5ZXIsIG5ld09wdGlvbnMpO1xuICB9O1xuXG4gIHBsYXllci5vbignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICBwbGF5ZXIub24oJ2Rpc3Bvc2UnLCBjbGVhbnVwRXZlbnRzKTsgLy8gT3ZlcndyaXRlIHRoZSBwbHVnaW4gZnVuY3Rpb24gc28gdGhhdCB3ZSBjYW4gY29ycmVjdGx5IGNsZWFudXAgYmVmb3JlXG4gIC8vIGluaXRpYWxpemluZyB0aGUgcGx1Z2luXG5cbiAgcGxheWVyLnJlbG9hZFNvdXJjZU9uRXJyb3IgPSByZWluaXRQbHVnaW47XG59O1xuLyoqXG4gKiBSZWxvYWQgdGhlIHNvdXJjZSB3aGVuIGFuIGVycm9yIGlzIGRldGVjdGVkIGFzIGxvbmcgYXMgdGhlcmVcbiAqIHdhc24ndCBhbiBlcnJvciBwcmV2aW91c2x5IHdpdGhpbiB0aGUgbGFzdCAzMCBzZWNvbmRzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBhbiBvYmplY3Qgd2l0aCBwbHVnaW4gb3B0aW9uc1xuICovXG5cblxudmFyIHJlbG9hZFNvdXJjZU9uRXJyb3IgPSBmdW5jdGlvbiByZWxvYWRTb3VyY2VPbkVycm9yKG9wdGlvbnMpIHtcbiAgaW5pdFBsdWdpbih0aGlzLCBvcHRpb25zKTtcbn07XG5cbnZhciB2ZXJzaW9uJDEgPSBcIjEuMTAuNlwiOyAvLyBzaW5jZSBWSFMgaGFuZGxlcyBITFMgYW5kIERBU0ggKGFuZCBpbiB0aGUgZnV0dXJlLCBtb3JlIHR5cGVzKSwgdXNlICogdG8gY2FwdHVyZSBhbGxcblxudmlkZW9qcyQxLnVzZSgnKicsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBzZXRTb3VyY2U6IGZ1bmN0aW9uIHNldFNvdXJjZShzcmNPYmosIG5leHQpIHtcbiAgICAgIC8vIHBhc3MgbnVsbCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gaW5kaWNhdGUgdGhhdCB0aGUgc291cmNlIGlzIG5vdCByZWplY3RlZFxuICAgICAgbmV4dChudWxsLCBzcmNPYmopO1xuICAgIH0sXG4gICAgLy8gVkhTIG5lZWRzIHRvIGtub3cgd2hlbiBzZWVrcyBoYXBwZW4uIEZvciBleHRlcm5hbCBzZWVrcyAoZ2VuZXJhdGVkIGF0IHRoZSBwbGF5ZXJcbiAgICAvLyBsZXZlbCksIHRoaXMgbWlkZGxld2FyZSB3aWxsIGNhcHR1cmUgdGhlIGFjdGlvbi4gRm9yIGludGVybmFsIHNlZWtzIChnZW5lcmF0ZWQgYXRcbiAgICAvLyB0aGUgdGVjaCBsZXZlbCksIHdlIHVzZSBhIHdyYXBwZWQgZnVuY3Rpb24gc28gdGhhdCB3ZSBjYW4gaGFuZGxlIGl0IG9uIG91ciBvd25cbiAgICAvLyAoc3BlY2lmaWVkIGVsc2V3aGVyZSkuXG4gICAgc2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKHRpbWUpIHtcbiAgICAgIGlmIChwbGF5ZXIudmhzICYmIHBsYXllci5jdXJyZW50U291cmNlKCkuc3JjID09PSBwbGF5ZXIudmhzLnNvdXJjZV8uc3JjKSB7XG4gICAgICAgIHBsYXllci52aHMuc2V0Q3VycmVudFRpbWUodGltZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aW1lO1xuICAgIH0sXG4gICAgLy8gU3luYyBWSFMgYWZ0ZXIgcGxheSByZXF1ZXN0cy5cbiAgICAvLyBUaGlzIHNwZWNpZmljYWxseSBoYW5kbGVzIHJlcGxheSB3aGVyZSB0aGUgb3JkZXIgb2YgYWN0aW9ucyBpc1xuICAgIC8vIHBsYXksIHZpZGVvIGVsZW1lbnQgd2lsbCBzZWVrIHRvIDAgKHNraXBwaW5nIHRoZSBzZXRDdXJyZW50VGltZSBtaWRkbGV3YXJlKVxuICAgIC8vIHRoZW4gdHJpZ2dlcnMgYSBwbGF5IGV2ZW50LlxuICAgIHBsYXk6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICBpZiAocGxheWVyLnZocyAmJiBwbGF5ZXIuY3VycmVudFNvdXJjZSgpLnNyYyA9PT0gcGxheWVyLnZocy5zb3VyY2VfLnNyYykge1xuICAgICAgICBwbGF5ZXIudmhzLnNldEN1cnJlbnRUaW1lKHBsYXllci50ZWNoXy5jdXJyZW50VGltZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcbi8qKlxuICogQGZpbGUgdmlkZW9qcy1odHRwLXN0cmVhbWluZy5qc1xuICpcbiAqIFRoZSBtYWluIGZpbGUgZm9yIHRoZSBITFMgcHJvamVjdC5cbiAqIExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvanMtaHR0cC1zdHJlYW1pbmcvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbnZhciBIbHMkMSA9IHtcbiAgUGxheWxpc3RMb2FkZXI6IFBsYXlsaXN0TG9hZGVyLFxuICBQbGF5bGlzdDogUGxheWxpc3QsXG4gIERlY3J5cHRlcjogRGVjcnlwdGVyLFxuICBBc3luY1N0cmVhbTogQXN5bmNTdHJlYW0sXG4gIGRlY3J5cHQ6IGRlY3J5cHQsXG4gIHV0aWxzOiB1dGlscyxcbiAgU1RBTkRBUkRfUExBWUxJU1RfU0VMRUNUT1I6IGxhc3RCYW5kd2lkdGhTZWxlY3RvcixcbiAgSU5JVElBTF9QTEFZTElTVF9TRUxFQ1RPUjogbG93ZXN0Qml0cmF0ZUNvbXBhdGlibGVWYXJpYW50U2VsZWN0b3IsXG4gIGNvbXBhcmVQbGF5bGlzdEJhbmR3aWR0aDogY29tcGFyZVBsYXlsaXN0QmFuZHdpZHRoLFxuICBjb21wYXJlUGxheWxpc3RSZXNvbHV0aW9uOiBjb21wYXJlUGxheWxpc3RSZXNvbHV0aW9uLFxuICB4aHI6IHhockZhY3RvcnkoKVxufTsgLy8gRGVmaW5lIGdldHRlci9zZXR0ZXJzIGZvciBjb25maWcgcHJvcGVyaXRlc1xuXG5bJ0dPQUxfQlVGRkVSX0xFTkdUSCcsICdNQVhfR09BTF9CVUZGRVJfTEVOR1RIJywgJ0dPQUxfQlVGRkVSX0xFTkdUSF9SQVRFJywgJ0JVRkZFUl9MT1dfV0FURVJfTElORScsICdNQVhfQlVGRkVSX0xPV19XQVRFUl9MSU5FJywgJ0JVRkZFUl9MT1dfV0FURVJfTElORV9SQVRFJywgJ0JBTkRXSURUSF9WQVJJQU5DRSddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEhscyQxLCBwcm9wLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ3VzaW5nIEhscy4nICsgcHJvcCArICcgaXMgVU5TQUZFIGJlIHN1cmUgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nJyk7XG4gICAgICByZXR1cm4gQ29uZmlnW3Byb3BdO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEodmFsdWUpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cud2FybigndXNpbmcgSGxzLicgKyBwcm9wICsgJyBpcyBVTlNBRkUgYmUgc3VyZSB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcnKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgIHZpZGVvanMkMS5sb2cud2FybigndmFsdWUgb2YgSGxzLicgKyBwcm9wICsgJyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgQ29uZmlnW3Byb3BdID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIExPQ0FMX1NUT1JBR0VfS0VZJDEgPSAndmlkZW9qcy12aHMnO1xuXG52YXIgc2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlID0gZnVuY3Rpb24gc2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlKHR5cGUpIHtcbiAgdmFyIG1wZWd1cmxSRSA9IC9eKGF1ZGlvfHZpZGVvfGFwcGxpY2F0aW9uKVxcLyh4LXx2bmRcXC5hcHBsZVxcLik/bXBlZ3VybC9pO1xuXG4gIGlmIChtcGVndXJsUkUudGVzdCh0eXBlKSkge1xuICAgIHJldHVybiAnaGxzJztcbiAgfVxuXG4gIHZhciBkYXNoUkUgPSAvXmFwcGxpY2F0aW9uXFwvZGFzaFxcK3htbC9pO1xuXG4gIGlmIChkYXNoUkUudGVzdCh0eXBlKSkge1xuICAgIHJldHVybiAnZGFzaCc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHNlbGVjdGVkSW5kZXggb2YgdGhlIFF1YWxpdHlMZXZlbExpc3Qgd2hlbiBhIG1lZGlhY2hhbmdlIGhhcHBlbnMgaW4gaGxzLlxuICpcbiAqIEBwYXJhbSB7UXVhbGl0eUxldmVsTGlzdH0gcXVhbGl0eUxldmVscyBUaGUgUXVhbGl0eUxldmVsTGlzdCB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge1BsYXlsaXN0TG9hZGVyfSBwbGF5bGlzdExvYWRlciBQbGF5bGlzdExvYWRlciBjb250YWluaW5nIHRoZSBuZXcgbWVkaWEgaW5mby5cbiAqIEBmdW5jdGlvbiBoYW5kbGVIbHNNZWRpYUNoYW5nZVxuICovXG5cblxudmFyIGhhbmRsZUhsc01lZGlhQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGxzTWVkaWFDaGFuZ2UocXVhbGl0eUxldmVscywgcGxheWxpc3RMb2FkZXIpIHtcbiAgdmFyIG5ld1BsYXlsaXN0ID0gcGxheWxpc3RMb2FkZXIubWVkaWEoKTtcbiAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1YWxpdHlMZXZlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocXVhbGl0eUxldmVsc1tpXS5pZCA9PT0gbmV3UGxheWxpc3QudXJpKSB7XG4gICAgICBzZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHF1YWxpdHlMZXZlbHMuc2VsZWN0ZWRJbmRleF8gPSBzZWxlY3RlZEluZGV4O1xuICBxdWFsaXR5TGV2ZWxzLnRyaWdnZXIoe1xuICAgIHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsXG4gICAgdHlwZTogJ2NoYW5nZSdcbiAgfSk7XG59O1xuLyoqXG4gKiBBZGRzIHF1YWxpdHkgbGV2ZWxzIHRvIGxpc3Qgb25jZSBwbGF5bGlzdCBtZXRhZGF0YSBpcyBhdmFpbGFibGVcbiAqXG4gKiBAcGFyYW0ge1F1YWxpdHlMZXZlbExpc3R9IHF1YWxpdHlMZXZlbHMgVGhlIFF1YWxpdHlMZXZlbExpc3QgdG8gYXR0YWNoIGV2ZW50cyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBobHMgSGxzIG9iamVjdCB0byBsaXN0ZW4gdG8gZm9yIG1lZGlhIGV2ZW50cy5cbiAqIEBmdW5jdGlvbiBoYW5kbGVIbHNMb2FkZWRNZXRhZGF0YVxuICovXG5cblxudmFyIGhhbmRsZUhsc0xvYWRlZE1ldGFkYXRhID0gZnVuY3Rpb24gaGFuZGxlSGxzTG9hZGVkTWV0YWRhdGEocXVhbGl0eUxldmVscywgaGxzKSB7XG4gIGhscy5yZXByZXNlbnRhdGlvbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChyZXApIHtcbiAgICBxdWFsaXR5TGV2ZWxzLmFkZFF1YWxpdHlMZXZlbChyZXApO1xuICB9KTtcbiAgaGFuZGxlSGxzTWVkaWFDaGFuZ2UocXVhbGl0eUxldmVscywgaGxzLnBsYXlsaXN0cyk7XG59OyAvLyBITFMgaXMgYSBzb3VyY2UgaGFuZGxlciwgbm90IGEgdGVjaC4gTWFrZSBzdXJlIGF0dGVtcHRzIHRvIHVzZSBpdFxuLy8gYXMgb25lIGRvIG5vdCBjYXVzZSBleGNlcHRpb25zLlxuXG5cbkhscyQxLmNhblBsYXlTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB2aWRlb2pzJDEubG9nLndhcm4oJ0hMUyBpcyBubyBsb25nZXIgYSB0ZWNoLiBQbGVhc2UgcmVtb3ZlIGl0IGZyb20gJyArICd5b3VyIHBsYXllclxcJ3MgdGVjaE9yZGVyLicpO1xufTtcblxudmFyIGVtZUtleVN5c3RlbXMgPSBmdW5jdGlvbiBlbWVLZXlTeXN0ZW1zKGtleVN5c3RlbU9wdGlvbnMsIHZpZGVvUGxheWxpc3QsIGF1ZGlvUGxheWxpc3QpIHtcbiAgaWYgKCFrZXlTeXN0ZW1PcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVN5c3RlbU9wdGlvbnM7XG4gIH0gLy8gdXBzZXJ0IHRoZSBjb250ZW50IHR5cGVzIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBwbGF5bGlzdFxuXG5cbiAgdmFyIGtleVN5c3RlbUNvbnRlbnRUeXBlcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleVN5c3RlbSBpbiBrZXlTeXN0ZW1PcHRpb25zKSB7XG4gICAga2V5U3lzdGVtQ29udGVudFR5cGVzW2tleVN5c3RlbV0gPSB7XG4gICAgICBhdWRpb0NvbnRlbnRUeXBlOiAnYXVkaW8vbXA0OyBjb2RlY3M9XCInICsgYXVkaW9QbGF5bGlzdC5hdHRyaWJ1dGVzLkNPREVDUyArICdcIicsXG4gICAgICB2aWRlb0NvbnRlbnRUeXBlOiAndmlkZW8vbXA0OyBjb2RlY3M9XCInICsgdmlkZW9QbGF5bGlzdC5hdHRyaWJ1dGVzLkNPREVDUyArICdcIidcbiAgICB9O1xuXG4gICAgaWYgKHZpZGVvUGxheWxpc3QuY29udGVudFByb3RlY3Rpb24gJiYgdmlkZW9QbGF5bGlzdC5jb250ZW50UHJvdGVjdGlvbltrZXlTeXN0ZW1dICYmIHZpZGVvUGxheWxpc3QuY29udGVudFByb3RlY3Rpb25ba2V5U3lzdGVtXS5wc3NoKSB7XG4gICAgICBrZXlTeXN0ZW1Db250ZW50VHlwZXNba2V5U3lzdGVtXS5wc3NoID0gdmlkZW9QbGF5bGlzdC5jb250ZW50UHJvdGVjdGlvbltrZXlTeXN0ZW1dLnBzc2g7XG4gICAgfSAvLyB2aWRlb2pzLWNvbnRyaWItZW1lIGFjY2VwdHMgdGhlIG9wdGlvbiBvZiBzcGVjaWZ5aW5nOiAnY29tLnNvbWUuY2RtJzogJ3VybCdcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHByZXZlbnQgb3ZlcndyaXRpbmcgdGhlIFVSTCBlbnRpcmVseVxuXG5cbiAgICBpZiAodHlwZW9mIGtleVN5c3RlbU9wdGlvbnNba2V5U3lzdGVtXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGtleVN5c3RlbUNvbnRlbnRUeXBlc1trZXlTeXN0ZW1dLnVybCA9IGtleVN5c3RlbU9wdGlvbnNba2V5U3lzdGVtXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhrZXlTeXN0ZW1PcHRpb25zLCBrZXlTeXN0ZW1Db250ZW50VHlwZXMpO1xufTtcblxudmFyIHNldHVwRW1lT3B0aW9ucyA9IGZ1bmN0aW9uIHNldHVwRW1lT3B0aW9ucyhobHNIYW5kbGVyKSB7XG4gIGlmIChobHNIYW5kbGVyLm9wdGlvbnNfLnNvdXJjZVR5cGUgIT09ICdkYXNoJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwbGF5ZXIgPSB2aWRlb2pzJDEucGxheWVyc1tobHNIYW5kbGVyLnRlY2hfLm9wdGlvbnNfLnBsYXllcklkXTtcblxuICBpZiAocGxheWVyLmVtZSkge1xuICAgIHZhciBzb3VyY2VPcHRpb25zID0gZW1lS2V5U3lzdGVtcyhobHNIYW5kbGVyLnNvdXJjZV8ua2V5U3lzdGVtcywgaGxzSGFuZGxlci5wbGF5bGlzdHMubWVkaWEoKSwgaGxzSGFuZGxlci5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyLm1lZGlhKCkpO1xuXG4gICAgaWYgKHNvdXJjZU9wdGlvbnMpIHtcbiAgICAgIHBsYXllci5jdXJyZW50U291cmNlKCkua2V5U3lzdGVtcyA9IHNvdXJjZU9wdGlvbnM7IC8vIHdvcmtzIGFyb3VuZCBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04OTU0NDlcblxuICAgICAgaWYgKHBsYXllci5lbWUuaW5pdGlhbGl6ZU1lZGlhS2V5cykge1xuICAgICAgICBwbGF5ZXIuZW1lLmluaXRpYWxpemVNZWRpYUtleXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBnZXRWaHNMb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiBnZXRWaHNMb2NhbFN0b3JhZ2UoKSB7XG4gIGlmICghd2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHN0b3JlZE9iamVjdCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWSQxKTtcblxuICBpZiAoIXN0b3JlZE9iamVjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdG9yZWRPYmplY3QpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gc29tZW9uZSBtYXkgaGF2ZSB0YW1wZXJlZCB3aXRoIHRoZSB2YWx1ZVxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgdXBkYXRlVmhzTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gdXBkYXRlVmhzTG9jYWxTdG9yYWdlKG9wdGlvbnMpIHtcbiAgaWYgKCF3aW5kb3cubG9jYWxTdG9yYWdlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG9iamVjdFRvU3RvcmUgPSBnZXRWaHNMb2NhbFN0b3JhZ2UoKTtcbiAgb2JqZWN0VG9TdG9yZSA9IG9iamVjdFRvU3RvcmUgPyB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKG9iamVjdFRvU3RvcmUsIG9wdGlvbnMpIDogb3B0aW9ucztcblxuICB0cnkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWSQxLCBKU09OLnN0cmluZ2lmeShvYmplY3RUb1N0b3JlKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUaHJvd3MgaWYgc3RvcmFnZSBpcyBmdWxsIChlLmcuLCBhbHdheXMgb24gaU9TIDUrIFNhZmFyaSBwcml2YXRlIG1vZGUsIHdoZXJlXG4gICAgLy8gc3RvcmFnZSBpcyBzZXQgdG8gMCkuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N0b3JhZ2Uvc2V0SXRlbSNFeGNlcHRpb25zXG4gICAgLy8gTm8gbmVlZCB0byBwZXJmb3JtIGFueSBvcGVyYXRpb24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFRvU3RvcmU7XG59O1xuLyoqXG4gKiBXaGV0aGVyIHRoZSBicm93c2VyIGhhcyBidWlsdC1pbiBITFMgc3VwcG9ydC5cbiAqL1xuXG5cbkhscyQxLnN1cHBvcnRzTmF0aXZlSGxzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpOyAvLyBuYXRpdmUgSExTIGlzIGRlZmluaXRlbHkgbm90IHN1cHBvcnRlZCBpZiBIVE1MNSB2aWRlbyBpc24ndFxuXG4gIGlmICghdmlkZW9qcyQxLmdldFRlY2goJ0h0bWw1JykuaXNTdXBwb3J0ZWQoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBITFMgbWFuaWZlc3RzIGNhbiBnbyBieSBtYW55IG1pbWUtdHlwZXNcblxuXG4gIHZhciBjYW5QbGF5ID0gWy8vIEFwcGxlIHNhbnRpb25lZFxuICAnYXBwbGljYXRpb24vdm5kLmFwcGxlLm1wZWd1cmwnLCAvLyBBcHBsZSBzYW5jdGlvbmVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAnYXVkaW8vbXBlZ3VybCcsIC8vIFZlcnkgY29tbW9uXG4gICdhdWRpby94LW1wZWd1cmwnLCAvLyBWZXJ5IGNvbW1vblxuICAnYXBwbGljYXRpb24veC1tcGVndXJsJywgLy8gSW5jbHVkZWQgZm9yIGNvbXBsZXRlbmVzc1xuICAndmlkZW8veC1tcGVndXJsJywgJ3ZpZGVvL21wZWd1cmwnLCAnYXBwbGljYXRpb24vbXBlZ3VybCddO1xuICByZXR1cm4gY2FuUGxheS5zb21lKGZ1bmN0aW9uIChjYW5JdFBsYXkpIHtcbiAgICByZXR1cm4gL21heWJlfHByb2JhYmx5L2kudGVzdCh2aWRlby5jYW5QbGF5VHlwZShjYW5JdFBsYXkpKTtcbiAgfSk7XG59KCk7XG5cbkhscyQxLnN1cHBvcnRzTmF0aXZlRGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF2aWRlb2pzJDEuZ2V0VGVjaCgnSHRtbDUnKS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIC9tYXliZXxwcm9iYWJseS9pLnRlc3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKS5jYW5QbGF5VHlwZSgnYXBwbGljYXRpb24vZGFzaCt4bWwnKSk7XG59KCk7XG5cbkhscyQxLnN1cHBvcnRzVHlwZU5hdGl2ZWx5ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdobHMnKSB7XG4gICAgcmV0dXJuIEhscyQxLnN1cHBvcnRzTmF0aXZlSGxzO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdkYXNoJykge1xuICAgIHJldHVybiBIbHMkMS5zdXBwb3J0c05hdGl2ZURhc2g7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBITFMgaXMgYSBzb3VyY2UgaGFuZGxlciwgbm90IGEgdGVjaC4gTWFrZSBzdXJlIGF0dGVtcHRzIHRvIHVzZSBpdFxuICogYXMgb25lIGRvIG5vdCBjYXVzZSBleGNlcHRpb25zLlxuICovXG5cblxuSGxzJDEuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB2aWRlb2pzJDEubG9nLndhcm4oJ0hMUyBpcyBubyBsb25nZXIgYSB0ZWNoLiBQbGVhc2UgcmVtb3ZlIGl0IGZyb20gJyArICd5b3VyIHBsYXllclxcJ3MgdGVjaE9yZGVyLicpO1xufTtcblxudmFyIENvbXBvbmVudCQxID0gdmlkZW9qcyQxLmdldENvbXBvbmVudCgnQ29tcG9uZW50Jyk7XG4vKipcbiAqIFRoZSBIbHMgSGFuZGxlciBvYmplY3QsIHdoZXJlIHdlIG9yY2hlc3RyYXRlIGFsbCBvZiB0aGUgcGFydHNcbiAqIG9mIEhMUyB0byBpbnRlcmFjdCB3aXRoIHZpZGVvLmpzXG4gKlxuICogQGNsYXNzIEhsc0hhbmRsZXJcbiAqIEBleHRlbmRzIHZpZGVvanMuQ29tcG9uZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIHRoZSBzb3J1Y2Ugb2JqZWN0XG4gKiBAcGFyYW0ge1RlY2h9IHRlY2ggdGhlIHBhcmVudCB0ZWNoIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgb3B0aW9uYWwgYW5kIHJlcXVpcmVkIG9wdGlvbnNcbiAqL1xuXG52YXIgSGxzSGFuZGxlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKEhsc0hhbmRsZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhsc0hhbmRsZXIoc291cmNlLCB0ZWNoLCBvcHRpb25zKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgSGxzSGFuZGxlcik7IC8vIHRlY2gucGxheWVyKCkgaXMgZGVwcmVjYXRlZCBidXQgc2V0dXAgYSByZWZlcmVuY2UgdG8gSExTIGZvclxuICAgIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIbHNIYW5kbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGxzSGFuZGxlcikpLmNhbGwodGhpcywgdGVjaCwgb3B0aW9ucy5obHMpKTtcblxuICAgIGlmICh0ZWNoLm9wdGlvbnNfICYmIHRlY2gub3B0aW9uc18ucGxheWVySWQpIHtcbiAgICAgIHZhciBfcGxheWVyID0gdmlkZW9qcyQxKHRlY2gub3B0aW9uc18ucGxheWVySWQpO1xuXG4gICAgICBpZiAoIV9wbGF5ZXIuaGFzT3duUHJvcGVydHkoJ2hscycpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcGxheWVyLCAnaGxzJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdwbGF5ZXIuaGxzIGlzIGRlcHJlY2F0ZWQuIFVzZSBwbGF5ZXIudGVjaCgpLmhscyBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgdGVjaC50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICAgICAgbmFtZTogJ2hscy1wbGF5ZXItYWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIFNldCB1cCBhIHJlZmVyZW5jZSB0byB0aGUgSGxzSGFuZGxlciBmcm9tIHBsYXllci52aHMuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIHN0YXJ0XG4gICAgICAvLyBtaWdyYXRpbmcgZnJvbSBwbGF5ZXIudGVjaF8uaGxzLi4uIHRvIHBsYXllci52aHMuLi4gZm9yIEFQSSBhY2Nlc3MuIEFsdGhvdWdoIHRoaXNcbiAgICAgIC8vIGlzbid0IHRoZSBtb3N0IGFwcHJvcHJpYXRlIGZvcm0gb2YgcmVmZXJlbmNlIGZvciB2aWRlby5qcyAoc2luY2UgYWxsIEFQSXMgc2hvdWxkXG4gICAgICAvLyBiZSBwcm92aWRlZCB0aHJvdWdoIGNvcmUgdmlkZW8uanMpLCBpdCBpcyBhIGNvbW1vbiBwYXR0ZXJuIGZvciBwbHVnaW5zLCBhbmQgdmhzXG4gICAgICAvLyB3aWxsIGFjdCBhY2NvcmRpbmdseS5cblxuXG4gICAgICBfcGxheWVyLnZocyA9IF90aGlzOyAvLyBkZXByZWNhdGVkLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuICAgICAgX3BsYXllci5kYXNoID0gX3RoaXM7XG4gICAgICBfdGhpcy5wbGF5ZXJfID0gX3BsYXllcjtcbiAgICB9XG5cbiAgICBfdGhpcy50ZWNoXyA9IHRlY2g7XG4gICAgX3RoaXMuc291cmNlXyA9IHNvdXJjZTtcbiAgICBfdGhpcy5zdGF0cyA9IHt9O1xuXG4gICAgX3RoaXMuc2V0T3B0aW9uc18oKTtcblxuICAgIGlmIChfdGhpcy5vcHRpb25zXy5vdmVycmlkZU5hdGl2ZSAmJiB0ZWNoLm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3MgJiYgdGVjaC5vdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzKSB7XG4gICAgICB0ZWNoLm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3ModHJ1ZSk7XG4gICAgICB0ZWNoLm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3ModHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5vcHRpb25zXy5vdmVycmlkZU5hdGl2ZSAmJiAodGVjaC5mZWF0dXJlc05hdGl2ZVZpZGVvVHJhY2tzIHx8IHRlY2guZmVhdHVyZXNOYXRpdmVBdWRpb1RyYWNrcykpIHtcbiAgICAgIC8vIG92ZXJyaWRpbmcgbmF0aXZlIEhMUyBvbmx5IHdvcmtzIGlmIGF1ZGlvIHRyYWNrcyBoYXZlIGJlZW4gZW11bGF0ZWRcbiAgICAgIC8vIGVycm9yIGVhcmx5IGlmIHdlJ3JlIG1pc2NvbmZpZ3VyZWRcbiAgICAgIHRocm93IG5ldyBFcnJvcignT3ZlcnJpZGluZyBuYXRpdmUgSExTIHJlcXVpcmVzIGVtdWxhdGVkIHRyYWNrcy4gJyArICdTZWUgaHR0cHM6Ly9naXQuaW8vdk1wakInKTtcbiAgICB9IC8vIGxpc3RlbiBmb3IgZnVsbHNjcmVlbmNoYW5nZSBldmVudHMgZm9yIHRoaXMgcGxheWVyIHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gYWRqdXN0IG91ciBxdWFsaXR5IHNlbGVjdGlvbiBxdWlja2x5XG5cblxuICAgIF90aGlzLm9uKGRvY3VtZW50LCBbJ2Z1bGxzY3JlZW5jaGFuZ2UnLCAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsICdtb3pmdWxsc2NyZWVuY2hhbmdlJywgJ01TRnVsbHNjcmVlbkNoYW5nZSddLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7XG5cbiAgICAgIGlmIChmdWxsc2NyZWVuRWxlbWVudCAmJiBmdWxsc2NyZWVuRWxlbWVudC5jb250YWlucyhfdGhpcy50ZWNoXy5lbCgpKSkge1xuICAgICAgICBfdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNtb290aFF1YWxpdHlDaGFuZ2VfKCk7XG4gICAgICB9XG4gICAgfSk7IC8vIEhhbmRsZSBzZWVraW5nIHdoZW4gbG9vcGluZyAtIG1pZGRsZXdhcmUgZG9lc24ndCBoYW5kbGUgdGhpcyBzZWVrIGV2ZW50IGZyb20gdGhlIHRlY2hcblxuXG4gICAgX3RoaXMub24oX3RoaXMudGVjaF8sICdzZWVraW5nJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMudGVjaF8uY3VycmVudFRpbWUoKSA9PT0gMCAmJiB0aGlzLnRlY2hfLnBsYXllcl8ubG9vcCgpKSB7XG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy50ZWNoXywgJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXykge1xuICAgICAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ucGF1c2VMb2FkaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy50ZWNoXywgJ3BsYXknLCBfdGhpcy5wbGF5KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKEhsc0hhbmRsZXIsIFt7XG4gICAga2V5OiAnc2V0T3B0aW9uc18nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zXygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzOyAvLyBkZWZhdWx0c1xuXG5cbiAgICAgIHRoaXMub3B0aW9uc18ud2l0aENyZWRlbnRpYWxzID0gdGhpcy5vcHRpb25zXy53aXRoQ3JlZGVudGlhbHMgfHwgZmFsc2U7XG4gICAgICB0aGlzLm9wdGlvbnNfLmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzID0gdGhpcy5vcHRpb25zXy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyB8fCBmYWxzZTtcbiAgICAgIHRoaXMub3B0aW9uc18ubGltaXRSZW5kaXRpb25CeVBsYXllckRpbWVuc2lvbnMgPSB0aGlzLm9wdGlvbnNfLmxpbWl0UmVuZGl0aW9uQnlQbGF5ZXJEaW1lbnNpb25zID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIHRoaXMub3B0aW9uc18uc21vb3RoUXVhbGl0eUNoYW5nZSA9IHRoaXMub3B0aW9uc18uc21vb3RoUXVhbGl0eUNoYW5nZSB8fCBmYWxzZTtcbiAgICAgIHRoaXMub3B0aW9uc18udXNlQmFuZHdpZHRoRnJvbUxvY2FsU3RvcmFnZSA9IHR5cGVvZiB0aGlzLnNvdXJjZV8udXNlQmFuZHdpZHRoRnJvbUxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNvdXJjZV8udXNlQmFuZHdpZHRoRnJvbUxvY2FsU3RvcmFnZSA6IHRoaXMub3B0aW9uc18udXNlQmFuZHdpZHRoRnJvbUxvY2FsU3RvcmFnZSB8fCBmYWxzZTtcbiAgICAgIHRoaXMub3B0aW9uc18uY3VzdG9tVGFnUGFyc2VycyA9IHRoaXMub3B0aW9uc18uY3VzdG9tVGFnUGFyc2VycyB8fCBbXTtcbiAgICAgIHRoaXMub3B0aW9uc18uY3VzdG9tVGFnTWFwcGVycyA9IHRoaXMub3B0aW9uc18uY3VzdG9tVGFnTWFwcGVycyB8fCBbXTtcbiAgICAgIHRoaXMub3B0aW9uc18uY2FjaGVFbmNyeXB0aW9uS2V5cyA9IHRoaXMub3B0aW9uc18uY2FjaGVFbmNyeXB0aW9uS2V5cyB8fCBmYWxzZTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnNfLmJsYWNrbGlzdER1cmF0aW9uICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLm9wdGlvbnNfLmJsYWNrbGlzdER1cmF0aW9uID0gNSAqIDYwO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9uc18uYmFuZHdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zXy51c2VCYW5kd2lkdGhGcm9tTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgdmFyIHN0b3JlZE9iamVjdCA9IGdldFZoc0xvY2FsU3RvcmFnZSgpO1xuXG4gICAgICAgICAgaWYgKHN0b3JlZE9iamVjdCAmJiBzdG9yZWRPYmplY3QuYmFuZHdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNfLmJhbmR3aWR0aCA9IHN0b3JlZE9iamVjdC5iYW5kd2lkdGg7XG4gICAgICAgICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgICAgICBuYW1lOiAnaGxzLWJhbmR3aWR0aC1mcm9tLWxvY2FsLXN0b3JhZ2UnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RvcmVkT2JqZWN0ICYmIHN0b3JlZE9iamVjdC50aHJvdWdocHV0KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNfLnRocm91Z2hwdXQgPSBzdG9yZWRPYmplY3QudGhyb3VnaHB1dDtcbiAgICAgICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgICAgIG5hbWU6ICdobHMtdGhyb3VnaHB1dC1mcm9tLWxvY2FsLXN0b3JhZ2UnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gaWYgYmFuZHdpZHRoIHdhcyBub3Qgc2V0IGJ5IG9wdGlvbnMgb3IgcHVsbGVkIGZyb20gbG9jYWwgc3RvcmFnZSwgc3RhcnQgcGxheWxpc3RcbiAgICAgIC8vIHNlbGVjdGlvbiBhdCBhIHJlYXNvbmFibGUgYmFuZHdpZHRoXG5cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnNfLmJhbmR3aWR0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zXy5iYW5kd2lkdGggPSBDb25maWcuSU5JVElBTF9CQU5EV0lEVEg7XG4gICAgICB9IC8vIElmIHRoZSBiYW5kd2lkdGggbnVtYmVyIGlzIHVuY2hhbmdlZCBmcm9tIHRoZSBpbml0aWFsIHNldHRpbmdcbiAgICAgIC8vIHRoZW4gdGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIGVuYWJsZUxvd0luaXRpYWxQbGF5bGlzdCBvcHRpb25cblxuXG4gICAgICB0aGlzLm9wdGlvbnNfLmVuYWJsZUxvd0luaXRpYWxQbGF5bGlzdCA9IHRoaXMub3B0aW9uc18uZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0ICYmIHRoaXMub3B0aW9uc18uYmFuZHdpZHRoID09PSBDb25maWcuSU5JVElBTF9CQU5EV0lEVEg7IC8vIGdyYWIgb3B0aW9ucyBwYXNzZWQgdG8gcGxheWVyLnNyY1xuXG4gICAgICBbJ3dpdGhDcmVkZW50aWFscycsICdsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucycsICdiYW5kd2lkdGgnLCAnc21vb3RoUXVhbGl0eUNoYW5nZScsICdjdXN0b21UYWdQYXJzZXJzJywgJ2N1c3RvbVRhZ01hcHBlcnMnLCAnaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMnLCAnY2FjaGVFbmNyeXB0aW9uS2V5cyddLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIF90aGlzMi5zb3VyY2VfW29wdGlvbl0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgX3RoaXMyLm9wdGlvbnNfW29wdGlvbl0gPSBfdGhpczIuc291cmNlX1tvcHRpb25dO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMubGltaXRSZW5kaXRpb25CeVBsYXllckRpbWVuc2lvbnMgPSB0aGlzLm9wdGlvbnNfLmxpbWl0UmVuZGl0aW9uQnlQbGF5ZXJEaW1lbnNpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjYWxsZWQgd2hlbiBwbGF5ZXIuc3JjIGdldHMgY2FsbGVkLCBoYW5kbGUgYSBuZXcgc291cmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjIHRoZSBzb3VyY2Ugb2JqZWN0IHRvIGhhbmRsZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzcmMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzcmMoX3NyYywgdHlwZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7IC8vIGRvIG5vdGhpbmcgaWYgdGhlIHNyYyBpcyBmYWxzZXlcblxuXG4gICAgICBpZiAoIV9zcmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldE9wdGlvbnNfKCk7IC8vIGFkZCBtYXN0ZXIgcGxheWxpc3QgY29udHJvbGxlciBvcHRpb25zXG5cbiAgICAgIHRoaXMub3B0aW9uc18udXJsID0gdGhpcy5zb3VyY2VfLnNyYztcbiAgICAgIHRoaXMub3B0aW9uc18udGVjaCA9IHRoaXMudGVjaF87XG4gICAgICB0aGlzLm9wdGlvbnNfLmV4dGVybkhscyA9IEhscyQxO1xuICAgICAgdGhpcy5vcHRpb25zXy5zb3VyY2VUeXBlID0gc2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlKHR5cGUpOyAvLyBXaGVuZXZlciB3ZSBzZWVrIGludGVybmFsbHksIHdlIHNob3VsZCB1cGRhdGUgYm90aCB0aGUgdGVjaCBhbmQgY2FsbCBvdXIgb3duXG4gICAgICAvLyBzZXRDdXJyZW50VGltZSBmdW5jdGlvbi4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBcInNlZWtpbmdcIiBldmVudHMgYXJlbid0IGFsd2F5c1xuICAgICAgLy8gcmVsaWFibGUuIEV4dGVybmFsIHNlZWtzICh2aWEgdGhlIHBsYXllciBvYmplY3QpIGFyZSBoYW5kbGVkIHZpYSBtaWRkbGV3YXJlLlxuXG4gICAgICB0aGlzLm9wdGlvbnNfLnNlZWtUbyA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIF90aGlzMy50ZWNoXy5zZXRDdXJyZW50VGltZSh0aW1lKTtcblxuICAgICAgICBfdGhpczMuc2V0Q3VycmVudFRpbWUodGltZSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8gPSBuZXcgTWFzdGVyUGxheWxpc3RDb250cm9sbGVyKHRoaXMub3B0aW9uc18pO1xuICAgICAgdGhpcy5wbGF5YmFja1dhdGNoZXJfID0gbmV3IFBsYXliYWNrV2F0Y2hlcih2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHRoaXMub3B0aW9uc18sIHtcbiAgICAgICAgc2Vla2FibGU6IGZ1bmN0aW9uIHNlZWthYmxlJCQxKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2Vla2FibGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVkaWE6IGZ1bmN0aW9uIG1lZGlhKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYSgpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGxheWVyID0gdmlkZW9qcyQxLnBsYXllcnNbX3RoaXMzLnRlY2hfLm9wdGlvbnNfLnBsYXllcklkXTtcbiAgICAgICAgcGxheWVyLmVycm9yKF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLmVycm9yKTtcbiAgICAgIH0pOyAvLyBgdGhpc2AgaW4gc2VsZWN0UGxheWxpc3Qgc2hvdWxkIGJlIHRoZSBIbHNIYW5kbGVyIGZvciBiYWNrd2FyZHNcbiAgICAgIC8vIGNvbXBhdGliaWxpdHkgd2l0aCA8IHYyXG5cbiAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5zZWxlY3RQbGF5bGlzdCA9IHRoaXMuc2VsZWN0UGxheWxpc3QgPyB0aGlzLnNlbGVjdFBsYXlsaXN0LmJpbmQodGhpcykgOiBIbHMkMS5TVEFOREFSRF9QTEFZTElTVF9TRUxFQ1RPUi5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNlbGVjdEluaXRpYWxQbGF5bGlzdCA9IEhscyQxLklOSVRJQUxfUExBWUxJU1RfU0VMRUNUT1IuYmluZCh0aGlzKTsgLy8gcmUtZXhwb3NlIHNvbWUgaW50ZXJuYWwgb2JqZWN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCA8IHYyXG5cbiAgICAgIHRoaXMucGxheWxpc3RzID0gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1hc3RlclBsYXlsaXN0TG9hZGVyXztcbiAgICAgIHRoaXMubWVkaWFTb3VyY2UgPSB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWVkaWFTb3VyY2U7IC8vIFByb3h5IGFzc2lnbm1lbnQgb2Ygc29tZSBwcm9wZXJ0aWVzIHRvIHRoZSBtYXN0ZXIgcGxheWxpc3RcbiAgICAgIC8vIGNvbnRyb2xsZXIuIFVzaW5nIGEgY3VzdG9tIHByb3BlcnR5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgLy8gd2l0aCA8IHYyXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgc2VsZWN0UGxheWxpc3Q6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8uc2VsZWN0UGxheWxpc3Q7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShzZWxlY3RQbGF5bGlzdCkge1xuICAgICAgICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNlbGVjdFBsYXlsaXN0ID0gc2VsZWN0UGxheWxpc3QuYmluZCh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRocm91Z2hwdXQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWFpblNlZ21lbnRMb2FkZXJfLnRocm91Z2hwdXQucmF0ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKHRocm91Z2hwdXQpIHtcbiAgICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tYWluU2VnbWVudExvYWRlcl8udGhyb3VnaHB1dC5yYXRlID0gdGhyb3VnaHB1dDsgLy8gQnkgc2V0dGluZyBgY291bnRgIHRvIDEgdGhlIHRocm91Z2hwdXQgdmFsdWUgYmVjb21lcyB0aGUgc3RhcnRpbmcgdmFsdWVcbiAgICAgICAgICAgIC8vIGZvciB0aGUgY3VtdWxhdGl2ZSBhdmVyYWdlXG5cbiAgICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tYWluU2VnbWVudExvYWRlcl8udGhyb3VnaHB1dC5jb3VudCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiYW5kd2lkdGg6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWFpblNlZ21lbnRMb2FkZXJfLmJhbmR3aWR0aDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKGJhbmR3aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1haW5TZWdtZW50TG9hZGVyXy5iYW5kd2lkdGggPSBiYW5kd2lkdGg7IC8vIHNldHRpbmcgdGhlIGJhbmR3aWR0aCBtYW51YWxseSByZXNldHMgdGhlIHRocm91Z2hwdXQgY291bnRlclxuICAgICAgICAgICAgLy8gYGNvdW50YCBpcyBzZXQgdG8gemVybyB0aGF0IGN1cnJlbnQgdmFsdWUgb2YgYHJhdGVgIGlzbid0IGluY2x1ZGVkXG4gICAgICAgICAgICAvLyBpbiB0aGUgY3VtdWxhdGl2ZSBhdmVyYWdlXG5cbiAgICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tYWluU2VnbWVudExvYWRlcl8udGhyb3VnaHB1dCA9IHtcbiAgICAgICAgICAgICAgcmF0ZTogMCxcbiAgICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBgc3lzdGVtQmFuZHdpZHRoYCBpcyBhIGNvbWJpbmF0aW9uIG9mIHR3byBzZXJpYWwgcHJvY2Vzc2VzIGJpdC1yYXRlcy4gVGhlIGZpcnN0XG4gICAgICAgICAqIGlzIHRoZSBuZXR3b3JrIGJpdHJhdGUgcHJvdmlkZWQgYnkgYGJhbmR3aWR0aGAgYW5kIHRoZSBzZWNvbmQgaXMgdGhlIGJpdHJhdGUgb2ZcbiAgICAgICAgICogdGhlIGVudGlyZSBwcm9jZXNzIGFmdGVyIHRoYXQgLSBkZWNyeXB0aW9uLCB0cmFuc211eGluZywgYW5kIGFwcGVuZGluZyAtIHByb3ZpZGVkXG4gICAgICAgICAqIGJ5IGB0aHJvdWdocHV0YC5cbiAgICAgICAgICpcbiAgICAgICAgICogU2luY2UgdGhlIHR3byBwcm9jZXNzIGFyZSBzZXJpYWwsIHRoZSBvdmVyYWxsIHN5c3RlbSBiYW5kd2lkdGggaXMgZ2l2ZW4gYnk6XG4gICAgICAgICAqICAgc3lzQmFuZHdpZHRoID0gMSAvICgxIC8gYmFuZHdpZHRoICsgMSAvIHRocm91Z2hwdXQpXG4gICAgICAgICAqL1xuICAgICAgICBzeXN0ZW1CYW5kd2lkdGg6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHZhciBpbnZCYW5kd2lkdGggPSAxIC8gKHRoaXMuYmFuZHdpZHRoIHx8IDEpO1xuICAgICAgICAgICAgdmFyIGludlRocm91Z2hwdXQgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRocm91Z2hwdXQgPiAwKSB7XG4gICAgICAgICAgICAgIGludlRocm91Z2hwdXQgPSAxIC8gdGhpcy50aHJvdWdocHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaW52VGhyb3VnaHB1dCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzeXN0ZW1CaXRyYXRlID0gTWF0aC5mbG9vcigxIC8gKGludkJhbmR3aWR0aCArIGludlRocm91Z2hwdXQpKTtcbiAgICAgICAgICAgIHJldHVybiBzeXN0ZW1CaXRyYXRlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEoKSB7XG4gICAgICAgICAgICB2aWRlb2pzJDEubG9nLmVycm9yKCdUaGUgXCJzeXN0ZW1CYW5kd2lkdGhcIiBwcm9wZXJ0eSBpcyByZWFkLW9ubHknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zXy5iYW5kd2lkdGgpIHtcbiAgICAgICAgdGhpcy5iYW5kd2lkdGggPSB0aGlzLm9wdGlvbnNfLmJhbmR3aWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9uc18udGhyb3VnaHB1dCkge1xuICAgICAgICB0aGlzLnRocm91Z2hwdXQgPSB0aGlzLm9wdGlvbnNfLnRocm91Z2hwdXQ7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMuc3RhdHMsIHtcbiAgICAgICAgYmFuZHdpZHRoOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmJhbmR3aWR0aCB8fCAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBtZWRpYVJlcXVlc3RzOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWVkaWFSZXF1ZXN0c18oKSB8fCAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBtZWRpYVJlcXVlc3RzQWJvcnRlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhUmVxdWVzdHNBYm9ydGVkXygpIHx8IDA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIG1lZGlhUmVxdWVzdHNUaW1lZG91dDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhUmVxdWVzdHNUaW1lZG91dF8oKSB8fCAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBtZWRpYVJlcXVlc3RzRXJyb3JlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhUmVxdWVzdHNFcnJvcmVkXygpIHx8IDA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIG1lZGlhVHJhbnNmZXJEdXJhdGlvbjoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhVHJhbnNmZXJEdXJhdGlvbl8oKSB8fCAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBtZWRpYUJ5dGVzVHJhbnNmZXJyZWQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYUJ5dGVzVHJhbnNmZXJyZWRfKCkgfHwgMDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgbWVkaWFTZWNvbmRzTG9hZGVkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWVkaWFTZWNvbmRzTG9hZGVkXygpIHx8IDA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGJ1ZmZlcmVkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZVJhbmdlc1RvQXJyYXkoX3RoaXMzLnRlY2hfLmJ1ZmZlcmVkKCkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50VGltZToge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50U291cmNlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLnRlY2hfLmN1cnJlbnRTb3VyY2VfO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50VGVjaDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy50ZWNoXy5uYW1lXztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZHVyYXRpb246IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMudGVjaF8uZHVyYXRpb24oKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgbWFzdGVyOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLnBsYXlsaXN0cy5tYXN0ZXI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHBsYXllckRpbWVuc2lvbnM6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMudGVjaF8uY3VycmVudERpbWVuc2lvbnMoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2Vla2FibGU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lUmFuZ2VzVG9BcnJheShfdGhpczMudGVjaF8uc2Vla2FibGUoKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVzdGFtcDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5OiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLnRlY2hfLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy50ZWNoXy5vbmUoJ2NhbnBsYXknLCB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8uc2V0dXBGaXJzdFBsYXkuYmluZCh0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8pKTtcbiAgICAgIHRoaXMudGVjaF8ub24oJ2JhbmR3aWR0aHVwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzMy5vcHRpb25zXy51c2VCYW5kd2lkdGhGcm9tTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgdXBkYXRlVmhzTG9jYWxTdG9yYWdlKHtcbiAgICAgICAgICAgIGJhbmR3aWR0aDogX3RoaXMzLmJhbmR3aWR0aCxcbiAgICAgICAgICAgIHRocm91Z2hwdXQ6IE1hdGgucm91bmQoX3RoaXMzLnRocm91Z2hwdXQpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm9uKCdzZWxlY3RlZGluaXRpYWxtZWRpYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBtYW51YWwgcmVuZGl0aW9uIG1peC1pbiB0byBIbHNIYW5kbGVyXG4gICAgICAgIHJlbmRpdGlvblNlbGVjdGlvbk1peGluKF90aGlzMyk7XG4gICAgICAgIHNldHVwRW1lT3B0aW9ucyhfdGhpczMpO1xuICAgICAgfSk7IC8vIHRoZSBiYW5kd2lkdGggb2YgdGhlIHByaW1hcnkgc2VnbWVudCBsb2FkZXIgaXMgb3VyIGJlc3RcbiAgICAgIC8vIGVzdGltYXRlIG9mIG92ZXJhbGwgYmFuZHdpZHRoXG5cbiAgICAgIHRoaXMub24odGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLCAncHJvZ3Jlc3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy50ZWNoXy5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuc2V0dXBRdWFsaXR5TGV2ZWxzXygpO1xuICAgICAgfSk7IC8vIGRvIG5vdGhpbmcgaWYgdGhlIHRlY2ggaGFzIGJlZW4gZGlzcG9zZWQgYWxyZWFkeVxuICAgICAgLy8gdGhpcyBjYW4gb2NjdXIgaWYgc29tZW9uZSBzZXRzIHRoZSBzcmMgaW4gcGxheWVyLnJlYWR5KCksIGZvciBpbnN0YW5jZVxuXG4gICAgICBpZiAoIXRoaXMudGVjaF8uZWwoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMudGVjaF8uc3JjKHZpZGVvanMkMS5VUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYVNvdXJjZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgcXVhbGl0eSBsZXZlbHMgYW5kIHNldHMgbGlzdGVuZXJzIHRvIHVwZGF0ZSB0aGVtLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXR1cFF1YWxpdHlMZXZlbHNfXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2V0dXBRdWFsaXR5TGV2ZWxzXycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwUXVhbGl0eUxldmVsc18oKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIHBsYXllciA9IHZpZGVvanMkMS5wbGF5ZXJzW3RoaXMudGVjaF8ub3B0aW9uc18ucGxheWVySWRdO1xuXG4gICAgICBpZiAocGxheWVyICYmIHBsYXllci5xdWFsaXR5TGV2ZWxzKSB7XG4gICAgICAgIHRoaXMucXVhbGl0eUxldmVsc18gPSBwbGF5ZXIucXVhbGl0eUxldmVscygpO1xuICAgICAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ub24oJ3NlbGVjdGVkaW5pdGlhbG1lZGlhJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGhhbmRsZUhsc0xvYWRlZE1ldGFkYXRhKF90aGlzNC5xdWFsaXR5TGV2ZWxzXywgX3RoaXM0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGxheWxpc3RzLm9uKCdtZWRpYWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBoYW5kbGVIbHNNZWRpYUNoYW5nZShfdGhpczQucXVhbGl0eUxldmVsc18sIF90aGlzNC5wbGF5bGlzdHMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQmVnaW4gcGxheWluZyB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnBsYXkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYSB3cmFwcGVyIGFyb3VuZCB0aGUgZnVuY3Rpb24gaW4gTWFzdGVyUGxheWxpc3RDb250cm9sbGVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VycmVudFRpbWUoY3VycmVudFRpbWUpIHtcbiAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5zZXRDdXJyZW50VGltZShjdXJyZW50VGltZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGEgd3JhcHBlciBhcm91bmQgdGhlIGZ1bmN0aW9uIGluIE1hc3RlclBsYXlsaXN0Q29udHJvbGxlclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGR1cmF0aW9uJCQxKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5kdXJhdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBhIHdyYXBwZXIgYXJvdW5kIHRoZSBmdW5jdGlvbiBpbiBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2Vla2FibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrYWJsZSQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8uc2Vla2FibGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWJvcnQgYWxsIG91dHN0YW5kaW5nIHdvcmsgYW5kIGNsZWFudXAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rpc3Bvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgaWYgKHRoaXMucGxheWJhY2tXYXRjaGVyXykge1xuICAgICAgICB0aGlzLnBsYXliYWNrV2F0Y2hlcl8uZGlzcG9zZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfKSB7XG4gICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5kaXNwb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnF1YWxpdHlMZXZlbHNfKSB7XG4gICAgICAgIHRoaXMucXVhbGl0eUxldmVsc18uZGlzcG9zZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wbGF5ZXJfKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnBsYXllcl8udmhzO1xuICAgICAgICBkZWxldGUgdGhpcy5wbGF5ZXJfLmRhc2g7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnBsYXllcl8uaGxzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLmhscykge1xuICAgICAgICBkZWxldGUgdGhpcy50ZWNoXy5obHM7XG4gICAgICB9XG5cbiAgICAgIGdldCQxKEhsc0hhbmRsZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGxzSGFuZGxlci5wcm90b3R5cGUpLCAnZGlzcG9zZScsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29udmVydFRvUHJvZ3JhbVRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9Qcm9ncmFtVGltZSh0aW1lLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGdldFByb2dyYW1UaW1lKHtcbiAgICAgICAgcGxheWxpc3Q6IHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYSgpLFxuICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgIH0gLy8gdGhlIHBsYXllciBtdXN0IGJlIHBsYXlpbmcgYmVmb3JlIGNhbGxpbmcgdGhpc1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWVrVG9Qcm9ncmFtVGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUb1Byb2dyYW1UaW1lJCQxKHByb2dyYW1UaW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHBhdXNlQWZ0ZXJTZWVrID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuICAgICAgdmFyIHJldHJ5Q291bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDI7XG4gICAgICByZXR1cm4gc2Vla1RvUHJvZ3JhbVRpbWUoe1xuICAgICAgICBwcm9ncmFtVGltZTogcHJvZ3JhbVRpbWUsXG4gICAgICAgIHBsYXlsaXN0OiB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWVkaWEoKSxcbiAgICAgICAgcmV0cnlDb3VudDogcmV0cnlDb3VudCxcbiAgICAgICAgcGF1c2VBZnRlclNlZWs6IHBhdXNlQWZ0ZXJTZWVrLFxuICAgICAgICBzZWVrVG86IHRoaXMub3B0aW9uc18uc2Vla1RvLFxuICAgICAgICB0ZWNoOiB0aGlzLm9wdGlvbnNfLnRlY2gsXG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBIbHNIYW5kbGVyO1xufShDb21wb25lbnQkMSk7XG4vKipcbiAqIFRoZSBTb3VyY2UgSGFuZGxlciBvYmplY3QsIHdoaWNoIGluZm9ybXMgdmlkZW8uanMgd2hhdCBhZGRpdGlvbmFsXG4gKiBNSU1FIHR5cGVzIGFyZSBzdXBwb3J0ZWQgYW5kIHNldHMgdXAgcGxheWJhY2suIEl0IGlzIHJlZ2lzdGVyZWRcbiAqIGF1dG9tYXRpY2FsbHkgdG8gdGhlIGFwcHJvcHJpYXRlIHRlY2ggYmFzZWQgb24gdGhlIGNhcGFiaWxpdGllcyBvZlxuICogdGhlIGJyb3dzZXIgaXQgaXMgcnVubmluZyBpbi4gSXQgaXMgbm90IG5lY2Vzc2FyeSB0byB1c2Ugb3IgbW9kaWZ5XG4gKiB0aGlzIG9iamVjdCBpbiBub3JtYWwgdXNhZ2UuXG4gKi9cblxuXG52YXIgSGxzU291cmNlSGFuZGxlciA9IHtcbiAgbmFtZTogJ3ZpZGVvanMtaHR0cC1zdHJlYW1pbmcnLFxuICBWRVJTSU9OOiB2ZXJzaW9uJDEsXG4gIGNhbkhhbmRsZVNvdXJjZTogZnVuY3Rpb24gY2FuSGFuZGxlU291cmNlKHNyY09iaikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbG9jYWxPcHRpb25zID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh2aWRlb2pzJDEub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIEhsc1NvdXJjZUhhbmRsZXIuY2FuUGxheVR5cGUoc3JjT2JqLnR5cGUsIGxvY2FsT3B0aW9ucyk7XG4gIH0sXG4gIGhhbmRsZVNvdXJjZTogZnVuY3Rpb24gaGFuZGxlU291cmNlKHNvdXJjZSwgdGVjaCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICB2YXIgbG9jYWxPcHRpb25zID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh2aWRlb2pzJDEub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGVjaC5obHMgPSBuZXcgSGxzSGFuZGxlcihzb3VyY2UsIHRlY2gsIGxvY2FsT3B0aW9ucyk7XG4gICAgdGVjaC5obHMueGhyID0geGhyRmFjdG9yeSgpO1xuICAgIHRlY2guaGxzLnNyYyhzb3VyY2Uuc3JjLCBzb3VyY2UudHlwZSk7XG4gICAgcmV0dXJuIHRlY2guaGxzO1xuICB9LFxuICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBfdmlkZW9qcyRtZXJnZU9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHZpZGVvanMkMS5vcHRpb25zLCBvcHRpb25zKSxcbiAgICAgICAgb3ZlcnJpZGVOYXRpdmUgPSBfdmlkZW9qcyRtZXJnZU9wdGlvbnMuaGxzLm92ZXJyaWRlTmF0aXZlO1xuXG4gICAgdmFyIHN1cHBvcnRlZFR5cGUgPSBzaW1wbGVUeXBlRnJvbVNvdXJjZVR5cGUodHlwZSk7XG4gICAgdmFyIGNhblVzZU1zZVBsYXliYWNrID0gc3VwcG9ydGVkVHlwZSAmJiAoIUhscyQxLnN1cHBvcnRzVHlwZU5hdGl2ZWx5KHN1cHBvcnRlZFR5cGUpIHx8IG92ZXJyaWRlTmF0aXZlKTtcbiAgICByZXR1cm4gY2FuVXNlTXNlUGxheWJhY2sgPyAnbWF5YmUnIDogJyc7XG4gIH1cbn07XG5cbmlmICh0eXBlb2YgdmlkZW9qcyQxLk1lZGlhU291cmNlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmlkZW9qcyQxLlVSTCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdmlkZW9qcyQxLk1lZGlhU291cmNlID0gTWVkaWFTb3VyY2U7XG4gIHZpZGVvanMkMS5VUkwgPSBVUkwkMTtcbn0gLy8gcmVnaXN0ZXIgc291cmNlIGhhbmRsZXJzIHdpdGggdGhlIGFwcHJvcHJpYXRlIHRlY2hzXG5cblxuaWYgKE1lZGlhU291cmNlLnN1cHBvcnRzTmF0aXZlTWVkaWFTb3VyY2VzKCkpIHtcbiAgdmlkZW9qcyQxLmdldFRlY2goJ0h0bWw1JykucmVnaXN0ZXJTb3VyY2VIYW5kbGVyKEhsc1NvdXJjZUhhbmRsZXIsIDApO1xufVxuXG52aWRlb2pzJDEuSGxzSGFuZGxlciA9IEhsc0hhbmRsZXI7XG52aWRlb2pzJDEuSGxzU291cmNlSGFuZGxlciA9IEhsc1NvdXJjZUhhbmRsZXI7XG52aWRlb2pzJDEuSGxzID0gSGxzJDE7XG5cbmlmICghdmlkZW9qcyQxLnVzZSkge1xuICB2aWRlb2pzJDEucmVnaXN0ZXJDb21wb25lbnQoJ0hscycsIEhscyQxKTtcbn1cblxudmlkZW9qcyQxLm9wdGlvbnMuaGxzID0gdmlkZW9qcyQxLm9wdGlvbnMuaGxzIHx8IHt9O1xuXG5pZiAodmlkZW9qcyQxLnJlZ2lzdGVyUGx1Z2luKSB7XG4gIHZpZGVvanMkMS5yZWdpc3RlclBsdWdpbigncmVsb2FkU291cmNlT25FcnJvcicsIHJlbG9hZFNvdXJjZU9uRXJyb3IpO1xufSBlbHNlIHtcbiAgdmlkZW9qcyQxLnBsdWdpbigncmVsb2FkU291cmNlT25FcnJvcicsIHJlbG9hZFNvdXJjZU9uRXJyb3IpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2aWRlb2pzJDE7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFNhZmVQYXJzZVR1cGxlXG5cbmZ1bmN0aW9uIFNhZmVQYXJzZVR1cGxlKG9iaiwgcmV2aXZlcikge1xuICAgIHZhciBqc29uXG4gICAgdmFyIGVycm9yID0gbnVsbFxuXG4gICAgdHJ5IHtcbiAgICAgICAganNvbiA9IEpTT04ucGFyc2Uob2JqLCByZXZpdmVyKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnJvciA9IGVyclxuICAgIH1cblxuICAgIHJldHVybiBbZXJyb3IsIGpzb25dXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIHZ0dC5qcyBDb250cmlidXRvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIERlZmF1bHQgZXhwb3J0cyBmb3IgTm9kZS4gRXhwb3J0IHRoZSBleHRlbmRlZCB2ZXJzaW9ucyBvZiBWVFRDdWUgYW5kXG4vLyBWVFRSZWdpb24gaW4gTm9kZSBzaW5jZSB3ZSBsaWtlbHkgd2FudCB0aGUgY2FwYWJpbGl0eSB0byBjb252ZXJ0IGJhY2sgYW5kXG4vLyBmb3J0aCBiZXR3ZWVuIEpTT04uIElmIHdlIGRvbid0IHRoZW4gaXQncyBub3QgdGhhdCBiaWcgb2YgYSBkZWFsIHNpbmNlIHdlJ3JlXG4vLyBvZmYgYnJvd3Nlci5cblxudmFyIHdpbmRvdyA9IHJlcXVpcmUoJ2dsb2JhbC93aW5kb3cnKTtcblxudmFyIHZ0dGpzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdlYlZUVDogcmVxdWlyZShcIi4vdnR0LmpzXCIpLFxuICBWVFRDdWU6IHJlcXVpcmUoXCIuL3Z0dGN1ZS5qc1wiKSxcbiAgVlRUUmVnaW9uOiByZXF1aXJlKFwiLi92dHRyZWdpb24uanNcIilcbn07XG5cbndpbmRvdy52dHRqcyA9IHZ0dGpzO1xud2luZG93LldlYlZUVCA9IHZ0dGpzLldlYlZUVDtcblxudmFyIGN1ZVNoaW0gPSB2dHRqcy5WVFRDdWU7XG52YXIgcmVnaW9uU2hpbSA9IHZ0dGpzLlZUVFJlZ2lvbjtcbnZhciBuYXRpdmVWVFRDdWUgPSB3aW5kb3cuVlRUQ3VlO1xudmFyIG5hdGl2ZVZUVFJlZ2lvbiA9IHdpbmRvdy5WVFRSZWdpb247XG5cbnZ0dGpzLnNoaW0gPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LlZUVEN1ZSA9IGN1ZVNoaW07XG4gIHdpbmRvdy5WVFRSZWdpb24gPSByZWdpb25TaGltO1xufTtcblxudnR0anMucmVzdG9yZSA9IGZ1bmN0aW9uKCkge1xuICB3aW5kb3cuVlRUQ3VlID0gbmF0aXZlVlRUQ3VlO1xuICB3aW5kb3cuVlRUUmVnaW9uID0gbmF0aXZlVlRUUmVnaW9uO1xufTtcblxuaWYgKCF3aW5kb3cuVlRUQ3VlKSB7XG4gIHZ0dGpzLnNoaW0oKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgdnR0LmpzIENvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogLSotIE1vZGU6IEphdmE7IHRhYi13aWR0aDogMjsgaW5kZW50LXRhYnMtbW9kZTogbmlsOyBjLWJhc2ljLW9mZnNldDogMiAtKi0gKi9cbi8qIHZpbTogc2V0IHNoaWZ0d2lkdGg9MiB0YWJzdG9wPTIgYXV0b2luZGVudCBjaW5kZW50IGV4cGFuZHRhYjogKi9cbnZhciBfb2JqQ3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIEYoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24obykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09iamVjdC5jcmVhdGUgc2hpbSBvbmx5IGFjY2VwdHMgb25lIHBhcmFtZXRlci4nKTtcbiAgICB9XG4gICAgRi5wcm90b3R5cGUgPSBvO1xuICAgIHJldHVybiBuZXcgRigpO1xuICB9O1xufSkoKTtcblxuLy8gQ3JlYXRlcyBhIG5ldyBQYXJzZXJFcnJvciBvYmplY3QgZnJvbSBhbiBlcnJvckRhdGEgb2JqZWN0LiBUaGUgZXJyb3JEYXRhXG4vLyBvYmplY3Qgc2hvdWxkIGhhdmUgZGVmYXVsdCBjb2RlIGFuZCBtZXNzYWdlIHByb3BlcnRpZXMuIFRoZSBkZWZhdWx0IG1lc3NhZ2Vcbi8vIHByb3BlcnR5IGNhbiBiZSBvdmVycmlkZW4gYnkgcGFzc2luZyBpbiBhIG1lc3NhZ2UgcGFyYW1ldGVyLlxuLy8gU2VlIFBhcnNpbmdFcnJvci5FcnJvcnMgYmVsb3cgZm9yIGFjY2VwdGFibGUgZXJyb3JzLlxuZnVuY3Rpb24gUGFyc2luZ0Vycm9yKGVycm9yRGF0YSwgbWVzc2FnZSkge1xuICB0aGlzLm5hbWUgPSBcIlBhcnNpbmdFcnJvclwiO1xuICB0aGlzLmNvZGUgPSBlcnJvckRhdGEuY29kZTtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCBlcnJvckRhdGEubWVzc2FnZTtcbn1cblBhcnNpbmdFcnJvci5wcm90b3R5cGUgPSBfb2JqQ3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5QYXJzaW5nRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGFyc2luZ0Vycm9yO1xuXG4vLyBQYXJzaW5nRXJyb3IgbWV0YWRhdGEgZm9yIGFjY2VwdGFibGUgUGFyc2luZ0Vycm9ycy5cblBhcnNpbmdFcnJvci5FcnJvcnMgPSB7XG4gIEJhZFNpZ25hdHVyZToge1xuICAgIGNvZGU6IDAsXG4gICAgbWVzc2FnZTogXCJNYWxmb3JtZWQgV2ViVlRUIHNpZ25hdHVyZS5cIlxuICB9LFxuICBCYWRUaW1lU3RhbXA6IHtcbiAgICBjb2RlOiAxLFxuICAgIG1lc3NhZ2U6IFwiTWFsZm9ybWVkIHRpbWUgc3RhbXAuXCJcbiAgfVxufTtcblxuLy8gVHJ5IHRvIHBhcnNlIGlucHV0IGFzIGEgdGltZSBzdGFtcC5cbmZ1bmN0aW9uIHBhcnNlVGltZVN0YW1wKGlucHV0KSB7XG5cbiAgZnVuY3Rpb24gY29tcHV0ZVNlY29uZHMoaCwgbSwgcywgZikge1xuICAgIHJldHVybiAoaCB8IDApICogMzYwMCArIChtIHwgMCkgKiA2MCArIChzIHwgMCkgKyAoZiB8IDApIC8gMTAwMDtcbiAgfVxuXG4gIHZhciBtID0gaW5wdXQubWF0Y2goL14oXFxkKyk6KFxcZHsyfSkoOlxcZHsyfSk/XFwuKFxcZHszfSkvKTtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAobVszXSkge1xuICAgIC8vIFRpbWVzdGFtcCB0YWtlcyB0aGUgZm9ybSBvZiBbaG91cnNdOlttaW51dGVzXTpbc2Vjb25kc10uW21pbGxpc2Vjb25kc11cbiAgICByZXR1cm4gY29tcHV0ZVNlY29uZHMobVsxXSwgbVsyXSwgbVszXS5yZXBsYWNlKFwiOlwiLCBcIlwiKSwgbVs0XSk7XG4gIH0gZWxzZSBpZiAobVsxXSA+IDU5KSB7XG4gICAgLy8gVGltZXN0YW1wIHRha2VzIHRoZSBmb3JtIG9mIFtob3Vyc106W21pbnV0ZXNdLlttaWxsaXNlY29uZHNdXG4gICAgLy8gRmlyc3QgcG9zaXRpb24gaXMgaG91cnMgYXMgaXQncyBvdmVyIDU5LlxuICAgIHJldHVybiBjb21wdXRlU2Vjb25kcyhtWzFdLCBtWzJdLCAwLCAgbVs0XSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGltZXN0YW1wIHRha2VzIHRoZSBmb3JtIG9mIFttaW51dGVzXTpbc2Vjb25kc10uW21pbGxpc2Vjb25kc11cbiAgICByZXR1cm4gY29tcHV0ZVNlY29uZHMoMCwgbVsxXSwgbVsyXSwgbVs0XSk7XG4gIH1cbn1cblxuLy8gQSBzZXR0aW5ncyBvYmplY3QgaG9sZHMga2V5L3ZhbHVlIHBhaXJzIGFuZCB3aWxsIGlnbm9yZSBhbnl0aGluZyBidXQgdGhlIGZpcnN0XG4vLyBhc3NpZ25tZW50IHRvIGEgc3BlY2lmaWMga2V5LlxuZnVuY3Rpb24gU2V0dGluZ3MoKSB7XG4gIHRoaXMudmFsdWVzID0gX29iakNyZWF0ZShudWxsKTtcbn1cblxuU2V0dGluZ3MucHJvdG90eXBlID0ge1xuICAvLyBPbmx5IGFjY2VwdCB0aGUgZmlyc3QgYXNzaWdubWVudCB0byBhbnkga2V5LlxuICBzZXQ6IGZ1bmN0aW9uKGssIHYpIHtcbiAgICBpZiAoIXRoaXMuZ2V0KGspICYmIHYgIT09IFwiXCIpIHtcbiAgICAgIHRoaXMudmFsdWVzW2tdID0gdjtcbiAgICB9XG4gIH0sXG4gIC8vIFJldHVybiB0aGUgdmFsdWUgZm9yIGEga2V5LCBvciBhIGRlZmF1bHQgdmFsdWUuXG4gIC8vIElmICdkZWZhdWx0S2V5JyBpcyBwYXNzZWQgdGhlbiAnZGZsdCcgaXMgYXNzdW1lZCB0byBiZSBhbiBvYmplY3Qgd2l0aFxuICAvLyBhIG51bWJlciBvZiBwb3NzaWJsZSBkZWZhdWx0IHZhbHVlcyBhcyBwcm9wZXJ0aWVzIHdoZXJlICdkZWZhdWx0S2V5JyBpc1xuICAvLyB0aGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgY2hvc2VuOyBvdGhlcndpc2UgaXQncyBhc3N1bWVkIHRvIGJlXG4gIC8vIGEgc2luZ2xlIHZhbHVlLlxuICBnZXQ6IGZ1bmN0aW9uKGssIGRmbHQsIGRlZmF1bHRLZXkpIHtcbiAgICBpZiAoZGVmYXVsdEtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGspID8gdGhpcy52YWx1ZXNba10gOiBkZmx0W2RlZmF1bHRLZXldO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYXMoaykgPyB0aGlzLnZhbHVlc1trXSA6IGRmbHQ7XG4gIH0sXG4gIC8vIENoZWNrIHdoZXRoZXIgd2UgaGF2ZSBhIHZhbHVlIGZvciBhIGtleS5cbiAgaGFzOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgaW4gdGhpcy52YWx1ZXM7XG4gIH0sXG4gIC8vIEFjY2VwdCBhIHNldHRpbmcgaWYgaXRzIG9uZSBvZiB0aGUgZ2l2ZW4gYWx0ZXJuYXRpdmVzLlxuICBhbHQ6IGZ1bmN0aW9uKGssIHYsIGEpIHtcbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IGEubGVuZ3RoOyArK24pIHtcbiAgICAgIGlmICh2ID09PSBhW25dKSB7XG4gICAgICAgIHRoaXMuc2V0KGssIHYpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8vIEFjY2VwdCBhIHNldHRpbmcgaWYgaXRzIGEgdmFsaWQgKHNpZ25lZCkgaW50ZWdlci5cbiAgaW50ZWdlcjogZnVuY3Rpb24oaywgdikge1xuICAgIGlmICgvXi0/XFxkKyQvLnRlc3QodikpIHsgLy8gaW50ZWdlclxuICAgICAgdGhpcy5zZXQoaywgcGFyc2VJbnQodiwgMTApKTtcbiAgICB9XG4gIH0sXG4gIC8vIEFjY2VwdCBhIHNldHRpbmcgaWYgaXRzIGEgdmFsaWQgcGVyY2VudGFnZS5cbiAgcGVyY2VudDogZnVuY3Rpb24oaywgdikge1xuICAgIHZhciBtO1xuICAgIGlmICgobSA9IHYubWF0Y2goL14oW1xcZF17MSwzfSkoXFwuW1xcZF0qKT8lJC8pKSkge1xuICAgICAgdiA9IHBhcnNlRmxvYXQodik7XG4gICAgICBpZiAodiA+PSAwICYmIHYgPD0gMTAwKSB7XG4gICAgICAgIHRoaXMuc2V0KGssIHYpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gcGFyc2UgaW5wdXQgaW50byBncm91cHMgc2VwYXJhdGVkIGJ5ICdncm91cERlbGltJywgYW5kXG4vLyBpbnRlcnByZXRlIGVhY2ggZ3JvdXAgYXMgYSBrZXkvdmFsdWUgcGFpciBzZXBhcmF0ZWQgYnkgJ2tleVZhbHVlRGVsaW0nLlxuZnVuY3Rpb24gcGFyc2VPcHRpb25zKGlucHV0LCBjYWxsYmFjaywga2V5VmFsdWVEZWxpbSwgZ3JvdXBEZWxpbSkge1xuICB2YXIgZ3JvdXBzID0gZ3JvdXBEZWxpbSA/IGlucHV0LnNwbGl0KGdyb3VwRGVsaW0pIDogW2lucHV0XTtcbiAgZm9yICh2YXIgaSBpbiBncm91cHMpIHtcbiAgICBpZiAodHlwZW9mIGdyb3Vwc1tpXSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBrdiA9IGdyb3Vwc1tpXS5zcGxpdChrZXlWYWx1ZURlbGltKTtcbiAgICBpZiAoa3YubGVuZ3RoICE9PSAyKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGsgPSBrdlswXTtcbiAgICB2YXIgdiA9IGt2WzFdO1xuICAgIGNhbGxiYWNrKGssIHYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ3VlKGlucHV0LCBjdWUsIHJlZ2lvbkxpc3QpIHtcbiAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIGlucHV0IGlmIHdlIG5lZWQgdG8gdGhyb3cgYW4gZXJyb3IuXG4gIHZhciBvSW5wdXQgPSBpbnB1dDtcbiAgLy8gNC4xIFdlYlZUVCB0aW1lc3RhbXBcbiAgZnVuY3Rpb24gY29uc3VtZVRpbWVTdGFtcCgpIHtcbiAgICB2YXIgdHMgPSBwYXJzZVRpbWVTdGFtcChpbnB1dCk7XG4gICAgaWYgKHRzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2luZ0Vycm9yKFBhcnNpbmdFcnJvci5FcnJvcnMuQmFkVGltZVN0YW1wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTWFsZm9ybWVkIHRpbWVzdGFtcDogXCIgKyBvSW5wdXQpO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgdGltZSBzdGFtcCBmcm9tIGlucHV0LlxuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvXlteXFxzYS16QS1aLV0rLywgXCJcIik7XG4gICAgcmV0dXJuIHRzO1xuICB9XG5cbiAgLy8gNC40LjIgV2ViVlRUIGN1ZSBzZXR0aW5nc1xuICBmdW5jdGlvbiBjb25zdW1lQ3VlU2V0dGluZ3MoaW5wdXQsIGN1ZSkge1xuICAgIHZhciBzZXR0aW5ncyA9IG5ldyBTZXR0aW5ncygpO1xuXG4gICAgcGFyc2VPcHRpb25zKGlucHV0LCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgc3dpdGNoIChrKSB7XG4gICAgICBjYXNlIFwicmVnaW9uXCI6XG4gICAgICAgIC8vIEZpbmQgdGhlIGxhc3QgcmVnaW9uIHdlIHBhcnNlZCB3aXRoIHRoZSBzYW1lIHJlZ2lvbiBpZC5cbiAgICAgICAgZm9yICh2YXIgaSA9IHJlZ2lvbkxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAocmVnaW9uTGlzdFtpXS5pZCA9PT0gdikge1xuICAgICAgICAgICAgc2V0dGluZ3Muc2V0KGssIHJlZ2lvbkxpc3RbaV0ucmVnaW9uKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ2ZXJ0aWNhbFwiOlxuICAgICAgICBzZXR0aW5ncy5hbHQoaywgdiwgW1wicmxcIiwgXCJsclwiXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImxpbmVcIjpcbiAgICAgICAgdmFyIHZhbHMgPSB2LnNwbGl0KFwiLFwiKSxcbiAgICAgICAgICAgIHZhbHMwID0gdmFsc1swXTtcbiAgICAgICAgc2V0dGluZ3MuaW50ZWdlcihrLCB2YWxzMCk7XG4gICAgICAgIHNldHRpbmdzLnBlcmNlbnQoaywgdmFsczApID8gc2V0dGluZ3Muc2V0KFwic25hcFRvTGluZXNcIiwgZmFsc2UpIDogbnVsbDtcbiAgICAgICAgc2V0dGluZ3MuYWx0KGssIHZhbHMwLCBbXCJhdXRvXCJdKTtcbiAgICAgICAgaWYgKHZhbHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgc2V0dGluZ3MuYWx0KFwibGluZUFsaWduXCIsIHZhbHNbMV0sIFtcInN0YXJ0XCIsIFwibWlkZGxlXCIsIFwiZW5kXCJdKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwb3NpdGlvblwiOlxuICAgICAgICB2YWxzID0gdi5zcGxpdChcIixcIik7XG4gICAgICAgIHNldHRpbmdzLnBlcmNlbnQoaywgdmFsc1swXSk7XG4gICAgICAgIGlmICh2YWxzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHNldHRpbmdzLmFsdChcInBvc2l0aW9uQWxpZ25cIiwgdmFsc1sxXSwgW1wic3RhcnRcIiwgXCJtaWRkbGVcIiwgXCJlbmRcIl0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNpemVcIjpcbiAgICAgICAgc2V0dGluZ3MucGVyY2VudChrLCB2KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYWxpZ25cIjpcbiAgICAgICAgc2V0dGluZ3MuYWx0KGssIHYsIFtcInN0YXJ0XCIsIFwibWlkZGxlXCIsIFwiZW5kXCIsIFwibGVmdFwiLCBcInJpZ2h0XCJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSwgLzovLCAvXFxzLyk7XG5cbiAgICAvLyBBcHBseSBkZWZhdWx0IHZhbHVlcyBmb3IgYW55IG1pc3NpbmcgZmllbGRzLlxuICAgIGN1ZS5yZWdpb24gPSBzZXR0aW5ncy5nZXQoXCJyZWdpb25cIiwgbnVsbCk7XG4gICAgY3VlLnZlcnRpY2FsID0gc2V0dGluZ3MuZ2V0KFwidmVydGljYWxcIiwgXCJcIik7XG4gICAgY3VlLmxpbmUgPSBzZXR0aW5ncy5nZXQoXCJsaW5lXCIsIFwiYXV0b1wiKTtcbiAgICBjdWUubGluZUFsaWduID0gc2V0dGluZ3MuZ2V0KFwibGluZUFsaWduXCIsIFwic3RhcnRcIik7XG4gICAgY3VlLnNuYXBUb0xpbmVzID0gc2V0dGluZ3MuZ2V0KFwic25hcFRvTGluZXNcIiwgdHJ1ZSk7XG4gICAgY3VlLnNpemUgPSBzZXR0aW5ncy5nZXQoXCJzaXplXCIsIDEwMCk7XG4gICAgY3VlLmFsaWduID0gc2V0dGluZ3MuZ2V0KFwiYWxpZ25cIiwgXCJtaWRkbGVcIik7XG4gICAgY3VlLnBvc2l0aW9uID0gc2V0dGluZ3MuZ2V0KFwicG9zaXRpb25cIiwge1xuICAgICAgc3RhcnQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgbWlkZGxlOiA1MCxcbiAgICAgIGVuZDogMTAwLFxuICAgICAgcmlnaHQ6IDEwMFxuICAgIH0sIGN1ZS5hbGlnbik7XG4gICAgY3VlLnBvc2l0aW9uQWxpZ24gPSBzZXR0aW5ncy5nZXQoXCJwb3NpdGlvbkFsaWduXCIsIHtcbiAgICAgIHN0YXJ0OiBcInN0YXJ0XCIsXG4gICAgICBsZWZ0OiBcInN0YXJ0XCIsXG4gICAgICBtaWRkbGU6IFwibWlkZGxlXCIsXG4gICAgICBlbmQ6IFwiZW5kXCIsXG4gICAgICByaWdodDogXCJlbmRcIlxuICAgIH0sIGN1ZS5hbGlnbik7XG4gIH1cblxuICBmdW5jdGlvbiBza2lwV2hpdGVzcGFjZSgpIHtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL15cXHMrLywgXCJcIik7XG4gIH1cblxuICAvLyA0LjEgV2ViVlRUIGN1ZSB0aW1pbmdzLlxuICBza2lwV2hpdGVzcGFjZSgpO1xuICBjdWUuc3RhcnRUaW1lID0gY29uc3VtZVRpbWVTdGFtcCgpOyAgIC8vICgxKSBjb2xsZWN0IGN1ZSBzdGFydCB0aW1lXG4gIHNraXBXaGl0ZXNwYWNlKCk7XG4gIGlmIChpbnB1dC5zdWJzdHIoMCwgMykgIT09IFwiLS0+XCIpIHsgICAgIC8vICgzKSBuZXh0IGNoYXJhY3RlcnMgbXVzdCBtYXRjaCBcIi0tPlwiXG4gICAgdGhyb3cgbmV3IFBhcnNpbmdFcnJvcihQYXJzaW5nRXJyb3IuRXJyb3JzLkJhZFRpbWVTdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTWFsZm9ybWVkIHRpbWUgc3RhbXAgKHRpbWUgc3RhbXBzIG11c3QgYmUgc2VwYXJhdGVkIGJ5ICctLT4nKTogXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgb0lucHV0KTtcbiAgfVxuICBpbnB1dCA9IGlucHV0LnN1YnN0cigzKTtcbiAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgY3VlLmVuZFRpbWUgPSBjb25zdW1lVGltZVN0YW1wKCk7ICAgICAvLyAoNSkgY29sbGVjdCBjdWUgZW5kIHRpbWVcblxuICAvLyA0LjEgV2ViVlRUIGN1ZSBzZXR0aW5ncyBsaXN0LlxuICBza2lwV2hpdGVzcGFjZSgpO1xuICBjb25zdW1lQ3VlU2V0dGluZ3MoaW5wdXQsIGN1ZSk7XG59XG5cbnZhciBFU0NBUEUgPSB7XG4gIFwiJmFtcDtcIjogXCImXCIsXG4gIFwiJmx0O1wiOiBcIjxcIixcbiAgXCImZ3Q7XCI6IFwiPlwiLFxuICBcIiZscm07XCI6IFwiXFx1MjAwZVwiLFxuICBcIiZybG07XCI6IFwiXFx1MjAwZlwiLFxuICBcIiZuYnNwO1wiOiBcIlxcdTAwYTBcIlxufTtcblxudmFyIFRBR19OQU1FID0ge1xuICBjOiBcInNwYW5cIixcbiAgaTogXCJpXCIsXG4gIGI6IFwiYlwiLFxuICB1OiBcInVcIixcbiAgcnVieTogXCJydWJ5XCIsXG4gIHJ0OiBcInJ0XCIsXG4gIHY6IFwic3BhblwiLFxuICBsYW5nOiBcInNwYW5cIlxufTtcblxudmFyIFRBR19BTk5PVEFUSU9OID0ge1xuICB2OiBcInRpdGxlXCIsXG4gIGxhbmc6IFwibGFuZ1wiXG59O1xuXG52YXIgTkVFRFNfUEFSRU5UID0ge1xuICBydDogXCJydWJ5XCJcbn07XG5cbi8vIFBhcnNlIGNvbnRlbnQgaW50byBhIGRvY3VtZW50IGZyYWdtZW50LlxuZnVuY3Rpb24gcGFyc2VDb250ZW50KHdpbmRvdywgaW5wdXQpIHtcbiAgZnVuY3Rpb24gbmV4dFRva2VuKCkge1xuICAgIC8vIENoZWNrIGZvciBlbmQtb2Ytc3RyaW5nLlxuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIENvbnN1bWUgJ24nIGNoYXJhY3RlcnMgZnJvbSB0aGUgaW5wdXQuXG4gICAgZnVuY3Rpb24gY29uc3VtZShyZXN1bHQpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKHJlc3VsdC5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbSA9IGlucHV0Lm1hdGNoKC9eKFtePF0qKSg8W14+XSo+Pyk/Lyk7XG4gICAgLy8gSWYgdGhlcmUgaXMgc29tZSB0ZXh0IGJlZm9yZSB0aGUgbmV4dCB0YWcsIHJldHVybiBpdCwgb3RoZXJ3aXNlIHJldHVyblxuICAgIC8vIHRoZSB0YWcuXG4gICAgcmV0dXJuIGNvbnN1bWUobVsxXSA/IG1bMV0gOiBtWzJdKTtcbiAgfVxuXG4gIC8vIFVuZXNjYXBlIGEgc3RyaW5nICdzJy5cbiAgZnVuY3Rpb24gdW5lc2NhcGUxKGUpIHtcbiAgICByZXR1cm4gRVNDQVBFW2VdO1xuICB9XG4gIGZ1bmN0aW9uIHVuZXNjYXBlKHMpIHtcbiAgICB3aGlsZSAoKG0gPSBzLm1hdGNoKC8mKGFtcHxsdHxndHxscm18cmxtfG5ic3ApOy8pKSkge1xuICAgICAgcyA9IHMucmVwbGFjZShtWzBdLCB1bmVzY2FwZTEpO1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEFkZChjdXJyZW50LCBlbGVtZW50KSB7XG4gICAgcmV0dXJuICFORUVEU19QQVJFTlRbZWxlbWVudC5sb2NhbE5hbWVdIHx8XG4gICAgICAgICAgIE5FRURTX1BBUkVOVFtlbGVtZW50LmxvY2FsTmFtZV0gPT09IGN1cnJlbnQubG9jYWxOYW1lO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIHRoaXMgdGFnLlxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIGFubm90YXRpb24pIHtcbiAgICB2YXIgdGFnTmFtZSA9IFRBR19OQU1FW3R5cGVdO1xuICAgIGlmICghdGFnTmFtZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbGVtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgZWxlbWVudC5sb2NhbE5hbWUgPSB0YWdOYW1lO1xuICAgIHZhciBuYW1lID0gVEFHX0FOTk9UQVRJT05bdHlwZV07XG4gICAgaWYgKG5hbWUgJiYgYW5ub3RhdGlvbikge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IGFubm90YXRpb24udHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHZhciByb290RGl2ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICBjdXJyZW50ID0gcm9vdERpdixcbiAgICAgIHQsXG4gICAgICB0YWdTdGFjayA9IFtdO1xuXG4gIHdoaWxlICgodCA9IG5leHRUb2tlbigpKSAhPT0gbnVsbCkge1xuICAgIGlmICh0WzBdID09PSAnPCcpIHtcbiAgICAgIGlmICh0WzFdID09PSBcIi9cIikge1xuICAgICAgICAvLyBJZiB0aGUgY2xvc2luZyB0YWcgbWF0Y2hlcywgbW92ZSBiYWNrIHVwIHRvIHRoZSBwYXJlbnQgbm9kZS5cbiAgICAgICAgaWYgKHRhZ1N0YWNrLmxlbmd0aCAmJlxuICAgICAgICAgICAgdGFnU3RhY2tbdGFnU3RhY2subGVuZ3RoIC0gMV0gPT09IHQuc3Vic3RyKDIpLnJlcGxhY2UoXCI+XCIsIFwiXCIpKSB7XG4gICAgICAgICAgdGFnU3RhY2sucG9wKCk7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UganVzdCBpZ25vcmUgdGhlIGVuZCB0YWcuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHRzID0gcGFyc2VUaW1lU3RhbXAodC5zdWJzdHIoMSwgdC5sZW5ndGggLSAyKSk7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIGlmICh0cykge1xuICAgICAgICAvLyBUaW1lc3RhbXBzIGFyZSBsZWFkIG5vZGVzIGFzIHdlbGwuXG4gICAgICAgIG5vZGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uKFwidGltZXN0YW1wXCIsIHRzKTtcbiAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbSA9IHQubWF0Y2goL148KFteLlxccy8wLTk+XSspKFxcLlteXFxzXFxcXD5dKyk/KFtePlxcXFxdKyk/KFxcXFw/KT4/JC8pO1xuICAgICAgLy8gSWYgd2UgY2FuJ3QgcGFyc2UgdGhlIHRhZywgc2tpcCB0byB0aGUgbmV4dCB0YWcuXG4gICAgICBpZiAoIW0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBUcnkgdG8gY29uc3RydWN0IGFuIGVsZW1lbnQsIGFuZCBpZ25vcmUgdGhlIHRhZyBpZiB3ZSBjb3VsZG4ndC5cbiAgICAgIG5vZGUgPSBjcmVhdGVFbGVtZW50KG1bMV0sIG1bM10pO1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSB0YWcgc2hvdWxkIGJlIGFkZGVkIGJhc2VkIG9uIHRoZSBjb250ZXh0IG9mIHdoZXJlIGl0XG4gICAgICAvLyBpcyBwbGFjZWQgaW4gdGhlIGN1ZXRleHQuXG4gICAgICBpZiAoIXNob3VsZEFkZChjdXJyZW50LCBub2RlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIFNldCB0aGUgY2xhc3MgbGlzdCAoYXMgYSBsaXN0IG9mIGNsYXNzZXMsIHNlcGFyYXRlZCBieSBzcGFjZSkuXG4gICAgICBpZiAobVsyXSkge1xuICAgICAgICBub2RlLmNsYXNzTmFtZSA9IG1bMl0uc3Vic3RyKDEpLnJlcGxhY2UoJy4nLCAnICcpO1xuICAgICAgfVxuICAgICAgLy8gQXBwZW5kIHRoZSBub2RlIHRvIHRoZSBjdXJyZW50IG5vZGUsIGFuZCBlbnRlciB0aGUgc2NvcGUgb2YgdGhlIG5ld1xuICAgICAgLy8gbm9kZS5cbiAgICAgIHRhZ1N0YWNrLnB1c2gobVsxXSk7XG4gICAgICBjdXJyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgY3VycmVudCA9IG5vZGU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBUZXh0IG5vZGVzIGFyZSBsZWFmIG5vZGVzLlxuICAgIGN1cnJlbnQuYXBwZW5kQ2hpbGQod2luZG93LmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHVuZXNjYXBlKHQpKSk7XG4gIH1cblxuICByZXR1cm4gcm9vdERpdjtcbn1cblxuLy8gVGhpcyBpcyBhIGxpc3Qgb2YgYWxsIHRoZSBVbmljb2RlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGEgc3Ryb25nXG4vLyByaWdodC10by1sZWZ0IGNhdGVnb3J5LiBXaGF0IHRoaXMgbWVhbnMgaXMgdGhhdCB0aGVzZSBjaGFyYWN0ZXJzIGFyZVxuLy8gd3JpdHRlbiByaWdodC10by1sZWZ0IGZvciBzdXJlLiBJdCB3YXMgZ2VuZXJhdGVkIGJ5IHB1bGxpbmcgYWxsIHRoZSBzdHJvbmdcbi8vIHJpZ2h0LXRvLWxlZnQgY2hhcmFjdGVycyBvdXQgb2YgdGhlIFVuaWNvZGUgZGF0YSB0YWJsZS4gVGhhdCB0YWJsZSBjYW5cbi8vIGZvdW5kIGF0OiBodHRwOi8vd3d3LnVuaWNvZGUub3JnL1B1YmxpYy9VTklEQVRBL1VuaWNvZGVEYXRhLnR4dFxudmFyIHN0cm9uZ1JUTFJhbmdlcyA9IFtbMHg1YmUsIDB4NWJlXSwgWzB4NWMwLCAweDVjMF0sIFsweDVjMywgMHg1YzNdLCBbMHg1YzYsIDB4NWM2XSxcbiBbMHg1ZDAsIDB4NWVhXSwgWzB4NWYwLCAweDVmNF0sIFsweDYwOCwgMHg2MDhdLCBbMHg2MGIsIDB4NjBiXSwgWzB4NjBkLCAweDYwZF0sXG4gWzB4NjFiLCAweDYxYl0sIFsweDYxZSwgMHg2NGFdLCBbMHg2NmQsIDB4NjZmXSwgWzB4NjcxLCAweDZkNV0sIFsweDZlNSwgMHg2ZTZdLFxuIFsweDZlZSwgMHg2ZWZdLCBbMHg2ZmEsIDB4NzBkXSwgWzB4NzBmLCAweDcxMF0sIFsweDcxMiwgMHg3MmZdLCBbMHg3NGQsIDB4N2E1XSxcbiBbMHg3YjEsIDB4N2IxXSwgWzB4N2MwLCAweDdlYV0sIFsweDdmNCwgMHg3ZjVdLCBbMHg3ZmEsIDB4N2ZhXSwgWzB4ODAwLCAweDgxNV0sXG4gWzB4ODFhLCAweDgxYV0sIFsweDgyNCwgMHg4MjRdLCBbMHg4MjgsIDB4ODI4XSwgWzB4ODMwLCAweDgzZV0sIFsweDg0MCwgMHg4NThdLFxuIFsweDg1ZSwgMHg4NWVdLCBbMHg4YTAsIDB4OGEwXSwgWzB4OGEyLCAweDhhY10sIFsweDIwMGYsIDB4MjAwZl0sXG4gWzB4ZmIxZCwgMHhmYjFkXSwgWzB4ZmIxZiwgMHhmYjI4XSwgWzB4ZmIyYSwgMHhmYjM2XSwgWzB4ZmIzOCwgMHhmYjNjXSxcbiBbMHhmYjNlLCAweGZiM2VdLCBbMHhmYjQwLCAweGZiNDFdLCBbMHhmYjQzLCAweGZiNDRdLCBbMHhmYjQ2LCAweGZiYzFdLFxuIFsweGZiZDMsIDB4ZmQzZF0sIFsweGZkNTAsIDB4ZmQ4Zl0sIFsweGZkOTIsIDB4ZmRjN10sIFsweGZkZjAsIDB4ZmRmY10sXG4gWzB4ZmU3MCwgMHhmZTc0XSwgWzB4ZmU3NiwgMHhmZWZjXSwgWzB4MTA4MDAsIDB4MTA4MDVdLCBbMHgxMDgwOCwgMHgxMDgwOF0sXG4gWzB4MTA4MGEsIDB4MTA4MzVdLCBbMHgxMDgzNywgMHgxMDgzOF0sIFsweDEwODNjLCAweDEwODNjXSwgWzB4MTA4M2YsIDB4MTA4NTVdLFxuIFsweDEwODU3LCAweDEwODVmXSwgWzB4MTA5MDAsIDB4MTA5MWJdLCBbMHgxMDkyMCwgMHgxMDkzOV0sIFsweDEwOTNmLCAweDEwOTNmXSxcbiBbMHgxMDk4MCwgMHgxMDliN10sIFsweDEwOWJlLCAweDEwOWJmXSwgWzB4MTBhMDAsIDB4MTBhMDBdLCBbMHgxMGExMCwgMHgxMGExM10sXG4gWzB4MTBhMTUsIDB4MTBhMTddLCBbMHgxMGExOSwgMHgxMGEzM10sIFsweDEwYTQwLCAweDEwYTQ3XSwgWzB4MTBhNTAsIDB4MTBhNThdLFxuIFsweDEwYTYwLCAweDEwYTdmXSwgWzB4MTBiMDAsIDB4MTBiMzVdLCBbMHgxMGI0MCwgMHgxMGI1NV0sIFsweDEwYjU4LCAweDEwYjcyXSxcbiBbMHgxMGI3OCwgMHgxMGI3Zl0sIFsweDEwYzAwLCAweDEwYzQ4XSwgWzB4MWVlMDAsIDB4MWVlMDNdLCBbMHgxZWUwNSwgMHgxZWUxZl0sXG4gWzB4MWVlMjEsIDB4MWVlMjJdLCBbMHgxZWUyNCwgMHgxZWUyNF0sIFsweDFlZTI3LCAweDFlZTI3XSwgWzB4MWVlMjksIDB4MWVlMzJdLFxuIFsweDFlZTM0LCAweDFlZTM3XSwgWzB4MWVlMzksIDB4MWVlMzldLCBbMHgxZWUzYiwgMHgxZWUzYl0sIFsweDFlZTQyLCAweDFlZTQyXSxcbiBbMHgxZWU0NywgMHgxZWU0N10sIFsweDFlZTQ5LCAweDFlZTQ5XSwgWzB4MWVlNGIsIDB4MWVlNGJdLCBbMHgxZWU0ZCwgMHgxZWU0Zl0sXG4gWzB4MWVlNTEsIDB4MWVlNTJdLCBbMHgxZWU1NCwgMHgxZWU1NF0sIFsweDFlZTU3LCAweDFlZTU3XSwgWzB4MWVlNTksIDB4MWVlNTldLFxuIFsweDFlZTViLCAweDFlZTViXSwgWzB4MWVlNWQsIDB4MWVlNWRdLCBbMHgxZWU1ZiwgMHgxZWU1Zl0sIFsweDFlZTYxLCAweDFlZTYyXSxcbiBbMHgxZWU2NCwgMHgxZWU2NF0sIFsweDFlZTY3LCAweDFlZTZhXSwgWzB4MWVlNmMsIDB4MWVlNzJdLCBbMHgxZWU3NCwgMHgxZWU3N10sXG4gWzB4MWVlNzksIDB4MWVlN2NdLCBbMHgxZWU3ZSwgMHgxZWU3ZV0sIFsweDFlZTgwLCAweDFlZTg5XSwgWzB4MWVlOGIsIDB4MWVlOWJdLFxuIFsweDFlZWExLCAweDFlZWEzXSwgWzB4MWVlYTUsIDB4MWVlYTldLCBbMHgxZWVhYiwgMHgxZWViYl0sIFsweDEwZmZmZCwgMHgxMGZmZmRdXTtcblxuZnVuY3Rpb24gaXNTdHJvbmdSVExDaGFyKGNoYXJDb2RlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Ryb25nUlRMUmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnRSYW5nZSA9IHN0cm9uZ1JUTFJhbmdlc1tpXTtcbiAgICBpZiAoY2hhckNvZGUgPj0gY3VycmVudFJhbmdlWzBdICYmIGNoYXJDb2RlIDw9IGN1cnJlbnRSYW5nZVsxXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVCaWRpKGN1ZURpdikge1xuICB2YXIgbm9kZVN0YWNrID0gW10sXG4gICAgICB0ZXh0ID0gXCJcIixcbiAgICAgIGNoYXJDb2RlO1xuXG4gIGlmICghY3VlRGl2IHx8ICFjdWVEaXYuY2hpbGROb2Rlcykge1xuICAgIHJldHVybiBcImx0clwiO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaE5vZGVzKG5vZGVTdGFjaywgbm9kZSkge1xuICAgIGZvciAodmFyIGkgPSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIG5vZGVTdGFjay5wdXNoKG5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmV4dFRleHROb2RlKG5vZGVTdGFjaykge1xuICAgIGlmICghbm9kZVN0YWNrIHx8ICFub2RlU3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IG5vZGVTdGFjay5wb3AoKSxcbiAgICAgICAgdGV4dCA9IG5vZGUudGV4dENvbnRlbnQgfHwgbm9kZS5pbm5lclRleHQ7XG4gICAgaWYgKHRleHQpIHtcbiAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIG1hdGNoIGFsbCB1bmljb2RlIHR5cGUgQiBjaGFyYWN0ZXJzIChwYXJhZ3JhcGhcbiAgICAgIC8vIHNlcGFyYXRvciBjaGFyYWN0ZXJzKS4gU2VlIGlzc3VlICMxMTUuXG4gICAgICB2YXIgbSA9IHRleHQubWF0Y2goL14uKihcXG58XFxyKS8pO1xuICAgICAgaWYgKG0pIHtcbiAgICAgICAgbm9kZVN0YWNrLmxlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiBtWzBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGlmIChub2RlLnRhZ05hbWUgPT09IFwicnVieVwiKSB7XG4gICAgICByZXR1cm4gbmV4dFRleHROb2RlKG5vZGVTdGFjayk7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkTm9kZXMpIHtcbiAgICAgIHB1c2hOb2Rlcyhub2RlU3RhY2ssIG5vZGUpO1xuICAgICAgcmV0dXJuIG5leHRUZXh0Tm9kZShub2RlU3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hOb2Rlcyhub2RlU3RhY2ssIGN1ZURpdik7XG4gIHdoaWxlICgodGV4dCA9IG5leHRUZXh0Tm9kZShub2RlU3RhY2spKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhckNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoaXNTdHJvbmdSVExDaGFyKGNoYXJDb2RlKSkge1xuICAgICAgICByZXR1cm4gXCJydGxcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFwibHRyXCI7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lUG9zKGN1ZSkge1xuICBpZiAodHlwZW9mIGN1ZS5saW5lID09PSBcIm51bWJlclwiICYmXG4gICAgICAoY3VlLnNuYXBUb0xpbmVzIHx8IChjdWUubGluZSA+PSAwICYmIGN1ZS5saW5lIDw9IDEwMCkpKSB7XG4gICAgcmV0dXJuIGN1ZS5saW5lO1xuICB9XG4gIGlmICghY3VlLnRyYWNrIHx8ICFjdWUudHJhY2sudGV4dFRyYWNrTGlzdCB8fFxuICAgICAgIWN1ZS50cmFjay50ZXh0VHJhY2tMaXN0Lm1lZGlhRWxlbWVudCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgdHJhY2sgPSBjdWUudHJhY2ssXG4gICAgICB0cmFja0xpc3QgPSB0cmFjay50ZXh0VHJhY2tMaXN0LFxuICAgICAgY291bnQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrTGlzdC5sZW5ndGggJiYgdHJhY2tMaXN0W2ldICE9PSB0cmFjazsgaSsrKSB7XG4gICAgaWYgKHRyYWNrTGlzdFtpXS5tb2RlID09PSBcInNob3dpbmdcIikge1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICsrY291bnQgKiAtMTtcbn1cblxuZnVuY3Rpb24gU3R5bGVCb3goKSB7XG59XG5cbi8vIEFwcGx5IHN0eWxlcyB0byBhIGRpdi4gSWYgdGhlcmUgaXMgbm8gZGl2IHBhc3NlZCB0aGVuIGl0IGRlZmF1bHRzIHRvIHRoZVxuLy8gZGl2IG9uICd0aGlzJy5cblN0eWxlQm94LnByb3RvdHlwZS5hcHBseVN0eWxlcyA9IGZ1bmN0aW9uKHN0eWxlcywgZGl2KSB7XG4gIGRpdiA9IGRpdiB8fCB0aGlzLmRpdjtcbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZXMpIHtcbiAgICBpZiAoc3R5bGVzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICBkaXYuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF07XG4gICAgfVxuICB9XG59O1xuXG5TdHlsZUJveC5wcm90b3R5cGUuZm9ybWF0U3R5bGUgPSBmdW5jdGlvbih2YWwsIHVuaXQpIHtcbiAgcmV0dXJuIHZhbCA9PT0gMCA/IDAgOiB2YWwgKyB1bml0O1xufTtcblxuLy8gQ29uc3RydWN0cyB0aGUgY29tcHV0ZWQgZGlzcGxheSBzdGF0ZSBvZiB0aGUgY3VlIChhIGRpdikuIFBsYWNlcyB0aGUgZGl2XG4vLyBpbnRvIHRoZSBvdmVybGF5IHdoaWNoIHNob3VsZCBiZSBhIGJsb2NrIGxldmVsIGVsZW1lbnQgKHVzdWFsbHkgYSBkaXYpLlxuZnVuY3Rpb24gQ3VlU3R5bGVCb3god2luZG93LCBjdWUsIHN0eWxlT3B0aW9ucykge1xuICBTdHlsZUJveC5jYWxsKHRoaXMpO1xuICB0aGlzLmN1ZSA9IGN1ZTtcblxuICAvLyBQYXJzZSBvdXIgY3VlJ3MgdGV4dCBpbnRvIGEgRE9NIHRyZWUgcm9vdGVkIGF0ICdjdWVEaXYnLiBUaGlzIGRpdiB3aWxsXG4gIC8vIGhhdmUgaW5saW5lIHBvc2l0aW9uaW5nIGFuZCB3aWxsIGZ1bmN0aW9uIGFzIHRoZSBjdWUgYmFja2dyb3VuZCBib3guXG4gIHRoaXMuY3VlRGl2ID0gcGFyc2VDb250ZW50KHdpbmRvdywgY3VlLnRleHQpO1xuICB2YXIgc3R5bGVzID0ge1xuICAgIGNvbG9yOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICBcInJnYmEoMCwgMCwgMCwgMC44KVwiLFxuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGRpc3BsYXk6IFwiaW5saW5lXCIsXG4gICAgd3JpdGluZ01vZGU6IGN1ZS52ZXJ0aWNhbCA9PT0gXCJcIiA/IFwiaG9yaXpvbnRhbC10YlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdWUudmVydGljYWwgPT09IFwibHJcIiA/IFwidmVydGljYWwtbHJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJ2ZXJ0aWNhbC1ybFwiLFxuICAgIHVuaWNvZGVCaWRpOiBcInBsYWludGV4dFwiXG4gIH07XG5cbiAgdGhpcy5hcHBseVN0eWxlcyhzdHlsZXMsIHRoaXMuY3VlRGl2KTtcblxuICAvLyBDcmVhdGUgYW4gYWJzb2x1dGVseSBwb3NpdGlvbmVkIGRpdiB0aGF0IHdpbGwgYmUgdXNlZCB0byBwb3NpdGlvbiB0aGUgY3VlXG4gIC8vIGRpdi4gTm90ZSwgYWxsIFdlYlZUVCBjdWUtc2V0dGluZyBhbGlnbm1lbnRzIGFyZSBlcXVpdmFsZW50IHRvIHRoZSBDU1NcbiAgLy8gbWlycm9ycyBvZiB0aGVtIGV4Y2VwdCBcIm1pZGRsZVwiIHdoaWNoIGlzIFwiY2VudGVyXCIgaW4gQ1NTLlxuICB0aGlzLmRpdiA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBzdHlsZXMgPSB7XG4gICAgZGlyZWN0aW9uOiBkZXRlcm1pbmVCaWRpKHRoaXMuY3VlRGl2KSxcbiAgICB3cml0aW5nTW9kZTogY3VlLnZlcnRpY2FsID09PSBcIlwiID8gXCJob3Jpem9udGFsLXRiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1ZS52ZXJ0aWNhbCA9PT0gXCJsclwiID8gXCJ2ZXJ0aWNhbC1sclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcInZlcnRpY2FsLXJsXCIsXG4gICAgdW5pY29kZUJpZGk6IFwicGxhaW50ZXh0XCIsXG4gICAgdGV4dEFsaWduOiBjdWUuYWxpZ24gPT09IFwibWlkZGxlXCIgPyBcImNlbnRlclwiIDogY3VlLmFsaWduLFxuICAgIGZvbnQ6IHN0eWxlT3B0aW9ucy5mb250LFxuICAgIHdoaXRlU3BhY2U6IFwicHJlLWxpbmVcIixcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiXG4gIH07XG5cbiAgdGhpcy5hcHBseVN0eWxlcyhzdHlsZXMpO1xuICB0aGlzLmRpdi5hcHBlbmRDaGlsZCh0aGlzLmN1ZURpdik7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSByZWZlcmVuY2UgZWRnZSBvZiB0aGUgdmlld3BvcnQgdG8gdGhlIHRleHRcbiAgLy8gcG9zaXRpb24gb2YgdGhlIGN1ZSBib3guIFRoZSByZWZlcmVuY2UgZWRnZSB3aWxsIGJlIHJlc29sdmVkIGxhdGVyIHdoZW5cbiAgLy8gdGhlIGJveCBvcmllbnRhdGlvbiBzdHlsZXMgYXJlIGFwcGxpZWQuXG4gIHZhciB0ZXh0UG9zID0gMDtcbiAgc3dpdGNoIChjdWUucG9zaXRpb25BbGlnbikge1xuICBjYXNlIFwic3RhcnRcIjpcbiAgICB0ZXh0UG9zID0gY3VlLnBvc2l0aW9uO1xuICAgIGJyZWFrO1xuICBjYXNlIFwibWlkZGxlXCI6XG4gICAgdGV4dFBvcyA9IGN1ZS5wb3NpdGlvbiAtIChjdWUuc2l6ZSAvIDIpO1xuICAgIGJyZWFrO1xuICBjYXNlIFwiZW5kXCI6XG4gICAgdGV4dFBvcyA9IGN1ZS5wb3NpdGlvbiAtIGN1ZS5zaXplO1xuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gSG9yaXpvbnRhbCBib3ggb3JpZW50YXRpb247IHRleHRQb3MgaXMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGVcbiAgLy8gYXJlYSB0byB0aGUgbGVmdCBlZGdlIG9mIHRoZSBib3ggYW5kIGN1ZS5zaXplIGlzIHRoZSBkaXN0YW5jZSBleHRlbmRpbmcgdG9cbiAgLy8gdGhlIHJpZ2h0IGZyb20gdGhlcmUuXG4gIGlmIChjdWUudmVydGljYWwgPT09IFwiXCIpIHtcbiAgICB0aGlzLmFwcGx5U3R5bGVzKHtcbiAgICAgIGxlZnQ6ICB0aGlzLmZvcm1hdFN0eWxlKHRleHRQb3MsIFwiJVwiKSxcbiAgICAgIHdpZHRoOiB0aGlzLmZvcm1hdFN0eWxlKGN1ZS5zaXplLCBcIiVcIilcbiAgICB9KTtcbiAgLy8gVmVydGljYWwgYm94IG9yaWVudGF0aW9uOyB0ZXh0UG9zIGlzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0b3AgZWRnZSBvZiB0aGVcbiAgLy8gYXJlYSB0byB0aGUgdG9wIGVkZ2Ugb2YgdGhlIGJveCBhbmQgY3VlLnNpemUgaXMgdGhlIGhlaWdodCBleHRlbmRpbmdcbiAgLy8gZG93bndhcmRzIGZyb20gdGhlcmUuXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hcHBseVN0eWxlcyh7XG4gICAgICB0b3A6IHRoaXMuZm9ybWF0U3R5bGUodGV4dFBvcywgXCIlXCIpLFxuICAgICAgaGVpZ2h0OiB0aGlzLmZvcm1hdFN0eWxlKGN1ZS5zaXplLCBcIiVcIilcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMubW92ZSA9IGZ1bmN0aW9uKGJveCkge1xuICAgIHRoaXMuYXBwbHlTdHlsZXMoe1xuICAgICAgdG9wOiB0aGlzLmZvcm1hdFN0eWxlKGJveC50b3AsIFwicHhcIiksXG4gICAgICBib3R0b206IHRoaXMuZm9ybWF0U3R5bGUoYm94LmJvdHRvbSwgXCJweFwiKSxcbiAgICAgIGxlZnQ6IHRoaXMuZm9ybWF0U3R5bGUoYm94LmxlZnQsIFwicHhcIiksXG4gICAgICByaWdodDogdGhpcy5mb3JtYXRTdHlsZShib3gucmlnaHQsIFwicHhcIiksXG4gICAgICBoZWlnaHQ6IHRoaXMuZm9ybWF0U3R5bGUoYm94LmhlaWdodCwgXCJweFwiKSxcbiAgICAgIHdpZHRoOiB0aGlzLmZvcm1hdFN0eWxlKGJveC53aWR0aCwgXCJweFwiKVxuICAgIH0pO1xuICB9O1xufVxuQ3VlU3R5bGVCb3gucHJvdG90eXBlID0gX29iakNyZWF0ZShTdHlsZUJveC5wcm90b3R5cGUpO1xuQ3VlU3R5bGVCb3gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3VlU3R5bGVCb3g7XG5cbi8vIFJlcHJlc2VudHMgdGhlIGNvLW9yZGluYXRlcyBvZiBhbiBFbGVtZW50IGluIGEgd2F5IHRoYXQgd2UgY2FuIGVhc2lseVxuLy8gY29tcHV0ZSB0aGluZ3Mgd2l0aCBzdWNoIGFzIGlmIGl0IG92ZXJsYXBzIG9yIGludGVyc2VjdHMgd2l0aCBhbm90aGVyIEVsZW1lbnQuXG4vLyBDYW4gaW5pdGlhbGl6ZSBpdCB3aXRoIGVpdGhlciBhIFN0eWxlQm94IG9yIGFub3RoZXIgQm94UG9zaXRpb24uXG5mdW5jdGlvbiBCb3hQb3NpdGlvbihvYmopIHtcbiAgLy8gRWl0aGVyIGEgQm94UG9zaXRpb24gd2FzIHBhc3NlZCBpbiBhbmQgd2UgbmVlZCB0byBjb3B5IGl0LCBvciBhIFN0eWxlQm94XG4gIC8vIHdhcyBwYXNzZWQgaW4gYW5kIHdlIG5lZWQgdG8gY29weSB0aGUgcmVzdWx0cyBvZiAnZ2V0Qm91bmRpbmdDbGllbnRSZWN0J1xuICAvLyBhcyB0aGUgb2JqZWN0IHJldHVybmVkIGlzIHJlYWRvbmx5LiBBbGwgY28tb3JkaW5hdGUgdmFsdWVzIGFyZSBpbiByZWZlcmVuY2VcbiAgLy8gdG8gdGhlIHZpZXdwb3J0IG9yaWdpbiAodG9wIGxlZnQpLlxuICB2YXIgbGgsIGhlaWdodCwgd2lkdGgsIHRvcDtcbiAgaWYgKG9iai5kaXYpIHtcbiAgICBoZWlnaHQgPSBvYmouZGl2Lm9mZnNldEhlaWdodDtcbiAgICB3aWR0aCA9IG9iai5kaXYub2Zmc2V0V2lkdGg7XG4gICAgdG9wID0gb2JqLmRpdi5vZmZzZXRUb3A7XG5cbiAgICB2YXIgcmVjdHMgPSAocmVjdHMgPSBvYmouZGl2LmNoaWxkTm9kZXMpICYmIChyZWN0cyA9IHJlY3RzWzBdKSAmJlxuICAgICAgICAgICAgICAgIHJlY3RzLmdldENsaWVudFJlY3RzICYmIHJlY3RzLmdldENsaWVudFJlY3RzKCk7XG4gICAgb2JqID0gb2JqLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAvLyBJbiBjZXJ0YWluIGNhc2VzIHRoZSBvdXR0ZXIgZGl2IHdpbGwgYmUgc2xpZ2h0bHkgbGFyZ2VyIHRoZW4gdGhlIHN1bSBvZlxuICAgIC8vIHRoZSBpbm5lciBkaXYncyBsaW5lcy4gVGhpcyBjb3VsZCBiZSBkdWUgdG8gYm9sZCB0ZXh0LCBldGMsIG9uIHNvbWUgcGxhdGZvcm1zLlxuICAgIC8vIEluIHRoaXMgY2FzZSB3ZSBzaG91bGQgZ2V0IHRoZSBhdmVyYWdlIGxpbmUgaGVpZ2h0IGFuZCB1c2UgdGhhdC4gVGhpcyB3aWxsXG4gICAgLy8gcmVzdWx0IGluIHRoZSBkZXNpcmVkIGJlaGF2aW91ci5cbiAgICBsaCA9IHJlY3RzID8gTWF0aC5tYXgoKHJlY3RzWzBdICYmIHJlY3RzWzBdLmhlaWdodCkgfHwgMCwgb2JqLmhlaWdodCAvIHJlY3RzLmxlbmd0aClcbiAgICAgICAgICAgICAgIDogMDtcblxuICB9XG4gIHRoaXMubGVmdCA9IG9iai5sZWZ0O1xuICB0aGlzLnJpZ2h0ID0gb2JqLnJpZ2h0O1xuICB0aGlzLnRvcCA9IG9iai50b3AgfHwgdG9wO1xuICB0aGlzLmhlaWdodCA9IG9iai5oZWlnaHQgfHwgaGVpZ2h0O1xuICB0aGlzLmJvdHRvbSA9IG9iai5ib3R0b20gfHwgKHRvcCArIChvYmouaGVpZ2h0IHx8IGhlaWdodCkpO1xuICB0aGlzLndpZHRoID0gb2JqLndpZHRoIHx8IHdpZHRoO1xuICB0aGlzLmxpbmVIZWlnaHQgPSBsaCAhPT0gdW5kZWZpbmVkID8gbGggOiBvYmoubGluZUhlaWdodDtcbn1cblxuLy8gTW92ZSB0aGUgYm94IGFsb25nIGEgcGFydGljdWxhciBheGlzLiBPcHRpb25hbGx5IHBhc3MgaW4gYW4gYW1vdW50IHRvIG1vdmVcbi8vIHRoZSBib3guIElmIG5vIGFtb3VudCBpcyBwYXNzZWQgdGhlbiB0aGUgZGVmYXVsdCBpcyB0aGUgbGluZSBoZWlnaHQgb2YgdGhlXG4vLyBib3guXG5Cb3hQb3NpdGlvbi5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKGF4aXMsIHRvTW92ZSkge1xuICB0b01vdmUgPSB0b01vdmUgIT09IHVuZGVmaW5lZCA/IHRvTW92ZSA6IHRoaXMubGluZUhlaWdodDtcbiAgc3dpdGNoIChheGlzKSB7XG4gIGNhc2UgXCIreFwiOlxuICAgIHRoaXMubGVmdCArPSB0b01vdmU7XG4gICAgdGhpcy5yaWdodCArPSB0b01vdmU7XG4gICAgYnJlYWs7XG4gIGNhc2UgXCIteFwiOlxuICAgIHRoaXMubGVmdCAtPSB0b01vdmU7XG4gICAgdGhpcy5yaWdodCAtPSB0b01vdmU7XG4gICAgYnJlYWs7XG4gIGNhc2UgXCIreVwiOlxuICAgIHRoaXMudG9wICs9IHRvTW92ZTtcbiAgICB0aGlzLmJvdHRvbSArPSB0b01vdmU7XG4gICAgYnJlYWs7XG4gIGNhc2UgXCIteVwiOlxuICAgIHRoaXMudG9wIC09IHRvTW92ZTtcbiAgICB0aGlzLmJvdHRvbSAtPSB0b01vdmU7XG4gICAgYnJlYWs7XG4gIH1cbn07XG5cbi8vIENoZWNrIGlmIHRoaXMgYm94IG92ZXJsYXBzIGFub3RoZXIgYm94LCBiMi5cbkJveFBvc2l0aW9uLnByb3RvdHlwZS5vdmVybGFwcyA9IGZ1bmN0aW9uKGIyKSB7XG4gIHJldHVybiB0aGlzLmxlZnQgPCBiMi5yaWdodCAmJlxuICAgICAgICAgdGhpcy5yaWdodCA+IGIyLmxlZnQgJiZcbiAgICAgICAgIHRoaXMudG9wIDwgYjIuYm90dG9tICYmXG4gICAgICAgICB0aGlzLmJvdHRvbSA+IGIyLnRvcDtcbn07XG5cbi8vIENoZWNrIGlmIHRoaXMgYm94IG92ZXJsYXBzIGFueSBvdGhlciBib3hlcyBpbiBib3hlcy5cbkJveFBvc2l0aW9uLnByb3RvdHlwZS5vdmVybGFwc0FueSA9IGZ1bmN0aW9uKGJveGVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYm94ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5vdmVybGFwcyhib3hlc1tpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBDaGVjayBpZiB0aGlzIGJveCBpcyB3aXRoaW4gYW5vdGhlciBib3guXG5Cb3hQb3NpdGlvbi5wcm90b3R5cGUud2l0aGluID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gIHJldHVybiB0aGlzLnRvcCA+PSBjb250YWluZXIudG9wICYmXG4gICAgICAgICB0aGlzLmJvdHRvbSA8PSBjb250YWluZXIuYm90dG9tICYmXG4gICAgICAgICB0aGlzLmxlZnQgPj0gY29udGFpbmVyLmxlZnQgJiZcbiAgICAgICAgIHRoaXMucmlnaHQgPD0gY29udGFpbmVyLnJpZ2h0O1xufTtcblxuLy8gQ2hlY2sgaWYgdGhpcyBib3ggaXMgZW50aXJlbHkgd2l0aGluIHRoZSBjb250YWluZXIgb3IgaXQgaXMgb3ZlcmxhcHBpbmdcbi8vIG9uIHRoZSBlZGdlIG9wcG9zaXRlIG9mIHRoZSBheGlzIGRpcmVjdGlvbiBwYXNzZWQuIEZvciBleGFtcGxlLCBpZiBcIit4XCIgaXNcbi8vIHBhc3NlZCBhbmQgdGhlIGJveCBpcyBvdmVybGFwcGluZyBvbiB0aGUgbGVmdCBlZGdlIG9mIHRoZSBjb250YWluZXIsIHRoZW5cbi8vIHJldHVybiB0cnVlLlxuQm94UG9zaXRpb24ucHJvdG90eXBlLm92ZXJsYXBzT3Bwb3NpdGVBeGlzID0gZnVuY3Rpb24oY29udGFpbmVyLCBheGlzKSB7XG4gIHN3aXRjaCAoYXhpcykge1xuICBjYXNlIFwiK3hcIjpcbiAgICByZXR1cm4gdGhpcy5sZWZ0IDwgY29udGFpbmVyLmxlZnQ7XG4gIGNhc2UgXCIteFwiOlxuICAgIHJldHVybiB0aGlzLnJpZ2h0ID4gY29udGFpbmVyLnJpZ2h0O1xuICBjYXNlIFwiK3lcIjpcbiAgICByZXR1cm4gdGhpcy50b3AgPCBjb250YWluZXIudG9wO1xuICBjYXNlIFwiLXlcIjpcbiAgICByZXR1cm4gdGhpcy5ib3R0b20gPiBjb250YWluZXIuYm90dG9tO1xuICB9XG59O1xuXG4vLyBGaW5kIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBhcmVhIHRoYXQgdGhpcyBib3ggaXMgb3ZlcmxhcHBpbmcgd2l0aCBhbm90aGVyXG4vLyBib3guXG5Cb3hQb3NpdGlvbi5wcm90b3R5cGUuaW50ZXJzZWN0UGVyY2VudGFnZSA9IGZ1bmN0aW9uKGIyKSB7XG4gIHZhciB4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odGhpcy5yaWdodCwgYjIucmlnaHQpIC0gTWF0aC5tYXgodGhpcy5sZWZ0LCBiMi5sZWZ0KSksXG4gICAgICB5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odGhpcy5ib3R0b20sIGIyLmJvdHRvbSkgLSBNYXRoLm1heCh0aGlzLnRvcCwgYjIudG9wKSksXG4gICAgICBpbnRlcnNlY3RBcmVhID0geCAqIHk7XG4gIHJldHVybiBpbnRlcnNlY3RBcmVhIC8gKHRoaXMuaGVpZ2h0ICogdGhpcy53aWR0aCk7XG59O1xuXG4vLyBDb252ZXJ0IHRoZSBwb3NpdGlvbnMgZnJvbSB0aGlzIGJveCB0byBDU1MgY29tcGF0aWJsZSBwb3NpdGlvbnMgdXNpbmdcbi8vIHRoZSByZWZlcmVuY2UgY29udGFpbmVyJ3MgcG9zaXRpb25zLiBUaGlzIGhhcyB0byBiZSBkb25lIGJlY2F1c2UgdGhpc1xuLy8gYm94J3MgcG9zaXRpb25zIGFyZSBpbiByZWZlcmVuY2UgdG8gdGhlIHZpZXdwb3J0IG9yaWdpbiwgd2hlcmVhcywgQ1NTXG4vLyB2YWx1ZXMgYXJlIGluIHJlZmVyZWNuZSB0byB0aGVpciByZXNwZWN0aXZlIGVkZ2VzLlxuQm94UG9zaXRpb24ucHJvdG90eXBlLnRvQ1NTQ29tcGF0VmFsdWVzID0gZnVuY3Rpb24ocmVmZXJlbmNlKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0aGlzLnRvcCAtIHJlZmVyZW5jZS50b3AsXG4gICAgYm90dG9tOiByZWZlcmVuY2UuYm90dG9tIC0gdGhpcy5ib3R0b20sXG4gICAgbGVmdDogdGhpcy5sZWZ0IC0gcmVmZXJlbmNlLmxlZnQsXG4gICAgcmlnaHQ6IHJlZmVyZW5jZS5yaWdodCAtIHRoaXMucmlnaHQsXG4gICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICB3aWR0aDogdGhpcy53aWR0aFxuICB9O1xufTtcblxuLy8gR2V0IGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGJveCdzIHBvc2l0aW9uIHdpdGhvdXQgYW55dGhpbmcgZXh0cmEuXG4vLyBDYW4gcGFzcyBhIFN0eWxlQm94LCBIVE1MRWxlbWVudCwgb3IgYW5vdGhlciBCb3hQb3NpdG9uLlxuQm94UG9zaXRpb24uZ2V0U2ltcGxlQm94UG9zaXRpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIGhlaWdodCA9IG9iai5kaXYgPyBvYmouZGl2Lm9mZnNldEhlaWdodCA6IG9iai50YWdOYW1lID8gb2JqLm9mZnNldEhlaWdodCA6IDA7XG4gIHZhciB3aWR0aCA9IG9iai5kaXYgPyBvYmouZGl2Lm9mZnNldFdpZHRoIDogb2JqLnRhZ05hbWUgPyBvYmoub2Zmc2V0V2lkdGggOiAwO1xuICB2YXIgdG9wID0gb2JqLmRpdiA/IG9iai5kaXYub2Zmc2V0VG9wIDogb2JqLnRhZ05hbWUgPyBvYmoub2Zmc2V0VG9wIDogMDtcblxuICBvYmogPSBvYmouZGl2ID8gb2JqLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6XG4gICAgICAgICAgICAgICAgb2JqLnRhZ05hbWUgPyBvYmouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBvYmo7XG4gIHZhciByZXQgPSB7XG4gICAgbGVmdDogb2JqLmxlZnQsXG4gICAgcmlnaHQ6IG9iai5yaWdodCxcbiAgICB0b3A6IG9iai50b3AgfHwgdG9wLFxuICAgIGhlaWdodDogb2JqLmhlaWdodCB8fCBoZWlnaHQsXG4gICAgYm90dG9tOiBvYmouYm90dG9tIHx8ICh0b3AgKyAob2JqLmhlaWdodCB8fCBoZWlnaHQpKSxcbiAgICB3aWR0aDogb2JqLndpZHRoIHx8IHdpZHRoXG4gIH07XG4gIHJldHVybiByZXQ7XG59O1xuXG4vLyBNb3ZlIGEgU3R5bGVCb3ggdG8gaXRzIHNwZWNpZmllZCwgb3IgbmV4dCBiZXN0LCBwb3NpdGlvbi4gVGhlIGNvbnRhaW5lckJveFxuLy8gaXMgdGhlIGJveCB0aGF0IGNvbnRhaW5zIHRoZSBTdHlsZUJveCwgc3VjaCBhcyBhIGRpdi4gYm94UG9zaXRpb25zIGFyZVxuLy8gYSBsaXN0IG9mIG90aGVyIGJveGVzIHRoYXQgdGhlIHN0eWxlQm94IGNhbid0IG92ZXJsYXAgd2l0aC5cbmZ1bmN0aW9uIG1vdmVCb3hUb0xpbmVQb3NpdGlvbih3aW5kb3csIHN0eWxlQm94LCBjb250YWluZXJCb3gsIGJveFBvc2l0aW9ucykge1xuXG4gIC8vIEZpbmQgdGhlIGJlc3QgcG9zaXRpb24gZm9yIGEgY3VlIGJveCwgYiwgb24gdGhlIHZpZGVvLiBUaGUgYXhpcyBwYXJhbWV0ZXJcbiAgLy8gaXMgYSBsaXN0IG9mIGF4aXMsIHRoZSBvcmRlciBvZiB3aGljaCwgaXQgd2lsbCBtb3ZlIHRoZSBib3ggYWxvbmcuIEZvciBleGFtcGxlOlxuICAvLyBQYXNzaW5nIFtcIit4XCIsIFwiLXhcIl0gd2lsbCBtb3ZlIHRoZSBib3ggZmlyc3QgYWxvbmcgdGhlIHggYXhpcyBpbiB0aGUgcG9zaXRpdmVcbiAgLy8gZGlyZWN0aW9uLiBJZiBpdCBkb2Vzbid0IGZpbmQgYSBnb29kIHBvc2l0aW9uIGZvciBpdCB0aGVyZSBpdCB3aWxsIHRoZW4gbW92ZVxuICAvLyBpdCBhbG9uZyB0aGUgeCBheGlzIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24uXG4gIGZ1bmN0aW9uIGZpbmRCZXN0UG9zaXRpb24oYiwgYXhpcykge1xuICAgIHZhciBiZXN0UG9zaXRpb24sXG4gICAgICAgIHNwZWNpZmllZFBvc2l0aW9uID0gbmV3IEJveFBvc2l0aW9uKGIpLFxuICAgICAgICBwZXJjZW50YWdlID0gMTsgLy8gSGlnaGVzdCBwb3NzaWJsZSBzbyB0aGUgZmlyc3QgdGhpbmcgd2UgZ2V0IGlzIGJldHRlci5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgd2hpbGUgKGIub3ZlcmxhcHNPcHBvc2l0ZUF4aXMoY29udGFpbmVyQm94LCBheGlzW2ldKSB8fFxuICAgICAgICAgICAgIChiLndpdGhpbihjb250YWluZXJCb3gpICYmIGIub3ZlcmxhcHNBbnkoYm94UG9zaXRpb25zKSkpIHtcbiAgICAgICAgYi5tb3ZlKGF4aXNbaV0pO1xuICAgICAgfVxuICAgICAgLy8gV2UgZm91bmQgYSBzcG90IHdoZXJlIHdlIGFyZW4ndCBvdmVybGFwcGluZyBhbnl0aGluZy4gVGhpcyBpcyBvdXJcbiAgICAgIC8vIGJlc3QgcG9zaXRpb24uXG4gICAgICBpZiAoYi53aXRoaW4oY29udGFpbmVyQm94KSkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH1cbiAgICAgIHZhciBwID0gYi5pbnRlcnNlY3RQZXJjZW50YWdlKGNvbnRhaW5lckJveCk7XG4gICAgICAvLyBJZiB3ZSdyZSBvdXRzaWRlIHRoZSBjb250YWluZXIgYm94IGxlc3MgdGhlbiB3ZSB3ZXJlIG9uIG91ciBsYXN0IHRyeVxuICAgICAgLy8gdGhlbiByZW1lbWJlciB0aGlzIHBvc2l0aW9uIGFzIHRoZSBiZXN0IHBvc2l0aW9uLlxuICAgICAgaWYgKHBlcmNlbnRhZ2UgPiBwKSB7XG4gICAgICAgIGJlc3RQb3NpdGlvbiA9IG5ldyBCb3hQb3NpdGlvbihiKTtcbiAgICAgICAgcGVyY2VudGFnZSA9IHA7XG4gICAgICB9XG4gICAgICAvLyBSZXNldCB0aGUgYm94IHBvc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uXG4gICAgICBiID0gbmV3IEJveFBvc2l0aW9uKHNwZWNpZmllZFBvc2l0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RQb3NpdGlvbiB8fCBzcGVjaWZpZWRQb3NpdGlvbjtcbiAgfVxuXG4gIHZhciBib3hQb3NpdGlvbiA9IG5ldyBCb3hQb3NpdGlvbihzdHlsZUJveCksXG4gICAgICBjdWUgPSBzdHlsZUJveC5jdWUsXG4gICAgICBsaW5lUG9zID0gY29tcHV0ZUxpbmVQb3MoY3VlKSxcbiAgICAgIGF4aXMgPSBbXTtcblxuICAvLyBJZiB3ZSBoYXZlIGEgbGluZSBudW1iZXIgdG8gYWxpZ24gdGhlIGN1ZSB0by5cbiAgaWYgKGN1ZS5zbmFwVG9MaW5lcykge1xuICAgIHZhciBzaXplO1xuICAgIHN3aXRjaCAoY3VlLnZlcnRpY2FsKSB7XG4gICAgY2FzZSBcIlwiOlxuICAgICAgYXhpcyA9IFsgXCIreVwiLCBcIi15XCIgXTtcbiAgICAgIHNpemUgPSBcImhlaWdodFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJsXCI6XG4gICAgICBheGlzID0gWyBcIit4XCIsIFwiLXhcIiBdO1xuICAgICAgc2l6ZSA9IFwid2lkdGhcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJsclwiOlxuICAgICAgYXhpcyA9IFsgXCIteFwiLCBcIit4XCIgXTtcbiAgICAgIHNpemUgPSBcIndpZHRoXCI7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgc3RlcCA9IGJveFBvc2l0aW9uLmxpbmVIZWlnaHQsXG4gICAgICAgIHBvc2l0aW9uID0gc3RlcCAqIE1hdGgucm91bmQobGluZVBvcyksXG4gICAgICAgIG1heFBvc2l0aW9uID0gY29udGFpbmVyQm94W3NpemVdICsgc3RlcCxcbiAgICAgICAgaW5pdGlhbEF4aXMgPSBheGlzWzBdO1xuXG4gICAgLy8gSWYgdGhlIHNwZWNpZmllZCBpbnRpYWwgcG9zaXRpb24gaXMgZ3JlYXRlciB0aGVuIHRoZSBtYXggcG9zaXRpb24gdGhlblxuICAgIC8vIGNsYW1wIHRoZSBib3ggdG8gdGhlIGFtb3VudCBvZiBzdGVwcyBpdCB3b3VsZCB0YWtlIGZvciB0aGUgYm94IHRvXG4gICAgLy8gcmVhY2ggdGhlIG1heCBwb3NpdGlvbi5cbiAgICBpZiAoTWF0aC5hYnMocG9zaXRpb24pID4gbWF4UG9zaXRpb24pIHtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPCAwID8gLTEgOiAxO1xuICAgICAgcG9zaXRpb24gKj0gTWF0aC5jZWlsKG1heFBvc2l0aW9uIC8gc3RlcCkgKiBzdGVwO1xuICAgIH1cblxuICAgIC8vIElmIGNvbXB1dGVkIGxpbmUgcG9zaXRpb24gcmV0dXJucyBuZWdhdGl2ZSB0aGVuIGxpbmUgbnVtYmVycyBhcmVcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSB2aWRlbyBpbnN0ZWFkIG9mIHRoZSB0b3AuIFRoZXJlZm9yZSwgd2VcbiAgICAvLyBuZWVkIHRvIGluY3JlYXNlIG91ciBpbml0aWFsIHBvc2l0aW9uIGJ5IHRoZSBsZW5ndGggb3Igd2lkdGggb2YgdGhlXG4gICAgLy8gdmlkZW8sIGRlcGVuZGluZyBvbiB0aGUgd3JpdGluZyBkaXJlY3Rpb24sIGFuZCByZXZlcnNlIG91ciBheGlzIGRpcmVjdGlvbnMuXG4gICAgaWYgKGxpbmVQb3MgPCAwKSB7XG4gICAgICBwb3NpdGlvbiArPSBjdWUudmVydGljYWwgPT09IFwiXCIgPyBjb250YWluZXJCb3guaGVpZ2h0IDogY29udGFpbmVyQm94LndpZHRoO1xuICAgICAgYXhpcyA9IGF4aXMucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIC8vIE1vdmUgdGhlIGJveCB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLiBUaGlzIG1heSBub3QgYmUgaXRzIGJlc3RcbiAgICAvLyBwb3NpdGlvbi5cbiAgICBib3hQb3NpdGlvbi5tb3ZlKGluaXRpYWxBeGlzLCBwb3NpdGlvbik7XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSBoYXZlIGEgcGVyY2VudGFnZSBsaW5lIHZhbHVlIGZvciB0aGUgY3VlLlxuICAgIHZhciBjYWxjdWxhdGVkUGVyY2VudGFnZSA9IChib3hQb3NpdGlvbi5saW5lSGVpZ2h0IC8gY29udGFpbmVyQm94LmhlaWdodCkgKiAxMDA7XG5cbiAgICBzd2l0Y2ggKGN1ZS5saW5lQWxpZ24pIHtcbiAgICBjYXNlIFwibWlkZGxlXCI6XG4gICAgICBsaW5lUG9zIC09IChjYWxjdWxhdGVkUGVyY2VudGFnZSAvIDIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVuZFwiOlxuICAgICAgbGluZVBvcyAtPSBjYWxjdWxhdGVkUGVyY2VudGFnZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IGluaXRpYWwgbGluZSBwb3NpdGlvbiB0byB0aGUgY3VlIGJveC5cbiAgICBzd2l0Y2ggKGN1ZS52ZXJ0aWNhbCkge1xuICAgIGNhc2UgXCJcIjpcbiAgICAgIHN0eWxlQm94LmFwcGx5U3R5bGVzKHtcbiAgICAgICAgdG9wOiBzdHlsZUJveC5mb3JtYXRTdHlsZShsaW5lUG9zLCBcIiVcIilcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJsXCI6XG4gICAgICBzdHlsZUJveC5hcHBseVN0eWxlcyh7XG4gICAgICAgIGxlZnQ6IHN0eWxlQm94LmZvcm1hdFN0eWxlKGxpbmVQb3MsIFwiJVwiKVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibHJcIjpcbiAgICAgIHN0eWxlQm94LmFwcGx5U3R5bGVzKHtcbiAgICAgICAgcmlnaHQ6IHN0eWxlQm94LmZvcm1hdFN0eWxlKGxpbmVQb3MsIFwiJVwiKVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBheGlzID0gWyBcIit5XCIsIFwiLXhcIiwgXCIreFwiLCBcIi15XCIgXTtcblxuICAgIC8vIEdldCB0aGUgYm94IHBvc2l0aW9uIGFnYWluIGFmdGVyIHdlJ3ZlIGFwcGxpZWQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbmluZ1xuICAgIC8vIHRvIGl0LlxuICAgIGJveFBvc2l0aW9uID0gbmV3IEJveFBvc2l0aW9uKHN0eWxlQm94KTtcbiAgfVxuXG4gIHZhciBiZXN0UG9zaXRpb24gPSBmaW5kQmVzdFBvc2l0aW9uKGJveFBvc2l0aW9uLCBheGlzKTtcbiAgc3R5bGVCb3gubW92ZShiZXN0UG9zaXRpb24udG9DU1NDb21wYXRWYWx1ZXMoY29udGFpbmVyQm94KSk7XG59XG5cbmZ1bmN0aW9uIFdlYlZUVCgpIHtcbiAgLy8gTm90aGluZ1xufVxuXG4vLyBIZWxwZXIgdG8gYWxsb3cgc3RyaW5ncyB0byBiZSBkZWNvZGVkIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYmluYXJ5IHV0ZjggZGF0YS5cbldlYlZUVC5TdHJpbmdEZWNvZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgZGVjb2RlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgLSBleHBlY3RlZCBzdHJpbmcgZGF0YS5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZVVSSUNvbXBvbmVudChkYXRhKSk7XG4gICAgfVxuICB9O1xufTtcblxuV2ViVlRULmNvbnZlcnRDdWVUb0RPTVRyZWUgPSBmdW5jdGlvbih3aW5kb3csIGN1ZXRleHQpIHtcbiAgaWYgKCF3aW5kb3cgfHwgIWN1ZXRleHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcGFyc2VDb250ZW50KHdpbmRvdywgY3VldGV4dCk7XG59O1xuXG52YXIgRk9OVF9TSVpFX1BFUkNFTlQgPSAwLjA1O1xudmFyIEZPTlRfU1RZTEUgPSBcInNhbnMtc2VyaWZcIjtcbnZhciBDVUVfQkFDS0dST1VORF9QQURESU5HID0gXCIxLjUlXCI7XG5cbi8vIFJ1bnMgdGhlIHByb2Nlc3NpbmcgbW9kZWwgb3ZlciB0aGUgY3VlcyBhbmQgcmVnaW9ucyBwYXNzZWQgdG8gaXQuXG4vLyBAcGFyYW0gb3ZlcmxheSBBIGJsb2NrIGxldmVsIGVsZW1lbnQgKHVzdWFsbHkgYSBkaXYpIHRoYXQgdGhlIGNvbXB1dGVkIGN1ZXNcbi8vICAgICAgICAgICAgICAgIGFuZCByZWdpb25zIHdpbGwgYmUgcGxhY2VkIGludG8uXG5XZWJWVFQucHJvY2Vzc0N1ZXMgPSBmdW5jdGlvbih3aW5kb3csIGN1ZXMsIG92ZXJsYXkpIHtcbiAgaWYgKCF3aW5kb3cgfHwgIWN1ZXMgfHwgIW92ZXJsYXkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgcHJldmlvdXMgY2hpbGRyZW4uXG4gIHdoaWxlIChvdmVybGF5LmZpcnN0Q2hpbGQpIHtcbiAgICBvdmVybGF5LnJlbW92ZUNoaWxkKG92ZXJsYXkuZmlyc3RDaGlsZCk7XG4gIH1cblxuICB2YXIgcGFkZGVkT3ZlcmxheSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwYWRkZWRPdmVybGF5LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICBwYWRkZWRPdmVybGF5LnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgcGFkZGVkT3ZlcmxheS5zdHlsZS5yaWdodCA9IFwiMFwiO1xuICBwYWRkZWRPdmVybGF5LnN0eWxlLnRvcCA9IFwiMFwiO1xuICBwYWRkZWRPdmVybGF5LnN0eWxlLmJvdHRvbSA9IFwiMFwiO1xuICBwYWRkZWRPdmVybGF5LnN0eWxlLm1hcmdpbiA9IENVRV9CQUNLR1JPVU5EX1BBRERJTkc7XG4gIG92ZXJsYXkuYXBwZW5kQ2hpbGQocGFkZGVkT3ZlcmxheSk7XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgZGlzcGxheSBzdGF0ZXMgb2YgdGhlIGN1ZXMuIFRoaXMgY291bGRcbiAgLy8gYmUgdGhlIGNhc2UgaWYgYSBjdWUncyBzdGF0ZSBoYXMgYmVlbiBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGNvbXB1dGF0aW9uIG9yXG4gIC8vIGlmIGl0IGhhcyBub3QgYmVlbiBjb21wdXRlZCB5ZXQuXG4gIGZ1bmN0aW9uIHNob3VsZENvbXB1dGUoY3Vlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGN1ZXNbaV0uaGFzQmVlblJlc2V0IHx8ICFjdWVzW2ldLmRpc3BsYXlTdGF0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byByZWNvbXB1dGUgdGhlIGN1ZXMnIGRpc3BsYXkgc3RhdGVzLiBKdXN0IHJldXNlIHRoZW0uXG4gIGlmICghc2hvdWxkQ29tcHV0ZShjdWVzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFkZGVkT3ZlcmxheS5hcHBlbmRDaGlsZChjdWVzW2ldLmRpc3BsYXlTdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBib3hQb3NpdGlvbnMgPSBbXSxcbiAgICAgIGNvbnRhaW5lckJveCA9IEJveFBvc2l0aW9uLmdldFNpbXBsZUJveFBvc2l0aW9uKHBhZGRlZE92ZXJsYXkpLFxuICAgICAgZm9udFNpemUgPSBNYXRoLnJvdW5kKGNvbnRhaW5lckJveC5oZWlnaHQgKiBGT05UX1NJWkVfUEVSQ0VOVCAqIDEwMCkgLyAxMDA7XG4gIHZhciBzdHlsZU9wdGlvbnMgPSB7XG4gICAgZm9udDogZm9udFNpemUgKyBcInB4IFwiICsgRk9OVF9TVFlMRVxuICB9O1xuXG4gIChmdW5jdGlvbigpIHtcbiAgICB2YXIgc3R5bGVCb3gsIGN1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY3VlID0gY3Vlc1tpXTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgaW50aWFsIHBvc2l0aW9uIGFuZCBzdHlsZXMgb2YgdGhlIGN1ZSBkaXYuXG4gICAgICBzdHlsZUJveCA9IG5ldyBDdWVTdHlsZUJveCh3aW5kb3csIGN1ZSwgc3R5bGVPcHRpb25zKTtcbiAgICAgIHBhZGRlZE92ZXJsYXkuYXBwZW5kQ2hpbGQoc3R5bGVCb3guZGl2KTtcblxuICAgICAgLy8gTW92ZSB0aGUgY3VlIGRpdiB0byBpdCdzIGNvcnJlY3QgbGluZSBwb3NpdGlvbi5cbiAgICAgIG1vdmVCb3hUb0xpbmVQb3NpdGlvbih3aW5kb3csIHN0eWxlQm94LCBjb250YWluZXJCb3gsIGJveFBvc2l0aW9ucyk7XG5cbiAgICAgIC8vIFJlbWVtYmVyIHRoZSBjb21wdXRlZCBkaXYgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHJlY29tcHV0ZSBpdCBsYXRlclxuICAgICAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSB0b28uXG4gICAgICBjdWUuZGlzcGxheVN0YXRlID0gc3R5bGVCb3guZGl2O1xuXG4gICAgICBib3hQb3NpdGlvbnMucHVzaChCb3hQb3NpdGlvbi5nZXRTaW1wbGVCb3hQb3NpdGlvbihzdHlsZUJveCkpO1xuICAgIH1cbiAgfSkoKTtcbn07XG5cbldlYlZUVC5QYXJzZXIgPSBmdW5jdGlvbih3aW5kb3csIHZ0dGpzLCBkZWNvZGVyKSB7XG4gIGlmICghZGVjb2Rlcikge1xuICAgIGRlY29kZXIgPSB2dHRqcztcbiAgICB2dHRqcyA9IHt9O1xuICB9XG4gIGlmICghdnR0anMpIHtcbiAgICB2dHRqcyA9IHt9O1xuICB9XG5cbiAgdGhpcy53aW5kb3cgPSB3aW5kb3c7XG4gIHRoaXMudnR0anMgPSB2dHRqcztcbiAgdGhpcy5zdGF0ZSA9IFwiSU5JVElBTFwiO1xuICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gIHRoaXMuZGVjb2RlciA9IGRlY29kZXIgfHwgbmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTtcbiAgdGhpcy5yZWdpb25MaXN0ID0gW107XG59O1xuXG5XZWJWVFQuUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgLy8gSWYgdGhlIGVycm9yIGlzIGEgUGFyc2luZ0Vycm9yIHRoZW4gcmVwb3J0IGl0IHRvIHRoZSBjb25zdW1lciBpZlxuICAvLyBwb3NzaWJsZS4gSWYgaXQncyBub3QgYSBQYXJzaW5nRXJyb3IgdGhlbiB0aHJvdyBpdCBsaWtlIG5vcm1hbC5cbiAgcmVwb3J0T3JUaHJvd0Vycm9yOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBQYXJzaW5nRXJyb3IpIHtcbiAgICAgIHRoaXMub25wYXJzaW5nZXJyb3IgJiYgdGhpcy5vbnBhcnNpbmdlcnJvcihlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH0sXG4gIHBhcnNlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgdGhlbiB3ZSB3b24ndCBkZWNvZGUgaXQsIGJ1dCB3aWxsIGp1c3QgdHJ5IHRvIHBhcnNlXG4gICAgLy8gd2hhdGV2ZXIgaXMgaW4gYnVmZmVyIGFscmVhZHkuIFRoaXMgbWF5IG9jY3VyIGluIGNpcmN1bXN0YW5jZXMsIGZvclxuICAgIC8vIGV4YW1wbGUgd2hlbiBmbHVzaCgpIGlzIGNhbGxlZC5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgLy8gVHJ5IHRvIGRlY29kZSB0aGUgZGF0YSB0aGF0IHdlIHJlY2VpdmVkLlxuICAgICAgc2VsZi5idWZmZXIgKz0gc2VsZi5kZWNvZGVyLmRlY29kZShkYXRhLCB7c3RyZWFtOiB0cnVlfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29sbGVjdE5leHRMaW5lKCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IHNlbGYuYnVmZmVyO1xuICAgICAgdmFyIHBvcyA9IDA7XG4gICAgICB3aGlsZSAocG9zIDwgYnVmZmVyLmxlbmd0aCAmJiBidWZmZXJbcG9zXSAhPT0gJ1xccicgJiYgYnVmZmVyW3Bvc10gIT09ICdcXG4nKSB7XG4gICAgICAgICsrcG9zO1xuICAgICAgfVxuICAgICAgdmFyIGxpbmUgPSBidWZmZXIuc3Vic3RyKDAsIHBvcyk7XG4gICAgICAvLyBBZHZhbmNlIHRoZSBidWZmZXIgZWFybHkgaW4gY2FzZSB3ZSBmYWlsIGJlbG93LlxuICAgICAgaWYgKGJ1ZmZlcltwb3NdID09PSAnXFxyJykge1xuICAgICAgICArK3BvcztcbiAgICAgIH1cbiAgICAgIGlmIChidWZmZXJbcG9zXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgICBzZWxmLmJ1ZmZlciA9IGJ1ZmZlci5zdWJzdHIocG9zKTtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cblxuICAgIC8vIDMuNCBXZWJWVFQgcmVnaW9uIGFuZCBXZWJWVFQgcmVnaW9uIHNldHRpbmdzIHN5bnRheFxuICAgIGZ1bmN0aW9uIHBhcnNlUmVnaW9uKGlucHV0KSB7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoKTtcblxuICAgICAgcGFyc2VPcHRpb25zKGlucHV0LCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICBzd2l0Y2ggKGspIHtcbiAgICAgICAgY2FzZSBcImlkXCI6XG4gICAgICAgICAgc2V0dGluZ3Muc2V0KGssIHYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid2lkdGhcIjpcbiAgICAgICAgICBzZXR0aW5ncy5wZXJjZW50KGssIHYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibGluZXNcIjpcbiAgICAgICAgICBzZXR0aW5ncy5pbnRlZ2VyKGssIHYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVnaW9uYW5jaG9yXCI6XG4gICAgICAgIGNhc2UgXCJ2aWV3cG9ydGFuY2hvclwiOlxuICAgICAgICAgIHZhciB4eSA9IHYuc3BsaXQoJywnKTtcbiAgICAgICAgICBpZiAoeHkubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYWtlIHN1cmUgYm90aCB4IGFuZCB5IHBhcnNlLCBzbyB1c2UgYSB0ZW1wb3JhcnlcbiAgICAgICAgICAvLyBzZXR0aW5ncyBvYmplY3QgaGVyZS5cbiAgICAgICAgICB2YXIgYW5jaG9yID0gbmV3IFNldHRpbmdzKCk7XG4gICAgICAgICAgYW5jaG9yLnBlcmNlbnQoXCJ4XCIsIHh5WzBdKTtcbiAgICAgICAgICBhbmNob3IucGVyY2VudChcInlcIiwgeHlbMV0pO1xuICAgICAgICAgIGlmICghYW5jaG9yLmhhcyhcInhcIikgfHwgIWFuY2hvci5oYXMoXCJ5XCIpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0dGluZ3Muc2V0KGsgKyBcIlhcIiwgYW5jaG9yLmdldChcInhcIikpO1xuICAgICAgICAgIHNldHRpbmdzLnNldChrICsgXCJZXCIsIGFuY2hvci5nZXQoXCJ5XCIpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNjcm9sbFwiOlxuICAgICAgICAgIHNldHRpbmdzLmFsdChrLCB2LCBbXCJ1cFwiXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0sIC89LywgL1xccy8pO1xuXG4gICAgICAvLyBDcmVhdGUgdGhlIHJlZ2lvbiwgdXNpbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFueSB2YWx1ZXMgdGhhdCB3ZXJlIG5vdFxuICAgICAgLy8gc3BlY2lmaWVkLlxuICAgICAgaWYgKHNldHRpbmdzLmhhcyhcImlkXCIpKSB7XG4gICAgICAgIHZhciByZWdpb24gPSBuZXcgKHNlbGYudnR0anMuVlRUUmVnaW9uIHx8IHNlbGYud2luZG93LlZUVFJlZ2lvbikoKTtcbiAgICAgICAgcmVnaW9uLndpZHRoID0gc2V0dGluZ3MuZ2V0KFwid2lkdGhcIiwgMTAwKTtcbiAgICAgICAgcmVnaW9uLmxpbmVzID0gc2V0dGluZ3MuZ2V0KFwibGluZXNcIiwgMyk7XG4gICAgICAgIHJlZ2lvbi5yZWdpb25BbmNob3JYID0gc2V0dGluZ3MuZ2V0KFwicmVnaW9uYW5jaG9yWFwiLCAwKTtcbiAgICAgICAgcmVnaW9uLnJlZ2lvbkFuY2hvclkgPSBzZXR0aW5ncy5nZXQoXCJyZWdpb25hbmNob3JZXCIsIDEwMCk7XG4gICAgICAgIHJlZ2lvbi52aWV3cG9ydEFuY2hvclggPSBzZXR0aW5ncy5nZXQoXCJ2aWV3cG9ydGFuY2hvclhcIiwgMCk7XG4gICAgICAgIHJlZ2lvbi52aWV3cG9ydEFuY2hvclkgPSBzZXR0aW5ncy5nZXQoXCJ2aWV3cG9ydGFuY2hvcllcIiwgMTAwKTtcbiAgICAgICAgcmVnaW9uLnNjcm9sbCA9IHNldHRpbmdzLmdldChcInNjcm9sbFwiLCBcIlwiKTtcbiAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIHJlZ2lvbi5cbiAgICAgICAgc2VsZi5vbnJlZ2lvbiAmJiBzZWxmLm9ucmVnaW9uKHJlZ2lvbik7XG4gICAgICAgIC8vIFJlbWVtYmVyIHRoZSBWVFRSZWdpb24gZm9yIGxhdGVyIGluIGNhc2Ugd2UgcGFyc2UgYW55IFZUVEN1ZXMgdGhhdFxuICAgICAgICAvLyByZWZlcmVuY2UgaXQuXG4gICAgICAgIHNlbGYucmVnaW9uTGlzdC5wdXNoKHtcbiAgICAgICAgICBpZDogc2V0dGluZ3MuZ2V0KFwiaWRcIiksXG4gICAgICAgICAgcmVnaW9uOiByZWdpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZHJhZnQtcGFudG9zLWh0dHAtbGl2ZS1zdHJlYW1pbmctMjBcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtcGFudG9zLWh0dHAtbGl2ZS1zdHJlYW1pbmctMjAjc2VjdGlvbi0zLjVcbiAgICAvLyAzLjUgV2ViVlRUXG4gICAgZnVuY3Rpb24gcGFyc2VUaW1lc3RhbXBNYXAoaW5wdXQpIHtcbiAgICAgIHZhciBzZXR0aW5ncyA9IG5ldyBTZXR0aW5ncygpO1xuXG4gICAgICBwYXJzZU9wdGlvbnMoaW5wdXQsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgc3dpdGNoKGspIHtcbiAgICAgICAgY2FzZSBcIk1QRUdUXCI6XG4gICAgICAgICAgc2V0dGluZ3MuaW50ZWdlcihrICsgJ1MnLCB2KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkxPQ0FcIjpcbiAgICAgICAgICBzZXR0aW5ncy5zZXQoayArICdMJywgcGFyc2VUaW1lU3RhbXAodikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9LCAvW15cXGRdOi8sIC8sLyk7XG5cbiAgICAgIHNlbGYub250aW1lc3RhbXBtYXAgJiYgc2VsZi5vbnRpbWVzdGFtcG1hcCh7XG4gICAgICAgIFwiTVBFR1RTXCI6IHNldHRpbmdzLmdldChcIk1QRUdUU1wiKSxcbiAgICAgICAgXCJMT0NBTFwiOiBzZXR0aW5ncy5nZXQoXCJMT0NBTFwiKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gMy4yIFdlYlZUVCBtZXRhZGF0YSBoZWFkZXIgc3ludGF4XG4gICAgZnVuY3Rpb24gcGFyc2VIZWFkZXIoaW5wdXQpIHtcbiAgICAgIGlmIChpbnB1dC5tYXRjaCgvWC1USU1FU1RBTVAtTUFQLykpIHtcbiAgICAgICAgLy8gVGhpcyBsaW5lIGNvbnRhaW5zIEhMUyBYLVRJTUVTVEFNUC1NQVAgbWV0YWRhdGFcbiAgICAgICAgcGFyc2VPcHRpb25zKGlucHV0LCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgc3dpdGNoKGspIHtcbiAgICAgICAgICBjYXNlIFwiWC1USU1FU1RBTVAtTUFQXCI6XG4gICAgICAgICAgICBwYXJzZVRpbWVzdGFtcE1hcCh2KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgLz0vKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlT3B0aW9ucyhpbnB1dCwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICBzd2l0Y2ggKGspIHtcbiAgICAgICAgICBjYXNlIFwiUmVnaW9uXCI6XG4gICAgICAgICAgICAvLyAzLjMgV2ViVlRUIHJlZ2lvbiBtZXRhZGF0YSBoZWFkZXIgc3ludGF4XG4gICAgICAgICAgICBwYXJzZVJlZ2lvbih2KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgLzovKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIDUuMSBXZWJWVFQgZmlsZSBwYXJzaW5nLlxuICAgIHRyeSB7XG4gICAgICB2YXIgbGluZTtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBcIklOSVRJQUxcIikge1xuICAgICAgICAvLyBXZSBjYW4ndCBzdGFydCBwYXJzaW5nIHVudGlsIHdlIGhhdmUgdGhlIGZpcnN0IGxpbmUuXG4gICAgICAgIGlmICghL1xcclxcbnxcXG4vLnRlc3Qoc2VsZi5idWZmZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBsaW5lID0gY29sbGVjdE5leHRMaW5lKCk7XG5cbiAgICAgICAgdmFyIG0gPSBsaW5lLm1hdGNoKC9eV0VCVlRUKFsgXFx0XS4qKT8kLyk7XG4gICAgICAgIGlmICghbSB8fCAhbVswXSkge1xuICAgICAgICAgIHRocm93IG5ldyBQYXJzaW5nRXJyb3IoUGFyc2luZ0Vycm9yLkVycm9ycy5CYWRTaWduYXR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5zdGF0ZSA9IFwiSEVBREVSXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbHJlYWR5Q29sbGVjdGVkTGluZSA9IGZhbHNlO1xuICAgICAgd2hpbGUgKHNlbGYuYnVmZmVyKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IHBhcnNlIGEgbGluZSB1bnRpbCB3ZSBoYXZlIHRoZSBmdWxsIGxpbmUuXG4gICAgICAgIGlmICghL1xcclxcbnxcXG4vLnRlc3Qoc2VsZi5idWZmZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFscmVhZHlDb2xsZWN0ZWRMaW5lKSB7XG4gICAgICAgICAgbGluZSA9IGNvbGxlY3ROZXh0TGluZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFscmVhZHlDb2xsZWN0ZWRMaW5lID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHNlbGYuc3RhdGUpIHtcbiAgICAgICAgY2FzZSBcIkhFQURFUlwiOlxuICAgICAgICAgIC8vIDEzLTE4IC0gQWxsb3cgYSBoZWFkZXIgKG1ldGFkYXRhKSB1bmRlciB0aGUgV0VCVlRUIGxpbmUuXG4gICAgICAgICAgaWYgKC86Ly50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICBwYXJzZUhlYWRlcihsaW5lKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAvLyBBbiBlbXB0eSBsaW5lIHRlcm1pbmF0ZXMgdGhlIGhlYWRlciBhbmQgc3RhcnRzIHRoZSBib2R5IChjdWVzKS5cbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSBcIklEXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIFwiTk9URVwiOlxuICAgICAgICAgIC8vIElnbm9yZSBOT1RFIGJsb2Nrcy5cbiAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSBcIklEXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIFwiSURcIjpcbiAgICAgICAgICAvLyBDaGVjayBmb3IgdGhlIHN0YXJ0IG9mIE5PVEUgYmxvY2tzLlxuICAgICAgICAgIGlmICgvXk5PVEUoJHxbIFxcdF0pLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICBzZWxmLnN0YXRlID0gXCJOT1RFXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gMTktMjkgLSBBbGxvdyBhbnkgbnVtYmVyIG9mIGxpbmUgdGVybWluYXRvcnMsIHRoZW4gaW5pdGlhbGl6ZSBuZXcgY3VlIHZhbHVlcy5cbiAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLmN1ZSA9IG5ldyAoc2VsZi52dHRqcy5WVFRDdWUgfHwgc2VsZi53aW5kb3cuVlRUQ3VlKSgwLCAwLCBcIlwiKTtcbiAgICAgICAgICBzZWxmLnN0YXRlID0gXCJDVUVcIjtcbiAgICAgICAgICAvLyAzMC0zOSAtIENoZWNrIGlmIHNlbGYgbGluZSBjb250YWlucyBhbiBvcHRpb25hbCBpZGVudGlmaWVyIG9yIHRpbWluZyBkYXRhLlxuICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoXCItLT5cIikgPT09IC0xKSB7XG4gICAgICAgICAgICBzZWxmLmN1ZS5pZCA9IGxpbmU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUHJvY2VzcyBsaW5lIGFzIHN0YXJ0IG9mIGEgY3VlLlxuICAgICAgICAgIC8qZmFsbHMgdGhyb3VnaCovXG4gICAgICAgIGNhc2UgXCJDVUVcIjpcbiAgICAgICAgICAvLyA0MCAtIENvbGxlY3QgY3VlIHRpbWluZ3MgYW5kIHNldHRpbmdzLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJzZUN1ZShsaW5lLCBzZWxmLmN1ZSwgc2VsZi5yZWdpb25MaXN0KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBzZWxmLnJlcG9ydE9yVGhyb3dFcnJvcihlKTtcbiAgICAgICAgICAgIC8vIEluIGNhc2Ugb2YgYW4gZXJyb3IgaWdub3JlIHJlc3Qgb2YgdGhlIGN1ZS5cbiAgICAgICAgICAgIHNlbGYuY3VlID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSBcIkJBRENVRVwiO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuc3RhdGUgPSBcIkNVRVRFWFRcIjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBcIkNVRVRFWFRcIjpcbiAgICAgICAgICB2YXIgaGFzU3Vic3RyaW5nID0gbGluZS5pbmRleE9mKFwiLS0+XCIpICE9PSAtMTtcbiAgICAgICAgICAvLyAzNCAtIElmIHdlIGhhdmUgYW4gZW1wdHkgbGluZSB0aGVuIHJlcG9ydCB0aGUgY3VlLlxuICAgICAgICAgIC8vIDM1IC0gSWYgd2UgaGF2ZSB0aGUgc3BlY2lhbCBzdWJzdHJpbmcgJy0tPicgdGhlbiByZXBvcnQgdGhlIGN1ZSxcbiAgICAgICAgICAvLyBidXQgZG8gbm90IGNvbGxlY3QgdGhlIGxpbmUgYXMgd2UgbmVlZCB0byBwcm9jZXNzIHRoZSBjdXJyZW50XG4gICAgICAgICAgLy8gb25lIGFzIGEgbmV3IGN1ZS5cbiAgICAgICAgICBpZiAoIWxpbmUgfHwgaGFzU3Vic3RyaW5nICYmIChhbHJlYWR5Q29sbGVjdGVkTGluZSA9IHRydWUpKSB7XG4gICAgICAgICAgICAvLyBXZSBhcmUgZG9uZSBwYXJzaW5nIHNlbGYgY3VlLlxuICAgICAgICAgICAgc2VsZi5vbmN1ZSAmJiBzZWxmLm9uY3VlKHNlbGYuY3VlKTtcbiAgICAgICAgICAgIHNlbGYuY3VlID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSBcIklEXCI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlbGYuY3VlLnRleHQpIHtcbiAgICAgICAgICAgIHNlbGYuY3VlLnRleHQgKz0gXCJcXG5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5jdWUudGV4dCArPSBsaW5lO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIFwiQkFEQ1VFXCI6IC8vIEJBRENVRVxuICAgICAgICAgIC8vIDU0LTYyIC0gQ29sbGVjdCBhbmQgZGlzY2FyZCB0aGUgcmVtYWluaW5nIGN1ZS5cbiAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSBcIklEXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2VsZi5yZXBvcnRPclRocm93RXJyb3IoZSk7XG5cbiAgICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgcGFyc2luZyBhIGN1ZSwgcmVwb3J0IHdoYXQgd2UgaGF2ZS5cbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBcIkNVRVRFWFRcIiAmJiBzZWxmLmN1ZSAmJiBzZWxmLm9uY3VlKSB7XG4gICAgICAgIHNlbGYub25jdWUoc2VsZi5jdWUpO1xuICAgICAgfVxuICAgICAgc2VsZi5jdWUgPSBudWxsO1xuICAgICAgLy8gRW50ZXIgQkFEV0VCVlRUIHN0YXRlIGlmIGhlYWRlciB3YXMgbm90IHBhcnNlZCBjb3JyZWN0bHkgb3RoZXJ3aXNlXG4gICAgICAvLyBhbm90aGVyIGV4Y2VwdGlvbiBvY2N1cnJlZCBzbyBlbnRlciBCQURDVUUgc3RhdGUuXG4gICAgICBzZWxmLnN0YXRlID0gc2VsZi5zdGF0ZSA9PT0gXCJJTklUSUFMXCIgPyBcIkJBRFdFQlZUVFwiIDogXCJCQURDVUVcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGZsdXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRyeSB7XG4gICAgICAvLyBGaW5pc2ggZGVjb2RpbmcgdGhlIHN0cmVhbS5cbiAgICAgIHNlbGYuYnVmZmVyICs9IHNlbGYuZGVjb2Rlci5kZWNvZGUoKTtcbiAgICAgIC8vIFN5bnRoZXNpemUgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBjdWUgb3IgcmVnaW9uLlxuICAgICAgaWYgKHNlbGYuY3VlIHx8IHNlbGYuc3RhdGUgPT09IFwiSEVBREVSXCIpIHtcbiAgICAgICAgc2VsZi5idWZmZXIgKz0gXCJcXG5cXG5cIjtcbiAgICAgICAgc2VsZi5wYXJzZSgpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UndmUgZmx1c2hlZCwgcGFyc2VkLCBhbmQgd2UncmUgc3RpbGwgb24gdGhlIElOSVRJQUwgc3RhdGUgdGhlblxuICAgICAgLy8gdGhhdCBtZWFucyB3ZSBkb24ndCBoYXZlIGVub3VnaCBvZiB0aGUgc3RyZWFtIHRvIHBhcnNlIHRoZSBmaXJzdFxuICAgICAgLy8gbGluZS5cbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBcIklOSVRJQUxcIikge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2luZ0Vycm9yKFBhcnNpbmdFcnJvci5FcnJvcnMuQmFkU2lnbmF0dXJlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHNlbGYucmVwb3J0T3JUaHJvd0Vycm9yKGUpO1xuICAgIH1cbiAgICBzZWxmLm9uZmx1c2ggJiYgc2VsZi5vbmZsdXNoKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViVlRUO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyB2dHQuanMgQ29udHJpYnV0b3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgYXV0b0tleXdvcmQgPSBcImF1dG9cIjtcbnZhciBkaXJlY3Rpb25TZXR0aW5nID0ge1xuICBcIlwiOiAxLFxuICBcImxyXCI6IDEsXG4gIFwicmxcIjogMVxufTtcbnZhciBhbGlnblNldHRpbmcgPSB7XG4gIFwic3RhcnRcIjogMSxcbiAgXCJtaWRkbGVcIjogMSxcbiAgXCJlbmRcIjogMSxcbiAgXCJsZWZ0XCI6IDEsXG4gIFwicmlnaHRcIjogMVxufTtcblxuZnVuY3Rpb24gZmluZERpcmVjdGlvblNldHRpbmcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZGlyID0gZGlyZWN0aW9uU2V0dGluZ1t2YWx1ZS50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIGRpciA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZmluZEFsaWduU2V0dGluZyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBhbGlnbiA9IGFsaWduU2V0dGluZ1t2YWx1ZS50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIGFsaWduID8gdmFsdWUudG9Mb3dlckNhc2UoKSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBWVFRDdWUoc3RhcnRUaW1lLCBlbmRUaW1lLCB0ZXh0KSB7XG4gIC8qKlxuICAgKiBTaGltIGltcGxlbWVudGF0aW9uIHNwZWNpZmljIHByb3BlcnRpZXMuIFRoZXNlIHByb3BlcnRpZXMgYXJlIG5vdCBpblxuICAgKiB0aGUgc3BlYy5cbiAgICovXG5cbiAgLy8gTGV0cyB1cyBrbm93IHdoZW4gdGhlIFZUVEN1ZSdzIGRhdGEgaGFzIGNoYW5nZWQgaW4gc3VjaCBhIHdheSB0aGF0IHdlIG5lZWRcbiAgLy8gdG8gcmVjb21wdXRlIGl0cyBkaXNwbGF5IHN0YXRlLiBUaGlzIGxldHMgdXMgY29tcHV0ZSBpdHMgZGlzcGxheSBzdGF0ZVxuICAvLyBsYXppbHkuXG4gIHRoaXMuaGFzQmVlblJlc2V0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFZUVEN1ZSBhbmQgVGV4dFRyYWNrQ3VlIHByb3BlcnRpZXNcbiAgICogaHR0cDovL2Rldi53My5vcmcvaHRtbDUvd2VidnR0LyN2dHRjdWUtaW50ZXJmYWNlXG4gICAqL1xuXG4gIHZhciBfaWQgPSBcIlwiO1xuICB2YXIgX3BhdXNlT25FeGl0ID0gZmFsc2U7XG4gIHZhciBfc3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuICB2YXIgX2VuZFRpbWUgPSBlbmRUaW1lO1xuICB2YXIgX3RleHQgPSB0ZXh0O1xuICB2YXIgX3JlZ2lvbiA9IG51bGw7XG4gIHZhciBfdmVydGljYWwgPSBcIlwiO1xuICB2YXIgX3NuYXBUb0xpbmVzID0gdHJ1ZTtcbiAgdmFyIF9saW5lID0gXCJhdXRvXCI7XG4gIHZhciBfbGluZUFsaWduID0gXCJzdGFydFwiO1xuICB2YXIgX3Bvc2l0aW9uID0gNTA7XG4gIHZhciBfcG9zaXRpb25BbGlnbiA9IFwibWlkZGxlXCI7XG4gIHZhciBfc2l6ZSA9IDUwO1xuICB2YXIgX2FsaWduID0gXCJtaWRkbGVcIjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgXCJpZFwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF9pZCA9IFwiXCIgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJwYXVzZU9uRXhpdFwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9wYXVzZU9uRXhpdDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF9wYXVzZU9uRXhpdCA9ICEhdmFsdWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwic3RhcnRUaW1lXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3N0YXJ0VGltZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3RhcnQgdGltZSBtdXN0IGJlIHNldCB0byBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3N0YXJ0VGltZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiZW5kVGltZVwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9lbmRUaW1lO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFbmQgdGltZSBtdXN0IGJlIHNldCB0byBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX2VuZFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcInRleHRcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGV4dDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF90ZXh0ID0gXCJcIiArIHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwicmVnaW9uXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3JlZ2lvbjtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF9yZWdpb24gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcInZlcnRpY2FsXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3ZlcnRpY2FsO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kRGlyZWN0aW9uU2V0dGluZyh2YWx1ZSk7XG4gICAgICAgIC8vIEhhdmUgdG8gY2hlY2sgZm9yIGZhbHNlIGJlY2F1c2UgdGhlIHNldHRpbmcgYW4gYmUgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAgICBpZiAoc2V0dGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF92ZXJ0aWNhbCA9IHNldHRpbmc7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJzbmFwVG9MaW5lc1wiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zbmFwVG9MaW5lcztcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF9zbmFwVG9MaW5lcyA9ICEhdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJsaW5lXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2xpbmU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiICYmIHZhbHVlICE9PSBhdXRvS2V5d29yZCkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkFuIGludmFsaWQgbnVtYmVyIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9saW5lID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJsaW5lQWxpZ25cIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfbGluZUFsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBfbGluZUFsaWduID0gc2V0dGluZztcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcInBvc2l0aW9uXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3Bvc2l0aW9uO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvc2l0aW9uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9wb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwicG9zaXRpb25BbGlnblwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9wb3NpdGlvbkFsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBfcG9zaXRpb25BbGlnbiA9IHNldHRpbmc7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJzaXplXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3NpemU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID4gMTAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2l6ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBfc2l6ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiYWxpZ25cIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfYWxpZ247XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgc2V0dGluZyA9IGZpbmRBbGlnblNldHRpbmcodmFsdWUpO1xuICAgICAgICBpZiAoIXNldHRpbmcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9hbGlnbiA9IHNldHRpbmc7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBPdGhlciA8dHJhY2s+IHNwZWMgZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAqL1xuXG4gIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS12aWRlby1lbGVtZW50Lmh0bWwjdGV4dC10cmFjay1jdWUtZGlzcGxheS1zdGF0ZVxuICB0aGlzLmRpc3BsYXlTdGF0ZSA9IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBWVFRDdWUgbWV0aG9kc1xuICovXG5cblZUVEN1ZS5wcm90b3R5cGUuZ2V0Q3VlQXNIVE1MID0gZnVuY3Rpb24oKSB7XG4gIC8vIEFzc3VtZSBXZWJWVFQuY29udmVydEN1ZVRvRE9NVHJlZSBpcyBvbiB0aGUgZ2xvYmFsLlxuICByZXR1cm4gV2ViVlRULmNvbnZlcnRDdWVUb0RPTVRyZWUod2luZG93LCB0aGlzLnRleHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWVFRDdWU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIHZ0dC5qcyBDb250cmlidXRvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBzY3JvbGxTZXR0aW5nID0ge1xuICBcIlwiOiB0cnVlLFxuICBcInVwXCI6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGZpbmRTY3JvbGxTZXR0aW5nKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNjcm9sbCA9IHNjcm9sbFNldHRpbmdbdmFsdWUudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBzY3JvbGwgPyB2YWx1ZS50b0xvd2VyQ2FzZSgpIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRQZXJjZW50VmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAxMDApO1xufVxuXG4vLyBWVFRSZWdpb24gc2hpbSBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJ2dHQvI3Z0dHJlZ2lvbi1pbnRlcmZhY2VcbmZ1bmN0aW9uIFZUVFJlZ2lvbigpIHtcbiAgdmFyIF93aWR0aCA9IDEwMDtcbiAgdmFyIF9saW5lcyA9IDM7XG4gIHZhciBfcmVnaW9uQW5jaG9yWCA9IDA7XG4gIHZhciBfcmVnaW9uQW5jaG9yWSA9IDEwMDtcbiAgdmFyIF92aWV3cG9ydEFuY2hvclggPSAwO1xuICB2YXIgX3ZpZXdwb3J0QW5jaG9yWSA9IDEwMDtcbiAgdmFyIF9zY3JvbGwgPSBcIlwiO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBcIndpZHRoXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3dpZHRoO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkUGVyY2VudFZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldpZHRoIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF93aWR0aCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJsaW5lc1wiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9saW5lcztcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTGluZXMgbXVzdCBiZSBzZXQgdG8gYSBudW1iZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9saW5lcyA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJyZWdpb25BbmNob3JZXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3JlZ2lvbkFuY2hvclk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQZXJjZW50VmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVnaW9uQW5jaG9yWCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBfcmVnaW9uQW5jaG9yWSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJyZWdpb25BbmNob3JYXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3JlZ2lvbkFuY2hvclg7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZighaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb25BbmNob3JZIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9yZWdpb25BbmNob3JYID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInZpZXdwb3J0QW5jaG9yWVwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF92aWV3cG9ydEFuY2hvclk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQZXJjZW50VmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmlld3BvcnRBbmNob3JZIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF92aWV3cG9ydEFuY2hvclkgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwidmlld3BvcnRBbmNob3JYXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3ZpZXdwb3J0QW5jaG9yWDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWaWV3cG9ydEFuY2hvclggbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3ZpZXdwb3J0QW5jaG9yWCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJzY3JvbGxcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfc2Nyb2xsO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kU2Nyb2xsU2V0dGluZyh2YWx1ZSk7XG4gICAgICAgIC8vIEhhdmUgdG8gY2hlY2sgZm9yIGZhbHNlIGFzIGFuIGVtcHR5IHN0cmluZyBpcyBhIGxlZ2FsIHZhbHVlLlxuICAgICAgICBpZiAoc2V0dGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9zY3JvbGwgPSBzZXR0aW5nO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVlRUUmVnaW9uO1xuIiwidmFyIHdpbjtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICB3aW4gPSBzZWxmO1xufSBlbHNlIHtcbiAgICB3aW4gPSB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciB3aW5kb3cgPSByZXF1aXJlKFwiZ2xvYmFsL3dpbmRvd1wiKVxudmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKFwiaXMtZnVuY3Rpb25cIilcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKFwicGFyc2UtaGVhZGVyc1wiKVxudmFyIHh0ZW5kID0gcmVxdWlyZShcInh0ZW5kXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlWEhSXG5jcmVhdGVYSFIuWE1MSHR0cFJlcXVlc3QgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgfHwgbm9vcFxuY3JlYXRlWEhSLlhEb21haW5SZXF1ZXN0ID0gXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiAobmV3IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCgpKSA/IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCA6IHdpbmRvdy5YRG9tYWluUmVxdWVzdFxuXG5mb3JFYWNoQXJyYXkoW1wiZ2V0XCIsIFwicHV0XCIsIFwicG9zdFwiLCBcInBhdGNoXCIsIFwiaGVhZFwiLCBcImRlbGV0ZVwiXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgY3JlYXRlWEhSW21ldGhvZCA9PT0gXCJkZWxldGVcIiA/IFwiZGVsXCIgOiBtZXRob2RdID0gZnVuY3Rpb24odXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBvcHRpb25zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgICAgICBvcHRpb25zLm1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgIHJldHVybiBfY3JlYXRlWEhSKG9wdGlvbnMpXG4gICAgfVxufSlcblxuZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0b3IoYXJyYXlbaV0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KG9iail7XG4gICAgZm9yKHZhciBpIGluIG9iail7XG4gICAgICAgIGlmKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGluaXRQYXJhbXModXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBwYXJhbXMgPSB1cmlcblxuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9uc1xuICAgICAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyYW1zID0ge3VyaTp1cml9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMgPSB4dGVuZChvcHRpb25zLCB7dXJpOiB1cml9KVxuICAgIH1cblxuICAgIHBhcmFtcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgcmV0dXJuIHBhcmFtc1xufVxuXG5mdW5jdGlvbiBjcmVhdGVYSFIodXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBpbml0UGFyYW1zKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgcmV0dXJuIF9jcmVhdGVYSFIob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVhIUihvcHRpb25zKSB7XG4gICAgaWYodHlwZW9mIG9wdGlvbnMuY2FsbGJhY2sgPT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYWxsYmFjayBhcmd1bWVudCBtaXNzaW5nXCIpXG4gICAgfVxuXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2JPbmNlKGVyciwgcmVzcG9uc2UsIGJvZHkpe1xuICAgICAgICBpZighY2FsbGVkKXtcbiAgICAgICAgICAgIGNhbGxlZCA9IHRydWVcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2soZXJyLCByZXNwb25zZSwgYm9keSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWR5c3RhdGVjaGFuZ2UoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChsb2FkRnVuYywgMClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJvZHkoKSB7XG4gICAgICAgIC8vIENocm9tZSB3aXRoIHJlcXVlc3RUeXBlPWJsb2IgdGhyb3dzIGVycm9ycyBhcnJvdW5kIHdoZW4gZXZlbiB0ZXN0aW5nIGFjY2VzcyB0byByZXNwb25zZVRleHRcbiAgICAgICAgdmFyIGJvZHkgPSB1bmRlZmluZWRcblxuICAgICAgICBpZiAoeGhyLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICBib2R5ID0geGhyLnJlc3BvbnNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0geGhyLnJlc3BvbnNlVGV4dCB8fCBnZXRYbWwoeGhyKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSnNvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib2R5XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3JGdW5jKGV2dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFRpbWVyKVxuICAgICAgICBpZighKGV2dCBpbnN0YW5jZW9mIEVycm9yKSl7XG4gICAgICAgICAgICBldnQgPSBuZXcgRXJyb3IoXCJcIiArIChldnQgfHwgXCJVbmtub3duIFhNTEh0dHBSZXF1ZXN0IEVycm9yXCIpIClcbiAgICAgICAgfVxuICAgICAgICBldnQuc3RhdHVzQ29kZSA9IDBcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGV2dCwgZmFpbHVyZVJlc3BvbnNlKVxuICAgIH1cblxuICAgIC8vIHdpbGwgbG9hZCB0aGUgZGF0YSAmIHByb2Nlc3MgdGhlIHJlc3BvbnNlIGluIGEgc3BlY2lhbCByZXNwb25zZSBvYmplY3RcbiAgICBmdW5jdGlvbiBsb2FkRnVuYygpIHtcbiAgICAgICAgaWYgKGFib3J0ZWQpIHJldHVyblxuICAgICAgICB2YXIgc3RhdHVzXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0VGltZXIpXG4gICAgICAgIGlmKG9wdGlvbnMudXNlWERSICYmIHhoci5zdGF0dXM9PT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vSUU4IENPUlMgR0VUIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgZG9lc24ndCBoYXZlIGEgc3RhdHVzIGZpZWxkLCBidXQgYm9keSBpcyBmaW5lXG4gICAgICAgICAgICBzdGF0dXMgPSAyMDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICh4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cylcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBmYWlsdXJlUmVzcG9uc2VcbiAgICAgICAgdmFyIGVyciA9IG51bGxcblxuICAgICAgICBpZiAoc3RhdHVzICE9PSAwKXtcbiAgICAgICAgICAgIHJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGdldEJvZHkoKSxcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXMsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgICAgICAgdXJsOiB1cmksXG4gICAgICAgICAgICAgICAgcmF3UmVxdWVzdDogeGhyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKXsgLy9yZW1lbWJlciB4aHIgY2FuIGluIGZhY3QgYmUgWERSIGZvciBDT1JTIGluIElFXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycyA9IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnIgPSBuZXcgRXJyb3IoXCJJbnRlcm5hbCBYTUxIdHRwUmVxdWVzdCBFcnJvclwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHJlc3BvbnNlLCByZXNwb25zZS5ib2R5KVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBvcHRpb25zLnhociB8fCBudWxsXG5cbiAgICBpZiAoIXhocikge1xuICAgICAgICBpZiAob3B0aW9ucy5jb3JzIHx8IG9wdGlvbnMudXNlWERSKSB7XG4gICAgICAgICAgICB4aHIgPSBuZXcgY3JlYXRlWEhSLlhEb21haW5SZXF1ZXN0KClcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB4aHIgPSBuZXcgY3JlYXRlWEhSLlhNTEh0dHBSZXF1ZXN0KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlcbiAgICB2YXIgYWJvcnRlZFxuICAgIHZhciB1cmkgPSB4aHIudXJsID0gb3B0aW9ucy51cmkgfHwgb3B0aW9ucy51cmxcbiAgICB2YXIgbWV0aG9kID0geGhyLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCJcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keSB8fCBvcHRpb25zLmRhdGFcbiAgICB2YXIgaGVhZGVycyA9IHhoci5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9XG4gICAgdmFyIHN5bmMgPSAhIW9wdGlvbnMuc3luY1xuICAgIHZhciBpc0pzb24gPSBmYWxzZVxuICAgIHZhciB0aW1lb3V0VGltZXJcbiAgICB2YXIgZmFpbHVyZVJlc3BvbnNlID0ge1xuICAgICAgICBib2R5OiB1bmRlZmluZWQsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICBzdGF0dXNDb2RlOiAwLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgdXJsOiB1cmksXG4gICAgICAgIHJhd1JlcXVlc3Q6IHhoclxuICAgIH1cblxuICAgIGlmIChcImpzb25cIiBpbiBvcHRpb25zICYmIG9wdGlvbnMuanNvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgaXNKc29uID0gdHJ1ZVxuICAgICAgICBoZWFkZXJzW1wiYWNjZXB0XCJdIHx8IGhlYWRlcnNbXCJBY2NlcHRcIl0gfHwgKGhlYWRlcnNbXCJBY2NlcHRcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIikgLy9Eb24ndCBvdmVycmlkZSBleGlzdGluZyBhY2NlcHQgaGVhZGVyIGRlY2xhcmVkIGJ5IHVzZXJcbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gXCJHRVRcIiAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICBoZWFkZXJzW1wiY29udGVudC10eXBlXCJdIHx8IGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gfHwgKGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIikgLy9Eb24ndCBvdmVycmlkZSBleGlzdGluZyBhY2NlcHQgaGVhZGVyIGRlY2xhcmVkIGJ5IHVzZXJcbiAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmpzb24gPT09IHRydWUgPyBib2R5IDogb3B0aW9ucy5qc29uKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHJlYWR5c3RhdGVjaGFuZ2VcbiAgICB4aHIub25sb2FkID0gbG9hZEZ1bmNcbiAgICB4aHIub25lcnJvciA9IGVycm9yRnVuY1xuICAgIC8vIElFOSBtdXN0IGhhdmUgb25wcm9ncmVzcyBiZSBzZXQgdG8gYSB1bmlxdWUgZnVuY3Rpb24uXG4gICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElFIG11c3QgZGllXG4gICAgfVxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgfVxuICAgIHhoci5vbnRpbWVvdXQgPSBlcnJvckZ1bmNcbiAgICB4aHIub3BlbihtZXRob2QsIHVyaSwgIXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQpXG4gICAgLy9oYXMgdG8gYmUgYWZ0ZXIgb3BlblxuICAgIGlmKCFzeW5jKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSAhIW9wdGlvbnMud2l0aENyZWRlbnRpYWxzXG4gICAgfVxuICAgIC8vIENhbm5vdCBzZXQgdGltZW91dCB3aXRoIHN5bmMgcmVxdWVzdFxuICAgIC8vIG5vdCBzZXR0aW5nIHRpbWVvdXQgb24gdGhlIHhociBvYmplY3QsIGJlY2F1c2Ugb2Ygb2xkIHdlYmtpdHMgZXRjLiBub3QgaGFuZGxpbmcgdGhhdCBjb3JyZWN0bHlcbiAgICAvLyBib3RoIG5wbSdzIHJlcXVlc3QgYW5kIGpxdWVyeSAxLnggdXNlIHRoaXMga2luZCBvZiB0aW1lb3V0LCBzbyB0aGlzIGlzIGJlaW5nIGNvbnNpc3RlbnRcbiAgICBpZiAoIXN5bmMgJiYgb3B0aW9ucy50aW1lb3V0ID4gMCApIHtcbiAgICAgICAgdGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKGFib3J0ZWQpIHJldHVyblxuICAgICAgICAgICAgYWJvcnRlZCA9IHRydWUvL0lFOSBtYXkgc3RpbGwgY2FsbCByZWFkeXN0YXRlY2hhbmdlXG4gICAgICAgICAgICB4aHIuYWJvcnQoXCJ0aW1lb3V0XCIpXG4gICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcihcIlhNTEh0dHBSZXF1ZXN0IHRpbWVvdXRcIilcbiAgICAgICAgICAgIGUuY29kZSA9IFwiRVRJTUVET1VUXCJcbiAgICAgICAgICAgIGVycm9yRnVuYyhlKVxuICAgICAgICB9LCBvcHRpb25zLnRpbWVvdXQgKVxuICAgIH1cblxuICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikge1xuICAgICAgICBmb3Ioa2V5IGluIGhlYWRlcnMpe1xuICAgICAgICAgICAgaWYoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKXtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5oZWFkZXJzICYmICFpc0VtcHR5KG9wdGlvbnMuaGVhZGVycykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGVhZGVycyBjYW5ub3QgYmUgc2V0IG9uIGFuIFhEb21haW5SZXF1ZXN0IG9iamVjdFwiKVxuICAgIH1cblxuICAgIGlmIChcInJlc3BvbnNlVHlwZVwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlXG4gICAgfVxuXG4gICAgaWYgKFwiYmVmb3JlU2VuZFwiIGluIG9wdGlvbnMgJiZcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMuYmVmb3JlU2VuZCA9PT0gXCJmdW5jdGlvblwiXG4gICAgKSB7XG4gICAgICAgIG9wdGlvbnMuYmVmb3JlU2VuZCh4aHIpXG4gICAgfVxuXG4gICAgLy8gTWljcm9zb2Z0IEVkZ2UgYnJvd3NlciBzZW5kcyBcInVuZGVmaW5lZFwiIHdoZW4gc2VuZCBpcyBjYWxsZWQgd2l0aCB1bmRlZmluZWQgdmFsdWUuXG4gICAgLy8gWE1MSHR0cFJlcXVlc3Qgc3BlYyBzYXlzIHRvIHBhc3MgbnVsbCBhcyBib2R5IHRvIGluZGljYXRlIG5vIGJvZHlcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25hdWd0dXIveGhyL2lzc3Vlcy8xMDAuXG4gICAgeGhyLnNlbmQoYm9keSB8fCBudWxsKVxuXG4gICAgcmV0dXJuIHhoclxuXG5cbn1cblxuZnVuY3Rpb24gZ2V0WG1sKHhocikge1xuICAgIGlmICh4aHIucmVzcG9uc2VUeXBlID09PSBcImRvY3VtZW50XCIpIHtcbiAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVhNTFxuICAgIH1cbiAgICB2YXIgZmlyZWZveEJ1Z1Rha2VuRWZmZWN0ID0geGhyLnJlc3BvbnNlWE1MICYmIHhoci5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgPT09IFwicGFyc2VyZXJyb3JcIlxuICAgIGlmICh4aHIucmVzcG9uc2VUeXBlID09PSBcIlwiICYmICFmaXJlZm94QnVnVGFrZW5FZmZlY3QpIHtcbiAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVhNTFxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIl0sIm5hbWVzIjpbImRvY2N5IiwidG9wTGV2ZWwiLCJnIiwid2luZG93IiwibWluRG9jIiwiZG9jdW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwid2luIiwic2VsZiIsImlzRnVuY3Rpb24iLCJmbiIsInN0cmluZyIsInRvU3RyaW5nIiwiY2FsbCIsInNldFRpbWVvdXQiLCJhbGVydCIsImNvbmZpcm0iLCJwcm9tcHQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJrZXlDb2RlIiwic2VhcmNoSW5wdXQiLCJoYXNLZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsIm5hbWVzIiwiZm91bmROYW1lZEtleSIsInNlYXJjaCIsIlN0cmluZyIsImNvZGVzIiwidG9Mb3dlckNhc2UiLCJhbGlhc2VzIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImlzRXZlbnRLZXkiLCJldmVudCIsIm5hbWVPckNvZGUiLCJjb2RlIiwiaSIsImZyb21DaGFyQ29kZSIsInRpdGxlIiwiYWxpYXMiLCJBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTIiwicGFyc2VTeW5jU2FmZUludGVnZXIiLCJkYXRhIiwiaXNMaWtlbHlBYWNEYXRhIiwicGFyc2VJZDNUYWdTaXplIiwiaGVhZGVyIiwiYnl0ZUluZGV4IiwicmV0dXJuU2l6ZSIsInBhcnNlQWR0c1NpemUiLCJsb3dUaHJlZSIsIm1pZGRsZSIsInBhcnNlVHlwZSIsInBhcnNlU2FtcGxlUmF0ZSIsInBhY2tldCIsInBhcnNlQWFjVGltZXN0YW1wIiwiZnJhbWVTdGFydCIsImZyYW1lU2l6ZSIsImZyYW1lIiwic3ViYXJyYXkiLCJieXRlTGVuZ3RoIiwib3duZXIiLCJ1bmVzY2FwZSIsImJ5dGVzIiwic3RhcnQiLCJlbmQiLCJyZXN1bHQiLCJzbGljZSIsInBlcmNlbnRFbmNvZGUiLCJkIiwic2l6ZSIsIlN0cmVhbSIsImNlYTcwOFBhcnNlciIsIkNhcHRpb25TdHJlYW0iLCJpbml0IiwidGhpcyIsImNhcHRpb25QYWNrZXRzXyIsImNjU3RyZWFtc18iLCJDZWE2MDhTdHJlYW0iLCJyZXNldCIsImZvckVhY2giLCJjYyIsIm9uIiwidHJpZ2dlciIsImJpbmQiLCJwdXNoIiwic2VpIiwidXNlckRhdGEiLCJuZXdDYXB0aW9uUGFja2V0cyIsIm5hbFVuaXRUeXBlIiwicGFyc2VTZWkiLCJlc2NhcGVkUkJTUCIsInBheWxvYWRUeXBlIiwiVVNFUl9EQVRBX1JFR0lTVEVSRURfSVRVX1RfVDM1IiwicGFyc2VVc2VyRGF0YSIsImR0cyIsImxhdGVzdER0c18iLCJpZ25vcmVOZXh0RXF1YWxEdHNfIiwibnVtU2FtZUR0c18iLCJwYXJzZUNhcHRpb25QYWNrZXRzIiwicHRzIiwiY29uY2F0IiwiZmx1c2hDQ1N0cmVhbXMiLCJmbHVzaFR5cGUiLCJmbHVzaCIsInBhcnRpYWxGbHVzaCIsImZsdXNoU3RyZWFtIiwiZWxlbSIsImlkeCIsInByZXNvcnRJbmRleCIsInNvcnQiLCJhIiwiYiIsInR5cGUiLCJkaXNwYXRjaENlYTYwOFBhY2tldCIsImFjdGl2ZUNlYTYwOENoYW5uZWxfIiwiY2NTdHJlYW0iLCJzZXRzVGV4dE9yWERTQWN0aXZlIiwic2V0c0NoYW5uZWwxQWN0aXZlIiwic2V0c0NoYW5uZWwyQWN0aXZlIiwiY2NEYXRhIiwiQ0hBUkFDVEVSX1RSQU5TTEFUSU9OIiwiZ2V0Q2hhckZyb21Db2RlIiwiUk9XUyIsImNyZWF0ZURpc3BsYXlCdWZmZXIiLCJCT1RUT01fUk9XIiwiZmllbGQiLCJkYXRhQ2hhbm5lbCIsImZpZWxkXyIsImRhdGFDaGFubmVsXyIsIm5hbWVfIiwic2V0Q29uc3RhbnRzIiwic3dhcCIsImNoYXIwIiwiY2hhcjEiLCJ0ZXh0IiwibGFzdENvbnRyb2xDb2RlXyIsIlBBRERJTkdfIiwiUkVTVU1FX0NBUFRJT05fTE9BRElOR18iLCJtb2RlXyIsIkVORF9PRl9DQVBUSU9OXyIsImNsZWFyRm9ybWF0dGluZyIsImZsdXNoRGlzcGxheWVkIiwiZGlzcGxheWVkXyIsIm5vbkRpc3BsYXllZF8iLCJzdGFydFB0c18iLCJST0xMX1VQXzJfUk9XU18iLCJyb2xsVXBSb3dzXyIsInNldFJvbGxVcCIsIlJPTExfVVBfM19ST1dTXyIsIlJPTExfVVBfNF9ST1dTXyIsIkNBUlJJQUdFX1JFVFVSTl8iLCJzaGlmdFJvd3NVcF8iLCJCQUNLU1BBQ0VfIiwicm93XyIsIkVSQVNFX0RJU1BMQVlFRF9NRU1PUllfIiwiRVJBU0VfTk9OX0RJU1BMQVlFRF9NRU1PUllfIiwiUkVTVU1FX0RJUkVDVF9DQVBUSU9OSU5HXyIsImlzU3BlY2lhbENoYXJhY3RlciIsImNvbHVtbl8iLCJpc0V4dENoYXJhY3RlciIsImlzTWlkUm93Q29kZSIsImFkZEZvcm1hdHRpbmciLCJpc09mZnNldENvbnRyb2xDb2RlIiwiaXNQQUMiLCJyb3ciLCJpbmRleE9mIiwiZm9ybWF0dGluZ18iLCJpc0NvbG9yUEFDIiwiaXNOb3JtYWxDaGFyIiwiY29udGVudCIsIm1hcCIsInRyaW0iLCJlIiwiY29uc29sZSIsImVycm9yIiwiam9pbiIsInJlcGxhY2UiLCJzdGFydFB0cyIsImVuZFB0cyIsInN0cmVhbSIsInRvcFJvd18iLCJCQVNFXyIsIkVYVF8iLCJDT05UUk9MXyIsIk9GRlNFVF8iLCJjaGFyIiwibmV3QmFzZVJvdyIsInVuZGVmaW5lZCIsImZvcm1hdCIsInJlZHVjZSIsInJldmVyc2UiLCJwb3BPbiIsImJhc2VSb3ciLCJyb2xsVXAiLCJwYWludE9uIiwiU3RyZWFtVHlwZXMiLCJwYXJzZVBpZCIsInBpZCIsInBhcnNlUGF5bG9hZFVuaXRTdGFydEluZGljYXRvciIsInBhcnNlQWRhcHRpb25GaWVsZCIsIm9mZnNldCIsInBhcnNlTmFsVW5pdFR5cGUiLCJwbXRQaWQiLCJwYXJzZVBhdCIsInB1c2kiLCJwYXJzZVBtdCIsInByb2dyYW1NYXBUYWJsZSIsInBheWxvYWRPZmZzZXQiLCJ0YWJsZUVuZCIsInBhcnNlUGVzVHlwZSIsIkgyNjRfU1RSRUFNX1RZUEUiLCJBRFRTX1NUUkVBTV9UWVBFIiwiTUVUQURBVEFfU1RSRUFNX1RZUEUiLCJwYXJzZVBlc1RpbWUiLCJwdHNEdHNGbGFncyIsInBlcyIsInZpZGVvUGFja2V0Q29udGFpbnNLZXlGcmFtZSIsImZyYW1lQnVmZmVyIiwiZnJhbWVJIiwiZnJhbWVTeW5jUG9pbnQiLCJmb3VuZEtleUZyYW1lIiwiaGFuZGxlUm9sbG92ZXIiLCJ2YWx1ZSIsInJlZmVyZW5jZSIsImRpcmVjdGlvbiIsIk1hdGgiLCJhYnMiLCJUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSIsImxhc3REVFMiLCJyZWZlcmVuY2VEVFMiLCJ0eXBlXyIsImVuZFRpbWVsaW5lIiwiZGlzY29udGludWl0eSIsImRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMiLCJwcm9iZSIsImluc3BlY3QiLCJtYXBUb1NhbXBsZSIsInNhbXBsZXMiLCJhcHByb3hpbWF0ZU9mZnNldCIsInNhbXBsZSIsInBhcnNlQ2FwdGlvbk5hbHMiLCJzZWdtZW50IiwidmlkZW9UcmFja0lkIiwidHJhZnMiLCJmaW5kQm94IiwibWRhdHMiLCJjYXB0aW9uTmFscyIsIm1kYXRUcmFmUGFpcnMiLCJtZGF0IiwiaW5kZXgiLCJtYXRjaGluZ1RyYWYiLCJ0cmFmIiwicGFpciIsInNlaU5hbHMiLCJ0ZmhkIiwiaGVhZGVySW5mbyIsInBhcnNlVGZoZCIsInRyYWNrSWQiLCJ0ZmR0IiwiYmFzZU1lZGlhRGVjb2RlVGltZSIsInBhcnNlVGZkdCIsInRydW5zIiwiY3VycmVudER0cyIsImRlZmF1bHRTYW1wbGVEdXJhdGlvbiIsImRlZmF1bHRTYW1wbGVTaXplIiwiYWxsU2FtcGxlcyIsInRydW4iLCJwYXJzZVRydW4iLCJkdXJhdGlvbiIsImNvbXBvc2l0aW9uVGltZU9mZnNldCIsInBhcnNlU2FtcGxlcyIsImF2Y1N0cmVhbSIsInNlaU5hbCIsImxhc3RNYXRjaGVkU2FtcGxlIiwiYXZjVmlldyIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImdldFVpbnQzMiIsIm1hdGNoaW5nU2FtcGxlIiwiZmluZFNlaU5hbHMiLCJjYXB0aW9uU3RyZWFtIiwic2VnbWVudENhY2hlIiwidGltZXNjYWxlIiwicGFyc2VkQ2FwdGlvbnMiLCJwYXJzaW5nUGFydGlhbCIsImlzSW5pdGlhbGl6ZWQiLCJvcHRpb25zIiwiaXNQYXJ0aWFsIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsImNhcHRpb25zIiwiY2FwdGlvblN0cmVhbXMiLCJpc05ld0luaXQiLCJ2aWRlb1RyYWNrSWRzIiwidGltZXNjYWxlcyIsImtleXMiLCJwYXJzZSIsInBhcnNlZERhdGEiLCJjYWNoZWRTZWdtZW50Iiwic2hpZnQiLCJwYXJzZUVtYmVkZGVkQ2FwdGlvbnMiLCJwdXNoTmFscyIsIm5hbHMiLCJuYWwiLCJjbGVhclBhcnNlZENhcHRpb25zIiwicmVzZXRDYXB0aW9uU3RyZWFtIiwiY2xlYXJBbGxDYXB0aW9ucyIsImdldFZpZGVvVHJhY2tJZHMiLCJnZXRUcmFja3MiLCJ0b1Vuc2lnbmVkIiwidG9IZXhTdHJpbmciLCJwYXRoIiwic3VicmVzdWx0cyIsInJlc3VsdHMiLCJ0cmFrIiwidGtoZCIsInZlcnNpb24iLCJpZCIsIm1kaGQiLCJmcmFnbWVudCIsImJhc2VUaW1lcyIsImFwcGx5Iiwic2NhbGUiLCJiYXNlVGltZSIsInBvdyIsIkluZmluaXR5IiwibWluIiwiaXNGaW5pdGUiLCJ0cmFrcyIsImhkbHJzIiwidGtoZHMiLCJoZGxyIiwidmlldyIsImhhbmRsZXJUeXBlIiwiZ2V0VWludDgiLCJ0cmFja3MiLCJ0cmFjayIsInN0c2QiLCJzYW1wbGVEZXNjcmlwdGlvbnMiLCJjb2RlYyIsImNvZGVjQ29uZmlnIiwiY29kZWNCb3giLCJ0ZXN0IiwicGF5bG9hZFNpemUiLCJwYXlsb2FkIiwiY291bnQiLCJuZXdMZW5ndGgiLCJuZXdEYXRhIiwiZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zIiwiVWludDhBcnJheSIsInNvdXJjZUluZGV4IiwiaW5zcGVjdE1wNCIsInRleHRpZnlNcDQiLCJwYXJzZU1wNERhdGUiLCJzZWNvbmRzIiwiRGF0ZSIsInBhcnNlU2FtcGxlRmxhZ3MiLCJmbGFncyIsImlzTGVhZGluZyIsImRlcGVuZHNPbiIsImlzRGVwZW5kZWRPbiIsImhhc1JlZHVuZGFuY3kiLCJwYWRkaW5nVmFsdWUiLCJpc05vblN5bmNTYW1wbGUiLCJkZWdyYWRhdGlvblByaW9yaXR5IiwibmFsUGFyc2UiLCJhdmMxIiwiZGF0YVJlZmVyZW5jZUluZGV4IiwiZ2V0VWludDE2Iiwid2lkdGgiLCJoZWlnaHQiLCJob3JpenJlc29sdXRpb24iLCJ2ZXJ0cmVzb2x1dGlvbiIsImZyYW1lQ291bnQiLCJkZXB0aCIsImNvbmZpZyIsImF2Y0MiLCJudW1PZlBpY3R1cmVQYXJhbWV0ZXJTZXRzIiwibmFsU2l6ZSIsImNvbmZpZ3VyYXRpb25WZXJzaW9uIiwiYXZjUHJvZmlsZUluZGljYXRpb24iLCJwcm9maWxlQ29tcGF0aWJpbGl0eSIsImF2Y0xldmVsSW5kaWNhdGlvbiIsImxlbmd0aFNpemVNaW51c09uZSIsInNwcyIsInBwcyIsIm51bU9mU2VxdWVuY2VQYXJhbWV0ZXJTZXRzIiwiYnRydCIsImJ1ZmZlclNpemVEQiIsIm1heEJpdHJhdGUiLCJhdmdCaXRyYXRlIiwiZXNkcyIsImVzSWQiLCJzdHJlYW1Qcmlvcml0eSIsImRlY29kZXJDb25maWciLCJvYmplY3RQcm9maWxlSW5kaWNhdGlvbiIsInN0cmVhbVR5cGUiLCJidWZmZXJTaXplIiwiZGVjb2RlckNvbmZpZ0Rlc2NyaXB0b3IiLCJ0YWciLCJhdWRpb09iamVjdFR5cGUiLCJzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4IiwiY2hhbm5lbENvbmZpZ3VyYXRpb24iLCJmdHlwIiwibWFqb3JCcmFuZCIsIm1pbm9yVmVyc2lvbiIsImNvbXBhdGlibGVCcmFuZHMiLCJkaW5mIiwiYm94ZXMiLCJkcmVmIiwiZGF0YVJlZmVyZW5jZXMiLCJuYW1lIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwibGFuZ3VhZ2UiLCJjcmVhdGlvblRpbWUiLCJtb2RpZmljYXRpb25UaW1lIiwibWRpYSIsIm1maGQiLCJzZXF1ZW5jZU51bWJlciIsIm1pbmYiLCJtcDRhIiwiY2hhbm5lbGNvdW50Iiwic2FtcGxlc2l6ZSIsInNhbXBsZXJhdGUiLCJzdHJlYW1EZXNjcmlwdG9yIiwibW9vZiIsIm1vb3YiLCJtdmV4IiwibXZoZCIsInJhdGUiLCJ2b2x1bWUiLCJtYXRyaXgiLCJVaW50MzJBcnJheSIsIm5leHRUcmFja0lkIiwicGRpbiIsImluaXRpYWxEZWxheSIsInNkdHAiLCJzaWR4IiwicmVmZXJlbmNlcyIsInJlZmVyZW5jZUlkIiwiZWFybGllc3RQcmVzZW50YXRpb25UaW1lIiwiZmlyc3RPZmZzZXQiLCJyZWZlcmVuY2VDb3VudCIsInJlZmVyZW5jZVR5cGUiLCJyZWZlcmVuY2VkU2l6ZSIsInN1YnNlZ21lbnREdXJhdGlvbiIsInN0YXJ0c1dpdGhTYXAiLCJzYXBUeXBlIiwic2FwRGVsdGFUaW1lIiwic21oZCIsImJhbGFuY2UiLCJzdGJsIiwic3RjbyIsImNodW5rT2Zmc2V0cyIsImVudHJ5Q291bnQiLCJzdHNjIiwic2FtcGxlVG9DaHVua3MiLCJmaXJzdENodW5rIiwic2FtcGxlc1BlckNodW5rIiwic2FtcGxlRGVzY3JpcHRpb25JbmRleCIsInN0c3oiLCJzYW1wbGVTaXplIiwiZW50cmllcyIsInN0dHMiLCJ0aW1lVG9TYW1wbGVzIiwic2FtcGxlQ291bnQiLCJzYW1wbGVEZWx0YSIsInN0eXAiLCJiYXNlRGF0YU9mZnNldFByZXNlbnQiLCJzYW1wbGVEZXNjcmlwdGlvbkluZGV4UHJlc2VudCIsImRlZmF1bHRTYW1wbGVEdXJhdGlvblByZXNlbnQiLCJkZWZhdWx0U2FtcGxlU2l6ZVByZXNlbnQiLCJkZWZhdWx0U2FtcGxlRmxhZ3NQcmVzZW50IiwiZHVyYXRpb25Jc0VtcHR5IiwiZGVmYXVsdEJhc2VJc01vb2YiLCJiYXNlRGF0YU9mZnNldCIsImRlZmF1bHRTYW1wbGVGbGFncyIsImJhc2VEYXRhT2Zmc2V0SXNNb29mIiwibGF5ZXIiLCJhbHRlcm5hdGVHcm91cCIsInRyZXgiLCJkZWZhdWx0U2FtcGxlRGVzY3JpcHRpb25JbmRleCIsInNhbXBsZURlcGVuZHNPbiIsInNhbXBsZUlzRGVwZW5kZWRPbiIsInNhbXBsZUhhc1JlZHVuZGFuY3kiLCJzYW1wbGVQYWRkaW5nVmFsdWUiLCJzYW1wbGVJc0RpZmZlcmVuY2VTYW1wbGUiLCJzYW1wbGVEZWdyYWRhdGlvblByaW9yaXR5IiwiZGF0YU9mZnNldFByZXNlbnQiLCJmaXJzdFNhbXBsZUZsYWdzUHJlc2VudCIsInNhbXBsZUR1cmF0aW9uUHJlc2VudCIsInNhbXBsZVNpemVQcmVzZW50Iiwic2FtcGxlRmxhZ3NQcmVzZW50Iiwic2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0UHJlc2VudCIsImRhdGFPZmZzZXQiLCJnZXRJbnQzMiIsInZtaGQiLCJncmFwaGljc21vZGUiLCJvcGNvbG9yIiwiVWludDE2QXJyYXkiLCJib3giLCJhYiIsIkFycmF5QnVmZmVyIiwidiIsInoiLCJpbnNwZWN0ZWRNcDQiLCJpbmRlbnQiLCJBcnJheSIsImZpbHRlciIsImtleSIsInByZWZpeCIsImJ5dGUiLCJtYXRjaCIsImxpbmUiLCJKU09OIiwic3RyaW5naWZ5Iiwic3BsaXQiLCJ0ZXh0aWZ5IiwicGFyc2VIZGxyIiwicGFyc2VTaWR4IiwidHMiLCJhYWMiLCJPTkVfU0VDT05EX0lOX1RTIiwicGFyc2VBdWRpb1Blc18iLCJwbXQiLCJwZXNUeXBlIiwicGFyc2VkIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiZW5kTG9vcCIsInRhYmxlIiwiYXVkaW8iLCJwYXJzZVZpZGVvUGVzXyIsImN1cnJlbnRGcmFtZSIsInZpZGVvIiwiZmlyc3RLZXlGcmFtZSIsInNldCIsIndhcm4iLCJpbnNwZWN0VHNfIiwicGFyc2VQc2lfIiwiaGFzT3duUHJvcGVydHkiLCJiYXNlVGltZXN0YW1wIiwiYXVkaW9Db3VudCIsInNhbXBsZVJhdGUiLCJ0aW1lc3RhbXAiLCJhdWRpb1RpbWVzY2FsZSIsImluc3BlY3RBYWNfIiwic2VnbWVudEluZm8iLCJhdWRpb0Jhc2VUaW1lc3RhbXAiLCJpbmZvIiwiZHRzVGltZSIsInB0c1RpbWUiLCJ2aWRlb0Jhc2VUaW1lc3RhbXAiLCJhZGp1c3RUaW1lc3RhbXBfIiwic2Vjb25kc1RvVmlkZW9UcyIsInNlY29uZHNUb0F1ZGlvVHMiLCJ2aWRlb1RzVG9TZWNvbmRzIiwiYXVkaW9Uc1RvU2Vjb25kcyIsImF1ZGlvVHNUb1ZpZGVvVHMiLCJ2aWRlb1RzVG9BdWRpb1RzIiwibWV0YWRhdGFUc1RvU2Vjb25kcyIsInRpbWVsaW5lU3RhcnRQdHMiLCJrZWVwT3JpZ2luYWxUaW1lc3RhbXBzIiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJvZmYiLCJzcGxpY2UiLCJjYWxsYmFja3MiLCJhcmdzIiwiYXJndW1lbnRzIiwiZGlzcG9zZSIsInBpcGUiLCJkZXN0aW5hdGlvbiIsImZsdXNoU291cmNlIiwiaGVhZGVycyIsImFyZyIsImhlYWRlcnNBcnIiLCJVUkxfUkVHRVgiLCJGSVJTVF9TRUdNRU5UX1JFR0VYIiwiU0xBU0hfRE9UX1JFR0VYIiwiU0xBU0hfRE9UX0RPVF9SRUdFWCIsIlVSTFRvb2xraXQiLCJidWlsZEFic29sdXRlVVJMIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwib3B0cyIsImFsd2F5c05vcm1hbGl6ZSIsImJhc2VQYXJ0c0Zvck5vcm1hbGlzZSIsInBhcnNlVVJMIiwiRXJyb3IiLCJub3JtYWxpemVQYXRoIiwiYnVpbGRVUkxGcm9tUGFydHMiLCJyZWxhdGl2ZVBhcnRzIiwic2NoZW1lIiwiYmFzZVBhcnRzIiwibmV0TG9jIiwicGF0aFBhcnRzIiwiZXhlYyIsImJ1aWx0UGFydHMiLCJwYXJhbXMiLCJxdWVyeSIsImJhc2VVUkxQYXRoIiwibmV3UGF0aCIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwidXJsIiwicGFydHMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfcHJvdG8iLCJMaW5lU3RyZWFtIiwiX1N0cmVhbSIsIl90aGlzIiwibmV4dE5ld2xpbmUiLCJwYXJzZUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsImF0dHJzIiwiYXR0cmlidXRlU2VwYXJhdG9yIiwiUmVnRXhwIiwiUGFyc2VTdHJlYW0iLCJjdXN0b21QYXJzZXJzIiwidGFnTWFwcGVycyIsIl90aGlzMiIsImFjYyIsIm1hcHBlciIsIm1hcHBlZExpbmUiLCJuZXdMaW5lIiwidGFnVHlwZSIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIm51bWJlciIsInBsYXlsaXN0VHlwZSIsImFsbG93ZWQiLCJVUkkiLCJ1cmkiLCJCWVRFUkFOR0UiLCJfYXR0cmlidXRlcyRCWVRFUkFOR0UiLCJieXRlcmFuZ2UiLCJSRVNPTFVUSU9OIiwicmVzb2x1dGlvbiIsIkJBTkRXSURUSCIsImRhdGVUaW1lU3RyaW5nIiwiZGF0ZVRpbWVPYmplY3QiLCJJViIsIlBSRUNJU0UiLCJhZGRQYXJzZXIiLCJfcmVmIiwiX3RoaXMzIiwiZXhwcmVzc2lvbiIsImN1c3RvbVR5cGUiLCJkYXRhUGFyc2VyIiwiYWRkVGFnTWFwcGVyIiwiX3JlZjIiLCJtYXBGbiIsImRlY29kZUI2NFRvVWludDhBcnJheSIsImI2NFRleHQiLCJkZWNvZGVkU3RyaW5nIiwiYXJyYXkiLCJQYXJzZXIiLCJsaW5lU3RyZWFtIiwicGFyc2VTdHJlYW0iLCJjdXJyZW50TWFwIiwiX2tleSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInVyaXMiLCJjdXJyZW50VXJpIiwibm9vcCIsImRlZmF1bHRNZWRpYUdyb3VwcyIsImN1cnJlbnRUaW1lbGluZSIsIm1hbmlmZXN0IiwiYWxsb3dDYWNoZSIsImRpc2NvbnRpbnVpdHlTdGFydHMiLCJzZWdtZW50cyIsImVudHJ5IiwibWVkaWFHcm91cCIsInJlbmRpdGlvbiIsIm1lc3NhZ2UiLCJlbmRsaXN0IiwiZW5kTGlzdCIsImluZiIsIm1lZGlhU2VxdWVuY2UiLCJkaXNjb250aW51aXR5U2VxdWVuY2UiLCJNRVRIT0QiLCJLRVlGT1JNQVQiLCJLRVlJRCIsImNvbnRlbnRQcm90ZWN0aW9uIiwic2NoZW1lSWRVcmkiLCJrZXlJZCIsInBzc2giLCJtZXRob2QiLCJpdiIsInBsYXlsaXN0Iiwic3RyZWFtSW5mIiwicGxheWxpc3RzIiwibWVkaWFHcm91cHMiLCJtZWRpYSIsIlRZUEUiLCJOQU1FIiwibWVkaWFHcm91cFR5cGUiLCJkZWZhdWx0IiwiREVGQVVMVCIsImF1dG9zZWxlY3QiLCJBVVRPU0VMRUNUIiwiTEFOR1VBR0UiLCJpbnN0cmVhbUlkIiwiQ0hBUkFDVEVSSVNUSUNTIiwiY2hhcmFjdGVyaXN0aWNzIiwiRk9SQ0VEIiwiZm9yY2VkIiwicHJvZ3JhbURhdGVUaW1lIiwidGFyZ2V0ZHVyYXRpb24iLCJ0YXJnZXREdXJhdGlvbiIsInRvdGFsZHVyYXRpb24iLCJ0b3RhbER1cmF0aW9uIiwiaXNOYU4iLCJ0aW1lT2Zmc2V0IiwicHJlY2lzZSIsImN1ZU91dCIsImN1ZU91dENvbnQiLCJjdWVJbiIsInRpbWVsaW5lIiwiY29tbWVudCIsImN1c3RvbSIsImNodW5rIiwiaXNPYmplY3QiLCJvYmoiLCJtZXJnZSIsIl9sZW4iLCJvYmplY3RzIiwiaXNBcnJheSIsImZsYXR0ZW4iLCJsaXN0cyIsIngiLCJ5IiwiZnJvbSIsImxpc3QiLCJlcnJvcnMiLCJ1cmxUb29sa2l0IiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJyZXNvbHZlVXJsIiwiYmFzZVVybCIsInJlbGF0aXZlVXJsIiwiaHJlZiIsInVybFR5cGVUb1NlZ21lbnQiLCJfcmVmJGJhc2VVcmwiLCJfcmVmJHNvdXJjZSIsIl9yZWYkcmFuZ2UiLCJyYW5nZSIsIl9yZWYkaW5kZXhSYW5nZSIsImluZGV4UmFuZ2UiLCJyZXNvbHZlZFVyaSIsInJhbmdlcyIsInN0YXJ0UmFuZ2UiLCJlbmRSYW5nZSIsImJ5dGVSYW5nZVRvU3RyaW5nIiwic2VnbWVudFJhbmdlIiwic3RhdGljIiwiX3N0YXRpYyIsIl9hdHRyaWJ1dGVzJHRpbWVzY2FsZSIsInNvdXJjZUR1cmF0aW9uIiwiY2VpbCIsImR5bmFtaWMiLCJOT1ciLCJjbGllbnRPZmZzZXQiLCJhdmFpbGFiaWxpdHlTdGFydFRpbWUiLCJfYXR0cmlidXRlcyR0aW1lc2NhbGUyIiwiX2F0dHJpYnV0ZXMkc3RhcnQiLCJfYXR0cmlidXRlcyRtaW5pbXVtVXAiLCJtaW5pbXVtVXBkYXRlUGVyaW9kIiwiX2F0dHJpYnV0ZXMkdGltZVNoaWZ0IiwidGltZVNoaWZ0QnVmZmVyRGVwdGgiLCJub3ciLCJwZXJpb2RTdGFydFdDIiwicGVyaW9kRHVyYXRpb24iLCJzZWdtZW50Q291bnQiLCJhdmFpbGFibGVTdGFydCIsImZsb29yIiwiYXZhaWxhYmxlRW5kIiwibWF4IiwicGFyc2VCeUR1cmF0aW9uIiwiX2F0dHJpYnV0ZXMkdHlwZSIsIl9hdHRyaWJ1dGVzJHRpbWVzY2FsZTQiLCJfc2VnbWVudFJhbmdlJHR5cGUiLCJ0b1NlZ21lbnRzIiwiX2F0dHJpYnV0ZXMkdGltZXNjYWxlMyIsInBlcmlvZEluZGV4IiwiX2F0dHJpYnV0ZXMkc3RhcnROdW1iIiwic3RhcnROdW1iZXIiLCJ0aW1lIiwic2VnbWVudHNGcm9tQmFzZSIsIl9hdHRyaWJ1dGVzJGluaXRpYWxpeiIsImluaXRpYWxpemF0aW9uIiwiX2F0dHJpYnV0ZXMkaW5kZXhSYW5nIiwiaW5pdFNlZ21lbnQiLCJzb3VyY2VVUkwiLCJzZWdtZW50VGltZUluZm8iLCJhZGRTZWdtZW50c1RvUGxheWxpc3QiLCJzaWR4Qnl0ZVJhbmdlIiwic2lkeEVuZCIsIm1lZGlhUmVmZXJlbmNlcyIsInIiLCJtZXJnZURpc2NvbnRpZ3VvdXNQbGF5bGlzdHMiLCJ2YWx1ZXMiLCJvIiwiayIsIl9hY2MkbmFtZSRzZWdtZW50cyIsImxhbmciLCJmaW5kSW5kZXhlcyIsImwiLCJhZGRTZWdtZW50SW5mb0Zyb21TaWR4Iiwic2lkeE1hcHBpbmciLCJzaWR4S2V5Iiwic2lkeE1hdGNoIiwiZm9ybWF0QXVkaW9QbGF5bGlzdCIsIl9hdHRyaWJ1dGVzIiwiYmFuZHdpZHRoIiwiQ09ERUNTIiwiY29kZWNzIiwiZm9ybWF0VnR0UGxheWxpc3QiLCJfYXR0cmlidXRlczIiLCJmb3JtYXRWaWRlb1BsYXlsaXN0IiwiX3JlZjMiLCJfYXR0cmlidXRlczMiLCJBVURJTyIsIlNVQlRJVExFUyIsInRvTTN1OCIsImRhc2hQbGF5bGlzdHMiLCJfbWVkaWFHcm91cHMiLCJfZGFzaFBsYXlsaXN0cyQwJGF0dHIiLCJfZGFzaFBsYXlsaXN0cyQwJGF0dHIyIiwidmlkZW9QbGF5bGlzdHMiLCJ2aWRlb09ubHkiLCJfcmVmNCIsIm1pbWVUeXBlIiwiY29udGVudFR5cGUiLCJhdWRpb1BsYXlsaXN0cyIsImF1ZGlvT25seSIsIl9yZWY1IiwidnR0UGxheWxpc3RzIiwidnR0T25seSIsIl9yZWY2IiwibWFzdGVyIiwiVklERU8iLCJvcmdhbml6ZUF1ZGlvUGxheWxpc3RzIiwibWFpblBsYXlsaXN0IiwiZm9ybWF0dGVkUGxheWxpc3RzIiwicm9sZSIsImxhYmVsIiwicm9sZUxhYmVsIiwic3VicyIsIm9yZ2FuaXplVnR0UGxheWxpc3RzIiwiZ2V0TGl2ZVJWYWx1ZSIsInBhcnNlQnlUaW1lbGluZSIsInNlZ21lbnRUaW1lbGluZSIsIl9hdHRyaWJ1dGVzJG1pbmltdW1VcDIiLCJfYXR0cmlidXRlcyRtZWRpYSIsInNJbmRleCIsIlMiLCJyZXBlYXQiLCJzZWdtZW50VGltZSIsInQiLCJuZXh0UyIsImlkZW50aWZpZXJQYXR0ZXJuIiwiY29uc3RydWN0VGVtcGxhdGVVcmwiLCJpZGVudGlmaWVyUmVwbGFjZW1lbnQiLCJpZGVudGlmaWVyIiwic2VnbWVudHNGcm9tVGVtcGxhdGUiLCJ0ZW1wbGF0ZVZhbHVlcyIsIlJlcHJlc2VudGF0aW9uSUQiLCJCYW5kd2lkdGgiLCJtYXBTZWdtZW50IiwicGFyc2VUZW1wbGF0ZUluZm8iLCJOdW1iZXIiLCJUaW1lIiwic2VnbWVudHNGcm9tTGlzdCIsIl9hdHRyaWJ1dGVzJHNlZ21lbnRVciIsInNlZ21lbnRVcmxzIiwic2VnbWVudFVybE1hcCIsInNlZ21lbnRVcmxPYmplY3QiLCJTZWdtZW50VVJMVG9TZWdtZW50T2JqZWN0Iiwic2VnbWVudFVybCIsIm1lZGlhUmFuZ2UiLCJnZW5lcmF0ZVNlZ21lbnRzIiwic2VnbWVudEF0dHJpYnV0ZXMiLCJzZWdtZW50c0ZuIiwidGVtcGxhdGUiLCJiYXNlIiwic2VnbWVudHNJbmZvIiwiX3NlZ21lbnRBdHRyaWJ1dGVzIiwiX3NlZ21lbnRBdHRyaWJ1dGVzJHRpIiwiZmluZENoaWxkcmVuIiwiZWxlbWVudCIsImNoaWxkTm9kZXMiLCJ0YWdOYW1lIiwiZ2V0Q29udGVudCIsInRleHRDb250ZW50IiwicGFyc2VEdXJhdGlvbiIsInN0ciIsIl9tYXRjaCRzbGljZSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJwYXJzZXJzIiwibWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbiIsInBhcnNlRGF0ZSIsInBhcnNlZFZhbHVlIiwiZWwiLCJwYXJzZUZuIiwia2V5U3lzdGVtc01hcCIsImJ1aWxkQmFzZVVybHMiLCJyZWZlcmVuY2VVcmxzIiwiYmFzZVVybEVsZW1lbnRzIiwiYmFzZVVybEVsZW1lbnQiLCJnZXRTZWdtZW50SW5mb3JtYXRpb24iLCJhZGFwdGF0aW9uU2V0Iiwic2VnbWVudFRlbXBsYXRlIiwic2VnbWVudExpc3QiLCJzIiwic2VnbWVudEJhc2UiLCJzZWdtZW50VGltZWxpbmVQYXJlbnROb2RlIiwic2VnbWVudEluaXRpYWxpemF0aW9uUGFyZW50Tm9kZSIsInNlZ21lbnRJbml0aWFsaXphdGlvbiIsImdlbmVyYXRlS2V5U3lzdGVtSW5mb3JtYXRpb24iLCJjb250ZW50UHJvdGVjdGlvbk5vZGVzIiwibm9kZSIsImtleVN5c3RlbSIsInBzc2hOb2RlIiwicHNzaEJ1ZmZlciIsInRvUmVwcmVzZW50YXRpb25zIiwicGVyaW9kQXR0cmlidXRlcyIsInBlcmlvZEJhc2VVcmxzIiwicGVyaW9kU2VnbWVudEluZm8iLCJhZGFwdGF0aW9uU2V0QXR0cmlidXRlcyIsImFkYXB0YXRpb25TZXRCYXNlVXJscyIsInJvbGVBdHRyaWJ1dGVzIiwicmVwcmVzZW50YXRpb25zIiwiYWRhcHRhdGlvblNldFNlZ21lbnRJbmZvIiwiaW5oZXJpdEJhc2VVcmxzIiwicmVwcmVzZW50YXRpb24iLCJyZXBCYXNlVXJsRWxlbWVudHMiLCJyZXBCYXNlVXJscyIsInJlcHJlc2VudGF0aW9uU2VnbWVudEluZm8iLCJpbmhlcml0QXR0cmlidXRlcyIsIm1wZCIsIl9vcHRpb25zIiwiX29wdGlvbnMkbWFuaWZlc3RVcmkiLCJtYW5pZmVzdFVyaSIsIl9vcHRpb25zJE5PVyIsIl9vcHRpb25zJGNsaWVudE9mZnNldCIsInBlcmlvZHMiLCJtcGRBdHRyaWJ1dGVzIiwibXBkQmFzZVVybHMiLCJ0b0FkYXB0YXRpb25TZXRzIiwicGVyaW9kIiwicGVyaW9kQXR0IiwicGFyc2VkUGVyaW9kSWQiLCJhZGFwdGF0aW9uU2V0cyIsInN0cmluZ1RvTXBkWG1sIiwibWFuaWZlc3RTdHJpbmciLCJ4bWwiLCJwYXJzZUZyb21TdHJpbmciLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRvUGxheWxpc3RzIiwicGFyc2VVVENUaW1pbmciLCJwYXJzZVVUQ1RpbWluZ1NjaGVtZSIsIlVUQ1RpbWluZ05vZGUiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImFlc1RhYmxlcyIsIkFFUyIsInByZWNvbXB1dGUiLCJ0YWJsZXMiLCJlbmNUYWJsZSIsImRlY1RhYmxlIiwic2JveCIsInNib3hJbnYiLCJ4SW52IiwidGgiLCJ4MiIsIng0IiwidEVuYyIsInREZWMiLCJfdGFibGVzIiwiaiIsInRtcCIsImVuY0tleSIsImRlY0tleSIsImtleUxlbiIsInJjb24iLCJkZWNyeXB0IiwiZW5jcnlwdGVkMCIsImVuY3J5cHRlZDEiLCJlbmNyeXB0ZWQyIiwiZW5jcnlwdGVkMyIsIm91dCIsImMiLCJhMiIsImIyIiwiYzIiLCJuSW5uZXJSb3VuZHMiLCJrSW5kZXgiLCJ0YWJsZTAiLCJ0YWJsZTEiLCJ0YWJsZTIiLCJ0YWJsZTMiLCJfbGVuZ3RoIiwiX2kiLCJBc3luY1N0cmVhbSIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJqb2JzIiwiZGVsYXkiLCJ0aW1lb3V0XyIsInNldFByb3RvdHlwZU9mIiwiaW5oZXJpdHMiLCJwcm9jZXNzSm9iXyIsImpvYiIsIm50b2giLCJ3b3JkIiwiZW5jcnlwdGVkIiwiaW5pdFZlY3RvciIsImVuY3J5cHRlZDMyIiwiSW50MzJBcnJheSIsImRlY2lwaGVyIiwiZGVjcnlwdGVkIiwiZGVjcnlwdGVkMzIiLCJpbml0MCIsImluaXQxIiwiaW5pdDIiLCJpbml0MyIsIndvcmRJeCIsIkRlY3J5cHRlciIsImRvbmUiLCJzdGVwIiwiU1RFUCIsImFzeW5jU3RyZWFtXyIsImRlY3J5cHRDaHVua18iLCJ1bnBhZCIsInBhZGRlZCIsImdldCIsImdldCQkMSIsImxvZyIsImNyZWF0ZUxvZ2dlciIsImxvZ0J5VHlwZSIsImxldmVsIiwiTG9nQnlUeXBlRmFjdG9yeSIsImx2bCIsImxldmVscyIsImx2bFJlZ0V4cCIsInVuc2hpZnQiLCJ0b1VwcGVyQ2FzZSIsInN1Ym5hbWUiLCJhbGwiLCJkZWJ1ZyIsImhpc3RvcnkiLCJmbmFtZSIsImhpc3RvcnlJdGVtIiwiY2xlYXIiLCJkaXNhYmxlIiwiZW5hYmxlIiwiX2xlbjIiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiY3JlYXRlTG9nZ2VyJDEiLCJvYmplY3QiLCJlYWNoIiwic291cmNlcyIsImlzUGxhaW4iLCJjb21wdXRlZFN0eWxlIiwicHJvcCIsImNvbXB1dGVkU3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJpc05vbkJsYW5rU3RyaW5nIiwidGhyb3dJZldoaXRlc3BhY2UiLCJpc1JlYWwiLCJpc0VsIiwibm9kZVR5cGUiLCJpc0luRnJhbWUiLCJjcmVhdGVRdWVyaWVyIiwic2VsZWN0b3IiLCJjb250ZXh0IiwiY3R4IiwiY3JlYXRlRWwiLCJwcm9wZXJ0aWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3BOYW1lIiwidmFsIiwic2V0QXR0cmlidXRlIiwiYXR0ck5hbWUiLCJhcHBlbmRDb250ZW50IiwiaW5uZXJUZXh0IiwicHJlcGVuZFRvIiwiY2hpbGQiLCJwYXJlbnQiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJoYXNDbGFzcyIsImNsYXNzVG9DaGVjayIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY2xhc3NSZWdFeHAiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImNsYXNzVG9BZGQiLCJhZGQiLCJyZW1vdmVDbGFzcyIsImNsYXNzVG9SZW1vdmUiLCJyZW1vdmUiLCJ0b2dnbGVDbGFzcyIsImNsYXNzVG9Ub2dnbGUiLCJwcmVkaWNhdGUiLCJoYXMiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0clZhbHVlIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlcyIsImtub3duQm9vbGVhbnMiLCJhdHRyVmFsIiwiZ2V0QXR0cmlidXRlIiwiYXR0cmlidXRlIiwiYmxvY2tUZXh0U2VsZWN0aW9uIiwiZm9jdXMiLCJ1bmJsb2NrVGV4dFNlbGVjdGlvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhcmVudE5vZGUiLCJyZWN0IiwiZmluZFBvc2l0aW9uIiwibGVmdCIsInRvcCIsImRvY0VsIiwiYm9keSIsImNsaWVudExlZnQiLCJzY3JvbGxMZWZ0IiwiY2xpZW50VG9wIiwic2Nyb2xsVG9wIiwicm91bmQiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJwb3NpdGlvbiIsImJveFciLCJvZmZzZXRXaWR0aCIsImJveEgiLCJvZmZzZXRIZWlnaHQiLCJib3hZIiwiYm94WCIsInBhZ2VZIiwicGFnZVgiLCJjaGFuZ2VkVG91Y2hlcyIsImlzVGV4dE5vZGUiLCJlbXB0eUVsIiwicmVtb3ZlQ2hpbGQiLCJub3JtYWxpemVDb250ZW50IiwiaW5zZXJ0Q29udGVudCIsImlzU2luZ2xlTGVmdENsaWNrIiwiYnV0dG9uIiwiYnV0dG9ucyIsInZpZGVvanMiLCIkIiwiJCQiLCJEb20iLCJmcmVlemUiLCJfd2luZG93TG9hZGVkIiwiYXV0b1NldHVwIiwidmlkcyIsImF1ZGlvcyIsImRpdnMiLCJtZWRpYUVscyIsIm1lZGlhRWwiLCJhdXRvU2V0dXBUaW1lb3V0IiwicGxheWVyIiwid2FpdCIsInZqcyIsInNldFdpbmRvd0xvYWRlZCIsIkZha2VXZWFrTWFwIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGUiLCJzZXRUZXh0Q29udGVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiX2d1aWQiLCJuZXdHVUlEIiwidmRhdGEiLCJhY2Nlc3MiLCJfZGVsZXRlIiwiRG9tRGF0YSIsIldlYWtNYXAiLCJfY2xlYW5VcEV2ZW50cyIsImhhbmRsZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoZXIiLCJkZXRhY2hFdmVudCIsImRpc2FibGVkIiwiX2hhbmRsZU11bHRpcGxlRXZlbnRzIiwidHlwZXMiLCJjYWxsYmFjayIsImZpeEV2ZW50IiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJvbGQiLCJwcmV2ZW50RGVmYXVsdCIsInNyY0VsZW1lbnQiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJyZXR1cm5WYWx1ZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImNsaWVudFgiLCJkb2MiLCJjbGllbnRZIiwiX3N1cHBvcnRzUGFzc2l2ZSIsInBhc3NpdmVFdmVudHMiLCJndWlkIiwiaGFzaCIsImhhbmRsZXJzQ29weSIsIm0iLCJuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJhdHRhY2hFdmVudCIsInJlbW92ZVR5cGUiLCJlbGVtRGF0YSIsIm93bmVyRG9jdW1lbnQiLCJidWJibGVzIiwidGFyZ2V0RGF0YSIsIm9uZSIsImZ1bmMiLCJhbnkiLCJFVkVOVF9NQVAiLCJFdmVudHMiLCJ1aWQiLCJib3VuZCIsInRocm90dGxlIiwibGFzdCIsInRocm90dGxlZCIsIkV2ZW50VGFyZ2V0IiwiYWxsb3dlZEV2ZW50c18iLCJhZWwiLCJkaXNwYXRjaEV2ZW50IiwicXVldWVUcmlnZ2VyIiwiTWFwIiwib2xkVGltZW91dCIsInRpbWVvdXQiLCJpc0V2ZW50ZWQiLCJldmVudEJ1c0VsXyIsImV2ZXJ5IiwiaXNWYWxpZEV2ZW50VHlwZSIsInZhbGlkYXRlVGFyZ2V0Iiwibm9kZU5hbWUiLCJ2YWxpZGF0ZUV2ZW50VHlwZSIsInZhbGlkYXRlTGlzdGVuZXIiLCJub3JtYWxpemVMaXN0ZW5BcmdzIiwiaXNUYXJnZXRpbmdTZWxmIiwibGlzdGVuIiwiRXZlbnRlZE1peGluIiwiX25vcm1hbGl6ZUxpc3RlbkFyZ3MiLCJyZW1vdmVMaXN0ZW5lck9uRGlzcG9zZSIsInJlbW92ZVJlbW92ZXJPblRhcmdldERpc3Bvc2UiLCJfbm9ybWFsaXplTGlzdGVuQXJnczIiLCJ3cmFwcGVyIiwibGFyZ3MiLCJfbm9ybWFsaXplTGlzdGVuQXJnczMiLCJfbGVuNSIsIl9rZXk1Iiwib2ZmJDEiLCJ0YXJnZXRPclR5cGUiLCJ0eXBlT3JMaXN0ZW5lciIsInRyaWdnZXIkMSIsImV2ZW50ZWQiLCJldmVudEJ1c0tleSIsImV2ZW50ZWRDYWxsYmFja3MiLCJTdGF0ZWZ1bE1peGluIiwic3RhdGUiLCJzZXRTdGF0ZSIsInN0YXRlVXBkYXRlcyIsImNoYW5nZXMiLCJ0byIsInN0YXRlZnVsIiwiZGVmYXVsdFN0YXRlIiwiaGFuZGxlU3RhdGVDaGFuZ2VkIiwidyIsInRvVGl0bGVDYXNlIiwibWVyZ2VPcHRpb25zIiwiQ29tcG9uZW50IiwicmVhZHkiLCJwbGF5IiwicGxheWVyXyIsInBhcmVudENvbXBvbmVudF8iLCJvcHRpb25zXyIsImlkXyIsIlNldFNoYW0iLCJlbF8iLCJjaGlsZHJlbl8iLCJjaGlsZEluZGV4XyIsImNoaWxkTmFtZUluZGV4XyIsInNldF8iLCJfcHJvdG8yIiwidGhpc0FyZyIsInNldFRpbWVvdXRJZHNfIiwiU2V0Iiwic2V0SW50ZXJ2YWxJZHNfIiwicmFmSWRzXyIsImNsZWFyaW5nVGltZXJzT25EaXNwb3NlXyIsImluaXRDaGlsZHJlbiIsInJlcG9ydFRvdWNoQWN0aXZpdHkiLCJlbmFibGVUb3VjaEFjdGl2aXR5IiwiY3JlYXRlRWwkMSIsImxvY2FsaXplIiwidG9rZW5zIiwiZGVmYXVsdFZhbHVlIiwibGFuZ3VhZ2VzIiwicHJpbWFyeUNvZGUiLCJwcmltYXJ5TGFuZyIsImxvY2FsaXplZFN0cmluZyIsInJldCIsImNvbnRlbnRFbCIsImNvbnRlbnRFbF8iLCJjaGlsZHJlbiIsImdldENoaWxkQnlJZCIsImdldENoaWxkIiwiYWRkQ2hpbGQiLCJjb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwiY29tcG9uZW50Q2xhc3NOYW1lIiwiY29tcG9uZW50Q2xhc3MiLCJDb21wb25lbnRDbGFzcyIsImdldENvbXBvbmVudCIsInJlZk5vZGUiLCJjaGlsZEZvdW5kIiwiY29tcEVsIiwid29ya2luZ0NoaWxkcmVuIiwicGFyZW50T3B0aW9ucyIsIlRlY2giLCJzb21lIiwid2NoaWxkIiwiaXNUZWNoIiwiaGFuZGxlQWRkIiwicGxheWVyT3B0aW9ucyIsIm5ld0NoaWxkIiwiYnVpbGRDU1NDbGFzcyIsInN5bmMiLCJpc1JlYWR5XyIsInJlYWR5UXVldWVfIiwidHJpZ2dlclJlYWR5IiwicmVhZHlRdWV1ZSIsIiQkMSIsIiQkJDEiLCJoYXNDbGFzcyQxIiwiYWRkQ2xhc3MkMSIsInJlbW92ZUNsYXNzJDEiLCJ0b2dnbGVDbGFzcyQxIiwic2hvdyIsImhpZGUiLCJsb2NrU2hvd2luZyIsInVubG9ja1Nob3dpbmciLCJnZXRBdHRyaWJ1dGUkMSIsInNldEF0dHJpYnV0ZSQxIiwicmVtb3ZlQXR0cmlidXRlJDEiLCJudW0iLCJza2lwTGlzdGVuZXJzIiwiZGltZW5zaW9uIiwiZGltZW5zaW9ucyIsIndpZHRoT3JIZWlnaHQiLCJweEluZGV4IiwiY3VycmVudERpbWVuc2lvbiIsImNvbXB1dGVkV2lkdGhPckhlaWdodCIsInJ1bGUiLCJjdXJyZW50RGltZW5zaW9ucyIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJibHVyIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZUtleVByZXNzIiwiZW1pdFRhcEV2ZW50cyIsImNvdWxkQmVUYXAiLCJ0b3VjaFN0YXJ0IiwiZmlyc3RUb3VjaCIsInRvdWNoZXMiLCJ4ZGlmZiIsInlkaWZmIiwic3FydCIsIm5vVGFwIiwicmVwb3J0VXNlckFjdGl2aXR5IiwidG91Y2hIb2xkaW5nIiwicmVwb3J0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidG91Y2hFbmQiLCJ0aW1lb3V0SWQiLCJjbGVhclRpbWVyc09uRGlzcG9zZV8iLCJjbGVhclRpbWVvdXQiLCJpbnRlcnZhbCIsImludGVydmFsSWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdXBwb3J0c1JhZl8iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIl90aGlzNCIsImlkTmFtZSIsImNhbmNlbE5hbWUiLCJyZWdpc3RlckNvbXBvbmVudCIsIkNvbXBvbmVudFRvUmVnaXN0ZXIiLCJyZWFzb24iLCJpc0NvbXAiLCJpc1Byb3RvdHlwZU9mIiwiY29tcG9uZW50c18iLCJQbGF5ZXIiLCJwbGF5ZXJzIiwicGxheWVyTmFtZXMiLCJwbmFtZSIsIkJvb2xlYW4iLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsIkNsYXNzIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkZ1bmN0aW9uIiwiVVNFUl9BR0VOVCIsInVzZXJBZ2VudCIsIndlYmtpdFZlcnNpb25NYXAiLCJhcHBsZVdlYmtpdFZlcnNpb24iLCJwb3AiLCJJU19JUEFEIiwiSVNfSVBIT05FIiwiSVNfSVBPRCIsIklTX0lPUyIsIklPU19WRVJTSU9OIiwiSVNfQU5EUk9JRCIsIkFORFJPSURfVkVSU0lPTiIsIm1ham9yIiwibWlub3IiLCJJU19OQVRJVkVfQU5EUk9JRCIsIklTX0ZJUkVGT1giLCJJU19FREdFIiwiSVNfQ0hST01FIiwiQ0hST01FX1ZFUlNJT04iLCJJRV9WRVJTSU9OIiwiSVNfU0FGQVJJIiwiSVNfQU5ZX1NBRkFSSSIsIklTX1dJTkRPV1MiLCJUT1VDSF9FTkFCTEVEIiwibWF4VG91Y2hQb2ludHMiLCJicm93c2VyIiwiZ2V0UmFuZ2UiLCJmbk5hbWUiLCJ2YWx1ZUluZGV4IiwicmFuZ2VJbmRleCIsInJhbmdlQ2hlY2siLCJtYXhJbmRleCIsImNyZWF0ZVRpbWVSYW5nZXNPYmoiLCJjcmVhdGVUaW1lUmFuZ2VzIiwiYnVmZmVyZWRQZXJjZW50IiwiYnVmZmVyZWQiLCJidWZmZXJlZER1cmF0aW9uIiwiYnJvd3NlckFwaSIsIkZ1bGxzY3JlZW5BcGkiLCJwcmVmaXhlZCIsImFwaU1hcCIsInNwZWNBcGkiLCJNZWRpYUVycm9yIiwiZGVmYXVsdE1lc3NhZ2VzIiwic3RhdHVzIiwiZXJyb3JUeXBlcyIsImVyck51bSIsImlzUHJvbWlzZSIsInRoZW4iLCJzaWxlbmNlUHJvbWlzZSIsInRyYWNrVG9Kc29uXyIsImN1ZXMiLCJjdWUiLCJ0ZXh0VHJhY2tDb252ZXJ0ZXIiLCJ0ZXh0VHJhY2tzVG9Kc29uIiwidGVjaCIsInRyYWNrRWxzIiwidHJhY2tPYmpzIiwidHJhY2tFbCIsImpzb24iLCJzcmMiLCJ0ZXh0VHJhY2tzIiwianNvblRvVGV4dFRyYWNrcyIsImFkZGVkVHJhY2siLCJhZGRSZW1vdGVUZXh0VHJhY2siLCJhZGRDdWUiLCJNb2RhbERpYWxvZyIsIl9Db21wb25lbnQiLCJvcGVuZWRfIiwiaGFzQmVlbk9wZW5lZF8iLCJoYXNCZWVuRmlsbGVkXyIsImNsb3NlYWJsZSIsInVuY2xvc2VhYmxlIiwiTU9EQUxfQ0xBU1NfTkFNRSIsImRlc2NFbF8iLCJkZXNjcmlwdGlvbiIsInRhYkluZGV4IiwicHJldmlvdXNseUFjdGl2ZUVsXyIsImRlc2MiLCJvcGVuIiwiZmlsbEFsd2F5cyIsImZpbGwiLCJ3YXNQbGF5aW5nXyIsInBhdXNlZCIsInBhdXNlT25PcGVuIiwicGF1c2UiLCJoYWRDb250cm9sc18iLCJjb250cm9scyIsImNvbmRpdGlvbmFsRm9jdXNfIiwib3BlbmVkIiwiY2xvc2UiLCJjb25kaXRpb25hbEJsdXJfIiwidGVtcG9yYXJ5IiwiY2xvc2VhYmxlXyIsInRlbXAiLCJjb250cm9sVGV4dCIsImZpbGxXaXRoIiwicGFyZW50RWwiLCJuZXh0U2libGluZ0VsIiwibmV4dFNpYmxpbmciLCJlbXB0eSIsImNsb3NlQnV0dG9uIiwiY29udGVudF8iLCJhY3RpdmVFbCIsInBsYXllckVsIiwiZm9jdXNJbmRleCIsImZvY3VzYWJsZUVscyIsImZvY3VzYWJsZUVsc18iLCJxdWVyeVNlbGVjdG9yIiwic2hpZnRLZXkiLCJhbGxDaGlsZHJlbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYXNBdHRyaWJ1dGUiLCJUcmFja0xpc3QiLCJfRXZlbnRUYXJnZXQiLCJ0cmFja3NfIiwiYWRkVHJhY2siLCJyZW1vdmVUcmFjayIsInJ0cmFjayIsImdldFRyYWNrQnlJZCIsImNoYW5nZSIsImFkZHRyYWNrIiwicmVtb3ZldHJhY2siLCJkaXNhYmxlT3RoZXJzIiwiZW5hYmxlZCIsIkF1ZGlvVHJhY2tMaXN0IiwiX1RyYWNrTGlzdCIsImNoYW5naW5nXyIsImVuYWJsZWRDaGFuZ2VfIiwiZGlzYWJsZU90aGVycyQxIiwic2VsZWN0ZWQiLCJWaWRlb1RyYWNrTGlzdCIsInNlbGVjdGVkQ2hhbmdlXyIsIlRleHRUcmFja0xpc3QiLCJxdWV1ZUNoYW5nZV8iLCJ0cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZSIsInRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyIsImtpbmQiLCJzZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyIsIkh0bWxUcmFja0VsZW1lbnRMaXN0IiwidHJhY2tFbGVtZW50cyIsInRyYWNrRWxlbWVudHNfIiwiYWRkVHJhY2tFbGVtZW50XyIsInRyYWNrRWxlbWVudCIsImdldFRyYWNrRWxlbWVudEJ5VHJhY2tfIiwidHJhY2tFbGVtZW50XyIsInJlbW92ZVRyYWNrRWxlbWVudF8iLCJUZXh0VHJhY2tDdWVMaXN0Iiwic2V0Q3Vlc18iLCJsZW5ndGhfIiwib2xkTGVuZ3RoIiwiY3Vlc18iLCJkZWZpbmVQcm9wIiwiZ2V0Q3VlQnlJZCIsIlZpZGVvVHJhY2tLaW5kIiwiYWx0ZXJuYXRpdmUiLCJtYWluIiwic2lnbiIsInN1YnRpdGxlcyIsImNvbW1lbnRhcnkiLCJBdWRpb1RyYWNrS2luZCIsIlRleHRUcmFja0tpbmQiLCJkZXNjcmlwdGlvbnMiLCJjaGFwdGVycyIsIm1ldGFkYXRhIiwiVGV4dFRyYWNrTW9kZSIsImhpZGRlbiIsInNob3dpbmciLCJUcmFjayIsInRyYWNrUHJvcHMiLCJfbG9vcCIsInBhcnNlVXJsIiwiZGl2IiwiYWRkVG9Cb2R5IiwiaG9zdCIsInByb3RvY29sIiwiaW5uZXJIVE1MIiwiZGV0YWlscyIsImdldEFic29sdXRlVVJMIiwiZ2V0RmlsZUV4dGVuc2lvbiIsImlzQ3Jvc3NPcmlnaW4iLCJ3aW5Mb2MiLCJ1cmxJbmZvIiwiVXJsIiwicGFyc2VDdWVzIiwic3JjQ29udGVudCIsInBhcnNlciIsIlN0cmluZ0RlY29kZXIiLCJvbmN1ZSIsIm9ucGFyc2luZ2Vycm9yIiwib25mbHVzaCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJUZXh0VHJhY2siLCJfVHJhY2siLCJzZXR0aW5ncyIsInNyY2xhbmciLCJtb2RlIiwiZGVmYXVsdF8iLCJ0ZWNoXyIsImFjdGl2ZUN1ZXNfIiwiYWN0aXZlQ3VlcyIsImNoYW5nZWQiLCJ0aW1ldXBkYXRlSGFuZGxlciIsIm5ld01vZGUiLCJsb2FkZWRfIiwiY3QiLCJjdXJyZW50VGltZSIsImFjdGl2ZSIsImxvYWRUcmFjayIsImNyb3NzT3JpZ2luIiwiY29ycyIsImVyciIsInJlc3BvbnNlIiwicmVzcG9uc2VCb2R5Iiwib3JpZ2luYWxDdWUiLCJWVFRDdWUiLCJvcmlnaW5hbEN1ZV8iLCJyZW1vdmVDdWUiLCJfcmVtb3ZlQ3VlIiwiY3VlY2hhbmdlIiwiQXVkaW9UcmFjayIsIm5ld0VuYWJsZWQiLCJWaWRlb1RyYWNrIiwibmV3U2VsZWN0ZWQiLCJIVE1MVHJhY2tFbGVtZW50IiwicmVhZHlTdGF0ZSIsImxvYWQiLCJOT05FIiwiTE9BRElORyIsIkxPQURFRCIsIkVSUk9SIiwiTk9STUFMIiwiTGlzdENsYXNzIiwiVHJhY2tDbGFzcyIsImNhcGl0YWxOYW1lIiwiZ2V0dGVyTmFtZSIsInByaXZhdGVOYW1lIiwiUkVNT1RFIiwicmVtb3RlVGV4dCIsInJlbW90ZVRleHRFbCIsIkFMTCIsImhhc1N0YXJ0ZWRfIiwiZmVhdHVyZXNQcm9ncmVzc0V2ZW50cyIsIm1hbnVhbFByb2dyZXNzT24iLCJmZWF0dXJlc1RpbWV1cGRhdGVFdmVudHMiLCJtYW51YWxUaW1lVXBkYXRlc09uIiwibmF0aXZlQ2FwdGlvbnMiLCJuYXRpdmVUZXh0VHJhY2tzIiwiZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzIiwiZW11bGF0ZVRleHRUcmFja3MiLCJhdXRvUmVtb3RlVGV4dFRyYWNrc18iLCJpbml0VHJhY2tMaXN0ZW5lcnMiLCJuYXRpdmVDb250cm9sc0ZvclRvdWNoIiwidHJpZ2dlclNvdXJjZXNldCIsIm9uRHVyYXRpb25DaGFuZ2UiLCJtYW51YWxQcm9ncmVzcyIsInRyYWNrUHJvZ3Jlc3MiLCJtYW51YWxQcm9ncmVzc09mZiIsInN0b3BUcmFja2luZ1Byb2dyZXNzIiwicHJvZ3Jlc3NJbnRlcnZhbCIsIm51bUJ1ZmZlcmVkUGVyY2VudCIsImJ1ZmZlcmVkUGVyY2VudF8iLCJkdXJhdGlvbl8iLCJidWZmZXJlZFBlcmNlbnQkMSIsIm1hbnVhbFRpbWVVcGRhdGVzIiwidHJhY2tDdXJyZW50VGltZSIsInN0b3BUcmFja2luZ0N1cnJlbnRUaW1lIiwibWFudWFsVGltZVVwZGF0ZXNPZmYiLCJjdXJyZW50VGltZUludGVydmFsIiwibWFudWFsbHlUcmlnZ2VyZWQiLCJjbGVhclRyYWNrcyIsInJlbW92ZVJlbW90ZVRleHRUcmFjayIsImNsZWFudXBBdXRvVGV4dFRyYWNrcyIsImVycm9yXyIsInBsYXllZCIsInNldEN1cnJlbnRUaW1lIiwidHJhY2tMaXN0Q2hhbmdlcyIsImFkZFdlYlZ0dFNjcmlwdF8iLCJfdGhpczUiLCJzY3JpcHQiLCJvbmxvYWQiLCJvbmVycm9yIiwiX3RoaXM2IiwicmVtb3RlVHJhY2tzIiwicmVtb3RlVGV4dFRyYWNrcyIsImhhbmRsZUFkZFRyYWNrIiwiaGFuZGxlUmVtb3ZlVHJhY2siLCJ1cGRhdGVEaXNwbGF5IiwidGV4dFRyYWNrc0NoYW5nZXMiLCJhZGRUZXh0VHJhY2siLCJjcmVhdGVUcmFja0hlbHBlciIsImNyZWF0ZVJlbW90ZVRleHRUcmFjayIsIm1hbnVhbENsZWFudXAiLCJfdGhpczciLCJodG1sVHJhY2tFbGVtZW50IiwicmVtb3RlVGV4dFRyYWNrRWxzIiwiZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkiLCJyZXF1ZXN0UGljdHVyZUluUGljdHVyZSIsIlByb21pc2VDbGFzcyIsIlByb21pc2UiLCJyZWplY3QiLCJzZXRQb3N0ZXIiLCJwbGF5c2lubGluZSIsInNldFBsYXlzaW5saW5lIiwib3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcyIsIm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3MiLCJjYW5QbGF5VHlwZSIsImNhblBsYXlTb3VyY2UiLCJzcmNPYmoiLCJyZWdpc3RlclRlY2giLCJ0ZWNoc18iLCJkZWZhdWx0VGVjaE9yZGVyXyIsImdldFRlY2giLCJmZWF0dXJlc1ZvbHVtZUNvbnRyb2wiLCJmZWF0dXJlc011dGVDb250cm9sIiwiZmVhdHVyZXNGdWxsc2NyZWVuUmVzaXplIiwiZmVhdHVyZXNQbGF5YmFja1JhdGUiLCJmZWF0dXJlc1NvdXJjZXNldCIsIndpdGhTb3VyY2VIYW5kbGVycyIsIl9UZWNoIiwicmVnaXN0ZXJTb3VyY2VIYW5kbGVyIiwiaGFuZGxlciIsInNvdXJjZUhhbmRsZXJzIiwiY2FuIiwic2VsZWN0U291cmNlSGFuZGxlciIsImNhbkhhbmRsZVNvdXJjZSIsInNoIiwib3JpZ2luYWxGbiIsInNvdXJjZUhhbmRsZXJfIiwic2V0U291cmNlIiwibmF0aXZlU291cmNlSGFuZGxlciIsImRpc3Bvc2VTb3VyY2VIYW5kbGVyIiwiY3VycmVudFNvdXJjZV8iLCJoYW5kbGVTb3VyY2UiLCJtaWRkbGV3YXJlcyIsIm1pZGRsZXdhcmVJbnN0YW5jZXMiLCJURVJNSU5BVE9SIiwibmV4dCIsInNldFNvdXJjZUhlbHBlciIsIm1lZGlhdGUiLCJtaWRkbGV3YXJlIiwiY2FsbE1ldGhvZCIsIm1pZGRsZXdhcmVWYWx1ZSIsIm1pZGRsZXdhcmVJdGVyYXRvciIsInRlcm1pbmF0ZWQiLCJleGVjdXRlUmlnaHQiLCJtd3MiLCJtdyIsImFsbG93ZWRHZXR0ZXJzIiwic2Vla2FibGUiLCJhbGxvd2VkU2V0dGVycyIsInNldFZvbHVtZSIsImFsbG93ZWRNZWRpYXRvcnMiLCJsYXN0UnVuIiwiX21pZGRsZXdhcmUiLCJtd0ZhY3RvcnkiLCJtd3Jlc3QiLCJnZXRPckNyZWF0ZUZhY3RvcnkiLCJfbXdzJGkiLCJtd2YiLCJtd2kiLCJfc3JjIiwiTWltZXR5cGVzS2luZCIsIm9wdXMiLCJvZ3YiLCJtcDQiLCJtb3YiLCJtNHYiLCJta3YiLCJtNGEiLCJtcDMiLCJvZ2EiLCJtM3U4IiwianBnIiwianBlZyIsImdpZiIsInBuZyIsInN2ZyIsIndlYnAiLCJnZXRNaW1ldHlwZSIsImV4dCIsImZpbHRlclNvdXJjZSIsIm5ld3NyYyIsInNyY29iaiIsImZpeFNvdXJjZSIsIm1pbWV0eXBlIiwiTWVkaWFMb2FkZXIiLCJ0ZWNoT3JkZXIiLCJ0ZWNoTmFtZSIsImlzU3VwcG9ydGVkIiwibG9hZFRlY2hfIiwiQ2xpY2thYmxlQ29tcG9uZW50IiwidGFiSW5kZXhfIiwiY3JlYXRlQ29udHJvbFRleHRFbCIsImNvbnRyb2xUZXh0RWxfIiwiY29udHJvbFRleHRfIiwibG9jYWxpemVkVGV4dCIsIm5vbkljb25Db250cm9sIiwiZW5hYmxlZF8iLCJoYW5kbGVDbGljayIsImhhbmRsZU1vdXNlT3ZlciIsImhhbmRsZU1vdXNlT3V0IiwiUG9zdGVySW1hZ2UiLCJfQ2xpY2thYmxlQ29tcG9uZW50IiwidXBkYXRlIiwicG9zdGVyIiwic2V0U3JjIiwiYmFja2dyb3VuZEltYWdlIiwiZm9udE1hcCIsIm1vbm9zcGFjZSIsInNhbnNTZXJpZiIsInNlcmlmIiwibW9ub3NwYWNlU2Fuc1NlcmlmIiwibW9ub3NwYWNlU2VyaWYiLCJwcm9wb3J0aW9uYWxTYW5zU2VyaWYiLCJwcm9wb3J0aW9uYWxTZXJpZiIsImNhc3VhbCIsInNtYWxsY2FwcyIsImNvbnN0cnVjdENvbG9yIiwiY29sb3IiLCJvcGFjaXR5IiwiaGV4IiwidHJ5VXBkYXRlU3R5bGUiLCJUZXh0VHJhY2tEaXNwbGF5IiwidXBkYXRlRGlzcGxheUhhbmRsZXIiLCJ0b2dnbGVEaXNwbGF5IiwicHJlc2VsZWN0VHJhY2siLCJmaXJzdERlc2MiLCJmaXJzdENhcHRpb25zIiwicHJlZmVycmVkVHJhY2siLCJtb2RlcyIsInRyYWNrTGlzdCIsInVzZXJQcmVmIiwiY2FjaGVfIiwic2VsZWN0ZWRMYW5ndWFnZSIsImNsZWFyRGlzcGxheSIsInByb2Nlc3NDdWVzIiwiYWxsb3dNdWx0aXBsZVNob3dpbmdUcmFja3MiLCJzaG93aW5nVHJhY2tzIiwidXBkYXRlRm9yVHJhY2siLCJkZXNjcmlwdGlvbnNUcmFjayIsImNhcHRpb25zU3VidGl0bGVzVHJhY2siLCJfdHJhY2siLCJ1cGRhdGVEaXNwbGF5U3RhdGUiLCJvdmVycmlkZXMiLCJ0ZXh0VHJhY2tTZXR0aW5ncyIsImdldFZhbHVlcyIsImN1ZURpdiIsImRpc3BsYXlTdGF0ZSIsInRleHRPcGFjaXR5IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZE9wYWNpdHkiLCJ3aW5kb3dDb2xvciIsIndpbmRvd09wYWNpdHkiLCJlZGdlU3R5bGUiLCJ0ZXh0U2hhZG93IiwiZm9udFBlcmNlbnQiLCJmb250U2l6ZSIsImJvdHRvbSIsImZvbnRGYW1pbHkiLCJmb250VmFyaWFudCIsIl9pMiIsIl90cmFjazIiLCJfaiIsImN1ZUVsIiwiTG9hZGluZ1NwaW5uZXIiLCJpc0F1ZGlvIiwicGxheWVyVHlwZSIsImRpciIsIkJ1dHRvbiIsIkJpZ1BsYXlCdXR0b24iLCJfQnV0dG9uIiwibW91c2V1c2VkXyIsImhhbmRsZU1vdXNlRG93biIsInBsYXlQcm9taXNlIiwiY2IiLCJwbGF5VG9nZ2xlIiwicGxheUZvY3VzIiwiQ2xvc2VCdXR0b24iLCJQbGF5VG9nZ2xlIiwicmVwbGF5IiwiaGFuZGxlUGxheSIsImhhbmRsZVBhdXNlIiwiaGFuZGxlRW5kZWQiLCJoYW5kbGVTZWVrZWQiLCJkZWZhdWx0SW1wbGVtZW50YXRpb24iLCJndWlkZSIsImgiLCJnbSIsImdoIiwiaW1wbGVtZW50YXRpb24iLCJmb3JtYXRUaW1lIiwiVGltZURpc3BsYXkiLCJ0aHJvdHRsZWRVcGRhdGVDb250ZW50IiwidXBkYXRlQ29udGVudCIsImxhYmVsVGV4dF8iLCJ1cGRhdGVUZXh0Tm9kZV8iLCJ0ZXh0Tm9kZV8iLCJmb3JtYXR0ZWRUaW1lXyIsImZvcm1hdFRpbWVfIiwidXBkYXRlRm9ybWF0dGVkVGltZV8iLCJmb3JtYXR0ZWRUaW1lIiwiQ3VycmVudFRpbWVEaXNwbGF5IiwiX1RpbWVEaXNwbGF5Iiwic2NydWJiaW5nIiwiZ2V0Q2FjaGUiLCJEdXJhdGlvbkRpc3BsYXkiLCJUaW1lRGl2aWRlciIsIlJlbWFpbmluZ1RpbWVEaXNwbGF5IiwicmVtYWluaW5nVGltZURpc3BsYXkiLCJyZW1haW5pbmdUaW1lIiwiTGl2ZURpc3BsYXkiLCJ1cGRhdGVTaG93aW5nIiwiU2Vla1RvTGl2ZSIsInVwZGF0ZUxpdmVFZGdlU3RhdHVzIiwibGl2ZVRyYWNrZXIiLCJ0ZXh0RWxfIiwiYXRMaXZlRWRnZSIsInNlZWtUb0xpdmVFZGdlIiwiU2xpZGVyIiwiYmFyIiwiYmFyTmFtZSIsInZlcnRpY2FsIiwicGxheWVyRXZlbnQiLCJoYW5kbGVNb3VzZU1vdmUiLCJoYW5kbGVNb3VzZVVwIiwicHJvZ3Jlc3MiLCJnZXRQZXJjZW50IiwicGVyY2VudGFnZSIsInRvRml4ZWQiLCJzaXplS2V5IiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJzdGVwQmFjayIsInN0ZXBGb3J3YXJkIiwiYm9vbCIsInZlcnRpY2FsXyIsIkxvYWRQcm9ncmVzc0JhciIsInBhcnRFbHNfIiwiaXNMaXZlIiwic2Vla2FibGVFbmQiLCJidWZmZXJlZEVuZCIsImNvbnRyb2xUZXh0UGVyY2VudGFnZSIsInBlcmNlbnRpZnkiLCJyb3VuZGVkIiwicGVyY2VudCIsInBhcnQiLCJUaW1lVG9vbHRpcCIsInNlZWtCYXJSZWN0Iiwic2Vla0JhclBvaW50IiwidG9vbHRpcFJlY3QiLCJwbGF5ZXJSZWN0Iiwic2Vla0JhclBvaW50UHgiLCJzcGFjZUxlZnRPZlBvaW50Iiwic3BhY2VSaWdodE9mUG9pbnQiLCJyaWdodCIsInB1bGxUb29sdGlwQnkiLCJ3cml0ZSIsInVwZGF0ZVRpbWUiLCJyYWZJZF8iLCJsaXZlV2luZG93Iiwic2Vjb25kc0JlaGluZCIsIlBsYXlQcm9ncmVzc0JhciIsInRpbWVUb29sdGlwIiwiTW91c2VUaW1lRGlzcGxheSIsIlNlZWtCYXIiLCJfU2xpZGVyIiwic2V0RXZlbnRIYW5kbGVyc18iLCJ1cGRhdGVJbnRlcnZhbCIsImVuYWJsZUludGVydmFsXyIsImRpc2FibGVJbnRlcnZhbF8iLCJ0b2dnbGVWaXNpYmlsaXR5XyIsInVwZGF0ZV8iLCJsaXZlQ3VycmVudFRpbWUiLCJvZmZzZXRQYXJlbnQiLCJnZXRDdXJyZW50VGltZV8iLCJzZWVrYWJsZVN0YXJ0IiwidmlkZW9XYXNQbGF5aW5nIiwibmV3VGltZSIsImRpc3RhbmNlIiwibW91c2VUaW1lRGlzcGxheSIsImhhbmRsZUFjdGlvbiIsImdvdG9GcmFjdGlvbiIsIlNURVBfU0VDT05EUyIsIlByb2dyZXNzQ29udHJvbCIsInRocm90dGxlZEhhbmRsZU1vdXNlU2VlayIsImhhbmRsZU1vdXNlU2VlayIsInNlZWtCYXIiLCJzZWVrQmFyRWwiLCJQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlIiwiaGFuZGxlUGljdHVyZUluUGljdHVyZUNoYW5nZSIsImlzSW5QaWN0dXJlSW5QaWN0dXJlIiwiZXhpdFBpY3R1cmVJblBpY3R1cmUiLCJGdWxsc2NyZWVuVG9nZ2xlIiwiaGFuZGxlRnVsbHNjcmVlbkNoYW5nZSIsImZzQXBpXyIsImZ1bGxzY3JlZW5FbmFibGVkIiwiaXNGdWxsc2NyZWVuIiwiZXhpdEZ1bGxzY3JlZW4iLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIlZvbHVtZUxldmVsIiwiVm9sdW1lQmFyIiwidXBkYXRlTGFzdFZvbHVtZV8iLCJ1cGRhdGVBUklBQXR0cmlidXRlcyIsImNoZWNrTXV0ZWQiLCJtdXRlZCIsImFyaWFWYWx1ZSIsInZvbHVtZUFzUGVyY2VudGFnZV8iLCJ2b2x1bWVCZWZvcmVEcmFnIiwibGFzdFZvbHVtZV8iLCJWb2x1bWVDb250cm9sIiwidm9sdW1lQmFyIiwiY2hlY2tWb2x1bWVTdXBwb3J0IiwidGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlIiwib3JpZW50YXRpb25DbGFzcyIsIk11dGVUb2dnbGUiLCJjaGVja011dGVTdXBwb3J0Iiwidm9sIiwibGFzdFZvbHVtZSIsInZvbHVtZVRvU2V0IiwidXBkYXRlSWNvbl8iLCJ1cGRhdGVDb250cm9sVGV4dF8iLCJWb2x1bWVQYW5lbCIsImlubGluZSIsInZvbHVtZUNvbnRyb2wiLCJ2b2x1bWVQYW5lbFN0YXRlXyIsIm11dGVUb2dnbGUiLCJoYW5kbGVWb2x1bWVDb250cm9sS2V5VXAiLCJzbGlkZXJBY3RpdmVfIiwic2xpZGVySW5hY3RpdmVfIiwiTWVudSIsIm1lbnVCdXR0b25fIiwibWVudUJ1dHRvbiIsImZvY3VzZWRDaGlsZF8iLCJib3VuZEhhbmRsZUJsdXJfIiwiaGFuZGxlQmx1ciIsImJvdW5kSGFuZGxlVGFwQ2xpY2tfIiwiaGFuZGxlVGFwQ2xpY2siLCJhZGRFdmVudExpc3RlbmVyRm9ySXRlbSIsInJlbW92ZUV2ZW50TGlzdGVuZXJGb3JJdGVtIiwiYWRkSXRlbSIsImNoaWxkQ29tcG9uZW50IiwiY29udGVudEVsVHlwZSIsImFwcGVuZCIsImJ0biIsImJ1dHRvblByZXNzZWRfIiwidW5wcmVzc0J1dHRvbiIsImNoaWxkQ29tcG9uZW50cyIsImZvdW5kQ29tcG9uZW50Iiwic3RlcENoaWxkIiwiaXRlbSIsIk1lbnVCdXR0b24iLCJidXR0b25DbGFzcyIsIm1lbnUiLCJoYW5kbGVNZW51S2V5VXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwiaGFuZGxlU3VibWVudUtleURvd24iLCJjcmVhdGVNZW51IiwiaXRlbXMiLCJoaWRlVGhyZXNob2xkXyIsInRpdGxlRWwiLCJ0aXRsZUNvbXBvbmVudCIsImNyZWF0ZUl0ZW1zIiwiYnVpbGRXcmFwcGVyQ1NTQ2xhc3MiLCJtZW51QnV0dG9uQ2xhc3MiLCJwcmVzc0J1dHRvbiIsImhhbmRsZVN1Ym1lbnVLZXlQcmVzcyIsIlRyYWNrQnV0dG9uIiwiX01lbnVCdXR0b24iLCJ1cGRhdGVIYW5kbGVyIiwiTWVudUtleXMiLCJNZW51SXRlbSIsInNlbGVjdGFibGUiLCJpc1NlbGVjdGVkXyIsIm11bHRpU2VsZWN0YWJsZSIsIl9zZWxlY3RlZCIsIlRleHRUcmFja01lbnVJdGVtIiwiX01lbnVJdGVtIiwia2luZHMiLCJjaGFuZ2VIYW5kbGVyIiwiaGFuZGxlVHJhY2tzQ2hhbmdlIiwic2VsZWN0ZWRMYW5ndWFnZUNoYW5nZUhhbmRsZXIiLCJoYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlIiwib25jaGFuZ2UiLCJpbml0RXZlbnQiLCJyZWZlcmVuY2VUcmFjayIsInNob3VsZEJlU2VsZWN0ZWQiLCJPZmZUZXh0VHJhY2tNZW51SXRlbSIsIl9UZXh0VHJhY2tNZW51SXRlbSIsImFsbEhpZGRlbiIsIlRleHRUcmFja0J1dHRvbiIsIl9UcmFja0J1dHRvbiIsIlRyYWNrTWVudUl0ZW0iLCJsYWJlbF8iLCJraW5kc18iLCJraW5kXyIsIkNoYXB0ZXJzVHJhY2tNZW51SXRlbSIsIkNoYXB0ZXJzQnV0dG9uIiwiX1RleHRUcmFja0J1dHRvbiIsInRyYWNrXyIsInNldFRyYWNrIiwiZmluZENoYXB0ZXJzVHJhY2siLCJ1cGRhdGVIYW5kbGVyXyIsInJlbW90ZVRleHRUcmFja0VsIiwiX3JlbW90ZVRleHRUcmFja0VsIiwiZ2V0TWVudUNhcHRpb24iLCJtaSIsIkRlc2NyaXB0aW9uc0J1dHRvbiIsIlN1YnRpdGxlc0J1dHRvbiIsIkNhcHRpb25TZXR0aW5nc01lbnVJdGVtIiwiQ2FwdGlvbnNCdXR0b24iLCJTdWJzQ2Fwc01lbnVJdGVtIiwiU3Vic0NhcHNCdXR0b24iLCJsYW5ndWFnZV8iLCJBdWRpb1RyYWNrTWVudUl0ZW0iLCJhdWRpb1RyYWNrcyIsIkF1ZGlvVHJhY2tCdXR0b24iLCJQbGF5YmFja1JhdGVNZW51SXRlbSIsInBsYXliYWNrUmF0ZSIsIlBsYXliYWNrUmF0ZU1lbnVCdXR0b24iLCJ1cGRhdGVWaXNpYmlsaXR5IiwidXBkYXRlTGFiZWwiLCJsYWJlbEVsXyIsInJhdGVzIiwicGxheWJhY2tSYXRlcyIsImN1cnJlbnRSYXRlIiwibmV3UmF0ZSIsInBsYXliYWNrUmF0ZVN1cHBvcnRlZCIsIlNwYWNlciIsIkN1c3RvbUNvbnRyb2xTcGFjZXIiLCJfU3BhY2VyIiwiQ29udHJvbEJhciIsIkVycm9yRGlzcGxheSIsIl9Nb2RhbERpYWxvZyIsIkNPTE9SX0JMQUNLIiwiQ09MT1JfQkxVRSIsIkNPTE9SX0NZQU4iLCJDT0xPUl9HUkVFTiIsIkNPTE9SX01BR0VOVEEiLCJDT0xPUl9SRUQiLCJDT0xPUl9XSElURSIsIkNPTE9SX1lFTExPVyIsIk9QQUNJVFlfT1BBUVVFIiwiT1BBQ0lUWV9TRU1JIiwiT1BBQ0lUWV9UUkFOUyIsInNlbGVjdENvbmZpZ3MiLCJwYXJzZU9wdGlvblZhbHVlIiwiVGV4dFRyYWNrU2V0dGluZ3MiLCJlbmREaWFsb2ciLCJzZXREZWZhdWx0cyIsInBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyIsInNhdmVTZXR0aW5ncyIsInJlc3RvcmVTZXR0aW5ncyIsImNyZWF0ZUVsU2VsZWN0XyIsImxlZ2VuZElkIiwic2VsZWN0TGFiZWxsZWRieUlkcyIsIm9wdGlvbklkIiwiY3JlYXRlRWxGZ0NvbG9yXyIsImNyZWF0ZUVsQmdDb2xvcl8iLCJjcmVhdGVFbFdpbkNvbG9yXyIsImNyZWF0ZUVsQ29sb3JzXyIsImNyZWF0ZUVsRm9udF8iLCJjcmVhdGVFbENvbnRyb2xzXyIsImRlZmF1bHRzRGVzY3JpcHRpb24iLCJpbml0aWFsIiwiYWNjdW0iLCJnZXRTZWxlY3RlZE9wdGlvblZhbHVlIiwic2VsZWN0ZWRJbmRleCIsInNldFZhbHVlcyIsInNldFNlbGVjdGVkT3B0aW9uIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwidHREaXNwbGF5IiwiY29udHJvbEJhciIsInN1YnNDYXBzQnRuIiwic3Vic0NhcHNCdXR0b24iLCJjY0J0biIsImNhcHRpb25zQnV0dG9uIiwiUmVzaXplTWFuYWdlciIsIlJFU0laRV9PQlNFUlZFUl9BVkFJTEFCTEUiLCJSZXNpemVPYnNlcnZlciIsImxvYWRMaXN0ZW5lcl8iLCJyZXNpemVPYnNlcnZlcl8iLCJkZWJvdW5jZWRIYW5kbGVyXyIsImRlYm91bmNlIiwiaW1tZWRpYXRlIiwiZGVib3VuY2VkIiwiX2xhdGVyIiwibGF0ZXIiLCJjYW5jZWwiLCJyZXNpemVIYW5kbGVyIiwib2JzZXJ2ZSIsImNvbnRlbnRXaW5kb3ciLCJ1bmxvYWRMaXN0ZW5lcl8iLCJ1bm9ic2VydmUiLCJkaXNjb25uZWN0IiwicmVzaXplT2JzZXJ2ZXIiLCJMaXZlVHJhY2tlciIsInJlc2V0XyIsImhhbmRsZUR1cmF0aW9uY2hhbmdlIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInN0b3BUcmFja2luZyIsInN0YXJ0VHJhY2tpbmciLCJpc0JlaGluZF8iLCJ0aW1ldXBkYXRlU2Vlbl8iLCJsaXZlRWRnZVdpbmRvdyIsInNlZWthYmxlSW5jcmVtZW50XyIsInRyYWNrTGl2ZV8iLCJwYXN0U2Vla0VuZF8iLCJuZXdTZWVrRW5kIiwibGFzdFNlZWtFbmRfIiwic2Vla2FibGVJbmNyZW1lbnRMaXN0XyIsIm1lZGlhbiIsImFyciIsIm1pZCIsInNvcnRlZExpc3QiLCJwYXN0U2Vla0VuZCIsImJlaGluZExpdmVFZGdlIiwiYmVoaW5kTGl2ZUVkZ2VfIiwiaXNUcmFja2luZyIsImhhc1N0YXJ0ZWQiLCJ0cmFja2luZ0ludGVydmFsXyIsImhhbmRsZVRpbWV1cGRhdGUiLCJzZWVrYWJsZUVuZHMiLCJzZWVrYWJsZVN0YXJ0cyIsInNvdXJjZXNldExvYWQiLCJzcmNVcmxzIiwiaW5uZXJIVE1MRGVzY3JpcHRvclBvbHlmaWxsIiwiY2xvbmVOb2RlIiwiZHVtbXkiLCJkb2NGcmFnIiwiZ2V0RGVzY3JpcHRvciIsInByaW9yaXR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZmlyc3RTb3VyY2VXYXRjaCIsInJlc2V0U291cmNlV2F0Y2hfIiwiaW5uZXJEZXNjcmlwdG9yIiwiZ2V0SW5uZXJIVE1MRGVzY3JpcHRvciIsImFwcGVuZFdyYXBwZXIiLCJhcHBlbmRGbiIsInJldHZhbCIsInNyY0Rlc2NyaXB0b3JQb2x5ZmlsbCIsInNldHVwU291cmNlc2V0IiwicmVzZXRTb3VyY2VzZXRfIiwic3JjRGVzY3JpcHRvciIsImdldFNyY0Rlc2NyaXB0b3IiLCJvbGRTZXRBdHRyaWJ1dGUiLCJvbGRMb2FkIiwiY3VycmVudFNyYyIsIkh0bWw1IiwiY3Jvc3NvcmlnaW5UcmFja3MiLCJpbml0TmV0d29ya1N0YXRlXyIsImhhbmRsZUxhdGVJbml0XyIsImVuYWJsZVNvdXJjZXNldCIsInNldHVwU291cmNlc2V0SGFuZGxpbmdfIiwiaGFzQ2hpbGROb2RlcyIsIm5vZGVzIiwibm9kZXNMZW5ndGgiLCJyZW1vdmVOb2RlcyIsInByb3h5TmF0aXZlVHJhY2tzXyIsInJlc3RvcmVNZXRhZGF0YVRyYWNrc0luSU9TTmF0aXZlUGxheWVyXyIsInNldENvbnRyb2xzIiwicHJveHlXZWJraXRGdWxsc2NyZWVuXyIsImRpc3Bvc2VNZWRpYUVsZW1lbnQiLCJtZXRhZGF0YVRyYWNrc1ByZUZ1bGxzY3JlZW5TdGF0ZSIsInRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QiLCJzdG9yZWRNb2RlIiwicmVzdG9yZVRyYWNrTW9kZSIsInN0b3JlZFRyYWNrIiwib3ZlcnJpZGVOYXRpdmVfIiwib3ZlcnJpZGUiLCJsb3dlckNhc2VUeXBlIiwiZXZlbnROYW1lIiwicHJveHlOYXRpdmVUcmFja3NGb3JUeXBlXyIsImVsVHJhY2tzIiwidGVjaFRyYWNrcyIsImN1cnJlbnRUYXJnZXQiLCJyZW1vdmVPbGRUcmFja3MiLCJyZW1vdmVUcmFja3MiLCJmb3VuZCIsInBsYXllckVsSW5nZXN0IiwibW92aW5nTWVkaWFFbGVtZW50SW5ET00iLCJjbG9uZSIsInRlY2hJZCIsInBsYXllcklkIiwicHJlbG9hZCIsInNldHRpbmdzQXR0cnMiLCJuZXR3b3JrU3RhdGUiLCJsb2Fkc3RhcnRGaXJlZCIsInNldExvYWRzdGFydEZpcmVkIiwidHJpZ2dlckxvYWRzdGFydCIsImV2ZW50c1RvVHJpZ2dlciIsImNoZWNrUHJvZ3Jlc3MiLCJOYU4iLCJlbmRGbiIsImJlZ2luRm4iLCJ3ZWJraXRQcmVzZW50YXRpb25Nb2RlIiwic3VwcG9ydHNGdWxsU2NyZWVuIiwid2Via2l0RW50ZXJGdWxsU2NyZWVuIiwiZW50ZXJGdWxsU2NyZWVuIiwiSEFWRV9NRVRBREFUQSIsImV4aXRGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxTY3JlZW4iLCJyZXNldE1lZGlhRWxlbWVudCIsInZpZGVvUGxheWJhY2tRdWFsaXR5Iiwid2Via2l0RHJvcHBlZEZyYW1lQ291bnQiLCJ3ZWJraXREZWNvZGVkRnJhbWVDb3VudCIsImRyb3BwZWRWaWRlb0ZyYW1lcyIsInRvdGFsVmlkZW9GcmFtZXMiLCJ0aW1pbmciLCJuYXZpZ2F0aW9uU3RhcnQiLCJURVNUX1ZJRCIsImNhbkNvbnRyb2xWb2x1bWUiLCJjYW5NdXRlVm9sdW1lIiwiY2FuQ29udHJvbFBsYXliYWNrUmF0ZSIsImNhbk92ZXJyaWRlQXR0cmlidXRlcyIsInN1cHBvcnRzTmF0aXZlVGV4dFRyYWNrcyIsInN1cHBvcnRzTmF0aXZlVmlkZW9UcmFja3MiLCJ2aWRlb1RyYWNrcyIsInN1cHBvcnRzTmF0aXZlQXVkaW9UcmFja3MiLCJmZWF0dXJlc05hdGl2ZVZpZGVvVHJhY2tzIiwiZmVhdHVyZXNOYXRpdmVBdWRpb1RyYWNrcyIsIm1wZWd1cmxSRSIsInBhdGNoQ2FuUGxheVR5cGUiLCJ1bnBhdGNoQ2FuUGxheVR5cGUiLCJURUNIX0VWRU5UU19SRVRSSUdHRVIiLCJURUNIX0VWRU5UU19RVUVVRSIsImNhbnBsYXkiLCJjYW5wbGF5dGhyb3VnaCIsInBsYXlpbmciLCJzZWVrZWQiLCJCUkVBS1BPSU5UX09SREVSIiwiQlJFQUtQT0lOVF9DTEFTU0VTIiwiY2hhckF0IiwiREVGQVVMVF9CUkVBS1BPSU5UUyIsInRpbnkiLCJ4c21hbGwiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwieGxhcmdlIiwiaHVnZSIsImdldFRhZ1NldHRpbmdzIiwiY2xvc2VzdCIsImJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyIsImRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8iLCJib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8iLCJmdWxsV2luZG93T25Fc2NLZXkiLCJpc1Bvc3RlckZyb21UZWNoXyIsInF1ZXVlZENhbGxiYWNrc18iLCJ1c2VyQWN0aXZlXyIsInRhZ0F0dHJpYnV0ZXMiLCJsYW5ndWFnZXNUb0xvd2VyIiwibGFuZ3VhZ2VzXyIsInJlc2V0Q2FjaGVfIiwicG9zdGVyXyIsImNvbnRyb2xzXyIsImNoYW5naW5nU3JjXyIsInBsYXlDYWxsYmFja3NfIiwicGxheVRlcm1pbmF0ZWRRdWV1ZV8iLCJhdXRvcGxheSIsInBsdWdpbnMiLCJzY3J1YmJpbmdfIiwiZmx1aWRfIiwidXBkYXRlU3R5bGVFbF8iLCJwbGF5ZXJPcHRpb25zQ29weSIsIm1pZGRsZXdhcmVfIiwiZmxleE5vdFN1cHBvcnRlZF8iLCJtYWpvclZlcnNpb24iLCJ1c2VyQWN0aXZlIiwibGlzdGVuRm9yVXNlckFjdGl2aXR5XyIsImhhbmRsZVN0YWdlQ2xpY2tfIiwiYnJlYWtwb2ludHMiLCJyZXNwb25zaXZlIiwiZnVsbHNjcmVlbmNoYW5nZSIsInN0eWxlRWxfIiwicGxheWVyRWxJbmdlc3RfIiwiY2xlYXJDYWNoZUZvclBsYXllciIsImRpdkVtYmVkIiwidGFiaW5kZXgiLCJkZWZhdWx0c1N0eWxlRWwiLCJoZWFkIiwiZmlsbF8iLCJmbHVpZCIsImFzcGVjdFJhdGlvIiwibGlua3MiLCJsaW5rRWwiLCJfZGltZW5zaW9uIiwicHJpdkRpbWVuc2lvbiIsInBhcnNlZFZhbCIsImFkZEV2ZW50ZWRDYWxsYmFjayIsInJhdGlvIiwiYXNwZWN0UmF0aW9fIiwiaWRDbGFzcyIsInJhdGlvUGFydHMiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJyYXRpb011bHRpcGxpZXIiLCJ3aWR0aF8iLCJoZWlnaHRfIiwiX3dpZHRoIiwiX2hlaWdodCIsInRlY2hFbCIsInVubG9hZFRlY2hfIiwidGl0bGVUZWNoTmFtZSIsImNhbWVsVGVjaE5hbWUiLCJ0ZWNoTmFtZV8iLCJ0ZWNoT3B0aW9ucyIsImxvb3AiLCJ0ZWNoQ2FuT3ZlcnJpZGVQb3N0ZXIiLCJUZWNoQ2xhc3MiLCJoYW5kbGVUZWNoUmVhZHlfIiwidGV4dFRyYWNrc0pzb25fIiwiZXZlbnRPYmoiLCJzZWVraW5nIiwiaGFuZGxlVGVjaExvYWRTdGFydF8iLCJoYW5kbGVUZWNoU291cmNlc2V0XyIsImhhbmRsZVRlY2hXYWl0aW5nXyIsImhhbmRsZVRlY2hFbmRlZF8iLCJoYW5kbGVUZWNoU2Vla2luZ18iLCJoYW5kbGVUZWNoUGxheV8iLCJoYW5kbGVUZWNoRmlyc3RQbGF5XyIsImhhbmRsZVRlY2hQYXVzZV8iLCJoYW5kbGVUZWNoRHVyYXRpb25DaGFuZ2VfIiwiaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfIiwiaGFuZGxlVGVjaEVudGVyUGljdHVyZUluUGljdHVyZV8iLCJoYW5kbGVUZWNoTGVhdmVQaWN0dXJlSW5QaWN0dXJlXyIsImhhbmRsZVRlY2hFcnJvcl8iLCJoYW5kbGVUZWNoUG9zdGVyQ2hhbmdlXyIsImhhbmRsZVRlY2hUZXh0RGF0YV8iLCJoYW5kbGVUZWNoUmF0ZUNoYW5nZV8iLCJ1c2luZ05hdGl2ZUNvbnRyb2xzIiwidGVjaEdldF8iLCJhZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfIiwic2FmZXR5IiwicmVtb3ZlVGVjaENvbnRyb2xzTGlzdGVuZXJzXyIsImhhbmRsZVRlY2hDbGlja18iLCJoYW5kbGVUZWNoRG91YmxlQ2xpY2tfIiwiaGFuZGxlVGVjaFRvdWNoU3RhcnRfIiwiaGFuZGxlVGVjaFRvdWNoTW92ZV8iLCJoYW5kbGVUZWNoVG91Y2hFbmRfIiwiaGFuZGxlVGVjaFRhcF8iLCJ0ZWNoQ2FsbF8iLCJtYW51YWxBdXRvcGxheV8iLCJwcm9taXNlIiwicHJldmlvdXNseU11dGVkIiwicmVzdG9yZU11dGVkIiwibXV0ZWRQcm9taXNlIiwidXBkYXRlU291cmNlQ2FjaGVzXyIsImZpbmRNaW1ldHlwZSIsIm1hdGNoaW5nU291cmNlcyIsInNvdXJjZUVsU291cmNlcyIsInNvdXJjZUVscyIsIm1hdGNoaW5nU291cmNlRWxzIiwic291cmNlT2JqIiwidXBkYXRlU291cmNlQ2FjaGVzIiwicGxheWVyU3JjIiwiY3VycmVudFNvdXJjZSIsImV2ZW50U3JjIiwibGFzdFNvdXJjZV8iLCJ0ZWNoU3JjIiwidGVjaEdldCIsInJlcXVlc3QiLCJsYXN0UGxheWJhY2tSYXRlIiwicXVldWVkIiwidGltZVdoZW5XYWl0aW5nIiwidGltZVVwZGF0ZUxpc3RlbmVyIiwiaGFuZGxlVGVjaENhblBsYXlfIiwiaGFuZGxlVGVjaENhblBsYXlUaHJvdWdoXyIsImhhbmRsZVRlY2hQbGF5aW5nXyIsImhhbmRsZVRlY2hTZWVrZWRfIiwic3RhcnR0aW1lIiwidXNlckFjdGlvbnMiLCJkb3VibGVDbGljayIsInVzZXJXYXNBY3RpdmUiLCJ0b2dnbGVGdWxsc2NyZWVuQ2xhc3NfIiwiaXNGcyIsImZ1bGxzY3JlZW5FbGVtZW50IiwibWF0Y2hlcyIsImZ1bGxzY3JlZW4iLCJtc01hdGNoZXNTZWxlY3RvciIsInRvZ2dsZVBpY3R1cmVJblBpY3R1cmVDbGFzc18iLCJpbmFjdGl2aXR5VGltZW91dCIsImRlZmF1bHRQbGF5YmFja1JhdGUiLCJyZWR1Y2VSaWdodCIsIl90aGlzOCIsInJlc29sdmUiLCJwbGF5XyIsIl90aGlzOSIsImlzU3JjUmVhZHkiLCJ3YWl0VG9QbGF5XyIsInJ1blBsYXlUZXJtaW5hdGVkUXVldWVfIiwicnVuUGxheUNhbGxiYWNrc18iLCJxdWV1ZSIsInEiLCJpc1NjcnViYmluZyIsImxpdmV1aSIsInBlcmNlbnRBc0RlY2ltYWwiLCJfbXV0ZWQiLCJkZWZhdWx0TXV0ZWQiLCJfZGVmYXVsdE11dGVkIiwiaXNGUyIsImlzRnVsbHNjcmVlbl8iLCJmdWxsc2NyZWVuT3B0aW9ucyIsImZzT3B0aW9ucyIsImVudGVyRnVsbFdpbmRvdyIsImV4aXRGdWxsV2luZG93IiwiaXNGdWxsV2luZG93IiwiZG9jT3JpZ092ZXJmbG93Iiwib3ZlcmZsb3ciLCJpc1BpUCIsImlzSW5QaWN0dXJlSW5QaWN0dXJlXyIsImhvdGtleXMiLCJleGNsdWRlRWxlbWVudCIsImlzQ29udGVudEVkaXRhYmxlIiwiYWN0aXZlRWxlbWVudCIsImhhbmRsZUhvdGtleXMiLCJfaG90a2V5cyRmdWxsc2NyZWVuS2UiLCJmdWxsc2NyZWVuS2V5Iiwia2V5ZG93bkV2ZW50IiwiX2hvdGtleXMkbXV0ZUtleSIsIm11dGVLZXkiLCJfaG90a2V5cyRwbGF5UGF1c2VLZXkiLCJwbGF5UGF1c2VLZXkiLCJGU1RvZ2dsZSIsInNlbGVjdFNvdXJjZSIsIl90aGlzMTAiLCJ0ZWNocyIsImZpbmRGaXJzdFBhc3NpbmdUZWNoU291cmNlUGFpciIsIm91dGVyQXJyYXkiLCJpbm5lckFycmF5IiwidGVzdGVyIiwib3V0ZXJDaG9pY2UiLCJpbm5lckNob2ljZSIsImZpbmRlciIsInNvdXJjZU9yZGVyIiwiZmxpcCIsIl90aGlzMTEiLCJtaWRkbGV3YXJlU291cmNlIiwic3JjXyIsIm5vdFN1cHBvcnRlZE1lc3NhZ2UiLCJzZXRUZWNoIiwiX3RoaXMxMiIsInNvdXJjZVRlY2giLCJ0aXRsZUNhc2VFcXVhbHMiLCJzdHIxIiwic3RyMiIsIl90aGlzMTMiLCJkb1Jlc2V0XyIsInJlc2V0Q29udHJvbEJhclVJXyIsInJlc2V0UHJvZ3Jlc3NCYXJfIiwicmVzZXRQbGF5YmFja1JhdGVfIiwicmVzZXRWb2x1bWVCYXJfIiwiX3RoaXMkY29udHJvbEJhciIsImR1cmF0aW9uRGlzcGxheSIsImN1cnJlbnRTb3VyY2VzIiwiY3VycmVudFR5cGUiLCJ0ZWNoQXV0b3BsYXkiLCJuZXdQb3N0ZXIiLCJ1c2luZ05hdGl2ZUNvbnRyb2xzXyIsInN1cHByZXNzTm90U3VwcG9ydGVkRXJyb3IiLCJ0cmlnZ2VyU3VwcHJlc3NlZEVycm9yIiwiZXJyb3JEaXNwbGF5IiwidXNlckFjdGl2aXR5XyIsIm1vdXNlSW5Qcm9ncmVzcyIsImxhc3RNb3ZlWCIsImxhc3RNb3ZlWSIsImhhbmRsZUFjdGl2aXR5Iiwic2NyZWVuWCIsInNjcmVlblkiLCJpc0F1ZGlvXyIsInRvSlNPTiIsImNyZWF0ZU1vZGFsIiwiX3RoaXMxNCIsIm1vZGFsIiwidXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfIiwiY3VycmVudEJyZWFrcG9pbnQiLCJjYW5kaWRhdGVCcmVha3BvaW50IiwiYnJlYWtwb2ludHNfIiwiYnJlYWtwb2ludF8iLCJyZW1vdmVDdXJyZW50QnJlYWtwb2ludF8iLCJjdXJyZW50QnJlYWtwb2ludENsYXNzIiwiX2JyZWFrcG9pbnRzIiwicmVzcG9uc2l2ZV8iLCJsb2FkTWVkaWEiLCJfdGhpczE1IiwiX3RoaXMkY2FjaGVfJG1lZGlhIiwiYXJ0d29yayIsInR0IiwiZ2V0TWVkaWEiLCJiYXNlT3B0aW9ucyIsInRhZ09wdGlvbnMiLCJkYXRhU2V0dXAiLCJfc2FmZVBhcnNlVHVwbGUiLCJjaGlsZE5hbWUiLCJodG1sNSIsImZsYXNoIiwidXNlckxhbmd1YWdlIiwibmF2aWdhdGlvblVJIiwicGx1Z2luU3RvcmFnZSIsInBsdWdpbkV4aXN0cyIsImdldFBsdWdpbiIsIm1hcmtQbHVnaW5Bc0FjdGl2ZSIsInRyaWdnZXJTZXR1cEV2ZW50IiwiYmVmb3JlIiwiY3JlYXRlUGx1Z2luRmFjdG9yeSIsIlBsdWdpblN1YkNsYXNzIiwicGx1Z2luIiwiZ2V0RXZlbnRIYXNoIiwiUGx1Z2luIiwiVkVSU0lPTiIsImlzQmFzaWMiLCJyZWdpc3RlclBsdWdpbiIsImNyZWF0ZUJhc2ljUGx1Z2luIiwiYmFzaWNQbHVnaW5XcmFwcGVyIiwiZGVyZWdpc3RlclBsdWdpbiIsImdldFBsdWdpbnMiLCJnZXRQbHVnaW5WZXJzaW9uIiwiQkFTRV9QTFVHSU5fTkFNRSIsInVzaW5nUGx1Z2luIiwiaGFzUGx1Z2luIiwibm9ybWFsaXplSWQiLCJ2aWRlb2pzJDEiLCJnZXRQbGF5ZXIiLCJkZWZhdWx0VmlldyIsImhvb2tzIiwiaG9va0Z1bmN0aW9uIiwiUGxheWVyQ29tcG9uZW50IiwiaG9va3NfIiwiaG9vayIsImhvb2tPbmNlIiwib3JpZ2luYWwiLCJyZW1vdmVIb29rIiwiZ2V0UGxheWVycyIsIm5JZCIsIl90YWciLCJfcGxheWVyIiwiZ2V0QWxsUGxheWVycyIsImNvbXAiLCJ1c2UiLCJ3cml0ZWFibGUiLCJleHRlbmQiLCJzdWJDbGFzc01ldGhvZHMiLCJtZXRob2RzIiwiX2luaGVyaXRzIiwic3VwZXJfIiwiYWRkTGFuZ3VhZ2UiLCJfbWVyZ2VPcHRpb25zIiwiY3JlYXRlVGltZVJhbmdlIiwic2V0Rm9ybWF0VGltZSIsImN1c3RvbUltcGxlbWVudGF0aW9uIiwicmVzZXRGb3JtYXRUaW1lIiwieGhyIiwiZG9tIiwicmVzb2x2ZU1hbmlmZXN0UmVkaXJlY3QiLCJoYW5kbGVNYW5pZmVzdFJlZGlyZWN0IiwicmVxIiwicmVzcG9uc2VVUkwiLCJnZXQkMSIsInByb3BlcnR5IiwicmVjZWl2ZXIiLCJnZXRQcm90b3R5cGVPZiIsImdldHRlciIsInNsaWNlZFRvQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNsaWNlSXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJtZXJnZU9wdGlvbnMkMSIsIkV2ZW50VGFyZ2V0JDEiLCJsb2ckMSIsImZvckVhY2hNZWRpYUdyb3VwIiwibWVkaWFUeXBlIiwiZ3JvdXBLZXkiLCJsYWJlbEtleSIsIm1lZGlhUHJvcGVydGllcyIsInVwZGF0ZU1hc3RlciIsIm1lcmdlZFBsYXlsaXN0IiwidXBkYXRlU2VnbWVudHMiLCJyZXNvbHZlU2VnbWVudFVyaXMiLCJiYXNlVXJpIiwic2V0dXBNZWRpYVBsYXlsaXN0cyIsInJlc29sdmVNZWRpYUdyb3VwVXJpcyIsInJlZnJlc2hEZWxheSIsImxhc3RTZWdtZW50IiwiUGxheWxpc3RMb2FkZXIiLCJzcmNVcmwiLCJobHMiLCJfb3B0aW9ucyR3aXRoQ3JlZGVudGkiLCJ3aXRoQ3JlZGVudGlhbHMiLCJfb3B0aW9ucyRoYW5kbGVNYW5pZmUiLCJoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyIsImhsc18iLCJobHNPcHRpb25zIiwiY3VzdG9tVGFnUGFyc2VycyIsImN1c3RvbVRhZ01hcHBlcnMiLCJwbGF5bGlzdFJlcXVlc3RFcnJvciIsImhhdmVNZXRhZGF0YSIsInN0YXJ0aW5nU3RhdGUiLCJyZXNwb25zZVRleHQiLCJjdXN0b21QYXJzZXIiLCJtZWRpYV8iLCJtZWRpYVVwZGF0ZVRpbWVvdXQiLCJzdG9wUmVxdWVzdCIsImZpbmFsUmVuZGl0aW9uVGltZW91dCIsIm9sZFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJhYm9ydCIsImlzRmluYWxSZW5kaXRpb24iLCJtZWRpYUNoYW5nZSIsInN0YXJ0ZWQiLCJpbnRlcnZhbER1cmF0aW9uIiwiZW5kU2VxdWVuY2UiLCJleHBpcmVkIiwiYmFja3dhcmQiLCJmb3J3YXJkIiwiYmFja3dhcmREdXJhdGlvbiIsImZvcndhcmREdXJhdGlvbiIsInN1bUR1cmF0aW9ucyIsImR1cmF0aW9ucyIsInNhZmVMaXZlSW5kZXgiLCJkaXN0YW5jZUZyb21FbmQiLCJzYWZlRGlzdGFuY2UiLCJwbGF5bGlzdEVuZCIsInVzZVNhZmVMaXZlRW5kIiwiaXNXaG9sZU51bWJlciIsInJvdW5kU2lnbmlmaWNhbnREaWdpdCIsImluY3JlbWVudCIsIm51bURlY2ltYWxEaWdpdHMiLCJjZWlsTGVhc3RTaWduaWZpY2FudERpZ2l0IiwiZmxvb3JMZWFzdFNpZ25pZmljYW50RGlnaXQiLCJpc0JsYWNrbGlzdGVkIiwiZXhjbHVkZVVudGlsIiwiaXNJbmNvbXBhdGlibGUiLCJpc0VuYWJsZWQiLCJibGFja2xpc3RlZCIsImlzTG93ZXN0RW5hYmxlZFJlbmRpdGlvbiIsImN1cnJlbnRCYW5kd2lkdGgiLCJNQVhfVkFMVUUiLCJQbGF5bGlzdCIsImdldE1lZGlhSW5mb0ZvclRpbWUiLCJudW1TZWdtZW50cyIsIm1lZGlhSW5kZXgiLCJpc0Rpc2FibGVkIiwiaXNBZXMiLCJpc0ZtcDQiLCJlc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZSIsInNlZ21lbnREdXJhdGlvbiIsImJ5dGVzUmVjZWl2ZWQiLCJ2aWRlb2pzWEhSIiwibWVyZ2VPcHRpb25zJDEkMSIsInhockZhY3RvcnkiLCJYaHJGdW5jdGlvbiIsImJlZm9yZVJlcXVlc3QiLCJIbHMiLCJuZXdPcHRpb25zIiwicmVxUmVzcG9uc2UiLCJyZXNwb25zZVRpbWUiLCJyb3VuZFRyaXBUaW1lIiwicmVxdWVzdFRpbWUiLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lZG91dCIsImFib3J0ZWQiLCJzdGF0dXNDb2RlIiwib3JpZ2luYWxBYm9ydCIsInNlZ21lbnRYaHJIZWFkZXJzIiwiUmFuZ2UiLCJieXRlcmFuZ2VTdHIiLCJieXRlcmFuZ2VFbmQiLCJ0ZXh0UmFuZ2UiLCJmb3JtYXRIZXhTdHJpbmciLCJmb3JtYXRBc2NpaVN0cmluZyIsImNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2UiLCJ0cmFuc2ZlcmFibGUiLCJpc1ZpZXciLCJpbml0U2VnbWVudElkIiwic2VnbWVudEtleUlkIiwiaGV4RHVtcCIsInV0aWxzIiwidGFnRHVtcCIsInRleHRSYW5nZXMiLCJnZXRQcm9ncmFtVGltZSIsIl9yZWYkdGltZSIsIm1hdGNoZWRTZWdtZW50IiwiZmluZFNlZ21lbnRGb3JQbGF5ZXJUaW1lIiwic2VnbWVudEVuZCIsInZpZGVvVGltaW5nSW5mbyIsInRyYW5zbXV4ZWRQcmVzZW50YXRpb25FbmQiLCJlc3RpbWF0ZWRTdGFydCIsInRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydCIsInNlZWtUaW1lIiwicHJvZ3JhbVRpbWVPYmplY3QiLCJtZWRpYVNlY29uZHMiLCJwcm9ncmFtVGltZSIsInBsYXllclRpbWVUb1Byb2dyYW1UaW1lIiwicGxheWVyVGltZSIsInRyYW5zbXV4ZXJQcmVwZW5kZWRTZWNvbmRzIiwib2Zmc2V0RnJvbVNlZ21lbnRTdGFydCIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsInNlZWtUb1Byb2dyYW1UaW1lIiwiX3JlZjIkcmV0cnlDb3VudCIsInJldHJ5Q291bnQiLCJzZWVrVG8iLCJfcmVmMiRwYXVzZUFmdGVyU2VlayIsInBhdXNlQWZ0ZXJTZWVrIiwidmVyaWZ5UHJvZ3JhbURhdGVUaW1lVGFncyIsImZpbmRTZWdtZW50Rm9yUHJvZ3JhbVRpbWUiLCJsYXN0U2VnbWVudFN0YXJ0IiwibGFzdFNlZ21lbnREdXJhdGlvbiIsIm9yaWdpbmFsU2VnbWVudFZpZGVvRHVyYXRpb24iLCJtZWRpYU9mZnNldCIsImdldE9mZnNldEZyb21UaW1lc3RhbXAiLCJjb21wYXJpc29uVGltZVN0YW1wIiwic2VnbWVudERhdGVUaW1lIiwic2VnbWVudFRpbWVFcG9jaCIsInNlZWtUb1RpbWUiLCJzZWVrZWRDYWxsYmFjayIsImZpbHRlclJhbmdlcyIsInRpbWVSYW5nZXMiLCJmaW5kUmFuZ2UiLCJUSU1FX0ZVREdFX0ZBQ1RPUiIsImZpbmROZXh0UmFuZ2UiLCJwcmludGFibGVSYW5nZSIsInN0ckFyciIsInRpbWVSYW5nZXNUb0FycmF5IiwidGltZVJhbmdlc0xpc3QiLCJyZW1vdmVDdWVzRnJvbVRyYWNrIiwiZHVyYXRpb25PZlZpZGVvIiwiYWRkVGV4dFRyYWNrRGF0YSIsInNvdXJjZUhhbmRsZXIiLCJjYXB0aW9uQXJyYXkiLCJtZXRhZGF0YUFycmF5IiwiQ3VlIiwiY2FwdGlvbiIsImluYmFuZFRleHRUcmFja3NfIiwidGltZXN0YW1wT2Zmc2V0IiwidmlkZW9EdXJhdGlvbiIsIm1lZGlhU291cmNlXyIsImN1ZVRpbWUiLCJmcmFtZXMiLCJkZXByZWNhdGVPbGRDdWUiLCJwcml2YXRlRGF0YSIsIm1ldGFkYXRhVHJhY2tfIiwiY3Vlc0FycmF5IiwiY3Vlc0dyb3VwZWRCeVN0YXJ0VGltZSIsInRpbWVTbG90Iiwic29ydGVkU3RhcnRUaW1lcyIsImN1ZUdyb3VwIiwibmV4dFRpbWUiLCJUQVJHRVQiLCJTQ1JJUFRfVFlQRSIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJVUkwiLCJ3ZWJraXRVUkwiLCJtc1VSTCIsIldvcmtlciIsInNoaW1Xb3JrZXIiLCJmaWxlbmFtZSIsIlNoaW1Xb3JrZXIiLCJmb3JjZUZhbGxiYWNrIiwib2JqVVJMIiwiY3JlYXRlU291cmNlT2JqZWN0Iiwid3JhcFRlcm1pbmF0ZSIsIndvcmtlciIsInRlcm0iLCJ0ZXJtaW5hdGUiLCJyZXZva2VPYmplY3RVUkwiLCJzZWxmU2hpbSIsInBvc3RNZXNzYWdlIiwib25tZXNzYWdlIiwiaXNUaGlzVGhyZWFkIiwidGVzdFdvcmtlciIsInRlc3RBcnJheSIsImNyZWF0ZU9iamVjdFVSTCIsIkJsb2IiLCJibG9iIiwiZ2V0QmxvYiIsIlRyYW5zbXV4V29ya2VyIiwiZG9jdW1lbnQkJDEiLCJNQUpPUl9CUkFORCIsIk1JTk9SX1ZFUlNJT04iLCJBVkMxX0JSQU5EIiwiVklERU9fSERMUiIsIkFVRElPX0hETFIiLCJIRExSX1RZUEVTIiwiVk1IRCIsIlNNSEQiLCJEUkVGIiwiU1RDTyIsIlNUU0MiLCJTVFNaIiwiU1RUUyIsInZpZGVvU2FtcGxlIiwiYXVkaW9TYW1wbGUiLCJhdWRpb1RydW4iLCJ2aWRlb1RydW4iLCJ0cnVuSGVhZGVyIiwiVUlOVDMyX01BWCIsInBhc3AiLCJzZXRVaW50MzIiLCJhdWRpb29iamVjdHR5cGUiLCJzYW1wbGluZ2ZyZXF1ZW5jeWluZGV4IiwidHJhY2tGcmFnbWVudHMiLCJhdmMxQm94Iiwic2VxdWVuY2VQYXJhbWV0ZXJTZXRzIiwicGljdHVyZVBhcmFtZXRlclNldHMiLCJwcm9maWxlSWRjIiwibGV2ZWxJZGMiLCJzYXJSYXRpbyIsImhTcGFjaW5nIiwidlNwYWNpbmciLCJ0cmFja0ZyYWdtZW50SGVhZGVyIiwidHJhY2tGcmFnbWVudERlY29kZVRpbWUiLCJ0cmFja0ZyYWdtZW50UnVuIiwic2FtcGxlRGVwZW5kZW5jeVRhYmxlIiwidXBwZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSIsImxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUiLCJkdXJhdGlvblByZXNlbnQiLCJzaXplUHJlc2VudCIsImZsYWdzUHJlc2VudCIsIm1wNEdlbmVyYXRvciIsImZpbGVUeXBlIiwibW92aWUiLCJzYW1wbGVGb3JGcmFtZSIsImtleUZyYW1lIiwiZnJhbWVVdGlscyIsImdyb3VwTmFsc0ludG9GcmFtZXMiLCJuYWxVbml0cyIsImN1cnJlbnROYWwiLCJuYWxDb3VudCIsImdyb3VwRnJhbWVzSW50b0dvcHMiLCJjdXJyZW50R29wIiwiZ29wcyIsImV4dGVuZEZpcnN0S2V5RnJhbWUiLCJnZW5lcmF0ZVNhbXBsZVRhYmxlIiwiY29uY2F0ZW5hdGVOYWxEYXRhIiwibmFsc0J5dGVMZW5ndGgiLCJudW1iZXJPZk5hbHMiLCJoaWdoUHJlZml4IiwibG93UHJlZml4IiwiemVyb0ZpbGwiLCJzaWxlbmNlIiwibWFrZVRhYmxlIiwibWV0YVRhYmxlIiwiY2xvY2siLCJhdWRpb0ZyYW1lVXRpbHMiLCJwcmVmaXhXaXRoU2lsZW5jZSIsImF1ZGlvQXBwZW5kU3RhcnRUcyIsInZpZGVvQmFzZU1lZGlhRGVjb2RlVGltZSIsImJhc2VNZWRpYURlY29kZVRpbWVUcyIsImZyYW1lRHVyYXRpb24iLCJzaWxlbnRGcmFtZSIsImZpcnN0RnJhbWUiLCJhdWRpb0dhcER1cmF0aW9uIiwiYXVkaW9GaWxsRnJhbWVDb3VudCIsImF1ZGlvRmlsbER1cmF0aW9uIiwidHJpbUFkdHNGcmFtZXNCeUVhcmxpZXN0RHRzIiwiYWR0c0ZyYW1lcyIsImVhcmxpZXN0QWxsb3dlZER0cyIsIm1pblNlZ21lbnREdHMiLCJtaW5TZWdtZW50UHRzIiwiY29uY2F0ZW5hdGVGcmFtZURhdGEiLCJzdW1GcmFtZUJ5dGVMZW5ndGhzIiwic3VtIiwiT05FX1NFQ09ORF9JTl9UUyQxIiwidHJhY2tEZWNvZGVJbmZvIiwiY2xlYXJEdHNJbmZvIiwibWF4U2VnbWVudER0cyIsIm1heFNlZ21lbnRQdHMiLCJjYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUiLCJ0aW1lbGluZVN0YXJ0SW5mbyIsImNvbGxlY3REdHNJbmZvIiwiY2FwdGlvblBhY2tldFBhcnNlciIsIl9jaGFyIiwic3RyZWFtVHlwZXMiLCJfTWV0YWRhdGFTdHJlYW0iLCJ0aW1lc3RhbXBSb2xsb3ZlclN0cmVhbSIsInBhcnNlVXRmOCIsInBhcnNlSXNvODg1OTEiLCJ0YWdQYXJzZXJzIiwiVFhYWCIsIldYWFgiLCJQUklWIiwiTWV0YWRhdGFTdHJlYW0iLCJ0YWdTaXplIiwiZGlzcGF0Y2hUeXBlIiwiZGF0YUFsaWdubWVudEluZGljYXRvciIsInRpbWVTdGFtcCIsIl9UcmFuc3BvcnRQYWNrZXRTdHJlYW0iLCJfVHJhbnNwb3J0UGFyc2VTdHJlYW0iLCJfRWxlbWVudGFyeVN0cmVhbSIsIm1ldGFkYXRhU3RyZWFtIiwiVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0kMSIsIlRyYW5zcG9ydFBhY2tldFN0cmVhbSIsImJ5dGVzSW5CdWZmZXIiLCJldmVyeXRoaW5nIiwiVHJhbnNwb3J0UGFyc2VTdHJlYW0iLCJwYXJzZVBzaSIsInBhY2tldHNXYWl0aW5nRm9yUG10IiwicHNpIiwicGF5bG9hZFVuaXRTdGFydEluZGljYXRvciIsInBhdCIsInNlY3Rpb25fbnVtYmVyIiwibGFzdF9zZWN0aW9uX251bWJlciIsInByb2Nlc3NQZXNfIiwiU1RSRUFNX1RZUEVTIiwiaDI2NCIsImFkdHMiLCJFbGVtZW50YXJ5U3RyZWFtIiwidGltZWRNZXRhZGF0YSIsInN0cmVhbSQkMSIsImZvcmNlRmx1c2giLCJwYWNrZXRGbHVzaGFibGUiLCJwYWNrZXREYXRhIiwicGFyc2VQZXMiLCJwYWNrZXRMZW5ndGgiLCJmbHVzaFN0cmVhbXNfIiwibTJ0cyIsIlBBVF9QSUQiLCJNUDJUX1BBQ0tFVF9MRU5HVEgiLCJfQWR0c1N0cmVhbSIsIm0ydHNfMSIsIk9ORV9TRUNPTkRfSU5fVFMkMiIsIkFkdHNTdHJlYW0iLCJoYW5kbGVQYXJ0aWFsU2VnbWVudHMiLCJmcmFtZU51bSIsImZyYW1lTGVuZ3RoIiwicHJvdGVjdGlvblNraXBCeXRlcyIsImZyYW1lRW5kIiwib2xkQnVmZmVyIiwiYWR0c0ZyYW1lRHVyYXRpb24iLCJfSDI2NFN0cmVhbSIsIl9OYWxCeXRlU3RyZWFtIiwiUFJPRklMRVNfV0lUSF9PUFRJT05BTF9TUFNfREFUQSIsImV4cEdvbG9tYiIsIkV4cEdvbG9tYiIsIndvcmtpbmdEYXRhIiwid29ya2luZ0J5dGVzQXZhaWxhYmxlIiwid29ya2luZ1dvcmQiLCJ3b3JraW5nQml0c0F2YWlsYWJsZSIsImJpdHNBdmFpbGFibGUiLCJsb2FkV29yZCIsIndvcmtpbmdCeXRlcyIsImF2YWlsYWJsZUJ5dGVzIiwic2tpcEJpdHMiLCJza2lwQnl0ZXMiLCJyZWFkQml0cyIsImJpdHMiLCJ2YWx1Iiwic2tpcExlYWRpbmdaZXJvcyIsImxlYWRpbmdaZXJvQ291bnQiLCJza2lwVW5zaWduZWRFeHBHb2xvbWIiLCJza2lwRXhwR29sb21iIiwicmVhZFVuc2lnbmVkRXhwR29sb21iIiwiY2x6IiwicmVhZEV4cEdvbG9tYiIsInJlYWRCb29sZWFuIiwicmVhZFVuc2lnbmVkQnl0ZSIsIk5hbEJ5dGVTdHJlYW0iLCJzeW5jUG9pbnQiLCJzd2FwQnVmZmVyIiwibGVuIiwiSDI2NFN0cmVhbSIsImN1cnJlbnRQdHMiLCJyZWFkU2VxdWVuY2VQYXJhbWV0ZXJTZXQiLCJza2lwU2NhbGluZ0xpc3QiLCJuYWxCeXRlU3RyZWFtIiwiZXhwR29sb21iRGVjb2RlciIsImxhc3RTY2FsZSIsIm5leHRTY2FsZSIsImNocm9tYUZvcm1hdElkYyIsInBpY09yZGVyQ250VHlwZSIsIm51bVJlZkZyYW1lc0luUGljT3JkZXJDbnRDeWNsZSIsInBpY1dpZHRoSW5NYnNNaW51czEiLCJwaWNIZWlnaHRJbk1hcFVuaXRzTWludXMxIiwiZnJhbWVNYnNPbmx5RmxhZyIsInNjYWxpbmdMaXN0Q291bnQiLCJmcmFtZUNyb3BMZWZ0T2Zmc2V0IiwiZnJhbWVDcm9wUmlnaHRPZmZzZXQiLCJmcmFtZUNyb3BUb3BPZmZzZXQiLCJmcmFtZUNyb3BCb3R0b21PZmZzZXQiLCJzYXJTY2FsZSIsIl9BYWNTdHJlYW0iLCJBYWNTdHJlYW0iLCJzZXRUaW1lc3RhbXAiLCJieXRlc0xlZnQiLCJ0ZW1wTGVuZ3RoIiwiX1ZpZGVvU2VnbWVudFN0cmVhbSIsIl9BdWRpb1NlZ21lbnRTdHJlYW0iLCJfVHJhbnNtdXhlciIsIl9Db2FsZXNjZVN0cmVhbSIsImlzTGlrZWx5QWFjRGF0YSQxIiwiT05FX1NFQ09ORF9JTl9UUyQzIiwiQVVESU9fUFJPUEVSVElFUyIsIlZJREVPX1BST1BFUlRJRVMiLCJhcnJheUVxdWFscyIsImdlbmVyYXRlVmlkZW9TZWdtZW50VGltaW5nSW5mbyIsInN0YXJ0RHRzIiwiZW5kRHRzIiwicHJlcGVuZGVkQ29udGVudER1cmF0aW9uIiwiQXVkaW9TZWdtZW50U3RyZWFtIiwic2V0RWFybGllc3REdHMiLCJlYXJsaWVzdER0cyIsInNldFZpZGVvQmFzZU1lZGlhRGVjb2RlVGltZSIsInNldEF1ZGlvQXBwZW5kU3RhcnQiLCJWaWRlb1NlZ21lbnRTdHJlYW0iLCJnb3BzVG9BbGlnbldpdGgiLCJtaW5QVFMiLCJnb3BDYWNoZV8iLCJuYWxVbml0IiwiZ29wRm9yRnVzaW9uIiwiZmlyc3RHb3AiLCJsYXN0R29wIiwicmVzZXRTdHJlYW1fIiwiZ2V0R29wRm9yRnVzaW9uXyIsImFsaWduZWRHb3BzIiwiYWxpZ25Hb3BzQXRFbmQiLCJhbGlnbkdvcHNBdEVuZF8iLCJhbGlnbkdvcHNBdFN0YXJ0XyIsImdvcCIsImR0c0Rpc3RhbmNlIiwibmVhcmVzdEdvcE9iaiIsImN1cnJlbnRHb3BPYmoiLCJuZWFyZXN0RGlzdGFuY2UiLCJhbGlnbkluZGV4IiwiZ29wSW5kZXgiLCJhbGlnbiIsImFsaWduRW5kSW5kZXgiLCJtYXRjaEZvdW5kIiwidHJpbUluZGV4IiwidG90YWwiLCJhbGlnbkdvcHNXaXRoIiwibmV3R29wc1RvQWxpZ25XaXRoIiwiQ29hbGVzY2VTdHJlYW0iLCJudW1iZXJPZlRyYWNrcyIsInJlbXV4IiwicmVtdXhUcmFja3MiLCJwZW5kaW5nVHJhY2tzIiwidmlkZW9UcmFjayIsInBlbmRpbmdCb3hlcyIsInBlbmRpbmdDYXB0aW9ucyIsInBlbmRpbmdNZXRhZGF0YSIsInBlbmRpbmdCeXRlcyIsImVtaXR0ZWRUcmFja3MiLCJvdXRwdXQiLCJhdWRpb1RyYWNrIiwiaWQzIiwic2V0UmVtdXgiLCJUcmFuc211eGVyIiwiaGFzRmx1c2hlZCIsInRyYW5zbXV4UGlwZWxpbmVfIiwic2V0dXBBYWNQaXBlbGluZSIsInBpcGVsaW5lIiwiYWFjU3RyZWFtIiwiYXVkaW9UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSIsInRpbWVkTWV0YWRhdGFUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSIsImFkdHNTdHJlYW0iLCJjb2FsZXNjZVN0cmVhbSIsImhlYWRPZlBpcGVsaW5lIiwiYXVkaW9TZWdtZW50U3RyZWFtIiwiaGFzQXVkaW8iLCJoYXNWaWRlbyIsInNldHVwVHNQaXBlbGluZSIsInBhY2tldFN0cmVhbSIsImVsZW1lbnRhcnlTdHJlYW0iLCJoMjY0U3RyZWFtIiwidmlkZW9TZWdtZW50U3RyZWFtIiwiaWQzRnJhbWUiLCJzZXRCYXNlTWVkaWFEZWNvZGVUaW1lIiwiaXNBYWMiLCJyZXNldENhcHRpb25zIiwidHJhbnNtdXhlciIsIk1lc3NhZ2VIYW5kbGVycyIsIndpcmVUcmFuc211eGVyRXZlbnRzIiwidHJhbnNtdXhlciQkMSIsImluaXRBcnJheSIsInR5cGVkQXJyYXkiLCJhY3Rpb24iLCJnb3BJbmZvIiwidmlkZW9TZWdtZW50VGltaW5nSW5mbyIsInNldFRpbWVzdGFtcE9mZnNldCIsImFwcGVuZFN0YXJ0IiwidHJhbnNtdXhlcldvcmtlciIsIlRyYW5zbXV4ZXJXb3JrZXIiLCJtZXNzYWdlSGFuZGxlcnMiLCJkZWZhdWx0Q29kZWNzIiwidmlkZW9Db2RlYyIsInZpZGVvT2JqZWN0VHlwZUluZGljYXRvciIsImF1ZGlvUHJvZmlsZSIsInRyYW5zbGF0ZUxlZ2FjeUNvZGVjcyIsIm9yaWciLCJwcm9maWxlIiwiYXZjTGV2ZWwiLCJwYXJzZUNvZGVjcyIsImNvZGVjQ291bnQiLCJtYWtlTWltZVR5cGVTdHJpbmciLCJjb250YWluZXIiLCJtaW1lVHlwZXNGb3JQbGF5bGlzdCIsImNvbnRhaW5lclR5cGUiLCJnZXRDb250YWluZXJUeXBlIiwiY29kZWNJbmZvIiwiZ2V0Q29kZWNzIiwibWVkaWFBdHRyaWJ1dGVzIiwiaXNNdXhlZCIsImlzTWFhdCIsImF1ZGlvR3JvdXAiLCJncm91cElkIiwiYXVkaW9Qcm9maWxlRnJvbURlZmF1bHQiLCJhdWRpb0dyb3VwSWQiLCJhdWRpb1R5cGUiLCJjb2RlY1N0cmluZ3MiLCJqdXN0QXVkaW8iLCJqdXN0VmlkZW8iLCJib3RoVmlkZW9BdWRpbyIsImlzQXVkaW9Db2RlYyIsImlzVmlkZW9Db2RlYyIsImdvcHNTYWZlVG9BbGlnbldpdGgiLCJtYXBwaW5nIiwiY3VycmVudFRpbWVQdHMiLCJWaXJ0dWFsU291cmNlQnVmZmVyIiwiX3ZpZGVvanMkRXZlbnRUYXJnZXQiLCJtZWRpYVNvdXJjZSIsInRpbWVzdGFtcE9mZnNldF8iLCJwZW5kaW5nQnVmZmVyc18iLCJidWZmZXJVcGRhdGluZ18iLCJjb2RlY3NfIiwiYXVkaW9Db2RlY18iLCJ2aWRlb0NvZGVjXyIsImF1ZGlvRGlzYWJsZWRfIiwiYXBwZW5kQXVkaW9Jbml0U2VnbWVudF8iLCJnb3BCdWZmZXJfIiwidGltZU1hcHBpbmdfIiwic2FmZUFwcGVuZF8iLCJ0cmFuc211eGVyXyIsImRhdGFfIiwiZG9uZV8iLCJhcHBlbmRHb3BJbmZvXyIsInZpZGVvU2VnbWVudFRpbWluZ0luZm9fIiwic2V0JCQxIiwidmlkZW9CdWZmZXJfIiwiYXVkaW9CdWZmZXJfIiwiYXBwZW5kV2luZG93U3RhcnQiLCJ1cGRhdGluZyIsInZpZGVvQnVmZmVyIiwiYXVkaW9CdWZmZXIiLCJhdWRpb0Rpc2FibGVkIiwiYXJpdHkiLCJleHRlbnRzIiwidmlkZW9CdWZmZXJlZCIsImF1ZGlvQnVmZmVyZWQiLCJjcmVhdGVUZXh0VHJhY2tzSWZOZWNlc3NhcnkiLCJzb3VyY2VCdWZmZXIiLCJpbkJhbmRNZXRhZGF0YVRyYWNrRGlzcGF0Y2hUeXBlIiwicHJvY2Vzc1BlbmRpbmdTZWdtZW50c18iLCJ0aW1pbmdJbmZvIiwidGltaW5nSW5mb0luU2Vjb25kcyIsImRlY29kZSIsInByZXNlbnRhdGlvbiIsImNyZWF0ZVJlYWxTb3VyY2VCdWZmZXJzXyIsIm1ha2VXcmFwcGVkU291cmNlQnVmZmVyIiwiYWRkU291cmNlQnVmZmVyIiwicmVhbEJ1ZmZlcl8iLCJuYXRpdmVNZWRpYVNvdXJjZV8iLCJhcHBlbmRCdWZmZXIiLCJ1cGRhdGVHb3BCdWZmZXIiLCJyZW1vdmVHb3BCdWZmZXIiLCJ1cGRhdGVkQnVmZmVyIiwic29ydGVkU2VnbWVudHMiLCJzZWdtZW50T2JqIiwidHJpZ2dlclVwZGF0ZWVuZCIsImNvbmNhdEFuZEFwcGVuZFNlZ21lbnRzXyIsImRlc3RpbmF0aW9uQnVmZmVyIiwidGVtcEJ1ZmZlciIsIm9yaWdpbmFsRXJyb3IiLCJIdG1sTWVkaWFTb3VyY2UiLCJhY3RpdmVTb3VyY2VCdWZmZXJzXyIsInNvdXJjZUJ1ZmZlcnMiLCJ1cGRhdGVBY3RpdmVTb3VyY2VCdWZmZXJzXyIsImRpc2FibGVDb21iaW5lZCIsImRpc2FibGVBdWRpb09ubHkiLCJvblBsYXllck1lZGlhY2hhbmdlXyIsIm9uSGxzUmVzZXRfIiwib25IbHNTZWdtZW50VGltZU1hcHBpbmdfIiwidXJsXyIsInNvdXJjZWJ1ZmZlciIsImFkZFNlZWthYmxlUmFuZ2VfIiwicGFyc2VkVHlwZSIsInBhcnNlQ29udGVudFR5cGUiLCJwYXJhbWV0ZXJzIiwicGFyYW1ldGVyIiwidXJsQ291bnQiLCJtZWRpYVNvdXJjZXMiLCJtc09iamVjdFVSTCIsInN3ZklkIiwic3VwcG9ydHNOYXRpdmVNZWRpYVNvdXJjZXMiLCJpc1R5cGVTdXBwb3J0ZWQiLCJNZWRpYVNvdXJjZSIsIlVSTCQxIiwiRXZlbnRUYXJnZXQkMSQxIiwibWVyZ2VPcHRpb25zJDIiLCJ1cGRhdGVNYXN0ZXIkMSIsInVwZGF0ZU1hc3RlciQkMSIsIm9sZE1hc3RlciIsIm5ld01hc3RlciIsIm5vQ2hhbmdlcyIsInBsYXlsaXN0VXBkYXRlIiwiZ3JvdXAiLCJfcGxheWxpc3RVcGRhdGUiLCJnZW5lcmF0ZVNpZHhLZXkiLCJzaWR4SW5mbyIsInNpZHhCeXRlUmFuZ2VFbmQiLCJlcXVpdmFsZW50U2lkeCIsImNvbXBhcmVTaWR4RW50cnkiLCJvbGRTaWR4TWFwcGluZyIsIm5ld1NpZHhNYXBwaW5nIiwiY3VycmVudFNpZHhJbmZvIiwic2F2ZWRTaWR4SW5mbyIsInJlcXVlc3RTaWR4XyIsInNpZHhSYW5nZSIsImZpbmlzaFByb2Nlc3NpbmdGbiIsInJlc3BvbnNlVHlwZSIsIkRhc2hQbGF5bGlzdExvYWRlciIsInNyY1VybE9yUGxheWxpc3QiLCJtYXN0ZXJQbGF5bGlzdExvYWRlciIsInJlZnJlc2hYbWxfIiwicmVmcmVzaE1lZGlhXyIsImxvYWRlZFBsYXlsaXN0c18iLCJzaWR4TWFwcGluZ18iLCJzZXR1cENoaWxkTG9hZGVyIiwibWFzdGVyUGxheWxpc3RMb2FkZXJfIiwiY2hpbGRQbGF5bGlzdF8iLCJtaW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8iLCJtZWRpYVJlcXVlc3RfIiwiaGFzUGVuZGluZ1JlcXVlc3QiLCJzaWR4UmVxdWVzdEZpbmlzaGVkXyIsImRvbmVGbiIsInBhcnNlTWFzdGVyWG1sIiwibWFzdGVyWG1sXyIsImNsaWVudE9mZnNldF8iLCJwaG9ueVVyaSIsIl9waG9ueVVyaSIsImhhdmVNYXN0ZXJfIiwiZGF0ZSIsIm1hc3RlckxvYWRlZF8iLCJzeW5jQ2xpZW50U2VydmVyQ2xvY2tfIiwib25DbGllbnRTZXJ2ZXJDbG9ja1N5bmNfIiwidXRjVGltaW5nIiwic2VydmVyVGltZSIsImZpbHRlckNoYW5nZWRTaWR4TWFwcGluZ3MiLCJtYXN0ZXJYbWwiLCJtZWRpYUdyb3VwU2lkeCIsInVwZGF0ZWRNYXN0ZXIiLCJtZWRpYVVyaSIsImxvZ2dlciIsIlNvdXJjZVVwZGF0ZXIiLCJzb3VyY2VCdWZmZXJFbWl0dGVyIiwiY2FsbGJhY2tzXyIsInBlbmRpbmdDYWxsYmFja18iLCJwcm9jZXNzZWRBcHBlbmRfIiwibWltZVR5cGVfIiwibG9nZ2VyXyIsImNyZWF0ZVNvdXJjZUJ1ZmZlcl8iLCJzb3VyY2VCdWZmZXJfIiwic3RhcnRfIiwic3RhcnRlZF8iLCJvblVwZGF0ZWVuZENhbGxiYWNrXyIsInBlbmRpbmdDYWxsYmFjayIsInJlbW92aW5nIiwicnVuQ2FsbGJhY2tfIiwicXVldWVDYWxsYmFja18iLCJ2aWRlb1NlZ21lbnRUaW1pbmdJbmZvQ2FsbGJhY2siLCJkaXNwb3NlRm4iLCJDb25maWciLCJHT0FMX0JVRkZFUl9MRU5HVEgiLCJNQVhfR09BTF9CVUZGRVJfTEVOR1RIIiwiR09BTF9CVUZGRVJfTEVOR1RIX1JBVEUiLCJJTklUSUFMX0JBTkRXSURUSCIsIkJBTkRXSURUSF9WQVJJQU5DRSIsIkJVRkZFUl9MT1dfV0FURVJfTElORSIsIk1BWF9CVUZGRVJfTE9XX1dBVEVSX0xJTkUiLCJCVUZGRVJfTE9XX1dBVEVSX0xJTkVfUkFURSIsIlJFUVVFU1RfRVJST1JTIiwiYWJvcnRBbGwiLCJhY3RpdmVYaHJzIiwiaGFuZGxlRXJyb3JzIiwid2FpdEZvckNvbXBsZXRpb24iLCJkZWNyeXB0ZXIiLCJkaWRFcnJvciIsImVuZE9mQWxsUmVxdWVzdHMiLCJlbmNyeXB0ZWRCeXRlcyIsImRlY3J5cHRTZWdtZW50IiwiZGVjcnlwdGlvbkhhbmRsZXIiLCJyZXF1ZXN0SWQiLCJrZXlCeXRlcyIsImhhbmRsZVByb2dyZXNzIiwicHJvZ3Jlc3NGbiIsInN0YXRzIiwiZ2V0UHJvZ3Jlc3NTdGF0cyIsInByb2dyZXNzRXZlbnQiLCJsb2FkZWQiLCJmaXJzdEJ5dGVzUmVjZWl2ZWRBdCIsIm1lZGlhU2VnbWVudFJlcXVlc3QiLCJ4aHJPcHRpb25zIiwiZGVjcnlwdGlvbldvcmtlciIsImNhcHRpb25QYXJzZXIiLCJrZXlSZXF1ZXN0T3B0aW9ucyIsImtleVJlcXVlc3RDYWxsYmFjayIsImhhbmRsZUtleVJlc3BvbnNlIiwiZXJyb3JPYmoiLCJrZXlYaHIiLCJpbml0U2VnbWVudE9wdGlvbnMiLCJpbml0U2VnbWVudFJlcXVlc3RDYWxsYmFjayIsImhhbmRsZUluaXRTZWdtZW50UmVzcG9uc2UiLCJpbml0U2VnbWVudFhociIsInNlZ21lbnRSZXF1ZXN0T3B0aW9ucyIsInNlZ21lbnRSZXF1ZXN0Q2FsbGJhY2siLCJoYW5kbGVTZWdtZW50UmVzcG9uc2UiLCJnZXRSZXF1ZXN0U3RhdHMiLCJmbXA0Q2FwdGlvbnMiLCJzZWdtZW50WGhyIiwic2FmZUdldENvbXB1dGVkU3R5bGUiLCJzdGFibGVTb3J0Iiwic29ydEZuIiwibmV3QXJyYXkiLCJjbXAiLCJjb21wYXJlUGxheWxpc3RCYW5kd2lkdGgiLCJsZWZ0QmFuZHdpZHRoIiwicmlnaHRCYW5kd2lkdGgiLCJmaW5pdGUiLCJTZWdtZW50TG9hZGVyIiwidGhyb3VnaHB1dCIsInJvdW5kVHJpcCIsInJlc2V0U3RhdHNfIiwiaGFzUGxheWVkXyIsImhhc1BsYXllZCIsImN1cnJlbnRUaW1lXyIsInNlZWthYmxlXyIsInNlZWtpbmdfIiwibG9hZGVyVHlwZV8iLCJsb2FkZXJUeXBlIiwic3RhcnRpbmdNZWRpYV8iLCJzZWdtZW50TWV0YWRhdGFUcmFja18iLCJzZWdtZW50TWV0YWRhdGFUcmFjayIsImdvYWxCdWZmZXJMZW5ndGhfIiwiZ29hbEJ1ZmZlckxlbmd0aCIsInNvdXJjZVR5cGVfIiwic291cmNlVHlwZSIsImluYmFuZFRleHRUcmFja3MiLCJzdGF0ZV8iLCJjaGVja0J1ZmZlclRpbWVvdXRfIiwiY3VycmVudFRpbWVsaW5lXyIsInBlbmRpbmdTZWdtZW50XyIsInNvdXJjZVVwZGF0ZXJfIiwieGhyT3B0aW9uc18iLCJhY3RpdmVJbml0U2VnbWVudElkXyIsImluaXRTZWdtZW50c18iLCJjYWNoZUVuY3J5cHRpb25LZXlzXyIsImNhY2hlRW5jcnlwdGlvbktleXMiLCJrZXlDYWNoZV8iLCJjYXB0aW9uUGFyc2VyXyIsImRlY3J5cHRlcl8iLCJzeW5jQ29udHJvbGxlcl8iLCJzeW5jQ29udHJvbGxlciIsInN5bmNQb2ludF8iLCJzZWdtZW50SW5kZXgiLCJlbmRlZF8iLCJmZXRjaEF0QnVmZmVyXyIsIm5ld1N0YXRlIiwibWVkaWFCeXRlc1RyYW5zZmVycmVkIiwibWVkaWFSZXF1ZXN0cyIsIm1lZGlhUmVxdWVzdHNBYm9ydGVkIiwibWVkaWFSZXF1ZXN0c1RpbWVkb3V0IiwibWVkaWFSZXF1ZXN0c0Vycm9yZWQiLCJtZWRpYVRyYW5zZmVyRHVyYXRpb24iLCJtZWRpYVNlY29uZHNMb2FkZWQiLCJhYm9ydF8iLCJtb25pdG9yQnVmZmVyXyIsImFib3J0UmVxdWVzdHMiLCJfZXJyb3IiLCJlbmRPZlN0cmVhbSIsImJ1ZmZlcmVkXyIsInN0b3JlZE1hcCIsInNlZ21lbnRLZXkiLCJzdG9yZWRLZXkiLCJjb3VsZEJlZ2luTG9hZGluZ18iLCJwbGF5bGlzdF8iLCJzZXREYXRlVGltZU1hcHBpbmciLCJpbml0XyIsInNvdXJjZUJ1ZmZlckVtaXR0ZXJfIiwicmVzZXRFdmVyeXRoaW5nIiwibmV3UGxheWxpc3QiLCJvbGRQbGF5bGlzdCIsInN5bmNJbmZvIiwib2xkSWQiLCJtZWRpYVNlcXVlbmNlRGlmZiIsInNhdmVFeHBpcmVkU2VnbWVudEluZm8iLCJyZXN5bmNMb2FkZXIiLCJfbWltZVR5cGUiLCJyZXNldExvYWRlciIsIm1vbml0b3JCdWZmZXJUaWNrXyIsImZpbGxCdWZmZXJfIiwiZ2V0U3luY1BvaW50IiwiY2hlY2tCdWZmZXJfIiwiaXNFbmRPZlN0cmVhbV8iLCJzdGFydE9mU2VnbWVudCIsImxvYWRTZWdtZW50XyIsImRldGVjdEVuZE9mU3RyZWFtIiwiYXBwZW5kZWRMYXN0U2VnbWVudCIsImxhc3RCdWZmZXJlZEVuZCIsImJ1ZmZlcmVkVGltZSIsImdldFN5bmNTZWdtZW50Q2FuZGlkYXRlXyIsImdlbmVyYXRlU2VnbWVudEluZm9fIiwibWVkaWFTb3VyY2VJbmZvIiwiX21lZGlhU291cmNlSW5mbyIsInNlZ21lbnRJbmRleEFycmF5IiwiaXNTeW5jUmVxdWVzdCIsInJhbmRvbSIsImFib3J0UmVxdWVzdEVhcmx5XyIsIm1lYXN1cmVkQmFuZHdpZHRoIiwicmVxdWVzdFRpbWVSZW1haW5pbmciLCJ0aW1lVW50aWxSZWJ1ZmZlciQkMSIsInRpbWVVbnRpbFJlYnVmZmVyIiwic3dpdGNoQ2FuZGlkYXRlIiwibWluUmVidWZmZXJNYXhCYW5kd2lkdGhTZWxlY3RvciIsImR1cmF0aW9uJCQxIiwiY29tcGF0aWJsZVBsYXlsaXN0cyIsImVuYWJsZWRQbGF5bGlzdHMiLCJyZWJ1ZmZlcmluZ0VzdGltYXRlcyIsIm51bVJlcXVlc3RzIiwicmVidWZmZXJpbmdJbXBhY3QiLCJub1JlYnVmZmVyaW5nUGxheWxpc3RzIiwiZXN0aW1hdGUiLCJ0aW1lU2F2ZWRCeVN3aXRjaGluZyIsIm1pbmltdW1UaW1lU2F2aW5nIiwiaGFuZGxlUHJvZ3Jlc3NfIiwic2ltcGxlU2VnbWVudCIsInRyaW1CYWNrQnVmZmVyXyIsImNyZWF0ZVNpbXBsaWZpZWRTZWdtZW50T2JqXyIsInNlZ21lbnRSZXF1ZXN0RmluaXNoZWRfIiwicmVtb3ZlVG9UaW1lIiwic2FmZUJhY2tCdWZmZXJUcmltVGltZSIsInNlZWthYmxlJCQxIiwicHJvY2Vzc1NlZ21lbnRSZXNwb25zZV8iLCJjcmVhdGVDYXB0aW9uc1RyYWNrSWZOb3RFeGlzdHMiLCJhZGRDYXB0aW9uRGF0YSIsIldlYktpdERhdGFDdWUiLCJoYW5kbGVTZWdtZW50XyIsInByb2JlU2VnbWVudEluZm8iLCJjb250YWluc0F1ZGlvIiwiY29udGFpbnNWaWRlbyIsImlsbGVnYWxNZWRpYVN3aXRjaEVycm9yIiwiaWxsZWdhbE1lZGlhU3dpdGNoIiwic3RhcnRpbmdNZWRpYSIsIm5ld1NlZ21lbnRNZWRpYSIsImJsYWNrbGlzdER1cmF0aW9uIiwic2VnbWVudFRpbWVzdGFtcEluZm8iLCJwdHNTdGFydFRpbWUiLCJkdHNTdGFydFRpbWUiLCJ0aW1lbGluZU1hcHBpbmciLCJtYXBwaW5nRm9yVGltZWxpbmUiLCJpbml0SWQiLCJzZWdtZW50SW5mb1N0cmluZyIsIl9zZWdtZW50SW5mbyRzZWdtZW50IiwiX3NlZ21lbnRJbmZvJHBsYXlsaXN0Iiwic2VxIiwiX3NlZ21lbnRJbmZvJHBsYXlsaXN0MiIsImhhbmRsZVZpZGVvU2VnbWVudFRpbWluZ0luZm9fIiwiaGFuZGxlVXBkYXRlRW5kXyIsImlzV2Fsa2luZ0ZvcndhcmQiLCJyZWNvcmRUaHJvdWdocHV0XyIsImFkZFNlZ21lbnRNZXRhZGF0YUN1ZV8iLCJzZWdtZW50UHJvY2Vzc2luZ1RpbWUiLCJzZWdtZW50UHJvY2Vzc2luZ1Rocm91Z2hwdXQiLCJ1aW50OFRvVXRmOCIsInVpbnRBcnJheSIsIlZUVF9MSU5FX1RFUk1JTkFUT1JTIiwiX2NoYXIyIiwiVlRUU2VnbWVudExvYWRlciIsIl9TZWdtZW50TG9hZGVyIiwic3VidGl0bGVzVHJhY2tfIiwiY29tYmluZWRCeXRlTGVuZ3RoIiwiY29tYmluZWRTZWdtZW50Iiwic2tpcEVtcHR5U2VnbWVudHNfIiwidGltZXN0YW1wT2Zmc2V0Rm9yVGltZWxpbmUiLCJjaGVja1RpbWVzdGFtcE9mZnNldCIsImxvYWRIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwicmVxdWVzdGVkIiwicGFyc2VWVFRDdWVzXyIsInVwZGF0ZVRpbWVNYXBwaW5nXyIsInRpbWVsaW5lcyIsImRlY29kZXIiLCJkZWNvZGVCeXRlc1RvU3RyaW5nIiwidGltZXN0YW1wbWFwIiwiTVBFR1RTIiwiTE9DQUwiLCJvbnRpbWVzdGFtcG1hcCIsIm1hcERhdGEiLCJzZWdtZW50RGF0YSIsIm1hcHBpbmdPYmoiLCJkaWZmIiwiZmlyc3RTdGFydCIsImxhc3RTdGFydCIsImZpbmRBZEN1ZSIsIm1lZGlhVGltZSIsImFkU3RhcnRUaW1lIiwiYWRFbmRUaW1lIiwidHNwcm9iZSIsInN5bmNQb2ludFN0cmF0ZWdpZXMiLCJydW4iLCJkYXRldGltZVRvRGlzcGxheVRpbWUiLCJsYXN0RGlzdGFuY2UiLCJzZWdtZW50U3RhcnQiLCJkaXNjb250aW51aXR5U3luYyIsImRpc2NvbnRpbnVpdGllcyIsIlN5bmNDb250cm9sbGVyIiwiaW5zcGVjdENhY2hlXyIsInN5bmNQb2ludHMiLCJydW5TdHJhdGVnaWVzXyIsInNlbGVjdFN5bmNQb2ludF8iLCJnZXRFeHBpcmVkVGltZSIsInN0cmF0ZWd5IiwiYmVzdFN5bmNQb2ludCIsImJlc3REaXN0YW5jZSIsImJlc3RTdHJhdGVneSIsIm5ld0Rpc3RhbmNlIiwibGFzdFJlbW92ZWRTZWdtZW50IiwicGxheWxpc3RUaW1lc3RhbXAiLCJwcm9iZU1wNFNlZ21lbnRfIiwicHJvYmVUc1NlZ21lbnRfIiwiY2FsY3VsYXRlU2VnbWVudFRpbWVNYXBwaW5nXyIsInNhdmVEaXNjb250aW51aXR5U3luY0luZm9fIiwidGltZUluZm8iLCJzZWdtZW50U3RhcnRUaW1lIiwic2VnbWVudEVuZFRpbWUiLCJhY2N1cmFjeSIsIm1lZGlhSW5kZXhEaWZmIiwiRGVjcnlwdGVyJDEiLCJkZWNyeXB0JCQxIiwiQXN5bmNTdHJlYW0kJDEiLCJEZWNyeXB0ZXIkJDEiLCJkZWNyeXB0ZXJXb3JrZXIiLCJEZWNyeXB0ZXJXb3JrZXIiLCJhdWRpb1RyYWNrS2luZF8iLCJzdG9wTG9hZGVycyIsInNlZ21lbnRMb2FkZXIiLCJhY3RpdmVQbGF5bGlzdExvYWRlciIsInN0YXJ0TG9hZGVycyIsInBsYXlsaXN0TG9hZGVyIiwib25FcnJvciIsInNlZ21lbnRMb2FkZXJzIiwibWVkaWFUeXBlcyIsImJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdCIsImFjdGl2ZVRyYWNrIiwiYWN0aXZlR3JvdXAiLCJkZWZhdWx0VHJhY2siLCJvblRyYWNrQ2hhbmdlZCIsInNldHVwTGlzdGVuZXJzIiwicmVxdWVzdE9wdGlvbnMiLCJpbml0aWFsaXplIiwiX3NldHRpbmdzJG1lZGlhVHlwZXMkIiwiZ3JvdXBzIiwidmFyaWFudExhYmVsIiwiX3NldHRpbmdzJG1lZGlhVHlwZXMkMiIsIkNMT1NFRENBUFRJT05TIiwiX3NldHRpbmdzJG1lZGlhVHlwZXMkMyIsInNldHVwTWVkaWFHcm91cHMiLCJ2YXJpYW50cyIsIm9uR3JvdXBDaGFuZ2VkIiwiX3NldHRpbmdzJHNlZ21lbnRMb2FkIiwibWFpblNlZ21lbnRMb2FkZXIiLCJwcmV2aW91c0FjdGl2ZUxvYWRlciIsIl9zZXR0aW5ncyRzZWdtZW50TG9hZDIiLCJvbkF1ZGlvVHJhY2tDaGFuZ2VkIiwibG9hZGVyU3RhdHMiLCJzdW1Mb2FkZXJTdGF0Iiwic3RhdCIsImF1ZGlvU2VnbWVudExvYWRlcl8iLCJtYWluU2VnbWVudExvYWRlcl8iLCJNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIiLCJleHRlcm5IbHMiLCJ1c2VDdWVUYWdzIiwiZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0Iiwic2Vla1RvXyIsInVzZUN1ZVRhZ3NfIiwiY3VlVGFnc1RyYWNrXyIsInJlcXVlc3RPcHRpb25zXyIsIm1lZGlhVHlwZXNfIiwiY3JlYXRlTWVkaWFUeXBlcyIsImhhbmRsZVNvdXJjZU9wZW5fIiwic2VnbWVudExvYWRlclNldHRpbmdzIiwic2V0dXBNYXN0ZXJQbGF5bGlzdExvYWRlckxpc3RlbmVyc18iLCJzdWJ0aXRsZVNlZ21lbnRMb2FkZXJfIiwic2V0dXBTZWdtZW50TG9hZGVyTGlzdGVuZXJzXyIsInJlcXVlc3RUaW1lb3V0IiwidHJpZ2dlclByZXNlbmNlVXNhZ2VfIiwic2V0dXBTb3VyY2VCdWZmZXJzXyIsInNldHVwRmlyc3RQbGF5IiwidXBkYXRlZFBsYXlsaXN0IiwiZXhjbHVkZVVuc3VwcG9ydGVkVmFyaWFudHNfIiwic2VsZWN0ZWRNZWRpYSIsInNlbGVjdEluaXRpYWxQbGF5bGlzdCIsInNlbGVjdFBsYXlsaXN0IiwiaW5pdGlhbE1lZGlhXyIsInVwZGF0ZUFkQ3Vlc18iLCJ1cGRhdGVEdXJhdGlvbiIsImFkZFNlZWthYmxlUmFuZ2UiLCJvbkR1cmF0aW9uY2hhbmdlIiwic3R1Y2tBdFBsYXlsaXN0RW5kXyIsImRlZmF1bHREZW11eGVkIiwiYXVkaW9Hcm91cEtleXMiLCJuZXh0UGxheWxpc3QiLCJjdXJyZW50UGxheWxpc3QiLCJmb3J3YXJkQnVmZmVyIiwiYnVmZmVyTG93V2F0ZXJMaW5lIiwib25TeW5jSW5mb1VwZGF0ZV8iLCJvbkVuZE9mU3RyZWFtIiwibWVkaWFTZWNvbmRzTG9hZGVkXyIsInNtb290aFF1YWxpdHlDaGFuZ2VfIiwiZmFzdFF1YWxpdHlDaGFuZ2VfIiwiZW5kZWQiLCJpc0VuZE9mU3RyZWFtIiwiYWJzb2x1dGVQbGF5bGlzdEVuZCIsInBhdXNlTG9hZGluZyIsIm1haW5TZWVrYWJsZSIsImF1ZGlvU2Vla2FibGUiLCJvbGRFbmQiLCJvbGRTdGFydCIsIm9sZER1cmF0aW9uIiwibmV3RHVyYXRpb24iLCJzZXREdXJhdGlvbiIsIm1pbWVUeXBlcyIsImNvbmZpZ3VyZUxvYWRlck1pbWVUeXBlc18iLCJleGNsdWRlSW5jb21wYXRpYmxlVmFyaWFudHNfIiwidmFyaWFudCIsIm1hcExlZ2FjeUF2Y0NvZGVjcyIsImNvZGVjU3RyaW5nIiwidmFyaWFudENvZGVjcyIsInVwZGF0ZUFkQ3VlcyIsImFkT2Zmc2V0IiwiYWRUb3RhbCIsIl9zZWdtZW50JGN1ZU91dENvbnQkcyIsIl9zZWdtZW50JGN1ZU91dENvbnQkczIiLCJSZXByZXNlbnRhdGlvbiIsImhsc0hhbmRsZXIiLCJtcGMiLCJtYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfIiwicXVhbGl0eUNoYW5nZUZ1bmN0aW9uIiwic21vb3RoUXVhbGl0eUNoYW5nZSIsImVuYWJsZUZ1bmN0aW9uIiwibG9hZGVyIiwicGxheWxpc3RVcmkiLCJjaGFuZ2VQbGF5bGlzdEZuIiwiaW5jb21wYXRpYmxlIiwiY3VycmVudGx5RW5hYmxlZCIsInRpbWVyQ2FuY2VsRXZlbnRzIiwiUGxheWJhY2tXYXRjaGVyIiwiYWxsb3dTZWVrc1dpdGhpblVuc2FmZUxpdmVXaW5kb3ciLCJjb25zZWN1dGl2ZVVwZGF0ZXMiLCJsYXN0UmVjb3JkZWRUaW1lIiwidGltZXJfIiwiY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfIiwiY2FuUGxheUhhbmRsZXIiLCJtb25pdG9yQ3VycmVudFRpbWVfIiwid2FpdGluZ0hhbmRsZXIiLCJ0ZWNoV2FpdGluZ18iLCJjYW5jZWxUaW1lckhhbmRsZXIiLCJjYW5jZWxUaW1lcl8iLCJmaXhlc0JhZFNlZWtzSGFuZGxlciIsImZpeGVzQmFkU2Vla3NfIiwiY2hlY2tDdXJyZW50VGltZV8iLCJ3YWl0aW5nXyIsImFmdGVyU2Vla2FibGVXaW5kb3dfIiwiYmVmb3JlU2Vla2FibGVXaW5kb3dfIiwiY3VycmVudFJhbmdlIiwibGl2ZVBvaW50IiwibmV4dFJhbmdlIiwidmlkZW9VbmRlcmZsb3dfIiwiZGlmZmVyZW5jZSIsInNraXBUaGVHYXBfIiwiYWxsb3dlZEVuZCIsImdhcCIsImdhcEZyb21WaWRlb1VuZGVyZmxvd18iLCJzY2hlZHVsZWRDdXJyZW50VGltZSIsImdhcHMiLCJmaW5kR2FwcyIsImRlZmF1bHRPcHRpb25zIiwiZXJyb3JJbnRlcnZhbCIsImdldFNvdXJjZSIsIklXaWxsTm90VXNlVGhpc0luUGx1Z2lucyIsImluaXRQbHVnaW4iLCJsYXN0Q2FsbGVkIiwibG9jYWxPcHRpb25zIiwibG9hZGVkTWV0YWRhdGFIYW5kbGVyIiwiY2xlYW51cEV2ZW50cyIsInJlbG9hZFNvdXJjZU9uRXJyb3IiLCJyZWluaXRQbHVnaW4iLCJ2aHMiLCJzb3VyY2VfIiwiSGxzJDEiLCJTVEFOREFSRF9QTEFZTElTVF9TRUxFQ1RPUiIsImxhc3RCYW5kd2lkdGhTZWxlY3RvciIsInNpbXBsZVNlbGVjdG9yIiwicGxheWVyQmFuZHdpZHRoIiwicGxheWVyV2lkdGgiLCJwbGF5ZXJIZWlnaHQiLCJsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucyIsInNvcnRlZFBsYXlsaXN0UmVwcyIsImVuYWJsZWRQbGF5bGlzdFJlcHMiLCJyZXAiLCJiYW5kd2lkdGhQbGF5bGlzdFJlcHMiLCJoaWdoZXN0UmVtYWluaW5nQmFuZHdpZHRoUmVwIiwiYmFuZHdpZHRoQmVzdFJlcCIsIl9jaG9zZW5SZXAiLCJoYXZlUmVzb2x1dGlvbiIsInJlc29sdXRpb25CZXN0UmVwTGlzdCIsInJlc29sdXRpb25CZXN0UmVwIiwicmVzb2x1dGlvblBsdXNPbmVMaXN0IiwicmVzb2x1dGlvblBsdXNPbmVTbWFsbGVzdCIsInJlc29sdXRpb25QbHVzT25lUmVwIiwiY2hvc2VuUmVwIiwic3lzdGVtQmFuZHdpZHRoIiwiSU5JVElBTF9QTEFZTElTVF9TRUxFQ1RPUiIsImxvd2VzdEJpdHJhdGVDb21wYXRpYmxlVmFyaWFudFNlbGVjdG9yIiwiY29tcGFyZVBsYXlsaXN0UmVzb2x1dGlvbiIsImxlZnRXaWR0aCIsInJpZ2h0V2lkdGgiLCJzaW1wbGVUeXBlRnJvbVNvdXJjZVR5cGUiLCJoYW5kbGVIbHNNZWRpYUNoYW5nZSIsInF1YWxpdHlMZXZlbHMiLCJzZWxlY3RlZEluZGV4XyIsInNldHVwRW1lT3B0aW9ucyIsImVtZSIsInNvdXJjZU9wdGlvbnMiLCJlbWVLZXlTeXN0ZW1zIiwia2V5U3lzdGVtT3B0aW9ucyIsInZpZGVvUGxheWxpc3QiLCJhdWRpb1BsYXlsaXN0Iiwia2V5U3lzdGVtQ29udGVudFR5cGVzIiwiYXVkaW9Db250ZW50VHlwZSIsInZpZGVvQ29udGVudFR5cGUiLCJrZXlTeXN0ZW1zIiwiaW5pdGlhbGl6ZU1lZGlhS2V5cyIsImdldFZoc0xvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsInN0b3JlZE9iamVjdCIsInN1cHBvcnRzTmF0aXZlSGxzIiwiY2FuSXRQbGF5Iiwic3VwcG9ydHNOYXRpdmVEYXNoIiwic3VwcG9ydHNUeXBlTmF0aXZlbHkiLCJIbHNIYW5kbGVyIiwiZGFzaCIsInNldE9wdGlvbnNfIiwib3ZlcnJpZGVOYXRpdmUiLCJ1c2VCYW5kd2lkdGhGcm9tTG9jYWxTdG9yYWdlIiwib3B0aW9uIiwicGxheWJhY2tXYXRjaGVyXyIsImludkJhbmR3aWR0aCIsImludlRocm91Z2hwdXQiLCJtZWRpYVJlcXVlc3RzXyIsIm1lZGlhUmVxdWVzdHNBYm9ydGVkXyIsIm1lZGlhUmVxdWVzdHNUaW1lZG91dF8iLCJtZWRpYVJlcXVlc3RzRXJyb3JlZF8iLCJtZWRpYVRyYW5zZmVyRHVyYXRpb25fIiwibWVkaWFCeXRlc1RyYW5zZmVycmVkXyIsImN1cnJlbnRUZWNoIiwicGxheWVyRGltZW5zaW9ucyIsInVwZGF0ZVZoc0xvY2FsU3RvcmFnZSIsIm9iamVjdFRvU3RvcmUiLCJyZW5kaXRpb25TZWxlY3Rpb25NaXhpbiIsInNldHVwUXVhbGl0eUxldmVsc18iLCJxdWFsaXR5TGV2ZWxzXyIsImhhbmRsZUhsc0xvYWRlZE1ldGFkYXRhIiwiYWRkUXVhbGl0eUxldmVsIiwiY29udmVydFRvUHJvZ3JhbVRpbWUiLCJzZWVrVG9Qcm9ncmFtVGltZSQkMSIsIkhsc1NvdXJjZUhhbmRsZXIiLCJzdXBwb3J0ZWRUeXBlIiwiU2FmZVBhcnNlVHVwbGUiLCJyZXZpdmVyIiwidnR0anMiLCJXZWJWVFQiLCJWVFRSZWdpb24iLCJjdWVTaGltIiwicmVnaW9uU2hpbSIsIm5hdGl2ZVZUVEN1ZSIsIm5hdGl2ZVZUVFJlZ2lvbiIsInNoaW0iLCJyZXN0b3JlIiwiX29iakNyZWF0ZSIsIkYiLCJQYXJzaW5nRXJyb3IiLCJlcnJvckRhdGEiLCJwYXJzZVRpbWVTdGFtcCIsImlucHV0IiwiY29tcHV0ZVNlY29uZHMiLCJmIiwiU2V0dGluZ3MiLCJwYXJzZU9wdGlvbnMiLCJrZXlWYWx1ZURlbGltIiwiZ3JvdXBEZWxpbSIsImt2IiwicGFyc2VDdWUiLCJyZWdpb25MaXN0Iiwib0lucHV0IiwiY29uc3VtZVRpbWVTdGFtcCIsIkVycm9ycyIsIkJhZFRpbWVTdGFtcCIsInNraXBXaGl0ZXNwYWNlIiwic3Vic3RyIiwiY29uc3VtZUN1ZVNldHRpbmdzIiwicmVnaW9uIiwiYWx0IiwidmFscyIsInZhbHMwIiwiaW50ZWdlciIsImxpbmVBbGlnbiIsInNuYXBUb0xpbmVzIiwicG9zaXRpb25BbGlnbiIsIkJhZFNpZ25hdHVyZSIsImRmbHQiLCJkZWZhdWx0S2V5IiwiRVNDQVBFIiwiVEFHX05BTUUiLCJ1IiwicnVieSIsInJ0IiwiVEFHX0FOTk9UQVRJT04iLCJORUVEU19QQVJFTlQiLCJwYXJzZUNvbnRlbnQiLCJuZXh0VG9rZW4iLCJjb25zdW1lIiwidW5lc2NhcGUxIiwic2hvdWxkQWRkIiwiY3VycmVudCIsImxvY2FsTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJhbm5vdGF0aW9uIiwicm9vdERpdiIsInRhZ1N0YWNrIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJzdHJvbmdSVExSYW5nZXMiLCJpc1N0cm9uZ1JUTENoYXIiLCJkZXRlcm1pbmVCaWRpIiwibm9kZVN0YWNrIiwicHVzaE5vZGVzIiwibmV4dFRleHROb2RlIiwiU3R5bGVCb3giLCJDdWVTdHlsZUJveCIsInN0eWxlT3B0aW9ucyIsInN0eWxlcyIsImRpc3BsYXkiLCJ3cml0aW5nTW9kZSIsInVuaWNvZGVCaWRpIiwiYXBwbHlTdHlsZXMiLCJ0ZXh0QWxpZ24iLCJmb250Iiwid2hpdGVTcGFjZSIsInRleHRQb3MiLCJmb3JtYXRTdHlsZSIsIm1vdmUiLCJCb3hQb3NpdGlvbiIsImxoIiwib2Zmc2V0VG9wIiwicmVjdHMiLCJnZXRDbGllbnRSZWN0cyIsImxpbmVIZWlnaHQiLCJtb3ZlQm94VG9MaW5lUG9zaXRpb24iLCJzdHlsZUJveCIsImNvbnRhaW5lckJveCIsImJveFBvc2l0aW9ucyIsImJveFBvc2l0aW9uIiwibGluZVBvcyIsImNvbXB1dGVMaW5lUG9zIiwidGV4dFRyYWNrTGlzdCIsIm1lZGlhRWxlbWVudCIsImF4aXMiLCJtYXhQb3NpdGlvbiIsImluaXRpYWxBeGlzIiwiY2FsY3VsYXRlZFBlcmNlbnRhZ2UiLCJiZXN0UG9zaXRpb24iLCJmaW5kQmVzdFBvc2l0aW9uIiwic3BlY2lmaWVkUG9zaXRpb24iLCJvdmVybGFwc09wcG9zaXRlQXhpcyIsIndpdGhpbiIsIm92ZXJsYXBzQW55IiwiaW50ZXJzZWN0UGVyY2VudGFnZSIsInRvQ1NTQ29tcGF0VmFsdWVzIiwidW5pdCIsInRvTW92ZSIsIm92ZXJsYXBzIiwiZ2V0U2ltcGxlQm94UG9zaXRpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJjb252ZXJ0Q3VlVG9ET01UcmVlIiwiY3VldGV4dCIsIm92ZXJsYXkiLCJwYWRkZWRPdmVybGF5IiwibWFyZ2luIiwic2hvdWxkQ29tcHV0ZSIsImhhc0JlZW5SZXNldCIsIlRleHREZWNvZGVyIiwicmVwb3J0T3JUaHJvd0Vycm9yIiwiY29sbGVjdE5leHRMaW5lIiwicG9zIiwicGFyc2VIZWFkZXIiLCJwYXJzZVRpbWVzdGFtcE1hcCIsInBhcnNlUmVnaW9uIiwieHkiLCJhbmNob3IiLCJsaW5lcyIsInJlZ2lvbkFuY2hvclgiLCJyZWdpb25BbmNob3JZIiwidmlld3BvcnRBbmNob3JYIiwidmlld3BvcnRBbmNob3JZIiwic2Nyb2xsIiwib25yZWdpb24iLCJhbHJlYWR5Q29sbGVjdGVkTGluZSIsImhhc1N1YnN0cmluZyIsImRpcmVjdGlvblNldHRpbmciLCJhbGlnblNldHRpbmciLCJmaW5kQWxpZ25TZXR0aW5nIiwiX2lkIiwiX3BhdXNlT25FeGl0IiwiX3N0YXJ0VGltZSIsIl9lbmRUaW1lIiwiX3RleHQiLCJfcmVnaW9uIiwiX3ZlcnRpY2FsIiwiX3NuYXBUb0xpbmVzIiwiX2xpbmUiLCJfbGluZUFsaWduIiwiX3Bvc2l0aW9uIiwiX3Bvc2l0aW9uQWxpZ24iLCJfc2l6ZSIsIl9hbGlnbiIsInNldHRpbmciLCJmaW5kRGlyZWN0aW9uU2V0dGluZyIsIlN5bnRheEVycm9yIiwiZ2V0Q3VlQXNIVE1MIiwic2Nyb2xsU2V0dGluZyIsImlzVmFsaWRQZXJjZW50VmFsdWUiLCJfbGluZXMiLCJfcmVnaW9uQW5jaG9yWCIsIl9yZWdpb25BbmNob3JZIiwiX3ZpZXdwb3J0QW5jaG9yWCIsIl92aWV3cG9ydEFuY2hvclkiLCJfc2Nyb2xsIiwiZmluZFNjcm9sbFNldHRpbmciLCJwYXJzZUhlYWRlcnMiLCJ4dGVuZCIsImluaXRQYXJhbXMiLCJjcmVhdGVYSFIiLCJfY3JlYXRlWEhSIiwiY2FsbGVkIiwiY2JPbmNlIiwiZ2V0Qm9keSIsImdldFhtbCIsInJlc3BvbnNlWE1MIiwiZmlyZWZveEJ1Z1Rha2VuRWZmZWN0IiwiaXNKc29uIiwiZXJyb3JGdW5jIiwiZXZ0IiwidGltZW91dFRpbWVyIiwiZmFpbHVyZVJlc3BvbnNlIiwibG9hZEZ1bmMiLCJ1c2VYRFIiLCJyYXdSZXF1ZXN0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiWERvbWFpblJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlYWR5c3RhdGVjaGFuZ2UiLCJvbnByb2dyZXNzIiwib25hYm9ydCIsIm9udGltZW91dCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNFbXB0eSIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZm9yRWFjaEFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==