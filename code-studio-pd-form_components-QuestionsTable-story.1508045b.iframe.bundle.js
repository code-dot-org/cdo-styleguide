(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[3202],{"./src/code-studio/pd/form_components/QuestionsTable.jsx":(module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var questionPropType=_propTypes.default.shape({label:_propTypes.default.string.isRequired,name:_propTypes.default.string.isRequired,required:_propTypes.default.bool}),QuestionRow=function(_React$Component){function QuestionRow(props){var _this;return(_this=_React$Component.call(this,props)||this).buildColumn=_this.buildColumn.bind(_this),_this.getValidationState=_this.getValidationState.bind(_this),_this.handleChange=_this.handleChange.bind(_this),_this}_inheritsLoose(QuestionRow,_React$Component);var _proto=QuestionRow.prototype;return _proto.getValidationState=function getValidationState(){if(this.props.errors&&this.props.errors.includes(this.props.question.name))return"error"},_proto.handleChange=function handleChange(event){var value=event.target.value;this.props.onChange&&this.props.onChange(_defineProperty({},this.props.question.name,value))},_proto.buildColumn=function buildColumn(option,i){var key=this.props.question.name,checked=this.props.data&&this.props.data[key]===option;return _react.default.createElement("td",{key:key+i},_react.default.createElement(_reactBootstrap.FormGroup,{controlId:key,validationState:this.getValidationState()},_react.default.createElement(_reactBootstrap.Radio,{name:key,value:option,checked,onChange:this.handleChange})))},_proto.render=function render(){return _react.default.createElement("tr",null,_react.default.createElement("td",null,_react.default.createElement(_reactBootstrap.FormGroup,{controlId:this.props.question.name,validationState:this.getValidationState()},_react.default.createElement(_reactBootstrap.ControlLabel,null,this.props.question.label,this.props.question.required&&_react.default.createElement("span",{className:"form-required-field"}," *")))),this.props.options.map(this.buildColumn))},QuestionRow}(_react.default.Component);QuestionRow.propTypes={data:_propTypes.default.object,errors:_propTypes.default.arrayOf(_propTypes.default.string),onChange:_propTypes.default.func,options:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,question:questionPropType};var QuestionsTable=exports.default=function(_React$Component2){function QuestionsTable(){return _React$Component2.apply(this,arguments)||this}return _inheritsLoose(QuestionsTable,_React$Component2),QuestionsTable.prototype.render=function render(){var _this2=this,columns=this.props.options.length+this.props.labelSpan,thStyle={width:"".concat(100/columns,"%"),backgroundColor:"#00b2c0",color:"white"},labelThStyle=_objectSpread(_objectSpread({},thStyle),{},{width:"".concat(100*this.props.labelSpan/columns,"%")});return _react.default.createElement(_reactBootstrap.FormGroup,null,_react.default.createElement(_reactBootstrap.ControlLabel,null,this.props.label),_react.default.createElement(_reactBootstrap.Table,{striped:!0,bordered:!0},_react.default.createElement("thead",null,_react.default.createElement("tr",null,_react.default.createElement("th",{style:labelThStyle}),this.props.options.map((function(option){return _react.default.createElement("th",{key:option,style:thStyle},_react.default.createElement(_reactBootstrap.ControlLabel,null,option))})))),_react.default.createElement("tbody",null,this.props.questions.map((function(question){return _react.default.createElement(QuestionRow,{key:question.name,question,data:_this2.props.data,errors:_this2.props.errors,onChange:_this2.props.onChange,options:_this2.props.options})})))))},QuestionsTable}(_react.default.Component);QuestionsTable.propTypes={data:_propTypes.default.object,errors:_propTypes.default.arrayOf(_propTypes.default.string),labelSpan:_propTypes.default.number,onChange:_propTypes.default.func,options:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,questions:_propTypes.default.arrayOf(questionPropType).isRequired,label:_propTypes.default.string},QuestionsTable.defaultProps={labelSpan:1},module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/code-studio/pd/form_components/QuestionsTable.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.SimpleQuestionsTable=exports.ControlledQuestionsTable=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_QuestionsTable=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/QuestionsTable.jsx")),_addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var TestWrapper=function(_React$Component){function TestWrapper(props){var _this;return(_this=_React$Component.call(this,props)||this).state={data:_this.props.data||{}},_this.handleChange=_this.handleChange.bind(_this),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(TestWrapper,_React$Component);var _proto=TestWrapper.prototype;return _proto.handleChange=function handleChange(newState){this.props.onChange(newState),this.setState({data:newState.full})},_proto.render=function render(){return _react.default.createElement("div",{id:"application-container"},_react.default.createElement(_QuestionsTable.default,{data:this.state.data,questions:this.props.questions,options:this.props.options,errors:this.props.errors,onChange:this.handleChange}))},TestWrapper}(_react.default.Component);TestWrapper.propTypes={data:_propTypes.default.object,questions:_propTypes.default.arrayOf(_propTypes.default.object).isRequired,options:_propTypes.default.arrayOf(_propTypes.default.string).isRequired,errors:_propTypes.default.arrayOf(_propTypes.default.string),onChange:_propTypes.default.func.isRequired};exports.default={title:"FormComponents/QuestionsTable",component:_QuestionsTable.default};var Template=function Template(args){return _react.default.createElement(TestWrapper,args)};(exports.SimpleQuestionsTable=Template.bind({})).args={onChange:(0,_addonActions.action)("onChange"),options:["this is cool","this is okay","this is useless"],questions:[{label:"what do you think of this component?",name:"thinkOfComponent",required:!0},{label:"what do you think of this story?",name:"thinkOfStory"},{label:"what do you think of this question?",name:"thinkOfQuestion"}]},(exports.ControlledQuestionsTable=Template.bind({})).args={data:{theOneThatIsSelected:"first"},errors:["theOneWithTheError"],onChange:(0,_addonActions.action)("onChange"),options:["first","second","third"],questions:[{label:"this one should have something selected",name:"theOneThatIsSelected"},{label:"this one should have an error",name:"theOneWithTheError"},{label:"this one should be plain",name:"theOtherOne"}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,