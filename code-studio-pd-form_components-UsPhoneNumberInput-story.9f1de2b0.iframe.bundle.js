(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[6434],{"./src/code-studio/pd/form_components/FieldGroup.jsx":(module,exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactBootstrap=__webpack_require__("./node_modules/react-bootstrap/es/index.js"),_excluded=["id","validationState","errorMessage","label","required","onChange","children","labelWidth","controlWidth","inlineControl"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var REQUIRED=_react.default.createElement("span",{style:{color:"red"}},"Â *"),FieldGroup=exports.default=function(_React$Component){function FieldGroup(props){var _this;return(_this=_React$Component.call(this,props)||this).handleChange=_this.handleChange.bind(_this),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(FieldGroup,_React$Component);var _proto=FieldGroup.prototype;return _proto.handleChange=function handleChange(event){var value=event.target.value;("number"!==this.props.type||value.match(/^$|^-?[0-9]*\.?[0-9]*$/))&&this.props.onChange&&this.props.onChange(_defineProperty({},this.props.id,value))},_proto.renderControl=function renderControl(controlWidth,children,props){var updatedProps=_objectSpread(_objectSpread({},props),{},{type:"number"===props.type?"text":props.type});return _react.default.createElement(_reactBootstrap.Col,controlWidth,_react.default.createElement(_reactBootstrap.FormControl,_extends({onChange:this.handleChange},updatedProps),children))},_proto.render=function render(){var _this$props=this.props,id=_this$props.id,validationState=_this$props.validationState,errorMessage=_this$props.errorMessage,label=_this$props.label,required=_this$props.required,children=(_this$props.onChange,_this$props.children),labelWidth=_this$props.labelWidth,controlWidth=_this$props.controlWidth,inlineControl=_this$props.inlineControl,props=_objectWithoutProperties(_this$props,_excluded);return _react.default.createElement(_reactBootstrap.FormGroup,{controlId:id,validationState},_react.default.createElement(_reactBootstrap.Row,null,_react.default.createElement(_reactBootstrap.Col,labelWidth,_react.default.createElement(_reactBootstrap.ControlLabel,null,label,required&&REQUIRED)),inlineControl&&this.renderControl(controlWidth,children,props)),!inlineControl&&_react.default.createElement(_reactBootstrap.Row,null,this.renderControl(controlWidth,children,props)),_react.default.createElement(_reactBootstrap.HelpBlock,null,errorMessage))},FieldGroup}(_react.default.Component);FieldGroup.defaultProps={labelWidth:{md:12},controlWidth:{md:12}},FieldGroup.propTypes={id:_propTypes.default.string.isRequired,type:_propTypes.default.string,label:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.element]).isRequired,required:_propTypes.default.bool,validationState:_propTypes.default.string,errorMessage:_propTypes.default.string,children:_propTypes.default.arrayOf(_propTypes.default.node),onChange:_propTypes.default.func,labelWidth:_propTypes.default.object,controlWidth:_propTypes.default.object,inlineControl:_propTypes.default.bool},module.exports=exports.default},"./src/code-studio/pd/form_components/UsPhoneNumberInput.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_FieldGroup=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/FieldGroup.jsx")),_excluded=["name","label","validationState","errorMessage","required","value","onChange"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var PHONE_NUMBER_REGEX=/(\()?(\(?\d{1,3})?(\) ?)?(\d{1,3})?(-| )?(\d{1,4})?/,UsPhoneNumberInput=exports.default=function(_React$Component){function UsPhoneNumberInput(props){var _this;return _defineProperty(_this=_React$Component.call(this,props)||this,"handleChange",(function(change){var phoneNumber=UsPhoneNumberInput.coercePhoneNumber(change[_this.props.name]);_this.setState({value:phoneNumber});var phoneNumberDigits=UsPhoneNumberInput.toJustNumbers(phoneNumber);_this.props.onChange&&phoneNumberDigits!==UsPhoneNumberInput.toJustNumbers(_this.props.value)&&_this.props.onChange(_defineProperty({},_this.props.name,phoneNumberDigits))})),_this.state={value:UsPhoneNumberInput.coercePhoneNumber(_this.props.value)},_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(UsPhoneNumberInput,_React$Component),UsPhoneNumberInput.isValid=function isValid(value){return/^\d{10}$/.test(value)},UsPhoneNumberInput.coercePhoneNumber=function coercePhoneNumber(value){var match=PHONE_NUMBER_REGEX.exec(value),phoneNumber="";return match&&(match[1]&&!match[2]?phoneNumber=match[1]:match[2]&&(phoneNumber="(".concat(match[2]),3===match[2].length&&(match[3]&&!match[4]?phoneNumber+=match[3]:match[4]&&(phoneNumber+=") ".concat(match[4]),3===match[4].length&&(match[5]&&!match[6]?phoneNumber+="-":match[6]&&(phoneNumber+="-".concat(match[6]))))))),phoneNumber},UsPhoneNumberInput.toJustNumbers=function toJustNumbers(value){return"string"==typeof value?value.replace(/[^\d]/g,""):""},UsPhoneNumberInput.prototype.render=function render(){var _this$props=this.props,name=_this$props.name,label=_this$props.label,validationState=_this$props.validationState,errorMessage=_this$props.errorMessage,required=_this$props.required,props=(_this$props.value,_this$props.onChange,_objectWithoutProperties(_this$props,_excluded));return _react.default.createElement("div",null,_react.default.createElement(_FieldGroup.default,_extends({key:name,id:name,type:"text",label,validationState,errorMessage,onChange:this.handleChange,value:this.state.value||"",required,placeholder:"(xxx) xxx-xxxx"},props)))},UsPhoneNumberInput}(_react.default.Component);_defineProperty(UsPhoneNumberInput,"propTypes",{name:_propTypes.default.string.isRequired,label:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.element]).isRequired,value:_propTypes.default.string,validationState:_propTypes.default.string,errorMessage:_propTypes.default.string,required:_propTypes.default.bool,onChange:_propTypes.default.func}),module.exports=exports.default},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./src/code-studio/pd/form_components/UsPhoneNumberInput.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DefaultPhoneInput=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_UsPhoneNumberInput=_interopRequireDefault(__webpack_require__("./src/code-studio/pd/form_components/UsPhoneNumberInput.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={component:_UsPhoneNumberInput.default};(exports.DefaultPhoneInput=function Template(args){return _react.default.createElement(_UsPhoneNumberInput.default,args)}.bind({})).args={name:"Storybook",label:"Enter a phone number"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,