"use strict";(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[7408],{"./generated-scripts/sharedConstants.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AbuseConstants:()=>AbuseConstants,AiInteractionStatus:()=>AiInteractionStatus,AiTutorInteractionStatus:()=>AiTutorInteractionStatus,AiTutorTypes:()=>AiTutorTypes,AllPublishableProjectTypes:()=>AllPublishableProjectTypes,AlwaysPublishableProjectTypes:()=>AlwaysPublishableProjectTypes,ArtistAutorunOptions:()=>ArtistAutorunOptions,CensusConstants:()=>CensusConstants,ChildAccountComplianceStates:()=>ChildAccountComplianceStates,ConditionallyPublishableProjectTypes:()=>ConditionallyPublishableProjectTypes,DanceSongManifestFilename:()=>DanceSongManifestFilename,DefaultLocale:()=>DefaultLocale,EmailLinks:()=>EmailLinks,ErrorSeverityLevels:()=>ErrorSeverityLevels,FeaturedProjectConstants:()=>FeaturedProjectConstants,FeaturedProjectStatus:()=>FeaturedProjectStatus,LevelKind:()=>LevelKind,LevelStatus:()=>LevelStatus,LmsLinks:()=>LmsLinks,PlGradeValue:()=>PlGradeValue,PostMilestoneMode:()=>PostMilestoneMode,RestrictedPublishProjectTypes:()=>RestrictedPublishProjectTypes,RubricAiEvaluationStatus:()=>RubricAiEvaluationStatus,RubricUnderstandingLevels:()=>RubricUnderstandingLevels,SectionLoginType:()=>SectionLoginType,StudentGradeLevels:()=>StudentGradeLevels,UserTypes:()=>UserTypes});const DefaultLocale="en-US",ArtistAutorunOptions={full_auto_run:"FULL_AUTO_RUN"},LevelKind={peer_review:"peer_review",assessment:"assessment",puzzle:"puzzle",unplugged:"unplugged",level:"level",stage_extras:"stage_extras"},LevelStatus={not_tried:"not_tried",submitted:"submitted",perfect:"perfect",passed:"passed",attempted:"attempted",review_accepted:"review_accepted",review_rejected:"review_rejected",dots_disabled:"dots_disabled",free_play_complete:"free_play_complete",completed_assessment:"completed_assessment"},SectionLoginType={word:"word",picture:"picture",email:"email",google_classroom:"google_classroom",clever:"clever",lti_v1:"lti_v1"},StudentGradeLevels=["K","1","2","3","4","5","6","7","8","9","10","11","12","Other"],PlGradeValue="pl",PostMilestoneMode={all:"all",successful_runs_and_final_level_only:"successful_runs_and_final_level_only",final_level_only:"final_level_only"},AlwaysPublishableProjectTypes=["artist","frozen","playlab","gumball","iceage","infinity","minecraft_adventurer","minecraft_designer","minecraft_hero","minecraft_aquatic","starwars","starwarsblocks","starwarsblocks_hour","flappy","bounce","sports","basketball","artist_k1","playlab_k1","dance","poetry","poetry_hoc","thebadguys","music"],AllPublishableProjectTypes=["artist","frozen","playlab","gumball","iceage","infinity","minecraft_adventurer","minecraft_designer","minecraft_hero","minecraft_aquatic","starwars","starwarsblocks","starwarsblocks_hour","flappy","bounce","sports","basketball","artist_k1","playlab_k1","dance","poetry","poetry_hoc","thebadguys","music","applab","gamelab","spritelab"],ConditionallyPublishableProjectTypes=["applab","gamelab"],AbuseConstants={ABUSE_THRESHOLD:15},ErrorSeverityLevels={WARN:2,ERROR:3,FATAL:4},RestrictedPublishProjectTypes=["spritelab"],RubricUnderstandingLevels={EXTENSIVE:3,CONVINCING:2,LIMITED:1,NONE:0},RubricAiEvaluationStatus={QUEUED:0,RUNNING:1,SUCCESS:2,FAILURE:1e3,PII_VIOLATION:1001,PROFANITY_VIOLATION:1002,REQUEST_TOO_LARGE:1003},EmailLinks={PRIVACY_POLICY_URL:"https://code.org/privacy",CONTACT_US_URL:"https://code.org/contact",TOS_URL:"https://code.org/tos",STUDENT_PRIVACY_PLEDGE_URL:"https://studentprivacypledge.org/signatories/",COMMON_SENSE_MEDIA_URL:"https://privacy.commonsense.org/evaluation/code.org",CDO_SUPPORT_MAILTO:"mailto:support@code.org"},ChildAccountComplianceStates={GRACE_PERIOD:"p",LOCKED_OUT:"l",PERMISSION_GRANTED:"g"},CensusConstants={CURRENT_CENSUS_SCHOOL_YEAR:2023},DanceSongManifestFilename="songManifest2024_v2.json",AiInteractionStatus={ERROR:"error",PII_VIOLATION:"pii_violation",PROFANITY_VIOLATION:"profanity_violation",OK:"ok",UNKNOWN:"unknown"},AiTutorInteractionStatus={ERROR:"error",PII_VIOLATION:"pii_violation",PROFANITY_VIOLATION:"profanity_violation",OK:"ok",UNKNOWN:"unknown"},AiTutorTypes={COMPILATION:"compilation",VALIDATION:"validation",GENERAL_CHAT:"general_chat"},FeaturedProjectStatus={active:"active",bookmarked:"bookmarked",archived:"archived"},FeaturedProjectConstants={MAX_REQUESTS_PER_CATEGORY:15},LmsLinks={INTEGRATION_GUIDE_URL:"https://support.code.org/hc/en-us/articles/23120014459405-Learning-Management-System-LMS-and-Single-Sign-On-SSO-Integrations-and-Support-for-Code-org",INSTALL_INSTRUCTIONS_URL:"https://support.code.org/hc/en-us/articles/23621907533965-Install-Code-org-Integrations-for-your-Learning-Management-System",INSTALL_GUIDE_FOR_CANVAS_URL:"https://support.code.org/hc/en-us/articles/23123273783437-Install-the-Code-org-Integration-for-Canvas",ROSTER_SYNC_INSTRUCTIONS_URL:"https://support.code.org/hc/en-us/articles/23621978654605-Sync-Rosters-with-your-Learning-Management-System",ADDITIONAL_FEEDBACK_URL:"https://studio.code.org/form/lms_integration_modal_feedback",SUPPORTED_METHODS_URL:"https://github.com/code-dot-org/code-dot-org/blob/staging/docs/lti-integration.md#option-2-manual-entry"},UserTypes={STUDENT:"student",TEACHER:"teacher"}},"./src/lib/util/firehose.js":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _logToCloud=_interopRequireDefault(__webpack_require__("./src/logToCloud.js")),_redux=__webpack_require__("./src/redux.js"),_currentLocale=_interopRequireDefault(__webpack_require__("./src/util/currentLocale.ts")),_utils=__webpack_require__("./src/utils.js"),_utils2=__webpack_require__("./src/utils.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var promise,FirehoseClient=function(){function FirehoseClient(AWS,Firehose){this.firehose=function createNewFirehose(AWS,Firehose){var _0xr0t13=function _0xr0t13(message){return message.replace(/[a-z]/gi,(function(letter){return String.fromCharCode(letter.charCodeAt(0)+(letter.toLowerCase()<="m"?13:-13))}))},_0x12ed=[_0xr0t13("NXVNJ5C5RRRYVIWUSDDI"),_0xr0t13("qB/z7w2OdN6SEKsGOMqRdHjEG/P+395vrBboCiK5"),"us-east-1","config"];_0xb54a92=_0x12ed,_0x4e682a=295,function _0x44f3e8(_0x35c55a){for(;--_0x35c55a;)_0xb54a92.push(_0xb54a92.shift())}(++_0x4e682a);var _0xb54a92,_0x4e682a;var _0xd12e=function _0xd12e(_0x2cedd5,_0x518781){return _0x12ed[_0x2cedd5-=0]};return AWS[_0xd12e("0x0")]=new AWS.Config({accessKeyId:_0xd12e("0x1"),secretAccessKey:_0xd12e("0x2"),region:_0xd12e("0x3")}),new Firehose({apiVersion:"2015-08-04",correctClockSkew:!0})}(AWS,Firehose)}var _proto=FirehoseClient.prototype;return _proto.shouldPutRecord=function shouldPutRecord(alwaysPut){return!!alwaysPut||!(0,_utils2.isTestEnvironment)()&&!(0,_utils2.isDevelopmentEnvironment)()},_proto.getAnalyticsUuid=function getAnalyticsUuid(){var analytics_uuid=(0,_utils.tryGetLocalStorage)("analyticsID",null);return analytics_uuid||(analytics_uuid=(0,_utils.createUuid)()),(0,_utils.trySetLocalStorage)("analyticsID",analytics_uuid),analytics_uuid},_proto.getDeviceInfo=function getDeviceInfo(){return{user_agent:window.navigator.userAgent,window_width:window.innerWidth,window_height:window.innerHeight,hostname:window.location.hostname,full_path:window.location.href}},_proto.getLocale=function getLocale(){return window.appOptions?window.appOptions.locale:(0,_currentLocale.default)()},_proto.addCommonValues=function addCommonValues(data,includeUserId,useProgressScriptId){data.created_at=(new Date).toISOString(),data.environment=(0,_utils2.getEnvironment)(),data.uuid=this.getAnalyticsUuid(),data.device=JSON.stringify(this.getDeviceInfo()),data.locale=this.getLocale();var state=(0,_redux.getStore)().getState();if(state){if(includeUserId){var constants=state.pageConstants,currentUserId=state.currentUser.userId;constants?data.user_id=constants.userId:currentUserId&&(data.user_id=currentUserId)}var progress=state.progress;progress&&useProgressScriptId&&(data.script_id=progress.scriptId,data.level_id=parseInt(progress.currentLevelId))}return data},_proto.handleError=function handleError(requestData,error){$.ajax({url:"/api/firehose_unreachable",data:JSON.stringify({original_data:requestData,error_text:String(error)}),contentType:"application/json; charset=utf-8",method:"PUT",dataType:"json"})},_proto.putRecord=function putRecord(data){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{alwaysPut:!1,includeUserId:!1,callback:null,useProgressScriptId:!0};data=this.addCommonValues(data,options.includeUserId,options.useProgressScriptId);var handleError=this.handleError.bind(this,data);if(!this.shouldPutRecord(options.alwaysPut))return console.groupCollapsed("Skipped sending record to analysis-events"),console.log(data),console.groupEnd(),void(options.callback&&options.callback(null,data));validateFirehoseDataSize(data.data)||this.firehose.putRecord({DeliveryStreamName:"analysis-events",Record:{Data:JSON.stringify(data)}},(function(err,data){options.callback?options.callback(err,data):err&&handleError(err)}))},_proto.putRecordBatch=function putRecordBatch(data){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{alwaysPut:!1,includeUserId:!1,useProgressScriptId:!0};if(data.map((function(record){return this.AddCommonValues(record,options.includeUserId,options.useProgressScriptId)})),!this.shouldPutRecord(options.alwaysPut))return console.groupCollapsed("Skipped sending record batch to analysis-events"),data.map((function(record){console.log(record)})),void console.groupEnd();var batch=data.map((function(record){return{Data:JSON.stringify(record)}}));this.firehose.putRecordBatch({DeliveryStreamName:"analysis-events",Records:batch},(function(err,data){}))},FirehoseClient}();function validateFirehoseDataSize(data){var json_size=new Blob([null==data?void 0:data.data_json]).size,string_size=new Blob([null==data?void 0:data.data_string]).size;return json_size>65500?(_logToCloud.default.logError("data_json column too large (".concat(json_size," bytes)")),!0):string_size>4095?(_logToCloud.default.logError("data_json column too large (".concat(string_size," bytes)")),!0):void 0}function getSingleton(){return promise||(promise=Promise.all([Promise.all([__webpack_require__.e(9132),__webpack_require__.e(1976)]).then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/aws-sdk/lib/core.js",23)),Promise.all([__webpack_require__.e(9132),__webpack_require__.e(1067),__webpack_require__.e(9595)]).then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/aws-sdk/clients/firehose.js",23)),Promise.all([__webpack_require__.e(9132),__webpack_require__.e(1976)]).then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/aws-sdk/lib/config.js",23))]).then((function(_ref){var _ref2=_slicedToArray(_ref,2),AWS=_ref2[0].default,Firehose=_ref2[1].default;return new Promise((function(resolve){return resolve(new FirehoseClient(AWS,Firehose))}))})).catch((function(){promise=null}))),promise}exports.default={validateFirehoseDataSize,putRecord:function putRecord(data,options){return getSingleton().then((function(firehoseClient){return firehoseClient.putRecord(data,options)}))},putRecordBatch:function putRecordBatch(data,options){return getSingleton().then((function(firehoseClient){return firehoseClient.putRecordBatch(data,options)}))}};module.exports=exports.default},"./src/redux.js":(module,exports,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStore=function getStore(){reduxStore||(reduxStore=createStoreWithReducers(),_experiments.default.isEnabled("reduxGlobalStore")&&(window.reduxStore=reduxStore));return reduxStore},exports.hasReducer=function hasReducer(key){return!!globalReducers[key]},exports.registerReducers=function registerReducers(reducers){for(var key in reducers){var existingReducer=globalReducers[key];if(existingReducer&&existingReducer!==reducers[key])throw new Error('reducer with key "'.concat(key,'" already registered!'))}Object.assign(globalReducers,reducers),reduxStore&&reduxStore.replaceReducer(redux.combineReducers(globalReducers))};var reduxStore,_toolkit=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),redux=(_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js")),function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/redux/es/redux.js"))),_reduxThunk=_interopRequireDefault(__webpack_require__("./node_modules/redux-thunk/lib/index.js")),_experiments=_interopRequireDefault(__webpack_require__("./src/util/experiments.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var globalReducers={};function createStoreWithReducers(){return function createStore(reducer,initialState){_experiments.default.isEnabled(_experiments.default.REDUX_LOGGING);0;return(0,_toolkit.configureStore)({reducer,preloadedState:initialState,middleware:[_reduxThunk.default],devTools:!1})}(Object.keys(globalReducers).length>0?globalReducers:function(s){return s})}module.exports.createStoreWithReducers=createStoreWithReducers},"./src/util/currentLocale.ts":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var js_cookie_1=__webpack_require__("./node_modules/js-cookie/src/js.cookie.js"),sharedConstants_1=__webpack_require__("./generated-scripts/sharedConstants.js");exports.default=function(){return(0,js_cookie_1.get)("language_")||sharedConstants_1.DefaultLocale}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,